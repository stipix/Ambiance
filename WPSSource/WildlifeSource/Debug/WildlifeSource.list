
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000259bc  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10065a7c  10065a7c  00026a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10065a80  10065a80  00026a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000790  10065a84  10065a84  00026a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  10066214  10066214  00027214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000238  200010c4  1006621c  000280c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00029004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  00029004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  00029004  2**2
                  ALLOC
 10 .bss          00000f30  20000194  20000194  00029004  2**2
                  ALLOC
 11 .noinit       0000223c  200012fc  10066454  000282fc  2**2
                  ALLOC
 12 .ota_region_end 00000000  10066454  10066454  000282fc  2**0
                  CONTENTS
 13 .heap         00000000  20003538  20003538  000282fc  2**0
                  CONTENTS
 14 .stack        00000c00  20005400  20005400  00028400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  000282fc  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  000282fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002e89e  00000000  00000000  00028328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007e53  00000000  00000000  00056bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003588  00000000  00000000  0005ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002874  00000000  00000000  00061fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00027f42  00000000  00000000  0006481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003cced  00000000  00000000  0008c75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000d5f50  00000000  00000000  000c944b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      0000023b  00000000  00000000  0019f39b  2**0
                  CONTENTS, READONLY
 25 .arm_vfe_header 00000004  00000000  00000000  0019f5d8  2**2
                  CONTENTS, READONLY
 26 .debug_frame  0000d200  00000000  00000000  0019f5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000f4  00000000  00000000  001ac7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strlen>:
1004021c:	2300      	movs	r3, #0
1004021e:	5cc2      	ldrb	r2, [r0, r3]
10040220:	3301      	adds	r3, #1
10040222:	2a00      	cmp	r2, #0
10040224:	d1fb      	bne.n	1004021e <strlen+0x2>
10040226:	1e58      	subs	r0, r3, #1
10040228:	4770      	bx	lr
	...

1004022c <__gnu_thumb1_case_shi>:
1004022c:	b403      	push	{r0, r1}
1004022e:	4671      	mov	r1, lr
10040230:	0849      	lsrs	r1, r1, #1
10040232:	0040      	lsls	r0, r0, #1
10040234:	0049      	lsls	r1, r1, #1
10040236:	5e09      	ldrsh	r1, [r1, r0]
10040238:	0049      	lsls	r1, r1, #1
1004023a:	448e      	add	lr, r1
1004023c:	bc03      	pop	{r0, r1}
1004023e:	4770      	bx	lr

10040240 <__udivsi3>:
10040240:	2200      	movs	r2, #0
10040242:	0843      	lsrs	r3, r0, #1
10040244:	428b      	cmp	r3, r1
10040246:	d374      	bcc.n	10040332 <__udivsi3+0xf2>
10040248:	0903      	lsrs	r3, r0, #4
1004024a:	428b      	cmp	r3, r1
1004024c:	d35f      	bcc.n	1004030e <__udivsi3+0xce>
1004024e:	0a03      	lsrs	r3, r0, #8
10040250:	428b      	cmp	r3, r1
10040252:	d344      	bcc.n	100402de <__udivsi3+0x9e>
10040254:	0b03      	lsrs	r3, r0, #12
10040256:	428b      	cmp	r3, r1
10040258:	d328      	bcc.n	100402ac <__udivsi3+0x6c>
1004025a:	0c03      	lsrs	r3, r0, #16
1004025c:	428b      	cmp	r3, r1
1004025e:	d30d      	bcc.n	1004027c <__udivsi3+0x3c>
10040260:	22ff      	movs	r2, #255	@ 0xff
10040262:	0209      	lsls	r1, r1, #8
10040264:	ba12      	rev	r2, r2
10040266:	0c03      	lsrs	r3, r0, #16
10040268:	428b      	cmp	r3, r1
1004026a:	d302      	bcc.n	10040272 <__udivsi3+0x32>
1004026c:	1212      	asrs	r2, r2, #8
1004026e:	0209      	lsls	r1, r1, #8
10040270:	d065      	beq.n	1004033e <__udivsi3+0xfe>
10040272:	0b03      	lsrs	r3, r0, #12
10040274:	428b      	cmp	r3, r1
10040276:	d319      	bcc.n	100402ac <__udivsi3+0x6c>
10040278:	e000      	b.n	1004027c <__udivsi3+0x3c>
1004027a:	0a09      	lsrs	r1, r1, #8
1004027c:	0bc3      	lsrs	r3, r0, #15
1004027e:	428b      	cmp	r3, r1
10040280:	d301      	bcc.n	10040286 <__udivsi3+0x46>
10040282:	03cb      	lsls	r3, r1, #15
10040284:	1ac0      	subs	r0, r0, r3
10040286:	4152      	adcs	r2, r2
10040288:	0b83      	lsrs	r3, r0, #14
1004028a:	428b      	cmp	r3, r1
1004028c:	d301      	bcc.n	10040292 <__udivsi3+0x52>
1004028e:	038b      	lsls	r3, r1, #14
10040290:	1ac0      	subs	r0, r0, r3
10040292:	4152      	adcs	r2, r2
10040294:	0b43      	lsrs	r3, r0, #13
10040296:	428b      	cmp	r3, r1
10040298:	d301      	bcc.n	1004029e <__udivsi3+0x5e>
1004029a:	034b      	lsls	r3, r1, #13
1004029c:	1ac0      	subs	r0, r0, r3
1004029e:	4152      	adcs	r2, r2
100402a0:	0b03      	lsrs	r3, r0, #12
100402a2:	428b      	cmp	r3, r1
100402a4:	d301      	bcc.n	100402aa <__udivsi3+0x6a>
100402a6:	030b      	lsls	r3, r1, #12
100402a8:	1ac0      	subs	r0, r0, r3
100402aa:	4152      	adcs	r2, r2
100402ac:	0ac3      	lsrs	r3, r0, #11
100402ae:	428b      	cmp	r3, r1
100402b0:	d301      	bcc.n	100402b6 <__udivsi3+0x76>
100402b2:	02cb      	lsls	r3, r1, #11
100402b4:	1ac0      	subs	r0, r0, r3
100402b6:	4152      	adcs	r2, r2
100402b8:	0a83      	lsrs	r3, r0, #10
100402ba:	428b      	cmp	r3, r1
100402bc:	d301      	bcc.n	100402c2 <__udivsi3+0x82>
100402be:	028b      	lsls	r3, r1, #10
100402c0:	1ac0      	subs	r0, r0, r3
100402c2:	4152      	adcs	r2, r2
100402c4:	0a43      	lsrs	r3, r0, #9
100402c6:	428b      	cmp	r3, r1
100402c8:	d301      	bcc.n	100402ce <__udivsi3+0x8e>
100402ca:	024b      	lsls	r3, r1, #9
100402cc:	1ac0      	subs	r0, r0, r3
100402ce:	4152      	adcs	r2, r2
100402d0:	0a03      	lsrs	r3, r0, #8
100402d2:	428b      	cmp	r3, r1
100402d4:	d301      	bcc.n	100402da <__udivsi3+0x9a>
100402d6:	020b      	lsls	r3, r1, #8
100402d8:	1ac0      	subs	r0, r0, r3
100402da:	4152      	adcs	r2, r2
100402dc:	d2cd      	bcs.n	1004027a <__udivsi3+0x3a>
100402de:	09c3      	lsrs	r3, r0, #7
100402e0:	428b      	cmp	r3, r1
100402e2:	d301      	bcc.n	100402e8 <__udivsi3+0xa8>
100402e4:	01cb      	lsls	r3, r1, #7
100402e6:	1ac0      	subs	r0, r0, r3
100402e8:	4152      	adcs	r2, r2
100402ea:	0983      	lsrs	r3, r0, #6
100402ec:	428b      	cmp	r3, r1
100402ee:	d301      	bcc.n	100402f4 <__udivsi3+0xb4>
100402f0:	018b      	lsls	r3, r1, #6
100402f2:	1ac0      	subs	r0, r0, r3
100402f4:	4152      	adcs	r2, r2
100402f6:	0943      	lsrs	r3, r0, #5
100402f8:	428b      	cmp	r3, r1
100402fa:	d301      	bcc.n	10040300 <__udivsi3+0xc0>
100402fc:	014b      	lsls	r3, r1, #5
100402fe:	1ac0      	subs	r0, r0, r3
10040300:	4152      	adcs	r2, r2
10040302:	0903      	lsrs	r3, r0, #4
10040304:	428b      	cmp	r3, r1
10040306:	d301      	bcc.n	1004030c <__udivsi3+0xcc>
10040308:	010b      	lsls	r3, r1, #4
1004030a:	1ac0      	subs	r0, r0, r3
1004030c:	4152      	adcs	r2, r2
1004030e:	08c3      	lsrs	r3, r0, #3
10040310:	428b      	cmp	r3, r1
10040312:	d301      	bcc.n	10040318 <__udivsi3+0xd8>
10040314:	00cb      	lsls	r3, r1, #3
10040316:	1ac0      	subs	r0, r0, r3
10040318:	4152      	adcs	r2, r2
1004031a:	0883      	lsrs	r3, r0, #2
1004031c:	428b      	cmp	r3, r1
1004031e:	d301      	bcc.n	10040324 <__udivsi3+0xe4>
10040320:	008b      	lsls	r3, r1, #2
10040322:	1ac0      	subs	r0, r0, r3
10040324:	4152      	adcs	r2, r2
10040326:	0843      	lsrs	r3, r0, #1
10040328:	428b      	cmp	r3, r1
1004032a:	d301      	bcc.n	10040330 <__udivsi3+0xf0>
1004032c:	004b      	lsls	r3, r1, #1
1004032e:	1ac0      	subs	r0, r0, r3
10040330:	4152      	adcs	r2, r2
10040332:	1a41      	subs	r1, r0, r1
10040334:	d200      	bcs.n	10040338 <__udivsi3+0xf8>
10040336:	4601      	mov	r1, r0
10040338:	4152      	adcs	r2, r2
1004033a:	4610      	mov	r0, r2
1004033c:	4770      	bx	lr
1004033e:	e7ff      	b.n	10040340 <__udivsi3+0x100>
10040340:	b501      	push	{r0, lr}
10040342:	2000      	movs	r0, #0
10040344:	f000 f8f0 	bl	10040528 <__aeabi_idiv0>
10040348:	bd02      	pop	{r1, pc}
1004034a:	46c0      	nop			@ (mov r8, r8)

1004034c <__aeabi_uidivmod>:
1004034c:	2900      	cmp	r1, #0
1004034e:	d0f7      	beq.n	10040340 <__udivsi3+0x100>
10040350:	e776      	b.n	10040240 <__udivsi3>
10040352:	4770      	bx	lr

10040354 <__divsi3>:
10040354:	4603      	mov	r3, r0
10040356:	430b      	orrs	r3, r1
10040358:	d47f      	bmi.n	1004045a <__divsi3+0x106>
1004035a:	2200      	movs	r2, #0
1004035c:	0843      	lsrs	r3, r0, #1
1004035e:	428b      	cmp	r3, r1
10040360:	d374      	bcc.n	1004044c <__divsi3+0xf8>
10040362:	0903      	lsrs	r3, r0, #4
10040364:	428b      	cmp	r3, r1
10040366:	d35f      	bcc.n	10040428 <__divsi3+0xd4>
10040368:	0a03      	lsrs	r3, r0, #8
1004036a:	428b      	cmp	r3, r1
1004036c:	d344      	bcc.n	100403f8 <__divsi3+0xa4>
1004036e:	0b03      	lsrs	r3, r0, #12
10040370:	428b      	cmp	r3, r1
10040372:	d328      	bcc.n	100403c6 <__divsi3+0x72>
10040374:	0c03      	lsrs	r3, r0, #16
10040376:	428b      	cmp	r3, r1
10040378:	d30d      	bcc.n	10040396 <__divsi3+0x42>
1004037a:	22ff      	movs	r2, #255	@ 0xff
1004037c:	0209      	lsls	r1, r1, #8
1004037e:	ba12      	rev	r2, r2
10040380:	0c03      	lsrs	r3, r0, #16
10040382:	428b      	cmp	r3, r1
10040384:	d302      	bcc.n	1004038c <__divsi3+0x38>
10040386:	1212      	asrs	r2, r2, #8
10040388:	0209      	lsls	r1, r1, #8
1004038a:	d065      	beq.n	10040458 <__divsi3+0x104>
1004038c:	0b03      	lsrs	r3, r0, #12
1004038e:	428b      	cmp	r3, r1
10040390:	d319      	bcc.n	100403c6 <__divsi3+0x72>
10040392:	e000      	b.n	10040396 <__divsi3+0x42>
10040394:	0a09      	lsrs	r1, r1, #8
10040396:	0bc3      	lsrs	r3, r0, #15
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x4c>
1004039c:	03cb      	lsls	r3, r1, #15
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	0b83      	lsrs	r3, r0, #14
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x58>
100403a8:	038b      	lsls	r3, r1, #14
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0b43      	lsrs	r3, r0, #13
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x64>
100403b4:	034b      	lsls	r3, r1, #13
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	0b03      	lsrs	r3, r0, #12
100403bc:	428b      	cmp	r3, r1
100403be:	d301      	bcc.n	100403c4 <__divsi3+0x70>
100403c0:	030b      	lsls	r3, r1, #12
100403c2:	1ac0      	subs	r0, r0, r3
100403c4:	4152      	adcs	r2, r2
100403c6:	0ac3      	lsrs	r3, r0, #11
100403c8:	428b      	cmp	r3, r1
100403ca:	d301      	bcc.n	100403d0 <__divsi3+0x7c>
100403cc:	02cb      	lsls	r3, r1, #11
100403ce:	1ac0      	subs	r0, r0, r3
100403d0:	4152      	adcs	r2, r2
100403d2:	0a83      	lsrs	r3, r0, #10
100403d4:	428b      	cmp	r3, r1
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x88>
100403d8:	028b      	lsls	r3, r1, #10
100403da:	1ac0      	subs	r0, r0, r3
100403dc:	4152      	adcs	r2, r2
100403de:	0a43      	lsrs	r3, r0, #9
100403e0:	428b      	cmp	r3, r1
100403e2:	d301      	bcc.n	100403e8 <__divsi3+0x94>
100403e4:	024b      	lsls	r3, r1, #9
100403e6:	1ac0      	subs	r0, r0, r3
100403e8:	4152      	adcs	r2, r2
100403ea:	0a03      	lsrs	r3, r0, #8
100403ec:	428b      	cmp	r3, r1
100403ee:	d301      	bcc.n	100403f4 <__divsi3+0xa0>
100403f0:	020b      	lsls	r3, r1, #8
100403f2:	1ac0      	subs	r0, r0, r3
100403f4:	4152      	adcs	r2, r2
100403f6:	d2cd      	bcs.n	10040394 <__divsi3+0x40>
100403f8:	09c3      	lsrs	r3, r0, #7
100403fa:	428b      	cmp	r3, r1
100403fc:	d301      	bcc.n	10040402 <__divsi3+0xae>
100403fe:	01cb      	lsls	r3, r1, #7
10040400:	1ac0      	subs	r0, r0, r3
10040402:	4152      	adcs	r2, r2
10040404:	0983      	lsrs	r3, r0, #6
10040406:	428b      	cmp	r3, r1
10040408:	d301      	bcc.n	1004040e <__divsi3+0xba>
1004040a:	018b      	lsls	r3, r1, #6
1004040c:	1ac0      	subs	r0, r0, r3
1004040e:	4152      	adcs	r2, r2
10040410:	0943      	lsrs	r3, r0, #5
10040412:	428b      	cmp	r3, r1
10040414:	d301      	bcc.n	1004041a <__divsi3+0xc6>
10040416:	014b      	lsls	r3, r1, #5
10040418:	1ac0      	subs	r0, r0, r3
1004041a:	4152      	adcs	r2, r2
1004041c:	0903      	lsrs	r3, r0, #4
1004041e:	428b      	cmp	r3, r1
10040420:	d301      	bcc.n	10040426 <__divsi3+0xd2>
10040422:	010b      	lsls	r3, r1, #4
10040424:	1ac0      	subs	r0, r0, r3
10040426:	4152      	adcs	r2, r2
10040428:	08c3      	lsrs	r3, r0, #3
1004042a:	428b      	cmp	r3, r1
1004042c:	d301      	bcc.n	10040432 <__divsi3+0xde>
1004042e:	00cb      	lsls	r3, r1, #3
10040430:	1ac0      	subs	r0, r0, r3
10040432:	4152      	adcs	r2, r2
10040434:	0883      	lsrs	r3, r0, #2
10040436:	428b      	cmp	r3, r1
10040438:	d301      	bcc.n	1004043e <__divsi3+0xea>
1004043a:	008b      	lsls	r3, r1, #2
1004043c:	1ac0      	subs	r0, r0, r3
1004043e:	4152      	adcs	r2, r2
10040440:	0843      	lsrs	r3, r0, #1
10040442:	428b      	cmp	r3, r1
10040444:	d301      	bcc.n	1004044a <__divsi3+0xf6>
10040446:	004b      	lsls	r3, r1, #1
10040448:	1ac0      	subs	r0, r0, r3
1004044a:	4152      	adcs	r2, r2
1004044c:	1a41      	subs	r1, r0, r1
1004044e:	d200      	bcs.n	10040452 <__divsi3+0xfe>
10040450:	4601      	mov	r1, r0
10040452:	4152      	adcs	r2, r2
10040454:	4610      	mov	r0, r2
10040456:	4770      	bx	lr
10040458:	e05d      	b.n	10040516 <__divsi3+0x1c2>
1004045a:	0fca      	lsrs	r2, r1, #31
1004045c:	d000      	beq.n	10040460 <__divsi3+0x10c>
1004045e:	4249      	negs	r1, r1
10040460:	1003      	asrs	r3, r0, #32
10040462:	d300      	bcc.n	10040466 <__divsi3+0x112>
10040464:	4240      	negs	r0, r0
10040466:	4053      	eors	r3, r2
10040468:	2200      	movs	r2, #0
1004046a:	469c      	mov	ip, r3
1004046c:	0903      	lsrs	r3, r0, #4
1004046e:	428b      	cmp	r3, r1
10040470:	d32d      	bcc.n	100404ce <__divsi3+0x17a>
10040472:	0a03      	lsrs	r3, r0, #8
10040474:	428b      	cmp	r3, r1
10040476:	d312      	bcc.n	1004049e <__divsi3+0x14a>
10040478:	22fc      	movs	r2, #252	@ 0xfc
1004047a:	0189      	lsls	r1, r1, #6
1004047c:	ba12      	rev	r2, r2
1004047e:	0a03      	lsrs	r3, r0, #8
10040480:	428b      	cmp	r3, r1
10040482:	d30c      	bcc.n	1004049e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	1192      	asrs	r2, r2, #6
10040488:	428b      	cmp	r3, r1
1004048a:	d308      	bcc.n	1004049e <__divsi3+0x14a>
1004048c:	0189      	lsls	r1, r1, #6
1004048e:	1192      	asrs	r2, r2, #6
10040490:	428b      	cmp	r3, r1
10040492:	d304      	bcc.n	1004049e <__divsi3+0x14a>
10040494:	0189      	lsls	r1, r1, #6
10040496:	d03a      	beq.n	1004050e <__divsi3+0x1ba>
10040498:	1192      	asrs	r2, r2, #6
1004049a:	e000      	b.n	1004049e <__divsi3+0x14a>
1004049c:	0989      	lsrs	r1, r1, #6
1004049e:	09c3      	lsrs	r3, r0, #7
100404a0:	428b      	cmp	r3, r1
100404a2:	d301      	bcc.n	100404a8 <__divsi3+0x154>
100404a4:	01cb      	lsls	r3, r1, #7
100404a6:	1ac0      	subs	r0, r0, r3
100404a8:	4152      	adcs	r2, r2
100404aa:	0983      	lsrs	r3, r0, #6
100404ac:	428b      	cmp	r3, r1
100404ae:	d301      	bcc.n	100404b4 <__divsi3+0x160>
100404b0:	018b      	lsls	r3, r1, #6
100404b2:	1ac0      	subs	r0, r0, r3
100404b4:	4152      	adcs	r2, r2
100404b6:	0943      	lsrs	r3, r0, #5
100404b8:	428b      	cmp	r3, r1
100404ba:	d301      	bcc.n	100404c0 <__divsi3+0x16c>
100404bc:	014b      	lsls	r3, r1, #5
100404be:	1ac0      	subs	r0, r0, r3
100404c0:	4152      	adcs	r2, r2
100404c2:	0903      	lsrs	r3, r0, #4
100404c4:	428b      	cmp	r3, r1
100404c6:	d301      	bcc.n	100404cc <__divsi3+0x178>
100404c8:	010b      	lsls	r3, r1, #4
100404ca:	1ac0      	subs	r0, r0, r3
100404cc:	4152      	adcs	r2, r2
100404ce:	08c3      	lsrs	r3, r0, #3
100404d0:	428b      	cmp	r3, r1
100404d2:	d301      	bcc.n	100404d8 <__divsi3+0x184>
100404d4:	00cb      	lsls	r3, r1, #3
100404d6:	1ac0      	subs	r0, r0, r3
100404d8:	4152      	adcs	r2, r2
100404da:	0883      	lsrs	r3, r0, #2
100404dc:	428b      	cmp	r3, r1
100404de:	d301      	bcc.n	100404e4 <__divsi3+0x190>
100404e0:	008b      	lsls	r3, r1, #2
100404e2:	1ac0      	subs	r0, r0, r3
100404e4:	4152      	adcs	r2, r2
100404e6:	d2d9      	bcs.n	1004049c <__divsi3+0x148>
100404e8:	0843      	lsrs	r3, r0, #1
100404ea:	428b      	cmp	r3, r1
100404ec:	d301      	bcc.n	100404f2 <__divsi3+0x19e>
100404ee:	004b      	lsls	r3, r1, #1
100404f0:	1ac0      	subs	r0, r0, r3
100404f2:	4152      	adcs	r2, r2
100404f4:	1a41      	subs	r1, r0, r1
100404f6:	d200      	bcs.n	100404fa <__divsi3+0x1a6>
100404f8:	4601      	mov	r1, r0
100404fa:	4663      	mov	r3, ip
100404fc:	4152      	adcs	r2, r2
100404fe:	105b      	asrs	r3, r3, #1
10040500:	4610      	mov	r0, r2
10040502:	d301      	bcc.n	10040508 <__divsi3+0x1b4>
10040504:	4240      	negs	r0, r0
10040506:	2b00      	cmp	r3, #0
10040508:	d500      	bpl.n	1004050c <__divsi3+0x1b8>
1004050a:	4249      	negs	r1, r1
1004050c:	4770      	bx	lr
1004050e:	4663      	mov	r3, ip
10040510:	105b      	asrs	r3, r3, #1
10040512:	d300      	bcc.n	10040516 <__divsi3+0x1c2>
10040514:	4240      	negs	r0, r0
10040516:	b501      	push	{r0, lr}
10040518:	2000      	movs	r0, #0
1004051a:	f000 f805 	bl	10040528 <__aeabi_idiv0>
1004051e:	bd02      	pop	{r1, pc}

10040520 <__aeabi_idivmod>:
10040520:	2900      	cmp	r1, #0
10040522:	d0f8      	beq.n	10040516 <__divsi3+0x1c2>
10040524:	e716      	b.n	10040354 <__divsi3>
10040526:	4770      	bx	lr

10040528 <__aeabi_idiv0>:
10040528:	4770      	bx	lr
1004052a:	46c0      	nop			@ (mov r8, r8)

1004052c <__aeabi_llsl>:
1004052c:	4091      	lsls	r1, r2
1004052e:	0003      	movs	r3, r0
10040530:	4090      	lsls	r0, r2
10040532:	469c      	mov	ip, r3
10040534:	3a20      	subs	r2, #32
10040536:	4093      	lsls	r3, r2
10040538:	4319      	orrs	r1, r3
1004053a:	4252      	negs	r2, r2
1004053c:	4663      	mov	r3, ip
1004053e:	40d3      	lsrs	r3, r2
10040540:	4319      	orrs	r1, r3
10040542:	4770      	bx	lr

10040544 <__aeabi_cfrcmple>:
10040544:	4684      	mov	ip, r0
10040546:	0008      	movs	r0, r1
10040548:	4661      	mov	r1, ip
1004054a:	e7ff      	b.n	1004054c <__aeabi_cfcmpeq>

1004054c <__aeabi_cfcmpeq>:
1004054c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004054e:	f000 f9f3 	bl	10040938 <__lesf2>
10040552:	2800      	cmp	r0, #0
10040554:	d401      	bmi.n	1004055a <__aeabi_cfcmpeq+0xe>
10040556:	2100      	movs	r1, #0
10040558:	42c8      	cmn	r0, r1
1004055a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1004055c <__aeabi_fcmpeq>:
1004055c:	b510      	push	{r4, lr}
1004055e:	f000 f97b 	bl	10040858 <__eqsf2>
10040562:	4240      	negs	r0, r0
10040564:	3001      	adds	r0, #1
10040566:	bd10      	pop	{r4, pc}

10040568 <__aeabi_fcmplt>:
10040568:	b510      	push	{r4, lr}
1004056a:	f000 f9e5 	bl	10040938 <__lesf2>
1004056e:	2800      	cmp	r0, #0
10040570:	db01      	blt.n	10040576 <__aeabi_fcmplt+0xe>
10040572:	2000      	movs	r0, #0
10040574:	bd10      	pop	{r4, pc}
10040576:	2001      	movs	r0, #1
10040578:	bd10      	pop	{r4, pc}
1004057a:	46c0      	nop			@ (mov r8, r8)

1004057c <__aeabi_fcmple>:
1004057c:	b510      	push	{r4, lr}
1004057e:	f000 f9db 	bl	10040938 <__lesf2>
10040582:	2800      	cmp	r0, #0
10040584:	dd01      	ble.n	1004058a <__aeabi_fcmple+0xe>
10040586:	2000      	movs	r0, #0
10040588:	bd10      	pop	{r4, pc}
1004058a:	2001      	movs	r0, #1
1004058c:	bd10      	pop	{r4, pc}
1004058e:	46c0      	nop			@ (mov r8, r8)

10040590 <__aeabi_fcmpgt>:
10040590:	b510      	push	{r4, lr}
10040592:	f000 f989 	bl	100408a8 <__gesf2>
10040596:	2800      	cmp	r0, #0
10040598:	dc01      	bgt.n	1004059e <__aeabi_fcmpgt+0xe>
1004059a:	2000      	movs	r0, #0
1004059c:	bd10      	pop	{r4, pc}
1004059e:	2001      	movs	r0, #1
100405a0:	bd10      	pop	{r4, pc}
100405a2:	46c0      	nop			@ (mov r8, r8)

100405a4 <__aeabi_fcmpge>:
100405a4:	b510      	push	{r4, lr}
100405a6:	f000 f97f 	bl	100408a8 <__gesf2>
100405aa:	2800      	cmp	r0, #0
100405ac:	da01      	bge.n	100405b2 <__aeabi_fcmpge+0xe>
100405ae:	2000      	movs	r0, #0
100405b0:	bd10      	pop	{r4, pc}
100405b2:	2001      	movs	r0, #1
100405b4:	bd10      	pop	{r4, pc}
100405b6:	46c0      	nop			@ (mov r8, r8)

100405b8 <__clzsi2>:
100405b8:	211c      	movs	r1, #28
100405ba:	2301      	movs	r3, #1
100405bc:	041b      	lsls	r3, r3, #16
100405be:	4298      	cmp	r0, r3
100405c0:	d301      	bcc.n	100405c6 <__clzsi2+0xe>
100405c2:	0c00      	lsrs	r0, r0, #16
100405c4:	3910      	subs	r1, #16
100405c6:	0a1b      	lsrs	r3, r3, #8
100405c8:	4298      	cmp	r0, r3
100405ca:	d301      	bcc.n	100405d0 <__clzsi2+0x18>
100405cc:	0a00      	lsrs	r0, r0, #8
100405ce:	3908      	subs	r1, #8
100405d0:	091b      	lsrs	r3, r3, #4
100405d2:	4298      	cmp	r0, r3
100405d4:	d301      	bcc.n	100405da <__clzsi2+0x22>
100405d6:	0900      	lsrs	r0, r0, #4
100405d8:	3904      	subs	r1, #4
100405da:	a202      	add	r2, pc, #8	@ (adr r2, 100405e4 <__clzsi2+0x2c>)
100405dc:	5c10      	ldrb	r0, [r2, r0]
100405de:	1840      	adds	r0, r0, r1
100405e0:	4770      	bx	lr
100405e2:	46c0      	nop			@ (mov r8, r8)
100405e4:	02020304 	.word	0x02020304
100405e8:	01010101 	.word	0x01010101
	...

100405f4 <__aeabi_uldivmod>:
100405f4:	2b00      	cmp	r3, #0
100405f6:	d111      	bne.n	1004061c <__aeabi_uldivmod+0x28>
100405f8:	2a00      	cmp	r2, #0
100405fa:	d10f      	bne.n	1004061c <__aeabi_uldivmod+0x28>
100405fc:	2900      	cmp	r1, #0
100405fe:	d100      	bne.n	10040602 <__aeabi_uldivmod+0xe>
10040600:	2800      	cmp	r0, #0
10040602:	d002      	beq.n	1004060a <__aeabi_uldivmod+0x16>
10040604:	2100      	movs	r1, #0
10040606:	43c9      	mvns	r1, r1
10040608:	0008      	movs	r0, r1
1004060a:	b407      	push	{r0, r1, r2}
1004060c:	4802      	ldr	r0, [pc, #8]	@ (10040618 <__aeabi_uldivmod+0x24>)
1004060e:	a102      	add	r1, pc, #8	@ (adr r1, 10040618 <__aeabi_uldivmod+0x24>)
10040610:	1840      	adds	r0, r0, r1
10040612:	9002      	str	r0, [sp, #8]
10040614:	bd03      	pop	{r0, r1, pc}
10040616:	46c0      	nop			@ (mov r8, r8)
10040618:	ffffff11 	.word	0xffffff11
1004061c:	b403      	push	{r0, r1}
1004061e:	4668      	mov	r0, sp
10040620:	b501      	push	{r0, lr}
10040622:	9802      	ldr	r0, [sp, #8]
10040624:	f000 f84c 	bl	100406c0 <__udivmoddi4>
10040628:	9b01      	ldr	r3, [sp, #4]
1004062a:	469e      	mov	lr, r3
1004062c:	b002      	add	sp, #8
1004062e:	bc0c      	pop	{r2, r3}
10040630:	4770      	bx	lr
10040632:	46c0      	nop			@ (mov r8, r8)

10040634 <__aeabi_lmul>:
10040634:	b5f0      	push	{r4, r5, r6, r7, lr}
10040636:	46ce      	mov	lr, r9
10040638:	4699      	mov	r9, r3
1004063a:	0c03      	lsrs	r3, r0, #16
1004063c:	469c      	mov	ip, r3
1004063e:	0413      	lsls	r3, r2, #16
10040640:	4647      	mov	r7, r8
10040642:	0c1b      	lsrs	r3, r3, #16
10040644:	001d      	movs	r5, r3
10040646:	000e      	movs	r6, r1
10040648:	4661      	mov	r1, ip
1004064a:	0404      	lsls	r4, r0, #16
1004064c:	0c24      	lsrs	r4, r4, #16
1004064e:	b580      	push	{r7, lr}
10040650:	0007      	movs	r7, r0
10040652:	0c10      	lsrs	r0, r2, #16
10040654:	434b      	muls	r3, r1
10040656:	4365      	muls	r5, r4
10040658:	4341      	muls	r1, r0
1004065a:	4360      	muls	r0, r4
1004065c:	0c2c      	lsrs	r4, r5, #16
1004065e:	18c0      	adds	r0, r0, r3
10040660:	1824      	adds	r4, r4, r0
10040662:	468c      	mov	ip, r1
10040664:	42a3      	cmp	r3, r4
10040666:	d903      	bls.n	10040670 <__aeabi_lmul+0x3c>
10040668:	2380      	movs	r3, #128	@ 0x80
1004066a:	025b      	lsls	r3, r3, #9
1004066c:	4698      	mov	r8, r3
1004066e:	44c4      	add	ip, r8
10040670:	4649      	mov	r1, r9
10040672:	4379      	muls	r1, r7
10040674:	4356      	muls	r6, r2
10040676:	0c23      	lsrs	r3, r4, #16
10040678:	042d      	lsls	r5, r5, #16
1004067a:	0c2d      	lsrs	r5, r5, #16
1004067c:	1989      	adds	r1, r1, r6
1004067e:	4463      	add	r3, ip
10040680:	0424      	lsls	r4, r4, #16
10040682:	1960      	adds	r0, r4, r5
10040684:	18c9      	adds	r1, r1, r3
10040686:	bcc0      	pop	{r6, r7}
10040688:	46b9      	mov	r9, r7
1004068a:	46b0      	mov	r8, r6
1004068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004068e:	46c0      	nop			@ (mov r8, r8)

10040690 <__aeabi_f2uiz>:
10040690:	219e      	movs	r1, #158	@ 0x9e
10040692:	b510      	push	{r4, lr}
10040694:	05c9      	lsls	r1, r1, #23
10040696:	1c04      	adds	r4, r0, #0
10040698:	f7ff ff84 	bl	100405a4 <__aeabi_fcmpge>
1004069c:	2800      	cmp	r0, #0
1004069e:	d103      	bne.n	100406a8 <__aeabi_f2uiz+0x18>
100406a0:	1c20      	adds	r0, r4, #0
100406a2:	f000 fd4f 	bl	10041144 <__aeabi_f2iz>
100406a6:	bd10      	pop	{r4, pc}
100406a8:	219e      	movs	r1, #158	@ 0x9e
100406aa:	1c20      	adds	r0, r4, #0
100406ac:	05c9      	lsls	r1, r1, #23
100406ae:	f000 fae5 	bl	10040c7c <__aeabi_fsub>
100406b2:	f000 fd47 	bl	10041144 <__aeabi_f2iz>
100406b6:	2380      	movs	r3, #128	@ 0x80
100406b8:	061b      	lsls	r3, r3, #24
100406ba:	469c      	mov	ip, r3
100406bc:	4460      	add	r0, ip
100406be:	e7f2      	b.n	100406a6 <__aeabi_f2uiz+0x16>

100406c0 <__udivmoddi4>:
100406c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100406c2:	4657      	mov	r7, sl
100406c4:	464e      	mov	r6, r9
100406c6:	4645      	mov	r5, r8
100406c8:	46de      	mov	lr, fp
100406ca:	b5e0      	push	{r5, r6, r7, lr}
100406cc:	0004      	movs	r4, r0
100406ce:	000d      	movs	r5, r1
100406d0:	4692      	mov	sl, r2
100406d2:	4699      	mov	r9, r3
100406d4:	b083      	sub	sp, #12
100406d6:	428b      	cmp	r3, r1
100406d8:	d830      	bhi.n	1004073c <__udivmoddi4+0x7c>
100406da:	d02d      	beq.n	10040738 <__udivmoddi4+0x78>
100406dc:	4649      	mov	r1, r9
100406de:	4650      	mov	r0, sl
100406e0:	f000 fde6 	bl	100412b0 <__clzdi2>
100406e4:	0029      	movs	r1, r5
100406e6:	0006      	movs	r6, r0
100406e8:	0020      	movs	r0, r4
100406ea:	f000 fde1 	bl	100412b0 <__clzdi2>
100406ee:	1a33      	subs	r3, r6, r0
100406f0:	4698      	mov	r8, r3
100406f2:	3b20      	subs	r3, #32
100406f4:	d434      	bmi.n	10040760 <__udivmoddi4+0xa0>
100406f6:	469b      	mov	fp, r3
100406f8:	4653      	mov	r3, sl
100406fa:	465a      	mov	r2, fp
100406fc:	4093      	lsls	r3, r2
100406fe:	4642      	mov	r2, r8
10040700:	001f      	movs	r7, r3
10040702:	4653      	mov	r3, sl
10040704:	4093      	lsls	r3, r2
10040706:	001e      	movs	r6, r3
10040708:	42af      	cmp	r7, r5
1004070a:	d83b      	bhi.n	10040784 <__udivmoddi4+0xc4>
1004070c:	42af      	cmp	r7, r5
1004070e:	d100      	bne.n	10040712 <__udivmoddi4+0x52>
10040710:	e079      	b.n	10040806 <__udivmoddi4+0x146>
10040712:	465b      	mov	r3, fp
10040714:	1ba4      	subs	r4, r4, r6
10040716:	41bd      	sbcs	r5, r7
10040718:	2b00      	cmp	r3, #0
1004071a:	da00      	bge.n	1004071e <__udivmoddi4+0x5e>
1004071c:	e076      	b.n	1004080c <__udivmoddi4+0x14c>
1004071e:	2200      	movs	r2, #0
10040720:	2300      	movs	r3, #0
10040722:	9200      	str	r2, [sp, #0]
10040724:	9301      	str	r3, [sp, #4]
10040726:	2301      	movs	r3, #1
10040728:	465a      	mov	r2, fp
1004072a:	4093      	lsls	r3, r2
1004072c:	9301      	str	r3, [sp, #4]
1004072e:	2301      	movs	r3, #1
10040730:	4642      	mov	r2, r8
10040732:	4093      	lsls	r3, r2
10040734:	9300      	str	r3, [sp, #0]
10040736:	e029      	b.n	1004078c <__udivmoddi4+0xcc>
10040738:	4282      	cmp	r2, r0
1004073a:	d9cf      	bls.n	100406dc <__udivmoddi4+0x1c>
1004073c:	2200      	movs	r2, #0
1004073e:	2300      	movs	r3, #0
10040740:	9200      	str	r2, [sp, #0]
10040742:	9301      	str	r3, [sp, #4]
10040744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040746:	2b00      	cmp	r3, #0
10040748:	d001      	beq.n	1004074e <__udivmoddi4+0x8e>
1004074a:	601c      	str	r4, [r3, #0]
1004074c:	605d      	str	r5, [r3, #4]
1004074e:	9800      	ldr	r0, [sp, #0]
10040750:	9901      	ldr	r1, [sp, #4]
10040752:	b003      	add	sp, #12
10040754:	bcf0      	pop	{r4, r5, r6, r7}
10040756:	46bb      	mov	fp, r7
10040758:	46b2      	mov	sl, r6
1004075a:	46a9      	mov	r9, r5
1004075c:	46a0      	mov	r8, r4
1004075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040760:	4642      	mov	r2, r8
10040762:	469b      	mov	fp, r3
10040764:	2320      	movs	r3, #32
10040766:	1a9b      	subs	r3, r3, r2
10040768:	4652      	mov	r2, sl
1004076a:	40da      	lsrs	r2, r3
1004076c:	4641      	mov	r1, r8
1004076e:	0013      	movs	r3, r2
10040770:	464a      	mov	r2, r9
10040772:	408a      	lsls	r2, r1
10040774:	0017      	movs	r7, r2
10040776:	4642      	mov	r2, r8
10040778:	431f      	orrs	r7, r3
1004077a:	4653      	mov	r3, sl
1004077c:	4093      	lsls	r3, r2
1004077e:	001e      	movs	r6, r3
10040780:	42af      	cmp	r7, r5
10040782:	d9c3      	bls.n	1004070c <__udivmoddi4+0x4c>
10040784:	2200      	movs	r2, #0
10040786:	2300      	movs	r3, #0
10040788:	9200      	str	r2, [sp, #0]
1004078a:	9301      	str	r3, [sp, #4]
1004078c:	4643      	mov	r3, r8
1004078e:	2b00      	cmp	r3, #0
10040790:	d0d8      	beq.n	10040744 <__udivmoddi4+0x84>
10040792:	07fb      	lsls	r3, r7, #31
10040794:	0872      	lsrs	r2, r6, #1
10040796:	431a      	orrs	r2, r3
10040798:	4646      	mov	r6, r8
1004079a:	087b      	lsrs	r3, r7, #1
1004079c:	e00e      	b.n	100407bc <__udivmoddi4+0xfc>
1004079e:	42ab      	cmp	r3, r5
100407a0:	d101      	bne.n	100407a6 <__udivmoddi4+0xe6>
100407a2:	42a2      	cmp	r2, r4
100407a4:	d80c      	bhi.n	100407c0 <__udivmoddi4+0x100>
100407a6:	1aa4      	subs	r4, r4, r2
100407a8:	419d      	sbcs	r5, r3
100407aa:	2001      	movs	r0, #1
100407ac:	1924      	adds	r4, r4, r4
100407ae:	416d      	adcs	r5, r5
100407b0:	2100      	movs	r1, #0
100407b2:	3e01      	subs	r6, #1
100407b4:	1824      	adds	r4, r4, r0
100407b6:	414d      	adcs	r5, r1
100407b8:	2e00      	cmp	r6, #0
100407ba:	d006      	beq.n	100407ca <__udivmoddi4+0x10a>
100407bc:	42ab      	cmp	r3, r5
100407be:	d9ee      	bls.n	1004079e <__udivmoddi4+0xde>
100407c0:	3e01      	subs	r6, #1
100407c2:	1924      	adds	r4, r4, r4
100407c4:	416d      	adcs	r5, r5
100407c6:	2e00      	cmp	r6, #0
100407c8:	d1f8      	bne.n	100407bc <__udivmoddi4+0xfc>
100407ca:	9800      	ldr	r0, [sp, #0]
100407cc:	9901      	ldr	r1, [sp, #4]
100407ce:	465b      	mov	r3, fp
100407d0:	1900      	adds	r0, r0, r4
100407d2:	4169      	adcs	r1, r5
100407d4:	2b00      	cmp	r3, #0
100407d6:	db24      	blt.n	10040822 <__udivmoddi4+0x162>
100407d8:	002b      	movs	r3, r5
100407da:	465a      	mov	r2, fp
100407dc:	4644      	mov	r4, r8
100407de:	40d3      	lsrs	r3, r2
100407e0:	002a      	movs	r2, r5
100407e2:	40e2      	lsrs	r2, r4
100407e4:	001c      	movs	r4, r3
100407e6:	465b      	mov	r3, fp
100407e8:	0015      	movs	r5, r2
100407ea:	2b00      	cmp	r3, #0
100407ec:	db2a      	blt.n	10040844 <__udivmoddi4+0x184>
100407ee:	0026      	movs	r6, r4
100407f0:	409e      	lsls	r6, r3
100407f2:	0033      	movs	r3, r6
100407f4:	0026      	movs	r6, r4
100407f6:	4647      	mov	r7, r8
100407f8:	40be      	lsls	r6, r7
100407fa:	0032      	movs	r2, r6
100407fc:	1a80      	subs	r0, r0, r2
100407fe:	4199      	sbcs	r1, r3
10040800:	9000      	str	r0, [sp, #0]
10040802:	9101      	str	r1, [sp, #4]
10040804:	e79e      	b.n	10040744 <__udivmoddi4+0x84>
10040806:	42a3      	cmp	r3, r4
10040808:	d8bc      	bhi.n	10040784 <__udivmoddi4+0xc4>
1004080a:	e782      	b.n	10040712 <__udivmoddi4+0x52>
1004080c:	4642      	mov	r2, r8
1004080e:	2320      	movs	r3, #32
10040810:	2100      	movs	r1, #0
10040812:	1a9b      	subs	r3, r3, r2
10040814:	2200      	movs	r2, #0
10040816:	9100      	str	r1, [sp, #0]
10040818:	9201      	str	r2, [sp, #4]
1004081a:	2201      	movs	r2, #1
1004081c:	40da      	lsrs	r2, r3
1004081e:	9201      	str	r2, [sp, #4]
10040820:	e785      	b.n	1004072e <__udivmoddi4+0x6e>
10040822:	4642      	mov	r2, r8
10040824:	2320      	movs	r3, #32
10040826:	1a9b      	subs	r3, r3, r2
10040828:	002a      	movs	r2, r5
1004082a:	4646      	mov	r6, r8
1004082c:	409a      	lsls	r2, r3
1004082e:	0023      	movs	r3, r4
10040830:	40f3      	lsrs	r3, r6
10040832:	4644      	mov	r4, r8
10040834:	4313      	orrs	r3, r2
10040836:	002a      	movs	r2, r5
10040838:	40e2      	lsrs	r2, r4
1004083a:	001c      	movs	r4, r3
1004083c:	465b      	mov	r3, fp
1004083e:	0015      	movs	r5, r2
10040840:	2b00      	cmp	r3, #0
10040842:	dad4      	bge.n	100407ee <__udivmoddi4+0x12e>
10040844:	4642      	mov	r2, r8
10040846:	002f      	movs	r7, r5
10040848:	2320      	movs	r3, #32
1004084a:	0026      	movs	r6, r4
1004084c:	4097      	lsls	r7, r2
1004084e:	1a9b      	subs	r3, r3, r2
10040850:	40de      	lsrs	r6, r3
10040852:	003b      	movs	r3, r7
10040854:	4333      	orrs	r3, r6
10040856:	e7cd      	b.n	100407f4 <__udivmoddi4+0x134>

10040858 <__eqsf2>:
10040858:	b570      	push	{r4, r5, r6, lr}
1004085a:	0042      	lsls	r2, r0, #1
1004085c:	024e      	lsls	r6, r1, #9
1004085e:	004c      	lsls	r4, r1, #1
10040860:	0245      	lsls	r5, r0, #9
10040862:	0a6d      	lsrs	r5, r5, #9
10040864:	0e12      	lsrs	r2, r2, #24
10040866:	0fc3      	lsrs	r3, r0, #31
10040868:	0a76      	lsrs	r6, r6, #9
1004086a:	0e24      	lsrs	r4, r4, #24
1004086c:	0fc9      	lsrs	r1, r1, #31
1004086e:	2aff      	cmp	r2, #255	@ 0xff
10040870:	d010      	beq.n	10040894 <__eqsf2+0x3c>
10040872:	2cff      	cmp	r4, #255	@ 0xff
10040874:	d00c      	beq.n	10040890 <__eqsf2+0x38>
10040876:	2001      	movs	r0, #1
10040878:	42a2      	cmp	r2, r4
1004087a:	d10a      	bne.n	10040892 <__eqsf2+0x3a>
1004087c:	42b5      	cmp	r5, r6
1004087e:	d108      	bne.n	10040892 <__eqsf2+0x3a>
10040880:	428b      	cmp	r3, r1
10040882:	d00f      	beq.n	100408a4 <__eqsf2+0x4c>
10040884:	2a00      	cmp	r2, #0
10040886:	d104      	bne.n	10040892 <__eqsf2+0x3a>
10040888:	0028      	movs	r0, r5
1004088a:	1e43      	subs	r3, r0, #1
1004088c:	4198      	sbcs	r0, r3
1004088e:	e000      	b.n	10040892 <__eqsf2+0x3a>
10040890:	2001      	movs	r0, #1
10040892:	bd70      	pop	{r4, r5, r6, pc}
10040894:	2001      	movs	r0, #1
10040896:	2cff      	cmp	r4, #255	@ 0xff
10040898:	d1fb      	bne.n	10040892 <__eqsf2+0x3a>
1004089a:	4335      	orrs	r5, r6
1004089c:	d1f9      	bne.n	10040892 <__eqsf2+0x3a>
1004089e:	404b      	eors	r3, r1
100408a0:	0018      	movs	r0, r3
100408a2:	e7f6      	b.n	10040892 <__eqsf2+0x3a>
100408a4:	2000      	movs	r0, #0
100408a6:	e7f4      	b.n	10040892 <__eqsf2+0x3a>

100408a8 <__gesf2>:
100408a8:	b530      	push	{r4, r5, lr}
100408aa:	0042      	lsls	r2, r0, #1
100408ac:	0244      	lsls	r4, r0, #9
100408ae:	024d      	lsls	r5, r1, #9
100408b0:	0fc3      	lsrs	r3, r0, #31
100408b2:	0048      	lsls	r0, r1, #1
100408b4:	0a64      	lsrs	r4, r4, #9
100408b6:	0e12      	lsrs	r2, r2, #24
100408b8:	0a6d      	lsrs	r5, r5, #9
100408ba:	0e00      	lsrs	r0, r0, #24
100408bc:	0fc9      	lsrs	r1, r1, #31
100408be:	2aff      	cmp	r2, #255	@ 0xff
100408c0:	d018      	beq.n	100408f4 <__gesf2+0x4c>
100408c2:	28ff      	cmp	r0, #255	@ 0xff
100408c4:	d00a      	beq.n	100408dc <__gesf2+0x34>
100408c6:	2a00      	cmp	r2, #0
100408c8:	d11e      	bne.n	10040908 <__gesf2+0x60>
100408ca:	2800      	cmp	r0, #0
100408cc:	d10a      	bne.n	100408e4 <__gesf2+0x3c>
100408ce:	2d00      	cmp	r5, #0
100408d0:	d029      	beq.n	10040926 <__gesf2+0x7e>
100408d2:	2c00      	cmp	r4, #0
100408d4:	d12d      	bne.n	10040932 <__gesf2+0x8a>
100408d6:	0048      	lsls	r0, r1, #1
100408d8:	3801      	subs	r0, #1
100408da:	bd30      	pop	{r4, r5, pc}
100408dc:	2d00      	cmp	r5, #0
100408de:	d125      	bne.n	1004092c <__gesf2+0x84>
100408e0:	2a00      	cmp	r2, #0
100408e2:	d101      	bne.n	100408e8 <__gesf2+0x40>
100408e4:	2c00      	cmp	r4, #0
100408e6:	d0f6      	beq.n	100408d6 <__gesf2+0x2e>
100408e8:	428b      	cmp	r3, r1
100408ea:	d019      	beq.n	10040920 <__gesf2+0x78>
100408ec:	2001      	movs	r0, #1
100408ee:	425b      	negs	r3, r3
100408f0:	4318      	orrs	r0, r3
100408f2:	e7f2      	b.n	100408da <__gesf2+0x32>
100408f4:	2c00      	cmp	r4, #0
100408f6:	d119      	bne.n	1004092c <__gesf2+0x84>
100408f8:	28ff      	cmp	r0, #255	@ 0xff
100408fa:	d1f7      	bne.n	100408ec <__gesf2+0x44>
100408fc:	2d00      	cmp	r5, #0
100408fe:	d115      	bne.n	1004092c <__gesf2+0x84>
10040900:	2000      	movs	r0, #0
10040902:	428b      	cmp	r3, r1
10040904:	d1f2      	bne.n	100408ec <__gesf2+0x44>
10040906:	e7e8      	b.n	100408da <__gesf2+0x32>
10040908:	2800      	cmp	r0, #0
1004090a:	d0ef      	beq.n	100408ec <__gesf2+0x44>
1004090c:	428b      	cmp	r3, r1
1004090e:	d1ed      	bne.n	100408ec <__gesf2+0x44>
10040910:	4282      	cmp	r2, r0
10040912:	dceb      	bgt.n	100408ec <__gesf2+0x44>
10040914:	db04      	blt.n	10040920 <__gesf2+0x78>
10040916:	42ac      	cmp	r4, r5
10040918:	d8e8      	bhi.n	100408ec <__gesf2+0x44>
1004091a:	2000      	movs	r0, #0
1004091c:	42ac      	cmp	r4, r5
1004091e:	d2dc      	bcs.n	100408da <__gesf2+0x32>
10040920:	0058      	lsls	r0, r3, #1
10040922:	3801      	subs	r0, #1
10040924:	e7d9      	b.n	100408da <__gesf2+0x32>
10040926:	2c00      	cmp	r4, #0
10040928:	d0d7      	beq.n	100408da <__gesf2+0x32>
1004092a:	e7df      	b.n	100408ec <__gesf2+0x44>
1004092c:	2002      	movs	r0, #2
1004092e:	4240      	negs	r0, r0
10040930:	e7d3      	b.n	100408da <__gesf2+0x32>
10040932:	428b      	cmp	r3, r1
10040934:	d1da      	bne.n	100408ec <__gesf2+0x44>
10040936:	e7ee      	b.n	10040916 <__gesf2+0x6e>

10040938 <__lesf2>:
10040938:	b530      	push	{r4, r5, lr}
1004093a:	0042      	lsls	r2, r0, #1
1004093c:	0244      	lsls	r4, r0, #9
1004093e:	024d      	lsls	r5, r1, #9
10040940:	0fc3      	lsrs	r3, r0, #31
10040942:	0048      	lsls	r0, r1, #1
10040944:	0a64      	lsrs	r4, r4, #9
10040946:	0e12      	lsrs	r2, r2, #24
10040948:	0a6d      	lsrs	r5, r5, #9
1004094a:	0e00      	lsrs	r0, r0, #24
1004094c:	0fc9      	lsrs	r1, r1, #31
1004094e:	2aff      	cmp	r2, #255	@ 0xff
10040950:	d017      	beq.n	10040982 <__lesf2+0x4a>
10040952:	28ff      	cmp	r0, #255	@ 0xff
10040954:	d00a      	beq.n	1004096c <__lesf2+0x34>
10040956:	2a00      	cmp	r2, #0
10040958:	d11b      	bne.n	10040992 <__lesf2+0x5a>
1004095a:	2800      	cmp	r0, #0
1004095c:	d10a      	bne.n	10040974 <__lesf2+0x3c>
1004095e:	2d00      	cmp	r5, #0
10040960:	d01d      	beq.n	1004099e <__lesf2+0x66>
10040962:	2c00      	cmp	r4, #0
10040964:	d12d      	bne.n	100409c2 <__lesf2+0x8a>
10040966:	0048      	lsls	r0, r1, #1
10040968:	3801      	subs	r0, #1
1004096a:	e011      	b.n	10040990 <__lesf2+0x58>
1004096c:	2d00      	cmp	r5, #0
1004096e:	d10e      	bne.n	1004098e <__lesf2+0x56>
10040970:	2a00      	cmp	r2, #0
10040972:	d101      	bne.n	10040978 <__lesf2+0x40>
10040974:	2c00      	cmp	r4, #0
10040976:	d0f6      	beq.n	10040966 <__lesf2+0x2e>
10040978:	428b      	cmp	r3, r1
1004097a:	d10c      	bne.n	10040996 <__lesf2+0x5e>
1004097c:	0058      	lsls	r0, r3, #1
1004097e:	3801      	subs	r0, #1
10040980:	e006      	b.n	10040990 <__lesf2+0x58>
10040982:	2c00      	cmp	r4, #0
10040984:	d103      	bne.n	1004098e <__lesf2+0x56>
10040986:	28ff      	cmp	r0, #255	@ 0xff
10040988:	d105      	bne.n	10040996 <__lesf2+0x5e>
1004098a:	2d00      	cmp	r5, #0
1004098c:	d015      	beq.n	100409ba <__lesf2+0x82>
1004098e:	2002      	movs	r0, #2
10040990:	bd30      	pop	{r4, r5, pc}
10040992:	2800      	cmp	r0, #0
10040994:	d106      	bne.n	100409a4 <__lesf2+0x6c>
10040996:	2001      	movs	r0, #1
10040998:	425b      	negs	r3, r3
1004099a:	4318      	orrs	r0, r3
1004099c:	e7f8      	b.n	10040990 <__lesf2+0x58>
1004099e:	2c00      	cmp	r4, #0
100409a0:	d0f6      	beq.n	10040990 <__lesf2+0x58>
100409a2:	e7f8      	b.n	10040996 <__lesf2+0x5e>
100409a4:	428b      	cmp	r3, r1
100409a6:	d1f6      	bne.n	10040996 <__lesf2+0x5e>
100409a8:	4282      	cmp	r2, r0
100409aa:	dcf4      	bgt.n	10040996 <__lesf2+0x5e>
100409ac:	dbe6      	blt.n	1004097c <__lesf2+0x44>
100409ae:	42ac      	cmp	r4, r5
100409b0:	d8f1      	bhi.n	10040996 <__lesf2+0x5e>
100409b2:	2000      	movs	r0, #0
100409b4:	42ac      	cmp	r4, r5
100409b6:	d2eb      	bcs.n	10040990 <__lesf2+0x58>
100409b8:	e7e0      	b.n	1004097c <__lesf2+0x44>
100409ba:	2000      	movs	r0, #0
100409bc:	428b      	cmp	r3, r1
100409be:	d1ea      	bne.n	10040996 <__lesf2+0x5e>
100409c0:	e7e6      	b.n	10040990 <__lesf2+0x58>
100409c2:	428b      	cmp	r3, r1
100409c4:	d1e7      	bne.n	10040996 <__lesf2+0x5e>
100409c6:	e7f2      	b.n	100409ae <__lesf2+0x76>

100409c8 <__aeabi_fmul>:
100409c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100409ca:	464f      	mov	r7, r9
100409cc:	4646      	mov	r6, r8
100409ce:	46d6      	mov	lr, sl
100409d0:	0044      	lsls	r4, r0, #1
100409d2:	b5c0      	push	{r6, r7, lr}
100409d4:	0246      	lsls	r6, r0, #9
100409d6:	1c0f      	adds	r7, r1, #0
100409d8:	0a76      	lsrs	r6, r6, #9
100409da:	0e24      	lsrs	r4, r4, #24
100409dc:	0fc5      	lsrs	r5, r0, #31
100409de:	2c00      	cmp	r4, #0
100409e0:	d100      	bne.n	100409e4 <__aeabi_fmul+0x1c>
100409e2:	e0da      	b.n	10040b9a <__aeabi_fmul+0x1d2>
100409e4:	2cff      	cmp	r4, #255	@ 0xff
100409e6:	d074      	beq.n	10040ad2 <__aeabi_fmul+0x10a>
100409e8:	2380      	movs	r3, #128	@ 0x80
100409ea:	00f6      	lsls	r6, r6, #3
100409ec:	04db      	lsls	r3, r3, #19
100409ee:	431e      	orrs	r6, r3
100409f0:	2300      	movs	r3, #0
100409f2:	4699      	mov	r9, r3
100409f4:	469a      	mov	sl, r3
100409f6:	3c7f      	subs	r4, #127	@ 0x7f
100409f8:	027b      	lsls	r3, r7, #9
100409fa:	0a5b      	lsrs	r3, r3, #9
100409fc:	4698      	mov	r8, r3
100409fe:	007b      	lsls	r3, r7, #1
10040a00:	0e1b      	lsrs	r3, r3, #24
10040a02:	0fff      	lsrs	r7, r7, #31
10040a04:	2b00      	cmp	r3, #0
10040a06:	d074      	beq.n	10040af2 <__aeabi_fmul+0x12a>
10040a08:	2bff      	cmp	r3, #255	@ 0xff
10040a0a:	d100      	bne.n	10040a0e <__aeabi_fmul+0x46>
10040a0c:	e08e      	b.n	10040b2c <__aeabi_fmul+0x164>
10040a0e:	4642      	mov	r2, r8
10040a10:	2180      	movs	r1, #128	@ 0x80
10040a12:	00d2      	lsls	r2, r2, #3
10040a14:	04c9      	lsls	r1, r1, #19
10040a16:	4311      	orrs	r1, r2
10040a18:	3b7f      	subs	r3, #127	@ 0x7f
10040a1a:	002a      	movs	r2, r5
10040a1c:	18e4      	adds	r4, r4, r3
10040a1e:	464b      	mov	r3, r9
10040a20:	407a      	eors	r2, r7
10040a22:	4688      	mov	r8, r1
10040a24:	b2d2      	uxtb	r2, r2
10040a26:	2b0a      	cmp	r3, #10
10040a28:	dc75      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040a2a:	464b      	mov	r3, r9
10040a2c:	2000      	movs	r0, #0
10040a2e:	2b02      	cmp	r3, #2
10040a30:	dd0f      	ble.n	10040a52 <__aeabi_fmul+0x8a>
10040a32:	4649      	mov	r1, r9
10040a34:	2301      	movs	r3, #1
10040a36:	408b      	lsls	r3, r1
10040a38:	21a6      	movs	r1, #166	@ 0xa6
10040a3a:	00c9      	lsls	r1, r1, #3
10040a3c:	420b      	tst	r3, r1
10040a3e:	d169      	bne.n	10040b14 <__aeabi_fmul+0x14c>
10040a40:	2190      	movs	r1, #144	@ 0x90
10040a42:	0089      	lsls	r1, r1, #2
10040a44:	420b      	tst	r3, r1
10040a46:	d000      	beq.n	10040a4a <__aeabi_fmul+0x82>
10040a48:	e100      	b.n	10040c4c <__aeabi_fmul+0x284>
10040a4a:	2188      	movs	r1, #136	@ 0x88
10040a4c:	4219      	tst	r1, r3
10040a4e:	d000      	beq.n	10040a52 <__aeabi_fmul+0x8a>
10040a50:	e0f5      	b.n	10040c3e <__aeabi_fmul+0x276>
10040a52:	4641      	mov	r1, r8
10040a54:	0409      	lsls	r1, r1, #16
10040a56:	0c09      	lsrs	r1, r1, #16
10040a58:	4643      	mov	r3, r8
10040a5a:	0008      	movs	r0, r1
10040a5c:	0c35      	lsrs	r5, r6, #16
10040a5e:	0436      	lsls	r6, r6, #16
10040a60:	0c1b      	lsrs	r3, r3, #16
10040a62:	0c36      	lsrs	r6, r6, #16
10040a64:	4370      	muls	r0, r6
10040a66:	4369      	muls	r1, r5
10040a68:	435e      	muls	r6, r3
10040a6a:	435d      	muls	r5, r3
10040a6c:	1876      	adds	r6, r6, r1
10040a6e:	0c03      	lsrs	r3, r0, #16
10040a70:	199b      	adds	r3, r3, r6
10040a72:	4299      	cmp	r1, r3
10040a74:	d903      	bls.n	10040a7e <__aeabi_fmul+0xb6>
10040a76:	2180      	movs	r1, #128	@ 0x80
10040a78:	0249      	lsls	r1, r1, #9
10040a7a:	468c      	mov	ip, r1
10040a7c:	4465      	add	r5, ip
10040a7e:	0400      	lsls	r0, r0, #16
10040a80:	0419      	lsls	r1, r3, #16
10040a82:	0c00      	lsrs	r0, r0, #16
10040a84:	1809      	adds	r1, r1, r0
10040a86:	018e      	lsls	r6, r1, #6
10040a88:	1e70      	subs	r0, r6, #1
10040a8a:	4186      	sbcs	r6, r0
10040a8c:	0c1b      	lsrs	r3, r3, #16
10040a8e:	0e89      	lsrs	r1, r1, #26
10040a90:	195b      	adds	r3, r3, r5
10040a92:	430e      	orrs	r6, r1
10040a94:	019b      	lsls	r3, r3, #6
10040a96:	431e      	orrs	r6, r3
10040a98:	011b      	lsls	r3, r3, #4
10040a9a:	d46c      	bmi.n	10040b76 <__aeabi_fmul+0x1ae>
10040a9c:	0023      	movs	r3, r4
10040a9e:	337f      	adds	r3, #127	@ 0x7f
10040aa0:	2b00      	cmp	r3, #0
10040aa2:	dc00      	bgt.n	10040aa6 <__aeabi_fmul+0xde>
10040aa4:	e0b1      	b.n	10040c0a <__aeabi_fmul+0x242>
10040aa6:	0015      	movs	r5, r2
10040aa8:	0771      	lsls	r1, r6, #29
10040aaa:	d00b      	beq.n	10040ac4 <__aeabi_fmul+0xfc>
10040aac:	200f      	movs	r0, #15
10040aae:	0021      	movs	r1, r4
10040ab0:	4030      	ands	r0, r6
10040ab2:	2804      	cmp	r0, #4
10040ab4:	d006      	beq.n	10040ac4 <__aeabi_fmul+0xfc>
10040ab6:	3604      	adds	r6, #4
10040ab8:	0132      	lsls	r2, r6, #4
10040aba:	d503      	bpl.n	10040ac4 <__aeabi_fmul+0xfc>
10040abc:	4b6e      	ldr	r3, [pc, #440]	@ (10040c78 <__aeabi_fmul+0x2b0>)
10040abe:	401e      	ands	r6, r3
10040ac0:	000b      	movs	r3, r1
10040ac2:	3380      	adds	r3, #128	@ 0x80
10040ac4:	2bfe      	cmp	r3, #254	@ 0xfe
10040ac6:	dd00      	ble.n	10040aca <__aeabi_fmul+0x102>
10040ac8:	e0bd      	b.n	10040c46 <__aeabi_fmul+0x27e>
10040aca:	01b2      	lsls	r2, r6, #6
10040acc:	0a52      	lsrs	r2, r2, #9
10040ace:	b2db      	uxtb	r3, r3
10040ad0:	e048      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040ad2:	2e00      	cmp	r6, #0
10040ad4:	d000      	beq.n	10040ad8 <__aeabi_fmul+0x110>
10040ad6:	e092      	b.n	10040bfe <__aeabi_fmul+0x236>
10040ad8:	2308      	movs	r3, #8
10040ada:	4699      	mov	r9, r3
10040adc:	3b06      	subs	r3, #6
10040ade:	469a      	mov	sl, r3
10040ae0:	027b      	lsls	r3, r7, #9
10040ae2:	0a5b      	lsrs	r3, r3, #9
10040ae4:	4698      	mov	r8, r3
10040ae6:	007b      	lsls	r3, r7, #1
10040ae8:	24ff      	movs	r4, #255	@ 0xff
10040aea:	0e1b      	lsrs	r3, r3, #24
10040aec:	0fff      	lsrs	r7, r7, #31
10040aee:	2b00      	cmp	r3, #0
10040af0:	d18a      	bne.n	10040a08 <__aeabi_fmul+0x40>
10040af2:	4642      	mov	r2, r8
10040af4:	2a00      	cmp	r2, #0
10040af6:	d164      	bne.n	10040bc2 <__aeabi_fmul+0x1fa>
10040af8:	4649      	mov	r1, r9
10040afa:	3201      	adds	r2, #1
10040afc:	4311      	orrs	r1, r2
10040afe:	4689      	mov	r9, r1
10040b00:	290a      	cmp	r1, #10
10040b02:	dc08      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040b04:	407d      	eors	r5, r7
10040b06:	2001      	movs	r0, #1
10040b08:	b2ea      	uxtb	r2, r5
10040b0a:	2902      	cmp	r1, #2
10040b0c:	dc91      	bgt.n	10040a32 <__aeabi_fmul+0x6a>
10040b0e:	0015      	movs	r5, r2
10040b10:	2200      	movs	r2, #0
10040b12:	e027      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040b14:	0015      	movs	r5, r2
10040b16:	4653      	mov	r3, sl
10040b18:	2b02      	cmp	r3, #2
10040b1a:	d100      	bne.n	10040b1e <__aeabi_fmul+0x156>
10040b1c:	e093      	b.n	10040c46 <__aeabi_fmul+0x27e>
10040b1e:	2b03      	cmp	r3, #3
10040b20:	d01a      	beq.n	10040b58 <__aeabi_fmul+0x190>
10040b22:	2b01      	cmp	r3, #1
10040b24:	d12c      	bne.n	10040b80 <__aeabi_fmul+0x1b8>
10040b26:	2300      	movs	r3, #0
10040b28:	2200      	movs	r2, #0
10040b2a:	e01b      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040b2c:	4643      	mov	r3, r8
10040b2e:	34ff      	adds	r4, #255	@ 0xff
10040b30:	2b00      	cmp	r3, #0
10040b32:	d055      	beq.n	10040be0 <__aeabi_fmul+0x218>
10040b34:	2103      	movs	r1, #3
10040b36:	464b      	mov	r3, r9
10040b38:	430b      	orrs	r3, r1
10040b3a:	0019      	movs	r1, r3
10040b3c:	2b0a      	cmp	r3, #10
10040b3e:	dc00      	bgt.n	10040b42 <__aeabi_fmul+0x17a>
10040b40:	e092      	b.n	10040c68 <__aeabi_fmul+0x2a0>
10040b42:	2b0f      	cmp	r3, #15
10040b44:	d000      	beq.n	10040b48 <__aeabi_fmul+0x180>
10040b46:	e08c      	b.n	10040c62 <__aeabi_fmul+0x29a>
10040b48:	2280      	movs	r2, #128	@ 0x80
10040b4a:	03d2      	lsls	r2, r2, #15
10040b4c:	4216      	tst	r6, r2
10040b4e:	d003      	beq.n	10040b58 <__aeabi_fmul+0x190>
10040b50:	4643      	mov	r3, r8
10040b52:	4213      	tst	r3, r2
10040b54:	d100      	bne.n	10040b58 <__aeabi_fmul+0x190>
10040b56:	e07d      	b.n	10040c54 <__aeabi_fmul+0x28c>
10040b58:	2280      	movs	r2, #128	@ 0x80
10040b5a:	03d2      	lsls	r2, r2, #15
10040b5c:	4332      	orrs	r2, r6
10040b5e:	0252      	lsls	r2, r2, #9
10040b60:	0a52      	lsrs	r2, r2, #9
10040b62:	23ff      	movs	r3, #255	@ 0xff
10040b64:	05d8      	lsls	r0, r3, #23
10040b66:	07ed      	lsls	r5, r5, #31
10040b68:	4310      	orrs	r0, r2
10040b6a:	4328      	orrs	r0, r5
10040b6c:	bce0      	pop	{r5, r6, r7}
10040b6e:	46ba      	mov	sl, r7
10040b70:	46b1      	mov	r9, r6
10040b72:	46a8      	mov	r8, r5
10040b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040b76:	2301      	movs	r3, #1
10040b78:	0015      	movs	r5, r2
10040b7a:	0871      	lsrs	r1, r6, #1
10040b7c:	401e      	ands	r6, r3
10040b7e:	430e      	orrs	r6, r1
10040b80:	0023      	movs	r3, r4
10040b82:	3380      	adds	r3, #128	@ 0x80
10040b84:	1c61      	adds	r1, r4, #1
10040b86:	2b00      	cmp	r3, #0
10040b88:	dd41      	ble.n	10040c0e <__aeabi_fmul+0x246>
10040b8a:	0772      	lsls	r2, r6, #29
10040b8c:	d094      	beq.n	10040ab8 <__aeabi_fmul+0xf0>
10040b8e:	220f      	movs	r2, #15
10040b90:	4032      	ands	r2, r6
10040b92:	2a04      	cmp	r2, #4
10040b94:	d000      	beq.n	10040b98 <__aeabi_fmul+0x1d0>
10040b96:	e78e      	b.n	10040ab6 <__aeabi_fmul+0xee>
10040b98:	e78e      	b.n	10040ab8 <__aeabi_fmul+0xf0>
10040b9a:	2e00      	cmp	r6, #0
10040b9c:	d105      	bne.n	10040baa <__aeabi_fmul+0x1e2>
10040b9e:	2304      	movs	r3, #4
10040ba0:	4699      	mov	r9, r3
10040ba2:	3b03      	subs	r3, #3
10040ba4:	2400      	movs	r4, #0
10040ba6:	469a      	mov	sl, r3
10040ba8:	e726      	b.n	100409f8 <__aeabi_fmul+0x30>
10040baa:	0030      	movs	r0, r6
10040bac:	f7ff fd04 	bl	100405b8 <__clzsi2>
10040bb0:	2476      	movs	r4, #118	@ 0x76
10040bb2:	1f43      	subs	r3, r0, #5
10040bb4:	409e      	lsls	r6, r3
10040bb6:	2300      	movs	r3, #0
10040bb8:	4264      	negs	r4, r4
10040bba:	4699      	mov	r9, r3
10040bbc:	469a      	mov	sl, r3
10040bbe:	1a24      	subs	r4, r4, r0
10040bc0:	e71a      	b.n	100409f8 <__aeabi_fmul+0x30>
10040bc2:	4640      	mov	r0, r8
10040bc4:	f7ff fcf8 	bl	100405b8 <__clzsi2>
10040bc8:	464b      	mov	r3, r9
10040bca:	1a24      	subs	r4, r4, r0
10040bcc:	3c76      	subs	r4, #118	@ 0x76
10040bce:	2b0a      	cmp	r3, #10
10040bd0:	dca1      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040bd2:	4643      	mov	r3, r8
10040bd4:	3805      	subs	r0, #5
10040bd6:	4083      	lsls	r3, r0
10040bd8:	407d      	eors	r5, r7
10040bda:	4698      	mov	r8, r3
10040bdc:	b2ea      	uxtb	r2, r5
10040bde:	e724      	b.n	10040a2a <__aeabi_fmul+0x62>
10040be0:	464a      	mov	r2, r9
10040be2:	3302      	adds	r3, #2
10040be4:	4313      	orrs	r3, r2
10040be6:	002a      	movs	r2, r5
10040be8:	407a      	eors	r2, r7
10040bea:	b2d2      	uxtb	r2, r2
10040bec:	2b0a      	cmp	r3, #10
10040bee:	dc92      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040bf0:	4649      	mov	r1, r9
10040bf2:	0015      	movs	r5, r2
10040bf4:	2900      	cmp	r1, #0
10040bf6:	d026      	beq.n	10040c46 <__aeabi_fmul+0x27e>
10040bf8:	4699      	mov	r9, r3
10040bfa:	2002      	movs	r0, #2
10040bfc:	e719      	b.n	10040a32 <__aeabi_fmul+0x6a>
10040bfe:	230c      	movs	r3, #12
10040c00:	4699      	mov	r9, r3
10040c02:	3b09      	subs	r3, #9
10040c04:	24ff      	movs	r4, #255	@ 0xff
10040c06:	469a      	mov	sl, r3
10040c08:	e6f6      	b.n	100409f8 <__aeabi_fmul+0x30>
10040c0a:	0015      	movs	r5, r2
10040c0c:	0021      	movs	r1, r4
10040c0e:	2201      	movs	r2, #1
10040c10:	1ad3      	subs	r3, r2, r3
10040c12:	2b1b      	cmp	r3, #27
10040c14:	dd00      	ble.n	10040c18 <__aeabi_fmul+0x250>
10040c16:	e786      	b.n	10040b26 <__aeabi_fmul+0x15e>
10040c18:	319e      	adds	r1, #158	@ 0x9e
10040c1a:	0032      	movs	r2, r6
10040c1c:	408e      	lsls	r6, r1
10040c1e:	40da      	lsrs	r2, r3
10040c20:	1e73      	subs	r3, r6, #1
10040c22:	419e      	sbcs	r6, r3
10040c24:	4332      	orrs	r2, r6
10040c26:	0753      	lsls	r3, r2, #29
10040c28:	d004      	beq.n	10040c34 <__aeabi_fmul+0x26c>
10040c2a:	230f      	movs	r3, #15
10040c2c:	4013      	ands	r3, r2
10040c2e:	2b04      	cmp	r3, #4
10040c30:	d000      	beq.n	10040c34 <__aeabi_fmul+0x26c>
10040c32:	3204      	adds	r2, #4
10040c34:	0153      	lsls	r3, r2, #5
10040c36:	d510      	bpl.n	10040c5a <__aeabi_fmul+0x292>
10040c38:	2301      	movs	r3, #1
10040c3a:	2200      	movs	r2, #0
10040c3c:	e792      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040c3e:	003d      	movs	r5, r7
10040c40:	4646      	mov	r6, r8
10040c42:	4682      	mov	sl, r0
10040c44:	e767      	b.n	10040b16 <__aeabi_fmul+0x14e>
10040c46:	23ff      	movs	r3, #255	@ 0xff
10040c48:	2200      	movs	r2, #0
10040c4a:	e78b      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040c4c:	2280      	movs	r2, #128	@ 0x80
10040c4e:	2500      	movs	r5, #0
10040c50:	03d2      	lsls	r2, r2, #15
10040c52:	e786      	b.n	10040b62 <__aeabi_fmul+0x19a>
10040c54:	003d      	movs	r5, r7
10040c56:	431a      	orrs	r2, r3
10040c58:	e783      	b.n	10040b62 <__aeabi_fmul+0x19a>
10040c5a:	0192      	lsls	r2, r2, #6
10040c5c:	2300      	movs	r3, #0
10040c5e:	0a52      	lsrs	r2, r2, #9
10040c60:	e780      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040c62:	003d      	movs	r5, r7
10040c64:	4646      	mov	r6, r8
10040c66:	e777      	b.n	10040b58 <__aeabi_fmul+0x190>
10040c68:	002a      	movs	r2, r5
10040c6a:	2301      	movs	r3, #1
10040c6c:	407a      	eors	r2, r7
10040c6e:	408b      	lsls	r3, r1
10040c70:	2003      	movs	r0, #3
10040c72:	b2d2      	uxtb	r2, r2
10040c74:	e6e9      	b.n	10040a4a <__aeabi_fmul+0x82>
10040c76:	46c0      	nop			@ (mov r8, r8)
10040c78:	f7ffffff 	.word	0xf7ffffff

10040c7c <__aeabi_fsub>:
10040c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10040c7e:	4647      	mov	r7, r8
10040c80:	46ce      	mov	lr, r9
10040c82:	0243      	lsls	r3, r0, #9
10040c84:	b580      	push	{r7, lr}
10040c86:	0a5f      	lsrs	r7, r3, #9
10040c88:	099b      	lsrs	r3, r3, #6
10040c8a:	0045      	lsls	r5, r0, #1
10040c8c:	004a      	lsls	r2, r1, #1
10040c8e:	469c      	mov	ip, r3
10040c90:	024b      	lsls	r3, r1, #9
10040c92:	0fc4      	lsrs	r4, r0, #31
10040c94:	0fce      	lsrs	r6, r1, #31
10040c96:	0e2d      	lsrs	r5, r5, #24
10040c98:	0a58      	lsrs	r0, r3, #9
10040c9a:	0e12      	lsrs	r2, r2, #24
10040c9c:	0999      	lsrs	r1, r3, #6
10040c9e:	2aff      	cmp	r2, #255	@ 0xff
10040ca0:	d06b      	beq.n	10040d7a <__aeabi_fsub+0xfe>
10040ca2:	2301      	movs	r3, #1
10040ca4:	405e      	eors	r6, r3
10040ca6:	1aab      	subs	r3, r5, r2
10040ca8:	42b4      	cmp	r4, r6
10040caa:	d04b      	beq.n	10040d44 <__aeabi_fsub+0xc8>
10040cac:	2b00      	cmp	r3, #0
10040cae:	dc00      	bgt.n	10040cb2 <__aeabi_fsub+0x36>
10040cb0:	e0ff      	b.n	10040eb2 <__aeabi_fsub+0x236>
10040cb2:	2a00      	cmp	r2, #0
10040cb4:	d100      	bne.n	10040cb8 <__aeabi_fsub+0x3c>
10040cb6:	e088      	b.n	10040dca <__aeabi_fsub+0x14e>
10040cb8:	2dff      	cmp	r5, #255	@ 0xff
10040cba:	d100      	bne.n	10040cbe <__aeabi_fsub+0x42>
10040cbc:	e0ef      	b.n	10040e9e <__aeabi_fsub+0x222>
10040cbe:	2280      	movs	r2, #128	@ 0x80
10040cc0:	04d2      	lsls	r2, r2, #19
10040cc2:	4311      	orrs	r1, r2
10040cc4:	2001      	movs	r0, #1
10040cc6:	2b1b      	cmp	r3, #27
10040cc8:	dc08      	bgt.n	10040cdc <__aeabi_fsub+0x60>
10040cca:	0008      	movs	r0, r1
10040ccc:	2220      	movs	r2, #32
10040cce:	40d8      	lsrs	r0, r3
10040cd0:	1ad3      	subs	r3, r2, r3
10040cd2:	4099      	lsls	r1, r3
10040cd4:	000b      	movs	r3, r1
10040cd6:	1e5a      	subs	r2, r3, #1
10040cd8:	4193      	sbcs	r3, r2
10040cda:	4318      	orrs	r0, r3
10040cdc:	4663      	mov	r3, ip
10040cde:	1a1b      	subs	r3, r3, r0
10040ce0:	469c      	mov	ip, r3
10040ce2:	4663      	mov	r3, ip
10040ce4:	015b      	lsls	r3, r3, #5
10040ce6:	d400      	bmi.n	10040cea <__aeabi_fsub+0x6e>
10040ce8:	e0cd      	b.n	10040e86 <__aeabi_fsub+0x20a>
10040cea:	4663      	mov	r3, ip
10040cec:	019f      	lsls	r7, r3, #6
10040cee:	09bf      	lsrs	r7, r7, #6
10040cf0:	0038      	movs	r0, r7
10040cf2:	f7ff fc61 	bl	100405b8 <__clzsi2>
10040cf6:	003b      	movs	r3, r7
10040cf8:	3805      	subs	r0, #5
10040cfa:	4083      	lsls	r3, r0
10040cfc:	4285      	cmp	r5, r0
10040cfe:	dc00      	bgt.n	10040d02 <__aeabi_fsub+0x86>
10040d00:	e0a2      	b.n	10040e48 <__aeabi_fsub+0x1cc>
10040d02:	4ab7      	ldr	r2, [pc, #732]	@ (10040fe0 <__aeabi_fsub+0x364>)
10040d04:	1a2d      	subs	r5, r5, r0
10040d06:	401a      	ands	r2, r3
10040d08:	4694      	mov	ip, r2
10040d0a:	075a      	lsls	r2, r3, #29
10040d0c:	d100      	bne.n	10040d10 <__aeabi_fsub+0x94>
10040d0e:	e0c3      	b.n	10040e98 <__aeabi_fsub+0x21c>
10040d10:	220f      	movs	r2, #15
10040d12:	4013      	ands	r3, r2
10040d14:	2b04      	cmp	r3, #4
10040d16:	d100      	bne.n	10040d1a <__aeabi_fsub+0x9e>
10040d18:	e0be      	b.n	10040e98 <__aeabi_fsub+0x21c>
10040d1a:	2304      	movs	r3, #4
10040d1c:	4698      	mov	r8, r3
10040d1e:	44c4      	add	ip, r8
10040d20:	4663      	mov	r3, ip
10040d22:	015b      	lsls	r3, r3, #5
10040d24:	d400      	bmi.n	10040d28 <__aeabi_fsub+0xac>
10040d26:	e0b7      	b.n	10040e98 <__aeabi_fsub+0x21c>
10040d28:	1c68      	adds	r0, r5, #1
10040d2a:	2dfe      	cmp	r5, #254	@ 0xfe
10040d2c:	d000      	beq.n	10040d30 <__aeabi_fsub+0xb4>
10040d2e:	e0a5      	b.n	10040e7c <__aeabi_fsub+0x200>
10040d30:	20ff      	movs	r0, #255	@ 0xff
10040d32:	2200      	movs	r2, #0
10040d34:	05c0      	lsls	r0, r0, #23
10040d36:	4310      	orrs	r0, r2
10040d38:	07e4      	lsls	r4, r4, #31
10040d3a:	4320      	orrs	r0, r4
10040d3c:	bcc0      	pop	{r6, r7}
10040d3e:	46b9      	mov	r9, r7
10040d40:	46b0      	mov	r8, r6
10040d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10040d44:	2b00      	cmp	r3, #0
10040d46:	dc00      	bgt.n	10040d4a <__aeabi_fsub+0xce>
10040d48:	e1eb      	b.n	10041122 <__aeabi_fsub+0x4a6>
10040d4a:	2a00      	cmp	r2, #0
10040d4c:	d046      	beq.n	10040ddc <__aeabi_fsub+0x160>
10040d4e:	2dff      	cmp	r5, #255	@ 0xff
10040d50:	d100      	bne.n	10040d54 <__aeabi_fsub+0xd8>
10040d52:	e0a4      	b.n	10040e9e <__aeabi_fsub+0x222>
10040d54:	2280      	movs	r2, #128	@ 0x80
10040d56:	04d2      	lsls	r2, r2, #19
10040d58:	4311      	orrs	r1, r2
10040d5a:	2b1b      	cmp	r3, #27
10040d5c:	dc00      	bgt.n	10040d60 <__aeabi_fsub+0xe4>
10040d5e:	e0fb      	b.n	10040f58 <__aeabi_fsub+0x2dc>
10040d60:	2305      	movs	r3, #5
10040d62:	4698      	mov	r8, r3
10040d64:	002b      	movs	r3, r5
10040d66:	44c4      	add	ip, r8
10040d68:	4662      	mov	r2, ip
10040d6a:	08d7      	lsrs	r7, r2, #3
10040d6c:	2bff      	cmp	r3, #255	@ 0xff
10040d6e:	d100      	bne.n	10040d72 <__aeabi_fsub+0xf6>
10040d70:	e095      	b.n	10040e9e <__aeabi_fsub+0x222>
10040d72:	027a      	lsls	r2, r7, #9
10040d74:	0a52      	lsrs	r2, r2, #9
10040d76:	b2d8      	uxtb	r0, r3
10040d78:	e7dc      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040d7a:	002b      	movs	r3, r5
10040d7c:	3bff      	subs	r3, #255	@ 0xff
10040d7e:	4699      	mov	r9, r3
10040d80:	2900      	cmp	r1, #0
10040d82:	d118      	bne.n	10040db6 <__aeabi_fsub+0x13a>
10040d84:	2301      	movs	r3, #1
10040d86:	405e      	eors	r6, r3
10040d88:	42b4      	cmp	r4, r6
10040d8a:	d100      	bne.n	10040d8e <__aeabi_fsub+0x112>
10040d8c:	e0ca      	b.n	10040f24 <__aeabi_fsub+0x2a8>
10040d8e:	464b      	mov	r3, r9
10040d90:	2b00      	cmp	r3, #0
10040d92:	d02d      	beq.n	10040df0 <__aeabi_fsub+0x174>
10040d94:	2d00      	cmp	r5, #0
10040d96:	d000      	beq.n	10040d9a <__aeabi_fsub+0x11e>
10040d98:	e13c      	b.n	10041014 <__aeabi_fsub+0x398>
10040d9a:	23ff      	movs	r3, #255	@ 0xff
10040d9c:	4664      	mov	r4, ip
10040d9e:	2c00      	cmp	r4, #0
10040da0:	d100      	bne.n	10040da4 <__aeabi_fsub+0x128>
10040da2:	e15f      	b.n	10041064 <__aeabi_fsub+0x3e8>
10040da4:	1e5d      	subs	r5, r3, #1
10040da6:	2b01      	cmp	r3, #1
10040da8:	d100      	bne.n	10040dac <__aeabi_fsub+0x130>
10040daa:	e174      	b.n	10041096 <__aeabi_fsub+0x41a>
10040dac:	0034      	movs	r4, r6
10040dae:	2bff      	cmp	r3, #255	@ 0xff
10040db0:	d074      	beq.n	10040e9c <__aeabi_fsub+0x220>
10040db2:	002b      	movs	r3, r5
10040db4:	e103      	b.n	10040fbe <__aeabi_fsub+0x342>
10040db6:	42b4      	cmp	r4, r6
10040db8:	d100      	bne.n	10040dbc <__aeabi_fsub+0x140>
10040dba:	e09c      	b.n	10040ef6 <__aeabi_fsub+0x27a>
10040dbc:	2b00      	cmp	r3, #0
10040dbe:	d017      	beq.n	10040df0 <__aeabi_fsub+0x174>
10040dc0:	2d00      	cmp	r5, #0
10040dc2:	d0ea      	beq.n	10040d9a <__aeabi_fsub+0x11e>
10040dc4:	0007      	movs	r7, r0
10040dc6:	0034      	movs	r4, r6
10040dc8:	e06c      	b.n	10040ea4 <__aeabi_fsub+0x228>
10040dca:	2900      	cmp	r1, #0
10040dcc:	d0cc      	beq.n	10040d68 <__aeabi_fsub+0xec>
10040dce:	1e5a      	subs	r2, r3, #1
10040dd0:	2b01      	cmp	r3, #1
10040dd2:	d02b      	beq.n	10040e2c <__aeabi_fsub+0x1b0>
10040dd4:	2bff      	cmp	r3, #255	@ 0xff
10040dd6:	d062      	beq.n	10040e9e <__aeabi_fsub+0x222>
10040dd8:	0013      	movs	r3, r2
10040dda:	e773      	b.n	10040cc4 <__aeabi_fsub+0x48>
10040ddc:	2900      	cmp	r1, #0
10040dde:	d0c3      	beq.n	10040d68 <__aeabi_fsub+0xec>
10040de0:	1e5a      	subs	r2, r3, #1
10040de2:	2b01      	cmp	r3, #1
10040de4:	d100      	bne.n	10040de8 <__aeabi_fsub+0x16c>
10040de6:	e11e      	b.n	10041026 <__aeabi_fsub+0x3aa>
10040de8:	2bff      	cmp	r3, #255	@ 0xff
10040dea:	d058      	beq.n	10040e9e <__aeabi_fsub+0x222>
10040dec:	0013      	movs	r3, r2
10040dee:	e7b4      	b.n	10040d5a <__aeabi_fsub+0xde>
10040df0:	22fe      	movs	r2, #254	@ 0xfe
10040df2:	1c6b      	adds	r3, r5, #1
10040df4:	421a      	tst	r2, r3
10040df6:	d10d      	bne.n	10040e14 <__aeabi_fsub+0x198>
10040df8:	2d00      	cmp	r5, #0
10040dfa:	d060      	beq.n	10040ebe <__aeabi_fsub+0x242>
10040dfc:	4663      	mov	r3, ip
10040dfe:	2b00      	cmp	r3, #0
10040e00:	d000      	beq.n	10040e04 <__aeabi_fsub+0x188>
10040e02:	e120      	b.n	10041046 <__aeabi_fsub+0x3ca>
10040e04:	2900      	cmp	r1, #0
10040e06:	d000      	beq.n	10040e0a <__aeabi_fsub+0x18e>
10040e08:	e128      	b.n	1004105c <__aeabi_fsub+0x3e0>
10040e0a:	2280      	movs	r2, #128	@ 0x80
10040e0c:	2400      	movs	r4, #0
10040e0e:	20ff      	movs	r0, #255	@ 0xff
10040e10:	03d2      	lsls	r2, r2, #15
10040e12:	e78f      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040e14:	4663      	mov	r3, ip
10040e16:	1a5f      	subs	r7, r3, r1
10040e18:	017b      	lsls	r3, r7, #5
10040e1a:	d500      	bpl.n	10040e1e <__aeabi_fsub+0x1a2>
10040e1c:	e0fe      	b.n	1004101c <__aeabi_fsub+0x3a0>
10040e1e:	2f00      	cmp	r7, #0
10040e20:	d000      	beq.n	10040e24 <__aeabi_fsub+0x1a8>
10040e22:	e765      	b.n	10040cf0 <__aeabi_fsub+0x74>
10040e24:	2400      	movs	r4, #0
10040e26:	2000      	movs	r0, #0
10040e28:	2200      	movs	r2, #0
10040e2a:	e783      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040e2c:	4663      	mov	r3, ip
10040e2e:	1a59      	subs	r1, r3, r1
10040e30:	014b      	lsls	r3, r1, #5
10040e32:	d400      	bmi.n	10040e36 <__aeabi_fsub+0x1ba>
10040e34:	e119      	b.n	1004106a <__aeabi_fsub+0x3ee>
10040e36:	018f      	lsls	r7, r1, #6
10040e38:	09bf      	lsrs	r7, r7, #6
10040e3a:	0038      	movs	r0, r7
10040e3c:	f7ff fbbc 	bl	100405b8 <__clzsi2>
10040e40:	003b      	movs	r3, r7
10040e42:	3805      	subs	r0, #5
10040e44:	4083      	lsls	r3, r0
10040e46:	2501      	movs	r5, #1
10040e48:	2220      	movs	r2, #32
10040e4a:	1b40      	subs	r0, r0, r5
10040e4c:	3001      	adds	r0, #1
10040e4e:	1a12      	subs	r2, r2, r0
10040e50:	0019      	movs	r1, r3
10040e52:	4093      	lsls	r3, r2
10040e54:	40c1      	lsrs	r1, r0
10040e56:	1e5a      	subs	r2, r3, #1
10040e58:	4193      	sbcs	r3, r2
10040e5a:	4319      	orrs	r1, r3
10040e5c:	468c      	mov	ip, r1
10040e5e:	1e0b      	subs	r3, r1, #0
10040e60:	d0e1      	beq.n	10040e26 <__aeabi_fsub+0x1aa>
10040e62:	075b      	lsls	r3, r3, #29
10040e64:	d100      	bne.n	10040e68 <__aeabi_fsub+0x1ec>
10040e66:	e152      	b.n	1004110e <__aeabi_fsub+0x492>
10040e68:	230f      	movs	r3, #15
10040e6a:	2500      	movs	r5, #0
10040e6c:	400b      	ands	r3, r1
10040e6e:	2b04      	cmp	r3, #4
10040e70:	d000      	beq.n	10040e74 <__aeabi_fsub+0x1f8>
10040e72:	e752      	b.n	10040d1a <__aeabi_fsub+0x9e>
10040e74:	2001      	movs	r0, #1
10040e76:	014a      	lsls	r2, r1, #5
10040e78:	d400      	bmi.n	10040e7c <__aeabi_fsub+0x200>
10040e7a:	e092      	b.n	10040fa2 <__aeabi_fsub+0x326>
10040e7c:	b2c0      	uxtb	r0, r0
10040e7e:	4663      	mov	r3, ip
10040e80:	019a      	lsls	r2, r3, #6
10040e82:	0a52      	lsrs	r2, r2, #9
10040e84:	e756      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040e86:	4663      	mov	r3, ip
10040e88:	075b      	lsls	r3, r3, #29
10040e8a:	d005      	beq.n	10040e98 <__aeabi_fsub+0x21c>
10040e8c:	230f      	movs	r3, #15
10040e8e:	4662      	mov	r2, ip
10040e90:	4013      	ands	r3, r2
10040e92:	2b04      	cmp	r3, #4
10040e94:	d000      	beq.n	10040e98 <__aeabi_fsub+0x21c>
10040e96:	e740      	b.n	10040d1a <__aeabi_fsub+0x9e>
10040e98:	002b      	movs	r3, r5
10040e9a:	e765      	b.n	10040d68 <__aeabi_fsub+0xec>
10040e9c:	0007      	movs	r7, r0
10040e9e:	2f00      	cmp	r7, #0
10040ea0:	d100      	bne.n	10040ea4 <__aeabi_fsub+0x228>
10040ea2:	e745      	b.n	10040d30 <__aeabi_fsub+0xb4>
10040ea4:	2280      	movs	r2, #128	@ 0x80
10040ea6:	03d2      	lsls	r2, r2, #15
10040ea8:	433a      	orrs	r2, r7
10040eaa:	0252      	lsls	r2, r2, #9
10040eac:	20ff      	movs	r0, #255	@ 0xff
10040eae:	0a52      	lsrs	r2, r2, #9
10040eb0:	e740      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040eb2:	2b00      	cmp	r3, #0
10040eb4:	d179      	bne.n	10040faa <__aeabi_fsub+0x32e>
10040eb6:	22fe      	movs	r2, #254	@ 0xfe
10040eb8:	1c6b      	adds	r3, r5, #1
10040eba:	421a      	tst	r2, r3
10040ebc:	d1aa      	bne.n	10040e14 <__aeabi_fsub+0x198>
10040ebe:	4663      	mov	r3, ip
10040ec0:	2b00      	cmp	r3, #0
10040ec2:	d100      	bne.n	10040ec6 <__aeabi_fsub+0x24a>
10040ec4:	e0f5      	b.n	100410b2 <__aeabi_fsub+0x436>
10040ec6:	2900      	cmp	r1, #0
10040ec8:	d100      	bne.n	10040ecc <__aeabi_fsub+0x250>
10040eca:	e0d1      	b.n	10041070 <__aeabi_fsub+0x3f4>
10040ecc:	1a5f      	subs	r7, r3, r1
10040ece:	2380      	movs	r3, #128	@ 0x80
10040ed0:	04db      	lsls	r3, r3, #19
10040ed2:	421f      	tst	r7, r3
10040ed4:	d100      	bne.n	10040ed8 <__aeabi_fsub+0x25c>
10040ed6:	e10e      	b.n	100410f6 <__aeabi_fsub+0x47a>
10040ed8:	4662      	mov	r2, ip
10040eda:	2401      	movs	r4, #1
10040edc:	1a8a      	subs	r2, r1, r2
10040ede:	4694      	mov	ip, r2
10040ee0:	2000      	movs	r0, #0
10040ee2:	4034      	ands	r4, r6
10040ee4:	2a00      	cmp	r2, #0
10040ee6:	d100      	bne.n	10040eea <__aeabi_fsub+0x26e>
10040ee8:	e724      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040eea:	2001      	movs	r0, #1
10040eec:	421a      	tst	r2, r3
10040eee:	d1c6      	bne.n	10040e7e <__aeabi_fsub+0x202>
10040ef0:	2300      	movs	r3, #0
10040ef2:	08d7      	lsrs	r7, r2, #3
10040ef4:	e73d      	b.n	10040d72 <__aeabi_fsub+0xf6>
10040ef6:	2b00      	cmp	r3, #0
10040ef8:	d017      	beq.n	10040f2a <__aeabi_fsub+0x2ae>
10040efa:	2d00      	cmp	r5, #0
10040efc:	d000      	beq.n	10040f00 <__aeabi_fsub+0x284>
10040efe:	e0af      	b.n	10041060 <__aeabi_fsub+0x3e4>
10040f00:	23ff      	movs	r3, #255	@ 0xff
10040f02:	4665      	mov	r5, ip
10040f04:	2d00      	cmp	r5, #0
10040f06:	d100      	bne.n	10040f0a <__aeabi_fsub+0x28e>
10040f08:	e0ad      	b.n	10041066 <__aeabi_fsub+0x3ea>
10040f0a:	1e5e      	subs	r6, r3, #1
10040f0c:	2b01      	cmp	r3, #1
10040f0e:	d100      	bne.n	10040f12 <__aeabi_fsub+0x296>
10040f10:	e089      	b.n	10041026 <__aeabi_fsub+0x3aa>
10040f12:	2bff      	cmp	r3, #255	@ 0xff
10040f14:	d0c2      	beq.n	10040e9c <__aeabi_fsub+0x220>
10040f16:	2e1b      	cmp	r6, #27
10040f18:	dc00      	bgt.n	10040f1c <__aeabi_fsub+0x2a0>
10040f1a:	e0ab      	b.n	10041074 <__aeabi_fsub+0x3f8>
10040f1c:	1d4b      	adds	r3, r1, #5
10040f1e:	469c      	mov	ip, r3
10040f20:	0013      	movs	r3, r2
10040f22:	e721      	b.n	10040d68 <__aeabi_fsub+0xec>
10040f24:	464b      	mov	r3, r9
10040f26:	2b00      	cmp	r3, #0
10040f28:	d170      	bne.n	1004100c <__aeabi_fsub+0x390>
10040f2a:	22fe      	movs	r2, #254	@ 0xfe
10040f2c:	1c6b      	adds	r3, r5, #1
10040f2e:	421a      	tst	r2, r3
10040f30:	d15e      	bne.n	10040ff0 <__aeabi_fsub+0x374>
10040f32:	2d00      	cmp	r5, #0
10040f34:	d000      	beq.n	10040f38 <__aeabi_fsub+0x2bc>
10040f36:	e0c3      	b.n	100410c0 <__aeabi_fsub+0x444>
10040f38:	4663      	mov	r3, ip
10040f3a:	2b00      	cmp	r3, #0
10040f3c:	d100      	bne.n	10040f40 <__aeabi_fsub+0x2c4>
10040f3e:	e0d0      	b.n	100410e2 <__aeabi_fsub+0x466>
10040f40:	2900      	cmp	r1, #0
10040f42:	d100      	bne.n	10040f46 <__aeabi_fsub+0x2ca>
10040f44:	e094      	b.n	10041070 <__aeabi_fsub+0x3f4>
10040f46:	000a      	movs	r2, r1
10040f48:	4462      	add	r2, ip
10040f4a:	0153      	lsls	r3, r2, #5
10040f4c:	d400      	bmi.n	10040f50 <__aeabi_fsub+0x2d4>
10040f4e:	e0d8      	b.n	10041102 <__aeabi_fsub+0x486>
10040f50:	0192      	lsls	r2, r2, #6
10040f52:	2001      	movs	r0, #1
10040f54:	0a52      	lsrs	r2, r2, #9
10040f56:	e6ed      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040f58:	0008      	movs	r0, r1
10040f5a:	2220      	movs	r2, #32
10040f5c:	40d8      	lsrs	r0, r3
10040f5e:	1ad3      	subs	r3, r2, r3
10040f60:	4099      	lsls	r1, r3
10040f62:	000b      	movs	r3, r1
10040f64:	1e5a      	subs	r2, r3, #1
10040f66:	4193      	sbcs	r3, r2
10040f68:	4303      	orrs	r3, r0
10040f6a:	449c      	add	ip, r3
10040f6c:	4663      	mov	r3, ip
10040f6e:	015b      	lsls	r3, r3, #5
10040f70:	d589      	bpl.n	10040e86 <__aeabi_fsub+0x20a>
10040f72:	3501      	adds	r5, #1
10040f74:	2dff      	cmp	r5, #255	@ 0xff
10040f76:	d100      	bne.n	10040f7a <__aeabi_fsub+0x2fe>
10040f78:	e6da      	b.n	10040d30 <__aeabi_fsub+0xb4>
10040f7a:	4662      	mov	r2, ip
10040f7c:	2301      	movs	r3, #1
10040f7e:	4919      	ldr	r1, [pc, #100]	@ (10040fe4 <__aeabi_fsub+0x368>)
10040f80:	4013      	ands	r3, r2
10040f82:	0852      	lsrs	r2, r2, #1
10040f84:	400a      	ands	r2, r1
10040f86:	431a      	orrs	r2, r3
10040f88:	0013      	movs	r3, r2
10040f8a:	4694      	mov	ip, r2
10040f8c:	075b      	lsls	r3, r3, #29
10040f8e:	d004      	beq.n	10040f9a <__aeabi_fsub+0x31e>
10040f90:	230f      	movs	r3, #15
10040f92:	4013      	ands	r3, r2
10040f94:	2b04      	cmp	r3, #4
10040f96:	d000      	beq.n	10040f9a <__aeabi_fsub+0x31e>
10040f98:	e6bf      	b.n	10040d1a <__aeabi_fsub+0x9e>
10040f9a:	4663      	mov	r3, ip
10040f9c:	015b      	lsls	r3, r3, #5
10040f9e:	d500      	bpl.n	10040fa2 <__aeabi_fsub+0x326>
10040fa0:	e6c2      	b.n	10040d28 <__aeabi_fsub+0xac>
10040fa2:	4663      	mov	r3, ip
10040fa4:	08df      	lsrs	r7, r3, #3
10040fa6:	002b      	movs	r3, r5
10040fa8:	e6e3      	b.n	10040d72 <__aeabi_fsub+0xf6>
10040faa:	1b53      	subs	r3, r2, r5
10040fac:	2d00      	cmp	r5, #0
10040fae:	d100      	bne.n	10040fb2 <__aeabi_fsub+0x336>
10040fb0:	e6f4      	b.n	10040d9c <__aeabi_fsub+0x120>
10040fb2:	2080      	movs	r0, #128	@ 0x80
10040fb4:	4664      	mov	r4, ip
10040fb6:	04c0      	lsls	r0, r0, #19
10040fb8:	4304      	orrs	r4, r0
10040fba:	46a4      	mov	ip, r4
10040fbc:	0034      	movs	r4, r6
10040fbe:	2001      	movs	r0, #1
10040fc0:	2b1b      	cmp	r3, #27
10040fc2:	dc09      	bgt.n	10040fd8 <__aeabi_fsub+0x35c>
10040fc4:	2520      	movs	r5, #32
10040fc6:	4660      	mov	r0, ip
10040fc8:	40d8      	lsrs	r0, r3
10040fca:	1aeb      	subs	r3, r5, r3
10040fcc:	4665      	mov	r5, ip
10040fce:	409d      	lsls	r5, r3
10040fd0:	002b      	movs	r3, r5
10040fd2:	1e5d      	subs	r5, r3, #1
10040fd4:	41ab      	sbcs	r3, r5
10040fd6:	4318      	orrs	r0, r3
10040fd8:	1a0b      	subs	r3, r1, r0
10040fda:	469c      	mov	ip, r3
10040fdc:	0015      	movs	r5, r2
10040fde:	e680      	b.n	10040ce2 <__aeabi_fsub+0x66>
10040fe0:	fbffffff 	.word	0xfbffffff
10040fe4:	7dffffff 	.word	0x7dffffff
10040fe8:	22fe      	movs	r2, #254	@ 0xfe
10040fea:	1c6b      	adds	r3, r5, #1
10040fec:	4213      	tst	r3, r2
10040fee:	d0a3      	beq.n	10040f38 <__aeabi_fsub+0x2bc>
10040ff0:	2bff      	cmp	r3, #255	@ 0xff
10040ff2:	d100      	bne.n	10040ff6 <__aeabi_fsub+0x37a>
10040ff4:	e69c      	b.n	10040d30 <__aeabi_fsub+0xb4>
10040ff6:	4461      	add	r1, ip
10040ff8:	0849      	lsrs	r1, r1, #1
10040ffa:	074a      	lsls	r2, r1, #29
10040ffc:	d049      	beq.n	10041092 <__aeabi_fsub+0x416>
10040ffe:	220f      	movs	r2, #15
10041000:	400a      	ands	r2, r1
10041002:	2a04      	cmp	r2, #4
10041004:	d045      	beq.n	10041092 <__aeabi_fsub+0x416>
10041006:	1d0a      	adds	r2, r1, #4
10041008:	4694      	mov	ip, r2
1004100a:	e6ad      	b.n	10040d68 <__aeabi_fsub+0xec>
1004100c:	2d00      	cmp	r5, #0
1004100e:	d100      	bne.n	10041012 <__aeabi_fsub+0x396>
10041010:	e776      	b.n	10040f00 <__aeabi_fsub+0x284>
10041012:	e68d      	b.n	10040d30 <__aeabi_fsub+0xb4>
10041014:	0034      	movs	r4, r6
10041016:	20ff      	movs	r0, #255	@ 0xff
10041018:	2200      	movs	r2, #0
1004101a:	e68b      	b.n	10040d34 <__aeabi_fsub+0xb8>
1004101c:	4663      	mov	r3, ip
1004101e:	2401      	movs	r4, #1
10041020:	1acf      	subs	r7, r1, r3
10041022:	4034      	ands	r4, r6
10041024:	e664      	b.n	10040cf0 <__aeabi_fsub+0x74>
10041026:	4461      	add	r1, ip
10041028:	014b      	lsls	r3, r1, #5
1004102a:	d56d      	bpl.n	10041108 <__aeabi_fsub+0x48c>
1004102c:	0848      	lsrs	r0, r1, #1
1004102e:	4944      	ldr	r1, [pc, #272]	@ (10041140 <__aeabi_fsub+0x4c4>)
10041030:	4001      	ands	r1, r0
10041032:	0743      	lsls	r3, r0, #29
10041034:	d02c      	beq.n	10041090 <__aeabi_fsub+0x414>
10041036:	230f      	movs	r3, #15
10041038:	4003      	ands	r3, r0
1004103a:	2b04      	cmp	r3, #4
1004103c:	d028      	beq.n	10041090 <__aeabi_fsub+0x414>
1004103e:	1d0b      	adds	r3, r1, #4
10041040:	469c      	mov	ip, r3
10041042:	2302      	movs	r3, #2
10041044:	e690      	b.n	10040d68 <__aeabi_fsub+0xec>
10041046:	2900      	cmp	r1, #0
10041048:	d100      	bne.n	1004104c <__aeabi_fsub+0x3d0>
1004104a:	e72b      	b.n	10040ea4 <__aeabi_fsub+0x228>
1004104c:	2380      	movs	r3, #128	@ 0x80
1004104e:	03db      	lsls	r3, r3, #15
10041050:	429f      	cmp	r7, r3
10041052:	d200      	bcs.n	10041056 <__aeabi_fsub+0x3da>
10041054:	e726      	b.n	10040ea4 <__aeabi_fsub+0x228>
10041056:	4298      	cmp	r0, r3
10041058:	d300      	bcc.n	1004105c <__aeabi_fsub+0x3e0>
1004105a:	e723      	b.n	10040ea4 <__aeabi_fsub+0x228>
1004105c:	2401      	movs	r4, #1
1004105e:	4034      	ands	r4, r6
10041060:	0007      	movs	r7, r0
10041062:	e71f      	b.n	10040ea4 <__aeabi_fsub+0x228>
10041064:	0034      	movs	r4, r6
10041066:	468c      	mov	ip, r1
10041068:	e67e      	b.n	10040d68 <__aeabi_fsub+0xec>
1004106a:	2301      	movs	r3, #1
1004106c:	08cf      	lsrs	r7, r1, #3
1004106e:	e680      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041070:	2300      	movs	r3, #0
10041072:	e67e      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041074:	2020      	movs	r0, #32
10041076:	4665      	mov	r5, ip
10041078:	1b80      	subs	r0, r0, r6
1004107a:	4085      	lsls	r5, r0
1004107c:	4663      	mov	r3, ip
1004107e:	0028      	movs	r0, r5
10041080:	40f3      	lsrs	r3, r6
10041082:	1e45      	subs	r5, r0, #1
10041084:	41a8      	sbcs	r0, r5
10041086:	4303      	orrs	r3, r0
10041088:	469c      	mov	ip, r3
1004108a:	0015      	movs	r5, r2
1004108c:	448c      	add	ip, r1
1004108e:	e76d      	b.n	10040f6c <__aeabi_fsub+0x2f0>
10041090:	2302      	movs	r3, #2
10041092:	08cf      	lsrs	r7, r1, #3
10041094:	e66d      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041096:	1b0f      	subs	r7, r1, r4
10041098:	017b      	lsls	r3, r7, #5
1004109a:	d528      	bpl.n	100410ee <__aeabi_fsub+0x472>
1004109c:	01bf      	lsls	r7, r7, #6
1004109e:	09bf      	lsrs	r7, r7, #6
100410a0:	0038      	movs	r0, r7
100410a2:	f7ff fa89 	bl	100405b8 <__clzsi2>
100410a6:	003b      	movs	r3, r7
100410a8:	3805      	subs	r0, #5
100410aa:	4083      	lsls	r3, r0
100410ac:	0034      	movs	r4, r6
100410ae:	2501      	movs	r5, #1
100410b0:	e6ca      	b.n	10040e48 <__aeabi_fsub+0x1cc>
100410b2:	2900      	cmp	r1, #0
100410b4:	d100      	bne.n	100410b8 <__aeabi_fsub+0x43c>
100410b6:	e6b5      	b.n	10040e24 <__aeabi_fsub+0x1a8>
100410b8:	2401      	movs	r4, #1
100410ba:	0007      	movs	r7, r0
100410bc:	4034      	ands	r4, r6
100410be:	e658      	b.n	10040d72 <__aeabi_fsub+0xf6>
100410c0:	4663      	mov	r3, ip
100410c2:	2b00      	cmp	r3, #0
100410c4:	d100      	bne.n	100410c8 <__aeabi_fsub+0x44c>
100410c6:	e6e9      	b.n	10040e9c <__aeabi_fsub+0x220>
100410c8:	2900      	cmp	r1, #0
100410ca:	d100      	bne.n	100410ce <__aeabi_fsub+0x452>
100410cc:	e6ea      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410ce:	2380      	movs	r3, #128	@ 0x80
100410d0:	03db      	lsls	r3, r3, #15
100410d2:	429f      	cmp	r7, r3
100410d4:	d200      	bcs.n	100410d8 <__aeabi_fsub+0x45c>
100410d6:	e6e5      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410d8:	4298      	cmp	r0, r3
100410da:	d300      	bcc.n	100410de <__aeabi_fsub+0x462>
100410dc:	e6e2      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410de:	0007      	movs	r7, r0
100410e0:	e6e0      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410e2:	2900      	cmp	r1, #0
100410e4:	d100      	bne.n	100410e8 <__aeabi_fsub+0x46c>
100410e6:	e69e      	b.n	10040e26 <__aeabi_fsub+0x1aa>
100410e8:	2300      	movs	r3, #0
100410ea:	08cf      	lsrs	r7, r1, #3
100410ec:	e641      	b.n	10040d72 <__aeabi_fsub+0xf6>
100410ee:	0034      	movs	r4, r6
100410f0:	2301      	movs	r3, #1
100410f2:	08ff      	lsrs	r7, r7, #3
100410f4:	e63d      	b.n	10040d72 <__aeabi_fsub+0xf6>
100410f6:	2f00      	cmp	r7, #0
100410f8:	d100      	bne.n	100410fc <__aeabi_fsub+0x480>
100410fa:	e693      	b.n	10040e24 <__aeabi_fsub+0x1a8>
100410fc:	2300      	movs	r3, #0
100410fe:	08ff      	lsrs	r7, r7, #3
10041100:	e637      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041102:	2300      	movs	r3, #0
10041104:	08d7      	lsrs	r7, r2, #3
10041106:	e634      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041108:	2301      	movs	r3, #1
1004110a:	08cf      	lsrs	r7, r1, #3
1004110c:	e631      	b.n	10040d72 <__aeabi_fsub+0xf6>
1004110e:	2280      	movs	r2, #128	@ 0x80
10041110:	000b      	movs	r3, r1
10041112:	04d2      	lsls	r2, r2, #19
10041114:	2001      	movs	r0, #1
10041116:	4013      	ands	r3, r2
10041118:	4211      	tst	r1, r2
1004111a:	d000      	beq.n	1004111e <__aeabi_fsub+0x4a2>
1004111c:	e6ae      	b.n	10040e7c <__aeabi_fsub+0x200>
1004111e:	08cf      	lsrs	r7, r1, #3
10041120:	e627      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041122:	2b00      	cmp	r3, #0
10041124:	d100      	bne.n	10041128 <__aeabi_fsub+0x4ac>
10041126:	e75f      	b.n	10040fe8 <__aeabi_fsub+0x36c>
10041128:	1b56      	subs	r6, r2, r5
1004112a:	2d00      	cmp	r5, #0
1004112c:	d101      	bne.n	10041132 <__aeabi_fsub+0x4b6>
1004112e:	0033      	movs	r3, r6
10041130:	e6e7      	b.n	10040f02 <__aeabi_fsub+0x286>
10041132:	2380      	movs	r3, #128	@ 0x80
10041134:	4660      	mov	r0, ip
10041136:	04db      	lsls	r3, r3, #19
10041138:	4318      	orrs	r0, r3
1004113a:	4684      	mov	ip, r0
1004113c:	e6eb      	b.n	10040f16 <__aeabi_fsub+0x29a>
1004113e:	46c0      	nop			@ (mov r8, r8)
10041140:	7dffffff 	.word	0x7dffffff

10041144 <__aeabi_f2iz>:
10041144:	0241      	lsls	r1, r0, #9
10041146:	0042      	lsls	r2, r0, #1
10041148:	0fc3      	lsrs	r3, r0, #31
1004114a:	0a49      	lsrs	r1, r1, #9
1004114c:	2000      	movs	r0, #0
1004114e:	0e12      	lsrs	r2, r2, #24
10041150:	2a7e      	cmp	r2, #126	@ 0x7e
10041152:	dd03      	ble.n	1004115c <__aeabi_f2iz+0x18>
10041154:	2a9d      	cmp	r2, #157	@ 0x9d
10041156:	dd02      	ble.n	1004115e <__aeabi_f2iz+0x1a>
10041158:	4a09      	ldr	r2, [pc, #36]	@ (10041180 <__aeabi_f2iz+0x3c>)
1004115a:	1898      	adds	r0, r3, r2
1004115c:	4770      	bx	lr
1004115e:	2080      	movs	r0, #128	@ 0x80
10041160:	0400      	lsls	r0, r0, #16
10041162:	4301      	orrs	r1, r0
10041164:	2a95      	cmp	r2, #149	@ 0x95
10041166:	dc07      	bgt.n	10041178 <__aeabi_f2iz+0x34>
10041168:	2096      	movs	r0, #150	@ 0x96
1004116a:	1a82      	subs	r2, r0, r2
1004116c:	40d1      	lsrs	r1, r2
1004116e:	4248      	negs	r0, r1
10041170:	2b00      	cmp	r3, #0
10041172:	d1f3      	bne.n	1004115c <__aeabi_f2iz+0x18>
10041174:	0008      	movs	r0, r1
10041176:	e7f1      	b.n	1004115c <__aeabi_f2iz+0x18>
10041178:	3a96      	subs	r2, #150	@ 0x96
1004117a:	4091      	lsls	r1, r2
1004117c:	e7f7      	b.n	1004116e <__aeabi_f2iz+0x2a>
1004117e:	46c0      	nop			@ (mov r8, r8)
10041180:	7fffffff 	.word	0x7fffffff

10041184 <__aeabi_i2f>:
10041184:	b570      	push	{r4, r5, r6, lr}
10041186:	2800      	cmp	r0, #0
10041188:	d012      	beq.n	100411b0 <__aeabi_i2f+0x2c>
1004118a:	17c3      	asrs	r3, r0, #31
1004118c:	18c5      	adds	r5, r0, r3
1004118e:	405d      	eors	r5, r3
10041190:	0fc4      	lsrs	r4, r0, #31
10041192:	0028      	movs	r0, r5
10041194:	f7ff fa10 	bl	100405b8 <__clzsi2>
10041198:	239e      	movs	r3, #158	@ 0x9e
1004119a:	1a1b      	subs	r3, r3, r0
1004119c:	2b96      	cmp	r3, #150	@ 0x96
1004119e:	dc0f      	bgt.n	100411c0 <__aeabi_i2f+0x3c>
100411a0:	2808      	cmp	r0, #8
100411a2:	d038      	beq.n	10041216 <__aeabi_i2f+0x92>
100411a4:	3808      	subs	r0, #8
100411a6:	4085      	lsls	r5, r0
100411a8:	026d      	lsls	r5, r5, #9
100411aa:	0a6d      	lsrs	r5, r5, #9
100411ac:	b2d8      	uxtb	r0, r3
100411ae:	e002      	b.n	100411b6 <__aeabi_i2f+0x32>
100411b0:	2400      	movs	r4, #0
100411b2:	2000      	movs	r0, #0
100411b4:	2500      	movs	r5, #0
100411b6:	05c0      	lsls	r0, r0, #23
100411b8:	4328      	orrs	r0, r5
100411ba:	07e4      	lsls	r4, r4, #31
100411bc:	4320      	orrs	r0, r4
100411be:	bd70      	pop	{r4, r5, r6, pc}
100411c0:	2b99      	cmp	r3, #153	@ 0x99
100411c2:	dc14      	bgt.n	100411ee <__aeabi_i2f+0x6a>
100411c4:	1f42      	subs	r2, r0, #5
100411c6:	4095      	lsls	r5, r2
100411c8:	002a      	movs	r2, r5
100411ca:	4915      	ldr	r1, [pc, #84]	@ (10041220 <__aeabi_i2f+0x9c>)
100411cc:	4011      	ands	r1, r2
100411ce:	0755      	lsls	r5, r2, #29
100411d0:	d01c      	beq.n	1004120c <__aeabi_i2f+0x88>
100411d2:	250f      	movs	r5, #15
100411d4:	402a      	ands	r2, r5
100411d6:	2a04      	cmp	r2, #4
100411d8:	d018      	beq.n	1004120c <__aeabi_i2f+0x88>
100411da:	3104      	adds	r1, #4
100411dc:	08ca      	lsrs	r2, r1, #3
100411de:	0149      	lsls	r1, r1, #5
100411e0:	d515      	bpl.n	1004120e <__aeabi_i2f+0x8a>
100411e2:	239f      	movs	r3, #159	@ 0x9f
100411e4:	0252      	lsls	r2, r2, #9
100411e6:	1a18      	subs	r0, r3, r0
100411e8:	0a55      	lsrs	r5, r2, #9
100411ea:	b2c0      	uxtb	r0, r0
100411ec:	e7e3      	b.n	100411b6 <__aeabi_i2f+0x32>
100411ee:	2205      	movs	r2, #5
100411f0:	0029      	movs	r1, r5
100411f2:	1a12      	subs	r2, r2, r0
100411f4:	40d1      	lsrs	r1, r2
100411f6:	0002      	movs	r2, r0
100411f8:	321b      	adds	r2, #27
100411fa:	4095      	lsls	r5, r2
100411fc:	002a      	movs	r2, r5
100411fe:	1e55      	subs	r5, r2, #1
10041200:	41aa      	sbcs	r2, r5
10041202:	430a      	orrs	r2, r1
10041204:	4906      	ldr	r1, [pc, #24]	@ (10041220 <__aeabi_i2f+0x9c>)
10041206:	4011      	ands	r1, r2
10041208:	0755      	lsls	r5, r2, #29
1004120a:	d1e2      	bne.n	100411d2 <__aeabi_i2f+0x4e>
1004120c:	08ca      	lsrs	r2, r1, #3
1004120e:	0252      	lsls	r2, r2, #9
10041210:	0a55      	lsrs	r5, r2, #9
10041212:	b2d8      	uxtb	r0, r3
10041214:	e7cf      	b.n	100411b6 <__aeabi_i2f+0x32>
10041216:	026d      	lsls	r5, r5, #9
10041218:	0a6d      	lsrs	r5, r5, #9
1004121a:	308e      	adds	r0, #142	@ 0x8e
1004121c:	e7cb      	b.n	100411b6 <__aeabi_i2f+0x32>
1004121e:	46c0      	nop			@ (mov r8, r8)
10041220:	fbffffff 	.word	0xfbffffff

10041224 <__aeabi_ui2f>:
10041224:	b510      	push	{r4, lr}
10041226:	1e04      	subs	r4, r0, #0
10041228:	d00d      	beq.n	10041246 <__aeabi_ui2f+0x22>
1004122a:	f7ff f9c5 	bl	100405b8 <__clzsi2>
1004122e:	239e      	movs	r3, #158	@ 0x9e
10041230:	1a1b      	subs	r3, r3, r0
10041232:	2b96      	cmp	r3, #150	@ 0x96
10041234:	dc0c      	bgt.n	10041250 <__aeabi_ui2f+0x2c>
10041236:	2808      	cmp	r0, #8
10041238:	d034      	beq.n	100412a4 <__aeabi_ui2f+0x80>
1004123a:	3808      	subs	r0, #8
1004123c:	4084      	lsls	r4, r0
1004123e:	0264      	lsls	r4, r4, #9
10041240:	0a64      	lsrs	r4, r4, #9
10041242:	b2d8      	uxtb	r0, r3
10041244:	e001      	b.n	1004124a <__aeabi_ui2f+0x26>
10041246:	2000      	movs	r0, #0
10041248:	2400      	movs	r4, #0
1004124a:	05c0      	lsls	r0, r0, #23
1004124c:	4320      	orrs	r0, r4
1004124e:	bd10      	pop	{r4, pc}
10041250:	2b99      	cmp	r3, #153	@ 0x99
10041252:	dc13      	bgt.n	1004127c <__aeabi_ui2f+0x58>
10041254:	1f42      	subs	r2, r0, #5
10041256:	4094      	lsls	r4, r2
10041258:	4a14      	ldr	r2, [pc, #80]	@ (100412ac <__aeabi_ui2f+0x88>)
1004125a:	4022      	ands	r2, r4
1004125c:	0761      	lsls	r1, r4, #29
1004125e:	d01c      	beq.n	1004129a <__aeabi_ui2f+0x76>
10041260:	210f      	movs	r1, #15
10041262:	4021      	ands	r1, r4
10041264:	2904      	cmp	r1, #4
10041266:	d018      	beq.n	1004129a <__aeabi_ui2f+0x76>
10041268:	3204      	adds	r2, #4
1004126a:	08d4      	lsrs	r4, r2, #3
1004126c:	0152      	lsls	r2, r2, #5
1004126e:	d515      	bpl.n	1004129c <__aeabi_ui2f+0x78>
10041270:	239f      	movs	r3, #159	@ 0x9f
10041272:	0264      	lsls	r4, r4, #9
10041274:	1a18      	subs	r0, r3, r0
10041276:	0a64      	lsrs	r4, r4, #9
10041278:	b2c0      	uxtb	r0, r0
1004127a:	e7e6      	b.n	1004124a <__aeabi_ui2f+0x26>
1004127c:	0002      	movs	r2, r0
1004127e:	0021      	movs	r1, r4
10041280:	321b      	adds	r2, #27
10041282:	4091      	lsls	r1, r2
10041284:	000a      	movs	r2, r1
10041286:	1e51      	subs	r1, r2, #1
10041288:	418a      	sbcs	r2, r1
1004128a:	2105      	movs	r1, #5
1004128c:	1a09      	subs	r1, r1, r0
1004128e:	40cc      	lsrs	r4, r1
10041290:	4314      	orrs	r4, r2
10041292:	4a06      	ldr	r2, [pc, #24]	@ (100412ac <__aeabi_ui2f+0x88>)
10041294:	4022      	ands	r2, r4
10041296:	0761      	lsls	r1, r4, #29
10041298:	d1e2      	bne.n	10041260 <__aeabi_ui2f+0x3c>
1004129a:	08d4      	lsrs	r4, r2, #3
1004129c:	0264      	lsls	r4, r4, #9
1004129e:	0a64      	lsrs	r4, r4, #9
100412a0:	b2d8      	uxtb	r0, r3
100412a2:	e7d2      	b.n	1004124a <__aeabi_ui2f+0x26>
100412a4:	0264      	lsls	r4, r4, #9
100412a6:	0a64      	lsrs	r4, r4, #9
100412a8:	308e      	adds	r0, #142	@ 0x8e
100412aa:	e7ce      	b.n	1004124a <__aeabi_ui2f+0x26>
100412ac:	fbffffff 	.word	0xfbffffff

100412b0 <__clzdi2>:
100412b0:	b510      	push	{r4, lr}
100412b2:	2900      	cmp	r1, #0
100412b4:	d103      	bne.n	100412be <__clzdi2+0xe>
100412b6:	f7ff f97f 	bl	100405b8 <__clzsi2>
100412ba:	3020      	adds	r0, #32
100412bc:	e002      	b.n	100412c4 <__clzdi2+0x14>
100412be:	0008      	movs	r0, r1
100412c0:	f7ff f97a 	bl	100405b8 <__clzsi2>
100412c4:	bd10      	pop	{r4, pc}
100412c6:	46c0      	nop			@ (mov r8, r8)

100412c8 <BLUETOOTH_BufferInit>:
	uint8_t full;
}BTBuff_t;

static BTBuff_t buffer;

void BLUETOOTH_BufferInit(){
100412c8:	b580      	push	{r7, lr}
100412ca:	af00      	add	r7, sp, #0
	buffer.head = 0;
100412cc:	4a08      	ldr	r2, [pc, #32]	@ (100412f0 <BLUETOOTH_BufferInit+0x28>)
100412ce:	2380      	movs	r3, #128	@ 0x80
100412d0:	005b      	lsls	r3, r3, #1
100412d2:	2100      	movs	r1, #0
100412d4:	54d1      	strb	r1, [r2, r3]
	buffer.tail = 0;
100412d6:	4a06      	ldr	r2, [pc, #24]	@ (100412f0 <BLUETOOTH_BufferInit+0x28>)
100412d8:	2302      	movs	r3, #2
100412da:	33ff      	adds	r3, #255	@ 0xff
100412dc:	2100      	movs	r1, #0
100412de:	54d1      	strb	r1, [r2, r3]
	buffer.full = 0;
100412e0:	4a03      	ldr	r2, [pc, #12]	@ (100412f0 <BLUETOOTH_BufferInit+0x28>)
100412e2:	2381      	movs	r3, #129	@ 0x81
100412e4:	005b      	lsls	r3, r3, #1
100412e6:	2100      	movs	r1, #0
100412e8:	54d1      	strb	r1, [r2, r3]
}
100412ea:	46c0      	nop			@ (mov r8, r8)
100412ec:	46bd      	mov	sp, r7
100412ee:	bd80      	pop	{r7, pc}
100412f0:	20000194 	.word	0x20000194

100412f4 <BLUETOOTH_WriteBuffer>:

uint8_t BLUETOOTH_WriteBuffer(uint8_t input){
100412f4:	b580      	push	{r7, lr}
100412f6:	b082      	sub	sp, #8
100412f8:	af00      	add	r7, sp, #0
100412fa:	0002      	movs	r2, r0
100412fc:	1dfb      	adds	r3, r7, #7
100412fe:	701a      	strb	r2, [r3, #0]
	if(!buffer.full){
10041300:	4a20      	ldr	r2, [pc, #128]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
10041302:	2381      	movs	r3, #129	@ 0x81
10041304:	005b      	lsls	r3, r3, #1
10041306:	5cd3      	ldrb	r3, [r2, r3]
10041308:	2b00      	cmp	r3, #0
1004130a:	d136      	bne.n	1004137a <BLUETOOTH_WriteBuffer+0x86>
		buffer.data[buffer.head] = input;
1004130c:	4a1d      	ldr	r2, [pc, #116]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
1004130e:	2380      	movs	r3, #128	@ 0x80
10041310:	005b      	lsls	r3, r3, #1
10041312:	5cd3      	ldrb	r3, [r2, r3]
10041314:	0019      	movs	r1, r3
10041316:	4b1b      	ldr	r3, [pc, #108]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
10041318:	1dfa      	adds	r2, r7, #7
1004131a:	7812      	ldrb	r2, [r2, #0]
1004131c:	545a      	strb	r2, [r3, r1]
		buffer.head++;
1004131e:	4a19      	ldr	r2, [pc, #100]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
10041320:	2380      	movs	r3, #128	@ 0x80
10041322:	005b      	lsls	r3, r3, #1
10041324:	5cd3      	ldrb	r3, [r2, r3]
10041326:	3301      	adds	r3, #1
10041328:	b2d9      	uxtb	r1, r3
1004132a:	4a16      	ldr	r2, [pc, #88]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
1004132c:	2380      	movs	r3, #128	@ 0x80
1004132e:	005b      	lsls	r3, r3, #1
10041330:	54d1      	strb	r1, [r2, r3]
		buffer.head %= BTBUFFERSIZE;
10041332:	4a14      	ldr	r2, [pc, #80]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
10041334:	2380      	movs	r3, #128	@ 0x80
10041336:	005b      	lsls	r3, r3, #1
10041338:	5cd1      	ldrb	r1, [r2, r3]
1004133a:	4a12      	ldr	r2, [pc, #72]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
1004133c:	2380      	movs	r3, #128	@ 0x80
1004133e:	005b      	lsls	r3, r3, #1
10041340:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041342:	4a10      	ldr	r2, [pc, #64]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
10041344:	2380      	movs	r3, #128	@ 0x80
10041346:	005b      	lsls	r3, r3, #1
10041348:	5cd3      	ldrb	r3, [r2, r3]
1004134a:	3301      	adds	r3, #1
1004134c:	4a0e      	ldr	r2, [pc, #56]	@ (10041388 <BLUETOOTH_WriteBuffer+0x94>)
1004134e:	4013      	ands	r3, r2
10041350:	d503      	bpl.n	1004135a <BLUETOOTH_WriteBuffer+0x66>
10041352:	3b01      	subs	r3, #1
10041354:	4a0d      	ldr	r2, [pc, #52]	@ (1004138c <BLUETOOTH_WriteBuffer+0x98>)
10041356:	4313      	orrs	r3, r2
10041358:	3301      	adds	r3, #1
1004135a:	0019      	movs	r1, r3
1004135c:	4a09      	ldr	r2, [pc, #36]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
1004135e:	2302      	movs	r3, #2
10041360:	33ff      	adds	r3, #255	@ 0xff
10041362:	5cd3      	ldrb	r3, [r2, r3]
10041364:	1acb      	subs	r3, r1, r3
10041366:	425a      	negs	r2, r3
10041368:	4153      	adcs	r3, r2
1004136a:	b2db      	uxtb	r3, r3
1004136c:	0019      	movs	r1, r3
1004136e:	4a05      	ldr	r2, [pc, #20]	@ (10041384 <BLUETOOTH_WriteBuffer+0x90>)
10041370:	2381      	movs	r3, #129	@ 0x81
10041372:	005b      	lsls	r3, r3, #1
10041374:	54d1      	strb	r1, [r2, r3]

		return 1;
10041376:	2301      	movs	r3, #1
10041378:	e000      	b.n	1004137c <BLUETOOTH_WriteBuffer+0x88>
	} else {
		return 0;
1004137a:	2300      	movs	r3, #0
	}
}
1004137c:	0018      	movs	r0, r3
1004137e:	46bd      	mov	sp, r7
10041380:	b002      	add	sp, #8
10041382:	bd80      	pop	{r7, pc}
10041384:	20000194 	.word	0x20000194
10041388:	800000ff 	.word	0x800000ff
1004138c:	ffffff00 	.word	0xffffff00

10041390 <BLUETOOTH_ReadBuffer>:

uint8_t BLUETOOTH_ReadBuffer(){
10041390:	b580      	push	{r7, lr}
10041392:	b082      	sub	sp, #8
10041394:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
10041396:	1dfb      	adds	r3, r7, #7
10041398:	2200      	movs	r2, #0
1004139a:	701a      	strb	r2, [r3, #0]
	if(buffer.head != buffer.tail || buffer.full){
1004139c:	4a25      	ldr	r2, [pc, #148]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
1004139e:	2380      	movs	r3, #128	@ 0x80
100413a0:	005b      	lsls	r3, r3, #1
100413a2:	5cd2      	ldrb	r2, [r2, r3]
100413a4:	4923      	ldr	r1, [pc, #140]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413a6:	2302      	movs	r3, #2
100413a8:	33ff      	adds	r3, #255	@ 0xff
100413aa:	5ccb      	ldrb	r3, [r1, r3]
100413ac:	429a      	cmp	r2, r3
100413ae:	d105      	bne.n	100413bc <BLUETOOTH_ReadBuffer+0x2c>
100413b0:	4a20      	ldr	r2, [pc, #128]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413b2:	2381      	movs	r3, #129	@ 0x81
100413b4:	005b      	lsls	r3, r3, #1
100413b6:	5cd3      	ldrb	r3, [r2, r3]
100413b8:	2b00      	cmp	r3, #0
100413ba:	d034      	beq.n	10041426 <BLUETOOTH_ReadBuffer+0x96>

		ret = buffer.data[buffer.tail];
100413bc:	4a1d      	ldr	r2, [pc, #116]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413be:	2302      	movs	r3, #2
100413c0:	33ff      	adds	r3, #255	@ 0xff
100413c2:	5cd3      	ldrb	r3, [r2, r3]
100413c4:	0019      	movs	r1, r3
100413c6:	1dfb      	adds	r3, r7, #7
100413c8:	4a1a      	ldr	r2, [pc, #104]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413ca:	5c52      	ldrb	r2, [r2, r1]
100413cc:	701a      	strb	r2, [r3, #0]
		buffer.tail++;
100413ce:	4a19      	ldr	r2, [pc, #100]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413d0:	2302      	movs	r3, #2
100413d2:	33ff      	adds	r3, #255	@ 0xff
100413d4:	5cd3      	ldrb	r3, [r2, r3]
100413d6:	3301      	adds	r3, #1
100413d8:	b2d9      	uxtb	r1, r3
100413da:	4a16      	ldr	r2, [pc, #88]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413dc:	2302      	movs	r3, #2
100413de:	33ff      	adds	r3, #255	@ 0xff
100413e0:	54d1      	strb	r1, [r2, r3]
		buffer.tail %= BTBUFFERSIZE;
100413e2:	4a14      	ldr	r2, [pc, #80]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413e4:	2302      	movs	r3, #2
100413e6:	33ff      	adds	r3, #255	@ 0xff
100413e8:	5cd1      	ldrb	r1, [r2, r3]
100413ea:	4a12      	ldr	r2, [pc, #72]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413ec:	2302      	movs	r3, #2
100413ee:	33ff      	adds	r3, #255	@ 0xff
100413f0:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
100413f2:	4a10      	ldr	r2, [pc, #64]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
100413f4:	2380      	movs	r3, #128	@ 0x80
100413f6:	005b      	lsls	r3, r3, #1
100413f8:	5cd3      	ldrb	r3, [r2, r3]
100413fa:	3301      	adds	r3, #1
100413fc:	4a0e      	ldr	r2, [pc, #56]	@ (10041438 <BLUETOOTH_ReadBuffer+0xa8>)
100413fe:	4013      	ands	r3, r2
10041400:	d503      	bpl.n	1004140a <BLUETOOTH_ReadBuffer+0x7a>
10041402:	3b01      	subs	r3, #1
10041404:	4a0d      	ldr	r2, [pc, #52]	@ (1004143c <BLUETOOTH_ReadBuffer+0xac>)
10041406:	4313      	orrs	r3, r2
10041408:	3301      	adds	r3, #1
1004140a:	0019      	movs	r1, r3
1004140c:	4a09      	ldr	r2, [pc, #36]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
1004140e:	2302      	movs	r3, #2
10041410:	33ff      	adds	r3, #255	@ 0xff
10041412:	5cd3      	ldrb	r3, [r2, r3]
10041414:	1acb      	subs	r3, r1, r3
10041416:	425a      	negs	r2, r3
10041418:	4153      	adcs	r3, r2
1004141a:	b2db      	uxtb	r3, r3
1004141c:	0019      	movs	r1, r3
1004141e:	4a05      	ldr	r2, [pc, #20]	@ (10041434 <BLUETOOTH_ReadBuffer+0xa4>)
10041420:	2381      	movs	r3, #129	@ 0x81
10041422:	005b      	lsls	r3, r3, #1
10041424:	54d1      	strb	r1, [r2, r3]
	}
	return ret;
10041426:	1dfb      	adds	r3, r7, #7
10041428:	781b      	ldrb	r3, [r3, #0]
}
1004142a:	0018      	movs	r0, r3
1004142c:	46bd      	mov	sp, r7
1004142e:	b002      	add	sp, #8
10041430:	bd80      	pop	{r7, pc}
10041432:	46c0      	nop			@ (mov r8, r8)
10041434:	20000194 	.word	0x20000194
10041438:	800000ff 	.word	0x800000ff
1004143c:	ffffff00 	.word	0xffffff00

10041440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
10041440:	b590      	push	{r4, r7, lr}
10041442:	b089      	sub	sp, #36	@ 0x24
10041444:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10041446:	2408      	movs	r4, #8
10041448:	193b      	adds	r3, r7, r4
1004144a:	0018      	movs	r0, r3
1004144c:	2318      	movs	r3, #24
1004144e:	001a      	movs	r2, r3
10041450:	2100      	movs	r1, #0
10041452:	f023 fbfb 	bl	10064c4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10041456:	003b      	movs	r3, r7
10041458:	0018      	movs	r0, r3
1004145a:	2308      	movs	r3, #8
1004145c:	001a      	movs	r2, r3
1004145e:	2100      	movs	r1, #0
10041460:	f023 fbf4 	bl	10064c4c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10041464:	193b      	adds	r3, r7, r4
10041466:	2205      	movs	r2, #5
10041468:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
1004146a:	193b      	adds	r3, r7, r4
1004146c:	2280      	movs	r2, #128	@ 0x80
1004146e:	0252      	lsls	r2, r2, #9
10041470:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10041472:	193b      	adds	r3, r7, r4
10041474:	2204      	movs	r2, #4
10041476:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10041478:	193b      	adds	r3, r7, r4
1004147a:	0018      	movs	r0, r3
1004147c:	f008 faf6 	bl	10049a6c <HAL_RCC_OscConfig>
10041480:	1e03      	subs	r3, r0, #0
10041482:	d001      	beq.n	10041488 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
10041484:	2300      	movs	r3, #0
10041486:	e00f      	b.n	100414a8 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10041488:	003b      	movs	r3, r7
1004148a:	2200      	movs	r2, #0
1004148c:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
1004148e:	003b      	movs	r3, r7
10041490:	2200      	movs	r2, #0
10041492:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10041494:	003b      	movs	r3, r7
10041496:	2110      	movs	r1, #16
10041498:	0018      	movs	r0, r3
1004149a:	f008 fc31 	bl	10049d00 <HAL_RCC_ClockConfig>
1004149e:	1e03      	subs	r3, r0, #0
100414a0:	d001      	beq.n	100414a6 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
100414a2:	2300      	movs	r3, #0
100414a4:	e000      	b.n	100414a8 <SystemClock_Config+0x68>
	}
	return INIT_OK;
100414a6:	2301      	movs	r3, #1
}
100414a8:	0018      	movs	r0, r3
100414aa:	46bd      	mov	sp, r7
100414ac:	b009      	add	sp, #36	@ 0x24
100414ae:	bd90      	pop	{r4, r7, pc}

100414b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
100414b0:	b580      	push	{r7, lr}
100414b2:	b086      	sub	sp, #24
100414b4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100414b6:	003b      	movs	r3, r7
100414b8:	0018      	movs	r0, r3
100414ba:	2318      	movs	r3, #24
100414bc:	001a      	movs	r2, r3
100414be:	2100      	movs	r1, #0
100414c0:	f023 fbc4 	bl	10064c4c <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100414c4:	003b      	movs	r3, r7
100414c6:	2202      	movs	r2, #2
100414c8:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100414ca:	003b      	movs	r3, r7
100414cc:	2280      	movs	r2, #128	@ 0x80
100414ce:	0152      	lsls	r2, r2, #5
100414d0:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100414d2:	003b      	movs	r3, r7
100414d4:	0018      	movs	r0, r3
100414d6:	f008 fda9 	bl	1004a02c <HAL_RCCEx_PeriphCLKConfig>
100414da:	1e03      	subs	r3, r0, #0
100414dc:	d001      	beq.n	100414e2 <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
100414de:	2300      	movs	r3, #0
100414e0:	e000      	b.n	100414e4 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
100414e2:	2301      	movs	r3, #1
}
100414e4:	0018      	movs	r0, r3
100414e6:	46bd      	mov	sp, r7
100414e8:	b006      	add	sp, #24
100414ea:	bd80      	pop	{r7, pc}

100414ec <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
100414ec:	b580      	push	{r7, lr}
100414ee:	b082      	sub	sp, #8
100414f0:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100414f2:	4b0f      	ldr	r3, [pc, #60]	@ (10041530 <BOARD_Init+0x44>)
100414f4:	781b      	ldrb	r3, [r3, #0]
100414f6:	2b00      	cmp	r3, #0
100414f8:	d001      	beq.n	100414fe <BOARD_Init+0x12>
100414fa:	2301      	movs	r3, #1
100414fc:	e013      	b.n	10041526 <BOARD_Init+0x3a>
	HAL_Init();
100414fe:	f003 f9c5 	bl	1004488c <HAL_Init>
	int errorFlag = INIT_OK;
10041502:	2301      	movs	r3, #1
10041504:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10041506:	f7ff ffd3 	bl	100414b0 <PeriphCommonClock_Config>
1004150a:	1e03      	subs	r3, r0, #0
1004150c:	d101      	bne.n	10041512 <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
1004150e:	2300      	movs	r3, #0
10041510:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
10041512:	f7ff ff95 	bl	10041440 <SystemClock_Config>
10041516:	1e03      	subs	r3, r0, #0
10041518:	d101      	bne.n	1004151e <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
1004151a:	2300      	movs	r3, #0
1004151c:	607b      	str	r3, [r7, #4]
	}
	initialized = 1;
1004151e:	4b04      	ldr	r3, [pc, #16]	@ (10041530 <BOARD_Init+0x44>)
10041520:	2201      	movs	r2, #1
10041522:	701a      	strb	r2, [r3, #0]
	return errorFlag;
10041524:	687b      	ldr	r3, [r7, #4]
}
10041526:	0018      	movs	r0, r3
10041528:	46bd      	mov	sp, r7
1004152a:	b002      	add	sp, #8
1004152c:	bd80      	pop	{r7, pc}
1004152e:	46c0      	nop			@ (mov r8, r8)
10041530:	20000297 	.word	0x20000297

10041534 <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
10041534:	b580      	push	{r7, lr}
10041536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10041538:	b672      	cpsid	i
}
1004153a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
1004153c:	46c0      	nop			@ (mov r8, r8)
1004153e:	e7fd      	b.n	1004153c <BOARD_CrashHandler+0x8>

10041540 <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
10041540:	b580      	push	{r7, lr}
10041542:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10041544:	b672      	cpsid	i
}
10041546:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10041548:	46c0      	nop			@ (mov r8, r8)
1004154a:	e7fd      	b.n	10041548 <Error_Handler+0x8>

1004154c <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
1004154c:	b580      	push	{r7, lr}
1004154e:	b084      	sub	sp, #16
10041550:	af00      	add	r7, sp, #0
10041552:	6078      	str	r0, [r7, #4]
	commSM = init;
10041554:	4b0b      	ldr	r3, [pc, #44]	@ (10041584 <COMM_Event_Init+0x38>)
10041556:	2200      	movs	r2, #0
10041558:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
1004155a:	4b0b      	ldr	r3, [pc, #44]	@ (10041588 <COMM_Event_Init+0x3c>)
1004155c:	687a      	ldr	r2, [r7, #4]
1004155e:	601a      	str	r2, [r3, #0]
	UARTs_Init();
10041560:	f002 f826 	bl	100435b0 <UARTs_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
10041564:	210c      	movs	r1, #12
10041566:	187b      	adds	r3, r7, r1
10041568:	2201      	movs	r2, #1
1004156a:	701a      	strb	r2, [r3, #0]
1004156c:	187b      	adds	r3, r7, r1
1004156e:	2200      	movs	r2, #0
10041570:	805a      	strh	r2, [r3, #2]
10041572:	187b      	adds	r3, r7, r1
10041574:	6818      	ldr	r0, [r3, #0]
10041576:	f000 f809 	bl	1004158c <COMM_Event_Post>
	return INIT_OK;
1004157a:	2301      	movs	r3, #1
}
1004157c:	0018      	movs	r0, r3
1004157e:	46bd      	mov	sp, r7
10041580:	b004      	add	sp, #16
10041582:	bd80      	pop	{r7, pc}
10041584:	20000298 	.word	0x20000298
10041588:	2000029c 	.word	0x2000029c

1004158c <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
1004158c:	b580      	push	{r7, lr}
1004158e:	b082      	sub	sp, #8
10041590:	af00      	add	r7, sp, #0
10041592:	1d3b      	adds	r3, r7, #4
10041594:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
10041596:	4b05      	ldr	r3, [pc, #20]	@ (100415ac <COMM_Event_Post+0x20>)
10041598:	681a      	ldr	r2, [r3, #0]
1004159a:	1d3b      	adds	r3, r7, #4
1004159c:	6819      	ldr	r1, [r3, #0]
1004159e:	0010      	movs	r0, r2
100415a0:	f000 fbff 	bl	10041da2 <FIFO_Enqueue>
}
100415a4:	46c0      	nop			@ (mov r8, r8)
100415a6:	46bd      	mov	sp, r7
100415a8:	b002      	add	sp, #8
100415aa:	bd80      	pop	{r7, pc}
100415ac:	2000029c 	.word	0x2000029c

100415b0 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
100415b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100415b2:	b087      	sub	sp, #28
100415b4:	af00      	add	r7, sp, #0
	uint8_t event = 0;
100415b6:	2317      	movs	r3, #23
100415b8:	18fb      	adds	r3, r7, r3
100415ba:	2200      	movs	r2, #0
100415bc:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
100415be:	250c      	movs	r5, #12
100415c0:	197b      	adds	r3, r7, r5
100415c2:	2200      	movs	r2, #0
100415c4:	701a      	strb	r2, [r3, #0]
100415c6:	197b      	adds	r3, r7, r5
100415c8:	2200      	movs	r2, #0
100415ca:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
100415cc:	2616      	movs	r6, #22
100415ce:	19bc      	adds	r4, r7, r6
100415d0:	f002 f8d8 	bl	10043784 <USART_ReadRx>
100415d4:	0003      	movs	r3, r0
100415d6:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
100415d8:	0031      	movs	r1, r6
100415da:	187b      	adds	r3, r7, r1
100415dc:	781b      	ldrb	r3, [r3, #0]
100415de:	2b25      	cmp	r3, #37	@ 0x25
100415e0:	d00b      	beq.n	100415fa <COMM_Event_Updater+0x4a>
    	event = 1;
100415e2:	2317      	movs	r3, #23
100415e4:	18fb      	adds	r3, r7, r3
100415e6:	2201      	movs	r2, #1
100415e8:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
100415ea:	197b      	adds	r3, r7, r5
100415ec:	2206      	movs	r2, #6
100415ee:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
100415f0:	187b      	adds	r3, r7, r1
100415f2:	781b      	ldrb	r3, [r3, #0]
100415f4:	b29a      	uxth	r2, r3
100415f6:	197b      	adds	r3, r7, r5
100415f8:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
100415fa:	4b1c      	ldr	r3, [pc, #112]	@ (1004166c <COMM_Event_Updater+0xbc>)
100415fc:	781b      	ldrb	r3, [r3, #0]
100415fe:	2b01      	cmp	r3, #1
10041600:	d110      	bne.n	10041624 <COMM_Event_Updater+0x74>
    	if(USART_TxEmpty()){
10041602:	f002 f95b 	bl	100438bc <USART_TxEmpty>
10041606:	1e03      	subs	r3, r0, #0
10041608:	d00c      	beq.n	10041624 <COMM_Event_Updater+0x74>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
1004160a:	4b19      	ldr	r3, [pc, #100]	@ (10041670 <COMM_Event_Updater+0xc0>)
1004160c:	681a      	ldr	r2, [r3, #0]
1004160e:	1d3b      	adds	r3, r7, #4
10041610:	2107      	movs	r1, #7
10041612:	7019      	strb	r1, [r3, #0]
10041614:	1d3b      	adds	r3, r7, #4
10041616:	2100      	movs	r1, #0
10041618:	8059      	strh	r1, [r3, #2]
1004161a:	1d3b      	adds	r3, r7, #4
1004161c:	6819      	ldr	r1, [r3, #0]
1004161e:	0010      	movs	r0, r2
10041620:	f000 fbbf 	bl	10041da2 <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
10041624:	2317      	movs	r3, #23
10041626:	18fb      	adds	r3, r7, r3
10041628:	781b      	ldrb	r3, [r3, #0]
1004162a:	2b00      	cmp	r3, #0
1004162c:	d007      	beq.n	1004163e <COMM_Event_Updater+0x8e>
1004162e:	4b10      	ldr	r3, [pc, #64]	@ (10041670 <COMM_Event_Updater+0xc0>)
10041630:	681a      	ldr	r2, [r3, #0]
10041632:	230c      	movs	r3, #12
10041634:	18fb      	adds	r3, r7, r3
10041636:	6819      	ldr	r1, [r3, #0]
10041638:	0010      	movs	r0, r2
1004163a:	f000 fbb2 	bl	10041da2 <FIFO_Enqueue>
    return out;
1004163e:	2110      	movs	r1, #16
10041640:	187b      	adds	r3, r7, r1
10041642:	220c      	movs	r2, #12
10041644:	18ba      	adds	r2, r7, r2
10041646:	6812      	ldr	r2, [r2, #0]
10041648:	601a      	str	r2, [r3, #0]
1004164a:	187a      	adds	r2, r7, r1
1004164c:	2300      	movs	r3, #0
1004164e:	8811      	ldrh	r1, [r2, #0]
10041650:	0409      	lsls	r1, r1, #16
10041652:	0c09      	lsrs	r1, r1, #16
10041654:	0c1b      	lsrs	r3, r3, #16
10041656:	041b      	lsls	r3, r3, #16
10041658:	430b      	orrs	r3, r1
1004165a:	8852      	ldrh	r2, [r2, #2]
1004165c:	0412      	lsls	r2, r2, #16
1004165e:	041b      	lsls	r3, r3, #16
10041660:	0c1b      	lsrs	r3, r3, #16
10041662:	4313      	orrs	r3, r2
}
10041664:	0018      	movs	r0, r3
10041666:	46bd      	mov	sp, r7
10041668:	b007      	add	sp, #28
1004166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004166c:	200002a0 	.word	0x200002a0
10041670:	2000029c 	.word	0x2000029c

10041674 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
10041674:	b5b0      	push	{r4, r5, r7, lr}
10041676:	b09e      	sub	sp, #120	@ 0x78
10041678:	af00      	add	r7, sp, #0
1004167a:	1d3b      	adds	r3, r7, #4
1004167c:	6018      	str	r0, [r3, #0]
	bool transition = 0;
1004167e:	2377      	movs	r3, #119	@ 0x77
10041680:	18fb      	adds	r3, r7, r3
10041682:	2200      	movs	r2, #0
10041684:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
10041686:	2376      	movs	r3, #118	@ 0x76
10041688:	18fb      	adds	r3, r7, r3
1004168a:	4adb      	ldr	r2, [pc, #876]	@ (100419f8 <COMM_Event_Handler+0x384>)
1004168c:	7812      	ldrb	r2, [r2, #0]
1004168e:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
10041690:	4bd9      	ldr	r3, [pc, #868]	@ (100419f8 <COMM_Event_Handler+0x384>)
10041692:	781b      	ldrb	r3, [r3, #0]
10041694:	2b0f      	cmp	r3, #15
10041696:	d900      	bls.n	1004169a <COMM_Event_Handler+0x26>
10041698:	e2ee      	b.n	10041c78 <COMM_Event_Handler+0x604>
1004169a:	009a      	lsls	r2, r3, #2
1004169c:	4bd7      	ldr	r3, [pc, #860]	@ (100419fc <COMM_Event_Handler+0x388>)
1004169e:	18d3      	adds	r3, r2, r3
100416a0:	681b      	ldr	r3, [r3, #0]
100416a2:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
100416a4:	1d3b      	adds	r3, r7, #4
100416a6:	781b      	ldrb	r3, [r3, #0]
100416a8:	b25b      	sxtb	r3, r3
100416aa:	2b01      	cmp	r3, #1
100416ac:	d000      	beq.n	100416b0 <COMM_Event_Handler+0x3c>
100416ae:	e2e5      	b.n	10041c7c <COMM_Event_Handler+0x608>
			next = idle;
100416b0:	2376      	movs	r3, #118	@ 0x76
100416b2:	18fb      	adds	r3, r7, r3
100416b4:	2201      	movs	r2, #1
100416b6:	701a      	strb	r2, [r3, #0]
			transition = true;
100416b8:	2377      	movs	r3, #119	@ 0x77
100416ba:	18fb      	adds	r3, r7, r3
100416bc:	2201      	movs	r2, #1
100416be:	701a      	strb	r2, [r3, #0]
		}
		break;
100416c0:	e2dc      	b.n	10041c7c <COMM_Event_Handler+0x608>
	case idle:
		if(event.status == EVENT_ENTRY){
100416c2:	1d3b      	adds	r3, r7, #4
100416c4:	781b      	ldrb	r3, [r3, #0]
100416c6:	b25b      	sxtb	r3, r3
100416c8:	2b02      	cmp	r3, #2
100416ca:	d105      	bne.n	100416d8 <COMM_Event_Handler+0x64>
			sendinglogs = 0;
100416cc:	4bcc      	ldr	r3, [pc, #816]	@ (10041a00 <COMM_Event_Handler+0x38c>)
100416ce:	2200      	movs	r2, #0
100416d0:	701a      	strb	r2, [r3, #0]
			BSP_LED_Toggle(LED_BLUE);
100416d2:	2000      	movs	r0, #0
100416d4:	f003 f810 	bl	100446f8 <BSP_LED_Toggle>
		}
		if(event.status == EVENT_USART){
100416d8:	1d3b      	adds	r3, r7, #4
100416da:	781b      	ldrb	r3, [r3, #0]
100416dc:	b25b      	sxtb	r3, r3
100416de:	2b06      	cmp	r3, #6
100416e0:	d000      	beq.n	100416e4 <COMM_Event_Handler+0x70>
100416e2:	e2cd      	b.n	10041c80 <COMM_Event_Handler+0x60c>
			switch (event.data){
100416e4:	1d3b      	adds	r3, r7, #4
100416e6:	885b      	ldrh	r3, [r3, #2]
100416e8:	2b05      	cmp	r3, #5
100416ea:	d845      	bhi.n	10041778 <COMM_Event_Handler+0x104>
100416ec:	009a      	lsls	r2, r3, #2
100416ee:	4bc5      	ldr	r3, [pc, #788]	@ (10041a04 <COMM_Event_Handler+0x390>)
100416f0:	18d3      	adds	r3, r2, r3
100416f2:	681b      	ldr	r3, [r3, #0]
100416f4:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control");
100416f6:	4bc4      	ldr	r3, [pc, #784]	@ (10041a08 <COMM_Event_Handler+0x394>)
100416f8:	0018      	movs	r0, r3
100416fa:	f000 fb17 	bl	10041d2c <discountprintf>
				next = volumecontrol;
100416fe:	2376      	movs	r3, #118	@ 0x76
10041700:	18fb      	adds	r3, r7, r3
10041702:	2202      	movs	r2, #2
10041704:	701a      	strb	r2, [r3, #0]
				transition = true;
10041706:	2377      	movs	r3, #119	@ 0x77
10041708:	18fb      	adds	r3, r7, r3
1004170a:	2201      	movs	r2, #1
1004170c:	701a      	strb	r2, [r3, #0]
				break;
1004170e:	e034      	b.n	1004177a <COMM_Event_Handler+0x106>
			case FOLDERCONTROL:
				discountprintf("received folder control");
10041710:	4bbe      	ldr	r3, [pc, #760]	@ (10041a0c <COMM_Event_Handler+0x398>)
10041712:	0018      	movs	r0, r3
10041714:	f000 fb0a 	bl	10041d2c <discountprintf>
				next = foldercontrol;
10041718:	2376      	movs	r3, #118	@ 0x76
1004171a:	18fb      	adds	r3, r7, r3
1004171c:	2203      	movs	r2, #3
1004171e:	701a      	strb	r2, [r3, #0]
				transition = true;
10041720:	2377      	movs	r3, #119	@ 0x77
10041722:	18fb      	adds	r3, r7, r3
10041724:	2201      	movs	r2, #1
10041726:	701a      	strb	r2, [r3, #0]
				break;
10041728:	e027      	b.n	1004177a <COMM_Event_Handler+0x106>
			case LOGSREQUEST:
				discountprintf("received logs request");
1004172a:	4bb9      	ldr	r3, [pc, #740]	@ (10041a10 <COMM_Event_Handler+0x39c>)
1004172c:	0018      	movs	r0, r3
1004172e:	f000 fafd 	bl	10041d2c <discountprintf>
				next = logsrequest;
10041732:	2376      	movs	r3, #118	@ 0x76
10041734:	18fb      	adds	r3, r7, r3
10041736:	2205      	movs	r2, #5
10041738:	701a      	strb	r2, [r3, #0]
				transition = true;
1004173a:	2377      	movs	r3, #119	@ 0x77
1004173c:	18fb      	adds	r3, r7, r3
1004173e:	2201      	movs	r2, #1
10041740:	701a      	strb	r2, [r3, #0]
				break;
10041742:	e01a      	b.n	1004177a <COMM_Event_Handler+0x106>
			case DCCONTROL:
				discountprintf("received DC control");
10041744:	4bb3      	ldr	r3, [pc, #716]	@ (10041a14 <COMM_Event_Handler+0x3a0>)
10041746:	0018      	movs	r0, r3
10041748:	f000 faf0 	bl	10041d2c <discountprintf>
				next = dccontrol;
1004174c:	2376      	movs	r3, #118	@ 0x76
1004174e:	18fb      	adds	r3, r7, r3
10041750:	2207      	movs	r2, #7
10041752:	701a      	strb	r2, [r3, #0]
				transition = true;
10041754:	2377      	movs	r3, #119	@ 0x77
10041756:	18fb      	adds	r3, r7, r3
10041758:	2201      	movs	r2, #1
1004175a:	701a      	strb	r2, [r3, #0]
				break;
1004175c:	e00d      	b.n	1004177a <COMM_Event_Handler+0x106>
			case SCHEDULECONTROL:
				discountprintf("received schedule control");
1004175e:	4bae      	ldr	r3, [pc, #696]	@ (10041a18 <COMM_Event_Handler+0x3a4>)
10041760:	0018      	movs	r0, r3
10041762:	f000 fae3 	bl	10041d2c <discountprintf>
				next = schedulecontrol;
10041766:	2376      	movs	r3, #118	@ 0x76
10041768:	18fb      	adds	r3, r7, r3
1004176a:	2208      	movs	r2, #8
1004176c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004176e:	2377      	movs	r3, #119	@ 0x77
10041770:	18fb      	adds	r3, r7, r3
10041772:	2201      	movs	r2, #1
10041774:	701a      	strb	r2, [r3, #0]
				break;
10041776:	e000      	b.n	1004177a <COMM_Event_Handler+0x106>
			default:
				break;
10041778:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
1004177a:	e281      	b.n	10041c80 <COMM_Event_Handler+0x60c>
	case volumecontrol:
		if(event.status == EVENT_USART){
1004177c:	1d3b      	adds	r3, r7, #4
1004177e:	781b      	ldrb	r3, [r3, #0]
10041780:	b25b      	sxtb	r3, r3
10041782:	2b06      	cmp	r3, #6
10041784:	d000      	beq.n	10041788 <COMM_Event_Handler+0x114>
10041786:	e27d      	b.n	10041c84 <COMM_Event_Handler+0x610>
			//FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle());
			discountprintf("Storing volume");
10041788:	4ba4      	ldr	r3, [pc, #656]	@ (10041a1c <COMM_Event_Handler+0x3a8>)
1004178a:	0018      	movs	r0, r3
1004178c:	f000 face 	bl	10041d2c <discountprintf>
			next = idle;
10041790:	2376      	movs	r3, #118	@ 0x76
10041792:	18fb      	adds	r3, r7, r3
10041794:	2201      	movs	r2, #1
10041796:	701a      	strb	r2, [r3, #0]
			transition = true;
10041798:	2377      	movs	r3, #119	@ 0x77
1004179a:	18fb      	adds	r3, r7, r3
1004179c:	2201      	movs	r2, #1
1004179e:	701a      	strb	r2, [r3, #0]
		}
		break;
100417a0:	e270      	b.n	10041c84 <COMM_Event_Handler+0x610>
	case foldercontrol:
		if(event.status == EVENT_USART){
100417a2:	1d3b      	adds	r3, r7, #4
100417a4:	781b      	ldrb	r3, [r3, #0]
100417a6:	b25b      	sxtb	r3, r3
100417a8:	2b06      	cmp	r3, #6
100417aa:	d000      	beq.n	100417ae <COMM_Event_Handler+0x13a>
100417ac:	e26c      	b.n	10041c88 <COMM_Event_Handler+0x614>
			folder = event.data;
100417ae:	1d3b      	adds	r3, r7, #4
100417b0:	885b      	ldrh	r3, [r3, #2]
100417b2:	b2da      	uxtb	r2, r3
100417b4:	4b9a      	ldr	r3, [pc, #616]	@ (10041a20 <COMM_Event_Handler+0x3ac>)
100417b6:	701a      	strb	r2, [r3, #0]
			discountprintf("Sending folder selector\n");
100417b8:	4b9a      	ldr	r3, [pc, #616]	@ (10041a24 <COMM_Event_Handler+0x3b0>)
100417ba:	0018      	movs	r0, r3
100417bc:	f000 fab6 	bl	10041d2c <discountprintf>
			next = folderselected;
100417c0:	2376      	movs	r3, #118	@ 0x76
100417c2:	18fb      	adds	r3, r7, r3
100417c4:	2204      	movs	r2, #4
100417c6:	701a      	strb	r2, [r3, #0]
			transition = true;
100417c8:	2377      	movs	r3, #119	@ 0x77
100417ca:	18fb      	adds	r3, r7, r3
100417cc:	2201      	movs	r2, #1
100417ce:	701a      	strb	r2, [r3, #0]
		}
		break;
100417d0:	e25a      	b.n	10041c88 <COMM_Event_Handler+0x614>
	case folderselected:
		if(event.status == EVENT_USART){
100417d2:	1d3b      	adds	r3, r7, #4
100417d4:	781b      	ldrb	r3, [r3, #0]
100417d6:	b25b      	sxtb	r3, r3
100417d8:	2b06      	cmp	r3, #6
100417da:	d000      	beq.n	100417de <COMM_Event_Handler+0x16a>
100417dc:	e256      	b.n	10041c8c <COMM_Event_Handler+0x618>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
100417de:	2130      	movs	r1, #48	@ 0x30
100417e0:	187b      	adds	r3, r7, r1
100417e2:	220b      	movs	r2, #11
100417e4:	701a      	strb	r2, [r3, #0]
100417e6:	4b8e      	ldr	r3, [pc, #568]	@ (10041a20 <COMM_Event_Handler+0x3ac>)
100417e8:	781b      	ldrb	r3, [r3, #0]
100417ea:	021b      	lsls	r3, r3, #8
100417ec:	b29a      	uxth	r2, r3
100417ee:	1d3b      	adds	r3, r7, #4
100417f0:	885b      	ldrh	r3, [r3, #2]
100417f2:	18d3      	adds	r3, r2, r3
100417f4:	b29a      	uxth	r2, r3
100417f6:	187b      	adds	r3, r7, r1
100417f8:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
100417fa:	187b      	adds	r3, r7, r1
100417fc:	6818      	ldr	r0, [r3, #0]
100417fe:	f001 f967 	bl	10042ad0 <MP3_Event_Post>
			discountprintf("Sending track selector\n");
10041802:	4b89      	ldr	r3, [pc, #548]	@ (10041a28 <COMM_Event_Handler+0x3b4>)
10041804:	0018      	movs	r0, r3
10041806:	f000 fa91 	bl	10041d2c <discountprintf>
			next = idle;
1004180a:	2376      	movs	r3, #118	@ 0x76
1004180c:	18fb      	adds	r3, r7, r3
1004180e:	2201      	movs	r2, #1
10041810:	701a      	strb	r2, [r3, #0]
			transition = true;
10041812:	2377      	movs	r3, #119	@ 0x77
10041814:	18fb      	adds	r3, r7, r3
10041816:	2201      	movs	r2, #1
10041818:	701a      	strb	r2, [r3, #0]
		}
		break;
1004181a:	e237      	b.n	10041c8c <COMM_Event_Handler+0x618>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
1004181c:	1d3b      	adds	r3, r7, #4
1004181e:	781b      	ldrb	r3, [r3, #0]
10041820:	b25b      	sxtb	r3, r3
10041822:	2b02      	cmp	r3, #2
10041824:	d000      	beq.n	10041828 <COMM_Event_Handler+0x1b4>
10041826:	e233      	b.n	10041c90 <COMM_Event_Handler+0x61c>
			sendinglogs = 1;
10041828:	4b75      	ldr	r3, [pc, #468]	@ (10041a00 <COMM_Event_Handler+0x38c>)
1004182a:	2201      	movs	r2, #1
1004182c:	701a      	strb	r2, [r3, #0]
			sent = 0;
1004182e:	4b7f      	ldr	r3, [pc, #508]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
10041830:	2200      	movs	r2, #0
10041832:	601a      	str	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			uint16_t size = 32;
10041834:	2468      	movs	r4, #104	@ 0x68
10041836:	193b      	adds	r3, r7, r4
10041838:	2220      	movs	r2, #32
1004183a:	801a      	strh	r2, [r3, #0]
			USART_WriteTx((uint8_t)(size>>8));
1004183c:	193b      	adds	r3, r7, r4
1004183e:	881b      	ldrh	r3, [r3, #0]
10041840:	0a1b      	lsrs	r3, r3, #8
10041842:	b29b      	uxth	r3, r3
10041844:	b2db      	uxtb	r3, r3
10041846:	0018      	movs	r0, r3
10041848:	f001 ffde 	bl	10043808 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
1004184c:	193b      	adds	r3, r7, r4
1004184e:	881b      	ldrh	r3, [r3, #0]
10041850:	b2db      	uxtb	r3, r3
10041852:	0018      	movs	r0, r3
10041854:	f001 ffd8 	bl	10043808 <USART_WriteTx>
			next = logsdata;
10041858:	2376      	movs	r3, #118	@ 0x76
1004185a:	18fb      	adds	r3, r7, r3
1004185c:	2206      	movs	r2, #6
1004185e:	701a      	strb	r2, [r3, #0]
			transition = true;
10041860:	2377      	movs	r3, #119	@ 0x77
10041862:	18fb      	adds	r3, r7, r3
10041864:	2201      	movs	r2, #1
10041866:	701a      	strb	r2, [r3, #0]
		}
		break;
10041868:	e212      	b.n	10041c90 <COMM_Event_Handler+0x61c>
	case logsdata:
		if(event.status == EVENT_USART_READY){
1004186a:	1d3b      	adds	r3, r7, #4
1004186c:	781b      	ldrb	r3, [r3, #0]
1004186e:	b25b      	sxtb	r3, r3
10041870:	2b07      	cmp	r3, #7
10041872:	d000      	beq.n	10041876 <COMM_Event_Handler+0x202>
10041874:	e20e      	b.n	10041c94 <COMM_Event_Handler+0x620>
			//get logs size
			uint16_t size  = 32;
10041876:	216a      	movs	r1, #106	@ 0x6a
10041878:	187b      	adds	r3, r7, r1
1004187a:	2220      	movs	r2, #32
1004187c:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
1004187e:	187b      	adds	r3, r7, r1
10041880:	881a      	ldrh	r2, [r3, #0]
10041882:	4b6a      	ldr	r3, [pc, #424]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
10041884:	681b      	ldr	r3, [r3, #0]
10041886:	1ad3      	subs	r3, r2, r3
10041888:	2b55      	cmp	r3, #85	@ 0x55
1004188a:	d934      	bls.n	100418f6 <COMM_Event_Handler+0x282>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
1004188c:	2300      	movs	r3, #0
1004188e:	673b      	str	r3, [r7, #112]	@ 0x70
10041890:	e02d      	b.n	100418ee <COMM_Event_Handler+0x27a>
					//scheduleEvent levent = FLASH_ReadLogs(sent);
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10041892:	2024      	movs	r0, #36	@ 0x24
10041894:	183b      	adds	r3, r7, r0
10041896:	4a66      	ldr	r2, [pc, #408]	@ (10041a30 <COMM_Event_Handler+0x3bc>)
10041898:	6811      	ldr	r1, [r2, #0]
1004189a:	6019      	str	r1, [r3, #0]
1004189c:	8892      	ldrh	r2, [r2, #4]
1004189e:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
100418a0:	0004      	movs	r4, r0
100418a2:	193b      	adds	r3, r7, r4
100418a4:	781b      	ldrb	r3, [r3, #0]
100418a6:	0018      	movs	r0, r3
100418a8:	f001 ffae 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.day);
100418ac:	193b      	adds	r3, r7, r4
100418ae:	785b      	ldrb	r3, [r3, #1]
100418b0:	0018      	movs	r0, r3
100418b2:	f001 ffa9 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.start);
100418b6:	193b      	adds	r3, r7, r4
100418b8:	789b      	ldrb	r3, [r3, #2]
100418ba:	0018      	movs	r0, r3
100418bc:	f001 ffa4 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.stop);
100418c0:	193b      	adds	r3, r7, r4
100418c2:	78db      	ldrb	r3, [r3, #3]
100418c4:	0018      	movs	r0, r3
100418c6:	f001 ff9f 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.folder);
100418ca:	193b      	adds	r3, r7, r4
100418cc:	791b      	ldrb	r3, [r3, #4]
100418ce:	0018      	movs	r0, r3
100418d0:	f001 ff9a 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.track);
100418d4:	193b      	adds	r3, r7, r4
100418d6:	795b      	ldrb	r3, [r3, #5]
100418d8:	0018      	movs	r0, r3
100418da:	f001 ff95 	bl	10043808 <USART_WriteTx>
					sent++;
100418de:	4b53      	ldr	r3, [pc, #332]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
100418e0:	681b      	ldr	r3, [r3, #0]
100418e2:	1c5a      	adds	r2, r3, #1
100418e4:	4b51      	ldr	r3, [pc, #324]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
100418e6:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
100418e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100418ea:	3301      	adds	r3, #1
100418ec:	673b      	str	r3, [r7, #112]	@ 0x70
100418ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100418f0:	2b54      	cmp	r3, #84	@ 0x54
100418f2:	ddce      	ble.n	10041892 <COMM_Event_Handler+0x21e>
				next = idle;
				transition = true;
				discountprintf("\ndata sent\n");
			}
		}
		break;
100418f4:	e1ce      	b.n	10041c94 <COMM_Event_Handler+0x620>
				for(int i = 0; i < size - sent; i++){
100418f6:	2300      	movs	r3, #0
100418f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
100418fa:	e02d      	b.n	10041958 <COMM_Event_Handler+0x2e4>
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
100418fc:	201c      	movs	r0, #28
100418fe:	183b      	adds	r3, r7, r0
10041900:	4a4b      	ldr	r2, [pc, #300]	@ (10041a30 <COMM_Event_Handler+0x3bc>)
10041902:	6811      	ldr	r1, [r2, #0]
10041904:	6019      	str	r1, [r3, #0]
10041906:	8892      	ldrh	r2, [r2, #4]
10041908:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
1004190a:	0004      	movs	r4, r0
1004190c:	193b      	adds	r3, r7, r4
1004190e:	781b      	ldrb	r3, [r3, #0]
10041910:	0018      	movs	r0, r3
10041912:	f001 ff79 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.day);
10041916:	193b      	adds	r3, r7, r4
10041918:	785b      	ldrb	r3, [r3, #1]
1004191a:	0018      	movs	r0, r3
1004191c:	f001 ff74 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.start);
10041920:	193b      	adds	r3, r7, r4
10041922:	789b      	ldrb	r3, [r3, #2]
10041924:	0018      	movs	r0, r3
10041926:	f001 ff6f 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.stop);
1004192a:	193b      	adds	r3, r7, r4
1004192c:	78db      	ldrb	r3, [r3, #3]
1004192e:	0018      	movs	r0, r3
10041930:	f001 ff6a 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10041934:	193b      	adds	r3, r7, r4
10041936:	791b      	ldrb	r3, [r3, #4]
10041938:	0018      	movs	r0, r3
1004193a:	f001 ff65 	bl	10043808 <USART_WriteTx>
					USART_WriteTx(levent.track);
1004193e:	193b      	adds	r3, r7, r4
10041940:	795b      	ldrb	r3, [r3, #5]
10041942:	0018      	movs	r0, r3
10041944:	f001 ff60 	bl	10043808 <USART_WriteTx>
					sent++;
10041948:	4b38      	ldr	r3, [pc, #224]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
1004194a:	681b      	ldr	r3, [r3, #0]
1004194c:	1c5a      	adds	r2, r3, #1
1004194e:	4b37      	ldr	r3, [pc, #220]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
10041950:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < size - sent; i++){
10041952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10041954:	3301      	adds	r3, #1
10041956:	66fb      	str	r3, [r7, #108]	@ 0x6c
10041958:	236a      	movs	r3, #106	@ 0x6a
1004195a:	18fb      	adds	r3, r7, r3
1004195c:	881a      	ldrh	r2, [r3, #0]
1004195e:	4b33      	ldr	r3, [pc, #204]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
10041960:	681b      	ldr	r3, [r3, #0]
10041962:	1ad2      	subs	r2, r2, r3
10041964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10041966:	429a      	cmp	r2, r3
10041968:	d8c8      	bhi.n	100418fc <COMM_Event_Handler+0x288>
				USART_WriteTx(LOGSDONE);
1004196a:	2003      	movs	r0, #3
1004196c:	f001 ff4c 	bl	10043808 <USART_WriteTx>
				sent = 0;
10041970:	4b2e      	ldr	r3, [pc, #184]	@ (10041a2c <COMM_Event_Handler+0x3b8>)
10041972:	2200      	movs	r2, #0
10041974:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
10041976:	4b22      	ldr	r3, [pc, #136]	@ (10041a00 <COMM_Event_Handler+0x38c>)
10041978:	2200      	movs	r2, #0
1004197a:	701a      	strb	r2, [r3, #0]
				next = idle;
1004197c:	2376      	movs	r3, #118	@ 0x76
1004197e:	18fb      	adds	r3, r7, r3
10041980:	2201      	movs	r2, #1
10041982:	701a      	strb	r2, [r3, #0]
				transition = true;
10041984:	2377      	movs	r3, #119	@ 0x77
10041986:	18fb      	adds	r3, r7, r3
10041988:	2201      	movs	r2, #1
1004198a:	701a      	strb	r2, [r3, #0]
				discountprintf("\ndata sent\n");
1004198c:	4b29      	ldr	r3, [pc, #164]	@ (10041a34 <COMM_Event_Handler+0x3c0>)
1004198e:	0018      	movs	r0, r3
10041990:	f000 f9cc 	bl	10041d2c <discountprintf>
		break;
10041994:	e17e      	b.n	10041c94 <COMM_Event_Handler+0x620>
	case dccontrol:
		if(event.status == EVENT_USART){
10041996:	1d3b      	adds	r3, r7, #4
10041998:	781b      	ldrb	r3, [r3, #0]
1004199a:	b25b      	sxtb	r3, r3
1004199c:	2b06      	cmp	r3, #6
1004199e:	d000      	beq.n	100419a2 <COMM_Event_Handler+0x32e>
100419a0:	e17a      	b.n	10041c98 <COMM_Event_Handler+0x624>
			//FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data);
			discountprintf("storing duty cycle\n");
100419a2:	4b25      	ldr	r3, [pc, #148]	@ (10041a38 <COMM_Event_Handler+0x3c4>)
100419a4:	0018      	movs	r0, r3
100419a6:	f000 f9c1 	bl	10041d2c <discountprintf>
			//store duty cycle here
			next = idle;
100419aa:	2376      	movs	r3, #118	@ 0x76
100419ac:	18fb      	adds	r3, r7, r3
100419ae:	2201      	movs	r2, #1
100419b0:	701a      	strb	r2, [r3, #0]
			transition = true;
100419b2:	2377      	movs	r3, #119	@ 0x77
100419b4:	18fb      	adds	r3, r7, r3
100419b6:	2201      	movs	r2, #1
100419b8:	701a      	strb	r2, [r3, #0]
		}
		break;
100419ba:	e16d      	b.n	10041c98 <COMM_Event_Handler+0x624>
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
100419bc:	1d3b      	adds	r3, r7, #4
100419be:	781b      	ldrb	r3, [r3, #0]
100419c0:	b25b      	sxtb	r3, r3
100419c2:	2b02      	cmp	r3, #2
100419c4:	d000      	beq.n	100419c8 <COMM_Event_Handler+0x354>
100419c6:	e169      	b.n	10041c9c <COMM_Event_Handler+0x628>
			discountprintf("receiving schedule\n");
100419c8:	4b1c      	ldr	r3, [pc, #112]	@ (10041a3c <COMM_Event_Handler+0x3c8>)
100419ca:	0018      	movs	r0, r3
100419cc:	f000 f9ae 	bl	10041d2c <discountprintf>
			sevent = (scheduleEvent){0,0,0,0,0,0};
100419d0:	4b1b      	ldr	r3, [pc, #108]	@ (10041a40 <COMM_Event_Handler+0x3cc>)
100419d2:	0018      	movs	r0, r3
100419d4:	2306      	movs	r3, #6
100419d6:	001a      	movs	r2, r3
100419d8:	2100      	movs	r1, #0
100419da:	f023 f937 	bl	10064c4c <memset>
			next = schedulemonth;
100419de:	2376      	movs	r3, #118	@ 0x76
100419e0:	18fb      	adds	r3, r7, r3
100419e2:	2209      	movs	r2, #9
100419e4:	701a      	strb	r2, [r3, #0]
			transition = true;
100419e6:	2377      	movs	r3, #119	@ 0x77
100419e8:	18fb      	adds	r3, r7, r3
100419ea:	2201      	movs	r2, #1
100419ec:	701a      	strb	r2, [r3, #0]
			numevents = 0;
100419ee:	4b15      	ldr	r3, [pc, #84]	@ (10041a44 <COMM_Event_Handler+0x3d0>)
100419f0:	2200      	movs	r2, #0
100419f2:	701a      	strb	r2, [r3, #0]
		}
		break;
100419f4:	e152      	b.n	10041c9c <COMM_Event_Handler+0x628>
100419f6:	46c0      	nop			@ (mov r8, r8)
100419f8:	20000298 	.word	0x20000298
100419fc:	10065c50 	.word	0x10065c50
10041a00:	200002a0 	.word	0x200002a0
10041a04:	10065c90 	.word	0x10065c90
10041a08:	10065a84 	.word	0x10065a84
10041a0c:	10065a9c 	.word	0x10065a9c
10041a10:	10065ab4 	.word	0x10065ab4
10041a14:	10065acc 	.word	0x10065acc
10041a18:	10065ae0 	.word	0x10065ae0
10041a1c:	10065afc 	.word	0x10065afc
10041a20:	200002a1 	.word	0x200002a1
10041a24:	10065b0c 	.word	0x10065b0c
10041a28:	10065b28 	.word	0x10065b28
10041a2c:	200002a4 	.word	0x200002a4
10041a30:	10065bf0 	.word	0x10065bf0
10041a34:	10065b40 	.word	0x10065b40
10041a38:	10065b4c 	.word	0x10065b4c
10041a3c:	10065b60 	.word	0x10065b60
10041a40:	200002a8 	.word	0x200002a8
10041a44:	200002ae 	.word	0x200002ae
	case schedulemonth:
		if(event.status == EVENT_USART){
10041a48:	1d3b      	adds	r3, r7, #4
10041a4a:	781b      	ldrb	r3, [r3, #0]
10041a4c:	b25b      	sxtb	r3, r3
10041a4e:	2b06      	cmp	r3, #6
10041a50:	d000      	beq.n	10041a54 <COMM_Event_Handler+0x3e0>
10041a52:	e125      	b.n	10041ca0 <COMM_Event_Handler+0x62c>
			if(event.data == SCHEDULEEND){
10041a54:	1d3b      	adds	r3, r7, #4
10041a56:	885b      	ldrh	r3, [r3, #2]
10041a58:	2b0d      	cmp	r3, #13
10041a5a:	d10c      	bne.n	10041a76 <COMM_Event_Handler+0x402>
				discountprintf("schedule complete\n");
10041a5c:	4ba9      	ldr	r3, [pc, #676]	@ (10041d04 <COMM_Event_Handler+0x690>)
10041a5e:	0018      	movs	r0, r3
10041a60:	f000 f964 	bl	10041d2c <discountprintf>
				next = idle;
10041a64:	2376      	movs	r3, #118	@ 0x76
10041a66:	18fb      	adds	r3, r7, r3
10041a68:	2201      	movs	r2, #1
10041a6a:	701a      	strb	r2, [r3, #0]
				transition = true;
10041a6c:	2377      	movs	r3, #119	@ 0x77
10041a6e:	18fb      	adds	r3, r7, r3
10041a70:	2201      	movs	r2, #1
10041a72:	701a      	strb	r2, [r3, #0]
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
10041a74:	e114      	b.n	10041ca0 <COMM_Event_Handler+0x62c>
			} else if(numevents > MAXSCHEDULEEVENTS){
10041a76:	4ba4      	ldr	r3, [pc, #656]	@ (10041d08 <COMM_Event_Handler+0x694>)
10041a78:	781b      	ldrb	r3, [r3, #0]
10041a7a:	2bb4      	cmp	r3, #180	@ 0xb4
10041a7c:	d90f      	bls.n	10041a9e <COMM_Event_Handler+0x42a>
				discountprintf("schedule forced to complete\n");
10041a7e:	4ba3      	ldr	r3, [pc, #652]	@ (10041d0c <COMM_Event_Handler+0x698>)
10041a80:	0018      	movs	r0, r3
10041a82:	f000 f953 	bl	10041d2c <discountprintf>
				next = scheduleend;
10041a86:	2376      	movs	r3, #118	@ 0x76
10041a88:	18fb      	adds	r3, r7, r3
10041a8a:	220f      	movs	r2, #15
10041a8c:	701a      	strb	r2, [r3, #0]
				transition = true;
10041a8e:	2377      	movs	r3, #119	@ 0x77
10041a90:	18fb      	adds	r3, r7, r3
10041a92:	2201      	movs	r2, #1
10041a94:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
10041a96:	200d      	movs	r0, #13
10041a98:	f001 feb6 	bl	10043808 <USART_WriteTx>
		break;
10041a9c:	e100      	b.n	10041ca0 <COMM_Event_Handler+0x62c>
				sevent.month = event.data;
10041a9e:	1d3b      	adds	r3, r7, #4
10041aa0:	885b      	ldrh	r3, [r3, #2]
10041aa2:	b2da      	uxtb	r2, r3
10041aa4:	4b9a      	ldr	r3, [pc, #616]	@ (10041d10 <COMM_Event_Handler+0x69c>)
10041aa6:	701a      	strb	r2, [r3, #0]
				sprintf(text, "Month: %d\n", event.data);
10041aa8:	1d3b      	adds	r3, r7, #4
10041aaa:	885b      	ldrh	r3, [r3, #2]
10041aac:	001a      	movs	r2, r3
10041aae:	4999      	ldr	r1, [pc, #612]	@ (10041d14 <COMM_Event_Handler+0x6a0>)
10041ab0:	2434      	movs	r4, #52	@ 0x34
10041ab2:	193b      	adds	r3, r7, r4
10041ab4:	0018      	movs	r0, r3
10041ab6:	f022 ffad 	bl	10064a14 <siprintf>
				discountprintf(text);
10041aba:	193b      	adds	r3, r7, r4
10041abc:	0018      	movs	r0, r3
10041abe:	f000 f935 	bl	10041d2c <discountprintf>
				next = scheduleday;
10041ac2:	2376      	movs	r3, #118	@ 0x76
10041ac4:	18fb      	adds	r3, r7, r3
10041ac6:	220a      	movs	r2, #10
10041ac8:	701a      	strb	r2, [r3, #0]
				transition = true;
10041aca:	2377      	movs	r3, #119	@ 0x77
10041acc:	18fb      	adds	r3, r7, r3
10041ace:	2201      	movs	r2, #1
10041ad0:	701a      	strb	r2, [r3, #0]
		break;
10041ad2:	e0e5      	b.n	10041ca0 <COMM_Event_Handler+0x62c>
	case scheduleday:
		if(event.status == EVENT_USART){
10041ad4:	1d3b      	adds	r3, r7, #4
10041ad6:	781b      	ldrb	r3, [r3, #0]
10041ad8:	b25b      	sxtb	r3, r3
10041ada:	2b06      	cmp	r3, #6
10041adc:	d000      	beq.n	10041ae0 <COMM_Event_Handler+0x46c>
10041ade:	e0e1      	b.n	10041ca4 <COMM_Event_Handler+0x630>
			sevent.day = event.data;
10041ae0:	1d3b      	adds	r3, r7, #4
10041ae2:	885b      	ldrh	r3, [r3, #2]
10041ae4:	b2da      	uxtb	r2, r3
10041ae6:	4b8a      	ldr	r3, [pc, #552]	@ (10041d10 <COMM_Event_Handler+0x69c>)
10041ae8:	705a      	strb	r2, [r3, #1]
			sprintf(text, "Day: %d\n", event.data);
10041aea:	1d3b      	adds	r3, r7, #4
10041aec:	885b      	ldrh	r3, [r3, #2]
10041aee:	001a      	movs	r2, r3
10041af0:	4989      	ldr	r1, [pc, #548]	@ (10041d18 <COMM_Event_Handler+0x6a4>)
10041af2:	2434      	movs	r4, #52	@ 0x34
10041af4:	193b      	adds	r3, r7, r4
10041af6:	0018      	movs	r0, r3
10041af8:	f022 ff8c 	bl	10064a14 <siprintf>
			discountprintf(text);
10041afc:	193b      	adds	r3, r7, r4
10041afe:	0018      	movs	r0, r3
10041b00:	f000 f914 	bl	10041d2c <discountprintf>
			//record day here
			next = schedulestart;
10041b04:	2376      	movs	r3, #118	@ 0x76
10041b06:	18fb      	adds	r3, r7, r3
10041b08:	220b      	movs	r2, #11
10041b0a:	701a      	strb	r2, [r3, #0]
			transition = true;
10041b0c:	2377      	movs	r3, #119	@ 0x77
10041b0e:	18fb      	adds	r3, r7, r3
10041b10:	2201      	movs	r2, #1
10041b12:	701a      	strb	r2, [r3, #0]
		}
		break;
10041b14:	e0c6      	b.n	10041ca4 <COMM_Event_Handler+0x630>
	case schedulestart:
		if(event.status == EVENT_USART){
10041b16:	1d3b      	adds	r3, r7, #4
10041b18:	781b      	ldrb	r3, [r3, #0]
10041b1a:	b25b      	sxtb	r3, r3
10041b1c:	2b06      	cmp	r3, #6
10041b1e:	d000      	beq.n	10041b22 <COMM_Event_Handler+0x4ae>
10041b20:	e0c2      	b.n	10041ca8 <COMM_Event_Handler+0x634>
			sevent.start =  event.data;
10041b22:	1d3b      	adds	r3, r7, #4
10041b24:	885b      	ldrh	r3, [r3, #2]
10041b26:	b2da      	uxtb	r2, r3
10041b28:	4b79      	ldr	r3, [pc, #484]	@ (10041d10 <COMM_Event_Handler+0x69c>)
10041b2a:	709a      	strb	r2, [r3, #2]
			sprintf(text, "start time: %d:%d\n", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10041b2c:	1d3b      	adds	r3, r7, #4
10041b2e:	885b      	ldrh	r3, [r3, #2]
10041b30:	10db      	asrs	r3, r3, #3
10041b32:	221f      	movs	r2, #31
10041b34:	4013      	ands	r3, r2
10041b36:	001c      	movs	r4, r3
10041b38:	1d3b      	adds	r3, r7, #4
10041b3a:	885b      	ldrh	r3, [r3, #2]
10041b3c:	001a      	movs	r2, r3
10041b3e:	2303      	movs	r3, #3
10041b40:	401a      	ands	r2, r3
10041b42:	0013      	movs	r3, r2
10041b44:	011b      	lsls	r3, r3, #4
10041b46:	1a9b      	subs	r3, r3, r2
10041b48:	4974      	ldr	r1, [pc, #464]	@ (10041d1c <COMM_Event_Handler+0x6a8>)
10041b4a:	2534      	movs	r5, #52	@ 0x34
10041b4c:	1978      	adds	r0, r7, r5
10041b4e:	0022      	movs	r2, r4
10041b50:	f022 ff60 	bl	10064a14 <siprintf>
			discountprintf(text);
10041b54:	197b      	adds	r3, r7, r5
10041b56:	0018      	movs	r0, r3
10041b58:	f000 f8e8 	bl	10041d2c <discountprintf>
			//record start time here
			next = schedulestop;
10041b5c:	2376      	movs	r3, #118	@ 0x76
10041b5e:	18fb      	adds	r3, r7, r3
10041b60:	220c      	movs	r2, #12
10041b62:	701a      	strb	r2, [r3, #0]
			transition = true;
10041b64:	2377      	movs	r3, #119	@ 0x77
10041b66:	18fb      	adds	r3, r7, r3
10041b68:	2201      	movs	r2, #1
10041b6a:	701a      	strb	r2, [r3, #0]
		}
		break;
10041b6c:	e09c      	b.n	10041ca8 <COMM_Event_Handler+0x634>
	case schedulestop:
		if(event.status == EVENT_USART){
10041b6e:	1d3b      	adds	r3, r7, #4
10041b70:	781b      	ldrb	r3, [r3, #0]
10041b72:	b25b      	sxtb	r3, r3
10041b74:	2b06      	cmp	r3, #6
10041b76:	d000      	beq.n	10041b7a <COMM_Event_Handler+0x506>
10041b78:	e098      	b.n	10041cac <COMM_Event_Handler+0x638>
			sevent.stop = event.data;
10041b7a:	1d3b      	adds	r3, r7, #4
10041b7c:	885b      	ldrh	r3, [r3, #2]
10041b7e:	b2da      	uxtb	r2, r3
10041b80:	4b63      	ldr	r3, [pc, #396]	@ (10041d10 <COMM_Event_Handler+0x69c>)
10041b82:	70da      	strb	r2, [r3, #3]
			sprintf(text, "start time: %d:%d\n", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10041b84:	1d3b      	adds	r3, r7, #4
10041b86:	885b      	ldrh	r3, [r3, #2]
10041b88:	10db      	asrs	r3, r3, #3
10041b8a:	221f      	movs	r2, #31
10041b8c:	4013      	ands	r3, r2
10041b8e:	001c      	movs	r4, r3
10041b90:	1d3b      	adds	r3, r7, #4
10041b92:	885b      	ldrh	r3, [r3, #2]
10041b94:	001a      	movs	r2, r3
10041b96:	2303      	movs	r3, #3
10041b98:	401a      	ands	r2, r3
10041b9a:	0013      	movs	r3, r2
10041b9c:	011b      	lsls	r3, r3, #4
10041b9e:	1a9b      	subs	r3, r3, r2
10041ba0:	495e      	ldr	r1, [pc, #376]	@ (10041d1c <COMM_Event_Handler+0x6a8>)
10041ba2:	2534      	movs	r5, #52	@ 0x34
10041ba4:	1978      	adds	r0, r7, r5
10041ba6:	0022      	movs	r2, r4
10041ba8:	f022 ff34 	bl	10064a14 <siprintf>
			discountprintf(text);
10041bac:	197b      	adds	r3, r7, r5
10041bae:	0018      	movs	r0, r3
10041bb0:	f000 f8bc 	bl	10041d2c <discountprintf>
			//record end time here
			next = schedulefolder;
10041bb4:	2376      	movs	r3, #118	@ 0x76
10041bb6:	18fb      	adds	r3, r7, r3
10041bb8:	220d      	movs	r2, #13
10041bba:	701a      	strb	r2, [r3, #0]
			transition = true;
10041bbc:	2377      	movs	r3, #119	@ 0x77
10041bbe:	18fb      	adds	r3, r7, r3
10041bc0:	2201      	movs	r2, #1
10041bc2:	701a      	strb	r2, [r3, #0]
		}
		break;
10041bc4:	e072      	b.n	10041cac <COMM_Event_Handler+0x638>
	case schedulefolder:
		if(event.status == EVENT_USART){
10041bc6:	1d3b      	adds	r3, r7, #4
10041bc8:	781b      	ldrb	r3, [r3, #0]
10041bca:	b25b      	sxtb	r3, r3
10041bcc:	2b06      	cmp	r3, #6
10041bce:	d000      	beq.n	10041bd2 <COMM_Event_Handler+0x55e>
10041bd0:	e06e      	b.n	10041cb0 <COMM_Event_Handler+0x63c>
			sevent.folder = event.data;
10041bd2:	1d3b      	adds	r3, r7, #4
10041bd4:	885b      	ldrh	r3, [r3, #2]
10041bd6:	b2da      	uxtb	r2, r3
10041bd8:	4b4d      	ldr	r3, [pc, #308]	@ (10041d10 <COMM_Event_Handler+0x69c>)
10041bda:	711a      	strb	r2, [r3, #4]
			sprintf(text, "folder#: %d\n", event.data);
10041bdc:	1d3b      	adds	r3, r7, #4
10041bde:	885b      	ldrh	r3, [r3, #2]
10041be0:	001a      	movs	r2, r3
10041be2:	494f      	ldr	r1, [pc, #316]	@ (10041d20 <COMM_Event_Handler+0x6ac>)
10041be4:	2434      	movs	r4, #52	@ 0x34
10041be6:	193b      	adds	r3, r7, r4
10041be8:	0018      	movs	r0, r3
10041bea:	f022 ff13 	bl	10064a14 <siprintf>
			discountprintf(text);
10041bee:	193b      	adds	r3, r7, r4
10041bf0:	0018      	movs	r0, r3
10041bf2:	f000 f89b 	bl	10041d2c <discountprintf>
			//record end time here
			next = scheduletrack;
10041bf6:	2376      	movs	r3, #118	@ 0x76
10041bf8:	18fb      	adds	r3, r7, r3
10041bfa:	220e      	movs	r2, #14
10041bfc:	701a      	strb	r2, [r3, #0]
			transition = true;
10041bfe:	2377      	movs	r3, #119	@ 0x77
10041c00:	18fb      	adds	r3, r7, r3
10041c02:	2201      	movs	r2, #1
10041c04:	701a      	strb	r2, [r3, #0]
		}
		break;
10041c06:	e053      	b.n	10041cb0 <COMM_Event_Handler+0x63c>
	case scheduletrack:
		if(event.status == EVENT_USART){
10041c08:	1d3b      	adds	r3, r7, #4
10041c0a:	781b      	ldrb	r3, [r3, #0]
10041c0c:	b25b      	sxtb	r3, r3
10041c0e:	2b06      	cmp	r3, #6
10041c10:	d150      	bne.n	10041cb4 <COMM_Event_Handler+0x640>
			sevent.track = event.data;
10041c12:	1d3b      	adds	r3, r7, #4
10041c14:	885b      	ldrh	r3, [r3, #2]
10041c16:	b2da      	uxtb	r2, r3
10041c18:	4b3d      	ldr	r3, [pc, #244]	@ (10041d10 <COMM_Event_Handler+0x69c>)
10041c1a:	715a      	strb	r2, [r3, #5]
			sprintf(text, "track#: %d\n", event.data);
10041c1c:	1d3b      	adds	r3, r7, #4
10041c1e:	885b      	ldrh	r3, [r3, #2]
10041c20:	001a      	movs	r2, r3
10041c22:	4940      	ldr	r1, [pc, #256]	@ (10041d24 <COMM_Event_Handler+0x6b0>)
10041c24:	2434      	movs	r4, #52	@ 0x34
10041c26:	193b      	adds	r3, r7, r4
10041c28:	0018      	movs	r0, r3
10041c2a:	f022 fef3 	bl	10064a14 <siprintf>
			discountprintf(text);
10041c2e:	193b      	adds	r3, r7, r4
10041c30:	0018      	movs	r0, r3
10041c32:	f000 f87b 	bl	10041d2c <discountprintf>
			//record end time here
			next = schedulemonth;
10041c36:	2376      	movs	r3, #118	@ 0x76
10041c38:	18fb      	adds	r3, r7, r3
10041c3a:	2209      	movs	r2, #9
10041c3c:	701a      	strb	r2, [r3, #0]
			transition = true;
10041c3e:	2377      	movs	r3, #119	@ 0x77
10041c40:	18fb      	adds	r3, r7, r3
10041c42:	2201      	movs	r2, #1
10041c44:	701a      	strb	r2, [r3, #0]
			numevents++;
10041c46:	4b30      	ldr	r3, [pc, #192]	@ (10041d08 <COMM_Event_Handler+0x694>)
10041c48:	781b      	ldrb	r3, [r3, #0]
10041c4a:	3301      	adds	r3, #1
10041c4c:	b2da      	uxtb	r2, r3
10041c4e:	4b2e      	ldr	r3, [pc, #184]	@ (10041d08 <COMM_Event_Handler+0x694>)
10041c50:	701a      	strb	r2, [r3, #0]
		}
		break;
10041c52:	e02f      	b.n	10041cb4 <COMM_Event_Handler+0x640>
	case scheduleend:
		if(event.status == EVENT_USART){
10041c54:	1d3b      	adds	r3, r7, #4
10041c56:	781b      	ldrb	r3, [r3, #0]
10041c58:	b25b      	sxtb	r3, r3
10041c5a:	2b06      	cmp	r3, #6
10041c5c:	d12c      	bne.n	10041cb8 <COMM_Event_Handler+0x644>
			if(event.data == SCHEDULEEND){
10041c5e:	1d3b      	adds	r3, r7, #4
10041c60:	885b      	ldrh	r3, [r3, #2]
10041c62:	2b0d      	cmp	r3, #13
10041c64:	d128      	bne.n	10041cb8 <COMM_Event_Handler+0x644>
				next = idle;
10041c66:	2376      	movs	r3, #118	@ 0x76
10041c68:	18fb      	adds	r3, r7, r3
10041c6a:	2201      	movs	r2, #1
10041c6c:	701a      	strb	r2, [r3, #0]
				transition = true;
10041c6e:	2377      	movs	r3, #119	@ 0x77
10041c70:	18fb      	adds	r3, r7, r3
10041c72:	2201      	movs	r2, #1
10041c74:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10041c76:	e01f      	b.n	10041cb8 <COMM_Event_Handler+0x644>
	default:
		break;
10041c78:	46c0      	nop			@ (mov r8, r8)
10041c7a:	e01e      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c7c:	46c0      	nop			@ (mov r8, r8)
10041c7e:	e01c      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c80:	46c0      	nop			@ (mov r8, r8)
10041c82:	e01a      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c84:	46c0      	nop			@ (mov r8, r8)
10041c86:	e018      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c88:	46c0      	nop			@ (mov r8, r8)
10041c8a:	e016      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c8c:	46c0      	nop			@ (mov r8, r8)
10041c8e:	e014      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c90:	46c0      	nop			@ (mov r8, r8)
10041c92:	e012      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c94:	46c0      	nop			@ (mov r8, r8)
10041c96:	e010      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c98:	46c0      	nop			@ (mov r8, r8)
10041c9a:	e00e      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041c9c:	46c0      	nop			@ (mov r8, r8)
10041c9e:	e00c      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041ca0:	46c0      	nop			@ (mov r8, r8)
10041ca2:	e00a      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041ca4:	46c0      	nop			@ (mov r8, r8)
10041ca6:	e008      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041ca8:	46c0      	nop			@ (mov r8, r8)
10041caa:	e006      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041cac:	46c0      	nop			@ (mov r8, r8)
10041cae:	e004      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041cb0:	46c0      	nop			@ (mov r8, r8)
10041cb2:	e002      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041cb4:	46c0      	nop			@ (mov r8, r8)
10041cb6:	e000      	b.n	10041cba <COMM_Event_Handler+0x646>
		break;
10041cb8:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
10041cba:	2377      	movs	r3, #119	@ 0x77
10041cbc:	18fb      	adds	r3, r7, r3
10041cbe:	781b      	ldrb	r3, [r3, #0]
10041cc0:	2b00      	cmp	r3, #0
10041cc2:	d01a      	beq.n	10041cfa <COMM_Event_Handler+0x686>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
10041cc4:	2110      	movs	r1, #16
10041cc6:	187b      	adds	r3, r7, r1
10041cc8:	2200      	movs	r2, #0
10041cca:	601a      	str	r2, [r3, #0]
10041ccc:	187b      	adds	r3, r7, r1
10041cce:	2203      	movs	r2, #3
10041cd0:	701a      	strb	r2, [r3, #0]
10041cd2:	187b      	adds	r3, r7, r1
10041cd4:	6818      	ldr	r0, [r3, #0]
10041cd6:	f7ff fccd 	bl	10041674 <COMM_Event_Handler>
		commSM = next;
10041cda:	4b13      	ldr	r3, [pc, #76]	@ (10041d28 <COMM_Event_Handler+0x6b4>)
10041cdc:	2276      	movs	r2, #118	@ 0x76
10041cde:	18ba      	adds	r2, r7, r2
10041ce0:	7812      	ldrb	r2, [r2, #0]
10041ce2:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
10041ce4:	210c      	movs	r1, #12
10041ce6:	187b      	adds	r3, r7, r1
10041ce8:	2200      	movs	r2, #0
10041cea:	601a      	str	r2, [r3, #0]
10041cec:	187b      	adds	r3, r7, r1
10041cee:	2202      	movs	r2, #2
10041cf0:	701a      	strb	r2, [r3, #0]
10041cf2:	187b      	adds	r3, r7, r1
10041cf4:	6818      	ldr	r0, [r3, #0]
10041cf6:	f7ff fcbd 	bl	10041674 <COMM_Event_Handler>
	}
	return 1;
10041cfa:	2301      	movs	r3, #1
}
10041cfc:	0018      	movs	r0, r3
10041cfe:	46bd      	mov	sp, r7
10041d00:	b01e      	add	sp, #120	@ 0x78
10041d02:	bdb0      	pop	{r4, r5, r7, pc}
10041d04:	10065b74 	.word	0x10065b74
10041d08:	200002ae 	.word	0x200002ae
10041d0c:	10065b88 	.word	0x10065b88
10041d10:	200002a8 	.word	0x200002a8
10041d14:	10065ba8 	.word	0x10065ba8
10041d18:	10065bb4 	.word	0x10065bb4
10041d1c:	10065bc0 	.word	0x10065bc0
10041d20:	10065bd4 	.word	0x10065bd4
10041d24:	10065be4 	.word	0x10065be4
10041d28:	20000298 	.word	0x20000298

10041d2c <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
10041d2c:	b580      	push	{r7, lr}
10041d2e:	b084      	sub	sp, #16
10041d30:	af00      	add	r7, sp, #0
10041d32:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
10041d34:	687b      	ldr	r3, [r7, #4]
10041d36:	0018      	movs	r0, r3
10041d38:	f7fe fa70 	bl	1004021c <strlen>
10041d3c:	0003      	movs	r3, r0
10041d3e:	60bb      	str	r3, [r7, #8]
	//USART_WriteTx(DEBUGPRINT);
	for(int i = 0; i < length; i++){
10041d40:	2300      	movs	r3, #0
10041d42:	60fb      	str	r3, [r7, #12]
10041d44:	e009      	b.n	10041d5a <discountprintf+0x2e>
		USART_WriteTx(text[i]);
10041d46:	68fb      	ldr	r3, [r7, #12]
10041d48:	687a      	ldr	r2, [r7, #4]
10041d4a:	18d3      	adds	r3, r2, r3
10041d4c:	781b      	ldrb	r3, [r3, #0]
10041d4e:	0018      	movs	r0, r3
10041d50:	f001 fd5a 	bl	10043808 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10041d54:	68fb      	ldr	r3, [r7, #12]
10041d56:	3301      	adds	r3, #1
10041d58:	60fb      	str	r3, [r7, #12]
10041d5a:	68fa      	ldr	r2, [r7, #12]
10041d5c:	68bb      	ldr	r3, [r7, #8]
10041d5e:	429a      	cmp	r2, r3
10041d60:	dbf1      	blt.n	10041d46 <discountprintf+0x1a>
	}
	//USART_WriteTx(DEBUGPRINTEND);
	return 1;
10041d62:	2301      	movs	r3, #1
}
10041d64:	0018      	movs	r0, r3
10041d66:	46bd      	mov	sp, r7
10041d68:	b004      	add	sp, #16
10041d6a:	bd80      	pop	{r7, pc}

10041d6c <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
10041d6c:	b580      	push	{r7, lr}
10041d6e:	b082      	sub	sp, #8
10041d70:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
10041d72:	200c      	movs	r0, #12
10041d74:	f022 fc64 	bl	10064640 <malloc>
10041d78:	0003      	movs	r3, r0
10041d7a:	607b      	str	r3, [r7, #4]
	if(new == NULL){
10041d7c:	687b      	ldr	r3, [r7, #4]
10041d7e:	2b00      	cmp	r3, #0
10041d80:	d101      	bne.n	10041d86 <FIFO_Create+0x1a>
		return NULL;
10041d82:	2300      	movs	r3, #0
10041d84:	e009      	b.n	10041d9a <FIFO_Create+0x2e>
	}
	new->first = NULL;
10041d86:	687b      	ldr	r3, [r7, #4]
10041d88:	2200      	movs	r2, #0
10041d8a:	601a      	str	r2, [r3, #0]
	new->last = NULL;
10041d8c:	687b      	ldr	r3, [r7, #4]
10041d8e:	2200      	movs	r2, #0
10041d90:	605a      	str	r2, [r3, #4]
	new->size = 0;
10041d92:	687b      	ldr	r3, [r7, #4]
10041d94:	2200      	movs	r2, #0
10041d96:	811a      	strh	r2, [r3, #8]
	return new;
10041d98:	687b      	ldr	r3, [r7, #4]
}
10041d9a:	0018      	movs	r0, r3
10041d9c:	46bd      	mov	sp, r7
10041d9e:	b002      	add	sp, #8
10041da0:	bd80      	pop	{r7, pc}

10041da2 <FIFO_Enqueue>:
	}
	free(doomed);
	return 1;
}

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
10041da2:	b580      	push	{r7, lr}
10041da4:	b084      	sub	sp, #16
10041da6:	af00      	add	r7, sp, #0
10041da8:	6078      	str	r0, [r7, #4]
10041daa:	003b      	movs	r3, r7
10041dac:	6019      	str	r1, [r3, #0]
	if(list == NULL){
10041dae:	687b      	ldr	r3, [r7, #4]
10041db0:	2b00      	cmp	r3, #0
10041db2:	d101      	bne.n	10041db8 <FIFO_Enqueue+0x16>
		return 0;
10041db4:	2300      	movs	r3, #0
10041db6:	e026      	b.n	10041e06 <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
10041db8:	2008      	movs	r0, #8
10041dba:	f022 fc41 	bl	10064640 <malloc>
10041dbe:	0003      	movs	r3, r0
10041dc0:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
10041dc2:	68fb      	ldr	r3, [r7, #12]
10041dc4:	2b00      	cmp	r3, #0
10041dc6:	d101      	bne.n	10041dcc <FIFO_Enqueue+0x2a>
		return 0;
10041dc8:	2300      	movs	r3, #0
10041dca:	e01c      	b.n	10041e06 <FIFO_Enqueue+0x64>
	}
	new->event = event;
10041dcc:	68fb      	ldr	r3, [r7, #12]
10041dce:	003a      	movs	r2, r7
10041dd0:	6812      	ldr	r2, [r2, #0]
10041dd2:	601a      	str	r2, [r3, #0]
	new->next = NULL;
10041dd4:	68fb      	ldr	r3, [r7, #12]
10041dd6:	2200      	movs	r2, #0
10041dd8:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
10041dda:	687b      	ldr	r3, [r7, #4]
10041ddc:	685b      	ldr	r3, [r3, #4]
10041dde:	2b00      	cmp	r3, #0
10041de0:	d004      	beq.n	10041dec <FIFO_Enqueue+0x4a>
		list->last->next = new;
10041de2:	687b      	ldr	r3, [r7, #4]
10041de4:	685b      	ldr	r3, [r3, #4]
10041de6:	68fa      	ldr	r2, [r7, #12]
10041de8:	605a      	str	r2, [r3, #4]
10041dea:	e002      	b.n	10041df2 <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
10041dec:	687b      	ldr	r3, [r7, #4]
10041dee:	68fa      	ldr	r2, [r7, #12]
10041df0:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
10041df2:	687b      	ldr	r3, [r7, #4]
10041df4:	68fa      	ldr	r2, [r7, #12]
10041df6:	605a      	str	r2, [r3, #4]
	list->size++;
10041df8:	687b      	ldr	r3, [r7, #4]
10041dfa:	891b      	ldrh	r3, [r3, #8]
10041dfc:	3301      	adds	r3, #1
10041dfe:	b29a      	uxth	r2, r3
10041e00:	687b      	ldr	r3, [r7, #4]
10041e02:	811a      	strh	r2, [r3, #8]
	return 1;
10041e04:	2301      	movs	r3, #1
}
10041e06:	0018      	movs	r0, r3
10041e08:	46bd      	mov	sp, r7
10041e0a:	b004      	add	sp, #16
10041e0c:	bd80      	pop	{r7, pc}

10041e0e <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
10041e0e:	b590      	push	{r4, r7, lr}
10041e10:	b089      	sub	sp, #36	@ 0x24
10041e12:	af00      	add	r7, sp, #0
10041e14:	6078      	str	r0, [r7, #4]
	if(list == NULL){
10041e16:	687b      	ldr	r3, [r7, #4]
10041e18:	2b00      	cmp	r3, #0
10041e1a:	d107      	bne.n	10041e2c <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
10041e1c:	2118      	movs	r1, #24
10041e1e:	187b      	adds	r3, r7, r1
10041e20:	22ff      	movs	r2, #255	@ 0xff
10041e22:	701a      	strb	r2, [r3, #0]
10041e24:	187b      	adds	r3, r7, r1
10041e26:	2200      	movs	r2, #0
10041e28:	805a      	strh	r2, [r3, #2]
10041e2a:	e030      	b.n	10041e8e <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
10041e2c:	687b      	ldr	r3, [r7, #4]
10041e2e:	681b      	ldr	r3, [r3, #0]
10041e30:	2b00      	cmp	r3, #0
10041e32:	d10a      	bne.n	10041e4a <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
10041e34:	687b      	ldr	r3, [r7, #4]
10041e36:	2200      	movs	r2, #0
10041e38:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
10041e3a:	2118      	movs	r1, #24
10041e3c:	187b      	adds	r3, r7, r1
10041e3e:	2200      	movs	r2, #0
10041e40:	701a      	strb	r2, [r3, #0]
10041e42:	187b      	adds	r3, r7, r1
10041e44:	2200      	movs	r2, #0
10041e46:	805a      	strh	r2, [r3, #2]
10041e48:	e021      	b.n	10041e8e <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
10041e4a:	687b      	ldr	r3, [r7, #4]
10041e4c:	681b      	ldr	r3, [r3, #0]
10041e4e:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10041e50:	69fb      	ldr	r3, [r7, #28]
10041e52:	685a      	ldr	r2, [r3, #4]
10041e54:	687b      	ldr	r3, [r7, #4]
10041e56:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
10041e58:	687b      	ldr	r3, [r7, #4]
10041e5a:	681b      	ldr	r3, [r3, #0]
10041e5c:	2b00      	cmp	r3, #0
10041e5e:	d102      	bne.n	10041e66 <FIFO_Dequeue+0x58>
		list->last = NULL;
10041e60:	687b      	ldr	r3, [r7, #4]
10041e62:	2200      	movs	r2, #0
10041e64:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
10041e66:	2414      	movs	r4, #20
10041e68:	193b      	adds	r3, r7, r4
10041e6a:	69fa      	ldr	r2, [r7, #28]
10041e6c:	6812      	ldr	r2, [r2, #0]
10041e6e:	601a      	str	r2, [r3, #0]
	free(doomed);
10041e70:	69fb      	ldr	r3, [r7, #28]
10041e72:	0018      	movs	r0, r3
10041e74:	f022 fbee 	bl	10064654 <free>
	list->size--;
10041e78:	687b      	ldr	r3, [r7, #4]
10041e7a:	891b      	ldrh	r3, [r3, #8]
10041e7c:	3b01      	subs	r3, #1
10041e7e:	b29a      	uxth	r2, r3
10041e80:	687b      	ldr	r3, [r7, #4]
10041e82:	811a      	strh	r2, [r3, #8]
	return out;
10041e84:	2318      	movs	r3, #24
10041e86:	18fb      	adds	r3, r7, r3
10041e88:	193a      	adds	r2, r7, r4
10041e8a:	6812      	ldr	r2, [r2, #0]
10041e8c:	601a      	str	r2, [r3, #0]

}
10041e8e:	2318      	movs	r3, #24
10041e90:	18fa      	adds	r2, r7, r3
10041e92:	2300      	movs	r3, #0
10041e94:	8811      	ldrh	r1, [r2, #0]
10041e96:	0409      	lsls	r1, r1, #16
10041e98:	0c09      	lsrs	r1, r1, #16
10041e9a:	0c1b      	lsrs	r3, r3, #16
10041e9c:	041b      	lsls	r3, r3, #16
10041e9e:	430b      	orrs	r3, r1
10041ea0:	8852      	ldrh	r2, [r2, #2]
10041ea2:	0412      	lsls	r2, r2, #16
10041ea4:	041b      	lsls	r3, r3, #16
10041ea6:	0c1b      	lsrs	r3, r3, #16
10041ea8:	4313      	orrs	r3, r2
10041eaa:	0018      	movs	r0, r3
10041eac:	46bd      	mov	sp, r7
10041eae:	b009      	add	sp, #36	@ 0x24
10041eb0:	bd90      	pop	{r4, r7, pc}

10041eb2 <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
10041eb2:	b580      	push	{r7, lr}
10041eb4:	b082      	sub	sp, #8
10041eb6:	af00      	add	r7, sp, #0
10041eb8:	6078      	str	r0, [r7, #4]
	return list->size;
10041eba:	687b      	ldr	r3, [r7, #4]
10041ebc:	891b      	ldrh	r3, [r3, #8]
10041ebe:	1e5a      	subs	r2, r3, #1
10041ec0:	4193      	sbcs	r3, r2
10041ec2:	b2db      	uxtb	r3, r3
}
10041ec4:	0018      	movs	r0, r3
10041ec6:	46bd      	mov	sp, r7
10041ec8:	b002      	add	sp, #8
10041eca:	bd80      	pop	{r7, pc}

10041ecc <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
10041ecc:	b580      	push	{r7, lr}
10041ece:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041ed0:	4b05      	ldr	r3, [pc, #20]	@ (10041ee8 <FLASH_GetVolume+0x1c>)
10041ed2:	781b      	ldrb	r3, [r3, #0]
10041ed4:	2b00      	cmp	r3, #0
10041ed6:	d101      	bne.n	10041edc <FLASH_GetVolume+0x10>
10041ed8:	2300      	movs	r3, #0
10041eda:	e001      	b.n	10041ee0 <FLASH_GetVolume+0x14>
	return (uint8_t)(*((uint8_t*)VOLUMEADDRESS));
10041edc:	4b03      	ldr	r3, [pc, #12]	@ (10041eec <FLASH_GetVolume+0x20>)
10041ede:	781b      	ldrb	r3, [r3, #0]
}
10041ee0:	0018      	movs	r0, r3
10041ee2:	46bd      	mov	sp, r7
10041ee4:	bd80      	pop	{r7, pc}
10041ee6:	46c0      	nop			@ (mov r8, r8)
10041ee8:	200002b4 	.word	0x200002b4
10041eec:	1006f800 	.word	0x1006f800

10041ef0 <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
10041ef0:	b580      	push	{r7, lr}
10041ef2:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041ef4:	4b05      	ldr	r3, [pc, #20]	@ (10041f0c <FLASH_GetDutyCycle+0x1c>)
10041ef6:	781b      	ldrb	r3, [r3, #0]
10041ef8:	2b00      	cmp	r3, #0
10041efa:	d101      	bne.n	10041f00 <FLASH_GetDutyCycle+0x10>
10041efc:	2300      	movs	r3, #0
10041efe:	e001      	b.n	10041f04 <FLASH_GetDutyCycle+0x14>
	return (uint8_t)(*((uint8_t*)DCADDRESS));
10041f00:	4b03      	ldr	r3, [pc, #12]	@ (10041f10 <FLASH_GetDutyCycle+0x20>)
10041f02:	781b      	ldrb	r3, [r3, #0]
}
10041f04:	0018      	movs	r0, r3
10041f06:	46bd      	mov	sp, r7
10041f08:	bd80      	pop	{r7, pc}
10041f0a:	46c0      	nop			@ (mov r8, r8)
10041f0c:	200002b4 	.word	0x200002b4
10041f10:	1006f801 	.word	0x1006f801

10041f14 <FLASH_AppendLogs>:
 * @function: FLASH_AppendLogs();
 * @brief: Adds a new event entry to the logs
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendLogs(scheduleEvent event){
10041f14:	b580      	push	{r7, lr}
10041f16:	b084      	sub	sp, #16
10041f18:	af00      	add	r7, sp, #0
10041f1a:	003b      	movs	r3, r7
10041f1c:	6018      	str	r0, [r3, #0]
10041f1e:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10041f20:	4b24      	ldr	r3, [pc, #144]	@ (10041fb4 <FLASH_AppendLogs+0xa0>)
10041f22:	781b      	ldrb	r3, [r3, #0]
10041f24:	2b00      	cmp	r3, #0
10041f26:	d101      	bne.n	10041f2c <FLASH_AppendLogs+0x18>
10041f28:	2300      	movs	r3, #0
10041f2a:	e03e      	b.n	10041faa <FLASH_AppendLogs+0x96>
	LogsSize++;
10041f2c:	4b22      	ldr	r3, [pc, #136]	@ (10041fb8 <FLASH_AppendLogs+0xa4>)
10041f2e:	881b      	ldrh	r3, [r3, #0]
10041f30:	3301      	adds	r3, #1
10041f32:	b29a      	uxth	r2, r3
10041f34:	4b20      	ldr	r3, [pc, #128]	@ (10041fb8 <FLASH_AppendLogs+0xa4>)
10041f36:	801a      	strh	r2, [r3, #0]
	uint32_t Data1 = (event.month)&(event.day<<8)&(event.start<<16)&(event.stop<<24);
10041f38:	003b      	movs	r3, r7
10041f3a:	781b      	ldrb	r3, [r3, #0]
10041f3c:	001a      	movs	r2, r3
10041f3e:	003b      	movs	r3, r7
10041f40:	785b      	ldrb	r3, [r3, #1]
10041f42:	021b      	lsls	r3, r3, #8
10041f44:	4013      	ands	r3, r2
10041f46:	003a      	movs	r2, r7
10041f48:	7892      	ldrb	r2, [r2, #2]
10041f4a:	0412      	lsls	r2, r2, #16
10041f4c:	4013      	ands	r3, r2
10041f4e:	003a      	movs	r2, r7
10041f50:	78d2      	ldrb	r2, [r2, #3]
10041f52:	0612      	lsls	r2, r2, #24
10041f54:	4013      	ands	r3, r2
10041f56:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.folder)&(event.track<<8);
10041f58:	003b      	movs	r3, r7
10041f5a:	791b      	ldrb	r3, [r3, #4]
10041f5c:	001a      	movs	r2, r3
10041f5e:	003b      	movs	r3, r7
10041f60:	795b      	ldrb	r3, [r3, #5]
10041f62:	021b      	lsls	r3, r3, #8
10041f64:	4013      	ands	r3, r2
10041f66:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10041f68:	4b13      	ldr	r3, [pc, #76]	@ (10041fb8 <FLASH_AppendLogs+0xa4>)
10041f6a:	881b      	ldrh	r3, [r3, #0]
10041f6c:	4a13      	ldr	r2, [pc, #76]	@ (10041fbc <FLASH_AppendLogs+0xa8>)
10041f6e:	4694      	mov	ip, r2
10041f70:	4463      	add	r3, ip
10041f72:	00db      	lsls	r3, r3, #3
10041f74:	0019      	movs	r1, r3
10041f76:	68fb      	ldr	r3, [r7, #12]
10041f78:	001a      	movs	r2, r3
10041f7a:	2000      	movs	r0, #0
10041f7c:	f002 fe7c 	bl	10044c78 <HAL_FLASH_Program>
10041f80:	1e03      	subs	r3, r0, #0
10041f82:	d001      	beq.n	10041f88 <FLASH_AppendLogs+0x74>
		return 0;
10041f84:	2300      	movs	r3, #0
10041f86:	e010      	b.n	10041faa <FLASH_AppendLogs+0x96>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data2) != HAL_OK ){
10041f88:	4b0b      	ldr	r3, [pc, #44]	@ (10041fb8 <FLASH_AppendLogs+0xa4>)
10041f8a:	881b      	ldrh	r3, [r3, #0]
10041f8c:	4a0b      	ldr	r2, [pc, #44]	@ (10041fbc <FLASH_AppendLogs+0xa8>)
10041f8e:	4694      	mov	ip, r2
10041f90:	4463      	add	r3, ip
10041f92:	00db      	lsls	r3, r3, #3
10041f94:	0019      	movs	r1, r3
10041f96:	68bb      	ldr	r3, [r7, #8]
10041f98:	001a      	movs	r2, r3
10041f9a:	2000      	movs	r0, #0
10041f9c:	f002 fe6c 	bl	10044c78 <HAL_FLASH_Program>
10041fa0:	1e03      	subs	r3, r0, #0
10041fa2:	d001      	beq.n	10041fa8 <FLASH_AppendLogs+0x94>
		return 0;
10041fa4:	2300      	movs	r3, #0
10041fa6:	e000      	b.n	10041faa <FLASH_AppendLogs+0x96>
	}
	return 1;
10041fa8:	2301      	movs	r3, #1
}
10041faa:	0018      	movs	r0, r3
10041fac:	46bd      	mov	sp, r7
10041fae:	b004      	add	sp, #16
10041fb0:	bd80      	pop	{r7, pc}
10041fb2:	46c0      	nop			@ (mov r8, r8)
10041fb4:	200002b4 	.word	0x200002b4
10041fb8:	200002b2 	.word	0x200002b2
10041fbc:	0200dd00 	.word	0x0200dd00

10041fc0 <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
10041fc0:	b580      	push	{r7, lr}
10041fc2:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041fc4:	4b05      	ldr	r3, [pc, #20]	@ (10041fdc <FLASH_GetLogsSize+0x1c>)
10041fc6:	781b      	ldrb	r3, [r3, #0]
10041fc8:	2b00      	cmp	r3, #0
10041fca:	d101      	bne.n	10041fd0 <FLASH_GetLogsSize+0x10>
10041fcc:	2300      	movs	r3, #0
10041fce:	e001      	b.n	10041fd4 <FLASH_GetLogsSize+0x14>
	return LogsSize;
10041fd0:	4b03      	ldr	r3, [pc, #12]	@ (10041fe0 <FLASH_GetLogsSize+0x20>)
10041fd2:	881b      	ldrh	r3, [r3, #0]
}
10041fd4:	0018      	movs	r0, r3
10041fd6:	46bd      	mov	sp, r7
10041fd8:	bd80      	pop	{r7, pc}
10041fda:	46c0      	nop			@ (mov r8, r8)
10041fdc:	200002b4 	.word	0x200002b4
10041fe0:	200002b2 	.word	0x200002b2

10041fe4 <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
10041fe4:	b590      	push	{r4, r7, lr}
10041fe6:	b087      	sub	sp, #28
10041fe8:	af00      	add	r7, sp, #0
10041fea:	6078      	str	r0, [r7, #4]
10041fec:	000a      	movs	r2, r1
10041fee:	1cbb      	adds	r3, r7, #2
10041ff0:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10041ff2:	2410      	movs	r4, #16
10041ff4:	193b      	adds	r3, r7, r4
10041ff6:	0018      	movs	r0, r3
10041ff8:	2306      	movs	r3, #6
10041ffa:	001a      	movs	r2, r3
10041ffc:	2100      	movs	r1, #0
10041ffe:	f022 fe25 	bl	10064c4c <memset>
	if(!initialized){return event;}
10042002:	4b2e      	ldr	r3, [pc, #184]	@ (100420bc <FLASH_ReadLogs+0xd8>)
10042004:	781b      	ldrb	r3, [r3, #0]
10042006:	2b00      	cmp	r3, #0
10042008:	d108      	bne.n	1004201c <FLASH_ReadLogs+0x38>
1004200a:	687a      	ldr	r2, [r7, #4]
1004200c:	193b      	adds	r3, r7, r4
1004200e:	0010      	movs	r0, r2
10042010:	0019      	movs	r1, r3
10042012:	2306      	movs	r3, #6
10042014:	001a      	movs	r2, r3
10042016:	f022 fe8e 	bl	10064d36 <memcpy>
1004201a:	e04a      	b.n	100420b2 <FLASH_ReadLogs+0xce>
	if(index >= 0 && index <= LogsSize){
1004201c:	4b28      	ldr	r3, [pc, #160]	@ (100420c0 <FLASH_ReadLogs+0xdc>)
1004201e:	881b      	ldrh	r3, [r3, #0]
10042020:	1cba      	adds	r2, r7, #2
10042022:	8812      	ldrh	r2, [r2, #0]
10042024:	429a      	cmp	r2, r3
10042026:	d83b      	bhi.n	100420a0 <FLASH_ReadLogs+0xbc>
		event.month = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE);
10042028:	1cbb      	adds	r3, r7, #2
1004202a:	881b      	ldrh	r3, [r3, #0]
1004202c:	4a25      	ldr	r2, [pc, #148]	@ (100420c4 <FLASH_ReadLogs+0xe0>)
1004202e:	4694      	mov	ip, r2
10042030:	4463      	add	r3, ip
10042032:	00db      	lsls	r3, r3, #3
10042034:	781a      	ldrb	r2, [r3, #0]
10042036:	2110      	movs	r1, #16
10042038:	187b      	adds	r3, r7, r1
1004203a:	701a      	strb	r2, [r3, #0]
		event.day = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1);
1004203c:	1cbb      	adds	r3, r7, #2
1004203e:	881b      	ldrh	r3, [r3, #0]
10042040:	4a20      	ldr	r2, [pc, #128]	@ (100420c4 <FLASH_ReadLogs+0xe0>)
10042042:	4694      	mov	ip, r2
10042044:	4463      	add	r3, ip
10042046:	00db      	lsls	r3, r3, #3
10042048:	3301      	adds	r3, #1
1004204a:	781a      	ldrb	r2, [r3, #0]
1004204c:	187b      	adds	r3, r7, r1
1004204e:	705a      	strb	r2, [r3, #1]
		event.start = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2);
10042050:	1cbb      	adds	r3, r7, #2
10042052:	881b      	ldrh	r3, [r3, #0]
10042054:	4a1b      	ldr	r2, [pc, #108]	@ (100420c4 <FLASH_ReadLogs+0xe0>)
10042056:	4694      	mov	ip, r2
10042058:	4463      	add	r3, ip
1004205a:	00db      	lsls	r3, r3, #3
1004205c:	3302      	adds	r3, #2
1004205e:	781a      	ldrb	r2, [r3, #0]
10042060:	187b      	adds	r3, r7, r1
10042062:	709a      	strb	r2, [r3, #2]
		event.stop = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3);
10042064:	1cbb      	adds	r3, r7, #2
10042066:	881b      	ldrh	r3, [r3, #0]
10042068:	4a16      	ldr	r2, [pc, #88]	@ (100420c4 <FLASH_ReadLogs+0xe0>)
1004206a:	4694      	mov	ip, r2
1004206c:	4463      	add	r3, ip
1004206e:	00db      	lsls	r3, r3, #3
10042070:	3303      	adds	r3, #3
10042072:	781a      	ldrb	r2, [r3, #0]
10042074:	187b      	adds	r3, r7, r1
10042076:	70da      	strb	r2, [r3, #3]
		event.folder = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4);
10042078:	1cbb      	adds	r3, r7, #2
1004207a:	881b      	ldrh	r3, [r3, #0]
1004207c:	4a11      	ldr	r2, [pc, #68]	@ (100420c4 <FLASH_ReadLogs+0xe0>)
1004207e:	4694      	mov	ip, r2
10042080:	4463      	add	r3, ip
10042082:	00db      	lsls	r3, r3, #3
10042084:	3304      	adds	r3, #4
10042086:	781a      	ldrb	r2, [r3, #0]
10042088:	187b      	adds	r3, r7, r1
1004208a:	711a      	strb	r2, [r3, #4]
		event.track = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5);
1004208c:	1cbb      	adds	r3, r7, #2
1004208e:	881b      	ldrh	r3, [r3, #0]
10042090:	4a0c      	ldr	r2, [pc, #48]	@ (100420c4 <FLASH_ReadLogs+0xe0>)
10042092:	4694      	mov	ip, r2
10042094:	4463      	add	r3, ip
10042096:	00db      	lsls	r3, r3, #3
10042098:	3305      	adds	r3, #5
1004209a:	781a      	ldrb	r2, [r3, #0]
1004209c:	187b      	adds	r3, r7, r1
1004209e:	715a      	strb	r2, [r3, #5]

	}
	return event;
100420a0:	687a      	ldr	r2, [r7, #4]
100420a2:	2310      	movs	r3, #16
100420a4:	18fb      	adds	r3, r7, r3
100420a6:	0010      	movs	r0, r2
100420a8:	0019      	movs	r1, r3
100420aa:	2306      	movs	r3, #6
100420ac:	001a      	movs	r2, r3
100420ae:	f022 fe42 	bl	10064d36 <memcpy>
}
100420b2:	6878      	ldr	r0, [r7, #4]
100420b4:	46bd      	mov	sp, r7
100420b6:	b007      	add	sp, #28
100420b8:	bd90      	pop	{r4, r7, pc}
100420ba:	46c0      	nop			@ (mov r8, r8)
100420bc:	200002b4 	.word	0x200002b4
100420c0:	200002b2 	.word	0x200002b2
100420c4:	0200dd00 	.word	0x0200dd00

100420c8 <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
100420c8:	b580      	push	{r7, lr}
100420ca:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100420cc:	4b05      	ldr	r3, [pc, #20]	@ (100420e4 <FLASH_GetScheduleSize+0x1c>)
100420ce:	781b      	ldrb	r3, [r3, #0]
100420d0:	2b00      	cmp	r3, #0
100420d2:	d101      	bne.n	100420d8 <FLASH_GetScheduleSize+0x10>
100420d4:	2300      	movs	r3, #0
100420d6:	e001      	b.n	100420dc <FLASH_GetScheduleSize+0x14>
	return ScheduleSize;
100420d8:	4b03      	ldr	r3, [pc, #12]	@ (100420e8 <FLASH_GetScheduleSize+0x20>)
100420da:	881b      	ldrh	r3, [r3, #0]
}
100420dc:	0018      	movs	r0, r3
100420de:	46bd      	mov	sp, r7
100420e0:	bd80      	pop	{r7, pc}
100420e2:	46c0      	nop			@ (mov r8, r8)
100420e4:	200002b4 	.word	0x200002b4
100420e8:	200002b0 	.word	0x200002b0

100420ec <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
100420ec:	b590      	push	{r4, r7, lr}
100420ee:	b087      	sub	sp, #28
100420f0:	af00      	add	r7, sp, #0
100420f2:	6078      	str	r0, [r7, #4]
100420f4:	000a      	movs	r2, r1
100420f6:	1cbb      	adds	r3, r7, #2
100420f8:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
100420fa:	2410      	movs	r4, #16
100420fc:	193b      	adds	r3, r7, r4
100420fe:	0018      	movs	r0, r3
10042100:	2306      	movs	r3, #6
10042102:	001a      	movs	r2, r3
10042104:	2100      	movs	r1, #0
10042106:	f022 fda1 	bl	10064c4c <memset>
	if(!initialized){return event;}
1004210a:	4b2e      	ldr	r3, [pc, #184]	@ (100421c4 <FLASH_ReadSchedule+0xd8>)
1004210c:	781b      	ldrb	r3, [r3, #0]
1004210e:	2b00      	cmp	r3, #0
10042110:	d108      	bne.n	10042124 <FLASH_ReadSchedule+0x38>
10042112:	687a      	ldr	r2, [r7, #4]
10042114:	193b      	adds	r3, r7, r4
10042116:	0010      	movs	r0, r2
10042118:	0019      	movs	r1, r3
1004211a:	2306      	movs	r3, #6
1004211c:	001a      	movs	r2, r3
1004211e:	f022 fe0a 	bl	10064d36 <memcpy>
10042122:	e04a      	b.n	100421ba <FLASH_ReadSchedule+0xce>
		if(index >= 0 && index <= LogsSize){
10042124:	4b28      	ldr	r3, [pc, #160]	@ (100421c8 <FLASH_ReadSchedule+0xdc>)
10042126:	881b      	ldrh	r3, [r3, #0]
10042128:	1cba      	adds	r2, r7, #2
1004212a:	8812      	ldrh	r2, [r2, #0]
1004212c:	429a      	cmp	r2, r3
1004212e:	d83b      	bhi.n	100421a8 <FLASH_ReadSchedule+0xbc>
			event.month = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE);
10042130:	1cbb      	adds	r3, r7, #2
10042132:	881b      	ldrh	r3, [r3, #0]
10042134:	4a25      	ldr	r2, [pc, #148]	@ (100421cc <FLASH_ReadSchedule+0xe0>)
10042136:	4694      	mov	ip, r2
10042138:	4463      	add	r3, ip
1004213a:	00db      	lsls	r3, r3, #3
1004213c:	781a      	ldrb	r2, [r3, #0]
1004213e:	2110      	movs	r1, #16
10042140:	187b      	adds	r3, r7, r1
10042142:	701a      	strb	r2, [r3, #0]
			event.day = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+1);
10042144:	1cbb      	adds	r3, r7, #2
10042146:	881b      	ldrh	r3, [r3, #0]
10042148:	4a20      	ldr	r2, [pc, #128]	@ (100421cc <FLASH_ReadSchedule+0xe0>)
1004214a:	4694      	mov	ip, r2
1004214c:	4463      	add	r3, ip
1004214e:	00db      	lsls	r3, r3, #3
10042150:	3301      	adds	r3, #1
10042152:	781a      	ldrb	r2, [r3, #0]
10042154:	187b      	adds	r3, r7, r1
10042156:	705a      	strb	r2, [r3, #1]
			event.start = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+2);
10042158:	1cbb      	adds	r3, r7, #2
1004215a:	881b      	ldrh	r3, [r3, #0]
1004215c:	4a1b      	ldr	r2, [pc, #108]	@ (100421cc <FLASH_ReadSchedule+0xe0>)
1004215e:	4694      	mov	ip, r2
10042160:	4463      	add	r3, ip
10042162:	00db      	lsls	r3, r3, #3
10042164:	3302      	adds	r3, #2
10042166:	781a      	ldrb	r2, [r3, #0]
10042168:	187b      	adds	r3, r7, r1
1004216a:	709a      	strb	r2, [r3, #2]
			event.stop = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+3);
1004216c:	1cbb      	adds	r3, r7, #2
1004216e:	881b      	ldrh	r3, [r3, #0]
10042170:	4a16      	ldr	r2, [pc, #88]	@ (100421cc <FLASH_ReadSchedule+0xe0>)
10042172:	4694      	mov	ip, r2
10042174:	4463      	add	r3, ip
10042176:	00db      	lsls	r3, r3, #3
10042178:	3303      	adds	r3, #3
1004217a:	781a      	ldrb	r2, [r3, #0]
1004217c:	187b      	adds	r3, r7, r1
1004217e:	70da      	strb	r2, [r3, #3]
			event.folder = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+4);
10042180:	1cbb      	adds	r3, r7, #2
10042182:	881b      	ldrh	r3, [r3, #0]
10042184:	4a11      	ldr	r2, [pc, #68]	@ (100421cc <FLASH_ReadSchedule+0xe0>)
10042186:	4694      	mov	ip, r2
10042188:	4463      	add	r3, ip
1004218a:	00db      	lsls	r3, r3, #3
1004218c:	3304      	adds	r3, #4
1004218e:	781a      	ldrb	r2, [r3, #0]
10042190:	187b      	adds	r3, r7, r1
10042192:	711a      	strb	r2, [r3, #4]
			event.track = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+5);
10042194:	1cbb      	adds	r3, r7, #2
10042196:	881b      	ldrh	r3, [r3, #0]
10042198:	4a0c      	ldr	r2, [pc, #48]	@ (100421cc <FLASH_ReadSchedule+0xe0>)
1004219a:	4694      	mov	ip, r2
1004219c:	4463      	add	r3, ip
1004219e:	00db      	lsls	r3, r3, #3
100421a0:	3305      	adds	r3, #5
100421a2:	781a      	ldrb	r2, [r3, #0]
100421a4:	187b      	adds	r3, r7, r1
100421a6:	715a      	strb	r2, [r3, #5]

		}
		return event;
100421a8:	687a      	ldr	r2, [r7, #4]
100421aa:	2310      	movs	r3, #16
100421ac:	18fb      	adds	r3, r7, r3
100421ae:	0010      	movs	r0, r2
100421b0:	0019      	movs	r1, r3
100421b2:	2306      	movs	r3, #6
100421b4:	001a      	movs	r2, r3
100421b6:	f022 fdbe 	bl	10064d36 <memcpy>
}
100421ba:	6878      	ldr	r0, [r7, #4]
100421bc:	46bd      	mov	sp, r7
100421be:	b007      	add	sp, #28
100421c0:	bd90      	pop	{r4, r7, pc}
100421c2:	46c0      	nop			@ (mov r8, r8)
100421c4:	200002b4 	.word	0x200002b4
100421c8:	200002b2 	.word	0x200002b2
100421cc:	0200de00 	.word	0x0200de00

100421d0 <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the internal button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 3rd bit is button 3
 */
uint8_t GPIO_ReadButtons(void){
100421d0:	b5b0      	push	{r4, r5, r7, lr}
100421d2:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100421d4:	4b17      	ldr	r3, [pc, #92]	@ (10042234 <GPIO_ReadButtons+0x64>)
100421d6:	781b      	ldrb	r3, [r3, #0]
100421d8:	2b00      	cmp	r3, #0
100421da:	d101      	bne.n	100421e0 <GPIO_ReadButtons+0x10>
100421dc:	2300      	movs	r3, #0
100421de:	e025      	b.n	1004222c <GPIO_ReadButtons+0x5c>
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
100421e0:	2390      	movs	r3, #144	@ 0x90
100421e2:	05db      	lsls	r3, r3, #23
100421e4:	2101      	movs	r1, #1
100421e6:	0018      	movs	r0, r3
100421e8:	f003 f845 	bl	10045276 <HAL_GPIO_ReadPin>
100421ec:	1e03      	subs	r3, r0, #0
100421ee:	d101      	bne.n	100421f4 <GPIO_ReadButtons+0x24>
100421f0:	2404      	movs	r4, #4
100421f2:	e000      	b.n	100421f6 <GPIO_ReadButtons+0x26>
100421f4:	2400      	movs	r4, #0
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
100421f6:	4b10      	ldr	r3, [pc, #64]	@ (10042238 <GPIO_ReadButtons+0x68>)
100421f8:	2120      	movs	r1, #32
100421fa:	0018      	movs	r0, r3
100421fc:	f003 f83b 	bl	10045276 <HAL_GPIO_ReadPin>
10042200:	1e03      	subs	r3, r0, #0
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
10042202:	d101      	bne.n	10042208 <GPIO_ReadButtons+0x38>
10042204:	2302      	movs	r3, #2
10042206:	e000      	b.n	1004220a <GPIO_ReadButtons+0x3a>
10042208:	2300      	movs	r3, #0
1004220a:	4323      	orrs	r3, r4
1004220c:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) << 0));
1004220e:	2380      	movs	r3, #128	@ 0x80
10042210:	01db      	lsls	r3, r3, #7
10042212:	4a09      	ldr	r2, [pc, #36]	@ (10042238 <GPIO_ReadButtons+0x68>)
10042214:	0019      	movs	r1, r3
10042216:	0010      	movs	r0, r2
10042218:	f003 f82d 	bl	10045276 <HAL_GPIO_ReadPin>
1004221c:	0003      	movs	r3, r0
1004221e:	425a      	negs	r2, r3
10042220:	4153      	adcs	r3, r2
10042222:	b2db      	uxtb	r3, r3
10042224:	b25b      	sxtb	r3, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
10042226:	4323      	orrs	r3, r4
10042228:	b25b      	sxtb	r3, r3
1004222a:	b2db      	uxtb	r3, r3
}
1004222c:	0018      	movs	r0, r3
1004222e:	46bd      	mov	sp, r7
10042230:	bdb0      	pop	{r4, r5, r7, pc}
10042232:	46c0      	nop			@ (mov r8, r8)
10042234:	200002b6 	.word	0x200002b6
10042238:	48100000 	.word	0x48100000

1004223c <GPIO_Event_Init>:
 * @Function: GPIO_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t GPIO_Event_Init(FIFO Queue){
1004223c:	b580      	push	{r7, lr}
1004223e:	b082      	sub	sp, #8
10042240:	af00      	add	r7, sp, #0
10042242:	6078      	str	r0, [r7, #4]
	buttons = 0;
10042244:	4b0f      	ldr	r3, [pc, #60]	@ (10042284 <GPIO_Event_Init+0x48>)
10042246:	2200      	movs	r2, #0
10042248:	701a      	strb	r2, [r3, #0]
	//Initialize dev board leds, for debug purposes
	BSP_LED_Init(LED_BLUE);
1004224a:	2000      	movs	r0, #0
1004224c:	f002 f9de 	bl	1004460c <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
10042250:	2001      	movs	r0, #1
10042252:	f002 f9db 	bl	1004460c <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
10042256:	2002      	movs	r0, #2
10042258:	f002 f9d8 	bl	1004460c <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(B1, BUTTON_MODE_GPIO);
1004225c:	2100      	movs	r1, #0
1004225e:	2000      	movs	r0, #0
10042260:	f002 fa66 	bl	10044730 <BSP_PB_Init>
	BSP_PB_Init(B2, BUTTON_MODE_GPIO);
10042264:	2100      	movs	r1, #0
10042266:	2001      	movs	r0, #1
10042268:	f002 fa62 	bl	10044730 <BSP_PB_Init>
	BSP_PB_Init(B3, BUTTON_MODE_GPIO);
1004226c:	2100      	movs	r1, #0
1004226e:	2002      	movs	r0, #2
10042270:	f002 fa5e 	bl	10044730 <BSP_PB_Init>
	GPIOqueue = Queue;
10042274:	4b04      	ldr	r3, [pc, #16]	@ (10042288 <GPIO_Event_Init+0x4c>)
10042276:	687a      	ldr	r2, [r7, #4]
10042278:	601a      	str	r2, [r3, #0]
	//GPIO_Init()
	return HAL_OK;
1004227a:	2300      	movs	r3, #0

}
1004227c:	0018      	movs	r0, r3
1004227e:	46bd      	mov	sp, r7
10042280:	b002      	add	sp, #8
10042282:	bd80      	pop	{r7, pc}
10042284:	200002b5 	.word	0x200002b5
10042288:	200002b8 	.word	0x200002b8

1004228c <GPIO_Event_Updater>:
 * @Brief: Provides the event checker that checks and posts the changes in the buttons and the current buttons states
 * @param: none
 * @return: An event where the 16bit data is formatted at the 8 most significant bits representing the current states
 * 		 	and the least significant 8 bits representing the changes in the buttons states
 */
Event_t GPIO_Event_Updater(void){
1004228c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004228e:	b085      	sub	sp, #20
10042290:	af00      	add	r7, sp, #0
	uint8_t event = 0;
10042292:	260f      	movs	r6, #15
10042294:	19bb      	adds	r3, r7, r6
10042296:	2200      	movs	r2, #0
10042298:	701a      	strb	r2, [r3, #0]
	Event_t update = {0, 0};//Initialize to no event
1004229a:	1d3b      	adds	r3, r7, #4
1004229c:	2200      	movs	r2, #0
1004229e:	701a      	strb	r2, [r3, #0]
100422a0:	1d3b      	adds	r3, r7, #4
100422a2:	2200      	movs	r2, #0
100422a4:	805a      	strh	r2, [r3, #2]
	uint8_t newButtons = GPIO_ReadButtons();
100422a6:	250e      	movs	r5, #14
100422a8:	197c      	adds	r4, r7, r5
100422aa:	f7ff ff91 	bl	100421d0 <GPIO_ReadButtons>
100422ae:	0003      	movs	r3, r0
100422b0:	7023      	strb	r3, [r4, #0]
	if(newButtons != buttons){
100422b2:	4b22      	ldr	r3, [pc, #136]	@ (1004233c <GPIO_Event_Updater+0xb0>)
100422b4:	781b      	ldrb	r3, [r3, #0]
100422b6:	0029      	movs	r1, r5
100422b8:	187a      	adds	r2, r7, r1
100422ba:	7812      	ldrb	r2, [r2, #0]
100422bc:	429a      	cmp	r2, r3
100422be:	d01a      	beq.n	100422f6 <GPIO_Event_Updater+0x6a>
		update.data = (uint16_t)(buttons ^ newButtons) | (((uint16_t)newButtons) << 8);
100422c0:	4b1e      	ldr	r3, [pc, #120]	@ (1004233c <GPIO_Event_Updater+0xb0>)
100422c2:	781a      	ldrb	r2, [r3, #0]
100422c4:	187b      	adds	r3, r7, r1
100422c6:	781b      	ldrb	r3, [r3, #0]
100422c8:	4053      	eors	r3, r2
100422ca:	b2db      	uxtb	r3, r3
100422cc:	b21a      	sxth	r2, r3
100422ce:	187b      	adds	r3, r7, r1
100422d0:	781b      	ldrb	r3, [r3, #0]
100422d2:	b21b      	sxth	r3, r3
100422d4:	021b      	lsls	r3, r3, #8
100422d6:	b21b      	sxth	r3, r3
100422d8:	4313      	orrs	r3, r2
100422da:	b21b      	sxth	r3, r3
100422dc:	b29a      	uxth	r2, r3
100422de:	1d3b      	adds	r3, r7, #4
100422e0:	805a      	strh	r2, [r3, #2]
		update.status = EVENT_BUTTONS;
100422e2:	1d3b      	adds	r3, r7, #4
100422e4:	2204      	movs	r2, #4
100422e6:	701a      	strb	r2, [r3, #0]
		buttons = newButtons;
100422e8:	4b14      	ldr	r3, [pc, #80]	@ (1004233c <GPIO_Event_Updater+0xb0>)
100422ea:	187a      	adds	r2, r7, r1
100422ec:	7812      	ldrb	r2, [r2, #0]
100422ee:	701a      	strb	r2, [r3, #0]
		event = 1;
100422f0:	19bb      	adds	r3, r7, r6
100422f2:	2201      	movs	r2, #1
100422f4:	701a      	strb	r2, [r3, #0]
	}
	if(event){FIFO_Enqueue(GPIOqueue, update);}
100422f6:	230f      	movs	r3, #15
100422f8:	18fb      	adds	r3, r7, r3
100422fa:	781b      	ldrb	r3, [r3, #0]
100422fc:	2b00      	cmp	r3, #0
100422fe:	d006      	beq.n	1004230e <GPIO_Event_Updater+0x82>
10042300:	4b0f      	ldr	r3, [pc, #60]	@ (10042340 <GPIO_Event_Updater+0xb4>)
10042302:	681a      	ldr	r2, [r3, #0]
10042304:	1d3b      	adds	r3, r7, #4
10042306:	6819      	ldr	r1, [r3, #0]
10042308:	0010      	movs	r0, r2
1004230a:	f7ff fd4a 	bl	10041da2 <FIFO_Enqueue>
	return update;
1004230e:	2108      	movs	r1, #8
10042310:	187b      	adds	r3, r7, r1
10042312:	1d3a      	adds	r2, r7, #4
10042314:	6812      	ldr	r2, [r2, #0]
10042316:	601a      	str	r2, [r3, #0]
10042318:	187a      	adds	r2, r7, r1
1004231a:	2300      	movs	r3, #0
1004231c:	8811      	ldrh	r1, [r2, #0]
1004231e:	0409      	lsls	r1, r1, #16
10042320:	0c09      	lsrs	r1, r1, #16
10042322:	0c1b      	lsrs	r3, r3, #16
10042324:	041b      	lsls	r3, r3, #16
10042326:	430b      	orrs	r3, r1
10042328:	8852      	ldrh	r2, [r2, #2]
1004232a:	0412      	lsls	r2, r2, #16
1004232c:	041b      	lsls	r3, r3, #16
1004232e:	0c1b      	lsrs	r3, r3, #16
10042330:	4313      	orrs	r3, r2
}
10042332:	0018      	movs	r0, r3
10042334:	46bd      	mov	sp, r7
10042336:	b005      	add	sp, #20
10042338:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004233a:	46c0      	nop			@ (mov r8, r8)
1004233c:	200002b5 	.word	0x200002b5
10042340:	200002b8 	.word	0x200002b8

10042344 <GPIO_Event_Handler>:
 * @Function: GPIO_Event_Handler
 * @Brief: Currently changes the LEDs on the devboard based on the updates
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t GPIO_Event_Handler(Event_t event){
10042344:	b580      	push	{r7, lr}
10042346:	b082      	sub	sp, #8
10042348:	af00      	add	r7, sp, #0
1004234a:	1d3b      	adds	r3, r7, #4
1004234c:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_BUTTONS){
1004234e:	1d3b      	adds	r3, r7, #4
10042350:	781b      	ldrb	r3, [r3, #0]
10042352:	b25b      	sxtb	r3, r3
10042354:	2b04      	cmp	r3, #4
10042356:	d11e      	bne.n	10042396 <GPIO_Event_Handler+0x52>
		if((event.data>>0)&0x01){
10042358:	1d3b      	adds	r3, r7, #4
1004235a:	885b      	ldrh	r3, [r3, #2]
1004235c:	001a      	movs	r2, r3
1004235e:	2301      	movs	r3, #1
10042360:	4013      	ands	r3, r2
10042362:	d002      	beq.n	1004236a <GPIO_Event_Handler+0x26>
			BSP_LED_Toggle(LED_BLUE);
10042364:	2000      	movs	r0, #0
10042366:	f002 f9c7 	bl	100446f8 <BSP_LED_Toggle>
		}
		if((event.data>>1)&0x01){
1004236a:	1d3b      	adds	r3, r7, #4
1004236c:	885b      	ldrh	r3, [r3, #2]
1004236e:	085b      	lsrs	r3, r3, #1
10042370:	b29b      	uxth	r3, r3
10042372:	001a      	movs	r2, r3
10042374:	2301      	movs	r3, #1
10042376:	4013      	ands	r3, r2
10042378:	d002      	beq.n	10042380 <GPIO_Event_Handler+0x3c>
			BSP_LED_Toggle(LED_GREEN);
1004237a:	2001      	movs	r0, #1
1004237c:	f002 f9bc 	bl	100446f8 <BSP_LED_Toggle>
		}
		if((event.data>>2)&0x01){
10042380:	1d3b      	adds	r3, r7, #4
10042382:	885b      	ldrh	r3, [r3, #2]
10042384:	089b      	lsrs	r3, r3, #2
10042386:	b29b      	uxth	r3, r3
10042388:	001a      	movs	r2, r3
1004238a:	2301      	movs	r3, #1
1004238c:	4013      	ands	r3, r2
1004238e:	d002      	beq.n	10042396 <GPIO_Event_Handler+0x52>
			BSP_LED_Toggle(LED_RED);
10042390:	2002      	movs	r0, #2
10042392:	f002 f9b1 	bl	100446f8 <BSP_LED_Toggle>
		}
	}
	return 1;
10042396:	2301      	movs	r3, #1
}
10042398:	0018      	movs	r0, r3
1004239a:	46bd      	mov	sp, r7
1004239c:	b002      	add	sp, #8
1004239e:	bd80      	pop	{r7, pc}

100423a0 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
100423a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100423a2:	b085      	sub	sp, #20
100423a4:	af02      	add	r7, sp, #8
100423a6:	6078      	str	r0, [r7, #4]
	//here is where to implement something to do with the transmitted data

	//decrement the circular buffer
	if(TxReq.tail == TxReq.head){
100423a8:	4a3e      	ldr	r2, [pc, #248]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423aa:	2382      	movs	r3, #130	@ 0x82
100423ac:	33ff      	adds	r3, #255	@ 0xff
100423ae:	5cd2      	ldrb	r2, [r2, r3]
100423b0:	493c      	ldr	r1, [pc, #240]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423b2:	23c0      	movs	r3, #192	@ 0xc0
100423b4:	005b      	lsls	r3, r3, #1
100423b6:	5ccb      	ldrb	r3, [r1, r3]
100423b8:	429a      	cmp	r2, r3
100423ba:	d104      	bne.n	100423c6 <HAL_I2C_MemTxCpltCallback+0x26>
		TxReq.full = false;
100423bc:	4a39      	ldr	r2, [pc, #228]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423be:	23c1      	movs	r3, #193	@ 0xc1
100423c0:	005b      	lsls	r3, r3, #1
100423c2:	2100      	movs	r1, #0
100423c4:	54d1      	strb	r1, [r2, r3]
	}
	TxReq.head++;
100423c6:	4a37      	ldr	r2, [pc, #220]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423c8:	23c0      	movs	r3, #192	@ 0xc0
100423ca:	005b      	lsls	r3, r3, #1
100423cc:	5cd3      	ldrb	r3, [r2, r3]
100423ce:	3301      	adds	r3, #1
100423d0:	b2d9      	uxtb	r1, r3
100423d2:	4a34      	ldr	r2, [pc, #208]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423d4:	23c0      	movs	r3, #192	@ 0xc0
100423d6:	005b      	lsls	r3, r3, #1
100423d8:	54d1      	strb	r1, [r2, r3]
	TxReq.head %= CIRCBUFFERSIZE;
100423da:	4a32      	ldr	r2, [pc, #200]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423dc:	23c0      	movs	r3, #192	@ 0xc0
100423de:	005b      	lsls	r3, r3, #1
100423e0:	5cd3      	ldrb	r3, [r2, r3]
100423e2:	221f      	movs	r2, #31
100423e4:	4013      	ands	r3, r2
100423e6:	b2d9      	uxtb	r1, r3
100423e8:	4a2e      	ldr	r2, [pc, #184]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
100423ea:	23c0      	movs	r3, #192	@ 0xc0
100423ec:	005b      	lsls	r3, r3, #1
100423ee:	54d1      	strb	r1, [r2, r3]
	if(RxReq.head != RxReq.tail){//if the buffer is not empty (cannot be full as we just pulled from the buffer)
100423f0:	4a2d      	ldr	r2, [pc, #180]	@ (100424a8 <HAL_I2C_MemTxCpltCallback+0x108>)
100423f2:	23c0      	movs	r3, #192	@ 0xc0
100423f4:	005b      	lsls	r3, r3, #1
100423f6:	5cd2      	ldrb	r2, [r2, r3]
100423f8:	492b      	ldr	r1, [pc, #172]	@ (100424a8 <HAL_I2C_MemTxCpltCallback+0x108>)
100423fa:	2382      	movs	r3, #130	@ 0x82
100423fc:	33ff      	adds	r3, #255	@ 0xff
100423fe:	5ccb      	ldrb	r3, [r1, r3]
10042400:	429a      	cmp	r2, r3
10042402:	d04a      	beq.n	1004249a <HAL_I2C_MemTxCpltCallback+0xfa>
			HAL_I2C_Mem_Write_IT(&hi2c1,
								 TxReq.data[TxReq.head].targetadr<<1,
10042404:	4a27      	ldr	r2, [pc, #156]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
10042406:	23c0      	movs	r3, #192	@ 0xc0
10042408:	005b      	lsls	r3, r3, #1
1004240a:	5cd3      	ldrb	r3, [r2, r3]
1004240c:	0019      	movs	r1, r3
1004240e:	4a25      	ldr	r2, [pc, #148]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
10042410:	000b      	movs	r3, r1
10042412:	005b      	lsls	r3, r3, #1
10042414:	185b      	adds	r3, r3, r1
10042416:	009b      	lsls	r3, r3, #2
10042418:	5c9b      	ldrb	r3, [r3, r2]
			HAL_I2C_Mem_Write_IT(&hi2c1,
1004241a:	18db      	adds	r3, r3, r3
1004241c:	b29c      	uxth	r4, r3
								 TxReq.data[TxReq.head].registeradr,
1004241e:	4a21      	ldr	r2, [pc, #132]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
10042420:	23c0      	movs	r3, #192	@ 0xc0
10042422:	005b      	lsls	r3, r3, #1
10042424:	5cd3      	ldrb	r3, [r2, r3]
10042426:	0019      	movs	r1, r3
10042428:	4a1e      	ldr	r2, [pc, #120]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
1004242a:	000b      	movs	r3, r1
1004242c:	005b      	lsls	r3, r3, #1
1004242e:	185b      	adds	r3, r3, r1
10042430:	009b      	lsls	r3, r3, #2
10042432:	18d3      	adds	r3, r2, r3
10042434:	3301      	adds	r3, #1
10042436:	781b      	ldrb	r3, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1,
10042438:	001d      	movs	r5, r3
								 TxReq.data[TxReq.head].registersize,
1004243a:	4a1a      	ldr	r2, [pc, #104]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
1004243c:	23c0      	movs	r3, #192	@ 0xc0
1004243e:	005b      	lsls	r3, r3, #1
10042440:	5cd3      	ldrb	r3, [r2, r3]
10042442:	0019      	movs	r1, r3
10042444:	4a17      	ldr	r2, [pc, #92]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
10042446:	000b      	movs	r3, r1
10042448:	005b      	lsls	r3, r3, #1
1004244a:	185b      	adds	r3, r3, r1
1004244c:	009b      	lsls	r3, r3, #2
1004244e:	18d3      	adds	r3, r2, r3
10042450:	3302      	adds	r3, #2
10042452:	781b      	ldrb	r3, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1,
10042454:	001e      	movs	r6, r3
								 TxReq.data[TxReq.head].data,
10042456:	4a13      	ldr	r2, [pc, #76]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
10042458:	23c0      	movs	r3, #192	@ 0xc0
1004245a:	005b      	lsls	r3, r3, #1
1004245c:	5cd3      	ldrb	r3, [r2, r3]
1004245e:	001a      	movs	r2, r3
10042460:	0013      	movs	r3, r2
10042462:	005b      	lsls	r3, r3, #1
10042464:	189b      	adds	r3, r3, r2
10042466:	009b      	lsls	r3, r3, #2
10042468:	3308      	adds	r3, #8
1004246a:	001a      	movs	r2, r3
1004246c:	4b0d      	ldr	r3, [pc, #52]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
1004246e:	18d2      	adds	r2, r2, r3
								 TxReq.data[TxReq.head].registersize);
10042470:	490c      	ldr	r1, [pc, #48]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
10042472:	23c0      	movs	r3, #192	@ 0xc0
10042474:	005b      	lsls	r3, r3, #1
10042476:	5ccb      	ldrb	r3, [r1, r3]
10042478:	0018      	movs	r0, r3
1004247a:	490a      	ldr	r1, [pc, #40]	@ (100424a4 <HAL_I2C_MemTxCpltCallback+0x104>)
1004247c:	0003      	movs	r3, r0
1004247e:	005b      	lsls	r3, r3, #1
10042480:	181b      	adds	r3, r3, r0
10042482:	009b      	lsls	r3, r3, #2
10042484:	18cb      	adds	r3, r1, r3
10042486:	3302      	adds	r3, #2
10042488:	781b      	ldrb	r3, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1,
1004248a:	4808      	ldr	r0, [pc, #32]	@ (100424ac <HAL_I2C_MemTxCpltCallback+0x10c>)
1004248c:	9301      	str	r3, [sp, #4]
1004248e:	9200      	str	r2, [sp, #0]
10042490:	0033      	movs	r3, r6
10042492:	002a      	movs	r2, r5
10042494:	0021      	movs	r1, r4
10042496:	f003 f833 	bl	10045500 <HAL_I2C_Mem_Write_IT>
		}
}
1004249a:	46c0      	nop			@ (mov r8, r8)
1004249c:	46bd      	mov	sp, r7
1004249e:	b003      	add	sp, #12
100424a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100424a2:	46c0      	nop			@ (mov r8, r8)
100424a4:	20000494 	.word	0x20000494
100424a8:	20000310 	.word	0x20000310
100424ac:	200002bc 	.word	0x200002bc

100424b0 <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
100424b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100424b2:	b087      	sub	sp, #28
100424b4:	af02      	add	r7, sp, #8
100424b6:	6078      	str	r0, [r7, #4]
	uint16_t data;
	//construct the received data into a uint16_t
	if(RxReq.data[RxReq.head].registersize == 2){
100424b8:	4a7d      	ldr	r2, [pc, #500]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100424ba:	23c0      	movs	r3, #192	@ 0xc0
100424bc:	005b      	lsls	r3, r3, #1
100424be:	5cd3      	ldrb	r3, [r2, r3]
100424c0:	0019      	movs	r1, r3
100424c2:	4a7b      	ldr	r2, [pc, #492]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100424c4:	000b      	movs	r3, r1
100424c6:	005b      	lsls	r3, r3, #1
100424c8:	185b      	adds	r3, r3, r1
100424ca:	009b      	lsls	r3, r3, #2
100424cc:	18d3      	adds	r3, r2, r3
100424ce:	3302      	adds	r3, #2
100424d0:	781b      	ldrb	r3, [r3, #0]
100424d2:	2b02      	cmp	r3, #2
100424d4:	d121      	bne.n	1004251a <HAL_I2C_MemRxCpltCallback+0x6a>
		data = (RxReq.data[RxReq.head].data[0] << 8) + (RxReq.data[RxReq.head].data[1]);
100424d6:	4a76      	ldr	r2, [pc, #472]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100424d8:	23c0      	movs	r3, #192	@ 0xc0
100424da:	005b      	lsls	r3, r3, #1
100424dc:	5cd3      	ldrb	r3, [r2, r3]
100424de:	0019      	movs	r1, r3
100424e0:	4a73      	ldr	r2, [pc, #460]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100424e2:	000b      	movs	r3, r1
100424e4:	005b      	lsls	r3, r3, #1
100424e6:	185b      	adds	r3, r3, r1
100424e8:	009b      	lsls	r3, r3, #2
100424ea:	18d3      	adds	r3, r2, r3
100424ec:	3308      	adds	r3, #8
100424ee:	781b      	ldrb	r3, [r3, #0]
100424f0:	021b      	lsls	r3, r3, #8
100424f2:	b29a      	uxth	r2, r3
100424f4:	496e      	ldr	r1, [pc, #440]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100424f6:	23c0      	movs	r3, #192	@ 0xc0
100424f8:	005b      	lsls	r3, r3, #1
100424fa:	5ccb      	ldrb	r3, [r1, r3]
100424fc:	0018      	movs	r0, r3
100424fe:	496c      	ldr	r1, [pc, #432]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042500:	0003      	movs	r3, r0
10042502:	005b      	lsls	r3, r3, #1
10042504:	181b      	adds	r3, r3, r0
10042506:	009b      	lsls	r3, r3, #2
10042508:	18cb      	adds	r3, r1, r3
1004250a:	3309      	adds	r3, #9
1004250c:	781b      	ldrb	r3, [r3, #0]
1004250e:	0019      	movs	r1, r3
10042510:	230e      	movs	r3, #14
10042512:	18fb      	adds	r3, r7, r3
10042514:	1852      	adds	r2, r2, r1
10042516:	801a      	strh	r2, [r3, #0]
10042518:	e034      	b.n	10042584 <HAL_I2C_MemRxCpltCallback+0xd4>
	}else if(RxReq.data[RxReq.head].registersize == 1){
1004251a:	4a65      	ldr	r2, [pc, #404]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004251c:	23c0      	movs	r3, #192	@ 0xc0
1004251e:	005b      	lsls	r3, r3, #1
10042520:	5cd3      	ldrb	r3, [r2, r3]
10042522:	0019      	movs	r1, r3
10042524:	4a62      	ldr	r2, [pc, #392]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042526:	000b      	movs	r3, r1
10042528:	005b      	lsls	r3, r3, #1
1004252a:	185b      	adds	r3, r3, r1
1004252c:	009b      	lsls	r3, r3, #2
1004252e:	18d3      	adds	r3, r2, r3
10042530:	3302      	adds	r3, #2
10042532:	781b      	ldrb	r3, [r3, #0]
10042534:	2b01      	cmp	r3, #1
10042536:	d121      	bne.n	1004257c <HAL_I2C_MemRxCpltCallback+0xcc>
		data = RxReq.data[RxReq.head].data[0] + (RxReq.data[RxReq.head].registeradr << 8);
10042538:	4a5d      	ldr	r2, [pc, #372]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004253a:	23c0      	movs	r3, #192	@ 0xc0
1004253c:	005b      	lsls	r3, r3, #1
1004253e:	5cd3      	ldrb	r3, [r2, r3]
10042540:	0019      	movs	r1, r3
10042542:	4a5b      	ldr	r2, [pc, #364]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042544:	000b      	movs	r3, r1
10042546:	005b      	lsls	r3, r3, #1
10042548:	185b      	adds	r3, r3, r1
1004254a:	009b      	lsls	r3, r3, #2
1004254c:	18d3      	adds	r3, r2, r3
1004254e:	3308      	adds	r3, #8
10042550:	781b      	ldrb	r3, [r3, #0]
10042552:	0018      	movs	r0, r3
10042554:	4a56      	ldr	r2, [pc, #344]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042556:	23c0      	movs	r3, #192	@ 0xc0
10042558:	005b      	lsls	r3, r3, #1
1004255a:	5cd3      	ldrb	r3, [r2, r3]
1004255c:	0019      	movs	r1, r3
1004255e:	4a54      	ldr	r2, [pc, #336]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042560:	000b      	movs	r3, r1
10042562:	005b      	lsls	r3, r3, #1
10042564:	185b      	adds	r3, r3, r1
10042566:	009b      	lsls	r3, r3, #2
10042568:	18d3      	adds	r3, r2, r3
1004256a:	3301      	adds	r3, #1
1004256c:	781b      	ldrb	r3, [r3, #0]
1004256e:	021b      	lsls	r3, r3, #8
10042570:	b29a      	uxth	r2, r3
10042572:	230e      	movs	r3, #14
10042574:	18fb      	adds	r3, r7, r3
10042576:	1882      	adds	r2, r0, r2
10042578:	801a      	strh	r2, [r3, #0]
1004257a:	e003      	b.n	10042584 <HAL_I2C_MemRxCpltCallback+0xd4>
	}else {//error recovery
		data = 0;
1004257c:	230e      	movs	r3, #14
1004257e:	18fb      	adds	r3, r7, r3
10042580:	2200      	movs	r2, #0
10042582:	801a      	strh	r2, [r3, #0]
	}
	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, data};
10042584:	2008      	movs	r0, #8
10042586:	183b      	adds	r3, r7, r0
10042588:	2205      	movs	r2, #5
1004258a:	701a      	strb	r2, [r3, #0]
1004258c:	183b      	adds	r3, r7, r0
1004258e:	220e      	movs	r2, #14
10042590:	18ba      	adds	r2, r7, r2
10042592:	8812      	ldrh	r2, [r2, #0]
10042594:	805a      	strh	r2, [r3, #2]
	//post the event to the function given
	RxReq.data[RxReq.head].PostTo(ret);
10042596:	4a46      	ldr	r2, [pc, #280]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042598:	23c0      	movs	r3, #192	@ 0xc0
1004259a:	005b      	lsls	r3, r3, #1
1004259c:	5cd3      	ldrb	r3, [r2, r3]
1004259e:	0019      	movs	r1, r3
100425a0:	4a43      	ldr	r2, [pc, #268]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425a2:	000b      	movs	r3, r1
100425a4:	005b      	lsls	r3, r3, #1
100425a6:	185b      	adds	r3, r3, r1
100425a8:	009b      	lsls	r3, r3, #2
100425aa:	18d3      	adds	r3, r2, r3
100425ac:	3304      	adds	r3, #4
100425ae:	681a      	ldr	r2, [r3, #0]
100425b0:	183b      	adds	r3, r7, r0
100425b2:	6818      	ldr	r0, [r3, #0]
100425b4:	4790      	blx	r2
	//decrement the circular buffer
	if(RxReq.tail == RxReq.head){
100425b6:	4a3e      	ldr	r2, [pc, #248]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425b8:	2382      	movs	r3, #130	@ 0x82
100425ba:	33ff      	adds	r3, #255	@ 0xff
100425bc:	5cd2      	ldrb	r2, [r2, r3]
100425be:	493c      	ldr	r1, [pc, #240]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425c0:	23c0      	movs	r3, #192	@ 0xc0
100425c2:	005b      	lsls	r3, r3, #1
100425c4:	5ccb      	ldrb	r3, [r1, r3]
100425c6:	429a      	cmp	r2, r3
100425c8:	d104      	bne.n	100425d4 <HAL_I2C_MemRxCpltCallback+0x124>
		RxReq.full = false;
100425ca:	4a39      	ldr	r2, [pc, #228]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425cc:	23c1      	movs	r3, #193	@ 0xc1
100425ce:	005b      	lsls	r3, r3, #1
100425d0:	2100      	movs	r1, #0
100425d2:	54d1      	strb	r1, [r2, r3]
	}
	RxReq.head++;
100425d4:	4a36      	ldr	r2, [pc, #216]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425d6:	23c0      	movs	r3, #192	@ 0xc0
100425d8:	005b      	lsls	r3, r3, #1
100425da:	5cd3      	ldrb	r3, [r2, r3]
100425dc:	3301      	adds	r3, #1
100425de:	b2d9      	uxtb	r1, r3
100425e0:	4a33      	ldr	r2, [pc, #204]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425e2:	23c0      	movs	r3, #192	@ 0xc0
100425e4:	005b      	lsls	r3, r3, #1
100425e6:	54d1      	strb	r1, [r2, r3]
	RxReq.head %= CIRCBUFFERSIZE;
100425e8:	4a31      	ldr	r2, [pc, #196]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425ea:	23c0      	movs	r3, #192	@ 0xc0
100425ec:	005b      	lsls	r3, r3, #1
100425ee:	5cd3      	ldrb	r3, [r2, r3]
100425f0:	221f      	movs	r2, #31
100425f2:	4013      	ands	r3, r2
100425f4:	b2d9      	uxtb	r1, r3
100425f6:	4a2e      	ldr	r2, [pc, #184]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
100425f8:	23c0      	movs	r3, #192	@ 0xc0
100425fa:	005b      	lsls	r3, r3, #1
100425fc:	54d1      	strb	r1, [r2, r3]
	if(RxReq.head != RxReq.tail){//if the buffer is not empty (cannot be full as we just pulled from the buffer)
100425fe:	4a2c      	ldr	r2, [pc, #176]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042600:	23c0      	movs	r3, #192	@ 0xc0
10042602:	005b      	lsls	r3, r3, #1
10042604:	5cd2      	ldrb	r2, [r2, r3]
10042606:	492a      	ldr	r1, [pc, #168]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042608:	2382      	movs	r3, #130	@ 0x82
1004260a:	33ff      	adds	r3, #255	@ 0xff
1004260c:	5ccb      	ldrb	r3, [r1, r3]
1004260e:	429a      	cmp	r2, r3
10042610:	d04a      	beq.n	100426a8 <HAL_I2C_MemRxCpltCallback+0x1f8>

		HAL_I2C_Mem_Read_IT(&hi2c1,
							RxReq.data[RxReq.head].targetadr<<1,
10042612:	4a27      	ldr	r2, [pc, #156]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042614:	23c0      	movs	r3, #192	@ 0xc0
10042616:	005b      	lsls	r3, r3, #1
10042618:	5cd3      	ldrb	r3, [r2, r3]
1004261a:	0019      	movs	r1, r3
1004261c:	4a24      	ldr	r2, [pc, #144]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004261e:	000b      	movs	r3, r1
10042620:	005b      	lsls	r3, r3, #1
10042622:	185b      	adds	r3, r3, r1
10042624:	009b      	lsls	r3, r3, #2
10042626:	5c9b      	ldrb	r3, [r3, r2]
		HAL_I2C_Mem_Read_IT(&hi2c1,
10042628:	18db      	adds	r3, r3, r3
1004262a:	b29c      	uxth	r4, r3
							RxReq.data[RxReq.head].registeradr,
1004262c:	4a20      	ldr	r2, [pc, #128]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004262e:	23c0      	movs	r3, #192	@ 0xc0
10042630:	005b      	lsls	r3, r3, #1
10042632:	5cd3      	ldrb	r3, [r2, r3]
10042634:	0019      	movs	r1, r3
10042636:	4a1e      	ldr	r2, [pc, #120]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042638:	000b      	movs	r3, r1
1004263a:	005b      	lsls	r3, r3, #1
1004263c:	185b      	adds	r3, r3, r1
1004263e:	009b      	lsls	r3, r3, #2
10042640:	18d3      	adds	r3, r2, r3
10042642:	3301      	adds	r3, #1
10042644:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
10042646:	001d      	movs	r5, r3
							RxReq.data[RxReq.head].registersize,
10042648:	4a19      	ldr	r2, [pc, #100]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004264a:	23c0      	movs	r3, #192	@ 0xc0
1004264c:	005b      	lsls	r3, r3, #1
1004264e:	5cd3      	ldrb	r3, [r2, r3]
10042650:	0019      	movs	r1, r3
10042652:	4a17      	ldr	r2, [pc, #92]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042654:	000b      	movs	r3, r1
10042656:	005b      	lsls	r3, r3, #1
10042658:	185b      	adds	r3, r3, r1
1004265a:	009b      	lsls	r3, r3, #2
1004265c:	18d3      	adds	r3, r2, r3
1004265e:	3302      	adds	r3, #2
10042660:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
10042662:	001e      	movs	r6, r3
							RxReq.data[RxReq.head].data,
10042664:	4a12      	ldr	r2, [pc, #72]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042666:	23c0      	movs	r3, #192	@ 0xc0
10042668:	005b      	lsls	r3, r3, #1
1004266a:	5cd3      	ldrb	r3, [r2, r3]
1004266c:	001a      	movs	r2, r3
1004266e:	0013      	movs	r3, r2
10042670:	005b      	lsls	r3, r3, #1
10042672:	189b      	adds	r3, r3, r2
10042674:	009b      	lsls	r3, r3, #2
10042676:	3308      	adds	r3, #8
10042678:	001a      	movs	r2, r3
1004267a:	4b0d      	ldr	r3, [pc, #52]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004267c:	18d2      	adds	r2, r2, r3
							RxReq.data[RxReq.head].registersize);
1004267e:	490c      	ldr	r1, [pc, #48]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
10042680:	23c0      	movs	r3, #192	@ 0xc0
10042682:	005b      	lsls	r3, r3, #1
10042684:	5ccb      	ldrb	r3, [r1, r3]
10042686:	0018      	movs	r0, r3
10042688:	4909      	ldr	r1, [pc, #36]	@ (100426b0 <HAL_I2C_MemRxCpltCallback+0x200>)
1004268a:	0003      	movs	r3, r0
1004268c:	005b      	lsls	r3, r3, #1
1004268e:	181b      	adds	r3, r3, r0
10042690:	009b      	lsls	r3, r3, #2
10042692:	18cb      	adds	r3, r1, r3
10042694:	3302      	adds	r3, #2
10042696:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
10042698:	4806      	ldr	r0, [pc, #24]	@ (100426b4 <HAL_I2C_MemRxCpltCallback+0x204>)
1004269a:	9301      	str	r3, [sp, #4]
1004269c:	9200      	str	r2, [sp, #0]
1004269e:	0033      	movs	r3, r6
100426a0:	002a      	movs	r2, r5
100426a2:	0021      	movs	r1, r4
100426a4:	f002 ffce 	bl	10045644 <HAL_I2C_Mem_Read_IT>
	}
}
100426a8:	46c0      	nop			@ (mov r8, r8)
100426aa:	46bd      	mov	sp, r7
100426ac:	b005      	add	sp, #20
100426ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100426b0:	20000310 	.word	0x20000310
100426b4:	200002bc 	.word	0x200002bc

100426b8 <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
100426b8:	b580      	push	{r7, lr}
100426ba:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
100426bc:	4b09      	ldr	r3, [pc, #36]	@ (100426e4 <I2C1_IRQHandler+0x2c>)
100426be:	681b      	ldr	r3, [r3, #0]
100426c0:	699a      	ldr	r2, [r3, #24]
100426c2:	23e0      	movs	r3, #224	@ 0xe0
100426c4:	00db      	lsls	r3, r3, #3
100426c6:	4013      	ands	r3, r2
100426c8:	d004      	beq.n	100426d4 <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);
100426ca:	4b06      	ldr	r3, [pc, #24]	@ (100426e4 <I2C1_IRQHandler+0x2c>)
100426cc:	0018      	movs	r0, r3
100426ce:	f003 f871 	bl	100457b4 <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);
	}
}
100426d2:	e003      	b.n	100426dc <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);
100426d4:	4b03      	ldr	r3, [pc, #12]	@ (100426e4 <I2C1_IRQHandler+0x2c>)
100426d6:	0018      	movs	r0, r3
100426d8:	f003 f852 	bl	10045780 <HAL_I2C_EV_IRQHandler>
}
100426dc:	46c0      	nop			@ (mov r8, r8)
100426de:	46bd      	mov	sp, r7
100426e0:	bd80      	pop	{r7, pc}
100426e2:	46c0      	nop			@ (mov r8, r8)
100426e4:	200002bc 	.word	0x200002bc

100426e8 <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
100426e8:	b580      	push	{r7, lr}
100426ea:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100426ec:	4b38      	ldr	r3, [pc, #224]	@ (100427d0 <I2C_Init+0xe8>)
100426ee:	781b      	ldrb	r3, [r3, #0]
100426f0:	2b00      	cmp	r3, #0
100426f2:	d001      	beq.n	100426f8 <I2C_Init+0x10>
100426f4:	2301      	movs	r3, #1
100426f6:	e067      	b.n	100427c8 <I2C_Init+0xe0>
	hi2c1.Instance = I2C1;
100426f8:	4b36      	ldr	r3, [pc, #216]	@ (100427d4 <I2C_Init+0xec>)
100426fa:	2282      	movs	r2, #130	@ 0x82
100426fc:	05d2      	lsls	r2, r2, #23
100426fe:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
10042700:	4b34      	ldr	r3, [pc, #208]	@ (100427d4 <I2C_Init+0xec>)
10042702:	4a35      	ldr	r2, [pc, #212]	@ (100427d8 <I2C_Init+0xf0>)
10042704:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
10042706:	4b33      	ldr	r3, [pc, #204]	@ (100427d4 <I2C_Init+0xec>)
10042708:	2200      	movs	r2, #0
1004270a:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
1004270c:	4b31      	ldr	r3, [pc, #196]	@ (100427d4 <I2C_Init+0xec>)
1004270e:	2201      	movs	r2, #1
10042710:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
10042712:	4b30      	ldr	r3, [pc, #192]	@ (100427d4 <I2C_Init+0xec>)
10042714:	2200      	movs	r2, #0
10042716:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
10042718:	4b2e      	ldr	r3, [pc, #184]	@ (100427d4 <I2C_Init+0xec>)
1004271a:	2200      	movs	r2, #0
1004271c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
1004271e:	4b2d      	ldr	r3, [pc, #180]	@ (100427d4 <I2C_Init+0xec>)
10042720:	2200      	movs	r2, #0
10042722:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10042724:	4b2b      	ldr	r3, [pc, #172]	@ (100427d4 <I2C_Init+0xec>)
10042726:	2200      	movs	r2, #0
10042728:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
1004272a:	4b2a      	ldr	r3, [pc, #168]	@ (100427d4 <I2C_Init+0xec>)
1004272c:	2200      	movs	r2, #0
1004272e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
10042730:	4b28      	ldr	r3, [pc, #160]	@ (100427d4 <I2C_Init+0xec>)
10042732:	0018      	movs	r0, r3
10042734:	f002 fe3e 	bl	100453b4 <HAL_I2C_Init>
10042738:	1e03      	subs	r3, r0, #0
1004273a:	d001      	beq.n	10042740 <I2C_Init+0x58>
	{
		return INIT_ERROR;
1004273c:	2300      	movs	r3, #0
1004273e:	e043      	b.n	100427c8 <I2C_Init+0xe0>
	}

	// Configure Analog filter
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
10042740:	4b24      	ldr	r3, [pc, #144]	@ (100427d4 <I2C_Init+0xec>)
10042742:	2100      	movs	r1, #0
10042744:	0018      	movs	r0, r3
10042746:	f004 fd0d 	bl	10047164 <HAL_I2CEx_ConfigAnalogFilter>
1004274a:	1e03      	subs	r3, r0, #0
1004274c:	d001      	beq.n	10042752 <I2C_Init+0x6a>
	{
		return INIT_ERROR;
1004274e:	2300      	movs	r3, #0
10042750:	e03a      	b.n	100427c8 <I2C_Init+0xe0>
	}

	// Configure Digital filter
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
10042752:	4b20      	ldr	r3, [pc, #128]	@ (100427d4 <I2C_Init+0xec>)
10042754:	2100      	movs	r1, #0
10042756:	0018      	movs	r0, r3
10042758:	f004 fd50 	bl	100471fc <HAL_I2CEx_ConfigDigitalFilter>
1004275c:	1e03      	subs	r3, r0, #0
1004275e:	d001      	beq.n	10042764 <I2C_Init+0x7c>
	{
		return INIT_ERROR;
10042760:	2300      	movs	r3, #0
10042762:	e031      	b.n	100427c8 <I2C_Init+0xe0>
	}
	//set up circular buffers
	RxReq.full = false;
10042764:	4a1d      	ldr	r2, [pc, #116]	@ (100427dc <I2C_Init+0xf4>)
10042766:	23c1      	movs	r3, #193	@ 0xc1
10042768:	005b      	lsls	r3, r3, #1
1004276a:	2100      	movs	r1, #0
1004276c:	54d1      	strb	r1, [r2, r3]
	RxReq.tail = 0;
1004276e:	4a1b      	ldr	r2, [pc, #108]	@ (100427dc <I2C_Init+0xf4>)
10042770:	2382      	movs	r3, #130	@ 0x82
10042772:	33ff      	adds	r3, #255	@ 0xff
10042774:	2100      	movs	r1, #0
10042776:	54d1      	strb	r1, [r2, r3]
	RxReq.head = 0;
10042778:	4a18      	ldr	r2, [pc, #96]	@ (100427dc <I2C_Init+0xf4>)
1004277a:	23c0      	movs	r3, #192	@ 0xc0
1004277c:	005b      	lsls	r3, r3, #1
1004277e:	2100      	movs	r1, #0
10042780:	54d1      	strb	r1, [r2, r3]

	TxReq.full = false;
10042782:	4a17      	ldr	r2, [pc, #92]	@ (100427e0 <I2C_Init+0xf8>)
10042784:	23c1      	movs	r3, #193	@ 0xc1
10042786:	005b      	lsls	r3, r3, #1
10042788:	2100      	movs	r1, #0
1004278a:	54d1      	strb	r1, [r2, r3]
	TxReq.tail = 0;
1004278c:	4a14      	ldr	r2, [pc, #80]	@ (100427e0 <I2C_Init+0xf8>)
1004278e:	2382      	movs	r3, #130	@ 0x82
10042790:	33ff      	adds	r3, #255	@ 0xff
10042792:	2100      	movs	r1, #0
10042794:	54d1      	strb	r1, [r2, r3]
	TxReq.head = 0;
10042796:	4a12      	ldr	r2, [pc, #72]	@ (100427e0 <I2C_Init+0xf8>)
10042798:	23c0      	movs	r3, #192	@ 0xc0
1004279a:	005b      	lsls	r3, r3, #1
1004279c:	2100      	movs	r1, #0
1004279e:	54d1      	strb	r1, [r2, r3]
	initialized = 1;
100427a0:	4b0b      	ldr	r3, [pc, #44]	@ (100427d0 <I2C_Init+0xe8>)
100427a2:	2201      	movs	r2, #1
100427a4:	701a      	strb	r2, [r3, #0]
	//enables interrupts
	//hi2c1.Instance->CR1 = hi2c1.Instance->CR1 | I2C_CR1_RXIE_Msk | I2C_CR1_TXIE_Msk;
	__HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_RXI);
100427a6:	4b0b      	ldr	r3, [pc, #44]	@ (100427d4 <I2C_Init+0xec>)
100427a8:	681b      	ldr	r3, [r3, #0]
100427aa:	681a      	ldr	r2, [r3, #0]
100427ac:	4b09      	ldr	r3, [pc, #36]	@ (100427d4 <I2C_Init+0xec>)
100427ae:	681b      	ldr	r3, [r3, #0]
100427b0:	2104      	movs	r1, #4
100427b2:	430a      	orrs	r2, r1
100427b4:	601a      	str	r2, [r3, #0]
	__HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_TXI);
100427b6:	4b07      	ldr	r3, [pc, #28]	@ (100427d4 <I2C_Init+0xec>)
100427b8:	681b      	ldr	r3, [r3, #0]
100427ba:	681a      	ldr	r2, [r3, #0]
100427bc:	4b05      	ldr	r3, [pc, #20]	@ (100427d4 <I2C_Init+0xec>)
100427be:	681b      	ldr	r3, [r3, #0]
100427c0:	2102      	movs	r1, #2
100427c2:	430a      	orrs	r2, r1
100427c4:	601a      	str	r2, [r3, #0]
	return INIT_OK;
100427c6:	2301      	movs	r3, #1
}
100427c8:	0018      	movs	r0, r3
100427ca:	46bd      	mov	sp, r7
100427cc:	bd80      	pop	{r7, pc}
100427ce:	46c0      	nop			@ (mov r8, r8)
100427d0:	20000618 	.word	0x20000618
100427d4:	200002bc 	.word	0x200002bc
100427d8:	00303d5b 	.word	0x00303d5b
100427dc:	20000310 	.word	0x20000310
100427e0:	20000494 	.word	0x20000494

100427e4 <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr,void (*PostTo)(Event_t)){
100427e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100427e6:	b089      	sub	sp, #36	@ 0x24
100427e8:	af02      	add	r7, sp, #8
100427ea:	603a      	str	r2, [r7, #0]
100427ec:	1dfb      	adds	r3, r7, #7
100427ee:	1c02      	adds	r2, r0, #0
100427f0:	701a      	strb	r2, [r3, #0]
100427f2:	1dbb      	adds	r3, r7, #6
100427f4:	1c0a      	adds	r2, r1, #0
100427f6:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
100427f8:	4b6b      	ldr	r3, [pc, #428]	@ (100429a8 <I2C_Recieve+0x1c4>)
100427fa:	781b      	ldrb	r3, [r3, #0]
100427fc:	2b00      	cmp	r3, #0
100427fe:	d101      	bne.n	10042804 <I2C_Recieve+0x20>
10042800:	2301      	movs	r3, #1
10042802:	e0cd      	b.n	100429a0 <I2C_Recieve+0x1bc>
	HAL_StatusTypeDef status = HAL_OK;
10042804:	2317      	movs	r3, #23
10042806:	18fb      	adds	r3, r7, r3
10042808:	2200      	movs	r2, #0
1004280a:	701a      	strb	r2, [r3, #0]
	//will not attempt to receive if the buffer is full
	if(RxReq.full){
1004280c:	4a67      	ldr	r2, [pc, #412]	@ (100429ac <I2C_Recieve+0x1c8>)
1004280e:	23c1      	movs	r3, #193	@ 0xc1
10042810:	005b      	lsls	r3, r3, #1
10042812:	5cd3      	ldrb	r3, [r2, r3]
10042814:	2b00      	cmp	r3, #0
10042816:	d001      	beq.n	1004281c <I2C_Recieve+0x38>
		return HAL_ERROR;
10042818:	2301      	movs	r3, #1
1004281a:	e0c1      	b.n	100429a0 <I2C_Recieve+0x1bc>
	}

	//place the receive request into the buffer
	MemReq_t Post;
	Post.targetadr = targetadr;
1004281c:	2008      	movs	r0, #8
1004281e:	183b      	adds	r3, r7, r0
10042820:	1dfa      	adds	r2, r7, #7
10042822:	7812      	ldrb	r2, [r2, #0]
10042824:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
10042826:	183b      	adds	r3, r7, r0
10042828:	1dba      	adds	r2, r7, #6
1004282a:	7812      	ldrb	r2, [r2, #0]
1004282c:	705a      	strb	r2, [r3, #1]
	Post.registersize = 1;
1004282e:	183b      	adds	r3, r7, r0
10042830:	2201      	movs	r2, #1
10042832:	709a      	strb	r2, [r3, #2]
	Post.PostTo = PostTo;
10042834:	183b      	adds	r3, r7, r0
10042836:	683a      	ldr	r2, [r7, #0]
10042838:	605a      	str	r2, [r3, #4]
	RxReq.data[RxReq.tail] = Post;
1004283a:	4a5c      	ldr	r2, [pc, #368]	@ (100429ac <I2C_Recieve+0x1c8>)
1004283c:	2382      	movs	r3, #130	@ 0x82
1004283e:	33ff      	adds	r3, #255	@ 0xff
10042840:	5cd3      	ldrb	r3, [r2, r3]
10042842:	0019      	movs	r1, r3
10042844:	4a59      	ldr	r2, [pc, #356]	@ (100429ac <I2C_Recieve+0x1c8>)
10042846:	000b      	movs	r3, r1
10042848:	005b      	lsls	r3, r3, #1
1004284a:	185b      	adds	r3, r3, r1
1004284c:	009b      	lsls	r3, r3, #2
1004284e:	1839      	adds	r1, r7, r0
10042850:	18d3      	adds	r3, r2, r3
10042852:	000a      	movs	r2, r1
10042854:	ca13      	ldmia	r2!, {r0, r1, r4}
10042856:	c313      	stmia	r3!, {r0, r1, r4}
	RxReq.tail++;
10042858:	4a54      	ldr	r2, [pc, #336]	@ (100429ac <I2C_Recieve+0x1c8>)
1004285a:	2382      	movs	r3, #130	@ 0x82
1004285c:	33ff      	adds	r3, #255	@ 0xff
1004285e:	5cd3      	ldrb	r3, [r2, r3]
10042860:	3301      	adds	r3, #1
10042862:	b2d9      	uxtb	r1, r3
10042864:	4a51      	ldr	r2, [pc, #324]	@ (100429ac <I2C_Recieve+0x1c8>)
10042866:	2382      	movs	r3, #130	@ 0x82
10042868:	33ff      	adds	r3, #255	@ 0xff
1004286a:	54d1      	strb	r1, [r2, r3]
	RxReq.tail %= CIRCBUFFERSIZE;
1004286c:	4a4f      	ldr	r2, [pc, #316]	@ (100429ac <I2C_Recieve+0x1c8>)
1004286e:	2382      	movs	r3, #130	@ 0x82
10042870:	33ff      	adds	r3, #255	@ 0xff
10042872:	5cd3      	ldrb	r3, [r2, r3]
10042874:	221f      	movs	r2, #31
10042876:	4013      	ands	r3, r2
10042878:	b2d9      	uxtb	r1, r3
1004287a:	4a4c      	ldr	r2, [pc, #304]	@ (100429ac <I2C_Recieve+0x1c8>)
1004287c:	2382      	movs	r3, #130	@ 0x82
1004287e:	33ff      	adds	r3, #255	@ 0xff
10042880:	54d1      	strb	r1, [r2, r3]
	if(RxReq.tail == RxReq.head){
10042882:	4a4a      	ldr	r2, [pc, #296]	@ (100429ac <I2C_Recieve+0x1c8>)
10042884:	2382      	movs	r3, #130	@ 0x82
10042886:	33ff      	adds	r3, #255	@ 0xff
10042888:	5cd2      	ldrb	r2, [r2, r3]
1004288a:	4948      	ldr	r1, [pc, #288]	@ (100429ac <I2C_Recieve+0x1c8>)
1004288c:	23c0      	movs	r3, #192	@ 0xc0
1004288e:	005b      	lsls	r3, r3, #1
10042890:	5ccb      	ldrb	r3, [r1, r3]
10042892:	429a      	cmp	r2, r3
10042894:	d104      	bne.n	100428a0 <I2C_Recieve+0xbc>
		RxReq.full = true;
10042896:	4a45      	ldr	r2, [pc, #276]	@ (100429ac <I2C_Recieve+0x1c8>)
10042898:	23c1      	movs	r3, #193	@ 0xc1
1004289a:	005b      	lsls	r3, r3, #1
1004289c:	2101      	movs	r1, #1
1004289e:	54d1      	strb	r1, [r2, r3]
	}
	if((RxReq.head+1)%CIRCBUFFERSIZE == RxReq.tail){//if the buffer was empty
100428a0:	4a42      	ldr	r2, [pc, #264]	@ (100429ac <I2C_Recieve+0x1c8>)
100428a2:	23c0      	movs	r3, #192	@ 0xc0
100428a4:	005b      	lsls	r3, r3, #1
100428a6:	5cd3      	ldrb	r3, [r2, r3]
100428a8:	3301      	adds	r3, #1
100428aa:	4a41      	ldr	r2, [pc, #260]	@ (100429b0 <I2C_Recieve+0x1cc>)
100428ac:	4013      	ands	r3, r2
100428ae:	d504      	bpl.n	100428ba <I2C_Recieve+0xd6>
100428b0:	3b01      	subs	r3, #1
100428b2:	2220      	movs	r2, #32
100428b4:	4252      	negs	r2, r2
100428b6:	4313      	orrs	r3, r2
100428b8:	3301      	adds	r3, #1
100428ba:	0019      	movs	r1, r3
100428bc:	4a3b      	ldr	r2, [pc, #236]	@ (100429ac <I2C_Recieve+0x1c8>)
100428be:	2382      	movs	r3, #130	@ 0x82
100428c0:	33ff      	adds	r3, #255	@ 0xff
100428c2:	5cd3      	ldrb	r3, [r2, r3]
100428c4:	4299      	cmp	r1, r3
100428c6:	d168      	bne.n	1004299a <I2C_Recieve+0x1b6>
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
							RxReq.data[RxReq.head].targetadr<<1,
100428c8:	4a38      	ldr	r2, [pc, #224]	@ (100429ac <I2C_Recieve+0x1c8>)
100428ca:	23c0      	movs	r3, #192	@ 0xc0
100428cc:	005b      	lsls	r3, r3, #1
100428ce:	5cd3      	ldrb	r3, [r2, r3]
100428d0:	0019      	movs	r1, r3
100428d2:	4a36      	ldr	r2, [pc, #216]	@ (100429ac <I2C_Recieve+0x1c8>)
100428d4:	000b      	movs	r3, r1
100428d6:	005b      	lsls	r3, r3, #1
100428d8:	185b      	adds	r3, r3, r1
100428da:	009b      	lsls	r3, r3, #2
100428dc:	5c9b      	ldrb	r3, [r3, r2]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
100428de:	18db      	adds	r3, r3, r3
100428e0:	b29d      	uxth	r5, r3
							RxReq.data[RxReq.head].registeradr,
100428e2:	4a32      	ldr	r2, [pc, #200]	@ (100429ac <I2C_Recieve+0x1c8>)
100428e4:	23c0      	movs	r3, #192	@ 0xc0
100428e6:	005b      	lsls	r3, r3, #1
100428e8:	5cd3      	ldrb	r3, [r2, r3]
100428ea:	0019      	movs	r1, r3
100428ec:	4a2f      	ldr	r2, [pc, #188]	@ (100429ac <I2C_Recieve+0x1c8>)
100428ee:	000b      	movs	r3, r1
100428f0:	005b      	lsls	r3, r3, #1
100428f2:	185b      	adds	r3, r3, r1
100428f4:	009b      	lsls	r3, r3, #2
100428f6:	18d3      	adds	r3, r2, r3
100428f8:	3301      	adds	r3, #1
100428fa:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
100428fc:	001e      	movs	r6, r3
							RxReq.data[RxReq.head].registersize,
100428fe:	4a2b      	ldr	r2, [pc, #172]	@ (100429ac <I2C_Recieve+0x1c8>)
10042900:	23c0      	movs	r3, #192	@ 0xc0
10042902:	005b      	lsls	r3, r3, #1
10042904:	5cd3      	ldrb	r3, [r2, r3]
10042906:	0019      	movs	r1, r3
10042908:	4a28      	ldr	r2, [pc, #160]	@ (100429ac <I2C_Recieve+0x1c8>)
1004290a:	000b      	movs	r3, r1
1004290c:	005b      	lsls	r3, r3, #1
1004290e:	185b      	adds	r3, r3, r1
10042910:	009b      	lsls	r3, r3, #2
10042912:	18d3      	adds	r3, r2, r3
10042914:	3302      	adds	r3, #2
10042916:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
10042918:	469c      	mov	ip, r3
							RxReq.data[RxReq.head].data,
1004291a:	4a24      	ldr	r2, [pc, #144]	@ (100429ac <I2C_Recieve+0x1c8>)
1004291c:	23c0      	movs	r3, #192	@ 0xc0
1004291e:	005b      	lsls	r3, r3, #1
10042920:	5cd3      	ldrb	r3, [r2, r3]
10042922:	001a      	movs	r2, r3
10042924:	0013      	movs	r3, r2
10042926:	005b      	lsls	r3, r3, #1
10042928:	189b      	adds	r3, r3, r2
1004292a:	009b      	lsls	r3, r3, #2
1004292c:	3308      	adds	r3, #8
1004292e:	001a      	movs	r2, r3
10042930:	4b1e      	ldr	r3, [pc, #120]	@ (100429ac <I2C_Recieve+0x1c8>)
10042932:	18d2      	adds	r2, r2, r3
							RxReq.data[RxReq.head].registersize);
10042934:	491d      	ldr	r1, [pc, #116]	@ (100429ac <I2C_Recieve+0x1c8>)
10042936:	23c0      	movs	r3, #192	@ 0xc0
10042938:	005b      	lsls	r3, r3, #1
1004293a:	5ccb      	ldrb	r3, [r1, r3]
1004293c:	0018      	movs	r0, r3
1004293e:	491b      	ldr	r1, [pc, #108]	@ (100429ac <I2C_Recieve+0x1c8>)
10042940:	0003      	movs	r3, r0
10042942:	005b      	lsls	r3, r3, #1
10042944:	181b      	adds	r3, r3, r0
10042946:	009b      	lsls	r3, r3, #2
10042948:	18cb      	adds	r3, r1, r3
1004294a:	3302      	adds	r3, #2
1004294c:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
1004294e:	2117      	movs	r1, #23
10042950:	187c      	adds	r4, r7, r1
10042952:	4818      	ldr	r0, [pc, #96]	@ (100429b4 <I2C_Recieve+0x1d0>)
10042954:	9301      	str	r3, [sp, #4]
10042956:	9200      	str	r2, [sp, #0]
10042958:	4663      	mov	r3, ip
1004295a:	0032      	movs	r2, r6
1004295c:	0029      	movs	r1, r5
1004295e:	f002 fe71 	bl	10045644 <HAL_I2C_Mem_Read_IT>
10042962:	0003      	movs	r3, r0
10042964:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){
10042966:	2117      	movs	r1, #23
10042968:	187b      	adds	r3, r7, r1
1004296a:	781b      	ldrb	r3, [r3, #0]
1004296c:	2b00      	cmp	r3, #0
1004296e:	d014      	beq.n	1004299a <I2C_Recieve+0x1b6>
			RxReq.tail--;
10042970:	4a0e      	ldr	r2, [pc, #56]	@ (100429ac <I2C_Recieve+0x1c8>)
10042972:	2382      	movs	r3, #130	@ 0x82
10042974:	33ff      	adds	r3, #255	@ 0xff
10042976:	5cd3      	ldrb	r3, [r2, r3]
10042978:	3b01      	subs	r3, #1
1004297a:	b2d9      	uxtb	r1, r3
1004297c:	4a0b      	ldr	r2, [pc, #44]	@ (100429ac <I2C_Recieve+0x1c8>)
1004297e:	2382      	movs	r3, #130	@ 0x82
10042980:	33ff      	adds	r3, #255	@ 0xff
10042982:	54d1      	strb	r1, [r2, r3]
			RxReq.tail %= CIRCBUFFERSIZE;
10042984:	4a09      	ldr	r2, [pc, #36]	@ (100429ac <I2C_Recieve+0x1c8>)
10042986:	2382      	movs	r3, #130	@ 0x82
10042988:	33ff      	adds	r3, #255	@ 0xff
1004298a:	5cd3      	ldrb	r3, [r2, r3]
1004298c:	221f      	movs	r2, #31
1004298e:	4013      	ands	r3, r2
10042990:	b2d9      	uxtb	r1, r3
10042992:	4a06      	ldr	r2, [pc, #24]	@ (100429ac <I2C_Recieve+0x1c8>)
10042994:	2382      	movs	r3, #130	@ 0x82
10042996:	33ff      	adds	r3, #255	@ 0xff
10042998:	54d1      	strb	r1, [r2, r3]
		}
	}
	return status;
1004299a:	2317      	movs	r3, #23
1004299c:	18fb      	adds	r3, r7, r3
1004299e:	781b      	ldrb	r3, [r3, #0]

}
100429a0:	0018      	movs	r0, r3
100429a2:	46bd      	mov	sp, r7
100429a4:	b007      	add	sp, #28
100429a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100429a8:	20000618 	.word	0x20000618
100429ac:	20000310 	.word	0x20000310
100429b0:	8000001f 	.word	0x8000001f
100429b4:	200002bc 	.word	0x200002bc

100429b8 <MP3_SendData>:
static float volume;
static uint32_t starttime;
static uint32_t inittime;
static uint8_t initialized;
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
100429b8:	b590      	push	{r4, r7, lr}
100429ba:	b085      	sub	sp, #20
100429bc:	af00      	add	r7, sp, #0
100429be:	6078      	str	r0, [r7, #4]
	uint8_t accumulation = 0;
100429c0:	240f      	movs	r4, #15
100429c2:	193b      	adds	r3, r7, r4
100429c4:	2200      	movs	r2, #0
100429c6:	701a      	strb	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
100429c8:	207e      	movs	r0, #126	@ 0x7e
100429ca:	f000 fec1 	bl	10043750 <LPUART_WriteTx>
	accumulation += 0xFF;
100429ce:	193b      	adds	r3, r7, r4
100429d0:	193a      	adds	r2, r7, r4
100429d2:	7812      	ldrb	r2, [r2, #0]
100429d4:	3a01      	subs	r2, #1
100429d6:	701a      	strb	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
100429d8:	20ff      	movs	r0, #255	@ 0xff
100429da:	f000 feb9 	bl	10043750 <LPUART_WriteTx>
	accumulation += 0x06;
100429de:	193b      	adds	r3, r7, r4
100429e0:	193a      	adds	r2, r7, r4
100429e2:	7812      	ldrb	r2, [r2, #0]
100429e4:	3206      	adds	r2, #6
100429e6:	701a      	strb	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
100429e8:	2006      	movs	r0, #6
100429ea:	f000 feb1 	bl	10043750 <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
100429ee:	2300      	movs	r3, #0
100429f0:	60bb      	str	r3, [r7, #8]
100429f2:	e013      	b.n	10042a1c <MP3_SendData+0x64>
		accumulation += string[i];
100429f4:	68bb      	ldr	r3, [r7, #8]
100429f6:	687a      	ldr	r2, [r7, #4]
100429f8:	18d3      	adds	r3, r2, r3
100429fa:	7819      	ldrb	r1, [r3, #0]
100429fc:	220f      	movs	r2, #15
100429fe:	18bb      	adds	r3, r7, r2
10042a00:	18ba      	adds	r2, r7, r2
10042a02:	7812      	ldrb	r2, [r2, #0]
10042a04:	188a      	adds	r2, r1, r2
10042a06:	701a      	strb	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
10042a08:	68bb      	ldr	r3, [r7, #8]
10042a0a:	687a      	ldr	r2, [r7, #4]
10042a0c:	18d3      	adds	r3, r2, r3
10042a0e:	781b      	ldrb	r3, [r3, #0]
10042a10:	0018      	movs	r0, r3
10042a12:	f000 fe9d 	bl	10043750 <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
10042a16:	68bb      	ldr	r3, [r7, #8]
10042a18:	3301      	adds	r3, #1
10042a1a:	60bb      	str	r3, [r7, #8]
10042a1c:	68bb      	ldr	r3, [r7, #8]
10042a1e:	2b03      	cmp	r3, #3
10042a20:	dde8      	ble.n	100429f4 <MP3_SendData+0x3c>
	}
	LPUART_WriteTx(accumulation);//checksum
10042a22:	230f      	movs	r3, #15
10042a24:	18fb      	adds	r3, r7, r3
10042a26:	781b      	ldrb	r3, [r3, #0]
10042a28:	0018      	movs	r0, r3
10042a2a:	f000 fe91 	bl	10043750 <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
10042a2e:	20ef      	movs	r0, #239	@ 0xef
10042a30:	f000 fe8e 	bl	10043750 <LPUART_WriteTx>

}
10042a34:	46c0      	nop			@ (mov r8, r8)
10042a36:	46bd      	mov	sp, r7
10042a38:	b005      	add	sp, #20
10042a3a:	bd90      	pop	{r4, r7, pc}

10042a3c <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
10042a3c:	b580      	push	{r7, lr}
10042a3e:	b082      	sub	sp, #8
10042a40:	af00      	add	r7, sp, #0
10042a42:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
10042a44:	4b1b      	ldr	r3, [pc, #108]	@ (10042ab4 <MP3_Event_Init+0x78>)
10042a46:	687a      	ldr	r2, [r7, #4]
10042a48:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
10042a4a:	f000 fc81 	bl	10043350 <TIMERS_Init>
    play = 1;
10042a4e:	4b1a      	ldr	r3, [pc, #104]	@ (10042ab8 <MP3_Event_Init+0x7c>)
10042a50:	2201      	movs	r2, #1
10042a52:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
10042a54:	f7ff fa4c 	bl	10041ef0 <FLASH_GetDutyCycle>
10042a58:	0003      	movs	r3, r0
10042a5a:	2164      	movs	r1, #100	@ 0x64
10042a5c:	0018      	movs	r0, r3
10042a5e:	f7fd fbef 	bl	10040240 <__udivsi3>
10042a62:	0003      	movs	r3, r0
10042a64:	b2db      	uxtb	r3, r3
10042a66:	0018      	movs	r0, r3
10042a68:	f7fe fb8c 	bl	10041184 <__aeabi_i2f>
10042a6c:	1c02      	adds	r2, r0, #0
10042a6e:	4b13      	ldr	r3, [pc, #76]	@ (10042abc <MP3_Event_Init+0x80>)
10042a70:	601a      	str	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
10042a72:	f7ff fa2b 	bl	10041ecc <FLASH_GetVolume>
10042a76:	0003      	movs	r3, r0
10042a78:	2164      	movs	r1, #100	@ 0x64
10042a7a:	0018      	movs	r0, r3
10042a7c:	f7fd fbe0 	bl	10040240 <__udivsi3>
10042a80:	0003      	movs	r3, r0
10042a82:	b2db      	uxtb	r3, r3
10042a84:	0018      	movs	r0, r3
10042a86:	f7fe fb7d 	bl	10041184 <__aeabi_i2f>
10042a8a:	1c02      	adds	r2, r0, #0
10042a8c:	4b0c      	ldr	r3, [pc, #48]	@ (10042ac0 <MP3_Event_Init+0x84>)
10042a8e:	601a      	str	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
10042a90:	f000 fcaa 	bl	100433e8 <TIMERS_GetMilliSeconds>
10042a94:	0002      	movs	r2, r0
10042a96:	4b0b      	ldr	r3, [pc, #44]	@ (10042ac4 <MP3_Event_Init+0x88>)
10042a98:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
10042a9a:	f000 fca5 	bl	100433e8 <TIMERS_GetMilliSeconds>
10042a9e:	0002      	movs	r2, r0
10042aa0:	4b09      	ldr	r3, [pc, #36]	@ (10042ac8 <MP3_Event_Init+0x8c>)
10042aa2:	601a      	str	r2, [r3, #0]
    initialized = 0;
10042aa4:	4b09      	ldr	r3, [pc, #36]	@ (10042acc <MP3_Event_Init+0x90>)
10042aa6:	2200      	movs	r2, #0
10042aa8:	701a      	strb	r2, [r3, #0]
    return INIT_OK;
10042aaa:	2301      	movs	r3, #1
}
10042aac:	0018      	movs	r0, r3
10042aae:	46bd      	mov	sp, r7
10042ab0:	b002      	add	sp, #8
10042ab2:	bd80      	pop	{r7, pc}
10042ab4:	2000061c 	.word	0x2000061c
10042ab8:	20000620 	.word	0x20000620
10042abc:	20000624 	.word	0x20000624
10042ac0:	20000628 	.word	0x20000628
10042ac4:	2000062c 	.word	0x2000062c
10042ac8:	20000630 	.word	0x20000630
10042acc:	20000634 	.word	0x20000634

10042ad0 <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
10042ad0:	b580      	push	{r7, lr}
10042ad2:	b082      	sub	sp, #8
10042ad4:	af00      	add	r7, sp, #0
10042ad6:	1d3b      	adds	r3, r7, #4
10042ad8:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(MP3queue, event);
10042ada:	4b05      	ldr	r3, [pc, #20]	@ (10042af0 <MP3_Event_Post+0x20>)
10042adc:	681a      	ldr	r2, [r3, #0]
10042ade:	1d3b      	adds	r3, r7, #4
10042ae0:	6819      	ldr	r1, [r3, #0]
10042ae2:	0010      	movs	r0, r2
10042ae4:	f7ff f95d 	bl	10041da2 <FIFO_Enqueue>
}
10042ae8:	46c0      	nop			@ (mov r8, r8)
10042aea:	46bd      	mov	sp, r7
10042aec:	b002      	add	sp, #8
10042aee:	bd80      	pop	{r7, pc}
10042af0:	2000061c 	.word	0x2000061c

10042af4 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
10042af4:	b590      	push	{r4, r7, lr}
10042af6:	b085      	sub	sp, #20
10042af8:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
10042afa:	1d3b      	adds	r3, r7, #4
10042afc:	2200      	movs	r2, #0
10042afe:	701a      	strb	r2, [r3, #0]
10042b00:	1d3b      	adds	r3, r7, #4
10042b02:	2200      	movs	r2, #0
10042b04:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10042b06:	f000 fc6f 	bl	100433e8 <TIMERS_GetMilliSeconds>
10042b0a:	0003      	movs	r3, r0
10042b0c:	60fb      	str	r3, [r7, #12]
    if (play){
10042b0e:	4b68      	ldr	r3, [pc, #416]	@ (10042cb0 <MP3_Event_Updater+0x1bc>)
10042b10:	781b      	ldrb	r3, [r3, #0]
10042b12:	2b00      	cmp	r3, #0
10042b14:	d022      	beq.n	10042b5c <MP3_Event_Updater+0x68>
		if((timer-starttime) >= CYCLELENGTH*DC){//if the speaker is playing, and time is up
10042b16:	4b67      	ldr	r3, [pc, #412]	@ (10042cb4 <MP3_Event_Updater+0x1c0>)
10042b18:	681b      	ldr	r3, [r3, #0]
10042b1a:	68fa      	ldr	r2, [r7, #12]
10042b1c:	1ad3      	subs	r3, r2, r3
10042b1e:	0018      	movs	r0, r3
10042b20:	f7fe fb80 	bl	10041224 <__aeabi_ui2f>
10042b24:	1c04      	adds	r4, r0, #0
10042b26:	4b64      	ldr	r3, [pc, #400]	@ (10042cb8 <MP3_Event_Updater+0x1c4>)
10042b28:	681b      	ldr	r3, [r3, #0]
10042b2a:	4964      	ldr	r1, [pc, #400]	@ (10042cbc <MP3_Event_Updater+0x1c8>)
10042b2c:	1c18      	adds	r0, r3, #0
10042b2e:	f7fd ff4b 	bl	100409c8 <__aeabi_fmul>
10042b32:	1c03      	adds	r3, r0, #0
10042b34:	1c19      	adds	r1, r3, #0
10042b36:	1c20      	adds	r0, r4, #0
10042b38:	f7fd fd34 	bl	100405a4 <__aeabi_fcmpge>
10042b3c:	1e03      	subs	r3, r0, #0
10042b3e:	d03d      	beq.n	10042bbc <MP3_Event_Updater+0xc8>
			event.status = EVENT_TIMEOUT;
10042b40:	1d3b      	adds	r3, r7, #4
10042b42:	2209      	movs	r2, #9
10042b44:	701a      	strb	r2, [r3, #0]
			event.data = 0;//next state of play
10042b46:	1d3b      	adds	r3, r7, #4
10042b48:	2200      	movs	r2, #0
10042b4a:	805a      	strh	r2, [r3, #2]
			starttime = timer;
10042b4c:	4b59      	ldr	r3, [pc, #356]	@ (10042cb4 <MP3_Event_Updater+0x1c0>)
10042b4e:	68fa      	ldr	r2, [r7, #12]
10042b50:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
10042b52:	1d3b      	adds	r3, r7, #4
10042b54:	6818      	ldr	r0, [r3, #0]
10042b56:	f7ff ffbb 	bl	10042ad0 <MP3_Event_Post>
10042b5a:	e02f      	b.n	10042bbc <MP3_Event_Updater+0xc8>
		}
    } else {
		if(DC != 0 && ((timer-starttime) >= CYCLELENGTH*(1-DC))){// if the speaker is playing and time is up, DC = 0 don't play
10042b5c:	4b56      	ldr	r3, [pc, #344]	@ (10042cb8 <MP3_Event_Updater+0x1c4>)
10042b5e:	681b      	ldr	r3, [r3, #0]
10042b60:	2100      	movs	r1, #0
10042b62:	1c18      	adds	r0, r3, #0
10042b64:	f7fd fcfa 	bl	1004055c <__aeabi_fcmpeq>
10042b68:	1e03      	subs	r3, r0, #0
10042b6a:	d127      	bne.n	10042bbc <MP3_Event_Updater+0xc8>
10042b6c:	4b51      	ldr	r3, [pc, #324]	@ (10042cb4 <MP3_Event_Updater+0x1c0>)
10042b6e:	681b      	ldr	r3, [r3, #0]
10042b70:	68fa      	ldr	r2, [r7, #12]
10042b72:	1ad3      	subs	r3, r2, r3
10042b74:	0018      	movs	r0, r3
10042b76:	f7fe fb55 	bl	10041224 <__aeabi_ui2f>
10042b7a:	1c04      	adds	r4, r0, #0
10042b7c:	4b4e      	ldr	r3, [pc, #312]	@ (10042cb8 <MP3_Event_Updater+0x1c4>)
10042b7e:	681b      	ldr	r3, [r3, #0]
10042b80:	1c19      	adds	r1, r3, #0
10042b82:	20fe      	movs	r0, #254	@ 0xfe
10042b84:	0580      	lsls	r0, r0, #22
10042b86:	f7fe f879 	bl	10040c7c <__aeabi_fsub>
10042b8a:	1c03      	adds	r3, r0, #0
10042b8c:	494b      	ldr	r1, [pc, #300]	@ (10042cbc <MP3_Event_Updater+0x1c8>)
10042b8e:	1c18      	adds	r0, r3, #0
10042b90:	f7fd ff1a 	bl	100409c8 <__aeabi_fmul>
10042b94:	1c03      	adds	r3, r0, #0
10042b96:	1c19      	adds	r1, r3, #0
10042b98:	1c20      	adds	r0, r4, #0
10042b9a:	f7fd fd03 	bl	100405a4 <__aeabi_fcmpge>
10042b9e:	1e03      	subs	r3, r0, #0
10042ba0:	d00c      	beq.n	10042bbc <MP3_Event_Updater+0xc8>
			event.status = EVENT_TIMEOUT;
10042ba2:	1d3b      	adds	r3, r7, #4
10042ba4:	2209      	movs	r2, #9
10042ba6:	701a      	strb	r2, [r3, #0]
			event.data = 1;//next state of play
10042ba8:	1d3b      	adds	r3, r7, #4
10042baa:	2201      	movs	r2, #1
10042bac:	805a      	strh	r2, [r3, #2]
			starttime = timer;
10042bae:	4b41      	ldr	r3, [pc, #260]	@ (10042cb4 <MP3_Event_Updater+0x1c0>)
10042bb0:	68fa      	ldr	r2, [r7, #12]
10042bb2:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
10042bb4:	1d3b      	adds	r3, r7, #4
10042bb6:	6818      	ldr	r0, [r3, #0]
10042bb8:	f7ff ff8a 	bl	10042ad0 <MP3_Event_Post>
		}
    }
    if(((timer-inittime) >= 3000) && !initialized){//if the speaker is playing, and time is up
10042bbc:	4b40      	ldr	r3, [pc, #256]	@ (10042cc0 <MP3_Event_Updater+0x1cc>)
10042bbe:	681b      	ldr	r3, [r3, #0]
10042bc0:	68fa      	ldr	r2, [r7, #12]
10042bc2:	1ad3      	subs	r3, r2, r3
10042bc4:	4a3f      	ldr	r2, [pc, #252]	@ (10042cc4 <MP3_Event_Updater+0x1d0>)
10042bc6:	4293      	cmp	r3, r2
10042bc8:	d90d      	bls.n	10042be6 <MP3_Event_Updater+0xf2>
10042bca:	4b3f      	ldr	r3, [pc, #252]	@ (10042cc8 <MP3_Event_Updater+0x1d4>)
10042bcc:	781b      	ldrb	r3, [r3, #0]
10042bce:	2b00      	cmp	r3, #0
10042bd0:	d109      	bne.n	10042be6 <MP3_Event_Updater+0xf2>
		event.status = EVENT_INIT;
10042bd2:	1d3b      	adds	r3, r7, #4
10042bd4:	2201      	movs	r2, #1
10042bd6:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10042bd8:	1d3b      	adds	r3, r7, #4
10042bda:	2200      	movs	r2, #0
10042bdc:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10042bde:	1d3b      	adds	r3, r7, #4
10042be0:	6818      	ldr	r0, [r3, #0]
10042be2:	f7ff ff75 	bl	10042ad0 <MP3_Event_Post>
	}
    if(volume != FLASH_GetVolume()/100 || DC != FLASH_GetDutyCycle()/100){
10042be6:	f7ff f971 	bl	10041ecc <FLASH_GetVolume>
10042bea:	0003      	movs	r3, r0
10042bec:	2164      	movs	r1, #100	@ 0x64
10042bee:	0018      	movs	r0, r3
10042bf0:	f7fd fb26 	bl	10040240 <__udivsi3>
10042bf4:	0003      	movs	r3, r0
10042bf6:	b2db      	uxtb	r3, r3
10042bf8:	0018      	movs	r0, r3
10042bfa:	f7fe fac3 	bl	10041184 <__aeabi_i2f>
10042bfe:	1c02      	adds	r2, r0, #0
10042c00:	4b32      	ldr	r3, [pc, #200]	@ (10042ccc <MP3_Event_Updater+0x1d8>)
10042c02:	681b      	ldr	r3, [r3, #0]
10042c04:	1c19      	adds	r1, r3, #0
10042c06:	1c10      	adds	r0, r2, #0
10042c08:	f7fd fca8 	bl	1004055c <__aeabi_fcmpeq>
10042c0c:	1e03      	subs	r3, r0, #0
10042c0e:	d014      	beq.n	10042c3a <MP3_Event_Updater+0x146>
10042c10:	f7ff f96e 	bl	10041ef0 <FLASH_GetDutyCycle>
10042c14:	0003      	movs	r3, r0
10042c16:	2164      	movs	r1, #100	@ 0x64
10042c18:	0018      	movs	r0, r3
10042c1a:	f7fd fb11 	bl	10040240 <__udivsi3>
10042c1e:	0003      	movs	r3, r0
10042c20:	b2db      	uxtb	r3, r3
10042c22:	0018      	movs	r0, r3
10042c24:	f7fe faae 	bl	10041184 <__aeabi_i2f>
10042c28:	1c02      	adds	r2, r0, #0
10042c2a:	4b23      	ldr	r3, [pc, #140]	@ (10042cb8 <MP3_Event_Updater+0x1c4>)
10042c2c:	681b      	ldr	r3, [r3, #0]
10042c2e:	1c19      	adds	r1, r3, #0
10042c30:	1c10      	adds	r0, r2, #0
10042c32:	f7fd fc93 	bl	1004055c <__aeabi_fcmpeq>
10042c36:	1e03      	subs	r3, r0, #0
10042c38:	d123      	bne.n	10042c82 <MP3_Event_Updater+0x18e>
    	event.status = EVENT_SETTINGS;
10042c3a:	1d3b      	adds	r3, r7, #4
10042c3c:	220a      	movs	r2, #10
10042c3e:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume()/100);
10042c40:	f7ff f944 	bl	10041ecc <FLASH_GetVolume>
10042c44:	0003      	movs	r3, r0
10042c46:	2164      	movs	r1, #100	@ 0x64
10042c48:	0018      	movs	r0, r3
10042c4a:	f7fd faf9 	bl	10040240 <__udivsi3>
10042c4e:	0003      	movs	r3, r0
10042c50:	b2db      	uxtb	r3, r3
10042c52:	0018      	movs	r0, r3
10042c54:	f7fe fa96 	bl	10041184 <__aeabi_i2f>
10042c58:	1c02      	adds	r2, r0, #0
10042c5a:	4b1c      	ldr	r3, [pc, #112]	@ (10042ccc <MP3_Event_Updater+0x1d8>)
10042c5c:	681b      	ldr	r3, [r3, #0]
10042c5e:	2101      	movs	r1, #1
10042c60:	1c0c      	adds	r4, r1, #0
10042c62:	1c19      	adds	r1, r3, #0
10042c64:	1c10      	adds	r0, r2, #0
10042c66:	f7fd fc79 	bl	1004055c <__aeabi_fcmpeq>
10042c6a:	1e03      	subs	r3, r0, #0
10042c6c:	d101      	bne.n	10042c72 <MP3_Event_Updater+0x17e>
10042c6e:	2300      	movs	r3, #0
10042c70:	1c1c      	adds	r4, r3, #0
10042c72:	b2e3      	uxtb	r3, r4
10042c74:	001a      	movs	r2, r3
10042c76:	1d3b      	adds	r3, r7, #4
10042c78:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10042c7a:	1d3b      	adds	r3, r7, #4
10042c7c:	6818      	ldr	r0, [r3, #0]
10042c7e:	f7ff ff27 	bl	10042ad0 <MP3_Event_Post>
    }
    return event;
10042c82:	2108      	movs	r1, #8
10042c84:	187b      	adds	r3, r7, r1
10042c86:	1d3a      	adds	r2, r7, #4
10042c88:	6812      	ldr	r2, [r2, #0]
10042c8a:	601a      	str	r2, [r3, #0]
10042c8c:	187a      	adds	r2, r7, r1
10042c8e:	2300      	movs	r3, #0
10042c90:	8811      	ldrh	r1, [r2, #0]
10042c92:	0409      	lsls	r1, r1, #16
10042c94:	0c09      	lsrs	r1, r1, #16
10042c96:	0c1b      	lsrs	r3, r3, #16
10042c98:	041b      	lsls	r3, r3, #16
10042c9a:	430b      	orrs	r3, r1
10042c9c:	8852      	ldrh	r2, [r2, #2]
10042c9e:	0412      	lsls	r2, r2, #16
10042ca0:	041b      	lsls	r3, r3, #16
10042ca2:	0c1b      	lsrs	r3, r3, #16
10042ca4:	4313      	orrs	r3, r2
}
10042ca6:	0018      	movs	r0, r3
10042ca8:	46bd      	mov	sp, r7
10042caa:	b005      	add	sp, #20
10042cac:	bd90      	pop	{r4, r7, pc}
10042cae:	46c0      	nop			@ (mov r8, r8)
10042cb0:	20000620 	.word	0x20000620
10042cb4:	2000062c 	.word	0x2000062c
10042cb8:	20000624 	.word	0x20000624
10042cbc:	49127c00 	.word	0x49127c00
10042cc0:	20000630 	.word	0x20000630
10042cc4:	00000bb7 	.word	0x00000bb7
10042cc8:	20000634 	.word	0x20000634
10042ccc:	20000628 	.word	0x20000628

10042cd0 <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
10042cd0:	b590      	push	{r4, r7, lr}
10042cd2:	b08b      	sub	sp, #44	@ 0x2c
10042cd4:	af00      	add	r7, sp, #0
10042cd6:	1d3b      	adds	r3, r7, #4
10042cd8:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
10042cda:	1d3b      	adds	r3, r7, #4
10042cdc:	781b      	ldrb	r3, [r3, #0]
10042cde:	b25b      	sxtb	r3, r3
10042ce0:	2b01      	cmp	r3, #1
10042ce2:	d10a      	bne.n	10042cfa <MP3_Event_Handler+0x2a>
		//7E FF 06 08 00 00 01 xx EF //repeat folder
		char send[4] = {0x08, 0x00, 0x00, 0x01};
10042ce4:	2124      	movs	r1, #36	@ 0x24
10042ce6:	187b      	adds	r3, r7, r1
10042ce8:	4a53      	ldr	r2, [pc, #332]	@ (10042e38 <MP3_Event_Handler+0x168>)
10042cea:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
10042cec:	187b      	adds	r3, r7, r1
10042cee:	0018      	movs	r0, r3
10042cf0:	f7ff fe62 	bl	100429b8 <MP3_SendData>
		initialized = 1;
10042cf4:	4b51      	ldr	r3, [pc, #324]	@ (10042e3c <MP3_Event_Handler+0x16c>)
10042cf6:	2201      	movs	r2, #1
10042cf8:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
10042cfa:	1d3b      	adds	r3, r7, #4
10042cfc:	781b      	ldrb	r3, [r3, #0]
10042cfe:	b25b      	sxtb	r3, r3
10042d00:	2b09      	cmp	r3, #9
10042d02:	d119      	bne.n	10042d38 <MP3_Event_Handler+0x68>
		//send either play or stop to the mp3 player
		play = event.data;
10042d04:	1d3b      	adds	r3, r7, #4
10042d06:	885b      	ldrh	r3, [r3, #2]
10042d08:	b2da      	uxtb	r2, r3
10042d0a:	4b4d      	ldr	r3, [pc, #308]	@ (10042e40 <MP3_Event_Handler+0x170>)
10042d0c:	701a      	strb	r2, [r3, #0]
		if(play){
10042d0e:	4b4c      	ldr	r3, [pc, #304]	@ (10042e40 <MP3_Event_Handler+0x170>)
10042d10:	781b      	ldrb	r3, [r3, #0]
10042d12:	2b00      	cmp	r3, #0
10042d14:	d008      	beq.n	10042d28 <MP3_Event_Handler+0x58>
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
10042d16:	2120      	movs	r1, #32
10042d18:	187b      	adds	r3, r7, r1
10042d1a:	220d      	movs	r2, #13
10042d1c:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10042d1e:	187b      	adds	r3, r7, r1
10042d20:	0018      	movs	r0, r3
10042d22:	f7ff fe49 	bl	100429b8 <MP3_SendData>
10042d26:	e007      	b.n	10042d38 <MP3_Event_Handler+0x68>
		}else {

			char send[4] = {0x0E, 0x00, 0x00, 0x00};
10042d28:	211c      	movs	r1, #28
10042d2a:	187b      	adds	r3, r7, r1
10042d2c:	220e      	movs	r2, #14
10042d2e:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10042d30:	187b      	adds	r3, r7, r1
10042d32:	0018      	movs	r0, r3
10042d34:	f7ff fe40 	bl	100429b8 <MP3_SendData>
		}

	}if(event.status == EVENT_PLAY){
10042d38:	1d3b      	adds	r3, r7, #4
10042d3a:	781b      	ldrb	r3, [r3, #0]
10042d3c:	b25b      	sxtb	r3, r3
10042d3e:	2b0b      	cmp	r3, #11
10042d40:	d132      	bne.n	10042da8 <MP3_Event_Handler+0xd8>

		Scheduler_Event_Post(event);
10042d42:	1d3b      	adds	r3, r7, #4
10042d44:	6818      	ldr	r0, [r3, #0]
10042d46:	f000 f9b5 	bl	100430b4 <Scheduler_Event_Post>
		if(event.data == 0){//0 is not a valid folder or track number
10042d4a:	1d3b      	adds	r3, r7, #4
10042d4c:	885b      	ldrh	r3, [r3, #2]
10042d4e:	2b00      	cmp	r3, #0
10042d50:	d10b      	bne.n	10042d6a <MP3_Event_Handler+0x9a>
			DC = 0;// immediately cause a timeout to stop the speaker
10042d52:	4b3c      	ldr	r3, [pc, #240]	@ (10042e44 <MP3_Event_Handler+0x174>)
10042d54:	2200      	movs	r2, #0
10042d56:	601a      	str	r2, [r3, #0]
			char send[4] = {0x0A, 0x00, 0x00, 0x00};//enter low power mode
10042d58:	2118      	movs	r1, #24
10042d5a:	187b      	adds	r3, r7, r1
10042d5c:	220a      	movs	r2, #10
10042d5e:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10042d60:	187b      	adds	r3, r7, r1
10042d62:	0018      	movs	r0, r3
10042d64:	f7ff fe28 	bl	100429b8 <MP3_SendData>
10042d68:	e01e      	b.n	10042da8 <MP3_Event_Handler+0xd8>
		} else {

			char send1[4] = {0x0B, 0x00, 0x00, 0x00};//exit low power mode?
10042d6a:	2114      	movs	r1, #20
10042d6c:	187b      	adds	r3, r7, r1
10042d6e:	220b      	movs	r2, #11
10042d70:	601a      	str	r2, [r3, #0]
			MP3_SendData(send1);
10042d72:	187b      	adds	r3, r7, r1
10042d74:	0018      	movs	r0, r3
10042d76:	f7ff fe1f 	bl	100429b8 <MP3_SendData>
			//7E FF 06 0F 00 FOLDER# TRACK# xx EF

			char send2[4] = {0x0F, 0x00, event.data>>8, event.data&0xFF};
10042d7a:	2110      	movs	r1, #16
10042d7c:	187b      	adds	r3, r7, r1
10042d7e:	220f      	movs	r2, #15
10042d80:	701a      	strb	r2, [r3, #0]
10042d82:	187b      	adds	r3, r7, r1
10042d84:	2200      	movs	r2, #0
10042d86:	705a      	strb	r2, [r3, #1]
10042d88:	1d3b      	adds	r3, r7, #4
10042d8a:	885b      	ldrh	r3, [r3, #2]
10042d8c:	0a1b      	lsrs	r3, r3, #8
10042d8e:	b29b      	uxth	r3, r3
10042d90:	b2da      	uxtb	r2, r3
10042d92:	187b      	adds	r3, r7, r1
10042d94:	709a      	strb	r2, [r3, #2]
10042d96:	1d3b      	adds	r3, r7, #4
10042d98:	885b      	ldrh	r3, [r3, #2]
10042d9a:	b2da      	uxtb	r2, r3
10042d9c:	187b      	adds	r3, r7, r1
10042d9e:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send2);
10042da0:	187b      	adds	r3, r7, r1
10042da2:	0018      	movs	r0, r3
10042da4:	f7ff fe08 	bl	100429b8 <MP3_SendData>
		}


	}if(event.status == EVENT_SETTINGS){
10042da8:	1d3b      	adds	r3, r7, #4
10042daa:	781b      	ldrb	r3, [r3, #0]
10042dac:	b25b      	sxtb	r3, r3
10042dae:	2b0a      	cmp	r3, #10
10042db0:	d13d      	bne.n	10042e2e <MP3_Event_Handler+0x15e>
		DC = FLASH_GetDutyCycle()/100;
10042db2:	f7ff f89d 	bl	10041ef0 <FLASH_GetDutyCycle>
10042db6:	0003      	movs	r3, r0
10042db8:	2164      	movs	r1, #100	@ 0x64
10042dba:	0018      	movs	r0, r3
10042dbc:	f7fd fa40 	bl	10040240 <__udivsi3>
10042dc0:	0003      	movs	r3, r0
10042dc2:	b2db      	uxtb	r3, r3
10042dc4:	0018      	movs	r0, r3
10042dc6:	f7fe f9dd 	bl	10041184 <__aeabi_i2f>
10042dca:	1c02      	adds	r2, r0, #0
10042dcc:	4b1d      	ldr	r3, [pc, #116]	@ (10042e44 <MP3_Event_Handler+0x174>)
10042dce:	601a      	str	r2, [r3, #0]
		volume = FLASH_GetVolume()/100;
10042dd0:	f7ff f87c 	bl	10041ecc <FLASH_GetVolume>
10042dd4:	0003      	movs	r3, r0
10042dd6:	2164      	movs	r1, #100	@ 0x64
10042dd8:	0018      	movs	r0, r3
10042dda:	f7fd fa31 	bl	10040240 <__udivsi3>
10042dde:	0003      	movs	r3, r0
10042de0:	b2db      	uxtb	r3, r3
10042de2:	0018      	movs	r0, r3
10042de4:	f7fe f9ce 	bl	10041184 <__aeabi_i2f>
10042de8:	1c02      	adds	r2, r0, #0
10042dea:	4b17      	ldr	r3, [pc, #92]	@ (10042e48 <MP3_Event_Handler+0x178>)
10042dec:	601a      	str	r2, [r3, #0]
		if(!event.data){//volume == FLASH_GetVolume()/100
10042dee:	1d3b      	adds	r3, r7, #4
10042df0:	885b      	ldrh	r3, [r3, #2]
10042df2:	2b00      	cmp	r3, #0
10042df4:	d11b      	bne.n	10042e2e <MP3_Event_Handler+0x15e>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(volume*30)};
10042df6:	240c      	movs	r4, #12
10042df8:	193b      	adds	r3, r7, r4
10042dfa:	2206      	movs	r2, #6
10042dfc:	701a      	strb	r2, [r3, #0]
10042dfe:	193b      	adds	r3, r7, r4
10042e00:	2200      	movs	r2, #0
10042e02:	705a      	strb	r2, [r3, #1]
10042e04:	193b      	adds	r3, r7, r4
10042e06:	2200      	movs	r2, #0
10042e08:	709a      	strb	r2, [r3, #2]
10042e0a:	4b0f      	ldr	r3, [pc, #60]	@ (10042e48 <MP3_Event_Handler+0x178>)
10042e0c:	681b      	ldr	r3, [r3, #0]
10042e0e:	490f      	ldr	r1, [pc, #60]	@ (10042e4c <MP3_Event_Handler+0x17c>)
10042e10:	1c18      	adds	r0, r3, #0
10042e12:	f7fd fdd9 	bl	100409c8 <__aeabi_fmul>
10042e16:	1c03      	adds	r3, r0, #0
10042e18:	1c18      	adds	r0, r3, #0
10042e1a:	f7fd fc39 	bl	10040690 <__aeabi_f2uiz>
10042e1e:	0003      	movs	r3, r0
10042e20:	b2da      	uxtb	r2, r3
10042e22:	193b      	adds	r3, r7, r4
10042e24:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10042e26:	193b      	adds	r3, r7, r4
10042e28:	0018      	movs	r0, r3
10042e2a:	f7ff fdc5 	bl	100429b8 <MP3_SendData>
		}
	}
    return 1;
10042e2e:	2301      	movs	r3, #1
}
10042e30:	0018      	movs	r0, r3
10042e32:	46bd      	mov	sp, r7
10042e34:	b00b      	add	sp, #44	@ 0x2c
10042e36:	bd90      	pop	{r4, r7, pc}
10042e38:	01000008 	.word	0x01000008
10042e3c:	20000634 	.word	0x20000634
10042e40:	20000620 	.word	0x20000620
10042e44:	20000624 	.word	0x20000624
10042e48:	20000628 	.word	0x20000628
10042e4c:	41f00000 	.word	0x41f00000

10042e50 <CompareTime>:
static uint8_t minute;

static uint8_t logging;//logging
static uint8_t playdata;
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
10042e50:	b5f0      	push	{r4, r5, r6, r7, lr}
10042e52:	b08d      	sub	sp, #52	@ 0x34
10042e54:	af00      	add	r7, sp, #0
	if(month == NULLDATE || day == NULLDATE || hour == NULLDATE || minute == NULLDATE){
10042e56:	4b84      	ldr	r3, [pc, #528]	@ (10043068 <CompareTime+0x218>)
10042e58:	781b      	ldrb	r3, [r3, #0]
10042e5a:	2bff      	cmp	r3, #255	@ 0xff
10042e5c:	d100      	bne.n	10042e60 <CompareTime+0x10>
10042e5e:	e0ff      	b.n	10043060 <CompareTime+0x210>
10042e60:	4b82      	ldr	r3, [pc, #520]	@ (1004306c <CompareTime+0x21c>)
10042e62:	781b      	ldrb	r3, [r3, #0]
10042e64:	2bff      	cmp	r3, #255	@ 0xff
10042e66:	d100      	bne.n	10042e6a <CompareTime+0x1a>
10042e68:	e0fa      	b.n	10043060 <CompareTime+0x210>
10042e6a:	4b81      	ldr	r3, [pc, #516]	@ (10043070 <CompareTime+0x220>)
10042e6c:	781b      	ldrb	r3, [r3, #0]
10042e6e:	2bff      	cmp	r3, #255	@ 0xff
10042e70:	d100      	bne.n	10042e74 <CompareTime+0x24>
10042e72:	e0f5      	b.n	10043060 <CompareTime+0x210>
10042e74:	4b7f      	ldr	r3, [pc, #508]	@ (10043074 <CompareTime+0x224>)
10042e76:	781b      	ldrb	r3, [r3, #0]
10042e78:	2bff      	cmp	r3, #255	@ 0xff
10042e7a:	d100      	bne.n	10042e7e <CompareTime+0x2e>
10042e7c:	e0f0      	b.n	10043060 <CompareTime+0x210>
		return;
	}
	if(logging){
10042e7e:	4b7e      	ldr	r3, [pc, #504]	@ (10043078 <CompareTime+0x228>)
10042e80:	781b      	ldrb	r3, [r3, #0]
10042e82:	2b00      	cmp	r3, #0
10042e84:	d067      	beq.n	10042f56 <CompareTime+0x106>
		scheduleEvent event;

		event.month = month;
10042e86:	4b78      	ldr	r3, [pc, #480]	@ (10043068 <CompareTime+0x218>)
10042e88:	781a      	ldrb	r2, [r3, #0]
10042e8a:	2524      	movs	r5, #36	@ 0x24
10042e8c:	197b      	adds	r3, r7, r5
10042e8e:	701a      	strb	r2, [r3, #0]
		event.day = day;
10042e90:	4b76      	ldr	r3, [pc, #472]	@ (1004306c <CompareTime+0x21c>)
10042e92:	781a      	ldrb	r2, [r3, #0]
10042e94:	197b      	adds	r3, r7, r5
10042e96:	705a      	strb	r2, [r3, #1]
		if(playdata){
10042e98:	4b78      	ldr	r3, [pc, #480]	@ (1004307c <CompareTime+0x22c>)
10042e9a:	781b      	ldrb	r3, [r3, #0]
10042e9c:	2b00      	cmp	r3, #0
10042e9e:	d01d      	beq.n	10042edc <CompareTime+0x8c>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10042ea0:	4b73      	ldr	r3, [pc, #460]	@ (10043070 <CompareTime+0x220>)
10042ea2:	781b      	ldrb	r3, [r3, #0]
10042ea4:	b25b      	sxtb	r3, r3
10042ea6:	00db      	lsls	r3, r3, #3
10042ea8:	b25c      	sxtb	r4, r3
10042eaa:	4b72      	ldr	r3, [pc, #456]	@ (10043074 <CompareTime+0x224>)
10042eac:	781b      	ldrb	r3, [r3, #0]
10042eae:	210f      	movs	r1, #15
10042eb0:	0018      	movs	r0, r3
10042eb2:	f7fd f9c5 	bl	10040240 <__udivsi3>
10042eb6:	0003      	movs	r3, r0
10042eb8:	b2db      	uxtb	r3, r3
10042eba:	b25b      	sxtb	r3, r3
10042ebc:	4023      	ands	r3, r4
10042ebe:	b25b      	sxtb	r3, r3
10042ec0:	b2da      	uxtb	r2, r3
10042ec2:	197b      	adds	r3, r7, r5
10042ec4:	709a      	strb	r2, [r3, #2]
			event.stop = 0;
10042ec6:	197b      	adds	r3, r7, r5
10042ec8:	2200      	movs	r2, #0
10042eca:	70da      	strb	r2, [r3, #3]
			event.folder = (playdata>>8)&0xFF;
10042ecc:	197b      	adds	r3, r7, r5
10042ece:	2200      	movs	r2, #0
10042ed0:	711a      	strb	r2, [r3, #4]
			event.track = playdata&0xFF;
10042ed2:	4b6a      	ldr	r3, [pc, #424]	@ (1004307c <CompareTime+0x22c>)
10042ed4:	781a      	ldrb	r2, [r3, #0]
10042ed6:	197b      	adds	r3, r7, r5
10042ed8:	715a      	strb	r2, [r3, #5]
10042eda:	e029      	b.n	10042f30 <CompareTime+0xe0>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
10042edc:	f7ff f870 	bl	10041fc0 <FLASH_GetLogsSize>
10042ee0:	0003      	movs	r3, r0
10042ee2:	3b01      	subs	r3, #1
10042ee4:	b29a      	uxth	r2, r3
10042ee6:	261c      	movs	r6, #28
10042ee8:	19bb      	adds	r3, r7, r6
10042eea:	0011      	movs	r1, r2
10042eec:	0018      	movs	r0, r3
10042eee:	f7ff f879 	bl	10041fe4 <FLASH_ReadLogs>
			event.start = 0;
10042ef2:	2524      	movs	r5, #36	@ 0x24
10042ef4:	197b      	adds	r3, r7, r5
10042ef6:	2200      	movs	r2, #0
10042ef8:	709a      	strb	r2, [r3, #2]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10042efa:	4b5d      	ldr	r3, [pc, #372]	@ (10043070 <CompareTime+0x220>)
10042efc:	781b      	ldrb	r3, [r3, #0]
10042efe:	b25b      	sxtb	r3, r3
10042f00:	00db      	lsls	r3, r3, #3
10042f02:	b25c      	sxtb	r4, r3
10042f04:	4b5b      	ldr	r3, [pc, #364]	@ (10043074 <CompareTime+0x224>)
10042f06:	781b      	ldrb	r3, [r3, #0]
10042f08:	210f      	movs	r1, #15
10042f0a:	0018      	movs	r0, r3
10042f0c:	f7fd f998 	bl	10040240 <__udivsi3>
10042f10:	0003      	movs	r3, r0
10042f12:	b2db      	uxtb	r3, r3
10042f14:	b25b      	sxtb	r3, r3
10042f16:	4023      	ands	r3, r4
10042f18:	b25b      	sxtb	r3, r3
10042f1a:	b2da      	uxtb	r2, r3
10042f1c:	197b      	adds	r3, r7, r5
10042f1e:	70da      	strb	r2, [r3, #3]
			event.folder = prevevent.folder;
10042f20:	19bb      	adds	r3, r7, r6
10042f22:	791a      	ldrb	r2, [r3, #4]
10042f24:	197b      	adds	r3, r7, r5
10042f26:	711a      	strb	r2, [r3, #4]
			event.track = prevevent.track;
10042f28:	19bb      	adds	r3, r7, r6
10042f2a:	795a      	ldrb	r2, [r3, #5]
10042f2c:	197b      	adds	r3, r7, r5
10042f2e:	715a      	strb	r2, [r3, #5]
		}
		FLASH_AppendLogs(event);
10042f30:	2324      	movs	r3, #36	@ 0x24
10042f32:	18fb      	adds	r3, r7, r3
10042f34:	6818      	ldr	r0, [r3, #0]
10042f36:	6859      	ldr	r1, [r3, #4]
10042f38:	f7fe ffec 	bl	10041f14 <FLASH_AppendLogs>
		month = NULLDATE;
10042f3c:	4b4a      	ldr	r3, [pc, #296]	@ (10043068 <CompareTime+0x218>)
10042f3e:	22ff      	movs	r2, #255	@ 0xff
10042f40:	701a      	strb	r2, [r3, #0]
		day = NULLDATE;
10042f42:	4b4a      	ldr	r3, [pc, #296]	@ (1004306c <CompareTime+0x21c>)
10042f44:	22ff      	movs	r2, #255	@ 0xff
10042f46:	701a      	strb	r2, [r3, #0]
		hour = NULLDATE;
10042f48:	4b49      	ldr	r3, [pc, #292]	@ (10043070 <CompareTime+0x220>)
10042f4a:	22ff      	movs	r2, #255	@ 0xff
10042f4c:	701a      	strb	r2, [r3, #0]
		minute = NULLDATE;
10042f4e:	4b49      	ldr	r3, [pc, #292]	@ (10043074 <CompareTime+0x224>)
10042f50:	22ff      	movs	r2, #255	@ 0xff
10042f52:	701a      	strb	r2, [r3, #0]
10042f54:	e085      	b.n	10043062 <CompareTime+0x212>
	} else {
		scheduleEvent event;
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10042f56:	2300      	movs	r3, #0
10042f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
10042f5a:	e078      	b.n	1004304e <CompareTime+0x1fe>
			event = FLASH_ReadSchedule(i);
10042f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10042f5e:	b29a      	uxth	r2, r3
10042f60:	2414      	movs	r4, #20
10042f62:	193b      	adds	r3, r7, r4
10042f64:	0011      	movs	r1, r2
10042f66:	0018      	movs	r0, r3
10042f68:	f7ff f8c0 	bl	100420ec <FLASH_ReadSchedule>
			if(event.month == month && event.day == day){
10042f6c:	0021      	movs	r1, r4
10042f6e:	187b      	adds	r3, r7, r1
10042f70:	781a      	ldrb	r2, [r3, #0]
10042f72:	4b3d      	ldr	r3, [pc, #244]	@ (10043068 <CompareTime+0x218>)
10042f74:	781b      	ldrb	r3, [r3, #0]
10042f76:	429a      	cmp	r2, r3
10042f78:	d166      	bne.n	10043048 <CompareTime+0x1f8>
10042f7a:	187b      	adds	r3, r7, r1
10042f7c:	785a      	ldrb	r2, [r3, #1]
10042f7e:	4b3b      	ldr	r3, [pc, #236]	@ (1004306c <CompareTime+0x21c>)
10042f80:	781b      	ldrb	r3, [r3, #0]
10042f82:	429a      	cmp	r2, r3
10042f84:	d160      	bne.n	10043048 <CompareTime+0x1f8>
				if((event.start&0b11111000)>>3 == hour && (event.start & 0b011)*15 == minute){
10042f86:	187b      	adds	r3, r7, r1
10042f88:	789b      	ldrb	r3, [r3, #2]
10042f8a:	08db      	lsrs	r3, r3, #3
10042f8c:	b2da      	uxtb	r2, r3
10042f8e:	4b38      	ldr	r3, [pc, #224]	@ (10043070 <CompareTime+0x220>)
10042f90:	781b      	ldrb	r3, [r3, #0]
10042f92:	429a      	cmp	r2, r3
10042f94:	d129      	bne.n	10042fea <CompareTime+0x19a>
10042f96:	187b      	adds	r3, r7, r1
10042f98:	789b      	ldrb	r3, [r3, #2]
10042f9a:	001a      	movs	r2, r3
10042f9c:	2303      	movs	r3, #3
10042f9e:	401a      	ands	r2, r3
10042fa0:	0013      	movs	r3, r2
10042fa2:	011b      	lsls	r3, r3, #4
10042fa4:	1a9b      	subs	r3, r3, r2
10042fa6:	4a33      	ldr	r2, [pc, #204]	@ (10043074 <CompareTime+0x224>)
10042fa8:	7812      	ldrb	r2, [r2, #0]
10042faa:	4293      	cmp	r3, r2
10042fac:	d11d      	bne.n	10042fea <CompareTime+0x19a>
					Event_t play = (Event_t){EVENT_PLAY, (event.folder<<8) + event.track};
10042fae:	2010      	movs	r0, #16
10042fb0:	183b      	adds	r3, r7, r0
10042fb2:	220b      	movs	r2, #11
10042fb4:	701a      	strb	r2, [r3, #0]
10042fb6:	187b      	adds	r3, r7, r1
10042fb8:	791b      	ldrb	r3, [r3, #4]
10042fba:	021b      	lsls	r3, r3, #8
10042fbc:	b29b      	uxth	r3, r3
10042fbe:	187a      	adds	r2, r7, r1
10042fc0:	7952      	ldrb	r2, [r2, #5]
10042fc2:	189b      	adds	r3, r3, r2
10042fc4:	b29a      	uxth	r2, r3
10042fc6:	183b      	adds	r3, r7, r0
10042fc8:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
10042fca:	183b      	adds	r3, r7, r0
10042fcc:	6818      	ldr	r0, [r3, #0]
10042fce:	f7ff fd7f 	bl	10042ad0 <MP3_Event_Post>
					month = NULLDATE;
10042fd2:	4b25      	ldr	r3, [pc, #148]	@ (10043068 <CompareTime+0x218>)
10042fd4:	22ff      	movs	r2, #255	@ 0xff
10042fd6:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10042fd8:	4b24      	ldr	r3, [pc, #144]	@ (1004306c <CompareTime+0x21c>)
10042fda:	22ff      	movs	r2, #255	@ 0xff
10042fdc:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
10042fde:	4b24      	ldr	r3, [pc, #144]	@ (10043070 <CompareTime+0x220>)
10042fe0:	22ff      	movs	r2, #255	@ 0xff
10042fe2:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
10042fe4:	4b23      	ldr	r3, [pc, #140]	@ (10043074 <CompareTime+0x224>)
10042fe6:	22ff      	movs	r2, #255	@ 0xff
10042fe8:	701a      	strb	r2, [r3, #0]
				}
				if((event.stop&0b11111000)>>3 == hour && (event.stop & 0b011)*15 == minute){
10042fea:	2114      	movs	r1, #20
10042fec:	187b      	adds	r3, r7, r1
10042fee:	78db      	ldrb	r3, [r3, #3]
10042ff0:	08db      	lsrs	r3, r3, #3
10042ff2:	b2da      	uxtb	r2, r3
10042ff4:	4b1e      	ldr	r3, [pc, #120]	@ (10043070 <CompareTime+0x220>)
10042ff6:	781b      	ldrb	r3, [r3, #0]
10042ff8:	429a      	cmp	r2, r3
10042ffa:	d125      	bne.n	10043048 <CompareTime+0x1f8>
10042ffc:	187b      	adds	r3, r7, r1
10042ffe:	78db      	ldrb	r3, [r3, #3]
10043000:	001a      	movs	r2, r3
10043002:	2303      	movs	r3, #3
10043004:	401a      	ands	r2, r3
10043006:	0013      	movs	r3, r2
10043008:	011b      	lsls	r3, r3, #4
1004300a:	1a9b      	subs	r3, r3, r2
1004300c:	4a19      	ldr	r2, [pc, #100]	@ (10043074 <CompareTime+0x224>)
1004300e:	7812      	ldrb	r2, [r2, #0]
10043010:	4293      	cmp	r3, r2
10043012:	d119      	bne.n	10043048 <CompareTime+0x1f8>
					Event_t play = (Event_t){EVENT_PLAY, 0};
10043014:	2008      	movs	r0, #8
10043016:	183b      	adds	r3, r7, r0
10043018:	220b      	movs	r2, #11
1004301a:	701a      	strb	r2, [r3, #0]
1004301c:	183b      	adds	r3, r7, r0
1004301e:	2200      	movs	r2, #0
10043020:	805a      	strh	r2, [r3, #2]
					event.start = 0;
10043022:	187b      	adds	r3, r7, r1
10043024:	2200      	movs	r2, #0
10043026:	709a      	strb	r2, [r3, #2]
					MP3_Event_Post(play);
10043028:	183b      	adds	r3, r7, r0
1004302a:	6818      	ldr	r0, [r3, #0]
1004302c:	f7ff fd50 	bl	10042ad0 <MP3_Event_Post>
					month = NULLDATE;
10043030:	4b0d      	ldr	r3, [pc, #52]	@ (10043068 <CompareTime+0x218>)
10043032:	22ff      	movs	r2, #255	@ 0xff
10043034:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10043036:	4b0d      	ldr	r3, [pc, #52]	@ (1004306c <CompareTime+0x21c>)
10043038:	22ff      	movs	r2, #255	@ 0xff
1004303a:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
1004303c:	4b0c      	ldr	r3, [pc, #48]	@ (10043070 <CompareTime+0x220>)
1004303e:	22ff      	movs	r2, #255	@ 0xff
10043040:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
10043042:	4b0c      	ldr	r3, [pc, #48]	@ (10043074 <CompareTime+0x224>)
10043044:	22ff      	movs	r2, #255	@ 0xff
10043046:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10043048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004304a:	3301      	adds	r3, #1
1004304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004304e:	f7ff f83b 	bl	100420c8 <FLASH_GetScheduleSize>
10043052:	0003      	movs	r3, r0
10043054:	001a      	movs	r2, r3
10043056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10043058:	4293      	cmp	r3, r2
1004305a:	da00      	bge.n	1004305e <CompareTime+0x20e>
1004305c:	e77e      	b.n	10042f5c <CompareTime+0x10c>
1004305e:	e000      	b.n	10043062 <CompareTime+0x212>
		return;
10043060:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
}
10043062:	46bd      	mov	sp, r7
10043064:	b00d      	add	sp, #52	@ 0x34
10043066:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043068:	20000640 	.word	0x20000640
1004306c:	20000641 	.word	0x20000641
10043070:	20000642 	.word	0x20000642
10043074:	20000643 	.word	0x20000643
10043078:	20000644 	.word	0x20000644
1004307c:	20000645 	.word	0x20000645

10043080 <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
10043080:	b580      	push	{r7, lr}
10043082:	b082      	sub	sp, #8
10043084:	af00      	add	r7, sp, #0
10043086:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
10043088:	4b08      	ldr	r3, [pc, #32]	@ (100430ac <Scheduler_Event_Init+0x2c>)
1004308a:	687a      	ldr	r2, [r7, #4]
1004308c:	601a      	str	r2, [r3, #0]
    I2C_Init();
1004308e:	f7ff fb2b 	bl	100426e8 <I2C_Init>
    TIMERS_Init();
10043092:	f000 f95d 	bl	10043350 <TIMERS_Init>
    starttime = TIMERS_GetMilliSeconds();
10043096:	f000 f9a7 	bl	100433e8 <TIMERS_GetMilliSeconds>
1004309a:	0002      	movs	r2, r0
1004309c:	4b04      	ldr	r3, [pc, #16]	@ (100430b0 <Scheduler_Event_Init+0x30>)
1004309e:	601a      	str	r2, [r3, #0]
    return INIT_OK;
100430a0:	2301      	movs	r3, #1
}
100430a2:	0018      	movs	r0, r3
100430a4:	46bd      	mov	sp, r7
100430a6:	b002      	add	sp, #8
100430a8:	bd80      	pop	{r7, pc}
100430aa:	46c0      	nop			@ (mov r8, r8)
100430ac:	20000638 	.word	0x20000638
100430b0:	2000063c 	.word	0x2000063c

100430b4 <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
100430b4:	b580      	push	{r7, lr}
100430b6:	b082      	sub	sp, #8
100430b8:	af00      	add	r7, sp, #0
100430ba:	1d3b      	adds	r3, r7, #4
100430bc:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
100430be:	4b05      	ldr	r3, [pc, #20]	@ (100430d4 <Scheduler_Event_Post+0x20>)
100430c0:	681a      	ldr	r2, [r3, #0]
100430c2:	1d3b      	adds	r3, r7, #4
100430c4:	6819      	ldr	r1, [r3, #0]
100430c6:	0010      	movs	r0, r2
100430c8:	f7fe fe6b 	bl	10041da2 <FIFO_Enqueue>
}
100430cc:	46c0      	nop			@ (mov r8, r8)
100430ce:	46bd      	mov	sp, r7
100430d0:	b002      	add	sp, #8
100430d2:	bd80      	pop	{r7, pc}
100430d4:	20000638 	.word	0x20000638

100430d8 <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
100430d8:	b580      	push	{r7, lr}
100430da:	b084      	sub	sp, #16
100430dc:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
100430de:	1d3b      	adds	r3, r7, #4
100430e0:	2200      	movs	r2, #0
100430e2:	701a      	strb	r2, [r3, #0]
100430e4:	1d3b      	adds	r3, r7, #4
100430e6:	2200      	movs	r2, #0
100430e8:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
100430ea:	f000 f97d 	bl	100433e8 <TIMERS_GetMilliSeconds>
100430ee:	0003      	movs	r3, r0
100430f0:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
100430f2:	4b15      	ldr	r3, [pc, #84]	@ (10043148 <Scheduler_Event_Updater+0x70>)
100430f4:	681b      	ldr	r3, [r3, #0]
100430f6:	68fa      	ldr	r2, [r7, #12]
100430f8:	1ad3      	subs	r3, r2, r3
100430fa:	4a14      	ldr	r2, [pc, #80]	@ (1004314c <Scheduler_Event_Updater+0x74>)
100430fc:	4293      	cmp	r3, r2
100430fe:	d90c      	bls.n	1004311a <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
10043100:	1d3b      	adds	r3, r7, #4
10043102:	2209      	movs	r2, #9
10043104:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10043106:	1d3b      	adds	r3, r7, #4
10043108:	2200      	movs	r2, #0
1004310a:	805a      	strh	r2, [r3, #2]
		starttime = timer;
1004310c:	4b0e      	ldr	r3, [pc, #56]	@ (10043148 <Scheduler_Event_Updater+0x70>)
1004310e:	68fa      	ldr	r2, [r7, #12]
10043110:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
10043112:	1d3b      	adds	r3, r7, #4
10043114:	6818      	ldr	r0, [r3, #0]
10043116:	f7ff ffcd 	bl	100430b4 <Scheduler_Event_Post>
	}
    return event;
1004311a:	2108      	movs	r1, #8
1004311c:	187b      	adds	r3, r7, r1
1004311e:	1d3a      	adds	r2, r7, #4
10043120:	6812      	ldr	r2, [r2, #0]
10043122:	601a      	str	r2, [r3, #0]
10043124:	187a      	adds	r2, r7, r1
10043126:	2300      	movs	r3, #0
10043128:	8811      	ldrh	r1, [r2, #0]
1004312a:	0409      	lsls	r1, r1, #16
1004312c:	0c09      	lsrs	r1, r1, #16
1004312e:	0c1b      	lsrs	r3, r3, #16
10043130:	041b      	lsls	r3, r3, #16
10043132:	430b      	orrs	r3, r1
10043134:	8852      	ldrh	r2, [r2, #2]
10043136:	0412      	lsls	r2, r2, #16
10043138:	041b      	lsls	r3, r3, #16
1004313a:	0c1b      	lsrs	r3, r3, #16
1004313c:	4313      	orrs	r3, r2
}
1004313e:	0018      	movs	r0, r3
10043140:	46bd      	mov	sp, r7
10043142:	b004      	add	sp, #16
10043144:	bd80      	pop	{r7, pc}
10043146:	46c0      	nop			@ (mov r8, r8)
10043148:	2000063c 	.word	0x2000063c
1004314c:	0000ea5f 	.word	0x0000ea5f

10043150 <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
10043150:	b580      	push	{r7, lr}
10043152:	b082      	sub	sp, #8
10043154:	af00      	add	r7, sp, #0
10043156:	1d3b      	adds	r3, r7, #4
10043158:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
1004315a:	1d3b      	adds	r3, r7, #4
1004315c:	781b      	ldrb	r3, [r3, #0]
1004315e:	b25b      	sxtb	r3, r3
10043160:	2b0b      	cmp	r3, #11
10043162:	d11f      	bne.n	100431a4 <Scheduler_Event_Handler+0x54>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, Scheduler_Event_Post);
10043164:	4b73      	ldr	r3, [pc, #460]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
10043166:	001a      	movs	r2, r3
10043168:	2104      	movs	r1, #4
1004316a:	206f      	movs	r0, #111	@ 0x6f
1004316c:	f7ff fb3a 	bl	100427e4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, Scheduler_Event_Post);
10043170:	4b70      	ldr	r3, [pc, #448]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
10043172:	001a      	movs	r2, r3
10043174:	2103      	movs	r1, #3
10043176:	206f      	movs	r0, #111	@ 0x6f
10043178:	f7ff fb34 	bl	100427e4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, Scheduler_Event_Post);
1004317c:	4b6d      	ldr	r3, [pc, #436]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
1004317e:	001a      	movs	r2, r3
10043180:	2102      	movs	r1, #2
10043182:	206f      	movs	r0, #111	@ 0x6f
10043184:	f7ff fb2e 	bl	100427e4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, Scheduler_Event_Post);
10043188:	4b6a      	ldr	r3, [pc, #424]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
1004318a:	001a      	movs	r2, r3
1004318c:	2101      	movs	r1, #1
1004318e:	206f      	movs	r0, #111	@ 0x6f
10043190:	f7ff fb28 	bl	100427e4 <I2C_Recieve>
		logging = 1;
10043194:	4b68      	ldr	r3, [pc, #416]	@ (10043338 <Scheduler_Event_Handler+0x1e8>)
10043196:	2201      	movs	r2, #1
10043198:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
1004319a:	1d3b      	adds	r3, r7, #4
1004319c:	885b      	ldrh	r3, [r3, #2]
1004319e:	b2da      	uxtb	r2, r3
100431a0:	4b66      	ldr	r3, [pc, #408]	@ (1004333c <Scheduler_Event_Handler+0x1ec>)
100431a2:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
100431a4:	1d3b      	adds	r3, r7, #4
100431a6:	781b      	ldrb	r3, [r3, #0]
100431a8:	b25b      	sxtb	r3, r3
100431aa:	2b09      	cmp	r3, #9
100431ac:	d117      	bne.n	100431de <Scheduler_Event_Handler+0x8e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, Scheduler_Event_Post);
100431ae:	4b61      	ldr	r3, [pc, #388]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
100431b0:	001a      	movs	r2, r3
100431b2:	2104      	movs	r1, #4
100431b4:	206f      	movs	r0, #111	@ 0x6f
100431b6:	f7ff fb15 	bl	100427e4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, Scheduler_Event_Post);
100431ba:	4b5e      	ldr	r3, [pc, #376]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
100431bc:	001a      	movs	r2, r3
100431be:	2103      	movs	r1, #3
100431c0:	206f      	movs	r0, #111	@ 0x6f
100431c2:	f7ff fb0f 	bl	100427e4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, Scheduler_Event_Post);
100431c6:	4b5b      	ldr	r3, [pc, #364]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
100431c8:	001a      	movs	r2, r3
100431ca:	2102      	movs	r1, #2
100431cc:	206f      	movs	r0, #111	@ 0x6f
100431ce:	f7ff fb09 	bl	100427e4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, Scheduler_Event_Post);
100431d2:	4b58      	ldr	r3, [pc, #352]	@ (10043334 <Scheduler_Event_Handler+0x1e4>)
100431d4:	001a      	movs	r2, r3
100431d6:	2101      	movs	r1, #1
100431d8:	206f      	movs	r0, #111	@ 0x6f
100431da:	f7ff fb03 	bl	100427e4 <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
100431de:	1d3b      	adds	r3, r7, #4
100431e0:	781b      	ldrb	r3, [r3, #0]
100431e2:	b25b      	sxtb	r3, r3
100431e4:	2b05      	cmp	r3, #5
100431e6:	d000      	beq.n	100431ea <Scheduler_Event_Handler+0x9a>
100431e8:	e09e      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
		switch (event.data>>8){
100431ea:	1d3b      	adds	r3, r7, #4
100431ec:	885b      	ldrh	r3, [r3, #2]
100431ee:	0a1b      	lsrs	r3, r3, #8
100431f0:	b29b      	uxth	r3, r3
100431f2:	2b04      	cmp	r3, #4
100431f4:	d00b      	beq.n	1004320e <Scheduler_Event_Handler+0xbe>
100431f6:	dd00      	ble.n	100431fa <Scheduler_Event_Handler+0xaa>
100431f8:	e096      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
100431fa:	2b03      	cmp	r3, #3
100431fc:	d020      	beq.n	10043240 <Scheduler_Event_Handler+0xf0>
100431fe:	dd00      	ble.n	10043202 <Scheduler_Event_Handler+0xb2>
10043200:	e092      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
10043202:	2b01      	cmp	r3, #1
10043204:	d100      	bne.n	10043208 <Scheduler_Event_Handler+0xb8>
10043206:	e076      	b.n	100432f6 <Scheduler_Event_Handler+0x1a6>
10043208:	2b02      	cmp	r3, #2
1004320a:	d032      	beq.n	10043272 <Scheduler_Event_Handler+0x122>
1004320c:	e08c      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
1004320e:	1d3b      	adds	r3, r7, #4
10043210:	885b      	ldrh	r3, [r3, #2]
10043212:	111b      	asrs	r3, r3, #4
10043214:	b2db      	uxtb	r3, r3
10043216:	2201      	movs	r2, #1
10043218:	4013      	ands	r3, r2
1004321a:	b2db      	uxtb	r3, r3
1004321c:	1c1a      	adds	r2, r3, #0
1004321e:	0092      	lsls	r2, r2, #2
10043220:	18d3      	adds	r3, r2, r3
10043222:	18db      	adds	r3, r3, r3
10043224:	b2da      	uxtb	r2, r3
10043226:	1d3b      	adds	r3, r7, #4
10043228:	885b      	ldrh	r3, [r3, #2]
1004322a:	b2db      	uxtb	r3, r3
1004322c:	210f      	movs	r1, #15
1004322e:	400b      	ands	r3, r1
10043230:	b2db      	uxtb	r3, r3
10043232:	18d3      	adds	r3, r2, r3
10043234:	b2da      	uxtb	r2, r3
10043236:	4b42      	ldr	r3, [pc, #264]	@ (10043340 <Scheduler_Event_Handler+0x1f0>)
10043238:	701a      	strb	r2, [r3, #0]
			CompareTime();
1004323a:	f7ff fe09 	bl	10042e50 <CompareTime>
			break;
1004323e:	e073      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
10043240:	1d3b      	adds	r3, r7, #4
10043242:	885b      	ldrh	r3, [r3, #2]
10043244:	111b      	asrs	r3, r3, #4
10043246:	b2db      	uxtb	r3, r3
10043248:	2203      	movs	r2, #3
1004324a:	4013      	ands	r3, r2
1004324c:	b2db      	uxtb	r3, r3
1004324e:	1c1a      	adds	r2, r3, #0
10043250:	0092      	lsls	r2, r2, #2
10043252:	18d3      	adds	r3, r2, r3
10043254:	18db      	adds	r3, r3, r3
10043256:	b2da      	uxtb	r2, r3
10043258:	1d3b      	adds	r3, r7, #4
1004325a:	885b      	ldrh	r3, [r3, #2]
1004325c:	b2db      	uxtb	r3, r3
1004325e:	210f      	movs	r1, #15
10043260:	400b      	ands	r3, r1
10043262:	b2db      	uxtb	r3, r3
10043264:	18d3      	adds	r3, r2, r3
10043266:	b2da      	uxtb	r2, r3
10043268:	4b36      	ldr	r3, [pc, #216]	@ (10043344 <Scheduler_Event_Handler+0x1f4>)
1004326a:	701a      	strb	r2, [r3, #0]
			CompareTime();
1004326c:	f7ff fdf0 	bl	10042e50 <CompareTime>
			break;
10043270:	e05a      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
10043272:	1d3b      	adds	r3, r7, #4
10043274:	885b      	ldrh	r3, [r3, #2]
10043276:	001a      	movs	r2, r3
10043278:	2340      	movs	r3, #64	@ 0x40
1004327a:	4013      	ands	r3, r2
1004327c:	d022      	beq.n	100432c4 <Scheduler_Event_Handler+0x174>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
1004327e:	1d3b      	adds	r3, r7, #4
10043280:	885b      	ldrh	r3, [r3, #2]
10043282:	115b      	asrs	r3, r3, #5
10043284:	b2db      	uxtb	r3, r3
10043286:	2201      	movs	r2, #1
10043288:	4013      	ands	r3, r2
1004328a:	b2db      	uxtb	r3, r3
1004328c:	220c      	movs	r2, #12
1004328e:	4353      	muls	r3, r2
10043290:	b2da      	uxtb	r2, r3
10043292:	1d3b      	adds	r3, r7, #4
10043294:	885b      	ldrh	r3, [r3, #2]
10043296:	111b      	asrs	r3, r3, #4
10043298:	b2db      	uxtb	r3, r3
1004329a:	2101      	movs	r1, #1
1004329c:	400b      	ands	r3, r1
1004329e:	b2db      	uxtb	r3, r3
100432a0:	1c19      	adds	r1, r3, #0
100432a2:	0089      	lsls	r1, r1, #2
100432a4:	18cb      	adds	r3, r1, r3
100432a6:	18db      	adds	r3, r3, r3
100432a8:	b2db      	uxtb	r3, r3
100432aa:	18d3      	adds	r3, r2, r3
100432ac:	b2da      	uxtb	r2, r3
100432ae:	1d3b      	adds	r3, r7, #4
100432b0:	885b      	ldrh	r3, [r3, #2]
100432b2:	b2db      	uxtb	r3, r3
100432b4:	210f      	movs	r1, #15
100432b6:	400b      	ands	r3, r1
100432b8:	b2db      	uxtb	r3, r3
100432ba:	18d3      	adds	r3, r2, r3
100432bc:	b2da      	uxtb	r2, r3
100432be:	4b22      	ldr	r3, [pc, #136]	@ (10043348 <Scheduler_Event_Handler+0x1f8>)
100432c0:	701a      	strb	r2, [r3, #0]
100432c2:	e015      	b.n	100432f0 <Scheduler_Event_Handler+0x1a0>
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
100432c4:	1d3b      	adds	r3, r7, #4
100432c6:	885b      	ldrh	r3, [r3, #2]
100432c8:	111b      	asrs	r3, r3, #4
100432ca:	b2db      	uxtb	r3, r3
100432cc:	2203      	movs	r2, #3
100432ce:	4013      	ands	r3, r2
100432d0:	b2db      	uxtb	r3, r3
100432d2:	1c1a      	adds	r2, r3, #0
100432d4:	0092      	lsls	r2, r2, #2
100432d6:	18d3      	adds	r3, r2, r3
100432d8:	18db      	adds	r3, r3, r3
100432da:	b2da      	uxtb	r2, r3
100432dc:	1d3b      	adds	r3, r7, #4
100432de:	885b      	ldrh	r3, [r3, #2]
100432e0:	b2db      	uxtb	r3, r3
100432e2:	210f      	movs	r1, #15
100432e4:	400b      	ands	r3, r1
100432e6:	b2db      	uxtb	r3, r3
100432e8:	18d3      	adds	r3, r2, r3
100432ea:	b2da      	uxtb	r2, r3
100432ec:	4b16      	ldr	r3, [pc, #88]	@ (10043348 <Scheduler_Event_Handler+0x1f8>)
100432ee:	701a      	strb	r2, [r3, #0]
			}
			CompareTime();
100432f0:	f7ff fdae 	bl	10042e50 <CompareTime>
			break;
100432f4:	e018      	b.n	10043328 <Scheduler_Event_Handler+0x1d8>
		case RTCMINADDR:
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
100432f6:	1d3b      	adds	r3, r7, #4
100432f8:	885b      	ldrh	r3, [r3, #2]
100432fa:	111b      	asrs	r3, r3, #4
100432fc:	b2db      	uxtb	r3, r3
100432fe:	2203      	movs	r2, #3
10043300:	4013      	ands	r3, r2
10043302:	b2db      	uxtb	r3, r3
10043304:	1c1a      	adds	r2, r3, #0
10043306:	0092      	lsls	r2, r2, #2
10043308:	18d3      	adds	r3, r2, r3
1004330a:	18db      	adds	r3, r3, r3
1004330c:	b2da      	uxtb	r2, r3
1004330e:	1d3b      	adds	r3, r7, #4
10043310:	885b      	ldrh	r3, [r3, #2]
10043312:	b2db      	uxtb	r3, r3
10043314:	210f      	movs	r1, #15
10043316:	400b      	ands	r3, r1
10043318:	b2db      	uxtb	r3, r3
1004331a:	18d3      	adds	r3, r2, r3
1004331c:	b2da      	uxtb	r2, r3
1004331e:	4b0b      	ldr	r3, [pc, #44]	@ (1004334c <Scheduler_Event_Handler+0x1fc>)
10043320:	701a      	strb	r2, [r3, #0]
			CompareTime();
10043322:	f7ff fd95 	bl	10042e50 <CompareTime>

			break;
10043326:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
10043328:	2301      	movs	r3, #1
}
1004332a:	0018      	movs	r0, r3
1004332c:	46bd      	mov	sp, r7
1004332e:	b002      	add	sp, #8
10043330:	bd80      	pop	{r7, pc}
10043332:	46c0      	nop			@ (mov r8, r8)
10043334:	100430b5 	.word	0x100430b5
10043338:	20000644 	.word	0x20000644
1004333c:	20000645 	.word	0x20000645
10043340:	20000640 	.word	0x20000640
10043344:	20000641 	.word	0x20000641
10043348:	20000642 	.word	0x20000642
1004334c:	20000643 	.word	0x20000643

10043350 <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
10043350:	b580      	push	{r7, lr}
10043352:	b084      	sub	sp, #16
10043354:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10043356:	4b20      	ldr	r3, [pc, #128]	@ (100433d8 <TIMERS_Init+0x88>)
10043358:	781b      	ldrb	r3, [r3, #0]
1004335a:	2b00      	cmp	r3, #0
1004335c:	d001      	beq.n	10043362 <TIMERS_Init+0x12>
1004335e:	2301      	movs	r3, #1
10043360:	e036      	b.n	100433d0 <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
10043362:	003b      	movs	r3, r7
10043364:	0018      	movs	r0, r3
10043366:	2310      	movs	r3, #16
10043368:	001a      	movs	r2, r3
1004336a:	2100      	movs	r1, #0
1004336c:	f021 fc6e 	bl	10064c4c <memset>
	htim2.Instance = TIM2;
10043370:	4b1a      	ldr	r3, [pc, #104]	@ (100433dc <TIMERS_Init+0x8c>)
10043372:	4a1b      	ldr	r2, [pc, #108]	@ (100433e0 <TIMERS_Init+0x90>)
10043374:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
10043376:	4b19      	ldr	r3, [pc, #100]	@ (100433dc <TIMERS_Init+0x8c>)
10043378:	2220      	movs	r2, #32
1004337a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
1004337c:	4b17      	ldr	r3, [pc, #92]	@ (100433dc <TIMERS_Init+0x8c>)
1004337e:	2200      	movs	r2, #0
10043380:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
10043382:	4b16      	ldr	r3, [pc, #88]	@ (100433dc <TIMERS_Init+0x8c>)
10043384:	4a17      	ldr	r2, [pc, #92]	@ (100433e4 <TIMERS_Init+0x94>)
10043386:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10043388:	4b14      	ldr	r3, [pc, #80]	@ (100433dc <TIMERS_Init+0x8c>)
1004338a:	2200      	movs	r2, #0
1004338c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1004338e:	4b13      	ldr	r3, [pc, #76]	@ (100433dc <TIMERS_Init+0x8c>)
10043390:	2200      	movs	r2, #0
10043392:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
10043394:	4b11      	ldr	r3, [pc, #68]	@ (100433dc <TIMERS_Init+0x8c>)
10043396:	0018      	movs	r0, r3
10043398:	f006 ff5b 	bl	1004a252 <HAL_TIM_Base_Init>
1004339c:	1e03      	subs	r3, r0, #0
1004339e:	d001      	beq.n	100433a4 <TIMERS_Init+0x54>
	{
		Error_Handler();
100433a0:	f7fe f8ce 	bl	10041540 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
100433a4:	003b      	movs	r3, r7
100433a6:	2280      	movs	r2, #128	@ 0x80
100433a8:	0152      	lsls	r2, r2, #5
100433aa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
100433ac:	003a      	movs	r2, r7
100433ae:	4b0b      	ldr	r3, [pc, #44]	@ (100433dc <TIMERS_Init+0x8c>)
100433b0:	0011      	movs	r1, r2
100433b2:	0018      	movs	r0, r3
100433b4:	f007 f8c6 	bl	1004a544 <HAL_TIM_ConfigClockSource>
100433b8:	1e03      	subs	r3, r0, #0
100433ba:	d001      	beq.n	100433c0 <TIMERS_Init+0x70>
	{
		Error_Handler();
100433bc:	f7fe f8c0 	bl	10041540 <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
100433c0:	4b06      	ldr	r3, [pc, #24]	@ (100433dc <TIMERS_Init+0x8c>)
100433c2:	0018      	movs	r0, r3
100433c4:	f006 ff8a 	bl	1004a2dc <HAL_TIM_Base_Start_IT>
    initialized = 1;
100433c8:	4b03      	ldr	r3, [pc, #12]	@ (100433d8 <TIMERS_Init+0x88>)
100433ca:	2201      	movs	r2, #1
100433cc:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
100433ce:	2301      	movs	r3, #1
}
100433d0:	0018      	movs	r0, r3
100433d2:	46bd      	mov	sp, r7
100433d4:	b004      	add	sp, #16
100433d6:	bd80      	pop	{r7, pc}
100433d8:	20000688 	.word	0x20000688
100433dc:	20000648 	.word	0x20000648
100433e0:	40002000 	.word	0x40002000
100433e4:	000003e7 	.word	0x000003e7

100433e8 <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
100433e8:	b580      	push	{r7, lr}
100433ea:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100433ec:	4b05      	ldr	r3, [pc, #20]	@ (10043404 <TIMERS_GetMilliSeconds+0x1c>)
100433ee:	781b      	ldrb	r3, [r3, #0]
100433f0:	2b00      	cmp	r3, #0
100433f2:	d101      	bne.n	100433f8 <TIMERS_GetMilliSeconds+0x10>
100433f4:	2300      	movs	r3, #0
100433f6:	e001      	b.n	100433fc <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
100433f8:	4b03      	ldr	r3, [pc, #12]	@ (10043408 <TIMERS_GetMilliSeconds+0x20>)
100433fa:	681b      	ldr	r3, [r3, #0]
}
100433fc:	0018      	movs	r0, r3
100433fe:	46bd      	mov	sp, r7
10043400:	bd80      	pop	{r7, pc}
10043402:	46c0      	nop			@ (mov r8, r8)
10043404:	20000688 	.word	0x20000688
10043408:	20000684 	.word	0x20000684

1004340c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
1004340c:	b580      	push	{r7, lr}
1004340e:	af00      	add	r7, sp, #0

	milliSeconds++;
10043410:	4b05      	ldr	r3, [pc, #20]	@ (10043428 <TIM2_IRQHandler+0x1c>)
10043412:	681b      	ldr	r3, [r3, #0]
10043414:	1c5a      	adds	r2, r3, #1
10043416:	4b04      	ldr	r3, [pc, #16]	@ (10043428 <TIM2_IRQHandler+0x1c>)
10043418:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
1004341a:	4b04      	ldr	r3, [pc, #16]	@ (1004342c <TIM2_IRQHandler+0x20>)
1004341c:	0018      	movs	r0, r3
1004341e:	f006 ffa3 	bl	1004a368 <HAL_TIM_IRQHandler>
}
10043422:	46c0      	nop			@ (mov r8, r8)
10043424:	46bd      	mov	sp, r7
10043426:	bd80      	pop	{r7, pc}
10043428:	20000684 	.word	0x20000684
1004342c:	20000648 	.word	0x20000648

10043430 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *LPUARTx)
{
10043430:	b580      	push	{r7, lr}
10043432:	b082      	sub	sp, #8
10043434:	af00      	add	r7, sp, #0
10043436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
10043438:	687b      	ldr	r3, [r7, #4]
1004343a:	69db      	ldr	r3, [r3, #28]
1004343c:	2280      	movs	r2, #128	@ 0x80
1004343e:	4013      	ands	r3, r2
10043440:	2b80      	cmp	r3, #128	@ 0x80
10043442:	d101      	bne.n	10043448 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
10043444:	2301      	movs	r3, #1
10043446:	e000      	b.n	1004344a <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
10043448:	2300      	movs	r3, #0
}
1004344a:	0018      	movs	r0, r3
1004344c:	46bd      	mov	sp, r7
1004344e:	b002      	add	sp, #8
10043450:	bd80      	pop	{r7, pc}
	...

10043454 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10043454:	b580      	push	{r7, lr}
10043456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
10043458:	4b03      	ldr	r3, [pc, #12]	@ (10043468 <LPUART1_IRQHandler+0x14>)
1004345a:	0018      	movs	r0, r3
1004345c:	f007 fac4 	bl	1004a9e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10043460:	46c0      	nop			@ (mov r8, r8)
10043462:	46bd      	mov	sp, r7
10043464:	bd80      	pop	{r7, pc}
10043466:	46c0      	nop			@ (mov r8, r8)
10043468:	2000068c 	.word	0x2000068c

1004346c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
1004346c:	b580      	push	{r7, lr}
1004346e:	b082      	sub	sp, #8
10043470:	af00      	add	r7, sp, #0

	if(husart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
10043472:	4b49      	ldr	r3, [pc, #292]	@ (10043598 <USART1_IRQHandler+0x12c>)
10043474:	681b      	ldr	r3, [r3, #0]
10043476:	69db      	ldr	r3, [r3, #28]
10043478:	2220      	movs	r2, #32
1004347a:	4013      	ands	r3, r2
1004347c:	d03d      	beq.n	100434fa <USART1_IRQHandler+0x8e>
		if(!USARTrx.full){
1004347e:	4b47      	ldr	r3, [pc, #284]	@ (1004359c <USART1_IRQHandler+0x130>)
10043480:	4a47      	ldr	r2, [pc, #284]	@ (100435a0 <USART1_IRQHandler+0x134>)
10043482:	5c9b      	ldrb	r3, [r3, r2]
10043484:	2201      	movs	r2, #1
10043486:	4053      	eors	r3, r2
10043488:	b2db      	uxtb	r3, r3
1004348a:	2b00      	cmp	r3, #0
1004348c:	d02b      	beq.n	100434e6 <USART1_IRQHandler+0x7a>
			USARTrx.data[USARTrx.head] = husart1.Instance->RDR;
1004348e:	4b42      	ldr	r3, [pc, #264]	@ (10043598 <USART1_IRQHandler+0x12c>)
10043490:	681b      	ldr	r3, [r3, #0]
10043492:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10043494:	4b41      	ldr	r3, [pc, #260]	@ (1004359c <USART1_IRQHandler+0x130>)
10043496:	4a43      	ldr	r2, [pc, #268]	@ (100435a4 <USART1_IRQHandler+0x138>)
10043498:	5a9b      	ldrh	r3, [r3, r2]
1004349a:	001a      	movs	r2, r3
1004349c:	b2c9      	uxtb	r1, r1
1004349e:	4b3f      	ldr	r3, [pc, #252]	@ (1004359c <USART1_IRQHandler+0x130>)
100434a0:	5499      	strb	r1, [r3, r2]
			USARTrx.head++;
100434a2:	4b3e      	ldr	r3, [pc, #248]	@ (1004359c <USART1_IRQHandler+0x130>)
100434a4:	4a3f      	ldr	r2, [pc, #252]	@ (100435a4 <USART1_IRQHandler+0x138>)
100434a6:	5a9b      	ldrh	r3, [r3, r2]
100434a8:	3301      	adds	r3, #1
100434aa:	b299      	uxth	r1, r3
100434ac:	4b3b      	ldr	r3, [pc, #236]	@ (1004359c <USART1_IRQHandler+0x130>)
100434ae:	4a3d      	ldr	r2, [pc, #244]	@ (100435a4 <USART1_IRQHandler+0x138>)
100434b0:	5299      	strh	r1, [r3, r2]
			USARTrx.head %= UARTCIRCBUFFSIZE;
100434b2:	4b3a      	ldr	r3, [pc, #232]	@ (1004359c <USART1_IRQHandler+0x130>)
100434b4:	4a3b      	ldr	r2, [pc, #236]	@ (100435a4 <USART1_IRQHandler+0x138>)
100434b6:	5a9b      	ldrh	r3, [r3, r2]
100434b8:	493b      	ldr	r1, [pc, #236]	@ (100435a8 <USART1_IRQHandler+0x13c>)
100434ba:	0018      	movs	r0, r3
100434bc:	f7fc ff46 	bl	1004034c <__aeabi_uidivmod>
100434c0:	000b      	movs	r3, r1
100434c2:	b299      	uxth	r1, r3
100434c4:	4b35      	ldr	r3, [pc, #212]	@ (1004359c <USART1_IRQHandler+0x130>)
100434c6:	4a37      	ldr	r2, [pc, #220]	@ (100435a4 <USART1_IRQHandler+0x138>)
100434c8:	5299      	strh	r1, [r3, r2]
			if(USARTrx.tail == USARTrx.head){
100434ca:	4a34      	ldr	r2, [pc, #208]	@ (1004359c <USART1_IRQHandler+0x130>)
100434cc:	2381      	movs	r3, #129	@ 0x81
100434ce:	009b      	lsls	r3, r3, #2
100434d0:	5ad2      	ldrh	r2, [r2, r3]
100434d2:	4b32      	ldr	r3, [pc, #200]	@ (1004359c <USART1_IRQHandler+0x130>)
100434d4:	4933      	ldr	r1, [pc, #204]	@ (100435a4 <USART1_IRQHandler+0x138>)
100434d6:	5a5b      	ldrh	r3, [r3, r1]
100434d8:	429a      	cmp	r2, r3
100434da:	d10e      	bne.n	100434fa <USART1_IRQHandler+0x8e>
				USARTrx.full = true;
100434dc:	4b2f      	ldr	r3, [pc, #188]	@ (1004359c <USART1_IRQHandler+0x130>)
100434de:	4a30      	ldr	r2, [pc, #192]	@ (100435a0 <USART1_IRQHandler+0x134>)
100434e0:	2101      	movs	r1, #1
100434e2:	5499      	strb	r1, [r3, r2]
100434e4:	e009      	b.n	100434fa <USART1_IRQHandler+0x8e>
			}
		} else {
			uint8_t discard = husart1.Instance->RDR;
100434e6:	4b2c      	ldr	r3, [pc, #176]	@ (10043598 <USART1_IRQHandler+0x12c>)
100434e8:	681b      	ldr	r3, [r3, #0]
100434ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100434ec:	1dfb      	adds	r3, r7, #7
100434ee:	701a      	strb	r2, [r3, #0]
			discard++;
100434f0:	1dfb      	adds	r3, r7, #7
100434f2:	781a      	ldrb	r2, [r3, #0]
100434f4:	1dfb      	adds	r3, r7, #7
100434f6:	3201      	adds	r2, #1
100434f8:	701a      	strb	r2, [r3, #0]
		}
	}
	if((husart1.Instance->ISR & USART_ISR_TC_Msk)){
100434fa:	4b27      	ldr	r3, [pc, #156]	@ (10043598 <USART1_IRQHandler+0x12c>)
100434fc:	681b      	ldr	r3, [r3, #0]
100434fe:	69db      	ldr	r3, [r3, #28]
10043500:	2240      	movs	r2, #64	@ 0x40
10043502:	4013      	ands	r3, r2
10043504:	d03d      	beq.n	10043582 <USART1_IRQHandler+0x116>
		if(USARTtx.head != USARTtx.tail || USARTtx.full){
10043506:	4b29      	ldr	r3, [pc, #164]	@ (100435ac <USART1_IRQHandler+0x140>)
10043508:	4a26      	ldr	r2, [pc, #152]	@ (100435a4 <USART1_IRQHandler+0x138>)
1004350a:	5a9a      	ldrh	r2, [r3, r2]
1004350c:	4927      	ldr	r1, [pc, #156]	@ (100435ac <USART1_IRQHandler+0x140>)
1004350e:	2381      	movs	r3, #129	@ 0x81
10043510:	009b      	lsls	r3, r3, #2
10043512:	5acb      	ldrh	r3, [r1, r3]
10043514:	429a      	cmp	r2, r3
10043516:	d104      	bne.n	10043522 <USART1_IRQHandler+0xb6>
10043518:	4b24      	ldr	r3, [pc, #144]	@ (100435ac <USART1_IRQHandler+0x140>)
1004351a:	4a21      	ldr	r2, [pc, #132]	@ (100435a0 <USART1_IRQHandler+0x134>)
1004351c:	5c9b      	ldrb	r3, [r3, r2]
1004351e:	2b00      	cmp	r3, #0
10043520:	d02b      	beq.n	1004357a <USART1_IRQHandler+0x10e>
			husart1.Instance->TDR = USARTtx.data[USARTtx.tail];
10043522:	4a22      	ldr	r2, [pc, #136]	@ (100435ac <USART1_IRQHandler+0x140>)
10043524:	2381      	movs	r3, #129	@ 0x81
10043526:	009b      	lsls	r3, r3, #2
10043528:	5ad3      	ldrh	r3, [r2, r3]
1004352a:	001a      	movs	r2, r3
1004352c:	4b1f      	ldr	r3, [pc, #124]	@ (100435ac <USART1_IRQHandler+0x140>)
1004352e:	5c9a      	ldrb	r2, [r3, r2]
10043530:	4b19      	ldr	r3, [pc, #100]	@ (10043598 <USART1_IRQHandler+0x12c>)
10043532:	681b      	ldr	r3, [r3, #0]
10043534:	629a      	str	r2, [r3, #40]	@ 0x28
			USARTtx.tail++;
10043536:	4a1d      	ldr	r2, [pc, #116]	@ (100435ac <USART1_IRQHandler+0x140>)
10043538:	2381      	movs	r3, #129	@ 0x81
1004353a:	009b      	lsls	r3, r3, #2
1004353c:	5ad3      	ldrh	r3, [r2, r3]
1004353e:	3301      	adds	r3, #1
10043540:	b299      	uxth	r1, r3
10043542:	4a1a      	ldr	r2, [pc, #104]	@ (100435ac <USART1_IRQHandler+0x140>)
10043544:	2381      	movs	r3, #129	@ 0x81
10043546:	009b      	lsls	r3, r3, #2
10043548:	52d1      	strh	r1, [r2, r3]
			USARTtx.tail %= UARTCIRCBUFFSIZE;
1004354a:	4a18      	ldr	r2, [pc, #96]	@ (100435ac <USART1_IRQHandler+0x140>)
1004354c:	2381      	movs	r3, #129	@ 0x81
1004354e:	009b      	lsls	r3, r3, #2
10043550:	5ad3      	ldrh	r3, [r2, r3]
10043552:	4915      	ldr	r1, [pc, #84]	@ (100435a8 <USART1_IRQHandler+0x13c>)
10043554:	0018      	movs	r0, r3
10043556:	f7fc fef9 	bl	1004034c <__aeabi_uidivmod>
1004355a:	000b      	movs	r3, r1
1004355c:	b299      	uxth	r1, r3
1004355e:	4a13      	ldr	r2, [pc, #76]	@ (100435ac <USART1_IRQHandler+0x140>)
10043560:	2381      	movs	r3, #129	@ 0x81
10043562:	009b      	lsls	r3, r3, #2
10043564:	52d1      	strh	r1, [r2, r3]
			if(USARTtx.full){
10043566:	4b11      	ldr	r3, [pc, #68]	@ (100435ac <USART1_IRQHandler+0x140>)
10043568:	4a0d      	ldr	r2, [pc, #52]	@ (100435a0 <USART1_IRQHandler+0x134>)
1004356a:	5c9b      	ldrb	r3, [r3, r2]
1004356c:	2b00      	cmp	r3, #0
1004356e:	d008      	beq.n	10043582 <USART1_IRQHandler+0x116>
				USARTrx.full = false;
10043570:	4b0a      	ldr	r3, [pc, #40]	@ (1004359c <USART1_IRQHandler+0x130>)
10043572:	4a0b      	ldr	r2, [pc, #44]	@ (100435a0 <USART1_IRQHandler+0x134>)
10043574:	2100      	movs	r1, #0
10043576:	5499      	strb	r1, [r3, r2]
			if(USARTtx.full){
10043578:	e003      	b.n	10043582 <USART1_IRQHandler+0x116>
			}

		} else {
			__HAL_UART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
1004357a:	4b07      	ldr	r3, [pc, #28]	@ (10043598 <USART1_IRQHandler+0x12c>)
1004357c:	681b      	ldr	r3, [r3, #0]
1004357e:	2240      	movs	r2, #64	@ 0x40
10043580:	621a      	str	r2, [r3, #32]
		}
	}
	BSP_LED_Toggle(LED_RED);
10043582:	2002      	movs	r0, #2
10043584:	f001 f8b8 	bl	100446f8 <BSP_LED_Toggle>
	HAL_UART_IRQHandler(&husart1);
10043588:	4b03      	ldr	r3, [pc, #12]	@ (10043598 <USART1_IRQHandler+0x12c>)
1004358a:	0018      	movs	r0, r3
1004358c:	f007 fa2c 	bl	1004a9e8 <HAL_UART_IRQHandler>

}
10043590:	46c0      	nop			@ (mov r8, r8)
10043592:	46bd      	mov	sp, r7
10043594:	b002      	add	sp, #8
10043596:	bd80      	pop	{r7, pc}
10043598:	20000758 	.word	0x20000758
1004359c:	20000a2c 	.word	0x20000a2c
100435a0:	00000206 	.word	0x00000206
100435a4:	00000202 	.word	0x00000202
100435a8:	00000201 	.word	0x00000201
100435ac:	20000824 	.word	0x20000824

100435b0 <UARTs_Init>:
 * @function: UARTs_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UARTs_Init(void){
100435b0:	b580      	push	{r7, lr}
100435b2:	af00      	add	r7, sp, #0

	if(initialized == 1){ return 0;}
100435b4:	4b5d      	ldr	r3, [pc, #372]	@ (1004372c <UARTs_Init+0x17c>)
100435b6:	781b      	ldrb	r3, [r3, #0]
100435b8:	2b01      	cmp	r3, #1
100435ba:	d101      	bne.n	100435c0 <UARTs_Init+0x10>
100435bc:	2300      	movs	r3, #0
100435be:	e0b1      	b.n	10043724 <UARTs_Init+0x174>
	initialized = 1;
100435c0:	4b5a      	ldr	r3, [pc, #360]	@ (1004372c <UARTs_Init+0x17c>)
100435c2:	2201      	movs	r2, #1
100435c4:	701a      	strb	r2, [r3, #0]
	hlpuart1.Instance = LPUART1;
100435c6:	4b5a      	ldr	r3, [pc, #360]	@ (10043730 <UARTs_Init+0x180>)
100435c8:	4a5a      	ldr	r2, [pc, #360]	@ (10043734 <UARTs_Init+0x184>)
100435ca:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
100435cc:	4b58      	ldr	r3, [pc, #352]	@ (10043730 <UARTs_Init+0x180>)
100435ce:	2296      	movs	r2, #150	@ 0x96
100435d0:	0192      	lsls	r2, r2, #6
100435d2:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
100435d4:	4b56      	ldr	r3, [pc, #344]	@ (10043730 <UARTs_Init+0x180>)
100435d6:	2200      	movs	r2, #0
100435d8:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
100435da:	4b55      	ldr	r3, [pc, #340]	@ (10043730 <UARTs_Init+0x180>)
100435dc:	2200      	movs	r2, #0
100435de:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
100435e0:	4b53      	ldr	r3, [pc, #332]	@ (10043730 <UARTs_Init+0x180>)
100435e2:	2200      	movs	r2, #0
100435e4:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
100435e6:	4b52      	ldr	r3, [pc, #328]	@ (10043730 <UARTs_Init+0x180>)
100435e8:	220c      	movs	r2, #12
100435ea:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100435ec:	4b50      	ldr	r3, [pc, #320]	@ (10043730 <UARTs_Init+0x180>)
100435ee:	2200      	movs	r2, #0
100435f0:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100435f2:	4b4f      	ldr	r3, [pc, #316]	@ (10043730 <UARTs_Init+0x180>)
100435f4:	2200      	movs	r2, #0
100435f6:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100435f8:	4b4d      	ldr	r3, [pc, #308]	@ (10043730 <UARTs_Init+0x180>)
100435fa:	2200      	movs	r2, #0
100435fc:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100435fe:	4b4c      	ldr	r3, [pc, #304]	@ (10043730 <UARTs_Init+0x180>)
10043600:	2200      	movs	r2, #0
10043602:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
10043604:	4b4a      	ldr	r3, [pc, #296]	@ (10043730 <UARTs_Init+0x180>)
10043606:	2280      	movs	r2, #128	@ 0x80
10043608:	0592      	lsls	r2, r2, #22
1004360a:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
1004360c:	4b48      	ldr	r3, [pc, #288]	@ (10043730 <UARTs_Init+0x180>)
1004360e:	0018      	movs	r0, r3
10043610:	f007 f982 	bl	1004a918 <HAL_UART_Init>
10043614:	1e03      	subs	r3, r0, #0
10043616:	d001      	beq.n	1004361c <UARTs_Init+0x6c>
	{
		Error_Handler();
10043618:	f7fd ff92 	bl	10041540 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
1004361c:	4b44      	ldr	r3, [pc, #272]	@ (10043730 <UARTs_Init+0x180>)
1004361e:	2100      	movs	r1, #0
10043620:	0018      	movs	r0, r3
10043622:	f008 fa03 	bl	1004ba2c <HAL_UARTEx_SetTxFifoThreshold>
10043626:	1e03      	subs	r3, r0, #0
10043628:	d001      	beq.n	1004362e <UARTs_Init+0x7e>
	{
		Error_Handler();
1004362a:	f7fd ff89 	bl	10041540 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1004362e:	4b40      	ldr	r3, [pc, #256]	@ (10043730 <UARTs_Init+0x180>)
10043630:	2100      	movs	r1, #0
10043632:	0018      	movs	r0, r3
10043634:	f008 fa3a 	bl	1004baac <HAL_UARTEx_SetRxFifoThreshold>
10043638:	1e03      	subs	r3, r0, #0
1004363a:	d001      	beq.n	10043640 <UARTs_Init+0x90>
	{
		Error_Handler();
1004363c:	f7fd ff80 	bl	10041540 <Error_Handler>
	}
	husart1.Instance = USART1;
10043640:	4b3d      	ldr	r3, [pc, #244]	@ (10043738 <UARTs_Init+0x188>)
10043642:	4a3e      	ldr	r2, [pc, #248]	@ (1004373c <UARTs_Init+0x18c>)
10043644:	601a      	str	r2, [r3, #0]
//	BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
//	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
//	{
//		Error_Handler();
//	}
	husart1.Instance = USART1;
10043646:	4b3c      	ldr	r3, [pc, #240]	@ (10043738 <UARTs_Init+0x188>)
10043648:	4a3c      	ldr	r2, [pc, #240]	@ (1004373c <UARTs_Init+0x18c>)
1004364a:	601a      	str	r2, [r3, #0]
	husart1.Init.BaudRate = 9600;
1004364c:	4b3a      	ldr	r3, [pc, #232]	@ (10043738 <UARTs_Init+0x188>)
1004364e:	2296      	movs	r2, #150	@ 0x96
10043650:	0192      	lsls	r2, r2, #6
10043652:	605a      	str	r2, [r3, #4]
	husart1.Init.WordLength = UART_WORDLENGTH_8B;
10043654:	4b38      	ldr	r3, [pc, #224]	@ (10043738 <UARTs_Init+0x188>)
10043656:	2200      	movs	r2, #0
10043658:	609a      	str	r2, [r3, #8]
	husart1.Init.StopBits = UART_STOPBITS_1;
1004365a:	4b37      	ldr	r3, [pc, #220]	@ (10043738 <UARTs_Init+0x188>)
1004365c:	2200      	movs	r2, #0
1004365e:	60da      	str	r2, [r3, #12]
	husart1.Init.Parity = UART_PARITY_NONE;
10043660:	4b35      	ldr	r3, [pc, #212]	@ (10043738 <UARTs_Init+0x188>)
10043662:	2200      	movs	r2, #0
10043664:	611a      	str	r2, [r3, #16]
	husart1.Init.Mode = UART_MODE_TX_RX;
10043666:	4b34      	ldr	r3, [pc, #208]	@ (10043738 <UARTs_Init+0x188>)
10043668:	220c      	movs	r2, #12
1004366a:	615a      	str	r2, [r3, #20]
	husart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1004366c:	4b32      	ldr	r3, [pc, #200]	@ (10043738 <UARTs_Init+0x188>)
1004366e:	2200      	movs	r2, #0
10043670:	619a      	str	r2, [r3, #24]
	husart1.Init.OverSampling = UART_OVERSAMPLING_16;
10043672:	4b31      	ldr	r3, [pc, #196]	@ (10043738 <UARTs_Init+0x188>)
10043674:	2200      	movs	r2, #0
10043676:	61da      	str	r2, [r3, #28]
	husart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10043678:	4b2f      	ldr	r3, [pc, #188]	@ (10043738 <UARTs_Init+0x188>)
1004367a:	2200      	movs	r2, #0
1004367c:	621a      	str	r2, [r3, #32]
	husart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1004367e:	4b2e      	ldr	r3, [pc, #184]	@ (10043738 <UARTs_Init+0x188>)
10043680:	2200      	movs	r2, #0
10043682:	625a      	str	r2, [r3, #36]	@ 0x24
	husart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10043684:	4b2c      	ldr	r3, [pc, #176]	@ (10043738 <UARTs_Init+0x188>)
10043686:	2200      	movs	r2, #0
10043688:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&husart1) != HAL_OK)
1004368a:	4b2b      	ldr	r3, [pc, #172]	@ (10043738 <UARTs_Init+0x188>)
1004368c:	0018      	movs	r0, r3
1004368e:	f007 f943 	bl	1004a918 <HAL_UART_Init>
10043692:	1e03      	subs	r3, r0, #0
10043694:	d001      	beq.n	1004369a <UARTs_Init+0xea>
	{
		Error_Handler();
10043696:	f7fd ff53 	bl	10041540 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&husart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
1004369a:	4b27      	ldr	r3, [pc, #156]	@ (10043738 <UARTs_Init+0x188>)
1004369c:	2100      	movs	r1, #0
1004369e:	0018      	movs	r0, r3
100436a0:	f008 f9c4 	bl	1004ba2c <HAL_UARTEx_SetTxFifoThreshold>
100436a4:	1e03      	subs	r3, r0, #0
100436a6:	d001      	beq.n	100436ac <UARTs_Init+0xfc>
	{
		Error_Handler();
100436a8:	f7fd ff4a 	bl	10041540 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&husart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100436ac:	4b22      	ldr	r3, [pc, #136]	@ (10043738 <UARTs_Init+0x188>)
100436ae:	2100      	movs	r1, #0
100436b0:	0018      	movs	r0, r3
100436b2:	f008 f9fb 	bl	1004baac <HAL_UARTEx_SetRxFifoThreshold>
100436b6:	1e03      	subs	r3, r0, #0
100436b8:	d001      	beq.n	100436be <UARTs_Init+0x10e>
	{
		Error_Handler();
100436ba:	f7fd ff41 	bl	10041540 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&husart1) != HAL_OK)
100436be:	4b1e      	ldr	r3, [pc, #120]	@ (10043738 <UARTs_Init+0x188>)
100436c0:	0018      	movs	r0, r3
100436c2:	f008 f979 	bl	1004b9b8 <HAL_UARTEx_DisableFifoMode>
100436c6:	1e03      	subs	r3, r0, #0
100436c8:	d001      	beq.n	100436ce <UARTs_Init+0x11e>
	{
		Error_Handler();
100436ca:	f7fd ff39 	bl	10041540 <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
100436ce:	2201      	movs	r2, #1
100436d0:	2101      	movs	r1, #1
100436d2:	2008      	movs	r0, #8
100436d4:	f001 fa0c 	bl	10044af0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
100436d8:	2008      	movs	r0, #8
100436da:	f001 fa1e 	bl	10044b1a <HAL_NVIC_EnableIRQ>
	husart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
100436de:	4b16      	ldr	r3, [pc, #88]	@ (10043738 <UARTs_Init+0x188>)
100436e0:	681b      	ldr	r3, [r3, #0]
100436e2:	681a      	ldr	r2, [r3, #0]
100436e4:	4b14      	ldr	r3, [pc, #80]	@ (10043738 <UARTs_Init+0x188>)
100436e6:	681b      	ldr	r3, [r3, #0]
100436e8:	2160      	movs	r1, #96	@ 0x60
100436ea:	430a      	orrs	r2, r1
100436ec:	601a      	str	r2, [r3, #0]

	USARTtx.tail = 0;
100436ee:	4a14      	ldr	r2, [pc, #80]	@ (10043740 <UARTs_Init+0x190>)
100436f0:	2381      	movs	r3, #129	@ 0x81
100436f2:	009b      	lsls	r3, r3, #2
100436f4:	2100      	movs	r1, #0
100436f6:	52d1      	strh	r1, [r2, r3]
	USARTtx.head = 0;
100436f8:	4b11      	ldr	r3, [pc, #68]	@ (10043740 <UARTs_Init+0x190>)
100436fa:	4a12      	ldr	r2, [pc, #72]	@ (10043744 <UARTs_Init+0x194>)
100436fc:	2100      	movs	r1, #0
100436fe:	5299      	strh	r1, [r3, r2]
	USARTtx.full = false;
10043700:	4b0f      	ldr	r3, [pc, #60]	@ (10043740 <UARTs_Init+0x190>)
10043702:	4a11      	ldr	r2, [pc, #68]	@ (10043748 <UARTs_Init+0x198>)
10043704:	2100      	movs	r1, #0
10043706:	5499      	strb	r1, [r3, r2]

	USARTrx.tail = 0;
10043708:	4a10      	ldr	r2, [pc, #64]	@ (1004374c <UARTs_Init+0x19c>)
1004370a:	2381      	movs	r3, #129	@ 0x81
1004370c:	009b      	lsls	r3, r3, #2
1004370e:	2100      	movs	r1, #0
10043710:	52d1      	strh	r1, [r2, r3]
	USARTrx.head = 0;
10043712:	4b0e      	ldr	r3, [pc, #56]	@ (1004374c <UARTs_Init+0x19c>)
10043714:	4a0b      	ldr	r2, [pc, #44]	@ (10043744 <UARTs_Init+0x194>)
10043716:	2100      	movs	r1, #0
10043718:	5299      	strh	r1, [r3, r2]
	USARTrx.full = false;
1004371a:	4b0c      	ldr	r3, [pc, #48]	@ (1004374c <UARTs_Init+0x19c>)
1004371c:	4a0a      	ldr	r2, [pc, #40]	@ (10043748 <UARTs_Init+0x198>)
1004371e:	2100      	movs	r1, #0
10043720:	5499      	strb	r1, [r3, r2]

//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return 0;//not INIT_OK to have compatibility with the BLE trace function calls
10043722:	2300      	movs	r3, #0
}
10043724:	0018      	movs	r0, r3
10043726:	46bd      	mov	sp, r7
10043728:	bd80      	pop	{r7, pc}
1004372a:	46c0      	nop			@ (mov r8, r8)
1004372c:	20000c34 	.word	0x20000c34
10043730:	2000068c 	.word	0x2000068c
10043734:	41005000 	.word	0x41005000
10043738:	20000758 	.word	0x20000758
1004373c:	41004000 	.word	0x41004000
10043740:	20000824 	.word	0x20000824
10043744:	00000202 	.word	0x00000202
10043748:	00000206 	.word	0x00000206
1004374c:	20000a2c 	.word	0x20000a2c

10043750 <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
10043750:	b580      	push	{r7, lr}
10043752:	b082      	sub	sp, #8
10043754:	af00      	add	r7, sp, #0
10043756:	0002      	movs	r2, r0
10043758:	1dfb      	adds	r3, r7, #7
1004375a:	701a      	strb	r2, [r3, #0]
	if (LL_LPUART_IsActiveFlag_TXE_TXFNF(LPUART1)){
1004375c:	4b08      	ldr	r3, [pc, #32]	@ (10043780 <LPUART_WriteTx+0x30>)
1004375e:	0018      	movs	r0, r3
10043760:	f7ff fe66 	bl	10043430 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
10043764:	1e03      	subs	r3, r0, #0
10043766:	d005      	beq.n	10043774 <LPUART_WriteTx+0x24>
		LL_LPUART_WriteReg(LPUART1, TDR, input);
10043768:	4b05      	ldr	r3, [pc, #20]	@ (10043780 <LPUART_WriteTx+0x30>)
1004376a:	1dfa      	adds	r2, r7, #7
1004376c:	7812      	ldrb	r2, [r2, #0]
1004376e:	629a      	str	r2, [r3, #40]	@ 0x28
		return UARTSUCCESS;
10043770:	2300      	movs	r3, #0
10043772:	e000      	b.n	10043776 <LPUART_WriteTx+0x26>
	}else {
		return UARTFAILED;
10043774:	2325      	movs	r3, #37	@ 0x25
	}
}
10043776:	0018      	movs	r0, r3
10043778:	46bd      	mov	sp, r7
1004377a:	b002      	add	sp, #8
1004377c:	bd80      	pop	{r7, pc}
1004377e:	46c0      	nop			@ (mov r8, r8)
10043780:	41005000 	.word	0x41005000

10043784 <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
10043784:	b580      	push	{r7, lr}
10043786:	b082      	sub	sp, #8
10043788:	af00      	add	r7, sp, #0
	if(USARTrx.head != USARTrx.tail || USARTrx.full){
1004378a:	4b1b      	ldr	r3, [pc, #108]	@ (100437f8 <USART_ReadRx+0x74>)
1004378c:	4a1b      	ldr	r2, [pc, #108]	@ (100437fc <USART_ReadRx+0x78>)
1004378e:	5a9a      	ldrh	r2, [r3, r2]
10043790:	4919      	ldr	r1, [pc, #100]	@ (100437f8 <USART_ReadRx+0x74>)
10043792:	2381      	movs	r3, #129	@ 0x81
10043794:	009b      	lsls	r3, r3, #2
10043796:	5acb      	ldrh	r3, [r1, r3]
10043798:	429a      	cmp	r2, r3
1004379a:	d104      	bne.n	100437a6 <USART_ReadRx+0x22>
1004379c:	4b16      	ldr	r3, [pc, #88]	@ (100437f8 <USART_ReadRx+0x74>)
1004379e:	4a18      	ldr	r2, [pc, #96]	@ (10043800 <USART_ReadRx+0x7c>)
100437a0:	5c9b      	ldrb	r3, [r3, r2]
100437a2:	2b00      	cmp	r3, #0
100437a4:	d023      	beq.n	100437ee <USART_ReadRx+0x6a>
		char data = USARTrx.data[USARTrx.tail];
100437a6:	4a14      	ldr	r2, [pc, #80]	@ (100437f8 <USART_ReadRx+0x74>)
100437a8:	2381      	movs	r3, #129	@ 0x81
100437aa:	009b      	lsls	r3, r3, #2
100437ac:	5ad3      	ldrh	r3, [r2, r3]
100437ae:	0019      	movs	r1, r3
100437b0:	1dfb      	adds	r3, r7, #7
100437b2:	4a11      	ldr	r2, [pc, #68]	@ (100437f8 <USART_ReadRx+0x74>)
100437b4:	5c52      	ldrb	r2, [r2, r1]
100437b6:	701a      	strb	r2, [r3, #0]
		USARTrx.tail++;
100437b8:	4a0f      	ldr	r2, [pc, #60]	@ (100437f8 <USART_ReadRx+0x74>)
100437ba:	2381      	movs	r3, #129	@ 0x81
100437bc:	009b      	lsls	r3, r3, #2
100437be:	5ad3      	ldrh	r3, [r2, r3]
100437c0:	3301      	adds	r3, #1
100437c2:	b299      	uxth	r1, r3
100437c4:	4a0c      	ldr	r2, [pc, #48]	@ (100437f8 <USART_ReadRx+0x74>)
100437c6:	2381      	movs	r3, #129	@ 0x81
100437c8:	009b      	lsls	r3, r3, #2
100437ca:	52d1      	strh	r1, [r2, r3]
		USARTrx.tail %= UARTCIRCBUFFSIZE;
100437cc:	4a0a      	ldr	r2, [pc, #40]	@ (100437f8 <USART_ReadRx+0x74>)
100437ce:	2381      	movs	r3, #129	@ 0x81
100437d0:	009b      	lsls	r3, r3, #2
100437d2:	5ad3      	ldrh	r3, [r2, r3]
100437d4:	490b      	ldr	r1, [pc, #44]	@ (10043804 <USART_ReadRx+0x80>)
100437d6:	0018      	movs	r0, r3
100437d8:	f7fc fdb8 	bl	1004034c <__aeabi_uidivmod>
100437dc:	000b      	movs	r3, r1
100437de:	b299      	uxth	r1, r3
100437e0:	4a05      	ldr	r2, [pc, #20]	@ (100437f8 <USART_ReadRx+0x74>)
100437e2:	2381      	movs	r3, #129	@ 0x81
100437e4:	009b      	lsls	r3, r3, #2
100437e6:	52d1      	strh	r1, [r2, r3]
		return data;
100437e8:	1dfb      	adds	r3, r7, #7
100437ea:	781b      	ldrb	r3, [r3, #0]
100437ec:	e000      	b.n	100437f0 <USART_ReadRx+0x6c>
	} else {
		return UARTFAILED;
100437ee:	2325      	movs	r3, #37	@ 0x25
	}
}
100437f0:	0018      	movs	r0, r3
100437f2:	46bd      	mov	sp, r7
100437f4:	b002      	add	sp, #8
100437f6:	bd80      	pop	{r7, pc}
100437f8:	20000a2c 	.word	0x20000a2c
100437fc:	00000202 	.word	0x00000202
10043800:	00000206 	.word	0x00000206
10043804:	00000201 	.word	0x00000201

10043808 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
10043808:	b580      	push	{r7, lr}
1004380a:	b082      	sub	sp, #8
1004380c:	af00      	add	r7, sp, #0
1004380e:	0002      	movs	r2, r0
10043810:	1dfb      	adds	r3, r7, #7
10043812:	701a      	strb	r2, [r3, #0]
	if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
10043814:	f00b fc22 	bl	1004f05c <APP_BLE_Get_Server_Connection_Status>
10043818:	0003      	movs	r3, r0
1004381a:	2b02      	cmp	r3, #2
1004381c:	d104      	bne.n	10043828 <USART_WriteTx+0x20>
		BLUETOOTH_WriteBuffer(input);
1004381e:	1dfb      	adds	r3, r7, #7
10043820:	781b      	ldrb	r3, [r3, #0]
10043822:	0018      	movs	r0, r3
10043824:	f7fd fd66 	bl	100412f4 <BLUETOOTH_WriteBuffer>
	}
	if(!USARTtx.full){
10043828:	4b1f      	ldr	r3, [pc, #124]	@ (100438a8 <USART_WriteTx+0xa0>)
1004382a:	4a20      	ldr	r2, [pc, #128]	@ (100438ac <USART_WriteTx+0xa4>)
1004382c:	5c9b      	ldrb	r3, [r3, r2]
1004382e:	2201      	movs	r2, #1
10043830:	4053      	eors	r3, r2
10043832:	b2db      	uxtb	r3, r3
10043834:	2b00      	cmp	r3, #0
10043836:	d032      	beq.n	1004389e <USART_WriteTx+0x96>
		if(USARTtx.head == USARTtx.tail && (husart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10043838:	4b1b      	ldr	r3, [pc, #108]	@ (100438a8 <USART_WriteTx+0xa0>)
1004383a:	4a1d      	ldr	r2, [pc, #116]	@ (100438b0 <USART_WriteTx+0xa8>)
1004383c:	5a9a      	ldrh	r2, [r3, r2]
1004383e:	491a      	ldr	r1, [pc, #104]	@ (100438a8 <USART_WriteTx+0xa0>)
10043840:	2381      	movs	r3, #129	@ 0x81
10043842:	009b      	lsls	r3, r3, #2
10043844:	5acb      	ldrh	r3, [r1, r3]
10043846:	429a      	cmp	r2, r3
10043848:	d10b      	bne.n	10043862 <USART_WriteTx+0x5a>
1004384a:	4b1a      	ldr	r3, [pc, #104]	@ (100438b4 <USART_WriteTx+0xac>)
1004384c:	681b      	ldr	r3, [r3, #0]
1004384e:	69db      	ldr	r3, [r3, #28]
10043850:	2280      	movs	r2, #128	@ 0x80
10043852:	4013      	ands	r3, r2
10043854:	d005      	beq.n	10043862 <USART_WriteTx+0x5a>
			husart1.Instance->TDR = input;
10043856:	4b17      	ldr	r3, [pc, #92]	@ (100438b4 <USART_WriteTx+0xac>)
10043858:	681b      	ldr	r3, [r3, #0]
1004385a:	1dfa      	adds	r2, r7, #7
1004385c:	7812      	ldrb	r2, [r2, #0]
1004385e:	629a      	str	r2, [r3, #40]	@ 0x28
10043860:	e01b      	b.n	1004389a <USART_WriteTx+0x92>
		} else {
			USARTtx.data[USARTtx.head] = input;
10043862:	4b11      	ldr	r3, [pc, #68]	@ (100438a8 <USART_WriteTx+0xa0>)
10043864:	4a12      	ldr	r2, [pc, #72]	@ (100438b0 <USART_WriteTx+0xa8>)
10043866:	5a9b      	ldrh	r3, [r3, r2]
10043868:	0019      	movs	r1, r3
1004386a:	4b0f      	ldr	r3, [pc, #60]	@ (100438a8 <USART_WriteTx+0xa0>)
1004386c:	1dfa      	adds	r2, r7, #7
1004386e:	7812      	ldrb	r2, [r2, #0]
10043870:	545a      	strb	r2, [r3, r1]
			USARTtx.head++;
10043872:	4b0d      	ldr	r3, [pc, #52]	@ (100438a8 <USART_WriteTx+0xa0>)
10043874:	4a0e      	ldr	r2, [pc, #56]	@ (100438b0 <USART_WriteTx+0xa8>)
10043876:	5a9b      	ldrh	r3, [r3, r2]
10043878:	3301      	adds	r3, #1
1004387a:	b299      	uxth	r1, r3
1004387c:	4b0a      	ldr	r3, [pc, #40]	@ (100438a8 <USART_WriteTx+0xa0>)
1004387e:	4a0c      	ldr	r2, [pc, #48]	@ (100438b0 <USART_WriteTx+0xa8>)
10043880:	5299      	strh	r1, [r3, r2]
			USARTtx.head %= UARTCIRCBUFFSIZE;
10043882:	4b09      	ldr	r3, [pc, #36]	@ (100438a8 <USART_WriteTx+0xa0>)
10043884:	4a0a      	ldr	r2, [pc, #40]	@ (100438b0 <USART_WriteTx+0xa8>)
10043886:	5a9b      	ldrh	r3, [r3, r2]
10043888:	490b      	ldr	r1, [pc, #44]	@ (100438b8 <USART_WriteTx+0xb0>)
1004388a:	0018      	movs	r0, r3
1004388c:	f7fc fd5e 	bl	1004034c <__aeabi_uidivmod>
10043890:	000b      	movs	r3, r1
10043892:	b299      	uxth	r1, r3
10043894:	4b04      	ldr	r3, [pc, #16]	@ (100438a8 <USART_WriteTx+0xa0>)
10043896:	4a06      	ldr	r2, [pc, #24]	@ (100438b0 <USART_WriteTx+0xa8>)
10043898:	5299      	strh	r1, [r3, r2]
		}
		return UARTSUCCESS;
1004389a:	2300      	movs	r3, #0
1004389c:	e000      	b.n	100438a0 <USART_WriteTx+0x98>
	} else {
		return UARTFAILED;
1004389e:	2325      	movs	r3, #37	@ 0x25
	}
}
100438a0:	0018      	movs	r0, r3
100438a2:	46bd      	mov	sp, r7
100438a4:	b002      	add	sp, #8
100438a6:	bd80      	pop	{r7, pc}
100438a8:	20000824 	.word	0x20000824
100438ac:	00000206 	.word	0x00000206
100438b0:	00000202 	.word	0x00000202
100438b4:	20000758 	.word	0x20000758
100438b8:	00000201 	.word	0x00000201

100438bc <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
100438bc:	b580      	push	{r7, lr}
100438be:	af00      	add	r7, sp, #0
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
100438c0:	4b0b      	ldr	r3, [pc, #44]	@ (100438f0 <USART_TxEmpty+0x34>)
100438c2:	4a0c      	ldr	r2, [pc, #48]	@ (100438f4 <USART_TxEmpty+0x38>)
100438c4:	5a9a      	ldrh	r2, [r3, r2]
100438c6:	490a      	ldr	r1, [pc, #40]	@ (100438f0 <USART_TxEmpty+0x34>)
100438c8:	2381      	movs	r3, #129	@ 0x81
100438ca:	009b      	lsls	r3, r3, #2
100438cc:	5acb      	ldrh	r3, [r1, r3]
100438ce:	429a      	cmp	r2, r3
100438d0:	d109      	bne.n	100438e6 <USART_TxEmpty+0x2a>
100438d2:	4b07      	ldr	r3, [pc, #28]	@ (100438f0 <USART_TxEmpty+0x34>)
100438d4:	4a08      	ldr	r2, [pc, #32]	@ (100438f8 <USART_TxEmpty+0x3c>)
100438d6:	5c9b      	ldrb	r3, [r3, r2]
100438d8:	2201      	movs	r2, #1
100438da:	4053      	eors	r3, r2
100438dc:	b2db      	uxtb	r3, r3
100438de:	2b00      	cmp	r3, #0
100438e0:	d001      	beq.n	100438e6 <USART_TxEmpty+0x2a>
100438e2:	2301      	movs	r3, #1
100438e4:	e000      	b.n	100438e8 <USART_TxEmpty+0x2c>
100438e6:	2300      	movs	r3, #0
100438e8:	b2db      	uxtb	r3, r3
}
100438ea:	0018      	movs	r0, r3
100438ec:	46bd      	mov	sp, r7
100438ee:	bd80      	pop	{r7, pc}
100438f0:	20000824 	.word	0x20000824
100438f4:	00000202 	.word	0x00000202
100438f8:	00000206 	.word	0x00000206

100438fc <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
100438fc:	b580      	push	{r7, lr}
100438fe:	b082      	sub	sp, #8
10043900:	af00      	add	r7, sp, #0
10043902:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10043904:	2000      	movs	r0, #0
10043906:	f00d fd91 	bl	1005142c <APP_DEBUG_SIGNAL_SET>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
1004390a:	f008 ffcd 	bl	1004c8a8 <HW_RNG_Init>
1004390e:	1e03      	subs	r3, r0, #0
10043910:	d001      	beq.n	10043916 <MX_APPE_Init+0x1a>
  {
    Error_Handler();
10043912:	f7fd fe15 	bl	10041540 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10043916:	f008 fe6b 	bl	1004c5f0 <HW_AES_Init>
  HW_PKA_Init();
1004391a:	f008 ff5d 	bl	1004c7d8 <HW_PKA_Init>
  APP_BLE_Init();
1004391e:	f00b f9d7 	bl	1004ecd0 <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10043922:	2000      	movs	r0, #0
10043924:	f00d fd8c 	bl	10051440 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10043928:	2300      	movs	r3, #0
}
1004392a:	0018      	movs	r0, r3
1004392c:	46bd      	mov	sp, r7
1004392e:	b002      	add	sp, #8
10043930:	bd80      	pop	{r7, pc}

10043932 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10043932:	b580      	push	{r7, lr}
10043934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10043936:	2301      	movs	r3, #1
10043938:	425b      	negs	r3, r3
1004393a:	0018      	movs	r0, r3
1004393c:	f00d fd90 	bl	10051460 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10043940:	46c0      	nop			@ (mov r8, r8)
10043942:	46bd      	mov	sp, r7
10043944:	bd80      	pop	{r7, pc}

10043946 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10043946:	b580      	push	{r7, lr}
10043948:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
1004394a:	46c0      	nop			@ (mov r8, r8)
}
1004394c:	46bd      	mov	sp, r7
1004394e:	bd80      	pop	{r7, pc}

10043950 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10043950:	b580      	push	{r7, lr}
10043952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10043954:	46c0      	nop			@ (mov r8, r8)
10043956:	46bd      	mov	sp, r7
10043958:	bd80      	pop	{r7, pc}

1004395a <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
1004395a:	b580      	push	{r7, lr}
1004395c:	b082      	sub	sp, #8
1004395e:	af00      	add	r7, sp, #0
10043960:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10043962:	687b      	ldr	r3, [r7, #4]
10043964:	691b      	ldr	r3, [r3, #16]
}
10043966:	0018      	movs	r0, r3
10043968:	46bd      	mov	sp, r7
1004396a:	b002      	add	sp, #8
1004396c:	bd80      	pop	{r7, pc}
	...

10043970 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10043970:	b580      	push	{r7, lr}
10043972:	b084      	sub	sp, #16
10043974:	af00      	add	r7, sp, #0
10043976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10043978:	4b07      	ldr	r3, [pc, #28]	@ (10043998 <LL_APB2_GRP1_EnableClock+0x28>)
1004397a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004397c:	4b06      	ldr	r3, [pc, #24]	@ (10043998 <LL_APB2_GRP1_EnableClock+0x28>)
1004397e:	687a      	ldr	r2, [r7, #4]
10043980:	430a      	orrs	r2, r1
10043982:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10043984:	4b04      	ldr	r3, [pc, #16]	@ (10043998 <LL_APB2_GRP1_EnableClock+0x28>)
10043986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043988:	687a      	ldr	r2, [r7, #4]
1004398a:	4013      	ands	r3, r2
1004398c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004398e:	68fb      	ldr	r3, [r7, #12]
}
10043990:	46c0      	nop			@ (mov r8, r8)
10043992:	46bd      	mov	sp, r7
10043994:	b004      	add	sp, #16
10043996:	bd80      	pop	{r7, pc}
10043998:	48400000 	.word	0x48400000

1004399c <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
1004399c:	b580      	push	{r7, lr}
1004399e:	b082      	sub	sp, #8
100439a0:	af00      	add	r7, sp, #0
100439a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100439a4:	4b06      	ldr	r3, [pc, #24]	@ (100439c0 <LL_APB2_GRP1_IsEnabledClock+0x24>)
100439a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100439a8:	687a      	ldr	r2, [r7, #4]
100439aa:	4013      	ands	r3, r2
100439ac:	687a      	ldr	r2, [r7, #4]
100439ae:	429a      	cmp	r2, r3
100439b0:	d101      	bne.n	100439b6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
100439b2:	2301      	movs	r3, #1
100439b4:	e000      	b.n	100439b8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
100439b6:	2300      	movs	r3, #0
}
100439b8:	0018      	movs	r0, r3
100439ba:	46bd      	mov	sp, r7
100439bc:	b002      	add	sp, #8
100439be:	bd80      	pop	{r7, pc}
100439c0:	48400000 	.word	0x48400000

100439c4 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
100439c4:	b580      	push	{r7, lr}
100439c6:	b082      	sub	sp, #8
100439c8:	af00      	add	r7, sp, #0
100439ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100439cc:	4b04      	ldr	r3, [pc, #16]	@ (100439e0 <LL_APB2_GRP1_ForceReset+0x1c>)
100439ce:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100439d0:	4b03      	ldr	r3, [pc, #12]	@ (100439e0 <LL_APB2_GRP1_ForceReset+0x1c>)
100439d2:	687a      	ldr	r2, [r7, #4]
100439d4:	430a      	orrs	r2, r1
100439d6:	641a      	str	r2, [r3, #64]	@ 0x40
}
100439d8:	46c0      	nop			@ (mov r8, r8)
100439da:	46bd      	mov	sp, r7
100439dc:	b002      	add	sp, #8
100439de:	bd80      	pop	{r7, pc}
100439e0:	48400000 	.word	0x48400000

100439e4 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
100439e4:	b580      	push	{r7, lr}
100439e6:	b082      	sub	sp, #8
100439e8:	af00      	add	r7, sp, #0
100439ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100439ec:	4b05      	ldr	r3, [pc, #20]	@ (10043a04 <LL_APB2_GRP1_ReleaseReset+0x20>)
100439ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100439f0:	687b      	ldr	r3, [r7, #4]
100439f2:	43d9      	mvns	r1, r3
100439f4:	4b03      	ldr	r3, [pc, #12]	@ (10043a04 <LL_APB2_GRP1_ReleaseReset+0x20>)
100439f6:	400a      	ands	r2, r1
100439f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
100439fa:	46c0      	nop			@ (mov r8, r8)
100439fc:	46bd      	mov	sp, r7
100439fe:	b002      	add	sp, #8
10043a00:	bd80      	pop	{r7, pc}
10043a02:	46c0      	nop			@ (mov r8, r8)
10043a04:	48400000 	.word	0x48400000

10043a08 <main>:
 * @author Caitlin Bonesio
 *
 */

int main(void)
{
10043a08:	b580      	push	{r7, lr}
10043a0a:	b086      	sub	sp, #24
10043a0c:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
10043a0e:	f7fd fd6d 	bl	100414ec <BOARD_Init>
10043a12:	0003      	movs	r3, r0
10043a14:	2b01      	cmp	r3, #1
10043a16:	d001      	beq.n	10043a1c <main+0x14>
		BOARD_CrashHandler();
10043a18:	f7fd fd8c 	bl	10041534 <BOARD_CrashHandler>
	}


	MX_RADIO_Init();
10043a1c:	f000 f89a 	bl	10043b54 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
10043a20:	f000 f8b6 	bl	10043b90 <MX_RADIO_TIMER_Init>
	MX_RNG_Init();
10043a24:	f000 f8ea 	bl	10043bfc <MX_RNG_Init>
	MX_PKA_Init();
10043a28:	f000 f880 	bl	10043b2c <MX_PKA_Init>
	//Initialize BLE middleware
	MX_APPE_Init(NULL);
10043a2c:	2000      	movs	r0, #0
10043a2e:	f7ff ff65 	bl	100438fc <MX_APPE_Init>


	BLUETOOTH_BufferInit();
10043a32:	f7fd fc49 	bl	100412c8 <BLUETOOTH_BufferInit>
	// Initialize all configured peripherals
	UARTs_Init();
10043a36:	f7ff fdbb 	bl	100435b0 <UARTs_Init>
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
10043a3a:	2300      	movs	r3, #0
10043a3c:	617b      	str	r3, [r7, #20]
10043a3e:	e013      	b.n	10043a68 <main+0x60>
		EventQueues[i] = FIFO_Create();
10043a40:	f7fe f994 	bl	10041d6c <FIFO_Create>
10043a44:	0001      	movs	r1, r0
10043a46:	4b35      	ldr	r3, [pc, #212]	@ (10043b1c <main+0x114>)
10043a48:	697a      	ldr	r2, [r7, #20]
10043a4a:	0092      	lsls	r2, r2, #2
10043a4c:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
10043a4e:	4b34      	ldr	r3, [pc, #208]	@ (10043b20 <main+0x118>)
10043a50:	697a      	ldr	r2, [r7, #20]
10043a52:	0092      	lsls	r2, r2, #2
10043a54:	58d3      	ldr	r3, [r2, r3]
10043a56:	4a31      	ldr	r2, [pc, #196]	@ (10043b1c <main+0x114>)
10043a58:	6979      	ldr	r1, [r7, #20]
10043a5a:	0089      	lsls	r1, r1, #2
10043a5c:	588a      	ldr	r2, [r1, r2]
10043a5e:	0010      	movs	r0, r2
10043a60:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10043a62:	697b      	ldr	r3, [r7, #20]
10043a64:	3301      	adds	r3, #1
10043a66:	617b      	str	r3, [r7, #20]
10043a68:	697b      	ldr	r3, [r7, #20]
10043a6a:	2b03      	cmp	r3, #3
10043a6c:	dde8      	ble.n	10043a40 <main+0x38>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10043a6e:	2300      	movs	r3, #0
10043a70:	613b      	str	r3, [r7, #16]
10043a72:	e012      	b.n	10043a9a <main+0x92>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10043a74:	4b2b      	ldr	r3, [pc, #172]	@ (10043b24 <main+0x11c>)
10043a76:	693a      	ldr	r2, [r7, #16]
10043a78:	0092      	lsls	r2, r2, #2
10043a7a:	58d3      	ldr	r3, [r2, r3]
10043a7c:	4798      	blx	r3
10043a7e:	0003      	movs	r3, r0
10043a80:	001a      	movs	r2, r3
10043a82:	1d3b      	adds	r3, r7, #4
10043a84:	601a      	str	r2, [r3, #0]
10043a86:	1d3b      	adds	r3, r7, #4
10043a88:	781b      	ldrb	r3, [r3, #0]
10043a8a:	b25b      	sxtb	r3, r3
10043a8c:	3301      	adds	r3, #1
10043a8e:	d101      	bne.n	10043a94 <main+0x8c>
				BOARD_CrashHandler();//We've crashed
10043a90:	f7fd fd50 	bl	10041534 <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10043a94:	693b      	ldr	r3, [r7, #16]
10043a96:	3301      	adds	r3, #1
10043a98:	613b      	str	r3, [r7, #16]
10043a9a:	693b      	ldr	r3, [r7, #16]
10043a9c:	2b03      	cmp	r3, #3
10043a9e:	dde9      	ble.n	10043a74 <main+0x6c>
			}
		}
		uint8_t done = 0;
10043aa0:	230f      	movs	r3, #15
10043aa2:	18fb      	adds	r3, r7, r3
10043aa4:	2200      	movs	r2, #0
10043aa6:	701a      	strb	r2, [r3, #0]
		while(!done){
10043aa8:	e030      	b.n	10043b0c <main+0x104>
			//run all module event handlers
			done = 1;//assume we're done
10043aaa:	230f      	movs	r3, #15
10043aac:	18fb      	adds	r3, r7, r3
10043aae:	2201      	movs	r2, #1
10043ab0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
10043ab2:	2300      	movs	r3, #0
10043ab4:	60bb      	str	r3, [r7, #8]
10043ab6:	e026      	b.n	10043b06 <main+0xfe>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
10043ab8:	4b18      	ldr	r3, [pc, #96]	@ (10043b1c <main+0x114>)
10043aba:	68ba      	ldr	r2, [r7, #8]
10043abc:	0092      	lsls	r2, r2, #2
10043abe:	58d3      	ldr	r3, [r2, r3]
10043ac0:	0018      	movs	r0, r3
10043ac2:	f7fe f9a4 	bl	10041e0e <FIFO_Dequeue>
10043ac6:	0003      	movs	r3, r0
10043ac8:	001a      	movs	r2, r3
10043aca:	003b      	movs	r3, r7
10043acc:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
10043ace:	4b13      	ldr	r3, [pc, #76]	@ (10043b1c <main+0x114>)
10043ad0:	68ba      	ldr	r2, [r7, #8]
10043ad2:	0092      	lsls	r2, r2, #2
10043ad4:	58d3      	ldr	r3, [r2, r3]
10043ad6:	0018      	movs	r0, r3
10043ad8:	f7fe f9eb 	bl	10041eb2 <FIFO_GetSize>
10043adc:	1e03      	subs	r3, r0, #0
10043ade:	d003      	beq.n	10043ae8 <main+0xe0>
					done = 0;//if any queue is not empty, we are not done
10043ae0:	230f      	movs	r3, #15
10043ae2:	18fb      	adds	r3, r7, r3
10043ae4:	2200      	movs	r2, #0
10043ae6:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
10043ae8:	003b      	movs	r3, r7
10043aea:	781b      	ldrb	r3, [r3, #0]
10043aec:	b25b      	sxtb	r3, r3
10043aee:	2b00      	cmp	r3, #0
10043af0:	d006      	beq.n	10043b00 <main+0xf8>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
10043af2:	4b0d      	ldr	r3, [pc, #52]	@ (10043b28 <main+0x120>)
10043af4:	68ba      	ldr	r2, [r7, #8]
10043af6:	0092      	lsls	r2, r2, #2
10043af8:	58d2      	ldr	r2, [r2, r3]
10043afa:	003b      	movs	r3, r7
10043afc:	6818      	ldr	r0, [r3, #0]
10043afe:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
10043b00:	68bb      	ldr	r3, [r7, #8]
10043b02:	3301      	adds	r3, #1
10043b04:	60bb      	str	r3, [r7, #8]
10043b06:	68bb      	ldr	r3, [r7, #8]
10043b08:	2b03      	cmp	r3, #3
10043b0a:	ddd5      	ble.n	10043ab8 <main+0xb0>
		while(!done){
10043b0c:	230f      	movs	r3, #15
10043b0e:	18fb      	adds	r3, r7, r3
10043b10:	781b      	ldrb	r3, [r3, #0]
10043b12:	2b00      	cmp	r3, #0
10043b14:	d0c9      	beq.n	10043aaa <main+0xa2>
					}
				}
			}
		}
		//Run Bluetooth Middleware
	    MX_APPE_Process();
10043b16:	f7ff ff0c 	bl	10043932 <MX_APPE_Process>
	while(1){
10043b1a:	e7a8      	b.n	10043a6e <main+0x66>
10043b1c:	20000c38 	.word	0x20000c38
10043b20:	200010c4 	.word	0x200010c4
10043b24:	200010d4 	.word	0x200010d4
10043b28:	200010e4 	.word	0x200010e4

10043b2c <MX_PKA_Init>:




static void MX_PKA_Init(void)
{
10043b2c:	b580      	push	{r7, lr}
10043b2e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10043b30:	4b06      	ldr	r3, [pc, #24]	@ (10043b4c <MX_PKA_Init+0x20>)
10043b32:	4a07      	ldr	r2, [pc, #28]	@ (10043b50 <MX_PKA_Init+0x24>)
10043b34:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10043b36:	4b05      	ldr	r3, [pc, #20]	@ (10043b4c <MX_PKA_Init+0x20>)
10043b38:	0018      	movs	r0, r3
10043b3a:	f003 fbab 	bl	10047294 <HAL_PKA_Init>
10043b3e:	1e03      	subs	r3, r0, #0
10043b40:	d001      	beq.n	10043b46 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10043b42:	f7fd fcfd 	bl	10041540 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
10043b46:	46c0      	nop			@ (mov r8, r8)
10043b48:	46bd      	mov	sp, r7
10043b4a:	bd80      	pop	{r7, pc}
10043b4c:	20000c48 	.word	0x20000c48
10043b50:	48300000 	.word	0x48300000

10043b54 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10043b54:	b580      	push	{r7, lr}
10043b56:	b082      	sub	sp, #8
10043b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */
//
  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10043b5a:	2300      	movs	r3, #0
10043b5c:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */
//
  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043b5e:	2001      	movs	r0, #1
10043b60:	f7ff ff1c 	bl	1004399c <LL_APB2_GRP1_IsEnabledClock>
10043b64:	1e03      	subs	r3, r0, #0
10043b66:	d108      	bne.n	10043b7a <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10043b68:	2001      	movs	r0, #1
10043b6a:	f7ff ff2b 	bl	100439c4 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10043b6e:	2001      	movs	r0, #1
10043b70:	f7ff ff38 	bl	100439e4 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10043b74:	2001      	movs	r0, #1
10043b76:	f7ff fefb 	bl	10043970 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10043b7a:	23c0      	movs	r3, #192	@ 0xc0
10043b7c:	05db      	lsls	r3, r3, #23
10043b7e:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10043b80:	1d3b      	adds	r3, r7, #4
10043b82:	0018      	movs	r0, r3
10043b84:	f003 fde4 	bl	10047750 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */
//
  /* USER CODE END RADIO_Init 2 */

}
10043b88:	46c0      	nop			@ (mov r8, r8)
10043b8a:	46bd      	mov	sp, r7
10043b8c:	b002      	add	sp, #8
10043b8e:	bd80      	pop	{r7, pc}

10043b90 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10043b90:	b580      	push	{r7, lr}
10043b92:	b082      	sub	sp, #8
10043b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
//
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10043b96:	003b      	movs	r3, r7
10043b98:	0018      	movs	r0, r3
10043b9a:	2308      	movs	r3, #8
10043b9c:	001a      	movs	r2, r3
10043b9e:	2100      	movs	r1, #0
10043ba0:	f021 f854 	bl	10064c4c <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
//
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043ba4:	2001      	movs	r0, #1
10043ba6:	f7ff fef9 	bl	1004399c <LL_APB2_GRP1_IsEnabledClock>
10043baa:	1e03      	subs	r3, r0, #0
10043bac:	d108      	bne.n	10043bc0 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10043bae:	2001      	movs	r0, #1
10043bb0:	f7ff ff08 	bl	100439c4 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10043bb4:	2001      	movs	r0, #1
10043bb6:	f7ff ff15 	bl	100439e4 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10043bba:	2001      	movs	r0, #1
10043bbc:	f7ff fed8 	bl	10043970 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10043bc0:	46c0      	nop			@ (mov r8, r8)
10043bc2:	4b0c      	ldr	r3, [pc, #48]	@ (10043bf4 <MX_RADIO_TIMER_Init+0x64>)
10043bc4:	0018      	movs	r0, r3
10043bc6:	f7ff fec8 	bl	1004395a <LL_RADIO_TIMER_GetAbsoluteTime>
10043bca:	0003      	movs	r3, r0
10043bcc:	2b0f      	cmp	r3, #15
10043bce:	d9f8      	bls.n	10043bc2 <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10043bd0:	003b      	movs	r3, r7
10043bd2:	22a0      	movs	r2, #160	@ 0xa0
10043bd4:	0052      	lsls	r2, r2, #1
10043bd6:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = TRUE;
10043bd8:	003b      	movs	r3, r7
10043bda:	2201      	movs	r2, #1
10043bdc:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 10000;
10043bde:	003b      	movs	r3, r7
10043be0:	4a05      	ldr	r2, [pc, #20]	@ (10043bf8 <MX_RADIO_TIMER_Init+0x68>)
10043be2:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10043be4:	003b      	movs	r3, r7
10043be6:	0018      	movs	r0, r3
10043be8:	f004 fad8 	bl	1004819c <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */
//
  /* USER CODE END RADIO_TIMER_Init 2 */

}
10043bec:	46c0      	nop			@ (mov r8, r8)
10043bee:	46bd      	mov	sp, r7
10043bf0:	b002      	add	sp, #8
10043bf2:	bd80      	pop	{r7, pc}
10043bf4:	60001800 	.word	0x60001800
10043bf8:	00002710 	.word	0x00002710

10043bfc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
10043bfc:	b580      	push	{r7, lr}
10043bfe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
10043c00:	4b06      	ldr	r3, [pc, #24]	@ (10043c1c <MX_RNG_Init+0x20>)
10043c02:	4a07      	ldr	r2, [pc, #28]	@ (10043c20 <MX_RNG_Init+0x24>)
10043c04:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
10043c06:	4b05      	ldr	r3, [pc, #20]	@ (10043c1c <MX_RNG_Init+0x20>)
10043c08:	0018      	movs	r0, r3
10043c0a:	f006 fae7 	bl	1004a1dc <HAL_RNG_Init>
10043c0e:	1e03      	subs	r3, r0, #0
10043c10:	d001      	beq.n	10043c16 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
10043c12:	f7fd fc95 	bl	10041540 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
10043c16:	46c0      	nop			@ (mov r8, r8)
10043c18:	46bd      	mov	sp, r7
10043c1a:	bd80      	pop	{r7, pc}
10043c1c:	20000c54 	.word	0x20000c54
10043c20:	48600000 	.word	0x48600000

10043c24 <LL_AHB1_GRP1_EnableClock>:
{
10043c24:	b580      	push	{r7, lr}
10043c26:	b084      	sub	sp, #16
10043c28:	af00      	add	r7, sp, #0
10043c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10043c2c:	4b07      	ldr	r3, [pc, #28]	@ (10043c4c <LL_AHB1_GRP1_EnableClock+0x28>)
10043c2e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043c30:	4b06      	ldr	r3, [pc, #24]	@ (10043c4c <LL_AHB1_GRP1_EnableClock+0x28>)
10043c32:	687a      	ldr	r2, [r7, #4]
10043c34:	430a      	orrs	r2, r1
10043c36:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043c38:	4b04      	ldr	r3, [pc, #16]	@ (10043c4c <LL_AHB1_GRP1_EnableClock+0x28>)
10043c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10043c3c:	687a      	ldr	r2, [r7, #4]
10043c3e:	4013      	ands	r3, r2
10043c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043c42:	68fb      	ldr	r3, [r7, #12]
}
10043c44:	46c0      	nop			@ (mov r8, r8)
10043c46:	46bd      	mov	sp, r7
10043c48:	b004      	add	sp, #16
10043c4a:	bd80      	pop	{r7, pc}
10043c4c:	48400000 	.word	0x48400000

10043c50 <LL_APB0_GRP1_EnableClock>:
{
10043c50:	b580      	push	{r7, lr}
10043c52:	b084      	sub	sp, #16
10043c54:	af00      	add	r7, sp, #0
10043c56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10043c58:	4b07      	ldr	r3, [pc, #28]	@ (10043c78 <LL_APB0_GRP1_EnableClock+0x28>)
10043c5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10043c5c:	4b06      	ldr	r3, [pc, #24]	@ (10043c78 <LL_APB0_GRP1_EnableClock+0x28>)
10043c5e:	687a      	ldr	r2, [r7, #4]
10043c60:	430a      	orrs	r2, r1
10043c62:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10043c64:	4b04      	ldr	r3, [pc, #16]	@ (10043c78 <LL_APB0_GRP1_EnableClock+0x28>)
10043c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10043c68:	687a      	ldr	r2, [r7, #4]
10043c6a:	4013      	ands	r3, r2
10043c6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043c6e:	68fb      	ldr	r3, [r7, #12]
}
10043c70:	46c0      	nop			@ (mov r8, r8)
10043c72:	46bd      	mov	sp, r7
10043c74:	b004      	add	sp, #16
10043c76:	bd80      	pop	{r7, pc}
10043c78:	48400000 	.word	0x48400000

10043c7c <LL_APB1_GRP1_EnableClock>:
{
10043c7c:	b580      	push	{r7, lr}
10043c7e:	b084      	sub	sp, #16
10043c80:	af00      	add	r7, sp, #0
10043c82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10043c84:	4b07      	ldr	r3, [pc, #28]	@ (10043ca4 <LL_APB1_GRP1_EnableClock+0x28>)
10043c86:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10043c88:	4b06      	ldr	r3, [pc, #24]	@ (10043ca4 <LL_APB1_GRP1_EnableClock+0x28>)
10043c8a:	687a      	ldr	r2, [r7, #4]
10043c8c:	430a      	orrs	r2, r1
10043c8e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10043c90:	4b04      	ldr	r3, [pc, #16]	@ (10043ca4 <LL_APB1_GRP1_EnableClock+0x28>)
10043c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10043c94:	687a      	ldr	r2, [r7, #4]
10043c96:	4013      	ands	r3, r2
10043c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043c9a:	68fb      	ldr	r3, [r7, #12]
}
10043c9c:	46c0      	nop			@ (mov r8, r8)
10043c9e:	46bd      	mov	sp, r7
10043ca0:	b004      	add	sp, #16
10043ca2:	bd80      	pop	{r7, pc}
10043ca4:	48400000 	.word	0x48400000

10043ca8 <LL_APB2_GRP1_EnableClock>:
{
10043ca8:	b580      	push	{r7, lr}
10043caa:	b084      	sub	sp, #16
10043cac:	af00      	add	r7, sp, #0
10043cae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10043cb0:	4b07      	ldr	r3, [pc, #28]	@ (10043cd0 <LL_APB2_GRP1_EnableClock+0x28>)
10043cb2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10043cb4:	4b06      	ldr	r3, [pc, #24]	@ (10043cd0 <LL_APB2_GRP1_EnableClock+0x28>)
10043cb6:	687a      	ldr	r2, [r7, #4]
10043cb8:	430a      	orrs	r2, r1
10043cba:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10043cbc:	4b04      	ldr	r3, [pc, #16]	@ (10043cd0 <LL_APB2_GRP1_EnableClock+0x28>)
10043cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043cc0:	687a      	ldr	r2, [r7, #4]
10043cc2:	4013      	ands	r3, r2
10043cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043cc6:	68fb      	ldr	r3, [r7, #12]
}
10043cc8:	46c0      	nop			@ (mov r8, r8)
10043cca:	46bd      	mov	sp, r7
10043ccc:	b004      	add	sp, #16
10043cce:	bd80      	pop	{r7, pc}
10043cd0:	48400000 	.word	0x48400000

10043cd4 <LL_APB2_GRP1_IsEnabledClock>:
{
10043cd4:	b580      	push	{r7, lr}
10043cd6:	b082      	sub	sp, #8
10043cd8:	af00      	add	r7, sp, #0
10043cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10043cdc:	4b06      	ldr	r3, [pc, #24]	@ (10043cf8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10043cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043ce0:	687a      	ldr	r2, [r7, #4]
10043ce2:	4013      	ands	r3, r2
10043ce4:	687a      	ldr	r2, [r7, #4]
10043ce6:	429a      	cmp	r2, r3
10043ce8:	d101      	bne.n	10043cee <LL_APB2_GRP1_IsEnabledClock+0x1a>
10043cea:	2301      	movs	r3, #1
10043cec:	e000      	b.n	10043cf0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10043cee:	2300      	movs	r3, #0
}
10043cf0:	0018      	movs	r0, r3
10043cf2:	46bd      	mov	sp, r7
10043cf4:	b002      	add	sp, #8
10043cf6:	bd80      	pop	{r7, pc}
10043cf8:	48400000 	.word	0x48400000

10043cfc <LL_APB2_GRP1_ForceReset>:
{
10043cfc:	b580      	push	{r7, lr}
10043cfe:	b082      	sub	sp, #8
10043d00:	af00      	add	r7, sp, #0
10043d02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10043d04:	4b04      	ldr	r3, [pc, #16]	@ (10043d18 <LL_APB2_GRP1_ForceReset+0x1c>)
10043d06:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10043d08:	4b03      	ldr	r3, [pc, #12]	@ (10043d18 <LL_APB2_GRP1_ForceReset+0x1c>)
10043d0a:	687a      	ldr	r2, [r7, #4]
10043d0c:	430a      	orrs	r2, r1
10043d0e:	641a      	str	r2, [r3, #64]	@ 0x40
}
10043d10:	46c0      	nop			@ (mov r8, r8)
10043d12:	46bd      	mov	sp, r7
10043d14:	b002      	add	sp, #8
10043d16:	bd80      	pop	{r7, pc}
10043d18:	48400000 	.word	0x48400000

10043d1c <LL_APB2_GRP1_ReleaseReset>:
{
10043d1c:	b580      	push	{r7, lr}
10043d1e:	b082      	sub	sp, #8
10043d20:	af00      	add	r7, sp, #0
10043d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10043d24:	4b05      	ldr	r3, [pc, #20]	@ (10043d3c <LL_APB2_GRP1_ReleaseReset+0x20>)
10043d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10043d28:	687b      	ldr	r3, [r7, #4]
10043d2a:	43d9      	mvns	r1, r3
10043d2c:	4b03      	ldr	r3, [pc, #12]	@ (10043d3c <LL_APB2_GRP1_ReleaseReset+0x20>)
10043d2e:	400a      	ands	r2, r1
10043d30:	641a      	str	r2, [r3, #64]	@ 0x40
}
10043d32:	46c0      	nop			@ (mov r8, r8)
10043d34:	46bd      	mov	sp, r7
10043d36:	b002      	add	sp, #8
10043d38:	bd80      	pop	{r7, pc}
10043d3a:	46c0      	nop			@ (mov r8, r8)
10043d3c:	48400000 	.word	0x48400000

10043d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10043d40:	b580      	push	{r7, lr}
10043d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10043d44:	2380      	movs	r3, #128	@ 0x80
10043d46:	005b      	lsls	r3, r3, #1
10043d48:	0018      	movs	r0, r3
10043d4a:	f7ff ff81 	bl	10043c50 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
10043d4e:	46c0      	nop			@ (mov r8, r8)
10043d50:	46bd      	mov	sp, r7
10043d52:	bd80      	pop	{r7, pc}

10043d54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10043d54:	b590      	push	{r4, r7, lr}
10043d56:	b089      	sub	sp, #36	@ 0x24
10043d58:	af00      	add	r7, sp, #0
10043d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10043d5c:	240c      	movs	r4, #12
10043d5e:	193b      	adds	r3, r7, r4
10043d60:	0018      	movs	r0, r3
10043d62:	2314      	movs	r3, #20
10043d64:	001a      	movs	r2, r3
10043d66:	2100      	movs	r1, #0
10043d68:	f020 ff70 	bl	10064c4c <memset>
  if(hi2c->Instance==I2C1)
10043d6c:	687b      	ldr	r3, [r7, #4]
10043d6e:	681a      	ldr	r2, [r3, #0]
10043d70:	2382      	movs	r3, #130	@ 0x82
10043d72:	05db      	lsls	r3, r3, #23
10043d74:	429a      	cmp	r2, r3
10043d76:	d146      	bne.n	10043e06 <HAL_I2C_MspInit+0xb2>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
10043d78:	2004      	movs	r0, #4
10043d7a:	f7ff ff53 	bl	10043c24 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
10043d7e:	2008      	movs	r0, #8
10043d80:	f7ff ff50 	bl	10043c24 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10043d84:	193b      	adds	r3, r7, r4
10043d86:	2202      	movs	r2, #2
10043d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10043d8a:	193b      	adds	r3, r7, r4
10043d8c:	2212      	movs	r2, #18
10043d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043d90:	193b      	adds	r3, r7, r4
10043d92:	2200      	movs	r2, #0
10043d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043d96:	193b      	adds	r3, r7, r4
10043d98:	2200      	movs	r2, #0
10043d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10043d9c:	193b      	adds	r3, r7, r4
10043d9e:	2200      	movs	r2, #0
10043da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10043da2:	193a      	adds	r2, r7, r4
10043da4:	2390      	movs	r3, #144	@ 0x90
10043da6:	05db      	lsls	r3, r3, #23
10043da8:	0011      	movs	r1, r2
10043daa:	0018      	movs	r0, r3
10043dac:	f001 f8be 	bl	10044f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
10043db0:	0021      	movs	r1, r4
10043db2:	187b      	adds	r3, r7, r1
10043db4:	2240      	movs	r2, #64	@ 0x40
10043db6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10043db8:	187b      	adds	r3, r7, r1
10043dba:	2212      	movs	r2, #18
10043dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043dbe:	187b      	adds	r3, r7, r1
10043dc0:	2200      	movs	r2, #0
10043dc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043dc4:	187b      	adds	r3, r7, r1
10043dc6:	2200      	movs	r2, #0
10043dc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10043dca:	187b      	adds	r3, r7, r1
10043dcc:	2200      	movs	r2, #0
10043dce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043dd0:	187b      	adds	r3, r7, r1
10043dd2:	4a0f      	ldr	r2, [pc, #60]	@ (10043e10 <HAL_I2C_MspInit+0xbc>)
10043dd4:	0019      	movs	r1, r3
10043dd6:	0010      	movs	r0, r2
10043dd8:	f001 f8a8 	bl	10044f2c <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
10043ddc:	2102      	movs	r1, #2
10043dde:	2000      	movs	r0, #0
10043de0:	f003 fab4 	bl	1004734c <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_6);
10043de4:	2140      	movs	r1, #64	@ 0x40
10043de6:	2001      	movs	r0, #1
10043de8:	f003 fab0 	bl	1004734c <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
10043dec:	2102      	movs	r1, #2
10043dee:	2000      	movs	r0, #0
10043df0:	f003 fada 	bl	100473a8 <HAL_PWREx_DisableGPIOPullDown>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_6);
10043df4:	2140      	movs	r1, #64	@ 0x40
10043df6:	2001      	movs	r0, #1
10043df8:	f003 fad6 	bl	100473a8 <HAL_PWREx_DisableGPIOPullDown>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
10043dfc:	2380      	movs	r3, #128	@ 0x80
10043dfe:	039b      	lsls	r3, r3, #14
10043e00:	0018      	movs	r0, r3
10043e02:	f7ff ff3b 	bl	10043c7c <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
10043e06:	46c0      	nop			@ (mov r8, r8)
10043e08:	46bd      	mov	sp, r7
10043e0a:	b009      	add	sp, #36	@ 0x24
10043e0c:	bd90      	pop	{r4, r7, pc}
10043e0e:	46c0      	nop			@ (mov r8, r8)
10043e10:	48100000 	.word	0x48100000

10043e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10043e14:	b590      	push	{r4, r7, lr}
10043e16:	b08f      	sub	sp, #60	@ 0x3c
10043e18:	af00      	add	r7, sp, #0
10043e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10043e1c:	2324      	movs	r3, #36	@ 0x24
10043e1e:	18fb      	adds	r3, r7, r3
10043e20:	0018      	movs	r0, r3
10043e22:	2314      	movs	r3, #20
10043e24:	001a      	movs	r2, r3
10043e26:	2100      	movs	r1, #0
10043e28:	f020 ff10 	bl	10064c4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10043e2c:	240c      	movs	r4, #12
10043e2e:	193b      	adds	r3, r7, r4
10043e30:	0018      	movs	r0, r3
10043e32:	2318      	movs	r3, #24
10043e34:	001a      	movs	r2, r3
10043e36:	2100      	movs	r1, #0
10043e38:	f020 ff08 	bl	10064c4c <memset>
  if(huart->Instance==LPUART1)
10043e3c:	687b      	ldr	r3, [r7, #4]
10043e3e:	681b      	ldr	r3, [r3, #0]
10043e40:	4a2c      	ldr	r2, [pc, #176]	@ (10043ef4 <HAL_UART_MspInit+0xe0>)
10043e42:	4293      	cmp	r3, r2
10043e44:	d151      	bne.n	10043eea <HAL_UART_MspInit+0xd6>
//
    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
10043e46:	193b      	adds	r3, r7, r4
10043e48:	2210      	movs	r2, #16
10043e4a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10043e4c:	193b      	adds	r3, r7, r4
10043e4e:	2200      	movs	r2, #0
10043e50:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043e52:	193b      	adds	r3, r7, r4
10043e54:	0018      	movs	r0, r3
10043e56:	f006 f8e9 	bl	1004a02c <HAL_RCCEx_PeriphCLKConfig>
10043e5a:	1e03      	subs	r3, r0, #0
10043e5c:	d001      	beq.n	10043e62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
10043e5e:	f7fd fb6f 	bl	10041540 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10043e62:	2380      	movs	r3, #128	@ 0x80
10043e64:	005b      	lsls	r3, r3, #1
10043e66:	0018      	movs	r0, r3
10043e68:	f7ff ff08 	bl	10043c7c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10043e6c:	2008      	movs	r0, #8
10043e6e:	f7ff fed9 	bl	10043c24 <LL_AHB1_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB3     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
10043e72:	2424      	movs	r4, #36	@ 0x24
10043e74:	193b      	adds	r3, r7, r4
10043e76:	2208      	movs	r2, #8
10043e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043e7a:	193b      	adds	r3, r7, r4
10043e7c:	2202      	movs	r2, #2
10043e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043e80:	193b      	adds	r3, r7, r4
10043e82:	2200      	movs	r2, #0
10043e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043e86:	193b      	adds	r3, r7, r4
10043e88:	2200      	movs	r2, #0
10043e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
10043e8c:	193b      	adds	r3, r7, r4
10043e8e:	2201      	movs	r2, #1
10043e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043e92:	193b      	adds	r3, r7, r4
10043e94:	4a18      	ldr	r2, [pc, #96]	@ (10043ef8 <HAL_UART_MspInit+0xe4>)
10043e96:	0019      	movs	r1, r3
10043e98:	0010      	movs	r0, r2
10043e9a:	f001 f847 	bl	10044f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10043e9e:	0021      	movs	r1, r4
10043ea0:	187b      	adds	r3, r7, r1
10043ea2:	2280      	movs	r2, #128	@ 0x80
10043ea4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043ea6:	187b      	adds	r3, r7, r1
10043ea8:	2202      	movs	r2, #2
10043eaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043eac:	187b      	adds	r3, r7, r1
10043eae:	2200      	movs	r2, #0
10043eb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043eb2:	187b      	adds	r3, r7, r1
10043eb4:	2200      	movs	r2, #0
10043eb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
10043eb8:	187b      	adds	r3, r7, r1
10043eba:	2203      	movs	r2, #3
10043ebc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043ebe:	187b      	adds	r3, r7, r1
10043ec0:	4a0d      	ldr	r2, [pc, #52]	@ (10043ef8 <HAL_UART_MspInit+0xe4>)
10043ec2:	0019      	movs	r1, r3
10043ec4:	0010      	movs	r0, r2
10043ec6:	f001 f831 	bl	10044f2c <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
10043eca:	2188      	movs	r1, #136	@ 0x88
10043ecc:	2001      	movs	r0, #1
10043ece:	f003 fa3d 	bl	1004734c <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
10043ed2:	2188      	movs	r1, #136	@ 0x88
10043ed4:	2001      	movs	r0, #1
10043ed6:	f003 fa67 	bl	100473a8 <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
10043eda:	2200      	movs	r2, #0
10043edc:	2101      	movs	r1, #1
10043ede:	2009      	movs	r0, #9
10043ee0:	f000 fe06 	bl	10044af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10043ee4:	2009      	movs	r0, #9
10043ee6:	f000 fe18 	bl	10044b1a <HAL_NVIC_EnableIRQ>
//
    /* USER CODE END LPUART1_MspInit 1 */

  }

}
10043eea:	46c0      	nop			@ (mov r8, r8)
10043eec:	46bd      	mov	sp, r7
10043eee:	b00f      	add	sp, #60	@ 0x3c
10043ef0:	bd90      	pop	{r4, r7, pc}
10043ef2:	46c0      	nop			@ (mov r8, r8)
10043ef4:	41005000 	.word	0x41005000
10043ef8:	48100000 	.word	0x48100000

10043efc <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10043efc:	b580      	push	{r7, lr}
10043efe:	b082      	sub	sp, #8
10043f00:	af00      	add	r7, sp, #0
10043f02:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
10043f04:	687b      	ldr	r3, [r7, #4]
10043f06:	681b      	ldr	r3, [r3, #0]
10043f08:	4a05      	ldr	r2, [pc, #20]	@ (10043f20 <HAL_PKA_MspInit+0x24>)
10043f0a:	4293      	cmp	r3, r2
10043f0c:	d104      	bne.n	10043f18 <HAL_PKA_MspInit+0x1c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
10043f0e:	2380      	movs	r3, #128	@ 0x80
10043f10:	025b      	lsls	r3, r3, #9
10043f12:	0018      	movs	r0, r3
10043f14:	f7ff fe86 	bl	10043c24 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END PKA_MspInit 1 */

  }

}
10043f18:	46c0      	nop			@ (mov r8, r8)
10043f1a:	46bd      	mov	sp, r7
10043f1c:	b002      	add	sp, #8
10043f1e:	bd80      	pop	{r7, pc}
10043f20:	48300000 	.word	0x48300000

10043f24 <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10043f24:	b590      	push	{r4, r7, lr}
10043f26:	b089      	sub	sp, #36	@ 0x24
10043f28:	af00      	add	r7, sp, #0
10043f2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10043f2c:	2408      	movs	r4, #8
10043f2e:	193b      	adds	r3, r7, r4
10043f30:	0018      	movs	r0, r3
10043f32:	2318      	movs	r3, #24
10043f34:	001a      	movs	r2, r3
10043f36:	2100      	movs	r1, #0
10043f38:	f020 fe88 	bl	10064c4c <memset>
  if(hradio->Instance==RADIO)
10043f3c:	687b      	ldr	r3, [r7, #4]
10043f3e:	681a      	ldr	r2, [r3, #0]
10043f40:	23c0      	movs	r3, #192	@ 0xc0
10043f42:	05db      	lsls	r3, r3, #23
10043f44:	429a      	cmp	r2, r3
10043f46:	d12d      	bne.n	10043fa4 <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10043f48:	193b      	adds	r3, r7, r4
10043f4a:	2201      	movs	r2, #1
10043f4c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10043f4e:	193b      	adds	r3, r7, r4
10043f50:	2204      	movs	r2, #4
10043f52:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043f54:	193b      	adds	r3, r7, r4
10043f56:	0018      	movs	r0, r3
10043f58:	f006 f868 	bl	1004a02c <HAL_RCCEx_PeriphCLKConfig>
10043f5c:	1e03      	subs	r3, r0, #0
10043f5e:	d001      	beq.n	10043f64 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10043f60:	f7fd faee 	bl	10041540 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043f64:	2001      	movs	r0, #1
10043f66:	f7ff feb5 	bl	10043cd4 <LL_APB2_GRP1_IsEnabledClock>
10043f6a:	1e03      	subs	r3, r0, #0
10043f6c:	d108      	bne.n	10043f80 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10043f6e:	2001      	movs	r0, #1
10043f70:	f7ff fec4 	bl	10043cfc <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10043f74:	2001      	movs	r0, #1
10043f76:	f7ff fed1 	bl	10043d1c <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10043f7a:	2001      	movs	r0, #1
10043f7c:	f7ff fe94 	bl	10043ca8 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10043f80:	f00d fa68 	bl	10051454 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10043f84:	2200      	movs	r2, #0
10043f86:	2100      	movs	r1, #0
10043f88:	2012      	movs	r0, #18
10043f8a:	f000 fdb1 	bl	10044af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10043f8e:	2012      	movs	r0, #18
10043f90:	f000 fdc3 	bl	10044b1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10043f94:	2200      	movs	r2, #0
10043f96:	2100      	movs	r1, #0
10043f98:	2019      	movs	r0, #25
10043f9a:	f000 fda9 	bl	10044af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10043f9e:	2019      	movs	r0, #25
10043fa0:	f000 fdbb 	bl	10044b1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
10043fa4:	46c0      	nop			@ (mov r8, r8)
10043fa6:	46bd      	mov	sp, r7
10043fa8:	b009      	add	sp, #36	@ 0x24
10043faa:	bd90      	pop	{r4, r7, pc}

10043fac <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
10043fac:	b580      	push	{r7, lr}
10043fae:	b082      	sub	sp, #8
10043fb0:	af00      	add	r7, sp, #0
10043fb2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
10043fb4:	687b      	ldr	r3, [r7, #4]
10043fb6:	681b      	ldr	r3, [r3, #0]
10043fb8:	4a05      	ldr	r2, [pc, #20]	@ (10043fd0 <HAL_RNG_MspInit+0x24>)
10043fba:	4293      	cmp	r3, r2
10043fbc:	d104      	bne.n	10043fc8 <HAL_RNG_MspInit+0x1c>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
10043fbe:	2380      	movs	r3, #128	@ 0x80
10043fc0:	02db      	lsls	r3, r3, #11
10043fc2:	0018      	movs	r0, r3
10043fc4:	f7ff fe2e 	bl	10043c24 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
10043fc8:	46c0      	nop			@ (mov r8, r8)
10043fca:	46bd      	mov	sp, r7
10043fcc:	b002      	add	sp, #8
10043fce:	bd80      	pop	{r7, pc}
10043fd0:	48600000 	.word	0x48600000

10043fd4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
10043fd4:	b580      	push	{r7, lr}
10043fd6:	b082      	sub	sp, #8
10043fd8:	af00      	add	r7, sp, #0
10043fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
10043fdc:	687b      	ldr	r3, [r7, #4]
10043fde:	681b      	ldr	r3, [r3, #0]
10043fe0:	4a08      	ldr	r2, [pc, #32]	@ (10044004 <HAL_TIM_Base_MspInit+0x30>)
10043fe2:	4293      	cmp	r3, r2
10043fe4:	d10a      	bne.n	10043ffc <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
10043fe6:	2001      	movs	r0, #1
10043fe8:	f7ff fe32 	bl	10043c50 <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
10043fec:	2200      	movs	r2, #0
10043fee:	2101      	movs	r1, #1
10043ff0:	200a      	movs	r0, #10
10043ff2:	f000 fd7d 	bl	10044af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
10043ff6:	200a      	movs	r0, #10
10043ff8:	f000 fd8f 	bl	10044b1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
10043ffc:	46c0      	nop			@ (mov r8, r8)
10043ffe:	46bd      	mov	sp, r7
10044000:	b002      	add	sp, #8
10044002:	bd80      	pop	{r7, pc}
10044004:	40002000 	.word	0x40002000

10044008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10044008:	b580      	push	{r7, lr}
1004400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1004400c:	46c0      	nop			@ (mov r8, r8)
1004400e:	e7fd      	b.n	1004400c <NMI_Handler+0x4>

10044010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10044010:	b580      	push	{r7, lr}
10044012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10044014:	46c0      	nop			@ (mov r8, r8)
10044016:	e7fd      	b.n	10044014 <HardFault_Handler+0x4>

10044018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10044018:	b580      	push	{r7, lr}
1004401a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1004401c:	46c0      	nop			@ (mov r8, r8)
1004401e:	46bd      	mov	sp, r7
10044020:	bd80      	pop	{r7, pc}

10044022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10044022:	b580      	push	{r7, lr}
10044024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10044026:	46c0      	nop			@ (mov r8, r8)
10044028:	46bd      	mov	sp, r7
1004402a:	bd80      	pop	{r7, pc}

1004402c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1004402c:	b580      	push	{r7, lr}
1004402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10044030:	f000 fc8c 	bl	1004494c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10044034:	46c0      	nop			@ (mov r8, r8)
10044036:	46bd      	mov	sp, r7
10044038:	bd80      	pop	{r7, pc}

1004403a <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
1004403a:	b580      	push	{r7, lr}
1004403c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
1004403e:	2390      	movs	r3, #144	@ 0x90
10044040:	05db      	lsls	r3, r3, #23
10044042:	2101      	movs	r1, #1
10044044:	0018      	movs	r0, r3
10044046:	f000 fc0f 	bl	10044868 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
1004404a:	46c0      	nop			@ (mov r8, r8)
1004404c:	46bd      	mov	sp, r7
1004404e:	bd80      	pop	{r7, pc}

10044050 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10044050:	b580      	push	{r7, lr}
10044052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
10044054:	2380      	movs	r3, #128	@ 0x80
10044056:	01db      	lsls	r3, r3, #7
10044058:	4a06      	ldr	r2, [pc, #24]	@ (10044074 <GPIOB_IRQHandler+0x24>)
1004405a:	0019      	movs	r1, r3
1004405c:	0010      	movs	r0, r2
1004405e:	f000 fc03 	bl	10044868 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
10044062:	4b04      	ldr	r3, [pc, #16]	@ (10044074 <GPIOB_IRQHandler+0x24>)
10044064:	2120      	movs	r1, #32
10044066:	0018      	movs	r0, r3
10044068:	f000 fbfe 	bl	10044868 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
1004406c:	46c0      	nop			@ (mov r8, r8)
1004406e:	46bd      	mov	sp, r7
10044070:	bd80      	pop	{r7, pc}
10044072:	46c0      	nop			@ (mov r8, r8)
10044074:	48100000 	.word	0x48100000

10044078 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10044078:	b580      	push	{r7, lr}
1004407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
1004407c:	f005 fb00 	bl	10049680 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10044080:	46c0      	nop			@ (mov r8, r8)
10044082:	46bd      	mov	sp, r7
10044084:	bd80      	pop	{r7, pc}

10044086 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10044086:	b580      	push	{r7, lr}
10044088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004408a:	f005 fb02 	bl	10049692 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
1004408e:	46c0      	nop			@ (mov r8, r8)
10044090:	46bd      	mov	sp, r7
10044092:	bd80      	pop	{r7, pc}

10044094 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10044094:	b580      	push	{r7, lr}
10044096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10044098:	f003 fef2 	bl	10047e80 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
1004409c:	46c0      	nop			@ (mov r8, r8)
1004409e:	46bd      	mov	sp, r7
100440a0:	bd80      	pop	{r7, pc}

100440a2 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100440a2:	b580      	push	{r7, lr}
100440a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100440a6:	f003 ff0c 	bl	10047ec2 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100440aa:	46c0      	nop			@ (mov r8, r8)
100440ac:	46bd      	mov	sp, r7
100440ae:	bd80      	pop	{r7, pc}

100440b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100440b0:	b580      	push	{r7, lr}
100440b2:	b086      	sub	sp, #24
100440b4:	af00      	add	r7, sp, #0
100440b6:	60f8      	str	r0, [r7, #12]
100440b8:	60b9      	str	r1, [r7, #8]
100440ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100440bc:	2300      	movs	r3, #0
100440be:	617b      	str	r3, [r7, #20]
100440c0:	e00a      	b.n	100440d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100440c2:	e000      	b.n	100440c6 <_read+0x16>
100440c4:	bf00      	nop
100440c6:	0001      	movs	r1, r0
100440c8:	68bb      	ldr	r3, [r7, #8]
100440ca:	1c5a      	adds	r2, r3, #1
100440cc:	60ba      	str	r2, [r7, #8]
100440ce:	b2ca      	uxtb	r2, r1
100440d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100440d2:	697b      	ldr	r3, [r7, #20]
100440d4:	3301      	adds	r3, #1
100440d6:	617b      	str	r3, [r7, #20]
100440d8:	697a      	ldr	r2, [r7, #20]
100440da:	687b      	ldr	r3, [r7, #4]
100440dc:	429a      	cmp	r2, r3
100440de:	dbf0      	blt.n	100440c2 <_read+0x12>
  }

  return len;
100440e0:	687b      	ldr	r3, [r7, #4]
}
100440e2:	0018      	movs	r0, r3
100440e4:	46bd      	mov	sp, r7
100440e6:	b006      	add	sp, #24
100440e8:	bd80      	pop	{r7, pc}

100440ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100440ea:	b580      	push	{r7, lr}
100440ec:	b086      	sub	sp, #24
100440ee:	af00      	add	r7, sp, #0
100440f0:	60f8      	str	r0, [r7, #12]
100440f2:	60b9      	str	r1, [r7, #8]
100440f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100440f6:	2300      	movs	r3, #0
100440f8:	617b      	str	r3, [r7, #20]
100440fa:	e009      	b.n	10044110 <_write+0x26>
  {
    __io_putchar(*ptr++);
100440fc:	68bb      	ldr	r3, [r7, #8]
100440fe:	1c5a      	adds	r2, r3, #1
10044100:	60ba      	str	r2, [r7, #8]
10044102:	781b      	ldrb	r3, [r3, #0]
10044104:	0018      	movs	r0, r3
10044106:	e000      	b.n	1004410a <_write+0x20>
10044108:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004410a:	697b      	ldr	r3, [r7, #20]
1004410c:	3301      	adds	r3, #1
1004410e:	617b      	str	r3, [r7, #20]
10044110:	697a      	ldr	r2, [r7, #20]
10044112:	687b      	ldr	r3, [r7, #4]
10044114:	429a      	cmp	r2, r3
10044116:	dbf1      	blt.n	100440fc <_write+0x12>
  }
  return len;
10044118:	687b      	ldr	r3, [r7, #4]
}
1004411a:	0018      	movs	r0, r3
1004411c:	46bd      	mov	sp, r7
1004411e:	b006      	add	sp, #24
10044120:	bd80      	pop	{r7, pc}

10044122 <_close>:

int _close(int file)
{
10044122:	b580      	push	{r7, lr}
10044124:	b082      	sub	sp, #8
10044126:	af00      	add	r7, sp, #0
10044128:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1004412a:	2301      	movs	r3, #1
1004412c:	425b      	negs	r3, r3
}
1004412e:	0018      	movs	r0, r3
10044130:	46bd      	mov	sp, r7
10044132:	b002      	add	sp, #8
10044134:	bd80      	pop	{r7, pc}

10044136 <_fstat>:


int _fstat(int file, struct stat *st)
{
10044136:	b580      	push	{r7, lr}
10044138:	b082      	sub	sp, #8
1004413a:	af00      	add	r7, sp, #0
1004413c:	6078      	str	r0, [r7, #4]
1004413e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10044140:	683b      	ldr	r3, [r7, #0]
10044142:	2280      	movs	r2, #128	@ 0x80
10044144:	0192      	lsls	r2, r2, #6
10044146:	605a      	str	r2, [r3, #4]
  return 0;
10044148:	2300      	movs	r3, #0
}
1004414a:	0018      	movs	r0, r3
1004414c:	46bd      	mov	sp, r7
1004414e:	b002      	add	sp, #8
10044150:	bd80      	pop	{r7, pc}

10044152 <_isatty>:

int _isatty(int file)
{
10044152:	b580      	push	{r7, lr}
10044154:	b082      	sub	sp, #8
10044156:	af00      	add	r7, sp, #0
10044158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1004415a:	2301      	movs	r3, #1
}
1004415c:	0018      	movs	r0, r3
1004415e:	46bd      	mov	sp, r7
10044160:	b002      	add	sp, #8
10044162:	bd80      	pop	{r7, pc}

10044164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10044164:	b580      	push	{r7, lr}
10044166:	b084      	sub	sp, #16
10044168:	af00      	add	r7, sp, #0
1004416a:	60f8      	str	r0, [r7, #12]
1004416c:	60b9      	str	r1, [r7, #8]
1004416e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10044170:	2300      	movs	r3, #0
}
10044172:	0018      	movs	r0, r3
10044174:	46bd      	mov	sp, r7
10044176:	b004      	add	sp, #16
10044178:	bd80      	pop	{r7, pc}
	...

1004417c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
1004417c:	b580      	push	{r7, lr}
1004417e:	b086      	sub	sp, #24
10044180:	af00      	add	r7, sp, #0
10044182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10044184:	4a14      	ldr	r2, [pc, #80]	@ (100441d8 <_sbrk+0x5c>)
10044186:	4b15      	ldr	r3, [pc, #84]	@ (100441dc <_sbrk+0x60>)
10044188:	1ad3      	subs	r3, r2, r3
1004418a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
1004418c:	697b      	ldr	r3, [r7, #20]
1004418e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10044190:	4b13      	ldr	r3, [pc, #76]	@ (100441e0 <_sbrk+0x64>)
10044192:	681b      	ldr	r3, [r3, #0]
10044194:	2b00      	cmp	r3, #0
10044196:	d102      	bne.n	1004419e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10044198:	4b11      	ldr	r3, [pc, #68]	@ (100441e0 <_sbrk+0x64>)
1004419a:	4a12      	ldr	r2, [pc, #72]	@ (100441e4 <_sbrk+0x68>)
1004419c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
1004419e:	4b10      	ldr	r3, [pc, #64]	@ (100441e0 <_sbrk+0x64>)
100441a0:	681a      	ldr	r2, [r3, #0]
100441a2:	687b      	ldr	r3, [r7, #4]
100441a4:	18d3      	adds	r3, r2, r3
100441a6:	693a      	ldr	r2, [r7, #16]
100441a8:	429a      	cmp	r2, r3
100441aa:	d207      	bcs.n	100441bc <_sbrk+0x40>
  {
    errno = ENOMEM;
100441ac:	f020 fdb6 	bl	10064d1c <__errno>
100441b0:	0003      	movs	r3, r0
100441b2:	220c      	movs	r2, #12
100441b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100441b6:	2301      	movs	r3, #1
100441b8:	425b      	negs	r3, r3
100441ba:	e009      	b.n	100441d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100441bc:	4b08      	ldr	r3, [pc, #32]	@ (100441e0 <_sbrk+0x64>)
100441be:	681b      	ldr	r3, [r3, #0]
100441c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100441c2:	4b07      	ldr	r3, [pc, #28]	@ (100441e0 <_sbrk+0x64>)
100441c4:	681a      	ldr	r2, [r3, #0]
100441c6:	687b      	ldr	r3, [r7, #4]
100441c8:	18d2      	adds	r2, r2, r3
100441ca:	4b05      	ldr	r3, [pc, #20]	@ (100441e0 <_sbrk+0x64>)
100441cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100441ce:	68fb      	ldr	r3, [r7, #12]
}
100441d0:	0018      	movs	r0, r3
100441d2:	46bd      	mov	sp, r7
100441d4:	b006      	add	sp, #24
100441d6:	bd80      	pop	{r7, pc}
100441d8:	20006000 	.word	0x20006000
100441dc:	00000c00 	.word	0x00000c00
100441e0:	20000c68 	.word	0x20000c68
100441e4:	20003538 	.word	0x20003538

100441e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100441e8:	b590      	push	{r4, r7, lr}
100441ea:	b083      	sub	sp, #12
100441ec:	af00      	add	r7, sp, #0
100441ee:	0002      	movs	r2, r0
100441f0:	6039      	str	r1, [r7, #0]
100441f2:	1dfb      	adds	r3, r7, #7
100441f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100441f6:	1dfb      	adds	r3, r7, #7
100441f8:	781b      	ldrb	r3, [r3, #0]
100441fa:	2b7f      	cmp	r3, #127	@ 0x7f
100441fc:	d828      	bhi.n	10044250 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100441fe:	4a2f      	ldr	r2, [pc, #188]	@ (100442bc <__NVIC_SetPriority+0xd4>)
10044200:	1dfb      	adds	r3, r7, #7
10044202:	781b      	ldrb	r3, [r3, #0]
10044204:	b25b      	sxtb	r3, r3
10044206:	089b      	lsrs	r3, r3, #2
10044208:	33c0      	adds	r3, #192	@ 0xc0
1004420a:	009b      	lsls	r3, r3, #2
1004420c:	589b      	ldr	r3, [r3, r2]
1004420e:	1dfa      	adds	r2, r7, #7
10044210:	7812      	ldrb	r2, [r2, #0]
10044212:	0011      	movs	r1, r2
10044214:	2203      	movs	r2, #3
10044216:	400a      	ands	r2, r1
10044218:	00d2      	lsls	r2, r2, #3
1004421a:	21ff      	movs	r1, #255	@ 0xff
1004421c:	4091      	lsls	r1, r2
1004421e:	000a      	movs	r2, r1
10044220:	43d2      	mvns	r2, r2
10044222:	401a      	ands	r2, r3
10044224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044226:	683b      	ldr	r3, [r7, #0]
10044228:	019b      	lsls	r3, r3, #6
1004422a:	22ff      	movs	r2, #255	@ 0xff
1004422c:	401a      	ands	r2, r3
1004422e:	1dfb      	adds	r3, r7, #7
10044230:	781b      	ldrb	r3, [r3, #0]
10044232:	0018      	movs	r0, r3
10044234:	2303      	movs	r3, #3
10044236:	4003      	ands	r3, r0
10044238:	00db      	lsls	r3, r3, #3
1004423a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004423c:	481f      	ldr	r0, [pc, #124]	@ (100442bc <__NVIC_SetPriority+0xd4>)
1004423e:	1dfb      	adds	r3, r7, #7
10044240:	781b      	ldrb	r3, [r3, #0]
10044242:	b25b      	sxtb	r3, r3
10044244:	089b      	lsrs	r3, r3, #2
10044246:	430a      	orrs	r2, r1
10044248:	33c0      	adds	r3, #192	@ 0xc0
1004424a:	009b      	lsls	r3, r3, #2
1004424c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1004424e:	e031      	b.n	100442b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044250:	4a1b      	ldr	r2, [pc, #108]	@ (100442c0 <__NVIC_SetPriority+0xd8>)
10044252:	1dfb      	adds	r3, r7, #7
10044254:	781b      	ldrb	r3, [r3, #0]
10044256:	0019      	movs	r1, r3
10044258:	230f      	movs	r3, #15
1004425a:	400b      	ands	r3, r1
1004425c:	3b08      	subs	r3, #8
1004425e:	089b      	lsrs	r3, r3, #2
10044260:	3306      	adds	r3, #6
10044262:	009b      	lsls	r3, r3, #2
10044264:	18d3      	adds	r3, r2, r3
10044266:	3304      	adds	r3, #4
10044268:	681b      	ldr	r3, [r3, #0]
1004426a:	1dfa      	adds	r2, r7, #7
1004426c:	7812      	ldrb	r2, [r2, #0]
1004426e:	0011      	movs	r1, r2
10044270:	2203      	movs	r2, #3
10044272:	400a      	ands	r2, r1
10044274:	00d2      	lsls	r2, r2, #3
10044276:	21ff      	movs	r1, #255	@ 0xff
10044278:	4091      	lsls	r1, r2
1004427a:	000a      	movs	r2, r1
1004427c:	43d2      	mvns	r2, r2
1004427e:	401a      	ands	r2, r3
10044280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044282:	683b      	ldr	r3, [r7, #0]
10044284:	019b      	lsls	r3, r3, #6
10044286:	22ff      	movs	r2, #255	@ 0xff
10044288:	401a      	ands	r2, r3
1004428a:	1dfb      	adds	r3, r7, #7
1004428c:	781b      	ldrb	r3, [r3, #0]
1004428e:	0018      	movs	r0, r3
10044290:	2303      	movs	r3, #3
10044292:	4003      	ands	r3, r0
10044294:	00db      	lsls	r3, r3, #3
10044296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044298:	4809      	ldr	r0, [pc, #36]	@ (100442c0 <__NVIC_SetPriority+0xd8>)
1004429a:	1dfb      	adds	r3, r7, #7
1004429c:	781b      	ldrb	r3, [r3, #0]
1004429e:	001c      	movs	r4, r3
100442a0:	230f      	movs	r3, #15
100442a2:	4023      	ands	r3, r4
100442a4:	3b08      	subs	r3, #8
100442a6:	089b      	lsrs	r3, r3, #2
100442a8:	430a      	orrs	r2, r1
100442aa:	3306      	adds	r3, #6
100442ac:	009b      	lsls	r3, r3, #2
100442ae:	18c3      	adds	r3, r0, r3
100442b0:	3304      	adds	r3, #4
100442b2:	601a      	str	r2, [r3, #0]
}
100442b4:	46c0      	nop			@ (mov r8, r8)
100442b6:	46bd      	mov	sp, r7
100442b8:	b003      	add	sp, #12
100442ba:	bd90      	pop	{r4, r7, pc}
100442bc:	e000e100 	.word	0xe000e100
100442c0:	e000ed00 	.word	0xe000ed00

100442c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100442c4:	b580      	push	{r7, lr}
100442c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100442c8:	f3bf 8f4f 	dsb	sy
}
100442cc:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100442ce:	4b04      	ldr	r3, [pc, #16]	@ (100442e0 <__NVIC_SystemReset+0x1c>)
100442d0:	4a04      	ldr	r2, [pc, #16]	@ (100442e4 <__NVIC_SystemReset+0x20>)
100442d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100442d4:	f3bf 8f4f 	dsb	sy
}
100442d8:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100442da:	46c0      	nop			@ (mov r8, r8)
100442dc:	e7fd      	b.n	100442da <__NVIC_SystemReset+0x16>
100442de:	46c0      	nop			@ (mov r8, r8)
100442e0:	e000ed00 	.word	0xe000ed00
100442e4:	05fa0004 	.word	0x05fa0004

100442e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100442e8:	b590      	push	{r4, r7, lr}
100442ea:	b087      	sub	sp, #28
100442ec:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100442ee:	4a5e      	ldr	r2, [pc, #376]	@ (10044468 <SystemInit+0x180>)
100442f0:	2394      	movs	r3, #148	@ 0x94
100442f2:	58d3      	ldr	r3, [r2, r3]
100442f4:	2b00      	cmp	r3, #0
100442f6:	d10e      	bne.n	10044316 <SystemInit+0x2e>
100442f8:	4b5c      	ldr	r3, [pc, #368]	@ (1004446c <SystemInit+0x184>)
100442fa:	691b      	ldr	r3, [r3, #16]
100442fc:	2b00      	cmp	r3, #0
100442fe:	d103      	bne.n	10044308 <SystemInit+0x20>
10044300:	4b5a      	ldr	r3, [pc, #360]	@ (1004446c <SystemInit+0x184>)
10044302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10044304:	2b00      	cmp	r3, #0
10044306:	d006      	beq.n	10044316 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10044308:	4b59      	ldr	r3, [pc, #356]	@ (10044470 <SystemInit+0x188>)
1004430a:	2201      	movs	r2, #1
1004430c:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
1004430e:	f7fb ff6b 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10044312:	f7ff ffd7 	bl	100442c4 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10044316:	4b57      	ldr	r3, [pc, #348]	@ (10044474 <SystemInit+0x18c>)
10044318:	4a57      	ldr	r2, [pc, #348]	@ (10044478 <SystemInit+0x190>)
1004431a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
1004431c:	4b55      	ldr	r3, [pc, #340]	@ (10044474 <SystemInit+0x18c>)
1004431e:	689a      	ldr	r2, [r3, #8]
10044320:	4b53      	ldr	r3, [pc, #332]	@ (10044470 <SystemInit+0x188>)
10044322:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10044324:	4b51      	ldr	r3, [pc, #324]	@ (1004446c <SystemInit+0x184>)
10044326:	685a      	ldr	r2, [r3, #4]
10044328:	4b50      	ldr	r3, [pc, #320]	@ (1004446c <SystemInit+0x184>)
1004432a:	2120      	movs	r1, #32
1004432c:	430a      	orrs	r2, r1
1004432e:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10044330:	4b4e      	ldr	r3, [pc, #312]	@ (1004446c <SystemInit+0x184>)
10044332:	685a      	ldr	r2, [r3, #4]
10044334:	4b4d      	ldr	r3, [pc, #308]	@ (1004446c <SystemInit+0x184>)
10044336:	4951      	ldr	r1, [pc, #324]	@ (1004447c <SystemInit+0x194>)
10044338:	400a      	ands	r2, r1
1004433a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004433c:	46c0      	nop			@ (mov r8, r8)
1004433e:	4b4b      	ldr	r3, [pc, #300]	@ (1004446c <SystemInit+0x184>)
10044340:	695b      	ldr	r3, [r3, #20]
10044342:	2204      	movs	r2, #4
10044344:	4013      	ands	r3, r2
10044346:	2b04      	cmp	r3, #4
10044348:	d1f9      	bne.n	1004433e <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004434a:	4b48      	ldr	r3, [pc, #288]	@ (1004446c <SystemInit+0x184>)
1004434c:	69db      	ldr	r3, [r3, #28]
1004434e:	2230      	movs	r2, #48	@ 0x30
10044350:	4393      	bics	r3, r2
10044352:	001a      	movs	r2, r3
10044354:	4b45      	ldr	r3, [pc, #276]	@ (1004446c <SystemInit+0x184>)
10044356:	2120      	movs	r1, #32
10044358:	430a      	orrs	r2, r1
1004435a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
1004435c:	4b43      	ldr	r3, [pc, #268]	@ (1004446c <SystemInit+0x184>)
1004435e:	69da      	ldr	r2, [r3, #28]
10044360:	4b42      	ldr	r3, [pc, #264]	@ (1004446c <SystemInit+0x184>)
10044362:	4947      	ldr	r1, [pc, #284]	@ (10044480 <SystemInit+0x198>)
10044364:	400a      	ands	r2, r1
10044366:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10044368:	4b40      	ldr	r3, [pc, #256]	@ (1004446c <SystemInit+0x184>)
1004436a:	69da      	ldr	r2, [r3, #28]
1004436c:	4b3f      	ldr	r3, [pc, #252]	@ (1004446c <SystemInit+0x184>)
1004436e:	2180      	movs	r1, #128	@ 0x80
10044370:	0049      	lsls	r1, r1, #1
10044372:	430a      	orrs	r2, r1
10044374:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10044376:	4b43      	ldr	r3, [pc, #268]	@ (10044484 <SystemInit+0x19c>)
10044378:	681b      	ldr	r3, [r3, #0]
1004437a:	4a43      	ldr	r2, [pc, #268]	@ (10044488 <SystemInit+0x1a0>)
1004437c:	4293      	cmp	r3, r2
1004437e:	d055      	beq.n	1004442c <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10044380:	231f      	movs	r3, #31
10044382:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10044384:	2308      	movs	r3, #8
10044386:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10044388:	230a      	movs	r3, #10
1004438a:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
1004438c:	2303      	movs	r3, #3
1004438e:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10044390:	4b35      	ldr	r3, [pc, #212]	@ (10044468 <SystemInit+0x180>)
10044392:	68db      	ldr	r3, [r3, #12]
10044394:	221e      	movs	r2, #30
10044396:	4393      	bics	r3, r2
10044398:	0019      	movs	r1, r3
1004439a:	68fb      	ldr	r3, [r7, #12]
1004439c:	005a      	lsls	r2, r3, #1
1004439e:	4b32      	ldr	r3, [pc, #200]	@ (10044468 <SystemInit+0x180>)
100443a0:	430a      	orrs	r2, r1
100443a2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
100443a4:	4b30      	ldr	r3, [pc, #192]	@ (10044468 <SystemInit+0x180>)
100443a6:	68da      	ldr	r2, [r3, #12]
100443a8:	4b2f      	ldr	r3, [pc, #188]	@ (10044468 <SystemInit+0x180>)
100443aa:	2101      	movs	r1, #1
100443ac:	430a      	orrs	r2, r1
100443ae:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
100443b0:	4b2d      	ldr	r3, [pc, #180]	@ (10044468 <SystemInit+0x180>)
100443b2:	68db      	ldr	r3, [r3, #12]
100443b4:	4a35      	ldr	r2, [pc, #212]	@ (1004448c <SystemInit+0x1a4>)
100443b6:	4013      	ands	r3, r2
100443b8:	0019      	movs	r1, r3
100443ba:	693b      	ldr	r3, [r7, #16]
100443bc:	061a      	lsls	r2, r3, #24
100443be:	4b2a      	ldr	r3, [pc, #168]	@ (10044468 <SystemInit+0x180>)
100443c0:	430a      	orrs	r2, r1
100443c2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
100443c4:	4b28      	ldr	r3, [pc, #160]	@ (10044468 <SystemInit+0x180>)
100443c6:	68da      	ldr	r2, [r3, #12]
100443c8:	4b27      	ldr	r3, [pc, #156]	@ (10044468 <SystemInit+0x180>)
100443ca:	2180      	movs	r1, #128	@ 0x80
100443cc:	0409      	lsls	r1, r1, #16
100443ce:	430a      	orrs	r2, r1
100443d0:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
100443d2:	4a26      	ldr	r2, [pc, #152]	@ (1004446c <SystemInit+0x184>)
100443d4:	2394      	movs	r3, #148	@ 0x94
100443d6:	58d3      	ldr	r3, [r2, r3]
100443d8:	4a2d      	ldr	r2, [pc, #180]	@ (10044490 <SystemInit+0x1a8>)
100443da:	401a      	ands	r2, r3
100443dc:	68bb      	ldr	r3, [r7, #8]
100443de:	0199      	lsls	r1, r3, #6
100443e0:	23f0      	movs	r3, #240	@ 0xf0
100443e2:	009b      	lsls	r3, r3, #2
100443e4:	400b      	ands	r3, r1
100443e6:	4921      	ldr	r1, [pc, #132]	@ (1004446c <SystemInit+0x184>)
100443e8:	4313      	orrs	r3, r2
100443ea:	2294      	movs	r2, #148	@ 0x94
100443ec:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
100443ee:	4a1f      	ldr	r2, [pc, #124]	@ (1004446c <SystemInit+0x184>)
100443f0:	2394      	movs	r3, #148	@ 0x94
100443f2:	58d3      	ldr	r3, [r2, r3]
100443f4:	491d      	ldr	r1, [pc, #116]	@ (1004446c <SystemInit+0x184>)
100443f6:	2220      	movs	r2, #32
100443f8:	4313      	orrs	r3, r2
100443fa:	2294      	movs	r2, #148	@ 0x94
100443fc:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
100443fe:	4a1b      	ldr	r2, [pc, #108]	@ (1004446c <SystemInit+0x184>)
10044400:	2394      	movs	r3, #148	@ 0x94
10044402:	58d3      	ldr	r3, [r2, r3]
10044404:	4a23      	ldr	r2, [pc, #140]	@ (10044494 <SystemInit+0x1ac>)
10044406:	401a      	ands	r2, r3
10044408:	687b      	ldr	r3, [r7, #4]
1004440a:	02d9      	lsls	r1, r3, #11
1004440c:	23e0      	movs	r3, #224	@ 0xe0
1004440e:	019b      	lsls	r3, r3, #6
10044410:	400b      	ands	r3, r1
10044412:	4916      	ldr	r1, [pc, #88]	@ (1004446c <SystemInit+0x184>)
10044414:	4313      	orrs	r3, r2
10044416:	2294      	movs	r2, #148	@ 0x94
10044418:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004441a:	4a14      	ldr	r2, [pc, #80]	@ (1004446c <SystemInit+0x184>)
1004441c:	2394      	movs	r3, #148	@ 0x94
1004441e:	58d3      	ldr	r3, [r2, r3]
10044420:	4912      	ldr	r1, [pc, #72]	@ (1004446c <SystemInit+0x184>)
10044422:	2280      	movs	r2, #128	@ 0x80
10044424:	00d2      	lsls	r2, r2, #3
10044426:	4313      	orrs	r3, r2
10044428:	2294      	movs	r2, #148	@ 0x94
1004442a:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
1004442c:	2317      	movs	r3, #23
1004442e:	18fb      	adds	r3, r7, r3
10044430:	2200      	movs	r2, #0
10044432:	701a      	strb	r2, [r3, #0]
10044434:	e00d      	b.n	10044452 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10044436:	2417      	movs	r4, #23
10044438:	193b      	adds	r3, r7, r4
1004443a:	781b      	ldrb	r3, [r3, #0]
1004443c:	b25b      	sxtb	r3, r3
1004443e:	2103      	movs	r1, #3
10044440:	0018      	movs	r0, r3
10044442:	f7ff fed1 	bl	100441e8 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10044446:	0021      	movs	r1, r4
10044448:	187b      	adds	r3, r7, r1
1004444a:	781a      	ldrb	r2, [r3, #0]
1004444c:	187b      	adds	r3, r7, r1
1004444e:	3201      	adds	r2, #1
10044450:	701a      	strb	r2, [r3, #0]
10044452:	2317      	movs	r3, #23
10044454:	18fb      	adds	r3, r7, r3
10044456:	781b      	ldrb	r3, [r3, #0]
10044458:	2b1f      	cmp	r3, #31
1004445a:	d9ec      	bls.n	10044436 <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
1004445c:	b662      	cpsie	i
}
1004445e:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10044460:	46c0      	nop			@ (mov r8, r8)
10044462:	46bd      	mov	sp, r7
10044464:	b007      	add	sp, #28
10044466:	bd90      	pop	{r4, r7, pc}
10044468:	48400000 	.word	0x48400000
1004446c:	48500000 	.word	0x48500000
10044470:	20000004 	.word	0x20000004
10044474:	e000ed00 	.word	0xe000ed00
10044478:	10040000 	.word	0x10040000
1004447c:	fffffeff 	.word	0xfffffeff
10044480:	fffffbff 	.word	0xfffffbff
10044484:	10001ef8 	.word	0x10001ef8
10044488:	fcbceccc 	.word	0xfcbceccc
1004448c:	c0ffffff 	.word	0xc0ffffff
10044490:	fffffc3f 	.word	0xfffffc3f
10044494:	ffffc7ff 	.word	0xffffc7ff

10044498 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10044498:	b580      	push	{r7, lr}
1004449a:	b082      	sub	sp, #8
1004449c:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
1004449e:	4b13      	ldr	r3, [pc, #76]	@ (100444ec <SystemCoreClockUpdate+0x54>)
100444a0:	689b      	ldr	r3, [r3, #8]
100444a2:	085b      	lsrs	r3, r3, #1
100444a4:	b2da      	uxtb	r2, r3
100444a6:	1dfb      	adds	r3, r7, #7
100444a8:	2101      	movs	r1, #1
100444aa:	400a      	ands	r2, r1
100444ac:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
100444ae:	4b0f      	ldr	r3, [pc, #60]	@ (100444ec <SystemCoreClockUpdate+0x54>)
100444b0:	689b      	ldr	r3, [r3, #8]
100444b2:	0a1b      	lsrs	r3, r3, #8
100444b4:	b2da      	uxtb	r2, r3
100444b6:	1dbb      	adds	r3, r7, #6
100444b8:	2107      	movs	r1, #7
100444ba:	400a      	ands	r2, r1
100444bc:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
100444be:	1dfb      	adds	r3, r7, #7
100444c0:	781b      	ldrb	r3, [r3, #0]
100444c2:	2b00      	cmp	r3, #0
100444c4:	d007      	beq.n	100444d6 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
100444c6:	1dbb      	adds	r3, r7, #6
100444c8:	781b      	ldrb	r3, [r3, #0]
100444ca:	3b01      	subs	r3, #1
100444cc:	4a08      	ldr	r2, [pc, #32]	@ (100444f0 <SystemCoreClockUpdate+0x58>)
100444ce:	40da      	lsrs	r2, r3
100444d0:	4b08      	ldr	r3, [pc, #32]	@ (100444f4 <SystemCoreClockUpdate+0x5c>)
100444d2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
100444d4:	e005      	b.n	100444e2 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
100444d6:	1dbb      	adds	r3, r7, #6
100444d8:	781b      	ldrb	r3, [r3, #0]
100444da:	4a07      	ldr	r2, [pc, #28]	@ (100444f8 <SystemCoreClockUpdate+0x60>)
100444dc:	40da      	lsrs	r2, r3
100444de:	4b05      	ldr	r3, [pc, #20]	@ (100444f4 <SystemCoreClockUpdate+0x5c>)
100444e0:	601a      	str	r2, [r3, #0]
}
100444e2:	46c0      	nop			@ (mov r8, r8)
100444e4:	46bd      	mov	sp, r7
100444e6:	b002      	add	sp, #8
100444e8:	bd80      	pop	{r7, pc}
100444ea:	46c0      	nop			@ (mov r8, r8)
100444ec:	48400000 	.word	0x48400000
100444f0:	01e84800 	.word	0x01e84800
100444f4:	200010f4 	.word	0x200010f4
100444f8:	03d09000 	.word	0x03d09000

100444fc <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
100444fc:	4810      	ldr	r0, [pc, #64]	@ (10044540 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
100444fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10044500:	f7ff fef2 	bl	100442e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10044504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10044506:	e003      	b.n	10044510 <LoopCopyDataInit>

10044508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10044508:	4b0e      	ldr	r3, [pc, #56]	@ (10044544 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1004450a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1004450c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1004450e:	3104      	adds	r1, #4

10044510 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10044510:	480d      	ldr	r0, [pc, #52]	@ (10044548 <LoopForever+0xa>)
  ldr  r3, =_edata
10044512:	4b0e      	ldr	r3, [pc, #56]	@ (1004454c <LoopForever+0xe>)
  adds  r2, r0, r1
10044514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10044516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10044518:	d3f6      	bcc.n	10044508 <CopyDataInit>
  ldr  r2, =_sbss
1004451a:	4a0d      	ldr	r2, [pc, #52]	@ (10044550 <LoopForever+0x12>)
  b  LoopFillZerobss
1004451c:	e002      	b.n	10044524 <LoopFillZerobss>

1004451e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
1004451e:	2300      	movs	r3, #0
  str  r3, [r2]
10044520:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10044522:	3204      	adds	r2, #4

10044524 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10044524:	4b0b      	ldr	r3, [pc, #44]	@ (10044554 <LoopForever+0x16>)
  cmp  r2, r3
10044526:	429a      	cmp	r2, r3
  bcc  FillZerobss
10044528:	d3f9      	bcc.n	1004451e <FillZerobss>
  ldr  r2, =_sbssblue
1004452a:	4a0b      	ldr	r2, [pc, #44]	@ (10044558 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
1004452c:	e002      	b.n	10044534 <LoopFillZeroBlueRam>

1004452e <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
1004452e:	2300      	movs	r3, #0
  str  r3, [r2]
10044530:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10044532:	3204      	adds	r2, #4

10044534 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10044534:	4b09      	ldr	r3, [pc, #36]	@ (1004455c <LoopForever+0x1e>)
  cmp  r2, r3
10044536:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10044538:	d3f9      	bcc.n	1004452e <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
1004453a:	f7ff fa65 	bl	10043a08 <main>

1004453e <LoopForever>:

LoopForever:
    b LoopForever
1004453e:	e7fe      	b.n	1004453e <LoopForever>
   ldr   r0, =_estack
10044540:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10044544:	1006621c 	.word	0x1006621c
  ldr  r0, =_sdata
10044548:	200010c4 	.word	0x200010c4
  ldr  r3, =_edata
1004454c:	200012fc 	.word	0x200012fc
  ldr  r2, =_sbss
10044550:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10044554:	200010c4 	.word	0x200010c4
  ldr  r2, =_sbssblue
10044558:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
1004455c:	20000194 	.word	0x20000194

10044560 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10044560:	e7fe      	b.n	10044560 <ADC_IRQHandler>
	...

10044564 <LL_PWR_IsEnabledPUPDCfg>:
  * @brief  Check if pull-up and pull-down configuration is enabled
  * @rmtoll CR1          APC           LL_PWR_IsEnabledPUPDCfg
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
10044564:	b580      	push	{r7, lr}
10044566:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10044568:	4b05      	ldr	r3, [pc, #20]	@ (10044580 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
1004456a:	681b      	ldr	r3, [r3, #0]
1004456c:	2210      	movs	r2, #16
1004456e:	4013      	ands	r3, r2
10044570:	2b10      	cmp	r3, #16
10044572:	d101      	bne.n	10044578 <LL_PWR_IsEnabledPUPDCfg+0x14>
10044574:	2301      	movs	r3, #1
10044576:	e000      	b.n	1004457a <LL_PWR_IsEnabledPUPDCfg+0x16>
10044578:	2300      	movs	r3, #0
}
1004457a:	0018      	movs	r0, r3
1004457c:	46bd      	mov	sp, r7
1004457e:	bd80      	pop	{r7, pc}
10044580:	48500000 	.word	0x48500000

10044584 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10044584:	b580      	push	{r7, lr}
10044586:	b082      	sub	sp, #8
10044588:	af00      	add	r7, sp, #0
1004458a:	6078      	str	r0, [r7, #4]
1004458c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
1004458e:	687b      	ldr	r3, [r7, #4]
10044590:	3304      	adds	r3, #4
10044592:	681a      	ldr	r2, [r3, #0]
10044594:	683b      	ldr	r3, [r7, #0]
10044596:	43d9      	mvns	r1, r3
10044598:	687b      	ldr	r3, [r7, #4]
1004459a:	3304      	adds	r3, #4
1004459c:	400a      	ands	r2, r1
1004459e:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100445a0:	687b      	ldr	r3, [r7, #4]
100445a2:	6819      	ldr	r1, [r3, #0]
100445a4:	687b      	ldr	r3, [r7, #4]
100445a6:	683a      	ldr	r2, [r7, #0]
100445a8:	430a      	orrs	r2, r1
100445aa:	601a      	str	r2, [r3, #0]
}
100445ac:	46c0      	nop			@ (mov r8, r8)
100445ae:	46bd      	mov	sp, r7
100445b0:	b002      	add	sp, #8
100445b2:	bd80      	pop	{r7, pc}

100445b4 <LL_AHB1_GRP1_EnableClock>:
{
100445b4:	b580      	push	{r7, lr}
100445b6:	b084      	sub	sp, #16
100445b8:	af00      	add	r7, sp, #0
100445ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100445bc:	4b07      	ldr	r3, [pc, #28]	@ (100445dc <LL_AHB1_GRP1_EnableClock+0x28>)
100445be:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100445c0:	4b06      	ldr	r3, [pc, #24]	@ (100445dc <LL_AHB1_GRP1_EnableClock+0x28>)
100445c2:	687a      	ldr	r2, [r7, #4]
100445c4:	430a      	orrs	r2, r1
100445c6:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100445c8:	4b04      	ldr	r3, [pc, #16]	@ (100445dc <LL_AHB1_GRP1_EnableClock+0x28>)
100445ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100445cc:	687a      	ldr	r2, [r7, #4]
100445ce:	4013      	ands	r3, r2
100445d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100445d2:	68fb      	ldr	r3, [r7, #12]
}
100445d4:	46c0      	nop			@ (mov r8, r8)
100445d6:	46bd      	mov	sp, r7
100445d8:	b004      	add	sp, #16
100445da:	bd80      	pop	{r7, pc}
100445dc:	48400000 	.word	0x48400000

100445e0 <LL_APB0_GRP1_EnableClock>:
{
100445e0:	b580      	push	{r7, lr}
100445e2:	b084      	sub	sp, #16
100445e4:	af00      	add	r7, sp, #0
100445e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
100445e8:	4b07      	ldr	r3, [pc, #28]	@ (10044608 <LL_APB0_GRP1_EnableClock+0x28>)
100445ea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100445ec:	4b06      	ldr	r3, [pc, #24]	@ (10044608 <LL_APB0_GRP1_EnableClock+0x28>)
100445ee:	687a      	ldr	r2, [r7, #4]
100445f0:	430a      	orrs	r2, r1
100445f2:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100445f4:	4b04      	ldr	r3, [pc, #16]	@ (10044608 <LL_APB0_GRP1_EnableClock+0x28>)
100445f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100445f8:	687a      	ldr	r2, [r7, #4]
100445fa:	4013      	ands	r3, r2
100445fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100445fe:	68fb      	ldr	r3, [r7, #12]
}
10044600:	46c0      	nop			@ (mov r8, r8)
10044602:	46bd      	mov	sp, r7
10044604:	b004      	add	sp, #16
10044606:	bd80      	pop	{r7, pc}
10044608:	48400000 	.word	0x48400000

1004460c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
1004460c:	b590      	push	{r4, r7, lr}
1004460e:	b089      	sub	sp, #36	@ 0x24
10044610:	af00      	add	r7, sp, #0
10044612:	0002      	movs	r2, r0
10044614:	1dfb      	adds	r3, r7, #7
10044616:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10044618:	1dfb      	adds	r3, r7, #7
1004461a:	781b      	ldrb	r3, [r3, #0]
1004461c:	2b00      	cmp	r3, #0
1004461e:	d103      	bne.n	10044628 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10044620:	2008      	movs	r0, #8
10044622:	f7ff ffc7 	bl	100445b4 <LL_AHB1_GRP1_EnableClock>
10044626:	e00a      	b.n	1004463e <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10044628:	1dfb      	adds	r3, r7, #7
1004462a:	781b      	ldrb	r3, [r3, #0]
1004462c:	2b01      	cmp	r3, #1
1004462e:	d103      	bne.n	10044638 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10044630:	2008      	movs	r0, #8
10044632:	f7ff ffbf 	bl	100445b4 <LL_AHB1_GRP1_EnableClock>
10044636:	e002      	b.n	1004463e <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10044638:	2008      	movs	r0, #8
1004463a:	f7ff ffbb 	bl	100445b4 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
1004463e:	1dfb      	adds	r3, r7, #7
10044640:	781a      	ldrb	r2, [r3, #0]
10044642:	4b28      	ldr	r3, [pc, #160]	@ (100446e4 <BSP_LED_Init+0xd8>)
10044644:	0052      	lsls	r2, r2, #1
10044646:	5ad3      	ldrh	r3, [r2, r3]
10044648:	001a      	movs	r2, r3
1004464a:	240c      	movs	r4, #12
1004464c:	193b      	adds	r3, r7, r4
1004464e:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10044650:	193b      	adds	r3, r7, r4
10044652:	2201      	movs	r2, #1
10044654:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10044656:	193b      	adds	r3, r7, r4
10044658:	2201      	movs	r2, #1
1004465a:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
1004465c:	193b      	adds	r3, r7, r4
1004465e:	2202      	movs	r2, #2
10044660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10044662:	1dfb      	adds	r3, r7, #7
10044664:	781a      	ldrb	r2, [r3, #0]
10044666:	4b20      	ldr	r3, [pc, #128]	@ (100446e8 <BSP_LED_Init+0xdc>)
10044668:	0092      	lsls	r2, r2, #2
1004466a:	58d3      	ldr	r3, [r2, r3]
1004466c:	193a      	adds	r2, r7, r4
1004466e:	0011      	movs	r1, r2
10044670:	0018      	movs	r0, r3
10044672:	f000 fc5b 	bl	10044f2c <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10044676:	f7ff ff75 	bl	10044564 <LL_PWR_IsEnabledPUPDCfg>
1004467a:	1e03      	subs	r3, r0, #0
1004467c:	d01f      	beq.n	100446be <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
1004467e:	1dfb      	adds	r3, r7, #7
10044680:	781a      	ldrb	r2, [r3, #0]
10044682:	4b19      	ldr	r3, [pc, #100]	@ (100446e8 <BSP_LED_Init+0xdc>)
10044684:	0092      	lsls	r2, r2, #2
10044686:	58d2      	ldr	r2, [r2, r3]
10044688:	2390      	movs	r3, #144	@ 0x90
1004468a:	05db      	lsls	r3, r3, #23
1004468c:	429a      	cmp	r2, r3
1004468e:	d106      	bne.n	1004469e <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10044690:	193b      	adds	r3, r7, r4
10044692:	681b      	ldr	r3, [r3, #0]
10044694:	4a15      	ldr	r2, [pc, #84]	@ (100446ec <BSP_LED_Init+0xe0>)
10044696:	0019      	movs	r1, r3
10044698:	0010      	movs	r0, r2
1004469a:	f7ff ff73 	bl	10044584 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
1004469e:	1dfb      	adds	r3, r7, #7
100446a0:	781a      	ldrb	r2, [r3, #0]
100446a2:	4b11      	ldr	r3, [pc, #68]	@ (100446e8 <BSP_LED_Init+0xdc>)
100446a4:	0092      	lsls	r2, r2, #2
100446a6:	58d3      	ldr	r3, [r2, r3]
100446a8:	4a11      	ldr	r2, [pc, #68]	@ (100446f0 <BSP_LED_Init+0xe4>)
100446aa:	4293      	cmp	r3, r2
100446ac:	d107      	bne.n	100446be <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
100446ae:	230c      	movs	r3, #12
100446b0:	18fb      	adds	r3, r7, r3
100446b2:	681b      	ldr	r3, [r3, #0]
100446b4:	4a0f      	ldr	r2, [pc, #60]	@ (100446f4 <BSP_LED_Init+0xe8>)
100446b6:	0019      	movs	r1, r3
100446b8:	0010      	movs	r0, r2
100446ba:	f7ff ff63 	bl	10044584 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100446be:	1dfb      	adds	r3, r7, #7
100446c0:	781a      	ldrb	r2, [r3, #0]
100446c2:	4b09      	ldr	r3, [pc, #36]	@ (100446e8 <BSP_LED_Init+0xdc>)
100446c4:	0092      	lsls	r2, r2, #2
100446c6:	58d0      	ldr	r0, [r2, r3]
100446c8:	1dfb      	adds	r3, r7, #7
100446ca:	781a      	ldrb	r2, [r3, #0]
100446cc:	4b05      	ldr	r3, [pc, #20]	@ (100446e4 <BSP_LED_Init+0xd8>)
100446ce:	0052      	lsls	r2, r2, #1
100446d0:	5ad3      	ldrh	r3, [r2, r3]
100446d2:	2201      	movs	r2, #1
100446d4:	0019      	movs	r1, r3
100446d6:	f000 fdeb 	bl	100452b0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
100446da:	2300      	movs	r3, #0
}
100446dc:	0018      	movs	r0, r3
100446de:	46bd      	mov	sp, r7
100446e0:	b009      	add	sp, #36	@ 0x24
100446e2:	bd90      	pop	{r4, r7, pc}
100446e4:	200010f8 	.word	0x200010f8
100446e8:	20001100 	.word	0x20001100
100446ec:	48500020 	.word	0x48500020
100446f0:	48100000 	.word	0x48100000
100446f4:	48500028 	.word	0x48500028

100446f8 <BSP_LED_Toggle>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
100446f8:	b580      	push	{r7, lr}
100446fa:	b082      	sub	sp, #8
100446fc:	af00      	add	r7, sp, #0
100446fe:	0002      	movs	r2, r0
10044700:	1dfb      	adds	r3, r7, #7
10044702:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10044704:	1dfb      	adds	r3, r7, #7
10044706:	781a      	ldrb	r2, [r3, #0]
10044708:	4b07      	ldr	r3, [pc, #28]	@ (10044728 <BSP_LED_Toggle+0x30>)
1004470a:	0092      	lsls	r2, r2, #2
1004470c:	58d0      	ldr	r0, [r2, r3]
1004470e:	1dfb      	adds	r3, r7, #7
10044710:	781a      	ldrb	r2, [r3, #0]
10044712:	4b06      	ldr	r3, [pc, #24]	@ (1004472c <BSP_LED_Toggle+0x34>)
10044714:	0052      	lsls	r2, r2, #1
10044716:	5ad3      	ldrh	r3, [r2, r3]
10044718:	0019      	movs	r1, r3
1004471a:	f000 fde6 	bl	100452ea <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
1004471e:	2300      	movs	r3, #0
}
10044720:	0018      	movs	r0, r3
10044722:	46bd      	mov	sp, r7
10044724:	b002      	add	sp, #8
10044726:	bd80      	pop	{r7, pc}
10044728:	20001100 	.word	0x20001100
1004472c:	200010f8 	.word	0x200010f8

10044730 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
10044730:	b580      	push	{r7, lr}
10044732:	b088      	sub	sp, #32
10044734:	af00      	add	r7, sp, #0
10044736:	0002      	movs	r2, r0
10044738:	1dfb      	adds	r3, r7, #7
1004473a:	701a      	strb	r2, [r3, #0]
1004473c:	1dbb      	adds	r3, r7, #6
1004473e:	1c0a      	adds	r2, r1, #0
10044740:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
10044742:	2300      	movs	r3, #0
10044744:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
10044746:	1dfb      	adds	r3, r7, #7
10044748:	781b      	ldrb	r3, [r3, #0]
1004474a:	2b00      	cmp	r3, #0
1004474c:	d103      	bne.n	10044756 <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
1004474e:	2004      	movs	r0, #4
10044750:	f7ff ff30 	bl	100445b4 <LL_AHB1_GRP1_EnableClock>
10044754:	e00a      	b.n	1004476c <BSP_PB_Init+0x3c>
  }
  else if (Button == B2)
10044756:	1dfb      	adds	r3, r7, #7
10044758:	781b      	ldrb	r3, [r3, #0]
1004475a:	2b01      	cmp	r3, #1
1004475c:	d103      	bne.n	10044766 <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
1004475e:	2008      	movs	r0, #8
10044760:	f7ff ff28 	bl	100445b4 <LL_AHB1_GRP1_EnableClock>
10044764:	e002      	b.n	1004476c <BSP_PB_Init+0x3c>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
10044766:	2008      	movs	r0, #8
10044768:	f7ff ff24 	bl	100445b4 <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
1004476c:	1dfb      	adds	r3, r7, #7
1004476e:	781a      	ldrb	r2, [r3, #0]
10044770:	4b37      	ldr	r3, [pc, #220]	@ (10044850 <BSP_PB_Init+0x120>)
10044772:	0052      	lsls	r2, r2, #1
10044774:	5ad3      	ldrh	r3, [r2, r3]
10044776:	001a      	movs	r2, r3
10044778:	2108      	movs	r1, #8
1004477a:	187b      	adds	r3, r7, r1
1004477c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004477e:	187b      	adds	r3, r7, r1
10044780:	2201      	movs	r2, #1
10044782:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10044784:	187b      	adds	r3, r7, r1
10044786:	2202      	movs	r2, #2
10044788:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
1004478a:	1dbb      	adds	r3, r7, #6
1004478c:	781b      	ldrb	r3, [r3, #0]
1004478e:	2b00      	cmp	r3, #0
10044790:	d10c      	bne.n	100447ac <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
10044792:	187b      	adds	r3, r7, r1
10044794:	2200      	movs	r2, #0
10044796:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10044798:	1dfb      	adds	r3, r7, #7
1004479a:	781a      	ldrb	r2, [r3, #0]
1004479c:	4b2d      	ldr	r3, [pc, #180]	@ (10044854 <BSP_PB_Init+0x124>)
1004479e:	0092      	lsls	r2, r2, #2
100447a0:	58d3      	ldr	r3, [r2, r3]
100447a2:	187a      	adds	r2, r7, r1
100447a4:	0011      	movs	r1, r2
100447a6:	0018      	movs	r0, r3
100447a8:	f000 fbc0 	bl	10044f2c <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
100447ac:	1dbb      	adds	r3, r7, #6
100447ae:	781b      	ldrb	r3, [r3, #0]
100447b0:	2b01      	cmp	r3, #1
100447b2:	d123      	bne.n	100447fc <BSP_PB_Init+0xcc>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
100447b4:	2380      	movs	r3, #128	@ 0x80
100447b6:	005b      	lsls	r3, r3, #1
100447b8:	0018      	movs	r0, r3
100447ba:	f7ff ff11 	bl	100445e0 <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
100447be:	2108      	movs	r1, #8
100447c0:	187b      	adds	r3, r7, r1
100447c2:	2280      	movs	r2, #128	@ 0x80
100447c4:	0252      	lsls	r2, r2, #9
100447c6:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
100447c8:	1dfb      	adds	r3, r7, #7
100447ca:	781a      	ldrb	r2, [r3, #0]
100447cc:	4b21      	ldr	r3, [pc, #132]	@ (10044854 <BSP_PB_Init+0x124>)
100447ce:	0092      	lsls	r2, r2, #2
100447d0:	58d3      	ldr	r3, [r2, r3]
100447d2:	187a      	adds	r2, r7, r1
100447d4:	0011      	movs	r1, r2
100447d6:	0018      	movs	r0, r3
100447d8:	f000 fba8 	bl	10044f2c <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
100447dc:	1dfb      	adds	r3, r7, #7
100447de:	781b      	ldrb	r3, [r3, #0]
100447e0:	4a1d      	ldr	r2, [pc, #116]	@ (10044858 <BSP_PB_Init+0x128>)
100447e2:	56d3      	ldrsb	r3, [r2, r3]
100447e4:	2200      	movs	r2, #0
100447e6:	2103      	movs	r1, #3
100447e8:	0018      	movs	r0, r3
100447ea:	f000 f981 	bl	10044af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
100447ee:	1dfb      	adds	r3, r7, #7
100447f0:	781b      	ldrb	r3, [r3, #0]
100447f2:	4a19      	ldr	r2, [pc, #100]	@ (10044858 <BSP_PB_Init+0x128>)
100447f4:	56d3      	ldrsb	r3, [r2, r3]
100447f6:	0018      	movs	r0, r3
100447f8:	f000 f98f 	bl	10044b1a <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
100447fc:	f7ff feb2 	bl	10044564 <LL_PWR_IsEnabledPUPDCfg>
10044800:	1e03      	subs	r3, r0, #0
10044802:	d020      	beq.n	10044846 <BSP_PB_Init+0x116>
  {
    if (BUTTON_PORT[Button] == GPIOA)
10044804:	1dfb      	adds	r3, r7, #7
10044806:	781a      	ldrb	r2, [r3, #0]
10044808:	4b12      	ldr	r3, [pc, #72]	@ (10044854 <BSP_PB_Init+0x124>)
1004480a:	0092      	lsls	r2, r2, #2
1004480c:	58d2      	ldr	r2, [r2, r3]
1004480e:	2390      	movs	r3, #144	@ 0x90
10044810:	05db      	lsls	r3, r3, #23
10044812:	429a      	cmp	r2, r3
10044814:	d107      	bne.n	10044826 <BSP_PB_Init+0xf6>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10044816:	2308      	movs	r3, #8
10044818:	18fb      	adds	r3, r7, r3
1004481a:	681b      	ldr	r3, [r3, #0]
1004481c:	4a0f      	ldr	r2, [pc, #60]	@ (1004485c <BSP_PB_Init+0x12c>)
1004481e:	0019      	movs	r1, r3
10044820:	0010      	movs	r0, r2
10044822:	f7ff feaf 	bl	10044584 <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
10044826:	1dfb      	adds	r3, r7, #7
10044828:	781a      	ldrb	r2, [r3, #0]
1004482a:	4b0a      	ldr	r3, [pc, #40]	@ (10044854 <BSP_PB_Init+0x124>)
1004482c:	0092      	lsls	r2, r2, #2
1004482e:	58d3      	ldr	r3, [r2, r3]
10044830:	4a0b      	ldr	r2, [pc, #44]	@ (10044860 <BSP_PB_Init+0x130>)
10044832:	4293      	cmp	r3, r2
10044834:	d107      	bne.n	10044846 <BSP_PB_Init+0x116>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10044836:	2308      	movs	r3, #8
10044838:	18fb      	adds	r3, r7, r3
1004483a:	681b      	ldr	r3, [r3, #0]
1004483c:	4a09      	ldr	r2, [pc, #36]	@ (10044864 <BSP_PB_Init+0x134>)
1004483e:	0019      	movs	r1, r3
10044840:	0010      	movs	r0, r2
10044842:	f7ff fe9f 	bl	10044584 <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
10044846:	69fb      	ldr	r3, [r7, #28]
}
10044848:	0018      	movs	r0, r3
1004484a:	46bd      	mov	sp, r7
1004484c:	b008      	add	sp, #32
1004484e:	bd80      	pop	{r7, pc}
10044850:	2000110c 	.word	0x2000110c
10044854:	20001114 	.word	0x20001114
10044858:	20001120 	.word	0x20001120
1004485c:	48500020 	.word	0x48500020
10044860:	48100000 	.word	0x48100000
10044864:	48500028 	.word	0x48500028

10044868 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10044868:	b580      	push	{r7, lr}
1004486a:	b082      	sub	sp, #8
1004486c:	af00      	add	r7, sp, #0
1004486e:	6078      	str	r0, [r7, #4]
10044870:	000a      	movs	r2, r1
10044872:	1cbb      	adds	r3, r7, #2
10044874:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
10044876:	1cbb      	adds	r3, r7, #2
10044878:	881a      	ldrh	r2, [r3, #0]
1004487a:	687b      	ldr	r3, [r7, #4]
1004487c:	0011      	movs	r1, r2
1004487e:	0018      	movs	r0, r3
10044880:	f000 fd4e 	bl	10045320 <HAL_GPIO_EXTI_IRQHandler>
}
10044884:	46c0      	nop			@ (mov r8, r8)
10044886:	46bd      	mov	sp, r7
10044888:	b002      	add	sp, #8
1004488a:	bd80      	pop	{r7, pc}

1004488c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1004488c:	b580      	push	{r7, lr}
1004488e:	b082      	sub	sp, #8
10044890:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10044892:	1dfb      	adds	r3, r7, #7
10044894:	2200      	movs	r2, #0
10044896:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10044898:	2003      	movs	r0, #3
1004489a:	f000 f80f 	bl	100448bc <HAL_InitTick>
1004489e:	1e03      	subs	r3, r0, #0
100448a0:	d003      	beq.n	100448aa <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100448a2:	1dfb      	adds	r3, r7, #7
100448a4:	2201      	movs	r2, #1
100448a6:	701a      	strb	r2, [r3, #0]
100448a8:	e001      	b.n	100448ae <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100448aa:	f7ff fa49 	bl	10043d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
100448ae:	1dfb      	adds	r3, r7, #7
100448b0:	781b      	ldrb	r3, [r3, #0]
}
100448b2:	0018      	movs	r0, r3
100448b4:	46bd      	mov	sp, r7
100448b6:	b002      	add	sp, #8
100448b8:	bd80      	pop	{r7, pc}
	...

100448bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100448bc:	b590      	push	{r4, r7, lr}
100448be:	b085      	sub	sp, #20
100448c0:	af00      	add	r7, sp, #0
100448c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100448c4:	230f      	movs	r3, #15
100448c6:	18fb      	adds	r3, r7, r3
100448c8:	2200      	movs	r2, #0
100448ca:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100448cc:	4b1d      	ldr	r3, [pc, #116]	@ (10044944 <HAL_InitTick+0x88>)
100448ce:	781b      	ldrb	r3, [r3, #0]
100448d0:	2b00      	cmp	r3, #0
100448d2:	d02c      	beq.n	1004492e <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100448d4:	f005 fac0 	bl	10049e58 <HAL_RCC_GetSysClockFreq>
100448d8:	0004      	movs	r4, r0
100448da:	4b1a      	ldr	r3, [pc, #104]	@ (10044944 <HAL_InitTick+0x88>)
100448dc:	781b      	ldrb	r3, [r3, #0]
100448de:	0019      	movs	r1, r3
100448e0:	23fa      	movs	r3, #250	@ 0xfa
100448e2:	0098      	lsls	r0, r3, #2
100448e4:	f7fb fcac 	bl	10040240 <__udivsi3>
100448e8:	0003      	movs	r3, r0
100448ea:	0019      	movs	r1, r3
100448ec:	0020      	movs	r0, r4
100448ee:	f7fb fca7 	bl	10040240 <__udivsi3>
100448f2:	0003      	movs	r3, r0
100448f4:	0018      	movs	r0, r3
100448f6:	f000 f920 	bl	10044b3a <HAL_SYSTICK_Config>
100448fa:	1e03      	subs	r3, r0, #0
100448fc:	d112      	bne.n	10044924 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100448fe:	687b      	ldr	r3, [r7, #4]
10044900:	2b03      	cmp	r3, #3
10044902:	d80a      	bhi.n	1004491a <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10044904:	6879      	ldr	r1, [r7, #4]
10044906:	2301      	movs	r3, #1
10044908:	425b      	negs	r3, r3
1004490a:	2200      	movs	r2, #0
1004490c:	0018      	movs	r0, r3
1004490e:	f000 f8ef 	bl	10044af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10044912:	4b0d      	ldr	r3, [pc, #52]	@ (10044948 <HAL_InitTick+0x8c>)
10044914:	687a      	ldr	r2, [r7, #4]
10044916:	601a      	str	r2, [r3, #0]
10044918:	e00d      	b.n	10044936 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004491a:	230f      	movs	r3, #15
1004491c:	18fb      	adds	r3, r7, r3
1004491e:	2201      	movs	r2, #1
10044920:	701a      	strb	r2, [r3, #0]
10044922:	e008      	b.n	10044936 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10044924:	230f      	movs	r3, #15
10044926:	18fb      	adds	r3, r7, r3
10044928:	2201      	movs	r2, #1
1004492a:	701a      	strb	r2, [r3, #0]
1004492c:	e003      	b.n	10044936 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004492e:	230f      	movs	r3, #15
10044930:	18fb      	adds	r3, r7, r3
10044932:	2201      	movs	r2, #1
10044934:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10044936:	230f      	movs	r3, #15
10044938:	18fb      	adds	r3, r7, r3
1004493a:	781b      	ldrb	r3, [r3, #0]
}
1004493c:	0018      	movs	r0, r3
1004493e:	46bd      	mov	sp, r7
10044940:	b005      	add	sp, #20
10044942:	bd90      	pop	{r4, r7, pc}
10044944:	20001128 	.word	0x20001128
10044948:	20001124 	.word	0x20001124

1004494c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004494c:	b580      	push	{r7, lr}
1004494e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10044950:	4b05      	ldr	r3, [pc, #20]	@ (10044968 <HAL_IncTick+0x1c>)
10044952:	781b      	ldrb	r3, [r3, #0]
10044954:	001a      	movs	r2, r3
10044956:	4b05      	ldr	r3, [pc, #20]	@ (1004496c <HAL_IncTick+0x20>)
10044958:	681b      	ldr	r3, [r3, #0]
1004495a:	18d2      	adds	r2, r2, r3
1004495c:	4b03      	ldr	r3, [pc, #12]	@ (1004496c <HAL_IncTick+0x20>)
1004495e:	601a      	str	r2, [r3, #0]
}
10044960:	46c0      	nop			@ (mov r8, r8)
10044962:	46bd      	mov	sp, r7
10044964:	bd80      	pop	{r7, pc}
10044966:	46c0      	nop			@ (mov r8, r8)
10044968:	20001128 	.word	0x20001128
1004496c:	20000c6c 	.word	0x20000c6c

10044970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10044970:	b580      	push	{r7, lr}
10044972:	af00      	add	r7, sp, #0
  return uwTick;
10044974:	4b02      	ldr	r3, [pc, #8]	@ (10044980 <HAL_GetTick+0x10>)
10044976:	681b      	ldr	r3, [r3, #0]
}
10044978:	0018      	movs	r0, r3
1004497a:	46bd      	mov	sp, r7
1004497c:	bd80      	pop	{r7, pc}
1004497e:	46c0      	nop			@ (mov r8, r8)
10044980:	20000c6c 	.word	0x20000c6c

10044984 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10044984:	b580      	push	{r7, lr}
10044986:	af00      	add	r7, sp, #0
  return uwTickPrio;
10044988:	4b02      	ldr	r3, [pc, #8]	@ (10044994 <HAL_GetTickPrio+0x10>)
1004498a:	681b      	ldr	r3, [r3, #0]
}
1004498c:	0018      	movs	r0, r3
1004498e:	46bd      	mov	sp, r7
10044990:	bd80      	pop	{r7, pc}
10044992:	46c0      	nop			@ (mov r8, r8)
10044994:	20001124 	.word	0x20001124

10044998 <__NVIC_EnableIRQ>:
{
10044998:	b580      	push	{r7, lr}
1004499a:	b082      	sub	sp, #8
1004499c:	af00      	add	r7, sp, #0
1004499e:	0002      	movs	r2, r0
100449a0:	1dfb      	adds	r3, r7, #7
100449a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100449a4:	1dfb      	adds	r3, r7, #7
100449a6:	781b      	ldrb	r3, [r3, #0]
100449a8:	2b7f      	cmp	r3, #127	@ 0x7f
100449aa:	d809      	bhi.n	100449c0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100449ac:	1dfb      	adds	r3, r7, #7
100449ae:	781b      	ldrb	r3, [r3, #0]
100449b0:	001a      	movs	r2, r3
100449b2:	231f      	movs	r3, #31
100449b4:	401a      	ands	r2, r3
100449b6:	4b04      	ldr	r3, [pc, #16]	@ (100449c8 <__NVIC_EnableIRQ+0x30>)
100449b8:	2101      	movs	r1, #1
100449ba:	4091      	lsls	r1, r2
100449bc:	000a      	movs	r2, r1
100449be:	601a      	str	r2, [r3, #0]
}
100449c0:	46c0      	nop			@ (mov r8, r8)
100449c2:	46bd      	mov	sp, r7
100449c4:	b002      	add	sp, #8
100449c6:	bd80      	pop	{r7, pc}
100449c8:	e000e100 	.word	0xe000e100

100449cc <__NVIC_SetPriority>:
{
100449cc:	b590      	push	{r4, r7, lr}
100449ce:	b083      	sub	sp, #12
100449d0:	af00      	add	r7, sp, #0
100449d2:	0002      	movs	r2, r0
100449d4:	6039      	str	r1, [r7, #0]
100449d6:	1dfb      	adds	r3, r7, #7
100449d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100449da:	1dfb      	adds	r3, r7, #7
100449dc:	781b      	ldrb	r3, [r3, #0]
100449de:	2b7f      	cmp	r3, #127	@ 0x7f
100449e0:	d828      	bhi.n	10044a34 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100449e2:	4a2f      	ldr	r2, [pc, #188]	@ (10044aa0 <__NVIC_SetPriority+0xd4>)
100449e4:	1dfb      	adds	r3, r7, #7
100449e6:	781b      	ldrb	r3, [r3, #0]
100449e8:	b25b      	sxtb	r3, r3
100449ea:	089b      	lsrs	r3, r3, #2
100449ec:	33c0      	adds	r3, #192	@ 0xc0
100449ee:	009b      	lsls	r3, r3, #2
100449f0:	589b      	ldr	r3, [r3, r2]
100449f2:	1dfa      	adds	r2, r7, #7
100449f4:	7812      	ldrb	r2, [r2, #0]
100449f6:	0011      	movs	r1, r2
100449f8:	2203      	movs	r2, #3
100449fa:	400a      	ands	r2, r1
100449fc:	00d2      	lsls	r2, r2, #3
100449fe:	21ff      	movs	r1, #255	@ 0xff
10044a00:	4091      	lsls	r1, r2
10044a02:	000a      	movs	r2, r1
10044a04:	43d2      	mvns	r2, r2
10044a06:	401a      	ands	r2, r3
10044a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044a0a:	683b      	ldr	r3, [r7, #0]
10044a0c:	019b      	lsls	r3, r3, #6
10044a0e:	22ff      	movs	r2, #255	@ 0xff
10044a10:	401a      	ands	r2, r3
10044a12:	1dfb      	adds	r3, r7, #7
10044a14:	781b      	ldrb	r3, [r3, #0]
10044a16:	0018      	movs	r0, r3
10044a18:	2303      	movs	r3, #3
10044a1a:	4003      	ands	r3, r0
10044a1c:	00db      	lsls	r3, r3, #3
10044a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044a20:	481f      	ldr	r0, [pc, #124]	@ (10044aa0 <__NVIC_SetPriority+0xd4>)
10044a22:	1dfb      	adds	r3, r7, #7
10044a24:	781b      	ldrb	r3, [r3, #0]
10044a26:	b25b      	sxtb	r3, r3
10044a28:	089b      	lsrs	r3, r3, #2
10044a2a:	430a      	orrs	r2, r1
10044a2c:	33c0      	adds	r3, #192	@ 0xc0
10044a2e:	009b      	lsls	r3, r3, #2
10044a30:	501a      	str	r2, [r3, r0]
}
10044a32:	e031      	b.n	10044a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044a34:	4a1b      	ldr	r2, [pc, #108]	@ (10044aa4 <__NVIC_SetPriority+0xd8>)
10044a36:	1dfb      	adds	r3, r7, #7
10044a38:	781b      	ldrb	r3, [r3, #0]
10044a3a:	0019      	movs	r1, r3
10044a3c:	230f      	movs	r3, #15
10044a3e:	400b      	ands	r3, r1
10044a40:	3b08      	subs	r3, #8
10044a42:	089b      	lsrs	r3, r3, #2
10044a44:	3306      	adds	r3, #6
10044a46:	009b      	lsls	r3, r3, #2
10044a48:	18d3      	adds	r3, r2, r3
10044a4a:	3304      	adds	r3, #4
10044a4c:	681b      	ldr	r3, [r3, #0]
10044a4e:	1dfa      	adds	r2, r7, #7
10044a50:	7812      	ldrb	r2, [r2, #0]
10044a52:	0011      	movs	r1, r2
10044a54:	2203      	movs	r2, #3
10044a56:	400a      	ands	r2, r1
10044a58:	00d2      	lsls	r2, r2, #3
10044a5a:	21ff      	movs	r1, #255	@ 0xff
10044a5c:	4091      	lsls	r1, r2
10044a5e:	000a      	movs	r2, r1
10044a60:	43d2      	mvns	r2, r2
10044a62:	401a      	ands	r2, r3
10044a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044a66:	683b      	ldr	r3, [r7, #0]
10044a68:	019b      	lsls	r3, r3, #6
10044a6a:	22ff      	movs	r2, #255	@ 0xff
10044a6c:	401a      	ands	r2, r3
10044a6e:	1dfb      	adds	r3, r7, #7
10044a70:	781b      	ldrb	r3, [r3, #0]
10044a72:	0018      	movs	r0, r3
10044a74:	2303      	movs	r3, #3
10044a76:	4003      	ands	r3, r0
10044a78:	00db      	lsls	r3, r3, #3
10044a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044a7c:	4809      	ldr	r0, [pc, #36]	@ (10044aa4 <__NVIC_SetPriority+0xd8>)
10044a7e:	1dfb      	adds	r3, r7, #7
10044a80:	781b      	ldrb	r3, [r3, #0]
10044a82:	001c      	movs	r4, r3
10044a84:	230f      	movs	r3, #15
10044a86:	4023      	ands	r3, r4
10044a88:	3b08      	subs	r3, #8
10044a8a:	089b      	lsrs	r3, r3, #2
10044a8c:	430a      	orrs	r2, r1
10044a8e:	3306      	adds	r3, #6
10044a90:	009b      	lsls	r3, r3, #2
10044a92:	18c3      	adds	r3, r0, r3
10044a94:	3304      	adds	r3, #4
10044a96:	601a      	str	r2, [r3, #0]
}
10044a98:	46c0      	nop			@ (mov r8, r8)
10044a9a:	46bd      	mov	sp, r7
10044a9c:	b003      	add	sp, #12
10044a9e:	bd90      	pop	{r4, r7, pc}
10044aa0:	e000e100 	.word	0xe000e100
10044aa4:	e000ed00 	.word	0xe000ed00

10044aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10044aa8:	b580      	push	{r7, lr}
10044aaa:	b082      	sub	sp, #8
10044aac:	af00      	add	r7, sp, #0
10044aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10044ab0:	687b      	ldr	r3, [r7, #4]
10044ab2:	1e5a      	subs	r2, r3, #1
10044ab4:	2380      	movs	r3, #128	@ 0x80
10044ab6:	045b      	lsls	r3, r3, #17
10044ab8:	429a      	cmp	r2, r3
10044aba:	d301      	bcc.n	10044ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10044abc:	2301      	movs	r3, #1
10044abe:	e010      	b.n	10044ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10044ac0:	4b0a      	ldr	r3, [pc, #40]	@ (10044aec <SysTick_Config+0x44>)
10044ac2:	687a      	ldr	r2, [r7, #4]
10044ac4:	3a01      	subs	r2, #1
10044ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044ac8:	2301      	movs	r3, #1
10044aca:	425b      	negs	r3, r3
10044acc:	2103      	movs	r1, #3
10044ace:	0018      	movs	r0, r3
10044ad0:	f7ff ff7c 	bl	100449cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10044ad4:	4b05      	ldr	r3, [pc, #20]	@ (10044aec <SysTick_Config+0x44>)
10044ad6:	2200      	movs	r2, #0
10044ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10044ada:	4b04      	ldr	r3, [pc, #16]	@ (10044aec <SysTick_Config+0x44>)
10044adc:	2207      	movs	r2, #7
10044ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10044ae0:	2300      	movs	r3, #0
}
10044ae2:	0018      	movs	r0, r3
10044ae4:	46bd      	mov	sp, r7
10044ae6:	b002      	add	sp, #8
10044ae8:	bd80      	pop	{r7, pc}
10044aea:	46c0      	nop			@ (mov r8, r8)
10044aec:	e000e010 	.word	0xe000e010

10044af0 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10044af0:	b580      	push	{r7, lr}
10044af2:	b084      	sub	sp, #16
10044af4:	af00      	add	r7, sp, #0
10044af6:	60b9      	str	r1, [r7, #8]
10044af8:	607a      	str	r2, [r7, #4]
10044afa:	210f      	movs	r1, #15
10044afc:	187b      	adds	r3, r7, r1
10044afe:	1c02      	adds	r2, r0, #0
10044b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10044b02:	68ba      	ldr	r2, [r7, #8]
10044b04:	187b      	adds	r3, r7, r1
10044b06:	781b      	ldrb	r3, [r3, #0]
10044b08:	b25b      	sxtb	r3, r3
10044b0a:	0011      	movs	r1, r2
10044b0c:	0018      	movs	r0, r3
10044b0e:	f7ff ff5d 	bl	100449cc <__NVIC_SetPriority>
}
10044b12:	46c0      	nop			@ (mov r8, r8)
10044b14:	46bd      	mov	sp, r7
10044b16:	b004      	add	sp, #16
10044b18:	bd80      	pop	{r7, pc}

10044b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10044b1a:	b580      	push	{r7, lr}
10044b1c:	b082      	sub	sp, #8
10044b1e:	af00      	add	r7, sp, #0
10044b20:	0002      	movs	r2, r0
10044b22:	1dfb      	adds	r3, r7, #7
10044b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10044b26:	1dfb      	adds	r3, r7, #7
10044b28:	781b      	ldrb	r3, [r3, #0]
10044b2a:	b25b      	sxtb	r3, r3
10044b2c:	0018      	movs	r0, r3
10044b2e:	f7ff ff33 	bl	10044998 <__NVIC_EnableIRQ>
}
10044b32:	46c0      	nop			@ (mov r8, r8)
10044b34:	46bd      	mov	sp, r7
10044b36:	b002      	add	sp, #8
10044b38:	bd80      	pop	{r7, pc}

10044b3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10044b3a:	b580      	push	{r7, lr}
10044b3c:	b082      	sub	sp, #8
10044b3e:	af00      	add	r7, sp, #0
10044b40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10044b42:	687b      	ldr	r3, [r7, #4]
10044b44:	0018      	movs	r0, r3
10044b46:	f7ff ffaf 	bl	10044aa8 <SysTick_Config>
10044b4a:	0003      	movs	r3, r0
}
10044b4c:	0018      	movs	r0, r3
10044b4e:	46bd      	mov	sp, r7
10044b50:	b002      	add	sp, #8
10044b52:	bd80      	pop	{r7, pc}

10044b54 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
10044b54:	b580      	push	{r7, lr}
10044b56:	b082      	sub	sp, #8
10044b58:	af00      	add	r7, sp, #0
10044b5a:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
10044b5c:	687b      	ldr	r3, [r7, #4]
10044b5e:	2b00      	cmp	r3, #0
10044b60:	d101      	bne.n	10044b66 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
10044b62:	2301      	movs	r3, #1
10044b64:	e031      	b.n	10044bca <HAL_DMA_Abort+0x76>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
10044b66:	687b      	ldr	r3, [r7, #4]
10044b68:	2225      	movs	r2, #37	@ 0x25
10044b6a:	5c9b      	ldrb	r3, [r3, r2]
10044b6c:	b2db      	uxtb	r3, r3
10044b6e:	2b02      	cmp	r3, #2
10044b70:	d008      	beq.n	10044b84 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10044b72:	687b      	ldr	r3, [r7, #4]
10044b74:	2204      	movs	r2, #4
10044b76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10044b78:	687b      	ldr	r3, [r7, #4]
10044b7a:	2224      	movs	r2, #36	@ 0x24
10044b7c:	2100      	movs	r1, #0
10044b7e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
10044b80:	2301      	movs	r3, #1
10044b82:	e022      	b.n	10044bca <HAL_DMA_Abort+0x76>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10044b84:	687b      	ldr	r3, [r7, #4]
10044b86:	681b      	ldr	r3, [r3, #0]
10044b88:	681a      	ldr	r2, [r3, #0]
10044b8a:	687b      	ldr	r3, [r7, #4]
10044b8c:	681b      	ldr	r3, [r3, #0]
10044b8e:	210e      	movs	r1, #14
10044b90:	438a      	bics	r2, r1
10044b92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10044b94:	687b      	ldr	r3, [r7, #4]
10044b96:	681b      	ldr	r3, [r3, #0]
10044b98:	681a      	ldr	r2, [r3, #0]
10044b9a:	687b      	ldr	r3, [r7, #4]
10044b9c:	681b      	ldr	r3, [r3, #0]
10044b9e:	2101      	movs	r1, #1
10044ba0:	438a      	bics	r2, r1
10044ba2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10044ba4:	687b      	ldr	r3, [r7, #4]
10044ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044ba8:	223c      	movs	r2, #60	@ 0x3c
10044baa:	401a      	ands	r2, r3
10044bac:	687b      	ldr	r3, [r7, #4]
10044bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10044bb0:	2101      	movs	r1, #1
10044bb2:	4091      	lsls	r1, r2
10044bb4:	000a      	movs	r2, r1
10044bb6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10044bb8:	687b      	ldr	r3, [r7, #4]
10044bba:	2225      	movs	r2, #37	@ 0x25
10044bbc:	2101      	movs	r1, #1
10044bbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10044bc0:	687b      	ldr	r3, [r7, #4]
10044bc2:	2224      	movs	r2, #36	@ 0x24
10044bc4:	2100      	movs	r1, #0
10044bc6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
10044bc8:	2300      	movs	r3, #0
}
10044bca:	0018      	movs	r0, r3
10044bcc:	46bd      	mov	sp, r7
10044bce:	b002      	add	sp, #8
10044bd0:	bd80      	pop	{r7, pc}

10044bd2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
10044bd2:	b580      	push	{r7, lr}
10044bd4:	b084      	sub	sp, #16
10044bd6:	af00      	add	r7, sp, #0
10044bd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10044bda:	210f      	movs	r1, #15
10044bdc:	187b      	adds	r3, r7, r1
10044bde:	2200      	movs	r2, #0
10044be0:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
10044be2:	687b      	ldr	r3, [r7, #4]
10044be4:	2225      	movs	r2, #37	@ 0x25
10044be6:	5c9b      	ldrb	r3, [r3, r2]
10044be8:	b2db      	uxtb	r3, r3
10044bea:	2b02      	cmp	r3, #2
10044bec:	d006      	beq.n	10044bfc <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10044bee:	687b      	ldr	r3, [r7, #4]
10044bf0:	2204      	movs	r2, #4
10044bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
10044bf4:	187b      	adds	r3, r7, r1
10044bf6:	2201      	movs	r2, #1
10044bf8:	701a      	strb	r2, [r3, #0]
10044bfa:	e02a      	b.n	10044c52 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10044bfc:	687b      	ldr	r3, [r7, #4]
10044bfe:	681b      	ldr	r3, [r3, #0]
10044c00:	681a      	ldr	r2, [r3, #0]
10044c02:	687b      	ldr	r3, [r7, #4]
10044c04:	681b      	ldr	r3, [r3, #0]
10044c06:	210e      	movs	r1, #14
10044c08:	438a      	bics	r2, r1
10044c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10044c0c:	687b      	ldr	r3, [r7, #4]
10044c0e:	681b      	ldr	r3, [r3, #0]
10044c10:	681a      	ldr	r2, [r3, #0]
10044c12:	687b      	ldr	r3, [r7, #4]
10044c14:	681b      	ldr	r3, [r3, #0]
10044c16:	2101      	movs	r1, #1
10044c18:	438a      	bics	r2, r1
10044c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10044c1c:	687b      	ldr	r3, [r7, #4]
10044c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044c20:	223c      	movs	r2, #60	@ 0x3c
10044c22:	401a      	ands	r2, r3
10044c24:	687b      	ldr	r3, [r7, #4]
10044c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10044c28:	2101      	movs	r1, #1
10044c2a:	4091      	lsls	r1, r2
10044c2c:	000a      	movs	r2, r1
10044c2e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10044c30:	687b      	ldr	r3, [r7, #4]
10044c32:	2225      	movs	r2, #37	@ 0x25
10044c34:	2101      	movs	r1, #1
10044c36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10044c38:	687b      	ldr	r3, [r7, #4]
10044c3a:	2224      	movs	r2, #36	@ 0x24
10044c3c:	2100      	movs	r1, #0
10044c3e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
10044c40:	687b      	ldr	r3, [r7, #4]
10044c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10044c44:	2b00      	cmp	r3, #0
10044c46:	d004      	beq.n	10044c52 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
10044c48:	687b      	ldr	r3, [r7, #4]
10044c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10044c4c:	687a      	ldr	r2, [r7, #4]
10044c4e:	0010      	movs	r0, r2
10044c50:	4798      	blx	r3
    }
  }
  return status;
10044c52:	230f      	movs	r3, #15
10044c54:	18fb      	adds	r3, r7, r3
10044c56:	781b      	ldrb	r3, [r3, #0]
}
10044c58:	0018      	movs	r0, r3
10044c5a:	46bd      	mov	sp, r7
10044c5c:	b004      	add	sp, #16
10044c5e:	bd80      	pop	{r7, pc}

10044c60 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
10044c60:	b580      	push	{r7, lr}
10044c62:	b082      	sub	sp, #8
10044c64:	af00      	add	r7, sp, #0
10044c66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
10044c68:	687b      	ldr	r3, [r7, #4]
10044c6a:	2225      	movs	r2, #37	@ 0x25
10044c6c:	5c9b      	ldrb	r3, [r3, r2]
10044c6e:	b2db      	uxtb	r3, r3
}
10044c70:	0018      	movs	r0, r3
10044c72:	46bd      	mov	sp, r7
10044c74:	b002      	add	sp, #8
10044c76:	bd80      	pop	{r7, pc}

10044c78 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10044c78:	b5b0      	push	{r4, r5, r7, lr}
10044c7a:	b086      	sub	sp, #24
10044c7c:	af00      	add	r7, sp, #0
10044c7e:	60f8      	str	r0, [r7, #12]
10044c80:	60b9      	str	r1, [r7, #8]
10044c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10044c84:	4b1d      	ldr	r3, [pc, #116]	@ (10044cfc <HAL_FLASH_Program+0x84>)
10044c86:	781b      	ldrb	r3, [r3, #0]
10044c88:	2b01      	cmp	r3, #1
10044c8a:	d101      	bne.n	10044c90 <HAL_FLASH_Program+0x18>
10044c8c:	2302      	movs	r3, #2
10044c8e:	e031      	b.n	10044cf4 <HAL_FLASH_Program+0x7c>
10044c90:	4b1a      	ldr	r3, [pc, #104]	@ (10044cfc <HAL_FLASH_Program+0x84>)
10044c92:	2201      	movs	r2, #1
10044c94:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10044c96:	4b19      	ldr	r3, [pc, #100]	@ (10044cfc <HAL_FLASH_Program+0x84>)
10044c98:	2200      	movs	r2, #0
10044c9a:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10044c9c:	2517      	movs	r5, #23
10044c9e:	197c      	adds	r4, r7, r5
10044ca0:	23fa      	movs	r3, #250	@ 0xfa
10044ca2:	009b      	lsls	r3, r3, #2
10044ca4:	0018      	movs	r0, r3
10044ca6:	f000 f82b 	bl	10044d00 <FLASH_WaitForLastOperation>
10044caa:	0003      	movs	r3, r0
10044cac:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10044cae:	197b      	adds	r3, r7, r5
10044cb0:	781b      	ldrb	r3, [r3, #0]
10044cb2:	2b00      	cmp	r3, #0
10044cb4:	d118      	bne.n	10044ce8 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10044cb6:	68fb      	ldr	r3, [r7, #12]
10044cb8:	2b00      	cmp	r3, #0
10044cba:	d106      	bne.n	10044cca <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10044cbc:	687a      	ldr	r2, [r7, #4]
10044cbe:	68bb      	ldr	r3, [r7, #8]
10044cc0:	0011      	movs	r1, r2
10044cc2:	0018      	movs	r0, r3
10044cc4:	f000 f856 	bl	10044d74 <FLASH_Program_Word>
10044cc8:	e005      	b.n	10044cd6 <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10044cca:	687a      	ldr	r2, [r7, #4]
10044ccc:	68bb      	ldr	r3, [r7, #8]
10044cce:	0011      	movs	r1, r2
10044cd0:	0018      	movs	r0, r3
10044cd2:	f000 f871 	bl	10044db8 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10044cd6:	2317      	movs	r3, #23
10044cd8:	18fc      	adds	r4, r7, r3
10044cda:	23fa      	movs	r3, #250	@ 0xfa
10044cdc:	009b      	lsls	r3, r3, #2
10044cde:	0018      	movs	r0, r3
10044ce0:	f000 f80e 	bl	10044d00 <FLASH_WaitForLastOperation>
10044ce4:	0003      	movs	r3, r0
10044ce6:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10044ce8:	4b04      	ldr	r3, [pc, #16]	@ (10044cfc <HAL_FLASH_Program+0x84>)
10044cea:	2200      	movs	r2, #0
10044cec:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10044cee:	2317      	movs	r3, #23
10044cf0:	18fb      	adds	r3, r7, r3
10044cf2:	781b      	ldrb	r3, [r3, #0]
}
10044cf4:	0018      	movs	r0, r3
10044cf6:	46bd      	mov	sp, r7
10044cf8:	b006      	add	sp, #24
10044cfa:	bdb0      	pop	{r4, r5, r7, pc}
10044cfc:	20000c70 	.word	0x20000c70

10044d00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10044d00:	b580      	push	{r7, lr}
10044d02:	b084      	sub	sp, #16
10044d04:	af00      	add	r7, sp, #0
10044d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10044d08:	f7ff fe32 	bl	10044970 <HAL_GetTick>
10044d0c:	0003      	movs	r3, r0
10044d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10044d10:	e00c      	b.n	10044d2c <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
10044d12:	687b      	ldr	r3, [r7, #4]
10044d14:	3301      	adds	r3, #1
10044d16:	d009      	beq.n	10044d2c <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
10044d18:	f7ff fe2a 	bl	10044970 <HAL_GetTick>
10044d1c:	0002      	movs	r2, r0
10044d1e:	68fb      	ldr	r3, [r7, #12]
10044d20:	1ad3      	subs	r3, r2, r3
10044d22:	687a      	ldr	r2, [r7, #4]
10044d24:	429a      	cmp	r2, r3
10044d26:	d801      	bhi.n	10044d2c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10044d28:	2303      	movs	r3, #3
10044d2a:	e01b      	b.n	10044d64 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10044d2c:	4b0f      	ldr	r3, [pc, #60]	@ (10044d6c <FLASH_WaitForLastOperation+0x6c>)
10044d2e:	691b      	ldr	r3, [r3, #16]
10044d30:	2201      	movs	r2, #1
10044d32:	4013      	ands	r3, r2
10044d34:	2b01      	cmp	r3, #1
10044d36:	d1ec      	bne.n	10044d12 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10044d38:	4b0c      	ldr	r3, [pc, #48]	@ (10044d6c <FLASH_WaitForLastOperation+0x6c>)
10044d3a:	691b      	ldr	r3, [r3, #16]
10044d3c:	220c      	movs	r2, #12
10044d3e:	4013      	ands	r3, r2
10044d40:	2b0c      	cmp	r3, #12
10044d42:	d10e      	bne.n	10044d62 <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
10044d44:	4b09      	ldr	r3, [pc, #36]	@ (10044d6c <FLASH_WaitForLastOperation+0x6c>)
10044d46:	689a      	ldr	r2, [r3, #8]
10044d48:	4b09      	ldr	r3, [pc, #36]	@ (10044d70 <FLASH_WaitForLastOperation+0x70>)
10044d4a:	685b      	ldr	r3, [r3, #4]
10044d4c:	431a      	orrs	r2, r3
10044d4e:	4b08      	ldr	r3, [pc, #32]	@ (10044d70 <FLASH_WaitForLastOperation+0x70>)
10044d50:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10044d52:	4b06      	ldr	r3, [pc, #24]	@ (10044d6c <FLASH_WaitForLastOperation+0x6c>)
10044d54:	691a      	ldr	r2, [r3, #16]
10044d56:	4b05      	ldr	r3, [pc, #20]	@ (10044d6c <FLASH_WaitForLastOperation+0x6c>)
10044d58:	210c      	movs	r1, #12
10044d5a:	430a      	orrs	r2, r1
10044d5c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
10044d5e:	2301      	movs	r3, #1
10044d60:	e000      	b.n	10044d64 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
10044d62:	2300      	movs	r3, #0
}
10044d64:	0018      	movs	r0, r3
10044d66:	46bd      	mov	sp, r7
10044d68:	b004      	add	sp, #16
10044d6a:	bd80      	pop	{r7, pc}
10044d6c:	40001000 	.word	0x40001000
10044d70:	20000c70 	.word	0x20000c70

10044d74 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10044d74:	b580      	push	{r7, lr}
10044d76:	b082      	sub	sp, #8
10044d78:	af00      	add	r7, sp, #0
10044d7a:	6078      	str	r0, [r7, #4]
10044d7c:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10044d7e:	4b0c      	ldr	r3, [pc, #48]	@ (10044db0 <FLASH_Program_Word+0x3c>)
10044d80:	691a      	ldr	r2, [r3, #16]
10044d82:	4b0b      	ldr	r3, [pc, #44]	@ (10044db0 <FLASH_Program_Word+0x3c>)
10044d84:	210f      	movs	r1, #15
10044d86:	430a      	orrs	r2, r1
10044d88:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10044d8a:	687b      	ldr	r3, [r7, #4]
10044d8c:	4a09      	ldr	r2, [pc, #36]	@ (10044db4 <FLASH_Program_Word+0x40>)
10044d8e:	4694      	mov	ip, r2
10044d90:	4463      	add	r3, ip
10044d92:	089a      	lsrs	r2, r3, #2
10044d94:	4b06      	ldr	r3, [pc, #24]	@ (10044db0 <FLASH_Program_Word+0x3c>)
10044d96:	0412      	lsls	r2, r2, #16
10044d98:	0c12      	lsrs	r2, r2, #16
10044d9a:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10044d9c:	4b04      	ldr	r3, [pc, #16]	@ (10044db0 <FLASH_Program_Word+0x3c>)
10044d9e:	683a      	ldr	r2, [r7, #0]
10044da0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10044da2:	4b03      	ldr	r3, [pc, #12]	@ (10044db0 <FLASH_Program_Word+0x3c>)
10044da4:	2233      	movs	r2, #51	@ 0x33
10044da6:	601a      	str	r2, [r3, #0]
}
10044da8:	46c0      	nop			@ (mov r8, r8)
10044daa:	46bd      	mov	sp, r7
10044dac:	b002      	add	sp, #8
10044dae:	bd80      	pop	{r7, pc}
10044db0:	40001000 	.word	0x40001000
10044db4:	effc0000 	.word	0xeffc0000

10044db8 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10044db8:	b580      	push	{r7, lr}
10044dba:	b084      	sub	sp, #16
10044dbc:	af00      	add	r7, sp, #0
10044dbe:	6078      	str	r0, [r7, #4]
10044dc0:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
10044dc2:	683b      	ldr	r3, [r7, #0]
10044dc4:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10044dc6:	4b17      	ldr	r3, [pc, #92]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044dc8:	691a      	ldr	r2, [r3, #16]
10044dca:	4b16      	ldr	r3, [pc, #88]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044dcc:	210f      	movs	r1, #15
10044dce:	430a      	orrs	r2, r1
10044dd0:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10044dd2:	687b      	ldr	r3, [r7, #4]
10044dd4:	4a14      	ldr	r2, [pc, #80]	@ (10044e28 <FLASH_Program_Burst+0x70>)
10044dd6:	4694      	mov	ip, r2
10044dd8:	4463      	add	r3, ip
10044dda:	089a      	lsrs	r2, r3, #2
10044ddc:	4b11      	ldr	r3, [pc, #68]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044dde:	0412      	lsls	r2, r2, #16
10044de0:	0c12      	lsrs	r2, r2, #16
10044de2:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10044de4:	4a0f      	ldr	r2, [pc, #60]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044de6:	68fb      	ldr	r3, [r7, #12]
10044de8:	681b      	ldr	r3, [r3, #0]
10044dea:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10044dec:	68fb      	ldr	r3, [r7, #12]
10044dee:	3304      	adds	r3, #4
10044df0:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
10044df2:	4a0c      	ldr	r2, [pc, #48]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044df4:	68fb      	ldr	r3, [r7, #12]
10044df6:	681b      	ldr	r3, [r3, #0]
10044df8:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
10044dfa:	68fb      	ldr	r3, [r7, #12]
10044dfc:	3304      	adds	r3, #4
10044dfe:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10044e00:	4a08      	ldr	r2, [pc, #32]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044e02:	68fb      	ldr	r3, [r7, #12]
10044e04:	681b      	ldr	r3, [r3, #0]
10044e06:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
10044e08:	68fb      	ldr	r3, [r7, #12]
10044e0a:	3304      	adds	r3, #4
10044e0c:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
10044e0e:	4a05      	ldr	r2, [pc, #20]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044e10:	68fb      	ldr	r3, [r7, #12]
10044e12:	681b      	ldr	r3, [r3, #0]
10044e14:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
10044e16:	4b03      	ldr	r3, [pc, #12]	@ (10044e24 <FLASH_Program_Burst+0x6c>)
10044e18:	22cc      	movs	r2, #204	@ 0xcc
10044e1a:	601a      	str	r2, [r3, #0]
}
10044e1c:	46c0      	nop			@ (mov r8, r8)
10044e1e:	46bd      	mov	sp, r7
10044e20:	b004      	add	sp, #16
10044e22:	bd80      	pop	{r7, pc}
10044e24:	40001000 	.word	0x40001000
10044e28:	effc0000 	.word	0xeffc0000

10044e2c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
10044e2c:	b5b0      	push	{r4, r5, r7, lr}
10044e2e:	b084      	sub	sp, #16
10044e30:	af00      	add	r7, sp, #0
10044e32:	6078      	str	r0, [r7, #4]
10044e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10044e36:	4b27      	ldr	r3, [pc, #156]	@ (10044ed4 <HAL_FLASHEx_Erase+0xa8>)
10044e38:	781b      	ldrb	r3, [r3, #0]
10044e3a:	2b01      	cmp	r3, #1
10044e3c:	d101      	bne.n	10044e42 <HAL_FLASHEx_Erase+0x16>
10044e3e:	2302      	movs	r3, #2
10044e40:	e043      	b.n	10044eca <HAL_FLASHEx_Erase+0x9e>
10044e42:	4b24      	ldr	r3, [pc, #144]	@ (10044ed4 <HAL_FLASHEx_Erase+0xa8>)
10044e44:	2201      	movs	r2, #1
10044e46:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10044e48:	4b22      	ldr	r3, [pc, #136]	@ (10044ed4 <HAL_FLASHEx_Erase+0xa8>)
10044e4a:	2200      	movs	r2, #0
10044e4c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
10044e4e:	687b      	ldr	r3, [r7, #4]
10044e50:	681b      	ldr	r3, [r3, #0]
10044e52:	2bff      	cmp	r3, #255	@ 0xff
10044e54:	d10b      	bne.n	10044e6e <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10044e56:	f000 f83f 	bl	10044ed8 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10044e5a:	230f      	movs	r3, #15
10044e5c:	18fc      	adds	r4, r7, r3
10044e5e:	23fa      	movs	r3, #250	@ 0xfa
10044e60:	009b      	lsls	r3, r3, #2
10044e62:	0018      	movs	r0, r3
10044e64:	f7ff ff4c 	bl	10044d00 <FLASH_WaitForLastOperation>
10044e68:	0003      	movs	r3, r0
10044e6a:	7023      	strb	r3, [r4, #0]
10044e6c:	e027      	b.n	10044ebe <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10044e6e:	683b      	ldr	r3, [r7, #0]
10044e70:	2201      	movs	r2, #1
10044e72:	4252      	negs	r2, r2
10044e74:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10044e76:	687b      	ldr	r3, [r7, #4]
10044e78:	685b      	ldr	r3, [r3, #4]
10044e7a:	60bb      	str	r3, [r7, #8]
10044e7c:	e017      	b.n	10044eae <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10044e7e:	68bb      	ldr	r3, [r7, #8]
10044e80:	0018      	movs	r0, r3
10044e82:	f000 f839 	bl	10044ef8 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10044e86:	250f      	movs	r5, #15
10044e88:	197c      	adds	r4, r7, r5
10044e8a:	23fa      	movs	r3, #250	@ 0xfa
10044e8c:	009b      	lsls	r3, r3, #2
10044e8e:	0018      	movs	r0, r3
10044e90:	f7ff ff36 	bl	10044d00 <FLASH_WaitForLastOperation>
10044e94:	0003      	movs	r3, r0
10044e96:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10044e98:	197b      	adds	r3, r7, r5
10044e9a:	781b      	ldrb	r3, [r3, #0]
10044e9c:	2b00      	cmp	r3, #0
10044e9e:	d003      	beq.n	10044ea8 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10044ea0:	683b      	ldr	r3, [r7, #0]
10044ea2:	68ba      	ldr	r2, [r7, #8]
10044ea4:	601a      	str	r2, [r3, #0]
        break;
10044ea6:	e00a      	b.n	10044ebe <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10044ea8:	68bb      	ldr	r3, [r7, #8]
10044eaa:	3301      	adds	r3, #1
10044eac:	60bb      	str	r3, [r7, #8]
10044eae:	687b      	ldr	r3, [r7, #4]
10044eb0:	685a      	ldr	r2, [r3, #4]
10044eb2:	687b      	ldr	r3, [r7, #4]
10044eb4:	689b      	ldr	r3, [r3, #8]
10044eb6:	18d3      	adds	r3, r2, r3
10044eb8:	68ba      	ldr	r2, [r7, #8]
10044eba:	429a      	cmp	r2, r3
10044ebc:	d3df      	bcc.n	10044e7e <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10044ebe:	4b05      	ldr	r3, [pc, #20]	@ (10044ed4 <HAL_FLASHEx_Erase+0xa8>)
10044ec0:	2200      	movs	r2, #0
10044ec2:	701a      	strb	r2, [r3, #0]

  return status;
10044ec4:	230f      	movs	r3, #15
10044ec6:	18fb      	adds	r3, r7, r3
10044ec8:	781b      	ldrb	r3, [r3, #0]
}
10044eca:	0018      	movs	r0, r3
10044ecc:	46bd      	mov	sp, r7
10044ece:	b004      	add	sp, #16
10044ed0:	bdb0      	pop	{r4, r5, r7, pc}
10044ed2:	46c0      	nop			@ (mov r8, r8)
10044ed4:	20000c70 	.word	0x20000c70

10044ed8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10044ed8:	b580      	push	{r7, lr}
10044eda:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10044edc:	4b05      	ldr	r3, [pc, #20]	@ (10044ef4 <FLASH_MassErase+0x1c>)
10044ede:	691a      	ldr	r2, [r3, #16]
10044ee0:	4b04      	ldr	r3, [pc, #16]	@ (10044ef4 <FLASH_MassErase+0x1c>)
10044ee2:	210f      	movs	r1, #15
10044ee4:	430a      	orrs	r2, r1
10044ee6:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10044ee8:	4b02      	ldr	r3, [pc, #8]	@ (10044ef4 <FLASH_MassErase+0x1c>)
10044eea:	2222      	movs	r2, #34	@ 0x22
10044eec:	601a      	str	r2, [r3, #0]
}
10044eee:	46c0      	nop			@ (mov r8, r8)
10044ef0:	46bd      	mov	sp, r7
10044ef2:	bd80      	pop	{r7, pc}
10044ef4:	40001000 	.word	0x40001000

10044ef8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
10044ef8:	b580      	push	{r7, lr}
10044efa:	b082      	sub	sp, #8
10044efc:	af00      	add	r7, sp, #0
10044efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10044f00:	4b09      	ldr	r3, [pc, #36]	@ (10044f28 <FLASH_PageErase+0x30>)
10044f02:	691a      	ldr	r2, [r3, #16]
10044f04:	4b08      	ldr	r3, [pc, #32]	@ (10044f28 <FLASH_PageErase+0x30>)
10044f06:	210f      	movs	r1, #15
10044f08:	430a      	orrs	r2, r1
10044f0a:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
10044f0c:	687b      	ldr	r3, [r7, #4]
10044f0e:	02db      	lsls	r3, r3, #11
10044f10:	089a      	lsrs	r2, r3, #2
10044f12:	4b05      	ldr	r3, [pc, #20]	@ (10044f28 <FLASH_PageErase+0x30>)
10044f14:	0412      	lsls	r2, r2, #16
10044f16:	0c12      	lsrs	r2, r2, #16
10044f18:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
10044f1a:	4b03      	ldr	r3, [pc, #12]	@ (10044f28 <FLASH_PageErase+0x30>)
10044f1c:	2211      	movs	r2, #17
10044f1e:	601a      	str	r2, [r3, #0]
}
10044f20:	46c0      	nop			@ (mov r8, r8)
10044f22:	46bd      	mov	sp, r7
10044f24:	b002      	add	sp, #8
10044f26:	bd80      	pop	{r7, pc}
10044f28:	40001000 	.word	0x40001000

10044f2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10044f2c:	b580      	push	{r7, lr}
10044f2e:	b086      	sub	sp, #24
10044f30:	af00      	add	r7, sp, #0
10044f32:	6078      	str	r0, [r7, #4]
10044f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10044f36:	2300      	movs	r3, #0
10044f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044f3a:	e190      	b.n	1004525e <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10044f3c:	683b      	ldr	r3, [r7, #0]
10044f3e:	681b      	ldr	r3, [r3, #0]
10044f40:	2101      	movs	r1, #1
10044f42:	697a      	ldr	r2, [r7, #20]
10044f44:	4091      	lsls	r1, r2
10044f46:	000a      	movs	r2, r1
10044f48:	4013      	ands	r3, r2
10044f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10044f4c:	68fb      	ldr	r3, [r7, #12]
10044f4e:	2b00      	cmp	r3, #0
10044f50:	d100      	bne.n	10044f54 <HAL_GPIO_Init+0x28>
10044f52:	e181      	b.n	10045258 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10044f54:	683b      	ldr	r3, [r7, #0]
10044f56:	685b      	ldr	r3, [r3, #4]
10044f58:	2203      	movs	r2, #3
10044f5a:	4013      	ands	r3, r2
10044f5c:	2b01      	cmp	r3, #1
10044f5e:	d005      	beq.n	10044f6c <HAL_GPIO_Init+0x40>
10044f60:	683b      	ldr	r3, [r7, #0]
10044f62:	685b      	ldr	r3, [r3, #4]
10044f64:	2203      	movs	r2, #3
10044f66:	4013      	ands	r3, r2
10044f68:	2b02      	cmp	r3, #2
10044f6a:	d130      	bne.n	10044fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10044f6c:	687b      	ldr	r3, [r7, #4]
10044f6e:	689b      	ldr	r3, [r3, #8]
10044f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10044f72:	697b      	ldr	r3, [r7, #20]
10044f74:	005b      	lsls	r3, r3, #1
10044f76:	2203      	movs	r2, #3
10044f78:	409a      	lsls	r2, r3
10044f7a:	0013      	movs	r3, r2
10044f7c:	43da      	mvns	r2, r3
10044f7e:	693b      	ldr	r3, [r7, #16]
10044f80:	4013      	ands	r3, r2
10044f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10044f84:	683b      	ldr	r3, [r7, #0]
10044f86:	68da      	ldr	r2, [r3, #12]
10044f88:	697b      	ldr	r3, [r7, #20]
10044f8a:	005b      	lsls	r3, r3, #1
10044f8c:	409a      	lsls	r2, r3
10044f8e:	0013      	movs	r3, r2
10044f90:	693a      	ldr	r2, [r7, #16]
10044f92:	4313      	orrs	r3, r2
10044f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10044f96:	687b      	ldr	r3, [r7, #4]
10044f98:	693a      	ldr	r2, [r7, #16]
10044f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10044f9c:	687b      	ldr	r3, [r7, #4]
10044f9e:	685b      	ldr	r3, [r3, #4]
10044fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10044fa2:	2201      	movs	r2, #1
10044fa4:	697b      	ldr	r3, [r7, #20]
10044fa6:	409a      	lsls	r2, r3
10044fa8:	0013      	movs	r3, r2
10044faa:	43da      	mvns	r2, r3
10044fac:	693b      	ldr	r3, [r7, #16]
10044fae:	4013      	ands	r3, r2
10044fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10044fb2:	683b      	ldr	r3, [r7, #0]
10044fb4:	685b      	ldr	r3, [r3, #4]
10044fb6:	091b      	lsrs	r3, r3, #4
10044fb8:	2201      	movs	r2, #1
10044fba:	401a      	ands	r2, r3
10044fbc:	697b      	ldr	r3, [r7, #20]
10044fbe:	409a      	lsls	r2, r3
10044fc0:	0013      	movs	r3, r2
10044fc2:	693a      	ldr	r2, [r7, #16]
10044fc4:	4313      	orrs	r3, r2
10044fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10044fc8:	687b      	ldr	r3, [r7, #4]
10044fca:	693a      	ldr	r2, [r7, #16]
10044fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10044fce:	683b      	ldr	r3, [r7, #0]
10044fd0:	685b      	ldr	r3, [r3, #4]
10044fd2:	2203      	movs	r2, #3
10044fd4:	4013      	ands	r3, r2
10044fd6:	2b03      	cmp	r3, #3
10044fd8:	d017      	beq.n	1004500a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10044fda:	687b      	ldr	r3, [r7, #4]
10044fdc:	68db      	ldr	r3, [r3, #12]
10044fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10044fe0:	697b      	ldr	r3, [r7, #20]
10044fe2:	005b      	lsls	r3, r3, #1
10044fe4:	2203      	movs	r2, #3
10044fe6:	409a      	lsls	r2, r3
10044fe8:	0013      	movs	r3, r2
10044fea:	43da      	mvns	r2, r3
10044fec:	693b      	ldr	r3, [r7, #16]
10044fee:	4013      	ands	r3, r2
10044ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10044ff2:	683b      	ldr	r3, [r7, #0]
10044ff4:	689a      	ldr	r2, [r3, #8]
10044ff6:	697b      	ldr	r3, [r7, #20]
10044ff8:	005b      	lsls	r3, r3, #1
10044ffa:	409a      	lsls	r2, r3
10044ffc:	0013      	movs	r3, r2
10044ffe:	693a      	ldr	r2, [r7, #16]
10045000:	4313      	orrs	r3, r2
10045002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10045004:	687b      	ldr	r3, [r7, #4]
10045006:	693a      	ldr	r2, [r7, #16]
10045008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004500a:	683b      	ldr	r3, [r7, #0]
1004500c:	685b      	ldr	r3, [r3, #4]
1004500e:	2203      	movs	r2, #3
10045010:	4013      	ands	r3, r2
10045012:	2b02      	cmp	r3, #2
10045014:	d123      	bne.n	1004505e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10045016:	697b      	ldr	r3, [r7, #20]
10045018:	08da      	lsrs	r2, r3, #3
1004501a:	687b      	ldr	r3, [r7, #4]
1004501c:	3208      	adds	r2, #8
1004501e:	0092      	lsls	r2, r2, #2
10045020:	58d3      	ldr	r3, [r2, r3]
10045022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10045024:	697b      	ldr	r3, [r7, #20]
10045026:	2207      	movs	r2, #7
10045028:	4013      	ands	r3, r2
1004502a:	009b      	lsls	r3, r3, #2
1004502c:	220f      	movs	r2, #15
1004502e:	409a      	lsls	r2, r3
10045030:	0013      	movs	r3, r2
10045032:	43da      	mvns	r2, r3
10045034:	693b      	ldr	r3, [r7, #16]
10045036:	4013      	ands	r3, r2
10045038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
1004503a:	683b      	ldr	r3, [r7, #0]
1004503c:	691a      	ldr	r2, [r3, #16]
1004503e:	697b      	ldr	r3, [r7, #20]
10045040:	2107      	movs	r1, #7
10045042:	400b      	ands	r3, r1
10045044:	009b      	lsls	r3, r3, #2
10045046:	409a      	lsls	r2, r3
10045048:	0013      	movs	r3, r2
1004504a:	693a      	ldr	r2, [r7, #16]
1004504c:	4313      	orrs	r3, r2
1004504e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10045050:	697b      	ldr	r3, [r7, #20]
10045052:	08da      	lsrs	r2, r3, #3
10045054:	687b      	ldr	r3, [r7, #4]
10045056:	3208      	adds	r2, #8
10045058:	0092      	lsls	r2, r2, #2
1004505a:	6939      	ldr	r1, [r7, #16]
1004505c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1004505e:	687b      	ldr	r3, [r7, #4]
10045060:	681b      	ldr	r3, [r3, #0]
10045062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10045064:	697b      	ldr	r3, [r7, #20]
10045066:	005b      	lsls	r3, r3, #1
10045068:	2203      	movs	r2, #3
1004506a:	409a      	lsls	r2, r3
1004506c:	0013      	movs	r3, r2
1004506e:	43da      	mvns	r2, r3
10045070:	693b      	ldr	r3, [r7, #16]
10045072:	4013      	ands	r3, r2
10045074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10045076:	683b      	ldr	r3, [r7, #0]
10045078:	685b      	ldr	r3, [r3, #4]
1004507a:	2203      	movs	r2, #3
1004507c:	401a      	ands	r2, r3
1004507e:	697b      	ldr	r3, [r7, #20]
10045080:	005b      	lsls	r3, r3, #1
10045082:	409a      	lsls	r2, r3
10045084:	0013      	movs	r3, r2
10045086:	693a      	ldr	r2, [r7, #16]
10045088:	4313      	orrs	r3, r2
1004508a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
1004508c:	687b      	ldr	r3, [r7, #4]
1004508e:	693a      	ldr	r2, [r7, #16]
10045090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10045092:	683b      	ldr	r3, [r7, #0]
10045094:	685a      	ldr	r2, [r3, #4]
10045096:	23c0      	movs	r3, #192	@ 0xc0
10045098:	029b      	lsls	r3, r3, #10
1004509a:	4013      	ands	r3, r2
1004509c:	d100      	bne.n	100450a0 <HAL_GPIO_Init+0x174>
1004509e:	e0db      	b.n	10045258 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
100450a0:	683b      	ldr	r3, [r7, #0]
100450a2:	685a      	ldr	r2, [r3, #4]
100450a4:	2380      	movs	r3, #128	@ 0x80
100450a6:	02db      	lsls	r3, r3, #11
100450a8:	4013      	ands	r3, r2
100450aa:	d030      	beq.n	1004510e <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
100450ac:	2380      	movs	r3, #128	@ 0x80
100450ae:	05db      	lsls	r3, r3, #23
100450b0:	68db      	ldr	r3, [r3, #12]
100450b2:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
100450b4:	687a      	ldr	r2, [r7, #4]
100450b6:	2390      	movs	r3, #144	@ 0x90
100450b8:	05db      	lsls	r3, r3, #23
100450ba:	429a      	cmp	r2, r3
100450bc:	d111      	bne.n	100450e2 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
100450be:	2201      	movs	r2, #1
100450c0:	697b      	ldr	r3, [r7, #20]
100450c2:	409a      	lsls	r2, r3
100450c4:	0013      	movs	r3, r2
100450c6:	43db      	mvns	r3, r3
100450c8:	001a      	movs	r2, r3
100450ca:	693b      	ldr	r3, [r7, #16]
100450cc:	4013      	ands	r3, r2
100450ce:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100450d0:	2201      	movs	r2, #1
100450d2:	697b      	ldr	r3, [r7, #20]
100450d4:	409a      	lsls	r2, r3
100450d6:	0013      	movs	r3, r2
100450d8:	001a      	movs	r2, r3
100450da:	693b      	ldr	r3, [r7, #16]
100450dc:	4313      	orrs	r3, r2
100450de:	613b      	str	r3, [r7, #16]
100450e0:	e011      	b.n	10045106 <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100450e2:	2201      	movs	r2, #1
100450e4:	697b      	ldr	r3, [r7, #20]
100450e6:	409a      	lsls	r2, r3
100450e8:	0013      	movs	r3, r2
100450ea:	041b      	lsls	r3, r3, #16
100450ec:	43db      	mvns	r3, r3
100450ee:	001a      	movs	r2, r3
100450f0:	693b      	ldr	r3, [r7, #16]
100450f2:	4013      	ands	r3, r2
100450f4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100450f6:	2201      	movs	r2, #1
100450f8:	697b      	ldr	r3, [r7, #20]
100450fa:	409a      	lsls	r2, r3
100450fc:	0013      	movs	r3, r2
100450fe:	041b      	lsls	r3, r3, #16
10045100:	693a      	ldr	r2, [r7, #16]
10045102:	4313      	orrs	r3, r2
10045104:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10045106:	2380      	movs	r3, #128	@ 0x80
10045108:	05db      	lsls	r3, r3, #23
1004510a:	693a      	ldr	r2, [r7, #16]
1004510c:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
1004510e:	683b      	ldr	r3, [r7, #0]
10045110:	685a      	ldr	r2, [r3, #4]
10045112:	2380      	movs	r3, #128	@ 0x80
10045114:	035b      	lsls	r3, r3, #13
10045116:	4013      	ands	r3, r2
10045118:	d030      	beq.n	1004517c <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
1004511a:	2380      	movs	r3, #128	@ 0x80
1004511c:	05db      	lsls	r3, r3, #23
1004511e:	691b      	ldr	r3, [r3, #16]
10045120:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10045122:	687a      	ldr	r2, [r7, #4]
10045124:	2390      	movs	r3, #144	@ 0x90
10045126:	05db      	lsls	r3, r3, #23
10045128:	429a      	cmp	r2, r3
1004512a:	d111      	bne.n	10045150 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
1004512c:	2201      	movs	r2, #1
1004512e:	697b      	ldr	r3, [r7, #20]
10045130:	409a      	lsls	r2, r3
10045132:	0013      	movs	r3, r2
10045134:	43db      	mvns	r3, r3
10045136:	001a      	movs	r2, r3
10045138:	693b      	ldr	r3, [r7, #16]
1004513a:	4013      	ands	r3, r2
1004513c:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004513e:	2201      	movs	r2, #1
10045140:	697b      	ldr	r3, [r7, #20]
10045142:	409a      	lsls	r2, r3
10045144:	0013      	movs	r3, r2
10045146:	001a      	movs	r2, r3
10045148:	693b      	ldr	r3, [r7, #16]
1004514a:	4313      	orrs	r3, r2
1004514c:	613b      	str	r3, [r7, #16]
1004514e:	e011      	b.n	10045174 <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10045150:	2201      	movs	r2, #1
10045152:	697b      	ldr	r3, [r7, #20]
10045154:	409a      	lsls	r2, r3
10045156:	0013      	movs	r3, r2
10045158:	041b      	lsls	r3, r3, #16
1004515a:	43db      	mvns	r3, r3
1004515c:	001a      	movs	r2, r3
1004515e:	693b      	ldr	r3, [r7, #16]
10045160:	4013      	ands	r3, r2
10045162:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045164:	2201      	movs	r2, #1
10045166:	697b      	ldr	r3, [r7, #20]
10045168:	409a      	lsls	r2, r3
1004516a:	0013      	movs	r3, r2
1004516c:	041b      	lsls	r3, r3, #16
1004516e:	693a      	ldr	r2, [r7, #16]
10045170:	4313      	orrs	r3, r2
10045172:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10045174:	2380      	movs	r3, #128	@ 0x80
10045176:	05db      	lsls	r3, r3, #23
10045178:	693a      	ldr	r2, [r7, #16]
1004517a:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
1004517c:	683b      	ldr	r3, [r7, #0]
1004517e:	685a      	ldr	r2, [r3, #4]
10045180:	2380      	movs	r3, #128	@ 0x80
10045182:	03db      	lsls	r3, r3, #15
10045184:	4013      	ands	r3, r2
10045186:	d030      	beq.n	100451ea <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
10045188:	2380      	movs	r3, #128	@ 0x80
1004518a:	05db      	lsls	r3, r3, #23
1004518c:	695b      	ldr	r3, [r3, #20]
1004518e:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10045190:	687a      	ldr	r2, [r7, #4]
10045192:	2390      	movs	r3, #144	@ 0x90
10045194:	05db      	lsls	r3, r3, #23
10045196:	429a      	cmp	r2, r3
10045198:	d111      	bne.n	100451be <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
1004519a:	2201      	movs	r2, #1
1004519c:	697b      	ldr	r3, [r7, #20]
1004519e:	409a      	lsls	r2, r3
100451a0:	0013      	movs	r3, r2
100451a2:	43db      	mvns	r3, r3
100451a4:	001a      	movs	r2, r3
100451a6:	693b      	ldr	r3, [r7, #16]
100451a8:	4013      	ands	r3, r2
100451aa:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100451ac:	2201      	movs	r2, #1
100451ae:	697b      	ldr	r3, [r7, #20]
100451b0:	409a      	lsls	r2, r3
100451b2:	0013      	movs	r3, r2
100451b4:	001a      	movs	r2, r3
100451b6:	693b      	ldr	r3, [r7, #16]
100451b8:	4313      	orrs	r3, r2
100451ba:	613b      	str	r3, [r7, #16]
100451bc:	e011      	b.n	100451e2 <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100451be:	2201      	movs	r2, #1
100451c0:	697b      	ldr	r3, [r7, #20]
100451c2:	409a      	lsls	r2, r3
100451c4:	0013      	movs	r3, r2
100451c6:	041b      	lsls	r3, r3, #16
100451c8:	43db      	mvns	r3, r3
100451ca:	001a      	movs	r2, r3
100451cc:	693b      	ldr	r3, [r7, #16]
100451ce:	4013      	ands	r3, r2
100451d0:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100451d2:	2201      	movs	r2, #1
100451d4:	697b      	ldr	r3, [r7, #20]
100451d6:	409a      	lsls	r2, r3
100451d8:	0013      	movs	r3, r2
100451da:	041b      	lsls	r3, r3, #16
100451dc:	693a      	ldr	r2, [r7, #16]
100451de:	4313      	orrs	r3, r2
100451e0:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
100451e2:	2380      	movs	r3, #128	@ 0x80
100451e4:	05db      	lsls	r3, r3, #23
100451e6:	693a      	ldr	r2, [r7, #16]
100451e8:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
100451ea:	683b      	ldr	r3, [r7, #0]
100451ec:	685a      	ldr	r2, [r3, #4]
100451ee:	2380      	movs	r3, #128	@ 0x80
100451f0:	025b      	lsls	r3, r3, #9
100451f2:	4013      	ands	r3, r2
100451f4:	d030      	beq.n	10045258 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
100451f6:	2380      	movs	r3, #128	@ 0x80
100451f8:	05db      	lsls	r3, r3, #23
100451fa:	699b      	ldr	r3, [r3, #24]
100451fc:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100451fe:	687a      	ldr	r2, [r7, #4]
10045200:	2390      	movs	r3, #144	@ 0x90
10045202:	05db      	lsls	r3, r3, #23
10045204:	429a      	cmp	r2, r3
10045206:	d111      	bne.n	1004522c <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
10045208:	2201      	movs	r2, #1
1004520a:	697b      	ldr	r3, [r7, #20]
1004520c:	409a      	lsls	r2, r3
1004520e:	0013      	movs	r3, r2
10045210:	43db      	mvns	r3, r3
10045212:	001a      	movs	r2, r3
10045214:	693b      	ldr	r3, [r7, #16]
10045216:	4013      	ands	r3, r2
10045218:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004521a:	2201      	movs	r2, #1
1004521c:	697b      	ldr	r3, [r7, #20]
1004521e:	409a      	lsls	r2, r3
10045220:	0013      	movs	r3, r2
10045222:	001a      	movs	r2, r3
10045224:	693b      	ldr	r3, [r7, #16]
10045226:	4313      	orrs	r3, r2
10045228:	613b      	str	r3, [r7, #16]
1004522a:	e011      	b.n	10045250 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004522c:	2201      	movs	r2, #1
1004522e:	697b      	ldr	r3, [r7, #20]
10045230:	409a      	lsls	r2, r3
10045232:	0013      	movs	r3, r2
10045234:	041b      	lsls	r3, r3, #16
10045236:	43db      	mvns	r3, r3
10045238:	001a      	movs	r2, r3
1004523a:	693b      	ldr	r3, [r7, #16]
1004523c:	4013      	ands	r3, r2
1004523e:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045240:	2201      	movs	r2, #1
10045242:	697b      	ldr	r3, [r7, #20]
10045244:	409a      	lsls	r2, r3
10045246:	0013      	movs	r3, r2
10045248:	041b      	lsls	r3, r3, #16
1004524a:	693a      	ldr	r2, [r7, #16]
1004524c:	4313      	orrs	r3, r2
1004524e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10045250:	2380      	movs	r3, #128	@ 0x80
10045252:	05db      	lsls	r3, r3, #23
10045254:	693a      	ldr	r2, [r7, #16]
10045256:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10045258:	697b      	ldr	r3, [r7, #20]
1004525a:	3301      	adds	r3, #1
1004525c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004525e:	683b      	ldr	r3, [r7, #0]
10045260:	681a      	ldr	r2, [r3, #0]
10045262:	697b      	ldr	r3, [r7, #20]
10045264:	40da      	lsrs	r2, r3
10045266:	1e13      	subs	r3, r2, #0
10045268:	d000      	beq.n	1004526c <HAL_GPIO_Init+0x340>
1004526a:	e667      	b.n	10044f3c <HAL_GPIO_Init+0x10>
  }
}
1004526c:	46c0      	nop			@ (mov r8, r8)
1004526e:	46c0      	nop			@ (mov r8, r8)
10045270:	46bd      	mov	sp, r7
10045272:	b006      	add	sp, #24
10045274:	bd80      	pop	{r7, pc}

10045276 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10045276:	b580      	push	{r7, lr}
10045278:	b084      	sub	sp, #16
1004527a:	af00      	add	r7, sp, #0
1004527c:	6078      	str	r0, [r7, #4]
1004527e:	000a      	movs	r2, r1
10045280:	1cbb      	adds	r3, r7, #2
10045282:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10045284:	687b      	ldr	r3, [r7, #4]
10045286:	691b      	ldr	r3, [r3, #16]
10045288:	1cba      	adds	r2, r7, #2
1004528a:	8812      	ldrh	r2, [r2, #0]
1004528c:	4013      	ands	r3, r2
1004528e:	d004      	beq.n	1004529a <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10045290:	230f      	movs	r3, #15
10045292:	18fb      	adds	r3, r7, r3
10045294:	2201      	movs	r2, #1
10045296:	701a      	strb	r2, [r3, #0]
10045298:	e003      	b.n	100452a2 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
1004529a:	230f      	movs	r3, #15
1004529c:	18fb      	adds	r3, r7, r3
1004529e:	2200      	movs	r2, #0
100452a0:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
100452a2:	230f      	movs	r3, #15
100452a4:	18fb      	adds	r3, r7, r3
100452a6:	781b      	ldrb	r3, [r3, #0]
}
100452a8:	0018      	movs	r0, r3
100452aa:	46bd      	mov	sp, r7
100452ac:	b004      	add	sp, #16
100452ae:	bd80      	pop	{r7, pc}

100452b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
100452b0:	b580      	push	{r7, lr}
100452b2:	b082      	sub	sp, #8
100452b4:	af00      	add	r7, sp, #0
100452b6:	6078      	str	r0, [r7, #4]
100452b8:	0008      	movs	r0, r1
100452ba:	0011      	movs	r1, r2
100452bc:	1cbb      	adds	r3, r7, #2
100452be:	1c02      	adds	r2, r0, #0
100452c0:	801a      	strh	r2, [r3, #0]
100452c2:	1c7b      	adds	r3, r7, #1
100452c4:	1c0a      	adds	r2, r1, #0
100452c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
100452c8:	1c7b      	adds	r3, r7, #1
100452ca:	781b      	ldrb	r3, [r3, #0]
100452cc:	2b00      	cmp	r3, #0
100452ce:	d004      	beq.n	100452da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
100452d0:	1cbb      	adds	r3, r7, #2
100452d2:	881a      	ldrh	r2, [r3, #0]
100452d4:	687b      	ldr	r3, [r7, #4]
100452d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
100452d8:	e003      	b.n	100452e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
100452da:	1cbb      	adds	r3, r7, #2
100452dc:	881a      	ldrh	r2, [r3, #0]
100452de:	687b      	ldr	r3, [r7, #4]
100452e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
100452e2:	46c0      	nop			@ (mov r8, r8)
100452e4:	46bd      	mov	sp, r7
100452e6:	b002      	add	sp, #8
100452e8:	bd80      	pop	{r7, pc}

100452ea <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral for STM32WB0x family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
100452ea:	b580      	push	{r7, lr}
100452ec:	b084      	sub	sp, #16
100452ee:	af00      	add	r7, sp, #0
100452f0:	6078      	str	r0, [r7, #4]
100452f2:	000a      	movs	r2, r1
100452f4:	1cbb      	adds	r3, r7, #2
100452f6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
100452f8:	687b      	ldr	r3, [r7, #4]
100452fa:	695b      	ldr	r3, [r3, #20]
100452fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
100452fe:	1cbb      	adds	r3, r7, #2
10045300:	881b      	ldrh	r3, [r3, #0]
10045302:	68fa      	ldr	r2, [r7, #12]
10045304:	4013      	ands	r3, r2
10045306:	041a      	lsls	r2, r3, #16
10045308:	68fb      	ldr	r3, [r7, #12]
1004530a:	43db      	mvns	r3, r3
1004530c:	1cb9      	adds	r1, r7, #2
1004530e:	8809      	ldrh	r1, [r1, #0]
10045310:	400b      	ands	r3, r1
10045312:	431a      	orrs	r2, r3
10045314:	687b      	ldr	r3, [r7, #4]
10045316:	619a      	str	r2, [r3, #24]
}
10045318:	46c0      	nop			@ (mov r8, r8)
1004531a:	46bd      	mov	sp, r7
1004531c:	b004      	add	sp, #16
1004531e:	bd80      	pop	{r7, pc}

10045320 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10045320:	b580      	push	{r7, lr}
10045322:	b082      	sub	sp, #8
10045324:	af00      	add	r7, sp, #0
10045326:	6078      	str	r0, [r7, #4]
10045328:	000a      	movs	r2, r1
1004532a:	1cbb      	adds	r3, r7, #2
1004532c:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
1004532e:	687a      	ldr	r2, [r7, #4]
10045330:	2390      	movs	r3, #144	@ 0x90
10045332:	05db      	lsls	r3, r3, #23
10045334:	429a      	cmp	r2, r3
10045336:	d109      	bne.n	1004534c <HAL_GPIO_EXTI_IRQHandler+0x2c>
10045338:	2380      	movs	r3, #128	@ 0x80
1004533a:	05db      	lsls	r3, r3, #23
1004533c:	69db      	ldr	r3, [r3, #28]
1004533e:	1cba      	adds	r2, r7, #2
10045340:	8812      	ldrh	r2, [r2, #0]
10045342:	4013      	ands	r3, r2
10045344:	1e5a      	subs	r2, r3, #1
10045346:	4193      	sbcs	r3, r2
10045348:	b2db      	uxtb	r3, r3
1004534a:	e009      	b.n	10045360 <HAL_GPIO_EXTI_IRQHandler+0x40>
1004534c:	2380      	movs	r3, #128	@ 0x80
1004534e:	05db      	lsls	r3, r3, #23
10045350:	69db      	ldr	r3, [r3, #28]
10045352:	1cba      	adds	r2, r7, #2
10045354:	8812      	ldrh	r2, [r2, #0]
10045356:	0412      	lsls	r2, r2, #16
10045358:	4013      	ands	r3, r2
1004535a:	1e5a      	subs	r2, r3, #1
1004535c:	4193      	sbcs	r3, r2
1004535e:	b2db      	uxtb	r3, r3
10045360:	2b00      	cmp	r3, #0
10045362:	d017      	beq.n	10045394 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
10045364:	687a      	ldr	r2, [r7, #4]
10045366:	2390      	movs	r3, #144	@ 0x90
10045368:	05db      	lsls	r3, r3, #23
1004536a:	429a      	cmp	r2, r3
1004536c:	d105      	bne.n	1004537a <HAL_GPIO_EXTI_IRQHandler+0x5a>
1004536e:	2380      	movs	r3, #128	@ 0x80
10045370:	05db      	lsls	r3, r3, #23
10045372:	1cba      	adds	r2, r7, #2
10045374:	8812      	ldrh	r2, [r2, #0]
10045376:	61da      	str	r2, [r3, #28]
10045378:	e005      	b.n	10045386 <HAL_GPIO_EXTI_IRQHandler+0x66>
1004537a:	1cbb      	adds	r3, r7, #2
1004537c:	881a      	ldrh	r2, [r3, #0]
1004537e:	2380      	movs	r3, #128	@ 0x80
10045380:	05db      	lsls	r3, r3, #23
10045382:	0412      	lsls	r2, r2, #16
10045384:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10045386:	1cbb      	adds	r3, r7, #2
10045388:	881a      	ldrh	r2, [r3, #0]
1004538a:	687b      	ldr	r3, [r7, #4]
1004538c:	0011      	movs	r1, r2
1004538e:	0018      	movs	r0, r3
10045390:	f000 f804 	bl	1004539c <HAL_GPIO_EXTI_Callback>
  }
}
10045394:	46c0      	nop			@ (mov r8, r8)
10045396:	46bd      	mov	sp, r7
10045398:	b002      	add	sp, #8
1004539a:	bd80      	pop	{r7, pc}

1004539c <HAL_GPIO_EXTI_Callback>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004539c:	b580      	push	{r7, lr}
1004539e:	b082      	sub	sp, #8
100453a0:	af00      	add	r7, sp, #0
100453a2:	6078      	str	r0, [r7, #4]
100453a4:	000a      	movs	r2, r1
100453a6:	1cbb      	adds	r3, r7, #2
100453a8:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
100453aa:	46c0      	nop			@ (mov r8, r8)
100453ac:	46bd      	mov	sp, r7
100453ae:	b002      	add	sp, #8
100453b0:	bd80      	pop	{r7, pc}
	...

100453b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
100453b4:	b580      	push	{r7, lr}
100453b6:	b082      	sub	sp, #8
100453b8:	af00      	add	r7, sp, #0
100453ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
100453bc:	687b      	ldr	r3, [r7, #4]
100453be:	2b00      	cmp	r3, #0
100453c0:	d101      	bne.n	100453c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
100453c2:	2301      	movs	r3, #1
100453c4:	e08f      	b.n	100454e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
100453c6:	687b      	ldr	r3, [r7, #4]
100453c8:	2241      	movs	r2, #65	@ 0x41
100453ca:	5c9b      	ldrb	r3, [r3, r2]
100453cc:	b2db      	uxtb	r3, r3
100453ce:	2b00      	cmp	r3, #0
100453d0:	d107      	bne.n	100453e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
100453d2:	687b      	ldr	r3, [r7, #4]
100453d4:	2240      	movs	r2, #64	@ 0x40
100453d6:	2100      	movs	r1, #0
100453d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
100453da:	687b      	ldr	r3, [r7, #4]
100453dc:	0018      	movs	r0, r3
100453de:	f7fe fcb9 	bl	10043d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
100453e2:	687b      	ldr	r3, [r7, #4]
100453e4:	2241      	movs	r2, #65	@ 0x41
100453e6:	2124      	movs	r1, #36	@ 0x24
100453e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
100453ea:	687b      	ldr	r3, [r7, #4]
100453ec:	681b      	ldr	r3, [r3, #0]
100453ee:	681a      	ldr	r2, [r3, #0]
100453f0:	687b      	ldr	r3, [r7, #4]
100453f2:	681b      	ldr	r3, [r3, #0]
100453f4:	2101      	movs	r1, #1
100453f6:	438a      	bics	r2, r1
100453f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
100453fa:	687b      	ldr	r3, [r7, #4]
100453fc:	685a      	ldr	r2, [r3, #4]
100453fe:	687b      	ldr	r3, [r7, #4]
10045400:	681b      	ldr	r3, [r3, #0]
10045402:	493b      	ldr	r1, [pc, #236]	@ (100454f0 <HAL_I2C_Init+0x13c>)
10045404:	400a      	ands	r2, r1
10045406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10045408:	687b      	ldr	r3, [r7, #4]
1004540a:	681b      	ldr	r3, [r3, #0]
1004540c:	689a      	ldr	r2, [r3, #8]
1004540e:	687b      	ldr	r3, [r7, #4]
10045410:	681b      	ldr	r3, [r3, #0]
10045412:	4938      	ldr	r1, [pc, #224]	@ (100454f4 <HAL_I2C_Init+0x140>)
10045414:	400a      	ands	r2, r1
10045416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10045418:	687b      	ldr	r3, [r7, #4]
1004541a:	68db      	ldr	r3, [r3, #12]
1004541c:	2b01      	cmp	r3, #1
1004541e:	d108      	bne.n	10045432 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10045420:	687b      	ldr	r3, [r7, #4]
10045422:	689a      	ldr	r2, [r3, #8]
10045424:	687b      	ldr	r3, [r7, #4]
10045426:	681b      	ldr	r3, [r3, #0]
10045428:	2180      	movs	r1, #128	@ 0x80
1004542a:	0209      	lsls	r1, r1, #8
1004542c:	430a      	orrs	r2, r1
1004542e:	609a      	str	r2, [r3, #8]
10045430:	e007      	b.n	10045442 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
10045432:	687b      	ldr	r3, [r7, #4]
10045434:	689a      	ldr	r2, [r3, #8]
10045436:	687b      	ldr	r3, [r7, #4]
10045438:	681b      	ldr	r3, [r3, #0]
1004543a:	2184      	movs	r1, #132	@ 0x84
1004543c:	0209      	lsls	r1, r1, #8
1004543e:	430a      	orrs	r2, r1
10045440:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10045442:	687b      	ldr	r3, [r7, #4]
10045444:	68db      	ldr	r3, [r3, #12]
10045446:	2b02      	cmp	r3, #2
10045448:	d109      	bne.n	1004545e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
1004544a:	687b      	ldr	r3, [r7, #4]
1004544c:	681b      	ldr	r3, [r3, #0]
1004544e:	685a      	ldr	r2, [r3, #4]
10045450:	687b      	ldr	r3, [r7, #4]
10045452:	681b      	ldr	r3, [r3, #0]
10045454:	2180      	movs	r1, #128	@ 0x80
10045456:	0109      	lsls	r1, r1, #4
10045458:	430a      	orrs	r2, r1
1004545a:	605a      	str	r2, [r3, #4]
1004545c:	e007      	b.n	1004546e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
1004545e:	687b      	ldr	r3, [r7, #4]
10045460:	681b      	ldr	r3, [r3, #0]
10045462:	685a      	ldr	r2, [r3, #4]
10045464:	687b      	ldr	r3, [r7, #4]
10045466:	681b      	ldr	r3, [r3, #0]
10045468:	4923      	ldr	r1, [pc, #140]	@ (100454f8 <HAL_I2C_Init+0x144>)
1004546a:	400a      	ands	r2, r1
1004546c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
1004546e:	687b      	ldr	r3, [r7, #4]
10045470:	681b      	ldr	r3, [r3, #0]
10045472:	685a      	ldr	r2, [r3, #4]
10045474:	687b      	ldr	r3, [r7, #4]
10045476:	681b      	ldr	r3, [r3, #0]
10045478:	4920      	ldr	r1, [pc, #128]	@ (100454fc <HAL_I2C_Init+0x148>)
1004547a:	430a      	orrs	r2, r1
1004547c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
1004547e:	687b      	ldr	r3, [r7, #4]
10045480:	681b      	ldr	r3, [r3, #0]
10045482:	68da      	ldr	r2, [r3, #12]
10045484:	687b      	ldr	r3, [r7, #4]
10045486:	681b      	ldr	r3, [r3, #0]
10045488:	491a      	ldr	r1, [pc, #104]	@ (100454f4 <HAL_I2C_Init+0x140>)
1004548a:	400a      	ands	r2, r1
1004548c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
1004548e:	687b      	ldr	r3, [r7, #4]
10045490:	691a      	ldr	r2, [r3, #16]
10045492:	687b      	ldr	r3, [r7, #4]
10045494:	695b      	ldr	r3, [r3, #20]
10045496:	431a      	orrs	r2, r3
10045498:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
1004549a:	687b      	ldr	r3, [r7, #4]
1004549c:	699b      	ldr	r3, [r3, #24]
1004549e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100454a0:	687b      	ldr	r3, [r7, #4]
100454a2:	681b      	ldr	r3, [r3, #0]
100454a4:	430a      	orrs	r2, r1
100454a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
100454a8:	687b      	ldr	r3, [r7, #4]
100454aa:	69d9      	ldr	r1, [r3, #28]
100454ac:	687b      	ldr	r3, [r7, #4]
100454ae:	6a1a      	ldr	r2, [r3, #32]
100454b0:	687b      	ldr	r3, [r7, #4]
100454b2:	681b      	ldr	r3, [r3, #0]
100454b4:	430a      	orrs	r2, r1
100454b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
100454b8:	687b      	ldr	r3, [r7, #4]
100454ba:	681b      	ldr	r3, [r3, #0]
100454bc:	681a      	ldr	r2, [r3, #0]
100454be:	687b      	ldr	r3, [r7, #4]
100454c0:	681b      	ldr	r3, [r3, #0]
100454c2:	2101      	movs	r1, #1
100454c4:	430a      	orrs	r2, r1
100454c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
100454c8:	687b      	ldr	r3, [r7, #4]
100454ca:	2200      	movs	r2, #0
100454cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
100454ce:	687b      	ldr	r3, [r7, #4]
100454d0:	2241      	movs	r2, #65	@ 0x41
100454d2:	2120      	movs	r1, #32
100454d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
100454d6:	687b      	ldr	r3, [r7, #4]
100454d8:	2200      	movs	r2, #0
100454da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
100454dc:	687b      	ldr	r3, [r7, #4]
100454de:	2242      	movs	r2, #66	@ 0x42
100454e0:	2100      	movs	r1, #0
100454e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100454e4:	2300      	movs	r3, #0
}
100454e6:	0018      	movs	r0, r3
100454e8:	46bd      	mov	sp, r7
100454ea:	b002      	add	sp, #8
100454ec:	bd80      	pop	{r7, pc}
100454ee:	46c0      	nop			@ (mov r8, r8)
100454f0:	f0ffffff 	.word	0xf0ffffff
100454f4:	ffff7fff 	.word	0xffff7fff
100454f8:	fffff7ff 	.word	0xfffff7ff
100454fc:	02008000 	.word	0x02008000

10045500 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10045500:	b590      	push	{r4, r7, lr}
10045502:	b087      	sub	sp, #28
10045504:	af02      	add	r7, sp, #8
10045506:	60f8      	str	r0, [r7, #12]
10045508:	000c      	movs	r4, r1
1004550a:	0010      	movs	r0, r2
1004550c:	0019      	movs	r1, r3
1004550e:	230a      	movs	r3, #10
10045510:	18fb      	adds	r3, r7, r3
10045512:	1c22      	adds	r2, r4, #0
10045514:	801a      	strh	r2, [r3, #0]
10045516:	2308      	movs	r3, #8
10045518:	18fb      	adds	r3, r7, r3
1004551a:	1c02      	adds	r2, r0, #0
1004551c:	801a      	strh	r2, [r3, #0]
1004551e:	1dbb      	adds	r3, r7, #6
10045520:	1c0a      	adds	r2, r1, #0
10045522:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10045524:	68fb      	ldr	r3, [r7, #12]
10045526:	2241      	movs	r2, #65	@ 0x41
10045528:	5c9b      	ldrb	r3, [r3, r2]
1004552a:	b2db      	uxtb	r3, r3
1004552c:	2b20      	cmp	r3, #32
1004552e:	d000      	beq.n	10045532 <HAL_I2C_Mem_Write_IT+0x32>
10045530:	e07d      	b.n	1004562e <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
10045532:	6a3b      	ldr	r3, [r7, #32]
10045534:	2b00      	cmp	r3, #0
10045536:	d004      	beq.n	10045542 <HAL_I2C_Mem_Write_IT+0x42>
10045538:	2324      	movs	r3, #36	@ 0x24
1004553a:	18fb      	adds	r3, r7, r3
1004553c:	881b      	ldrh	r3, [r3, #0]
1004553e:	2b00      	cmp	r3, #0
10045540:	d105      	bne.n	1004554e <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10045542:	68fb      	ldr	r3, [r7, #12]
10045544:	2280      	movs	r2, #128	@ 0x80
10045546:	0092      	lsls	r2, r2, #2
10045548:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
1004554a:	2301      	movs	r3, #1
1004554c:	e070      	b.n	10045630 <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1004554e:	68fb      	ldr	r3, [r7, #12]
10045550:	681b      	ldr	r3, [r3, #0]
10045552:	699a      	ldr	r2, [r3, #24]
10045554:	2380      	movs	r3, #128	@ 0x80
10045556:	021b      	lsls	r3, r3, #8
10045558:	401a      	ands	r2, r3
1004555a:	2380      	movs	r3, #128	@ 0x80
1004555c:	021b      	lsls	r3, r3, #8
1004555e:	429a      	cmp	r2, r3
10045560:	d101      	bne.n	10045566 <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
10045562:	2302      	movs	r3, #2
10045564:	e064      	b.n	10045630 <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10045566:	68fb      	ldr	r3, [r7, #12]
10045568:	2240      	movs	r2, #64	@ 0x40
1004556a:	5c9b      	ldrb	r3, [r3, r2]
1004556c:	2b01      	cmp	r3, #1
1004556e:	d101      	bne.n	10045574 <HAL_I2C_Mem_Write_IT+0x74>
10045570:	2302      	movs	r3, #2
10045572:	e05d      	b.n	10045630 <HAL_I2C_Mem_Write_IT+0x130>
10045574:	68fb      	ldr	r3, [r7, #12]
10045576:	2240      	movs	r2, #64	@ 0x40
10045578:	2101      	movs	r1, #1
1004557a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
1004557c:	68fb      	ldr	r3, [r7, #12]
1004557e:	2241      	movs	r2, #65	@ 0x41
10045580:	2121      	movs	r1, #33	@ 0x21
10045582:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10045584:	68fb      	ldr	r3, [r7, #12]
10045586:	2242      	movs	r2, #66	@ 0x42
10045588:	2140      	movs	r1, #64	@ 0x40
1004558a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1004558c:	68fb      	ldr	r3, [r7, #12]
1004558e:	2200      	movs	r2, #0
10045590:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
10045592:	68fb      	ldr	r3, [r7, #12]
10045594:	2200      	movs	r2, #0
10045596:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
10045598:	68fb      	ldr	r3, [r7, #12]
1004559a:	6a3a      	ldr	r2, [r7, #32]
1004559c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
1004559e:	68fb      	ldr	r3, [r7, #12]
100455a0:	2224      	movs	r2, #36	@ 0x24
100455a2:	18ba      	adds	r2, r7, r2
100455a4:	8812      	ldrh	r2, [r2, #0]
100455a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100455a8:	68fb      	ldr	r3, [r7, #12]
100455aa:	4a23      	ldr	r2, [pc, #140]	@ (10045638 <HAL_I2C_Mem_Write_IT+0x138>)
100455ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
100455ae:	68fb      	ldr	r3, [r7, #12]
100455b0:	4a22      	ldr	r2, [pc, #136]	@ (1004563c <HAL_I2C_Mem_Write_IT+0x13c>)
100455b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
100455b4:	230a      	movs	r3, #10
100455b6:	18fb      	adds	r3, r7, r3
100455b8:	881a      	ldrh	r2, [r3, #0]
100455ba:	68fb      	ldr	r3, [r7, #12]
100455bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
100455be:	1dbb      	adds	r3, r7, #6
100455c0:	881b      	ldrh	r3, [r3, #0]
100455c2:	2b01      	cmp	r3, #1
100455c4:	d10b      	bne.n	100455de <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
100455c6:	2308      	movs	r3, #8
100455c8:	18fb      	adds	r3, r7, r3
100455ca:	881b      	ldrh	r3, [r3, #0]
100455cc:	b2da      	uxtb	r2, r3
100455ce:	68fb      	ldr	r3, [r7, #12]
100455d0:	681b      	ldr	r3, [r3, #0]
100455d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
100455d4:	68fb      	ldr	r3, [r7, #12]
100455d6:	2201      	movs	r2, #1
100455d8:	4252      	negs	r2, r2
100455da:	651a      	str	r2, [r3, #80]	@ 0x50
100455dc:	e00e      	b.n	100455fc <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
100455de:	2108      	movs	r1, #8
100455e0:	187b      	adds	r3, r7, r1
100455e2:	881b      	ldrh	r3, [r3, #0]
100455e4:	0a1b      	lsrs	r3, r3, #8
100455e6:	b29b      	uxth	r3, r3
100455e8:	b2da      	uxtb	r2, r3
100455ea:	68fb      	ldr	r3, [r7, #12]
100455ec:	681b      	ldr	r3, [r3, #0]
100455ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
100455f0:	187b      	adds	r3, r7, r1
100455f2:	881b      	ldrh	r3, [r3, #0]
100455f4:	b2db      	uxtb	r3, r3
100455f6:	001a      	movs	r2, r3
100455f8:	68fb      	ldr	r3, [r7, #12]
100455fa:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
100455fc:	1dbb      	adds	r3, r7, #6
100455fe:	881b      	ldrh	r3, [r3, #0]
10045600:	b2da      	uxtb	r2, r3
10045602:	2380      	movs	r3, #128	@ 0x80
10045604:	045c      	lsls	r4, r3, #17
10045606:	230a      	movs	r3, #10
10045608:	18fb      	adds	r3, r7, r3
1004560a:	8819      	ldrh	r1, [r3, #0]
1004560c:	68f8      	ldr	r0, [r7, #12]
1004560e:	4b0c      	ldr	r3, [pc, #48]	@ (10045640 <HAL_I2C_Mem_Write_IT+0x140>)
10045610:	9300      	str	r3, [sp, #0]
10045612:	0023      	movs	r3, r4
10045614:	f001 fc7e 	bl	10046f14 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10045618:	68fb      	ldr	r3, [r7, #12]
1004561a:	2240      	movs	r2, #64	@ 0x40
1004561c:	2100      	movs	r1, #0
1004561e:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10045620:	68fb      	ldr	r3, [r7, #12]
10045622:	2101      	movs	r1, #1
10045624:	0018      	movs	r0, r3
10045626:	f001 fcaf 	bl	10046f88 <I2C_Enable_IRQ>

    return HAL_OK;
1004562a:	2300      	movs	r3, #0
1004562c:	e000      	b.n	10045630 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
1004562e:	2302      	movs	r3, #2
  }
}
10045630:	0018      	movs	r0, r3
10045632:	46bd      	mov	sp, r7
10045634:	b005      	add	sp, #20
10045636:	bd90      	pop	{r4, r7, pc}
10045638:	ffff0000 	.word	0xffff0000
1004563c:	10045909 	.word	0x10045909
10045640:	80002000 	.word	0x80002000

10045644 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10045644:	b590      	push	{r4, r7, lr}
10045646:	b087      	sub	sp, #28
10045648:	af02      	add	r7, sp, #8
1004564a:	60f8      	str	r0, [r7, #12]
1004564c:	000c      	movs	r4, r1
1004564e:	0010      	movs	r0, r2
10045650:	0019      	movs	r1, r3
10045652:	230a      	movs	r3, #10
10045654:	18fb      	adds	r3, r7, r3
10045656:	1c22      	adds	r2, r4, #0
10045658:	801a      	strh	r2, [r3, #0]
1004565a:	2308      	movs	r3, #8
1004565c:	18fb      	adds	r3, r7, r3
1004565e:	1c02      	adds	r2, r0, #0
10045660:	801a      	strh	r2, [r3, #0]
10045662:	1dbb      	adds	r3, r7, #6
10045664:	1c0a      	adds	r2, r1, #0
10045666:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10045668:	68fb      	ldr	r3, [r7, #12]
1004566a:	2241      	movs	r2, #65	@ 0x41
1004566c:	5c9b      	ldrb	r3, [r3, r2]
1004566e:	b2db      	uxtb	r3, r3
10045670:	2b20      	cmp	r3, #32
10045672:	d000      	beq.n	10045676 <HAL_I2C_Mem_Read_IT+0x32>
10045674:	e078      	b.n	10045768 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10045676:	6a3b      	ldr	r3, [r7, #32]
10045678:	2b00      	cmp	r3, #0
1004567a:	d004      	beq.n	10045686 <HAL_I2C_Mem_Read_IT+0x42>
1004567c:	2324      	movs	r3, #36	@ 0x24
1004567e:	18fb      	adds	r3, r7, r3
10045680:	881b      	ldrh	r3, [r3, #0]
10045682:	2b00      	cmp	r3, #0
10045684:	d105      	bne.n	10045692 <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10045686:	68fb      	ldr	r3, [r7, #12]
10045688:	2280      	movs	r2, #128	@ 0x80
1004568a:	0092      	lsls	r2, r2, #2
1004568c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
1004568e:	2301      	movs	r3, #1
10045690:	e06b      	b.n	1004576a <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10045692:	68fb      	ldr	r3, [r7, #12]
10045694:	681b      	ldr	r3, [r3, #0]
10045696:	699a      	ldr	r2, [r3, #24]
10045698:	2380      	movs	r3, #128	@ 0x80
1004569a:	021b      	lsls	r3, r3, #8
1004569c:	401a      	ands	r2, r3
1004569e:	2380      	movs	r3, #128	@ 0x80
100456a0:	021b      	lsls	r3, r3, #8
100456a2:	429a      	cmp	r2, r3
100456a4:	d101      	bne.n	100456aa <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
100456a6:	2302      	movs	r3, #2
100456a8:	e05f      	b.n	1004576a <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100456aa:	68fb      	ldr	r3, [r7, #12]
100456ac:	2240      	movs	r2, #64	@ 0x40
100456ae:	5c9b      	ldrb	r3, [r3, r2]
100456b0:	2b01      	cmp	r3, #1
100456b2:	d101      	bne.n	100456b8 <HAL_I2C_Mem_Read_IT+0x74>
100456b4:	2302      	movs	r3, #2
100456b6:	e058      	b.n	1004576a <HAL_I2C_Mem_Read_IT+0x126>
100456b8:	68fb      	ldr	r3, [r7, #12]
100456ba:	2240      	movs	r2, #64	@ 0x40
100456bc:	2101      	movs	r1, #1
100456be:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
100456c0:	68fb      	ldr	r3, [r7, #12]
100456c2:	2241      	movs	r2, #65	@ 0x41
100456c4:	2122      	movs	r1, #34	@ 0x22
100456c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
100456c8:	68fb      	ldr	r3, [r7, #12]
100456ca:	2242      	movs	r2, #66	@ 0x42
100456cc:	2140      	movs	r1, #64	@ 0x40
100456ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
100456d0:	68fb      	ldr	r3, [r7, #12]
100456d2:	2200      	movs	r2, #0
100456d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
100456d6:	68fb      	ldr	r3, [r7, #12]
100456d8:	6a3a      	ldr	r2, [r7, #32]
100456da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
100456dc:	68fb      	ldr	r3, [r7, #12]
100456de:	2224      	movs	r2, #36	@ 0x24
100456e0:	18ba      	adds	r2, r7, r2
100456e2:	8812      	ldrh	r2, [r2, #0]
100456e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100456e6:	68fb      	ldr	r3, [r7, #12]
100456e8:	4a22      	ldr	r2, [pc, #136]	@ (10045774 <HAL_I2C_Mem_Read_IT+0x130>)
100456ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
100456ec:	68fb      	ldr	r3, [r7, #12]
100456ee:	4a22      	ldr	r2, [pc, #136]	@ (10045778 <HAL_I2C_Mem_Read_IT+0x134>)
100456f0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
100456f2:	230a      	movs	r3, #10
100456f4:	18fb      	adds	r3, r7, r3
100456f6:	881a      	ldrh	r2, [r3, #0]
100456f8:	68fb      	ldr	r3, [r7, #12]
100456fa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
100456fc:	1dbb      	adds	r3, r7, #6
100456fe:	881b      	ldrh	r3, [r3, #0]
10045700:	2b01      	cmp	r3, #1
10045702:	d10b      	bne.n	1004571c <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10045704:	2308      	movs	r3, #8
10045706:	18fb      	adds	r3, r7, r3
10045708:	881b      	ldrh	r3, [r3, #0]
1004570a:	b2da      	uxtb	r2, r3
1004570c:	68fb      	ldr	r3, [r7, #12]
1004570e:	681b      	ldr	r3, [r3, #0]
10045710:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10045712:	68fb      	ldr	r3, [r7, #12]
10045714:	2201      	movs	r2, #1
10045716:	4252      	negs	r2, r2
10045718:	651a      	str	r2, [r3, #80]	@ 0x50
1004571a:	e00e      	b.n	1004573a <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
1004571c:	2108      	movs	r1, #8
1004571e:	187b      	adds	r3, r7, r1
10045720:	881b      	ldrh	r3, [r3, #0]
10045722:	0a1b      	lsrs	r3, r3, #8
10045724:	b29b      	uxth	r3, r3
10045726:	b2da      	uxtb	r2, r3
10045728:	68fb      	ldr	r3, [r7, #12]
1004572a:	681b      	ldr	r3, [r3, #0]
1004572c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
1004572e:	187b      	adds	r3, r7, r1
10045730:	881b      	ldrh	r3, [r3, #0]
10045732:	b2db      	uxtb	r3, r3
10045734:	001a      	movs	r2, r3
10045736:	68fb      	ldr	r3, [r7, #12]
10045738:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
1004573a:	1dbb      	adds	r3, r7, #6
1004573c:	881b      	ldrh	r3, [r3, #0]
1004573e:	b2da      	uxtb	r2, r3
10045740:	230a      	movs	r3, #10
10045742:	18fb      	adds	r3, r7, r3
10045744:	8819      	ldrh	r1, [r3, #0]
10045746:	68f8      	ldr	r0, [r7, #12]
10045748:	4b0c      	ldr	r3, [pc, #48]	@ (1004577c <HAL_I2C_Mem_Read_IT+0x138>)
1004574a:	9300      	str	r3, [sp, #0]
1004574c:	2300      	movs	r3, #0
1004574e:	f001 fbe1 	bl	10046f14 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10045752:	68fb      	ldr	r3, [r7, #12]
10045754:	2240      	movs	r2, #64	@ 0x40
10045756:	2100      	movs	r1, #0
10045758:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1004575a:	68fb      	ldr	r3, [r7, #12]
1004575c:	2101      	movs	r1, #1
1004575e:	0018      	movs	r0, r3
10045760:	f001 fc12 	bl	10046f88 <I2C_Enable_IRQ>

    return HAL_OK;
10045764:	2300      	movs	r3, #0
10045766:	e000      	b.n	1004576a <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
10045768:	2302      	movs	r3, #2
  }
}
1004576a:	0018      	movs	r0, r3
1004576c:	46bd      	mov	sp, r7
1004576e:	b005      	add	sp, #20
10045770:	bd90      	pop	{r4, r7, pc}
10045772:	46c0      	nop			@ (mov r8, r8)
10045774:	ffff0000 	.word	0xffff0000
10045778:	10045909 	.word	0x10045909
1004577c:	80002000 	.word	0x80002000

10045780 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
10045780:	b580      	push	{r7, lr}
10045782:	b084      	sub	sp, #16
10045784:	af00      	add	r7, sp, #0
10045786:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10045788:	687b      	ldr	r3, [r7, #4]
1004578a:	681b      	ldr	r3, [r3, #0]
1004578c:	699b      	ldr	r3, [r3, #24]
1004578e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10045790:	687b      	ldr	r3, [r7, #4]
10045792:	681b      	ldr	r3, [r3, #0]
10045794:	681b      	ldr	r3, [r3, #0]
10045796:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10045798:	687b      	ldr	r3, [r7, #4]
1004579a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1004579c:	2b00      	cmp	r3, #0
1004579e:	d005      	beq.n	100457ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
100457a0:	687b      	ldr	r3, [r7, #4]
100457a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100457a4:	68ba      	ldr	r2, [r7, #8]
100457a6:	68f9      	ldr	r1, [r7, #12]
100457a8:	6878      	ldr	r0, [r7, #4]
100457aa:	4798      	blx	r3
  }
}
100457ac:	46c0      	nop			@ (mov r8, r8)
100457ae:	46bd      	mov	sp, r7
100457b0:	b004      	add	sp, #16
100457b2:	bd80      	pop	{r7, pc}

100457b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
100457b4:	b580      	push	{r7, lr}
100457b6:	b086      	sub	sp, #24
100457b8:	af00      	add	r7, sp, #0
100457ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100457bc:	687b      	ldr	r3, [r7, #4]
100457be:	681b      	ldr	r3, [r3, #0]
100457c0:	699b      	ldr	r3, [r3, #24]
100457c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
100457c4:	687b      	ldr	r3, [r7, #4]
100457c6:	681b      	ldr	r3, [r3, #0]
100457c8:	681b      	ldr	r3, [r3, #0]
100457ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
100457cc:	697b      	ldr	r3, [r7, #20]
100457ce:	0a1b      	lsrs	r3, r3, #8
100457d0:	001a      	movs	r2, r3
100457d2:	2301      	movs	r3, #1
100457d4:	4013      	ands	r3, r2
100457d6:	d010      	beq.n	100457fa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
100457d8:	693b      	ldr	r3, [r7, #16]
100457da:	09db      	lsrs	r3, r3, #7
100457dc:	001a      	movs	r2, r3
100457de:	2301      	movs	r3, #1
100457e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
100457e2:	d00a      	beq.n	100457fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
100457e4:	687b      	ldr	r3, [r7, #4]
100457e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100457e8:	2201      	movs	r2, #1
100457ea:	431a      	orrs	r2, r3
100457ec:	687b      	ldr	r3, [r7, #4]
100457ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
100457f0:	687b      	ldr	r3, [r7, #4]
100457f2:	681b      	ldr	r3, [r3, #0]
100457f4:	2280      	movs	r2, #128	@ 0x80
100457f6:	0052      	lsls	r2, r2, #1
100457f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
100457fa:	697b      	ldr	r3, [r7, #20]
100457fc:	0a9b      	lsrs	r3, r3, #10
100457fe:	001a      	movs	r2, r3
10045800:	2301      	movs	r3, #1
10045802:	4013      	ands	r3, r2
10045804:	d010      	beq.n	10045828 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10045806:	693b      	ldr	r3, [r7, #16]
10045808:	09db      	lsrs	r3, r3, #7
1004580a:	001a      	movs	r2, r3
1004580c:	2301      	movs	r3, #1
1004580e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10045810:	d00a      	beq.n	10045828 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10045812:	687b      	ldr	r3, [r7, #4]
10045814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045816:	2208      	movs	r2, #8
10045818:	431a      	orrs	r2, r3
1004581a:	687b      	ldr	r3, [r7, #4]
1004581c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
1004581e:	687b      	ldr	r3, [r7, #4]
10045820:	681b      	ldr	r3, [r3, #0]
10045822:	2280      	movs	r2, #128	@ 0x80
10045824:	00d2      	lsls	r2, r2, #3
10045826:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10045828:	697b      	ldr	r3, [r7, #20]
1004582a:	0a5b      	lsrs	r3, r3, #9
1004582c:	001a      	movs	r2, r3
1004582e:	2301      	movs	r3, #1
10045830:	4013      	ands	r3, r2
10045832:	d010      	beq.n	10045856 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10045834:	693b      	ldr	r3, [r7, #16]
10045836:	09db      	lsrs	r3, r3, #7
10045838:	001a      	movs	r2, r3
1004583a:	2301      	movs	r3, #1
1004583c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
1004583e:	d00a      	beq.n	10045856 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10045840:	687b      	ldr	r3, [r7, #4]
10045842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045844:	2202      	movs	r2, #2
10045846:	431a      	orrs	r2, r3
10045848:	687b      	ldr	r3, [r7, #4]
1004584a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
1004584c:	687b      	ldr	r3, [r7, #4]
1004584e:	681b      	ldr	r3, [r3, #0]
10045850:	2280      	movs	r2, #128	@ 0x80
10045852:	0092      	lsls	r2, r2, #2
10045854:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10045856:	687b      	ldr	r3, [r7, #4]
10045858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004585a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
1004585c:	68fb      	ldr	r3, [r7, #12]
1004585e:	220b      	movs	r2, #11
10045860:	4013      	ands	r3, r2
10045862:	d005      	beq.n	10045870 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
10045864:	68fa      	ldr	r2, [r7, #12]
10045866:	687b      	ldr	r3, [r7, #4]
10045868:	0011      	movs	r1, r2
1004586a:	0018      	movs	r0, r3
1004586c:	f001 f9e6 	bl	10046c3c <I2C_ITError>
  }
}
10045870:	46c0      	nop			@ (mov r8, r8)
10045872:	46bd      	mov	sp, r7
10045874:	b006      	add	sp, #24
10045876:	bd80      	pop	{r7, pc}

10045878 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10045878:	b580      	push	{r7, lr}
1004587a:	b082      	sub	sp, #8
1004587c:	af00      	add	r7, sp, #0
1004587e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
10045880:	46c0      	nop			@ (mov r8, r8)
10045882:	46bd      	mov	sp, r7
10045884:	b002      	add	sp, #8
10045886:	bd80      	pop	{r7, pc}

10045888 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10045888:	b580      	push	{r7, lr}
1004588a:	b082      	sub	sp, #8
1004588c:	af00      	add	r7, sp, #0
1004588e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
10045890:	46c0      	nop			@ (mov r8, r8)
10045892:	46bd      	mov	sp, r7
10045894:	b002      	add	sp, #8
10045896:	bd80      	pop	{r7, pc}

10045898 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10045898:	b580      	push	{r7, lr}
1004589a:	b082      	sub	sp, #8
1004589c:	af00      	add	r7, sp, #0
1004589e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
100458a0:	46c0      	nop			@ (mov r8, r8)
100458a2:	46bd      	mov	sp, r7
100458a4:	b002      	add	sp, #8
100458a6:	bd80      	pop	{r7, pc}

100458a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100458a8:	b580      	push	{r7, lr}
100458aa:	b082      	sub	sp, #8
100458ac:	af00      	add	r7, sp, #0
100458ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
100458b0:	46c0      	nop			@ (mov r8, r8)
100458b2:	46bd      	mov	sp, r7
100458b4:	b002      	add	sp, #8
100458b6:	bd80      	pop	{r7, pc}

100458b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
100458b8:	b580      	push	{r7, lr}
100458ba:	b082      	sub	sp, #8
100458bc:	af00      	add	r7, sp, #0
100458be:	6078      	str	r0, [r7, #4]
100458c0:	0008      	movs	r0, r1
100458c2:	0011      	movs	r1, r2
100458c4:	1cfb      	adds	r3, r7, #3
100458c6:	1c02      	adds	r2, r0, #0
100458c8:	701a      	strb	r2, [r3, #0]
100458ca:	003b      	movs	r3, r7
100458cc:	1c0a      	adds	r2, r1, #0
100458ce:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
100458d0:	46c0      	nop			@ (mov r8, r8)
100458d2:	46bd      	mov	sp, r7
100458d4:	b002      	add	sp, #8
100458d6:	bd80      	pop	{r7, pc}

100458d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
100458d8:	b580      	push	{r7, lr}
100458da:	b082      	sub	sp, #8
100458dc:	af00      	add	r7, sp, #0
100458de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
100458e0:	46c0      	nop			@ (mov r8, r8)
100458e2:	46bd      	mov	sp, r7
100458e4:	b002      	add	sp, #8
100458e6:	bd80      	pop	{r7, pc}

100458e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
100458e8:	b580      	push	{r7, lr}
100458ea:	b082      	sub	sp, #8
100458ec:	af00      	add	r7, sp, #0
100458ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
100458f0:	46c0      	nop			@ (mov r8, r8)
100458f2:	46bd      	mov	sp, r7
100458f4:	b002      	add	sp, #8
100458f6:	bd80      	pop	{r7, pc}

100458f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
100458f8:	b580      	push	{r7, lr}
100458fa:	b082      	sub	sp, #8
100458fc:	af00      	add	r7, sp, #0
100458fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10045900:	46c0      	nop			@ (mov r8, r8)
10045902:	46bd      	mov	sp, r7
10045904:	b002      	add	sp, #8
10045906:	bd80      	pop	{r7, pc}

10045908 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
10045908:	b590      	push	{r4, r7, lr}
1004590a:	b089      	sub	sp, #36	@ 0x24
1004590c:	af02      	add	r7, sp, #8
1004590e:	60f8      	str	r0, [r7, #12]
10045910:	60b9      	str	r1, [r7, #8]
10045912:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10045914:	4b97      	ldr	r3, [pc, #604]	@ (10045b74 <I2C_Mem_ISR_IT+0x26c>)
10045916:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10045918:	68bb      	ldr	r3, [r7, #8]
1004591a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
1004591c:	68fb      	ldr	r3, [r7, #12]
1004591e:	2240      	movs	r2, #64	@ 0x40
10045920:	5c9b      	ldrb	r3, [r3, r2]
10045922:	2b01      	cmp	r3, #1
10045924:	d101      	bne.n	1004592a <I2C_Mem_ISR_IT+0x22>
10045926:	2302      	movs	r3, #2
10045928:	e11f      	b.n	10045b6a <I2C_Mem_ISR_IT+0x262>
1004592a:	68fb      	ldr	r3, [r7, #12]
1004592c:	2240      	movs	r2, #64	@ 0x40
1004592e:	2101      	movs	r1, #1
10045930:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10045932:	693b      	ldr	r3, [r7, #16]
10045934:	091b      	lsrs	r3, r3, #4
10045936:	001a      	movs	r2, r3
10045938:	2301      	movs	r3, #1
1004593a:	4013      	ands	r3, r2
1004593c:	d014      	beq.n	10045968 <I2C_Mem_ISR_IT+0x60>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1004593e:	687b      	ldr	r3, [r7, #4]
10045940:	091b      	lsrs	r3, r3, #4
10045942:	001a      	movs	r2, r3
10045944:	2301      	movs	r3, #1
10045946:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10045948:	d00e      	beq.n	10045968 <I2C_Mem_ISR_IT+0x60>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004594a:	68fb      	ldr	r3, [r7, #12]
1004594c:	681b      	ldr	r3, [r3, #0]
1004594e:	2210      	movs	r2, #16
10045950:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045952:	68fb      	ldr	r3, [r7, #12]
10045954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045956:	2204      	movs	r2, #4
10045958:	431a      	orrs	r2, r3
1004595a:	68fb      	ldr	r3, [r7, #12]
1004595c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1004595e:	68fb      	ldr	r3, [r7, #12]
10045960:	0018      	movs	r0, r3
10045962:	f001 fa96 	bl	10046e92 <I2C_Flush_TXDR>
10045966:	e0e9      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10045968:	693b      	ldr	r3, [r7, #16]
1004596a:	089b      	lsrs	r3, r3, #2
1004596c:	001a      	movs	r2, r3
1004596e:	2301      	movs	r3, #1
10045970:	4013      	ands	r3, r2
10045972:	d023      	beq.n	100459bc <I2C_Mem_ISR_IT+0xb4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10045974:	687b      	ldr	r3, [r7, #4]
10045976:	089b      	lsrs	r3, r3, #2
10045978:	001a      	movs	r2, r3
1004597a:	2301      	movs	r3, #1
1004597c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
1004597e:	d01d      	beq.n	100459bc <I2C_Mem_ISR_IT+0xb4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10045980:	693b      	ldr	r3, [r7, #16]
10045982:	2204      	movs	r2, #4
10045984:	4393      	bics	r3, r2
10045986:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10045988:	68fb      	ldr	r3, [r7, #12]
1004598a:	681b      	ldr	r3, [r3, #0]
1004598c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004598e:	68fb      	ldr	r3, [r7, #12]
10045990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045992:	b2d2      	uxtb	r2, r2
10045994:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10045996:	68fb      	ldr	r3, [r7, #12]
10045998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004599a:	1c5a      	adds	r2, r3, #1
1004599c:	68fb      	ldr	r3, [r7, #12]
1004599e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
100459a0:	68fb      	ldr	r3, [r7, #12]
100459a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100459a4:	3b01      	subs	r3, #1
100459a6:	b29a      	uxth	r2, r3
100459a8:	68fb      	ldr	r3, [r7, #12]
100459aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
100459ac:	68fb      	ldr	r3, [r7, #12]
100459ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100459b0:	b29b      	uxth	r3, r3
100459b2:	3b01      	subs	r3, #1
100459b4:	b29a      	uxth	r2, r3
100459b6:	68fb      	ldr	r3, [r7, #12]
100459b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
100459ba:	e0bf      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100459bc:	693b      	ldr	r3, [r7, #16]
100459be:	085b      	lsrs	r3, r3, #1
100459c0:	001a      	movs	r2, r3
100459c2:	2301      	movs	r3, #1
100459c4:	4013      	ands	r3, r2
100459c6:	d02c      	beq.n	10045a22 <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
100459c8:	687b      	ldr	r3, [r7, #4]
100459ca:	085b      	lsrs	r3, r3, #1
100459cc:	001a      	movs	r2, r3
100459ce:	2301      	movs	r3, #1
100459d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100459d2:	d026      	beq.n	10045a22 <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
100459d4:	68fb      	ldr	r3, [r7, #12]
100459d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100459d8:	3301      	adds	r3, #1
100459da:	d118      	bne.n	10045a0e <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
100459dc:	68fb      	ldr	r3, [r7, #12]
100459de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100459e0:	781a      	ldrb	r2, [r3, #0]
100459e2:	68fb      	ldr	r3, [r7, #12]
100459e4:	681b      	ldr	r3, [r3, #0]
100459e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100459e8:	68fb      	ldr	r3, [r7, #12]
100459ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100459ec:	1c5a      	adds	r2, r3, #1
100459ee:	68fb      	ldr	r3, [r7, #12]
100459f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
100459f2:	68fb      	ldr	r3, [r7, #12]
100459f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100459f6:	3b01      	subs	r3, #1
100459f8:	b29a      	uxth	r2, r3
100459fa:	68fb      	ldr	r3, [r7, #12]
100459fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100459fe:	68fb      	ldr	r3, [r7, #12]
10045a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045a02:	b29b      	uxth	r3, r3
10045a04:	3b01      	subs	r3, #1
10045a06:	b29a      	uxth	r2, r3
10045a08:	68fb      	ldr	r3, [r7, #12]
10045a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10045a0c:	e096      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
10045a0e:	68fb      	ldr	r3, [r7, #12]
10045a10:	681b      	ldr	r3, [r3, #0]
10045a12:	68fa      	ldr	r2, [r7, #12]
10045a14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10045a16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10045a18:	68fb      	ldr	r3, [r7, #12]
10045a1a:	2201      	movs	r2, #1
10045a1c:	4252      	negs	r2, r2
10045a1e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10045a20:	e08c      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10045a22:	693b      	ldr	r3, [r7, #16]
10045a24:	09db      	lsrs	r3, r3, #7
10045a26:	001a      	movs	r2, r3
10045a28:	2301      	movs	r3, #1
10045a2a:	4013      	ands	r3, r2
10045a2c:	d03e      	beq.n	10045aac <I2C_Mem_ISR_IT+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10045a2e:	687b      	ldr	r3, [r7, #4]
10045a30:	099b      	lsrs	r3, r3, #6
10045a32:	001a      	movs	r2, r3
10045a34:	2301      	movs	r3, #1
10045a36:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10045a38:	d038      	beq.n	10045aac <I2C_Mem_ISR_IT+0x1a4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10045a3a:	68fb      	ldr	r3, [r7, #12]
10045a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045a3e:	b29b      	uxth	r3, r3
10045a40:	2b00      	cmp	r3, #0
10045a42:	d02c      	beq.n	10045a9e <I2C_Mem_ISR_IT+0x196>
10045a44:	68fb      	ldr	r3, [r7, #12]
10045a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045a48:	2b00      	cmp	r3, #0
10045a4a:	d128      	bne.n	10045a9e <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10045a4c:	68fb      	ldr	r3, [r7, #12]
10045a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045a50:	b29b      	uxth	r3, r3
10045a52:	2bff      	cmp	r3, #255	@ 0xff
10045a54:	d910      	bls.n	10045a78 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10045a56:	68fb      	ldr	r3, [r7, #12]
10045a58:	22ff      	movs	r2, #255	@ 0xff
10045a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10045a5c:	68fb      	ldr	r3, [r7, #12]
10045a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10045a60:	b299      	uxth	r1, r3
10045a62:	68fb      	ldr	r3, [r7, #12]
10045a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045a66:	b2da      	uxtb	r2, r3
10045a68:	2380      	movs	r3, #128	@ 0x80
10045a6a:	045b      	lsls	r3, r3, #17
10045a6c:	68f8      	ldr	r0, [r7, #12]
10045a6e:	2400      	movs	r4, #0
10045a70:	9400      	str	r4, [sp, #0]
10045a72:	f001 fa4f 	bl	10046f14 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10045a76:	e018      	b.n	10045aaa <I2C_Mem_ISR_IT+0x1a2>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10045a78:	68fb      	ldr	r3, [r7, #12]
10045a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045a7c:	b29a      	uxth	r2, r3
10045a7e:	68fb      	ldr	r3, [r7, #12]
10045a80:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10045a82:	68fb      	ldr	r3, [r7, #12]
10045a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10045a86:	b299      	uxth	r1, r3
10045a88:	68fb      	ldr	r3, [r7, #12]
10045a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045a8c:	b2da      	uxtb	r2, r3
10045a8e:	2380      	movs	r3, #128	@ 0x80
10045a90:	049b      	lsls	r3, r3, #18
10045a92:	68f8      	ldr	r0, [r7, #12]
10045a94:	2400      	movs	r4, #0
10045a96:	9400      	str	r4, [sp, #0]
10045a98:	f001 fa3c 	bl	10046f14 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10045a9c:	e005      	b.n	10045aaa <I2C_Mem_ISR_IT+0x1a2>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10045a9e:	68fb      	ldr	r3, [r7, #12]
10045aa0:	2140      	movs	r1, #64	@ 0x40
10045aa2:	0018      	movs	r0, r3
10045aa4:	f001 f8ca 	bl	10046c3c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10045aa8:	e048      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
10045aaa:	e047      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10045aac:	693b      	ldr	r3, [r7, #16]
10045aae:	099b      	lsrs	r3, r3, #6
10045ab0:	001a      	movs	r2, r3
10045ab2:	2301      	movs	r3, #1
10045ab4:	4013      	ands	r3, r2
10045ab6:	d041      	beq.n	10045b3c <I2C_Mem_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10045ab8:	687b      	ldr	r3, [r7, #4]
10045aba:	099b      	lsrs	r3, r3, #6
10045abc:	001a      	movs	r2, r3
10045abe:	2301      	movs	r3, #1
10045ac0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10045ac2:	d03b      	beq.n	10045b3c <I2C_Mem_ISR_IT+0x234>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10045ac4:	68fb      	ldr	r3, [r7, #12]
10045ac6:	2101      	movs	r1, #1
10045ac8:	0018      	movs	r0, r3
10045aca:	f001 fae7 	bl	1004709c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
10045ace:	68fb      	ldr	r3, [r7, #12]
10045ad0:	2102      	movs	r1, #2
10045ad2:	0018      	movs	r0, r3
10045ad4:	f001 fa58 	bl	10046f88 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045ad8:	68fb      	ldr	r3, [r7, #12]
10045ada:	2241      	movs	r2, #65	@ 0x41
10045adc:	5c9b      	ldrb	r3, [r3, r2]
10045ade:	b2db      	uxtb	r3, r3
10045ae0:	2b22      	cmp	r3, #34	@ 0x22
10045ae2:	d101      	bne.n	10045ae8 <I2C_Mem_ISR_IT+0x1e0>
    {
      direction = I2C_GENERATE_START_READ;
10045ae4:	4b24      	ldr	r3, [pc, #144]	@ (10045b78 <I2C_Mem_ISR_IT+0x270>)
10045ae6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10045ae8:	68fb      	ldr	r3, [r7, #12]
10045aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045aec:	b29b      	uxth	r3, r3
10045aee:	2bff      	cmp	r3, #255	@ 0xff
10045af0:	d911      	bls.n	10045b16 <I2C_Mem_ISR_IT+0x20e>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10045af2:	68fb      	ldr	r3, [r7, #12]
10045af4:	22ff      	movs	r2, #255	@ 0xff
10045af6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10045af8:	68fb      	ldr	r3, [r7, #12]
10045afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10045afc:	b299      	uxth	r1, r3
10045afe:	68fb      	ldr	r3, [r7, #12]
10045b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045b02:	b2da      	uxtb	r2, r3
10045b04:	2380      	movs	r3, #128	@ 0x80
10045b06:	045c      	lsls	r4, r3, #17
10045b08:	68f8      	ldr	r0, [r7, #12]
10045b0a:	697b      	ldr	r3, [r7, #20]
10045b0c:	9300      	str	r3, [sp, #0]
10045b0e:	0023      	movs	r3, r4
10045b10:	f001 fa00 	bl	10046f14 <I2C_TransferConfig>
10045b14:	e012      	b.n	10045b3c <I2C_Mem_ISR_IT+0x234>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10045b16:	68fb      	ldr	r3, [r7, #12]
10045b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045b1a:	b29a      	uxth	r2, r3
10045b1c:	68fb      	ldr	r3, [r7, #12]
10045b1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10045b20:	68fb      	ldr	r3, [r7, #12]
10045b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10045b24:	b299      	uxth	r1, r3
10045b26:	68fb      	ldr	r3, [r7, #12]
10045b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045b2a:	b2da      	uxtb	r2, r3
10045b2c:	2380      	movs	r3, #128	@ 0x80
10045b2e:	049c      	lsls	r4, r3, #18
10045b30:	68f8      	ldr	r0, [r7, #12]
10045b32:	697b      	ldr	r3, [r7, #20]
10045b34:	9300      	str	r3, [sp, #0]
10045b36:	0023      	movs	r3, r4
10045b38:	f001 f9ec 	bl	10046f14 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10045b3c:	693b      	ldr	r3, [r7, #16]
10045b3e:	095b      	lsrs	r3, r3, #5
10045b40:	001a      	movs	r2, r3
10045b42:	2301      	movs	r3, #1
10045b44:	4013      	ands	r3, r2
10045b46:	d00b      	beq.n	10045b60 <I2C_Mem_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10045b48:	687b      	ldr	r3, [r7, #4]
10045b4a:	095b      	lsrs	r3, r3, #5
10045b4c:	001a      	movs	r2, r3
10045b4e:	2301      	movs	r3, #1
10045b50:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10045b52:	d005      	beq.n	10045b60 <I2C_Mem_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
10045b54:	693a      	ldr	r2, [r7, #16]
10045b56:	68fb      	ldr	r3, [r7, #12]
10045b58:	0011      	movs	r1, r2
10045b5a:	0018      	movs	r0, r3
10045b5c:	f000 fdb2 	bl	100466c4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045b60:	68fb      	ldr	r3, [r7, #12]
10045b62:	2240      	movs	r2, #64	@ 0x40
10045b64:	2100      	movs	r1, #0
10045b66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045b68:	2300      	movs	r3, #0
}
10045b6a:	0018      	movs	r0, r3
10045b6c:	46bd      	mov	sp, r7
10045b6e:	b007      	add	sp, #28
10045b70:	bd90      	pop	{r4, r7, pc}
10045b72:	46c0      	nop			@ (mov r8, r8)
10045b74:	80002000 	.word	0x80002000
10045b78:	80002400 	.word	0x80002400

10045b7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10045b7c:	b580      	push	{r7, lr}
10045b7e:	b086      	sub	sp, #24
10045b80:	af00      	add	r7, sp, #0
10045b82:	60f8      	str	r0, [r7, #12]
10045b84:	60b9      	str	r1, [r7, #8]
10045b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10045b88:	68fb      	ldr	r3, [r7, #12]
10045b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045b8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10045b8e:	68bb      	ldr	r3, [r7, #8]
10045b90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
10045b92:	68fb      	ldr	r3, [r7, #12]
10045b94:	2240      	movs	r2, #64	@ 0x40
10045b96:	5c9b      	ldrb	r3, [r3, r2]
10045b98:	2b01      	cmp	r3, #1
10045b9a:	d101      	bne.n	10045ba0 <I2C_Slave_ISR_IT+0x24>
10045b9c:	2302      	movs	r3, #2
10045b9e:	e0fb      	b.n	10045d98 <I2C_Slave_ISR_IT+0x21c>
10045ba0:	68fb      	ldr	r3, [r7, #12]
10045ba2:	2240      	movs	r2, #64	@ 0x40
10045ba4:	2101      	movs	r1, #1
10045ba6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10045ba8:	693b      	ldr	r3, [r7, #16]
10045baa:	095b      	lsrs	r3, r3, #5
10045bac:	001a      	movs	r2, r3
10045bae:	2301      	movs	r3, #1
10045bb0:	4013      	ands	r3, r2
10045bb2:	d00c      	beq.n	10045bce <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10045bb4:	687b      	ldr	r3, [r7, #4]
10045bb6:	095b      	lsrs	r3, r3, #5
10045bb8:	001a      	movs	r2, r3
10045bba:	2301      	movs	r3, #1
10045bbc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10045bbe:	d006      	beq.n	10045bce <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10045bc0:	693a      	ldr	r2, [r7, #16]
10045bc2:	68fb      	ldr	r3, [r7, #12]
10045bc4:	0011      	movs	r1, r2
10045bc6:	0018      	movs	r0, r3
10045bc8:	f000 fe4e 	bl	10046868 <I2C_ITSlaveCplt>
10045bcc:	e0df      	b.n	10045d8e <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10045bce:	693b      	ldr	r3, [r7, #16]
10045bd0:	091b      	lsrs	r3, r3, #4
10045bd2:	001a      	movs	r2, r3
10045bd4:	2301      	movs	r3, #1
10045bd6:	4013      	ands	r3, r2
10045bd8:	d054      	beq.n	10045c84 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10045bda:	687b      	ldr	r3, [r7, #4]
10045bdc:	091b      	lsrs	r3, r3, #4
10045bde:	001a      	movs	r2, r3
10045be0:	2301      	movs	r3, #1
10045be2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10045be4:	d04e      	beq.n	10045c84 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10045be6:	68fb      	ldr	r3, [r7, #12]
10045be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045bea:	b29b      	uxth	r3, r3
10045bec:	2b00      	cmp	r3, #0
10045bee:	d12d      	bne.n	10045c4c <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10045bf0:	68fb      	ldr	r3, [r7, #12]
10045bf2:	2241      	movs	r2, #65	@ 0x41
10045bf4:	5c9b      	ldrb	r3, [r3, r2]
10045bf6:	b2db      	uxtb	r3, r3
10045bf8:	2b28      	cmp	r3, #40	@ 0x28
10045bfa:	d10b      	bne.n	10045c14 <I2C_Slave_ISR_IT+0x98>
10045bfc:	697a      	ldr	r2, [r7, #20]
10045bfe:	2380      	movs	r3, #128	@ 0x80
10045c00:	049b      	lsls	r3, r3, #18
10045c02:	429a      	cmp	r2, r3
10045c04:	d106      	bne.n	10045c14 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10045c06:	693a      	ldr	r2, [r7, #16]
10045c08:	68fb      	ldr	r3, [r7, #12]
10045c0a:	0011      	movs	r1, r2
10045c0c:	0018      	movs	r0, r3
10045c0e:	f000 ffbb 	bl	10046b88 <I2C_ITListenCplt>
10045c12:	e036      	b.n	10045c82 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10045c14:	68fb      	ldr	r3, [r7, #12]
10045c16:	2241      	movs	r2, #65	@ 0x41
10045c18:	5c9b      	ldrb	r3, [r3, r2]
10045c1a:	b2db      	uxtb	r3, r3
10045c1c:	2b29      	cmp	r3, #41	@ 0x29
10045c1e:	d110      	bne.n	10045c42 <I2C_Slave_ISR_IT+0xc6>
10045c20:	697b      	ldr	r3, [r7, #20]
10045c22:	4a5f      	ldr	r2, [pc, #380]	@ (10045da0 <I2C_Slave_ISR_IT+0x224>)
10045c24:	4293      	cmp	r3, r2
10045c26:	d00c      	beq.n	10045c42 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045c28:	68fb      	ldr	r3, [r7, #12]
10045c2a:	681b      	ldr	r3, [r3, #0]
10045c2c:	2210      	movs	r2, #16
10045c2e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10045c30:	68fb      	ldr	r3, [r7, #12]
10045c32:	0018      	movs	r0, r3
10045c34:	f001 f92d 	bl	10046e92 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10045c38:	68fb      	ldr	r3, [r7, #12]
10045c3a:	0018      	movs	r0, r3
10045c3c:	f000 fcdc 	bl	100465f8 <I2C_ITSlaveSeqCplt>
10045c40:	e01f      	b.n	10045c82 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045c42:	68fb      	ldr	r3, [r7, #12]
10045c44:	681b      	ldr	r3, [r3, #0]
10045c46:	2210      	movs	r2, #16
10045c48:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10045c4a:	e09d      	b.n	10045d88 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045c4c:	68fb      	ldr	r3, [r7, #12]
10045c4e:	681b      	ldr	r3, [r3, #0]
10045c50:	2210      	movs	r2, #16
10045c52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045c54:	68fb      	ldr	r3, [r7, #12]
10045c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045c58:	2204      	movs	r2, #4
10045c5a:	431a      	orrs	r2, r3
10045c5c:	68fb      	ldr	r3, [r7, #12]
10045c5e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10045c60:	697b      	ldr	r3, [r7, #20]
10045c62:	2b00      	cmp	r3, #0
10045c64:	d005      	beq.n	10045c72 <I2C_Slave_ISR_IT+0xf6>
10045c66:	697a      	ldr	r2, [r7, #20]
10045c68:	2380      	movs	r3, #128	@ 0x80
10045c6a:	045b      	lsls	r3, r3, #17
10045c6c:	429a      	cmp	r2, r3
10045c6e:	d000      	beq.n	10045c72 <I2C_Slave_ISR_IT+0xf6>
10045c70:	e08a      	b.n	10045d88 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10045c72:	68fb      	ldr	r3, [r7, #12]
10045c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045c76:	68fb      	ldr	r3, [r7, #12]
10045c78:	0011      	movs	r1, r2
10045c7a:	0018      	movs	r0, r3
10045c7c:	f000 ffde 	bl	10046c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
10045c80:	e082      	b.n	10045d88 <I2C_Slave_ISR_IT+0x20c>
10045c82:	e081      	b.n	10045d88 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10045c84:	693b      	ldr	r3, [r7, #16]
10045c86:	089b      	lsrs	r3, r3, #2
10045c88:	001a      	movs	r2, r3
10045c8a:	2301      	movs	r3, #1
10045c8c:	4013      	ands	r3, r2
10045c8e:	d031      	beq.n	10045cf4 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10045c90:	687b      	ldr	r3, [r7, #4]
10045c92:	089b      	lsrs	r3, r3, #2
10045c94:	001a      	movs	r2, r3
10045c96:	2301      	movs	r3, #1
10045c98:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10045c9a:	d02b      	beq.n	10045cf4 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
10045c9c:	68fb      	ldr	r3, [r7, #12]
10045c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045ca0:	b29b      	uxth	r3, r3
10045ca2:	2b00      	cmp	r3, #0
10045ca4:	d018      	beq.n	10045cd8 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10045ca6:	68fb      	ldr	r3, [r7, #12]
10045ca8:	681b      	ldr	r3, [r3, #0]
10045caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045cac:	68fb      	ldr	r3, [r7, #12]
10045cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045cb0:	b2d2      	uxtb	r2, r2
10045cb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10045cb4:	68fb      	ldr	r3, [r7, #12]
10045cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045cb8:	1c5a      	adds	r2, r3, #1
10045cba:	68fb      	ldr	r3, [r7, #12]
10045cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10045cbe:	68fb      	ldr	r3, [r7, #12]
10045cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045cc2:	3b01      	subs	r3, #1
10045cc4:	b29a      	uxth	r2, r3
10045cc6:	68fb      	ldr	r3, [r7, #12]
10045cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10045cca:	68fb      	ldr	r3, [r7, #12]
10045ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045cce:	b29b      	uxth	r3, r3
10045cd0:	3b01      	subs	r3, #1
10045cd2:	b29a      	uxth	r2, r3
10045cd4:	68fb      	ldr	r3, [r7, #12]
10045cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10045cd8:	68fb      	ldr	r3, [r7, #12]
10045cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045cdc:	b29b      	uxth	r3, r3
10045cde:	2b00      	cmp	r3, #0
10045ce0:	d154      	bne.n	10045d8c <I2C_Slave_ISR_IT+0x210>
10045ce2:	697b      	ldr	r3, [r7, #20]
10045ce4:	4a2e      	ldr	r2, [pc, #184]	@ (10045da0 <I2C_Slave_ISR_IT+0x224>)
10045ce6:	4293      	cmp	r3, r2
10045ce8:	d050      	beq.n	10045d8c <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10045cea:	68fb      	ldr	r3, [r7, #12]
10045cec:	0018      	movs	r0, r3
10045cee:	f000 fc83 	bl	100465f8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10045cf2:	e04b      	b.n	10045d8c <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10045cf4:	693b      	ldr	r3, [r7, #16]
10045cf6:	08db      	lsrs	r3, r3, #3
10045cf8:	001a      	movs	r2, r3
10045cfa:	2301      	movs	r3, #1
10045cfc:	4013      	ands	r3, r2
10045cfe:	d00c      	beq.n	10045d1a <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10045d00:	687b      	ldr	r3, [r7, #4]
10045d02:	08db      	lsrs	r3, r3, #3
10045d04:	001a      	movs	r2, r3
10045d06:	2301      	movs	r3, #1
10045d08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10045d0a:	d006      	beq.n	10045d1a <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10045d0c:	693a      	ldr	r2, [r7, #16]
10045d0e:	68fb      	ldr	r3, [r7, #12]
10045d10:	0011      	movs	r1, r2
10045d12:	0018      	movs	r0, r3
10045d14:	f000 fb8a 	bl	1004642c <I2C_ITAddrCplt>
10045d18:	e039      	b.n	10045d8e <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10045d1a:	693b      	ldr	r3, [r7, #16]
10045d1c:	085b      	lsrs	r3, r3, #1
10045d1e:	001a      	movs	r2, r3
10045d20:	2301      	movs	r3, #1
10045d22:	4013      	ands	r3, r2
10045d24:	d033      	beq.n	10045d8e <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10045d26:	687b      	ldr	r3, [r7, #4]
10045d28:	085b      	lsrs	r3, r3, #1
10045d2a:	001a      	movs	r2, r3
10045d2c:	2301      	movs	r3, #1
10045d2e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10045d30:	d02d      	beq.n	10045d8e <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10045d32:	68fb      	ldr	r3, [r7, #12]
10045d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045d36:	b29b      	uxth	r3, r3
10045d38:	2b00      	cmp	r3, #0
10045d3a:	d018      	beq.n	10045d6e <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10045d3c:	68fb      	ldr	r3, [r7, #12]
10045d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045d40:	781a      	ldrb	r2, [r3, #0]
10045d42:	68fb      	ldr	r3, [r7, #12]
10045d44:	681b      	ldr	r3, [r3, #0]
10045d46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10045d48:	68fb      	ldr	r3, [r7, #12]
10045d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045d4c:	1c5a      	adds	r2, r3, #1
10045d4e:	68fb      	ldr	r3, [r7, #12]
10045d50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10045d52:	68fb      	ldr	r3, [r7, #12]
10045d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045d56:	b29b      	uxth	r3, r3
10045d58:	3b01      	subs	r3, #1
10045d5a:	b29a      	uxth	r2, r3
10045d5c:	68fb      	ldr	r3, [r7, #12]
10045d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10045d60:	68fb      	ldr	r3, [r7, #12]
10045d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045d64:	3b01      	subs	r3, #1
10045d66:	b29a      	uxth	r2, r3
10045d68:	68fb      	ldr	r3, [r7, #12]
10045d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
10045d6c:	e00f      	b.n	10045d8e <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10045d6e:	697a      	ldr	r2, [r7, #20]
10045d70:	2380      	movs	r3, #128	@ 0x80
10045d72:	045b      	lsls	r3, r3, #17
10045d74:	429a      	cmp	r2, r3
10045d76:	d002      	beq.n	10045d7e <I2C_Slave_ISR_IT+0x202>
10045d78:	697b      	ldr	r3, [r7, #20]
10045d7a:	2b00      	cmp	r3, #0
10045d7c:	d107      	bne.n	10045d8e <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10045d7e:	68fb      	ldr	r3, [r7, #12]
10045d80:	0018      	movs	r0, r3
10045d82:	f000 fc39 	bl	100465f8 <I2C_ITSlaveSeqCplt>
10045d86:	e002      	b.n	10045d8e <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
10045d88:	46c0      	nop			@ (mov r8, r8)
10045d8a:	e000      	b.n	10045d8e <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
10045d8c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045d8e:	68fb      	ldr	r3, [r7, #12]
10045d90:	2240      	movs	r2, #64	@ 0x40
10045d92:	2100      	movs	r1, #0
10045d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045d96:	2300      	movs	r3, #0
}
10045d98:	0018      	movs	r0, r3
10045d9a:	46bd      	mov	sp, r7
10045d9c:	b006      	add	sp, #24
10045d9e:	bd80      	pop	{r7, pc}
10045da0:	ffff0000 	.word	0xffff0000

10045da4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
10045da4:	b590      	push	{r4, r7, lr}
10045da6:	b089      	sub	sp, #36	@ 0x24
10045da8:	af02      	add	r7, sp, #8
10045daa:	60f8      	str	r0, [r7, #12]
10045dac:	60b9      	str	r1, [r7, #8]
10045dae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
10045db0:	68fb      	ldr	r3, [r7, #12]
10045db2:	2240      	movs	r2, #64	@ 0x40
10045db4:	5c9b      	ldrb	r3, [r3, r2]
10045db6:	2b01      	cmp	r3, #1
10045db8:	d101      	bne.n	10045dbe <I2C_Master_ISR_DMA+0x1a>
10045dba:	2302      	movs	r3, #2
10045dbc:	e0f7      	b.n	10045fae <I2C_Master_ISR_DMA+0x20a>
10045dbe:	68fb      	ldr	r3, [r7, #12]
10045dc0:	2240      	movs	r2, #64	@ 0x40
10045dc2:	2101      	movs	r1, #1
10045dc4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045dc6:	68bb      	ldr	r3, [r7, #8]
10045dc8:	091b      	lsrs	r3, r3, #4
10045dca:	001a      	movs	r2, r3
10045dcc:	2301      	movs	r3, #1
10045dce:	4013      	ands	r3, r2
10045dd0:	d019      	beq.n	10045e06 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10045dd2:	687b      	ldr	r3, [r7, #4]
10045dd4:	091b      	lsrs	r3, r3, #4
10045dd6:	001a      	movs	r2, r3
10045dd8:	2301      	movs	r3, #1
10045dda:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045ddc:	d013      	beq.n	10045e06 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045dde:	68fb      	ldr	r3, [r7, #12]
10045de0:	681b      	ldr	r3, [r3, #0]
10045de2:	2210      	movs	r2, #16
10045de4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045de6:	68fb      	ldr	r3, [r7, #12]
10045de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045dea:	2204      	movs	r2, #4
10045dec:	431a      	orrs	r2, r3
10045dee:	68fb      	ldr	r3, [r7, #12]
10045df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10045df2:	68fb      	ldr	r3, [r7, #12]
10045df4:	2120      	movs	r1, #32
10045df6:	0018      	movs	r0, r3
10045df8:	f001 f8c6 	bl	10046f88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10045dfc:	68fb      	ldr	r3, [r7, #12]
10045dfe:	0018      	movs	r0, r3
10045e00:	f001 f847 	bl	10046e92 <I2C_Flush_TXDR>
10045e04:	e0ce      	b.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10045e06:	68bb      	ldr	r3, [r7, #8]
10045e08:	09db      	lsrs	r3, r3, #7
10045e0a:	001a      	movs	r2, r3
10045e0c:	2301      	movs	r3, #1
10045e0e:	4013      	ands	r3, r2
10045e10:	d100      	bne.n	10045e14 <I2C_Master_ISR_DMA+0x70>
10045e12:	e07e      	b.n	10045f12 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10045e14:	687b      	ldr	r3, [r7, #4]
10045e16:	099b      	lsrs	r3, r3, #6
10045e18:	001a      	movs	r2, r3
10045e1a:	2301      	movs	r3, #1
10045e1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10045e1e:	d100      	bne.n	10045e22 <I2C_Master_ISR_DMA+0x7e>
10045e20:	e077      	b.n	10045f12 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
10045e22:	68fb      	ldr	r3, [r7, #12]
10045e24:	681b      	ldr	r3, [r3, #0]
10045e26:	681a      	ldr	r2, [r3, #0]
10045e28:	68fb      	ldr	r3, [r7, #12]
10045e2a:	681b      	ldr	r3, [r3, #0]
10045e2c:	2140      	movs	r1, #64	@ 0x40
10045e2e:	438a      	bics	r2, r1
10045e30:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
10045e32:	68fb      	ldr	r3, [r7, #12]
10045e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045e36:	b29b      	uxth	r3, r3
10045e38:	2b00      	cmp	r3, #0
10045e3a:	d055      	beq.n	10045ee8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
10045e3c:	68fb      	ldr	r3, [r7, #12]
10045e3e:	681b      	ldr	r3, [r3, #0]
10045e40:	685b      	ldr	r3, [r3, #4]
10045e42:	b29a      	uxth	r2, r3
10045e44:	2312      	movs	r3, #18
10045e46:	18fb      	adds	r3, r7, r3
10045e48:	0592      	lsls	r2, r2, #22
10045e4a:	0d92      	lsrs	r2, r2, #22
10045e4c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10045e4e:	68fb      	ldr	r3, [r7, #12]
10045e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045e52:	b29b      	uxth	r3, r3
10045e54:	2bff      	cmp	r3, #255	@ 0xff
10045e56:	d906      	bls.n	10045e66 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10045e58:	68fb      	ldr	r3, [r7, #12]
10045e5a:	22ff      	movs	r2, #255	@ 0xff
10045e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
10045e5e:	2380      	movs	r3, #128	@ 0x80
10045e60:	045b      	lsls	r3, r3, #17
10045e62:	617b      	str	r3, [r7, #20]
10045e64:	e010      	b.n	10045e88 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10045e66:	68fb      	ldr	r3, [r7, #12]
10045e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045e6a:	b29a      	uxth	r2, r3
10045e6c:	68fb      	ldr	r3, [r7, #12]
10045e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10045e70:	68fb      	ldr	r3, [r7, #12]
10045e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045e74:	4a50      	ldr	r2, [pc, #320]	@ (10045fb8 <I2C_Master_ISR_DMA+0x214>)
10045e76:	4293      	cmp	r3, r2
10045e78:	d003      	beq.n	10045e82 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
10045e7a:	68fb      	ldr	r3, [r7, #12]
10045e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045e7e:	617b      	str	r3, [r7, #20]
10045e80:	e002      	b.n	10045e88 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
10045e82:	2380      	movs	r3, #128	@ 0x80
10045e84:	049b      	lsls	r3, r3, #18
10045e86:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
10045e88:	68fb      	ldr	r3, [r7, #12]
10045e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045e8c:	b2da      	uxtb	r2, r3
10045e8e:	697c      	ldr	r4, [r7, #20]
10045e90:	2312      	movs	r3, #18
10045e92:	18fb      	adds	r3, r7, r3
10045e94:	8819      	ldrh	r1, [r3, #0]
10045e96:	68f8      	ldr	r0, [r7, #12]
10045e98:	2300      	movs	r3, #0
10045e9a:	9300      	str	r3, [sp, #0]
10045e9c:	0023      	movs	r3, r4
10045e9e:	f001 f839 	bl	10046f14 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10045ea2:	68fb      	ldr	r3, [r7, #12]
10045ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045ea6:	b29a      	uxth	r2, r3
10045ea8:	68fb      	ldr	r3, [r7, #12]
10045eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045eac:	1ad3      	subs	r3, r2, r3
10045eae:	b29a      	uxth	r2, r3
10045eb0:	68fb      	ldr	r3, [r7, #12]
10045eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045eb4:	68fb      	ldr	r3, [r7, #12]
10045eb6:	2241      	movs	r2, #65	@ 0x41
10045eb8:	5c9b      	ldrb	r3, [r3, r2]
10045eba:	b2db      	uxtb	r3, r3
10045ebc:	2b22      	cmp	r3, #34	@ 0x22
10045ebe:	d109      	bne.n	10045ed4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10045ec0:	68fb      	ldr	r3, [r7, #12]
10045ec2:	681b      	ldr	r3, [r3, #0]
10045ec4:	681a      	ldr	r2, [r3, #0]
10045ec6:	68fb      	ldr	r3, [r7, #12]
10045ec8:	681b      	ldr	r3, [r3, #0]
10045eca:	2180      	movs	r1, #128	@ 0x80
10045ecc:	0209      	lsls	r1, r1, #8
10045ece:	430a      	orrs	r2, r1
10045ed0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10045ed2:	e067      	b.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10045ed4:	68fb      	ldr	r3, [r7, #12]
10045ed6:	681b      	ldr	r3, [r3, #0]
10045ed8:	681a      	ldr	r2, [r3, #0]
10045eda:	68fb      	ldr	r3, [r7, #12]
10045edc:	681b      	ldr	r3, [r3, #0]
10045ede:	2180      	movs	r1, #128	@ 0x80
10045ee0:	01c9      	lsls	r1, r1, #7
10045ee2:	430a      	orrs	r2, r1
10045ee4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10045ee6:	e05d      	b.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10045ee8:	68fb      	ldr	r3, [r7, #12]
10045eea:	681b      	ldr	r3, [r3, #0]
10045eec:	685a      	ldr	r2, [r3, #4]
10045eee:	2380      	movs	r3, #128	@ 0x80
10045ef0:	049b      	lsls	r3, r3, #18
10045ef2:	401a      	ands	r2, r3
10045ef4:	2380      	movs	r3, #128	@ 0x80
10045ef6:	049b      	lsls	r3, r3, #18
10045ef8:	429a      	cmp	r2, r3
10045efa:	d004      	beq.n	10045f06 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10045efc:	68fb      	ldr	r3, [r7, #12]
10045efe:	0018      	movs	r0, r3
10045f00:	f000 fb38 	bl	10046574 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
10045f04:	e04e      	b.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10045f06:	68fb      	ldr	r3, [r7, #12]
10045f08:	2140      	movs	r1, #64	@ 0x40
10045f0a:	0018      	movs	r0, r3
10045f0c:	f000 fe96 	bl	10046c3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
10045f10:	e048      	b.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10045f12:	68bb      	ldr	r3, [r7, #8]
10045f14:	099b      	lsrs	r3, r3, #6
10045f16:	001a      	movs	r2, r3
10045f18:	2301      	movs	r3, #1
10045f1a:	4013      	ands	r3, r2
10045f1c:	d02e      	beq.n	10045f7c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10045f1e:	687b      	ldr	r3, [r7, #4]
10045f20:	099b      	lsrs	r3, r3, #6
10045f22:	001a      	movs	r2, r3
10045f24:	2301      	movs	r3, #1
10045f26:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10045f28:	d028      	beq.n	10045f7c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
10045f2a:	68fb      	ldr	r3, [r7, #12]
10045f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045f2e:	b29b      	uxth	r3, r3
10045f30:	2b00      	cmp	r3, #0
10045f32:	d11d      	bne.n	10045f70 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10045f34:	68fb      	ldr	r3, [r7, #12]
10045f36:	681b      	ldr	r3, [r3, #0]
10045f38:	685a      	ldr	r2, [r3, #4]
10045f3a:	2380      	movs	r3, #128	@ 0x80
10045f3c:	049b      	lsls	r3, r3, #18
10045f3e:	401a      	ands	r2, r3
10045f40:	2380      	movs	r3, #128	@ 0x80
10045f42:	049b      	lsls	r3, r3, #18
10045f44:	429a      	cmp	r2, r3
10045f46:	d02c      	beq.n	10045fa2 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
10045f48:	68fb      	ldr	r3, [r7, #12]
10045f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045f4c:	4a1a      	ldr	r2, [pc, #104]	@ (10045fb8 <I2C_Master_ISR_DMA+0x214>)
10045f4e:	4293      	cmp	r3, r2
10045f50:	d109      	bne.n	10045f66 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
10045f52:	68fb      	ldr	r3, [r7, #12]
10045f54:	681b      	ldr	r3, [r3, #0]
10045f56:	685a      	ldr	r2, [r3, #4]
10045f58:	68fb      	ldr	r3, [r7, #12]
10045f5a:	681b      	ldr	r3, [r3, #0]
10045f5c:	2180      	movs	r1, #128	@ 0x80
10045f5e:	01c9      	lsls	r1, r1, #7
10045f60:	430a      	orrs	r2, r1
10045f62:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
10045f64:	e01d      	b.n	10045fa2 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
10045f66:	68fb      	ldr	r3, [r7, #12]
10045f68:	0018      	movs	r0, r3
10045f6a:	f000 fb03 	bl	10046574 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
10045f6e:	e018      	b.n	10045fa2 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10045f70:	68fb      	ldr	r3, [r7, #12]
10045f72:	2140      	movs	r1, #64	@ 0x40
10045f74:	0018      	movs	r0, r3
10045f76:	f000 fe61 	bl	10046c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
10045f7a:	e012      	b.n	10045fa2 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10045f7c:	68bb      	ldr	r3, [r7, #8]
10045f7e:	095b      	lsrs	r3, r3, #5
10045f80:	001a      	movs	r2, r3
10045f82:	2301      	movs	r3, #1
10045f84:	4013      	ands	r3, r2
10045f86:	d00d      	beq.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10045f88:	687b      	ldr	r3, [r7, #4]
10045f8a:	095b      	lsrs	r3, r3, #5
10045f8c:	001a      	movs	r2, r3
10045f8e:	2301      	movs	r3, #1
10045f90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10045f92:	d007      	beq.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10045f94:	68ba      	ldr	r2, [r7, #8]
10045f96:	68fb      	ldr	r3, [r7, #12]
10045f98:	0011      	movs	r1, r2
10045f9a:	0018      	movs	r0, r3
10045f9c:	f000 fb92 	bl	100466c4 <I2C_ITMasterCplt>
10045fa0:	e000      	b.n	10045fa4 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
10045fa2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045fa4:	68fb      	ldr	r3, [r7, #12]
10045fa6:	2240      	movs	r2, #64	@ 0x40
10045fa8:	2100      	movs	r1, #0
10045faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045fac:	2300      	movs	r3, #0
}
10045fae:	0018      	movs	r0, r3
10045fb0:	46bd      	mov	sp, r7
10045fb2:	b007      	add	sp, #28
10045fb4:	bd90      	pop	{r4, r7, pc}
10045fb6:	46c0      	nop			@ (mov r8, r8)
10045fb8:	ffff0000 	.word	0xffff0000

10045fbc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
10045fbc:	b590      	push	{r4, r7, lr}
10045fbe:	b089      	sub	sp, #36	@ 0x24
10045fc0:	af02      	add	r7, sp, #8
10045fc2:	60f8      	str	r0, [r7, #12]
10045fc4:	60b9      	str	r1, [r7, #8]
10045fc6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10045fc8:	4b9a      	ldr	r3, [pc, #616]	@ (10046234 <I2C_Mem_ISR_DMA+0x278>)
10045fca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10045fcc:	68fb      	ldr	r3, [r7, #12]
10045fce:	2240      	movs	r2, #64	@ 0x40
10045fd0:	5c9b      	ldrb	r3, [r3, r2]
10045fd2:	2b01      	cmp	r3, #1
10045fd4:	d101      	bne.n	10045fda <I2C_Mem_ISR_DMA+0x1e>
10045fd6:	2302      	movs	r3, #2
10045fd8:	e127      	b.n	1004622a <I2C_Mem_ISR_DMA+0x26e>
10045fda:	68fb      	ldr	r3, [r7, #12]
10045fdc:	2240      	movs	r2, #64	@ 0x40
10045fde:	2101      	movs	r1, #1
10045fe0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045fe2:	68bb      	ldr	r3, [r7, #8]
10045fe4:	091b      	lsrs	r3, r3, #4
10045fe6:	001a      	movs	r2, r3
10045fe8:	2301      	movs	r3, #1
10045fea:	4013      	ands	r3, r2
10045fec:	d019      	beq.n	10046022 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10045fee:	687b      	ldr	r3, [r7, #4]
10045ff0:	091b      	lsrs	r3, r3, #4
10045ff2:	001a      	movs	r2, r3
10045ff4:	2301      	movs	r3, #1
10045ff6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045ff8:	d013      	beq.n	10046022 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045ffa:	68fb      	ldr	r3, [r7, #12]
10045ffc:	681b      	ldr	r3, [r3, #0]
10045ffe:	2210      	movs	r2, #16
10046000:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10046002:	68fb      	ldr	r3, [r7, #12]
10046004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046006:	2204      	movs	r2, #4
10046008:	431a      	orrs	r2, r3
1004600a:	68fb      	ldr	r3, [r7, #12]
1004600c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
1004600e:	68fb      	ldr	r3, [r7, #12]
10046010:	2120      	movs	r1, #32
10046012:	0018      	movs	r0, r3
10046014:	f000 ffb8 	bl	10046f88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10046018:	68fb      	ldr	r3, [r7, #12]
1004601a:	0018      	movs	r0, r3
1004601c:	f000 ff39 	bl	10046e92 <I2C_Flush_TXDR>
10046020:	e0fe      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10046022:	68bb      	ldr	r3, [r7, #8]
10046024:	085b      	lsrs	r3, r3, #1
10046026:	001a      	movs	r2, r3
10046028:	2301      	movs	r3, #1
1004602a:	4013      	ands	r3, r2
1004602c:	d00f      	beq.n	1004604e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
1004602e:	687b      	ldr	r3, [r7, #4]
10046030:	085b      	lsrs	r3, r3, #1
10046032:	001a      	movs	r2, r3
10046034:	2301      	movs	r3, #1
10046036:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10046038:	d009      	beq.n	1004604e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
1004603a:	68fb      	ldr	r3, [r7, #12]
1004603c:	681b      	ldr	r3, [r3, #0]
1004603e:	68fa      	ldr	r2, [r7, #12]
10046040:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10046042:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
10046044:	68fb      	ldr	r3, [r7, #12]
10046046:	2201      	movs	r2, #1
10046048:	4252      	negs	r2, r2
1004604a:	651a      	str	r2, [r3, #80]	@ 0x50
1004604c:	e0e8      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
1004604e:	68bb      	ldr	r3, [r7, #8]
10046050:	09db      	lsrs	r3, r3, #7
10046052:	001a      	movs	r2, r3
10046054:	2301      	movs	r3, #1
10046056:	4013      	ands	r3, r2
10046058:	d065      	beq.n	10046126 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004605a:	687b      	ldr	r3, [r7, #4]
1004605c:	099b      	lsrs	r3, r3, #6
1004605e:	001a      	movs	r2, r3
10046060:	2301      	movs	r3, #1
10046062:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10046064:	d05f      	beq.n	10046126 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10046066:	68fb      	ldr	r3, [r7, #12]
10046068:	2101      	movs	r1, #1
1004606a:	0018      	movs	r0, r3
1004606c:	f001 f816 	bl	1004709c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10046070:	68fb      	ldr	r3, [r7, #12]
10046072:	2110      	movs	r1, #16
10046074:	0018      	movs	r0, r3
10046076:	f000 ff87 	bl	10046f88 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
1004607a:	68fb      	ldr	r3, [r7, #12]
1004607c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004607e:	b29b      	uxth	r3, r3
10046080:	2b00      	cmp	r3, #0
10046082:	d04a      	beq.n	1004611a <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10046084:	68fb      	ldr	r3, [r7, #12]
10046086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10046088:	b29b      	uxth	r3, r3
1004608a:	2bff      	cmp	r3, #255	@ 0xff
1004608c:	d910      	bls.n	100460b0 <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
1004608e:	68fb      	ldr	r3, [r7, #12]
10046090:	22ff      	movs	r2, #255	@ 0xff
10046092:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10046094:	68fb      	ldr	r3, [r7, #12]
10046096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046098:	b299      	uxth	r1, r3
1004609a:	68fb      	ldr	r3, [r7, #12]
1004609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004609e:	b2da      	uxtb	r2, r3
100460a0:	2380      	movs	r3, #128	@ 0x80
100460a2:	045b      	lsls	r3, r3, #17
100460a4:	68f8      	ldr	r0, [r7, #12]
100460a6:	2400      	movs	r4, #0
100460a8:	9400      	str	r4, [sp, #0]
100460aa:	f000 ff33 	bl	10046f14 <I2C_TransferConfig>
100460ae:	e011      	b.n	100460d4 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100460b0:	68fb      	ldr	r3, [r7, #12]
100460b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100460b4:	b29a      	uxth	r2, r3
100460b6:	68fb      	ldr	r3, [r7, #12]
100460b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100460ba:	68fb      	ldr	r3, [r7, #12]
100460bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100460be:	b299      	uxth	r1, r3
100460c0:	68fb      	ldr	r3, [r7, #12]
100460c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100460c4:	b2da      	uxtb	r2, r3
100460c6:	2380      	movs	r3, #128	@ 0x80
100460c8:	049b      	lsls	r3, r3, #18
100460ca:	68f8      	ldr	r0, [r7, #12]
100460cc:	2400      	movs	r4, #0
100460ce:	9400      	str	r4, [sp, #0]
100460d0:	f000 ff20 	bl	10046f14 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
100460d4:	68fb      	ldr	r3, [r7, #12]
100460d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100460d8:	b29a      	uxth	r2, r3
100460da:	68fb      	ldr	r3, [r7, #12]
100460dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100460de:	1ad3      	subs	r3, r2, r3
100460e0:	b29a      	uxth	r2, r3
100460e2:	68fb      	ldr	r3, [r7, #12]
100460e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100460e6:	68fb      	ldr	r3, [r7, #12]
100460e8:	2241      	movs	r2, #65	@ 0x41
100460ea:	5c9b      	ldrb	r3, [r3, r2]
100460ec:	b2db      	uxtb	r3, r3
100460ee:	2b22      	cmp	r3, #34	@ 0x22
100460f0:	d109      	bne.n	10046106 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
100460f2:	68fb      	ldr	r3, [r7, #12]
100460f4:	681b      	ldr	r3, [r3, #0]
100460f6:	681a      	ldr	r2, [r3, #0]
100460f8:	68fb      	ldr	r3, [r7, #12]
100460fa:	681b      	ldr	r3, [r3, #0]
100460fc:	2180      	movs	r1, #128	@ 0x80
100460fe:	0209      	lsls	r1, r1, #8
10046100:	430a      	orrs	r2, r1
10046102:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10046104:	e08c      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10046106:	68fb      	ldr	r3, [r7, #12]
10046108:	681b      	ldr	r3, [r3, #0]
1004610a:	681a      	ldr	r2, [r3, #0]
1004610c:	68fb      	ldr	r3, [r7, #12]
1004610e:	681b      	ldr	r3, [r3, #0]
10046110:	2180      	movs	r1, #128	@ 0x80
10046112:	01c9      	lsls	r1, r1, #7
10046114:	430a      	orrs	r2, r1
10046116:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10046118:	e082      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
1004611a:	68fb      	ldr	r3, [r7, #12]
1004611c:	2140      	movs	r1, #64	@ 0x40
1004611e:	0018      	movs	r0, r3
10046120:	f000 fd8c 	bl	10046c3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
10046124:	e07c      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10046126:	68bb      	ldr	r3, [r7, #8]
10046128:	099b      	lsrs	r3, r3, #6
1004612a:	001a      	movs	r2, r3
1004612c:	2301      	movs	r3, #1
1004612e:	4013      	ands	r3, r2
10046130:	d064      	beq.n	100461fc <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10046132:	687b      	ldr	r3, [r7, #4]
10046134:	099b      	lsrs	r3, r3, #6
10046136:	001a      	movs	r2, r3
10046138:	2301      	movs	r3, #1
1004613a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
1004613c:	d05e      	beq.n	100461fc <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004613e:	68fb      	ldr	r3, [r7, #12]
10046140:	2101      	movs	r1, #1
10046142:	0018      	movs	r0, r3
10046144:	f000 ffaa 	bl	1004709c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10046148:	68fb      	ldr	r3, [r7, #12]
1004614a:	2110      	movs	r1, #16
1004614c:	0018      	movs	r0, r3
1004614e:	f000 ff1b 	bl	10046f88 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10046152:	68fb      	ldr	r3, [r7, #12]
10046154:	2241      	movs	r2, #65	@ 0x41
10046156:	5c9b      	ldrb	r3, [r3, r2]
10046158:	b2db      	uxtb	r3, r3
1004615a:	2b22      	cmp	r3, #34	@ 0x22
1004615c:	d101      	bne.n	10046162 <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
1004615e:	4b36      	ldr	r3, [pc, #216]	@ (10046238 <I2C_Mem_ISR_DMA+0x27c>)
10046160:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10046162:	68fb      	ldr	r3, [r7, #12]
10046164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10046166:	b29b      	uxth	r3, r3
10046168:	2bff      	cmp	r3, #255	@ 0xff
1004616a:	d911      	bls.n	10046190 <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
1004616c:	68fb      	ldr	r3, [r7, #12]
1004616e:	22ff      	movs	r2, #255	@ 0xff
10046170:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10046172:	68fb      	ldr	r3, [r7, #12]
10046174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046176:	b299      	uxth	r1, r3
10046178:	68fb      	ldr	r3, [r7, #12]
1004617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004617c:	b2da      	uxtb	r2, r3
1004617e:	2380      	movs	r3, #128	@ 0x80
10046180:	045c      	lsls	r4, r3, #17
10046182:	68f8      	ldr	r0, [r7, #12]
10046184:	697b      	ldr	r3, [r7, #20]
10046186:	9300      	str	r3, [sp, #0]
10046188:	0023      	movs	r3, r4
1004618a:	f000 fec3 	bl	10046f14 <I2C_TransferConfig>
1004618e:	e012      	b.n	100461b6 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10046190:	68fb      	ldr	r3, [r7, #12]
10046192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10046194:	b29a      	uxth	r2, r3
10046196:	68fb      	ldr	r3, [r7, #12]
10046198:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
1004619a:	68fb      	ldr	r3, [r7, #12]
1004619c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004619e:	b299      	uxth	r1, r3
100461a0:	68fb      	ldr	r3, [r7, #12]
100461a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100461a4:	b2da      	uxtb	r2, r3
100461a6:	2380      	movs	r3, #128	@ 0x80
100461a8:	049c      	lsls	r4, r3, #18
100461aa:	68f8      	ldr	r0, [r7, #12]
100461ac:	697b      	ldr	r3, [r7, #20]
100461ae:	9300      	str	r3, [sp, #0]
100461b0:	0023      	movs	r3, r4
100461b2:	f000 feaf 	bl	10046f14 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
100461b6:	68fb      	ldr	r3, [r7, #12]
100461b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100461ba:	b29a      	uxth	r2, r3
100461bc:	68fb      	ldr	r3, [r7, #12]
100461be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100461c0:	1ad3      	subs	r3, r2, r3
100461c2:	b29a      	uxth	r2, r3
100461c4:	68fb      	ldr	r3, [r7, #12]
100461c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100461c8:	68fb      	ldr	r3, [r7, #12]
100461ca:	2241      	movs	r2, #65	@ 0x41
100461cc:	5c9b      	ldrb	r3, [r3, r2]
100461ce:	b2db      	uxtb	r3, r3
100461d0:	2b22      	cmp	r3, #34	@ 0x22
100461d2:	d109      	bne.n	100461e8 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
100461d4:	68fb      	ldr	r3, [r7, #12]
100461d6:	681b      	ldr	r3, [r3, #0]
100461d8:	681a      	ldr	r2, [r3, #0]
100461da:	68fb      	ldr	r3, [r7, #12]
100461dc:	681b      	ldr	r3, [r3, #0]
100461de:	2180      	movs	r1, #128	@ 0x80
100461e0:	0209      	lsls	r1, r1, #8
100461e2:	430a      	orrs	r2, r1
100461e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100461e6:	e01b      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
100461e8:	68fb      	ldr	r3, [r7, #12]
100461ea:	681b      	ldr	r3, [r3, #0]
100461ec:	681a      	ldr	r2, [r3, #0]
100461ee:	68fb      	ldr	r3, [r7, #12]
100461f0:	681b      	ldr	r3, [r3, #0]
100461f2:	2180      	movs	r1, #128	@ 0x80
100461f4:	01c9      	lsls	r1, r1, #7
100461f6:	430a      	orrs	r2, r1
100461f8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100461fa:	e011      	b.n	10046220 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100461fc:	68bb      	ldr	r3, [r7, #8]
100461fe:	095b      	lsrs	r3, r3, #5
10046200:	001a      	movs	r2, r3
10046202:	2301      	movs	r3, #1
10046204:	4013      	ands	r3, r2
10046206:	d00b      	beq.n	10046220 <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10046208:	687b      	ldr	r3, [r7, #4]
1004620a:	095b      	lsrs	r3, r3, #5
1004620c:	001a      	movs	r2, r3
1004620e:	2301      	movs	r3, #1
10046210:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10046212:	d005      	beq.n	10046220 <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10046214:	68ba      	ldr	r2, [r7, #8]
10046216:	68fb      	ldr	r3, [r7, #12]
10046218:	0011      	movs	r1, r2
1004621a:	0018      	movs	r0, r3
1004621c:	f000 fa52 	bl	100466c4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10046220:	68fb      	ldr	r3, [r7, #12]
10046222:	2240      	movs	r2, #64	@ 0x40
10046224:	2100      	movs	r1, #0
10046226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10046228:	2300      	movs	r3, #0
}
1004622a:	0018      	movs	r0, r3
1004622c:	46bd      	mov	sp, r7
1004622e:	b007      	add	sp, #28
10046230:	bd90      	pop	{r4, r7, pc}
10046232:	46c0      	nop			@ (mov r8, r8)
10046234:	80002000 	.word	0x80002000
10046238:	80002400 	.word	0x80002400

1004623c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
1004623c:	b580      	push	{r7, lr}
1004623e:	b088      	sub	sp, #32
10046240:	af00      	add	r7, sp, #0
10046242:	60f8      	str	r0, [r7, #12]
10046244:	60b9      	str	r1, [r7, #8]
10046246:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10046248:	68fb      	ldr	r3, [r7, #12]
1004624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004624c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
1004624e:	2300      	movs	r3, #0
10046250:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
10046252:	68fb      	ldr	r3, [r7, #12]
10046254:	2240      	movs	r2, #64	@ 0x40
10046256:	5c9b      	ldrb	r3, [r3, r2]
10046258:	2b01      	cmp	r3, #1
1004625a:	d101      	bne.n	10046260 <I2C_Slave_ISR_DMA+0x24>
1004625c:	2302      	movs	r3, #2
1004625e:	e0de      	b.n	1004641e <I2C_Slave_ISR_DMA+0x1e2>
10046260:	68fb      	ldr	r3, [r7, #12]
10046262:	2240      	movs	r2, #64	@ 0x40
10046264:	2101      	movs	r1, #1
10046266:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10046268:	68bb      	ldr	r3, [r7, #8]
1004626a:	095b      	lsrs	r3, r3, #5
1004626c:	001a      	movs	r2, r3
1004626e:	2301      	movs	r3, #1
10046270:	4013      	ands	r3, r2
10046272:	d00c      	beq.n	1004628e <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10046274:	687b      	ldr	r3, [r7, #4]
10046276:	095b      	lsrs	r3, r3, #5
10046278:	001a      	movs	r2, r3
1004627a:	2301      	movs	r3, #1
1004627c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
1004627e:	d006      	beq.n	1004628e <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
10046280:	68ba      	ldr	r2, [r7, #8]
10046282:	68fb      	ldr	r3, [r7, #12]
10046284:	0011      	movs	r1, r2
10046286:	0018      	movs	r0, r3
10046288:	f000 faee 	bl	10046868 <I2C_ITSlaveCplt>
1004628c:	e0c2      	b.n	10046414 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
1004628e:	68bb      	ldr	r3, [r7, #8]
10046290:	091b      	lsrs	r3, r3, #4
10046292:	001a      	movs	r2, r3
10046294:	2301      	movs	r3, #1
10046296:	4013      	ands	r3, r2
10046298:	d100      	bne.n	1004629c <I2C_Slave_ISR_DMA+0x60>
1004629a:	e0a9      	b.n	100463f0 <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1004629c:	687b      	ldr	r3, [r7, #4]
1004629e:	091b      	lsrs	r3, r3, #4
100462a0:	001a      	movs	r2, r3
100462a2:	2301      	movs	r3, #1
100462a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100462a6:	d100      	bne.n	100462aa <I2C_Slave_ISR_DMA+0x6e>
100462a8:	e0a2      	b.n	100463f0 <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100462aa:	687b      	ldr	r3, [r7, #4]
100462ac:	0b9b      	lsrs	r3, r3, #14
100462ae:	001a      	movs	r2, r3
100462b0:	2301      	movs	r3, #1
100462b2:	4013      	ands	r3, r2
100462b4:	d106      	bne.n	100462c4 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
100462b6:	687b      	ldr	r3, [r7, #4]
100462b8:	0bdb      	lsrs	r3, r3, #15
100462ba:	001a      	movs	r2, r3
100462bc:	2301      	movs	r3, #1
100462be:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100462c0:	d100      	bne.n	100462c4 <I2C_Slave_ISR_DMA+0x88>
100462c2:	e08e      	b.n	100463e2 <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
100462c4:	68fb      	ldr	r3, [r7, #12]
100462c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100462c8:	2b00      	cmp	r3, #0
100462ca:	d00d      	beq.n	100462e8 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
100462cc:	687b      	ldr	r3, [r7, #4]
100462ce:	0bdb      	lsrs	r3, r3, #15
100462d0:	001a      	movs	r2, r3
100462d2:	2301      	movs	r3, #1
100462d4:	4013      	ands	r3, r2
100462d6:	d007      	beq.n	100462e8 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
100462d8:	68fb      	ldr	r3, [r7, #12]
100462da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100462dc:	681b      	ldr	r3, [r3, #0]
100462de:	685b      	ldr	r3, [r3, #4]
100462e0:	2b00      	cmp	r3, #0
100462e2:	d101      	bne.n	100462e8 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
100462e4:	2301      	movs	r3, #1
100462e6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
100462e8:	68fb      	ldr	r3, [r7, #12]
100462ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100462ec:	2b00      	cmp	r3, #0
100462ee:	d00d      	beq.n	1004630c <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
100462f0:	687b      	ldr	r3, [r7, #4]
100462f2:	0b9b      	lsrs	r3, r3, #14
100462f4:	001a      	movs	r2, r3
100462f6:	2301      	movs	r3, #1
100462f8:	4013      	ands	r3, r2
100462fa:	d007      	beq.n	1004630c <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
100462fc:	68fb      	ldr	r3, [r7, #12]
100462fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046300:	681b      	ldr	r3, [r3, #0]
10046302:	685b      	ldr	r3, [r3, #4]
10046304:	2b00      	cmp	r3, #0
10046306:	d101      	bne.n	1004630c <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
10046308:	2301      	movs	r3, #1
1004630a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
1004630c:	69fb      	ldr	r3, [r7, #28]
1004630e:	2b01      	cmp	r3, #1
10046310:	d12d      	bne.n	1004636e <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10046312:	68fb      	ldr	r3, [r7, #12]
10046314:	2241      	movs	r2, #65	@ 0x41
10046316:	5c9b      	ldrb	r3, [r3, r2]
10046318:	b2db      	uxtb	r3, r3
1004631a:	2b28      	cmp	r3, #40	@ 0x28
1004631c:	d10b      	bne.n	10046336 <I2C_Slave_ISR_DMA+0xfa>
1004631e:	69ba      	ldr	r2, [r7, #24]
10046320:	2380      	movs	r3, #128	@ 0x80
10046322:	049b      	lsls	r3, r3, #18
10046324:	429a      	cmp	r2, r3
10046326:	d106      	bne.n	10046336 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
10046328:	68ba      	ldr	r2, [r7, #8]
1004632a:	68fb      	ldr	r3, [r7, #12]
1004632c:	0011      	movs	r1, r2
1004632e:	0018      	movs	r0, r3
10046330:	f000 fc2a 	bl	10046b88 <I2C_ITListenCplt>
10046334:	e054      	b.n	100463e0 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10046336:	68fb      	ldr	r3, [r7, #12]
10046338:	2241      	movs	r2, #65	@ 0x41
1004633a:	5c9b      	ldrb	r3, [r3, r2]
1004633c:	b2db      	uxtb	r3, r3
1004633e:	2b29      	cmp	r3, #41	@ 0x29
10046340:	d110      	bne.n	10046364 <I2C_Slave_ISR_DMA+0x128>
10046342:	69bb      	ldr	r3, [r7, #24]
10046344:	4a38      	ldr	r2, [pc, #224]	@ (10046428 <I2C_Slave_ISR_DMA+0x1ec>)
10046346:	4293      	cmp	r3, r2
10046348:	d00c      	beq.n	10046364 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004634a:	68fb      	ldr	r3, [r7, #12]
1004634c:	681b      	ldr	r3, [r3, #0]
1004634e:	2210      	movs	r2, #16
10046350:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
10046352:	68fb      	ldr	r3, [r7, #12]
10046354:	0018      	movs	r0, r3
10046356:	f000 fd9c 	bl	10046e92 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
1004635a:	68fb      	ldr	r3, [r7, #12]
1004635c:	0018      	movs	r0, r3
1004635e:	f000 f94b 	bl	100465f8 <I2C_ITSlaveSeqCplt>
10046362:	e03d      	b.n	100463e0 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046364:	68fb      	ldr	r3, [r7, #12]
10046366:	681b      	ldr	r3, [r3, #0]
10046368:	2210      	movs	r2, #16
1004636a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
1004636c:	e03e      	b.n	100463ec <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004636e:	68fb      	ldr	r3, [r7, #12]
10046370:	681b      	ldr	r3, [r3, #0]
10046372:	2210      	movs	r2, #16
10046374:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10046376:	68fb      	ldr	r3, [r7, #12]
10046378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004637a:	2204      	movs	r2, #4
1004637c:	431a      	orrs	r2, r3
1004637e:	68fb      	ldr	r3, [r7, #12]
10046380:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
10046382:	2317      	movs	r3, #23
10046384:	18fb      	adds	r3, r7, r3
10046386:	68fa      	ldr	r2, [r7, #12]
10046388:	2141      	movs	r1, #65	@ 0x41
1004638a:	5c52      	ldrb	r2, [r2, r1]
1004638c:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
1004638e:	69bb      	ldr	r3, [r7, #24]
10046390:	2b00      	cmp	r3, #0
10046392:	d004      	beq.n	1004639e <I2C_Slave_ISR_DMA+0x162>
10046394:	69ba      	ldr	r2, [r7, #24]
10046396:	2380      	movs	r3, #128	@ 0x80
10046398:	045b      	lsls	r3, r3, #17
1004639a:	429a      	cmp	r2, r3
1004639c:	d126      	bne.n	100463ec <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
1004639e:	2217      	movs	r2, #23
100463a0:	18bb      	adds	r3, r7, r2
100463a2:	781b      	ldrb	r3, [r3, #0]
100463a4:	2b21      	cmp	r3, #33	@ 0x21
100463a6:	d003      	beq.n	100463b0 <I2C_Slave_ISR_DMA+0x174>
100463a8:	18bb      	adds	r3, r7, r2
100463aa:	781b      	ldrb	r3, [r3, #0]
100463ac:	2b29      	cmp	r3, #41	@ 0x29
100463ae:	d103      	bne.n	100463b8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100463b0:	68fb      	ldr	r3, [r7, #12]
100463b2:	2221      	movs	r2, #33	@ 0x21
100463b4:	631a      	str	r2, [r3, #48]	@ 0x30
100463b6:	e00b      	b.n	100463d0 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
100463b8:	2217      	movs	r2, #23
100463ba:	18bb      	adds	r3, r7, r2
100463bc:	781b      	ldrb	r3, [r3, #0]
100463be:	2b22      	cmp	r3, #34	@ 0x22
100463c0:	d003      	beq.n	100463ca <I2C_Slave_ISR_DMA+0x18e>
100463c2:	18bb      	adds	r3, r7, r2
100463c4:	781b      	ldrb	r3, [r3, #0]
100463c6:	2b2a      	cmp	r3, #42	@ 0x2a
100463c8:	d102      	bne.n	100463d0 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100463ca:	68fb      	ldr	r3, [r7, #12]
100463cc:	2222      	movs	r2, #34	@ 0x22
100463ce:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
100463d0:	68fb      	ldr	r3, [r7, #12]
100463d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100463d4:	68fb      	ldr	r3, [r7, #12]
100463d6:	0011      	movs	r1, r2
100463d8:	0018      	movs	r0, r3
100463da:	f000 fc2f 	bl	10046c3c <I2C_ITError>
      if (treatdmanack == 1U)
100463de:	e005      	b.n	100463ec <I2C_Slave_ISR_DMA+0x1b0>
100463e0:	e004      	b.n	100463ec <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100463e2:	68fb      	ldr	r3, [r7, #12]
100463e4:	681b      	ldr	r3, [r3, #0]
100463e6:	2210      	movs	r2, #16
100463e8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100463ea:	e013      	b.n	10046414 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
100463ec:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100463ee:	e011      	b.n	10046414 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
100463f0:	68bb      	ldr	r3, [r7, #8]
100463f2:	08db      	lsrs	r3, r3, #3
100463f4:	001a      	movs	r2, r3
100463f6:	2301      	movs	r3, #1
100463f8:	4013      	ands	r3, r2
100463fa:	d00b      	beq.n	10046414 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
100463fc:	687b      	ldr	r3, [r7, #4]
100463fe:	08db      	lsrs	r3, r3, #3
10046400:	001a      	movs	r2, r3
10046402:	2301      	movs	r3, #1
10046404:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10046406:	d005      	beq.n	10046414 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
10046408:	68ba      	ldr	r2, [r7, #8]
1004640a:	68fb      	ldr	r3, [r7, #12]
1004640c:	0011      	movs	r1, r2
1004640e:	0018      	movs	r0, r3
10046410:	f000 f80c 	bl	1004642c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10046414:	68fb      	ldr	r3, [r7, #12]
10046416:	2240      	movs	r2, #64	@ 0x40
10046418:	2100      	movs	r1, #0
1004641a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004641c:	2300      	movs	r3, #0
}
1004641e:	0018      	movs	r0, r3
10046420:	46bd      	mov	sp, r7
10046422:	b008      	add	sp, #32
10046424:	bd80      	pop	{r7, pc}
10046426:	46c0      	nop			@ (mov r8, r8)
10046428:	ffff0000 	.word	0xffff0000

1004642c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004642c:	b5b0      	push	{r4, r5, r7, lr}
1004642e:	b084      	sub	sp, #16
10046430:	af00      	add	r7, sp, #0
10046432:	6078      	str	r0, [r7, #4]
10046434:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10046436:	687b      	ldr	r3, [r7, #4]
10046438:	2241      	movs	r2, #65	@ 0x41
1004643a:	5c9b      	ldrb	r3, [r3, r2]
1004643c:	b2db      	uxtb	r3, r3
1004643e:	001a      	movs	r2, r3
10046440:	2328      	movs	r3, #40	@ 0x28
10046442:	4013      	ands	r3, r2
10046444:	2b28      	cmp	r3, #40	@ 0x28
10046446:	d000      	beq.n	1004644a <I2C_ITAddrCplt+0x1e>
10046448:	e088      	b.n	1004655c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
1004644a:	687b      	ldr	r3, [r7, #4]
1004644c:	681b      	ldr	r3, [r3, #0]
1004644e:	699b      	ldr	r3, [r3, #24]
10046450:	0c1b      	lsrs	r3, r3, #16
10046452:	b2da      	uxtb	r2, r3
10046454:	250f      	movs	r5, #15
10046456:	197b      	adds	r3, r7, r5
10046458:	2101      	movs	r1, #1
1004645a:	400a      	ands	r2, r1
1004645c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
1004645e:	687b      	ldr	r3, [r7, #4]
10046460:	681b      	ldr	r3, [r3, #0]
10046462:	699b      	ldr	r3, [r3, #24]
10046464:	0c1b      	lsrs	r3, r3, #16
10046466:	b29a      	uxth	r2, r3
10046468:	200c      	movs	r0, #12
1004646a:	183b      	adds	r3, r7, r0
1004646c:	21fe      	movs	r1, #254	@ 0xfe
1004646e:	400a      	ands	r2, r1
10046470:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10046472:	687b      	ldr	r3, [r7, #4]
10046474:	681b      	ldr	r3, [r3, #0]
10046476:	689b      	ldr	r3, [r3, #8]
10046478:	b29a      	uxth	r2, r3
1004647a:	240a      	movs	r4, #10
1004647c:	193b      	adds	r3, r7, r4
1004647e:	0592      	lsls	r2, r2, #22
10046480:	0d92      	lsrs	r2, r2, #22
10046482:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10046484:	687b      	ldr	r3, [r7, #4]
10046486:	681b      	ldr	r3, [r3, #0]
10046488:	68db      	ldr	r3, [r3, #12]
1004648a:	b29a      	uxth	r2, r3
1004648c:	2308      	movs	r3, #8
1004648e:	18fb      	adds	r3, r7, r3
10046490:	21fe      	movs	r1, #254	@ 0xfe
10046492:	400a      	ands	r2, r1
10046494:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10046496:	687b      	ldr	r3, [r7, #4]
10046498:	68db      	ldr	r3, [r3, #12]
1004649a:	2b02      	cmp	r3, #2
1004649c:	d148      	bne.n	10046530 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
1004649e:	0021      	movs	r1, r4
100464a0:	187b      	adds	r3, r7, r1
100464a2:	881b      	ldrh	r3, [r3, #0]
100464a4:	09db      	lsrs	r3, r3, #7
100464a6:	b29a      	uxth	r2, r3
100464a8:	183b      	adds	r3, r7, r0
100464aa:	881b      	ldrh	r3, [r3, #0]
100464ac:	4053      	eors	r3, r2
100464ae:	b29b      	uxth	r3, r3
100464b0:	001a      	movs	r2, r3
100464b2:	2306      	movs	r3, #6
100464b4:	4013      	ands	r3, r2
100464b6:	d120      	bne.n	100464fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
100464b8:	183b      	adds	r3, r7, r0
100464ba:	187a      	adds	r2, r7, r1
100464bc:	8812      	ldrh	r2, [r2, #0]
100464be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
100464c0:	687b      	ldr	r3, [r7, #4]
100464c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100464c4:	1c5a      	adds	r2, r3, #1
100464c6:	687b      	ldr	r3, [r7, #4]
100464c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
100464ca:	687b      	ldr	r3, [r7, #4]
100464cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100464ce:	2b02      	cmp	r3, #2
100464d0:	d14c      	bne.n	1004656c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
100464d2:	687b      	ldr	r3, [r7, #4]
100464d4:	2200      	movs	r2, #0
100464d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
100464d8:	687b      	ldr	r3, [r7, #4]
100464da:	681b      	ldr	r3, [r3, #0]
100464dc:	2208      	movs	r2, #8
100464de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
100464e0:	687b      	ldr	r3, [r7, #4]
100464e2:	2240      	movs	r2, #64	@ 0x40
100464e4:	2100      	movs	r1, #0
100464e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
100464e8:	183b      	adds	r3, r7, r0
100464ea:	881a      	ldrh	r2, [r3, #0]
100464ec:	197b      	adds	r3, r7, r5
100464ee:	7819      	ldrb	r1, [r3, #0]
100464f0:	687b      	ldr	r3, [r7, #4]
100464f2:	0018      	movs	r0, r3
100464f4:	f7ff f9e0 	bl	100458b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
100464f8:	e038      	b.n	1004656c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
100464fa:	240c      	movs	r4, #12
100464fc:	193b      	adds	r3, r7, r4
100464fe:	2208      	movs	r2, #8
10046500:	18ba      	adds	r2, r7, r2
10046502:	8812      	ldrh	r2, [r2, #0]
10046504:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10046506:	2380      	movs	r3, #128	@ 0x80
10046508:	021a      	lsls	r2, r3, #8
1004650a:	687b      	ldr	r3, [r7, #4]
1004650c:	0011      	movs	r1, r2
1004650e:	0018      	movs	r0, r3
10046510:	f000 fdc4 	bl	1004709c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10046514:	687b      	ldr	r3, [r7, #4]
10046516:	2240      	movs	r2, #64	@ 0x40
10046518:	2100      	movs	r1, #0
1004651a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
1004651c:	193b      	adds	r3, r7, r4
1004651e:	881a      	ldrh	r2, [r3, #0]
10046520:	230f      	movs	r3, #15
10046522:	18fb      	adds	r3, r7, r3
10046524:	7819      	ldrb	r1, [r3, #0]
10046526:	687b      	ldr	r3, [r7, #4]
10046528:	0018      	movs	r0, r3
1004652a:	f7ff f9c5 	bl	100458b8 <HAL_I2C_AddrCallback>
}
1004652e:	e01d      	b.n	1004656c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10046530:	2380      	movs	r3, #128	@ 0x80
10046532:	021a      	lsls	r2, r3, #8
10046534:	687b      	ldr	r3, [r7, #4]
10046536:	0011      	movs	r1, r2
10046538:	0018      	movs	r0, r3
1004653a:	f000 fdaf 	bl	1004709c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
1004653e:	687b      	ldr	r3, [r7, #4]
10046540:	2240      	movs	r2, #64	@ 0x40
10046542:	2100      	movs	r1, #0
10046544:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10046546:	230c      	movs	r3, #12
10046548:	18fb      	adds	r3, r7, r3
1004654a:	881a      	ldrh	r2, [r3, #0]
1004654c:	230f      	movs	r3, #15
1004654e:	18fb      	adds	r3, r7, r3
10046550:	7819      	ldrb	r1, [r3, #0]
10046552:	687b      	ldr	r3, [r7, #4]
10046554:	0018      	movs	r0, r3
10046556:	f7ff f9af 	bl	100458b8 <HAL_I2C_AddrCallback>
}
1004655a:	e007      	b.n	1004656c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
1004655c:	687b      	ldr	r3, [r7, #4]
1004655e:	681b      	ldr	r3, [r3, #0]
10046560:	2208      	movs	r2, #8
10046562:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10046564:	687b      	ldr	r3, [r7, #4]
10046566:	2240      	movs	r2, #64	@ 0x40
10046568:	2100      	movs	r1, #0
1004656a:	5499      	strb	r1, [r3, r2]
}
1004656c:	46c0      	nop			@ (mov r8, r8)
1004656e:	46bd      	mov	sp, r7
10046570:	b004      	add	sp, #16
10046572:	bdb0      	pop	{r4, r5, r7, pc}

10046574 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
10046574:	b580      	push	{r7, lr}
10046576:	b082      	sub	sp, #8
10046578:	af00      	add	r7, sp, #0
1004657a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004657c:	687b      	ldr	r3, [r7, #4]
1004657e:	2242      	movs	r2, #66	@ 0x42
10046580:	2100      	movs	r1, #0
10046582:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10046584:	687b      	ldr	r3, [r7, #4]
10046586:	2241      	movs	r2, #65	@ 0x41
10046588:	5c9b      	ldrb	r3, [r3, r2]
1004658a:	b2db      	uxtb	r3, r3
1004658c:	2b21      	cmp	r3, #33	@ 0x21
1004658e:	d117      	bne.n	100465c0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
10046590:	687b      	ldr	r3, [r7, #4]
10046592:	2241      	movs	r2, #65	@ 0x41
10046594:	2120      	movs	r1, #32
10046596:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10046598:	687b      	ldr	r3, [r7, #4]
1004659a:	2211      	movs	r2, #17
1004659c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
1004659e:	687b      	ldr	r3, [r7, #4]
100465a0:	2200      	movs	r2, #0
100465a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100465a4:	687b      	ldr	r3, [r7, #4]
100465a6:	2101      	movs	r1, #1
100465a8:	0018      	movs	r0, r3
100465aa:	f000 fd77 	bl	1004709c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100465ae:	687b      	ldr	r3, [r7, #4]
100465b0:	2240      	movs	r2, #64	@ 0x40
100465b2:	2100      	movs	r1, #0
100465b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
100465b6:	687b      	ldr	r3, [r7, #4]
100465b8:	0018      	movs	r0, r3
100465ba:	f7ff f95d 	bl	10045878 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
100465be:	e016      	b.n	100465ee <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
100465c0:	687b      	ldr	r3, [r7, #4]
100465c2:	2241      	movs	r2, #65	@ 0x41
100465c4:	2120      	movs	r1, #32
100465c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
100465c8:	687b      	ldr	r3, [r7, #4]
100465ca:	2212      	movs	r2, #18
100465cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
100465ce:	687b      	ldr	r3, [r7, #4]
100465d0:	2200      	movs	r2, #0
100465d2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
100465d4:	687b      	ldr	r3, [r7, #4]
100465d6:	2102      	movs	r1, #2
100465d8:	0018      	movs	r0, r3
100465da:	f000 fd5f 	bl	1004709c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
100465de:	687b      	ldr	r3, [r7, #4]
100465e0:	2240      	movs	r2, #64	@ 0x40
100465e2:	2100      	movs	r1, #0
100465e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
100465e6:	687b      	ldr	r3, [r7, #4]
100465e8:	0018      	movs	r0, r3
100465ea:	f7ff f94d 	bl	10045888 <HAL_I2C_MasterRxCpltCallback>
}
100465ee:	46c0      	nop			@ (mov r8, r8)
100465f0:	46bd      	mov	sp, r7
100465f2:	b002      	add	sp, #8
100465f4:	bd80      	pop	{r7, pc}
	...

100465f8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
100465f8:	b580      	push	{r7, lr}
100465fa:	b084      	sub	sp, #16
100465fc:	af00      	add	r7, sp, #0
100465fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10046600:	687b      	ldr	r3, [r7, #4]
10046602:	681b      	ldr	r3, [r3, #0]
10046604:	681b      	ldr	r3, [r3, #0]
10046606:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10046608:	687b      	ldr	r3, [r7, #4]
1004660a:	2242      	movs	r2, #66	@ 0x42
1004660c:	2100      	movs	r1, #0
1004660e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10046610:	68fb      	ldr	r3, [r7, #12]
10046612:	0b9b      	lsrs	r3, r3, #14
10046614:	001a      	movs	r2, r3
10046616:	2301      	movs	r3, #1
10046618:	4013      	ands	r3, r2
1004661a:	d008      	beq.n	1004662e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004661c:	687b      	ldr	r3, [r7, #4]
1004661e:	681b      	ldr	r3, [r3, #0]
10046620:	681a      	ldr	r2, [r3, #0]
10046622:	687b      	ldr	r3, [r7, #4]
10046624:	681b      	ldr	r3, [r3, #0]
10046626:	4925      	ldr	r1, [pc, #148]	@ (100466bc <I2C_ITSlaveSeqCplt+0xc4>)
10046628:	400a      	ands	r2, r1
1004662a:	601a      	str	r2, [r3, #0]
1004662c:	e00d      	b.n	1004664a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1004662e:	68fb      	ldr	r3, [r7, #12]
10046630:	0bdb      	lsrs	r3, r3, #15
10046632:	001a      	movs	r2, r3
10046634:	2301      	movs	r3, #1
10046636:	4013      	ands	r3, r2
10046638:	d007      	beq.n	1004664a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004663a:	687b      	ldr	r3, [r7, #4]
1004663c:	681b      	ldr	r3, [r3, #0]
1004663e:	681a      	ldr	r2, [r3, #0]
10046640:	687b      	ldr	r3, [r7, #4]
10046642:	681b      	ldr	r3, [r3, #0]
10046644:	491e      	ldr	r1, [pc, #120]	@ (100466c0 <I2C_ITSlaveSeqCplt+0xc8>)
10046646:	400a      	ands	r2, r1
10046648:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
1004664a:	687b      	ldr	r3, [r7, #4]
1004664c:	2241      	movs	r2, #65	@ 0x41
1004664e:	5c9b      	ldrb	r3, [r3, r2]
10046650:	b2db      	uxtb	r3, r3
10046652:	2b29      	cmp	r3, #41	@ 0x29
10046654:	d114      	bne.n	10046680 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10046656:	687b      	ldr	r3, [r7, #4]
10046658:	2241      	movs	r2, #65	@ 0x41
1004665a:	2128      	movs	r1, #40	@ 0x28
1004665c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1004665e:	687b      	ldr	r3, [r7, #4]
10046660:	2221      	movs	r2, #33	@ 0x21
10046662:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10046664:	687b      	ldr	r3, [r7, #4]
10046666:	2101      	movs	r1, #1
10046668:	0018      	movs	r0, r3
1004666a:	f000 fd17 	bl	1004709c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004666e:	687b      	ldr	r3, [r7, #4]
10046670:	2240      	movs	r2, #64	@ 0x40
10046672:	2100      	movs	r1, #0
10046674:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10046676:	687b      	ldr	r3, [r7, #4]
10046678:	0018      	movs	r0, r3
1004667a:	f7ff f90d 	bl	10045898 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004667e:	e019      	b.n	100466b4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10046680:	687b      	ldr	r3, [r7, #4]
10046682:	2241      	movs	r2, #65	@ 0x41
10046684:	5c9b      	ldrb	r3, [r3, r2]
10046686:	b2db      	uxtb	r3, r3
10046688:	2b2a      	cmp	r3, #42	@ 0x2a
1004668a:	d113      	bne.n	100466b4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004668c:	687b      	ldr	r3, [r7, #4]
1004668e:	2241      	movs	r2, #65	@ 0x41
10046690:	2128      	movs	r1, #40	@ 0x28
10046692:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10046694:	687b      	ldr	r3, [r7, #4]
10046696:	2222      	movs	r2, #34	@ 0x22
10046698:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004669a:	687b      	ldr	r3, [r7, #4]
1004669c:	2102      	movs	r1, #2
1004669e:	0018      	movs	r0, r3
100466a0:	f000 fcfc 	bl	1004709c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
100466a4:	687b      	ldr	r3, [r7, #4]
100466a6:	2240      	movs	r2, #64	@ 0x40
100466a8:	2100      	movs	r1, #0
100466aa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
100466ac:	687b      	ldr	r3, [r7, #4]
100466ae:	0018      	movs	r0, r3
100466b0:	f7ff f8fa 	bl	100458a8 <HAL_I2C_SlaveRxCpltCallback>
}
100466b4:	46c0      	nop			@ (mov r8, r8)
100466b6:	46bd      	mov	sp, r7
100466b8:	b004      	add	sp, #16
100466ba:	bd80      	pop	{r7, pc}
100466bc:	ffffbfff 	.word	0xffffbfff
100466c0:	ffff7fff 	.word	0xffff7fff

100466c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100466c4:	b580      	push	{r7, lr}
100466c6:	b086      	sub	sp, #24
100466c8:	af00      	add	r7, sp, #0
100466ca:	6078      	str	r0, [r7, #4]
100466cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
100466ce:	683b      	ldr	r3, [r7, #0]
100466d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100466d2:	687b      	ldr	r3, [r7, #4]
100466d4:	681b      	ldr	r3, [r3, #0]
100466d6:	2220      	movs	r2, #32
100466d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
100466da:	687b      	ldr	r3, [r7, #4]
100466dc:	2241      	movs	r2, #65	@ 0x41
100466de:	5c9b      	ldrb	r3, [r3, r2]
100466e0:	b2db      	uxtb	r3, r3
100466e2:	2b21      	cmp	r3, #33	@ 0x21
100466e4:	d108      	bne.n	100466f8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100466e6:	687b      	ldr	r3, [r7, #4]
100466e8:	2101      	movs	r1, #1
100466ea:	0018      	movs	r0, r3
100466ec:	f000 fcd6 	bl	1004709c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
100466f0:	687b      	ldr	r3, [r7, #4]
100466f2:	2211      	movs	r2, #17
100466f4:	631a      	str	r2, [r3, #48]	@ 0x30
100466f6:	e00d      	b.n	10046714 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100466f8:	687b      	ldr	r3, [r7, #4]
100466fa:	2241      	movs	r2, #65	@ 0x41
100466fc:	5c9b      	ldrb	r3, [r3, r2]
100466fe:	b2db      	uxtb	r3, r3
10046700:	2b22      	cmp	r3, #34	@ 0x22
10046702:	d107      	bne.n	10046714 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10046704:	687b      	ldr	r3, [r7, #4]
10046706:	2102      	movs	r1, #2
10046708:	0018      	movs	r0, r3
1004670a:	f000 fcc7 	bl	1004709c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
1004670e:	687b      	ldr	r3, [r7, #4]
10046710:	2212      	movs	r2, #18
10046712:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10046714:	687b      	ldr	r3, [r7, #4]
10046716:	681b      	ldr	r3, [r3, #0]
10046718:	685a      	ldr	r2, [r3, #4]
1004671a:	687b      	ldr	r3, [r7, #4]
1004671c:	681b      	ldr	r3, [r3, #0]
1004671e:	4950      	ldr	r1, [pc, #320]	@ (10046860 <I2C_ITMasterCplt+0x19c>)
10046720:	400a      	ands	r2, r1
10046722:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
10046724:	687b      	ldr	r3, [r7, #4]
10046726:	2200      	movs	r2, #0
10046728:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1004672a:	687b      	ldr	r3, [r7, #4]
1004672c:	4a4d      	ldr	r2, [pc, #308]	@ (10046864 <I2C_ITMasterCplt+0x1a0>)
1004672e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
10046730:	697b      	ldr	r3, [r7, #20]
10046732:	091b      	lsrs	r3, r3, #4
10046734:	001a      	movs	r2, r3
10046736:	2301      	movs	r3, #1
10046738:	4013      	ands	r3, r2
1004673a:	d009      	beq.n	10046750 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004673c:	687b      	ldr	r3, [r7, #4]
1004673e:	681b      	ldr	r3, [r3, #0]
10046740:	2210      	movs	r2, #16
10046742:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10046744:	687b      	ldr	r3, [r7, #4]
10046746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046748:	2204      	movs	r2, #4
1004674a:	431a      	orrs	r2, r3
1004674c:	687b      	ldr	r3, [r7, #4]
1004674e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
10046750:	687b      	ldr	r3, [r7, #4]
10046752:	2241      	movs	r2, #65	@ 0x41
10046754:	5c9b      	ldrb	r3, [r3, r2]
10046756:	b2db      	uxtb	r3, r3
10046758:	2b60      	cmp	r3, #96	@ 0x60
1004675a:	d10b      	bne.n	10046774 <I2C_ITMasterCplt+0xb0>
1004675c:	697b      	ldr	r3, [r7, #20]
1004675e:	089b      	lsrs	r3, r3, #2
10046760:	001a      	movs	r2, r3
10046762:	2301      	movs	r3, #1
10046764:	4013      	ands	r3, r2
10046766:	d005      	beq.n	10046774 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
10046768:	687b      	ldr	r3, [r7, #4]
1004676a:	681b      	ldr	r3, [r3, #0]
1004676c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004676e:	b2db      	uxtb	r3, r3
10046770:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
10046772:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10046774:	687b      	ldr	r3, [r7, #4]
10046776:	0018      	movs	r0, r3
10046778:	f000 fb8b 	bl	10046e92 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
1004677c:	687b      	ldr	r3, [r7, #4]
1004677e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046780:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
10046782:	687b      	ldr	r3, [r7, #4]
10046784:	2241      	movs	r2, #65	@ 0x41
10046786:	5c9b      	ldrb	r3, [r3, r2]
10046788:	b2db      	uxtb	r3, r3
1004678a:	2b60      	cmp	r3, #96	@ 0x60
1004678c:	d002      	beq.n	10046794 <I2C_ITMasterCplt+0xd0>
1004678e:	693b      	ldr	r3, [r7, #16]
10046790:	2b00      	cmp	r3, #0
10046792:	d007      	beq.n	100467a4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10046794:	687b      	ldr	r3, [r7, #4]
10046796:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10046798:	687b      	ldr	r3, [r7, #4]
1004679a:	0011      	movs	r1, r2
1004679c:	0018      	movs	r0, r3
1004679e:	f000 fa4d 	bl	10046c3c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
100467a2:	e058      	b.n	10046856 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
100467a4:	687b      	ldr	r3, [r7, #4]
100467a6:	2241      	movs	r2, #65	@ 0x41
100467a8:	5c9b      	ldrb	r3, [r3, r2]
100467aa:	b2db      	uxtb	r3, r3
100467ac:	2b21      	cmp	r3, #33	@ 0x21
100467ae:	d126      	bne.n	100467fe <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
100467b0:	687b      	ldr	r3, [r7, #4]
100467b2:	2241      	movs	r2, #65	@ 0x41
100467b4:	2120      	movs	r1, #32
100467b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
100467b8:	687b      	ldr	r3, [r7, #4]
100467ba:	2200      	movs	r2, #0
100467bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
100467be:	687b      	ldr	r3, [r7, #4]
100467c0:	2242      	movs	r2, #66	@ 0x42
100467c2:	5c9b      	ldrb	r3, [r3, r2]
100467c4:	b2db      	uxtb	r3, r3
100467c6:	2b40      	cmp	r3, #64	@ 0x40
100467c8:	d10c      	bne.n	100467e4 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
100467ca:	687b      	ldr	r3, [r7, #4]
100467cc:	2242      	movs	r2, #66	@ 0x42
100467ce:	2100      	movs	r1, #0
100467d0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
100467d2:	687b      	ldr	r3, [r7, #4]
100467d4:	2240      	movs	r2, #64	@ 0x40
100467d6:	2100      	movs	r1, #0
100467d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
100467da:	687b      	ldr	r3, [r7, #4]
100467dc:	0018      	movs	r0, r3
100467de:	f7fb fddf 	bl	100423a0 <HAL_I2C_MemTxCpltCallback>
}
100467e2:	e038      	b.n	10046856 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
100467e4:	687b      	ldr	r3, [r7, #4]
100467e6:	2242      	movs	r2, #66	@ 0x42
100467e8:	2100      	movs	r1, #0
100467ea:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
100467ec:	687b      	ldr	r3, [r7, #4]
100467ee:	2240      	movs	r2, #64	@ 0x40
100467f0:	2100      	movs	r1, #0
100467f2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
100467f4:	687b      	ldr	r3, [r7, #4]
100467f6:	0018      	movs	r0, r3
100467f8:	f7ff f83e 	bl	10045878 <HAL_I2C_MasterTxCpltCallback>
}
100467fc:	e02b      	b.n	10046856 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100467fe:	687b      	ldr	r3, [r7, #4]
10046800:	2241      	movs	r2, #65	@ 0x41
10046802:	5c9b      	ldrb	r3, [r3, r2]
10046804:	b2db      	uxtb	r3, r3
10046806:	2b22      	cmp	r3, #34	@ 0x22
10046808:	d125      	bne.n	10046856 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
1004680a:	687b      	ldr	r3, [r7, #4]
1004680c:	2241      	movs	r2, #65	@ 0x41
1004680e:	2120      	movs	r1, #32
10046810:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10046812:	687b      	ldr	r3, [r7, #4]
10046814:	2200      	movs	r2, #0
10046816:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10046818:	687b      	ldr	r3, [r7, #4]
1004681a:	2242      	movs	r2, #66	@ 0x42
1004681c:	5c9b      	ldrb	r3, [r3, r2]
1004681e:	b2db      	uxtb	r3, r3
10046820:	2b40      	cmp	r3, #64	@ 0x40
10046822:	d10c      	bne.n	1004683e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10046824:	687b      	ldr	r3, [r7, #4]
10046826:	2242      	movs	r2, #66	@ 0x42
10046828:	2100      	movs	r1, #0
1004682a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004682c:	687b      	ldr	r3, [r7, #4]
1004682e:	2240      	movs	r2, #64	@ 0x40
10046830:	2100      	movs	r1, #0
10046832:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
10046834:	687b      	ldr	r3, [r7, #4]
10046836:	0018      	movs	r0, r3
10046838:	f7fb fe3a 	bl	100424b0 <HAL_I2C_MemRxCpltCallback>
}
1004683c:	e00b      	b.n	10046856 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004683e:	687b      	ldr	r3, [r7, #4]
10046840:	2242      	movs	r2, #66	@ 0x42
10046842:	2100      	movs	r1, #0
10046844:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10046846:	687b      	ldr	r3, [r7, #4]
10046848:	2240      	movs	r2, #64	@ 0x40
1004684a:	2100      	movs	r1, #0
1004684c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
1004684e:	687b      	ldr	r3, [r7, #4]
10046850:	0018      	movs	r0, r3
10046852:	f7ff f819 	bl	10045888 <HAL_I2C_MasterRxCpltCallback>
}
10046856:	46c0      	nop			@ (mov r8, r8)
10046858:	46bd      	mov	sp, r7
1004685a:	b006      	add	sp, #24
1004685c:	bd80      	pop	{r7, pc}
1004685e:	46c0      	nop			@ (mov r8, r8)
10046860:	fe00e800 	.word	0xfe00e800
10046864:	ffff0000 	.word	0xffff0000

10046868 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10046868:	b580      	push	{r7, lr}
1004686a:	b086      	sub	sp, #24
1004686c:	af00      	add	r7, sp, #0
1004686e:	6078      	str	r0, [r7, #4]
10046870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10046872:	687b      	ldr	r3, [r7, #4]
10046874:	681b      	ldr	r3, [r3, #0]
10046876:	681b      	ldr	r3, [r3, #0]
10046878:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
1004687a:	683b      	ldr	r3, [r7, #0]
1004687c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
1004687e:	687b      	ldr	r3, [r7, #4]
10046880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046882:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10046884:	200b      	movs	r0, #11
10046886:	183b      	adds	r3, r7, r0
10046888:	687a      	ldr	r2, [r7, #4]
1004688a:	2141      	movs	r1, #65	@ 0x41
1004688c:	5c52      	ldrb	r2, [r2, r1]
1004688e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10046890:	687b      	ldr	r3, [r7, #4]
10046892:	681b      	ldr	r3, [r3, #0]
10046894:	2220      	movs	r2, #32
10046896:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10046898:	183b      	adds	r3, r7, r0
1004689a:	781b      	ldrb	r3, [r3, #0]
1004689c:	2b21      	cmp	r3, #33	@ 0x21
1004689e:	d003      	beq.n	100468a8 <I2C_ITSlaveCplt+0x40>
100468a0:	183b      	adds	r3, r7, r0
100468a2:	781b      	ldrb	r3, [r3, #0]
100468a4:	2b29      	cmp	r3, #41	@ 0x29
100468a6:	d109      	bne.n	100468bc <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
100468a8:	4ab0      	ldr	r2, [pc, #704]	@ (10046b6c <I2C_ITSlaveCplt+0x304>)
100468aa:	687b      	ldr	r3, [r7, #4]
100468ac:	0011      	movs	r1, r2
100468ae:	0018      	movs	r0, r3
100468b0:	f000 fbf4 	bl	1004709c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100468b4:	687b      	ldr	r3, [r7, #4]
100468b6:	2221      	movs	r2, #33	@ 0x21
100468b8:	631a      	str	r2, [r3, #48]	@ 0x30
100468ba:	e020      	b.n	100468fe <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
100468bc:	220b      	movs	r2, #11
100468be:	18bb      	adds	r3, r7, r2
100468c0:	781b      	ldrb	r3, [r3, #0]
100468c2:	2b22      	cmp	r3, #34	@ 0x22
100468c4:	d003      	beq.n	100468ce <I2C_ITSlaveCplt+0x66>
100468c6:	18bb      	adds	r3, r7, r2
100468c8:	781b      	ldrb	r3, [r3, #0]
100468ca:	2b2a      	cmp	r3, #42	@ 0x2a
100468cc:	d109      	bne.n	100468e2 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
100468ce:	4aa8      	ldr	r2, [pc, #672]	@ (10046b70 <I2C_ITSlaveCplt+0x308>)
100468d0:	687b      	ldr	r3, [r7, #4]
100468d2:	0011      	movs	r1, r2
100468d4:	0018      	movs	r0, r3
100468d6:	f000 fbe1 	bl	1004709c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100468da:	687b      	ldr	r3, [r7, #4]
100468dc:	2222      	movs	r2, #34	@ 0x22
100468de:	631a      	str	r2, [r3, #48]	@ 0x30
100468e0:	e00d      	b.n	100468fe <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
100468e2:	230b      	movs	r3, #11
100468e4:	18fb      	adds	r3, r7, r3
100468e6:	781b      	ldrb	r3, [r3, #0]
100468e8:	2b28      	cmp	r3, #40	@ 0x28
100468ea:	d108      	bne.n	100468fe <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
100468ec:	4aa1      	ldr	r2, [pc, #644]	@ (10046b74 <I2C_ITSlaveCplt+0x30c>)
100468ee:	687b      	ldr	r3, [r7, #4]
100468f0:	0011      	movs	r1, r2
100468f2:	0018      	movs	r0, r3
100468f4:	f000 fbd2 	bl	1004709c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
100468f8:	687b      	ldr	r3, [r7, #4]
100468fa:	2200      	movs	r2, #0
100468fc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
100468fe:	687b      	ldr	r3, [r7, #4]
10046900:	681b      	ldr	r3, [r3, #0]
10046902:	685a      	ldr	r2, [r3, #4]
10046904:	687b      	ldr	r3, [r7, #4]
10046906:	681b      	ldr	r3, [r3, #0]
10046908:	2180      	movs	r1, #128	@ 0x80
1004690a:	0209      	lsls	r1, r1, #8
1004690c:	430a      	orrs	r2, r1
1004690e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10046910:	687b      	ldr	r3, [r7, #4]
10046912:	681b      	ldr	r3, [r3, #0]
10046914:	685a      	ldr	r2, [r3, #4]
10046916:	687b      	ldr	r3, [r7, #4]
10046918:	681b      	ldr	r3, [r3, #0]
1004691a:	4997      	ldr	r1, [pc, #604]	@ (10046b78 <I2C_ITSlaveCplt+0x310>)
1004691c:	400a      	ands	r2, r1
1004691e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10046920:	687b      	ldr	r3, [r7, #4]
10046922:	0018      	movs	r0, r3
10046924:	f000 fab5 	bl	10046e92 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10046928:	693b      	ldr	r3, [r7, #16]
1004692a:	0b9b      	lsrs	r3, r3, #14
1004692c:	001a      	movs	r2, r3
1004692e:	2301      	movs	r3, #1
10046930:	4013      	ands	r3, r2
10046932:	d013      	beq.n	1004695c <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10046934:	687b      	ldr	r3, [r7, #4]
10046936:	681b      	ldr	r3, [r3, #0]
10046938:	681a      	ldr	r2, [r3, #0]
1004693a:	687b      	ldr	r3, [r7, #4]
1004693c:	681b      	ldr	r3, [r3, #0]
1004693e:	498f      	ldr	r1, [pc, #572]	@ (10046b7c <I2C_ITSlaveCplt+0x314>)
10046940:	400a      	ands	r2, r1
10046942:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10046944:	687b      	ldr	r3, [r7, #4]
10046946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046948:	2b00      	cmp	r3, #0
1004694a:	d020      	beq.n	1004698e <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
1004694c:	687b      	ldr	r3, [r7, #4]
1004694e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046950:	681b      	ldr	r3, [r3, #0]
10046952:	685b      	ldr	r3, [r3, #4]
10046954:	b29a      	uxth	r2, r3
10046956:	687b      	ldr	r3, [r7, #4]
10046958:	855a      	strh	r2, [r3, #42]	@ 0x2a
1004695a:	e018      	b.n	1004698e <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1004695c:	693b      	ldr	r3, [r7, #16]
1004695e:	0bdb      	lsrs	r3, r3, #15
10046960:	001a      	movs	r2, r3
10046962:	2301      	movs	r3, #1
10046964:	4013      	ands	r3, r2
10046966:	d012      	beq.n	1004698e <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10046968:	687b      	ldr	r3, [r7, #4]
1004696a:	681b      	ldr	r3, [r3, #0]
1004696c:	681a      	ldr	r2, [r3, #0]
1004696e:	687b      	ldr	r3, [r7, #4]
10046970:	681b      	ldr	r3, [r3, #0]
10046972:	4983      	ldr	r1, [pc, #524]	@ (10046b80 <I2C_ITSlaveCplt+0x318>)
10046974:	400a      	ands	r2, r1
10046976:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
10046978:	687b      	ldr	r3, [r7, #4]
1004697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004697c:	2b00      	cmp	r3, #0
1004697e:	d006      	beq.n	1004698e <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
10046980:	687b      	ldr	r3, [r7, #4]
10046982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046984:	681b      	ldr	r3, [r3, #0]
10046986:	685b      	ldr	r3, [r3, #4]
10046988:	b29a      	uxth	r2, r3
1004698a:	687b      	ldr	r3, [r7, #4]
1004698c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
1004698e:	697b      	ldr	r3, [r7, #20]
10046990:	089b      	lsrs	r3, r3, #2
10046992:	001a      	movs	r2, r3
10046994:	2301      	movs	r3, #1
10046996:	4013      	ands	r3, r2
10046998:	d020      	beq.n	100469dc <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
1004699a:	697b      	ldr	r3, [r7, #20]
1004699c:	2204      	movs	r2, #4
1004699e:	4393      	bics	r3, r2
100469a0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100469a2:	687b      	ldr	r3, [r7, #4]
100469a4:	681b      	ldr	r3, [r3, #0]
100469a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100469a8:	687b      	ldr	r3, [r7, #4]
100469aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100469ac:	b2d2      	uxtb	r2, r2
100469ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100469b0:	687b      	ldr	r3, [r7, #4]
100469b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100469b4:	1c5a      	adds	r2, r3, #1
100469b6:	687b      	ldr	r3, [r7, #4]
100469b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
100469ba:	687b      	ldr	r3, [r7, #4]
100469bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100469be:	2b00      	cmp	r3, #0
100469c0:	d00c      	beq.n	100469dc <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
100469c2:	687b      	ldr	r3, [r7, #4]
100469c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100469c6:	3b01      	subs	r3, #1
100469c8:	b29a      	uxth	r2, r3
100469ca:	687b      	ldr	r3, [r7, #4]
100469cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100469ce:	687b      	ldr	r3, [r7, #4]
100469d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100469d2:	b29b      	uxth	r3, r3
100469d4:	3b01      	subs	r3, #1
100469d6:	b29a      	uxth	r2, r3
100469d8:	687b      	ldr	r3, [r7, #4]
100469da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
100469dc:	687b      	ldr	r3, [r7, #4]
100469de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100469e0:	b29b      	uxth	r3, r3
100469e2:	2b00      	cmp	r3, #0
100469e4:	d005      	beq.n	100469f2 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100469e6:	687b      	ldr	r3, [r7, #4]
100469e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100469ea:	2204      	movs	r2, #4
100469ec:	431a      	orrs	r2, r3
100469ee:	687b      	ldr	r3, [r7, #4]
100469f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100469f2:	697b      	ldr	r3, [r7, #20]
100469f4:	091b      	lsrs	r3, r3, #4
100469f6:	001a      	movs	r2, r3
100469f8:	2301      	movs	r3, #1
100469fa:	4013      	ands	r3, r2
100469fc:	d051      	beq.n	10046aa2 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
100469fe:	693b      	ldr	r3, [r7, #16]
10046a00:	091b      	lsrs	r3, r3, #4
10046a02:	001a      	movs	r2, r3
10046a04:	2301      	movs	r3, #1
10046a06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10046a08:	d04b      	beq.n	10046aa2 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10046a0a:	687b      	ldr	r3, [r7, #4]
10046a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10046a0e:	b29b      	uxth	r3, r3
10046a10:	2b00      	cmp	r3, #0
10046a12:	d12d      	bne.n	10046a70 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10046a14:	687b      	ldr	r3, [r7, #4]
10046a16:	2241      	movs	r2, #65	@ 0x41
10046a18:	5c9b      	ldrb	r3, [r3, r2]
10046a1a:	b2db      	uxtb	r3, r3
10046a1c:	2b28      	cmp	r3, #40	@ 0x28
10046a1e:	d10b      	bne.n	10046a38 <I2C_ITSlaveCplt+0x1d0>
10046a20:	68fa      	ldr	r2, [r7, #12]
10046a22:	2380      	movs	r3, #128	@ 0x80
10046a24:	049b      	lsls	r3, r3, #18
10046a26:	429a      	cmp	r2, r3
10046a28:	d106      	bne.n	10046a38 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10046a2a:	697a      	ldr	r2, [r7, #20]
10046a2c:	687b      	ldr	r3, [r7, #4]
10046a2e:	0011      	movs	r1, r2
10046a30:	0018      	movs	r0, r3
10046a32:	f000 f8a9 	bl	10046b88 <I2C_ITListenCplt>
10046a36:	e034      	b.n	10046aa2 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10046a38:	687b      	ldr	r3, [r7, #4]
10046a3a:	2241      	movs	r2, #65	@ 0x41
10046a3c:	5c9b      	ldrb	r3, [r3, r2]
10046a3e:	b2db      	uxtb	r3, r3
10046a40:	2b29      	cmp	r3, #41	@ 0x29
10046a42:	d110      	bne.n	10046a66 <I2C_ITSlaveCplt+0x1fe>
10046a44:	68fb      	ldr	r3, [r7, #12]
10046a46:	4a4f      	ldr	r2, [pc, #316]	@ (10046b84 <I2C_ITSlaveCplt+0x31c>)
10046a48:	4293      	cmp	r3, r2
10046a4a:	d00c      	beq.n	10046a66 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046a4c:	687b      	ldr	r3, [r7, #4]
10046a4e:	681b      	ldr	r3, [r3, #0]
10046a50:	2210      	movs	r2, #16
10046a52:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10046a54:	687b      	ldr	r3, [r7, #4]
10046a56:	0018      	movs	r0, r3
10046a58:	f000 fa1b 	bl	10046e92 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10046a5c:	687b      	ldr	r3, [r7, #4]
10046a5e:	0018      	movs	r0, r3
10046a60:	f7ff fdca 	bl	100465f8 <I2C_ITSlaveSeqCplt>
10046a64:	e01d      	b.n	10046aa2 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046a66:	687b      	ldr	r3, [r7, #4]
10046a68:	681b      	ldr	r3, [r3, #0]
10046a6a:	2210      	movs	r2, #16
10046a6c:	61da      	str	r2, [r3, #28]
10046a6e:	e018      	b.n	10046aa2 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046a70:	687b      	ldr	r3, [r7, #4]
10046a72:	681b      	ldr	r3, [r3, #0]
10046a74:	2210      	movs	r2, #16
10046a76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10046a78:	687b      	ldr	r3, [r7, #4]
10046a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046a7c:	2204      	movs	r2, #4
10046a7e:	431a      	orrs	r2, r3
10046a80:	687b      	ldr	r3, [r7, #4]
10046a82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10046a84:	68fb      	ldr	r3, [r7, #12]
10046a86:	2b00      	cmp	r3, #0
10046a88:	d004      	beq.n	10046a94 <I2C_ITSlaveCplt+0x22c>
10046a8a:	68fa      	ldr	r2, [r7, #12]
10046a8c:	2380      	movs	r3, #128	@ 0x80
10046a8e:	045b      	lsls	r3, r3, #17
10046a90:	429a      	cmp	r2, r3
10046a92:	d106      	bne.n	10046aa2 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10046a94:	687b      	ldr	r3, [r7, #4]
10046a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10046a98:	687b      	ldr	r3, [r7, #4]
10046a9a:	0011      	movs	r1, r2
10046a9c:	0018      	movs	r0, r3
10046a9e:	f000 f8cd 	bl	10046c3c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
10046aa2:	687b      	ldr	r3, [r7, #4]
10046aa4:	2242      	movs	r2, #66	@ 0x42
10046aa6:	2100      	movs	r1, #0
10046aa8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10046aaa:	687b      	ldr	r3, [r7, #4]
10046aac:	2200      	movs	r2, #0
10046aae:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
10046ab0:	687b      	ldr	r3, [r7, #4]
10046ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046ab4:	2b00      	cmp	r3, #0
10046ab6:	d013      	beq.n	10046ae0 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10046ab8:	687b      	ldr	r3, [r7, #4]
10046aba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10046abc:	687b      	ldr	r3, [r7, #4]
10046abe:	0011      	movs	r1, r2
10046ac0:	0018      	movs	r0, r3
10046ac2:	f000 f8bb 	bl	10046c3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10046ac6:	687b      	ldr	r3, [r7, #4]
10046ac8:	2241      	movs	r2, #65	@ 0x41
10046aca:	5c9b      	ldrb	r3, [r3, r2]
10046acc:	b2db      	uxtb	r3, r3
10046ace:	2b28      	cmp	r3, #40	@ 0x28
10046ad0:	d147      	bne.n	10046b62 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
10046ad2:	697a      	ldr	r2, [r7, #20]
10046ad4:	687b      	ldr	r3, [r7, #4]
10046ad6:	0011      	movs	r1, r2
10046ad8:	0018      	movs	r0, r3
10046ada:	f000 f855 	bl	10046b88 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10046ade:	e040      	b.n	10046b62 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10046ae0:	687b      	ldr	r3, [r7, #4]
10046ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046ae4:	4a27      	ldr	r2, [pc, #156]	@ (10046b84 <I2C_ITSlaveCplt+0x31c>)
10046ae6:	4293      	cmp	r3, r2
10046ae8:	d016      	beq.n	10046b18 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
10046aea:	687b      	ldr	r3, [r7, #4]
10046aec:	0018      	movs	r0, r3
10046aee:	f7ff fd83 	bl	100465f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10046af2:	687b      	ldr	r3, [r7, #4]
10046af4:	4a23      	ldr	r2, [pc, #140]	@ (10046b84 <I2C_ITSlaveCplt+0x31c>)
10046af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10046af8:	687b      	ldr	r3, [r7, #4]
10046afa:	2241      	movs	r2, #65	@ 0x41
10046afc:	2120      	movs	r1, #32
10046afe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10046b00:	687b      	ldr	r3, [r7, #4]
10046b02:	2200      	movs	r2, #0
10046b04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10046b06:	687b      	ldr	r3, [r7, #4]
10046b08:	2240      	movs	r2, #64	@ 0x40
10046b0a:	2100      	movs	r1, #0
10046b0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
10046b0e:	687b      	ldr	r3, [r7, #4]
10046b10:	0018      	movs	r0, r3
10046b12:	f7fe fee1 	bl	100458d8 <HAL_I2C_ListenCpltCallback>
}
10046b16:	e024      	b.n	10046b62 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10046b18:	687b      	ldr	r3, [r7, #4]
10046b1a:	2241      	movs	r2, #65	@ 0x41
10046b1c:	5c9b      	ldrb	r3, [r3, r2]
10046b1e:	b2db      	uxtb	r3, r3
10046b20:	2b22      	cmp	r3, #34	@ 0x22
10046b22:	d10f      	bne.n	10046b44 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
10046b24:	687b      	ldr	r3, [r7, #4]
10046b26:	2241      	movs	r2, #65	@ 0x41
10046b28:	2120      	movs	r1, #32
10046b2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10046b2c:	687b      	ldr	r3, [r7, #4]
10046b2e:	2200      	movs	r2, #0
10046b30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10046b32:	687b      	ldr	r3, [r7, #4]
10046b34:	2240      	movs	r2, #64	@ 0x40
10046b36:	2100      	movs	r1, #0
10046b38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10046b3a:	687b      	ldr	r3, [r7, #4]
10046b3c:	0018      	movs	r0, r3
10046b3e:	f7fe feb3 	bl	100458a8 <HAL_I2C_SlaveRxCpltCallback>
}
10046b42:	e00e      	b.n	10046b62 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
10046b44:	687b      	ldr	r3, [r7, #4]
10046b46:	2241      	movs	r2, #65	@ 0x41
10046b48:	2120      	movs	r1, #32
10046b4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10046b4c:	687b      	ldr	r3, [r7, #4]
10046b4e:	2200      	movs	r2, #0
10046b50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10046b52:	687b      	ldr	r3, [r7, #4]
10046b54:	2240      	movs	r2, #64	@ 0x40
10046b56:	2100      	movs	r1, #0
10046b58:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10046b5a:	687b      	ldr	r3, [r7, #4]
10046b5c:	0018      	movs	r0, r3
10046b5e:	f7fe fe9b 	bl	10045898 <HAL_I2C_SlaveTxCpltCallback>
}
10046b62:	46c0      	nop			@ (mov r8, r8)
10046b64:	46bd      	mov	sp, r7
10046b66:	b006      	add	sp, #24
10046b68:	bd80      	pop	{r7, pc}
10046b6a:	46c0      	nop			@ (mov r8, r8)
10046b6c:	00008001 	.word	0x00008001
10046b70:	00008002 	.word	0x00008002
10046b74:	00008003 	.word	0x00008003
10046b78:	fe00e800 	.word	0xfe00e800
10046b7c:	ffffbfff 	.word	0xffffbfff
10046b80:	ffff7fff 	.word	0xffff7fff
10046b84:	ffff0000 	.word	0xffff0000

10046b88 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10046b88:	b580      	push	{r7, lr}
10046b8a:	b082      	sub	sp, #8
10046b8c:	af00      	add	r7, sp, #0
10046b8e:	6078      	str	r0, [r7, #4]
10046b90:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10046b92:	687b      	ldr	r3, [r7, #4]
10046b94:	4a27      	ldr	r2, [pc, #156]	@ (10046c34 <I2C_ITListenCplt+0xac>)
10046b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
10046b98:	687b      	ldr	r3, [r7, #4]
10046b9a:	2200      	movs	r2, #0
10046b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
10046b9e:	687b      	ldr	r3, [r7, #4]
10046ba0:	2241      	movs	r2, #65	@ 0x41
10046ba2:	2120      	movs	r1, #32
10046ba4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
10046ba6:	687b      	ldr	r3, [r7, #4]
10046ba8:	2242      	movs	r2, #66	@ 0x42
10046baa:	2100      	movs	r1, #0
10046bac:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10046bae:	687b      	ldr	r3, [r7, #4]
10046bb0:	2200      	movs	r2, #0
10046bb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
10046bb4:	683b      	ldr	r3, [r7, #0]
10046bb6:	089b      	lsrs	r3, r3, #2
10046bb8:	001a      	movs	r2, r3
10046bba:	2301      	movs	r3, #1
10046bbc:	4013      	ands	r3, r2
10046bbe:	d022      	beq.n	10046c06 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10046bc0:	687b      	ldr	r3, [r7, #4]
10046bc2:	681b      	ldr	r3, [r3, #0]
10046bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10046bc6:	687b      	ldr	r3, [r7, #4]
10046bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10046bca:	b2d2      	uxtb	r2, r2
10046bcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10046bce:	687b      	ldr	r3, [r7, #4]
10046bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10046bd2:	1c5a      	adds	r2, r3, #1
10046bd4:	687b      	ldr	r3, [r7, #4]
10046bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10046bd8:	687b      	ldr	r3, [r7, #4]
10046bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10046bdc:	2b00      	cmp	r3, #0
10046bde:	d012      	beq.n	10046c06 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
10046be0:	687b      	ldr	r3, [r7, #4]
10046be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10046be4:	3b01      	subs	r3, #1
10046be6:	b29a      	uxth	r2, r3
10046be8:	687b      	ldr	r3, [r7, #4]
10046bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10046bec:	687b      	ldr	r3, [r7, #4]
10046bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10046bf0:	b29b      	uxth	r3, r3
10046bf2:	3b01      	subs	r3, #1
10046bf4:	b29a      	uxth	r2, r3
10046bf6:	687b      	ldr	r3, [r7, #4]
10046bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10046bfa:	687b      	ldr	r3, [r7, #4]
10046bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046bfe:	2204      	movs	r2, #4
10046c00:	431a      	orrs	r2, r3
10046c02:	687b      	ldr	r3, [r7, #4]
10046c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10046c06:	4a0c      	ldr	r2, [pc, #48]	@ (10046c38 <I2C_ITListenCplt+0xb0>)
10046c08:	687b      	ldr	r3, [r7, #4]
10046c0a:	0011      	movs	r1, r2
10046c0c:	0018      	movs	r0, r3
10046c0e:	f000 fa45 	bl	1004709c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046c12:	687b      	ldr	r3, [r7, #4]
10046c14:	681b      	ldr	r3, [r3, #0]
10046c16:	2210      	movs	r2, #16
10046c18:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10046c1a:	687b      	ldr	r3, [r7, #4]
10046c1c:	2240      	movs	r2, #64	@ 0x40
10046c1e:	2100      	movs	r1, #0
10046c20:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
10046c22:	687b      	ldr	r3, [r7, #4]
10046c24:	0018      	movs	r0, r3
10046c26:	f7fe fe57 	bl	100458d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10046c2a:	46c0      	nop			@ (mov r8, r8)
10046c2c:	46bd      	mov	sp, r7
10046c2e:	b002      	add	sp, #8
10046c30:	bd80      	pop	{r7, pc}
10046c32:	46c0      	nop			@ (mov r8, r8)
10046c34:	ffff0000 	.word	0xffff0000
10046c38:	00008003 	.word	0x00008003

10046c3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10046c3c:	b580      	push	{r7, lr}
10046c3e:	b084      	sub	sp, #16
10046c40:	af00      	add	r7, sp, #0
10046c42:	6078      	str	r0, [r7, #4]
10046c44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10046c46:	200f      	movs	r0, #15
10046c48:	183b      	adds	r3, r7, r0
10046c4a:	687a      	ldr	r2, [r7, #4]
10046c4c:	2141      	movs	r1, #65	@ 0x41
10046c4e:	5c52      	ldrb	r2, [r2, r1]
10046c50:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
10046c52:	687b      	ldr	r3, [r7, #4]
10046c54:	2242      	movs	r2, #66	@ 0x42
10046c56:	2100      	movs	r1, #0
10046c58:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10046c5a:	687b      	ldr	r3, [r7, #4]
10046c5c:	4a72      	ldr	r2, [pc, #456]	@ (10046e28 <I2C_ITError+0x1ec>)
10046c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
10046c60:	687b      	ldr	r3, [r7, #4]
10046c62:	2200      	movs	r2, #0
10046c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
10046c66:	687b      	ldr	r3, [r7, #4]
10046c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10046c6a:	683b      	ldr	r3, [r7, #0]
10046c6c:	431a      	orrs	r2, r3
10046c6e:	687b      	ldr	r3, [r7, #4]
10046c70:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
10046c72:	183b      	adds	r3, r7, r0
10046c74:	781b      	ldrb	r3, [r3, #0]
10046c76:	2b28      	cmp	r3, #40	@ 0x28
10046c78:	d007      	beq.n	10046c8a <I2C_ITError+0x4e>
10046c7a:	183b      	adds	r3, r7, r0
10046c7c:	781b      	ldrb	r3, [r3, #0]
10046c7e:	2b29      	cmp	r3, #41	@ 0x29
10046c80:	d003      	beq.n	10046c8a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
10046c82:	183b      	adds	r3, r7, r0
10046c84:	781b      	ldrb	r3, [r3, #0]
10046c86:	2b2a      	cmp	r3, #42	@ 0x2a
10046c88:	d10c      	bne.n	10046ca4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10046c8a:	687b      	ldr	r3, [r7, #4]
10046c8c:	2103      	movs	r1, #3
10046c8e:	0018      	movs	r0, r3
10046c90:	f000 fa04 	bl	1004709c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10046c94:	687b      	ldr	r3, [r7, #4]
10046c96:	2241      	movs	r2, #65	@ 0x41
10046c98:	2128      	movs	r1, #40	@ 0x28
10046c9a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
10046c9c:	687b      	ldr	r3, [r7, #4]
10046c9e:	4a63      	ldr	r2, [pc, #396]	@ (10046e2c <I2C_ITError+0x1f0>)
10046ca0:	635a      	str	r2, [r3, #52]	@ 0x34
10046ca2:	e032      	b.n	10046d0a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10046ca4:	4a62      	ldr	r2, [pc, #392]	@ (10046e30 <I2C_ITError+0x1f4>)
10046ca6:	687b      	ldr	r3, [r7, #4]
10046ca8:	0011      	movs	r1, r2
10046caa:	0018      	movs	r0, r3
10046cac:	f000 f9f6 	bl	1004709c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10046cb0:	687b      	ldr	r3, [r7, #4]
10046cb2:	0018      	movs	r0, r3
10046cb4:	f000 f8ed 	bl	10046e92 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
10046cb8:	687b      	ldr	r3, [r7, #4]
10046cba:	2241      	movs	r2, #65	@ 0x41
10046cbc:	5c9b      	ldrb	r3, [r3, r2]
10046cbe:	b2db      	uxtb	r3, r3
10046cc0:	2b60      	cmp	r3, #96	@ 0x60
10046cc2:	d01f      	beq.n	10046d04 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
10046cc4:	687b      	ldr	r3, [r7, #4]
10046cc6:	2241      	movs	r2, #65	@ 0x41
10046cc8:	2120      	movs	r1, #32
10046cca:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
10046ccc:	687b      	ldr	r3, [r7, #4]
10046cce:	681b      	ldr	r3, [r3, #0]
10046cd0:	699b      	ldr	r3, [r3, #24]
10046cd2:	2220      	movs	r2, #32
10046cd4:	4013      	ands	r3, r2
10046cd6:	2b20      	cmp	r3, #32
10046cd8:	d114      	bne.n	10046d04 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
10046cda:	687b      	ldr	r3, [r7, #4]
10046cdc:	681b      	ldr	r3, [r3, #0]
10046cde:	699b      	ldr	r3, [r3, #24]
10046ce0:	2210      	movs	r2, #16
10046ce2:	4013      	ands	r3, r2
10046ce4:	2b10      	cmp	r3, #16
10046ce6:	d109      	bne.n	10046cfc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046ce8:	687b      	ldr	r3, [r7, #4]
10046cea:	681b      	ldr	r3, [r3, #0]
10046cec:	2210      	movs	r2, #16
10046cee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10046cf0:	687b      	ldr	r3, [r7, #4]
10046cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046cf4:	2204      	movs	r2, #4
10046cf6:	431a      	orrs	r2, r3
10046cf8:	687b      	ldr	r3, [r7, #4]
10046cfa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10046cfc:	687b      	ldr	r3, [r7, #4]
10046cfe:	681b      	ldr	r3, [r3, #0]
10046d00:	2220      	movs	r2, #32
10046d02:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
10046d04:	687b      	ldr	r3, [r7, #4]
10046d06:	2200      	movs	r2, #0
10046d08:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
10046d0a:	687b      	ldr	r3, [r7, #4]
10046d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046d0e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
10046d10:	687b      	ldr	r3, [r7, #4]
10046d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046d14:	2b00      	cmp	r3, #0
10046d16:	d03b      	beq.n	10046d90 <I2C_ITError+0x154>
10046d18:	68bb      	ldr	r3, [r7, #8]
10046d1a:	2b11      	cmp	r3, #17
10046d1c:	d002      	beq.n	10046d24 <I2C_ITError+0xe8>
10046d1e:	68bb      	ldr	r3, [r7, #8]
10046d20:	2b21      	cmp	r3, #33	@ 0x21
10046d22:	d135      	bne.n	10046d90 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
10046d24:	687b      	ldr	r3, [r7, #4]
10046d26:	681b      	ldr	r3, [r3, #0]
10046d28:	681a      	ldr	r2, [r3, #0]
10046d2a:	2380      	movs	r3, #128	@ 0x80
10046d2c:	01db      	lsls	r3, r3, #7
10046d2e:	401a      	ands	r2, r3
10046d30:	2380      	movs	r3, #128	@ 0x80
10046d32:	01db      	lsls	r3, r3, #7
10046d34:	429a      	cmp	r2, r3
10046d36:	d107      	bne.n	10046d48 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10046d38:	687b      	ldr	r3, [r7, #4]
10046d3a:	681b      	ldr	r3, [r3, #0]
10046d3c:	681a      	ldr	r2, [r3, #0]
10046d3e:	687b      	ldr	r3, [r7, #4]
10046d40:	681b      	ldr	r3, [r3, #0]
10046d42:	493c      	ldr	r1, [pc, #240]	@ (10046e34 <I2C_ITError+0x1f8>)
10046d44:	400a      	ands	r2, r1
10046d46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10046d48:	687b      	ldr	r3, [r7, #4]
10046d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046d4c:	0018      	movs	r0, r3
10046d4e:	f7fd ff87 	bl	10044c60 <HAL_DMA_GetState>
10046d52:	0003      	movs	r3, r0
10046d54:	2b01      	cmp	r3, #1
10046d56:	d016      	beq.n	10046d86 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
10046d58:	687b      	ldr	r3, [r7, #4]
10046d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046d5c:	4a36      	ldr	r2, [pc, #216]	@ (10046e38 <I2C_ITError+0x1fc>)
10046d5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10046d60:	687b      	ldr	r3, [r7, #4]
10046d62:	2240      	movs	r2, #64	@ 0x40
10046d64:	2100      	movs	r1, #0
10046d66:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10046d68:	687b      	ldr	r3, [r7, #4]
10046d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046d6c:	0018      	movs	r0, r3
10046d6e:	f7fd ff30 	bl	10044bd2 <HAL_DMA_Abort_IT>
10046d72:	1e03      	subs	r3, r0, #0
10046d74:	d051      	beq.n	10046e1a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
10046d76:	687b      	ldr	r3, [r7, #4]
10046d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10046d7c:	687b      	ldr	r3, [r7, #4]
10046d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046d80:	0018      	movs	r0, r3
10046d82:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10046d84:	e049      	b.n	10046e1a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
10046d86:	687b      	ldr	r3, [r7, #4]
10046d88:	0018      	movs	r0, r3
10046d8a:	f000 f859 	bl	10046e40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10046d8e:	e044      	b.n	10046e1a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
10046d90:	687b      	ldr	r3, [r7, #4]
10046d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046d94:	2b00      	cmp	r3, #0
10046d96:	d03b      	beq.n	10046e10 <I2C_ITError+0x1d4>
10046d98:	68bb      	ldr	r3, [r7, #8]
10046d9a:	2b12      	cmp	r3, #18
10046d9c:	d002      	beq.n	10046da4 <I2C_ITError+0x168>
10046d9e:	68bb      	ldr	r3, [r7, #8]
10046da0:	2b22      	cmp	r3, #34	@ 0x22
10046da2:	d135      	bne.n	10046e10 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
10046da4:	687b      	ldr	r3, [r7, #4]
10046da6:	681b      	ldr	r3, [r3, #0]
10046da8:	681a      	ldr	r2, [r3, #0]
10046daa:	2380      	movs	r3, #128	@ 0x80
10046dac:	021b      	lsls	r3, r3, #8
10046dae:	401a      	ands	r2, r3
10046db0:	2380      	movs	r3, #128	@ 0x80
10046db2:	021b      	lsls	r3, r3, #8
10046db4:	429a      	cmp	r2, r3
10046db6:	d107      	bne.n	10046dc8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10046db8:	687b      	ldr	r3, [r7, #4]
10046dba:	681b      	ldr	r3, [r3, #0]
10046dbc:	681a      	ldr	r2, [r3, #0]
10046dbe:	687b      	ldr	r3, [r7, #4]
10046dc0:	681b      	ldr	r3, [r3, #0]
10046dc2:	491e      	ldr	r1, [pc, #120]	@ (10046e3c <I2C_ITError+0x200>)
10046dc4:	400a      	ands	r2, r1
10046dc6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10046dc8:	687b      	ldr	r3, [r7, #4]
10046dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046dcc:	0018      	movs	r0, r3
10046dce:	f7fd ff47 	bl	10044c60 <HAL_DMA_GetState>
10046dd2:	0003      	movs	r3, r0
10046dd4:	2b01      	cmp	r3, #1
10046dd6:	d016      	beq.n	10046e06 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
10046dd8:	687b      	ldr	r3, [r7, #4]
10046dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046ddc:	4a16      	ldr	r2, [pc, #88]	@ (10046e38 <I2C_ITError+0x1fc>)
10046dde:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10046de0:	687b      	ldr	r3, [r7, #4]
10046de2:	2240      	movs	r2, #64	@ 0x40
10046de4:	2100      	movs	r1, #0
10046de6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10046de8:	687b      	ldr	r3, [r7, #4]
10046dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046dec:	0018      	movs	r0, r3
10046dee:	f7fd fef0 	bl	10044bd2 <HAL_DMA_Abort_IT>
10046df2:	1e03      	subs	r3, r0, #0
10046df4:	d013      	beq.n	10046e1e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
10046df6:	687b      	ldr	r3, [r7, #4]
10046df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10046dfc:	687b      	ldr	r3, [r7, #4]
10046dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046e00:	0018      	movs	r0, r3
10046e02:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10046e04:	e00b      	b.n	10046e1e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
10046e06:	687b      	ldr	r3, [r7, #4]
10046e08:	0018      	movs	r0, r3
10046e0a:	f000 f819 	bl	10046e40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10046e0e:	e006      	b.n	10046e1e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
10046e10:	687b      	ldr	r3, [r7, #4]
10046e12:	0018      	movs	r0, r3
10046e14:	f000 f814 	bl	10046e40 <I2C_TreatErrorCallback>
  }
}
10046e18:	e002      	b.n	10046e20 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10046e1a:	46c0      	nop			@ (mov r8, r8)
10046e1c:	e000      	b.n	10046e20 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10046e1e:	46c0      	nop			@ (mov r8, r8)
}
10046e20:	46c0      	nop			@ (mov r8, r8)
10046e22:	46bd      	mov	sp, r7
10046e24:	b004      	add	sp, #16
10046e26:	bd80      	pop	{r7, pc}
10046e28:	ffff0000 	.word	0xffff0000
10046e2c:	10045b7d 	.word	0x10045b7d
10046e30:	00008003 	.word	0x00008003
10046e34:	ffffbfff 	.word	0xffffbfff
10046e38:	10046ed7 	.word	0x10046ed7
10046e3c:	ffff7fff 	.word	0xffff7fff

10046e40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
10046e40:	b580      	push	{r7, lr}
10046e42:	b082      	sub	sp, #8
10046e44:	af00      	add	r7, sp, #0
10046e46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
10046e48:	687b      	ldr	r3, [r7, #4]
10046e4a:	2241      	movs	r2, #65	@ 0x41
10046e4c:	5c9b      	ldrb	r3, [r3, r2]
10046e4e:	b2db      	uxtb	r3, r3
10046e50:	2b60      	cmp	r3, #96	@ 0x60
10046e52:	d10f      	bne.n	10046e74 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10046e54:	687b      	ldr	r3, [r7, #4]
10046e56:	2241      	movs	r2, #65	@ 0x41
10046e58:	2120      	movs	r1, #32
10046e5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10046e5c:	687b      	ldr	r3, [r7, #4]
10046e5e:	2200      	movs	r2, #0
10046e60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10046e62:	687b      	ldr	r3, [r7, #4]
10046e64:	2240      	movs	r2, #64	@ 0x40
10046e66:	2100      	movs	r1, #0
10046e68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
10046e6a:	687b      	ldr	r3, [r7, #4]
10046e6c:	0018      	movs	r0, r3
10046e6e:	f7fe fd43 	bl	100458f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10046e72:	e00a      	b.n	10046e8a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
10046e74:	687b      	ldr	r3, [r7, #4]
10046e76:	2200      	movs	r2, #0
10046e78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10046e7a:	687b      	ldr	r3, [r7, #4]
10046e7c:	2240      	movs	r2, #64	@ 0x40
10046e7e:	2100      	movs	r1, #0
10046e80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
10046e82:	687b      	ldr	r3, [r7, #4]
10046e84:	0018      	movs	r0, r3
10046e86:	f7fe fd2f 	bl	100458e8 <HAL_I2C_ErrorCallback>
}
10046e8a:	46c0      	nop			@ (mov r8, r8)
10046e8c:	46bd      	mov	sp, r7
10046e8e:	b002      	add	sp, #8
10046e90:	bd80      	pop	{r7, pc}

10046e92 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10046e92:	b580      	push	{r7, lr}
10046e94:	b082      	sub	sp, #8
10046e96:	af00      	add	r7, sp, #0
10046e98:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10046e9a:	687b      	ldr	r3, [r7, #4]
10046e9c:	681b      	ldr	r3, [r3, #0]
10046e9e:	699b      	ldr	r3, [r3, #24]
10046ea0:	2202      	movs	r2, #2
10046ea2:	4013      	ands	r3, r2
10046ea4:	2b02      	cmp	r3, #2
10046ea6:	d103      	bne.n	10046eb0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10046ea8:	687b      	ldr	r3, [r7, #4]
10046eaa:	681b      	ldr	r3, [r3, #0]
10046eac:	2200      	movs	r2, #0
10046eae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10046eb0:	687b      	ldr	r3, [r7, #4]
10046eb2:	681b      	ldr	r3, [r3, #0]
10046eb4:	699b      	ldr	r3, [r3, #24]
10046eb6:	2201      	movs	r2, #1
10046eb8:	4013      	ands	r3, r2
10046eba:	2b01      	cmp	r3, #1
10046ebc:	d007      	beq.n	10046ece <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10046ebe:	687b      	ldr	r3, [r7, #4]
10046ec0:	681b      	ldr	r3, [r3, #0]
10046ec2:	699a      	ldr	r2, [r3, #24]
10046ec4:	687b      	ldr	r3, [r7, #4]
10046ec6:	681b      	ldr	r3, [r3, #0]
10046ec8:	2101      	movs	r1, #1
10046eca:	430a      	orrs	r2, r1
10046ecc:	619a      	str	r2, [r3, #24]
  }
}
10046ece:	46c0      	nop			@ (mov r8, r8)
10046ed0:	46bd      	mov	sp, r7
10046ed2:	b002      	add	sp, #8
10046ed4:	bd80      	pop	{r7, pc}

10046ed6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
10046ed6:	b580      	push	{r7, lr}
10046ed8:	b084      	sub	sp, #16
10046eda:	af00      	add	r7, sp, #0
10046edc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
10046ede:	687b      	ldr	r3, [r7, #4]
10046ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046ee2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
10046ee4:	68fb      	ldr	r3, [r7, #12]
10046ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046ee8:	2b00      	cmp	r3, #0
10046eea:	d003      	beq.n	10046ef4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10046eec:	68fb      	ldr	r3, [r7, #12]
10046eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046ef0:	2200      	movs	r2, #0
10046ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
10046ef4:	68fb      	ldr	r3, [r7, #12]
10046ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046ef8:	2b00      	cmp	r3, #0
10046efa:	d003      	beq.n	10046f04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10046efc:	68fb      	ldr	r3, [r7, #12]
10046efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046f00:	2200      	movs	r2, #0
10046f02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
10046f04:	68fb      	ldr	r3, [r7, #12]
10046f06:	0018      	movs	r0, r3
10046f08:	f7ff ff9a 	bl	10046e40 <I2C_TreatErrorCallback>
}
10046f0c:	46c0      	nop			@ (mov r8, r8)
10046f0e:	46bd      	mov	sp, r7
10046f10:	b004      	add	sp, #16
10046f12:	bd80      	pop	{r7, pc}

10046f14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10046f14:	b590      	push	{r4, r7, lr}
10046f16:	b087      	sub	sp, #28
10046f18:	af00      	add	r7, sp, #0
10046f1a:	60f8      	str	r0, [r7, #12]
10046f1c:	0008      	movs	r0, r1
10046f1e:	0011      	movs	r1, r2
10046f20:	607b      	str	r3, [r7, #4]
10046f22:	240a      	movs	r4, #10
10046f24:	193b      	adds	r3, r7, r4
10046f26:	1c02      	adds	r2, r0, #0
10046f28:	801a      	strh	r2, [r3, #0]
10046f2a:	2009      	movs	r0, #9
10046f2c:	183b      	adds	r3, r7, r0
10046f2e:	1c0a      	adds	r2, r1, #0
10046f30:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10046f32:	193b      	adds	r3, r7, r4
10046f34:	881b      	ldrh	r3, [r3, #0]
10046f36:	059b      	lsls	r3, r3, #22
10046f38:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10046f3a:	183b      	adds	r3, r7, r0
10046f3c:	781b      	ldrb	r3, [r3, #0]
10046f3e:	0419      	lsls	r1, r3, #16
10046f40:	23ff      	movs	r3, #255	@ 0xff
10046f42:	041b      	lsls	r3, r3, #16
10046f44:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10046f46:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10046f48:	687b      	ldr	r3, [r7, #4]
10046f4a:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10046f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10046f4e:	4313      	orrs	r3, r2
10046f50:	005b      	lsls	r3, r3, #1
10046f52:	085b      	lsrs	r3, r3, #1
10046f54:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10046f56:	68fb      	ldr	r3, [r7, #12]
10046f58:	681b      	ldr	r3, [r3, #0]
10046f5a:	685b      	ldr	r3, [r3, #4]
10046f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10046f5e:	0d51      	lsrs	r1, r2, #21
10046f60:	2280      	movs	r2, #128	@ 0x80
10046f62:	00d2      	lsls	r2, r2, #3
10046f64:	400a      	ands	r2, r1
10046f66:	4907      	ldr	r1, [pc, #28]	@ (10046f84 <I2C_TransferConfig+0x70>)
10046f68:	430a      	orrs	r2, r1
10046f6a:	43d2      	mvns	r2, r2
10046f6c:	401a      	ands	r2, r3
10046f6e:	0011      	movs	r1, r2
10046f70:	68fb      	ldr	r3, [r7, #12]
10046f72:	681b      	ldr	r3, [r3, #0]
10046f74:	697a      	ldr	r2, [r7, #20]
10046f76:	430a      	orrs	r2, r1
10046f78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10046f7a:	46c0      	nop			@ (mov r8, r8)
10046f7c:	46bd      	mov	sp, r7
10046f7e:	b007      	add	sp, #28
10046f80:	bd90      	pop	{r4, r7, pc}
10046f82:	46c0      	nop			@ (mov r8, r8)
10046f84:	03ff63ff 	.word	0x03ff63ff

10046f88 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
10046f88:	b580      	push	{r7, lr}
10046f8a:	b084      	sub	sp, #16
10046f8c:	af00      	add	r7, sp, #0
10046f8e:	6078      	str	r0, [r7, #4]
10046f90:	000a      	movs	r2, r1
10046f92:	1cbb      	adds	r3, r7, #2
10046f94:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
10046f96:	2300      	movs	r3, #0
10046f98:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
10046f9a:	687b      	ldr	r3, [r7, #4]
10046f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10046f9e:	4b3c      	ldr	r3, [pc, #240]	@ (10047090 <I2C_Enable_IRQ+0x108>)
10046fa0:	429a      	cmp	r2, r3
10046fa2:	d035      	beq.n	10047010 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
10046fa4:	687b      	ldr	r3, [r7, #4]
10046fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
10046fa8:	4b3a      	ldr	r3, [pc, #232]	@ (10047094 <I2C_Enable_IRQ+0x10c>)
10046faa:	429a      	cmp	r2, r3
10046fac:	d030      	beq.n	10047010 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
10046fae:	687b      	ldr	r3, [r7, #4]
10046fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
10046fb2:	4b39      	ldr	r3, [pc, #228]	@ (10047098 <I2C_Enable_IRQ+0x110>)
10046fb4:	429a      	cmp	r2, r3
10046fb6:	d02b      	beq.n	10047010 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10046fb8:	1cbb      	adds	r3, r7, #2
10046fba:	2200      	movs	r2, #0
10046fbc:	5e9b      	ldrsh	r3, [r3, r2]
10046fbe:	2b00      	cmp	r3, #0
10046fc0:	da03      	bge.n	10046fca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10046fc2:	68fb      	ldr	r3, [r7, #12]
10046fc4:	22b8      	movs	r2, #184	@ 0xb8
10046fc6:	4313      	orrs	r3, r2
10046fc8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10046fca:	1cbb      	adds	r3, r7, #2
10046fcc:	881b      	ldrh	r3, [r3, #0]
10046fce:	2201      	movs	r2, #1
10046fd0:	4013      	ands	r3, r2
10046fd2:	d003      	beq.n	10046fdc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
10046fd4:	68fb      	ldr	r3, [r7, #12]
10046fd6:	22f2      	movs	r2, #242	@ 0xf2
10046fd8:	4313      	orrs	r3, r2
10046fda:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10046fdc:	1cbb      	adds	r3, r7, #2
10046fde:	881b      	ldrh	r3, [r3, #0]
10046fe0:	2202      	movs	r2, #2
10046fe2:	4013      	ands	r3, r2
10046fe4:	d003      	beq.n	10046fee <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
10046fe6:	68fb      	ldr	r3, [r7, #12]
10046fe8:	22f4      	movs	r2, #244	@ 0xf4
10046fea:	4313      	orrs	r3, r2
10046fec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
10046fee:	1cbb      	adds	r3, r7, #2
10046ff0:	881b      	ldrh	r3, [r3, #0]
10046ff2:	2b10      	cmp	r3, #16
10046ff4:	d103      	bne.n	10046ffe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10046ff6:	68fb      	ldr	r3, [r7, #12]
10046ff8:	2290      	movs	r2, #144	@ 0x90
10046ffa:	4313      	orrs	r3, r2
10046ffc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
10046ffe:	1cbb      	adds	r3, r7, #2
10047000:	881b      	ldrh	r3, [r3, #0]
10047002:	2b20      	cmp	r3, #32
10047004:	d137      	bne.n	10047076 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
10047006:	68fb      	ldr	r3, [r7, #12]
10047008:	2220      	movs	r2, #32
1004700a:	4313      	orrs	r3, r2
1004700c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004700e:	e032      	b.n	10047076 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10047010:	1cbb      	adds	r3, r7, #2
10047012:	2200      	movs	r2, #0
10047014:	5e9b      	ldrsh	r3, [r3, r2]
10047016:	2b00      	cmp	r3, #0
10047018:	da03      	bge.n	10047022 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004701a:	68fb      	ldr	r3, [r7, #12]
1004701c:	22b8      	movs	r2, #184	@ 0xb8
1004701e:	4313      	orrs	r3, r2
10047020:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10047022:	1cbb      	adds	r3, r7, #2
10047024:	881b      	ldrh	r3, [r3, #0]
10047026:	2201      	movs	r2, #1
10047028:	4013      	ands	r3, r2
1004702a:	d003      	beq.n	10047034 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004702c:	68fb      	ldr	r3, [r7, #12]
1004702e:	22f2      	movs	r2, #242	@ 0xf2
10047030:	4313      	orrs	r3, r2
10047032:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10047034:	1cbb      	adds	r3, r7, #2
10047036:	881b      	ldrh	r3, [r3, #0]
10047038:	2202      	movs	r2, #2
1004703a:	4013      	ands	r3, r2
1004703c:	d003      	beq.n	10047046 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004703e:	68fb      	ldr	r3, [r7, #12]
10047040:	22f4      	movs	r2, #244	@ 0xf4
10047042:	4313      	orrs	r3, r2
10047044:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
10047046:	1cbb      	adds	r3, r7, #2
10047048:	881b      	ldrh	r3, [r3, #0]
1004704a:	2b10      	cmp	r3, #16
1004704c:	d103      	bne.n	10047056 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004704e:	68fb      	ldr	r3, [r7, #12]
10047050:	2290      	movs	r2, #144	@ 0x90
10047052:	4313      	orrs	r3, r2
10047054:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
10047056:	1cbb      	adds	r3, r7, #2
10047058:	881b      	ldrh	r3, [r3, #0]
1004705a:	2b20      	cmp	r3, #32
1004705c:	d103      	bne.n	10047066 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
1004705e:	68fb      	ldr	r3, [r7, #12]
10047060:	2260      	movs	r2, #96	@ 0x60
10047062:	4313      	orrs	r3, r2
10047064:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
10047066:	1cbb      	adds	r3, r7, #2
10047068:	881b      	ldrh	r3, [r3, #0]
1004706a:	2b40      	cmp	r3, #64	@ 0x40
1004706c:	d103      	bne.n	10047076 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
1004706e:	68fb      	ldr	r3, [r7, #12]
10047070:	2240      	movs	r2, #64	@ 0x40
10047072:	4313      	orrs	r3, r2
10047074:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
10047076:	687b      	ldr	r3, [r7, #4]
10047078:	681b      	ldr	r3, [r3, #0]
1004707a:	6819      	ldr	r1, [r3, #0]
1004707c:	687b      	ldr	r3, [r7, #4]
1004707e:	681b      	ldr	r3, [r3, #0]
10047080:	68fa      	ldr	r2, [r7, #12]
10047082:	430a      	orrs	r2, r1
10047084:	601a      	str	r2, [r3, #0]
}
10047086:	46c0      	nop			@ (mov r8, r8)
10047088:	46bd      	mov	sp, r7
1004708a:	b004      	add	sp, #16
1004708c:	bd80      	pop	{r7, pc}
1004708e:	46c0      	nop			@ (mov r8, r8)
10047090:	10045da5 	.word	0x10045da5
10047094:	1004623d 	.word	0x1004623d
10047098:	10045fbd 	.word	0x10045fbd

1004709c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004709c:	b580      	push	{r7, lr}
1004709e:	b084      	sub	sp, #16
100470a0:	af00      	add	r7, sp, #0
100470a2:	6078      	str	r0, [r7, #4]
100470a4:	000a      	movs	r2, r1
100470a6:	1cbb      	adds	r3, r7, #2
100470a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
100470aa:	2300      	movs	r3, #0
100470ac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
100470ae:	1cbb      	adds	r3, r7, #2
100470b0:	881b      	ldrh	r3, [r3, #0]
100470b2:	2201      	movs	r2, #1
100470b4:	4013      	ands	r3, r2
100470b6:	d010      	beq.n	100470da <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
100470b8:	68fb      	ldr	r3, [r7, #12]
100470ba:	2242      	movs	r2, #66	@ 0x42
100470bc:	4313      	orrs	r3, r2
100470be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100470c0:	687b      	ldr	r3, [r7, #4]
100470c2:	2241      	movs	r2, #65	@ 0x41
100470c4:	5c9b      	ldrb	r3, [r3, r2]
100470c6:	b2db      	uxtb	r3, r3
100470c8:	001a      	movs	r2, r3
100470ca:	2328      	movs	r3, #40	@ 0x28
100470cc:	4013      	ands	r3, r2
100470ce:	2b28      	cmp	r3, #40	@ 0x28
100470d0:	d003      	beq.n	100470da <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100470d2:	68fb      	ldr	r3, [r7, #12]
100470d4:	22b0      	movs	r2, #176	@ 0xb0
100470d6:	4313      	orrs	r3, r2
100470d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
100470da:	1cbb      	adds	r3, r7, #2
100470dc:	881b      	ldrh	r3, [r3, #0]
100470de:	2202      	movs	r2, #2
100470e0:	4013      	ands	r3, r2
100470e2:	d010      	beq.n	10047106 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
100470e4:	68fb      	ldr	r3, [r7, #12]
100470e6:	2244      	movs	r2, #68	@ 0x44
100470e8:	4313      	orrs	r3, r2
100470ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100470ec:	687b      	ldr	r3, [r7, #4]
100470ee:	2241      	movs	r2, #65	@ 0x41
100470f0:	5c9b      	ldrb	r3, [r3, r2]
100470f2:	b2db      	uxtb	r3, r3
100470f4:	001a      	movs	r2, r3
100470f6:	2328      	movs	r3, #40	@ 0x28
100470f8:	4013      	ands	r3, r2
100470fa:	2b28      	cmp	r3, #40	@ 0x28
100470fc:	d003      	beq.n	10047106 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100470fe:	68fb      	ldr	r3, [r7, #12]
10047100:	22b0      	movs	r2, #176	@ 0xb0
10047102:	4313      	orrs	r3, r2
10047104:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10047106:	1cbb      	adds	r3, r7, #2
10047108:	2200      	movs	r2, #0
1004710a:	5e9b      	ldrsh	r3, [r3, r2]
1004710c:	2b00      	cmp	r3, #0
1004710e:	da03      	bge.n	10047118 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10047110:	68fb      	ldr	r3, [r7, #12]
10047112:	22b8      	movs	r2, #184	@ 0xb8
10047114:	4313      	orrs	r3, r2
10047116:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
10047118:	1cbb      	adds	r3, r7, #2
1004711a:	881b      	ldrh	r3, [r3, #0]
1004711c:	2b10      	cmp	r3, #16
1004711e:	d103      	bne.n	10047128 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10047120:	68fb      	ldr	r3, [r7, #12]
10047122:	2290      	movs	r2, #144	@ 0x90
10047124:	4313      	orrs	r3, r2
10047126:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
10047128:	1cbb      	adds	r3, r7, #2
1004712a:	881b      	ldrh	r3, [r3, #0]
1004712c:	2b20      	cmp	r3, #32
1004712e:	d103      	bne.n	10047138 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
10047130:	68fb      	ldr	r3, [r7, #12]
10047132:	2220      	movs	r2, #32
10047134:	4313      	orrs	r3, r2
10047136:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
10047138:	1cbb      	adds	r3, r7, #2
1004713a:	881b      	ldrh	r3, [r3, #0]
1004713c:	2b40      	cmp	r3, #64	@ 0x40
1004713e:	d103      	bne.n	10047148 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
10047140:	68fb      	ldr	r3, [r7, #12]
10047142:	2240      	movs	r2, #64	@ 0x40
10047144:	4313      	orrs	r3, r2
10047146:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
10047148:	687b      	ldr	r3, [r7, #4]
1004714a:	681b      	ldr	r3, [r3, #0]
1004714c:	681a      	ldr	r2, [r3, #0]
1004714e:	68fb      	ldr	r3, [r7, #12]
10047150:	43d9      	mvns	r1, r3
10047152:	687b      	ldr	r3, [r7, #4]
10047154:	681b      	ldr	r3, [r3, #0]
10047156:	400a      	ands	r2, r1
10047158:	601a      	str	r2, [r3, #0]
}
1004715a:	46c0      	nop			@ (mov r8, r8)
1004715c:	46bd      	mov	sp, r7
1004715e:	b004      	add	sp, #16
10047160:	bd80      	pop	{r7, pc}
	...

10047164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10047164:	b580      	push	{r7, lr}
10047166:	b082      	sub	sp, #8
10047168:	af00      	add	r7, sp, #0
1004716a:	6078      	str	r0, [r7, #4]
1004716c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004716e:	687b      	ldr	r3, [r7, #4]
10047170:	2241      	movs	r2, #65	@ 0x41
10047172:	5c9b      	ldrb	r3, [r3, r2]
10047174:	b2db      	uxtb	r3, r3
10047176:	2b20      	cmp	r3, #32
10047178:	d138      	bne.n	100471ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004717a:	687b      	ldr	r3, [r7, #4]
1004717c:	2240      	movs	r2, #64	@ 0x40
1004717e:	5c9b      	ldrb	r3, [r3, r2]
10047180:	2b01      	cmp	r3, #1
10047182:	d101      	bne.n	10047188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
10047184:	2302      	movs	r3, #2
10047186:	e032      	b.n	100471ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
10047188:	687b      	ldr	r3, [r7, #4]
1004718a:	2240      	movs	r2, #64	@ 0x40
1004718c:	2101      	movs	r1, #1
1004718e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10047190:	687b      	ldr	r3, [r7, #4]
10047192:	2241      	movs	r2, #65	@ 0x41
10047194:	2124      	movs	r1, #36	@ 0x24
10047196:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10047198:	687b      	ldr	r3, [r7, #4]
1004719a:	681b      	ldr	r3, [r3, #0]
1004719c:	681a      	ldr	r2, [r3, #0]
1004719e:	687b      	ldr	r3, [r7, #4]
100471a0:	681b      	ldr	r3, [r3, #0]
100471a2:	2101      	movs	r1, #1
100471a4:	438a      	bics	r2, r1
100471a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
100471a8:	687b      	ldr	r3, [r7, #4]
100471aa:	681b      	ldr	r3, [r3, #0]
100471ac:	681a      	ldr	r2, [r3, #0]
100471ae:	687b      	ldr	r3, [r7, #4]
100471b0:	681b      	ldr	r3, [r3, #0]
100471b2:	4911      	ldr	r1, [pc, #68]	@ (100471f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
100471b4:	400a      	ands	r2, r1
100471b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
100471b8:	687b      	ldr	r3, [r7, #4]
100471ba:	681b      	ldr	r3, [r3, #0]
100471bc:	6819      	ldr	r1, [r3, #0]
100471be:	687b      	ldr	r3, [r7, #4]
100471c0:	681b      	ldr	r3, [r3, #0]
100471c2:	683a      	ldr	r2, [r7, #0]
100471c4:	430a      	orrs	r2, r1
100471c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
100471c8:	687b      	ldr	r3, [r7, #4]
100471ca:	681b      	ldr	r3, [r3, #0]
100471cc:	681a      	ldr	r2, [r3, #0]
100471ce:	687b      	ldr	r3, [r7, #4]
100471d0:	681b      	ldr	r3, [r3, #0]
100471d2:	2101      	movs	r1, #1
100471d4:	430a      	orrs	r2, r1
100471d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
100471d8:	687b      	ldr	r3, [r7, #4]
100471da:	2241      	movs	r2, #65	@ 0x41
100471dc:	2120      	movs	r1, #32
100471de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100471e0:	687b      	ldr	r3, [r7, #4]
100471e2:	2240      	movs	r2, #64	@ 0x40
100471e4:	2100      	movs	r1, #0
100471e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
100471e8:	2300      	movs	r3, #0
100471ea:	e000      	b.n	100471ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
100471ec:	2302      	movs	r3, #2
  }
}
100471ee:	0018      	movs	r0, r3
100471f0:	46bd      	mov	sp, r7
100471f2:	b002      	add	sp, #8
100471f4:	bd80      	pop	{r7, pc}
100471f6:	46c0      	nop			@ (mov r8, r8)
100471f8:	ffffefff 	.word	0xffffefff

100471fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
100471fc:	b580      	push	{r7, lr}
100471fe:	b084      	sub	sp, #16
10047200:	af00      	add	r7, sp, #0
10047202:	6078      	str	r0, [r7, #4]
10047204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10047206:	687b      	ldr	r3, [r7, #4]
10047208:	2241      	movs	r2, #65	@ 0x41
1004720a:	5c9b      	ldrb	r3, [r3, r2]
1004720c:	b2db      	uxtb	r3, r3
1004720e:	2b20      	cmp	r3, #32
10047210:	d139      	bne.n	10047286 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10047212:	687b      	ldr	r3, [r7, #4]
10047214:	2240      	movs	r2, #64	@ 0x40
10047216:	5c9b      	ldrb	r3, [r3, r2]
10047218:	2b01      	cmp	r3, #1
1004721a:	d101      	bne.n	10047220 <HAL_I2CEx_ConfigDigitalFilter+0x24>
1004721c:	2302      	movs	r3, #2
1004721e:	e033      	b.n	10047288 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10047220:	687b      	ldr	r3, [r7, #4]
10047222:	2240      	movs	r2, #64	@ 0x40
10047224:	2101      	movs	r1, #1
10047226:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10047228:	687b      	ldr	r3, [r7, #4]
1004722a:	2241      	movs	r2, #65	@ 0x41
1004722c:	2124      	movs	r1, #36	@ 0x24
1004722e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10047230:	687b      	ldr	r3, [r7, #4]
10047232:	681b      	ldr	r3, [r3, #0]
10047234:	681a      	ldr	r2, [r3, #0]
10047236:	687b      	ldr	r3, [r7, #4]
10047238:	681b      	ldr	r3, [r3, #0]
1004723a:	2101      	movs	r1, #1
1004723c:	438a      	bics	r2, r1
1004723e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10047240:	687b      	ldr	r3, [r7, #4]
10047242:	681b      	ldr	r3, [r3, #0]
10047244:	681b      	ldr	r3, [r3, #0]
10047246:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10047248:	68fb      	ldr	r3, [r7, #12]
1004724a:	4a11      	ldr	r2, [pc, #68]	@ (10047290 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
1004724c:	4013      	ands	r3, r2
1004724e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10047250:	683b      	ldr	r3, [r7, #0]
10047252:	021b      	lsls	r3, r3, #8
10047254:	68fa      	ldr	r2, [r7, #12]
10047256:	4313      	orrs	r3, r2
10047258:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
1004725a:	687b      	ldr	r3, [r7, #4]
1004725c:	681b      	ldr	r3, [r3, #0]
1004725e:	68fa      	ldr	r2, [r7, #12]
10047260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10047262:	687b      	ldr	r3, [r7, #4]
10047264:	681b      	ldr	r3, [r3, #0]
10047266:	681a      	ldr	r2, [r3, #0]
10047268:	687b      	ldr	r3, [r7, #4]
1004726a:	681b      	ldr	r3, [r3, #0]
1004726c:	2101      	movs	r1, #1
1004726e:	430a      	orrs	r2, r1
10047270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10047272:	687b      	ldr	r3, [r7, #4]
10047274:	2241      	movs	r2, #65	@ 0x41
10047276:	2120      	movs	r1, #32
10047278:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004727a:	687b      	ldr	r3, [r7, #4]
1004727c:	2240      	movs	r2, #64	@ 0x40
1004727e:	2100      	movs	r1, #0
10047280:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10047282:	2300      	movs	r3, #0
10047284:	e000      	b.n	10047288 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
10047286:	2302      	movs	r3, #2
  }
}
10047288:	0018      	movs	r0, r3
1004728a:	46bd      	mov	sp, r7
1004728c:	b004      	add	sp, #16
1004728e:	bd80      	pop	{r7, pc}
10047290:	fffff0ff 	.word	0xfffff0ff

10047294 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
10047294:	b580      	push	{r7, lr}
10047296:	b084      	sub	sp, #16
10047298:	af00      	add	r7, sp, #0
1004729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1004729c:	230f      	movs	r3, #15
1004729e:	18fb      	adds	r3, r7, r3
100472a0:	2200      	movs	r2, #0
100472a2:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
100472a4:	687b      	ldr	r3, [r7, #4]
100472a6:	2b00      	cmp	r3, #0
100472a8:	d045      	beq.n	10047336 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
100472aa:	687b      	ldr	r3, [r7, #4]
100472ac:	791b      	ldrb	r3, [r3, #4]
100472ae:	b2db      	uxtb	r3, r3
100472b0:	2b00      	cmp	r3, #0
100472b2:	d103      	bne.n	100472bc <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
100472b4:	687b      	ldr	r3, [r7, #4]
100472b6:	0018      	movs	r0, r3
100472b8:	f7fc fe20 	bl	10043efc <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
100472bc:	f7fd fb58 	bl	10044970 <HAL_GetTick>
100472c0:	0003      	movs	r3, r0
100472c2:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
100472c4:	687b      	ldr	r3, [r7, #4]
100472c6:	2202      	movs	r2, #2
100472c8:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
100472ca:	e011      	b.n	100472f0 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
100472cc:	687b      	ldr	r3, [r7, #4]
100472ce:	681b      	ldr	r3, [r3, #0]
100472d0:	2201      	movs	r2, #1
100472d2:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
100472d4:	f7fd fb4c 	bl	10044970 <HAL_GetTick>
100472d8:	0002      	movs	r2, r0
100472da:	68bb      	ldr	r3, [r7, #8]
100472dc:	1ad2      	subs	r2, r2, r3
100472de:	23fa      	movs	r3, #250	@ 0xfa
100472e0:	009b      	lsls	r3, r3, #2
100472e2:	429a      	cmp	r2, r3
100472e4:	d904      	bls.n	100472f0 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
100472e6:	230f      	movs	r3, #15
100472e8:	18fb      	adds	r3, r7, r3
100472ea:	2203      	movs	r2, #3
100472ec:	701a      	strb	r2, [r3, #0]
        break;
100472ee:	e006      	b.n	100472fe <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
100472f0:	687b      	ldr	r3, [r7, #4]
100472f2:	681b      	ldr	r3, [r3, #0]
100472f4:	681b      	ldr	r3, [r3, #0]
100472f6:	2201      	movs	r2, #1
100472f8:	4013      	ands	r3, r2
100472fa:	2b01      	cmp	r3, #1
100472fc:	d1e6      	bne.n	100472cc <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
100472fe:	230f      	movs	r3, #15
10047300:	18fb      	adds	r3, r7, r3
10047302:	781b      	ldrb	r3, [r3, #0]
10047304:	2b00      	cmp	r3, #0
10047306:	d10f      	bne.n	10047328 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
10047308:	687b      	ldr	r3, [r7, #4]
1004730a:	681b      	ldr	r3, [r3, #0]
1004730c:	689a      	ldr	r2, [r3, #8]
1004730e:	687b      	ldr	r3, [r7, #4]
10047310:	681b      	ldr	r3, [r3, #0]
10047312:	21d0      	movs	r1, #208	@ 0xd0
10047314:	0349      	lsls	r1, r1, #13
10047316:	430a      	orrs	r2, r1
10047318:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004731a:	687b      	ldr	r3, [r7, #4]
1004731c:	2200      	movs	r2, #0
1004731e:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
10047320:	687b      	ldr	r3, [r7, #4]
10047322:	2201      	movs	r2, #1
10047324:	711a      	strb	r2, [r3, #4]
10047326:	e00a      	b.n	1004733e <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
10047328:	687b      	ldr	r3, [r7, #4]
1004732a:	2204      	movs	r2, #4
1004732c:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
1004732e:	687b      	ldr	r3, [r7, #4]
10047330:	2203      	movs	r2, #3
10047332:	711a      	strb	r2, [r3, #4]
10047334:	e003      	b.n	1004733e <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
10047336:	230f      	movs	r3, #15
10047338:	18fb      	adds	r3, r7, r3
1004733a:	2201      	movs	r2, #1
1004733c:	701a      	strb	r2, [r3, #0]
  }

  return err;
1004733e:	230f      	movs	r3, #15
10047340:	18fb      	adds	r3, r7, r3
10047342:	781b      	ldrb	r3, [r3, #0]
}
10047344:	0018      	movs	r0, r3
10047346:	46bd      	mov	sp, r7
10047348:	b004      	add	sp, #16
1004734a:	bd80      	pop	{r7, pc}

1004734c <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004734c:	b580      	push	{r7, lr}
1004734e:	b084      	sub	sp, #16
10047350:	af00      	add	r7, sp, #0
10047352:	6078      	str	r0, [r7, #4]
10047354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10047356:	230f      	movs	r3, #15
10047358:	18fb      	adds	r3, r7, r3
1004735a:	2200      	movs	r2, #0
1004735c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004735e:	687b      	ldr	r3, [r7, #4]
10047360:	2b00      	cmp	r3, #0
10047362:	d003      	beq.n	1004736c <HAL_PWREx_DisableGPIOPullUp+0x20>
10047364:	687b      	ldr	r3, [r7, #4]
10047366:	2b01      	cmp	r3, #1
10047368:	d008      	beq.n	1004737c <HAL_PWREx_DisableGPIOPullUp+0x30>
1004736a:	e00f      	b.n	1004738c <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004736c:	4b0d      	ldr	r3, [pc, #52]	@ (100473a4 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004736e:	6a1a      	ldr	r2, [r3, #32]
10047370:	683b      	ldr	r3, [r7, #0]
10047372:	43d9      	mvns	r1, r3
10047374:	4b0b      	ldr	r3, [pc, #44]	@ (100473a4 <HAL_PWREx_DisableGPIOPullUp+0x58>)
10047376:	400a      	ands	r2, r1
10047378:	621a      	str	r2, [r3, #32]
      break;
1004737a:	e00c      	b.n	10047396 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004737c:	4b09      	ldr	r3, [pc, #36]	@ (100473a4 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004737e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047380:	683b      	ldr	r3, [r7, #0]
10047382:	43d9      	mvns	r1, r3
10047384:	4b07      	ldr	r3, [pc, #28]	@ (100473a4 <HAL_PWREx_DisableGPIOPullUp+0x58>)
10047386:	400a      	ands	r2, r1
10047388:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004738a:	e004      	b.n	10047396 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
1004738c:	230f      	movs	r3, #15
1004738e:	18fb      	adds	r3, r7, r3
10047390:	2201      	movs	r2, #1
10047392:	701a      	strb	r2, [r3, #0]
      break;
10047394:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10047396:	230f      	movs	r3, #15
10047398:	18fb      	adds	r3, r7, r3
1004739a:	781b      	ldrb	r3, [r3, #0]
}
1004739c:	0018      	movs	r0, r3
1004739e:	46bd      	mov	sp, r7
100473a0:	b004      	add	sp, #16
100473a2:	bd80      	pop	{r7, pc}
100473a4:	48500000 	.word	0x48500000

100473a8 <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
100473a8:	b580      	push	{r7, lr}
100473aa:	b084      	sub	sp, #16
100473ac:	af00      	add	r7, sp, #0
100473ae:	6078      	str	r0, [r7, #4]
100473b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
100473b2:	230f      	movs	r3, #15
100473b4:	18fb      	adds	r3, r7, r3
100473b6:	2200      	movs	r2, #0
100473b8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
100473ba:	687b      	ldr	r3, [r7, #4]
100473bc:	2b00      	cmp	r3, #0
100473be:	d003      	beq.n	100473c8 <HAL_PWREx_DisableGPIOPullDown+0x20>
100473c0:	687b      	ldr	r3, [r7, #4]
100473c2:	2b01      	cmp	r3, #1
100473c4:	d008      	beq.n	100473d8 <HAL_PWREx_DisableGPIOPullDown+0x30>
100473c6:	e00f      	b.n	100473e8 <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
100473c8:	4b0d      	ldr	r3, [pc, #52]	@ (10047400 <HAL_PWREx_DisableGPIOPullDown+0x58>)
100473ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100473cc:	683b      	ldr	r3, [r7, #0]
100473ce:	43d9      	mvns	r1, r3
100473d0:	4b0b      	ldr	r3, [pc, #44]	@ (10047400 <HAL_PWREx_DisableGPIOPullDown+0x58>)
100473d2:	400a      	ands	r2, r1
100473d4:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
100473d6:	e00c      	b.n	100473f2 <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
100473d8:	4b09      	ldr	r3, [pc, #36]	@ (10047400 <HAL_PWREx_DisableGPIOPullDown+0x58>)
100473da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100473dc:	683b      	ldr	r3, [r7, #0]
100473de:	43d9      	mvns	r1, r3
100473e0:	4b07      	ldr	r3, [pc, #28]	@ (10047400 <HAL_PWREx_DisableGPIOPullDown+0x58>)
100473e2:	400a      	ands	r2, r1
100473e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
100473e6:	e004      	b.n	100473f2 <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
100473e8:	230f      	movs	r3, #15
100473ea:	18fb      	adds	r3, r7, r3
100473ec:	2201      	movs	r2, #1
100473ee:	701a      	strb	r2, [r3, #0]
      break;
100473f0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
100473f2:	230f      	movs	r3, #15
100473f4:	18fb      	adds	r3, r7, r3
100473f6:	781b      	ldrb	r3, [r3, #0]
}
100473f8:	0018      	movs	r0, r3
100473fa:	46bd      	mov	sp, r7
100473fc:	b004      	add	sp, #16
100473fe:	bd80      	pop	{r7, pc}
10047400:	48500000 	.word	0x48500000

10047404 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10047404:	b580      	push	{r7, lr}
10047406:	b082      	sub	sp, #8
10047408:	af00      	add	r7, sp, #0
1004740a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
1004740c:	4b04      	ldr	r3, [pc, #16]	@ (10047420 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004740e:	681b      	ldr	r3, [r3, #0]
10047410:	4b03      	ldr	r3, [pc, #12]	@ (10047420 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10047412:	687a      	ldr	r2, [r7, #4]
10047414:	601a      	str	r2, [r3, #0]
}
10047416:	46c0      	nop			@ (mov r8, r8)
10047418:	46bd      	mov	sp, r7
1004741a:	b002      	add	sp, #8
1004741c:	bd80      	pop	{r7, pc}
1004741e:	46c0      	nop			@ (mov r8, r8)
10047420:	200000c0 	.word	0x200000c0

10047424 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10047424:	b580      	push	{r7, lr}
10047426:	b082      	sub	sp, #8
10047428:	af00      	add	r7, sp, #0
1004742a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
1004742c:	4b07      	ldr	r3, [pc, #28]	@ (1004744c <LL_RADIO_SetWakeupInitDelay+0x28>)
1004742e:	685b      	ldr	r3, [r3, #4]
10047430:	4a07      	ldr	r2, [pc, #28]	@ (10047450 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10047432:	4013      	ands	r3, r2
10047434:	0019      	movs	r1, r3
10047436:	687b      	ldr	r3, [r7, #4]
10047438:	021b      	lsls	r3, r3, #8
1004743a:	041b      	lsls	r3, r3, #16
1004743c:	0c1a      	lsrs	r2, r3, #16
1004743e:	4b03      	ldr	r3, [pc, #12]	@ (1004744c <LL_RADIO_SetWakeupInitDelay+0x28>)
10047440:	430a      	orrs	r2, r1
10047442:	605a      	str	r2, [r3, #4]
}
10047444:	46c0      	nop			@ (mov r8, r8)
10047446:	46bd      	mov	sp, r7
10047448:	b002      	add	sp, #8
1004744a:	bd80      	pop	{r7, pc}
1004744c:	200000c0 	.word	0x200000c0
10047450:	ffff00ff 	.word	0xffff00ff

10047454 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10047454:	b580      	push	{r7, lr}
10047456:	b082      	sub	sp, #8
10047458:	af00      	add	r7, sp, #0
1004745a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
1004745c:	4b08      	ldr	r3, [pc, #32]	@ (10047480 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004745e:	685b      	ldr	r3, [r3, #4]
10047460:	4a08      	ldr	r2, [pc, #32]	@ (10047484 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10047462:	4013      	ands	r3, r2
10047464:	0019      	movs	r1, r3
10047466:	687b      	ldr	r3, [r7, #4]
10047468:	041a      	lsls	r2, r3, #16
1004746a:	23ff      	movs	r3, #255	@ 0xff
1004746c:	041b      	lsls	r3, r3, #16
1004746e:	401a      	ands	r2, r3
10047470:	4b03      	ldr	r3, [pc, #12]	@ (10047480 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10047472:	430a      	orrs	r2, r1
10047474:	605a      	str	r2, [r3, #4]
}
10047476:	46c0      	nop			@ (mov r8, r8)
10047478:	46bd      	mov	sp, r7
1004747a:	b002      	add	sp, #8
1004747c:	bd80      	pop	{r7, pc}
1004747e:	46c0      	nop			@ (mov r8, r8)
10047480:	200000c0 	.word	0x200000c0
10047484:	ff00ffff 	.word	0xff00ffff

10047488 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10047488:	b580      	push	{r7, lr}
1004748a:	b082      	sub	sp, #8
1004748c:	af00      	add	r7, sp, #0
1004748e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10047490:	4b06      	ldr	r3, [pc, #24]	@ (100474ac <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10047492:	685b      	ldr	r3, [r3, #4]
10047494:	021b      	lsls	r3, r3, #8
10047496:	0a19      	lsrs	r1, r3, #8
10047498:	687b      	ldr	r3, [r7, #4]
1004749a:	061a      	lsls	r2, r3, #24
1004749c:	4b03      	ldr	r3, [pc, #12]	@ (100474ac <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004749e:	430a      	orrs	r2, r1
100474a0:	605a      	str	r2, [r3, #4]
}
100474a2:	46c0      	nop			@ (mov r8, r8)
100474a4:	46bd      	mov	sp, r7
100474a6:	b002      	add	sp, #8
100474a8:	bd80      	pop	{r7, pc}
100474aa:	46c0      	nop			@ (mov r8, r8)
100474ac:	200000c0 	.word	0x200000c0

100474b0 <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
100474b0:	b580      	push	{r7, lr}
100474b2:	b082      	sub	sp, #8
100474b4:	af00      	add	r7, sp, #0
100474b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
100474b8:	4b07      	ldr	r3, [pc, #28]	@ (100474d8 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
100474ba:	689b      	ldr	r3, [r3, #8]
100474bc:	22ff      	movs	r2, #255	@ 0xff
100474be:	4393      	bics	r3, r2
100474c0:	0019      	movs	r1, r3
100474c2:	687b      	ldr	r3, [r7, #4]
100474c4:	22ff      	movs	r2, #255	@ 0xff
100474c6:	401a      	ands	r2, r3
100474c8:	4b03      	ldr	r3, [pc, #12]	@ (100474d8 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
100474ca:	430a      	orrs	r2, r1
100474cc:	609a      	str	r2, [r3, #8]
}
100474ce:	46c0      	nop			@ (mov r8, r8)
100474d0:	46bd      	mov	sp, r7
100474d2:	b002      	add	sp, #8
100474d4:	bd80      	pop	{r7, pc}
100474d6:	46c0      	nop			@ (mov r8, r8)
100474d8:	200000c0 	.word	0x200000c0

100474dc <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
100474dc:	b580      	push	{r7, lr}
100474de:	b082      	sub	sp, #8
100474e0:	af00      	add	r7, sp, #0
100474e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
100474e4:	4b07      	ldr	r3, [pc, #28]	@ (10047504 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
100474e6:	689b      	ldr	r3, [r3, #8]
100474e8:	4a07      	ldr	r2, [pc, #28]	@ (10047508 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
100474ea:	4013      	ands	r3, r2
100474ec:	0019      	movs	r1, r3
100474ee:	687b      	ldr	r3, [r7, #4]
100474f0:	021b      	lsls	r3, r3, #8
100474f2:	041b      	lsls	r3, r3, #16
100474f4:	0c1a      	lsrs	r2, r3, #16
100474f6:	4b03      	ldr	r3, [pc, #12]	@ (10047504 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
100474f8:	430a      	orrs	r2, r1
100474fa:	609a      	str	r2, [r3, #8]
}
100474fc:	46c0      	nop			@ (mov r8, r8)
100474fe:	46bd      	mov	sp, r7
10047500:	b002      	add	sp, #8
10047502:	bd80      	pop	{r7, pc}
10047504:	200000c0 	.word	0x200000c0
10047508:	ffff00ff 	.word	0xffff00ff

1004750c <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
1004750c:	b580      	push	{r7, lr}
1004750e:	b082      	sub	sp, #8
10047510:	af00      	add	r7, sp, #0
10047512:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10047514:	4b08      	ldr	r3, [pc, #32]	@ (10047538 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10047516:	689b      	ldr	r3, [r3, #8]
10047518:	4a08      	ldr	r2, [pc, #32]	@ (1004753c <LL_RADIO_SetReceivedCalDelayChk+0x30>)
1004751a:	4013      	ands	r3, r2
1004751c:	0019      	movs	r1, r3
1004751e:	687b      	ldr	r3, [r7, #4]
10047520:	041a      	lsls	r2, r3, #16
10047522:	23ff      	movs	r3, #255	@ 0xff
10047524:	041b      	lsls	r3, r3, #16
10047526:	401a      	ands	r2, r3
10047528:	4b03      	ldr	r3, [pc, #12]	@ (10047538 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004752a:	430a      	orrs	r2, r1
1004752c:	609a      	str	r2, [r3, #8]
}
1004752e:	46c0      	nop			@ (mov r8, r8)
10047530:	46bd      	mov	sp, r7
10047532:	b002      	add	sp, #8
10047534:	bd80      	pop	{r7, pc}
10047536:	46c0      	nop			@ (mov r8, r8)
10047538:	200000c0 	.word	0x200000c0
1004753c:	ff00ffff 	.word	0xff00ffff

10047540 <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
10047540:	b580      	push	{r7, lr}
10047542:	b082      	sub	sp, #8
10047544:	af00      	add	r7, sp, #0
10047546:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10047548:	4b06      	ldr	r3, [pc, #24]	@ (10047564 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004754a:	689b      	ldr	r3, [r3, #8]
1004754c:	021b      	lsls	r3, r3, #8
1004754e:	0a19      	lsrs	r1, r3, #8
10047550:	687b      	ldr	r3, [r7, #4]
10047552:	061a      	lsls	r2, r3, #24
10047554:	4b03      	ldr	r3, [pc, #12]	@ (10047564 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10047556:	430a      	orrs	r2, r1
10047558:	609a      	str	r2, [r3, #8]
}
1004755a:	46c0      	nop			@ (mov r8, r8)
1004755c:	46bd      	mov	sp, r7
1004755e:	b002      	add	sp, #8
10047560:	bd80      	pop	{r7, pc}
10047562:	46c0      	nop			@ (mov r8, r8)
10047564:	200000c0 	.word	0x200000c0

10047568 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
10047568:	b580      	push	{r7, lr}
1004756a:	b082      	sub	sp, #8
1004756c:	af00      	add	r7, sp, #0
1004756e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10047570:	4b07      	ldr	r3, [pc, #28]	@ (10047590 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10047572:	68db      	ldr	r3, [r3, #12]
10047574:	22ff      	movs	r2, #255	@ 0xff
10047576:	4393      	bics	r3, r2
10047578:	0019      	movs	r1, r3
1004757a:	687b      	ldr	r3, [r7, #4]
1004757c:	22ff      	movs	r2, #255	@ 0xff
1004757e:	401a      	ands	r2, r3
10047580:	4b03      	ldr	r3, [pc, #12]	@ (10047590 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10047582:	430a      	orrs	r2, r1
10047584:	60da      	str	r2, [r3, #12]
}
10047586:	46c0      	nop			@ (mov r8, r8)
10047588:	46bd      	mov	sp, r7
1004758a:	b002      	add	sp, #8
1004758c:	bd80      	pop	{r7, pc}
1004758e:	46c0      	nop			@ (mov r8, r8)
10047590:	200000c0 	.word	0x200000c0

10047594 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
10047594:	b580      	push	{r7, lr}
10047596:	b082      	sub	sp, #8
10047598:	af00      	add	r7, sp, #0
1004759a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
1004759c:	4b07      	ldr	r3, [pc, #28]	@ (100475bc <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004759e:	68db      	ldr	r3, [r3, #12]
100475a0:	4a07      	ldr	r2, [pc, #28]	@ (100475c0 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
100475a2:	4013      	ands	r3, r2
100475a4:	0019      	movs	r1, r3
100475a6:	687b      	ldr	r3, [r7, #4]
100475a8:	021b      	lsls	r3, r3, #8
100475aa:	041b      	lsls	r3, r3, #16
100475ac:	0c1a      	lsrs	r2, r3, #16
100475ae:	4b03      	ldr	r3, [pc, #12]	@ (100475bc <LL_RADIO_SetTxDataReadyCheck+0x28>)
100475b0:	430a      	orrs	r2, r1
100475b2:	60da      	str	r2, [r3, #12]
}
100475b4:	46c0      	nop			@ (mov r8, r8)
100475b6:	46bd      	mov	sp, r7
100475b8:	b002      	add	sp, #8
100475ba:	bd80      	pop	{r7, pc}
100475bc:	200000c0 	.word	0x200000c0
100475c0:	ffff00ff 	.word	0xffff00ff

100475c4 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
100475c4:	b580      	push	{r7, lr}
100475c6:	b082      	sub	sp, #8
100475c8:	af00      	add	r7, sp, #0
100475ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
100475cc:	4b08      	ldr	r3, [pc, #32]	@ (100475f0 <LL_RADIO_SetTxDelayStart+0x2c>)
100475ce:	68db      	ldr	r3, [r3, #12]
100475d0:	4a08      	ldr	r2, [pc, #32]	@ (100475f4 <LL_RADIO_SetTxDelayStart+0x30>)
100475d2:	4013      	ands	r3, r2
100475d4:	0019      	movs	r1, r3
100475d6:	687b      	ldr	r3, [r7, #4]
100475d8:	041a      	lsls	r2, r3, #16
100475da:	23ff      	movs	r3, #255	@ 0xff
100475dc:	041b      	lsls	r3, r3, #16
100475de:	401a      	ands	r2, r3
100475e0:	4b03      	ldr	r3, [pc, #12]	@ (100475f0 <LL_RADIO_SetTxDelayStart+0x2c>)
100475e2:	430a      	orrs	r2, r1
100475e4:	60da      	str	r2, [r3, #12]
}
100475e6:	46c0      	nop			@ (mov r8, r8)
100475e8:	46bd      	mov	sp, r7
100475ea:	b002      	add	sp, #8
100475ec:	bd80      	pop	{r7, pc}
100475ee:	46c0      	nop			@ (mov r8, r8)
100475f0:	200000c0 	.word	0x200000c0
100475f4:	ff00ffff 	.word	0xff00ffff

100475f8 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
100475f8:	b580      	push	{r7, lr}
100475fa:	b082      	sub	sp, #8
100475fc:	af00      	add	r7, sp, #0
100475fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10047600:	4b08      	ldr	r3, [pc, #32]	@ (10047624 <LL_RADIO_SetTxDelayEnd+0x2c>)
10047602:	68db      	ldr	r3, [r3, #12]
10047604:	4a08      	ldr	r2, [pc, #32]	@ (10047628 <LL_RADIO_SetTxDelayEnd+0x30>)
10047606:	4013      	ands	r3, r2
10047608:	0019      	movs	r1, r3
1004760a:	687b      	ldr	r3, [r7, #4]
1004760c:	061a      	lsls	r2, r3, #24
1004760e:	23fc      	movs	r3, #252	@ 0xfc
10047610:	059b      	lsls	r3, r3, #22
10047612:	401a      	ands	r2, r3
10047614:	4b03      	ldr	r3, [pc, #12]	@ (10047624 <LL_RADIO_SetTxDelayEnd+0x2c>)
10047616:	430a      	orrs	r2, r1
10047618:	60da      	str	r2, [r3, #12]
}
1004761a:	46c0      	nop			@ (mov r8, r8)
1004761c:	46bd      	mov	sp, r7
1004761e:	b002      	add	sp, #8
10047620:	bd80      	pop	{r7, pc}
10047622:	46c0      	nop			@ (mov r8, r8)
10047624:	200000c0 	.word	0x200000c0
10047628:	c0ffffff 	.word	0xc0ffffff

1004762c <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
1004762c:	b580      	push	{r7, lr}
1004762e:	b082      	sub	sp, #8
10047630:	af00      	add	r7, sp, #0
10047632:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10047634:	4b07      	ldr	r3, [pc, #28]	@ (10047654 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10047636:	691b      	ldr	r3, [r3, #16]
10047638:	22ff      	movs	r2, #255	@ 0xff
1004763a:	4393      	bics	r3, r2
1004763c:	0019      	movs	r1, r3
1004763e:	687b      	ldr	r3, [r7, #4]
10047640:	22ff      	movs	r2, #255	@ 0xff
10047642:	401a      	ands	r2, r3
10047644:	4b03      	ldr	r3, [pc, #12]	@ (10047654 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10047646:	430a      	orrs	r2, r1
10047648:	611a      	str	r2, [r3, #16]
}
1004764a:	46c0      	nop			@ (mov r8, r8)
1004764c:	46bd      	mov	sp, r7
1004764e:	b002      	add	sp, #8
10047650:	bd80      	pop	{r7, pc}
10047652:	46c0      	nop			@ (mov r8, r8)
10047654:	200000c0 	.word	0x200000c0

10047658 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
10047658:	b580      	push	{r7, lr}
1004765a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
1004765c:	4b04      	ldr	r3, [pc, #16]	@ (10047670 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004765e:	695a      	ldr	r2, [r3, #20]
10047660:	4b03      	ldr	r3, [pc, #12]	@ (10047670 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10047662:	2104      	movs	r1, #4
10047664:	430a      	orrs	r2, r1
10047666:	615a      	str	r2, [r3, #20]
}
10047668:	46c0      	nop			@ (mov r8, r8)
1004766a:	46bd      	mov	sp, r7
1004766c:	bd80      	pop	{r7, pc}
1004766e:	46c0      	nop			@ (mov r8, r8)
10047670:	200000c0 	.word	0x200000c0

10047674 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
10047674:	b580      	push	{r7, lr}
10047676:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10047678:	4b04      	ldr	r3, [pc, #16]	@ (1004768c <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004767a:	695a      	ldr	r2, [r3, #20]
1004767c:	4b03      	ldr	r3, [pc, #12]	@ (1004768c <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004767e:	2180      	movs	r1, #128	@ 0x80
10047680:	0409      	lsls	r1, r1, #16
10047682:	430a      	orrs	r2, r1
10047684:	615a      	str	r2, [r3, #20]
}
10047686:	46c0      	nop			@ (mov r8, r8)
10047688:	46bd      	mov	sp, r7
1004768a:	bd80      	pop	{r7, pc}
1004768c:	200000c0 	.word	0x200000c0

10047690 <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
10047690:	b580      	push	{r7, lr}
10047692:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10047694:	4b04      	ldr	r3, [pc, #16]	@ (100476a8 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10047696:	695a      	ldr	r2, [r3, #20]
10047698:	4b03      	ldr	r3, [pc, #12]	@ (100476a8 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004769a:	2180      	movs	r1, #128	@ 0x80
1004769c:	0589      	lsls	r1, r1, #22
1004769e:	430a      	orrs	r2, r1
100476a0:	615a      	str	r2, [r3, #20]
}
100476a2:	46c0      	nop			@ (mov r8, r8)
100476a4:	46bd      	mov	sp, r7
100476a6:	bd80      	pop	{r7, pc}
100476a8:	200000c0 	.word	0x200000c0

100476ac <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
100476ac:	b580      	push	{r7, lr}
100476ae:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
100476b0:	4b04      	ldr	r3, [pc, #16]	@ (100476c4 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
100476b2:	695a      	ldr	r2, [r3, #20]
100476b4:	4b03      	ldr	r3, [pc, #12]	@ (100476c4 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
100476b6:	2180      	movs	r1, #128	@ 0x80
100476b8:	05c9      	lsls	r1, r1, #23
100476ba:	430a      	orrs	r2, r1
100476bc:	615a      	str	r2, [r3, #20]
}
100476be:	46c0      	nop			@ (mov r8, r8)
100476c0:	46bd      	mov	sp, r7
100476c2:	bd80      	pop	{r7, pc}
100476c4:	200000c0 	.word	0x200000c0

100476c8 <LL_RADIO_SetDefaultAntennaID>:
  * @rmtoll WORD6          DEFAULTANTENNAID       LL_RADIO_SetDefaultAntennaID
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDefaultAntennaID(uint32_t value)
{
100476c8:	b580      	push	{r7, lr}
100476ca:	b082      	sub	sp, #8
100476cc:	af00      	add	r7, sp, #0
100476ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
100476d0:	4b07      	ldr	r3, [pc, #28]	@ (100476f0 <LL_RADIO_SetDefaultAntennaID+0x28>)
100476d2:	699b      	ldr	r3, [r3, #24]
100476d4:	227f      	movs	r2, #127	@ 0x7f
100476d6:	4393      	bics	r3, r2
100476d8:	0019      	movs	r1, r3
100476da:	687b      	ldr	r3, [r7, #4]
100476dc:	227f      	movs	r2, #127	@ 0x7f
100476de:	401a      	ands	r2, r3
100476e0:	4b03      	ldr	r3, [pc, #12]	@ (100476f0 <LL_RADIO_SetDefaultAntennaID+0x28>)
100476e2:	430a      	orrs	r2, r1
100476e4:	619a      	str	r2, [r3, #24]
}
100476e6:	46c0      	nop			@ (mov r8, r8)
100476e8:	46bd      	mov	sp, r7
100476ea:	b002      	add	sp, #8
100476ec:	bd80      	pop	{r7, pc}
100476ee:	46c0      	nop			@ (mov r8, r8)
100476f0:	200000c0 	.word	0x200000c0

100476f4 <LL_RADIO_TIMER_DisableTimer1>:
{
100476f4:	b580      	push	{r7, lr}
100476f6:	b082      	sub	sp, #8
100476f8:	af00      	add	r7, sp, #0
100476fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100476fc:	687b      	ldr	r3, [r7, #4]
100476fe:	68db      	ldr	r3, [r3, #12]
10047700:	2203      	movs	r2, #3
10047702:	4393      	bics	r3, r2
10047704:	001a      	movs	r2, r3
10047706:	687b      	ldr	r3, [r7, #4]
10047708:	60da      	str	r2, [r3, #12]
}
1004770a:	46c0      	nop			@ (mov r8, r8)
1004770c:	46bd      	mov	sp, r7
1004770e:	b002      	add	sp, #8
10047710:	bd80      	pop	{r7, pc}

10047712 <LL_RADIO_TIMER_DisableTimer2>:
{
10047712:	b580      	push	{r7, lr}
10047714:	b082      	sub	sp, #8
10047716:	af00      	add	r7, sp, #0
10047718:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004771a:	687b      	ldr	r3, [r7, #4]
1004771c:	68db      	ldr	r3, [r3, #12]
1004771e:	2203      	movs	r2, #3
10047720:	4393      	bics	r3, r2
10047722:	001a      	movs	r2, r3
10047724:	687b      	ldr	r3, [r7, #4]
10047726:	60da      	str	r2, [r3, #12]
}
10047728:	46c0      	nop			@ (mov r8, r8)
1004772a:	46bd      	mov	sp, r7
1004772c:	b002      	add	sp, #8
1004772e:	bd80      	pop	{r7, pc}

10047730 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10047730:	b580      	push	{r7, lr}
10047732:	b082      	sub	sp, #8
10047734:	af00      	add	r7, sp, #0
10047736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10047738:	687b      	ldr	r3, [r7, #4]
1004773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004773c:	4a03      	ldr	r2, [pc, #12]	@ (1004774c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004773e:	401a      	ands	r2, r3
10047740:	687b      	ldr	r3, [r7, #4]
10047742:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047744:	46c0      	nop			@ (mov r8, r8)
10047746:	46bd      	mov	sp, r7
10047748:	b002      	add	sp, #8
1004774a:	bd80      	pop	{r7, pc}
1004774c:	bfffffff 	.word	0xbfffffff

10047750 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10047750:	b590      	push	{r4, r7, lr}
10047752:	b08d      	sub	sp, #52	@ 0x34
10047754:	af00      	add	r7, sp, #0
10047756:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10047758:	4b14      	ldr	r3, [pc, #80]	@ (100477ac <HAL_RADIO_Init+0x5c>)
1004775a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004775c:	4b14      	ldr	r3, [pc, #80]	@ (100477b0 <HAL_RADIO_Init+0x60>)
1004775e:	681b      	ldr	r3, [r3, #0]
10047760:	4a14      	ldr	r2, [pc, #80]	@ (100477b4 <HAL_RADIO_Init+0x64>)
10047762:	4293      	cmp	r3, r2
10047764:	d12a      	bne.n	100477bc <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10047766:	4b14      	ldr	r3, [pc, #80]	@ (100477b8 <HAL_RADIO_Init+0x68>)
10047768:	681b      	ldr	r3, [r3, #0]
1004776a:	0a1b      	lsrs	r3, r3, #8
1004776c:	220f      	movs	r2, #15
1004776e:	4013      	ands	r3, r2
10047770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10047772:	4b11      	ldr	r3, [pc, #68]	@ (100477b8 <HAL_RADIO_Init+0x68>)
10047774:	681b      	ldr	r3, [r3, #0]
10047776:	0b1b      	lsrs	r3, r3, #12
10047778:	220f      	movs	r2, #15
1004777a:	4013      	ands	r3, r2
1004777c:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004777e:	4b0e      	ldr	r3, [pc, #56]	@ (100477b8 <HAL_RADIO_Init+0x68>)
10047780:	681b      	ldr	r3, [r3, #0]
10047782:	0c1b      	lsrs	r3, r3, #16
10047784:	220f      	movs	r2, #15
10047786:	4013      	ands	r3, r2
10047788:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004778a:	4b0b      	ldr	r3, [pc, #44]	@ (100477b8 <HAL_RADIO_Init+0x68>)
1004778c:	681b      	ldr	r3, [r3, #0]
1004778e:	0d1b      	lsrs	r3, r3, #20
10047790:	2207      	movs	r2, #7
10047792:	4013      	ands	r3, r2
10047794:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10047796:	4b08      	ldr	r3, [pc, #32]	@ (100477b8 <HAL_RADIO_Init+0x68>)
10047798:	681b      	ldr	r3, [r3, #0]
1004779a:	0e1b      	lsrs	r3, r3, #24
1004779c:	2207      	movs	r2, #7
1004779e:	4013      	ands	r3, r2
100477a0:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
100477a2:	231b      	movs	r3, #27
100477a4:	18fb      	adds	r3, r7, r3
100477a6:	2201      	movs	r2, #1
100477a8:	701a      	strb	r2, [r3, #0]
100477aa:	e018      	b.n	100477de <HAL_RADIO_Init+0x8e>
100477ac:	20000c98 	.word	0x20000c98
100477b0:	10001ef8 	.word	0x10001ef8
100477b4:	fcbceccc 	.word	0xfcbceccc
100477b8:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
100477bc:	2308      	movs	r3, #8
100477be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
100477c0:	2307      	movs	r3, #7
100477c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
100477c4:	2308      	movs	r3, #8
100477c6:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
100477c8:	211b      	movs	r1, #27
100477ca:	187b      	adds	r3, r7, r1
100477cc:	2200      	movs	r2, #0
100477ce:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
100477d0:	2303      	movs	r3, #3
100477d2:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
100477d4:	2303      	movs	r3, #3
100477d6:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
100477d8:	187b      	adds	r3, r7, r1
100477da:	2201      	movs	r2, #1
100477dc:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
100477de:	4bfc      	ldr	r3, [pc, #1008]	@ (10047bd0 <HAL_RADIO_Init+0x480>)
100477e0:	2200      	movs	r2, #0
100477e2:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
100477e4:	687b      	ldr	r3, [r7, #4]
100477e6:	2b00      	cmp	r3, #0
100477e8:	d003      	beq.n	100477f2 <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
100477ea:	687b      	ldr	r3, [r7, #4]
100477ec:	0018      	movs	r0, r3
100477ee:	f7fc fb99 	bl	10043f24 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
100477f2:	23c0      	movs	r3, #192	@ 0xc0
100477f4:	05db      	lsls	r3, r3, #23
100477f6:	0018      	movs	r0, r3
100477f8:	f7ff ff7c 	bl	100476f4 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
100477fc:	23c0      	movs	r3, #192	@ 0xc0
100477fe:	05db      	lsls	r3, r3, #23
10047800:	0018      	movs	r0, r3
10047802:	f7ff ff86 	bl	10047712 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047806:	4bf3      	ldr	r3, [pc, #972]	@ (10047bd4 <HAL_RADIO_Init+0x484>)
10047808:	0018      	movs	r0, r3
1004780a:	f7ff ff91 	bl	10047730 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004780e:	4af2      	ldr	r2, [pc, #968]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047810:	239e      	movs	r3, #158	@ 0x9e
10047812:	009b      	lsls	r3, r3, #2
10047814:	58d3      	ldr	r3, [r2, r3]
10047816:	220f      	movs	r2, #15
10047818:	4393      	bics	r3, r2
1004781a:	001a      	movs	r2, r3
1004781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004781e:	210f      	movs	r1, #15
10047820:	400b      	ands	r3, r1
10047822:	49ed      	ldr	r1, [pc, #948]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047824:	431a      	orrs	r2, r3
10047826:	239e      	movs	r3, #158	@ 0x9e
10047828:	009b      	lsls	r3, r3, #2
1004782a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004782c:	4aea      	ldr	r2, [pc, #936]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
1004782e:	239d      	movs	r3, #157	@ 0x9d
10047830:	009b      	lsls	r3, r3, #2
10047832:	58d3      	ldr	r3, [r2, r3]
10047834:	22f0      	movs	r2, #240	@ 0xf0
10047836:	4393      	bics	r3, r2
10047838:	001a      	movs	r2, r3
1004783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004783c:	011b      	lsls	r3, r3, #4
1004783e:	21ff      	movs	r1, #255	@ 0xff
10047840:	400b      	ands	r3, r1
10047842:	49e5      	ldr	r1, [pc, #916]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047844:	431a      	orrs	r2, r3
10047846:	239d      	movs	r3, #157	@ 0x9d
10047848:	009b      	lsls	r3, r3, #2
1004784a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004784c:	4ae2      	ldr	r2, [pc, #904]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
1004784e:	239d      	movs	r3, #157	@ 0x9d
10047850:	009b      	lsls	r3, r3, #2
10047852:	58d3      	ldr	r3, [r2, r3]
10047854:	220f      	movs	r2, #15
10047856:	4393      	bics	r3, r2
10047858:	001a      	movs	r2, r3
1004785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004785c:	210f      	movs	r1, #15
1004785e:	400b      	ands	r3, r1
10047860:	49dd      	ldr	r1, [pc, #884]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047862:	431a      	orrs	r2, r3
10047864:	239d      	movs	r3, #157	@ 0x9d
10047866:	009b      	lsls	r3, r3, #2
10047868:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004786a:	231b      	movs	r3, #27
1004786c:	18fb      	adds	r3, r7, r3
1004786e:	781b      	ldrb	r3, [r3, #0]
10047870:	2b00      	cmp	r3, #0
10047872:	d01e      	beq.n	100478b2 <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
10047874:	4ad8      	ldr	r2, [pc, #864]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047876:	2392      	movs	r3, #146	@ 0x92
10047878:	009b      	lsls	r3, r3, #2
1004787a:	58d3      	ldr	r3, [r2, r3]
1004787c:	2207      	movs	r2, #7
1004787e:	4393      	bics	r3, r2
10047880:	001a      	movs	r2, r3
10047882:	6a3b      	ldr	r3, [r7, #32]
10047884:	2107      	movs	r1, #7
10047886:	400b      	ands	r3, r1
10047888:	49d3      	ldr	r1, [pc, #844]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
1004788a:	431a      	orrs	r2, r3
1004788c:	2392      	movs	r3, #146	@ 0x92
1004788e:	009b      	lsls	r3, r3, #2
10047890:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
10047892:	4ad1      	ldr	r2, [pc, #836]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047894:	2392      	movs	r3, #146	@ 0x92
10047896:	009b      	lsls	r3, r3, #2
10047898:	58d3      	ldr	r3, [r2, r3]
1004789a:	2238      	movs	r2, #56	@ 0x38
1004789c:	4393      	bics	r3, r2
1004789e:	001a      	movs	r2, r3
100478a0:	69fb      	ldr	r3, [r7, #28]
100478a2:	00db      	lsls	r3, r3, #3
100478a4:	2138      	movs	r1, #56	@ 0x38
100478a6:	400b      	ands	r3, r1
100478a8:	49cb      	ldr	r1, [pc, #812]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478aa:	431a      	orrs	r2, r3
100478ac:	2392      	movs	r3, #146	@ 0x92
100478ae:	009b      	lsls	r3, r3, #2
100478b0:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
100478b2:	4ac9      	ldr	r2, [pc, #804]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478b4:	23a4      	movs	r3, #164	@ 0xa4
100478b6:	005b      	lsls	r3, r3, #1
100478b8:	58d3      	ldr	r3, [r2, r3]
100478ba:	22ff      	movs	r2, #255	@ 0xff
100478bc:	4393      	bics	r3, r2
100478be:	49c6      	ldr	r1, [pc, #792]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478c0:	2255      	movs	r2, #85	@ 0x55
100478c2:	431a      	orrs	r2, r3
100478c4:	23a4      	movs	r3, #164	@ 0xa4
100478c6:	005b      	lsls	r3, r3, #1
100478c8:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
100478ca:	4ac3      	ldr	r2, [pc, #780]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478cc:	23aa      	movs	r3, #170	@ 0xaa
100478ce:	005b      	lsls	r3, r3, #1
100478d0:	58d3      	ldr	r3, [r2, r3]
100478d2:	22ff      	movs	r2, #255	@ 0xff
100478d4:	4393      	bics	r3, r2
100478d6:	49c0      	ldr	r1, [pc, #768]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478d8:	2266      	movs	r2, #102	@ 0x66
100478da:	431a      	orrs	r2, r3
100478dc:	23aa      	movs	r3, #170	@ 0xaa
100478de:	005b      	lsls	r3, r3, #1
100478e0:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
100478e2:	4abd      	ldr	r2, [pc, #756]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478e4:	23b4      	movs	r3, #180	@ 0xb4
100478e6:	005b      	lsls	r3, r3, #1
100478e8:	58d3      	ldr	r3, [r2, r3]
100478ea:	22ff      	movs	r2, #255	@ 0xff
100478ec:	4393      	bics	r3, r2
100478ee:	49ba      	ldr	r1, [pc, #744]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478f0:	2255      	movs	r2, #85	@ 0x55
100478f2:	431a      	orrs	r2, r3
100478f4:	23b4      	movs	r3, #180	@ 0xb4
100478f6:	005b      	lsls	r3, r3, #1
100478f8:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
100478fa:	4ab7      	ldr	r2, [pc, #732]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
100478fc:	23c4      	movs	r3, #196	@ 0xc4
100478fe:	005b      	lsls	r3, r3, #1
10047900:	58d3      	ldr	r3, [r2, r3]
10047902:	22ff      	movs	r2, #255	@ 0xff
10047904:	4393      	bics	r3, r2
10047906:	49b4      	ldr	r1, [pc, #720]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047908:	221d      	movs	r2, #29
1004790a:	431a      	orrs	r2, r3
1004790c:	23c4      	movs	r3, #196	@ 0xc4
1004790e:	005b      	lsls	r3, r3, #1
10047910:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
10047912:	4ab1      	ldr	r2, [pc, #708]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047914:	23c2      	movs	r3, #194	@ 0xc2
10047916:	005b      	lsls	r3, r3, #1
10047918:	58d3      	ldr	r3, [r2, r3]
1004791a:	22ff      	movs	r2, #255	@ 0xff
1004791c:	4393      	bics	r3, r2
1004791e:	49ae      	ldr	r1, [pc, #696]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047920:	2259      	movs	r2, #89	@ 0x59
10047922:	431a      	orrs	r2, r3
10047924:	23c2      	movs	r3, #194	@ 0xc2
10047926:	005b      	lsls	r3, r3, #1
10047928:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004792a:	4aab      	ldr	r2, [pc, #684]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
1004792c:	23c6      	movs	r3, #198	@ 0xc6
1004792e:	005b      	lsls	r3, r3, #1
10047930:	58d3      	ldr	r3, [r2, r3]
10047932:	22ff      	movs	r2, #255	@ 0xff
10047934:	4393      	bics	r3, r2
10047936:	49a8      	ldr	r1, [pc, #672]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047938:	2232      	movs	r2, #50	@ 0x32
1004793a:	431a      	orrs	r2, r3
1004793c:	23c6      	movs	r3, #198	@ 0xc6
1004793e:	005b      	lsls	r3, r3, #1
10047940:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10047942:	4aa5      	ldr	r2, [pc, #660]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047944:	23b6      	movs	r3, #182	@ 0xb6
10047946:	005b      	lsls	r3, r3, #1
10047948:	58d3      	ldr	r3, [r2, r3]
1004794a:	49a3      	ldr	r1, [pc, #652]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
1004794c:	2201      	movs	r2, #1
1004794e:	431a      	orrs	r2, r3
10047950:	23b6      	movs	r3, #182	@ 0xb6
10047952:	005b      	lsls	r3, r3, #1
10047954:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
10047956:	4aa0      	ldr	r2, [pc, #640]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047958:	23d0      	movs	r3, #208	@ 0xd0
1004795a:	009b      	lsls	r3, r3, #2
1004795c:	58d3      	ldr	r3, [r2, r3]
1004795e:	22ff      	movs	r2, #255	@ 0xff
10047960:	4393      	bics	r3, r2
10047962:	499d      	ldr	r1, [pc, #628]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047964:	221f      	movs	r2, #31
10047966:	431a      	orrs	r2, r3
10047968:	23d0      	movs	r3, #208	@ 0xd0
1004796a:	009b      	lsls	r3, r3, #2
1004796c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004796e:	4a9a      	ldr	r2, [pc, #616]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047970:	23d1      	movs	r3, #209	@ 0xd1
10047972:	009b      	lsls	r3, r3, #2
10047974:	58d3      	ldr	r3, [r2, r3]
10047976:	22ff      	movs	r2, #255	@ 0xff
10047978:	4393      	bics	r3, r2
1004797a:	4997      	ldr	r1, [pc, #604]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
1004797c:	2209      	movs	r2, #9
1004797e:	431a      	orrs	r2, r3
10047980:	23d1      	movs	r3, #209	@ 0xd1
10047982:	009b      	lsls	r3, r3, #2
10047984:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10047986:	2040      	movs	r0, #64	@ 0x40
10047988:	f7ff fd4c 	bl	10047424 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004798c:	203f      	movs	r0, #63	@ 0x3f
1004798e:	f7ff fd61 	bl	10047454 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
10047992:	2009      	movs	r0, #9
10047994:	f7ff fd78 	bl	10047488 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
10047998:	205a      	movs	r0, #90	@ 0x5a
1004799a:	f7ff fdb7 	bl	1004750c <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004799e:	2032      	movs	r0, #50	@ 0x32
100479a0:	f7ff fdce 	bl	10047540 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
100479a4:	205a      	movs	r0, #90	@ 0x5a
100479a6:	f7ff fd83 	bl	100474b0 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
100479aa:	2032      	movs	r0, #50	@ 0x32
100479ac:	f7ff fd96 	bl	100474dc <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
100479b0:	2010      	movs	r0, #16
100479b2:	f7ff fe07 	bl	100475c4 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
100479b6:	2010      	movs	r0, #16
100479b8:	f7ff fe1e 	bl	100475f8 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
100479bc:	2004      	movs	r0, #4
100479be:	f7ff fe35 	bl	1004762c <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
100479c2:	2014      	movs	r0, #20
100479c4:	f7ff fdd0 	bl	10047568 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
100479c8:	2005      	movs	r0, #5
100479ca:	f7ff fde3 	bl	10047594 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
100479ce:	f7ff fe43 	bl	10047658 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
100479d2:	f7ff fe4f 	bl	10047674 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
100479d6:	f7ff fe5b 	bl	10047690 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
100479da:	2000      	movs	r0, #0
100479dc:	f7ff fe74 	bl	100476c8 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
100479e0:	2013      	movs	r0, #19
100479e2:	183b      	adds	r3, r7, r0
100479e4:	2200      	movs	r2, #0
100479e6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100479e8:	183b      	adds	r3, r7, r0
100479ea:	781b      	ldrb	r3, [r3, #0]
100479ec:	183a      	adds	r2, r7, r0
100479ee:	1c59      	adds	r1, r3, #1
100479f0:	7011      	strb	r1, [r2, #0]
100479f2:	001a      	movs	r2, r3
100479f4:	697b      	ldr	r3, [r7, #20]
100479f6:	189b      	adds	r3, r3, r2
100479f8:	2201      	movs	r2, #1
100479fa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
100479fc:	183b      	adds	r3, r7, r0
100479fe:	781b      	ldrb	r3, [r3, #0]
10047a00:	183a      	adds	r2, r7, r0
10047a02:	1c59      	adds	r1, r3, #1
10047a04:	7011      	strb	r1, [r2, #0]
10047a06:	001a      	movs	r2, r3
10047a08:	697b      	ldr	r3, [r7, #20]
10047a0a:	189b      	adds	r3, r3, r2
10047a0c:	225e      	movs	r2, #94	@ 0x5e
10047a0e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10047a10:	4a71      	ldr	r2, [pc, #452]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047a12:	239e      	movs	r3, #158	@ 0x9e
10047a14:	009b      	lsls	r3, r3, #2
10047a16:	58d1      	ldr	r1, [r2, r3]
10047a18:	183b      	adds	r3, r7, r0
10047a1a:	781b      	ldrb	r3, [r3, #0]
10047a1c:	0004      	movs	r4, r0
10047a1e:	183a      	adds	r2, r7, r0
10047a20:	1c58      	adds	r0, r3, #1
10047a22:	7010      	strb	r0, [r2, #0]
10047a24:	001a      	movs	r2, r3
10047a26:	697b      	ldr	r3, [r7, #20]
10047a28:	189b      	adds	r3, r3, r2
10047a2a:	b2ca      	uxtb	r2, r1
10047a2c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047a2e:	0020      	movs	r0, r4
10047a30:	183b      	adds	r3, r7, r0
10047a32:	781b      	ldrb	r3, [r3, #0]
10047a34:	183a      	adds	r2, r7, r0
10047a36:	1c59      	adds	r1, r3, #1
10047a38:	7011      	strb	r1, [r2, #0]
10047a3a:	001a      	movs	r2, r3
10047a3c:	697b      	ldr	r3, [r7, #20]
10047a3e:	189b      	adds	r3, r3, r2
10047a40:	2201      	movs	r2, #1
10047a42:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10047a44:	183b      	adds	r3, r7, r0
10047a46:	781b      	ldrb	r3, [r3, #0]
10047a48:	183a      	adds	r2, r7, r0
10047a4a:	1c59      	adds	r1, r3, #1
10047a4c:	7011      	strb	r1, [r2, #0]
10047a4e:	001a      	movs	r2, r3
10047a50:	697b      	ldr	r3, [r7, #20]
10047a52:	189b      	adds	r3, r3, r2
10047a54:	225d      	movs	r2, #93	@ 0x5d
10047a56:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
10047a58:	4a5f      	ldr	r2, [pc, #380]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047a5a:	239d      	movs	r3, #157	@ 0x9d
10047a5c:	009b      	lsls	r3, r3, #2
10047a5e:	58d1      	ldr	r1, [r2, r3]
10047a60:	183b      	adds	r3, r7, r0
10047a62:	781b      	ldrb	r3, [r3, #0]
10047a64:	0004      	movs	r4, r0
10047a66:	183a      	adds	r2, r7, r0
10047a68:	1c58      	adds	r0, r3, #1
10047a6a:	7010      	strb	r0, [r2, #0]
10047a6c:	001a      	movs	r2, r3
10047a6e:	697b      	ldr	r3, [r7, #20]
10047a70:	189b      	adds	r3, r3, r2
10047a72:	b2ca      	uxtb	r2, r1
10047a74:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10047a76:	0020      	movs	r0, r4
10047a78:	183b      	adds	r3, r7, r0
10047a7a:	781b      	ldrb	r3, [r3, #0]
10047a7c:	183a      	adds	r2, r7, r0
10047a7e:	1c59      	adds	r1, r3, #1
10047a80:	7011      	strb	r1, [r2, #0]
10047a82:	001a      	movs	r2, r3
10047a84:	697b      	ldr	r3, [r7, #20]
10047a86:	189b      	adds	r3, r3, r2
10047a88:	2201      	movs	r2, #1
10047a8a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
10047a8c:	183b      	adds	r3, r7, r0
10047a8e:	781b      	ldrb	r3, [r3, #0]
10047a90:	183a      	adds	r2, r7, r0
10047a92:	1c59      	adds	r1, r3, #1
10047a94:	7011      	strb	r1, [r2, #0]
10047a96:	001a      	movs	r2, r3
10047a98:	697b      	ldr	r3, [r7, #20]
10047a9a:	189b      	adds	r3, r3, r2
10047a9c:	2252      	movs	r2, #82	@ 0x52
10047a9e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
10047aa0:	4a4d      	ldr	r2, [pc, #308]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047aa2:	2392      	movs	r3, #146	@ 0x92
10047aa4:	009b      	lsls	r3, r3, #2
10047aa6:	58d1      	ldr	r1, [r2, r3]
10047aa8:	183b      	adds	r3, r7, r0
10047aaa:	781b      	ldrb	r3, [r3, #0]
10047aac:	0004      	movs	r4, r0
10047aae:	183a      	adds	r2, r7, r0
10047ab0:	1c58      	adds	r0, r3, #1
10047ab2:	7010      	strb	r0, [r2, #0]
10047ab4:	001a      	movs	r2, r3
10047ab6:	697b      	ldr	r3, [r7, #20]
10047ab8:	189b      	adds	r3, r3, r2
10047aba:	b2ca      	uxtb	r2, r1
10047abc:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10047abe:	0020      	movs	r0, r4
10047ac0:	183b      	adds	r3, r7, r0
10047ac2:	781b      	ldrb	r3, [r3, #0]
10047ac4:	183a      	adds	r2, r7, r0
10047ac6:	1c59      	adds	r1, r3, #1
10047ac8:	7011      	strb	r1, [r2, #0]
10047aca:	001a      	movs	r2, r3
10047acc:	697b      	ldr	r3, [r7, #20]
10047ace:	189b      	adds	r3, r3, r2
10047ad0:	2201      	movs	r2, #1
10047ad2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
10047ad4:	183b      	adds	r3, r7, r0
10047ad6:	781b      	ldrb	r3, [r3, #0]
10047ad8:	183a      	adds	r2, r7, r0
10047ada:	1c59      	adds	r1, r3, #1
10047adc:	7011      	strb	r1, [r2, #0]
10047ade:	001a      	movs	r2, r3
10047ae0:	697b      	ldr	r3, [r7, #20]
10047ae2:	189b      	adds	r3, r3, r2
10047ae4:	2212      	movs	r2, #18
10047ae6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
10047ae8:	4a3b      	ldr	r2, [pc, #236]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047aea:	23a4      	movs	r3, #164	@ 0xa4
10047aec:	005b      	lsls	r3, r3, #1
10047aee:	58d1      	ldr	r1, [r2, r3]
10047af0:	183b      	adds	r3, r7, r0
10047af2:	781b      	ldrb	r3, [r3, #0]
10047af4:	0004      	movs	r4, r0
10047af6:	183a      	adds	r2, r7, r0
10047af8:	1c58      	adds	r0, r3, #1
10047afa:	7010      	strb	r0, [r2, #0]
10047afc:	001a      	movs	r2, r3
10047afe:	697b      	ldr	r3, [r7, #20]
10047b00:	189b      	adds	r3, r3, r2
10047b02:	b2ca      	uxtb	r2, r1
10047b04:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047b06:	0020      	movs	r0, r4
10047b08:	183b      	adds	r3, r7, r0
10047b0a:	781b      	ldrb	r3, [r3, #0]
10047b0c:	183a      	adds	r2, r7, r0
10047b0e:	1c59      	adds	r1, r3, #1
10047b10:	7011      	strb	r1, [r2, #0]
10047b12:	001a      	movs	r2, r3
10047b14:	697b      	ldr	r3, [r7, #20]
10047b16:	189b      	adds	r3, r3, r2
10047b18:	2201      	movs	r2, #1
10047b1a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10047b1c:	183b      	adds	r3, r7, r0
10047b1e:	781b      	ldrb	r3, [r3, #0]
10047b20:	183a      	adds	r2, r7, r0
10047b22:	1c59      	adds	r1, r3, #1
10047b24:	7011      	strb	r1, [r2, #0]
10047b26:	001a      	movs	r2, r3
10047b28:	697b      	ldr	r3, [r7, #20]
10047b2a:	189b      	adds	r3, r3, r2
10047b2c:	2215      	movs	r2, #21
10047b2e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10047b30:	4a29      	ldr	r2, [pc, #164]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047b32:	23aa      	movs	r3, #170	@ 0xaa
10047b34:	005b      	lsls	r3, r3, #1
10047b36:	58d1      	ldr	r1, [r2, r3]
10047b38:	183b      	adds	r3, r7, r0
10047b3a:	781b      	ldrb	r3, [r3, #0]
10047b3c:	0004      	movs	r4, r0
10047b3e:	183a      	adds	r2, r7, r0
10047b40:	1c58      	adds	r0, r3, #1
10047b42:	7010      	strb	r0, [r2, #0]
10047b44:	001a      	movs	r2, r3
10047b46:	697b      	ldr	r3, [r7, #20]
10047b48:	189b      	adds	r3, r3, r2
10047b4a:	b2ca      	uxtb	r2, r1
10047b4c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047b4e:	0020      	movs	r0, r4
10047b50:	183b      	adds	r3, r7, r0
10047b52:	781b      	ldrb	r3, [r3, #0]
10047b54:	183a      	adds	r2, r7, r0
10047b56:	1c59      	adds	r1, r3, #1
10047b58:	7011      	strb	r1, [r2, #0]
10047b5a:	001a      	movs	r2, r3
10047b5c:	697b      	ldr	r3, [r7, #20]
10047b5e:	189b      	adds	r3, r3, r2
10047b60:	2201      	movs	r2, #1
10047b62:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10047b64:	183b      	adds	r3, r7, r0
10047b66:	781b      	ldrb	r3, [r3, #0]
10047b68:	183a      	adds	r2, r7, r0
10047b6a:	1c59      	adds	r1, r3, #1
10047b6c:	7011      	strb	r1, [r2, #0]
10047b6e:	001a      	movs	r2, r3
10047b70:	697b      	ldr	r3, [r7, #20]
10047b72:	189b      	adds	r3, r3, r2
10047b74:	221a      	movs	r2, #26
10047b76:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
10047b78:	4a17      	ldr	r2, [pc, #92]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047b7a:	23b4      	movs	r3, #180	@ 0xb4
10047b7c:	005b      	lsls	r3, r3, #1
10047b7e:	58d1      	ldr	r1, [r2, r3]
10047b80:	183b      	adds	r3, r7, r0
10047b82:	781b      	ldrb	r3, [r3, #0]
10047b84:	0004      	movs	r4, r0
10047b86:	183a      	adds	r2, r7, r0
10047b88:	1c58      	adds	r0, r3, #1
10047b8a:	7010      	strb	r0, [r2, #0]
10047b8c:	001a      	movs	r2, r3
10047b8e:	697b      	ldr	r3, [r7, #20]
10047b90:	189b      	adds	r3, r3, r2
10047b92:	b2ca      	uxtb	r2, r1
10047b94:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047b96:	0020      	movs	r0, r4
10047b98:	183b      	adds	r3, r7, r0
10047b9a:	781b      	ldrb	r3, [r3, #0]
10047b9c:	183a      	adds	r2, r7, r0
10047b9e:	1c59      	adds	r1, r3, #1
10047ba0:	7011      	strb	r1, [r2, #0]
10047ba2:	001a      	movs	r2, r3
10047ba4:	697b      	ldr	r3, [r7, #20]
10047ba6:	189b      	adds	r3, r3, r2
10047ba8:	2201      	movs	r2, #1
10047baa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
10047bac:	183b      	adds	r3, r7, r0
10047bae:	781b      	ldrb	r3, [r3, #0]
10047bb0:	183a      	adds	r2, r7, r0
10047bb2:	1c59      	adds	r1, r3, #1
10047bb4:	7011      	strb	r1, [r2, #0]
10047bb6:	001a      	movs	r2, r3
10047bb8:	697b      	ldr	r3, [r7, #20]
10047bba:	189b      	adds	r3, r3, r2
10047bbc:	2222      	movs	r2, #34	@ 0x22
10047bbe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
10047bc0:	4a05      	ldr	r2, [pc, #20]	@ (10047bd8 <HAL_RADIO_Init+0x488>)
10047bc2:	23c4      	movs	r3, #196	@ 0xc4
10047bc4:	005b      	lsls	r3, r3, #1
10047bc6:	58d1      	ldr	r1, [r2, r3]
10047bc8:	183b      	adds	r3, r7, r0
10047bca:	781b      	ldrb	r3, [r3, #0]
10047bcc:	0004      	movs	r4, r0
10047bce:	e005      	b.n	10047bdc <HAL_RADIO_Init+0x48c>
10047bd0:	200000c0 	.word	0x200000c0
10047bd4:	60001800 	.word	0x60001800
10047bd8:	60001400 	.word	0x60001400
10047bdc:	183a      	adds	r2, r7, r0
10047bde:	1c58      	adds	r0, r3, #1
10047be0:	7010      	strb	r0, [r2, #0]
10047be2:	001a      	movs	r2, r3
10047be4:	697b      	ldr	r3, [r7, #20]
10047be6:	189b      	adds	r3, r3, r2
10047be8:	b2ca      	uxtb	r2, r1
10047bea:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047bec:	0020      	movs	r0, r4
10047bee:	183b      	adds	r3, r7, r0
10047bf0:	781b      	ldrb	r3, [r3, #0]
10047bf2:	183a      	adds	r2, r7, r0
10047bf4:	1c59      	adds	r1, r3, #1
10047bf6:	7011      	strb	r1, [r2, #0]
10047bf8:	001a      	movs	r2, r3
10047bfa:	697b      	ldr	r3, [r7, #20]
10047bfc:	189b      	adds	r3, r3, r2
10047bfe:	2201      	movs	r2, #1
10047c00:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10047c02:	183b      	adds	r3, r7, r0
10047c04:	781b      	ldrb	r3, [r3, #0]
10047c06:	183a      	adds	r2, r7, r0
10047c08:	1c59      	adds	r1, r3, #1
10047c0a:	7011      	strb	r1, [r2, #0]
10047c0c:	001a      	movs	r2, r3
10047c0e:	697b      	ldr	r3, [r7, #20]
10047c10:	189b      	adds	r3, r3, r2
10047c12:	2221      	movs	r2, #33	@ 0x21
10047c14:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
10047c16:	4a6d      	ldr	r2, [pc, #436]	@ (10047dcc <HAL_RADIO_Init+0x67c>)
10047c18:	23c2      	movs	r3, #194	@ 0xc2
10047c1a:	005b      	lsls	r3, r3, #1
10047c1c:	58d1      	ldr	r1, [r2, r3]
10047c1e:	183b      	adds	r3, r7, r0
10047c20:	781b      	ldrb	r3, [r3, #0]
10047c22:	0004      	movs	r4, r0
10047c24:	183a      	adds	r2, r7, r0
10047c26:	1c58      	adds	r0, r3, #1
10047c28:	7010      	strb	r0, [r2, #0]
10047c2a:	001a      	movs	r2, r3
10047c2c:	697b      	ldr	r3, [r7, #20]
10047c2e:	189b      	adds	r3, r3, r2
10047c30:	b2ca      	uxtb	r2, r1
10047c32:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047c34:	0020      	movs	r0, r4
10047c36:	183b      	adds	r3, r7, r0
10047c38:	781b      	ldrb	r3, [r3, #0]
10047c3a:	183a      	adds	r2, r7, r0
10047c3c:	1c59      	adds	r1, r3, #1
10047c3e:	7011      	strb	r1, [r2, #0]
10047c40:	001a      	movs	r2, r3
10047c42:	697b      	ldr	r3, [r7, #20]
10047c44:	189b      	adds	r3, r3, r2
10047c46:	2201      	movs	r2, #1
10047c48:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
10047c4a:	183b      	adds	r3, r7, r0
10047c4c:	781b      	ldrb	r3, [r3, #0]
10047c4e:	183a      	adds	r2, r7, r0
10047c50:	1c59      	adds	r1, r3, #1
10047c52:	7011      	strb	r1, [r2, #0]
10047c54:	001a      	movs	r2, r3
10047c56:	697b      	ldr	r3, [r7, #20]
10047c58:	189b      	adds	r3, r3, r2
10047c5a:	2223      	movs	r2, #35	@ 0x23
10047c5c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
10047c5e:	4a5b      	ldr	r2, [pc, #364]	@ (10047dcc <HAL_RADIO_Init+0x67c>)
10047c60:	23c6      	movs	r3, #198	@ 0xc6
10047c62:	005b      	lsls	r3, r3, #1
10047c64:	58d1      	ldr	r1, [r2, r3]
10047c66:	183b      	adds	r3, r7, r0
10047c68:	781b      	ldrb	r3, [r3, #0]
10047c6a:	0004      	movs	r4, r0
10047c6c:	183a      	adds	r2, r7, r0
10047c6e:	1c58      	adds	r0, r3, #1
10047c70:	7010      	strb	r0, [r2, #0]
10047c72:	001a      	movs	r2, r3
10047c74:	697b      	ldr	r3, [r7, #20]
10047c76:	189b      	adds	r3, r3, r2
10047c78:	b2ca      	uxtb	r2, r1
10047c7a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047c7c:	0020      	movs	r0, r4
10047c7e:	183b      	adds	r3, r7, r0
10047c80:	781b      	ldrb	r3, [r3, #0]
10047c82:	183a      	adds	r2, r7, r0
10047c84:	1c59      	adds	r1, r3, #1
10047c86:	7011      	strb	r1, [r2, #0]
10047c88:	001a      	movs	r2, r3
10047c8a:	697b      	ldr	r3, [r7, #20]
10047c8c:	189b      	adds	r3, r3, r2
10047c8e:	2201      	movs	r2, #1
10047c90:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
10047c92:	183b      	adds	r3, r7, r0
10047c94:	781b      	ldrb	r3, [r3, #0]
10047c96:	183a      	adds	r2, r7, r0
10047c98:	1c59      	adds	r1, r3, #1
10047c9a:	7011      	strb	r1, [r2, #0]
10047c9c:	001a      	movs	r2, r3
10047c9e:	697b      	ldr	r3, [r7, #20]
10047ca0:	189b      	adds	r3, r3, r2
10047ca2:	221b      	movs	r2, #27
10047ca4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
10047ca6:	4a49      	ldr	r2, [pc, #292]	@ (10047dcc <HAL_RADIO_Init+0x67c>)
10047ca8:	23b6      	movs	r3, #182	@ 0xb6
10047caa:	005b      	lsls	r3, r3, #1
10047cac:	58d1      	ldr	r1, [r2, r3]
10047cae:	183b      	adds	r3, r7, r0
10047cb0:	781b      	ldrb	r3, [r3, #0]
10047cb2:	0004      	movs	r4, r0
10047cb4:	183a      	adds	r2, r7, r0
10047cb6:	1c58      	adds	r0, r3, #1
10047cb8:	7010      	strb	r0, [r2, #0]
10047cba:	001a      	movs	r2, r3
10047cbc:	697b      	ldr	r3, [r7, #20]
10047cbe:	189b      	adds	r3, r3, r2
10047cc0:	b2ca      	uxtb	r2, r1
10047cc2:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
10047cc4:	0020      	movs	r0, r4
10047cc6:	183b      	adds	r3, r7, r0
10047cc8:	781b      	ldrb	r3, [r3, #0]
10047cca:	183a      	adds	r2, r7, r0
10047ccc:	1c59      	adds	r1, r3, #1
10047cce:	7011      	strb	r1, [r2, #0]
10047cd0:	001a      	movs	r2, r3
10047cd2:	697b      	ldr	r3, [r7, #20]
10047cd4:	189b      	adds	r3, r3, r2
10047cd6:	2201      	movs	r2, #1
10047cd8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
10047cda:	183b      	adds	r3, r7, r0
10047cdc:	781b      	ldrb	r3, [r3, #0]
10047cde:	183a      	adds	r2, r7, r0
10047ce0:	1c59      	adds	r1, r3, #1
10047ce2:	7011      	strb	r1, [r2, #0]
10047ce4:	001a      	movs	r2, r3
10047ce6:	697b      	ldr	r3, [r7, #20]
10047ce8:	189b      	adds	r3, r3, r2
10047cea:	2290      	movs	r2, #144	@ 0x90
10047cec:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
10047cee:	4a37      	ldr	r2, [pc, #220]	@ (10047dcc <HAL_RADIO_Init+0x67c>)
10047cf0:	23d0      	movs	r3, #208	@ 0xd0
10047cf2:	009b      	lsls	r3, r3, #2
10047cf4:	58d1      	ldr	r1, [r2, r3]
10047cf6:	183b      	adds	r3, r7, r0
10047cf8:	781b      	ldrb	r3, [r3, #0]
10047cfa:	0004      	movs	r4, r0
10047cfc:	183a      	adds	r2, r7, r0
10047cfe:	1c58      	adds	r0, r3, #1
10047d00:	7010      	strb	r0, [r2, #0]
10047d02:	001a      	movs	r2, r3
10047d04:	697b      	ldr	r3, [r7, #20]
10047d06:	189b      	adds	r3, r3, r2
10047d08:	b2ca      	uxtb	r2, r1
10047d0a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047d0c:	0020      	movs	r0, r4
10047d0e:	183b      	adds	r3, r7, r0
10047d10:	781b      	ldrb	r3, [r3, #0]
10047d12:	183a      	adds	r2, r7, r0
10047d14:	1c59      	adds	r1, r3, #1
10047d16:	7011      	strb	r1, [r2, #0]
10047d18:	001a      	movs	r2, r3
10047d1a:	697b      	ldr	r3, [r7, #20]
10047d1c:	189b      	adds	r3, r3, r2
10047d1e:	2201      	movs	r2, #1
10047d20:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
10047d22:	183b      	adds	r3, r7, r0
10047d24:	781b      	ldrb	r3, [r3, #0]
10047d26:	183a      	adds	r2, r7, r0
10047d28:	1c59      	adds	r1, r3, #1
10047d2a:	7011      	strb	r1, [r2, #0]
10047d2c:	001a      	movs	r2, r3
10047d2e:	697b      	ldr	r3, [r7, #20]
10047d30:	189b      	adds	r3, r3, r2
10047d32:	2291      	movs	r2, #145	@ 0x91
10047d34:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
10047d36:	4a25      	ldr	r2, [pc, #148]	@ (10047dcc <HAL_RADIO_Init+0x67c>)
10047d38:	23d1      	movs	r3, #209	@ 0xd1
10047d3a:	009b      	lsls	r3, r3, #2
10047d3c:	58d1      	ldr	r1, [r2, r3]
10047d3e:	183b      	adds	r3, r7, r0
10047d40:	781b      	ldrb	r3, [r3, #0]
10047d42:	0004      	movs	r4, r0
10047d44:	183a      	adds	r2, r7, r0
10047d46:	1c58      	adds	r0, r3, #1
10047d48:	7010      	strb	r0, [r2, #0]
10047d4a:	001a      	movs	r2, r3
10047d4c:	697b      	ldr	r3, [r7, #20]
10047d4e:	189b      	adds	r3, r3, r2
10047d50:	b2ca      	uxtb	r2, r1
10047d52:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
10047d54:	193b      	adds	r3, r7, r4
10047d56:	781b      	ldrb	r3, [r3, #0]
10047d58:	193a      	adds	r2, r7, r4
10047d5a:	1c59      	adds	r1, r3, #1
10047d5c:	7011      	strb	r1, [r2, #0]
10047d5e:	001a      	movs	r2, r3
10047d60:	697b      	ldr	r3, [r7, #20]
10047d62:	189b      	adds	r3, r3, r2
10047d64:	2200      	movs	r2, #0
10047d66:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
10047d68:	4a19      	ldr	r2, [pc, #100]	@ (10047dd0 <HAL_RADIO_Init+0x680>)
10047d6a:	4b1a      	ldr	r3, [pc, #104]	@ (10047dd4 <HAL_RADIO_Init+0x684>)
10047d6c:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
10047d6e:	4a18      	ldr	r2, [pc, #96]	@ (10047dd0 <HAL_RADIO_Init+0x680>)
10047d70:	4b18      	ldr	r3, [pc, #96]	@ (10047dd4 <HAL_RADIO_Init+0x684>)
10047d72:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
10047d74:	4a18      	ldr	r2, [pc, #96]	@ (10047dd8 <HAL_RADIO_Init+0x688>)
10047d76:	4b17      	ldr	r3, [pc, #92]	@ (10047dd4 <HAL_RADIO_Init+0x684>)
10047d78:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
10047d7a:	4b16      	ldr	r3, [pc, #88]	@ (10047dd4 <HAL_RADIO_Init+0x684>)
10047d7c:	2200      	movs	r2, #0
10047d7e:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
10047d80:	4b14      	ldr	r3, [pc, #80]	@ (10047dd4 <HAL_RADIO_Init+0x684>)
10047d82:	681b      	ldr	r3, [r3, #0]
10047d84:	0018      	movs	r0, r3
10047d86:	f7ff fb3d 	bl	10047404 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
10047d8a:	4b10      	ldr	r3, [pc, #64]	@ (10047dcc <HAL_RADIO_Init+0x67c>)
10047d8c:	2201      	movs	r2, #1
10047d8e:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
10047d90:	f7ff fc8c 	bl	100476ac <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
10047d94:	23c0      	movs	r3, #192	@ 0xc0
10047d96:	05db      	lsls	r3, r3, #23
10047d98:	685b      	ldr	r3, [r3, #4]
10047d9a:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
10047d9c:	23c0      	movs	r3, #192	@ 0xc0
10047d9e:	05db      	lsls	r3, r3, #23
10047da0:	68fa      	ldr	r2, [r7, #12]
10047da2:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
10047da4:	4b0d      	ldr	r3, [pc, #52]	@ (10047ddc <HAL_RADIO_Init+0x68c>)
10047da6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10047da8:	4b0c      	ldr	r3, [pc, #48]	@ (10047ddc <HAL_RADIO_Init+0x68c>)
10047daa:	2101      	movs	r1, #1
10047dac:	430a      	orrs	r2, r1
10047dae:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
10047db0:	4b0a      	ldr	r3, [pc, #40]	@ (10047ddc <HAL_RADIO_Init+0x68c>)
10047db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10047db4:	4b09      	ldr	r3, [pc, #36]	@ (10047ddc <HAL_RADIO_Init+0x68c>)
10047db6:	2101      	movs	r1, #1
10047db8:	430a      	orrs	r2, r1
10047dba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
10047dbc:	23c0      	movs	r3, #192	@ 0xc0
10047dbe:	05db      	lsls	r3, r3, #23
10047dc0:	685b      	ldr	r3, [r3, #4]
10047dc2:	60fb      	str	r3, [r7, #12]

  return;
10047dc4:	46c0      	nop			@ (mov r8, r8)
}
10047dc6:	46bd      	mov	sp, r7
10047dc8:	b00d      	add	sp, #52	@ 0x34
10047dca:	bd90      	pop	{r4, r7, pc}
10047dcc:	60001400 	.word	0x60001400
10047dd0:	20000c98 	.word	0x20000c98
10047dd4:	20000c88 	.word	0x20000c88
10047dd8:	20000c94 	.word	0x20000c94
10047ddc:	60001800 	.word	0x60001800

10047de0 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10047de0:	b580      	push	{r7, lr}
10047de2:	b086      	sub	sp, #24
10047de4:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
10047de6:	4a24      	ldr	r2, [pc, #144]	@ (10047e78 <HAL_RADIO_ReadRSSI+0x98>)
10047de8:	23a9      	movs	r3, #169	@ 0xa9
10047dea:	009b      	lsls	r3, r3, #2
10047dec:	58d3      	ldr	r3, [r2, r3]
10047dee:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10047df0:	4a21      	ldr	r2, [pc, #132]	@ (10047e78 <HAL_RADIO_ReadRSSI+0x98>)
10047df2:	23aa      	movs	r3, #170	@ 0xaa
10047df4:	009b      	lsls	r3, r3, #2
10047df6:	58d3      	ldr	r3, [r2, r3]
10047df8:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
10047dfa:	68bb      	ldr	r3, [r7, #8]
10047dfc:	021b      	lsls	r3, r3, #8
10047dfe:	041b      	lsls	r3, r3, #16
10047e00:	0c1a      	lsrs	r2, r3, #16
10047e02:	68fb      	ldr	r3, [r7, #12]
10047e04:	21ff      	movs	r1, #255	@ 0xff
10047e06:	400b      	ands	r3, r1
10047e08:	4313      	orrs	r3, r2
10047e0a:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
10047e0c:	4a1a      	ldr	r2, [pc, #104]	@ (10047e78 <HAL_RADIO_ReadRSSI+0x98>)
10047e0e:	23ab      	movs	r3, #171	@ 0xab
10047e10:	009b      	lsls	r3, r3, #2
10047e12:	58d3      	ldr	r3, [r2, r3]
10047e14:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
10047e16:	693b      	ldr	r3, [r7, #16]
10047e18:	2b00      	cmp	r3, #0
10047e1a:	d002      	beq.n	10047e22 <HAL_RADIO_ReadRSSI+0x42>
10047e1c:	687b      	ldr	r3, [r7, #4]
10047e1e:	2b0b      	cmp	r3, #11
10047e20:	d902      	bls.n	10047e28 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
10047e22:	237f      	movs	r3, #127	@ 0x7f
10047e24:	617b      	str	r3, [r7, #20]
10047e26:	e020      	b.n	10047e6a <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
10047e28:	687a      	ldr	r2, [r7, #4]
10047e2a:	0013      	movs	r3, r2
10047e2c:	005b      	lsls	r3, r3, #1
10047e2e:	189b      	adds	r3, r3, r2
10047e30:	005b      	lsls	r3, r3, #1
10047e32:	3b77      	subs	r3, #119	@ 0x77
10047e34:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
10047e36:	e005      	b.n	10047e44 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
10047e38:	697b      	ldr	r3, [r7, #20]
10047e3a:	3306      	adds	r3, #6
10047e3c:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
10047e3e:	693b      	ldr	r3, [r7, #16]
10047e40:	085b      	lsrs	r3, r3, #1
10047e42:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
10047e44:	693b      	ldr	r3, [r7, #16]
10047e46:	2b1e      	cmp	r3, #30
10047e48:	d8f6      	bhi.n	10047e38 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
10047e4a:	693a      	ldr	r2, [r7, #16]
10047e4c:	0013      	movs	r3, r2
10047e4e:	005b      	lsls	r3, r3, #1
10047e50:	189b      	adds	r3, r3, r2
10047e52:	009b      	lsls	r3, r3, #2
10047e54:	189b      	adds	r3, r3, r2
10047e56:	015b      	lsls	r3, r3, #5
10047e58:	189b      	adds	r3, r3, r2
10047e5a:	4a08      	ldr	r2, [pc, #32]	@ (10047e7c <HAL_RADIO_ReadRSSI+0x9c>)
10047e5c:	4694      	mov	ip, r2
10047e5e:	4463      	add	r3, ip
10047e60:	0a9b      	lsrs	r3, r3, #10
10047e62:	001a      	movs	r2, r3
10047e64:	697b      	ldr	r3, [r7, #20]
10047e66:	189b      	adds	r3, r3, r2
10047e68:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
10047e6a:	697b      	ldr	r3, [r7, #20]
10047e6c:	b25b      	sxtb	r3, r3
}
10047e6e:	0018      	movs	r0, r3
10047e70:	46bd      	mov	sp, r7
10047e72:	b006      	add	sp, #24
10047e74:	bd80      	pop	{r7, pc}
10047e76:	46c0      	nop			@ (mov r8, r8)
10047e78:	60001400 	.word	0x60001400
10047e7c:	000046a0 	.word	0x000046a0

10047e80 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
10047e80:	b580      	push	{r7, lr}
10047e82:	b082      	sub	sp, #8
10047e84:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
10047e86:	23c0      	movs	r3, #192	@ 0xc0
10047e88:	05db      	lsls	r3, r3, #23
10047e8a:	69db      	ldr	r3, [r3, #28]
10047e8c:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10047e8e:	23c0      	movs	r3, #192	@ 0xc0
10047e90:	05db      	lsls	r3, r3, #23
10047e92:	685b      	ldr	r3, [r3, #4]
10047e94:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10047e96:	23c0      	movs	r3, #192	@ 0xc0
10047e98:	05db      	lsls	r3, r3, #23
10047e9a:	683a      	ldr	r2, [r7, #0]
10047e9c:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10047e9e:	f000 fcd3 	bl	10048848 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10047ea2:	687a      	ldr	r2, [r7, #4]
10047ea4:	683b      	ldr	r3, [r7, #0]
10047ea6:	4313      	orrs	r3, r2
10047ea8:	0018      	movs	r0, r3
10047eaa:	f006 fefa 	bl	1004eca2 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10047eae:	f000 fcc5 	bl	1004883c <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10047eb2:	23c0      	movs	r3, #192	@ 0xc0
10047eb4:	05db      	lsls	r3, r3, #23
10047eb6:	685b      	ldr	r3, [r3, #4]
10047eb8:	603b      	str	r3, [r7, #0]
}
10047eba:	46c0      	nop			@ (mov r8, r8)
10047ebc:	46bd      	mov	sp, r7
10047ebe:	b002      	add	sp, #8
10047ec0:	bd80      	pop	{r7, pc}

10047ec2 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10047ec2:	b580      	push	{r7, lr}
10047ec4:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10047ec6:	f006 fd11 	bl	1004e8ec <HAL_RADIO_TxRxSeqCallback>
}
10047eca:	46c0      	nop			@ (mov r8, r8)
10047ecc:	46bd      	mov	sp, r7
10047ece:	bd80      	pop	{r7, pc}

10047ed0 <__NVIC_EnableIRQ>:
{
10047ed0:	b580      	push	{r7, lr}
10047ed2:	b082      	sub	sp, #8
10047ed4:	af00      	add	r7, sp, #0
10047ed6:	0002      	movs	r2, r0
10047ed8:	1dfb      	adds	r3, r7, #7
10047eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047edc:	1dfb      	adds	r3, r7, #7
10047ede:	781b      	ldrb	r3, [r3, #0]
10047ee0:	2b7f      	cmp	r3, #127	@ 0x7f
10047ee2:	d809      	bhi.n	10047ef8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10047ee4:	1dfb      	adds	r3, r7, #7
10047ee6:	781b      	ldrb	r3, [r3, #0]
10047ee8:	001a      	movs	r2, r3
10047eea:	231f      	movs	r3, #31
10047eec:	401a      	ands	r2, r3
10047eee:	4b04      	ldr	r3, [pc, #16]	@ (10047f00 <__NVIC_EnableIRQ+0x30>)
10047ef0:	2101      	movs	r1, #1
10047ef2:	4091      	lsls	r1, r2
10047ef4:	000a      	movs	r2, r1
10047ef6:	601a      	str	r2, [r3, #0]
}
10047ef8:	46c0      	nop			@ (mov r8, r8)
10047efa:	46bd      	mov	sp, r7
10047efc:	b002      	add	sp, #8
10047efe:	bd80      	pop	{r7, pc}
10047f00:	e000e100 	.word	0xe000e100

10047f04 <LL_RADIO_TIMER_EnableTimer1>:
{
10047f04:	b580      	push	{r7, lr}
10047f06:	b082      	sub	sp, #8
10047f08:	af00      	add	r7, sp, #0
10047f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10047f0c:	687b      	ldr	r3, [r7, #4]
10047f0e:	68db      	ldr	r3, [r3, #12]
10047f10:	2203      	movs	r2, #3
10047f12:	4393      	bics	r3, r2
10047f14:	2202      	movs	r2, #2
10047f16:	431a      	orrs	r2, r3
10047f18:	687b      	ldr	r3, [r7, #4]
10047f1a:	60da      	str	r2, [r3, #12]
}
10047f1c:	46c0      	nop			@ (mov r8, r8)
10047f1e:	46bd      	mov	sp, r7
10047f20:	b002      	add	sp, #8
10047f22:	bd80      	pop	{r7, pc}

10047f24 <LL_RADIO_TIMER_DisableTimer1>:
{
10047f24:	b580      	push	{r7, lr}
10047f26:	b082      	sub	sp, #8
10047f28:	af00      	add	r7, sp, #0
10047f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10047f2c:	687b      	ldr	r3, [r7, #4]
10047f2e:	68db      	ldr	r3, [r3, #12]
10047f30:	2203      	movs	r2, #3
10047f32:	4393      	bics	r3, r2
10047f34:	001a      	movs	r2, r3
10047f36:	687b      	ldr	r3, [r7, #4]
10047f38:	60da      	str	r2, [r3, #12]
}
10047f3a:	46c0      	nop			@ (mov r8, r8)
10047f3c:	46bd      	mov	sp, r7
10047f3e:	b002      	add	sp, #8
10047f40:	bd80      	pop	{r7, pc}

10047f42 <LL_RADIO_TIMER_DisableTimer2>:
{
10047f42:	b580      	push	{r7, lr}
10047f44:	b082      	sub	sp, #8
10047f46:	af00      	add	r7, sp, #0
10047f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10047f4a:	687b      	ldr	r3, [r7, #4]
10047f4c:	68db      	ldr	r3, [r3, #12]
10047f4e:	2203      	movs	r2, #3
10047f50:	4393      	bics	r3, r2
10047f52:	001a      	movs	r2, r3
10047f54:	687b      	ldr	r3, [r7, #4]
10047f56:	60da      	str	r2, [r3, #12]
}
10047f58:	46c0      	nop			@ (mov r8, r8)
10047f5a:	46bd      	mov	sp, r7
10047f5c:	b002      	add	sp, #8
10047f5e:	bd80      	pop	{r7, pc}

10047f60 <LL_RADIO_TIMER_SetTimeout>:
{
10047f60:	b580      	push	{r7, lr}
10047f62:	b082      	sub	sp, #8
10047f64:	af00      	add	r7, sp, #0
10047f66:	6078      	str	r0, [r7, #4]
10047f68:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10047f6a:	687b      	ldr	r3, [r7, #4]
10047f6c:	683a      	ldr	r2, [r7, #0]
10047f6e:	611a      	str	r2, [r3, #16]
}
10047f70:	46c0      	nop			@ (mov r8, r8)
10047f72:	46bd      	mov	sp, r7
10047f74:	b002      	add	sp, #8
10047f76:	bd80      	pop	{r7, pc}

10047f78 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10047f78:	b580      	push	{r7, lr}
10047f7a:	b082      	sub	sp, #8
10047f7c:	af00      	add	r7, sp, #0
10047f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10047f80:	687b      	ldr	r3, [r7, #4]
10047f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047f84:	2280      	movs	r2, #128	@ 0x80
10047f86:	05d2      	lsls	r2, r2, #23
10047f88:	431a      	orrs	r2, r3
10047f8a:	687b      	ldr	r3, [r7, #4]
10047f8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047f8e:	46c0      	nop			@ (mov r8, r8)
10047f90:	46bd      	mov	sp, r7
10047f92:	b002      	add	sp, #8
10047f94:	bd80      	pop	{r7, pc}
	...

10047f98 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10047f98:	b580      	push	{r7, lr}
10047f9a:	b082      	sub	sp, #8
10047f9c:	af00      	add	r7, sp, #0
10047f9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10047fa0:	687b      	ldr	r3, [r7, #4]
10047fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047fa4:	4a03      	ldr	r2, [pc, #12]	@ (10047fb4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10047fa6:	401a      	ands	r2, r3
10047fa8:	687b      	ldr	r3, [r7, #4]
10047faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047fac:	46c0      	nop			@ (mov r8, r8)
10047fae:	46bd      	mov	sp, r7
10047fb0:	b002      	add	sp, #8
10047fb2:	bd80      	pop	{r7, pc}
10047fb4:	bfffffff 	.word	0xbfffffff

10047fb8 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
10047fb8:	b580      	push	{r7, lr}
10047fba:	b082      	sub	sp, #8
10047fbc:	af00      	add	r7, sp, #0
10047fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10047fc0:	687b      	ldr	r3, [r7, #4]
10047fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10047fc4:	2280      	movs	r2, #128	@ 0x80
10047fc6:	05d2      	lsls	r2, r2, #23
10047fc8:	431a      	orrs	r2, r3
10047fca:	687b      	ldr	r3, [r7, #4]
10047fcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
10047fce:	46c0      	nop			@ (mov r8, r8)
10047fd0:	46bd      	mov	sp, r7
10047fd2:	b002      	add	sp, #8
10047fd4:	bd80      	pop	{r7, pc}
	...

10047fd8 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
10047fd8:	b580      	push	{r7, lr}
10047fda:	b082      	sub	sp, #8
10047fdc:	af00      	add	r7, sp, #0
10047fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10047fe0:	687b      	ldr	r3, [r7, #4]
10047fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10047fe4:	4a03      	ldr	r2, [pc, #12]	@ (10047ff4 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10047fe6:	401a      	ands	r2, r3
10047fe8:	687b      	ldr	r3, [r7, #4]
10047fea:	631a      	str	r2, [r3, #48]	@ 0x30
}
10047fec:	46c0      	nop			@ (mov r8, r8)
10047fee:	46bd      	mov	sp, r7
10047ff0:	b002      	add	sp, #8
10047ff2:	bd80      	pop	{r7, pc}
10047ff4:	bfffffff 	.word	0xbfffffff

10047ff8 <LL_RADIO_TIMER_SetWakeupOffset>:
{
10047ff8:	b580      	push	{r7, lr}
10047ffa:	b082      	sub	sp, #8
10047ffc:	af00      	add	r7, sp, #0
10047ffe:	6078      	str	r0, [r7, #4]
10048000:	000a      	movs	r2, r1
10048002:	1cfb      	adds	r3, r7, #3
10048004:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
10048006:	1cfb      	adds	r3, r7, #3
10048008:	781a      	ldrb	r2, [r3, #0]
1004800a:	687b      	ldr	r3, [r7, #4]
1004800c:	609a      	str	r2, [r3, #8]
}
1004800e:	46c0      	nop			@ (mov r8, r8)
10048010:	46bd      	mov	sp, r7
10048012:	b002      	add	sp, #8
10048014:	bd80      	pop	{r7, pc}

10048016 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
10048016:	b580      	push	{r7, lr}
10048018:	b082      	sub	sp, #8
1004801a:	af00      	add	r7, sp, #0
1004801c:	6078      	str	r0, [r7, #4]
1004801e:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10048020:	687b      	ldr	r3, [r7, #4]
10048022:	683a      	ldr	r2, [r7, #0]
10048024:	625a      	str	r2, [r3, #36]	@ 0x24
}
10048026:	46c0      	nop			@ (mov r8, r8)
10048028:	46bd      	mov	sp, r7
1004802a:	b002      	add	sp, #8
1004802c:	bd80      	pop	{r7, pc}

1004802e <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004802e:	b580      	push	{r7, lr}
10048030:	b082      	sub	sp, #8
10048032:	af00      	add	r7, sp, #0
10048034:	6078      	str	r0, [r7, #4]
10048036:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10048038:	687b      	ldr	r3, [r7, #4]
1004803a:	683a      	ldr	r2, [r7, #0]
1004803c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004803e:	46c0      	nop			@ (mov r8, r8)
10048040:	46bd      	mov	sp, r7
10048042:	b002      	add	sp, #8
10048044:	bd80      	pop	{r7, pc}

10048046 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
10048046:	b580      	push	{r7, lr}
10048048:	b082      	sub	sp, #8
1004804a:	af00      	add	r7, sp, #0
1004804c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004804e:	687b      	ldr	r3, [r7, #4]
10048050:	691b      	ldr	r3, [r3, #16]
}
10048052:	0018      	movs	r0, r3
10048054:	46bd      	mov	sp, r7
10048056:	b002      	add	sp, #8
10048058:	bd80      	pop	{r7, pc}

1004805a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004805a:	b580      	push	{r7, lr}
1004805c:	b082      	sub	sp, #8
1004805e:	af00      	add	r7, sp, #0
10048060:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10048062:	687b      	ldr	r3, [r7, #4]
10048064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048066:	2280      	movs	r2, #128	@ 0x80
10048068:	0592      	lsls	r2, r2, #22
1004806a:	431a      	orrs	r2, r3
1004806c:	687b      	ldr	r3, [r7, #4]
1004806e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10048070:	46c0      	nop			@ (mov r8, r8)
10048072:	46bd      	mov	sp, r7
10048074:	b002      	add	sp, #8
10048076:	bd80      	pop	{r7, pc}

10048078 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10048078:	b580      	push	{r7, lr}
1004807a:	b082      	sub	sp, #8
1004807c:	af00      	add	r7, sp, #0
1004807e:	6078      	str	r0, [r7, #4]
10048080:	000a      	movs	r2, r1
10048082:	1cfb      	adds	r3, r7, #3
10048084:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
10048086:	4b08      	ldr	r3, [pc, #32]	@ (100480a8 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10048088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004808a:	2207      	movs	r2, #7
1004808c:	4393      	bics	r3, r2
1004808e:	0019      	movs	r1, r3
10048090:	1cfb      	adds	r3, r7, #3
10048092:	781b      	ldrb	r3, [r3, #0]
10048094:	2207      	movs	r2, #7
10048096:	401a      	ands	r2, r3
10048098:	4b03      	ldr	r3, [pc, #12]	@ (100480a8 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004809a:	430a      	orrs	r2, r1
1004809c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
1004809e:	46c0      	nop			@ (mov r8, r8)
100480a0:	46bd      	mov	sp, r7
100480a2:	b002      	add	sp, #8
100480a4:	bd80      	pop	{r7, pc}
100480a6:	46c0      	nop			@ (mov r8, r8)
100480a8:	60001800 	.word	0x60001800

100480ac <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
100480ac:	b580      	push	{r7, lr}
100480ae:	b082      	sub	sp, #8
100480b0:	af00      	add	r7, sp, #0
100480b2:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
100480b4:	687b      	ldr	r3, [r7, #4]
100480b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100480b8:	2201      	movs	r2, #1
100480ba:	431a      	orrs	r2, r3
100480bc:	687b      	ldr	r3, [r7, #4]
100480be:	649a      	str	r2, [r3, #72]	@ 0x48
}
100480c0:	46c0      	nop			@ (mov r8, r8)
100480c2:	46bd      	mov	sp, r7
100480c4:	b002      	add	sp, #8
100480c6:	bd80      	pop	{r7, pc}

100480c8 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100480c8:	b580      	push	{r7, lr}
100480ca:	b082      	sub	sp, #8
100480cc:	af00      	add	r7, sp, #0
100480ce:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
100480d0:	687b      	ldr	r3, [r7, #4]
100480d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100480d4:	2201      	movs	r2, #1
100480d6:	431a      	orrs	r2, r3
100480d8:	687b      	ldr	r3, [r7, #4]
100480da:	64da      	str	r2, [r3, #76]	@ 0x4c
}
100480dc:	46c0      	nop			@ (mov r8, r8)
100480de:	46bd      	mov	sp, r7
100480e0:	b002      	add	sp, #8
100480e2:	bd80      	pop	{r7, pc}

100480e4 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100480e4:	b580      	push	{r7, lr}
100480e6:	b082      	sub	sp, #8
100480e8:	af00      	add	r7, sp, #0
100480ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
100480ec:	687b      	ldr	r3, [r7, #4]
100480ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100480f0:	2201      	movs	r2, #1
100480f2:	4013      	ands	r3, r2
100480f4:	2b01      	cmp	r3, #1
100480f6:	d101      	bne.n	100480fc <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
100480f8:	2301      	movs	r3, #1
100480fa:	e000      	b.n	100480fe <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
100480fc:	2300      	movs	r3, #0
}
100480fe:	0018      	movs	r0, r3
10048100:	46bd      	mov	sp, r7
10048102:	b002      	add	sp, #8
10048104:	bd80      	pop	{r7, pc}

10048106 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
10048106:	b580      	push	{r7, lr}
10048108:	b082      	sub	sp, #8
1004810a:	af00      	add	r7, sp, #0
1004810c:	6078      	str	r0, [r7, #4]
1004810e:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
10048110:	687b      	ldr	r3, [r7, #4]
10048112:	683a      	ldr	r2, [r7, #0]
10048114:	605a      	str	r2, [r3, #4]
}
10048116:	46c0      	nop			@ (mov r8, r8)
10048118:	46bd      	mov	sp, r7
1004811a:	b002      	add	sp, #8
1004811c:	bd80      	pop	{r7, pc}

1004811e <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004811e:	b580      	push	{r7, lr}
10048120:	b082      	sub	sp, #8
10048122:	af00      	add	r7, sp, #0
10048124:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10048126:	687b      	ldr	r3, [r7, #4]
10048128:	2200      	movs	r2, #0
1004812a:	609a      	str	r2, [r3, #8]
}
1004812c:	46c0      	nop			@ (mov r8, r8)
1004812e:	46bd      	mov	sp, r7
10048130:	b002      	add	sp, #8
10048132:	bd80      	pop	{r7, pc}

10048134 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10048134:	b580      	push	{r7, lr}
10048136:	b082      	sub	sp, #8
10048138:	af00      	add	r7, sp, #0
1004813a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004813c:	687b      	ldr	r3, [r7, #4]
1004813e:	689b      	ldr	r3, [r3, #8]
}
10048140:	0018      	movs	r0, r3
10048142:	46bd      	mov	sp, r7
10048144:	b002      	add	sp, #8
10048146:	bd80      	pop	{r7, pc}

10048148 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10048148:	b580      	push	{r7, lr}
1004814a:	b082      	sub	sp, #8
1004814c:	af00      	add	r7, sp, #0
1004814e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
10048150:	687b      	ldr	r3, [r7, #4]
10048152:	68db      	ldr	r3, [r3, #12]
}
10048154:	0018      	movs	r0, r3
10048156:	46bd      	mov	sp, r7
10048158:	b002      	add	sp, #8
1004815a:	bd80      	pop	{r7, pc}

1004815c <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004815c:	b580      	push	{r7, lr}
1004815e:	b082      	sub	sp, #8
10048160:	af00      	add	r7, sp, #0
10048162:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10048164:	687b      	ldr	r3, [r7, #4]
10048166:	691b      	ldr	r3, [r3, #16]
10048168:	2201      	movs	r2, #1
1004816a:	431a      	orrs	r2, r3
1004816c:	687b      	ldr	r3, [r7, #4]
1004816e:	611a      	str	r2, [r3, #16]
}
10048170:	46c0      	nop			@ (mov r8, r8)
10048172:	46bd      	mov	sp, r7
10048174:	b002      	add	sp, #8
10048176:	bd80      	pop	{r7, pc}

10048178 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10048178:	b580      	push	{r7, lr}
1004817a:	b082      	sub	sp, #8
1004817c:	af00      	add	r7, sp, #0
1004817e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
10048180:	687b      	ldr	r3, [r7, #4]
10048182:	691b      	ldr	r3, [r3, #16]
10048184:	2201      	movs	r2, #1
10048186:	4013      	ands	r3, r2
10048188:	2b01      	cmp	r3, #1
1004818a:	d101      	bne.n	10048190 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004818c:	2301      	movs	r3, #1
1004818e:	e000      	b.n	10048192 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
10048190:	2300      	movs	r3, #0
}
10048192:	0018      	movs	r0, r3
10048194:	46bd      	mov	sp, r7
10048196:	b002      	add	sp, #8
10048198:	bd80      	pop	{r7, pc}
	...

1004819c <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004819c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004819e:	b083      	sub	sp, #12
100481a0:	af00      	add	r7, sp, #0
100481a2:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
100481a4:	4b71      	ldr	r3, [pc, #452]	@ (1004836c <HAL_RADIO_TIMER_Init+0x1d0>)
100481a6:	0018      	movs	r0, r3
100481a8:	f7ff ff8e 	bl	100480c8 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
100481ac:	4b6f      	ldr	r3, [pc, #444]	@ (1004836c <HAL_RADIO_TIMER_Init+0x1d0>)
100481ae:	0018      	movs	r0, r3
100481b0:	f7ff ff7c 	bl	100480ac <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
100481b4:	2017      	movs	r0, #23
100481b6:	f7ff fe8b 	bl	10047ed0 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
100481ba:	2014      	movs	r0, #20
100481bc:	f7ff fe88 	bl	10047ed0 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
100481c0:	687b      	ldr	r3, [r7, #4]
100481c2:	685b      	ldr	r3, [r3, #4]
100481c4:	1e5a      	subs	r2, r3, #1
100481c6:	4193      	sbcs	r3, r2
100481c8:	b2db      	uxtb	r3, r3
100481ca:	001a      	movs	r2, r3
100481cc:	4b68      	ldr	r3, [pc, #416]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100481ce:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
100481d0:	4b67      	ldr	r3, [pc, #412]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100481d2:	781b      	ldrb	r3, [r3, #0]
100481d4:	2b00      	cmp	r3, #0
100481d6:	d103      	bne.n	100481e0 <HAL_RADIO_TIMER_Init+0x44>
100481d8:	687b      	ldr	r3, [r7, #4]
100481da:	789b      	ldrb	r3, [r3, #2]
100481dc:	2b00      	cmp	r3, #0
100481de:	d002      	beq.n	100481e6 <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
100481e0:	f000 fc0a 	bl	100489f8 <_calibrationProcedure>
100481e4:	e010      	b.n	10048208 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
100481e6:	4b62      	ldr	r3, [pc, #392]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100481e8:	22c8      	movs	r2, #200	@ 0xc8
100481ea:	0352      	lsls	r2, r2, #13
100481ec:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
100481ee:	4b60      	ldr	r3, [pc, #384]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100481f0:	22c8      	movs	r2, #200	@ 0xc8
100481f2:	0352      	lsls	r2, r2, #13
100481f4:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
100481f6:	4b5e      	ldr	r3, [pc, #376]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100481f8:	4a5e      	ldr	r2, [pc, #376]	@ (10048374 <HAL_RADIO_TIMER_Init+0x1d8>)
100481fa:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
100481fc:	4b5c      	ldr	r3, [pc, #368]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100481fe:	4a5e      	ldr	r2, [pc, #376]	@ (10048378 <HAL_RADIO_TIMER_Init+0x1dc>)
10048200:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
10048202:	4b5b      	ldr	r3, [pc, #364]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048204:	4a5d      	ldr	r2, [pc, #372]	@ (1004837c <HAL_RADIO_TIMER_Init+0x1e0>)
10048206:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
10048208:	687b      	ldr	r3, [r7, #4]
1004820a:	685b      	ldr	r3, [r3, #4]
1004820c:	2b00      	cmp	r3, #0
1004820e:	d108      	bne.n	10048222 <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
10048210:	23a0      	movs	r3, #160	@ 0xa0
10048212:	05db      	lsls	r3, r3, #23
10048214:	0018      	movs	r0, r3
10048216:	f000 fb23 	bl	10048860 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004821a:	0002      	movs	r2, r0
1004821c:	4b54      	ldr	r3, [pc, #336]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
1004821e:	605a      	str	r2, [r3, #4]
10048220:	e01d      	b.n	1004825e <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
10048222:	687b      	ldr	r3, [r7, #4]
10048224:	685b      	ldr	r3, [r3, #4]
10048226:	031b      	lsls	r3, r3, #12
10048228:	210a      	movs	r1, #10
1004822a:	0018      	movs	r0, r3
1004822c:	f7f8 f808 	bl	10040240 <__udivsi3>
10048230:	0003      	movs	r3, r0
10048232:	001a      	movs	r2, r3
10048234:	4b4e      	ldr	r3, [pc, #312]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048236:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10048238:	4b4d      	ldr	r3, [pc, #308]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
1004823a:	685e      	ldr	r6, [r3, #4]
1004823c:	4b50      	ldr	r3, [pc, #320]	@ (10048380 <HAL_RADIO_TIMER_Init+0x1e4>)
1004823e:	0018      	movs	r0, r3
10048240:	f000 fb0e 	bl	10048860 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10048244:	0003      	movs	r3, r0
10048246:	429e      	cmp	r6, r3
10048248:	d202      	bcs.n	10048250 <HAL_RADIO_TIMER_Init+0xb4>
1004824a:	4b49      	ldr	r3, [pc, #292]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
1004824c:	685a      	ldr	r2, [r3, #4]
1004824e:	e004      	b.n	1004825a <HAL_RADIO_TIMER_Init+0xbe>
10048250:	4b4b      	ldr	r3, [pc, #300]	@ (10048380 <HAL_RADIO_TIMER_Init+0x1e4>)
10048252:	0018      	movs	r0, r3
10048254:	f000 fb04 	bl	10048860 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10048258:	0002      	movs	r2, r0
1004825a:	4b45      	ldr	r3, [pc, #276]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
1004825c:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration = CALIBRATION_CHECK_DURATION;
1004825e:	4b44      	ldr	r3, [pc, #272]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048260:	2264      	movs	r2, #100	@ 0x64
10048262:	609a      	str	r2, [r3, #8]
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10048264:	4b42      	ldr	r3, [pc, #264]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048266:	2200      	movs	r2, #0
10048268:	731a      	strb	r2, [r3, #12]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004826a:	687b      	ldr	r3, [r7, #4]
1004826c:	881b      	ldrh	r3, [r3, #0]
1004826e:	001a      	movs	r2, r3
10048270:	4b3f      	ldr	r3, [pc, #252]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048272:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
10048274:	4b3e      	ldr	r3, [pc, #248]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10048278:	b29a      	uxth	r2, r3
1004827a:	4b3d      	ldr	r3, [pc, #244]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
1004827c:	699b      	ldr	r3, [r3, #24]
1004827e:	0019      	movs	r1, r3
10048280:	0010      	movs	r0, r2
10048282:	f000 fd2d 	bl	10048ce0 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
10048286:	4b3a      	ldr	r3, [pc, #232]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048288:	2284      	movs	r2, #132	@ 0x84
1004828a:	2100      	movs	r1, #0
1004828c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004828e:	4938      	ldr	r1, [pc, #224]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048290:	2200      	movs	r2, #0
10048292:	2300      	movs	r3, #0
10048294:	670a      	str	r2, [r1, #112]	@ 0x70
10048296:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10048298:	4b34      	ldr	r3, [pc, #208]	@ (1004836c <HAL_RADIO_TIMER_Init+0x1d0>)
1004829a:	0018      	movs	r0, r3
1004829c:	f7ff fed3 	bl	10048046 <LL_RADIO_TIMER_GetAbsoluteTime>
100482a0:	0002      	movs	r2, r0
100482a2:	4b33      	ldr	r3, [pc, #204]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482a4:	2180      	movs	r1, #128	@ 0x80
100482a6:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
100482a8:	4931      	ldr	r1, [pc, #196]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482aa:	2200      	movs	r2, #0
100482ac:	2300      	movs	r3, #0
100482ae:	678a      	str	r2, [r1, #120]	@ 0x78
100482b0:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
100482b2:	492f      	ldr	r1, [pc, #188]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482b4:	2200      	movs	r2, #0
100482b6:	2300      	movs	r3, #0
100482b8:	628a      	str	r2, [r1, #40]	@ 0x28
100482ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
100482bc:	4b2c      	ldr	r3, [pc, #176]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482be:	2234      	movs	r2, #52	@ 0x34
100482c0:	2100      	movs	r1, #0
100482c2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100482c4:	4b2a      	ldr	r3, [pc, #168]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482c6:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100482c8:	4b29      	ldr	r3, [pc, #164]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482ca:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100482cc:	0019      	movs	r1, r3
100482ce:	4b2d      	ldr	r3, [pc, #180]	@ (10048384 <HAL_RADIO_TIMER_Init+0x1e8>)
100482d0:	001a      	movs	r2, r3
100482d2:	f7f7 fef5 	bl	100400c0 <blue_unit_conversion>
100482d6:	0002      	movs	r2, r0
100482d8:	4b25      	ldr	r3, [pc, #148]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482da:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
100482dc:	4b24      	ldr	r3, [pc, #144]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482de:	7819      	ldrb	r1, [r3, #0]
100482e0:	4b23      	ldr	r3, [pc, #140]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482e2:	2294      	movs	r2, #148	@ 0x94
100482e4:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
100482e6:	4b22      	ldr	r3, [pc, #136]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482e8:	228c      	movs	r2, #140	@ 0x8c
100482ea:	2100      	movs	r1, #0
100482ec:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
100482ee:	4b20      	ldr	r3, [pc, #128]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482f0:	2290      	movs	r2, #144	@ 0x90
100482f2:	2101      	movs	r1, #1
100482f4:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
100482f6:	4b1e      	ldr	r3, [pc, #120]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
100482f8:	2293      	movs	r2, #147	@ 0x93
100482fa:	2100      	movs	r1, #0
100482fc:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
100482fe:	4b1c      	ldr	r3, [pc, #112]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048300:	2291      	movs	r2, #145	@ 0x91
10048302:	2100      	movs	r1, #0
10048304:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
10048306:	4b1a      	ldr	r3, [pc, #104]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048308:	2292      	movs	r2, #146	@ 0x92
1004830a:	2100      	movs	r1, #0
1004830c:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004830e:	4b18      	ldr	r3, [pc, #96]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048310:	2261      	movs	r2, #97	@ 0x61
10048312:	2100      	movs	r1, #0
10048314:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10048316:	4b16      	ldr	r3, [pc, #88]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048318:	2262      	movs	r2, #98	@ 0x62
1004831a:	2100      	movs	r1, #0
1004831c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004831e:	4b14      	ldr	r3, [pc, #80]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048320:	2263      	movs	r2, #99	@ 0x63
10048322:	2100      	movs	r1, #0
10048324:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10048326:	4912      	ldr	r1, [pc, #72]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048328:	2200      	movs	r2, #0
1004832a:	2300      	movs	r3, #0
1004832c:	658a      	str	r2, [r1, #88]	@ 0x58
1004832e:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
10048330:	4b0f      	ldr	r3, [pc, #60]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048332:	4a15      	ldr	r2, [pc, #84]	@ (10048388 <HAL_RADIO_TIMER_Init+0x1ec>)
10048334:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10048336:	4b0e      	ldr	r3, [pc, #56]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048338:	2200      	movs	r2, #0
1004833a:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004833c:	f000 faa6 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
10048340:	0002      	movs	r2, r0
10048342:	000b      	movs	r3, r1
10048344:	490a      	ldr	r1, [pc, #40]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
10048346:	6849      	ldr	r1, [r1, #4]
10048348:	000c      	movs	r4, r1
1004834a:	2100      	movs	r1, #0
1004834c:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004834e:	1912      	adds	r2, r2, r4
10048350:	416b      	adcs	r3, r5
10048352:	490e      	ldr	r1, [pc, #56]	@ (1004838c <HAL_RADIO_TIMER_Init+0x1f0>)
10048354:	0008      	movs	r0, r1
10048356:	f000 fd1d 	bl	10048d94 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004835a:	4b05      	ldr	r3, [pc, #20]	@ (10048370 <HAL_RADIO_TIMER_Init+0x1d4>)
1004835c:	2101      	movs	r1, #1
1004835e:	0018      	movs	r0, r3
10048360:	f000 fbfa 	bl	10048b58 <_configureTxRxDelay>
}
10048364:	46c0      	nop			@ (mov r8, r8)
10048366:	46bd      	mov	sp, r7
10048368:	b003      	add	sp, #12
1004836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004836c:	60001800 	.word	0x60001800
10048370:	20000cc0 	.word	0x20000cc0
10048374:	0028f5c2 	.word	0x0028f5c2
10048378:	00005b8d 	.word	0x00005b8d
1004837c:	0165ebec 	.word	0x0165ebec
10048380:	ffffefff 	.word	0xffffefff
10048384:	00000326 	.word	0x00000326
10048388:	10048d3d 	.word	0x10048d3d
1004838c:	20000d00 	.word	0x20000d00

10048390 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10048390:	b5b0      	push	{r4, r5, r7, lr}
10048392:	b090      	sub	sp, #64	@ 0x40
10048394:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
10048396:	230f      	movs	r3, #15
10048398:	18fb      	adds	r3, r7, r3
1004839a:	2200      	movs	r2, #0
1004839c:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004839e:	f3ef 8310 	mrs	r3, PRIMASK
100483a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
100483a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
100483a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
100483a8:	b672      	cpsid	i
}
100483aa:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
100483ac:	4b9e      	ldr	r3, [pc, #632]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100483ae:	2261      	movs	r2, #97	@ 0x61
100483b0:	5c9b      	ldrb	r3, [r3, r2]
100483b2:	2b00      	cmp	r3, #0
100483b4:	d00f      	beq.n	100483d6 <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
100483b6:	4b9c      	ldr	r3, [pc, #624]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100483b8:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
100483ba:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
100483bc:	f000 fa66 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
100483c0:	0002      	movs	r2, r0
100483c2:	000b      	movs	r3, r1
100483c4:	42ab      	cmp	r3, r5
100483c6:	d802      	bhi.n	100483ce <HAL_RADIO_TIMER_Tick+0x3e>
100483c8:	d105      	bne.n	100483d6 <HAL_RADIO_TIMER_Tick+0x46>
100483ca:	42a2      	cmp	r2, r4
100483cc:	d903      	bls.n	100483d6 <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
100483ce:	4b96      	ldr	r3, [pc, #600]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100483d0:	2261      	movs	r2, #97	@ 0x61
100483d2:	2100      	movs	r1, #0
100483d4:	5499      	strb	r1, [r3, r2]
100483d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100483d8:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100483da:	6a3b      	ldr	r3, [r7, #32]
100483dc:	f383 8810 	msr	PRIMASK, r3
}
100483e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100483e2:	e06e      	b.n	100484c2 <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
100483e4:	4b90      	ldr	r3, [pc, #576]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100483e6:	2291      	movs	r2, #145	@ 0x91
100483e8:	5c99      	ldrb	r1, [r3, r2]
100483ea:	4b8f      	ldr	r3, [pc, #572]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100483ec:	2292      	movs	r2, #146	@ 0x92
100483ee:	5c9a      	ldrb	r2, [r3, r2]
100483f0:	232b      	movs	r3, #43	@ 0x2b
100483f2:	2008      	movs	r0, #8
100483f4:	181b      	adds	r3, r3, r0
100483f6:	19db      	adds	r3, r3, r7
100483f8:	1a8a      	subs	r2, r1, r2
100483fa:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
100483fc:	4b8a      	ldr	r3, [pc, #552]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100483fe:	228c      	movs	r2, #140	@ 0x8c
10048400:	589b      	ldr	r3, [r3, r2]
10048402:	183a      	adds	r2, r7, r0
10048404:	0011      	movs	r1, r2
10048406:	0018      	movs	r0, r3
10048408:	f000 fe9a 	bl	10049140 <_check_callbacks>
1004840c:	0002      	movs	r2, r0
1004840e:	4b86      	ldr	r3, [pc, #536]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048410:	218c      	movs	r1, #140	@ 0x8c
10048412:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
10048414:	68bb      	ldr	r3, [r7, #8]
10048416:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
10048418:	e010      	b.n	1004843c <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004841a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004841c:	691b      	ldr	r3, [r3, #16]
1004841e:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
10048420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048422:	2200      	movs	r2, #0
10048424:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
10048426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048428:	689b      	ldr	r3, [r3, #8]
1004842a:	2b00      	cmp	r3, #0
1004842c:	d004      	beq.n	10048438 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004842e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048430:	689b      	ldr	r3, [r3, #8]
10048432:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048434:	0010      	movs	r0, r2
10048436:	4798      	blx	r3
      }
      curr = next;
10048438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004843c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004843e:	2b00      	cmp	r3, #0
10048440:	d1eb      	bne.n	1004841a <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10048442:	4b79      	ldr	r3, [pc, #484]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048444:	228c      	movs	r2, #140	@ 0x8c
10048446:	589b      	ldr	r3, [r3, r2]
10048448:	240f      	movs	r4, #15
1004844a:	193a      	adds	r2, r7, r4
1004844c:	0011      	movs	r1, r2
1004844e:	0018      	movs	r0, r3
10048450:	f000 fd66 	bl	10048f20 <_update_user_timeout>
10048454:	0002      	movs	r2, r0
10048456:	4b74      	ldr	r3, [pc, #464]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048458:	218c      	movs	r1, #140	@ 0x8c
1004845a:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004845c:	193b      	adds	r3, r7, r4
1004845e:	781b      	ldrb	r3, [r3, #0]
10048460:	2b01      	cmp	r3, #1
10048462:	d121      	bne.n	100484a8 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048464:	f3ef 8310 	mrs	r3, PRIMASK
10048468:	61fb      	str	r3, [r7, #28]
  return(result);
1004846a:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004846c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004846e:	b672      	cpsid	i
}
10048470:	46c0      	nop			@ (mov r8, r8)
10048472:	4b6d      	ldr	r3, [pc, #436]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048474:	2291      	movs	r2, #145	@ 0x91
10048476:	5c9b      	ldrb	r3, [r3, r2]
10048478:	3301      	adds	r3, #1
1004847a:	4a6b      	ldr	r2, [pc, #428]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004847c:	2192      	movs	r1, #146	@ 0x92
1004847e:	5c52      	ldrb	r2, [r2, r1]
10048480:	4293      	cmp	r3, r2
10048482:	d103      	bne.n	1004848c <HAL_RADIO_TIMER_Tick+0xfc>
10048484:	4b68      	ldr	r3, [pc, #416]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048486:	2291      	movs	r2, #145	@ 0x91
10048488:	5c9b      	ldrb	r3, [r3, r2]
1004848a:	e004      	b.n	10048496 <HAL_RADIO_TIMER_Tick+0x106>
1004848c:	4b66      	ldr	r3, [pc, #408]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004848e:	2291      	movs	r2, #145	@ 0x91
10048490:	5c9b      	ldrb	r3, [r3, r2]
10048492:	3301      	adds	r3, #1
10048494:	b2db      	uxtb	r3, r3
10048496:	4a64      	ldr	r2, [pc, #400]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048498:	2191      	movs	r1, #145	@ 0x91
1004849a:	5453      	strb	r3, [r2, r1]
1004849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004849e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100484a0:	69bb      	ldr	r3, [r7, #24]
100484a2:	f383 8810 	msr	PRIMASK, r3
}
100484a6:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
100484a8:	4b5f      	ldr	r3, [pc, #380]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484aa:	2292      	movs	r2, #146	@ 0x92
100484ac:	5c9a      	ldrb	r2, [r3, r2]
100484ae:	232b      	movs	r3, #43	@ 0x2b
100484b0:	2108      	movs	r1, #8
100484b2:	185b      	adds	r3, r3, r1
100484b4:	19db      	adds	r3, r3, r7
100484b6:	781b      	ldrb	r3, [r3, #0]
100484b8:	18d3      	adds	r3, r2, r3
100484ba:	b2d9      	uxtb	r1, r3
100484bc:	4b5a      	ldr	r3, [pc, #360]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484be:	2292      	movs	r2, #146	@ 0x92
100484c0:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100484c2:	4b59      	ldr	r3, [pc, #356]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484c4:	2291      	movs	r2, #145	@ 0x91
100484c6:	5c9a      	ldrb	r2, [r3, r2]
100484c8:	4b57      	ldr	r3, [pc, #348]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484ca:	2192      	movs	r1, #146	@ 0x92
100484cc:	5c5b      	ldrb	r3, [r3, r1]
100484ce:	429a      	cmp	r2, r3
100484d0:	d30a      	bcc.n	100484e8 <HAL_RADIO_TIMER_Tick+0x158>
100484d2:	4b55      	ldr	r3, [pc, #340]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484d4:	2291      	movs	r2, #145	@ 0x91
100484d6:	5c9a      	ldrb	r2, [r3, r2]
100484d8:	4b53      	ldr	r3, [pc, #332]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484da:	2192      	movs	r1, #146	@ 0x92
100484dc:	5c5b      	ldrb	r3, [r3, r1]
100484de:	1ad3      	subs	r3, r2, r3
100484e0:	1e5a      	subs	r2, r3, #1
100484e2:	4193      	sbcs	r3, r2
100484e4:	b2db      	uxtb	r3, r3
100484e6:	e00c      	b.n	10048502 <HAL_RADIO_TIMER_Tick+0x172>
100484e8:	4b4f      	ldr	r3, [pc, #316]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484ea:	2291      	movs	r2, #145	@ 0x91
100484ec:	5c9b      	ldrb	r3, [r3, r2]
100484ee:	0019      	movs	r1, r3
100484f0:	4b4d      	ldr	r3, [pc, #308]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100484f2:	2292      	movs	r2, #146	@ 0x92
100484f4:	5c9b      	ldrb	r3, [r3, r2]
100484f6:	1acb      	subs	r3, r1, r3
100484f8:	3301      	adds	r3, #1
100484fa:	33ff      	adds	r3, #255	@ 0xff
100484fc:	1e5a      	subs	r2, r3, #1
100484fe:	4193      	sbcs	r3, r2
10048500:	b2db      	uxtb	r3, r3
10048502:	2b00      	cmp	r3, #0
10048504:	d000      	beq.n	10048508 <HAL_RADIO_TIMER_Tick+0x178>
10048506:	e76d      	b.n	100483e4 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
10048508:	4b47      	ldr	r3, [pc, #284]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004850a:	7b1b      	ldrb	r3, [r3, #12]
1004850c:	2b00      	cmp	r3, #0
1004850e:	d06a      	beq.n	100485e6 <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
10048510:	4b46      	ldr	r3, [pc, #280]	@ (1004862c <HAL_RADIO_TIMER_Tick+0x29c>)
10048512:	0018      	movs	r0, r3
10048514:	f7ff fe30 	bl	10048178 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10048518:	1e03      	subs	r3, r0, #0
1004851a:	d100      	bne.n	1004851e <HAL_RADIO_TIMER_Tick+0x18e>
1004851c:	e07f      	b.n	1004861e <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004851e:	4b42      	ldr	r3, [pc, #264]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048520:	2200      	movs	r2, #0
10048522:	731a      	strb	r2, [r3, #12]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10048524:	4b40      	ldr	r3, [pc, #256]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048526:	2294      	movs	r2, #148	@ 0x94
10048528:	5c9b      	ldrb	r3, [r3, r2]
1004852a:	2b00      	cmp	r3, #0
1004852c:	d109      	bne.n	10048542 <HAL_RADIO_TIMER_Tick+0x1b2>
1004852e:	4b3e      	ldr	r3, [pc, #248]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048530:	2293      	movs	r2, #147	@ 0x93
10048532:	5c9b      	ldrb	r3, [r3, r2]
10048534:	2b00      	cmp	r3, #0
10048536:	d004      	beq.n	10048542 <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10048538:	4b3b      	ldr	r3, [pc, #236]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004853a:	2293      	movs	r2, #147	@ 0x93
1004853c:	2100      	movs	r1, #0
1004853e:	5499      	strb	r1, [r3, r2]
10048540:	e034      	b.n	100485ac <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10048542:	f000 fe47 	bl	100491d4 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10048546:	4b38      	ldr	r3, [pc, #224]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048548:	228c      	movs	r2, #140	@ 0x8c
1004854a:	589b      	ldr	r3, [r3, r2]
1004854c:	240f      	movs	r4, #15
1004854e:	193a      	adds	r2, r7, r4
10048550:	0011      	movs	r1, r2
10048552:	0018      	movs	r0, r3
10048554:	f000 fce4 	bl	10048f20 <_update_user_timeout>
10048558:	0002      	movs	r2, r0
1004855a:	4b33      	ldr	r3, [pc, #204]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004855c:	218c      	movs	r1, #140	@ 0x8c
1004855e:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10048560:	193b      	adds	r3, r7, r4
10048562:	781b      	ldrb	r3, [r3, #0]
10048564:	2b01      	cmp	r3, #1
10048566:	d121      	bne.n	100485ac <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048568:	f3ef 8310 	mrs	r3, PRIMASK
1004856c:	617b      	str	r3, [r7, #20]
  return(result);
1004856e:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10048570:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
10048572:	b672      	cpsid	i
}
10048574:	46c0      	nop			@ (mov r8, r8)
10048576:	4b2c      	ldr	r3, [pc, #176]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048578:	2291      	movs	r2, #145	@ 0x91
1004857a:	5c9b      	ldrb	r3, [r3, r2]
1004857c:	3301      	adds	r3, #1
1004857e:	4a2a      	ldr	r2, [pc, #168]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048580:	2192      	movs	r1, #146	@ 0x92
10048582:	5c52      	ldrb	r2, [r2, r1]
10048584:	4293      	cmp	r3, r2
10048586:	d103      	bne.n	10048590 <HAL_RADIO_TIMER_Tick+0x200>
10048588:	4b27      	ldr	r3, [pc, #156]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004858a:	2291      	movs	r2, #145	@ 0x91
1004858c:	5c9b      	ldrb	r3, [r3, r2]
1004858e:	e004      	b.n	1004859a <HAL_RADIO_TIMER_Tick+0x20a>
10048590:	4b25      	ldr	r3, [pc, #148]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
10048592:	2291      	movs	r2, #145	@ 0x91
10048594:	5c9b      	ldrb	r3, [r3, r2]
10048596:	3301      	adds	r3, #1
10048598:	b2db      	uxtb	r3, r3
1004859a:	4a23      	ldr	r2, [pc, #140]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
1004859c:	2191      	movs	r1, #145	@ 0x91
1004859e:	5453      	strb	r3, [r2, r1]
100485a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100485a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100485a4:	693b      	ldr	r3, [r7, #16]
100485a6:	f383 8810 	msr	PRIMASK, r3
}
100485aa:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
100485ac:	230f      	movs	r3, #15
100485ae:	18fa      	adds	r2, r7, r3
100485b0:	4b1f      	ldr	r3, [pc, #124]	@ (10048630 <HAL_RADIO_TIMER_Tick+0x2a0>)
100485b2:	0011      	movs	r1, r2
100485b4:	0018      	movs	r0, r3
100485b6:	f000 fec1 	bl	1004933c <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
100485ba:	4b1e      	ldr	r3, [pc, #120]	@ (10048634 <HAL_RADIO_TIMER_Tick+0x2a4>)
100485bc:	0018      	movs	r0, r3
100485be:	f000 f991 	bl	100488e4 <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
100485c2:	f000 f963 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
100485c6:	0002      	movs	r2, r0
100485c8:	000b      	movs	r3, r1
100485ca:	4917      	ldr	r1, [pc, #92]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100485cc:	6849      	ldr	r1, [r1, #4]
100485ce:	6039      	str	r1, [r7, #0]
100485d0:	2100      	movs	r1, #0
100485d2:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
100485d4:	6838      	ldr	r0, [r7, #0]
100485d6:	6879      	ldr	r1, [r7, #4]
100485d8:	1812      	adds	r2, r2, r0
100485da:	414b      	adcs	r3, r1
100485dc:	4915      	ldr	r1, [pc, #84]	@ (10048634 <HAL_RADIO_TIMER_Tick+0x2a4>)
100485de:	0008      	movs	r0, r1
100485e0:	f000 fbd8 	bl	10048d94 <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
100485e4:	e01b      	b.n	1004861e <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100485e6:	4b10      	ldr	r3, [pc, #64]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100485e8:	781b      	ldrb	r3, [r3, #0]
100485ea:	2b00      	cmp	r3, #0
100485ec:	d017      	beq.n	1004861e <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
100485ee:	f000 f94d 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
100485f2:	4b0d      	ldr	r3, [pc, #52]	@ (10048628 <HAL_RADIO_TIMER_Tick+0x298>)
100485f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100485f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100485f8:	24fa      	movs	r4, #250	@ 0xfa
100485fa:	0364      	lsls	r4, r4, #13
100485fc:	2500      	movs	r5, #0
100485fe:	1912      	adds	r2, r2, r4
10048600:	416b      	adcs	r3, r5
10048602:	4299      	cmp	r1, r3
10048604:	d803      	bhi.n	1004860e <HAL_RADIO_TIMER_Tick+0x27e>
10048606:	d10a      	bne.n	1004861e <HAL_RADIO_TIMER_Tick+0x28e>
10048608:	4290      	cmp	r0, r2
1004860a:	d800      	bhi.n	1004860e <HAL_RADIO_TIMER_Tick+0x27e>
}
1004860c:	e007      	b.n	1004861e <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004860e:	4b09      	ldr	r3, [pc, #36]	@ (10048634 <HAL_RADIO_TIMER_Tick+0x2a4>)
10048610:	0018      	movs	r0, r3
10048612:	f000 f967 	bl	100488e4 <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10048616:	4b07      	ldr	r3, [pc, #28]	@ (10048634 <HAL_RADIO_TIMER_Tick+0x2a4>)
10048618:	0018      	movs	r0, r3
1004861a:	f000 fb8f 	bl	10048d3c <_calibration_callback>
}
1004861e:	46c0      	nop			@ (mov r8, r8)
10048620:	46bd      	mov	sp, r7
10048622:	b010      	add	sp, #64	@ 0x40
10048624:	bdb0      	pop	{r4, r5, r7, pc}
10048626:	46c0      	nop			@ (mov r8, r8)
10048628:	20000cc0 	.word	0x20000cc0
1004862c:	60001000 	.word	0x60001000
10048630:	20000d18 	.word	0x20000d18
10048634:	20000d00 	.word	0x20000d00

10048638 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10048638:	b580      	push	{r7, lr}
1004863a:	b082      	sub	sp, #8
1004863c:	af00      	add	r7, sp, #0
1004863e:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10048640:	23c0      	movs	r3, #192	@ 0xc0
10048642:	05db      	lsls	r3, r3, #23
10048644:	695b      	ldr	r3, [r3, #20]
10048646:	687a      	ldr	r2, [r7, #4]
10048648:	0011      	movs	r1, r2
1004864a:	0018      	movs	r0, r3
1004864c:	f000 ffe8 	bl	10049620 <TIMER_GetPastSysTime>
10048650:	0002      	movs	r2, r0
10048652:	000b      	movs	r3, r1
}
10048654:	0010      	movs	r0, r2
10048656:	0019      	movs	r1, r3
10048658:	46bd      	mov	sp, r7
1004865a:	b002      	add	sp, #8
1004865c:	bd80      	pop	{r7, pc}
	...

10048660 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10048660:	b5f0      	push	{r4, r5, r6, r7, lr}
10048662:	b085      	sub	sp, #20
10048664:	af00      	add	r7, sp, #0
10048666:	6078      	str	r0, [r7, #4]
10048668:	0008      	movs	r0, r1
1004866a:	0011      	movs	r1, r2
1004866c:	1cfb      	adds	r3, r7, #3
1004866e:	1c02      	adds	r2, r0, #0
10048670:	701a      	strb	r2, [r3, #0]
10048672:	1cbb      	adds	r3, r7, #2
10048674:	1c0a      	adds	r2, r1, #0
10048676:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10048678:	260f      	movs	r6, #15
1004867a:	19bb      	adds	r3, r7, r6
1004867c:	2200      	movs	r2, #0
1004867e:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10048680:	1cfb      	adds	r3, r7, #3
10048682:	781b      	ldrb	r3, [r3, #0]
10048684:	1e5a      	subs	r2, r3, #1
10048686:	4193      	sbcs	r3, r2
10048688:	b2d9      	uxtb	r1, r3
1004868a:	4b1b      	ldr	r3, [pc, #108]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004868c:	2264      	movs	r2, #100	@ 0x64
1004868e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10048690:	1cbb      	adds	r3, r7, #2
10048692:	781b      	ldrb	r3, [r3, #0]
10048694:	1e5a      	subs	r2, r3, #1
10048696:	4193      	sbcs	r3, r2
10048698:	b2d9      	uxtb	r1, r3
1004869a:	4b17      	ldr	r3, [pc, #92]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004869c:	2260      	movs	r2, #96	@ 0x60
1004869e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
100486a0:	4b15      	ldr	r3, [pc, #84]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
100486a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100486a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100486a6:	4914      	ldr	r1, [pc, #80]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
100486a8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
100486aa:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
100486ac:	6879      	ldr	r1, [r7, #4]
100486ae:	1a09      	subs	r1, r1, r0
100486b0:	000c      	movs	r4, r1
100486b2:	2100      	movs	r1, #0
100486b4:	000d      	movs	r5, r1
100486b6:	1912      	adds	r2, r2, r4
100486b8:	416b      	adcs	r3, r5
100486ba:	490f      	ldr	r1, [pc, #60]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
100486bc:	658a      	str	r2, [r1, #88]	@ 0x58
100486be:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
100486c0:	4b0d      	ldr	r3, [pc, #52]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
100486c2:	2261      	movs	r2, #97	@ 0x61
100486c4:	2100      	movs	r1, #0
100486c6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
100486c8:	4b0b      	ldr	r3, [pc, #44]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
100486ca:	2263      	movs	r2, #99	@ 0x63
100486cc:	2100      	movs	r1, #0
100486ce:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
100486d0:	4b09      	ldr	r3, [pc, #36]	@ (100486f8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
100486d2:	2262      	movs	r2, #98	@ 0x62
100486d4:	2101      	movs	r1, #1
100486d6:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
100486d8:	19ba      	adds	r2, r7, r6
100486da:	4b08      	ldr	r3, [pc, #32]	@ (100486fc <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
100486dc:	0011      	movs	r1, r2
100486de:	0018      	movs	r0, r3
100486e0:	f000 fe2c 	bl	1004933c <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
100486e4:	2001      	movs	r0, #1
100486e6:	f000 fcd3 	bl	10049090 <_virtualTimeBaseEnable>

  return retVal;
100486ea:	19bb      	adds	r3, r7, r6
100486ec:	781b      	ldrb	r3, [r3, #0]
}
100486ee:	0018      	movs	r0, r3
100486f0:	46bd      	mov	sp, r7
100486f2:	b005      	add	sp, #20
100486f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100486f6:	46c0      	nop			@ (mov r8, r8)
100486f8:	20000cc0 	.word	0x20000cc0
100486fc:	20000d18 	.word	0x20000d18

10048700 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
10048700:	b5b0      	push	{r4, r5, r7, lr}
10048702:	b088      	sub	sp, #32
10048704:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10048706:	23c0      	movs	r3, #192	@ 0xc0
10048708:	05db      	lsls	r3, r3, #23
1004870a:	0018      	movs	r0, r3
1004870c:	f7ff fc0a 	bl	10047f24 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10048710:	23c0      	movs	r3, #192	@ 0xc0
10048712:	05db      	lsls	r3, r3, #23
10048714:	0018      	movs	r0, r3
10048716:	f7ff fc14 	bl	10047f42 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004871a:	4b31      	ldr	r3, [pc, #196]	@ (100487e0 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004871c:	0018      	movs	r0, r3
1004871e:	f7ff fc3b 	bl	10047f98 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10048722:	4b30      	ldr	r3, [pc, #192]	@ (100487e4 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10048724:	2261      	movs	r2, #97	@ 0x61
10048726:	2100      	movs	r1, #0
10048728:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004872a:	4b2e      	ldr	r3, [pc, #184]	@ (100487e4 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004872c:	2262      	movs	r2, #98	@ 0x62
1004872e:	2100      	movs	r1, #0
10048730:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10048732:	4b2c      	ldr	r3, [pc, #176]	@ (100487e4 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10048734:	2263      	movs	r2, #99	@ 0x63
10048736:	2100      	movs	r1, #0
10048738:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004873a:	f3ef 8310 	mrs	r3, PRIMASK
1004873e:	60bb      	str	r3, [r7, #8]
  return(result);
10048740:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
10048742:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10048744:	b672      	cpsid	i
}
10048746:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10048748:	4b26      	ldr	r3, [pc, #152]	@ (100487e4 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004874a:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004874c:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004874e:	f000 f89d 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
10048752:	0002      	movs	r2, r0
10048754:	000b      	movs	r3, r1
10048756:	1aa4      	subs	r4, r4, r2
10048758:	419d      	sbcs	r5, r3
1004875a:	0022      	movs	r2, r4
1004875c:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004875e:	4921      	ldr	r1, [pc, #132]	@ (100487e4 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10048760:	2084      	movs	r0, #132	@ 0x84
10048762:	5c09      	ldrb	r1, [r1, r0]
10048764:	6039      	str	r1, [r7, #0]
10048766:	2100      	movs	r1, #0
10048768:	6079      	str	r1, [r7, #4]
1004876a:	6838      	ldr	r0, [r7, #0]
1004876c:	6879      	ldr	r1, [r7, #4]
1004876e:	1a12      	subs	r2, r2, r0
10048770:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10048772:	613a      	str	r2, [r7, #16]
10048774:	617b      	str	r3, [r7, #20]
10048776:	69bb      	ldr	r3, [r7, #24]
10048778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004877a:	68fb      	ldr	r3, [r7, #12]
1004877c:	f383 8810 	msr	PRIMASK, r3
}
10048780:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
10048782:	697b      	ldr	r3, [r7, #20]
10048784:	2b00      	cmp	r3, #0
10048786:	dc0c      	bgt.n	100487a2 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
10048788:	697b      	ldr	r3, [r7, #20]
1004878a:	2b00      	cmp	r3, #0
1004878c:	d102      	bne.n	10048794 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004878e:	693b      	ldr	r3, [r7, #16]
10048790:	2b00      	cmp	r3, #0
10048792:	d106      	bne.n	100487a2 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
10048794:	2317      	movs	r3, #23
10048796:	2208      	movs	r2, #8
10048798:	189b      	adds	r3, r3, r2
1004879a:	19db      	adds	r3, r3, r7
1004879c:	2201      	movs	r2, #1
1004879e:	701a      	strb	r2, [r3, #0]
100487a0:	e015      	b.n	100487ce <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
100487a2:	697b      	ldr	r3, [r7, #20]
100487a4:	2b00      	cmp	r3, #0
100487a6:	dc0c      	bgt.n	100487c2 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
100487a8:	697b      	ldr	r3, [r7, #20]
100487aa:	2b00      	cmp	r3, #0
100487ac:	d102      	bne.n	100487b4 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
100487ae:	693b      	ldr	r3, [r7, #16]
100487b0:	2b0e      	cmp	r3, #14
100487b2:	d806      	bhi.n	100487c2 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
100487b4:	2317      	movs	r3, #23
100487b6:	2208      	movs	r2, #8
100487b8:	189b      	adds	r3, r3, r2
100487ba:	19db      	adds	r3, r3, r7
100487bc:	2202      	movs	r2, #2
100487be:	701a      	strb	r2, [r3, #0]
100487c0:	e005      	b.n	100487ce <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
100487c2:	2317      	movs	r3, #23
100487c4:	2208      	movs	r2, #8
100487c6:	189b      	adds	r3, r3, r2
100487c8:	19db      	adds	r3, r3, r7
100487ca:	2200      	movs	r2, #0
100487cc:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
100487ce:	2317      	movs	r3, #23
100487d0:	2208      	movs	r2, #8
100487d2:	189b      	adds	r3, r3, r2
100487d4:	19db      	adds	r3, r3, r7
100487d6:	781b      	ldrb	r3, [r3, #0]
}
100487d8:	0018      	movs	r0, r3
100487da:	46bd      	mov	sp, r7
100487dc:	b008      	add	sp, #32
100487de:	bdb0      	pop	{r4, r5, r7, pc}
100487e0:	60001800 	.word	0x60001800
100487e4:	20000cc0 	.word	0x20000cc0

100487e8 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
100487e8:	b580      	push	{r7, lr}
100487ea:	b084      	sub	sp, #16
100487ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100487ee:	f3ef 8310 	mrs	r3, PRIMASK
100487f2:	603b      	str	r3, [r7, #0]
  return(result);
100487f4:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
100487f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
100487f8:	b672      	cpsid	i
}
100487fa:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100487fc:	4b0e      	ldr	r3, [pc, #56]	@ (10048838 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
100487fe:	0018      	movs	r0, r3
10048800:	f7ff fc21 	bl	10048046 <LL_RADIO_TIMER_GetAbsoluteTime>
10048804:	0003      	movs	r3, r0
10048806:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
10048808:	68bb      	ldr	r3, [r7, #8]
1004880a:	1c9a      	adds	r2, r3, #2
1004880c:	23c0      	movs	r3, #192	@ 0xc0
1004880e:	05db      	lsls	r3, r3, #23
10048810:	0011      	movs	r1, r2
10048812:	0018      	movs	r0, r3
10048814:	f7ff fba4 	bl	10047f60 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
10048818:	23c0      	movs	r3, #192	@ 0xc0
1004881a:	05db      	lsls	r3, r3, #23
1004881c:	0018      	movs	r0, r3
1004881e:	f7ff fb71 	bl	10047f04 <LL_RADIO_TIMER_EnableTimer1>
10048822:	68fb      	ldr	r3, [r7, #12]
10048824:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048826:	687b      	ldr	r3, [r7, #4]
10048828:	f383 8810 	msr	PRIMASK, r3
}
1004882c:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004882e:	46c0      	nop			@ (mov r8, r8)
10048830:	46bd      	mov	sp, r7
10048832:	b004      	add	sp, #16
10048834:	bd80      	pop	{r7, pc}
10048836:	46c0      	nop			@ (mov r8, r8)
10048838:	60001800 	.word	0x60001800

1004883c <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004883c:	b580      	push	{r7, lr}
1004883e:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10048840:	46c0      	nop			@ (mov r8, r8)
10048842:	46bd      	mov	sp, r7
10048844:	bd80      	pop	{r7, pc}
	...

10048848 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10048848:	b580      	push	{r7, lr}
1004884a:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004884c:	4b03      	ldr	r3, [pc, #12]	@ (1004885c <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004884e:	2263      	movs	r2, #99	@ 0x63
10048850:	2100      	movs	r1, #0
10048852:	5499      	strb	r1, [r3, r2]
}
10048854:	46c0      	nop			@ (mov r8, r8)
10048856:	46bd      	mov	sp, r7
10048858:	bd80      	pop	{r7, pc}
1004885a:	46c0      	nop			@ (mov r8, r8)
1004885c:	20000cc0 	.word	0x20000cc0

10048860 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10048860:	b580      	push	{r7, lr}
10048862:	b082      	sub	sp, #8
10048864:	af00      	add	r7, sp, #0
10048866:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10048868:	4b06      	ldr	r3, [pc, #24]	@ (10048884 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004886a:	69db      	ldr	r3, [r3, #28]
1004886c:	0019      	movs	r1, r3
1004886e:	4a06      	ldr	r2, [pc, #24]	@ (10048888 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10048870:	687b      	ldr	r3, [r7, #4]
10048872:	0018      	movs	r0, r3
10048874:	f7f7 fc24 	bl	100400c0 <blue_unit_conversion>
10048878:	0003      	movs	r3, r0
}
1004887a:	0018      	movs	r0, r3
1004887c:	46bd      	mov	sp, r7
1004887e:	b002      	add	sp, #8
10048880:	bd80      	pop	{r7, pc}
10048882:	46c0      	nop			@ (mov r8, r8)
10048884:	20000cc0 	.word	0x20000cc0
10048888:	00000635 	.word	0x00000635

1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004888c:	b580      	push	{r7, lr}
1004888e:	b082      	sub	sp, #8
10048890:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10048892:	1d3a      	adds	r2, r7, #4
10048894:	4b05      	ldr	r3, [pc, #20]	@ (100488ac <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10048896:	0011      	movs	r1, r2
10048898:	0018      	movs	r0, r3
1004889a:	f000 fad9 	bl	10048e50 <_get_system_time_and_machine>
1004889e:	0002      	movs	r2, r0
100488a0:	000b      	movs	r3, r1
}
100488a2:	0010      	movs	r0, r2
100488a4:	0019      	movs	r1, r3
100488a6:	46bd      	mov	sp, r7
100488a8:	b002      	add	sp, #8
100488aa:	bd80      	pop	{r7, pc}
100488ac:	20000cc0 	.word	0x20000cc0

100488b0 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
100488b0:	b590      	push	{r4, r7, lr}
100488b2:	b087      	sub	sp, #28
100488b4:	af00      	add	r7, sp, #0
100488b6:	60f8      	str	r0, [r7, #12]
100488b8:	603a      	str	r2, [r7, #0]
100488ba:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
100488bc:	683a      	ldr	r2, [r7, #0]
100488be:	687b      	ldr	r3, [r7, #4]
100488c0:	68f9      	ldr	r1, [r7, #12]
100488c2:	0008      	movs	r0, r1
100488c4:	f000 fa66 	bl	10048d94 <_start_timer>
100488c8:	0002      	movs	r2, r0
100488ca:	2417      	movs	r4, #23
100488cc:	193b      	adds	r3, r7, r4
100488ce:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
100488d0:	2001      	movs	r0, #1
100488d2:	f000 fbdd 	bl	10049090 <_virtualTimeBaseEnable>

  return retVal;
100488d6:	193b      	adds	r3, r7, r4
100488d8:	781b      	ldrb	r3, [r3, #0]
}
100488da:	0018      	movs	r0, r3
100488dc:	46bd      	mov	sp, r7
100488de:	b007      	add	sp, #28
100488e0:	bd90      	pop	{r4, r7, pc}
	...

100488e4 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
100488e4:	b590      	push	{r4, r7, lr}
100488e6:	b089      	sub	sp, #36	@ 0x24
100488e8:	af00      	add	r7, sp, #0
100488ea:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
100488ec:	4b28      	ldr	r3, [pc, #160]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100488ee:	228c      	movs	r2, #140	@ 0x8c
100488f0:	589b      	ldr	r3, [r3, r2]
100488f2:	687a      	ldr	r2, [r7, #4]
100488f4:	0011      	movs	r1, r2
100488f6:	0018      	movs	r0, r3
100488f8:	f000 fbf6 	bl	100490e8 <_remove_timer_in_queue>
100488fc:	0003      	movs	r3, r0
100488fe:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10048900:	210f      	movs	r1, #15
10048902:	187b      	adds	r3, r7, r1
10048904:	2200      	movs	r2, #0
10048906:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10048908:	687b      	ldr	r3, [r7, #4]
1004890a:	2200      	movs	r2, #0
1004890c:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004890e:	4b20      	ldr	r3, [pc, #128]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048910:	228c      	movs	r2, #140	@ 0x8c
10048912:	589b      	ldr	r3, [r3, r2]
10048914:	69fa      	ldr	r2, [r7, #28]
10048916:	429a      	cmp	r2, r3
10048918:	d031      	beq.n	1004897e <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004891a:	000c      	movs	r4, r1
1004891c:	187a      	adds	r2, r7, r1
1004891e:	69fb      	ldr	r3, [r7, #28]
10048920:	0011      	movs	r1, r2
10048922:	0018      	movs	r0, r3
10048924:	f000 fafc 	bl	10048f20 <_update_user_timeout>
10048928:	0002      	movs	r2, r0
1004892a:	4b19      	ldr	r3, [pc, #100]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004892c:	218c      	movs	r1, #140	@ 0x8c
1004892e:	505a      	str	r2, [r3, r1]
    if (expired)
10048930:	193b      	adds	r3, r7, r4
10048932:	781b      	ldrb	r3, [r3, #0]
10048934:	2b00      	cmp	r3, #0
10048936:	d026      	beq.n	10048986 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048938:	f3ef 8310 	mrs	r3, PRIMASK
1004893c:	617b      	str	r3, [r7, #20]
  return(result);
1004893e:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10048940:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10048942:	b672      	cpsid	i
}
10048944:	46c0      	nop			@ (mov r8, r8)
10048946:	4b12      	ldr	r3, [pc, #72]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048948:	2291      	movs	r2, #145	@ 0x91
1004894a:	5c9b      	ldrb	r3, [r3, r2]
1004894c:	3301      	adds	r3, #1
1004894e:	4a10      	ldr	r2, [pc, #64]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048950:	2192      	movs	r1, #146	@ 0x92
10048952:	5c52      	ldrb	r2, [r2, r1]
10048954:	4293      	cmp	r3, r2
10048956:	d103      	bne.n	10048960 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10048958:	4b0d      	ldr	r3, [pc, #52]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004895a:	2291      	movs	r2, #145	@ 0x91
1004895c:	5c9b      	ldrb	r3, [r3, r2]
1004895e:	e004      	b.n	1004896a <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10048960:	4b0b      	ldr	r3, [pc, #44]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048962:	2291      	movs	r2, #145	@ 0x91
10048964:	5c9b      	ldrb	r3, [r3, r2]
10048966:	3301      	adds	r3, #1
10048968:	b2db      	uxtb	r3, r3
1004896a:	4a09      	ldr	r2, [pc, #36]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004896c:	2191      	movs	r1, #145	@ 0x91
1004896e:	5453      	strb	r3, [r2, r1]
10048970:	69bb      	ldr	r3, [r7, #24]
10048972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048974:	693b      	ldr	r3, [r7, #16]
10048976:	f383 8810 	msr	PRIMASK, r3
}
1004897a:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004897c:	e003      	b.n	10048986 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004897e:	4b04      	ldr	r3, [pc, #16]	@ (10048990 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048980:	218c      	movs	r1, #140	@ 0x8c
10048982:	69fa      	ldr	r2, [r7, #28]
10048984:	505a      	str	r2, [r3, r1]
}
10048986:	46c0      	nop			@ (mov r8, r8)
10048988:	46bd      	mov	sp, r7
1004898a:	b009      	add	sp, #36	@ 0x24
1004898c:	bd90      	pop	{r4, r7, pc}
1004898e:	46c0      	nop			@ (mov r8, r8)
10048990:	20000cc0 	.word	0x20000cc0

10048994 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10048994:	b580      	push	{r7, lr}
10048996:	b082      	sub	sp, #8
10048998:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004899a:	2300      	movs	r3, #0
1004899c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004899e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
100489a0:	4b13      	ldr	r3, [pc, #76]	@ (100489f0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
100489a2:	0018      	movs	r0, r3
100489a4:	f7ff fb18 	bl	10047fd8 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
100489a8:	4b12      	ldr	r3, [pc, #72]	@ (100489f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
100489aa:	2291      	movs	r2, #145	@ 0x91
100489ac:	5c9b      	ldrb	r3, [r3, r2]
100489ae:	3301      	adds	r3, #1
100489b0:	4a10      	ldr	r2, [pc, #64]	@ (100489f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
100489b2:	2192      	movs	r1, #146	@ 0x92
100489b4:	5c52      	ldrb	r2, [r2, r1]
100489b6:	4293      	cmp	r3, r2
100489b8:	d103      	bne.n	100489c2 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
100489ba:	4b0e      	ldr	r3, [pc, #56]	@ (100489f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
100489bc:	2291      	movs	r2, #145	@ 0x91
100489be:	5c9b      	ldrb	r3, [r3, r2]
100489c0:	e004      	b.n	100489cc <HAL_RADIO_TIMER_TimeoutCallback+0x38>
100489c2:	4b0c      	ldr	r3, [pc, #48]	@ (100489f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
100489c4:	2291      	movs	r2, #145	@ 0x91
100489c6:	5c9b      	ldrb	r3, [r3, r2]
100489c8:	3301      	adds	r3, #1
100489ca:	b2db      	uxtb	r3, r3
100489cc:	4a09      	ldr	r2, [pc, #36]	@ (100489f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
100489ce:	2191      	movs	r1, #145	@ 0x91
100489d0:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
100489d2:	4b07      	ldr	r3, [pc, #28]	@ (100489f0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
100489d4:	0018      	movs	r0, r3
100489d6:	f7ff fb77 	bl	100480c8 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
100489da:	4b05      	ldr	r3, [pc, #20]	@ (100489f0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
100489dc:	0018      	movs	r0, r3
100489de:	f7ff fb81 	bl	100480e4 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
100489e2:	0003      	movs	r3, r0
100489e4:	607b      	str	r3, [r7, #4]
}
100489e6:	46c0      	nop			@ (mov r8, r8)
100489e8:	46bd      	mov	sp, r7
100489ea:	b002      	add	sp, #8
100489ec:	bd80      	pop	{r7, pc}
100489ee:	46c0      	nop			@ (mov r8, r8)
100489f0:	60001800 	.word	0x60001800
100489f4:	20000cc0 	.word	0x20000cc0

100489f8 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
100489f8:	b580      	push	{r7, lr}
100489fa:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
100489fc:	46c0      	nop			@ (mov r8, r8)
100489fe:	4b0b      	ldr	r3, [pc, #44]	@ (10048a2c <_calibrationProcedure+0x34>)
10048a00:	0018      	movs	r0, r3
10048a02:	f7ff fbb9 	bl	10048178 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10048a06:	1e03      	subs	r3, r0, #0
10048a08:	d0f9      	beq.n	100489fe <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
10048a0a:	4b08      	ldr	r3, [pc, #32]	@ (10048a2c <_calibrationProcedure+0x34>)
10048a0c:	2117      	movs	r1, #23
10048a0e:	0018      	movs	r0, r3
10048a10:	f7ff fb79 	bl	10048106 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10048a14:	4b06      	ldr	r3, [pc, #24]	@ (10048a30 <_calibrationProcedure+0x38>)
10048a16:	0018      	movs	r0, r3
10048a18:	f000 f81e 	bl	10048a58 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10048a1c:	4b05      	ldr	r3, [pc, #20]	@ (10048a34 <_calibrationProcedure+0x3c>)
10048a1e:	69da      	ldr	r2, [r3, #28]
10048a20:	4b04      	ldr	r3, [pc, #16]	@ (10048a34 <_calibrationProcedure+0x3c>)
10048a22:	621a      	str	r2, [r3, #32]

}
10048a24:	46c0      	nop			@ (mov r8, r8)
10048a26:	46bd      	mov	sp, r7
10048a28:	bd80      	pop	{r7, pc}
10048a2a:	46c0      	nop			@ (mov r8, r8)
10048a2c:	60001000 	.word	0x60001000
10048a30:	20000cd0 	.word	0x20000cd0
10048a34:	20000cc0 	.word	0x20000cc0

10048a38 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
10048a38:	b580      	push	{r7, lr}
10048a3a:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10048a3c:	4b05      	ldr	r3, [pc, #20]	@ (10048a54 <_timer_start_calibration+0x1c>)
10048a3e:	0018      	movs	r0, r3
10048a40:	f7ff fb8c 	bl	1004815c <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10048a44:	4b03      	ldr	r3, [pc, #12]	@ (10048a54 <_timer_start_calibration+0x1c>)
10048a46:	0018      	movs	r0, r3
10048a48:	f7ff fb69 	bl	1004811e <LL_RADIO_TIMER_StartLSICalibration>
}
10048a4c:	46c0      	nop			@ (mov r8, r8)
10048a4e:	46bd      	mov	sp, r7
10048a50:	bd80      	pop	{r7, pc}
10048a52:	46c0      	nop			@ (mov r8, r8)
10048a54:	60001000 	.word	0x60001000

10048a58 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
10048a58:	b580      	push	{r7, lr}
10048a5a:	b082      	sub	sp, #8
10048a5c:	af00      	add	r7, sp, #0
10048a5e:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
10048a60:	f7ff ffea 	bl	10048a38 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10048a64:	46c0      	nop			@ (mov r8, r8)
10048a66:	4b07      	ldr	r3, [pc, #28]	@ (10048a84 <_timer_calibrate+0x2c>)
10048a68:	0018      	movs	r0, r3
10048a6a:	f7ff fb85 	bl	10048178 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10048a6e:	1e03      	subs	r3, r0, #0
10048a70:	d0f9      	beq.n	10048a66 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
10048a72:	687b      	ldr	r3, [r7, #4]
10048a74:	0018      	movs	r0, r3
10048a76:	f000 f807 	bl	10048a88 <_get_calibration_data>
}
10048a7a:	46c0      	nop			@ (mov r8, r8)
10048a7c:	46bd      	mov	sp, r7
10048a7e:	b002      	add	sp, #8
10048a80:	bd80      	pop	{r7, pc}
10048a82:	46c0      	nop			@ (mov r8, r8)
10048a84:	60001000 	.word	0x60001000

10048a88 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
10048a88:	b580      	push	{r7, lr}
10048a8a:	b08a      	sub	sp, #40	@ 0x28
10048a8c:	af00      	add	r7, sp, #0
10048a8e:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10048a90:	4b2e      	ldr	r3, [pc, #184]	@ (10048b4c <_get_calibration_data+0xc4>)
10048a92:	0018      	movs	r0, r3
10048a94:	f7ff fb4e 	bl	10048134 <LL_RADIO_TIMER_GetLSIPeriod>
10048a98:	0003      	movs	r3, r0
10048a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10048a9c:	e005      	b.n	10048aaa <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10048a9e:	4b2b      	ldr	r3, [pc, #172]	@ (10048b4c <_get_calibration_data+0xc4>)
10048aa0:	0018      	movs	r0, r3
10048aa2:	f7ff fb47 	bl	10048134 <LL_RADIO_TIMER_GetLSIPeriod>
10048aa6:	0003      	movs	r3, r0
10048aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10048aaa:	4b28      	ldr	r3, [pc, #160]	@ (10048b4c <_get_calibration_data+0xc4>)
10048aac:	0018      	movs	r0, r3
10048aae:	f7ff fb41 	bl	10048134 <LL_RADIO_TIMER_GetLSIPeriod>
10048ab2:	0002      	movs	r2, r0
10048ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ab6:	429a      	cmp	r2, r3
10048ab8:	d1f1      	bne.n	10048a9e <_get_calibration_data+0x16>
10048aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048abc:	2b00      	cmp	r3, #0
10048abe:	d0ee      	beq.n	10048a9e <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10048ac0:	4b23      	ldr	r3, [pc, #140]	@ (10048b50 <_get_calibration_data+0xc8>)
10048ac2:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
10048ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ac6:	121b      	asrs	r3, r3, #8
10048ac8:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10048aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048acc:	22ff      	movs	r2, #255	@ 0xff
10048ace:	4013      	ands	r3, r2
10048ad0:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
10048ad2:	69fb      	ldr	r3, [r7, #28]
10048ad4:	69ba      	ldr	r2, [r7, #24]
10048ad6:	435a      	muls	r2, r3
10048ad8:	697b      	ldr	r3, [r7, #20]
10048ada:	69f9      	ldr	r1, [r7, #28]
10048adc:	434b      	muls	r3, r1
10048ade:	121b      	asrs	r3, r3, #8
10048ae0:	18d3      	adds	r3, r2, r3
10048ae2:	3310      	adds	r3, #16
10048ae4:	115a      	asrs	r2, r3, #5
10048ae6:	687b      	ldr	r3, [r7, #4]
10048ae8:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
10048aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10048aec:	687b      	ldr	r3, [r7, #4]
10048aee:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10048af0:	4b18      	ldr	r3, [pc, #96]	@ (10048b54 <_get_calibration_data+0xcc>)
10048af2:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10048af4:	4b15      	ldr	r3, [pc, #84]	@ (10048b4c <_get_calibration_data+0xc4>)
10048af6:	0018      	movs	r0, r3
10048af8:	f7ff fb26 	bl	10048148 <LL_RADIO_TIMER_GetLSIFrequency>
10048afc:	0003      	movs	r3, r0
10048afe:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10048b00:	e005      	b.n	10048b0e <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10048b02:	4b12      	ldr	r3, [pc, #72]	@ (10048b4c <_get_calibration_data+0xc4>)
10048b04:	0018      	movs	r0, r3
10048b06:	f7ff fb1f 	bl	10048148 <LL_RADIO_TIMER_GetLSIFrequency>
10048b0a:	0003      	movs	r3, r0
10048b0c:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10048b0e:	4b0f      	ldr	r3, [pc, #60]	@ (10048b4c <_get_calibration_data+0xc4>)
10048b10:	0018      	movs	r0, r3
10048b12:	f7ff fb19 	bl	10048148 <LL_RADIO_TIMER_GetLSIFrequency>
10048b16:	0002      	movs	r2, r0
10048b18:	6a3b      	ldr	r3, [r7, #32]
10048b1a:	429a      	cmp	r2, r3
10048b1c:	d1f1      	bne.n	10048b02 <_get_calibration_data+0x7a>
10048b1e:	6a3b      	ldr	r3, [r7, #32]
10048b20:	2b00      	cmp	r3, #0
10048b22:	d0ee      	beq.n	10048b02 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
10048b24:	6a3b      	ldr	r3, [r7, #32]
10048b26:	119b      	asrs	r3, r3, #6
10048b28:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
10048b2a:	68fb      	ldr	r3, [r7, #12]
10048b2c:	693a      	ldr	r2, [r7, #16]
10048b2e:	4353      	muls	r3, r2
10048b30:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
10048b32:	68bb      	ldr	r3, [r7, #8]
10048b34:	3380      	adds	r3, #128	@ 0x80
10048b36:	121a      	asrs	r2, r3, #8
10048b38:	687b      	ldr	r3, [r7, #4]
10048b3a:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
10048b3c:	6a3a      	ldr	r2, [r7, #32]
10048b3e:	687b      	ldr	r3, [r7, #4]
10048b40:	605a      	str	r2, [r3, #4]
}
10048b42:	46c0      	nop			@ (mov r8, r8)
10048b44:	46bd      	mov	sp, r7
10048b46:	b00a      	add	sp, #40	@ 0x28
10048b48:	bd80      	pop	{r7, pc}
10048b4a:	46c0      	nop			@ (mov r8, r8)
10048b4c:	60001000 	.word	0x60001000
10048b50:	0008bcf6 	.word	0x0008bcf6
10048b54:	00000753 	.word	0x00000753

10048b58 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
10048b58:	b590      	push	{r4, r7, lr}
10048b5a:	b085      	sub	sp, #20
10048b5c:	af00      	add	r7, sp, #0
10048b5e:	6078      	str	r0, [r7, #4]
10048b60:	000a      	movs	r2, r1
10048b62:	1cfb      	adds	r3, r7, #3
10048b64:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
10048b66:	4b38      	ldr	r3, [pc, #224]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048b68:	7b9b      	ldrb	r3, [r3, #14]
10048b6a:	b2db      	uxtb	r3, r3
10048b6c:	2b00      	cmp	r3, #0
10048b6e:	da00      	bge.n	10048b72 <_configureTxRxDelay+0x1a>
10048b70:	3307      	adds	r3, #7
10048b72:	10db      	asrs	r3, r3, #3
10048b74:	b2da      	uxtb	r2, r3
10048b76:	240f      	movs	r4, #15
10048b78:	193b      	adds	r3, r7, r4
10048b7a:	3201      	adds	r2, #1
10048b7c:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
10048b7e:	687b      	ldr	r3, [r7, #4]
10048b80:	699b      	ldr	r3, [r3, #24]
10048b82:	0019      	movs	r1, r3
10048b84:	4b31      	ldr	r3, [pc, #196]	@ (10048c4c <_configureTxRxDelay+0xf4>)
10048b86:	001a      	movs	r2, r3
10048b88:	201b      	movs	r0, #27
10048b8a:	f7f7 fa99 	bl	100400c0 <blue_unit_conversion>
10048b8e:	0002      	movs	r2, r0
10048b90:	4b2d      	ldr	r3, [pc, #180]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048b92:	b2d2      	uxtb	r2, r2
10048b94:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
10048b96:	4b2c      	ldr	r3, [pc, #176]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048b98:	799b      	ldrb	r3, [r3, #6]
10048b9a:	b2db      	uxtb	r3, r3
10048b9c:	0018      	movs	r0, r3
10048b9e:	f000 f86d 	bl	10048c7c <_us_to_machinetime>
10048ba2:	0003      	movs	r3, r0
10048ba4:	b2d9      	uxtb	r1, r3
10048ba6:	687b      	ldr	r3, [r7, #4]
10048ba8:	223d      	movs	r2, #61	@ 0x3d
10048baa:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
10048bac:	4b26      	ldr	r3, [pc, #152]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048bae:	7a1b      	ldrb	r3, [r3, #8]
10048bb0:	b2db      	uxtb	r3, r3
10048bb2:	001a      	movs	r2, r3
10048bb4:	193b      	adds	r3, r7, r4
10048bb6:	781b      	ldrb	r3, [r3, #0]
10048bb8:	18d3      	adds	r3, r2, r3
10048bba:	0018      	movs	r0, r3
10048bbc:	f000 f85e 	bl	10048c7c <_us_to_machinetime>
10048bc0:	0003      	movs	r3, r0
10048bc2:	b2d9      	uxtb	r1, r3
10048bc4:	687b      	ldr	r3, [r7, #4]
10048bc6:	2238      	movs	r2, #56	@ 0x38
10048bc8:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
10048bca:	4b1f      	ldr	r3, [pc, #124]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048bcc:	7a5b      	ldrb	r3, [r3, #9]
10048bce:	b2db      	uxtb	r3, r3
10048bd0:	001a      	movs	r2, r3
10048bd2:	193b      	adds	r3, r7, r4
10048bd4:	781b      	ldrb	r3, [r3, #0]
10048bd6:	18d3      	adds	r3, r2, r3
10048bd8:	0018      	movs	r0, r3
10048bda:	f000 f84f 	bl	10048c7c <_us_to_machinetime>
10048bde:	0003      	movs	r3, r0
10048be0:	b2d9      	uxtb	r1, r3
10048be2:	687b      	ldr	r3, [r7, #4]
10048be4:	2239      	movs	r2, #57	@ 0x39
10048be6:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10048be8:	4b17      	ldr	r3, [pc, #92]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048bea:	7a9b      	ldrb	r3, [r3, #10]
10048bec:	b2db      	uxtb	r3, r3
10048bee:	0018      	movs	r0, r3
10048bf0:	f000 f844 	bl	10048c7c <_us_to_machinetime>
10048bf4:	0003      	movs	r3, r0
10048bf6:	b2d9      	uxtb	r1, r3
10048bf8:	687b      	ldr	r3, [r7, #4]
10048bfa:	223a      	movs	r2, #58	@ 0x3a
10048bfc:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
10048bfe:	4b12      	ldr	r3, [pc, #72]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048c00:	7adb      	ldrb	r3, [r3, #11]
10048c02:	b2db      	uxtb	r3, r3
10048c04:	0018      	movs	r0, r3
10048c06:	f000 f839 	bl	10048c7c <_us_to_machinetime>
10048c0a:	0003      	movs	r3, r0
10048c0c:	b2d9      	uxtb	r1, r3
10048c0e:	687b      	ldr	r3, [r7, #4]
10048c10:	223b      	movs	r2, #59	@ 0x3b
10048c12:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
10048c14:	1cfb      	adds	r3, r7, #3
10048c16:	781b      	ldrb	r3, [r3, #0]
10048c18:	2b00      	cmp	r3, #0
10048c1a:	d010      	beq.n	10048c3e <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
10048c1c:	4b0a      	ldr	r3, [pc, #40]	@ (10048c48 <_configureTxRxDelay+0xf0>)
10048c1e:	7a1b      	ldrb	r3, [r3, #8]
10048c20:	b2db      	uxtb	r3, r3
10048c22:	001a      	movs	r2, r3
10048c24:	193b      	adds	r3, r7, r4
10048c26:	781b      	ldrb	r3, [r3, #0]
10048c28:	18d3      	adds	r3, r2, r3
10048c2a:	0018      	movs	r0, r3
10048c2c:	f000 f810 	bl	10048c50 <_us_to_systime>
10048c30:	0003      	movs	r3, r0
10048c32:	b2db      	uxtb	r3, r3
10048c34:	331b      	adds	r3, #27
10048c36:	b2d9      	uxtb	r1, r3
10048c38:	687b      	ldr	r3, [r7, #4]
10048c3a:	223c      	movs	r2, #60	@ 0x3c
10048c3c:	5499      	strb	r1, [r3, r2]
  }

}
10048c3e:	46c0      	nop			@ (mov r8, r8)
10048c40:	46bd      	mov	sp, r7
10048c42:	b005      	add	sp, #20
10048c44:	bd90      	pop	{r4, r7, pc}
10048c46:	46c0      	nop			@ (mov r8, r8)
10048c48:	200000c0 	.word	0x200000c0
10048c4c:	00000326 	.word	0x00000326

10048c50 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
10048c50:	b580      	push	{r7, lr}
10048c52:	b084      	sub	sp, #16
10048c54:	af00      	add	r7, sp, #0
10048c56:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
10048c58:	687b      	ldr	r3, [r7, #4]
10048c5a:	2268      	movs	r2, #104	@ 0x68
10048c5c:	4353      	muls	r3, r2
10048c5e:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10048c60:	687b      	ldr	r3, [r7, #4]
10048c62:	22db      	movs	r2, #219	@ 0xdb
10048c64:	4353      	muls	r3, r2
10048c66:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
10048c68:	68fb      	ldr	r3, [r7, #12]
10048c6a:	0a1a      	lsrs	r2, r3, #8
10048c6c:	68bb      	ldr	r3, [r7, #8]
10048c6e:	0c1b      	lsrs	r3, r3, #16
10048c70:	18d3      	adds	r3, r2, r3
}
10048c72:	0018      	movs	r0, r3
10048c74:	46bd      	mov	sp, r7
10048c76:	b004      	add	sp, #16
10048c78:	bd80      	pop	{r7, pc}
	...

10048c7c <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
10048c7c:	b5b0      	push	{r4, r5, r7, lr}
10048c7e:	b088      	sub	sp, #32
10048c80:	af00      	add	r7, sp, #0
10048c82:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
10048c84:	4915      	ldr	r1, [pc, #84]	@ (10048cdc <_us_to_machinetime+0x60>)
10048c86:	6949      	ldr	r1, [r1, #20]
10048c88:	6039      	str	r1, [r7, #0]
10048c8a:	2100      	movs	r1, #0
10048c8c:	6079      	str	r1, [r7, #4]
10048c8e:	68f9      	ldr	r1, [r7, #12]
10048c90:	000a      	movs	r2, r1
10048c92:	2100      	movs	r1, #0
10048c94:	000b      	movs	r3, r1
10048c96:	6838      	ldr	r0, [r7, #0]
10048c98:	6879      	ldr	r1, [r7, #4]
10048c9a:	f7f7 fccb 	bl	10040634 <__aeabi_lmul>
10048c9e:	0002      	movs	r2, r0
10048ca0:	000b      	movs	r3, r1
10048ca2:	0010      	movs	r0, r2
10048ca4:	0019      	movs	r1, r3
10048ca6:	0002      	movs	r2, r0
10048ca8:	000b      	movs	r3, r1
10048caa:	1892      	adds	r2, r2, r2
10048cac:	415b      	adcs	r3, r3
10048cae:	1812      	adds	r2, r2, r0
10048cb0:	414b      	adcs	r3, r1
10048cb2:	61ba      	str	r2, [r7, #24]
10048cb4:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
10048cb6:	69ba      	ldr	r2, [r7, #24]
10048cb8:	69fb      	ldr	r3, [r7, #28]
10048cba:	2080      	movs	r0, #128	@ 0x80
10048cbc:	04c0      	lsls	r0, r0, #19
10048cbe:	2100      	movs	r1, #0
10048cc0:	1812      	adds	r2, r2, r0
10048cc2:	414b      	adcs	r3, r1
10048cc4:	0159      	lsls	r1, r3, #5
10048cc6:	0ed4      	lsrs	r4, r2, #27
10048cc8:	430c      	orrs	r4, r1
10048cca:	0edd      	lsrs	r5, r3, #27
10048ccc:	0023      	movs	r3, r4
10048cce:	617b      	str	r3, [r7, #20]

  return time_mt;
10048cd0:	697b      	ldr	r3, [r7, #20]
}
10048cd2:	0018      	movs	r0, r3
10048cd4:	46bd      	mov	sp, r7
10048cd6:	b008      	add	sp, #32
10048cd8:	bdb0      	pop	{r4, r5, r7, pc}
10048cda:	46c0      	nop			@ (mov r8, r8)
10048cdc:	20000cc0 	.word	0x20000cc0

10048ce0 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10048ce0:	b580      	push	{r7, lr}
10048ce2:	b084      	sub	sp, #16
10048ce4:	af00      	add	r7, sp, #0
10048ce6:	0002      	movs	r2, r0
10048ce8:	6039      	str	r1, [r7, #0]
10048cea:	1dbb      	adds	r3, r7, #6
10048cec:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
10048cee:	1dbb      	adds	r3, r7, #6
10048cf0:	881b      	ldrh	r3, [r3, #0]
10048cf2:	6839      	ldr	r1, [r7, #0]
10048cf4:	4a0e      	ldr	r2, [pc, #56]	@ (10048d30 <_update_xtal_startup_time+0x50>)
10048cf6:	0018      	movs	r0, r3
10048cf8:	f7f7 f9e2 	bl	100400c0 <blue_unit_conversion>
10048cfc:	0003      	movs	r3, r0
10048cfe:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10048d00:	68fa      	ldr	r2, [r7, #12]
10048d02:	2380      	movs	r3, #128	@ 0x80
10048d04:	015b      	lsls	r3, r3, #5
10048d06:	429a      	cmp	r2, r3
10048d08:	db01      	blt.n	10048d0e <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
10048d0a:	4b0a      	ldr	r3, [pc, #40]	@ (10048d34 <_update_xtal_startup_time+0x54>)
10048d0c:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
10048d0e:	68fb      	ldr	r3, [r7, #12]
10048d10:	2b0f      	cmp	r3, #15
10048d12:	dc01      	bgt.n	10048d18 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
10048d14:	2310      	movs	r3, #16
10048d16:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
10048d18:	68fb      	ldr	r3, [r7, #12]
10048d1a:	111b      	asrs	r3, r3, #4
10048d1c:	b2db      	uxtb	r3, r3
10048d1e:	4a06      	ldr	r2, [pc, #24]	@ (10048d38 <_update_xtal_startup_time+0x58>)
10048d20:	0019      	movs	r1, r3
10048d22:	0010      	movs	r0, r2
10048d24:	f7ff f968 	bl	10047ff8 <LL_RADIO_TIMER_SetWakeupOffset>
}
10048d28:	46c0      	nop			@ (mov r8, r8)
10048d2a:	46bd      	mov	sp, r7
10048d2c:	b004      	add	sp, #16
10048d2e:	bd80      	pop	{r7, pc}
10048d30:	00000326 	.word	0x00000326
10048d34:	00000fff 	.word	0x00000fff
10048d38:	60001800 	.word	0x60001800

10048d3c <_calibration_callback>:

static void _calibration_callback(void *handle)
{
10048d3c:	b5b0      	push	{r4, r5, r7, lr}
10048d3e:	b082      	sub	sp, #8
10048d40:	af00      	add	r7, sp, #0
10048d42:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
10048d44:	4b11      	ldr	r3, [pc, #68]	@ (10048d8c <_calibration_callback+0x50>)
10048d46:	7b1b      	ldrb	r3, [r3, #12]
10048d48:	2201      	movs	r2, #1
10048d4a:	4053      	eors	r3, r2
10048d4c:	b2db      	uxtb	r3, r3
10048d4e:	2b00      	cmp	r3, #0
10048d50:	d008      	beq.n	10048d64 <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10048d52:	4b0e      	ldr	r3, [pc, #56]	@ (10048d8c <_calibration_callback+0x50>)
10048d54:	781b      	ldrb	r3, [r3, #0]
10048d56:	2b00      	cmp	r3, #0
10048d58:	d001      	beq.n	10048d5e <_calibration_callback+0x22>
    {
      _timer_start_calibration();
10048d5a:	f7ff fe6d 	bl	10048a38 <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
10048d5e:	4b0b      	ldr	r3, [pc, #44]	@ (10048d8c <_calibration_callback+0x50>)
10048d60:	2201      	movs	r2, #1
10048d62:	731a      	strb	r2, [r3, #12]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration);
10048d64:	f7ff fd92 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
10048d68:	0002      	movs	r2, r0
10048d6a:	000b      	movs	r3, r1
10048d6c:	4907      	ldr	r1, [pc, #28]	@ (10048d8c <_calibration_callback+0x50>)
10048d6e:	6889      	ldr	r1, [r1, #8]
10048d70:	000c      	movs	r4, r1
10048d72:	2100      	movs	r1, #0
10048d74:	000d      	movs	r5, r1
10048d76:	1912      	adds	r2, r2, r4
10048d78:	416b      	adcs	r3, r5
10048d7a:	4905      	ldr	r1, [pc, #20]	@ (10048d90 <_calibration_callback+0x54>)
10048d7c:	0008      	movs	r0, r1
10048d7e:	f000 f809 	bl	10048d94 <_start_timer>
}
10048d82:	46c0      	nop			@ (mov r8, r8)
10048d84:	46bd      	mov	sp, r7
10048d86:	b002      	add	sp, #8
10048d88:	bdb0      	pop	{r4, r5, r7, pc}
10048d8a:	46c0      	nop			@ (mov r8, r8)
10048d8c:	20000cc0 	.word	0x20000cc0
10048d90:	20000d00 	.word	0x20000d00

10048d94 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
10048d94:	b590      	push	{r4, r7, lr}
10048d96:	b089      	sub	sp, #36	@ 0x24
10048d98:	af00      	add	r7, sp, #0
10048d9a:	60f8      	str	r0, [r7, #12]
10048d9c:	603a      	str	r2, [r7, #0]
10048d9e:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
10048da0:	2313      	movs	r3, #19
10048da2:	18fb      	adds	r3, r7, r3
10048da4:	2200      	movs	r2, #0
10048da6:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
10048da8:	68fb      	ldr	r3, [r7, #12]
10048daa:	7b1b      	ldrb	r3, [r3, #12]
10048dac:	2b00      	cmp	r3, #0
10048dae:	d001      	beq.n	10048db4 <_start_timer+0x20>
  {
    return 1;
10048db0:	2301      	movs	r3, #1
10048db2:	e047      	b.n	10048e44 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
10048db4:	68f9      	ldr	r1, [r7, #12]
10048db6:	683a      	ldr	r2, [r7, #0]
10048db8:	687b      	ldr	r3, [r7, #4]
10048dba:	600a      	str	r2, [r1, #0]
10048dbc:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
10048dbe:	68fb      	ldr	r3, [r7, #12]
10048dc0:	2201      	movs	r2, #1
10048dc2:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
10048dc4:	4b21      	ldr	r3, [pc, #132]	@ (10048e4c <_start_timer+0xb8>)
10048dc6:	228c      	movs	r2, #140	@ 0x8c
10048dc8:	589b      	ldr	r3, [r3, r2]
10048dca:	68fa      	ldr	r2, [r7, #12]
10048dcc:	0011      	movs	r1, r2
10048dce:	0018      	movs	r0, r3
10048dd0:	f000 f92e 	bl	10049030 <_insert_timer_in_queue>
10048dd4:	0002      	movs	r2, r0
10048dd6:	68fb      	ldr	r3, [r7, #12]
10048dd8:	4293      	cmp	r3, r2
10048dda:	d130      	bne.n	10048e3e <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
10048ddc:	2413      	movs	r4, #19
10048dde:	193a      	adds	r2, r7, r4
10048de0:	68fb      	ldr	r3, [r7, #12]
10048de2:	0011      	movs	r1, r2
10048de4:	0018      	movs	r0, r3
10048de6:	f000 f89b 	bl	10048f20 <_update_user_timeout>
10048dea:	0002      	movs	r2, r0
10048dec:	4b17      	ldr	r3, [pc, #92]	@ (10048e4c <_start_timer+0xb8>)
10048dee:	218c      	movs	r1, #140	@ 0x8c
10048df0:	505a      	str	r2, [r3, r1]
    if (expired)
10048df2:	193b      	adds	r3, r7, r4
10048df4:	781b      	ldrb	r3, [r3, #0]
10048df6:	2b00      	cmp	r3, #0
10048df8:	d021      	beq.n	10048e3e <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048dfa:	f3ef 8310 	mrs	r3, PRIMASK
10048dfe:	61bb      	str	r3, [r7, #24]
  return(result);
10048e00:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
10048e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048e04:	b672      	cpsid	i
}
10048e06:	46c0      	nop			@ (mov r8, r8)
10048e08:	4b10      	ldr	r3, [pc, #64]	@ (10048e4c <_start_timer+0xb8>)
10048e0a:	2291      	movs	r2, #145	@ 0x91
10048e0c:	5c9b      	ldrb	r3, [r3, r2]
10048e0e:	3301      	adds	r3, #1
10048e10:	4a0e      	ldr	r2, [pc, #56]	@ (10048e4c <_start_timer+0xb8>)
10048e12:	2192      	movs	r1, #146	@ 0x92
10048e14:	5c52      	ldrb	r2, [r2, r1]
10048e16:	4293      	cmp	r3, r2
10048e18:	d103      	bne.n	10048e22 <_start_timer+0x8e>
10048e1a:	4b0c      	ldr	r3, [pc, #48]	@ (10048e4c <_start_timer+0xb8>)
10048e1c:	2291      	movs	r2, #145	@ 0x91
10048e1e:	5c9b      	ldrb	r3, [r3, r2]
10048e20:	e004      	b.n	10048e2c <_start_timer+0x98>
10048e22:	4b0a      	ldr	r3, [pc, #40]	@ (10048e4c <_start_timer+0xb8>)
10048e24:	2291      	movs	r2, #145	@ 0x91
10048e26:	5c9b      	ldrb	r3, [r3, r2]
10048e28:	3301      	adds	r3, #1
10048e2a:	b2db      	uxtb	r3, r3
10048e2c:	4a07      	ldr	r2, [pc, #28]	@ (10048e4c <_start_timer+0xb8>)
10048e2e:	2191      	movs	r1, #145	@ 0x91
10048e30:	5453      	strb	r3, [r2, r1]
10048e32:	69fb      	ldr	r3, [r7, #28]
10048e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048e36:	697b      	ldr	r3, [r7, #20]
10048e38:	f383 8810 	msr	PRIMASK, r3
}
10048e3c:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
10048e3e:	2313      	movs	r3, #19
10048e40:	18fb      	adds	r3, r7, r3
10048e42:	781b      	ldrb	r3, [r3, #0]
}
10048e44:	0018      	movs	r0, r3
10048e46:	46bd      	mov	sp, r7
10048e48:	b009      	add	sp, #36	@ 0x24
10048e4a:	bd90      	pop	{r4, r7, pc}
10048e4c:	20000cc0 	.word	0x20000cc0

10048e50 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10048e50:	b5b0      	push	{r4, r5, r7, lr}
10048e52:	b08a      	sub	sp, #40	@ 0x28
10048e54:	af00      	add	r7, sp, #0
10048e56:	60f8      	str	r0, [r7, #12]
10048e58:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048e5a:	f3ef 8310 	mrs	r3, PRIMASK
10048e5e:	617b      	str	r3, [r7, #20]
  return(result);
10048e60:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
10048e62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048e64:	b672      	cpsid	i
}
10048e66:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
10048e68:	68fb      	ldr	r3, [r7, #12]
10048e6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10048e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048e6e:	623a      	str	r2, [r7, #32]
10048e70:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10048e72:	4b29      	ldr	r3, [pc, #164]	@ (10048f18 <_get_system_time_and_machine+0xc8>)
10048e74:	0018      	movs	r0, r3
10048e76:	f7ff f8e6 	bl	10048046 <LL_RADIO_TIMER_GetAbsoluteTime>
10048e7a:	0002      	movs	r2, r0
10048e7c:	68bb      	ldr	r3, [r7, #8]
10048e7e:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
10048e80:	68bb      	ldr	r3, [r7, #8]
10048e82:	681a      	ldr	r2, [r3, #0]
10048e84:	68fb      	ldr	r3, [r7, #12]
10048e86:	2180      	movs	r1, #128	@ 0x80
10048e88:	585b      	ldr	r3, [r3, r1]
10048e8a:	1ad3      	subs	r3, r2, r3
10048e8c:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
10048e8e:	68fb      	ldr	r3, [r7, #12]
10048e90:	69db      	ldr	r3, [r3, #28]
10048e92:	0019      	movs	r1, r3
10048e94:	4a21      	ldr	r2, [pc, #132]	@ (10048f1c <_get_system_time_and_machine+0xcc>)
10048e96:	69bb      	ldr	r3, [r7, #24]
10048e98:	0018      	movs	r0, r3
10048e9a:	f7f7 f911 	bl	100400c0 <blue_unit_conversion>
10048e9e:	0003      	movs	r3, r0
10048ea0:	603b      	str	r3, [r7, #0]
10048ea2:	2300      	movs	r3, #0
10048ea4:	607b      	str	r3, [r7, #4]
10048ea6:	6a3a      	ldr	r2, [r7, #32]
10048ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048eaa:	6838      	ldr	r0, [r7, #0]
10048eac:	6879      	ldr	r1, [r7, #4]
10048eae:	1812      	adds	r2, r2, r0
10048eb0:	414b      	adcs	r3, r1
10048eb2:	623a      	str	r2, [r7, #32]
10048eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
10048eb6:	68fb      	ldr	r3, [r7, #12]
10048eb8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
10048eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10048ebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10048ebe:	4299      	cmp	r1, r3
10048ec0:	d305      	bcc.n	10048ece <_get_system_time_and_machine+0x7e>
10048ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10048ec4:	4299      	cmp	r1, r3
10048ec6:	d115      	bne.n	10048ef4 <_get_system_time_and_machine+0xa4>
10048ec8:	6a39      	ldr	r1, [r7, #32]
10048eca:	4291      	cmp	r1, r2
10048ecc:	d212      	bcs.n	10048ef4 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
10048ece:	68fb      	ldr	r3, [r7, #12]
10048ed0:	69db      	ldr	r3, [r3, #28]
10048ed2:	0019      	movs	r1, r3
10048ed4:	4a11      	ldr	r2, [pc, #68]	@ (10048f1c <_get_system_time_and_machine+0xcc>)
10048ed6:	2301      	movs	r3, #1
10048ed8:	425b      	negs	r3, r3
10048eda:	0018      	movs	r0, r3
10048edc:	f7f7 f8f0 	bl	100400c0 <blue_unit_conversion>
10048ee0:	0003      	movs	r3, r0
10048ee2:	001c      	movs	r4, r3
10048ee4:	2300      	movs	r3, #0
10048ee6:	001d      	movs	r5, r3
10048ee8:	6a3a      	ldr	r2, [r7, #32]
10048eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048eec:	1912      	adds	r2, r2, r4
10048eee:	416b      	adcs	r3, r5
10048ef0:	623a      	str	r2, [r7, #32]
10048ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10048ef4:	68f9      	ldr	r1, [r7, #12]
10048ef6:	6a3a      	ldr	r2, [r7, #32]
10048ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048efa:	678a      	str	r2, [r1, #120]	@ 0x78
10048efc:	67cb      	str	r3, [r1, #124]	@ 0x7c
10048efe:	69fb      	ldr	r3, [r7, #28]
10048f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f02:	693b      	ldr	r3, [r7, #16]
10048f04:	f383 8810 	msr	PRIMASK, r3
}
10048f08:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10048f0a:	6a3a      	ldr	r2, [r7, #32]
10048f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10048f0e:	0010      	movs	r0, r2
10048f10:	0019      	movs	r1, r3
10048f12:	46bd      	mov	sp, r7
10048f14:	b00a      	add	sp, #40	@ 0x28
10048f16:	bdb0      	pop	{r4, r5, r7, pc}
10048f18:	60001800 	.word	0x60001800
10048f1c:	00000635 	.word	0x00000635

10048f20 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10048f20:	b5b0      	push	{r4, r5, r7, lr}
10048f22:	b08a      	sub	sp, #40	@ 0x28
10048f24:	af00      	add	r7, sp, #0
10048f26:	6078      	str	r0, [r7, #4]
10048f28:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
10048f2a:	687b      	ldr	r3, [r7, #4]
10048f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
10048f2e:	687b      	ldr	r3, [r7, #4]
10048f30:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
10048f32:	683b      	ldr	r3, [r7, #0]
10048f34:	2200      	movs	r2, #0
10048f36:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10048f38:	e033      	b.n	10048fa2 <_update_user_timeout+0x82>
  {
    if (curr->active)
10048f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f3c:	7b1b      	ldrb	r3, [r3, #12]
10048f3e:	2b00      	cmp	r3, #0
10048f40:	d02c      	beq.n	10048f9c <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048f42:	f3ef 8310 	mrs	r3, PRIMASK
10048f46:	60fb      	str	r3, [r7, #12]
  return(result);
10048f48:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
10048f4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048f4c:	b672      	cpsid	i
}
10048f4e:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10048f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f52:	681c      	ldr	r4, [r3, #0]
10048f54:	685d      	ldr	r5, [r3, #4]
10048f56:	f7ff fc99 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
10048f5a:	0002      	movs	r2, r0
10048f5c:	000b      	movs	r3, r1
10048f5e:	1aa4      	subs	r4, r4, r2
10048f60:	419d      	sbcs	r5, r3
10048f62:	0022      	movs	r2, r4
10048f64:	002b      	movs	r3, r5
10048f66:	613a      	str	r2, [r7, #16]
10048f68:	617b      	str	r3, [r7, #20]
      if (delay > 0)
10048f6a:	697b      	ldr	r3, [r7, #20]
10048f6c:	2b00      	cmp	r3, #0
10048f6e:	dc05      	bgt.n	10048f7c <_update_user_timeout+0x5c>
10048f70:	697b      	ldr	r3, [r7, #20]
10048f72:	2b00      	cmp	r3, #0
10048f74:	d108      	bne.n	10048f88 <_update_user_timeout+0x68>
10048f76:	693b      	ldr	r3, [r7, #16]
10048f78:	2b00      	cmp	r3, #0
10048f7a:	d005      	beq.n	10048f88 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
10048f7c:	693b      	ldr	r3, [r7, #16]
10048f7e:	2101      	movs	r1, #1
10048f80:	0018      	movs	r0, r3
10048f82:	f000 f81d 	bl	10048fc0 <VTIMER_SetWakeupTime>
10048f86:	e002      	b.n	10048f8e <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
10048f88:	683b      	ldr	r3, [r7, #0]
10048f8a:	2201      	movs	r2, #1
10048f8c:	701a      	strb	r2, [r3, #0]
10048f8e:	69fb      	ldr	r3, [r7, #28]
10048f90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f92:	68bb      	ldr	r3, [r7, #8]
10048f94:	f383 8810 	msr	PRIMASK, r3
}
10048f98:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
10048f9a:	e005      	b.n	10048fa8 <_update_user_timeout+0x88>
    }
    curr = curr->next;
10048f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f9e:	691b      	ldr	r3, [r3, #16]
10048fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
10048fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048fa4:	2b00      	cmp	r3, #0
10048fa6:	d1c8      	bne.n	10048f3a <_update_user_timeout+0x1a>
  }
  if (*expired)
10048fa8:	683b      	ldr	r3, [r7, #0]
10048faa:	781b      	ldrb	r3, [r3, #0]
10048fac:	2b00      	cmp	r3, #0
10048fae:	d001      	beq.n	10048fb4 <_update_user_timeout+0x94>
  {
    return rootOrig;
10048fb0:	6a3b      	ldr	r3, [r7, #32]
10048fb2:	e000      	b.n	10048fb6 <_update_user_timeout+0x96>
  }

  return curr;
10048fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10048fb6:	0018      	movs	r0, r3
10048fb8:	46bd      	mov	sp, r7
10048fba:	b00a      	add	sp, #40	@ 0x28
10048fbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

10048fc0 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
10048fc0:	b580      	push	{r7, lr}
10048fc2:	b084      	sub	sp, #16
10048fc4:	af00      	add	r7, sp, #0
10048fc6:	6078      	str	r0, [r7, #4]
10048fc8:	000a      	movs	r2, r1
10048fca:	1cfb      	adds	r3, r7, #3
10048fcc:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
10048fce:	4b15      	ldr	r3, [pc, #84]	@ (10049024 <VTIMER_SetWakeupTime+0x64>)
10048fd0:	699b      	ldr	r3, [r3, #24]
10048fd2:	0019      	movs	r1, r3
10048fd4:	4a14      	ldr	r2, [pc, #80]	@ (10049028 <VTIMER_SetWakeupTime+0x68>)
10048fd6:	687b      	ldr	r3, [r7, #4]
10048fd8:	0018      	movs	r0, r3
10048fda:	f7f7 f871 	bl	100400c0 <blue_unit_conversion>
10048fde:	0003      	movs	r3, r0
10048fe0:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
10048fe2:	687b      	ldr	r3, [r7, #4]
10048fe4:	2b20      	cmp	r3, #32
10048fe6:	d200      	bcs.n	10048fea <VTIMER_SetWakeupTime+0x2a>
10048fe8:	2320      	movs	r3, #32
10048fea:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10048fec:	4b0f      	ldr	r3, [pc, #60]	@ (1004902c <VTIMER_SetWakeupTime+0x6c>)
10048fee:	0018      	movs	r0, r3
10048ff0:	f7ff f829 	bl	10048046 <LL_RADIO_TIMER_GetAbsoluteTime>
10048ff4:	0003      	movs	r3, r0
10048ff6:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10048ff8:	687a      	ldr	r2, [r7, #4]
10048ffa:	68fb      	ldr	r3, [r7, #12]
10048ffc:	18d3      	adds	r3, r2, r3
10048ffe:	3308      	adds	r3, #8
10049000:	4a0a      	ldr	r2, [pc, #40]	@ (1004902c <VTIMER_SetWakeupTime+0x6c>)
10049002:	0019      	movs	r1, r3
10049004:	0010      	movs	r0, r2
10049006:	f7ff f812 	bl	1004802e <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004900a:	4b08      	ldr	r3, [pc, #32]	@ (1004902c <VTIMER_SetWakeupTime+0x6c>)
1004900c:	0018      	movs	r0, r3
1004900e:	f7ff f824 	bl	1004805a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10049012:	4b06      	ldr	r3, [pc, #24]	@ (1004902c <VTIMER_SetWakeupTime+0x6c>)
10049014:	0018      	movs	r0, r3
10049016:	f7fe ffcf 	bl	10047fb8 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004901a:	68fb      	ldr	r3, [r7, #12]
}
1004901c:	0018      	movs	r0, r3
1004901e:	46bd      	mov	sp, r7
10049020:	b004      	add	sp, #16
10049022:	bd80      	pop	{r7, pc}
10049024:	20000cc0 	.word	0x20000cc0
10049028:	00000326 	.word	0x00000326
1004902c:	60001800 	.word	0x60001800

10049030 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10049030:	b580      	push	{r7, lr}
10049032:	b086      	sub	sp, #24
10049034:	af00      	add	r7, sp, #0
10049036:	6078      	str	r0, [r7, #4]
10049038:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004903a:	687b      	ldr	r3, [r7, #4]
1004903c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004903e:	2300      	movs	r3, #0
10049040:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10049042:	687b      	ldr	r3, [r7, #4]
10049044:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10049046:	e004      	b.n	10049052 <_insert_timer_in_queue+0x22>
  {
    prev = current;
10049048:	697b      	ldr	r3, [r7, #20]
1004904a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004904c:	697b      	ldr	r3, [r7, #20]
1004904e:	691b      	ldr	r3, [r3, #16]
10049050:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10049052:	697b      	ldr	r3, [r7, #20]
10049054:	2b00      	cmp	r3, #0
10049056:	d00a      	beq.n	1004906e <_insert_timer_in_queue+0x3e>
10049058:	697b      	ldr	r3, [r7, #20]
1004905a:	681a      	ldr	r2, [r3, #0]
1004905c:	685b      	ldr	r3, [r3, #4]
1004905e:	6839      	ldr	r1, [r7, #0]
10049060:	6808      	ldr	r0, [r1, #0]
10049062:	6849      	ldr	r1, [r1, #4]
10049064:	4299      	cmp	r1, r3
10049066:	d8ef      	bhi.n	10049048 <_insert_timer_in_queue+0x18>
10049068:	d101      	bne.n	1004906e <_insert_timer_in_queue+0x3e>
1004906a:	4290      	cmp	r0, r2
1004906c:	d8ec      	bhi.n	10049048 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004906e:	683b      	ldr	r3, [r7, #0]
10049070:	697a      	ldr	r2, [r7, #20]
10049072:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
10049074:	693b      	ldr	r3, [r7, #16]
10049076:	2b00      	cmp	r3, #0
10049078:	d102      	bne.n	10049080 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004907a:	683b      	ldr	r3, [r7, #0]
1004907c:	60fb      	str	r3, [r7, #12]
1004907e:	e002      	b.n	10049086 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
10049080:	693b      	ldr	r3, [r7, #16]
10049082:	683a      	ldr	r2, [r7, #0]
10049084:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10049086:	68fb      	ldr	r3, [r7, #12]
}
10049088:	0018      	movs	r0, r3
1004908a:	46bd      	mov	sp, r7
1004908c:	b006      	add	sp, #24
1004908e:	bd80      	pop	{r7, pc}

10049090 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
10049090:	b580      	push	{r7, lr}
10049092:	b082      	sub	sp, #8
10049094:	af00      	add	r7, sp, #0
10049096:	0002      	movs	r2, r0
10049098:	1dfb      	adds	r3, r7, #7
1004909a:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004909c:	1dfb      	adds	r3, r7, #7
1004909e:	781b      	ldrb	r3, [r3, #0]
100490a0:	2b00      	cmp	r3, #0
100490a2:	d010      	beq.n	100490c6 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
100490a4:	4b0e      	ldr	r3, [pc, #56]	@ (100490e0 <_virtualTimeBaseEnable+0x50>)
100490a6:	2290      	movs	r2, #144	@ 0x90
100490a8:	5c9b      	ldrb	r3, [r3, r2]
100490aa:	2201      	movs	r2, #1
100490ac:	4053      	eors	r3, r2
100490ae:	b2db      	uxtb	r3, r3
100490b0:	2b00      	cmp	r3, #0
100490b2:	d010      	beq.n	100490d6 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
100490b4:	4b0b      	ldr	r3, [pc, #44]	@ (100490e4 <_virtualTimeBaseEnable+0x54>)
100490b6:	0018      	movs	r0, r3
100490b8:	f7ff fe40 	bl	10048d3c <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
100490bc:	4b08      	ldr	r3, [pc, #32]	@ (100490e0 <_virtualTimeBaseEnable+0x50>)
100490be:	2290      	movs	r2, #144	@ 0x90
100490c0:	2101      	movs	r1, #1
100490c2:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
100490c4:	e007      	b.n	100490d6 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
100490c6:	4b07      	ldr	r3, [pc, #28]	@ (100490e4 <_virtualTimeBaseEnable+0x54>)
100490c8:	0018      	movs	r0, r3
100490ca:	f7ff fc0b 	bl	100488e4 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
100490ce:	4b04      	ldr	r3, [pc, #16]	@ (100490e0 <_virtualTimeBaseEnable+0x50>)
100490d0:	2290      	movs	r2, #144	@ 0x90
100490d2:	2100      	movs	r1, #0
100490d4:	5499      	strb	r1, [r3, r2]
}
100490d6:	46c0      	nop			@ (mov r8, r8)
100490d8:	46bd      	mov	sp, r7
100490da:	b002      	add	sp, #8
100490dc:	bd80      	pop	{r7, pc}
100490de:	46c0      	nop			@ (mov r8, r8)
100490e0:	20000cc0 	.word	0x20000cc0
100490e4:	20000d00 	.word	0x20000d00

100490e8 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
100490e8:	b580      	push	{r7, lr}
100490ea:	b086      	sub	sp, #24
100490ec:	af00      	add	r7, sp, #0
100490ee:	6078      	str	r0, [r7, #4]
100490f0:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
100490f2:	687b      	ldr	r3, [r7, #4]
100490f4:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
100490f6:	2300      	movs	r3, #0
100490f8:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
100490fa:	687b      	ldr	r3, [r7, #4]
100490fc:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
100490fe:	e004      	b.n	1004910a <_remove_timer_in_queue+0x22>
  {
    prev = current;
10049100:	697b      	ldr	r3, [r7, #20]
10049102:	613b      	str	r3, [r7, #16]
    current = current->next;
10049104:	697b      	ldr	r3, [r7, #20]
10049106:	691b      	ldr	r3, [r3, #16]
10049108:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004910a:	697b      	ldr	r3, [r7, #20]
1004910c:	2b00      	cmp	r3, #0
1004910e:	d003      	beq.n	10049118 <_remove_timer_in_queue+0x30>
10049110:	697a      	ldr	r2, [r7, #20]
10049112:	683b      	ldr	r3, [r7, #0]
10049114:	429a      	cmp	r2, r3
10049116:	d1f3      	bne.n	10049100 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10049118:	697b      	ldr	r3, [r7, #20]
1004911a:	2b00      	cmp	r3, #0
1004911c:	d00b      	beq.n	10049136 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004911e:	697a      	ldr	r2, [r7, #20]
10049120:	687b      	ldr	r3, [r7, #4]
10049122:	429a      	cmp	r2, r3
10049124:	d103      	bne.n	1004912e <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
10049126:	697b      	ldr	r3, [r7, #20]
10049128:	691b      	ldr	r3, [r3, #16]
1004912a:	60fb      	str	r3, [r7, #12]
1004912c:	e003      	b.n	10049136 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004912e:	697b      	ldr	r3, [r7, #20]
10049130:	691a      	ldr	r2, [r3, #16]
10049132:	693b      	ldr	r3, [r7, #16]
10049134:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10049136:	68fb      	ldr	r3, [r7, #12]
}
10049138:	0018      	movs	r0, r3
1004913a:	46bd      	mov	sp, r7
1004913c:	b006      	add	sp, #24
1004913e:	bd80      	pop	{r7, pc}

10049140 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10049140:	b5b0      	push	{r4, r5, r7, lr}
10049142:	b088      	sub	sp, #32
10049144:	af00      	add	r7, sp, #0
10049146:	6078      	str	r0, [r7, #4]
10049148:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004914a:	687b      	ldr	r3, [r7, #4]
1004914c:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004914e:	2300      	movs	r3, #0
10049150:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
10049152:	687b      	ldr	r3, [r7, #4]
10049154:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
10049156:	683b      	ldr	r3, [r7, #0]
10049158:	687a      	ldr	r2, [r7, #4]
1004915a:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004915c:	2300      	movs	r3, #0
1004915e:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
10049160:	e021      	b.n	100491a6 <_check_callbacks+0x66>
  {

    if (curr->active)
10049162:	69fb      	ldr	r3, [r7, #28]
10049164:	7b1b      	ldrb	r3, [r3, #12]
10049166:	2b00      	cmp	r3, #0
10049168:	d015      	beq.n	10049196 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004916a:	69fb      	ldr	r3, [r7, #28]
1004916c:	681c      	ldr	r4, [r3, #0]
1004916e:	685d      	ldr	r5, [r3, #4]
10049170:	f7ff fb8c 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
10049174:	0002      	movs	r2, r0
10049176:	000b      	movs	r3, r1
10049178:	1aa4      	subs	r4, r4, r2
1004917a:	419d      	sbcs	r5, r3
1004917c:	0022      	movs	r2, r4
1004917e:	002b      	movs	r3, r5
10049180:	60ba      	str	r2, [r7, #8]
10049182:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
10049184:	68fb      	ldr	r3, [r7, #12]
10049186:	2b00      	cmp	r3, #0
10049188:	dc11      	bgt.n	100491ae <_check_callbacks+0x6e>
1004918a:	68fb      	ldr	r3, [r7, #12]
1004918c:	2b00      	cmp	r3, #0
1004918e:	d102      	bne.n	10049196 <_check_callbacks+0x56>
10049190:	68bb      	ldr	r3, [r7, #8]
10049192:	2b05      	cmp	r3, #5
10049194:	d80b      	bhi.n	100491ae <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
10049196:	69fb      	ldr	r3, [r7, #28]
10049198:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004919a:	69fb      	ldr	r3, [r7, #28]
1004919c:	691b      	ldr	r3, [r3, #16]
1004919e:	61fb      	str	r3, [r7, #28]
    expiredCount++;
100491a0:	693b      	ldr	r3, [r7, #16]
100491a2:	3301      	adds	r3, #1
100491a4:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
100491a6:	69fb      	ldr	r3, [r7, #28]
100491a8:	2b00      	cmp	r3, #0
100491aa:	d1da      	bne.n	10049162 <_check_callbacks+0x22>
100491ac:	e000      	b.n	100491b0 <_check_callbacks+0x70>
        break;
100491ae:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
100491b0:	693b      	ldr	r3, [r7, #16]
100491b2:	2b00      	cmp	r3, #0
100491b4:	d005      	beq.n	100491c2 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
100491b6:	69bb      	ldr	r3, [r7, #24]
100491b8:	2200      	movs	r2, #0
100491ba:	611a      	str	r2, [r3, #16]
    returnValue = curr;
100491bc:	69fb      	ldr	r3, [r7, #28]
100491be:	617b      	str	r3, [r7, #20]
100491c0:	e002      	b.n	100491c8 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
100491c2:	683b      	ldr	r3, [r7, #0]
100491c4:	2200      	movs	r2, #0
100491c6:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
100491c8:	697b      	ldr	r3, [r7, #20]
}
100491ca:	0018      	movs	r0, r3
100491cc:	46bd      	mov	sp, r7
100491ce:	b008      	add	sp, #32
100491d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

100491d4 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
100491d4:	b580      	push	{r7, lr}
100491d6:	b090      	sub	sp, #64	@ 0x40
100491d8:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100491da:	4b28      	ldr	r3, [pc, #160]	@ (1004927c <_updateCalibrationData+0xa8>)
100491dc:	781b      	ldrb	r3, [r3, #0]
100491de:	2b00      	cmp	r3, #0
100491e0:	d037      	beq.n	10049252 <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
100491e2:	003b      	movs	r3, r7
100491e4:	0018      	movs	r0, r3
100491e6:	f7ff fc4f 	bl	10048a88 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
100491ea:	4b24      	ldr	r3, [pc, #144]	@ (1004927c <_updateCalibrationData+0xa8>)
100491ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100491ee:	b29a      	uxth	r2, r3
100491f0:	003b      	movs	r3, r7
100491f2:	689b      	ldr	r3, [r3, #8]
100491f4:	0019      	movs	r1, r3
100491f6:	0010      	movs	r0, r2
100491f8:	f7ff fd72 	bl	10048ce0 <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100491fc:	f3ef 8310 	mrs	r3, PRIMASK
10049200:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10049202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
10049204:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10049206:	b672      	cpsid	i
}
10049208:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004920a:	4b1c      	ldr	r3, [pc, #112]	@ (1004927c <_updateCalibrationData+0xa8>)
1004920c:	2234      	movs	r2, #52	@ 0x34
1004920e:	2101      	movs	r1, #1
10049210:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
10049212:	003b      	movs	r3, r7
10049214:	685a      	ldr	r2, [r3, #4]
10049216:	4b19      	ldr	r3, [pc, #100]	@ (1004927c <_updateCalibrationData+0xa8>)
10049218:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004921a:	003b      	movs	r3, r7
1004921c:	689a      	ldr	r2, [r3, #8]
1004921e:	4b17      	ldr	r3, [pc, #92]	@ (1004927c <_updateCalibrationData+0xa8>)
10049220:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
10049222:	003b      	movs	r3, r7
10049224:	681a      	ldr	r2, [r3, #0]
10049226:	4b15      	ldr	r3, [pc, #84]	@ (1004927c <_updateCalibrationData+0xa8>)
10049228:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004922a:	003b      	movs	r3, r7
1004922c:	68da      	ldr	r2, [r3, #12]
1004922e:	4b13      	ldr	r3, [pc, #76]	@ (1004927c <_updateCalibrationData+0xa8>)
10049230:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
10049232:	4b12      	ldr	r3, [pc, #72]	@ (1004927c <_updateCalibrationData+0xa8>)
10049234:	0018      	movs	r0, r3
10049236:	f000 f823 	bl	10049280 <_update_system_time>
1004923a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004923c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004923e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049240:	f383 8810 	msr	PRIMASK, r3
}
10049244:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
10049246:	4b0d      	ldr	r3, [pc, #52]	@ (1004927c <_updateCalibrationData+0xa8>)
10049248:	2100      	movs	r1, #0
1004924a:	0018      	movs	r0, r3
1004924c:	f7ff fc84 	bl	10048b58 <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
10049250:	e010      	b.n	10049274 <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049252:	f3ef 8310 	mrs	r3, PRIMASK
10049256:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
10049258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004925a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004925c:	b672      	cpsid	i
}
1004925e:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
10049260:	4b06      	ldr	r3, [pc, #24]	@ (1004927c <_updateCalibrationData+0xa8>)
10049262:	0018      	movs	r0, r3
10049264:	f000 f80c 	bl	10049280 <_update_system_time>
10049268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004926a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004926c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004926e:	f383 8810 	msr	PRIMASK, r3
}
10049272:	46c0      	nop			@ (mov r8, r8)
}
10049274:	46c0      	nop			@ (mov r8, r8)
10049276:	46bd      	mov	sp, r7
10049278:	b010      	add	sp, #64	@ 0x40
1004927a:	bd80      	pop	{r7, pc}
1004927c:	20000cc0 	.word	0x20000cc0

10049280 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10049280:	b5b0      	push	{r4, r5, r7, lr}
10049282:	b088      	sub	sp, #32
10049284:	af00      	add	r7, sp, #0
10049286:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10049288:	4b2a      	ldr	r3, [pc, #168]	@ (10049334 <_update_system_time+0xb4>)
1004928a:	0018      	movs	r0, r3
1004928c:	f7fe fedb 	bl	10048046 <LL_RADIO_TIMER_GetAbsoluteTime>
10049290:	0003      	movs	r3, r0
10049292:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
10049294:	697b      	ldr	r3, [r7, #20]
10049296:	6a1b      	ldr	r3, [r3, #32]
10049298:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004929a:	697b      	ldr	r3, [r7, #20]
1004929c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004929e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
100492a0:	697b      	ldr	r3, [r7, #20]
100492a2:	2280      	movs	r2, #128	@ 0x80
100492a4:	589b      	ldr	r3, [r3, r2]
100492a6:	69fa      	ldr	r2, [r7, #28]
100492a8:	1ad3      	subs	r3, r2, r3
100492aa:	4a23      	ldr	r2, [pc, #140]	@ (10049338 <_update_system_time+0xb8>)
100492ac:	69b9      	ldr	r1, [r7, #24]
100492ae:	0018      	movs	r0, r3
100492b0:	f7f6 ff06 	bl	100400c0 <blue_unit_conversion>
100492b4:	0003      	movs	r3, r0
100492b6:	60bb      	str	r3, [r7, #8]
100492b8:	2300      	movs	r3, #0
100492ba:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100492bc:	68ba      	ldr	r2, [r7, #8]
100492be:	68fb      	ldr	r3, [r7, #12]
100492c0:	1912      	adds	r2, r2, r4
100492c2:	416b      	adcs	r3, r5
100492c4:	6979      	ldr	r1, [r7, #20]
100492c6:	670a      	str	r2, [r1, #112]	@ 0x70
100492c8:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
100492ca:	697b      	ldr	r3, [r7, #20]
100492cc:	781b      	ldrb	r3, [r3, #0]
100492ce:	2b00      	cmp	r3, #0
100492d0:	d11d      	bne.n	1004930e <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
100492d2:	697b      	ldr	r3, [r7, #20]
100492d4:	2280      	movs	r2, #128	@ 0x80
100492d6:	589b      	ldr	r3, [r3, r2]
100492d8:	69fa      	ldr	r2, [r7, #28]
100492da:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
100492dc:	697b      	ldr	r3, [r7, #20]
100492de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
100492e0:	429a      	cmp	r2, r3
100492e2:	d214      	bcs.n	1004930e <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
100492e4:	4a14      	ldr	r2, [pc, #80]	@ (10049338 <_update_system_time+0xb8>)
100492e6:	69b9      	ldr	r1, [r7, #24]
100492e8:	2301      	movs	r3, #1
100492ea:	425b      	negs	r3, r3
100492ec:	0018      	movs	r0, r3
100492ee:	f7f6 fee7 	bl	100400c0 <blue_unit_conversion>
100492f2:	0001      	movs	r1, r0
100492f4:	697b      	ldr	r3, [r7, #20]
100492f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100492f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100492fa:	6039      	str	r1, [r7, #0]
100492fc:	2100      	movs	r1, #0
100492fe:	6079      	str	r1, [r7, #4]
10049300:	6838      	ldr	r0, [r7, #0]
10049302:	6879      	ldr	r1, [r7, #4]
10049304:	1812      	adds	r2, r2, r0
10049306:	414b      	adcs	r3, r1
10049308:	6979      	ldr	r1, [r7, #20]
1004930a:	670a      	str	r2, [r1, #112]	@ 0x70
1004930c:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004930e:	697b      	ldr	r3, [r7, #20]
10049310:	2180      	movs	r1, #128	@ 0x80
10049312:	69fa      	ldr	r2, [r7, #28]
10049314:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
10049316:	697b      	ldr	r3, [r7, #20]
10049318:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004931a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004931c:	6979      	ldr	r1, [r7, #20]
1004931e:	628a      	str	r2, [r1, #40]	@ 0x28
10049320:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10049322:	697b      	ldr	r3, [r7, #20]
10049324:	69da      	ldr	r2, [r3, #28]
10049326:	697b      	ldr	r3, [r7, #20]
10049328:	621a      	str	r2, [r3, #32]
}
1004932a:	46c0      	nop			@ (mov r8, r8)
1004932c:	46bd      	mov	sp, r7
1004932e:	b008      	add	sp, #32
10049330:	bdb0      	pop	{r4, r5, r7, pc}
10049332:	46c0      	nop			@ (mov r8, r8)
10049334:	60001800 	.word	0x60001800
10049338:	00000635 	.word	0x00000635

1004933c <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004933c:	b5b0      	push	{r4, r5, r7, lr}
1004933e:	b08a      	sub	sp, #40	@ 0x28
10049340:	af00      	add	r7, sp, #0
10049342:	6078      	str	r0, [r7, #4]
10049344:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10049346:	683b      	ldr	r3, [r7, #0]
10049348:	2200      	movs	r2, #0
1004934a:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004934c:	687b      	ldr	r3, [r7, #4]
1004934e:	7a9b      	ldrb	r3, [r3, #10]
10049350:	2b00      	cmp	r3, #0
10049352:	d100      	bne.n	10049356 <_check_radio_activity+0x1a>
10049354:	e070      	b.n	10049438 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10049356:	4b3a      	ldr	r3, [pc, #232]	@ (10049440 <_check_radio_activity+0x104>)
10049358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004935c:	4938      	ldr	r1, [pc, #224]	@ (10049440 <_check_radio_activity+0x104>)
1004935e:	6849      	ldr	r1, [r1, #4]
10049360:	000c      	movs	r4, r1
10049362:	2100      	movs	r1, #0
10049364:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10049366:	1912      	adds	r2, r2, r4
10049368:	416b      	adcs	r3, r5
1004936a:	623a      	str	r2, [r7, #32]
1004936c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004936e:	f3ef 8310 	mrs	r3, PRIMASK
10049372:	60fb      	str	r3, [r7, #12]
  return(result);
10049374:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10049376:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10049378:	b672      	cpsid	i
}
1004937a:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004937c:	f7ff fa86 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
10049380:	0002      	movs	r2, r0
10049382:	000b      	movs	r3, r1
10049384:	613a      	str	r2, [r7, #16]
10049386:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10049388:	687b      	ldr	r3, [r7, #4]
1004938a:	681a      	ldr	r2, [r3, #0]
1004938c:	685b      	ldr	r3, [r3, #4]
1004938e:	6a38      	ldr	r0, [r7, #32]
10049390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10049392:	24c8      	movs	r4, #200	@ 0xc8
10049394:	02a4      	lsls	r4, r4, #10
10049396:	2500      	movs	r5, #0
10049398:	1900      	adds	r0, r0, r4
1004939a:	4169      	adcs	r1, r5
1004939c:	4299      	cmp	r1, r3
1004939e:	d812      	bhi.n	100493c6 <_check_radio_activity+0x8a>
100493a0:	d101      	bne.n	100493a6 <_check_radio_activity+0x6a>
100493a2:	4290      	cmp	r0, r2
100493a4:	d80f      	bhi.n	100493c6 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
100493a6:	6a3a      	ldr	r2, [r7, #32]
100493a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100493aa:	20b9      	movs	r0, #185	@ 0xb9
100493ac:	0040      	lsls	r0, r0, #1
100493ae:	2100      	movs	r1, #0
100493b0:	1812      	adds	r2, r2, r0
100493b2:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100493b4:	6979      	ldr	r1, [r7, #20]
100493b6:	4299      	cmp	r1, r3
100493b8:	d805      	bhi.n	100493c6 <_check_radio_activity+0x8a>
100493ba:	6979      	ldr	r1, [r7, #20]
100493bc:	4299      	cmp	r1, r3
100493be:	d135      	bne.n	1004942c <_check_radio_activity+0xf0>
100493c0:	6939      	ldr	r1, [r7, #16]
100493c2:	4291      	cmp	r1, r2
100493c4:	d932      	bls.n	1004942c <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100493c6:	687b      	ldr	r3, [r7, #4]
100493c8:	681a      	ldr	r2, [r3, #0]
100493ca:	685b      	ldr	r3, [r3, #4]
100493cc:	204c      	movs	r0, #76	@ 0x4c
100493ce:	4240      	negs	r0, r0
100493d0:	17c1      	asrs	r1, r0, #31
100493d2:	1880      	adds	r0, r0, r2
100493d4:	4159      	adcs	r1, r3
100493d6:	693a      	ldr	r2, [r7, #16]
100493d8:	697b      	ldr	r3, [r7, #20]
100493da:	240a      	movs	r4, #10
100493dc:	2500      	movs	r5, #0
100493de:	1912      	adds	r2, r2, r4
100493e0:	416b      	adcs	r3, r5
100493e2:	4299      	cmp	r1, r3
100493e4:	d802      	bhi.n	100493ec <_check_radio_activity+0xb0>
100493e6:	d11a      	bne.n	1004941e <_check_radio_activity+0xe2>
100493e8:	4290      	cmp	r0, r2
100493ea:	d918      	bls.n	1004941e <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
100493ec:	687b      	ldr	r3, [r7, #4]
100493ee:	681a      	ldr	r2, [r3, #0]
100493f0:	685b      	ldr	r3, [r3, #4]
100493f2:	0010      	movs	r0, r2
100493f4:	687b      	ldr	r3, [r7, #4]
100493f6:	7b19      	ldrb	r1, [r3, #12]
100493f8:	687b      	ldr	r3, [r7, #4]
100493fa:	7a1b      	ldrb	r3, [r3, #8]
100493fc:	001a      	movs	r2, r3
100493fe:	f000 f821 	bl	10049444 <TIMER_SetRadioTimerValue>
10049402:	0003      	movs	r3, r0
10049404:	001a      	movs	r2, r3
10049406:	683b      	ldr	r3, [r7, #0]
10049408:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004940a:	687b      	ldr	r3, [r7, #4]
1004940c:	2200      	movs	r2, #0
1004940e:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10049410:	687b      	ldr	r3, [r7, #4]
10049412:	2201      	movs	r2, #1
10049414:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10049416:	687b      	ldr	r3, [r7, #4]
10049418:	2201      	movs	r2, #1
1004941a:	72da      	strb	r2, [r3, #11]
1004941c:	e006      	b.n	1004942c <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004941e:	4b08      	ldr	r3, [pc, #32]	@ (10049440 <_check_radio_activity+0x104>)
10049420:	2262      	movs	r2, #98	@ 0x62
10049422:	2100      	movs	r1, #0
10049424:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10049426:	683b      	ldr	r3, [r7, #0]
10049428:	2201      	movs	r2, #1
1004942a:	701a      	strb	r2, [r3, #0]
1004942c:	69fb      	ldr	r3, [r7, #28]
1004942e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049430:	68bb      	ldr	r3, [r7, #8]
10049432:	f383 8810 	msr	PRIMASK, r3
}
10049436:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
10049438:	46c0      	nop			@ (mov r8, r8)
1004943a:	46bd      	mov	sp, r7
1004943c:	b00a      	add	sp, #40	@ 0x28
1004943e:	bdb0      	pop	{r4, r5, r7, pc}
10049440:	20000cc0 	.word	0x20000cc0

10049444 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10049444:	b580      	push	{r7, lr}
10049446:	b08a      	sub	sp, #40	@ 0x28
10049448:	af00      	add	r7, sp, #0
1004944a:	6078      	str	r0, [r7, #4]
1004944c:	0008      	movs	r0, r1
1004944e:	0011      	movs	r1, r2
10049450:	1cfb      	adds	r3, r7, #3
10049452:	1c02      	adds	r2, r0, #0
10049454:	701a      	strb	r2, [r3, #0]
10049456:	1cbb      	adds	r3, r7, #2
10049458:	1c0a      	adds	r2, r1, #0
1004945a:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004945c:	1cfb      	adds	r3, r7, #3
1004945e:	781b      	ldrb	r3, [r3, #0]
10049460:	2b00      	cmp	r3, #0
10049462:	d015      	beq.n	10049490 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10049464:	1cbb      	adds	r3, r7, #2
10049466:	781b      	ldrb	r3, [r3, #0]
10049468:	2b00      	cmp	r3, #0
1004946a:	d008      	beq.n	1004947e <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004946c:	4b67      	ldr	r3, [pc, #412]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
1004946e:	2238      	movs	r2, #56	@ 0x38
10049470:	5c9b      	ldrb	r3, [r3, r2]
10049472:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10049474:	4b65      	ldr	r3, [pc, #404]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
10049476:	223c      	movs	r2, #60	@ 0x3c
10049478:	5c9b      	ldrb	r3, [r3, r2]
1004947a:	61fb      	str	r3, [r7, #28]
1004947c:	e01d      	b.n	100494ba <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004947e:	4b63      	ldr	r3, [pc, #396]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
10049480:	2239      	movs	r2, #57	@ 0x39
10049482:	5c9b      	ldrb	r3, [r3, r2]
10049484:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10049486:	4b61      	ldr	r3, [pc, #388]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
10049488:	223c      	movs	r2, #60	@ 0x3c
1004948a:	5c9b      	ldrb	r3, [r3, r2]
1004948c:	61fb      	str	r3, [r7, #28]
1004948e:	e014      	b.n	100494ba <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10049490:	1cbb      	adds	r3, r7, #2
10049492:	781b      	ldrb	r3, [r3, #0]
10049494:	2b00      	cmp	r3, #0
10049496:	d008      	beq.n	100494aa <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10049498:	4b5c      	ldr	r3, [pc, #368]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
1004949a:	223a      	movs	r2, #58	@ 0x3a
1004949c:	5c9b      	ldrb	r3, [r3, r2]
1004949e:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100494a0:	4b5a      	ldr	r3, [pc, #360]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100494a2:	223c      	movs	r2, #60	@ 0x3c
100494a4:	5c9b      	ldrb	r3, [r3, r2]
100494a6:	61fb      	str	r3, [r7, #28]
100494a8:	e007      	b.n	100494ba <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
100494aa:	4b58      	ldr	r3, [pc, #352]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100494ac:	223b      	movs	r2, #59	@ 0x3b
100494ae:	5c9b      	ldrb	r3, [r3, r2]
100494b0:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100494b2:	4b56      	ldr	r3, [pc, #344]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100494b4:	223c      	movs	r2, #60	@ 0x3c
100494b6:	5c9b      	ldrb	r3, [r3, r2]
100494b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
100494ba:	230c      	movs	r3, #12
100494bc:	18fa      	adds	r2, r7, r3
100494be:	4b53      	ldr	r3, [pc, #332]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100494c0:	0011      	movs	r1, r2
100494c2:	0018      	movs	r0, r3
100494c4:	f7ff fcc4 	bl	10048e50 <_get_system_time_and_machine>
100494c8:	0002      	movs	r2, r0
100494ca:	000b      	movs	r3, r1
100494cc:	687b      	ldr	r3, [r7, #4]
100494ce:	1a9b      	subs	r3, r3, r2
100494d0:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100494d2:	4b4e      	ldr	r3, [pc, #312]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100494d4:	699b      	ldr	r3, [r3, #24]
100494d6:	0019      	movs	r1, r3
100494d8:	4a4d      	ldr	r2, [pc, #308]	@ (10049610 <TIMER_SetRadioTimerValue+0x1cc>)
100494da:	697b      	ldr	r3, [r7, #20]
100494dc:	0018      	movs	r0, r3
100494de:	f7f6 fdef 	bl	100400c0 <blue_unit_conversion>
100494e2:	0003      	movs	r3, r0
100494e4:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
100494e6:	4b49      	ldr	r3, [pc, #292]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100494e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
100494ea:	69fb      	ldr	r3, [r7, #28]
100494ec:	18d3      	adds	r3, r2, r3
100494ee:	33c8      	adds	r3, #200	@ 0xc8
100494f0:	697a      	ldr	r2, [r7, #20]
100494f2:	429a      	cmp	r2, r3
100494f4:	d92f      	bls.n	10049556 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
100494f6:	4b47      	ldr	r3, [pc, #284]	@ (10049614 <TIMER_SetRadioTimerValue+0x1d0>)
100494f8:	795b      	ldrb	r3, [r3, #5]
100494fa:	b2db      	uxtb	r3, r3
100494fc:	001a      	movs	r2, r3
100494fe:	693b      	ldr	r3, [r7, #16]
10049500:	1a9a      	subs	r2, r3, r2
10049502:	6a3b      	ldr	r3, [r7, #32]
10049504:	1ad3      	subs	r3, r2, r3
10049506:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10049508:	68fa      	ldr	r2, [r7, #12]
1004950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004950c:	18d3      	adds	r3, r2, r3
1004950e:	4a42      	ldr	r2, [pc, #264]	@ (10049618 <TIMER_SetRadioTimerValue+0x1d4>)
10049510:	0019      	movs	r1, r3
10049512:	0010      	movs	r0, r2
10049514:	f7fe fd7f 	bl	10048016 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10049518:	4b3f      	ldr	r3, [pc, #252]	@ (10049618 <TIMER_SetRadioTimerValue+0x1d4>)
1004951a:	2100      	movs	r1, #0
1004951c:	0018      	movs	r0, r3
1004951e:	f7fe fdab 	bl	10048078 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10049522:	23c0      	movs	r3, #192	@ 0xc0
10049524:	05db      	lsls	r3, r3, #23
10049526:	0018      	movs	r0, r3
10049528:	f7fe fcfc 	bl	10047f24 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004952c:	23c0      	movs	r3, #192	@ 0xc0
1004952e:	05db      	lsls	r3, r3, #23
10049530:	0018      	movs	r0, r3
10049532:	f7fe fd06 	bl	10047f42 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10049536:	4b38      	ldr	r3, [pc, #224]	@ (10049618 <TIMER_SetRadioTimerValue+0x1d4>)
10049538:	0018      	movs	r0, r3
1004953a:	f7fe fd1d 	bl	10047f78 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004953e:	4b36      	ldr	r3, [pc, #216]	@ (10049618 <TIMER_SetRadioTimerValue+0x1d4>)
10049540:	0018      	movs	r0, r3
10049542:	f7fe fd8a 	bl	1004805a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10049546:	4b33      	ldr	r3, [pc, #204]	@ (10049614 <TIMER_SetRadioTimerValue+0x1d0>)
10049548:	795b      	ldrb	r3, [r3, #5]
1004954a:	b2db      	uxtb	r3, r3
1004954c:	001a      	movs	r2, r3
1004954e:	6a3b      	ldr	r3, [r7, #32]
10049550:	189b      	adds	r3, r3, r2
10049552:	623b      	str	r3, [r7, #32]
10049554:	e021      	b.n	1004959a <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10049556:	4b2d      	ldr	r3, [pc, #180]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
10049558:	223d      	movs	r2, #61	@ 0x3d
1004955a:	5c9b      	ldrb	r3, [r3, r2]
1004955c:	001a      	movs	r2, r3
1004955e:	693b      	ldr	r3, [r7, #16]
10049560:	1a9a      	subs	r2, r3, r2
10049562:	6a3b      	ldr	r3, [r7, #32]
10049564:	1ad3      	subs	r3, r2, r3
10049566:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10049568:	68fa      	ldr	r2, [r7, #12]
1004956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004956c:	18d2      	adds	r2, r2, r3
1004956e:	23c0      	movs	r3, #192	@ 0xc0
10049570:	05db      	lsls	r3, r3, #23
10049572:	0011      	movs	r1, r2
10049574:	0018      	movs	r0, r3
10049576:	f7fe fcf3 	bl	10047f60 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004957a:	4b27      	ldr	r3, [pc, #156]	@ (10049618 <TIMER_SetRadioTimerValue+0x1d4>)
1004957c:	0018      	movs	r0, r3
1004957e:	f7fe fd0b 	bl	10047f98 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10049582:	23c0      	movs	r3, #192	@ 0xc0
10049584:	05db      	lsls	r3, r3, #23
10049586:	0018      	movs	r0, r3
10049588:	f7fe fcbc 	bl	10047f04 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004958c:	4b1f      	ldr	r3, [pc, #124]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
1004958e:	223d      	movs	r2, #61	@ 0x3d
10049590:	5c9b      	ldrb	r3, [r3, r2]
10049592:	001a      	movs	r2, r3
10049594:	6a3b      	ldr	r3, [r7, #32]
10049596:	189b      	adds	r3, r3, r2
10049598:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004959a:	68fa      	ldr	r2, [r7, #12]
1004959c:	693b      	ldr	r3, [r7, #16]
1004959e:	18d2      	adds	r2, r2, r3
100495a0:	4b1a      	ldr	r3, [pc, #104]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100495a2:	2188      	movs	r1, #136	@ 0x88
100495a4:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
100495a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100495a8:	6a3b      	ldr	r3, [r7, #32]
100495aa:	18d2      	adds	r2, r2, r3
100495ac:	6a3b      	ldr	r3, [r7, #32]
100495ae:	3305      	adds	r3, #5
100495b0:	429a      	cmp	r2, r3
100495b2:	d212      	bcs.n	100495da <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
100495b4:	23c0      	movs	r3, #192	@ 0xc0
100495b6:	05db      	lsls	r3, r3, #23
100495b8:	0018      	movs	r0, r3
100495ba:	f7fe fcb3 	bl	10047f24 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
100495be:	23c0      	movs	r3, #192	@ 0xc0
100495c0:	05db      	lsls	r3, r3, #23
100495c2:	0018      	movs	r0, r3
100495c4:	f7fe fcbd 	bl	10047f42 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
100495c8:	4b13      	ldr	r3, [pc, #76]	@ (10049618 <TIMER_SetRadioTimerValue+0x1d4>)
100495ca:	0018      	movs	r0, r3
100495cc:	f7fe fce4 	bl	10047f98 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
100495d0:	231b      	movs	r3, #27
100495d2:	18fb      	adds	r3, r7, r3
100495d4:	2201      	movs	r2, #1
100495d6:	701a      	strb	r2, [r3, #0]
100495d8:	e010      	b.n	100495fc <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
100495da:	4b0c      	ldr	r3, [pc, #48]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100495dc:	69db      	ldr	r3, [r3, #28]
100495de:	0019      	movs	r1, r3
100495e0:	4a0e      	ldr	r2, [pc, #56]	@ (1004961c <TIMER_SetRadioTimerValue+0x1d8>)
100495e2:	6a3b      	ldr	r3, [r7, #32]
100495e4:	0018      	movs	r0, r3
100495e6:	f7f6 fd6b 	bl	100400c0 <blue_unit_conversion>
100495ea:	0003      	movs	r3, r0
100495ec:	b2d9      	uxtb	r1, r3
100495ee:	4b07      	ldr	r3, [pc, #28]	@ (1004960c <TIMER_SetRadioTimerValue+0x1c8>)
100495f0:	2284      	movs	r2, #132	@ 0x84
100495f2:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
100495f4:	231b      	movs	r3, #27
100495f6:	18fb      	adds	r3, r7, r3
100495f8:	2200      	movs	r2, #0
100495fa:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
100495fc:	231b      	movs	r3, #27
100495fe:	18fb      	adds	r3, r7, r3
10049600:	781b      	ldrb	r3, [r3, #0]
}
10049602:	0018      	movs	r0, r3
10049604:	46bd      	mov	sp, r7
10049606:	b00a      	add	sp, #40	@ 0x28
10049608:	bd80      	pop	{r7, pc}
1004960a:	46c0      	nop			@ (mov r8, r8)
1004960c:	20000cc0 	.word	0x20000cc0
10049610:	00000326 	.word	0x00000326
10049614:	200000c0 	.word	0x200000c0
10049618:	60001800 	.word	0x60001800
1004961c:	00000635 	.word	0x00000635

10049620 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10049620:	b5b0      	push	{r4, r5, r7, lr}
10049622:	b084      	sub	sp, #16
10049624:	af00      	add	r7, sp, #0
10049626:	6078      	str	r0, [r7, #4]
10049628:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004962a:	2308      	movs	r3, #8
1004962c:	18fa      	adds	r2, r7, r3
1004962e:	4b12      	ldr	r3, [pc, #72]	@ (10049678 <TIMER_GetPastSysTime+0x58>)
10049630:	0011      	movs	r1, r2
10049632:	0018      	movs	r0, r3
10049634:	f7ff fc0c 	bl	10048e50 <_get_system_time_and_machine>
10049638:	0002      	movs	r2, r0
1004963a:	000b      	movs	r3, r1
1004963c:	6839      	ldr	r1, [r7, #0]
1004963e:	600a      	str	r2, [r1, #0]
10049640:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10049642:	68ba      	ldr	r2, [r7, #8]
10049644:	687b      	ldr	r3, [r7, #4]
10049646:	1ad0      	subs	r0, r2, r3
10049648:	4b0b      	ldr	r3, [pc, #44]	@ (10049678 <TIMER_GetPastSysTime+0x58>)
1004964a:	69db      	ldr	r3, [r3, #28]
1004964c:	0019      	movs	r1, r3
1004964e:	4b0b      	ldr	r3, [pc, #44]	@ (1004967c <TIMER_GetPastSysTime+0x5c>)
10049650:	001a      	movs	r2, r3
10049652:	f7f6 fd35 	bl	100400c0 <blue_unit_conversion>
10049656:	0003      	movs	r3, r0
10049658:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004965a:	683b      	ldr	r3, [r7, #0]
1004965c:	681a      	ldr	r2, [r3, #0]
1004965e:	685b      	ldr	r3, [r3, #4]
10049660:	68f9      	ldr	r1, [r7, #12]
10049662:	000c      	movs	r4, r1
10049664:	2100      	movs	r1, #0
10049666:	000d      	movs	r5, r1
10049668:	1b12      	subs	r2, r2, r4
1004966a:	41ab      	sbcs	r3, r5
}
1004966c:	0010      	movs	r0, r2
1004966e:	0019      	movs	r1, r3
10049670:	46bd      	mov	sp, r7
10049672:	b004      	add	sp, #16
10049674:	bdb0      	pop	{r4, r5, r7, pc}
10049676:	46c0      	nop			@ (mov r8, r8)
10049678:	20000cc0 	.word	0x20000cc0
1004967c:	00000635 	.word	0x00000635

10049680 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10049680:	b580      	push	{r7, lr}
10049682:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10049684:	f7ff f986 	bl	10048994 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10049688:	f005 fb04 	bl	1004ec94 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004968c:	46c0      	nop			@ (mov r8, r8)
1004968e:	46bd      	mov	sp, r7
10049690:	bd80      	pop	{r7, pc}

10049692 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10049692:	b580      	push	{r7, lr}
10049694:	b082      	sub	sp, #8
10049696:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10049698:	2300      	movs	r3, #0
1004969a:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004969c:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004969e:	23c0      	movs	r3, #192	@ 0xc0
100496a0:	05db      	lsls	r3, r3, #23
100496a2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
100496a4:	23c0      	movs	r3, #192	@ 0xc0
100496a6:	05db      	lsls	r3, r3, #23
100496a8:	2101      	movs	r1, #1
100496aa:	430a      	orrs	r2, r1
100496ac:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
100496ae:	23c0      	movs	r3, #192	@ 0xc0
100496b0:	05db      	lsls	r3, r3, #23
100496b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100496b4:	607b      	str	r3, [r7, #4]
}
100496b6:	46c0      	nop			@ (mov r8, r8)
100496b8:	46bd      	mov	sp, r7
100496ba:	b002      	add	sp, #8
100496bc:	bd80      	pop	{r7, pc}
	...

100496c0 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
100496c0:	b580      	push	{r7, lr}
100496c2:	b082      	sub	sp, #8
100496c4:	af00      	add	r7, sp, #0
100496c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
100496c8:	4b08      	ldr	r3, [pc, #32]	@ (100496ec <LL_PWR_SetNoPullB+0x2c>)
100496ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100496cc:	687b      	ldr	r3, [r7, #4]
100496ce:	43d9      	mvns	r1, r3
100496d0:	4b06      	ldr	r3, [pc, #24]	@ (100496ec <LL_PWR_SetNoPullB+0x2c>)
100496d2:	400a      	ands	r2, r1
100496d4:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
100496d6:	4b05      	ldr	r3, [pc, #20]	@ (100496ec <LL_PWR_SetNoPullB+0x2c>)
100496d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100496da:	687b      	ldr	r3, [r7, #4]
100496dc:	43d9      	mvns	r1, r3
100496de:	4b03      	ldr	r3, [pc, #12]	@ (100496ec <LL_PWR_SetNoPullB+0x2c>)
100496e0:	400a      	ands	r2, r1
100496e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100496e4:	46c0      	nop			@ (mov r8, r8)
100496e6:	46bd      	mov	sp, r7
100496e8:	b002      	add	sp, #8
100496ea:	bd80      	pop	{r7, pc}
100496ec:	48500000 	.word	0x48500000

100496f0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
100496f0:	b580      	push	{r7, lr}
100496f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
100496f4:	4b04      	ldr	r3, [pc, #16]	@ (10049708 <LL_RCC_HSE_Enable+0x18>)
100496f6:	681a      	ldr	r2, [r3, #0]
100496f8:	4b03      	ldr	r3, [pc, #12]	@ (10049708 <LL_RCC_HSE_Enable+0x18>)
100496fa:	2180      	movs	r1, #128	@ 0x80
100496fc:	0249      	lsls	r1, r1, #9
100496fe:	430a      	orrs	r2, r1
10049700:	601a      	str	r2, [r3, #0]
}
10049702:	46c0      	nop			@ (mov r8, r8)
10049704:	46bd      	mov	sp, r7
10049706:	bd80      	pop	{r7, pc}
10049708:	48400000 	.word	0x48400000

1004970c <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004970c:	b580      	push	{r7, lr}
1004970e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10049710:	4b04      	ldr	r3, [pc, #16]	@ (10049724 <LL_RCC_HSE_Disable+0x18>)
10049712:	681a      	ldr	r2, [r3, #0]
10049714:	4b03      	ldr	r3, [pc, #12]	@ (10049724 <LL_RCC_HSE_Disable+0x18>)
10049716:	4904      	ldr	r1, [pc, #16]	@ (10049728 <LL_RCC_HSE_Disable+0x1c>)
10049718:	400a      	ands	r2, r1
1004971a:	601a      	str	r2, [r3, #0]
}
1004971c:	46c0      	nop			@ (mov r8, r8)
1004971e:	46bd      	mov	sp, r7
10049720:	bd80      	pop	{r7, pc}
10049722:	46c0      	nop			@ (mov r8, r8)
10049724:	48400000 	.word	0x48400000
10049728:	fffeffff 	.word	0xfffeffff

1004972c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004972c:	b580      	push	{r7, lr}
1004972e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10049730:	4b07      	ldr	r3, [pc, #28]	@ (10049750 <LL_RCC_HSE_IsReady+0x24>)
10049732:	681a      	ldr	r2, [r3, #0]
10049734:	2380      	movs	r3, #128	@ 0x80
10049736:	029b      	lsls	r3, r3, #10
10049738:	401a      	ands	r2, r3
1004973a:	2380      	movs	r3, #128	@ 0x80
1004973c:	029b      	lsls	r3, r3, #10
1004973e:	429a      	cmp	r2, r3
10049740:	d101      	bne.n	10049746 <LL_RCC_HSE_IsReady+0x1a>
10049742:	2301      	movs	r3, #1
10049744:	e000      	b.n	10049748 <LL_RCC_HSE_IsReady+0x1c>
10049746:	2300      	movs	r3, #0
}
10049748:	0018      	movs	r0, r3
1004974a:	46bd      	mov	sp, r7
1004974c:	bd80      	pop	{r7, pc}
1004974e:	46c0      	nop			@ (mov r8, r8)
10049750:	48400000 	.word	0x48400000

10049754 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10049754:	b580      	push	{r7, lr}
10049756:	b082      	sub	sp, #8
10049758:	af00      	add	r7, sp, #0
1004975a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004975c:	4a0b      	ldr	r2, [pc, #44]	@ (1004978c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004975e:	2398      	movs	r3, #152	@ 0x98
10049760:	58d3      	ldr	r3, [r2, r3]
10049762:	4a0b      	ldr	r2, [pc, #44]	@ (10049790 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10049764:	401a      	ands	r2, r3
10049766:	687b      	ldr	r3, [r7, #4]
10049768:	021b      	lsls	r3, r3, #8
1004976a:	4908      	ldr	r1, [pc, #32]	@ (1004978c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004976c:	4313      	orrs	r3, r2
1004976e:	2298      	movs	r2, #152	@ 0x98
10049770:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10049772:	4a06      	ldr	r2, [pc, #24]	@ (1004978c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10049774:	2398      	movs	r3, #152	@ 0x98
10049776:	58d3      	ldr	r3, [r2, r3]
10049778:	4904      	ldr	r1, [pc, #16]	@ (1004978c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004977a:	2280      	movs	r2, #128	@ 0x80
1004977c:	4313      	orrs	r3, r2
1004977e:	2298      	movs	r2, #152	@ 0x98
10049780:	508b      	str	r3, [r1, r2]
}
10049782:	46c0      	nop			@ (mov r8, r8)
10049784:	46bd      	mov	sp, r7
10049786:	b002      	add	sp, #8
10049788:	bd80      	pop	{r7, pc}
1004978a:	46c0      	nop			@ (mov r8, r8)
1004978c:	48400000 	.word	0x48400000
10049790:	ffffc0ff 	.word	0xffffc0ff

10049794 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
10049794:	b580      	push	{r7, lr}
10049796:	b082      	sub	sp, #8
10049798:	af00      	add	r7, sp, #0
1004979a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004979c:	4a07      	ldr	r2, [pc, #28]	@ (100497bc <LL_RCC_HSE_SetCurrentControl+0x28>)
1004979e:	2398      	movs	r3, #152	@ 0x98
100497a0:	58d3      	ldr	r3, [r2, r3]
100497a2:	2270      	movs	r2, #112	@ 0x70
100497a4:	4393      	bics	r3, r2
100497a6:	001a      	movs	r2, r3
100497a8:	4904      	ldr	r1, [pc, #16]	@ (100497bc <LL_RCC_HSE_SetCurrentControl+0x28>)
100497aa:	687b      	ldr	r3, [r7, #4]
100497ac:	4313      	orrs	r3, r2
100497ae:	2298      	movs	r2, #152	@ 0x98
100497b0:	508b      	str	r3, [r1, r2]
}
100497b2:	46c0      	nop			@ (mov r8, r8)
100497b4:	46bd      	mov	sp, r7
100497b6:	b002      	add	sp, #8
100497b8:	bd80      	pop	{r7, pc}
100497ba:	46c0      	nop			@ (mov r8, r8)
100497bc:	48400000 	.word	0x48400000

100497c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
100497c0:	b580      	push	{r7, lr}
100497c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100497c4:	4b07      	ldr	r3, [pc, #28]	@ (100497e4 <LL_RCC_HSI_Enable+0x24>)
100497c6:	689a      	ldr	r2, [r3, #8]
100497c8:	4b06      	ldr	r3, [pc, #24]	@ (100497e4 <LL_RCC_HSI_Enable+0x24>)
100497ca:	2104      	movs	r1, #4
100497cc:	438a      	bics	r2, r1
100497ce:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100497d0:	4b04      	ldr	r3, [pc, #16]	@ (100497e4 <LL_RCC_HSI_Enable+0x24>)
100497d2:	689a      	ldr	r2, [r3, #8]
100497d4:	4b03      	ldr	r3, [pc, #12]	@ (100497e4 <LL_RCC_HSI_Enable+0x24>)
100497d6:	2102      	movs	r1, #2
100497d8:	438a      	bics	r2, r1
100497da:	609a      	str	r2, [r3, #8]
}
100497dc:	46c0      	nop			@ (mov r8, r8)
100497de:	46bd      	mov	sp, r7
100497e0:	bd80      	pop	{r7, pc}
100497e2:	46c0      	nop			@ (mov r8, r8)
100497e4:	48400000 	.word	0x48400000

100497e8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
100497e8:	b580      	push	{r7, lr}
100497ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100497ec:	4b07      	ldr	r3, [pc, #28]	@ (1004980c <LL_RCC_HSI_Disable+0x24>)
100497ee:	689a      	ldr	r2, [r3, #8]
100497f0:	4b06      	ldr	r3, [pc, #24]	@ (1004980c <LL_RCC_HSI_Disable+0x24>)
100497f2:	2102      	movs	r1, #2
100497f4:	430a      	orrs	r2, r1
100497f6:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100497f8:	4b04      	ldr	r3, [pc, #16]	@ (1004980c <LL_RCC_HSI_Disable+0x24>)
100497fa:	689a      	ldr	r2, [r3, #8]
100497fc:	4b03      	ldr	r3, [pc, #12]	@ (1004980c <LL_RCC_HSI_Disable+0x24>)
100497fe:	2104      	movs	r1, #4
10049800:	430a      	orrs	r2, r1
10049802:	609a      	str	r2, [r3, #8]
}
10049804:	46c0      	nop			@ (mov r8, r8)
10049806:	46bd      	mov	sp, r7
10049808:	bd80      	pop	{r7, pc}
1004980a:	46c0      	nop			@ (mov r8, r8)
1004980c:	48400000 	.word	0x48400000

10049810 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10049810:	b580      	push	{r7, lr}
10049812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10049814:	4b07      	ldr	r3, [pc, #28]	@ (10049834 <LL_RCC_HSI_IsReady+0x24>)
10049816:	681a      	ldr	r2, [r3, #0]
10049818:	2380      	movs	r3, #128	@ 0x80
1004981a:	00db      	lsls	r3, r3, #3
1004981c:	401a      	ands	r2, r3
1004981e:	2380      	movs	r3, #128	@ 0x80
10049820:	00db      	lsls	r3, r3, #3
10049822:	429a      	cmp	r2, r3
10049824:	d101      	bne.n	1004982a <LL_RCC_HSI_IsReady+0x1a>
10049826:	2301      	movs	r3, #1
10049828:	e000      	b.n	1004982c <LL_RCC_HSI_IsReady+0x1c>
1004982a:	2300      	movs	r3, #0
}
1004982c:	0018      	movs	r0, r3
1004982e:	46bd      	mov	sp, r7
10049830:	bd80      	pop	{r7, pc}
10049832:	46c0      	nop			@ (mov r8, r8)
10049834:	48400000 	.word	0x48400000

10049838 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10049838:	b580      	push	{r7, lr}
1004983a:	b082      	sub	sp, #8
1004983c:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004983e:	46c0      	nop			@ (mov r8, r8)
10049840:	4b0f      	ldr	r3, [pc, #60]	@ (10049880 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10049842:	681a      	ldr	r2, [r3, #0]
10049844:	2380      	movs	r3, #128	@ 0x80
10049846:	029b      	lsls	r3, r3, #10
10049848:	4013      	ands	r3, r2
1004984a:	d0f9      	beq.n	10049840 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004984c:	4b0c      	ldr	r3, [pc, #48]	@ (10049880 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004984e:	689a      	ldr	r2, [r3, #8]
10049850:	4b0b      	ldr	r3, [pc, #44]	@ (10049880 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10049852:	2102      	movs	r1, #2
10049854:	430a      	orrs	r2, r1
10049856:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10049858:	2300      	movs	r3, #0
1004985a:	607b      	str	r3, [r7, #4]
1004985c:	e003      	b.n	10049866 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004985e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10049860:	687b      	ldr	r3, [r7, #4]
10049862:	3301      	adds	r3, #1
10049864:	607b      	str	r3, [r7, #4]
10049866:	687b      	ldr	r3, [r7, #4]
10049868:	2b05      	cmp	r3, #5
1004986a:	ddf8      	ble.n	1004985e <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004986c:	4b04      	ldr	r3, [pc, #16]	@ (10049880 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004986e:	689a      	ldr	r2, [r3, #8]
10049870:	4b03      	ldr	r3, [pc, #12]	@ (10049880 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10049872:	2104      	movs	r1, #4
10049874:	430a      	orrs	r2, r1
10049876:	609a      	str	r2, [r3, #8]
}
10049878:	46c0      	nop			@ (mov r8, r8)
1004987a:	46bd      	mov	sp, r7
1004987c:	b002      	add	sp, #8
1004987e:	bd80      	pop	{r7, pc}
10049880:	48400000 	.word	0x48400000

10049884 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
10049884:	b580      	push	{r7, lr}
10049886:	b082      	sub	sp, #8
10049888:	af00      	add	r7, sp, #0
1004988a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004988c:	4b06      	ldr	r3, [pc, #24]	@ (100498a8 <LL_RCC_LSCO_SetSource+0x24>)
1004988e:	689b      	ldr	r3, [r3, #8]
10049890:	4a06      	ldr	r2, [pc, #24]	@ (100498ac <LL_RCC_LSCO_SetSource+0x28>)
10049892:	4013      	ands	r3, r2
10049894:	0019      	movs	r1, r3
10049896:	4b04      	ldr	r3, [pc, #16]	@ (100498a8 <LL_RCC_LSCO_SetSource+0x24>)
10049898:	687a      	ldr	r2, [r7, #4]
1004989a:	430a      	orrs	r2, r1
1004989c:	609a      	str	r2, [r3, #8]
}
1004989e:	46c0      	nop			@ (mov r8, r8)
100498a0:	46bd      	mov	sp, r7
100498a2:	b002      	add	sp, #8
100498a4:	bd80      	pop	{r7, pc}
100498a6:	46c0      	nop			@ (mov r8, r8)
100498a8:	48400000 	.word	0x48400000
100498ac:	fffe7fff 	.word	0xfffe7fff

100498b0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
100498b0:	b580      	push	{r7, lr}
100498b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
100498b4:	4b04      	ldr	r3, [pc, #16]	@ (100498c8 <LL_RCC_LSE_Enable+0x18>)
100498b6:	681a      	ldr	r2, [r3, #0]
100498b8:	4b03      	ldr	r3, [pc, #12]	@ (100498c8 <LL_RCC_LSE_Enable+0x18>)
100498ba:	2110      	movs	r1, #16
100498bc:	430a      	orrs	r2, r1
100498be:	601a      	str	r2, [r3, #0]
}
100498c0:	46c0      	nop			@ (mov r8, r8)
100498c2:	46bd      	mov	sp, r7
100498c4:	bd80      	pop	{r7, pc}
100498c6:	46c0      	nop			@ (mov r8, r8)
100498c8:	48400000 	.word	0x48400000

100498cc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
100498cc:	b580      	push	{r7, lr}
100498ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
100498d0:	4b04      	ldr	r3, [pc, #16]	@ (100498e4 <LL_RCC_LSE_Disable+0x18>)
100498d2:	681a      	ldr	r2, [r3, #0]
100498d4:	4b03      	ldr	r3, [pc, #12]	@ (100498e4 <LL_RCC_LSE_Disable+0x18>)
100498d6:	2110      	movs	r1, #16
100498d8:	438a      	bics	r2, r1
100498da:	601a      	str	r2, [r3, #0]
}
100498dc:	46c0      	nop			@ (mov r8, r8)
100498de:	46bd      	mov	sp, r7
100498e0:	bd80      	pop	{r7, pc}
100498e2:	46c0      	nop			@ (mov r8, r8)
100498e4:	48400000 	.word	0x48400000

100498e8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
100498e8:	b580      	push	{r7, lr}
100498ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
100498ec:	4b05      	ldr	r3, [pc, #20]	@ (10049904 <LL_RCC_LSE_IsReady+0x1c>)
100498ee:	681b      	ldr	r3, [r3, #0]
100498f0:	2220      	movs	r2, #32
100498f2:	4013      	ands	r3, r2
100498f4:	2b20      	cmp	r3, #32
100498f6:	d101      	bne.n	100498fc <LL_RCC_LSE_IsReady+0x14>
100498f8:	2301      	movs	r3, #1
100498fa:	e000      	b.n	100498fe <LL_RCC_LSE_IsReady+0x16>
100498fc:	2300      	movs	r3, #0
}
100498fe:	0018      	movs	r0, r3
10049900:	46bd      	mov	sp, r7
10049902:	bd80      	pop	{r7, pc}
10049904:	48400000 	.word	0x48400000

10049908 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10049908:	b580      	push	{r7, lr}
1004990a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004990c:	4b04      	ldr	r3, [pc, #16]	@ (10049920 <LL_RCC_LSE_EnableBypass+0x18>)
1004990e:	681a      	ldr	r2, [r3, #0]
10049910:	4b03      	ldr	r3, [pc, #12]	@ (10049920 <LL_RCC_LSE_EnableBypass+0x18>)
10049912:	2140      	movs	r1, #64	@ 0x40
10049914:	430a      	orrs	r2, r1
10049916:	601a      	str	r2, [r3, #0]
}
10049918:	46c0      	nop			@ (mov r8, r8)
1004991a:	46bd      	mov	sp, r7
1004991c:	bd80      	pop	{r7, pc}
1004991e:	46c0      	nop			@ (mov r8, r8)
10049920:	48400000 	.word	0x48400000

10049924 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10049924:	b580      	push	{r7, lr}
10049926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10049928:	4b04      	ldr	r3, [pc, #16]	@ (1004993c <LL_RCC_LSE_DisableBypass+0x18>)
1004992a:	681a      	ldr	r2, [r3, #0]
1004992c:	4b03      	ldr	r3, [pc, #12]	@ (1004993c <LL_RCC_LSE_DisableBypass+0x18>)
1004992e:	2140      	movs	r1, #64	@ 0x40
10049930:	438a      	bics	r2, r1
10049932:	601a      	str	r2, [r3, #0]
}
10049934:	46c0      	nop			@ (mov r8, r8)
10049936:	46bd      	mov	sp, r7
10049938:	bd80      	pop	{r7, pc}
1004993a:	46c0      	nop			@ (mov r8, r8)
1004993c:	48400000 	.word	0x48400000

10049940 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10049940:	b580      	push	{r7, lr}
10049942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10049944:	4b05      	ldr	r3, [pc, #20]	@ (1004995c <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10049946:	681b      	ldr	r3, [r3, #0]
10049948:	2240      	movs	r2, #64	@ 0x40
1004994a:	4013      	ands	r3, r2
1004994c:	2b40      	cmp	r3, #64	@ 0x40
1004994e:	d101      	bne.n	10049954 <LL_RCC_LSE_IsBypassEnabled+0x14>
10049950:	2301      	movs	r3, #1
10049952:	e000      	b.n	10049956 <LL_RCC_LSE_IsBypassEnabled+0x16>
10049954:	2300      	movs	r3, #0
}
10049956:	0018      	movs	r0, r3
10049958:	46bd      	mov	sp, r7
1004995a:	bd80      	pop	{r7, pc}
1004995c:	48400000 	.word	0x48400000

10049960 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10049960:	b580      	push	{r7, lr}
10049962:	b082      	sub	sp, #8
10049964:	af00      	add	r7, sp, #0
10049966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10049968:	4b06      	ldr	r3, [pc, #24]	@ (10049984 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004996a:	68db      	ldr	r3, [r3, #12]
1004996c:	2260      	movs	r2, #96	@ 0x60
1004996e:	4393      	bics	r3, r2
10049970:	0019      	movs	r1, r3
10049972:	4b04      	ldr	r3, [pc, #16]	@ (10049984 <LL_RCC_LSE_SetDriveCapability+0x24>)
10049974:	687a      	ldr	r2, [r7, #4]
10049976:	430a      	orrs	r2, r1
10049978:	60da      	str	r2, [r3, #12]
}
1004997a:	46c0      	nop			@ (mov r8, r8)
1004997c:	46bd      	mov	sp, r7
1004997e:	b002      	add	sp, #8
10049980:	bd80      	pop	{r7, pc}
10049982:	46c0      	nop			@ (mov r8, r8)
10049984:	48400000 	.word	0x48400000

10049988 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10049988:	b580      	push	{r7, lr}
1004998a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004998c:	4b04      	ldr	r3, [pc, #16]	@ (100499a0 <LL_RCC_LSI_Enable+0x18>)
1004998e:	681a      	ldr	r2, [r3, #0]
10049990:	4b03      	ldr	r3, [pc, #12]	@ (100499a0 <LL_RCC_LSI_Enable+0x18>)
10049992:	2104      	movs	r1, #4
10049994:	430a      	orrs	r2, r1
10049996:	601a      	str	r2, [r3, #0]
}
10049998:	46c0      	nop			@ (mov r8, r8)
1004999a:	46bd      	mov	sp, r7
1004999c:	bd80      	pop	{r7, pc}
1004999e:	46c0      	nop			@ (mov r8, r8)
100499a0:	48400000 	.word	0x48400000

100499a4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
100499a4:	b580      	push	{r7, lr}
100499a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
100499a8:	4b04      	ldr	r3, [pc, #16]	@ (100499bc <LL_RCC_LSI_Disable+0x18>)
100499aa:	681a      	ldr	r2, [r3, #0]
100499ac:	4b03      	ldr	r3, [pc, #12]	@ (100499bc <LL_RCC_LSI_Disable+0x18>)
100499ae:	2104      	movs	r1, #4
100499b0:	438a      	bics	r2, r1
100499b2:	601a      	str	r2, [r3, #0]
}
100499b4:	46c0      	nop			@ (mov r8, r8)
100499b6:	46bd      	mov	sp, r7
100499b8:	bd80      	pop	{r7, pc}
100499ba:	46c0      	nop			@ (mov r8, r8)
100499bc:	48400000 	.word	0x48400000

100499c0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
100499c0:	b580      	push	{r7, lr}
100499c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
100499c4:	4b05      	ldr	r3, [pc, #20]	@ (100499dc <LL_RCC_LSI_IsReady+0x1c>)
100499c6:	681b      	ldr	r3, [r3, #0]
100499c8:	2208      	movs	r2, #8
100499ca:	4013      	ands	r3, r2
100499cc:	2b08      	cmp	r3, #8
100499ce:	d101      	bne.n	100499d4 <LL_RCC_LSI_IsReady+0x14>
100499d0:	2301      	movs	r3, #1
100499d2:	e000      	b.n	100499d6 <LL_RCC_LSI_IsReady+0x16>
100499d4:	2300      	movs	r3, #0
}
100499d6:	0018      	movs	r0, r3
100499d8:	46bd      	mov	sp, r7
100499da:	bd80      	pop	{r7, pc}
100499dc:	48400000 	.word	0x48400000

100499e0 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
100499e0:	b580      	push	{r7, lr}
100499e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
100499e4:	4b04      	ldr	r3, [pc, #16]	@ (100499f8 <LL_RCC_RC64MPLL_Enable+0x18>)
100499e6:	681a      	ldr	r2, [r3, #0]
100499e8:	4b03      	ldr	r3, [pc, #12]	@ (100499f8 <LL_RCC_RC64MPLL_Enable+0x18>)
100499ea:	2180      	movs	r1, #128	@ 0x80
100499ec:	0189      	lsls	r1, r1, #6
100499ee:	430a      	orrs	r2, r1
100499f0:	601a      	str	r2, [r3, #0]
}
100499f2:	46c0      	nop			@ (mov r8, r8)
100499f4:	46bd      	mov	sp, r7
100499f6:	bd80      	pop	{r7, pc}
100499f8:	48400000 	.word	0x48400000

100499fc <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100499fc:	b580      	push	{r7, lr}
100499fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10049a00:	4b04      	ldr	r3, [pc, #16]	@ (10049a14 <LL_RCC_RC64MPLL_Disable+0x18>)
10049a02:	681a      	ldr	r2, [r3, #0]
10049a04:	4b03      	ldr	r3, [pc, #12]	@ (10049a14 <LL_RCC_RC64MPLL_Disable+0x18>)
10049a06:	4904      	ldr	r1, [pc, #16]	@ (10049a18 <LL_RCC_RC64MPLL_Disable+0x1c>)
10049a08:	400a      	ands	r2, r1
10049a0a:	601a      	str	r2, [r3, #0]
}
10049a0c:	46c0      	nop			@ (mov r8, r8)
10049a0e:	46bd      	mov	sp, r7
10049a10:	bd80      	pop	{r7, pc}
10049a12:	46c0      	nop			@ (mov r8, r8)
10049a14:	48400000 	.word	0x48400000
10049a18:	ffffdfff 	.word	0xffffdfff

10049a1c <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10049a1c:	b580      	push	{r7, lr}
10049a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10049a20:	4b07      	ldr	r3, [pc, #28]	@ (10049a40 <LL_RCC_RC64MPLL_IsReady+0x24>)
10049a22:	681a      	ldr	r2, [r3, #0]
10049a24:	2380      	movs	r3, #128	@ 0x80
10049a26:	01db      	lsls	r3, r3, #7
10049a28:	401a      	ands	r2, r3
10049a2a:	2380      	movs	r3, #128	@ 0x80
10049a2c:	01db      	lsls	r3, r3, #7
10049a2e:	429a      	cmp	r2, r3
10049a30:	d101      	bne.n	10049a36 <LL_RCC_RC64MPLL_IsReady+0x1a>
10049a32:	2301      	movs	r3, #1
10049a34:	e000      	b.n	10049a38 <LL_RCC_RC64MPLL_IsReady+0x1c>
10049a36:	2300      	movs	r3, #0
}
10049a38:	0018      	movs	r0, r3
10049a3a:	46bd      	mov	sp, r7
10049a3c:	bd80      	pop	{r7, pc}
10049a3e:	46c0      	nop			@ (mov r8, r8)
10049a40:	48400000 	.word	0x48400000

10049a44 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10049a44:	b580      	push	{r7, lr}
10049a46:	b082      	sub	sp, #8
10049a48:	af00      	add	r7, sp, #0
10049a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10049a4c:	4b06      	ldr	r3, [pc, #24]	@ (10049a68 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10049a4e:	689b      	ldr	r3, [r3, #8]
10049a50:	22e0      	movs	r2, #224	@ 0xe0
10049a52:	4393      	bics	r3, r2
10049a54:	0019      	movs	r1, r3
10049a56:	4b04      	ldr	r3, [pc, #16]	@ (10049a68 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10049a58:	687a      	ldr	r2, [r7, #4]
10049a5a:	430a      	orrs	r2, r1
10049a5c:	609a      	str	r2, [r3, #8]
}
10049a5e:	46c0      	nop			@ (mov r8, r8)
10049a60:	46bd      	mov	sp, r7
10049a62:	b002      	add	sp, #8
10049a64:	bd80      	pop	{r7, pc}
10049a66:	46c0      	nop			@ (mov r8, r8)
10049a68:	48400000 	.word	0x48400000

10049a6c <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10049a6c:	b580      	push	{r7, lr}
10049a6e:	b084      	sub	sp, #16
10049a70:	af00      	add	r7, sp, #0
10049a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10049a74:	687b      	ldr	r3, [r7, #4]
10049a76:	2b00      	cmp	r3, #0
10049a78:	d101      	bne.n	10049a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10049a7a:	2301      	movs	r3, #1
10049a7c:	e13c      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10049a7e:	687b      	ldr	r3, [r7, #4]
10049a80:	681b      	ldr	r3, [r3, #0]
10049a82:	2210      	movs	r2, #16
10049a84:	4013      	ands	r3, r2
10049a86:	d033      	beq.n	10049af0 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10049a88:	687b      	ldr	r3, [r7, #4]
10049a8a:	689b      	ldr	r3, [r3, #8]
10049a8c:	2b00      	cmp	r3, #0
10049a8e:	d102      	bne.n	10049a96 <HAL_RCC_OscConfig+0x2a>
10049a90:	f7ff fe96 	bl	100497c0 <LL_RCC_HSI_Enable>
10049a94:	e001      	b.n	10049a9a <HAL_RCC_OscConfig+0x2e>
10049a96:	f7ff fea7 	bl	100497e8 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10049a9a:	687b      	ldr	r3, [r7, #4]
10049a9c:	689b      	ldr	r3, [r3, #8]
10049a9e:	2b04      	cmp	r3, #4
10049aa0:	d113      	bne.n	10049aca <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049aa2:	f7fa ff65 	bl	10044970 <HAL_GetTick>
10049aa6:	0003      	movs	r3, r0
10049aa8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10049aaa:	e008      	b.n	10049abe <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049aac:	f7fa ff60 	bl	10044970 <HAL_GetTick>
10049ab0:	0002      	movs	r2, r0
10049ab2:	68fb      	ldr	r3, [r7, #12]
10049ab4:	1ad3      	subs	r3, r2, r3
10049ab6:	2b64      	cmp	r3, #100	@ 0x64
10049ab8:	d901      	bls.n	10049abe <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10049aba:	2303      	movs	r3, #3
10049abc:	e11c      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10049abe:	f7ff fea7 	bl	10049810 <LL_RCC_HSI_IsReady>
10049ac2:	0003      	movs	r3, r0
10049ac4:	2b01      	cmp	r3, #1
10049ac6:	d0f1      	beq.n	10049aac <HAL_RCC_OscConfig+0x40>
10049ac8:	e012      	b.n	10049af0 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049aca:	f7fa ff51 	bl	10044970 <HAL_GetTick>
10049ace:	0003      	movs	r3, r0
10049ad0:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10049ad2:	e008      	b.n	10049ae6 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049ad4:	f7fa ff4c 	bl	10044970 <HAL_GetTick>
10049ad8:	0002      	movs	r2, r0
10049ada:	68fb      	ldr	r3, [r7, #12]
10049adc:	1ad3      	subs	r3, r2, r3
10049ade:	2b64      	cmp	r3, #100	@ 0x64
10049ae0:	d901      	bls.n	10049ae6 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10049ae2:	2303      	movs	r3, #3
10049ae4:	e108      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
10049ae6:	f7ff fe93 	bl	10049810 <LL_RCC_HSI_IsReady>
10049aea:	0003      	movs	r3, r0
10049aec:	2b01      	cmp	r3, #1
10049aee:	d1f1      	bne.n	10049ad4 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10049af0:	687b      	ldr	r3, [r7, #4]
10049af2:	681b      	ldr	r3, [r3, #0]
10049af4:	2201      	movs	r2, #1
10049af6:	4013      	ands	r3, r2
10049af8:	d039      	beq.n	10049b6e <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
10049afa:	2020      	movs	r0, #32
10049afc:	f7ff fe2a 	bl	10049754 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10049b00:	2030      	movs	r0, #48	@ 0x30
10049b02:	f7ff fe47 	bl	10049794 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10049b06:	687b      	ldr	r3, [r7, #4]
10049b08:	685a      	ldr	r2, [r3, #4]
10049b0a:	2380      	movs	r3, #128	@ 0x80
10049b0c:	025b      	lsls	r3, r3, #9
10049b0e:	429a      	cmp	r2, r3
10049b10:	d102      	bne.n	10049b18 <HAL_RCC_OscConfig+0xac>
10049b12:	f7ff fded 	bl	100496f0 <LL_RCC_HSE_Enable>
10049b16:	e001      	b.n	10049b1c <HAL_RCC_OscConfig+0xb0>
10049b18:	f7ff fdf8 	bl	1004970c <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
10049b1c:	687b      	ldr	r3, [r7, #4]
10049b1e:	685b      	ldr	r3, [r3, #4]
10049b20:	2b00      	cmp	r3, #0
10049b22:	d012      	beq.n	10049b4a <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049b24:	f7fa ff24 	bl	10044970 <HAL_GetTick>
10049b28:	0003      	movs	r3, r0
10049b2a:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
10049b2c:	e008      	b.n	10049b40 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049b2e:	f7fa ff1f 	bl	10044970 <HAL_GetTick>
10049b32:	0002      	movs	r2, r0
10049b34:	68fb      	ldr	r3, [r7, #12]
10049b36:	1ad3      	subs	r3, r2, r3
10049b38:	2b64      	cmp	r3, #100	@ 0x64
10049b3a:	d901      	bls.n	10049b40 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
10049b3c:	2303      	movs	r3, #3
10049b3e:	e0db      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
10049b40:	f7ff fdf4 	bl	1004972c <LL_RCC_HSE_IsReady>
10049b44:	1e03      	subs	r3, r0, #0
10049b46:	d0f2      	beq.n	10049b2e <HAL_RCC_OscConfig+0xc2>
10049b48:	e011      	b.n	10049b6e <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049b4a:	f7fa ff11 	bl	10044970 <HAL_GetTick>
10049b4e:	0003      	movs	r3, r0
10049b50:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
10049b52:	e008      	b.n	10049b66 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049b54:	f7fa ff0c 	bl	10044970 <HAL_GetTick>
10049b58:	0002      	movs	r2, r0
10049b5a:	68fb      	ldr	r3, [r7, #12]
10049b5c:	1ad3      	subs	r3, r2, r3
10049b5e:	2b64      	cmp	r3, #100	@ 0x64
10049b60:	d901      	bls.n	10049b66 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
10049b62:	2303      	movs	r3, #3
10049b64:	e0c8      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
10049b66:	f7ff fde1 	bl	1004972c <LL_RCC_HSE_IsReady>
10049b6a:	1e03      	subs	r3, r0, #0
10049b6c:	d1f2      	bne.n	10049b54 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10049b6e:	687b      	ldr	r3, [r7, #4]
10049b70:	681b      	ldr	r3, [r3, #0]
10049b72:	2204      	movs	r2, #4
10049b74:	4013      	ands	r3, r2
10049b76:	d03a      	beq.n	10049bee <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10049b78:	687b      	ldr	r3, [r7, #4]
10049b7a:	691b      	ldr	r3, [r3, #16]
10049b7c:	2b00      	cmp	r3, #0
10049b7e:	d022      	beq.n	10049bc6 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10049b80:	f7ff ff10 	bl	100499a4 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10049b84:	46c0      	nop			@ (mov r8, r8)
10049b86:	f7ff ff1b 	bl	100499c0 <LL_RCC_LSI_IsReady>
10049b8a:	1e03      	subs	r3, r0, #0
10049b8c:	d1fb      	bne.n	10049b86 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10049b8e:	f7ff fe9d 	bl	100498cc <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
10049b92:	2380      	movs	r3, #128	@ 0x80
10049b94:	025b      	lsls	r3, r3, #9
10049b96:	0018      	movs	r0, r3
10049b98:	f7ff fe74 	bl	10049884 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10049b9c:	f7ff fef4 	bl	10049988 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049ba0:	f7fa fee6 	bl	10044970 <HAL_GetTick>
10049ba4:	0003      	movs	r3, r0
10049ba6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10049ba8:	e008      	b.n	10049bbc <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10049baa:	f7fa fee1 	bl	10044970 <HAL_GetTick>
10049bae:	0002      	movs	r2, r0
10049bb0:	68fb      	ldr	r3, [r7, #12]
10049bb2:	1ad3      	subs	r3, r2, r3
10049bb4:	2b02      	cmp	r3, #2
10049bb6:	d901      	bls.n	10049bbc <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10049bb8:	2303      	movs	r3, #3
10049bba:	e09d      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10049bbc:	f7ff ff00 	bl	100499c0 <LL_RCC_LSI_IsReady>
10049bc0:	1e03      	subs	r3, r0, #0
10049bc2:	d0f2      	beq.n	10049baa <HAL_RCC_OscConfig+0x13e>
10049bc4:	e013      	b.n	10049bee <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10049bc6:	f7ff feed 	bl	100499a4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049bca:	f7fa fed1 	bl	10044970 <HAL_GetTick>
10049bce:	0003      	movs	r3, r0
10049bd0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10049bd2:	e008      	b.n	10049be6 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10049bd4:	f7fa fecc 	bl	10044970 <HAL_GetTick>
10049bd8:	0002      	movs	r2, r0
10049bda:	68fb      	ldr	r3, [r7, #12]
10049bdc:	1ad3      	subs	r3, r2, r3
10049bde:	2b02      	cmp	r3, #2
10049be0:	d901      	bls.n	10049be6 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10049be2:	2303      	movs	r3, #3
10049be4:	e088      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10049be6:	f7ff feeb 	bl	100499c0 <LL_RCC_LSI_IsReady>
10049bea:	1e03      	subs	r3, r0, #0
10049bec:	d1f2      	bne.n	10049bd4 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10049bee:	687b      	ldr	r3, [r7, #4]
10049bf0:	681b      	ldr	r3, [r3, #0]
10049bf2:	2202      	movs	r2, #2
10049bf4:	4013      	ands	r3, r2
10049bf6:	d047      	beq.n	10049c88 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10049bf8:	f7ff fed4 	bl	100499a4 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10049bfc:	f7ff fe66 	bl	100498cc <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10049c00:	46c0      	nop			@ (mov r8, r8)
10049c02:	f7ff fe71 	bl	100498e8 <LL_RCC_LSE_IsReady>
10049c06:	1e03      	subs	r3, r0, #0
10049c08:	d1fb      	bne.n	10049c02 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
10049c0a:	23c0      	movs	r3, #192	@ 0xc0
10049c0c:	019b      	lsls	r3, r3, #6
10049c0e:	0018      	movs	r0, r3
10049c10:	f7ff fd56 	bl	100496c0 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10049c14:	2380      	movs	r3, #128	@ 0x80
10049c16:	021b      	lsls	r3, r3, #8
10049c18:	0018      	movs	r0, r3
10049c1a:	f7ff fe33 	bl	10049884 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
10049c1e:	2020      	movs	r0, #32
10049c20:	f7ff fe9e 	bl	10049960 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10049c24:	687b      	ldr	r3, [r7, #4]
10049c26:	68db      	ldr	r3, [r3, #12]
10049c28:	2b10      	cmp	r3, #16
10049c2a:	d102      	bne.n	10049c32 <HAL_RCC_OscConfig+0x1c6>
10049c2c:	f7ff fe40 	bl	100498b0 <LL_RCC_LSE_Enable>
10049c30:	e001      	b.n	10049c36 <HAL_RCC_OscConfig+0x1ca>
10049c32:	f7ff fe4b 	bl	100498cc <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
10049c36:	687b      	ldr	r3, [r7, #4]
10049c38:	68db      	ldr	r3, [r3, #12]
10049c3a:	2b00      	cmp	r3, #0
10049c3c:	d012      	beq.n	10049c64 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049c3e:	f7fa fe97 	bl	10044970 <HAL_GetTick>
10049c42:	0003      	movs	r3, r0
10049c44:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10049c46:	e008      	b.n	10049c5a <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049c48:	f7fa fe92 	bl	10044970 <HAL_GetTick>
10049c4c:	0002      	movs	r2, r0
10049c4e:	68fb      	ldr	r3, [r7, #12]
10049c50:	1ad3      	subs	r3, r2, r3
10049c52:	2b64      	cmp	r3, #100	@ 0x64
10049c54:	d901      	bls.n	10049c5a <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
10049c56:	2303      	movs	r3, #3
10049c58:	e04e      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10049c5a:	f7ff fe45 	bl	100498e8 <LL_RCC_LSE_IsReady>
10049c5e:	1e03      	subs	r3, r0, #0
10049c60:	d0f2      	beq.n	10049c48 <HAL_RCC_OscConfig+0x1dc>
10049c62:	e011      	b.n	10049c88 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049c64:	f7fa fe84 	bl	10044970 <HAL_GetTick>
10049c68:	0003      	movs	r3, r0
10049c6a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10049c6c:	e008      	b.n	10049c80 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049c6e:	f7fa fe7f 	bl	10044970 <HAL_GetTick>
10049c72:	0002      	movs	r2, r0
10049c74:	68fb      	ldr	r3, [r7, #12]
10049c76:	1ad3      	subs	r3, r2, r3
10049c78:	2b64      	cmp	r3, #100	@ 0x64
10049c7a:	d901      	bls.n	10049c80 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10049c7c:	2303      	movs	r3, #3
10049c7e:	e03b      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10049c80:	f7ff fe32 	bl	100498e8 <LL_RCC_LSE_IsReady>
10049c84:	1e03      	subs	r3, r0, #0
10049c86:	d1f2      	bne.n	10049c6e <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10049c88:	687b      	ldr	r3, [r7, #4]
10049c8a:	681b      	ldr	r3, [r3, #0]
10049c8c:	2208      	movs	r2, #8
10049c8e:	4013      	ands	r3, r2
10049c90:	d031      	beq.n	10049cf6 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
10049c92:	687b      	ldr	r3, [r7, #4]
10049c94:	695b      	ldr	r3, [r3, #20]
10049c96:	2b40      	cmp	r3, #64	@ 0x40
10049c98:	d102      	bne.n	10049ca0 <HAL_RCC_OscConfig+0x234>
10049c9a:	f7ff fe35 	bl	10049908 <LL_RCC_LSE_EnableBypass>
10049c9e:	e001      	b.n	10049ca4 <HAL_RCC_OscConfig+0x238>
10049ca0:	f7ff fe40 	bl	10049924 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10049ca4:	687b      	ldr	r3, [r7, #4]
10049ca6:	695b      	ldr	r3, [r3, #20]
10049ca8:	2b00      	cmp	r3, #0
10049caa:	d012      	beq.n	10049cd2 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049cac:	f7fa fe60 	bl	10044970 <HAL_GetTick>
10049cb0:	0003      	movs	r3, r0
10049cb2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10049cb4:	e008      	b.n	10049cc8 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049cb6:	f7fa fe5b 	bl	10044970 <HAL_GetTick>
10049cba:	0002      	movs	r2, r0
10049cbc:	68fb      	ldr	r3, [r7, #12]
10049cbe:	1ad3      	subs	r3, r2, r3
10049cc0:	2b64      	cmp	r3, #100	@ 0x64
10049cc2:	d901      	bls.n	10049cc8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10049cc4:	2303      	movs	r3, #3
10049cc6:	e017      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10049cc8:	f7ff fe3a 	bl	10049940 <LL_RCC_LSE_IsBypassEnabled>
10049ccc:	1e03      	subs	r3, r0, #0
10049cce:	d0f2      	beq.n	10049cb6 <HAL_RCC_OscConfig+0x24a>
10049cd0:	e011      	b.n	10049cf6 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049cd2:	f7fa fe4d 	bl	10044970 <HAL_GetTick>
10049cd6:	0003      	movs	r3, r0
10049cd8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10049cda:	e008      	b.n	10049cee <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049cdc:	f7fa fe48 	bl	10044970 <HAL_GetTick>
10049ce0:	0002      	movs	r2, r0
10049ce2:	68fb      	ldr	r3, [r7, #12]
10049ce4:	1ad3      	subs	r3, r2, r3
10049ce6:	2b64      	cmp	r3, #100	@ 0x64
10049ce8:	d901      	bls.n	10049cee <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
10049cea:	2303      	movs	r3, #3
10049cec:	e004      	b.n	10049cf8 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10049cee:	f7ff fe27 	bl	10049940 <LL_RCC_LSE_IsBypassEnabled>
10049cf2:	1e03      	subs	r3, r0, #0
10049cf4:	d1f2      	bne.n	10049cdc <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
10049cf6:	2300      	movs	r3, #0
}
10049cf8:	0018      	movs	r0, r3
10049cfa:	46bd      	mov	sp, r7
10049cfc:	b004      	add	sp, #16
10049cfe:	bd80      	pop	{r7, pc}

10049d00 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10049d00:	b580      	push	{r7, lr}
10049d02:	b084      	sub	sp, #16
10049d04:	af00      	add	r7, sp, #0
10049d06:	6078      	str	r0, [r7, #4]
10049d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10049d0a:	687b      	ldr	r3, [r7, #4]
10049d0c:	2b00      	cmp	r3, #0
10049d0e:	d101      	bne.n	10049d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10049d10:	2301      	movs	r3, #1
10049d12:	e098      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10049d14:	4b4e      	ldr	r3, [pc, #312]	@ (10049e50 <HAL_RCC_ClockConfig+0x150>)
10049d16:	685b      	ldr	r3, [r3, #4]
10049d18:	2230      	movs	r2, #48	@ 0x30
10049d1a:	4393      	bics	r3, r2
10049d1c:	0019      	movs	r1, r3
10049d1e:	4b4c      	ldr	r3, [pc, #304]	@ (10049e50 <HAL_RCC_ClockConfig+0x150>)
10049d20:	683a      	ldr	r2, [r7, #0]
10049d22:	430a      	orrs	r2, r1
10049d24:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10049d26:	687b      	ldr	r3, [r7, #4]
10049d28:	681b      	ldr	r3, [r3, #0]
10049d2a:	2b02      	cmp	r3, #2
10049d2c:	d10e      	bne.n	10049d4c <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10049d2e:	f7ff fd47 	bl	100497c0 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10049d32:	f7ff fd6d 	bl	10049810 <LL_RCC_HSI_IsReady>
10049d36:	1e03      	subs	r3, r0, #0
10049d38:	d101      	bne.n	10049d3e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10049d3a:	2301      	movs	r3, #1
10049d3c:	e083      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10049d3e:	f7ff fe5d 	bl	100499fc <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10049d42:	687b      	ldr	r3, [r7, #4]
10049d44:	685b      	ldr	r3, [r3, #4]
10049d46:	0018      	movs	r0, r3
10049d48:	f7ff fe7c 	bl	10049a44 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10049d4c:	687b      	ldr	r3, [r7, #4]
10049d4e:	681b      	ldr	r3, [r3, #0]
10049d50:	2b00      	cmp	r3, #0
10049d52:	d124      	bne.n	10049d9e <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10049d54:	f7ff fd5c 	bl	10049810 <LL_RCC_HSI_IsReady>
10049d58:	1e03      	subs	r3, r0, #0
10049d5a:	d101      	bne.n	10049d60 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10049d5c:	2301      	movs	r3, #1
10049d5e:	e072      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10049d60:	f7ff fce4 	bl	1004972c <LL_RCC_HSE_IsReady>
10049d64:	1e03      	subs	r3, r0, #0
10049d66:	d101      	bne.n	10049d6c <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10049d68:	2301      	movs	r3, #1
10049d6a:	e06c      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10049d6c:	f7ff fe38 	bl	100499e0 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10049d70:	f7fa fdfe 	bl	10044970 <HAL_GetTick>
10049d74:	0003      	movs	r3, r0
10049d76:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10049d78:	e008      	b.n	10049d8c <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10049d7a:	f7fa fdf9 	bl	10044970 <HAL_GetTick>
10049d7e:	0002      	movs	r2, r0
10049d80:	68fb      	ldr	r3, [r7, #12]
10049d82:	1ad3      	subs	r3, r2, r3
10049d84:	2b02      	cmp	r3, #2
10049d86:	d901      	bls.n	10049d8c <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10049d88:	2303      	movs	r3, #3
10049d8a:	e05c      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10049d8c:	f7ff fe46 	bl	10049a1c <LL_RCC_RC64MPLL_IsReady>
10049d90:	1e03      	subs	r3, r0, #0
10049d92:	d0f2      	beq.n	10049d7a <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10049d94:	687b      	ldr	r3, [r7, #4]
10049d96:	685b      	ldr	r3, [r3, #4]
10049d98:	0018      	movs	r0, r3
10049d9a:	f7ff fe53 	bl	10049a44 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10049d9e:	687b      	ldr	r3, [r7, #4]
10049da0:	681b      	ldr	r3, [r3, #0]
10049da2:	2b01      	cmp	r3, #1
10049da4:	d117      	bne.n	10049dd6 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10049da6:	f7ff fd47 	bl	10049838 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10049daa:	f7ff fd31 	bl	10049810 <LL_RCC_HSI_IsReady>
10049dae:	1e03      	subs	r3, r0, #0
10049db0:	d001      	beq.n	10049db6 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10049db2:	2301      	movs	r3, #1
10049db4:	e047      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10049db6:	f7ff fcb9 	bl	1004972c <LL_RCC_HSE_IsReady>
10049dba:	1e03      	subs	r3, r0, #0
10049dbc:	d101      	bne.n	10049dc2 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10049dbe:	2301      	movs	r3, #1
10049dc0:	e041      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10049dc2:	4b24      	ldr	r3, [pc, #144]	@ (10049e54 <HAL_RCC_ClockConfig+0x154>)
10049dc4:	689b      	ldr	r3, [r3, #8]
10049dc6:	22e0      	movs	r2, #224	@ 0xe0
10049dc8:	4393      	bics	r3, r2
10049dca:	0019      	movs	r1, r3
10049dcc:	687b      	ldr	r3, [r7, #4]
10049dce:	685a      	ldr	r2, [r3, #4]
10049dd0:	4b20      	ldr	r3, [pc, #128]	@ (10049e54 <HAL_RCC_ClockConfig+0x154>)
10049dd2:	430a      	orrs	r2, r1
10049dd4:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10049dd6:	4b1e      	ldr	r3, [pc, #120]	@ (10049e50 <HAL_RCC_ClockConfig+0x150>)
10049dd8:	685b      	ldr	r3, [r3, #4]
10049dda:	2230      	movs	r2, #48	@ 0x30
10049ddc:	4013      	ands	r3, r2
10049dde:	683a      	ldr	r2, [r7, #0]
10049de0:	429a      	cmp	r2, r3
10049de2:	d01d      	beq.n	10049e20 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10049de4:	4b1a      	ldr	r3, [pc, #104]	@ (10049e50 <HAL_RCC_ClockConfig+0x150>)
10049de6:	685b      	ldr	r3, [r3, #4]
10049de8:	2230      	movs	r2, #48	@ 0x30
10049dea:	4393      	bics	r3, r2
10049dec:	0019      	movs	r1, r3
10049dee:	4b18      	ldr	r3, [pc, #96]	@ (10049e50 <HAL_RCC_ClockConfig+0x150>)
10049df0:	683a      	ldr	r2, [r7, #0]
10049df2:	430a      	orrs	r2, r1
10049df4:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10049df6:	f7fa fdbb 	bl	10044970 <HAL_GetTick>
10049dfa:	0003      	movs	r3, r0
10049dfc:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10049dfe:	e008      	b.n	10049e12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10049e00:	f7fa fdb6 	bl	10044970 <HAL_GetTick>
10049e04:	0002      	movs	r2, r0
10049e06:	68fb      	ldr	r3, [r7, #12]
10049e08:	1ad3      	subs	r3, r2, r3
10049e0a:	2b02      	cmp	r3, #2
10049e0c:	d901      	bls.n	10049e12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10049e0e:	2303      	movs	r3, #3
10049e10:	e019      	b.n	10049e46 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10049e12:	4b0f      	ldr	r3, [pc, #60]	@ (10049e50 <HAL_RCC_ClockConfig+0x150>)
10049e14:	685b      	ldr	r3, [r3, #4]
10049e16:	2230      	movs	r2, #48	@ 0x30
10049e18:	4013      	ands	r3, r2
10049e1a:	683a      	ldr	r2, [r7, #0]
10049e1c:	429a      	cmp	r2, r3
10049e1e:	d1ef      	bne.n	10049e00 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10049e20:	2300      	movs	r3, #0
10049e22:	60bb      	str	r3, [r7, #8]
10049e24:	e003      	b.n	10049e2e <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10049e26:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10049e28:	68bb      	ldr	r3, [r7, #8]
10049e2a:	3301      	adds	r3, #1
10049e2c:	60bb      	str	r3, [r7, #8]
10049e2e:	68bb      	ldr	r3, [r7, #8]
10049e30:	2b05      	cmp	r3, #5
10049e32:	ddf8      	ble.n	10049e26 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10049e34:	f7fa fb30 	bl	10044498 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10049e38:	f7fa fda4 	bl	10044984 <HAL_GetTickPrio>
10049e3c:	0003      	movs	r3, r0
10049e3e:	0018      	movs	r0, r3
10049e40:	f7fa fd3c 	bl	100448bc <HAL_InitTick>
10049e44:	0003      	movs	r3, r0
}
10049e46:	0018      	movs	r0, r3
10049e48:	46bd      	mov	sp, r7
10049e4a:	b004      	add	sp, #16
10049e4c:	bd80      	pop	{r7, pc}
10049e4e:	46c0      	nop			@ (mov r8, r8)
10049e50:	40001000 	.word	0x40001000
10049e54:	48400000 	.word	0x48400000

10049e58 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10049e58:	b580      	push	{r7, lr}
10049e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10049e5c:	4b02      	ldr	r3, [pc, #8]	@ (10049e68 <HAL_RCC_GetSysClockFreq+0x10>)
10049e5e:	681b      	ldr	r3, [r3, #0]
}
10049e60:	0018      	movs	r0, r3
10049e62:	46bd      	mov	sp, r7
10049e64:	bd80      	pop	{r7, pc}
10049e66:	46c0      	nop			@ (mov r8, r8)
10049e68:	200010f4 	.word	0x200010f4

10049e6c <LL_RCC_HSE_IsReady>:
{
10049e6c:	b580      	push	{r7, lr}
10049e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10049e70:	4b07      	ldr	r3, [pc, #28]	@ (10049e90 <LL_RCC_HSE_IsReady+0x24>)
10049e72:	681a      	ldr	r2, [r3, #0]
10049e74:	2380      	movs	r3, #128	@ 0x80
10049e76:	029b      	lsls	r3, r3, #10
10049e78:	401a      	ands	r2, r3
10049e7a:	2380      	movs	r3, #128	@ 0x80
10049e7c:	029b      	lsls	r3, r3, #10
10049e7e:	429a      	cmp	r2, r3
10049e80:	d101      	bne.n	10049e86 <LL_RCC_HSE_IsReady+0x1a>
10049e82:	2301      	movs	r3, #1
10049e84:	e000      	b.n	10049e88 <LL_RCC_HSE_IsReady+0x1c>
10049e86:	2300      	movs	r3, #0
}
10049e88:	0018      	movs	r0, r3
10049e8a:	46bd      	mov	sp, r7
10049e8c:	bd80      	pop	{r7, pc}
10049e8e:	46c0      	nop			@ (mov r8, r8)
10049e90:	48400000 	.word	0x48400000

10049e94 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10049e94:	b580      	push	{r7, lr}
10049e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10049e98:	4b05      	ldr	r3, [pc, #20]	@ (10049eb0 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10049e9a:	689b      	ldr	r3, [r3, #8]
10049e9c:	2208      	movs	r2, #8
10049e9e:	4013      	ands	r3, r2
10049ea0:	2b08      	cmp	r3, #8
10049ea2:	d101      	bne.n	10049ea8 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10049ea4:	2301      	movs	r3, #1
10049ea6:	e000      	b.n	10049eaa <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10049ea8:	2300      	movs	r3, #0
}
10049eaa:	0018      	movs	r0, r3
10049eac:	46bd      	mov	sp, r7
10049eae:	bd80      	pop	{r7, pc}
10049eb0:	48400000 	.word	0x48400000

10049eb4 <LL_RCC_LSCO_SetSource>:
{
10049eb4:	b580      	push	{r7, lr}
10049eb6:	b082      	sub	sp, #8
10049eb8:	af00      	add	r7, sp, #0
10049eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10049ebc:	4b06      	ldr	r3, [pc, #24]	@ (10049ed8 <LL_RCC_LSCO_SetSource+0x24>)
10049ebe:	689b      	ldr	r3, [r3, #8]
10049ec0:	4a06      	ldr	r2, [pc, #24]	@ (10049edc <LL_RCC_LSCO_SetSource+0x28>)
10049ec2:	4013      	ands	r3, r2
10049ec4:	0019      	movs	r1, r3
10049ec6:	4b04      	ldr	r3, [pc, #16]	@ (10049ed8 <LL_RCC_LSCO_SetSource+0x24>)
10049ec8:	687a      	ldr	r2, [r7, #4]
10049eca:	430a      	orrs	r2, r1
10049ecc:	609a      	str	r2, [r3, #8]
}
10049ece:	46c0      	nop			@ (mov r8, r8)
10049ed0:	46bd      	mov	sp, r7
10049ed2:	b002      	add	sp, #8
10049ed4:	bd80      	pop	{r7, pc}
10049ed6:	46c0      	nop			@ (mov r8, r8)
10049ed8:	48400000 	.word	0x48400000
10049edc:	fffe7fff 	.word	0xfffe7fff

10049ee0 <LL_RCC_LSCO_GetSource>:
{
10049ee0:	b580      	push	{r7, lr}
10049ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10049ee4:	4b03      	ldr	r3, [pc, #12]	@ (10049ef4 <LL_RCC_LSCO_GetSource+0x14>)
10049ee6:	689a      	ldr	r2, [r3, #8]
10049ee8:	23c0      	movs	r3, #192	@ 0xc0
10049eea:	025b      	lsls	r3, r3, #9
10049eec:	4013      	ands	r3, r2
}
10049eee:	0018      	movs	r0, r3
10049ef0:	46bd      	mov	sp, r7
10049ef2:	bd80      	pop	{r7, pc}
10049ef4:	48400000 	.word	0x48400000

10049ef8 <LL_RCC_SetRFClock>:
{
10049ef8:	b580      	push	{r7, lr}
10049efa:	b082      	sub	sp, #8
10049efc:	af00      	add	r7, sp, #0
10049efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10049f00:	4b06      	ldr	r3, [pc, #24]	@ (10049f1c <LL_RCC_SetRFClock+0x24>)
10049f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10049f04:	2204      	movs	r2, #4
10049f06:	4393      	bics	r3, r2
10049f08:	0019      	movs	r1, r3
10049f0a:	4b04      	ldr	r3, [pc, #16]	@ (10049f1c <LL_RCC_SetRFClock+0x24>)
10049f0c:	687a      	ldr	r2, [r7, #4]
10049f0e:	430a      	orrs	r2, r1
10049f10:	661a      	str	r2, [r3, #96]	@ 0x60
}
10049f12:	46c0      	nop			@ (mov r8, r8)
10049f14:	46bd      	mov	sp, r7
10049f16:	b002      	add	sp, #8
10049f18:	bd80      	pop	{r7, pc}
10049f1a:	46c0      	nop			@ (mov r8, r8)
10049f1c:	48400000 	.word	0x48400000

10049f20 <LL_RCC_GetRFClock>:
{
10049f20:	b580      	push	{r7, lr}
10049f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10049f24:	4b03      	ldr	r3, [pc, #12]	@ (10049f34 <LL_RCC_GetRFClock+0x14>)
10049f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10049f28:	2204      	movs	r2, #4
10049f2a:	4013      	ands	r3, r2
}
10049f2c:	0018      	movs	r0, r3
10049f2e:	46bd      	mov	sp, r7
10049f30:	bd80      	pop	{r7, pc}
10049f32:	46c0      	nop			@ (mov r8, r8)
10049f34:	48400000 	.word	0x48400000

10049f38 <LL_RCC_SetSMPSPrescaler>:
{
10049f38:	b580      	push	{r7, lr}
10049f3a:	b082      	sub	sp, #8
10049f3c:	af00      	add	r7, sp, #0
10049f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10049f40:	4b06      	ldr	r3, [pc, #24]	@ (10049f5c <LL_RCC_SetSMPSPrescaler+0x24>)
10049f42:	689b      	ldr	r3, [r3, #8]
10049f44:	4a06      	ldr	r2, [pc, #24]	@ (10049f60 <LL_RCC_SetSMPSPrescaler+0x28>)
10049f46:	4013      	ands	r3, r2
10049f48:	0019      	movs	r1, r3
10049f4a:	4b04      	ldr	r3, [pc, #16]	@ (10049f5c <LL_RCC_SetSMPSPrescaler+0x24>)
10049f4c:	687a      	ldr	r2, [r7, #4]
10049f4e:	430a      	orrs	r2, r1
10049f50:	609a      	str	r2, [r3, #8]
}
10049f52:	46c0      	nop			@ (mov r8, r8)
10049f54:	46bd      	mov	sp, r7
10049f56:	b002      	add	sp, #8
10049f58:	bd80      	pop	{r7, pc}
10049f5a:	46c0      	nop			@ (mov r8, r8)
10049f5c:	48400000 	.word	0x48400000
10049f60:	ffffefff 	.word	0xffffefff

10049f64 <LL_RCC_GetSMPSPrescaler>:
{
10049f64:	b580      	push	{r7, lr}
10049f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10049f68:	4b03      	ldr	r3, [pc, #12]	@ (10049f78 <LL_RCC_GetSMPSPrescaler+0x14>)
10049f6a:	689a      	ldr	r2, [r3, #8]
10049f6c:	2380      	movs	r3, #128	@ 0x80
10049f6e:	015b      	lsls	r3, r3, #5
10049f70:	4013      	ands	r3, r2
}
10049f72:	0018      	movs	r0, r3
10049f74:	46bd      	mov	sp, r7
10049f76:	bd80      	pop	{r7, pc}
10049f78:	48400000 	.word	0x48400000

10049f7c <LL_RCC_SetLPUARTClockSource>:
{
10049f7c:	b580      	push	{r7, lr}
10049f7e:	b082      	sub	sp, #8
10049f80:	af00      	add	r7, sp, #0
10049f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10049f84:	4b06      	ldr	r3, [pc, #24]	@ (10049fa0 <LL_RCC_SetLPUARTClockSource+0x24>)
10049f86:	689b      	ldr	r3, [r3, #8]
10049f88:	4a06      	ldr	r2, [pc, #24]	@ (10049fa4 <LL_RCC_SetLPUARTClockSource+0x28>)
10049f8a:	4013      	ands	r3, r2
10049f8c:	0019      	movs	r1, r3
10049f8e:	4b04      	ldr	r3, [pc, #16]	@ (10049fa0 <LL_RCC_SetLPUARTClockSource+0x24>)
10049f90:	687a      	ldr	r2, [r7, #4]
10049f92:	430a      	orrs	r2, r1
10049f94:	609a      	str	r2, [r3, #8]
}
10049f96:	46c0      	nop			@ (mov r8, r8)
10049f98:	46bd      	mov	sp, r7
10049f9a:	b002      	add	sp, #8
10049f9c:	bd80      	pop	{r7, pc}
10049f9e:	46c0      	nop			@ (mov r8, r8)
10049fa0:	48400000 	.word	0x48400000
10049fa4:	ffffdfff 	.word	0xffffdfff

10049fa8 <LL_RCC_GetLPUARTClockSource>:
{
10049fa8:	b580      	push	{r7, lr}
10049faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10049fac:	4b03      	ldr	r3, [pc, #12]	@ (10049fbc <LL_RCC_GetLPUARTClockSource+0x14>)
10049fae:	689a      	ldr	r2, [r3, #8]
10049fb0:	2380      	movs	r3, #128	@ 0x80
10049fb2:	019b      	lsls	r3, r3, #6
10049fb4:	4013      	ands	r3, r2
}
10049fb6:	0018      	movs	r0, r3
10049fb8:	46bd      	mov	sp, r7
10049fba:	bd80      	pop	{r7, pc}
10049fbc:	48400000 	.word	0x48400000

10049fc0 <LL_RCC_SetSPI3I2SClockSource>:
{
10049fc0:	b580      	push	{r7, lr}
10049fc2:	b082      	sub	sp, #8
10049fc4:	af00      	add	r7, sp, #0
10049fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10049fc8:	4b06      	ldr	r3, [pc, #24]	@ (10049fe4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10049fca:	689b      	ldr	r3, [r3, #8]
10049fcc:	4a06      	ldr	r2, [pc, #24]	@ (10049fe8 <LL_RCC_SetSPI3I2SClockSource+0x28>)
10049fce:	4013      	ands	r3, r2
10049fd0:	0019      	movs	r1, r3
10049fd2:	4b04      	ldr	r3, [pc, #16]	@ (10049fe4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10049fd4:	687a      	ldr	r2, [r7, #4]
10049fd6:	430a      	orrs	r2, r1
10049fd8:	609a      	str	r2, [r3, #8]
}
10049fda:	46c0      	nop			@ (mov r8, r8)
10049fdc:	46bd      	mov	sp, r7
10049fde:	b002      	add	sp, #8
10049fe0:	bd80      	pop	{r7, pc}
10049fe2:	46c0      	nop			@ (mov r8, r8)
10049fe4:	48400000 	.word	0x48400000
10049fe8:	ff3fffff 	.word	0xff3fffff

10049fec <LL_RCC_GetSPI3I2SClockSource>:
{
10049fec:	b580      	push	{r7, lr}
10049fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10049ff0:	4b03      	ldr	r3, [pc, #12]	@ (1004a000 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10049ff2:	689a      	ldr	r2, [r3, #8]
10049ff4:	23c0      	movs	r3, #192	@ 0xc0
10049ff6:	041b      	lsls	r3, r3, #16
10049ff8:	4013      	ands	r3, r2
}
10049ffa:	0018      	movs	r0, r3
10049ffc:	46bd      	mov	sp, r7
10049ffe:	bd80      	pop	{r7, pc}
1004a000:	48400000 	.word	0x48400000

1004a004 <LL_RCC_RC64MPLL_IsReady>:
{
1004a004:	b580      	push	{r7, lr}
1004a006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004a008:	4b07      	ldr	r3, [pc, #28]	@ (1004a028 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004a00a:	681a      	ldr	r2, [r3, #0]
1004a00c:	2380      	movs	r3, #128	@ 0x80
1004a00e:	01db      	lsls	r3, r3, #7
1004a010:	401a      	ands	r2, r3
1004a012:	2380      	movs	r3, #128	@ 0x80
1004a014:	01db      	lsls	r3, r3, #7
1004a016:	429a      	cmp	r2, r3
1004a018:	d101      	bne.n	1004a01e <LL_RCC_RC64MPLL_IsReady+0x1a>
1004a01a:	2301      	movs	r3, #1
1004a01c:	e000      	b.n	1004a020 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004a01e:	2300      	movs	r3, #0
}
1004a020:	0018      	movs	r0, r3
1004a022:	46bd      	mov	sp, r7
1004a024:	bd80      	pop	{r7, pc}
1004a026:	46c0      	nop			@ (mov r8, r8)
1004a028:	48400000 	.word	0x48400000

1004a02c <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004a02c:	b580      	push	{r7, lr}
1004a02e:	b082      	sub	sp, #8
1004a030:	af00      	add	r7, sp, #0
1004a032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004a034:	687b      	ldr	r3, [r7, #4]
1004a036:	681b      	ldr	r3, [r3, #0]
1004a038:	2201      	movs	r2, #1
1004a03a:	4013      	ands	r3, r2
1004a03c:	d004      	beq.n	1004a048 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004a03e:	687b      	ldr	r3, [r7, #4]
1004a040:	691b      	ldr	r3, [r3, #16]
1004a042:	0018      	movs	r0, r3
1004a044:	f7ff ff58 	bl	10049ef8 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004a048:	687b      	ldr	r3, [r7, #4]
1004a04a:	681b      	ldr	r3, [r3, #0]
1004a04c:	2202      	movs	r2, #2
1004a04e:	4013      	ands	r3, r2
1004a050:	d004      	beq.n	1004a05c <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004a052:	687b      	ldr	r3, [r7, #4]
1004a054:	695b      	ldr	r3, [r3, #20]
1004a056:	0018      	movs	r0, r3
1004a058:	f7ff ff6e 	bl	10049f38 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004a05c:	687b      	ldr	r3, [r7, #4]
1004a05e:	681b      	ldr	r3, [r3, #0]
1004a060:	2208      	movs	r2, #8
1004a062:	4013      	ands	r3, r2
1004a064:	d004      	beq.n	1004a070 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004a066:	687b      	ldr	r3, [r7, #4]
1004a068:	685b      	ldr	r3, [r3, #4]
1004a06a:	0018      	movs	r0, r3
1004a06c:	f7ff ffa8 	bl	10049fc0 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004a070:	687b      	ldr	r3, [r7, #4]
1004a072:	681b      	ldr	r3, [r3, #0]
1004a074:	2210      	movs	r2, #16
1004a076:	4013      	ands	r3, r2
1004a078:	d004      	beq.n	1004a084 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004a07a:	687b      	ldr	r3, [r7, #4]
1004a07c:	68db      	ldr	r3, [r3, #12]
1004a07e:	0018      	movs	r0, r3
1004a080:	f7ff ff7c 	bl	10049f7c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004a084:	687b      	ldr	r3, [r7, #4]
1004a086:	689b      	ldr	r3, [r3, #8]
1004a088:	2220      	movs	r2, #32
1004a08a:	4013      	ands	r3, r2
1004a08c:	d004      	beq.n	1004a098 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004a08e:	687b      	ldr	r3, [r7, #4]
1004a090:	689b      	ldr	r3, [r3, #8]
1004a092:	0018      	movs	r0, r3
1004a094:	f7ff ff0e 	bl	10049eb4 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004a098:	2300      	movs	r3, #0
}
1004a09a:	0018      	movs	r0, r3
1004a09c:	46bd      	mov	sp, r7
1004a09e:	b002      	add	sp, #8
1004a0a0:	bd80      	pop	{r7, pc}
	...

1004a0a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004a0a4:	b580      	push	{r7, lr}
1004a0a6:	b084      	sub	sp, #16
1004a0a8:	af00      	add	r7, sp, #0
1004a0aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
1004a0ac:	2300      	movs	r3, #0
1004a0ae:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004a0b0:	687b      	ldr	r3, [r7, #4]
1004a0b2:	2b20      	cmp	r3, #32
1004a0b4:	d900      	bls.n	1004a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004a0b6:	e07b      	b.n	1004a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004a0b8:	687b      	ldr	r3, [r7, #4]
1004a0ba:	009a      	lsls	r2, r3, #2
1004a0bc:	4b40      	ldr	r3, [pc, #256]	@ (1004a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004a0be:	18d3      	adds	r3, r2, r3
1004a0c0:	681b      	ldr	r3, [r3, #0]
1004a0c2:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
1004a0c4:	f7ff ff2c 	bl	10049f20 <LL_RCC_GetRFClock>
1004a0c8:	1e03      	subs	r3, r0, #0
1004a0ca:	d002      	beq.n	1004a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
1004a0cc:	2b04      	cmp	r3, #4
1004a0ce:	d003      	beq.n	1004a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004a0d0:	e071      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004a0d2:	4b3c      	ldr	r3, [pc, #240]	@ (1004a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004a0d4:	60fb      	str	r3, [r7, #12]
          break;
1004a0d6:	e002      	b.n	1004a0de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004a0d8:	4b3b      	ldr	r3, [pc, #236]	@ (1004a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004a0da:	60fb      	str	r3, [r7, #12]
          break;
1004a0dc:	46c0      	nop			@ (mov r8, r8)
      break;
1004a0de:	e06a      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004a0e0:	f7ff ff40 	bl	10049f64 <LL_RCC_GetSMPSPrescaler>
1004a0e4:	1e03      	subs	r3, r0, #0
1004a0e6:	d004      	beq.n	1004a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004a0e8:	2280      	movs	r2, #128	@ 0x80
1004a0ea:	0152      	lsls	r2, r2, #5
1004a0ec:	4293      	cmp	r3, r2
1004a0ee:	d003      	beq.n	1004a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004a0f0:	e061      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004a0f2:	4b36      	ldr	r3, [pc, #216]	@ (1004a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1004a0f4:	60fb      	str	r3, [r7, #12]
          break;
1004a0f6:	e002      	b.n	1004a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004a0f8:	4b35      	ldr	r3, [pc, #212]	@ (1004a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004a0fa:	60fb      	str	r3, [r7, #12]
          break;
1004a0fc:	46c0      	nop			@ (mov r8, r8)
      break;
1004a0fe:	e05a      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004a100:	f7ff fec8 	bl	10049e94 <LL_RCC_DIRECT_HSE_IsEnabled>
1004a104:	1e03      	subs	r3, r0, #0
1004a106:	d005      	beq.n	1004a114 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004a108:	f7ff feb0 	bl	10049e6c <LL_RCC_HSE_IsReady>
1004a10c:	1e03      	subs	r3, r0, #0
1004a10e:	d107      	bne.n	1004a120 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004a110:	2300      	movs	r3, #0
1004a112:	e051      	b.n	1004a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004a114:	f7ff ff76 	bl	1004a004 <LL_RCC_RC64MPLL_IsReady>
1004a118:	1e03      	subs	r3, r0, #0
1004a11a:	d101      	bne.n	1004a120 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004a11c:	2300      	movs	r3, #0
1004a11e:	e04b      	b.n	1004a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1004a120:	f7ff ff64 	bl	10049fec <LL_RCC_GetSPI3I2SClockSource>
1004a124:	0003      	movs	r3, r0
1004a126:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004a128:	68bb      	ldr	r3, [r7, #8]
1004a12a:	2b00      	cmp	r3, #0
1004a12c:	d101      	bne.n	1004a132 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004a12e:	4b26      	ldr	r3, [pc, #152]	@ (1004a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004a130:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004a132:	68ba      	ldr	r2, [r7, #8]
1004a134:	2380      	movs	r3, #128	@ 0x80
1004a136:	03db      	lsls	r3, r3, #15
1004a138:	429a      	cmp	r2, r3
1004a13a:	d101      	bne.n	1004a140 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004a13c:	4b21      	ldr	r3, [pc, #132]	@ (1004a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004a13e:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1004a140:	68ba      	ldr	r2, [r7, #8]
1004a142:	2380      	movs	r3, #128	@ 0x80
1004a144:	041b      	lsls	r3, r3, #16
1004a146:	429a      	cmp	r2, r3
1004a148:	d134      	bne.n	1004a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004a14a:	4b22      	ldr	r3, [pc, #136]	@ (1004a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004a14c:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004a14e:	e031      	b.n	1004a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
1004a150:	f7ff ff2a 	bl	10049fa8 <LL_RCC_GetLPUARTClockSource>
1004a154:	0002      	movs	r2, r0
1004a156:	2380      	movs	r3, #128	@ 0x80
1004a158:	019b      	lsls	r3, r3, #6
1004a15a:	429a      	cmp	r2, r3
1004a15c:	d103      	bne.n	1004a166 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004a15e:	2380      	movs	r3, #128	@ 0x80
1004a160:	021b      	lsls	r3, r3, #8
1004a162:	60fb      	str	r3, [r7, #12]
          break;
1004a164:	e002      	b.n	1004a16c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004a166:	4b18      	ldr	r3, [pc, #96]	@ (1004a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004a168:	60fb      	str	r3, [r7, #12]
          break;
1004a16a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004a16c:	e023      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004a16e:	f7ff feb7 	bl	10049ee0 <LL_RCC_LSCO_GetSource>
1004a172:	0003      	movs	r3, r0
1004a174:	22c0      	movs	r2, #192	@ 0xc0
1004a176:	0252      	lsls	r2, r2, #9
1004a178:	4293      	cmp	r3, r2
1004a17a:	d014      	beq.n	1004a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004a17c:	22c0      	movs	r2, #192	@ 0xc0
1004a17e:	0252      	lsls	r2, r2, #9
1004a180:	4293      	cmp	r3, r2
1004a182:	d813      	bhi.n	1004a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004a184:	2280      	movs	r2, #128	@ 0x80
1004a186:	0212      	lsls	r2, r2, #8
1004a188:	4293      	cmp	r3, r2
1004a18a:	d004      	beq.n	1004a196 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004a18c:	2280      	movs	r2, #128	@ 0x80
1004a18e:	0252      	lsls	r2, r2, #9
1004a190:	4293      	cmp	r3, r2
1004a192:	d004      	beq.n	1004a19e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004a194:	e00a      	b.n	1004a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004a196:	2380      	movs	r3, #128	@ 0x80
1004a198:	021b      	lsls	r3, r3, #8
1004a19a:	60fb      	str	r3, [r7, #12]
          break;
1004a19c:	e007      	b.n	1004a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004a19e:	23fa      	movs	r3, #250	@ 0xfa
1004a1a0:	01db      	lsls	r3, r3, #7
1004a1a2:	60fb      	str	r3, [r7, #12]
          break;
1004a1a4:	e003      	b.n	1004a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (1004a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004a1a8:	60fb      	str	r3, [r7, #12]
          break;
1004a1aa:	e000      	b.n	1004a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
1004a1ac:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004a1ae:	e002      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004a1b0:	46c0      	nop			@ (mov r8, r8)
1004a1b2:	e000      	b.n	1004a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004a1b4:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004a1b6:	68fb      	ldr	r3, [r7, #12]
}
1004a1b8:	0018      	movs	r0, r3
1004a1ba:	46bd      	mov	sp, r7
1004a1bc:	b004      	add	sp, #16
1004a1be:	bd80      	pop	{r7, pc}
1004a1c0:	10065ca8 	.word	0x10065ca8
1004a1c4:	01e84800 	.word	0x01e84800
1004a1c8:	00f42400 	.word	0x00f42400
1004a1cc:	007a1200 	.word	0x007a1200
1004a1d0:	003d0900 	.word	0x003d0900
1004a1d4:	03d09000 	.word	0x03d09000
1004a1d8:	00007a12 	.word	0x00007a12

1004a1dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
1004a1dc:	b580      	push	{r7, lr}
1004a1de:	b082      	sub	sp, #8
1004a1e0:	af00      	add	r7, sp, #0
1004a1e2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
1004a1e4:	687b      	ldr	r3, [r7, #4]
1004a1e6:	2b00      	cmp	r3, #0
1004a1e8:	d101      	bne.n	1004a1ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
1004a1ea:	2301      	movs	r3, #1
1004a1ec:	e02d      	b.n	1004a24a <HAL_RNG_Init+0x6e>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined (RNG_CR_TST_CLK)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* RNG_CR_TST_CLK */

  if (hrng->State == HAL_RNG_STATE_RESET)
1004a1ee:	687b      	ldr	r3, [r7, #4]
1004a1f0:	7a5b      	ldrb	r3, [r3, #9]
1004a1f2:	b2db      	uxtb	r3, r3
1004a1f4:	2b00      	cmp	r3, #0
1004a1f6:	d106      	bne.n	1004a206 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
1004a1f8:	687b      	ldr	r3, [r7, #4]
1004a1fa:	2200      	movs	r2, #0
1004a1fc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
1004a1fe:	687b      	ldr	r3, [r7, #4]
1004a200:	0018      	movs	r0, r3
1004a202:	f7f9 fed3 	bl	10043fac <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
1004a206:	687b      	ldr	r3, [r7, #4]
1004a208:	2202      	movs	r2, #2
1004a20a:	725a      	strb	r2, [r3, #9]

  /* Reset the CR */
  hrng->Instance->CR = 0U;
1004a20c:	687b      	ldr	r3, [r7, #4]
1004a20e:	681b      	ldr	r3, [r3, #0]
1004a210:	2200      	movs	r2, #0
1004a212:	601a      	str	r2, [r3, #0]

#if defined (RNG_CR_TST_CLK)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_TST_CLK, hrng->Init.ClockErrorDetection);
1004a214:	687b      	ldr	r3, [r7, #4]
1004a216:	681b      	ldr	r3, [r3, #0]
1004a218:	681b      	ldr	r3, [r3, #0]
1004a21a:	2208      	movs	r2, #8
1004a21c:	4393      	bics	r3, r2
1004a21e:	0019      	movs	r1, r3
1004a220:	687b      	ldr	r3, [r7, #4]
1004a222:	685a      	ldr	r2, [r3, #4]
1004a224:	687b      	ldr	r3, [r7, #4]
1004a226:	681b      	ldr	r3, [r3, #0]
1004a228:	430a      	orrs	r2, r1
1004a22a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_TST_CLK */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
1004a22c:	687b      	ldr	r3, [r7, #4]
1004a22e:	681b      	ldr	r3, [r3, #0]
1004a230:	681a      	ldr	r2, [r3, #0]
1004a232:	687b      	ldr	r3, [r7, #4]
1004a234:	681b      	ldr	r3, [r3, #0]
1004a236:	2104      	movs	r1, #4
1004a238:	438a      	bics	r2, r1
1004a23a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
1004a23c:	687b      	ldr	r3, [r7, #4]
1004a23e:	2201      	movs	r2, #1
1004a240:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
1004a242:	687b      	ldr	r3, [r7, #4]
1004a244:	2200      	movs	r2, #0
1004a246:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
1004a248:	2300      	movs	r3, #0
}
1004a24a:	0018      	movs	r0, r3
1004a24c:	46bd      	mov	sp, r7
1004a24e:	b002      	add	sp, #8
1004a250:	bd80      	pop	{r7, pc}

1004a252 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
1004a252:	b580      	push	{r7, lr}
1004a254:	b082      	sub	sp, #8
1004a256:	af00      	add	r7, sp, #0
1004a258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1004a25a:	687b      	ldr	r3, [r7, #4]
1004a25c:	2b00      	cmp	r3, #0
1004a25e:	d101      	bne.n	1004a264 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1004a260:	2301      	movs	r3, #1
1004a262:	e036      	b.n	1004a2d2 <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
1004a264:	687b      	ldr	r3, [r7, #4]
1004a266:	2235      	movs	r2, #53	@ 0x35
1004a268:	5c9b      	ldrb	r3, [r3, r2]
1004a26a:	b2db      	uxtb	r3, r3
1004a26c:	2b00      	cmp	r3, #0
1004a26e:	d107      	bne.n	1004a280 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1004a270:	687b      	ldr	r3, [r7, #4]
1004a272:	2234      	movs	r2, #52	@ 0x34
1004a274:	2100      	movs	r1, #0
1004a276:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
1004a278:	687b      	ldr	r3, [r7, #4]
1004a27a:	0018      	movs	r0, r3
1004a27c:	f7f9 feaa 	bl	10043fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004a280:	687b      	ldr	r3, [r7, #4]
1004a282:	2235      	movs	r2, #53	@ 0x35
1004a284:	2102      	movs	r1, #2
1004a286:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
1004a288:	687b      	ldr	r3, [r7, #4]
1004a28a:	681a      	ldr	r2, [r3, #0]
1004a28c:	687b      	ldr	r3, [r7, #4]
1004a28e:	3304      	adds	r3, #4
1004a290:	0019      	movs	r1, r3
1004a292:	0010      	movs	r0, r2
1004a294:	f000 fa3a 	bl	1004a70c <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
1004a298:	687b      	ldr	r3, [r7, #4]
1004a29a:	223b      	movs	r2, #59	@ 0x3b
1004a29c:	2101      	movs	r1, #1
1004a29e:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004a2a0:	687b      	ldr	r3, [r7, #4]
1004a2a2:	2236      	movs	r2, #54	@ 0x36
1004a2a4:	2101      	movs	r1, #1
1004a2a6:	5499      	strb	r1, [r3, r2]
1004a2a8:	687b      	ldr	r3, [r7, #4]
1004a2aa:	2237      	movs	r2, #55	@ 0x37
1004a2ac:	2101      	movs	r1, #1
1004a2ae:	5499      	strb	r1, [r3, r2]
1004a2b0:	687b      	ldr	r3, [r7, #4]
1004a2b2:	2238      	movs	r2, #56	@ 0x38
1004a2b4:	2101      	movs	r1, #1
1004a2b6:	5499      	strb	r1, [r3, r2]
1004a2b8:	687b      	ldr	r3, [r7, #4]
1004a2ba:	2239      	movs	r2, #57	@ 0x39
1004a2bc:	2101      	movs	r1, #1
1004a2be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004a2c0:	687b      	ldr	r3, [r7, #4]
1004a2c2:	223a      	movs	r2, #58	@ 0x3a
1004a2c4:	2101      	movs	r1, #1
1004a2c6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1004a2c8:	687b      	ldr	r3, [r7, #4]
1004a2ca:	2235      	movs	r2, #53	@ 0x35
1004a2cc:	2101      	movs	r1, #1
1004a2ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a2d0:	2300      	movs	r3, #0
}
1004a2d2:	0018      	movs	r0, r3
1004a2d4:	46bd      	mov	sp, r7
1004a2d6:	b002      	add	sp, #8
1004a2d8:	bd80      	pop	{r7, pc}
	...

1004a2dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
1004a2dc:	b580      	push	{r7, lr}
1004a2de:	b084      	sub	sp, #16
1004a2e0:	af00      	add	r7, sp, #0
1004a2e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
1004a2e4:	687b      	ldr	r3, [r7, #4]
1004a2e6:	2235      	movs	r2, #53	@ 0x35
1004a2e8:	5c9b      	ldrb	r3, [r3, r2]
1004a2ea:	b2db      	uxtb	r3, r3
1004a2ec:	2b01      	cmp	r3, #1
1004a2ee:	d001      	beq.n	1004a2f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
1004a2f0:	2301      	movs	r3, #1
1004a2f2:	e030      	b.n	1004a356 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004a2f4:	687b      	ldr	r3, [r7, #4]
1004a2f6:	2235      	movs	r2, #53	@ 0x35
1004a2f8:	2102      	movs	r1, #2
1004a2fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
1004a2fc:	687b      	ldr	r3, [r7, #4]
1004a2fe:	681b      	ldr	r3, [r3, #0]
1004a300:	68da      	ldr	r2, [r3, #12]
1004a302:	687b      	ldr	r3, [r7, #4]
1004a304:	681b      	ldr	r3, [r3, #0]
1004a306:	2101      	movs	r1, #1
1004a308:	430a      	orrs	r2, r1
1004a30a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
1004a30c:	687b      	ldr	r3, [r7, #4]
1004a30e:	681b      	ldr	r3, [r3, #0]
1004a310:	4a13      	ldr	r2, [pc, #76]	@ (1004a360 <HAL_TIM_Base_Start_IT+0x84>)
1004a312:	4293      	cmp	r3, r2
1004a314:	d116      	bne.n	1004a344 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1004a316:	687b      	ldr	r3, [r7, #4]
1004a318:	681b      	ldr	r3, [r3, #0]
1004a31a:	689b      	ldr	r3, [r3, #8]
1004a31c:	4a11      	ldr	r2, [pc, #68]	@ (1004a364 <HAL_TIM_Base_Start_IT+0x88>)
1004a31e:	4013      	ands	r3, r2
1004a320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1004a322:	68fb      	ldr	r3, [r7, #12]
1004a324:	2b06      	cmp	r3, #6
1004a326:	d015      	beq.n	1004a354 <HAL_TIM_Base_Start_IT+0x78>
1004a328:	68fa      	ldr	r2, [r7, #12]
1004a32a:	2380      	movs	r3, #128	@ 0x80
1004a32c:	025b      	lsls	r3, r3, #9
1004a32e:	429a      	cmp	r2, r3
1004a330:	d010      	beq.n	1004a354 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004a332:	687b      	ldr	r3, [r7, #4]
1004a334:	681b      	ldr	r3, [r3, #0]
1004a336:	681a      	ldr	r2, [r3, #0]
1004a338:	687b      	ldr	r3, [r7, #4]
1004a33a:	681b      	ldr	r3, [r3, #0]
1004a33c:	2101      	movs	r1, #1
1004a33e:	430a      	orrs	r2, r1
1004a340:	601a      	str	r2, [r3, #0]
1004a342:	e007      	b.n	1004a354 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004a344:	687b      	ldr	r3, [r7, #4]
1004a346:	681b      	ldr	r3, [r3, #0]
1004a348:	681a      	ldr	r2, [r3, #0]
1004a34a:	687b      	ldr	r3, [r7, #4]
1004a34c:	681b      	ldr	r3, [r3, #0]
1004a34e:	2101      	movs	r1, #1
1004a350:	430a      	orrs	r2, r1
1004a352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004a354:	2300      	movs	r3, #0
}
1004a356:	0018      	movs	r0, r3
1004a358:	46bd      	mov	sp, r7
1004a35a:	b004      	add	sp, #16
1004a35c:	bd80      	pop	{r7, pc}
1004a35e:	46c0      	nop			@ (mov r8, r8)
1004a360:	40002000 	.word	0x40002000
1004a364:	00010007 	.word	0x00010007

1004a368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
1004a368:	b580      	push	{r7, lr}
1004a36a:	b084      	sub	sp, #16
1004a36c:	af00      	add	r7, sp, #0
1004a36e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004a370:	687b      	ldr	r3, [r7, #4]
1004a372:	681b      	ldr	r3, [r3, #0]
1004a374:	68db      	ldr	r3, [r3, #12]
1004a376:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
1004a378:	687b      	ldr	r3, [r7, #4]
1004a37a:	681b      	ldr	r3, [r3, #0]
1004a37c:	691b      	ldr	r3, [r3, #16]
1004a37e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004a380:	68bb      	ldr	r3, [r7, #8]
1004a382:	2202      	movs	r2, #2
1004a384:	4013      	ands	r3, r2
1004a386:	d021      	beq.n	1004a3cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
1004a388:	68fb      	ldr	r3, [r7, #12]
1004a38a:	2202      	movs	r2, #2
1004a38c:	4013      	ands	r3, r2
1004a38e:	d01d      	beq.n	1004a3cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004a390:	687b      	ldr	r3, [r7, #4]
1004a392:	681b      	ldr	r3, [r3, #0]
1004a394:	2203      	movs	r2, #3
1004a396:	4252      	negs	r2, r2
1004a398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
1004a39a:	687b      	ldr	r3, [r7, #4]
1004a39c:	2201      	movs	r2, #1
1004a39e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004a3a0:	687b      	ldr	r3, [r7, #4]
1004a3a2:	681b      	ldr	r3, [r3, #0]
1004a3a4:	699b      	ldr	r3, [r3, #24]
1004a3a6:	2203      	movs	r2, #3
1004a3a8:	4013      	ands	r3, r2
1004a3aa:	d004      	beq.n	1004a3b6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
1004a3ac:	687b      	ldr	r3, [r7, #4]
1004a3ae:	0018      	movs	r0, r3
1004a3b0:	f000 f994 	bl	1004a6dc <HAL_TIM_IC_CaptureCallback>
1004a3b4:	e007      	b.n	1004a3c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004a3b6:	687b      	ldr	r3, [r7, #4]
1004a3b8:	0018      	movs	r0, r3
1004a3ba:	f000 f987 	bl	1004a6cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004a3be:	687b      	ldr	r3, [r7, #4]
1004a3c0:	0018      	movs	r0, r3
1004a3c2:	f000 f993 	bl	1004a6ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004a3c6:	687b      	ldr	r3, [r7, #4]
1004a3c8:	2200      	movs	r2, #0
1004a3ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
1004a3cc:	68bb      	ldr	r3, [r7, #8]
1004a3ce:	2204      	movs	r2, #4
1004a3d0:	4013      	ands	r3, r2
1004a3d2:	d022      	beq.n	1004a41a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004a3d4:	68fb      	ldr	r3, [r7, #12]
1004a3d6:	2204      	movs	r2, #4
1004a3d8:	4013      	ands	r3, r2
1004a3da:	d01e      	beq.n	1004a41a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1004a3dc:	687b      	ldr	r3, [r7, #4]
1004a3de:	681b      	ldr	r3, [r3, #0]
1004a3e0:	2205      	movs	r2, #5
1004a3e2:	4252      	negs	r2, r2
1004a3e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004a3e6:	687b      	ldr	r3, [r7, #4]
1004a3e8:	2202      	movs	r2, #2
1004a3ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1004a3ec:	687b      	ldr	r3, [r7, #4]
1004a3ee:	681b      	ldr	r3, [r3, #0]
1004a3f0:	699a      	ldr	r2, [r3, #24]
1004a3f2:	23c0      	movs	r3, #192	@ 0xc0
1004a3f4:	009b      	lsls	r3, r3, #2
1004a3f6:	4013      	ands	r3, r2
1004a3f8:	d004      	beq.n	1004a404 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004a3fa:	687b      	ldr	r3, [r7, #4]
1004a3fc:	0018      	movs	r0, r3
1004a3fe:	f000 f96d 	bl	1004a6dc <HAL_TIM_IC_CaptureCallback>
1004a402:	e007      	b.n	1004a414 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004a404:	687b      	ldr	r3, [r7, #4]
1004a406:	0018      	movs	r0, r3
1004a408:	f000 f960 	bl	1004a6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004a40c:	687b      	ldr	r3, [r7, #4]
1004a40e:	0018      	movs	r0, r3
1004a410:	f000 f96c 	bl	1004a6ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004a414:	687b      	ldr	r3, [r7, #4]
1004a416:	2200      	movs	r2, #0
1004a418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
1004a41a:	68bb      	ldr	r3, [r7, #8]
1004a41c:	2208      	movs	r2, #8
1004a41e:	4013      	ands	r3, r2
1004a420:	d021      	beq.n	1004a466 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004a422:	68fb      	ldr	r3, [r7, #12]
1004a424:	2208      	movs	r2, #8
1004a426:	4013      	ands	r3, r2
1004a428:	d01d      	beq.n	1004a466 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
1004a42a:	687b      	ldr	r3, [r7, #4]
1004a42c:	681b      	ldr	r3, [r3, #0]
1004a42e:	2209      	movs	r2, #9
1004a430:	4252      	negs	r2, r2
1004a432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004a434:	687b      	ldr	r3, [r7, #4]
1004a436:	2204      	movs	r2, #4
1004a438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
1004a43a:	687b      	ldr	r3, [r7, #4]
1004a43c:	681b      	ldr	r3, [r3, #0]
1004a43e:	69db      	ldr	r3, [r3, #28]
1004a440:	2203      	movs	r2, #3
1004a442:	4013      	ands	r3, r2
1004a444:	d004      	beq.n	1004a450 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004a446:	687b      	ldr	r3, [r7, #4]
1004a448:	0018      	movs	r0, r3
1004a44a:	f000 f947 	bl	1004a6dc <HAL_TIM_IC_CaptureCallback>
1004a44e:	e007      	b.n	1004a460 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004a450:	687b      	ldr	r3, [r7, #4]
1004a452:	0018      	movs	r0, r3
1004a454:	f000 f93a 	bl	1004a6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004a458:	687b      	ldr	r3, [r7, #4]
1004a45a:	0018      	movs	r0, r3
1004a45c:	f000 f946 	bl	1004a6ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004a460:	687b      	ldr	r3, [r7, #4]
1004a462:	2200      	movs	r2, #0
1004a464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004a466:	68bb      	ldr	r3, [r7, #8]
1004a468:	2210      	movs	r2, #16
1004a46a:	4013      	ands	r3, r2
1004a46c:	d022      	beq.n	1004a4b4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004a46e:	68fb      	ldr	r3, [r7, #12]
1004a470:	2210      	movs	r2, #16
1004a472:	4013      	ands	r3, r2
1004a474:	d01e      	beq.n	1004a4b4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004a476:	687b      	ldr	r3, [r7, #4]
1004a478:	681b      	ldr	r3, [r3, #0]
1004a47a:	2211      	movs	r2, #17
1004a47c:	4252      	negs	r2, r2
1004a47e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004a480:	687b      	ldr	r3, [r7, #4]
1004a482:	2208      	movs	r2, #8
1004a484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004a486:	687b      	ldr	r3, [r7, #4]
1004a488:	681b      	ldr	r3, [r3, #0]
1004a48a:	69da      	ldr	r2, [r3, #28]
1004a48c:	23c0      	movs	r3, #192	@ 0xc0
1004a48e:	009b      	lsls	r3, r3, #2
1004a490:	4013      	ands	r3, r2
1004a492:	d004      	beq.n	1004a49e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004a494:	687b      	ldr	r3, [r7, #4]
1004a496:	0018      	movs	r0, r3
1004a498:	f000 f920 	bl	1004a6dc <HAL_TIM_IC_CaptureCallback>
1004a49c:	e007      	b.n	1004a4ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004a49e:	687b      	ldr	r3, [r7, #4]
1004a4a0:	0018      	movs	r0, r3
1004a4a2:	f000 f913 	bl	1004a6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004a4a6:	687b      	ldr	r3, [r7, #4]
1004a4a8:	0018      	movs	r0, r3
1004a4aa:	f000 f91f 	bl	1004a6ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004a4ae:	687b      	ldr	r3, [r7, #4]
1004a4b0:	2200      	movs	r2, #0
1004a4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004a4b4:	68bb      	ldr	r3, [r7, #8]
1004a4b6:	2201      	movs	r2, #1
1004a4b8:	4013      	ands	r3, r2
1004a4ba:	d00c      	beq.n	1004a4d6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
1004a4bc:	68fb      	ldr	r3, [r7, #12]
1004a4be:	2201      	movs	r2, #1
1004a4c0:	4013      	ands	r3, r2
1004a4c2:	d008      	beq.n	1004a4d6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004a4c4:	687b      	ldr	r3, [r7, #4]
1004a4c6:	681b      	ldr	r3, [r3, #0]
1004a4c8:	2202      	movs	r2, #2
1004a4ca:	4252      	negs	r2, r2
1004a4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
1004a4ce:	687b      	ldr	r3, [r7, #4]
1004a4d0:	0018      	movs	r0, r3
1004a4d2:	f000 f8f3 	bl	1004a6bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004a4d6:	68bb      	ldr	r3, [r7, #8]
1004a4d8:	2280      	movs	r2, #128	@ 0x80
1004a4da:	4013      	ands	r3, r2
1004a4dc:	d00c      	beq.n	1004a4f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
1004a4de:	68fb      	ldr	r3, [r7, #12]
1004a4e0:	2280      	movs	r2, #128	@ 0x80
1004a4e2:	4013      	ands	r3, r2
1004a4e4:	d008      	beq.n	1004a4f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004a4e6:	687b      	ldr	r3, [r7, #4]
1004a4e8:	681b      	ldr	r3, [r3, #0]
1004a4ea:	2281      	movs	r2, #129	@ 0x81
1004a4ec:	4252      	negs	r2, r2
1004a4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
1004a4f0:	687b      	ldr	r3, [r7, #4]
1004a4f2:	0018      	movs	r0, r3
1004a4f4:	f000 fa08 	bl	1004a908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
1004a4f8:	68bb      	ldr	r3, [r7, #8]
1004a4fa:	2240      	movs	r2, #64	@ 0x40
1004a4fc:	4013      	ands	r3, r2
1004a4fe:	d00c      	beq.n	1004a51a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
1004a500:	68fb      	ldr	r3, [r7, #12]
1004a502:	2240      	movs	r2, #64	@ 0x40
1004a504:	4013      	ands	r3, r2
1004a506:	d008      	beq.n	1004a51a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
1004a508:	687b      	ldr	r3, [r7, #4]
1004a50a:	681b      	ldr	r3, [r3, #0]
1004a50c:	2241      	movs	r2, #65	@ 0x41
1004a50e:	4252      	negs	r2, r2
1004a510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004a512:	687b      	ldr	r3, [r7, #4]
1004a514:	0018      	movs	r0, r3
1004a516:	f000 f8f1 	bl	1004a6fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
1004a51a:	68bb      	ldr	r3, [r7, #8]
1004a51c:	2220      	movs	r2, #32
1004a51e:	4013      	ands	r3, r2
1004a520:	d00c      	beq.n	1004a53c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004a522:	68fb      	ldr	r3, [r7, #12]
1004a524:	2220      	movs	r2, #32
1004a526:	4013      	ands	r3, r2
1004a528:	d008      	beq.n	1004a53c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
1004a52a:	687b      	ldr	r3, [r7, #4]
1004a52c:	681b      	ldr	r3, [r3, #0]
1004a52e:	2221      	movs	r2, #33	@ 0x21
1004a530:	4252      	negs	r2, r2
1004a532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004a534:	687b      	ldr	r3, [r7, #4]
1004a536:	0018      	movs	r0, r3
1004a538:	f000 f9de 	bl	1004a8f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
1004a53c:	46c0      	nop			@ (mov r8, r8)
1004a53e:	46bd      	mov	sp, r7
1004a540:	b004      	add	sp, #16
1004a542:	bd80      	pop	{r7, pc}

1004a544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004a544:	b580      	push	{r7, lr}
1004a546:	b084      	sub	sp, #16
1004a548:	af00      	add	r7, sp, #0
1004a54a:	6078      	str	r0, [r7, #4]
1004a54c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004a54e:	230f      	movs	r3, #15
1004a550:	18fb      	adds	r3, r7, r3
1004a552:	2200      	movs	r2, #0
1004a554:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004a556:	687b      	ldr	r3, [r7, #4]
1004a558:	2234      	movs	r2, #52	@ 0x34
1004a55a:	5c9b      	ldrb	r3, [r3, r2]
1004a55c:	2b01      	cmp	r3, #1
1004a55e:	d101      	bne.n	1004a564 <HAL_TIM_ConfigClockSource+0x20>
1004a560:	2302      	movs	r3, #2
1004a562:	e0a2      	b.n	1004a6aa <HAL_TIM_ConfigClockSource+0x166>
1004a564:	687b      	ldr	r3, [r7, #4]
1004a566:	2234      	movs	r2, #52	@ 0x34
1004a568:	2101      	movs	r1, #1
1004a56a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
1004a56c:	687b      	ldr	r3, [r7, #4]
1004a56e:	2235      	movs	r2, #53	@ 0x35
1004a570:	2102      	movs	r1, #2
1004a572:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004a574:	687b      	ldr	r3, [r7, #4]
1004a576:	681b      	ldr	r3, [r3, #0]
1004a578:	689b      	ldr	r3, [r3, #8]
1004a57a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
1004a57c:	68bb      	ldr	r3, [r7, #8]
1004a57e:	4a4d      	ldr	r2, [pc, #308]	@ (1004a6b4 <HAL_TIM_ConfigClockSource+0x170>)
1004a580:	4013      	ands	r3, r2
1004a582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004a584:	68bb      	ldr	r3, [r7, #8]
1004a586:	4a4c      	ldr	r2, [pc, #304]	@ (1004a6b8 <HAL_TIM_ConfigClockSource+0x174>)
1004a588:	4013      	ands	r3, r2
1004a58a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
1004a58c:	687b      	ldr	r3, [r7, #4]
1004a58e:	681b      	ldr	r3, [r3, #0]
1004a590:	68ba      	ldr	r2, [r7, #8]
1004a592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004a594:	683b      	ldr	r3, [r7, #0]
1004a596:	681b      	ldr	r3, [r3, #0]
1004a598:	2280      	movs	r2, #128	@ 0x80
1004a59a:	0192      	lsls	r2, r2, #6
1004a59c:	4293      	cmp	r3, r2
1004a59e:	d02f      	beq.n	1004a600 <HAL_TIM_ConfigClockSource+0xbc>
1004a5a0:	2280      	movs	r2, #128	@ 0x80
1004a5a2:	0192      	lsls	r2, r2, #6
1004a5a4:	4293      	cmp	r3, r2
1004a5a6:	d900      	bls.n	1004a5aa <HAL_TIM_ConfigClockSource+0x66>
1004a5a8:	e06e      	b.n	1004a688 <HAL_TIM_ConfigClockSource+0x144>
1004a5aa:	2280      	movs	r2, #128	@ 0x80
1004a5ac:	0152      	lsls	r2, r2, #5
1004a5ae:	4293      	cmp	r3, r2
1004a5b0:	d100      	bne.n	1004a5b4 <HAL_TIM_ConfigClockSource+0x70>
1004a5b2:	e06e      	b.n	1004a692 <HAL_TIM_ConfigClockSource+0x14e>
1004a5b4:	2280      	movs	r2, #128	@ 0x80
1004a5b6:	0152      	lsls	r2, r2, #5
1004a5b8:	4293      	cmp	r3, r2
1004a5ba:	d865      	bhi.n	1004a688 <HAL_TIM_ConfigClockSource+0x144>
1004a5bc:	2b70      	cmp	r3, #112	@ 0x70
1004a5be:	d008      	beq.n	1004a5d2 <HAL_TIM_ConfigClockSource+0x8e>
1004a5c0:	d862      	bhi.n	1004a688 <HAL_TIM_ConfigClockSource+0x144>
1004a5c2:	2b60      	cmp	r3, #96	@ 0x60
1004a5c4:	d040      	beq.n	1004a648 <HAL_TIM_ConfigClockSource+0x104>
1004a5c6:	d85f      	bhi.n	1004a688 <HAL_TIM_ConfigClockSource+0x144>
1004a5c8:	2b40      	cmp	r3, #64	@ 0x40
1004a5ca:	d04d      	beq.n	1004a668 <HAL_TIM_ConfigClockSource+0x124>
1004a5cc:	2b50      	cmp	r3, #80	@ 0x50
1004a5ce:	d02b      	beq.n	1004a628 <HAL_TIM_ConfigClockSource+0xe4>
1004a5d0:	e05a      	b.n	1004a688 <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004a5d2:	687b      	ldr	r3, [r7, #4]
1004a5d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004a5d6:	683b      	ldr	r3, [r7, #0]
1004a5d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004a5da:	683b      	ldr	r3, [r7, #0]
1004a5dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004a5de:	683b      	ldr	r3, [r7, #0]
1004a5e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004a5e2:	f000 f969 	bl	1004a8b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
1004a5e6:	687b      	ldr	r3, [r7, #4]
1004a5e8:	681b      	ldr	r3, [r3, #0]
1004a5ea:	689b      	ldr	r3, [r3, #8]
1004a5ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
1004a5ee:	68bb      	ldr	r3, [r7, #8]
1004a5f0:	2277      	movs	r2, #119	@ 0x77
1004a5f2:	4313      	orrs	r3, r2
1004a5f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
1004a5f6:	687b      	ldr	r3, [r7, #4]
1004a5f8:	681b      	ldr	r3, [r3, #0]
1004a5fa:	68ba      	ldr	r2, [r7, #8]
1004a5fc:	609a      	str	r2, [r3, #8]
      break;
1004a5fe:	e049      	b.n	1004a694 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004a600:	687b      	ldr	r3, [r7, #4]
1004a602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004a604:	683b      	ldr	r3, [r7, #0]
1004a606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004a608:	683b      	ldr	r3, [r7, #0]
1004a60a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004a60c:	683b      	ldr	r3, [r7, #0]
1004a60e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004a610:	f000 f952 	bl	1004a8b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
1004a614:	687b      	ldr	r3, [r7, #4]
1004a616:	681b      	ldr	r3, [r3, #0]
1004a618:	689a      	ldr	r2, [r3, #8]
1004a61a:	687b      	ldr	r3, [r7, #4]
1004a61c:	681b      	ldr	r3, [r3, #0]
1004a61e:	2180      	movs	r1, #128	@ 0x80
1004a620:	01c9      	lsls	r1, r1, #7
1004a622:	430a      	orrs	r2, r1
1004a624:	609a      	str	r2, [r3, #8]
      break;
1004a626:	e035      	b.n	1004a694 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004a628:	687b      	ldr	r3, [r7, #4]
1004a62a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004a62c:	683b      	ldr	r3, [r7, #0]
1004a62e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004a630:	683b      	ldr	r3, [r7, #0]
1004a632:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004a634:	001a      	movs	r2, r3
1004a636:	f000 f8c5 	bl	1004a7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
1004a63a:	687b      	ldr	r3, [r7, #4]
1004a63c:	681b      	ldr	r3, [r3, #0]
1004a63e:	2150      	movs	r1, #80	@ 0x50
1004a640:	0018      	movs	r0, r3
1004a642:	f000 f91f 	bl	1004a884 <TIM_ITRx_SetConfig>
      break;
1004a646:	e025      	b.n	1004a694 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
1004a648:	687b      	ldr	r3, [r7, #4]
1004a64a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004a64c:	683b      	ldr	r3, [r7, #0]
1004a64e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004a650:	683b      	ldr	r3, [r7, #0]
1004a652:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004a654:	001a      	movs	r2, r3
1004a656:	f000 f8e3 	bl	1004a820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
1004a65a:	687b      	ldr	r3, [r7, #4]
1004a65c:	681b      	ldr	r3, [r3, #0]
1004a65e:	2160      	movs	r1, #96	@ 0x60
1004a660:	0018      	movs	r0, r3
1004a662:	f000 f90f 	bl	1004a884 <TIM_ITRx_SetConfig>
      break;
1004a666:	e015      	b.n	1004a694 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004a668:	687b      	ldr	r3, [r7, #4]
1004a66a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004a66c:	683b      	ldr	r3, [r7, #0]
1004a66e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004a670:	683b      	ldr	r3, [r7, #0]
1004a672:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004a674:	001a      	movs	r2, r3
1004a676:	f000 f8a5 	bl	1004a7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
1004a67a:	687b      	ldr	r3, [r7, #4]
1004a67c:	681b      	ldr	r3, [r3, #0]
1004a67e:	2140      	movs	r1, #64	@ 0x40
1004a680:	0018      	movs	r0, r3
1004a682:	f000 f8ff 	bl	1004a884 <TIM_ITRx_SetConfig>
      break;
1004a686:	e005      	b.n	1004a694 <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
1004a688:	230f      	movs	r3, #15
1004a68a:	18fb      	adds	r3, r7, r3
1004a68c:	2201      	movs	r2, #1
1004a68e:	701a      	strb	r2, [r3, #0]
      break;
1004a690:	e000      	b.n	1004a694 <HAL_TIM_ConfigClockSource+0x150>
      break;
1004a692:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004a694:	687b      	ldr	r3, [r7, #4]
1004a696:	2235      	movs	r2, #53	@ 0x35
1004a698:	2101      	movs	r1, #1
1004a69a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
1004a69c:	687b      	ldr	r3, [r7, #4]
1004a69e:	2234      	movs	r2, #52	@ 0x34
1004a6a0:	2100      	movs	r1, #0
1004a6a2:	5499      	strb	r1, [r3, r2]

  return status;
1004a6a4:	230f      	movs	r3, #15
1004a6a6:	18fb      	adds	r3, r7, r3
1004a6a8:	781b      	ldrb	r3, [r3, #0]
}
1004a6aa:	0018      	movs	r0, r3
1004a6ac:	46bd      	mov	sp, r7
1004a6ae:	b004      	add	sp, #16
1004a6b0:	bd80      	pop	{r7, pc}
1004a6b2:	46c0      	nop			@ (mov r8, r8)
1004a6b4:	fffeff88 	.word	0xfffeff88
1004a6b8:	ffff00ff 	.word	0xffff00ff

1004a6bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004a6bc:	b580      	push	{r7, lr}
1004a6be:	b082      	sub	sp, #8
1004a6c0:	af00      	add	r7, sp, #0
1004a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004a6c4:	46c0      	nop			@ (mov r8, r8)
1004a6c6:	46bd      	mov	sp, r7
1004a6c8:	b002      	add	sp, #8
1004a6ca:	bd80      	pop	{r7, pc}

1004a6cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004a6cc:	b580      	push	{r7, lr}
1004a6ce:	b082      	sub	sp, #8
1004a6d0:	af00      	add	r7, sp, #0
1004a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1004a6d4:	46c0      	nop			@ (mov r8, r8)
1004a6d6:	46bd      	mov	sp, r7
1004a6d8:	b002      	add	sp, #8
1004a6da:	bd80      	pop	{r7, pc}

1004a6dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004a6dc:	b580      	push	{r7, lr}
1004a6de:	b082      	sub	sp, #8
1004a6e0:	af00      	add	r7, sp, #0
1004a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
1004a6e4:	46c0      	nop			@ (mov r8, r8)
1004a6e6:	46bd      	mov	sp, r7
1004a6e8:	b002      	add	sp, #8
1004a6ea:	bd80      	pop	{r7, pc}

1004a6ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
1004a6ec:	b580      	push	{r7, lr}
1004a6ee:	b082      	sub	sp, #8
1004a6f0:	af00      	add	r7, sp, #0
1004a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
1004a6f4:	46c0      	nop			@ (mov r8, r8)
1004a6f6:	46bd      	mov	sp, r7
1004a6f8:	b002      	add	sp, #8
1004a6fa:	bd80      	pop	{r7, pc}

1004a6fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
1004a6fc:	b580      	push	{r7, lr}
1004a6fe:	b082      	sub	sp, #8
1004a700:	af00      	add	r7, sp, #0
1004a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
1004a704:	46c0      	nop			@ (mov r8, r8)
1004a706:	46bd      	mov	sp, r7
1004a708:	b002      	add	sp, #8
1004a70a:	bd80      	pop	{r7, pc}

1004a70c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
1004a70c:	b580      	push	{r7, lr}
1004a70e:	b084      	sub	sp, #16
1004a710:	af00      	add	r7, sp, #0
1004a712:	6078      	str	r0, [r7, #4]
1004a714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
1004a716:	687b      	ldr	r3, [r7, #4]
1004a718:	681b      	ldr	r3, [r3, #0]
1004a71a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
1004a71c:	687b      	ldr	r3, [r7, #4]
1004a71e:	4a25      	ldr	r2, [pc, #148]	@ (1004a7b4 <TIM_Base_SetConfig+0xa8>)
1004a720:	4293      	cmp	r3, r2
1004a722:	d108      	bne.n	1004a736 <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
1004a724:	68fb      	ldr	r3, [r7, #12]
1004a726:	2270      	movs	r2, #112	@ 0x70
1004a728:	4393      	bics	r3, r2
1004a72a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
1004a72c:	683b      	ldr	r3, [r7, #0]
1004a72e:	685b      	ldr	r3, [r3, #4]
1004a730:	68fa      	ldr	r2, [r7, #12]
1004a732:	4313      	orrs	r3, r2
1004a734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004a736:	687b      	ldr	r3, [r7, #4]
1004a738:	4a1e      	ldr	r2, [pc, #120]	@ (1004a7b4 <TIM_Base_SetConfig+0xa8>)
1004a73a:	4293      	cmp	r3, r2
1004a73c:	d007      	beq.n	1004a74e <TIM_Base_SetConfig+0x42>
1004a73e:	687b      	ldr	r3, [r7, #4]
1004a740:	4a1d      	ldr	r2, [pc, #116]	@ (1004a7b8 <TIM_Base_SetConfig+0xac>)
1004a742:	4293      	cmp	r3, r2
1004a744:	d003      	beq.n	1004a74e <TIM_Base_SetConfig+0x42>
1004a746:	687b      	ldr	r3, [r7, #4]
1004a748:	4a1c      	ldr	r2, [pc, #112]	@ (1004a7bc <TIM_Base_SetConfig+0xb0>)
1004a74a:	4293      	cmp	r3, r2
1004a74c:	d108      	bne.n	1004a760 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
1004a74e:	68fb      	ldr	r3, [r7, #12]
1004a750:	4a1b      	ldr	r2, [pc, #108]	@ (1004a7c0 <TIM_Base_SetConfig+0xb4>)
1004a752:	4013      	ands	r3, r2
1004a754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004a756:	683b      	ldr	r3, [r7, #0]
1004a758:	68db      	ldr	r3, [r3, #12]
1004a75a:	68fa      	ldr	r2, [r7, #12]
1004a75c:	4313      	orrs	r3, r2
1004a75e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
1004a760:	68fb      	ldr	r3, [r7, #12]
1004a762:	2280      	movs	r2, #128	@ 0x80
1004a764:	4393      	bics	r3, r2
1004a766:	001a      	movs	r2, r3
1004a768:	683b      	ldr	r3, [r7, #0]
1004a76a:	695b      	ldr	r3, [r3, #20]
1004a76c:	4313      	orrs	r3, r2
1004a76e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
1004a770:	687b      	ldr	r3, [r7, #4]
1004a772:	68fa      	ldr	r2, [r7, #12]
1004a774:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004a776:	683b      	ldr	r3, [r7, #0]
1004a778:	689a      	ldr	r2, [r3, #8]
1004a77a:	687b      	ldr	r3, [r7, #4]
1004a77c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
1004a77e:	683b      	ldr	r3, [r7, #0]
1004a780:	681a      	ldr	r2, [r3, #0]
1004a782:	687b      	ldr	r3, [r7, #4]
1004a784:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004a786:	687b      	ldr	r3, [r7, #4]
1004a788:	4a0a      	ldr	r2, [pc, #40]	@ (1004a7b4 <TIM_Base_SetConfig+0xa8>)
1004a78a:	4293      	cmp	r3, r2
1004a78c:	d007      	beq.n	1004a79e <TIM_Base_SetConfig+0x92>
1004a78e:	687b      	ldr	r3, [r7, #4]
1004a790:	4a09      	ldr	r2, [pc, #36]	@ (1004a7b8 <TIM_Base_SetConfig+0xac>)
1004a792:	4293      	cmp	r3, r2
1004a794:	d003      	beq.n	1004a79e <TIM_Base_SetConfig+0x92>
1004a796:	687b      	ldr	r3, [r7, #4]
1004a798:	4a08      	ldr	r2, [pc, #32]	@ (1004a7bc <TIM_Base_SetConfig+0xb0>)
1004a79a:	4293      	cmp	r3, r2
1004a79c:	d103      	bne.n	1004a7a6 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
1004a79e:	683b      	ldr	r3, [r7, #0]
1004a7a0:	691a      	ldr	r2, [r3, #16]
1004a7a2:	687b      	ldr	r3, [r7, #4]
1004a7a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004a7a6:	687b      	ldr	r3, [r7, #4]
1004a7a8:	2201      	movs	r2, #1
1004a7aa:	615a      	str	r2, [r3, #20]
}
1004a7ac:	46c0      	nop			@ (mov r8, r8)
1004a7ae:	46bd      	mov	sp, r7
1004a7b0:	b004      	add	sp, #16
1004a7b2:	bd80      	pop	{r7, pc}
1004a7b4:	40002000 	.word	0x40002000
1004a7b8:	40005000 	.word	0x40005000
1004a7bc:	40006000 	.word	0x40006000
1004a7c0:	fffffcff 	.word	0xfffffcff

1004a7c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004a7c4:	b580      	push	{r7, lr}
1004a7c6:	b086      	sub	sp, #24
1004a7c8:	af00      	add	r7, sp, #0
1004a7ca:	60f8      	str	r0, [r7, #12]
1004a7cc:	60b9      	str	r1, [r7, #8]
1004a7ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
1004a7d0:	68fb      	ldr	r3, [r7, #12]
1004a7d2:	6a1b      	ldr	r3, [r3, #32]
1004a7d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
1004a7d6:	68fb      	ldr	r3, [r7, #12]
1004a7d8:	6a1b      	ldr	r3, [r3, #32]
1004a7da:	2201      	movs	r2, #1
1004a7dc:	4393      	bics	r3, r2
1004a7de:	001a      	movs	r2, r3
1004a7e0:	68fb      	ldr	r3, [r7, #12]
1004a7e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004a7e4:	68fb      	ldr	r3, [r7, #12]
1004a7e6:	699b      	ldr	r3, [r3, #24]
1004a7e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
1004a7ea:	693b      	ldr	r3, [r7, #16]
1004a7ec:	22f0      	movs	r2, #240	@ 0xf0
1004a7ee:	4393      	bics	r3, r2
1004a7f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
1004a7f2:	687b      	ldr	r3, [r7, #4]
1004a7f4:	011b      	lsls	r3, r3, #4
1004a7f6:	693a      	ldr	r2, [r7, #16]
1004a7f8:	4313      	orrs	r3, r2
1004a7fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
1004a7fc:	697b      	ldr	r3, [r7, #20]
1004a7fe:	220a      	movs	r2, #10
1004a800:	4393      	bics	r3, r2
1004a802:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
1004a804:	697a      	ldr	r2, [r7, #20]
1004a806:	68bb      	ldr	r3, [r7, #8]
1004a808:	4313      	orrs	r3, r2
1004a80a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1004a80c:	68fb      	ldr	r3, [r7, #12]
1004a80e:	693a      	ldr	r2, [r7, #16]
1004a810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004a812:	68fb      	ldr	r3, [r7, #12]
1004a814:	697a      	ldr	r2, [r7, #20]
1004a816:	621a      	str	r2, [r3, #32]
}
1004a818:	46c0      	nop			@ (mov r8, r8)
1004a81a:	46bd      	mov	sp, r7
1004a81c:	b006      	add	sp, #24
1004a81e:	bd80      	pop	{r7, pc}

1004a820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004a820:	b580      	push	{r7, lr}
1004a822:	b086      	sub	sp, #24
1004a824:	af00      	add	r7, sp, #0
1004a826:	60f8      	str	r0, [r7, #12]
1004a828:	60b9      	str	r1, [r7, #8]
1004a82a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
1004a82c:	68fb      	ldr	r3, [r7, #12]
1004a82e:	6a1b      	ldr	r3, [r3, #32]
1004a830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004a832:	68fb      	ldr	r3, [r7, #12]
1004a834:	6a1b      	ldr	r3, [r3, #32]
1004a836:	2210      	movs	r2, #16
1004a838:	4393      	bics	r3, r2
1004a83a:	001a      	movs	r2, r3
1004a83c:	68fb      	ldr	r3, [r7, #12]
1004a83e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004a840:	68fb      	ldr	r3, [r7, #12]
1004a842:	699b      	ldr	r3, [r3, #24]
1004a844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004a846:	693b      	ldr	r3, [r7, #16]
1004a848:	4a0d      	ldr	r2, [pc, #52]	@ (1004a880 <TIM_TI2_ConfigInputStage+0x60>)
1004a84a:	4013      	ands	r3, r2
1004a84c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
1004a84e:	687b      	ldr	r3, [r7, #4]
1004a850:	031b      	lsls	r3, r3, #12
1004a852:	693a      	ldr	r2, [r7, #16]
1004a854:	4313      	orrs	r3, r2
1004a856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1004a858:	697b      	ldr	r3, [r7, #20]
1004a85a:	22a0      	movs	r2, #160	@ 0xa0
1004a85c:	4393      	bics	r3, r2
1004a85e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
1004a860:	68bb      	ldr	r3, [r7, #8]
1004a862:	011b      	lsls	r3, r3, #4
1004a864:	697a      	ldr	r2, [r7, #20]
1004a866:	4313      	orrs	r3, r2
1004a868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1004a86a:	68fb      	ldr	r3, [r7, #12]
1004a86c:	693a      	ldr	r2, [r7, #16]
1004a86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004a870:	68fb      	ldr	r3, [r7, #12]
1004a872:	697a      	ldr	r2, [r7, #20]
1004a874:	621a      	str	r2, [r3, #32]
}
1004a876:	46c0      	nop			@ (mov r8, r8)
1004a878:	46bd      	mov	sp, r7
1004a87a:	b006      	add	sp, #24
1004a87c:	bd80      	pop	{r7, pc}
1004a87e:	46c0      	nop			@ (mov r8, r8)
1004a880:	ffff0fff 	.word	0xffff0fff

1004a884 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004a884:	b580      	push	{r7, lr}
1004a886:	b084      	sub	sp, #16
1004a888:	af00      	add	r7, sp, #0
1004a88a:	6078      	str	r0, [r7, #4]
1004a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
1004a88e:	687b      	ldr	r3, [r7, #4]
1004a890:	689b      	ldr	r3, [r3, #8]
1004a892:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004a894:	68fb      	ldr	r3, [r7, #12]
1004a896:	2270      	movs	r2, #112	@ 0x70
1004a898:	4393      	bics	r3, r2
1004a89a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
1004a89c:	683a      	ldr	r2, [r7, #0]
1004a89e:	68fb      	ldr	r3, [r7, #12]
1004a8a0:	4313      	orrs	r3, r2
1004a8a2:	2207      	movs	r2, #7
1004a8a4:	4313      	orrs	r3, r2
1004a8a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004a8a8:	687b      	ldr	r3, [r7, #4]
1004a8aa:	68fa      	ldr	r2, [r7, #12]
1004a8ac:	609a      	str	r2, [r3, #8]
}
1004a8ae:	46c0      	nop			@ (mov r8, r8)
1004a8b0:	46bd      	mov	sp, r7
1004a8b2:	b004      	add	sp, #16
1004a8b4:	bd80      	pop	{r7, pc}
	...

1004a8b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
1004a8b8:	b580      	push	{r7, lr}
1004a8ba:	b086      	sub	sp, #24
1004a8bc:	af00      	add	r7, sp, #0
1004a8be:	60f8      	str	r0, [r7, #12]
1004a8c0:	60b9      	str	r1, [r7, #8]
1004a8c2:	607a      	str	r2, [r7, #4]
1004a8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004a8c6:	68fb      	ldr	r3, [r7, #12]
1004a8c8:	689b      	ldr	r3, [r3, #8]
1004a8ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004a8cc:	697b      	ldr	r3, [r7, #20]
1004a8ce:	4a09      	ldr	r2, [pc, #36]	@ (1004a8f4 <TIM_ETR_SetConfig+0x3c>)
1004a8d0:	4013      	ands	r3, r2
1004a8d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
1004a8d4:	683b      	ldr	r3, [r7, #0]
1004a8d6:	021a      	lsls	r2, r3, #8
1004a8d8:	687b      	ldr	r3, [r7, #4]
1004a8da:	431a      	orrs	r2, r3
1004a8dc:	68bb      	ldr	r3, [r7, #8]
1004a8de:	4313      	orrs	r3, r2
1004a8e0:	697a      	ldr	r2, [r7, #20]
1004a8e2:	4313      	orrs	r3, r2
1004a8e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004a8e6:	68fb      	ldr	r3, [r7, #12]
1004a8e8:	697a      	ldr	r2, [r7, #20]
1004a8ea:	609a      	str	r2, [r3, #8]
}
1004a8ec:	46c0      	nop			@ (mov r8, r8)
1004a8ee:	46bd      	mov	sp, r7
1004a8f0:	b006      	add	sp, #24
1004a8f2:	bd80      	pop	{r7, pc}
1004a8f4:	ffff00ff 	.word	0xffff00ff

1004a8f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
1004a8f8:	b580      	push	{r7, lr}
1004a8fa:	b082      	sub	sp, #8
1004a8fc:	af00      	add	r7, sp, #0
1004a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
1004a900:	46c0      	nop			@ (mov r8, r8)
1004a902:	46bd      	mov	sp, r7
1004a904:	b002      	add	sp, #8
1004a906:	bd80      	pop	{r7, pc}

1004a908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
1004a908:	b580      	push	{r7, lr}
1004a90a:	b082      	sub	sp, #8
1004a90c:	af00      	add	r7, sp, #0
1004a90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
1004a910:	46c0      	nop			@ (mov r8, r8)
1004a912:	46bd      	mov	sp, r7
1004a914:	b002      	add	sp, #8
1004a916:	bd80      	pop	{r7, pc}

1004a918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
1004a918:	b580      	push	{r7, lr}
1004a91a:	b082      	sub	sp, #8
1004a91c:	af00      	add	r7, sp, #0
1004a91e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004a920:	687b      	ldr	r3, [r7, #4]
1004a922:	2b00      	cmp	r3, #0
1004a924:	d101      	bne.n	1004a92a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004a926:	2301      	movs	r3, #1
1004a928:	e055      	b.n	1004a9d6 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004a92a:	687b      	ldr	r3, [r7, #4]
1004a92c:	2288      	movs	r2, #136	@ 0x88
1004a92e:	589b      	ldr	r3, [r3, r2]
1004a930:	2b00      	cmp	r3, #0
1004a932:	d116      	bne.n	1004a962 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004a934:	687b      	ldr	r3, [r7, #4]
1004a936:	2284      	movs	r2, #132	@ 0x84
1004a938:	2100      	movs	r1, #0
1004a93a:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
1004a93c:	687b      	ldr	r3, [r7, #4]
1004a93e:	0018      	movs	r0, r3
1004a940:	f000 fbf2 	bl	1004b128 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1004a944:	687b      	ldr	r3, [r7, #4]
1004a946:	22c4      	movs	r2, #196	@ 0xc4
1004a948:	589b      	ldr	r3, [r3, r2]
1004a94a:	2b00      	cmp	r3, #0
1004a94c:	d103      	bne.n	1004a956 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
1004a94e:	687b      	ldr	r3, [r7, #4]
1004a950:	21c4      	movs	r1, #196	@ 0xc4
1004a952:	4a23      	ldr	r2, [pc, #140]	@ (1004a9e0 <HAL_UART_Init+0xc8>)
1004a954:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1004a956:	687b      	ldr	r3, [r7, #4]
1004a958:	22c4      	movs	r2, #196	@ 0xc4
1004a95a:	589b      	ldr	r3, [r3, r2]
1004a95c:	687a      	ldr	r2, [r7, #4]
1004a95e:	0010      	movs	r0, r2
1004a960:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004a962:	687b      	ldr	r3, [r7, #4]
1004a964:	2288      	movs	r2, #136	@ 0x88
1004a966:	2124      	movs	r1, #36	@ 0x24
1004a968:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
1004a96a:	687b      	ldr	r3, [r7, #4]
1004a96c:	681b      	ldr	r3, [r3, #0]
1004a96e:	681a      	ldr	r2, [r3, #0]
1004a970:	687b      	ldr	r3, [r7, #4]
1004a972:	681b      	ldr	r3, [r3, #0]
1004a974:	2101      	movs	r1, #1
1004a976:	438a      	bics	r2, r1
1004a978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1004a97a:	687b      	ldr	r3, [r7, #4]
1004a97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a97e:	2b00      	cmp	r3, #0
1004a980:	d003      	beq.n	1004a98a <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
1004a982:	687b      	ldr	r3, [r7, #4]
1004a984:	0018      	movs	r0, r3
1004a986:	f000 fd87 	bl	1004b498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1004a98a:	687b      	ldr	r3, [r7, #4]
1004a98c:	0018      	movs	r0, r3
1004a98e:	f000 fc1b 	bl	1004b1c8 <UART_SetConfig>
1004a992:	0003      	movs	r3, r0
1004a994:	2b01      	cmp	r3, #1
1004a996:	d101      	bne.n	1004a99c <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
1004a998:	2301      	movs	r3, #1
1004a99a:	e01c      	b.n	1004a9d6 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004a99c:	687b      	ldr	r3, [r7, #4]
1004a99e:	681b      	ldr	r3, [r3, #0]
1004a9a0:	685a      	ldr	r2, [r3, #4]
1004a9a2:	687b      	ldr	r3, [r7, #4]
1004a9a4:	681b      	ldr	r3, [r3, #0]
1004a9a6:	490f      	ldr	r1, [pc, #60]	@ (1004a9e4 <HAL_UART_Init+0xcc>)
1004a9a8:	400a      	ands	r2, r1
1004a9aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004a9ac:	687b      	ldr	r3, [r7, #4]
1004a9ae:	681b      	ldr	r3, [r3, #0]
1004a9b0:	689a      	ldr	r2, [r3, #8]
1004a9b2:	687b      	ldr	r3, [r7, #4]
1004a9b4:	681b      	ldr	r3, [r3, #0]
1004a9b6:	212a      	movs	r1, #42	@ 0x2a
1004a9b8:	438a      	bics	r2, r1
1004a9ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004a9bc:	687b      	ldr	r3, [r7, #4]
1004a9be:	681b      	ldr	r3, [r3, #0]
1004a9c0:	681a      	ldr	r2, [r3, #0]
1004a9c2:	687b      	ldr	r3, [r7, #4]
1004a9c4:	681b      	ldr	r3, [r3, #0]
1004a9c6:	2101      	movs	r1, #1
1004a9c8:	430a      	orrs	r2, r1
1004a9ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004a9cc:	687b      	ldr	r3, [r7, #4]
1004a9ce:	0018      	movs	r0, r3
1004a9d0:	f000 fe16 	bl	1004b600 <UART_CheckIdleState>
1004a9d4:	0003      	movs	r3, r0
}
1004a9d6:	0018      	movs	r0, r3
1004a9d8:	46bd      	mov	sp, r7
1004a9da:	b002      	add	sp, #8
1004a9dc:	bd80      	pop	{r7, pc}
1004a9de:	46c0      	nop			@ (mov r8, r8)
1004a9e0:	10043e15 	.word	0x10043e15
1004a9e4:	ffffb7ff 	.word	0xffffb7ff

1004a9e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
1004a9e8:	b5b0      	push	{r4, r5, r7, lr}
1004a9ea:	b0aa      	sub	sp, #168	@ 0xa8
1004a9ec:	af00      	add	r7, sp, #0
1004a9ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
1004a9f0:	687b      	ldr	r3, [r7, #4]
1004a9f2:	681b      	ldr	r3, [r3, #0]
1004a9f4:	69db      	ldr	r3, [r3, #28]
1004a9f6:	22a4      	movs	r2, #164	@ 0xa4
1004a9f8:	18b9      	adds	r1, r7, r2
1004a9fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
1004a9fc:	687b      	ldr	r3, [r7, #4]
1004a9fe:	681b      	ldr	r3, [r3, #0]
1004aa00:	681b      	ldr	r3, [r3, #0]
1004aa02:	20a0      	movs	r0, #160	@ 0xa0
1004aa04:	1839      	adds	r1, r7, r0
1004aa06:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
1004aa08:	687b      	ldr	r3, [r7, #4]
1004aa0a:	681b      	ldr	r3, [r3, #0]
1004aa0c:	689b      	ldr	r3, [r3, #8]
1004aa0e:	249c      	movs	r4, #156	@ 0x9c
1004aa10:	1939      	adds	r1, r7, r4
1004aa12:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
1004aa14:	0011      	movs	r1, r2
1004aa16:	18bb      	adds	r3, r7, r2
1004aa18:	681b      	ldr	r3, [r3, #0]
1004aa1a:	4aa5      	ldr	r2, [pc, #660]	@ (1004acb0 <HAL_UART_IRQHandler+0x2c8>)
1004aa1c:	4013      	ands	r3, r2
1004aa1e:	2298      	movs	r2, #152	@ 0x98
1004aa20:	18bd      	adds	r5, r7, r2
1004aa22:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
1004aa24:	18bb      	adds	r3, r7, r2
1004aa26:	681b      	ldr	r3, [r3, #0]
1004aa28:	2b00      	cmp	r3, #0
1004aa2a:	d11a      	bne.n	1004aa62 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004aa2c:	187b      	adds	r3, r7, r1
1004aa2e:	681b      	ldr	r3, [r3, #0]
1004aa30:	2220      	movs	r2, #32
1004aa32:	4013      	ands	r3, r2
1004aa34:	d015      	beq.n	1004aa62 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004aa36:	183b      	adds	r3, r7, r0
1004aa38:	681b      	ldr	r3, [r3, #0]
1004aa3a:	2220      	movs	r2, #32
1004aa3c:	4013      	ands	r3, r2
1004aa3e:	d105      	bne.n	1004aa4c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004aa40:	193b      	adds	r3, r7, r4
1004aa42:	681a      	ldr	r2, [r3, #0]
1004aa44:	2380      	movs	r3, #128	@ 0x80
1004aa46:	055b      	lsls	r3, r3, #21
1004aa48:	4013      	ands	r3, r2
1004aa4a:	d00a      	beq.n	1004aa62 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
1004aa4c:	687b      	ldr	r3, [r7, #4]
1004aa4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004aa50:	2b00      	cmp	r3, #0
1004aa52:	d100      	bne.n	1004aa56 <HAL_UART_IRQHandler+0x6e>
1004aa54:	e30a      	b.n	1004b06c <HAL_UART_IRQHandler+0x684>
      {
        huart->RxISR(huart);
1004aa56:	687b      	ldr	r3, [r7, #4]
1004aa58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004aa5a:	687a      	ldr	r2, [r7, #4]
1004aa5c:	0010      	movs	r0, r2
1004aa5e:	4798      	blx	r3
      }
      return;
1004aa60:	e304      	b.n	1004b06c <HAL_UART_IRQHandler+0x684>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004aa62:	2398      	movs	r3, #152	@ 0x98
1004aa64:	18fb      	adds	r3, r7, r3
1004aa66:	681b      	ldr	r3, [r3, #0]
1004aa68:	2b00      	cmp	r3, #0
1004aa6a:	d100      	bne.n	1004aa6e <HAL_UART_IRQHandler+0x86>
1004aa6c:	e128      	b.n	1004acc0 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004aa6e:	239c      	movs	r3, #156	@ 0x9c
1004aa70:	18fb      	adds	r3, r7, r3
1004aa72:	681b      	ldr	r3, [r3, #0]
1004aa74:	4a8f      	ldr	r2, [pc, #572]	@ (1004acb4 <HAL_UART_IRQHandler+0x2cc>)
1004aa76:	4013      	ands	r3, r2
1004aa78:	d106      	bne.n	1004aa88 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
1004aa7a:	23a0      	movs	r3, #160	@ 0xa0
1004aa7c:	18fb      	adds	r3, r7, r3
1004aa7e:	681b      	ldr	r3, [r3, #0]
1004aa80:	4a8d      	ldr	r2, [pc, #564]	@ (1004acb8 <HAL_UART_IRQHandler+0x2d0>)
1004aa82:	4013      	ands	r3, r2
1004aa84:	d100      	bne.n	1004aa88 <HAL_UART_IRQHandler+0xa0>
1004aa86:	e11b      	b.n	1004acc0 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004aa88:	23a4      	movs	r3, #164	@ 0xa4
1004aa8a:	18fb      	adds	r3, r7, r3
1004aa8c:	681b      	ldr	r3, [r3, #0]
1004aa8e:	2201      	movs	r2, #1
1004aa90:	4013      	ands	r3, r2
1004aa92:	d012      	beq.n	1004aaba <HAL_UART_IRQHandler+0xd2>
1004aa94:	23a0      	movs	r3, #160	@ 0xa0
1004aa96:	18fb      	adds	r3, r7, r3
1004aa98:	681a      	ldr	r2, [r3, #0]
1004aa9a:	2380      	movs	r3, #128	@ 0x80
1004aa9c:	005b      	lsls	r3, r3, #1
1004aa9e:	4013      	ands	r3, r2
1004aaa0:	d00b      	beq.n	1004aaba <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
1004aaa2:	687b      	ldr	r3, [r7, #4]
1004aaa4:	681b      	ldr	r3, [r3, #0]
1004aaa6:	2201      	movs	r2, #1
1004aaa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
1004aaaa:	687b      	ldr	r3, [r7, #4]
1004aaac:	2290      	movs	r2, #144	@ 0x90
1004aaae:	589b      	ldr	r3, [r3, r2]
1004aab0:	2201      	movs	r2, #1
1004aab2:	431a      	orrs	r2, r3
1004aab4:	687b      	ldr	r3, [r7, #4]
1004aab6:	2190      	movs	r1, #144	@ 0x90
1004aab8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004aaba:	23a4      	movs	r3, #164	@ 0xa4
1004aabc:	18fb      	adds	r3, r7, r3
1004aabe:	681b      	ldr	r3, [r3, #0]
1004aac0:	2202      	movs	r2, #2
1004aac2:	4013      	ands	r3, r2
1004aac4:	d011      	beq.n	1004aaea <HAL_UART_IRQHandler+0x102>
1004aac6:	239c      	movs	r3, #156	@ 0x9c
1004aac8:	18fb      	adds	r3, r7, r3
1004aaca:	681b      	ldr	r3, [r3, #0]
1004aacc:	2201      	movs	r2, #1
1004aace:	4013      	ands	r3, r2
1004aad0:	d00b      	beq.n	1004aaea <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
1004aad2:	687b      	ldr	r3, [r7, #4]
1004aad4:	681b      	ldr	r3, [r3, #0]
1004aad6:	2202      	movs	r2, #2
1004aad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
1004aada:	687b      	ldr	r3, [r7, #4]
1004aadc:	2290      	movs	r2, #144	@ 0x90
1004aade:	589b      	ldr	r3, [r3, r2]
1004aae0:	2204      	movs	r2, #4
1004aae2:	431a      	orrs	r2, r3
1004aae4:	687b      	ldr	r3, [r7, #4]
1004aae6:	2190      	movs	r1, #144	@ 0x90
1004aae8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004aaea:	23a4      	movs	r3, #164	@ 0xa4
1004aaec:	18fb      	adds	r3, r7, r3
1004aaee:	681b      	ldr	r3, [r3, #0]
1004aaf0:	2204      	movs	r2, #4
1004aaf2:	4013      	ands	r3, r2
1004aaf4:	d011      	beq.n	1004ab1a <HAL_UART_IRQHandler+0x132>
1004aaf6:	239c      	movs	r3, #156	@ 0x9c
1004aaf8:	18fb      	adds	r3, r7, r3
1004aafa:	681b      	ldr	r3, [r3, #0]
1004aafc:	2201      	movs	r2, #1
1004aafe:	4013      	ands	r3, r2
1004ab00:	d00b      	beq.n	1004ab1a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
1004ab02:	687b      	ldr	r3, [r7, #4]
1004ab04:	681b      	ldr	r3, [r3, #0]
1004ab06:	2204      	movs	r2, #4
1004ab08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
1004ab0a:	687b      	ldr	r3, [r7, #4]
1004ab0c:	2290      	movs	r2, #144	@ 0x90
1004ab0e:	589b      	ldr	r3, [r3, r2]
1004ab10:	2202      	movs	r2, #2
1004ab12:	431a      	orrs	r2, r3
1004ab14:	687b      	ldr	r3, [r7, #4]
1004ab16:	2190      	movs	r1, #144	@ 0x90
1004ab18:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004ab1a:	23a4      	movs	r3, #164	@ 0xa4
1004ab1c:	18fb      	adds	r3, r7, r3
1004ab1e:	681b      	ldr	r3, [r3, #0]
1004ab20:	2208      	movs	r2, #8
1004ab22:	4013      	ands	r3, r2
1004ab24:	d017      	beq.n	1004ab56 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004ab26:	23a0      	movs	r3, #160	@ 0xa0
1004ab28:	18fb      	adds	r3, r7, r3
1004ab2a:	681b      	ldr	r3, [r3, #0]
1004ab2c:	2220      	movs	r2, #32
1004ab2e:	4013      	ands	r3, r2
1004ab30:	d105      	bne.n	1004ab3e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004ab32:	239c      	movs	r3, #156	@ 0x9c
1004ab34:	18fb      	adds	r3, r7, r3
1004ab36:	681b      	ldr	r3, [r3, #0]
1004ab38:	4a5e      	ldr	r2, [pc, #376]	@ (1004acb4 <HAL_UART_IRQHandler+0x2cc>)
1004ab3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004ab3c:	d00b      	beq.n	1004ab56 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004ab3e:	687b      	ldr	r3, [r7, #4]
1004ab40:	681b      	ldr	r3, [r3, #0]
1004ab42:	2208      	movs	r2, #8
1004ab44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
1004ab46:	687b      	ldr	r3, [r7, #4]
1004ab48:	2290      	movs	r2, #144	@ 0x90
1004ab4a:	589b      	ldr	r3, [r3, r2]
1004ab4c:	2208      	movs	r2, #8
1004ab4e:	431a      	orrs	r2, r3
1004ab50:	687b      	ldr	r3, [r7, #4]
1004ab52:	2190      	movs	r1, #144	@ 0x90
1004ab54:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004ab56:	23a4      	movs	r3, #164	@ 0xa4
1004ab58:	18fb      	adds	r3, r7, r3
1004ab5a:	681a      	ldr	r2, [r3, #0]
1004ab5c:	2380      	movs	r3, #128	@ 0x80
1004ab5e:	011b      	lsls	r3, r3, #4
1004ab60:	4013      	ands	r3, r2
1004ab62:	d013      	beq.n	1004ab8c <HAL_UART_IRQHandler+0x1a4>
1004ab64:	23a0      	movs	r3, #160	@ 0xa0
1004ab66:	18fb      	adds	r3, r7, r3
1004ab68:	681a      	ldr	r2, [r3, #0]
1004ab6a:	2380      	movs	r3, #128	@ 0x80
1004ab6c:	04db      	lsls	r3, r3, #19
1004ab6e:	4013      	ands	r3, r2
1004ab70:	d00c      	beq.n	1004ab8c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004ab72:	687b      	ldr	r3, [r7, #4]
1004ab74:	681b      	ldr	r3, [r3, #0]
1004ab76:	2280      	movs	r2, #128	@ 0x80
1004ab78:	0112      	lsls	r2, r2, #4
1004ab7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
1004ab7c:	687b      	ldr	r3, [r7, #4]
1004ab7e:	2290      	movs	r2, #144	@ 0x90
1004ab80:	589b      	ldr	r3, [r3, r2]
1004ab82:	2220      	movs	r2, #32
1004ab84:	431a      	orrs	r2, r3
1004ab86:	687b      	ldr	r3, [r7, #4]
1004ab88:	2190      	movs	r1, #144	@ 0x90
1004ab8a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
1004ab8c:	687b      	ldr	r3, [r7, #4]
1004ab8e:	2290      	movs	r2, #144	@ 0x90
1004ab90:	589b      	ldr	r3, [r3, r2]
1004ab92:	2b00      	cmp	r3, #0
1004ab94:	d100      	bne.n	1004ab98 <HAL_UART_IRQHandler+0x1b0>
1004ab96:	e26b      	b.n	1004b070 <HAL_UART_IRQHandler+0x688>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004ab98:	23a4      	movs	r3, #164	@ 0xa4
1004ab9a:	18fb      	adds	r3, r7, r3
1004ab9c:	681b      	ldr	r3, [r3, #0]
1004ab9e:	2220      	movs	r2, #32
1004aba0:	4013      	ands	r3, r2
1004aba2:	d015      	beq.n	1004abd0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004aba4:	23a0      	movs	r3, #160	@ 0xa0
1004aba6:	18fb      	adds	r3, r7, r3
1004aba8:	681b      	ldr	r3, [r3, #0]
1004abaa:	2220      	movs	r2, #32
1004abac:	4013      	ands	r3, r2
1004abae:	d106      	bne.n	1004abbe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004abb0:	239c      	movs	r3, #156	@ 0x9c
1004abb2:	18fb      	adds	r3, r7, r3
1004abb4:	681a      	ldr	r2, [r3, #0]
1004abb6:	2380      	movs	r3, #128	@ 0x80
1004abb8:	055b      	lsls	r3, r3, #21
1004abba:	4013      	ands	r3, r2
1004abbc:	d008      	beq.n	1004abd0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
1004abbe:	687b      	ldr	r3, [r7, #4]
1004abc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004abc2:	2b00      	cmp	r3, #0
1004abc4:	d004      	beq.n	1004abd0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
1004abc6:	687b      	ldr	r3, [r7, #4]
1004abc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004abca:	687a      	ldr	r2, [r7, #4]
1004abcc:	0010      	movs	r0, r2
1004abce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
1004abd0:	687b      	ldr	r3, [r7, #4]
1004abd2:	2290      	movs	r2, #144	@ 0x90
1004abd4:	589b      	ldr	r3, [r3, r2]
1004abd6:	2194      	movs	r1, #148	@ 0x94
1004abd8:	187a      	adds	r2, r7, r1
1004abda:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
1004abdc:	687b      	ldr	r3, [r7, #4]
1004abde:	681b      	ldr	r3, [r3, #0]
1004abe0:	689b      	ldr	r3, [r3, #8]
1004abe2:	2240      	movs	r2, #64	@ 0x40
1004abe4:	4013      	ands	r3, r2
1004abe6:	2b40      	cmp	r3, #64	@ 0x40
1004abe8:	d004      	beq.n	1004abf4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
1004abea:	187b      	adds	r3, r7, r1
1004abec:	681b      	ldr	r3, [r3, #0]
1004abee:	2228      	movs	r2, #40	@ 0x28
1004abf0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
1004abf2:	d050      	beq.n	1004ac96 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
1004abf4:	687b      	ldr	r3, [r7, #4]
1004abf6:	0018      	movs	r0, r3
1004abf8:	f000 fe1c 	bl	1004b834 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004abfc:	687b      	ldr	r3, [r7, #4]
1004abfe:	681b      	ldr	r3, [r3, #0]
1004ac00:	689b      	ldr	r3, [r3, #8]
1004ac02:	2240      	movs	r2, #64	@ 0x40
1004ac04:	4013      	ands	r3, r2
1004ac06:	2b40      	cmp	r3, #64	@ 0x40
1004ac08:	d13e      	bne.n	1004ac88 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ac0a:	f3ef 8310 	mrs	r3, PRIMASK
1004ac0e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
1004ac10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1004ac12:	2090      	movs	r0, #144	@ 0x90
1004ac14:	183a      	adds	r2, r7, r0
1004ac16:	6013      	str	r3, [r2, #0]
1004ac18:	2301      	movs	r3, #1
1004ac1a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ac1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004ac1e:	f383 8810 	msr	PRIMASK, r3
}
1004ac22:	46c0      	nop			@ (mov r8, r8)
1004ac24:	687b      	ldr	r3, [r7, #4]
1004ac26:	681b      	ldr	r3, [r3, #0]
1004ac28:	689a      	ldr	r2, [r3, #8]
1004ac2a:	687b      	ldr	r3, [r7, #4]
1004ac2c:	681b      	ldr	r3, [r3, #0]
1004ac2e:	2140      	movs	r1, #64	@ 0x40
1004ac30:	438a      	bics	r2, r1
1004ac32:	609a      	str	r2, [r3, #8]
1004ac34:	183b      	adds	r3, r7, r0
1004ac36:	681b      	ldr	r3, [r3, #0]
1004ac38:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ac3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1004ac3c:	f383 8810 	msr	PRIMASK, r3
}
1004ac40:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
1004ac42:	687b      	ldr	r3, [r7, #4]
1004ac44:	2280      	movs	r2, #128	@ 0x80
1004ac46:	589b      	ldr	r3, [r3, r2]
1004ac48:	2b00      	cmp	r3, #0
1004ac4a:	d016      	beq.n	1004ac7a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
1004ac4c:	687b      	ldr	r3, [r7, #4]
1004ac4e:	2280      	movs	r2, #128	@ 0x80
1004ac50:	589b      	ldr	r3, [r3, r2]
1004ac52:	4a1a      	ldr	r2, [pc, #104]	@ (1004acbc <HAL_UART_IRQHandler+0x2d4>)
1004ac54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1004ac56:	687b      	ldr	r3, [r7, #4]
1004ac58:	2280      	movs	r2, #128	@ 0x80
1004ac5a:	589b      	ldr	r3, [r3, r2]
1004ac5c:	0018      	movs	r0, r3
1004ac5e:	f7f9 ffb8 	bl	10044bd2 <HAL_DMA_Abort_IT>
1004ac62:	1e03      	subs	r3, r0, #0
1004ac64:	d022      	beq.n	1004acac <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
1004ac66:	687b      	ldr	r3, [r7, #4]
1004ac68:	2280      	movs	r2, #128	@ 0x80
1004ac6a:	589b      	ldr	r3, [r3, r2]
1004ac6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004ac6e:	687a      	ldr	r2, [r7, #4]
1004ac70:	2180      	movs	r1, #128	@ 0x80
1004ac72:	5852      	ldr	r2, [r2, r1]
1004ac74:	0010      	movs	r0, r2
1004ac76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004ac78:	e018      	b.n	1004acac <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
1004ac7a:	687b      	ldr	r3, [r7, #4]
1004ac7c:	22a4      	movs	r2, #164	@ 0xa4
1004ac7e:	589b      	ldr	r3, [r3, r2]
1004ac80:	687a      	ldr	r2, [r7, #4]
1004ac82:	0010      	movs	r0, r2
1004ac84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004ac86:	e011      	b.n	1004acac <HAL_UART_IRQHandler+0x2c4>
#endif /* HAL_DMA_MODULE_ENABLED */
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
1004ac88:	687b      	ldr	r3, [r7, #4]
1004ac8a:	22a4      	movs	r2, #164	@ 0xa4
1004ac8c:	589b      	ldr	r3, [r3, r2]
1004ac8e:	687a      	ldr	r2, [r7, #4]
1004ac90:	0010      	movs	r0, r2
1004ac92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004ac94:	e00a      	b.n	1004acac <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
1004ac96:	687b      	ldr	r3, [r7, #4]
1004ac98:	22a4      	movs	r2, #164	@ 0xa4
1004ac9a:	589b      	ldr	r3, [r3, r2]
1004ac9c:	687a      	ldr	r2, [r7, #4]
1004ac9e:	0010      	movs	r0, r2
1004aca0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
1004aca2:	687b      	ldr	r3, [r7, #4]
1004aca4:	2290      	movs	r2, #144	@ 0x90
1004aca6:	2100      	movs	r1, #0
1004aca8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
1004acaa:	e1e1      	b.n	1004b070 <HAL_UART_IRQHandler+0x688>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004acac:	46c0      	nop			@ (mov r8, r8)
    return;
1004acae:	e1df      	b.n	1004b070 <HAL_UART_IRQHandler+0x688>
1004acb0:	0000080f 	.word	0x0000080f
1004acb4:	10000001 	.word	0x10000001
1004acb8:	04000120 	.word	0x04000120
1004acbc:	1004b901 	.word	0x1004b901

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004acc0:	687b      	ldr	r3, [r7, #4]
1004acc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004acc4:	2b01      	cmp	r3, #1
1004acc6:	d000      	beq.n	1004acca <HAL_UART_IRQHandler+0x2e2>
1004acc8:	e160      	b.n	1004af8c <HAL_UART_IRQHandler+0x5a4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
1004acca:	23a4      	movs	r3, #164	@ 0xa4
1004accc:	18fb      	adds	r3, r7, r3
1004acce:	681b      	ldr	r3, [r3, #0]
1004acd0:	2210      	movs	r2, #16
1004acd2:	4013      	ands	r3, r2
1004acd4:	d100      	bne.n	1004acd8 <HAL_UART_IRQHandler+0x2f0>
1004acd6:	e159      	b.n	1004af8c <HAL_UART_IRQHandler+0x5a4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
1004acd8:	23a0      	movs	r3, #160	@ 0xa0
1004acda:	18fb      	adds	r3, r7, r3
1004acdc:	681b      	ldr	r3, [r3, #0]
1004acde:	2210      	movs	r2, #16
1004ace0:	4013      	ands	r3, r2
1004ace2:	d100      	bne.n	1004ace6 <HAL_UART_IRQHandler+0x2fe>
1004ace4:	e152      	b.n	1004af8c <HAL_UART_IRQHandler+0x5a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
1004ace6:	687b      	ldr	r3, [r7, #4]
1004ace8:	681b      	ldr	r3, [r3, #0]
1004acea:	2210      	movs	r2, #16
1004acec:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004acee:	687b      	ldr	r3, [r7, #4]
1004acf0:	681b      	ldr	r3, [r3, #0]
1004acf2:	689b      	ldr	r3, [r3, #8]
1004acf4:	2240      	movs	r2, #64	@ 0x40
1004acf6:	4013      	ands	r3, r2
1004acf8:	2b40      	cmp	r3, #64	@ 0x40
1004acfa:	d000      	beq.n	1004acfe <HAL_UART_IRQHandler+0x316>
1004acfc:	e0c5      	b.n	1004ae8a <HAL_UART_IRQHandler+0x4a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
1004acfe:	687b      	ldr	r3, [r7, #4]
1004ad00:	2280      	movs	r2, #128	@ 0x80
1004ad02:	589b      	ldr	r3, [r3, r2]
1004ad04:	681b      	ldr	r3, [r3, #0]
1004ad06:	685a      	ldr	r2, [r3, #4]
1004ad08:	217e      	movs	r1, #126	@ 0x7e
1004ad0a:	187b      	adds	r3, r7, r1
1004ad0c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
1004ad0e:	187b      	adds	r3, r7, r1
1004ad10:	881b      	ldrh	r3, [r3, #0]
1004ad12:	2b00      	cmp	r3, #0
1004ad14:	d100      	bne.n	1004ad18 <HAL_UART_IRQHandler+0x330>
1004ad16:	e098      	b.n	1004ae4a <HAL_UART_IRQHandler+0x462>
          && (nb_remaining_rx_data < huart->RxXferSize))
1004ad18:	687b      	ldr	r3, [r7, #4]
1004ad1a:	225c      	movs	r2, #92	@ 0x5c
1004ad1c:	5a9b      	ldrh	r3, [r3, r2]
1004ad1e:	187a      	adds	r2, r7, r1
1004ad20:	8812      	ldrh	r2, [r2, #0]
1004ad22:	429a      	cmp	r2, r3
1004ad24:	d300      	bcc.n	1004ad28 <HAL_UART_IRQHandler+0x340>
1004ad26:	e090      	b.n	1004ae4a <HAL_UART_IRQHandler+0x462>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
1004ad28:	687b      	ldr	r3, [r7, #4]
1004ad2a:	187a      	adds	r2, r7, r1
1004ad2c:	215e      	movs	r1, #94	@ 0x5e
1004ad2e:	8812      	ldrh	r2, [r2, #0]
1004ad30:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
1004ad32:	687b      	ldr	r3, [r7, #4]
1004ad34:	2280      	movs	r2, #128	@ 0x80
1004ad36:	589b      	ldr	r3, [r3, r2]
1004ad38:	681b      	ldr	r3, [r3, #0]
1004ad3a:	681b      	ldr	r3, [r3, #0]
1004ad3c:	2220      	movs	r2, #32
1004ad3e:	4013      	ands	r3, r2
1004ad40:	d170      	bne.n	1004ae24 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ad42:	f3ef 8310 	mrs	r3, PRIMASK
1004ad46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004ad48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1004ad4a:	67bb      	str	r3, [r7, #120]	@ 0x78
1004ad4c:	2301      	movs	r3, #1
1004ad4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ad50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ad52:	f383 8810 	msr	PRIMASK, r3
}
1004ad56:	46c0      	nop			@ (mov r8, r8)
1004ad58:	687b      	ldr	r3, [r7, #4]
1004ad5a:	681b      	ldr	r3, [r3, #0]
1004ad5c:	681a      	ldr	r2, [r3, #0]
1004ad5e:	687b      	ldr	r3, [r7, #4]
1004ad60:	681b      	ldr	r3, [r3, #0]
1004ad62:	49c8      	ldr	r1, [pc, #800]	@ (1004b084 <HAL_UART_IRQHandler+0x69c>)
1004ad64:	400a      	ands	r2, r1
1004ad66:	601a      	str	r2, [r3, #0]
1004ad68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
1004ad6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ad6e:	f383 8810 	msr	PRIMASK, r3
}
1004ad72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ad74:	f3ef 8310 	mrs	r3, PRIMASK
1004ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
1004ad7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004ad7c:	677b      	str	r3, [r7, #116]	@ 0x74
1004ad7e:	2301      	movs	r3, #1
1004ad80:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ad82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004ad84:	f383 8810 	msr	PRIMASK, r3
}
1004ad88:	46c0      	nop			@ (mov r8, r8)
1004ad8a:	687b      	ldr	r3, [r7, #4]
1004ad8c:	681b      	ldr	r3, [r3, #0]
1004ad8e:	689a      	ldr	r2, [r3, #8]
1004ad90:	687b      	ldr	r3, [r7, #4]
1004ad92:	681b      	ldr	r3, [r3, #0]
1004ad94:	2101      	movs	r1, #1
1004ad96:	438a      	bics	r2, r1
1004ad98:	609a      	str	r2, [r3, #8]
1004ad9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
1004ad9c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ad9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004ada0:	f383 8810 	msr	PRIMASK, r3
}
1004ada4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ada6:	f3ef 8310 	mrs	r3, PRIMASK
1004adaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
1004adac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1004adae:	673b      	str	r3, [r7, #112]	@ 0x70
1004adb0:	2301      	movs	r3, #1
1004adb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004adb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004adb6:	f383 8810 	msr	PRIMASK, r3
}
1004adba:	46c0      	nop			@ (mov r8, r8)
1004adbc:	687b      	ldr	r3, [r7, #4]
1004adbe:	681b      	ldr	r3, [r3, #0]
1004adc0:	689a      	ldr	r2, [r3, #8]
1004adc2:	687b      	ldr	r3, [r7, #4]
1004adc4:	681b      	ldr	r3, [r3, #0]
1004adc6:	2140      	movs	r1, #64	@ 0x40
1004adc8:	438a      	bics	r2, r1
1004adca:	609a      	str	r2, [r3, #8]
1004adcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1004adce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004add0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
1004add2:	f383 8810 	msr	PRIMASK, r3
}
1004add6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
1004add8:	687b      	ldr	r3, [r7, #4]
1004adda:	228c      	movs	r2, #140	@ 0x8c
1004addc:	2120      	movs	r1, #32
1004adde:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004ade0:	687b      	ldr	r3, [r7, #4]
1004ade2:	2200      	movs	r2, #0
1004ade4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ade6:	f3ef 8310 	mrs	r3, PRIMASK
1004adea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
1004adec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004adee:	66fb      	str	r3, [r7, #108]	@ 0x6c
1004adf0:	2301      	movs	r3, #1
1004adf2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004adf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
1004adf6:	f383 8810 	msr	PRIMASK, r3
}
1004adfa:	46c0      	nop			@ (mov r8, r8)
1004adfc:	687b      	ldr	r3, [r7, #4]
1004adfe:	681b      	ldr	r3, [r3, #0]
1004ae00:	681a      	ldr	r2, [r3, #0]
1004ae02:	687b      	ldr	r3, [r7, #4]
1004ae04:	681b      	ldr	r3, [r3, #0]
1004ae06:	2110      	movs	r1, #16
1004ae08:	438a      	bics	r2, r1
1004ae0a:	601a      	str	r2, [r3, #0]
1004ae0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
1004ae0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ae10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1004ae12:	f383 8810 	msr	PRIMASK, r3
}
1004ae16:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
1004ae18:	687b      	ldr	r3, [r7, #4]
1004ae1a:	2280      	movs	r2, #128	@ 0x80
1004ae1c:	589b      	ldr	r3, [r3, r2]
1004ae1e:	0018      	movs	r0, r3
1004ae20:	f7f9 fe98 	bl	10044b54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004ae24:	687b      	ldr	r3, [r7, #4]
1004ae26:	2202      	movs	r2, #2
1004ae28:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
1004ae2a:	687b      	ldr	r3, [r7, #4]
1004ae2c:	22c0      	movs	r2, #192	@ 0xc0
1004ae2e:	589b      	ldr	r3, [r3, r2]
1004ae30:	687a      	ldr	r2, [r7, #4]
1004ae32:	215c      	movs	r1, #92	@ 0x5c
1004ae34:	5a51      	ldrh	r1, [r2, r1]
1004ae36:	687a      	ldr	r2, [r7, #4]
1004ae38:	205e      	movs	r0, #94	@ 0x5e
1004ae3a:	5a12      	ldrh	r2, [r2, r0]
1004ae3c:	b292      	uxth	r2, r2
1004ae3e:	1a8a      	subs	r2, r1, r2
1004ae40:	b291      	uxth	r1, r2
1004ae42:	687a      	ldr	r2, [r7, #4]
1004ae44:	0010      	movs	r0, r2
1004ae46:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
1004ae48:	e114      	b.n	1004b074 <HAL_UART_IRQHandler+0x68c>
        if (nb_remaining_rx_data == huart->RxXferSize)
1004ae4a:	687b      	ldr	r3, [r7, #4]
1004ae4c:	225c      	movs	r2, #92	@ 0x5c
1004ae4e:	5a9b      	ldrh	r3, [r3, r2]
1004ae50:	227e      	movs	r2, #126	@ 0x7e
1004ae52:	18ba      	adds	r2, r7, r2
1004ae54:	8812      	ldrh	r2, [r2, #0]
1004ae56:	429a      	cmp	r2, r3
1004ae58:	d000      	beq.n	1004ae5c <HAL_UART_IRQHandler+0x474>
1004ae5a:	e10b      	b.n	1004b074 <HAL_UART_IRQHandler+0x68c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
1004ae5c:	687b      	ldr	r3, [r7, #4]
1004ae5e:	2280      	movs	r2, #128	@ 0x80
1004ae60:	589b      	ldr	r3, [r3, r2]
1004ae62:	681b      	ldr	r3, [r3, #0]
1004ae64:	681b      	ldr	r3, [r3, #0]
1004ae66:	2220      	movs	r2, #32
1004ae68:	4013      	ands	r3, r2
1004ae6a:	2b20      	cmp	r3, #32
1004ae6c:	d000      	beq.n	1004ae70 <HAL_UART_IRQHandler+0x488>
1004ae6e:	e101      	b.n	1004b074 <HAL_UART_IRQHandler+0x68c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004ae70:	687b      	ldr	r3, [r7, #4]
1004ae72:	2202      	movs	r2, #2
1004ae74:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
1004ae76:	687b      	ldr	r3, [r7, #4]
1004ae78:	22c0      	movs	r2, #192	@ 0xc0
1004ae7a:	589b      	ldr	r3, [r3, r2]
1004ae7c:	687a      	ldr	r2, [r7, #4]
1004ae7e:	215c      	movs	r1, #92	@ 0x5c
1004ae80:	5a51      	ldrh	r1, [r2, r1]
1004ae82:	687a      	ldr	r2, [r7, #4]
1004ae84:	0010      	movs	r0, r2
1004ae86:	4798      	blx	r3
      return;
1004ae88:	e0f4      	b.n	1004b074 <HAL_UART_IRQHandler+0x68c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
1004ae8a:	687b      	ldr	r3, [r7, #4]
1004ae8c:	225c      	movs	r2, #92	@ 0x5c
1004ae8e:	5a99      	ldrh	r1, [r3, r2]
1004ae90:	687b      	ldr	r3, [r7, #4]
1004ae92:	225e      	movs	r2, #94	@ 0x5e
1004ae94:	5a9b      	ldrh	r3, [r3, r2]
1004ae96:	b29a      	uxth	r2, r3
1004ae98:	208e      	movs	r0, #142	@ 0x8e
1004ae9a:	183b      	adds	r3, r7, r0
1004ae9c:	1a8a      	subs	r2, r1, r2
1004ae9e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
1004aea0:	687b      	ldr	r3, [r7, #4]
1004aea2:	225e      	movs	r2, #94	@ 0x5e
1004aea4:	5a9b      	ldrh	r3, [r3, r2]
1004aea6:	b29b      	uxth	r3, r3
1004aea8:	2b00      	cmp	r3, #0
1004aeaa:	d100      	bne.n	1004aeae <HAL_UART_IRQHandler+0x4c6>
1004aeac:	e0e4      	b.n	1004b078 <HAL_UART_IRQHandler+0x690>
          && (nb_rx_data > 0U))
1004aeae:	183b      	adds	r3, r7, r0
1004aeb0:	881b      	ldrh	r3, [r3, #0]
1004aeb2:	2b00      	cmp	r3, #0
1004aeb4:	d100      	bne.n	1004aeb8 <HAL_UART_IRQHandler+0x4d0>
1004aeb6:	e0df      	b.n	1004b078 <HAL_UART_IRQHandler+0x690>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004aeb8:	f3ef 8310 	mrs	r3, PRIMASK
1004aebc:	60fb      	str	r3, [r7, #12]
  return(result);
1004aebe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004aec0:	2488      	movs	r4, #136	@ 0x88
1004aec2:	193a      	adds	r2, r7, r4
1004aec4:	6013      	str	r3, [r2, #0]
1004aec6:	2301      	movs	r3, #1
1004aec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004aeca:	693b      	ldr	r3, [r7, #16]
1004aecc:	f383 8810 	msr	PRIMASK, r3
}
1004aed0:	46c0      	nop			@ (mov r8, r8)
1004aed2:	687b      	ldr	r3, [r7, #4]
1004aed4:	681b      	ldr	r3, [r3, #0]
1004aed6:	681a      	ldr	r2, [r3, #0]
1004aed8:	687b      	ldr	r3, [r7, #4]
1004aeda:	681b      	ldr	r3, [r3, #0]
1004aedc:	496a      	ldr	r1, [pc, #424]	@ (1004b088 <HAL_UART_IRQHandler+0x6a0>)
1004aede:	400a      	ands	r2, r1
1004aee0:	601a      	str	r2, [r3, #0]
1004aee2:	193b      	adds	r3, r7, r4
1004aee4:	681b      	ldr	r3, [r3, #0]
1004aee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004aee8:	697b      	ldr	r3, [r7, #20]
1004aeea:	f383 8810 	msr	PRIMASK, r3
}
1004aeee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004aef0:	f3ef 8310 	mrs	r3, PRIMASK
1004aef4:	61bb      	str	r3, [r7, #24]
  return(result);
1004aef6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004aef8:	2484      	movs	r4, #132	@ 0x84
1004aefa:	193a      	adds	r2, r7, r4
1004aefc:	6013      	str	r3, [r2, #0]
1004aefe:	2301      	movs	r3, #1
1004af00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004af02:	69fb      	ldr	r3, [r7, #28]
1004af04:	f383 8810 	msr	PRIMASK, r3
}
1004af08:	46c0      	nop			@ (mov r8, r8)
1004af0a:	687b      	ldr	r3, [r7, #4]
1004af0c:	681b      	ldr	r3, [r3, #0]
1004af0e:	689a      	ldr	r2, [r3, #8]
1004af10:	687b      	ldr	r3, [r7, #4]
1004af12:	681b      	ldr	r3, [r3, #0]
1004af14:	495d      	ldr	r1, [pc, #372]	@ (1004b08c <HAL_UART_IRQHandler+0x6a4>)
1004af16:	400a      	ands	r2, r1
1004af18:	609a      	str	r2, [r3, #8]
1004af1a:	193b      	adds	r3, r7, r4
1004af1c:	681b      	ldr	r3, [r3, #0]
1004af1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004af20:	6a3b      	ldr	r3, [r7, #32]
1004af22:	f383 8810 	msr	PRIMASK, r3
}
1004af26:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
1004af28:	687b      	ldr	r3, [r7, #4]
1004af2a:	228c      	movs	r2, #140	@ 0x8c
1004af2c:	2120      	movs	r1, #32
1004af2e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004af30:	687b      	ldr	r3, [r7, #4]
1004af32:	2200      	movs	r2, #0
1004af34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
1004af36:	687b      	ldr	r3, [r7, #4]
1004af38:	2200      	movs	r2, #0
1004af3a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004af3c:	f3ef 8310 	mrs	r3, PRIMASK
1004af40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004af44:	2480      	movs	r4, #128	@ 0x80
1004af46:	193a      	adds	r2, r7, r4
1004af48:	6013      	str	r3, [r2, #0]
1004af4a:	2301      	movs	r3, #1
1004af4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004af4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004af50:	f383 8810 	msr	PRIMASK, r3
}
1004af54:	46c0      	nop			@ (mov r8, r8)
1004af56:	687b      	ldr	r3, [r7, #4]
1004af58:	681b      	ldr	r3, [r3, #0]
1004af5a:	681a      	ldr	r2, [r3, #0]
1004af5c:	687b      	ldr	r3, [r7, #4]
1004af5e:	681b      	ldr	r3, [r3, #0]
1004af60:	2110      	movs	r1, #16
1004af62:	438a      	bics	r2, r1
1004af64:	601a      	str	r2, [r3, #0]
1004af66:	193b      	adds	r3, r7, r4
1004af68:	681b      	ldr	r3, [r3, #0]
1004af6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004af6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004af6e:	f383 8810 	msr	PRIMASK, r3
}
1004af72:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004af74:	687b      	ldr	r3, [r7, #4]
1004af76:	2202      	movs	r2, #2
1004af78:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
1004af7a:	687b      	ldr	r3, [r7, #4]
1004af7c:	22c0      	movs	r2, #192	@ 0xc0
1004af7e:	589b      	ldr	r3, [r3, r2]
1004af80:	183a      	adds	r2, r7, r0
1004af82:	8811      	ldrh	r1, [r2, #0]
1004af84:	687a      	ldr	r2, [r7, #4]
1004af86:	0010      	movs	r0, r2
1004af88:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
1004af8a:	e075      	b.n	1004b078 <HAL_UART_IRQHandler+0x690>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
1004af8c:	23a4      	movs	r3, #164	@ 0xa4
1004af8e:	18fb      	adds	r3, r7, r3
1004af90:	681a      	ldr	r2, [r3, #0]
1004af92:	2380      	movs	r3, #128	@ 0x80
1004af94:	035b      	lsls	r3, r3, #13
1004af96:	4013      	ands	r3, r2
1004af98:	d012      	beq.n	1004afc0 <HAL_UART_IRQHandler+0x5d8>
1004af9a:	239c      	movs	r3, #156	@ 0x9c
1004af9c:	18fb      	adds	r3, r7, r3
1004af9e:	681a      	ldr	r2, [r3, #0]
1004afa0:	2380      	movs	r3, #128	@ 0x80
1004afa2:	03db      	lsls	r3, r3, #15
1004afa4:	4013      	ands	r3, r2
1004afa6:	d00b      	beq.n	1004afc0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
1004afa8:	687b      	ldr	r3, [r7, #4]
1004afaa:	681b      	ldr	r3, [r3, #0]
1004afac:	2280      	movs	r2, #128	@ 0x80
1004afae:	0352      	lsls	r2, r2, #13
1004afb0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
1004afb2:	687b      	ldr	r3, [r7, #4]
1004afb4:	22b4      	movs	r2, #180	@ 0xb4
1004afb6:	589b      	ldr	r3, [r3, r2]
1004afb8:	687a      	ldr	r2, [r7, #4]
1004afba:	0010      	movs	r0, r2
1004afbc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004afbe:	e05e      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004afc0:	23a4      	movs	r3, #164	@ 0xa4
1004afc2:	18fb      	adds	r3, r7, r3
1004afc4:	681b      	ldr	r3, [r3, #0]
1004afc6:	2280      	movs	r2, #128	@ 0x80
1004afc8:	4013      	ands	r3, r2
1004afca:	d016      	beq.n	1004affa <HAL_UART_IRQHandler+0x612>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004afcc:	23a0      	movs	r3, #160	@ 0xa0
1004afce:	18fb      	adds	r3, r7, r3
1004afd0:	681b      	ldr	r3, [r3, #0]
1004afd2:	2280      	movs	r2, #128	@ 0x80
1004afd4:	4013      	ands	r3, r2
1004afd6:	d106      	bne.n	1004afe6 <HAL_UART_IRQHandler+0x5fe>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004afd8:	239c      	movs	r3, #156	@ 0x9c
1004afda:	18fb      	adds	r3, r7, r3
1004afdc:	681a      	ldr	r2, [r3, #0]
1004afde:	2380      	movs	r3, #128	@ 0x80
1004afe0:	041b      	lsls	r3, r3, #16
1004afe2:	4013      	ands	r3, r2
1004afe4:	d009      	beq.n	1004affa <HAL_UART_IRQHandler+0x612>
  {
    if (huart->TxISR != NULL)
1004afe6:	687b      	ldr	r3, [r7, #4]
1004afe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1004afea:	2b00      	cmp	r3, #0
1004afec:	d046      	beq.n	1004b07c <HAL_UART_IRQHandler+0x694>
    {
      huart->TxISR(huart);
1004afee:	687b      	ldr	r3, [r7, #4]
1004aff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1004aff2:	687a      	ldr	r2, [r7, #4]
1004aff4:	0010      	movs	r0, r2
1004aff6:	4798      	blx	r3
    }
    return;
1004aff8:	e040      	b.n	1004b07c <HAL_UART_IRQHandler+0x694>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004affa:	23a4      	movs	r3, #164	@ 0xa4
1004affc:	18fb      	adds	r3, r7, r3
1004affe:	681b      	ldr	r3, [r3, #0]
1004b000:	2240      	movs	r2, #64	@ 0x40
1004b002:	4013      	ands	r3, r2
1004b004:	d00a      	beq.n	1004b01c <HAL_UART_IRQHandler+0x634>
1004b006:	23a0      	movs	r3, #160	@ 0xa0
1004b008:	18fb      	adds	r3, r7, r3
1004b00a:	681b      	ldr	r3, [r3, #0]
1004b00c:	2240      	movs	r2, #64	@ 0x40
1004b00e:	4013      	ands	r3, r2
1004b010:	d004      	beq.n	1004b01c <HAL_UART_IRQHandler+0x634>
  {
    UART_EndTransmit_IT(huart);
1004b012:	687b      	ldr	r3, [r7, #4]
1004b014:	0018      	movs	r0, r3
1004b016:	f000 fc88 	bl	1004b92a <UART_EndTransmit_IT>
    return;
1004b01a:	e030      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004b01c:	23a4      	movs	r3, #164	@ 0xa4
1004b01e:	18fb      	adds	r3, r7, r3
1004b020:	681a      	ldr	r2, [r3, #0]
1004b022:	2380      	movs	r3, #128	@ 0x80
1004b024:	041b      	lsls	r3, r3, #16
1004b026:	4013      	ands	r3, r2
1004b028:	d00d      	beq.n	1004b046 <HAL_UART_IRQHandler+0x65e>
1004b02a:	23a0      	movs	r3, #160	@ 0xa0
1004b02c:	18fb      	adds	r3, r7, r3
1004b02e:	681a      	ldr	r2, [r3, #0]
1004b030:	2380      	movs	r3, #128	@ 0x80
1004b032:	05db      	lsls	r3, r3, #23
1004b034:	4013      	ands	r3, r2
1004b036:	d006      	beq.n	1004b046 <HAL_UART_IRQHandler+0x65e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
1004b038:	687b      	ldr	r3, [r7, #4]
1004b03a:	22bc      	movs	r2, #188	@ 0xbc
1004b03c:	589b      	ldr	r3, [r3, r2]
1004b03e:	687a      	ldr	r2, [r7, #4]
1004b040:	0010      	movs	r0, r2
1004b042:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004b044:	e01b      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004b046:	23a4      	movs	r3, #164	@ 0xa4
1004b048:	18fb      	adds	r3, r7, r3
1004b04a:	681a      	ldr	r2, [r3, #0]
1004b04c:	2380      	movs	r3, #128	@ 0x80
1004b04e:	045b      	lsls	r3, r3, #17
1004b050:	4013      	ands	r3, r2
1004b052:	d014      	beq.n	1004b07e <HAL_UART_IRQHandler+0x696>
1004b054:	23a0      	movs	r3, #160	@ 0xa0
1004b056:	18fb      	adds	r3, r7, r3
1004b058:	681b      	ldr	r3, [r3, #0]
1004b05a:	2b00      	cmp	r3, #0
1004b05c:	da0f      	bge.n	1004b07e <HAL_UART_IRQHandler+0x696>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
1004b05e:	687b      	ldr	r3, [r7, #4]
1004b060:	22b8      	movs	r2, #184	@ 0xb8
1004b062:	589b      	ldr	r3, [r3, r2]
1004b064:	687a      	ldr	r2, [r7, #4]
1004b066:	0010      	movs	r0, r2
1004b068:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004b06a:	e008      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
      return;
1004b06c:	46c0      	nop			@ (mov r8, r8)
1004b06e:	e006      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
    return;
1004b070:	46c0      	nop			@ (mov r8, r8)
1004b072:	e004      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
      return;
1004b074:	46c0      	nop			@ (mov r8, r8)
1004b076:	e002      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
      return;
1004b078:	46c0      	nop			@ (mov r8, r8)
1004b07a:	e000      	b.n	1004b07e <HAL_UART_IRQHandler+0x696>
    return;
1004b07c:	46c0      	nop			@ (mov r8, r8)
  }
}
1004b07e:	46bd      	mov	sp, r7
1004b080:	b02a      	add	sp, #168	@ 0xa8
1004b082:	bdb0      	pop	{r4, r5, r7, pc}
1004b084:	fffffeff 	.word	0xfffffeff
1004b088:	fffffedf 	.word	0xfffffedf
1004b08c:	effffffe 	.word	0xeffffffe

1004b090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
1004b090:	b580      	push	{r7, lr}
1004b092:	b082      	sub	sp, #8
1004b094:	af00      	add	r7, sp, #0
1004b096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
1004b098:	46c0      	nop			@ (mov r8, r8)
1004b09a:	46bd      	mov	sp, r7
1004b09c:	b002      	add	sp, #8
1004b09e:	bd80      	pop	{r7, pc}

1004b0a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004b0a0:	b580      	push	{r7, lr}
1004b0a2:	b082      	sub	sp, #8
1004b0a4:	af00      	add	r7, sp, #0
1004b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
1004b0a8:	46c0      	nop			@ (mov r8, r8)
1004b0aa:	46bd      	mov	sp, r7
1004b0ac:	b002      	add	sp, #8
1004b0ae:	bd80      	pop	{r7, pc}

1004b0b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
1004b0b0:	b580      	push	{r7, lr}
1004b0b2:	b082      	sub	sp, #8
1004b0b4:	af00      	add	r7, sp, #0
1004b0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
1004b0b8:	46c0      	nop			@ (mov r8, r8)
1004b0ba:	46bd      	mov	sp, r7
1004b0bc:	b002      	add	sp, #8
1004b0be:	bd80      	pop	{r7, pc}

1004b0c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004b0c0:	b580      	push	{r7, lr}
1004b0c2:	b082      	sub	sp, #8
1004b0c4:	af00      	add	r7, sp, #0
1004b0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
1004b0c8:	46c0      	nop			@ (mov r8, r8)
1004b0ca:	46bd      	mov	sp, r7
1004b0cc:	b002      	add	sp, #8
1004b0ce:	bd80      	pop	{r7, pc}

1004b0d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
1004b0d0:	b580      	push	{r7, lr}
1004b0d2:	b082      	sub	sp, #8
1004b0d4:	af00      	add	r7, sp, #0
1004b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
1004b0d8:	46c0      	nop			@ (mov r8, r8)
1004b0da:	46bd      	mov	sp, r7
1004b0dc:	b002      	add	sp, #8
1004b0de:	bd80      	pop	{r7, pc}

1004b0e0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
1004b0e0:	b580      	push	{r7, lr}
1004b0e2:	b082      	sub	sp, #8
1004b0e4:	af00      	add	r7, sp, #0
1004b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
1004b0e8:	46c0      	nop			@ (mov r8, r8)
1004b0ea:	46bd      	mov	sp, r7
1004b0ec:	b002      	add	sp, #8
1004b0ee:	bd80      	pop	{r7, pc}

1004b0f0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
1004b0f0:	b580      	push	{r7, lr}
1004b0f2:	b082      	sub	sp, #8
1004b0f4:	af00      	add	r7, sp, #0
1004b0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
1004b0f8:	46c0      	nop			@ (mov r8, r8)
1004b0fa:	46bd      	mov	sp, r7
1004b0fc:	b002      	add	sp, #8
1004b0fe:	bd80      	pop	{r7, pc}

1004b100 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
1004b100:	b580      	push	{r7, lr}
1004b102:	b082      	sub	sp, #8
1004b104:	af00      	add	r7, sp, #0
1004b106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
1004b108:	46c0      	nop			@ (mov r8, r8)
1004b10a:	46bd      	mov	sp, r7
1004b10c:	b002      	add	sp, #8
1004b10e:	bd80      	pop	{r7, pc}

1004b110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
1004b110:	b580      	push	{r7, lr}
1004b112:	b082      	sub	sp, #8
1004b114:	af00      	add	r7, sp, #0
1004b116:	6078      	str	r0, [r7, #4]
1004b118:	000a      	movs	r2, r1
1004b11a:	1cbb      	adds	r3, r7, #2
1004b11c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
1004b11e:	46c0      	nop			@ (mov r8, r8)
1004b120:	46bd      	mov	sp, r7
1004b122:	b002      	add	sp, #8
1004b124:	bd80      	pop	{r7, pc}
	...

1004b128 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
1004b128:	b580      	push	{r7, lr}
1004b12a:	b082      	sub	sp, #8
1004b12c:	af00      	add	r7, sp, #0
1004b12e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
1004b130:	687b      	ldr	r3, [r7, #4]
1004b132:	2194      	movs	r1, #148	@ 0x94
1004b134:	4a18      	ldr	r2, [pc, #96]	@ (1004b198 <UART_InitCallbacksToDefault+0x70>)
1004b136:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
1004b138:	687b      	ldr	r3, [r7, #4]
1004b13a:	2198      	movs	r1, #152	@ 0x98
1004b13c:	4a17      	ldr	r2, [pc, #92]	@ (1004b19c <UART_InitCallbacksToDefault+0x74>)
1004b13e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
1004b140:	687b      	ldr	r3, [r7, #4]
1004b142:	219c      	movs	r1, #156	@ 0x9c
1004b144:	4a16      	ldr	r2, [pc, #88]	@ (1004b1a0 <UART_InitCallbacksToDefault+0x78>)
1004b146:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
1004b148:	687b      	ldr	r3, [r7, #4]
1004b14a:	21a0      	movs	r1, #160	@ 0xa0
1004b14c:	4a15      	ldr	r2, [pc, #84]	@ (1004b1a4 <UART_InitCallbacksToDefault+0x7c>)
1004b14e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
1004b150:	687b      	ldr	r3, [r7, #4]
1004b152:	21a4      	movs	r1, #164	@ 0xa4
1004b154:	4a14      	ldr	r2, [pc, #80]	@ (1004b1a8 <UART_InitCallbacksToDefault+0x80>)
1004b156:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
1004b158:	687b      	ldr	r3, [r7, #4]
1004b15a:	21a8      	movs	r1, #168	@ 0xa8
1004b15c:	4a13      	ldr	r2, [pc, #76]	@ (1004b1ac <UART_InitCallbacksToDefault+0x84>)
1004b15e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
1004b160:	687b      	ldr	r3, [r7, #4]
1004b162:	21ac      	movs	r1, #172	@ 0xac
1004b164:	4a12      	ldr	r2, [pc, #72]	@ (1004b1b0 <UART_InitCallbacksToDefault+0x88>)
1004b166:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
1004b168:	687b      	ldr	r3, [r7, #4]
1004b16a:	21b0      	movs	r1, #176	@ 0xb0
1004b16c:	4a11      	ldr	r2, [pc, #68]	@ (1004b1b4 <UART_InitCallbacksToDefault+0x8c>)
1004b16e:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1004b170:	687b      	ldr	r3, [r7, #4]
1004b172:	21b4      	movs	r1, #180	@ 0xb4
1004b174:	4a10      	ldr	r2, [pc, #64]	@ (1004b1b8 <UART_InitCallbacksToDefault+0x90>)
1004b176:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
1004b178:	687b      	ldr	r3, [r7, #4]
1004b17a:	21b8      	movs	r1, #184	@ 0xb8
1004b17c:	4a0f      	ldr	r2, [pc, #60]	@ (1004b1bc <UART_InitCallbacksToDefault+0x94>)
1004b17e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1004b180:	687b      	ldr	r3, [r7, #4]
1004b182:	21bc      	movs	r1, #188	@ 0xbc
1004b184:	4a0e      	ldr	r2, [pc, #56]	@ (1004b1c0 <UART_InitCallbacksToDefault+0x98>)
1004b186:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
1004b188:	687b      	ldr	r3, [r7, #4]
1004b18a:	21c0      	movs	r1, #192	@ 0xc0
1004b18c:	4a0d      	ldr	r2, [pc, #52]	@ (1004b1c4 <UART_InitCallbacksToDefault+0x9c>)
1004b18e:	505a      	str	r2, [r3, r1]

}
1004b190:	46c0      	nop			@ (mov r8, r8)
1004b192:	46bd      	mov	sp, r7
1004b194:	b002      	add	sp, #8
1004b196:	bd80      	pop	{r7, pc}
1004b198:	1004b0a1 	.word	0x1004b0a1
1004b19c:	1004b091 	.word	0x1004b091
1004b1a0:	1004b0c1 	.word	0x1004b0c1
1004b1a4:	1004b0b1 	.word	0x1004b0b1
1004b1a8:	1004b0d1 	.word	0x1004b0d1
1004b1ac:	1004b0e1 	.word	0x1004b0e1
1004b1b0:	1004b0f1 	.word	0x1004b0f1
1004b1b4:	1004b101 	.word	0x1004b101
1004b1b8:	1004b987 	.word	0x1004b987
1004b1bc:	1004b997 	.word	0x1004b997
1004b1c0:	1004b9a7 	.word	0x1004b9a7
1004b1c4:	1004b111 	.word	0x1004b111

1004b1c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004b1c8:	b5b0      	push	{r4, r5, r7, lr}
1004b1ca:	b090      	sub	sp, #64	@ 0x40
1004b1cc:	af00      	add	r7, sp, #0
1004b1ce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1004b1d0:	231b      	movs	r3, #27
1004b1d2:	2220      	movs	r2, #32
1004b1d4:	189b      	adds	r3, r3, r2
1004b1d6:	19db      	adds	r3, r3, r7
1004b1d8:	2200      	movs	r2, #0
1004b1da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1004b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b1de:	689a      	ldr	r2, [r3, #8]
1004b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b1e2:	691b      	ldr	r3, [r3, #16]
1004b1e4:	431a      	orrs	r2, r3
1004b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b1e8:	695b      	ldr	r3, [r3, #20]
1004b1ea:	431a      	orrs	r2, r3
1004b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b1ee:	69db      	ldr	r3, [r3, #28]
1004b1f0:	4313      	orrs	r3, r2
1004b1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b1f6:	681b      	ldr	r3, [r3, #0]
1004b1f8:	681b      	ldr	r3, [r3, #0]
1004b1fa:	4aa1      	ldr	r2, [pc, #644]	@ (1004b480 <UART_SetConfig+0x2b8>)
1004b1fc:	4013      	ands	r3, r2
1004b1fe:	0019      	movs	r1, r3
1004b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b202:	681a      	ldr	r2, [r3, #0]
1004b204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b206:	430b      	orrs	r3, r1
1004b208:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b20c:	681b      	ldr	r3, [r3, #0]
1004b20e:	685b      	ldr	r3, [r3, #4]
1004b210:	4a9c      	ldr	r2, [pc, #624]	@ (1004b484 <UART_SetConfig+0x2bc>)
1004b212:	4013      	ands	r3, r2
1004b214:	0018      	movs	r0, r3
1004b216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b218:	68d9      	ldr	r1, [r3, #12]
1004b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b21c:	681a      	ldr	r2, [r3, #0]
1004b21e:	0003      	movs	r3, r0
1004b220:	430b      	orrs	r3, r1
1004b222:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b226:	699b      	ldr	r3, [r3, #24]
1004b228:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004b22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b22c:	681b      	ldr	r3, [r3, #0]
1004b22e:	4a96      	ldr	r2, [pc, #600]	@ (1004b488 <UART_SetConfig+0x2c0>)
1004b230:	4293      	cmp	r3, r2
1004b232:	d004      	beq.n	1004b23e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b236:	6a1b      	ldr	r3, [r3, #32]
1004b238:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004b23a:	4313      	orrs	r3, r2
1004b23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1004b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b240:	681b      	ldr	r3, [r3, #0]
1004b242:	689b      	ldr	r3, [r3, #8]
1004b244:	4a91      	ldr	r2, [pc, #580]	@ (1004b48c <UART_SetConfig+0x2c4>)
1004b246:	4013      	ands	r3, r2
1004b248:	0019      	movs	r1, r3
1004b24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b24c:	681a      	ldr	r2, [r3, #0]
1004b24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b250:	430b      	orrs	r3, r1
1004b252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b256:	681b      	ldr	r3, [r3, #0]
1004b258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004b25a:	220f      	movs	r2, #15
1004b25c:	4393      	bics	r3, r2
1004b25e:	0018      	movs	r0, r3
1004b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b262:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b266:	681a      	ldr	r2, [r3, #0]
1004b268:	0003      	movs	r3, r0
1004b26a:	430b      	orrs	r3, r1
1004b26c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1004b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b270:	681b      	ldr	r3, [r3, #0]
1004b272:	4a85      	ldr	r2, [pc, #532]	@ (1004b488 <UART_SetConfig+0x2c0>)
1004b274:	4293      	cmp	r3, r2
1004b276:	d16d      	bne.n	1004b354 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004b278:	2010      	movs	r0, #16
1004b27a:	f7fe ff13 	bl	1004a0a4 <HAL_RCCEx_GetPeriphCLKFreq>
1004b27e:	0003      	movs	r3, r0
1004b280:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b284:	2b00      	cmp	r3, #0
1004b286:	d100      	bne.n	1004b28a <UART_SetConfig+0xc2>
1004b288:	e0e3      	b.n	1004b452 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b28c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004b28e:	4b80      	ldr	r3, [pc, #512]	@ (1004b490 <UART_SetConfig+0x2c8>)
1004b290:	0052      	lsls	r2, r2, #1
1004b292:	5ad3      	ldrh	r3, [r2, r3]
1004b294:	0019      	movs	r1, r3
1004b296:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004b298:	f7f4 ffd2 	bl	10040240 <__udivsi3>
1004b29c:	0003      	movs	r3, r0
1004b29e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004b2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b2a2:	685a      	ldr	r2, [r3, #4]
1004b2a4:	0013      	movs	r3, r2
1004b2a6:	005b      	lsls	r3, r3, #1
1004b2a8:	189b      	adds	r3, r3, r2
1004b2aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004b2ac:	429a      	cmp	r2, r3
1004b2ae:	d305      	bcc.n	1004b2bc <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1004b2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b2b2:	685b      	ldr	r3, [r3, #4]
1004b2b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004b2b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004b2b8:	429a      	cmp	r2, r3
1004b2ba:	d906      	bls.n	1004b2ca <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
1004b2bc:	231b      	movs	r3, #27
1004b2be:	2220      	movs	r2, #32
1004b2c0:	189b      	adds	r3, r3, r2
1004b2c2:	19db      	adds	r3, r3, r7
1004b2c4:	2201      	movs	r2, #1
1004b2c6:	701a      	strb	r2, [r3, #0]
1004b2c8:	e0c3      	b.n	1004b452 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004b2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b2cc:	61bb      	str	r3, [r7, #24]
1004b2ce:	2300      	movs	r3, #0
1004b2d0:	61fb      	str	r3, [r7, #28]
1004b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b2d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004b2d6:	4b6e      	ldr	r3, [pc, #440]	@ (1004b490 <UART_SetConfig+0x2c8>)
1004b2d8:	0052      	lsls	r2, r2, #1
1004b2da:	5ad3      	ldrh	r3, [r2, r3]
1004b2dc:	613b      	str	r3, [r7, #16]
1004b2de:	2300      	movs	r3, #0
1004b2e0:	617b      	str	r3, [r7, #20]
1004b2e2:	693a      	ldr	r2, [r7, #16]
1004b2e4:	697b      	ldr	r3, [r7, #20]
1004b2e6:	69b8      	ldr	r0, [r7, #24]
1004b2e8:	69f9      	ldr	r1, [r7, #28]
1004b2ea:	f7f5 f983 	bl	100405f4 <__aeabi_uldivmod>
1004b2ee:	0002      	movs	r2, r0
1004b2f0:	000b      	movs	r3, r1
1004b2f2:	0e11      	lsrs	r1, r2, #24
1004b2f4:	021d      	lsls	r5, r3, #8
1004b2f6:	430d      	orrs	r5, r1
1004b2f8:	0214      	lsls	r4, r2, #8
1004b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b2fc:	685b      	ldr	r3, [r3, #4]
1004b2fe:	085b      	lsrs	r3, r3, #1
1004b300:	60bb      	str	r3, [r7, #8]
1004b302:	2300      	movs	r3, #0
1004b304:	60fb      	str	r3, [r7, #12]
1004b306:	68b8      	ldr	r0, [r7, #8]
1004b308:	68f9      	ldr	r1, [r7, #12]
1004b30a:	1900      	adds	r0, r0, r4
1004b30c:	4169      	adcs	r1, r5
1004b30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b310:	685b      	ldr	r3, [r3, #4]
1004b312:	603b      	str	r3, [r7, #0]
1004b314:	2300      	movs	r3, #0
1004b316:	607b      	str	r3, [r7, #4]
1004b318:	683a      	ldr	r2, [r7, #0]
1004b31a:	687b      	ldr	r3, [r7, #4]
1004b31c:	f7f5 f96a 	bl	100405f4 <__aeabi_uldivmod>
1004b320:	0002      	movs	r2, r0
1004b322:	000b      	movs	r3, r1
1004b324:	0013      	movs	r3, r2
1004b326:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004b328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004b32a:	23c0      	movs	r3, #192	@ 0xc0
1004b32c:	009b      	lsls	r3, r3, #2
1004b32e:	429a      	cmp	r2, r3
1004b330:	d309      	bcc.n	1004b346 <UART_SetConfig+0x17e>
1004b332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004b334:	2380      	movs	r3, #128	@ 0x80
1004b336:	035b      	lsls	r3, r3, #13
1004b338:	429a      	cmp	r2, r3
1004b33a:	d204      	bcs.n	1004b346 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
1004b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b33e:	681b      	ldr	r3, [r3, #0]
1004b340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004b342:	60da      	str	r2, [r3, #12]
1004b344:	e085      	b.n	1004b452 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004b346:	231b      	movs	r3, #27
1004b348:	2220      	movs	r2, #32
1004b34a:	189b      	adds	r3, r3, r2
1004b34c:	19db      	adds	r3, r3, r7
1004b34e:	2201      	movs	r2, #1
1004b350:	701a      	strb	r2, [r3, #0]
1004b352:	e07e      	b.n	1004b452 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b356:	69da      	ldr	r2, [r3, #28]
1004b358:	2380      	movs	r3, #128	@ 0x80
1004b35a:	021b      	lsls	r3, r3, #8
1004b35c:	429a      	cmp	r2, r3
1004b35e:	d148      	bne.n	1004b3f2 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
1004b360:	4b4c      	ldr	r3, [pc, #304]	@ (1004b494 <UART_SetConfig+0x2cc>)
1004b362:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004b364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b366:	2b00      	cmp	r3, #0
1004b368:	d100      	bne.n	1004b36c <UART_SetConfig+0x1a4>
1004b36a:	e072      	b.n	1004b452 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b36e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004b370:	4b47      	ldr	r3, [pc, #284]	@ (1004b490 <UART_SetConfig+0x2c8>)
1004b372:	0052      	lsls	r2, r2, #1
1004b374:	5ad3      	ldrh	r3, [r2, r3]
1004b376:	0019      	movs	r1, r3
1004b378:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004b37a:	f7f4 ff61 	bl	10040240 <__udivsi3>
1004b37e:	0003      	movs	r3, r0
1004b380:	005a      	lsls	r2, r3, #1
1004b382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b384:	685b      	ldr	r3, [r3, #4]
1004b386:	085b      	lsrs	r3, r3, #1
1004b388:	18d2      	adds	r2, r2, r3
1004b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b38c:	685b      	ldr	r3, [r3, #4]
1004b38e:	0019      	movs	r1, r3
1004b390:	0010      	movs	r0, r2
1004b392:	f7f4 ff55 	bl	10040240 <__udivsi3>
1004b396:	0003      	movs	r3, r0
1004b398:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b39c:	2b0f      	cmp	r3, #15
1004b39e:	d921      	bls.n	1004b3e4 <UART_SetConfig+0x21c>
1004b3a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004b3a2:	2380      	movs	r3, #128	@ 0x80
1004b3a4:	025b      	lsls	r3, r3, #9
1004b3a6:	429a      	cmp	r2, r3
1004b3a8:	d21c      	bcs.n	1004b3e4 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b3ac:	b29a      	uxth	r2, r3
1004b3ae:	200e      	movs	r0, #14
1004b3b0:	2420      	movs	r4, #32
1004b3b2:	1903      	adds	r3, r0, r4
1004b3b4:	19db      	adds	r3, r3, r7
1004b3b6:	210f      	movs	r1, #15
1004b3b8:	438a      	bics	r2, r1
1004b3ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1004b3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b3be:	085b      	lsrs	r3, r3, #1
1004b3c0:	b29b      	uxth	r3, r3
1004b3c2:	2207      	movs	r2, #7
1004b3c4:	4013      	ands	r3, r2
1004b3c6:	b299      	uxth	r1, r3
1004b3c8:	1903      	adds	r3, r0, r4
1004b3ca:	19db      	adds	r3, r3, r7
1004b3cc:	1902      	adds	r2, r0, r4
1004b3ce:	19d2      	adds	r2, r2, r7
1004b3d0:	8812      	ldrh	r2, [r2, #0]
1004b3d2:	430a      	orrs	r2, r1
1004b3d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b3d8:	681b      	ldr	r3, [r3, #0]
1004b3da:	1902      	adds	r2, r0, r4
1004b3dc:	19d2      	adds	r2, r2, r7
1004b3de:	8812      	ldrh	r2, [r2, #0]
1004b3e0:	60da      	str	r2, [r3, #12]
1004b3e2:	e036      	b.n	1004b452 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004b3e4:	231b      	movs	r3, #27
1004b3e6:	2220      	movs	r2, #32
1004b3e8:	189b      	adds	r3, r3, r2
1004b3ea:	19db      	adds	r3, r3, r7
1004b3ec:	2201      	movs	r2, #1
1004b3ee:	701a      	strb	r2, [r3, #0]
1004b3f0:	e02f      	b.n	1004b452 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004b3f2:	4b28      	ldr	r3, [pc, #160]	@ (1004b494 <UART_SetConfig+0x2cc>)
1004b3f4:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004b3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b3f8:	2b00      	cmp	r3, #0
1004b3fa:	d02a      	beq.n	1004b452 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004b3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b3fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004b400:	4b23      	ldr	r3, [pc, #140]	@ (1004b490 <UART_SetConfig+0x2c8>)
1004b402:	0052      	lsls	r2, r2, #1
1004b404:	5ad3      	ldrh	r3, [r2, r3]
1004b406:	0019      	movs	r1, r3
1004b408:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004b40a:	f7f4 ff19 	bl	10040240 <__udivsi3>
1004b40e:	0003      	movs	r3, r0
1004b410:	001a      	movs	r2, r3
1004b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b414:	685b      	ldr	r3, [r3, #4]
1004b416:	085b      	lsrs	r3, r3, #1
1004b418:	18d2      	adds	r2, r2, r3
1004b41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b41c:	685b      	ldr	r3, [r3, #4]
1004b41e:	0019      	movs	r1, r3
1004b420:	0010      	movs	r0, r2
1004b422:	f7f4 ff0d 	bl	10040240 <__udivsi3>
1004b426:	0003      	movs	r3, r0
1004b428:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b42c:	2b0f      	cmp	r3, #15
1004b42e:	d90a      	bls.n	1004b446 <UART_SetConfig+0x27e>
1004b430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004b432:	2380      	movs	r3, #128	@ 0x80
1004b434:	025b      	lsls	r3, r3, #9
1004b436:	429a      	cmp	r2, r3
1004b438:	d205      	bcs.n	1004b446 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b43c:	b29a      	uxth	r2, r3
1004b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b440:	681b      	ldr	r3, [r3, #0]
1004b442:	60da      	str	r2, [r3, #12]
1004b444:	e005      	b.n	1004b452 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004b446:	231b      	movs	r3, #27
1004b448:	2220      	movs	r2, #32
1004b44a:	189b      	adds	r3, r3, r2
1004b44c:	19db      	adds	r3, r3, r7
1004b44e:	2201      	movs	r2, #1
1004b450:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004b452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b454:	226a      	movs	r2, #106	@ 0x6a
1004b456:	2101      	movs	r1, #1
1004b458:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b45c:	2268      	movs	r2, #104	@ 0x68
1004b45e:	2101      	movs	r1, #1
1004b460:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b464:	2200      	movs	r2, #0
1004b466:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b46a:	2200      	movs	r2, #0
1004b46c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1004b46e:	231b      	movs	r3, #27
1004b470:	2220      	movs	r2, #32
1004b472:	189b      	adds	r3, r3, r2
1004b474:	19db      	adds	r3, r3, r7
1004b476:	781b      	ldrb	r3, [r3, #0]
}
1004b478:	0018      	movs	r0, r3
1004b47a:	46bd      	mov	sp, r7
1004b47c:	b010      	add	sp, #64	@ 0x40
1004b47e:	bdb0      	pop	{r4, r5, r7, pc}
1004b480:	cfff69f3 	.word	0xcfff69f3
1004b484:	ffffcfff 	.word	0xffffcfff
1004b488:	41005000 	.word	0x41005000
1004b48c:	11fff4ff 	.word	0x11fff4ff
1004b490:	10065d2c 	.word	0x10065d2c
1004b494:	00f42400 	.word	0x00f42400

1004b498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004b498:	b580      	push	{r7, lr}
1004b49a:	b082      	sub	sp, #8
1004b49c:	af00      	add	r7, sp, #0
1004b49e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1004b4a0:	687b      	ldr	r3, [r7, #4]
1004b4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b4a4:	2208      	movs	r2, #8
1004b4a6:	4013      	ands	r3, r2
1004b4a8:	d00b      	beq.n	1004b4c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004b4aa:	687b      	ldr	r3, [r7, #4]
1004b4ac:	681b      	ldr	r3, [r3, #0]
1004b4ae:	685b      	ldr	r3, [r3, #4]
1004b4b0:	4a4a      	ldr	r2, [pc, #296]	@ (1004b5dc <UART_AdvFeatureConfig+0x144>)
1004b4b2:	4013      	ands	r3, r2
1004b4b4:	0019      	movs	r1, r3
1004b4b6:	687b      	ldr	r3, [r7, #4]
1004b4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004b4ba:	687b      	ldr	r3, [r7, #4]
1004b4bc:	681b      	ldr	r3, [r3, #0]
1004b4be:	430a      	orrs	r2, r1
1004b4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004b4c2:	687b      	ldr	r3, [r7, #4]
1004b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b4c6:	2201      	movs	r2, #1
1004b4c8:	4013      	ands	r3, r2
1004b4ca:	d00b      	beq.n	1004b4e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1004b4cc:	687b      	ldr	r3, [r7, #4]
1004b4ce:	681b      	ldr	r3, [r3, #0]
1004b4d0:	685b      	ldr	r3, [r3, #4]
1004b4d2:	4a43      	ldr	r2, [pc, #268]	@ (1004b5e0 <UART_AdvFeatureConfig+0x148>)
1004b4d4:	4013      	ands	r3, r2
1004b4d6:	0019      	movs	r1, r3
1004b4d8:	687b      	ldr	r3, [r7, #4]
1004b4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004b4dc:	687b      	ldr	r3, [r7, #4]
1004b4de:	681b      	ldr	r3, [r3, #0]
1004b4e0:	430a      	orrs	r2, r1
1004b4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004b4e4:	687b      	ldr	r3, [r7, #4]
1004b4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b4e8:	2202      	movs	r2, #2
1004b4ea:	4013      	ands	r3, r2
1004b4ec:	d00b      	beq.n	1004b506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1004b4ee:	687b      	ldr	r3, [r7, #4]
1004b4f0:	681b      	ldr	r3, [r3, #0]
1004b4f2:	685b      	ldr	r3, [r3, #4]
1004b4f4:	4a3b      	ldr	r2, [pc, #236]	@ (1004b5e4 <UART_AdvFeatureConfig+0x14c>)
1004b4f6:	4013      	ands	r3, r2
1004b4f8:	0019      	movs	r1, r3
1004b4fa:	687b      	ldr	r3, [r7, #4]
1004b4fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004b4fe:	687b      	ldr	r3, [r7, #4]
1004b500:	681b      	ldr	r3, [r3, #0]
1004b502:	430a      	orrs	r2, r1
1004b504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004b506:	687b      	ldr	r3, [r7, #4]
1004b508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b50a:	2204      	movs	r2, #4
1004b50c:	4013      	ands	r3, r2
1004b50e:	d00b      	beq.n	1004b528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1004b510:	687b      	ldr	r3, [r7, #4]
1004b512:	681b      	ldr	r3, [r3, #0]
1004b514:	685b      	ldr	r3, [r3, #4]
1004b516:	4a34      	ldr	r2, [pc, #208]	@ (1004b5e8 <UART_AdvFeatureConfig+0x150>)
1004b518:	4013      	ands	r3, r2
1004b51a:	0019      	movs	r1, r3
1004b51c:	687b      	ldr	r3, [r7, #4]
1004b51e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004b520:	687b      	ldr	r3, [r7, #4]
1004b522:	681b      	ldr	r3, [r3, #0]
1004b524:	430a      	orrs	r2, r1
1004b526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004b528:	687b      	ldr	r3, [r7, #4]
1004b52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b52c:	2210      	movs	r2, #16
1004b52e:	4013      	ands	r3, r2
1004b530:	d00b      	beq.n	1004b54a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004b532:	687b      	ldr	r3, [r7, #4]
1004b534:	681b      	ldr	r3, [r3, #0]
1004b536:	689b      	ldr	r3, [r3, #8]
1004b538:	4a2c      	ldr	r2, [pc, #176]	@ (1004b5ec <UART_AdvFeatureConfig+0x154>)
1004b53a:	4013      	ands	r3, r2
1004b53c:	0019      	movs	r1, r3
1004b53e:	687b      	ldr	r3, [r7, #4]
1004b540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004b542:	687b      	ldr	r3, [r7, #4]
1004b544:	681b      	ldr	r3, [r3, #0]
1004b546:	430a      	orrs	r2, r1
1004b548:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004b54a:	687b      	ldr	r3, [r7, #4]
1004b54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b54e:	2220      	movs	r2, #32
1004b550:	4013      	ands	r3, r2
1004b552:	d00b      	beq.n	1004b56c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004b554:	687b      	ldr	r3, [r7, #4]
1004b556:	681b      	ldr	r3, [r3, #0]
1004b558:	689b      	ldr	r3, [r3, #8]
1004b55a:	4a25      	ldr	r2, [pc, #148]	@ (1004b5f0 <UART_AdvFeatureConfig+0x158>)
1004b55c:	4013      	ands	r3, r2
1004b55e:	0019      	movs	r1, r3
1004b560:	687b      	ldr	r3, [r7, #4]
1004b562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004b564:	687b      	ldr	r3, [r7, #4]
1004b566:	681b      	ldr	r3, [r3, #0]
1004b568:	430a      	orrs	r2, r1
1004b56a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1004b56c:	687b      	ldr	r3, [r7, #4]
1004b56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b570:	2240      	movs	r2, #64	@ 0x40
1004b572:	4013      	ands	r3, r2
1004b574:	d01d      	beq.n	1004b5b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004b576:	687b      	ldr	r3, [r7, #4]
1004b578:	681b      	ldr	r3, [r3, #0]
1004b57a:	685b      	ldr	r3, [r3, #4]
1004b57c:	4a1d      	ldr	r2, [pc, #116]	@ (1004b5f4 <UART_AdvFeatureConfig+0x15c>)
1004b57e:	4013      	ands	r3, r2
1004b580:	0019      	movs	r1, r3
1004b582:	687b      	ldr	r3, [r7, #4]
1004b584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004b586:	687b      	ldr	r3, [r7, #4]
1004b588:	681b      	ldr	r3, [r3, #0]
1004b58a:	430a      	orrs	r2, r1
1004b58c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1004b58e:	687b      	ldr	r3, [r7, #4]
1004b590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004b592:	2380      	movs	r3, #128	@ 0x80
1004b594:	035b      	lsls	r3, r3, #13
1004b596:	429a      	cmp	r2, r3
1004b598:	d10b      	bne.n	1004b5b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004b59a:	687b      	ldr	r3, [r7, #4]
1004b59c:	681b      	ldr	r3, [r3, #0]
1004b59e:	685b      	ldr	r3, [r3, #4]
1004b5a0:	4a15      	ldr	r2, [pc, #84]	@ (1004b5f8 <UART_AdvFeatureConfig+0x160>)
1004b5a2:	4013      	ands	r3, r2
1004b5a4:	0019      	movs	r1, r3
1004b5a6:	687b      	ldr	r3, [r7, #4]
1004b5a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004b5aa:	687b      	ldr	r3, [r7, #4]
1004b5ac:	681b      	ldr	r3, [r3, #0]
1004b5ae:	430a      	orrs	r2, r1
1004b5b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004b5b2:	687b      	ldr	r3, [r7, #4]
1004b5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b5b6:	2280      	movs	r2, #128	@ 0x80
1004b5b8:	4013      	ands	r3, r2
1004b5ba:	d00b      	beq.n	1004b5d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1004b5bc:	687b      	ldr	r3, [r7, #4]
1004b5be:	681b      	ldr	r3, [r3, #0]
1004b5c0:	685b      	ldr	r3, [r3, #4]
1004b5c2:	4a0e      	ldr	r2, [pc, #56]	@ (1004b5fc <UART_AdvFeatureConfig+0x164>)
1004b5c4:	4013      	ands	r3, r2
1004b5c6:	0019      	movs	r1, r3
1004b5c8:	687b      	ldr	r3, [r7, #4]
1004b5ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
1004b5cc:	687b      	ldr	r3, [r7, #4]
1004b5ce:	681b      	ldr	r3, [r3, #0]
1004b5d0:	430a      	orrs	r2, r1
1004b5d2:	605a      	str	r2, [r3, #4]
  }
}
1004b5d4:	46c0      	nop			@ (mov r8, r8)
1004b5d6:	46bd      	mov	sp, r7
1004b5d8:	b002      	add	sp, #8
1004b5da:	bd80      	pop	{r7, pc}
1004b5dc:	ffff7fff 	.word	0xffff7fff
1004b5e0:	fffdffff 	.word	0xfffdffff
1004b5e4:	fffeffff 	.word	0xfffeffff
1004b5e8:	fffbffff 	.word	0xfffbffff
1004b5ec:	ffffefff 	.word	0xffffefff
1004b5f0:	ffffdfff 	.word	0xffffdfff
1004b5f4:	ffefffff 	.word	0xffefffff
1004b5f8:	ff9fffff 	.word	0xff9fffff
1004b5fc:	fff7ffff 	.word	0xfff7ffff

1004b600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1004b600:	b580      	push	{r7, lr}
1004b602:	b092      	sub	sp, #72	@ 0x48
1004b604:	af02      	add	r7, sp, #8
1004b606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004b608:	687b      	ldr	r3, [r7, #4]
1004b60a:	2290      	movs	r2, #144	@ 0x90
1004b60c:	2100      	movs	r1, #0
1004b60e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1004b610:	f7f9 f9ae 	bl	10044970 <HAL_GetTick>
1004b614:	0003      	movs	r3, r0
1004b616:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004b618:	687b      	ldr	r3, [r7, #4]
1004b61a:	681b      	ldr	r3, [r3, #0]
1004b61c:	681b      	ldr	r3, [r3, #0]
1004b61e:	2208      	movs	r2, #8
1004b620:	4013      	ands	r3, r2
1004b622:	2b08      	cmp	r3, #8
1004b624:	d12d      	bne.n	1004b682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004b626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b628:	2280      	movs	r2, #128	@ 0x80
1004b62a:	0391      	lsls	r1, r2, #14
1004b62c:	6878      	ldr	r0, [r7, #4]
1004b62e:	4a47      	ldr	r2, [pc, #284]	@ (1004b74c <UART_CheckIdleState+0x14c>)
1004b630:	9200      	str	r2, [sp, #0]
1004b632:	2200      	movs	r2, #0
1004b634:	f000 f88e 	bl	1004b754 <UART_WaitOnFlagUntilTimeout>
1004b638:	1e03      	subs	r3, r0, #0
1004b63a:	d022      	beq.n	1004b682 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b63c:	f3ef 8310 	mrs	r3, PRIMASK
1004b640:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
1004b644:	63bb      	str	r3, [r7, #56]	@ 0x38
1004b646:	2301      	movs	r3, #1
1004b648:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004b64c:	f383 8810 	msr	PRIMASK, r3
}
1004b650:	46c0      	nop			@ (mov r8, r8)
1004b652:	687b      	ldr	r3, [r7, #4]
1004b654:	681b      	ldr	r3, [r3, #0]
1004b656:	681a      	ldr	r2, [r3, #0]
1004b658:	687b      	ldr	r3, [r7, #4]
1004b65a:	681b      	ldr	r3, [r3, #0]
1004b65c:	2180      	movs	r1, #128	@ 0x80
1004b65e:	438a      	bics	r2, r1
1004b660:	601a      	str	r2, [r3, #0]
1004b662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004b664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004b668:	f383 8810 	msr	PRIMASK, r3
}
1004b66c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004b66e:	687b      	ldr	r3, [r7, #4]
1004b670:	2288      	movs	r2, #136	@ 0x88
1004b672:	2120      	movs	r1, #32
1004b674:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004b676:	687b      	ldr	r3, [r7, #4]
1004b678:	2284      	movs	r2, #132	@ 0x84
1004b67a:	2100      	movs	r1, #0
1004b67c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004b67e:	2303      	movs	r3, #3
1004b680:	e060      	b.n	1004b744 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004b682:	687b      	ldr	r3, [r7, #4]
1004b684:	681b      	ldr	r3, [r3, #0]
1004b686:	681b      	ldr	r3, [r3, #0]
1004b688:	2204      	movs	r2, #4
1004b68a:	4013      	ands	r3, r2
1004b68c:	2b04      	cmp	r3, #4
1004b68e:	d146      	bne.n	1004b71e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004b690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b692:	2280      	movs	r2, #128	@ 0x80
1004b694:	03d1      	lsls	r1, r2, #15
1004b696:	6878      	ldr	r0, [r7, #4]
1004b698:	4a2c      	ldr	r2, [pc, #176]	@ (1004b74c <UART_CheckIdleState+0x14c>)
1004b69a:	9200      	str	r2, [sp, #0]
1004b69c:	2200      	movs	r2, #0
1004b69e:	f000 f859 	bl	1004b754 <UART_WaitOnFlagUntilTimeout>
1004b6a2:	1e03      	subs	r3, r0, #0
1004b6a4:	d03b      	beq.n	1004b71e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b6a6:	f3ef 8310 	mrs	r3, PRIMASK
1004b6aa:	60fb      	str	r3, [r7, #12]
  return(result);
1004b6ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
1004b6b0:	2301      	movs	r3, #1
1004b6b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b6b4:	693b      	ldr	r3, [r7, #16]
1004b6b6:	f383 8810 	msr	PRIMASK, r3
}
1004b6ba:	46c0      	nop			@ (mov r8, r8)
1004b6bc:	687b      	ldr	r3, [r7, #4]
1004b6be:	681b      	ldr	r3, [r3, #0]
1004b6c0:	681a      	ldr	r2, [r3, #0]
1004b6c2:	687b      	ldr	r3, [r7, #4]
1004b6c4:	681b      	ldr	r3, [r3, #0]
1004b6c6:	4922      	ldr	r1, [pc, #136]	@ (1004b750 <UART_CheckIdleState+0x150>)
1004b6c8:	400a      	ands	r2, r1
1004b6ca:	601a      	str	r2, [r3, #0]
1004b6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b6ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b6d0:	697b      	ldr	r3, [r7, #20]
1004b6d2:	f383 8810 	msr	PRIMASK, r3
}
1004b6d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b6d8:	f3ef 8310 	mrs	r3, PRIMASK
1004b6dc:	61bb      	str	r3, [r7, #24]
  return(result);
1004b6de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004b6e0:	633b      	str	r3, [r7, #48]	@ 0x30
1004b6e2:	2301      	movs	r3, #1
1004b6e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b6e6:	69fb      	ldr	r3, [r7, #28]
1004b6e8:	f383 8810 	msr	PRIMASK, r3
}
1004b6ec:	46c0      	nop			@ (mov r8, r8)
1004b6ee:	687b      	ldr	r3, [r7, #4]
1004b6f0:	681b      	ldr	r3, [r3, #0]
1004b6f2:	689a      	ldr	r2, [r3, #8]
1004b6f4:	687b      	ldr	r3, [r7, #4]
1004b6f6:	681b      	ldr	r3, [r3, #0]
1004b6f8:	2101      	movs	r1, #1
1004b6fa:	438a      	bics	r2, r1
1004b6fc:	609a      	str	r2, [r3, #8]
1004b6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b700:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b702:	6a3b      	ldr	r3, [r7, #32]
1004b704:	f383 8810 	msr	PRIMASK, r3
}
1004b708:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004b70a:	687b      	ldr	r3, [r7, #4]
1004b70c:	228c      	movs	r2, #140	@ 0x8c
1004b70e:	2120      	movs	r1, #32
1004b710:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004b712:	687b      	ldr	r3, [r7, #4]
1004b714:	2284      	movs	r2, #132	@ 0x84
1004b716:	2100      	movs	r1, #0
1004b718:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004b71a:	2303      	movs	r3, #3
1004b71c:	e012      	b.n	1004b744 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004b71e:	687b      	ldr	r3, [r7, #4]
1004b720:	2288      	movs	r2, #136	@ 0x88
1004b722:	2120      	movs	r1, #32
1004b724:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004b726:	687b      	ldr	r3, [r7, #4]
1004b728:	228c      	movs	r2, #140	@ 0x8c
1004b72a:	2120      	movs	r1, #32
1004b72c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004b72e:	687b      	ldr	r3, [r7, #4]
1004b730:	2200      	movs	r2, #0
1004b732:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004b734:	687b      	ldr	r3, [r7, #4]
1004b736:	2200      	movs	r2, #0
1004b738:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004b73a:	687b      	ldr	r3, [r7, #4]
1004b73c:	2284      	movs	r2, #132	@ 0x84
1004b73e:	2100      	movs	r1, #0
1004b740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004b742:	2300      	movs	r3, #0
}
1004b744:	0018      	movs	r0, r3
1004b746:	46bd      	mov	sp, r7
1004b748:	b010      	add	sp, #64	@ 0x40
1004b74a:	bd80      	pop	{r7, pc}
1004b74c:	01ffffff 	.word	0x01ffffff
1004b750:	fffffedf 	.word	0xfffffedf

1004b754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004b754:	b580      	push	{r7, lr}
1004b756:	b084      	sub	sp, #16
1004b758:	af00      	add	r7, sp, #0
1004b75a:	60f8      	str	r0, [r7, #12]
1004b75c:	60b9      	str	r1, [r7, #8]
1004b75e:	603b      	str	r3, [r7, #0]
1004b760:	1dfb      	adds	r3, r7, #7
1004b762:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004b764:	e051      	b.n	1004b80a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004b766:	69bb      	ldr	r3, [r7, #24]
1004b768:	3301      	adds	r3, #1
1004b76a:	d04e      	beq.n	1004b80a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004b76c:	f7f9 f900 	bl	10044970 <HAL_GetTick>
1004b770:	0002      	movs	r2, r0
1004b772:	683b      	ldr	r3, [r7, #0]
1004b774:	1ad3      	subs	r3, r2, r3
1004b776:	69ba      	ldr	r2, [r7, #24]
1004b778:	429a      	cmp	r2, r3
1004b77a:	d302      	bcc.n	1004b782 <UART_WaitOnFlagUntilTimeout+0x2e>
1004b77c:	69bb      	ldr	r3, [r7, #24]
1004b77e:	2b00      	cmp	r3, #0
1004b780:	d101      	bne.n	1004b786 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004b782:	2303      	movs	r3, #3
1004b784:	e051      	b.n	1004b82a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004b786:	68fb      	ldr	r3, [r7, #12]
1004b788:	681b      	ldr	r3, [r3, #0]
1004b78a:	681b      	ldr	r3, [r3, #0]
1004b78c:	2204      	movs	r2, #4
1004b78e:	4013      	ands	r3, r2
1004b790:	d03b      	beq.n	1004b80a <UART_WaitOnFlagUntilTimeout+0xb6>
1004b792:	68bb      	ldr	r3, [r7, #8]
1004b794:	2b80      	cmp	r3, #128	@ 0x80
1004b796:	d038      	beq.n	1004b80a <UART_WaitOnFlagUntilTimeout+0xb6>
1004b798:	68bb      	ldr	r3, [r7, #8]
1004b79a:	2b40      	cmp	r3, #64	@ 0x40
1004b79c:	d035      	beq.n	1004b80a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004b79e:	68fb      	ldr	r3, [r7, #12]
1004b7a0:	681b      	ldr	r3, [r3, #0]
1004b7a2:	69db      	ldr	r3, [r3, #28]
1004b7a4:	2208      	movs	r2, #8
1004b7a6:	4013      	ands	r3, r2
1004b7a8:	2b08      	cmp	r3, #8
1004b7aa:	d111      	bne.n	1004b7d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004b7ac:	68fb      	ldr	r3, [r7, #12]
1004b7ae:	681b      	ldr	r3, [r3, #0]
1004b7b0:	2208      	movs	r2, #8
1004b7b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004b7b4:	68fb      	ldr	r3, [r7, #12]
1004b7b6:	0018      	movs	r0, r3
1004b7b8:	f000 f83c 	bl	1004b834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004b7bc:	68fb      	ldr	r3, [r7, #12]
1004b7be:	2290      	movs	r2, #144	@ 0x90
1004b7c0:	2108      	movs	r1, #8
1004b7c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004b7c4:	68fb      	ldr	r3, [r7, #12]
1004b7c6:	2284      	movs	r2, #132	@ 0x84
1004b7c8:	2100      	movs	r1, #0
1004b7ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004b7cc:	2301      	movs	r3, #1
1004b7ce:	e02c      	b.n	1004b82a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004b7d0:	68fb      	ldr	r3, [r7, #12]
1004b7d2:	681b      	ldr	r3, [r3, #0]
1004b7d4:	69da      	ldr	r2, [r3, #28]
1004b7d6:	2380      	movs	r3, #128	@ 0x80
1004b7d8:	011b      	lsls	r3, r3, #4
1004b7da:	401a      	ands	r2, r3
1004b7dc:	2380      	movs	r3, #128	@ 0x80
1004b7de:	011b      	lsls	r3, r3, #4
1004b7e0:	429a      	cmp	r2, r3
1004b7e2:	d112      	bne.n	1004b80a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004b7e4:	68fb      	ldr	r3, [r7, #12]
1004b7e6:	681b      	ldr	r3, [r3, #0]
1004b7e8:	2280      	movs	r2, #128	@ 0x80
1004b7ea:	0112      	lsls	r2, r2, #4
1004b7ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004b7ee:	68fb      	ldr	r3, [r7, #12]
1004b7f0:	0018      	movs	r0, r3
1004b7f2:	f000 f81f 	bl	1004b834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004b7f6:	68fb      	ldr	r3, [r7, #12]
1004b7f8:	2290      	movs	r2, #144	@ 0x90
1004b7fa:	2120      	movs	r1, #32
1004b7fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004b7fe:	68fb      	ldr	r3, [r7, #12]
1004b800:	2284      	movs	r2, #132	@ 0x84
1004b802:	2100      	movs	r1, #0
1004b804:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004b806:	2303      	movs	r3, #3
1004b808:	e00f      	b.n	1004b82a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004b80a:	68fb      	ldr	r3, [r7, #12]
1004b80c:	681b      	ldr	r3, [r3, #0]
1004b80e:	69db      	ldr	r3, [r3, #28]
1004b810:	68ba      	ldr	r2, [r7, #8]
1004b812:	4013      	ands	r3, r2
1004b814:	68ba      	ldr	r2, [r7, #8]
1004b816:	1ad3      	subs	r3, r2, r3
1004b818:	425a      	negs	r2, r3
1004b81a:	4153      	adcs	r3, r2
1004b81c:	b2db      	uxtb	r3, r3
1004b81e:	001a      	movs	r2, r3
1004b820:	1dfb      	adds	r3, r7, #7
1004b822:	781b      	ldrb	r3, [r3, #0]
1004b824:	429a      	cmp	r2, r3
1004b826:	d09e      	beq.n	1004b766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004b828:	2300      	movs	r3, #0
}
1004b82a:	0018      	movs	r0, r3
1004b82c:	46bd      	mov	sp, r7
1004b82e:	b004      	add	sp, #16
1004b830:	bd80      	pop	{r7, pc}
	...

1004b834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004b834:	b580      	push	{r7, lr}
1004b836:	b08e      	sub	sp, #56	@ 0x38
1004b838:	af00      	add	r7, sp, #0
1004b83a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b83c:	f3ef 8310 	mrs	r3, PRIMASK
1004b840:	617b      	str	r3, [r7, #20]
  return(result);
1004b842:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004b844:	637b      	str	r3, [r7, #52]	@ 0x34
1004b846:	2301      	movs	r3, #1
1004b848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b84a:	69bb      	ldr	r3, [r7, #24]
1004b84c:	f383 8810 	msr	PRIMASK, r3
}
1004b850:	46c0      	nop			@ (mov r8, r8)
1004b852:	687b      	ldr	r3, [r7, #4]
1004b854:	681b      	ldr	r3, [r3, #0]
1004b856:	681a      	ldr	r2, [r3, #0]
1004b858:	687b      	ldr	r3, [r7, #4]
1004b85a:	681b      	ldr	r3, [r3, #0]
1004b85c:	4926      	ldr	r1, [pc, #152]	@ (1004b8f8 <UART_EndRxTransfer+0xc4>)
1004b85e:	400a      	ands	r2, r1
1004b860:	601a      	str	r2, [r3, #0]
1004b862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b866:	69fb      	ldr	r3, [r7, #28]
1004b868:	f383 8810 	msr	PRIMASK, r3
}
1004b86c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b86e:	f3ef 8310 	mrs	r3, PRIMASK
1004b872:	623b      	str	r3, [r7, #32]
  return(result);
1004b874:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004b876:	633b      	str	r3, [r7, #48]	@ 0x30
1004b878:	2301      	movs	r3, #1
1004b87a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b87e:	f383 8810 	msr	PRIMASK, r3
}
1004b882:	46c0      	nop			@ (mov r8, r8)
1004b884:	687b      	ldr	r3, [r7, #4]
1004b886:	681b      	ldr	r3, [r3, #0]
1004b888:	689a      	ldr	r2, [r3, #8]
1004b88a:	687b      	ldr	r3, [r7, #4]
1004b88c:	681b      	ldr	r3, [r3, #0]
1004b88e:	491b      	ldr	r1, [pc, #108]	@ (1004b8fc <UART_EndRxTransfer+0xc8>)
1004b890:	400a      	ands	r2, r1
1004b892:	609a      	str	r2, [r3, #8]
1004b894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b896:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004b89a:	f383 8810 	msr	PRIMASK, r3
}
1004b89e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004b8a0:	687b      	ldr	r3, [r7, #4]
1004b8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004b8a4:	2b01      	cmp	r3, #1
1004b8a6:	d118      	bne.n	1004b8da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b8a8:	f3ef 8310 	mrs	r3, PRIMASK
1004b8ac:	60bb      	str	r3, [r7, #8]
  return(result);
1004b8ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004b8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004b8b2:	2301      	movs	r3, #1
1004b8b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b8b6:	68fb      	ldr	r3, [r7, #12]
1004b8b8:	f383 8810 	msr	PRIMASK, r3
}
1004b8bc:	46c0      	nop			@ (mov r8, r8)
1004b8be:	687b      	ldr	r3, [r7, #4]
1004b8c0:	681b      	ldr	r3, [r3, #0]
1004b8c2:	681a      	ldr	r2, [r3, #0]
1004b8c4:	687b      	ldr	r3, [r7, #4]
1004b8c6:	681b      	ldr	r3, [r3, #0]
1004b8c8:	2110      	movs	r1, #16
1004b8ca:	438a      	bics	r2, r1
1004b8cc:	601a      	str	r2, [r3, #0]
1004b8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004b8d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b8d2:	693b      	ldr	r3, [r7, #16]
1004b8d4:	f383 8810 	msr	PRIMASK, r3
}
1004b8d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004b8da:	687b      	ldr	r3, [r7, #4]
1004b8dc:	228c      	movs	r2, #140	@ 0x8c
1004b8de:	2120      	movs	r1, #32
1004b8e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004b8e2:	687b      	ldr	r3, [r7, #4]
1004b8e4:	2200      	movs	r2, #0
1004b8e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004b8e8:	687b      	ldr	r3, [r7, #4]
1004b8ea:	2200      	movs	r2, #0
1004b8ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004b8ee:	46c0      	nop			@ (mov r8, r8)
1004b8f0:	46bd      	mov	sp, r7
1004b8f2:	b00e      	add	sp, #56	@ 0x38
1004b8f4:	bd80      	pop	{r7, pc}
1004b8f6:	46c0      	nop			@ (mov r8, r8)
1004b8f8:	fffffedf 	.word	0xfffffedf
1004b8fc:	effffffe 	.word	0xeffffffe

1004b900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004b900:	b580      	push	{r7, lr}
1004b902:	b084      	sub	sp, #16
1004b904:	af00      	add	r7, sp, #0
1004b906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
1004b908:	687b      	ldr	r3, [r7, #4]
1004b90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b90c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
1004b90e:	68fb      	ldr	r3, [r7, #12]
1004b910:	225e      	movs	r2, #94	@ 0x5e
1004b912:	2100      	movs	r1, #0
1004b914:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
1004b916:	68fb      	ldr	r3, [r7, #12]
1004b918:	22a4      	movs	r2, #164	@ 0xa4
1004b91a:	589b      	ldr	r3, [r3, r2]
1004b91c:	68fa      	ldr	r2, [r7, #12]
1004b91e:	0010      	movs	r0, r2
1004b920:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1004b922:	46c0      	nop			@ (mov r8, r8)
1004b924:	46bd      	mov	sp, r7
1004b926:	b004      	add	sp, #16
1004b928:	bd80      	pop	{r7, pc}

1004b92a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
1004b92a:	b580      	push	{r7, lr}
1004b92c:	b086      	sub	sp, #24
1004b92e:	af00      	add	r7, sp, #0
1004b930:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b932:	f3ef 8310 	mrs	r3, PRIMASK
1004b936:	60bb      	str	r3, [r7, #8]
  return(result);
1004b938:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
1004b93a:	617b      	str	r3, [r7, #20]
1004b93c:	2301      	movs	r3, #1
1004b93e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b940:	68fb      	ldr	r3, [r7, #12]
1004b942:	f383 8810 	msr	PRIMASK, r3
}
1004b946:	46c0      	nop			@ (mov r8, r8)
1004b948:	687b      	ldr	r3, [r7, #4]
1004b94a:	681b      	ldr	r3, [r3, #0]
1004b94c:	681a      	ldr	r2, [r3, #0]
1004b94e:	687b      	ldr	r3, [r7, #4]
1004b950:	681b      	ldr	r3, [r3, #0]
1004b952:	2140      	movs	r1, #64	@ 0x40
1004b954:	438a      	bics	r2, r1
1004b956:	601a      	str	r2, [r3, #0]
1004b958:	697b      	ldr	r3, [r7, #20]
1004b95a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b95c:	693b      	ldr	r3, [r7, #16]
1004b95e:	f383 8810 	msr	PRIMASK, r3
}
1004b962:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
1004b964:	687b      	ldr	r3, [r7, #4]
1004b966:	2288      	movs	r2, #136	@ 0x88
1004b968:	2120      	movs	r1, #32
1004b96a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
1004b96c:	687b      	ldr	r3, [r7, #4]
1004b96e:	2200      	movs	r2, #0
1004b970:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
1004b972:	687b      	ldr	r3, [r7, #4]
1004b974:	2298      	movs	r2, #152	@ 0x98
1004b976:	589b      	ldr	r3, [r3, r2]
1004b978:	687a      	ldr	r2, [r7, #4]
1004b97a:	0010      	movs	r0, r2
1004b97c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1004b97e:	46c0      	nop			@ (mov r8, r8)
1004b980:	46bd      	mov	sp, r7
1004b982:	b006      	add	sp, #24
1004b984:	bd80      	pop	{r7, pc}

1004b986 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
1004b986:	b580      	push	{r7, lr}
1004b988:	b082      	sub	sp, #8
1004b98a:	af00      	add	r7, sp, #0
1004b98c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004b98e:	46c0      	nop			@ (mov r8, r8)
1004b990:	46bd      	mov	sp, r7
1004b992:	b002      	add	sp, #8
1004b994:	bd80      	pop	{r7, pc}

1004b996 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
1004b996:	b580      	push	{r7, lr}
1004b998:	b082      	sub	sp, #8
1004b99a:	af00      	add	r7, sp, #0
1004b99c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004b99e:	46c0      	nop			@ (mov r8, r8)
1004b9a0:	46bd      	mov	sp, r7
1004b9a2:	b002      	add	sp, #8
1004b9a4:	bd80      	pop	{r7, pc}

1004b9a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
1004b9a6:	b580      	push	{r7, lr}
1004b9a8:	b082      	sub	sp, #8
1004b9aa:	af00      	add	r7, sp, #0
1004b9ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004b9ae:	46c0      	nop			@ (mov r8, r8)
1004b9b0:	46bd      	mov	sp, r7
1004b9b2:	b002      	add	sp, #8
1004b9b4:	bd80      	pop	{r7, pc}
	...

1004b9b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1004b9b8:	b580      	push	{r7, lr}
1004b9ba:	b084      	sub	sp, #16
1004b9bc:	af00      	add	r7, sp, #0
1004b9be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1004b9c0:	687b      	ldr	r3, [r7, #4]
1004b9c2:	2284      	movs	r2, #132	@ 0x84
1004b9c4:	5c9b      	ldrb	r3, [r3, r2]
1004b9c6:	2b01      	cmp	r3, #1
1004b9c8:	d101      	bne.n	1004b9ce <HAL_UARTEx_DisableFifoMode+0x16>
1004b9ca:	2302      	movs	r3, #2
1004b9cc:	e027      	b.n	1004ba1e <HAL_UARTEx_DisableFifoMode+0x66>
1004b9ce:	687b      	ldr	r3, [r7, #4]
1004b9d0:	2284      	movs	r2, #132	@ 0x84
1004b9d2:	2101      	movs	r1, #1
1004b9d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004b9d6:	687b      	ldr	r3, [r7, #4]
1004b9d8:	2288      	movs	r2, #136	@ 0x88
1004b9da:	2124      	movs	r1, #36	@ 0x24
1004b9dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004b9de:	687b      	ldr	r3, [r7, #4]
1004b9e0:	681b      	ldr	r3, [r3, #0]
1004b9e2:	681b      	ldr	r3, [r3, #0]
1004b9e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004b9e6:	687b      	ldr	r3, [r7, #4]
1004b9e8:	681b      	ldr	r3, [r3, #0]
1004b9ea:	681a      	ldr	r2, [r3, #0]
1004b9ec:	687b      	ldr	r3, [r7, #4]
1004b9ee:	681b      	ldr	r3, [r3, #0]
1004b9f0:	2101      	movs	r1, #1
1004b9f2:	438a      	bics	r2, r1
1004b9f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1004b9f6:	68fb      	ldr	r3, [r7, #12]
1004b9f8:	4a0b      	ldr	r2, [pc, #44]	@ (1004ba28 <HAL_UARTEx_DisableFifoMode+0x70>)
1004b9fa:	4013      	ands	r3, r2
1004b9fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1004b9fe:	687b      	ldr	r3, [r7, #4]
1004ba00:	2200      	movs	r2, #0
1004ba02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004ba04:	687b      	ldr	r3, [r7, #4]
1004ba06:	681b      	ldr	r3, [r3, #0]
1004ba08:	68fa      	ldr	r2, [r7, #12]
1004ba0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004ba0c:	687b      	ldr	r3, [r7, #4]
1004ba0e:	2288      	movs	r2, #136	@ 0x88
1004ba10:	2120      	movs	r1, #32
1004ba12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004ba14:	687b      	ldr	r3, [r7, #4]
1004ba16:	2284      	movs	r2, #132	@ 0x84
1004ba18:	2100      	movs	r1, #0
1004ba1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004ba1c:	2300      	movs	r3, #0
}
1004ba1e:	0018      	movs	r0, r3
1004ba20:	46bd      	mov	sp, r7
1004ba22:	b004      	add	sp, #16
1004ba24:	bd80      	pop	{r7, pc}
1004ba26:	46c0      	nop			@ (mov r8, r8)
1004ba28:	dfffffff 	.word	0xdfffffff

1004ba2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004ba2c:	b580      	push	{r7, lr}
1004ba2e:	b084      	sub	sp, #16
1004ba30:	af00      	add	r7, sp, #0
1004ba32:	6078      	str	r0, [r7, #4]
1004ba34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004ba36:	687b      	ldr	r3, [r7, #4]
1004ba38:	2284      	movs	r2, #132	@ 0x84
1004ba3a:	5c9b      	ldrb	r3, [r3, r2]
1004ba3c:	2b01      	cmp	r3, #1
1004ba3e:	d101      	bne.n	1004ba44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004ba40:	2302      	movs	r3, #2
1004ba42:	e02e      	b.n	1004baa2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004ba44:	687b      	ldr	r3, [r7, #4]
1004ba46:	2284      	movs	r2, #132	@ 0x84
1004ba48:	2101      	movs	r1, #1
1004ba4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004ba4c:	687b      	ldr	r3, [r7, #4]
1004ba4e:	2288      	movs	r2, #136	@ 0x88
1004ba50:	2124      	movs	r1, #36	@ 0x24
1004ba52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004ba54:	687b      	ldr	r3, [r7, #4]
1004ba56:	681b      	ldr	r3, [r3, #0]
1004ba58:	681b      	ldr	r3, [r3, #0]
1004ba5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004ba5c:	687b      	ldr	r3, [r7, #4]
1004ba5e:	681b      	ldr	r3, [r3, #0]
1004ba60:	681a      	ldr	r2, [r3, #0]
1004ba62:	687b      	ldr	r3, [r7, #4]
1004ba64:	681b      	ldr	r3, [r3, #0]
1004ba66:	2101      	movs	r1, #1
1004ba68:	438a      	bics	r2, r1
1004ba6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004ba6c:	687b      	ldr	r3, [r7, #4]
1004ba6e:	681b      	ldr	r3, [r3, #0]
1004ba70:	689b      	ldr	r3, [r3, #8]
1004ba72:	00db      	lsls	r3, r3, #3
1004ba74:	08d9      	lsrs	r1, r3, #3
1004ba76:	687b      	ldr	r3, [r7, #4]
1004ba78:	681b      	ldr	r3, [r3, #0]
1004ba7a:	683a      	ldr	r2, [r7, #0]
1004ba7c:	430a      	orrs	r2, r1
1004ba7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004ba80:	687b      	ldr	r3, [r7, #4]
1004ba82:	0018      	movs	r0, r3
1004ba84:	f000 f854 	bl	1004bb30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004ba88:	687b      	ldr	r3, [r7, #4]
1004ba8a:	681b      	ldr	r3, [r3, #0]
1004ba8c:	68fa      	ldr	r2, [r7, #12]
1004ba8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004ba90:	687b      	ldr	r3, [r7, #4]
1004ba92:	2288      	movs	r2, #136	@ 0x88
1004ba94:	2120      	movs	r1, #32
1004ba96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004ba98:	687b      	ldr	r3, [r7, #4]
1004ba9a:	2284      	movs	r2, #132	@ 0x84
1004ba9c:	2100      	movs	r1, #0
1004ba9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004baa0:	2300      	movs	r3, #0
}
1004baa2:	0018      	movs	r0, r3
1004baa4:	46bd      	mov	sp, r7
1004baa6:	b004      	add	sp, #16
1004baa8:	bd80      	pop	{r7, pc}
	...

1004baac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004baac:	b580      	push	{r7, lr}
1004baae:	b084      	sub	sp, #16
1004bab0:	af00      	add	r7, sp, #0
1004bab2:	6078      	str	r0, [r7, #4]
1004bab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004bab6:	687b      	ldr	r3, [r7, #4]
1004bab8:	2284      	movs	r2, #132	@ 0x84
1004baba:	5c9b      	ldrb	r3, [r3, r2]
1004babc:	2b01      	cmp	r3, #1
1004babe:	d101      	bne.n	1004bac4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004bac0:	2302      	movs	r3, #2
1004bac2:	e02f      	b.n	1004bb24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004bac4:	687b      	ldr	r3, [r7, #4]
1004bac6:	2284      	movs	r2, #132	@ 0x84
1004bac8:	2101      	movs	r1, #1
1004baca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004bacc:	687b      	ldr	r3, [r7, #4]
1004bace:	2288      	movs	r2, #136	@ 0x88
1004bad0:	2124      	movs	r1, #36	@ 0x24
1004bad2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004bad4:	687b      	ldr	r3, [r7, #4]
1004bad6:	681b      	ldr	r3, [r3, #0]
1004bad8:	681b      	ldr	r3, [r3, #0]
1004bada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004badc:	687b      	ldr	r3, [r7, #4]
1004bade:	681b      	ldr	r3, [r3, #0]
1004bae0:	681a      	ldr	r2, [r3, #0]
1004bae2:	687b      	ldr	r3, [r7, #4]
1004bae4:	681b      	ldr	r3, [r3, #0]
1004bae6:	2101      	movs	r1, #1
1004bae8:	438a      	bics	r2, r1
1004baea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004baec:	687b      	ldr	r3, [r7, #4]
1004baee:	681b      	ldr	r3, [r3, #0]
1004baf0:	689b      	ldr	r3, [r3, #8]
1004baf2:	4a0e      	ldr	r2, [pc, #56]	@ (1004bb2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004baf4:	4013      	ands	r3, r2
1004baf6:	0019      	movs	r1, r3
1004baf8:	687b      	ldr	r3, [r7, #4]
1004bafa:	681b      	ldr	r3, [r3, #0]
1004bafc:	683a      	ldr	r2, [r7, #0]
1004bafe:	430a      	orrs	r2, r1
1004bb00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004bb02:	687b      	ldr	r3, [r7, #4]
1004bb04:	0018      	movs	r0, r3
1004bb06:	f000 f813 	bl	1004bb30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004bb0a:	687b      	ldr	r3, [r7, #4]
1004bb0c:	681b      	ldr	r3, [r3, #0]
1004bb0e:	68fa      	ldr	r2, [r7, #12]
1004bb10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004bb12:	687b      	ldr	r3, [r7, #4]
1004bb14:	2288      	movs	r2, #136	@ 0x88
1004bb16:	2120      	movs	r1, #32
1004bb18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004bb1a:	687b      	ldr	r3, [r7, #4]
1004bb1c:	2284      	movs	r2, #132	@ 0x84
1004bb1e:	2100      	movs	r1, #0
1004bb20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004bb22:	2300      	movs	r3, #0
}
1004bb24:	0018      	movs	r0, r3
1004bb26:	46bd      	mov	sp, r7
1004bb28:	b004      	add	sp, #16
1004bb2a:	bd80      	pop	{r7, pc}
1004bb2c:	f1ffffff 	.word	0xf1ffffff

1004bb30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004bb30:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bb32:	b085      	sub	sp, #20
1004bb34:	af00      	add	r7, sp, #0
1004bb36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004bb38:	687b      	ldr	r3, [r7, #4]
1004bb3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004bb3c:	2b00      	cmp	r3, #0
1004bb3e:	d108      	bne.n	1004bb52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004bb40:	687b      	ldr	r3, [r7, #4]
1004bb42:	226a      	movs	r2, #106	@ 0x6a
1004bb44:	2101      	movs	r1, #1
1004bb46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004bb48:	687b      	ldr	r3, [r7, #4]
1004bb4a:	2268      	movs	r2, #104	@ 0x68
1004bb4c:	2101      	movs	r1, #1
1004bb4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004bb50:	e043      	b.n	1004bbda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004bb52:	260f      	movs	r6, #15
1004bb54:	19bb      	adds	r3, r7, r6
1004bb56:	2208      	movs	r2, #8
1004bb58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004bb5a:	200e      	movs	r0, #14
1004bb5c:	183b      	adds	r3, r7, r0
1004bb5e:	2208      	movs	r2, #8
1004bb60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004bb62:	687b      	ldr	r3, [r7, #4]
1004bb64:	681b      	ldr	r3, [r3, #0]
1004bb66:	689b      	ldr	r3, [r3, #8]
1004bb68:	0e5b      	lsrs	r3, r3, #25
1004bb6a:	b2da      	uxtb	r2, r3
1004bb6c:	240d      	movs	r4, #13
1004bb6e:	193b      	adds	r3, r7, r4
1004bb70:	2107      	movs	r1, #7
1004bb72:	400a      	ands	r2, r1
1004bb74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004bb76:	687b      	ldr	r3, [r7, #4]
1004bb78:	681b      	ldr	r3, [r3, #0]
1004bb7a:	689b      	ldr	r3, [r3, #8]
1004bb7c:	0f5b      	lsrs	r3, r3, #29
1004bb7e:	b2da      	uxtb	r2, r3
1004bb80:	250c      	movs	r5, #12
1004bb82:	197b      	adds	r3, r7, r5
1004bb84:	2107      	movs	r1, #7
1004bb86:	400a      	ands	r2, r1
1004bb88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004bb8a:	183b      	adds	r3, r7, r0
1004bb8c:	781b      	ldrb	r3, [r3, #0]
1004bb8e:	197a      	adds	r2, r7, r5
1004bb90:	7812      	ldrb	r2, [r2, #0]
1004bb92:	4914      	ldr	r1, [pc, #80]	@ (1004bbe4 <UARTEx_SetNbDataToProcess+0xb4>)
1004bb94:	5c8a      	ldrb	r2, [r1, r2]
1004bb96:	435a      	muls	r2, r3
1004bb98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004bb9a:	197b      	adds	r3, r7, r5
1004bb9c:	781b      	ldrb	r3, [r3, #0]
1004bb9e:	4a12      	ldr	r2, [pc, #72]	@ (1004bbe8 <UARTEx_SetNbDataToProcess+0xb8>)
1004bba0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004bba2:	0019      	movs	r1, r3
1004bba4:	f7f4 fbd6 	bl	10040354 <__divsi3>
1004bba8:	0003      	movs	r3, r0
1004bbaa:	b299      	uxth	r1, r3
1004bbac:	687b      	ldr	r3, [r7, #4]
1004bbae:	226a      	movs	r2, #106	@ 0x6a
1004bbb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004bbb2:	19bb      	adds	r3, r7, r6
1004bbb4:	781b      	ldrb	r3, [r3, #0]
1004bbb6:	193a      	adds	r2, r7, r4
1004bbb8:	7812      	ldrb	r2, [r2, #0]
1004bbba:	490a      	ldr	r1, [pc, #40]	@ (1004bbe4 <UARTEx_SetNbDataToProcess+0xb4>)
1004bbbc:	5c8a      	ldrb	r2, [r1, r2]
1004bbbe:	435a      	muls	r2, r3
1004bbc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004bbc2:	193b      	adds	r3, r7, r4
1004bbc4:	781b      	ldrb	r3, [r3, #0]
1004bbc6:	4a08      	ldr	r2, [pc, #32]	@ (1004bbe8 <UARTEx_SetNbDataToProcess+0xb8>)
1004bbc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004bbca:	0019      	movs	r1, r3
1004bbcc:	f7f4 fbc2 	bl	10040354 <__divsi3>
1004bbd0:	0003      	movs	r3, r0
1004bbd2:	b299      	uxth	r1, r3
1004bbd4:	687b      	ldr	r3, [r7, #4]
1004bbd6:	2268      	movs	r2, #104	@ 0x68
1004bbd8:	5299      	strh	r1, [r3, r2]
}
1004bbda:	46c0      	nop			@ (mov r8, r8)
1004bbdc:	46bd      	mov	sp, r7
1004bbde:	b005      	add	sp, #20
1004bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004bbe2:	46c0      	nop			@ (mov r8, r8)
1004bbe4:	10065d44 	.word	0x10065d44
1004bbe8:	10065d4c 	.word	0x10065d4c

1004bbec <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1004bbec:	b580      	push	{r7, lr}
1004bbee:	b082      	sub	sp, #8
1004bbf0:	af00      	add	r7, sp, #0
1004bbf2:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
1004bbf4:	4b0c      	ldr	r3, [pc, #48]	@ (1004bc28 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004bbf6:	791b      	ldrb	r3, [r3, #4]
1004bbf8:	2b01      	cmp	r3, #1
1004bbfa:	d102      	bne.n	1004bc02 <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1004bbfc:	2301      	movs	r3, #1
1004bbfe:	425b      	negs	r3, r3
1004bc00:	e00d      	b.n	1004bc1e <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
1004bc02:	4b09      	ldr	r3, [pc, #36]	@ (1004bc28 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004bc04:	791b      	ldrb	r3, [r3, #4]
1004bc06:	001a      	movs	r2, r3
1004bc08:	4b07      	ldr	r3, [pc, #28]	@ (1004bc28 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004bc0a:	0092      	lsls	r2, r2, #2
1004bc0c:	6879      	ldr	r1, [r7, #4]
1004bc0e:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
1004bc10:	4b05      	ldr	r3, [pc, #20]	@ (1004bc28 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004bc12:	791b      	ldrb	r3, [r3, #4]
1004bc14:	3301      	adds	r3, #1
1004bc16:	b2da      	uxtb	r2, r3
1004bc18:	4b03      	ldr	r3, [pc, #12]	@ (1004bc28 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004bc1a:	711a      	strb	r2, [r3, #4]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1004bc1c:	2300      	movs	r3, #0
}
1004bc1e:	0018      	movs	r0, r3
1004bc20:	46bd      	mov	sp, r7
1004bc22:	b002      	add	sp, #8
1004bc24:	bd80      	pop	{r7, pc}
1004bc26:	46c0      	nop			@ (mov r8, r8)
1004bc28:	20000d58 	.word	0x20000d58

1004bc2c <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004bc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bc2e:	b089      	sub	sp, #36	@ 0x24
1004bc30:	af00      	add	r7, sp, #0
1004bc32:	6078      	str	r0, [r7, #4]
1004bc34:	000a      	movs	r2, r1
1004bc36:	1cbb      	adds	r3, r7, #2
1004bc38:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004bc3a:	231f      	movs	r3, #31
1004bc3c:	18fb      	adds	r3, r7, r3
1004bc3e:	2200      	movs	r2, #0
1004bc40:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004bc42:	687b      	ldr	r3, [r7, #4]
1004bc44:	781b      	ldrb	r3, [r3, #0]
1004bc46:	2b04      	cmp	r3, #4
1004bc48:	d003      	beq.n	1004bc52 <BLE_STACK_Event+0x26>
1004bc4a:	687b      	ldr	r3, [r7, #4]
1004bc4c:	781b      	ldrb	r3, [r3, #0]
1004bc4e:	2b82      	cmp	r3, #130	@ 0x82
1004bc50:	d148      	bne.n	1004bce4 <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004bc52:	687b      	ldr	r3, [r7, #4]
1004bc54:	3301      	adds	r3, #1
1004bc56:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004bc58:	687b      	ldr	r3, [r7, #4]
1004bc5a:	781b      	ldrb	r3, [r3, #0]
1004bc5c:	2b04      	cmp	r3, #4
1004bc5e:	d103      	bne.n	1004bc68 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004bc60:	693b      	ldr	r3, [r7, #16]
1004bc62:	3302      	adds	r3, #2
1004bc64:	61bb      	str	r3, [r7, #24]
1004bc66:	e005      	b.n	1004bc74 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004bc68:	687b      	ldr	r3, [r7, #4]
1004bc6a:	3301      	adds	r3, #1
1004bc6c:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
1004bc6e:	68fb      	ldr	r3, [r7, #12]
1004bc70:	3303      	adds	r3, #3
1004bc72:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004bc74:	693b      	ldr	r3, [r7, #16]
1004bc76:	781b      	ldrb	r3, [r3, #0]
1004bc78:	2bff      	cmp	r3, #255	@ 0xff
1004bc7a:	d133      	bne.n	1004bce4 <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004bc7c:	69bb      	ldr	r3, [r7, #24]
1004bc7e:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
1004bc80:	68bb      	ldr	r3, [r7, #8]
1004bc82:	781a      	ldrb	r2, [r3, #0]
1004bc84:	785b      	ldrb	r3, [r3, #1]
1004bc86:	021b      	lsls	r3, r3, #8
1004bc88:	4313      	orrs	r3, r2
1004bc8a:	b29b      	uxth	r3, r3
1004bc8c:	001a      	movs	r2, r3
1004bc8e:	23fc      	movs	r3, #252	@ 0xfc
1004bc90:	021b      	lsls	r3, r3, #8
1004bc92:	401a      	ands	r2, r3
1004bc94:	23c0      	movs	r3, #192	@ 0xc0
1004bc96:	011b      	lsls	r3, r3, #4
1004bc98:	429a      	cmp	r2, r3
1004bc9a:	d123      	bne.n	1004bce4 <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004bc9c:	2317      	movs	r3, #23
1004bc9e:	18fb      	adds	r3, r7, r3
1004bca0:	2200      	movs	r2, #0
1004bca2:	701a      	strb	r2, [r3, #0]
1004bca4:	e015      	b.n	1004bcd2 <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
1004bca6:	2517      	movs	r5, #23
1004bca8:	197b      	adds	r3, r7, r5
1004bcaa:	781a      	ldrb	r2, [r3, #0]
1004bcac:	4b14      	ldr	r3, [pc, #80]	@ (1004bd00 <BLE_STACK_Event+0xd4>)
1004bcae:	0092      	lsls	r2, r2, #2
1004bcb0:	58d3      	ldr	r3, [r2, r3]
1004bcb2:	261f      	movs	r6, #31
1004bcb4:	19bc      	adds	r4, r7, r6
1004bcb6:	68ba      	ldr	r2, [r7, #8]
1004bcb8:	0010      	movs	r0, r2
1004bcba:	4798      	blx	r3
1004bcbc:	0003      	movs	r3, r0
1004bcbe:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
1004bcc0:	19bb      	adds	r3, r7, r6
1004bcc2:	781b      	ldrb	r3, [r3, #0]
1004bcc4:	2b01      	cmp	r3, #1
1004bcc6:	d00c      	beq.n	1004bce2 <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004bcc8:	197b      	adds	r3, r7, r5
1004bcca:	781a      	ldrb	r2, [r3, #0]
1004bccc:	197b      	adds	r3, r7, r5
1004bcce:	3201      	adds	r2, #1
1004bcd0:	701a      	strb	r2, [r3, #0]
1004bcd2:	4b0b      	ldr	r3, [pc, #44]	@ (1004bd00 <BLE_STACK_Event+0xd4>)
1004bcd4:	791b      	ldrb	r3, [r3, #4]
1004bcd6:	2217      	movs	r2, #23
1004bcd8:	18ba      	adds	r2, r7, r2
1004bcda:	7812      	ldrb	r2, [r2, #0]
1004bcdc:	429a      	cmp	r2, r3
1004bcde:	d3e2      	bcc.n	1004bca6 <BLE_STACK_Event+0x7a>
1004bce0:	e000      	b.n	1004bce4 <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
1004bce2:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004bce4:	231f      	movs	r3, #31
1004bce6:	18fb      	adds	r3, r7, r3
1004bce8:	781b      	ldrb	r3, [r3, #0]
1004bcea:	2b00      	cmp	r3, #0
1004bcec:	d103      	bne.n	1004bcf6 <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1004bcee:	687b      	ldr	r3, [r7, #4]
1004bcf0:	0018      	movs	r0, r3
1004bcf2:	f003 f81d 	bl	1004ed30 <BLEEVT_App_Notification>
  }
}
1004bcf6:	46c0      	nop			@ (mov r8, r8)
1004bcf8:	46bd      	mov	sp, r7
1004bcfa:	b009      	add	sp, #36	@ 0x24
1004bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004bcfe:	46c0      	nop			@ (mov r8, r8)
1004bd00:	20000d58 	.word	0x20000d58

1004bd04 <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
1004bd04:	b580      	push	{r7, lr}
1004bd06:	b082      	sub	sp, #8
1004bd08:	af00      	add	r7, sp, #0
1004bd0a:	0002      	movs	r2, r0
1004bd0c:	1dbb      	adds	r3, r7, #6
1004bd0e:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
1004bd10:	1dbb      	adds	r3, r7, #6
1004bd12:	881b      	ldrh	r3, [r3, #0]
1004bd14:	0018      	movs	r0, r3
1004bd16:	f007 f879 	bl	10052e0c <GAP_name_disc_proc_connected_check>
}
1004bd1a:	46c0      	nop			@ (mov r8, r8)
1004bd1c:	46bd      	mov	sp, r7
1004bd1e:	b002      	add	sp, #8
1004bd20:	bd80      	pop	{r7, pc}

1004bd22 <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
1004bd22:	b580      	push	{r7, lr}
1004bd24:	b082      	sub	sp, #8
1004bd26:	af00      	add	r7, sp, #0
1004bd28:	0002      	movs	r2, r0
1004bd2a:	1dfb      	adds	r3, r7, #7
1004bd2c:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1004bd2e:	1dfb      	adds	r3, r7, #7
1004bd30:	781b      	ldrb	r3, [r3, #0]
1004bd32:	0018      	movs	r0, r3
1004bd34:	f007 faae 	bl	10053294 <GAP_LimDiscTimeoutcb>
}
1004bd38:	46c0      	nop			@ (mov r8, r8)
1004bd3a:	46bd      	mov	sp, r7
1004bd3c:	b002      	add	sp, #8
1004bd3e:	bd80      	pop	{r7, pc}

1004bd40 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
1004bd40:	b580      	push	{r7, lr}
1004bd42:	b082      	sub	sp, #8
1004bd44:	af00      	add	r7, sp, #0
1004bd46:	6078      	str	r0, [r7, #4]
1004bd48:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
1004bd4a:	683a      	ldr	r2, [r7, #0]
1004bd4c:	687b      	ldr	r3, [r7, #4]
1004bd4e:	0011      	movs	r1, r2
1004bd50:	0018      	movs	r0, r3
1004bd52:	f006 f885 	bl	10051e60 <hci_acl_data_tx_cmpl_event_int_cb>
1004bd56:	0003      	movs	r3, r0
                                             buff_p);
}
1004bd58:	0018      	movs	r0, r3
1004bd5a:	46bd      	mov	sp, r7
1004bd5c:	b002      	add	sp, #8
1004bd5e:	bd80      	pop	{r7, pc}

1004bd60 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
1004bd60:	b580      	push	{r7, lr}
1004bd62:	b082      	sub	sp, #8
1004bd64:	af00      	add	r7, sp, #0
1004bd66:	6078      	str	r0, [r7, #4]
1004bd68:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
1004bd6a:	683a      	ldr	r2, [r7, #0]
1004bd6c:	687b      	ldr	r3, [r7, #4]
1004bd6e:	0011      	movs	r1, r2
1004bd70:	0018      	movs	r0, r3
1004bd72:	f006 f89f 	bl	10051eb4 <hci_acl_data_ind_event_int_cb>
1004bd76:	0003      	movs	r3, r0
                                         buff_p);
}
1004bd78:	0018      	movs	r0, r3
1004bd7a:	46bd      	mov	sp, r7
1004bd7c:	b002      	add	sp, #8
1004bd7e:	bd80      	pop	{r7, pc}

1004bd80 <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
1004bd80:	b580      	push	{r7, lr}
1004bd82:	b082      	sub	sp, #8
1004bd84:	af00      	add	r7, sp, #0
1004bd86:	0002      	movs	r2, r0
1004bd88:	1dbb      	adds	r3, r7, #6
1004bd8a:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
1004bd8c:	1dbb      	adds	r3, r7, #6
1004bd8e:	881b      	ldrh	r3, [r3, #0]
1004bd90:	0018      	movs	r0, r3
1004bd92:	f00a fbdd 	bl	10056550 <Controller_Process_Q>
}
1004bd96:	46c0      	nop			@ (mov r8, r8)
1004bd98:	46bd      	mov	sp, r7
1004bd9a:	b002      	add	sp, #8
1004bd9c:	bd80      	pop	{r7, pc}

1004bd9e <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
1004bd9e:	b580      	push	{r7, lr}
1004bda0:	b082      	sub	sp, #8
1004bda2:	af00      	add	r7, sp, #0
1004bda4:	0002      	movs	r2, r0
1004bda6:	1dbb      	adds	r3, r7, #6
1004bda8:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1004bdaa:	1dbb      	adds	r3, r7, #6
1004bdac:	881b      	ldrh	r3, [r3, #0]
1004bdae:	0018      	movs	r0, r3
1004bdb0:	f00a fc1e 	bl	100565f0 <LLC_offline_control_procedures_processing>
}
1004bdb4:	46c0      	nop			@ (mov r8, r8)
1004bdb6:	46bd      	mov	sp, r7
1004bdb8:	b002      	add	sp, #8
1004bdba:	bd80      	pop	{r7, pc}

1004bdbc <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1004bdbc:	b580      	push	{r7, lr}
1004bdbe:	af00      	add	r7, sp, #0
    return phy_upd_csr();
1004bdc0:	f00a fce0 	bl	10056784 <phy_upd_csr>
1004bdc4:	0003      	movs	r3, r0
}
1004bdc6:	0018      	movs	r0, r3
1004bdc8:	46bd      	mov	sp, r7
1004bdca:	bd80      	pop	{r7, pc}

1004bdcc <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1004bdcc:	b580      	push	{r7, lr}
1004bdce:	af00      	add	r7, sp, #0
    return conn_supp_csr();
1004bdd0:	f00a fcdc 	bl	1005678c <conn_supp_csr>
1004bdd4:	0003      	movs	r3, r0
}
1004bdd6:	0018      	movs	r0, r3
1004bdd8:	46bd      	mov	sp, r7
1004bdda:	bd80      	pop	{r7, pc}

1004bddc <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1004bddc:	b580      	push	{r7, lr}
1004bdde:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
1004bde0:	f006 f88a 	bl	10051ef8 <ACL_pkt_init>
1004bde4:	0003      	movs	r3, r0
}
1004bde6:	0018      	movs	r0, r3
1004bde8:	46bd      	mov	sp, r7
1004bdea:	bd80      	pop	{r7, pc}

1004bdec <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004bdec:	b580      	push	{r7, lr}
1004bdee:	b082      	sub	sp, #8
1004bdf0:	af00      	add	r7, sp, #0
1004bdf2:	6078      	str	r0, [r7, #4]
1004bdf4:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
1004bdf6:	683a      	ldr	r2, [r7, #0]
1004bdf8:	687b      	ldr	r3, [r7, #4]
1004bdfa:	0011      	movs	r1, r2
1004bdfc:	0018      	movs	r0, r3
1004bdfe:	f006 fc2d 	bl	1005265c <hci_disconnection_complete_event_int_cb>
1004be02:	0003      	movs	r3, r0
                                                   buff_p);
}
1004be04:	0018      	movs	r0, r3
1004be06:	46bd      	mov	sp, r7
1004be08:	b002      	add	sp, #8
1004be0a:	bd80      	pop	{r7, pc}

1004be0c <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1004be0c:	b580      	push	{r7, lr}
1004be0e:	b082      	sub	sp, #8
1004be10:	af00      	add	r7, sp, #0
1004be12:	6078      	str	r0, [r7, #4]
1004be14:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
1004be16:	683a      	ldr	r2, [r7, #0]
1004be18:	687b      	ldr	r3, [r7, #4]
1004be1a:	0011      	movs	r1, r2
1004be1c:	0018      	movs	r0, r3
1004be1e:	f006 fc4d 	bl	100526bc <hci_encryption_change_event_int_cb>
1004be22:	0003      	movs	r3, r0
                                              buff_p);
}
1004be24:	0018      	movs	r0, r3
1004be26:	46bd      	mov	sp, r7
1004be28:	b002      	add	sp, #8
1004be2a:	bd80      	pop	{r7, pc}

1004be2c <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004be2c:	b580      	push	{r7, lr}
1004be2e:	b082      	sub	sp, #8
1004be30:	af00      	add	r7, sp, #0
1004be32:	6078      	str	r0, [r7, #4]
1004be34:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
1004be36:	683a      	ldr	r2, [r7, #0]
1004be38:	687b      	ldr	r3, [r7, #4]
1004be3a:	0011      	movs	r1, r2
1004be3c:	0018      	movs	r0, r3
1004be3e:	f006 fc59 	bl	100526f4 <hci_encryption_key_refresh_complete_event_int_cb>
1004be42:	0003      	movs	r3, r0
                                                            buff_p);
}
1004be44:	0018      	movs	r0, r3
1004be46:	46bd      	mov	sp, r7
1004be48:	b002      	add	sp, #8
1004be4a:	bd80      	pop	{r7, pc}

1004be4c <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004be4c:	b580      	push	{r7, lr}
1004be4e:	b082      	sub	sp, #8
1004be50:	af00      	add	r7, sp, #0
1004be52:	6078      	str	r0, [r7, #4]
1004be54:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
1004be56:	683a      	ldr	r2, [r7, #0]
1004be58:	687b      	ldr	r3, [r7, #4]
1004be5a:	0011      	movs	r1, r2
1004be5c:	0018      	movs	r0, r3
1004be5e:	f006 fc65 	bl	1005272c <hci_le_connection_complete_event_int_cb>
1004be62:	0003      	movs	r3, r0
                                                   buff_p);
}
1004be64:	0018      	movs	r0, r3
1004be66:	46bd      	mov	sp, r7
1004be68:	b002      	add	sp, #8
1004be6a:	bd80      	pop	{r7, pc}

1004be6c <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004be6c:	b580      	push	{r7, lr}
1004be6e:	b082      	sub	sp, #8
1004be70:	af00      	add	r7, sp, #0
1004be72:	6078      	str	r0, [r7, #4]
1004be74:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
1004be76:	683a      	ldr	r2, [r7, #0]
1004be78:	687b      	ldr	r3, [r7, #4]
1004be7a:	0011      	movs	r1, r2
1004be7c:	0018      	movs	r0, r3
1004be7e:	f006 fc95 	bl	100527ac <hci_le_enhanced_connection_complete_event_int_cb>
1004be82:	0003      	movs	r3, r0
                                                            buff_p);
}
1004be84:	0018      	movs	r0, r3
1004be86:	46bd      	mov	sp, r7
1004be88:	b002      	add	sp, #8
1004be8a:	bd80      	pop	{r7, pc}

1004be8c <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
1004be8c:	b580      	push	{r7, lr}
1004be8e:	b082      	sub	sp, #8
1004be90:	af00      	add	r7, sp, #0
1004be92:	6078      	str	r0, [r7, #4]
1004be94:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
1004be96:	683a      	ldr	r2, [r7, #0]
1004be98:	687b      	ldr	r3, [r7, #4]
1004be9a:	0011      	movs	r1, r2
1004be9c:	0018      	movs	r0, r3
1004be9e:	f006 fccb 	bl	10052838 <hci_le_long_term_key_request_event_int_cb>
1004bea2:	0003      	movs	r3, r0
                                                     buff_p);
}
1004bea4:	0018      	movs	r0, r3
1004bea6:	46bd      	mov	sp, r7
1004bea8:	b002      	add	sp, #8
1004beaa:	bd80      	pop	{r7, pc}

1004beac <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1004beac:	b580      	push	{r7, lr}
1004beae:	b082      	sub	sp, #8
1004beb0:	af00      	add	r7, sp, #0
1004beb2:	6078      	str	r0, [r7, #4]
1004beb4:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
1004beb6:	683a      	ldr	r2, [r7, #0]
1004beb8:	687b      	ldr	r3, [r7, #4]
1004beba:	0011      	movs	r1, r2
1004bebc:	0018      	movs	r0, r3
1004bebe:	f006 fceb 	bl	10052898 <hci_le_read_local_p256_public_key_complete_event_int_cb>
1004bec2:	0003      	movs	r3, r0
                                                                   buff_p);
}
1004bec4:	0018      	movs	r0, r3
1004bec6:	46bd      	mov	sp, r7
1004bec8:	b002      	add	sp, #8
1004beca:	bd80      	pop	{r7, pc}

1004becc <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1004becc:	b580      	push	{r7, lr}
1004bece:	b082      	sub	sp, #8
1004bed0:	af00      	add	r7, sp, #0
1004bed2:	6078      	str	r0, [r7, #4]
1004bed4:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
1004bed6:	683a      	ldr	r2, [r7, #0]
1004bed8:	687b      	ldr	r3, [r7, #4]
1004beda:	0011      	movs	r1, r2
1004bedc:	0018      	movs	r0, r3
1004bede:	f006 fcf9 	bl	100528d4 <hci_le_generate_dhkey_complete_event_int_cb>
1004bee2:	0003      	movs	r3, r0
                                                       buff_p);
}
1004bee4:	0018      	movs	r0, r3
1004bee6:	46bd      	mov	sp, r7
1004bee8:	b002      	add	sp, #8
1004beea:	bd80      	pop	{r7, pc}

1004beec <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
1004beec:	b580      	push	{r7, lr}
1004beee:	af00      	add	r7, sp, #0
    return MBM_init();
1004bef0:	f011 fdfa 	bl	1005dae8 <MBM_init>
1004bef4:	0003      	movs	r3, r0
}
1004bef6:	0018      	movs	r0, r3
1004bef8:	46bd      	mov	sp, r7
1004befa:	bd80      	pop	{r7, pc}

1004befc <smp_debug_trudy__set_config_ucfg>:
#endif

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_debug_trudy__set_config_ucfg(uint32_t config)
{
1004befc:	b580      	push	{r7, lr}
1004befe:	b082      	sub	sp, #8
1004bf00:	af00      	add	r7, sp, #0
1004bf02:	6078      	str	r0, [r7, #4]
    return smp_debug_trudy__set_config(config);
1004bf04:	687b      	ldr	r3, [r7, #4]
1004bf06:	0018      	movs	r0, r3
1004bf08:	f012 fde5 	bl	1005ead6 <smp_debug_trudy__set_config>
1004bf0c:	0003      	movs	r3, r0
}
1004bf0e:	0018      	movs	r0, r3
1004bf10:	46bd      	mov	sp, r7
1004bf12:	b002      	add	sp, #8
1004bf14:	bd80      	pop	{r7, pc}

1004bf16 <smp_sap_scp_force_debug_key_usage_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_sap_scp_force_debug_key_usage_ucfg(uint8_t config_val)
{
1004bf16:	b580      	push	{r7, lr}
1004bf18:	b082      	sub	sp, #8
1004bf1a:	af00      	add	r7, sp, #0
1004bf1c:	0002      	movs	r2, r0
1004bf1e:	1dfb      	adds	r3, r7, #7
1004bf20:	701a      	strb	r2, [r3, #0]
    return smp_sap_scp_force_debug_key_usage(config_val);
1004bf22:	1dfb      	adds	r3, r7, #7
1004bf24:	781b      	ldrb	r3, [r3, #0]
1004bf26:	0018      	movs	r0, r3
1004bf28:	f013 fad4 	bl	1005f4d4 <smp_sap_scp_force_debug_key_usage>
1004bf2c:	0003      	movs	r3, r0
}
1004bf2e:	0018      	movs	r0, r3
1004bf30:	46bd      	mov	sp, r7
1004bf32:	b002      	add	sp, #8
1004bf34:	bd80      	pop	{r7, pc}

1004bf36 <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
1004bf36:	b580      	push	{r7, lr}
1004bf38:	b082      	sub	sp, #8
1004bf3a:	af00      	add	r7, sp, #0
1004bf3c:	0002      	movs	r2, r0
1004bf3e:	1dfb      	adds	r3, r7, #7
1004bf40:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
1004bf42:	1dfb      	adds	r3, r7, #7
1004bf44:	781b      	ldrb	r3, [r3, #0]
1004bf46:	0018      	movs	r0, r3
1004bf48:	f00a fe00 	bl	10056b4c <L2C_init>
1004bf4c:	0003      	movs	r3, r0
}
1004bf4e:	0018      	movs	r0, r3
1004bf50:	46bd      	mov	sp, r7
1004bf52:	b002      	add	sp, #8
1004bf54:	bd80      	pop	{r7, pc}

1004bf56 <llc_conn_multi_link_connection_ucfg>:
#endif /* ((CONNECTION_SUBRATING_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
tBleStatus llc_conn_multi_link_connection_ucfg(uint8_t enable)
{
1004bf56:	b580      	push	{r7, lr}
1004bf58:	b082      	sub	sp, #8
1004bf5a:	af00      	add	r7, sp, #0
1004bf5c:	0002      	movs	r2, r0
1004bf5e:	1dfb      	adds	r3, r7, #7
1004bf60:	701a      	strb	r2, [r3, #0]
    return llc_conn_multi_link_connection(enable);
1004bf62:	1dfb      	adds	r3, r7, #7
1004bf64:	781b      	ldrb	r3, [r3, #0]
1004bf66:	0018      	movs	r0, r3
1004bf68:	f00b fe4f 	bl	10057c0a <llc_conn_multi_link_connection>
1004bf6c:	0003      	movs	r3, r0
}
1004bf6e:	0018      	movs	r0, r3
1004bf70:	46bd      	mov	sp, r7
1004bf72:	b002      	add	sp, #8
1004bf74:	bd80      	pop	{r7, pc}

1004bf76 <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
1004bf76:	b580      	push	{r7, lr}
1004bf78:	b082      	sub	sp, #8
1004bf7a:	af00      	add	r7, sp, #0
1004bf7c:	0002      	movs	r2, r0
1004bf7e:	1dbb      	adds	r3, r7, #6
1004bf80:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
1004bf82:	1dbb      	adds	r3, r7, #6
1004bf84:	881b      	ldrh	r3, [r3, #0]
1004bf86:	0018      	movs	r0, r3
1004bf88:	f00c fc8a 	bl	100588a0 <llc_conn_peripheral_roll_back_params_tsk>
}
1004bf8c:	46c0      	nop			@ (mov r8, r8)
1004bf8e:	46bd      	mov	sp, r7
1004bf90:	b002      	add	sp, #8
1004bf92:	bd80      	pop	{r7, pc}

1004bf94 <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
1004bf94:	b580      	push	{r7, lr}
1004bf96:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
1004bf98:	f00d fc5c 	bl	10059854 <LL_cpe_init_phy_update>
}
1004bf9c:	46c0      	nop			@ (mov r8, r8)
1004bf9e:	46bd      	mov	sp, r7
1004bfa0:	bd80      	pop	{r7, pc}

1004bfa2 <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1004bfa2:	b580      	push	{r7, lr}
1004bfa4:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
1004bfa6:	f00d fc5d 	bl	10059864 <LL_cpe_init_conn_update>
}
1004bfaa:	46c0      	nop			@ (mov r8, r8)
1004bfac:	46bd      	mov	sp, r7
1004bfae:	bd80      	pop	{r7, pc}

1004bfb0 <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1004bfb0:	b580      	push	{r7, lr}
1004bfb2:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
1004bfb4:	f00d fc5e 	bl	10059874 <LL_cpe_init_chmap_update>
}
1004bfb8:	46c0      	nop			@ (mov r8, r8)
1004bfba:	46bd      	mov	sp, r7
1004bfbc:	bd80      	pop	{r7, pc}

1004bfbe <LL_cpe_init_ucfg>:
#endif /* ((CONTROLLER_CIS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1004bfbe:	b580      	push	{r7, lr}
1004bfc0:	af00      	add	r7, sp, #0
    LL_cpe_init();
1004bfc2:	f00d fc9b 	bl	100598fc <LL_cpe_init>
}
1004bfc6:	46c0      	nop			@ (mov r8, r8)
1004bfc8:	46bd      	mov	sp, r7
1004bfca:	bd80      	pop	{r7, pc}

1004bfcc <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
1004bfcc:	b580      	push	{r7, lr}
1004bfce:	b082      	sub	sp, #8
1004bfd0:	af00      	add	r7, sp, #0
1004bfd2:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
1004bfd4:	687b      	ldr	r3, [r7, #4]
1004bfd6:	0018      	movs	r0, r3
1004bfd8:	f00e f8b8 	bl	1005a14c <LL_conn_upd_max_tx_time_coded>
}
1004bfdc:	46c0      	nop			@ (mov r8, r8)
1004bfde:	46bd      	mov	sp, r7
1004bfe0:	b002      	add	sp, #8
1004bfe2:	bd80      	pop	{r7, pc}

1004bfe4 <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
1004bfe4:	b580      	push	{r7, lr}
1004bfe6:	b082      	sub	sp, #8
1004bfe8:	af00      	add	r7, sp, #0
1004bfea:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
1004bfec:	687b      	ldr	r3, [r7, #4]
1004bfee:	0018      	movs	r0, r3
1004bff0:	f00e f930 	bl	1005a254 <LL_conn_upd_data_length_change_event>
}
1004bff4:	46c0      	nop			@ (mov r8, r8)
1004bff6:	46bd      	mov	sp, r7
1004bff8:	b002      	add	sp, #8
1004bffa:	bd80      	pop	{r7, pc}

1004bffc <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
1004bffc:	b580      	push	{r7, lr}
1004bffe:	b082      	sub	sp, #8
1004c000:	af00      	add	r7, sp, #0
1004c002:	0002      	movs	r2, r0
1004c004:	1dbb      	adds	r3, r7, #6
1004c006:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
1004c008:	1dbb      	adds	r3, r7, #6
1004c00a:	881b      	ldrh	r3, [r3, #0]
1004c00c:	0018      	movs	r0, r3
1004c00e:	f00e ff21 	bl	1005ae54 <LLC_authenticated_payload_timeout_processing>
}
1004c012:	46c0      	nop			@ (mov r8, r8)
1004c014:	46bd      	mov	sp, r7
1004c016:	b002      	add	sp, #8
1004c018:	bd80      	pop	{r7, pc}

1004c01a <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
1004c01a:	b580      	push	{r7, lr}
1004c01c:	b082      	sub	sp, #8
1004c01e:	af00      	add	r7, sp, #0
1004c020:	0002      	movs	r2, r0
1004c022:	1dfb      	adds	r3, r7, #7
1004c024:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
1004c026:	1dfb      	adds	r3, r7, #7
1004c028:	781b      	ldrb	r3, [r3, #0]
1004c02a:	0018      	movs	r0, r3
1004c02c:	f00f f8df 	bl	1005b1ee <LL_phy_upd_pending>
1004c030:	0003      	movs	r3, r0
}
1004c032:	0018      	movs	r0, r3
1004c034:	46bd      	mov	sp, r7
1004c036:	b002      	add	sp, #8
1004c038:	bd80      	pop	{r7, pc}

1004c03a <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
1004c03a:	b580      	push	{r7, lr}
1004c03c:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
1004c03e:	f00f f891 	bl	1005b164 <LL_phy_update_init>
1004c042:	0003      	movs	r3, r0
}
1004c044:	0018      	movs	r0, r3
1004c046:	46bd      	mov	sp, r7
1004c048:	bd80      	pop	{r7, pc}

1004c04a <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
1004c04a:	b580      	push	{r7, lr}
1004c04c:	b082      	sub	sp, #8
1004c04e:	af00      	add	r7, sp, #0
1004c050:	0002      	movs	r2, r0
1004c052:	1dfb      	adds	r3, r7, #7
1004c054:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
1004c056:	1dfb      	adds	r3, r7, #7
1004c058:	781b      	ldrb	r3, [r3, #0]
1004c05a:	0018      	movs	r0, r3
1004c05c:	f00f f88c 	bl	1005b178 <LL_phy_update_init_per_st_data>
1004c060:	0003      	movs	r3, r0
}
1004c062:	0018      	movs	r0, r3
1004c064:	46bd      	mov	sp, r7
1004c066:	b002      	add	sp, #8
1004c068:	bd80      	pop	{r7, pc}

1004c06a <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
1004c06a:	b580      	push	{r7, lr}
1004c06c:	b082      	sub	sp, #8
1004c06e:	af00      	add	r7, sp, #0
1004c070:	0002      	movs	r2, r0
1004c072:	1dfb      	adds	r3, r7, #7
1004c074:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1004c076:	1dfb      	adds	r3, r7, #7
1004c078:	781b      	ldrb	r3, [r3, #0]
1004c07a:	0018      	movs	r0, r3
1004c07c:	f00f fc66 	bl	1005b94c <LL_phy_upd_evt_pending_check_isr>
}
1004c080:	46c0      	nop			@ (mov r8, r8)
1004c082:	46bd      	mov	sp, r7
1004c084:	b002      	add	sp, #8
1004c086:	bd80      	pop	{r7, pc}

1004c088 <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1004c088:	b580      	push	{r7, lr}
1004c08a:	b084      	sub	sp, #16
1004c08c:	af00      	add	r7, sp, #0
1004c08e:	60f8      	str	r0, [r7, #12]
1004c090:	60b9      	str	r1, [r7, #8]
1004c092:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
1004c094:	687a      	ldr	r2, [r7, #4]
1004c096:	68b9      	ldr	r1, [r7, #8]
1004c098:	68fb      	ldr	r3, [r7, #12]
1004c09a:	0018      	movs	r0, r3
1004c09c:	f010 fd24 	bl	1005cae8 <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
1004c0a0:	46c0      	nop			@ (mov r8, r8)
1004c0a2:	46bd      	mov	sp, r7
1004c0a4:	b004      	add	sp, #16
1004c0a6:	bd80      	pop	{r7, pc}

1004c0a8 <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1004c0a8:	b580      	push	{r7, lr}
1004c0aa:	b082      	sub	sp, #8
1004c0ac:	af00      	add	r7, sp, #0
1004c0ae:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
1004c0b0:	687b      	ldr	r3, [r7, #4]
1004c0b2:	0018      	movs	r0, r3
1004c0b4:	f010 fea4 	bl	1005ce00 <EADV_start_request_radio_tasks>
1004c0b8:	0003      	movs	r3, r0
}
1004c0ba:	0018      	movs	r0, r3
1004c0bc:	46bd      	mov	sp, r7
1004c0be:	b002      	add	sp, #8
1004c0c0:	bd80      	pop	{r7, pc}

1004c0c2 <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
1004c0c2:	b5b0      	push	{r4, r5, r7, lr}
1004c0c4:	b08a      	sub	sp, #40	@ 0x28
1004c0c6:	af08      	add	r7, sp, #32
1004c0c8:	0005      	movs	r5, r0
1004c0ca:	000c      	movs	r4, r1
1004c0cc:	0010      	movs	r0, r2
1004c0ce:	0019      	movs	r1, r3
1004c0d0:	1dfb      	adds	r3, r7, #7
1004c0d2:	1c2a      	adds	r2, r5, #0
1004c0d4:	701a      	strb	r2, [r3, #0]
1004c0d6:	1dbb      	adds	r3, r7, #6
1004c0d8:	1c22      	adds	r2, r4, #0
1004c0da:	701a      	strb	r2, [r3, #0]
1004c0dc:	1d7b      	adds	r3, r7, #5
1004c0de:	1c02      	adds	r2, r0, #0
1004c0e0:	701a      	strb	r2, [r3, #0]
1004c0e2:	1d3b      	adds	r3, r7, #4
1004c0e4:	1c0a      	adds	r2, r1, #0
1004c0e6:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1004c0e8:	1d3b      	adds	r3, r7, #4
1004c0ea:	781c      	ldrb	r4, [r3, #0]
1004c0ec:	1d7b      	adds	r3, r7, #5
1004c0ee:	781a      	ldrb	r2, [r3, #0]
1004c0f0:	1dbb      	adds	r3, r7, #6
1004c0f2:	7819      	ldrb	r1, [r3, #0]
1004c0f4:	1dfb      	adds	r3, r7, #7
1004c0f6:	7818      	ldrb	r0, [r3, #0]
1004c0f8:	2330      	movs	r3, #48	@ 0x30
1004c0fa:	18fb      	adds	r3, r7, r3
1004c0fc:	781b      	ldrb	r3, [r3, #0]
1004c0fe:	9306      	str	r3, [sp, #24]
1004c100:	232c      	movs	r3, #44	@ 0x2c
1004c102:	18fb      	adds	r3, r7, r3
1004c104:	781b      	ldrb	r3, [r3, #0]
1004c106:	9305      	str	r3, [sp, #20]
1004c108:	2328      	movs	r3, #40	@ 0x28
1004c10a:	18fb      	adds	r3, r7, r3
1004c10c:	781b      	ldrb	r3, [r3, #0]
1004c10e:	9304      	str	r3, [sp, #16]
1004c110:	2324      	movs	r3, #36	@ 0x24
1004c112:	18fb      	adds	r3, r7, r3
1004c114:	781b      	ldrb	r3, [r3, #0]
1004c116:	9303      	str	r3, [sp, #12]
1004c118:	2320      	movs	r3, #32
1004c11a:	18fb      	adds	r3, r7, r3
1004c11c:	781b      	ldrb	r3, [r3, #0]
1004c11e:	9302      	str	r3, [sp, #8]
1004c120:	231c      	movs	r3, #28
1004c122:	18fb      	adds	r3, r7, r3
1004c124:	781b      	ldrb	r3, [r3, #0]
1004c126:	9301      	str	r3, [sp, #4]
1004c128:	2318      	movs	r3, #24
1004c12a:	18fb      	adds	r3, r7, r3
1004c12c:	781b      	ldrb	r3, [r3, #0]
1004c12e:	9300      	str	r3, [sp, #0]
1004c130:	0023      	movs	r3, r4
1004c132:	f011 f929 	bl	1005d388 <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
1004c136:	46c0      	nop			@ (mov r8, r8)
1004c138:	46bd      	mov	sp, r7
1004c13a:	b002      	add	sp, #8
1004c13c:	bdb0      	pop	{r4, r5, r7, pc}

1004c13e <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
1004c13e:	b580      	push	{r7, lr}
1004c140:	b082      	sub	sp, #8
1004c142:	af00      	add	r7, sp, #0
1004c144:	0002      	movs	r2, r0
1004c146:	1dbb      	adds	r3, r7, #6
1004c148:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
1004c14a:	1dbb      	adds	r3, r7, #6
1004c14c:	881b      	ldrh	r3, [r3, #0]
1004c14e:	0018      	movs	r0, r3
1004c150:	f012 fcc4 	bl	1005eadc <smp_fsm_process_actions_wrt_state_tsk>
}
1004c154:	46c0      	nop			@ (mov r8, r8)
1004c156:	46bd      	mov	sp, r7
1004c158:	b002      	add	sp, #8
1004c15a:	bd80      	pop	{r7, pc}

1004c15c <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1004c15c:	b580      	push	{r7, lr}
1004c15e:	b082      	sub	sp, #8
1004c160:	af00      	add	r7, sp, #0
1004c162:	0002      	movs	r2, r0
1004c164:	1dbb      	adds	r3, r7, #6
1004c166:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
1004c168:	1dbb      	adds	r3, r7, #6
1004c16a:	881b      	ldrh	r3, [r3, #0]
1004c16c:	0018      	movs	r0, r3
1004c16e:	f012 fd99 	bl	1005eca4 <smp_rxp_process_rxed_packets_tsk>
}
1004c172:	46c0      	nop			@ (mov r8, r8)
1004c174:	46bd      	mov	sp, r7
1004c176:	b002      	add	sp, #8
1004c178:	bd80      	pop	{r7, pc}

1004c17a <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1004c17a:	b580      	push	{r7, lr}
1004c17c:	af00      	add	r7, sp, #0
    smp_init();
1004c17e:	f012 fef1 	bl	1005ef64 <smp_init>
}
1004c182:	46c0      	nop			@ (mov r8, r8)
1004c184:	46bd      	mov	sp, r7
1004c186:	bd80      	pop	{r7, pc}

1004c188 <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1004c188:	b580      	push	{r7, lr}
1004c18a:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
1004c18c:	f007 fc40 	bl	10053a10 <GAT_att_cmn_init>
}
1004c190:	46c0      	nop			@ (mov r8, r8)
1004c192:	46bd      	mov	sp, r7
1004c194:	bd80      	pop	{r7, pc}

1004c196 <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1004c196:	b580      	push	{r7, lr}
1004c198:	b082      	sub	sp, #8
1004c19a:	af00      	add	r7, sp, #0
1004c19c:	0002      	movs	r2, r0
1004c19e:	1dbb      	adds	r3, r7, #6
1004c1a0:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
1004c1a2:	1dbb      	adds	r3, r7, #6
1004c1a4:	881b      	ldrh	r3, [r3, #0]
1004c1a6:	0018      	movs	r0, r3
1004c1a8:	f007 fc9e 	bl	10053ae8 <GAT_att_cmn_timer_expire_tsk>
}
1004c1ac:	46c0      	nop			@ (mov r8, r8)
1004c1ae:	46bd      	mov	sp, r7
1004c1b0:	b002      	add	sp, #8
1004c1b2:	bd80      	pop	{r7, pc}

1004c1b4 <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
1004c1b4:	b580      	push	{r7, lr}
1004c1b6:	b082      	sub	sp, #8
1004c1b8:	af00      	add	r7, sp, #0
1004c1ba:	0002      	movs	r2, r0
1004c1bc:	1dbb      	adds	r3, r7, #6
1004c1be:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
1004c1c0:	1dbb      	adds	r3, r7, #6
1004c1c2:	881b      	ldrh	r3, [r3, #0]
1004c1c4:	0018      	movs	r0, r3
1004c1c6:	f007 fd03 	bl	10053bd0 <GAT_att_cmn_tx_pool_evt_tsk>
}
1004c1ca:	46c0      	nop			@ (mov r8, r8)
1004c1cc:	46bd      	mov	sp, r7
1004c1ce:	b002      	add	sp, #8
1004c1d0:	bd80      	pop	{r7, pc}

1004c1d2 <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
1004c1d2:	b580      	push	{r7, lr}
1004c1d4:	b082      	sub	sp, #8
1004c1d6:	af00      	add	r7, sp, #0
1004c1d8:	0002      	movs	r2, r0
1004c1da:	1dbb      	adds	r3, r7, #6
1004c1dc:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
1004c1de:	1dbb      	adds	r3, r7, #6
1004c1e0:	881b      	ldrh	r3, [r3, #0]
1004c1e2:	0018      	movs	r0, r3
1004c1e4:	f008 f820 	bl	10054228 <GAT_att_srv_process_rx_pckt_tsk>
}
1004c1e8:	46c0      	nop			@ (mov r8, r8)
1004c1ea:	46bd      	mov	sp, r7
1004c1ec:	b002      	add	sp, #8
1004c1ee:	bd80      	pop	{r7, pc}

1004c1f0 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
1004c1f0:	b580      	push	{r7, lr}
1004c1f2:	b082      	sub	sp, #8
1004c1f4:	af00      	add	r7, sp, #0
1004c1f6:	0002      	movs	r2, r0
1004c1f8:	1dbb      	adds	r3, r7, #6
1004c1fa:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
1004c1fc:	1dbb      	adds	r3, r7, #6
1004c1fe:	881b      	ldrh	r3, [r3, #0]
1004c200:	0018      	movs	r0, r3
1004c202:	f009 f8fb 	bl	100553fc <GAT_srv_db_hash_tsk>
}
1004c206:	46c0      	nop			@ (mov r8, r8)
1004c208:	46bd      	mov	sp, r7
1004c20a:	b002      	add	sp, #8
1004c20c:	bd80      	pop	{r7, pc}

1004c20e <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
1004c20e:	b580      	push	{r7, lr}
1004c210:	b082      	sub	sp, #8
1004c212:	af00      	add	r7, sp, #0
1004c214:	0002      	movs	r2, r0
1004c216:	1dbb      	adds	r3, r7, #6
1004c218:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
1004c21a:	1dbb      	adds	r3, r7, #6
1004c21c:	881b      	ldrh	r3, [r3, #0]
1004c21e:	0018      	movs	r0, r3
1004c220:	f009 f9a6 	bl	10055570 <GAT_srv_send_srv_change_tsk>
}
1004c224:	46c0      	nop			@ (mov r8, r8)
1004c226:	46bd      	mov	sp, r7
1004c228:	b002      	add	sp, #8
1004c22a:	bd80      	pop	{r7, pc}

1004c22c <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
1004c22c:	b580      	push	{r7, lr}
1004c22e:	b082      	sub	sp, #8
1004c230:	af00      	add	r7, sp, #0
1004c232:	0002      	movs	r2, r0
1004c234:	1dbb      	adds	r3, r7, #6
1004c236:	801a      	strh	r2, [r3, #0]
1004c238:	1d7b      	adds	r3, r7, #5
1004c23a:	1c0a      	adds	r2, r1, #0
1004c23c:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
1004c23e:	1d7b      	adds	r3, r7, #5
1004c240:	781a      	ldrb	r2, [r3, #0]
1004c242:	1dbb      	adds	r3, r7, #6
1004c244:	881b      	ldrh	r3, [r3, #0]
1004c246:	0011      	movs	r1, r2
1004c248:	0018      	movs	r0, r3
1004c24a:	f005 fb23 	bl	10051894 <aci_gap_terminate_api>
1004c24e:	0003      	movs	r3, r0
                                 Reason);
}
1004c250:	0018      	movs	r0, r3
1004c252:	46bd      	mov	sp, r7
1004c254:	b002      	add	sp, #8
1004c256:	bd80      	pop	{r7, pc}

1004c258 <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1004c258:	b580      	push	{r7, lr}
1004c25a:	b082      	sub	sp, #8
1004c25c:	af00      	add	r7, sp, #0
1004c25e:	0002      	movs	r2, r0
1004c260:	1dfb      	adds	r3, r7, #7
1004c262:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
1004c264:	1dfb      	adds	r3, r7, #7
1004c266:	781b      	ldrb	r3, [r3, #0]
1004c268:	0018      	movs	r0, r3
1004c26a:	f005 fb9e 	bl	100519aa <aci_gap_set_io_capability_api>
1004c26e:	0003      	movs	r3, r0
}
1004c270:	0018      	movs	r0, r3
1004c272:	46bd      	mov	sp, r7
1004c274:	b002      	add	sp, #8
1004c276:	bd80      	pop	{r7, pc}

1004c278 <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1004c278:	b5b0      	push	{r4, r5, r7, lr}
1004c27a:	b086      	sub	sp, #24
1004c27c:	af04      	add	r7, sp, #16
1004c27e:	0005      	movs	r5, r0
1004c280:	000c      	movs	r4, r1
1004c282:	0010      	movs	r0, r2
1004c284:	0019      	movs	r1, r3
1004c286:	1dfb      	adds	r3, r7, #7
1004c288:	1c2a      	adds	r2, r5, #0
1004c28a:	701a      	strb	r2, [r3, #0]
1004c28c:	1dbb      	adds	r3, r7, #6
1004c28e:	1c22      	adds	r2, r4, #0
1004c290:	701a      	strb	r2, [r3, #0]
1004c292:	1d7b      	adds	r3, r7, #5
1004c294:	1c02      	adds	r2, r0, #0
1004c296:	701a      	strb	r2, [r3, #0]
1004c298:	1d3b      	adds	r3, r7, #4
1004c29a:	1c0a      	adds	r2, r1, #0
1004c29c:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
1004c29e:	1d3b      	adds	r3, r7, #4
1004c2a0:	781c      	ldrb	r4, [r3, #0]
1004c2a2:	1d7b      	adds	r3, r7, #5
1004c2a4:	781a      	ldrb	r2, [r3, #0]
1004c2a6:	1dbb      	adds	r3, r7, #6
1004c2a8:	7819      	ldrb	r1, [r3, #0]
1004c2aa:	1dfb      	adds	r3, r7, #7
1004c2ac:	7818      	ldrb	r0, [r3, #0]
1004c2ae:	2320      	movs	r3, #32
1004c2b0:	18fb      	adds	r3, r7, r3
1004c2b2:	781b      	ldrb	r3, [r3, #0]
1004c2b4:	9302      	str	r3, [sp, #8]
1004c2b6:	231c      	movs	r3, #28
1004c2b8:	18fb      	adds	r3, r7, r3
1004c2ba:	781b      	ldrb	r3, [r3, #0]
1004c2bc:	9301      	str	r3, [sp, #4]
1004c2be:	2318      	movs	r3, #24
1004c2c0:	18fb      	adds	r3, r7, r3
1004c2c2:	781b      	ldrb	r3, [r3, #0]
1004c2c4:	9300      	str	r3, [sp, #0]
1004c2c6:	0023      	movs	r3, r4
1004c2c8:	f005 fb78 	bl	100519bc <aci_gap_set_security_requirements_api>
1004c2cc:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
1004c2ce:	0018      	movs	r0, r3
1004c2d0:	46bd      	mov	sp, r7
1004c2d2:	b002      	add	sp, #8
1004c2d4:	bdb0      	pop	{r4, r5, r7, pc}

1004c2d6 <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
1004c2d6:	b580      	push	{r7, lr}
1004c2d8:	b082      	sub	sp, #8
1004c2da:	af00      	add	r7, sp, #0
1004c2dc:	0002      	movs	r2, r0
1004c2de:	6039      	str	r1, [r7, #0]
1004c2e0:	1dbb      	adds	r3, r7, #6
1004c2e2:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
1004c2e4:	683a      	ldr	r2, [r7, #0]
1004c2e6:	1dbb      	adds	r3, r7, #6
1004c2e8:	881b      	ldrh	r3, [r3, #0]
1004c2ea:	0011      	movs	r1, r2
1004c2ec:	0018      	movs	r0, r3
1004c2ee:	f005 fba9 	bl	10051a44 <aci_gap_passkey_resp_api>
1004c2f2:	0003      	movs	r3, r0
                                    Passkey);
}
1004c2f4:	0018      	movs	r0, r3
1004c2f6:	46bd      	mov	sp, r7
1004c2f8:	b002      	add	sp, #8
1004c2fa:	bd80      	pop	{r7, pc}

1004c2fc <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1004c2fc:	b580      	push	{r7, lr}
1004c2fe:	b082      	sub	sp, #8
1004c300:	af00      	add	r7, sp, #0
1004c302:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
1004c304:	687b      	ldr	r3, [r7, #4]
1004c306:	0018      	movs	r0, r3
1004c308:	f005 fba8 	bl	10051a5c <aci_gatt_srv_add_service_api>
1004c30c:	0003      	movs	r3, r0
}
1004c30e:	0018      	movs	r0, r3
1004c310:	46bd      	mov	sp, r7
1004c312:	b002      	add	sp, #8
1004c314:	bd80      	pop	{r7, pc}

1004c316 <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
1004c316:	b580      	push	{r7, lr}
1004c318:	b082      	sub	sp, #8
1004c31a:	af00      	add	r7, sp, #0
1004c31c:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1004c31e:	687b      	ldr	r3, [r7, #4]
1004c320:	0018      	movs	r0, r3
1004c322:	f005 fb9f 	bl	10051a64 <aci_gatt_srv_get_service_handle_api>
1004c326:	0003      	movs	r3, r0
}
1004c328:	0018      	movs	r0, r3
1004c32a:	46bd      	mov	sp, r7
1004c32c:	b002      	add	sp, #8
1004c32e:	bd80      	pop	{r7, pc}

1004c330 <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
1004c330:	b580      	push	{r7, lr}
1004c332:	b082      	sub	sp, #8
1004c334:	af00      	add	r7, sp, #0
1004c336:	6078      	str	r0, [r7, #4]
1004c338:	000a      	movs	r2, r1
1004c33a:	1cbb      	adds	r3, r7, #2
1004c33c:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1004c33e:	1cbb      	adds	r3, r7, #2
1004c340:	881a      	ldrh	r2, [r3, #0]
1004c342:	687b      	ldr	r3, [r7, #4]
1004c344:	0011      	movs	r1, r2
1004c346:	0018      	movs	r0, r3
1004c348:	f005 fb90 	bl	10051a6c <aci_gatt_srv_add_char_api>
1004c34c:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1004c34e:	0018      	movs	r0, r3
1004c350:	46bd      	mov	sp, r7
1004c352:	b002      	add	sp, #8
1004c354:	bd80      	pop	{r7, pc}

1004c356 <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
1004c356:	b580      	push	{r7, lr}
1004c358:	b082      	sub	sp, #8
1004c35a:	af00      	add	r7, sp, #0
1004c35c:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1004c35e:	687b      	ldr	r3, [r7, #4]
1004c360:	0018      	movs	r0, r3
1004c362:	f005 fb87 	bl	10051a74 <aci_gatt_srv_get_char_decl_handle_api>
1004c366:	0003      	movs	r3, r0
}
1004c368:	0018      	movs	r0, r3
1004c36a:	46bd      	mov	sp, r7
1004c36c:	b002      	add	sp, #8
1004c36e:	bd80      	pop	{r7, pc}

1004c370 <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
1004c370:	b5b0      	push	{r4, r5, r7, lr}
1004c372:	b084      	sub	sp, #16
1004c374:	af02      	add	r7, sp, #8
1004c376:	0005      	movs	r5, r0
1004c378:	000c      	movs	r4, r1
1004c37a:	0010      	movs	r0, r2
1004c37c:	0019      	movs	r1, r3
1004c37e:	1dbb      	adds	r3, r7, #6
1004c380:	1c2a      	adds	r2, r5, #0
1004c382:	801a      	strh	r2, [r3, #0]
1004c384:	1d3b      	adds	r3, r7, #4
1004c386:	1c22      	adds	r2, r4, #0
1004c388:	801a      	strh	r2, [r3, #0]
1004c38a:	1cbb      	adds	r3, r7, #2
1004c38c:	1c02      	adds	r2, r0, #0
1004c38e:	801a      	strh	r2, [r3, #0]
1004c390:	1c7b      	adds	r3, r7, #1
1004c392:	1c0a      	adds	r2, r1, #0
1004c394:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
1004c396:	1c7b      	adds	r3, r7, #1
1004c398:	781c      	ldrb	r4, [r3, #0]
1004c39a:	1cbb      	adds	r3, r7, #2
1004c39c:	881a      	ldrh	r2, [r3, #0]
1004c39e:	1d3b      	adds	r3, r7, #4
1004c3a0:	8819      	ldrh	r1, [r3, #0]
1004c3a2:	1dbb      	adds	r3, r7, #6
1004c3a4:	8818      	ldrh	r0, [r3, #0]
1004c3a6:	69fb      	ldr	r3, [r7, #28]
1004c3a8:	9301      	str	r3, [sp, #4]
1004c3aa:	2318      	movs	r3, #24
1004c3ac:	18fb      	adds	r3, r7, r3
1004c3ae:	881b      	ldrh	r3, [r3, #0]
1004c3b0:	9300      	str	r3, [sp, #0]
1004c3b2:	0023      	movs	r3, r4
1004c3b4:	f005 fb62 	bl	10051a7c <aci_gatt_srv_resp_api>
1004c3b8:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1004c3ba:	0018      	movs	r0, r3
1004c3bc:	46bd      	mov	sp, r7
1004c3be:	b002      	add	sp, #8
1004c3c0:	bdb0      	pop	{r4, r5, r7, pc}

1004c3c2 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
1004c3c2:	b5b0      	push	{r4, r5, r7, lr}
1004c3c4:	b084      	sub	sp, #16
1004c3c6:	af02      	add	r7, sp, #8
1004c3c8:	0005      	movs	r5, r0
1004c3ca:	000c      	movs	r4, r1
1004c3cc:	0010      	movs	r0, r2
1004c3ce:	0019      	movs	r1, r3
1004c3d0:	1dbb      	adds	r3, r7, #6
1004c3d2:	1c2a      	adds	r2, r5, #0
1004c3d4:	801a      	strh	r2, [r3, #0]
1004c3d6:	1d3b      	adds	r3, r7, #4
1004c3d8:	1c22      	adds	r2, r4, #0
1004c3da:	801a      	strh	r2, [r3, #0]
1004c3dc:	1cbb      	adds	r3, r7, #2
1004c3de:	1c02      	adds	r2, r0, #0
1004c3e0:	801a      	strh	r2, [r3, #0]
1004c3e2:	003b      	movs	r3, r7
1004c3e4:	1c0a      	adds	r2, r1, #0
1004c3e6:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
1004c3e8:	003b      	movs	r3, r7
1004c3ea:	881c      	ldrh	r4, [r3, #0]
1004c3ec:	1cbb      	adds	r3, r7, #2
1004c3ee:	881a      	ldrh	r2, [r3, #0]
1004c3f0:	1d3b      	adds	r3, r7, #4
1004c3f2:	8819      	ldrh	r1, [r3, #0]
1004c3f4:	1dbb      	adds	r3, r7, #6
1004c3f6:	8818      	ldrh	r0, [r3, #0]
1004c3f8:	2318      	movs	r3, #24
1004c3fa:	18fb      	adds	r3, r7, r3
1004c3fc:	881b      	ldrh	r3, [r3, #0]
1004c3fe:	9300      	str	r3, [sp, #0]
1004c400:	0023      	movs	r3, r4
1004c402:	f005 fcb1 	bl	10051d68 <aci_l2cap_connection_parameter_update_req_api>
1004c406:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
1004c408:	0018      	movs	r0, r3
1004c40a:	46bd      	mov	sp, r7
1004c40c:	b002      	add	sp, #8
1004c40e:	bdb0      	pop	{r4, r5, r7, pc}

1004c410 <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
1004c410:	b580      	push	{r7, lr}
1004c412:	b094      	sub	sp, #80	@ 0x50
1004c414:	af00      	add	r7, sp, #0
1004c416:	60f8      	str	r0, [r7, #12]
1004c418:	60b9      	str	r1, [r7, #8]
1004c41a:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
1004c41c:	2330      	movs	r3, #48	@ 0x30
1004c41e:	18fb      	adds	r3, r7, r3
1004c420:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
1004c422:	2320      	movs	r3, #32
1004c424:	18fb      	adds	r3, r7, r3
1004c426:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
1004c428:	2310      	movs	r3, #16
1004c42a:	18fb      	adds	r3, r7, r3
1004c42c:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
1004c42e:	2300      	movs	r3, #0
1004c430:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004c432:	e00d      	b.n	1004c450 <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
1004c434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c436:	687a      	ldr	r2, [r7, #4]
1004c438:	18d2      	adds	r2, r2, r3
1004c43a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c43c:	210f      	movs	r1, #15
1004c43e:	1acb      	subs	r3, r1, r3
1004c440:	0019      	movs	r1, r3
1004c442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1004c444:	185b      	adds	r3, r3, r1
1004c446:	7812      	ldrb	r2, [r2, #0]
1004c448:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
1004c44a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c44c:	3301      	adds	r3, #1
1004c44e:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004c450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c452:	2b0f      	cmp	r3, #15
1004c454:	ddee      	ble.n	1004c434 <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004c456:	2300      	movs	r3, #0
1004c458:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004c45a:	e03d      	b.n	1004c4d8 <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
1004c45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c45e:	2203      	movs	r2, #3
1004c460:	1ad3      	subs	r3, r2, r3
1004c462:	009b      	lsls	r3, r3, #2
1004c464:	68fa      	ldr	r2, [r7, #12]
1004c466:	18d3      	adds	r3, r2, r3
1004c468:	681a      	ldr	r2, [r3, #0]
1004c46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c46c:	009b      	lsls	r3, r3, #2
1004c46e:	0019      	movs	r1, r3
1004c470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004c472:	185b      	adds	r3, r3, r1
1004c474:	b2d2      	uxtb	r2, r2
1004c476:	701a      	strb	r2, [r3, #0]
1004c478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c47a:	2203      	movs	r2, #3
1004c47c:	1ad3      	subs	r3, r2, r3
1004c47e:	009b      	lsls	r3, r3, #2
1004c480:	68fa      	ldr	r2, [r7, #12]
1004c482:	18d3      	adds	r3, r2, r3
1004c484:	681b      	ldr	r3, [r3, #0]
1004c486:	0a19      	lsrs	r1, r3, #8
1004c488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c48a:	009b      	lsls	r3, r3, #2
1004c48c:	3301      	adds	r3, #1
1004c48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004c490:	18d3      	adds	r3, r2, r3
1004c492:	b2ca      	uxtb	r2, r1
1004c494:	701a      	strb	r2, [r3, #0]
1004c496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c498:	2203      	movs	r2, #3
1004c49a:	1ad3      	subs	r3, r2, r3
1004c49c:	009b      	lsls	r3, r3, #2
1004c49e:	68fa      	ldr	r2, [r7, #12]
1004c4a0:	18d3      	adds	r3, r2, r3
1004c4a2:	681b      	ldr	r3, [r3, #0]
1004c4a4:	0c19      	lsrs	r1, r3, #16
1004c4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c4a8:	009b      	lsls	r3, r3, #2
1004c4aa:	3302      	adds	r3, #2
1004c4ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004c4ae:	18d3      	adds	r3, r2, r3
1004c4b0:	b2ca      	uxtb	r2, r1
1004c4b2:	701a      	strb	r2, [r3, #0]
1004c4b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c4b6:	2203      	movs	r2, #3
1004c4b8:	1ad3      	subs	r3, r2, r3
1004c4ba:	009b      	lsls	r3, r3, #2
1004c4bc:	68fa      	ldr	r2, [r7, #12]
1004c4be:	18d3      	adds	r3, r2, r3
1004c4c0:	681b      	ldr	r3, [r3, #0]
1004c4c2:	0e19      	lsrs	r1, r3, #24
1004c4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c4c6:	009b      	lsls	r3, r3, #2
1004c4c8:	3303      	adds	r3, #3
1004c4ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004c4cc:	18d3      	adds	r3, r2, r3
1004c4ce:	b2ca      	uxtb	r2, r1
1004c4d0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004c4d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c4d4:	3301      	adds	r3, #1
1004c4d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004c4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c4da:	2b03      	cmp	r3, #3
1004c4dc:	ddbe      	ble.n	1004c45c <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
1004c4de:	2310      	movs	r3, #16
1004c4e0:	18fa      	adds	r2, r7, r3
1004c4e2:	2330      	movs	r3, #48	@ 0x30
1004c4e4:	18f9      	adds	r1, r7, r3
1004c4e6:	2320      	movs	r3, #32
1004c4e8:	18fb      	adds	r3, r7, r3
1004c4ea:	0018      	movs	r0, r3
1004c4ec:	f000 f894 	bl	1004c618 <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004c4f0:	2300      	movs	r3, #0
1004c4f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004c4f4:	e028      	b.n	1004c548 <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
1004c4f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c4f8:	009b      	lsls	r3, r3, #2
1004c4fa:	3303      	adds	r3, #3
1004c4fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1004c4fe:	18d3      	adds	r3, r2, r3
1004c500:	781b      	ldrb	r3, [r3, #0]
1004c502:	061a      	lsls	r2, r3, #24
1004c504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c506:	009b      	lsls	r3, r3, #2
1004c508:	3302      	adds	r3, #2
1004c50a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004c50c:	18cb      	adds	r3, r1, r3
1004c50e:	781b      	ldrb	r3, [r3, #0]
1004c510:	041b      	lsls	r3, r3, #16
1004c512:	431a      	orrs	r2, r3
1004c514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c516:	009b      	lsls	r3, r3, #2
1004c518:	3301      	adds	r3, #1
1004c51a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004c51c:	18cb      	adds	r3, r1, r3
1004c51e:	781b      	ldrb	r3, [r3, #0]
1004c520:	021b      	lsls	r3, r3, #8
1004c522:	431a      	orrs	r2, r3
1004c524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c526:	009b      	lsls	r3, r3, #2
1004c528:	0019      	movs	r1, r3
1004c52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004c52c:	185b      	adds	r3, r3, r1
1004c52e:	781b      	ldrb	r3, [r3, #0]
1004c530:	0018      	movs	r0, r3
1004c532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c534:	2103      	movs	r1, #3
1004c536:	1acb      	subs	r3, r1, r3
1004c538:	009b      	lsls	r3, r3, #2
1004c53a:	68b9      	ldr	r1, [r7, #8]
1004c53c:	18cb      	adds	r3, r1, r3
1004c53e:	4302      	orrs	r2, r0
1004c540:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004c542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c544:	3301      	adds	r3, #1
1004c546:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004c548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004c54a:	2b03      	cmp	r3, #3
1004c54c:	ddd3      	ble.n	1004c4f6 <AES_128_HW_enc+0xe6>
  }
}
1004c54e:	46c0      	nop			@ (mov r8, r8)
1004c550:	46c0      	nop			@ (mov r8, r8)
1004c552:	46bd      	mov	sp, r7
1004c554:	b014      	add	sp, #80	@ 0x50
1004c556:	bd80      	pop	{r7, pc}

1004c558 <LL_APB2_GRP1_EnableClock>:
{
1004c558:	b580      	push	{r7, lr}
1004c55a:	b084      	sub	sp, #16
1004c55c:	af00      	add	r7, sp, #0
1004c55e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004c560:	4b07      	ldr	r3, [pc, #28]	@ (1004c580 <LL_APB2_GRP1_EnableClock+0x28>)
1004c562:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004c564:	4b06      	ldr	r3, [pc, #24]	@ (1004c580 <LL_APB2_GRP1_EnableClock+0x28>)
1004c566:	687a      	ldr	r2, [r7, #4]
1004c568:	430a      	orrs	r2, r1
1004c56a:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004c56c:	4b04      	ldr	r3, [pc, #16]	@ (1004c580 <LL_APB2_GRP1_EnableClock+0x28>)
1004c56e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004c570:	687a      	ldr	r2, [r7, #4]
1004c572:	4013      	ands	r3, r2
1004c574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004c576:	68fb      	ldr	r3, [r7, #12]
}
1004c578:	46c0      	nop			@ (mov r8, r8)
1004c57a:	46bd      	mov	sp, r7
1004c57c:	b004      	add	sp, #16
1004c57e:	bd80      	pop	{r7, pc}
1004c580:	48400000 	.word	0x48400000

1004c584 <LL_APB2_GRP1_IsEnabledClock>:
{
1004c584:	b580      	push	{r7, lr}
1004c586:	b082      	sub	sp, #8
1004c588:	af00      	add	r7, sp, #0
1004c58a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004c58c:	4b06      	ldr	r3, [pc, #24]	@ (1004c5a8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004c58e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004c590:	687a      	ldr	r2, [r7, #4]
1004c592:	4013      	ands	r3, r2
1004c594:	687a      	ldr	r2, [r7, #4]
1004c596:	429a      	cmp	r2, r3
1004c598:	d101      	bne.n	1004c59e <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004c59a:	2301      	movs	r3, #1
1004c59c:	e000      	b.n	1004c5a0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004c59e:	2300      	movs	r3, #0
}
1004c5a0:	0018      	movs	r0, r3
1004c5a2:	46bd      	mov	sp, r7
1004c5a4:	b002      	add	sp, #8
1004c5a6:	bd80      	pop	{r7, pc}
1004c5a8:	48400000 	.word	0x48400000

1004c5ac <LL_APB2_GRP1_ForceReset>:
{
1004c5ac:	b580      	push	{r7, lr}
1004c5ae:	b082      	sub	sp, #8
1004c5b0:	af00      	add	r7, sp, #0
1004c5b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004c5b4:	4b04      	ldr	r3, [pc, #16]	@ (1004c5c8 <LL_APB2_GRP1_ForceReset+0x1c>)
1004c5b6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
1004c5b8:	4b03      	ldr	r3, [pc, #12]	@ (1004c5c8 <LL_APB2_GRP1_ForceReset+0x1c>)
1004c5ba:	687a      	ldr	r2, [r7, #4]
1004c5bc:	430a      	orrs	r2, r1
1004c5be:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004c5c0:	46c0      	nop			@ (mov r8, r8)
1004c5c2:	46bd      	mov	sp, r7
1004c5c4:	b002      	add	sp, #8
1004c5c6:	bd80      	pop	{r7, pc}
1004c5c8:	48400000 	.word	0x48400000

1004c5cc <LL_APB2_GRP1_ReleaseReset>:
{
1004c5cc:	b580      	push	{r7, lr}
1004c5ce:	b082      	sub	sp, #8
1004c5d0:	af00      	add	r7, sp, #0
1004c5d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004c5d4:	4b05      	ldr	r3, [pc, #20]	@ (1004c5ec <LL_APB2_GRP1_ReleaseReset+0x20>)
1004c5d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004c5d8:	687b      	ldr	r3, [r7, #4]
1004c5da:	43d9      	mvns	r1, r3
1004c5dc:	4b03      	ldr	r3, [pc, #12]	@ (1004c5ec <LL_APB2_GRP1_ReleaseReset+0x20>)
1004c5de:	400a      	ands	r2, r1
1004c5e0:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004c5e2:	46c0      	nop			@ (mov r8, r8)
1004c5e4:	46bd      	mov	sp, r7
1004c5e6:	b002      	add	sp, #8
1004c5e8:	bd80      	pop	{r7, pc}
1004c5ea:	46c0      	nop			@ (mov r8, r8)
1004c5ec:	48400000 	.word	0x48400000

1004c5f0 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
1004c5f0:	b580      	push	{r7, lr}
1004c5f2:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004c5f4:	2001      	movs	r0, #1
1004c5f6:	f7ff ffc5 	bl	1004c584 <LL_APB2_GRP1_IsEnabledClock>
1004c5fa:	1e03      	subs	r3, r0, #0
1004c5fc:	d108      	bne.n	1004c610 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004c5fe:	2001      	movs	r0, #1
1004c600:	f7ff ffd4 	bl	1004c5ac <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004c604:	2001      	movs	r0, #1
1004c606:	f7ff ffe1 	bl	1004c5cc <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004c60a:	2001      	movs	r0, #1
1004c60c:	f7ff ffa4 	bl	1004c558 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
1004c610:	2300      	movs	r3, #0
}
1004c612:	0018      	movs	r0, r3
1004c614:	46bd      	mov	sp, r7
1004c616:	bd80      	pop	{r7, pc}

1004c618 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
1004c618:	b590      	push	{r4, r7, lr}
1004c61a:	b087      	sub	sp, #28
1004c61c:	af00      	add	r7, sp, #0
1004c61e:	60f8      	str	r0, [r7, #12]
1004c620:	60b9      	str	r1, [r7, #8]
1004c622:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
1004c624:	4b31      	ldr	r3, [pc, #196]	@ (1004c6ec <HW_AES_Encrypt+0xd4>)
1004c626:	781b      	ldrb	r3, [r3, #0]
1004c628:	b2db      	uxtb	r3, r3
1004c62a:	3301      	adds	r3, #1
1004c62c:	b2da      	uxtb	r2, r3
1004c62e:	4b2f      	ldr	r3, [pc, #188]	@ (1004c6ec <HW_AES_Encrypt+0xd4>)
1004c630:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
1004c632:	2417      	movs	r4, #23
1004c634:	193b      	adds	r3, r7, r4
1004c636:	4a2d      	ldr	r2, [pc, #180]	@ (1004c6ec <HW_AES_Encrypt+0xd4>)
1004c638:	7812      	ldrb	r2, [r2, #0]
1004c63a:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
1004c63c:	23c0      	movs	r3, #192	@ 0xc0
1004c63e:	05db      	lsls	r3, r3, #23
1004c640:	68ba      	ldr	r2, [r7, #8]
1004c642:	6812      	ldr	r2, [r2, #0]
1004c644:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
1004c646:	68bb      	ldr	r3, [r7, #8]
1004c648:	1d1a      	adds	r2, r3, #4
1004c64a:	23c0      	movs	r3, #192	@ 0xc0
1004c64c:	05db      	lsls	r3, r3, #23
1004c64e:	6812      	ldr	r2, [r2, #0]
1004c650:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
1004c652:	68bb      	ldr	r3, [r7, #8]
1004c654:	3308      	adds	r3, #8
1004c656:	001a      	movs	r2, r3
1004c658:	23c0      	movs	r3, #192	@ 0xc0
1004c65a:	05db      	lsls	r3, r3, #23
1004c65c:	6812      	ldr	r2, [r2, #0]
1004c65e:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
1004c660:	68bb      	ldr	r3, [r7, #8]
1004c662:	330c      	adds	r3, #12
1004c664:	001a      	movs	r2, r3
1004c666:	23c0      	movs	r3, #192	@ 0xc0
1004c668:	05db      	lsls	r3, r3, #23
1004c66a:	6812      	ldr	r2, [r2, #0]
1004c66c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
1004c66e:	23c0      	movs	r3, #192	@ 0xc0
1004c670:	05db      	lsls	r3, r3, #23
1004c672:	68fa      	ldr	r2, [r7, #12]
1004c674:	6812      	ldr	r2, [r2, #0]
1004c676:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
1004c678:	68fb      	ldr	r3, [r7, #12]
1004c67a:	1d1a      	adds	r2, r3, #4
1004c67c:	23c0      	movs	r3, #192	@ 0xc0
1004c67e:	05db      	lsls	r3, r3, #23
1004c680:	6812      	ldr	r2, [r2, #0]
1004c682:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
1004c684:	68fb      	ldr	r3, [r7, #12]
1004c686:	3308      	adds	r3, #8
1004c688:	001a      	movs	r2, r3
1004c68a:	23c0      	movs	r3, #192	@ 0xc0
1004c68c:	05db      	lsls	r3, r3, #23
1004c68e:	6812      	ldr	r2, [r2, #0]
1004c690:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
1004c692:	68fb      	ldr	r3, [r7, #12]
1004c694:	330c      	adds	r3, #12
1004c696:	001a      	movs	r2, r3
1004c698:	23c0      	movs	r3, #192	@ 0xc0
1004c69a:	05db      	lsls	r3, r3, #23
1004c69c:	6812      	ldr	r2, [r2, #0]
1004c69e:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
1004c6a0:	f000 f826 	bl	1004c6f0 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
1004c6a4:	23c0      	movs	r3, #192	@ 0xc0
1004c6a6:	05db      	lsls	r3, r3, #23
1004c6a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004c6aa:	687b      	ldr	r3, [r7, #4]
1004c6ac:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
1004c6ae:	23c0      	movs	r3, #192	@ 0xc0
1004c6b0:	05da      	lsls	r2, r3, #23
1004c6b2:	687b      	ldr	r3, [r7, #4]
1004c6b4:	3304      	adds	r3, #4
1004c6b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
1004c6b8:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
1004c6ba:	23c0      	movs	r3, #192	@ 0xc0
1004c6bc:	05da      	lsls	r2, r3, #23
1004c6be:	687b      	ldr	r3, [r7, #4]
1004c6c0:	3308      	adds	r3, #8
1004c6c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004c6c4:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
1004c6c6:	23c0      	movs	r3, #192	@ 0xc0
1004c6c8:	05da      	lsls	r2, r3, #23
1004c6ca:	687b      	ldr	r3, [r7, #4]
1004c6cc:	330c      	adds	r3, #12
1004c6ce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
1004c6d0:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
1004c6d2:	4b06      	ldr	r3, [pc, #24]	@ (1004c6ec <HW_AES_Encrypt+0xd4>)
1004c6d4:	781b      	ldrb	r3, [r3, #0]
1004c6d6:	b2db      	uxtb	r3, r3
1004c6d8:	193a      	adds	r2, r7, r4
1004c6da:	7812      	ldrb	r2, [r2, #0]
1004c6dc:	429a      	cmp	r2, r3
1004c6de:	d1a8      	bne.n	1004c632 <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
1004c6e0:	2300      	movs	r3, #0
}
1004c6e2:	0018      	movs	r0, r3
1004c6e4:	46bd      	mov	sp, r7
1004c6e6:	b007      	add	sp, #28
1004c6e8:	bd90      	pop	{r4, r7, pc}
1004c6ea:	46c0      	nop			@ (mov r8, r8)
1004c6ec:	20000d60 	.word	0x20000d60

1004c6f0 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
1004c6f0:	b580      	push	{r7, lr}
1004c6f2:	b082      	sub	sp, #8
1004c6f4:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
1004c6f6:	1dfb      	adds	r3, r7, #7
1004c6f8:	2264      	movs	r2, #100	@ 0x64
1004c6fa:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
1004c6fc:	23c0      	movs	r3, #192	@ 0xc0
1004c6fe:	05db      	lsls	r3, r3, #23
1004c700:	0018      	movs	r0, r3
1004c702:	f000 f81c 	bl	1004c73e <LL_AES_StartManualEncription>
    do
    {
        i--;
1004c706:	1dfb      	adds	r3, r7, #7
1004c708:	781b      	ldrb	r3, [r3, #0]
1004c70a:	b2db      	uxtb	r3, r3
1004c70c:	3b01      	subs	r3, #1
1004c70e:	b2da      	uxtb	r2, r3
1004c710:	1dfb      	adds	r3, r7, #7
1004c712:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
1004c714:	23c0      	movs	r3, #192	@ 0xc0
1004c716:	05db      	lsls	r3, r3, #23
1004c718:	0018      	movs	r0, r3
1004c71a:	f000 f81e 	bl	1004c75a <LL_AES_IsBusy>
1004c71e:	1e03      	subs	r3, r0, #0
1004c720:	d005      	beq.n	1004c72e <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
1004c722:	1dfb      	adds	r3, r7, #7
1004c724:	781b      	ldrb	r3, [r3, #0]
1004c726:	b2db      	uxtb	r3, r3
1004c728:	2b00      	cmp	r3, #0
1004c72a:	d1ec      	bne.n	1004c706 <HW_AES_Start+0x16>
1004c72c:	e000      	b.n	1004c730 <HW_AES_Start+0x40>
            break;
1004c72e:	46c0      	nop			@ (mov r8, r8)

    return i;
1004c730:	1dfb      	adds	r3, r7, #7
1004c732:	781b      	ldrb	r3, [r3, #0]
1004c734:	b2db      	uxtb	r3, r3
}
1004c736:	0018      	movs	r0, r3
1004c738:	46bd      	mov	sp, r7
1004c73a:	b002      	add	sp, #8
1004c73c:	bd80      	pop	{r7, pc}

1004c73e <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
1004c73e:	b580      	push	{r7, lr}
1004c740:	b082      	sub	sp, #8
1004c742:	af00      	add	r7, sp, #0
1004c744:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
1004c746:	687b      	ldr	r3, [r7, #4]
1004c748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004c74a:	2201      	movs	r2, #1
1004c74c:	431a      	orrs	r2, r3
1004c74e:	687b      	ldr	r3, [r7, #4]
1004c750:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004c752:	46c0      	nop			@ (mov r8, r8)
1004c754:	46bd      	mov	sp, r7
1004c756:	b002      	add	sp, #8
1004c758:	bd80      	pop	{r7, pc}

1004c75a <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
1004c75a:	b580      	push	{r7, lr}
1004c75c:	b082      	sub	sp, #8
1004c75e:	af00      	add	r7, sp, #0
1004c760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
1004c762:	687b      	ldr	r3, [r7, #4]
1004c764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004c766:	2201      	movs	r2, #1
1004c768:	4013      	ands	r3, r2
1004c76a:	2b01      	cmp	r3, #1
1004c76c:	d101      	bne.n	1004c772 <LL_AES_IsBusy+0x18>
1004c76e:	2301      	movs	r3, #1
1004c770:	e000      	b.n	1004c774 <LL_AES_IsBusy+0x1a>
1004c772:	2300      	movs	r3, #0
}
1004c774:	0018      	movs	r0, r3
1004c776:	46bd      	mov	sp, r7
1004c778:	b002      	add	sp, #8
1004c77a:	bd80      	pop	{r7, pc}

1004c77c <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
1004c77c:	b580      	push	{r7, lr}
1004c77e:	b082      	sub	sp, #8
1004c780:	af00      	add	r7, sp, #0
1004c782:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
1004c784:	687b      	ldr	r3, [r7, #4]
1004c786:	681b      	ldr	r3, [r3, #0]
1004c788:	2280      	movs	r2, #128	@ 0x80
1004c78a:	0352      	lsls	r2, r2, #13
1004c78c:	431a      	orrs	r2, r3
1004c78e:	687b      	ldr	r3, [r7, #4]
1004c790:	601a      	str	r2, [r3, #0]
}
1004c792:	46c0      	nop			@ (mov r8, r8)
1004c794:	46bd      	mov	sp, r7
1004c796:	b002      	add	sp, #8
1004c798:	bd80      	pop	{r7, pc}

1004c79a <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
1004c79a:	b580      	push	{r7, lr}
1004c79c:	b082      	sub	sp, #8
1004c79e:	af00      	add	r7, sp, #0
1004c7a0:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
1004c7a2:	687b      	ldr	r3, [r7, #4]
1004c7a4:	681b      	ldr	r3, [r3, #0]
1004c7a6:	2280      	movs	r2, #128	@ 0x80
1004c7a8:	0312      	lsls	r2, r2, #12
1004c7aa:	431a      	orrs	r2, r3
1004c7ac:	687b      	ldr	r3, [r7, #4]
1004c7ae:	601a      	str	r2, [r3, #0]
}
1004c7b0:	46c0      	nop			@ (mov r8, r8)
1004c7b2:	46bd      	mov	sp, r7
1004c7b4:	b002      	add	sp, #8
1004c7b6:	bd80      	pop	{r7, pc}

1004c7b8 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
1004c7b8:	b580      	push	{r7, lr}
1004c7ba:	b082      	sub	sp, #8
1004c7bc:	af00      	add	r7, sp, #0
1004c7be:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004c7c0:	687b      	ldr	r3, [r7, #4]
1004c7c2:	681b      	ldr	r3, [r3, #0]
1004c7c4:	2280      	movs	r2, #128	@ 0x80
1004c7c6:	0292      	lsls	r2, r2, #10
1004c7c8:	431a      	orrs	r2, r3
1004c7ca:	687b      	ldr	r3, [r7, #4]
1004c7cc:	601a      	str	r2, [r3, #0]
}
1004c7ce:	46c0      	nop			@ (mov r8, r8)
1004c7d0:	46bd      	mov	sp, r7
1004c7d2:	b002      	add	sp, #8
1004c7d4:	bd80      	pop	{r7, pc}
	...

1004c7d8 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1004c7d8:	b580      	push	{r7, lr}
1004c7da:	af00      	add	r7, sp, #0
  PKAMGR_Init();
1004c7dc:	f001 fc98 	bl	1004e110 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
1004c7e0:	4b07      	ldr	r3, [pc, #28]	@ (1004c800 <HW_PKA_Init+0x28>)
1004c7e2:	0018      	movs	r0, r3
1004c7e4:	f7ff ffca 	bl	1004c77c <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1004c7e8:	4b05      	ldr	r3, [pc, #20]	@ (1004c800 <HW_PKA_Init+0x28>)
1004c7ea:	0018      	movs	r0, r3
1004c7ec:	f7ff ffd5 	bl	1004c79a <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
1004c7f0:	4b03      	ldr	r3, [pc, #12]	@ (1004c800 <HW_PKA_Init+0x28>)
1004c7f2:	0018      	movs	r0, r3
1004c7f4:	f7ff ffe0 	bl	1004c7b8 <LL_PKA_EnableIT_PROCEND>
}
1004c7f8:	46c0      	nop			@ (mov r8, r8)
1004c7fa:	46bd      	mov	sp, r7
1004c7fc:	bd80      	pop	{r7, pc}
1004c7fe:	46c0      	nop			@ (mov r8, r8)
1004c800:	48300000 	.word	0x48300000

1004c804 <LL_AHB1_GRP1_EnableClock>:
{
1004c804:	b580      	push	{r7, lr}
1004c806:	b084      	sub	sp, #16
1004c808:	af00      	add	r7, sp, #0
1004c80a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004c80c:	4b07      	ldr	r3, [pc, #28]	@ (1004c82c <LL_AHB1_GRP1_EnableClock+0x28>)
1004c80e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004c810:	4b06      	ldr	r3, [pc, #24]	@ (1004c82c <LL_AHB1_GRP1_EnableClock+0x28>)
1004c812:	687a      	ldr	r2, [r7, #4]
1004c814:	430a      	orrs	r2, r1
1004c816:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004c818:	4b04      	ldr	r3, [pc, #16]	@ (1004c82c <LL_AHB1_GRP1_EnableClock+0x28>)
1004c81a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004c81c:	687a      	ldr	r2, [r7, #4]
1004c81e:	4013      	ands	r3, r2
1004c820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004c822:	68fb      	ldr	r3, [r7, #12]
}
1004c824:	46c0      	nop			@ (mov r8, r8)
1004c826:	46bd      	mov	sp, r7
1004c828:	b004      	add	sp, #16
1004c82a:	bd80      	pop	{r7, pc}
1004c82c:	48400000 	.word	0x48400000

1004c830 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
1004c830:	b580      	push	{r7, lr}
1004c832:	b082      	sub	sp, #8
1004c834:	af00      	add	r7, sp, #0
1004c836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNG_DIS);
1004c838:	687b      	ldr	r3, [r7, #4]
1004c83a:	681b      	ldr	r3, [r3, #0]
1004c83c:	2204      	movs	r2, #4
1004c83e:	4393      	bics	r3, r2
1004c840:	001a      	movs	r2, r3
1004c842:	687b      	ldr	r3, [r7, #4]
1004c844:	601a      	str	r2, [r3, #0]
}
1004c846:	46c0      	nop			@ (mov r8, r8)
1004c848:	46bd      	mov	sp, r7
1004c84a:	b002      	add	sp, #8
1004c84c:	bd80      	pop	{r7, pc}

1004c84e <LL_RNG_IsActiveFlag_RNGRDY>:
  * @rmtoll SR           RNGRDY          LL_RNG_IsActiveFlag_RNGRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_RNGRDY(RNG_TypeDef *RNGx)
{
1004c84e:	b580      	push	{r7, lr}
1004c850:	b082      	sub	sp, #8
1004c852:	af00      	add	r7, sp, #0
1004c854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_RNGRDY) == (RNG_SR_RNGRDY)) ? 1UL : 0UL);
1004c856:	687b      	ldr	r3, [r7, #4]
1004c858:	685b      	ldr	r3, [r3, #4]
1004c85a:	2201      	movs	r2, #1
1004c85c:	4013      	ands	r3, r2
1004c85e:	2b01      	cmp	r3, #1
1004c860:	d101      	bne.n	1004c866 <LL_RNG_IsActiveFlag_RNGRDY+0x18>
1004c862:	2301      	movs	r3, #1
1004c864:	e000      	b.n	1004c868 <LL_RNG_IsActiveFlag_RNGRDY+0x1a>
1004c866:	2300      	movs	r3, #0
}
1004c868:	0018      	movs	r0, r3
1004c86a:	46bd      	mov	sp, r7
1004c86c:	b002      	add	sp, #8
1004c86e:	bd80      	pop	{r7, pc}

1004c870 <LL_RNG_IsActiveFlag_FAULT>:
  * @rmtoll SR           FAULT          LL_RNG_IsActiveFlag_FAULT
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_FAULT(RNG_TypeDef *RNGx)
{
1004c870:	b580      	push	{r7, lr}
1004c872:	b082      	sub	sp, #8
1004c874:	af00      	add	r7, sp, #0
1004c876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_FAULT) == (RNG_SR_FAULT)) ? 1UL : 0UL);
1004c878:	687b      	ldr	r3, [r7, #4]
1004c87a:	685b      	ldr	r3, [r3, #4]
1004c87c:	2204      	movs	r2, #4
1004c87e:	4013      	ands	r3, r2
1004c880:	2b04      	cmp	r3, #4
1004c882:	d101      	bne.n	1004c888 <LL_RNG_IsActiveFlag_FAULT+0x18>
1004c884:	2301      	movs	r3, #1
1004c886:	e000      	b.n	1004c88a <LL_RNG_IsActiveFlag_FAULT+0x1a>
1004c888:	2300      	movs	r3, #0
}
1004c88a:	0018      	movs	r0, r3
1004c88c:	46bd      	mov	sp, r7
1004c88e:	b002      	add	sp, #8
1004c890:	bd80      	pop	{r7, pc}

1004c892 <LL_RNG_ReadRandData16>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData16
  * @param  RNGx RNG Instance
  * @retval Generated 16-bit random value
  */
__STATIC_INLINE uint16_t LL_RNG_ReadRandData16(RNG_TypeDef *RNGx)
{
1004c892:	b580      	push	{r7, lr}
1004c894:	b082      	sub	sp, #8
1004c896:	af00      	add	r7, sp, #0
1004c898:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(RNGx->VAL));
1004c89a:	687b      	ldr	r3, [r7, #4]
1004c89c:	689b      	ldr	r3, [r3, #8]
1004c89e:	b29b      	uxth	r3, r3
}
1004c8a0:	0018      	movs	r0, r3
1004c8a2:	46bd      	mov	sp, r7
1004c8a4:	b002      	add	sp, #8
1004c8a6:	bd80      	pop	{r7, pc}

1004c8a8 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1004c8a8:	b580      	push	{r7, lr}
1004c8aa:	af00      	add	r7, sp, #0
  }
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
1004c8ac:	2380      	movs	r3, #128	@ 0x80
1004c8ae:	02db      	lsls	r3, r3, #11
1004c8b0:	0018      	movs	r0, r3
1004c8b2:	f7ff ffa7 	bl	1004c804 <LL_AHB1_GRP1_EnableClock>

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1004c8b6:	4b0b      	ldr	r3, [pc, #44]	@ (1004c8e4 <HW_RNG_Init+0x3c>)
1004c8b8:	0018      	movs	r0, r3
1004c8ba:	f7ff ffb9 	bl	1004c830 <LL_RNG_Enable>

  /* Wait for DRDY flag to be raised */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004c8be:	46c0      	nop			@ (mov r8, r8)
1004c8c0:	4b08      	ldr	r3, [pc, #32]	@ (1004c8e4 <HW_RNG_Init+0x3c>)
1004c8c2:	0018      	movs	r0, r3
1004c8c4:	f7ff ffc3 	bl	1004c84e <LL_RNG_IsActiveFlag_RNGRDY>
1004c8c8:	1e03      	subs	r3, r0, #0
1004c8ca:	d0f9      	beq.n	1004c8c0 <HW_RNG_Init+0x18>

  /* Check if error occurs */
  if (  LL_RNG_IsActiveFlag_FAULT(RNG)  )
1004c8cc:	4b05      	ldr	r3, [pc, #20]	@ (1004c8e4 <HW_RNG_Init+0x3c>)
1004c8ce:	0018      	movs	r0, r3
1004c8d0:	f7ff ffce 	bl	1004c870 <LL_RNG_IsActiveFlag_FAULT>
1004c8d4:	1e03      	subs	r3, r0, #0
1004c8d6:	d001      	beq.n	1004c8dc <HW_RNG_Init+0x34>
  {
    /* Clock or Seed Error detected. Set LED to blinking mode (Error type)*/
    return HW_RNG_ERROR;
1004c8d8:	2301      	movs	r3, #1
1004c8da:	e000      	b.n	1004c8de <HW_RNG_Init+0x36>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
1004c8dc:	2300      	movs	r3, #0
}
1004c8de:	0018      	movs	r0, r3
1004c8e0:	46bd      	mov	sp, r7
1004c8e2:	bd80      	pop	{r7, pc}
1004c8e4:	48600000 	.word	0x48600000

1004c8e8 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1004c8e8:	b580      	push	{r7, lr}
1004c8ea:	b082      	sub	sp, #8
1004c8ec:	af00      	add	r7, sp, #0
1004c8ee:	6078      	str	r0, [r7, #4]

#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004c8f0:	46c0      	nop			@ (mov r8, r8)
1004c8f2:	4b09      	ldr	r3, [pc, #36]	@ (1004c918 <HW_RNG_GetRandom16+0x30>)
1004c8f4:	0018      	movs	r0, r3
1004c8f6:	f7ff ffaa 	bl	1004c84e <LL_RNG_IsActiveFlag_RNGRDY>
1004c8fa:	1e03      	subs	r3, r0, #0
1004c8fc:	d0f9      	beq.n	1004c8f2 <HW_RNG_GetRandom16+0xa>

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004c8fe:	4b06      	ldr	r3, [pc, #24]	@ (1004c918 <HW_RNG_GetRandom16+0x30>)
1004c900:	0018      	movs	r0, r3
1004c902:	f7ff ffc6 	bl	1004c892 <LL_RNG_ReadRandData16>
1004c906:	0003      	movs	r3, r0
1004c908:	001a      	movs	r2, r3
1004c90a:	687b      	ldr	r3, [r7, #4]
1004c90c:	801a      	strh	r2, [r3, #0]

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004c90e:	2300      	movs	r3, #0
}
1004c910:	0018      	movs	r0, r3
1004c912:	46bd      	mov	sp, r7
1004c914:	b002      	add	sp, #8
1004c916:	bd80      	pop	{r7, pc}
1004c918:	48600000 	.word	0x48600000

1004c91c <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
1004c91c:	b590      	push	{r4, r7, lr}
1004c91e:	b085      	sub	sp, #20
1004c920:	af00      	add	r7, sp, #0
1004c922:	6078      	str	r0, [r7, #4]

  *num = LL_RNG_READRANDDATA32(RNG);
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  uint16_t *num_16 = (uint16_t *) num;
1004c924:	687b      	ldr	r3, [r7, #4]
1004c926:	60fb      	str	r3, [r7, #12]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004c928:	46c0      	nop			@ (mov r8, r8)
1004c92a:	4b11      	ldr	r3, [pc, #68]	@ (1004c970 <HW_RNG_GetRandom32+0x54>)
1004c92c:	0018      	movs	r0, r3
1004c92e:	f7ff ff8e 	bl	1004c84e <LL_RNG_IsActiveFlag_RNGRDY>
1004c932:	1e03      	subs	r3, r0, #0
1004c934:	d0f9      	beq.n	1004c92a <HW_RNG_GetRandom32+0xe>

  num_16[0] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004c936:	4b0e      	ldr	r3, [pc, #56]	@ (1004c970 <HW_RNG_GetRandom32+0x54>)
1004c938:	0018      	movs	r0, r3
1004c93a:	f7ff ffaa 	bl	1004c892 <LL_RNG_ReadRandData16>
1004c93e:	0003      	movs	r3, r0
1004c940:	001a      	movs	r2, r3
1004c942:	68fb      	ldr	r3, [r7, #12]
1004c944:	801a      	strh	r2, [r3, #0]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004c946:	46c0      	nop			@ (mov r8, r8)
1004c948:	4b09      	ldr	r3, [pc, #36]	@ (1004c970 <HW_RNG_GetRandom32+0x54>)
1004c94a:	0018      	movs	r0, r3
1004c94c:	f7ff ff7f 	bl	1004c84e <LL_RNG_IsActiveFlag_RNGRDY>
1004c950:	1e03      	subs	r3, r0, #0
1004c952:	d0f9      	beq.n	1004c948 <HW_RNG_GetRandom32+0x2c>

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004c954:	68fb      	ldr	r3, [r7, #12]
1004c956:	1c9c      	adds	r4, r3, #2
1004c958:	4b05      	ldr	r3, [pc, #20]	@ (1004c970 <HW_RNG_GetRandom32+0x54>)
1004c95a:	0018      	movs	r0, r3
1004c95c:	f7ff ff99 	bl	1004c892 <LL_RNG_ReadRandData16>
1004c960:	0003      	movs	r3, r0
1004c962:	8023      	strh	r3, [r4, #0]
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004c964:	2300      	movs	r3, #0
}
1004c966:	0018      	movs	r0, r3
1004c968:	46bd      	mov	sp, r7
1004c96a:	b005      	add	sp, #20
1004c96c:	bd90      	pop	{r4, r7, pc}
1004c96e:	46c0      	nop			@ (mov r8, r8)
1004c970:	48600000 	.word	0x48600000

1004c974 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
1004c974:	b580      	push	{r7, lr}
1004c976:	b084      	sub	sp, #16
1004c978:	af00      	add	r7, sp, #0
1004c97a:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
1004c97c:	687b      	ldr	r3, [r7, #4]
1004c97e:	681b      	ldr	r3, [r3, #0]
1004c980:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
1004c982:	687b      	ldr	r3, [r7, #4]
1004c984:	2200      	movs	r2, #0
1004c986:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1004c988:	687b      	ldr	r3, [r7, #4]
1004c98a:	2200      	movs	r2, #0
1004c98c:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004c98e:	687b      	ldr	r3, [r7, #4]
1004c990:	2200      	movs	r2, #0
1004c992:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
1004c994:	687b      	ldr	r3, [r7, #4]
1004c996:	2200      	movs	r2, #0
1004c998:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004c99a:	68fb      	ldr	r3, [r7, #12]
1004c99c:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004c99e:	68bb      	ldr	r3, [r7, #8]
1004c9a0:	781b      	ldrb	r3, [r3, #0]
1004c9a2:	2bff      	cmp	r3, #255	@ 0xff
1004c9a4:	d10c      	bne.n	1004c9c0 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1004c9a6:	687b      	ldr	r3, [r7, #4]
1004c9a8:	685b      	ldr	r3, [r3, #4]
1004c9aa:	b29a      	uxth	r2, r3
1004c9ac:	68fb      	ldr	r3, [r7, #12]
1004c9ae:	b29b      	uxth	r3, r3
1004c9b0:	1ad3      	subs	r3, r2, r3
1004c9b2:	b29b      	uxth	r3, r3
1004c9b4:	3b04      	subs	r3, #4
1004c9b6:	b29a      	uxth	r2, r3
1004c9b8:	687b      	ldr	r3, [r7, #4]
1004c9ba:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
1004c9bc:	2300      	movs	r3, #0
1004c9be:	e028      	b.n	1004ca12 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
1004c9c0:	68bb      	ldr	r3, [r7, #8]
1004c9c2:	781b      	ldrb	r3, [r3, #0]
1004c9c4:	2bfe      	cmp	r3, #254	@ 0xfe
1004c9c6:	d106      	bne.n	1004c9d6 <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1004c9c8:	687b      	ldr	r3, [r7, #4]
1004c9ca:	891b      	ldrh	r3, [r3, #8]
1004c9cc:	3301      	adds	r3, #1
1004c9ce:	b29a      	uxth	r2, r3
1004c9d0:	687b      	ldr	r3, [r7, #4]
1004c9d2:	811a      	strh	r2, [r3, #8]
1004c9d4:	e00c      	b.n	1004c9f0 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004c9d6:	68bb      	ldr	r3, [r7, #8]
1004c9d8:	781b      	ldrb	r3, [r3, #0]
1004c9da:	2b00      	cmp	r3, #0
1004c9dc:	d106      	bne.n	1004c9ec <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004c9de:	687b      	ldr	r3, [r7, #4]
1004c9e0:	895b      	ldrh	r3, [r3, #10]
1004c9e2:	3301      	adds	r3, #1
1004c9e4:	b29a      	uxth	r2, r3
1004c9e6:	687b      	ldr	r3, [r7, #4]
1004c9e8:	815a      	strh	r2, [r3, #10]
1004c9ea:	e001      	b.n	1004c9f0 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
1004c9ec:	2303      	movs	r3, #3
1004c9ee:	e010      	b.n	1004ca12 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004c9f0:	68bb      	ldr	r3, [r7, #8]
1004c9f2:	885b      	ldrh	r3, [r3, #2]
1004c9f4:	3303      	adds	r3, #3
1004c9f6:	2203      	movs	r2, #3
1004c9f8:	4313      	orrs	r3, r2
1004c9fa:	001a      	movs	r2, r3
1004c9fc:	68fb      	ldr	r3, [r7, #12]
1004c9fe:	18d3      	adds	r3, r2, r3
1004ca00:	3301      	adds	r3, #1
1004ca02:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
1004ca04:	68fb      	ldr	r3, [r7, #12]
1004ca06:	1d5a      	adds	r2, r3, #5
1004ca08:	687b      	ldr	r3, [r7, #4]
1004ca0a:	685b      	ldr	r3, [r3, #4]
1004ca0c:	429a      	cmp	r2, r3
1004ca0e:	d3c4      	bcc.n	1004c99a <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
1004ca10:	2300      	movs	r3, #0
    }
  }
}
1004ca12:	0018      	movs	r0, r3
1004ca14:	46bd      	mov	sp, r7
1004ca16:	b004      	add	sp, #16
1004ca18:	bd80      	pop	{r7, pc}

1004ca1a <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004ca1a:	b580      	push	{r7, lr}
1004ca1c:	b086      	sub	sp, #24
1004ca1e:	af00      	add	r7, sp, #0
1004ca20:	60f8      	str	r0, [r7, #12]
1004ca22:	607a      	str	r2, [r7, #4]
1004ca24:	603b      	str	r3, [r7, #0]
1004ca26:	230b      	movs	r3, #11
1004ca28:	18fb      	adds	r3, r7, r3
1004ca2a:	1c0a      	adds	r2, r1, #0
1004ca2c:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
1004ca2e:	2020      	movs	r0, #32
1004ca30:	183b      	adds	r3, r7, r0
1004ca32:	881b      	ldrh	r3, [r3, #0]
1004ca34:	2b00      	cmp	r3, #0
1004ca36:	d00a      	beq.n	1004ca4e <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004ca38:	2110      	movs	r1, #16
1004ca3a:	187a      	adds	r2, r7, r1
1004ca3c:	183b      	adds	r3, r7, r0
1004ca3e:	881b      	ldrh	r3, [r3, #0]
1004ca40:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
1004ca42:	187b      	adds	r3, r7, r1
1004ca44:	22fe      	movs	r2, #254	@ 0xfe
1004ca46:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004ca48:	187b      	adds	r3, r7, r1
1004ca4a:	617b      	str	r3, [r7, #20]
1004ca4c:	e002      	b.n	1004ca54 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004ca4e:	68fb      	ldr	r3, [r7, #12]
1004ca50:	685b      	ldr	r3, [r3, #4]
1004ca52:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004ca54:	68fb      	ldr	r3, [r7, #12]
1004ca56:	685a      	ldr	r2, [r3, #4]
1004ca58:	68fb      	ldr	r3, [r7, #12]
1004ca5a:	689b      	ldr	r3, [r3, #8]
1004ca5c:	429a      	cmp	r2, r3
1004ca5e:	d203      	bcs.n	1004ca68 <NextRecordNoLock+0x4e>
1004ca60:	697b      	ldr	r3, [r7, #20]
1004ca62:	781b      	ldrb	r3, [r3, #0]
1004ca64:	2bff      	cmp	r3, #255	@ 0xff
1004ca66:	d101      	bne.n	1004ca6c <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1004ca68:	2304      	movs	r3, #4
1004ca6a:	e04b      	b.n	1004cb04 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
1004ca6c:	68fb      	ldr	r3, [r7, #12]
1004ca6e:	7b1b      	ldrb	r3, [r3, #12]
1004ca70:	2b00      	cmp	r3, #0
1004ca72:	d003      	beq.n	1004ca7c <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
1004ca74:	68fb      	ldr	r3, [r7, #12]
1004ca76:	2200      	movs	r2, #0
1004ca78:	731a      	strb	r2, [r3, #12]
1004ca7a:	e019      	b.n	1004cab0 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004ca7c:	68fb      	ldr	r3, [r7, #12]
1004ca7e:	685b      	ldr	r3, [r3, #4]
1004ca80:	697a      	ldr	r2, [r7, #20]
1004ca82:	8852      	ldrh	r2, [r2, #2]
1004ca84:	3203      	adds	r2, #3
1004ca86:	2103      	movs	r1, #3
1004ca88:	430a      	orrs	r2, r1
1004ca8a:	189b      	adds	r3, r3, r2
1004ca8c:	1c5a      	adds	r2, r3, #1
1004ca8e:	68fb      	ldr	r3, [r7, #12]
1004ca90:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004ca92:	68fb      	ldr	r3, [r7, #12]
1004ca94:	685b      	ldr	r3, [r3, #4]
1004ca96:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004ca98:	68fb      	ldr	r3, [r7, #12]
1004ca9a:	685a      	ldr	r2, [r3, #4]
1004ca9c:	68fb      	ldr	r3, [r7, #12]
1004ca9e:	689b      	ldr	r3, [r3, #8]
1004caa0:	429a      	cmp	r2, r3
1004caa2:	d203      	bcs.n	1004caac <NextRecordNoLock+0x92>
1004caa4:	697b      	ldr	r3, [r7, #20]
1004caa6:	781b      	ldrb	r3, [r3, #0]
1004caa8:	2bff      	cmp	r3, #255	@ 0xff
1004caaa:	d101      	bne.n	1004cab0 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004caac:	2304      	movs	r3, #4
1004caae:	e029      	b.n	1004cb04 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
1004cab0:	697b      	ldr	r3, [r7, #20]
1004cab2:	781b      	ldrb	r3, [r3, #0]
1004cab4:	2b00      	cmp	r3, #0
1004cab6:	d023      	beq.n	1004cb00 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1004cab8:	697b      	ldr	r3, [r7, #20]
1004caba:	781b      	ldrb	r3, [r3, #0]
1004cabc:	2bfe      	cmp	r3, #254	@ 0xfe
1004cabe:	d001      	beq.n	1004cac4 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
1004cac0:	2303      	movs	r3, #3
1004cac2:	e01f      	b.n	1004cb04 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
1004cac4:	220b      	movs	r2, #11
1004cac6:	18bb      	adds	r3, r7, r2
1004cac8:	781b      	ldrb	r3, [r3, #0]
1004caca:	2bff      	cmp	r3, #255	@ 0xff
1004cacc:	d005      	beq.n	1004cada <NextRecordNoLock+0xc0>
1004cace:	697b      	ldr	r3, [r7, #20]
1004cad0:	785b      	ldrb	r3, [r3, #1]
1004cad2:	18ba      	adds	r2, r7, r2
1004cad4:	7812      	ldrb	r2, [r2, #0]
1004cad6:	429a      	cmp	r2, r3
1004cad8:	d1c8      	bne.n	1004ca6c <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004cada:	68fb      	ldr	r3, [r7, #12]
1004cadc:	685b      	ldr	r3, [r3, #4]
1004cade:	3304      	adds	r3, #4
1004cae0:	001a      	movs	r2, r3
1004cae2:	687b      	ldr	r3, [r7, #4]
1004cae4:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004cae6:	697b      	ldr	r3, [r7, #20]
1004cae8:	885a      	ldrh	r2, [r3, #2]
1004caea:	683b      	ldr	r3, [r7, #0]
1004caec:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004caee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004caf0:	2b00      	cmp	r3, #0
1004caf2:	d003      	beq.n	1004cafc <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
1004caf4:	697b      	ldr	r3, [r7, #20]
1004caf6:	785a      	ldrb	r2, [r3, #1]
1004caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cafa:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
1004cafc:	2300      	movs	r3, #0
1004cafe:	e001      	b.n	1004cb04 <NextRecordNoLock+0xea>
      continue;
1004cb00:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
1004cb02:	e7b3      	b.n	1004ca6c <NextRecordNoLock+0x52>
    }
  }
}
1004cb04:	0018      	movs	r0, r3
1004cb06:	46bd      	mov	sp, r7
1004cb08:	b006      	add	sp, #24
1004cb0a:	bd80      	pop	{r7, pc}

1004cb0c <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
1004cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cb0e:	b08b      	sub	sp, #44	@ 0x2c
1004cb10:	af02      	add	r7, sp, #8
1004cb12:	60f8      	str	r0, [r7, #12]
1004cb14:	0008      	movs	r0, r1
1004cb16:	0011      	movs	r1, r2
1004cb18:	607b      	str	r3, [r7, #4]
1004cb1a:	230b      	movs	r3, #11
1004cb1c:	18fb      	adds	r3, r7, r3
1004cb1e:	1c02      	adds	r2, r0, #0
1004cb20:	701a      	strb	r2, [r3, #0]
1004cb22:	2208      	movs	r2, #8
1004cb24:	0010      	movs	r0, r2
1004cb26:	18bb      	adds	r3, r7, r2
1004cb28:	1c0a      	adds	r2, r1, #0
1004cb2a:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
1004cb2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004cb2e:	2200      	movs	r2, #0
1004cb30:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
1004cb32:	261f      	movs	r6, #31
1004cb34:	19bc      	adds	r4, r7, r6
1004cb36:	2216      	movs	r2, #22
1004cb38:	18bd      	adds	r5, r7, r2
1004cb3a:	2218      	movs	r2, #24
1004cb3c:	18ba      	adds	r2, r7, r2
1004cb3e:	230b      	movs	r3, #11
1004cb40:	18fb      	adds	r3, r7, r3
1004cb42:	7819      	ldrb	r1, [r3, #0]
1004cb44:	68fb      	ldr	r3, [r7, #12]
1004cb46:	469c      	mov	ip, r3
1004cb48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004cb4a:	9301      	str	r3, [sp, #4]
1004cb4c:	2338      	movs	r3, #56	@ 0x38
1004cb4e:	181b      	adds	r3, r3, r0
1004cb50:	19db      	adds	r3, r3, r7
1004cb52:	881b      	ldrh	r3, [r3, #0]
1004cb54:	9300      	str	r3, [sp, #0]
1004cb56:	002b      	movs	r3, r5
1004cb58:	4660      	mov	r0, ip
1004cb5a:	f7ff ff5e 	bl	1004ca1a <NextRecordNoLock>
1004cb5e:	0003      	movs	r3, r0
1004cb60:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
1004cb62:	19bb      	adds	r3, r7, r6
1004cb64:	781b      	ldrb	r3, [r3, #0]
1004cb66:	2b00      	cmp	r3, #0
1004cb68:	d002      	beq.n	1004cb70 <ReadNextRecordNoLock+0x64>
  {
    return status;
1004cb6a:	19bb      	adds	r3, r7, r6
1004cb6c:	781b      	ldrb	r3, [r3, #0]
1004cb6e:	e027      	b.n	1004cbc0 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
1004cb70:	2316      	movs	r3, #22
1004cb72:	18fb      	adds	r3, r7, r3
1004cb74:	881b      	ldrh	r3, [r3, #0]
1004cb76:	2208      	movs	r2, #8
1004cb78:	18ba      	adds	r2, r7, r2
1004cb7a:	8812      	ldrh	r2, [r2, #0]
1004cb7c:	429a      	cmp	r2, r3
1004cb7e:	d301      	bcc.n	1004cb84 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004cb80:	2306      	movs	r3, #6
1004cb82:	e01d      	b.n	1004cbc0 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
1004cb84:	69ba      	ldr	r2, [r7, #24]
1004cb86:	2408      	movs	r4, #8
1004cb88:	193b      	adds	r3, r7, r4
1004cb8a:	881b      	ldrh	r3, [r3, #0]
1004cb8c:	18d1      	adds	r1, r2, r3
1004cb8e:	2330      	movs	r3, #48	@ 0x30
1004cb90:	2208      	movs	r2, #8
1004cb92:	189b      	adds	r3, r3, r2
1004cb94:	19db      	adds	r3, r3, r7
1004cb96:	881a      	ldrh	r2, [r3, #0]
1004cb98:	2316      	movs	r3, #22
1004cb9a:	18fb      	adds	r3, r7, r3
1004cb9c:	881b      	ldrh	r3, [r3, #0]
1004cb9e:	0018      	movs	r0, r3
1004cba0:	193b      	adds	r3, r7, r4
1004cba2:	881b      	ldrh	r3, [r3, #0]
1004cba4:	1ac3      	subs	r3, r0, r3
1004cba6:	429a      	cmp	r2, r3
1004cba8:	dd00      	ble.n	1004cbac <ReadNextRecordNoLock+0xa0>
1004cbaa:	001a      	movs	r2, r3
1004cbac:	687b      	ldr	r3, [r7, #4]
1004cbae:	0018      	movs	r0, r3
1004cbb0:	f018 f8c1 	bl	10064d36 <memcpy>
  *size_p = data_len;
1004cbb4:	2316      	movs	r3, #22
1004cbb6:	18fb      	adds	r3, r7, r3
1004cbb8:	881a      	ldrh	r2, [r3, #0]
1004cbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004cbbc:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004cbbe:	2300      	movs	r3, #0
}
1004cbc0:	0018      	movs	r0, r3
1004cbc2:	46bd      	mov	sp, r7
1004cbc4:	b009      	add	sp, #36	@ 0x24
1004cbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004cbc8 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1004cbc8:	b590      	push	{r4, r7, lr}
1004cbca:	b089      	sub	sp, #36	@ 0x24
1004cbcc:	af00      	add	r7, sp, #0
1004cbce:	60f8      	str	r0, [r7, #12]
1004cbd0:	607a      	str	r2, [r7, #4]
1004cbd2:	200a      	movs	r0, #10
1004cbd4:	183b      	adds	r3, r7, r0
1004cbd6:	1c0a      	adds	r2, r1, #0
1004cbd8:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004cbda:	687b      	ldr	r3, [r7, #4]
1004cbdc:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004cbde:	0001      	movs	r1, r0
1004cbe0:	187b      	adds	r3, r7, r1
1004cbe2:	881b      	ldrh	r3, [r3, #0]
1004cbe4:	089b      	lsrs	r3, r3, #2
1004cbe6:	b29a      	uxth	r2, r3
1004cbe8:	2016      	movs	r0, #22
1004cbea:	183b      	adds	r3, r7, r0
1004cbec:	0092      	lsls	r2, r2, #2
1004cbee:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
1004cbf0:	187b      	adds	r3, r7, r1
1004cbf2:	881b      	ldrh	r3, [r3, #0]
1004cbf4:	b2d9      	uxtb	r1, r3
1004cbf6:	183b      	adds	r3, r7, r0
1004cbf8:	881b      	ldrh	r3, [r3, #0]
1004cbfa:	b2da      	uxtb	r2, r3
1004cbfc:	2315      	movs	r3, #21
1004cbfe:	18fb      	adds	r3, r7, r3
1004cc00:	1a8a      	subs	r2, r1, r2
1004cc02:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
1004cc04:	2300      	movs	r3, #0
1004cc06:	61fb      	str	r3, [r7, #28]
1004cc08:	e013      	b.n	1004cc32 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004cc0a:	69fb      	ldr	r3, [r7, #28]
1004cc0c:	69ba      	ldr	r2, [r7, #24]
1004cc0e:	18d1      	adds	r1, r2, r3
1004cc10:	2310      	movs	r3, #16
1004cc12:	18fb      	adds	r3, r7, r3
1004cc14:	2204      	movs	r2, #4
1004cc16:	0018      	movs	r0, r3
1004cc18:	f018 f88d 	bl	10064d36 <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
1004cc1c:	69fa      	ldr	r2, [r7, #28]
1004cc1e:	68fb      	ldr	r3, [r7, #12]
1004cc20:	18d3      	adds	r3, r2, r3
1004cc22:	693a      	ldr	r2, [r7, #16]
1004cc24:	0019      	movs	r1, r3
1004cc26:	2000      	movs	r0, #0
1004cc28:	f7f8 f826 	bl	10044c78 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
1004cc2c:	69fb      	ldr	r3, [r7, #28]
1004cc2e:	3304      	adds	r3, #4
1004cc30:	61fb      	str	r3, [r7, #28]
1004cc32:	2416      	movs	r4, #22
1004cc34:	193b      	adds	r3, r7, r4
1004cc36:	881b      	ldrh	r3, [r3, #0]
1004cc38:	69fa      	ldr	r2, [r7, #28]
1004cc3a:	429a      	cmp	r2, r3
1004cc3c:	dbe5      	blt.n	1004cc0a <write_data+0x42>
  }
  word = 0xFFFFFFFF;
1004cc3e:	2301      	movs	r3, #1
1004cc40:	425b      	negs	r3, r3
1004cc42:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
1004cc44:	193b      	adds	r3, r7, r4
1004cc46:	881b      	ldrh	r3, [r3, #0]
1004cc48:	69ba      	ldr	r2, [r7, #24]
1004cc4a:	18d1      	adds	r1, r2, r3
1004cc4c:	2315      	movs	r3, #21
1004cc4e:	18fb      	adds	r3, r7, r3
1004cc50:	781a      	ldrb	r2, [r3, #0]
1004cc52:	2310      	movs	r3, #16
1004cc54:	18fb      	adds	r3, r7, r3
1004cc56:	0018      	movs	r0, r3
1004cc58:	f018 f86d 	bl	10064d36 <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
1004cc5c:	193b      	adds	r3, r7, r4
1004cc5e:	881a      	ldrh	r2, [r3, #0]
1004cc60:	68fb      	ldr	r3, [r7, #12]
1004cc62:	18d3      	adds	r3, r2, r3
1004cc64:	693a      	ldr	r2, [r7, #16]
1004cc66:	0019      	movs	r1, r3
1004cc68:	2000      	movs	r0, #0
1004cc6a:	f7f8 f805 	bl	10044c78 <HAL_FLASH_Program>
}
1004cc6e:	46c0      	nop			@ (mov r8, r8)
1004cc70:	46bd      	mov	sp, r7
1004cc72:	b009      	add	sp, #36	@ 0x24
1004cc74:	bd90      	pop	{r4, r7, pc}

1004cc76 <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004cc76:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cc78:	b087      	sub	sp, #28
1004cc7a:	af00      	add	r7, sp, #0
1004cc7c:	60f8      	str	r0, [r7, #12]
1004cc7e:	0008      	movs	r0, r1
1004cc80:	0011      	movs	r1, r2
1004cc82:	607b      	str	r3, [r7, #4]
1004cc84:	250b      	movs	r5, #11
1004cc86:	197b      	adds	r3, r7, r5
1004cc88:	1c02      	adds	r2, r0, #0
1004cc8a:	701a      	strb	r2, [r3, #0]
1004cc8c:	2408      	movs	r4, #8
1004cc8e:	193b      	adds	r3, r7, r4
1004cc90:	1c0a      	adds	r2, r1, #0
1004cc92:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
1004cc94:	2310      	movs	r3, #16
1004cc96:	18fb      	adds	r3, r7, r3
1004cc98:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004cc9a:	193b      	adds	r3, r7, r4
1004cc9c:	881b      	ldrh	r3, [r3, #0]
1004cc9e:	3b01      	subs	r3, #1
1004cca0:	b29b      	uxth	r3, r3
1004cca2:	b21b      	sxth	r3, r3
1004cca4:	2203      	movs	r2, #3
1004cca6:	4313      	orrs	r3, r2
1004cca8:	b21b      	sxth	r3, r3
1004ccaa:	b29a      	uxth	r2, r3
1004ccac:	193b      	adds	r3, r7, r4
1004ccae:	3201      	adds	r2, #1
1004ccb0:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
1004ccb2:	697b      	ldr	r3, [r7, #20]
1004ccb4:	22fe      	movs	r2, #254	@ 0xfe
1004ccb6:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1004ccb8:	697b      	ldr	r3, [r7, #20]
1004ccba:	197a      	adds	r2, r7, r5
1004ccbc:	7812      	ldrb	r2, [r2, #0]
1004ccbe:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
1004ccc0:	193a      	adds	r2, r7, r4
1004ccc2:	2520      	movs	r5, #32
1004ccc4:	2608      	movs	r6, #8
1004ccc6:	19ab      	adds	r3, r5, r6
1004ccc8:	2108      	movs	r1, #8
1004ccca:	468c      	mov	ip, r1
1004cccc:	44bc      	add	ip, r7
1004ccce:	4463      	add	r3, ip
1004ccd0:	8812      	ldrh	r2, [r2, #0]
1004ccd2:	881b      	ldrh	r3, [r3, #0]
1004ccd4:	18d3      	adds	r3, r2, r3
1004ccd6:	b29a      	uxth	r2, r3
1004ccd8:	697b      	ldr	r3, [r7, #20]
1004ccda:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
1004ccdc:	693a      	ldr	r2, [r7, #16]
1004ccde:	68fb      	ldr	r3, [r7, #12]
1004cce0:	0019      	movs	r1, r3
1004cce2:	2000      	movs	r0, #0
1004cce4:	f7f7 ffc8 	bl	10044c78 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1004cce8:	68fb      	ldr	r3, [r7, #12]
1004ccea:	1d18      	adds	r0, r3, #4
1004ccec:	687a      	ldr	r2, [r7, #4]
1004ccee:	193b      	adds	r3, r7, r4
1004ccf0:	881b      	ldrh	r3, [r3, #0]
1004ccf2:	0019      	movs	r1, r3
1004ccf4:	f7ff ff68 	bl	1004cbc8 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1004ccf8:	193b      	adds	r3, r7, r4
1004ccfa:	881a      	ldrh	r2, [r3, #0]
1004ccfc:	68fb      	ldr	r3, [r7, #12]
1004ccfe:	18d3      	adds	r3, r2, r3
1004cd00:	1d18      	adds	r0, r3, #4
1004cd02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004cd04:	19ab      	adds	r3, r5, r6
1004cd06:	2108      	movs	r1, #8
1004cd08:	468c      	mov	ip, r1
1004cd0a:	44bc      	add	ip, r7
1004cd0c:	4463      	add	r3, ip
1004cd0e:	881b      	ldrh	r3, [r3, #0]
1004cd10:	0019      	movs	r1, r3
1004cd12:	f7ff ff59 	bl	1004cbc8 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004cd16:	2300      	movs	r3, #0
}
1004cd18:	0018      	movs	r0, r3
1004cd1a:	46bd      	mov	sp, r7
1004cd1c:	b007      	add	sp, #28
1004cd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004cd20 <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
1004cd20:	b580      	push	{r7, lr}
1004cd22:	b086      	sub	sp, #24
1004cd24:	af00      	add	r7, sp, #0
1004cd26:	60f8      	str	r0, [r7, #12]
1004cd28:	0008      	movs	r0, r1
1004cd2a:	607a      	str	r2, [r7, #4]
1004cd2c:	0019      	movs	r1, r3
1004cd2e:	230a      	movs	r3, #10
1004cd30:	18fb      	adds	r3, r7, r3
1004cd32:	1c02      	adds	r2, r0, #0
1004cd34:	801a      	strh	r2, [r3, #0]
1004cd36:	2308      	movs	r3, #8
1004cd38:	18fb      	adds	r3, r7, r3
1004cd3a:	1c0a      	adds	r2, r1, #0
1004cd3c:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004cd3e:	68fb      	ldr	r3, [r7, #12]
1004cd40:	685b      	ldr	r3, [r3, #4]
1004cd42:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004cd44:	68fb      	ldr	r3, [r7, #12]
1004cd46:	685a      	ldr	r2, [r3, #4]
1004cd48:	68fb      	ldr	r3, [r7, #12]
1004cd4a:	689b      	ldr	r3, [r3, #8]
1004cd4c:	429a      	cmp	r2, r3
1004cd4e:	d203      	bcs.n	1004cd58 <NVMDB_CompareCurrentRecord+0x38>
1004cd50:	697b      	ldr	r3, [r7, #20]
1004cd52:	781b      	ldrb	r3, [r3, #0]
1004cd54:	2bff      	cmp	r3, #255	@ 0xff
1004cd56:	d101      	bne.n	1004cd5c <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
1004cd58:	2304      	movs	r3, #4
1004cd5a:	e02a      	b.n	1004cdb2 <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004cd5c:	68fb      	ldr	r3, [r7, #12]
1004cd5e:	7b1b      	ldrb	r3, [r3, #12]
1004cd60:	2b00      	cmp	r3, #0
1004cd62:	d103      	bne.n	1004cd6c <NVMDB_CompareCurrentRecord+0x4c>
1004cd64:	697b      	ldr	r3, [r7, #20]
1004cd66:	781b      	ldrb	r3, [r3, #0]
1004cd68:	2bfe      	cmp	r3, #254	@ 0xfe
1004cd6a:	d001      	beq.n	1004cd70 <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004cd6c:	2305      	movs	r3, #5
1004cd6e:	e020      	b.n	1004cdb2 <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004cd70:	697b      	ldr	r3, [r7, #20]
1004cd72:	885b      	ldrh	r3, [r3, #2]
1004cd74:	220a      	movs	r2, #10
1004cd76:	18ba      	adds	r2, r7, r2
1004cd78:	8812      	ldrh	r2, [r2, #0]
1004cd7a:	429a      	cmp	r2, r3
1004cd7c:	d301      	bcc.n	1004cd82 <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004cd7e:	2306      	movs	r3, #6
1004cd80:	e017      	b.n	1004cdb2 <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
1004cd82:	68fb      	ldr	r3, [r7, #12]
1004cd84:	2200      	movs	r2, #0
1004cd86:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
1004cd88:	230a      	movs	r3, #10
1004cd8a:	18fb      	adds	r3, r7, r3
1004cd8c:	881a      	ldrh	r2, [r3, #0]
1004cd8e:	68fb      	ldr	r3, [r7, #12]
1004cd90:	685b      	ldr	r3, [r3, #4]
1004cd92:	18d3      	adds	r3, r2, r3
1004cd94:	3304      	adds	r3, #4
1004cd96:	0019      	movs	r1, r3
1004cd98:	2308      	movs	r3, #8
1004cd9a:	18fb      	adds	r3, r7, r3
1004cd9c:	881a      	ldrh	r2, [r3, #0]
1004cd9e:	687b      	ldr	r3, [r7, #4]
1004cda0:	0018      	movs	r0, r3
1004cda2:	f017 ff45 	bl	10064c30 <memcmp>
1004cda6:	1e03      	subs	r3, r0, #0
1004cda8:	d101      	bne.n	1004cdae <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1004cdaa:	2300      	movs	r3, #0
1004cdac:	e001      	b.n	1004cdb2 <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
1004cdae:	2301      	movs	r3, #1
1004cdb0:	425b      	negs	r3, r3
  }
}
1004cdb2:	0018      	movs	r0, r3
1004cdb4:	46bd      	mov	sp, r7
1004cdb6:	b006      	add	sp, #24
1004cdb8:	bd80      	pop	{r7, pc}

1004cdba <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1004cdba:	b590      	push	{r4, r7, lr}
1004cdbc:	b087      	sub	sp, #28
1004cdbe:	af00      	add	r7, sp, #0
1004cdc0:	60f8      	str	r0, [r7, #12]
1004cdc2:	0008      	movs	r0, r1
1004cdc4:	607a      	str	r2, [r7, #4]
1004cdc6:	0019      	movs	r1, r3
1004cdc8:	230a      	movs	r3, #10
1004cdca:	18fb      	adds	r3, r7, r3
1004cdcc:	1c02      	adds	r2, r0, #0
1004cdce:	801a      	strh	r2, [r3, #0]
1004cdd0:	2308      	movs	r3, #8
1004cdd2:	0018      	movs	r0, r3
1004cdd4:	18fb      	adds	r3, r7, r3
1004cdd6:	1c0a      	adds	r2, r1, #0
1004cdd8:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1004cdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004cddc:	2200      	movs	r2, #0
1004cdde:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004cde0:	2224      	movs	r2, #36	@ 0x24
1004cde2:	1813      	adds	r3, r2, r0
1004cde4:	19db      	adds	r3, r3, r7
1004cde6:	881b      	ldrh	r3, [r3, #0]
1004cde8:	2b00      	cmp	r3, #0
1004cdea:	d00b      	beq.n	1004ce04 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
1004cdec:	2110      	movs	r1, #16
1004cdee:	187b      	adds	r3, r7, r1
1004cdf0:	1812      	adds	r2, r2, r0
1004cdf2:	19d2      	adds	r2, r2, r7
1004cdf4:	8812      	ldrh	r2, [r2, #0]
1004cdf6:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
1004cdf8:	187b      	adds	r3, r7, r1
1004cdfa:	22fe      	movs	r2, #254	@ 0xfe
1004cdfc:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004cdfe:	187b      	adds	r3, r7, r1
1004ce00:	617b      	str	r3, [r7, #20]
1004ce02:	e002      	b.n	1004ce0a <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004ce04:	68fb      	ldr	r3, [r7, #12]
1004ce06:	685b      	ldr	r3, [r3, #4]
1004ce08:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004ce0a:	68fb      	ldr	r3, [r7, #12]
1004ce0c:	685a      	ldr	r2, [r3, #4]
1004ce0e:	68fb      	ldr	r3, [r7, #12]
1004ce10:	689b      	ldr	r3, [r3, #8]
1004ce12:	429a      	cmp	r2, r3
1004ce14:	d203      	bcs.n	1004ce1e <ReadCurrentRecordNoLock+0x64>
1004ce16:	697b      	ldr	r3, [r7, #20]
1004ce18:	781b      	ldrb	r3, [r3, #0]
1004ce1a:	2bff      	cmp	r3, #255	@ 0xff
1004ce1c:	d101      	bne.n	1004ce22 <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
1004ce1e:	2304      	movs	r3, #4
1004ce20:	e033      	b.n	1004ce8a <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004ce22:	68fb      	ldr	r3, [r7, #12]
1004ce24:	7b1b      	ldrb	r3, [r3, #12]
1004ce26:	2b00      	cmp	r3, #0
1004ce28:	d103      	bne.n	1004ce32 <ReadCurrentRecordNoLock+0x78>
1004ce2a:	697b      	ldr	r3, [r7, #20]
1004ce2c:	781b      	ldrb	r3, [r3, #0]
1004ce2e:	2bfe      	cmp	r3, #254	@ 0xfe
1004ce30:	d001      	beq.n	1004ce36 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004ce32:	2305      	movs	r3, #5
1004ce34:	e029      	b.n	1004ce8a <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004ce36:	697b      	ldr	r3, [r7, #20]
1004ce38:	885b      	ldrh	r3, [r3, #2]
1004ce3a:	220a      	movs	r2, #10
1004ce3c:	18ba      	adds	r2, r7, r2
1004ce3e:	8812      	ldrh	r2, [r2, #0]
1004ce40:	429a      	cmp	r2, r3
1004ce42:	d301      	bcc.n	1004ce48 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004ce44:	2306      	movs	r3, #6
1004ce46:	e020      	b.n	1004ce8a <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
1004ce48:	68fb      	ldr	r3, [r7, #12]
1004ce4a:	2200      	movs	r2, #0
1004ce4c:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
1004ce4e:	240a      	movs	r4, #10
1004ce50:	193b      	adds	r3, r7, r4
1004ce52:	881a      	ldrh	r2, [r3, #0]
1004ce54:	68fb      	ldr	r3, [r7, #12]
1004ce56:	685b      	ldr	r3, [r3, #4]
1004ce58:	18d3      	adds	r3, r2, r3
1004ce5a:	3304      	adds	r3, #4
1004ce5c:	0018      	movs	r0, r3
1004ce5e:	2308      	movs	r3, #8
1004ce60:	18fb      	adds	r3, r7, r3
1004ce62:	881a      	ldrh	r2, [r3, #0]
1004ce64:	697b      	ldr	r3, [r7, #20]
1004ce66:	885b      	ldrh	r3, [r3, #2]
1004ce68:	0019      	movs	r1, r3
1004ce6a:	193b      	adds	r3, r7, r4
1004ce6c:	881b      	ldrh	r3, [r3, #0]
1004ce6e:	1acb      	subs	r3, r1, r3
1004ce70:	429a      	cmp	r2, r3
1004ce72:	dd00      	ble.n	1004ce76 <ReadCurrentRecordNoLock+0xbc>
1004ce74:	001a      	movs	r2, r3
1004ce76:	687b      	ldr	r3, [r7, #4]
1004ce78:	0001      	movs	r1, r0
1004ce7a:	0018      	movs	r0, r3
1004ce7c:	f017 ff5b 	bl	10064d36 <memcpy>
  *size_p = record_p->header.length;
1004ce80:	697b      	ldr	r3, [r7, #20]
1004ce82:	885a      	ldrh	r2, [r3, #2]
1004ce84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ce86:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004ce88:	2300      	movs	r3, #0
}
1004ce8a:	0018      	movs	r0, r3
1004ce8c:	46bd      	mov	sp, r7
1004ce8e:	b007      	add	sp, #28
1004ce90:	bd90      	pop	{r4, r7, pc}
	...

1004ce94 <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
1004ce94:	b580      	push	{r7, lr}
1004ce96:	b084      	sub	sp, #16
1004ce98:	af00      	add	r7, sp, #0
1004ce9a:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
1004ce9c:	4b06      	ldr	r3, [pc, #24]	@ (1004ceb8 <InvalidateRecord+0x24>)
1004ce9e:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
1004cea0:	68fa      	ldr	r2, [r7, #12]
1004cea2:	687b      	ldr	r3, [r7, #4]
1004cea4:	0019      	movs	r1, r3
1004cea6:	2000      	movs	r0, #0
1004cea8:	f7f7 fee6 	bl	10044c78 <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004ceac:	2300      	movs	r3, #0
}
1004ceae:	0018      	movs	r0, r3
1004ceb0:	46bd      	mov	sp, r7
1004ceb2:	b004      	add	sp, #16
1004ceb4:	bd80      	pop	{r7, pc}
1004ceb6:	46c0      	nop			@ (mov r8, r8)
1004ceb8:	ffffff00 	.word	0xffffff00

1004cebc <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
1004cebc:	b5b0      	push	{r4, r5, r7, lr}
1004cebe:	b084      	sub	sp, #16
1004cec0:	af00      	add	r7, sp, #0
1004cec2:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004cec4:	687b      	ldr	r3, [r7, #4]
1004cec6:	685b      	ldr	r3, [r3, #4]
1004cec8:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004ceca:	687b      	ldr	r3, [r7, #4]
1004cecc:	685a      	ldr	r2, [r3, #4]
1004cece:	687b      	ldr	r3, [r7, #4]
1004ced0:	689b      	ldr	r3, [r3, #8]
1004ced2:	429a      	cmp	r2, r3
1004ced4:	d203      	bcs.n	1004cede <NVMDB_DeleteRecordNoCache+0x22>
1004ced6:	68fb      	ldr	r3, [r7, #12]
1004ced8:	781b      	ldrb	r3, [r3, #0]
1004ceda:	2bff      	cmp	r3, #255	@ 0xff
1004cedc:	d101      	bne.n	1004cee2 <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
1004cede:	2304      	movs	r3, #4
1004cee0:	e041      	b.n	1004cf66 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
1004cee2:	68fb      	ldr	r3, [r7, #12]
1004cee4:	781b      	ldrb	r3, [r3, #0]
1004cee6:	2bfe      	cmp	r3, #254	@ 0xfe
1004cee8:	d13c      	bne.n	1004cf64 <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
1004ceea:	68fb      	ldr	r3, [r7, #12]
1004ceec:	250b      	movs	r5, #11
1004ceee:	197c      	adds	r4, r7, r5
1004cef0:	0018      	movs	r0, r3
1004cef2:	f7ff ffcf 	bl	1004ce94 <InvalidateRecord>
1004cef6:	0003      	movs	r3, r0
1004cef8:	7023      	strb	r3, [r4, #0]
    if(status)
1004cefa:	197b      	adds	r3, r7, r5
1004cefc:	781b      	ldrb	r3, [r3, #0]
1004cefe:	2b00      	cmp	r3, #0
1004cf00:	d002      	beq.n	1004cf08 <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
1004cf02:	197b      	adds	r3, r7, r5
1004cf04:	781b      	ldrb	r3, [r3, #0]
1004cf06:	e02e      	b.n	1004cf66 <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
1004cf08:	687b      	ldr	r3, [r7, #4]
1004cf0a:	781b      	ldrb	r3, [r3, #0]
1004cf0c:	001a      	movs	r2, r3
1004cf0e:	4918      	ldr	r1, [pc, #96]	@ (1004cf70 <NVMDB_DeleteRecordNoCache+0xb4>)
1004cf10:	0013      	movs	r3, r2
1004cf12:	009b      	lsls	r3, r3, #2
1004cf14:	189b      	adds	r3, r3, r2
1004cf16:	009b      	lsls	r3, r3, #2
1004cf18:	18cb      	adds	r3, r1, r3
1004cf1a:	3308      	adds	r3, #8
1004cf1c:	881b      	ldrh	r3, [r3, #0]
1004cf1e:	3b01      	subs	r3, #1
1004cf20:	b298      	uxth	r0, r3
1004cf22:	4913      	ldr	r1, [pc, #76]	@ (1004cf70 <NVMDB_DeleteRecordNoCache+0xb4>)
1004cf24:	0013      	movs	r3, r2
1004cf26:	009b      	lsls	r3, r3, #2
1004cf28:	189b      	adds	r3, r3, r2
1004cf2a:	009b      	lsls	r3, r3, #2
1004cf2c:	18cb      	adds	r3, r1, r3
1004cf2e:	3308      	adds	r3, #8
1004cf30:	1c02      	adds	r2, r0, #0
1004cf32:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
1004cf34:	687b      	ldr	r3, [r7, #4]
1004cf36:	781b      	ldrb	r3, [r3, #0]
1004cf38:	001a      	movs	r2, r3
1004cf3a:	490d      	ldr	r1, [pc, #52]	@ (1004cf70 <NVMDB_DeleteRecordNoCache+0xb4>)
1004cf3c:	0013      	movs	r3, r2
1004cf3e:	009b      	lsls	r3, r3, #2
1004cf40:	189b      	adds	r3, r3, r2
1004cf42:	009b      	lsls	r3, r3, #2
1004cf44:	18cb      	adds	r3, r1, r3
1004cf46:	330a      	adds	r3, #10
1004cf48:	881b      	ldrh	r3, [r3, #0]
1004cf4a:	3301      	adds	r3, #1
1004cf4c:	b298      	uxth	r0, r3
1004cf4e:	4908      	ldr	r1, [pc, #32]	@ (1004cf70 <NVMDB_DeleteRecordNoCache+0xb4>)
1004cf50:	0013      	movs	r3, r2
1004cf52:	009b      	lsls	r3, r3, #2
1004cf54:	189b      	adds	r3, r3, r2
1004cf56:	009b      	lsls	r3, r3, #2
1004cf58:	18cb      	adds	r3, r1, r3
1004cf5a:	330a      	adds	r3, #10
1004cf5c:	1c02      	adds	r2, r0, #0
1004cf5e:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
1004cf60:	2300      	movs	r3, #0
1004cf62:	e000      	b.n	1004cf66 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004cf64:	2305      	movs	r3, #5
  }
}
1004cf66:	0018      	movs	r0, r3
1004cf68:	46bd      	mov	sp, r7
1004cf6a:	b004      	add	sp, #16
1004cf6c:	bdb0      	pop	{r4, r5, r7, pc}
1004cf6e:	46c0      	nop			@ (mov r8, r8)
1004cf70:	20000d64 	.word	0x20000d64

1004cf74 <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
1004cf74:	b580      	push	{r7, lr}
1004cf76:	b088      	sub	sp, #32
1004cf78:	af00      	add	r7, sp, #0
1004cf7a:	6078      	str	r0, [r7, #4]
1004cf7c:	000a      	movs	r2, r1
1004cf7e:	1cfb      	adds	r3, r7, #3
1004cf80:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004cf82:	687b      	ldr	r3, [r7, #4]
1004cf84:	4a0d      	ldr	r2, [pc, #52]	@ (1004cfbc <ErasePage+0x48>)
1004cf86:	4694      	mov	ip, r2
1004cf88:	4463      	add	r3, ip
1004cf8a:	0adb      	lsrs	r3, r3, #11
1004cf8c:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
1004cf8e:	2110      	movs	r1, #16
1004cf90:	187b      	adds	r3, r7, r1
1004cf92:	2200      	movs	r2, #0
1004cf94:	601a      	str	r2, [r3, #0]
1004cf96:	69fa      	ldr	r2, [r7, #28]
1004cf98:	187b      	adds	r3, r7, r1
1004cf9a:	605a      	str	r2, [r3, #4]
1004cf9c:	1cfb      	adds	r3, r7, #3
1004cf9e:	781a      	ldrb	r2, [r3, #0]
1004cfa0:	187b      	adds	r3, r7, r1
1004cfa2:	609a      	str	r2, [r3, #8]
1004cfa4:	230c      	movs	r3, #12
1004cfa6:	18fa      	adds	r2, r7, r3
1004cfa8:	187b      	adds	r3, r7, r1
1004cfaa:	0011      	movs	r1, r2
1004cfac:	0018      	movs	r0, r3
1004cfae:	f7f7 ff3d 	bl	10044e2c <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1004cfb2:	46c0      	nop			@ (mov r8, r8)
1004cfb4:	46bd      	mov	sp, r7
1004cfb6:	b008      	add	sp, #32
1004cfb8:	bd80      	pop	{r7, pc}
1004cfba:	46c0      	nop			@ (mov r8, r8)
1004cfbc:	effc0000 	.word	0xeffc0000

1004cfc0 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
1004cfc0:	b580      	push	{r7, lr}
1004cfc2:	b086      	sub	sp, #24
1004cfc4:	af00      	add	r7, sp, #0
1004cfc6:	60f8      	str	r0, [r7, #12]
1004cfc8:	60b9      	str	r1, [r7, #8]
1004cfca:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
1004cfcc:	687b      	ldr	r3, [r7, #4]
1004cfce:	055b      	lsls	r3, r3, #21
1004cfd0:	0d5b      	lsrs	r3, r3, #21
1004cfd2:	d107      	bne.n	1004cfe4 <WriteBufferToFlash+0x24>
1004cfd4:	68fb      	ldr	r3, [r7, #12]
1004cfd6:	687a      	ldr	r2, [r7, #4]
1004cfd8:	68b9      	ldr	r1, [r7, #8]
1004cfda:	0018      	movs	r0, r3
1004cfdc:	f017 fe28 	bl	10064c30 <memcmp>
1004cfe0:	1e03      	subs	r3, r0, #0
1004cfe2:	d026      	beq.n	1004d032 <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
1004cfe4:	687b      	ldr	r3, [r7, #4]
1004cfe6:	3b01      	subs	r3, #1
1004cfe8:	4a14      	ldr	r2, [pc, #80]	@ (1004d03c <WriteBufferToFlash+0x7c>)
1004cfea:	4313      	orrs	r3, r2
1004cfec:	3301      	adds	r3, #1
1004cfee:	0adb      	lsrs	r3, r3, #11
1004cff0:	b2da      	uxtb	r2, r3
1004cff2:	68fb      	ldr	r3, [r7, #12]
1004cff4:	0011      	movs	r1, r2
1004cff6:	0018      	movs	r0, r3
1004cff8:	f7ff ffbc 	bl	1004cf74 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
1004cffc:	2300      	movs	r3, #0
1004cffe:	617b      	str	r3, [r7, #20]
1004d000:	e012      	b.n	1004d028 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
1004d002:	697a      	ldr	r2, [r7, #20]
1004d004:	68fb      	ldr	r3, [r7, #12]
1004d006:	18d1      	adds	r1, r2, r3
1004d008:	697b      	ldr	r3, [r7, #20]
1004d00a:	2b00      	cmp	r3, #0
1004d00c:	da00      	bge.n	1004d010 <WriteBufferToFlash+0x50>
1004d00e:	3303      	adds	r3, #3
1004d010:	109b      	asrs	r3, r3, #2
1004d012:	009b      	lsls	r3, r3, #2
1004d014:	68ba      	ldr	r2, [r7, #8]
1004d016:	18d3      	adds	r3, r2, r3
1004d018:	681b      	ldr	r3, [r3, #0]
1004d01a:	001a      	movs	r2, r3
1004d01c:	2000      	movs	r0, #0
1004d01e:	f7f7 fe2b 	bl	10044c78 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
1004d022:	697b      	ldr	r3, [r7, #20]
1004d024:	3304      	adds	r3, #4
1004d026:	617b      	str	r3, [r7, #20]
1004d028:	697b      	ldr	r3, [r7, #20]
1004d02a:	687a      	ldr	r2, [r7, #4]
1004d02c:	429a      	cmp	r2, r3
1004d02e:	d8e8      	bhi.n	1004d002 <WriteBufferToFlash+0x42>
1004d030:	e000      	b.n	1004d034 <WriteBufferToFlash+0x74>
    return;
1004d032:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
1004d034:	46bd      	mov	sp, r7
1004d036:	b006      	add	sp, #24
1004d038:	bd80      	pop	{r7, pc}
1004d03a:	46c0      	nop			@ (mov r8, r8)
1004d03c:	000007ff 	.word	0x000007ff

1004d040 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
1004d040:	b580      	push	{r7, lr}
1004d042:	b082      	sub	sp, #8
1004d044:	af00      	add	r7, sp, #0
1004d046:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
1004d048:	687b      	ldr	r3, [r7, #4]
1004d04a:	2201      	movs	r2, #1
1004d04c:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
1004d04e:	687b      	ldr	r3, [r7, #4]
1004d050:	2200      	movs	r2, #0
1004d052:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
1004d054:	687b      	ldr	r3, [r7, #4]
1004d056:	2200      	movs	r2, #0
1004d058:	809a      	strh	r2, [r3, #4]
}
1004d05a:	46c0      	nop			@ (mov r8, r8)
1004d05c:	46bd      	mov	sp, r7
1004d05e:	b002      	add	sp, #8
1004d060:	bd80      	pop	{r7, pc}

1004d062 <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
1004d062:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d064:	b08d      	sub	sp, #52	@ 0x34
1004d066:	af04      	add	r7, sp, #16
1004d068:	60f8      	str	r0, [r7, #12]
1004d06a:	60b9      	str	r1, [r7, #8]
1004d06c:	603b      	str	r3, [r7, #0]
1004d06e:	1dbb      	adds	r3, r7, #6
1004d070:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
1004d072:	231e      	movs	r3, #30
1004d074:	18fb      	adds	r3, r7, r3
1004d076:	2200      	movs	r2, #0
1004d078:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
1004d07a:	1dbb      	adds	r3, r7, #6
1004d07c:	881a      	ldrh	r2, [r3, #0]
1004d07e:	68bb      	ldr	r3, [r7, #8]
1004d080:	21ff      	movs	r1, #255	@ 0xff
1004d082:	0018      	movs	r0, r3
1004d084:	f017 fde2 	bl	10064c4c <memset>

  header.valid_flag = VALID_RECORD;
1004d088:	2310      	movs	r3, #16
1004d08a:	18fb      	adds	r3, r7, r3
1004d08c:	22fe      	movs	r2, #254	@ 0xfe
1004d08e:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004d090:	1dba      	adds	r2, r7, #6
1004d092:	251e      	movs	r5, #30
1004d094:	197b      	adds	r3, r7, r5
1004d096:	8812      	ldrh	r2, [r2, #0]
1004d098:	881b      	ldrh	r3, [r3, #0]
1004d09a:	1ad3      	subs	r3, r2, r3
1004d09c:	b29a      	uxth	r2, r3
1004d09e:	231c      	movs	r3, #28
1004d0a0:	18fb      	adds	r3, r7, r3
1004d0a2:	3a04      	subs	r2, #4
1004d0a4:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1004d0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d0a8:	781b      	ldrb	r3, [r3, #0]
1004d0aa:	2b00      	cmp	r3, #0
1004d0ac:	d04e      	beq.n	1004d14c <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
1004d0ae:	197b      	adds	r3, r7, r5
1004d0b0:	881b      	ldrh	r3, [r3, #0]
1004d0b2:	3304      	adds	r3, #4
1004d0b4:	68ba      	ldr	r2, [r7, #8]
1004d0b6:	18d1      	adds	r1, r2, r3
1004d0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d0ba:	889b      	ldrh	r3, [r3, #4]
1004d0bc:	261b      	movs	r6, #27
1004d0be:	19bc      	adds	r4, r7, r6
1004d0c0:	68f8      	ldr	r0, [r7, #12]
1004d0c2:	2210      	movs	r2, #16
1004d0c4:	18ba      	adds	r2, r7, r2
1004d0c6:	3201      	adds	r2, #1
1004d0c8:	9203      	str	r2, [sp, #12]
1004d0ca:	9302      	str	r3, [sp, #8]
1004d0cc:	2216      	movs	r2, #22
1004d0ce:	18bb      	adds	r3, r7, r2
1004d0d0:	9301      	str	r3, [sp, #4]
1004d0d2:	231c      	movs	r3, #28
1004d0d4:	18fb      	adds	r3, r7, r3
1004d0d6:	881b      	ldrh	r3, [r3, #0]
1004d0d8:	9300      	str	r3, [sp, #0]
1004d0da:	000b      	movs	r3, r1
1004d0dc:	2200      	movs	r2, #0
1004d0de:	21ff      	movs	r1, #255	@ 0xff
1004d0e0:	f7ff fd14 	bl	1004cb0c <ReadNextRecordNoLock>
1004d0e4:	0003      	movs	r3, r0
1004d0e6:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
1004d0e8:	2216      	movs	r2, #22
1004d0ea:	18bb      	adds	r3, r7, r2
1004d0ec:	881a      	ldrh	r2, [r3, #0]
1004d0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d0f0:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
1004d0f2:	19bb      	adds	r3, r7, r6
1004d0f4:	781b      	ldrb	r3, [r3, #0]
1004d0f6:	2b00      	cmp	r3, #0
1004d0f8:	d006      	beq.n	1004d108 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
1004d0fa:	683b      	ldr	r3, [r7, #0]
1004d0fc:	197a      	adds	r2, r7, r5
1004d0fe:	8812      	ldrh	r2, [r2, #0]
1004d100:	801a      	strh	r2, [r3, #0]
        return status;
1004d102:	19bb      	adds	r3, r7, r6
1004d104:	781b      	ldrb	r3, [r3, #0]
1004d106:	e0a1      	b.n	1004d24c <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
1004d108:	2316      	movs	r3, #22
1004d10a:	18fb      	adds	r3, r7, r3
1004d10c:	881a      	ldrh	r2, [r3, #0]
1004d10e:	2110      	movs	r1, #16
1004d110:	187b      	adds	r3, r7, r1
1004d112:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
1004d114:	251e      	movs	r5, #30
1004d116:	197b      	adds	r3, r7, r5
1004d118:	881b      	ldrh	r3, [r3, #0]
1004d11a:	68ba      	ldr	r2, [r7, #8]
1004d11c:	18d3      	adds	r3, r2, r3
1004d11e:	000c      	movs	r4, r1
1004d120:	1879      	adds	r1, r7, r1
1004d122:	2204      	movs	r2, #4
1004d124:	0018      	movs	r0, r3
1004d126:	f017 fe06 	bl	10064d36 <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
1004d12a:	193b      	adds	r3, r7, r4
1004d12c:	885b      	ldrh	r3, [r3, #2]
1004d12e:	3303      	adds	r3, #3
1004d130:	b29b      	uxth	r3, r3
1004d132:	b21b      	sxth	r3, r3
1004d134:	2203      	movs	r2, #3
1004d136:	4313      	orrs	r3, r2
1004d138:	b21b      	sxth	r3, r3
1004d13a:	b29a      	uxth	r2, r3
1004d13c:	197b      	adds	r3, r7, r5
1004d13e:	881b      	ldrh	r3, [r3, #0]
1004d140:	18d3      	adds	r3, r2, r3
1004d142:	b29a      	uxth	r2, r3
1004d144:	197b      	adds	r3, r7, r5
1004d146:	3201      	adds	r2, #1
1004d148:	801a      	strh	r2, [r3, #0]
1004d14a:	e031      	b.n	1004d1b0 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
1004d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d14e:	8859      	ldrh	r1, [r3, #2]
1004d150:	231e      	movs	r3, #30
1004d152:	18fb      	adds	r3, r7, r3
1004d154:	881b      	ldrh	r3, [r3, #0]
1004d156:	68ba      	ldr	r2, [r7, #8]
1004d158:	18d5      	adds	r5, r2, r3
1004d15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d15c:	889b      	ldrh	r3, [r3, #4]
1004d15e:	261b      	movs	r6, #27
1004d160:	19bc      	adds	r4, r7, r6
1004d162:	221c      	movs	r2, #28
1004d164:	18ba      	adds	r2, r7, r2
1004d166:	8812      	ldrh	r2, [r2, #0]
1004d168:	68f8      	ldr	r0, [r7, #12]
1004d16a:	9301      	str	r3, [sp, #4]
1004d16c:	2316      	movs	r3, #22
1004d16e:	18fb      	adds	r3, r7, r3
1004d170:	9300      	str	r3, [sp, #0]
1004d172:	0013      	movs	r3, r2
1004d174:	002a      	movs	r2, r5
1004d176:	f7ff fe20 	bl	1004cdba <ReadCurrentRecordNoLock>
1004d17a:	0003      	movs	r3, r0
1004d17c:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
1004d17e:	19bb      	adds	r3, r7, r6
1004d180:	781b      	ldrb	r3, [r3, #0]
1004d182:	2b00      	cmp	r3, #0
1004d184:	d002      	beq.n	1004d18c <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1004d186:	19bb      	adds	r3, r7, r6
1004d188:	781b      	ldrb	r3, [r3, #0]
1004d18a:	e05f      	b.n	1004d24c <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
1004d18c:	2316      	movs	r3, #22
1004d18e:	18fb      	adds	r3, r7, r3
1004d190:	881a      	ldrh	r2, [r3, #0]
1004d192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d194:	885b      	ldrh	r3, [r3, #2]
1004d196:	1ad3      	subs	r3, r2, r3
1004d198:	b29b      	uxth	r3, r3
1004d19a:	3b01      	subs	r3, #1
1004d19c:	b29b      	uxth	r3, r3
1004d19e:	b21b      	sxth	r3, r3
1004d1a0:	2203      	movs	r2, #3
1004d1a2:	4313      	orrs	r3, r2
1004d1a4:	b21b      	sxth	r3, r3
1004d1a6:	b29a      	uxth	r2, r3
1004d1a8:	231e      	movs	r3, #30
1004d1aa:	18fb      	adds	r3, r7, r3
1004d1ac:	3201      	adds	r2, #1
1004d1ae:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
1004d1b0:	2316      	movs	r3, #22
1004d1b2:	18fb      	adds	r3, r7, r3
1004d1b4:	881a      	ldrh	r2, [r3, #0]
1004d1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d1b8:	885b      	ldrh	r3, [r3, #2]
1004d1ba:	1ad3      	subs	r3, r2, r3
1004d1bc:	b29b      	uxth	r3, r3
1004d1be:	3b01      	subs	r3, #1
1004d1c0:	b29b      	uxth	r3, r3
1004d1c2:	b21b      	sxth	r3, r3
1004d1c4:	2203      	movs	r2, #3
1004d1c6:	4313      	orrs	r3, r2
1004d1c8:	b21b      	sxth	r3, r3
1004d1ca:	b29a      	uxth	r2, r3
1004d1cc:	2118      	movs	r1, #24
1004d1ce:	187b      	adds	r3, r7, r1
1004d1d0:	3201      	adds	r2, #1
1004d1d2:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
1004d1d4:	187a      	adds	r2, r7, r1
1004d1d6:	211c      	movs	r1, #28
1004d1d8:	187b      	adds	r3, r7, r1
1004d1da:	8812      	ldrh	r2, [r2, #0]
1004d1dc:	881b      	ldrh	r3, [r3, #0]
1004d1de:	429a      	cmp	r2, r3
1004d1e0:	d910      	bls.n	1004d204 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
1004d1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d1e4:	2200      	movs	r2, #0
1004d1e6:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
1004d1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d1ea:	885a      	ldrh	r2, [r3, #2]
1004d1ec:	187b      	adds	r3, r7, r1
1004d1ee:	881b      	ldrh	r3, [r3, #0]
1004d1f0:	18d3      	adds	r3, r2, r3
1004d1f2:	b29a      	uxth	r2, r3
1004d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d1f6:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004d1f8:	683b      	ldr	r3, [r7, #0]
1004d1fa:	1dba      	adds	r2, r7, #6
1004d1fc:	8812      	ldrh	r2, [r2, #0]
1004d1fe:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004d200:	2300      	movs	r3, #0
1004d202:	e023      	b.n	1004d24c <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
1004d204:	2318      	movs	r3, #24
1004d206:	18fa      	adds	r2, r7, r3
1004d208:	231c      	movs	r3, #28
1004d20a:	18fb      	adds	r3, r7, r3
1004d20c:	8812      	ldrh	r2, [r2, #0]
1004d20e:	881b      	ldrh	r3, [r3, #0]
1004d210:	429a      	cmp	r2, r3
1004d212:	d10b      	bne.n	1004d22c <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
1004d214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d216:	2201      	movs	r2, #1
1004d218:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004d21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d21c:	2200      	movs	r2, #0
1004d21e:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004d220:	683b      	ldr	r3, [r7, #0]
1004d222:	1dba      	adds	r2, r7, #6
1004d224:	8812      	ldrh	r2, [r2, #0]
1004d226:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004d228:	2300      	movs	r3, #0
1004d22a:	e00f      	b.n	1004d24c <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
1004d22c:	2318      	movs	r3, #24
1004d22e:	18fa      	adds	r2, r7, r3
1004d230:	231c      	movs	r3, #28
1004d232:	18fb      	adds	r3, r7, r3
1004d234:	8812      	ldrh	r2, [r2, #0]
1004d236:	881b      	ldrh	r3, [r3, #0]
1004d238:	429a      	cmp	r2, r3
1004d23a:	d300      	bcc.n	1004d23e <LoadDBToRAM+0x1dc>
1004d23c:	e728      	b.n	1004d090 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
1004d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d240:	2201      	movs	r2, #1
1004d242:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d246:	2200      	movs	r2, #0
1004d248:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004d24a:	e721      	b.n	1004d090 <LoadDBToRAM+0x2e>
    }
  }
}
1004d24c:	0018      	movs	r0, r3
1004d24e:	46bd      	mov	sp, r7
1004d250:	b009      	add	sp, #36	@ 0x24
1004d252:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d254 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
1004d254:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d256:	4c60      	ldr	r4, [pc, #384]	@ (1004d3d8 <CleanLargeDB+0x184>)
1004d258:	44a5      	add	sp, r4
1004d25a:	af02      	add	r7, sp, #8
1004d25c:	0002      	movs	r2, r0
1004d25e:	4b5f      	ldr	r3, [pc, #380]	@ (1004d3dc <CleanLargeDB+0x188>)
1004d260:	2184      	movs	r1, #132	@ 0x84
1004d262:	0109      	lsls	r1, r1, #4
1004d264:	185b      	adds	r3, r3, r1
1004d266:	19db      	adds	r3, r3, r7
1004d268:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
1004d26a:	4b5c      	ldr	r3, [pc, #368]	@ (1004d3dc <CleanLargeDB+0x188>)
1004d26c:	185b      	adds	r3, r3, r1
1004d26e:	19db      	adds	r3, r3, r7
1004d270:	781a      	ldrb	r2, [r3, #0]
1004d272:	495b      	ldr	r1, [pc, #364]	@ (1004d3e0 <CleanLargeDB+0x18c>)
1004d274:	0013      	movs	r3, r2
1004d276:	009b      	lsls	r3, r3, #2
1004d278:	189b      	adds	r3, r3, r2
1004d27a:	009b      	lsls	r3, r3, #2
1004d27c:	18cb      	adds	r3, r1, r3
1004d27e:	330a      	adds	r3, #10
1004d280:	881b      	ldrh	r3, [r3, #0]
1004d282:	2b00      	cmp	r3, #0
1004d284:	d101      	bne.n	1004d28a <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
1004d286:	2300      	movs	r3, #0
1004d288:	e0a0      	b.n	1004d3cc <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
1004d28a:	4b56      	ldr	r3, [pc, #344]	@ (1004d3e4 <CleanLargeDB+0x190>)
1004d28c:	18fc      	adds	r4, r7, r3
1004d28e:	4d56      	ldr	r5, [pc, #344]	@ (1004d3e8 <CleanLargeDB+0x194>)
1004d290:	197a      	adds	r2, r7, r5
1004d292:	4b52      	ldr	r3, [pc, #328]	@ (1004d3dc <CleanLargeDB+0x188>)
1004d294:	2184      	movs	r1, #132	@ 0x84
1004d296:	0109      	lsls	r1, r1, #4
1004d298:	185b      	adds	r3, r3, r1
1004d29a:	19db      	adds	r3, r3, r7
1004d29c:	781b      	ldrb	r3, [r3, #0]
1004d29e:	0011      	movs	r1, r2
1004d2a0:	0018      	movs	r0, r3
1004d2a2:	f000 fcd3 	bl	1004dc4c <NVMDB_HandleInit>
1004d2a6:	0003      	movs	r3, r0
1004d2a8:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
1004d2aa:	197b      	adds	r3, r7, r5
1004d2ac:	685b      	ldr	r3, [r3, #4]
1004d2ae:	4a4f      	ldr	r2, [pc, #316]	@ (1004d3ec <CleanLargeDB+0x198>)
1004d2b0:	18ba      	adds	r2, r7, r2
1004d2b2:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
1004d2b4:	4b4e      	ldr	r3, [pc, #312]	@ (1004d3f0 <CleanLargeDB+0x19c>)
1004d2b6:	18fb      	adds	r3, r7, r3
1004d2b8:	0018      	movs	r0, r3
1004d2ba:	f7ff fec1 	bl	1004d040 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
1004d2be:	4e49      	ldr	r6, [pc, #292]	@ (1004d3e4 <CleanLargeDB+0x190>)
1004d2c0:	19bc      	adds	r4, r7, r6
1004d2c2:	4b4c      	ldr	r3, [pc, #304]	@ (1004d3f4 <CleanLargeDB+0x1a0>)
1004d2c4:	18fd      	adds	r5, r7, r3
1004d2c6:	2380      	movs	r3, #128	@ 0x80
1004d2c8:	011a      	lsls	r2, r3, #4
1004d2ca:	230c      	movs	r3, #12
1004d2cc:	18f9      	adds	r1, r7, r3
1004d2ce:	4b46      	ldr	r3, [pc, #280]	@ (1004d3e8 <CleanLargeDB+0x194>)
1004d2d0:	18f8      	adds	r0, r7, r3
1004d2d2:	4b47      	ldr	r3, [pc, #284]	@ (1004d3f0 <CleanLargeDB+0x19c>)
1004d2d4:	18fb      	adds	r3, r7, r3
1004d2d6:	9300      	str	r3, [sp, #0]
1004d2d8:	002b      	movs	r3, r5
1004d2da:	f7ff fec2 	bl	1004d062 <LoadDBToRAM>
1004d2de:	0003      	movs	r3, r0
1004d2e0:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
1004d2e2:	19bb      	adds	r3, r7, r6
1004d2e4:	781b      	ldrb	r3, [r3, #0]
1004d2e6:	2b04      	cmp	r3, #4
1004d2e8:	d006      	beq.n	1004d2f8 <CleanLargeDB+0xa4>
1004d2ea:	19bb      	adds	r3, r7, r6
1004d2ec:	781b      	ldrb	r3, [r3, #0]
1004d2ee:	2b00      	cmp	r3, #0
1004d2f0:	d002      	beq.n	1004d2f8 <CleanLargeDB+0xa4>
    {
      return status;
1004d2f2:	19bb      	adds	r3, r7, r6
1004d2f4:	781b      	ldrb	r3, [r3, #0]
1004d2f6:	e069      	b.n	1004d3cc <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
1004d2f8:	4b3e      	ldr	r3, [pc, #248]	@ (1004d3f4 <CleanLargeDB+0x1a0>)
1004d2fa:	18fb      	adds	r3, r7, r3
1004d2fc:	881a      	ldrh	r2, [r3, #0]
1004d2fe:	2380      	movs	r3, #128	@ 0x80
1004d300:	011b      	lsls	r3, r3, #4
1004d302:	429a      	cmp	r2, r3
1004d304:	d004      	beq.n	1004d310 <CleanLargeDB+0xbc>
1004d306:	4b37      	ldr	r3, [pc, #220]	@ (1004d3e4 <CleanLargeDB+0x190>)
1004d308:	18fb      	adds	r3, r7, r3
1004d30a:	781b      	ldrb	r3, [r3, #0]
1004d30c:	2b00      	cmp	r3, #0
1004d30e:	d0d6      	beq.n	1004d2be <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
1004d310:	4a38      	ldr	r2, [pc, #224]	@ (1004d3f4 <CleanLargeDB+0x1a0>)
1004d312:	18bb      	adds	r3, r7, r2
1004d314:	881b      	ldrh	r3, [r3, #0]
1004d316:	2b00      	cmp	r3, #0
1004d318:	d019      	beq.n	1004d34e <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
1004d31a:	18bb      	adds	r3, r7, r2
1004d31c:	881b      	ldrh	r3, [r3, #0]
1004d31e:	001a      	movs	r2, r3
1004d320:	230c      	movs	r3, #12
1004d322:	18f9      	adds	r1, r7, r3
1004d324:	4c31      	ldr	r4, [pc, #196]	@ (1004d3ec <CleanLargeDB+0x198>)
1004d326:	193b      	adds	r3, r7, r4
1004d328:	681b      	ldr	r3, [r3, #0]
1004d32a:	0018      	movs	r0, r3
1004d32c:	f7ff fe48 	bl	1004cfc0 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
1004d330:	0022      	movs	r2, r4
1004d332:	18bb      	adds	r3, r7, r2
1004d334:	681b      	ldr	r3, [r3, #0]
1004d336:	2180      	movs	r1, #128	@ 0x80
1004d338:	0109      	lsls	r1, r1, #4
1004d33a:	468c      	mov	ip, r1
1004d33c:	4463      	add	r3, ip
1004d33e:	18ba      	adds	r2, r7, r2
1004d340:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
1004d342:	4b28      	ldr	r3, [pc, #160]	@ (1004d3e4 <CleanLargeDB+0x190>)
1004d344:	18fb      	adds	r3, r7, r3
1004d346:	781b      	ldrb	r3, [r3, #0]
1004d348:	2b00      	cmp	r3, #0
1004d34a:	d102      	bne.n	1004d352 <CleanLargeDB+0xfe>
  {
1004d34c:	e7b7      	b.n	1004d2be <CleanLargeDB+0x6a>
        break;
1004d34e:	46c0      	nop			@ (mov r8, r8)
1004d350:	e000      	b.n	1004d354 <CleanLargeDB+0x100>
      {
        break;
1004d352:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
1004d354:	4b24      	ldr	r3, [pc, #144]	@ (1004d3e8 <CleanLargeDB+0x194>)
1004d356:	18fb      	adds	r3, r7, r3
1004d358:	689b      	ldr	r3, [r3, #8]
1004d35a:	3b01      	subs	r3, #1
1004d35c:	4a26      	ldr	r2, [pc, #152]	@ (1004d3f8 <CleanLargeDB+0x1a4>)
1004d35e:	431a      	orrs	r2, r3
1004d360:	4922      	ldr	r1, [pc, #136]	@ (1004d3ec <CleanLargeDB+0x198>)
1004d362:	187b      	adds	r3, r7, r1
1004d364:	681b      	ldr	r3, [r3, #0]
1004d366:	1ad3      	subs	r3, r2, r3
1004d368:	3301      	adds	r3, #1
1004d36a:	0ada      	lsrs	r2, r3, #11
1004d36c:	4823      	ldr	r0, [pc, #140]	@ (1004d3fc <CleanLargeDB+0x1a8>)
1004d36e:	183b      	adds	r3, r7, r0
1004d370:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004d372:	187b      	adds	r3, r7, r1
1004d374:	681b      	ldr	r3, [r3, #0]
1004d376:	4a22      	ldr	r2, [pc, #136]	@ (1004d400 <CleanLargeDB+0x1ac>)
1004d378:	4694      	mov	ip, r2
1004d37a:	4463      	add	r3, ip
1004d37c:	0ada      	lsrs	r2, r3, #11
1004d37e:	4c21      	ldr	r4, [pc, #132]	@ (1004d404 <CleanLargeDB+0x1b0>)
1004d380:	193b      	adds	r3, r7, r4
1004d382:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004d384:	2181      	movs	r1, #129	@ 0x81
1004d386:	0109      	lsls	r1, r1, #4
1004d388:	187b      	adds	r3, r7, r1
1004d38a:	2200      	movs	r2, #0
1004d38c:	601a      	str	r2, [r3, #0]
1004d38e:	193b      	adds	r3, r7, r4
1004d390:	781a      	ldrb	r2, [r3, #0]
1004d392:	187b      	adds	r3, r7, r1
1004d394:	605a      	str	r2, [r3, #4]
1004d396:	183b      	adds	r3, r7, r0
1004d398:	781a      	ldrb	r2, [r3, #0]
1004d39a:	187b      	adds	r3, r7, r1
1004d39c:	609a      	str	r2, [r3, #8]
1004d39e:	4b1a      	ldr	r3, [pc, #104]	@ (1004d408 <CleanLargeDB+0x1b4>)
1004d3a0:	18fa      	adds	r2, r7, r3
1004d3a2:	187b      	adds	r3, r7, r1
1004d3a4:	0011      	movs	r1, r2
1004d3a6:	0018      	movs	r0, r3
1004d3a8:	f7f7 fd40 	bl	10044e2c <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
1004d3ac:	4b0b      	ldr	r3, [pc, #44]	@ (1004d3dc <CleanLargeDB+0x188>)
1004d3ae:	2284      	movs	r2, #132	@ 0x84
1004d3b0:	0112      	lsls	r2, r2, #4
1004d3b2:	189b      	adds	r3, r3, r2
1004d3b4:	19db      	adds	r3, r3, r7
1004d3b6:	781a      	ldrb	r2, [r3, #0]
1004d3b8:	0013      	movs	r3, r2
1004d3ba:	009b      	lsls	r3, r3, #2
1004d3bc:	189b      	adds	r3, r3, r2
1004d3be:	009b      	lsls	r3, r3, #2
1004d3c0:	4a07      	ldr	r2, [pc, #28]	@ (1004d3e0 <CleanLargeDB+0x18c>)
1004d3c2:	189b      	adds	r3, r3, r2
1004d3c4:	0018      	movs	r0, r3
1004d3c6:	f7ff fad5 	bl	1004c974 <NVMDB_get_info>
1004d3ca:	0003      	movs	r3, r0
}
1004d3cc:	0018      	movs	r0, r3
1004d3ce:	46bd      	mov	sp, r7
1004d3d0:	4b0e      	ldr	r3, [pc, #56]	@ (1004d40c <CleanLargeDB+0x1b8>)
1004d3d2:	449d      	add	sp, r3
1004d3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d3d6:	46c0      	nop			@ (mov r8, r8)
1004d3d8:	fffff7b4 	.word	0xfffff7b4
1004d3dc:	fffff7c7 	.word	0xfffff7c7
1004d3e0:	20000d64 	.word	0x20000d64
1004d3e4:	0000083b 	.word	0x0000083b
1004d3e8:	00000824 	.word	0x00000824
1004d3ec:	0000083c 	.word	0x0000083c
1004d3f0:	0000081c 	.word	0x0000081c
1004d3f4:	00000836 	.word	0x00000836
1004d3f8:	000007ff 	.word	0x000007ff
1004d3fc:	0000083a 	.word	0x0000083a
1004d400:	effc0000 	.word	0xeffc0000
1004d404:	00000839 	.word	0x00000839
1004d408:	0000080c 	.word	0x0000080c
1004d40c:	00000844 	.word	0x00000844

1004d410 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
1004d410:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d412:	4c7a      	ldr	r4, [pc, #488]	@ (1004d5fc <CleanPage+0x1ec>)
1004d414:	44a5      	add	sp, r4
1004d416:	af02      	add	r7, sp, #8
1004d418:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
1004d41a:	4b79      	ldr	r3, [pc, #484]	@ (1004d600 <CleanPage+0x1f0>)
1004d41c:	18fb      	adds	r3, r7, r3
1004d41e:	2200      	movs	r2, #0
1004d420:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
1004d422:	4b78      	ldr	r3, [pc, #480]	@ (1004d604 <CleanPage+0x1f4>)
1004d424:	18fb      	adds	r3, r7, r3
1004d426:	2200      	movs	r2, #0
1004d428:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004d42a:	2300      	movs	r3, #0
1004d42c:	4a76      	ldr	r2, [pc, #472]	@ (1004d608 <CleanPage+0x1f8>)
1004d42e:	18ba      	adds	r2, r7, r2
1004d430:	6013      	str	r3, [r2, #0]
1004d432:	e023      	b.n	1004d47c <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004d434:	687b      	ldr	r3, [r7, #4]
1004d436:	6899      	ldr	r1, [r3, #8]
1004d438:	4b73      	ldr	r3, [pc, #460]	@ (1004d608 <CleanPage+0x1f8>)
1004d43a:	18fb      	adds	r3, r7, r3
1004d43c:	681a      	ldr	r2, [r3, #0]
1004d43e:	0013      	movs	r3, r2
1004d440:	005b      	lsls	r3, r3, #1
1004d442:	189b      	adds	r3, r3, r2
1004d444:	009b      	lsls	r3, r3, #2
1004d446:	18ca      	adds	r2, r1, r3
1004d448:	4970      	ldr	r1, [pc, #448]	@ (1004d60c <CleanPage+0x1fc>)
1004d44a:	187b      	adds	r3, r7, r1
1004d44c:	7812      	ldrb	r2, [r2, #0]
1004d44e:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
1004d450:	187b      	adds	r3, r7, r1
1004d452:	781a      	ldrb	r2, [r3, #0]
1004d454:	496e      	ldr	r1, [pc, #440]	@ (1004d610 <CleanPage+0x200>)
1004d456:	0013      	movs	r3, r2
1004d458:	009b      	lsls	r3, r3, #2
1004d45a:	189b      	adds	r3, r3, r2
1004d45c:	009b      	lsls	r3, r3, #2
1004d45e:	18cb      	adds	r3, r1, r3
1004d460:	330a      	adds	r3, #10
1004d462:	881b      	ldrh	r3, [r3, #0]
1004d464:	2b00      	cmp	r3, #0
1004d466:	d003      	beq.n	1004d470 <CleanPage+0x60>
    {
      found = TRUE;
1004d468:	4b66      	ldr	r3, [pc, #408]	@ (1004d604 <CleanPage+0x1f4>)
1004d46a:	18fb      	adds	r3, r7, r3
1004d46c:	2201      	movs	r2, #1
1004d46e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004d470:	4a65      	ldr	r2, [pc, #404]	@ (1004d608 <CleanPage+0x1f8>)
1004d472:	18bb      	adds	r3, r7, r2
1004d474:	681b      	ldr	r3, [r3, #0]
1004d476:	3301      	adds	r3, #1
1004d478:	18ba      	adds	r2, r7, r2
1004d47a:	6013      	str	r3, [r2, #0]
1004d47c:	687b      	ldr	r3, [r7, #4]
1004d47e:	791b      	ldrb	r3, [r3, #4]
1004d480:	001a      	movs	r2, r3
1004d482:	4b61      	ldr	r3, [pc, #388]	@ (1004d608 <CleanPage+0x1f8>)
1004d484:	18fb      	adds	r3, r7, r3
1004d486:	681b      	ldr	r3, [r3, #0]
1004d488:	4293      	cmp	r3, r2
1004d48a:	dbd3      	blt.n	1004d434 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
1004d48c:	4b5d      	ldr	r3, [pc, #372]	@ (1004d604 <CleanPage+0x1f4>)
1004d48e:	18fb      	adds	r3, r7, r3
1004d490:	781b      	ldrb	r3, [r3, #0]
1004d492:	2b00      	cmp	r3, #0
1004d494:	d101      	bne.n	1004d49a <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1004d496:	2300      	movs	r3, #0
1004d498:	e0ab      	b.n	1004d5f2 <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004d49a:	2380      	movs	r3, #128	@ 0x80
1004d49c:	011a      	lsls	r2, r3, #4
1004d49e:	2308      	movs	r3, #8
1004d4a0:	18fb      	adds	r3, r7, r3
1004d4a2:	21ff      	movs	r1, #255	@ 0xff
1004d4a4:	0018      	movs	r0, r3
1004d4a6:	f017 fbd1 	bl	10064c4c <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004d4aa:	2300      	movs	r3, #0
1004d4ac:	4a56      	ldr	r2, [pc, #344]	@ (1004d608 <CleanPage+0x1f8>)
1004d4ae:	18ba      	adds	r2, r7, r2
1004d4b0:	6013      	str	r3, [r2, #0]
1004d4b2:	e051      	b.n	1004d558 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004d4b4:	687b      	ldr	r3, [r7, #4]
1004d4b6:	6899      	ldr	r1, [r3, #8]
1004d4b8:	4853      	ldr	r0, [pc, #332]	@ (1004d608 <CleanPage+0x1f8>)
1004d4ba:	183b      	adds	r3, r7, r0
1004d4bc:	681a      	ldr	r2, [r3, #0]
1004d4be:	0013      	movs	r3, r2
1004d4c0:	005b      	lsls	r3, r3, #1
1004d4c2:	189b      	adds	r3, r3, r2
1004d4c4:	009b      	lsls	r3, r3, #2
1004d4c6:	18ca      	adds	r2, r1, r3
1004d4c8:	4d50      	ldr	r5, [pc, #320]	@ (1004d60c <CleanPage+0x1fc>)
1004d4ca:	197b      	adds	r3, r7, r5
1004d4cc:	7812      	ldrb	r2, [r2, #0]
1004d4ce:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
1004d4d0:	687b      	ldr	r3, [r7, #4]
1004d4d2:	6899      	ldr	r1, [r3, #8]
1004d4d4:	183b      	adds	r3, r7, r0
1004d4d6:	681a      	ldr	r2, [r3, #0]
1004d4d8:	0013      	movs	r3, r2
1004d4da:	005b      	lsls	r3, r3, #1
1004d4dc:	189b      	adds	r3, r3, r2
1004d4de:	009b      	lsls	r3, r3, #2
1004d4e0:	18cb      	adds	r3, r1, r3
1004d4e2:	685b      	ldr	r3, [r3, #4]
1004d4e4:	2282      	movs	r2, #130	@ 0x82
1004d4e6:	0112      	lsls	r2, r2, #4
1004d4e8:	18ba      	adds	r2, r7, r2
1004d4ea:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
1004d4ec:	4e49      	ldr	r6, [pc, #292]	@ (1004d614 <CleanPage+0x204>)
1004d4ee:	19bc      	adds	r4, r7, r6
1004d4f0:	2381      	movs	r3, #129	@ 0x81
1004d4f2:	011b      	lsls	r3, r3, #4
1004d4f4:	18fa      	adds	r2, r7, r3
1004d4f6:	197b      	adds	r3, r7, r5
1004d4f8:	781b      	ldrb	r3, [r3, #0]
1004d4fa:	0011      	movs	r1, r2
1004d4fc:	0018      	movs	r0, r3
1004d4fe:	f000 fba5 	bl	1004dc4c <NVMDB_HandleInit>
1004d502:	0003      	movs	r3, r0
1004d504:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
1004d506:	19bb      	adds	r3, r7, r6
1004d508:	781b      	ldrb	r3, [r3, #0]
1004d50a:	2b00      	cmp	r3, #0
1004d50c:	d001      	beq.n	1004d512 <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
1004d50e:	2300      	movs	r3, #0
1004d510:	e06f      	b.n	1004d5f2 <CleanPage+0x1e2>
    }

    InitReadState(&state);
1004d512:	4d41      	ldr	r5, [pc, #260]	@ (1004d618 <CleanPage+0x208>)
1004d514:	197b      	adds	r3, r7, r5
1004d516:	0018      	movs	r0, r3
1004d518:	f7ff fd92 	bl	1004d040 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
1004d51c:	2308      	movs	r3, #8
1004d51e:	18fa      	adds	r2, r7, r3
1004d520:	2082      	movs	r0, #130	@ 0x82
1004d522:	0100      	lsls	r0, r0, #4
1004d524:	183b      	adds	r3, r7, r0
1004d526:	681b      	ldr	r3, [r3, #0]
1004d528:	18d1      	adds	r1, r2, r3
1004d52a:	183b      	adds	r3, r7, r0
1004d52c:	681b      	ldr	r3, [r3, #0]
1004d52e:	b29b      	uxth	r3, r3
1004d530:	2280      	movs	r2, #128	@ 0x80
1004d532:	0112      	lsls	r2, r2, #4
1004d534:	1ad3      	subs	r3, r2, r3
1004d536:	b29a      	uxth	r2, r3
1004d538:	4b38      	ldr	r3, [pc, #224]	@ (1004d61c <CleanPage+0x20c>)
1004d53a:	18fc      	adds	r4, r7, r3
1004d53c:	2381      	movs	r3, #129	@ 0x81
1004d53e:	011b      	lsls	r3, r3, #4
1004d540:	18f8      	adds	r0, r7, r3
1004d542:	197b      	adds	r3, r7, r5
1004d544:	9300      	str	r3, [sp, #0]
1004d546:	0023      	movs	r3, r4
1004d548:	f7ff fd8b 	bl	1004d062 <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004d54c:	4a2e      	ldr	r2, [pc, #184]	@ (1004d608 <CleanPage+0x1f8>)
1004d54e:	18bb      	adds	r3, r7, r2
1004d550:	681b      	ldr	r3, [r3, #0]
1004d552:	3301      	adds	r3, #1
1004d554:	18ba      	adds	r2, r7, r2
1004d556:	6013      	str	r3, [r2, #0]
1004d558:	687b      	ldr	r3, [r7, #4]
1004d55a:	791b      	ldrb	r3, [r3, #4]
1004d55c:	001a      	movs	r2, r3
1004d55e:	4c2a      	ldr	r4, [pc, #168]	@ (1004d608 <CleanPage+0x1f8>)
1004d560:	193b      	adds	r3, r7, r4
1004d562:	681b      	ldr	r3, [r3, #0]
1004d564:	4293      	cmp	r3, r2
1004d566:	dba5      	blt.n	1004d4b4 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004d568:	687b      	ldr	r3, [r7, #4]
1004d56a:	681b      	ldr	r3, [r3, #0]
1004d56c:	2280      	movs	r2, #128	@ 0x80
1004d56e:	0112      	lsls	r2, r2, #4
1004d570:	2108      	movs	r1, #8
1004d572:	1879      	adds	r1, r7, r1
1004d574:	0018      	movs	r0, r3
1004d576:	f7ff fd23 	bl	1004cfc0 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004d57a:	2300      	movs	r3, #0
1004d57c:	193a      	adds	r2, r7, r4
1004d57e:	6013      	str	r3, [r2, #0]
1004d580:	e02c      	b.n	1004d5dc <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004d582:	687b      	ldr	r3, [r7, #4]
1004d584:	6899      	ldr	r1, [r3, #8]
1004d586:	4b20      	ldr	r3, [pc, #128]	@ (1004d608 <CleanPage+0x1f8>)
1004d588:	18fb      	adds	r3, r7, r3
1004d58a:	681a      	ldr	r2, [r3, #0]
1004d58c:	0013      	movs	r3, r2
1004d58e:	005b      	lsls	r3, r3, #1
1004d590:	189b      	adds	r3, r3, r2
1004d592:	009b      	lsls	r3, r3, #2
1004d594:	18ca      	adds	r2, r1, r3
1004d596:	491d      	ldr	r1, [pc, #116]	@ (1004d60c <CleanPage+0x1fc>)
1004d598:	187b      	adds	r3, r7, r1
1004d59a:	7812      	ldrb	r2, [r2, #0]
1004d59c:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
1004d59e:	187b      	adds	r3, r7, r1
1004d5a0:	781a      	ldrb	r2, [r3, #0]
1004d5a2:	0013      	movs	r3, r2
1004d5a4:	009b      	lsls	r3, r3, #2
1004d5a6:	189b      	adds	r3, r3, r2
1004d5a8:	009b      	lsls	r3, r3, #2
1004d5aa:	4a19      	ldr	r2, [pc, #100]	@ (1004d610 <CleanPage+0x200>)
1004d5ac:	189b      	adds	r3, r3, r2
1004d5ae:	4d19      	ldr	r5, [pc, #100]	@ (1004d614 <CleanPage+0x204>)
1004d5b0:	197c      	adds	r4, r7, r5
1004d5b2:	0018      	movs	r0, r3
1004d5b4:	f7ff f9de 	bl	1004c974 <NVMDB_get_info>
1004d5b8:	0003      	movs	r3, r0
1004d5ba:	7023      	strb	r3, [r4, #0]
    if(status)
1004d5bc:	002a      	movs	r2, r5
1004d5be:	18bb      	adds	r3, r7, r2
1004d5c0:	781b      	ldrb	r3, [r3, #0]
1004d5c2:	2b00      	cmp	r3, #0
1004d5c4:	d004      	beq.n	1004d5d0 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
1004d5c6:	4b0e      	ldr	r3, [pc, #56]	@ (1004d600 <CleanPage+0x1f0>)
1004d5c8:	18fb      	adds	r3, r7, r3
1004d5ca:	18ba      	adds	r2, r7, r2
1004d5cc:	7812      	ldrb	r2, [r2, #0]
1004d5ce:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004d5d0:	4a0d      	ldr	r2, [pc, #52]	@ (1004d608 <CleanPage+0x1f8>)
1004d5d2:	18bb      	adds	r3, r7, r2
1004d5d4:	681b      	ldr	r3, [r3, #0]
1004d5d6:	3301      	adds	r3, #1
1004d5d8:	18ba      	adds	r2, r7, r2
1004d5da:	6013      	str	r3, [r2, #0]
1004d5dc:	687b      	ldr	r3, [r7, #4]
1004d5de:	791b      	ldrb	r3, [r3, #4]
1004d5e0:	001a      	movs	r2, r3
1004d5e2:	4b09      	ldr	r3, [pc, #36]	@ (1004d608 <CleanPage+0x1f8>)
1004d5e4:	18fb      	adds	r3, r7, r3
1004d5e6:	681b      	ldr	r3, [r3, #0]
1004d5e8:	4293      	cmp	r3, r2
1004d5ea:	dbca      	blt.n	1004d582 <CleanPage+0x172>
    }
  }

  return ret;
1004d5ec:	4b04      	ldr	r3, [pc, #16]	@ (1004d600 <CleanPage+0x1f0>)
1004d5ee:	18fb      	adds	r3, r7, r3
1004d5f0:	781b      	ldrb	r3, [r3, #0]
}
1004d5f2:	0018      	movs	r0, r3
1004d5f4:	46bd      	mov	sp, r7
1004d5f6:	4b0a      	ldr	r3, [pc, #40]	@ (1004d620 <CleanPage+0x210>)
1004d5f8:	449d      	add	sp, r3
1004d5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d5fc:	fffff7c4 	.word	0xfffff7c4
1004d600:	0000082f 	.word	0x0000082f
1004d604:	00000827 	.word	0x00000827
1004d608:	00000828 	.word	0x00000828
1004d60c:	00000826 	.word	0x00000826
1004d610:	20000d64 	.word	0x20000d64
1004d614:	00000825 	.word	0x00000825
1004d618:	00000808 	.word	0x00000808
1004d61c:	0000080e 	.word	0x0000080e
1004d620:	00000834 	.word	0x00000834

1004d624 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
1004d624:	b590      	push	{r4, r7, lr}
1004d626:	b087      	sub	sp, #28
1004d628:	af00      	add	r7, sp, #0
1004d62a:	0002      	movs	r2, r0
1004d62c:	6039      	str	r1, [r7, #0]
1004d62e:	1dfb      	adds	r3, r7, #7
1004d630:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004d632:	2300      	movs	r3, #0
1004d634:	617b      	str	r3, [r7, #20]
1004d636:	e016      	b.n	1004d666 <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004d638:	240b      	movs	r4, #11
1004d63a:	1939      	adds	r1, r7, r4
1004d63c:	482e      	ldr	r0, [pc, #184]	@ (1004d6f8 <GetDBType+0xd4>)
1004d63e:	697a      	ldr	r2, [r7, #20]
1004d640:	0013      	movs	r3, r2
1004d642:	005b      	lsls	r3, r3, #1
1004d644:	189b      	adds	r3, r3, r2
1004d646:	009b      	lsls	r3, r3, #2
1004d648:	18c3      	adds	r3, r0, r3
1004d64a:	3306      	adds	r3, #6
1004d64c:	781b      	ldrb	r3, [r3, #0]
1004d64e:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
1004d650:	193a      	adds	r2, r7, r4
1004d652:	1dfb      	adds	r3, r7, #7
1004d654:	7812      	ldrb	r2, [r2, #0]
1004d656:	781b      	ldrb	r3, [r3, #0]
1004d658:	429a      	cmp	r2, r3
1004d65a:	d101      	bne.n	1004d660 <GetDBType+0x3c>
    {
      return LARGE_DB;
1004d65c:	2302      	movs	r3, #2
1004d65e:	e046      	b.n	1004d6ee <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004d660:	697b      	ldr	r3, [r7, #20]
1004d662:	3301      	adds	r3, #1
1004d664:	617b      	str	r3, [r7, #20]
1004d666:	697b      	ldr	r3, [r7, #20]
1004d668:	2b01      	cmp	r3, #1
1004d66a:	dde5      	ble.n	1004d638 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004d66c:	2300      	movs	r3, #0
1004d66e:	613b      	str	r3, [r7, #16]
1004d670:	e039      	b.n	1004d6e6 <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004d672:	2300      	movs	r3, #0
1004d674:	60fb      	str	r3, [r7, #12]
1004d676:	e026      	b.n	1004d6c6 <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004d678:	4920      	ldr	r1, [pc, #128]	@ (1004d6fc <GetDBType+0xd8>)
1004d67a:	693a      	ldr	r2, [r7, #16]
1004d67c:	0013      	movs	r3, r2
1004d67e:	005b      	lsls	r3, r3, #1
1004d680:	189b      	adds	r3, r3, r2
1004d682:	009b      	lsls	r3, r3, #2
1004d684:	18cb      	adds	r3, r1, r3
1004d686:	3308      	adds	r3, #8
1004d688:	6819      	ldr	r1, [r3, #0]
1004d68a:	68fa      	ldr	r2, [r7, #12]
1004d68c:	0013      	movs	r3, r2
1004d68e:	005b      	lsls	r3, r3, #1
1004d690:	189b      	adds	r3, r3, r2
1004d692:	009b      	lsls	r3, r3, #2
1004d694:	18ca      	adds	r2, r1, r3
1004d696:	210b      	movs	r1, #11
1004d698:	187b      	adds	r3, r7, r1
1004d69a:	7812      	ldrb	r2, [r2, #0]
1004d69c:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
1004d69e:	187a      	adds	r2, r7, r1
1004d6a0:	1dfb      	adds	r3, r7, #7
1004d6a2:	7812      	ldrb	r2, [r2, #0]
1004d6a4:	781b      	ldrb	r3, [r3, #0]
1004d6a6:	429a      	cmp	r2, r3
1004d6a8:	d10a      	bne.n	1004d6c0 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
1004d6aa:	693a      	ldr	r2, [r7, #16]
1004d6ac:	0013      	movs	r3, r2
1004d6ae:	005b      	lsls	r3, r3, #1
1004d6b0:	189b      	adds	r3, r3, r2
1004d6b2:	009b      	lsls	r3, r3, #2
1004d6b4:	4a11      	ldr	r2, [pc, #68]	@ (1004d6fc <GetDBType+0xd8>)
1004d6b6:	189a      	adds	r2, r3, r2
1004d6b8:	683b      	ldr	r3, [r7, #0]
1004d6ba:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
1004d6bc:	2301      	movs	r3, #1
1004d6be:	e016      	b.n	1004d6ee <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004d6c0:	68fb      	ldr	r3, [r7, #12]
1004d6c2:	3301      	adds	r3, #1
1004d6c4:	60fb      	str	r3, [r7, #12]
1004d6c6:	490d      	ldr	r1, [pc, #52]	@ (1004d6fc <GetDBType+0xd8>)
1004d6c8:	693a      	ldr	r2, [r7, #16]
1004d6ca:	0013      	movs	r3, r2
1004d6cc:	005b      	lsls	r3, r3, #1
1004d6ce:	189b      	adds	r3, r3, r2
1004d6d0:	009b      	lsls	r3, r3, #2
1004d6d2:	18cb      	adds	r3, r1, r3
1004d6d4:	3304      	adds	r3, #4
1004d6d6:	781b      	ldrb	r3, [r3, #0]
1004d6d8:	001a      	movs	r2, r3
1004d6da:	68fb      	ldr	r3, [r7, #12]
1004d6dc:	4293      	cmp	r3, r2
1004d6de:	dbcb      	blt.n	1004d678 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004d6e0:	693b      	ldr	r3, [r7, #16]
1004d6e2:	3301      	adds	r3, #1
1004d6e4:	613b      	str	r3, [r7, #16]
1004d6e6:	693b      	ldr	r3, [r7, #16]
1004d6e8:	2b00      	cmp	r3, #0
1004d6ea:	dbc2      	blt.n	1004d672 <GetDBType+0x4e>
      }
    }
  }

  return 0;
1004d6ec:	2300      	movs	r3, #0
}
1004d6ee:	0018      	movs	r0, r3
1004d6f0:	46bd      	mov	sp, r7
1004d6f2:	b007      	add	sp, #28
1004d6f4:	bd90      	pop	{r4, r7, pc}
1004d6f6:	46c0      	nop			@ (mov r8, r8)
1004d6f8:	10065d54 	.word	0x10065d54
1004d6fc:	20000d90 	.word	0x20000d90

1004d700 <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
1004d700:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d702:	4c3d      	ldr	r4, [pc, #244]	@ (1004d7f8 <EraseSmallDB+0xf8>)
1004d704:	44a5      	add	sp, r4
1004d706:	af02      	add	r7, sp, #8
1004d708:	0002      	movs	r2, r0
1004d70a:	6039      	str	r1, [r7, #0]
1004d70c:	4b3b      	ldr	r3, [pc, #236]	@ (1004d7fc <EraseSmallDB+0xfc>)
1004d70e:	2183      	movs	r1, #131	@ 0x83
1004d710:	0109      	lsls	r1, r1, #4
1004d712:	185b      	adds	r3, r3, r1
1004d714:	19db      	adds	r3, r3, r7
1004d716:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004d718:	2380      	movs	r3, #128	@ 0x80
1004d71a:	011a      	lsls	r2, r3, #4
1004d71c:	2324      	movs	r3, #36	@ 0x24
1004d71e:	18fb      	adds	r3, r7, r3
1004d720:	21ff      	movs	r1, #255	@ 0xff
1004d722:	0018      	movs	r0, r3
1004d724:	f017 fa92 	bl	10064c4c <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004d728:	2300      	movs	r3, #0
1004d72a:	4a35      	ldr	r2, [pc, #212]	@ (1004d800 <EraseSmallDB+0x100>)
1004d72c:	18ba      	adds	r2, r7, r2
1004d72e:	6013      	str	r3, [r2, #0]
1004d730:	e04b      	b.n	1004d7ca <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004d732:	683b      	ldr	r3, [r7, #0]
1004d734:	6899      	ldr	r1, [r3, #8]
1004d736:	4c32      	ldr	r4, [pc, #200]	@ (1004d800 <EraseSmallDB+0x100>)
1004d738:	193b      	adds	r3, r7, r4
1004d73a:	681a      	ldr	r2, [r3, #0]
1004d73c:	0013      	movs	r3, r2
1004d73e:	005b      	lsls	r3, r3, #1
1004d740:	189b      	adds	r3, r3, r2
1004d742:	009b      	lsls	r3, r3, #2
1004d744:	18ca      	adds	r2, r1, r3
1004d746:	492f      	ldr	r1, [pc, #188]	@ (1004d804 <EraseSmallDB+0x104>)
1004d748:	187b      	adds	r3, r7, r1
1004d74a:	7812      	ldrb	r2, [r2, #0]
1004d74c:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
1004d74e:	187a      	adds	r2, r7, r1
1004d750:	4b2a      	ldr	r3, [pc, #168]	@ (1004d7fc <EraseSmallDB+0xfc>)
1004d752:	2083      	movs	r0, #131	@ 0x83
1004d754:	0100      	lsls	r0, r0, #4
1004d756:	181b      	adds	r3, r3, r0
1004d758:	19db      	adds	r3, r3, r7
1004d75a:	7812      	ldrb	r2, [r2, #0]
1004d75c:	781b      	ldrb	r3, [r3, #0]
1004d75e:	429a      	cmp	r2, r3
1004d760:	d02d      	beq.n	1004d7be <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
1004d762:	2514      	movs	r5, #20
1004d764:	197a      	adds	r2, r7, r5
1004d766:	187b      	adds	r3, r7, r1
1004d768:	781b      	ldrb	r3, [r3, #0]
1004d76a:	0011      	movs	r1, r2
1004d76c:	0018      	movs	r0, r3
1004d76e:	f000 fa6d 	bl	1004dc4c <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
1004d772:	683b      	ldr	r3, [r7, #0]
1004d774:	6899      	ldr	r1, [r3, #8]
1004d776:	193b      	adds	r3, r7, r4
1004d778:	681a      	ldr	r2, [r3, #0]
1004d77a:	0013      	movs	r3, r2
1004d77c:	005b      	lsls	r3, r3, #1
1004d77e:	189b      	adds	r3, r3, r2
1004d780:	009b      	lsls	r3, r3, #2
1004d782:	18cb      	adds	r3, r1, r3
1004d784:	685b      	ldr	r3, [r3, #4]
1004d786:	4c20      	ldr	r4, [pc, #128]	@ (1004d808 <EraseSmallDB+0x108>)
1004d788:	193a      	adds	r2, r7, r4
1004d78a:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
1004d78c:	260c      	movs	r6, #12
1004d78e:	19bb      	adds	r3, r7, r6
1004d790:	0018      	movs	r0, r3
1004d792:	f7ff fc55 	bl	1004d040 <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
1004d796:	2324      	movs	r3, #36	@ 0x24
1004d798:	18fa      	adds	r2, r7, r3
1004d79a:	193b      	adds	r3, r7, r4
1004d79c:	681b      	ldr	r3, [r3, #0]
1004d79e:	18d1      	adds	r1, r2, r3
1004d7a0:	193b      	adds	r3, r7, r4
1004d7a2:	681b      	ldr	r3, [r3, #0]
1004d7a4:	b29b      	uxth	r3, r3
1004d7a6:	2280      	movs	r2, #128	@ 0x80
1004d7a8:	0112      	lsls	r2, r2, #4
1004d7aa:	1ad3      	subs	r3, r2, r3
1004d7ac:	b29a      	uxth	r2, r3
1004d7ae:	2312      	movs	r3, #18
1004d7b0:	18fc      	adds	r4, r7, r3
1004d7b2:	1978      	adds	r0, r7, r5
1004d7b4:	19bb      	adds	r3, r7, r6
1004d7b6:	9300      	str	r3, [sp, #0]
1004d7b8:	0023      	movs	r3, r4
1004d7ba:	f7ff fc52 	bl	1004d062 <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004d7be:	4a10      	ldr	r2, [pc, #64]	@ (1004d800 <EraseSmallDB+0x100>)
1004d7c0:	18bb      	adds	r3, r7, r2
1004d7c2:	681b      	ldr	r3, [r3, #0]
1004d7c4:	3301      	adds	r3, #1
1004d7c6:	18ba      	adds	r2, r7, r2
1004d7c8:	6013      	str	r3, [r2, #0]
1004d7ca:	683b      	ldr	r3, [r7, #0]
1004d7cc:	791b      	ldrb	r3, [r3, #4]
1004d7ce:	001a      	movs	r2, r3
1004d7d0:	4b0b      	ldr	r3, [pc, #44]	@ (1004d800 <EraseSmallDB+0x100>)
1004d7d2:	18fb      	adds	r3, r7, r3
1004d7d4:	681b      	ldr	r3, [r3, #0]
1004d7d6:	4293      	cmp	r3, r2
1004d7d8:	dbab      	blt.n	1004d732 <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004d7da:	683b      	ldr	r3, [r7, #0]
1004d7dc:	681b      	ldr	r3, [r3, #0]
1004d7de:	2280      	movs	r2, #128	@ 0x80
1004d7e0:	0112      	lsls	r2, r2, #4
1004d7e2:	2124      	movs	r1, #36	@ 0x24
1004d7e4:	1879      	adds	r1, r7, r1
1004d7e6:	0018      	movs	r0, r3
1004d7e8:	f7ff fbea 	bl	1004cfc0 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004d7ec:	2300      	movs	r3, #0
}
1004d7ee:	0018      	movs	r0, r3
1004d7f0:	46bd      	mov	sp, r7
1004d7f2:	4b06      	ldr	r3, [pc, #24]	@ (1004d80c <EraseSmallDB+0x10c>)
1004d7f4:	449d      	add	sp, r3
1004d7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d7f8:	fffff7c4 	.word	0xfffff7c4
1004d7fc:	fffff7d7 	.word	0xfffff7d7
1004d800:	0000082c 	.word	0x0000082c
1004d804:	0000082b 	.word	0x0000082b
1004d808:	00000824 	.word	0x00000824
1004d80c:	00000834 	.word	0x00000834

1004d810 <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004d810:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d812:	b089      	sub	sp, #36	@ 0x24
1004d814:	af02      	add	r7, sp, #8
1004d816:	60f8      	str	r0, [r7, #12]
1004d818:	0008      	movs	r0, r1
1004d81a:	0011      	movs	r1, r2
1004d81c:	607b      	str	r3, [r7, #4]
1004d81e:	230b      	movs	r3, #11
1004d820:	18fb      	adds	r3, r7, r3
1004d822:	1c02      	adds	r2, r0, #0
1004d824:	701a      	strb	r2, [r3, #0]
1004d826:	2008      	movs	r0, #8
1004d828:	183b      	adds	r3, r7, r0
1004d82a:	1c0a      	adds	r2, r1, #0
1004d82c:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
1004d82e:	0001      	movs	r1, r0
1004d830:	187b      	adds	r3, r7, r1
1004d832:	881b      	ldrh	r3, [r3, #0]
1004d834:	3b01      	subs	r3, #1
1004d836:	b29b      	uxth	r3, r3
1004d838:	b21b      	sxth	r3, r3
1004d83a:	2203      	movs	r2, #3
1004d83c:	4313      	orrs	r3, r2
1004d83e:	b21b      	sxth	r3, r3
1004d840:	b29a      	uxth	r2, r3
1004d842:	187b      	adds	r3, r7, r1
1004d844:	3201      	adds	r2, #1
1004d846:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004d848:	68fb      	ldr	r3, [r7, #12]
1004d84a:	685b      	ldr	r3, [r3, #4]
1004d84c:	1d5a      	adds	r2, r3, #5
1004d84e:	68fb      	ldr	r3, [r7, #12]
1004d850:	689b      	ldr	r3, [r3, #8]
1004d852:	429a      	cmp	r2, r3
1004d854:	d310      	bcc.n	1004d878 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
1004d856:	68fb      	ldr	r3, [r7, #12]
1004d858:	781b      	ldrb	r3, [r3, #0]
1004d85a:	0019      	movs	r1, r3
1004d85c:	4a4a      	ldr	r2, [pc, #296]	@ (1004d988 <NVMDB_AppendRecordNoCache+0x178>)
1004d85e:	000b      	movs	r3, r1
1004d860:	009b      	lsls	r3, r3, #2
1004d862:	185b      	adds	r3, r3, r1
1004d864:	009b      	lsls	r3, r3, #2
1004d866:	18d3      	adds	r3, r2, r3
1004d868:	330a      	adds	r3, #10
1004d86a:	881b      	ldrh	r3, [r3, #0]
1004d86c:	2b00      	cmp	r3, #0
1004d86e:	d001      	beq.n	1004d874 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
1004d870:	230b      	movs	r3, #11
1004d872:	e084      	b.n	1004d97e <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
1004d874:	2302      	movs	r3, #2
1004d876:	e082      	b.n	1004d97e <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004d878:	68fb      	ldr	r3, [r7, #12]
1004d87a:	685b      	ldr	r3, [r3, #4]
1004d87c:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
1004d87e:	697b      	ldr	r3, [r7, #20]
1004d880:	781b      	ldrb	r3, [r3, #0]
1004d882:	2bff      	cmp	r3, #255	@ 0xff
1004d884:	d11c      	bne.n	1004d8c0 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
1004d886:	68fb      	ldr	r3, [r7, #12]
1004d888:	689a      	ldr	r2, [r3, #8]
1004d88a:	68fb      	ldr	r3, [r7, #12]
1004d88c:	685b      	ldr	r3, [r3, #4]
1004d88e:	1ad3      	subs	r3, r2, r3
1004d890:	2280      	movs	r2, #128	@ 0x80
1004d892:	0252      	lsls	r2, r2, #9
1004d894:	4293      	cmp	r3, r2
1004d896:	d300      	bcc.n	1004d89a <NVMDB_AppendRecordNoCache+0x8a>
1004d898:	4b3c      	ldr	r3, [pc, #240]	@ (1004d98c <NVMDB_AppendRecordNoCache+0x17c>)
1004d89a:	2112      	movs	r1, #18
1004d89c:	187a      	adds	r2, r7, r1
1004d89e:	8013      	strh	r3, [r2, #0]
      break;
1004d8a0:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
1004d8a2:	2308      	movs	r3, #8
1004d8a4:	0018      	movs	r0, r3
1004d8a6:	18fb      	adds	r3, r7, r3
1004d8a8:	881a      	ldrh	r2, [r3, #0]
1004d8aa:	2328      	movs	r3, #40	@ 0x28
1004d8ac:	181b      	adds	r3, r3, r0
1004d8ae:	19db      	adds	r3, r3, r7
1004d8b0:	881b      	ldrh	r3, [r3, #0]
1004d8b2:	18d3      	adds	r3, r2, r3
1004d8b4:	1cda      	adds	r2, r3, #3
1004d8b6:	187b      	adds	r3, r7, r1
1004d8b8:	881b      	ldrh	r3, [r3, #0]
1004d8ba:	429a      	cmp	r2, r3
1004d8bc:	db27      	blt.n	1004d90e <NVMDB_AppendRecordNoCache+0xfe>
1004d8be:	e015      	b.n	1004d8ec <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
1004d8c0:	697b      	ldr	r3, [r7, #20]
1004d8c2:	781b      	ldrb	r3, [r3, #0]
1004d8c4:	2bfe      	cmp	r3, #254	@ 0xfe
1004d8c6:	d005      	beq.n	1004d8d4 <NVMDB_AppendRecordNoCache+0xc4>
1004d8c8:	697b      	ldr	r3, [r7, #20]
1004d8ca:	781b      	ldrb	r3, [r3, #0]
1004d8cc:	2b00      	cmp	r3, #0
1004d8ce:	d001      	beq.n	1004d8d4 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
1004d8d0:	2303      	movs	r3, #3
1004d8d2:	e054      	b.n	1004d97e <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004d8d4:	68fb      	ldr	r3, [r7, #12]
1004d8d6:	685b      	ldr	r3, [r3, #4]
1004d8d8:	697a      	ldr	r2, [r7, #20]
1004d8da:	8852      	ldrh	r2, [r2, #2]
1004d8dc:	3203      	adds	r2, #3
1004d8de:	2103      	movs	r1, #3
1004d8e0:	430a      	orrs	r2, r1
1004d8e2:	189b      	adds	r3, r3, r2
1004d8e4:	1c5a      	adds	r2, r3, #1
1004d8e6:	68fb      	ldr	r3, [r7, #12]
1004d8e8:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004d8ea:	e7ad      	b.n	1004d848 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
1004d8ec:	68fb      	ldr	r3, [r7, #12]
1004d8ee:	781b      	ldrb	r3, [r3, #0]
1004d8f0:	0019      	movs	r1, r3
1004d8f2:	4a25      	ldr	r2, [pc, #148]	@ (1004d988 <NVMDB_AppendRecordNoCache+0x178>)
1004d8f4:	000b      	movs	r3, r1
1004d8f6:	009b      	lsls	r3, r3, #2
1004d8f8:	185b      	adds	r3, r3, r1
1004d8fa:	009b      	lsls	r3, r3, #2
1004d8fc:	18d3      	adds	r3, r2, r3
1004d8fe:	330a      	adds	r3, #10
1004d900:	881b      	ldrh	r3, [r3, #0]
1004d902:	2b00      	cmp	r3, #0
1004d904:	d001      	beq.n	1004d90a <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
1004d906:	230b      	movs	r3, #11
1004d908:	e039      	b.n	1004d97e <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
1004d90a:	2302      	movs	r3, #2
1004d90c:	e037      	b.n	1004d97e <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
1004d90e:	68fb      	ldr	r3, [r7, #12]
1004d910:	6858      	ldr	r0, [r3, #4]
1004d912:	2611      	movs	r6, #17
1004d914:	19bc      	adds	r4, r7, r6
1004d916:	687d      	ldr	r5, [r7, #4]
1004d918:	2308      	movs	r3, #8
1004d91a:	001a      	movs	r2, r3
1004d91c:	18fb      	adds	r3, r7, r3
1004d91e:	881b      	ldrh	r3, [r3, #0]
1004d920:	469c      	mov	ip, r3
1004d922:	230b      	movs	r3, #11
1004d924:	18fb      	adds	r3, r7, r3
1004d926:	7819      	ldrb	r1, [r3, #0]
1004d928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004d92a:	9301      	str	r3, [sp, #4]
1004d92c:	2328      	movs	r3, #40	@ 0x28
1004d92e:	189b      	adds	r3, r3, r2
1004d930:	19db      	adds	r3, r3, r7
1004d932:	881b      	ldrh	r3, [r3, #0]
1004d934:	9300      	str	r3, [sp, #0]
1004d936:	002b      	movs	r3, r5
1004d938:	4662      	mov	r2, ip
1004d93a:	f7ff f99c 	bl	1004cc76 <WriteRecord>
1004d93e:	0003      	movs	r3, r0
1004d940:	7023      	strb	r3, [r4, #0]
  if(status)
1004d942:	19bb      	adds	r3, r7, r6
1004d944:	781b      	ldrb	r3, [r3, #0]
1004d946:	2b00      	cmp	r3, #0
1004d948:	d002      	beq.n	1004d950 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
1004d94a:	19bb      	adds	r3, r7, r6
1004d94c:	781b      	ldrb	r3, [r3, #0]
1004d94e:	e016      	b.n	1004d97e <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
1004d950:	68fb      	ldr	r3, [r7, #12]
1004d952:	781b      	ldrb	r3, [r3, #0]
1004d954:	001a      	movs	r2, r3
1004d956:	490c      	ldr	r1, [pc, #48]	@ (1004d988 <NVMDB_AppendRecordNoCache+0x178>)
1004d958:	0013      	movs	r3, r2
1004d95a:	009b      	lsls	r3, r3, #2
1004d95c:	189b      	adds	r3, r3, r2
1004d95e:	009b      	lsls	r3, r3, #2
1004d960:	18cb      	adds	r3, r1, r3
1004d962:	3308      	adds	r3, #8
1004d964:	881b      	ldrh	r3, [r3, #0]
1004d966:	3301      	adds	r3, #1
1004d968:	b298      	uxth	r0, r3
1004d96a:	4907      	ldr	r1, [pc, #28]	@ (1004d988 <NVMDB_AppendRecordNoCache+0x178>)
1004d96c:	0013      	movs	r3, r2
1004d96e:	009b      	lsls	r3, r3, #2
1004d970:	189b      	adds	r3, r3, r2
1004d972:	009b      	lsls	r3, r3, #2
1004d974:	18cb      	adds	r3, r1, r3
1004d976:	3308      	adds	r3, #8
1004d978:	1c02      	adds	r2, r0, #0
1004d97a:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004d97c:	2300      	movs	r3, #0
}
1004d97e:	0018      	movs	r0, r3
1004d980:	46bd      	mov	sp, r7
1004d982:	b007      	add	sp, #28
1004d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d986:	46c0      	nop			@ (mov r8, r8)
1004d988:	20000d64 	.word	0x20000d64
1004d98c:	0000ffff 	.word	0x0000ffff

1004d990 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
1004d990:	b5b0      	push	{r4, r5, r7, lr}
1004d992:	b088      	sub	sp, #32
1004d994:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004d996:	2300      	movs	r3, #0
1004d998:	61fb      	str	r3, [r7, #28]
1004d99a:	e0cd      	b.n	1004db38 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
1004d99c:	49a8      	ldr	r1, [pc, #672]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004d99e:	69fa      	ldr	r2, [r7, #28]
1004d9a0:	0013      	movs	r3, r2
1004d9a2:	005b      	lsls	r3, r3, #1
1004d9a4:	189b      	adds	r3, r3, r2
1004d9a6:	009b      	lsls	r3, r3, #2
1004d9a8:	585b      	ldr	r3, [r3, r1]
1004d9aa:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004d9ac:	2300      	movs	r3, #0
1004d9ae:	61bb      	str	r3, [r7, #24]
1004d9b0:	e0b1      	b.n	1004db16 <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004d9b2:	49a3      	ldr	r1, [pc, #652]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004d9b4:	69fa      	ldr	r2, [r7, #28]
1004d9b6:	0013      	movs	r3, r2
1004d9b8:	005b      	lsls	r3, r3, #1
1004d9ba:	189b      	adds	r3, r3, r2
1004d9bc:	009b      	lsls	r3, r3, #2
1004d9be:	18cb      	adds	r3, r1, r3
1004d9c0:	3308      	adds	r3, #8
1004d9c2:	6819      	ldr	r1, [r3, #0]
1004d9c4:	69ba      	ldr	r2, [r7, #24]
1004d9c6:	0013      	movs	r3, r2
1004d9c8:	005b      	lsls	r3, r3, #1
1004d9ca:	189b      	adds	r3, r3, r2
1004d9cc:	009b      	lsls	r3, r3, #2
1004d9ce:	18ca      	adds	r2, r1, r3
1004d9d0:	2013      	movs	r0, #19
1004d9d2:	183b      	adds	r3, r7, r0
1004d9d4:	7812      	ldrb	r2, [r2, #0]
1004d9d6:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
1004d9d8:	4999      	ldr	r1, [pc, #612]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004d9da:	69fa      	ldr	r2, [r7, #28]
1004d9dc:	0013      	movs	r3, r2
1004d9de:	005b      	lsls	r3, r3, #1
1004d9e0:	189b      	adds	r3, r3, r2
1004d9e2:	009b      	lsls	r3, r3, #2
1004d9e4:	18cb      	adds	r3, r1, r3
1004d9e6:	3308      	adds	r3, #8
1004d9e8:	6819      	ldr	r1, [r3, #0]
1004d9ea:	69ba      	ldr	r2, [r7, #24]
1004d9ec:	0013      	movs	r3, r2
1004d9ee:	005b      	lsls	r3, r3, #1
1004d9f0:	189b      	adds	r3, r3, r2
1004d9f2:	009b      	lsls	r3, r3, #2
1004d9f4:	18cb      	adds	r3, r1, r3
1004d9f6:	685b      	ldr	r3, [r3, #4]
1004d9f8:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
1004d9fa:	4991      	ldr	r1, [pc, #580]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004d9fc:	69fa      	ldr	r2, [r7, #28]
1004d9fe:	0013      	movs	r3, r2
1004da00:	005b      	lsls	r3, r3, #1
1004da02:	189b      	adds	r3, r3, r2
1004da04:	009b      	lsls	r3, r3, #2
1004da06:	18cb      	adds	r3, r1, r3
1004da08:	3308      	adds	r3, #8
1004da0a:	6819      	ldr	r1, [r3, #0]
1004da0c:	69ba      	ldr	r2, [r7, #24]
1004da0e:	0013      	movs	r3, r2
1004da10:	005b      	lsls	r3, r3, #1
1004da12:	189b      	adds	r3, r3, r2
1004da14:	009b      	lsls	r3, r3, #2
1004da16:	18ca      	adds	r2, r1, r3
1004da18:	1dbb      	adds	r3, r7, #6
1004da1a:	8912      	ldrh	r2, [r2, #8]
1004da1c:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
1004da1e:	183b      	adds	r3, r7, r0
1004da20:	781a      	ldrb	r2, [r3, #0]
1004da22:	4988      	ldr	r1, [pc, #544]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004da24:	0013      	movs	r3, r2
1004da26:	009b      	lsls	r3, r3, #2
1004da28:	189b      	adds	r3, r3, r2
1004da2a:	009b      	lsls	r3, r3, #2
1004da2c:	585b      	ldr	r3, [r3, r1]
1004da2e:	2b00      	cmp	r3, #0
1004da30:	d103      	bne.n	1004da3a <NVMDB_Init+0xaa>
1004da32:	183b      	adds	r3, r7, r0
1004da34:	781b      	ldrb	r3, [r3, #0]
1004da36:	2b01      	cmp	r3, #1
1004da38:	d901      	bls.n	1004da3e <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
1004da3a:	2301      	movs	r3, #1
1004da3c:	e0fc      	b.n	1004dc38 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
1004da3e:	2413      	movs	r4, #19
1004da40:	193b      	adds	r3, r7, r4
1004da42:	781a      	ldrb	r2, [r3, #0]
1004da44:	68f9      	ldr	r1, [r7, #12]
1004da46:	68bb      	ldr	r3, [r7, #8]
1004da48:	18c8      	adds	r0, r1, r3
1004da4a:	497e      	ldr	r1, [pc, #504]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004da4c:	0013      	movs	r3, r2
1004da4e:	009b      	lsls	r3, r3, #2
1004da50:	189b      	adds	r3, r3, r2
1004da52:	009b      	lsls	r3, r3, #2
1004da54:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
1004da56:	497a      	ldr	r1, [pc, #488]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004da58:	69fa      	ldr	r2, [r7, #28]
1004da5a:	0013      	movs	r3, r2
1004da5c:	005b      	lsls	r3, r3, #1
1004da5e:	189b      	adds	r3, r3, r2
1004da60:	009b      	lsls	r3, r3, #2
1004da62:	18cb      	adds	r3, r1, r3
1004da64:	3304      	adds	r3, #4
1004da66:	781b      	ldrb	r3, [r3, #0]
1004da68:	3b01      	subs	r3, #1
1004da6a:	69ba      	ldr	r2, [r7, #24]
1004da6c:	429a      	cmp	r2, r3
1004da6e:	d10e      	bne.n	1004da8e <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
1004da70:	193b      	adds	r3, r7, r4
1004da72:	781a      	ldrb	r2, [r3, #0]
1004da74:	68fb      	ldr	r3, [r7, #12]
1004da76:	2180      	movs	r1, #128	@ 0x80
1004da78:	0109      	lsls	r1, r1, #4
1004da7a:	1859      	adds	r1, r3, r1
1004da7c:	4871      	ldr	r0, [pc, #452]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004da7e:	0013      	movs	r3, r2
1004da80:	009b      	lsls	r3, r3, #2
1004da82:	189b      	adds	r3, r3, r2
1004da84:	009b      	lsls	r3, r3, #2
1004da86:	18c3      	adds	r3, r0, r3
1004da88:	3304      	adds	r3, #4
1004da8a:	6019      	str	r1, [r3, #0]
1004da8c:	e01d      	b.n	1004daca <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
1004da8e:	496c      	ldr	r1, [pc, #432]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004da90:	69fa      	ldr	r2, [r7, #28]
1004da92:	0013      	movs	r3, r2
1004da94:	005b      	lsls	r3, r3, #1
1004da96:	189b      	adds	r3, r3, r2
1004da98:	009b      	lsls	r3, r3, #2
1004da9a:	18cb      	adds	r3, r1, r3
1004da9c:	3308      	adds	r3, #8
1004da9e:	6819      	ldr	r1, [r3, #0]
1004daa0:	69bb      	ldr	r3, [r7, #24]
1004daa2:	1c5a      	adds	r2, r3, #1
1004daa4:	0013      	movs	r3, r2
1004daa6:	005b      	lsls	r3, r3, #1
1004daa8:	189b      	adds	r3, r3, r2
1004daaa:	009b      	lsls	r3, r3, #2
1004daac:	18cb      	adds	r3, r1, r3
1004daae:	6859      	ldr	r1, [r3, #4]
1004dab0:	2313      	movs	r3, #19
1004dab2:	18fb      	adds	r3, r7, r3
1004dab4:	781a      	ldrb	r2, [r3, #0]
1004dab6:	68fb      	ldr	r3, [r7, #12]
1004dab8:	18c9      	adds	r1, r1, r3
1004daba:	4862      	ldr	r0, [pc, #392]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004dabc:	0013      	movs	r3, r2
1004dabe:	009b      	lsls	r3, r3, #2
1004dac0:	189b      	adds	r3, r3, r2
1004dac2:	009b      	lsls	r3, r3, #2
1004dac4:	18c3      	adds	r3, r0, r3
1004dac6:	3304      	adds	r3, #4
1004dac8:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
1004daca:	2013      	movs	r0, #19
1004dacc:	183b      	adds	r3, r7, r0
1004dace:	781a      	ldrb	r2, [r3, #0]
1004dad0:	495c      	ldr	r1, [pc, #368]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004dad2:	0013      	movs	r3, r2
1004dad4:	009b      	lsls	r3, r3, #2
1004dad6:	189b      	adds	r3, r3, r2
1004dad8:	009b      	lsls	r3, r3, #2
1004dada:	18cb      	adds	r3, r1, r3
1004dadc:	3310      	adds	r3, #16
1004dade:	1dba      	adds	r2, r7, #6
1004dae0:	8812      	ldrh	r2, [r2, #0]
1004dae2:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
1004dae4:	183b      	adds	r3, r7, r0
1004dae6:	781a      	ldrb	r2, [r3, #0]
1004dae8:	0013      	movs	r3, r2
1004daea:	009b      	lsls	r3, r3, #2
1004daec:	189b      	adds	r3, r3, r2
1004daee:	009b      	lsls	r3, r3, #2
1004daf0:	4a54      	ldr	r2, [pc, #336]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004daf2:	189b      	adds	r3, r3, r2
1004daf4:	2512      	movs	r5, #18
1004daf6:	197c      	adds	r4, r7, r5
1004daf8:	0018      	movs	r0, r3
1004dafa:	f7fe ff3b 	bl	1004c974 <NVMDB_get_info>
1004dafe:	0003      	movs	r3, r0
1004db00:	7023      	strb	r3, [r4, #0]
      if(status)
1004db02:	197b      	adds	r3, r7, r5
1004db04:	781b      	ldrb	r3, [r3, #0]
1004db06:	2b00      	cmp	r3, #0
1004db08:	d002      	beq.n	1004db10 <NVMDB_Init+0x180>
      {
        return status;
1004db0a:	197b      	adds	r3, r7, r5
1004db0c:	781b      	ldrb	r3, [r3, #0]
1004db0e:	e093      	b.n	1004dc38 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004db10:	69bb      	ldr	r3, [r7, #24]
1004db12:	3301      	adds	r3, #1
1004db14:	61bb      	str	r3, [r7, #24]
1004db16:	494a      	ldr	r1, [pc, #296]	@ (1004dc40 <NVMDB_Init+0x2b0>)
1004db18:	69fa      	ldr	r2, [r7, #28]
1004db1a:	0013      	movs	r3, r2
1004db1c:	005b      	lsls	r3, r3, #1
1004db1e:	189b      	adds	r3, r3, r2
1004db20:	009b      	lsls	r3, r3, #2
1004db22:	18cb      	adds	r3, r1, r3
1004db24:	3304      	adds	r3, #4
1004db26:	781b      	ldrb	r3, [r3, #0]
1004db28:	001a      	movs	r2, r3
1004db2a:	69bb      	ldr	r3, [r7, #24]
1004db2c:	4293      	cmp	r3, r2
1004db2e:	da00      	bge.n	1004db32 <NVMDB_Init+0x1a2>
1004db30:	e73f      	b.n	1004d9b2 <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004db32:	69fb      	ldr	r3, [r7, #28]
1004db34:	3301      	adds	r3, #1
1004db36:	61fb      	str	r3, [r7, #28]
1004db38:	69fb      	ldr	r3, [r7, #28]
1004db3a:	2b00      	cmp	r3, #0
1004db3c:	da00      	bge.n	1004db40 <NVMDB_Init+0x1b0>
1004db3e:	e72d      	b.n	1004d99c <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004db40:	2300      	movs	r3, #0
1004db42:	617b      	str	r3, [r7, #20]
1004db44:	e074      	b.n	1004dc30 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004db46:	2413      	movs	r4, #19
1004db48:	1939      	adds	r1, r7, r4
1004db4a:	483f      	ldr	r0, [pc, #252]	@ (1004dc48 <NVMDB_Init+0x2b8>)
1004db4c:	697a      	ldr	r2, [r7, #20]
1004db4e:	0013      	movs	r3, r2
1004db50:	005b      	lsls	r3, r3, #1
1004db52:	189b      	adds	r3, r3, r2
1004db54:	009b      	lsls	r3, r3, #2
1004db56:	18c3      	adds	r3, r0, r3
1004db58:	3306      	adds	r3, #6
1004db5a:	781b      	ldrb	r3, [r3, #0]
1004db5c:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
1004db5e:	193b      	adds	r3, r7, r4
1004db60:	781a      	ldrb	r2, [r3, #0]
1004db62:	4938      	ldr	r1, [pc, #224]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004db64:	0013      	movs	r3, r2
1004db66:	009b      	lsls	r3, r3, #2
1004db68:	189b      	adds	r3, r3, r2
1004db6a:	009b      	lsls	r3, r3, #2
1004db6c:	585b      	ldr	r3, [r3, r1]
1004db6e:	2b00      	cmp	r3, #0
1004db70:	d103      	bne.n	1004db7a <NVMDB_Init+0x1ea>
1004db72:	193b      	adds	r3, r7, r4
1004db74:	781b      	ldrb	r3, [r3, #0]
1004db76:	2b01      	cmp	r3, #1
1004db78:	d901      	bls.n	1004db7e <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1004db7a:	2301      	movs	r3, #1
1004db7c:	e05c      	b.n	1004dc38 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
1004db7e:	2413      	movs	r4, #19
1004db80:	193b      	adds	r3, r7, r4
1004db82:	781a      	ldrb	r2, [r3, #0]
1004db84:	4830      	ldr	r0, [pc, #192]	@ (1004dc48 <NVMDB_Init+0x2b8>)
1004db86:	6979      	ldr	r1, [r7, #20]
1004db88:	000b      	movs	r3, r1
1004db8a:	005b      	lsls	r3, r3, #1
1004db8c:	185b      	adds	r3, r3, r1
1004db8e:	009b      	lsls	r3, r3, #2
1004db90:	5818      	ldr	r0, [r3, r0]
1004db92:	492c      	ldr	r1, [pc, #176]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004db94:	0013      	movs	r3, r2
1004db96:	009b      	lsls	r3, r3, #2
1004db98:	189b      	adds	r3, r3, r2
1004db9a:	009b      	lsls	r3, r3, #2
1004db9c:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
1004db9e:	492a      	ldr	r1, [pc, #168]	@ (1004dc48 <NVMDB_Init+0x2b8>)
1004dba0:	697a      	ldr	r2, [r7, #20]
1004dba2:	0013      	movs	r3, r2
1004dba4:	005b      	lsls	r3, r3, #1
1004dba6:	189b      	adds	r3, r3, r2
1004dba8:	009b      	lsls	r3, r3, #2
1004dbaa:	5859      	ldr	r1, [r3, r1]
1004dbac:	4826      	ldr	r0, [pc, #152]	@ (1004dc48 <NVMDB_Init+0x2b8>)
1004dbae:	697a      	ldr	r2, [r7, #20]
1004dbb0:	0013      	movs	r3, r2
1004dbb2:	005b      	lsls	r3, r3, #1
1004dbb4:	189b      	adds	r3, r3, r2
1004dbb6:	009b      	lsls	r3, r3, #2
1004dbb8:	18c3      	adds	r3, r0, r3
1004dbba:	3304      	adds	r3, #4
1004dbbc:	881b      	ldrh	r3, [r3, #0]
1004dbbe:	0018      	movs	r0, r3
1004dbc0:	193b      	adds	r3, r7, r4
1004dbc2:	781a      	ldrb	r2, [r3, #0]
1004dbc4:	1809      	adds	r1, r1, r0
1004dbc6:	481f      	ldr	r0, [pc, #124]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004dbc8:	0013      	movs	r3, r2
1004dbca:	009b      	lsls	r3, r3, #2
1004dbcc:	189b      	adds	r3, r3, r2
1004dbce:	009b      	lsls	r3, r3, #2
1004dbd0:	18c3      	adds	r3, r0, r3
1004dbd2:	3304      	adds	r3, #4
1004dbd4:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1004dbd6:	193b      	adds	r3, r7, r4
1004dbd8:	781a      	ldrb	r2, [r3, #0]
1004dbda:	481b      	ldr	r0, [pc, #108]	@ (1004dc48 <NVMDB_Init+0x2b8>)
1004dbdc:	6979      	ldr	r1, [r7, #20]
1004dbde:	000b      	movs	r3, r1
1004dbe0:	005b      	lsls	r3, r3, #1
1004dbe2:	185b      	adds	r3, r3, r1
1004dbe4:	009b      	lsls	r3, r3, #2
1004dbe6:	18c3      	adds	r3, r0, r3
1004dbe8:	3308      	adds	r3, #8
1004dbea:	8818      	ldrh	r0, [r3, #0]
1004dbec:	4915      	ldr	r1, [pc, #84]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004dbee:	0013      	movs	r3, r2
1004dbf0:	009b      	lsls	r3, r3, #2
1004dbf2:	189b      	adds	r3, r3, r2
1004dbf4:	009b      	lsls	r3, r3, #2
1004dbf6:	18cb      	adds	r3, r1, r3
1004dbf8:	3310      	adds	r3, #16
1004dbfa:	1c02      	adds	r2, r0, #0
1004dbfc:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
1004dbfe:	193b      	adds	r3, r7, r4
1004dc00:	781a      	ldrb	r2, [r3, #0]
1004dc02:	0013      	movs	r3, r2
1004dc04:	009b      	lsls	r3, r3, #2
1004dc06:	189b      	adds	r3, r3, r2
1004dc08:	009b      	lsls	r3, r3, #2
1004dc0a:	4a0e      	ldr	r2, [pc, #56]	@ (1004dc44 <NVMDB_Init+0x2b4>)
1004dc0c:	189b      	adds	r3, r3, r2
1004dc0e:	2512      	movs	r5, #18
1004dc10:	197c      	adds	r4, r7, r5
1004dc12:	0018      	movs	r0, r3
1004dc14:	f7fe feae 	bl	1004c974 <NVMDB_get_info>
1004dc18:	0003      	movs	r3, r0
1004dc1a:	7023      	strb	r3, [r4, #0]
    if(status)
1004dc1c:	197b      	adds	r3, r7, r5
1004dc1e:	781b      	ldrb	r3, [r3, #0]
1004dc20:	2b00      	cmp	r3, #0
1004dc22:	d002      	beq.n	1004dc2a <NVMDB_Init+0x29a>
    {
      return status;
1004dc24:	197b      	adds	r3, r7, r5
1004dc26:	781b      	ldrb	r3, [r3, #0]
1004dc28:	e006      	b.n	1004dc38 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004dc2a:	697b      	ldr	r3, [r7, #20]
1004dc2c:	3301      	adds	r3, #1
1004dc2e:	617b      	str	r3, [r7, #20]
1004dc30:	697b      	ldr	r3, [r7, #20]
1004dc32:	2b01      	cmp	r3, #1
1004dc34:	dd87      	ble.n	1004db46 <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
1004dc36:	2300      	movs	r3, #0
}
1004dc38:	0018      	movs	r0, r3
1004dc3a:	46bd      	mov	sp, r7
1004dc3c:	b008      	add	sp, #32
1004dc3e:	bdb0      	pop	{r4, r5, r7, pc}
1004dc40:	20000d90 	.word	0x20000d90
1004dc44:	20000d64 	.word	0x20000d64
1004dc48:	10065d54 	.word	0x10065d54

1004dc4c <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
1004dc4c:	b580      	push	{r7, lr}
1004dc4e:	b082      	sub	sp, #8
1004dc50:	af00      	add	r7, sp, #0
1004dc52:	0002      	movs	r2, r0
1004dc54:	6039      	str	r1, [r7, #0]
1004dc56:	1dfb      	adds	r3, r7, #7
1004dc58:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
1004dc5a:	1dfb      	adds	r3, r7, #7
1004dc5c:	781b      	ldrb	r3, [r3, #0]
1004dc5e:	2b01      	cmp	r3, #1
1004dc60:	d901      	bls.n	1004dc66 <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
1004dc62:	2301      	movs	r3, #1
1004dc64:	e020      	b.n	1004dca8 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1004dc66:	1dfb      	adds	r3, r7, #7
1004dc68:	781a      	ldrb	r2, [r3, #0]
1004dc6a:	4911      	ldr	r1, [pc, #68]	@ (1004dcb0 <NVMDB_HandleInit+0x64>)
1004dc6c:	0013      	movs	r3, r2
1004dc6e:	009b      	lsls	r3, r3, #2
1004dc70:	189b      	adds	r3, r3, r2
1004dc72:	009b      	lsls	r3, r3, #2
1004dc74:	585a      	ldr	r2, [r3, r1]
1004dc76:	683b      	ldr	r3, [r7, #0]
1004dc78:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
1004dc7a:	1dfb      	adds	r3, r7, #7
1004dc7c:	781a      	ldrb	r2, [r3, #0]
1004dc7e:	490c      	ldr	r1, [pc, #48]	@ (1004dcb0 <NVMDB_HandleInit+0x64>)
1004dc80:	0013      	movs	r3, r2
1004dc82:	009b      	lsls	r3, r3, #2
1004dc84:	189b      	adds	r3, r3, r2
1004dc86:	009b      	lsls	r3, r3, #2
1004dc88:	18cb      	adds	r3, r1, r3
1004dc8a:	3304      	adds	r3, #4
1004dc8c:	681a      	ldr	r2, [r3, #0]
1004dc8e:	683b      	ldr	r3, [r7, #0]
1004dc90:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004dc92:	683b      	ldr	r3, [r7, #0]
1004dc94:	2201      	movs	r2, #1
1004dc96:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
1004dc98:	683b      	ldr	r3, [r7, #0]
1004dc9a:	1dfa      	adds	r2, r7, #7
1004dc9c:	7812      	ldrb	r2, [r2, #0]
1004dc9e:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
1004dca0:	683b      	ldr	r3, [r7, #0]
1004dca2:	2200      	movs	r2, #0
1004dca4:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004dca6:	2300      	movs	r3, #0
}
1004dca8:	0018      	movs	r0, r3
1004dcaa:	46bd      	mov	sp, r7
1004dcac:	b002      	add	sp, #8
1004dcae:	bd80      	pop	{r7, pc}
1004dcb0:	20000d64 	.word	0x20000d64

1004dcb4 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004dcb4:	b590      	push	{r4, r7, lr}
1004dcb6:	b089      	sub	sp, #36	@ 0x24
1004dcb8:	af04      	add	r7, sp, #16
1004dcba:	60f8      	str	r0, [r7, #12]
1004dcbc:	0008      	movs	r0, r1
1004dcbe:	0011      	movs	r1, r2
1004dcc0:	607b      	str	r3, [r7, #4]
1004dcc2:	230b      	movs	r3, #11
1004dcc4:	18fb      	adds	r3, r7, r3
1004dcc6:	1c02      	adds	r2, r0, #0
1004dcc8:	701a      	strb	r2, [r3, #0]
1004dcca:	2308      	movs	r3, #8
1004dccc:	18fb      	adds	r3, r7, r3
1004dcce:	1c0a      	adds	r2, r1, #0
1004dcd0:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004dcd2:	68fb      	ldr	r3, [r7, #12]
1004dcd4:	781b      	ldrb	r3, [r3, #0]
1004dcd6:	0019      	movs	r1, r3
1004dcd8:	4a12      	ldr	r2, [pc, #72]	@ (1004dd24 <NVMDB_ReadNextRecord+0x70>)
1004dcda:	000b      	movs	r3, r1
1004dcdc:	009b      	lsls	r3, r3, #2
1004dcde:	185b      	adds	r3, r3, r1
1004dce0:	009b      	lsls	r3, r3, #2
1004dce2:	18d3      	adds	r3, r2, r3
1004dce4:	330e      	adds	r3, #14
1004dce6:	781b      	ldrb	r3, [r3, #0]
1004dce8:	2b00      	cmp	r3, #0
1004dcea:	d001      	beq.n	1004dcf0 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004dcec:	230a      	movs	r3, #10
1004dcee:	e015      	b.n	1004dd1c <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
1004dcf0:	687c      	ldr	r4, [r7, #4]
1004dcf2:	2308      	movs	r3, #8
1004dcf4:	18fb      	adds	r3, r7, r3
1004dcf6:	881a      	ldrh	r2, [r3, #0]
1004dcf8:	230b      	movs	r3, #11
1004dcfa:	18fb      	adds	r3, r7, r3
1004dcfc:	7819      	ldrb	r1, [r3, #0]
1004dcfe:	68f8      	ldr	r0, [r7, #12]
1004dd00:	2300      	movs	r3, #0
1004dd02:	9303      	str	r3, [sp, #12]
1004dd04:	2300      	movs	r3, #0
1004dd06:	9302      	str	r3, [sp, #8]
1004dd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd0a:	9301      	str	r3, [sp, #4]
1004dd0c:	2320      	movs	r3, #32
1004dd0e:	18fb      	adds	r3, r7, r3
1004dd10:	881b      	ldrh	r3, [r3, #0]
1004dd12:	9300      	str	r3, [sp, #0]
1004dd14:	0023      	movs	r3, r4
1004dd16:	f7fe fef9 	bl	1004cb0c <ReadNextRecordNoLock>
1004dd1a:	0003      	movs	r3, r0
}
1004dd1c:	0018      	movs	r0, r3
1004dd1e:	46bd      	mov	sp, r7
1004dd20:	b005      	add	sp, #20
1004dd22:	bd90      	pop	{r4, r7, pc}
1004dd24:	20000d64 	.word	0x20000d64

1004dd28 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004dd28:	b590      	push	{r4, r7, lr}
1004dd2a:	b087      	sub	sp, #28
1004dd2c:	af02      	add	r7, sp, #8
1004dd2e:	60f8      	str	r0, [r7, #12]
1004dd30:	0008      	movs	r0, r1
1004dd32:	607a      	str	r2, [r7, #4]
1004dd34:	0019      	movs	r1, r3
1004dd36:	230a      	movs	r3, #10
1004dd38:	18fb      	adds	r3, r7, r3
1004dd3a:	1c02      	adds	r2, r0, #0
1004dd3c:	801a      	strh	r2, [r3, #0]
1004dd3e:	2308      	movs	r3, #8
1004dd40:	18fb      	adds	r3, r7, r3
1004dd42:	1c0a      	adds	r2, r1, #0
1004dd44:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004dd46:	68fb      	ldr	r3, [r7, #12]
1004dd48:	781b      	ldrb	r3, [r3, #0]
1004dd4a:	0019      	movs	r1, r3
1004dd4c:	4a0f      	ldr	r2, [pc, #60]	@ (1004dd8c <NVMDB_ReadCurrentRecord+0x64>)
1004dd4e:	000b      	movs	r3, r1
1004dd50:	009b      	lsls	r3, r3, #2
1004dd52:	185b      	adds	r3, r3, r1
1004dd54:	009b      	lsls	r3, r3, #2
1004dd56:	18d3      	adds	r3, r2, r3
1004dd58:	330e      	adds	r3, #14
1004dd5a:	781b      	ldrb	r3, [r3, #0]
1004dd5c:	2b00      	cmp	r3, #0
1004dd5e:	d001      	beq.n	1004dd64 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004dd60:	230a      	movs	r3, #10
1004dd62:	e00f      	b.n	1004dd84 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
1004dd64:	2308      	movs	r3, #8
1004dd66:	18fb      	adds	r3, r7, r3
1004dd68:	881c      	ldrh	r4, [r3, #0]
1004dd6a:	687a      	ldr	r2, [r7, #4]
1004dd6c:	230a      	movs	r3, #10
1004dd6e:	18fb      	adds	r3, r7, r3
1004dd70:	8819      	ldrh	r1, [r3, #0]
1004dd72:	68f8      	ldr	r0, [r7, #12]
1004dd74:	2300      	movs	r3, #0
1004dd76:	9301      	str	r3, [sp, #4]
1004dd78:	6a3b      	ldr	r3, [r7, #32]
1004dd7a:	9300      	str	r3, [sp, #0]
1004dd7c:	0023      	movs	r3, r4
1004dd7e:	f7ff f81c 	bl	1004cdba <ReadCurrentRecordNoLock>
1004dd82:	0003      	movs	r3, r0
}
1004dd84:	0018      	movs	r0, r3
1004dd86:	46bd      	mov	sp, r7
1004dd88:	b005      	add	sp, #20
1004dd8a:	bd90      	pop	{r4, r7, pc}
1004dd8c:	20000d64 	.word	0x20000d64

1004dd90 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
1004dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
1004dd92:	46c6      	mov	lr, r8
1004dd94:	b500      	push	{lr}
1004dd96:	b088      	sub	sp, #32
1004dd98:	af02      	add	r7, sp, #8
1004dd9a:	60f8      	str	r0, [r7, #12]
1004dd9c:	0008      	movs	r0, r1
1004dd9e:	0011      	movs	r1, r2
1004dda0:	607b      	str	r3, [r7, #4]
1004dda2:	230b      	movs	r3, #11
1004dda4:	001c      	movs	r4, r3
1004dda6:	18fb      	adds	r3, r7, r3
1004dda8:	1c02      	adds	r2, r0, #0
1004ddaa:	701a      	strb	r2, [r3, #0]
1004ddac:	2008      	movs	r0, #8
1004ddae:	183b      	adds	r3, r7, r0
1004ddb0:	1c0a      	adds	r2, r1, #0
1004ddb2:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
1004ddb4:	2617      	movs	r6, #23
1004ddb6:	46b0      	mov	r8, r6
1004ddb8:	44b8      	add	r8, r7
1004ddba:	687d      	ldr	r5, [r7, #4]
1004ddbc:	183b      	adds	r3, r7, r0
1004ddbe:	881a      	ldrh	r2, [r3, #0]
1004ddc0:	0023      	movs	r3, r4
1004ddc2:	18fb      	adds	r3, r7, r3
1004ddc4:	7819      	ldrb	r1, [r3, #0]
1004ddc6:	68f8      	ldr	r0, [r7, #12]
1004ddc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ddca:	9301      	str	r3, [sp, #4]
1004ddcc:	2328      	movs	r3, #40	@ 0x28
1004ddce:	2408      	movs	r4, #8
1004ddd0:	191b      	adds	r3, r3, r4
1004ddd2:	19db      	adds	r3, r3, r7
1004ddd4:	881b      	ldrh	r3, [r3, #0]
1004ddd6:	9300      	str	r3, [sp, #0]
1004ddd8:	002b      	movs	r3, r5
1004ddda:	f7ff fd19 	bl	1004d810 <NVMDB_AppendRecordNoCache>
1004ddde:	0003      	movs	r3, r0
1004dde0:	4642      	mov	r2, r8
1004dde2:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
1004dde4:	19bb      	adds	r3, r7, r6
1004dde6:	781b      	ldrb	r3, [r3, #0]
1004dde8:	2b00      	cmp	r3, #0
1004ddea:	d002      	beq.n	1004ddf2 <NVMDB_AppendRecord+0x62>
  {
    return status;
1004ddec:	19bb      	adds	r3, r7, r6
1004ddee:	781b      	ldrb	r3, [r3, #0]
1004ddf0:	e02c      	b.n	1004de4c <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
1004ddf2:	68fb      	ldr	r3, [r7, #12]
1004ddf4:	781b      	ldrb	r3, [r3, #0]
1004ddf6:	0019      	movs	r1, r3
1004ddf8:	4a17      	ldr	r2, [pc, #92]	@ (1004de58 <NVMDB_AppendRecord+0xc8>)
1004ddfa:	000b      	movs	r3, r1
1004ddfc:	009b      	lsls	r3, r3, #2
1004ddfe:	185b      	adds	r3, r3, r1
1004de00:	009b      	lsls	r3, r3, #2
1004de02:	18d3      	adds	r3, r2, r3
1004de04:	330c      	adds	r3, #12
1004de06:	881a      	ldrh	r2, [r3, #0]
1004de08:	2308      	movs	r3, #8
1004de0a:	0018      	movs	r0, r3
1004de0c:	18f9      	adds	r1, r7, r3
1004de0e:	2328      	movs	r3, #40	@ 0x28
1004de10:	181b      	adds	r3, r3, r0
1004de12:	19db      	adds	r3, r3, r7
1004de14:	8809      	ldrh	r1, [r1, #0]
1004de16:	881b      	ldrh	r3, [r3, #0]
1004de18:	18cb      	adds	r3, r1, r3
1004de1a:	b29b      	uxth	r3, r3
1004de1c:	3b01      	subs	r3, #1
1004de1e:	b29b      	uxth	r3, r3
1004de20:	b21b      	sxth	r3, r3
1004de22:	2103      	movs	r1, #3
1004de24:	430b      	orrs	r3, r1
1004de26:	b21b      	sxth	r3, r3
1004de28:	b29b      	uxth	r3, r3
1004de2a:	1ad3      	subs	r3, r2, r3
1004de2c:	b29b      	uxth	r3, r3
1004de2e:	68fa      	ldr	r2, [r7, #12]
1004de30:	7812      	ldrb	r2, [r2, #0]
1004de32:	0011      	movs	r1, r2
1004de34:	3b05      	subs	r3, #5
1004de36:	b298      	uxth	r0, r3
1004de38:	4a07      	ldr	r2, [pc, #28]	@ (1004de58 <NVMDB_AppendRecord+0xc8>)
1004de3a:	000b      	movs	r3, r1
1004de3c:	009b      	lsls	r3, r3, #2
1004de3e:	185b      	adds	r3, r3, r1
1004de40:	009b      	lsls	r3, r3, #2
1004de42:	18d3      	adds	r3, r2, r3
1004de44:	330c      	adds	r3, #12
1004de46:	1c02      	adds	r2, r0, #0
1004de48:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004de4a:	2300      	movs	r3, #0
}
1004de4c:	0018      	movs	r0, r3
1004de4e:	46bd      	mov	sp, r7
1004de50:	b006      	add	sp, #24
1004de52:	bc80      	pop	{r7}
1004de54:	46b8      	mov	r8, r7
1004de56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004de58:	20000d64 	.word	0x20000d64

1004de5c <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
1004de5c:	b580      	push	{r7, lr}
1004de5e:	b082      	sub	sp, #8
1004de60:	af00      	add	r7, sp, #0
1004de62:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
1004de64:	687b      	ldr	r3, [r7, #4]
1004de66:	0018      	movs	r0, r3
1004de68:	f7ff f828 	bl	1004cebc <NVMDB_DeleteRecordNoCache>
1004de6c:	0003      	movs	r3, r0

#endif
}
1004de6e:	0018      	movs	r0, r3
1004de70:	46bd      	mov	sp, r7
1004de72:	b002      	add	sp, #8
1004de74:	bd80      	pop	{r7, pc}
	...

1004de78 <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
1004de78:	b5b0      	push	{r4, r5, r7, lr}
1004de7a:	b08c      	sub	sp, #48	@ 0x30
1004de7c:	af00      	add	r7, sp, #0
1004de7e:	0002      	movs	r2, r0
1004de80:	1dfb      	adds	r3, r7, #7
1004de82:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
1004de84:	252b      	movs	r5, #43	@ 0x2b
1004de86:	197c      	adds	r4, r7, r5
1004de88:	2318      	movs	r3, #24
1004de8a:	18fa      	adds	r2, r7, r3
1004de8c:	1dfb      	adds	r3, r7, #7
1004de8e:	781b      	ldrb	r3, [r3, #0]
1004de90:	0011      	movs	r1, r2
1004de92:	0018      	movs	r0, r3
1004de94:	f7ff fbc6 	bl	1004d624 <GetDBType>
1004de98:	0003      	movs	r3, r0
1004de9a:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
1004de9c:	197b      	adds	r3, r7, r5
1004de9e:	781b      	ldrb	r3, [r3, #0]
1004dea0:	2b02      	cmp	r3, #2
1004dea2:	d146      	bne.n	1004df32 <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
1004dea4:	1dfb      	adds	r3, r7, #7
1004dea6:	781a      	ldrb	r2, [r3, #0]
1004dea8:	4942      	ldr	r1, [pc, #264]	@ (1004dfb4 <NVMDB_Erase+0x13c>)
1004deaa:	0013      	movs	r3, r2
1004deac:	009b      	lsls	r3, r3, #2
1004deae:	189b      	adds	r3, r3, r2
1004deb0:	009b      	lsls	r3, r3, #2
1004deb2:	585b      	ldr	r3, [r3, r1]
1004deb4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
1004deb6:	1dfb      	adds	r3, r7, #7
1004deb8:	781a      	ldrb	r2, [r3, #0]
1004deba:	493e      	ldr	r1, [pc, #248]	@ (1004dfb4 <NVMDB_Erase+0x13c>)
1004debc:	0013      	movs	r3, r2
1004debe:	009b      	lsls	r3, r3, #2
1004dec0:	189b      	adds	r3, r3, r2
1004dec2:	009b      	lsls	r3, r3, #2
1004dec4:	18cb      	adds	r3, r1, r3
1004dec6:	3304      	adds	r3, #4
1004dec8:	681b      	ldr	r3, [r3, #0]
1004deca:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004decc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dece:	4a3a      	ldr	r2, [pc, #232]	@ (1004dfb8 <NVMDB_Erase+0x140>)
1004ded0:	4694      	mov	ip, r2
1004ded2:	4463      	add	r3, ip
1004ded4:	0ada      	lsrs	r2, r3, #11
1004ded6:	201f      	movs	r0, #31
1004ded8:	183b      	adds	r3, r7, r0
1004deda:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
1004dedc:	6a3b      	ldr	r3, [r7, #32]
1004dede:	3b01      	subs	r3, #1
1004dee0:	4a36      	ldr	r2, [pc, #216]	@ (1004dfbc <NVMDB_Erase+0x144>)
1004dee2:	431a      	orrs	r2, r3
1004dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dee6:	1ad3      	subs	r3, r2, r3
1004dee8:	3301      	adds	r3, #1
1004deea:	0ada      	lsrs	r2, r3, #11
1004deec:	241e      	movs	r4, #30
1004deee:	193b      	adds	r3, r7, r4
1004def0:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004def2:	210c      	movs	r1, #12
1004def4:	187b      	adds	r3, r7, r1
1004def6:	2200      	movs	r2, #0
1004def8:	601a      	str	r2, [r3, #0]
1004defa:	183b      	adds	r3, r7, r0
1004defc:	781a      	ldrb	r2, [r3, #0]
1004defe:	187b      	adds	r3, r7, r1
1004df00:	605a      	str	r2, [r3, #4]
1004df02:	193b      	adds	r3, r7, r4
1004df04:	781a      	ldrb	r2, [r3, #0]
1004df06:	187b      	adds	r3, r7, r1
1004df08:	609a      	str	r2, [r3, #8]
1004df0a:	2308      	movs	r3, #8
1004df0c:	18fa      	adds	r2, r7, r3
1004df0e:	187b      	adds	r3, r7, r1
1004df10:	0011      	movs	r1, r2
1004df12:	0018      	movs	r0, r3
1004df14:	f7f6 ff8a 	bl	10044e2c <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
1004df18:	1dfb      	adds	r3, r7, #7
1004df1a:	781a      	ldrb	r2, [r3, #0]
1004df1c:	0013      	movs	r3, r2
1004df1e:	009b      	lsls	r3, r3, #2
1004df20:	189b      	adds	r3, r3, r2
1004df22:	009b      	lsls	r3, r3, #2
1004df24:	4a23      	ldr	r2, [pc, #140]	@ (1004dfb4 <NVMDB_Erase+0x13c>)
1004df26:	189b      	adds	r3, r3, r2
1004df28:	0018      	movs	r0, r3
1004df2a:	f7fe fd23 	bl	1004c974 <NVMDB_get_info>

    return NVMDB_STATUS_OK;
1004df2e:	2300      	movs	r3, #0
1004df30:	e03b      	b.n	1004dfaa <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
1004df32:	232b      	movs	r3, #43	@ 0x2b
1004df34:	18fb      	adds	r3, r7, r3
1004df36:	781b      	ldrb	r3, [r3, #0]
1004df38:	2b01      	cmp	r3, #1
1004df3a:	d135      	bne.n	1004dfa8 <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
1004df3c:	69ba      	ldr	r2, [r7, #24]
1004df3e:	252a      	movs	r5, #42	@ 0x2a
1004df40:	197c      	adds	r4, r7, r5
1004df42:	1dfb      	adds	r3, r7, #7
1004df44:	781b      	ldrb	r3, [r3, #0]
1004df46:	0011      	movs	r1, r2
1004df48:	0018      	movs	r0, r3
1004df4a:	f7ff fbd9 	bl	1004d700 <EraseSmallDB>
1004df4e:	0003      	movs	r3, r0
1004df50:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
1004df52:	197b      	adds	r3, r7, r5
1004df54:	781b      	ldrb	r3, [r3, #0]
1004df56:	2b00      	cmp	r3, #0
1004df58:	d122      	bne.n	1004dfa0 <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004df5a:	2300      	movs	r3, #0
1004df5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004df5e:	e019      	b.n	1004df94 <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004df60:	69bb      	ldr	r3, [r7, #24]
1004df62:	6899      	ldr	r1, [r3, #8]
1004df64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004df66:	0013      	movs	r3, r2
1004df68:	005b      	lsls	r3, r3, #1
1004df6a:	189b      	adds	r3, r3, r2
1004df6c:	009b      	lsls	r3, r3, #2
1004df6e:	18ca      	adds	r2, r1, r3
1004df70:	2129      	movs	r1, #41	@ 0x29
1004df72:	187b      	adds	r3, r7, r1
1004df74:	7812      	ldrb	r2, [r2, #0]
1004df76:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
1004df78:	187b      	adds	r3, r7, r1
1004df7a:	781a      	ldrb	r2, [r3, #0]
1004df7c:	0013      	movs	r3, r2
1004df7e:	009b      	lsls	r3, r3, #2
1004df80:	189b      	adds	r3, r3, r2
1004df82:	009b      	lsls	r3, r3, #2
1004df84:	4a0b      	ldr	r2, [pc, #44]	@ (1004dfb4 <NVMDB_Erase+0x13c>)
1004df86:	189b      	adds	r3, r3, r2
1004df88:	0018      	movs	r0, r3
1004df8a:	f7fe fcf3 	bl	1004c974 <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004df8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004df90:	3301      	adds	r3, #1
1004df92:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004df94:	69bb      	ldr	r3, [r7, #24]
1004df96:	791b      	ldrb	r3, [r3, #4]
1004df98:	001a      	movs	r2, r3
1004df9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004df9c:	4293      	cmp	r3, r2
1004df9e:	dbdf      	blt.n	1004df60 <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
1004dfa0:	232a      	movs	r3, #42	@ 0x2a
1004dfa2:	18fb      	adds	r3, r7, r3
1004dfa4:	781b      	ldrb	r3, [r3, #0]
1004dfa6:	e000      	b.n	1004dfaa <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
1004dfa8:	2301      	movs	r3, #1
}
1004dfaa:	0018      	movs	r0, r3
1004dfac:	46bd      	mov	sp, r7
1004dfae:	b00c      	add	sp, #48	@ 0x30
1004dfb0:	bdb0      	pop	{r4, r5, r7, pc}
1004dfb2:	46c0      	nop			@ (mov r8, r8)
1004dfb4:	20000d64 	.word	0x20000d64
1004dfb8:	effc0000 	.word	0xeffc0000
1004dfbc:	000007ff 	.word	0x000007ff

1004dfc0 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
1004dfc0:	b5b0      	push	{r4, r5, r7, lr}
1004dfc2:	b084      	sub	sp, #16
1004dfc4:	af00      	add	r7, sp, #0
1004dfc6:	0002      	movs	r2, r0
1004dfc8:	1dfb      	adds	r3, r7, #7
1004dfca:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
1004dfcc:	250f      	movs	r5, #15
1004dfce:	197c      	adds	r4, r7, r5
1004dfd0:	2308      	movs	r3, #8
1004dfd2:	18fa      	adds	r2, r7, r3
1004dfd4:	1dfb      	adds	r3, r7, #7
1004dfd6:	781b      	ldrb	r3, [r3, #0]
1004dfd8:	0011      	movs	r1, r2
1004dfda:	0018      	movs	r0, r3
1004dfdc:	f7ff fb22 	bl	1004d624 <GetDBType>
1004dfe0:	0003      	movs	r3, r0
1004dfe2:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
1004dfe4:	197b      	adds	r3, r7, r5
1004dfe6:	781b      	ldrb	r3, [r3, #0]
1004dfe8:	2b02      	cmp	r3, #2
1004dfea:	d106      	bne.n	1004dffa <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
1004dfec:	1dfb      	adds	r3, r7, #7
1004dfee:	781b      	ldrb	r3, [r3, #0]
1004dff0:	0018      	movs	r0, r3
1004dff2:	f7ff f92f 	bl	1004d254 <CleanLargeDB>
1004dff6:	0003      	movs	r3, r0
1004dff8:	e00b      	b.n	1004e012 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004dffa:	230f      	movs	r3, #15
1004dffc:	18fb      	adds	r3, r7, r3
1004dffe:	781b      	ldrb	r3, [r3, #0]
1004e000:	2b01      	cmp	r3, #1
1004e002:	d105      	bne.n	1004e010 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
1004e004:	68bb      	ldr	r3, [r7, #8]
1004e006:	0018      	movs	r0, r3
1004e008:	f7ff fa02 	bl	1004d410 <CleanPage>
1004e00c:	0003      	movs	r3, r0
1004e00e:	e000      	b.n	1004e012 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
1004e010:	2301      	movs	r3, #1
}
1004e012:	0018      	movs	r0, r3
1004e014:	46bd      	mov	sp, r7
1004e016:	b004      	add	sp, #16
1004e018:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004e01c <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
1004e01c:	b590      	push	{r4, r7, lr}
1004e01e:	b083      	sub	sp, #12
1004e020:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
1004e022:	1dfc      	adds	r4, r7, #7
1004e024:	f000 f816 	bl	1004e054 <NVMDB_CleanCheck>
1004e028:	0003      	movs	r3, r0
1004e02a:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
1004e02c:	1dfb      	adds	r3, r7, #7
1004e02e:	781b      	ldrb	r3, [r3, #0]
1004e030:	2b7f      	cmp	r3, #127	@ 0x7f
1004e032:	d808      	bhi.n	1004e046 <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
1004e034:	1dfb      	adds	r3, r7, #7
1004e036:	781b      	ldrb	r3, [r3, #0]
1004e038:	0018      	movs	r0, r3
1004e03a:	f7ff ffc1 	bl	1004dfc0 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
1004e03e:	4b04      	ldr	r3, [pc, #16]	@ (1004e050 <NVMDB_Tick+0x34>)
1004e040:	0018      	movs	r0, r3
1004e042:	f016 fcdd 	bl	10064a00 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
1004e046:	2300      	movs	r3, #0
}
1004e048:	0018      	movs	r0, r3
1004e04a:	46bd      	mov	sp, r7
1004e04c:	b003      	add	sp, #12
1004e04e:	bd90      	pop	{r4, r7, pc}
1004e050:	10065bf8 	.word	0x10065bf8

1004e054 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
1004e054:	b580      	push	{r7, lr}
1004e056:	b082      	sub	sp, #8
1004e058:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
1004e05a:	4b2b      	ldr	r3, [pc, #172]	@ (1004e108 <NVMDB_CleanCheck+0xb4>)
1004e05c:	2200      	movs	r2, #0
1004e05e:	569a      	ldrsb	r2, [r3, r2]
1004e060:	1dfb      	adds	r3, r7, #7
1004e062:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
1004e064:	1dfb      	adds	r3, r7, #7
1004e066:	781a      	ldrb	r2, [r3, #0]
1004e068:	4928      	ldr	r1, [pc, #160]	@ (1004e10c <NVMDB_CleanCheck+0xb8>)
1004e06a:	0013      	movs	r3, r2
1004e06c:	009b      	lsls	r3, r3, #2
1004e06e:	189b      	adds	r3, r3, r2
1004e070:	009b      	lsls	r3, r3, #2
1004e072:	18cb      	adds	r3, r1, r3
1004e074:	330a      	adds	r3, #10
1004e076:	881b      	ldrh	r3, [r3, #0]
1004e078:	2b00      	cmp	r3, #0
1004e07a:	d028      	beq.n	1004e0ce <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
1004e07c:	1dfb      	adds	r3, r7, #7
1004e07e:	781a      	ldrb	r2, [r3, #0]
1004e080:	4922      	ldr	r1, [pc, #136]	@ (1004e10c <NVMDB_CleanCheck+0xb8>)
1004e082:	0013      	movs	r3, r2
1004e084:	009b      	lsls	r3, r3, #2
1004e086:	189b      	adds	r3, r3, r2
1004e088:	009b      	lsls	r3, r3, #2
1004e08a:	18cb      	adds	r3, r1, r3
1004e08c:	330c      	adds	r3, #12
1004e08e:	8819      	ldrh	r1, [r3, #0]
1004e090:	1dfb      	adds	r3, r7, #7
1004e092:	781a      	ldrb	r2, [r3, #0]
1004e094:	481d      	ldr	r0, [pc, #116]	@ (1004e10c <NVMDB_CleanCheck+0xb8>)
1004e096:	0013      	movs	r3, r2
1004e098:	009b      	lsls	r3, r3, #2
1004e09a:	189b      	adds	r3, r3, r2
1004e09c:	009b      	lsls	r3, r3, #2
1004e09e:	18c3      	adds	r3, r0, r3
1004e0a0:	3310      	adds	r3, #16
1004e0a2:	881b      	ldrh	r3, [r3, #0]
1004e0a4:	4299      	cmp	r1, r3
1004e0a6:	d212      	bcs.n	1004e0ce <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
1004e0a8:	1dfb      	adds	r3, r7, #7
1004e0aa:	781b      	ldrb	r3, [r3, #0]
1004e0ac:	3301      	adds	r3, #1
1004e0ae:	b2db      	uxtb	r3, r3
1004e0b0:	b25a      	sxtb	r2, r3
1004e0b2:	4b15      	ldr	r3, [pc, #84]	@ (1004e108 <NVMDB_CleanCheck+0xb4>)
1004e0b4:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
1004e0b6:	4b14      	ldr	r3, [pc, #80]	@ (1004e108 <NVMDB_CleanCheck+0xb4>)
1004e0b8:	781b      	ldrb	r3, [r3, #0]
1004e0ba:	b25b      	sxtb	r3, r3
1004e0bc:	2b02      	cmp	r3, #2
1004e0be:	d102      	bne.n	1004e0c6 <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
1004e0c0:	4b11      	ldr	r3, [pc, #68]	@ (1004e108 <NVMDB_CleanCheck+0xb4>)
1004e0c2:	2200      	movs	r2, #0
1004e0c4:	701a      	strb	r2, [r3, #0]
        }
        return i;
1004e0c6:	1dfb      	adds	r3, r7, #7
1004e0c8:	781b      	ldrb	r3, [r3, #0]
1004e0ca:	b25b      	sxtb	r3, r3
1004e0cc:	e017      	b.n	1004e0fe <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
1004e0ce:	1dfb      	adds	r3, r7, #7
1004e0d0:	781a      	ldrb	r2, [r3, #0]
1004e0d2:	1dfb      	adds	r3, r7, #7
1004e0d4:	3201      	adds	r2, #1
1004e0d6:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
1004e0d8:	1dfb      	adds	r3, r7, #7
1004e0da:	781b      	ldrb	r3, [r3, #0]
1004e0dc:	2b02      	cmp	r3, #2
1004e0de:	d102      	bne.n	1004e0e6 <NVMDB_CleanCheck+0x92>
    {
      i = 0;
1004e0e0:	1dfb      	adds	r3, r7, #7
1004e0e2:	2200      	movs	r2, #0
1004e0e4:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
1004e0e6:	1dfb      	adds	r3, r7, #7
1004e0e8:	781b      	ldrb	r3, [r3, #0]
1004e0ea:	4a07      	ldr	r2, [pc, #28]	@ (1004e108 <NVMDB_CleanCheck+0xb4>)
1004e0ec:	7812      	ldrb	r2, [r2, #0]
1004e0ee:	b252      	sxtb	r2, r2
1004e0f0:	4293      	cmp	r3, r2
1004e0f2:	d1b7      	bne.n	1004e064 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
1004e0f4:	4b04      	ldr	r3, [pc, #16]	@ (1004e108 <NVMDB_CleanCheck+0xb4>)
1004e0f6:	2200      	movs	r2, #0
1004e0f8:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
1004e0fa:	2301      	movs	r3, #1
1004e0fc:	425b      	negs	r3, r3
}
1004e0fe:	0018      	movs	r0, r3
1004e100:	46bd      	mov	sp, r7
1004e102:	b002      	add	sp, #8
1004e104:	bd80      	pop	{r7, pc}
1004e106:	46c0      	nop			@ (mov r8, r8)
1004e108:	20000d8c 	.word	0x20000d8c
1004e10c:	20000d64 	.word	0x20000d64

1004e110 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
1004e110:	b580      	push	{r7, lr}
1004e112:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
1004e114:	4b03      	ldr	r3, [pc, #12]	@ (1004e124 <PKAMGR_Init+0x14>)
1004e116:	2201      	movs	r2, #1
1004e118:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
1004e11a:	2300      	movs	r3, #0
}
1004e11c:	0018      	movs	r0, r3
1004e11e:	46bd      	mov	sp, r7
1004e120:	bd80      	pop	{r7, pc}
1004e122:	46c0      	nop			@ (mov r8, r8)
1004e124:	2000112c 	.word	0x2000112c

1004e128 <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
1004e128:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e12a:	b087      	sub	sp, #28
1004e12c:	af00      	add	r7, sp, #0
1004e12e:	60ba      	str	r2, [r7, #8]
1004e130:	607b      	str	r3, [r7, #4]
1004e132:	240f      	movs	r4, #15
1004e134:	193b      	adds	r3, r7, r4
1004e136:	1c02      	adds	r2, r0, #0
1004e138:	701a      	strb	r2, [r3, #0]
1004e13a:	230e      	movs	r3, #14
1004e13c:	18fb      	adds	r3, r7, r3
1004e13e:	1c0a      	adds	r2, r1, #0
1004e140:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
1004e142:	68bb      	ldr	r3, [r7, #8]
1004e144:	2200      	movs	r2, #0
1004e146:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
1004e148:	687b      	ldr	r3, [r7, #4]
1004e14a:	2200      	movs	r2, #0
1004e14c:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
1004e14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e150:	2200      	movs	r2, #0
1004e152:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
1004e154:	193b      	adds	r3, r7, r4
1004e156:	781b      	ldrb	r3, [r3, #0]
1004e158:	2205      	movs	r2, #5
1004e15a:	4013      	ands	r3, r2
1004e15c:	d046      	beq.n	1004e1ec <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
1004e15e:	2517      	movs	r5, #23
1004e160:	197c      	adds	r4, r7, r5
1004e162:	4b25      	ldr	r3, [pc, #148]	@ (1004e1f8 <aci_gap_profile_init+0xd0>)
1004e164:	0018      	movs	r0, r3
1004e166:	f7fe f8c9 	bl	1004c2fc <aci_gatt_srv_add_service>
1004e16a:	0003      	movs	r3, r0
1004e16c:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004e16e:	197b      	adds	r3, r7, r5
1004e170:	781b      	ldrb	r3, [r3, #0]
1004e172:	2b00      	cmp	r3, #0
1004e174:	d002      	beq.n	1004e17c <aci_gap_profile_init+0x54>
    {
      return ret;
1004e176:	197b      	adds	r3, r7, r5
1004e178:	781b      	ldrb	r3, [r3, #0]
1004e17a:	e038      	b.n	1004e1ee <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
1004e17c:	4b1f      	ldr	r3, [pc, #124]	@ (1004e1fc <aci_gap_profile_init+0xd4>)
1004e17e:	0018      	movs	r0, r3
1004e180:	f7fe f8e9 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004e184:	0003      	movs	r3, r0
1004e186:	001a      	movs	r2, r3
1004e188:	68bb      	ldr	r3, [r7, #8]
1004e18a:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
1004e18c:	4b1c      	ldr	r3, [pc, #112]	@ (1004e200 <aci_gap_profile_init+0xd8>)
1004e18e:	0018      	movs	r0, r3
1004e190:	f7fe f8e1 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004e194:	0003      	movs	r3, r0
1004e196:	001a      	movs	r2, r3
1004e198:	687b      	ldr	r3, [r7, #4]
1004e19a:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
1004e19c:	2614      	movs	r6, #20
1004e19e:	19bc      	adds	r4, r7, r6
1004e1a0:	4b15      	ldr	r3, [pc, #84]	@ (1004e1f8 <aci_gap_profile_init+0xd0>)
1004e1a2:	0018      	movs	r0, r3
1004e1a4:	f7fe f8b7 	bl	1004c316 <aci_gatt_srv_get_service_handle>
1004e1a8:	0003      	movs	r3, r0
1004e1aa:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
1004e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e1ae:	2200      	movs	r2, #0
1004e1b0:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
1004e1b2:	230e      	movs	r3, #14
1004e1b4:	18fb      	adds	r3, r7, r3
1004e1b6:	781b      	ldrb	r3, [r3, #0]
1004e1b8:	2b02      	cmp	r3, #2
1004e1ba:	d111      	bne.n	1004e1e0 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
1004e1bc:	2517      	movs	r5, #23
1004e1be:	197c      	adds	r4, r7, r5
1004e1c0:	19bb      	adds	r3, r7, r6
1004e1c2:	881a      	ldrh	r2, [r3, #0]
1004e1c4:	4b0f      	ldr	r3, [pc, #60]	@ (1004e204 <aci_gap_profile_init+0xdc>)
1004e1c6:	0011      	movs	r1, r2
1004e1c8:	0018      	movs	r0, r3
1004e1ca:	f7fe f8b1 	bl	1004c330 <aci_gatt_srv_add_char>
1004e1ce:	0003      	movs	r3, r0
1004e1d0:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
1004e1d2:	197b      	adds	r3, r7, r5
1004e1d4:	781b      	ldrb	r3, [r3, #0]
1004e1d6:	2b00      	cmp	r3, #0
1004e1d8:	d002      	beq.n	1004e1e0 <aci_gap_profile_init+0xb8>
      {
        return ret;
1004e1da:	197b      	adds	r3, r7, r5
1004e1dc:	781b      	ldrb	r3, [r3, #0]
1004e1de:	e006      	b.n	1004e1ee <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
1004e1e0:	4b09      	ldr	r3, [pc, #36]	@ (1004e208 <aci_gap_profile_init+0xe0>)
1004e1e2:	001a      	movs	r2, r3
1004e1e4:	2108      	movs	r1, #8
1004e1e6:	2000      	movs	r0, #0
1004e1e8:	f000 f810 	bl	1004e20c <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
1004e1ec:	2300      	movs	r3, #0
}
1004e1ee:	0018      	movs	r0, r3
1004e1f0:	46bd      	mov	sp, r7
1004e1f2:	b007      	add	sp, #28
1004e1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e1f6:	46c0      	nop			@ (mov r8, r8)
1004e1f8:	200011fc 	.word	0x200011fc
1004e1fc:	20001148 	.word	0x20001148
1004e200:	2000116c 	.word	0x2000116c
1004e204:	200011b4 	.word	0x200011b4
1004e208:	10065d6c 	.word	0x10065d6c

1004e20c <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
1004e20c:	b590      	push	{r4, r7, lr}
1004e20e:	b085      	sub	sp, #20
1004e210:	af00      	add	r7, sp, #0
1004e212:	603a      	str	r2, [r7, #0]
1004e214:	1dbb      	adds	r3, r7, #6
1004e216:	1c02      	adds	r2, r0, #0
1004e218:	801a      	strh	r2, [r3, #0]
1004e21a:	1d3b      	adds	r3, r7, #4
1004e21c:	1c0a      	adds	r2, r1, #0
1004e21e:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
1004e220:	4b0c      	ldr	r3, [pc, #48]	@ (1004e254 <Gap_profile_set_dev_name+0x48>)
1004e222:	0018      	movs	r0, r3
1004e224:	f7fe f897 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004e228:	0003      	movs	r3, r0
1004e22a:	001a      	movs	r2, r3
1004e22c:	200e      	movs	r0, #14
1004e22e:	183b      	adds	r3, r7, r0
1004e230:	3201      	adds	r2, #1
1004e232:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
1004e234:	683c      	ldr	r4, [r7, #0]
1004e236:	1d3b      	adds	r3, r7, #4
1004e238:	881a      	ldrh	r2, [r3, #0]
1004e23a:	1dbb      	adds	r3, r7, #6
1004e23c:	8819      	ldrh	r1, [r3, #0]
1004e23e:	183b      	adds	r3, r7, r0
1004e240:	8818      	ldrh	r0, [r3, #0]
1004e242:	0023      	movs	r3, r4
1004e244:	f000 f82e 	bl	1004e2a4 <Gap_profile_set_char_value>
1004e248:	0003      	movs	r3, r0
}
1004e24a:	0018      	movs	r0, r3
1004e24c:	46bd      	mov	sp, r7
1004e24e:	b005      	add	sp, #20
1004e250:	bd90      	pop	{r4, r7, pc}
1004e252:	46c0      	nop			@ (mov r8, r8)
1004e254:	20001148 	.word	0x20001148

1004e258 <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
1004e258:	b590      	push	{r4, r7, lr}
1004e25a:	b085      	sub	sp, #20
1004e25c:	af00      	add	r7, sp, #0
1004e25e:	603a      	str	r2, [r7, #0]
1004e260:	1dbb      	adds	r3, r7, #6
1004e262:	1c02      	adds	r2, r0, #0
1004e264:	801a      	strh	r2, [r3, #0]
1004e266:	1d3b      	adds	r3, r7, #4
1004e268:	1c0a      	adds	r2, r1, #0
1004e26a:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
1004e26c:	4b0c      	ldr	r3, [pc, #48]	@ (1004e2a0 <Gap_profile_set_appearance+0x48>)
1004e26e:	0018      	movs	r0, r3
1004e270:	f7fe f871 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004e274:	0003      	movs	r3, r0
1004e276:	001a      	movs	r2, r3
1004e278:	200e      	movs	r0, #14
1004e27a:	183b      	adds	r3, r7, r0
1004e27c:	3201      	adds	r2, #1
1004e27e:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
1004e280:	683c      	ldr	r4, [r7, #0]
1004e282:	1d3b      	adds	r3, r7, #4
1004e284:	881a      	ldrh	r2, [r3, #0]
1004e286:	1dbb      	adds	r3, r7, #6
1004e288:	8819      	ldrh	r1, [r3, #0]
1004e28a:	183b      	adds	r3, r7, r0
1004e28c:	8818      	ldrh	r0, [r3, #0]
1004e28e:	0023      	movs	r3, r4
1004e290:	f000 f808 	bl	1004e2a4 <Gap_profile_set_char_value>
1004e294:	0003      	movs	r3, r0
}
1004e296:	0018      	movs	r0, r3
1004e298:	46bd      	mov	sp, r7
1004e29a:	b005      	add	sp, #20
1004e29c:	bd90      	pop	{r4, r7, pc}
1004e29e:	46c0      	nop			@ (mov r8, r8)
1004e2a0:	2000116c 	.word	0x2000116c

1004e2a4 <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
1004e2a4:	b5b0      	push	{r4, r5, r7, lr}
1004e2a6:	b086      	sub	sp, #24
1004e2a8:	af00      	add	r7, sp, #0
1004e2aa:	0004      	movs	r4, r0
1004e2ac:	0008      	movs	r0, r1
1004e2ae:	0011      	movs	r1, r2
1004e2b0:	607b      	str	r3, [r7, #4]
1004e2b2:	230e      	movs	r3, #14
1004e2b4:	18fb      	adds	r3, r7, r3
1004e2b6:	1c22      	adds	r2, r4, #0
1004e2b8:	801a      	strh	r2, [r3, #0]
1004e2ba:	230c      	movs	r3, #12
1004e2bc:	18fb      	adds	r3, r7, r3
1004e2be:	1c02      	adds	r2, r0, #0
1004e2c0:	801a      	strh	r2, [r3, #0]
1004e2c2:	230a      	movs	r3, #10
1004e2c4:	18fb      	adds	r3, r7, r3
1004e2c6:	1c0a      	adds	r2, r1, #0
1004e2c8:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004e2ca:	2317      	movs	r3, #23
1004e2cc:	18fb      	adds	r3, r7, r3
1004e2ce:	2200      	movs	r2, #0
1004e2d0:	701a      	strb	r2, [r3, #0]
1004e2d2:	e021      	b.n	1004e318 <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
1004e2d4:	2317      	movs	r3, #23
1004e2d6:	18fb      	adds	r3, r7, r3
1004e2d8:	781a      	ldrb	r2, [r3, #0]
1004e2da:	0013      	movs	r3, r2
1004e2dc:	00db      	lsls	r3, r3, #3
1004e2de:	189b      	adds	r3, r3, r2
1004e2e0:	009b      	lsls	r3, r3, #2
1004e2e2:	4a43      	ldr	r2, [pc, #268]	@ (1004e3f0 <Gap_profile_set_char_value+0x14c>)
1004e2e4:	189b      	adds	r3, r3, r2
1004e2e6:	2514      	movs	r5, #20
1004e2e8:	197c      	adds	r4, r7, r5
1004e2ea:	0018      	movs	r0, r3
1004e2ec:	f7fe f833 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004e2f0:	0003      	movs	r3, r0
1004e2f2:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004e2f4:	197b      	adds	r3, r7, r5
1004e2f6:	881b      	ldrh	r3, [r3, #0]
1004e2f8:	2b00      	cmp	r3, #0
1004e2fa:	d007      	beq.n	1004e30c <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
1004e2fc:	197b      	adds	r3, r7, r5
1004e2fe:	881b      	ldrh	r3, [r3, #0]
1004e300:	1c5a      	adds	r2, r3, #1
1004e302:	230e      	movs	r3, #14
1004e304:	18fb      	adds	r3, r7, r3
1004e306:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004e308:	429a      	cmp	r2, r3
1004e30a:	d00b      	beq.n	1004e324 <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004e30c:	2117      	movs	r1, #23
1004e30e:	187b      	adds	r3, r7, r1
1004e310:	781a      	ldrb	r2, [r3, #0]
1004e312:	187b      	adds	r3, r7, r1
1004e314:	3201      	adds	r2, #1
1004e316:	701a      	strb	r2, [r3, #0]
1004e318:	2317      	movs	r3, #23
1004e31a:	18fb      	adds	r3, r7, r3
1004e31c:	781b      	ldrb	r3, [r3, #0]
1004e31e:	2b04      	cmp	r3, #4
1004e320:	d9d8      	bls.n	1004e2d4 <Gap_profile_set_char_value+0x30>
1004e322:	e000      	b.n	1004e326 <Gap_profile_set_char_value+0x82>
        {
            break;
1004e324:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
1004e326:	2317      	movs	r3, #23
1004e328:	18fb      	adds	r3, r7, r3
1004e32a:	781b      	ldrb	r3, [r3, #0]
1004e32c:	2b05      	cmp	r3, #5
1004e32e:	d101      	bne.n	1004e334 <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004e330:	2312      	movs	r3, #18
1004e332:	e059      	b.n	1004e3e8 <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
1004e334:	230c      	movs	r3, #12
1004e336:	18fb      	adds	r3, r7, r3
1004e338:	881a      	ldrh	r2, [r3, #0]
1004e33a:	230a      	movs	r3, #10
1004e33c:	18fb      	adds	r3, r7, r3
1004e33e:	881b      	ldrh	r3, [r3, #0]
1004e340:	18d1      	adds	r1, r2, r3
1004e342:	2317      	movs	r3, #23
1004e344:	18fb      	adds	r3, r7, r3
1004e346:	781a      	ldrb	r2, [r3, #0]
1004e348:	4829      	ldr	r0, [pc, #164]	@ (1004e3f0 <Gap_profile_set_char_value+0x14c>)
1004e34a:	0013      	movs	r3, r2
1004e34c:	00db      	lsls	r3, r3, #3
1004e34e:	189b      	adds	r3, r3, r2
1004e350:	009b      	lsls	r3, r3, #2
1004e352:	18c3      	adds	r3, r0, r3
1004e354:	3320      	adds	r3, #32
1004e356:	681b      	ldr	r3, [r3, #0]
1004e358:	889b      	ldrh	r3, [r3, #4]
1004e35a:	4299      	cmp	r1, r3
1004e35c:	dd01      	ble.n	1004e362 <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004e35e:	2312      	movs	r3, #18
1004e360:	e042      	b.n	1004e3e8 <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
1004e362:	2317      	movs	r3, #23
1004e364:	18fb      	adds	r3, r7, r3
1004e366:	781a      	ldrb	r2, [r3, #0]
1004e368:	4921      	ldr	r1, [pc, #132]	@ (1004e3f0 <Gap_profile_set_char_value+0x14c>)
1004e36a:	0013      	movs	r3, r2
1004e36c:	00db      	lsls	r3, r3, #3
1004e36e:	189b      	adds	r3, r3, r2
1004e370:	009b      	lsls	r3, r3, #2
1004e372:	18cb      	adds	r3, r1, r3
1004e374:	3320      	adds	r3, #32
1004e376:	681b      	ldr	r3, [r3, #0]
1004e378:	2b00      	cmp	r3, #0
1004e37a:	d101      	bne.n	1004e380 <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
1004e37c:	2312      	movs	r3, #18
1004e37e:	e033      	b.n	1004e3e8 <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
1004e380:	2417      	movs	r4, #23
1004e382:	193b      	adds	r3, r7, r4
1004e384:	781a      	ldrb	r2, [r3, #0]
1004e386:	491a      	ldr	r1, [pc, #104]	@ (1004e3f0 <Gap_profile_set_char_value+0x14c>)
1004e388:	0013      	movs	r3, r2
1004e38a:	00db      	lsls	r3, r3, #3
1004e38c:	189b      	adds	r3, r3, r2
1004e38e:	009b      	lsls	r3, r3, #2
1004e390:	18cb      	adds	r3, r1, r3
1004e392:	3320      	adds	r3, #32
1004e394:	681b      	ldr	r3, [r3, #0]
1004e396:	689a      	ldr	r2, [r3, #8]
1004e398:	230c      	movs	r3, #12
1004e39a:	18fb      	adds	r3, r7, r3
1004e39c:	881b      	ldrh	r3, [r3, #0]
1004e39e:	18d0      	adds	r0, r2, r3
1004e3a0:	250a      	movs	r5, #10
1004e3a2:	197b      	adds	r3, r7, r5
1004e3a4:	881a      	ldrh	r2, [r3, #0]
1004e3a6:	687b      	ldr	r3, [r7, #4]
1004e3a8:	0019      	movs	r1, r3
1004e3aa:	f016 fcc4 	bl	10064d36 <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
1004e3ae:	193b      	adds	r3, r7, r4
1004e3b0:	781a      	ldrb	r2, [r3, #0]
1004e3b2:	490f      	ldr	r1, [pc, #60]	@ (1004e3f0 <Gap_profile_set_char_value+0x14c>)
1004e3b4:	0013      	movs	r3, r2
1004e3b6:	00db      	lsls	r3, r3, #3
1004e3b8:	189b      	adds	r3, r3, r2
1004e3ba:	009b      	lsls	r3, r3, #2
1004e3bc:	18cb      	adds	r3, r1, r3
1004e3be:	3320      	adds	r3, #32
1004e3c0:	681b      	ldr	r3, [r3, #0]
1004e3c2:	781b      	ldrb	r3, [r3, #0]
1004e3c4:	001a      	movs	r2, r3
1004e3c6:	2302      	movs	r3, #2
1004e3c8:	4013      	ands	r3, r2
1004e3ca:	d00c      	beq.n	1004e3e6 <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
1004e3cc:	193b      	adds	r3, r7, r4
1004e3ce:	781a      	ldrb	r2, [r3, #0]
1004e3d0:	4907      	ldr	r1, [pc, #28]	@ (1004e3f0 <Gap_profile_set_char_value+0x14c>)
1004e3d2:	0013      	movs	r3, r2
1004e3d4:	00db      	lsls	r3, r3, #3
1004e3d6:	189b      	adds	r3, r3, r2
1004e3d8:	009b      	lsls	r3, r3, #2
1004e3da:	18cb      	adds	r3, r1, r3
1004e3dc:	3320      	adds	r3, #32
1004e3de:	681b      	ldr	r3, [r3, #0]
1004e3e0:	197a      	adds	r2, r7, r5
1004e3e2:	8812      	ldrh	r2, [r2, #0]
1004e3e4:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
1004e3e6:	2300      	movs	r3, #0
}
1004e3e8:	0018      	movs	r0, r3
1004e3ea:	46bd      	mov	sp, r7
1004e3ec:	b006      	add	sp, #24
1004e3ee:	bdb0      	pop	{r4, r5, r7, pc}
1004e3f0:	20001148 	.word	0x20001148

1004e3f4 <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
1004e3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e3f6:	b085      	sub	sp, #20
1004e3f8:	af00      	add	r7, sp, #0
1004e3fa:	0002      	movs	r2, r0
1004e3fc:	6039      	str	r1, [r7, #0]
1004e3fe:	1dfb      	adds	r3, r7, #7
1004e400:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
1004e402:	683b      	ldr	r3, [r7, #0]
1004e404:	2200      	movs	r2, #0
1004e406:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
1004e408:	250f      	movs	r5, #15
1004e40a:	197c      	adds	r4, r7, r5
1004e40c:	4b38      	ldr	r3, [pc, #224]	@ (1004e4f0 <aci_gatt_srv_profile_init+0xfc>)
1004e40e:	0018      	movs	r0, r3
1004e410:	f7fd ff74 	bl	1004c2fc <aci_gatt_srv_add_service>
1004e414:	0003      	movs	r3, r0
1004e416:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004e418:	197b      	adds	r3, r7, r5
1004e41a:	781b      	ldrb	r3, [r3, #0]
1004e41c:	2b00      	cmp	r3, #0
1004e41e:	d002      	beq.n	1004e426 <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
1004e420:	197b      	adds	r3, r7, r5
1004e422:	781b      	ldrb	r3, [r3, #0]
1004e424:	e060      	b.n	1004e4e8 <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
1004e426:	260c      	movs	r6, #12
1004e428:	19bc      	adds	r4, r7, r6
1004e42a:	4b31      	ldr	r3, [pc, #196]	@ (1004e4f0 <aci_gatt_srv_profile_init+0xfc>)
1004e42c:	0018      	movs	r0, r3
1004e42e:	f7fd ff72 	bl	1004c316 <aci_gatt_srv_get_service_handle>
1004e432:	0003      	movs	r3, r0
1004e434:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
1004e436:	1dfb      	adds	r3, r7, #7
1004e438:	781b      	ldrb	r3, [r3, #0]
1004e43a:	2201      	movs	r2, #1
1004e43c:	4013      	ands	r3, r2
1004e43e:	d011      	beq.n	1004e464 <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
1004e440:	250f      	movs	r5, #15
1004e442:	197c      	adds	r4, r7, r5
1004e444:	19bb      	adds	r3, r7, r6
1004e446:	881a      	ldrh	r2, [r3, #0]
1004e448:	4b2a      	ldr	r3, [pc, #168]	@ (1004e4f4 <aci_gatt_srv_profile_init+0x100>)
1004e44a:	0011      	movs	r1, r2
1004e44c:	0018      	movs	r0, r3
1004e44e:	f7fd ff6f 	bl	1004c330 <aci_gatt_srv_add_char>
1004e452:	0003      	movs	r3, r0
1004e454:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004e456:	197b      	adds	r3, r7, r5
1004e458:	781b      	ldrb	r3, [r3, #0]
1004e45a:	2b00      	cmp	r3, #0
1004e45c:	d002      	beq.n	1004e464 <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
1004e45e:	197b      	adds	r3, r7, r5
1004e460:	781b      	ldrb	r3, [r3, #0]
1004e462:	e041      	b.n	1004e4e8 <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
1004e464:	4b23      	ldr	r3, [pc, #140]	@ (1004e4f4 <aci_gatt_srv_profile_init+0x100>)
1004e466:	0018      	movs	r0, r3
1004e468:	f7fd ff75 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004e46c:	0003      	movs	r3, r0
1004e46e:	001a      	movs	r2, r3
1004e470:	683b      	ldr	r3, [r7, #0]
1004e472:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
1004e474:	250f      	movs	r5, #15
1004e476:	197c      	adds	r4, r7, r5
1004e478:	230c      	movs	r3, #12
1004e47a:	18fb      	adds	r3, r7, r3
1004e47c:	881a      	ldrh	r2, [r3, #0]
1004e47e:	4b1e      	ldr	r3, [pc, #120]	@ (1004e4f8 <aci_gatt_srv_profile_init+0x104>)
1004e480:	0011      	movs	r1, r2
1004e482:	0018      	movs	r0, r3
1004e484:	f7fd ff54 	bl	1004c330 <aci_gatt_srv_add_char>
1004e488:	0003      	movs	r3, r0
1004e48a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004e48c:	197b      	adds	r3, r7, r5
1004e48e:	781b      	ldrb	r3, [r3, #0]
1004e490:	2b00      	cmp	r3, #0
1004e492:	d002      	beq.n	1004e49a <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
1004e494:	197b      	adds	r3, r7, r5
1004e496:	781b      	ldrb	r3, [r3, #0]
1004e498:	e026      	b.n	1004e4e8 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
1004e49a:	250f      	movs	r5, #15
1004e49c:	197c      	adds	r4, r7, r5
1004e49e:	230c      	movs	r3, #12
1004e4a0:	18fb      	adds	r3, r7, r3
1004e4a2:	881a      	ldrh	r2, [r3, #0]
1004e4a4:	4b15      	ldr	r3, [pc, #84]	@ (1004e4fc <aci_gatt_srv_profile_init+0x108>)
1004e4a6:	0011      	movs	r1, r2
1004e4a8:	0018      	movs	r0, r3
1004e4aa:	f7fd ff41 	bl	1004c330 <aci_gatt_srv_add_char>
1004e4ae:	0003      	movs	r3, r0
1004e4b0:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004e4b2:	197b      	adds	r3, r7, r5
1004e4b4:	781b      	ldrb	r3, [r3, #0]
1004e4b6:	2b00      	cmp	r3, #0
1004e4b8:	d002      	beq.n	1004e4c0 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
1004e4ba:	197b      	adds	r3, r7, r5
1004e4bc:	781b      	ldrb	r3, [r3, #0]
1004e4be:	e013      	b.n	1004e4e8 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
1004e4c0:	250f      	movs	r5, #15
1004e4c2:	197c      	adds	r4, r7, r5
1004e4c4:	230c      	movs	r3, #12
1004e4c6:	18fb      	adds	r3, r7, r3
1004e4c8:	881a      	ldrh	r2, [r3, #0]
1004e4ca:	4b0d      	ldr	r3, [pc, #52]	@ (1004e500 <aci_gatt_srv_profile_init+0x10c>)
1004e4cc:	0011      	movs	r1, r2
1004e4ce:	0018      	movs	r0, r3
1004e4d0:	f7fd ff2e 	bl	1004c330 <aci_gatt_srv_add_char>
1004e4d4:	0003      	movs	r3, r0
1004e4d6:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004e4d8:	197b      	adds	r3, r7, r5
1004e4da:	781b      	ldrb	r3, [r3, #0]
1004e4dc:	2b00      	cmp	r3, #0
1004e4de:	d002      	beq.n	1004e4e6 <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
1004e4e0:	197b      	adds	r3, r7, r5
1004e4e2:	781b      	ldrb	r3, [r3, #0]
1004e4e4:	e000      	b.n	1004e4e8 <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
1004e4e6:	2300      	movs	r3, #0
}
1004e4e8:	0018      	movs	r0, r3
1004e4ea:	46bd      	mov	sp, r7
1004e4ec:	b005      	add	sp, #20
1004e4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e4f0:	20001240 	.word	0x20001240
1004e4f4:	10065dd0 	.word	0x10065dd0
1004e4f8:	10065df4 	.word	0x10065df4
1004e4fc:	10065e18 	.word	0x10065e18
1004e500:	10065e3c 	.word	0x10065e3c

1004e504 <__NVIC_EnableIRQ>:
{
1004e504:	b580      	push	{r7, lr}
1004e506:	b082      	sub	sp, #8
1004e508:	af00      	add	r7, sp, #0
1004e50a:	0002      	movs	r2, r0
1004e50c:	1dfb      	adds	r3, r7, #7
1004e50e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004e510:	1dfb      	adds	r3, r7, #7
1004e512:	781b      	ldrb	r3, [r3, #0]
1004e514:	2b7f      	cmp	r3, #127	@ 0x7f
1004e516:	d809      	bhi.n	1004e52c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004e518:	1dfb      	adds	r3, r7, #7
1004e51a:	781b      	ldrb	r3, [r3, #0]
1004e51c:	001a      	movs	r2, r3
1004e51e:	231f      	movs	r3, #31
1004e520:	401a      	ands	r2, r3
1004e522:	4b04      	ldr	r3, [pc, #16]	@ (1004e534 <__NVIC_EnableIRQ+0x30>)
1004e524:	2101      	movs	r1, #1
1004e526:	4091      	lsls	r1, r2
1004e528:	000a      	movs	r2, r1
1004e52a:	601a      	str	r2, [r3, #0]
}
1004e52c:	46c0      	nop			@ (mov r8, r8)
1004e52e:	46bd      	mov	sp, r7
1004e530:	b002      	add	sp, #8
1004e532:	bd80      	pop	{r7, pc}
1004e534:	e000e100 	.word	0xe000e100

1004e538 <__NVIC_DisableIRQ>:
{
1004e538:	b580      	push	{r7, lr}
1004e53a:	b082      	sub	sp, #8
1004e53c:	af00      	add	r7, sp, #0
1004e53e:	0002      	movs	r2, r0
1004e540:	1dfb      	adds	r3, r7, #7
1004e542:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004e544:	1dfb      	adds	r3, r7, #7
1004e546:	781b      	ldrb	r3, [r3, #0]
1004e548:	2b7f      	cmp	r3, #127	@ 0x7f
1004e54a:	d810      	bhi.n	1004e56e <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004e54c:	1dfb      	adds	r3, r7, #7
1004e54e:	781b      	ldrb	r3, [r3, #0]
1004e550:	001a      	movs	r2, r3
1004e552:	231f      	movs	r3, #31
1004e554:	4013      	ands	r3, r2
1004e556:	4908      	ldr	r1, [pc, #32]	@ (1004e578 <__NVIC_DisableIRQ+0x40>)
1004e558:	2201      	movs	r2, #1
1004e55a:	409a      	lsls	r2, r3
1004e55c:	0013      	movs	r3, r2
1004e55e:	2280      	movs	r2, #128	@ 0x80
1004e560:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
1004e562:	f3bf 8f4f 	dsb	sy
}
1004e566:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
1004e568:	f3bf 8f6f 	isb	sy
}
1004e56c:	46c0      	nop			@ (mov r8, r8)
}
1004e56e:	46c0      	nop			@ (mov r8, r8)
1004e570:	46bd      	mov	sp, r7
1004e572:	b002      	add	sp, #8
1004e574:	bd80      	pop	{r7, pc}
1004e576:	46c0      	nop			@ (mov r8, r8)
1004e578:	e000e100 	.word	0xe000e100

1004e57c <LL_PWR_IsSMPSReady>:
{
1004e57c:	b580      	push	{r7, lr}
1004e57e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
1004e580:	4b05      	ldr	r3, [pc, #20]	@ (1004e598 <LL_PWR_IsSMPSReady+0x1c>)
1004e582:	695b      	ldr	r3, [r3, #20]
1004e584:	2204      	movs	r2, #4
1004e586:	4013      	ands	r3, r2
1004e588:	2b04      	cmp	r3, #4
1004e58a:	d101      	bne.n	1004e590 <LL_PWR_IsSMPSReady+0x14>
1004e58c:	2301      	movs	r3, #1
1004e58e:	e000      	b.n	1004e592 <LL_PWR_IsSMPSReady+0x16>
1004e590:	2300      	movs	r3, #0
}
1004e592:	0018      	movs	r0, r3
1004e594:	46bd      	mov	sp, r7
1004e596:	bd80      	pop	{r7, pc}
1004e598:	48500000 	.word	0x48500000

1004e59c <LL_PWR_GetSMPSMode>:
{
1004e59c:	b580      	push	{r7, lr}
1004e59e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
1004e5a0:	4b03      	ldr	r3, [pc, #12]	@ (1004e5b0 <LL_PWR_GetSMPSMode+0x14>)
1004e5a2:	69da      	ldr	r2, [r3, #28]
1004e5a4:	2380      	movs	r3, #128	@ 0x80
1004e5a6:	00db      	lsls	r3, r3, #3
1004e5a8:	4013      	ands	r3, r2
}
1004e5aa:	0018      	movs	r0, r3
1004e5ac:	46bd      	mov	sp, r7
1004e5ae:	bd80      	pop	{r7, pc}
1004e5b0:	48500000 	.word	0x48500000

1004e5b4 <LL_PWR_SetSMPSPrechargeMode>:
{
1004e5b4:	b580      	push	{r7, lr}
1004e5b6:	b082      	sub	sp, #8
1004e5b8:	af00      	add	r7, sp, #0
1004e5ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
1004e5bc:	4b06      	ldr	r3, [pc, #24]	@ (1004e5d8 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004e5be:	69db      	ldr	r3, [r3, #28]
1004e5c0:	4a06      	ldr	r2, [pc, #24]	@ (1004e5dc <LL_PWR_SetSMPSPrechargeMode+0x28>)
1004e5c2:	4013      	ands	r3, r2
1004e5c4:	0019      	movs	r1, r3
1004e5c6:	4b04      	ldr	r3, [pc, #16]	@ (1004e5d8 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004e5c8:	687a      	ldr	r2, [r7, #4]
1004e5ca:	430a      	orrs	r2, r1
1004e5cc:	61da      	str	r2, [r3, #28]
}
1004e5ce:	46c0      	nop			@ (mov r8, r8)
1004e5d0:	46bd      	mov	sp, r7
1004e5d2:	b002      	add	sp, #8
1004e5d4:	bd80      	pop	{r7, pc}
1004e5d6:	46c0      	nop			@ (mov r8, r8)
1004e5d8:	48500000 	.word	0x48500000
1004e5dc:	fffffdff 	.word	0xfffffdff

1004e5e0 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
1004e5e0:	b580      	push	{r7, lr}
1004e5e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1004e5e4:	4b07      	ldr	r3, [pc, #28]	@ (1004e604 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1004e5e6:	69da      	ldr	r2, [r3, #28]
1004e5e8:	2380      	movs	r3, #128	@ 0x80
1004e5ea:	009b      	lsls	r3, r3, #2
1004e5ec:	401a      	ands	r2, r3
1004e5ee:	2380      	movs	r3, #128	@ 0x80
1004e5f0:	009b      	lsls	r3, r3, #2
1004e5f2:	429a      	cmp	r2, r3
1004e5f4:	d101      	bne.n	1004e5fa <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1004e5f6:	2301      	movs	r3, #1
1004e5f8:	e000      	b.n	1004e5fc <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
1004e5fa:	2300      	movs	r3, #0
}
1004e5fc:	0018      	movs	r0, r3
1004e5fe:	46bd      	mov	sp, r7
1004e600:	bd80      	pop	{r7, pc}
1004e602:	46c0      	nop			@ (mov r8, r8)
1004e604:	48500000 	.word	0x48500000

1004e608 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
1004e608:	b580      	push	{r7, lr}
1004e60a:	b082      	sub	sp, #8
1004e60c:	af00      	add	r7, sp, #0
1004e60e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
1004e610:	4b06      	ldr	r3, [pc, #24]	@ (1004e62c <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004e612:	69db      	ldr	r3, [r3, #28]
1004e614:	220f      	movs	r2, #15
1004e616:	4393      	bics	r3, r2
1004e618:	0019      	movs	r1, r3
1004e61a:	4b04      	ldr	r3, [pc, #16]	@ (1004e62c <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004e61c:	687a      	ldr	r2, [r7, #4]
1004e61e:	430a      	orrs	r2, r1
1004e620:	61da      	str	r2, [r3, #28]
}
1004e622:	46c0      	nop			@ (mov r8, r8)
1004e624:	46bd      	mov	sp, r7
1004e626:	b002      	add	sp, #8
1004e628:	bd80      	pop	{r7, pc}
1004e62a:	46c0      	nop			@ (mov r8, r8)
1004e62c:	48500000 	.word	0x48500000

1004e630 <LL_SYSCFG_BLERXTX_EnableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_EnableIT(uint32_t Signal)
{
1004e630:	b580      	push	{r7, lr}
1004e632:	b082      	sub	sp, #8
1004e634:	af00      	add	r7, sp, #0
1004e636:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->BLERXTX_IER, Signal);
1004e638:	2380      	movs	r3, #128	@ 0x80
1004e63a:	05db      	lsls	r3, r3, #23
1004e63c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
1004e63e:	2380      	movs	r3, #128	@ 0x80
1004e640:	05db      	lsls	r3, r3, #23
1004e642:	687a      	ldr	r2, [r7, #4]
1004e644:	430a      	orrs	r2, r1
1004e646:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004e648:	46c0      	nop			@ (mov r8, r8)
1004e64a:	46bd      	mov	sp, r7
1004e64c:	b002      	add	sp, #8
1004e64e:	bd80      	pop	{r7, pc}

1004e650 <LL_SYSCFG_BLERXTX_DisableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_DisableIT(uint32_t Signal)
{
1004e650:	b580      	push	{r7, lr}
1004e652:	b082      	sub	sp, #8
1004e654:	af00      	add	r7, sp, #0
1004e656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SYSCFG->BLERXTX_IER, Signal);
1004e658:	2380      	movs	r3, #128	@ 0x80
1004e65a:	05db      	lsls	r3, r3, #23
1004e65c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004e65e:	687b      	ldr	r3, [r7, #4]
1004e660:	43d9      	mvns	r1, r3
1004e662:	2380      	movs	r3, #128	@ 0x80
1004e664:	05db      	lsls	r3, r3, #23
1004e666:	400a      	ands	r2, r1
1004e668:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004e66a:	46c0      	nop			@ (mov r8, r8)
1004e66c:	46bd      	mov	sp, r7
1004e66e:	b002      	add	sp, #8
1004e670:	bd80      	pop	{r7, pc}

1004e672 <LL_SYSCFG_BLERXTX_SetType>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetType(uint8_t Type, uint32_t Signal)
{
1004e672:	b580      	push	{r7, lr}
1004e674:	b082      	sub	sp, #8
1004e676:	af00      	add	r7, sp, #0
1004e678:	0002      	movs	r2, r0
1004e67a:	6039      	str	r1, [r7, #0]
1004e67c:	1dfb      	adds	r3, r7, #7
1004e67e:	701a      	strb	r2, [r3, #0]
  if (Type == LL_SYSCFG_BLERXTX_DET_TYPE_EDGE)
1004e680:	1dfb      	adds	r3, r7, #7
1004e682:	781b      	ldrb	r3, [r3, #0]
1004e684:	2b00      	cmp	r3, #0
1004e686:	d109      	bne.n	1004e69c <LL_SYSCFG_BLERXTX_SetType+0x2a>
  {
    CLEAR_BIT(SYSCFG->BLERXTX_DTR, Signal);
1004e688:	2380      	movs	r3, #128	@ 0x80
1004e68a:	05db      	lsls	r3, r3, #23
1004e68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004e68e:	683b      	ldr	r3, [r7, #0]
1004e690:	43d9      	mvns	r1, r3
1004e692:	2380      	movs	r3, #128	@ 0x80
1004e694:	05db      	lsls	r3, r3, #23
1004e696:	400a      	ands	r2, r1
1004e698:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
  }
}
1004e69a:	e007      	b.n	1004e6ac <LL_SYSCFG_BLERXTX_SetType+0x3a>
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
1004e69c:	2380      	movs	r3, #128	@ 0x80
1004e69e:	05db      	lsls	r3, r3, #23
1004e6a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1004e6a2:	2380      	movs	r3, #128	@ 0x80
1004e6a4:	05db      	lsls	r3, r3, #23
1004e6a6:	683a      	ldr	r2, [r7, #0]
1004e6a8:	430a      	orrs	r2, r1
1004e6aa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004e6ac:	46c0      	nop			@ (mov r8, r8)
1004e6ae:	46bd      	mov	sp, r7
1004e6b0:	b002      	add	sp, #8
1004e6b2:	bd80      	pop	{r7, pc}

1004e6b4 <LL_SYSCFG_BLERXTX_SetTrigger>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetTrigger(uint8_t Trigger, uint32_t Signal)
{
1004e6b4:	b580      	push	{r7, lr}
1004e6b6:	b082      	sub	sp, #8
1004e6b8:	af00      	add	r7, sp, #0
1004e6ba:	0002      	movs	r2, r0
1004e6bc:	6039      	str	r1, [r7, #0]
1004e6be:	1dfb      	adds	r3, r7, #7
1004e6c0:	701a      	strb	r2, [r3, #0]
  switch (Trigger)
1004e6c2:	1dfb      	adds	r3, r7, #7
1004e6c4:	781b      	ldrb	r3, [r3, #0]
1004e6c6:	2b04      	cmp	r3, #4
1004e6c8:	d860      	bhi.n	1004e78c <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
1004e6ca:	009a      	lsls	r2, r3, #2
1004e6cc:	4b31      	ldr	r3, [pc, #196]	@ (1004e794 <LL_SYSCFG_BLERXTX_SetTrigger+0xe0>)
1004e6ce:	18d3      	adds	r3, r2, r3
1004e6d0:	681b      	ldr	r3, [r3, #0]
1004e6d2:	469f      	mov	pc, r3
  {
    case LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE:
    {
      SET_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004e6d4:	2380      	movs	r3, #128	@ 0x80
1004e6d6:	05db      	lsls	r3, r3, #23
1004e6d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004e6da:	2380      	movs	r3, #128	@ 0x80
1004e6dc:	05db      	lsls	r3, r3, #23
1004e6de:	683a      	ldr	r2, [r7, #0]
1004e6e0:	430a      	orrs	r2, r1
1004e6e2:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004e6e4:	2380      	movs	r3, #128	@ 0x80
1004e6e6:	05db      	lsls	r3, r3, #23
1004e6e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004e6ea:	683b      	ldr	r3, [r7, #0]
1004e6ec:	43d9      	mvns	r1, r3
1004e6ee:	2380      	movs	r3, #128	@ 0x80
1004e6f0:	05db      	lsls	r3, r3, #23
1004e6f2:	400a      	ands	r2, r1
1004e6f4:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004e6f6:	e049      	b.n	1004e78c <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_RISING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004e6f8:	2380      	movs	r3, #128	@ 0x80
1004e6fa:	05db      	lsls	r3, r3, #23
1004e6fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004e6fe:	683b      	ldr	r3, [r7, #0]
1004e700:	43d9      	mvns	r1, r3
1004e702:	2380      	movs	r3, #128	@ 0x80
1004e704:	05db      	lsls	r3, r3, #23
1004e706:	400a      	ands	r2, r1
1004e708:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004e70a:	2380      	movs	r3, #128	@ 0x80
1004e70c:	05db      	lsls	r3, r3, #23
1004e70e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1004e710:	2380      	movs	r3, #128	@ 0x80
1004e712:	05db      	lsls	r3, r3, #23
1004e714:	683a      	ldr	r2, [r7, #0]
1004e716:	430a      	orrs	r2, r1
1004e718:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004e71a:	e037      	b.n	1004e78c <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_FALLING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004e71c:	2380      	movs	r3, #128	@ 0x80
1004e71e:	05db      	lsls	r3, r3, #23
1004e720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004e722:	683b      	ldr	r3, [r7, #0]
1004e724:	43d9      	mvns	r1, r3
1004e726:	2380      	movs	r3, #128	@ 0x80
1004e728:	05db      	lsls	r3, r3, #23
1004e72a:	400a      	ands	r2, r1
1004e72c:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004e72e:	2380      	movs	r3, #128	@ 0x80
1004e730:	05db      	lsls	r3, r3, #23
1004e732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004e734:	683b      	ldr	r3, [r7, #0]
1004e736:	43d9      	mvns	r1, r3
1004e738:	2380      	movs	r3, #128	@ 0x80
1004e73a:	05db      	lsls	r3, r3, #23
1004e73c:	400a      	ands	r2, r1
1004e73e:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004e740:	e024      	b.n	1004e78c <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_LOW_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004e742:	2380      	movs	r3, #128	@ 0x80
1004e744:	05db      	lsls	r3, r3, #23
1004e746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004e748:	683b      	ldr	r3, [r7, #0]
1004e74a:	43d9      	mvns	r1, r3
1004e74c:	2380      	movs	r3, #128	@ 0x80
1004e74e:	05db      	lsls	r3, r3, #23
1004e750:	400a      	ands	r2, r1
1004e752:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004e754:	2380      	movs	r3, #128	@ 0x80
1004e756:	05db      	lsls	r3, r3, #23
1004e758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004e75a:	683b      	ldr	r3, [r7, #0]
1004e75c:	43d9      	mvns	r1, r3
1004e75e:	2380      	movs	r3, #128	@ 0x80
1004e760:	05db      	lsls	r3, r3, #23
1004e762:	400a      	ands	r2, r1
1004e764:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004e766:	e011      	b.n	1004e78c <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_HIGH_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004e768:	2380      	movs	r3, #128	@ 0x80
1004e76a:	05db      	lsls	r3, r3, #23
1004e76c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004e76e:	683b      	ldr	r3, [r7, #0]
1004e770:	43d9      	mvns	r1, r3
1004e772:	2380      	movs	r3, #128	@ 0x80
1004e774:	05db      	lsls	r3, r3, #23
1004e776:	400a      	ands	r2, r1
1004e778:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004e77a:	2380      	movs	r3, #128	@ 0x80
1004e77c:	05db      	lsls	r3, r3, #23
1004e77e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1004e780:	2380      	movs	r3, #128	@ 0x80
1004e782:	05db      	lsls	r3, r3, #23
1004e784:	683a      	ldr	r2, [r7, #0]
1004e786:	430a      	orrs	r2, r1
1004e788:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
}
1004e78a:	e7ff      	b.n	1004e78c <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
1004e78c:	46c0      	nop			@ (mov r8, r8)
1004e78e:	46bd      	mov	sp, r7
1004e790:	b002      	add	sp, #8
1004e792:	bd80      	pop	{r7, pc}
1004e794:	10065e60 	.word	0x10065e60

1004e798 <LL_SYSCFG_BLERXTX_IsInterruptPending>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSCFG_BLERXTX_IsInterruptPending(uint32_t Signal)
{
1004e798:	b580      	push	{r7, lr}
1004e79a:	b082      	sub	sp, #8
1004e79c:	af00      	add	r7, sp, #0
1004e79e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SYSCFG->BLERXTX_ISCR, Signal) == (Signal)) ? 1UL : 0UL);
1004e7a0:	2380      	movs	r3, #128	@ 0x80
1004e7a2:	05db      	lsls	r3, r3, #23
1004e7a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004e7a6:	687a      	ldr	r2, [r7, #4]
1004e7a8:	4013      	ands	r3, r2
1004e7aa:	687a      	ldr	r2, [r7, #4]
1004e7ac:	429a      	cmp	r2, r3
1004e7ae:	d101      	bne.n	1004e7b4 <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1c>
1004e7b0:	2301      	movs	r3, #1
1004e7b2:	e000      	b.n	1004e7b6 <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1e>
1004e7b4:	2300      	movs	r3, #0
}
1004e7b6:	0018      	movs	r0, r3
1004e7b8:	46bd      	mov	sp, r7
1004e7ba:	b002      	add	sp, #8
1004e7bc:	bd80      	pop	{r7, pc}

1004e7be <LL_SYSCFG_BLERXTX_ClearInterrupt>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_ClearInterrupt(uint32_t Signal)
{
1004e7be:	b580      	push	{r7, lr}
1004e7c0:	b082      	sub	sp, #8
1004e7c2:	af00      	add	r7, sp, #0
1004e7c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->BLERXTX_ISCR, Signal);
1004e7c6:	2380      	movs	r3, #128	@ 0x80
1004e7c8:	05db      	lsls	r3, r3, #23
1004e7ca:	687a      	ldr	r2, [r7, #4]
1004e7cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
1004e7ce:	46c0      	nop			@ (mov r8, r8)
1004e7d0:	46bd      	mov	sp, r7
1004e7d2:	b002      	add	sp, #8
1004e7d4:	bd80      	pop	{r7, pc}
	...

1004e7d8 <LL_APB0_GRP1_EnableClock>:
{
1004e7d8:	b580      	push	{r7, lr}
1004e7da:	b084      	sub	sp, #16
1004e7dc:	af00      	add	r7, sp, #0
1004e7de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
1004e7e0:	4b07      	ldr	r3, [pc, #28]	@ (1004e800 <LL_APB0_GRP1_EnableClock+0x28>)
1004e7e2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004e7e4:	4b06      	ldr	r3, [pc, #24]	@ (1004e800 <LL_APB0_GRP1_EnableClock+0x28>)
1004e7e6:	687a      	ldr	r2, [r7, #4]
1004e7e8:	430a      	orrs	r2, r1
1004e7ea:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004e7ec:	4b04      	ldr	r3, [pc, #16]	@ (1004e800 <LL_APB0_GRP1_EnableClock+0x28>)
1004e7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e7f0:	687a      	ldr	r2, [r7, #4]
1004e7f2:	4013      	ands	r3, r2
1004e7f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004e7f6:	68fb      	ldr	r3, [r7, #12]
}
1004e7f8:	46c0      	nop			@ (mov r8, r8)
1004e7fa:	46bd      	mov	sp, r7
1004e7fc:	b004      	add	sp, #16
1004e7fe:	bd80      	pop	{r7, pc}
1004e800:	48400000 	.word	0x48400000

1004e804 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
1004e804:	b580      	push	{r7, lr}
1004e806:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
1004e808:	231f      	movs	r3, #31
}
1004e80a:	0018      	movs	r0, r3
1004e80c:	46bd      	mov	sp, r7
1004e80e:	bd80      	pop	{r7, pc}

1004e810 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
1004e810:	b580      	push	{r7, lr}
1004e812:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
1004e814:	231f      	movs	r3, #31
}
1004e816:	0018      	movs	r0, r3
1004e818:	46bd      	mov	sp, r7
1004e81a:	bd80      	pop	{r7, pc}

1004e81c <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
1004e81c:	b580      	push	{r7, lr}
1004e81e:	b082      	sub	sp, #8
1004e820:	af00      	add	r7, sp, #0
1004e822:	0002      	movs	r2, r0
1004e824:	1dfb      	adds	r3, r7, #7
1004e826:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
1004e828:	1dfb      	adds	r3, r7, #7
1004e82a:	781b      	ldrb	r3, [r3, #0]
1004e82c:	2b00      	cmp	r3, #0
1004e82e:	d01d      	beq.n	1004e86c <RADIO_SetHighPower+0x50>
  {
    if(high_power == FALSE)
1004e830:	4b2d      	ldr	r3, [pc, #180]	@ (1004e8e8 <RADIO_SetHighPower+0xcc>)
1004e832:	781b      	ldrb	r3, [r3, #0]
1004e834:	2b00      	cmp	r3, #0
1004e836:	d129      	bne.n	1004e88c <RADIO_SetHighPower+0x70>
    {
      high_power = TRUE;
1004e838:	4b2b      	ldr	r3, [pc, #172]	@ (1004e8e8 <RADIO_SetHighPower+0xcc>)
1004e83a:	2201      	movs	r2, #1
1004e83c:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_SYSCFG);
1004e83e:	2380      	movs	r3, #128	@ 0x80
1004e840:	005b      	lsls	r3, r3, #1
1004e842:	0018      	movs	r0, r3
1004e844:	f7ff ffc8 	bl	1004e7d8 <LL_APB0_GRP1_EnableClock>
      LL_SYSCFG_BLERXTX_SetTrigger(LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE, LL_SYSCFG_BLE_TX_EVENT);
1004e848:	2101      	movs	r1, #1
1004e84a:	2002      	movs	r0, #2
1004e84c:	f7ff ff32 	bl	1004e6b4 <LL_SYSCFG_BLERXTX_SetTrigger>
      LL_SYSCFG_BLERXTX_SetType(LL_SYSCFG_BLERXTX_DET_TYPE_EDGE, LL_SYSCFG_BLE_TX_EVENT);
1004e850:	2101      	movs	r1, #1
1004e852:	2000      	movs	r0, #0
1004e854:	f7ff ff0d 	bl	1004e672 <LL_SYSCFG_BLERXTX_SetType>
      LL_SYSCFG_BLERXTX_EnableIT(LL_SYSCFG_BLE_TX_EVENT);
1004e858:	2001      	movs	r0, #1
1004e85a:	f7ff fee9 	bl	1004e630 <LL_SYSCFG_BLERXTX_EnableIT>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1004e85e:	2001      	movs	r0, #1
1004e860:	f7ff ffad 	bl	1004e7be <LL_SYSCFG_BLERXTX_ClearInterrupt>
      NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
1004e864:	2019      	movs	r0, #25
1004e866:	f7ff fe4d 	bl	1004e504 <__NVIC_EnableIRQ>
1004e86a:	e00f      	b.n	1004e88c <RADIO_SetHighPower+0x70>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
1004e86c:	4b1e      	ldr	r3, [pc, #120]	@ (1004e8e8 <RADIO_SetHighPower+0xcc>)
1004e86e:	781b      	ldrb	r3, [r3, #0]
1004e870:	2b01      	cmp	r3, #1
1004e872:	d10b      	bne.n	1004e88c <RADIO_SetHighPower+0x70>
    {
      high_power = FALSE;
1004e874:	4b1c      	ldr	r3, [pc, #112]	@ (1004e8e8 <RADIO_SetHighPower+0xcc>)
1004e876:	2200      	movs	r2, #0
1004e878:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_SYSCFG_BLERXTX_DisableIT(LL_SYSCFG_BLE_TX_EVENT);
1004e87a:	2001      	movs	r0, #1
1004e87c:	f7ff fee8 	bl	1004e650 <LL_SYSCFG_BLERXTX_DisableIT>
      NVIC_DisableIRQ(RADIO_TXRX_SEQ_IRQn);
1004e880:	2019      	movs	r0, #25
1004e882:	f7ff fe59 	bl	1004e538 <__NVIC_DisableIRQ>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1004e886:	2001      	movs	r0, #1
1004e888:	f7ff ff99 	bl	1004e7be <LL_SYSCFG_BLERXTX_ClearInterrupt>
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
1004e88c:	f7ff fea8 	bl	1004e5e0 <LL_PWR_IsEnabledSMPSPrechargeMode>
1004e890:	1e03      	subs	r3, r0, #0
1004e892:	d124      	bne.n	1004e8de <RADIO_SetHighPower+0xc2>
1004e894:	f7ff fe82 	bl	1004e59c <LL_PWR_GetSMPSMode>
1004e898:	0002      	movs	r2, r0
1004e89a:	2380      	movs	r3, #128	@ 0x80
1004e89c:	00db      	lsls	r3, r3, #3
1004e89e:	429a      	cmp	r2, r3
1004e8a0:	d01d      	beq.n	1004e8de <RADIO_SetHighPower+0xc2>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
1004e8a2:	2380      	movs	r3, #128	@ 0x80
1004e8a4:	009b      	lsls	r3, r3, #2
1004e8a6:	0018      	movs	r0, r3
1004e8a8:	f7ff fe84 	bl	1004e5b4 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
1004e8ac:	46c0      	nop			@ (mov r8, r8)
1004e8ae:	f7ff fe65 	bl	1004e57c <LL_PWR_IsSMPSReady>
1004e8b2:	1e03      	subs	r3, r0, #0
1004e8b4:	d1fb      	bne.n	1004e8ae <RADIO_SetHighPower+0x92>
  /* Change level */
  if(state != DISABLE)
1004e8b6:	1dfb      	adds	r3, r7, #7
1004e8b8:	781b      	ldrb	r3, [r3, #0]
1004e8ba:	2b00      	cmp	r3, #0
1004e8bc:	d003      	beq.n	1004e8c6 <RADIO_SetHighPower+0xaa>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
1004e8be:	200e      	movs	r0, #14
1004e8c0:	f7ff fea2 	bl	1004e608 <LL_PWR_SMPS_SetOutputVoltageLevel>
1004e8c4:	e002      	b.n	1004e8cc <RADIO_SetHighPower+0xb0>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
1004e8c6:	2004      	movs	r0, #4
1004e8c8:	f7ff fe9e 	bl	1004e608 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
1004e8cc:	2000      	movs	r0, #0
1004e8ce:	f7ff fe71 	bl	1004e5b4 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
1004e8d2:	46c0      	nop			@ (mov r8, r8)
1004e8d4:	f7ff fe52 	bl	1004e57c <LL_PWR_IsSMPSReady>
1004e8d8:	1e03      	subs	r3, r0, #0
1004e8da:	d0fb      	beq.n	1004e8d4 <RADIO_SetHighPower+0xb8>
1004e8dc:	e000      	b.n	1004e8e0 <RADIO_SetHighPower+0xc4>
    return;
1004e8de:	46c0      	nop			@ (mov r8, r8)
}
1004e8e0:	46bd      	mov	sp, r7
1004e8e2:	b002      	add	sp, #8
1004e8e4:	bd80      	pop	{r7, pc}
1004e8e6:	46c0      	nop			@ (mov r8, r8)
1004e8e8:	20000dd7 	.word	0x20000dd7

1004e8ec <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
1004e8ec:	b580      	push	{r7, lr}
1004e8ee:	af00      	add	r7, sp, #0
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
  if(high_power == FALSE)
1004e8f0:	4b16      	ldr	r3, [pc, #88]	@ (1004e94c <HAL_RADIO_TxRxSeqCallback+0x60>)
1004e8f2:	781b      	ldrb	r3, [r3, #0]
1004e8f4:	2b00      	cmp	r3, #0
1004e8f6:	d025      	beq.n	1004e944 <HAL_RADIO_TxRxSeqCallback+0x58>
    return;

  if(LL_SYSCFG_BLERXTX_IsInterruptPending(LL_SYSCFG_BLE_TX_EVENT)){
1004e8f8:	2001      	movs	r0, #1
1004e8fa:	f7ff ff4d 	bl	1004e798 <LL_SYSCFG_BLERXTX_IsInterruptPending>
1004e8fe:	1e03      	subs	r3, r0, #0
1004e900:	d021      	beq.n	1004e946 <HAL_RADIO_TxRxSeqCallback+0x5a>
    if(RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS_4)
1004e902:	4a13      	ldr	r2, [pc, #76]	@ (1004e950 <HAL_RADIO_TxRxSeqCallback+0x64>)
1004e904:	23a6      	movs	r3, #166	@ 0xa6
1004e906:	009b      	lsls	r3, r3, #2
1004e908:	58d3      	ldr	r3, [r2, r3]
1004e90a:	2210      	movs	r2, #16
1004e90c:	4013      	ands	r3, r2
1004e90e:	d00a      	beq.n	1004e926 <HAL_RADIO_TxRxSeqCallback+0x3a>
    {
      // Rising edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 1);
1004e910:	4a0f      	ldr	r2, [pc, #60]	@ (1004e950 <HAL_RADIO_TxRxSeqCallback+0x64>)
1004e912:	2395      	movs	r3, #149	@ 0x95
1004e914:	009b      	lsls	r3, r3, #2
1004e916:	58d3      	ldr	r3, [r2, r3]
1004e918:	490d      	ldr	r1, [pc, #52]	@ (1004e950 <HAL_RADIO_TxRxSeqCallback+0x64>)
1004e91a:	2202      	movs	r2, #2
1004e91c:	431a      	orrs	r2, r3
1004e91e:	2395      	movs	r3, #149	@ 0x95
1004e920:	009b      	lsls	r3, r3, #2
1004e922:	50ca      	str	r2, [r1, r3]
1004e924:	e00a      	b.n	1004e93c <HAL_RADIO_TxRxSeqCallback+0x50>
    }
    else
    {
      // Falling edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
1004e926:	4a0a      	ldr	r2, [pc, #40]	@ (1004e950 <HAL_RADIO_TxRxSeqCallback+0x64>)
1004e928:	2395      	movs	r3, #149	@ 0x95
1004e92a:	009b      	lsls	r3, r3, #2
1004e92c:	58d3      	ldr	r3, [r2, r3]
1004e92e:	4908      	ldr	r1, [pc, #32]	@ (1004e950 <HAL_RADIO_TxRxSeqCallback+0x64>)
1004e930:	2202      	movs	r2, #2
1004e932:	4393      	bics	r3, r2
1004e934:	001a      	movs	r2, r3
1004e936:	2395      	movs	r3, #149	@ 0x95
1004e938:	009b      	lsls	r3, r3, #2
1004e93a:	50ca      	str	r2, [r1, r3]
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1004e93c:	2001      	movs	r0, #1
1004e93e:	f7ff ff3e 	bl	1004e7be <LL_SYSCFG_BLERXTX_ClearInterrupt>
1004e942:	e000      	b.n	1004e946 <HAL_RADIO_TxRxSeqCallback+0x5a>
    return;
1004e944:	46c0      	nop			@ (mov r8, r8)
  }
#endif
}
1004e946:	46bd      	mov	sp, r7
1004e948:	bd80      	pop	{r7, pc}
1004e94a:	46c0      	nop			@ (mov r8, r8)
1004e94c:	20000dd7 	.word	0x20000dd7
1004e950:	60001400 	.word	0x60001400

1004e954 <LL_SYSCFG_GetDeviceRevision>:
{
1004e954:	b580      	push	{r7, lr}
1004e956:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
1004e958:	2380      	movs	r3, #128	@ 0x80
1004e95a:	05db      	lsls	r3, r3, #23
1004e95c:	681b      	ldr	r3, [r3, #0]
1004e95e:	220f      	movs	r2, #15
1004e960:	4013      	ands	r3, r2
}
1004e962:	0018      	movs	r0, r3
1004e964:	46bd      	mov	sp, r7
1004e966:	bd80      	pop	{r7, pc}

1004e968 <LL_SYSCFG_GetDeviceVersion>:
{
1004e968:	b580      	push	{r7, lr}
1004e96a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
1004e96c:	2380      	movs	r3, #128	@ 0x80
1004e96e:	05db      	lsls	r3, r3, #23
1004e970:	681b      	ldr	r3, [r3, #0]
1004e972:	091b      	lsrs	r3, r3, #4
1004e974:	220f      	movs	r2, #15
1004e976:	4013      	ands	r3, r2
}
1004e978:	0018      	movs	r0, r3
1004e97a:	46bd      	mov	sp, r7
1004e97c:	bd80      	pop	{r7, pc}

1004e97e <LL_SYSCFG_GetDeviceJTAG_ID>:
{
1004e97e:	b580      	push	{r7, lr}
1004e980:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
1004e982:	2380      	movs	r3, #128	@ 0x80
1004e984:	05db      	lsls	r3, r3, #23
1004e986:	685b      	ldr	r3, [r3, #4]
}
1004e988:	0018      	movs	r0, r3
1004e98a:	46bd      	mov	sp, r7
1004e98c:	bd80      	pop	{r7, pc}
	...

1004e990 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
1004e990:	b580      	push	{r7, lr}
1004e992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
1004e994:	4b03      	ldr	r3, [pc, #12]	@ (1004e9a4 <LL_GetFlashSize+0x14>)
1004e996:	681b      	ldr	r3, [r3, #0]
1004e998:	041b      	lsls	r3, r3, #16
1004e99a:	0c1b      	lsrs	r3, r3, #16
}
1004e99c:	0018      	movs	r0, r3
1004e99e:	46bd      	mov	sp, r7
1004e9a0:	bd80      	pop	{r7, pc}
1004e9a2:	46c0      	nop			@ (mov r8, r8)
1004e9a4:	40001014 	.word	0x40001014

1004e9a8 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
1004e9a8:	b580      	push	{r7, lr}
1004e9aa:	b082      	sub	sp, #8
1004e9ac:	af00      	add	r7, sp, #0

    if (tmpreg == 0) {
      tmpreg = LL_UTILS_RAMSIZE_32K;
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
1004e9ae:	2300      	movs	r3, #0
1004e9b0:	607b      	str	r3, [r7, #4]
#endif
    
    return tmpreg;
1004e9b2:	687b      	ldr	r3, [r7, #4]
  }
1004e9b4:	0018      	movs	r0, r3
1004e9b6:	46bd      	mov	sp, r7
1004e9b8:	b002      	add	sp, #8
1004e9ba:	bd80      	pop	{r7, pc}

1004e9bc <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
1004e9bc:	b580      	push	{r7, lr}
1004e9be:	b084      	sub	sp, #16
1004e9c0:	af00      	add	r7, sp, #0
1004e9c2:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
1004e9c4:	687b      	ldr	r3, [r7, #4]
1004e9c6:	22ff      	movs	r2, #255	@ 0xff
1004e9c8:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
1004e9ca:	f7ff ffd8 	bl	1004e97e <LL_SYSCFG_GetDeviceJTAG_ID>
1004e9ce:	0003      	movs	r3, r0
1004e9d0:	60fb      	str	r3, [r7, #12]
  if(jtag_id == JTAG_ID_CODE_STM32WB07XX)
  {
    partInfo->die_id = DIE_SW_ID_STM32WB07XX;
  }
#elif defined(STM32WB05)
  if(jtag_id == JTAG_ID_CODE_STM32WB05XX)
1004e9d2:	68fb      	ldr	r3, [r7, #12]
1004e9d4:	4a18      	ldr	r2, [pc, #96]	@ (1004ea38 <GetPartInfo+0x7c>)
1004e9d6:	4293      	cmp	r3, r2
1004e9d8:	d102      	bne.n	1004e9e0 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
1004e9da:	687b      	ldr	r3, [r7, #4]
1004e9dc:	2205      	movs	r2, #5
1004e9de:	701a      	strb	r2, [r3, #0]
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
1004e9e0:	f7ff ffc2 	bl	1004e968 <LL_SYSCFG_GetDeviceVersion>
1004e9e4:	0003      	movs	r3, r0
1004e9e6:	b2da      	uxtb	r2, r3
1004e9e8:	687b      	ldr	r3, [r7, #4]
1004e9ea:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
1004e9ec:	f7ff ffb2 	bl	1004e954 <LL_SYSCFG_GetDeviceRevision>
1004e9f0:	0003      	movs	r3, r0
1004e9f2:	b2da      	uxtb	r2, r3
1004e9f4:	687b      	ldr	r3, [r7, #4]
1004e9f6:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
1004e9f8:	f7ff ffc1 	bl	1004e97e <LL_SYSCFG_GetDeviceJTAG_ID>
1004e9fc:	0002      	movs	r2, r0
1004e9fe:	687b      	ldr	r3, [r7, #4]
1004ea00:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
1004ea02:	f7ff ffc5 	bl	1004e990 <LL_GetFlashSize>
1004ea06:	0003      	movs	r3, r0
1004ea08:	3301      	adds	r3, #1
1004ea0a:	009a      	lsls	r2, r3, #2
1004ea0c:	687b      	ldr	r3, [r7, #4]
1004ea0e:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
1004ea10:	f7ff ffca 	bl	1004e9a8 <LL_GetRAMSize>
1004ea14:	1e03      	subs	r3, r0, #0
1004ea16:	d007      	beq.n	1004ea28 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
1004ea18:	f7ff ffc6 	bl	1004e9a8 <LL_GetRAMSize>
1004ea1c:	0003      	movs	r3, r0
1004ea1e:	3301      	adds	r3, #1
1004ea20:	039a      	lsls	r2, r3, #14
1004ea22:	687b      	ldr	r3, [r7, #4]
1004ea24:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
1004ea26:	e003      	b.n	1004ea30 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
1004ea28:	687b      	ldr	r3, [r7, #4]
1004ea2a:	22c0      	movs	r2, #192	@ 0xc0
1004ea2c:	01d2      	lsls	r2, r2, #7
1004ea2e:	60da      	str	r2, [r3, #12]
}
1004ea30:	46c0      	nop			@ (mov r8, r8)
1004ea32:	46bd      	mov	sp, r7
1004ea34:	b004      	add	sp, #16
1004ea36:	bd80      	pop	{r7, pc}
1004ea38:	02028041 	.word	0x02028041

1004ea3c <__NVIC_SystemReset>:
{
1004ea3c:	b580      	push	{r7, lr}
1004ea3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004ea40:	f3bf 8f4f 	dsb	sy
}
1004ea44:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004ea46:	4b04      	ldr	r3, [pc, #16]	@ (1004ea58 <__NVIC_SystemReset+0x1c>)
1004ea48:	4a04      	ldr	r2, [pc, #16]	@ (1004ea5c <__NVIC_SystemReset+0x20>)
1004ea4a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
1004ea4c:	f3bf 8f4f 	dsb	sy
}
1004ea50:	46c0      	nop			@ (mov r8, r8)
    __NOP();
1004ea52:	46c0      	nop			@ (mov r8, r8)
1004ea54:	e7fd      	b.n	1004ea52 <__NVIC_SystemReset+0x16>
1004ea56:	46c0      	nop			@ (mov r8, r8)
1004ea58:	e000ed00 	.word	0xe000ed00
1004ea5c:	05fa0004 	.word	0x05fa0004

1004ea60 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
1004ea60:	b580      	push	{r7, lr}
1004ea62:	af00      	add	r7, sp, #0
  BLENVM_Init();
1004ea64:	f000 fdbe 	bl	1004f5e4 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
1004ea68:	f7ff fb52 	bl	1004e110 <PKAMGR_Init>
1004ea6c:	0003      	movs	r3, r0
1004ea6e:	3301      	adds	r3, #1
1004ea70:	d101      	bne.n	1004ea76 <ModulesInit+0x16>
  {
    Error_Handler();
1004ea72:	f7f2 fd65 	bl	10041540 <Error_Handler>
  }
}
1004ea76:	46c0      	nop			@ (mov r8, r8)
1004ea78:	46bd      	mov	sp, r7
1004ea7a:	bd80      	pop	{r7, pc}

1004ea7c <BLE_Init>:

void BLE_Init(void)
{
1004ea7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ea7e:	b099      	sub	sp, #100	@ 0x64
1004ea80:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
1004ea82:	234f      	movs	r3, #79	@ 0x4f
1004ea84:	18fb      	adds	r3, r7, r3
1004ea86:	2200      	movs	r2, #0
1004ea88:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
1004ea8a:	233c      	movs	r3, #60	@ 0x3c
1004ea8c:	18fb      	adds	r3, r7, r3
1004ea8e:	0018      	movs	r0, r3
1004ea90:	2306      	movs	r3, #6
1004ea92:	001a      	movs	r2, r3
1004ea94:	2100      	movs	r1, #0
1004ea96:	f016 f8d9 	bl	10064c4c <memset>
  uint8_t bd_address_len= 6;
1004ea9a:	234e      	movs	r3, #78	@ 0x4e
1004ea9c:	18fb      	adds	r3, r7, r3
1004ea9e:	2206      	movs	r2, #6
1004eaa0:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
1004eaa2:	233a      	movs	r3, #58	@ 0x3a
1004eaa4:	18fb      	adds	r3, r7, r3
1004eaa6:	22a0      	movs	r2, #160	@ 0xa0
1004eaa8:	0092      	lsls	r2, r2, #2
1004eaaa:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
1004eaac:	1d3a      	adds	r2, r7, #4
1004eaae:	4b5b      	ldr	r3, [pc, #364]	@ (1004ec1c <BLE_Init+0x1a0>)
1004eab0:	0010      	movs	r0, r2
1004eab2:	0019      	movs	r1, r3
1004eab4:	2334      	movs	r3, #52	@ 0x34
1004eab6:	001a      	movs	r2, r3
1004eab8:	f016 f93d 	bl	10064d36 <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
1004eabc:	254d      	movs	r5, #77	@ 0x4d
1004eabe:	197c      	adds	r4, r7, r5
1004eac0:	1d3b      	adds	r3, r7, #4
1004eac2:	0018      	movs	r0, r3
1004eac4:	f003 fbcc 	bl	10052260 <BLE_STACK_Init>
1004eac8:	0003      	movs	r3, r0
1004eaca:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
1004eacc:	197b      	adds	r3, r7, r5
1004eace:	781b      	ldrb	r3, [r3, #0]
1004ead0:	2b00      	cmp	r3, #0
1004ead2:	d001      	beq.n	1004ead8 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
    Error_Handler();
1004ead4:	f7f2 fd34 	bl	10041540 <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
1004ead8:	213c      	movs	r1, #60	@ 0x3c
1004eada:	187b      	adds	r3, r7, r1
1004eadc:	2234      	movs	r2, #52	@ 0x34
1004eade:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
1004eae0:	187b      	adds	r3, r7, r1
1004eae2:	2212      	movs	r2, #18
1004eae4:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
1004eae6:	187b      	adds	r3, r7, r1
1004eae8:	222a      	movs	r2, #42	@ 0x2a
1004eaea:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
1004eaec:	187b      	adds	r3, r7, r1
1004eaee:	22e1      	movs	r2, #225	@ 0xe1
1004eaf0:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
1004eaf2:	187b      	adds	r3, r7, r1
1004eaf4:	2208      	movs	r2, #8
1004eaf6:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
1004eaf8:	187b      	adds	r3, r7, r1
1004eafa:	2200      	movs	r2, #0
1004eafc:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
1004eafe:	254d      	movs	r5, #77	@ 0x4d
1004eb00:	197c      	adds	r4, r7, r5
1004eb02:	187b      	adds	r3, r7, r1
1004eb04:	001a      	movs	r2, r3
1004eb06:	2106      	movs	r1, #6
1004eb08:	2000      	movs	r0, #0
1004eb0a:	f003 f8a1 	bl	10051c50 <aci_hal_write_config_data>
1004eb0e:	0003      	movs	r3, r0
1004eb10:	7023      	strb	r3, [r4, #0]
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
1004eb12:	197c      	adds	r4, r7, r5
1004eb14:	211f      	movs	r1, #31
1004eb16:	2000      	movs	r0, #0
1004eb18:	f003 f89e 	bl	10051c58 <aci_hal_set_tx_power_level>
1004eb1c:	0003      	movs	r3, r0
1004eb1e:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
1004eb20:	197c      	adds	r4, r7, r5
1004eb22:	234a      	movs	r3, #74	@ 0x4a
1004eb24:	18fb      	adds	r3, r7, r3
1004eb26:	0019      	movs	r1, r3
1004eb28:	2001      	movs	r0, #1
1004eb2a:	f7ff fc63 	bl	1004e3f4 <aci_gatt_srv_profile_init>
1004eb2e:	0003      	movs	r3, r0
1004eb30:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
1004eb32:	214c      	movs	r1, #76	@ 0x4c
1004eb34:	187b      	adds	r3, r7, r1
1004eb36:	2200      	movs	r2, #0
1004eb38:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
1004eb3a:	187b      	adds	r3, r7, r1
1004eb3c:	187a      	adds	r2, r7, r1
1004eb3e:	7812      	ldrb	r2, [r2, #0]
1004eb40:	2101      	movs	r1, #1
1004eb42:	430a      	orrs	r2, r1
1004eb44:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
1004eb46:	197c      	adds	r4, r7, r5
1004eb48:	224f      	movs	r2, #79	@ 0x4f
1004eb4a:	18bb      	adds	r3, r7, r2
1004eb4c:	781b      	ldrb	r3, [r3, #0]
1004eb4e:	2100      	movs	r1, #0
1004eb50:	0018      	movs	r0, r3
1004eb52:	f002 fe97 	bl	10051884 <aci_gap_init>
1004eb56:	0003      	movs	r3, r0
1004eb58:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
  }

  ret = aci_gap_profile_init(role, privacy_type,
1004eb5a:	002e      	movs	r6, r5
1004eb5c:	197c      	adds	r4, r7, r5
1004eb5e:	2546      	movs	r5, #70	@ 0x46
1004eb60:	197d      	adds	r5, r7, r5
1004eb62:	2348      	movs	r3, #72	@ 0x48
1004eb64:	18fa      	adds	r2, r7, r3
1004eb66:	204f      	movs	r0, #79	@ 0x4f
1004eb68:	183b      	adds	r3, r7, r0
1004eb6a:	7819      	ldrb	r1, [r3, #0]
1004eb6c:	234c      	movs	r3, #76	@ 0x4c
1004eb6e:	18fb      	adds	r3, r7, r3
1004eb70:	7818      	ldrb	r0, [r3, #0]
1004eb72:	2344      	movs	r3, #68	@ 0x44
1004eb74:	18fb      	adds	r3, r7, r3
1004eb76:	9300      	str	r3, [sp, #0]
1004eb78:	002b      	movs	r3, r5
1004eb7a:	f7ff fad5 	bl	1004e128 <aci_gap_profile_init>
1004eb7e:	0003      	movs	r3, r0
1004eb80:	7023      	strb	r3, [r4, #0]
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
1004eb82:	0035      	movs	r5, r6
1004eb84:	197c      	adds	r4, r7, r5
1004eb86:	4b26      	ldr	r3, [pc, #152]	@ (1004ec20 <BLE_Init+0x1a4>)
1004eb88:	001a      	movs	r2, r3
1004eb8a:	2119      	movs	r1, #25
1004eb8c:	2000      	movs	r0, #0
1004eb8e:	f7ff fb3d 	bl	1004e20c <Gap_profile_set_dev_name>
1004eb92:	0003      	movs	r3, r0
1004eb94:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
1004eb96:	197c      	adds	r4, r7, r5
1004eb98:	233a      	movs	r3, #58	@ 0x3a
1004eb9a:	18fb      	adds	r3, r7, r3
1004eb9c:	001a      	movs	r2, r3
1004eb9e:	2102      	movs	r1, #2
1004eba0:	2000      	movs	r0, #0
1004eba2:	f7ff fb59 	bl	1004e258 <Gap_profile_set_appearance>
1004eba6:	0003      	movs	r3, r0
1004eba8:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
1004ebaa:	4b1e      	ldr	r3, [pc, #120]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebac:	2201      	movs	r2, #1
1004ebae:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
1004ebb0:	4b1c      	ldr	r3, [pc, #112]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebb2:	781b      	ldrb	r3, [r3, #0]
1004ebb4:	197c      	adds	r4, r7, r5
1004ebb6:	0018      	movs	r0, r3
1004ebb8:	f7fd fb4e 	bl	1004c258 <aci_gap_set_io_capability>
1004ebbc:	0003      	movs	r3, r0
1004ebbe:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
1004ebc0:	4b18      	ldr	r3, [pc, #96]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebc2:	2201      	movs	r2, #1
1004ebc4:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
1004ebc6:	4b17      	ldr	r3, [pc, #92]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebc8:	2208      	movs	r2, #8
1004ebca:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
1004ebcc:	4b15      	ldr	r3, [pc, #84]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebce:	2210      	movs	r2, #16
1004ebd0:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
1004ebd2:	4b14      	ldr	r3, [pc, #80]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebd4:	2201      	movs	r2, #1
1004ebd6:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
1004ebd8:	4b12      	ldr	r3, [pc, #72]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebda:	7898      	ldrb	r0, [r3, #2]
1004ebdc:	4b11      	ldr	r3, [pc, #68]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebde:	7859      	ldrb	r1, [r3, #1]
1004ebe0:	4b10      	ldr	r3, [pc, #64]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebe2:	78db      	ldrb	r3, [r3, #3]
1004ebe4:	4a0f      	ldr	r2, [pc, #60]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ebe6:	7912      	ldrb	r2, [r2, #4]
1004ebe8:	002e      	movs	r6, r5
1004ebea:	197c      	adds	r4, r7, r5
1004ebec:	2500      	movs	r5, #0
1004ebee:	9502      	str	r5, [sp, #8]
1004ebf0:	9201      	str	r2, [sp, #4]
1004ebf2:	9300      	str	r3, [sp, #0]
1004ebf4:	2300      	movs	r3, #0
1004ebf6:	2201      	movs	r2, #1
1004ebf8:	f7fd fb3e 	bl	1004c278 <aci_gap_set_security_requirements>
1004ebfc:	0003      	movs	r3, r0
1004ebfe:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
1004ec00:	4b08      	ldr	r3, [pc, #32]	@ (1004ec24 <BLE_Init+0x1a8>)
1004ec02:	789b      	ldrb	r3, [r3, #2]
1004ec04:	2b00      	cmp	r3, #0
1004ec06:	d005      	beq.n	1004ec14 <BLE_Init+0x198>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
1004ec08:	19bc      	adds	r4, r7, r6
1004ec0a:	2001      	movs	r0, #1
1004ec0c:	f002 fe64 	bl	100518d8 <aci_gap_configure_filter_accept_and_resolving_list>
1004ec10:	0003      	movs	r3, r0
1004ec12:	7023      	strb	r3, [r4, #0]
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");

}
1004ec14:	46c0      	nop			@ (mov r8, r8)
1004ec16:	46bd      	mov	sp, r7
1004ec18:	b015      	add	sp, #84	@ 0x54
1004ec1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ec1c:	10065c1c 	.word	0x10065c1c
1004ec20:	10065e74 	.word	0x10065e74
1004ec24:	20000dd8 	.word	0x20000dd8

1004ec28 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
1004ec28:	b580      	push	{r7, lr}
1004ec2a:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
1004ec2c:	2101      	movs	r1, #1
1004ec2e:	2001      	movs	r0, #1
1004ec30:	f002 fd3a 	bl	100516a8 <UTIL_SEQ_SetTask>
}
1004ec34:	46c0      	nop			@ (mov r8, r8)
1004ec36:	46bd      	mov	sp, r7
1004ec38:	bd80      	pop	{r7, pc}

1004ec3a <BLEStack_Process>:
static void BLEStack_Process(void)
{
1004ec3a:	b580      	push	{r7, lr}
1004ec3c:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
1004ec3e:	2001      	movs	r0, #1
1004ec40:	f002 fbf4 	bl	1005142c <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
1004ec44:	f003 fa28 	bl	10052098 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
1004ec48:	2001      	movs	r0, #1
1004ec4a:	f002 fbf9 	bl	10051440 <APP_DEBUG_SIGNAL_RESET>
}
1004ec4e:	46c0      	nop			@ (mov r8, r8)
1004ec50:	46bd      	mov	sp, r7
1004ec52:	bd80      	pop	{r7, pc}

1004ec54 <VTimer_Process>:

void VTimer_Process(void)
{
1004ec54:	b580      	push	{r7, lr}
1004ec56:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
1004ec58:	f7f9 fb9a 	bl	10048390 <HAL_RADIO_TIMER_Tick>
}
1004ec5c:	46c0      	nop			@ (mov r8, r8)
1004ec5e:	46bd      	mov	sp, r7
1004ec60:	bd80      	pop	{r7, pc}

1004ec62 <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
1004ec62:	b580      	push	{r7, lr}
1004ec64:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
1004ec66:	2100      	movs	r1, #0
1004ec68:	2002      	movs	r0, #2
1004ec6a:	f002 fd1d 	bl	100516a8 <UTIL_SEQ_SetTask>
}
1004ec6e:	46c0      	nop			@ (mov r8, r8)
1004ec70:	46bd      	mov	sp, r7
1004ec72:	bd80      	pop	{r7, pc}

1004ec74 <NVM_Process>:
void NVM_Process(void)
{
1004ec74:	b580      	push	{r7, lr}
1004ec76:	af00      	add	r7, sp, #0
  NVMDB_Tick();
1004ec78:	f7ff f9d0 	bl	1004e01c <NVMDB_Tick>
}
1004ec7c:	46c0      	nop			@ (mov r8, r8)
1004ec7e:	46bd      	mov	sp, r7
1004ec80:	bd80      	pop	{r7, pc}

1004ec82 <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
1004ec82:	b580      	push	{r7, lr}
1004ec84:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
1004ec86:	2101      	movs	r1, #1
1004ec88:	2004      	movs	r0, #4
1004ec8a:	f002 fd0d 	bl	100516a8 <UTIL_SEQ_SetTask>
}
1004ec8e:	46c0      	nop			@ (mov r8, r8)
1004ec90:	46bd      	mov	sp, r7
1004ec92:	bd80      	pop	{r7, pc}

1004ec94 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
1004ec94:	b580      	push	{r7, lr}
1004ec96:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
1004ec98:	f7ff ffe3 	bl	1004ec62 <VTimer_Process_Schedule>
}
1004ec9c:	46c0      	nop			@ (mov r8, r8)
1004ec9e:	46bd      	mov	sp, r7
1004eca0:	bd80      	pop	{r7, pc}

1004eca2 <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
1004eca2:	b580      	push	{r7, lr}
1004eca4:	b082      	sub	sp, #8
1004eca6:	af00      	add	r7, sp, #0
1004eca8:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
1004ecaa:	687b      	ldr	r3, [r7, #4]
1004ecac:	0018      	movs	r0, r3
1004ecae:	f00e f8f5 	bl	1005ce9c <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
1004ecb2:	f7ff ffd6 	bl	1004ec62 <VTimer_Process_Schedule>
  NVM_Process_Schedule();
1004ecb6:	f7ff ffe4 	bl	1004ec82 <NVM_Process_Schedule>
}
1004ecba:	46c0      	nop			@ (mov r8, r8)
1004ecbc:	46bd      	mov	sp, r7
1004ecbe:	b002      	add	sp, #8
1004ecc0:	bd80      	pop	{r7, pc}

1004ecc2 <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
1004ecc2:	b580      	push	{r7, lr}
1004ecc4:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
1004ecc6:	f7ff ffaf 	bl	1004ec28 <BLEStack_Process_Schedule>
}
1004ecca:	46c0      	nop			@ (mov r8, r8)
1004eccc:	46bd      	mov	sp, r7
1004ecce:	bd80      	pop	{r7, pc}

1004ecd0 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
1004ecd0:	b580      	push	{r7, lr}
1004ecd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
1004ecd4:	4b12      	ldr	r3, [pc, #72]	@ (1004ed20 <APP_BLE_Init+0x50>)
1004ecd6:	001a      	movs	r2, r3
1004ecd8:	2100      	movs	r1, #0
1004ecda:	2001      	movs	r0, #1
1004ecdc:	f002 fcc0 	bl	10051660 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
1004ece0:	4b10      	ldr	r3, [pc, #64]	@ (1004ed24 <APP_BLE_Init+0x54>)
1004ece2:	001a      	movs	r2, r3
1004ece4:	2100      	movs	r1, #0
1004ece6:	2002      	movs	r0, #2
1004ece8:	f002 fcba 	bl	10051660 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
1004ecec:	4b0e      	ldr	r3, [pc, #56]	@ (1004ed28 <APP_BLE_Init+0x58>)
1004ecee:	001a      	movs	r2, r3
1004ecf0:	2100      	movs	r1, #0
1004ecf2:	2004      	movs	r0, #4
1004ecf4:	f002 fcb4 	bl	10051660 <UTIL_SEQ_RegTask>
  ModulesInit();
1004ecf8:	f7ff feb2 	bl	1004ea60 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
1004ecfc:	f7ff febe 	bl	1004ea7c <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
1004ed00:	4b0a      	ldr	r3, [pc, #40]	@ (1004ed2c <APP_BLE_Init+0x5c>)
1004ed02:	2200      	movs	r2, #0
1004ed04:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
1004ed06:	4b09      	ldr	r3, [pc, #36]	@ (1004ed2c <APP_BLE_Init+0x5c>)
1004ed08:	2201      	movs	r2, #1
1004ed0a:	4252      	negs	r2, r2
1004ed0c:	819a      	strh	r2, [r3, #12]
  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
  APP_DBG_MSG("Services and Characteristics creation\n");
  USART_APP_Init();
1004ed0e:	f000 fc5b 	bl	1004f5c8 <USART_APP_Init>
  APP_DBG_MSG("\n");

  /* USER CODE BEGIN APP_BLE_Init_3 */

    /* Start to Advertise to accept a connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
1004ed12:	2001      	movs	r0, #1
1004ed14:	f000 f9ac 	bl	1004f070 <APP_BLE_Procedure_Gap_Peripheral>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
1004ed18:	46c0      	nop			@ (mov r8, r8)
}
1004ed1a:	46bd      	mov	sp, r7
1004ed1c:	bd80      	pop	{r7, pc}
1004ed1e:	46c0      	nop			@ (mov r8, r8)
1004ed20:	1004ec3b 	.word	0x1004ec3b
1004ed24:	1004ec55 	.word	0x1004ec55
1004ed28:	1004ec75 	.word	0x1004ec75
1004ed2c:	20000dd8 	.word	0x20000dd8

1004ed30 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
1004ed30:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ed32:	b099      	sub	sp, #100	@ 0x64
1004ed34:	af04      	add	r7, sp, #16
1004ed36:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
1004ed38:	234b      	movs	r3, #75	@ 0x4b
1004ed3a:	18fb      	adds	r3, r7, r3
1004ed3c:	2286      	movs	r2, #134	@ 0x86
1004ed3e:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
1004ed40:	687b      	ldr	r3, [r7, #4]
1004ed42:	781b      	ldrb	r3, [r3, #0]
1004ed44:	2b04      	cmp	r3, #4
1004ed46:	d004      	beq.n	1004ed52 <BLEEVT_App_Notification+0x22>
1004ed48:	687b      	ldr	r3, [r7, #4]
1004ed4a:	781b      	ldrb	r3, [r3, #0]
1004ed4c:	2b82      	cmp	r3, #130	@ 0x82
1004ed4e:	d000      	beq.n	1004ed52 <BLEEVT_App_Notification+0x22>
1004ed50:	e132      	b.n	1004efb8 <BLEEVT_App_Notification+0x288>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
1004ed52:	687b      	ldr	r3, [r7, #4]
1004ed54:	3301      	adds	r3, #1
1004ed56:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004ed58:	687b      	ldr	r3, [r7, #4]
1004ed5a:	781b      	ldrb	r3, [r3, #0]
1004ed5c:	2b04      	cmp	r3, #4
1004ed5e:	d103      	bne.n	1004ed68 <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
1004ed60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004ed62:	3302      	adds	r3, #2
1004ed64:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004ed66:	e005      	b.n	1004ed74 <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004ed68:	687b      	ldr	r3, [r7, #4]
1004ed6a:	3301      	adds	r3, #1
1004ed6c:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
1004ed6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004ed70:	3303      	adds	r3, #3
1004ed72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004ed74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004ed76:	781b      	ldrb	r3, [r3, #0]
1004ed78:	2bff      	cmp	r3, #255	@ 0xff
1004ed7a:	d100      	bne.n	1004ed7e <BLEEVT_App_Notification+0x4e>
1004ed7c:	e0a4      	b.n	1004eec8 <BLEEVT_App_Notification+0x198>
1004ed7e:	dd00      	ble.n	1004ed82 <BLEEVT_App_Notification+0x52>
1004ed80:	e11c      	b.n	1004efbc <BLEEVT_App_Notification+0x28c>
1004ed82:	2b3e      	cmp	r3, #62	@ 0x3e
1004ed84:	d02d      	beq.n	1004ede2 <BLEEVT_App_Notification+0xb2>
1004ed86:	dd00      	ble.n	1004ed8a <BLEEVT_App_Notification+0x5a>
1004ed88:	e118      	b.n	1004efbc <BLEEVT_App_Notification+0x28c>
1004ed8a:	2b05      	cmp	r3, #5
1004ed8c:	d003      	beq.n	1004ed96 <BLEEVT_App_Notification+0x66>
1004ed8e:	2b10      	cmp	r3, #16
1004ed90:	d100      	bne.n	1004ed94 <BLEEVT_App_Notification+0x64>
1004ed92:	e108      	b.n	1004efa6 <BLEEVT_App_Notification+0x276>

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/

    /* USER CODE END ECODE_DEFAULT*/
    break;
1004ed94:	e112      	b.n	1004efbc <BLEEVT_App_Notification+0x28c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
1004ed96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004ed98:	3302      	adds	r3, #2
1004ed9a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
1004ed9c:	68fb      	ldr	r3, [r7, #12]
1004ed9e:	785a      	ldrb	r2, [r3, #1]
1004eda0:	789b      	ldrb	r3, [r3, #2]
1004eda2:	021b      	lsls	r3, r3, #8
1004eda4:	4313      	orrs	r3, r2
1004eda6:	b29a      	uxth	r2, r3
1004eda8:	4b87      	ldr	r3, [pc, #540]	@ (1004efc8 <BLEEVT_App_Notification+0x298>)
1004edaa:	899b      	ldrh	r3, [r3, #12]
1004edac:	429a      	cmp	r2, r3
1004edae:	d106      	bne.n	1004edbe <BLEEVT_App_Notification+0x8e>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
1004edb0:	4b85      	ldr	r3, [pc, #532]	@ (1004efc8 <BLEEVT_App_Notification+0x298>)
1004edb2:	2201      	movs	r2, #1
1004edb4:	4252      	negs	r2, r2
1004edb6:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
1004edb8:	4b83      	ldr	r3, [pc, #524]	@ (1004efc8 <BLEEVT_App_Notification+0x298>)
1004edba:	2200      	movs	r2, #0
1004edbc:	739a      	strb	r2, [r3, #14]
      gap_cmd_resp_release();
1004edbe:	f000 fa2b 	bl	1004f218 <gap_cmd_resp_release>
      USARTHandleNotification.EvtOpcode = USART_DISCON_HANDLE_EVT;
1004edc2:	4b82      	ldr	r3, [pc, #520]	@ (1004efcc <BLEEVT_App_Notification+0x29c>)
1004edc4:	2201      	movs	r2, #1
1004edc6:	701a      	strb	r2, [r3, #0]
      USARTHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
1004edc8:	68fb      	ldr	r3, [r7, #12]
1004edca:	785a      	ldrb	r2, [r3, #1]
1004edcc:	789b      	ldrb	r3, [r3, #2]
1004edce:	021b      	lsls	r3, r3, #8
1004edd0:	4313      	orrs	r3, r2
1004edd2:	b29a      	uxth	r2, r3
1004edd4:	4b7d      	ldr	r3, [pc, #500]	@ (1004efcc <BLEEVT_App_Notification+0x29c>)
1004edd6:	805a      	strh	r2, [r3, #2]
      USART_APP_EvtRx(&USARTHandleNotification);
1004edd8:	4b7c      	ldr	r3, [pc, #496]	@ (1004efcc <BLEEVT_App_Notification+0x29c>)
1004edda:	0018      	movs	r0, r3
1004eddc:	f000 fbd8 	bl	1004f590 <USART_APP_EvtRx>
    break;
1004ede0:	e0ef      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
1004ede2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004ede4:	3302      	adds	r3, #2
1004ede6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_meta_evt->subevent)
1004ede8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004edea:	781b      	ldrb	r3, [r3, #0]
1004edec:	2b0c      	cmp	r3, #12
1004edee:	d00b      	beq.n	1004ee08 <BLEEVT_App_Notification+0xd8>
1004edf0:	dc68      	bgt.n	1004eec4 <BLEEVT_App_Notification+0x194>
1004edf2:	2b0a      	cmp	r3, #10
1004edf4:	d00e      	beq.n	1004ee14 <BLEEVT_App_Notification+0xe4>
1004edf6:	dc65      	bgt.n	1004eec4 <BLEEVT_App_Notification+0x194>
1004edf8:	2b01      	cmp	r3, #1
1004edfa:	d037      	beq.n	1004ee6c <BLEEVT_App_Notification+0x13c>
1004edfc:	2b03      	cmp	r3, #3
1004edfe:	d161      	bne.n	1004eec4 <BLEEVT_App_Notification+0x194>
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
1004ee00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ee02:	3301      	adds	r3, #1
1004ee04:	61bb      	str	r3, [r7, #24]
        break;
1004ee06:	e05e      	b.n	1004eec6 <BLEEVT_App_Notification+0x196>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
1004ee08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ee0a:	3301      	adds	r3, #1
1004ee0c:	623b      	str	r3, [r7, #32]
          gap_cmd_resp_release();
1004ee0e:	f000 fa03 	bl	1004f218 <gap_cmd_resp_release>
        break;
1004ee12:	e058      	b.n	1004eec6 <BLEEVT_App_Notification+0x196>
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
1004ee14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ee16:	3301      	adds	r3, #1
1004ee18:	61fb      	str	r3, [r7, #28]
          connection_complete_event(p_enhanced_conn_complete->Status,
1004ee1a:	69fb      	ldr	r3, [r7, #28]
1004ee1c:	781c      	ldrb	r4, [r3, #0]
1004ee1e:	69fb      	ldr	r3, [r7, #28]
1004ee20:	785a      	ldrb	r2, [r3, #1]
1004ee22:	789b      	ldrb	r3, [r3, #2]
1004ee24:	021b      	lsls	r3, r3, #8
1004ee26:	4313      	orrs	r3, r2
1004ee28:	b29d      	uxth	r5, r3
1004ee2a:	69fb      	ldr	r3, [r7, #28]
1004ee2c:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Peer_Address,
1004ee2e:	69fb      	ldr	r3, [r7, #28]
1004ee30:	3305      	adds	r3, #5
1004ee32:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
1004ee34:	69fb      	ldr	r3, [r7, #28]
1004ee36:	7dda      	ldrb	r2, [r3, #23]
1004ee38:	7e1b      	ldrb	r3, [r3, #24]
1004ee3a:	021b      	lsls	r3, r3, #8
1004ee3c:	4313      	orrs	r3, r2
1004ee3e:	b29a      	uxth	r2, r3
1004ee40:	69fb      	ldr	r3, [r7, #28]
1004ee42:	7e59      	ldrb	r1, [r3, #25]
1004ee44:	7e9b      	ldrb	r3, [r3, #26]
1004ee46:	021b      	lsls	r3, r3, #8
1004ee48:	430b      	orrs	r3, r1
1004ee4a:	b299      	uxth	r1, r3
1004ee4c:	69fb      	ldr	r3, [r7, #28]
1004ee4e:	7ed8      	ldrb	r0, [r3, #27]
1004ee50:	7f1b      	ldrb	r3, [r3, #28]
1004ee52:	021b      	lsls	r3, r3, #8
1004ee54:	4303      	orrs	r3, r0
1004ee56:	b29b      	uxth	r3, r3
1004ee58:	9302      	str	r3, [sp, #8]
1004ee5a:	9101      	str	r1, [sp, #4]
1004ee5c:	9200      	str	r2, [sp, #0]
1004ee5e:	4663      	mov	r3, ip
1004ee60:	0032      	movs	r2, r6
1004ee62:	0029      	movs	r1, r5
1004ee64:	0020      	movs	r0, r4
1004ee66:	f000 f8bf 	bl	1004efe8 <connection_complete_event>
        break;
1004ee6a:	e02c      	b.n	1004eec6 <BLEEVT_App_Notification+0x196>
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
1004ee6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ee6e:	3301      	adds	r3, #1
1004ee70:	617b      	str	r3, [r7, #20]
          connection_complete_event(p_conn_complete->Status,
1004ee72:	697b      	ldr	r3, [r7, #20]
1004ee74:	781c      	ldrb	r4, [r3, #0]
1004ee76:	697b      	ldr	r3, [r7, #20]
1004ee78:	785a      	ldrb	r2, [r3, #1]
1004ee7a:	789b      	ldrb	r3, [r3, #2]
1004ee7c:	021b      	lsls	r3, r3, #8
1004ee7e:	4313      	orrs	r3, r2
1004ee80:	b29d      	uxth	r5, r3
1004ee82:	697b      	ldr	r3, [r7, #20]
1004ee84:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Peer_Address,
1004ee86:	697b      	ldr	r3, [r7, #20]
1004ee88:	3305      	adds	r3, #5
1004ee8a:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
1004ee8c:	697b      	ldr	r3, [r7, #20]
1004ee8e:	7ada      	ldrb	r2, [r3, #11]
1004ee90:	7b1b      	ldrb	r3, [r3, #12]
1004ee92:	021b      	lsls	r3, r3, #8
1004ee94:	4313      	orrs	r3, r2
1004ee96:	b29a      	uxth	r2, r3
1004ee98:	697b      	ldr	r3, [r7, #20]
1004ee9a:	7b59      	ldrb	r1, [r3, #13]
1004ee9c:	7b9b      	ldrb	r3, [r3, #14]
1004ee9e:	021b      	lsls	r3, r3, #8
1004eea0:	430b      	orrs	r3, r1
1004eea2:	b299      	uxth	r1, r3
1004eea4:	697b      	ldr	r3, [r7, #20]
1004eea6:	7bd8      	ldrb	r0, [r3, #15]
1004eea8:	7c1b      	ldrb	r3, [r3, #16]
1004eeaa:	021b      	lsls	r3, r3, #8
1004eeac:	4303      	orrs	r3, r0
1004eeae:	b29b      	uxth	r3, r3
1004eeb0:	9302      	str	r3, [sp, #8]
1004eeb2:	9101      	str	r1, [sp, #4]
1004eeb4:	9200      	str	r2, [sp, #0]
1004eeb6:	4663      	mov	r3, ip
1004eeb8:	0032      	movs	r2, r6
1004eeba:	0029      	movs	r1, r5
1004eebc:	0020      	movs	r0, r4
1004eebe:	f000 f893 	bl	1004efe8 <connection_complete_event>
        break;
1004eec2:	e000      	b.n	1004eec6 <BLEEVT_App_Notification+0x196>
        break;
1004eec4:	46c0      	nop			@ (mov r8, r8)
    break;
1004eec6:	e07c      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
1004eec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004eeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
1004eecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004eece:	781a      	ldrb	r2, [r3, #0]
1004eed0:	785b      	ldrb	r3, [r3, #1]
1004eed2:	021b      	lsls	r3, r3, #8
1004eed4:	4313      	orrs	r3, r2
1004eed6:	b29b      	uxth	r3, r3
1004eed8:	4a3d      	ldr	r2, [pc, #244]	@ (1004efd0 <BLEEVT_App_Notification+0x2a0>)
1004eeda:	4293      	cmp	r3, r2
1004eedc:	d03b      	beq.n	1004ef56 <BLEEVT_App_Notification+0x226>
1004eede:	4a3c      	ldr	r2, [pc, #240]	@ (1004efd0 <BLEEVT_App_Notification+0x2a0>)
1004eee0:	4293      	cmp	r3, r2
1004eee2:	dc5a      	bgt.n	1004ef9a <BLEEVT_App_Notification+0x26a>
1004eee4:	2280      	movs	r2, #128	@ 0x80
1004eee6:	0112      	lsls	r2, r2, #4
1004eee8:	4293      	cmp	r3, r2
1004eeea:	d01c      	beq.n	1004ef26 <BLEEVT_App_Notification+0x1f6>
1004eeec:	2280      	movs	r2, #128	@ 0x80
1004eeee:	0112      	lsls	r2, r2, #4
1004eef0:	4293      	cmp	r3, r2
1004eef2:	dc52      	bgt.n	1004ef9a <BLEEVT_App_Notification+0x26a>
1004eef4:	4a37      	ldr	r2, [pc, #220]	@ (1004efd4 <BLEEVT_App_Notification+0x2a4>)
1004eef6:	4293      	cmp	r3, r2
1004eef8:	d051      	beq.n	1004ef9e <BLEEVT_App_Notification+0x26e>
1004eefa:	4a36      	ldr	r2, [pc, #216]	@ (1004efd4 <BLEEVT_App_Notification+0x2a4>)
1004eefc:	4293      	cmp	r3, r2
1004eefe:	dc4c      	bgt.n	1004ef9a <BLEEVT_App_Notification+0x26a>
1004ef00:	4a35      	ldr	r2, [pc, #212]	@ (1004efd8 <BLEEVT_App_Notification+0x2a8>)
1004ef02:	4293      	cmp	r3, r2
1004ef04:	d013      	beq.n	1004ef2e <BLEEVT_App_Notification+0x1fe>
1004ef06:	2281      	movs	r2, #129	@ 0x81
1004ef08:	00d2      	lsls	r2, r2, #3
1004ef0a:	4293      	cmp	r3, r2
1004ef0c:	da45      	bge.n	1004ef9a <BLEEVT_App_Notification+0x26a>
1004ef0e:	4a33      	ldr	r2, [pc, #204]	@ (1004efdc <BLEEVT_App_Notification+0x2ac>)
1004ef10:	4293      	cmp	r3, r2
1004ef12:	d010      	beq.n	1004ef36 <BLEEVT_App_Notification+0x206>
1004ef14:	4a31      	ldr	r2, [pc, #196]	@ (1004efdc <BLEEVT_App_Notification+0x2ac>)
1004ef16:	4293      	cmp	r3, r2
1004ef18:	dc3f      	bgt.n	1004ef9a <BLEEVT_App_Notification+0x26a>
1004ef1a:	2b04      	cmp	r3, #4
1004ef1c:	d041      	beq.n	1004efa2 <BLEEVT_App_Notification+0x272>
1004ef1e:	4a30      	ldr	r2, [pc, #192]	@ (1004efe0 <BLEEVT_App_Notification+0x2b0>)
1004ef20:	4293      	cmp	r3, r2
1004ef22:	d014      	beq.n	1004ef4e <BLEEVT_App_Notification+0x21e>
        break;
1004ef24:	e039      	b.n	1004ef9a <BLEEVT_App_Notification+0x26a>
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
1004ef26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ef28:	3302      	adds	r3, #2
1004ef2a:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
1004ef2c:	e03a      	b.n	1004efa4 <BLEEVT_App_Notification+0x274>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
1004ef2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ef30:	3302      	adds	r3, #2
1004ef32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
1004ef34:	e036      	b.n	1004efa4 <BLEEVT_App_Notification+0x274>
          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
1004ef36:	4b24      	ldr	r3, [pc, #144]	@ (1004efc8 <BLEEVT_App_Notification+0x298>)
1004ef38:	899b      	ldrh	r3, [r3, #12]
1004ef3a:	224b      	movs	r2, #75	@ 0x4b
1004ef3c:	18bc      	adds	r4, r7, r2
1004ef3e:	4a29      	ldr	r2, [pc, #164]	@ (1004efe4 <BLEEVT_App_Notification+0x2b4>)
1004ef40:	0011      	movs	r1, r2
1004ef42:	0018      	movs	r0, r3
1004ef44:	f7fd f9c7 	bl	1004c2d6 <aci_gap_passkey_resp>
1004ef48:	0003      	movs	r3, r0
1004ef4a:	7023      	strb	r3, [r4, #0]
        break;
1004ef4c:	e02a      	b.n	1004efa4 <BLEEVT_App_Notification+0x274>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
1004ef4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ef50:	3302      	adds	r3, #2
1004ef52:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
1004ef54:	e026      	b.n	1004efa4 <BLEEVT_App_Notification+0x274>
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
1004ef56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ef58:	3302      	adds	r3, #2
1004ef5a:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
1004ef5c:	2437      	movs	r4, #55	@ 0x37
1004ef5e:	193b      	adds	r3, r7, r4
1004ef60:	2208      	movs	r2, #8
1004ef62:	701a      	strb	r2, [r3, #0]
          aci_gatt_srv_resp(p_read->Connection_Handle,
1004ef64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ef66:	781a      	ldrb	r2, [r3, #0]
1004ef68:	785b      	ldrb	r3, [r3, #1]
1004ef6a:	021b      	lsls	r3, r3, #8
1004ef6c:	4313      	orrs	r3, r2
1004ef6e:	b298      	uxth	r0, r3
1004ef70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ef72:	789a      	ldrb	r2, [r3, #2]
1004ef74:	78db      	ldrb	r3, [r3, #3]
1004ef76:	021b      	lsls	r3, r3, #8
1004ef78:	4313      	orrs	r3, r2
1004ef7a:	b299      	uxth	r1, r3
1004ef7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ef7e:	791a      	ldrb	r2, [r3, #4]
1004ef80:	795b      	ldrb	r3, [r3, #5]
1004ef82:	021b      	lsls	r3, r3, #8
1004ef84:	4313      	orrs	r3, r2
1004ef86:	b29a      	uxth	r2, r3
1004ef88:	193b      	adds	r3, r7, r4
1004ef8a:	781b      	ldrb	r3, [r3, #0]
1004ef8c:	2400      	movs	r4, #0
1004ef8e:	9401      	str	r4, [sp, #4]
1004ef90:	2400      	movs	r4, #0
1004ef92:	9400      	str	r4, [sp, #0]
1004ef94:	f7fd f9ec 	bl	1004c370 <aci_gatt_srv_resp>
          break;
1004ef98:	e004      	b.n	1004efa4 <BLEEVT_App_Notification+0x274>
        break;
1004ef9a:	46c0      	nop			@ (mov r8, r8)
1004ef9c:	e011      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
        break;
1004ef9e:	46c0      	nop			@ (mov r8, r8)
1004efa0:	e00f      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
        break;
1004efa2:	46c0      	nop			@ (mov r8, r8)
    break;
1004efa4:	e00d      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
1004efa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004efa8:	3302      	adds	r3, #2
1004efaa:	613b      	str	r3, [r7, #16]
      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
1004efac:	693b      	ldr	r3, [r7, #16]
1004efae:	781b      	ldrb	r3, [r3, #0]
1004efb0:	2b03      	cmp	r3, #3
1004efb2:	d805      	bhi.n	1004efc0 <BLEEVT_App_Notification+0x290>
        NVIC_SystemReset();
1004efb4:	f7ff fd42 	bl	1004ea3c <__NVIC_SystemReset>
    return;
1004efb8:	46c0      	nop			@ (mov r8, r8)
1004efba:	e002      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
    break;
1004efbc:	46c0      	nop			@ (mov r8, r8)
1004efbe:	e000      	b.n	1004efc2 <BLEEVT_App_Notification+0x292>
    break;
1004efc0:	46c0      	nop			@ (mov r8, r8)
  }
}
1004efc2:	46bd      	mov	sp, r7
1004efc4:	b015      	add	sp, #84	@ 0x54
1004efc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004efc8:	20000dd8 	.word	0x20000dd8
1004efcc:	20000de8 	.word	0x20000de8
1004efd0:	00000c19 	.word	0x00000c19
1004efd4:	0000040a 	.word	0x0000040a
1004efd8:	00000407 	.word	0x00000407
1004efdc:	00000402 	.word	0x00000402
1004efe0:	00000401 	.word	0x00000401
1004efe4:	0001b207 	.word	0x0001b207

1004efe8 <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
1004efe8:	b590      	push	{r4, r7, lr}
1004efea:	b083      	sub	sp, #12
1004efec:	af00      	add	r7, sp, #0
1004efee:	0004      	movs	r4, r0
1004eff0:	0008      	movs	r0, r1
1004eff2:	0011      	movs	r1, r2
1004eff4:	603b      	str	r3, [r7, #0]
1004eff6:	1dfb      	adds	r3, r7, #7
1004eff8:	1c22      	adds	r2, r4, #0
1004effa:	701a      	strb	r2, [r3, #0]
1004effc:	1d3b      	adds	r3, r7, #4
1004effe:	1c02      	adds	r2, r0, #0
1004f000:	801a      	strh	r2, [r3, #0]
1004f002:	1dbb      	adds	r3, r7, #6
1004f004:	1c0a      	adds	r2, r1, #0
1004f006:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
1004f008:	1dfb      	adds	r3, r7, #7
1004f00a:	781b      	ldrb	r3, [r3, #0]
1004f00c:	2b00      	cmp	r3, #0
1004f00e:	d003      	beq.n	1004f018 <connection_complete_event+0x30>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
1004f010:	4b10      	ldr	r3, [pc, #64]	@ (1004f054 <connection_complete_event+0x6c>)
1004f012:	2200      	movs	r2, #0
1004f014:	739a      	strb	r2, [r3, #14]
    return;
1004f016:	e019      	b.n	1004f04c <connection_complete_event+0x64>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
1004f018:	4b0e      	ldr	r3, [pc, #56]	@ (1004f054 <connection_complete_event+0x6c>)
1004f01a:	7b9b      	ldrb	r3, [r3, #14]
1004f01c:	2b01      	cmp	r3, #1
1004f01e:	d103      	bne.n	1004f028 <connection_complete_event+0x40>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
1004f020:	4b0c      	ldr	r3, [pc, #48]	@ (1004f054 <connection_complete_event+0x6c>)
1004f022:	2203      	movs	r2, #3
1004f024:	739a      	strb	r2, [r3, #14]
1004f026:	e002      	b.n	1004f02e <connection_complete_event+0x46>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
1004f028:	4b0a      	ldr	r3, [pc, #40]	@ (1004f054 <connection_complete_event+0x6c>)
1004f02a:	2202      	movs	r2, #2
1004f02c:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
1004f02e:	4b09      	ldr	r3, [pc, #36]	@ (1004f054 <connection_complete_event+0x6c>)
1004f030:	1d3a      	adds	r2, r7, #4
1004f032:	8812      	ldrh	r2, [r2, #0]
1004f034:	819a      	strh	r2, [r3, #12]

  USARTHandleNotification.EvtOpcode = USART_CONN_HANDLE_EVT;
1004f036:	4b08      	ldr	r3, [pc, #32]	@ (1004f058 <connection_complete_event+0x70>)
1004f038:	2200      	movs	r2, #0
1004f03a:	701a      	strb	r2, [r3, #0]
  USARTHandleNotification.ConnectionHandle = Connection_Handle;
1004f03c:	4b06      	ldr	r3, [pc, #24]	@ (1004f058 <connection_complete_event+0x70>)
1004f03e:	1d3a      	adds	r2, r7, #4
1004f040:	8812      	ldrh	r2, [r2, #0]
1004f042:	805a      	strh	r2, [r3, #2]
  USART_APP_EvtRx(&USARTHandleNotification);
1004f044:	4b04      	ldr	r3, [pc, #16]	@ (1004f058 <connection_complete_event+0x70>)
1004f046:	0018      	movs	r0, r3
1004f048:	f000 faa2 	bl	1004f590 <USART_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
1004f04c:	46bd      	mov	sp, r7
1004f04e:	b003      	add	sp, #12
1004f050:	bd90      	pop	{r4, r7, pc}
1004f052:	46c0      	nop			@ (mov r8, r8)
1004f054:	20000dd8 	.word	0x20000dd8
1004f058:	20000de8 	.word	0x20000de8

1004f05c <APP_BLE_Get_Server_Connection_Status>:
/* USER CODE BEGIN EVT_VENDOR_3 */

/* USER CODE END EVT_VENDOR_3 */

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
1004f05c:	b580      	push	{r7, lr}
1004f05e:	af00      	add	r7, sp, #0
  return bleAppContext.Device_Connection_Status;
1004f060:	4b02      	ldr	r3, [pc, #8]	@ (1004f06c <APP_BLE_Get_Server_Connection_Status+0x10>)
1004f062:	7b9b      	ldrb	r3, [r3, #14]
}
1004f064:	0018      	movs	r0, r3
1004f066:	46bd      	mov	sp, r7
1004f068:	bd80      	pop	{r7, pc}
1004f06a:	46c0      	nop			@ (mov r8, r8)
1004f06c:	20000dd8 	.word	0x20000dd8

1004f070 <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
1004f070:	b5b0      	push	{r4, r5, r7, lr}
1004f072:	b094      	sub	sp, #80	@ 0x50
1004f074:	af0c      	add	r7, sp, #48	@ 0x30
1004f076:	0002      	movs	r2, r0
1004f078:	1dfb      	adds	r3, r7, #7
1004f07a:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
1004f07c:	2380      	movs	r3, #128	@ 0x80
1004f07e:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
1004f080:	23a0      	movs	r3, #160	@ 0xa0
1004f082:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
1004f084:	1dfb      	adds	r3, r7, #7
1004f086:	781b      	ldrb	r3, [r3, #0]
1004f088:	2b05      	cmp	r3, #5
1004f08a:	d834      	bhi.n	1004f0f6 <APP_BLE_Procedure_Gap_Peripheral+0x86>
1004f08c:	009a      	lsls	r2, r3, #2
1004f08e:	4b5f      	ldr	r3, [pc, #380]	@ (1004f20c <APP_BLE_Procedure_Gap_Peripheral+0x19c>)
1004f090:	18d3      	adds	r3, r2, r3
1004f092:	681b      	ldr	r3, [r3, #0]
1004f094:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
1004f096:	2380      	movs	r3, #128	@ 0x80
1004f098:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
1004f09a:	23a0      	movs	r3, #160	@ 0xa0
1004f09c:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
1004f09e:	2304      	movs	r3, #4
1004f0a0:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
1004f0a2:	e02b      	b.n	1004f0fc <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
1004f0a4:	23c8      	movs	r3, #200	@ 0xc8
1004f0a6:	00db      	lsls	r3, r3, #3
1004f0a8:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
1004f0aa:	23fa      	movs	r3, #250	@ 0xfa
1004f0ac:	011b      	lsls	r3, r3, #4
1004f0ae:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
1004f0b0:	2305      	movs	r3, #5
1004f0b2:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
1004f0b4:	e022      	b.n	1004f0fc <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
1004f0b6:	2300      	movs	r3, #0
1004f0b8:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
1004f0ba:	e01f      	b.n	1004f0fc <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
1004f0bc:	23c8      	movs	r3, #200	@ 0xc8
1004f0be:	009b      	lsls	r3, r3, #2
1004f0c0:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
1004f0c2:	23c8      	movs	r3, #200	@ 0xc8
1004f0c4:	009b      	lsls	r3, r3, #2
1004f0c6:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
1004f0c8:	2300      	movs	r3, #0
1004f0ca:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
1004f0cc:	23fa      	movs	r3, #250	@ 0xfa
1004f0ce:	005b      	lsls	r3, r3, #1
1004f0d0:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */

      /* USER CODE END CONN_PARAM_UPDATE */
      break;
1004f0d2:	e013      	b.n	1004f0fc <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
1004f0d4:	4b4e      	ldr	r3, [pc, #312]	@ (1004f210 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1004f0d6:	899b      	ldrh	r3, [r3, #12]
1004f0d8:	250f      	movs	r5, #15
1004f0da:	197c      	adds	r4, r7, r5
1004f0dc:	2113      	movs	r1, #19
1004f0de:	0018      	movs	r0, r3
1004f0e0:	f7fd f8a4 	bl	1004c22c <aci_gap_terminate>
1004f0e4:	0003      	movs	r3, r0
1004f0e6:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1004f0e8:	197b      	adds	r3, r7, r5
1004f0ea:	781b      	ldrb	r3, [r3, #0]
1004f0ec:	2b00      	cmp	r3, #0
1004f0ee:	d104      	bne.n	1004f0fa <APP_BLE_Procedure_Gap_Peripheral+0x8a>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
      }
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
1004f0f0:	f000 f89a 	bl	1004f228 <gap_cmd_resp_wait>
      }
      break;
1004f0f4:	e001      	b.n	1004f0fa <APP_BLE_Procedure_Gap_Peripheral+0x8a>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
1004f0f6:	46c0      	nop			@ (mov r8, r8)
1004f0f8:	e000      	b.n	1004f0fc <APP_BLE_Procedure_Gap_Peripheral+0x8c>
      break;
1004f0fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
1004f0fc:	1dfb      	adds	r3, r7, #7
1004f0fe:	781b      	ldrb	r3, [r3, #0]
1004f100:	2b06      	cmp	r3, #6
1004f102:	d100      	bne.n	1004f106 <APP_BLE_Procedure_Gap_Peripheral+0x96>
1004f104:	e078      	b.n	1004f1f8 <APP_BLE_Procedure_Gap_Peripheral+0x188>
1004f106:	dd00      	ble.n	1004f10a <APP_BLE_Procedure_Gap_Peripheral+0x9a>
1004f108:	e078      	b.n	1004f1fc <APP_BLE_Procedure_Gap_Peripheral+0x18c>
1004f10a:	2b04      	cmp	r3, #4
1004f10c:	d061      	beq.n	1004f1d2 <APP_BLE_Procedure_Gap_Peripheral+0x162>
1004f10e:	dd00      	ble.n	1004f112 <APP_BLE_Procedure_Gap_Peripheral+0xa2>
1004f110:	e074      	b.n	1004f1fc <APP_BLE_Procedure_Gap_Peripheral+0x18c>
1004f112:	2b01      	cmp	r3, #1
1004f114:	dc02      	bgt.n	1004f11c <APP_BLE_Procedure_Gap_Peripheral+0xac>
1004f116:	2b00      	cmp	r3, #0
1004f118:	da03      	bge.n	1004f122 <APP_BLE_Procedure_Gap_Peripheral+0xb2>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
1004f11a:	e06f      	b.n	1004f1fc <APP_BLE_Procedure_Gap_Peripheral+0x18c>
  switch(ProcGapPeripheralId)
1004f11c:	2b02      	cmp	r3, #2
1004f11e:	d046      	beq.n	1004f1ae <APP_BLE_Procedure_Gap_Peripheral+0x13e>
      break;
1004f120:	e06c      	b.n	1004f1fc <APP_BLE_Procedure_Gap_Peripheral+0x18c>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
1004f122:	2308      	movs	r3, #8
1004f124:	18fb      	adds	r3, r7, r3
1004f126:	0018      	movs	r0, r3
1004f128:	2306      	movs	r3, #6
1004f12a:	001a      	movs	r2, r3
1004f12c:	2100      	movs	r1, #0
1004f12e:	f015 fd8d 	bl	10064c4c <memset>
      status = aci_gap_set_advertising_configuration(0,
1004f132:	250f      	movs	r5, #15
1004f134:	197c      	adds	r4, r7, r5
1004f136:	69fa      	ldr	r2, [r7, #28]
1004f138:	2300      	movs	r3, #0
1004f13a:	930a      	str	r3, [sp, #40]	@ 0x28
1004f13c:	2300      	movs	r3, #0
1004f13e:	9309      	str	r3, [sp, #36]	@ 0x24
1004f140:	2301      	movs	r3, #1
1004f142:	9308      	str	r3, [sp, #32]
1004f144:	2300      	movs	r3, #0
1004f146:	9307      	str	r3, [sp, #28]
1004f148:	2301      	movs	r3, #1
1004f14a:	9306      	str	r3, [sp, #24]
1004f14c:	2300      	movs	r3, #0
1004f14e:	9305      	str	r3, [sp, #20]
1004f150:	2300      	movs	r3, #0
1004f152:	9304      	str	r3, [sp, #16]
1004f154:	2300      	movs	r3, #0
1004f156:	9303      	str	r3, [sp, #12]
1004f158:	2300      	movs	r3, #0
1004f15a:	9302      	str	r3, [sp, #8]
1004f15c:	2307      	movs	r3, #7
1004f15e:	9301      	str	r3, [sp, #4]
1004f160:	69bb      	ldr	r3, [r7, #24]
1004f162:	9300      	str	r3, [sp, #0]
1004f164:	0013      	movs	r3, r2
1004f166:	2213      	movs	r2, #19
1004f168:	2102      	movs	r1, #2
1004f16a:	2000      	movs	r0, #0
1004f16c:	f002 fbe0 	bl	10051930 <aci_gap_set_advertising_configuration>
1004f170:	0003      	movs	r3, r0
1004f172:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1004f174:	197b      	adds	r3, r7, r5
1004f176:	781b      	ldrb	r3, [r3, #0]
1004f178:	2b00      	cmp	r3, #0
1004f17a:	d103      	bne.n	1004f184 <APP_BLE_Procedure_Gap_Peripheral+0x114>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
1004f17c:	697b      	ldr	r3, [r7, #20]
1004f17e:	b2da      	uxtb	r2, r3
1004f180:	4b23      	ldr	r3, [pc, #140]	@ (1004f210 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1004f182:	739a      	strb	r2, [r3, #14]
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
1004f184:	250f      	movs	r5, #15
1004f186:	197c      	adds	r4, r7, r5
1004f188:	4b22      	ldr	r3, [pc, #136]	@ (1004f214 <APP_BLE_Procedure_Gap_Peripheral+0x1a4>)
1004f18a:	2203      	movs	r2, #3
1004f18c:	2103      	movs	r1, #3
1004f18e:	2000      	movs	r0, #0
1004f190:	f002 fc03 	bl	1005199a <aci_gap_set_advertising_data>
1004f194:	0003      	movs	r3, r0
1004f196:	7023      	strb	r3, [r4, #0]
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
1004f198:	197c      	adds	r4, r7, r5
1004f19a:	2308      	movs	r3, #8
1004f19c:	18fb      	adds	r3, r7, r3
1004f19e:	001a      	movs	r2, r3
1004f1a0:	2101      	movs	r1, #1
1004f1a2:	2001      	movs	r0, #1
1004f1a4:	f002 fbfd 	bl	100519a2 <aci_gap_set_advertising_enable>
1004f1a8:	0003      	movs	r3, r0
1004f1aa:	7023      	strb	r3, [r4, #0]
      break;
1004f1ac:	e029      	b.n	1004f202 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
1004f1ae:	250f      	movs	r5, #15
1004f1b0:	197c      	adds	r4, r7, r5
1004f1b2:	2200      	movs	r2, #0
1004f1b4:	2100      	movs	r1, #0
1004f1b6:	2000      	movs	r0, #0
1004f1b8:	f002 fbf3 	bl	100519a2 <aci_gap_set_advertising_enable>
1004f1bc:	0003      	movs	r3, r0
1004f1be:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1004f1c0:	197b      	adds	r3, r7, r5
1004f1c2:	781b      	ldrb	r3, [r3, #0]
1004f1c4:	2b00      	cmp	r3, #0
1004f1c6:	d11b      	bne.n	1004f200 <APP_BLE_Procedure_Gap_Peripheral+0x190>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
1004f1c8:	697b      	ldr	r3, [r7, #20]
1004f1ca:	b2da      	uxtb	r2, r3
1004f1cc:	4b10      	ldr	r3, [pc, #64]	@ (1004f210 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1004f1ce:	739a      	strb	r2, [r3, #14]
      break;
1004f1d0:	e016      	b.n	1004f200 <APP_BLE_Procedure_Gap_Peripheral+0x190>
       status = aci_l2cap_connection_parameter_update_req(
1004f1d2:	4b0f      	ldr	r3, [pc, #60]	@ (1004f210 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1004f1d4:	8998      	ldrh	r0, [r3, #12]
1004f1d6:	69fb      	ldr	r3, [r7, #28]
1004f1d8:	b299      	uxth	r1, r3
1004f1da:	69bb      	ldr	r3, [r7, #24]
1004f1dc:	b29a      	uxth	r2, r3
1004f1de:	697b      	ldr	r3, [r7, #20]
1004f1e0:	b29d      	uxth	r5, r3
1004f1e2:	693b      	ldr	r3, [r7, #16]
1004f1e4:	b29b      	uxth	r3, r3
1004f1e6:	240f      	movs	r4, #15
1004f1e8:	193c      	adds	r4, r7, r4
1004f1ea:	9300      	str	r3, [sp, #0]
1004f1ec:	002b      	movs	r3, r5
1004f1ee:	f7fd f8e8 	bl	1004c3c2 <aci_l2cap_connection_parameter_update_req>
1004f1f2:	0003      	movs	r3, r0
1004f1f4:	7023      	strb	r3, [r4, #0]
      break;
1004f1f6:	e004      	b.n	1004f202 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
1004f1f8:	46c0      	nop			@ (mov r8, r8)
1004f1fa:	e002      	b.n	1004f202 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
1004f1fc:	46c0      	nop			@ (mov r8, r8)
1004f1fe:	e000      	b.n	1004f202 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
1004f200:	46c0      	nop			@ (mov r8, r8)
  }
  return;
1004f202:	46c0      	nop			@ (mov r8, r8)
}
1004f204:	46bd      	mov	sp, r7
1004f206:	b008      	add	sp, #32
1004f208:	bdb0      	pop	{r4, r5, r7, pc}
1004f20a:	46c0      	nop			@ (mov r8, r8)
1004f20c:	10065e90 	.word	0x10065e90
1004f210:	20000dd8 	.word	0x20000dd8
1004f214:	20001268 	.word	0x20001268

1004f218 <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
1004f218:	b580      	push	{r7, lr}
1004f21a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
1004f21c:	2001      	movs	r0, #1
1004f21e:	f002 fa6f 	bl	10051700 <UTIL_SEQ_SetEvt>
  return;
1004f222:	46c0      	nop			@ (mov r8, r8)
}
1004f224:	46bd      	mov	sp, r7
1004f226:	bd80      	pop	{r7, pc}

1004f228 <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
1004f228:	b580      	push	{r7, lr}
1004f22a:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
1004f22c:	2001      	movs	r0, #1
1004f22e:	f002 fa85 	bl	1005173c <UTIL_SEQ_WaitEvt>
  return;
1004f232:	46c0      	nop			@ (mov r8, r8)
}
1004f234:	46bd      	mov	sp, r7
1004f236:	bd80      	pop	{r7, pc}

1004f238 <USART_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t USART_EventHandler(aci_blecore_event *p_evt)
{
1004f238:	b580      	push	{r7, lr}
1004f23a:	b08e      	sub	sp, #56	@ 0x38
1004f23c:	af00      	add	r7, sp, #0
1004f23e:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
1004f240:	2337      	movs	r3, #55	@ 0x37
1004f242:	18fb      	adds	r3, r7, r3
1004f244:	2200      	movs	r2, #0
1004f246:	701a      	strb	r2, [r3, #0]
  USART_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
1004f248:	687b      	ldr	r3, [r7, #4]
1004f24a:	781a      	ldrb	r2, [r3, #0]
1004f24c:	785b      	ldrb	r3, [r3, #1]
1004f24e:	021b      	lsls	r3, r3, #8
1004f250:	4313      	orrs	r3, r2
1004f252:	b29b      	uxth	r3, r3
1004f254:	4a62      	ldr	r2, [pc, #392]	@ (1004f3e0 <USART_EventHandler+0x1a8>)
1004f256:	4694      	mov	ip, r2
1004f258:	4463      	add	r3, ip
1004f25a:	2b19      	cmp	r3, #25
1004f25c:	d900      	bls.n	1004f260 <USART_EventHandler+0x28>
1004f25e:	e0b1      	b.n	1004f3c4 <USART_EventHandler+0x18c>
1004f260:	009a      	lsls	r2, r3, #2
1004f262:	4b60      	ldr	r3, [pc, #384]	@ (1004f3e4 <USART_EventHandler+0x1ac>)
1004f264:	18d3      	adds	r3, r2, r3
1004f266:	681b      	ldr	r3, [r3, #0]
1004f268:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
1004f26a:	687b      	ldr	r3, [r7, #4]
1004f26c:	3302      	adds	r3, #2
1004f26e:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
1004f270:	6a3b      	ldr	r3, [r7, #32]
1004f272:	781a      	ldrb	r2, [r3, #0]
1004f274:	785b      	ldrb	r3, [r3, #1]
1004f276:	021b      	lsls	r3, r3, #8
1004f278:	4313      	orrs	r3, r2
1004f27a:	b29a      	uxth	r2, r3
1004f27c:	210c      	movs	r1, #12
1004f27e:	187b      	adds	r3, r7, r1
1004f280:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
1004f282:	6a3b      	ldr	r3, [r7, #32]
1004f284:	791a      	ldrb	r2, [r3, #4]
1004f286:	795b      	ldrb	r3, [r3, #5]
1004f288:	021b      	lsls	r3, r3, #8
1004f28a:	4313      	orrs	r3, r2
1004f28c:	b29a      	uxth	r2, r3
1004f28e:	187b      	adds	r3, r7, r1
1004f290:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
1004f292:	6a3b      	ldr	r3, [r7, #32]
1004f294:	799a      	ldrb	r2, [r3, #6]
1004f296:	79db      	ldrb	r3, [r3, #7]
1004f298:	021b      	lsls	r3, r3, #8
1004f29a:	4313      	orrs	r3, r2
1004f29c:	b29b      	uxth	r3, r3
1004f29e:	b2da      	uxtb	r2, r3
1004f2a0:	187b      	adds	r3, r7, r1
1004f2a2:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
1004f2a4:	6a3b      	ldr	r3, [r7, #32]
1004f2a6:	3308      	adds	r3, #8
1004f2a8:	001a      	movs	r2, r3
1004f2aa:	187b      	adds	r3, r7, r1
1004f2ac:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004f2ae:	6a3b      	ldr	r3, [r7, #32]
1004f2b0:	791a      	ldrb	r2, [r3, #4]
1004f2b2:	795b      	ldrb	r3, [r3, #5]
1004f2b4:	021b      	lsls	r3, r3, #8
1004f2b6:	4313      	orrs	r3, r2
1004f2b8:	b29b      	uxth	r3, r3
1004f2ba:	001a      	movs	r2, r3
1004f2bc:	4b4a      	ldr	r3, [pc, #296]	@ (1004f3e8 <USART_EventHandler+0x1b0>)
1004f2be:	889b      	ldrh	r3, [r3, #4]
1004f2c0:	3301      	adds	r3, #1
1004f2c2:	429a      	cmp	r2, r3
1004f2c4:	d10b      	bne.n	1004f2de <USART_EventHandler+0xa6>
      {
        return_value = BLEEVT_Ack;
1004f2c6:	2337      	movs	r3, #55	@ 0x37
1004f2c8:	18fb      	adds	r3, r7, r3
1004f2ca:	2201      	movs	r2, #1
1004f2cc:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = USART_RX_WRITE_NO_RESP_EVT;
1004f2ce:	187b      	adds	r3, r7, r1
1004f2d0:	2201      	movs	r2, #1
1004f2d2:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

        /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        USART_Notification(&notification);
1004f2d4:	187b      	adds	r3, r7, r1
1004f2d6:	0018      	movs	r0, r3
1004f2d8:	f000 f914 	bl	1004f504 <USART_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
1004f2dc:	e074      	b.n	1004f3c8 <USART_EventHandler+0x190>
      else if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004f2de:	6a3b      	ldr	r3, [r7, #32]
1004f2e0:	791a      	ldrb	r2, [r3, #4]
1004f2e2:	795b      	ldrb	r3, [r3, #5]
1004f2e4:	021b      	lsls	r3, r3, #8
1004f2e6:	4313      	orrs	r3, r2
1004f2e8:	b29b      	uxth	r3, r3
1004f2ea:	001a      	movs	r2, r3
1004f2ec:	4b3e      	ldr	r3, [pc, #248]	@ (1004f3e8 <USART_EventHandler+0x1b0>)
1004f2ee:	88db      	ldrh	r3, [r3, #6]
1004f2f0:	3301      	adds	r3, #1
1004f2f2:	429a      	cmp	r2, r3
1004f2f4:	d168      	bne.n	1004f3c8 <USART_EventHandler+0x190>
        return_value = BLEEVT_Ack;
1004f2f6:	2337      	movs	r3, #55	@ 0x37
1004f2f8:	18fb      	adds	r3, r7, r3
1004f2fa:	2201      	movs	r2, #1
1004f2fc:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = USART_REQ_TX_WRITE_EVT;
1004f2fe:	210c      	movs	r1, #12
1004f300:	187b      	adds	r3, r7, r1
1004f302:	2203      	movs	r2, #3
1004f304:	701a      	strb	r2, [r3, #0]
        USART_Notification(&notification);
1004f306:	187b      	adds	r3, r7, r1
1004f308:	0018      	movs	r0, r3
1004f30a:	f000 f8fb 	bl	1004f504 <USART_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
1004f30e:	e05b      	b.n	1004f3c8 <USART_EventHandler+0x190>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
1004f310:	687b      	ldr	r3, [r7, #4]
1004f312:	3302      	adds	r3, #2
1004f314:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if(p_read->Attribute_Handle == (USART_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004f316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004f318:	791a      	ldrb	r2, [r3, #4]
1004f31a:	795b      	ldrb	r3, [r3, #5]
1004f31c:	021b      	lsls	r3, r3, #8
1004f31e:	4313      	orrs	r3, r2
1004f320:	b29b      	uxth	r3, r3
1004f322:	001a      	movs	r2, r3
1004f324:	4b30      	ldr	r3, [pc, #192]	@ (1004f3e8 <USART_EventHandler+0x1b0>)
1004f326:	885b      	ldrh	r3, [r3, #2]
1004f328:	3301      	adds	r3, #1
1004f32a:	429a      	cmp	r2, r3
1004f32c:	d10c      	bne.n	1004f348 <USART_EventHandler+0x110>
	  {
		return_value = BLEEVT_Ack;
1004f32e:	2337      	movs	r3, #55	@ 0x37
1004f330:	18fb      	adds	r3, r7, r3
1004f332:	2201      	movs	r2, #1
1004f334:	701a      	strb	r2, [r3, #0]
		/*USER CODE BEGIN Service1_Char_1_ACI_GATT_SRV_READ_VSEVT_CODE_1 */
		notification.EvtOpcode = USART_TX_READ_EVT;
1004f336:	210c      	movs	r1, #12
1004f338:	187b      	adds	r3, r7, r1
1004f33a:	2200      	movs	r2, #0
1004f33c:	701a      	strb	r2, [r3, #0]
		USART_Notification(&notification);
1004f33e:	187b      	adds	r3, r7, r1
1004f340:	0018      	movs	r0, r3
1004f342:	f000 f8df 	bl	1004f504 <USART_Notification>
	  } /* if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
1004f346:	e041      	b.n	1004f3cc <USART_EventHandler+0x194>
	  else if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004f348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004f34a:	791a      	ldrb	r2, [r3, #4]
1004f34c:	795b      	ldrb	r3, [r3, #5]
1004f34e:	021b      	lsls	r3, r3, #8
1004f350:	4313      	orrs	r3, r2
1004f352:	b29b      	uxth	r3, r3
1004f354:	001a      	movs	r2, r3
1004f356:	4b24      	ldr	r3, [pc, #144]	@ (1004f3e8 <USART_EventHandler+0x1b0>)
1004f358:	88db      	ldrh	r3, [r3, #6]
1004f35a:	3301      	adds	r3, #1
1004f35c:	429a      	cmp	r2, r3
1004f35e:	d135      	bne.n	1004f3cc <USART_EventHandler+0x194>
		return_value = BLEEVT_Ack;
1004f360:	2337      	movs	r3, #55	@ 0x37
1004f362:	18fb      	adds	r3, r7, r3
1004f364:	2201      	movs	r2, #1
1004f366:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
1004f368:	e030      	b.n	1004f3cc <USART_EventHandler+0x194>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
1004f36a:	687b      	ldr	r3, [r7, #4]
1004f36c:	3302      	adds	r3, #2
1004f36e:	633b      	str	r3, [r7, #48]	@ 0x30
      if(p_write->Attribute_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004f370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004f372:	795a      	ldrb	r2, [r3, #5]
1004f374:	799b      	ldrb	r3, [r3, #6]
1004f376:	021b      	lsls	r3, r3, #8
1004f378:	4313      	orrs	r3, r2
1004f37a:	b29b      	uxth	r3, r3
1004f37c:	001a      	movs	r2, r3
1004f37e:	4b1a      	ldr	r3, [pc, #104]	@ (1004f3e8 <USART_EventHandler+0x1b0>)
1004f380:	889b      	ldrh	r3, [r3, #4]
1004f382:	3301      	adds	r3, #1
1004f384:	429a      	cmp	r2, r3
1004f386:	d104      	bne.n	1004f392 <USART_EventHandler+0x15a>
      {
        return_value = BLEEVT_Ack;
1004f388:	2337      	movs	r3, #55	@ 0x37
1004f38a:	18fb      	adds	r3, r7, r3
1004f38c:	2201      	movs	r2, #1
1004f38e:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1004f390:	e01e      	b.n	1004f3d0 <USART_EventHandler+0x198>
      else if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004f392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004f394:	795a      	ldrb	r2, [r3, #5]
1004f396:	799b      	ldrb	r3, [r3, #6]
1004f398:	021b      	lsls	r3, r3, #8
1004f39a:	4313      	orrs	r3, r2
1004f39c:	b29b      	uxth	r3, r3
1004f39e:	001a      	movs	r2, r3
1004f3a0:	4b11      	ldr	r3, [pc, #68]	@ (1004f3e8 <USART_EventHandler+0x1b0>)
1004f3a2:	88db      	ldrh	r3, [r3, #6]
1004f3a4:	3301      	adds	r3, #1
1004f3a6:	429a      	cmp	r2, r3
1004f3a8:	d112      	bne.n	1004f3d0 <USART_EventHandler+0x198>
        return_value = BLEEVT_Ack;
1004f3aa:	2337      	movs	r3, #55	@ 0x37
1004f3ac:	18fb      	adds	r3, r7, r3
1004f3ae:	2201      	movs	r2, #1
1004f3b0:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1004f3b2:	e00d      	b.n	1004f3d0 <USART_EventHandler+0x198>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
1004f3b4:	687b      	ldr	r3, [r7, #4]
1004f3b6:	3302      	adds	r3, #2
1004f3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
1004f3ba:	e00a      	b.n	1004f3d2 <USART_EventHandler+0x19a>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
1004f3bc:	687b      	ldr	r3, [r7, #4]
1004f3be:	3302      	adds	r3, #2
1004f3c0:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
1004f3c2:	e006      	b.n	1004f3d2 <USART_EventHandler+0x19a>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
1004f3c4:	46c0      	nop			@ (mov r8, r8)
1004f3c6:	e004      	b.n	1004f3d2 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
1004f3c8:	46c0      	nop			@ (mov r8, r8)
1004f3ca:	e002      	b.n	1004f3d2 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
1004f3cc:	46c0      	nop			@ (mov r8, r8)
1004f3ce:	e000      	b.n	1004f3d2 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1004f3d0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
1004f3d2:	2337      	movs	r3, #55	@ 0x37
1004f3d4:	18fb      	adds	r3, r7, r3
1004f3d6:	781b      	ldrb	r3, [r3, #0]
}/* end USART_EventHandler */
1004f3d8:	0018      	movs	r0, r3
1004f3da:	46bd      	mov	sp, r7
1004f3dc:	b00e      	add	sp, #56	@ 0x38
1004f3de:	bd80      	pop	{r7, pc}
1004f3e0:	fffff3ff 	.word	0xfffff3ff
1004f3e4:	10065f3c 	.word	0x10065f3c
1004f3e8:	20000dec 	.word	0x20000dec

1004f3ec <USART_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void USART_Init(void)
{
1004f3ec:	b590      	push	{r4, r7, lr}
1004f3ee:	b083      	sub	sp, #12
1004f3f0:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
1004f3f2:	1dfb      	adds	r3, r7, #7
1004f3f4:	2212      	movs	r2, #18
1004f3f6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(USART_EventHandler);
1004f3f8:	4b17      	ldr	r3, [pc, #92]	@ (1004f458 <USART_Init+0x6c>)
1004f3fa:	0018      	movs	r0, r3
1004f3fc:	f7fc fbf6 	bl	1004bbec <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&usart_service);
1004f400:	1dfc      	adds	r4, r7, #7
1004f402:	4b16      	ldr	r3, [pc, #88]	@ (1004f45c <USART_Init+0x70>)
1004f404:	0018      	movs	r0, r3
1004f406:	f7fc ff79 	bl	1004c2fc <aci_gatt_srv_add_service>
1004f40a:	0003      	movs	r3, r0
1004f40c:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: USART \n");
  }

  USART_Context.UsartSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &usart_service);
1004f40e:	4b13      	ldr	r3, [pc, #76]	@ (1004f45c <USART_Init+0x70>)
1004f410:	0018      	movs	r0, r3
1004f412:	f7fc ff80 	bl	1004c316 <aci_gatt_srv_get_service_handle>
1004f416:	0003      	movs	r3, r0
1004f418:	001a      	movs	r2, r3
1004f41a:	4b11      	ldr	r3, [pc, #68]	@ (1004f460 <USART_Init+0x74>)
1004f41c:	801a      	strh	r2, [r3, #0]
  USART_Context.TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[0]);
1004f41e:	4b11      	ldr	r3, [pc, #68]	@ (1004f464 <USART_Init+0x78>)
1004f420:	0018      	movs	r0, r3
1004f422:	f7fc ff98 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004f426:	0003      	movs	r3, r0
1004f428:	001a      	movs	r2, r3
1004f42a:	4b0d      	ldr	r3, [pc, #52]	@ (1004f460 <USART_Init+0x74>)
1004f42c:	805a      	strh	r2, [r3, #2]
  USART_Context.RxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[1]);
1004f42e:	4b0e      	ldr	r3, [pc, #56]	@ (1004f468 <USART_Init+0x7c>)
1004f430:	0018      	movs	r0, r3
1004f432:	f7fc ff90 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004f436:	0003      	movs	r3, r0
1004f438:	001a      	movs	r2, r3
1004f43a:	4b09      	ldr	r3, [pc, #36]	@ (1004f460 <USART_Init+0x74>)
1004f43c:	809a      	strh	r2, [r3, #4]
  USART_Context.Req_TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[2]);
1004f43e:	4b0b      	ldr	r3, [pc, #44]	@ (1004f46c <USART_Init+0x80>)
1004f440:	0018      	movs	r0, r3
1004f442:	f7fc ff88 	bl	1004c356 <aci_gatt_srv_get_char_decl_handle>
1004f446:	0003      	movs	r3, r0
1004f448:	001a      	movs	r2, r3
1004f44a:	4b05      	ldr	r3, [pc, #20]	@ (1004f460 <USART_Init+0x74>)
1004f44c:	80da      	strh	r2, [r3, #6]
  if (ret != BLE_STATUS_SUCCESS)
  {
    APP_DBG_MSG("  Fail registering USART handlers\n");
  }

  return;
1004f44e:	46c0      	nop			@ (mov r8, r8)
}
1004f450:	46bd      	mov	sp, r7
1004f452:	b003      	add	sp, #12
1004f454:	bd90      	pop	{r4, r7, pc}
1004f456:	46c0      	nop			@ (mov r8, r8)
1004f458:	1004f239 	.word	0x1004f239
1004f45c:	10065f14 	.word	0x10065f14
1004f460:	20000dec 	.word	0x20000dec
1004f464:	10065ea8 	.word	0x10065ea8
1004f468:	10065ecc 	.word	0x10065ecc
1004f46c:	10065ef0 	.word	0x10065ef0

1004f470 <USART_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: pointer to the new data to be written in the characteristic
 *
 */
tBleStatus USART_UpdateValue(USART_CharOpcode_t CharOpcode, USART_Data_t *pData)
{
1004f470:	b580      	push	{r7, lr}
1004f472:	b084      	sub	sp, #16
1004f474:	af00      	add	r7, sp, #0
1004f476:	0002      	movs	r2, r0
1004f478:	6039      	str	r1, [r7, #0]
1004f47a:	1dfb      	adds	r3, r7, #7
1004f47c:	701a      	strb	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_SUCCESS;
1004f47e:	230f      	movs	r3, #15
1004f480:	18fb      	adds	r3, r7, r3
1004f482:	2200      	movs	r2, #0
1004f484:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
1004f486:	1dfb      	adds	r3, r7, #7
1004f488:	781b      	ldrb	r3, [r3, #0]
1004f48a:	2b02      	cmp	r3, #2
1004f48c:	d01f      	beq.n	1004f4ce <USART_UpdateValue+0x5e>
1004f48e:	dc2b      	bgt.n	1004f4e8 <USART_UpdateValue+0x78>
1004f490:	2b00      	cmp	r3, #0
1004f492:	d002      	beq.n	1004f49a <USART_UpdateValue+0x2a>
1004f494:	2b01      	cmp	r3, #1
1004f496:	d00d      	beq.n	1004f4b4 <USART_UpdateValue+0x44>

      /* USER CODE END Service1_Char_Value_3*/
      break;

    default:
      break;
1004f498:	e026      	b.n	1004f4e8 <USART_UpdateValue+0x78>
      memcpy(tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(tx_val_buffer)));
1004f49a:	683b      	ldr	r3, [r7, #0]
1004f49c:	6819      	ldr	r1, [r3, #0]
1004f49e:	683b      	ldr	r3, [r7, #0]
1004f4a0:	791b      	ldrb	r3, [r3, #4]
1004f4a2:	1e5a      	subs	r2, r3, #1
1004f4a4:	4193      	sbcs	r3, r2
1004f4a6:	b2db      	uxtb	r3, r3
1004f4a8:	001a      	movs	r2, r3
1004f4aa:	4b13      	ldr	r3, [pc, #76]	@ (1004f4f8 <USART_UpdateValue+0x88>)
1004f4ac:	0018      	movs	r0, r3
1004f4ae:	f015 fc42 	bl	10064d36 <memcpy>
      break;
1004f4b2:	e01a      	b.n	1004f4ea <USART_UpdateValue+0x7a>
      memcpy(rx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rx_val_buffer)));
1004f4b4:	683b      	ldr	r3, [r7, #0]
1004f4b6:	6819      	ldr	r1, [r3, #0]
1004f4b8:	683b      	ldr	r3, [r7, #0]
1004f4ba:	791b      	ldrb	r3, [r3, #4]
1004f4bc:	1e5a      	subs	r2, r3, #1
1004f4be:	4193      	sbcs	r3, r2
1004f4c0:	b2db      	uxtb	r3, r3
1004f4c2:	001a      	movs	r2, r3
1004f4c4:	4b0d      	ldr	r3, [pc, #52]	@ (1004f4fc <USART_UpdateValue+0x8c>)
1004f4c6:	0018      	movs	r0, r3
1004f4c8:	f015 fc35 	bl	10064d36 <memcpy>
      break;
1004f4cc:	e00d      	b.n	1004f4ea <USART_UpdateValue+0x7a>
      memcpy(req_tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(req_tx_val_buffer)));
1004f4ce:	683b      	ldr	r3, [r7, #0]
1004f4d0:	6819      	ldr	r1, [r3, #0]
1004f4d2:	683b      	ldr	r3, [r7, #0]
1004f4d4:	791b      	ldrb	r3, [r3, #4]
1004f4d6:	1e5a      	subs	r2, r3, #1
1004f4d8:	4193      	sbcs	r3, r2
1004f4da:	b2db      	uxtb	r3, r3
1004f4dc:	001a      	movs	r2, r3
1004f4de:	4b08      	ldr	r3, [pc, #32]	@ (1004f500 <USART_UpdateValue+0x90>)
1004f4e0:	0018      	movs	r0, r3
1004f4e2:	f015 fc28 	bl	10064d36 <memcpy>
      break;
1004f4e6:	e000      	b.n	1004f4ea <USART_UpdateValue+0x7a>
      break;
1004f4e8:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
1004f4ea:	230f      	movs	r3, #15
1004f4ec:	18fb      	adds	r3, r7, r3
1004f4ee:	781b      	ldrb	r3, [r3, #0]
}
1004f4f0:	0018      	movs	r0, r3
1004f4f2:	46bd      	mov	sp, r7
1004f4f4:	b004      	add	sp, #16
1004f4f6:	bd80      	pop	{r7, pc}
1004f4f8:	20000df4 	.word	0x20000df4
1004f4fc:	20000df8 	.word	0x20000df8
1004f500:	20000dfc 	.word	0x20000dfc

1004f504 <USART_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void USART_Notification(USART_NotificationEvt_t *p_Notification)
{
1004f504:	b5b0      	push	{r4, r5, r7, lr}
1004f506:	b086      	sub	sp, #24
1004f508:	af00      	add	r7, sp, #0
1004f50a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
1004f50c:	687b      	ldr	r3, [r7, #4]
1004f50e:	781b      	ldrb	r3, [r3, #0]
1004f510:	2b03      	cmp	r3, #3
1004f512:	d017      	beq.n	1004f544 <USART_Notification+0x40>
1004f514:	dc32      	bgt.n	1004f57c <USART_Notification+0x78>
1004f516:	2b02      	cmp	r3, #2
1004f518:	d032      	beq.n	1004f580 <USART_Notification+0x7c>
1004f51a:	dc2f      	bgt.n	1004f57c <USART_Notification+0x78>
1004f51c:	2b00      	cmp	r3, #0
1004f51e:	d031      	beq.n	1004f584 <USART_Notification+0x80>
1004f520:	2b01      	cmp	r3, #1
1004f522:	d000      	beq.n	1004f526 <USART_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
1004f524:	e02a      	b.n	1004f57c <USART_Notification+0x78>
      Event_t recieved = {EVENT_USART, p_Notification->DataTransfered.p_Payload[0]};
1004f526:	2114      	movs	r1, #20
1004f528:	187b      	adds	r3, r7, r1
1004f52a:	2206      	movs	r2, #6
1004f52c:	701a      	strb	r2, [r3, #0]
1004f52e:	687b      	ldr	r3, [r7, #4]
1004f530:	685b      	ldr	r3, [r3, #4]
1004f532:	781b      	ldrb	r3, [r3, #0]
1004f534:	001a      	movs	r2, r3
1004f536:	187b      	adds	r3, r7, r1
1004f538:	805a      	strh	r2, [r3, #2]
      COMM_Event_Post(recieved);
1004f53a:	187b      	adds	r3, r7, r1
1004f53c:	6818      	ldr	r0, [r3, #0]
1004f53e:	f7f2 f825 	bl	1004158c <COMM_Event_Post>
      break;
1004f542:	e020      	b.n	1004f586 <USART_Notification+0x82>
        uint8_t data = BLUETOOTH_ReadBuffer();
1004f544:	f7f1 ff24 	bl	10041390 <BLUETOOTH_ReadBuffer>
1004f548:	0003      	movs	r3, r0
1004f54a:	001a      	movs	r2, r3
1004f54c:	2513      	movs	r5, #19
1004f54e:	197b      	adds	r3, r7, r5
1004f550:	701a      	strb	r2, [r3, #0]
        USART_Data_t value = {&data, 1};
1004f552:	2408      	movs	r4, #8
1004f554:	193b      	adds	r3, r7, r4
1004f556:	197a      	adds	r2, r7, r5
1004f558:	601a      	str	r2, [r3, #0]
1004f55a:	193b      	adds	r3, r7, r4
1004f55c:	2201      	movs	r2, #1
1004f55e:	711a      	strb	r2, [r3, #4]
        USART_UpdateValue(USART_TX, &value);
1004f560:	193b      	adds	r3, r7, r4
1004f562:	0019      	movs	r1, r3
1004f564:	2000      	movs	r0, #0
1004f566:	f7ff ff83 	bl	1004f470 <USART_UpdateValue>
        data = 0;
1004f56a:	197b      	adds	r3, r7, r5
1004f56c:	2200      	movs	r2, #0
1004f56e:	701a      	strb	r2, [r3, #0]
        USART_UpdateValue(USART_REQ_TX, &value);
1004f570:	193b      	adds	r3, r7, r4
1004f572:	0019      	movs	r1, r3
1004f574:	2002      	movs	r0, #2
1004f576:	f7ff ff7b 	bl	1004f470 <USART_UpdateValue>
      break;
1004f57a:	e004      	b.n	1004f586 <USART_Notification+0x82>
      break;
1004f57c:	46c0      	nop			@ (mov r8, r8)
1004f57e:	e002      	b.n	1004f586 <USART_Notification+0x82>
      break;
1004f580:	46c0      	nop			@ (mov r8, r8)
1004f582:	e000      	b.n	1004f586 <USART_Notification+0x82>
      break;
1004f584:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
1004f586:	46c0      	nop			@ (mov r8, r8)
}
1004f588:	46bd      	mov	sp, r7
1004f58a:	b006      	add	sp, #24
1004f58c:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004f590 <USART_APP_EvtRx>:

void USART_APP_EvtRx(USART_APP_ConnHandleNotEvt_t *p_Notification)
{
1004f590:	b580      	push	{r7, lr}
1004f592:	b082      	sub	sp, #8
1004f594:	af00      	add	r7, sp, #0
1004f596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
1004f598:	687b      	ldr	r3, [r7, #4]
1004f59a:	781b      	ldrb	r3, [r3, #0]
1004f59c:	2b00      	cmp	r3, #0
1004f59e:	d002      	beq.n	1004f5a6 <USART_APP_EvtRx+0x16>
1004f5a0:	2b01      	cmp	r3, #1
1004f5a2:	d005      	beq.n	1004f5b0 <USART_APP_EvtRx+0x20>

    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
1004f5a4:	e009      	b.n	1004f5ba <USART_APP_EvtRx+0x2a>
      USART_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
1004f5a6:	687b      	ldr	r3, [r7, #4]
1004f5a8:	885a      	ldrh	r2, [r3, #2]
1004f5aa:	4b06      	ldr	r3, [pc, #24]	@ (1004f5c4 <USART_APP_EvtRx+0x34>)
1004f5ac:	801a      	strh	r2, [r3, #0]
      break;
1004f5ae:	e004      	b.n	1004f5ba <USART_APP_EvtRx+0x2a>
      USART_APP_Context.ConnectionHandle = 0xFFFF;
1004f5b0:	4b04      	ldr	r3, [pc, #16]	@ (1004f5c4 <USART_APP_EvtRx+0x34>)
1004f5b2:	2201      	movs	r2, #1
1004f5b4:	4252      	negs	r2, r2
1004f5b6:	801a      	strh	r2, [r3, #0]
      break;
1004f5b8:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
1004f5ba:	46c0      	nop			@ (mov r8, r8)
}
1004f5bc:	46bd      	mov	sp, r7
1004f5be:	b002      	add	sp, #8
1004f5c0:	bd80      	pop	{r7, pc}
1004f5c2:	46c0      	nop			@ (mov r8, r8)
1004f5c4:	20000e00 	.word	0x20000e00

1004f5c8 <USART_APP_Init>:

void USART_APP_Init(void)
{
1004f5c8:	b580      	push	{r7, lr}
1004f5ca:	af00      	add	r7, sp, #0
  USART_APP_Context.ConnectionHandle = 0xFFFF;
1004f5cc:	4b04      	ldr	r3, [pc, #16]	@ (1004f5e0 <USART_APP_Init+0x18>)
1004f5ce:	2201      	movs	r2, #1
1004f5d0:	4252      	negs	r2, r2
1004f5d2:	801a      	strh	r2, [r3, #0]
  USART_Init();
1004f5d4:	f7ff ff0a 	bl	1004f3ec <USART_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
1004f5d8:	46c0      	nop			@ (mov r8, r8)
}
1004f5da:	46bd      	mov	sp, r7
1004f5dc:	bd80      	pop	{r7, pc}
1004f5de:	46c0      	nop			@ (mov r8, r8)
1004f5e0:	20000e00 	.word	0x20000e00

1004f5e4 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
1004f5e4:	b580      	push	{r7, lr}
1004f5e6:	af00      	add	r7, sp, #0
  NVMDB_Init();
1004f5e8:	f7fe f9d2 	bl	1004d990 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
1004f5ec:	4b07      	ldr	r3, [pc, #28]	@ (1004f60c <BLENVM_Init+0x28>)
1004f5ee:	0019      	movs	r1, r3
1004f5f0:	2000      	movs	r0, #0
1004f5f2:	f7fe fb2b 	bl	1004dc4c <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
1004f5f6:	4b06      	ldr	r3, [pc, #24]	@ (1004f610 <BLENVM_Init+0x2c>)
1004f5f8:	0019      	movs	r1, r3
1004f5fa:	2001      	movs	r0, #1
1004f5fc:	f7fe fb26 	bl	1004dc4c <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
1004f600:	4b04      	ldr	r3, [pc, #16]	@ (1004f614 <BLENVM_Init+0x30>)
1004f602:	4a02      	ldr	r2, [pc, #8]	@ (1004f60c <BLENVM_Init+0x28>)
1004f604:	601a      	str	r2, [r3, #0]
}
1004f606:	46c0      	nop			@ (mov r8, r8)
1004f608:	46bd      	mov	sp, r7
1004f60a:	bd80      	pop	{r7, pc}
1004f60c:	20000e04 	.word	0x20000e04
1004f610:	20000e14 	.word	0x20000e14
1004f614:	20000e24 	.word	0x20000e24

1004f618 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
1004f618:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f61a:	b089      	sub	sp, #36	@ 0x24
1004f61c:	af02      	add	r7, sp, #8
1004f61e:	60b9      	str	r1, [r7, #8]
1004f620:	0011      	movs	r1, r2
1004f622:	607b      	str	r3, [r7, #4]
1004f624:	240f      	movs	r4, #15
1004f626:	193b      	adds	r3, r7, r4
1004f628:	1c02      	adds	r2, r0, #0
1004f62a:	701a      	strb	r2, [r3, #0]
1004f62c:	230c      	movs	r3, #12
1004f62e:	18fb      	adds	r3, r7, r3
1004f630:	1c0a      	adds	r2, r1, #0
1004f632:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
1004f634:	193b      	adds	r3, r7, r4
1004f636:	781b      	ldrb	r3, [r3, #0]
1004f638:	2b02      	cmp	r3, #2
1004f63a:	d103      	bne.n	1004f644 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
1004f63c:	4b1a      	ldr	r3, [pc, #104]	@ (1004f6a8 <BLEPLAT_NvmAdd+0x90>)
1004f63e:	4a1b      	ldr	r2, [pc, #108]	@ (1004f6ac <BLEPLAT_NvmAdd+0x94>)
1004f640:	601a      	str	r2, [r3, #0]
1004f642:	e002      	b.n	1004f64a <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
1004f644:	4b18      	ldr	r3, [pc, #96]	@ (1004f6a8 <BLEPLAT_NvmAdd+0x90>)
1004f646:	4a1a      	ldr	r2, [pc, #104]	@ (1004f6b0 <BLEPLAT_NvmAdd+0x98>)
1004f648:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
1004f64a:	4b17      	ldr	r3, [pc, #92]	@ (1004f6a8 <BLEPLAT_NvmAdd+0x90>)
1004f64c:	6818      	ldr	r0, [r3, #0]
1004f64e:	2617      	movs	r6, #23
1004f650:	19bc      	adds	r4, r7, r6
1004f652:	68bd      	ldr	r5, [r7, #8]
1004f654:	230c      	movs	r3, #12
1004f656:	18fb      	adds	r3, r7, r3
1004f658:	881b      	ldrh	r3, [r3, #0]
1004f65a:	469c      	mov	ip, r3
1004f65c:	230f      	movs	r3, #15
1004f65e:	18fb      	adds	r3, r7, r3
1004f660:	7819      	ldrb	r1, [r3, #0]
1004f662:	687b      	ldr	r3, [r7, #4]
1004f664:	9301      	str	r3, [sp, #4]
1004f666:	2328      	movs	r3, #40	@ 0x28
1004f668:	2208      	movs	r2, #8
1004f66a:	189b      	adds	r3, r3, r2
1004f66c:	19db      	adds	r3, r3, r7
1004f66e:	881b      	ldrh	r3, [r3, #0]
1004f670:	9300      	str	r3, [sp, #0]
1004f672:	002b      	movs	r3, r5
1004f674:	4662      	mov	r2, ip
1004f676:	f7fe fb8b 	bl	1004dd90 <NVMDB_AppendRecord>
1004f67a:	0003      	movs	r3, r0
1004f67c:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
1004f67e:	19bb      	adds	r3, r7, r6
1004f680:	781b      	ldrb	r3, [r3, #0]
1004f682:	2b00      	cmp	r3, #0
1004f684:	d101      	bne.n	1004f68a <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
1004f686:	2300      	movs	r3, #0
1004f688:	e009      	b.n	1004f69e <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
1004f68a:	2317      	movs	r3, #23
1004f68c:	18fb      	adds	r3, r7, r3
1004f68e:	781b      	ldrb	r3, [r3, #0]
1004f690:	2b02      	cmp	r3, #2
1004f692:	d102      	bne.n	1004f69a <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
1004f694:	2301      	movs	r3, #1
1004f696:	425b      	negs	r3, r3
1004f698:	e001      	b.n	1004f69e <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
1004f69a:	2302      	movs	r3, #2
1004f69c:	425b      	negs	r3, r3
}
1004f69e:	0018      	movs	r0, r3
1004f6a0:	46bd      	mov	sp, r7
1004f6a2:	b007      	add	sp, #28
1004f6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f6a6:	46c0      	nop			@ (mov r8, r8)
1004f6a8:	20000e24 	.word	0x20000e24
1004f6ac:	20000e14 	.word	0x20000e14
1004f6b0:	20000e04 	.word	0x20000e04

1004f6b4 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
1004f6b4:	b5b0      	push	{r4, r5, r7, lr}
1004f6b6:	b086      	sub	sp, #24
1004f6b8:	af02      	add	r7, sp, #8
1004f6ba:	0004      	movs	r4, r0
1004f6bc:	0008      	movs	r0, r1
1004f6be:	0011      	movs	r1, r2
1004f6c0:	603b      	str	r3, [r7, #0]
1004f6c2:	1dfb      	adds	r3, r7, #7
1004f6c4:	1c22      	adds	r2, r4, #0
1004f6c6:	701a      	strb	r2, [r3, #0]
1004f6c8:	1dbb      	adds	r3, r7, #6
1004f6ca:	1c02      	adds	r2, r0, #0
1004f6cc:	701a      	strb	r2, [r3, #0]
1004f6ce:	1d3b      	adds	r3, r7, #4
1004f6d0:	1c0a      	adds	r2, r1, #0
1004f6d2:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
1004f6d4:	1dbb      	adds	r3, r7, #6
1004f6d6:	781b      	ldrb	r3, [r3, #0]
1004f6d8:	2b02      	cmp	r3, #2
1004f6da:	d107      	bne.n	1004f6ec <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
1004f6dc:	4b2e      	ldr	r3, [pc, #184]	@ (1004f798 <BLEPLAT_NvmGet+0xe4>)
1004f6de:	4a2f      	ldr	r2, [pc, #188]	@ (1004f79c <BLEPLAT_NvmGet+0xe8>)
1004f6e0:	601a      	str	r2, [r3, #0]
    db_id = 1;
1004f6e2:	230e      	movs	r3, #14
1004f6e4:	18fb      	adds	r3, r7, r3
1004f6e6:	2201      	movs	r2, #1
1004f6e8:	701a      	strb	r2, [r3, #0]
1004f6ea:	e006      	b.n	1004f6fa <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
1004f6ec:	4b2a      	ldr	r3, [pc, #168]	@ (1004f798 <BLEPLAT_NvmGet+0xe4>)
1004f6ee:	4a2c      	ldr	r2, [pc, #176]	@ (1004f7a0 <BLEPLAT_NvmGet+0xec>)
1004f6f0:	601a      	str	r2, [r3, #0]
    db_id = 0;
1004f6f2:	230e      	movs	r3, #14
1004f6f4:	18fb      	adds	r3, r7, r3
1004f6f6:	2200      	movs	r2, #0
1004f6f8:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
1004f6fa:	1dfb      	adds	r3, r7, #7
1004f6fc:	781b      	ldrb	r3, [r3, #0]
1004f6fe:	2b02      	cmp	r3, #2
1004f700:	d112      	bne.n	1004f728 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
1004f702:	4b25      	ldr	r3, [pc, #148]	@ (1004f798 <BLEPLAT_NvmGet+0xe4>)
1004f704:	6818      	ldr	r0, [r3, #0]
1004f706:	230f      	movs	r3, #15
1004f708:	18fc      	adds	r4, r7, r3
1004f70a:	2320      	movs	r3, #32
1004f70c:	18fb      	adds	r3, r7, r3
1004f70e:	881d      	ldrh	r5, [r3, #0]
1004f710:	683a      	ldr	r2, [r7, #0]
1004f712:	1d3b      	adds	r3, r7, #4
1004f714:	8819      	ldrh	r1, [r3, #0]
1004f716:	230c      	movs	r3, #12
1004f718:	18fb      	adds	r3, r7, r3
1004f71a:	9300      	str	r3, [sp, #0]
1004f71c:	002b      	movs	r3, r5
1004f71e:	f7fe fb03 	bl	1004dd28 <NVMDB_ReadCurrentRecord>
1004f722:	0003      	movs	r3, r0
1004f724:	7023      	strb	r3, [r4, #0]
1004f726:	e021      	b.n	1004f76c <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
1004f728:	1dfb      	adds	r3, r7, #7
1004f72a:	781b      	ldrb	r3, [r3, #0]
1004f72c:	2b00      	cmp	r3, #0
1004f72e:	d108      	bne.n	1004f742 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
1004f730:	4b19      	ldr	r3, [pc, #100]	@ (1004f798 <BLEPLAT_NvmGet+0xe4>)
1004f732:	681a      	ldr	r2, [r3, #0]
1004f734:	230e      	movs	r3, #14
1004f736:	18fb      	adds	r3, r7, r3
1004f738:	781b      	ldrb	r3, [r3, #0]
1004f73a:	0011      	movs	r1, r2
1004f73c:	0018      	movs	r0, r3
1004f73e:	f7fe fa85 	bl	1004dc4c <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
1004f742:	4b15      	ldr	r3, [pc, #84]	@ (1004f798 <BLEPLAT_NvmGet+0xe4>)
1004f744:	6818      	ldr	r0, [r3, #0]
1004f746:	230f      	movs	r3, #15
1004f748:	18fc      	adds	r4, r7, r3
1004f74a:	683d      	ldr	r5, [r7, #0]
1004f74c:	1d3b      	adds	r3, r7, #4
1004f74e:	881a      	ldrh	r2, [r3, #0]
1004f750:	1dbb      	adds	r3, r7, #6
1004f752:	7819      	ldrb	r1, [r3, #0]
1004f754:	230c      	movs	r3, #12
1004f756:	18fb      	adds	r3, r7, r3
1004f758:	9301      	str	r3, [sp, #4]
1004f75a:	2320      	movs	r3, #32
1004f75c:	18fb      	adds	r3, r7, r3
1004f75e:	881b      	ldrh	r3, [r3, #0]
1004f760:	9300      	str	r3, [sp, #0]
1004f762:	002b      	movs	r3, r5
1004f764:	f7fe faa6 	bl	1004dcb4 <NVMDB_ReadNextRecord>
1004f768:	0003      	movs	r3, r0
1004f76a:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
1004f76c:	230f      	movs	r3, #15
1004f76e:	18fb      	adds	r3, r7, r3
1004f770:	781b      	ldrb	r3, [r3, #0]
1004f772:	2b00      	cmp	r3, #0
1004f774:	d101      	bne.n	1004f77a <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
1004f776:	2300      	movs	r3, #0
1004f778:	e009      	b.n	1004f78e <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
1004f77a:	230f      	movs	r3, #15
1004f77c:	18fb      	adds	r3, r7, r3
1004f77e:	781b      	ldrb	r3, [r3, #0]
1004f780:	2b04      	cmp	r3, #4
1004f782:	d102      	bne.n	1004f78a <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
1004f784:	2303      	movs	r3, #3
1004f786:	425b      	negs	r3, r3
1004f788:	e001      	b.n	1004f78e <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
1004f78a:	2302      	movs	r3, #2
1004f78c:	425b      	negs	r3, r3
}
1004f78e:	0018      	movs	r0, r3
1004f790:	46bd      	mov	sp, r7
1004f792:	b004      	add	sp, #16
1004f794:	bdb0      	pop	{r4, r5, r7, pc}
1004f796:	46c0      	nop			@ (mov r8, r8)
1004f798:	20000e24 	.word	0x20000e24
1004f79c:	20000e14 	.word	0x20000e14
1004f7a0:	20000e04 	.word	0x20000e04

1004f7a4 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
1004f7a4:	b590      	push	{r4, r7, lr}
1004f7a6:	b085      	sub	sp, #20
1004f7a8:	af00      	add	r7, sp, #0
1004f7aa:	6039      	str	r1, [r7, #0]
1004f7ac:	0011      	movs	r1, r2
1004f7ae:	1dbb      	adds	r3, r7, #6
1004f7b0:	1c02      	adds	r2, r0, #0
1004f7b2:	801a      	strh	r2, [r3, #0]
1004f7b4:	1d3b      	adds	r3, r7, #4
1004f7b6:	1c0a      	adds	r2, r1, #0
1004f7b8:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
1004f7ba:	4b0e      	ldr	r3, [pc, #56]	@ (1004f7f4 <BLEPLAT_NvmCompare+0x50>)
1004f7bc:	6818      	ldr	r0, [r3, #0]
1004f7be:	1d3b      	adds	r3, r7, #4
1004f7c0:	881c      	ldrh	r4, [r3, #0]
1004f7c2:	683a      	ldr	r2, [r7, #0]
1004f7c4:	1dbb      	adds	r3, r7, #6
1004f7c6:	8819      	ldrh	r1, [r3, #0]
1004f7c8:	0023      	movs	r3, r4
1004f7ca:	f7fd faa9 	bl	1004cd20 <NVMDB_CompareCurrentRecord>
1004f7ce:	0003      	movs	r3, r0
1004f7d0:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
1004f7d2:	68fb      	ldr	r3, [r7, #12]
1004f7d4:	2b00      	cmp	r3, #0
1004f7d6:	d101      	bne.n	1004f7dc <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
1004f7d8:	2300      	movs	r3, #0
1004f7da:	e007      	b.n	1004f7ec <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
1004f7dc:	68fb      	ldr	r3, [r7, #12]
1004f7de:	2b00      	cmp	r3, #0
1004f7e0:	da02      	bge.n	1004f7e8 <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
1004f7e2:	1d3b      	adds	r3, r7, #4
1004f7e4:	881b      	ldrh	r3, [r3, #0]
1004f7e6:	e001      	b.n	1004f7ec <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
1004f7e8:	2303      	movs	r3, #3
1004f7ea:	425b      	negs	r3, r3
  }
}
1004f7ec:	0018      	movs	r0, r3
1004f7ee:	46bd      	mov	sp, r7
1004f7f0:	b005      	add	sp, #20
1004f7f2:	bd90      	pop	{r4, r7, pc}
1004f7f4:	20000e24 	.word	0x20000e24

1004f7f8 <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
1004f7f8:	b580      	push	{r7, lr}
1004f7fa:	b082      	sub	sp, #8
1004f7fc:	af00      	add	r7, sp, #0
1004f7fe:	0002      	movs	r2, r0
1004f800:	1dfb      	adds	r3, r7, #7
1004f802:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
1004f804:	1dfb      	adds	r3, r7, #7
1004f806:	781b      	ldrb	r3, [r3, #0]
1004f808:	2b02      	cmp	r3, #2
1004f80a:	d10a      	bne.n	1004f822 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
1004f80c:	4b0b      	ldr	r3, [pc, #44]	@ (1004f83c <BLEPLAT_NvmDiscard+0x44>)
1004f80e:	681a      	ldr	r2, [r3, #0]
1004f810:	4b0b      	ldr	r3, [pc, #44]	@ (1004f840 <BLEPLAT_NvmDiscard+0x48>)
1004f812:	429a      	cmp	r2, r3
1004f814:	d00d      	beq.n	1004f832 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
1004f816:	4b09      	ldr	r3, [pc, #36]	@ (1004f83c <BLEPLAT_NvmDiscard+0x44>)
1004f818:	681b      	ldr	r3, [r3, #0]
1004f81a:	0018      	movs	r0, r3
1004f81c:	f7fe fb1e 	bl	1004de5c <NVMDB_DeleteRecord>
1004f820:	e008      	b.n	1004f834 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
1004f822:	1dfb      	adds	r3, r7, #7
1004f824:	781b      	ldrb	r3, [r3, #0]
1004f826:	2b03      	cmp	r3, #3
1004f828:	d104      	bne.n	1004f834 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
1004f82a:	2000      	movs	r0, #0
1004f82c:	f7fe fb24 	bl	1004de78 <NVMDB_Erase>
1004f830:	e000      	b.n	1004f834 <BLEPLAT_NvmDiscard+0x3c>
      return;
1004f832:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
1004f834:	46bd      	mov	sp, r7
1004f836:	b002      	add	sp, #8
1004f838:	bd80      	pop	{r7, pc}
1004f83a:	46c0      	nop			@ (mov r8, r8)
1004f83c:	20000e24 	.word	0x20000e24
1004f840:	20000e14 	.word	0x20000e14

1004f844 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
1004f844:	b580      	push	{r7, lr}
1004f846:	b084      	sub	sp, #16
1004f848:	af00      	add	r7, sp, #0
1004f84a:	60f8      	str	r0, [r7, #12]
1004f84c:	60b9      	str	r1, [r7, #8]
1004f84e:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
1004f850:	687a      	ldr	r2, [r7, #4]
1004f852:	68b9      	ldr	r1, [r7, #8]
1004f854:	68fb      	ldr	r3, [r7, #12]
1004f856:	0018      	movs	r0, r3
1004f858:	f7f0 fc54 	bl	10040104 <Osal_MemCpy>
}
1004f85c:	46c0      	nop			@ (mov r8, r8)
1004f85e:	46bd      	mov	sp, r7
1004f860:	b004      	add	sp, #16
1004f862:	bd80      	pop	{r7, pc}

1004f864 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
1004f864:	b580      	push	{r7, lr}
1004f866:	b084      	sub	sp, #16
1004f868:	af00      	add	r7, sp, #0
1004f86a:	60f8      	str	r0, [r7, #12]
1004f86c:	60b9      	str	r1, [r7, #8]
1004f86e:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
1004f870:	687a      	ldr	r2, [r7, #4]
1004f872:	68b9      	ldr	r1, [r7, #8]
1004f874:	68fb      	ldr	r3, [r7, #12]
1004f876:	0018      	movs	r0, r3
1004f878:	f015 f9e8 	bl	10064c4c <memset>
}
1004f87c:	46c0      	nop			@ (mov r8, r8)
1004f87e:	46bd      	mov	sp, r7
1004f880:	b004      	add	sp, #16
1004f882:	bd80      	pop	{r7, pc}

1004f884 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
1004f884:	b580      	push	{r7, lr}
1004f886:	b084      	sub	sp, #16
1004f888:	af00      	add	r7, sp, #0
1004f88a:	60f8      	str	r0, [r7, #12]
1004f88c:	60b9      	str	r1, [r7, #8]
1004f88e:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
1004f890:	687a      	ldr	r2, [r7, #4]
1004f892:	68b9      	ldr	r1, [r7, #8]
1004f894:	68fb      	ldr	r3, [r7, #12]
1004f896:	0018      	movs	r0, r3
1004f898:	f015 f9ca 	bl	10064c30 <memcmp>
1004f89c:	0003      	movs	r3, r0
}
1004f89e:	0018      	movs	r0, r3
1004f8a0:	46bd      	mov	sp, r7
1004f8a2:	b004      	add	sp, #16
1004f8a4:	bd80      	pop	{r7, pc}

1004f8a6 <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
1004f8a6:	b590      	push	{r4, r7, lr}
1004f8a8:	b089      	sub	sp, #36	@ 0x24
1004f8aa:	af00      	add	r7, sp, #0
1004f8ac:	60f8      	str	r0, [r7, #12]
1004f8ae:	60b9      	str	r1, [r7, #8]
1004f8b0:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
1004f8b2:	2410      	movs	r4, #16
1004f8b4:	193b      	adds	r3, r7, r4
1004f8b6:	0018      	movs	r0, r3
1004f8b8:	f7ff f880 	bl	1004e9bc <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
1004f8bc:	0021      	movs	r1, r4
1004f8be:	187b      	adds	r3, r7, r1
1004f8c0:	781a      	ldrb	r2, [r3, #0]
1004f8c2:	68fb      	ldr	r3, [r7, #12]
1004f8c4:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
1004f8c6:	187b      	adds	r3, r7, r1
1004f8c8:	785a      	ldrb	r2, [r3, #1]
1004f8ca:	68bb      	ldr	r3, [r7, #8]
1004f8cc:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
1004f8ce:	187b      	adds	r3, r7, r1
1004f8d0:	789a      	ldrb	r2, [r3, #2]
1004f8d2:	687b      	ldr	r3, [r7, #4]
1004f8d4:	701a      	strb	r2, [r3, #0]
}
1004f8d6:	46c0      	nop			@ (mov r8, r8)
1004f8d8:	46bd      	mov	sp, r7
1004f8da:	b009      	add	sp, #36	@ 0x24
1004f8dc:	bd90      	pop	{r4, r7, pc}

1004f8de <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
1004f8de:	b580      	push	{r7, lr}
1004f8e0:	b084      	sub	sp, #16
1004f8e2:	af00      	add	r7, sp, #0
1004f8e4:	60f8      	str	r0, [r7, #12]
1004f8e6:	60b9      	str	r1, [r7, #8]
1004f8e8:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
1004f8ea:	687a      	ldr	r2, [r7, #4]
1004f8ec:	68b9      	ldr	r1, [r7, #8]
1004f8ee:	68fb      	ldr	r3, [r7, #12]
1004f8f0:	0018      	movs	r0, r3
1004f8f2:	f7fc fe91 	bl	1004c618 <HW_AES_Encrypt>
}
1004f8f6:	46c0      	nop			@ (mov r8, r8)
1004f8f8:	46bd      	mov	sp, r7
1004f8fa:	b004      	add	sp, #16
1004f8fc:	bd80      	pop	{r7, pc}

1004f8fe <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
1004f8fe:	b580      	push	{r7, lr}
1004f900:	b082      	sub	sp, #8
1004f902:	af00      	add	r7, sp, #0
1004f904:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
1004f906:	687b      	ldr	r3, [r7, #4]
1004f908:	0018      	movs	r0, r3
1004f90a:	f016 f843 	bl	10065994 <AES_CMAC_Encrypt_Init>
1004f90e:	0003      	movs	r3, r0
}
1004f910:	0018      	movs	r0, r3
1004f912:	46bd      	mov	sp, r7
1004f914:	b002      	add	sp, #8
1004f916:	bd80      	pop	{r7, pc}

1004f918 <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
1004f918:	b580      	push	{r7, lr}
1004f91a:	b084      	sub	sp, #16
1004f91c:	af00      	add	r7, sp, #0
1004f91e:	60f8      	str	r0, [r7, #12]
1004f920:	60b9      	str	r1, [r7, #8]
1004f922:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
1004f924:	687a      	ldr	r2, [r7, #4]
1004f926:	68b9      	ldr	r1, [r7, #8]
1004f928:	68fb      	ldr	r3, [r7, #12]
1004f92a:	0018      	movs	r0, r3
1004f92c:	f015 fec8 	bl	100656c0 <AES_CMAC_Encrypt_Append>
1004f930:	0003      	movs	r3, r0
}
1004f932:	0018      	movs	r0, r3
1004f934:	46bd      	mov	sp, r7
1004f936:	b004      	add	sp, #16
1004f938:	bd80      	pop	{r7, pc}

1004f93a <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
1004f93a:	b580      	push	{r7, lr}
1004f93c:	b084      	sub	sp, #16
1004f93e:	af00      	add	r7, sp, #0
1004f940:	60f8      	str	r0, [r7, #12]
1004f942:	60b9      	str	r1, [r7, #8]
1004f944:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
1004f946:	687a      	ldr	r2, [r7, #4]
1004f948:	68b9      	ldr	r1, [r7, #8]
1004f94a:	68fb      	ldr	r3, [r7, #12]
1004f94c:	0018      	movs	r0, r3
1004f94e:	f015 ffeb 	bl	10065928 <AES_CMAC_Encrypt_Finish>
1004f952:	0003      	movs	r3, r0
}
1004f954:	0018      	movs	r0, r3
1004f956:	46bd      	mov	sp, r7
1004f958:	b004      	add	sp, #16
1004f95a:	bd80      	pop	{r7, pc}

1004f95c <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
1004f95c:	b580      	push	{r7, lr}
1004f95e:	b082      	sub	sp, #8
1004f960:	af00      	add	r7, sp, #0
1004f962:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
1004f964:	687b      	ldr	r3, [r7, #4]
1004f966:	0018      	movs	r0, r3
1004f968:	f7fc ffbe 	bl	1004c8e8 <HW_RNG_GetRandom16>
}
1004f96c:	46c0      	nop			@ (mov r8, r8)
1004f96e:	46bd      	mov	sp, r7
1004f970:	b002      	add	sp, #8
1004f972:	bd80      	pop	{r7, pc}

1004f974 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
1004f974:	b580      	push	{r7, lr}
1004f976:	b082      	sub	sp, #8
1004f978:	af00      	add	r7, sp, #0
1004f97a:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
1004f97c:	687b      	ldr	r3, [r7, #4]
1004f97e:	0018      	movs	r0, r3
1004f980:	f7fc ffcc 	bl	1004c91c <HW_RNG_GetRandom32>
}
1004f984:	46c0      	nop			@ (mov r8, r8)
1004f986:	46bd      	mov	sp, r7
1004f988:	b002      	add	sp, #8
1004f98a:	bd80      	pop	{r7, pc}

1004f98c <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
1004f98c:	b580      	push	{r7, lr}
1004f98e:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
1004f990:	f7fe ff38 	bl	1004e804 <RADIO_GetMaxPALevel>
1004f994:	0003      	movs	r3, r0
}
1004f996:	0018      	movs	r0, r3
1004f998:	46bd      	mov	sp, r7
1004f99a:	bd80      	pop	{r7, pc}

1004f99c <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
1004f99c:	b580      	push	{r7, lr}
1004f99e:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
1004f9a0:	f7fe ff36 	bl	1004e810 <RADIO_GetDefaultPALevel>
1004f9a4:	0003      	movs	r3, r0
}
1004f9a6:	0018      	movs	r0, r3
1004f9a8:	46bd      	mov	sp, r7
1004f9aa:	bd80      	pop	{r7, pc}

1004f9ac <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
1004f9ac:	b580      	push	{r7, lr}
1004f9ae:	b082      	sub	sp, #8
1004f9b0:	af00      	add	r7, sp, #0
1004f9b2:	0002      	movs	r2, r0
1004f9b4:	1dfb      	adds	r3, r7, #7
1004f9b6:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
1004f9b8:	1dfb      	adds	r3, r7, #7
1004f9ba:	781b      	ldrb	r3, [r3, #0]
1004f9bc:	0018      	movs	r0, r3
1004f9be:	f7fe ff2d 	bl	1004e81c <RADIO_SetHighPower>
}
1004f9c2:	46c0      	nop			@ (mov r8, r8)
1004f9c4:	46bd      	mov	sp, r7
1004f9c6:	b002      	add	sp, #8
1004f9c8:	bd80      	pop	{r7, pc}

1004f9ca <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
1004f9ca:	b580      	push	{r7, lr}
1004f9cc:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
1004f9ce:	f7f8 fa07 	bl	10047de0 <HAL_RADIO_ReadRSSI>
1004f9d2:	0003      	movs	r3, r0
}
1004f9d4:	0018      	movs	r0, r3
1004f9d6:	46bd      	mov	sp, r7
1004f9d8:	bd80      	pop	{r7, pc}

1004f9da <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
1004f9da:	b580      	push	{r7, lr}
1004f9dc:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
1004f9de:	f7f8 ff55 	bl	1004888c <HAL_RADIO_TIMER_GetCurrentSysTime>
1004f9e2:	0002      	movs	r2, r0
1004f9e4:	000b      	movs	r3, r1

}
1004f9e6:	0010      	movs	r0, r2
1004f9e8:	0019      	movs	r1, r3
1004f9ea:	46bd      	mov	sp, r7
1004f9ec:	bd80      	pop	{r7, pc}

1004f9ee <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
1004f9ee:	b580      	push	{r7, lr}
1004f9f0:	b084      	sub	sp, #16
1004f9f2:	af00      	add	r7, sp, #0
1004f9f4:	60f8      	str	r0, [r7, #12]
1004f9f6:	603a      	str	r2, [r7, #0]
1004f9f8:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
1004f9fa:	683a      	ldr	r2, [r7, #0]
1004f9fc:	687b      	ldr	r3, [r7, #4]
1004f9fe:	68f9      	ldr	r1, [r7, #12]
1004fa00:	0008      	movs	r0, r1
1004fa02:	f7f8 ff55 	bl	100488b0 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
1004fa06:	0003      	movs	r3, r0
}
1004fa08:	0018      	movs	r0, r3
1004fa0a:	46bd      	mov	sp, r7
1004fa0c:	b004      	add	sp, #16
1004fa0e:	bd80      	pop	{r7, pc}

1004fa10 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
1004fa10:	b580      	push	{r7, lr}
1004fa12:	b082      	sub	sp, #8
1004fa14:	af00      	add	r7, sp, #0
1004fa16:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
1004fa18:	687b      	ldr	r3, [r7, #4]
1004fa1a:	0018      	movs	r0, r3
1004fa1c:	f7f8 ff62 	bl	100488e4 <HAL_RADIO_TIMER_StopVirtualTimer>
}
1004fa20:	46c0      	nop			@ (mov r8, r8)
1004fa22:	46bd      	mov	sp, r7
1004fa24:	b002      	add	sp, #8
1004fa26:	bd80      	pop	{r7, pc}

1004fa28 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
1004fa28:	b580      	push	{r7, lr}
1004fa2a:	b082      	sub	sp, #8
1004fa2c:	af00      	add	r7, sp, #0
1004fa2e:	6078      	str	r0, [r7, #4]
1004fa30:	0008      	movs	r0, r1
1004fa32:	0011      	movs	r1, r2
1004fa34:	1cfb      	adds	r3, r7, #3
1004fa36:	1c02      	adds	r2, r0, #0
1004fa38:	701a      	strb	r2, [r3, #0]
1004fa3a:	1cbb      	adds	r3, r7, #2
1004fa3c:	1c0a      	adds	r2, r1, #0
1004fa3e:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
1004fa40:	1cbb      	adds	r3, r7, #2
1004fa42:	781a      	ldrb	r2, [r3, #0]
1004fa44:	1cfb      	adds	r3, r7, #3
1004fa46:	7819      	ldrb	r1, [r3, #0]
1004fa48:	687b      	ldr	r3, [r7, #4]
1004fa4a:	0018      	movs	r0, r3
1004fa4c:	f7f8 fe08 	bl	10048660 <HAL_RADIO_TIMER_SetRadioTimerValue>
1004fa50:	0003      	movs	r3, r0
1004fa52:	b2db      	uxtb	r3, r3
}
1004fa54:	0018      	movs	r0, r3
1004fa56:	46bd      	mov	sp, r7
1004fa58:	b002      	add	sp, #8
1004fa5a:	bd80      	pop	{r7, pc}

1004fa5c <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
1004fa5c:	b580      	push	{r7, lr}
1004fa5e:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
1004fa60:	f7f8 fe4e 	bl	10048700 <HAL_RADIO_TIMER_ClearRadioTimerValue>
1004fa64:	0003      	movs	r3, r0
1004fa66:	b2db      	uxtb	r3, r3
}
1004fa68:	0018      	movs	r0, r3
1004fa6a:	46bd      	mov	sp, r7
1004fa6c:	bd80      	pop	{r7, pc}

1004fa6e <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
1004fa6e:	b580      	push	{r7, lr}
1004fa70:	b082      	sub	sp, #8
1004fa72:	af00      	add	r7, sp, #0
1004fa74:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
1004fa76:	687b      	ldr	r3, [r7, #4]
1004fa78:	0018      	movs	r0, r3
1004fa7a:	f7f8 fddd 	bl	10048638 <HAL_RADIO_TIMER_GetAnchorPoint>
1004fa7e:	0002      	movs	r2, r0
1004fa80:	000b      	movs	r3, r1
}
1004fa82:	0010      	movs	r0, r2
1004fa84:	0019      	movs	r1, r3
1004fa86:	46bd      	mov	sp, r7
1004fa88:	b002      	add	sp, #8
1004fa8a:	bd80      	pop	{r7, pc}

1004fa8c <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
1004fa8c:	b580      	push	{r7, lr}
1004fa8e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
1004fa90:	f7f8 feaa 	bl	100487e8 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
1004fa94:	46c0      	nop			@ (mov r8, r8)
1004fa96:	46bd      	mov	sp, r7
1004fa98:	bd80      	pop	{r7, pc}
	...

1004fa9c <LL_RADIO_SetCurrentConnectionMachineNumber>:
{
1004fa9c:	b580      	push	{r7, lr}
1004fa9e:	b082      	sub	sp, #8
1004faa0:	af00      	add	r7, sp, #0
1004faa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
1004faa4:	4b07      	ldr	r3, [pc, #28]	@ (1004fac4 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
1004faa6:	685b      	ldr	r3, [r3, #4]
1004faa8:	227f      	movs	r2, #127	@ 0x7f
1004faaa:	4393      	bics	r3, r2
1004faac:	0019      	movs	r1, r3
1004faae:	687b      	ldr	r3, [r7, #4]
1004fab0:	227f      	movs	r2, #127	@ 0x7f
1004fab2:	401a      	ands	r2, r3
1004fab4:	4b03      	ldr	r3, [pc, #12]	@ (1004fac4 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
1004fab6:	430a      	orrs	r2, r1
1004fab8:	605a      	str	r2, [r3, #4]
}
1004faba:	46c0      	nop			@ (mov r8, r8)
1004fabc:	46bd      	mov	sp, r7
1004fabe:	b002      	add	sp, #8
1004fac0:	bd80      	pop	{r7, pc}
1004fac2:	46c0      	nop			@ (mov r8, r8)
1004fac4:	200000c0 	.word	0x200000c0

1004fac8 <LL_RADIO_GlobalEnableBlue>:
{
1004fac8:	b580      	push	{r7, lr}
1004faca:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
1004facc:	4b04      	ldr	r3, [pc, #16]	@ (1004fae0 <LL_RADIO_GlobalEnableBlue+0x18>)
1004face:	685a      	ldr	r2, [r3, #4]
1004fad0:	4b03      	ldr	r3, [pc, #12]	@ (1004fae0 <LL_RADIO_GlobalEnableBlue+0x18>)
1004fad2:	2180      	movs	r1, #128	@ 0x80
1004fad4:	430a      	orrs	r2, r1
1004fad6:	605a      	str	r2, [r3, #4]
}
1004fad8:	46c0      	nop			@ (mov r8, r8)
1004fada:	46bd      	mov	sp, r7
1004fadc:	bd80      	pop	{r7, pc}
1004fade:	46c0      	nop			@ (mov r8, r8)
1004fae0:	200000c0 	.word	0x200000c0

1004fae4 <LL_RADIO_GlobalDisableBlue>:
{
1004fae4:	b580      	push	{r7, lr}
1004fae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
1004fae8:	4b04      	ldr	r3, [pc, #16]	@ (1004fafc <LL_RADIO_GlobalDisableBlue+0x18>)
1004faea:	685a      	ldr	r2, [r3, #4]
1004faec:	4b03      	ldr	r3, [pc, #12]	@ (1004fafc <LL_RADIO_GlobalDisableBlue+0x18>)
1004faee:	2180      	movs	r1, #128	@ 0x80
1004faf0:	438a      	bics	r2, r1
1004faf2:	605a      	str	r2, [r3, #4]
}
1004faf4:	46c0      	nop			@ (mov r8, r8)
1004faf6:	46bd      	mov	sp, r7
1004faf8:	bd80      	pop	{r7, pc}
1004fafa:	46c0      	nop			@ (mov r8, r8)
1004fafc:	200000c0 	.word	0x200000c0

1004fb00 <LL_RADIO_SetReceiveWindowTimeout>:
{
1004fb00:	b580      	push	{r7, lr}
1004fb02:	b082      	sub	sp, #8
1004fb04:	af00      	add	r7, sp, #0
1004fb06:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
1004fb08:	4b07      	ldr	r3, [pc, #28]	@ (1004fb28 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1004fb0a:	691b      	ldr	r3, [r3, #16]
1004fb0c:	4a07      	ldr	r2, [pc, #28]	@ (1004fb2c <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
1004fb0e:	4013      	ands	r3, r2
1004fb10:	0019      	movs	r1, r3
1004fb12:	687b      	ldr	r3, [r7, #4]
1004fb14:	021b      	lsls	r3, r3, #8
1004fb16:	4a06      	ldr	r2, [pc, #24]	@ (1004fb30 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
1004fb18:	401a      	ands	r2, r3
1004fb1a:	4b03      	ldr	r3, [pc, #12]	@ (1004fb28 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1004fb1c:	430a      	orrs	r2, r1
1004fb1e:	611a      	str	r2, [r3, #16]
}
1004fb20:	46c0      	nop			@ (mov r8, r8)
1004fb22:	46bd      	mov	sp, r7
1004fb24:	b002      	add	sp, #8
1004fb26:	bd80      	pop	{r7, pc}
1004fb28:	200000c0 	.word	0x200000c0
1004fb2c:	f00000ff 	.word	0xf00000ff
1004fb30:	0fffff00 	.word	0x0fffff00

1004fb34 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
1004fb34:	b580      	push	{r7, lr}
1004fb36:	b082      	sub	sp, #8
1004fb38:	af00      	add	r7, sp, #0
1004fb3a:	0002      	movs	r2, r0
1004fb3c:	6039      	str	r1, [r7, #0]
1004fb3e:	1dfb      	adds	r3, r7, #7
1004fb40:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
1004fb42:	1dfb      	adds	r3, r7, #7
1004fb44:	781b      	ldrb	r3, [r3, #0]
1004fb46:	225c      	movs	r2, #92	@ 0x5c
1004fb48:	4353      	muls	r3, r2
1004fb4a:	4a0b      	ldr	r2, [pc, #44]	@ (1004fb78 <LL_RADIO_SetUnmappedChannel+0x44>)
1004fb4c:	4694      	mov	ip, r2
1004fb4e:	4463      	add	r3, ip
1004fb50:	681b      	ldr	r3, [r3, #0]
1004fb52:	223f      	movs	r2, #63	@ 0x3f
1004fb54:	4393      	bics	r3, r2
1004fb56:	0019      	movs	r1, r3
1004fb58:	683b      	ldr	r3, [r7, #0]
1004fb5a:	223f      	movs	r2, #63	@ 0x3f
1004fb5c:	401a      	ands	r2, r3
1004fb5e:	1dfb      	adds	r3, r7, #7
1004fb60:	781b      	ldrb	r3, [r3, #0]
1004fb62:	205c      	movs	r0, #92	@ 0x5c
1004fb64:	4343      	muls	r3, r0
1004fb66:	4804      	ldr	r0, [pc, #16]	@ (1004fb78 <LL_RADIO_SetUnmappedChannel+0x44>)
1004fb68:	4684      	mov	ip, r0
1004fb6a:	4463      	add	r3, ip
1004fb6c:	430a      	orrs	r2, r1
1004fb6e:	601a      	str	r2, [r3, #0]
}
1004fb70:	46c0      	nop			@ (mov r8, r8)
1004fb72:	46bd      	mov	sp, r7
1004fb74:	b002      	add	sp, #8
1004fb76:	bd80      	pop	{r7, pc}
1004fb78:	200000dc 	.word	0x200000dc

1004fb7c <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
1004fb7c:	b580      	push	{r7, lr}
1004fb7e:	b082      	sub	sp, #8
1004fb80:	af00      	add	r7, sp, #0
1004fb82:	0002      	movs	r2, r0
1004fb84:	1dfb      	adds	r3, r7, #7
1004fb86:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
1004fb88:	1dfb      	adds	r3, r7, #7
1004fb8a:	781b      	ldrb	r3, [r3, #0]
1004fb8c:	225c      	movs	r2, #92	@ 0x5c
1004fb8e:	4353      	muls	r3, r2
1004fb90:	4a08      	ldr	r2, [pc, #32]	@ (1004fbb4 <LL_RADIO_RadioCommandList_Enable+0x38>)
1004fb92:	4694      	mov	ip, r2
1004fb94:	4463      	add	r3, ip
1004fb96:	681a      	ldr	r2, [r3, #0]
1004fb98:	1dfb      	adds	r3, r7, #7
1004fb9a:	781b      	ldrb	r3, [r3, #0]
1004fb9c:	215c      	movs	r1, #92	@ 0x5c
1004fb9e:	434b      	muls	r3, r1
1004fba0:	4904      	ldr	r1, [pc, #16]	@ (1004fbb4 <LL_RADIO_RadioCommandList_Enable+0x38>)
1004fba2:	468c      	mov	ip, r1
1004fba4:	4463      	add	r3, ip
1004fba6:	2140      	movs	r1, #64	@ 0x40
1004fba8:	430a      	orrs	r2, r1
1004fbaa:	601a      	str	r2, [r3, #0]
}
1004fbac:	46c0      	nop			@ (mov r8, r8)
1004fbae:	46bd      	mov	sp, r7
1004fbb0:	b002      	add	sp, #8
1004fbb2:	bd80      	pop	{r7, pc}
1004fbb4:	200000dc 	.word	0x200000dc

1004fbb8 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
1004fbb8:	b580      	push	{r7, lr}
1004fbba:	b082      	sub	sp, #8
1004fbbc:	af00      	add	r7, sp, #0
1004fbbe:	0002      	movs	r2, r0
1004fbc0:	1dfb      	adds	r3, r7, #7
1004fbc2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
1004fbc4:	1dfb      	adds	r3, r7, #7
1004fbc6:	781b      	ldrb	r3, [r3, #0]
1004fbc8:	225c      	movs	r2, #92	@ 0x5c
1004fbca:	4353      	muls	r3, r2
1004fbcc:	4a08      	ldr	r2, [pc, #32]	@ (1004fbf0 <LL_RADIO_RadioCommandList_Disable+0x38>)
1004fbce:	4694      	mov	ip, r2
1004fbd0:	4463      	add	r3, ip
1004fbd2:	681a      	ldr	r2, [r3, #0]
1004fbd4:	1dfb      	adds	r3, r7, #7
1004fbd6:	781b      	ldrb	r3, [r3, #0]
1004fbd8:	215c      	movs	r1, #92	@ 0x5c
1004fbda:	434b      	muls	r3, r1
1004fbdc:	4904      	ldr	r1, [pc, #16]	@ (1004fbf0 <LL_RADIO_RadioCommandList_Disable+0x38>)
1004fbde:	468c      	mov	ip, r1
1004fbe0:	4463      	add	r3, ip
1004fbe2:	2140      	movs	r1, #64	@ 0x40
1004fbe4:	438a      	bics	r2, r1
1004fbe6:	601a      	str	r2, [r3, #0]
}
1004fbe8:	46c0      	nop			@ (mov r8, r8)
1004fbea:	46bd      	mov	sp, r7
1004fbec:	b002      	add	sp, #8
1004fbee:	bd80      	pop	{r7, pc}
1004fbf0:	200000dc 	.word	0x200000dc

1004fbf4 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
1004fbf4:	b580      	push	{r7, lr}
1004fbf6:	b082      	sub	sp, #8
1004fbf8:	af00      	add	r7, sp, #0
1004fbfa:	0002      	movs	r2, r0
1004fbfc:	1dfb      	adds	r3, r7, #7
1004fbfe:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
1004fc00:	1dfb      	adds	r3, r7, #7
1004fc02:	781b      	ldrb	r3, [r3, #0]
1004fc04:	225c      	movs	r2, #92	@ 0x5c
1004fc06:	4353      	muls	r3, r2
1004fc08:	4a08      	ldr	r2, [pc, #32]	@ (1004fc2c <LL_RADIO_TxMode_Enable+0x38>)
1004fc0a:	4694      	mov	ip, r2
1004fc0c:	4463      	add	r3, ip
1004fc0e:	681a      	ldr	r2, [r3, #0]
1004fc10:	1dfb      	adds	r3, r7, #7
1004fc12:	781b      	ldrb	r3, [r3, #0]
1004fc14:	215c      	movs	r1, #92	@ 0x5c
1004fc16:	434b      	muls	r3, r1
1004fc18:	4904      	ldr	r1, [pc, #16]	@ (1004fc2c <LL_RADIO_TxMode_Enable+0x38>)
1004fc1a:	468c      	mov	ip, r1
1004fc1c:	4463      	add	r3, ip
1004fc1e:	2180      	movs	r1, #128	@ 0x80
1004fc20:	430a      	orrs	r2, r1
1004fc22:	601a      	str	r2, [r3, #0]
}
1004fc24:	46c0      	nop			@ (mov r8, r8)
1004fc26:	46bd      	mov	sp, r7
1004fc28:	b002      	add	sp, #8
1004fc2a:	bd80      	pop	{r7, pc}
1004fc2c:	200000dc 	.word	0x200000dc

1004fc30 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
1004fc30:	b580      	push	{r7, lr}
1004fc32:	b082      	sub	sp, #8
1004fc34:	af00      	add	r7, sp, #0
1004fc36:	0002      	movs	r2, r0
1004fc38:	1dfb      	adds	r3, r7, #7
1004fc3a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
1004fc3c:	1dfb      	adds	r3, r7, #7
1004fc3e:	781b      	ldrb	r3, [r3, #0]
1004fc40:	225c      	movs	r2, #92	@ 0x5c
1004fc42:	4353      	muls	r3, r2
1004fc44:	4a08      	ldr	r2, [pc, #32]	@ (1004fc68 <LL_RADIO_TxMode_Disable+0x38>)
1004fc46:	4694      	mov	ip, r2
1004fc48:	4463      	add	r3, ip
1004fc4a:	681a      	ldr	r2, [r3, #0]
1004fc4c:	1dfb      	adds	r3, r7, #7
1004fc4e:	781b      	ldrb	r3, [r3, #0]
1004fc50:	215c      	movs	r1, #92	@ 0x5c
1004fc52:	434b      	muls	r3, r1
1004fc54:	4904      	ldr	r1, [pc, #16]	@ (1004fc68 <LL_RADIO_TxMode_Disable+0x38>)
1004fc56:	468c      	mov	ip, r1
1004fc58:	4463      	add	r3, ip
1004fc5a:	2180      	movs	r1, #128	@ 0x80
1004fc5c:	438a      	bics	r2, r1
1004fc5e:	601a      	str	r2, [r3, #0]
}
1004fc60:	46c0      	nop			@ (mov r8, r8)
1004fc62:	46bd      	mov	sp, r7
1004fc64:	b002      	add	sp, #8
1004fc66:	bd80      	pop	{r7, pc}
1004fc68:	200000dc 	.word	0x200000dc

1004fc6c <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
1004fc6c:	b580      	push	{r7, lr}
1004fc6e:	b082      	sub	sp, #8
1004fc70:	af00      	add	r7, sp, #0
1004fc72:	0002      	movs	r2, r0
1004fc74:	1dfb      	adds	r3, r7, #7
1004fc76:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
1004fc78:	1dfb      	adds	r3, r7, #7
1004fc7a:	781b      	ldrb	r3, [r3, #0]
1004fc7c:	225c      	movs	r2, #92	@ 0x5c
1004fc7e:	4353      	muls	r3, r2
1004fc80:	4a07      	ldr	r2, [pc, #28]	@ (1004fca0 <LL_RADIO_TxMode_IsEnabled+0x34>)
1004fc82:	4694      	mov	ip, r2
1004fc84:	4463      	add	r3, ip
1004fc86:	681b      	ldr	r3, [r3, #0]
1004fc88:	2280      	movs	r2, #128	@ 0x80
1004fc8a:	4013      	ands	r3, r2
1004fc8c:	2b80      	cmp	r3, #128	@ 0x80
1004fc8e:	d101      	bne.n	1004fc94 <LL_RADIO_TxMode_IsEnabled+0x28>
1004fc90:	2301      	movs	r3, #1
1004fc92:	e000      	b.n	1004fc96 <LL_RADIO_TxMode_IsEnabled+0x2a>
1004fc94:	2300      	movs	r3, #0
}
1004fc96:	0018      	movs	r0, r3
1004fc98:	46bd      	mov	sp, r7
1004fc9a:	b002      	add	sp, #8
1004fc9c:	bd80      	pop	{r7, pc}
1004fc9e:	46c0      	nop			@ (mov r8, r8)
1004fca0:	200000dc 	.word	0x200000dc

1004fca4 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
1004fca4:	b580      	push	{r7, lr}
1004fca6:	b082      	sub	sp, #8
1004fca8:	af00      	add	r7, sp, #0
1004fcaa:	0002      	movs	r2, r0
1004fcac:	6039      	str	r1, [r7, #0]
1004fcae:	1dfb      	adds	r3, r7, #7
1004fcb0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
1004fcb2:	1dfb      	adds	r3, r7, #7
1004fcb4:	781b      	ldrb	r3, [r3, #0]
1004fcb6:	225c      	movs	r2, #92	@ 0x5c
1004fcb8:	4353      	muls	r3, r2
1004fcba:	4a0c      	ldr	r2, [pc, #48]	@ (1004fcec <LL_RADIO_SetRemapChannel+0x48>)
1004fcbc:	4694      	mov	ip, r2
1004fcbe:	4463      	add	r3, ip
1004fcc0:	681b      	ldr	r3, [r3, #0]
1004fcc2:	4a0b      	ldr	r2, [pc, #44]	@ (1004fcf0 <LL_RADIO_SetRemapChannel+0x4c>)
1004fcc4:	4013      	ands	r3, r2
1004fcc6:	0019      	movs	r1, r3
1004fcc8:	683b      	ldr	r3, [r7, #0]
1004fcca:	021a      	lsls	r2, r3, #8
1004fccc:	23fc      	movs	r3, #252	@ 0xfc
1004fcce:	019b      	lsls	r3, r3, #6
1004fcd0:	401a      	ands	r2, r3
1004fcd2:	1dfb      	adds	r3, r7, #7
1004fcd4:	781b      	ldrb	r3, [r3, #0]
1004fcd6:	205c      	movs	r0, #92	@ 0x5c
1004fcd8:	4343      	muls	r3, r0
1004fcda:	4804      	ldr	r0, [pc, #16]	@ (1004fcec <LL_RADIO_SetRemapChannel+0x48>)
1004fcdc:	4684      	mov	ip, r0
1004fcde:	4463      	add	r3, ip
1004fce0:	430a      	orrs	r2, r1
1004fce2:	601a      	str	r2, [r3, #0]
}
1004fce4:	46c0      	nop			@ (mov r8, r8)
1004fce6:	46bd      	mov	sp, r7
1004fce8:	b002      	add	sp, #8
1004fcea:	bd80      	pop	{r7, pc}
1004fcec:	200000dc 	.word	0x200000dc
1004fcf0:	ffffc0ff 	.word	0xffffc0ff

1004fcf4 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
1004fcf4:	b580      	push	{r7, lr}
1004fcf6:	b082      	sub	sp, #8
1004fcf8:	af00      	add	r7, sp, #0
1004fcfa:	0002      	movs	r2, r0
1004fcfc:	1dfb      	adds	r3, r7, #7
1004fcfe:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
1004fd00:	1dfb      	adds	r3, r7, #7
1004fd02:	781b      	ldrb	r3, [r3, #0]
1004fd04:	225c      	movs	r2, #92	@ 0x5c
1004fd06:	4353      	muls	r3, r2
1004fd08:	4a05      	ldr	r2, [pc, #20]	@ (1004fd20 <LL_RADIO_GetRemapChannel+0x2c>)
1004fd0a:	4694      	mov	ip, r2
1004fd0c:	4463      	add	r3, ip
1004fd0e:	681b      	ldr	r3, [r3, #0]
1004fd10:	0a1b      	lsrs	r3, r3, #8
1004fd12:	223f      	movs	r2, #63	@ 0x3f
1004fd14:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
1004fd16:	0018      	movs	r0, r3
1004fd18:	46bd      	mov	sp, r7
1004fd1a:	b002      	add	sp, #8
1004fd1c:	bd80      	pop	{r7, pc}
1004fd1e:	46c0      	nop			@ (mov r8, r8)
1004fd20:	200000dc 	.word	0x200000dc

1004fd24 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
1004fd24:	b580      	push	{r7, lr}
1004fd26:	b082      	sub	sp, #8
1004fd28:	af00      	add	r7, sp, #0
1004fd2a:	0002      	movs	r2, r0
1004fd2c:	1dfb      	adds	r3, r7, #7
1004fd2e:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
1004fd30:	1dfb      	adds	r3, r7, #7
1004fd32:	781b      	ldrb	r3, [r3, #0]
1004fd34:	225c      	movs	r2, #92	@ 0x5c
1004fd36:	4353      	muls	r3, r2
1004fd38:	4a09      	ldr	r2, [pc, #36]	@ (1004fd60 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1004fd3a:	4694      	mov	ip, r2
1004fd3c:	4463      	add	r3, ip
1004fd3e:	681a      	ldr	r2, [r3, #0]
1004fd40:	1dfb      	adds	r3, r7, #7
1004fd42:	781b      	ldrb	r3, [r3, #0]
1004fd44:	215c      	movs	r1, #92	@ 0x5c
1004fd46:	434b      	muls	r3, r1
1004fd48:	4905      	ldr	r1, [pc, #20]	@ (1004fd60 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1004fd4a:	468c      	mov	ip, r1
1004fd4c:	4463      	add	r3, ip
1004fd4e:	2180      	movs	r1, #128	@ 0x80
1004fd50:	0209      	lsls	r1, r1, #8
1004fd52:	404a      	eors	r2, r1
1004fd54:	601a      	str	r2, [r3, #0]
}
1004fd56:	46c0      	nop			@ (mov r8, r8)
1004fd58:	46bd      	mov	sp, r7
1004fd5a:	b002      	add	sp, #8
1004fd5c:	bd80      	pop	{r7, pc}
1004fd5e:	46c0      	nop			@ (mov r8, r8)
1004fd60:	200000dc 	.word	0x200000dc

1004fd64 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
1004fd64:	b580      	push	{r7, lr}
1004fd66:	b082      	sub	sp, #8
1004fd68:	af00      	add	r7, sp, #0
1004fd6a:	0002      	movs	r2, r0
1004fd6c:	1dfb      	adds	r3, r7, #7
1004fd6e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
1004fd70:	1dfb      	adds	r3, r7, #7
1004fd72:	781b      	ldrb	r3, [r3, #0]
1004fd74:	225c      	movs	r2, #92	@ 0x5c
1004fd76:	4353      	muls	r3, r2
1004fd78:	4a09      	ldr	r2, [pc, #36]	@ (1004fda0 <LL_RADIO_Encryption_Enable+0x3c>)
1004fd7a:	4694      	mov	ip, r2
1004fd7c:	4463      	add	r3, ip
1004fd7e:	681a      	ldr	r2, [r3, #0]
1004fd80:	1dfb      	adds	r3, r7, #7
1004fd82:	781b      	ldrb	r3, [r3, #0]
1004fd84:	215c      	movs	r1, #92	@ 0x5c
1004fd86:	434b      	muls	r3, r1
1004fd88:	4905      	ldr	r1, [pc, #20]	@ (1004fda0 <LL_RADIO_Encryption_Enable+0x3c>)
1004fd8a:	468c      	mov	ip, r1
1004fd8c:	4463      	add	r3, ip
1004fd8e:	2180      	movs	r1, #128	@ 0x80
1004fd90:	0389      	lsls	r1, r1, #14
1004fd92:	430a      	orrs	r2, r1
1004fd94:	601a      	str	r2, [r3, #0]
}
1004fd96:	46c0      	nop			@ (mov r8, r8)
1004fd98:	46bd      	mov	sp, r7
1004fd9a:	b002      	add	sp, #8
1004fd9c:	bd80      	pop	{r7, pc}
1004fd9e:	46c0      	nop			@ (mov r8, r8)
1004fda0:	200000dc 	.word	0x200000dc

1004fda4 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
1004fda4:	b580      	push	{r7, lr}
1004fda6:	b082      	sub	sp, #8
1004fda8:	af00      	add	r7, sp, #0
1004fdaa:	0002      	movs	r2, r0
1004fdac:	1dfb      	adds	r3, r7, #7
1004fdae:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
1004fdb0:	1dfb      	adds	r3, r7, #7
1004fdb2:	781b      	ldrb	r3, [r3, #0]
1004fdb4:	225c      	movs	r2, #92	@ 0x5c
1004fdb6:	4353      	muls	r3, r2
1004fdb8:	4a08      	ldr	r2, [pc, #32]	@ (1004fddc <LL_RADIO_Encryption_Disable+0x38>)
1004fdba:	4694      	mov	ip, r2
1004fdbc:	4463      	add	r3, ip
1004fdbe:	681a      	ldr	r2, [r3, #0]
1004fdc0:	1dfb      	adds	r3, r7, #7
1004fdc2:	781b      	ldrb	r3, [r3, #0]
1004fdc4:	215c      	movs	r1, #92	@ 0x5c
1004fdc6:	434b      	muls	r3, r1
1004fdc8:	4904      	ldr	r1, [pc, #16]	@ (1004fddc <LL_RADIO_Encryption_Disable+0x38>)
1004fdca:	468c      	mov	ip, r1
1004fdcc:	4463      	add	r3, ip
1004fdce:	4904      	ldr	r1, [pc, #16]	@ (1004fde0 <LL_RADIO_Encryption_Disable+0x3c>)
1004fdd0:	400a      	ands	r2, r1
1004fdd2:	601a      	str	r2, [r3, #0]
}
1004fdd4:	46c0      	nop			@ (mov r8, r8)
1004fdd6:	46bd      	mov	sp, r7
1004fdd8:	b002      	add	sp, #8
1004fdda:	bd80      	pop	{r7, pc}
1004fddc:	200000dc 	.word	0x200000dc
1004fde0:	ffdfffff 	.word	0xffdfffff

1004fde4 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
1004fde4:	b580      	push	{r7, lr}
1004fde6:	b082      	sub	sp, #8
1004fde8:	af00      	add	r7, sp, #0
1004fdea:	0002      	movs	r2, r0
1004fdec:	6039      	str	r1, [r7, #0]
1004fdee:	1dfb      	adds	r3, r7, #7
1004fdf0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
1004fdf2:	1dfb      	adds	r3, r7, #7
1004fdf4:	781b      	ldrb	r3, [r3, #0]
1004fdf6:	225c      	movs	r2, #92	@ 0x5c
1004fdf8:	4353      	muls	r3, r2
1004fdfa:	4a0c      	ldr	r2, [pc, #48]	@ (1004fe2c <LL_RADIO_SetTransmissionPhy+0x48>)
1004fdfc:	4694      	mov	ip, r2
1004fdfe:	4463      	add	r3, ip
1004fe00:	681b      	ldr	r3, [r3, #0]
1004fe02:	4a0b      	ldr	r2, [pc, #44]	@ (1004fe30 <LL_RADIO_SetTransmissionPhy+0x4c>)
1004fe04:	4013      	ands	r3, r2
1004fe06:	0019      	movs	r1, r3
1004fe08:	683b      	ldr	r3, [r7, #0]
1004fe0a:	061a      	lsls	r2, r3, #24
1004fe0c:	23e0      	movs	r3, #224	@ 0xe0
1004fe0e:	04db      	lsls	r3, r3, #19
1004fe10:	401a      	ands	r2, r3
1004fe12:	1dfb      	adds	r3, r7, #7
1004fe14:	781b      	ldrb	r3, [r3, #0]
1004fe16:	205c      	movs	r0, #92	@ 0x5c
1004fe18:	4343      	muls	r3, r0
1004fe1a:	4804      	ldr	r0, [pc, #16]	@ (1004fe2c <LL_RADIO_SetTransmissionPhy+0x48>)
1004fe1c:	4684      	mov	ip, r0
1004fe1e:	4463      	add	r3, ip
1004fe20:	430a      	orrs	r2, r1
1004fe22:	601a      	str	r2, [r3, #0]
}
1004fe24:	46c0      	nop			@ (mov r8, r8)
1004fe26:	46bd      	mov	sp, r7
1004fe28:	b002      	add	sp, #8
1004fe2a:	bd80      	pop	{r7, pc}
1004fe2c:	200000dc 	.word	0x200000dc
1004fe30:	f8ffffff 	.word	0xf8ffffff

1004fe34 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
1004fe34:	b580      	push	{r7, lr}
1004fe36:	b082      	sub	sp, #8
1004fe38:	af00      	add	r7, sp, #0
1004fe3a:	0002      	movs	r2, r0
1004fe3c:	1dfb      	adds	r3, r7, #7
1004fe3e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
1004fe40:	1dfb      	adds	r3, r7, #7
1004fe42:	781b      	ldrb	r3, [r3, #0]
1004fe44:	225c      	movs	r2, #92	@ 0x5c
1004fe46:	4353      	muls	r3, r2
1004fe48:	4a05      	ldr	r2, [pc, #20]	@ (1004fe60 <LL_RADIO_GetTransmissionPhy+0x2c>)
1004fe4a:	4694      	mov	ip, r2
1004fe4c:	4463      	add	r3, ip
1004fe4e:	681b      	ldr	r3, [r3, #0]
1004fe50:	0e1b      	lsrs	r3, r3, #24
1004fe52:	2207      	movs	r2, #7
1004fe54:	4013      	ands	r3, r2
}
1004fe56:	0018      	movs	r0, r3
1004fe58:	46bd      	mov	sp, r7
1004fe5a:	b002      	add	sp, #8
1004fe5c:	bd80      	pop	{r7, pc}
1004fe5e:	46c0      	nop			@ (mov r8, r8)
1004fe60:	200000dc 	.word	0x200000dc

1004fe64 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
1004fe64:	b580      	push	{r7, lr}
1004fe66:	b082      	sub	sp, #8
1004fe68:	af00      	add	r7, sp, #0
1004fe6a:	0002      	movs	r2, r0
1004fe6c:	6039      	str	r1, [r7, #0]
1004fe6e:	1dfb      	adds	r3, r7, #7
1004fe70:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
1004fe72:	1dfb      	adds	r3, r7, #7
1004fe74:	781b      	ldrb	r3, [r3, #0]
1004fe76:	225c      	movs	r2, #92	@ 0x5c
1004fe78:	4353      	muls	r3, r2
1004fe7a:	4a0c      	ldr	r2, [pc, #48]	@ (1004feac <LL_RADIO_SetCTEDisable+0x48>)
1004fe7c:	4694      	mov	ip, r2
1004fe7e:	4463      	add	r3, ip
1004fe80:	681b      	ldr	r3, [r3, #0]
1004fe82:	4a0b      	ldr	r2, [pc, #44]	@ (1004feb0 <LL_RADIO_SetCTEDisable+0x4c>)
1004fe84:	4013      	ands	r3, r2
1004fe86:	0019      	movs	r1, r3
1004fe88:	683b      	ldr	r3, [r7, #0]
1004fe8a:	06da      	lsls	r2, r3, #27
1004fe8c:	2380      	movs	r3, #128	@ 0x80
1004fe8e:	051b      	lsls	r3, r3, #20
1004fe90:	401a      	ands	r2, r3
1004fe92:	1dfb      	adds	r3, r7, #7
1004fe94:	781b      	ldrb	r3, [r3, #0]
1004fe96:	205c      	movs	r0, #92	@ 0x5c
1004fe98:	4343      	muls	r3, r0
1004fe9a:	4804      	ldr	r0, [pc, #16]	@ (1004feac <LL_RADIO_SetCTEDisable+0x48>)
1004fe9c:	4684      	mov	ip, r0
1004fe9e:	4463      	add	r3, ip
1004fea0:	430a      	orrs	r2, r1
1004fea2:	601a      	str	r2, [r3, #0]
}
1004fea4:	46c0      	nop			@ (mov r8, r8)
1004fea6:	46bd      	mov	sp, r7
1004fea8:	b002      	add	sp, #8
1004feaa:	bd80      	pop	{r7, pc}
1004feac:	200000dc 	.word	0x200000dc
1004feb0:	f7ffffff 	.word	0xf7ffffff

1004feb4 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
1004feb4:	b580      	push	{r7, lr}
1004feb6:	b082      	sub	sp, #8
1004feb8:	af00      	add	r7, sp, #0
1004feba:	0002      	movs	r2, r0
1004febc:	6039      	str	r1, [r7, #0]
1004febe:	1dfb      	adds	r3, r7, #7
1004fec0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
1004fec2:	1dfb      	adds	r3, r7, #7
1004fec4:	781b      	ldrb	r3, [r3, #0]
1004fec6:	225c      	movs	r2, #92	@ 0x5c
1004fec8:	4353      	muls	r3, r2
1004feca:	4a0c      	ldr	r2, [pc, #48]	@ (1004fefc <LL_RADIO_SetReceptionPhy+0x48>)
1004fecc:	4694      	mov	ip, r2
1004fece:	4463      	add	r3, ip
1004fed0:	681b      	ldr	r3, [r3, #0]
1004fed2:	4a0b      	ldr	r2, [pc, #44]	@ (1004ff00 <LL_RADIO_SetReceptionPhy+0x4c>)
1004fed4:	4013      	ands	r3, r2
1004fed6:	0019      	movs	r1, r3
1004fed8:	683b      	ldr	r3, [r7, #0]
1004feda:	071a      	lsls	r2, r3, #28
1004fedc:	23e0      	movs	r3, #224	@ 0xe0
1004fede:	05db      	lsls	r3, r3, #23
1004fee0:	401a      	ands	r2, r3
1004fee2:	1dfb      	adds	r3, r7, #7
1004fee4:	781b      	ldrb	r3, [r3, #0]
1004fee6:	205c      	movs	r0, #92	@ 0x5c
1004fee8:	4343      	muls	r3, r0
1004feea:	4804      	ldr	r0, [pc, #16]	@ (1004fefc <LL_RADIO_SetReceptionPhy+0x48>)
1004feec:	4684      	mov	ip, r0
1004feee:	4463      	add	r3, ip
1004fef0:	430a      	orrs	r2, r1
1004fef2:	601a      	str	r2, [r3, #0]
}
1004fef4:	46c0      	nop			@ (mov r8, r8)
1004fef6:	46bd      	mov	sp, r7
1004fef8:	b002      	add	sp, #8
1004fefa:	bd80      	pop	{r7, pc}
1004fefc:	200000dc 	.word	0x200000dc
1004ff00:	8fffffff 	.word	0x8fffffff

1004ff04 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
1004ff04:	b580      	push	{r7, lr}
1004ff06:	b082      	sub	sp, #8
1004ff08:	af00      	add	r7, sp, #0
1004ff0a:	0002      	movs	r2, r0
1004ff0c:	1dfb      	adds	r3, r7, #7
1004ff0e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
1004ff10:	1dfb      	adds	r3, r7, #7
1004ff12:	781b      	ldrb	r3, [r3, #0]
1004ff14:	225c      	movs	r2, #92	@ 0x5c
1004ff16:	4353      	muls	r3, r2
1004ff18:	4a05      	ldr	r2, [pc, #20]	@ (1004ff30 <LL_RADIO_GetReceptionPhy+0x2c>)
1004ff1a:	4694      	mov	ip, r2
1004ff1c:	4463      	add	r3, ip
1004ff1e:	681b      	ldr	r3, [r3, #0]
1004ff20:	0f1b      	lsrs	r3, r3, #28
1004ff22:	2207      	movs	r2, #7
1004ff24:	4013      	ands	r3, r2
}
1004ff26:	0018      	movs	r0, r3
1004ff28:	46bd      	mov	sp, r7
1004ff2a:	b002      	add	sp, #8
1004ff2c:	bd80      	pop	{r7, pc}
1004ff2e:	46c0      	nop			@ (mov r8, r8)
1004ff30:	200000dc 	.word	0x200000dc

1004ff34 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
1004ff34:	b580      	push	{r7, lr}
1004ff36:	b082      	sub	sp, #8
1004ff38:	af00      	add	r7, sp, #0
1004ff3a:	0002      	movs	r2, r0
1004ff3c:	6039      	str	r1, [r7, #0]
1004ff3e:	1dfb      	adds	r3, r7, #7
1004ff40:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
1004ff42:	1dfb      	adds	r3, r7, #7
1004ff44:	781b      	ldrb	r3, [r3, #0]
1004ff46:	225c      	movs	r2, #92	@ 0x5c
1004ff48:	4353      	muls	r3, r2
1004ff4a:	4a08      	ldr	r2, [pc, #32]	@ (1004ff6c <LL_RADIO_SetTxPoint+0x38>)
1004ff4c:	4694      	mov	ip, r2
1004ff4e:	4463      	add	r3, ip
1004ff50:	685b      	ldr	r3, [r3, #4]
1004ff52:	1dfb      	adds	r3, r7, #7
1004ff54:	781b      	ldrb	r3, [r3, #0]
1004ff56:	225c      	movs	r2, #92	@ 0x5c
1004ff58:	4353      	muls	r3, r2
1004ff5a:	4a04      	ldr	r2, [pc, #16]	@ (1004ff6c <LL_RADIO_SetTxPoint+0x38>)
1004ff5c:	4694      	mov	ip, r2
1004ff5e:	4463      	add	r3, ip
1004ff60:	683a      	ldr	r2, [r7, #0]
1004ff62:	605a      	str	r2, [r3, #4]
}
1004ff64:	46c0      	nop			@ (mov r8, r8)
1004ff66:	46bd      	mov	sp, r7
1004ff68:	b002      	add	sp, #8
1004ff6a:	bd80      	pop	{r7, pc}
1004ff6c:	200000dc 	.word	0x200000dc

1004ff70 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
1004ff70:	b580      	push	{r7, lr}
1004ff72:	b082      	sub	sp, #8
1004ff74:	af00      	add	r7, sp, #0
1004ff76:	0002      	movs	r2, r0
1004ff78:	6039      	str	r1, [r7, #0]
1004ff7a:	1dfb      	adds	r3, r7, #7
1004ff7c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
1004ff7e:	1dfb      	adds	r3, r7, #7
1004ff80:	781b      	ldrb	r3, [r3, #0]
1004ff82:	225c      	movs	r2, #92	@ 0x5c
1004ff84:	4353      	muls	r3, r2
1004ff86:	4a08      	ldr	r2, [pc, #32]	@ (1004ffa8 <LL_RADIO_SetRcvPoint+0x38>)
1004ff88:	4694      	mov	ip, r2
1004ff8a:	4463      	add	r3, ip
1004ff8c:	689b      	ldr	r3, [r3, #8]
1004ff8e:	1dfb      	adds	r3, r7, #7
1004ff90:	781b      	ldrb	r3, [r3, #0]
1004ff92:	225c      	movs	r2, #92	@ 0x5c
1004ff94:	4353      	muls	r3, r2
1004ff96:	4a04      	ldr	r2, [pc, #16]	@ (1004ffa8 <LL_RADIO_SetRcvPoint+0x38>)
1004ff98:	4694      	mov	ip, r2
1004ff9a:	4463      	add	r3, ip
1004ff9c:	683a      	ldr	r2, [r7, #0]
1004ff9e:	609a      	str	r2, [r3, #8]
}
1004ffa0:	46c0      	nop			@ (mov r8, r8)
1004ffa2:	46bd      	mov	sp, r7
1004ffa4:	b002      	add	sp, #8
1004ffa6:	bd80      	pop	{r7, pc}
1004ffa8:	200000dc 	.word	0x200000dc

1004ffac <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
1004ffac:	b580      	push	{r7, lr}
1004ffae:	b082      	sub	sp, #8
1004ffb0:	af00      	add	r7, sp, #0
1004ffb2:	0002      	movs	r2, r0
1004ffb4:	6039      	str	r1, [r7, #0]
1004ffb6:	1dfb      	adds	r3, r7, #7
1004ffb8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
1004ffba:	1dfb      	adds	r3, r7, #7
1004ffbc:	781b      	ldrb	r3, [r3, #0]
1004ffbe:	225c      	movs	r2, #92	@ 0x5c
1004ffc0:	4353      	muls	r3, r2
1004ffc2:	4a08      	ldr	r2, [pc, #32]	@ (1004ffe4 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
1004ffc4:	4694      	mov	ip, r2
1004ffc6:	4463      	add	r3, ip
1004ffc8:	699b      	ldr	r3, [r3, #24]
1004ffca:	1dfb      	adds	r3, r7, #7
1004ffcc:	781b      	ldrb	r3, [r3, #0]
1004ffce:	225c      	movs	r2, #92	@ 0x5c
1004ffd0:	4353      	muls	r3, r2
1004ffd2:	4a04      	ldr	r2, [pc, #16]	@ (1004ffe4 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
1004ffd4:	4694      	mov	ip, r2
1004ffd6:	4463      	add	r3, ip
1004ffd8:	683a      	ldr	r2, [r7, #0]
1004ffda:	619a      	str	r2, [r3, #24]
}
1004ffdc:	46c0      	nop			@ (mov r8, r8)
1004ffde:	46bd      	mov	sp, r7
1004ffe0:	b002      	add	sp, #8
1004ffe2:	bd80      	pop	{r7, pc}
1004ffe4:	200000dc 	.word	0x200000dc

1004ffe8 <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
1004ffe8:	b580      	push	{r7, lr}
1004ffea:	b082      	sub	sp, #8
1004ffec:	af00      	add	r7, sp, #0
1004ffee:	0002      	movs	r2, r0
1004fff0:	6039      	str	r1, [r7, #0]
1004fff2:	1dfb      	adds	r3, r7, #7
1004fff4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
1004fff6:	1dfb      	adds	r3, r7, #7
1004fff8:	781b      	ldrb	r3, [r3, #0]
1004fffa:	225c      	movs	r2, #92	@ 0x5c
1004fffc:	4353      	muls	r3, r2
1004fffe:	4a0b      	ldr	r2, [pc, #44]	@ (1005002c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10050000:	4694      	mov	ip, r2
10050002:	4463      	add	r3, ip
10050004:	69db      	ldr	r3, [r3, #28]
10050006:	22ff      	movs	r2, #255	@ 0xff
10050008:	4393      	bics	r3, r2
1005000a:	0019      	movs	r1, r3
1005000c:	683b      	ldr	r3, [r7, #0]
1005000e:	22ff      	movs	r2, #255	@ 0xff
10050010:	401a      	ands	r2, r3
10050012:	1dfb      	adds	r3, r7, #7
10050014:	781b      	ldrb	r3, [r3, #0]
10050016:	205c      	movs	r0, #92	@ 0x5c
10050018:	4343      	muls	r3, r0
1005001a:	4804      	ldr	r0, [pc, #16]	@ (1005002c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
1005001c:	4684      	mov	ip, r0
1005001e:	4463      	add	r3, ip
10050020:	430a      	orrs	r2, r1
10050022:	61da      	str	r2, [r3, #28]
}
10050024:	46c0      	nop			@ (mov r8, r8)
10050026:	46bd      	mov	sp, r7
10050028:	b002      	add	sp, #8
1005002a:	bd80      	pop	{r7, pc}
1005002c:	200000dc 	.word	0x200000dc

10050030 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10050030:	b580      	push	{r7, lr}
10050032:	b082      	sub	sp, #8
10050034:	af00      	add	r7, sp, #0
10050036:	0002      	movs	r2, r0
10050038:	1dfb      	adds	r3, r7, #7
1005003a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
1005003c:	1dfb      	adds	r3, r7, #7
1005003e:	781b      	ldrb	r3, [r3, #0]
10050040:	225c      	movs	r2, #92	@ 0x5c
10050042:	4353      	muls	r3, r2
10050044:	4a04      	ldr	r2, [pc, #16]	@ (10050058 <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
10050046:	4694      	mov	ip, r2
10050048:	4463      	add	r3, ip
1005004a:	69db      	ldr	r3, [r3, #28]
1005004c:	22ff      	movs	r2, #255	@ 0xff
1005004e:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
10050050:	0018      	movs	r0, r3
10050052:	46bd      	mov	sp, r7
10050054:	b002      	add	sp, #8
10050056:	bd80      	pop	{r7, pc}
10050058:	200000dc 	.word	0x200000dc

1005005c <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
1005005c:	b580      	push	{r7, lr}
1005005e:	b082      	sub	sp, #8
10050060:	af00      	add	r7, sp, #0
10050062:	0002      	movs	r2, r0
10050064:	6039      	str	r1, [r7, #0]
10050066:	1dfb      	adds	r3, r7, #7
10050068:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
1005006a:	1dfb      	adds	r3, r7, #7
1005006c:	781b      	ldrb	r3, [r3, #0]
1005006e:	225c      	movs	r2, #92	@ 0x5c
10050070:	4353      	muls	r3, r2
10050072:	4a0b      	ldr	r2, [pc, #44]	@ (100500a0 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10050074:	4694      	mov	ip, r2
10050076:	4463      	add	r3, ip
10050078:	69db      	ldr	r3, [r3, #28]
1005007a:	22ff      	movs	r2, #255	@ 0xff
1005007c:	4013      	ands	r3, r2
1005007e:	0019      	movs	r1, r3
10050080:	683b      	ldr	r3, [r7, #0]
10050082:	021a      	lsls	r2, r3, #8
10050084:	1dfb      	adds	r3, r7, #7
10050086:	781b      	ldrb	r3, [r3, #0]
10050088:	205c      	movs	r0, #92	@ 0x5c
1005008a:	4343      	muls	r3, r0
1005008c:	4804      	ldr	r0, [pc, #16]	@ (100500a0 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
1005008e:	4684      	mov	ip, r0
10050090:	4463      	add	r3, ip
10050092:	430a      	orrs	r2, r1
10050094:	61da      	str	r2, [r3, #28]
}
10050096:	46c0      	nop			@ (mov r8, r8)
10050098:	46bd      	mov	sp, r7
1005009a:	b002      	add	sp, #8
1005009c:	bd80      	pop	{r7, pc}
1005009e:	46c0      	nop			@ (mov r8, r8)
100500a0:	200000dc 	.word	0x200000dc

100500a4 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
100500a4:	b580      	push	{r7, lr}
100500a6:	b082      	sub	sp, #8
100500a8:	af00      	add	r7, sp, #0
100500aa:	0002      	movs	r2, r0
100500ac:	1dfb      	adds	r3, r7, #7
100500ae:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
100500b0:	1dfb      	adds	r3, r7, #7
100500b2:	781b      	ldrb	r3, [r3, #0]
100500b4:	225c      	movs	r2, #92	@ 0x5c
100500b6:	4353      	muls	r3, r2
100500b8:	4a05      	ldr	r2, [pc, #20]	@ (100500d0 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
100500ba:	4694      	mov	ip, r2
100500bc:	4463      	add	r3, ip
100500be:	69db      	ldr	r3, [r3, #28]
100500c0:	0a1b      	lsrs	r3, r3, #8
100500c2:	021b      	lsls	r3, r3, #8
100500c4:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
100500c6:	0018      	movs	r0, r3
100500c8:	46bd      	mov	sp, r7
100500ca:	b002      	add	sp, #8
100500cc:	bd80      	pop	{r7, pc}
100500ce:	46c0      	nop			@ (mov r8, r8)
100500d0:	200000dc 	.word	0x200000dc

100500d4 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
100500d4:	b580      	push	{r7, lr}
100500d6:	b082      	sub	sp, #8
100500d8:	af00      	add	r7, sp, #0
100500da:	0002      	movs	r2, r0
100500dc:	6039      	str	r1, [r7, #0]
100500de:	1dfb      	adds	r3, r7, #7
100500e0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
100500e2:	1dfb      	adds	r3, r7, #7
100500e4:	781b      	ldrb	r3, [r3, #0]
100500e6:	225c      	movs	r2, #92	@ 0x5c
100500e8:	4353      	muls	r3, r2
100500ea:	4a0b      	ldr	r2, [pc, #44]	@ (10050118 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
100500ec:	4694      	mov	ip, r2
100500ee:	4463      	add	r3, ip
100500f0:	6a1b      	ldr	r3, [r3, #32]
100500f2:	0c1b      	lsrs	r3, r3, #16
100500f4:	0419      	lsls	r1, r3, #16
100500f6:	683b      	ldr	r3, [r7, #0]
100500f8:	041b      	lsls	r3, r3, #16
100500fa:	0c1a      	lsrs	r2, r3, #16
100500fc:	1dfb      	adds	r3, r7, #7
100500fe:	781b      	ldrb	r3, [r3, #0]
10050100:	205c      	movs	r0, #92	@ 0x5c
10050102:	4343      	muls	r3, r0
10050104:	4804      	ldr	r0, [pc, #16]	@ (10050118 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10050106:	4684      	mov	ip, r0
10050108:	4463      	add	r3, ip
1005010a:	430a      	orrs	r2, r1
1005010c:	621a      	str	r2, [r3, #32]
}
1005010e:	46c0      	nop			@ (mov r8, r8)
10050110:	46bd      	mov	sp, r7
10050112:	b002      	add	sp, #8
10050114:	bd80      	pop	{r7, pc}
10050116:	46c0      	nop			@ (mov r8, r8)
10050118:	200000dc 	.word	0x200000dc

1005011c <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
1005011c:	b580      	push	{r7, lr}
1005011e:	b082      	sub	sp, #8
10050120:	af00      	add	r7, sp, #0
10050122:	0002      	movs	r2, r0
10050124:	1dfb      	adds	r3, r7, #7
10050126:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
10050128:	1dfb      	adds	r3, r7, #7
1005012a:	781b      	ldrb	r3, [r3, #0]
1005012c:	225c      	movs	r2, #92	@ 0x5c
1005012e:	4353      	muls	r3, r2
10050130:	4a04      	ldr	r2, [pc, #16]	@ (10050144 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
10050132:	4694      	mov	ip, r2
10050134:	4463      	add	r3, ip
10050136:	6a1b      	ldr	r3, [r3, #32]
10050138:	041b      	lsls	r3, r3, #16
1005013a:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
1005013c:	0018      	movs	r0, r3
1005013e:	46bd      	mov	sp, r7
10050140:	b002      	add	sp, #8
10050142:	bd80      	pop	{r7, pc}
10050144:	200000dc 	.word	0x200000dc

10050148 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
10050148:	b580      	push	{r7, lr}
1005014a:	b082      	sub	sp, #8
1005014c:	af00      	add	r7, sp, #0
1005014e:	0002      	movs	r2, r0
10050150:	1dfb      	adds	r3, r7, #7
10050152:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10050154:	1dfb      	adds	r3, r7, #7
10050156:	781b      	ldrb	r3, [r3, #0]
10050158:	225c      	movs	r2, #92	@ 0x5c
1005015a:	4353      	muls	r3, r2
1005015c:	4a09      	ldr	r2, [pc, #36]	@ (10050184 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
1005015e:	4694      	mov	ip, r2
10050160:	4463      	add	r3, ip
10050162:	6a1a      	ldr	r2, [r3, #32]
10050164:	1dfb      	adds	r3, r7, #7
10050166:	781b      	ldrb	r3, [r3, #0]
10050168:	215c      	movs	r1, #92	@ 0x5c
1005016a:	434b      	muls	r3, r1
1005016c:	4905      	ldr	r1, [pc, #20]	@ (10050184 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
1005016e:	468c      	mov	ip, r1
10050170:	4463      	add	r3, ip
10050172:	2180      	movs	r1, #128	@ 0x80
10050174:	0589      	lsls	r1, r1, #22
10050176:	430a      	orrs	r2, r1
10050178:	621a      	str	r2, [r3, #32]
}
1005017a:	46c0      	nop			@ (mov r8, r8)
1005017c:	46bd      	mov	sp, r7
1005017e:	b002      	add	sp, #8
10050180:	bd80      	pop	{r7, pc}
10050182:	46c0      	nop			@ (mov r8, r8)
10050184:	200000dc 	.word	0x200000dc

10050188 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
10050188:	b580      	push	{r7, lr}
1005018a:	b082      	sub	sp, #8
1005018c:	af00      	add	r7, sp, #0
1005018e:	0002      	movs	r2, r0
10050190:	1dfb      	adds	r3, r7, #7
10050192:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10050194:	1dfb      	adds	r3, r7, #7
10050196:	781b      	ldrb	r3, [r3, #0]
10050198:	225c      	movs	r2, #92	@ 0x5c
1005019a:	4353      	muls	r3, r2
1005019c:	4a08      	ldr	r2, [pc, #32]	@ (100501c0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
1005019e:	4694      	mov	ip, r2
100501a0:	4463      	add	r3, ip
100501a2:	6a1a      	ldr	r2, [r3, #32]
100501a4:	1dfb      	adds	r3, r7, #7
100501a6:	781b      	ldrb	r3, [r3, #0]
100501a8:	215c      	movs	r1, #92	@ 0x5c
100501aa:	434b      	muls	r3, r1
100501ac:	4904      	ldr	r1, [pc, #16]	@ (100501c0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100501ae:	468c      	mov	ip, r1
100501b0:	4463      	add	r3, ip
100501b2:	4904      	ldr	r1, [pc, #16]	@ (100501c4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
100501b4:	400a      	ands	r2, r1
100501b6:	621a      	str	r2, [r3, #32]
}
100501b8:	46c0      	nop			@ (mov r8, r8)
100501ba:	46bd      	mov	sp, r7
100501bc:	b002      	add	sp, #8
100501be:	bd80      	pop	{r7, pc}
100501c0:	200000dc 	.word	0x200000dc
100501c4:	dfffffff 	.word	0xdfffffff

100501c8 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
100501c8:	b580      	push	{r7, lr}
100501ca:	b082      	sub	sp, #8
100501cc:	af00      	add	r7, sp, #0
100501ce:	0002      	movs	r2, r0
100501d0:	6039      	str	r1, [r7, #0]
100501d2:	1dfb      	adds	r3, r7, #7
100501d4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
100501d6:	1dfb      	adds	r3, r7, #7
100501d8:	781b      	ldrb	r3, [r3, #0]
100501da:	225c      	movs	r2, #92	@ 0x5c
100501dc:	4353      	muls	r3, r2
100501de:	4a08      	ldr	r2, [pc, #32]	@ (10050200 <LL_RADIO_SetAccessAddress+0x38>)
100501e0:	4694      	mov	ip, r2
100501e2:	4463      	add	r3, ip
100501e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100501e6:	1dfb      	adds	r3, r7, #7
100501e8:	781b      	ldrb	r3, [r3, #0]
100501ea:	225c      	movs	r2, #92	@ 0x5c
100501ec:	4353      	muls	r3, r2
100501ee:	4a04      	ldr	r2, [pc, #16]	@ (10050200 <LL_RADIO_SetAccessAddress+0x38>)
100501f0:	4694      	mov	ip, r2
100501f2:	4463      	add	r3, ip
100501f4:	683a      	ldr	r2, [r7, #0]
100501f6:	625a      	str	r2, [r3, #36]	@ 0x24
}
100501f8:	46c0      	nop			@ (mov r8, r8)
100501fa:	46bd      	mov	sp, r7
100501fc:	b002      	add	sp, #8
100501fe:	bd80      	pop	{r7, pc}
10050200:	200000dc 	.word	0x200000dc

10050204 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10050204:	b580      	push	{r7, lr}
10050206:	b082      	sub	sp, #8
10050208:	af00      	add	r7, sp, #0
1005020a:	0002      	movs	r2, r0
1005020c:	1dfb      	adds	r3, r7, #7
1005020e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10050210:	1dfb      	adds	r3, r7, #7
10050212:	781b      	ldrb	r3, [r3, #0]
10050214:	225c      	movs	r2, #92	@ 0x5c
10050216:	4353      	muls	r3, r2
10050218:	4a03      	ldr	r2, [pc, #12]	@ (10050228 <LL_RADIO_GetAccessAddress+0x24>)
1005021a:	4694      	mov	ip, r2
1005021c:	4463      	add	r3, ip
1005021e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10050220:	0018      	movs	r0, r3
10050222:	46bd      	mov	sp, r7
10050224:	b002      	add	sp, #8
10050226:	bd80      	pop	{r7, pc}
10050228:	200000dc 	.word	0x200000dc

1005022c <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
1005022c:	b580      	push	{r7, lr}
1005022e:	b082      	sub	sp, #8
10050230:	af00      	add	r7, sp, #0
10050232:	0002      	movs	r2, r0
10050234:	6039      	str	r1, [r7, #0]
10050236:	1dfb      	adds	r3, r7, #7
10050238:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
1005023a:	1dfb      	adds	r3, r7, #7
1005023c:	781b      	ldrb	r3, [r3, #0]
1005023e:	225c      	movs	r2, #92	@ 0x5c
10050240:	4353      	muls	r3, r2
10050242:	4a0b      	ldr	r2, [pc, #44]	@ (10050270 <LL_RADIO_SetCRCInitializationValue+0x44>)
10050244:	4694      	mov	ip, r2
10050246:	4463      	add	r3, ip
10050248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1005024a:	0e1b      	lsrs	r3, r3, #24
1005024c:	0619      	lsls	r1, r3, #24
1005024e:	683b      	ldr	r3, [r7, #0]
10050250:	021b      	lsls	r3, r3, #8
10050252:	0a1a      	lsrs	r2, r3, #8
10050254:	1dfb      	adds	r3, r7, #7
10050256:	781b      	ldrb	r3, [r3, #0]
10050258:	205c      	movs	r0, #92	@ 0x5c
1005025a:	4343      	muls	r3, r0
1005025c:	4804      	ldr	r0, [pc, #16]	@ (10050270 <LL_RADIO_SetCRCInitializationValue+0x44>)
1005025e:	4684      	mov	ip, r0
10050260:	4463      	add	r3, ip
10050262:	430a      	orrs	r2, r1
10050264:	629a      	str	r2, [r3, #40]	@ 0x28
}
10050266:	46c0      	nop			@ (mov r8, r8)
10050268:	46bd      	mov	sp, r7
1005026a:	b002      	add	sp, #8
1005026c:	bd80      	pop	{r7, pc}
1005026e:	46c0      	nop			@ (mov r8, r8)
10050270:	200000dc 	.word	0x200000dc

10050274 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10050274:	b580      	push	{r7, lr}
10050276:	b082      	sub	sp, #8
10050278:	af00      	add	r7, sp, #0
1005027a:	0002      	movs	r2, r0
1005027c:	6039      	str	r1, [r7, #0]
1005027e:	1dfb      	adds	r3, r7, #7
10050280:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10050282:	1dfb      	adds	r3, r7, #7
10050284:	781b      	ldrb	r3, [r3, #0]
10050286:	225c      	movs	r2, #92	@ 0x5c
10050288:	4353      	muls	r3, r2
1005028a:	4a0a      	ldr	r2, [pc, #40]	@ (100502b4 <LL_RADIO_SetMaximumReceiveLength+0x40>)
1005028c:	4694      	mov	ip, r2
1005028e:	4463      	add	r3, ip
10050290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10050292:	021b      	lsls	r3, r3, #8
10050294:	0a19      	lsrs	r1, r3, #8
10050296:	683b      	ldr	r3, [r7, #0]
10050298:	061a      	lsls	r2, r3, #24
1005029a:	1dfb      	adds	r3, r7, #7
1005029c:	781b      	ldrb	r3, [r3, #0]
1005029e:	205c      	movs	r0, #92	@ 0x5c
100502a0:	4343      	muls	r3, r0
100502a2:	4804      	ldr	r0, [pc, #16]	@ (100502b4 <LL_RADIO_SetMaximumReceiveLength+0x40>)
100502a4:	4684      	mov	ip, r0
100502a6:	4463      	add	r3, ip
100502a8:	430a      	orrs	r2, r1
100502aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
100502ac:	46c0      	nop			@ (mov r8, r8)
100502ae:	46bd      	mov	sp, r7
100502b0:	b002      	add	sp, #8
100502b2:	bd80      	pop	{r7, pc}
100502b4:	200000dc 	.word	0x200000dc

100502b8 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100502b8:	b580      	push	{r7, lr}
100502ba:	b082      	sub	sp, #8
100502bc:	af00      	add	r7, sp, #0
100502be:	0002      	movs	r2, r0
100502c0:	6039      	str	r1, [r7, #0]
100502c2:	1dfb      	adds	r3, r7, #7
100502c4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100502c6:	1dfb      	adds	r3, r7, #7
100502c8:	781b      	ldrb	r3, [r3, #0]
100502ca:	225c      	movs	r2, #92	@ 0x5c
100502cc:	4353      	muls	r3, r2
100502ce:	4a0b      	ldr	r2, [pc, #44]	@ (100502fc <LL_RADIO_SetPAPower+0x44>)
100502d0:	4694      	mov	ip, r2
100502d2:	4463      	add	r3, ip
100502d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100502d6:	221f      	movs	r2, #31
100502d8:	4393      	bics	r3, r2
100502da:	0019      	movs	r1, r3
100502dc:	683b      	ldr	r3, [r7, #0]
100502de:	221f      	movs	r2, #31
100502e0:	401a      	ands	r2, r3
100502e2:	1dfb      	adds	r3, r7, #7
100502e4:	781b      	ldrb	r3, [r3, #0]
100502e6:	205c      	movs	r0, #92	@ 0x5c
100502e8:	4343      	muls	r3, r0
100502ea:	4804      	ldr	r0, [pc, #16]	@ (100502fc <LL_RADIO_SetPAPower+0x44>)
100502ec:	4684      	mov	ip, r0
100502ee:	4463      	add	r3, ip
100502f0:	430a      	orrs	r2, r1
100502f2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100502f4:	46c0      	nop			@ (mov r8, r8)
100502f6:	46bd      	mov	sp, r7
100502f8:	b002      	add	sp, #8
100502fa:	bd80      	pop	{r7, pc}
100502fc:	200000dc 	.word	0x200000dc

10050300 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10050300:	b580      	push	{r7, lr}
10050302:	b082      	sub	sp, #8
10050304:	af00      	add	r7, sp, #0
10050306:	0002      	movs	r2, r0
10050308:	1dfb      	adds	r3, r7, #7
1005030a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
1005030c:	1dfb      	adds	r3, r7, #7
1005030e:	781b      	ldrb	r3, [r3, #0]
10050310:	225c      	movs	r2, #92	@ 0x5c
10050312:	4353      	muls	r3, r2
10050314:	4a04      	ldr	r2, [pc, #16]	@ (10050328 <LL_RADIO_GetPAPower+0x28>)
10050316:	4694      	mov	ip, r2
10050318:	4463      	add	r3, ip
1005031a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005031c:	221f      	movs	r2, #31
1005031e:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10050320:	0018      	movs	r0, r3
10050322:	46bd      	mov	sp, r7
10050324:	b002      	add	sp, #8
10050326:	bd80      	pop	{r7, pc}
10050328:	200000dc 	.word	0x200000dc

1005032c <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
1005032c:	b580      	push	{r7, lr}
1005032e:	b082      	sub	sp, #8
10050330:	af00      	add	r7, sp, #0
10050332:	0002      	movs	r2, r0
10050334:	6039      	str	r1, [r7, #0]
10050336:	1dfb      	adds	r3, r7, #7
10050338:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
1005033a:	1dfb      	adds	r3, r7, #7
1005033c:	781b      	ldrb	r3, [r3, #0]
1005033e:	225c      	movs	r2, #92	@ 0x5c
10050340:	4353      	muls	r3, r2
10050342:	4a0c      	ldr	r2, [pc, #48]	@ (10050374 <LL_RADIO_SetHopIncrement+0x48>)
10050344:	4694      	mov	ip, r2
10050346:	4463      	add	r3, ip
10050348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005034a:	4a0b      	ldr	r2, [pc, #44]	@ (10050378 <LL_RADIO_SetHopIncrement+0x4c>)
1005034c:	4013      	ands	r3, r2
1005034e:	0019      	movs	r1, r3
10050350:	683b      	ldr	r3, [r7, #0]
10050352:	021a      	lsls	r2, r3, #8
10050354:	23fc      	movs	r3, #252	@ 0xfc
10050356:	019b      	lsls	r3, r3, #6
10050358:	401a      	ands	r2, r3
1005035a:	1dfb      	adds	r3, r7, #7
1005035c:	781b      	ldrb	r3, [r3, #0]
1005035e:	205c      	movs	r0, #92	@ 0x5c
10050360:	4343      	muls	r3, r0
10050362:	4804      	ldr	r0, [pc, #16]	@ (10050374 <LL_RADIO_SetHopIncrement+0x48>)
10050364:	4684      	mov	ip, r0
10050366:	4463      	add	r3, ip
10050368:	430a      	orrs	r2, r1
1005036a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1005036c:	46c0      	nop			@ (mov r8, r8)
1005036e:	46bd      	mov	sp, r7
10050370:	b002      	add	sp, #8
10050372:	bd80      	pop	{r7, pc}
10050374:	200000dc 	.word	0x200000dc
10050378:	ffffc0ff 	.word	0xffffc0ff

1005037c <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
1005037c:	b580      	push	{r7, lr}
1005037e:	b082      	sub	sp, #8
10050380:	af00      	add	r7, sp, #0
10050382:	0002      	movs	r2, r0
10050384:	1dfb      	adds	r3, r7, #7
10050386:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10050388:	1dfb      	adds	r3, r7, #7
1005038a:	781b      	ldrb	r3, [r3, #0]
1005038c:	225c      	movs	r2, #92	@ 0x5c
1005038e:	4353      	muls	r3, r2
10050390:	4a05      	ldr	r2, [pc, #20]	@ (100503a8 <LL_RADIO_GetHopIncrement+0x2c>)
10050392:	4694      	mov	ip, r2
10050394:	4463      	add	r3, ip
10050396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10050398:	0a1b      	lsrs	r3, r3, #8
1005039a:	223f      	movs	r2, #63	@ 0x3f
1005039c:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
1005039e:	0018      	movs	r0, r3
100503a0:	46bd      	mov	sp, r7
100503a2:	b002      	add	sp, #8
100503a4:	bd80      	pop	{r7, pc}
100503a6:	46c0      	nop			@ (mov r8, r8)
100503a8:	200000dc 	.word	0x200000dc

100503ac <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
100503ac:	b580      	push	{r7, lr}
100503ae:	b082      	sub	sp, #8
100503b0:	af00      	add	r7, sp, #0
100503b2:	0002      	movs	r2, r0
100503b4:	6039      	str	r1, [r7, #0]
100503b6:	1dfb      	adds	r3, r7, #7
100503b8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
100503ba:	1dfb      	adds	r3, r7, #7
100503bc:	781b      	ldrb	r3, [r3, #0]
100503be:	225c      	movs	r2, #92	@ 0x5c
100503c0:	4353      	muls	r3, r2
100503c2:	4a0a      	ldr	r2, [pc, #40]	@ (100503ec <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100503c4:	4694      	mov	ip, r2
100503c6:	4463      	add	r3, ip
100503c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100503ca:	041b      	lsls	r3, r3, #16
100503cc:	0c19      	lsrs	r1, r3, #16
100503ce:	683b      	ldr	r3, [r7, #0]
100503d0:	041a      	lsls	r2, r3, #16
100503d2:	1dfb      	adds	r3, r7, #7
100503d4:	781b      	ldrb	r3, [r3, #0]
100503d6:	205c      	movs	r0, #92	@ 0x5c
100503d8:	4343      	muls	r3, r0
100503da:	4804      	ldr	r0, [pc, #16]	@ (100503ec <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100503dc:	4684      	mov	ip, r0
100503de:	4463      	add	r3, ip
100503e0:	430a      	orrs	r2, r1
100503e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100503e4:	46c0      	nop			@ (mov r8, r8)
100503e6:	46bd      	mov	sp, r7
100503e8:	b002      	add	sp, #8
100503ea:	bd80      	pop	{r7, pc}
100503ec:	200000dc 	.word	0x200000dc

100503f0 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
100503f0:	b580      	push	{r7, lr}
100503f2:	b082      	sub	sp, #8
100503f4:	af00      	add	r7, sp, #0
100503f6:	0002      	movs	r2, r0
100503f8:	1dfb      	adds	r3, r7, #7
100503fa:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
100503fc:	1dfb      	adds	r3, r7, #7
100503fe:	781b      	ldrb	r3, [r3, #0]
10050400:	225c      	movs	r2, #92	@ 0x5c
10050402:	4353      	muls	r3, r2
10050404:	4a05      	ldr	r2, [pc, #20]	@ (1005041c <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
10050406:	4694      	mov	ip, r2
10050408:	4463      	add	r3, ip
1005040a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005040c:	0c1b      	lsrs	r3, r3, #16
1005040e:	041b      	lsls	r3, r3, #16
10050410:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10050412:	0018      	movs	r0, r3
10050414:	46bd      	mov	sp, r7
10050416:	b002      	add	sp, #8
10050418:	bd80      	pop	{r7, pc}
1005041a:	46c0      	nop			@ (mov r8, r8)
1005041c:	200000dc 	.word	0x200000dc

10050420 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10050420:	b580      	push	{r7, lr}
10050422:	b082      	sub	sp, #8
10050424:	af00      	add	r7, sp, #0
10050426:	0002      	movs	r2, r0
10050428:	6039      	str	r1, [r7, #0]
1005042a:	1dfb      	adds	r3, r7, #7
1005042c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
1005042e:	1dfb      	adds	r3, r7, #7
10050430:	781b      	ldrb	r3, [r3, #0]
10050432:	225c      	movs	r2, #92	@ 0x5c
10050434:	4353      	muls	r3, r2
10050436:	4a0b      	ldr	r2, [pc, #44]	@ (10050464 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10050438:	4694      	mov	ip, r2
1005043a:	4463      	add	r3, ip
1005043c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1005043e:	0d9b      	lsrs	r3, r3, #22
10050440:	0599      	lsls	r1, r3, #22
10050442:	683b      	ldr	r3, [r7, #0]
10050444:	029b      	lsls	r3, r3, #10
10050446:	0a9a      	lsrs	r2, r3, #10
10050448:	1dfb      	adds	r3, r7, #7
1005044a:	781b      	ldrb	r3, [r3, #0]
1005044c:	205c      	movs	r0, #92	@ 0x5c
1005044e:	4343      	muls	r3, r0
10050450:	4804      	ldr	r0, [pc, #16]	@ (10050464 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10050452:	4684      	mov	ip, r0
10050454:	4463      	add	r3, ip
10050456:	430a      	orrs	r2, r1
10050458:	631a      	str	r2, [r3, #48]	@ 0x30
}
1005045a:	46c0      	nop			@ (mov r8, r8)
1005045c:	46bd      	mov	sp, r7
1005045e:	b002      	add	sp, #8
10050460:	bd80      	pop	{r7, pc}
10050462:	46c0      	nop			@ (mov r8, r8)
10050464:	200000dc 	.word	0x200000dc

10050468 <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10050468:	b580      	push	{r7, lr}
1005046a:	b082      	sub	sp, #8
1005046c:	af00      	add	r7, sp, #0
1005046e:	0002      	movs	r2, r0
10050470:	1dfb      	adds	r3, r7, #7
10050472:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10050474:	1dfb      	adds	r3, r7, #7
10050476:	781b      	ldrb	r3, [r3, #0]
10050478:	225c      	movs	r2, #92	@ 0x5c
1005047a:	4353      	muls	r3, r2
1005047c:	4a04      	ldr	r2, [pc, #16]	@ (10050490 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
1005047e:	4694      	mov	ip, r2
10050480:	4463      	add	r3, ip
10050482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10050484:	029b      	lsls	r3, r3, #10
10050486:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
10050488:	0018      	movs	r0, r3
1005048a:	46bd      	mov	sp, r7
1005048c:	b002      	add	sp, #8
1005048e:	bd80      	pop	{r7, pc}
10050490:	200000dc 	.word	0x200000dc

10050494 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10050494:	b580      	push	{r7, lr}
10050496:	b082      	sub	sp, #8
10050498:	af00      	add	r7, sp, #0
1005049a:	6078      	str	r0, [r7, #4]
1005049c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
1005049e:	687b      	ldr	r3, [r7, #4]
100504a0:	681b      	ldr	r3, [r3, #0]
100504a2:	687b      	ldr	r3, [r7, #4]
100504a4:	683a      	ldr	r2, [r7, #0]
100504a6:	601a      	str	r2, [r3, #0]
}
100504a8:	46c0      	nop			@ (mov r8, r8)
100504aa:	46bd      	mov	sp, r7
100504ac:	b002      	add	sp, #8
100504ae:	bd80      	pop	{r7, pc}

100504b0 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100504b0:	b580      	push	{r7, lr}
100504b2:	b082      	sub	sp, #8
100504b4:	af00      	add	r7, sp, #0
100504b6:	6078      	str	r0, [r7, #4]
100504b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
100504ba:	687b      	ldr	r3, [r7, #4]
100504bc:	685b      	ldr	r3, [r3, #4]
100504be:	2201      	movs	r2, #1
100504c0:	4393      	bics	r3, r2
100504c2:	001a      	movs	r2, r3
100504c4:	683b      	ldr	r3, [r7, #0]
100504c6:	2101      	movs	r1, #1
100504c8:	400b      	ands	r3, r1
100504ca:	431a      	orrs	r2, r3
100504cc:	687b      	ldr	r3, [r7, #4]
100504ce:	605a      	str	r2, [r3, #4]
}
100504d0:	46c0      	nop			@ (mov r8, r8)
100504d2:	46bd      	mov	sp, r7
100504d4:	b002      	add	sp, #8
100504d6:	bd80      	pop	{r7, pc}

100504d8 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100504d8:	b580      	push	{r7, lr}
100504da:	b082      	sub	sp, #8
100504dc:	af00      	add	r7, sp, #0
100504de:	6078      	str	r0, [r7, #4]
100504e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
100504e2:	687b      	ldr	r3, [r7, #4]
100504e4:	685b      	ldr	r3, [r3, #4]
100504e6:	2204      	movs	r2, #4
100504e8:	4393      	bics	r3, r2
100504ea:	001a      	movs	r2, r3
100504ec:	683b      	ldr	r3, [r7, #0]
100504ee:	009b      	lsls	r3, r3, #2
100504f0:	2104      	movs	r1, #4
100504f2:	400b      	ands	r3, r1
100504f4:	431a      	orrs	r2, r3
100504f6:	687b      	ldr	r3, [r7, #4]
100504f8:	605a      	str	r2, [r3, #4]
}
100504fa:	46c0      	nop			@ (mov r8, r8)
100504fc:	46bd      	mov	sp, r7
100504fe:	b002      	add	sp, #8
10050500:	bd80      	pop	{r7, pc}

10050502 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10050502:	b580      	push	{r7, lr}
10050504:	b082      	sub	sp, #8
10050506:	af00      	add	r7, sp, #0
10050508:	6078      	str	r0, [r7, #4]
1005050a:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
1005050c:	687b      	ldr	r3, [r7, #4]
1005050e:	685b      	ldr	r3, [r3, #4]
10050510:	2208      	movs	r2, #8
10050512:	4393      	bics	r3, r2
10050514:	001a      	movs	r2, r3
10050516:	683b      	ldr	r3, [r7, #0]
10050518:	00db      	lsls	r3, r3, #3
1005051a:	2108      	movs	r1, #8
1005051c:	400b      	ands	r3, r1
1005051e:	431a      	orrs	r2, r3
10050520:	687b      	ldr	r3, [r7, #4]
10050522:	605a      	str	r2, [r3, #4]
}
10050524:	46c0      	nop			@ (mov r8, r8)
10050526:	46bd      	mov	sp, r7
10050528:	b002      	add	sp, #8
1005052a:	bd80      	pop	{r7, pc}

1005052c <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
1005052c:	b580      	push	{r7, lr}
1005052e:	b082      	sub	sp, #8
10050530:	af00      	add	r7, sp, #0
10050532:	6078      	str	r0, [r7, #4]
10050534:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
10050536:	687b      	ldr	r3, [r7, #4]
10050538:	685b      	ldr	r3, [r3, #4]
1005053a:	2210      	movs	r2, #16
1005053c:	4393      	bics	r3, r2
1005053e:	001a      	movs	r2, r3
10050540:	683b      	ldr	r3, [r7, #0]
10050542:	011b      	lsls	r3, r3, #4
10050544:	2110      	movs	r1, #16
10050546:	400b      	ands	r3, r1
10050548:	431a      	orrs	r2, r3
1005054a:	687b      	ldr	r3, [r7, #4]
1005054c:	605a      	str	r2, [r3, #4]
}
1005054e:	46c0      	nop			@ (mov r8, r8)
10050550:	46bd      	mov	sp, r7
10050552:	b002      	add	sp, #8
10050554:	bd80      	pop	{r7, pc}

10050556 <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10050556:	b580      	push	{r7, lr}
10050558:	b082      	sub	sp, #8
1005055a:	af00      	add	r7, sp, #0
1005055c:	6078      	str	r0, [r7, #4]
1005055e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10050560:	687b      	ldr	r3, [r7, #4]
10050562:	685b      	ldr	r3, [r3, #4]
10050564:	2220      	movs	r2, #32
10050566:	4393      	bics	r3, r2
10050568:	001a      	movs	r2, r3
1005056a:	683b      	ldr	r3, [r7, #0]
1005056c:	015b      	lsls	r3, r3, #5
1005056e:	2120      	movs	r1, #32
10050570:	400b      	ands	r3, r1
10050572:	431a      	orrs	r2, r3
10050574:	687b      	ldr	r3, [r7, #4]
10050576:	605a      	str	r2, [r3, #4]
}
10050578:	46c0      	nop			@ (mov r8, r8)
1005057a:	46bd      	mov	sp, r7
1005057c:	b002      	add	sp, #8
1005057e:	bd80      	pop	{r7, pc}

10050580 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10050580:	b580      	push	{r7, lr}
10050582:	b082      	sub	sp, #8
10050584:	af00      	add	r7, sp, #0
10050586:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
10050588:	687b      	ldr	r3, [r7, #4]
1005058a:	685b      	ldr	r3, [r3, #4]
1005058c:	2240      	movs	r2, #64	@ 0x40
1005058e:	431a      	orrs	r2, r3
10050590:	687b      	ldr	r3, [r7, #4]
10050592:	605a      	str	r2, [r3, #4]
}
10050594:	46c0      	nop			@ (mov r8, r8)
10050596:	46bd      	mov	sp, r7
10050598:	b002      	add	sp, #8
1005059a:	bd80      	pop	{r7, pc}

1005059c <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
1005059c:	b580      	push	{r7, lr}
1005059e:	b082      	sub	sp, #8
100505a0:	af00      	add	r7, sp, #0
100505a2:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100505a4:	687b      	ldr	r3, [r7, #4]
100505a6:	685b      	ldr	r3, [r3, #4]
100505a8:	2280      	movs	r2, #128	@ 0x80
100505aa:	431a      	orrs	r2, r3
100505ac:	687b      	ldr	r3, [r7, #4]
100505ae:	605a      	str	r2, [r3, #4]
}
100505b0:	46c0      	nop			@ (mov r8, r8)
100505b2:	46bd      	mov	sp, r7
100505b4:	b002      	add	sp, #8
100505b6:	bd80      	pop	{r7, pc}

100505b8 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
100505b8:	b580      	push	{r7, lr}
100505ba:	b082      	sub	sp, #8
100505bc:	af00      	add	r7, sp, #0
100505be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100505c0:	687b      	ldr	r3, [r7, #4]
100505c2:	685b      	ldr	r3, [r3, #4]
100505c4:	2280      	movs	r2, #128	@ 0x80
100505c6:	4393      	bics	r3, r2
100505c8:	001a      	movs	r2, r3
100505ca:	687b      	ldr	r3, [r7, #4]
100505cc:	605a      	str	r2, [r3, #4]
}
100505ce:	46c0      	nop			@ (mov r8, r8)
100505d0:	46bd      	mov	sp, r7
100505d2:	b002      	add	sp, #8
100505d4:	bd80      	pop	{r7, pc}
	...

100505d8 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
100505d8:	b580      	push	{r7, lr}
100505da:	b082      	sub	sp, #8
100505dc:	af00      	add	r7, sp, #0
100505de:	6078      	str	r0, [r7, #4]
100505e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
100505e2:	687b      	ldr	r3, [r7, #4]
100505e4:	685b      	ldr	r3, [r3, #4]
100505e6:	4a07      	ldr	r2, [pc, #28]	@ (10050604 <LL_RADIO_SetNextTxMode+0x2c>)
100505e8:	401a      	ands	r2, r3
100505ea:	683b      	ldr	r3, [r7, #0]
100505ec:	0219      	lsls	r1, r3, #8
100505ee:	2380      	movs	r3, #128	@ 0x80
100505f0:	005b      	lsls	r3, r3, #1
100505f2:	400b      	ands	r3, r1
100505f4:	431a      	orrs	r2, r3
100505f6:	687b      	ldr	r3, [r7, #4]
100505f8:	605a      	str	r2, [r3, #4]
}
100505fa:	46c0      	nop			@ (mov r8, r8)
100505fc:	46bd      	mov	sp, r7
100505fe:	b002      	add	sp, #8
10050600:	bd80      	pop	{r7, pc}
10050602:	46c0      	nop			@ (mov r8, r8)
10050604:	fffffeff 	.word	0xfffffeff

10050608 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10050608:	b580      	push	{r7, lr}
1005060a:	b082      	sub	sp, #8
1005060c:	af00      	add	r7, sp, #0
1005060e:	6078      	str	r0, [r7, #4]
10050610:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10050612:	687b      	ldr	r3, [r7, #4]
10050614:	685b      	ldr	r3, [r3, #4]
10050616:	4a07      	ldr	r2, [pc, #28]	@ (10050634 <LL_RADIO_SetAllTableDataReady+0x2c>)
10050618:	401a      	ands	r2, r3
1005061a:	683b      	ldr	r3, [r7, #0]
1005061c:	0259      	lsls	r1, r3, #9
1005061e:	2380      	movs	r3, #128	@ 0x80
10050620:	009b      	lsls	r3, r3, #2
10050622:	400b      	ands	r3, r1
10050624:	431a      	orrs	r2, r3
10050626:	687b      	ldr	r3, [r7, #4]
10050628:	605a      	str	r2, [r3, #4]
}
1005062a:	46c0      	nop			@ (mov r8, r8)
1005062c:	46bd      	mov	sp, r7
1005062e:	b002      	add	sp, #8
10050630:	bd80      	pop	{r7, pc}
10050632:	46c0      	nop			@ (mov r8, r8)
10050634:	fffffdff 	.word	0xfffffdff

10050638 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10050638:	b580      	push	{r7, lr}
1005063a:	b082      	sub	sp, #8
1005063c:	af00      	add	r7, sp, #0
1005063e:	6078      	str	r0, [r7, #4]
10050640:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10050642:	687b      	ldr	r3, [r7, #4]
10050644:	685b      	ldr	r3, [r3, #4]
10050646:	4a07      	ldr	r2, [pc, #28]	@ (10050664 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10050648:	401a      	ands	r2, r3
1005064a:	683b      	ldr	r3, [r7, #0]
1005064c:	0299      	lsls	r1, r3, #10
1005064e:	2380      	movs	r3, #128	@ 0x80
10050650:	00db      	lsls	r3, r3, #3
10050652:	400b      	ands	r3, r1
10050654:	431a      	orrs	r2, r3
10050656:	687b      	ldr	r3, [r7, #4]
10050658:	605a      	str	r2, [r3, #4]
}
1005065a:	46c0      	nop			@ (mov r8, r8)
1005065c:	46bd      	mov	sp, r7
1005065e:	b002      	add	sp, #8
10050660:	bd80      	pop	{r7, pc}
10050662:	46c0      	nop			@ (mov r8, r8)
10050664:	fffffbff 	.word	0xfffffbff

10050668 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10050668:	b580      	push	{r7, lr}
1005066a:	b082      	sub	sp, #8
1005066c:	af00      	add	r7, sp, #0
1005066e:	6078      	str	r0, [r7, #4]
10050670:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10050672:	687b      	ldr	r3, [r7, #4]
10050674:	689b      	ldr	r3, [r3, #8]
10050676:	687b      	ldr	r3, [r7, #4]
10050678:	683a      	ldr	r2, [r7, #0]
1005067a:	609a      	str	r2, [r3, #8]
}
1005067c:	46c0      	nop			@ (mov r8, r8)
1005067e:	46bd      	mov	sp, r7
10050680:	b002      	add	sp, #8
10050682:	bd80      	pop	{r7, pc}

10050684 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10050684:	b580      	push	{r7, lr}
10050686:	b082      	sub	sp, #8
10050688:	af00      	add	r7, sp, #0
1005068a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
1005068c:	687b      	ldr	r3, [r7, #4]
1005068e:	689b      	ldr	r3, [r3, #8]
}
10050690:	0018      	movs	r0, r3
10050692:	46bd      	mov	sp, r7
10050694:	b002      	add	sp, #8
10050696:	bd80      	pop	{r7, pc}

10050698 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
10050698:	b580      	push	{r7, lr}
1005069a:	b082      	sub	sp, #8
1005069c:	af00      	add	r7, sp, #0
1005069e:	6078      	str	r0, [r7, #4]
100506a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100506a2:	687b      	ldr	r3, [r7, #4]
100506a4:	68db      	ldr	r3, [r3, #12]
100506a6:	0d1b      	lsrs	r3, r3, #20
100506a8:	051a      	lsls	r2, r3, #20
100506aa:	683b      	ldr	r3, [r7, #0]
100506ac:	031b      	lsls	r3, r3, #12
100506ae:	0b1b      	lsrs	r3, r3, #12
100506b0:	431a      	orrs	r2, r3
100506b2:	687b      	ldr	r3, [r7, #4]
100506b4:	60da      	str	r2, [r3, #12]
}
100506b6:	46c0      	nop			@ (mov r8, r8)
100506b8:	46bd      	mov	sp, r7
100506ba:	b002      	add	sp, #8
100506bc:	bd80      	pop	{r7, pc}

100506be <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
100506be:	b580      	push	{r7, lr}
100506c0:	b082      	sub	sp, #8
100506c2:	af00      	add	r7, sp, #0
100506c4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
100506c6:	687b      	ldr	r3, [r7, #4]
100506c8:	68db      	ldr	r3, [r3, #12]
100506ca:	2280      	movs	r2, #128	@ 0x80
100506cc:	0352      	lsls	r2, r2, #13
100506ce:	431a      	orrs	r2, r3
100506d0:	687b      	ldr	r3, [r7, #4]
100506d2:	60da      	str	r2, [r3, #12]
}
100506d4:	46c0      	nop			@ (mov r8, r8)
100506d6:	46bd      	mov	sp, r7
100506d8:	b002      	add	sp, #8
100506da:	bd80      	pop	{r7, pc}

100506dc <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
100506dc:	b580      	push	{r7, lr}
100506de:	b082      	sub	sp, #8
100506e0:	af00      	add	r7, sp, #0
100506e2:	6078      	str	r0, [r7, #4]
100506e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
100506e6:	687b      	ldr	r3, [r7, #4]
100506e8:	68db      	ldr	r3, [r3, #12]
100506ea:	4a07      	ldr	r2, [pc, #28]	@ (10050708 <LL_RADIO_SetTrigRcv+0x2c>)
100506ec:	401a      	ands	r2, r3
100506ee:	683b      	ldr	r3, [r7, #0]
100506f0:	0599      	lsls	r1, r3, #22
100506f2:	2380      	movs	r3, #128	@ 0x80
100506f4:	03db      	lsls	r3, r3, #15
100506f6:	400b      	ands	r3, r1
100506f8:	431a      	orrs	r2, r3
100506fa:	687b      	ldr	r3, [r7, #4]
100506fc:	60da      	str	r2, [r3, #12]
}
100506fe:	46c0      	nop			@ (mov r8, r8)
10050700:	46bd      	mov	sp, r7
10050702:	b002      	add	sp, #8
10050704:	bd80      	pop	{r7, pc}
10050706:	46c0      	nop			@ (mov r8, r8)
10050708:	ffbfffff 	.word	0xffbfffff

1005070c <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
1005070c:	b580      	push	{r7, lr}
1005070e:	b082      	sub	sp, #8
10050710:	af00      	add	r7, sp, #0
10050712:	6078      	str	r0, [r7, #4]
10050714:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10050716:	687b      	ldr	r3, [r7, #4]
10050718:	68db      	ldr	r3, [r3, #12]
1005071a:	4a07      	ldr	r2, [pc, #28]	@ (10050738 <LL_RADIO_SetTrigDone+0x2c>)
1005071c:	401a      	ands	r2, r3
1005071e:	683b      	ldr	r3, [r7, #0]
10050720:	05d9      	lsls	r1, r3, #23
10050722:	2380      	movs	r3, #128	@ 0x80
10050724:	041b      	lsls	r3, r3, #16
10050726:	400b      	ands	r3, r1
10050728:	431a      	orrs	r2, r3
1005072a:	687b      	ldr	r3, [r7, #4]
1005072c:	60da      	str	r2, [r3, #12]
}
1005072e:	46c0      	nop			@ (mov r8, r8)
10050730:	46bd      	mov	sp, r7
10050732:	b002      	add	sp, #8
10050734:	bd80      	pop	{r7, pc}
10050736:	46c0      	nop			@ (mov r8, r8)
10050738:	ff7fffff 	.word	0xff7fffff

1005073c <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
1005073c:	b580      	push	{r7, lr}
1005073e:	b082      	sub	sp, #8
10050740:	af00      	add	r7, sp, #0
10050742:	6078      	str	r0, [r7, #4]
10050744:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
10050746:	687b      	ldr	r3, [r7, #4]
10050748:	68db      	ldr	r3, [r3, #12]
1005074a:	4a07      	ldr	r2, [pc, #28]	@ (10050768 <LL_RADIO_SetIntTxOk+0x2c>)
1005074c:	401a      	ands	r2, r3
1005074e:	683b      	ldr	r3, [r7, #0]
10050750:	0619      	lsls	r1, r3, #24
10050752:	2380      	movs	r3, #128	@ 0x80
10050754:	045b      	lsls	r3, r3, #17
10050756:	400b      	ands	r3, r1
10050758:	431a      	orrs	r2, r3
1005075a:	687b      	ldr	r3, [r7, #4]
1005075c:	60da      	str	r2, [r3, #12]
}
1005075e:	46c0      	nop			@ (mov r8, r8)
10050760:	46bd      	mov	sp, r7
10050762:	b002      	add	sp, #8
10050764:	bd80      	pop	{r7, pc}
10050766:	46c0      	nop			@ (mov r8, r8)
10050768:	feffffff 	.word	0xfeffffff

1005076c <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
1005076c:	b580      	push	{r7, lr}
1005076e:	b082      	sub	sp, #8
10050770:	af00      	add	r7, sp, #0
10050772:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10050774:	687b      	ldr	r3, [r7, #4]
10050776:	68db      	ldr	r3, [r3, #12]
10050778:	2280      	movs	r2, #128	@ 0x80
1005077a:	0492      	lsls	r2, r2, #18
1005077c:	431a      	orrs	r2, r3
1005077e:	687b      	ldr	r3, [r7, #4]
10050780:	60da      	str	r2, [r3, #12]
}
10050782:	46c0      	nop			@ (mov r8, r8)
10050784:	46bd      	mov	sp, r7
10050786:	b002      	add	sp, #8
10050788:	bd80      	pop	{r7, pc}

1005078a <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
1005078a:	b580      	push	{r7, lr}
1005078c:	b082      	sub	sp, #8
1005078e:	af00      	add	r7, sp, #0
10050790:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
10050792:	687b      	ldr	r3, [r7, #4]
10050794:	68db      	ldr	r3, [r3, #12]
10050796:	2280      	movs	r2, #128	@ 0x80
10050798:	04d2      	lsls	r2, r2, #19
1005079a:	431a      	orrs	r2, r3
1005079c:	687b      	ldr	r3, [r7, #4]
1005079e:	60da      	str	r2, [r3, #12]
}
100507a0:	46c0      	nop			@ (mov r8, r8)
100507a2:	46bd      	mov	sp, r7
100507a4:	b002      	add	sp, #8
100507a6:	bd80      	pop	{r7, pc}

100507a8 <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
100507a8:	b580      	push	{r7, lr}
100507aa:	b082      	sub	sp, #8
100507ac:	af00      	add	r7, sp, #0
100507ae:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
100507b0:	687b      	ldr	r3, [r7, #4]
100507b2:	68db      	ldr	r3, [r3, #12]
100507b4:	2280      	movs	r2, #128	@ 0x80
100507b6:	05d2      	lsls	r2, r2, #23
100507b8:	431a      	orrs	r2, r3
100507ba:	687b      	ldr	r3, [r7, #4]
100507bc:	60da      	str	r2, [r3, #12]
}
100507be:	46c0      	nop			@ (mov r8, r8)
100507c0:	46bd      	mov	sp, r7
100507c2:	b002      	add	sp, #8
100507c4:	bd80      	pop	{r7, pc}

100507c6 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100507c6:	b580      	push	{r7, lr}
100507c8:	b082      	sub	sp, #8
100507ca:	af00      	add	r7, sp, #0
100507cc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100507ce:	687b      	ldr	r3, [r7, #4]
100507d0:	68db      	ldr	r3, [r3, #12]
100507d2:	2280      	movs	r2, #128	@ 0x80
100507d4:	0612      	lsls	r2, r2, #24
100507d6:	431a      	orrs	r2, r3
100507d8:	687b      	ldr	r3, [r7, #4]
100507da:	60da      	str	r2, [r3, #12]
}
100507dc:	46c0      	nop			@ (mov r8, r8)
100507de:	46bd      	mov	sp, r7
100507e0:	b002      	add	sp, #8
100507e2:	bd80      	pop	{r7, pc}

100507e4 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100507e4:	b580      	push	{r7, lr}
100507e6:	b082      	sub	sp, #8
100507e8:	af00      	add	r7, sp, #0
100507ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100507ec:	23c0      	movs	r3, #192	@ 0xc0
100507ee:	05db      	lsls	r3, r3, #23
100507f0:	685b      	ldr	r3, [r3, #4]
100507f2:	4a07      	ldr	r2, [pc, #28]	@ (10050810 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100507f4:	4013      	ands	r3, r2
100507f6:	0019      	movs	r1, r3
100507f8:	687b      	ldr	r3, [r7, #4]
100507fa:	4a06      	ldr	r2, [pc, #24]	@ (10050814 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
100507fc:	401a      	ands	r2, r3
100507fe:	23c0      	movs	r3, #192	@ 0xc0
10050800:	05db      	lsls	r3, r3, #23
10050802:	430a      	orrs	r2, r1
10050804:	605a      	str	r2, [r3, #4]
}
10050806:	46c0      	nop			@ (mov r8, r8)
10050808:	46bd      	mov	sp, r7
1005080a:	b002      	add	sp, #8
1005080c:	bd80      	pop	{r7, pc}
1005080e:	46c0      	nop			@ (mov r8, r8)
10050810:	0002004f 	.word	0x0002004f
10050814:	fffdffb0 	.word	0xfffdffb0

10050818 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10050818:	b580      	push	{r7, lr}
1005081a:	b082      	sub	sp, #8
1005081c:	af00      	add	r7, sp, #0
1005081e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10050820:	23c0      	movs	r3, #192	@ 0xc0
10050822:	05db      	lsls	r3, r3, #23
10050824:	699b      	ldr	r3, [r3, #24]
10050826:	2208      	movs	r2, #8
10050828:	4393      	bics	r3, r2
1005082a:	0019      	movs	r1, r3
1005082c:	687b      	ldr	r3, [r7, #4]
1005082e:	00db      	lsls	r3, r3, #3
10050830:	2208      	movs	r2, #8
10050832:	401a      	ands	r2, r3
10050834:	23c0      	movs	r3, #192	@ 0xc0
10050836:	05db      	lsls	r3, r3, #23
10050838:	430a      	orrs	r2, r1
1005083a:	619a      	str	r2, [r3, #24]
}
1005083c:	46c0      	nop			@ (mov r8, r8)
1005083e:	46bd      	mov	sp, r7
10050840:	b002      	add	sp, #8
10050842:	bd80      	pop	{r7, pc}

10050844 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10050844:	b580      	push	{r7, lr}
10050846:	b088      	sub	sp, #32
10050848:	af00      	add	r7, sp, #0
1005084a:	6078      	str	r0, [r7, #4]
1005084c:	0008      	movs	r0, r1
1005084e:	0011      	movs	r1, r2
10050850:	1cfb      	adds	r3, r7, #3
10050852:	1c02      	adds	r2, r0, #0
10050854:	701a      	strb	r2, [r3, #0]
10050856:	1cbb      	adds	r3, r7, #2
10050858:	1c0a      	adds	r2, r1, #0
1005085a:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
1005085c:	687b      	ldr	r3, [r7, #4]
1005085e:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10050860:	1cfb      	adds	r3, r7, #3
10050862:	781b      	ldrb	r3, [r3, #0]
10050864:	2b01      	cmp	r3, #1
10050866:	d105      	bne.n	10050874 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in connection, initiating and active
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10050868:	2304      	movs	r3, #4
1005086a:	60bb      	str	r3, [r7, #8]
#else
        const int32_t Adjust_Value = 6;
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
1005086c:	68bb      	ldr	r3, [r7, #8]
1005086e:	3302      	adds	r3, #2
10050870:	61fb      	str	r3, [r7, #28]
10050872:	e015      	b.n	100508a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10050874:	1cfb      	adds	r3, r7, #3
10050876:	781b      	ldrb	r3, [r3, #0]
10050878:	2b00      	cmp	r3, #0
1005087a:	d105      	bne.n	10050888 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * values used in prrevious versions of the stack.
         * They could be optimized after careful analysis of timing margins and
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
1005087c:	2304      	movs	r3, #4
1005087e:	60fb      	str	r3, [r7, #12]
#else
        const int32_t Adjust_Value = 4;
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10050880:	68fb      	ldr	r3, [r7, #12]
10050882:	3302      	adds	r3, #2
10050884:	61fb      	str	r3, [r7, #28]
10050886:	e00b      	b.n	100508a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10050888:	1cfb      	adds	r3, r7, #3
1005088a:	781b      	ldrb	r3, [r3, #0]
1005088c:	2b02      	cmp	r3, #2
1005088e:	d105      	bne.n	1005089c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
    {
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
10050890:	2301      	movs	r3, #1
10050892:	613b      	str	r3, [r7, #16]
#else
        const int32_t Adjust_Value = 2;
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10050894:	693b      	ldr	r3, [r7, #16]
10050896:	3304      	adds	r3, #4
10050898:	61fb      	str	r3, [r7, #28]
1005089a:	e001      	b.n	100508a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
1005089c:	2300      	movs	r3, #0
1005089e:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
100508a0:	1cfb      	adds	r3, r7, #3
100508a2:	781b      	ldrb	r3, [r3, #0]
100508a4:	2b01      	cmp	r3, #1
100508a6:	d003      	beq.n	100508b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
100508a8:	1cfb      	adds	r3, r7, #3
100508aa:	781b      	ldrb	r3, [r3, #0]
100508ac:	2b02      	cmp	r3, #2
100508ae:	d109      	bne.n	100508c4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
100508b0:	1cbb      	adds	r3, r7, #2
100508b2:	781b      	ldrb	r3, [r3, #0]
100508b4:	2b01      	cmp	r3, #1
100508b6:	d102      	bne.n	100508be <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100508b8:	239b      	movs	r3, #155	@ 0x9b
100508ba:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100508bc:	e013      	b.n	100508e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100508be:	233d      	movs	r3, #61	@ 0x3d
100508c0:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100508c2:	e010      	b.n	100508e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100508c4:	1cfb      	adds	r3, r7, #3
100508c6:	781b      	ldrb	r3, [r3, #0]
100508c8:	2b00      	cmp	r3, #0
100508ca:	d003      	beq.n	100508d4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100508cc:	1cfb      	adds	r3, r7, #3
100508ce:	781b      	ldrb	r3, [r3, #0]
100508d0:	2b03      	cmp	r3, #3
100508d2:	d108      	bne.n	100508e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100508d4:	1cbb      	adds	r3, r7, #2
100508d6:	781b      	ldrb	r3, [r3, #0]
100508d8:	2b01      	cmp	r3, #1
100508da:	d102      	bne.n	100508e2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100508dc:	2399      	movs	r3, #153	@ 0x99
100508de:	61bb      	str	r3, [r7, #24]
100508e0:	e001      	b.n	100508e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100508e2:	233b      	movs	r3, #59	@ 0x3b
100508e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100508e6:	69ba      	ldr	r2, [r7, #24]
100508e8:	69fb      	ldr	r3, [r7, #28]
100508ea:	18d3      	adds	r3, r2, r3
100508ec:	697a      	ldr	r2, [r7, #20]
100508ee:	1ad3      	subs	r3, r2, r3
100508f0:	617b      	str	r3, [r7, #20]

    return Timeout;
100508f2:	697b      	ldr	r3, [r7, #20]
}
100508f4:	0018      	movs	r0, r3
100508f6:	46bd      	mov	sp, r7
100508f8:	b008      	add	sp, #32
100508fa:	bd80      	pop	{r7, pc}

100508fc <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
100508fc:	b580      	push	{r7, lr}
100508fe:	b082      	sub	sp, #8
10050900:	af00      	add	r7, sp, #0
10050902:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10050904:	687b      	ldr	r3, [r7, #4]
10050906:	0018      	movs	r0, r3
10050908:	f7ff ff6c 	bl	100507e4 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
1005090c:	46c0      	nop			@ (mov r8, r8)
1005090e:	46bd      	mov	sp, r7
10050910:	b002      	add	sp, #8
10050912:	bd80      	pop	{r7, pc}

10050914 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10050914:	b580      	push	{r7, lr}
10050916:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10050918:	2001      	movs	r0, #1
1005091a:	f7ff ff7d 	bl	10050818 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
1005091e:	46c0      	nop			@ (mov r8, r8)
10050920:	46bd      	mov	sp, r7
10050922:	bd80      	pop	{r7, pc}

10050924 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10050924:	b580      	push	{r7, lr}
10050926:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10050928:	f7ff f8dc 	bl	1004fae4 <LL_RADIO_GlobalDisableBlue>
}
1005092c:	46c0      	nop			@ (mov r8, r8)
1005092e:	46bd      	mov	sp, r7
10050930:	bd80      	pop	{r7, pc}

10050932 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10050932:	b580      	push	{r7, lr}
10050934:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10050936:	f7ff f8c7 	bl	1004fac8 <LL_RADIO_GlobalEnableBlue>
}
1005093a:	46c0      	nop			@ (mov r8, r8)
1005093c:	46bd      	mov	sp, r7
1005093e:	bd80      	pop	{r7, pc}

10050940 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10050940:	b580      	push	{r7, lr}
10050942:	b082      	sub	sp, #8
10050944:	af00      	add	r7, sp, #0
10050946:	0002      	movs	r2, r0
10050948:	1dfb      	adds	r3, r7, #7
1005094a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
1005094c:	1dfb      	adds	r3, r7, #7
1005094e:	781b      	ldrb	r3, [r3, #0]
10050950:	0018      	movs	r0, r3
10050952:	f7ff f8a3 	bl	1004fa9c <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10050956:	46c0      	nop			@ (mov r8, r8)
10050958:	46bd      	mov	sp, r7
1005095a:	b002      	add	sp, #8
1005095c:	bd80      	pop	{r7, pc}
	...

10050960 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10050960:	b580      	push	{r7, lr}
10050962:	b082      	sub	sp, #8
10050964:	af00      	add	r7, sp, #0
10050966:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10050968:	687b      	ldr	r3, [r7, #4]
1005096a:	4a03      	ldr	r2, [pc, #12]	@ (10050978 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
1005096c:	4013      	ands	r3, r2
}
1005096e:	0018      	movs	r0, r3
10050970:	46bd      	mov	sp, r7
10050972:	b002      	add	sp, #8
10050974:	bd80      	pop	{r7, pc}
10050976:	46c0      	nop			@ (mov r8, r8)
10050978:	00c9df30 	.word	0x00c9df30

1005097c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
1005097c:	b580      	push	{r7, lr}
1005097e:	b082      	sub	sp, #8
10050980:	af00      	add	r7, sp, #0
10050982:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10050984:	687a      	ldr	r2, [r7, #4]
10050986:	2380      	movs	r3, #128	@ 0x80
10050988:	03db      	lsls	r3, r3, #15
1005098a:	4013      	ands	r3, r2
}
1005098c:	0018      	movs	r0, r3
1005098e:	46bd      	mov	sp, r7
10050990:	b002      	add	sp, #8
10050992:	bd80      	pop	{r7, pc}

10050994 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10050994:	b580      	push	{r7, lr}
10050996:	b082      	sub	sp, #8
10050998:	af00      	add	r7, sp, #0
1005099a:	6078      	str	r0, [r7, #4]
    return 0;
1005099c:	2300      	movs	r3, #0
}
1005099e:	0018      	movs	r0, r3
100509a0:	46bd      	mov	sp, r7
100509a2:	b002      	add	sp, #8
100509a4:	bd80      	pop	{r7, pc}

100509a6 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
100509a6:	b580      	push	{r7, lr}
100509a8:	b082      	sub	sp, #8
100509aa:	af00      	add	r7, sp, #0
100509ac:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
100509ae:	687a      	ldr	r2, [r7, #4]
100509b0:	2380      	movs	r3, #128	@ 0x80
100509b2:	05db      	lsls	r3, r3, #23
100509b4:	4013      	ands	r3, r2
}
100509b6:	0018      	movs	r0, r3
100509b8:	46bd      	mov	sp, r7
100509ba:	b002      	add	sp, #8
100509bc:	bd80      	pop	{r7, pc}

100509be <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100509be:	b580      	push	{r7, lr}
100509c0:	b082      	sub	sp, #8
100509c2:	af00      	add	r7, sp, #0
100509c4:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100509c6:	687a      	ldr	r2, [r7, #4]
100509c8:	2380      	movs	r3, #128	@ 0x80
100509ca:	049b      	lsls	r3, r3, #18
100509cc:	4013      	ands	r3, r2
}
100509ce:	0018      	movs	r0, r3
100509d0:	46bd      	mov	sp, r7
100509d2:	b002      	add	sp, #8
100509d4:	bd80      	pop	{r7, pc}

100509d6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
100509d6:	b580      	push	{r7, lr}
100509d8:	b082      	sub	sp, #8
100509da:	af00      	add	r7, sp, #0
100509dc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
100509de:	687a      	ldr	r2, [r7, #4]
100509e0:	2380      	movs	r3, #128	@ 0x80
100509e2:	019b      	lsls	r3, r3, #6
100509e4:	4013      	ands	r3, r2
}
100509e6:	0018      	movs	r0, r3
100509e8:	46bd      	mov	sp, r7
100509ea:	b002      	add	sp, #8
100509ec:	bd80      	pop	{r7, pc}

100509ee <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
100509ee:	b580      	push	{r7, lr}
100509f0:	b082      	sub	sp, #8
100509f2:	af00      	add	r7, sp, #0
100509f4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
100509f6:	687a      	ldr	r2, [r7, #4]
100509f8:	2380      	movs	r3, #128	@ 0x80
100509fa:	02db      	lsls	r3, r3, #11
100509fc:	4013      	ands	r3, r2
}
100509fe:	0018      	movs	r0, r3
10050a00:	46bd      	mov	sp, r7
10050a02:	b002      	add	sp, #8
10050a04:	bd80      	pop	{r7, pc}

10050a06 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
10050a06:	b580      	push	{r7, lr}
10050a08:	b082      	sub	sp, #8
10050a0a:	af00      	add	r7, sp, #0
10050a0c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
10050a0e:	687a      	ldr	r2, [r7, #4]
10050a10:	2380      	movs	r3, #128	@ 0x80
10050a12:	025b      	lsls	r3, r3, #9
10050a14:	4013      	ands	r3, r2
}
10050a16:	0018      	movs	r0, r3
10050a18:	46bd      	mov	sp, r7
10050a1a:	b002      	add	sp, #8
10050a1c:	bd80      	pop	{r7, pc}

10050a1e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
10050a1e:	b580      	push	{r7, lr}
10050a20:	b082      	sub	sp, #8
10050a22:	af00      	add	r7, sp, #0
10050a24:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
10050a26:	687a      	ldr	r2, [r7, #4]
10050a28:	2380      	movs	r3, #128	@ 0x80
10050a2a:	039b      	lsls	r3, r3, #14
10050a2c:	4013      	ands	r3, r2
}
10050a2e:	0018      	movs	r0, r3
10050a30:	46bd      	mov	sp, r7
10050a32:	b002      	add	sp, #8
10050a34:	bd80      	pop	{r7, pc}

10050a36 <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
10050a36:	b580      	push	{r7, lr}
10050a38:	b082      	sub	sp, #8
10050a3a:	af00      	add	r7, sp, #0
10050a3c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
10050a3e:	687a      	ldr	r2, [r7, #4]
10050a40:	2380      	movs	r3, #128	@ 0x80
10050a42:	009b      	lsls	r3, r3, #2
10050a44:	4013      	ands	r3, r2
}
10050a46:	0018      	movs	r0, r3
10050a48:	46bd      	mov	sp, r7
10050a4a:	b002      	add	sp, #8
10050a4c:	bd80      	pop	{r7, pc}

10050a4e <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
10050a4e:	b580      	push	{r7, lr}
10050a50:	b082      	sub	sp, #8
10050a52:	af00      	add	r7, sp, #0
10050a54:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
10050a56:	687a      	ldr	r2, [r7, #4]
10050a58:	2380      	movs	r3, #128	@ 0x80
10050a5a:	011b      	lsls	r3, r3, #4
10050a5c:	4013      	ands	r3, r2
}
10050a5e:	0018      	movs	r0, r3
10050a60:	46bd      	mov	sp, r7
10050a62:	b002      	add	sp, #8
10050a64:	bd80      	pop	{r7, pc}

10050a66 <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
10050a66:	b580      	push	{r7, lr}
10050a68:	b082      	sub	sp, #8
10050a6a:	af00      	add	r7, sp, #0
10050a6c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
10050a6e:	687b      	ldr	r3, [r7, #4]
10050a70:	0fdb      	lsrs	r3, r3, #31
10050a72:	07db      	lsls	r3, r3, #31
}
10050a74:	0018      	movs	r0, r3
10050a76:	46bd      	mov	sp, r7
10050a78:	b002      	add	sp, #8
10050a7a:	bd80      	pop	{r7, pc}

10050a7c <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
10050a7c:	b580      	push	{r7, lr}
10050a7e:	b082      	sub	sp, #8
10050a80:	af00      	add	r7, sp, #0
10050a82:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
10050a84:	687a      	ldr	r2, [r7, #4]
10050a86:	2380      	movs	r3, #128	@ 0x80
10050a88:	04db      	lsls	r3, r3, #19
10050a8a:	4013      	ands	r3, r2
}
10050a8c:	0018      	movs	r0, r3
10050a8e:	46bd      	mov	sp, r7
10050a90:	b002      	add	sp, #8
10050a92:	bd80      	pop	{r7, pc}

10050a94 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
10050a94:	b580      	push	{r7, lr}
10050a96:	b082      	sub	sp, #8
10050a98:	af00      	add	r7, sp, #0
10050a9a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10050a9c:	687b      	ldr	r3, [r7, #4]
10050a9e:	2240      	movs	r2, #64	@ 0x40
10050aa0:	4013      	ands	r3, r2
}
10050aa2:	0018      	movs	r0, r3
10050aa4:	46bd      	mov	sp, r7
10050aa6:	b002      	add	sp, #8
10050aa8:	bd80      	pop	{r7, pc}

10050aaa <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
10050aaa:	b580      	push	{r7, lr}
10050aac:	b082      	sub	sp, #8
10050aae:	af00      	add	r7, sp, #0
10050ab0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
10050ab2:	687a      	ldr	r2, [r7, #4]
10050ab4:	2380      	movs	r3, #128	@ 0x80
10050ab6:	045b      	lsls	r3, r3, #17
10050ab8:	4013      	ands	r3, r2
}
10050aba:	0018      	movs	r0, r3
10050abc:	46bd      	mov	sp, r7
10050abe:	b002      	add	sp, #8
10050ac0:	bd80      	pop	{r7, pc}

10050ac2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050ac2:	b580      	push	{r7, lr}
10050ac4:	b082      	sub	sp, #8
10050ac6:	af00      	add	r7, sp, #0
10050ac8:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
10050aca:	687b      	ldr	r3, [r7, #4]
10050acc:	2100      	movs	r1, #0
10050ace:	0018      	movs	r0, r3
10050ad0:	f7ff fd17 	bl	10050502 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10050ad4:	46c0      	nop			@ (mov r8, r8)
10050ad6:	46bd      	mov	sp, r7
10050ad8:	b002      	add	sp, #8
10050ada:	bd80      	pop	{r7, pc}

10050adc <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050adc:	b580      	push	{r7, lr}
10050ade:	b082      	sub	sp, #8
10050ae0:	af00      	add	r7, sp, #0
10050ae2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
10050ae4:	687b      	ldr	r3, [r7, #4]
10050ae6:	0018      	movs	r0, r3
10050ae8:	f7ff fd66 	bl	100505b8 <LL_RADIO_IncrementerChannel_Disable>
}
10050aec:	46c0      	nop			@ (mov r8, r8)
10050aee:	46bd      	mov	sp, r7
10050af0:	b002      	add	sp, #8
10050af2:	bd80      	pop	{r7, pc}

10050af4 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050af4:	b580      	push	{r7, lr}
10050af6:	b082      	sub	sp, #8
10050af8:	af00      	add	r7, sp, #0
10050afa:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10050afc:	687b      	ldr	r3, [r7, #4]
10050afe:	2100      	movs	r1, #0
10050b00:	0018      	movs	r0, r3
10050b02:	f7ff fcd5 	bl	100504b0 <LL_RADIO_SetCalibrationRequest>
}
10050b06:	46c0      	nop			@ (mov r8, r8)
10050b08:	46bd      	mov	sp, r7
10050b0a:	b002      	add	sp, #8
10050b0c:	bd80      	pop	{r7, pc}

10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050b0e:	b580      	push	{r7, lr}
10050b10:	b082      	sub	sp, #8
10050b12:	af00      	add	r7, sp, #0
10050b14:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
10050b16:	687b      	ldr	r3, [r7, #4]
10050b18:	0018      	movs	r0, r3
10050b1a:	f7ff fdb3 	bl	10050684 <LL_RADIO_GetDataPointer>
10050b1e:	0003      	movs	r3, r0
}
10050b20:	0018      	movs	r0, r3
10050b22:	46bd      	mov	sp, r7
10050b24:	b002      	add	sp, #8
10050b26:	bd80      	pop	{r7, pc}

10050b28 <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050b28:	b580      	push	{r7, lr}
10050b2a:	b082      	sub	sp, #8
10050b2c:	af00      	add	r7, sp, #0
10050b2e:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10050b30:	687b      	ldr	r3, [r7, #4]
10050b32:	2210      	movs	r2, #16
10050b34:	2100      	movs	r1, #0
10050b36:	0018      	movs	r0, r3
10050b38:	f014 f888 	bl	10064c4c <memset>
}
10050b3c:	46c0      	nop			@ (mov r8, r8)
10050b3e:	46bd      	mov	sp, r7
10050b40:	b002      	add	sp, #8
10050b42:	bd80      	pop	{r7, pc}

10050b44 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050b44:	b580      	push	{r7, lr}
10050b46:	b082      	sub	sp, #8
10050b48:	af00      	add	r7, sp, #0
10050b4a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050b4c:	687b      	ldr	r3, [r7, #4]
10050b4e:	2101      	movs	r1, #1
10050b50:	0018      	movs	r0, r3
10050b52:	f7ff fd00 	bl	10050556 <LL_RADIO_SetAdvertise>
}
10050b56:	46c0      	nop			@ (mov r8, r8)
10050b58:	46bd      	mov	sp, r7
10050b5a:	b002      	add	sp, #8
10050b5c:	bd80      	pop	{r7, pc}

10050b5e <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050b5e:	b580      	push	{r7, lr}
10050b60:	b082      	sub	sp, #8
10050b62:	af00      	add	r7, sp, #0
10050b64:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050b66:	687b      	ldr	r3, [r7, #4]
10050b68:	2101      	movs	r1, #1
10050b6a:	0018      	movs	r0, r3
10050b6c:	f7ff fcde 	bl	1005052c <LL_RADIO_SetCRCInitializationSelector>
}
10050b70:	46c0      	nop			@ (mov r8, r8)
10050b72:	46bd      	mov	sp, r7
10050b74:	b002      	add	sp, #8
10050b76:	bd80      	pop	{r7, pc}

10050b78 <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050b78:	b580      	push	{r7, lr}
10050b7a:	b082      	sub	sp, #8
10050b7c:	af00      	add	r7, sp, #0
10050b7e:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
10050b80:	687b      	ldr	r3, [r7, #4]
10050b82:	2101      	movs	r1, #1
10050b84:	0018      	movs	r0, r3
10050b86:	f7ff fcbc 	bl	10050502 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10050b8a:	46c0      	nop			@ (mov r8, r8)
10050b8c:	46bd      	mov	sp, r7
10050b8e:	b002      	add	sp, #8
10050b90:	bd80      	pop	{r7, pc}

10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
10050b92:	b580      	push	{r7, lr}
10050b94:	b082      	sub	sp, #8
10050b96:	af00      	add	r7, sp, #0
10050b98:	6078      	str	r0, [r7, #4]
10050b9a:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
10050b9c:	683a      	ldr	r2, [r7, #0]
10050b9e:	687b      	ldr	r3, [r7, #4]
10050ba0:	0011      	movs	r1, r2
10050ba2:	0018      	movs	r0, r3
10050ba4:	f7ff fd60 	bl	10050668 <LL_RADIO_SetDataPointer>
}
10050ba8:	46c0      	nop			@ (mov r8, r8)
10050baa:	46bd      	mov	sp, r7
10050bac:	b002      	add	sp, #8
10050bae:	bd80      	pop	{r7, pc}

10050bb0 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050bb0:	b580      	push	{r7, lr}
10050bb2:	b082      	sub	sp, #8
10050bb4:	af00      	add	r7, sp, #0
10050bb6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
10050bb8:	687b      	ldr	r3, [r7, #4]
10050bba:	0018      	movs	r0, r3
10050bbc:	f7ff fcee 	bl	1005059c <LL_RADIO_IncrementerChannel_Enable>
}
10050bc0:	46c0      	nop			@ (mov r8, r8)
10050bc2:	46bd      	mov	sp, r7
10050bc4:	b002      	add	sp, #8
10050bc6:	bd80      	pop	{r7, pc}

10050bc8 <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050bc8:	b580      	push	{r7, lr}
10050bca:	b082      	sub	sp, #8
10050bcc:	af00      	add	r7, sp, #0
10050bce:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
10050bd0:	687b      	ldr	r3, [r7, #4]
10050bd2:	0018      	movs	r0, r3
10050bd4:	f7ff fde8 	bl	100507a8 <LL_RADIO_IntRcvCRCErr_Enable>
}
10050bd8:	46c0      	nop			@ (mov r8, r8)
10050bda:	46bd      	mov	sp, r7
10050bdc:	b002      	add	sp, #8
10050bde:	bd80      	pop	{r7, pc}

10050be0 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050be0:	b580      	push	{r7, lr}
10050be2:	b082      	sub	sp, #8
10050be4:	af00      	add	r7, sp, #0
10050be6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
10050be8:	687b      	ldr	r3, [r7, #4]
10050bea:	0018      	movs	r0, r3
10050bec:	f7ff fdbe 	bl	1005076c <LL_RADIO_IntDone_Enable>
}
10050bf0:	46c0      	nop			@ (mov r8, r8)
10050bf2:	46bd      	mov	sp, r7
10050bf4:	b002      	add	sp, #8
10050bf6:	bd80      	pop	{r7, pc}

10050bf8 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050bf8:	b580      	push	{r7, lr}
10050bfa:	b082      	sub	sp, #8
10050bfc:	af00      	add	r7, sp, #0
10050bfe:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10050c00:	687b      	ldr	r3, [r7, #4]
10050c02:	0018      	movs	r0, r3
10050c04:	f7ff fddf 	bl	100507c6 <LL_RADIO_IntRcvOk_Enable>
}
10050c08:	46c0      	nop			@ (mov r8, r8)
10050c0a:	46bd      	mov	sp, r7
10050c0c:	b002      	add	sp, #8
10050c0e:	bd80      	pop	{r7, pc}

10050c10 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050c10:	b580      	push	{r7, lr}
10050c12:	b082      	sub	sp, #8
10050c14:	af00      	add	r7, sp, #0
10050c16:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
10050c18:	687b      	ldr	r3, [r7, #4]
10050c1a:	0018      	movs	r0, r3
10050c1c:	f7ff fdb5 	bl	1005078a <LL_RADIO_IntRcvTimeout_Enable>
}
10050c20:	46c0      	nop			@ (mov r8, r8)
10050c22:	46bd      	mov	sp, r7
10050c24:	b002      	add	sp, #8
10050c26:	bd80      	pop	{r7, pc}

10050c28 <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050c28:	b580      	push	{r7, lr}
10050c2a:	b082      	sub	sp, #8
10050c2c:	af00      	add	r7, sp, #0
10050c2e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050c30:	687b      	ldr	r3, [r7, #4]
10050c32:	2101      	movs	r1, #1
10050c34:	0018      	movs	r0, r3
10050c36:	f7ff fd81 	bl	1005073c <LL_RADIO_SetIntTxOk>
}
10050c3a:	46c0      	nop			@ (mov r8, r8)
10050c3c:	46bd      	mov	sp, r7
10050c3e:	b002      	add	sp, #8
10050c40:	bd80      	pop	{r7, pc}

10050c42 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050c42:	b580      	push	{r7, lr}
10050c44:	b082      	sub	sp, #8
10050c46:	af00      	add	r7, sp, #0
10050c48:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050c4a:	687b      	ldr	r3, [r7, #4]
10050c4c:	2101      	movs	r1, #1
10050c4e:	0018      	movs	r0, r3
10050c50:	f7ff fc42 	bl	100504d8 <LL_RADIO_SetKeepSemaRequest>
}
10050c54:	46c0      	nop			@ (mov r8, r8)
10050c56:	46bd      	mov	sp, r7
10050c58:	b002      	add	sp, #8
10050c5a:	bd80      	pop	{r7, pc}

10050c5c <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10050c5c:	b580      	push	{r7, lr}
10050c5e:	b082      	sub	sp, #8
10050c60:	af00      	add	r7, sp, #0
10050c62:	6078      	str	r0, [r7, #4]
10050c64:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10050c66:	683a      	ldr	r2, [r7, #0]
10050c68:	687b      	ldr	r3, [r7, #4]
10050c6a:	0011      	movs	r1, r2
10050c6c:	0018      	movs	r0, r3
10050c6e:	f7ff fc11 	bl	10050494 <LL_RADIO_SetNextPointer>
}
10050c72:	46c0      	nop			@ (mov r8, r8)
10050c74:	46bd      	mov	sp, r7
10050c76:	b002      	add	sp, #8
10050c78:	bd80      	pop	{r7, pc}

10050c7a <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050c7a:	b580      	push	{r7, lr}
10050c7c:	b082      	sub	sp, #8
10050c7e:	af00      	add	r7, sp, #0
10050c80:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10050c82:	687b      	ldr	r3, [r7, #4]
10050c84:	2100      	movs	r1, #0
10050c86:	0018      	movs	r0, r3
10050c88:	f7ff fca6 	bl	100505d8 <LL_RADIO_SetNextTxMode>
}
10050c8c:	46c0      	nop			@ (mov r8, r8)
10050c8e:	46bd      	mov	sp, r7
10050c90:	b002      	add	sp, #8
10050c92:	bd80      	pop	{r7, pc}

10050c94 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10050c94:	b580      	push	{r7, lr}
10050c96:	b082      	sub	sp, #8
10050c98:	af00      	add	r7, sp, #0
10050c9a:	6078      	str	r0, [r7, #4]
10050c9c:	000a      	movs	r2, r1
10050c9e:	1cfb      	adds	r3, r7, #3
10050ca0:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10050ca2:	46c0      	nop			@ (mov r8, r8)
10050ca4:	46bd      	mov	sp, r7
10050ca6:	b002      	add	sp, #8
10050ca8:	bd80      	pop	{r7, pc}

10050caa <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050caa:	b580      	push	{r7, lr}
10050cac:	b082      	sub	sp, #8
10050cae:	af00      	add	r7, sp, #0
10050cb0:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050cb2:	687b      	ldr	r3, [r7, #4]
10050cb4:	2101      	movs	r1, #1
10050cb6:	0018      	movs	r0, r3
10050cb8:	f7ff fc8e 	bl	100505d8 <LL_RADIO_SetNextTxMode>
}
10050cbc:	46c0      	nop			@ (mov r8, r8)
10050cbe:	46bd      	mov	sp, r7
10050cc0:	b002      	add	sp, #8
10050cc2:	bd80      	pop	{r7, pc}

10050cc4 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050cc4:	b580      	push	{r7, lr}
10050cc6:	b082      	sub	sp, #8
10050cc8:	af00      	add	r7, sp, #0
10050cca:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
10050ccc:	687b      	ldr	r3, [r7, #4]
10050cce:	0018      	movs	r0, r3
10050cd0:	f7ff fc56 	bl	10050580 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
10050cd4:	46c0      	nop			@ (mov r8, r8)
10050cd6:	46bd      	mov	sp, r7
10050cd8:	b002      	add	sp, #8
10050cda:	bd80      	pop	{r7, pc}

10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050cdc:	b580      	push	{r7, lr}
10050cde:	b082      	sub	sp, #8
10050ce0:	af00      	add	r7, sp, #0
10050ce2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050ce4:	687b      	ldr	r3, [r7, #4]
10050ce6:	2101      	movs	r1, #1
10050ce8:	0018      	movs	r0, r3
10050cea:	f7ff fbe1 	bl	100504b0 <LL_RADIO_SetCalibrationRequest>
}
10050cee:	46c0      	nop			@ (mov r8, r8)
10050cf0:	46bd      	mov	sp, r7
10050cf2:	b002      	add	sp, #8
10050cf4:	bd80      	pop	{r7, pc}

10050cf6 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050cf6:	b580      	push	{r7, lr}
10050cf8:	b082      	sub	sp, #8
10050cfa:	af00      	add	r7, sp, #0
10050cfc:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050cfe:	687b      	ldr	r3, [r7, #4]
10050d00:	2101      	movs	r1, #1
10050d02:	0018      	movs	r0, r3
10050d04:	f7ff fc80 	bl	10050608 <LL_RADIO_SetAllTableDataReady>
}
10050d08:	46c0      	nop			@ (mov r8, r8)
10050d0a:	46bd      	mov	sp, r7
10050d0c:	b002      	add	sp, #8
10050d0e:	bd80      	pop	{r7, pc}

10050d10 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10050d10:	b580      	push	{r7, lr}
10050d12:	b082      	sub	sp, #8
10050d14:	af00      	add	r7, sp, #0
10050d16:	6078      	str	r0, [r7, #4]
10050d18:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
10050d1a:	683a      	ldr	r2, [r7, #0]
10050d1c:	687b      	ldr	r3, [r7, #4]
10050d1e:	0011      	movs	r1, r2
10050d20:	0018      	movs	r0, r3
10050d22:	f7ff fcb9 	bl	10050698 <LL_RADIO_SetTimer2Triggering>
}
10050d26:	46c0      	nop			@ (mov r8, r8)
10050d28:	46bd      	mov	sp, r7
10050d2a:	b002      	add	sp, #8
10050d2c:	bd80      	pop	{r7, pc}

10050d2e <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050d2e:	b580      	push	{r7, lr}
10050d30:	b082      	sub	sp, #8
10050d32:	af00      	add	r7, sp, #0
10050d34:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10050d36:	687b      	ldr	r3, [r7, #4]
10050d38:	0018      	movs	r0, r3
10050d3a:	f7ff fcc0 	bl	100506be <LL_RADIO_Timer2_Enable>
}
10050d3e:	46c0      	nop			@ (mov r8, r8)
10050d40:	46bd      	mov	sp, r7
10050d42:	b002      	add	sp, #8
10050d44:	bd80      	pop	{r7, pc}

10050d46 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050d46:	b580      	push	{r7, lr}
10050d48:	b082      	sub	sp, #8
10050d4a:	af00      	add	r7, sp, #0
10050d4c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050d4e:	687b      	ldr	r3, [r7, #4]
10050d50:	2101      	movs	r1, #1
10050d52:	0018      	movs	r0, r3
10050d54:	f7ff fcda 	bl	1005070c <LL_RADIO_SetTrigDone>
}
10050d58:	46c0      	nop			@ (mov r8, r8)
10050d5a:	46bd      	mov	sp, r7
10050d5c:	b002      	add	sp, #8
10050d5e:	bd80      	pop	{r7, pc}

10050d60 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050d60:	b580      	push	{r7, lr}
10050d62:	b082      	sub	sp, #8
10050d64:	af00      	add	r7, sp, #0
10050d66:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050d68:	687b      	ldr	r3, [r7, #4]
10050d6a:	2101      	movs	r1, #1
10050d6c:	0018      	movs	r0, r3
10050d6e:	f7ff fcb5 	bl	100506dc <LL_RADIO_SetTrigRcv>
}
10050d72:	46c0      	nop			@ (mov r8, r8)
10050d74:	46bd      	mov	sp, r7
10050d76:	b002      	add	sp, #8
10050d78:	bd80      	pop	{r7, pc}

10050d7a <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10050d7a:	b580      	push	{r7, lr}
10050d7c:	b082      	sub	sp, #8
10050d7e:	af00      	add	r7, sp, #0
10050d80:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050d82:	687b      	ldr	r3, [r7, #4]
10050d84:	2101      	movs	r1, #1
10050d86:	0018      	movs	r0, r3
10050d88:	f7ff fc56 	bl	10050638 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10050d8c:	687b      	ldr	r3, [r7, #4]
10050d8e:	2101      	movs	r1, #1
10050d90:	0018      	movs	r0, r3
10050d92:	f7ff fc39 	bl	10050608 <LL_RADIO_SetAllTableDataReady>
}
10050d96:	46c0      	nop			@ (mov r8, r8)
10050d98:	46bd      	mov	sp, r7
10050d9a:	b002      	add	sp, #8
10050d9c:	bd80      	pop	{r7, pc}

10050d9e <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
10050d9e:	b580      	push	{r7, lr}
10050da0:	b082      	sub	sp, #8
10050da2:	af00      	add	r7, sp, #0
10050da4:	6078      	str	r0, [r7, #4]
10050da6:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
10050da8:	683b      	ldr	r3, [r7, #0]
10050daa:	031b      	lsls	r3, r3, #12
10050dac:	0b1b      	lsrs	r3, r3, #12
10050dae:	0018      	movs	r0, r3
10050db0:	f7fe fea6 	bl	1004fb00 <LL_RADIO_SetReceiveWindowTimeout>
}
10050db4:	46c0      	nop			@ (mov r8, r8)
10050db6:	46bd      	mov	sp, r7
10050db8:	b002      	add	sp, #8
10050dba:	bd80      	pop	{r7, pc}

10050dbc <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
10050dbc:	b580      	push	{r7, lr}
10050dbe:	b082      	sub	sp, #8
10050dc0:	af00      	add	r7, sp, #0
10050dc2:	0002      	movs	r2, r0
10050dc4:	1dfb      	adds	r3, r7, #7
10050dc6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
10050dc8:	1dfb      	adds	r3, r7, #7
10050dca:	781b      	ldrb	r3, [r3, #0]
10050dcc:	2101      	movs	r1, #1
10050dce:	0018      	movs	r0, r3
10050dd0:	f7ff f848 	bl	1004fe64 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10050dd4:	46c0      	nop			@ (mov r8, r8)
10050dd6:	46bd      	mov	sp, r7
10050dd8:	b002      	add	sp, #8
10050dda:	bd80      	pop	{r7, pc}

10050ddc <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10050ddc:	b580      	push	{r7, lr}
10050dde:	b082      	sub	sp, #8
10050de0:	af00      	add	r7, sp, #0
10050de2:	0002      	movs	r2, r0
10050de4:	6039      	str	r1, [r7, #0]
10050de6:	1dfb      	adds	r3, r7, #7
10050de8:	701a      	strb	r2, [r3, #0]
    if(enable)
10050dea:	683b      	ldr	r3, [r7, #0]
10050dec:	2b00      	cmp	r3, #0
10050dee:	d005      	beq.n	10050dfc <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10050df0:	1dfb      	adds	r3, r7, #7
10050df2:	781b      	ldrb	r3, [r3, #0]
10050df4:	0018      	movs	r0, r3
10050df6:	f7fe fec1 	bl	1004fb7c <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
10050dfa:	e004      	b.n	10050e06 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10050dfc:	1dfb      	adds	r3, r7, #7
10050dfe:	781b      	ldrb	r3, [r3, #0]
10050e00:	0018      	movs	r0, r3
10050e02:	f7fe fed9 	bl	1004fbb8 <LL_RADIO_RadioCommandList_Disable>
}
10050e06:	46c0      	nop			@ (mov r8, r8)
10050e08:	46bd      	mov	sp, r7
10050e0a:	b002      	add	sp, #8
10050e0c:	bd80      	pop	{r7, pc}

10050e0e <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
10050e0e:	b580      	push	{r7, lr}
10050e10:	b082      	sub	sp, #8
10050e12:	af00      	add	r7, sp, #0
10050e14:	0002      	movs	r2, r0
10050e16:	1dfb      	adds	r3, r7, #7
10050e18:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
10050e1a:	1dfb      	adds	r3, r7, #7
10050e1c:	781b      	ldrb	r3, [r3, #0]
10050e1e:	0018      	movs	r0, r3
10050e20:	f7fe ffc0 	bl	1004fda4 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10050e24:	1dfb      	adds	r3, r7, #7
10050e26:	781b      	ldrb	r3, [r3, #0]
10050e28:	0018      	movs	r0, r3
10050e2a:	f7ff f9ad 	bl	10050188 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
10050e2e:	46c0      	nop			@ (mov r8, r8)
10050e30:	46bd      	mov	sp, r7
10050e32:	b002      	add	sp, #8
10050e34:	bd80      	pop	{r7, pc}

10050e36 <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
10050e36:	b580      	push	{r7, lr}
10050e38:	b082      	sub	sp, #8
10050e3a:	af00      	add	r7, sp, #0
10050e3c:	0002      	movs	r2, r0
10050e3e:	1dfb      	adds	r3, r7, #7
10050e40:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10050e42:	1dfb      	adds	r3, r7, #7
10050e44:	781b      	ldrb	r3, [r3, #0]
10050e46:	0018      	movs	r0, r3
10050e48:	f7fe ff8c 	bl	1004fd64 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
10050e4c:	1dfb      	adds	r3, r7, #7
10050e4e:	781b      	ldrb	r3, [r3, #0]
10050e50:	0018      	movs	r0, r3
10050e52:	f7ff f979 	bl	10050148 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
10050e56:	46c0      	nop			@ (mov r8, r8)
10050e58:	46bd      	mov	sp, r7
10050e5a:	b002      	add	sp, #8
10050e5c:	bd80      	pop	{r7, pc}

10050e5e <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
10050e5e:	b580      	push	{r7, lr}
10050e60:	b082      	sub	sp, #8
10050e62:	af00      	add	r7, sp, #0
10050e64:	0002      	movs	r2, r0
10050e66:	1dfb      	adds	r3, r7, #7
10050e68:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
10050e6a:	1dfb      	adds	r3, r7, #7
10050e6c:	781b      	ldrb	r3, [r3, #0]
10050e6e:	0018      	movs	r0, r3
10050e70:	f7ff f9c8 	bl	10050204 <LL_RADIO_GetAccessAddress>
10050e74:	0003      	movs	r3, r0
}
10050e76:	0018      	movs	r0, r3
10050e78:	46bd      	mov	sp, r7
10050e7a:	b002      	add	sp, #8
10050e7c:	bd80      	pop	{r7, pc}

10050e7e <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10050e7e:	b580      	push	{r7, lr}
10050e80:	b082      	sub	sp, #8
10050e82:	af00      	add	r7, sp, #0
10050e84:	0002      	movs	r2, r0
10050e86:	6039      	str	r1, [r7, #0]
10050e88:	1dfb      	adds	r3, r7, #7
10050e8a:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
10050e8c:	1dfb      	adds	r3, r7, #7
10050e8e:	781b      	ldrb	r3, [r3, #0]
10050e90:	0018      	movs	r0, r3
10050e92:	f7ff faad 	bl	100503f0 <LL_RADIO_GetUsedChannelFlags_15_0>
10050e96:	0003      	movs	r3, r0
10050e98:	b2da      	uxtb	r2, r3
10050e9a:	683b      	ldr	r3, [r7, #0]
10050e9c:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
10050e9e:	1dfb      	adds	r3, r7, #7
10050ea0:	781b      	ldrb	r3, [r3, #0]
10050ea2:	0018      	movs	r0, r3
10050ea4:	f7ff faa4 	bl	100503f0 <LL_RADIO_GetUsedChannelFlags_15_0>
10050ea8:	0003      	movs	r3, r0
10050eaa:	0a1a      	lsrs	r2, r3, #8
10050eac:	683b      	ldr	r3, [r7, #0]
10050eae:	3301      	adds	r3, #1
10050eb0:	b2d2      	uxtb	r2, r2
10050eb2:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
10050eb4:	1dfb      	adds	r3, r7, #7
10050eb6:	781b      	ldrb	r3, [r3, #0]
10050eb8:	0018      	movs	r0, r3
10050eba:	f7ff fad5 	bl	10050468 <LL_RADIO_GetUsedChannelFlags_36_16>
10050ebe:	0002      	movs	r2, r0
10050ec0:	683b      	ldr	r3, [r7, #0]
10050ec2:	3302      	adds	r3, #2
10050ec4:	b2d2      	uxtb	r2, r2
10050ec6:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
10050ec8:	1dfb      	adds	r3, r7, #7
10050eca:	781b      	ldrb	r3, [r3, #0]
10050ecc:	0018      	movs	r0, r3
10050ece:	f7ff facb 	bl	10050468 <LL_RADIO_GetUsedChannelFlags_36_16>
10050ed2:	0003      	movs	r3, r0
10050ed4:	0a1a      	lsrs	r2, r3, #8
10050ed6:	683b      	ldr	r3, [r7, #0]
10050ed8:	3303      	adds	r3, #3
10050eda:	b2d2      	uxtb	r2, r2
10050edc:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
10050ede:	1dfb      	adds	r3, r7, #7
10050ee0:	781b      	ldrb	r3, [r3, #0]
10050ee2:	0018      	movs	r0, r3
10050ee4:	f7ff fac0 	bl	10050468 <LL_RADIO_GetUsedChannelFlags_36_16>
10050ee8:	0003      	movs	r3, r0
10050eea:	0c1a      	lsrs	r2, r3, #16
10050eec:	683b      	ldr	r3, [r7, #0]
10050eee:	3304      	adds	r3, #4
10050ef0:	b2d2      	uxtb	r2, r2
10050ef2:	701a      	strb	r2, [r3, #0]
}
10050ef4:	46c0      	nop			@ (mov r8, r8)
10050ef6:	46bd      	mov	sp, r7
10050ef8:	b002      	add	sp, #8
10050efa:	bd80      	pop	{r7, pc}

10050efc <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
10050efc:	b580      	push	{r7, lr}
10050efe:	b082      	sub	sp, #8
10050f00:	af00      	add	r7, sp, #0
10050f02:	0002      	movs	r2, r0
10050f04:	1dfb      	adds	r3, r7, #7
10050f06:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
10050f08:	1dfb      	adds	r3, r7, #7
10050f0a:	781b      	ldrb	r3, [r3, #0]
10050f0c:	225c      	movs	r2, #92	@ 0x5c
10050f0e:	4353      	muls	r3, r2
10050f10:	4a03      	ldr	r2, [pc, #12]	@ (10050f20 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10050f12:	4694      	mov	ip, r2
10050f14:	4463      	add	r3, ip
10050f16:	3338      	adds	r3, #56	@ 0x38
}
10050f18:	0018      	movs	r0, r3
10050f1a:	46bd      	mov	sp, r7
10050f1c:	b002      	add	sp, #8
10050f1e:	bd80      	pop	{r7, pc}
10050f20:	200000dc 	.word	0x200000dc

10050f24 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10050f24:	b580      	push	{r7, lr}
10050f26:	b082      	sub	sp, #8
10050f28:	af00      	add	r7, sp, #0
10050f2a:	0002      	movs	r2, r0
10050f2c:	1dfb      	adds	r3, r7, #7
10050f2e:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10050f30:	1dfb      	adds	r3, r7, #7
10050f32:	781b      	ldrb	r3, [r3, #0]
10050f34:	225c      	movs	r2, #92	@ 0x5c
10050f36:	4353      	muls	r3, r2
10050f38:	4a03      	ldr	r2, [pc, #12]	@ (10050f48 <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
10050f3a:	4694      	mov	ip, r2
10050f3c:	4463      	add	r3, ip
10050f3e:	3340      	adds	r3, #64	@ 0x40
}
10050f40:	0018      	movs	r0, r3
10050f42:	46bd      	mov	sp, r7
10050f44:	b002      	add	sp, #8
10050f46:	bd80      	pop	{r7, pc}
10050f48:	200000dc 	.word	0x200000dc

10050f4c <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
10050f4c:	b580      	push	{r7, lr}
10050f4e:	b082      	sub	sp, #8
10050f50:	af00      	add	r7, sp, #0
10050f52:	0002      	movs	r2, r0
10050f54:	1dfb      	adds	r3, r7, #7
10050f56:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
10050f58:	1dfb      	adds	r3, r7, #7
10050f5a:	781b      	ldrb	r3, [r3, #0]
10050f5c:	0018      	movs	r0, r3
10050f5e:	f7ff fa0d 	bl	1005037c <LL_RADIO_GetHopIncrement>
10050f62:	0003      	movs	r3, r0
10050f64:	b2db      	uxtb	r3, r3
}
10050f66:	0018      	movs	r0, r3
10050f68:	46bd      	mov	sp, r7
10050f6a:	b002      	add	sp, #8
10050f6c:	bd80      	pop	{r7, pc}

10050f6e <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
10050f6e:	b580      	push	{r7, lr}
10050f70:	b082      	sub	sp, #8
10050f72:	af00      	add	r7, sp, #0
10050f74:	0002      	movs	r2, r0
10050f76:	1dfb      	adds	r3, r7, #7
10050f78:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
10050f7a:	1dfb      	adds	r3, r7, #7
10050f7c:	781b      	ldrb	r3, [r3, #0]
10050f7e:	0018      	movs	r0, r3
10050f80:	f7fe fe74 	bl	1004fc6c <LL_RADIO_TxMode_IsEnabled>
10050f84:	0003      	movs	r3, r0
10050f86:	b2db      	uxtb	r3, r3
}
10050f88:	0018      	movs	r0, r3
10050f8a:	46bd      	mov	sp, r7
10050f8c:	b002      	add	sp, #8
10050f8e:	bd80      	pop	{r7, pc}

10050f90 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
10050f90:	b580      	push	{r7, lr}
10050f92:	b082      	sub	sp, #8
10050f94:	af00      	add	r7, sp, #0
10050f96:	0002      	movs	r2, r0
10050f98:	1dfb      	adds	r3, r7, #7
10050f9a:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
10050f9c:	1dfb      	adds	r3, r7, #7
10050f9e:	781b      	ldrb	r3, [r3, #0]
10050fa0:	0018      	movs	r0, r3
10050fa2:	f7fe fea7 	bl	1004fcf4 <LL_RADIO_GetRemapChannel>
10050fa6:	0003      	movs	r3, r0
10050fa8:	b2db      	uxtb	r3, r3
}
10050faa:	0018      	movs	r0, r3
10050fac:	46bd      	mov	sp, r7
10050fae:	b002      	add	sp, #8
10050fb0:	bd80      	pop	{r7, pc}

10050fb2 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10050fb2:	b590      	push	{r4, r7, lr}
10050fb4:	b083      	sub	sp, #12
10050fb6:	af00      	add	r7, sp, #0
10050fb8:	0002      	movs	r2, r0
10050fba:	6039      	str	r1, [r7, #0]
10050fbc:	1dfb      	adds	r3, r7, #7
10050fbe:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
10050fc0:	1dfb      	adds	r3, r7, #7
10050fc2:	781b      	ldrb	r3, [r3, #0]
10050fc4:	0018      	movs	r0, r3
10050fc6:	f7ff f86d 	bl	100500a4 <LL_RADIO_GetPacketCounterRx_23_0>
10050fca:	0002      	movs	r2, r0
10050fcc:	683b      	ldr	r3, [r7, #0]
10050fce:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
10050fd0:	683b      	ldr	r3, [r7, #0]
10050fd2:	681c      	ldr	r4, [r3, #0]
10050fd4:	1dfb      	adds	r3, r7, #7
10050fd6:	781b      	ldrb	r3, [r3, #0]
10050fd8:	0018      	movs	r0, r3
10050fda:	f7ff f89f 	bl	1005011c <LL_RADIO_GetPacketCounterRx_39_24>
10050fde:	0003      	movs	r3, r0
10050fe0:	061b      	lsls	r3, r3, #24
10050fe2:	0022      	movs	r2, r4
10050fe4:	431a      	orrs	r2, r3
10050fe6:	683b      	ldr	r3, [r7, #0]
10050fe8:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
10050fea:	1dfb      	adds	r3, r7, #7
10050fec:	781b      	ldrb	r3, [r3, #0]
10050fee:	0018      	movs	r0, r3
10050ff0:	f7ff f894 	bl	1005011c <LL_RADIO_GetPacketCounterRx_39_24>
10050ff4:	0002      	movs	r2, r0
10050ff6:	683b      	ldr	r3, [r7, #0]
10050ff8:	3304      	adds	r3, #4
10050ffa:	0a12      	lsrs	r2, r2, #8
10050ffc:	601a      	str	r2, [r3, #0]
}
10050ffe:	46c0      	nop			@ (mov r8, r8)
10051000:	46bd      	mov	sp, r7
10051002:	b003      	add	sp, #12
10051004:	bd90      	pop	{r4, r7, pc}

10051006 <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
10051006:	b580      	push	{r7, lr}
10051008:	b082      	sub	sp, #8
1005100a:	af00      	add	r7, sp, #0
1005100c:	0002      	movs	r2, r0
1005100e:	1dfb      	adds	r3, r7, #7
10051010:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10051012:	1dfb      	adds	r3, r7, #7
10051014:	781b      	ldrb	r3, [r3, #0]
10051016:	0018      	movs	r0, r3
10051018:	f7fe ff74 	bl	1004ff04 <LL_RADIO_GetReceptionPhy>
1005101c:	0003      	movs	r3, r0
1005101e:	b2db      	uxtb	r3, r3
}
10051020:	0018      	movs	r0, r3
10051022:	46bd      	mov	sp, r7
10051024:	b002      	add	sp, #8
10051026:	bd80      	pop	{r7, pc}

10051028 <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
10051028:	b580      	push	{r7, lr}
1005102a:	b082      	sub	sp, #8
1005102c:	af00      	add	r7, sp, #0
1005102e:	0002      	movs	r2, r0
10051030:	1dfb      	adds	r3, r7, #7
10051032:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10051034:	1dfb      	adds	r3, r7, #7
10051036:	781b      	ldrb	r3, [r3, #0]
10051038:	0018      	movs	r0, r3
1005103a:	f7fe fefb 	bl	1004fe34 <LL_RADIO_GetTransmissionPhy>
1005103e:	0003      	movs	r3, r0
10051040:	b2db      	uxtb	r3, r3
}
10051042:	0018      	movs	r0, r3
10051044:	46bd      	mov	sp, r7
10051046:	b002      	add	sp, #8
10051048:	bd80      	pop	{r7, pc}

1005104a <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
1005104a:	b580      	push	{r7, lr}
1005104c:	b084      	sub	sp, #16
1005104e:	af00      	add	r7, sp, #0
10051050:	0002      	movs	r2, r0
10051052:	1dfb      	adds	r3, r7, #7
10051054:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
10051056:	1dfb      	adds	r3, r7, #7
10051058:	781b      	ldrb	r3, [r3, #0]
1005105a:	0018      	movs	r0, r3
1005105c:	f7ff f950 	bl	10050300 <LL_RADIO_GetPAPower>
10051060:	0002      	movs	r2, r0
10051062:	210f      	movs	r1, #15
10051064:	187b      	adds	r3, r7, r1
10051066:	701a      	strb	r2, [r3, #0]
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
    {
        pa_level = HP_PA_LEVEL;
    }
#endif
    return pa_level;
10051068:	187b      	adds	r3, r7, r1
1005106a:	781b      	ldrb	r3, [r3, #0]
}
1005106c:	0018      	movs	r0, r3
1005106e:	46bd      	mov	sp, r7
10051070:	b004      	add	sp, #16
10051072:	bd80      	pop	{r7, pc}

10051074 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10051074:	b580      	push	{r7, lr}
10051076:	b082      	sub	sp, #8
10051078:	af00      	add	r7, sp, #0
1005107a:	0002      	movs	r2, r0
1005107c:	1dfb      	adds	r3, r7, #7
1005107e:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
10051080:	1dfb      	adds	r3, r7, #7
10051082:	781b      	ldrb	r3, [r3, #0]
10051084:	225c      	movs	r2, #92	@ 0x5c
10051086:	4353      	muls	r3, r2
10051088:	4a08      	ldr	r2, [pc, #32]	@ (100510ac <BLEPLAT_CNTR_SmInitTo0+0x38>)
1005108a:	4694      	mov	ip, r2
1005108c:	4463      	add	r3, ip
1005108e:	225c      	movs	r2, #92	@ 0x5c
10051090:	2100      	movs	r1, #0
10051092:	0018      	movs	r0, r3
10051094:	f013 fdda 	bl	10064c4c <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
10051098:	1dfb      	adds	r3, r7, #7
1005109a:	781b      	ldrb	r3, [r3, #0]
1005109c:	2101      	movs	r1, #1
1005109e:	0018      	movs	r0, r3
100510a0:	f7ff fe9c 	bl	10050ddc <BLEPLAT_CNTR_SmEnRadioConfig>
}
100510a4:	46c0      	nop			@ (mov r8, r8)
100510a6:	46bd      	mov	sp, r7
100510a8:	b002      	add	sp, #8
100510aa:	bd80      	pop	{r7, pc}
100510ac:	200000dc 	.word	0x200000dc

100510b0 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100510b0:	b580      	push	{r7, lr}
100510b2:	b082      	sub	sp, #8
100510b4:	af00      	add	r7, sp, #0
100510b6:	0002      	movs	r2, r0
100510b8:	6039      	str	r1, [r7, #0]
100510ba:	1dfb      	adds	r3, r7, #7
100510bc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
100510be:	683a      	ldr	r2, [r7, #0]
100510c0:	1dfb      	adds	r3, r7, #7
100510c2:	781b      	ldrb	r3, [r3, #0]
100510c4:	0011      	movs	r1, r2
100510c6:	0018      	movs	r0, r3
100510c8:	f7ff f87e 	bl	100501c8 <LL_RADIO_SetAccessAddress>
}
100510cc:	46c0      	nop			@ (mov r8, r8)
100510ce:	46bd      	mov	sp, r7
100510d0:	b002      	add	sp, #8
100510d2:	bd80      	pop	{r7, pc}

100510d4 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
100510d4:	b580      	push	{r7, lr}
100510d6:	b084      	sub	sp, #16
100510d8:	af00      	add	r7, sp, #0
100510da:	0002      	movs	r2, r0
100510dc:	6039      	str	r1, [r7, #0]
100510de:	1dfb      	adds	r3, r7, #7
100510e0:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
100510e2:	683b      	ldr	r3, [r7, #0]
100510e4:	781b      	ldrb	r3, [r3, #0]
100510e6:	001a      	movs	r2, r3
100510e8:	683b      	ldr	r3, [r7, #0]
100510ea:	3301      	adds	r3, #1
100510ec:	781b      	ldrb	r3, [r3, #0]
100510ee:	021b      	lsls	r3, r3, #8
100510f0:	4313      	orrs	r3, r2
100510f2:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
100510f4:	68fa      	ldr	r2, [r7, #12]
100510f6:	1dfb      	adds	r3, r7, #7
100510f8:	781b      	ldrb	r3, [r3, #0]
100510fa:	0011      	movs	r1, r2
100510fc:	0018      	movs	r0, r3
100510fe:	f7ff f955 	bl	100503ac <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10051102:	683b      	ldr	r3, [r7, #0]
10051104:	3302      	adds	r3, #2
10051106:	781b      	ldrb	r3, [r3, #0]
10051108:	001a      	movs	r2, r3
1005110a:	683b      	ldr	r3, [r7, #0]
1005110c:	3303      	adds	r3, #3
1005110e:	781b      	ldrb	r3, [r3, #0]
10051110:	021b      	lsls	r3, r3, #8
10051112:	431a      	orrs	r2, r3
10051114:	683b      	ldr	r3, [r7, #0]
10051116:	3304      	adds	r3, #4
10051118:	781b      	ldrb	r3, [r3, #0]
1005111a:	041b      	lsls	r3, r3, #16
1005111c:	4313      	orrs	r3, r2
1005111e:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10051120:	68fa      	ldr	r2, [r7, #12]
10051122:	1dfb      	adds	r3, r7, #7
10051124:	781b      	ldrb	r3, [r3, #0]
10051126:	0011      	movs	r1, r2
10051128:	0018      	movs	r0, r3
1005112a:	f7ff f979 	bl	10050420 <LL_RADIO_SetUsedChannelFlags_36_16>
}
1005112e:	46c0      	nop			@ (mov r8, r8)
10051130:	46bd      	mov	sp, r7
10051132:	b004      	add	sp, #16
10051134:	bd80      	pop	{r7, pc}

10051136 <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
10051136:	b580      	push	{r7, lr}
10051138:	b082      	sub	sp, #8
1005113a:	af00      	add	r7, sp, #0
1005113c:	0002      	movs	r2, r0
1005113e:	6039      	str	r1, [r7, #0]
10051140:	1dfb      	adds	r3, r7, #7
10051142:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10051144:	683a      	ldr	r2, [r7, #0]
10051146:	1dfb      	adds	r3, r7, #7
10051148:	781b      	ldrb	r3, [r3, #0]
1005114a:	0011      	movs	r1, r2
1005114c:	0018      	movs	r0, r3
1005114e:	f7ff f86d 	bl	1005022c <LL_RADIO_SetCRCInitializationValue>
}
10051152:	46c0      	nop			@ (mov r8, r8)
10051154:	46bd      	mov	sp, r7
10051156:	b002      	add	sp, #8
10051158:	bd80      	pop	{r7, pc}

1005115a <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
1005115a:	b580      	push	{r7, lr}
1005115c:	b082      	sub	sp, #8
1005115e:	af00      	add	r7, sp, #0
10051160:	0002      	movs	r2, r0
10051162:	1dfb      	adds	r3, r7, #7
10051164:	701a      	strb	r2, [r3, #0]
10051166:	1dbb      	adds	r3, r7, #6
10051168:	1c0a      	adds	r2, r1, #0
1005116a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
1005116c:	1dbb      	adds	r3, r7, #6
1005116e:	781a      	ldrb	r2, [r3, #0]
10051170:	1dfb      	adds	r3, r7, #7
10051172:	781b      	ldrb	r3, [r3, #0]
10051174:	0011      	movs	r1, r2
10051176:	0018      	movs	r0, r3
10051178:	f7ff f87c 	bl	10050274 <LL_RADIO_SetMaximumReceiveLength>
}
1005117c:	46c0      	nop			@ (mov r8, r8)
1005117e:	46bd      	mov	sp, r7
10051180:	b002      	add	sp, #8
10051182:	bd80      	pop	{r7, pc}

10051184 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
10051184:	b580      	push	{r7, lr}
10051186:	b082      	sub	sp, #8
10051188:	af00      	add	r7, sp, #0
1005118a:	0002      	movs	r2, r0
1005118c:	1dfb      	adds	r3, r7, #7
1005118e:	701a      	strb	r2, [r3, #0]
10051190:	1dbb      	adds	r3, r7, #6
10051192:	1c0a      	adds	r2, r1, #0
10051194:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
10051196:	1dbb      	adds	r3, r7, #6
10051198:	781a      	ldrb	r2, [r3, #0]
1005119a:	1dfb      	adds	r3, r7, #7
1005119c:	781b      	ldrb	r3, [r3, #0]
1005119e:	0011      	movs	r1, r2
100511a0:	0018      	movs	r0, r3
100511a2:	f7ff f8c3 	bl	1005032c <LL_RADIO_SetHopIncrement>
}
100511a6:	46c0      	nop			@ (mov r8, r8)
100511a8:	46bd      	mov	sp, r7
100511aa:	b002      	add	sp, #8
100511ac:	bd80      	pop	{r7, pc}

100511ae <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
100511ae:	b580      	push	{r7, lr}
100511b0:	b082      	sub	sp, #8
100511b2:	af00      	add	r7, sp, #0
100511b4:	0002      	movs	r2, r0
100511b6:	1dfb      	adds	r3, r7, #7
100511b8:	701a      	strb	r2, [r3, #0]
100511ba:	1dbb      	adds	r3, r7, #6
100511bc:	1c0a      	adds	r2, r1, #0
100511be:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
100511c0:	1dbb      	adds	r3, r7, #6
100511c2:	781a      	ldrb	r2, [r3, #0]
100511c4:	1dfb      	adds	r3, r7, #7
100511c6:	781b      	ldrb	r3, [r3, #0]
100511c8:	0011      	movs	r1, r2
100511ca:	0018      	movs	r0, r3
100511cc:	f7fe fd6a 	bl	1004fca4 <LL_RADIO_SetRemapChannel>
}
100511d0:	46c0      	nop			@ (mov r8, r8)
100511d2:	46bd      	mov	sp, r7
100511d4:	b002      	add	sp, #8
100511d6:	bd80      	pop	{r7, pc}

100511d8 <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
100511d8:	b580      	push	{r7, lr}
100511da:	b084      	sub	sp, #16
100511dc:	af00      	add	r7, sp, #0
100511de:	0002      	movs	r2, r0
100511e0:	6039      	str	r1, [r7, #0]
100511e2:	1dfb      	adds	r3, r7, #7
100511e4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
100511e6:	683b      	ldr	r3, [r7, #0]
100511e8:	681a      	ldr	r2, [r3, #0]
100511ea:	1dfb      	adds	r3, r7, #7
100511ec:	781b      	ldrb	r3, [r3, #0]
100511ee:	0011      	movs	r1, r2
100511f0:	0018      	movs	r0, r3
100511f2:	f7fe ff33 	bl	1005005c <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
100511f6:	683b      	ldr	r3, [r7, #0]
100511f8:	3304      	adds	r3, #4
100511fa:	681b      	ldr	r3, [r3, #0]
100511fc:	021a      	lsls	r2, r3, #8
100511fe:	683b      	ldr	r3, [r7, #0]
10051200:	681b      	ldr	r3, [r3, #0]
10051202:	0e1b      	lsrs	r3, r3, #24
10051204:	4313      	orrs	r3, r2
10051206:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10051208:	68fa      	ldr	r2, [r7, #12]
1005120a:	1dfb      	adds	r3, r7, #7
1005120c:	781b      	ldrb	r3, [r3, #0]
1005120e:	0011      	movs	r1, r2
10051210:	0018      	movs	r0, r3
10051212:	f7fe ff5f 	bl	100500d4 <LL_RADIO_SetPacketCounterRx_39_24>
}
10051216:	46c0      	nop			@ (mov r8, r8)
10051218:	46bd      	mov	sp, r7
1005121a:	b004      	add	sp, #16
1005121c:	bd80      	pop	{r7, pc}

1005121e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
1005121e:	b580      	push	{r7, lr}
10051220:	b084      	sub	sp, #16
10051222:	af00      	add	r7, sp, #0
10051224:	0002      	movs	r2, r0
10051226:	1dfb      	adds	r3, r7, #7
10051228:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
1005122a:	1dfb      	adds	r3, r7, #7
1005122c:	781b      	ldrb	r3, [r3, #0]
1005122e:	0018      	movs	r0, r3
10051230:	f7fe ff74 	bl	1005011c <LL_RADIO_GetPacketCounterRx_39_24>
10051234:	0002      	movs	r2, r0
10051236:	2380      	movs	r3, #128	@ 0x80
10051238:	021b      	lsls	r3, r3, #8
1005123a:	4313      	orrs	r3, r2
1005123c:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
1005123e:	68fa      	ldr	r2, [r7, #12]
10051240:	1dfb      	adds	r3, r7, #7
10051242:	781b      	ldrb	r3, [r3, #0]
10051244:	0011      	movs	r1, r2
10051246:	0018      	movs	r0, r3
10051248:	f7fe ff44 	bl	100500d4 <LL_RADIO_SetPacketCounterRx_39_24>
}
1005124c:	46c0      	nop			@ (mov r8, r8)
1005124e:	46bd      	mov	sp, r7
10051250:	b004      	add	sp, #16
10051252:	bd80      	pop	{r7, pc}

10051254 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10051254:	b580      	push	{r7, lr}
10051256:	b082      	sub	sp, #8
10051258:	af00      	add	r7, sp, #0
1005125a:	0002      	movs	r2, r0
1005125c:	1dfb      	adds	r3, r7, #7
1005125e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10051260:	1dfb      	adds	r3, r7, #7
10051262:	781b      	ldrb	r3, [r3, #0]
10051264:	0018      	movs	r0, r3
10051266:	f7fe fce3 	bl	1004fc30 <LL_RADIO_TxMode_Disable>
}
1005126a:	46c0      	nop			@ (mov r8, r8)
1005126c:	46bd      	mov	sp, r7
1005126e:	b002      	add	sp, #8
10051270:	bd80      	pop	{r7, pc}

10051272 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10051272:	b580      	push	{r7, lr}
10051274:	b082      	sub	sp, #8
10051276:	af00      	add	r7, sp, #0
10051278:	0002      	movs	r2, r0
1005127a:	6039      	str	r1, [r7, #0]
1005127c:	1dfb      	adds	r3, r7, #7
1005127e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10051280:	683a      	ldr	r2, [r7, #0]
10051282:	1dfb      	adds	r3, r7, #7
10051284:	781b      	ldrb	r3, [r3, #0]
10051286:	0011      	movs	r1, r2
10051288:	0018      	movs	r0, r3
1005128a:	f7fe fe71 	bl	1004ff70 <LL_RADIO_SetRcvPoint>
}
1005128e:	46c0      	nop			@ (mov r8, r8)
10051290:	46bd      	mov	sp, r7
10051292:	b002      	add	sp, #8
10051294:	bd80      	pop	{r7, pc}

10051296 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
10051296:	b580      	push	{r7, lr}
10051298:	b082      	sub	sp, #8
1005129a:	af00      	add	r7, sp, #0
1005129c:	0002      	movs	r2, r0
1005129e:	1dfb      	adds	r3, r7, #7
100512a0:	701a      	strb	r2, [r3, #0]
100512a2:	1dbb      	adds	r3, r7, #6
100512a4:	1c0a      	adds	r2, r1, #0
100512a6:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100512a8:	1dbb      	adds	r3, r7, #6
100512aa:	781a      	ldrb	r2, [r3, #0]
100512ac:	1dfb      	adds	r3, r7, #7
100512ae:	781b      	ldrb	r3, [r3, #0]
100512b0:	0011      	movs	r1, r2
100512b2:	0018      	movs	r0, r3
100512b4:	f7fe fdfe 	bl	1004feb4 <LL_RADIO_SetReceptionPhy>
}
100512b8:	46c0      	nop			@ (mov r8, r8)
100512ba:	46bd      	mov	sp, r7
100512bc:	b002      	add	sp, #8
100512be:	bd80      	pop	{r7, pc}

100512c0 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
100512c0:	b580      	push	{r7, lr}
100512c2:	b082      	sub	sp, #8
100512c4:	af00      	add	r7, sp, #0
100512c6:	0002      	movs	r2, r0
100512c8:	6039      	str	r1, [r7, #0]
100512ca:	1dfb      	adds	r3, r7, #7
100512cc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
100512ce:	683b      	ldr	r3, [r7, #0]
100512d0:	681a      	ldr	r2, [r3, #0]
100512d2:	1dfb      	adds	r3, r7, #7
100512d4:	781b      	ldrb	r3, [r3, #0]
100512d6:	0011      	movs	r1, r2
100512d8:	0018      	movs	r0, r3
100512da:	f7fe fe67 	bl	1004ffac <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
100512de:	683b      	ldr	r3, [r7, #0]
100512e0:	3304      	adds	r3, #4
100512e2:	681a      	ldr	r2, [r3, #0]
100512e4:	1dfb      	adds	r3, r7, #7
100512e6:	781b      	ldrb	r3, [r3, #0]
100512e8:	0011      	movs	r1, r2
100512ea:	0018      	movs	r0, r3
100512ec:	f7fe fe7c 	bl	1004ffe8 <LL_RADIO_SetPacketCounterTx_39_32>
}
100512f0:	46c0      	nop			@ (mov r8, r8)
100512f2:	46bd      	mov	sp, r7
100512f4:	b002      	add	sp, #8
100512f6:	bd80      	pop	{r7, pc}

100512f8 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
100512f8:	b580      	push	{r7, lr}
100512fa:	b084      	sub	sp, #16
100512fc:	af00      	add	r7, sp, #0
100512fe:	0002      	movs	r2, r0
10051300:	1dfb      	adds	r3, r7, #7
10051302:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10051304:	1dfb      	adds	r3, r7, #7
10051306:	781b      	ldrb	r3, [r3, #0]
10051308:	0018      	movs	r0, r3
1005130a:	f7fe fe91 	bl	10050030 <LL_RADIO_GetPacketCounterTx_39_32>
1005130e:	0003      	movs	r3, r0
10051310:	2280      	movs	r2, #128	@ 0x80
10051312:	4313      	orrs	r3, r2
10051314:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
10051316:	68fa      	ldr	r2, [r7, #12]
10051318:	1dfb      	adds	r3, r7, #7
1005131a:	781b      	ldrb	r3, [r3, #0]
1005131c:	0011      	movs	r1, r2
1005131e:	0018      	movs	r0, r3
10051320:	f7fe fe62 	bl	1004ffe8 <LL_RADIO_SetPacketCounterTx_39_32>
}
10051324:	46c0      	nop			@ (mov r8, r8)
10051326:	46bd      	mov	sp, r7
10051328:	b004      	add	sp, #16
1005132a:	bd80      	pop	{r7, pc}

1005132c <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
1005132c:	b580      	push	{r7, lr}
1005132e:	b082      	sub	sp, #8
10051330:	af00      	add	r7, sp, #0
10051332:	0002      	movs	r2, r0
10051334:	1dfb      	adds	r3, r7, #7
10051336:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10051338:	1dfb      	adds	r3, r7, #7
1005133a:	781b      	ldrb	r3, [r3, #0]
1005133c:	0018      	movs	r0, r3
1005133e:	f7fe fc59 	bl	1004fbf4 <LL_RADIO_TxMode_Enable>
}
10051342:	46c0      	nop			@ (mov r8, r8)
10051344:	46bd      	mov	sp, r7
10051346:	b002      	add	sp, #8
10051348:	bd80      	pop	{r7, pc}

1005134a <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005134a:	b580      	push	{r7, lr}
1005134c:	b082      	sub	sp, #8
1005134e:	af00      	add	r7, sp, #0
10051350:	0002      	movs	r2, r0
10051352:	6039      	str	r1, [r7, #0]
10051354:	1dfb      	adds	r3, r7, #7
10051356:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10051358:	683a      	ldr	r2, [r7, #0]
1005135a:	1dfb      	adds	r3, r7, #7
1005135c:	781b      	ldrb	r3, [r3, #0]
1005135e:	0011      	movs	r1, r2
10051360:	0018      	movs	r0, r3
10051362:	f7fe fde7 	bl	1004ff34 <LL_RADIO_SetTxPoint>
}
10051366:	46c0      	nop			@ (mov r8, r8)
10051368:	46bd      	mov	sp, r7
1005136a:	b002      	add	sp, #8
1005136c:	bd80      	pop	{r7, pc}

1005136e <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
1005136e:	b580      	push	{r7, lr}
10051370:	b082      	sub	sp, #8
10051372:	af00      	add	r7, sp, #0
10051374:	0002      	movs	r2, r0
10051376:	1dfb      	adds	r3, r7, #7
10051378:	701a      	strb	r2, [r3, #0]
1005137a:	1dbb      	adds	r3, r7, #6
1005137c:	1c0a      	adds	r2, r1, #0
1005137e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10051380:	1dbb      	adds	r3, r7, #6
10051382:	781a      	ldrb	r2, [r3, #0]
10051384:	1dfb      	adds	r3, r7, #7
10051386:	781b      	ldrb	r3, [r3, #0]
10051388:	0011      	movs	r1, r2
1005138a:	0018      	movs	r0, r3
1005138c:	f7fe fd2a 	bl	1004fde4 <LL_RADIO_SetTransmissionPhy>
}
10051390:	46c0      	nop			@ (mov r8, r8)
10051392:	46bd      	mov	sp, r7
10051394:	b002      	add	sp, #8
10051396:	bd80      	pop	{r7, pc}

10051398 <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10051398:	b580      	push	{r7, lr}
1005139a:	b082      	sub	sp, #8
1005139c:	af00      	add	r7, sp, #0
1005139e:	0002      	movs	r2, r0
100513a0:	1dfb      	adds	r3, r7, #7
100513a2:	701a      	strb	r2, [r3, #0]
100513a4:	1dbb      	adds	r3, r7, #6
100513a6:	1c0a      	adds	r2, r1, #0
100513a8:	701a      	strb	r2, [r3, #0]
  {
    LL_RADIO_TxHp_Disable(smNo);
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
100513aa:	1dbb      	adds	r3, r7, #6
100513ac:	781a      	ldrb	r2, [r3, #0]
100513ae:	1dfb      	adds	r3, r7, #7
100513b0:	781b      	ldrb	r3, [r3, #0]
100513b2:	0011      	movs	r1, r2
100513b4:	0018      	movs	r0, r3
100513b6:	f7fe ff7f 	bl	100502b8 <LL_RADIO_SetPAPower>
}
100513ba:	46c0      	nop			@ (mov r8, r8)
100513bc:	46bd      	mov	sp, r7
100513be:	b002      	add	sp, #8
100513c0:	bd80      	pop	{r7, pc}

100513c2 <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
100513c2:	b580      	push	{r7, lr}
100513c4:	b082      	sub	sp, #8
100513c6:	af00      	add	r7, sp, #0
100513c8:	0002      	movs	r2, r0
100513ca:	1dfb      	adds	r3, r7, #7
100513cc:	701a      	strb	r2, [r3, #0]
100513ce:	1dbb      	adds	r3, r7, #6
100513d0:	1c0a      	adds	r2, r1, #0
100513d2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
100513d4:	1dbb      	adds	r3, r7, #6
100513d6:	781a      	ldrb	r2, [r3, #0]
100513d8:	1dfb      	adds	r3, r7, #7
100513da:	781b      	ldrb	r3, [r3, #0]
100513dc:	0011      	movs	r1, r2
100513de:	0018      	movs	r0, r3
100513e0:	f7fe fba8 	bl	1004fb34 <LL_RADIO_SetUnmappedChannel>
}
100513e4:	46c0      	nop			@ (mov r8, r8)
100513e6:	46bd      	mov	sp, r7
100513e8:	b002      	add	sp, #8
100513ea:	bd80      	pop	{r7, pc}

100513ec <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
100513ec:	b580      	push	{r7, lr}
100513ee:	b082      	sub	sp, #8
100513f0:	af00      	add	r7, sp, #0
100513f2:	0002      	movs	r2, r0
100513f4:	1dfb      	adds	r3, r7, #7
100513f6:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
100513f8:	1dfb      	adds	r3, r7, #7
100513fa:	781b      	ldrb	r3, [r3, #0]
100513fc:	0018      	movs	r0, r3
100513fe:	f7fe fc91 	bl	1004fd24 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10051402:	46c0      	nop			@ (mov r8, r8)
10051404:	46bd      	mov	sp, r7
10051406:	b002      	add	sp, #8
10051408:	bd80      	pop	{r7, pc}

1005140a <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
1005140a:	b580      	push	{r7, lr}
1005140c:	b082      	sub	sp, #8
1005140e:	af00      	add	r7, sp, #0
10051410:	0002      	movs	r2, r0
10051412:	1dfb      	adds	r3, r7, #7
10051414:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
10051416:	1dfb      	adds	r3, r7, #7
10051418:	781b      	ldrb	r3, [r3, #0]
1005141a:	2b04      	cmp	r3, #4
1005141c:	d101      	bne.n	10051422 <BLEPLAT_CNTR_DemodDelaySt+0x18>
1005141e:	239d      	movs	r3, #157	@ 0x9d
10051420:	e000      	b.n	10051424 <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10051422:	2312      	movs	r3, #18
}
10051424:	0018      	movs	r0, r3
10051426:	46bd      	mov	sp, r7
10051428:	b002      	add	sp, #8
1005142a:	bd80      	pop	{r7, pc}

1005142c <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
1005142c:	b580      	push	{r7, lr}
1005142e:	b082      	sub	sp, #8
10051430:	af00      	add	r7, sp, #0
10051432:	0002      	movs	r2, r0
10051434:	1dfb      	adds	r3, r7, #7
10051436:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10051438:	46c0      	nop			@ (mov r8, r8)
1005143a:	46bd      	mov	sp, r7
1005143c:	b002      	add	sp, #8
1005143e:	bd80      	pop	{r7, pc}

10051440 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10051440:	b580      	push	{r7, lr}
10051442:	b082      	sub	sp, #8
10051444:	af00      	add	r7, sp, #0
10051446:	0002      	movs	r2, r0
10051448:	1dfb      	adds	r3, r7, #7
1005144a:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1005144c:	46c0      	nop			@ (mov r8, r8)
1005144e:	46bd      	mov	sp, r7
10051450:	b002      	add	sp, #8
10051452:	bd80      	pop	{r7, pc}

10051454 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10051454:	b580      	push	{r7, lr}
10051456:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10051458:	46c0      	nop			@ (mov r8, r8)
1005145a:	46bd      	mov	sp, r7
1005145c:	bd80      	pop	{r7, pc}
	...

10051460 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10051460:	b580      	push	{r7, lr}
10051462:	b090      	sub	sp, #64	@ 0x40
10051464:	af00      	add	r7, sp, #0
10051466:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10051468:	4b75      	ldr	r3, [pc, #468]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
1005146a:	681b      	ldr	r3, [r3, #0]
1005146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
1005146e:	4b74      	ldr	r3, [pc, #464]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
10051470:	681b      	ldr	r3, [r3, #0]
10051472:	687a      	ldr	r2, [r7, #4]
10051474:	401a      	ands	r2, r3
10051476:	4b72      	ldr	r3, [pc, #456]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
10051478:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
1005147a:	4b72      	ldr	r3, [pc, #456]	@ (10051644 <UTIL_SEQ_Run+0x1e4>)
1005147c:	681b      	ldr	r3, [r3, #0]
1005147e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10051480:	4b71      	ldr	r3, [pc, #452]	@ (10051648 <UTIL_SEQ_Run+0x1e8>)
10051482:	681b      	ldr	r3, [r3, #0]
10051484:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
10051486:	4b71      	ldr	r3, [pc, #452]	@ (1005164c <UTIL_SEQ_Run+0x1ec>)
10051488:	681b      	ldr	r3, [r3, #0]
1005148a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
1005148c:	4b70      	ldr	r3, [pc, #448]	@ (10051650 <UTIL_SEQ_Run+0x1f0>)
1005148e:	681b      	ldr	r3, [r3, #0]
10051490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10051492:	e090      	b.n	100515b6 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
10051494:	2300      	movs	r3, #0
10051496:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10051498:	e002      	b.n	100514a0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
1005149a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005149c:	3301      	adds	r3, #1
1005149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100514a0:	4b6c      	ldr	r3, [pc, #432]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
100514a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100514a4:	00d2      	lsls	r2, r2, #3
100514a6:	58d3      	ldr	r3, [r2, r3]
100514a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100514aa:	401a      	ands	r2, r3
100514ac:	4b64      	ldr	r3, [pc, #400]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
100514ae:	681b      	ldr	r3, [r3, #0]
100514b0:	4013      	ands	r3, r2
100514b2:	d0f2      	beq.n	1005149a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
100514b4:	4b67      	ldr	r3, [pc, #412]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
100514b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100514b8:	00d2      	lsls	r2, r2, #3
100514ba:	58d3      	ldr	r3, [r2, r3]
100514bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100514be:	401a      	ands	r2, r3
100514c0:	4b5f      	ldr	r3, [pc, #380]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
100514c2:	681b      	ldr	r3, [r3, #0]
100514c4:	4013      	ands	r3, r2
100514c6:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
100514c8:	4a62      	ldr	r2, [pc, #392]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
100514ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100514cc:	00db      	lsls	r3, r3, #3
100514ce:	18d3      	adds	r3, r2, r3
100514d0:	3304      	adds	r3, #4
100514d2:	681b      	ldr	r3, [r3, #0]
100514d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100514d6:	4013      	ands	r3, r2
100514d8:	d107      	bne.n	100514ea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
100514da:	4a5e      	ldr	r2, [pc, #376]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
100514dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100514de:	00db      	lsls	r3, r3, #3
100514e0:	18d3      	adds	r3, r2, r3
100514e2:	3304      	adds	r3, #4
100514e4:	2201      	movs	r2, #1
100514e6:	4252      	negs	r2, r2
100514e8:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
100514ea:	4a5a      	ldr	r2, [pc, #360]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
100514ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100514ee:	00db      	lsls	r3, r3, #3
100514f0:	18d3      	adds	r3, r2, r3
100514f2:	3304      	adds	r3, #4
100514f4:	681b      	ldr	r3, [r3, #0]
100514f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100514f8:	4013      	ands	r3, r2
100514fa:	0018      	movs	r0, r3
100514fc:	f000 f97c 	bl	100517f8 <SEQ_BitPosition>
10051500:	0003      	movs	r3, r0
10051502:	001a      	movs	r2, r3
10051504:	4b54      	ldr	r3, [pc, #336]	@ (10051658 <UTIL_SEQ_Run+0x1f8>)
10051506:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10051508:	4a52      	ldr	r2, [pc, #328]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
1005150a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005150c:	00db      	lsls	r3, r3, #3
1005150e:	18d3      	adds	r3, r2, r3
10051510:	3304      	adds	r3, #4
10051512:	681a      	ldr	r2, [r3, #0]
10051514:	4b50      	ldr	r3, [pc, #320]	@ (10051658 <UTIL_SEQ_Run+0x1f8>)
10051516:	681b      	ldr	r3, [r3, #0]
10051518:	2101      	movs	r1, #1
1005151a:	4099      	lsls	r1, r3
1005151c:	000b      	movs	r3, r1
1005151e:	43db      	mvns	r3, r3
10051520:	401a      	ands	r2, r3
10051522:	494c      	ldr	r1, [pc, #304]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
10051524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051526:	00db      	lsls	r3, r3, #3
10051528:	18cb      	adds	r3, r1, r3
1005152a:	3304      	adds	r3, #4
1005152c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005152e:	f3ef 8310 	mrs	r3, PRIMASK
10051532:	61bb      	str	r3, [r7, #24]
  return(result);
10051534:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10051536:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10051538:	b672      	cpsid	i
}
1005153a:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
1005153c:	4b46      	ldr	r3, [pc, #280]	@ (10051658 <UTIL_SEQ_Run+0x1f8>)
1005153e:	681b      	ldr	r3, [r3, #0]
10051540:	2201      	movs	r2, #1
10051542:	409a      	lsls	r2, r3
10051544:	0013      	movs	r3, r2
10051546:	43da      	mvns	r2, r3
10051548:	4b3e      	ldr	r3, [pc, #248]	@ (10051644 <UTIL_SEQ_Run+0x1e4>)
1005154a:	681b      	ldr	r3, [r3, #0]
1005154c:	401a      	ands	r2, r3
1005154e:	4b3d      	ldr	r3, [pc, #244]	@ (10051644 <UTIL_SEQ_Run+0x1e4>)
10051550:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10051552:	2302      	movs	r3, #2
10051554:	63fb      	str	r3, [r7, #60]	@ 0x3c
10051556:	e013      	b.n	10051580 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
10051558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005155a:	1e5a      	subs	r2, r3, #1
1005155c:	4b3d      	ldr	r3, [pc, #244]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
1005155e:	00d2      	lsls	r2, r2, #3
10051560:	58d1      	ldr	r1, [r2, r3]
10051562:	4b3d      	ldr	r3, [pc, #244]	@ (10051658 <UTIL_SEQ_Run+0x1f8>)
10051564:	681b      	ldr	r3, [r3, #0]
10051566:	2201      	movs	r2, #1
10051568:	409a      	lsls	r2, r3
1005156a:	0013      	movs	r3, r2
1005156c:	43db      	mvns	r3, r3
1005156e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10051570:	3a01      	subs	r2, #1
10051572:	4019      	ands	r1, r3
10051574:	4b37      	ldr	r3, [pc, #220]	@ (10051654 <UTIL_SEQ_Run+0x1f4>)
10051576:	00d2      	lsls	r2, r2, #3
10051578:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1005157a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005157c:	3b01      	subs	r3, #1
1005157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
10051580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051582:	2b00      	cmp	r3, #0
10051584:	d1e8      	bne.n	10051558 <UTIL_SEQ_Run+0xf8>
10051586:	6a3b      	ldr	r3, [r7, #32]
10051588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005158a:	697b      	ldr	r3, [r7, #20]
1005158c:	f383 8810 	msr	PRIMASK, r3
}
10051590:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
10051592:	4b31      	ldr	r3, [pc, #196]	@ (10051658 <UTIL_SEQ_Run+0x1f8>)
10051594:	681a      	ldr	r2, [r3, #0]
10051596:	4b31      	ldr	r3, [pc, #196]	@ (1005165c <UTIL_SEQ_Run+0x1fc>)
10051598:	0092      	lsls	r2, r2, #2
1005159a:	58d3      	ldr	r3, [r2, r3]
1005159c:	4798      	blx	r3

    local_taskset = TaskSet;
1005159e:	4b29      	ldr	r3, [pc, #164]	@ (10051644 <UTIL_SEQ_Run+0x1e4>)
100515a0:	681b      	ldr	r3, [r3, #0]
100515a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100515a4:	4b28      	ldr	r3, [pc, #160]	@ (10051648 <UTIL_SEQ_Run+0x1e8>)
100515a6:	681b      	ldr	r3, [r3, #0]
100515a8:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100515aa:	4b28      	ldr	r3, [pc, #160]	@ (1005164c <UTIL_SEQ_Run+0x1ec>)
100515ac:	681b      	ldr	r3, [r3, #0]
100515ae:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
100515b0:	4b27      	ldr	r3, [pc, #156]	@ (10051650 <UTIL_SEQ_Run+0x1f0>)
100515b2:	681b      	ldr	r3, [r3, #0]
100515b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100515b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100515b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100515ba:	401a      	ands	r2, r3
100515bc:	4b20      	ldr	r3, [pc, #128]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
100515be:	681b      	ldr	r3, [r3, #0]
100515c0:	4013      	ands	r3, r2
100515c2:	d004      	beq.n	100515ce <UTIL_SEQ_Run+0x16e>
100515c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100515c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100515c8:	4013      	ands	r3, r2
100515ca:	d100      	bne.n	100515ce <UTIL_SEQ_Run+0x16e>
100515cc:	e762      	b.n	10051494 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
100515ce:	4b22      	ldr	r3, [pc, #136]	@ (10051658 <UTIL_SEQ_Run+0x1f8>)
100515d0:	2201      	movs	r2, #1
100515d2:	4252      	negs	r2, r2
100515d4:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
100515d6:	4b1e      	ldr	r3, [pc, #120]	@ (10051650 <UTIL_SEQ_Run+0x1f0>)
100515d8:	681b      	ldr	r3, [r3, #0]
100515da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100515dc:	4013      	ands	r3, r2
100515de:	d127      	bne.n	10051630 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
100515e0:	f7f2 f9b1 	bl	10043946 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100515e4:	f3ef 8310 	mrs	r3, PRIMASK
100515e8:	613b      	str	r3, [r7, #16]
  return(result);
100515ea:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
100515ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100515ee:	b672      	cpsid	i
}
100515f0:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
100515f2:	4b14      	ldr	r3, [pc, #80]	@ (10051644 <UTIL_SEQ_Run+0x1e4>)
100515f4:	681b      	ldr	r3, [r3, #0]
100515f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100515f8:	4b13      	ldr	r3, [pc, #76]	@ (10051648 <UTIL_SEQ_Run+0x1e8>)
100515fa:	681b      	ldr	r3, [r3, #0]
100515fc:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100515fe:	4b13      	ldr	r3, [pc, #76]	@ (1005164c <UTIL_SEQ_Run+0x1ec>)
10051600:	681b      	ldr	r3, [r3, #0]
10051602:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
10051604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10051608:	401a      	ands	r2, r3
1005160a:	4b0d      	ldr	r3, [pc, #52]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
1005160c:	681b      	ldr	r3, [r3, #0]
1005160e:	4013      	ands	r3, r2
10051610:	d106      	bne.n	10051620 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
10051612:	4b0f      	ldr	r3, [pc, #60]	@ (10051650 <UTIL_SEQ_Run+0x1f0>)
10051614:	681b      	ldr	r3, [r3, #0]
10051616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10051618:	4013      	ands	r3, r2
1005161a:	d101      	bne.n	10051620 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
1005161c:	f7f2 f998 	bl	10043950 <UTIL_SEQ_Idle>
10051620:	69fb      	ldr	r3, [r7, #28]
10051622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051624:	68fb      	ldr	r3, [r7, #12]
10051626:	f383 8810 	msr	PRIMASK, r3
}
1005162a:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
1005162c:	f000 f8de 	bl	100517ec <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10051630:	4b03      	ldr	r3, [pc, #12]	@ (10051640 <UTIL_SEQ_Run+0x1e0>)
10051632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10051634:	601a      	str	r2, [r3, #0]

  return;
10051636:	46c0      	nop			@ (mov r8, r8)
}
10051638:	46bd      	mov	sp, r7
1005163a:	b010      	add	sp, #64	@ 0x40
1005163c:	bd80      	pop	{r7, pc}
1005163e:	46c0      	nop			@ (mov r8, r8)
10051640:	20001294 	.word	0x20001294
10051644:	20000e28 	.word	0x20000e28
10051648:	20000e2c 	.word	0x20000e2c
1005164c:	20001290 	.word	0x20001290
10051650:	20000e30 	.word	0x20000e30
10051654:	20000eb8 	.word	0x20000eb8
10051658:	20000e34 	.word	0x20000e34
1005165c:	20000e38 	.word	0x20000e38

10051660 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10051660:	b580      	push	{r7, lr}
10051662:	b088      	sub	sp, #32
10051664:	af00      	add	r7, sp, #0
10051666:	60f8      	str	r0, [r7, #12]
10051668:	60b9      	str	r1, [r7, #8]
1005166a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005166c:	f3ef 8310 	mrs	r3, PRIMASK
10051670:	617b      	str	r3, [r7, #20]
  return(result);
10051672:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
10051674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10051676:	b672      	cpsid	i
}
10051678:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
1005167a:	68fb      	ldr	r3, [r7, #12]
1005167c:	0018      	movs	r0, r3
1005167e:	f000 f8bb 	bl	100517f8 <SEQ_BitPosition>
10051682:	0003      	movs	r3, r0
10051684:	001a      	movs	r2, r3
10051686:	4b07      	ldr	r3, [pc, #28]	@ (100516a4 <UTIL_SEQ_RegTask+0x44>)
10051688:	0092      	lsls	r2, r2, #2
1005168a:	6879      	ldr	r1, [r7, #4]
1005168c:	50d1      	str	r1, [r2, r3]
1005168e:	69fb      	ldr	r3, [r7, #28]
10051690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051692:	69bb      	ldr	r3, [r7, #24]
10051694:	f383 8810 	msr	PRIMASK, r3
}
10051698:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
1005169a:	46c0      	nop			@ (mov r8, r8)
}
1005169c:	46bd      	mov	sp, r7
1005169e:	b008      	add	sp, #32
100516a0:	bd80      	pop	{r7, pc}
100516a2:	46c0      	nop			@ (mov r8, r8)
100516a4:	20000e38 	.word	0x20000e38

100516a8 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
100516a8:	b580      	push	{r7, lr}
100516aa:	b086      	sub	sp, #24
100516ac:	af00      	add	r7, sp, #0
100516ae:	6078      	str	r0, [r7, #4]
100516b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100516b2:	f3ef 8310 	mrs	r3, PRIMASK
100516b6:	60fb      	str	r3, [r7, #12]
  return(result);
100516b8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100516ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100516bc:	b672      	cpsid	i
}
100516be:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
100516c0:	4b0d      	ldr	r3, [pc, #52]	@ (100516f8 <UTIL_SEQ_SetTask+0x50>)
100516c2:	681a      	ldr	r2, [r3, #0]
100516c4:	687b      	ldr	r3, [r7, #4]
100516c6:	431a      	orrs	r2, r3
100516c8:	4b0b      	ldr	r3, [pc, #44]	@ (100516f8 <UTIL_SEQ_SetTask+0x50>)
100516ca:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
100516cc:	4b0b      	ldr	r3, [pc, #44]	@ (100516fc <UTIL_SEQ_SetTask+0x54>)
100516ce:	683a      	ldr	r2, [r7, #0]
100516d0:	00d2      	lsls	r2, r2, #3
100516d2:	58d2      	ldr	r2, [r2, r3]
100516d4:	687b      	ldr	r3, [r7, #4]
100516d6:	431a      	orrs	r2, r3
100516d8:	0011      	movs	r1, r2
100516da:	4b08      	ldr	r3, [pc, #32]	@ (100516fc <UTIL_SEQ_SetTask+0x54>)
100516dc:	683a      	ldr	r2, [r7, #0]
100516de:	00d2      	lsls	r2, r2, #3
100516e0:	50d1      	str	r1, [r2, r3]
100516e2:	697b      	ldr	r3, [r7, #20]
100516e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100516e6:	693b      	ldr	r3, [r7, #16]
100516e8:	f383 8810 	msr	PRIMASK, r3
}
100516ec:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
100516ee:	46c0      	nop			@ (mov r8, r8)
}
100516f0:	46bd      	mov	sp, r7
100516f2:	b006      	add	sp, #24
100516f4:	bd80      	pop	{r7, pc}
100516f6:	46c0      	nop			@ (mov r8, r8)
100516f8:	20000e28 	.word	0x20000e28
100516fc:	20000eb8 	.word	0x20000eb8

10051700 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10051700:	b580      	push	{r7, lr}
10051702:	b086      	sub	sp, #24
10051704:	af00      	add	r7, sp, #0
10051706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051708:	f3ef 8310 	mrs	r3, PRIMASK
1005170c:	60fb      	str	r3, [r7, #12]
  return(result);
1005170e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10051710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10051712:	b672      	cpsid	i
}
10051714:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
10051716:	4b08      	ldr	r3, [pc, #32]	@ (10051738 <UTIL_SEQ_SetEvt+0x38>)
10051718:	681a      	ldr	r2, [r3, #0]
1005171a:	687b      	ldr	r3, [r7, #4]
1005171c:	431a      	orrs	r2, r3
1005171e:	4b06      	ldr	r3, [pc, #24]	@ (10051738 <UTIL_SEQ_SetEvt+0x38>)
10051720:	601a      	str	r2, [r3, #0]
10051722:	697b      	ldr	r3, [r7, #20]
10051724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051726:	693b      	ldr	r3, [r7, #16]
10051728:	f383 8810 	msr	PRIMASK, r3
}
1005172c:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1005172e:	46c0      	nop			@ (mov r8, r8)
}
10051730:	46bd      	mov	sp, r7
10051732:	b006      	add	sp, #24
10051734:	bd80      	pop	{r7, pc}
10051736:	46c0      	nop			@ (mov r8, r8)
10051738:	20000e2c 	.word	0x20000e2c

1005173c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
1005173c:	b580      	push	{r7, lr}
1005173e:	b088      	sub	sp, #32
10051740:	af00      	add	r7, sp, #0
10051742:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
10051744:	4b1f      	ldr	r3, [pc, #124]	@ (100517c4 <UTIL_SEQ_WaitEvt+0x88>)
10051746:	681b      	ldr	r3, [r3, #0]
10051748:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
1005174a:	4b1e      	ldr	r3, [pc, #120]	@ (100517c4 <UTIL_SEQ_WaitEvt+0x88>)
1005174c:	681b      	ldr	r3, [r3, #0]
1005174e:	3301      	adds	r3, #1
10051750:	d102      	bne.n	10051758 <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
10051752:	2300      	movs	r3, #0
10051754:	61fb      	str	r3, [r7, #28]
10051756:	e005      	b.n	10051764 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
10051758:	4b1a      	ldr	r3, [pc, #104]	@ (100517c4 <UTIL_SEQ_WaitEvt+0x88>)
1005175a:	681b      	ldr	r3, [r3, #0]
1005175c:	2201      	movs	r2, #1
1005175e:	409a      	lsls	r2, r3
10051760:	0013      	movs	r3, r2
10051762:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
10051764:	4b18      	ldr	r3, [pc, #96]	@ (100517c8 <UTIL_SEQ_WaitEvt+0x8c>)
10051766:	681b      	ldr	r3, [r3, #0]
10051768:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
1005176a:	4b17      	ldr	r3, [pc, #92]	@ (100517c8 <UTIL_SEQ_WaitEvt+0x8c>)
1005176c:	687a      	ldr	r2, [r7, #4]
1005176e:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10051770:	e005      	b.n	1005177e <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
10051772:	687a      	ldr	r2, [r7, #4]
10051774:	69fb      	ldr	r3, [r7, #28]
10051776:	0011      	movs	r1, r2
10051778:	0018      	movs	r0, r3
1005177a:	f000 f829 	bl	100517d0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
1005177e:	4b13      	ldr	r3, [pc, #76]	@ (100517cc <UTIL_SEQ_WaitEvt+0x90>)
10051780:	681b      	ldr	r3, [r3, #0]
10051782:	687a      	ldr	r2, [r7, #4]
10051784:	4013      	ands	r3, r2
10051786:	d0f4      	beq.n	10051772 <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
10051788:	4b0e      	ldr	r3, [pc, #56]	@ (100517c4 <UTIL_SEQ_WaitEvt+0x88>)
1005178a:	69ba      	ldr	r2, [r7, #24]
1005178c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005178e:	f3ef 8310 	mrs	r3, PRIMASK
10051792:	60bb      	str	r3, [r7, #8]
  return(result);
10051794:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10051796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10051798:	b672      	cpsid	i
}
1005179a:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
1005179c:	687b      	ldr	r3, [r7, #4]
1005179e:	43da      	mvns	r2, r3
100517a0:	4b0a      	ldr	r3, [pc, #40]	@ (100517cc <UTIL_SEQ_WaitEvt+0x90>)
100517a2:	681b      	ldr	r3, [r3, #0]
100517a4:	401a      	ands	r2, r3
100517a6:	4b09      	ldr	r3, [pc, #36]	@ (100517cc <UTIL_SEQ_WaitEvt+0x90>)
100517a8:	601a      	str	r2, [r3, #0]
100517aa:	693b      	ldr	r3, [r7, #16]
100517ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100517ae:	68fb      	ldr	r3, [r7, #12]
100517b0:	f383 8810 	msr	PRIMASK, r3
}
100517b4:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
100517b6:	4b04      	ldr	r3, [pc, #16]	@ (100517c8 <UTIL_SEQ_WaitEvt+0x8c>)
100517b8:	697a      	ldr	r2, [r7, #20]
100517ba:	601a      	str	r2, [r3, #0]
  return;
100517bc:	46c0      	nop			@ (mov r8, r8)
}
100517be:	46bd      	mov	sp, r7
100517c0:	b008      	add	sp, #32
100517c2:	bd80      	pop	{r7, pc}
100517c4:	20000e34 	.word	0x20000e34
100517c8:	20000e30 	.word	0x20000e30
100517cc:	20000e2c 	.word	0x20000e2c

100517d0 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
100517d0:	b580      	push	{r7, lr}
100517d2:	b082      	sub	sp, #8
100517d4:	af00      	add	r7, sp, #0
100517d6:	6078      	str	r0, [r7, #4]
100517d8:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
100517da:	687b      	ldr	r3, [r7, #4]
100517dc:	43db      	mvns	r3, r3
100517de:	0018      	movs	r0, r3
100517e0:	f7ff fe3e 	bl	10051460 <UTIL_SEQ_Run>
  return;
100517e4:	46c0      	nop			@ (mov r8, r8)
}
100517e6:	46bd      	mov	sp, r7
100517e8:	b002      	add	sp, #8
100517ea:	bd80      	pop	{r7, pc}

100517ec <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
100517ec:	b580      	push	{r7, lr}
100517ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
100517f0:	46c0      	nop			@ (mov r8, r8)
}
100517f2:	46bd      	mov	sp, r7
100517f4:	bd80      	pop	{r7, pc}
	...

100517f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
100517f8:	b580      	push	{r7, lr}
100517fa:	b084      	sub	sp, #16
100517fc:	af00      	add	r7, sp, #0
100517fe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10051800:	210f      	movs	r1, #15
10051802:	187b      	adds	r3, r7, r1
10051804:	2200      	movs	r2, #0
10051806:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
10051808:	687b      	ldr	r3, [r7, #4]
1005180a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
1005180c:	68ba      	ldr	r2, [r7, #8]
1005180e:	2380      	movs	r3, #128	@ 0x80
10051810:	025b      	lsls	r3, r3, #9
10051812:	429a      	cmp	r2, r3
10051814:	d205      	bcs.n	10051822 <SEQ_BitPosition+0x2a>
10051816:	187b      	adds	r3, r7, r1
10051818:	2210      	movs	r2, #16
1005181a:	701a      	strb	r2, [r3, #0]
1005181c:	68bb      	ldr	r3, [r7, #8]
1005181e:	041b      	lsls	r3, r3, #16
10051820:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
10051822:	68ba      	ldr	r2, [r7, #8]
10051824:	2380      	movs	r3, #128	@ 0x80
10051826:	045b      	lsls	r3, r3, #17
10051828:	429a      	cmp	r2, r3
1005182a:	d208      	bcs.n	1005183e <SEQ_BitPosition+0x46>
1005182c:	220f      	movs	r2, #15
1005182e:	18bb      	adds	r3, r7, r2
10051830:	18ba      	adds	r2, r7, r2
10051832:	7812      	ldrb	r2, [r2, #0]
10051834:	3208      	adds	r2, #8
10051836:	701a      	strb	r2, [r3, #0]
10051838:	68bb      	ldr	r3, [r7, #8]
1005183a:	021b      	lsls	r3, r3, #8
1005183c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
1005183e:	68ba      	ldr	r2, [r7, #8]
10051840:	2380      	movs	r3, #128	@ 0x80
10051842:	055b      	lsls	r3, r3, #21
10051844:	429a      	cmp	r2, r3
10051846:	d208      	bcs.n	1005185a <SEQ_BitPosition+0x62>
10051848:	220f      	movs	r2, #15
1005184a:	18bb      	adds	r3, r7, r2
1005184c:	18ba      	adds	r2, r7, r2
1005184e:	7812      	ldrb	r2, [r2, #0]
10051850:	3204      	adds	r2, #4
10051852:	701a      	strb	r2, [r3, #0]
10051854:	68bb      	ldr	r3, [r7, #8]
10051856:	011b      	lsls	r3, r3, #4
10051858:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
1005185a:	68bb      	ldr	r3, [r7, #8]
1005185c:	0f1b      	lsrs	r3, r3, #28
1005185e:	4a08      	ldr	r2, [pc, #32]	@ (10051880 <SEQ_BitPosition+0x88>)
10051860:	5cd1      	ldrb	r1, [r2, r3]
10051862:	200f      	movs	r0, #15
10051864:	183b      	adds	r3, r7, r0
10051866:	183a      	adds	r2, r7, r0
10051868:	7812      	ldrb	r2, [r2, #0]
1005186a:	188a      	adds	r2, r1, r2
1005186c:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
1005186e:	183b      	adds	r3, r7, r0
10051870:	781b      	ldrb	r3, [r3, #0]
10051872:	221f      	movs	r2, #31
10051874:	1ad3      	subs	r3, r2, r3
10051876:	b2db      	uxtb	r3, r3
}
10051878:	0018      	movs	r0, r3
1005187a:	46bd      	mov	sp, r7
1005187c:	b004      	add	sp, #16
1005187e:	bd80      	pop	{r7, pc}
10051880:	10065fa4 	.word	0x10065fa4

10051884 <aci_gap_init>:
10051884:	b580      	push	{r7, lr}
10051886:	2802      	cmp	r0, #2
10051888:	d901      	bls.n	1005188e <aci_gap_init+0xa>
1005188a:	2012      	movs	r0, #18
1005188c:	bd80      	pop	{r7, pc}
1005188e:	f001 fc17 	bl	100530c0 <GAP_Init>
10051892:	bd80      	pop	{r7, pc}

10051894 <aci_gap_terminate_api>:
10051894:	b580      	push	{r7, lr}
10051896:	f001 fde9 	bl	1005346c <GAP_Terminate_Link>
1005189a:	bd80      	pop	{r7, pc}

1005189c <_aci_gap_lists_check>:
1005189c:	b5b0      	push	{r4, r5, r7, lr}
1005189e:	4604      	mov	r4, r0
100518a0:	7800      	ldrb	r0, [r0, #0]
100518a2:	2800      	cmp	r0, #0
100518a4:	d001      	beq.n	100518aa <_aci_gap_lists_check+0xe>
100518a6:	2804      	cmp	r0, #4
100518a8:	d301      	bcc.n	100518ae <_aci_gap_lists_check+0x12>
100518aa:	2012      	movs	r0, #18
100518ac:	e000      	b.n	100518b0 <_aci_gap_lists_check+0x14>
100518ae:	2000      	movs	r0, #0
100518b0:	2512      	movs	r5, #18
100518b2:	2a00      	cmp	r2, #0
100518b4:	462a      	mov	r2, r5
100518b6:	d000      	beq.n	100518ba <_aci_gap_lists_check+0x1e>
100518b8:	4602      	mov	r2, r0
100518ba:	2901      	cmp	r1, #1
100518bc:	d800      	bhi.n	100518c0 <_aci_gap_lists_check+0x24>
100518be:	4615      	mov	r5, r2
100518c0:	2d00      	cmp	r5, #0
100518c2:	d107      	bne.n	100518d4 <_aci_gap_lists_check+0x38>
100518c4:	f007 f9b1 	bl	10058c2a <llc_priv_controller_privacy_csr_ucfg_weak>
100518c8:	2800      	cmp	r0, #0
100518ca:	d103      	bne.n	100518d4 <_aci_gap_lists_check+0x38>
100518cc:	7820      	ldrb	r0, [r4, #0]
100518ce:	21fd      	movs	r1, #253	@ 0xfd
100518d0:	4001      	ands	r1, r0
100518d2:	7021      	strb	r1, [r4, #0]
100518d4:	4628      	mov	r0, r5
100518d6:	bdb0      	pop	{r4, r5, r7, pc}

100518d8 <aci_gap_configure_filter_accept_and_resolving_list>:
100518d8:	b5e0      	push	{r5, r6, r7, lr}
100518da:	a901      	add	r1, sp, #4
100518dc:	7008      	strb	r0, [r1, #0]
100518de:	2201      	movs	r2, #1
100518e0:	4608      	mov	r0, r1
100518e2:	4611      	mov	r1, r2
100518e4:	f7ff ffda 	bl	1005189c <_aci_gap_lists_check>
100518e8:	2800      	cmp	r0, #0
100518ea:	d000      	beq.n	100518ee <aci_gap_configure_filter_accept_and_resolving_list+0x16>
100518ec:	bd8c      	pop	{r2, r3, r7, pc}
100518ee:	a801      	add	r0, sp, #4
100518f0:	7800      	ldrb	r0, [r0, #0]
100518f2:	f001 fdd1 	bl	10053498 <GAP_configure_filter_accept_and_resolving_list>
100518f6:	bd8c      	pop	{r2, r3, r7, pc}

100518f8 <GAP_set_advertising_configuration_ucfg_weak>:
100518f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100518fa:	461c      	mov	r4, r3
100518fc:	4608      	mov	r0, r1
100518fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
10051900:	9103      	str	r1, [sp, #12]
10051902:	9909      	ldr	r1, [sp, #36]	@ 0x24
10051904:	9102      	str	r1, [sp, #8]
10051906:	9908      	ldr	r1, [sp, #32]
10051908:	9101      	str	r1, [sp, #4]
1005190a:	9907      	ldr	r1, [sp, #28]
1005190c:	9100      	str	r1, [sp, #0]
1005190e:	9b06      	ldr	r3, [sp, #24]
10051910:	4611      	mov	r1, r2
10051912:	4622      	mov	r2, r4
10051914:	f001 fea0 	bl	10053658 <GAP_set_legacy_advertising_configuration>
10051918:	b004      	add	sp, #16
1005191a:	bd10      	pop	{r4, pc}

1005191c <GAP_set_advertising_data_ucfg_weak>:
1005191c:	b580      	push	{r7, lr}
1005191e:	4619      	mov	r1, r3
10051920:	4610      	mov	r0, r2
10051922:	f002 f80d 	bl	10053940 <GAP_set_legacy_advertising_data>
10051926:	bd80      	pop	{r7, pc}

10051928 <GAP_set_advertising_enable_ucfg_weak>:
10051928:	b580      	push	{r7, lr}
1005192a:	f001 ff05 	bl	10053738 <GAP_set_legacy_advertising_enable>
1005192e:	bd80      	pop	{r7, pc}

10051930 <aci_gap_set_advertising_configuration>:
10051930:	b5f0      	push	{r4, r5, r6, r7, lr}
10051932:	b093      	sub	sp, #76	@ 0x4c
10051934:	461f      	mov	r7, r3
10051936:	4615      	mov	r5, r2
10051938:	460e      	mov	r6, r1
1005193a:	9012      	str	r0, [sp, #72]	@ 0x48
1005193c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005193e:	4608      	mov	r0, r1
10051940:	4611      	mov	r1, r2
10051942:	4622      	mov	r2, r4
10051944:	f001 fe5a 	bl	100535fc <GAP_check_discoverability_mode>
10051948:	2800      	cmp	r0, #0
1005194a:	d124      	bne.n	10051996 <aci_gap_set_advertising_configuration+0x66>
1005194c:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005194e:	900d      	str	r0, [sp, #52]	@ 0x34
10051950:	ab1f      	add	r3, sp, #124	@ 0x7c
10051952:	cb0d      	ldmia	r3, {r0, r2, r3}
10051954:	9011      	str	r0, [sp, #68]	@ 0x44
10051956:	981e      	ldr	r0, [sp, #120]	@ 0x78
10051958:	900f      	str	r0, [sp, #60]	@ 0x3c
1005195a:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005195c:	900e      	str	r0, [sp, #56]	@ 0x38
1005195e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10051960:	900c      	str	r0, [sp, #48]	@ 0x30
10051962:	991a      	ldr	r1, [sp, #104]	@ 0x68
10051964:	9819      	ldr	r0, [sp, #100]	@ 0x64
10051966:	9710      	str	r7, [sp, #64]	@ 0x40
10051968:	9f18      	ldr	r7, [sp, #96]	@ 0x60
1005196a:	9208      	str	r2, [sp, #32]
1005196c:	9309      	str	r3, [sp, #36]	@ 0x24
1005196e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10051970:	920a      	str	r2, [sp, #40]	@ 0x28
10051972:	9700      	str	r7, [sp, #0]
10051974:	9001      	str	r0, [sp, #4]
10051976:	9102      	str	r1, [sp, #8]
10051978:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005197a:	9003      	str	r0, [sp, #12]
1005197c:	9404      	str	r4, [sp, #16]
1005197e:	980e      	ldr	r0, [sp, #56]	@ 0x38
10051980:	9005      	str	r0, [sp, #20]
10051982:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10051984:	9006      	str	r0, [sp, #24]
10051986:	9811      	ldr	r0, [sp, #68]	@ 0x44
10051988:	9007      	str	r0, [sp, #28]
1005198a:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005198c:	4631      	mov	r1, r6
1005198e:	462a      	mov	r2, r5
10051990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10051992:	f7ff ffb1 	bl	100518f8 <GAP_set_advertising_configuration_ucfg_weak>
10051996:	b013      	add	sp, #76	@ 0x4c
10051998:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005199a <aci_gap_set_advertising_data>:
1005199a:	b580      	push	{r7, lr}
1005199c:	f7ff ffbe 	bl	1005191c <GAP_set_advertising_data_ucfg_weak>
100519a0:	bd80      	pop	{r7, pc}

100519a2 <aci_gap_set_advertising_enable>:
100519a2:	b580      	push	{r7, lr}
100519a4:	f7ff ffc0 	bl	10051928 <GAP_set_advertising_enable_ucfg_weak>
100519a8:	bd80      	pop	{r7, pc}

100519aa <aci_gap_set_io_capability_api>:
100519aa:	b580      	push	{r7, lr}
100519ac:	2804      	cmp	r0, #4
100519ae:	d901      	bls.n	100519b4 <aci_gap_set_io_capability_api+0xa>
100519b0:	2012      	movs	r0, #18
100519b2:	bd80      	pop	{r7, pc}
100519b4:	f00d fb26 	bl	1005f004 <smp_sap_aci_set_io_capabilities>
100519b8:	bd80      	pop	{r7, pc}
	...

100519bc <aci_gap_set_security_requirements_api>:
100519bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100519be:	b089      	sub	sp, #36	@ 0x24
100519c0:	4605      	mov	r5, r0
100519c2:	4608      	mov	r0, r1
100519c4:	4328      	orrs	r0, r5
100519c6:	2412      	movs	r4, #18
100519c8:	2801      	cmp	r0, #1
100519ca:	d836      	bhi.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519cc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
100519ce:	2f07      	cmp	r7, #7
100519d0:	d333      	bcc.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519d2:	2f10      	cmp	r7, #16
100519d4:	d831      	bhi.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519d6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100519d8:	2810      	cmp	r0, #16
100519da:	d82e      	bhi.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519dc:	42b8      	cmp	r0, r7
100519de:	d32c      	bcc.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519e0:	460e      	mov	r6, r1
100519e2:	9910      	ldr	r1, [sp, #64]	@ 0x40
100519e4:	2902      	cmp	r1, #2
100519e6:	d828      	bhi.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519e8:	9101      	str	r1, [sp, #4]
100519ea:	9002      	str	r0, [sp, #8]
100519ec:	9303      	str	r3, [sp, #12]
100519ee:	9204      	str	r2, [sp, #16]
100519f0:	f00d fd81 	bl	1005f4f6 <secure_connections_csr_ucfg_weak>
100519f4:	2801      	cmp	r0, #1
100519f6:	d106      	bne.n	10051a06 <aci_gap_set_security_requirements_api+0x4a>
100519f8:	9904      	ldr	r1, [sp, #16]
100519fa:	2902      	cmp	r1, #2
100519fc:	d81d      	bhi.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
100519fe:	9a03      	ldr	r2, [sp, #12]
10051a00:	2a01      	cmp	r2, #1
10051a02:	d907      	bls.n	10051a14 <aci_gap_set_security_requirements_api+0x58>
10051a04:	e019      	b.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
10051a06:	9a03      	ldr	r2, [sp, #12]
10051a08:	4610      	mov	r0, r2
10051a0a:	9904      	ldr	r1, [sp, #16]
10051a0c:	4308      	orrs	r0, r1
10051a0e:	d001      	beq.n	10051a14 <aci_gap_set_security_requirements_api+0x58>
10051a10:	2411      	movs	r4, #17
10051a12:	e012      	b.n	10051a3a <aci_gap_set_security_requirements_api+0x7e>
10051a14:	ac05      	add	r4, sp, #20
10051a16:	9801      	ldr	r0, [sp, #4]
10051a18:	7320      	strb	r0, [r4, #12]
10051a1a:	4809      	ldr	r0, [pc, #36]	@ (10051a40 <__arm_cp.1_0>)
10051a1c:	80e0      	strh	r0, [r4, #6]
10051a1e:	9802      	ldr	r0, [sp, #8]
10051a20:	7160      	strb	r0, [r4, #5]
10051a22:	7127      	strb	r7, [r4, #4]
10051a24:	70e2      	strb	r2, [r4, #3]
10051a26:	70a1      	strb	r1, [r4, #2]
10051a28:	7066      	strb	r6, [r4, #1]
10051a2a:	7025      	strb	r5, [r4, #0]
10051a2c:	f001 fcfe 	bl	1005342c <GAP_get_identity_address_type>
10051a30:	7360      	strb	r0, [r4, #13]
10051a32:	4620      	mov	r0, r4
10051a34:	f00d fb1c 	bl	1005f070 <smp_sap_aci_set_authentication_req>
10051a38:	4604      	mov	r4, r0
10051a3a:	4620      	mov	r0, r4
10051a3c:	b009      	add	sp, #36	@ 0x24
10051a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10051a40 <__arm_cp.1_0>:
10051a40:	00000707 	.word	0x00000707

10051a44 <aci_gap_passkey_resp_api>:
10051a44:	b580      	push	{r7, lr}
10051a46:	4a04      	ldr	r2, [pc, #16]	@ (10051a58 <__arm_cp.4_0>)
10051a48:	4291      	cmp	r1, r2
10051a4a:	d901      	bls.n	10051a50 <aci_gap_passkey_resp_api+0xc>
10051a4c:	2012      	movs	r0, #18
10051a4e:	bd80      	pop	{r7, pc}
10051a50:	f00d fb38 	bl	1005f0c4 <smp_sap_aci_passkey_response>
10051a54:	bd80      	pop	{r7, pc}
10051a56:	46c0      	nop			@ (mov r8, r8)

10051a58 <__arm_cp.4_0>:
10051a58:	000f423f 	.word	0x000f423f

10051a5c <aci_gatt_srv_add_service_api>:
10051a5c:	b580      	push	{r7, lr}
10051a5e:	f004 fa37 	bl	10055ed0 <GAT_srv_add_service>
10051a62:	bd80      	pop	{r7, pc}

10051a64 <aci_gatt_srv_get_service_handle_api>:
10051a64:	b580      	push	{r7, lr}
10051a66:	f004 fc71 	bl	1005634c <GAT_srv_get_service_handle>
10051a6a:	bd80      	pop	{r7, pc}

10051a6c <aci_gatt_srv_add_char_api>:
10051a6c:	b580      	push	{r7, lr}
10051a6e:	f004 fadf 	bl	10056030 <GAT_srv_add_characteristic>
10051a72:	bd80      	pop	{r7, pc}

10051a74 <aci_gatt_srv_get_char_decl_handle_api>:
10051a74:	b580      	push	{r7, lr}
10051a76:	f004 fc73 	bl	10056360 <GAT_srv_get_char_decl_handle>
10051a7a:	bd80      	pop	{r7, pc}

10051a7c <aci_gatt_srv_resp_api>:
10051a7c:	b51c      	push	{r2, r3, r4, lr}
10051a7e:	9c05      	ldr	r4, [sp, #20]
10051a80:	9401      	str	r4, [sp, #4]
10051a82:	9c04      	ldr	r4, [sp, #16]
10051a84:	9400      	str	r4, [sp, #0]
10051a86:	f004 fc59 	bl	1005633c <GAT_srv_resp>
10051a8a:	2000      	movs	r0, #0
10051a8c:	bd1c      	pop	{r2, r3, r4, pc}

10051a8e <configBitmapSet>:
10051a8e:	2000      	movs	r0, #0
10051a90:	4770      	bx	lr
	...

10051a94 <HAL_Write_ConfigData>:
10051a94:	b5f0      	push	{r4, r5, r6, r7, lr}
10051a96:	b087      	sub	sp, #28
10051a98:	4614      	mov	r4, r2
10051a9a:	460d      	mov	r5, r1
10051a9c:	4606      	mov	r6, r0
10051a9e:	4869      	ldr	r0, [pc, #420]	@ (10051c44 <__arm_cp.4_0>)
10051aa0:	6800      	ldr	r0, [r0, #0]
10051aa2:	2e00      	cmp	r6, #0
10051aa4:	d101      	bne.n	10051aaa <HAL_Write_ConfigData+0x16>
10051aa6:	2d06      	cmp	r5, #6
10051aa8:	d017      	beq.n	10051ada <HAL_Write_ConfigData+0x46>
10051aaa:	2e06      	cmp	r6, #6
10051aac:	d101      	bne.n	10051ab2 <HAL_Write_ConfigData+0x1e>
10051aae:	2d02      	cmp	r5, #2
10051ab0:	d013      	beq.n	10051ada <HAL_Write_ConfigData+0x46>
10051ab2:	2e08      	cmp	r6, #8
10051ab4:	d101      	bne.n	10051aba <HAL_Write_ConfigData+0x26>
10051ab6:	2d10      	cmp	r5, #16
10051ab8:	d00f      	beq.n	10051ada <HAL_Write_ConfigData+0x46>
10051aba:	2e18      	cmp	r6, #24
10051abc:	d101      	bne.n	10051ac2 <HAL_Write_ConfigData+0x2e>
10051abe:	2d10      	cmp	r5, #16
10051ac0:	d00b      	beq.n	10051ada <HAL_Write_ConfigData+0x46>
10051ac2:	2e28      	cmp	r6, #40	@ 0x28
10051ac4:	d101      	bne.n	10051aca <HAL_Write_ConfigData+0x36>
10051ac6:	2d02      	cmp	r5, #2
10051ac8:	d007      	beq.n	10051ada <HAL_Write_ConfigData+0x46>
10051aca:	2e2a      	cmp	r6, #42	@ 0x2a
10051acc:	d101      	bne.n	10051ad2 <HAL_Write_ConfigData+0x3e>
10051ace:	2d02      	cmp	r5, #2
10051ad0:	d003      	beq.n	10051ada <HAL_Write_ConfigData+0x46>
10051ad2:	2e2c      	cmp	r6, #44	@ 0x2c
10051ad4:	d109      	bne.n	10051aea <HAL_Write_ConfigData+0x56>
10051ad6:	2d01      	cmp	r5, #1
10051ad8:	d107      	bne.n	10051aea <HAL_Write_ConfigData+0x56>
10051ada:	1980      	adds	r0, r0, r6
10051adc:	4621      	mov	r1, r4
10051ade:	462a      	mov	r2, r5
10051ae0:	f7fd feb0 	bl	1004f844 <BLEPLAT_MemCpy>
10051ae4:	2000      	movs	r0, #0
10051ae6:	b007      	add	sp, #28
10051ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051aea:	2e2e      	cmp	r6, #46	@ 0x2e
10051aec:	d107      	bne.n	10051afe <HAL_Write_ConfigData+0x6a>
10051aee:	2d06      	cmp	r5, #6
10051af0:	d105      	bne.n	10051afe <HAL_Write_ConfigData+0x6a>
10051af2:	7961      	ldrb	r1, [r4, #5]
10051af4:	0989      	lsrs	r1, r1, #6
10051af6:	2903      	cmp	r1, #3
10051af8:	d2ef      	bcs.n	10051ada <HAL_Write_ConfigData+0x46>
10051afa:	2012      	movs	r0, #18
10051afc:	e7f3      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051afe:	2ed0      	cmp	r6, #208	@ 0xd0
10051b00:	d105      	bne.n	10051b0e <HAL_Write_ConfigData+0x7a>
10051b02:	2d01      	cmp	r5, #1
10051b04:	d103      	bne.n	10051b0e <HAL_Write_ConfigData+0x7a>
10051b06:	7820      	ldrb	r0, [r4, #0]
10051b08:	f7fa fa05 	bl	1004bf16 <smp_sap_scp_force_debug_key_usage_ucfg>
10051b0c:	e7eb      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051b0e:	2ed2      	cmp	r6, #210	@ 0xd2
10051b10:	d105      	bne.n	10051b1e <HAL_Write_ConfigData+0x8a>
10051b12:	2d01      	cmp	r5, #1
10051b14:	d103      	bne.n	10051b1e <HAL_Write_ConfigData+0x8a>
10051b16:	7821      	ldrb	r1, [r4, #0]
10051b18:	2236      	movs	r2, #54	@ 0x36
10051b1a:	5481      	strb	r1, [r0, r2]
10051b1c:	e7e2      	b.n	10051ae4 <HAL_Write_ConfigData+0x50>
10051b1e:	2ed5      	cmp	r6, #213	@ 0xd5
10051b20:	d10a      	bne.n	10051b38 <HAL_Write_ConfigData+0xa4>
10051b22:	2d04      	cmp	r5, #4
10051b24:	d108      	bne.n	10051b38 <HAL_Write_ConfigData+0xa4>
10051b26:	a802      	add	r0, sp, #8
10051b28:	2204      	movs	r2, #4
10051b2a:	4621      	mov	r1, r4
10051b2c:	f7fd fe8a 	bl	1004f844 <BLEPLAT_MemCpy>
10051b30:	9802      	ldr	r0, [sp, #8]
10051b32:	f7fa f9e3 	bl	1004befc <smp_debug_trudy__set_config_ucfg>
10051b36:	e7d6      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051b38:	f004 fe20 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10051b3c:	2d08      	cmp	r5, #8
10051b3e:	d123      	bne.n	10051b88 <HAL_Write_ConfigData+0xf4>
10051b40:	2ed1      	cmp	r6, #209	@ 0xd1
10051b42:	d121      	bne.n	10051b88 <HAL_Write_ConfigData+0xf4>
10051b44:	2801      	cmp	r0, #1
10051b46:	d11f      	bne.n	10051b88 <HAL_Write_ConfigData+0xf4>
10051b48:	a802      	add	r0, sp, #8
10051b4a:	9001      	str	r0, [sp, #4]
10051b4c:	2602      	movs	r6, #2
10051b4e:	4d3f      	ldr	r5, [pc, #252]	@ (10051c4c <__arm_cp.4_2>)
10051b50:	4621      	mov	r1, r4
10051b52:	4632      	mov	r2, r6
10051b54:	47a8      	blx	r5
10051b56:	1ca1      	adds	r1, r4, #2
10051b58:	af06      	add	r7, sp, #24
10051b5a:	4638      	mov	r0, r7
10051b5c:	4632      	mov	r2, r6
10051b5e:	47a8      	blx	r5
10051b60:	1d21      	adds	r1, r4, #4
10051b62:	ad05      	add	r5, sp, #20
10051b64:	4628      	mov	r0, r5
10051b66:	4632      	mov	r2, r6
10051b68:	4b38      	ldr	r3, [pc, #224]	@ (10051c4c <__arm_cp.4_2>)
10051b6a:	4798      	blx	r3
10051b6c:	1da1      	adds	r1, r4, #6
10051b6e:	ac04      	add	r4, sp, #16
10051b70:	4620      	mov	r0, r4
10051b72:	4632      	mov	r2, r6
10051b74:	4b35      	ldr	r3, [pc, #212]	@ (10051c4c <__arm_cp.4_2>)
10051b76:	4798      	blx	r3
10051b78:	8823      	ldrh	r3, [r4, #0]
10051b7a:	882a      	ldrh	r2, [r5, #0]
10051b7c:	8839      	ldrh	r1, [r7, #0]
10051b7e:	9801      	ldr	r0, [sp, #4]
10051b80:	8800      	ldrh	r0, [r0, #0]
10051b82:	f00b fa6d 	bl	1005d060 <ll_write_supported_data_ucfg_weak>
10051b86:	e7ae      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051b88:	2e30      	cmp	r6, #48	@ 0x30
10051b8a:	d105      	bne.n	10051b98 <HAL_Write_ConfigData+0x104>
10051b8c:	2d01      	cmp	r5, #1
10051b8e:	d103      	bne.n	10051b98 <HAL_Write_ConfigData+0x104>
10051b90:	7820      	ldrb	r0, [r4, #0]
10051b92:	f7fa f9e0 	bl	1004bf56 <llc_conn_multi_link_connection_ucfg>
10051b96:	e7a6      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051b98:	2ed3      	cmp	r6, #211	@ 0xd3
10051b9a:	d105      	bne.n	10051ba8 <HAL_Write_ConfigData+0x114>
10051b9c:	2d01      	cmp	r5, #1
10051b9e:	d103      	bne.n	10051ba8 <HAL_Write_ConfigData+0x114>
10051ba0:	7820      	ldrb	r0, [r4, #0]
10051ba2:	f00b f96b 	bl	1005ce7c <LL_force_chsel_1>
10051ba6:	e79e      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051ba8:	2eff      	cmp	r6, #255	@ 0xff
10051baa:	d10a      	bne.n	10051bc2 <HAL_Write_ConfigData+0x12e>
10051bac:	2d04      	cmp	r5, #4
10051bae:	d108      	bne.n	10051bc2 <HAL_Write_ConfigData+0x12e>
10051bb0:	a802      	add	r0, sp, #8
10051bb2:	2204      	movs	r2, #4
10051bb4:	4621      	mov	r1, r4
10051bb6:	f7fd fe45 	bl	1004f844 <BLEPLAT_MemCpy>
10051bba:	9802      	ldr	r0, [sp, #8]
10051bbc:	f7ff ff67 	bl	10051a8e <configBitmapSet>
10051bc0:	e00c      	b.n	10051bdc <HAL_Write_ConfigData+0x148>
10051bc2:	2efe      	cmp	r6, #254	@ 0xfe
10051bc4:	d10d      	bne.n	10051be2 <HAL_Write_ConfigData+0x14e>
10051bc6:	2d05      	cmp	r5, #5
10051bc8:	d10b      	bne.n	10051be2 <HAL_Write_ConfigData+0x14e>
10051bca:	ad02      	add	r5, sp, #8
10051bcc:	2205      	movs	r2, #5
10051bce:	4628      	mov	r0, r5
10051bd0:	4621      	mov	r1, r4
10051bd2:	f7fd fe37 	bl	1004f844 <BLEPLAT_MemCpy>
10051bd6:	4628      	mov	r0, r5
10051bd8:	f000 fb78 	bl	100522cc <log_verbosity_set_ucfg_weak>
10051bdc:	2800      	cmp	r0, #0
10051bde:	d181      	bne.n	10051ae4 <HAL_Write_ConfigData+0x50>
10051be0:	e78b      	b.n	10051afa <HAL_Write_ConfigData+0x66>
10051be2:	2e2f      	cmp	r6, #47	@ 0x2f
10051be4:	d105      	bne.n	10051bf2 <HAL_Write_ConfigData+0x15e>
10051be6:	2d01      	cmp	r5, #1
10051be8:	d103      	bne.n	10051bf2 <HAL_Write_ConfigData+0x15e>
10051bea:	7820      	ldrb	r0, [r4, #0]
10051bec:	f007 f85c 	bl	10058ca8 <llc_scan_set_scan_channel_bitmap>
10051bf0:	e779      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051bf2:	2e32      	cmp	r6, #50	@ 0x32
10051bf4:	d112      	bne.n	10051c1c <HAL_Write_ConfigData+0x188>
10051bf6:	2d02      	cmp	r5, #2
10051bf8:	d110      	bne.n	10051c1c <HAL_Write_ConfigData+0x188>
10051bfa:	ad02      	add	r5, sp, #8
10051bfc:	2202      	movs	r2, #2
10051bfe:	4628      	mov	r0, r5
10051c00:	4621      	mov	r1, r4
10051c02:	f7fd fe1f 	bl	1004f844 <BLEPLAT_MemCpy>
10051c06:	8828      	ldrh	r0, [r5, #0]
10051c08:	1e41      	subs	r1, r0, #1
10051c0a:	08c9      	lsrs	r1, r1, #3
10051c0c:	29e0      	cmp	r1, #224	@ 0xe0
10051c0e:	d900      	bls.n	10051c12 <HAL_Write_ConfigData+0x17e>
10051c10:	e773      	b.n	10051afa <HAL_Write_ConfigData+0x66>
10051c12:	490d      	ldr	r1, [pc, #52]	@ (10051c48 <__arm_cp.4_1>)
10051c14:	6809      	ldr	r1, [r1, #0]
10051c16:	225a      	movs	r2, #90	@ 0x5a
10051c18:	5288      	strh	r0, [r1, r2]
10051c1a:	e763      	b.n	10051ae4 <HAL_Write_ConfigData+0x50>
10051c1c:	2012      	movs	r0, #18
10051c1e:	2e33      	cmp	r6, #51	@ 0x33
10051c20:	d000      	beq.n	10051c24 <HAL_Write_ConfigData+0x190>
10051c22:	e760      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051c24:	2d01      	cmp	r5, #1
10051c26:	d000      	beq.n	10051c2a <HAL_Write_ConfigData+0x196>
10051c28:	e75d      	b.n	10051ae6 <HAL_Write_ConfigData+0x52>
10051c2a:	ad02      	add	r5, sp, #8
10051c2c:	2201      	movs	r2, #1
10051c2e:	4628      	mov	r0, r5
10051c30:	4621      	mov	r1, r4
10051c32:	f7fd fe07 	bl	1004f844 <BLEPLAT_MemCpy>
10051c36:	7828      	ldrb	r0, [r5, #0]
10051c38:	f001 fcd8 	bl	100535ec <GAP_enable_rpa_change_at_timeout>
10051c3c:	7828      	ldrb	r0, [r5, #0]
10051c3e:	f006 fffb 	bl	10058c38 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10051c42:	e74f      	b.n	10051ae4 <HAL_Write_ConfigData+0x50>

10051c44 <__arm_cp.4_0>:
10051c44:	20000ecc 	.word	0x20000ecc

10051c48 <__arm_cp.4_1>:
10051c48:	20000ed4 	.word	0x20000ed4

10051c4c <__arm_cp.4_2>:
10051c4c:	1004f845 	.word	0x1004f845

10051c50 <aci_hal_write_config_data>:
10051c50:	b580      	push	{r7, lr}
10051c52:	f7ff ff1f 	bl	10051a94 <HAL_Write_ConfigData>
10051c56:	bd80      	pop	{r7, pc}

10051c58 <aci_hal_set_tx_power_level>:
10051c58:	b580      	push	{r7, lr}
10051c5a:	f000 f801 	bl	10051c60 <HAL_Set_TX_Power_Level>
10051c5e:	bd80      	pop	{r7, pc}

10051c60 <HAL_Set_TX_Power_Level>:
10051c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10051c62:	460e      	mov	r6, r1
10051c64:	4605      	mov	r5, r0
10051c66:	2412      	movs	r4, #18
10051c68:	f7fd fe90 	bl	1004f98c <BLEPLAT_GetMaxPALevel>
10051c6c:	42b0      	cmp	r0, r6
10051c6e:	d317      	bcc.n	10051ca0 <HAL_Set_TX_Power_Level+0x40>
10051c70:	2d01      	cmp	r5, #1
10051c72:	d815      	bhi.n	10051ca0 <HAL_Set_TX_Power_Level+0x40>
10051c74:	480b      	ldr	r0, [pc, #44]	@ (10051ca4 <__arm_cp.11_0>)
10051c76:	6800      	ldr	r0, [r0, #0]
10051c78:	7a81      	ldrb	r1, [r0, #10]
10051c7a:	9100      	str	r1, [sp, #0]
10051c7c:	7285      	strb	r5, [r0, #10]
10051c7e:	7a47      	ldrb	r7, [r0, #9]
10051c80:	7246      	strb	r6, [r0, #9]
10051c82:	4628      	mov	r0, r5
10051c84:	f7fd fe92 	bl	1004f9ac <BLEPLAT_SetHighPower>
10051c88:	2400      	movs	r4, #0
10051c8a:	42b7      	cmp	r7, r6
10051c8c:	d102      	bne.n	10051c94 <HAL_Set_TX_Power_Level+0x34>
10051c8e:	9800      	ldr	r0, [sp, #0]
10051c90:	42a8      	cmp	r0, r5
10051c92:	d005      	beq.n	10051ca0 <HAL_Set_TX_Power_Level+0x40>
10051c94:	20ff      	movs	r0, #255	@ 0xff
10051c96:	227f      	movs	r2, #127	@ 0x7f
10051c98:	2101      	movs	r1, #1
10051c9a:	460b      	mov	r3, r1
10051c9c:	f009 fa5e 	bl	1005b15c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10051ca0:	4620      	mov	r0, r4
10051ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10051ca4 <__arm_cp.11_0>:
10051ca4:	20000f20 	.word	0x20000f20

10051ca8 <ble_HAL_Init>:
10051ca8:	b580      	push	{r7, lr}
10051caa:	4804      	ldr	r0, [pc, #16]	@ (10051cbc <__arm_cp.17_0>)
10051cac:	6800      	ldr	r0, [r0, #0]
10051cae:	3060      	adds	r0, #96	@ 0x60
10051cb0:	2100      	movs	r1, #0
10051cb2:	2204      	movs	r2, #4
10051cb4:	f7fd fdd6 	bl	1004f864 <BLEPLAT_MemSet>
10051cb8:	bd80      	pop	{r7, pc}
10051cba:	46c0      	nop			@ (mov r8, r8)

10051cbc <__arm_cp.17_0>:
10051cbc:	20000f20 	.word	0x20000f20

10051cc0 <hal_read_radio_activity_state>:
10051cc0:	b570      	push	{r4, r5, r6, lr}
10051cc2:	4603      	mov	r3, r0
10051cc4:	480a      	ldr	r0, [pc, #40]	@ (10051cf0 <__arm_cp.18_0>)
10051cc6:	6804      	ldr	r4, [r0, #0]
10051cc8:	f3ef 8010 	mrs	r0, PRIMASK
10051ccc:	b672      	cpsid	i
10051cce:	7d20      	ldrb	r0, [r4, #20]
10051cd0:	2500      	movs	r5, #0
10051cd2:	7525      	strb	r5, [r4, #20]
10051cd4:	7c25      	ldrb	r5, [r4, #16]
10051cd6:	260f      	movs	r6, #15
10051cd8:	402e      	ands	r6, r5
10051cda:	701e      	strb	r6, [r3, #0]
10051cdc:	7c23      	ldrb	r3, [r4, #16]
10051cde:	091b      	lsrs	r3, r3, #4
10051ce0:	700b      	strb	r3, [r1, #0]
10051ce2:	68e1      	ldr	r1, [r4, #12]
10051ce4:	6011      	str	r1, [r2, #0]
10051ce6:	1e41      	subs	r1, r0, #1
10051ce8:	4188      	sbcs	r0, r1
10051cea:	b662      	cpsie	i
10051cec:	bd70      	pop	{r4, r5, r6, pc}
10051cee:	46c0      	nop			@ (mov r8, r8)

10051cf0 <__arm_cp.18_0>:
10051cf0:	20000f20 	.word	0x20000f20

10051cf4 <hal_radio_activity_state_init>:
10051cf4:	4803      	ldr	r0, [pc, #12]	@ (10051d04 <__arm_cp.20_0>)
10051cf6:	6800      	ldr	r0, [r0, #0]
10051cf8:	2100      	movs	r1, #0
10051cfa:	7501      	strb	r1, [r0, #20]
10051cfc:	8241      	strh	r1, [r0, #18]
10051cfe:	7401      	strb	r1, [r0, #16]
10051d00:	4770      	bx	lr
10051d02:	46c0      	nop			@ (mov r8, r8)

10051d04 <__arm_cp.20_0>:
10051d04:	20000f20 	.word	0x20000f20

10051d08 <hal_radio_activity_state_cb_check>:
10051d08:	b510      	push	{r4, lr}
10051d0a:	b086      	sub	sp, #24
10051d0c:	4815      	ldr	r0, [pc, #84]	@ (10051d64 <__arm_cp.22_0>)
10051d0e:	6804      	ldr	r4, [r0, #0]
10051d10:	a802      	add	r0, sp, #8
10051d12:	a901      	add	r1, sp, #4
10051d14:	466a      	mov	r2, sp
10051d16:	f7ff ffd3 	bl	10051cc0 <hal_read_radio_activity_state>
10051d1a:	2800      	cmp	r0, #0
10051d1c:	d01f      	beq.n	10051d5e <hal_radio_activity_state_cb_check+0x56>
10051d1e:	a802      	add	r0, sp, #8
10051d20:	7801      	ldrb	r1, [r0, #0]
10051d22:	8a60      	ldrh	r0, [r4, #18]
10051d24:	40c8      	lsrs	r0, r1
10051d26:	07c0      	lsls	r0, r0, #31
10051d28:	d019      	beq.n	10051d5e <hal_radio_activity_state_cb_check+0x56>
10051d2a:	9a01      	ldr	r2, [sp, #4]
10051d2c:	9b00      	ldr	r3, [sp, #0]
10051d2e:	a803      	add	r0, sp, #12
10051d30:	2408      	movs	r4, #8
10051d32:	7084      	strb	r4, [r0, #2]
10051d34:	0e1c      	lsrs	r4, r3, #24
10051d36:	72c4      	strb	r4, [r0, #11]
10051d38:	0c1c      	lsrs	r4, r3, #16
10051d3a:	7284      	strb	r4, [r0, #10]
10051d3c:	0a1c      	lsrs	r4, r3, #8
10051d3e:	7244      	strb	r4, [r0, #9]
10051d40:	7203      	strb	r3, [r0, #8]
10051d42:	71c2      	strb	r2, [r0, #7]
10051d44:	7181      	strb	r1, [r0, #6]
10051d46:	21ff      	movs	r1, #255	@ 0xff
10051d48:	7041      	strb	r1, [r0, #1]
10051d4a:	2182      	movs	r1, #130	@ 0x82
10051d4c:	7001      	strb	r1, [r0, #0]
10051d4e:	2100      	movs	r1, #0
10051d50:	7141      	strb	r1, [r0, #5]
10051d52:	2204      	movs	r2, #4
10051d54:	7102      	strb	r2, [r0, #4]
10051d56:	70c1      	strb	r1, [r0, #3]
10051d58:	210c      	movs	r1, #12
10051d5a:	f7f9 ff67 	bl	1004bc2c <BLE_STACK_Event>
10051d5e:	b006      	add	sp, #24
10051d60:	bd10      	pop	{r4, pc}
10051d62:	46c0      	nop			@ (mov r8, r8)

10051d64 <__arm_cp.22_0>:
10051d64:	20000f20 	.word	0x20000f20

10051d68 <aci_l2cap_connection_parameter_update_req_api>:
10051d68:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10051d6a:	ac01      	add	r4, sp, #4
10051d6c:	9d08      	ldr	r5, [sp, #32]
10051d6e:	8125      	strh	r5, [r4, #8]
10051d70:	80e3      	strh	r3, [r4, #6]
10051d72:	80a2      	strh	r2, [r4, #4]
10051d74:	8061      	strh	r1, [r4, #2]
10051d76:	8020      	strh	r0, [r4, #0]
10051d78:	4620      	mov	r0, r4
10051d7a:	f004 fd0b 	bl	10056794 <L2C_build_connect_update_request>
10051d7e:	b004      	add	sp, #16
10051d80:	bdb0      	pop	{r4, r5, r7, pc}
	...

10051d84 <Acl_Init>:
10051d84:	4803      	ldr	r0, [pc, #12]	@ (10051d94 <__arm_cp.0_0>)
10051d86:	6800      	ldr	r0, [r0, #0]
10051d88:	2188      	movs	r1, #136	@ 0x88
10051d8a:	4a03      	ldr	r2, [pc, #12]	@ (10051d98 <__arm_cp.0_1>)
10051d8c:	5042      	str	r2, [r0, r1]
10051d8e:	2000      	movs	r0, #0
10051d90:	4770      	bx	lr
10051d92:	46c0      	nop			@ (mov r8, r8)

10051d94 <__arm_cp.0_0>:
10051d94:	20000f20 	.word	0x20000f20

10051d98 <__arm_cp.0_1>:
10051d98:	03030000 	.word	0x03030000

10051d9c <isr_Acl_Data_Indication_Queue_Full>:
10051d9c:	4805      	ldr	r0, [pc, #20]	@ (10051db4 <__arm_cp.1_0>)
10051d9e:	6800      	ldr	r0, [r0, #0]
10051da0:	2188      	movs	r1, #136	@ 0x88
10051da2:	5c41      	ldrb	r1, [r0, r1]
10051da4:	3088      	adds	r0, #136	@ 0x88
10051da6:	7880      	ldrb	r0, [r0, #2]
10051da8:	4281      	cmp	r1, r0
10051daa:	d801      	bhi.n	10051db0 <isr_Acl_Data_Indication_Queue_Full+0x14>
10051dac:	2000      	movs	r0, #0
10051dae:	4770      	bx	lr
10051db0:	2001      	movs	r0, #1
10051db2:	4770      	bx	lr

10051db4 <__arm_cp.1_0>:
10051db4:	20000f20 	.word	0x20000f20

10051db8 <isr_Acl_Data_TX_Cmpl_Queue_Full>:
10051db8:	4805      	ldr	r0, [pc, #20]	@ (10051dd0 <__arm_cp.2_0>)
10051dba:	6800      	ldr	r0, [r0, #0]
10051dbc:	2189      	movs	r1, #137	@ 0x89
10051dbe:	5c41      	ldrb	r1, [r0, r1]
10051dc0:	3089      	adds	r0, #137	@ 0x89
10051dc2:	7880      	ldrb	r0, [r0, #2]
10051dc4:	4281      	cmp	r1, r0
10051dc6:	d801      	bhi.n	10051dcc <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
10051dc8:	2000      	movs	r0, #0
10051dca:	4770      	bx	lr
10051dcc:	2001      	movs	r0, #1
10051dce:	4770      	bx	lr

10051dd0 <__arm_cp.2_0>:
10051dd0:	20000f20 	.word	0x20000f20

10051dd4 <Acl_Rcv_Pkt_Handler>:
10051dd4:	b510      	push	{r4, lr}
10051dd6:	4604      	mov	r4, r0
10051dd8:	480a      	ldr	r0, [pc, #40]	@ (10051e04 <__arm_cp.5_0>)
10051dda:	6800      	ldr	r0, [r0, #0]
10051ddc:	6900      	ldr	r0, [r0, #16]
10051dde:	2190      	movs	r1, #144	@ 0x90
10051de0:	2201      	movs	r2, #1
10051de2:	4613      	mov	r3, r2
10051de4:	f000 fa7a 	bl	100522dc <aci_event_fifo_push_header>
10051de8:	2800      	cmp	r0, #0
10051dea:	d004      	beq.n	10051df6 <Acl_Rcv_Pkt_Handler+0x22>
10051dec:	4601      	mov	r1, r0
10051dee:	6044      	str	r4, [r0, #4]
10051df0:	2090      	movs	r0, #144	@ 0x90
10051df2:	f000 fb10 	bl	10052416 <aci_event_fifo_push>
10051df6:	4804      	ldr	r0, [pc, #16]	@ (10051e08 <__arm_cp.5_1>)
10051df8:	6800      	ldr	r0, [r0, #0]
10051dfa:	2188      	movs	r1, #136	@ 0x88
10051dfc:	5c42      	ldrb	r2, [r0, r1]
10051dfe:	1c52      	adds	r2, r2, #1
10051e00:	5442      	strb	r2, [r0, r1]
10051e02:	bd10      	pop	{r4, pc}

10051e04 <__arm_cp.5_0>:
10051e04:	20000ed0 	.word	0x20000ed0

10051e08 <__arm_cp.5_1>:
10051e08:	20000f20 	.word	0x20000f20

10051e0c <Acl_Tx_Cmpl_Pkt_Handler>:
10051e0c:	b510      	push	{r4, lr}
10051e0e:	4604      	mov	r4, r0
10051e10:	7a00      	ldrb	r0, [r0, #8]
10051e12:	21f7      	movs	r1, #247	@ 0xf7
10051e14:	4001      	ands	r1, r0
10051e16:	7221      	strb	r1, [r4, #8]
10051e18:	480a      	ldr	r0, [pc, #40]	@ (10051e44 <__arm_cp.6_0>)
10051e1a:	6800      	ldr	r0, [r0, #0]
10051e1c:	6900      	ldr	r0, [r0, #16]
10051e1e:	2190      	movs	r1, #144	@ 0x90
10051e20:	2200      	movs	r2, #0
10051e22:	2301      	movs	r3, #1
10051e24:	f000 fa5a 	bl	100522dc <aci_event_fifo_push_header>
10051e28:	2800      	cmp	r0, #0
10051e2a:	d004      	beq.n	10051e36 <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10051e2c:	4601      	mov	r1, r0
10051e2e:	6044      	str	r4, [r0, #4]
10051e30:	2090      	movs	r0, #144	@ 0x90
10051e32:	f000 faf0 	bl	10052416 <aci_event_fifo_push>
10051e36:	4804      	ldr	r0, [pc, #16]	@ (10051e48 <__arm_cp.6_1>)
10051e38:	6800      	ldr	r0, [r0, #0]
10051e3a:	2189      	movs	r1, #137	@ 0x89
10051e3c:	5c42      	ldrb	r2, [r0, r1]
10051e3e:	1c52      	adds	r2, r2, #1
10051e40:	5442      	strb	r2, [r0, r1]
10051e42:	bd10      	pop	{r4, pc}

10051e44 <__arm_cp.6_0>:
10051e44:	20000ed0 	.word	0x20000ed0

10051e48 <__arm_cp.6_1>:
10051e48:	20000f20 	.word	0x20000f20

10051e4c <Acl_Transmit_Data>:
10051e4c:	b510      	push	{r4, lr}
10051e4e:	2400      	movs	r4, #0
10051e50:	61c4      	str	r4, [r0, #28]
10051e52:	f006 fc0f 	bl	10058674 <llc_conn_send_acl_data>
10051e56:	2884      	cmp	r0, #132	@ 0x84
10051e58:	d000      	beq.n	10051e5c <Acl_Transmit_Data+0x10>
10051e5a:	2481      	movs	r4, #129	@ 0x81
10051e5c:	4620      	mov	r0, r4
10051e5e:	bd10      	pop	{r4, pc}

10051e60 <hci_acl_data_tx_cmpl_event_int_cb>:
10051e60:	b5b0      	push	{r4, r5, r7, lr}
10051e62:	6809      	ldr	r1, [r1, #0]
10051e64:	2483      	movs	r4, #131	@ 0x83
10051e66:	2200      	movs	r2, #0
10051e68:	2900      	cmp	r1, #0
10051e6a:	d012      	beq.n	10051e92 <hci_acl_data_tx_cmpl_event_int_cb+0x32>
10051e6c:	69cd      	ldr	r5, [r1, #28]
10051e6e:	2400      	movs	r4, #0
10051e70:	61cc      	str	r4, [r1, #28]
10051e72:	7a08      	ldrb	r0, [r1, #8]
10051e74:	06c0      	lsls	r0, r0, #27
10051e76:	d403      	bmi.n	10051e80 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
10051e78:	2000      	movs	r0, #0
10051e7a:	f004 ff87 	bl	10056d8c <L2C_mux_acl_packet>
10051e7e:	e002      	b.n	10051e86 <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10051e80:	4608      	mov	r0, r1
10051e82:	f004 faab 	bl	100563dc <hci_tx_acl_data_done>
10051e86:	2201      	movs	r2, #1
10051e88:	2800      	cmp	r0, #0
10051e8a:	4629      	mov	r1, r5
10051e8c:	d0ec      	beq.n	10051e68 <hci_acl_data_tx_cmpl_event_int_cb+0x8>
10051e8e:	2483      	movs	r4, #131	@ 0x83
10051e90:	e00c      	b.n	10051eac <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10051e92:	07d0      	lsls	r0, r2, #31
10051e94:	d00a      	beq.n	10051eac <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10051e96:	f3ef 8010 	mrs	r0, PRIMASK
10051e9a:	b672      	cpsid	i
10051e9c:	4804      	ldr	r0, [pc, #16]	@ (10051eb0 <__arm_cp.9_0>)
10051e9e:	6800      	ldr	r0, [r0, #0]
10051ea0:	2189      	movs	r1, #137	@ 0x89
10051ea2:	5c42      	ldrb	r2, [r0, r1]
10051ea4:	1e52      	subs	r2, r2, #1
10051ea6:	5442      	strb	r2, [r0, r1]
10051ea8:	b662      	cpsie	i
10051eaa:	2400      	movs	r4, #0
10051eac:	b2e0      	uxtb	r0, r4
10051eae:	bdb0      	pop	{r4, r5, r7, pc}

10051eb0 <__arm_cp.9_0>:
10051eb0:	20000f20 	.word	0x20000f20

10051eb4 <hci_acl_data_ind_event_int_cb>:
10051eb4:	b580      	push	{r7, lr}
10051eb6:	480e      	ldr	r0, [pc, #56]	@ (10051ef0 <__arm_cp.11_0>)
10051eb8:	6800      	ldr	r0, [r0, #0]
10051eba:	222c      	movs	r2, #44	@ 0x2c
10051ebc:	5c80      	ldrb	r0, [r0, r2]
10051ebe:	07c0      	lsls	r0, r0, #31
10051ec0:	6808      	ldr	r0, [r1, #0]
10051ec2:	d102      	bne.n	10051eca <hci_acl_data_ind_event_int_cb+0x16>
10051ec4:	f004 fed4 	bl	10056c70 <L2C_receive_data>
10051ec8:	e001      	b.n	10051ece <hci_acl_data_ind_event_int_cb+0x1a>
10051eca:	f004 fa53 	bl	10056374 <hci_rx_acl_data>
10051ece:	2800      	cmp	r0, #0
10051ed0:	d001      	beq.n	10051ed6 <hci_acl_data_ind_event_int_cb+0x22>
10051ed2:	2083      	movs	r0, #131	@ 0x83
10051ed4:	bd80      	pop	{r7, pc}
10051ed6:	f3ef 8010 	mrs	r0, PRIMASK
10051eda:	b672      	cpsid	i
10051edc:	4805      	ldr	r0, [pc, #20]	@ (10051ef4 <__arm_cp.11_1>)
10051ede:	6800      	ldr	r0, [r0, #0]
10051ee0:	2188      	movs	r1, #136	@ 0x88
10051ee2:	5c42      	ldrb	r2, [r0, r1]
10051ee4:	1e52      	subs	r2, r2, #1
10051ee6:	5442      	strb	r2, [r0, r1]
10051ee8:	b662      	cpsie	i
10051eea:	2000      	movs	r0, #0
10051eec:	bd80      	pop	{r7, pc}
10051eee:	46c0      	nop			@ (mov r8, r8)

10051ef0 <__arm_cp.11_0>:
10051ef0:	20000ecc 	.word	0x20000ecc

10051ef4 <__arm_cp.11_1>:
10051ef4:	20000f20 	.word	0x20000f20

10051ef8 <ACL_pkt_init>:
10051ef8:	b570      	push	{r4, r5, r6, lr}
10051efa:	4c0b      	ldr	r4, [pc, #44]	@ (10051f28 <__arm_cp.1_0>)
10051efc:	2501      	movs	r5, #1
10051efe:	2204      	movs	r2, #4
10051f00:	4620      	mov	r0, r4
10051f02:	4629      	mov	r1, r5
10051f04:	f00b ff4c 	bl	1005dda0 <csmem_mem_assign>
10051f08:	4e08      	ldr	r6, [pc, #32]	@ (10051f2c <__arm_cp.1_1>)
10051f0a:	6030      	str	r0, [r6, #0]
10051f0c:	2206      	movs	r2, #6
10051f0e:	4620      	mov	r0, r4
10051f10:	4629      	mov	r1, r5
10051f12:	f00b ff45 	bl	1005dda0 <csmem_mem_assign>
10051f16:	6831      	ldr	r1, [r6, #0]
10051f18:	6008      	str	r0, [r1, #0]
10051f1a:	6830      	ldr	r0, [r6, #0]
10051f1c:	6801      	ldr	r1, [r0, #0]
10051f1e:	2000      	movs	r0, #0
10051f20:	8088      	strh	r0, [r1, #4]
10051f22:	8048      	strh	r0, [r1, #2]
10051f24:	7008      	strb	r0, [r1, #0]
10051f26:	bd70      	pop	{r4, r5, r6, pc}

10051f28 <__arm_cp.1_0>:
10051f28:	20000f30 	.word	0x20000f30

10051f2c <__arm_cp.1_1>:
10051f2c:	20000ec8 	.word	0x20000ec8

10051f30 <ACL_pkt_get>:
10051f30:	b5b0      	push	{r4, r5, r7, lr}
10051f32:	460d      	mov	r5, r1
10051f34:	4604      	mov	r4, r0
10051f36:	1e41      	subs	r1, r0, #1
10051f38:	4188      	sbcs	r0, r1
10051f3a:	1e51      	subs	r1, r2, #1
10051f3c:	221f      	movs	r2, #31
10051f3e:	430a      	orrs	r2, r1
10051f40:	3221      	adds	r2, #33	@ 0x21
10051f42:	b291      	uxth	r1, r2
10051f44:	f00b fe0a 	bl	1005db5c <MBM_get>
10051f48:	2800      	cmp	r0, #0
10051f4a:	d006      	beq.n	10051f5a <ACL_pkt_get+0x2a>
10051f4c:	8085      	strh	r5, [r0, #4]
10051f4e:	6801      	ldr	r1, [r0, #0]
10051f50:	6081      	str	r1, [r0, #8]
10051f52:	2c00      	cmp	r4, #0
10051f54:	d103      	bne.n	10051f5e <ACL_pkt_get+0x2e>
10051f56:	2140      	movs	r1, #64	@ 0x40
10051f58:	e003      	b.n	10051f62 <ACL_pkt_get+0x32>
10051f5a:	2000      	movs	r0, #0
10051f5c:	bdb0      	pop	{r4, r5, r7, pc}
10051f5e:	217f      	movs	r1, #127	@ 0x7f
10051f60:	43c9      	mvns	r1, r1
10051f62:	7301      	strb	r1, [r0, #12]
10051f64:	1d00      	adds	r0, r0, #4
10051f66:	bdb0      	pop	{r4, r5, r7, pc}

10051f68 <ACL_pkt_get_available_mem_buffers>:
10051f68:	b580      	push	{r7, lr}
10051f6a:	1e41      	subs	r1, r0, #1
10051f6c:	4188      	sbcs	r0, r1
10051f6e:	f00b fe5d 	bl	1005dc2c <MBM_get_available_mem_buffers>
10051f72:	bd80      	pop	{r7, pc}

10051f74 <ACL_pkt_release>:
10051f74:	b580      	push	{r7, lr}
10051f76:	7a01      	ldrb	r1, [r0, #8]
10051f78:	098a      	lsrs	r2, r1, #6
10051f7a:	2101      	movs	r1, #1
10051f7c:	4391      	bics	r1, r2
10051f7e:	1f00      	subs	r0, r0, #4
10051f80:	f00b fe26 	bl	1005dbd0 <MBM_release>
10051f84:	bd80      	pop	{r7, pc}

10051f86 <ACL_pkt_resize>:
10051f86:	b580      	push	{r7, lr}
10051f88:	460a      	mov	r2, r1
10051f8a:	7a01      	ldrb	r1, [r0, #8]
10051f8c:	098b      	lsrs	r3, r1, #6
10051f8e:	2101      	movs	r1, #1
10051f90:	4399      	bics	r1, r3
10051f92:	6840      	ldr	r0, [r0, #4]
10051f94:	f00b fe5e 	bl	1005dc54 <MBM_resize>
10051f98:	bd80      	pop	{r7, pc}

10051f9a <ACL_pkt_cmp>:
10051f9a:	b510      	push	{r4, lr}
10051f9c:	4614      	mov	r4, r2
10051f9e:	460a      	mov	r2, r1
10051fa0:	6840      	ldr	r0, [r0, #4]
10051fa2:	4619      	mov	r1, r3
10051fa4:	4623      	mov	r3, r4
10051fa6:	f00c f82f 	bl	1005e008 <Mem_Buff_cmp>
10051faa:	bd10      	pop	{r4, pc}

10051fac <ACL_pkt_read>:
10051fac:	b510      	push	{r4, lr}
10051fae:	4614      	mov	r4, r2
10051fb0:	460a      	mov	r2, r1
10051fb2:	6840      	ldr	r0, [r0, #4]
10051fb4:	4619      	mov	r1, r3
10051fb6:	4623      	mov	r3, r4
10051fb8:	f00b ffed 	bl	1005df96 <Mem_Buff_read>
10051fbc:	bd10      	pop	{r4, pc}

10051fbe <ACL_pkt_read_16b>:
10051fbe:	b5e0      	push	{r5, r6, r7, lr}
10051fc0:	2202      	movs	r2, #2
10051fc2:	ab01      	add	r3, sp, #4
10051fc4:	f7ff fff2 	bl	10051fac <ACL_pkt_read>
10051fc8:	2800      	cmp	r0, #0
10051fca:	d001      	beq.n	10051fd0 <ACL_pkt_read_16b+0x12>
10051fcc:	2000      	movs	r0, #0
10051fce:	e004      	b.n	10051fda <ACL_pkt_read_16b+0x1c>
10051fd0:	a801      	add	r0, sp, #4
10051fd2:	7801      	ldrb	r1, [r0, #0]
10051fd4:	7840      	ldrb	r0, [r0, #1]
10051fd6:	0200      	lsls	r0, r0, #8
10051fd8:	1840      	adds	r0, r0, r1
10051fda:	b280      	uxth	r0, r0
10051fdc:	bd8c      	pop	{r2, r3, r7, pc}

10051fde <ACL_pkt_write_16b>:
10051fde:	b5e0      	push	{r5, r6, r7, lr}
10051fe0:	ab01      	add	r3, sp, #4
10051fe2:	701a      	strb	r2, [r3, #0]
10051fe4:	0a12      	lsrs	r2, r2, #8
10051fe6:	705a      	strb	r2, [r3, #1]
10051fe8:	2202      	movs	r2, #2
10051fea:	f000 f801 	bl	10051ff0 <ACL_pkt_write>
10051fee:	bd8c      	pop	{r2, r3, r7, pc}

10051ff0 <ACL_pkt_write>:
10051ff0:	b510      	push	{r4, lr}
10051ff2:	4614      	mov	r4, r2
10051ff4:	460a      	mov	r2, r1
10051ff6:	6840      	ldr	r0, [r0, #4]
10051ff8:	4619      	mov	r1, r3
10051ffa:	4623      	mov	r3, r4
10051ffc:	f00b ff91 	bl	1005df22 <Mem_Buff_write>
10052000:	bd10      	pop	{r4, pc}

10052002 <ACL_pkt_extract_pdu>:
10052002:	1f01      	subs	r1, r0, #4
10052004:	2200      	movs	r2, #0
10052006:	600a      	str	r2, [r1, #0]
10052008:	6840      	ldr	r0, [r0, #4]
1005200a:	4770      	bx	lr

1005200c <ACL_pkt_connection>:
1005200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005200e:	480f      	ldr	r0, [pc, #60]	@ (1005204c <__arm_cp.14_0>)
10052010:	6800      	ldr	r0, [r0, #0]
10052012:	6805      	ldr	r5, [r0, #0]
10052014:	7828      	ldrb	r0, [r5, #0]
10052016:	1c41      	adds	r1, r0, #1
10052018:	7029      	strb	r1, [r5, #0]
1005201a:	4f0d      	ldr	r7, [pc, #52]	@ (10052050 <__arm_cp.14_1>)
1005201c:	8a39      	ldrh	r1, [r7, #16]
1005201e:	3125      	adds	r1, #37	@ 0x25
10052020:	094e      	lsrs	r6, r1, #5
10052022:	1c74      	adds	r4, r6, #1
10052024:	2800      	cmp	r0, #0
10052026:	d109      	bne.n	1005203c <ACL_pkt_connection+0x30>
10052028:	2000      	movs	r0, #0
1005202a:	4621      	mov	r1, r4
1005202c:	f00b fe4e 	bl	1005dccc <MBM_reserve>
10052030:	8a38      	ldrh	r0, [r7, #16]
10052032:	3025      	adds	r0, #37	@ 0x25
10052034:	0940      	lsrs	r0, r0, #5
10052036:	1c40      	adds	r0, r0, #1
10052038:	8068      	strh	r0, [r5, #2]
1005203a:	1cb4      	adds	r4, r6, #2
1005203c:	2001      	movs	r0, #1
1005203e:	4621      	mov	r1, r4
10052040:	f00b fe44 	bl	1005dccc <MBM_reserve>
10052044:	88a8      	ldrh	r0, [r5, #4]
10052046:	1900      	adds	r0, r0, r4
10052048:	80a8      	strh	r0, [r5, #4]
1005204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005204c <__arm_cp.14_0>:
1005204c:	20000ec8 	.word	0x20000ec8

10052050 <__arm_cp.14_1>:
10052050:	20000f34 	.word	0x20000f34

10052054 <ACL_pkt_disconnection>:
10052054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052056:	480e      	ldr	r0, [pc, #56]	@ (10052090 <__arm_cp.15_0>)
10052058:	6800      	ldr	r0, [r0, #0]
1005205a:	6806      	ldr	r6, [r0, #0]
1005205c:	7830      	ldrb	r0, [r6, #0]
1005205e:	1e40      	subs	r0, r0, #1
10052060:	7030      	strb	r0, [r6, #0]
10052062:	490c      	ldr	r1, [pc, #48]	@ (10052094 <__arm_cp.15_1>)
10052064:	8a09      	ldrh	r1, [r1, #16]
10052066:	3125      	adds	r1, #37	@ 0x25
10052068:	094f      	lsrs	r7, r1, #5
1005206a:	1c7c      	adds	r4, r7, #1
1005206c:	0600      	lsls	r0, r0, #24
1005206e:	d106      	bne.n	1005207e <ACL_pkt_disconnection+0x2a>
10052070:	2500      	movs	r5, #0
10052072:	4628      	mov	r0, r5
10052074:	4621      	mov	r1, r4
10052076:	f00b fe7d 	bl	1005dd74 <MBM_unreserve>
1005207a:	8075      	strh	r5, [r6, #2]
1005207c:	1cbc      	adds	r4, r7, #2
1005207e:	2001      	movs	r0, #1
10052080:	4621      	mov	r1, r4
10052082:	f00b fe77 	bl	1005dd74 <MBM_unreserve>
10052086:	88b0      	ldrh	r0, [r6, #4]
10052088:	1b00      	subs	r0, r0, r4
1005208a:	80b0      	strh	r0, [r6, #4]
1005208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005208e:	46c0      	nop			@ (mov r8, r8)

10052090 <__arm_cp.15_0>:
10052090:	20000ec8 	.word	0x20000ec8

10052094 <__arm_cp.15_1>:
10052094:	20000f34 	.word	0x20000f34

10052098 <BLE_STACK_Tick>:
10052098:	b580      	push	{r7, lr}
1005209a:	f00d fc35 	bl	1005f908 <tsk_scheduler>
1005209e:	bd80      	pop	{r7, pc}

100520a0 <BlueNRG_Stack_Initialize_Layers>:
100520a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100520a2:	b08f      	sub	sp, #60	@ 0x3c
100520a4:	9309      	str	r3, [sp, #36]	@ 0x24
100520a6:	920b      	str	r2, [sp, #44]	@ 0x2c
100520a8:	910a      	str	r1, [sp, #40]	@ 0x28
100520aa:	9008      	str	r0, [sp, #32]
100520ac:	f00b fe72 	bl	1005dd94 <csmem_init>
100520b0:	2401      	movs	r4, #1
100520b2:	2138      	movs	r1, #56	@ 0x38
100520b4:	4620      	mov	r0, r4
100520b6:	f00b fe85 	bl	1005ddc4 <csmem_mem_0_assign>
100520ba:	4933      	ldr	r1, [pc, #204]	@ (10052188 <__arm_cp.1_0>)
100520bc:	7ac9      	ldrb	r1, [r1, #11]
100520be:	2234      	movs	r2, #52	@ 0x34
100520c0:	5481      	strb	r1, [r0, r2]
100520c2:	4e32      	ldr	r6, [pc, #200]	@ (1005218c <__arm_cp.1_1>)
100520c4:	6030      	str	r0, [r6, #0]
100520c6:	2700      	movs	r7, #0
100520c8:	7007      	strb	r7, [r0, #0]
100520ca:	6830      	ldr	r0, [r6, #0]
100520cc:	7047      	strb	r7, [r0, #1]
100520ce:	6830      	ldr	r0, [r6, #0]
100520d0:	7087      	strb	r7, [r0, #2]
100520d2:	6830      	ldr	r0, [r6, #0]
100520d4:	21e1      	movs	r1, #225	@ 0xe1
100520d6:	70c1      	strb	r1, [r0, #3]
100520d8:	2005      	movs	r0, #5
100520da:	01c0      	lsls	r0, r0, #7
100520dc:	6831      	ldr	r1, [r6, #0]
100520de:	8088      	strh	r0, [r1, #4]
100520e0:	2030      	movs	r0, #48	@ 0x30
100520e2:	8508      	strh	r0, [r1, #40]	@ 0x28
100520e4:	ad0e      	add	r5, sp, #56	@ 0x38
100520e6:	a90d      	add	r1, sp, #52	@ 0x34
100520e8:	aa0c      	add	r2, sp, #48	@ 0x30
100520ea:	4628      	mov	r0, r5
100520ec:	f7fd fbdb 	bl	1004f8a6 <BLEPLAT_GetPartInfo>
100520f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100520f2:	0200      	lsls	r0, r0, #8
100520f4:	7829      	ldrb	r1, [r5, #0]
100520f6:	0109      	lsls	r1, r1, #4
100520f8:	4301      	orrs	r1, r0
100520fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
100520fc:	0300      	lsls	r0, r0, #12
100520fe:	4308      	orrs	r0, r1
10052100:	1d00      	adds	r0, r0, #4
10052102:	6831      	ldr	r1, [r6, #0]
10052104:	8548      	strh	r0, [r1, #42]	@ 0x2a
10052106:	2118      	movs	r1, #24
10052108:	4620      	mov	r0, r4
1005210a:	f00b fe5b 	bl	1005ddc4 <csmem_mem_0_assign>
1005210e:	4920      	ldr	r1, [pc, #128]	@ (10052190 <__arm_cp.1_2>)
10052110:	6008      	str	r0, [r1, #0]
10052112:	7507      	strb	r7, [r0, #20]
10052114:	f00d fbee 	bl	1005f8f4 <tsk_init>
10052118:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005211a:	9006      	str	r0, [sp, #24]
1005211c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
1005211e:	9405      	str	r4, [sp, #20]
10052120:	981a      	ldr	r0, [sp, #104]	@ 0x68
10052122:	9004      	str	r0, [sp, #16]
10052124:	9819      	ldr	r0, [sp, #100]	@ 0x64
10052126:	9003      	str	r0, [sp, #12]
10052128:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005212a:	9002      	str	r0, [sp, #8]
1005212c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005212e:	9001      	str	r0, [sp, #4]
10052130:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10052132:	9500      	str	r5, [sp, #0]
10052134:	9808      	ldr	r0, [sp, #32]
10052136:	990a      	ldr	r1, [sp, #40]	@ 0x28
10052138:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005213a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1005213c:	f7f9 ffc1 	bl	1004c0c2 <LL_init_ucfg>
10052140:	f7f9 fed4 	bl	1004beec <MBM_init_ucfg>
10052144:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
10052146:	2c01      	cmp	r4, #1
10052148:	d101      	bne.n	1005214e <BlueNRG_Stack_Initialize_Layers+0xae>
1005214a:	f7f9 fe47 	bl	1004bddc <ACL_pkt_init_ucfg>
1005214e:	f000 f98b 	bl	10052468 <Events_Process_init>
10052152:	2f01      	cmp	r7, #1
10052154:	d101      	bne.n	1005215a <BlueNRG_Stack_Initialize_Layers+0xba>
10052156:	f000 f8bb 	bl	100522d0 <log_init_ucfg_weak>
1005215a:	6830      	ldr	r0, [r6, #0]
1005215c:	212c      	movs	r1, #44	@ 0x2c
1005215e:	5c40      	ldrb	r0, [r0, r1]
10052160:	07c0      	lsls	r0, r0, #31
10052162:	d10e      	bne.n	10052182 <BlueNRG_Stack_Initialize_Layers+0xe2>
10052164:	2c01      	cmp	r4, #1
10052166:	d106      	bne.n	10052176 <BlueNRG_Stack_Initialize_Layers+0xd6>
10052168:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005216a:	f7f9 fee4 	bl	1004bf36 <L2C_init_ucfg>
1005216e:	f7fa f804 	bl	1004c17a <smp_init_ucfg>
10052172:	f7fa f809 	bl	1004c188 <GAT_att_cmn_init_ucfg>
10052176:	980a      	ldr	r0, [sp, #40]	@ 0x28
10052178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005217a:	462a      	mov	r2, r5
1005217c:	4623      	mov	r3, r4
1005217e:	f000 ff03 	bl	10052f88 <GAP_init_context>
10052182:	b00f      	add	sp, #60	@ 0x3c
10052184:	bdf0      	pop	{r4, r5, r6, r7, pc}
10052186:	46c0      	nop			@ (mov r8, r8)

10052188 <__arm_cp.1_0>:
10052188:	20000f34 	.word	0x20000f34

1005218c <__arm_cp.1_1>:
1005218c:	20000ecc 	.word	0x20000ecc

10052190 <__arm_cp.1_2>:
10052190:	20000f74 	.word	0x20000f74

10052194 <_BlueNRG_Stack_Initialization>:
10052194:	b5f0      	push	{r4, r5, r6, r7, lr}
10052196:	b095      	sub	sp, #84	@ 0x54
10052198:	2001      	movs	r0, #1
1005219a:	0481      	lsls	r1, r0, #18
1005219c:	9114      	str	r1, [sp, #80]	@ 0x50
1005219e:	482e      	ldr	r0, [pc, #184]	@ (10052258 <__arm_cp.2_0>)
100521a0:	6001      	str	r1, [r0, #0]
100521a2:	f3bf 8f4f 	dsb	sy
100521a6:	f3bf 8f6f 	isb	sy
100521aa:	f7fe fbbb 	bl	10050924 <BLEPLAT_CNTR_GlobDisableBlue>
100521ae:	f7fd fc55 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
100521b2:	2000      	movs	r0, #0
100521b4:	9012      	str	r0, [sp, #72]	@ 0x48
100521b6:	43c0      	mvns	r0, r0
100521b8:	f7fe fba0 	bl	100508fc <BLEPLAT_CNTR_ClearInterrupt>
100521bc:	f004 fade 	bl	1005677c <data_length_extension_csr_ucfg_weak>
100521c0:	9013      	str	r0, [sp, #76]	@ 0x4c
100521c2:	f7f9 fdfb 	bl	1004bdbc <phy_upd_csr_ucfg>
100521c6:	9011      	str	r0, [sp, #68]	@ 0x44
100521c8:	f00a fe64 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
100521cc:	9010      	str	r0, [sp, #64]	@ 0x40
100521ce:	f006 fd2c 	bl	10058c2a <llc_priv_controller_privacy_csr_ucfg_weak>
100521d2:	900f      	str	r0, [sp, #60]	@ 0x3c
100521d4:	f00d f98f 	bl	1005f4f6 <secure_connections_csr_ucfg_weak>
100521d8:	f004 fad6 	bl	10056788 <scan_csr_ucfg_weak>
100521dc:	900e      	str	r0, [sp, #56]	@ 0x38
100521de:	f004 fc99 	bl	10056b14 <l2c_cos_csr_ucfg_weak>
100521e2:	900d      	str	r0, [sp, #52]	@ 0x34
100521e4:	f006 fd18 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100521e8:	900c      	str	r0, [sp, #48]	@ 0x30
100521ea:	f006 fd17 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100521ee:	900b      	str	r0, [sp, #44]	@ 0x2c
100521f0:	f004 fa68 	bl	100566c4 <cte_csr_ucfg_weak>
100521f4:	4604      	mov	r4, r0
100521f6:	f004 fac3 	bl	10056780 <pcl_csr_ucfg_weak>
100521fa:	4605      	mov	r5, r0
100521fc:	f7f9 fde6 	bl	1004bdcc <conn_supp_csr_ucfg>
10052200:	4606      	mov	r6, r0
10052202:	f004 f96a 	bl	100564da <chc_csr_ucfg_weak>
10052206:	4607      	mov	r7, r0
10052208:	f000 f865 	bl	100522d6 <log_csr_ucfg_weak>
1005220c:	b2c0      	uxtb	r0, r0
1005220e:	b2f9      	uxtb	r1, r7
10052210:	9108      	str	r1, [sp, #32]
10052212:	9009      	str	r0, [sp, #36]	@ 0x24
10052214:	b2f0      	uxtb	r0, r6
10052216:	b2e9      	uxtb	r1, r5
10052218:	b2e2      	uxtb	r2, r4
1005221a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005221c:	b2db      	uxtb	r3, r3
1005221e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10052220:	b2e4      	uxtb	r4, r4
10052222:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10052224:	b2ed      	uxtb	r5, r5
10052226:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10052228:	b2f6      	uxtb	r6, r6
1005222a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1005222c:	9700      	str	r7, [sp, #0]
1005222e:	9601      	str	r6, [sp, #4]
10052230:	9502      	str	r5, [sp, #8]
10052232:	9403      	str	r4, [sp, #12]
10052234:	9304      	str	r3, [sp, #16]
10052236:	9205      	str	r2, [sp, #20]
10052238:	9106      	str	r1, [sp, #24]
1005223a:	9007      	str	r0, [sp, #28]
1005223c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005223e:	b2c0      	uxtb	r0, r0
10052240:	9911      	ldr	r1, [sp, #68]	@ 0x44
10052242:	b2c9      	uxtb	r1, r1
10052244:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10052246:	b2d3      	uxtb	r3, r2
10052248:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005224a:	f7ff ff29 	bl	100520a0 <BlueNRG_Stack_Initialize_Layers>
1005224e:	4803      	ldr	r0, [pc, #12]	@ (1005225c <__arm_cp.2_1>)
10052250:	9914      	ldr	r1, [sp, #80]	@ 0x50
10052252:	6001      	str	r1, [r0, #0]
10052254:	b015      	add	sp, #84	@ 0x54
10052256:	bdf0      	pop	{r4, r5, r6, r7, pc}

10052258 <__arm_cp.2_0>:
10052258:	e000e180 	.word	0xe000e180

1005225c <__arm_cp.2_1>:
1005225c:	e000e100 	.word	0xe000e100

10052260 <BLE_STACK_Init>:
10052260:	b5b0      	push	{r4, r5, r7, lr}
10052262:	4605      	mov	r5, r0
10052264:	7ac0      	ldrb	r0, [r0, #11]
10052266:	2412      	movs	r4, #18
10052268:	2880      	cmp	r0, #128	@ 0x80
1005226a:	d829      	bhi.n	100522c0 <BLE_STACK_Init+0x60>
1005226c:	8c29      	ldrh	r1, [r5, #32]
1005226e:	2917      	cmp	r1, #23
10052270:	d326      	bcc.n	100522c0 <BLE_STACK_Init+0x60>
10052272:	4814      	ldr	r0, [pc, #80]	@ (100522c4 <__arm_cp.3_0>)
10052274:	1d82      	adds	r2, r0, #6
10052276:	4291      	cmp	r1, r2
10052278:	d822      	bhi.n	100522c0 <BLE_STACK_Init+0x60>
1005227a:	8a29      	ldrh	r1, [r5, #16]
1005227c:	2917      	cmp	r1, #23
1005227e:	d31f      	bcc.n	100522c0 <BLE_STACK_Init+0x60>
10052280:	4281      	cmp	r1, r0
10052282:	d81d      	bhi.n	100522c0 <BLE_STACK_Init+0x60>
10052284:	7ea8      	ldrb	r0, [r5, #26]
10052286:	2800      	cmp	r0, #0
10052288:	d01a      	beq.n	100522c0 <BLE_STACK_Init+0x60>
1005228a:	f006 fcc7 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005228e:	2800      	cmp	r0, #0
10052290:	d008      	beq.n	100522a4 <BLE_STACK_Init+0x44>
10052292:	7ee8      	ldrb	r0, [r5, #27]
10052294:	2800      	cmp	r0, #0
10052296:	d013      	beq.n	100522c0 <BLE_STACK_Init+0x60>
10052298:	2880      	cmp	r0, #128	@ 0x80
1005229a:	d811      	bhi.n	100522c0 <BLE_STACK_Init+0x60>
1005229c:	7f28      	ldrb	r0, [r5, #28]
1005229e:	1e40      	subs	r0, r0, #1
100522a0:	280e      	cmp	r0, #14
100522a2:	d80d      	bhi.n	100522c0 <BLE_STACK_Init+0x60>
100522a4:	4808      	ldr	r0, [pc, #32]	@ (100522c8 <__arm_cp.3_1>)
100522a6:	2234      	movs	r2, #52	@ 0x34
100522a8:	4629      	mov	r1, r5
100522aa:	f7fd facb 	bl	1004f844 <BLEPLAT_MemCpy>
100522ae:	f00b ff23 	bl	1005e0f8 <BlueNRG_Stack_Initialize_RAM_check>
100522b2:	2800      	cmp	r0, #0
100522b4:	d403      	bmi.n	100522be <BLE_STACK_Init+0x5e>
100522b6:	f7ff ff6d 	bl	10052194 <_BlueNRG_Stack_Initialization>
100522ba:	2400      	movs	r4, #0
100522bc:	e000      	b.n	100522c0 <BLE_STACK_Init+0x60>
100522be:	2487      	movs	r4, #135	@ 0x87
100522c0:	4620      	mov	r0, r4
100522c2:	bdb0      	pop	{r4, r5, r7, pc}

100522c4 <__arm_cp.3_0>:
100522c4:	000003fa 	.word	0x000003fa

100522c8 <__arm_cp.3_1>:
100522c8:	20000f34 	.word	0x20000f34

100522cc <log_verbosity_set_ucfg_weak>:
100522cc:	2000      	movs	r0, #0
100522ce:	4770      	bx	lr

100522d0 <log_init_ucfg_weak>:
100522d0:	4770      	bx	lr

100522d2 <log_notify_stu_ucfg_weak>:
100522d2:	4770      	bx	lr

100522d4 <log_notify_us_flush_ucfg_weak>:
100522d4:	4770      	bx	lr

100522d6 <log_csr_ucfg_weak>:
100522d6:	2000      	movs	r0, #0
100522d8:	4770      	bx	lr
	...

100522dc <aci_event_fifo_push_header>:
100522dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100522de:	4615      	mov	r5, r2
100522e0:	460c      	mov	r4, r1
100522e2:	4606      	mov	r6, r0
100522e4:	0608      	lsls	r0, r1, #24
100522e6:	d414      	bmi.n	10052312 <aci_event_fifo_push_header+0x36>
100522e8:	aa02      	add	r2, sp, #8
100522ea:	af01      	add	r7, sp, #4
100522ec:	4630      	mov	r0, r6
100522ee:	4619      	mov	r1, r3
100522f0:	463b      	mov	r3, r7
100522f2:	f000 f853 	bl	1005239c <fifoBuf_getFreeHeader>
100522f6:	2800      	cmp	r0, #0
100522f8:	d021      	beq.n	1005233e <aci_event_fifo_push_header+0x62>
100522fa:	0660      	lsls	r0, r4, #25
100522fc:	d438      	bmi.n	10052370 <aci_event_fifo_push_header+0x94>
100522fe:	9802      	ldr	r0, [sp, #8]
10052300:	7881      	ldrb	r1, [r0, #2]
10052302:	22fc      	movs	r2, #252	@ 0xfc
10052304:	400a      	ands	r2, r1
10052306:	7082      	strb	r2, [r0, #2]
10052308:	9901      	ldr	r1, [sp, #4]
1005230a:	8001      	strh	r1, [r0, #0]
1005230c:	8071      	strh	r1, [r6, #2]
1005230e:	2701      	movs	r7, #1
10052310:	e02f      	b.n	10052372 <aci_event_fifo_push_header+0x96>
10052312:	f3ef 8010 	mrs	r0, PRIMASK
10052316:	b672      	cpsid	i
10052318:	aa02      	add	r2, sp, #8
1005231a:	af01      	add	r7, sp, #4
1005231c:	4630      	mov	r0, r6
1005231e:	4619      	mov	r1, r3
10052320:	463b      	mov	r3, r7
10052322:	f000 f83b 	bl	1005239c <fifoBuf_getFreeHeader>
10052326:	2800      	cmp	r0, #0
10052328:	d00b      	beq.n	10052342 <aci_event_fifo_push_header+0x66>
1005232a:	9902      	ldr	r1, [sp, #8]
1005232c:	788a      	ldrb	r2, [r1, #2]
1005232e:	23fc      	movs	r3, #252	@ 0xfc
10052330:	4013      	ands	r3, r2
10052332:	708b      	strb	r3, [r1, #2]
10052334:	9a01      	ldr	r2, [sp, #4]
10052336:	800a      	strh	r2, [r1, #0]
10052338:	8072      	strh	r2, [r6, #2]
1005233a:	2701      	movs	r7, #1
1005233c:	e002      	b.n	10052344 <aci_event_fifo_push_header+0x68>
1005233e:	2700      	movs	r7, #0
10052340:	e003      	b.n	1005234a <aci_event_fifo_push_header+0x6e>
10052342:	2700      	movs	r7, #0
10052344:	b662      	cpsie	i
10052346:	2800      	cmp	r0, #0
10052348:	d113      	bne.n	10052372 <aci_event_fifo_push_header+0x96>
1005234a:	f3ef 8010 	mrs	r0, PRIMASK
1005234e:	b672      	cpsid	i
10052350:	06a0      	lsls	r0, r4, #26
10052352:	d40a      	bmi.n	1005236a <aci_event_fifo_push_header+0x8e>
10052354:	4810      	ldr	r0, [pc, #64]	@ (10052398 <__arm_cp.0_0>)
10052356:	6800      	ldr	r0, [r0, #0]
10052358:	6801      	ldr	r1, [r0, #0]
1005235a:	2208      	movs	r2, #8
1005235c:	430a      	orrs	r2, r1
1005235e:	6002      	str	r2, [r0, #0]
10052360:	2000      	movs	r0, #0
10052362:	f00d fb05 	bl	1005f970 <tsk_notify_idx>
10052366:	f7fc fcac 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005236a:	b662      	cpsie	i
1005236c:	2600      	movs	r6, #0
1005236e:	e00a      	b.n	10052386 <aci_event_fifo_push_header+0xaa>
10052370:	2700      	movs	r7, #0
10052372:	9e02      	ldr	r6, [sp, #8]
10052374:	70f5      	strb	r5, [r6, #3]
10052376:	00a0      	lsls	r0, r4, #2
10052378:	2160      	movs	r1, #96	@ 0x60
1005237a:	4001      	ands	r1, r0
1005237c:	78b0      	ldrb	r0, [r6, #2]
1005237e:	2203      	movs	r2, #3
10052380:	4002      	ands	r2, r0
10052382:	1850      	adds	r0, r2, r1
10052384:	70b0      	strb	r0, [r6, #2]
10052386:	2f00      	cmp	r7, #0
10052388:	d004      	beq.n	10052394 <aci_event_fifo_push_header+0xb8>
1005238a:	2000      	movs	r0, #0
1005238c:	f00d faf0 	bl	1005f970 <tsk_notify_idx>
10052390:	f7fc fc97 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10052394:	4630      	mov	r0, r6
10052396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10052398 <__arm_cp.0_0>:
10052398:	20000ed0 	.word	0x20000ed0

1005239c <fifoBuf_getFreeHeader>:
1005239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005239e:	9200      	str	r2, [sp, #0]
100523a0:	8845      	ldrh	r5, [r0, #2]
100523a2:	08ac      	lsrs	r4, r5, #2
100523a4:	801c      	strh	r4, [r3, #0]
100523a6:	1c49      	adds	r1, r1, #1
100523a8:	b28a      	uxth	r2, r1
100523aa:	18a6      	adds	r6, r4, r2
100523ac:	8887      	ldrh	r7, [r0, #4]
100523ae:	42be      	cmp	r6, r7
100523b0:	d900      	bls.n	100523b4 <fifoBuf_getFreeHeader+0x18>
100523b2:	1b09      	subs	r1, r1, r4
100523b4:	190a      	adds	r2, r1, r4
100523b6:	0092      	lsls	r2, r2, #2
100523b8:	42be      	cmp	r6, r7
100523ba:	d900      	bls.n	100523be <fifoBuf_getFreeHeader+0x22>
100523bc:	1c6d      	adds	r5, r5, #1
100523be:	2603      	movs	r6, #3
100523c0:	4035      	ands	r5, r6
100523c2:	1952      	adds	r2, r2, r5
100523c4:	801a      	strh	r2, [r3, #0]
100523c6:	00a3      	lsls	r3, r4, #2
100523c8:	181b      	adds	r3, r3, r0
100523ca:	3308      	adds	r3, #8
100523cc:	9c00      	ldr	r4, [sp, #0]
100523ce:	6023      	str	r3, [r4, #0]
100523d0:	b292      	uxth	r2, r2
100523d2:	8805      	ldrh	r5, [r0, #0]
100523d4:	1b52      	subs	r2, r2, r5
100523d6:	4617      	mov	r7, r2
100523d8:	4037      	ands	r7, r6
100523da:	8884      	ldrh	r4, [r0, #4]
100523dc:	4367      	muls	r7, r4
100523de:	4035      	ands	r5, r6
100523e0:	1952      	adds	r2, r2, r5
100523e2:	0892      	lsrs	r2, r2, #2
100523e4:	19d2      	adds	r2, r2, r7
100523e6:	b295      	uxth	r5, r2
100523e8:	88c6      	ldrh	r6, [r0, #6]
100523ea:	42b5      	cmp	r5, r6
100523ec:	d900      	bls.n	100523f0 <fifoBuf_getFreeHeader+0x54>
100523ee:	80c2      	strh	r2, [r0, #6]
100523f0:	42a5      	cmp	r5, r4
100523f2:	d80a      	bhi.n	1005240a <fifoBuf_getFreeHeader+0x6e>
100523f4:	b209      	sxth	r1, r1
100523f6:	2900      	cmp	r1, #0
100523f8:	d507      	bpl.n	1005240a <fifoBuf_getFreeHeader+0x6e>
100523fa:	7899      	ldrb	r1, [r3, #2]
100523fc:	22fc      	movs	r2, #252	@ 0xfc
100523fe:	400a      	ands	r2, r1
10052400:	1c51      	adds	r1, r2, #1
10052402:	7099      	strb	r1, [r3, #2]
10052404:	3008      	adds	r0, #8
10052406:	9900      	ldr	r1, [sp, #0]
10052408:	6008      	str	r0, [r1, #0]
1005240a:	42a5      	cmp	r5, r4
1005240c:	d901      	bls.n	10052412 <fifoBuf_getFreeHeader+0x76>
1005240e:	2000      	movs	r0, #0
10052410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10052412:	2001      	movs	r0, #1
10052414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10052416 <aci_event_fifo_push>:
10052416:	b580      	push	{r7, lr}
10052418:	0640      	lsls	r0, r0, #25
1005241a:	d405      	bmi.n	10052428 <aci_event_fifo_push+0x12>
1005241c:	7888      	ldrb	r0, [r1, #2]
1005241e:	22fc      	movs	r2, #252	@ 0xfc
10052420:	4002      	ands	r2, r0
10052422:	1c90      	adds	r0, r2, #2
10052424:	7088      	strb	r0, [r1, #2]
10052426:	bd80      	pop	{r7, pc}
10052428:	4608      	mov	r0, r1
1005242a:	f000 f801 	bl	10052430 <event_notify_cb>
1005242e:	bd80      	pop	{r7, pc}

10052430 <event_notify_cb>:
10052430:	b580      	push	{r7, lr}
10052432:	1d01      	adds	r1, r0, #4
10052434:	78c2      	ldrb	r2, [r0, #3]
10052436:	2a14      	cmp	r2, #20
10052438:	d804      	bhi.n	10052444 <event_notify_cb+0x14>
1005243a:	6842      	ldr	r2, [r0, #4]
1005243c:	7880      	ldrb	r0, [r0, #2]
1005243e:	0880      	lsrs	r0, r0, #2
10052440:	4790      	blx	r2
10052442:	bd80      	pop	{r7, pc}
10052444:	2a3d      	cmp	r2, #61	@ 0x3d
10052446:	d803      	bhi.n	10052450 <event_notify_cb+0x20>
10052448:	2000      	movs	r0, #0
1005244a:	f000 f8e9 	bl	10052620 <hci_event_notify_cb>
1005244e:	bd80      	pop	{r7, pc}
10052450:	2a3f      	cmp	r2, #63	@ 0x3f
10052452:	d803      	bhi.n	1005245c <event_notify_cb+0x2c>
10052454:	2000      	movs	r0, #0
10052456:	f000 f8f5 	bl	10052644 <hci_rx_data_notify_cb>
1005245a:	bd80      	pop	{r7, pc}
1005245c:	2a60      	cmp	r2, #96	@ 0x60
1005245e:	d802      	bhi.n	10052466 <event_notify_cb+0x36>
10052460:	2000      	movs	r0, #0
10052462:	f000 f8e4 	bl	1005262e <hci_aci_event_notify_cb>
10052466:	bd80      	pop	{r7, pc}

10052468 <Events_Process_init>:
10052468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005246a:	2001      	movs	r0, #1
1005246c:	211c      	movs	r1, #28
1005246e:	4a29      	ldr	r2, [pc, #164]	@ (10052514 <__arm_cp.7_0>)
10052470:	4790      	blx	r2
10052472:	4f29      	ldr	r7, [pc, #164]	@ (10052518 <__arm_cp.7_1>)
10052474:	6038      	str	r0, [r7, #0]
10052476:	4d29      	ldr	r5, [pc, #164]	@ (1005251c <__arm_cp.7_2>)
10052478:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
1005247a:	1e40      	subs	r0, r0, #1
1005247c:	2603      	movs	r6, #3
1005247e:	4330      	orrs	r0, r6
10052480:	1c40      	adds	r0, r0, #1
10052482:	0880      	lsrs	r0, r0, #2
10052484:	1cc0      	adds	r0, r0, #3
10052486:	2404      	movs	r4, #4
10052488:	4621      	mov	r1, r4
1005248a:	4a22      	ldr	r2, [pc, #136]	@ (10052514 <__arm_cp.7_0>)
1005248c:	4790      	blx	r2
1005248e:	6839      	ldr	r1, [r7, #0]
10052490:	6048      	str	r0, [r1, #4]
10052492:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
10052494:	1e40      	subs	r0, r0, #1
10052496:	4330      	orrs	r0, r6
10052498:	1c40      	adds	r0, r0, #1
1005249a:	0880      	lsrs	r0, r0, #2
1005249c:	1cc0      	adds	r0, r0, #3
1005249e:	4621      	mov	r1, r4
100524a0:	4d1c      	ldr	r5, [pc, #112]	@ (10052514 <__arm_cp.7_0>)
100524a2:	47a8      	blx	r5
100524a4:	462a      	mov	r2, r5
100524a6:	6839      	ldr	r1, [r7, #0]
100524a8:	6088      	str	r0, [r1, #8]
100524aa:	4d1c      	ldr	r5, [pc, #112]	@ (1005251c <__arm_cp.7_2>)
100524ac:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
100524ae:	1e40      	subs	r0, r0, #1
100524b0:	4330      	orrs	r0, r6
100524b2:	1c40      	adds	r0, r0, #1
100524b4:	0880      	lsrs	r0, r0, #2
100524b6:	1cc0      	adds	r0, r0, #3
100524b8:	4621      	mov	r1, r4
100524ba:	4790      	blx	r2
100524bc:	6839      	ldr	r1, [r7, #0]
100524be:	60c8      	str	r0, [r1, #12]
100524c0:	f7ff fc18 	bl	10051cf4 <hal_radio_activity_state_init>
100524c4:	6838      	ldr	r0, [r7, #0]
100524c6:	6842      	ldr	r2, [r0, #4]
100524c8:	2100      	movs	r1, #0
100524ca:	8011      	strh	r1, [r2, #0]
100524cc:	8051      	strh	r1, [r2, #2]
100524ce:	6883      	ldr	r3, [r0, #8]
100524d0:	8019      	strh	r1, [r3, #0]
100524d2:	80d1      	strh	r1, [r2, #6]
100524d4:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
100524d6:	1e7f      	subs	r7, r7, #1
100524d8:	4337      	orrs	r7, r6
100524da:	1c7f      	adds	r7, r7, #1
100524dc:	08bf      	lsrs	r7, r7, #2
100524de:	8097      	strh	r7, [r2, #4]
100524e0:	8059      	strh	r1, [r3, #2]
100524e2:	80d9      	strh	r1, [r3, #6]
100524e4:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
100524e6:	1e7f      	subs	r7, r7, #1
100524e8:	4337      	orrs	r7, r6
100524ea:	1c7f      	adds	r7, r7, #1
100524ec:	08bf      	lsrs	r7, r7, #2
100524ee:	809f      	strh	r7, [r3, #4]
100524f0:	68c7      	ldr	r7, [r0, #12]
100524f2:	8039      	strh	r1, [r7, #0]
100524f4:	6102      	str	r2, [r0, #16]
100524f6:	6143      	str	r3, [r0, #20]
100524f8:	80f9      	strh	r1, [r7, #6]
100524fa:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
100524fc:	1e52      	subs	r2, r2, #1
100524fe:	4332      	orrs	r2, r6
10052500:	1c52      	adds	r2, r2, #1
10052502:	0892      	lsrs	r2, r2, #2
10052504:	80ba      	strh	r2, [r7, #4]
10052506:	8079      	strh	r1, [r7, #2]
10052508:	6187      	str	r7, [r0, #24]
1005250a:	4622      	mov	r2, r4
1005250c:	f7fd f9aa 	bl	1004f864 <BLEPLAT_MemSet>
10052510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10052512:	46c0      	nop			@ (mov r8, r8)

10052514 <__arm_cp.7_0>:
10052514:	1005ddc5 	.word	0x1005ddc5

10052518 <__arm_cp.7_1>:
10052518:	20000ed0 	.word	0x20000ed0

1005251c <__arm_cp.7_2>:
1005251c:	20000f34 	.word	0x20000f34

10052520 <Events_Process_Q>:
10052520:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10052522:	4d3d      	ldr	r5, [pc, #244]	@ (10052618 <__arm_cp.8_0>)
10052524:	6828      	ldr	r0, [r5, #0]
10052526:	3010      	adds	r0, #16
10052528:	2100      	movs	r1, #0
1005252a:	2906      	cmp	r1, #6
1005252c:	d005      	beq.n	1005253a <Events_Process_Q+0x1a>
1005252e:	c804      	ldmia	r0!, {r2}
10052530:	8852      	ldrh	r2, [r2, #2]
10052532:	ab01      	add	r3, sp, #4
10052534:	525a      	strh	r2, [r3, r1]
10052536:	1c89      	adds	r1, r1, #2
10052538:	e7f7      	b.n	1005252a <Events_Process_Q+0xa>
1005253a:	f3ef 8010 	mrs	r0, PRIMASK
1005253e:	b672      	cpsid	i
10052540:	6828      	ldr	r0, [r5, #0]
10052542:	6804      	ldr	r4, [r0, #0]
10052544:	2700      	movs	r7, #0
10052546:	6007      	str	r7, [r0, #0]
10052548:	b662      	cpsie	i
1005254a:	07e0      	lsls	r0, r4, #31
1005254c:	d002      	beq.n	10052554 <Events_Process_Q+0x34>
1005254e:	2000      	movs	r0, #0
10052550:	f000 fc4a 	bl	10052de8 <hci_hardware_error_event_cb>
10052554:	07a0      	lsls	r0, r4, #30
10052556:	d502      	bpl.n	1005255e <Events_Process_Q+0x3e>
10052558:	2001      	movs	r0, #1
1005255a:	f000 fc45 	bl	10052de8 <hci_hardware_error_event_cb>
1005255e:	0760      	lsls	r0, r4, #29
10052560:	d502      	bpl.n	10052568 <Events_Process_Q+0x48>
10052562:	2002      	movs	r0, #2
10052564:	f000 fc40 	bl	10052de8 <hci_hardware_error_event_cb>
10052568:	0720      	lsls	r0, r4, #28
1005256a:	d502      	bpl.n	10052572 <Events_Process_Q+0x52>
1005256c:	2003      	movs	r0, #3
1005256e:	f000 fc3b 	bl	10052de8 <hci_hardware_error_event_cb>
10052572:	06e0      	lsls	r0, r4, #27
10052574:	d54a      	bpl.n	1005260c <Events_Process_Q+0xec>
10052576:	2004      	movs	r0, #4
10052578:	f000 fc36 	bl	10052de8 <hci_hardware_error_event_cb>
1005257c:	e046      	b.n	1005260c <Events_Process_Q+0xec>
1005257e:	0078      	lsls	r0, r7, #1
10052580:	a901      	add	r1, sp, #4
10052582:	5a0e      	ldrh	r6, [r1, r0]
10052584:	9700      	str	r7, [sp, #0]
10052586:	00bf      	lsls	r7, r7, #2
10052588:	6828      	ldr	r0, [r5, #0]
1005258a:	19c0      	adds	r0, r0, r7
1005258c:	6900      	ldr	r0, [r0, #16]
1005258e:	8801      	ldrh	r1, [r0, #0]
10052590:	8802      	ldrh	r2, [r0, #0]
10052592:	42b2      	cmp	r2, r6
10052594:	d02a      	beq.n	100525ec <Events_Process_Q+0xcc>
10052596:	0889      	lsrs	r1, r1, #2
10052598:	1c89      	adds	r1, r1, #2
1005259a:	0089      	lsls	r1, r1, #2
1005259c:	1844      	adds	r4, r0, r1
1005259e:	78a1      	ldrb	r1, [r4, #2]
100525a0:	2203      	movs	r2, #3
100525a2:	400a      	ands	r2, r1
100525a4:	2a01      	cmp	r2, #1
100525a6:	d002      	beq.n	100525ae <Events_Process_Q+0x8e>
100525a8:	2a00      	cmp	r2, #0
100525aa:	d103      	bne.n	100525b4 <Events_Process_Q+0x94>
100525ac:	e01e      	b.n	100525ec <Events_Process_Q+0xcc>
100525ae:	7a81      	ldrb	r1, [r0, #10]
100525b0:	3008      	adds	r0, #8
100525b2:	4604      	mov	r4, r0
100525b4:	0648      	lsls	r0, r1, #25
100525b6:	d403      	bmi.n	100525c0 <Events_Process_Q+0xa0>
100525b8:	4620      	mov	r0, r4
100525ba:	f7ff ff39 	bl	10052430 <event_notify_cb>
100525be:	e00a      	b.n	100525d6 <Events_Process_Q+0xb6>
100525c0:	78e0      	ldrb	r0, [r4, #3]
100525c2:	2813      	cmp	r0, #19
100525c4:	d207      	bcs.n	100525d6 <Events_Process_Q+0xb6>
100525c6:	0080      	lsls	r0, r0, #2
100525c8:	4914      	ldr	r1, [pc, #80]	@ (1005261c <__arm_cp.8_1>)
100525ca:	580a      	ldr	r2, [r1, r0]
100525cc:	1d21      	adds	r1, r4, #4
100525ce:	4620      	mov	r0, r4
100525d0:	4790      	blx	r2
100525d2:	2800      	cmp	r0, #0
100525d4:	d105      	bne.n	100525e2 <Events_Process_Q+0xc2>
100525d6:	6828      	ldr	r0, [r5, #0]
100525d8:	19c0      	adds	r0, r0, r7
100525da:	6900      	ldr	r0, [r0, #16]
100525dc:	8821      	ldrh	r1, [r4, #0]
100525de:	8001      	strh	r1, [r0, #0]
100525e0:	e7d5      	b.n	1005258e <Events_Process_Q+0x6e>
100525e2:	2000      	movs	r0, #0
100525e4:	f00d f9c4 	bl	1005f970 <tsk_notify_idx>
100525e8:	f7fc fb6b 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
100525ec:	f3ef 8010 	mrs	r0, PRIMASK
100525f0:	b672      	cpsid	i
100525f2:	6828      	ldr	r0, [r5, #0]
100525f4:	19c0      	adds	r0, r0, r7
100525f6:	6900      	ldr	r0, [r0, #16]
100525f8:	8841      	ldrh	r1, [r0, #2]
100525fa:	8802      	ldrh	r2, [r0, #0]
100525fc:	4291      	cmp	r1, r2
100525fe:	d102      	bne.n	10052606 <Events_Process_Q+0xe6>
10052600:	2100      	movs	r1, #0
10052602:	8001      	strh	r1, [r0, #0]
10052604:	8041      	strh	r1, [r0, #2]
10052606:	b662      	cpsie	i
10052608:	9f00      	ldr	r7, [sp, #0]
1005260a:	1c7f      	adds	r7, r7, #1
1005260c:	2f03      	cmp	r7, #3
1005260e:	d1b6      	bne.n	1005257e <Events_Process_Q+0x5e>
10052610:	f7ff fb7a 	bl	10051d08 <hal_radio_activity_state_cb_check>
10052614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10052616:	46c0      	nop			@ (mov r8, r8)

10052618 <__arm_cp.8_0>:
10052618:	20000ed0 	.word	0x20000ed0

1005261c <__arm_cp.8_1>:
1005261c:	10065fb4 	.word	0x10065fb4

10052620 <hci_event_notify_cb>:
10052620:	b580      	push	{r7, lr}
10052622:	4608      	mov	r0, r1
10052624:	7889      	ldrb	r1, [r1, #2]
10052626:	1cc9      	adds	r1, r1, #3
10052628:	f7f9 fb00 	bl	1004bc2c <BLE_STACK_Event>
1005262c:	bd80      	pop	{r7, pc}

1005262e <hci_aci_event_notify_cb>:
1005262e:	b580      	push	{r7, lr}
10052630:	4608      	mov	r0, r1
10052632:	7889      	ldrb	r1, [r1, #2]
10052634:	78c2      	ldrb	r2, [r0, #3]
10052636:	0212      	lsls	r2, r2, #8
10052638:	1851      	adds	r1, r2, r1
1005263a:	1d09      	adds	r1, r1, #4
1005263c:	b289      	uxth	r1, r1
1005263e:	f7f9 faf5 	bl	1004bc2c <BLE_STACK_Event>
10052642:	bd80      	pop	{r7, pc}

10052644 <hci_rx_data_notify_cb>:
10052644:	b580      	push	{r7, lr}
10052646:	4608      	mov	r0, r1
10052648:	78c9      	ldrb	r1, [r1, #3]
1005264a:	7902      	ldrb	r2, [r0, #4]
1005264c:	0212      	lsls	r2, r2, #8
1005264e:	1851      	adds	r1, r2, r1
10052650:	1d49      	adds	r1, r1, #5
10052652:	b289      	uxth	r1, r1
10052654:	f7f9 faea 	bl	1004bc2c <BLE_STACK_Event>
10052658:	bd80      	pop	{r7, pc}
	...

1005265c <hci_disconnection_complete_event_int_cb>:
1005265c:	b5b0      	push	{r4, r5, r7, lr}
1005265e:	460d      	mov	r5, r1
10052660:	4604      	mov	r4, r0
10052662:	7908      	ldrb	r0, [r1, #4]
10052664:	7949      	ldrb	r1, [r1, #5]
10052666:	0209      	lsls	r1, r1, #8
10052668:	1808      	adds	r0, r1, r0
1005266a:	f001 fb3f 	bl	10053cec <GAT_att_cmn_disconnection>
1005266e:	7928      	ldrb	r0, [r5, #4]
10052670:	7969      	ldrb	r1, [r5, #5]
10052672:	0209      	lsls	r1, r1, #8
10052674:	1808      	adds	r0, r1, r0
10052676:	f00c feff 	bl	1005f478 <smp_sap_hci_disconnection_complete_evt_hndl>
1005267a:	7928      	ldrb	r0, [r5, #4]
1005267c:	7969      	ldrb	r1, [r5, #5]
1005267e:	0209      	lsls	r1, r1, #8
10052680:	1808      	adds	r0, r1, r0
10052682:	f004 fd1b 	bl	100570bc <l2c_sap_hci_disconnection_complete_evt_hndl>
10052686:	f000 feba 	bl	100533fe <GAP_hci_disconnection_complete_evt_hndl>
1005268a:	7928      	ldrb	r0, [r5, #4]
1005268c:	7969      	ldrb	r1, [r5, #5]
1005268e:	0209      	lsls	r1, r1, #8
10052690:	1808      	adds	r0, r1, r0
10052692:	f7ff fcdf 	bl	10052054 <ACL_pkt_disconnection>
10052696:	4808      	ldr	r0, [pc, #32]	@ (100526b8 <__arm_cp.14_0>)
10052698:	6800      	ldr	r0, [r0, #0]
1005269a:	2136      	movs	r1, #54	@ 0x36
1005269c:	5c40      	ldrb	r0, [r0, r1]
1005269e:	06c0      	lsls	r0, r0, #27
100526a0:	d401      	bmi.n	100526a6 <hci_disconnection_complete_event_int_cb+0x4a>
100526a2:	2000      	movs	r0, #0
100526a4:	bdb0      	pop	{r4, r5, r7, pc}
100526a6:	2015      	movs	r0, #21
100526a8:	70e0      	strb	r0, [r4, #3]
100526aa:	78a0      	ldrb	r0, [r4, #2]
100526ac:	21bf      	movs	r1, #191	@ 0xbf
100526ae:	4001      	ands	r1, r0
100526b0:	70a1      	strb	r1, [r4, #2]
100526b2:	2084      	movs	r0, #132	@ 0x84
100526b4:	bdb0      	pop	{r4, r5, r7, pc}
100526b6:	46c0      	nop			@ (mov r8, r8)

100526b8 <__arm_cp.14_0>:
100526b8:	20000f20 	.word	0x20000f20

100526bc <hci_encryption_change_event_int_cb>:
100526bc:	b510      	push	{r4, lr}
100526be:	4604      	mov	r4, r0
100526c0:	7908      	ldrb	r0, [r1, #4]
100526c2:	794a      	ldrb	r2, [r1, #5]
100526c4:	0212      	lsls	r2, r2, #8
100526c6:	1812      	adds	r2, r2, r0
100526c8:	78c9      	ldrb	r1, [r1, #3]
100526ca:	2006      	movs	r0, #6
100526cc:	f00c fe5a 	bl	1005f384 <smp_sap_hci_encryption_change_evt_hndl>
100526d0:	4807      	ldr	r0, [pc, #28]	@ (100526f0 <__arm_cp.16_0>)
100526d2:	6800      	ldr	r0, [r0, #0]
100526d4:	2136      	movs	r1, #54	@ 0x36
100526d6:	5640      	ldrsb	r0, [r0, r1]
100526d8:	2800      	cmp	r0, #0
100526da:	d401      	bmi.n	100526e0 <hci_encryption_change_event_int_cb+0x24>
100526dc:	2000      	movs	r0, #0
100526de:	bd10      	pop	{r4, pc}
100526e0:	2016      	movs	r0, #22
100526e2:	70e0      	strb	r0, [r4, #3]
100526e4:	78a0      	ldrb	r0, [r4, #2]
100526e6:	21bf      	movs	r1, #191	@ 0xbf
100526e8:	4001      	ands	r1, r0
100526ea:	70a1      	strb	r1, [r4, #2]
100526ec:	2084      	movs	r0, #132	@ 0x84
100526ee:	bd10      	pop	{r4, pc}

100526f0 <__arm_cp.16_0>:
100526f0:	20000f20 	.word	0x20000f20

100526f4 <hci_encryption_key_refresh_complete_event_int_cb>:
100526f4:	b510      	push	{r4, lr}
100526f6:	4604      	mov	r4, r0
100526f8:	7908      	ldrb	r0, [r1, #4]
100526fa:	794a      	ldrb	r2, [r1, #5]
100526fc:	0212      	lsls	r2, r2, #8
100526fe:	1812      	adds	r2, r2, r0
10052700:	78c9      	ldrb	r1, [r1, #3]
10052702:	2007      	movs	r0, #7
10052704:	f00c fe3e 	bl	1005f384 <smp_sap_hci_encryption_change_evt_hndl>
10052708:	4807      	ldr	r0, [pc, #28]	@ (10052728 <__arm_cp.18_0>)
1005270a:	6800      	ldr	r0, [r0, #0]
1005270c:	213b      	movs	r1, #59	@ 0x3b
1005270e:	5640      	ldrsb	r0, [r0, r1]
10052710:	2800      	cmp	r0, #0
10052712:	d401      	bmi.n	10052718 <hci_encryption_key_refresh_complete_event_int_cb+0x24>
10052714:	2000      	movs	r0, #0
10052716:	bd10      	pop	{r4, pc}
10052718:	2017      	movs	r0, #23
1005271a:	70e0      	strb	r0, [r4, #3]
1005271c:	78a0      	ldrb	r0, [r4, #2]
1005271e:	21bf      	movs	r1, #191	@ 0xbf
10052720:	4001      	ands	r1, r0
10052722:	70a1      	strb	r1, [r4, #2]
10052724:	2084      	movs	r0, #132	@ 0x84
10052726:	bd10      	pop	{r4, pc}

10052728 <__arm_cp.18_0>:
10052728:	20000f20 	.word	0x20000f20

1005272c <hci_le_connection_complete_event_int_cb>:
1005272c:	b5b0      	push	{r4, r5, r7, lr}
1005272e:	460d      	mov	r5, r1
10052730:	4604      	mov	r4, r0
10052732:	7908      	ldrb	r0, [r1, #4]
10052734:	2800      	cmp	r0, #0
10052736:	d11d      	bne.n	10052774 <hci_le_connection_complete_event_int_cb+0x48>
10052738:	7968      	ldrb	r0, [r5, #5]
1005273a:	79a9      	ldrb	r1, [r5, #6]
1005273c:	0209      	lsls	r1, r1, #8
1005273e:	1808      	adds	r0, r1, r0
10052740:	f7ff fc64 	bl	1005200c <ACL_pkt_connection>
10052744:	7968      	ldrb	r0, [r5, #5]
10052746:	79a9      	ldrb	r1, [r5, #6]
10052748:	0209      	lsls	r1, r1, #8
1005274a:	1808      	adds	r0, r1, r0
1005274c:	7a2a      	ldrb	r2, [r5, #8]
1005274e:	79e9      	ldrb	r1, [r5, #7]
10052750:	462b      	mov	r3, r5
10052752:	3309      	adds	r3, #9
10052754:	f00c fcd4 	bl	1005f100 <smp_sap_hci_le_connection_complete_evt_hndl>
10052758:	7968      	ldrb	r0, [r5, #5]
1005275a:	79a9      	ldrb	r1, [r5, #6]
1005275c:	0209      	lsls	r1, r1, #8
1005275e:	1808      	adds	r0, r1, r0
10052760:	f001 faa4 	bl	10053cac <GAT_att_cmn_connection>
10052764:	7968      	ldrb	r0, [r5, #5]
10052766:	79a9      	ldrb	r1, [r5, #6]
10052768:	0209      	lsls	r1, r1, #8
1005276a:	1808      	adds	r0, r1, r0
1005276c:	79e9      	ldrb	r1, [r5, #7]
1005276e:	f004 fc95 	bl	1005709c <l2c_sap_hci_le_connection_complete_evt_hndl>
10052772:	7928      	ldrb	r0, [r5, #4]
10052774:	7969      	ldrb	r1, [r5, #5]
10052776:	79aa      	ldrb	r2, [r5, #6]
10052778:	0212      	lsls	r2, r2, #8
1005277a:	1851      	adds	r1, r2, r1
1005277c:	79ea      	ldrb	r2, [r5, #7]
1005277e:	f000 fe3f 	bl	10053400 <GAP_hci_le_connection_complete_evt_hndl>
10052782:	4809      	ldr	r0, [pc, #36]	@ (100527a8 <__arm_cp.20_0>)
10052784:	6801      	ldr	r1, [r0, #0]
10052786:	203d      	movs	r0, #61	@ 0x3d
10052788:	5c0a      	ldrb	r2, [r1, r0]
1005278a:	2000      	movs	r0, #0
1005278c:	0692      	lsls	r2, r2, #26
1005278e:	d50a      	bpl.n	100527a6 <hci_le_connection_complete_event_int_cb+0x7a>
10052790:	313d      	adds	r1, #61	@ 0x3d
10052792:	7a49      	ldrb	r1, [r1, #9]
10052794:	07c9      	lsls	r1, r1, #31
10052796:	d006      	beq.n	100527a6 <hci_le_connection_complete_event_int_cb+0x7a>
10052798:	2018      	movs	r0, #24
1005279a:	70e0      	strb	r0, [r4, #3]
1005279c:	78a0      	ldrb	r0, [r4, #2]
1005279e:	21bf      	movs	r1, #191	@ 0xbf
100527a0:	4001      	ands	r1, r0
100527a2:	70a1      	strb	r1, [r4, #2]
100527a4:	2084      	movs	r0, #132	@ 0x84
100527a6:	bdb0      	pop	{r4, r5, r7, pc}

100527a8 <__arm_cp.20_0>:
100527a8:	20000f20 	.word	0x20000f20

100527ac <hci_le_enhanced_connection_complete_event_int_cb>:
100527ac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100527ae:	460d      	mov	r5, r1
100527b0:	4604      	mov	r4, r0
100527b2:	7908      	ldrb	r0, [r1, #4]
100527b4:	2800      	cmp	r0, #0
100527b6:	d123      	bne.n	10052800 <hci_le_enhanced_connection_complete_event_int_cb+0x54>
100527b8:	7968      	ldrb	r0, [r5, #5]
100527ba:	79a9      	ldrb	r1, [r5, #6]
100527bc:	0209      	lsls	r1, r1, #8
100527be:	1808      	adds	r0, r1, r0
100527c0:	f7ff fc24 	bl	1005200c <ACL_pkt_connection>
100527c4:	7a2a      	ldrb	r2, [r5, #8]
100527c6:	79e9      	ldrb	r1, [r5, #7]
100527c8:	7968      	ldrb	r0, [r5, #5]
100527ca:	79ab      	ldrb	r3, [r5, #6]
100527cc:	462e      	mov	r6, r5
100527ce:	3615      	adds	r6, #21
100527d0:	462f      	mov	r7, r5
100527d2:	370f      	adds	r7, #15
100527d4:	9700      	str	r7, [sp, #0]
100527d6:	9601      	str	r6, [sp, #4]
100527d8:	021b      	lsls	r3, r3, #8
100527da:	1818      	adds	r0, r3, r0
100527dc:	462b      	mov	r3, r5
100527de:	3309      	adds	r3, #9
100527e0:	f00c fd28 	bl	1005f234 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
100527e4:	7968      	ldrb	r0, [r5, #5]
100527e6:	79a9      	ldrb	r1, [r5, #6]
100527e8:	0209      	lsls	r1, r1, #8
100527ea:	1808      	adds	r0, r1, r0
100527ec:	f001 fa5e 	bl	10053cac <GAT_att_cmn_connection>
100527f0:	7968      	ldrb	r0, [r5, #5]
100527f2:	79a9      	ldrb	r1, [r5, #6]
100527f4:	0209      	lsls	r1, r1, #8
100527f6:	1808      	adds	r0, r1, r0
100527f8:	79e9      	ldrb	r1, [r5, #7]
100527fa:	f004 fc4f 	bl	1005709c <l2c_sap_hci_le_connection_complete_evt_hndl>
100527fe:	7928      	ldrb	r0, [r5, #4]
10052800:	7969      	ldrb	r1, [r5, #5]
10052802:	79aa      	ldrb	r2, [r5, #6]
10052804:	0212      	lsls	r2, r2, #8
10052806:	1851      	adds	r1, r2, r1
10052808:	79ea      	ldrb	r2, [r5, #7]
1005280a:	f000 fdf9 	bl	10053400 <GAP_hci_le_connection_complete_evt_hndl>
1005280e:	4809      	ldr	r0, [pc, #36]	@ (10052834 <__arm_cp.22_0>)
10052810:	6801      	ldr	r1, [r0, #0]
10052812:	203d      	movs	r0, #61	@ 0x3d
10052814:	5c0a      	ldrb	r2, [r1, r0]
10052816:	2000      	movs	r0, #0
10052818:	0692      	lsls	r2, r2, #26
1005281a:	d50a      	bpl.n	10052832 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
1005281c:	313d      	adds	r1, #61	@ 0x3d
1005281e:	7a89      	ldrb	r1, [r1, #10]
10052820:	0789      	lsls	r1, r1, #30
10052822:	d506      	bpl.n	10052832 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10052824:	201c      	movs	r0, #28
10052826:	70e0      	strb	r0, [r4, #3]
10052828:	78a0      	ldrb	r0, [r4, #2]
1005282a:	21bf      	movs	r1, #191	@ 0xbf
1005282c:	4001      	ands	r1, r0
1005282e:	70a1      	strb	r1, [r4, #2]
10052830:	2084      	movs	r0, #132	@ 0x84
10052832:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10052834 <__arm_cp.22_0>:
10052834:	20000f20 	.word	0x20000f20

10052838 <hci_le_long_term_key_request_event_int_cb>:
10052838:	b570      	push	{r4, r5, r6, lr}
1005283a:	4604      	mov	r4, r0
1005283c:	4d14      	ldr	r5, [pc, #80]	@ (10052890 <__arm_cp.24_0>)
1005283e:	6828      	ldr	r0, [r5, #0]
10052840:	2636      	movs	r6, #54	@ 0x36
10052842:	5d80      	ldrb	r0, [r0, r6]
10052844:	2800      	cmp	r0, #0
10052846:	d10e      	bne.n	10052866 <hci_le_long_term_key_request_event_int_cb+0x2e>
10052848:	7908      	ldrb	r0, [r1, #4]
1005284a:	794a      	ldrb	r2, [r1, #5]
1005284c:	0212      	lsls	r2, r2, #8
1005284e:	1810      	adds	r0, r2, r0
10052850:	7b8a      	ldrb	r2, [r1, #14]
10052852:	7bcb      	ldrb	r3, [r1, #15]
10052854:	021b      	lsls	r3, r3, #8
10052856:	189a      	adds	r2, r3, r2
10052858:	1d89      	adds	r1, r1, #6
1005285a:	f00c fd13 	bl	1005f284 <smp_sap_hci_le_long_term_key_request_evt_hndl>
1005285e:	6828      	ldr	r0, [r5, #0]
10052860:	5d80      	ldrb	r0, [r0, r6]
10052862:	2800      	cmp	r0, #0
10052864:	d012      	beq.n	1005288c <hci_le_long_term_key_request_event_int_cb+0x54>
10052866:	480b      	ldr	r0, [pc, #44]	@ (10052894 <__arm_cp.24_1>)
10052868:	6801      	ldr	r1, [r0, #0]
1005286a:	203d      	movs	r0, #61	@ 0x3d
1005286c:	5c0a      	ldrb	r2, [r1, r0]
1005286e:	2000      	movs	r0, #0
10052870:	0692      	lsls	r2, r2, #26
10052872:	d50a      	bpl.n	1005288a <hci_le_long_term_key_request_event_int_cb+0x52>
10052874:	313d      	adds	r1, #61	@ 0x3d
10052876:	7a49      	ldrb	r1, [r1, #9]
10052878:	06c9      	lsls	r1, r1, #27
1005287a:	d506      	bpl.n	1005288a <hci_le_long_term_key_request_event_int_cb+0x52>
1005287c:	2019      	movs	r0, #25
1005287e:	70e0      	strb	r0, [r4, #3]
10052880:	78a0      	ldrb	r0, [r4, #2]
10052882:	21bf      	movs	r1, #191	@ 0xbf
10052884:	4001      	ands	r1, r0
10052886:	70a1      	strb	r1, [r4, #2]
10052888:	2084      	movs	r0, #132	@ 0x84
1005288a:	bd70      	pop	{r4, r5, r6, pc}
1005288c:	2000      	movs	r0, #0
1005288e:	bd70      	pop	{r4, r5, r6, pc}

10052890 <__arm_cp.24_0>:
10052890:	20000ecc 	.word	0x20000ecc

10052894 <__arm_cp.24_1>:
10052894:	20000f20 	.word	0x20000f20

10052898 <hci_le_read_local_p256_public_key_complete_event_int_cb>:
10052898:	b510      	push	{r4, lr}
1005289a:	4604      	mov	r4, r0
1005289c:	7908      	ldrb	r0, [r1, #4]
1005289e:	1d49      	adds	r1, r1, #5
100528a0:	f00c fe2b 	bl	1005f4fa <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>
100528a4:	480a      	ldr	r0, [pc, #40]	@ (100528d0 <__arm_cp.26_0>)
100528a6:	6801      	ldr	r1, [r0, #0]
100528a8:	203d      	movs	r0, #61	@ 0x3d
100528aa:	5c0a      	ldrb	r2, [r1, r0]
100528ac:	2000      	movs	r0, #0
100528ae:	0692      	lsls	r2, r2, #26
100528b0:	d504      	bpl.n	100528bc <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
100528b2:	313d      	adds	r1, #61	@ 0x3d
100528b4:	2209      	movs	r2, #9
100528b6:	5689      	ldrsb	r1, [r1, r2]
100528b8:	2900      	cmp	r1, #0
100528ba:	d400      	bmi.n	100528be <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
100528bc:	bd10      	pop	{r4, pc}
100528be:	201a      	movs	r0, #26
100528c0:	70e0      	strb	r0, [r4, #3]
100528c2:	78a0      	ldrb	r0, [r4, #2]
100528c4:	21bf      	movs	r1, #191	@ 0xbf
100528c6:	4001      	ands	r1, r0
100528c8:	70a1      	strb	r1, [r4, #2]
100528ca:	2084      	movs	r0, #132	@ 0x84
100528cc:	bd10      	pop	{r4, pc}
100528ce:	46c0      	nop			@ (mov r8, r8)

100528d0 <__arm_cp.26_0>:
100528d0:	20000f20 	.word	0x20000f20

100528d4 <hci_le_generate_dhkey_complete_event_int_cb>:
100528d4:	b510      	push	{r4, lr}
100528d6:	4604      	mov	r4, r0
100528d8:	7908      	ldrb	r0, [r1, #4]
100528da:	1d49      	adds	r1, r1, #5
100528dc:	f00c fe0e 	bl	1005f4fc <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>
100528e0:	4809      	ldr	r0, [pc, #36]	@ (10052908 <__arm_cp.28_0>)
100528e2:	6801      	ldr	r1, [r0, #0]
100528e4:	203d      	movs	r0, #61	@ 0x3d
100528e6:	5c0a      	ldrb	r2, [r1, r0]
100528e8:	2000      	movs	r0, #0
100528ea:	0692      	lsls	r2, r2, #26
100528ec:	d50a      	bpl.n	10052904 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
100528ee:	313d      	adds	r1, #61	@ 0x3d
100528f0:	7a89      	ldrb	r1, [r1, #10]
100528f2:	07c9      	lsls	r1, r1, #31
100528f4:	d006      	beq.n	10052904 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
100528f6:	201b      	movs	r0, #27
100528f8:	70e0      	strb	r0, [r4, #3]
100528fa:	78a0      	ldrb	r0, [r4, #2]
100528fc:	21bf      	movs	r1, #191	@ 0xbf
100528fe:	4001      	ands	r1, r0
10052900:	70a1      	strb	r1, [r4, #2]
10052902:	2084      	movs	r0, #132	@ 0x84
10052904:	bd10      	pop	{r4, pc}
10052906:	46c0      	nop			@ (mov r8, r8)

10052908 <__arm_cp.28_0>:
10052908:	20000f20 	.word	0x20000f20

1005290c <hci_le_advertising_report_event_int_cb_ucfg_weak>:
1005290c:	2000      	movs	r0, #0
1005290e:	4770      	bx	lr

10052910 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10052910:	2000      	movs	r0, #0
10052912:	4770      	bx	lr

10052914 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10052914:	2000      	movs	r0, #0
10052916:	4770      	bx	lr

10052918 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10052918:	2000      	movs	r0, #0
1005291a:	4770      	bx	lr

1005291c <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
1005291c:	2000      	movs	r0, #0
1005291e:	4770      	bx	lr

10052920 <hci_read_remote_version_information_complete_event_copy>:
10052920:	7101      	strb	r1, [r0, #4]
10052922:	2300      	movs	r3, #0
10052924:	70c3      	strb	r3, [r0, #3]
10052926:	0a09      	lsrs	r1, r1, #8
10052928:	7141      	strb	r1, [r0, #5]
1005292a:	7811      	ldrb	r1, [r2, #0]
1005292c:	7181      	strb	r1, [r0, #6]
1005292e:	7851      	ldrb	r1, [r2, #1]
10052930:	7893      	ldrb	r3, [r2, #2]
10052932:	7203      	strb	r3, [r0, #8]
10052934:	71c1      	strb	r1, [r0, #7]
10052936:	78d1      	ldrb	r1, [r2, #3]
10052938:	7912      	ldrb	r2, [r2, #4]
1005293a:	7282      	strb	r2, [r0, #10]
1005293c:	7241      	strb	r1, [r0, #9]
1005293e:	4770      	bx	lr

10052940 <hci_number_of_completed_packets_event_copy>:
10052940:	2200      	movs	r2, #0
10052942:	7102      	strb	r2, [r0, #4]
10052944:	2201      	movs	r2, #1
10052946:	70c2      	strb	r2, [r0, #3]
10052948:	7041      	strb	r1, [r0, #1]
1005294a:	7002      	strb	r2, [r0, #0]
1005294c:	0a09      	lsrs	r1, r1, #8
1005294e:	7081      	strb	r1, [r0, #2]
10052950:	4770      	bx	lr

10052952 <aci_gap_proc_complete_event_copy>:
10052952:	b510      	push	{r4, lr}
10052954:	7813      	ldrb	r3, [r2, #0]
10052956:	7183      	strb	r3, [r0, #6]
10052958:	7853      	ldrb	r3, [r2, #1]
1005295a:	1e8c      	subs	r4, r1, #2
1005295c:	7204      	strb	r4, [r0, #8]
1005295e:	71c3      	strb	r3, [r0, #7]
10052960:	3009      	adds	r0, #9
10052962:	1c91      	adds	r1, r2, #2
10052964:	b2e2      	uxtb	r2, r4
10052966:	f7fc ff6d 	bl	1004f844 <BLEPLAT_MemCpy>
1005296a:	bd10      	pop	{r4, pc}

1005296c <aci_l2cap_connection_update_req_event_copy>:
1005296c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005296e:	b085      	sub	sp, #20
10052970:	4617      	mov	r7, r2
10052972:	9103      	str	r1, [sp, #12]
10052974:	4604      	mov	r4, r0
10052976:	6850      	ldr	r0, [r2, #4]
10052978:	7a40      	ldrb	r0, [r0, #9]
1005297a:	9004      	str	r0, [sp, #16]
1005297c:	2106      	movs	r1, #6
1005297e:	4d16      	ldr	r5, [pc, #88]	@ (100529d8 <__arm_cp.42_0>)
10052980:	4610      	mov	r0, r2
10052982:	47a8      	blx	r5
10052984:	9002      	str	r0, [sp, #8]
10052986:	2108      	movs	r1, #8
10052988:	4638      	mov	r0, r7
1005298a:	47a8      	blx	r5
1005298c:	9001      	str	r0, [sp, #4]
1005298e:	210a      	movs	r1, #10
10052990:	4638      	mov	r0, r7
10052992:	47a8      	blx	r5
10052994:	4606      	mov	r6, r0
10052996:	210c      	movs	r1, #12
10052998:	4638      	mov	r0, r7
1005299a:	47a8      	blx	r5
1005299c:	462a      	mov	r2, r5
1005299e:	4605      	mov	r5, r0
100529a0:	210e      	movs	r1, #14
100529a2:	4638      	mov	r0, r7
100529a4:	4790      	blx	r2
100529a6:	7460      	strb	r0, [r4, #17]
100529a8:	0a29      	lsrs	r1, r5, #8
100529aa:	7421      	strb	r1, [r4, #16]
100529ac:	73e5      	strb	r5, [r4, #15]
100529ae:	0a31      	lsrs	r1, r6, #8
100529b0:	73a1      	strb	r1, [r4, #14]
100529b2:	7366      	strb	r6, [r4, #13]
100529b4:	9a01      	ldr	r2, [sp, #4]
100529b6:	0a11      	lsrs	r1, r2, #8
100529b8:	7321      	strb	r1, [r4, #12]
100529ba:	72e2      	strb	r2, [r4, #11]
100529bc:	9a02      	ldr	r2, [sp, #8]
100529be:	0a11      	lsrs	r1, r2, #8
100529c0:	72a1      	strb	r1, [r4, #10]
100529c2:	7262      	strb	r2, [r4, #9]
100529c4:	9a03      	ldr	r2, [sp, #12]
100529c6:	0a11      	lsrs	r1, r2, #8
100529c8:	71e1      	strb	r1, [r4, #7]
100529ca:	71a2      	strb	r2, [r4, #6]
100529cc:	9904      	ldr	r1, [sp, #16]
100529ce:	7221      	strb	r1, [r4, #8]
100529d0:	0a00      	lsrs	r0, r0, #8
100529d2:	74a0      	strb	r0, [r4, #18]
100529d4:	b005      	add	sp, #20
100529d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100529d8 <__arm_cp.42_0>:
100529d8:	10051fbf 	.word	0x10051fbf

100529dc <ACL_pkt_read_8b>:
100529dc:	b51c      	push	{r2, r3, r4, lr}
100529de:	291f      	cmp	r1, #31
100529e0:	d803      	bhi.n	100529ea <ACL_pkt_read_8b+0xe>
100529e2:	aa01      	add	r2, sp, #4
100529e4:	8011      	strh	r1, [r2, #0]
100529e6:	6840      	ldr	r0, [r0, #4]
100529e8:	e005      	b.n	100529f6 <ACL_pkt_read_8b+0x1a>
100529ea:	6840      	ldr	r0, [r0, #4]
100529ec:	ac01      	add	r4, sp, #4
100529ee:	4622      	mov	r2, r4
100529f0:	f00b fa87 	bl	1005df02 <Mem_Buff_get_buff_off>
100529f4:	8821      	ldrh	r1, [r4, #0]
100529f6:	1840      	adds	r0, r0, r1
100529f8:	7900      	ldrb	r0, [r0, #4]
100529fa:	bd1c      	pop	{r2, r3, r4, pc}

100529fc <aci_l2cap_command_reject_event_copy>:
100529fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100529fe:	4615      	mov	r5, r2
10052a00:	460e      	mov	r6, r1
10052a02:	4604      	mov	r4, r0
10052a04:	6850      	ldr	r0, [r2, #4]
10052a06:	7a40      	ldrb	r0, [r0, #9]
10052a08:	9000      	str	r0, [sp, #0]
10052a0a:	2106      	movs	r1, #6
10052a0c:	4610      	mov	r0, r2
10052a0e:	f7ff fad6 	bl	10051fbe <ACL_pkt_read_16b>
10052a12:	4607      	mov	r7, r0
10052a14:	2108      	movs	r1, #8
10052a16:	4628      	mov	r0, r5
10052a18:	f7ff fad1 	bl	10051fbe <ACL_pkt_read_16b>
10052a1c:	1eb9      	subs	r1, r7, #2
10052a1e:	72e1      	strb	r1, [r4, #11]
10052a20:	7260      	strb	r0, [r4, #9]
10052a22:	9a00      	ldr	r2, [sp, #0]
10052a24:	7222      	strb	r2, [r4, #8]
10052a26:	0a32      	lsrs	r2, r6, #8
10052a28:	71e2      	strb	r2, [r4, #7]
10052a2a:	71a6      	strb	r6, [r4, #6]
10052a2c:	0a00      	lsrs	r0, r0, #8
10052a2e:	72a0      	strb	r0, [r4, #10]
10052a30:	b2ca      	uxtb	r2, r1
10052a32:	89a8      	ldrh	r0, [r5, #12]
10052a34:	340c      	adds	r4, #12
10052a36:	1d80      	adds	r0, r0, #6
10052a38:	b281      	uxth	r1, r0
10052a3a:	4628      	mov	r0, r5
10052a3c:	4623      	mov	r3, r4
10052a3e:	f7ff fab5 	bl	10051fac <ACL_pkt_read>
10052a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10052a44 <aci_att_clt_find_info_resp_event_copy>:
10052a44:	b570      	push	{r4, r5, r6, lr}
10052a46:	461c      	mov	r4, r3
10052a48:	4605      	mov	r5, r0
10052a4a:	885e      	ldrh	r6, [r3, #2]
10052a4c:	0a10      	lsrs	r0, r2, #8
10052a4e:	70e8      	strb	r0, [r5, #3]
10052a50:	70aa      	strb	r2, [r5, #2]
10052a52:	0a08      	lsrs	r0, r1, #8
10052a54:	7068      	strb	r0, [r5, #1]
10052a56:	7029      	strb	r1, [r5, #0]
10052a58:	8998      	ldrh	r0, [r3, #12]
10052a5a:	1c40      	adds	r0, r0, #1
10052a5c:	b281      	uxth	r1, r0
10052a5e:	4618      	mov	r0, r3
10052a60:	f7ff ffbc 	bl	100529dc <ACL_pkt_read_8b>
10052a64:	1eb1      	subs	r1, r6, #2
10052a66:	0a0a      	lsrs	r2, r1, #8
10052a68:	71aa      	strb	r2, [r5, #6]
10052a6a:	7169      	strb	r1, [r5, #5]
10052a6c:	7128      	strb	r0, [r5, #4]
10052a6e:	89a0      	ldrh	r0, [r4, #12]
10052a70:	1deb      	adds	r3, r5, #7
10052a72:	b28a      	uxth	r2, r1
10052a74:	1c80      	adds	r0, r0, #2
10052a76:	b281      	uxth	r1, r0
10052a78:	4620      	mov	r0, r4
10052a7a:	f7ff fa97 	bl	10051fac <ACL_pkt_read>
10052a7e:	bd70      	pop	{r4, r5, r6, pc}

10052a80 <aci_att_clt_find_by_type_value_resp_event_copy>:
10052a80:	b5b0      	push	{r4, r5, r7, lr}
10052a82:	461c      	mov	r4, r3
10052a84:	885b      	ldrh	r3, [r3, #2]
10052a86:	0a15      	lsrs	r5, r2, #8
10052a88:	70c5      	strb	r5, [r0, #3]
10052a8a:	7082      	strb	r2, [r0, #2]
10052a8c:	0a0a      	lsrs	r2, r1, #8
10052a8e:	7042      	strb	r2, [r0, #1]
10052a90:	7001      	strb	r1, [r0, #0]
10052a92:	1e59      	subs	r1, r3, #1
10052a94:	088a      	lsrs	r2, r1, #2
10052a96:	7102      	strb	r2, [r0, #4]
10052a98:	89a5      	ldrh	r5, [r4, #12]
10052a9a:	1d43      	adds	r3, r0, #5
10052a9c:	b28a      	uxth	r2, r1
10052a9e:	1c68      	adds	r0, r5, #1
10052aa0:	b281      	uxth	r1, r0
10052aa2:	4620      	mov	r0, r4
10052aa4:	f7ff fa82 	bl	10051fac <ACL_pkt_read>
10052aa8:	bdb0      	pop	{r4, r5, r7, pc}

10052aaa <aci_att_clt_read_by_type_resp_event_copy>:
10052aaa:	b570      	push	{r4, r5, r6, lr}
10052aac:	461c      	mov	r4, r3
10052aae:	4605      	mov	r5, r0
10052ab0:	885e      	ldrh	r6, [r3, #2]
10052ab2:	0a10      	lsrs	r0, r2, #8
10052ab4:	70e8      	strb	r0, [r5, #3]
10052ab6:	70aa      	strb	r2, [r5, #2]
10052ab8:	0a08      	lsrs	r0, r1, #8
10052aba:	7068      	strb	r0, [r5, #1]
10052abc:	7029      	strb	r1, [r5, #0]
10052abe:	8998      	ldrh	r0, [r3, #12]
10052ac0:	1c40      	adds	r0, r0, #1
10052ac2:	b281      	uxth	r1, r0
10052ac4:	4618      	mov	r0, r3
10052ac6:	f7ff ff89 	bl	100529dc <ACL_pkt_read_8b>
10052aca:	1eb1      	subs	r1, r6, #2
10052acc:	0a0a      	lsrs	r2, r1, #8
10052ace:	71aa      	strb	r2, [r5, #6]
10052ad0:	7169      	strb	r1, [r5, #5]
10052ad2:	7128      	strb	r0, [r5, #4]
10052ad4:	89a0      	ldrh	r0, [r4, #12]
10052ad6:	1deb      	adds	r3, r5, #7
10052ad8:	b28a      	uxth	r2, r1
10052ada:	1c80      	adds	r0, r0, #2
10052adc:	b281      	uxth	r1, r0
10052ade:	4620      	mov	r0, r4
10052ae0:	f7ff fa64 	bl	10051fac <ACL_pkt_read>
10052ae4:	bd70      	pop	{r4, r5, r6, pc}

10052ae6 <aci_att_clt_read_resp_event_copy>:
10052ae6:	b5b0      	push	{r4, r5, r7, lr}
10052ae8:	461c      	mov	r4, r3
10052aea:	885b      	ldrh	r3, [r3, #2]
10052aec:	0a15      	lsrs	r5, r2, #8
10052aee:	70c5      	strb	r5, [r0, #3]
10052af0:	7082      	strb	r2, [r0, #2]
10052af2:	0a0a      	lsrs	r2, r1, #8
10052af4:	7042      	strb	r2, [r0, #1]
10052af6:	7001      	strb	r1, [r0, #0]
10052af8:	1e59      	subs	r1, r3, #1
10052afa:	7101      	strb	r1, [r0, #4]
10052afc:	0a0a      	lsrs	r2, r1, #8
10052afe:	7142      	strb	r2, [r0, #5]
10052b00:	89a5      	ldrh	r5, [r4, #12]
10052b02:	1d83      	adds	r3, r0, #6
10052b04:	b28a      	uxth	r2, r1
10052b06:	1c68      	adds	r0, r5, #1
10052b08:	b281      	uxth	r1, r0
10052b0a:	4620      	mov	r0, r4
10052b0c:	f7ff fa4e 	bl	10051fac <ACL_pkt_read>
10052b10:	bdb0      	pop	{r4, r5, r7, pc}

10052b12 <aci_att_clt_read_blob_resp_event_copy>:
10052b12:	b5b0      	push	{r4, r5, r7, lr}
10052b14:	461c      	mov	r4, r3
10052b16:	885b      	ldrh	r3, [r3, #2]
10052b18:	0a15      	lsrs	r5, r2, #8
10052b1a:	70c5      	strb	r5, [r0, #3]
10052b1c:	7082      	strb	r2, [r0, #2]
10052b1e:	0a0a      	lsrs	r2, r1, #8
10052b20:	7042      	strb	r2, [r0, #1]
10052b22:	7001      	strb	r1, [r0, #0]
10052b24:	1e59      	subs	r1, r3, #1
10052b26:	7101      	strb	r1, [r0, #4]
10052b28:	0a0a      	lsrs	r2, r1, #8
10052b2a:	7142      	strb	r2, [r0, #5]
10052b2c:	89a5      	ldrh	r5, [r4, #12]
10052b2e:	1d83      	adds	r3, r0, #6
10052b30:	b28a      	uxth	r2, r1
10052b32:	1c68      	adds	r0, r5, #1
10052b34:	b281      	uxth	r1, r0
10052b36:	4620      	mov	r0, r4
10052b38:	f7ff fa38 	bl	10051fac <ACL_pkt_read>
10052b3c:	bdb0      	pop	{r4, r5, r7, pc}

10052b3e <aci_att_clt_read_multiple_resp_event_copy>:
10052b3e:	b5b0      	push	{r4, r5, r7, lr}
10052b40:	461c      	mov	r4, r3
10052b42:	885b      	ldrh	r3, [r3, #2]
10052b44:	0a15      	lsrs	r5, r2, #8
10052b46:	70c5      	strb	r5, [r0, #3]
10052b48:	7082      	strb	r2, [r0, #2]
10052b4a:	0a0a      	lsrs	r2, r1, #8
10052b4c:	7042      	strb	r2, [r0, #1]
10052b4e:	7001      	strb	r1, [r0, #0]
10052b50:	1e59      	subs	r1, r3, #1
10052b52:	7101      	strb	r1, [r0, #4]
10052b54:	0a0a      	lsrs	r2, r1, #8
10052b56:	7142      	strb	r2, [r0, #5]
10052b58:	89a5      	ldrh	r5, [r4, #12]
10052b5a:	1d83      	adds	r3, r0, #6
10052b5c:	b28a      	uxth	r2, r1
10052b5e:	1c68      	adds	r0, r5, #1
10052b60:	b281      	uxth	r1, r0
10052b62:	4620      	mov	r0, r4
10052b64:	f7ff fa22 	bl	10051fac <ACL_pkt_read>
10052b68:	bdb0      	pop	{r4, r5, r7, pc}

10052b6a <aci_att_clt_read_by_group_type_resp_event_copy>:
10052b6a:	b570      	push	{r4, r5, r6, lr}
10052b6c:	461c      	mov	r4, r3
10052b6e:	4605      	mov	r5, r0
10052b70:	885e      	ldrh	r6, [r3, #2]
10052b72:	0a10      	lsrs	r0, r2, #8
10052b74:	70e8      	strb	r0, [r5, #3]
10052b76:	70aa      	strb	r2, [r5, #2]
10052b78:	0a08      	lsrs	r0, r1, #8
10052b7a:	7068      	strb	r0, [r5, #1]
10052b7c:	7029      	strb	r1, [r5, #0]
10052b7e:	8998      	ldrh	r0, [r3, #12]
10052b80:	1c40      	adds	r0, r0, #1
10052b82:	b281      	uxth	r1, r0
10052b84:	4618      	mov	r0, r3
10052b86:	f7ff ff29 	bl	100529dc <ACL_pkt_read_8b>
10052b8a:	1eb1      	subs	r1, r6, #2
10052b8c:	0a0a      	lsrs	r2, r1, #8
10052b8e:	71aa      	strb	r2, [r5, #6]
10052b90:	7169      	strb	r1, [r5, #5]
10052b92:	7128      	strb	r0, [r5, #4]
10052b94:	89a0      	ldrh	r0, [r4, #12]
10052b96:	1deb      	adds	r3, r5, #7
10052b98:	b28a      	uxth	r2, r1
10052b9a:	1c80      	adds	r0, r0, #2
10052b9c:	b281      	uxth	r1, r0
10052b9e:	4620      	mov	r0, r4
10052ba0:	f7ff fa04 	bl	10051fac <ACL_pkt_read>
10052ba4:	bd70      	pop	{r4, r5, r6, pc}

10052ba6 <aci_att_clt_prepare_write_resp_event_copy>:
10052ba6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10052ba8:	461c      	mov	r4, r3
10052baa:	4617      	mov	r7, r2
10052bac:	9102      	str	r1, [sp, #8]
10052bae:	4605      	mov	r5, r0
10052bb0:	8858      	ldrh	r0, [r3, #2]
10052bb2:	9001      	str	r0, [sp, #4]
10052bb4:	8998      	ldrh	r0, [r3, #12]
10052bb6:	1c40      	adds	r0, r0, #1
10052bb8:	b281      	uxth	r1, r0
10052bba:	4618      	mov	r0, r3
10052bbc:	f7ff f9ff 	bl	10051fbe <ACL_pkt_read_16b>
10052bc0:	4606      	mov	r6, r0
10052bc2:	89a0      	ldrh	r0, [r4, #12]
10052bc4:	1cc0      	adds	r0, r0, #3
10052bc6:	b281      	uxth	r1, r0
10052bc8:	4620      	mov	r0, r4
10052bca:	f7ff f9f8 	bl	10051fbe <ACL_pkt_read_16b>
10052bce:	9901      	ldr	r1, [sp, #4]
10052bd0:	1f49      	subs	r1, r1, #5
10052bd2:	0a0a      	lsrs	r2, r1, #8
10052bd4:	726a      	strb	r2, [r5, #9]
10052bd6:	7229      	strb	r1, [r5, #8]
10052bd8:	71a8      	strb	r0, [r5, #6]
10052bda:	0a32      	lsrs	r2, r6, #8
10052bdc:	716a      	strb	r2, [r5, #5]
10052bde:	712e      	strb	r6, [r5, #4]
10052be0:	0a3a      	lsrs	r2, r7, #8
10052be2:	70ea      	strb	r2, [r5, #3]
10052be4:	70af      	strb	r7, [r5, #2]
10052be6:	9b02      	ldr	r3, [sp, #8]
10052be8:	0a1a      	lsrs	r2, r3, #8
10052bea:	706a      	strb	r2, [r5, #1]
10052bec:	702b      	strb	r3, [r5, #0]
10052bee:	0a00      	lsrs	r0, r0, #8
10052bf0:	71e8      	strb	r0, [r5, #7]
10052bf2:	89a0      	ldrh	r0, [r4, #12]
10052bf4:	350a      	adds	r5, #10
10052bf6:	b28a      	uxth	r2, r1
10052bf8:	1d40      	adds	r0, r0, #5
10052bfa:	b281      	uxth	r1, r0
10052bfc:	4620      	mov	r0, r4
10052bfe:	462b      	mov	r3, r5
10052c00:	f7ff f9d4 	bl	10051fac <ACL_pkt_read>
10052c04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10052c06 <aci_gatt_clt_indication_event_copy>:
10052c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052c08:	461c      	mov	r4, r3
10052c0a:	4617      	mov	r7, r2
10052c0c:	460e      	mov	r6, r1
10052c0e:	4605      	mov	r5, r0
10052c10:	8858      	ldrh	r0, [r3, #2]
10052c12:	9000      	str	r0, [sp, #0]
10052c14:	8998      	ldrh	r0, [r3, #12]
10052c16:	1c40      	adds	r0, r0, #1
10052c18:	b281      	uxth	r1, r0
10052c1a:	4618      	mov	r0, r3
10052c1c:	f7ff f9cf 	bl	10051fbe <ACL_pkt_read_16b>
10052c20:	9900      	ldr	r1, [sp, #0]
10052c22:	1ec9      	subs	r1, r1, #3
10052c24:	0a0a      	lsrs	r2, r1, #8
10052c26:	71ea      	strb	r2, [r5, #7]
10052c28:	71a9      	strb	r1, [r5, #6]
10052c2a:	7128      	strb	r0, [r5, #4]
10052c2c:	0a3a      	lsrs	r2, r7, #8
10052c2e:	70ea      	strb	r2, [r5, #3]
10052c30:	70af      	strb	r7, [r5, #2]
10052c32:	0a32      	lsrs	r2, r6, #8
10052c34:	706a      	strb	r2, [r5, #1]
10052c36:	702e      	strb	r6, [r5, #0]
10052c38:	0a00      	lsrs	r0, r0, #8
10052c3a:	7168      	strb	r0, [r5, #5]
10052c3c:	89a0      	ldrh	r0, [r4, #12]
10052c3e:	3508      	adds	r5, #8
10052c40:	b28a      	uxth	r2, r1
10052c42:	1cc0      	adds	r0, r0, #3
10052c44:	b281      	uxth	r1, r0
10052c46:	4620      	mov	r0, r4
10052c48:	462b      	mov	r3, r5
10052c4a:	f7ff f9af 	bl	10051fac <ACL_pkt_read>
10052c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10052c50 <aci_gatt_clt_notification_event_copy>:
10052c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052c52:	461c      	mov	r4, r3
10052c54:	4617      	mov	r7, r2
10052c56:	460e      	mov	r6, r1
10052c58:	4605      	mov	r5, r0
10052c5a:	8858      	ldrh	r0, [r3, #2]
10052c5c:	9000      	str	r0, [sp, #0]
10052c5e:	8998      	ldrh	r0, [r3, #12]
10052c60:	1c40      	adds	r0, r0, #1
10052c62:	b281      	uxth	r1, r0
10052c64:	4618      	mov	r0, r3
10052c66:	f7ff f9aa 	bl	10051fbe <ACL_pkt_read_16b>
10052c6a:	9900      	ldr	r1, [sp, #0]
10052c6c:	1ec9      	subs	r1, r1, #3
10052c6e:	0a0a      	lsrs	r2, r1, #8
10052c70:	71ea      	strb	r2, [r5, #7]
10052c72:	71a9      	strb	r1, [r5, #6]
10052c74:	7128      	strb	r0, [r5, #4]
10052c76:	0a3a      	lsrs	r2, r7, #8
10052c78:	70ea      	strb	r2, [r5, #3]
10052c7a:	70af      	strb	r7, [r5, #2]
10052c7c:	0a32      	lsrs	r2, r6, #8
10052c7e:	706a      	strb	r2, [r5, #1]
10052c80:	702e      	strb	r6, [r5, #0]
10052c82:	0a00      	lsrs	r0, r0, #8
10052c84:	7168      	strb	r0, [r5, #5]
10052c86:	89a0      	ldrh	r0, [r4, #12]
10052c88:	3508      	adds	r5, #8
10052c8a:	b28a      	uxth	r2, r1
10052c8c:	1cc0      	adds	r0, r0, #3
10052c8e:	b281      	uxth	r1, r0
10052c90:	4620      	mov	r0, r4
10052c92:	462b      	mov	r3, r5
10052c94:	f7ff f98a 	bl	10051fac <ACL_pkt_read>
10052c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10052c9a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
10052c9a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10052c9c:	461d      	mov	r5, r3
10052c9e:	4604      	mov	r4, r0
10052ca0:	7202      	strb	r2, [r0, #8]
10052ca2:	7181      	strb	r1, [r0, #6]
10052ca4:	0a10      	lsrs	r0, r2, #8
10052ca6:	7260      	strb	r0, [r4, #9]
10052ca8:	0a08      	lsrs	r0, r1, #8
10052caa:	71e0      	strb	r0, [r4, #7]
10052cac:	9e07      	ldr	r6, [sp, #28]
10052cae:	89b0      	ldrh	r0, [r6, #12]
10052cb0:	18c0      	adds	r0, r0, r3
10052cb2:	b281      	uxth	r1, r0
10052cb4:	2202      	movs	r2, #2
10052cb6:	ab01      	add	r3, sp, #4
10052cb8:	4630      	mov	r0, r6
10052cba:	f7ff f977 	bl	10051fac <ACL_pkt_read>
10052cbe:	9806      	ldr	r0, [sp, #24]
10052cc0:	1e80      	subs	r0, r0, #2
10052cc2:	7320      	strb	r0, [r4, #12]
10052cc4:	9901      	ldr	r1, [sp, #4]
10052cc6:	72a1      	strb	r1, [r4, #10]
10052cc8:	0a09      	lsrs	r1, r1, #8
10052cca:	72e1      	strb	r1, [r4, #11]
10052ccc:	89b1      	ldrh	r1, [r6, #12]
10052cce:	1869      	adds	r1, r5, r1
10052cd0:	1c89      	adds	r1, r1, #2
10052cd2:	b289      	uxth	r1, r1
10052cd4:	340d      	adds	r4, #13
10052cd6:	b2c2      	uxtb	r2, r0
10052cd8:	4630      	mov	r0, r6
10052cda:	4623      	mov	r3, r4
10052cdc:	f7ff f966 	bl	10051fac <ACL_pkt_read>
10052ce0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10052ce2 <aci_gatt_srv_write_event_copy>:
10052ce2:	b5b0      	push	{r4, r5, r7, lr}
10052ce4:	4615      	mov	r5, r2
10052ce6:	4604      	mov	r4, r0
10052ce8:	9a05      	ldr	r2, [sp, #20]
10052cea:	71c2      	strb	r2, [r0, #7]
10052cec:	9804      	ldr	r0, [sp, #16]
10052cee:	7160      	strb	r0, [r4, #5]
10052cf0:	7123      	strb	r3, [r4, #4]
10052cf2:	70a5      	strb	r5, [r4, #2]
10052cf4:	7021      	strb	r1, [r4, #0]
10052cf6:	0a13      	lsrs	r3, r2, #8
10052cf8:	7223      	strb	r3, [r4, #8]
10052cfa:	0a00      	lsrs	r0, r0, #8
10052cfc:	71a0      	strb	r0, [r4, #6]
10052cfe:	0a28      	lsrs	r0, r5, #8
10052d00:	70e0      	strb	r0, [r4, #3]
10052d02:	0a08      	lsrs	r0, r1, #8
10052d04:	7060      	strb	r0, [r4, #1]
10052d06:	9806      	ldr	r0, [sp, #24]
10052d08:	8981      	ldrh	r1, [r0, #12]
10052d0a:	3409      	adds	r4, #9
10052d0c:	1cc9      	adds	r1, r1, #3
10052d0e:	b289      	uxth	r1, r1
10052d10:	4623      	mov	r3, r4
10052d12:	f7ff f94b 	bl	10051fac <ACL_pkt_read>
10052d16:	bdb0      	pop	{r4, r5, r7, pc}

10052d18 <aci_att_srv_prepare_write_req_event_copy>:
10052d18:	b570      	push	{r4, r5, r6, lr}
10052d1a:	4615      	mov	r5, r2
10052d1c:	4604      	mov	r4, r0
10052d1e:	9a05      	ldr	r2, [sp, #20]
10052d20:	7202      	strb	r2, [r0, #8]
10052d22:	9804      	ldr	r0, [sp, #16]
10052d24:	71a0      	strb	r0, [r4, #6]
10052d26:	7123      	strb	r3, [r4, #4]
10052d28:	70a5      	strb	r5, [r4, #2]
10052d2a:	7021      	strb	r1, [r4, #0]
10052d2c:	0a16      	lsrs	r6, r2, #8
10052d2e:	7266      	strb	r6, [r4, #9]
10052d30:	0a00      	lsrs	r0, r0, #8
10052d32:	71e0      	strb	r0, [r4, #7]
10052d34:	0a18      	lsrs	r0, r3, #8
10052d36:	7160      	strb	r0, [r4, #5]
10052d38:	0a28      	lsrs	r0, r5, #8
10052d3a:	70e0      	strb	r0, [r4, #3]
10052d3c:	0a08      	lsrs	r0, r1, #8
10052d3e:	7060      	strb	r0, [r4, #1]
10052d40:	9806      	ldr	r0, [sp, #24]
10052d42:	8981      	ldrh	r1, [r0, #12]
10052d44:	340a      	adds	r4, #10
10052d46:	1d49      	adds	r1, r1, #5
10052d48:	b289      	uxth	r1, r1
10052d4a:	4623      	mov	r3, r4
10052d4c:	f7ff f92e 	bl	10051fac <ACL_pkt_read>
10052d50:	bd70      	pop	{r4, r5, r6, pc}

10052d52 <aci_gatt_clt_multi_notification_int_event_copy>:
10052d52:	b5b0      	push	{r4, r5, r7, lr}
10052d54:	461c      	mov	r4, r3
10052d56:	885b      	ldrh	r3, [r3, #2]
10052d58:	0a15      	lsrs	r5, r2, #8
10052d5a:	70c5      	strb	r5, [r0, #3]
10052d5c:	7082      	strb	r2, [r0, #2]
10052d5e:	0a0a      	lsrs	r2, r1, #8
10052d60:	7042      	strb	r2, [r0, #1]
10052d62:	7001      	strb	r1, [r0, #0]
10052d64:	1e59      	subs	r1, r3, #1
10052d66:	7101      	strb	r1, [r0, #4]
10052d68:	0a0a      	lsrs	r2, r1, #8
10052d6a:	7142      	strb	r2, [r0, #5]
10052d6c:	89a5      	ldrh	r5, [r4, #12]
10052d6e:	1d83      	adds	r3, r0, #6
10052d70:	b28a      	uxth	r2, r1
10052d72:	1c68      	adds	r0, r5, #1
10052d74:	b281      	uxth	r1, r0
10052d76:	4620      	mov	r0, r4
10052d78:	f7ff f918 	bl	10051fac <ACL_pkt_read>
10052d7c:	bdb0      	pop	{r4, r5, r7, pc}

10052d7e <aci_att_clt_read_multiple_var_len_resp_event_copy>:
10052d7e:	b5b0      	push	{r4, r5, r7, lr}
10052d80:	461c      	mov	r4, r3
10052d82:	885b      	ldrh	r3, [r3, #2]
10052d84:	0a15      	lsrs	r5, r2, #8
10052d86:	70c5      	strb	r5, [r0, #3]
10052d88:	7082      	strb	r2, [r0, #2]
10052d8a:	0a0a      	lsrs	r2, r1, #8
10052d8c:	7042      	strb	r2, [r0, #1]
10052d8e:	7001      	strb	r1, [r0, #0]
10052d90:	1e59      	subs	r1, r3, #1
10052d92:	7101      	strb	r1, [r0, #4]
10052d94:	0a0a      	lsrs	r2, r1, #8
10052d96:	7142      	strb	r2, [r0, #5]
10052d98:	89a5      	ldrh	r5, [r4, #12]
10052d9a:	1d83      	adds	r3, r0, #6
10052d9c:	b28a      	uxth	r2, r1
10052d9e:	1c68      	adds	r0, r5, #1
10052da0:	b281      	uxth	r1, r0
10052da2:	4620      	mov	r0, r4
10052da4:	f7ff f902 	bl	10051fac <ACL_pkt_read>
10052da8:	bdb0      	pop	{r4, r5, r7, pc}

10052daa <hci_rx_acl_data_event_copy>:
10052daa:	b5b0      	push	{r4, r5, r7, lr}
10052dac:	4614      	mov	r4, r2
10052dae:	9a04      	ldr	r2, [sp, #16]
10052db0:	70c2      	strb	r2, [r0, #3]
10052db2:	7041      	strb	r1, [r0, #1]
10052db4:	0a15      	lsrs	r5, r2, #8
10052db6:	7105      	strb	r5, [r0, #4]
10052db8:	250f      	movs	r5, #15
10052dba:	022d      	lsls	r5, r5, #8
10052dbc:	400d      	ands	r5, r1
10052dbe:	07a1      	lsls	r1, r4, #30
10052dc0:	0c89      	lsrs	r1, r1, #18
10052dc2:	1949      	adds	r1, r1, r5
10052dc4:	039b      	lsls	r3, r3, #14
10052dc6:	18c9      	adds	r1, r1, r3
10052dc8:	0a09      	lsrs	r1, r1, #8
10052dca:	7081      	strb	r1, [r0, #2]
10052dcc:	1d43      	adds	r3, r0, #5
10052dce:	9805      	ldr	r0, [sp, #20]
10052dd0:	2100      	movs	r1, #0
10052dd2:	f7ff f8eb 	bl	10051fac <ACL_pkt_read>
10052dd6:	bdb0      	pop	{r4, r5, r7, pc}

10052dd8 <aci_l2cap_proc_timeout_event_copy>:
10052dd8:	7001      	strb	r1, [r0, #0]
10052dda:	2200      	movs	r2, #0
10052ddc:	7082      	strb	r2, [r0, #2]
10052dde:	0a09      	lsrs	r1, r1, #8
10052de0:	7041      	strb	r1, [r0, #1]
10052de2:	4770      	bx	lr

10052de4 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10052de4:	2000      	movs	r0, #0
10052de6:	4770      	bx	lr

10052de8 <hci_hardware_error_event_cb>:
10052de8:	b5e0      	push	{r5, r6, r7, lr}
10052dea:	aa01      	add	r2, sp, #4
10052dec:	70d0      	strb	r0, [r2, #3]
10052dee:	2001      	movs	r0, #1
10052df0:	7090      	strb	r0, [r2, #2]
10052df2:	2010      	movs	r0, #16
10052df4:	7050      	strb	r0, [r2, #1]
10052df6:	2104      	movs	r1, #4
10052df8:	7011      	strb	r1, [r2, #0]
10052dfa:	4610      	mov	r0, r2
10052dfc:	f7f8 ff16 	bl	1004bc2c <BLE_STACK_Event>
10052e00:	bd8c      	pop	{r2, r3, r7, pc}

10052e02 <GAP_enable_disable_scan_ucfg_weak>:
10052e02:	2000      	movs	r0, #0
10052e04:	4770      	bx	lr

10052e06 <GAP_discover_peer_name_ucfg_weak>:
10052e06:	2000      	movs	r0, #0
10052e08:	4770      	bx	lr
	...

10052e0c <GAP_name_disc_proc_connected_check>:
10052e0c:	b51c      	push	{r2, r3, r4, lr}
10052e0e:	4811      	ldr	r0, [pc, #68]	@ (10052e54 <__arm_cp.18_0>)
10052e10:	6804      	ldr	r4, [r0, #0]
10052e12:	f7ff fff8 	bl	10052e06 <GAP_discover_peer_name_ucfg_weak>
10052e16:	2888      	cmp	r0, #136	@ 0x88
10052e18:	d007      	beq.n	10052e2a <GAP_name_disc_proc_connected_check+0x1e>
10052e1a:	280c      	cmp	r0, #12
10052e1c:	d005      	beq.n	10052e2a <GAP_name_disc_proc_connected_check+0x1e>
10052e1e:	345d      	adds	r4, #93	@ 0x5d
10052e20:	2800      	cmp	r0, #0
10052e22:	d108      	bne.n	10052e36 <GAP_name_disc_proc_connected_check+0x2a>
10052e24:	2002      	movs	r0, #2
10052e26:	7060      	strb	r0, [r4, #1]
10052e28:	bd1c      	pop	{r2, r3, r4, pc}
10052e2a:	2005      	movs	r0, #5
10052e2c:	f00c fda0 	bl	1005f970 <tsk_notify_idx>
10052e30:	f7fb ff47 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10052e34:	bd1c      	pop	{r2, r3, r4, pc}
10052e36:	2000      	movs	r0, #0
10052e38:	7060      	strb	r0, [r4, #1]
10052e3a:	7820      	ldrb	r0, [r4, #0]
10052e3c:	217f      	movs	r1, #127	@ 0x7f
10052e3e:	4001      	ands	r1, r0
10052e40:	7021      	strb	r1, [r4, #0]
10052e42:	a901      	add	r1, sp, #4
10052e44:	2086      	movs	r0, #134	@ 0x86
10052e46:	7048      	strb	r0, [r1, #1]
10052e48:	2080      	movs	r0, #128	@ 0x80
10052e4a:	7008      	strb	r0, [r1, #0]
10052e4c:	2002      	movs	r0, #2
10052e4e:	f000 f9bf 	bl	100531d0 <aci_gap_proc_complete_event_wrapper>
10052e52:	bd1c      	pop	{r2, r3, r4, pc}

10052e54 <__arm_cp.18_0>:
10052e54:	20000ed4 	.word	0x20000ed4

10052e58 <GAP_central_connection_complete_handler_ucfg_weak>:
10052e58:	4770      	bx	lr

10052e5a <GAP_DiscProcTimeoutcb_ucfg_weak>:
10052e5a:	4770      	bx	lr

10052e5c <GAP_started_gatt_proc>:
10052e5c:	4907      	ldr	r1, [pc, #28]	@ (10052e7c <__arm_cp.28_0>)
10052e5e:	6809      	ldr	r1, [r1, #0]
10052e60:	225d      	movs	r2, #93	@ 0x5d
10052e62:	5c8a      	ldrb	r2, [r1, r2]
10052e64:	2388      	movs	r3, #136	@ 0x88
10052e66:	421a      	tst	r2, r3
10052e68:	d004      	beq.n	10052e74 <GAP_started_gatt_proc+0x18>
10052e6a:	3172      	adds	r1, #114	@ 0x72
10052e6c:	8809      	ldrh	r1, [r1, #0]
10052e6e:	4041      	eors	r1, r0
10052e70:	0508      	lsls	r0, r1, #20
10052e72:	d001      	beq.n	10052e78 <GAP_started_gatt_proc+0x1c>
10052e74:	2000      	movs	r0, #0
10052e76:	4770      	bx	lr
10052e78:	2001      	movs	r0, #1
10052e7a:	4770      	bx	lr

10052e7c <__arm_cp.28_0>:
10052e7c:	20000ed4 	.word	0x20000ed4

10052e80 <gap_timers_callback_wrapper>:
10052e80:	b580      	push	{r7, lr}
10052e82:	6940      	ldr	r0, [r0, #20]
10052e84:	4901      	ldr	r1, [pc, #4]	@ (10052e8c <__arm_cp.0_0>)
10052e86:	f00c feaa 	bl	1005fbde <cst_sharedCallback>
10052e8a:	bd80      	pop	{r7, pc}

10052e8c <__arm_cp.0_0>:
10052e8c:	10052e91 	.word	0x10052e91

10052e90 <gap_timers_callback>:
10052e90:	b580      	push	{r7, lr}
10052e92:	2802      	cmp	r0, #2
10052e94:	d007      	beq.n	10052ea6 <gap_timers_callback+0x16>
10052e96:	2801      	cmp	r0, #1
10052e98:	d009      	beq.n	10052eae <gap_timers_callback+0x1e>
10052e9a:	2800      	cmp	r0, #0
10052e9c:	d106      	bne.n	10052eac <gap_timers_callback+0x1c>
10052e9e:	2000      	movs	r0, #0
10052ea0:	f7f8 ff3f 	bl	1004bd22 <GAP_LimDiscTimeoutcb_ucfg>
10052ea4:	bd80      	pop	{r7, pc}
10052ea6:	2000      	movs	r0, #0
10052ea8:	f7ff ffd7 	bl	10052e5a <GAP_DiscProcTimeoutcb_ucfg_weak>
10052eac:	bd80      	pop	{r7, pc}
10052eae:	2000      	movs	r0, #0
10052eb0:	f000 f802 	bl	10052eb8 <GAP_PrivateAddrTimercb>
10052eb4:	bd80      	pop	{r7, pc}
	...

10052eb8 <GAP_PrivateAddrTimercb>:
10052eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10052eba:	b087      	sub	sp, #28
10052ebc:	4831      	ldr	r0, [pc, #196]	@ (10052f84 <__arm_cp.2_0>)
10052ebe:	6804      	ldr	r4, [r0, #0]
10052ec0:	a906      	add	r1, sp, #24
10052ec2:	9104      	str	r1, [sp, #16]
10052ec4:	2000      	movs	r0, #0
10052ec6:	9001      	str	r0, [sp, #4]
10052ec8:	7008      	strb	r0, [r1, #0]
10052eca:	ae05      	add	r6, sp, #20
10052ecc:	2001      	movs	r0, #1
10052ece:	7030      	strb	r0, [r6, #0]
10052ed0:	f000 f950 	bl	10053174 <GAP_reset_privacy_timer>
10052ed4:	205d      	movs	r0, #93	@ 0x5d
10052ed6:	9403      	str	r4, [sp, #12]
10052ed8:	5c27      	ldrb	r7, [r4, r0]
10052eda:	1e78      	subs	r0, r7, #1
10052edc:	463d      	mov	r5, r7
10052ede:	4185      	sbcs	r5, r0
10052ee0:	2020      	movs	r0, #32
10052ee2:	4038      	ands	r0, r7
10052ee4:	4244      	negs	r4, r0
10052ee6:	9002      	str	r0, [sp, #8]
10052ee8:	4144      	adcs	r4, r0
10052eea:	9804      	ldr	r0, [sp, #16]
10052eec:	4631      	mov	r1, r6
10052eee:	f000 fd51 	bl	10053994 <GAP_check_adv_status>
10052ef2:	2f00      	cmp	r7, #0
10052ef4:	d101      	bne.n	10052efa <GAP_PrivateAddrTimercb+0x42>
10052ef6:	2801      	cmp	r0, #1
10052ef8:	d13e      	bne.n	10052f78 <GAP_PrivateAddrTimercb+0xc0>
10052efa:	402c      	ands	r4, r5
10052efc:	d138      	bne.n	10052f70 <GAP_PrivateAddrTimercb+0xb8>
10052efe:	a805      	add	r0, sp, #20
10052f00:	7800      	ldrb	r0, [r0, #0]
10052f02:	2800      	cmp	r0, #0
10052f04:	d034      	beq.n	10052f70 <GAP_PrivateAddrTimercb+0xb8>
10052f06:	9c03      	ldr	r4, [sp, #12]
10052f08:	4620      	mov	r0, r4
10052f0a:	305d      	adds	r0, #93	@ 0x5d
10052f0c:	7bc0      	ldrb	r0, [r0, #15]
10052f0e:	2800      	cmp	r0, #0
10052f10:	d034      	beq.n	10052f7c <GAP_PrivateAddrTimercb+0xc4>
10052f12:	3428      	adds	r4, #40	@ 0x28
10052f14:	9d02      	ldr	r5, [sp, #8]
10052f16:	2d00      	cmp	r5, #0
10052f18:	d003      	beq.n	10052f22 <GAP_PrivateAddrTimercb+0x6a>
10052f1a:	7821      	ldrb	r1, [r4, #0]
10052f1c:	2000      	movs	r0, #0
10052f1e:	f7ff ff70 	bl	10052e02 <GAP_enable_disable_scan_ucfg_weak>
10052f22:	a806      	add	r0, sp, #24
10052f24:	7800      	ldrb	r0, [r0, #0]
10052f26:	2801      	cmp	r0, #1
10052f28:	d102      	bne.n	10052f30 <GAP_PrivateAddrTimercb+0x78>
10052f2a:	2000      	movs	r0, #0
10052f2c:	f000 fcf6 	bl	1005391c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10052f30:	f000 fafc 	bl	1005352c <GAP_generate_new_rpa>
10052f34:	2800      	cmp	r0, #0
10052f36:	d104      	bne.n	10052f42 <GAP_PrivateAddrTimercb+0x8a>
10052f38:	2000      	movs	r0, #0
10052f3a:	2101      	movs	r1, #1
10052f3c:	f000 face 	bl	100534dc <GAP_start_privacy_timer>
10052f40:	9001      	str	r0, [sp, #4]
10052f42:	2d00      	cmp	r5, #0
10052f44:	d00a      	beq.n	10052f5c <GAP_PrivateAddrTimercb+0xa4>
10052f46:	7821      	ldrb	r1, [r4, #0]
10052f48:	2001      	movs	r0, #1
10052f4a:	f7ff ff5a 	bl	10052e02 <GAP_enable_disable_scan_ucfg_weak>
10052f4e:	2800      	cmp	r0, #0
10052f50:	d004      	beq.n	10052f5c <GAP_PrivateAddrTimercb+0xa4>
10052f52:	9801      	ldr	r0, [sp, #4]
10052f54:	2800      	cmp	r0, #0
10052f56:	d001      	beq.n	10052f5c <GAP_PrivateAddrTimercb+0xa4>
10052f58:	f000 fa2c 	bl	100533b4 <GAP_stop_privacy_timer>
10052f5c:	a806      	add	r0, sp, #24
10052f5e:	7800      	ldrb	r0, [r0, #0]
10052f60:	2801      	cmp	r0, #1
10052f62:	d109      	bne.n	10052f78 <GAP_PrivateAddrTimercb+0xc0>
10052f64:	2006      	movs	r0, #6
10052f66:	f00c fd03 	bl	1005f970 <tsk_notify_idx>
10052f6a:	f7fb feaa 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10052f6e:	e003      	b.n	10052f78 <GAP_PrivateAddrTimercb+0xc0>
10052f70:	2001      	movs	r0, #1
10052f72:	4601      	mov	r1, r0
10052f74:	f000 fab2 	bl	100534dc <GAP_start_privacy_timer>
10052f78:	b007      	add	sp, #28
10052f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10052f7c:	2000      	movs	r0, #0
10052f7e:	2101      	movs	r1, #1
10052f80:	e7f8      	b.n	10052f74 <GAP_PrivateAddrTimercb+0xbc>
10052f82:	46c0      	nop			@ (mov r8, r8)

10052f84 <__arm_cp.2_0>:
10052f84:	20000ed4 	.word	0x20000ed4

10052f88 <GAP_init_context>:
10052f88:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10052f8a:	461f      	mov	r7, r3
10052f8c:	9201      	str	r2, [sp, #4]
10052f8e:	9102      	str	r1, [sp, #8]
10052f90:	4605      	mov	r5, r0
10052f92:	2401      	movs	r4, #1
10052f94:	2178      	movs	r1, #120	@ 0x78
10052f96:	4620      	mov	r0, r4
10052f98:	f00a ff14 	bl	1005ddc4 <csmem_mem_0_assign>
10052f9c:	21e1      	movs	r1, #225	@ 0xe1
10052f9e:	0089      	lsls	r1, r1, #2
10052fa0:	225a      	movs	r2, #90	@ 0x5a
10052fa2:	5281      	strh	r1, [r0, r2]
10052fa4:	4e24      	ldr	r6, [pc, #144]	@ (10053038 <__arm_cp.3_0>)
10052fa6:	6030      	str	r0, [r6, #0]
10052fa8:	2d01      	cmp	r5, #1
10052faa:	d117      	bne.n	10052fdc <GAP_init_context+0x54>
10052fac:	2001      	movs	r0, #1
10052fae:	2106      	movs	r1, #6
10052fb0:	f00a ff08 	bl	1005ddc4 <csmem_mem_0_assign>
10052fb4:	4601      	mov	r1, r0
10052fb6:	6830      	ldr	r0, [r6, #0]
10052fb8:	6381      	str	r1, [r0, #56]	@ 0x38
10052fba:	2f01      	cmp	r7, #1
10052fbc:	d10e      	bne.n	10052fdc <GAP_init_context+0x54>
10052fbe:	2501      	movs	r5, #1
10052fc0:	270e      	movs	r7, #14
10052fc2:	4628      	mov	r0, r5
10052fc4:	4639      	mov	r1, r7
10052fc6:	f00a fefd 	bl	1005ddc4 <csmem_mem_0_assign>
10052fca:	6831      	ldr	r1, [r6, #0]
10052fcc:	64c8      	str	r0, [r1, #76]	@ 0x4c
10052fce:	4628      	mov	r0, r5
10052fd0:	4639      	mov	r1, r7
10052fd2:	f00a fef7 	bl	1005ddc4 <csmem_mem_0_assign>
10052fd6:	4601      	mov	r1, r0
10052fd8:	6830      	ldr	r0, [r6, #0]
10052fda:	6501      	str	r1, [r0, #80]	@ 0x50
10052fdc:	9902      	ldr	r1, [sp, #8]
10052fde:	2901      	cmp	r1, #1
10052fe0:	d10b      	bne.n	10052ffa <GAP_init_context+0x72>
10052fe2:	9801      	ldr	r0, [sp, #4]
10052fe4:	2801      	cmp	r0, #1
10052fe6:	d105      	bne.n	10052ff4 <GAP_init_context+0x6c>
10052fe8:	201c      	movs	r0, #28
10052fea:	2101      	movs	r1, #1
10052fec:	f00a feea 	bl	1005ddc4 <csmem_mem_0_assign>
10052ff0:	6831      	ldr	r1, [r6, #0]
10052ff2:	62c8      	str	r0, [r1, #44]	@ 0x2c
10052ff4:	4811      	ldr	r0, [pc, #68]	@ (1005303c <__arm_cp.3_1>)
10052ff6:	7e84      	ldrb	r4, [r0, #26]
10052ff8:	e001      	b.n	10052ffe <GAP_init_context+0x76>
10052ffa:	2100      	movs	r1, #0
10052ffc:	62c1      	str	r1, [r0, #44]	@ 0x2c
10052ffe:	2114      	movs	r1, #20
10053000:	4620      	mov	r0, r4
10053002:	f00a fedf 	bl	1005ddc4 <csmem_mem_0_assign>
10053006:	6831      	ldr	r1, [r6, #0]
10053008:	6548      	str	r0, [r1, #84]	@ 0x54
1005300a:	4c0d      	ldr	r4, [pc, #52]	@ (10053040 <__arm_cp.3_2>)
1005300c:	2104      	movs	r1, #4
1005300e:	2201      	movs	r2, #1
10053010:	4620      	mov	r0, r4
10053012:	f00a fec5 	bl	1005dda0 <csmem_mem_assign>
10053016:	6831      	ldr	r1, [r6, #0]
10053018:	6208      	str	r0, [r1, #32]
1005301a:	2503      	movs	r5, #3
1005301c:	2202      	movs	r2, #2
1005301e:	4620      	mov	r0, r4
10053020:	4629      	mov	r1, r5
10053022:	f00a febd 	bl	1005dda0 <csmem_mem_assign>
10053026:	6831      	ldr	r1, [r6, #0]
10053028:	6248      	str	r0, [r1, #36]	@ 0x24
1005302a:	4a06      	ldr	r2, [pc, #24]	@ (10053044 <__arm_cp.3_3>)
1005302c:	2307      	movs	r3, #7
1005302e:	4608      	mov	r0, r1
10053030:	4629      	mov	r1, r5
10053032:	f00c fcfb 	bl	1005fa2c <CST_init>
10053036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053038 <__arm_cp.3_0>:
10053038:	20000ed4 	.word	0x20000ed4

1005303c <__arm_cp.3_1>:
1005303c:	20000f34 	.word	0x20000f34

10053040 <__arm_cp.3_2>:
10053040:	20000f30 	.word	0x20000f30

10053044 <__arm_cp.3_3>:
10053044:	10052e81 	.word	0x10052e81

10053048 <GAP_get_default_le_event_mask>:
10053048:	b5b0      	push	{r4, r5, r7, lr}
1005304a:	4604      	mov	r4, r0
1005304c:	2100      	movs	r1, #0
1005304e:	2508      	movs	r5, #8
10053050:	462a      	mov	r2, r5
10053052:	f7fc fc07 	bl	1004f864 <BLEPLAT_MemSet>
10053056:	7820      	ldrb	r0, [r4, #0]
10053058:	21df      	movs	r1, #223	@ 0xdf
1005305a:	4301      	orrs	r1, r0
1005305c:	7021      	strb	r1, [r4, #0]
1005305e:	7860      	ldrb	r0, [r4, #1]
10053060:	2109      	movs	r1, #9
10053062:	4301      	orrs	r1, r0
10053064:	7061      	strb	r1, [r4, #1]
10053066:	78a1      	ldrb	r1, [r4, #2]
10053068:	4329      	orrs	r1, r5
1005306a:	70a1      	strb	r1, [r4, #2]
1005306c:	4911      	ldr	r1, [pc, #68]	@ (100530b4 <__arm_cp.4_0>)
1005306e:	6809      	ldr	r1, [r1, #0]
10053070:	225c      	movs	r2, #92	@ 0x5c
10053072:	5c89      	ldrb	r1, [r1, r2]
10053074:	0689      	lsls	r1, r1, #26
10053076:	d502      	bpl.n	1005307e <GAP_get_default_le_event_mask+0x36>
10053078:	210f      	movs	r1, #15
1005307a:	4308      	orrs	r0, r1
1005307c:	7060      	strb	r0, [r4, #1]
1005307e:	f009 ff09 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
10053082:	2801      	cmp	r0, #1
10053084:	d107      	bne.n	10053096 <GAP_get_default_le_event_mask+0x4e>
10053086:	7860      	ldrb	r0, [r4, #1]
10053088:	2112      	movs	r1, #18
1005308a:	4301      	orrs	r1, r0
1005308c:	7061      	strb	r1, [r4, #1]
1005308e:	78a0      	ldrb	r0, [r4, #2]
10053090:	2107      	movs	r1, #7
10053092:	4301      	orrs	r1, r0
10053094:	70a1      	strb	r1, [r4, #2]
10053096:	f005 fdbf 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005309a:	b2c0      	uxtb	r0, r0
1005309c:	2801      	cmp	r0, #1
1005309e:	d107      	bne.n	100530b0 <GAP_get_default_le_event_mask+0x68>
100530a0:	7860      	ldrb	r0, [r4, #1]
100530a2:	21e0      	movs	r1, #224	@ 0xe0
100530a4:	4301      	orrs	r1, r0
100530a6:	7061      	strb	r1, [r4, #1]
100530a8:	78a0      	ldrb	r0, [r4, #2]
100530aa:	2180      	movs	r1, #128	@ 0x80
100530ac:	4301      	orrs	r1, r0
100530ae:	70a1      	strb	r1, [r4, #2]
100530b0:	bdb0      	pop	{r4, r5, r7, pc}
100530b2:	46c0      	nop			@ (mov r8, r8)

100530b4 <__arm_cp.4_0>:
100530b4:	20000ed4 	.word	0x20000ed4

100530b8 <gap_extended_adv_scan_supported>:
100530b8:	b580      	push	{r7, lr}
100530ba:	f009 feeb 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
100530be:	bd80      	pop	{r7, pc}

100530c0 <GAP_Init>:
100530c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100530c2:	b085      	sub	sp, #20
100530c4:	4605      	mov	r5, r0
100530c6:	a804      	add	r0, sp, #16
100530c8:	2700      	movs	r7, #0
100530ca:	7007      	strb	r7, [r0, #0]
100530cc:	2412      	movs	r4, #18
100530ce:	2901      	cmp	r1, #1
100530d0:	d901      	bls.n	100530d6 <GAP_Init+0x16>
100530d2:	4620      	mov	r0, r4
100530d4:	e048      	b.n	10053168 <GAP_Init+0xa8>
100530d6:	460e      	mov	r6, r1
100530d8:	4824      	ldr	r0, [pc, #144]	@ (1005316c <__arm_cp.7_0>)
100530da:	6800      	ldr	r0, [r0, #0]
100530dc:	9000      	str	r0, [sp, #0]
100530de:	f00c ff85 	bl	1005ffec <IDD_Initialize_Device_IDs>
100530e2:	2800      	cmp	r0, #0
100530e4:	d140      	bne.n	10053168 <GAP_Init+0xa8>
100530e6:	9900      	ldr	r1, [sp, #0]
100530e8:	315c      	adds	r1, #92	@ 0x5c
100530ea:	7808      	ldrb	r0, [r1, #0]
100530ec:	07c0      	lsls	r0, r0, #31
100530ee:	d111      	bne.n	10053114 <GAP_Init+0x54>
100530f0:	78c8      	ldrb	r0, [r1, #3]
100530f2:	4330      	orrs	r0, r6
100530f4:	460e      	mov	r6, r1
100530f6:	70c8      	strb	r0, [r1, #3]
100530f8:	a803      	add	r0, sp, #12
100530fa:	2107      	movs	r1, #7
100530fc:	7001      	strb	r1, [r0, #0]
100530fe:	2d00      	cmp	r5, #0
10053100:	d012      	beq.n	10053128 <GAP_Init+0x68>
10053102:	2d02      	cmp	r5, #2
10053104:	d008      	beq.n	10053118 <GAP_Init+0x58>
10053106:	2d01      	cmp	r5, #1
10053108:	4620      	mov	r0, r4
1005310a:	d12d      	bne.n	10053168 <GAP_Init+0xa8>
1005310c:	a804      	add	r0, sp, #16
1005310e:	2110      	movs	r1, #16
10053110:	7001      	strb	r1, [r0, #0]
10053112:	e009      	b.n	10053128 <GAP_Init+0x68>
10053114:	200c      	movs	r0, #12
10053116:	e027      	b.n	10053168 <GAP_Init+0xa8>
10053118:	a804      	add	r0, sp, #16
1005311a:	2120      	movs	r1, #32
1005311c:	7001      	strb	r1, [r0, #0]
1005311e:	a903      	add	r1, sp, #12
10053120:	f000 f9a2 	bl	10053468 <GAP_enable_controller_privacy_ucfg_weak>
10053124:	2800      	cmp	r0, #0
10053126:	d11f      	bne.n	10053168 <GAP_Init+0xa8>
10053128:	f000 f9d6 	bl	100534d8 <GAP_init_advertising_sets_ucfg_weak>
1005312c:	2800      	cmp	r0, #0
1005312e:	d11b      	bne.n	10053168 <GAP_Init+0xa8>
10053130:	9800      	ldr	r0, [sp, #0]
10053132:	3060      	adds	r0, #96	@ 0x60
10053134:	f000 f9cc 	bl	100534d0 <GAP_set_controller_random_address_ucfg_weak>
10053138:	2800      	cmp	r0, #0
1005313a:	d115      	bne.n	10053168 <GAP_Init+0xa8>
1005313c:	9804      	ldr	r0, [sp, #16]
1005313e:	2101      	movs	r1, #1
10053140:	7431      	strb	r1, [r6, #16]
10053142:	4308      	orrs	r0, r1
10053144:	7030      	strb	r0, [r6, #0]
10053146:	f000 f815 	bl	10053174 <GAP_reset_privacy_timer>
1005314a:	ac01      	add	r4, sp, #4
1005314c:	4620      	mov	r0, r4
1005314e:	f7ff ff7b 	bl	10053048 <GAP_get_default_le_event_mask>
10053152:	4620      	mov	r0, r4
10053154:	f003 fa24 	bl	100565a0 <hci_le_set_event_mask>
10053158:	43f8      	mvns	r0, r7
1005315a:	9001      	str	r0, [sp, #4]
1005315c:	4804      	ldr	r0, [pc, #16]	@ (10053170 <__arm_cp.7_1>)
1005315e:	9002      	str	r0, [sp, #8]
10053160:	4620      	mov	r0, r4
10053162:	f003 fa0d 	bl	10056580 <hci_set_event_mask>
10053166:	4638      	mov	r0, r7
10053168:	b005      	add	sp, #20
1005316a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005316c <__arm_cp.7_0>:
1005316c:	20000ed4 	.word	0x20000ed4

10053170 <__arm_cp.7_1>:
10053170:	20009fff 	.word	0x20009fff

10053174 <GAP_reset_privacy_timer>:
10053174:	4806      	ldr	r0, [pc, #24]	@ (10053190 <__arm_cp.8_0>)
10053176:	6800      	ldr	r0, [r0, #0]
10053178:	215c      	movs	r1, #92	@ 0x5c
1005317a:	5c41      	ldrb	r1, [r0, r1]
1005317c:	0689      	lsls	r1, r1, #26
1005317e:	0f89      	lsrs	r1, r1, #30
10053180:	d004      	beq.n	1005318c <GAP_reset_privacy_timer+0x18>
10053182:	305c      	adds	r0, #92	@ 0x5c
10053184:	78c1      	ldrb	r1, [r0, #3]
10053186:	2202      	movs	r2, #2
10053188:	430a      	orrs	r2, r1
1005318a:	70c2      	strb	r2, [r0, #3]
1005318c:	4770      	bx	lr
1005318e:	46c0      	nop			@ (mov r8, r8)

10053190 <__arm_cp.8_0>:
10053190:	20000ed4 	.word	0x20000ed4

10053194 <GAP_internal_evt_handler>:
10053194:	b5b0      	push	{r4, r5, r7, lr}
10053196:	285c      	cmp	r0, #92	@ 0x5c
10053198:	d106      	bne.n	100531a8 <GAP_internal_evt_handler+0x14>
1005319a:	480c      	ldr	r0, [pc, #48]	@ (100531cc <__arm_cp.12_0>)
1005319c:	6804      	ldr	r4, [r0, #0]
1005319e:	345d      	adds	r4, #93	@ 0x5d
100531a0:	2500      	movs	r5, #0
100531a2:	5760      	ldrsb	r0, [r4, r5]
100531a4:	2800      	cmp	r0, #0
100531a6:	d400      	bmi.n	100531aa <GAP_internal_evt_handler+0x16>
100531a8:	bdb0      	pop	{r4, r5, r7, pc}
100531aa:	7860      	ldrb	r0, [r4, #1]
100531ac:	2802      	cmp	r0, #2
100531ae:	d1fb      	bne.n	100531a8 <GAP_internal_evt_handler+0x14>
100531b0:	7055      	strb	r5, [r2, #1]
100531b2:	2080      	movs	r0, #128	@ 0x80
100531b4:	7010      	strb	r0, [r2, #0]
100531b6:	b2c8      	uxtb	r0, r1
100531b8:	4611      	mov	r1, r2
100531ba:	f000 f809 	bl	100531d0 <aci_gap_proc_complete_event_wrapper>
100531be:	7065      	strb	r5, [r4, #1]
100531c0:	7820      	ldrb	r0, [r4, #0]
100531c2:	217f      	movs	r1, #127	@ 0x7f
100531c4:	4001      	ands	r1, r0
100531c6:	7021      	strb	r1, [r4, #0]
100531c8:	bdb0      	pop	{r4, r5, r7, pc}
100531ca:	46c0      	nop			@ (mov r8, r8)

100531cc <__arm_cp.12_0>:
100531cc:	20000ed4 	.word	0x20000ed4

100531d0 <aci_gap_proc_complete_event_wrapper>:
100531d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100531d2:	2900      	cmp	r1, #0
100531d4:	d016      	beq.n	10053204 <aci_gap_proc_complete_event_wrapper+0x34>
100531d6:	460e      	mov	r6, r1
100531d8:	4605      	mov	r5, r0
100531da:	7809      	ldrb	r1, [r1, #0]
100531dc:	2400      	movs	r4, #0
100531de:	07c8      	lsls	r0, r1, #31
100531e0:	4620      	mov	r0, r4
100531e2:	d11f      	bne.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
100531e4:	0788      	lsls	r0, r1, #30
100531e6:	d40f      	bmi.n	10053208 <aci_gap_proc_complete_event_wrapper+0x38>
100531e8:	0748      	lsls	r0, r1, #29
100531ea:	d40f      	bmi.n	1005320c <aci_gap_proc_complete_event_wrapper+0x3c>
100531ec:	0708      	lsls	r0, r1, #28
100531ee:	d40f      	bmi.n	10053210 <aci_gap_proc_complete_event_wrapper+0x40>
100531f0:	06c8      	lsls	r0, r1, #27
100531f2:	d40f      	bmi.n	10053214 <aci_gap_proc_complete_event_wrapper+0x44>
100531f4:	0688      	lsls	r0, r1, #26
100531f6:	d40f      	bmi.n	10053218 <aci_gap_proc_complete_event_wrapper+0x48>
100531f8:	0648      	lsls	r0, r1, #25
100531fa:	d40f      	bmi.n	1005321c <aci_gap_proc_complete_event_wrapper+0x4c>
100531fc:	0608      	lsls	r0, r1, #24
100531fe:	d50f      	bpl.n	10053220 <aci_gap_proc_complete_event_wrapper+0x50>
10053200:	2007      	movs	r0, #7
10053202:	e00f      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
10053204:	2412      	movs	r4, #18
10053206:	e03c      	b.n	10053282 <aci_gap_proc_complete_event_wrapper+0xb2>
10053208:	2001      	movs	r0, #1
1005320a:	e00b      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
1005320c:	2002      	movs	r0, #2
1005320e:	e009      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
10053210:	2003      	movs	r0, #3
10053212:	e007      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
10053214:	2004      	movs	r0, #4
10053216:	e005      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
10053218:	2005      	movs	r0, #5
1005321a:	e003      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
1005321c:	2006      	movs	r0, #6
1005321e:	e001      	b.n	10053224 <aci_gap_proc_complete_event_wrapper+0x54>
10053220:	2000      	movs	r0, #0
10053222:	43c0      	mvns	r0, r0
10053224:	7030      	strb	r0, [r6, #0]
10053226:	4818      	ldr	r0, [pc, #96]	@ (10053288 <__arm_cp.13_0>)
10053228:	6800      	ldr	r0, [r0, #0]
1005322a:	214e      	movs	r1, #78	@ 0x4e
1005322c:	5640      	ldrsb	r0, [r0, r1]
1005322e:	2800      	cmp	r0, #0
10053230:	d527      	bpl.n	10053282 <aci_gap_proc_complete_event_wrapper+0xb2>
10053232:	4816      	ldr	r0, [pc, #88]	@ (1005328c <__arm_cp.13_1>)
10053234:	1828      	adds	r0, r5, r0
10053236:	2103      	movs	r1, #3
10053238:	4301      	orrs	r1, r0
1005323a:	310d      	adds	r1, #13
1005323c:	0888      	lsrs	r0, r1, #2
1005323e:	b283      	uxth	r3, r0
10053240:	4813      	ldr	r0, [pc, #76]	@ (10053290 <__arm_cp.13_2>)
10053242:	6800      	ldr	r0, [r0, #0]
10053244:	6980      	ldr	r0, [r0, #24]
10053246:	2102      	movs	r1, #2
10053248:	2247      	movs	r2, #71	@ 0x47
1005324a:	f7ff f847 	bl	100522dc <aci_event_fifo_push_header>
1005324e:	2800      	cmp	r0, #0
10053250:	d016      	beq.n	10053280 <aci_gap_proc_complete_event_wrapper+0xb0>
10053252:	4607      	mov	r7, r0
10053254:	1d00      	adds	r0, r0, #4
10053256:	4629      	mov	r1, r5
10053258:	4632      	mov	r2, r6
1005325a:	f7ff fb7a 	bl	10052952 <aci_gap_proc_complete_event_copy>
1005325e:	2004      	movs	r0, #4
10053260:	7278      	strb	r0, [r7, #9]
10053262:	2007      	movs	r0, #7
10053264:	7238      	strb	r0, [r7, #8]
10053266:	1ce8      	adds	r0, r5, #3
10053268:	0a01      	lsrs	r1, r0, #8
1005326a:	71f9      	strb	r1, [r7, #7]
1005326c:	71b8      	strb	r0, [r7, #6]
1005326e:	20ff      	movs	r0, #255	@ 0xff
10053270:	7178      	strb	r0, [r7, #5]
10053272:	2082      	movs	r0, #130	@ 0x82
10053274:	7138      	strb	r0, [r7, #4]
10053276:	2002      	movs	r0, #2
10053278:	4639      	mov	r1, r7
1005327a:	f7ff f8cc 	bl	10052416 <aci_event_fifo_push>
1005327e:	e000      	b.n	10053282 <aci_gap_proc_complete_event_wrapper+0xb2>
10053280:	2407      	movs	r4, #7
10053282:	4620      	mov	r0, r4
10053284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053286:	46c0      	nop			@ (mov r8, r8)

10053288 <__arm_cp.13_0>:
10053288:	20000f20 	.word	0x20000f20

1005328c <__arm_cp.13_1>:
1005328c:	0003fffd 	.word	0x0003fffd

10053290 <__arm_cp.13_2>:
10053290:	20000ed0 	.word	0x20000ed0

10053294 <GAP_LimDiscTimeoutcb>:
10053294:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10053296:	4811      	ldr	r0, [pc, #68]	@ (100532dc <__arm_cp.15_0>)
10053298:	6800      	ldr	r0, [r0, #0]
1005329a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
1005329c:	f009 fdfa 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
100532a0:	2800      	cmp	r0, #0
100532a2:	d002      	beq.n	100532aa <GAP_LimDiscTimeoutcb+0x16>
100532a4:	480e      	ldr	r0, [pc, #56]	@ (100532e0 <__arm_cp.15_1>)
100532a6:	7e80      	ldrb	r0, [r0, #26]
100532a8:	e000      	b.n	100532ac <GAP_LimDiscTimeoutcb+0x18>
100532aa:	2001      	movs	r0, #1
100532ac:	b2c5      	uxtb	r5, r0
100532ae:	3411      	adds	r4, #17
100532b0:	2d00      	cmp	r5, #0
100532b2:	d011      	beq.n	100532d8 <GAP_LimDiscTimeoutcb+0x44>
100532b4:	7820      	ldrb	r0, [r4, #0]
100532b6:	2800      	cmp	r0, #0
100532b8:	d00b      	beq.n	100532d2 <GAP_LimDiscTimeoutcb+0x3e>
100532ba:	4620      	mov	r0, r4
100532bc:	380f      	subs	r0, #15
100532be:	7800      	ldrb	r0, [r0, #0]
100532c0:	0780      	lsls	r0, r0, #30
100532c2:	d506      	bpl.n	100532d2 <GAP_LimDiscTimeoutcb+0x3e>
100532c4:	7860      	ldrb	r0, [r4, #1]
100532c6:	466a      	mov	r2, sp
100532c8:	7010      	strb	r0, [r2, #0]
100532ca:	2000      	movs	r0, #0
100532cc:	2101      	movs	r1, #1
100532ce:	f7fe fb2b 	bl	10051928 <GAP_set_advertising_enable_ucfg_weak>
100532d2:	3414      	adds	r4, #20
100532d4:	1e6d      	subs	r5, r5, #1
100532d6:	e7eb      	b.n	100532b0 <GAP_LimDiscTimeoutcb+0x1c>
100532d8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100532da:	46c0      	nop			@ (mov r8, r8)

100532dc <__arm_cp.15_0>:
100532dc:	20000ed4 	.word	0x20000ed4

100532e0 <__arm_cp.15_1>:
100532e0:	20000f34 	.word	0x20000f34

100532e4 <GAP_stop_discoverability>:
100532e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100532e6:	4604      	mov	r4, r0
100532e8:	4668      	mov	r0, sp
100532ea:	2500      	movs	r5, #0
100532ec:	7005      	strb	r5, [r0, #0]
100532ee:	f009 fdd1 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
100532f2:	2800      	cmp	r0, #0
100532f4:	d005      	beq.n	10053302 <GAP_stop_discoverability+0x1e>
100532f6:	466d      	mov	r5, sp
100532f8:	4620      	mov	r0, r4
100532fa:	4629      	mov	r1, r5
100532fc:	f000 f9fe 	bl	100536fc <GAP_get_advertising_set_index>
10053300:	782d      	ldrb	r5, [r5, #0]
10053302:	f009 fdc7 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
10053306:	2800      	cmp	r0, #0
10053308:	d002      	beq.n	10053310 <GAP_stop_discoverability+0x2c>
1005330a:	4826      	ldr	r0, [pc, #152]	@ (100533a4 <__arm_cp.18_0>)
1005330c:	7e83      	ldrb	r3, [r0, #26]
1005330e:	e000      	b.n	10053312 <GAP_stop_discoverability+0x2e>
10053310:	2301      	movs	r3, #1
10053312:	2614      	movs	r6, #20
10053314:	4375      	muls	r5, r6
10053316:	4f24      	ldr	r7, [pc, #144]	@ (100533a8 <__arm_cp.18_1>)
10053318:	6838      	ldr	r0, [r7, #0]
1005331a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1005331c:	194c      	adds	r4, r1, r5
1005331e:	78a5      	ldrb	r5, [r4, #2]
10053320:	2202      	movs	r2, #2
10053322:	402a      	ands	r2, r5
10053324:	d002      	beq.n	1005332c <GAP_stop_discoverability+0x48>
10053326:	1ca4      	adds	r4, r4, #2
10053328:	2500      	movs	r5, #0
1005332a:	7025      	strb	r5, [r4, #0]
1005332c:	3111      	adds	r1, #17
1005332e:	b2db      	uxtb	r3, r3
10053330:	2b00      	cmp	r3, #0
10053332:	d00a      	beq.n	1005334a <GAP_stop_discoverability+0x66>
10053334:	780c      	ldrb	r4, [r1, #0]
10053336:	2c00      	cmp	r4, #0
10053338:	d004      	beq.n	10053344 <GAP_stop_discoverability+0x60>
1005333a:	460c      	mov	r4, r1
1005333c:	3c0f      	subs	r4, #15
1005333e:	7824      	ldrb	r4, [r4, #0]
10053340:	07a4      	lsls	r4, r4, #30
10053342:	d426      	bmi.n	10053392 <GAP_stop_discoverability+0xae>
10053344:	1e5b      	subs	r3, r3, #1
10053346:	3114      	adds	r1, #20
10053348:	e7f2      	b.n	10053330 <GAP_stop_discoverability+0x4c>
1005334a:	2a00      	cmp	r2, #0
1005334c:	d021      	beq.n	10053392 <GAP_stop_discoverability+0xae>
1005334e:	2400      	movs	r4, #0
10053350:	4621      	mov	r1, r4
10053352:	f00c fb80 	bl	1005fa56 <CST_stop>
10053356:	4815      	ldr	r0, [pc, #84]	@ (100533ac <__arm_cp.18_2>)
10053358:	6800      	ldr	r0, [r0, #0]
1005335a:	214e      	movs	r1, #78	@ 0x4e
1005335c:	5c40      	ldrb	r0, [r0, r1]
1005335e:	07c0      	lsls	r0, r0, #31
10053360:	d017      	beq.n	10053392 <GAP_stop_discoverability+0xae>
10053362:	4813      	ldr	r0, [pc, #76]	@ (100533b0 <__arm_cp.18_3>)
10053364:	6800      	ldr	r0, [r0, #0]
10053366:	6980      	ldr	r0, [r0, #24]
10053368:	2244      	movs	r2, #68	@ 0x44
1005336a:	2502      	movs	r5, #2
1005336c:	4629      	mov	r1, r5
1005336e:	462b      	mov	r3, r5
10053370:	f7fe ffb4 	bl	100522dc <aci_event_fifo_push_header>
10053374:	2800      	cmp	r0, #0
10053376:	d00c      	beq.n	10053392 <GAP_stop_discoverability+0xae>
10053378:	4601      	mov	r1, r0
1005337a:	7185      	strb	r5, [r0, #6]
1005337c:	71c4      	strb	r4, [r0, #7]
1005337e:	7204      	strb	r4, [r0, #8]
10053380:	20ff      	movs	r0, #255	@ 0xff
10053382:	7148      	strb	r0, [r1, #5]
10053384:	2082      	movs	r0, #130	@ 0x82
10053386:	7108      	strb	r0, [r1, #4]
10053388:	2004      	movs	r0, #4
1005338a:	7248      	strb	r0, [r1, #9]
1005338c:	4628      	mov	r0, r5
1005338e:	f7ff f842 	bl	10052416 <aci_event_fifo_push>
10053392:	4668      	mov	r0, sp
10053394:	7800      	ldrb	r0, [r0, #0]
10053396:	4346      	muls	r6, r0
10053398:	6838      	ldr	r0, [r7, #0]
1005339a:	6d40      	ldr	r0, [r0, #84]	@ 0x54
1005339c:	1980      	adds	r0, r0, r6
1005339e:	2100      	movs	r1, #0
100533a0:	7441      	strb	r1, [r0, #17]
100533a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100533a4 <__arm_cp.18_0>:
100533a4:	20000f34 	.word	0x20000f34

100533a8 <__arm_cp.18_1>:
100533a8:	20000ed4 	.word	0x20000ed4

100533ac <__arm_cp.18_2>:
100533ac:	20000f20 	.word	0x20000f20

100533b0 <__arm_cp.18_3>:
100533b0:	20000ed0 	.word	0x20000ed0

100533b4 <GAP_stop_privacy_timer>:
100533b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100533b6:	4c0d      	ldr	r4, [pc, #52]	@ (100533ec <__arm_cp.19_0>)
100533b8:	6825      	ldr	r5, [r4, #0]
100533ba:	205c      	movs	r0, #92	@ 0x5c
100533bc:	5c28      	ldrb	r0, [r5, r0]
100533be:	0680      	lsls	r0, r0, #26
100533c0:	0f80      	lsrs	r0, r0, #30
100533c2:	d012      	beq.n	100533ea <GAP_stop_privacy_timer+0x36>
100533c4:	355c      	adds	r5, #92	@ 0x5c
100533c6:	78e8      	ldrb	r0, [r5, #3]
100533c8:	2602      	movs	r6, #2
100533ca:	4030      	ands	r0, r6
100533cc:	d10d      	bne.n	100533ea <GAP_stop_privacy_timer+0x36>
100533ce:	a801      	add	r0, sp, #4
100533d0:	4669      	mov	r1, sp
100533d2:	f000 fadf 	bl	10053994 <GAP_check_adv_status>
100533d6:	7869      	ldrb	r1, [r5, #1]
100533d8:	4301      	orrs	r1, r0
100533da:	d106      	bne.n	100533ea <GAP_stop_privacy_timer+0x36>
100533dc:	78e8      	ldrb	r0, [r5, #3]
100533de:	4330      	orrs	r0, r6
100533e0:	70e8      	strb	r0, [r5, #3]
100533e2:	6820      	ldr	r0, [r4, #0]
100533e4:	2101      	movs	r1, #1
100533e6:	f00c fb36 	bl	1005fa56 <CST_stop>
100533ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100533ec <__arm_cp.19_0>:
100533ec:	20000ed4 	.word	0x20000ed4

100533f0 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
100533f0:	b580      	push	{r7, lr}
100533f2:	2000      	movs	r0, #0
100533f4:	f7ff ff76 	bl	100532e4 <GAP_stop_discoverability>
100533f8:	f7ff ffdc 	bl	100533b4 <GAP_stop_privacy_timer>
100533fc:	bd80      	pop	{r7, pc}

100533fe <GAP_hci_disconnection_complete_evt_hndl>:
100533fe:	4770      	bx	lr

10053400 <GAP_hci_le_connection_complete_evt_hndl>:
10053400:	b580      	push	{r7, lr}
10053402:	2a00      	cmp	r2, #0
10053404:	d003      	beq.n	1005340e <GAP_hci_le_connection_complete_evt_hndl+0xe>
10053406:	4608      	mov	r0, r1
10053408:	f7ff fff2 	bl	100533f0 <GAP_peripheral_connection_complete_handler_ucfg_weak>
1005340c:	bd80      	pop	{r7, pc}
1005340e:	f7ff fd23 	bl	10052e58 <GAP_central_connection_complete_handler_ucfg_weak>
10053412:	bd80      	pop	{r7, pc}

10053414 <GapIsPrivacySupported>:
10053414:	4804      	ldr	r0, [pc, #16]	@ (10053428 <__arm_cp.26_0>)
10053416:	6800      	ldr	r0, [r0, #0]
10053418:	215c      	movs	r1, #92	@ 0x5c
1005341a:	5c41      	ldrb	r1, [r0, r1]
1005341c:	2030      	movs	r0, #48	@ 0x30
1005341e:	4008      	ands	r0, r1
10053420:	1e41      	subs	r1, r0, #1
10053422:	4188      	sbcs	r0, r1
10053424:	4770      	bx	lr
10053426:	46c0      	nop			@ (mov r8, r8)

10053428 <__arm_cp.26_0>:
10053428:	20000ed4 	.word	0x20000ed4

1005342c <GAP_get_identity_address_type>:
1005342c:	4803      	ldr	r0, [pc, #12]	@ (1005343c <__arm_cp.28_0>)
1005342e:	6800      	ldr	r0, [r0, #0]
10053430:	215f      	movs	r1, #95	@ 0x5f
10053432:	5c41      	ldrb	r1, [r0, r1]
10053434:	2001      	movs	r0, #1
10053436:	4008      	ands	r0, r1
10053438:	4770      	bx	lr
1005343a:	46c0      	nop			@ (mov r8, r8)

1005343c <__arm_cp.28_0>:
1005343c:	20000ed4 	.word	0x20000ed4

10053440 <GAP_get_own_address_type>:
10053440:	4808      	ldr	r0, [pc, #32]	@ (10053464 <__arm_cp.29_0>)
10053442:	6800      	ldr	r0, [r0, #0]
10053444:	215c      	movs	r1, #92	@ 0x5c
10053446:	5c41      	ldrb	r1, [r0, r1]
10053448:	06ca      	lsls	r2, r1, #27
1005344a:	d406      	bmi.n	1005345a <GAP_get_own_address_type+0x1a>
1005344c:	0689      	lsls	r1, r1, #26
1005344e:	d406      	bmi.n	1005345e <GAP_get_own_address_type+0x1e>
10053450:	305c      	adds	r0, #92	@ 0x5c
10053452:	78c1      	ldrb	r1, [r0, #3]
10053454:	2001      	movs	r0, #1
10053456:	4008      	ands	r0, r1
10053458:	4770      	bx	lr
1005345a:	2001      	movs	r0, #1
1005345c:	4770      	bx	lr
1005345e:	2003      	movs	r0, #3
10053460:	4770      	bx	lr
10053462:	46c0      	nop			@ (mov r8, r8)

10053464 <__arm_cp.29_0>:
10053464:	20000ed4 	.word	0x20000ed4

10053468 <GAP_enable_controller_privacy_ucfg_weak>:
10053468:	2012      	movs	r0, #18
1005346a:	4770      	bx	lr

1005346c <GAP_Terminate_Link>:
1005346c:	b580      	push	{r7, lr}
1005346e:	f004 fd17 	bl	10057ea0 <llc_conn_disconnect_link>
10053472:	bd80      	pop	{r7, pc}

10053474 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
10053474:	b580      	push	{r7, lr}
10053476:	07c0      	lsls	r0, r0, #31
10053478:	d101      	bne.n	1005347e <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
1005347a:	2000      	movs	r0, #0
1005347c:	bd80      	pop	{r7, pc}
1005347e:	4608      	mov	r0, r1
10053480:	4611      	mov	r1, r2
10053482:	f003 f966 	bl	10056752 <hci_le_add_device_to_filter_accept_list>
10053486:	bd80      	pop	{r7, pc}

10053488 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
10053488:	b580      	push	{r7, lr}
1005348a:	07c0      	lsls	r0, r0, #31
1005348c:	d101      	bne.n	10053492 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
1005348e:	2000      	movs	r0, #0
10053490:	bd80      	pop	{r7, pc}
10053492:	f003 f95a 	bl	1005674a <hci_le_clear_filter_accept_list>
10053496:	bd80      	pop	{r7, pc}

10053498 <GAP_configure_filter_accept_and_resolving_list>:
10053498:	b570      	push	{r4, r5, r6, lr}
1005349a:	b094      	sub	sp, #80	@ 0x50
1005349c:	4604      	mov	r4, r0
1005349e:	f7ff fff3 	bl	10053488 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
100534a2:	4606      	mov	r6, r0
100534a4:	466d      	mov	r5, sp
100534a6:	353e      	adds	r5, #62	@ 0x3e
100534a8:	4668      	mov	r0, sp
100534aa:	f00b f8d3 	bl	1005e654 <sdb_sap_read_security_record_sequential>
100534ae:	2800      	cmp	r0, #0
100534b0:	d10b      	bne.n	100534ca <GAP_configure_filter_accept_and_resolving_list+0x32>
100534b2:	2e00      	cmp	r6, #0
100534b4:	d109      	bne.n	100534ca <GAP_configure_filter_accept_and_resolving_list+0x32>
100534b6:	4668      	mov	r0, sp
100534b8:	7840      	ldrb	r0, [r0, #1]
100534ba:	2101      	movs	r1, #1
100534bc:	4001      	ands	r1, r0
100534be:	4620      	mov	r0, r4
100534c0:	462a      	mov	r2, r5
100534c2:	f7ff ffd7 	bl	10053474 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
100534c6:	4606      	mov	r6, r0
100534c8:	e7ee      	b.n	100534a8 <GAP_configure_filter_accept_and_resolving_list+0x10>
100534ca:	b2f0      	uxtb	r0, r6
100534cc:	b014      	add	sp, #80	@ 0x50
100534ce:	bd70      	pop	{r4, r5, r6, pc}

100534d0 <GAP_set_controller_random_address_ucfg_weak>:
100534d0:	b580      	push	{r7, lr}
100534d2:	f003 f851 	bl	10056578 <hci_le_set_random_address>
100534d6:	bd80      	pop	{r7, pc}

100534d8 <GAP_init_advertising_sets_ucfg_weak>:
100534d8:	2000      	movs	r0, #0
100534da:	4770      	bx	lr

100534dc <GAP_start_privacy_timer>:
100534dc:	b5b0      	push	{r4, r5, r7, lr}
100534de:	4602      	mov	r2, r0
100534e0:	4810      	ldr	r0, [pc, #64]	@ (10053524 <__arm_cp.47_0>)
100534e2:	6800      	ldr	r0, [r0, #0]
100534e4:	4605      	mov	r5, r0
100534e6:	355a      	adds	r5, #90	@ 0x5a
100534e8:	2900      	cmp	r1, #0
100534ea:	d108      	bne.n	100534fe <GAP_start_privacy_timer+0x22>
100534ec:	78a9      	ldrb	r1, [r5, #2]
100534ee:	0689      	lsls	r1, r1, #26
100534f0:	2400      	movs	r4, #0
100534f2:	0f89      	lsrs	r1, r1, #30
100534f4:	d014      	beq.n	10053520 <GAP_start_privacy_timer+0x44>
100534f6:	7969      	ldrb	r1, [r5, #5]
100534f8:	2302      	movs	r3, #2
100534fa:	400b      	ands	r3, r1
100534fc:	d010      	beq.n	10053520 <GAP_start_privacy_timer+0x44>
100534fe:	2a00      	cmp	r2, #0
10053500:	d001      	beq.n	10053506 <GAP_start_privacy_timer+0x2a>
10053502:	4b09      	ldr	r3, [pc, #36]	@ (10053528 <__arm_cp.47_1>)
10053504:	e003      	b.n	1005350e <GAP_start_privacy_timer+0x32>
10053506:	217d      	movs	r1, #125	@ 0x7d
10053508:	00c9      	lsls	r1, r1, #3
1005350a:	882b      	ldrh	r3, [r5, #0]
1005350c:	434b      	muls	r3, r1
1005350e:	2401      	movs	r4, #1
10053510:	4621      	mov	r1, r4
10053512:	4622      	mov	r2, r4
10053514:	f00c fad5 	bl	1005fac2 <CST_start>
10053518:	7968      	ldrb	r0, [r5, #5]
1005351a:	21fd      	movs	r1, #253	@ 0xfd
1005351c:	4001      	ands	r1, r0
1005351e:	7169      	strb	r1, [r5, #5]
10053520:	4620      	mov	r0, r4
10053522:	bdb0      	pop	{r4, r5, r7, pc}

10053524 <__arm_cp.47_0>:
10053524:	20000ed4 	.word	0x20000ed4

10053528 <__arm_cp.47_1>:
10053528:	00007530 	.word	0x00007530

1005352c <GAP_generate_new_rpa>:
1005352c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005352e:	4d0d      	ldr	r5, [pc, #52]	@ (10053564 <__arm_cp.48_0>)
10053530:	6828      	ldr	r0, [r5, #0]
10053532:	215f      	movs	r1, #95	@ 0x5f
10053534:	5c40      	ldrb	r0, [r0, r1]
10053536:	0780      	lsls	r0, r0, #30
10053538:	d401      	bmi.n	1005353e <GAP_generate_new_rpa+0x12>
1005353a:	240c      	movs	r4, #12
1005353c:	e00f      	b.n	1005355e <GAP_generate_new_rpa+0x32>
1005353e:	466c      	mov	r4, sp
10053540:	4620      	mov	r0, r4
10053542:	f00b f997 	bl	1005e874 <smp_sap_crt_generate_rpa>
10053546:	4620      	mov	r0, r4
10053548:	f7ff ffc2 	bl	100534d0 <GAP_set_controller_random_address_ucfg_weak>
1005354c:	4604      	mov	r4, r0
1005354e:	2800      	cmp	r0, #0
10053550:	d105      	bne.n	1005355e <GAP_generate_new_rpa+0x32>
10053552:	6828      	ldr	r0, [r5, #0]
10053554:	3066      	adds	r0, #102	@ 0x66
10053556:	4669      	mov	r1, sp
10053558:	2206      	movs	r2, #6
1005355a:	f7fc f973 	bl	1004f844 <BLEPLAT_MemCpy>
1005355e:	4620      	mov	r0, r4
10053560:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10053562:	46c0      	nop			@ (mov r8, r8)

10053564 <__arm_cp.48_0>:
10053564:	20000ed4 	.word	0x20000ed4

10053568 <GAP_get_current_address>:
10053568:	b5b0      	push	{r4, r5, r7, lr}
1005356a:	460d      	mov	r5, r1
1005356c:	4604      	mov	r4, r0
1005356e:	480f      	ldr	r0, [pc, #60]	@ (100535ac <__arm_cp.49_0>)
10053570:	6800      	ldr	r0, [r0, #0]
10053572:	215c      	movs	r1, #92	@ 0x5c
10053574:	5c40      	ldrb	r0, [r0, r1]
10053576:	0680      	lsls	r0, r0, #26
10053578:	0f80      	lsrs	r0, r0, #30
1005357a:	d005      	beq.n	10053588 <GAP_get_current_address+0x20>
1005357c:	2001      	movs	r0, #1
1005357e:	7028      	strb	r0, [r5, #0]
10053580:	4620      	mov	r0, r4
10053582:	f000 f815 	bl	100535b0 <GAP_get_rpa>
10053586:	e00e      	b.n	100535a6 <GAP_get_current_address+0x3e>
10053588:	f7ff ff5a 	bl	10053440 <GAP_get_own_address_type>
1005358c:	2800      	cmp	r0, #0
1005358e:	d005      	beq.n	1005359c <GAP_get_current_address+0x34>
10053590:	2001      	movs	r0, #1
10053592:	7028      	strb	r0, [r5, #0]
10053594:	4620      	mov	r0, r4
10053596:	f000 f81f 	bl	100535d8 <GAP_get_static_random_address>
1005359a:	e004      	b.n	100535a6 <GAP_get_current_address+0x3e>
1005359c:	2000      	movs	r0, #0
1005359e:	7028      	strb	r0, [r5, #0]
100535a0:	4620      	mov	r0, r4
100535a2:	f000 f80f 	bl	100535c4 <GAP_get_public_address>
100535a6:	2000      	movs	r0, #0
100535a8:	bdb0      	pop	{r4, r5, r7, pc}
100535aa:	46c0      	nop			@ (mov r8, r8)

100535ac <__arm_cp.49_0>:
100535ac:	20000ed4 	.word	0x20000ed4

100535b0 <GAP_get_rpa>:
100535b0:	b580      	push	{r7, lr}
100535b2:	4903      	ldr	r1, [pc, #12]	@ (100535c0 <__arm_cp.50_0>)
100535b4:	6809      	ldr	r1, [r1, #0]
100535b6:	3166      	adds	r1, #102	@ 0x66
100535b8:	2206      	movs	r2, #6
100535ba:	f7fc f943 	bl	1004f844 <BLEPLAT_MemCpy>
100535be:	bd80      	pop	{r7, pc}

100535c0 <__arm_cp.50_0>:
100535c0:	20000ed4 	.word	0x20000ed4

100535c4 <GAP_get_public_address>:
100535c4:	b580      	push	{r7, lr}
100535c6:	4903      	ldr	r1, [pc, #12]	@ (100535d4 <__arm_cp.51_0>)
100535c8:	6809      	ldr	r1, [r1, #0]
100535ca:	2206      	movs	r2, #6
100535cc:	f7fc f93a 	bl	1004f844 <BLEPLAT_MemCpy>
100535d0:	bd80      	pop	{r7, pc}
100535d2:	46c0      	nop			@ (mov r8, r8)

100535d4 <__arm_cp.51_0>:
100535d4:	20000ecc 	.word	0x20000ecc

100535d8 <GAP_get_static_random_address>:
100535d8:	b580      	push	{r7, lr}
100535da:	4903      	ldr	r1, [pc, #12]	@ (100535e8 <__arm_cp.52_0>)
100535dc:	6809      	ldr	r1, [r1, #0]
100535de:	3160      	adds	r1, #96	@ 0x60
100535e0:	2206      	movs	r2, #6
100535e2:	f7fc f92f 	bl	1004f844 <BLEPLAT_MemCpy>
100535e6:	bd80      	pop	{r7, pc}

100535e8 <__arm_cp.52_0>:
100535e8:	20000ed4 	.word	0x20000ed4

100535ec <GAP_enable_rpa_change_at_timeout>:
100535ec:	4902      	ldr	r1, [pc, #8]	@ (100535f8 <__arm_cp.53_0>)
100535ee:	6809      	ldr	r1, [r1, #0]
100535f0:	226c      	movs	r2, #108	@ 0x6c
100535f2:	5488      	strb	r0, [r1, r2]
100535f4:	4770      	bx	lr
100535f6:	46c0      	nop			@ (mov r8, r8)

100535f8 <__arm_cp.53_0>:
100535f8:	20000ed4 	.word	0x20000ed4

100535fc <GAP_check_discoverability_mode>:
100535fc:	1e43      	subs	r3, r0, #1
100535fe:	2b02      	cmp	r3, #2
10053600:	d309      	bcc.n	10053616 <GAP_check_discoverability_mode+0x1a>
10053602:	2800      	cmp	r0, #0
10053604:	d00c      	beq.n	10053620 <GAP_check_discoverability_mode+0x24>
10053606:	2803      	cmp	r0, #3
10053608:	d109      	bne.n	1005361e <GAP_check_discoverability_mode+0x22>
1005360a:	2001      	movs	r0, #1
1005360c:	4001      	ands	r1, r0
1005360e:	4249      	negs	r1, r1
10053610:	2012      	movs	r0, #18
10053612:	4008      	ands	r0, r1
10053614:	4770      	bx	lr
10053616:	2a00      	cmp	r2, #0
10053618:	d101      	bne.n	1005361e <GAP_check_discoverability_mode+0x22>
1005361a:	4610      	mov	r0, r2
1005361c:	4770      	bx	lr
1005361e:	2012      	movs	r0, #18
10053620:	4770      	bx	lr
	...

10053624 <GAP_advEvtProp_to_advType>:
10053624:	4601      	mov	r1, r0
10053626:	3910      	subs	r1, #16
10053628:	2905      	cmp	r1, #5
1005362a:	d80a      	bhi.n	10053642 <GAP_advEvtProp_to_advType+0x1e>
1005362c:	2000      	movs	r0, #0
1005362e:	46c0      	nop			@ (mov r8, r8)
10053630:	4479      	add	r1, pc
10053632:	7909      	ldrb	r1, [r1, #4]
10053634:	0049      	lsls	r1, r1, #1
10053636:	448f      	add	pc, r1
10053638:	090a0802 	.word	0x090a0802
1005363c:	0c08      	.short	0x0c08
1005363e:	2003      	movs	r0, #3
10053640:	4770      	bx	lr
10053642:	281d      	cmp	r0, #29
10053644:	d101      	bne.n	1005364a <GAP_advEvtProp_to_advType+0x26>
10053646:	2001      	movs	r0, #1
10053648:	4770      	bx	lr
1005364a:	2005      	movs	r0, #5
1005364c:	4770      	bx	lr
1005364e:	2002      	movs	r0, #2
10053650:	4770      	bx	lr
10053652:	2004      	movs	r0, #4
10053654:	4770      	bx	lr
	...

10053658 <GAP_set_legacy_advertising_configuration>:
10053658:	b5f0      	push	{r4, r5, r6, r7, lr}
1005365a:	b08b      	sub	sp, #44	@ 0x2c
1005365c:	4615      	mov	r5, r2
1005365e:	460f      	mov	r7, r1
10053660:	4601      	mov	r1, r0
10053662:	06fa      	lsls	r2, r7, #27
10053664:	2012      	movs	r0, #18
10053666:	2a00      	cmp	r2, #0
10053668:	d53f      	bpl.n	100536ea <GAP_set_legacy_advertising_configuration+0x92>
1005366a:	461c      	mov	r4, r3
1005366c:	2301      	movs	r3, #1
1005366e:	039a      	lsls	r2, r3, #14
10053670:	4295      	cmp	r5, r2
10053672:	d83a      	bhi.n	100536ea <GAP_set_legacy_advertising_configuration+0x92>
10053674:	4294      	cmp	r4, r2
10053676:	d838      	bhi.n	100536ea <GAP_set_legacy_advertising_configuration+0x92>
10053678:	930a      	str	r3, [sp, #40]	@ 0x28
1005367a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005367c:	9009      	str	r0, [sp, #36]	@ 0x24
1005367e:	9812      	ldr	r0, [sp, #72]	@ 0x48
10053680:	9008      	str	r0, [sp, #32]
10053682:	9811      	ldr	r0, [sp, #68]	@ 0x44
10053684:	9006      	str	r0, [sp, #24]
10053686:	9810      	ldr	r0, [sp, #64]	@ 0x40
10053688:	9007      	str	r0, [sp, #28]
1005368a:	4819      	ldr	r0, [pc, #100]	@ (100536f0 <__arm_cp.2_0>)
1005368c:	6800      	ldr	r0, [r0, #0]
1005368e:	6d46      	ldr	r6, [r0, #84]	@ 0x54
10053690:	2000      	movs	r0, #0
10053692:	9004      	str	r0, [sp, #16]
10053694:	7070      	strb	r0, [r6, #1]
10053696:	7031      	strb	r1, [r6, #0]
10053698:	f7ff fed2 	bl	10053440 <GAP_get_own_address_type>
1005369c:	9005      	str	r0, [sp, #20]
1005369e:	4638      	mov	r0, r7
100536a0:	f7ff ffc0 	bl	10053624 <GAP_advEvtProp_to_advType>
100536a4:	4602      	mov	r2, r0
100536a6:	7870      	ldrb	r0, [r6, #1]
100536a8:	2120      	movs	r1, #32
100536aa:	4301      	orrs	r1, r0
100536ac:	7071      	strb	r1, [r6, #1]
100536ae:	2a04      	cmp	r2, #4
100536b0:	d808      	bhi.n	100536c4 <GAP_set_legacy_advertising_configuration+0x6c>
100536b2:	2117      	movs	r1, #23
100536b4:	40d1      	lsrs	r1, r2
100536b6:	07c9      	lsls	r1, r1, #31
100536b8:	d004      	beq.n	100536c4 <GAP_set_legacy_advertising_configuration+0x6c>
100536ba:	b251      	sxtb	r1, r2
100536bc:	a30d      	add	r3, pc, #52	@ (adr r3, 100536f4 <__arm_cp.2_0+0x4>)
100536be:	5c59      	ldrb	r1, [r3, r1]
100536c0:	4308      	orrs	r0, r1
100536c2:	7070      	strb	r0, [r6, #1]
100536c4:	9806      	ldr	r0, [sp, #24]
100536c6:	9000      	str	r0, [sp, #0]
100536c8:	9808      	ldr	r0, [sp, #32]
100536ca:	9001      	str	r0, [sp, #4]
100536cc:	9807      	ldr	r0, [sp, #28]
100536ce:	9002      	str	r0, [sp, #8]
100536d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
100536d2:	9003      	str	r0, [sp, #12]
100536d4:	b2a8      	uxth	r0, r5
100536d6:	b2a1      	uxth	r1, r4
100536d8:	9b05      	ldr	r3, [sp, #20]
100536da:	f002 fe8d 	bl	100563f8 <hci_le_set_advertising_parameters>
100536de:	2800      	cmp	r0, #0
100536e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
100536e2:	d102      	bne.n	100536ea <GAP_set_legacy_advertising_configuration+0x92>
100536e4:	9804      	ldr	r0, [sp, #16]
100536e6:	74b0      	strb	r0, [r6, #18]
100536e8:	7431      	strb	r1, [r6, #16]
100536ea:	b00b      	add	sp, #44	@ 0x2c
100536ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100536ee:	46c0      	nop			@ (mov r8, r8)

100536f0 <__arm_cp.2_0>:
100536f0:	20000ed4 	.word	0x20000ed4
100536f4:	70287028 	.word	0x70287028
100536f8:	00000030 	.word	0x00000030

100536fc <GAP_get_advertising_set_index>:
100536fc:	b570      	push	{r4, r5, r6, lr}
100536fe:	4602      	mov	r2, r0
10053700:	480b      	ldr	r0, [pc, #44]	@ (10053730 <__arm_cp.4_0>)
10053702:	7e84      	ldrb	r4, [r0, #26]
10053704:	480b      	ldr	r0, [pc, #44]	@ (10053734 <__arm_cp.4_1>)
10053706:	6800      	ldr	r0, [r0, #0]
10053708:	6d45      	ldr	r5, [r0, #84]	@ 0x54
1005370a:	3510      	adds	r5, #16
1005370c:	2000      	movs	r0, #0
1005370e:	4603      	mov	r3, r0
10053710:	429c      	cmp	r4, r3
10053712:	d008      	beq.n	10053726 <GAP_get_advertising_set_index+0x2a>
10053714:	782e      	ldrb	r6, [r5, #0]
10053716:	2e00      	cmp	r6, #0
10053718:	d008      	beq.n	1005372c <GAP_get_advertising_set_index+0x30>
1005371a:	78ae      	ldrb	r6, [r5, #2]
1005371c:	4296      	cmp	r6, r2
1005371e:	d004      	beq.n	1005372a <GAP_get_advertising_set_index+0x2e>
10053720:	3514      	adds	r5, #20
10053722:	1c5b      	adds	r3, r3, #1
10053724:	e7f4      	b.n	10053710 <GAP_get_advertising_set_index+0x14>
10053726:	4623      	mov	r3, r4
10053728:	e000      	b.n	1005372c <GAP_get_advertising_set_index+0x30>
1005372a:	2001      	movs	r0, #1
1005372c:	700b      	strb	r3, [r1, #0]
1005372e:	bd70      	pop	{r4, r5, r6, pc}

10053730 <__arm_cp.4_0>:
10053730:	20000f34 	.word	0x20000f34

10053734 <__arm_cp.4_1>:
10053734:	20000ed4 	.word	0x20000ed4

10053738 <GAP_set_legacy_advertising_enable>:
10053738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005373a:	4604      	mov	r4, r0
1005373c:	4819      	ldr	r0, [pc, #100]	@ (100537a4 <__arm_cp.5_0>)
1005373e:	6800      	ldr	r0, [r0, #0]
10053740:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10053742:	2c00      	cmp	r4, #0
10053744:	d00d      	beq.n	10053762 <GAP_set_legacy_advertising_enable+0x2a>
10053746:	7c38      	ldrb	r0, [r7, #16]
10053748:	2800      	cmp	r0, #0
1005374a:	d023      	beq.n	10053794 <GAP_set_legacy_advertising_enable+0x5c>
1005374c:	2000      	movs	r0, #0
1005374e:	4601      	mov	r1, r0
10053750:	f000 f82a 	bl	100537a8 <GAP_check_flags>
10053754:	4605      	mov	r5, r0
10053756:	2800      	cmp	r0, #0
10053758:	d122      	bne.n	100537a0 <GAP_set_legacy_advertising_enable+0x68>
1005375a:	f7ff fee7 	bl	1005352c <GAP_generate_new_rpa>
1005375e:	4606      	mov	r6, r0
10053760:	e000      	b.n	10053764 <GAP_set_legacy_advertising_enable+0x2c>
10053762:	260c      	movs	r6, #12
10053764:	4620      	mov	r0, r4
10053766:	f002 fea7 	bl	100564b8 <hci_le_set_advertising_enable>
1005376a:	4605      	mov	r5, r0
1005376c:	2800      	cmp	r0, #0
1005376e:	d117      	bne.n	100537a0 <GAP_set_legacy_advertising_enable+0x68>
10053770:	2500      	movs	r5, #0
10053772:	4620      	mov	r0, r4
10053774:	4629      	mov	r1, r5
10053776:	462a      	mov	r2, r5
10053778:	f000 f870 	bl	1005385c <GAP_set_discoverability_mode>
1005377c:	2c00      	cmp	r4, #0
1005377e:	d00b      	beq.n	10053798 <GAP_set_legacy_advertising_enable+0x60>
10053780:	2001      	movs	r0, #1
10053782:	7478      	strb	r0, [r7, #17]
10053784:	2e00      	cmp	r6, #0
10053786:	d10b      	bne.n	100537a0 <GAP_set_legacy_advertising_enable+0x68>
10053788:	2500      	movs	r5, #0
1005378a:	4628      	mov	r0, r5
1005378c:	4629      	mov	r1, r5
1005378e:	f7ff fea5 	bl	100534dc <GAP_start_privacy_timer>
10053792:	e005      	b.n	100537a0 <GAP_set_legacy_advertising_enable+0x68>
10053794:	25d3      	movs	r5, #211	@ 0xd3
10053796:	e003      	b.n	100537a0 <GAP_set_legacy_advertising_enable+0x68>
10053798:	2500      	movs	r5, #0
1005379a:	747d      	strb	r5, [r7, #17]
1005379c:	f7ff fe0a 	bl	100533b4 <GAP_stop_privacy_timer>
100537a0:	4628      	mov	r0, r5
100537a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100537a4 <__arm_cp.5_0>:
100537a4:	20000ed4 	.word	0x20000ed4

100537a8 <GAP_check_flags>:
100537a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100537aa:	4a28      	ldr	r2, [pc, #160]	@ (1005384c <__arm_cp.6_0>)
100537ac:	7e92      	ldrb	r2, [r2, #26]
100537ae:	2512      	movs	r5, #18
100537b0:	428a      	cmp	r2, r1
100537b2:	d925      	bls.n	10053800 <GAP_check_flags+0x58>
100537b4:	2800      	cmp	r0, #0
100537b6:	d100      	bne.n	100537ba <GAP_check_flags+0x12>
100537b8:	4601      	mov	r1, r0
100537ba:	2214      	movs	r2, #20
100537bc:	434a      	muls	r2, r1
100537be:	4824      	ldr	r0, [pc, #144]	@ (10053850 <__arm_cp.6_1>)
100537c0:	6800      	ldr	r0, [r0, #0]
100537c2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
100537c4:	1899      	adds	r1, r3, r2
100537c6:	784c      	ldrb	r4, [r1, #1]
100537c8:	06a0      	lsls	r0, r4, #26
100537ca:	0fc6      	lsrs	r6, r0, #31
100537cc:	2000      	movs	r0, #0
100537ce:	2e00      	cmp	r6, #0
100537d0:	d002      	beq.n	100537d8 <GAP_check_flags+0x30>
100537d2:	2710      	movs	r7, #16
100537d4:	4027      	ands	r7, r4
100537d6:	d114      	bne.n	10053802 <GAP_check_flags+0x5a>
100537d8:	2e00      	cmp	r6, #0
100537da:	d102      	bne.n	100537e2 <GAP_check_flags+0x3a>
100537dc:	2608      	movs	r6, #8
100537de:	4034      	ands	r4, r6
100537e0:	d10f      	bne.n	10053802 <GAP_check_flags+0x5a>
100537e2:	5c9e      	ldrb	r6, [r3, r2]
100537e4:	684c      	ldr	r4, [r1, #4]
100537e6:	8988      	ldrh	r0, [r1, #12]
100537e8:	4621      	mov	r1, r4
100537ea:	f000 f8bb 	bl	10053964 <GAP_search_flags_index>
100537ee:	4919      	ldr	r1, [pc, #100]	@ (10053854 <__arm_cp.6_2>)
100537f0:	4288      	cmp	r0, r1
100537f2:	d008      	beq.n	10053806 <GAP_check_flags+0x5e>
100537f4:	1900      	adds	r0, r0, r4
100537f6:	7881      	ldrb	r1, [r0, #2]
100537f8:	0748      	lsls	r0, r1, #29
100537fa:	d40b      	bmi.n	10053814 <GAP_check_flags+0x6c>
100537fc:	20d4      	movs	r0, #212	@ 0xd4
100537fe:	e000      	b.n	10053802 <GAP_check_flags+0x5a>
10053800:	4628      	mov	r0, r5
10053802:	b2c0      	uxtb	r0, r0
10053804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053806:	2e03      	cmp	r6, #3
10053808:	4628      	mov	r0, r5
1005380a:	d8fa      	bhi.n	10053802 <GAP_check_flags+0x5a>
1005380c:	00f1      	lsls	r1, r6, #3
1005380e:	4812      	ldr	r0, [pc, #72]	@ (10053858 <__arm_cp.6_3>)
10053810:	40c8      	lsrs	r0, r1
10053812:	e7f6      	b.n	10053802 <GAP_check_flags+0x5a>
10053814:	2e03      	cmp	r6, #3
10053816:	4628      	mov	r0, r5
10053818:	d8f3      	bhi.n	10053802 <GAP_check_flags+0x5a>
1005381a:	46c0      	nop			@ (mov r8, r8)
1005381c:	447e      	add	r6, pc
1005381e:	7936      	ldrb	r6, [r6, #4]
10053820:	0076      	lsls	r6, r6, #1
10053822:	44b7      	add	pc, r6
10053824:	010d0601 	.word	0x010d0601
10053828:	2003      	movs	r0, #3
1005382a:	4001      	ands	r1, r0
1005382c:	d105      	bne.n	1005383a <GAP_check_flags+0x92>
1005382e:	4608      	mov	r0, r1
10053830:	e7e7      	b.n	10053802 <GAP_check_flags+0x5a>
10053832:	2003      	movs	r0, #3
10053834:	4001      	ands	r1, r0
10053836:	2901      	cmp	r1, #1
10053838:	d006      	beq.n	10053848 <GAP_check_flags+0xa0>
1005383a:	202b      	movs	r0, #43	@ 0x2b
1005383c:	43c0      	mvns	r0, r0
1005383e:	e7e0      	b.n	10053802 <GAP_check_flags+0x5a>
10053840:	2003      	movs	r0, #3
10053842:	4001      	ands	r1, r0
10053844:	2902      	cmp	r1, #2
10053846:	d1f8      	bne.n	1005383a <GAP_check_flags+0x92>
10053848:	2000      	movs	r0, #0
1005384a:	e7da      	b.n	10053802 <GAP_check_flags+0x5a>

1005384c <__arm_cp.6_0>:
1005384c:	20000f34 	.word	0x20000f34

10053850 <__arm_cp.6_1>:
10053850:	20000ed4 	.word	0x20000ed4

10053854 <__arm_cp.6_2>:
10053854:	0000ffff 	.word	0x0000ffff

10053858 <__arm_cp.6_3>:
10053858:	00d4d400 	.word	0x00d4d400

1005385c <GAP_set_discoverability_mode>:
1005385c:	b570      	push	{r4, r5, r6, lr}
1005385e:	4603      	mov	r3, r0
10053860:	2900      	cmp	r1, #0
10053862:	d100      	bne.n	10053866 <GAP_set_discoverability_mode+0xa>
10053864:	460a      	mov	r2, r1
10053866:	4829      	ldr	r0, [pc, #164]	@ (1005390c <__arm_cp.7_0>)
10053868:	6800      	ldr	r0, [r0, #0]
1005386a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1005386c:	2b01      	cmp	r3, #1
1005386e:	d10c      	bne.n	1005388a <GAP_set_discoverability_mode+0x2e>
10053870:	2314      	movs	r3, #20
10053872:	4353      	muls	r3, r2
10053874:	5cca      	ldrb	r2, [r1, r3]
10053876:	2a01      	cmp	r2, #1
10053878:	d033      	beq.n	100538e2 <GAP_set_discoverability_mode+0x86>
1005387a:	2a02      	cmp	r2, #2
1005387c:	d13e      	bne.n	100538fc <GAP_set_discoverability_mode+0xa0>
1005387e:	18ca      	adds	r2, r1, r3
10053880:	7894      	ldrb	r4, [r2, #2]
10053882:	2004      	movs	r0, #4
10053884:	4320      	orrs	r0, r4
10053886:	7090      	strb	r0, [r2, #2]
10053888:	e03a      	b.n	10053900 <GAP_set_discoverability_mode+0xa4>
1005388a:	2314      	movs	r3, #20
1005388c:	4353      	muls	r3, r2
1005388e:	18c9      	adds	r1, r1, r3
10053890:	1c8e      	adds	r6, r1, #2
10053892:	7889      	ldrb	r1, [r1, #2]
10053894:	0789      	lsls	r1, r1, #30
10053896:	d521      	bpl.n	100538dc <GAP_set_discoverability_mode+0x80>
10053898:	2400      	movs	r4, #0
1005389a:	4621      	mov	r1, r4
1005389c:	f00c f8db 	bl	1005fa56 <CST_stop>
100538a0:	481b      	ldr	r0, [pc, #108]	@ (10053910 <__arm_cp.7_1>)
100538a2:	6800      	ldr	r0, [r0, #0]
100538a4:	214e      	movs	r1, #78	@ 0x4e
100538a6:	5c40      	ldrb	r0, [r0, r1]
100538a8:	07c0      	lsls	r0, r0, #31
100538aa:	d017      	beq.n	100538dc <GAP_set_discoverability_mode+0x80>
100538ac:	4819      	ldr	r0, [pc, #100]	@ (10053914 <__arm_cp.7_2>)
100538ae:	6800      	ldr	r0, [r0, #0]
100538b0:	6980      	ldr	r0, [r0, #24]
100538b2:	2244      	movs	r2, #68	@ 0x44
100538b4:	2502      	movs	r5, #2
100538b6:	4629      	mov	r1, r5
100538b8:	462b      	mov	r3, r5
100538ba:	f7fe fd0f 	bl	100522dc <aci_event_fifo_push_header>
100538be:	2800      	cmp	r0, #0
100538c0:	d00c      	beq.n	100538dc <GAP_set_discoverability_mode+0x80>
100538c2:	4601      	mov	r1, r0
100538c4:	7185      	strb	r5, [r0, #6]
100538c6:	71c4      	strb	r4, [r0, #7]
100538c8:	7204      	strb	r4, [r0, #8]
100538ca:	20ff      	movs	r0, #255	@ 0xff
100538cc:	7148      	strb	r0, [r1, #5]
100538ce:	2082      	movs	r0, #130	@ 0x82
100538d0:	7108      	strb	r0, [r1, #4]
100538d2:	2004      	movs	r0, #4
100538d4:	7248      	strb	r0, [r1, #9]
100538d6:	4628      	mov	r0, r5
100538d8:	f7fe fd9d 	bl	10052416 <aci_event_fifo_push>
100538dc:	2000      	movs	r0, #0
100538de:	7030      	strb	r0, [r6, #0]
100538e0:	bd70      	pop	{r4, r5, r6, pc}
100538e2:	18c9      	adds	r1, r1, r3
100538e4:	784a      	ldrb	r2, [r1, #1]
100538e6:	788b      	ldrb	r3, [r1, #2]
100538e8:	4313      	orrs	r3, r2
100538ea:	2202      	movs	r2, #2
100538ec:	431a      	orrs	r2, r3
100538ee:	708a      	strb	r2, [r1, #2]
100538f0:	2100      	movs	r1, #0
100538f2:	2201      	movs	r2, #1
100538f4:	4b08      	ldr	r3, [pc, #32]	@ (10053918 <__arm_cp.7_3>)
100538f6:	f00c f8e4 	bl	1005fac2 <CST_start>
100538fa:	bd70      	pop	{r4, r5, r6, pc}
100538fc:	18c8      	adds	r0, r1, r3
100538fe:	7880      	ldrb	r0, [r0, #2]
10053900:	18c9      	adds	r1, r1, r3
10053902:	784a      	ldrb	r2, [r1, #1]
10053904:	4302      	orrs	r2, r0
10053906:	708a      	strb	r2, [r1, #2]
10053908:	bd70      	pop	{r4, r5, r6, pc}
1005390a:	46c0      	nop			@ (mov r8, r8)

1005390c <__arm_cp.7_0>:
1005390c:	20000ed4 	.word	0x20000ed4

10053910 <__arm_cp.7_1>:
10053910:	20000f20 	.word	0x20000f20

10053914 <__arm_cp.7_2>:
10053914:	20000ed0 	.word	0x20000ed0

10053918 <__arm_cp.7_3>:
10053918:	0002bf20 	.word	0x0002bf20

1005391c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1005391c:	b580      	push	{r7, lr}
1005391e:	f000 f801 	bl	10053924 <GAP_suspend_resume_active_advertising_sets_legacy>
10053922:	bd80      	pop	{r7, pc}

10053924 <GAP_suspend_resume_active_advertising_sets_legacy>:
10053924:	b580      	push	{r7, lr}
10053926:	4905      	ldr	r1, [pc, #20]	@ (1005393c <__arm_cp.11_0>)
10053928:	6809      	ldr	r1, [r1, #0]
1005392a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1005392c:	7c49      	ldrb	r1, [r1, #17]
1005392e:	2901      	cmp	r1, #1
10053930:	d102      	bne.n	10053938 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10053932:	f002 fdc1 	bl	100564b8 <hci_le_set_advertising_enable>
10053936:	bd80      	pop	{r7, pc}
10053938:	2000      	movs	r0, #0
1005393a:	bd80      	pop	{r7, pc}

1005393c <__arm_cp.11_0>:
1005393c:	20000ed4 	.word	0x20000ed4

10053940 <GAP_set_legacy_advertising_data>:
10053940:	b5b0      	push	{r4, r5, r7, lr}
10053942:	460c      	mov	r4, r1
10053944:	4605      	mov	r5, r0
10053946:	b2c0      	uxtb	r0, r0
10053948:	f008 fe9e 	bl	1005c688 <ll_set_legacy_advertising_data_ptr>
1005394c:	2800      	cmp	r0, #0
1005394e:	d000      	beq.n	10053952 <GAP_set_legacy_advertising_data+0x12>
10053950:	bdb0      	pop	{r4, r5, r7, pc}
10053952:	4903      	ldr	r1, [pc, #12]	@ (10053960 <__arm_cp.12_0>)
10053954:	6809      	ldr	r1, [r1, #0]
10053956:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10053958:	818d      	strh	r5, [r1, #12]
1005395a:	604c      	str	r4, [r1, #4]
1005395c:	bdb0      	pop	{r4, r5, r7, pc}
1005395e:	46c0      	nop			@ (mov r8, r8)

10053960 <__arm_cp.12_0>:
10053960:	20000ed4 	.word	0x20000ed4

10053964 <GAP_search_flags_index>:
10053964:	b5b0      	push	{r4, r5, r7, lr}
10053966:	4a0a      	ldr	r2, [pc, #40]	@ (10053990 <__arm_cp.16_0>)
10053968:	2803      	cmp	r0, #3
1005396a:	d30f      	bcc.n	1005398c <GAP_search_flags_index+0x28>
1005396c:	2300      	movs	r3, #0
1005396e:	b29d      	uxth	r5, r3
10053970:	5d4c      	ldrb	r4, [r1, r5]
10053972:	2c02      	cmp	r4, #2
10053974:	d103      	bne.n	1005397e <GAP_search_flags_index+0x1a>
10053976:	186d      	adds	r5, r5, r1
10053978:	786d      	ldrb	r5, [r5, #1]
1005397a:	2d01      	cmp	r5, #1
1005397c:	d005      	beq.n	1005398a <GAP_search_flags_index+0x26>
1005397e:	191b      	adds	r3, r3, r4
10053980:	1c5b      	adds	r3, r3, #1
10053982:	b29c      	uxth	r4, r3
10053984:	4284      	cmp	r4, r0
10053986:	d3f2      	bcc.n	1005396e <GAP_search_flags_index+0xa>
10053988:	e000      	b.n	1005398c <GAP_search_flags_index+0x28>
1005398a:	461a      	mov	r2, r3
1005398c:	b290      	uxth	r0, r2
1005398e:	bdb0      	pop	{r4, r5, r7, pc}

10053990 <__arm_cp.16_0>:
10053990:	0000ffff 	.word	0x0000ffff

10053994 <GAP_check_adv_status>:
10053994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053996:	4605      	mov	r5, r0
10053998:	2600      	movs	r6, #0
1005399a:	7006      	strb	r6, [r0, #0]
1005399c:	2401      	movs	r4, #1
1005399e:	9100      	str	r1, [sp, #0]
100539a0:	700c      	strb	r4, [r1, #0]
100539a2:	4816      	ldr	r0, [pc, #88]	@ (100539fc <__arm_cp.17_0>)
100539a4:	6800      	ldr	r0, [r0, #0]
100539a6:	6d47      	ldr	r7, [r0, #84]	@ 0x54
100539a8:	f7ff fb86 	bl	100530b8 <gap_extended_adv_scan_supported>
100539ac:	2800      	cmp	r0, #0
100539ae:	d001      	beq.n	100539b4 <GAP_check_adv_status+0x20>
100539b0:	4813      	ldr	r0, [pc, #76]	@ (10053a00 <__arm_cp.17_1>)
100539b2:	7e84      	ldrb	r4, [r0, #26]
100539b4:	b2e1      	uxtb	r1, r4
100539b6:	3711      	adds	r7, #17
100539b8:	4630      	mov	r0, r6
100539ba:	4632      	mov	r2, r6
100539bc:	2900      	cmp	r1, #0
100539be:	d00f      	beq.n	100539e0 <GAP_check_adv_status+0x4c>
100539c0:	783b      	ldrb	r3, [r7, #0]
100539c2:	2b00      	cmp	r3, #0
100539c4:	d009      	beq.n	100539da <GAP_check_adv_status+0x46>
100539c6:	2b02      	cmp	r3, #2
100539c8:	d100      	bne.n	100539cc <GAP_check_adv_status+0x38>
100539ca:	2001      	movs	r0, #1
100539cc:	463a      	mov	r2, r7
100539ce:	3a0f      	subs	r2, #15
100539d0:	7813      	ldrb	r3, [r2, #0]
100539d2:	2201      	movs	r2, #1
100539d4:	079b      	lsls	r3, r3, #30
100539d6:	d500      	bpl.n	100539da <GAP_check_adv_status+0x46>
100539d8:	4616      	mov	r6, r2
100539da:	3714      	adds	r7, #20
100539dc:	1e49      	subs	r1, r1, #1
100539de:	e7ed      	b.n	100539bc <GAP_check_adv_status+0x28>
100539e0:	2a01      	cmp	r2, #1
100539e2:	d101      	bne.n	100539e8 <GAP_check_adv_status+0x54>
100539e4:	2101      	movs	r1, #1
100539e6:	7029      	strb	r1, [r5, #0]
100539e8:	2801      	cmp	r0, #1
100539ea:	d002      	beq.n	100539f2 <GAP_check_adv_status+0x5e>
100539ec:	b2f0      	uxtb	r0, r6
100539ee:	2801      	cmp	r0, #1
100539f0:	d102      	bne.n	100539f8 <GAP_check_adv_status+0x64>
100539f2:	2000      	movs	r0, #0
100539f4:	9900      	ldr	r1, [sp, #0]
100539f6:	7008      	strb	r0, [r1, #0]
100539f8:	b2d0      	uxtb	r0, r2
100539fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100539fc <__arm_cp.17_0>:
100539fc:	20000ed4 	.word	0x20000ed4

10053a00 <__arm_cp.17_1>:
10053a00:	20000f34 	.word	0x20000f34

10053a04 <GAP_ResumeAdvertising_ucfg_weak>:
10053a04:	b580      	push	{r7, lr}
10053a06:	2001      	movs	r0, #1
10053a08:	f7ff ff8c 	bl	10053924 <GAP_suspend_resume_active_advertising_sets_legacy>
10053a0c:	bd80      	pop	{r7, pc}
	...

10053a10 <GAT_att_cmn_init>:
10053a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053a12:	2001      	movs	r0, #1
10053a14:	2198      	movs	r1, #152	@ 0x98
10053a16:	f00a f9d5 	bl	1005ddc4 <csmem_mem_0_assign>
10053a1a:	4e2b      	ldr	r6, [pc, #172]	@ (10053ac8 <__arm_cp.1_0>)
10053a1c:	6030      	str	r0, [r6, #0]
10053a1e:	4f2b      	ldr	r7, [pc, #172]	@ (10053acc <__arm_cp.1_1>)
10053a20:	7af8      	ldrb	r0, [r7, #11]
10053a22:	7b39      	ldrb	r1, [r7, #12]
10053a24:	1808      	adds	r0, r1, r0
10053a26:	2414      	movs	r4, #20
10053a28:	4621      	mov	r1, r4
10053a2a:	f00a f9cb 	bl	1005ddc4 <csmem_mem_0_assign>
10053a2e:	6832      	ldr	r2, [r6, #0]
10053a30:	2500      	movs	r5, #0
10053a32:	6355      	str	r5, [r2, #52]	@ 0x34
10053a34:	62d5      	str	r5, [r2, #44]	@ 0x2c
10053a36:	7af9      	ldrb	r1, [r7, #11]
10053a38:	4603      	mov	r3, r0
10053a3a:	462f      	mov	r7, r5
10053a3c:	42b9      	cmp	r1, r7
10053a3e:	d00a      	beq.n	10053a56 <GAT_att_cmn_init+0x46>
10053a40:	611d      	str	r5, [r3, #16]
10053a42:	705f      	strb	r7, [r3, #1]
10053a44:	701f      	strb	r7, [r3, #0]
10053a46:	6832      	ldr	r2, [r6, #0]
10053a48:	62d3      	str	r3, [r2, #44]	@ 0x2c
10053a4a:	4625      	mov	r5, r4
10053a4c:	437d      	muls	r5, r7
10053a4e:	1945      	adds	r5, r0, r5
10053a50:	3314      	adds	r3, #20
10053a52:	1c7f      	adds	r7, r7, #1
10053a54:	e7f2      	b.n	10053a3c <GAT_att_cmn_init+0x2c>
10053a56:	2300      	movs	r3, #0
10053a58:	6313      	str	r3, [r2, #48]	@ 0x30
10053a5a:	4a1c      	ldr	r2, [pc, #112]	@ (10053acc <__arm_cp.1_1>)
10053a5c:	7b12      	ldrb	r2, [r2, #12]
10053a5e:	1852      	adds	r2, r2, r1
10053a60:	b2cd      	uxtb	r5, r1
10053a62:	42aa      	cmp	r2, r5
10053a64:	d90a      	bls.n	10053a7c <GAT_att_cmn_init+0x6c>
10053a66:	4365      	muls	r5, r4
10053a68:	27ff      	movs	r7, #255	@ 0xff
10053a6a:	5547      	strb	r7, [r0, r5]
10053a6c:	1945      	adds	r5, r0, r5
10053a6e:	612b      	str	r3, [r5, #16]
10053a70:	7069      	strb	r1, [r5, #1]
10053a72:	6833      	ldr	r3, [r6, #0]
10053a74:	631d      	str	r5, [r3, #48]	@ 0x30
10053a76:	1c49      	adds	r1, r1, #1
10053a78:	462b      	mov	r3, r5
10053a7a:	e7f1      	b.n	10053a60 <GAT_att_cmn_init+0x50>
10053a7c:	0690      	lsls	r0, r2, #26
10053a7e:	0e00      	lsrs	r0, r0, #24
10053a80:	1c41      	adds	r1, r0, #1
10053a82:	4c13      	ldr	r4, [pc, #76]	@ (10053ad0 <__arm_cp.1_2>)
10053a84:	2201      	movs	r2, #1
10053a86:	4620      	mov	r0, r4
10053a88:	f00a f98a 	bl	1005dda0 <csmem_mem_assign>
10053a8c:	6831      	ldr	r1, [r6, #0]
10053a8e:	6208      	str	r0, [r1, #32]
10053a90:	4d0e      	ldr	r5, [pc, #56]	@ (10053acc <__arm_cp.1_1>)
10053a92:	7ae8      	ldrb	r0, [r5, #11]
10053a94:	7b29      	ldrb	r1, [r5, #12]
10053a96:	1808      	adds	r0, r1, r0
10053a98:	0680      	lsls	r0, r0, #26
10053a9a:	0e01      	lsrs	r1, r0, #24
10053a9c:	2202      	movs	r2, #2
10053a9e:	4620      	mov	r0, r4
10053aa0:	f00a f97e 	bl	1005dda0 <csmem_mem_assign>
10053aa4:	6834      	ldr	r4, [r6, #0]
10053aa6:	6260      	str	r0, [r4, #36]	@ 0x24
10053aa8:	7ae8      	ldrb	r0, [r5, #11]
10053aaa:	7b29      	ldrb	r1, [r5, #12]
10053aac:	1808      	adds	r0, r1, r0
10053aae:	0680      	lsls	r0, r0, #26
10053ab0:	0e01      	lsrs	r1, r0, #24
10053ab2:	4a08      	ldr	r2, [pc, #32]	@ (10053ad4 <__arm_cp.1_3>)
10053ab4:	2307      	movs	r3, #7
10053ab6:	4620      	mov	r0, r4
10053ab8:	f00b ffb8 	bl	1005fa2c <CST_init>
10053abc:	f000 f9f2 	bl	10053ea4 <GAT_att_srv_init>
10053ac0:	f00d fbfc 	bl	100612bc <GAT_att_clt_init>
10053ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053ac6:	46c0      	nop			@ (mov r8, r8)

10053ac8 <__arm_cp.1_0>:
10053ac8:	20000ed8 	.word	0x20000ed8

10053acc <__arm_cp.1_1>:
10053acc:	20000f34 	.word	0x20000f34

10053ad0 <__arm_cp.1_2>:
10053ad0:	20000f30 	.word	0x20000f30

10053ad4 <__arm_cp.1_3>:
10053ad4:	10053ad9 	.word	0x10053ad9

10053ad8 <GAT_att_cmn_timeout_cb_wrapper>:
10053ad8:	b580      	push	{r7, lr}
10053ada:	6940      	ldr	r0, [r0, #20]
10053adc:	4901      	ldr	r1, [pc, #4]	@ (10053ae4 <__arm_cp.2_0>)
10053ade:	f00c f87e 	bl	1005fbde <cst_sharedCallback>
10053ae2:	bd80      	pop	{r7, pc}

10053ae4 <__arm_cp.2_0>:
10053ae4:	10053e51 	.word	0x10053e51

10053ae8 <GAT_att_cmn_timer_expire_tsk>:
10053ae8:	b5e0      	push	{r5, r6, r7, lr}
10053aea:	2000      	movs	r0, #0
10053aec:	9000      	str	r0, [sp, #0]
10053aee:	4b06      	ldr	r3, [pc, #24]	@ (10053b08 <__arm_cp.4_0>)
10053af0:	4601      	mov	r1, r0
10053af2:	4602      	mov	r2, r0
10053af4:	f000 f80a 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
10053af8:	2800      	cmp	r0, #0
10053afa:	d004      	beq.n	10053b06 <GAT_att_cmn_timer_expire_tsk+0x1e>
10053afc:	2007      	movs	r0, #7
10053afe:	f00b ff37 	bl	1005f970 <tsk_notify_idx>
10053b02:	f7fb f8de 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10053b06:	bd8c      	pop	{r2, r3, r7, pc}

10053b08 <__arm_cp.4_0>:
10053b08:	10053b69 	.word	0x10053b69

10053b0c <GAT_att_cmn_for_each_ch_descr>:
10053b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10053b0e:	b085      	sub	sp, #20
10053b10:	9304      	str	r3, [sp, #16]
10053b12:	9201      	str	r2, [sp, #4]
10053b14:	9102      	str	r1, [sp, #8]
10053b16:	4607      	mov	r7, r0
10053b18:	2002      	movs	r0, #2
10053b1a:	4038      	ands	r0, r7
10053b1c:	9003      	str	r0, [sp, #12]
10053b1e:	2401      	movs	r4, #1
10053b20:	403c      	ands	r4, r7
10053b22:	4810      	ldr	r0, [pc, #64]	@ (10053b64 <__arm_cp.5_0>)
10053b24:	6805      	ldr	r5, [r0, #0]
10053b26:	3534      	adds	r5, #52	@ 0x34
10053b28:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10053b2a:	682d      	ldr	r5, [r5, #0]
10053b2c:	2d00      	cmp	r5, #0
10053b2e:	d016      	beq.n	10053b5e <GAT_att_cmn_for_each_ch_descr+0x52>
10053b30:	2f00      	cmp	r7, #0
10053b32:	d00c      	beq.n	10053b4e <GAT_att_cmn_for_each_ch_descr+0x42>
10053b34:	2c00      	cmp	r4, #0
10053b36:	d003      	beq.n	10053b40 <GAT_att_cmn_for_each_ch_descr+0x34>
10053b38:	8928      	ldrh	r0, [r5, #8]
10053b3a:	9902      	ldr	r1, [sp, #8]
10053b3c:	4288      	cmp	r0, r1
10053b3e:	d10c      	bne.n	10053b5a <GAT_att_cmn_for_each_ch_descr+0x4e>
10053b40:	9803      	ldr	r0, [sp, #12]
10053b42:	2800      	cmp	r0, #0
10053b44:	d003      	beq.n	10053b4e <GAT_att_cmn_for_each_ch_descr+0x42>
10053b46:	8968      	ldrh	r0, [r5, #10]
10053b48:	9901      	ldr	r1, [sp, #4]
10053b4a:	4288      	cmp	r0, r1
10053b4c:	d105      	bne.n	10053b5a <GAT_att_cmn_for_each_ch_descr+0x4e>
10053b4e:	4628      	mov	r0, r5
10053b50:	4631      	mov	r1, r6
10053b52:	9a04      	ldr	r2, [sp, #16]
10053b54:	4790      	blx	r2
10053b56:	2800      	cmp	r0, #0
10053b58:	d102      	bne.n	10053b60 <GAT_att_cmn_for_each_ch_descr+0x54>
10053b5a:	3510      	adds	r5, #16
10053b5c:	e7e5      	b.n	10053b2a <GAT_att_cmn_for_each_ch_descr+0x1e>
10053b5e:	2000      	movs	r0, #0
10053b60:	b005      	add	sp, #20
10053b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

10053b64 <__arm_cp.5_0>:
10053b64:	20000ed8 	.word	0x20000ed8

10053b68 <GAT_att_cmn_handle_disconnec_iterate_f>:
10053b68:	b5b0      	push	{r4, r5, r7, lr}
10053b6a:	4604      	mov	r4, r0
10053b6c:	8880      	ldrh	r0, [r0, #4]
10053b6e:	2500      	movs	r5, #0
10053b70:	05c0      	lsls	r0, r0, #23
10053b72:	d401      	bmi.n	10053b78 <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10053b74:	4628      	mov	r0, r5
10053b76:	e006      	b.n	10053b86 <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10053b78:	8962      	ldrh	r2, [r4, #10]
10053b7a:	8921      	ldrh	r1, [r4, #8]
10053b7c:	2002      	movs	r0, #2
10053b7e:	f00c fd83 	bl	10060688 <aci_gatt_proc_timeout_event_push_noinline>
10053b82:	2800      	cmp	r0, #0
10053b84:	d000      	beq.n	10053b88 <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
10053b86:	bdb0      	pop	{r4, r5, r7, pc}
10053b88:	8920      	ldrh	r0, [r4, #8]
10053b8a:	8961      	ldrh	r1, [r4, #10]
10053b8c:	2904      	cmp	r1, #4
10053b8e:	d102      	bne.n	10053b96 <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
10053b90:	f000 f8ac 	bl	10053cec <GAT_att_cmn_disconnection>
10053b94:	e7ee      	b.n	10053b74 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
10053b96:	f000 fb17 	bl	100541c8 <GAT_att_srv_bearer_close>
10053b9a:	8961      	ldrh	r1, [r4, #10]
10053b9c:	8920      	ldrh	r0, [r4, #8]
10053b9e:	f00d fc7e 	bl	1006149e <GAT_att_clt_bearer_close>
10053ba2:	2000      	movs	r0, #0
10053ba4:	8120      	strh	r0, [r4, #8]
10053ba6:	4909      	ldr	r1, [pc, #36]	@ (10053bcc <__arm_cp.6_0>)
10053ba8:	6809      	ldr	r1, [r1, #0]
10053baa:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10053bac:	42a3      	cmp	r3, r4
10053bae:	d005      	beq.n	10053bbc <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
10053bb0:	461a      	mov	r2, r3
10053bb2:	691b      	ldr	r3, [r3, #16]
10053bb4:	42a3      	cmp	r3, r4
10053bb6:	d1fb      	bne.n	10053bb0 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
10053bb8:	3210      	adds	r2, #16
10053bba:	e001      	b.n	10053bc0 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
10053bbc:	460a      	mov	r2, r1
10053bbe:	3234      	adds	r2, #52	@ 0x34
10053bc0:	6923      	ldr	r3, [r4, #16]
10053bc2:	6013      	str	r3, [r2, #0]
10053bc4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
10053bc6:	6122      	str	r2, [r4, #16]
10053bc8:	630c      	str	r4, [r1, #48]	@ 0x30
10053bca:	bdb0      	pop	{r4, r5, r7, pc}

10053bcc <__arm_cp.6_0>:
10053bcc:	20000ed8 	.word	0x20000ed8

10053bd0 <GAT_att_cmn_tx_pool_evt_tsk>:
10053bd0:	b580      	push	{r7, lr}
10053bd2:	2000      	movs	r0, #0
10053bd4:	f7fe f9c8 	bl	10051f68 <ACL_pkt_get_available_mem_buffers>
10053bd8:	490d      	ldr	r1, [pc, #52]	@ (10053c10 <__arm_cp.8_0>)
10053bda:	8a09      	ldrh	r1, [r1, #16]
10053bdc:	3125      	adds	r1, #37	@ 0x25
10053bde:	0949      	lsrs	r1, r1, #5
10053be0:	4288      	cmp	r0, r1
10053be2:	d90f      	bls.n	10053c04 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
10053be4:	1c49      	adds	r1, r1, #1
10053be6:	f7ec fb2b 	bl	10040240 <__udivsi3>
10053bea:	4602      	mov	r2, r0
10053bec:	2042      	movs	r0, #66	@ 0x42
10053bee:	2100      	movs	r1, #0
10053bf0:	f00c fe86 	bl	10060900 <aci_gatt_tx_pool_available_event_push_noinline>
10053bf4:	2800      	cmp	r0, #0
10053bf6:	d004      	beq.n	10053c02 <GAT_att_cmn_tx_pool_evt_tsk+0x32>
10053bf8:	2008      	movs	r0, #8
10053bfa:	f00b feb9 	bl	1005f970 <tsk_notify_idx>
10053bfe:	f7fb f860 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10053c02:	bd80      	pop	{r7, pc}
10053c04:	2008      	movs	r0, #8
10053c06:	2100      	movs	r1, #0
10053c08:	f00b fec4 	bl	1005f994 <tsk_wait_resource_idx>
10053c0c:	bd80      	pop	{r7, pc}
10053c0e:	46c0      	nop			@ (mov r8, r8)

10053c10 <__arm_cp.8_0>:
10053c10:	20000f34 	.word	0x20000f34

10053c14 <GAT_att_cmn_rcv>:
10053c14:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10053c16:	460c      	mov	r4, r1
10053c18:	2800      	cmp	r0, #0
10053c1a:	d013      	beq.n	10053c44 <GAT_att_cmn_rcv+0x30>
10053c1c:	8825      	ldrh	r5, [r4, #0]
10053c1e:	4620      	mov	r0, r4
10053c20:	f002 febf 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10053c24:	4601      	mov	r1, r0
10053c26:	4628      	mov	r0, r5
10053c28:	f000 f82e 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10053c2c:	2800      	cmp	r0, #0
10053c2e:	d009      	beq.n	10053c44 <GAT_att_cmn_rcv+0x30>
10053c30:	8860      	ldrh	r0, [r4, #2]
10053c32:	2800      	cmp	r0, #0
10053c34:	d006      	beq.n	10053c44 <GAT_att_cmn_rcv+0x30>
10053c36:	89a1      	ldrh	r1, [r4, #12]
10053c38:	291f      	cmp	r1, #31
10053c3a:	d808      	bhi.n	10053c4e <GAT_att_cmn_rcv+0x3a>
10053c3c:	a801      	add	r0, sp, #4
10053c3e:	8001      	strh	r1, [r0, #0]
10053c40:	6860      	ldr	r0, [r4, #4]
10053c42:	e00a      	b.n	10053c5a <GAT_att_cmn_rcv+0x46>
10053c44:	4620      	mov	r0, r4
10053c46:	f7fe f995 	bl	10051f74 <ACL_pkt_release>
10053c4a:	2000      	movs	r0, #0
10053c4c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10053c4e:	6860      	ldr	r0, [r4, #4]
10053c50:	ad01      	add	r5, sp, #4
10053c52:	462a      	mov	r2, r5
10053c54:	f00a f955 	bl	1005df02 <Mem_Buff_get_buff_off>
10053c58:	8829      	ldrh	r1, [r5, #0]
10053c5a:	1840      	adds	r0, r0, r1
10053c5c:	7900      	ldrb	r0, [r0, #4]
10053c5e:	07c1      	lsls	r1, r0, #31
10053c60:	d104      	bne.n	10053c6c <GAT_att_cmn_rcv+0x58>
10053c62:	281b      	cmp	r0, #27
10053c64:	d008      	beq.n	10053c78 <GAT_att_cmn_rcv+0x64>
10053c66:	281d      	cmp	r0, #29
10053c68:	d006      	beq.n	10053c78 <GAT_att_cmn_rcv+0x64>
10053c6a:	e009      	b.n	10053c80 <GAT_att_cmn_rcv+0x6c>
10053c6c:	281e      	cmp	r0, #30
10053c6e:	d303      	bcc.n	10053c78 <GAT_att_cmn_rcv+0x64>
10053c70:	2102      	movs	r1, #2
10053c72:	4308      	orrs	r0, r1
10053c74:	2823      	cmp	r0, #35	@ 0x23
10053c76:	d103      	bne.n	10053c80 <GAT_att_cmn_rcv+0x6c>
10053c78:	4620      	mov	r0, r4
10053c7a:	f00d fb23 	bl	100612c4 <GAT_att_clt_rcv>
10053c7e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10053c80:	4620      	mov	r0, r4
10053c82:	f000 f927 	bl	10053ed4 <GAT_att_srv_rcv>
10053c86:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10053c88 <GAT_att_cmn_get_channel_descr_p>:
10053c88:	4a07      	ldr	r2, [pc, #28]	@ (10053ca8 <__arm_cp.10_0>)
10053c8a:	6812      	ldr	r2, [r2, #0]
10053c8c:	3234      	adds	r2, #52	@ 0x34
10053c8e:	6812      	ldr	r2, [r2, #0]
10053c90:	2a00      	cmp	r2, #0
10053c92:	d007      	beq.n	10053ca4 <GAT_att_cmn_get_channel_descr_p+0x1c>
10053c94:	8913      	ldrh	r3, [r2, #8]
10053c96:	4283      	cmp	r3, r0
10053c98:	d102      	bne.n	10053ca0 <GAT_att_cmn_get_channel_descr_p+0x18>
10053c9a:	8953      	ldrh	r3, [r2, #10]
10053c9c:	428b      	cmp	r3, r1
10053c9e:	d001      	beq.n	10053ca4 <GAT_att_cmn_get_channel_descr_p+0x1c>
10053ca0:	3210      	adds	r2, #16
10053ca2:	e7f4      	b.n	10053c8e <GAT_att_cmn_get_channel_descr_p+0x6>
10053ca4:	4610      	mov	r0, r2
10053ca6:	4770      	bx	lr

10053ca8 <__arm_cp.10_0>:
10053ca8:	20000ed8 	.word	0x20000ed8

10053cac <GAT_att_cmn_connection>:
10053cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053cae:	4604      	mov	r4, r0
10053cb0:	4e0d      	ldr	r6, [pc, #52]	@ (10053ce8 <__arm_cp.11_0>)
10053cb2:	6830      	ldr	r0, [r6, #0]
10053cb4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
10053cb6:	6929      	ldr	r1, [r5, #16]
10053cb8:	62c1      	str	r1, [r0, #44]	@ 0x2c
10053cba:	882f      	ldrh	r7, [r5, #0]
10053cbc:	2100      	movs	r1, #0
10053cbe:	2214      	movs	r2, #20
10053cc0:	4628      	mov	r0, r5
10053cc2:	f7fb fdcf 	bl	1004f864 <BLEPLAT_MemSet>
10053cc6:	2004      	movs	r0, #4
10053cc8:	8168      	strh	r0, [r5, #10]
10053cca:	2017      	movs	r0, #23
10053ccc:	80e8      	strh	r0, [r5, #6]
10053cce:	812c      	strh	r4, [r5, #8]
10053cd0:	802f      	strh	r7, [r5, #0]
10053cd2:	6830      	ldr	r0, [r6, #0]
10053cd4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
10053cd6:	6345      	str	r5, [r0, #52]	@ 0x34
10053cd8:	6129      	str	r1, [r5, #16]
10053cda:	4620      	mov	r0, r4
10053cdc:	f000 fa70 	bl	100541c0 <GAT_att_srv_connection>
10053ce0:	4620      	mov	r0, r4
10053ce2:	f00d fbd8 	bl	10061496 <GAT_att_clt_connection>
10053ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053ce8 <__arm_cp.11_0>:
10053ce8:	20000ed8 	.word	0x20000ed8

10053cec <GAT_att_cmn_disconnection>:
10053cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053cee:	4604      	mov	r4, r0
10053cf0:	f00b fceb 	bl	1005f6ca <smp_sap_forget_device_upon_disconnection>
10053cf4:	481c      	ldr	r0, [pc, #112]	@ (10053d68 <__arm_cp.12_0>)
10053cf6:	6800      	ldr	r0, [r0, #0]
10053cf8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
10053cfa:	2e00      	cmp	r6, #0
10053cfc:	d032      	beq.n	10053d64 <GAT_att_cmn_disconnection+0x78>
10053cfe:	4637      	mov	r7, r6
10053d00:	6936      	ldr	r6, [r6, #16]
10053d02:	8938      	ldrh	r0, [r7, #8]
10053d04:	42a0      	cmp	r0, r4
10053d06:	d1f8      	bne.n	10053cfa <GAT_att_cmn_disconnection+0xe>
10053d08:	2500      	movs	r5, #0
10053d0a:	897a      	ldrh	r2, [r7, #10]
10053d0c:	b2e8      	uxtb	r0, r5
10053d0e:	2803      	cmp	r0, #3
10053d10:	d804      	bhi.n	10053d1c <GAT_att_cmn_disconnection+0x30>
10053d12:	4621      	mov	r1, r4
10053d14:	f000 f82a 	bl	10053d6c <GAT_att_cmn_stop_timer>
10053d18:	1c6d      	adds	r5, r5, #1
10053d1a:	e7f6      	b.n	10053d0a <GAT_att_cmn_disconnection+0x1e>
10053d1c:	4620      	mov	r0, r4
10053d1e:	4611      	mov	r1, r2
10053d20:	f000 fa52 	bl	100541c8 <GAT_att_srv_bearer_close>
10053d24:	8979      	ldrh	r1, [r7, #10]
10053d26:	4620      	mov	r0, r4
10053d28:	f00d fbb9 	bl	1006149e <GAT_att_clt_bearer_close>
10053d2c:	2000      	movs	r0, #0
10053d2e:	8138      	strh	r0, [r7, #8]
10053d30:	480d      	ldr	r0, [pc, #52]	@ (10053d68 <__arm_cp.12_0>)
10053d32:	6800      	ldr	r0, [r0, #0]
10053d34:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10053d36:	42ba      	cmp	r2, r7
10053d38:	d005      	beq.n	10053d46 <GAT_att_cmn_disconnection+0x5a>
10053d3a:	4611      	mov	r1, r2
10053d3c:	6912      	ldr	r2, [r2, #16]
10053d3e:	42ba      	cmp	r2, r7
10053d40:	d1fb      	bne.n	10053d3a <GAT_att_cmn_disconnection+0x4e>
10053d42:	3110      	adds	r1, #16
10053d44:	e001      	b.n	10053d4a <GAT_att_cmn_disconnection+0x5e>
10053d46:	4601      	mov	r1, r0
10053d48:	3134      	adds	r1, #52	@ 0x34
10053d4a:	693a      	ldr	r2, [r7, #16]
10053d4c:	600a      	str	r2, [r1, #0]
10053d4e:	8979      	ldrh	r1, [r7, #10]
10053d50:	2904      	cmp	r1, #4
10053d52:	d103      	bne.n	10053d5c <GAT_att_cmn_disconnection+0x70>
10053d54:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10053d56:	6139      	str	r1, [r7, #16]
10053d58:	62c7      	str	r7, [r0, #44]	@ 0x2c
10053d5a:	e7ce      	b.n	10053cfa <GAT_att_cmn_disconnection+0xe>
10053d5c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
10053d5e:	6139      	str	r1, [r7, #16]
10053d60:	6307      	str	r7, [r0, #48]	@ 0x30
10053d62:	e7ca      	b.n	10053cfa <GAT_att_cmn_disconnection+0xe>
10053d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053d66:	46c0      	nop			@ (mov r8, r8)

10053d68 <__arm_cp.12_0>:
10053d68:	20000ed8 	.word	0x20000ed8

10053d6c <GAT_att_cmn_stop_timer>:
10053d6c:	b510      	push	{r4, lr}
10053d6e:	4604      	mov	r4, r0
10053d70:	4608      	mov	r0, r1
10053d72:	4611      	mov	r1, r2
10053d74:	f000 f858 	bl	10053e28 <GAT_att_cmn_get_timer_index>
10053d78:	0080      	lsls	r0, r0, #2
10053d7a:	1900      	adds	r0, r0, r4
10053d7c:	b2c1      	uxtb	r1, r0
10053d7e:	4802      	ldr	r0, [pc, #8]	@ (10053d88 <__arm_cp.13_0>)
10053d80:	6800      	ldr	r0, [r0, #0]
10053d82:	f00b fe68 	bl	1005fa56 <CST_stop>
10053d86:	bd10      	pop	{r4, pc}

10053d88 <__arm_cp.13_0>:
10053d88:	20000ed8 	.word	0x20000ed8

10053d8c <GAT_att_cmn_send>:
10053d8c:	b5b0      	push	{r4, r5, r7, lr}
10053d8e:	460c      	mov	r4, r1
10053d90:	4605      	mov	r5, r0
10053d92:	8848      	ldrh	r0, [r1, #2]
10053d94:	1d00      	adds	r0, r0, #4
10053d96:	b281      	uxth	r1, r0
10053d98:	4620      	mov	r0, r4
10053d9a:	f7fe f8f4 	bl	10051f86 <ACL_pkt_resize>
10053d9e:	4628      	mov	r0, r5
10053da0:	4621      	mov	r1, r4
10053da2:	f002 ff29 	bl	10056bf8 <L2C_send_frame>
10053da6:	2800      	cmp	r0, #0
10053da8:	d004      	beq.n	10053db4 <GAT_att_cmn_send+0x28>
10053daa:	4620      	mov	r0, r4
10053dac:	f7fe f8e2 	bl	10051f74 <ACL_pkt_release>
10053db0:	2081      	movs	r0, #129	@ 0x81
10053db2:	bdb0      	pop	{r4, r5, r7, pc}
10053db4:	2000      	movs	r0, #0
10053db6:	bdb0      	pop	{r4, r5, r7, pc}

10053db8 <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
10053db8:	8809      	ldrh	r1, [r1, #0]
10053dba:	8880      	ldrh	r0, [r0, #4]
10053dbc:	4008      	ands	r0, r1
10053dbe:	d000      	beq.n	10053dc2 <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
10053dc0:	2086      	movs	r0, #134	@ 0x86
10053dc2:	4770      	bx	lr

10053dc4 <GAT_att_cmn_dscr_flag_set_f>:
10053dc4:	8809      	ldrh	r1, [r1, #0]
10053dc6:	8882      	ldrh	r2, [r0, #4]
10053dc8:	430a      	orrs	r2, r1
10053dca:	8082      	strh	r2, [r0, #4]
10053dcc:	2000      	movs	r0, #0
10053dce:	4770      	bx	lr

10053dd0 <GAT_att_cmn_dscr_flag_clear_f>:
10053dd0:	8809      	ldrh	r1, [r1, #0]
10053dd2:	8882      	ldrh	r2, [r0, #4]
10053dd4:	438a      	bics	r2, r1
10053dd6:	8082      	strh	r2, [r0, #4]
10053dd8:	2000      	movs	r0, #0
10053dda:	4770      	bx	lr

10053ddc <GAT_att_cmn_get_conn_index>:
10053ddc:	4907      	ldr	r1, [pc, #28]	@ (10053dfc <__arm_cp.22_0>)
10053dde:	6809      	ldr	r1, [r1, #0]
10053de0:	3134      	adds	r1, #52	@ 0x34
10053de2:	6809      	ldr	r1, [r1, #0]
10053de4:	2900      	cmp	r1, #0
10053de6:	d004      	beq.n	10053df2 <GAT_att_cmn_get_conn_index+0x16>
10053de8:	890a      	ldrh	r2, [r1, #8]
10053dea:	4282      	cmp	r2, r0
10053dec:	d003      	beq.n	10053df6 <GAT_att_cmn_get_conn_index+0x1a>
10053dee:	3110      	adds	r1, #16
10053df0:	e7f7      	b.n	10053de2 <GAT_att_cmn_get_conn_index+0x6>
10053df2:	20ff      	movs	r0, #255	@ 0xff
10053df4:	4770      	bx	lr
10053df6:	7808      	ldrb	r0, [r1, #0]
10053df8:	4770      	bx	lr
10053dfa:	46c0      	nop			@ (mov r8, r8)

10053dfc <__arm_cp.22_0>:
10053dfc:	20000ed8 	.word	0x20000ed8

10053e00 <GAT_att_cmn_start_timer>:
10053e00:	b510      	push	{r4, lr}
10053e02:	4604      	mov	r4, r0
10053e04:	4608      	mov	r0, r1
10053e06:	4611      	mov	r1, r2
10053e08:	f000 f80e 	bl	10053e28 <GAT_att_cmn_get_timer_index>
10053e0c:	0080      	lsls	r0, r0, #2
10053e0e:	1900      	adds	r0, r0, r4
10053e10:	b2c1      	uxtb	r1, r0
10053e12:	4803      	ldr	r0, [pc, #12]	@ (10053e20 <__arm_cp.23_0>)
10053e14:	6800      	ldr	r0, [r0, #0]
10053e16:	2200      	movs	r2, #0
10053e18:	4b02      	ldr	r3, [pc, #8]	@ (10053e24 <__arm_cp.23_1>)
10053e1a:	f00b fe52 	bl	1005fac2 <CST_start>
10053e1e:	bd10      	pop	{r4, pc}

10053e20 <__arm_cp.23_0>:
10053e20:	20000ed8 	.word	0x20000ed8

10053e24 <__arm_cp.23_1>:
10053e24:	00007530 	.word	0x00007530

10053e28 <GAT_att_cmn_get_timer_index>:
10053e28:	4a08      	ldr	r2, [pc, #32]	@ (10053e4c <__arm_cp.24_0>)
10053e2a:	6812      	ldr	r2, [r2, #0]
10053e2c:	3234      	adds	r2, #52	@ 0x34
10053e2e:	6812      	ldr	r2, [r2, #0]
10053e30:	2a00      	cmp	r2, #0
10053e32:	d007      	beq.n	10053e44 <GAT_att_cmn_get_timer_index+0x1c>
10053e34:	8913      	ldrh	r3, [r2, #8]
10053e36:	4283      	cmp	r3, r0
10053e38:	d102      	bne.n	10053e40 <GAT_att_cmn_get_timer_index+0x18>
10053e3a:	8953      	ldrh	r3, [r2, #10]
10053e3c:	428b      	cmp	r3, r1
10053e3e:	d003      	beq.n	10053e48 <GAT_att_cmn_get_timer_index+0x20>
10053e40:	3210      	adds	r2, #16
10053e42:	e7f4      	b.n	10053e2e <GAT_att_cmn_get_timer_index+0x6>
10053e44:	20ff      	movs	r0, #255	@ 0xff
10053e46:	4770      	bx	lr
10053e48:	7850      	ldrb	r0, [r2, #1]
10053e4a:	4770      	bx	lr

10053e4c <__arm_cp.24_0>:
10053e4c:	20000ed8 	.word	0x20000ed8

10053e50 <GAT_att_cmn_timeout_cb>:
10053e50:	b580      	push	{r7, lr}
10053e52:	0881      	lsrs	r1, r0, #2
10053e54:	480a      	ldr	r0, [pc, #40]	@ (10053e80 <__arm_cp.25_0>)
10053e56:	6800      	ldr	r0, [r0, #0]
10053e58:	3034      	adds	r0, #52	@ 0x34
10053e5a:	6800      	ldr	r0, [r0, #0]
10053e5c:	2800      	cmp	r0, #0
10053e5e:	d00e      	beq.n	10053e7e <GAT_att_cmn_timeout_cb+0x2e>
10053e60:	7842      	ldrb	r2, [r0, #1]
10053e62:	428a      	cmp	r2, r1
10053e64:	d001      	beq.n	10053e6a <GAT_att_cmn_timeout_cb+0x1a>
10053e66:	3010      	adds	r0, #16
10053e68:	e7f7      	b.n	10053e5a <GAT_att_cmn_timeout_cb+0xa>
10053e6a:	2101      	movs	r1, #1
10053e6c:	0209      	lsls	r1, r1, #8
10053e6e:	8882      	ldrh	r2, [r0, #4]
10053e70:	430a      	orrs	r2, r1
10053e72:	8082      	strh	r2, [r0, #4]
10053e74:	2007      	movs	r0, #7
10053e76:	f00b fd7b 	bl	1005f970 <tsk_notify_idx>
10053e7a:	f7fa ff22 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10053e7e:	bd80      	pop	{r7, pc}

10053e80 <__arm_cp.25_0>:
10053e80:	20000ed8 	.word	0x20000ed8

10053e84 <GAT_att_cmn_get_pckt>:
10053e84:	b510      	push	{r4, lr}
10053e86:	8944      	ldrh	r4, [r0, #10]
10053e88:	2c04      	cmp	r4, #4
10053e8a:	d000      	beq.n	10053e8e <GAT_att_cmn_get_pckt+0xa>
10053e8c:	2406      	movs	r4, #6
10053e8e:	1861      	adds	r1, r4, r1
10053e90:	b28a      	uxth	r2, r1
10053e92:	8901      	ldrh	r1, [r0, #8]
10053e94:	2000      	movs	r0, #0
10053e96:	f7fe f84b 	bl	10051f30 <ACL_pkt_get>
10053e9a:	2800      	cmp	r0, #0
10053e9c:	d000      	beq.n	10053ea0 <GAT_att_cmn_get_pckt+0x1c>
10053e9e:	8184      	strh	r4, [r0, #12]
10053ea0:	bd10      	pop	{r4, pc}
	...

10053ea4 <GAT_att_srv_init>:
10053ea4:	b510      	push	{r4, lr}
10053ea6:	4c08      	ldr	r4, [pc, #32]	@ (10053ec8 <__arm_cp.0_0>)
10053ea8:	6820      	ldr	r0, [r4, #0]
10053eaa:	3040      	adds	r0, #64	@ 0x40
10053eac:	f00b ff52 	bl	1005fd54 <ACL_list_init>
10053eb0:	6820      	ldr	r0, [r4, #0]
10053eb2:	3038      	adds	r0, #56	@ 0x38
10053eb4:	f00b ff4e 	bl	1005fd54 <ACL_list_init>
10053eb8:	4804      	ldr	r0, [pc, #16]	@ (10053ecc <__arm_cp.0_1>)
10053eba:	4905      	ldr	r1, [pc, #20]	@ (10053ed0 <__arm_cp.0_2>)
10053ebc:	223c      	movs	r2, #60	@ 0x3c
10053ebe:	f7fb fcc1 	bl	1004f844 <BLEPLAT_MemCpy>
10053ec2:	f001 f8ef 	bl	100550a4 <GAT_srv_init>
10053ec6:	bd10      	pop	{r4, pc}

10053ec8 <__arm_cp.0_0>:
10053ec8:	20000ed8 	.word	0x20000ed8

10053ecc <__arm_cp.0_1>:
10053ecc:	20000edc 	.word	0x20000edc

10053ed0 <__arm_cp.0_2>:
10053ed0:	10066000 	.word	0x10066000

10053ed4 <GAT_att_srv_rcv>:
10053ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
10053ed6:	b087      	sub	sp, #28
10053ed8:	4604      	mov	r4, r0
10053eda:	8805      	ldrh	r5, [r0, #0]
10053edc:	f002 fd61 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10053ee0:	4601      	mov	r1, r0
10053ee2:	4628      	mov	r0, r5
10053ee4:	f7ff fed0 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10053ee8:	4605      	mov	r5, r0
10053eea:	4620      	mov	r0, r4
10053eec:	f000 f858 	bl	10053fa0 <GAT_att_cmn_get_opcode>
10053ef0:	4606      	mov	r6, r0
10053ef2:	f000 f85b 	bl	10053fac <GAT_att_srv_get_exec_fn_id_by_op>
10053ef6:	280f      	cmp	r0, #15
10053ef8:	d119      	bne.n	10053f2e <GAT_att_srv_rcv+0x5a>
10053efa:	2e1e      	cmp	r6, #30
10053efc:	d047      	beq.n	10053f8e <GAT_att_srv_rcv+0xba>
10053efe:	2040      	movs	r0, #64	@ 0x40
10053f00:	4030      	ands	r0, r6
10053f02:	d144      	bne.n	10053f8e <GAT_att_srv_rcv+0xba>
10053f04:	2105      	movs	r1, #5
10053f06:	4628      	mov	r0, r5
10053f08:	f7ff ffbc 	bl	10053e84 <GAT_att_cmn_get_pckt>
10053f0c:	2800      	cmp	r0, #0
10053f0e:	d045      	beq.n	10053f9c <GAT_att_srv_rcv+0xc8>
10053f10:	4607      	mov	r7, r0
10053f12:	2100      	movs	r1, #0
10053f14:	2206      	movs	r2, #6
10053f16:	4630      	mov	r0, r6
10053f18:	463b      	mov	r3, r7
10053f1a:	f000 fafd 	bl	10054518 <GAT_att_srv_write_err_packet>
10053f1e:	8968      	ldrh	r0, [r5, #10]
10053f20:	4639      	mov	r1, r7
10053f22:	f7ff ff33 	bl	10053d8c <GAT_att_cmn_send>
10053f26:	4607      	mov	r7, r0
10053f28:	2800      	cmp	r0, #0
10053f2a:	d134      	bne.n	10053f96 <GAT_att_srv_rcv+0xc2>
10053f2c:	e02f      	b.n	10053f8e <GAT_att_srv_rcv+0xba>
10053f2e:	9501      	str	r5, [sp, #4]
10053f30:	2500      	movs	r5, #0
10053f32:	2e1e      	cmp	r6, #30
10053f34:	462f      	mov	r7, r5
10053f36:	d016      	beq.n	10053f66 <GAT_att_srv_rcv+0x92>
10053f38:	2040      	movs	r0, #64	@ 0x40
10053f3a:	4006      	ands	r6, r0
10053f3c:	462f      	mov	r7, r5
10053f3e:	d112      	bne.n	10053f66 <GAT_att_srv_rcv+0x92>
10053f40:	9b01      	ldr	r3, [sp, #4]
10053f42:	8898      	ldrh	r0, [r3, #4]
10053f44:	07c0      	lsls	r0, r0, #31
10053f46:	d118      	bne.n	10053f7a <GAT_att_srv_rcv+0xa6>
10053f48:	895a      	ldrh	r2, [r3, #10]
10053f4a:	8919      	ldrh	r1, [r3, #8]
10053f4c:	2600      	movs	r6, #0
10053f4e:	4630      	mov	r0, r6
10053f50:	f7ff ff56 	bl	10053e00 <GAT_att_cmn_start_timer>
10053f54:	4607      	mov	r7, r0
10053f56:	2800      	cmp	r0, #0
10053f58:	d105      	bne.n	10053f66 <GAT_att_srv_rcv+0x92>
10053f5a:	9a01      	ldr	r2, [sp, #4]
10053f5c:	8890      	ldrh	r0, [r2, #4]
10053f5e:	2101      	movs	r1, #1
10053f60:	4301      	orrs	r1, r0
10053f62:	8091      	strh	r1, [r2, #4]
10053f64:	4637      	mov	r7, r6
10053f66:	a802      	add	r0, sp, #8
10053f68:	8005      	strh	r5, [r0, #0]
10053f6a:	9506      	str	r5, [sp, #24]
10053f6c:	9505      	str	r5, [sp, #20]
10053f6e:	9901      	ldr	r1, [sp, #4]
10053f70:	9104      	str	r1, [sp, #16]
10053f72:	9403      	str	r4, [sp, #12]
10053f74:	f000 f854 	bl	10054020 <GAT_att_srv_run>
10053f78:	e00d      	b.n	10053f96 <GAT_att_srv_rcv+0xc2>
10053f7a:	3308      	adds	r3, #8
10053f7c:	2042      	movs	r0, #66	@ 0x42
10053f7e:	2103      	movs	r1, #3
10053f80:	2202      	movs	r2, #2
10053f82:	f00d f8eb 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
10053f86:	2800      	cmp	r0, #0
10053f88:	d001      	beq.n	10053f8e <GAT_att_srv_rcv+0xba>
10053f8a:	2784      	movs	r7, #132	@ 0x84
10053f8c:	e003      	b.n	10053f96 <GAT_att_srv_rcv+0xc2>
10053f8e:	4620      	mov	r0, r4
10053f90:	f7fd fff0 	bl	10051f74 <ACL_pkt_release>
10053f94:	2700      	movs	r7, #0
10053f96:	4638      	mov	r0, r7
10053f98:	b007      	add	sp, #28
10053f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10053f9c:	2788      	movs	r7, #136	@ 0x88
10053f9e:	e7fa      	b.n	10053f96 <GAT_att_srv_rcv+0xc2>

10053fa0 <GAT_att_cmn_get_opcode>:
10053fa0:	b580      	push	{r7, lr}
10053fa2:	8981      	ldrh	r1, [r0, #12]
10053fa4:	f001 f84d 	bl	10055042 <ACL_pkt_read_8b>
10053fa8:	bd80      	pop	{r7, pc}
	...

10053fac <GAT_att_srv_get_exec_fn_id_by_op>:
10053fac:	1e81      	subs	r1, r0, #2
10053fae:	291e      	cmp	r1, #30
10053fb0:	d816      	bhi.n	10053fe0 <GAT_att_srv_get_exec_fn_id_by_op+0x34>
10053fb2:	2000      	movs	r0, #0
10053fb4:	4479      	add	r1, pc
10053fb6:	7909      	ldrb	r1, [r1, #4]
10053fb8:	0049      	lsls	r1, r1, #1
10053fba:	448f      	add	pc, r1
10053fbc:	170f1718 	.word	0x170f1718
10053fc0:	171b1719 	.word	0x171b1719
10053fc4:	171f171d 	.word	0x171f171d
10053fc8:	17231721 	.word	0x17231721
10053fcc:	17171725 	.word	0x17171725
10053fd0:	17291727 	.word	0x17291727
10053fd4:	17171717 	.word	0x17171717
10053fd8:	002d172b 	.word	0x002d172b
10053fdc:	2001      	movs	r0, #1
10053fde:	4770      	bx	lr
10053fe0:	2852      	cmp	r0, #82	@ 0x52
10053fe2:	d01b      	beq.n	1005401c <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10053fe4:	28d2      	cmp	r0, #210	@ 0xd2
10053fe6:	d101      	bne.n	10053fec <GAT_att_srv_get_exec_fn_id_by_op+0x40>
10053fe8:	200a      	movs	r0, #10
10053fea:	4770      	bx	lr
10053fec:	200f      	movs	r0, #15
10053fee:	4770      	bx	lr
10053ff0:	2002      	movs	r0, #2
10053ff2:	4770      	bx	lr
10053ff4:	2003      	movs	r0, #3
10053ff6:	4770      	bx	lr
10053ff8:	2004      	movs	r0, #4
10053ffa:	4770      	bx	lr
10053ffc:	2005      	movs	r0, #5
10053ffe:	4770      	bx	lr
10054000:	2006      	movs	r0, #6
10054002:	4770      	bx	lr
10054004:	2007      	movs	r0, #7
10054006:	4770      	bx	lr
10054008:	2008      	movs	r0, #8
1005400a:	4770      	bx	lr
1005400c:	200b      	movs	r0, #11
1005400e:	4770      	bx	lr
10054010:	200c      	movs	r0, #12
10054012:	4770      	bx	lr
10054014:	200d      	movs	r0, #13
10054016:	4770      	bx	lr
10054018:	200e      	movs	r0, #14
1005401a:	4770      	bx	lr
1005401c:	2009      	movs	r0, #9
1005401e:	4770      	bx	lr

10054020 <GAT_att_srv_run>:
10054020:	b5f0      	push	{r4, r5, r6, r7, lr}
10054022:	b085      	sub	sp, #20
10054024:	4604      	mov	r4, r0
10054026:	7800      	ldrb	r0, [r0, #0]
10054028:	2800      	cmp	r0, #0
1005402a:	d107      	bne.n	1005403c <GAT_att_srv_run+0x1c>
1005402c:	6860      	ldr	r0, [r4, #4]
1005402e:	f7ff ffb7 	bl	10053fa0 <GAT_att_cmn_get_opcode>
10054032:	7060      	strb	r0, [r4, #1]
10054034:	68a5      	ldr	r5, [r4, #8]
10054036:	68e8      	ldr	r0, [r5, #12]
10054038:	2800      	cmp	r0, #0
1005403a:	d03c      	beq.n	100540b6 <GAT_att_srv_run+0x96>
1005403c:	7865      	ldrb	r5, [r4, #1]
1005403e:	4628      	mov	r0, r5
10054040:	f7ff ffb4 	bl	10053fac <GAT_att_srv_get_exec_fn_id_by_op>
10054044:	280e      	cmp	r0, #14
10054046:	d808      	bhi.n	1005405a <GAT_att_srv_run+0x3a>
10054048:	0080      	lsls	r0, r0, #2
1005404a:	495b      	ldr	r1, [pc, #364]	@ (100541b8 <__arm_cp.4_3>)
1005404c:	5809      	ldr	r1, [r1, r0]
1005404e:	2900      	cmp	r1, #0
10054050:	d003      	beq.n	1005405a <GAT_att_srv_run+0x3a>
10054052:	4620      	mov	r0, r4
10054054:	4788      	blx	r1
10054056:	4607      	mov	r7, r0
10054058:	e007      	b.n	1005406a <GAT_att_srv_run+0x4a>
1005405a:	68a0      	ldr	r0, [r4, #8]
1005405c:	68c3      	ldr	r3, [r0, #12]
1005405e:	2100      	movs	r1, #0
10054060:	2206      	movs	r2, #6
10054062:	4628      	mov	r0, r5
10054064:	f000 fa58 	bl	10054518 <GAT_att_srv_write_err_packet>
10054068:	2786      	movs	r7, #134	@ 0x86
1005406a:	6861      	ldr	r1, [r4, #4]
1005406c:	2900      	cmp	r1, #0
1005406e:	d019      	beq.n	100540a4 <GAT_att_srv_run+0x84>
10054070:	2f88      	cmp	r7, #136	@ 0x88
10054072:	d003      	beq.n	1005407c <GAT_att_srv_run+0x5c>
10054074:	2f84      	cmp	r7, #132	@ 0x84
10054076:	d00c      	beq.n	10054092 <GAT_att_srv_run+0x72>
10054078:	2f07      	cmp	r7, #7
1005407a:	d110      	bne.n	1005409e <GAT_att_srv_run+0x7e>
1005407c:	484f      	ldr	r0, [pc, #316]	@ (100541bc <__arm_cp.4_4>)
1005407e:	6800      	ldr	r0, [r0, #0]
10054080:	3040      	adds	r0, #64	@ 0x40
10054082:	f00b fe6b 	bl	1005fd5c <ACL_list_insert_tail>
10054086:	2009      	movs	r0, #9
10054088:	f00b fc72 	bl	1005f970 <tsk_notify_idx>
1005408c:	f7fa fe19 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10054090:	e008      	b.n	100540a4 <GAT_att_srv_run+0x84>
10054092:	484a      	ldr	r0, [pc, #296]	@ (100541bc <__arm_cp.4_4>)
10054094:	6800      	ldr	r0, [r0, #0]
10054096:	3038      	adds	r0, #56	@ 0x38
10054098:	f00b fe60 	bl	1005fd5c <ACL_list_insert_tail>
1005409c:	e009      	b.n	100540b2 <GAT_att_srv_run+0x92>
1005409e:	4608      	mov	r0, r1
100540a0:	f7fd ff68 	bl	10051f74 <ACL_pkt_release>
100540a4:	2f86      	cmp	r7, #134	@ 0x86
100540a6:	d001      	beq.n	100540ac <GAT_att_srv_run+0x8c>
100540a8:	2f00      	cmp	r7, #0
100540aa:	d102      	bne.n	100540b2 <GAT_att_srv_run+0x92>
100540ac:	68a0      	ldr	r0, [r4, #8]
100540ae:	f000 fa47 	bl	10054540 <GAT_att_srv_send_response>
100540b2:	b005      	add	sp, #20
100540b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100540b6:	6867      	ldr	r7, [r4, #4]
100540b8:	4638      	mov	r0, r7
100540ba:	f7ff ff71 	bl	10053fa0 <GAT_att_cmn_get_opcode>
100540be:	4606      	mov	r6, r0
100540c0:	f7ff ff74 	bl	10053fac <GAT_att_srv_get_exec_fn_id_by_op>
100540c4:	8879      	ldrh	r1, [r7, #2]
100540c6:	88ea      	ldrh	r2, [r5, #6]
100540c8:	2304      	movs	r3, #4
100540ca:	9302      	str	r3, [sp, #8]
100540cc:	2300      	movs	r3, #0
100540ce:	4291      	cmp	r1, r2
100540d0:	d83e      	bhi.n	10054150 <GAT_att_srv_run+0x130>
100540d2:	280e      	cmp	r0, #14
100540d4:	d83c      	bhi.n	10054150 <GAT_att_srv_run+0x130>
100540d6:	9301      	str	r3, [sp, #4]
100540d8:	0042      	lsls	r2, r0, #1
100540da:	4b34      	ldr	r3, [pc, #208]	@ (100541ac <__arm_cp.4_0>)
100540dc:	5a9a      	ldrh	r2, [r3, r2]
100540de:	4b34      	ldr	r3, [pc, #208]	@ (100541b0 <__arm_cp.4_1>)
100540e0:	40c3      	lsrs	r3, r0
100540e2:	07db      	lsls	r3, r3, #31
100540e4:	d105      	bne.n	100540f2 <GAT_att_srv_run+0xd2>
100540e6:	2380      	movs	r3, #128	@ 0x80
100540e8:	439a      	bics	r2, r3
100540ea:	4291      	cmp	r1, r2
100540ec:	9b01      	ldr	r3, [sp, #4]
100540ee:	d003      	beq.n	100540f8 <GAT_att_srv_run+0xd8>
100540f0:	e02e      	b.n	10054150 <GAT_att_srv_run+0x130>
100540f2:	4291      	cmp	r1, r2
100540f4:	9b01      	ldr	r3, [sp, #4]
100540f6:	d32b      	bcc.n	10054150 <GAT_att_srv_run+0x130>
100540f8:	1e41      	subs	r1, r0, #1
100540fa:	2903      	cmp	r1, #3
100540fc:	d301      	bcc.n	10054102 <GAT_att_srv_run+0xe2>
100540fe:	2807      	cmp	r0, #7
10054100:	d10d      	bne.n	1005411e <GAT_att_srv_run+0xfe>
10054102:	a904      	add	r1, sp, #16
10054104:	aa03      	add	r2, sp, #12
10054106:	9202      	str	r2, [sp, #8]
10054108:	4638      	mov	r0, r7
1005410a:	460f      	mov	r7, r1
1005410c:	f000 ff49 	bl	10054fa2 <GAT_att_srv_get_handle_range>
10054110:	883b      	ldrh	r3, [r7, #0]
10054112:	9802      	ldr	r0, [sp, #8]
10054114:	8800      	ldrh	r0, [r0, #0]
10054116:	4283      	cmp	r3, r0
10054118:	d818      	bhi.n	1005414c <GAT_att_srv_run+0x12c>
1005411a:	2b00      	cmp	r3, #0
1005411c:	d016      	beq.n	1005414c <GAT_att_srv_run+0x12c>
1005411e:	6866      	ldr	r6, [r4, #4]
10054120:	4630      	mov	r0, r6
10054122:	f7ff ff3d 	bl	10053fa0 <GAT_att_cmn_get_opcode>
10054126:	4607      	mov	r7, r0
10054128:	8835      	ldrh	r5, [r6, #0]
1005412a:	4630      	mov	r0, r6
1005412c:	f002 fc39 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10054130:	4601      	mov	r1, r0
10054132:	4628      	mov	r0, r5
10054134:	f7ff fda8 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10054138:	4605      	mov	r5, r0
1005413a:	2f1e      	cmp	r7, #30
1005413c:	d01d      	beq.n	1005417a <GAT_att_srv_run+0x15a>
1005413e:	2040      	movs	r0, #64	@ 0x40
10054140:	4038      	ands	r0, r7
10054142:	d11a      	bne.n	1005417a <GAT_att_srv_run+0x15a>
10054144:	2f16      	cmp	r7, #22
10054146:	d11b      	bne.n	10054180 <GAT_att_srv_run+0x160>
10054148:	8871      	ldrh	r1, [r6, #2]
1005414a:	e026      	b.n	1005419a <GAT_att_srv_run+0x17a>
1005414c:	2001      	movs	r0, #1
1005414e:	9002      	str	r0, [sp, #8]
10054150:	2786      	movs	r7, #134	@ 0x86
10054152:	2e1e      	cmp	r6, #30
10054154:	d089      	beq.n	1005406a <GAT_att_srv_run+0x4a>
10054156:	2040      	movs	r0, #64	@ 0x40
10054158:	4030      	ands	r0, r6
1005415a:	d186      	bne.n	1005406a <GAT_att_srv_run+0x4a>
1005415c:	9301      	str	r3, [sp, #4]
1005415e:	2105      	movs	r1, #5
10054160:	4628      	mov	r0, r5
10054162:	f7ff fe8f 	bl	10053e84 <GAT_att_cmn_get_pckt>
10054166:	60e8      	str	r0, [r5, #12]
10054168:	2800      	cmp	r0, #0
1005416a:	d01d      	beq.n	100541a8 <GAT_att_srv_run+0x188>
1005416c:	4603      	mov	r3, r0
1005416e:	4630      	mov	r0, r6
10054170:	9901      	ldr	r1, [sp, #4]
10054172:	9a02      	ldr	r2, [sp, #8]
10054174:	f000 f9d0 	bl	10054518 <GAT_att_srv_write_err_packet>
10054178:	e777      	b.n	1005406a <GAT_att_srv_run+0x4a>
1005417a:	2000      	movs	r0, #0
1005417c:	60e8      	str	r0, [r5, #12]
1005417e:	e75d      	b.n	1005403c <GAT_att_srv_run+0x1c>
10054180:	4638      	mov	r0, r7
10054182:	f7ff ff13 	bl	10053fac <GAT_att_srv_get_exec_fn_id_by_op>
10054186:	280e      	cmp	r0, #14
10054188:	d900      	bls.n	1005418c <GAT_att_srv_run+0x16c>
1005418a:	e76d      	b.n	10054068 <GAT_att_srv_run+0x48>
1005418c:	0040      	lsls	r0, r0, #1
1005418e:	4909      	ldr	r1, [pc, #36]	@ (100541b4 <__arm_cp.4_2>)
10054190:	5a09      	ldrh	r1, [r1, r0]
10054192:	88e8      	ldrh	r0, [r5, #6]
10054194:	4281      	cmp	r1, r0
10054196:	d300      	bcc.n	1005419a <GAT_att_srv_run+0x17a>
10054198:	4601      	mov	r1, r0
1005419a:	4628      	mov	r0, r5
1005419c:	f7ff fe72 	bl	10053e84 <GAT_att_cmn_get_pckt>
100541a0:	60e8      	str	r0, [r5, #12]
100541a2:	2800      	cmp	r0, #0
100541a4:	d000      	beq.n	100541a8 <GAT_att_srv_run+0x188>
100541a6:	e749      	b.n	1005403c <GAT_att_srv_run+0x1c>
100541a8:	2788      	movs	r7, #136	@ 0x88
100541aa:	e75e      	b.n	1005406a <GAT_att_srv_run+0x4a>

100541ac <__arm_cp.4_0>:
100541ac:	1006603c 	.word	0x1006603c

100541b0 <__arm_cp.4_1>:
100541b0:	00004fcc 	.word	0x00004fcc

100541b4 <__arm_cp.4_2>:
100541b4:	1006605a 	.word	0x1006605a

100541b8 <__arm_cp.4_3>:
100541b8:	20000edc 	.word	0x20000edc

100541bc <__arm_cp.4_4>:
100541bc:	20000ed8 	.word	0x20000ed8

100541c0 <GAT_att_srv_connection>:
100541c0:	b580      	push	{r7, lr}
100541c2:	f000 ff81 	bl	100550c8 <GAT_srv_connection>
100541c6:	bd80      	pop	{r7, pc}

100541c8 <GAT_att_srv_bearer_close>:
100541c8:	b570      	push	{r4, r5, r6, lr}
100541ca:	460c      	mov	r4, r1
100541cc:	4605      	mov	r5, r0
100541ce:	f001 f821 	bl	10055214 <GAT_srv_bearer_close>
100541d2:	4e07      	ldr	r6, [pc, #28]	@ (100541f0 <__arm_cp.6_0>)
100541d4:	6832      	ldr	r2, [r6, #0]
100541d6:	3240      	adds	r2, #64	@ 0x40
100541d8:	4628      	mov	r0, r5
100541da:	4621      	mov	r1, r4
100541dc:	f000 f80a 	bl	100541f4 <GAT_att_srv_flush_rx_pckts>
100541e0:	6832      	ldr	r2, [r6, #0]
100541e2:	3238      	adds	r2, #56	@ 0x38
100541e4:	4628      	mov	r0, r5
100541e6:	4621      	mov	r1, r4
100541e8:	f000 f804 	bl	100541f4 <GAT_att_srv_flush_rx_pckts>
100541ec:	bd70      	pop	{r4, r5, r6, pc}
100541ee:	46c0      	nop			@ (mov r8, r8)

100541f0 <__arm_cp.6_0>:
100541f0:	20000ed8 	.word	0x20000ed8

100541f4 <GAT_att_srv_flush_rx_pckts>:
100541f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100541f6:	460d      	mov	r5, r1
100541f8:	4606      	mov	r6, r0
100541fa:	9200      	str	r2, [sp, #0]
100541fc:	6814      	ldr	r4, [r2, #0]
100541fe:	2c00      	cmp	r4, #0
10054200:	d011      	beq.n	10054226 <GAT_att_srv_flush_rx_pckts+0x32>
10054202:	4627      	mov	r7, r4
10054204:	69e4      	ldr	r4, [r4, #28]
10054206:	8838      	ldrh	r0, [r7, #0]
10054208:	42b0      	cmp	r0, r6
1005420a:	d1f8      	bne.n	100541fe <GAT_att_srv_flush_rx_pckts+0xa>
1005420c:	4638      	mov	r0, r7
1005420e:	f002 fbc8 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10054212:	42a8      	cmp	r0, r5
10054214:	d1f3      	bne.n	100541fe <GAT_att_srv_flush_rx_pckts+0xa>
10054216:	9800      	ldr	r0, [sp, #0]
10054218:	4639      	mov	r1, r7
1005421a:	f00b fdaf 	bl	1005fd7c <ACL_list_remove>
1005421e:	4638      	mov	r0, r7
10054220:	f7fd fea8 	bl	10051f74 <ACL_pkt_release>
10054224:	e7eb      	b.n	100541fe <GAT_att_srv_flush_rx_pckts+0xa>
10054226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054228 <GAT_att_srv_process_rx_pckt_tsk>:
10054228:	b5f0      	push	{r4, r5, r6, r7, lr}
1005422a:	b085      	sub	sp, #20
1005422c:	4f0f      	ldr	r7, [pc, #60]	@ (1005426c <__arm_cp.9_0>)
1005422e:	6838      	ldr	r0, [r7, #0]
10054230:	3040      	adds	r0, #64	@ 0x40
10054232:	f00b fdc3 	bl	1005fdbc <ACL_list_get_pckt_count>
10054236:	4604      	mov	r4, r0
10054238:	0420      	lsls	r0, r4, #16
1005423a:	d014      	beq.n	10054266 <GAT_att_srv_process_rx_pckt_tsk+0x3e>
1005423c:	466d      	mov	r5, sp
1005423e:	2000      	movs	r0, #0
10054240:	7028      	strb	r0, [r5, #0]
10054242:	6838      	ldr	r0, [r7, #0]
10054244:	3040      	adds	r0, #64	@ 0x40
10054246:	f00b fdaf 	bl	1005fda8 <ACL_list_remove_head>
1005424a:	9001      	str	r0, [sp, #4]
1005424c:	8806      	ldrh	r6, [r0, #0]
1005424e:	f002 fba8 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10054252:	4601      	mov	r1, r0
10054254:	4630      	mov	r0, r6
10054256:	f7ff fd17 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
1005425a:	9002      	str	r0, [sp, #8]
1005425c:	4628      	mov	r0, r5
1005425e:	f7ff fedf 	bl	10054020 <GAT_att_srv_run>
10054262:	1e64      	subs	r4, r4, #1
10054264:	e7e8      	b.n	10054238 <GAT_att_srv_process_rx_pckt_tsk+0x10>
10054266:	b005      	add	sp, #20
10054268:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005426a:	46c0      	nop			@ (mov r8, r8)

1005426c <__arm_cp.9_0>:
1005426c:	20000ed8 	.word	0x20000ed8

10054270 <GAT_att_srv_hvtx>:
10054270:	b5f0      	push	{r4, r5, r6, r7, lr}
10054272:	b08b      	sub	sp, #44	@ 0x2c
10054274:	930a      	str	r3, [sp, #40]	@ 0x28
10054276:	4614      	mov	r4, r2
10054278:	460d      	mov	r5, r1
1005427a:	4607      	mov	r7, r0
1005427c:	f7ff fd04 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10054280:	2800      	cmp	r0, #0
10054282:	d011      	beq.n	100542a8 <GAT_att_srv_hvtx+0x38>
10054284:	4606      	mov	r6, r0
10054286:	9704      	str	r7, [sp, #16]
10054288:	8880      	ldrh	r0, [r0, #4]
1005428a:	270c      	movs	r7, #12
1005428c:	0741      	lsls	r1, r0, #29
1005428e:	d47f      	bmi.n	10054390 <GAT_att_srv_hvtx+0x120>
10054290:	2c02      	cmp	r4, #2
10054292:	d101      	bne.n	10054298 <GAT_att_srv_hvtx+0x28>
10054294:	0780      	lsls	r0, r0, #30
10054296:	d47b      	bmi.n	10054390 <GAT_att_srv_hvtx+0x120>
10054298:	9502      	str	r5, [sp, #8]
1005429a:	9403      	str	r4, [sp, #12]
1005429c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005429e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100542a0:	2b01      	cmp	r3, #1
100542a2:	d803      	bhi.n	100542ac <GAT_att_srv_hvtx+0x3c>
100542a4:	2503      	movs	r5, #3
100542a6:	e003      	b.n	100542b0 <GAT_att_srv_hvtx+0x40>
100542a8:	2712      	movs	r7, #18
100542aa:	e071      	b.n	10054390 <GAT_att_srv_hvtx+0x120>
100542ac:	0098      	lsls	r0, r3, #2
100542ae:	1c45      	adds	r5, r0, #1
100542b0:	1ca0      	adds	r0, r4, #2
100542b2:	4619      	mov	r1, r3
100542b4:	2900      	cmp	r1, #0
100542b6:	d004      	beq.n	100542c2 <GAT_att_srv_hvtx+0x52>
100542b8:	8802      	ldrh	r2, [r0, #0]
100542ba:	1955      	adds	r5, r2, r5
100542bc:	3008      	adds	r0, #8
100542be:	1e49      	subs	r1, r1, #1
100542c0:	e7f8      	b.n	100542b4 <GAT_att_srv_hvtx+0x44>
100542c2:	88f0      	ldrh	r0, [r6, #6]
100542c4:	2b02      	cmp	r3, #2
100542c6:	d302      	bcc.n	100542ce <GAT_att_srv_hvtx+0x5e>
100542c8:	b2a9      	uxth	r1, r5
100542ca:	4281      	cmp	r1, r0
100542cc:	d860      	bhi.n	10054390 <GAT_att_srv_hvtx+0x120>
100542ce:	b2a9      	uxth	r1, r5
100542d0:	4281      	cmp	r1, r0
100542d2:	d300      	bcc.n	100542d6 <GAT_att_srv_hvtx+0x66>
100542d4:	4605      	mov	r5, r0
100542d6:	b2a9      	uxth	r1, r5
100542d8:	4630      	mov	r0, r6
100542da:	9106      	str	r1, [sp, #24]
100542dc:	f7ff fdd2 	bl	10053e84 <GAT_att_cmn_get_pckt>
100542e0:	2800      	cmp	r0, #0
100542e2:	d00e      	beq.n	10054302 <GAT_att_srv_hvtx+0x92>
100542e4:	4607      	mov	r7, r0
100542e6:	9803      	ldr	r0, [sp, #12]
100542e8:	2802      	cmp	r0, #2
100542ea:	9707      	str	r7, [sp, #28]
100542ec:	9601      	str	r6, [sp, #4]
100542ee:	d10f      	bne.n	10054310 <GAT_att_srv_hvtx+0xa0>
100542f0:	89b9      	ldrh	r1, [r7, #12]
100542f2:	221d      	movs	r2, #29
100542f4:	4638      	mov	r0, r7
100542f6:	f000 f889 	bl	1005440c <ACL_pkt_write_8b>
100542fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
100542fc:	2801      	cmp	r0, #1
100542fe:	d00f      	beq.n	10054320 <GAT_att_srv_hvtx+0xb0>
10054300:	e04e      	b.n	100543a0 <GAT_att_srv_hvtx+0x130>
10054302:	2008      	movs	r0, #8
10054304:	f00b fb34 	bl	1005f970 <tsk_notify_idx>
10054308:	f7fa fcdb 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005430c:	2788      	movs	r7, #136	@ 0x88
1005430e:	e03f      	b.n	10054390 <GAT_att_srv_hvtx+0x120>
10054310:	89b9      	ldrh	r1, [r7, #12]
10054312:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054314:	2801      	cmp	r0, #1
10054316:	d13e      	bne.n	10054396 <GAT_att_srv_hvtx+0x126>
10054318:	221b      	movs	r2, #27
1005431a:	4638      	mov	r0, r7
1005431c:	f000 f876 	bl	1005440c <ACL_pkt_write_8b>
10054320:	8822      	ldrh	r2, [r4, #0]
10054322:	89b8      	ldrh	r0, [r7, #12]
10054324:	1c40      	adds	r0, r0, #1
10054326:	b281      	uxth	r1, r0
10054328:	4638      	mov	r0, r7
1005432a:	f7fd fe58 	bl	10051fde <ACL_pkt_write_16b>
1005432e:	6863      	ldr	r3, [r4, #4]
10054330:	89b8      	ldrh	r0, [r7, #12]
10054332:	1ee9      	subs	r1, r5, #3
10054334:	b28a      	uxth	r2, r1
10054336:	1cc0      	adds	r0, r0, #3
10054338:	b281      	uxth	r1, r0
1005433a:	4638      	mov	r0, r7
1005433c:	f7fd fe58 	bl	10051ff0 <ACL_pkt_write>
10054340:	9807      	ldr	r0, [sp, #28]
10054342:	8045      	strh	r5, [r0, #2]
10054344:	9d03      	ldr	r5, [sp, #12]
10054346:	2d02      	cmp	r5, #2
10054348:	d10c      	bne.n	10054364 <GAT_att_srv_hvtx+0xf4>
1005434a:	2001      	movs	r0, #1
1005434c:	9904      	ldr	r1, [sp, #16]
1005434e:	9a02      	ldr	r2, [sp, #8]
10054350:	f7ff fd56 	bl	10053e00 <GAT_att_cmn_start_timer>
10054354:	2800      	cmp	r0, #0
10054356:	9c01      	ldr	r4, [sp, #4]
10054358:	d00c      	beq.n	10054374 <GAT_att_srv_hvtx+0x104>
1005435a:	4607      	mov	r7, r0
1005435c:	9807      	ldr	r0, [sp, #28]
1005435e:	f7fd fe09 	bl	10051f74 <ACL_pkt_release>
10054362:	e015      	b.n	10054390 <GAT_att_srv_hvtx+0x120>
10054364:	07e8      	lsls	r0, r5, #31
10054366:	9c01      	ldr	r4, [sp, #4]
10054368:	d004      	beq.n	10054374 <GAT_att_srv_hvtx+0x104>
1005436a:	9a07      	ldr	r2, [sp, #28]
1005436c:	7a10      	ldrb	r0, [r2, #8]
1005436e:	2108      	movs	r1, #8
10054370:	4301      	orrs	r1, r0
10054372:	7211      	strb	r1, [r2, #8]
10054374:	9802      	ldr	r0, [sp, #8]
10054376:	9907      	ldr	r1, [sp, #28]
10054378:	f7ff fd08 	bl	10053d8c <GAT_att_cmn_send>
1005437c:	4607      	mov	r7, r0
1005437e:	2d02      	cmp	r5, #2
10054380:	d106      	bne.n	10054390 <GAT_att_srv_hvtx+0x120>
10054382:	2f00      	cmp	r7, #0
10054384:	d104      	bne.n	10054390 <GAT_att_srv_hvtx+0x120>
10054386:	88a0      	ldrh	r0, [r4, #4]
10054388:	2102      	movs	r1, #2
1005438a:	4301      	orrs	r1, r0
1005438c:	80a1      	strh	r1, [r4, #4]
1005438e:	2700      	movs	r7, #0
10054390:	4638      	mov	r0, r7
10054392:	b00b      	add	sp, #44	@ 0x2c
10054394:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054396:	2223      	movs	r2, #35	@ 0x23
10054398:	4638      	mov	r0, r7
1005439a:	f000 f837 	bl	1005440c <ACL_pkt_write_8b>
1005439e:	980a      	ldr	r0, [sp, #40]	@ 0x28
100543a0:	1ca7      	adds	r7, r4, #2
100543a2:	2101      	movs	r1, #1
100543a4:	9505      	str	r5, [sp, #20]
100543a6:	2800      	cmp	r0, #0
100543a8:	d0ca      	beq.n	10054340 <GAT_att_srv_hvtx+0xd0>
100543aa:	900a      	str	r0, [sp, #40]	@ 0x28
100543ac:	9d07      	ldr	r5, [sp, #28]
100543ae:	89a8      	ldrh	r0, [r5, #12]
100543b0:	1840      	adds	r0, r0, r1
100543b2:	9108      	str	r1, [sp, #32]
100543b4:	b281      	uxth	r1, r0
100543b6:	1ebb      	subs	r3, r7, #2
100543b8:	2402      	movs	r4, #2
100543ba:	4628      	mov	r0, r5
100543bc:	4622      	mov	r2, r4
100543be:	4e12      	ldr	r6, [pc, #72]	@ (10054408 <__arm_cp.10_0>)
100543c0:	47b0      	blx	r6
100543c2:	89a8      	ldrh	r0, [r5, #12]
100543c4:	9e08      	ldr	r6, [sp, #32]
100543c6:	1830      	adds	r0, r6, r0
100543c8:	1c80      	adds	r0, r0, #2
100543ca:	b281      	uxth	r1, r0
100543cc:	4628      	mov	r0, r5
100543ce:	9409      	str	r4, [sp, #36]	@ 0x24
100543d0:	4622      	mov	r2, r4
100543d2:	463b      	mov	r3, r7
100543d4:	4c0c      	ldr	r4, [pc, #48]	@ (10054408 <__arm_cp.10_0>)
100543d6:	47a0      	blx	r4
100543d8:	1d31      	adds	r1, r6, #4
100543da:	89a8      	ldrh	r0, [r5, #12]
100543dc:	1840      	adds	r0, r0, r1
100543de:	b28e      	uxth	r6, r1
100543e0:	9906      	ldr	r1, [sp, #24]
100543e2:	1b8a      	subs	r2, r1, r6
100543e4:	8839      	ldrh	r1, [r7, #0]
100543e6:	428a      	cmp	r2, r1
100543e8:	db00      	blt.n	100543ec <GAT_att_srv_hvtx+0x17c>
100543ea:	460a      	mov	r2, r1
100543ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
100543ee:	587b      	ldr	r3, [r7, r1]
100543f0:	b281      	uxth	r1, r0
100543f2:	b294      	uxth	r4, r2
100543f4:	4628      	mov	r0, r5
100543f6:	4622      	mov	r2, r4
100543f8:	4d03      	ldr	r5, [pc, #12]	@ (10054408 <__arm_cp.10_0>)
100543fa:	47a8      	blx	r5
100543fc:	19a1      	adds	r1, r4, r6
100543fe:	3708      	adds	r7, #8
10054400:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054402:	1e40      	subs	r0, r0, #1
10054404:	9d05      	ldr	r5, [sp, #20]
10054406:	e7ce      	b.n	100543a6 <GAT_att_srv_hvtx+0x136>

10054408 <__arm_cp.10_0>:
10054408:	10051ff1 	.word	0x10051ff1

1005440c <ACL_pkt_write_8b>:
1005440c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005440e:	4614      	mov	r4, r2
10054410:	6840      	ldr	r0, [r0, #4]
10054412:	2920      	cmp	r1, #32
10054414:	d304      	bcc.n	10054420 <ACL_pkt_write_8b+0x14>
10054416:	ad01      	add	r5, sp, #4
10054418:	462a      	mov	r2, r5
1005441a:	f009 fd72 	bl	1005df02 <Mem_Buff_get_buff_off>
1005441e:	8829      	ldrh	r1, [r5, #0]
10054420:	1840      	adds	r0, r0, r1
10054422:	7104      	strb	r4, [r0, #4]
10054424:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10054426 <GAT_att_srv_extract_write_packet_data>:
10054426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054428:	461d      	mov	r5, r3
1005442a:	4614      	mov	r4, r2
1005442c:	460f      	mov	r7, r1
1005442e:	4606      	mov	r6, r0
10054430:	f7ff fdb6 	bl	10053fa0 <GAT_att_cmn_get_opcode>
10054434:	210e      	movs	r1, #14
10054436:	43c9      	mvns	r1, r1
10054438:	28d2      	cmp	r0, #210	@ 0xd2
1005443a:	d000      	beq.n	1005443e <GAT_att_srv_extract_write_packet_data+0x18>
1005443c:	310c      	adds	r1, #12
1005443e:	8870      	ldrh	r0, [r6, #2]
10054440:	1808      	adds	r0, r1, r0
10054442:	b282      	uxth	r2, r0
10054444:	9906      	ldr	r1, [sp, #24]
10054446:	42ba      	cmp	r2, r7
10054448:	d905      	bls.n	10054456 <GAT_att_srv_extract_write_packet_data+0x30>
1005444a:	200d      	movs	r0, #13
1005444c:	7008      	strb	r0, [r1, #0]
1005444e:	2000      	movs	r0, #0
10054450:	8028      	strh	r0, [r5, #0]
10054452:	2786      	movs	r7, #134	@ 0x86
10054454:	e009      	b.n	1005446a <GAT_att_srv_extract_write_packet_data+0x44>
10054456:	2700      	movs	r7, #0
10054458:	700f      	strb	r7, [r1, #0]
1005445a:	8028      	strh	r0, [r5, #0]
1005445c:	89b0      	ldrh	r0, [r6, #12]
1005445e:	1cc0      	adds	r0, r0, #3
10054460:	b281      	uxth	r1, r0
10054462:	4630      	mov	r0, r6
10054464:	4623      	mov	r3, r4
10054466:	f7fd fda1 	bl	10051fac <ACL_pkt_read>
1005446a:	4638      	mov	r0, r7
1005446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10054470 <GAT_att_srv_resp>:
10054470:	b5f0      	push	{r4, r5, r6, r7, lr}
10054472:	b089      	sub	sp, #36	@ 0x24
10054474:	461f      	mov	r7, r3
10054476:	9203      	str	r2, [sp, #12]
10054478:	460e      	mov	r6, r1
1005447a:	4605      	mov	r5, r0
1005447c:	f7ff fc04 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10054480:	2800      	cmp	r0, #0
10054482:	d045      	beq.n	10054510 <GAT_att_srv_resp+0xa0>
10054484:	4604      	mov	r4, r0
10054486:	68c0      	ldr	r0, [r0, #12]
10054488:	2800      	cmp	r0, #0
1005448a:	d041      	beq.n	10054510 <GAT_att_srv_resp+0xa0>
1005448c:	9702      	str	r7, [sp, #8]
1005448e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10054490:	9001      	str	r0, [sp, #4]
10054492:	980e      	ldr	r0, [sp, #56]	@ 0x38
10054494:	9000      	str	r0, [sp, #0]
10054496:	481f      	ldr	r0, [pc, #124]	@ (10054514 <__arm_cp.13_0>)
10054498:	6807      	ldr	r7, [r0, #0]
1005449a:	3738      	adds	r7, #56	@ 0x38
1005449c:	683f      	ldr	r7, [r7, #0]
1005449e:	2f00      	cmp	r7, #0
100544a0:	d00f      	beq.n	100544c2 <GAT_att_srv_resp+0x52>
100544a2:	8838      	ldrh	r0, [r7, #0]
100544a4:	42a8      	cmp	r0, r5
100544a6:	d104      	bne.n	100544b2 <GAT_att_srv_resp+0x42>
100544a8:	4638      	mov	r0, r7
100544aa:	f002 fa7a 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
100544ae:	42b0      	cmp	r0, r6
100544b0:	d001      	beq.n	100544b6 <GAT_att_srv_resp+0x46>
100544b2:	371c      	adds	r7, #28
100544b4:	e7f2      	b.n	1005449c <GAT_att_srv_resp+0x2c>
100544b6:	4817      	ldr	r0, [pc, #92]	@ (10054514 <__arm_cp.13_0>)
100544b8:	6800      	ldr	r0, [r0, #0]
100544ba:	3038      	adds	r0, #56	@ 0x38
100544bc:	4639      	mov	r1, r7
100544be:	f00b fc5d 	bl	1005fd7c <ACL_list_remove>
100544c2:	68e0      	ldr	r0, [r4, #12]
100544c4:	f7ff fd6c 	bl	10053fa0 <GAT_att_cmn_get_opcode>
100544c8:	1e41      	subs	r1, r0, #1
100544ca:	9802      	ldr	r0, [sp, #8]
100544cc:	2800      	cmp	r0, #0
100544ce:	d013      	beq.n	100544f8 <GAT_att_srv_resp+0x88>
100544d0:	b2c8      	uxtb	r0, r1
100544d2:	281e      	cmp	r0, #30
100544d4:	d007      	beq.n	100544e6 <GAT_att_srv_resp+0x76>
100544d6:	2240      	movs	r2, #64	@ 0x40
100544d8:	4011      	ands	r1, r2
100544da:	d104      	bne.n	100544e6 <GAT_att_srv_resp+0x76>
100544dc:	68e3      	ldr	r3, [r4, #12]
100544de:	9903      	ldr	r1, [sp, #12]
100544e0:	9a02      	ldr	r2, [sp, #8]
100544e2:	f000 f819 	bl	10054518 <GAT_att_srv_write_err_packet>
100544e6:	4620      	mov	r0, r4
100544e8:	f000 f82a 	bl	10054540 <GAT_att_srv_send_response>
100544ec:	2f00      	cmp	r7, #0
100544ee:	d00f      	beq.n	10054510 <GAT_att_srv_resp+0xa0>
100544f0:	4638      	mov	r0, r7
100544f2:	f7fd fd3f 	bl	10051f74 <ACL_pkt_release>
100544f6:	e00b      	b.n	10054510 <GAT_att_srv_resp+0xa0>
100544f8:	a804      	add	r0, sp, #16
100544fa:	9a00      	ldr	r2, [sp, #0]
100544fc:	8182      	strh	r2, [r0, #12]
100544fe:	7041      	strb	r1, [r0, #1]
10054500:	2101      	movs	r1, #1
10054502:	7001      	strb	r1, [r0, #0]
10054504:	9901      	ldr	r1, [sp, #4]
10054506:	9108      	str	r1, [sp, #32]
10054508:	9406      	str	r4, [sp, #24]
1005450a:	9705      	str	r7, [sp, #20]
1005450c:	f7ff fd88 	bl	10054020 <GAT_att_srv_run>
10054510:	b009      	add	sp, #36	@ 0x24
10054512:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054514 <__arm_cp.13_0>:
10054514:	20000ed8 	.word	0x20000ed8

10054518 <GAT_att_srv_write_err_packet>:
10054518:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005451a:	2b00      	cmp	r3, #0
1005451c:	d00f      	beq.n	1005453e <GAT_att_srv_write_err_packet+0x26>
1005451e:	461c      	mov	r4, r3
10054520:	466b      	mov	r3, sp
10054522:	7099      	strb	r1, [r3, #2]
10054524:	7058      	strb	r0, [r3, #1]
10054526:	2001      	movs	r0, #1
10054528:	7018      	strb	r0, [r3, #0]
1005452a:	711a      	strb	r2, [r3, #4]
1005452c:	0a08      	lsrs	r0, r1, #8
1005452e:	70d8      	strb	r0, [r3, #3]
10054530:	89a1      	ldrh	r1, [r4, #12]
10054532:	2505      	movs	r5, #5
10054534:	4620      	mov	r0, r4
10054536:	462a      	mov	r2, r5
10054538:	f7fd fd5a 	bl	10051ff0 <ACL_pkt_write>
1005453c:	8065      	strh	r5, [r4, #2]
1005453e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10054540 <GAT_att_srv_send_response>:
10054540:	b510      	push	{r4, lr}
10054542:	4604      	mov	r4, r0
10054544:	68c0      	ldr	r0, [r0, #12]
10054546:	2800      	cmp	r0, #0
10054548:	d015      	beq.n	10054576 <GAT_att_srv_send_response+0x36>
1005454a:	8841      	ldrh	r1, [r0, #2]
1005454c:	1d09      	adds	r1, r1, #4
1005454e:	b289      	uxth	r1, r1
10054550:	f7fd fd19 	bl	10051f86 <ACL_pkt_resize>
10054554:	68e1      	ldr	r1, [r4, #12]
10054556:	8960      	ldrh	r0, [r4, #10]
10054558:	f7ff fc18 	bl	10053d8c <GAT_att_cmn_send>
1005455c:	2800      	cmp	r0, #0
1005455e:	d108      	bne.n	10054572 <GAT_att_srv_send_response+0x32>
10054560:	8962      	ldrh	r2, [r4, #10]
10054562:	8921      	ldrh	r1, [r4, #8]
10054564:	2000      	movs	r0, #0
10054566:	f7ff fc01 	bl	10053d6c <GAT_att_cmn_stop_timer>
1005456a:	88a0      	ldrh	r0, [r4, #4]
1005456c:	2101      	movs	r1, #1
1005456e:	4388      	bics	r0, r1
10054570:	80a0      	strh	r0, [r4, #4]
10054572:	2000      	movs	r0, #0
10054574:	60e0      	str	r0, [r4, #12]
10054576:	bd10      	pop	{r4, pc}

10054578 <GAT_att_srv_confirmation_pending>:
10054578:	b5e0      	push	{r5, r6, r7, lr}
1005457a:	a801      	add	r0, sp, #4
1005457c:	2102      	movs	r1, #2
1005457e:	8001      	strh	r1, [r0, #0]
10054580:	9000      	str	r0, [sp, #0]
10054582:	2000      	movs	r0, #0
10054584:	4b04      	ldr	r3, [pc, #16]	@ (10054598 <__arm_cp.16_0>)
10054586:	4601      	mov	r1, r0
10054588:	4602      	mov	r2, r0
1005458a:	f7ff fabf 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
1005458e:	3886      	subs	r0, #134	@ 0x86
10054590:	4241      	negs	r1, r0
10054592:	4148      	adcs	r0, r1
10054594:	bd8c      	pop	{r2, r3, r7, pc}
10054596:	46c0      	nop			@ (mov r8, r8)

10054598 <__arm_cp.16_0>:
10054598:	10053db9 	.word	0x10053db9

1005459c <GAT_att_srv_request_user_pending>:
1005459c:	b510      	push	{r4, lr}
1005459e:	480a      	ldr	r0, [pc, #40]	@ (100545c8 <__arm_cp.17_0>)
100545a0:	6804      	ldr	r4, [r0, #0]
100545a2:	3438      	adds	r4, #56	@ 0x38
100545a4:	6824      	ldr	r4, [r4, #0]
100545a6:	2c00      	cmp	r4, #0
100545a8:	d009      	beq.n	100545be <GAT_att_srv_request_user_pending+0x22>
100545aa:	4620      	mov	r0, r4
100545ac:	f7ff fcf8 	bl	10053fa0 <GAT_att_cmn_get_opcode>
100545b0:	281e      	cmp	r0, #30
100545b2:	d002      	beq.n	100545ba <GAT_att_srv_request_user_pending+0x1e>
100545b4:	2140      	movs	r1, #64	@ 0x40
100545b6:	4008      	ands	r0, r1
100545b8:	d003      	beq.n	100545c2 <GAT_att_srv_request_user_pending+0x26>
100545ba:	341c      	adds	r4, #28
100545bc:	e7f2      	b.n	100545a4 <GAT_att_srv_request_user_pending+0x8>
100545be:	2000      	movs	r0, #0
100545c0:	bd10      	pop	{r4, pc}
100545c2:	2001      	movs	r0, #1
100545c4:	bd10      	pop	{r4, pc}
100545c6:	46c0      	nop			@ (mov r8, r8)

100545c8 <__arm_cp.17_0>:
100545c8:	20000ed8 	.word	0x20000ed8

100545cc <GAT_att_srv_flush_user_pending_list>:
100545cc:	b570      	push	{r4, r5, r6, lr}
100545ce:	4d08      	ldr	r5, [pc, #32]	@ (100545f0 <__arm_cp.18_0>)
100545d0:	6828      	ldr	r0, [r5, #0]
100545d2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
100545d4:	2c00      	cmp	r4, #0
100545d6:	d00a      	beq.n	100545ee <GAT_att_srv_flush_user_pending_list+0x22>
100545d8:	69e6      	ldr	r6, [r4, #28]
100545da:	6828      	ldr	r0, [r5, #0]
100545dc:	3038      	adds	r0, #56	@ 0x38
100545de:	4621      	mov	r1, r4
100545e0:	f00b fbcc 	bl	1005fd7c <ACL_list_remove>
100545e4:	4620      	mov	r0, r4
100545e6:	f7fd fcc5 	bl	10051f74 <ACL_pkt_release>
100545ea:	4634      	mov	r4, r6
100545ec:	e7f2      	b.n	100545d4 <GAT_att_srv_flush_user_pending_list+0x8>
100545ee:	bd70      	pop	{r4, r5, r6, pc}

100545f0 <__arm_cp.18_0>:
100545f0:	20000ed8 	.word	0x20000ed8

100545f4 <GAT_att_srv_exchange_mtu_exc>:
100545f4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100545f6:	4604      	mov	r4, r0
100545f8:	6880      	ldr	r0, [r0, #8]
100545fa:	8941      	ldrh	r1, [r0, #10]
100545fc:	2904      	cmp	r1, #4
100545fe:	d11a      	bne.n	10054636 <GAT_att_srv_exchange_mtu_exc+0x42>
10054600:	6860      	ldr	r0, [r4, #4]
10054602:	8981      	ldrh	r1, [r0, #12]
10054604:	1c49      	adds	r1, r1, #1
10054606:	b289      	uxth	r1, r1
10054608:	f7fd fcd9 	bl	10051fbe <ACL_pkt_read_16b>
1005460c:	4605      	mov	r5, r0
1005460e:	2817      	cmp	r0, #23
10054610:	d800      	bhi.n	10054614 <GAT_att_srv_exchange_mtu_exc+0x20>
10054612:	2517      	movs	r5, #23
10054614:	4e1d      	ldr	r6, [pc, #116]	@ (1005468c <__arm_cp.19_0>)
10054616:	8a30      	ldrh	r0, [r6, #16]
10054618:	4285      	cmp	r5, r0
1005461a:	d300      	bcc.n	1005461e <GAT_att_srv_exchange_mtu_exc+0x2a>
1005461c:	4605      	mov	r5, r0
1005461e:	68a3      	ldr	r3, [r4, #8]
10054620:	8898      	ldrh	r0, [r3, #4]
10054622:	0700      	lsls	r0, r0, #28
10054624:	d40f      	bmi.n	10054646 <GAT_att_srv_exchange_mtu_exc+0x52>
10054626:	8919      	ldrh	r1, [r3, #8]
10054628:	2002      	movs	r0, #2
1005462a:	462a      	mov	r2, r5
1005462c:	f00c fa66 	bl	10060afc <aci_att_exchange_mtu_resp_event_push_noinline>
10054630:	2800      	cmp	r0, #0
10054632:	d014      	beq.n	1005465e <GAT_att_srv_exchange_mtu_exc+0x6a>
10054634:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10054636:	68c3      	ldr	r3, [r0, #12]
10054638:	2002      	movs	r0, #2
1005463a:	2100      	movs	r1, #0
1005463c:	2206      	movs	r2, #6
1005463e:	f7ff ff6b 	bl	10054518 <GAT_att_srv_write_err_packet>
10054642:	2086      	movs	r0, #134	@ 0x86
10054644:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10054646:	88d8      	ldrh	r0, [r3, #6]
10054648:	42a8      	cmp	r0, r5
1005464a:	d00e      	beq.n	1005466a <GAT_att_srv_exchange_mtu_exc+0x76>
1005464c:	3308      	adds	r3, #8
1005464e:	2042      	movs	r0, #66	@ 0x42
10054650:	2103      	movs	r1, #3
10054652:	2202      	movs	r2, #2
10054654:	f00c fd82 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
10054658:	2800      	cmp	r0, #0
1005465a:	d1eb      	bne.n	10054634 <GAT_att_srv_exchange_mtu_exc+0x40>
1005465c:	e005      	b.n	1005466a <GAT_att_srv_exchange_mtu_exc+0x76>
1005465e:	68a0      	ldr	r0, [r4, #8]
10054660:	80c5      	strh	r5, [r0, #6]
10054662:	8881      	ldrh	r1, [r0, #4]
10054664:	2208      	movs	r2, #8
10054666:	430a      	orrs	r2, r1
10054668:	8082      	strh	r2, [r0, #4]
1005466a:	8a30      	ldrh	r0, [r6, #16]
1005466c:	ab01      	add	r3, sp, #4
1005466e:	7058      	strb	r0, [r3, #1]
10054670:	2503      	movs	r5, #3
10054672:	701d      	strb	r5, [r3, #0]
10054674:	0a00      	lsrs	r0, r0, #8
10054676:	7098      	strb	r0, [r3, #2]
10054678:	68a0      	ldr	r0, [r4, #8]
1005467a:	68c4      	ldr	r4, [r0, #12]
1005467c:	89a1      	ldrh	r1, [r4, #12]
1005467e:	4620      	mov	r0, r4
10054680:	462a      	mov	r2, r5
10054682:	f7fd fcb5 	bl	10051ff0 <ACL_pkt_write>
10054686:	8065      	strh	r5, [r4, #2]
10054688:	2000      	movs	r0, #0
1005468a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005468c <__arm_cp.19_0>:
1005468c:	20000f34 	.word	0x20000f34

10054690 <GAT_att_srv_find_info_exc>:
10054690:	b5f0      	push	{r4, r5, r6, r7, lr}
10054692:	b08f      	sub	sp, #60	@ 0x3c
10054694:	4601      	mov	r1, r0
10054696:	6840      	ldr	r0, [r0, #4]
10054698:	9101      	str	r1, [sp, #4]
1005469a:	6889      	ldr	r1, [r1, #8]
1005469c:	68cf      	ldr	r7, [r1, #12]
1005469e:	ad0d      	add	r5, sp, #52	@ 0x34
100546a0:	ac0e      	add	r4, sp, #56	@ 0x38
100546a2:	4629      	mov	r1, r5
100546a4:	4622      	mov	r2, r4
100546a6:	f000 fc7c 	bl	10054fa2 <GAT_att_srv_get_handle_range>
100546aa:	8828      	ldrh	r0, [r5, #0]
100546ac:	9007      	str	r0, [sp, #28]
100546ae:	f00d fa17 	bl	10061ae0 <GAT_att_db_find_from_handle>
100546b2:	4602      	mov	r2, r0
100546b4:	8820      	ldrh	r0, [r4, #0]
100546b6:	9002      	str	r0, [sp, #8]
100546b8:	2500      	movs	r5, #0
100546ba:	462b      	mov	r3, r5
100546bc:	9500      	str	r5, [sp, #0]
100546be:	9503      	str	r5, [sp, #12]
100546c0:	2a00      	cmp	r2, #0
100546c2:	9506      	str	r5, [sp, #24]
100546c4:	d050      	beq.n	10054768 <GAT_att_srv_find_info_exc+0xd8>
100546c6:	8850      	ldrh	r0, [r2, #2]
100546c8:	9007      	str	r0, [sp, #28]
100546ca:	9902      	ldr	r1, [sp, #8]
100546cc:	4288      	cmp	r0, r1
100546ce:	d84b      	bhi.n	10054768 <GAT_att_srv_find_info_exc+0xd8>
100546d0:	b2a8      	uxth	r0, r5
100546d2:	18c0      	adds	r0, r0, r3
100546d4:	9901      	ldr	r1, [sp, #4]
100546d6:	6889      	ldr	r1, [r1, #8]
100546d8:	88c9      	ldrh	r1, [r1, #6]
100546da:	4288      	cmp	r0, r1
100546dc:	d844      	bhi.n	10054768 <GAT_att_srv_find_info_exc+0xd8>
100546de:	461c      	mov	r4, r3
100546e0:	ad08      	add	r5, sp, #32
100546e2:	9205      	str	r2, [sp, #20]
100546e4:	4610      	mov	r0, r2
100546e6:	4629      	mov	r1, r5
100546e8:	f000 ffba 	bl	10055660 <GAT_srv_get_attr_type>
100546ec:	7c2e      	ldrb	r6, [r5, #16]
100546ee:	9803      	ldr	r0, [sp, #12]
100546f0:	0600      	lsls	r0, r0, #24
100546f2:	d006      	beq.n	10054702 <GAT_att_srv_find_info_exc+0x72>
100546f4:	9800      	ldr	r0, [sp, #0]
100546f6:	4286      	cmp	r6, r0
100546f8:	d139      	bne.n	1005476e <GAT_att_srv_find_info_exc+0xde>
100546fa:	08c0      	lsrs	r0, r0, #3
100546fc:	9004      	str	r0, [sp, #16]
100546fe:	9d06      	ldr	r5, [sp, #24]
10054700:	e016      	b.n	10054730 <GAT_att_srv_find_info_exc+0xa0>
10054702:	89b9      	ldrh	r1, [r7, #12]
10054704:	2205      	movs	r2, #5
10054706:	4638      	mov	r0, r7
10054708:	f7ff fe80 	bl	1005440c <ACL_pkt_write_8b>
1005470c:	2e10      	cmp	r6, #16
1005470e:	d001      	beq.n	10054714 <GAT_att_srv_find_info_exc+0x84>
10054710:	2202      	movs	r2, #2
10054712:	e000      	b.n	10054716 <GAT_att_srv_find_info_exc+0x86>
10054714:	2201      	movs	r2, #1
10054716:	9d06      	ldr	r5, [sp, #24]
10054718:	89b8      	ldrh	r0, [r7, #12]
1005471a:	1c40      	adds	r0, r0, #1
1005471c:	b281      	uxth	r1, r0
1005471e:	4638      	mov	r0, r7
10054720:	9203      	str	r2, [sp, #12]
10054722:	f7ff fe73 	bl	1005440c <ACL_pkt_write_8b>
10054726:	1cad      	adds	r5, r5, #2
10054728:	08f0      	lsrs	r0, r6, #3
1005472a:	9004      	str	r0, [sp, #16]
1005472c:	1c84      	adds	r4, r0, #2
1005472e:	9600      	str	r6, [sp, #0]
10054730:	89b8      	ldrh	r0, [r7, #12]
10054732:	1940      	adds	r0, r0, r5
10054734:	b281      	uxth	r1, r0
10054736:	4638      	mov	r0, r7
10054738:	9a07      	ldr	r2, [sp, #28]
1005473a:	f7fd fc50 	bl	10051fde <ACL_pkt_write_16b>
1005473e:	89b8      	ldrh	r0, [r7, #12]
10054740:	1828      	adds	r0, r5, r0
10054742:	1c86      	adds	r6, r0, #2
10054744:	a808      	add	r0, sp, #32
10054746:	f00b fb00 	bl	1005fd4a <UUID_get_value_p>
1005474a:	4603      	mov	r3, r0
1005474c:	b2b1      	uxth	r1, r6
1005474e:	9804      	ldr	r0, [sp, #16]
10054750:	b2c2      	uxtb	r2, r0
10054752:	4638      	mov	r0, r7
10054754:	f7fd fc4c 	bl	10051ff0 <ACL_pkt_write>
10054758:	b2e0      	uxtb	r0, r4
1005475a:	182d      	adds	r5, r5, r0
1005475c:	9805      	ldr	r0, [sp, #20]
1005475e:	f00d fa21 	bl	10061ba4 <GAT_att_db_get_next>
10054762:	4602      	mov	r2, r0
10054764:	4623      	mov	r3, r4
10054766:	e7ab      	b.n	100546c0 <GAT_att_srv_find_info_exc+0x30>
10054768:	9803      	ldr	r0, [sp, #12]
1005476a:	0600      	lsls	r0, r0, #24
1005476c:	d003      	beq.n	10054776 <GAT_att_srv_find_info_exc+0xe6>
1005476e:	9806      	ldr	r0, [sp, #24]
10054770:	8078      	strh	r0, [r7, #2]
10054772:	2000      	movs	r0, #0
10054774:	e007      	b.n	10054786 <GAT_att_srv_find_info_exc+0xf6>
10054776:	9807      	ldr	r0, [sp, #28]
10054778:	b281      	uxth	r1, r0
1005477a:	2004      	movs	r0, #4
1005477c:	220a      	movs	r2, #10
1005477e:	463b      	mov	r3, r7
10054780:	f7ff feca 	bl	10054518 <GAT_att_srv_write_err_packet>
10054784:	2086      	movs	r0, #134	@ 0x86
10054786:	b00f      	add	sp, #60	@ 0x3c
10054788:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005478a <GAT_att_srv_find_by_type_val_exc>:
1005478a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005478c:	b091      	sub	sp, #68	@ 0x44
1005478e:	4607      	mov	r7, r0
10054790:	ac09      	add	r4, sp, #36	@ 0x24
10054792:	2010      	movs	r0, #16
10054794:	7420      	strb	r0, [r4, #16]
10054796:	6878      	ldr	r0, [r7, #4]
10054798:	8981      	ldrh	r1, [r0, #12]
1005479a:	1d49      	adds	r1, r1, #5
1005479c:	b289      	uxth	r1, r1
1005479e:	f7fd fc0e 	bl	10051fbe <ACL_pkt_read_16b>
100547a2:	81a0      	strh	r0, [r4, #12]
100547a4:	6878      	ldr	r0, [r7, #4]
100547a6:	ae0f      	add	r6, sp, #60	@ 0x3c
100547a8:	ad0e      	add	r5, sp, #56	@ 0x38
100547aa:	4631      	mov	r1, r6
100547ac:	462a      	mov	r2, r5
100547ae:	f000 fbf8 	bl	10054fa2 <GAT_att_srv_get_handle_range>
100547b2:	8836      	ldrh	r6, [r6, #0]
100547b4:	6878      	ldr	r0, [r7, #4]
100547b6:	9706      	str	r7, [sp, #24]
100547b8:	68b9      	ldr	r1, [r7, #8]
100547ba:	8844      	ldrh	r4, [r0, #2]
100547bc:	68c8      	ldr	r0, [r1, #12]
100547be:	8981      	ldrh	r1, [r0, #12]
100547c0:	2207      	movs	r2, #7
100547c2:	9002      	str	r0, [sp, #8]
100547c4:	f7ff fe22 	bl	1005440c <ACL_pkt_write_8b>
100547c8:	1fe0      	subs	r0, r4, #7
100547ca:	8829      	ldrh	r1, [r5, #0]
100547cc:	9104      	str	r1, [sp, #16]
100547ce:	2101      	movs	r1, #1
100547d0:	9105      	str	r1, [sp, #20]
100547d2:	b280      	uxth	r0, r0
100547d4:	9003      	str	r0, [sp, #12]
100547d6:	9601      	str	r6, [sp, #4]
100547d8:	9805      	ldr	r0, [sp, #20]
100547da:	b287      	uxth	r7, r0
100547dc:	1d3c      	adds	r4, r7, #4
100547de:	9806      	ldr	r0, [sp, #24]
100547e0:	6880      	ldr	r0, [r0, #8]
100547e2:	88c0      	ldrh	r0, [r0, #6]
100547e4:	4284      	cmp	r4, r0
100547e6:	d83c      	bhi.n	10054862 <GAT_att_srv_find_by_type_val_exc+0xd8>
100547e8:	b2b0      	uxth	r0, r6
100547ea:	aa09      	add	r2, sp, #36	@ 0x24
100547ec:	9904      	ldr	r1, [sp, #16]
100547ee:	f001 faa7 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
100547f2:	2800      	cmp	r0, #0
100547f4:	d035      	beq.n	10054862 <GAT_att_srv_find_by_type_val_exc+0xd8>
100547f6:	4605      	mov	r5, r0
100547f8:	a810      	add	r0, sp, #64	@ 0x40
100547fa:	9000      	str	r0, [sp, #0]
100547fc:	2200      	movs	r2, #0
100547fe:	ab08      	add	r3, sp, #32
10054800:	9806      	ldr	r0, [sp, #24]
10054802:	4629      	mov	r1, r5
10054804:	f000 fbe0 	bl	10054fc8 <GAT_att_srv_value_read>
10054808:	2886      	cmp	r0, #134	@ 0x86
1005480a:	d028      	beq.n	1005485e <GAT_att_srv_find_by_type_val_exc+0xd4>
1005480c:	2800      	cmp	r0, #0
1005480e:	d136      	bne.n	1005487e <GAT_att_srv_find_by_type_val_exc+0xf4>
10054810:	886e      	ldrh	r6, [r5, #2]
10054812:	9808      	ldr	r0, [sp, #32]
10054814:	6843      	ldr	r3, [r0, #4]
10054816:	9806      	ldr	r0, [sp, #24]
10054818:	6840      	ldr	r0, [r0, #4]
1005481a:	8981      	ldrh	r1, [r0, #12]
1005481c:	1dc9      	adds	r1, r1, #7
1005481e:	b289      	uxth	r1, r1
10054820:	9f03      	ldr	r7, [sp, #12]
10054822:	463a      	mov	r2, r7
10054824:	f7fd fbb9 	bl	10051f9a <ACL_pkt_cmp>
10054828:	9908      	ldr	r1, [sp, #32]
1005482a:	8809      	ldrh	r1, [r1, #0]
1005482c:	42b9      	cmp	r1, r7
1005482e:	d116      	bne.n	1005485e <GAT_att_srv_find_by_type_val_exc+0xd4>
10054830:	2800      	cmp	r0, #0
10054832:	d114      	bne.n	1005485e <GAT_att_srv_find_by_type_val_exc+0xd4>
10054834:	af07      	add	r7, sp, #28
10054836:	703e      	strb	r6, [r7, #0]
10054838:	0a30      	lsrs	r0, r6, #8
1005483a:	7078      	strb	r0, [r7, #1]
1005483c:	4628      	mov	r0, r5
1005483e:	f000 ff37 	bl	100556b0 <GAT_srv_get_att_group_end_handle>
10054842:	4606      	mov	r6, r0
10054844:	70b8      	strb	r0, [r7, #2]
10054846:	0a00      	lsrs	r0, r0, #8
10054848:	70f8      	strb	r0, [r7, #3]
1005484a:	9802      	ldr	r0, [sp, #8]
1005484c:	8981      	ldrh	r1, [r0, #12]
1005484e:	9a05      	ldr	r2, [sp, #20]
10054850:	1889      	adds	r1, r1, r2
10054852:	b289      	uxth	r1, r1
10054854:	2204      	movs	r2, #4
10054856:	463b      	mov	r3, r7
10054858:	f7fd fbca 	bl	10051ff0 <ACL_pkt_write>
1005485c:	9405      	str	r4, [sp, #20]
1005485e:	1c76      	adds	r6, r6, #1
10054860:	e7ba      	b.n	100547d8 <GAT_att_srv_find_by_type_val_exc+0x4e>
10054862:	2f01      	cmp	r7, #1
10054864:	d107      	bne.n	10054876 <GAT_att_srv_find_by_type_val_exc+0xec>
10054866:	2006      	movs	r0, #6
10054868:	220a      	movs	r2, #10
1005486a:	9901      	ldr	r1, [sp, #4]
1005486c:	9b02      	ldr	r3, [sp, #8]
1005486e:	f7ff fe53 	bl	10054518 <GAT_att_srv_write_err_packet>
10054872:	2086      	movs	r0, #134	@ 0x86
10054874:	e003      	b.n	1005487e <GAT_att_srv_find_by_type_val_exc+0xf4>
10054876:	9802      	ldr	r0, [sp, #8]
10054878:	9905      	ldr	r1, [sp, #20]
1005487a:	8041      	strh	r1, [r0, #2]
1005487c:	2000      	movs	r0, #0
1005487e:	b011      	add	sp, #68	@ 0x44
10054880:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054882 <GAT_att_srv_read_by_type_exc>:
10054882:	b5f0      	push	{r4, r5, r6, r7, lr}
10054884:	b097      	sub	sp, #92	@ 0x5c
10054886:	4604      	mov	r4, r0
10054888:	6840      	ldr	r0, [r0, #4]
1005488a:	a915      	add	r1, sp, #84	@ 0x54
1005488c:	aa14      	add	r2, sp, #80	@ 0x50
1005488e:	f000 fb88 	bl	10054fa2 <GAT_att_srv_get_handle_range>
10054892:	940a      	str	r4, [sp, #40]	@ 0x28
10054894:	6860      	ldr	r0, [r4, #4]
10054896:	8981      	ldrh	r1, [r0, #12]
10054898:	1d49      	adds	r1, r1, #5
1005489a:	8842      	ldrh	r2, [r0, #2]
1005489c:	b289      	uxth	r1, r1
1005489e:	2a07      	cmp	r2, #7
100548a0:	d105      	bne.n	100548ae <GAT_att_srv_read_by_type_exc+0x2c>
100548a2:	f7fd fb8c 	bl	10051fbe <ACL_pkt_read_16b>
100548a6:	a90f      	add	r1, sp, #60	@ 0x3c
100548a8:	8188      	strh	r0, [r1, #12]
100548aa:	2010      	movs	r0, #16
100548ac:	e004      	b.n	100548b8 <GAT_att_srv_read_by_type_exc+0x36>
100548ae:	2210      	movs	r2, #16
100548b0:	ab0f      	add	r3, sp, #60	@ 0x3c
100548b2:	f7fd fb7b 	bl	10051fac <ACL_pkt_read>
100548b6:	2080      	movs	r0, #128	@ 0x80
100548b8:	a90f      	add	r1, sp, #60	@ 0x3c
100548ba:	7408      	strb	r0, [r1, #16]
100548bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
100548be:	7840      	ldrb	r0, [r0, #1]
100548c0:	2810      	cmp	r0, #16
100548c2:	d001      	beq.n	100548c8 <GAT_att_srv_read_by_type_exc+0x46>
100548c4:	2102      	movs	r1, #2
100548c6:	e000      	b.n	100548ca <GAT_att_srv_read_by_type_exc+0x48>
100548c8:	2104      	movs	r1, #4
100548ca:	9107      	str	r1, [sp, #28]
100548cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100548ce:	6891      	ldr	r1, [r2, #8]
100548d0:	68cc      	ldr	r4, [r1, #12]
100548d2:	88cb      	ldrh	r3, [r1, #6]
100548d4:	9305      	str	r3, [sp, #20]
100548d6:	7812      	ldrb	r2, [r2, #0]
100548d8:	2a00      	cmp	r2, #0
100548da:	9404      	str	r4, [sp, #16]
100548dc:	d00a      	beq.n	100548f4 <GAT_att_srv_read_by_type_exc+0x72>
100548de:	8865      	ldrh	r5, [r4, #2]
100548e0:	2d02      	cmp	r5, #2
100548e2:	d315      	bcc.n	10054910 <GAT_att_srv_read_by_type_exc+0x8e>
100548e4:	89a0      	ldrh	r0, [r4, #12]
100548e6:	1c40      	adds	r0, r0, #1
100548e8:	b281      	uxth	r1, r0
100548ea:	4620      	mov	r0, r4
100548ec:	f000 fba9 	bl	10055042 <ACL_pkt_read_8b>
100548f0:	4606      	mov	r6, r0
100548f2:	e00e      	b.n	10054912 <GAT_att_srv_read_by_type_exc+0x90>
100548f4:	aa15      	add	r2, sp, #84	@ 0x54
100548f6:	8815      	ldrh	r5, [r2, #0]
100548f8:	2810      	cmp	r0, #16
100548fa:	d112      	bne.n	10054922 <GAT_att_srv_read_by_type_exc+0xa0>
100548fc:	a80f      	add	r0, sp, #60	@ 0x3c
100548fe:	f001 f981 	bl	10055c04 <GAT_srv_is_supported_grouping_type>
10054902:	2800      	cmp	r0, #0
10054904:	d100      	bne.n	10054908 <GAT_att_srv_read_by_type_exc+0x86>
10054906:	e0b8      	b.n	10054a7a <GAT_att_srv_read_by_type_exc+0x1f8>
10054908:	9508      	str	r5, [sp, #32]
1005490a:	89a1      	ldrh	r1, [r4, #12]
1005490c:	2211      	movs	r2, #17
1005490e:	e01b      	b.n	10054948 <GAT_att_srv_read_by_type_exc+0xc6>
10054910:	2600      	movs	r6, #0
10054912:	89a0      	ldrh	r0, [r4, #12]
10054914:	1940      	adds	r0, r0, r5
10054916:	b281      	uxth	r1, r0
10054918:	4620      	mov	r0, r4
1005491a:	f7fd fb50 	bl	10051fbe <ACL_pkt_read_16b>
1005491e:	9008      	str	r0, [sp, #32]
10054920:	e018      	b.n	10054954 <GAT_att_srv_read_by_type_exc+0xd2>
10054922:	a80b      	add	r0, sp, #44	@ 0x2c
10054924:	8105      	strh	r5, [r0, #8]
10054926:	2202      	movs	r2, #2
10054928:	7102      	strb	r2, [r0, #4]
1005492a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005492c:	8142      	strh	r2, [r0, #10]
1005492e:	910b      	str	r1, [sp, #44]	@ 0x2c
10054930:	a90f      	add	r1, sp, #60	@ 0x3c
10054932:	910e      	str	r1, [sp, #56]	@ 0x38
10054934:	f001 f9a8 	bl	10055c88 <GAT_srv_check_change_aware>
10054938:	2886      	cmp	r0, #134	@ 0x86
1005493a:	d102      	bne.n	10054942 <GAT_att_srv_read_by_type_exc+0xc0>
1005493c:	a816      	add	r0, sp, #88	@ 0x58
1005493e:	2212      	movs	r2, #18
10054940:	e09d      	b.n	10054a7e <GAT_att_srv_read_by_type_exc+0x1fc>
10054942:	9508      	str	r5, [sp, #32]
10054944:	89a1      	ldrh	r1, [r4, #12]
10054946:	2209      	movs	r2, #9
10054948:	4620      	mov	r0, r4
1005494a:	f7ff fd5f 	bl	1005440c <ACL_pkt_write_8b>
1005494e:	2501      	movs	r5, #1
10054950:	8065      	strh	r5, [r4, #2]
10054952:	2600      	movs	r6, #0
10054954:	9805      	ldr	r0, [sp, #20]
10054956:	1e80      	subs	r0, r0, #2
10054958:	9001      	str	r0, [sp, #4]
1005495a:	a814      	add	r0, sp, #80	@ 0x50
1005495c:	8800      	ldrh	r0, [r0, #0]
1005495e:	9003      	str	r0, [sp, #12]
10054960:	9609      	str	r6, [sp, #36]	@ 0x24
10054962:	b2f6      	uxtb	r6, r6
10054964:	9506      	str	r5, [sp, #24]
10054966:	b2af      	uxth	r7, r5
10054968:	19b8      	adds	r0, r7, r6
1005496a:	9905      	ldr	r1, [sp, #20]
1005496c:	4288      	cmp	r0, r1
1005496e:	d874      	bhi.n	10054a5a <GAT_att_srv_read_by_type_exc+0x1d8>
10054970:	9808      	ldr	r0, [sp, #32]
10054972:	b285      	uxth	r5, r0
10054974:	aa0f      	add	r2, sp, #60	@ 0x3c
10054976:	4628      	mov	r0, r5
10054978:	9903      	ldr	r1, [sp, #12]
1005497a:	f001 f9e1 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
1005497e:	2800      	cmp	r0, #0
10054980:	d06b      	beq.n	10054a5a <GAT_att_srv_read_by_type_exc+0x1d8>
10054982:	4604      	mov	r4, r0
10054984:	9502      	str	r5, [sp, #8]
10054986:	a816      	add	r0, sp, #88	@ 0x58
10054988:	9000      	str	r0, [sp, #0]
1005498a:	2500      	movs	r5, #0
1005498c:	ab0b      	add	r3, sp, #44	@ 0x2c
1005498e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054990:	4621      	mov	r1, r4
10054992:	462a      	mov	r2, r5
10054994:	f000 fb18 	bl	10054fc8 <GAT_att_srv_value_read>
10054998:	2800      	cmp	r0, #0
1005499a:	d14f      	bne.n	10054a3c <GAT_att_srv_read_by_type_exc+0x1ba>
1005499c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005499e:	8800      	ldrh	r0, [r0, #0]
100549a0:	9907      	ldr	r1, [sp, #28]
100549a2:	1809      	adds	r1, r1, r0
100549a4:	2f01      	cmp	r7, #1
100549a6:	d111      	bne.n	100549cc <GAT_att_srv_read_by_type_exc+0x14a>
100549a8:	29ff      	cmp	r1, #255	@ 0xff
100549aa:	d300      	bcc.n	100549ae <GAT_att_srv_read_by_type_exc+0x12c>
100549ac:	21ff      	movs	r1, #255	@ 0xff
100549ae:	9801      	ldr	r0, [sp, #4]
100549b0:	4281      	cmp	r1, r0
100549b2:	d300      	bcc.n	100549b6 <GAT_att_srv_read_by_type_exc+0x134>
100549b4:	9901      	ldr	r1, [sp, #4]
100549b6:	9109      	str	r1, [sp, #36]	@ 0x24
100549b8:	b2ca      	uxtb	r2, r1
100549ba:	9e04      	ldr	r6, [sp, #16]
100549bc:	89b0      	ldrh	r0, [r6, #12]
100549be:	1c40      	adds	r0, r0, #1
100549c0:	b281      	uxth	r1, r0
100549c2:	4630      	mov	r0, r6
100549c4:	f7ff fd22 	bl	1005440c <ACL_pkt_write_8b>
100549c8:	2702      	movs	r7, #2
100549ca:	e003      	b.n	100549d4 <GAT_att_srv_read_by_type_exc+0x152>
100549cc:	42b1      	cmp	r1, r6
100549ce:	9e04      	ldr	r6, [sp, #16]
100549d0:	9f06      	ldr	r7, [sp, #24]
100549d2:	d15c      	bne.n	10054a8e <GAT_att_srv_read_by_type_exc+0x20c>
100549d4:	8865      	ldrh	r5, [r4, #2]
100549d6:	4620      	mov	r0, r4
100549d8:	f000 fe6a 	bl	100556b0 <GAT_srv_get_att_group_end_handle>
100549dc:	9008      	str	r0, [sp, #32]
100549de:	89b0      	ldrh	r0, [r6, #12]
100549e0:	19c0      	adds	r0, r0, r7
100549e2:	b281      	uxth	r1, r0
100549e4:	4630      	mov	r0, r6
100549e6:	462a      	mov	r2, r5
100549e8:	f7fd faf9 	bl	10051fde <ACL_pkt_write_16b>
100549ec:	9807      	ldr	r0, [sp, #28]
100549ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
100549f0:	1a0a      	subs	r2, r1, r0
100549f2:	463c      	mov	r4, r7
100549f4:	1cbf      	adds	r7, r7, #2
100549f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
100549f8:	7840      	ldrb	r0, [r0, #1]
100549fa:	2810      	cmp	r0, #16
100549fc:	d10a      	bne.n	10054a14 <GAT_att_srv_read_by_type_exc+0x192>
100549fe:	89b0      	ldrh	r0, [r6, #12]
10054a00:	19c0      	adds	r0, r0, r7
10054a02:	b281      	uxth	r1, r0
10054a04:	4630      	mov	r0, r6
10054a06:	9d08      	ldr	r5, [sp, #32]
10054a08:	4617      	mov	r7, r2
10054a0a:	462a      	mov	r2, r5
10054a0c:	f7fd fae7 	bl	10051fde <ACL_pkt_write_16b>
10054a10:	463a      	mov	r2, r7
10054a12:	1d27      	adds	r7, r4, #4
10054a14:	462c      	mov	r4, r5
10054a16:	89b0      	ldrh	r0, [r6, #12]
10054a18:	19c0      	adds	r0, r0, r7
10054a1a:	b281      	uxth	r1, r0
10054a1c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10054a1e:	6843      	ldr	r3, [r0, #4]
10054a20:	b2d5      	uxtb	r5, r2
10054a22:	4630      	mov	r0, r6
10054a24:	462a      	mov	r2, r5
10054a26:	f7fd fae3 	bl	10051ff0 <ACL_pkt_write>
10054a2a:	197d      	adds	r5, r7, r5
10054a2c:	8075      	strh	r5, [r6, #2]
10054a2e:	2002      	movs	r0, #2
10054a30:	990a      	ldr	r1, [sp, #40]	@ 0x28
10054a32:	7008      	strb	r0, [r1, #0]
10054a34:	1c60      	adds	r0, r4, #1
10054a36:	9008      	str	r0, [sp, #32]
10054a38:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10054a3a:	e791      	b.n	10054960 <GAT_att_srv_read_by_type_exc+0xde>
10054a3c:	2886      	cmp	r0, #134	@ 0x86
10054a3e:	9a06      	ldr	r2, [sp, #24]
10054a40:	d016      	beq.n	10054a70 <GAT_att_srv_read_by_type_exc+0x1ee>
10054a42:	2884      	cmp	r0, #132	@ 0x84
10054a44:	4605      	mov	r5, r0
10054a46:	9804      	ldr	r0, [sp, #16]
10054a48:	d121      	bne.n	10054a8e <GAT_att_srv_read_by_type_exc+0x20c>
10054a4a:	8981      	ldrh	r1, [r0, #12]
10054a4c:	1889      	adds	r1, r1, r2
10054a4e:	b289      	uxth	r1, r1
10054a50:	9a02      	ldr	r2, [sp, #8]
10054a52:	f7fd fac4 	bl	10051fde <ACL_pkt_write_16b>
10054a56:	2584      	movs	r5, #132	@ 0x84
10054a58:	e019      	b.n	10054a8e <GAT_att_srv_read_by_type_exc+0x20c>
10054a5a:	2f01      	cmp	r7, #1
10054a5c:	d106      	bne.n	10054a6c <GAT_att_srv_read_by_type_exc+0x1ea>
10054a5e:	a816      	add	r0, sp, #88	@ 0x58
10054a60:	220a      	movs	r2, #10
10054a62:	7002      	strb	r2, [r0, #0]
10054a64:	a815      	add	r0, sp, #84	@ 0x54
10054a66:	8805      	ldrh	r5, [r0, #0]
10054a68:	9c04      	ldr	r4, [sp, #16]
10054a6a:	e009      	b.n	10054a80 <GAT_att_srv_read_by_type_exc+0x1fe>
10054a6c:	2500      	movs	r5, #0
10054a6e:	e00e      	b.n	10054a8e <GAT_att_srv_read_by_type_exc+0x20c>
10054a70:	a816      	add	r0, sp, #88	@ 0x58
10054a72:	7802      	ldrb	r2, [r0, #0]
10054a74:	9c04      	ldr	r4, [sp, #16]
10054a76:	9d08      	ldr	r5, [sp, #32]
10054a78:	e002      	b.n	10054a80 <GAT_att_srv_read_by_type_exc+0x1fe>
10054a7a:	a816      	add	r0, sp, #88	@ 0x58
10054a7c:	2210      	movs	r2, #16
10054a7e:	7002      	strb	r2, [r0, #0]
10054a80:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054a82:	7840      	ldrb	r0, [r0, #1]
10054a84:	b2a9      	uxth	r1, r5
10054a86:	4623      	mov	r3, r4
10054a88:	f7ff fd46 	bl	10054518 <GAT_att_srv_write_err_packet>
10054a8c:	2586      	movs	r5, #134	@ 0x86
10054a8e:	4628      	mov	r0, r5
10054a90:	b017      	add	sp, #92	@ 0x5c
10054a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054a94 <GAT_att_srv_read_exc>:
10054a94:	b5f0      	push	{r4, r5, r6, r7, lr}
10054a96:	b08b      	sub	sp, #44	@ 0x2c
10054a98:	4605      	mov	r5, r0
10054a9a:	6880      	ldr	r0, [r0, #8]
10054a9c:	68c4      	ldr	r4, [r0, #12]
10054a9e:	88c7      	ldrh	r7, [r0, #6]
10054aa0:	7828      	ldrb	r0, [r5, #0]
10054aa2:	2800      	cmp	r0, #0
10054aa4:	d024      	beq.n	10054af0 <GAT_att_srv_read_exc+0x5c>
10054aa6:	462e      	mov	r6, r5
10054aa8:	360c      	adds	r6, #12
10054aaa:	9605      	str	r6, [sp, #20]
10054aac:	6868      	ldr	r0, [r5, #4]
10054aae:	8980      	ldrh	r0, [r0, #12]
10054ab0:	1c40      	adds	r0, r0, #1
10054ab2:	b281      	uxth	r1, r0
10054ab4:	2204      	movs	r2, #4
10054ab6:	ab04      	add	r3, sp, #16
10054ab8:	4620      	mov	r0, r4
10054aba:	f7fd fa77 	bl	10051fac <ACL_pkt_read>
10054abe:	8830      	ldrh	r0, [r6, #0]
10054ac0:	7869      	ldrb	r1, [r5, #1]
10054ac2:	1e7f      	subs	r7, r7, #1
10054ac4:	290c      	cmp	r1, #12
10054ac6:	d103      	bne.n	10054ad0 <GAT_att_srv_read_exc+0x3c>
10054ac8:	4287      	cmp	r7, r0
10054aca:	d253      	bcs.n	10054b74 <GAT_att_srv_read_exc+0xe0>
10054acc:	9904      	ldr	r1, [sp, #16]
10054ace:	1a40      	subs	r0, r0, r1
10054ad0:	b280      	uxth	r0, r0
10054ad2:	4287      	cmp	r7, r0
10054ad4:	d300      	bcc.n	10054ad8 <GAT_att_srv_read_exc+0x44>
10054ad6:	4607      	mov	r7, r0
10054ad8:	b2ba      	uxth	r2, r7
10054ada:	6873      	ldr	r3, [r6, #4]
10054adc:	89a0      	ldrh	r0, [r4, #12]
10054ade:	1c40      	adds	r0, r0, #1
10054ae0:	b281      	uxth	r1, r0
10054ae2:	4620      	mov	r0, r4
10054ae4:	f7fd fa84 	bl	10051ff0 <ACL_pkt_write>
10054ae8:	1c78      	adds	r0, r7, #1
10054aea:	8060      	strh	r0, [r4, #2]
10054aec:	2000      	movs	r0, #0
10054aee:	e04d      	b.n	10054b8c <GAT_att_srv_read_exc+0xf8>
10054af0:	7868      	ldrb	r0, [r5, #1]
10054af2:	280c      	cmp	r0, #12
10054af4:	9702      	str	r7, [sp, #8]
10054af6:	d107      	bne.n	10054b08 <GAT_att_srv_read_exc+0x74>
10054af8:	6868      	ldr	r0, [r5, #4]
10054afa:	8981      	ldrh	r1, [r0, #12]
10054afc:	1cc9      	adds	r1, r1, #3
10054afe:	b289      	uxth	r1, r1
10054b00:	f7fd fa5d 	bl	10051fbe <ACL_pkt_read_16b>
10054b04:	220d      	movs	r2, #13
10054b06:	e001      	b.n	10054b0c <GAT_att_srv_read_exc+0x78>
10054b08:	220b      	movs	r2, #11
10054b0a:	2000      	movs	r0, #0
10054b0c:	af04      	add	r7, sp, #16
10054b0e:	9003      	str	r0, [sp, #12]
10054b10:	8038      	strh	r0, [r7, #0]
10054b12:	89a1      	ldrh	r1, [r4, #12]
10054b14:	4620      	mov	r0, r4
10054b16:	f7ff fc79 	bl	1005440c <ACL_pkt_write_8b>
10054b1a:	6868      	ldr	r0, [r5, #4]
10054b1c:	8981      	ldrh	r1, [r0, #12]
10054b1e:	1c49      	adds	r1, r1, #1
10054b20:	b289      	uxth	r1, r1
10054b22:	f7fd fa4c 	bl	10051fbe <ACL_pkt_read_16b>
10054b26:	4606      	mov	r6, r0
10054b28:	8078      	strh	r0, [r7, #2]
10054b2a:	a807      	add	r0, sp, #28
10054b2c:	8106      	strh	r6, [r0, #8]
10054b2e:	2701      	movs	r7, #1
10054b30:	7107      	strb	r7, [r0, #4]
10054b32:	68a9      	ldr	r1, [r5, #8]
10054b34:	9107      	str	r1, [sp, #28]
10054b36:	f001 f8a7 	bl	10055c88 <GAT_srv_check_change_aware>
10054b3a:	2886      	cmp	r0, #134	@ 0x86
10054b3c:	d101      	bne.n	10054b42 <GAT_att_srv_read_exc+0xae>
10054b3e:	2712      	movs	r7, #18
10054b40:	e015      	b.n	10054b6e <GAT_att_srv_read_exc+0xda>
10054b42:	4630      	mov	r0, r6
10054b44:	f00c ffa4 	bl	10061a90 <GAT_att_db_find_by_handle>
10054b48:	2800      	cmp	r0, #0
10054b4a:	d010      	beq.n	10054b6e <GAT_att_srv_read_exc+0xda>
10054b4c:	4601      	mov	r1, r0
10054b4e:	a806      	add	r0, sp, #24
10054b50:	9000      	str	r0, [sp, #0]
10054b52:	ab05      	add	r3, sp, #20
10054b54:	4628      	mov	r0, r5
10054b56:	9a03      	ldr	r2, [sp, #12]
10054b58:	f000 fa36 	bl	10054fc8 <GAT_att_srv_value_read>
10054b5c:	2800      	cmp	r0, #0
10054b5e:	d017      	beq.n	10054b90 <GAT_att_srv_read_exc+0xfc>
10054b60:	2884      	cmp	r0, #132	@ 0x84
10054b62:	d018      	beq.n	10054b96 <GAT_att_srv_read_exc+0x102>
10054b64:	2886      	cmp	r0, #134	@ 0x86
10054b66:	d111      	bne.n	10054b8c <GAT_att_srv_read_exc+0xf8>
10054b68:	a806      	add	r0, sp, #24
10054b6a:	7807      	ldrb	r7, [r0, #0]
10054b6c:	e007      	b.n	10054b7e <GAT_att_srv_read_exc+0xea>
10054b6e:	a806      	add	r0, sp, #24
10054b70:	7007      	strb	r7, [r0, #0]
10054b72:	e004      	b.n	10054b7e <GAT_att_srv_read_exc+0xea>
10054b74:	a806      	add	r0, sp, #24
10054b76:	270b      	movs	r7, #11
10054b78:	7007      	strb	r7, [r0, #0]
10054b7a:	a804      	add	r0, sp, #16
10054b7c:	8846      	ldrh	r6, [r0, #2]
10054b7e:	7868      	ldrb	r0, [r5, #1]
10054b80:	4631      	mov	r1, r6
10054b82:	463a      	mov	r2, r7
10054b84:	4623      	mov	r3, r4
10054b86:	f7ff fcc7 	bl	10054518 <GAT_att_srv_write_err_packet>
10054b8a:	2086      	movs	r0, #134	@ 0x86
10054b8c:	b00b      	add	sp, #44	@ 0x2c
10054b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054b90:	9e05      	ldr	r6, [sp, #20]
10054b92:	9f02      	ldr	r7, [sp, #8]
10054b94:	e793      	b.n	10054abe <GAT_att_srv_read_exc+0x2a>
10054b96:	89a0      	ldrh	r0, [r4, #12]
10054b98:	1c40      	adds	r0, r0, #1
10054b9a:	b281      	uxth	r1, r0
10054b9c:	2204      	movs	r2, #4
10054b9e:	ab04      	add	r3, sp, #16
10054ba0:	4620      	mov	r0, r4
10054ba2:	f7fd fa25 	bl	10051ff0 <ACL_pkt_write>
10054ba6:	2084      	movs	r0, #132	@ 0x84
10054ba8:	e7f0      	b.n	10054b8c <GAT_att_srv_read_exc+0xf8>

10054baa <GAT_att_srv_read_multi_exc>:
10054baa:	b5f0      	push	{r4, r5, r6, r7, lr}
10054bac:	b08d      	sub	sp, #52	@ 0x34
10054bae:	6881      	ldr	r1, [r0, #8]
10054bb0:	68ce      	ldr	r6, [r1, #12]
10054bb2:	88c9      	ldrh	r1, [r1, #6]
10054bb4:	9106      	str	r1, [sp, #24]
10054bb6:	7801      	ldrb	r1, [r0, #0]
10054bb8:	2900      	cmp	r1, #0
10054bba:	9007      	str	r0, [sp, #28]
10054bbc:	d009      	beq.n	10054bd2 <GAT_att_srv_read_multi_exc+0x28>
10054bbe:	8877      	ldrh	r7, [r6, #2]
10054bc0:	89b0      	ldrh	r0, [r6, #12]
10054bc2:	19c0      	adds	r0, r0, r7
10054bc4:	b281      	uxth	r1, r0
10054bc6:	4630      	mov	r0, r6
10054bc8:	f7fd f9f9 	bl	10051fbe <ACL_pkt_read_16b>
10054bcc:	9907      	ldr	r1, [sp, #28]
10054bce:	4602      	mov	r2, r0
10054bd0:	e00c      	b.n	10054bec <GAT_att_srv_read_multi_exc+0x42>
10054bd2:	7840      	ldrb	r0, [r0, #1]
10054bd4:	280e      	cmp	r0, #14
10054bd6:	d001      	beq.n	10054bdc <GAT_att_srv_read_multi_exc+0x32>
10054bd8:	2221      	movs	r2, #33	@ 0x21
10054bda:	e000      	b.n	10054bde <GAT_att_srv_read_multi_exc+0x34>
10054bdc:	220f      	movs	r2, #15
10054bde:	89b1      	ldrh	r1, [r6, #12]
10054be0:	4630      	mov	r0, r6
10054be2:	f7ff fc13 	bl	1005440c <ACL_pkt_write_8b>
10054be6:	2201      	movs	r2, #1
10054be8:	4617      	mov	r7, r2
10054bea:	9907      	ldr	r1, [sp, #28]
10054bec:	6848      	ldr	r0, [r1, #4]
10054bee:	7880      	ldrb	r0, [r0, #2]
10054bf0:	1a80      	subs	r0, r0, r2
10054bf2:	b2c0      	uxtb	r0, r0
10054bf4:	0845      	lsrs	r5, r0, #1
10054bf6:	7808      	ldrb	r0, [r1, #0]
10054bf8:	2800      	cmp	r0, #0
10054bfa:	9602      	str	r6, [sp, #8]
10054bfc:	d066      	beq.n	10054ccc <GAT_att_srv_read_multi_exc+0x122>
10054bfe:	9907      	ldr	r1, [sp, #28]
10054c00:	4608      	mov	r0, r1
10054c02:	300c      	adds	r0, #12
10054c04:	9001      	str	r0, [sp, #4]
10054c06:	b2ed      	uxtb	r5, r5
10054c08:	35ff      	adds	r5, #255	@ 0xff
10054c0a:	b2e8      	uxtb	r0, r5
10054c0c:	2300      	movs	r3, #0
10054c0e:	9303      	str	r3, [sp, #12]
10054c10:	42a8      	cmp	r0, r5
10054c12:	d100      	bne.n	10054c16 <GAT_att_srv_read_multi_exc+0x6c>
10054c14:	e0b3      	b.n	10054d7e <GAT_att_srv_read_multi_exc+0x1d4>
10054c16:	b2bc      	uxth	r4, r7
10054c18:	9806      	ldr	r0, [sp, #24]
10054c1a:	42a0      	cmp	r0, r4
10054c1c:	d800      	bhi.n	10054c20 <GAT_att_srv_read_multi_exc+0x76>
10054c1e:	e0ae      	b.n	10054d7e <GAT_att_srv_read_multi_exc+0x1d4>
10054c20:	6848      	ldr	r0, [r1, #4]
10054c22:	8981      	ldrh	r1, [r0, #12]
10054c24:	9205      	str	r2, [sp, #20]
10054c26:	1889      	adds	r1, r1, r2
10054c28:	b289      	uxth	r1, r1
10054c2a:	2202      	movs	r2, #2
10054c2c:	ab0c      	add	r3, sp, #48	@ 0x30
10054c2e:	9204      	str	r2, [sp, #16]
10054c30:	f7fd f9bc 	bl	10051fac <ACL_pkt_read>
10054c34:	9907      	ldr	r1, [sp, #28]
10054c36:	7808      	ldrb	r0, [r1, #0]
10054c38:	2801      	cmp	r0, #1
10054c3a:	d102      	bne.n	10054c42 <GAT_att_srv_read_multi_exc+0x98>
10054c3c:	9801      	ldr	r0, [sp, #4]
10054c3e:	9008      	str	r0, [sp, #32]
10054c40:	e00d      	b.n	10054c5e <GAT_att_srv_read_multi_exc+0xb4>
10054c42:	a80c      	add	r0, sp, #48	@ 0x30
10054c44:	8800      	ldrh	r0, [r0, #0]
10054c46:	f00c ff23 	bl	10061a90 <GAT_att_db_find_by_handle>
10054c4a:	4601      	mov	r1, r0
10054c4c:	9807      	ldr	r0, [sp, #28]
10054c4e:	6880      	ldr	r0, [r0, #8]
10054c50:	8900      	ldrh	r0, [r0, #8]
10054c52:	aa08      	add	r2, sp, #32
10054c54:	f000 fdc6 	bl	100557e4 <GAT_srv_get_attr_value>
10054c58:	9907      	ldr	r1, [sp, #28]
10054c5a:	2884      	cmp	r0, #132	@ 0x84
10054c5c:	d065      	beq.n	10054d2a <GAT_att_srv_read_multi_exc+0x180>
10054c5e:	9806      	ldr	r0, [sp, #24]
10054c60:	1b04      	subs	r4, r0, r4
10054c62:	7848      	ldrb	r0, [r1, #1]
10054c64:	280e      	cmp	r0, #14
10054c66:	d109      	bne.n	10054c7c <GAT_att_srv_read_multi_exc+0xd2>
10054c68:	89b0      	ldrh	r0, [r6, #12]
10054c6a:	19c1      	adds	r1, r0, r7
10054c6c:	9808      	ldr	r0, [sp, #32]
10054c6e:	8802      	ldrh	r2, [r0, #0]
10054c70:	4294      	cmp	r4, r2
10054c72:	db00      	blt.n	10054c76 <GAT_att_srv_read_multi_exc+0xcc>
10054c74:	4614      	mov	r4, r2
10054c76:	b289      	uxth	r1, r1
10054c78:	b2a2      	uxth	r2, r4
10054c7a:	e013      	b.n	10054ca4 <GAT_att_srv_read_multi_exc+0xfa>
10054c7c:	89b0      	ldrh	r0, [r6, #12]
10054c7e:	19c0      	adds	r0, r0, r7
10054c80:	b281      	uxth	r1, r0
10054c82:	9a08      	ldr	r2, [sp, #32]
10054c84:	4630      	mov	r0, r6
10054c86:	8816      	ldrh	r6, [r2, #0]
10054c88:	4632      	mov	r2, r6
10054c8a:	f7fd f9a8 	bl	10051fde <ACL_pkt_write_16b>
10054c8e:	1ea4      	subs	r4, r4, #2
10054c90:	42b4      	cmp	r4, r6
10054c92:	d300      	bcc.n	10054c96 <GAT_att_srv_read_multi_exc+0xec>
10054c94:	4634      	mov	r4, r6
10054c96:	b2a2      	uxth	r2, r4
10054c98:	1cbf      	adds	r7, r7, #2
10054c9a:	9e02      	ldr	r6, [sp, #8]
10054c9c:	89b0      	ldrh	r0, [r6, #12]
10054c9e:	19c0      	adds	r0, r0, r7
10054ca0:	b281      	uxth	r1, r0
10054ca2:	9808      	ldr	r0, [sp, #32]
10054ca4:	6843      	ldr	r3, [r0, #4]
10054ca6:	4630      	mov	r0, r6
10054ca8:	f7fd f9a2 	bl	10051ff0 <ACL_pkt_write>
10054cac:	193f      	adds	r7, r7, r4
10054cae:	8077      	strh	r7, [r6, #2]
10054cb0:	9907      	ldr	r1, [sp, #28]
10054cb2:	7848      	ldrb	r0, [r1, #1]
10054cb4:	2820      	cmp	r0, #32
10054cb6:	9a05      	ldr	r2, [sp, #20]
10054cb8:	d104      	bne.n	10054cc4 <GAT_att_srv_read_multi_exc+0x11a>
10054cba:	9806      	ldr	r0, [sp, #24]
10054cbc:	1bc0      	subs	r0, r0, r7
10054cbe:	b280      	uxth	r0, r0
10054cc0:	2802      	cmp	r0, #2
10054cc2:	d35c      	bcc.n	10054d7e <GAT_att_srv_read_multi_exc+0x1d4>
10054cc4:	9804      	ldr	r0, [sp, #16]
10054cc6:	7008      	strb	r0, [r1, #0]
10054cc8:	1c92      	adds	r2, r2, #2
10054cca:	e79c      	b.n	10054c06 <GAT_att_srv_read_multi_exc+0x5c>
10054ccc:	2100      	movs	r1, #0
10054cce:	9205      	str	r2, [sp, #20]
10054cd0:	9c07      	ldr	r4, [sp, #28]
10054cd2:	b288      	uxth	r0, r1
10054cd4:	42a8      	cmp	r0, r5
10054cd6:	d292      	bcs.n	10054bfe <GAT_att_srv_read_multi_exc+0x54>
10054cd8:	9104      	str	r1, [sp, #16]
10054cda:	0049      	lsls	r1, r1, #1
10054cdc:	6860      	ldr	r0, [r4, #4]
10054cde:	8982      	ldrh	r2, [r0, #12]
10054ce0:	1851      	adds	r1, r2, r1
10054ce2:	1c49      	adds	r1, r1, #1
10054ce4:	b289      	uxth	r1, r1
10054ce6:	2202      	movs	r2, #2
10054ce8:	ab0c      	add	r3, sp, #48	@ 0x30
10054cea:	f7fd f95f 	bl	10051fac <ACL_pkt_read>
10054cee:	a808      	add	r0, sp, #32
10054cf0:	2601      	movs	r6, #1
10054cf2:	7106      	strb	r6, [r0, #4]
10054cf4:	990c      	ldr	r1, [sp, #48]	@ 0x30
10054cf6:	8101      	strh	r1, [r0, #8]
10054cf8:	68a1      	ldr	r1, [r4, #8]
10054cfa:	9108      	str	r1, [sp, #32]
10054cfc:	f000 ffc4 	bl	10055c88 <GAT_srv_check_change_aware>
10054d00:	2886      	cmp	r0, #134	@ 0x86
10054d02:	d02a      	beq.n	10054d5a <GAT_att_srv_read_multi_exc+0x1b0>
10054d04:	a80c      	add	r0, sp, #48	@ 0x30
10054d06:	8800      	ldrh	r0, [r0, #0]
10054d08:	f00c fec2 	bl	10061a90 <GAT_att_db_find_by_handle>
10054d0c:	2800      	cmp	r0, #0
10054d0e:	d027      	beq.n	10054d60 <GAT_att_srv_read_multi_exc+0x1b6>
10054d10:	9907      	ldr	r1, [sp, #28]
10054d12:	6889      	ldr	r1, [r1, #8]
10054d14:	8909      	ldrh	r1, [r1, #8]
10054d16:	2201      	movs	r2, #1
10054d18:	f000 fcee 	bl	100556f8 <GAT_srv_check_perms>
10054d1c:	2800      	cmp	r0, #0
10054d1e:	d11e      	bne.n	10054d5e <GAT_att_srv_read_multi_exc+0x1b4>
10054d20:	9904      	ldr	r1, [sp, #16]
10054d22:	1c49      	adds	r1, r1, #1
10054d24:	9e02      	ldr	r6, [sp, #8]
10054d26:	9a05      	ldr	r2, [sp, #20]
10054d28:	e7d3      	b.n	10054cd2 <GAT_att_srv_read_multi_exc+0x128>
10054d2a:	a80c      	add	r0, sp, #48	@ 0x30
10054d2c:	8803      	ldrh	r3, [r0, #0]
10054d2e:	6888      	ldr	r0, [r1, #8]
10054d30:	8942      	ldrh	r2, [r0, #10]
10054d32:	8901      	ldrh	r1, [r0, #8]
10054d34:	2000      	movs	r0, #0
10054d36:	9000      	str	r0, [sp, #0]
10054d38:	2002      	movs	r0, #2
10054d3a:	f00b fe45 	bl	100609c8 <aci_gatt_srv_read_event_push_noinline>
10054d3e:	9003      	str	r0, [sp, #12]
10054d40:	2800      	cmp	r0, #0
10054d42:	9a05      	ldr	r2, [sp, #20]
10054d44:	d11b      	bne.n	10054d7e <GAT_att_srv_read_multi_exc+0x1d4>
10054d46:	8077      	strh	r7, [r6, #2]
10054d48:	89b0      	ldrh	r0, [r6, #12]
10054d4a:	19c0      	adds	r0, r0, r7
10054d4c:	b281      	uxth	r1, r0
10054d4e:	b292      	uxth	r2, r2
10054d50:	4630      	mov	r0, r6
10054d52:	f7fd f944 	bl	10051fde <ACL_pkt_write_16b>
10054d56:	2084      	movs	r0, #132	@ 0x84
10054d58:	e010      	b.n	10054d7c <GAT_att_srv_read_multi_exc+0x1d2>
10054d5a:	2612      	movs	r6, #18
10054d5c:	e000      	b.n	10054d60 <GAT_att_srv_read_multi_exc+0x1b6>
10054d5e:	4606      	mov	r6, r0
10054d60:	a80c      	add	r0, sp, #48	@ 0x30
10054d62:	8801      	ldrh	r1, [r0, #0]
10054d64:	9807      	ldr	r0, [sp, #28]
10054d66:	7840      	ldrb	r0, [r0, #1]
10054d68:	280e      	cmp	r0, #14
10054d6a:	d101      	bne.n	10054d70 <GAT_att_srv_read_multi_exc+0x1c6>
10054d6c:	200e      	movs	r0, #14
10054d6e:	e000      	b.n	10054d72 <GAT_att_srv_read_multi_exc+0x1c8>
10054d70:	2020      	movs	r0, #32
10054d72:	4632      	mov	r2, r6
10054d74:	9b02      	ldr	r3, [sp, #8]
10054d76:	f7ff fbcf 	bl	10054518 <GAT_att_srv_write_err_packet>
10054d7a:	2086      	movs	r0, #134	@ 0x86
10054d7c:	9003      	str	r0, [sp, #12]
10054d7e:	9803      	ldr	r0, [sp, #12]
10054d80:	b00d      	add	sp, #52	@ 0x34
10054d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054d84 <GAT_att_srv_write_exc>:
10054d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10054d86:	b089      	sub	sp, #36	@ 0x24
10054d88:	4604      	mov	r4, r0
10054d8a:	7800      	ldrb	r0, [r0, #0]
10054d8c:	2800      	cmp	r0, #0
10054d8e:	d001      	beq.n	10054d94 <GAT_att_srv_write_exc+0x10>
10054d90:	2000      	movs	r0, #0
10054d92:	e03b      	b.n	10054e0c <GAT_att_srv_write_exc+0x88>
10054d94:	6860      	ldr	r0, [r4, #4]
10054d96:	68a1      	ldr	r1, [r4, #8]
10054d98:	68c9      	ldr	r1, [r1, #12]
10054d9a:	9106      	str	r1, [sp, #24]
10054d9c:	8846      	ldrh	r6, [r0, #2]
10054d9e:	8981      	ldrh	r1, [r0, #12]
10054da0:	1c49      	adds	r1, r1, #1
10054da2:	b289      	uxth	r1, r1
10054da4:	f7fd f90b 	bl	10051fbe <ACL_pkt_read_16b>
10054da8:	4605      	mov	r5, r0
10054daa:	1ef1      	subs	r1, r6, #3
10054dac:	7860      	ldrb	r0, [r4, #1]
10054dae:	2700      	movs	r7, #0
10054db0:	2852      	cmp	r0, #82	@ 0x52
10054db2:	d00c      	beq.n	10054dce <GAT_att_srv_write_exc+0x4a>
10054db4:	28d2      	cmp	r0, #210	@ 0xd2
10054db6:	d10e      	bne.n	10054dd6 <GAT_att_srv_write_exc+0x52>
10054db8:	68a0      	ldr	r0, [r4, #8]
10054dba:	8940      	ldrh	r0, [r0, #10]
10054dbc:	2804      	cmp	r0, #4
10054dbe:	d124      	bne.n	10054e0a <GAT_att_srv_write_exc+0x86>
10054dc0:	3e0f      	subs	r6, #15
10054dc2:	2205      	movs	r2, #5
10054dc4:	2701      	movs	r7, #1
10054dc6:	2000      	movs	r0, #0
10054dc8:	9004      	str	r0, [sp, #16]
10054dca:	9605      	str	r6, [sp, #20]
10054dcc:	e00e      	b.n	10054dec <GAT_att_srv_write_exc+0x68>
10054dce:	9105      	str	r1, [sp, #20]
10054dd0:	2204      	movs	r2, #4
10054dd2:	9704      	str	r7, [sp, #16]
10054dd4:	e00a      	b.n	10054dec <GAT_att_srv_write_exc+0x68>
10054dd6:	9105      	str	r1, [sp, #20]
10054dd8:	9e06      	ldr	r6, [sp, #24]
10054dda:	89b1      	ldrh	r1, [r6, #12]
10054ddc:	2213      	movs	r2, #19
10054dde:	4630      	mov	r0, r6
10054de0:	f7ff fb14 	bl	1005440c <ACL_pkt_write_8b>
10054de4:	2001      	movs	r0, #1
10054de6:	9004      	str	r0, [sp, #16]
10054de8:	8070      	strh	r0, [r6, #2]
10054dea:	2203      	movs	r2, #3
10054dec:	ab07      	add	r3, sp, #28
10054dee:	4620      	mov	r0, r4
10054df0:	4629      	mov	r1, r5
10054df2:	f000 f936 	bl	10055062 <GAT_att_srv_set_attr_value_check>
10054df6:	4602      	mov	r2, r0
10054df8:	a808      	add	r0, sp, #32
10054dfa:	7002      	strb	r2, [r0, #0]
10054dfc:	2a00      	cmp	r2, #0
10054dfe:	d007      	beq.n	10054e10 <GAT_att_srv_write_exc+0x8c>
10054e00:	7860      	ldrb	r0, [r4, #1]
10054e02:	4629      	mov	r1, r5
10054e04:	9b06      	ldr	r3, [sp, #24]
10054e06:	f7ff fb87 	bl	10054518 <GAT_att_srv_write_err_packet>
10054e0a:	2086      	movs	r0, #134	@ 0x86
10054e0c:	b009      	add	sp, #36	@ 0x24
10054e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054e10:	2f00      	cmp	r7, #0
10054e12:	d008      	beq.n	10054e26 <GAT_att_srv_write_exc+0xa2>
10054e14:	6861      	ldr	r1, [r4, #4]
10054e16:	68a0      	ldr	r0, [r4, #8]
10054e18:	8900      	ldrh	r0, [r0, #8]
10054e1a:	f00a fc94 	bl	1005f746 <smp_sap_sm2_packet_data_signing_validate>
10054e1e:	2800      	cmp	r0, #0
10054e20:	d001      	beq.n	10054e26 <GAT_att_srv_write_exc+0xa2>
10054e22:	2200      	movs	r2, #0
10054e24:	e7ec      	b.n	10054e00 <GAT_att_srv_write_exc+0x7c>
10054e26:	6861      	ldr	r1, [r4, #4]
10054e28:	9807      	ldr	r0, [sp, #28]
10054e2a:	aa08      	add	r2, sp, #32
10054e2c:	f000 fdda 	bl	100559e4 <GAT_srv_attr_value_write>
10054e30:	2800      	cmp	r0, #0
10054e32:	d0eb      	beq.n	10054e0c <GAT_att_srv_write_exc+0x88>
10054e34:	2884      	cmp	r0, #132	@ 0x84
10054e36:	d112      	bne.n	10054e5e <GAT_att_srv_write_exc+0xda>
10054e38:	6860      	ldr	r0, [r4, #4]
10054e3a:	68a1      	ldr	r1, [r4, #8]
10054e3c:	894a      	ldrh	r2, [r1, #10]
10054e3e:	8909      	ldrh	r1, [r1, #8]
10054e40:	9b05      	ldr	r3, [sp, #20]
10054e42:	b29b      	uxth	r3, r3
10054e44:	9500      	str	r5, [sp, #0]
10054e46:	9301      	str	r3, [sp, #4]
10054e48:	9002      	str	r0, [sp, #8]
10054e4a:	200a      	movs	r0, #10
10054e4c:	9b04      	ldr	r3, [sp, #16]
10054e4e:	f00b fdf5 	bl	10060a3c <aci_gatt_srv_write_event_push_noinline>
10054e52:	2800      	cmp	r0, #0
10054e54:	d1da      	bne.n	10054e0c <GAT_att_srv_write_exc+0x88>
10054e56:	2000      	movs	r0, #0
10054e58:	6060      	str	r0, [r4, #4]
10054e5a:	2084      	movs	r0, #132	@ 0x84
10054e5c:	e7d6      	b.n	10054e0c <GAT_att_srv_write_exc+0x88>
10054e5e:	a808      	add	r0, sp, #32
10054e60:	7802      	ldrb	r2, [r0, #0]
10054e62:	e7cd      	b.n	10054e00 <GAT_att_srv_write_exc+0x7c>

10054e64 <GAT_att_srv_prep_wr_exc>:
10054e64:	b570      	push	{r4, r5, r6, lr}
10054e66:	b086      	sub	sp, #24
10054e68:	4604      	mov	r4, r0
10054e6a:	7800      	ldrb	r0, [r0, #0]
10054e6c:	2800      	cmp	r0, #0
10054e6e:	d014      	beq.n	10054e9a <GAT_att_srv_prep_wr_exc+0x36>
10054e70:	89a5      	ldrh	r5, [r4, #12]
10054e72:	68a0      	ldr	r0, [r4, #8]
10054e74:	88c1      	ldrh	r1, [r0, #6]
10054e76:	1f49      	subs	r1, r1, #5
10054e78:	42a9      	cmp	r1, r5
10054e7a:	d800      	bhi.n	10054e7e <GAT_att_srv_prep_wr_exc+0x1a>
10054e7c:	460d      	mov	r5, r1
10054e7e:	b2aa      	uxth	r2, r5
10054e80:	6923      	ldr	r3, [r4, #16]
10054e82:	68c0      	ldr	r0, [r0, #12]
10054e84:	8981      	ldrh	r1, [r0, #12]
10054e86:	1d49      	adds	r1, r1, #5
10054e88:	b289      	uxth	r1, r1
10054e8a:	f7fd f8b1 	bl	10051ff0 <ACL_pkt_write>
10054e8e:	1d68      	adds	r0, r5, #5
10054e90:	68a1      	ldr	r1, [r4, #8]
10054e92:	68c9      	ldr	r1, [r1, #12]
10054e94:	8048      	strh	r0, [r1, #2]
10054e96:	2000      	movs	r0, #0
10054e98:	e040      	b.n	10054f1c <GAT_att_srv_prep_wr_exc+0xb8>
10054e9a:	6860      	ldr	r0, [r4, #4]
10054e9c:	8981      	ldrh	r1, [r0, #12]
10054e9e:	1c49      	adds	r1, r1, #1
10054ea0:	b289      	uxth	r1, r1
10054ea2:	f7fd f88c 	bl	10051fbe <ACL_pkt_read_16b>
10054ea6:	4605      	mov	r5, r0
10054ea8:	2203      	movs	r2, #3
10054eaa:	ab05      	add	r3, sp, #20
10054eac:	4620      	mov	r0, r4
10054eae:	4629      	mov	r1, r5
10054eb0:	f000 f8d7 	bl	10055062 <GAT_att_srv_set_attr_value_check>
10054eb4:	2800      	cmp	r0, #0
10054eb6:	d008      	beq.n	10054eca <GAT_att_srv_prep_wr_exc+0x66>
10054eb8:	4602      	mov	r2, r0
10054eba:	68a0      	ldr	r0, [r4, #8]
10054ebc:	68c3      	ldr	r3, [r0, #12]
10054ebe:	2016      	movs	r0, #22
10054ec0:	4629      	mov	r1, r5
10054ec2:	f7ff fb29 	bl	10054518 <GAT_att_srv_write_err_packet>
10054ec6:	2086      	movs	r0, #134	@ 0x86
10054ec8:	e028      	b.n	10054f1c <GAT_att_srv_prep_wr_exc+0xb8>
10054eca:	6860      	ldr	r0, [r4, #4]
10054ecc:	8981      	ldrh	r1, [r0, #12]
10054ece:	1cc9      	adds	r1, r1, #3
10054ed0:	b289      	uxth	r1, r1
10054ed2:	f7fd f874 	bl	10051fbe <ACL_pkt_read_16b>
10054ed6:	4606      	mov	r6, r0
10054ed8:	6860      	ldr	r0, [r4, #4]
10054eda:	68a1      	ldr	r1, [r4, #8]
10054edc:	894a      	ldrh	r2, [r1, #10]
10054ede:	8909      	ldrh	r1, [r1, #8]
10054ee0:	8843      	ldrh	r3, [r0, #2]
10054ee2:	1f5b      	subs	r3, r3, #5
10054ee4:	b29b      	uxth	r3, r3
10054ee6:	9600      	str	r6, [sp, #0]
10054ee8:	9301      	str	r3, [sp, #4]
10054eea:	9002      	str	r0, [sp, #8]
10054eec:	200a      	movs	r0, #10
10054eee:	462b      	mov	r3, r5
10054ef0:	f00c f80c 	bl	10060f0c <aci_att_srv_prepare_write_req_event_push_noinline>
10054ef4:	2800      	cmp	r0, #0
10054ef6:	d111      	bne.n	10054f1c <GAT_att_srv_prep_wr_exc+0xb8>
10054ef8:	ab03      	add	r3, sp, #12
10054efa:	705d      	strb	r5, [r3, #1]
10054efc:	0a28      	lsrs	r0, r5, #8
10054efe:	7098      	strb	r0, [r3, #2]
10054f00:	70de      	strb	r6, [r3, #3]
10054f02:	2017      	movs	r0, #23
10054f04:	7018      	strb	r0, [r3, #0]
10054f06:	0a30      	lsrs	r0, r6, #8
10054f08:	7118      	strb	r0, [r3, #4]
10054f0a:	68a0      	ldr	r0, [r4, #8]
10054f0c:	68c0      	ldr	r0, [r0, #12]
10054f0e:	8981      	ldrh	r1, [r0, #12]
10054f10:	2205      	movs	r2, #5
10054f12:	f7fd f86d 	bl	10051ff0 <ACL_pkt_write>
10054f16:	2000      	movs	r0, #0
10054f18:	6060      	str	r0, [r4, #4]
10054f1a:	2084      	movs	r0, #132	@ 0x84
10054f1c:	b006      	add	sp, #24
10054f1e:	bd70      	pop	{r4, r5, r6, pc}

10054f20 <GAT_att_srv_exec_wr_exc>:
10054f20:	b510      	push	{r4, lr}
10054f22:	4604      	mov	r4, r0
10054f24:	7800      	ldrb	r0, [r0, #0]
10054f26:	2800      	cmp	r0, #0
10054f28:	d001      	beq.n	10054f2e <GAT_att_srv_exec_wr_exc+0xe>
10054f2a:	2000      	movs	r0, #0
10054f2c:	bd10      	pop	{r4, pc}
10054f2e:	6860      	ldr	r0, [r4, #4]
10054f30:	8981      	ldrh	r1, [r0, #12]
10054f32:	1c49      	adds	r1, r1, #1
10054f34:	b289      	uxth	r1, r1
10054f36:	f000 f884 	bl	10055042 <ACL_pkt_read_8b>
10054f3a:	4603      	mov	r3, r0
10054f3c:	68a0      	ldr	r0, [r4, #8]
10054f3e:	8942      	ldrh	r2, [r0, #10]
10054f40:	8901      	ldrh	r1, [r0, #8]
10054f42:	2002      	movs	r0, #2
10054f44:	f00c f810 	bl	10060f68 <aci_att_srv_exec_write_req_event_push_noinline>
10054f48:	2800      	cmp	r0, #0
10054f4a:	d000      	beq.n	10054f4e <GAT_att_srv_exec_wr_exc+0x2e>
10054f4c:	bd10      	pop	{r4, pc}
10054f4e:	68a0      	ldr	r0, [r4, #8]
10054f50:	68c0      	ldr	r0, [r0, #12]
10054f52:	8981      	ldrh	r1, [r0, #12]
10054f54:	2219      	movs	r2, #25
10054f56:	f7ff fa59 	bl	1005440c <ACL_pkt_write_8b>
10054f5a:	68a0      	ldr	r0, [r4, #8]
10054f5c:	68c0      	ldr	r0, [r0, #12]
10054f5e:	2101      	movs	r1, #1
10054f60:	8041      	strh	r1, [r0, #2]
10054f62:	2084      	movs	r0, #132	@ 0x84
10054f64:	bd10      	pop	{r4, pc}

10054f66 <GAT_att_srv_confirm_exc>:
10054f66:	b5b0      	push	{r4, r5, r7, lr}
10054f68:	4605      	mov	r5, r0
10054f6a:	6880      	ldr	r0, [r0, #8]
10054f6c:	8942      	ldrh	r2, [r0, #10]
10054f6e:	8901      	ldrh	r1, [r0, #8]
10054f70:	2042      	movs	r0, #66	@ 0x42
10054f72:	f00b fcf7 	bl	10060964 <aci_gatt_srv_confirmation_event_push_noinline>
10054f76:	4604      	mov	r4, r0
10054f78:	2800      	cmp	r0, #0
10054f7a:	d110      	bne.n	10054f9e <GAT_att_srv_confirm_exc+0x38>
10054f7c:	68a8      	ldr	r0, [r5, #8]
10054f7e:	8942      	ldrh	r2, [r0, #10]
10054f80:	8901      	ldrh	r1, [r0, #8]
10054f82:	2001      	movs	r0, #1
10054f84:	f7fe fef2 	bl	10053d6c <GAT_att_cmn_stop_timer>
10054f88:	68a8      	ldr	r0, [r5, #8]
10054f8a:	8881      	ldrh	r1, [r0, #4]
10054f8c:	064a      	lsls	r2, r1, #25
10054f8e:	d503      	bpl.n	10054f98 <GAT_att_srv_confirm_exc+0x32>
10054f90:	f000 fe6c 	bl	10055c6c <GAT_srv_set_change_aware>
10054f94:	68a8      	ldr	r0, [r5, #8]
10054f96:	8881      	ldrh	r1, [r0, #4]
10054f98:	2202      	movs	r2, #2
10054f9a:	4391      	bics	r1, r2
10054f9c:	8081      	strh	r1, [r0, #4]
10054f9e:	4620      	mov	r0, r4
10054fa0:	bdb0      	pop	{r4, r5, r7, pc}

10054fa2 <GAT_att_srv_get_handle_range>:
10054fa2:	b570      	push	{r4, r5, r6, lr}
10054fa4:	4614      	mov	r4, r2
10054fa6:	460d      	mov	r5, r1
10054fa8:	4606      	mov	r6, r0
10054faa:	8980      	ldrh	r0, [r0, #12]
10054fac:	1c40      	adds	r0, r0, #1
10054fae:	b281      	uxth	r1, r0
10054fb0:	4630      	mov	r0, r6
10054fb2:	f7fd f804 	bl	10051fbe <ACL_pkt_read_16b>
10054fb6:	8028      	strh	r0, [r5, #0]
10054fb8:	89b0      	ldrh	r0, [r6, #12]
10054fba:	1cc0      	adds	r0, r0, #3
10054fbc:	b281      	uxth	r1, r0
10054fbe:	4630      	mov	r0, r6
10054fc0:	f7fc fffd 	bl	10051fbe <ACL_pkt_read_16b>
10054fc4:	8020      	strh	r0, [r4, #0]
10054fc6:	bd70      	pop	{r4, r5, r6, pc}

10054fc8 <GAT_att_srv_value_read>:
10054fc8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10054fca:	461f      	mov	r7, r3
10054fcc:	4606      	mov	r6, r0
10054fce:	9d08      	ldr	r5, [sp, #32]
10054fd0:	2400      	movs	r4, #0
10054fd2:	702c      	strb	r4, [r5, #0]
10054fd4:	7800      	ldrb	r0, [r0, #0]
10054fd6:	2801      	cmp	r0, #1
10054fd8:	d107      	bne.n	10054fea <GAT_att_srv_value_read+0x22>
10054fda:	6930      	ldr	r0, [r6, #16]
10054fdc:	2800      	cmp	r0, #0
10054fde:	d01f      	beq.n	10055020 <GAT_att_srv_value_read+0x58>
10054fe0:	360c      	adds	r6, #12
10054fe2:	603e      	str	r6, [r7, #0]
10054fe4:	2000      	movs	r0, #0
10054fe6:	7028      	strb	r0, [r5, #0]
10054fe8:	e029      	b.n	1005503e <GAT_att_srv_value_read+0x76>
10054fea:	9202      	str	r2, [sp, #8]
10054fec:	68b0      	ldr	r0, [r6, #8]
10054fee:	8900      	ldrh	r0, [r0, #8]
10054ff0:	9101      	str	r1, [sp, #4]
10054ff2:	463a      	mov	r2, r7
10054ff4:	462b      	mov	r3, r5
10054ff6:	f000 fb66 	bl	100556c6 <GAT_srv_attr_value_read>
10054ffa:	2800      	cmp	r0, #0
10054ffc:	d012      	beq.n	10055024 <GAT_att_srv_value_read+0x5c>
10054ffe:	2884      	cmp	r0, #132	@ 0x84
10055000:	d11d      	bne.n	1005503e <GAT_att_srv_value_read+0x76>
10055002:	9801      	ldr	r0, [sp, #4]
10055004:	8843      	ldrh	r3, [r0, #2]
10055006:	68b0      	ldr	r0, [r6, #8]
10055008:	8942      	ldrh	r2, [r0, #10]
1005500a:	8901      	ldrh	r1, [r0, #8]
1005500c:	9802      	ldr	r0, [sp, #8]
1005500e:	9000      	str	r0, [sp, #0]
10055010:	2002      	movs	r0, #2
10055012:	f00b fcd9 	bl	100609c8 <aci_gatt_srv_read_event_push_noinline>
10055016:	2800      	cmp	r0, #0
10055018:	d111      	bne.n	1005503e <GAT_att_srv_value_read+0x76>
1005501a:	207b      	movs	r0, #123	@ 0x7b
1005501c:	43c0      	mvns	r0, r0
1005501e:	e00e      	b.n	1005503e <GAT_att_srv_value_read+0x76>
10055020:	200e      	movs	r0, #14
10055022:	e005      	b.n	10055030 <GAT_att_srv_value_read+0x68>
10055024:	6838      	ldr	r0, [r7, #0]
10055026:	8801      	ldrh	r1, [r0, #0]
10055028:	9a02      	ldr	r2, [sp, #8]
1005502a:	4291      	cmp	r1, r2
1005502c:	d203      	bcs.n	10055036 <GAT_att_srv_value_read+0x6e>
1005502e:	2007      	movs	r0, #7
10055030:	7028      	strb	r0, [r5, #0]
10055032:	2086      	movs	r0, #134	@ 0x86
10055034:	e003      	b.n	1005503e <GAT_att_srv_value_read+0x76>
10055036:	6841      	ldr	r1, [r0, #4]
10055038:	1889      	adds	r1, r1, r2
1005503a:	6041      	str	r1, [r0, #4]
1005503c:	4620      	mov	r0, r4
1005503e:	b2c0      	uxtb	r0, r0
10055040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055042 <ACL_pkt_read_8b>:
10055042:	b51c      	push	{r2, r3, r4, lr}
10055044:	291f      	cmp	r1, #31
10055046:	d803      	bhi.n	10055050 <ACL_pkt_read_8b+0xe>
10055048:	aa01      	add	r2, sp, #4
1005504a:	8011      	strh	r1, [r2, #0]
1005504c:	6840      	ldr	r0, [r0, #4]
1005504e:	e005      	b.n	1005505c <ACL_pkt_read_8b+0x1a>
10055050:	6840      	ldr	r0, [r0, #4]
10055052:	ac01      	add	r4, sp, #4
10055054:	4622      	mov	r2, r4
10055056:	f008 ff54 	bl	1005df02 <Mem_Buff_get_buff_off>
1005505a:	8821      	ldrh	r1, [r4, #0]
1005505c:	1840      	adds	r0, r0, r1
1005505e:	7900      	ldrb	r0, [r0, #4]
10055060:	bd1c      	pop	{r2, r3, r4, pc}

10055062 <GAT_att_srv_set_attr_value_check>:
10055062:	b5f0      	push	{r4, r5, r6, r7, lr}
10055064:	b085      	sub	sp, #20
10055066:	461e      	mov	r6, r3
10055068:	4614      	mov	r4, r2
1005506a:	460f      	mov	r7, r1
1005506c:	4605      	mov	r5, r0
1005506e:	a801      	add	r0, sp, #4
10055070:	8101      	strh	r1, [r0, #8]
10055072:	7102      	strb	r2, [r0, #4]
10055074:	68a9      	ldr	r1, [r5, #8]
10055076:	9101      	str	r1, [sp, #4]
10055078:	f000 fe06 	bl	10055c88 <GAT_srv_check_change_aware>
1005507c:	2886      	cmp	r0, #134	@ 0x86
1005507e:	d101      	bne.n	10055084 <GAT_att_srv_set_attr_value_check+0x22>
10055080:	2012      	movs	r0, #18
10055082:	e00c      	b.n	1005509e <GAT_att_srv_set_attr_value_check+0x3c>
10055084:	4638      	mov	r0, r7
10055086:	f00c fd03 	bl	10061a90 <GAT_att_db_find_by_handle>
1005508a:	6030      	str	r0, [r6, #0]
1005508c:	2800      	cmp	r0, #0
1005508e:	d005      	beq.n	1005509c <GAT_att_srv_set_attr_value_check+0x3a>
10055090:	68a9      	ldr	r1, [r5, #8]
10055092:	8909      	ldrh	r1, [r1, #8]
10055094:	4622      	mov	r2, r4
10055096:	f000 fb2f 	bl	100556f8 <GAT_srv_check_perms>
1005509a:	e000      	b.n	1005509e <GAT_att_srv_set_attr_value_check+0x3c>
1005509c:	2001      	movs	r0, #1
1005509e:	b005      	add	sp, #20
100550a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100550a4 <GAT_srv_init>:
100550a4:	b580      	push	{r7, lr}
100550a6:	4806      	ldr	r0, [pc, #24]	@ (100550c0 <__arm_cp.0_0>)
100550a8:	8900      	ldrh	r0, [r0, #8]
100550aa:	3016      	adds	r0, #22
100550ac:	b280      	uxth	r0, r0
100550ae:	f00c fc8b 	bl	100619c8 <GAT_att_db_init>
100550b2:	4804      	ldr	r0, [pc, #16]	@ (100550c4 <__arm_cp.0_1>)
100550b4:	6800      	ldr	r0, [r0, #0]
100550b6:	215c      	movs	r1, #92	@ 0x5c
100550b8:	2201      	movs	r2, #1
100550ba:	5442      	strb	r2, [r0, r1]
100550bc:	bd80      	pop	{r7, pc}
100550be:	46c0      	nop			@ (mov r8, r8)

100550c0 <__arm_cp.0_0>:
100550c0:	20000f34 	.word	0x20000f34

100550c4 <__arm_cp.0_1>:
100550c4:	20000ed8 	.word	0x20000ed8

100550c8 <GAT_srv_connection>:
100550c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100550ca:	b0a1      	sub	sp, #132	@ 0x84
100550cc:	4604      	mov	r4, r0
100550ce:	f000 f89b 	bl	10055208 <GAT_srv_is_bonded>
100550d2:	2801      	cmp	r0, #1
100550d4:	d114      	bne.n	10055100 <GAT_srv_connection+0x38>
100550d6:	a807      	add	r0, sp, #28
100550d8:	4945      	ldr	r1, [pc, #276]	@ (100551f0 <__arm_cp.1_0>)
100550da:	2514      	movs	r5, #20
100550dc:	462a      	mov	r2, r5
100550de:	f00f fe26 	bl	10064d2e <__aeabi_memcpy>
100550e2:	a802      	add	r0, sp, #8
100550e4:	4943      	ldr	r1, [pc, #268]	@ (100551f4 <__arm_cp.1_1>)
100550e6:	462a      	mov	r2, r5
100550e8:	f00f fe21 	bl	10064d2e <__aeabi_memcpy>
100550ec:	2044      	movs	r0, #68	@ 0x44
100550ee:	900f      	str	r0, [sp, #60]	@ 0x3c
100550f0:	2101      	movs	r1, #1
100550f2:	aa0d      	add	r2, sp, #52	@ 0x34
100550f4:	ab0c      	add	r3, sp, #48	@ 0x30
100550f6:	4620      	mov	r0, r4
100550f8:	f00a fa87 	bl	1005f60a <smp_sap_get_remote_address_check_addr_type>
100550fc:	2800      	cmp	r0, #0
100550fe:	d001      	beq.n	10055104 <GAT_srv_connection+0x3c>
10055100:	b021      	add	sp, #132	@ 0x84
10055102:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055104:	a80c      	add	r0, sp, #48	@ 0x30
10055106:	7801      	ldrb	r1, [r0, #0]
10055108:	a80d      	add	r0, sp, #52	@ 0x34
1005510a:	aa0f      	add	r2, sp, #60	@ 0x3c
1005510c:	ab10      	add	r3, sp, #64	@ 0x40
1005510e:	f009 fb1a 	bl	1005e746 <SDB_sap_read_peer_bonded_gatt_client_data>
10055112:	2800      	cmp	r0, #0
10055114:	d1f4      	bne.n	10055100 <GAT_srv_connection+0x38>
10055116:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10055118:	2844      	cmp	r0, #68	@ 0x44
1005511a:	d8f1      	bhi.n	10055100 <GAT_srv_connection+0x38>
1005511c:	2001      	movs	r0, #1
1005511e:	4d36      	ldr	r5, [pc, #216]	@ (100551f8 <__arm_cp.1_2>)
10055120:	aa02      	add	r2, sp, #8
10055122:	4629      	mov	r1, r5
10055124:	f000 fe0c 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
10055128:	2800      	cmp	r0, #0
1005512a:	d010      	beq.n	1005514e <GAT_srv_connection+0x86>
1005512c:	4606      	mov	r6, r0
1005512e:	4620      	mov	r0, r4
10055130:	f7fe fe54 	bl	10053ddc <GAT_att_cmn_get_conn_index>
10055134:	a910      	add	r1, sp, #64	@ 0x40
10055136:	7c0a      	ldrb	r2, [r1, #16]
10055138:	4930      	ldr	r1, [pc, #192]	@ (100551fc <__arm_cp.1_3>)
1005513a:	7ac9      	ldrb	r1, [r1, #11]
1005513c:	6873      	ldr	r3, [r6, #4]
1005513e:	6a1b      	ldr	r3, [r3, #32]
10055140:	689b      	ldr	r3, [r3, #8]
10055142:	9300      	str	r3, [sp, #0]
10055144:	0849      	lsrs	r1, r1, #1
10055146:	1c4b      	adds	r3, r1, #1
10055148:	2104      	movs	r1, #4
1005514a:	f000 fd08 	bl	10055b5e <GAT_srv_set_zip_val>
1005514e:	482c      	ldr	r0, [pc, #176]	@ (10055200 <__arm_cp.1_4>)
10055150:	6801      	ldr	r1, [r0, #0]
10055152:	3183      	adds	r1, #131	@ 0x83
10055154:	a810      	add	r0, sp, #64	@ 0x40
10055156:	2210      	movs	r2, #16
10055158:	f7fa fb94 	bl	1004f884 <BLEPLAT_MemCmp>
1005515c:	2800      	cmp	r0, #0
1005515e:	d01f      	beq.n	100551a0 <GAT_srv_connection+0xd8>
10055160:	2001      	movs	r0, #1
10055162:	aa07      	add	r2, sp, #28
10055164:	4629      	mov	r1, r5
10055166:	f000 fdeb 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
1005516a:	2800      	cmp	r0, #0
1005516c:	d0c8      	beq.n	10055100 <GAT_srv_connection+0x38>
1005516e:	f000 fe3f 	bl	10055df0 <GAT_srv_get_cccd_attr_p>
10055172:	2800      	cmp	r0, #0
10055174:	d0c4      	beq.n	10055100 <GAT_srv_connection+0x38>
10055176:	4605      	mov	r5, r0
10055178:	2104      	movs	r1, #4
1005517a:	4620      	mov	r0, r4
1005517c:	f7fe fd84 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10055180:	8881      	ldrh	r1, [r0, #4]
10055182:	2240      	movs	r2, #64	@ 0x40
10055184:	430a      	orrs	r2, r1
10055186:	8082      	strh	r2, [r0, #4]
10055188:	a810      	add	r0, sp, #64	@ 0x40
1005518a:	7c42      	ldrb	r2, [r0, #17]
1005518c:	4620      	mov	r0, r4
1005518e:	4629      	mov	r1, r5
10055190:	f000 fd26 	bl	10055be0 <GAT_srv_set_cccd_val>
10055194:	200b      	movs	r0, #11
10055196:	f00a fbeb 	bl	1005f970 <tsk_notify_idx>
1005519a:	f7f9 fd92 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005519e:	e7af      	b.n	10055100 <GAT_srv_connection+0x38>
100551a0:	2001      	movs	r0, #1
100551a2:	f00c fc9d 	bl	10061ae0 <GAT_att_db_find_from_handle>
100551a6:	4606      	mov	r6, r0
100551a8:	ad10      	add	r5, sp, #64	@ 0x40
100551aa:	3512      	adds	r5, #18
100551ac:	2700      	movs	r7, #0
100551ae:	2e00      	cmp	r6, #0
100551b0:	d0a6      	beq.n	10055100 <GAT_srv_connection+0x38>
100551b2:	b2b8      	uxth	r0, r7
100551b4:	2863      	cmp	r0, #99	@ 0x63
100551b6:	d8a3      	bhi.n	10055100 <GAT_srv_connection+0x38>
100551b8:	7831      	ldrb	r1, [r6, #0]
100551ba:	2904      	cmp	r1, #4
100551bc:	d112      	bne.n	100551e4 <GAT_srv_connection+0x11c>
100551be:	6871      	ldr	r1, [r6, #4]
100551c0:	7d0a      	ldrb	r2, [r1, #20]
100551c2:	2a10      	cmp	r2, #16
100551c4:	d10e      	bne.n	100551e4 <GAT_srv_connection+0x11c>
100551c6:	8a09      	ldrh	r1, [r1, #16]
100551c8:	4a0e      	ldr	r2, [pc, #56]	@ (10055204 <__arm_cp.1_5>)
100551ca:	4291      	cmp	r1, r2
100551cc:	d10a      	bne.n	100551e4 <GAT_srv_connection+0x11c>
100551ce:	2102      	movs	r1, #2
100551d0:	2232      	movs	r2, #50	@ 0x32
100551d2:	462b      	mov	r3, r5
100551d4:	f000 fcb0 	bl	10055b38 <GAT_srv_get_zip_val>
100551d8:	4602      	mov	r2, r0
100551da:	4620      	mov	r0, r4
100551dc:	4631      	mov	r1, r6
100551de:	f000 fcff 	bl	10055be0 <GAT_srv_set_cccd_val>
100551e2:	1c7f      	adds	r7, r7, #1
100551e4:	4630      	mov	r0, r6
100551e6:	f00c fcdd 	bl	10061ba4 <GAT_att_db_get_next>
100551ea:	4606      	mov	r6, r0
100551ec:	e7df      	b.n	100551ae <GAT_srv_connection+0xe6>
100551ee:	46c0      	nop			@ (mov r8, r8)

100551f0 <__arm_cp.1_0>:
100551f0:	10066078 	.word	0x10066078

100551f4 <__arm_cp.1_1>:
100551f4:	1006608c 	.word	0x1006608c

100551f8 <__arm_cp.1_2>:
100551f8:	0000ffff 	.word	0x0000ffff

100551fc <__arm_cp.1_3>:
100551fc:	20000f34 	.word	0x20000f34

10055200 <__arm_cp.1_4>:
10055200:	20000ed8 	.word	0x20000ed8

10055204 <__arm_cp.1_5>:
10055204:	00002902 	.word	0x00002902

10055208 <GAT_srv_is_bonded>:
10055208:	b580      	push	{r7, lr}
1005520a:	f00a fa34 	bl	1005f676 <smp_sap_check_is_peer_device_bonded>
1005520e:	4241      	negs	r1, r0
10055210:	4148      	adcs	r0, r1
10055212:	bd80      	pop	{r7, pc}

10055214 <GAT_srv_bearer_close>:
10055214:	b5f0      	push	{r4, r5, r6, r7, lr}
10055216:	b0a1      	sub	sp, #132	@ 0x84
10055218:	2904      	cmp	r1, #4
1005521a:	d000      	beq.n	1005521e <GAT_srv_bearer_close+0xa>
1005521c:	e0de      	b.n	100553dc <GAT_srv_bearer_close+0x1c8>
1005521e:	4607      	mov	r7, r0
10055220:	f7ff fff2 	bl	10055208 <GAT_srv_is_bonded>
10055224:	4c6e      	ldr	r4, [pc, #440]	@ (100553e0 <__arm_cp.3_0>)
10055226:	4e6f      	ldr	r6, [pc, #444]	@ (100553e4 <__arm_cp.3_1>)
10055228:	2801      	cmp	r0, #1
1005522a:	d000      	beq.n	1005522e <GAT_srv_bearer_close+0x1a>
1005522c:	e0a0      	b.n	10055370 <GAT_srv_bearer_close+0x15c>
1005522e:	ad0b      	add	r5, sp, #44	@ 0x2c
10055230:	496d      	ldr	r1, [pc, #436]	@ (100553e8 <__arm_cp.3_2>)
10055232:	2214      	movs	r2, #20
10055234:	4628      	mov	r0, r5
10055236:	f00f fd7a 	bl	10064d2e <__aeabi_memcpy>
1005523a:	a810      	add	r0, sp, #64	@ 0x40
1005523c:	4634      	mov	r4, r6
1005523e:	2600      	movs	r6, #0
10055240:	2244      	movs	r2, #68	@ 0x44
10055242:	4631      	mov	r1, r6
10055244:	f7fa fb0e 	bl	1004f864 <BLEPLAT_MemSet>
10055248:	2001      	movs	r0, #1
1005524a:	4621      	mov	r1, r4
1005524c:	462a      	mov	r2, r5
1005524e:	f000 fd77 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
10055252:	2800      	cmp	r0, #0
10055254:	d00f      	beq.n	10055276 <GAT_srv_bearer_close+0x62>
10055256:	4604      	mov	r4, r0
10055258:	4638      	mov	r0, r7
1005525a:	f7fe fdbf 	bl	10053ddc <GAT_att_cmn_get_conn_index>
1005525e:	6861      	ldr	r1, [r4, #4]
10055260:	6a09      	ldr	r1, [r1, #32]
10055262:	688b      	ldr	r3, [r1, #8]
10055264:	4961      	ldr	r1, [pc, #388]	@ (100553ec <__arm_cp.3_3>)
10055266:	7ac9      	ldrb	r1, [r1, #11]
10055268:	0849      	lsrs	r1, r1, #1
1005526a:	1c4a      	adds	r2, r1, #1
1005526c:	2104      	movs	r1, #4
1005526e:	f000 fc63 	bl	10055b38 <GAT_srv_get_zip_val>
10055272:	a910      	add	r1, sp, #64	@ 0x40
10055274:	7408      	strb	r0, [r1, #16]
10055276:	2104      	movs	r1, #4
10055278:	9704      	str	r7, [sp, #16]
1005527a:	4638      	mov	r0, r7
1005527c:	f7fe fd04 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10055280:	a910      	add	r1, sp, #64	@ 0x40
10055282:	7c09      	ldrb	r1, [r1, #16]
10055284:	2901      	cmp	r1, #1
10055286:	d103      	bne.n	10055290 <GAT_srv_bearer_close+0x7c>
10055288:	8880      	ldrh	r0, [r0, #4]
1005528a:	0600      	lsls	r0, r0, #24
1005528c:	0f80      	lsrs	r0, r0, #30
1005528e:	d106      	bne.n	1005529e <GAT_srv_bearer_close+0x8a>
10055290:	4857      	ldr	r0, [pc, #348]	@ (100553f0 <__arm_cp.3_4>)
10055292:	6801      	ldr	r1, [r0, #0]
10055294:	3183      	adds	r1, #131	@ 0x83
10055296:	a810      	add	r0, sp, #64	@ 0x40
10055298:	2210      	movs	r2, #16
1005529a:	f7fa fad3 	bl	1004f844 <BLEPLAT_MemCpy>
1005529e:	2001      	movs	r0, #1
100552a0:	9003      	str	r0, [sp, #12]
100552a2:	f00c fc1d 	bl	10061ae0 <GAT_att_db_find_from_handle>
100552a6:	4605      	mov	r5, r0
100552a8:	a810      	add	r0, sp, #64	@ 0x40
100552aa:	3012      	adds	r0, #18
100552ac:	9002      	str	r0, [sp, #8]
100552ae:	9605      	str	r6, [sp, #20]
100552b0:	4c4b      	ldr	r4, [pc, #300]	@ (100553e0 <__arm_cp.3_0>)
100552b2:	2d00      	cmp	r5, #0
100552b4:	d034      	beq.n	10055320 <GAT_srv_bearer_close+0x10c>
100552b6:	b2b7      	uxth	r7, r6
100552b8:	2f63      	cmp	r7, #99	@ 0x63
100552ba:	d831      	bhi.n	10055320 <GAT_srv_bearer_close+0x10c>
100552bc:	7828      	ldrb	r0, [r5, #0]
100552be:	2804      	cmp	r0, #4
100552c0:	d00b      	beq.n	100552da <GAT_srv_bearer_close+0xc6>
100552c2:	2802      	cmp	r0, #2
100552c4:	d127      	bne.n	10055316 <GAT_srv_bearer_close+0x102>
100552c6:	6868      	ldr	r0, [r5, #4]
100552c8:	7d01      	ldrb	r1, [r0, #20]
100552ca:	2910      	cmp	r1, #16
100552cc:	d121      	bne.n	10055312 <GAT_srv_bearer_close+0xfe>
100552ce:	8a00      	ldrh	r0, [r0, #16]
100552d0:	4949      	ldr	r1, [pc, #292]	@ (100553f8 <__arm_cp.3_6>)
100552d2:	4288      	cmp	r0, r1
100552d4:	d11d      	bne.n	10055312 <GAT_srv_bearer_close+0xfe>
100552d6:	9803      	ldr	r0, [sp, #12]
100552d8:	e01c      	b.n	10055314 <GAT_srv_bearer_close+0x100>
100552da:	6868      	ldr	r0, [r5, #4]
100552dc:	7d01      	ldrb	r1, [r0, #20]
100552de:	2910      	cmp	r1, #16
100552e0:	d119      	bne.n	10055316 <GAT_srv_bearer_close+0x102>
100552e2:	8a00      	ldrh	r0, [r0, #16]
100552e4:	42a0      	cmp	r0, r4
100552e6:	d116      	bne.n	10055316 <GAT_srv_bearer_close+0x102>
100552e8:	9804      	ldr	r0, [sp, #16]
100552ea:	4629      	mov	r1, r5
100552ec:	f000 fdb0 	bl	10055e50 <GAT_srv_get_cccd_val>
100552f0:	4604      	mov	r4, r0
100552f2:	9802      	ldr	r0, [sp, #8]
100552f4:	9000      	str	r0, [sp, #0]
100552f6:	b2e2      	uxtb	r2, r4
100552f8:	2102      	movs	r1, #2
100552fa:	2332      	movs	r3, #50	@ 0x32
100552fc:	4638      	mov	r0, r7
100552fe:	f000 fc2e 	bl	10055b5e <GAT_srv_set_zip_val>
10055302:	9805      	ldr	r0, [sp, #20]
10055304:	2801      	cmp	r0, #1
10055306:	d101      	bne.n	1005530c <GAT_srv_bearer_close+0xf8>
10055308:	a810      	add	r0, sp, #64	@ 0x40
1005530a:	7444      	strb	r4, [r0, #17]
1005530c:	1c76      	adds	r6, r6, #1
1005530e:	4c34      	ldr	r4, [pc, #208]	@ (100553e0 <__arm_cp.3_0>)
10055310:	e001      	b.n	10055316 <GAT_srv_bearer_close+0x102>
10055312:	2000      	movs	r0, #0
10055314:	9005      	str	r0, [sp, #20]
10055316:	4628      	mov	r0, r5
10055318:	f00c fc44 	bl	10061ba4 <GAT_att_db_get_next>
1005531c:	4605      	mov	r5, r0
1005531e:	e7c8      	b.n	100552b2 <GAT_srv_bearer_close+0x9e>
10055320:	2101      	movs	r1, #1
10055322:	aa09      	add	r2, sp, #36	@ 0x24
10055324:	ab08      	add	r3, sp, #32
10055326:	9f04      	ldr	r7, [sp, #16]
10055328:	4638      	mov	r0, r7
1005532a:	f00a f96e 	bl	1005f60a <smp_sap_get_remote_address_check_addr_type>
1005532e:	2800      	cmp	r0, #0
10055330:	d11c      	bne.n	1005536c <GAT_srv_bearer_close+0x158>
10055332:	b2b0      	uxth	r0, r6
10055334:	0040      	lsls	r0, r0, #1
10055336:	492f      	ldr	r1, [pc, #188]	@ (100553f4 <__arm_cp.3_5>)
10055338:	1840      	adds	r0, r0, r1
1005533a:	0880      	lsrs	r0, r0, #2
1005533c:	3013      	adds	r0, #19
1005533e:	b282      	uxth	r2, r0
10055340:	a808      	add	r0, sp, #32
10055342:	7801      	ldrb	r1, [r0, #0]
10055344:	a809      	add	r0, sp, #36	@ 0x24
10055346:	ab10      	add	r3, sp, #64	@ 0x40
10055348:	f009 f9cb 	bl	1005e6e2 <SDB_sap_write_peer_bonded_gatt_client_data>
1005534c:	2800      	cmp	r0, #0
1005534e:	d00d      	beq.n	1005536c <GAT_srv_bearer_close+0x158>
10055350:	4604      	mov	r4, r0
10055352:	ad06      	add	r5, sp, #24
10055354:	a909      	add	r1, sp, #36	@ 0x24
10055356:	2206      	movs	r2, #6
10055358:	4628      	mov	r0, r5
1005535a:	f7fa fa73 	bl	1004f844 <BLEPLAT_MemCpy>
1005535e:	71ac      	strb	r4, [r5, #6]
10055360:	2042      	movs	r0, #66	@ 0x42
10055362:	2104      	movs	r1, #4
10055364:	2207      	movs	r2, #7
10055366:	462b      	mov	r3, r5
10055368:	f00b fef8 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
1005536c:	4e1d      	ldr	r6, [pc, #116]	@ (100553e4 <__arm_cp.3_1>)
1005536e:	4c1c      	ldr	r4, [pc, #112]	@ (100553e0 <__arm_cp.3_0>)
10055370:	2001      	movs	r0, #1
10055372:	f00c fbb5 	bl	10061ae0 <GAT_att_db_find_from_handle>
10055376:	4605      	mov	r5, r0
10055378:	2800      	cmp	r0, #0
1005537a:	d012      	beq.n	100553a2 <GAT_srv_bearer_close+0x18e>
1005537c:	7828      	ldrb	r0, [r5, #0]
1005537e:	2804      	cmp	r0, #4
10055380:	d10b      	bne.n	1005539a <GAT_srv_bearer_close+0x186>
10055382:	6868      	ldr	r0, [r5, #4]
10055384:	7d01      	ldrb	r1, [r0, #20]
10055386:	2910      	cmp	r1, #16
10055388:	d107      	bne.n	1005539a <GAT_srv_bearer_close+0x186>
1005538a:	8a00      	ldrh	r0, [r0, #16]
1005538c:	42a0      	cmp	r0, r4
1005538e:	d104      	bne.n	1005539a <GAT_srv_bearer_close+0x186>
10055390:	2200      	movs	r2, #0
10055392:	4638      	mov	r0, r7
10055394:	4629      	mov	r1, r5
10055396:	f000 fc23 	bl	10055be0 <GAT_srv_set_cccd_val>
1005539a:	4628      	mov	r0, r5
1005539c:	f00c fc02 	bl	10061ba4 <GAT_att_db_get_next>
100553a0:	e7e9      	b.n	10055376 <GAT_srv_bearer_close+0x162>
100553a2:	ac10      	add	r4, sp, #64	@ 0x40
100553a4:	4910      	ldr	r1, [pc, #64]	@ (100553e8 <__arm_cp.3_2>)
100553a6:	2214      	movs	r2, #20
100553a8:	4620      	mov	r0, r4
100553aa:	f00f fcc0 	bl	10064d2e <__aeabi_memcpy>
100553ae:	2001      	movs	r0, #1
100553b0:	4631      	mov	r1, r6
100553b2:	4622      	mov	r2, r4
100553b4:	f000 fcc4 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
100553b8:	2800      	cmp	r0, #0
100553ba:	d00f      	beq.n	100553dc <GAT_srv_bearer_close+0x1c8>
100553bc:	4604      	mov	r4, r0
100553be:	4638      	mov	r0, r7
100553c0:	f7fe fd0c 	bl	10053ddc <GAT_att_cmn_get_conn_index>
100553c4:	4909      	ldr	r1, [pc, #36]	@ (100553ec <__arm_cp.3_3>)
100553c6:	7ac9      	ldrb	r1, [r1, #11]
100553c8:	6862      	ldr	r2, [r4, #4]
100553ca:	6a12      	ldr	r2, [r2, #32]
100553cc:	6892      	ldr	r2, [r2, #8]
100553ce:	9200      	str	r2, [sp, #0]
100553d0:	0849      	lsrs	r1, r1, #1
100553d2:	1c4b      	adds	r3, r1, #1
100553d4:	2104      	movs	r1, #4
100553d6:	2200      	movs	r2, #0
100553d8:	f000 fbc1 	bl	10055b5e <GAT_srv_set_zip_val>
100553dc:	b021      	add	sp, #132	@ 0x84
100553de:	bdf0      	pop	{r4, r5, r6, r7, pc}

100553e0 <__arm_cp.3_0>:
100553e0:	00002902 	.word	0x00002902

100553e4 <__arm_cp.3_1>:
100553e4:	0000ffff 	.word	0x0000ffff

100553e8 <__arm_cp.3_2>:
100553e8:	1006608c 	.word	0x1006608c

100553ec <__arm_cp.3_3>:
100553ec:	20000f34 	.word	0x20000f34

100553f0 <__arm_cp.3_4>:
100553f0:	20000ed8 	.word	0x20000ed8

100553f4 <__arm_cp.3_5>:
100553f4:	0003fffe 	.word	0x0003fffe

100553f8 <__arm_cp.3_6>:
100553f8:	00002a05 	.word	0x00002a05

100553fc <GAT_srv_db_hash_tsk>:
100553fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100553fe:	b0d3      	sub	sp, #332	@ 0x14c
10055400:	2500      	movs	r5, #0
10055402:	950c      	str	r5, [sp, #48]	@ 0x30
10055404:	950b      	str	r5, [sp, #44]	@ 0x2c
10055406:	950a      	str	r5, [sp, #40]	@ 0x28
10055408:	9509      	str	r5, [sp, #36]	@ 0x24
1005540a:	2041      	movs	r0, #65	@ 0x41
1005540c:	0082      	lsls	r2, r0, #2
1005540e:	ac0d      	add	r4, sp, #52	@ 0x34
10055410:	4620      	mov	r0, r4
10055412:	4629      	mov	r1, r5
10055414:	f7fa fa26 	bl	1004f864 <BLEPLAT_MemSet>
10055418:	7125      	strb	r5, [r4, #4]
1005541a:	2010      	movs	r0, #16
1005541c:	9044      	str	r0, [sp, #272]	@ 0x110
1005541e:	9016      	str	r0, [sp, #88]	@ 0x58
10055420:	a809      	add	r0, sp, #36	@ 0x24
10055422:	900f      	str	r0, [sp, #60]	@ 0x3c
10055424:	4620      	mov	r0, r4
10055426:	f7fa fa6a 	bl	1004f8fe <BLEPLAT_AesCMACEncryptInit>
1005542a:	34dc      	adds	r4, #220	@ 0xdc
1005542c:	9401      	str	r4, [sp, #4]
1005542e:	2001      	movs	r0, #1
10055430:	f00c fb56 	bl	10061ae0 <GAT_att_db_find_from_handle>
10055434:	4606      	mov	r6, r0
10055436:	a84e      	add	r0, sp, #312	@ 0x138
10055438:	300c      	adds	r0, #12
1005543a:	9002      	str	r0, [sp, #8]
1005543c:	4d48      	ldr	r5, [pc, #288]	@ (10055560 <__arm_cp.5_2>)
1005543e:	2e00      	cmp	r6, #0
10055440:	d041      	beq.n	100554c6 <GAT_srv_db_hash_tsk+0xca>
10055442:	7830      	ldrb	r0, [r6, #0]
10055444:	2803      	cmp	r0, #3
10055446:	d039      	beq.n	100554bc <GAT_srv_db_hash_tsk+0xc0>
10055448:	af4e      	add	r7, sp, #312	@ 0x138
1005544a:	4630      	mov	r0, r6
1005544c:	4639      	mov	r1, r7
1005544e:	f000 f907 	bl	10055660 <GAT_srv_get_attr_type>
10055452:	7c38      	ldrb	r0, [r7, #16]
10055454:	2810      	cmp	r0, #16
10055456:	d131      	bne.n	100554bc <GAT_srv_db_hash_tsk+0xc0>
10055458:	8870      	ldrh	r0, [r6, #2]
1005545a:	a904      	add	r1, sp, #16
1005545c:	8008      	strh	r0, [r1, #0]
1005545e:	a84e      	add	r0, sp, #312	@ 0x138
10055460:	8980      	ldrh	r0, [r0, #12]
10055462:	493d      	ldr	r1, [pc, #244]	@ (10055558 <__arm_cp.5_0>)
10055464:	1841      	adds	r1, r0, r1
10055466:	2905      	cmp	r1, #5
10055468:	d31c      	bcc.n	100554a4 <GAT_srv_db_hash_tsk+0xa8>
1005546a:	493c      	ldr	r1, [pc, #240]	@ (1005555c <__arm_cp.5_1>)
1005546c:	1841      	adds	r1, r0, r1
1005546e:	2904      	cmp	r1, #4
10055470:	d303      	bcc.n	1005547a <GAT_srv_db_hash_tsk+0x7e>
10055472:	2129      	movs	r1, #41	@ 0x29
10055474:	0209      	lsls	r1, r1, #8
10055476:	4288      	cmp	r0, r1
10055478:	d120      	bne.n	100554bc <GAT_srv_db_hash_tsk+0xc0>
1005547a:	af0d      	add	r7, sp, #52	@ 0x34
1005547c:	2402      	movs	r4, #2
1005547e:	aa04      	add	r2, sp, #16
10055480:	4638      	mov	r0, r7
10055482:	4621      	mov	r1, r4
10055484:	47a8      	blx	r5
10055486:	4638      	mov	r0, r7
10055488:	4621      	mov	r1, r4
1005548a:	9a02      	ldr	r2, [sp, #8]
1005548c:	47a8      	blx	r5
1005548e:	2000      	movs	r0, #0
10055490:	aa05      	add	r2, sp, #20
10055492:	4631      	mov	r1, r6
10055494:	f000 f9a6 	bl	100557e4 <GAT_srv_get_attr_value>
10055498:	9805      	ldr	r0, [sp, #20]
1005549a:	6842      	ldr	r2, [r0, #4]
1005549c:	8801      	ldrh	r1, [r0, #0]
1005549e:	4638      	mov	r0, r7
100554a0:	47a8      	blx	r5
100554a2:	e00b      	b.n	100554bc <GAT_srv_db_hash_tsk+0xc0>
100554a4:	ac0d      	add	r4, sp, #52	@ 0x34
100554a6:	2702      	movs	r7, #2
100554a8:	aa04      	add	r2, sp, #16
100554aa:	4620      	mov	r0, r4
100554ac:	4639      	mov	r1, r7
100554ae:	f000 fcdb 	bl	10055e68 <GAT_srv_aes_cmac_append>
100554b2:	4620      	mov	r0, r4
100554b4:	4639      	mov	r1, r7
100554b6:	9a02      	ldr	r2, [sp, #8]
100554b8:	f000 fcd6 	bl	10055e68 <GAT_srv_aes_cmac_append>
100554bc:	4630      	mov	r0, r6
100554be:	f00c fb71 	bl	10061ba4 <GAT_att_db_get_next>
100554c2:	4606      	mov	r6, r0
100554c4:	e7bb      	b.n	1005543e <GAT_srv_db_hash_tsk+0x42>
100554c6:	9801      	ldr	r0, [sp, #4]
100554c8:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
100554ca:	2a00      	cmp	r2, #0
100554cc:	d006      	beq.n	100554dc <GAT_srv_db_hash_tsk+0xe0>
100554ce:	a80d      	add	r0, sp, #52	@ 0x34
100554d0:	2120      	movs	r1, #32
100554d2:	7101      	strb	r1, [r0, #4]
100554d4:	4601      	mov	r1, r0
100554d6:	31e0      	adds	r1, #224	@ 0xe0
100554d8:	f7fa fa1e 	bl	1004f918 <BLEPLAT_AesCMACEncryptAppend>
100554dc:	a80d      	add	r0, sp, #52	@ 0x34
100554de:	ac4e      	add	r4, sp, #312	@ 0x138
100554e0:	aa04      	add	r2, sp, #16
100554e2:	4621      	mov	r1, r4
100554e4:	f7fa fa29 	bl	1004f93a <BLEPLAT_AesCMACEncryptFinish>
100554e8:	ad05      	add	r5, sp, #20
100554ea:	2610      	movs	r6, #16
100554ec:	2301      	movs	r3, #1
100554ee:	4628      	mov	r0, r5
100554f0:	4621      	mov	r1, r4
100554f2:	4632      	mov	r2, r6
100554f4:	f00a fba2 	bl	1005fc3c <copy_swap_buffer>
100554f8:	4f1a      	ldr	r7, [pc, #104]	@ (10055564 <__arm_cp.5_3>)
100554fa:	6839      	ldr	r1, [r7, #0]
100554fc:	3183      	adds	r1, #131	@ 0x83
100554fe:	4628      	mov	r0, r5
10055500:	4632      	mov	r2, r6
10055502:	f7fa f9bf 	bl	1004f884 <BLEPLAT_MemCmp>
10055506:	2800      	cmp	r0, #0
10055508:	d019      	beq.n	1005553e <GAT_srv_db_hash_tsk+0x142>
1005550a:	6838      	ldr	r0, [r7, #0]
1005550c:	3083      	adds	r0, #131	@ 0x83
1005550e:	a905      	add	r1, sp, #20
10055510:	2210      	movs	r2, #16
10055512:	f7fa f997 	bl	1004f844 <BLEPLAT_MemCpy>
10055516:	ad03      	add	r5, sp, #12
10055518:	2082      	movs	r0, #130	@ 0x82
1005551a:	8028      	strh	r0, [r5, #0]
1005551c:	9500      	str	r5, [sp, #0]
1005551e:	2400      	movs	r4, #0
10055520:	4b11      	ldr	r3, [pc, #68]	@ (10055568 <__arm_cp.5_4>)
10055522:	4620      	mov	r0, r4
10055524:	4621      	mov	r1, r4
10055526:	4622      	mov	r2, r4
10055528:	f7fe faf0 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
1005552c:	2040      	movs	r0, #64	@ 0x40
1005552e:	8028      	strh	r0, [r5, #0]
10055530:	9500      	str	r5, [sp, #0]
10055532:	4b0e      	ldr	r3, [pc, #56]	@ (1005556c <__arm_cp.5_5>)
10055534:	4620      	mov	r0, r4
10055536:	4621      	mov	r1, r4
10055538:	4622      	mov	r2, r4
1005553a:	f7fe fae7 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
1005553e:	6838      	ldr	r0, [r7, #0]
10055540:	215c      	movs	r1, #92	@ 0x5c
10055542:	5c42      	ldrb	r2, [r0, r1]
10055544:	23fd      	movs	r3, #253	@ 0xfd
10055546:	4013      	ands	r3, r2
10055548:	5443      	strb	r3, [r0, r1]
1005554a:	200b      	movs	r0, #11
1005554c:	f00a fa10 	bl	1005f970 <tsk_notify_idx>
10055550:	f7f9 fbb7 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10055554:	b053      	add	sp, #332	@ 0x14c
10055556:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055558 <__arm_cp.5_0>:
10055558:	ffffd6ff 	.word	0xffffd6ff

1005555c <__arm_cp.5_1>:
1005555c:	ffffd800 	.word	0xffffd800

10055560 <__arm_cp.5_2>:
10055560:	10055e69 	.word	0x10055e69

10055564 <__arm_cp.5_3>:
10055564:	20000ed8 	.word	0x20000ed8

10055568 <__arm_cp.5_4>:
10055568:	10053dd1 	.word	0x10053dd1

1005556c <__arm_cp.5_5>:
1005556c:	10053dc5 	.word	0x10053dc5

10055570 <GAT_srv_send_srv_change_tsk>:
10055570:	b5e0      	push	{r5, r6, r7, lr}
10055572:	2100      	movs	r1, #0
10055574:	9100      	str	r1, [sp, #0]
10055576:	2002      	movs	r0, #2
10055578:	2204      	movs	r2, #4
1005557a:	4b07      	ldr	r3, [pc, #28]	@ (10055598 <__arm_cp.7_0>)
1005557c:	f7fe fac6 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
10055580:	2800      	cmp	r0, #0
10055582:	d001      	beq.n	10055588 <GAT_srv_send_srv_change_tsk+0x18>
10055584:	2881      	cmp	r0, #129	@ 0x81
10055586:	d100      	bne.n	1005558a <GAT_srv_send_srv_change_tsk+0x1a>
10055588:	bd8c      	pop	{r2, r3, r7, pc}
1005558a:	200b      	movs	r0, #11
1005558c:	f00a f9f0 	bl	1005f970 <tsk_notify_idx>
10055590:	f7f9 fb97 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10055594:	bd8c      	pop	{r2, r3, r7, pc}
10055596:	46c0      	nop			@ (mov r8, r8)

10055598 <__arm_cp.7_0>:
10055598:	1005559d 	.word	0x1005559d

1005559c <GAT_srv_tx_service_change>:
1005559c:	b5b0      	push	{r4, r5, r7, lr}
1005559e:	b08a      	sub	sp, #40	@ 0x28
100555a0:	4604      	mov	r4, r0
100555a2:	8880      	ldrh	r0, [r0, #4]
100555a4:	0640      	lsls	r0, r0, #25
100555a6:	d401      	bmi.n	100555ac <GAT_srv_tx_service_change+0x10>
100555a8:	2500      	movs	r5, #0
100555aa:	e04b      	b.n	10055644 <GAT_srv_tx_service_change+0xa8>
100555ac:	a809      	add	r0, sp, #36	@ 0x24
100555ae:	2180      	movs	r1, #128	@ 0x80
100555b0:	8001      	strh	r1, [r0, #0]
100555b2:	8921      	ldrh	r1, [r4, #8]
100555b4:	9000      	str	r0, [sp, #0]
100555b6:	2001      	movs	r0, #1
100555b8:	2500      	movs	r5, #0
100555ba:	4b24      	ldr	r3, [pc, #144]	@ (1005564c <__arm_cp.8_0>)
100555bc:	462a      	mov	r2, r5
100555be:	f7fe faa5 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
100555c2:	88a1      	ldrh	r1, [r4, #4]
100555c4:	0789      	lsls	r1, r1, #30
100555c6:	d43d      	bmi.n	10055644 <GAT_srv_tx_service_change+0xa8>
100555c8:	2800      	cmp	r0, #0
100555ca:	d13b      	bne.n	10055644 <GAT_srv_tx_service_change+0xa8>
100555cc:	ad04      	add	r5, sp, #16
100555ce:	4920      	ldr	r1, [pc, #128]	@ (10055650 <__arm_cp.8_1>)
100555d0:	2214      	movs	r2, #20
100555d2:	4628      	mov	r0, r5
100555d4:	f00f fbab 	bl	10064d2e <__aeabi_memcpy>
100555d8:	2001      	movs	r0, #1
100555da:	491e      	ldr	r1, [pc, #120]	@ (10055654 <__arm_cp.8_2>)
100555dc:	462a      	mov	r2, r5
100555de:	f000 fbaf 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
100555e2:	2800      	cmp	r0, #0
100555e4:	d012      	beq.n	1005560c <GAT_srv_tx_service_change+0x70>
100555e6:	4605      	mov	r5, r0
100555e8:	f000 fc02 	bl	10055df0 <GAT_srv_get_cccd_attr_p>
100555ec:	2800      	cmp	r0, #0
100555ee:	d00d      	beq.n	1005560c <GAT_srv_tx_service_change+0x70>
100555f0:	4601      	mov	r1, r0
100555f2:	8920      	ldrh	r0, [r4, #8]
100555f4:	f000 fc2c 	bl	10055e50 <GAT_srv_get_cccd_val>
100555f8:	0780      	lsls	r0, r0, #30
100555fa:	d412      	bmi.n	10055622 <GAT_srv_tx_service_change+0x86>
100555fc:	8920      	ldrh	r0, [r4, #8]
100555fe:	2100      	movs	r1, #0
10055600:	2201      	movs	r2, #1
10055602:	f000 fbbd 	bl	10055d80 <GAT_srv_check_client_support_feature>
10055606:	4605      	mov	r5, r0
10055608:	2881      	cmp	r0, #129	@ 0x81
1005560a:	d11b      	bne.n	10055644 <GAT_srv_tx_service_change+0xa8>
1005560c:	a809      	add	r0, sp, #36	@ 0x24
1005560e:	2140      	movs	r1, #64	@ 0x40
10055610:	8001      	strh	r1, [r0, #0]
10055612:	8921      	ldrh	r1, [r4, #8]
10055614:	9000      	str	r0, [sp, #0]
10055616:	2001      	movs	r0, #1
10055618:	2200      	movs	r2, #0
1005561a:	4b10      	ldr	r3, [pc, #64]	@ (1005565c <__arm_cp.8_4>)
1005561c:	f7fe fa76 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
10055620:	e00f      	b.n	10055642 <GAT_srv_tx_service_change+0xa6>
10055622:	480d      	ldr	r0, [pc, #52]	@ (10055658 <__arm_cp.8_3>)
10055624:	9003      	str	r0, [sp, #12]
10055626:	aa01      	add	r2, sp, #4
10055628:	2004      	movs	r0, #4
1005562a:	8050      	strh	r0, [r2, #2]
1005562c:	8868      	ldrh	r0, [r5, #2]
1005562e:	8010      	strh	r0, [r2, #0]
10055630:	a803      	add	r0, sp, #12
10055632:	9002      	str	r0, [sp, #8]
10055634:	8961      	ldrh	r1, [r4, #10]
10055636:	8920      	ldrh	r0, [r4, #8]
10055638:	9200      	str	r2, [sp, #0]
1005563a:	2202      	movs	r2, #2
1005563c:	2301      	movs	r3, #1
1005563e:	f7fe fe17 	bl	10054270 <GAT_att_srv_hvtx>
10055642:	4605      	mov	r5, r0
10055644:	4628      	mov	r0, r5
10055646:	b00a      	add	sp, #40	@ 0x28
10055648:	bdb0      	pop	{r4, r5, r7, pc}
1005564a:	46c0      	nop			@ (mov r8, r8)

1005564c <__arm_cp.8_0>:
1005564c:	10053db9 	.word	0x10053db9

10055650 <__arm_cp.8_1>:
10055650:	10066078 	.word	0x10066078

10055654 <__arm_cp.8_2>:
10055654:	0000ffff 	.word	0x0000ffff

10055658 <__arm_cp.8_3>:
10055658:	ffff0001 	.word	0xffff0001

1005565c <__arm_cp.8_4>:
1005565c:	10053dd1 	.word	0x10053dd1

10055660 <GAT_srv_get_attr_type>:
10055660:	b580      	push	{r7, lr}
10055662:	2210      	movs	r2, #16
10055664:	740a      	strb	r2, [r1, #16]
10055666:	7802      	ldrb	r2, [r0, #0]
10055668:	2a04      	cmp	r2, #4
1005566a:	d80d      	bhi.n	10055688 <GAT_srv_get_attr_type+0x28>
1005566c:	447a      	add	r2, pc
1005566e:	7912      	ldrb	r2, [r2, #4]
10055670:	0052      	lsls	r2, r2, #1
10055672:	4497      	add	pc, r2
10055674:	0212160a 	.word	0x0212160a
10055678:	0002      	.short	0x0002
1005567a:	6840      	ldr	r0, [r0, #4]
1005567c:	1d03      	adds	r3, r0, #4
1005567e:	2214      	movs	r2, #20
10055680:	4608      	mov	r0, r1
10055682:	4619      	mov	r1, r3
10055684:	f7fa f8de 	bl	1004f844 <BLEPLAT_MemCpy>
10055688:	bd80      	pop	{r7, pc}
1005568a:	2205      	movs	r2, #5
1005568c:	02d2      	lsls	r2, r2, #11
1005568e:	6840      	ldr	r0, [r0, #4]
10055690:	7d00      	ldrb	r0, [r0, #20]
10055692:	2801      	cmp	r0, #1
10055694:	d109      	bne.n	100556aa <GAT_srv_get_attr_type+0x4a>
10055696:	818a      	strh	r2, [r1, #12]
10055698:	bd80      	pop	{r7, pc}
1005569a:	2005      	movs	r0, #5
1005569c:	02c0      	lsls	r0, r0, #11
1005569e:	1cc0      	adds	r0, r0, #3
100556a0:	e004      	b.n	100556ac <GAT_srv_get_attr_type+0x4c>
100556a2:	2005      	movs	r0, #5
100556a4:	02c0      	lsls	r0, r0, #11
100556a6:	1c80      	adds	r0, r0, #2
100556a8:	e000      	b.n	100556ac <GAT_srv_get_attr_type+0x4c>
100556aa:	1c50      	adds	r0, r2, #1
100556ac:	8188      	strh	r0, [r1, #12]
100556ae:	bd80      	pop	{r7, pc}

100556b0 <GAT_srv_get_att_group_end_handle>:
100556b0:	b580      	push	{r7, lr}
100556b2:	7801      	ldrb	r1, [r0, #0]
100556b4:	2202      	movs	r2, #2
100556b6:	430a      	orrs	r2, r1
100556b8:	2a02      	cmp	r2, #2
100556ba:	d102      	bne.n	100556c2 <GAT_srv_get_att_group_end_handle+0x12>
100556bc:	f00c fa86 	bl	10061bcc <GAT_att_db_get_last_group_handle>
100556c0:	bd80      	pop	{r7, pc}
100556c2:	8840      	ldrh	r0, [r0, #2]
100556c4:	bd80      	pop	{r7, pc}

100556c6 <GAT_srv_attr_value_read>:
100556c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100556c8:	461c      	mov	r4, r3
100556ca:	9200      	str	r2, [sp, #0]
100556cc:	460e      	mov	r6, r1
100556ce:	4607      	mov	r7, r0
100556d0:	2201      	movs	r2, #1
100556d2:	4608      	mov	r0, r1
100556d4:	4639      	mov	r1, r7
100556d6:	f000 f80f 	bl	100556f8 <GAT_srv_check_perms>
100556da:	7020      	strb	r0, [r4, #0]
100556dc:	2586      	movs	r5, #134	@ 0x86
100556de:	2800      	cmp	r0, #0
100556e0:	d108      	bne.n	100556f4 <GAT_srv_attr_value_read+0x2e>
100556e2:	4638      	mov	r0, r7
100556e4:	4631      	mov	r1, r6
100556e6:	9a00      	ldr	r2, [sp, #0]
100556e8:	f000 f87c 	bl	100557e4 <GAT_srv_get_attr_value>
100556ec:	2886      	cmp	r0, #134	@ 0x86
100556ee:	d102      	bne.n	100556f6 <GAT_srv_attr_value_read+0x30>
100556f0:	200e      	movs	r0, #14
100556f2:	7020      	strb	r0, [r4, #0]
100556f4:	4628      	mov	r0, r5
100556f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100556f8 <GAT_srv_check_perms>:
100556f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100556fa:	b085      	sub	sp, #20
100556fc:	4615      	mov	r5, r2
100556fe:	9101      	str	r1, [sp, #4]
10055700:	4601      	mov	r1, r0
10055702:	7804      	ldrb	r4, [r0, #0]
10055704:	2700      	movs	r7, #0
10055706:	2302      	movs	r3, #2
10055708:	200e      	movs	r0, #14
1005570a:	2c03      	cmp	r4, #3
1005570c:	461a      	mov	r2, r3
1005570e:	463e      	mov	r6, r7
10055710:	d312      	bcc.n	10055738 <GAT_srv_check_perms+0x40>
10055712:	d00b      	beq.n	1005572c <GAT_srv_check_perms+0x34>
10055714:	2c04      	cmp	r4, #4
10055716:	d158      	bne.n	100557ca <GAT_srv_check_perms+0xd2>
10055718:	6848      	ldr	r0, [r1, #4]
1005571a:	7801      	ldrb	r1, [r0, #0]
1005571c:	078c      	lsls	r4, r1, #30
1005571e:	07c9      	lsls	r1, r1, #31
10055720:	0f8a      	lsrs	r2, r1, #30
10055722:	2c00      	cmp	r4, #0
10055724:	d500      	bpl.n	10055728 <GAT_srv_check_perms+0x30>
10055726:	324c      	adds	r2, #76	@ 0x4c
10055728:	1c41      	adds	r1, r0, #1
1005572a:	e002      	b.n	10055732 <GAT_srv_check_perms+0x3a>
1005572c:	6848      	ldr	r0, [r1, #4]
1005572e:	1c41      	adds	r1, r0, #1
10055730:	7802      	ldrb	r2, [r0, #0]
10055732:	1c80      	adds	r0, r0, #2
10055734:	780e      	ldrb	r6, [r1, #0]
10055736:	7807      	ldrb	r7, [r0, #0]
10055738:	2d01      	cmp	r5, #1
1005573a:	d103      	bne.n	10055744 <GAT_srv_check_perms+0x4c>
1005573c:	4610      	mov	r0, r2
1005573e:	4018      	ands	r0, r3
10055740:	4618      	mov	r0, r3
10055742:	d042      	beq.n	100557ca <GAT_srv_check_perms+0xd2>
10055744:	2003      	movs	r0, #3
10055746:	2d03      	cmp	r5, #3
10055748:	d102      	bne.n	10055750 <GAT_srv_check_perms+0x58>
1005574a:	2108      	movs	r1, #8
1005574c:	4011      	ands	r1, r2
1005574e:	d03c      	beq.n	100557ca <GAT_srv_check_perms+0xd2>
10055750:	2d04      	cmp	r5, #4
10055752:	d102      	bne.n	1005575a <GAT_srv_check_perms+0x62>
10055754:	2104      	movs	r1, #4
10055756:	4011      	ands	r1, r2
10055758:	d037      	beq.n	100557ca <GAT_srv_check_perms+0xd2>
1005575a:	2d05      	cmp	r5, #5
1005575c:	d102      	bne.n	10055764 <GAT_srv_check_perms+0x6c>
1005575e:	2140      	movs	r1, #64	@ 0x40
10055760:	400a      	ands	r2, r1
10055762:	d032      	beq.n	100557ca <GAT_srv_check_perms+0xd2>
10055764:	a904      	add	r1, sp, #16
10055766:	aa03      	add	r2, sp, #12
10055768:	ab02      	add	r3, sp, #8
1005576a:	9c01      	ldr	r4, [sp, #4]
1005576c:	4620      	mov	r0, r4
1005576e:	f009 ff26 	bl	1005f5be <smp_sap_get_security_level>
10055772:	2802      	cmp	r0, #2
10055774:	d102      	bne.n	1005577c <GAT_srv_check_perms+0x84>
10055776:	2f00      	cmp	r7, #0
10055778:	d10f      	bne.n	1005579a <GAT_srv_check_perms+0xa2>
1005577a:	e025      	b.n	100557c8 <GAT_srv_check_perms+0xd0>
1005577c:	2d01      	cmp	r5, #1
1005577e:	d000      	beq.n	10055782 <GAT_srv_check_perms+0x8a>
10055780:	08ff      	lsrs	r7, r7, #3
10055782:	2d05      	cmp	r5, #5
10055784:	d10b      	bne.n	1005579e <GAT_srv_check_perms+0xa6>
10055786:	a804      	add	r0, sp, #16
10055788:	7800      	ldrb	r0, [r0, #0]
1005578a:	2802      	cmp	r0, #2
1005578c:	d105      	bne.n	1005579a <GAT_srv_check_perms+0xa2>
1005578e:	a802      	add	r0, sp, #8
10055790:	7800      	ldrb	r0, [r0, #0]
10055792:	2802      	cmp	r0, #2
10055794:	d114      	bne.n	100557c0 <GAT_srv_check_perms+0xc8>
10055796:	2000      	movs	r0, #0
10055798:	e013      	b.n	100557c2 <GAT_srv_check_perms+0xca>
1005579a:	200e      	movs	r0, #14
1005579c:	e015      	b.n	100557ca <GAT_srv_check_perms+0xd2>
1005579e:	2000      	movs	r0, #0
100557a0:	2f00      	cmp	r7, #0
100557a2:	d012      	beq.n	100557ca <GAT_srv_check_perms+0xd2>
100557a4:	a903      	add	r1, sp, #12
100557a6:	7809      	ldrb	r1, [r1, #0]
100557a8:	07fa      	lsls	r2, r7, #31
100557aa:	d003      	beq.n	100557b4 <GAT_srv_check_perms+0xbc>
100557ac:	2903      	cmp	r1, #3
100557ae:	d201      	bcs.n	100557b4 <GAT_srv_check_perms+0xbc>
100557b0:	2005      	movs	r0, #5
100557b2:	e00a      	b.n	100557ca <GAT_srv_check_perms+0xd2>
100557b4:	077a      	lsls	r2, r7, #29
100557b6:	d508      	bpl.n	100557ca <GAT_srv_check_perms+0xd2>
100557b8:	2902      	cmp	r1, #2
100557ba:	d208      	bcs.n	100557ce <GAT_srv_check_perms+0xd6>
100557bc:	200f      	movs	r0, #15
100557be:	e004      	b.n	100557ca <GAT_srv_check_perms+0xd2>
100557c0:	2005      	movs	r0, #5
100557c2:	2101      	movs	r1, #1
100557c4:	400f      	ands	r7, r1
100557c6:	d100      	bne.n	100557ca <GAT_srv_check_perms+0xd2>
100557c8:	4638      	mov	r0, r7
100557ca:	b005      	add	sp, #20
100557cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100557ce:	4620      	mov	r0, r4
100557d0:	4631      	mov	r1, r6
100557d2:	f009 ff6a 	bl	1005f6aa <smp_sap_check_encryption_key_size>
100557d6:	28b6      	cmp	r0, #182	@ 0xb6
100557d8:	d001      	beq.n	100557de <GAT_srv_check_perms+0xe6>
100557da:	2000      	movs	r0, #0
100557dc:	e7f5      	b.n	100557ca <GAT_srv_check_perms+0xd2>
100557de:	200c      	movs	r0, #12
100557e0:	e7f3      	b.n	100557ca <GAT_srv_check_perms+0xd2>
	...

100557e4 <GAT_srv_get_attr_value>:
100557e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100557e6:	b085      	sub	sp, #20
100557e8:	460d      	mov	r5, r1
100557ea:	7809      	ldrb	r1, [r1, #0]
100557ec:	2904      	cmp	r1, #4
100557ee:	d811      	bhi.n	10055814 <GAT_srv_get_attr_value+0x30>
100557f0:	4614      	mov	r4, r2
100557f2:	46c0      	nop			@ (mov r8, r8)
100557f4:	4479      	add	r1, pc
100557f6:	7909      	ldrb	r1, [r1, #4]
100557f8:	0049      	lsls	r1, r1, #1
100557fa:	448f      	add	pc, r1
100557fc:	694a0d02 	.word	0x694a0d02
10055800:	007e      	.short	0x007e
10055802:	4e73      	ldr	r6, [pc, #460]	@ (100559d0 <__arm_cp.13_0>)
10055804:	6830      	ldr	r0, [r6, #0]
10055806:	4601      	mov	r1, r0
10055808:	3170      	adds	r1, #112	@ 0x70
1005580a:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005580c:	6868      	ldr	r0, [r5, #4]
1005580e:	f00a fa87 	bl	1005fd20 <UUID_write_to_flat>
10055812:	e057      	b.n	100558c4 <GAT_srv_get_attr_value+0xe0>
10055814:	2686      	movs	r6, #134	@ 0x86
10055816:	e0d3      	b.n	100559c0 <GAT_srv_get_attr_value+0x1dc>
10055818:	4f6d      	ldr	r7, [pc, #436]	@ (100559d0 <__arm_cp.13_0>)
1005581a:	6838      	ldr	r0, [r7, #0]
1005581c:	4601      	mov	r1, r0
1005581e:	3170      	adds	r1, #112	@ 0x70
10055820:	66c1      	str	r1, [r0, #108]	@ 0x6c
10055822:	686b      	ldr	r3, [r5, #4]
10055824:	2001      	movs	r0, #1
10055826:	496e      	ldr	r1, [pc, #440]	@ (100559e0 <__arm_cp.13_4>)
10055828:	2600      	movs	r6, #0
1005582a:	4632      	mov	r2, r6
1005582c:	f000 fad6 	bl	10055ddc <GAT_srv_get_attribute_handle>
10055830:	a901      	add	r1, sp, #4
10055832:	8008      	strh	r0, [r1, #0]
10055834:	2800      	cmp	r0, #0
10055836:	d100      	bne.n	1005583a <GAT_srv_get_attr_value+0x56>
10055838:	e0ad      	b.n	10055996 <GAT_srv_get_attr_value+0x1b2>
1005583a:	f00c f929 	bl	10061a90 <GAT_att_db_find_by_handle>
1005583e:	f7ff ff37 	bl	100556b0 <GAT_srv_get_att_group_end_handle>
10055842:	a902      	add	r1, sp, #8
10055844:	9100      	str	r1, [sp, #0]
10055846:	8008      	strh	r0, [r1, #0]
10055848:	6838      	ldr	r0, [r7, #0]
1005584a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005584c:	a901      	add	r1, sp, #4
1005584e:	2702      	movs	r7, #2
10055850:	463a      	mov	r2, r7
10055852:	f7f9 fff7 	bl	1004f844 <BLEPLAT_MemCpy>
10055856:	485e      	ldr	r0, [pc, #376]	@ (100559d0 <__arm_cp.13_0>)
10055858:	6800      	ldr	r0, [r0, #0]
1005585a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005585c:	1c80      	adds	r0, r0, #2
1005585e:	9900      	ldr	r1, [sp, #0]
10055860:	463a      	mov	r2, r7
10055862:	f7f9 ffef 	bl	1004f844 <BLEPLAT_MemCpy>
10055866:	485a      	ldr	r0, [pc, #360]	@ (100559d0 <__arm_cp.13_0>)
10055868:	6800      	ldr	r0, [r0, #0]
1005586a:	2768      	movs	r7, #104	@ 0x68
1005586c:	2104      	movs	r1, #4
1005586e:	53c1      	strh	r1, [r0, r7]
10055870:	6869      	ldr	r1, [r5, #4]
10055872:	7c0a      	ldrb	r2, [r1, #16]
10055874:	2a10      	cmp	r2, #16
10055876:	d000      	beq.n	1005587a <GAT_srv_get_attr_value+0x96>
10055878:	e091      	b.n	1005599e <GAT_srv_get_attr_value+0x1ba>
1005587a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005587c:	310c      	adds	r1, #12
1005587e:	1d00      	adds	r0, r0, #4
10055880:	2202      	movs	r2, #2
10055882:	f7f9 ffdf 	bl	1004f844 <BLEPLAT_MemCpy>
10055886:	4852      	ldr	r0, [pc, #328]	@ (100559d0 <__arm_cp.13_0>)
10055888:	6800      	ldr	r0, [r0, #0]
1005588a:	5bc1      	ldrh	r1, [r0, r7]
1005588c:	1c89      	adds	r1, r1, #2
1005588e:	53c1      	strh	r1, [r0, r7]
10055890:	e085      	b.n	1005599e <GAT_srv_get_attr_value+0x1ba>
10055892:	4e4f      	ldr	r6, [pc, #316]	@ (100559d0 <__arm_cp.13_0>)
10055894:	6830      	ldr	r0, [r6, #0]
10055896:	4601      	mov	r1, r0
10055898:	3170      	adds	r1, #112	@ 0x70
1005589a:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005589c:	6869      	ldr	r1, [r5, #4]
1005589e:	7809      	ldrb	r1, [r1, #0]
100558a0:	2270      	movs	r2, #112	@ 0x70
100558a2:	5481      	strb	r1, [r0, r2]
100558a4:	8869      	ldrh	r1, [r5, #2]
100558a6:	1c4a      	adds	r2, r1, #1
100558a8:	a903      	add	r1, sp, #12
100558aa:	800a      	strh	r2, [r1, #0]
100558ac:	3071      	adds	r0, #113	@ 0x71
100558ae:	2202      	movs	r2, #2
100558b0:	f7f9 ffc8 	bl	1004f844 <BLEPLAT_MemCpy>
100558b4:	6830      	ldr	r0, [r6, #0]
100558b6:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
100558b8:	6868      	ldr	r0, [r5, #4]
100558ba:	1d00      	adds	r0, r0, #4
100558bc:	1cc9      	adds	r1, r1, #3
100558be:	f00a fa2f 	bl	1005fd20 <UUID_write_to_flat>
100558c2:	1cc0      	adds	r0, r0, #3
100558c4:	6831      	ldr	r1, [r6, #0]
100558c6:	2268      	movs	r2, #104	@ 0x68
100558c8:	5288      	strh	r0, [r1, r2]
100558ca:	3168      	adds	r1, #104	@ 0x68
100558cc:	6021      	str	r1, [r4, #0]
100558ce:	e076      	b.n	100559be <GAT_srv_get_attr_value+0x1da>
100558d0:	6869      	ldr	r1, [r5, #4]
100558d2:	7d0a      	ldrb	r2, [r1, #20]
100558d4:	2a10      	cmp	r2, #16
100558d6:	d132      	bne.n	1005593e <GAT_srv_get_attr_value+0x15a>
100558d8:	4a3f      	ldr	r2, [pc, #252]	@ (100559d8 <__arm_cp.13_2>)
100558da:	1c52      	adds	r2, r2, #1
100558dc:	8a0b      	ldrh	r3, [r1, #16]
100558de:	4293      	cmp	r3, r2
100558e0:	d12d      	bne.n	1005593e <GAT_srv_get_attr_value+0x15a>
100558e2:	483b      	ldr	r0, [pc, #236]	@ (100559d0 <__arm_cp.13_0>)
100558e4:	6801      	ldr	r1, [r0, #0]
100558e6:	3168      	adds	r1, #104	@ 0x68
100558e8:	6021      	str	r1, [r4, #0]
100558ea:	6800      	ldr	r0, [r0, #0]
100558ec:	2168      	movs	r1, #104	@ 0x68
100558ee:	2210      	movs	r2, #16
100558f0:	5242      	strh	r2, [r0, r1]
100558f2:	4601      	mov	r1, r0
100558f4:	3183      	adds	r1, #131	@ 0x83
100558f6:	66c1      	str	r1, [r0, #108]	@ 0x6c
100558f8:	e061      	b.n	100559be <GAT_srv_get_attr_value+0x1da>
100558fa:	6869      	ldr	r1, [r5, #4]
100558fc:	6989      	ldr	r1, [r1, #24]
100558fe:	2900      	cmp	r1, #0
10055900:	d045      	beq.n	1005598e <GAT_srv_get_attr_value+0x1aa>
10055902:	4e33      	ldr	r6, [pc, #204]	@ (100559d0 <__arm_cp.13_0>)
10055904:	6831      	ldr	r1, [r6, #0]
10055906:	3168      	adds	r1, #104	@ 0x68
10055908:	6021      	str	r1, [r4, #0]
1005590a:	6869      	ldr	r1, [r5, #4]
1005590c:	7d0a      	ldrb	r2, [r1, #20]
1005590e:	2a10      	cmp	r2, #16
10055910:	d13f      	bne.n	10055992 <GAT_srv_get_attr_value+0x1ae>
10055912:	8a0a      	ldrh	r2, [r1, #16]
10055914:	4b2f      	ldr	r3, [pc, #188]	@ (100559d4 <__arm_cp.13_1>)
10055916:	429a      	cmp	r2, r3
10055918:	d13b      	bne.n	10055992 <GAT_srv_get_attr_value+0x1ae>
1005591a:	6831      	ldr	r1, [r6, #0]
1005591c:	2268      	movs	r2, #104	@ 0x68
1005591e:	2402      	movs	r4, #2
10055920:	528c      	strh	r4, [r1, r2]
10055922:	460a      	mov	r2, r1
10055924:	3270      	adds	r2, #112	@ 0x70
10055926:	66ca      	str	r2, [r1, #108]	@ 0x6c
10055928:	4629      	mov	r1, r5
1005592a:	f000 fa91 	bl	10055e50 <GAT_srv_get_cccd_val>
1005592e:	a904      	add	r1, sp, #16
10055930:	8008      	strh	r0, [r1, #0]
10055932:	6830      	ldr	r0, [r6, #0]
10055934:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10055936:	4622      	mov	r2, r4
10055938:	f7f9 ff84 	bl	1004f844 <BLEPLAT_MemCpy>
1005593c:	e03f      	b.n	100559be <GAT_srv_get_attr_value+0x1da>
1005593e:	6a09      	ldr	r1, [r1, #32]
10055940:	2900      	cmp	r1, #0
10055942:	d024      	beq.n	1005598e <GAT_srv_get_attr_value+0x1aa>
10055944:	4e22      	ldr	r6, [pc, #136]	@ (100559d0 <__arm_cp.13_0>)
10055946:	6831      	ldr	r1, [r6, #0]
10055948:	3168      	adds	r1, #104	@ 0x68
1005594a:	6021      	str	r1, [r4, #0]
1005594c:	6869      	ldr	r1, [r5, #4]
1005594e:	7d0a      	ldrb	r2, [r1, #20]
10055950:	2a10      	cmp	r2, #16
10055952:	d127      	bne.n	100559a4 <GAT_srv_get_attr_value+0x1c0>
10055954:	8a0a      	ldrh	r2, [r1, #16]
10055956:	4b20      	ldr	r3, [pc, #128]	@ (100559d8 <__arm_cp.13_2>)
10055958:	429a      	cmp	r2, r3
1005595a:	d123      	bne.n	100559a4 <GAT_srv_get_attr_value+0x1c0>
1005595c:	6831      	ldr	r1, [r6, #0]
1005595e:	2268      	movs	r2, #104	@ 0x68
10055960:	2301      	movs	r3, #1
10055962:	528b      	strh	r3, [r1, r2]
10055964:	460a      	mov	r2, r1
10055966:	3270      	adds	r2, #112	@ 0x70
10055968:	66ca      	str	r2, [r1, #108]	@ 0x6c
1005596a:	f7fe fa37 	bl	10053ddc <GAT_att_cmn_get_conn_index>
1005596e:	28ff      	cmp	r0, #255	@ 0xff
10055970:	d029      	beq.n	100559c6 <GAT_srv_get_attr_value+0x1e2>
10055972:	6869      	ldr	r1, [r5, #4]
10055974:	6a09      	ldr	r1, [r1, #32]
10055976:	688b      	ldr	r3, [r1, #8]
10055978:	4918      	ldr	r1, [pc, #96]	@ (100559dc <__arm_cp.13_3>)
1005597a:	7ac9      	ldrb	r1, [r1, #11]
1005597c:	0849      	lsrs	r1, r1, #1
1005597e:	1c4a      	adds	r2, r1, #1
10055980:	2104      	movs	r1, #4
10055982:	f000 f8d9 	bl	10055b38 <GAT_srv_get_zip_val>
10055986:	6831      	ldr	r1, [r6, #0]
10055988:	2270      	movs	r2, #112	@ 0x70
1005598a:	5488      	strb	r0, [r1, r2]
1005598c:	e017      	b.n	100559be <GAT_srv_get_attr_value+0x1da>
1005598e:	2684      	movs	r6, #132	@ 0x84
10055990:	e016      	b.n	100559c0 <GAT_srv_get_attr_value+0x1dc>
10055992:	6988      	ldr	r0, [r1, #24]
10055994:	e007      	b.n	100559a6 <GAT_srv_get_attr_value+0x1c2>
10055996:	6838      	ldr	r0, [r7, #0]
10055998:	2168      	movs	r1, #104	@ 0x68
1005599a:	2200      	movs	r2, #0
1005599c:	5242      	strh	r2, [r0, r1]
1005599e:	3068      	adds	r0, #104	@ 0x68
100559a0:	6020      	str	r0, [r4, #0]
100559a2:	e00d      	b.n	100559c0 <GAT_srv_get_attr_value+0x1dc>
100559a4:	6a08      	ldr	r0, [r1, #32]
100559a6:	7801      	ldrb	r1, [r0, #0]
100559a8:	0789      	lsls	r1, r1, #30
100559aa:	d501      	bpl.n	100559b0 <GAT_srv_get_attr_value+0x1cc>
100559ac:	2102      	movs	r1, #2
100559ae:	e000      	b.n	100559b2 <GAT_srv_get_attr_value+0x1ce>
100559b0:	2104      	movs	r1, #4
100559b2:	5a41      	ldrh	r1, [r0, r1]
100559b4:	6880      	ldr	r0, [r0, #8]
100559b6:	6832      	ldr	r2, [r6, #0]
100559b8:	2368      	movs	r3, #104	@ 0x68
100559ba:	52d1      	strh	r1, [r2, r3]
100559bc:	66d0      	str	r0, [r2, #108]	@ 0x6c
100559be:	2600      	movs	r6, #0
100559c0:	4630      	mov	r0, r6
100559c2:	b005      	add	sp, #20
100559c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100559c6:	6830      	ldr	r0, [r6, #0]
100559c8:	2170      	movs	r1, #112	@ 0x70
100559ca:	2600      	movs	r6, #0
100559cc:	5446      	strb	r6, [r0, r1]
100559ce:	e7f7      	b.n	100559c0 <GAT_srv_get_attr_value+0x1dc>

100559d0 <__arm_cp.13_0>:
100559d0:	20000ed8 	.word	0x20000ed8

100559d4 <__arm_cp.13_1>:
100559d4:	00002902 	.word	0x00002902

100559d8 <__arm_cp.13_2>:
100559d8:	00002b29 	.word	0x00002b29

100559dc <__arm_cp.13_3>:
100559dc:	20000f34 	.word	0x20000f34

100559e0 <__arm_cp.13_4>:
100559e0:	0000ffff 	.word	0x0000ffff

100559e4 <GAT_srv_attr_value_write>:
100559e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100559e6:	b089      	sub	sp, #36	@ 0x24
100559e8:	4617      	mov	r7, r2
100559ea:	460d      	mov	r5, r1
100559ec:	4606      	mov	r6, r0
100559ee:	7800      	ldrb	r0, [r0, #0]
100559f0:	8874      	ldrh	r4, [r6, #2]
100559f2:	2804      	cmp	r0, #4
100559f4:	d045      	beq.n	10055a82 <GAT_srv_attr_value_write+0x9e>
100559f6:	2803      	cmp	r0, #3
100559f8:	d177      	bne.n	10055aea <GAT_srv_attr_value_write+0x106>
100559fa:	6871      	ldr	r1, [r6, #4]
100559fc:	6a08      	ldr	r0, [r1, #32]
100559fe:	2800      	cmp	r0, #0
10055a00:	d07d      	beq.n	10055afe <GAT_srv_attr_value_write+0x11a>
10055a02:	7d0a      	ldrb	r2, [r1, #20]
10055a04:	2a10      	cmp	r2, #16
10055a06:	d174      	bne.n	10055af2 <GAT_srv_attr_value_write+0x10e>
10055a08:	8a09      	ldrh	r1, [r1, #16]
10055a0a:	4a49      	ldr	r2, [pc, #292]	@ (10055b30 <__arm_cp.14_1>)
10055a0c:	4291      	cmp	r1, r2
10055a0e:	d170      	bne.n	10055af2 <GAT_srv_attr_value_write+0x10e>
10055a10:	9700      	str	r7, [sp, #0]
10055a12:	2101      	movs	r1, #1
10055a14:	aa07      	add	r2, sp, #28
10055a16:	ab08      	add	r3, sp, #32
10055a18:	4628      	mov	r0, r5
10055a1a:	f7fe fd04 	bl	10054426 <GAT_att_srv_extract_write_packet_data>
10055a1e:	2800      	cmp	r0, #0
10055a20:	d16e      	bne.n	10055b00 <GAT_srv_attr_value_write+0x11c>
10055a22:	8828      	ldrh	r0, [r5, #0]
10055a24:	f7fe f9da 	bl	10053ddc <GAT_att_cmn_get_conn_index>
10055a28:	aa07      	add	r2, sp, #28
10055a2a:	7811      	ldrb	r1, [r2, #0]
10055a2c:	2307      	movs	r3, #7
10055a2e:	400b      	ands	r3, r1
10055a30:	9305      	str	r3, [sp, #20]
10055a32:	7013      	strb	r3, [r2, #0]
10055a34:	6871      	ldr	r1, [r6, #4]
10055a36:	6a09      	ldr	r1, [r1, #32]
10055a38:	688b      	ldr	r3, [r1, #8]
10055a3a:	493e      	ldr	r1, [pc, #248]	@ (10055b34 <__arm_cp.14_2>)
10055a3c:	7ac9      	ldrb	r1, [r1, #11]
10055a3e:	0849      	lsrs	r1, r1, #1
10055a40:	1c4a      	adds	r2, r1, #1
10055a42:	2104      	movs	r1, #4
10055a44:	9004      	str	r0, [sp, #16]
10055a46:	9203      	str	r2, [sp, #12]
10055a48:	9302      	str	r3, [sp, #8]
10055a4a:	f000 f875 	bl	10055b38 <GAT_srv_get_zip_val>
10055a4e:	9a05      	ldr	r2, [sp, #20]
10055a50:	4601      	mov	r1, r0
10055a52:	4011      	ands	r1, r2
10055a54:	4281      	cmp	r1, r0
10055a56:	d157      	bne.n	10055b08 <GAT_srv_attr_value_write+0x124>
10055a58:	9802      	ldr	r0, [sp, #8]
10055a5a:	9000      	str	r0, [sp, #0]
10055a5c:	2104      	movs	r1, #4
10055a5e:	9804      	ldr	r0, [sp, #16]
10055a60:	9b03      	ldr	r3, [sp, #12]
10055a62:	f000 f87c 	bl	10055b5e <GAT_srv_set_zip_val>
10055a66:	6870      	ldr	r0, [r6, #4]
10055a68:	6a00      	ldr	r0, [r0, #32]
10055a6a:	7800      	ldrb	r0, [r0, #0]
10055a6c:	07c0      	lsls	r0, r0, #31
10055a6e:	d03a      	beq.n	10055ae6 <GAT_srv_attr_value_write+0x102>
10055a70:	882e      	ldrh	r6, [r5, #0]
10055a72:	4628      	mov	r0, r5
10055a74:	f000 ff95 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10055a78:	4602      	mov	r2, r0
10055a7a:	a808      	add	r0, sp, #32
10055a7c:	8800      	ldrh	r0, [r0, #0]
10055a7e:	a907      	add	r1, sp, #28
10055a80:	e04c      	b.n	10055b1c <GAT_srv_attr_value_write+0x138>
10055a82:	6871      	ldr	r1, [r6, #4]
10055a84:	6988      	ldr	r0, [r1, #24]
10055a86:	2800      	cmp	r0, #0
10055a88:	d039      	beq.n	10055afe <GAT_srv_attr_value_write+0x11a>
10055a8a:	7d0a      	ldrb	r2, [r1, #20]
10055a8c:	2a10      	cmp	r2, #16
10055a8e:	d130      	bne.n	10055af2 <GAT_srv_attr_value_write+0x10e>
10055a90:	8a09      	ldrh	r1, [r1, #16]
10055a92:	4a26      	ldr	r2, [pc, #152]	@ (10055b2c <__arm_cp.14_0>)
10055a94:	4291      	cmp	r1, r2
10055a96:	d12c      	bne.n	10055af2 <GAT_srv_attr_value_write+0x10e>
10055a98:	9700      	str	r7, [sp, #0]
10055a9a:	2102      	movs	r1, #2
10055a9c:	aa06      	add	r2, sp, #24
10055a9e:	ab08      	add	r3, sp, #32
10055aa0:	4628      	mov	r0, r5
10055aa2:	f7fe fcc0 	bl	10054426 <GAT_att_srv_extract_write_packet_data>
10055aa6:	2800      	cmp	r0, #0
10055aa8:	d12a      	bne.n	10055b00 <GAT_srv_attr_value_write+0x11c>
10055aaa:	a806      	add	r0, sp, #24
10055aac:	8800      	ldrh	r0, [r0, #0]
10055aae:	9005      	str	r0, [sp, #20]
10055ab0:	8870      	ldrh	r0, [r6, #2]
10055ab2:	1e80      	subs	r0, r0, #2
10055ab4:	b281      	uxth	r1, r0
10055ab6:	2002      	movs	r0, #2
10055ab8:	f00c f920 	bl	10061cfc <GAT_att_db_reverse_find_attr_of_type>
10055abc:	2800      	cmp	r0, #0
10055abe:	d021      	beq.n	10055b04 <GAT_srv_attr_value_write+0x120>
10055ac0:	9905      	ldr	r1, [sp, #20]
10055ac2:	0789      	lsls	r1, r1, #30
10055ac4:	0e89      	lsrs	r1, r1, #26
10055ac6:	6840      	ldr	r0, [r0, #4]
10055ac8:	7800      	ldrb	r0, [r0, #0]
10055aca:	4008      	ands	r0, r1
10055acc:	4288      	cmp	r0, r1
10055ace:	d119      	bne.n	10055b04 <GAT_srv_attr_value_write+0x120>
10055ad0:	a806      	add	r0, sp, #24
10055ad2:	8802      	ldrh	r2, [r0, #0]
10055ad4:	8828      	ldrh	r0, [r5, #0]
10055ad6:	4631      	mov	r1, r6
10055ad8:	f000 f882 	bl	10055be0 <GAT_srv_set_cccd_val>
10055adc:	6870      	ldr	r0, [r6, #4]
10055ade:	6980      	ldr	r0, [r0, #24]
10055ae0:	7800      	ldrb	r0, [r0, #0]
10055ae2:	07c0      	lsls	r0, r0, #31
10055ae4:	d112      	bne.n	10055b0c <GAT_srv_attr_value_write+0x128>
10055ae6:	2000      	movs	r0, #0
10055ae8:	e00a      	b.n	10055b00 <GAT_srv_attr_value_write+0x11c>
10055aea:	2003      	movs	r0, #3
10055aec:	7038      	strb	r0, [r7, #0]
10055aee:	2086      	movs	r0, #134	@ 0x86
10055af0:	e006      	b.n	10055b00 <GAT_srv_attr_value_write+0x11c>
10055af2:	4621      	mov	r1, r4
10055af4:	462a      	mov	r2, r5
10055af6:	463b      	mov	r3, r7
10055af8:	f000 f847 	bl	10055b8a <GAT_srv_attr_direct_value_write>
10055afc:	e000      	b.n	10055b00 <GAT_srv_attr_value_write+0x11c>
10055afe:	2084      	movs	r0, #132	@ 0x84
10055b00:	b009      	add	sp, #36	@ 0x24
10055b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055b04:	20fd      	movs	r0, #253	@ 0xfd
10055b06:	e7f1      	b.n	10055aec <GAT_srv_attr_value_write+0x108>
10055b08:	2013      	movs	r0, #19
10055b0a:	e7ef      	b.n	10055aec <GAT_srv_attr_value_write+0x108>
10055b0c:	882e      	ldrh	r6, [r5, #0]
10055b0e:	4628      	mov	r0, r5
10055b10:	f000 ff47 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10055b14:	4602      	mov	r2, r0
10055b16:	a808      	add	r0, sp, #32
10055b18:	8800      	ldrh	r0, [r0, #0]
10055b1a:	a906      	add	r1, sp, #24
10055b1c:	9000      	str	r0, [sp, #0]
10055b1e:	9101      	str	r1, [sp, #4]
10055b20:	2002      	movs	r0, #2
10055b22:	4631      	mov	r1, r6
10055b24:	4623      	mov	r3, r4
10055b26:	f00a fd59 	bl	100605dc <aci_gatt_srv_attribute_modified_event_push_noinline>
10055b2a:	e7e9      	b.n	10055b00 <GAT_srv_attr_value_write+0x11c>

10055b2c <__arm_cp.14_0>:
10055b2c:	00002902 	.word	0x00002902

10055b30 <__arm_cp.14_1>:
10055b30:	00002b29 	.word	0x00002b29

10055b34 <__arm_cp.14_2>:
10055b34:	20000f34 	.word	0x20000f34

10055b38 <GAT_srv_get_zip_val>:
10055b38:	b510      	push	{r4, lr}
10055b3a:	4348      	muls	r0, r1
10055b3c:	08c4      	lsrs	r4, r0, #3
10055b3e:	b2a4      	uxth	r4, r4
10055b40:	4294      	cmp	r4, r2
10055b42:	d901      	bls.n	10055b48 <GAT_srv_get_zip_val+0x10>
10055b44:	2000      	movs	r0, #0
10055b46:	bd10      	pop	{r4, pc}
10055b48:	2207      	movs	r2, #7
10055b4a:	4010      	ands	r0, r2
10055b4c:	5d1a      	ldrb	r2, [r3, r4]
10055b4e:	40c2      	lsrs	r2, r0
10055b50:	2020      	movs	r0, #32
10055b52:	1a41      	subs	r1, r0, r1
10055b54:	2000      	movs	r0, #0
10055b56:	43c0      	mvns	r0, r0
10055b58:	40c8      	lsrs	r0, r1
10055b5a:	4010      	ands	r0, r2
10055b5c:	bd10      	pop	{r4, pc}

10055b5e <GAT_srv_set_zip_val>:
10055b5e:	b5b0      	push	{r4, r5, r7, lr}
10055b60:	4348      	muls	r0, r1
10055b62:	08c4      	lsrs	r4, r0, #3
10055b64:	b2a4      	uxth	r4, r4
10055b66:	429c      	cmp	r4, r3
10055b68:	d80e      	bhi.n	10055b88 <GAT_srv_set_zip_val+0x2a>
10055b6a:	9b04      	ldr	r3, [sp, #16]
10055b6c:	2507      	movs	r5, #7
10055b6e:	4028      	ands	r0, r5
10055b70:	2520      	movs	r5, #32
10055b72:	1a69      	subs	r1, r5, r1
10055b74:	2500      	movs	r5, #0
10055b76:	43ed      	mvns	r5, r5
10055b78:	40cd      	lsrs	r5, r1
10055b7a:	402a      	ands	r2, r5
10055b7c:	4082      	lsls	r2, r0
10055b7e:	4085      	lsls	r5, r0
10055b80:	5d18      	ldrb	r0, [r3, r4]
10055b82:	43a8      	bics	r0, r5
10055b84:	4310      	orrs	r0, r2
10055b86:	5518      	strb	r0, [r3, r4]
10055b88:	bdb0      	pop	{r4, r5, r7, pc}

10055b8a <GAT_srv_attr_direct_value_write>:
10055b8a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055b8c:	4616      	mov	r6, r2
10055b8e:	460c      	mov	r4, r1
10055b90:	4605      	mov	r5, r0
10055b92:	6882      	ldr	r2, [r0, #8]
10055b94:	8881      	ldrh	r1, [r0, #4]
10055b96:	9300      	str	r3, [sp, #0]
10055b98:	ab02      	add	r3, sp, #8
10055b9a:	4630      	mov	r0, r6
10055b9c:	f7fe fc43 	bl	10054426 <GAT_att_srv_extract_write_packet_data>
10055ba0:	2800      	cmp	r0, #0
10055ba2:	d000      	beq.n	10055ba6 <GAT_srv_attr_direct_value_write+0x1c>
10055ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10055ba6:	7828      	ldrb	r0, [r5, #0]
10055ba8:	0781      	lsls	r1, r0, #30
10055baa:	d403      	bmi.n	10055bb4 <GAT_srv_attr_direct_value_write+0x2a>
10055bac:	88a9      	ldrh	r1, [r5, #4]
10055bae:	aa02      	add	r2, sp, #8
10055bb0:	8011      	strh	r1, [r2, #0]
10055bb2:	e001      	b.n	10055bb8 <GAT_srv_attr_direct_value_write+0x2e>
10055bb4:	9902      	ldr	r1, [sp, #8]
10055bb6:	8069      	strh	r1, [r5, #2]
10055bb8:	07c0      	lsls	r0, r0, #31
10055bba:	d101      	bne.n	10055bc0 <GAT_srv_attr_direct_value_write+0x36>
10055bbc:	2000      	movs	r0, #0
10055bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10055bc0:	8837      	ldrh	r7, [r6, #0]
10055bc2:	4630      	mov	r0, r6
10055bc4:	f000 feed 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10055bc8:	4602      	mov	r2, r0
10055bca:	a802      	add	r0, sp, #8
10055bcc:	8800      	ldrh	r0, [r0, #0]
10055bce:	68a9      	ldr	r1, [r5, #8]
10055bd0:	9000      	str	r0, [sp, #0]
10055bd2:	9101      	str	r1, [sp, #4]
10055bd4:	2002      	movs	r0, #2
10055bd6:	4639      	mov	r1, r7
10055bd8:	4623      	mov	r3, r4
10055bda:	f00a fcff 	bl	100605dc <aci_gatt_srv_attribute_modified_event_push_noinline>
10055bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055be0 <GAT_srv_set_cccd_val>:
10055be0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10055be2:	4614      	mov	r4, r2
10055be4:	460d      	mov	r5, r1
10055be6:	f7fe f8f9 	bl	10053ddc <GAT_att_cmn_get_conn_index>
10055bea:	6869      	ldr	r1, [r5, #4]
10055bec:	6989      	ldr	r1, [r1, #24]
10055bee:	888b      	ldrh	r3, [r1, #4]
10055bf0:	6889      	ldr	r1, [r1, #8]
10055bf2:	9100      	str	r1, [sp, #0]
10055bf4:	2103      	movs	r1, #3
10055bf6:	400c      	ands	r4, r1
10055bf8:	2102      	movs	r1, #2
10055bfa:	4622      	mov	r2, r4
10055bfc:	f7ff ffaf 	bl	10055b5e <GAT_srv_set_zip_val>
10055c00:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10055c04 <GAT_srv_is_supported_grouping_type>:
10055c04:	b570      	push	{r4, r5, r6, lr}
10055c06:	b08a      	sub	sp, #40	@ 0x28
10055c08:	4604      	mov	r4, r0
10055c0a:	ad05      	add	r5, sp, #20
10055c0c:	a10d      	add	r1, pc, #52	@ (adr r1, 10055c44 <GAT_srv_is_supported_grouping_type+0x40>)
10055c0e:	2614      	movs	r6, #20
10055c10:	4628      	mov	r0, r5
10055c12:	4632      	mov	r2, r6
10055c14:	f00f f88b 	bl	10064d2e <__aeabi_memcpy>
10055c18:	4668      	mov	r0, sp
10055c1a:	a10f      	add	r1, pc, #60	@ (adr r1, 10055c58 <GAT_srv_is_supported_grouping_type+0x54>)
10055c1c:	4632      	mov	r2, r6
10055c1e:	f00f f886 	bl	10064d2e <__aeabi_memcpy>
10055c22:	4620      	mov	r0, r4
10055c24:	4629      	mov	r1, r5
10055c26:	f00a f84b 	bl	1005fcc0 <UUID_cmp_128bits>
10055c2a:	2800      	cmp	r0, #0
10055c2c:	d007      	beq.n	10055c3e <GAT_srv_is_supported_grouping_type+0x3a>
10055c2e:	4669      	mov	r1, sp
10055c30:	4620      	mov	r0, r4
10055c32:	f00a f845 	bl	1005fcc0 <UUID_cmp_128bits>
10055c36:	4601      	mov	r1, r0
10055c38:	4240      	negs	r0, r0
10055c3a:	4148      	adcs	r0, r1
10055c3c:	e000      	b.n	10055c40 <GAT_srv_is_supported_grouping_type+0x3c>
10055c3e:	2001      	movs	r0, #1
10055c40:	b00a      	add	sp, #40	@ 0x28
10055c42:	bd70      	pop	{r4, r5, r6, pc}
10055c44:	5f9b34fb 	.word	0x5f9b34fb
10055c48:	80000080 	.word	0x80000080
10055c4c:	00001000 	.word	0x00001000
10055c50:	00002800 	.word	0x00002800
10055c54:	00000010 	.word	0x00000010
10055c58:	5f9b34fb 	.word	0x5f9b34fb
10055c5c:	80000080 	.word	0x80000080
10055c60:	00001000 	.word	0x00001000
10055c64:	00002801 	.word	0x00002801
10055c68:	00000010 	.word	0x00000010

10055c6c <GAT_srv_set_change_aware>:
10055c6c:	b5e0      	push	{r5, r6, r7, lr}
10055c6e:	aa01      	add	r2, sp, #4
10055c70:	21c2      	movs	r1, #194	@ 0xc2
10055c72:	8011      	strh	r1, [r2, #0]
10055c74:	8901      	ldrh	r1, [r0, #8]
10055c76:	9200      	str	r2, [sp, #0]
10055c78:	2001      	movs	r0, #1
10055c7a:	2200      	movs	r2, #0
10055c7c:	4b01      	ldr	r3, [pc, #4]	@ (10055c84 <__arm_cp.21_0>)
10055c7e:	f7fd ff45 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
10055c82:	bd8c      	pop	{r2, r3, r7, pc}

10055c84 <__arm_cp.21_0>:
10055c84:	10053dd1 	.word	0x10053dd1

10055c88 <GAT_srv_check_change_aware>:
10055c88:	b5f0      	push	{r4, r5, r6, r7, lr}
10055c8a:	b087      	sub	sp, #28
10055c8c:	4605      	mov	r5, r0
10055c8e:	ac02      	add	r4, sp, #8
10055c90:	4927      	ldr	r1, [pc, #156]	@ (10055d30 <__arm_cp.22_0>)
10055c92:	2214      	movs	r2, #20
10055c94:	4620      	mov	r0, r4
10055c96:	f00f f84a 	bl	10064d2e <__aeabi_memcpy>
10055c9a:	2001      	movs	r0, #1
10055c9c:	4e25      	ldr	r6, [pc, #148]	@ (10055d34 <__arm_cp.22_1>)
10055c9e:	4631      	mov	r1, r6
10055ca0:	4622      	mov	r2, r4
10055ca2:	f000 f84d 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
10055ca6:	2700      	movs	r7, #0
10055ca8:	2800      	cmp	r0, #0
10055caa:	d03c      	beq.n	10055d26 <GAT_srv_check_change_aware+0x9e>
10055cac:	4601      	mov	r1, r0
10055cae:	6828      	ldr	r0, [r5, #0]
10055cb0:	8882      	ldrh	r2, [r0, #4]
10055cb2:	0652      	lsls	r2, r2, #25
10055cb4:	d537      	bpl.n	10055d26 <GAT_srv_check_change_aware+0x9e>
10055cb6:	792a      	ldrb	r2, [r5, #4]
10055cb8:	23fe      	movs	r3, #254	@ 0xfe
10055cba:	4013      	ands	r3, r2
10055cbc:	2486      	movs	r4, #134	@ 0x86
10055cbe:	2b04      	cmp	r3, #4
10055cc0:	d032      	beq.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055cc2:	8900      	ldrh	r0, [r0, #8]
10055cc4:	2201      	movs	r2, #1
10055cc6:	f000 f85b 	bl	10055d80 <GAT_srv_check_client_support_feature>
10055cca:	2881      	cmp	r0, #129	@ 0x81
10055ccc:	d02b      	beq.n	10055d26 <GAT_srv_check_change_aware+0x9e>
10055cce:	6828      	ldr	r0, [r5, #0]
10055cd0:	8881      	ldrh	r1, [r0, #4]
10055cd2:	060a      	lsls	r2, r1, #24
10055cd4:	d425      	bmi.n	10055d22 <GAT_srv_check_change_aware+0x9a>
10055cd6:	2780      	movs	r7, #128	@ 0x80
10055cd8:	4339      	orrs	r1, r7
10055cda:	8081      	strh	r1, [r0, #4]
10055cdc:	7928      	ldrb	r0, [r5, #4]
10055cde:	2802      	cmp	r0, #2
10055ce0:	d122      	bne.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055ce2:	8928      	ldrh	r0, [r5, #8]
10055ce4:	2801      	cmp	r0, #1
10055ce6:	d11f      	bne.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055ce8:	8968      	ldrh	r0, [r5, #10]
10055cea:	42b0      	cmp	r0, r6
10055cec:	d11c      	bne.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055cee:	68ea      	ldr	r2, [r5, #12]
10055cf0:	7c10      	ldrb	r0, [r2, #16]
10055cf2:	2810      	cmp	r0, #16
10055cf4:	d118      	bne.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055cf6:	8990      	ldrh	r0, [r2, #12]
10055cf8:	490f      	ldr	r1, [pc, #60]	@ (10055d38 <__arm_cp.22_2>)
10055cfa:	4288      	cmp	r0, r1
10055cfc:	d114      	bne.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055cfe:	2001      	movs	r0, #1
10055d00:	4631      	mov	r1, r6
10055d02:	f000 f81d 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
10055d06:	2800      	cmp	r0, #0
10055d08:	d00e      	beq.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055d0a:	a801      	add	r0, sp, #4
10055d0c:	8007      	strh	r7, [r0, #0]
10055d0e:	6829      	ldr	r1, [r5, #0]
10055d10:	8909      	ldrh	r1, [r1, #8]
10055d12:	9000      	str	r0, [sp, #0]
10055d14:	2001      	movs	r0, #1
10055d16:	2400      	movs	r4, #0
10055d18:	4b08      	ldr	r3, [pc, #32]	@ (10055d3c <__arm_cp.22_3>)
10055d1a:	4622      	mov	r2, r4
10055d1c:	f7fd fef6 	bl	10053b0c <GAT_att_cmn_for_each_ch_descr>
10055d20:	e002      	b.n	10055d28 <GAT_srv_check_change_aware+0xa0>
10055d22:	f7ff ffa3 	bl	10055c6c <GAT_srv_set_change_aware>
10055d26:	463c      	mov	r4, r7
10055d28:	4620      	mov	r0, r4
10055d2a:	b007      	add	sp, #28
10055d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055d2e:	46c0      	nop			@ (mov r8, r8)

10055d30 <__arm_cp.22_0>:
10055d30:	1006608c 	.word	0x1006608c

10055d34 <__arm_cp.22_1>:
10055d34:	0000ffff 	.word	0x0000ffff

10055d38 <__arm_cp.22_2>:
10055d38:	00002b2a 	.word	0x00002b2a

10055d3c <__arm_cp.22_3>:
10055d3c:	10053dc5 	.word	0x10053dc5

10055d40 <GAT_srv_find_by_type_attr_p>:
10055d40:	b5f0      	push	{r4, r5, r6, r7, lr}
10055d42:	b085      	sub	sp, #20
10055d44:	4614      	mov	r4, r2
10055d46:	460d      	mov	r5, r1
10055d48:	f00b feca 	bl	10061ae0 <GAT_att_db_find_from_handle>
10055d4c:	4606      	mov	r6, r0
10055d4e:	2000      	movs	r0, #0
10055d50:	2e00      	cmp	r6, #0
10055d52:	d012      	beq.n	10055d7a <GAT_srv_find_by_type_attr_p+0x3a>
10055d54:	8871      	ldrh	r1, [r6, #2]
10055d56:	42a9      	cmp	r1, r5
10055d58:	d80f      	bhi.n	10055d7a <GAT_srv_find_by_type_attr_p+0x3a>
10055d5a:	466f      	mov	r7, sp
10055d5c:	4630      	mov	r0, r6
10055d5e:	4639      	mov	r1, r7
10055d60:	f7ff fc7e 	bl	10055660 <GAT_srv_get_attr_type>
10055d64:	4620      	mov	r0, r4
10055d66:	4639      	mov	r1, r7
10055d68:	f009 ff93 	bl	1005fc92 <UUID_cmp>
10055d6c:	2800      	cmp	r0, #0
10055d6e:	d003      	beq.n	10055d78 <GAT_srv_find_by_type_attr_p+0x38>
10055d70:	4630      	mov	r0, r6
10055d72:	f00b ff17 	bl	10061ba4 <GAT_att_db_get_next>
10055d76:	e7e9      	b.n	10055d4c <GAT_srv_find_by_type_attr_p+0xc>
10055d78:	4630      	mov	r0, r6
10055d7a:	b005      	add	sp, #20
10055d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10055d80 <GAT_srv_check_client_support_feature>:
10055d80:	b570      	push	{r4, r5, r6, lr}
10055d82:	b086      	sub	sp, #24
10055d84:	4614      	mov	r4, r2
10055d86:	460e      	mov	r6, r1
10055d88:	4605      	mov	r5, r0
10055d8a:	a801      	add	r0, sp, #4
10055d8c:	4910      	ldr	r1, [pc, #64]	@ (10055dd0 <__arm_cp.24_0>)
10055d8e:	2214      	movs	r2, #20
10055d90:	f00e ffcd 	bl	10064d2e <__aeabi_memcpy>
10055d94:	2e00      	cmp	r6, #0
10055d96:	d107      	bne.n	10055da8 <GAT_srv_check_client_support_feature+0x28>
10055d98:	2001      	movs	r0, #1
10055d9a:	490e      	ldr	r1, [pc, #56]	@ (10055dd4 <__arm_cp.24_1>)
10055d9c:	aa01      	add	r2, sp, #4
10055d9e:	f7ff ffcf 	bl	10055d40 <GAT_srv_find_by_type_attr_p>
10055da2:	4606      	mov	r6, r0
10055da4:	2800      	cmp	r0, #0
10055da6:	d010      	beq.n	10055dca <GAT_srv_check_client_support_feature+0x4a>
10055da8:	4628      	mov	r0, r5
10055daa:	f7fe f817 	bl	10053ddc <GAT_att_cmn_get_conn_index>
10055dae:	6871      	ldr	r1, [r6, #4]
10055db0:	6a09      	ldr	r1, [r1, #32]
10055db2:	688b      	ldr	r3, [r1, #8]
10055db4:	4908      	ldr	r1, [pc, #32]	@ (10055dd8 <__arm_cp.24_2>)
10055db6:	7ac9      	ldrb	r1, [r1, #11]
10055db8:	0849      	lsrs	r1, r1, #1
10055dba:	1c4a      	adds	r2, r1, #1
10055dbc:	2104      	movs	r1, #4
10055dbe:	f7ff febb 	bl	10055b38 <GAT_srv_get_zip_val>
10055dc2:	4220      	tst	r0, r4
10055dc4:	d001      	beq.n	10055dca <GAT_srv_check_client_support_feature+0x4a>
10055dc6:	2000      	movs	r0, #0
10055dc8:	e000      	b.n	10055dcc <GAT_srv_check_client_support_feature+0x4c>
10055dca:	2081      	movs	r0, #129	@ 0x81
10055dcc:	b006      	add	sp, #24
10055dce:	bd70      	pop	{r4, r5, r6, pc}

10055dd0 <__arm_cp.24_0>:
10055dd0:	1006608c 	.word	0x1006608c

10055dd4 <__arm_cp.24_1>:
10055dd4:	0000ffff 	.word	0x0000ffff

10055dd8 <__arm_cp.24_2>:
10055dd8:	20000f34 	.word	0x20000f34

10055ddc <GAT_srv_get_attribute_handle>:
10055ddc:	b580      	push	{r7, lr}
10055dde:	f00b fea9 	bl	10061b34 <GAT_att_db_find_by_def>
10055de2:	2800      	cmp	r0, #0
10055de4:	d001      	beq.n	10055dea <GAT_srv_get_attribute_handle+0xe>
10055de6:	8840      	ldrh	r0, [r0, #2]
10055de8:	bd80      	pop	{r7, pc}
10055dea:	2000      	movs	r0, #0
10055dec:	bd80      	pop	{r7, pc}
	...

10055df0 <GAT_srv_get_cccd_attr_p>:
10055df0:	b570      	push	{r4, r5, r6, lr}
10055df2:	b08a      	sub	sp, #40	@ 0x28
10055df4:	4605      	mov	r5, r0
10055df6:	a805      	add	r0, sp, #20
10055df8:	a110      	add	r1, pc, #64	@ (adr r1, 10055e3c <GAT_srv_get_cccd_attr_p+0x4c>)
10055dfa:	2214      	movs	r2, #20
10055dfc:	f00e ff97 	bl	10064d2e <__aeabi_memcpy>
10055e00:	7828      	ldrb	r0, [r5, #0]
10055e02:	21fe      	movs	r1, #254	@ 0xfe
10055e04:	4001      	ands	r1, r0
10055e06:	2400      	movs	r4, #0
10055e08:	2902      	cmp	r1, #2
10055e0a:	d114      	bne.n	10055e36 <GAT_srv_get_cccd_attr_p+0x46>
10055e0c:	4628      	mov	r0, r5
10055e0e:	f00b fec9 	bl	10061ba4 <GAT_att_db_get_next>
10055e12:	4605      	mov	r5, r0
10055e14:	2800      	cmp	r0, #0
10055e16:	d00e      	beq.n	10055e36 <GAT_srv_get_cccd_attr_p+0x46>
10055e18:	7828      	ldrb	r0, [r5, #0]
10055e1a:	2802      	cmp	r0, #2
10055e1c:	d00b      	beq.n	10055e36 <GAT_srv_get_cccd_attr_p+0x46>
10055e1e:	466e      	mov	r6, sp
10055e20:	4628      	mov	r0, r5
10055e22:	4631      	mov	r1, r6
10055e24:	f7ff fc1c 	bl	10055660 <GAT_srv_get_attr_type>
10055e28:	a805      	add	r0, sp, #20
10055e2a:	4631      	mov	r1, r6
10055e2c:	f009 ff31 	bl	1005fc92 <UUID_cmp>
10055e30:	2800      	cmp	r0, #0
10055e32:	d1eb      	bne.n	10055e0c <GAT_srv_get_cccd_attr_p+0x1c>
10055e34:	462c      	mov	r4, r5
10055e36:	4620      	mov	r0, r4
10055e38:	b00a      	add	sp, #40	@ 0x28
10055e3a:	bd70      	pop	{r4, r5, r6, pc}
10055e3c:	5f9b34fb 	.word	0x5f9b34fb
10055e40:	80000080 	.word	0x80000080
10055e44:	00001000 	.word	0x00001000
10055e48:	00002902 	.word	0x00002902
10055e4c:	00000010 	.word	0x00000010

10055e50 <GAT_srv_get_cccd_val>:
10055e50:	b510      	push	{r4, lr}
10055e52:	460c      	mov	r4, r1
10055e54:	f7fd ffc2 	bl	10053ddc <GAT_att_cmn_get_conn_index>
10055e58:	6861      	ldr	r1, [r4, #4]
10055e5a:	6989      	ldr	r1, [r1, #24]
10055e5c:	688b      	ldr	r3, [r1, #8]
10055e5e:	888a      	ldrh	r2, [r1, #4]
10055e60:	2102      	movs	r1, #2
10055e62:	f7ff fe69 	bl	10055b38 <GAT_srv_get_zip_val>
10055e66:	bd10      	pop	{r4, pc}

10055e68 <GAT_srv_aes_cmac_append>:
10055e68:	b5f0      	push	{r4, r5, r6, r7, lr}
10055e6a:	b085      	sub	sp, #20
10055e6c:	9203      	str	r2, [sp, #12]
10055e6e:	460c      	mov	r4, r1
10055e70:	2101      	movs	r1, #1
10055e72:	0209      	lsls	r1, r1, #8
10055e74:	1841      	adds	r1, r0, r1
10055e76:	9104      	str	r1, [sp, #16]
10055e78:	9002      	str	r0, [sp, #8]
10055e7a:	30e0      	adds	r0, #224	@ 0xe0
10055e7c:	9001      	str	r0, [sp, #4]
10055e7e:	0420      	lsls	r0, r4, #16
10055e80:	d023      	beq.n	10055eca <GAT_srv_aes_cmac_append+0x62>
10055e82:	9804      	ldr	r0, [sp, #16]
10055e84:	8800      	ldrh	r0, [r0, #0]
10055e86:	2810      	cmp	r0, #16
10055e88:	d107      	bne.n	10055e9a <GAT_srv_aes_cmac_append+0x32>
10055e8a:	2210      	movs	r2, #16
10055e8c:	9802      	ldr	r0, [sp, #8]
10055e8e:	9901      	ldr	r1, [sp, #4]
10055e90:	f7f9 fd42 	bl	1004f918 <BLEPLAT_AesCMACEncryptAppend>
10055e94:	2000      	movs	r0, #0
10055e96:	9904      	ldr	r1, [sp, #16]
10055e98:	8008      	strh	r0, [r1, #0]
10055e9a:	2110      	movs	r1, #16
10055e9c:	1a0d      	subs	r5, r1, r0
10055e9e:	b2a9      	uxth	r1, r5
10055ea0:	b2a2      	uxth	r2, r4
10055ea2:	4291      	cmp	r1, r2
10055ea4:	d300      	bcc.n	10055ea8 <GAT_srv_aes_cmac_append+0x40>
10055ea6:	4625      	mov	r5, r4
10055ea8:	b2af      	uxth	r7, r5
10055eaa:	9902      	ldr	r1, [sp, #8]
10055eac:	1808      	adds	r0, r1, r0
10055eae:	30e0      	adds	r0, #224	@ 0xe0
10055eb0:	9e03      	ldr	r6, [sp, #12]
10055eb2:	4631      	mov	r1, r6
10055eb4:	463a      	mov	r2, r7
10055eb6:	f7f9 fcc5 	bl	1004f844 <BLEPLAT_MemCpy>
10055eba:	9904      	ldr	r1, [sp, #16]
10055ebc:	8808      	ldrh	r0, [r1, #0]
10055ebe:	1828      	adds	r0, r5, r0
10055ec0:	8008      	strh	r0, [r1, #0]
10055ec2:	1b64      	subs	r4, r4, r5
10055ec4:	19f6      	adds	r6, r6, r7
10055ec6:	9603      	str	r6, [sp, #12]
10055ec8:	e7d9      	b.n	10055e7e <GAT_srv_aes_cmac_append+0x16>
10055eca:	b005      	add	sp, #20
10055ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10055ed0 <GAT_srv_add_service>:
10055ed0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055ed2:	4604      	mov	r4, r0
10055ed4:	f000 f89c 	bl	10056010 <GAT_srv_db_update_allowed>
10055ed8:	250c      	movs	r5, #12
10055eda:	2800      	cmp	r0, #0
10055edc:	d025      	beq.n	10055f2a <GAT_srv_add_service+0x5a>
10055ede:	2612      	movs	r6, #18
10055ee0:	2c00      	cmp	r4, #0
10055ee2:	d023      	beq.n	10055f2c <GAT_srv_add_service+0x5c>
10055ee4:	7d20      	ldrb	r0, [r4, #20]
10055ee6:	1e40      	subs	r0, r0, #1
10055ee8:	2801      	cmp	r0, #1
10055eea:	d81f      	bhi.n	10055f2c <GAT_srv_add_service+0x5c>
10055eec:	7c20      	ldrb	r0, [r4, #16]
10055eee:	2880      	cmp	r0, #128	@ 0x80
10055ef0:	d01e      	beq.n	10055f30 <GAT_srv_add_service+0x60>
10055ef2:	2810      	cmp	r0, #16
10055ef4:	d11a      	bne.n	10055f2c <GAT_srv_add_service+0x5c>
10055ef6:	89a0      	ldrh	r0, [r4, #12]
10055ef8:	2101      	movs	r1, #1
10055efa:	4388      	bics	r0, r1
10055efc:	2103      	movs	r1, #3
10055efe:	02c9      	lsls	r1, r1, #11
10055f00:	4288      	cmp	r0, r1
10055f02:	d115      	bne.n	10055f30 <GAT_srv_add_service+0x60>
10055f04:	2001      	movs	r0, #1
10055f06:	f00b fdeb 	bl	10061ae0 <GAT_att_db_find_from_handle>
10055f0a:	2800      	cmp	r0, #0
10055f0c:	d010      	beq.n	10055f30 <GAT_srv_add_service+0x60>
10055f0e:	7801      	ldrb	r1, [r0, #0]
10055f10:	2900      	cmp	r1, #0
10055f12:	d107      	bne.n	10055f24 <GAT_srv_add_service+0x54>
10055f14:	6841      	ldr	r1, [r0, #4]
10055f16:	7c0a      	ldrb	r2, [r1, #16]
10055f18:	2a10      	cmp	r2, #16
10055f1a:	d103      	bne.n	10055f24 <GAT_srv_add_service+0x54>
10055f1c:	8989      	ldrh	r1, [r1, #12]
10055f1e:	89a2      	ldrh	r2, [r4, #12]
10055f20:	428a      	cmp	r2, r1
10055f22:	d002      	beq.n	10055f2a <GAT_srv_add_service+0x5a>
10055f24:	f00b fe3e 	bl	10061ba4 <GAT_att_db_get_next>
10055f28:	e7ef      	b.n	10055f0a <GAT_srv_add_service+0x3a>
10055f2a:	462e      	mov	r6, r5
10055f2c:	4630      	mov	r0, r6
10055f2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10055f30:	2000      	movs	r0, #0
10055f32:	f00b fecd 	bl	10061cd0 <GAT_att_db_find_last_attr_of_type>
10055f36:	2800      	cmp	r0, #0
10055f38:	d006      	beq.n	10055f48 <GAT_srv_add_service+0x78>
10055f3a:	6841      	ldr	r1, [r0, #4]
10055f3c:	8ac9      	ldrh	r1, [r1, #22]
10055f3e:	2900      	cmp	r1, #0
10055f40:	d004      	beq.n	10055f4c <GAT_srv_add_service+0x7c>
10055f42:	8840      	ldrh	r0, [r0, #2]
10055f44:	1840      	adds	r0, r0, r1
10055f46:	e004      	b.n	10055f52 <GAT_srv_add_service+0x82>
10055f48:	2001      	movs	r0, #1
10055f4a:	e002      	b.n	10055f52 <GAT_srv_add_service+0x82>
10055f4c:	f00b fe6e 	bl	10061c2c <GAT_att_db_get_last_handle>
10055f50:	1c40      	adds	r0, r0, #1
10055f52:	b282      	uxth	r2, r0
10055f54:	2600      	movs	r6, #0
10055f56:	4630      	mov	r0, r6
10055f58:	4631      	mov	r1, r6
10055f5a:	4623      	mov	r3, r4
10055f5c:	f00b fd44 	bl	100619e8 <GAT_att_db_insert>
10055f60:	2800      	cmp	r0, #0
10055f62:	d020      	beq.n	10055fa6 <GAT_srv_add_service+0xd6>
10055f64:	43f7      	mvns	r7, r6
10055f66:	8ae1      	ldrh	r1, [r4, #22]
10055f68:	1e49      	subs	r1, r1, #1
10055f6a:	9102      	str	r1, [sp, #8]
10055f6c:	9000      	str	r0, [sp, #0]
10055f6e:	9401      	str	r4, [sp, #4]
10055f70:	1c7f      	adds	r7, r7, #1
10055f72:	7e21      	ldrb	r1, [r4, #24]
10055f74:	428f      	cmp	r7, r1
10055f76:	d218      	bcs.n	10055faa <GAT_srv_add_service+0xda>
10055f78:	8ae1      	ldrh	r1, [r4, #22]
10055f7a:	2900      	cmp	r1, #0
10055f7c:	d004      	beq.n	10055f88 <GAT_srv_add_service+0xb8>
10055f7e:	9a02      	ldr	r2, [sp, #8]
10055f80:	0411      	lsls	r1, r2, #16
10055f82:	d03a      	beq.n	10055ffa <GAT_srv_add_service+0x12a>
10055f84:	1e52      	subs	r2, r2, #1
10055f86:	9202      	str	r2, [sp, #8]
10055f88:	1d35      	adds	r5, r6, #4
10055f8a:	1c40      	adds	r0, r0, #1
10055f8c:	9c01      	ldr	r4, [sp, #4]
10055f8e:	69e1      	ldr	r1, [r4, #28]
10055f90:	598b      	ldr	r3, [r1, r6]
10055f92:	b282      	uxth	r2, r0
10055f94:	2001      	movs	r0, #1
10055f96:	2100      	movs	r1, #0
10055f98:	f00b fd26 	bl	100619e8 <GAT_att_db_insert>
10055f9c:	2800      	cmp	r0, #0
10055f9e:	462e      	mov	r6, r5
10055fa0:	d1e6      	bne.n	10055f70 <GAT_srv_add_service+0xa0>
10055fa2:	2687      	movs	r6, #135	@ 0x87
10055fa4:	e02e      	b.n	10056004 <GAT_srv_add_service+0x134>
10055fa6:	2687      	movs	r6, #135	@ 0x87
10055fa8:	e7c0      	b.n	10055f2c <GAT_srv_add_service+0x5c>
10055faa:	4818      	ldr	r0, [pc, #96]	@ (1005600c <__arm_cp.0_0>)
10055fac:	6800      	ldr	r0, [r0, #0]
10055fae:	215c      	movs	r1, #92	@ 0x5c
10055fb0:	5c42      	ldrb	r2, [r0, r1]
10055fb2:	2302      	movs	r3, #2
10055fb4:	4313      	orrs	r3, r2
10055fb6:	5443      	strb	r3, [r0, r1]
10055fb8:	200a      	movs	r0, #10
10055fba:	f009 fcd9 	bl	1005f970 <tsk_notify_idx>
10055fbe:	f7f8 fe80 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10055fc2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10055fc4:	2600      	movs	r6, #0
10055fc6:	2800      	cmp	r0, #0
10055fc8:	d0b0      	beq.n	10055f2c <GAT_srv_add_service+0x5c>
10055fca:	2020      	movs	r0, #32
10055fcc:	5c20      	ldrb	r0, [r4, r0]
10055fce:	2800      	cmp	r0, #0
10055fd0:	d0ac      	beq.n	10055f2c <GAT_srv_add_service+0x5c>
10055fd2:	4621      	mov	r1, r4
10055fd4:	3120      	adds	r1, #32
10055fd6:	9102      	str	r1, [sp, #8]
10055fd8:	2500      	movs	r5, #0
10055fda:	462f      	mov	r7, r5
10055fdc:	9501      	str	r5, [sp, #4]
10055fde:	4285      	cmp	r5, r0
10055fe0:	9900      	ldr	r1, [sp, #0]
10055fe2:	d20c      	bcs.n	10055ffe <GAT_srv_add_service+0x12e>
10055fe4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10055fe6:	19c0      	adds	r0, r0, r7
10055fe8:	f000 f822 	bl	10056030 <GAT_srv_add_characteristic>
10055fec:	2800      	cmp	r0, #0
10055fee:	d108      	bne.n	10056002 <GAT_srv_add_service+0x132>
10055ff0:	3724      	adds	r7, #36	@ 0x24
10055ff2:	9802      	ldr	r0, [sp, #8]
10055ff4:	7800      	ldrb	r0, [r0, #0]
10055ff6:	1c6d      	adds	r5, r5, #1
10055ff8:	e7f1      	b.n	10055fde <GAT_srv_add_service+0x10e>
10055ffa:	2612      	movs	r6, #18
10055ffc:	e002      	b.n	10056004 <GAT_srv_add_service+0x134>
10055ffe:	9e01      	ldr	r6, [sp, #4]
10056000:	e794      	b.n	10055f2c <GAT_srv_add_service+0x5c>
10056002:	4606      	mov	r6, r0
10056004:	9800      	ldr	r0, [sp, #0]
10056006:	f000 f8a3 	bl	10056150 <GAT_srv_rm_service>
1005600a:	e78f      	b.n	10055f2c <GAT_srv_add_service+0x5c>

1005600c <__arm_cp.0_0>:
1005600c:	20000ed8 	.word	0x20000ed8

10056010 <GAT_srv_db_update_allowed>:
10056010:	b510      	push	{r4, lr}
10056012:	f7fe fac3 	bl	1005459c <GAT_att_srv_request_user_pending>
10056016:	2400      	movs	r4, #0
10056018:	2800      	cmp	r0, #0
1005601a:	d106      	bne.n	1005602a <GAT_srv_db_update_allowed+0x1a>
1005601c:	f7fe faac 	bl	10054578 <GAT_att_srv_confirmation_pending>
10056020:	2800      	cmp	r0, #0
10056022:	d102      	bne.n	1005602a <GAT_srv_db_update_allowed+0x1a>
10056024:	f7fe fad2 	bl	100545cc <GAT_att_srv_flush_user_pending_list>
10056028:	2401      	movs	r4, #1
1005602a:	4620      	mov	r0, r4
1005602c:	bd10      	pop	{r4, pc}
	...

10056030 <GAT_srv_add_characteristic>:
10056030:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056032:	460e      	mov	r6, r1
10056034:	4604      	mov	r4, r0
10056036:	f7ff ffeb 	bl	10056010 <GAT_srv_db_update_allowed>
1005603a:	2800      	cmp	r0, #0
1005603c:	d066      	beq.n	1005610c <GAT_srv_add_characteristic+0xdc>
1005603e:	2512      	movs	r5, #18
10056040:	2c00      	cmp	r4, #0
10056042:	d064      	beq.n	1005610e <GAT_srv_add_characteristic+0xde>
10056044:	7d20      	ldrb	r0, [r4, #20]
10056046:	2880      	cmp	r0, #128	@ 0x80
10056048:	d013      	beq.n	10056072 <GAT_srv_add_characteristic+0x42>
1005604a:	2810      	cmp	r0, #16
1005604c:	d15f      	bne.n	1005610e <GAT_srv_add_characteristic+0xde>
1005604e:	8a20      	ldrh	r0, [r4, #16]
10056050:	493c      	ldr	r1, [pc, #240]	@ (10056144 <__arm_cp.2_0>)
10056052:	4288      	cmp	r0, r1
10056054:	d10d      	bne.n	10056072 <GAT_srv_add_characteristic+0x42>
10056056:	6a20      	ldr	r0, [r4, #32]
10056058:	2800      	cmp	r0, #0
1005605a:	d058      	beq.n	1005610e <GAT_srv_add_characteristic+0xde>
1005605c:	8882      	ldrh	r2, [r0, #4]
1005605e:	493a      	ldr	r1, [pc, #232]	@ (10056148 <__arm_cp.2_1>)
10056060:	7ac9      	ldrb	r1, [r1, #11]
10056062:	0849      	lsrs	r1, r1, #1
10056064:	1c49      	adds	r1, r1, #1
10056066:	428a      	cmp	r2, r1
10056068:	d351      	bcc.n	1005610e <GAT_srv_add_characteristic+0xde>
1005606a:	6880      	ldr	r0, [r0, #8]
1005606c:	2100      	movs	r1, #0
1005606e:	f7f9 fbf9 	bl	1004f864 <BLEPLAT_MemSet>
10056072:	78a0      	ldrb	r0, [r4, #2]
10056074:	2124      	movs	r1, #36	@ 0x24
10056076:	4208      	tst	r0, r1
10056078:	d003      	beq.n	10056082 <GAT_srv_add_characteristic+0x52>
1005607a:	7860      	ldrb	r0, [r4, #1]
1005607c:	1fc0      	subs	r0, r0, #7
1005607e:	2809      	cmp	r0, #9
10056080:	d845      	bhi.n	1005610e <GAT_srv_add_characteristic+0xde>
10056082:	4630      	mov	r0, r6
10056084:	f00b fd04 	bl	10061a90 <GAT_att_db_find_by_handle>
10056088:	2800      	cmp	r0, #0
1005608a:	d040      	beq.n	1005610e <GAT_srv_add_characteristic+0xde>
1005608c:	4606      	mov	r6, r0
1005608e:	7800      	ldrb	r0, [r0, #0]
10056090:	2800      	cmp	r0, #0
10056092:	d13c      	bne.n	1005610e <GAT_srv_add_characteristic+0xde>
10056094:	7e20      	ldrb	r0, [r4, #24]
10056096:	1c81      	adds	r1, r0, #2
10056098:	4630      	mov	r0, r6
1005609a:	f000 f883 	bl	100561a4 <GAT_srv_check_group_size>
1005609e:	4605      	mov	r5, r0
100560a0:	2800      	cmp	r0, #0
100560a2:	d134      	bne.n	1005610e <GAT_srv_add_characteristic+0xde>
100560a4:	4630      	mov	r0, r6
100560a6:	f7ff fb03 	bl	100556b0 <GAT_srv_get_att_group_end_handle>
100560aa:	4605      	mov	r5, r0
100560ac:	f00b fcf0 	bl	10061a90 <GAT_att_db_find_by_handle>
100560b0:	4601      	mov	r1, r0
100560b2:	1c68      	adds	r0, r5, #1
100560b4:	b286      	uxth	r6, r0
100560b6:	2702      	movs	r7, #2
100560b8:	4638      	mov	r0, r7
100560ba:	4632      	mov	r2, r6
100560bc:	4623      	mov	r3, r4
100560be:	f00b fc93 	bl	100619e8 <GAT_att_db_insert>
100560c2:	42b0      	cmp	r0, r6
100560c4:	d125      	bne.n	10056112 <GAT_srv_add_characteristic+0xe2>
100560c6:	4630      	mov	r0, r6
100560c8:	f00b fce2 	bl	10061a90 <GAT_att_db_find_by_handle>
100560cc:	4601      	mov	r1, r0
100560ce:	1ca8      	adds	r0, r5, #2
100560d0:	b282      	uxth	r2, r0
100560d2:	2003      	movs	r0, #3
100560d4:	4623      	mov	r3, r4
100560d6:	f00b fc87 	bl	100619e8 <GAT_att_db_insert>
100560da:	2800      	cmp	r0, #0
100560dc:	d029      	beq.n	10056132 <GAT_srv_add_characteristic+0x102>
100560de:	9701      	str	r7, [sp, #4]
100560e0:	9602      	str	r6, [sp, #8]
100560e2:	69e0      	ldr	r0, [r4, #28]
100560e4:	2800      	cmp	r0, #0
100560e6:	d016      	beq.n	10056116 <GAT_srv_add_characteristic+0xe6>
100560e8:	7e20      	ldrb	r0, [r4, #24]
100560ea:	2800      	cmp	r0, #0
100560ec:	d013      	beq.n	10056116 <GAT_srv_add_characteristic+0xe6>
100560ee:	2600      	movs	r6, #0
100560f0:	4637      	mov	r7, r6
100560f2:	4287      	cmp	r7, r0
100560f4:	d20f      	bcs.n	10056116 <GAT_srv_add_characteristic+0xe6>
100560f6:	69e0      	ldr	r0, [r4, #28]
100560f8:	1980      	adds	r0, r0, r6
100560fa:	9902      	ldr	r1, [sp, #8]
100560fc:	f000 f86c 	bl	100561d8 <GAT_srv_add_char_descriptor>
10056100:	2800      	cmp	r0, #0
10056102:	d118      	bne.n	10056136 <GAT_srv_add_characteristic+0x106>
10056104:	361c      	adds	r6, #28
10056106:	7e20      	ldrb	r0, [r4, #24]
10056108:	1c7f      	adds	r7, r7, #1
1005610a:	e7f2      	b.n	100560f2 <GAT_srv_add_characteristic+0xc2>
1005610c:	250c      	movs	r5, #12
1005610e:	4628      	mov	r0, r5
10056110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056112:	2587      	movs	r5, #135	@ 0x87
10056114:	e7fb      	b.n	1005610e <GAT_srv_add_characteristic+0xde>
10056116:	480d      	ldr	r0, [pc, #52]	@ (1005614c <__arm_cp.2_2>)
10056118:	6800      	ldr	r0, [r0, #0]
1005611a:	215c      	movs	r1, #92	@ 0x5c
1005611c:	5c42      	ldrb	r2, [r0, r1]
1005611e:	9b01      	ldr	r3, [sp, #4]
10056120:	431a      	orrs	r2, r3
10056122:	5442      	strb	r2, [r0, r1]
10056124:	200a      	movs	r0, #10
10056126:	f009 fc23 	bl	1005f970 <tsk_notify_idx>
1005612a:	f7f8 fdca 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005612e:	2500      	movs	r5, #0
10056130:	e7ed      	b.n	1005610e <GAT_srv_add_characteristic+0xde>
10056132:	2587      	movs	r5, #135	@ 0x87
10056134:	e001      	b.n	1005613a <GAT_srv_add_characteristic+0x10a>
10056136:	4605      	mov	r5, r0
10056138:	9e02      	ldr	r6, [sp, #8]
1005613a:	4630      	mov	r0, r6
1005613c:	f000 f8d4 	bl	100562e8 <GAT_srv_rm_characteristic>
10056140:	e7e5      	b.n	1005610e <GAT_srv_add_characteristic+0xde>
10056142:	46c0      	nop			@ (mov r8, r8)

10056144 <__arm_cp.2_0>:
10056144:	00002b29 	.word	0x00002b29

10056148 <__arm_cp.2_1>:
10056148:	20000f34 	.word	0x20000f34

1005614c <__arm_cp.2_2>:
1005614c:	20000ed8 	.word	0x20000ed8

10056150 <GAT_srv_rm_service>:
10056150:	b510      	push	{r4, lr}
10056152:	4604      	mov	r4, r0
10056154:	f7ff ff5c 	bl	10056010 <GAT_srv_db_update_allowed>
10056158:	2800      	cmp	r0, #0
1005615a:	d00a      	beq.n	10056172 <GAT_srv_rm_service+0x22>
1005615c:	4620      	mov	r0, r4
1005615e:	f00b fc97 	bl	10061a90 <GAT_att_db_find_by_handle>
10056162:	4601      	mov	r1, r0
10056164:	2012      	movs	r0, #18
10056166:	2900      	cmp	r1, #0
10056168:	d002      	beq.n	10056170 <GAT_srv_rm_service+0x20>
1005616a:	780a      	ldrb	r2, [r1, #0]
1005616c:	2a00      	cmp	r2, #0
1005616e:	d002      	beq.n	10056176 <GAT_srv_rm_service+0x26>
10056170:	bd10      	pop	{r4, pc}
10056172:	200c      	movs	r0, #12
10056174:	bd10      	pop	{r4, pc}
10056176:	4608      	mov	r0, r1
10056178:	f00b fd28 	bl	10061bcc <GAT_att_db_get_last_group_handle>
1005617c:	4601      	mov	r1, r0
1005617e:	4620      	mov	r0, r4
10056180:	f00b fd64 	bl	10061c4c <GAT_att_db_rm_att_range>
10056184:	4806      	ldr	r0, [pc, #24]	@ (100561a0 <__arm_cp.3_0>)
10056186:	6800      	ldr	r0, [r0, #0]
10056188:	215c      	movs	r1, #92	@ 0x5c
1005618a:	5c42      	ldrb	r2, [r0, r1]
1005618c:	2302      	movs	r3, #2
1005618e:	4313      	orrs	r3, r2
10056190:	5443      	strb	r3, [r0, r1]
10056192:	200a      	movs	r0, #10
10056194:	f009 fbec 	bl	1005f970 <tsk_notify_idx>
10056198:	f7f8 fd93 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005619c:	2000      	movs	r0, #0
1005619e:	bd10      	pop	{r4, pc}

100561a0 <__arm_cp.3_0>:
100561a0:	20000ed8 	.word	0x20000ed8

100561a4 <GAT_srv_check_group_size>:
100561a4:	b5b0      	push	{r4, r5, r7, lr}
100561a6:	460d      	mov	r5, r1
100561a8:	4604      	mov	r4, r0
100561aa:	f7ff fa81 	bl	100556b0 <GAT_srv_get_att_group_end_handle>
100561ae:	6861      	ldr	r1, [r4, #4]
100561b0:	8ac9      	ldrh	r1, [r1, #22]
100561b2:	2900      	cmp	r1, #0
100561b4:	d008      	beq.n	100561c8 <GAT_srv_check_group_size+0x24>
100561b6:	43c0      	mvns	r0, r0
100561b8:	1808      	adds	r0, r1, r0
100561ba:	8861      	ldrh	r1, [r4, #2]
100561bc:	1840      	adds	r0, r0, r1
100561be:	b280      	uxth	r0, r0
100561c0:	42a8      	cmp	r0, r5
100561c2:	d306      	bcc.n	100561d2 <GAT_srv_check_group_size+0x2e>
100561c4:	2000      	movs	r0, #0
100561c6:	bdb0      	pop	{r4, r5, r7, pc}
100561c8:	2000      	movs	r0, #0
100561ca:	f00b fd81 	bl	10061cd0 <GAT_att_db_find_last_attr_of_type>
100561ce:	42a0      	cmp	r0, r4
100561d0:	d0f8      	beq.n	100561c4 <GAT_srv_check_group_size+0x20>
100561d2:	200c      	movs	r0, #12
100561d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

100561d8 <GAT_srv_add_char_descriptor>:
100561d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100561da:	460e      	mov	r6, r1
100561dc:	4604      	mov	r4, r0
100561de:	f7ff ff17 	bl	10056010 <GAT_srv_db_update_allowed>
100561e2:	2800      	cmp	r0, #0
100561e4:	d075      	beq.n	100562d2 <GAT_srv_add_char_descriptor+0xfa>
100561e6:	2512      	movs	r5, #18
100561e8:	2c00      	cmp	r4, #0
100561ea:	d073      	beq.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
100561ec:	7d20      	ldrb	r0, [r4, #20]
100561ee:	2880      	cmp	r0, #128	@ 0x80
100561f0:	d001      	beq.n	100561f6 <GAT_srv_add_char_descriptor+0x1e>
100561f2:	2810      	cmp	r0, #16
100561f4:	d16e      	bne.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
100561f6:	2810      	cmp	r0, #16
100561f8:	d108      	bne.n	1005620c <GAT_srv_add_char_descriptor+0x34>
100561fa:	8a21      	ldrh	r1, [r4, #16]
100561fc:	2229      	movs	r2, #41	@ 0x29
100561fe:	0212      	lsls	r2, r2, #8
10056200:	1c92      	adds	r2, r2, #2
10056202:	4291      	cmp	r1, r2
10056204:	d102      	bne.n	1005620c <GAT_srv_add_char_descriptor+0x34>
10056206:	69a1      	ldr	r1, [r4, #24]
10056208:	2900      	cmp	r1, #0
1005620a:	d063      	beq.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005620c:	78a1      	ldrb	r1, [r4, #2]
1005620e:	2224      	movs	r2, #36	@ 0x24
10056210:	4211      	tst	r1, r2
10056212:	d003      	beq.n	1005621c <GAT_srv_add_char_descriptor+0x44>
10056214:	7862      	ldrb	r2, [r4, #1]
10056216:	1fd2      	subs	r2, r2, #7
10056218:	2a09      	cmp	r2, #9
1005621a:	d85b      	bhi.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005621c:	2810      	cmp	r0, #16
1005621e:	d115      	bne.n	1005624c <GAT_srv_add_char_descriptor+0x74>
10056220:	8a20      	ldrh	r0, [r4, #16]
10056222:	4a2f      	ldr	r2, [pc, #188]	@ (100562e0 <__arm_cp.7_0>)
10056224:	1882      	adds	r2, r0, r2
10056226:	2a05      	cmp	r2, #5
10056228:	d810      	bhi.n	1005624c <GAT_srv_add_char_descriptor+0x74>
1005622a:	2301      	movs	r3, #1
1005622c:	4093      	lsls	r3, r2
1005622e:	2231      	movs	r2, #49	@ 0x31
10056230:	4213      	tst	r3, r2
10056232:	d00b      	beq.n	1005624c <GAT_srv_add_char_descriptor+0x74>
10056234:	7822      	ldrb	r2, [r4, #0]
10056236:	2a01      	cmp	r2, #1
10056238:	d14c      	bne.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005623a:	2900      	cmp	r1, #0
1005623c:	d14a      	bne.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005623e:	2129      	movs	r1, #41	@ 0x29
10056240:	0209      	lsls	r1, r1, #8
10056242:	4288      	cmp	r0, r1
10056244:	d102      	bne.n	1005624c <GAT_srv_add_char_descriptor+0x74>
10056246:	69a0      	ldr	r0, [r4, #24]
10056248:	2800      	cmp	r0, #0
1005624a:	d043      	beq.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005624c:	4630      	mov	r0, r6
1005624e:	f00b fc1f 	bl	10061a90 <GAT_att_db_find_by_handle>
10056252:	2800      	cmp	r0, #0
10056254:	d03e      	beq.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
10056256:	4607      	mov	r7, r0
10056258:	7800      	ldrb	r0, [r0, #0]
1005625a:	2802      	cmp	r0, #2
1005625c:	d13a      	bne.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005625e:	2500      	movs	r5, #0
10056260:	4628      	mov	r0, r5
10056262:	4631      	mov	r1, r6
10056264:	f00b fd4a 	bl	10061cfc <GAT_att_db_reverse_find_attr_of_type>
10056268:	2800      	cmp	r0, #0
1005626a:	d035      	beq.n	100562d8 <GAT_srv_add_char_descriptor+0x100>
1005626c:	462e      	mov	r6, r5
1005626e:	2101      	movs	r1, #1
10056270:	f7ff ff98 	bl	100561a4 <GAT_srv_check_group_size>
10056274:	4605      	mov	r5, r0
10056276:	2800      	cmp	r0, #0
10056278:	d12c      	bne.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
1005627a:	4638      	mov	r0, r7
1005627c:	f7ff fa18 	bl	100556b0 <GAT_srv_get_att_group_end_handle>
10056280:	4605      	mov	r5, r0
10056282:	f00b fc05 	bl	10061a90 <GAT_att_db_find_by_handle>
10056286:	4601      	mov	r1, r0
10056288:	1c6d      	adds	r5, r5, #1
1005628a:	b2aa      	uxth	r2, r5
1005628c:	2004      	movs	r0, #4
1005628e:	4623      	mov	r3, r4
10056290:	f00b fbaa 	bl	100619e8 <GAT_att_db_insert>
10056294:	4285      	cmp	r5, r0
10056296:	d121      	bne.n	100562dc <GAT_srv_add_char_descriptor+0x104>
10056298:	7d20      	ldrb	r0, [r4, #20]
1005629a:	2810      	cmp	r0, #16
1005629c:	d10b      	bne.n	100562b6 <GAT_srv_add_char_descriptor+0xde>
1005629e:	8a20      	ldrh	r0, [r4, #16]
100562a0:	2129      	movs	r1, #41	@ 0x29
100562a2:	0209      	lsls	r1, r1, #8
100562a4:	1c89      	adds	r1, r1, #2
100562a6:	4288      	cmp	r0, r1
100562a8:	d105      	bne.n	100562b6 <GAT_srv_add_char_descriptor+0xde>
100562aa:	69a0      	ldr	r0, [r4, #24]
100562ac:	8882      	ldrh	r2, [r0, #4]
100562ae:	6880      	ldr	r0, [r0, #8]
100562b0:	2100      	movs	r1, #0
100562b2:	f7f9 fad7 	bl	1004f864 <BLEPLAT_MemSet>
100562b6:	480b      	ldr	r0, [pc, #44]	@ (100562e4 <__arm_cp.7_1>)
100562b8:	6800      	ldr	r0, [r0, #0]
100562ba:	215c      	movs	r1, #92	@ 0x5c
100562bc:	5c42      	ldrb	r2, [r0, r1]
100562be:	2302      	movs	r3, #2
100562c0:	4313      	orrs	r3, r2
100562c2:	5443      	strb	r3, [r0, r1]
100562c4:	200a      	movs	r0, #10
100562c6:	f009 fb53 	bl	1005f970 <tsk_notify_idx>
100562ca:	f7f8 fcfa 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
100562ce:	4635      	mov	r5, r6
100562d0:	e000      	b.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
100562d2:	250c      	movs	r5, #12
100562d4:	4628      	mov	r0, r5
100562d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100562d8:	2586      	movs	r5, #134	@ 0x86
100562da:	e7fb      	b.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>
100562dc:	2587      	movs	r5, #135	@ 0x87
100562de:	e7f9      	b.n	100562d4 <GAT_srv_add_char_descriptor+0xfc>

100562e0 <__arm_cp.7_0>:
100562e0:	ffffd700 	.word	0xffffd700

100562e4 <__arm_cp.7_1>:
100562e4:	20000ed8 	.word	0x20000ed8

100562e8 <GAT_srv_rm_characteristic>:
100562e8:	b510      	push	{r4, lr}
100562ea:	4604      	mov	r4, r0
100562ec:	f7ff fe90 	bl	10056010 <GAT_srv_db_update_allowed>
100562f0:	2800      	cmp	r0, #0
100562f2:	d01e      	beq.n	10056332 <GAT_srv_rm_characteristic+0x4a>
100562f4:	4620      	mov	r0, r4
100562f6:	f00b fbcb 	bl	10061a90 <GAT_att_db_find_by_handle>
100562fa:	4601      	mov	r1, r0
100562fc:	2012      	movs	r0, #18
100562fe:	2900      	cmp	r1, #0
10056300:	d016      	beq.n	10056330 <GAT_srv_rm_characteristic+0x48>
10056302:	780a      	ldrb	r2, [r1, #0]
10056304:	2a02      	cmp	r2, #2
10056306:	d113      	bne.n	10056330 <GAT_srv_rm_characteristic+0x48>
10056308:	4608      	mov	r0, r1
1005630a:	f00b fc5f 	bl	10061bcc <GAT_att_db_get_last_group_handle>
1005630e:	4601      	mov	r1, r0
10056310:	4620      	mov	r0, r4
10056312:	f00b fc9b 	bl	10061c4c <GAT_att_db_rm_att_range>
10056316:	4808      	ldr	r0, [pc, #32]	@ (10056338 <__arm_cp.8_0>)
10056318:	6800      	ldr	r0, [r0, #0]
1005631a:	215c      	movs	r1, #92	@ 0x5c
1005631c:	5c42      	ldrb	r2, [r0, r1]
1005631e:	2302      	movs	r3, #2
10056320:	4313      	orrs	r3, r2
10056322:	5443      	strb	r3, [r0, r1]
10056324:	200a      	movs	r0, #10
10056326:	f009 fb23 	bl	1005f970 <tsk_notify_idx>
1005632a:	f7f8 fcca 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005632e:	2000      	movs	r0, #0
10056330:	bd10      	pop	{r4, pc}
10056332:	200c      	movs	r0, #12
10056334:	bd10      	pop	{r4, pc}
10056336:	46c0      	nop			@ (mov r8, r8)

10056338 <__arm_cp.8_0>:
10056338:	20000ed8 	.word	0x20000ed8

1005633c <GAT_srv_resp>:
1005633c:	b51c      	push	{r2, r3, r4, lr}
1005633e:	9c05      	ldr	r4, [sp, #20]
10056340:	9401      	str	r4, [sp, #4]
10056342:	9c04      	ldr	r4, [sp, #16]
10056344:	9400      	str	r4, [sp, #0]
10056346:	f7fe f893 	bl	10054470 <GAT_att_srv_resp>
1005634a:	bd1c      	pop	{r2, r3, r4, pc}

1005634c <GAT_srv_get_service_handle>:
1005634c:	b580      	push	{r7, lr}
1005634e:	4603      	mov	r3, r0
10056350:	2001      	movs	r0, #1
10056352:	4902      	ldr	r1, [pc, #8]	@ (1005635c <__arm_cp.14_0>)
10056354:	2200      	movs	r2, #0
10056356:	f7ff fd41 	bl	10055ddc <GAT_srv_get_attribute_handle>
1005635a:	bd80      	pop	{r7, pc}

1005635c <__arm_cp.14_0>:
1005635c:	0000ffff 	.word	0x0000ffff

10056360 <GAT_srv_get_char_decl_handle>:
10056360:	b580      	push	{r7, lr}
10056362:	4603      	mov	r3, r0
10056364:	2001      	movs	r0, #1
10056366:	4902      	ldr	r1, [pc, #8]	@ (10056370 <__arm_cp.16_0>)
10056368:	2202      	movs	r2, #2
1005636a:	f7ff fd37 	bl	10055ddc <GAT_srv_get_attribute_handle>
1005636e:	bd80      	pop	{r7, pc}

10056370 <__arm_cp.16_0>:
10056370:	0000ffff 	.word	0x0000ffff

10056374 <hci_rx_acl_data>:
10056374:	b5f0      	push	{r4, r5, r6, r7, lr}
10056376:	b085      	sub	sp, #20
10056378:	4604      	mov	r4, r0
1005637a:	7887      	ldrb	r7, [r0, #2]
1005637c:	1e78      	subs	r0, r7, #1
1005637e:	2103      	movs	r1, #3
10056380:	9104      	str	r1, [sp, #16]
10056382:	4308      	orrs	r0, r1
10056384:	3009      	adds	r0, #9
10056386:	0880      	lsrs	r0, r0, #2
10056388:	b283      	uxth	r3, r0
1005638a:	7a20      	ldrb	r0, [r4, #8]
1005638c:	9003      	str	r0, [sp, #12]
1005638e:	8820      	ldrh	r0, [r4, #0]
10056390:	9002      	str	r0, [sp, #8]
10056392:	4811      	ldr	r0, [pc, #68]	@ (100563d8 <__arm_cp.2_0>)
10056394:	6800      	ldr	r0, [r0, #0]
10056396:	6980      	ldr	r0, [r0, #24]
10056398:	2502      	movs	r5, #2
1005639a:	223e      	movs	r2, #62	@ 0x3e
1005639c:	4629      	mov	r1, r5
1005639e:	f7fb ff9d 	bl	100522dc <aci_event_fifo_push_header>
100563a2:	2800      	cmp	r0, #0
100563a4:	d014      	beq.n	100563d0 <hci_rx_acl_data+0x5c>
100563a6:	4606      	mov	r6, r0
100563a8:	9700      	str	r7, [sp, #0]
100563aa:	9401      	str	r4, [sp, #4]
100563ac:	9804      	ldr	r0, [sp, #16]
100563ae:	9a03      	ldr	r2, [sp, #12]
100563b0:	4002      	ands	r2, r0
100563b2:	1d30      	adds	r0, r6, #4
100563b4:	2700      	movs	r7, #0
100563b6:	9902      	ldr	r1, [sp, #8]
100563b8:	463b      	mov	r3, r7
100563ba:	f7fc fcf6 	bl	10052daa <hci_rx_acl_data_event_copy>
100563be:	7135      	strb	r5, [r6, #4]
100563c0:	4628      	mov	r0, r5
100563c2:	4631      	mov	r1, r6
100563c4:	f7fc f827 	bl	10052416 <aci_event_fifo_push>
100563c8:	4620      	mov	r0, r4
100563ca:	f7fb fdd3 	bl	10051f74 <ACL_pkt_release>
100563ce:	e000      	b.n	100563d2 <hci_rx_acl_data+0x5e>
100563d0:	2707      	movs	r7, #7
100563d2:	4638      	mov	r0, r7
100563d4:	b005      	add	sp, #20
100563d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100563d8 <__arm_cp.2_0>:
100563d8:	20000ed0 	.word	0x20000ed0

100563dc <hci_tx_acl_data_done>:
100563dc:	b5b0      	push	{r4, r5, r7, lr}
100563de:	4604      	mov	r4, r0
100563e0:	8801      	ldrh	r1, [r0, #0]
100563e2:	2002      	movs	r0, #2
100563e4:	f00a fe38 	bl	10061058 <hci_number_of_completed_packets_event_push_noinline>
100563e8:	4605      	mov	r5, r0
100563ea:	2800      	cmp	r0, #0
100563ec:	d102      	bne.n	100563f4 <hci_tx_acl_data_done+0x18>
100563ee:	4620      	mov	r0, r4
100563f0:	f7fb fdc0 	bl	10051f74 <ACL_pkt_release>
100563f4:	4628      	mov	r0, r5
100563f6:	bdb0      	pop	{r4, r5, r7, pc}

100563f8 <hci_le_set_advertising_parameters>:
100563f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100563fa:	b089      	sub	sp, #36	@ 0x24
100563fc:	461d      	mov	r5, r3
100563fe:	4616      	mov	r6, r2
10056400:	460f      	mov	r7, r1
10056402:	9004      	str	r0, [sp, #16]
10056404:	2002      	movs	r0, #2
10056406:	2401      	movs	r4, #1
10056408:	4621      	mov	r1, r4
1005640a:	f000 f8d9 	bl	100565c0 <hci_get_set_legacy_ext_flag>
1005640e:	2800      	cmp	r0, #0
10056410:	d150      	bne.n	100564b4 <hci_le_set_advertising_parameters+0xbc>
10056412:	9703      	str	r7, [sp, #12]
10056414:	2012      	movs	r0, #18
10056416:	2e04      	cmp	r6, #4
10056418:	d84c      	bhi.n	100564b4 <hci_le_set_advertising_parameters+0xbc>
1005641a:	9002      	str	r0, [sp, #8]
1005641c:	f7f5 fcd6 	bl	1004bdcc <conn_supp_csr_ucfg>
10056420:	2e01      	cmp	r6, #1
10056422:	d803      	bhi.n	1005642c <hci_le_set_advertising_parameters+0x34>
10056424:	2800      	cmp	r0, #0
10056426:	d101      	bne.n	1005642c <hci_le_set_advertising_parameters+0x34>
10056428:	2011      	movs	r0, #17
1005642a:	e043      	b.n	100564b4 <hci_le_set_advertising_parameters+0xbc>
1005642c:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005642e:	9000      	str	r0, [sp, #0]
10056430:	9810      	ldr	r0, [sp, #64]	@ 0x40
10056432:	9001      	str	r0, [sp, #4]
10056434:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10056436:	980e      	ldr	r0, [sp, #56]	@ 0x38
10056438:	af05      	add	r7, sp, #20
1005643a:	7238      	strb	r0, [r7, #8]
1005643c:	71fd      	strb	r5, [r7, #7]
1005643e:	713e      	strb	r6, [r7, #4]
10056440:	9803      	ldr	r0, [sp, #12]
10056442:	8078      	strh	r0, [r7, #2]
10056444:	9804      	ldr	r0, [sp, #16]
10056446:	8038      	strh	r0, [r7, #0]
10056448:	4638      	mov	r0, r7
1005644a:	3009      	adds	r0, #9
1005644c:	2206      	movs	r2, #6
1005644e:	f7f9 f9f9 	bl	1004f844 <BLEPLAT_MemCpy>
10056452:	9900      	ldr	r1, [sp, #0]
10056454:	71b9      	strb	r1, [r7, #6]
10056456:	9801      	ldr	r0, [sp, #4]
10056458:	7178      	strb	r0, [r7, #5]
1005645a:	7938      	ldrb	r0, [r7, #4]
1005645c:	2804      	cmp	r0, #4
1005645e:	d001      	beq.n	10056464 <hci_le_set_advertising_parameters+0x6c>
10056460:	2801      	cmp	r0, #1
10056462:	d104      	bne.n	1005646e <hci_le_set_advertising_parameters+0x76>
10056464:	a905      	add	r1, sp, #20
10056466:	7a09      	ldrb	r1, [r1, #8]
10056468:	2902      	cmp	r1, #2
1005646a:	d302      	bcc.n	10056472 <hci_le_set_advertising_parameters+0x7a>
1005646c:	e021      	b.n	100564b2 <hci_le_set_advertising_parameters+0xba>
1005646e:	2903      	cmp	r1, #3
10056470:	d81f      	bhi.n	100564b2 <hci_le_set_advertising_parameters+0xba>
10056472:	2801      	cmp	r0, #1
10056474:	d10e      	bne.n	10056494 <hci_le_set_advertising_parameters+0x9c>
10056476:	f000 f966 	bl	10056746 <hci_le_check_own_address_type_max_value_ucfg_weak>
1005647a:	a905      	add	r1, sp, #20
1005647c:	79c9      	ldrb	r1, [r1, #7]
1005647e:	4281      	cmp	r1, r0
10056480:	d817      	bhi.n	100564b2 <hci_le_set_advertising_parameters+0xba>
10056482:	a805      	add	r0, sp, #20
10056484:	7940      	ldrb	r0, [r0, #5]
10056486:	0740      	lsls	r0, r0, #29
10056488:	9802      	ldr	r0, [sp, #8]
1005648a:	d013      	beq.n	100564b4 <hci_le_set_advertising_parameters+0xbc>
1005648c:	a805      	add	r0, sp, #20
1005648e:	f005 fde1 	bl	1005c054 <LL_LE_Set_Advertising_Parameters>
10056492:	e00f      	b.n	100564b4 <hci_le_set_advertising_parameters+0xbc>
10056494:	a805      	add	r0, sp, #20
10056496:	8800      	ldrh	r0, [r0, #0]
10056498:	2820      	cmp	r0, #32
1005649a:	d30a      	bcc.n	100564b2 <hci_le_set_advertising_parameters+0xba>
1005649c:	03a1      	lsls	r1, r4, #14
1005649e:	4288      	cmp	r0, r1
100564a0:	d807      	bhi.n	100564b2 <hci_le_set_advertising_parameters+0xba>
100564a2:	aa05      	add	r2, sp, #20
100564a4:	8852      	ldrh	r2, [r2, #2]
100564a6:	2a20      	cmp	r2, #32
100564a8:	d303      	bcc.n	100564b2 <hci_le_set_advertising_parameters+0xba>
100564aa:	428a      	cmp	r2, r1
100564ac:	d801      	bhi.n	100564b2 <hci_le_set_advertising_parameters+0xba>
100564ae:	4290      	cmp	r0, r2
100564b0:	d9e1      	bls.n	10056476 <hci_le_set_advertising_parameters+0x7e>
100564b2:	9802      	ldr	r0, [sp, #8]
100564b4:	b009      	add	sp, #36	@ 0x24
100564b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100564b8 <hci_le_set_advertising_enable>:
100564b8:	b510      	push	{r4, lr}
100564ba:	4604      	mov	r4, r0
100564bc:	2002      	movs	r0, #2
100564be:	2101      	movs	r1, #1
100564c0:	f000 f87e 	bl	100565c0 <hci_get_set_legacy_ext_flag>
100564c4:	2800      	cmp	r0, #0
100564c6:	d000      	beq.n	100564ca <hci_le_set_advertising_enable+0x12>
100564c8:	bd10      	pop	{r4, pc}
100564ca:	2c01      	cmp	r4, #1
100564cc:	d803      	bhi.n	100564d6 <hci_le_set_advertising_enable+0x1e>
100564ce:	4620      	mov	r0, r4
100564d0:	f005 fe44 	bl	1005c15c <LL_LE_Set_Advertise_Enable>
100564d4:	bd10      	pop	{r4, pc}
100564d6:	2012      	movs	r0, #18
100564d8:	bd10      	pop	{r4, pc}

100564da <chc_csr_ucfg_weak>:
100564da:	2000      	movs	r0, #0
100564dc:	4770      	bx	lr
	...

100564e0 <HCI_Init>:
100564e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100564e2:	4917      	ldr	r1, [pc, #92]	@ (10056540 <__arm_cp.0_0>)
100564e4:	6808      	ldr	r0, [r1, #0]
100564e6:	460d      	mov	r5, r1
100564e8:	2124      	movs	r1, #36	@ 0x24
100564ea:	2400      	movs	r4, #0
100564ec:	5444      	strb	r4, [r0, r1]
100564ee:	3025      	adds	r0, #37	@ 0x25
100564f0:	2211      	movs	r2, #17
100564f2:	4f14      	ldr	r7, [pc, #80]	@ (10056544 <__arm_cp.0_1>)
100564f4:	4621      	mov	r1, r4
100564f6:	47b8      	blx	r7
100564f8:	6828      	ldr	r0, [r5, #0]
100564fa:	3036      	adds	r0, #54	@ 0x36
100564fc:	26ff      	movs	r6, #255	@ 0xff
100564fe:	2205      	movs	r2, #5
10056500:	4631      	mov	r1, r6
10056502:	47b8      	blx	r7
10056504:	6829      	ldr	r1, [r5, #0]
10056506:	203b      	movs	r0, #59	@ 0x3b
10056508:	231f      	movs	r3, #31
1005650a:	540b      	strb	r3, [r1, r0]
1005650c:	2201      	movs	r2, #1
1005650e:	0355      	lsls	r5, r2, #13
10056510:	4608      	mov	r0, r1
10056512:	303b      	adds	r0, #59	@ 0x3b
10056514:	5285      	strh	r5, [r0, r2]
10056516:	72c3      	strb	r3, [r0, #11]
10056518:	3147      	adds	r1, #71	@ 0x47
1005651a:	2207      	movs	r2, #7
1005651c:	4608      	mov	r0, r1
1005651e:	4621      	mov	r1, r4
10056520:	47b8      	blx	r7
10056522:	4d07      	ldr	r5, [pc, #28]	@ (10056540 <__arm_cp.0_0>)
10056524:	6828      	ldr	r0, [r5, #0]
10056526:	304e      	adds	r0, #78	@ 0x4e
10056528:	2208      	movs	r2, #8
1005652a:	4631      	mov	r1, r6
1005652c:	47b8      	blx	r7
1005652e:	4806      	ldr	r0, [pc, #24]	@ (10056548 <__arm_cp.0_2>)
10056530:	6800      	ldr	r0, [r0, #0]
10056532:	2135      	movs	r1, #53	@ 0x35
10056534:	5444      	strb	r4, [r0, r1]
10056536:	6828      	ldr	r0, [r5, #0]
10056538:	4904      	ldr	r1, [pc, #16]	@ (1005654c <__arm_cp.0_3>)
1005653a:	6201      	str	r1, [r0, #32]
1005653c:	65c4      	str	r4, [r0, #92]	@ 0x5c
1005653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056540 <__arm_cp.0_0>:
10056540:	20000f20 	.word	0x20000f20

10056544 <__arm_cp.0_1>:
10056544:	1004f865 	.word	0x1004f865

10056548 <__arm_cp.0_2>:
10056548:	20000ecc 	.word	0x20000ecc

1005654c <__arm_cp.0_3>:
1005654c:	fffffdbe 	.word	0xfffffdbe

10056550 <Controller_Process_Q>:
10056550:	b570      	push	{r4, r5, r6, lr}
10056552:	2500      	movs	r5, #0
10056554:	4e07      	ldr	r6, [pc, #28]	@ (10056574 <__arm_cp.2_0>)
10056556:	7af0      	ldrb	r0, [r6, #11]
10056558:	4285      	cmp	r5, r0
1005655a:	d20a      	bcs.n	10056572 <Controller_Process_Q+0x22>
1005655c:	b2ec      	uxtb	r4, r5
1005655e:	4620      	mov	r0, r4
10056560:	f002 fcc6 	bl	10058ef0 <LL_cpe_engine>
10056564:	2800      	cmp	r0, #0
10056566:	d002      	beq.n	1005656e <Controller_Process_Q+0x1e>
10056568:	4620      	mov	r0, r4
1005656a:	f002 fcc1 	bl	10058ef0 <LL_cpe_engine>
1005656e:	1c6d      	adds	r5, r5, #1
10056570:	e7f1      	b.n	10056556 <Controller_Process_Q+0x6>
10056572:	bd70      	pop	{r4, r5, r6, pc}

10056574 <__arm_cp.2_0>:
10056574:	20000f34 	.word	0x20000f34

10056578 <hci_le_set_random_address>:
10056578:	b580      	push	{r7, lr}
1005657a:	f005 ffff 	bl	1005c57c <LL_Set_Advertising_Set_Random_Address>
1005657e:	bd80      	pop	{r7, pc}

10056580 <hci_set_event_mask>:
10056580:	b510      	push	{r4, lr}
10056582:	2136      	movs	r1, #54	@ 0x36
10056584:	4a05      	ldr	r2, [pc, #20]	@ (1005659c <__arm_cp.14_0>)
10056586:	293e      	cmp	r1, #62	@ 0x3e
10056588:	d006      	beq.n	10056598 <hci_set_event_mask+0x18>
1005658a:	1843      	adds	r3, r0, r1
1005658c:	3b36      	subs	r3, #54	@ 0x36
1005658e:	781b      	ldrb	r3, [r3, #0]
10056590:	6814      	ldr	r4, [r2, #0]
10056592:	5463      	strb	r3, [r4, r1]
10056594:	1c49      	adds	r1, r1, #1
10056596:	e7f6      	b.n	10056586 <hci_set_event_mask+0x6>
10056598:	2000      	movs	r0, #0
1005659a:	bd10      	pop	{r4, pc}

1005659c <__arm_cp.14_0>:
1005659c:	20000f20 	.word	0x20000f20

100565a0 <hci_le_set_event_mask>:
100565a0:	b510      	push	{r4, lr}
100565a2:	2146      	movs	r1, #70	@ 0x46
100565a4:	4a05      	ldr	r2, [pc, #20]	@ (100565bc <__arm_cp.16_0>)
100565a6:	294e      	cmp	r1, #78	@ 0x4e
100565a8:	d006      	beq.n	100565b8 <hci_le_set_event_mask+0x18>
100565aa:	1843      	adds	r3, r0, r1
100565ac:	3b46      	subs	r3, #70	@ 0x46
100565ae:	781b      	ldrb	r3, [r3, #0]
100565b0:	6814      	ldr	r4, [r2, #0]
100565b2:	5463      	strb	r3, [r4, r1]
100565b4:	1c49      	adds	r1, r1, #1
100565b6:	e7f6      	b.n	100565a6 <hci_le_set_event_mask+0x6>
100565b8:	2000      	movs	r0, #0
100565ba:	bd10      	pop	{r4, pc}

100565bc <__arm_cp.16_0>:
100565bc:	20000f20 	.word	0x20000f20

100565c0 <hci_get_set_legacy_ext_flag>:
100565c0:	4a05      	ldr	r2, [pc, #20]	@ (100565d8 <__arm_cp.18_0>)
100565c2:	6812      	ldr	r2, [r2, #0]
100565c4:	2335      	movs	r3, #53	@ 0x35
100565c6:	5cd3      	ldrb	r3, [r2, r3]
100565c8:	4203      	tst	r3, r0
100565ca:	d001      	beq.n	100565d0 <hci_get_set_legacy_ext_flag+0x10>
100565cc:	200c      	movs	r0, #12
100565ce:	4770      	bx	lr
100565d0:	3235      	adds	r2, #53	@ 0x35
100565d2:	7011      	strb	r1, [r2, #0]
100565d4:	2000      	movs	r0, #0
100565d6:	4770      	bx	lr

100565d8 <__arm_cp.18_0>:
100565d8:	20000ecc 	.word	0x20000ecc

100565dc <hci_check_legacy_ext_flag>:
100565dc:	4903      	ldr	r1, [pc, #12]	@ (100565ec <__arm_cp.25_0>)
100565de:	6809      	ldr	r1, [r1, #0]
100565e0:	2235      	movs	r2, #53	@ 0x35
100565e2:	5c89      	ldrb	r1, [r1, r2]
100565e4:	4008      	ands	r0, r1
100565e6:	1e41      	subs	r1, r0, #1
100565e8:	4188      	sbcs	r0, r1
100565ea:	4770      	bx	lr

100565ec <__arm_cp.25_0>:
100565ec:	20000ecc 	.word	0x20000ecc

100565f0 <LLC_offline_control_procedures_processing>:
100565f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100565f2:	2400      	movs	r4, #0
100565f4:	4620      	mov	r0, r4
100565f6:	f000 fd97 	bl	10057128 <llc_conn_get_cntxt_per_p>
100565fa:	4605      	mov	r5, r0
100565fc:	2201      	movs	r2, #1
100565fe:	4b30      	ldr	r3, [pc, #192]	@ (100566c0 <__arm_cp.27_0>)
10056600:	4627      	mov	r7, r4
10056602:	9200      	str	r2, [sp, #0]
10056604:	6818      	ldr	r0, [r3, #0]
10056606:	2134      	movs	r1, #52	@ 0x34
10056608:	5c40      	ldrb	r0, [r0, r1]
1005660a:	4284      	cmp	r4, r0
1005660c:	d250      	bcs.n	100566b0 <LLC_offline_control_procedures_processing+0xc0>
1005660e:	202c      	movs	r0, #44	@ 0x2c
10056610:	5c28      	ldrb	r0, [r5, r0]
10056612:	21fe      	movs	r1, #254	@ 0xfe
10056614:	4001      	ands	r1, r0
10056616:	2902      	cmp	r1, #2
10056618:	d13e      	bne.n	10056698 <LLC_offline_control_procedures_processing+0xa8>
1005661a:	208c      	movs	r0, #140	@ 0x8c
1005661c:	582e      	ldr	r6, [r5, r0]
1005661e:	07f0      	lsls	r0, r6, #31
10056620:	d00d      	beq.n	1005663e <LLC_offline_control_procedures_processing+0x4e>
10056622:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
10056624:	2000      	movs	r0, #0
10056626:	f004 fb93 	bl	1005ad50 <LL_Read_Remote_Used_Features>
1005662a:	283a      	cmp	r0, #58	@ 0x3a
1005662c:	9a00      	ldr	r2, [sp, #0]
1005662e:	4610      	mov	r0, r2
10056630:	d030      	beq.n	10056694 <LLC_offline_control_procedures_processing+0xa4>
10056632:	4628      	mov	r0, r5
10056634:	308c      	adds	r0, #140	@ 0x8c
10056636:	6801      	ldr	r1, [r0, #0]
10056638:	2201      	movs	r2, #1
1005663a:	4391      	bics	r1, r2
1005663c:	6001      	str	r1, [r0, #0]
1005663e:	4628      	mov	r0, r5
10056640:	f002 fb7e 	bl	10058d40 <llc_subrate_offline_processing_ucfg_weak>
10056644:	2800      	cmp	r0, #0
10056646:	9a00      	ldr	r2, [sp, #0]
10056648:	4610      	mov	r0, r2
1005664a:	d123      	bne.n	10056694 <LLC_offline_control_procedures_processing+0xa4>
1005664c:	4628      	mov	r0, r5
1005664e:	4631      	mov	r1, r6
10056650:	f006 fd04 	bl	1005d05c <Data_Len_Update_Offline_Processing_ucfg_weak>
10056654:	9a00      	ldr	r2, [sp, #0]
10056656:	2800      	cmp	r0, #0
10056658:	4610      	mov	r0, r2
1005665a:	d11b      	bne.n	10056694 <LLC_offline_control_procedures_processing+0xa4>
1005665c:	b2e6      	uxtb	r6, r4
1005665e:	4630      	mov	r0, r6
10056660:	f003 fc0e 	bl	10059e80 <LLC_channel_map_update_offline_processing_ucfg_weak>
10056664:	9a00      	ldr	r2, [sp, #0]
10056666:	2800      	cmp	r0, #0
10056668:	4610      	mov	r0, r2
1005666a:	d113      	bne.n	10056694 <LLC_offline_control_procedures_processing+0xa4>
1005666c:	4630      	mov	r0, r6
1005666e:	f003 fc0b 	bl	10059e88 <LLC_chc_reporting_offline_processing_ucfg_weak>
10056672:	9a00      	ldr	r2, [sp, #0]
10056674:	2800      	cmp	r0, #0
10056676:	4610      	mov	r0, r2
10056678:	d10c      	bne.n	10056694 <LLC_offline_control_procedures_processing+0xa4>
1005667a:	4628      	mov	r0, r5
1005667c:	f003 fe45 	bl	1005a30a <LLC_cte_request_procedure_ucfg_weak>
10056680:	9a00      	ldr	r2, [sp, #0]
10056682:	2800      	cmp	r0, #0
10056684:	4610      	mov	r0, r2
10056686:	d105      	bne.n	10056694 <LLC_offline_control_procedures_processing+0xa4>
10056688:	4630      	mov	r0, r6
1005668a:	f004 fd68 	bl	1005b15e <LLC_pcl_offline_processing_ucfg_weak>
1005668e:	9a00      	ldr	r2, [sp, #0]
10056690:	1e41      	subs	r1, r0, #1
10056692:	4188      	sbcs	r0, r1
10056694:	4b0a      	ldr	r3, [pc, #40]	@ (100566c0 <__arm_cp.27_0>)
10056696:	e000      	b.n	1005669a <LLC_offline_control_procedures_processing+0xaa>
10056698:	2000      	movs	r0, #0
1005669a:	1e41      	subs	r1, r0, #1
1005669c:	4188      	sbcs	r0, r1
1005669e:	0639      	lsls	r1, r7, #24
100566a0:	4617      	mov	r7, r2
100566a2:	d100      	bne.n	100566a6 <LLC_offline_control_procedures_processing+0xb6>
100566a4:	4607      	mov	r7, r0
100566a6:	204d      	movs	r0, #77	@ 0x4d
100566a8:	0080      	lsls	r0, r0, #2
100566aa:	182d      	adds	r5, r5, r0
100566ac:	1c64      	adds	r4, r4, #1
100566ae:	e7a9      	b.n	10056604 <LLC_offline_control_procedures_processing+0x14>
100566b0:	0638      	lsls	r0, r7, #24
100566b2:	d003      	beq.n	100566bc <LLC_offline_control_procedures_processing+0xcc>
100566b4:	2011      	movs	r0, #17
100566b6:	2101      	movs	r1, #1
100566b8:	f009 f96c 	bl	1005f994 <tsk_wait_resource_idx>
100566bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100566be:	46c0      	nop			@ (mov r8, r8)

100566c0 <__arm_cp.27_0>:
100566c0:	20000ecc 	.word	0x20000ecc

100566c4 <cte_csr_ucfg_weak>:
100566c4:	2000      	movs	r0, #0
100566c6:	4770      	bx	lr

100566c8 <hci_le_encrypt>:
100566c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100566ca:	b08f      	sub	sp, #60	@ 0x3c
100566cc:	9202      	str	r2, [sp, #8]
100566ce:	4607      	mov	r7, r0
100566d0:	a807      	add	r0, sp, #28
100566d2:	9001      	str	r0, [sp, #4]
100566d4:	2510      	movs	r5, #16
100566d6:	4e0c      	ldr	r6, [pc, #48]	@ (10056708 <__arm_cp.0_0>)
100566d8:	462a      	mov	r2, r5
100566da:	47b0      	blx	r6
100566dc:	ac0b      	add	r4, sp, #44	@ 0x2c
100566de:	4620      	mov	r0, r4
100566e0:	4639      	mov	r1, r7
100566e2:	462a      	mov	r2, r5
100566e4:	47b0      	blx	r6
100566e6:	af03      	add	r7, sp, #12
100566e8:	2600      	movs	r6, #0
100566ea:	9801      	ldr	r0, [sp, #4]
100566ec:	4621      	mov	r1, r4
100566ee:	463a      	mov	r2, r7
100566f0:	4633      	mov	r3, r6
100566f2:	f009 fc53 	bl	1005ff9c <BLEPLAT_aes128_encrypt>
100566f6:	9802      	ldr	r0, [sp, #8]
100566f8:	4639      	mov	r1, r7
100566fa:	462a      	mov	r2, r5
100566fc:	4b02      	ldr	r3, [pc, #8]	@ (10056708 <__arm_cp.0_0>)
100566fe:	4798      	blx	r3
10056700:	4630      	mov	r0, r6
10056702:	b00f      	add	sp, #60	@ 0x3c
10056704:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056706:	46c0      	nop			@ (mov r8, r8)

10056708 <__arm_cp.0_0>:
10056708:	1004f845 	.word	0x1004f845

1005670c <hci_le_long_term_key_request_reply_api>:
1005670c:	b5b0      	push	{r4, r5, r7, lr}
1005670e:	460c      	mov	r4, r1
10056710:	4605      	mov	r5, r0
10056712:	f000 ff83 	bl	1005761c <llc_conn_get_conn_idx>
10056716:	28ff      	cmp	r0, #255	@ 0xff
10056718:	d005      	beq.n	10056726 <hci_le_long_term_key_request_reply_api+0x1a>
1005671a:	2000      	movs	r0, #0
1005671c:	4629      	mov	r1, r5
1005671e:	4622      	mov	r2, r4
10056720:	f004 f9c3 	bl	1005aaaa <LL_Get_LTK>
10056724:	bdb0      	pop	{r4, r5, r7, pc}
10056726:	2002      	movs	r0, #2
10056728:	bdb0      	pop	{r4, r5, r7, pc}

1005672a <hci_le_long_term_key_request_negative_reply_api>:
1005672a:	b510      	push	{r4, lr}
1005672c:	4604      	mov	r4, r0
1005672e:	f000 ff75 	bl	1005761c <llc_conn_get_conn_idx>
10056732:	28ff      	cmp	r0, #255	@ 0xff
10056734:	d005      	beq.n	10056742 <hci_le_long_term_key_request_negative_reply_api+0x18>
10056736:	2081      	movs	r0, #129	@ 0x81
10056738:	2200      	movs	r2, #0
1005673a:	4621      	mov	r1, r4
1005673c:	f004 f9b5 	bl	1005aaaa <LL_Get_LTK>
10056740:	bd10      	pop	{r4, pc}
10056742:	2002      	movs	r0, #2
10056744:	bd10      	pop	{r4, pc}

10056746 <hci_le_check_own_address_type_max_value_ucfg_weak>:
10056746:	2001      	movs	r0, #1
10056748:	4770      	bx	lr

1005674a <hci_le_clear_filter_accept_list>:
1005674a:	b580      	push	{r7, lr}
1005674c:	f002 fa02 	bl	10058b54 <llc_wl_clear_filter_accept_list>
10056750:	bd80      	pop	{r7, pc}

10056752 <hci_le_add_device_to_filter_accept_list>:
10056752:	b5e0      	push	{r5, r6, r7, lr}
10056754:	2802      	cmp	r0, #2
10056756:	d301      	bcc.n	1005675c <hci_le_add_device_to_filter_accept_list+0xa>
10056758:	28ff      	cmp	r0, #255	@ 0xff
1005675a:	d10d      	bne.n	10056778 <hci_le_add_device_to_filter_accept_list+0x26>
1005675c:	2200      	movs	r2, #0
1005675e:	9200      	str	r2, [sp, #0]
10056760:	466b      	mov	r3, sp
10056762:	7018      	strb	r0, [r3, #0]
10056764:	9201      	str	r2, [sp, #4]
10056766:	1c58      	adds	r0, r3, #1
10056768:	2206      	movs	r2, #6
1005676a:	f7f9 f86b 	bl	1004f844 <BLEPLAT_MemCpy>
1005676e:	9901      	ldr	r1, [sp, #4]
10056770:	9800      	ldr	r0, [sp, #0]
10056772:	f002 fa09 	bl	10058b88 <llc_wl_add_device_to_filter_accept_list>
10056776:	bd8c      	pop	{r2, r3, r7, pc}
10056778:	2012      	movs	r0, #18
1005677a:	bd8c      	pop	{r2, r3, r7, pc}

1005677c <data_length_extension_csr_ucfg_weak>:
1005677c:	2000      	movs	r0, #0
1005677e:	4770      	bx	lr

10056780 <pcl_csr_ucfg_weak>:
10056780:	2000      	movs	r0, #0
10056782:	4770      	bx	lr

10056784 <phy_upd_csr>:
10056784:	2001      	movs	r0, #1
10056786:	4770      	bx	lr

10056788 <scan_csr_ucfg_weak>:
10056788:	2000      	movs	r0, #0
1005678a:	4770      	bx	lr

1005678c <conn_supp_csr>:
1005678c:	2001      	movs	r0, #1
1005678e:	4770      	bx	lr

10056790 <subrate_csr_ucfg_weak>:
10056790:	2000      	movs	r0, #0
10056792:	4770      	bx	lr

10056794 <L2C_build_connect_update_request>:
10056794:	b5f0      	push	{r4, r5, r6, r7, lr}
10056796:	b087      	sub	sp, #28
10056798:	8901      	ldrh	r1, [r0, #8]
1005679a:	9104      	str	r1, [sp, #16]
1005679c:	88c1      	ldrh	r1, [r0, #6]
1005679e:	9105      	str	r1, [sp, #20]
100567a0:	8884      	ldrh	r4, [r0, #4]
100567a2:	8846      	ldrh	r6, [r0, #2]
100567a4:	8807      	ldrh	r7, [r0, #0]
100567a6:	2000      	movs	r0, #0
100567a8:	9006      	str	r0, [sp, #24]
100567aa:	a906      	add	r1, sp, #24
100567ac:	4638      	mov	r0, r7
100567ae:	f000 f89f 	bl	100568f0 <l2c_get_check_link_status_on_request_sending>
100567b2:	4605      	mov	r5, r0
100567b4:	2800      	cmp	r0, #0
100567b6:	d15a      	bne.n	1005686e <L2C_build_connect_update_request+0xda>
100567b8:	9603      	str	r6, [sp, #12]
100567ba:	9402      	str	r4, [sp, #8]
100567bc:	9806      	ldr	r0, [sp, #24]
100567be:	7880      	ldrb	r0, [r0, #2]
100567c0:	07c0      	lsls	r0, r0, #31
100567c2:	d151      	bne.n	10056868 <L2C_build_connect_update_request+0xd4>
100567c4:	2400      	movs	r4, #0
100567c6:	2210      	movs	r2, #16
100567c8:	4620      	mov	r0, r4
100567ca:	4639      	mov	r1, r7
100567cc:	f7fb fbb0 	bl	10051f30 <ACL_pkt_get>
100567d0:	2800      	cmp	r0, #0
100567d2:	d04b      	beq.n	1005686c <L2C_build_connect_update_request+0xd8>
100567d4:	4607      	mov	r7, r0
100567d6:	482a      	ldr	r0, [pc, #168]	@ (10056880 <__arm_cp.0_0>)
100567d8:	9a03      	ldr	r2, [sp, #12]
100567da:	1f91      	subs	r1, r2, #6
100567dc:	b289      	uxth	r1, r1
100567de:	2512      	movs	r5, #18
100567e0:	4281      	cmp	r1, r0
100567e2:	d23d      	bcs.n	10056860 <L2C_build_connect_update_request+0xcc>
100567e4:	9e02      	ldr	r6, [sp, #8]
100567e6:	2e06      	cmp	r6, #6
100567e8:	d33a      	bcc.n	10056860 <L2C_build_connect_update_request+0xcc>
100567ea:	1d80      	adds	r0, r0, #6
100567ec:	4286      	cmp	r6, r0
100567ee:	d237      	bcs.n	10056860 <L2C_build_connect_update_request+0xcc>
100567f0:	42b2      	cmp	r2, r6
100567f2:	d835      	bhi.n	10056860 <L2C_build_connect_update_request+0xcc>
100567f4:	9a05      	ldr	r2, [sp, #20]
100567f6:	0891      	lsrs	r1, r2, #2
100567f8:	297c      	cmp	r1, #124	@ 0x7c
100567fa:	d831      	bhi.n	10056860 <L2C_build_connect_update_request+0xcc>
100567fc:	1c51      	adds	r1, r2, #1
100567fe:	4371      	muls	r1, r6
10056800:	9b04      	ldr	r3, [sp, #16]
10056802:	009a      	lsls	r2, r3, #2
10056804:	4291      	cmp	r1, r2
10056806:	d82b      	bhi.n	10056860 <L2C_build_connect_update_request+0xcc>
10056808:	2b0a      	cmp	r3, #10
1005680a:	d329      	bcc.n	10056860 <L2C_build_connect_update_request+0xcc>
1005680c:	4283      	cmp	r3, r0
1005680e:	d227      	bcs.n	10056860 <L2C_build_connect_update_request+0xcc>
10056810:	9401      	str	r4, [sp, #4]
10056812:	6878      	ldr	r0, [r7, #4]
10056814:	2112      	movs	r1, #18
10056816:	7201      	strb	r1, [r0, #8]
10056818:	6878      	ldr	r0, [r7, #4]
1005681a:	9906      	ldr	r1, [sp, #24]
1005681c:	7909      	ldrb	r1, [r1, #4]
1005681e:	7241      	strb	r1, [r0, #9]
10056820:	2106      	movs	r1, #6
10056822:	2508      	movs	r5, #8
10056824:	4c17      	ldr	r4, [pc, #92]	@ (10056884 <__arm_cp.0_1>)
10056826:	4638      	mov	r0, r7
10056828:	462a      	mov	r2, r5
1005682a:	47a0      	blx	r4
1005682c:	4638      	mov	r0, r7
1005682e:	4629      	mov	r1, r5
10056830:	9a03      	ldr	r2, [sp, #12]
10056832:	47a0      	blx	r4
10056834:	210a      	movs	r1, #10
10056836:	4638      	mov	r0, r7
10056838:	4632      	mov	r2, r6
1005683a:	4625      	mov	r5, r4
1005683c:	47a0      	blx	r4
1005683e:	240c      	movs	r4, #12
10056840:	4638      	mov	r0, r7
10056842:	4621      	mov	r1, r4
10056844:	9a05      	ldr	r2, [sp, #20]
10056846:	47a8      	blx	r5
10056848:	210e      	movs	r1, #14
1005684a:	4638      	mov	r0, r7
1005684c:	9a04      	ldr	r2, [sp, #16]
1005684e:	47a8      	blx	r5
10056850:	807c      	strh	r4, [r7, #2]
10056852:	2005      	movs	r0, #5
10056854:	4639      	mov	r1, r7
10056856:	f000 f9cf 	bl	10056bf8 <L2C_send_frame>
1005685a:	2800      	cmp	r0, #0
1005685c:	d00a      	beq.n	10056874 <L2C_build_connect_update_request+0xe0>
1005685e:	2581      	movs	r5, #129	@ 0x81
10056860:	4638      	mov	r0, r7
10056862:	f7fb fb87 	bl	10051f74 <ACL_pkt_release>
10056866:	e002      	b.n	1005686e <L2C_build_connect_update_request+0xda>
10056868:	250c      	movs	r5, #12
1005686a:	e000      	b.n	1005686e <L2C_build_connect_update_request+0xda>
1005686c:	2588      	movs	r5, #136	@ 0x88
1005686e:	4628      	mov	r0, r5
10056870:	b007      	add	sp, #28
10056872:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056874:	9906      	ldr	r1, [sp, #24]
10056876:	2012      	movs	r0, #18
10056878:	f000 f84f 	bl	1005691a <l2c_set_link_status_after_request_enqueued>
1005687c:	9d01      	ldr	r5, [sp, #4]
1005687e:	e7f6      	b.n	1005686e <L2C_build_connect_update_request+0xda>

10056880 <__arm_cp.0_0>:
10056880:	00000c7b 	.word	0x00000c7b

10056884 <__arm_cp.0_1>:
10056884:	10051fdf 	.word	0x10051fdf

10056888 <l2c_get_link_control_block_ref>:
10056888:	b570      	push	{r4, r5, r6, lr}
1005688a:	490b      	ldr	r1, [pc, #44]	@ (100568b8 <__arm_cp.0_0>)
1005688c:	7ac9      	ldrb	r1, [r1, #11]
1005688e:	2214      	movs	r2, #20
10056890:	434a      	muls	r2, r1
10056892:	3214      	adds	r2, #20
10056894:	4909      	ldr	r1, [pc, #36]	@ (100568bc <__arm_cp.0_1>)
10056896:	680b      	ldr	r3, [r1, #0]
10056898:	2100      	movs	r1, #0
1005689a:	460d      	mov	r5, r1
1005689c:	460c      	mov	r4, r1
1005689e:	3414      	adds	r4, #20
100568a0:	42a2      	cmp	r2, r4
100568a2:	d006      	beq.n	100568b2 <l2c_get_link_control_block_ref+0x2a>
100568a4:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
100568a6:	5b75      	ldrh	r5, [r6, r5]
100568a8:	4285      	cmp	r5, r0
100568aa:	4625      	mov	r5, r4
100568ac:	d1f7      	bne.n	1005689e <l2c_get_link_control_block_ref+0x16>
100568ae:	1931      	adds	r1, r6, r4
100568b0:	3914      	subs	r1, #20
100568b2:	4608      	mov	r0, r1
100568b4:	bd70      	pop	{r4, r5, r6, pc}
100568b6:	46c0      	nop			@ (mov r8, r8)

100568b8 <__arm_cp.0_0>:
100568b8:	20000f34 	.word	0x20000f34

100568bc <__arm_cp.0_1>:
100568bc:	20000f18 	.word	0x20000f18

100568c0 <l2c_get_link_control_block_index>:
100568c0:	b5b0      	push	{r4, r5, r7, lr}
100568c2:	4909      	ldr	r1, [pc, #36]	@ (100568e8 <__arm_cp.1_0>)
100568c4:	7aca      	ldrb	r2, [r1, #11]
100568c6:	4909      	ldr	r1, [pc, #36]	@ (100568ec <__arm_cp.1_1>)
100568c8:	680b      	ldr	r3, [r1, #0]
100568ca:	2400      	movs	r4, #0
100568cc:	4621      	mov	r1, r4
100568ce:	428a      	cmp	r2, r1
100568d0:	d006      	beq.n	100568e0 <l2c_get_link_control_block_index+0x20>
100568d2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
100568d4:	5b2d      	ldrh	r5, [r5, r4]
100568d6:	4285      	cmp	r5, r0
100568d8:	d003      	beq.n	100568e2 <l2c_get_link_control_block_index+0x22>
100568da:	3414      	adds	r4, #20
100568dc:	1c49      	adds	r1, r1, #1
100568de:	e7f6      	b.n	100568ce <l2c_get_link_control_block_index+0xe>
100568e0:	4611      	mov	r1, r2
100568e2:	b2c8      	uxtb	r0, r1
100568e4:	bdb0      	pop	{r4, r5, r7, pc}
100568e6:	46c0      	nop			@ (mov r8, r8)

100568e8 <__arm_cp.1_0>:
100568e8:	20000f34 	.word	0x20000f34

100568ec <__arm_cp.1_1>:
100568ec:	20000f18 	.word	0x20000f18

100568f0 <l2c_get_check_link_status_on_request_sending>:
100568f0:	b5b0      	push	{r4, r5, r7, lr}
100568f2:	460c      	mov	r4, r1
100568f4:	4605      	mov	r5, r0
100568f6:	f7ff ffc7 	bl	10056888 <l2c_get_link_control_block_ref>
100568fa:	4601      	mov	r1, r0
100568fc:	6020      	str	r0, [r4, #0]
100568fe:	2002      	movs	r0, #2
10056900:	2d00      	cmp	r5, #0
10056902:	d009      	beq.n	10056918 <l2c_get_check_link_status_on_request_sending+0x28>
10056904:	2900      	cmp	r1, #0
10056906:	d007      	beq.n	10056918 <l2c_get_check_link_status_on_request_sending+0x28>
10056908:	7908      	ldrb	r0, [r1, #4]
1005690a:	2800      	cmp	r0, #0
1005690c:	d003      	beq.n	10056916 <l2c_get_check_link_status_on_request_sending+0x26>
1005690e:	7889      	ldrb	r1, [r1, #2]
10056910:	2006      	movs	r0, #6
10056912:	4008      	ands	r0, r1
10056914:	d000      	beq.n	10056918 <l2c_get_check_link_status_on_request_sending+0x28>
10056916:	200c      	movs	r0, #12
10056918:	bdb0      	pop	{r4, r5, r7, pc}

1005691a <l2c_set_link_status_after_request_enqueued>:
1005691a:	7188      	strb	r0, [r1, #6]
1005691c:	7908      	ldrb	r0, [r1, #4]
1005691e:	71c8      	strb	r0, [r1, #7]
10056920:	7888      	ldrb	r0, [r1, #2]
10056922:	2206      	movs	r2, #6
10056924:	4302      	orrs	r2, r0
10056926:	708a      	strb	r2, [r1, #2]
10056928:	4770      	bx	lr

1005692a <l2c_post_process_incoming_request_packet>:
1005692a:	7190      	strb	r0, [r2, #6]
1005692c:	7151      	strb	r1, [r2, #5]
1005692e:	7890      	ldrb	r0, [r2, #2]
10056930:	2104      	movs	r1, #4
10056932:	4301      	orrs	r1, r0
10056934:	7091      	strb	r1, [r2, #2]
10056936:	4770      	bx	lr

10056938 <l2c_pre_process_incoming_response_packet>:
10056938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005693a:	4604      	mov	r4, r0
1005693c:	2014      	movs	r0, #20
1005693e:	4360      	muls	r0, r4
10056940:	4b14      	ldr	r3, [pc, #80]	@ (10056994 <__arm_cp.7_0>)
10056942:	681b      	ldr	r3, [r3, #0]
10056944:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10056946:	182d      	adds	r5, r5, r0
10056948:	78a8      	ldrb	r0, [r5, #2]
1005694a:	0746      	lsls	r6, r0, #29
1005694c:	2081      	movs	r0, #129	@ 0x81
1005694e:	2e00      	cmp	r6, #0
10056950:	d51f      	bpl.n	10056992 <l2c_pre_process_incoming_response_packet+0x5a>
10056952:	79ae      	ldrb	r6, [r5, #6]
10056954:	1c76      	adds	r6, r6, #1
10056956:	428e      	cmp	r6, r1
10056958:	d001      	beq.n	1005695e <l2c_pre_process_incoming_response_packet+0x26>
1005695a:	2901      	cmp	r1, #1
1005695c:	d119      	bne.n	10056992 <l2c_pre_process_incoming_response_packet+0x5a>
1005695e:	79e9      	ldrb	r1, [r5, #7]
10056960:	4291      	cmp	r1, r2
10056962:	d116      	bne.n	10056992 <l2c_pre_process_incoming_response_packet+0x5a>
10056964:	1cae      	adds	r6, r5, #2
10056966:	1daf      	adds	r7, r5, #6
10056968:	1de8      	adds	r0, r5, #7
1005696a:	9000      	str	r0, [sp, #0]
1005696c:	4618      	mov	r0, r3
1005696e:	4621      	mov	r1, r4
10056970:	f009 f871 	bl	1005fa56 <CST_stop>
10056974:	2000      	movs	r0, #0
10056976:	7038      	strb	r0, [r7, #0]
10056978:	9900      	ldr	r1, [sp, #0]
1005697a:	7008      	strb	r0, [r1, #0]
1005697c:	7831      	ldrb	r1, [r6, #0]
1005697e:	22fb      	movs	r2, #251	@ 0xfb
10056980:	400a      	ands	r2, r1
10056982:	7032      	strb	r2, [r6, #0]
10056984:	7929      	ldrb	r1, [r5, #4]
10056986:	1c4a      	adds	r2, r1, #1
10056988:	b2d1      	uxtb	r1, r2
1005698a:	4291      	cmp	r1, r2
1005698c:	d000      	beq.n	10056990 <l2c_pre_process_incoming_response_packet+0x58>
1005698e:	2101      	movs	r1, #1
10056990:	7129      	strb	r1, [r5, #4]
10056992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056994 <__arm_cp.7_0>:
10056994:	20000f18 	.word	0x20000f18

10056998 <l2c_release_unexpected_acl_packet>:
10056998:	b580      	push	{r7, lr}
1005699a:	4608      	mov	r0, r1
1005699c:	f7fb faea 	bl	10051f74 <ACL_pkt_release>
100569a0:	bd80      	pop	{r7, pc}

100569a2 <L2C_get_cid_from_basic_packet_header>:
100569a2:	b580      	push	{r7, lr}
100569a4:	2102      	movs	r1, #2
100569a6:	f7fb fb0a 	bl	10051fbe <ACL_pkt_read_16b>
100569aa:	bd80      	pop	{r7, pc}

100569ac <L2C_build_command_reject_pdu>:
100569ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100569ae:	b085      	sub	sp, #20
100569b0:	461e      	mov	r6, r3
100569b2:	9204      	str	r2, [sp, #16]
100569b4:	460d      	mov	r5, r1
100569b6:	4607      	mov	r7, r0
100569b8:	f7ff ff66 	bl	10056888 <l2c_get_link_control_block_ref>
100569bc:	2800      	cmp	r0, #0
100569be:	d00f      	beq.n	100569e0 <L2C_build_command_reject_pdu+0x34>
100569c0:	4604      	mov	r4, r0
100569c2:	9603      	str	r6, [sp, #12]
100569c4:	7940      	ldrb	r0, [r0, #5]
100569c6:	2612      	movs	r6, #18
100569c8:	42a8      	cmp	r0, r5
100569ca:	d10a      	bne.n	100569e2 <L2C_build_command_reject_pdu+0x36>
100569cc:	9904      	ldr	r1, [sp, #16]
100569ce:	2902      	cmp	r1, #2
100569d0:	d807      	bhi.n	100569e2 <L2C_build_command_reject_pdu+0x36>
100569d2:	78a0      	ldrb	r0, [r4, #2]
100569d4:	0780      	lsls	r0, r0, #30
100569d6:	d407      	bmi.n	100569e8 <L2C_build_command_reject_pdu+0x3c>
100569d8:	2901      	cmp	r1, #1
100569da:	d007      	beq.n	100569ec <L2C_build_command_reject_pdu+0x40>
100569dc:	2004      	movs	r0, #4
100569de:	e006      	b.n	100569ee <L2C_build_command_reject_pdu+0x42>
100569e0:	2602      	movs	r6, #2
100569e2:	4630      	mov	r0, r6
100569e4:	b005      	add	sp, #20
100569e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100569e8:	260c      	movs	r6, #12
100569ea:	e7fa      	b.n	100569e2 <L2C_build_command_reject_pdu+0x36>
100569ec:	2002      	movs	r0, #2
100569ee:	2900      	cmp	r1, #0
100569f0:	d100      	bne.n	100569f4 <L2C_build_command_reject_pdu+0x48>
100569f2:	4608      	mov	r0, r1
100569f4:	9002      	str	r0, [sp, #8]
100569f6:	1d82      	adds	r2, r0, #6
100569f8:	2600      	movs	r6, #0
100569fa:	4630      	mov	r0, r6
100569fc:	4639      	mov	r1, r7
100569fe:	9201      	str	r2, [sp, #4]
10056a00:	f7fb fa96 	bl	10051f30 <ACL_pkt_get>
10056a04:	2800      	cmp	r0, #0
10056a06:	d027      	beq.n	10056a58 <L2C_build_command_reject_pdu+0xac>
10056a08:	4607      	mov	r7, r0
10056a0a:	6840      	ldr	r0, [r0, #4]
10056a0c:	2101      	movs	r1, #1
10056a0e:	7201      	strb	r1, [r0, #8]
10056a10:	6878      	ldr	r0, [r7, #4]
10056a12:	7245      	strb	r5, [r0, #9]
10056a14:	9802      	ldr	r0, [sp, #8]
10056a16:	1c80      	adds	r0, r0, #2
10056a18:	b282      	uxth	r2, r0
10056a1a:	2106      	movs	r1, #6
10056a1c:	4638      	mov	r0, r7
10056a1e:	f7fb fade 	bl	10051fde <ACL_pkt_write_16b>
10056a22:	2108      	movs	r1, #8
10056a24:	4638      	mov	r0, r7
10056a26:	9d04      	ldr	r5, [sp, #16]
10056a28:	462a      	mov	r2, r5
10056a2a:	f7fb fad8 	bl	10051fde <ACL_pkt_write_16b>
10056a2e:	2d00      	cmp	r5, #0
10056a30:	d005      	beq.n	10056a3e <L2C_build_command_reject_pdu+0x92>
10056a32:	210a      	movs	r1, #10
10056a34:	4638      	mov	r0, r7
10056a36:	9a02      	ldr	r2, [sp, #8]
10056a38:	9b03      	ldr	r3, [sp, #12]
10056a3a:	f7fb fad9 	bl	10051ff0 <ACL_pkt_write>
10056a3e:	9801      	ldr	r0, [sp, #4]
10056a40:	8078      	strh	r0, [r7, #2]
10056a42:	2005      	movs	r0, #5
10056a44:	4639      	mov	r1, r7
10056a46:	f000 f8d7 	bl	10056bf8 <L2C_send_frame>
10056a4a:	2800      	cmp	r0, #0
10056a4c:	d006      	beq.n	10056a5c <L2C_build_command_reject_pdu+0xb0>
10056a4e:	4638      	mov	r0, r7
10056a50:	f7fb fa90 	bl	10051f74 <ACL_pkt_release>
10056a54:	2681      	movs	r6, #129	@ 0x81
10056a56:	e7c4      	b.n	100569e2 <L2C_build_command_reject_pdu+0x36>
10056a58:	2688      	movs	r6, #136	@ 0x88
10056a5a:	e7c2      	b.n	100569e2 <L2C_build_command_reject_pdu+0x36>
10056a5c:	71a6      	strb	r6, [r4, #6]
10056a5e:	78a0      	ldrb	r0, [r4, #2]
10056a60:	21fb      	movs	r1, #251	@ 0xfb
10056a62:	4001      	ands	r1, r0
10056a64:	70a1      	strb	r1, [r4, #2]
10056a66:	e7bc      	b.n	100569e2 <L2C_build_command_reject_pdu+0x36>

10056a68 <l2c_cos_channel_descriptor_reset>:
10056a68:	b570      	push	{r4, r5, r6, lr}
10056a6a:	4604      	mov	r4, r0
10056a6c:	2022      	movs	r0, #34	@ 0x22
10056a6e:	4910      	ldr	r1, [pc, #64]	@ (10056ab0 <__arm_cp.4_0>)
10056a70:	5c08      	ldrb	r0, [r1, r0]
10056a72:	42a0      	cmp	r0, r4
10056a74:	d91b      	bls.n	10056aae <l2c_cos_channel_descriptor_reset+0x46>
10056a76:	4d0f      	ldr	r5, [pc, #60]	@ (10056ab4 <__arm_cp.4_1>)
10056a78:	6829      	ldr	r1, [r5, #0]
10056a7a:	2030      	movs	r0, #48	@ 0x30
10056a7c:	5c0a      	ldrb	r2, [r1, r0]
10056a7e:	1c52      	adds	r2, r2, #1
10056a80:	540a      	strb	r2, [r1, r0]
10056a82:	2234      	movs	r2, #52	@ 0x34
10056a84:	4354      	muls	r4, r2
10056a86:	3130      	adds	r1, #48	@ 0x30
10056a88:	6848      	ldr	r0, [r1, #4]
10056a8a:	1900      	adds	r0, r0, r4
10056a8c:	7883      	ldrb	r3, [r0, #2]
10056a8e:	071b      	lsls	r3, r3, #28
10056a90:	d505      	bpl.n	10056a9e <l2c_cos_channel_descriptor_reset+0x36>
10056a92:	78c3      	ldrb	r3, [r0, #3]
10056a94:	2b11      	cmp	r3, #17
10056a96:	d302      	bcc.n	10056a9e <l2c_cos_channel_descriptor_reset+0x36>
10056a98:	784b      	ldrb	r3, [r1, #1]
10056a9a:	1e5b      	subs	r3, r3, #1
10056a9c:	704b      	strb	r3, [r1, #1]
10056a9e:	8946      	ldrh	r6, [r0, #10]
10056aa0:	2100      	movs	r1, #0
10056aa2:	f7f8 fedf 	bl	1004f864 <BLEPLAT_MemSet>
10056aa6:	6828      	ldr	r0, [r5, #0]
10056aa8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
10056aaa:	1900      	adds	r0, r0, r4
10056aac:	8146      	strh	r6, [r0, #10]
10056aae:	bd70      	pop	{r4, r5, r6, pc}

10056ab0 <__arm_cp.4_0>:
10056ab0:	20000f34 	.word	0x20000f34

10056ab4 <__arm_cp.4_1>:
10056ab4:	20000f18 	.word	0x20000f18

10056ab8 <L2C_cos_channel_descriptors_reset_pending>:
10056ab8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056aba:	460c      	mov	r4, r1
10056abc:	4605      	mov	r5, r0
10056abe:	2022      	movs	r0, #34	@ 0x22
10056ac0:	4912      	ldr	r1, [pc, #72]	@ (10056b0c <__arm_cp.5_0>)
10056ac2:	9002      	str	r0, [sp, #8]
10056ac4:	5c08      	ldrb	r0, [r1, r0]
10056ac6:	2700      	movs	r7, #0
10056ac8:	2603      	movs	r6, #3
10056aca:	4b11      	ldr	r3, [pc, #68]	@ (10056b10 <__arm_cp.5_1>)
10056acc:	9501      	str	r5, [sp, #4]
10056ace:	b2c1      	uxtb	r1, r0
10056ad0:	428f      	cmp	r7, r1
10056ad2:	d219      	bcs.n	10056b08 <L2C_cos_channel_descriptors_reset_pending+0x50>
10056ad4:	6819      	ldr	r1, [r3, #0]
10056ad6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
10056ad8:	198a      	adds	r2, r1, r6
10056ada:	1ed2      	subs	r2, r2, #3
10056adc:	8812      	ldrh	r2, [r2, #0]
10056ade:	42aa      	cmp	r2, r5
10056ae0:	d10f      	bne.n	10056b02 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10056ae2:	2cff      	cmp	r4, #255	@ 0xff
10056ae4:	d002      	beq.n	10056aec <L2C_cos_channel_descriptors_reset_pending+0x34>
10056ae6:	5d89      	ldrb	r1, [r1, r6]
10056ae8:	42a1      	cmp	r1, r4
10056aea:	d10a      	bne.n	10056b02 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10056aec:	b2f8      	uxtb	r0, r7
10056aee:	4625      	mov	r5, r4
10056af0:	461c      	mov	r4, r3
10056af2:	f7ff ffb9 	bl	10056a68 <l2c_cos_channel_descriptor_reset>
10056af6:	4623      	mov	r3, r4
10056af8:	462c      	mov	r4, r5
10056afa:	9d01      	ldr	r5, [sp, #4]
10056afc:	9802      	ldr	r0, [sp, #8]
10056afe:	4903      	ldr	r1, [pc, #12]	@ (10056b0c <__arm_cp.5_0>)
10056b00:	5c08      	ldrb	r0, [r1, r0]
10056b02:	3634      	adds	r6, #52	@ 0x34
10056b04:	1c7f      	adds	r7, r7, #1
10056b06:	e7e2      	b.n	10056ace <L2C_cos_channel_descriptors_reset_pending+0x16>
10056b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056b0a:	46c0      	nop			@ (mov r8, r8)

10056b0c <__arm_cp.5_0>:
10056b0c:	20000f34 	.word	0x20000f34

10056b10 <__arm_cp.5_1>:
10056b10:	20000f18 	.word	0x20000f18

10056b14 <l2c_cos_csr_ucfg_weak>:
10056b14:	2000      	movs	r0, #0
10056b16:	4770      	bx	lr

10056b18 <L2C_cos_cfc_init_ucfg_weak>:
10056b18:	2000      	movs	r0, #0
10056b1a:	4770      	bx	lr

10056b1c <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
10056b1c:	4770      	bx	lr

10056b1e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
10056b1e:	4770      	bx	lr

10056b20 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10056b20:	2000      	movs	r0, #0
10056b22:	4770      	bx	lr

10056b24 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10056b24:	4770      	bx	lr

10056b26 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
10056b26:	4770      	bx	lr

10056b28 <l2cap_timers_callback_wrapper>:
10056b28:	b580      	push	{r7, lr}
10056b2a:	6940      	ldr	r0, [r0, #20]
10056b2c:	4901      	ldr	r1, [pc, #4]	@ (10056b34 <__arm_cp.0_0>)
10056b2e:	f009 f856 	bl	1005fbde <cst_sharedCallback>
10056b32:	bd80      	pop	{r7, pc}

10056b34 <__arm_cp.0_0>:
10056b34:	10056b39 	.word	0x10056b39

10056b38 <l2cap_timers_callback>:
10056b38:	b580      	push	{r7, lr}
10056b3a:	4903      	ldr	r1, [pc, #12]	@ (10056b48 <__arm_cp.1_0>)
10056b3c:	7ac9      	ldrb	r1, [r1, #11]
10056b3e:	4281      	cmp	r1, r0
10056b40:	d301      	bcc.n	10056b46 <l2cap_timers_callback+0xe>
10056b42:	f000 fa77 	bl	10057034 <L2C_timeout_handler_signalling>
10056b46:	bd80      	pop	{r7, pc}

10056b48 <__arm_cp.1_0>:
10056b48:	20000f34 	.word	0x20000f34

10056b4c <L2C_init>:
10056b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056b4e:	4605      	mov	r5, r0
10056b50:	2001      	movs	r0, #1
10056b52:	2168      	movs	r1, #104	@ 0x68
10056b54:	f007 f936 	bl	1005ddc4 <csmem_mem_0_assign>
10056b58:	4f23      	ldr	r7, [pc, #140]	@ (10056be8 <__arm_cp.3_0>)
10056b5a:	6038      	str	r0, [r7, #0]
10056b5c:	4e23      	ldr	r6, [pc, #140]	@ (10056bec <__arm_cp.3_1>)
10056b5e:	7af0      	ldrb	r0, [r6, #11]
10056b60:	2414      	movs	r4, #20
10056b62:	4621      	mov	r1, r4
10056b64:	f007 f92e 	bl	1005ddc4 <csmem_mem_0_assign>
10056b68:	4601      	mov	r1, r0
10056b6a:	6838      	ldr	r0, [r7, #0]
10056b6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
10056b6e:	2d01      	cmp	r5, #1
10056b70:	d110      	bne.n	10056b94 <L2C_init+0x48>
10056b72:	305c      	adds	r0, #92	@ 0x5c
10056b74:	f009 f8ee 	bl	1005fd54 <ACL_list_init>
10056b78:	2522      	movs	r5, #34	@ 0x22
10056b7a:	5d70      	ldrb	r0, [r6, r5]
10056b7c:	2134      	movs	r1, #52	@ 0x34
10056b7e:	f007 f921 	bl	1005ddc4 <csmem_mem_0_assign>
10056b82:	6839      	ldr	r1, [r7, #0]
10056b84:	6348      	str	r0, [r1, #52]	@ 0x34
10056b86:	5d70      	ldrb	r0, [r6, r5]
10056b88:	0040      	lsls	r0, r0, #1
10056b8a:	2110      	movs	r1, #16
10056b8c:	f007 f91a 	bl	1005ddc4 <csmem_mem_0_assign>
10056b90:	6839      	ldr	r1, [r7, #0]
10056b92:	6488      	str	r0, [r1, #72]	@ 0x48
10056b94:	7af0      	ldrb	r0, [r6, #11]
10056b96:	1c41      	adds	r1, r0, #1
10056b98:	4d15      	ldr	r5, [pc, #84]	@ (10056bf0 <__arm_cp.3_2>)
10056b9a:	2201      	movs	r2, #1
10056b9c:	4628      	mov	r0, r5
10056b9e:	f007 f8ff 	bl	1005dda0 <csmem_mem_assign>
10056ba2:	6839      	ldr	r1, [r7, #0]
10056ba4:	6208      	str	r0, [r1, #32]
10056ba6:	7af1      	ldrb	r1, [r6, #11]
10056ba8:	2202      	movs	r2, #2
10056baa:	4628      	mov	r0, r5
10056bac:	f007 f8f8 	bl	1005dda0 <csmem_mem_assign>
10056bb0:	683d      	ldr	r5, [r7, #0]
10056bb2:	6268      	str	r0, [r5, #36]	@ 0x24
10056bb4:	7af1      	ldrb	r1, [r6, #11]
10056bb6:	4a0f      	ldr	r2, [pc, #60]	@ (10056bf4 <__arm_cp.3_3>)
10056bb8:	2307      	movs	r3, #7
10056bba:	4628      	mov	r0, r5
10056bbc:	f008 ff36 	bl	1005fa2c <CST_init>
10056bc0:	6838      	ldr	r0, [r7, #0]
10056bc2:	2117      	movs	r1, #23
10056bc4:	8501      	strh	r1, [r0, #40]	@ 0x28
10056bc6:	8c31      	ldrh	r1, [r6, #32]
10056bc8:	2917      	cmp	r1, #23
10056bca:	d201      	bcs.n	10056bd0 <L2C_init+0x84>
10056bcc:	2086      	movs	r0, #134	@ 0x86
10056bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056bd0:	8541      	strh	r1, [r0, #42]	@ 0x2a
10056bd2:	7af1      	ldrb	r1, [r6, #11]
10056bd4:	434c      	muls	r4, r1
10056bd6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10056bd8:	2100      	movs	r1, #0
10056bda:	4622      	mov	r2, r4
10056bdc:	f7f8 fe42 	bl	1004f864 <BLEPLAT_MemSet>
10056be0:	f7ff ff9a 	bl	10056b18 <L2C_cos_cfc_init_ucfg_weak>
10056be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056be6:	46c0      	nop			@ (mov r8, r8)

10056be8 <__arm_cp.3_0>:
10056be8:	20000f18 	.word	0x20000f18

10056bec <__arm_cp.3_1>:
10056bec:	20000f34 	.word	0x20000f34

10056bf0 <__arm_cp.3_2>:
10056bf0:	20000f30 	.word	0x20000f30

10056bf4 <__arm_cp.3_3>:
10056bf4:	10056b29 	.word	0x10056b29

10056bf8 <L2C_send_frame>:
10056bf8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056bfa:	460c      	mov	r4, r1
10056bfc:	1f01      	subs	r1, r0, #4
10056bfe:	4606      	mov	r6, r0
10056c00:	2902      	cmp	r1, #2
10056c02:	d821      	bhi.n	10056c48 <L2C_send_frame+0x50>
10056c04:	8862      	ldrh	r2, [r4, #2]
10056c06:	2500      	movs	r5, #0
10056c08:	4620      	mov	r0, r4
10056c0a:	4629      	mov	r1, r5
10056c0c:	f7fb f9e7 	bl	10051fde <ACL_pkt_write_16b>
10056c10:	2702      	movs	r7, #2
10056c12:	4620      	mov	r0, r4
10056c14:	4639      	mov	r1, r7
10056c16:	4632      	mov	r2, r6
10056c18:	f7fb f9e1 	bl	10051fde <ACL_pkt_write_16b>
10056c1c:	8225      	strh	r5, [r4, #16]
10056c1e:	81e5      	strh	r5, [r4, #14]
10056c20:	7325      	strb	r5, [r4, #12]
10056c22:	6860      	ldr	r0, [r4, #4]
10056c24:	6160      	str	r0, [r4, #20]
10056c26:	61a0      	str	r0, [r4, #24]
10056c28:	8860      	ldrh	r0, [r4, #2]
10056c2a:	1d00      	adds	r0, r0, #4
10056c2c:	8060      	strh	r0, [r4, #2]
10056c2e:	7a20      	ldrb	r0, [r4, #8]
10056c30:	4338      	orrs	r0, r7
10056c32:	7220      	strb	r0, [r4, #8]
10056c34:	4620      	mov	r0, r4
10056c36:	f7fb f909 	bl	10051e4c <Acl_Transmit_Data>
10056c3a:	2800      	cmp	r0, #0
10056c3c:	d014      	beq.n	10056c68 <L2C_send_frame+0x70>
10056c3e:	8860      	ldrh	r0, [r4, #2]
10056c40:	1f00      	subs	r0, r0, #4
10056c42:	8060      	strh	r0, [r4, #2]
10056c44:	2581      	movs	r5, #129	@ 0x81
10056c46:	e00f      	b.n	10056c68 <L2C_send_frame+0x70>
10056c48:	25a0      	movs	r5, #160	@ 0xa0
10056c4a:	283f      	cmp	r0, #63	@ 0x3f
10056c4c:	d00c      	beq.n	10056c68 <L2C_send_frame+0x70>
10056c4e:	3820      	subs	r0, #32
10056c50:	285f      	cmp	r0, #95	@ 0x5f
10056c52:	d809      	bhi.n	10056c68 <L2C_send_frame+0x70>
10056c54:	a801      	add	r0, sp, #4
10056c56:	8086      	strh	r6, [r0, #4]
10056c58:	2122      	movs	r1, #34	@ 0x22
10056c5a:	4a04      	ldr	r2, [pc, #16]	@ (10056c6c <__arm_cp.4_0>)
10056c5c:	5c51      	ldrb	r1, [r2, r1]
10056c5e:	7181      	strb	r1, [r0, #6]
10056c60:	9401      	str	r4, [sp, #4]
10056c62:	f7ff ff5d 	bl	10056b20 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
10056c66:	4605      	mov	r5, r0
10056c68:	4628      	mov	r0, r5
10056c6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10056c6c <__arm_cp.4_0>:
10056c6c:	20000f34 	.word	0x20000f34

10056c70 <L2C_receive_data>:
10056c70:	b5f0      	push	{r4, r5, r6, r7, lr}
10056c72:	b0c3      	sub	sp, #268	@ 0x10c
10056c74:	4604      	mov	r4, r0
10056c76:	8800      	ldrh	r0, [r0, #0]
10056c78:	f7ff fe06 	bl	10056888 <l2c_get_link_control_block_ref>
10056c7c:	2800      	cmp	r0, #0
10056c7e:	d07c      	beq.n	10056d7a <L2C_receive_data+0x10a>
10056c80:	4605      	mov	r5, r0
10056c82:	7a20      	ldrb	r0, [r4, #8]
10056c84:	2703      	movs	r7, #3
10056c86:	4007      	ands	r7, r0
10056c88:	6928      	ldr	r0, [r5, #16]
10056c8a:	462a      	mov	r2, r5
10056c8c:	320c      	adds	r2, #12
10056c8e:	2f02      	cmp	r7, #2
10056c90:	9203      	str	r2, [sp, #12]
10056c92:	d108      	bne.n	10056ca6 <L2C_receive_data+0x36>
10056c94:	2800      	cmp	r0, #0
10056c96:	d02f      	beq.n	10056cf8 <L2C_receive_data+0x88>
10056c98:	8811      	ldrh	r1, [r2, #0]
10056c9a:	2684      	movs	r6, #132	@ 0x84
10056c9c:	2904      	cmp	r1, #4
10056c9e:	d354      	bcc.n	10056d4a <L2C_receive_data+0xda>
10056ca0:	2101      	movs	r1, #1
10056ca2:	9102      	str	r1, [sp, #8]
10056ca4:	e031      	b.n	10056d0a <L2C_receive_data+0x9a>
10056ca6:	2800      	cmp	r0, #0
10056ca8:	d04a      	beq.n	10056d40 <L2C_receive_data+0xd0>
10056caa:	8866      	ldrh	r6, [r4, #2]
10056cac:	2e00      	cmp	r6, #0
10056cae:	d026      	beq.n	10056cfe <L2C_receive_data+0x8e>
10056cb0:	2100      	movs	r1, #0
10056cb2:	9101      	str	r1, [sp, #4]
10056cb4:	a804      	add	r0, sp, #16
10056cb6:	9002      	str	r0, [sp, #8]
10056cb8:	4620      	mov	r0, r4
10056cba:	4632      	mov	r2, r6
10056cbc:	9b02      	ldr	r3, [sp, #8]
10056cbe:	f7fb f975 	bl	10051fac <ACL_pkt_read>
10056cc2:	6928      	ldr	r0, [r5, #16]
10056cc4:	6840      	ldr	r0, [r0, #4]
10056cc6:	9000      	str	r0, [sp, #0]
10056cc8:	4620      	mov	r0, r4
10056cca:	f7fb f99a 	bl	10052002 <ACL_pkt_extract_pdu>
10056cce:	4601      	mov	r1, r0
10056cd0:	9800      	ldr	r0, [sp, #0]
10056cd2:	f007 fa0a 	bl	1005e0ea <Mem_Buff_append>
10056cd6:	89a9      	ldrh	r1, [r5, #12]
10056cd8:	6928      	ldr	r0, [r5, #16]
10056cda:	4632      	mov	r2, r6
10056cdc:	9b02      	ldr	r3, [sp, #8]
10056cde:	f7fb f987 	bl	10051ff0 <ACL_pkt_write>
10056ce2:	89a8      	ldrh	r0, [r5, #12]
10056ce4:	1980      	adds	r0, r0, r6
10056ce6:	81a8      	strh	r0, [r5, #12]
10056ce8:	b281      	uxth	r1, r0
10056cea:	6928      	ldr	r0, [r5, #16]
10056cec:	f7fb f94b 	bl	10051f86 <ACL_pkt_resize>
10056cf0:	9a03      	ldr	r2, [sp, #12]
10056cf2:	9801      	ldr	r0, [sp, #4]
10056cf4:	8060      	strh	r0, [r4, #2]
10056cf6:	e002      	b.n	10056cfe <L2C_receive_data+0x8e>
10056cf8:	612c      	str	r4, [r5, #16]
10056cfa:	8860      	ldrh	r0, [r4, #2]
10056cfc:	81a8      	strh	r0, [r5, #12]
10056cfe:	8810      	ldrh	r0, [r2, #0]
10056d00:	2804      	cmp	r0, #4
10056d02:	d31b      	bcc.n	10056d3c <L2C_receive_data+0xcc>
10056d04:	6928      	ldr	r0, [r5, #16]
10056d06:	2600      	movs	r6, #0
10056d08:	9602      	str	r6, [sp, #8]
10056d0a:	2100      	movs	r1, #0
10056d0c:	9101      	str	r1, [sp, #4]
10056d0e:	f7fb f956 	bl	10051fbe <ACL_pkt_read_16b>
10056d12:	1d00      	adds	r0, r0, #4
10056d14:	b281      	uxth	r1, r0
10056d16:	89aa      	ldrh	r2, [r5, #12]
10056d18:	428a      	cmp	r2, r1
10056d1a:	d816      	bhi.n	10056d4a <L2C_receive_data+0xda>
10056d1c:	d112      	bne.n	10056d44 <L2C_receive_data+0xd4>
10056d1e:	6929      	ldr	r1, [r5, #16]
10056d20:	8048      	strh	r0, [r1, #2]
10056d22:	2001      	movs	r0, #1
10056d24:	f000 f832 	bl	10056d8c <L2C_mux_acl_packet>
10056d28:	2800      	cmp	r0, #0
10056d2a:	d02d      	beq.n	10056d88 <L2C_receive_data+0x118>
10056d2c:	6928      	ldr	r0, [r5, #16]
10056d2e:	2684      	movs	r6, #132	@ 0x84
10056d30:	42a0      	cmp	r0, r4
10056d32:	d126      	bne.n	10056d82 <L2C_receive_data+0x112>
10056d34:	9801      	ldr	r0, [sp, #4]
10056d36:	81a8      	strh	r0, [r5, #12]
10056d38:	6128      	str	r0, [r5, #16]
10056d3a:	e022      	b.n	10056d82 <L2C_receive_data+0x112>
10056d3c:	2600      	movs	r6, #0
10056d3e:	e018      	b.n	10056d72 <L2C_receive_data+0x102>
10056d40:	2600      	movs	r6, #0
10056d42:	e002      	b.n	10056d4a <L2C_receive_data+0xda>
10056d44:	9802      	ldr	r0, [sp, #8]
10056d46:	2800      	cmp	r0, #0
10056d48:	d013      	beq.n	10056d72 <L2C_receive_data+0x102>
10056d4a:	78a8      	ldrb	r0, [r5, #2]
10056d4c:	2110      	movs	r1, #16
10056d4e:	4301      	orrs	r1, r0
10056d50:	70a9      	strb	r1, [r5, #2]
10056d52:	2042      	movs	r0, #66	@ 0x42
10056d54:	2101      	movs	r1, #1
10056d56:	2202      	movs	r2, #2
10056d58:	462b      	mov	r3, r5
10056d5a:	f00a f9ff 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
10056d5e:	6928      	ldr	r0, [r5, #16]
10056d60:	2800      	cmp	r0, #0
10056d62:	d006      	beq.n	10056d72 <L2C_receive_data+0x102>
10056d64:	f7fb f906 	bl	10051f74 <ACL_pkt_release>
10056d68:	2000      	movs	r0, #0
10056d6a:	6128      	str	r0, [r5, #16]
10056d6c:	9903      	ldr	r1, [sp, #12]
10056d6e:	2000      	movs	r0, #0
10056d70:	8008      	strh	r0, [r1, #0]
10056d72:	2e00      	cmp	r6, #0
10056d74:	d105      	bne.n	10056d82 <L2C_receive_data+0x112>
10056d76:	2f01      	cmp	r7, #1
10056d78:	d103      	bne.n	10056d82 <L2C_receive_data+0x112>
10056d7a:	4620      	mov	r0, r4
10056d7c:	f7fb f8fa 	bl	10051f74 <ACL_pkt_release>
10056d80:	2600      	movs	r6, #0
10056d82:	4630      	mov	r0, r6
10056d84:	b043      	add	sp, #268	@ 0x10c
10056d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056d88:	9801      	ldr	r0, [sp, #4]
10056d8a:	e7ee      	b.n	10056d6a <L2C_receive_data+0xfa>

10056d8c <L2C_mux_acl_packet>:
10056d8c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056d8e:	460c      	mov	r4, r1
10056d90:	4605      	mov	r5, r0
10056d92:	8848      	ldrh	r0, [r1, #2]
10056d94:	1f00      	subs	r0, r0, #4
10056d96:	8048      	strh	r0, [r1, #2]
10056d98:	4608      	mov	r0, r1
10056d9a:	f7ff fe02 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10056d9e:	1f01      	subs	r1, r0, #4
10056da0:	2902      	cmp	r1, #2
10056da2:	d80c      	bhi.n	10056dbe <L2C_mux_acl_packet+0x32>
10056da4:	2806      	cmp	r0, #6
10056da6:	d01a      	beq.n	10056dde <L2C_mux_acl_packet+0x52>
10056da8:	2805      	cmp	r0, #5
10056daa:	d01d      	beq.n	10056de8 <L2C_mux_acl_packet+0x5c>
10056dac:	2804      	cmp	r0, #4
10056dae:	d111      	bne.n	10056dd4 <L2C_mux_acl_packet+0x48>
10056db0:	2004      	movs	r0, #4
10056db2:	81a0      	strh	r0, [r4, #12]
10056db4:	4628      	mov	r0, r5
10056db6:	4621      	mov	r1, r4
10056db8:	f7fc ff2c 	bl	10053c14 <GAT_att_cmn_rcv>
10056dbc:	e018      	b.n	10056df0 <L2C_mux_acl_packet+0x64>
10056dbe:	283f      	cmp	r0, #63	@ 0x3f
10056dc0:	d008      	beq.n	10056dd4 <L2C_mux_acl_packet+0x48>
10056dc2:	3820      	subs	r0, #32
10056dc4:	285f      	cmp	r0, #95	@ 0x5f
10056dc6:	d805      	bhi.n	10056dd4 <L2C_mux_acl_packet+0x48>
10056dc8:	4668      	mov	r0, sp
10056dca:	7005      	strb	r5, [r0, #0]
10056dcc:	9401      	str	r4, [sp, #4]
10056dce:	f00b fb8b 	bl	100624e8 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10056dd2:	e00d      	b.n	10056df0 <L2C_mux_acl_packet+0x64>
10056dd4:	4628      	mov	r0, r5
10056dd6:	4621      	mov	r1, r4
10056dd8:	f7ff fdde 	bl	10056998 <l2c_release_unexpected_acl_packet>
10056ddc:	e00e      	b.n	10056dfc <L2C_mux_acl_packet+0x70>
10056dde:	4628      	mov	r0, r5
10056de0:	4621      	mov	r1, r4
10056de2:	f008 fb8d 	bl	1005f500 <smp_sap_l2c_acl_data_hndl>
10056de6:	e003      	b.n	10056df0 <L2C_mux_acl_packet+0x64>
10056de8:	4628      	mov	r0, r5
10056dea:	4621      	mov	r1, r4
10056dec:	f000 f808 	bl	10056e00 <L2C_acl_cframe_signaling_hndl>
10056df0:	2800      	cmp	r0, #0
10056df2:	d003      	beq.n	10056dfc <L2C_mux_acl_packet+0x70>
10056df4:	8861      	ldrh	r1, [r4, #2]
10056df6:	1d09      	adds	r1, r1, #4
10056df8:	8061      	strh	r1, [r4, #2]
10056dfa:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056dfc:	2000      	movs	r0, #0
10056dfe:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10056e00 <L2C_acl_cframe_signaling_hndl>:
10056e00:	b5f0      	push	{r4, r5, r6, r7, lr}
10056e02:	b085      	sub	sp, #20
10056e04:	460c      	mov	r4, r1
10056e06:	4606      	mov	r6, r0
10056e08:	880f      	ldrh	r7, [r1, #0]
10056e0a:	4638      	mov	r0, r7
10056e0c:	f7ff fd58 	bl	100568c0 <l2c_get_link_control_block_index>
10056e10:	4605      	mov	r5, r0
10056e12:	4880      	ldr	r0, [pc, #512]	@ (10057014 <__arm_cp.7_0>)
10056e14:	7ac1      	ldrb	r1, [r0, #11]
10056e16:	428d      	cmp	r5, r1
10056e18:	d206      	bcs.n	10056e28 <L2C_acl_cframe_signaling_hndl+0x28>
10056e1a:	2014      	movs	r0, #20
10056e1c:	4368      	muls	r0, r5
10056e1e:	4a7e      	ldr	r2, [pc, #504]	@ (10057018 <__arm_cp.7_1>)
10056e20:	6812      	ldr	r2, [r2, #0]
10056e22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10056e24:	1810      	adds	r0, r2, r0
10056e26:	9002      	str	r0, [sp, #8]
10056e28:	6862      	ldr	r2, [r4, #4]
10056e2a:	7a10      	ldrb	r0, [r2, #8]
10056e2c:	2300      	movs	r3, #0
10056e2e:	2e01      	cmp	r6, #1
10056e30:	d01c      	beq.n	10056e6c <L2C_acl_cframe_signaling_hndl+0x6c>
10056e32:	2e00      	cmp	r6, #0
10056e34:	d13c      	bne.n	10056eb0 <L2C_acl_cframe_signaling_hndl+0xb0>
10056e36:	461e      	mov	r6, r3
10056e38:	428d      	cmp	r5, r1
10056e3a:	d212      	bcs.n	10056e62 <L2C_acl_cframe_signaling_hndl+0x62>
10056e3c:	2819      	cmp	r0, #25
10056e3e:	d80b      	bhi.n	10056e58 <L2C_acl_cframe_signaling_hndl+0x58>
10056e40:	2101      	movs	r1, #1
10056e42:	4081      	lsls	r1, r0
10056e44:	4879      	ldr	r0, [pc, #484]	@ (1005702c <__arm_cp.7_6>)
10056e46:	4201      	tst	r1, r0
10056e48:	d006      	beq.n	10056e58 <L2C_acl_cframe_signaling_hndl+0x58>
10056e4a:	4873      	ldr	r0, [pc, #460]	@ (10057018 <__arm_cp.7_1>)
10056e4c:	6800      	ldr	r0, [r0, #0]
10056e4e:	2201      	movs	r2, #1
10056e50:	4b77      	ldr	r3, [pc, #476]	@ (10057030 <__arm_cp.7_7>)
10056e52:	4629      	mov	r1, r5
10056e54:	f008 fe35 	bl	1005fac2 <CST_start>
10056e58:	9a02      	ldr	r2, [sp, #8]
10056e5a:	7890      	ldrb	r0, [r2, #2]
10056e5c:	21fd      	movs	r1, #253	@ 0xfd
10056e5e:	4001      	ands	r1, r0
10056e60:	7091      	strb	r1, [r2, #2]
10056e62:	4620      	mov	r0, r4
10056e64:	f7fb f886 	bl	10051f74 <ACL_pkt_release>
10056e68:	4630      	mov	r0, r6
10056e6a:	e0d0      	b.n	1005700e <L2C_acl_cframe_signaling_hndl+0x20e>
10056e6c:	428d      	cmp	r5, r1
10056e6e:	d300      	bcc.n	10056e72 <L2C_acl_cframe_signaling_hndl+0x72>
10056e70:	e0c8      	b.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056e72:	7a56      	ldrb	r6, [r2, #9]
10056e74:	2813      	cmp	r0, #19
10056e76:	d81d      	bhi.n	10056eb4 <L2C_acl_cframe_signaling_hndl+0xb4>
10056e78:	2101      	movs	r1, #1
10056e7a:	9100      	str	r1, [sp, #0]
10056e7c:	4081      	lsls	r1, r0
10056e7e:	4a67      	ldr	r2, [pc, #412]	@ (1005701c <__arm_cp.7_2>)
10056e80:	4211      	tst	r1, r2
10056e82:	d017      	beq.n	10056eb4 <L2C_acl_cframe_signaling_hndl+0xb4>
10056e84:	2801      	cmp	r0, #1
10056e86:	d021      	beq.n	10056ecc <L2C_acl_cframe_signaling_hndl+0xcc>
10056e88:	2114      	movs	r1, #20
10056e8a:	4a63      	ldr	r2, [pc, #396]	@ (10057018 <__arm_cp.7_1>)
10056e8c:	6812      	ldr	r2, [r2, #0]
10056e8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10056e90:	2813      	cmp	r0, #19
10056e92:	d03e      	beq.n	10056f12 <L2C_acl_cframe_signaling_hndl+0x112>
10056e94:	2812      	cmp	r0, #18
10056e96:	d000      	beq.n	10056e9a <L2C_acl_cframe_signaling_hndl+0x9a>
10056e98:	e0b4      	b.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056e9a:	9301      	str	r3, [sp, #4]
10056e9c:	4608      	mov	r0, r1
10056e9e:	4368      	muls	r0, r5
10056ea0:	1810      	adds	r0, r2, r0
10056ea2:	7883      	ldrb	r3, [r0, #2]
10056ea4:	07df      	lsls	r7, r3, #31
10056ea6:	d166      	bne.n	10056f76 <L2C_acl_cframe_signaling_hndl+0x176>
10056ea8:	7146      	strb	r6, [r0, #5]
10056eaa:	8820      	ldrh	r0, [r4, #0]
10056eac:	2200      	movs	r2, #0
10056eae:	e09d      	b.n	10056fec <L2C_acl_cframe_signaling_hndl+0x1ec>
10056eb0:	4618      	mov	r0, r3
10056eb2:	e0ac      	b.n	1005700e <L2C_acl_cframe_signaling_hndl+0x20e>
10056eb4:	9301      	str	r3, [sp, #4]
10056eb6:	f00b fb15 	bl	100624e4 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
10056eba:	2800      	cmp	r0, #0
10056ebc:	d100      	bne.n	10056ec0 <L2C_acl_cframe_signaling_hndl+0xc0>
10056ebe:	e091      	b.n	10056fe4 <L2C_acl_cframe_signaling_hndl+0x1e4>
10056ec0:	a803      	add	r0, sp, #12
10056ec2:	7105      	strb	r5, [r0, #4]
10056ec4:	9403      	str	r4, [sp, #12]
10056ec6:	f00b fb0b 	bl	100624e0 <L2C_cos_process_cfc_mode_command_ucfg_weak>
10056eca:	e093      	b.n	10056ff4 <L2C_acl_cframe_signaling_hndl+0x1f4>
10056ecc:	2701      	movs	r7, #1
10056ece:	4628      	mov	r0, r5
10056ed0:	4639      	mov	r1, r7
10056ed2:	4632      	mov	r2, r6
10056ed4:	9301      	str	r3, [sp, #4]
10056ed6:	f7ff fd2f 	bl	10056938 <l2c_pre_process_incoming_response_packet>
10056eda:	9b01      	ldr	r3, [sp, #4]
10056edc:	2800      	cmp	r0, #0
10056ede:	d000      	beq.n	10056ee2 <L2C_acl_cframe_signaling_hndl+0xe2>
10056ee0:	e090      	b.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056ee2:	8826      	ldrh	r6, [r4, #0]
10056ee4:	484e      	ldr	r0, [pc, #312]	@ (10057020 <__arm_cp.7_3>)
10056ee6:	6800      	ldr	r0, [r0, #0]
10056ee8:	6980      	ldr	r0, [r0, #24]
10056eea:	2142      	movs	r1, #66	@ 0x42
10056eec:	2252      	movs	r2, #82	@ 0x52
10056eee:	2303      	movs	r3, #3
10056ef0:	f7fb f9f4 	bl	100522dc <aci_event_fifo_push_header>
10056ef4:	9b01      	ldr	r3, [sp, #4]
10056ef6:	2800      	cmp	r0, #0
10056ef8:	d100      	bne.n	10056efc <L2C_acl_cframe_signaling_hndl+0xfc>
10056efa:	e083      	b.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056efc:	4605      	mov	r5, r0
10056efe:	4631      	mov	r1, r6
10056f00:	1d06      	adds	r6, r0, #4
10056f02:	4630      	mov	r0, r6
10056f04:	4622      	mov	r2, r4
10056f06:	f7fb fd79 	bl	100529fc <aci_l2cap_command_reject_event_copy>
10056f0a:	02f8      	lsls	r0, r7, #11
10056f0c:	300a      	adds	r0, #10
10056f0e:	2108      	movs	r1, #8
10056f10:	e058      	b.n	10056fc4 <L2C_acl_cframe_signaling_hndl+0x1c4>
10056f12:	4369      	muls	r1, r5
10056f14:	1850      	adds	r0, r2, r1
10056f16:	7880      	ldrb	r0, [r0, #2]
10056f18:	07c0      	lsls	r0, r0, #31
10056f1a:	d173      	bne.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056f1c:	2113      	movs	r1, #19
10056f1e:	4628      	mov	r0, r5
10056f20:	4632      	mov	r2, r6
10056f22:	9301      	str	r3, [sp, #4]
10056f24:	f7ff fd08 	bl	10056938 <l2c_pre_process_incoming_response_packet>
10056f28:	9b01      	ldr	r3, [sp, #4]
10056f2a:	2800      	cmp	r0, #0
10056f2c:	d16a      	bne.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056f2e:	2108      	movs	r1, #8
10056f30:	4620      	mov	r0, r4
10056f32:	f7fb f844 	bl	10051fbe <ACL_pkt_read_16b>
10056f36:	9b01      	ldr	r3, [sp, #4]
10056f38:	4606      	mov	r6, r0
10056f3a:	483a      	ldr	r0, [pc, #232]	@ (10057024 <__arm_cp.7_4>)
10056f3c:	6800      	ldr	r0, [r0, #0]
10056f3e:	214f      	movs	r1, #79	@ 0x4f
10056f40:	5c40      	ldrb	r0, [r0, r1]
10056f42:	0780      	lsls	r0, r0, #30
10056f44:	d55e      	bpl.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056f46:	8827      	ldrh	r7, [r4, #0]
10056f48:	4835      	ldr	r0, [pc, #212]	@ (10057020 <__arm_cp.7_3>)
10056f4a:	6800      	ldr	r0, [r0, #0]
10056f4c:	6980      	ldr	r0, [r0, #24]
10056f4e:	2142      	movs	r1, #66	@ 0x42
10056f50:	224c      	movs	r2, #76	@ 0x4c
10056f52:	2303      	movs	r3, #3
10056f54:	f7fb f9c2 	bl	100522dc <aci_event_fifo_push_header>
10056f58:	9b01      	ldr	r3, [sp, #4]
10056f5a:	2800      	cmp	r0, #0
10056f5c:	d052      	beq.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056f5e:	4605      	mov	r5, r0
10056f60:	7306      	strb	r6, [r0, #12]
10056f62:	7287      	strb	r7, [r0, #10]
10056f64:	0a30      	lsrs	r0, r6, #8
10056f66:	7368      	strb	r0, [r5, #13]
10056f68:	0a38      	lsrs	r0, r7, #8
10056f6a:	72e8      	strb	r0, [r5, #11]
10056f6c:	1d2e      	adds	r6, r5, #4
10056f6e:	9800      	ldr	r0, [sp, #0]
10056f70:	02c0      	lsls	r0, r0, #11
10056f72:	2106      	movs	r1, #6
10056f74:	e026      	b.n	10056fc4 <L2C_acl_cframe_signaling_hndl+0x1c4>
10056f76:	0758      	lsls	r0, r3, #29
10056f78:	9b01      	ldr	r3, [sp, #4]
10056f7a:	d443      	bmi.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056f7c:	4369      	muls	r1, r5
10056f7e:	1852      	adds	r2, r2, r1
10056f80:	2012      	movs	r0, #18
10056f82:	4631      	mov	r1, r6
10056f84:	f7ff fcd1 	bl	1005692a <l2c_post_process_incoming_request_packet>
10056f88:	9b01      	ldr	r3, [sp, #4]
10056f8a:	4826      	ldr	r0, [pc, #152]	@ (10057024 <__arm_cp.7_4>)
10056f8c:	6800      	ldr	r0, [r0, #0]
10056f8e:	214f      	movs	r1, #79	@ 0x4f
10056f90:	5c40      	ldrb	r0, [r0, r1]
10056f92:	07c0      	lsls	r0, r0, #31
10056f94:	d036      	beq.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056f96:	8827      	ldrh	r7, [r4, #0]
10056f98:	4821      	ldr	r0, [pc, #132]	@ (10057020 <__arm_cp.7_3>)
10056f9a:	6800      	ldr	r0, [r0, #0]
10056f9c:	6980      	ldr	r0, [r0, #24]
10056f9e:	2142      	movs	r1, #66	@ 0x42
10056fa0:	224d      	movs	r2, #77	@ 0x4d
10056fa2:	2305      	movs	r3, #5
10056fa4:	f7fb f99a 	bl	100522dc <aci_event_fifo_push_header>
10056fa8:	9b01      	ldr	r3, [sp, #4]
10056faa:	2800      	cmp	r0, #0
10056fac:	d02a      	beq.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056fae:	4605      	mov	r5, r0
10056fb0:	1d06      	adds	r6, r0, #4
10056fb2:	4630      	mov	r0, r6
10056fb4:	4639      	mov	r1, r7
10056fb6:	4622      	mov	r2, r4
10056fb8:	f7fb fcd8 	bl	1005296c <aci_l2cap_connection_update_req_event_copy>
10056fbc:	9800      	ldr	r0, [sp, #0]
10056fbe:	02c0      	lsls	r0, r0, #11
10056fc0:	1c80      	adds	r0, r0, #2
10056fc2:	210f      	movs	r1, #15
10056fc4:	22ff      	movs	r2, #255	@ 0xff
10056fc6:	7072      	strb	r2, [r6, #1]
10056fc8:	2282      	movs	r2, #130	@ 0x82
10056fca:	7032      	strb	r2, [r6, #0]
10056fcc:	0a02      	lsrs	r2, r0, #8
10056fce:	726a      	strb	r2, [r5, #9]
10056fd0:	7228      	strb	r0, [r5, #8]
10056fd2:	2000      	movs	r0, #0
10056fd4:	71e8      	strb	r0, [r5, #7]
10056fd6:	71a9      	strb	r1, [r5, #6]
10056fd8:	2042      	movs	r0, #66	@ 0x42
10056fda:	4629      	mov	r1, r5
10056fdc:	f7fb fa1b 	bl	10052416 <aci_event_fifo_push>
10056fe0:	9b01      	ldr	r3, [sp, #4]
10056fe2:	e00f      	b.n	10057004 <L2C_acl_cframe_signaling_hndl+0x204>
10056fe4:	9802      	ldr	r0, [sp, #8]
10056fe6:	7146      	strb	r6, [r0, #5]
10056fe8:	2200      	movs	r2, #0
10056fea:	4638      	mov	r0, r7
10056fec:	4631      	mov	r1, r6
10056fee:	4613      	mov	r3, r2
10056ff0:	f7ff fcdc 	bl	100569ac <L2C_build_command_reject_pdu>
10056ff4:	9b01      	ldr	r3, [sp, #4]
10056ff6:	2812      	cmp	r0, #18
10056ff8:	d809      	bhi.n	1005700e <L2C_acl_cframe_signaling_hndl+0x20e>
10056ffa:	2101      	movs	r1, #1
10056ffc:	4081      	lsls	r1, r0
10056ffe:	4a0a      	ldr	r2, [pc, #40]	@ (10057028 <__arm_cp.7_5>)
10057000:	4211      	tst	r1, r2
10057002:	d004      	beq.n	1005700e <L2C_acl_cframe_signaling_hndl+0x20e>
10057004:	4620      	mov	r0, r4
10057006:	461c      	mov	r4, r3
10057008:	f7fa ffb4 	bl	10051f74 <ACL_pkt_release>
1005700c:	4620      	mov	r0, r4
1005700e:	b005      	add	sp, #20
10057010:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057012:	46c0      	nop			@ (mov r8, r8)

10057014 <__arm_cp.7_0>:
10057014:	20000f34 	.word	0x20000f34

10057018 <__arm_cp.7_1>:
10057018:	20000f18 	.word	0x20000f18

1005701c <__arm_cp.7_2>:
1005701c:	000c0002 	.word	0x000c0002

10057020 <__arm_cp.7_3>:
10057020:	20000ed0 	.word	0x20000ed0

10057024 <__arm_cp.7_4>:
10057024:	20000f20 	.word	0x20000f20

10057028 <__arm_cp.7_5>:
10057028:	00040005 	.word	0x00040005

1005702c <__arm_cp.7_6>:
1005702c:	02940040 	.word	0x02940040

10057030 <__arm_cp.7_7>:
10057030:	00007530 	.word	0x00007530

10057034 <L2C_timeout_handler_signalling>:
10057034:	b570      	push	{r4, r5, r6, lr}
10057036:	2414      	movs	r4, #20
10057038:	4344      	muls	r4, r0
1005703a:	4d14      	ldr	r5, [pc, #80]	@ (1005708c <__arm_cp.8_0>)
1005703c:	4814      	ldr	r0, [pc, #80]	@ (10057090 <__arm_cp.8_1>)
1005703e:	6800      	ldr	r0, [r0, #0]
10057040:	214f      	movs	r1, #79	@ 0x4f
10057042:	5c40      	ldrb	r0, [r0, r1]
10057044:	0700      	lsls	r0, r0, #28
10057046:	d513      	bpl.n	10057070 <L2C_timeout_handler_signalling+0x3c>
10057048:	6828      	ldr	r0, [r5, #0]
1005704a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005704c:	5b06      	ldrh	r6, [r0, r4]
1005704e:	4811      	ldr	r0, [pc, #68]	@ (10057094 <__arm_cp.8_2>)
10057050:	6800      	ldr	r0, [r0, #0]
10057052:	6980      	ldr	r0, [r0, #24]
10057054:	2206      	movs	r2, #6
10057056:	2102      	movs	r1, #2
10057058:	460b      	mov	r3, r1
1005705a:	f7fb f93f 	bl	100522dc <aci_event_fifo_push_header>
1005705e:	2800      	cmp	r0, #0
10057060:	d006      	beq.n	10057070 <L2C_timeout_handler_signalling+0x3c>
10057062:	4601      	mov	r1, r0
10057064:	480c      	ldr	r0, [pc, #48]	@ (10057098 <__arm_cp.8_3>)
10057066:	6048      	str	r0, [r1, #4]
10057068:	810e      	strh	r6, [r1, #8]
1005706a:	2002      	movs	r0, #2
1005706c:	f7fb f9d3 	bl	10052416 <aci_event_fifo_push>
10057070:	6828      	ldr	r0, [r5, #0]
10057072:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10057074:	1901      	adds	r1, r0, r4
10057076:	2200      	movs	r2, #0
10057078:	718a      	strb	r2, [r1, #6]
1005707a:	788a      	ldrb	r2, [r1, #2]
1005707c:	23f9      	movs	r3, #249	@ 0xf9
1005707e:	4013      	ands	r3, r2
10057080:	708b      	strb	r3, [r1, #2]
10057082:	5b00      	ldrh	r0, [r0, r4]
10057084:	21ff      	movs	r1, #255	@ 0xff
10057086:	f7ff fd17 	bl	10056ab8 <L2C_cos_channel_descriptors_reset_pending>
1005708a:	bd70      	pop	{r4, r5, r6, pc}

1005708c <__arm_cp.8_0>:
1005708c:	20000f18 	.word	0x20000f18

10057090 <__arm_cp.8_1>:
10057090:	20000f20 	.word	0x20000f20

10057094 <__arm_cp.8_2>:
10057094:	20000ed0 	.word	0x20000ed0

10057098 <__arm_cp.8_3>:
10057098:	10061125 	.word	0x10061125

1005709c <l2c_sap_hci_le_connection_complete_evt_hndl>:
1005709c:	b5b0      	push	{r4, r5, r7, lr}
1005709e:	460c      	mov	r4, r1
100570a0:	4605      	mov	r5, r0
100570a2:	2000      	movs	r0, #0
100570a4:	f7ff fbf0 	bl	10056888 <l2c_get_link_control_block_ref>
100570a8:	2800      	cmp	r0, #0
100570aa:	d005      	beq.n	100570b8 <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
100570ac:	2101      	movs	r1, #1
100570ae:	8081      	strh	r1, [r0, #4]
100570b0:	8005      	strh	r5, [r0, #0]
100570b2:	4261      	negs	r1, r4
100570b4:	4161      	adcs	r1, r4
100570b6:	7081      	strb	r1, [r0, #2]
100570b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100570bc <l2c_sap_hci_disconnection_complete_evt_hndl>:
100570bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100570be:	4604      	mov	r4, r0
100570c0:	f7ff fbfe 	bl	100568c0 <l2c_get_link_control_block_index>
100570c4:	4605      	mov	r5, r0
100570c6:	4810      	ldr	r0, [pc, #64]	@ (10057108 <__arm_cp.1_0>)
100570c8:	7ac0      	ldrb	r0, [r0, #11]
100570ca:	4285      	cmp	r5, r0
100570cc:	d21b      	bcs.n	10057106 <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
100570ce:	4e0f      	ldr	r6, [pc, #60]	@ (1005710c <__arm_cp.1_1>)
100570d0:	6830      	ldr	r0, [r6, #0]
100570d2:	4629      	mov	r1, r5
100570d4:	f008 fcbf 	bl	1005fa56 <CST_stop>
100570d8:	2714      	movs	r7, #20
100570da:	436f      	muls	r7, r5
100570dc:	6830      	ldr	r0, [r6, #0]
100570de:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100570e0:	2500      	movs	r5, #0
100570e2:	53c5      	strh	r5, [r0, r7]
100570e4:	19c0      	adds	r0, r0, r7
100570e6:	6900      	ldr	r0, [r0, #16]
100570e8:	2800      	cmp	r0, #0
100570ea:	d009      	beq.n	10057100 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
100570ec:	f7fa ff42 	bl	10051f74 <ACL_pkt_release>
100570f0:	6830      	ldr	r0, [r6, #0]
100570f2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100570f4:	19c0      	adds	r0, r0, r7
100570f6:	6105      	str	r5, [r0, #16]
100570f8:	6830      	ldr	r0, [r6, #0]
100570fa:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100570fc:	19c0      	adds	r0, r0, r7
100570fe:	8185      	strh	r5, [r0, #12]
10057100:	4620      	mov	r0, r4
10057102:	f7ff fd0c 	bl	10056b1e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
10057106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057108 <__arm_cp.1_0>:
10057108:	20000f34 	.word	0x20000f34

1005710c <__arm_cp.1_1>:
1005710c:	20000f18 	.word	0x20000f18

10057110 <llc_cig_cmn_start_cis_ucfg_weak>:
10057110:	4770      	bx	lr

10057112 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
10057112:	4770      	bx	lr

10057114 <llc_conn_get_cntxt_p>:
10057114:	4803      	ldr	r0, [pc, #12]	@ (10057124 <__arm_cp.0_0>)
10057116:	6800      	ldr	r0, [r0, #0]
10057118:	219c      	movs	r1, #156	@ 0x9c
1005711a:	5840      	ldr	r0, [r0, r1]
1005711c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005711e:	6800      	ldr	r0, [r0, #0]
10057120:	4770      	bx	lr
10057122:	46c0      	nop			@ (mov r8, r8)

10057124 <__arm_cp.0_0>:
10057124:	20000f20 	.word	0x20000f20

10057128 <llc_conn_get_cntxt_per_p>:
10057128:	214d      	movs	r1, #77	@ 0x4d
1005712a:	0089      	lsls	r1, r1, #2
1005712c:	4341      	muls	r1, r0
1005712e:	4804      	ldr	r0, [pc, #16]	@ (10057140 <__arm_cp.1_0>)
10057130:	6800      	ldr	r0, [r0, #0]
10057132:	229c      	movs	r2, #156	@ 0x9c
10057134:	5880      	ldr	r0, [r0, r2]
10057136:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10057138:	6840      	ldr	r0, [r0, #4]
1005713a:	1840      	adds	r0, r0, r1
1005713c:	4770      	bx	lr
1005713e:	46c0      	nop			@ (mov r8, r8)

10057140 <__arm_cp.1_0>:
10057140:	20000f20 	.word	0x20000f20

10057144 <llc_conn_get_cntxt_per_p_from_handle>:
10057144:	b510      	push	{r4, lr}
10057146:	4601      	mov	r1, r0
10057148:	2000      	movs	r0, #0
1005714a:	4a0d      	ldr	r2, [pc, #52]	@ (10057180 <__arm_cp.2_0>)
1005714c:	4291      	cmp	r1, r2
1005714e:	d015      	beq.n	1005717c <llc_conn_get_cntxt_per_p_from_handle+0x38>
10057150:	4a0c      	ldr	r2, [pc, #48]	@ (10057184 <__arm_cp.2_1>)
10057152:	6812      	ldr	r2, [r2, #0]
10057154:	2334      	movs	r3, #52	@ 0x34
10057156:	5cd2      	ldrb	r2, [r2, r3]
10057158:	1c52      	adds	r2, r2, #1
1005715a:	4b0b      	ldr	r3, [pc, #44]	@ (10057188 <__arm_cp.2_2>)
1005715c:	681b      	ldr	r3, [r3, #0]
1005715e:	249c      	movs	r4, #156	@ 0x9c
10057160:	591b      	ldr	r3, [r3, r4]
10057162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10057164:	685b      	ldr	r3, [r3, #4]
10057166:	1e52      	subs	r2, r2, #1
10057168:	d008      	beq.n	1005717c <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005716a:	244d      	movs	r4, #77	@ 0x4d
1005716c:	00a4      	lsls	r4, r4, #2
1005716e:	191c      	adds	r4, r3, r4
10057170:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
10057172:	428b      	cmp	r3, r1
10057174:	4623      	mov	r3, r4
10057176:	d1f6      	bne.n	10057166 <llc_conn_get_cntxt_per_p_from_handle+0x22>
10057178:	4804      	ldr	r0, [pc, #16]	@ (1005718c <__arm_cp.2_3>)
1005717a:	1820      	adds	r0, r4, r0
1005717c:	bd10      	pop	{r4, pc}
1005717e:	46c0      	nop			@ (mov r8, r8)

10057180 <__arm_cp.2_0>:
10057180:	0000ffff 	.word	0x0000ffff

10057184 <__arm_cp.2_1>:
10057184:	20000ecc 	.word	0x20000ecc

10057188 <__arm_cp.2_2>:
10057188:	20000f20 	.word	0x20000f20

1005718c <__arm_cp.2_3>:
1005718c:	fffffecc 	.word	0xfffffecc

10057190 <llc_conn_get_phy_upd_cntxt_per_p>:
10057190:	b510      	push	{r4, lr}
10057192:	4604      	mov	r4, r0
10057194:	f7f4 fe12 	bl	1004bdbc <phy_upd_csr_ucfg>
10057198:	2801      	cmp	r0, #1
1005719a:	d109      	bne.n	100571b0 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
1005719c:	200e      	movs	r0, #14
1005719e:	4360      	muls	r0, r4
100571a0:	4904      	ldr	r1, [pc, #16]	@ (100571b4 <__arm_cp.7_0>)
100571a2:	6809      	ldr	r1, [r1, #0]
100571a4:	229c      	movs	r2, #156	@ 0x9c
100571a6:	5889      	ldr	r1, [r1, r2]
100571a8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100571aa:	6949      	ldr	r1, [r1, #20]
100571ac:	1808      	adds	r0, r1, r0
100571ae:	bd10      	pop	{r4, pc}
100571b0:	2000      	movs	r0, #0
100571b2:	bd10      	pop	{r4, pc}

100571b4 <__arm_cp.7_0>:
100571b4:	20000f20 	.word	0x20000f20

100571b8 <llc_conn_init>:
100571b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100571ba:	4c3e      	ldr	r4, [pc, #248]	@ (100572b4 <__arm_cp.8_0>)
100571bc:	6820      	ldr	r0, [r4, #0]
100571be:	259c      	movs	r5, #156	@ 0x9c
100571c0:	5940      	ldr	r0, [r0, r5]
100571c2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100571c4:	6803      	ldr	r3, [r0, #0]
100571c6:	2136      	movs	r1, #54	@ 0x36
100571c8:	2600      	movs	r6, #0
100571ca:	545e      	strb	r6, [r3, r1]
100571cc:	493a      	ldr	r1, [pc, #232]	@ (100572b8 <__arm_cp.8_1>)
100571ce:	6949      	ldr	r1, [r1, #20]
100571d0:	0c0a      	lsrs	r2, r1, #16
100571d2:	2a19      	cmp	r2, #25
100571d4:	d301      	bcc.n	100571da <llc_conn_init+0x22>
100571d6:	2119      	movs	r1, #25
100571d8:	0409      	lsls	r1, r1, #16
100571da:	6059      	str	r1, [r3, #4]
100571dc:	6019      	str	r1, [r3, #0]
100571de:	6900      	ldr	r0, [r0, #16]
100571e0:	9302      	str	r3, [sp, #8]
100571e2:	6098      	str	r0, [r3, #8]
100571e4:	f000 fad0 	bl	10057788 <llc_conn_list_reset>
100571e8:	6820      	ldr	r0, [r4, #0]
100571ea:	5940      	ldr	r0, [r0, r5]
100571ec:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100571ee:	6807      	ldr	r7, [r0, #0]
100571f0:	f7ff fac4 	bl	1005677c <data_length_extension_csr_ucfg_weak>
100571f4:	2801      	cmp	r0, #1
100571f6:	d001      	beq.n	100571fc <llc_conn_init+0x44>
100571f8:	201b      	movs	r0, #27
100571fa:	e000      	b.n	100571fe <llc_conn_init+0x46>
100571fc:	20fb      	movs	r0, #251	@ 0xfb
100571fe:	82b8      	strh	r0, [r7, #20]
10057200:	f7ff fabc 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10057204:	4604      	mov	r4, r0
10057206:	2029      	movs	r0, #41	@ 0x29
10057208:	00c0      	lsls	r0, r0, #3
1005720a:	9000      	str	r0, [sp, #0]
1005720c:	20a9      	movs	r0, #169	@ 0xa9
1005720e:	0105      	lsls	r5, r0, #4
10057210:	f7f4 fdd4 	bl	1004bdbc <phy_upd_csr_ucfg>
10057214:	2c01      	cmp	r4, #1
10057216:	9501      	str	r5, [sp, #4]
10057218:	d107      	bne.n	1005722a <llc_conn_init+0x72>
1005721a:	2801      	cmp	r0, #1
1005721c:	4d27      	ldr	r5, [pc, #156]	@ (100572bc <__arm_cp.8_2>)
1005721e:	9c00      	ldr	r4, [sp, #0]
10057220:	d00c      	beq.n	1005723c <llc_conn_init+0x84>
10057222:	4d27      	ldr	r5, [pc, #156]	@ (100572c0 <__arm_cp.8_3>)
10057224:	f7ff fa4e 	bl	100566c4 <cte_csr_ucfg_weak>
10057228:	e005      	b.n	10057236 <llc_conn_init+0x7e>
1005722a:	2801      	cmp	r0, #1
1005722c:	9c00      	ldr	r4, [sp, #0]
1005722e:	d005      	beq.n	1005723c <llc_conn_init+0x84>
10057230:	f7ff fa48 	bl	100566c4 <cte_csr_ucfg_weak>
10057234:	4625      	mov	r5, r4
10057236:	2801      	cmp	r0, #1
10057238:	d100      	bne.n	1005723c <llc_conn_init+0x84>
1005723a:	3508      	adds	r5, #8
1005723c:	82fd      	strh	r5, [r7, #22]
1005723e:	f7ff fa9d 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10057242:	2801      	cmp	r0, #1
10057244:	d001      	beq.n	1005724a <llc_conn_init+0x92>
10057246:	201b      	movs	r0, #27
10057248:	e000      	b.n	1005724c <llc_conn_init+0x94>
1005724a:	20fb      	movs	r0, #251	@ 0xfb
1005724c:	8338      	strh	r0, [r7, #24]
1005724e:	f7ff fa95 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10057252:	4605      	mov	r5, r0
10057254:	f7f4 fdb2 	bl	1004bdbc <phy_upd_csr_ucfg>
10057258:	2d01      	cmp	r5, #1
1005725a:	d107      	bne.n	1005726c <llc_conn_init+0xb4>
1005725c:	2801      	cmp	r0, #1
1005725e:	9d01      	ldr	r5, [sp, #4]
10057260:	4916      	ldr	r1, [pc, #88]	@ (100572bc <__arm_cp.8_2>)
10057262:	d00d      	beq.n	10057280 <llc_conn_init+0xc8>
10057264:	f7ff fa2e 	bl	100566c4 <cte_csr_ucfg_weak>
10057268:	4915      	ldr	r1, [pc, #84]	@ (100572c0 <__arm_cp.8_3>)
1005726a:	e006      	b.n	1005727a <llc_conn_init+0xc2>
1005726c:	2801      	cmp	r0, #1
1005726e:	9d01      	ldr	r5, [sp, #4]
10057270:	4629      	mov	r1, r5
10057272:	d005      	beq.n	10057280 <llc_conn_init+0xc8>
10057274:	f7ff fa26 	bl	100566c4 <cte_csr_ucfg_weak>
10057278:	4621      	mov	r1, r4
1005727a:	2801      	cmp	r0, #1
1005727c:	d100      	bne.n	10057280 <llc_conn_init+0xc8>
1005727e:	3108      	adds	r1, #8
10057280:	83fc      	strh	r4, [r7, #30]
10057282:	201b      	movs	r0, #27
10057284:	83b8      	strh	r0, [r7, #28]
10057286:	827d      	strh	r5, [r7, #18]
10057288:	823c      	strh	r4, [r7, #16]
1005728a:	81fc      	strh	r4, [r7, #14]
1005728c:	81b8      	strh	r0, [r7, #12]
1005728e:	8379      	strh	r1, [r7, #26]
10057290:	f7f4 fed3 	bl	1004c03a <LL_phy_update_init_ucfg>
10057294:	9802      	ldr	r0, [sp, #8]
10057296:	f001 fd33 	bl	10058d00 <llc_subrate_init_acceptable>
1005729a:	4c0a      	ldr	r4, [pc, #40]	@ (100572c4 <__arm_cp.8_4>)
1005729c:	6820      	ldr	r0, [r4, #0]
1005729e:	2134      	movs	r1, #52	@ 0x34
100572a0:	5c41      	ldrb	r1, [r0, r1]
100572a2:	b2f0      	uxtb	r0, r6
100572a4:	4288      	cmp	r0, r1
100572a6:	d203      	bcs.n	100572b0 <llc_conn_init+0xf8>
100572a8:	f000 f80e 	bl	100572c8 <llc_conn_per_init>
100572ac:	1c76      	adds	r6, r6, #1
100572ae:	e7f5      	b.n	1005729c <llc_conn_init+0xe4>
100572b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100572b2:	46c0      	nop			@ (mov r8, r8)

100572b4 <__arm_cp.8_0>:
100572b4:	20000f20 	.word	0x20000f20

100572b8 <__arm_cp.8_1>:
100572b8:	20000f34 	.word	0x20000f34

100572bc <__arm_cp.8_2>:
100572bc:	00004290 	.word	0x00004290

100572c0 <__arm_cp.8_3>:
100572c0:	00000848 	.word	0x00000848

100572c4 <__arm_cp.8_4>:
100572c4:	20000ecc 	.word	0x20000ecc

100572c8 <llc_conn_per_init>:
100572c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100572ca:	4605      	mov	r5, r0
100572cc:	204d      	movs	r0, #77	@ 0x4d
100572ce:	0080      	lsls	r0, r0, #2
100572d0:	4368      	muls	r0, r5
100572d2:	492d      	ldr	r1, [pc, #180]	@ (10057388 <__arm_cp.9_0>)
100572d4:	6809      	ldr	r1, [r1, #0]
100572d6:	279c      	movs	r7, #156	@ 0x9c
100572d8:	59c9      	ldr	r1, [r1, r7]
100572da:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100572dc:	6849      	ldr	r1, [r1, #4]
100572de:	180c      	adds	r4, r1, r0
100572e0:	f001 fc9a 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100572e4:	4606      	mov	r6, r0
100572e6:	f001 fc8d 	bl	10058c04 <cis_csr_ucfg_weak>
100572ea:	4330      	orrs	r0, r6
100572ec:	b2c0      	uxtb	r0, r0
100572ee:	f006 f8a3 	bl	1005d438 <LL_get_control_pdu_size>
100572f2:	2200      	movs	r2, #0
100572f4:	51e2      	str	r2, [r4, r7]
100572f6:	212e      	movs	r1, #46	@ 0x2e
100572f8:	231f      	movs	r3, #31
100572fa:	5463      	strb	r3, [r4, r1]
100572fc:	85a2      	strh	r2, [r4, #44]	@ 0x2c
100572fe:	0880      	lsrs	r0, r0, #2
10057300:	4368      	muls	r0, r5
10057302:	0080      	lsls	r0, r0, #2
10057304:	4920      	ldr	r1, [pc, #128]	@ (10057388 <__arm_cp.9_0>)
10057306:	6809      	ldr	r1, [r1, #0]
10057308:	460b      	mov	r3, r1
1005730a:	3394      	adds	r3, #148	@ 0x94
1005730c:	685b      	ldr	r3, [r3, #4]
1005730e:	181b      	adds	r3, r3, r0
10057310:	2690      	movs	r6, #144	@ 0x90
10057312:	51a3      	str	r3, [r4, r6]
10057314:	238c      	movs	r3, #140	@ 0x8c
10057316:	50e2      	str	r2, [r4, r3]
10057318:	2388      	movs	r3, #136	@ 0x88
1005731a:	50e2      	str	r2, [r4, r3]
1005731c:	2330      	movs	r3, #48	@ 0x30
1005731e:	54e5      	strb	r5, [r4, r3]
10057320:	239a      	movs	r3, #154	@ 0x9a
10057322:	52e2      	strh	r2, [r4, r3]
10057324:	23ff      	movs	r3, #255	@ 0xff
10057326:	461d      	mov	r5, r3
10057328:	3508      	adds	r5, #8
1005732a:	5562      	strb	r2, [r4, r5]
1005732c:	2241      	movs	r2, #65	@ 0x41
1005732e:	54a3      	strb	r3, [r4, r2]
10057330:	222f      	movs	r2, #47	@ 0x2f
10057332:	2307      	movs	r3, #7
10057334:	54a3      	strb	r3, [r4, r2]
10057336:	227d      	movs	r2, #125	@ 0x7d
10057338:	0452      	lsls	r2, r2, #17
1005733a:	66e2      	str	r2, [r4, #108]	@ 0x6c
1005733c:	6722      	str	r2, [r4, #112]	@ 0x70
1005733e:	2201      	movs	r2, #1
10057340:	8522      	strh	r2, [r4, #40]	@ 0x28
10057342:	4a12      	ldr	r2, [pc, #72]	@ (1005738c <__arm_cp.9_1>)
10057344:	8762      	strh	r2, [r4, #58]	@ 0x3a
10057346:	2219      	movs	r2, #25
10057348:	0412      	lsls	r2, r2, #16
1005734a:	65a2      	str	r2, [r4, #88]	@ 0x58
1005734c:	65e2      	str	r2, [r4, #92]	@ 0x5c
1005734e:	6622      	str	r2, [r4, #96]	@ 0x60
10057350:	4622      	mov	r2, r4
10057352:	32b4      	adds	r2, #180	@ 0xb4
10057354:	2394      	movs	r3, #148	@ 0x94
10057356:	58c9      	ldr	r1, [r1, r3]
10057358:	231b      	movs	r3, #27
1005735a:	8053      	strh	r3, [r2, #2]
1005735c:	1808      	adds	r0, r1, r0
1005735e:	4621      	mov	r1, r4
10057360:	3190      	adds	r1, #144	@ 0x90
10057362:	6048      	str	r0, [r1, #4]
10057364:	20b4      	movs	r0, #180	@ 0xb4
10057366:	5223      	strh	r3, [r4, r0]
10057368:	4809      	ldr	r0, [pc, #36]	@ (10057390 <__arm_cp.9_2>)
1005736a:	490a      	ldr	r1, [pc, #40]	@ (10057394 <__arm_cp.9_3>)
1005736c:	6050      	str	r0, [r2, #4]
1005736e:	6091      	str	r1, [r2, #8]
10057370:	2029      	movs	r0, #41	@ 0x29
10057372:	00c0      	lsls	r0, r0, #3
10057374:	8190      	strh	r0, [r2, #12]
10057376:	4620      	mov	r0, r4
10057378:	f001 fcd7 	bl	10058d2a <llc_subrate_reset_params>
1005737c:	3480      	adds	r4, #128	@ 0x80
1005737e:	4620      	mov	r0, r4
10057380:	f008 fce8 	bl	1005fd54 <ACL_list_init>
10057384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057386:	46c0      	nop			@ (mov r8, r8)

10057388 <__arm_cp.9_0>:
10057388:	20000f20 	.word	0x20000f20

1005738c <__arm_cp.9_1>:
1005738c:	0000ffff 	.word	0x0000ffff

10057390 <__arm_cp.9_2>:
10057390:	0148001b 	.word	0x0148001b

10057394 <__arm_cp.9_3>:
10057394:	001b0148 	.word	0x001b0148

10057398 <llc_conn_mem_allocate>:
10057398:	b5f0      	push	{r4, r5, r6, r7, lr}
1005739a:	b085      	sub	sp, #20
1005739c:	2b01      	cmp	r3, #1
1005739e:	d000      	beq.n	100573a2 <llc_conn_mem_allocate+0xa>
100573a0:	e082      	b.n	100574a8 <llc_conn_mem_allocate+0x110>
100573a2:	ab02      	add	r3, sp, #8
100573a4:	c307      	stmia	r3!, {r0, r1, r2}
100573a6:	4841      	ldr	r0, [pc, #260]	@ (100574ac <__arm_cp.10_0>)
100573a8:	7fc1      	ldrb	r1, [r0, #31]
100573aa:	9101      	str	r1, [sp, #4]
100573ac:	7ac4      	ldrb	r4, [r0, #11]
100573ae:	9400      	str	r4, [sp, #0]
100573b0:	2601      	movs	r6, #1
100573b2:	2124      	movs	r1, #36	@ 0x24
100573b4:	4a3e      	ldr	r2, [pc, #248]	@ (100574b0 <__arm_cp.10_1>)
100573b6:	4630      	mov	r0, r6
100573b8:	4790      	blx	r2
100573ba:	493e      	ldr	r1, [pc, #248]	@ (100574b4 <__arm_cp.10_2>)
100573bc:	6809      	ldr	r1, [r1, #0]
100573be:	279c      	movs	r7, #156	@ 0x9c
100573c0:	59c9      	ldr	r1, [r1, r7]
100573c2:	63c8      	str	r0, [r1, #60]	@ 0x3c
100573c4:	2538      	movs	r5, #56	@ 0x38
100573c6:	4630      	mov	r0, r6
100573c8:	4629      	mov	r1, r5
100573ca:	4a39      	ldr	r2, [pc, #228]	@ (100574b0 <__arm_cp.10_1>)
100573cc:	4790      	blx	r2
100573ce:	4939      	ldr	r1, [pc, #228]	@ (100574b4 <__arm_cp.10_2>)
100573d0:	6809      	ldr	r1, [r1, #0]
100573d2:	59c9      	ldr	r1, [r1, r7]
100573d4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100573d6:	6008      	str	r0, [r1, #0]
100573d8:	204d      	movs	r0, #77	@ 0x4d
100573da:	0081      	lsls	r1, r0, #2
100573dc:	4620      	mov	r0, r4
100573de:	4c34      	ldr	r4, [pc, #208]	@ (100574b0 <__arm_cp.10_1>)
100573e0:	47a0      	blx	r4
100573e2:	4934      	ldr	r1, [pc, #208]	@ (100574b4 <__arm_cp.10_2>)
100573e4:	6809      	ldr	r1, [r1, #0]
100573e6:	59c9      	ldr	r1, [r1, r7]
100573e8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100573ea:	6048      	str	r0, [r1, #4]
100573ec:	9801      	ldr	r0, [sp, #4]
100573ee:	4086      	lsls	r6, r0
100573f0:	b2f0      	uxtb	r0, r6
100573f2:	2108      	movs	r1, #8
100573f4:	47a0      	blx	r4
100573f6:	492f      	ldr	r1, [pc, #188]	@ (100574b4 <__arm_cp.10_2>)
100573f8:	6809      	ldr	r1, [r1, #0]
100573fa:	59c9      	ldr	r1, [r1, r7]
100573fc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100573fe:	6809      	ldr	r1, [r1, #0]
10057400:	2228      	movs	r2, #40	@ 0x28
10057402:	2300      	movs	r3, #0
10057404:	548b      	strb	r3, [r1, r2]
10057406:	6248      	str	r0, [r1, #36]	@ 0x24
10057408:	3128      	adds	r1, #40	@ 0x28
1005740a:	704e      	strb	r6, [r1, #1]
1005740c:	9c00      	ldr	r4, [sp, #0]
1005740e:	2013      	movs	r0, #19
10057410:	2104      	movs	r1, #4
10057412:	4e27      	ldr	r6, [pc, #156]	@ (100574b0 <__arm_cp.10_1>)
10057414:	47b0      	blx	r6
10057416:	4927      	ldr	r1, [pc, #156]	@ (100574b4 <__arm_cp.10_2>)
10057418:	6809      	ldr	r1, [r1, #0]
1005741a:	59c9      	ldr	r1, [r1, r7]
1005741c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005741e:	6108      	str	r0, [r1, #16]
10057420:	4620      	mov	r0, r4
10057422:	4629      	mov	r1, r5
10057424:	47b0      	blx	r6
10057426:	4633      	mov	r3, r6
10057428:	4a22      	ldr	r2, [pc, #136]	@ (100574b4 <__arm_cp.10_2>)
1005742a:	6811      	ldr	r1, [r2, #0]
1005742c:	59c9      	ldr	r1, [r1, r7]
1005742e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10057430:	6088      	str	r0, [r1, #8]
10057432:	4626      	mov	r6, r4
10057434:	4620      	mov	r0, r4
10057436:	4629      	mov	r1, r5
10057438:	4615      	mov	r5, r2
1005743a:	4798      	blx	r3
1005743c:	6829      	ldr	r1, [r5, #0]
1005743e:	59c9      	ldr	r1, [r1, r7]
10057440:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10057442:	60c8      	str	r0, [r1, #12]
10057444:	9802      	ldr	r0, [sp, #8]
10057446:	2801      	cmp	r0, #1
10057448:	d107      	bne.n	1005745a <llc_conn_mem_allocate+0xc2>
1005744a:	210e      	movs	r1, #14
1005744c:	4630      	mov	r0, r6
1005744e:	f006 fcb9 	bl	1005ddc4 <csmem_mem_0_assign>
10057452:	6829      	ldr	r1, [r5, #0]
10057454:	59c9      	ldr	r1, [r1, r7]
10057456:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10057458:	6148      	str	r0, [r1, #20]
1005745a:	9803      	ldr	r0, [sp, #12]
1005745c:	2801      	cmp	r0, #1
1005745e:	d107      	bne.n	10057470 <llc_conn_mem_allocate+0xd8>
10057460:	2108      	movs	r1, #8
10057462:	4630      	mov	r0, r6
10057464:	f006 fcae 	bl	1005ddc4 <csmem_mem_0_assign>
10057468:	6829      	ldr	r1, [r5, #0]
1005746a:	59c9      	ldr	r1, [r1, r7]
1005746c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005746e:	6188      	str	r0, [r1, #24]
10057470:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10057472:	9804      	ldr	r0, [sp, #16]
10057474:	2801      	cmp	r0, #1
10057476:	d10d      	bne.n	10057494 <llc_conn_mem_allocate+0xfc>
10057478:	2120      	movs	r1, #32
1005747a:	4630      	mov	r0, r6
1005747c:	f006 fca2 	bl	1005ddc4 <csmem_mem_0_assign>
10057480:	6829      	ldr	r1, [r5, #0]
10057482:	59c9      	ldr	r1, [r1, r7]
10057484:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10057486:	61c8      	str	r0, [r1, #28]
10057488:	2001      	movs	r0, #1
1005748a:	2111      	movs	r1, #17
1005748c:	f006 fc9a 	bl	1005ddc4 <csmem_mem_0_assign>
10057490:	6829      	ldr	r1, [r5, #0]
10057492:	6648      	str	r0, [r1, #100]	@ 0x64
10057494:	2c01      	cmp	r4, #1
10057496:	d107      	bne.n	100574a8 <llc_conn_mem_allocate+0x110>
10057498:	211c      	movs	r1, #28
1005749a:	4630      	mov	r0, r6
1005749c:	f006 fc92 	bl	1005ddc4 <csmem_mem_0_assign>
100574a0:	6829      	ldr	r1, [r5, #0]
100574a2:	59c9      	ldr	r1, [r1, r7]
100574a4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100574a6:	6208      	str	r0, [r1, #32]
100574a8:	b005      	add	sp, #20
100574aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100574ac <__arm_cp.10_0>:
100574ac:	20000f34 	.word	0x20000f34

100574b0 <__arm_cp.10_1>:
100574b0:	1005ddc5 	.word	0x1005ddc5

100574b4 <__arm_cp.10_2>:
100574b4:	20000f20 	.word	0x20000f20

100574b8 <llc_conn_clr_instant_reached_passed>:
100574b8:	219a      	movs	r1, #154	@ 0x9a
100574ba:	5a42      	ldrh	r2, [r0, r1]
100574bc:	2304      	movs	r3, #4
100574be:	439a      	bics	r2, r3
100574c0:	5242      	strh	r2, [r0, r1]
100574c2:	5a42      	ldrh	r2, [r0, r1]
100574c4:	2302      	movs	r3, #2
100574c6:	439a      	bics	r2, r3
100574c8:	5242      	strh	r2, [r0, r1]
100574ca:	4770      	bx	lr

100574cc <llc_conn_clr_rx_acl_blocked>:
100574cc:	2194      	movs	r1, #148	@ 0x94
100574ce:	5840      	ldr	r0, [r0, r1]
100574d0:	8801      	ldrh	r1, [r0, #0]
100574d2:	4a02      	ldr	r2, [pc, #8]	@ (100574dc <__arm_cp.5_0>)
100574d4:	400a      	ands	r2, r1
100574d6:	8002      	strh	r2, [r0, #0]
100574d8:	4770      	bx	lr
100574da:	46c0      	nop			@ (mov r8, r8)

100574dc <__arm_cp.5_0>:
100574dc:	0000feff 	.word	0x0000feff

100574e0 <llc_conn_clr_rx_ctrl_pdu_full>:
100574e0:	2190      	movs	r1, #144	@ 0x90
100574e2:	5840      	ldr	r0, [r0, r1]
100574e4:	8801      	ldrh	r1, [r0, #0]
100574e6:	2201      	movs	r2, #1
100574e8:	4391      	bics	r1, r2
100574ea:	8001      	strh	r1, [r0, #0]
100574ec:	4770      	bx	lr

100574ee <llc_conn_clr_tx_acl_blocked>:
100574ee:	2194      	movs	r1, #148	@ 0x94
100574f0:	5840      	ldr	r0, [r0, r1]
100574f2:	8801      	ldrh	r1, [r0, #0]
100574f4:	2280      	movs	r2, #128	@ 0x80
100574f6:	4391      	bics	r1, r2
100574f8:	8001      	strh	r1, [r0, #0]
100574fa:	4770      	bx	lr

100574fc <llc_conn_copy_tx_data_packet>:
100574fc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100574fe:	460c      	mov	r4, r1
10057500:	2188      	movs	r1, #136	@ 0x88
10057502:	5c41      	ldrb	r1, [r0, r1]
10057504:	0649      	lsls	r1, r1, #25
10057506:	d40c      	bmi.n	10057522 <llc_conn_copy_tx_data_packet+0x26>
10057508:	3088      	adds	r0, #136	@ 0x88
1005750a:	8a21      	ldrh	r1, [r4, #16]
1005750c:	8862      	ldrh	r2, [r4, #2]
1005750e:	1a52      	subs	r2, r2, r1
10057510:	b293      	uxth	r3, r2
10057512:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
10057514:	42ab      	cmp	r3, r5
10057516:	d909      	bls.n	1005752c <llc_conn_copy_tx_data_packet+0x30>
10057518:	7a20      	ldrb	r0, [r4, #8]
1005751a:	22f7      	movs	r2, #247	@ 0xf7
1005751c:	4002      	ands	r2, r0
1005751e:	7222      	strb	r2, [r4, #8]
10057520:	e001      	b.n	10057526 <llc_conn_copy_tx_data_packet+0x2a>
10057522:	8a21      	ldrh	r1, [r4, #16]
10057524:	7b25      	ldrb	r5, [r4, #12]
10057526:	2010      	movs	r0, #16
10057528:	9001      	str	r0, [sp, #4]
1005752a:	e005      	b.n	10057538 <llc_conn_copy_tx_data_packet+0x3c>
1005752c:	69e0      	ldr	r0, [r4, #28]
1005752e:	1e43      	subs	r3, r0, #1
10057530:	4198      	sbcs	r0, r3
10057532:	0100      	lsls	r0, r0, #4
10057534:	9001      	str	r0, [sp, #4]
10057536:	4615      	mov	r5, r2
10057538:	2900      	cmp	r1, #0
1005753a:	d102      	bne.n	10057542 <llc_conn_copy_tx_data_packet+0x46>
1005753c:	7a20      	ldrb	r0, [r4, #8]
1005753e:	0780      	lsls	r0, r0, #30
10057540:	d401      	bmi.n	10057546 <llc_conn_copy_tx_data_packet+0x4a>
10057542:	2001      	movs	r0, #1
10057544:	e000      	b.n	10057548 <llc_conn_copy_tx_data_packet+0x4c>
10057546:	2002      	movs	r0, #2
10057548:	9002      	str	r0, [sp, #8]
1005754a:	480e      	ldr	r0, [pc, #56]	@ (10057584 <__arm_cp.8_0>)
1005754c:	6800      	ldr	r0, [r0, #0]
1005754e:	278c      	movs	r7, #140	@ 0x8c
10057550:	59c0      	ldr	r0, [r0, r7]
10057552:	1d00      	adds	r0, r0, #4
10057554:	89e2      	ldrh	r2, [r4, #14]
10057556:	1851      	adds	r1, r2, r1
10057558:	261f      	movs	r6, #31
1005755a:	400e      	ands	r6, r1
1005755c:	19a9      	adds	r1, r5, r6
1005755e:	b28a      	uxth	r2, r1
10057560:	69a1      	ldr	r1, [r4, #24]
10057562:	f006 fd90 	bl	1005e086 <Mem_Buff_block_copy>
10057566:	6160      	str	r0, [r4, #20]
10057568:	7325      	strb	r5, [r4, #12]
1005756a:	4b06      	ldr	r3, [pc, #24]	@ (10057584 <__arm_cp.8_0>)
1005756c:	6818      	ldr	r0, [r3, #0]
1005756e:	59c0      	ldr	r0, [r0, r7]
10057570:	1830      	adds	r0, r6, r0
10057572:	9901      	ldr	r1, [sp, #4]
10057574:	9a02      	ldr	r2, [sp, #8]
10057576:	4311      	orrs	r1, r2
10057578:	7081      	strb	r1, [r0, #2]
1005757a:	6818      	ldr	r0, [r3, #0]
1005757c:	59c0      	ldr	r0, [r0, r7]
1005757e:	1830      	adds	r0, r6, r0
10057580:	70c5      	strb	r5, [r0, #3]
10057582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10057584 <__arm_cp.8_0>:
10057584:	20000f20 	.word	0x20000f20

10057588 <llc_conn_enhanced_get_latency>:
10057588:	b570      	push	{r4, r5, r6, lr}
1005758a:	4605      	mov	r5, r0
1005758c:	202c      	movs	r0, #44	@ 0x2c
1005758e:	5c28      	ldrb	r0, [r5, r0]
10057590:	2401      	movs	r4, #1
10057592:	2803      	cmp	r0, #3
10057594:	d13f      	bne.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
10057596:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10057598:	2800      	cmp	r0, #0
1005759a:	d03c      	beq.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
1005759c:	4628      	mov	r0, r5
1005759e:	f7f9 fab6 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
100575a2:	4629      	mov	r1, r5
100575a4:	3128      	adds	r1, #40	@ 0x28
100575a6:	4288      	cmp	r0, r1
100575a8:	d135      	bne.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
100575aa:	462e      	mov	r6, r5
100575ac:	362c      	adds	r6, #44	@ 0x2c
100575ae:	205c      	movs	r0, #92	@ 0x5c
100575b0:	5c30      	ldrb	r0, [r6, r0]
100575b2:	0600      	lsls	r0, r0, #24
100575b4:	0f80      	lsrs	r0, r0, #30
100575b6:	d12e      	bne.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
100575b8:	20ff      	movs	r0, #255	@ 0xff
100575ba:	3008      	adds	r0, #8
100575bc:	1828      	adds	r0, r5, r0
100575be:	7800      	ldrb	r0, [r0, #0]
100575c0:	0780      	lsls	r0, r0, #30
100575c2:	d428      	bmi.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
100575c4:	208f      	movs	r0, #143	@ 0x8f
100575c6:	0040      	lsls	r0, r0, #1
100575c8:	1828      	adds	r0, r5, r0
100575ca:	8800      	ldrh	r0, [r0, #0]
100575cc:	2800      	cmp	r0, #0
100575ce:	d122      	bne.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
100575d0:	7930      	ldrb	r0, [r6, #4]
100575d2:	2401      	movs	r4, #1
100575d4:	4621      	mov	r1, r4
100575d6:	f001 fbfc 	bl	10058dd2 <LL_cpe_get_active_status>
100575da:	2800      	cmp	r0, #0
100575dc:	d105      	bne.n	100575ea <llc_conn_enhanced_get_latency+0x62>
100575de:	7930      	ldrb	r0, [r6, #4]
100575e0:	2100      	movs	r1, #0
100575e2:	f001 fbf6 	bl	10058dd2 <LL_cpe_get_active_status>
100575e6:	2800      	cmp	r0, #0
100575e8:	d013      	beq.n	10057612 <llc_conn_enhanced_get_latency+0x8a>
100575ea:	4628      	mov	r0, r5
100575ec:	3098      	adds	r0, #152	@ 0x98
100575ee:	8841      	ldrh	r1, [r0, #2]
100575f0:	07c9      	lsls	r1, r1, #31
100575f2:	d010      	beq.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
100575f4:	8af1      	ldrh	r1, [r6, #22]
100575f6:	8800      	ldrh	r0, [r0, #0]
100575f8:	1a40      	subs	r0, r0, r1
100575fa:	b281      	uxth	r1, r0
100575fc:	2902      	cmp	r1, #2
100575fe:	d30a      	bcc.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
10057600:	1e44      	subs	r4, r0, #1
10057602:	b2a1      	uxth	r1, r4
10057604:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10057606:	1c40      	adds	r0, r0, #1
10057608:	b282      	uxth	r2, r0
1005760a:	4291      	cmp	r1, r2
1005760c:	d303      	bcc.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
1005760e:	4604      	mov	r4, r0
10057610:	e001      	b.n	10057616 <llc_conn_enhanced_get_latency+0x8e>
10057612:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10057614:	1c44      	adds	r4, r0, #1
10057616:	b2a0      	uxth	r0, r4
10057618:	bd70      	pop	{r4, r5, r6, pc}
	...

1005761c <llc_conn_get_conn_idx>:
1005761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005761e:	4604      	mov	r4, r0
10057620:	25ff      	movs	r5, #255	@ 0xff
10057622:	480a      	ldr	r0, [pc, #40]	@ (1005764c <__arm_cp.13_0>)
10057624:	4284      	cmp	r4, r0
10057626:	d00f      	beq.n	10057648 <llc_conn_get_conn_idx+0x2c>
10057628:	2600      	movs	r6, #0
1005762a:	4f09      	ldr	r7, [pc, #36]	@ (10057650 <__arm_cp.13_1>)
1005762c:	6838      	ldr	r0, [r7, #0]
1005762e:	2134      	movs	r1, #52	@ 0x34
10057630:	5c41      	ldrb	r1, [r0, r1]
10057632:	b2f0      	uxtb	r0, r6
10057634:	4288      	cmp	r0, r1
10057636:	d207      	bcs.n	10057648 <llc_conn_get_conn_idx+0x2c>
10057638:	f7ff fd76 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005763c:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005763e:	42a0      	cmp	r0, r4
10057640:	d001      	beq.n	10057646 <llc_conn_get_conn_idx+0x2a>
10057642:	1c76      	adds	r6, r6, #1
10057644:	e7f2      	b.n	1005762c <llc_conn_get_conn_idx+0x10>
10057646:	4635      	mov	r5, r6
10057648:	b2e8      	uxtb	r0, r5
1005764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005764c <__arm_cp.13_0>:
1005764c:	0000ffff 	.word	0x0000ffff

10057650 <__arm_cp.13_1>:
10057650:	20000ecc 	.word	0x20000ecc

10057654 <llc_conn_get_ctrl_pdu_data_p>:
10057654:	0089      	lsls	r1, r1, #2
10057656:	1840      	adds	r0, r0, r1
10057658:	2190      	movs	r1, #144	@ 0x90
1005765a:	5840      	ldr	r0, [r0, r1]
1005765c:	1c80      	adds	r0, r0, #2
1005765e:	4770      	bx	lr

10057660 <llc_conn_get_enc_on>:
10057660:	2900      	cmp	r1, #0
10057662:	d001      	beq.n	10057668 <llc_conn_get_enc_on+0x8>
10057664:	2102      	movs	r1, #2
10057666:	e000      	b.n	1005766a <llc_conn_get_enc_on+0xa>
10057668:	2103      	movs	r1, #3
1005766a:	2288      	movs	r2, #136	@ 0x88
1005766c:	5882      	ldr	r2, [r0, r2]
1005766e:	40ca      	lsrs	r2, r1
10057670:	2001      	movs	r0, #1
10057672:	4010      	ands	r0, r2
10057674:	4770      	bx	lr

10057676 <llc_conn_get_instant_passed>:
10057676:	219a      	movs	r1, #154	@ 0x9a
10057678:	5a40      	ldrh	r0, [r0, r1]
1005767a:	0740      	lsls	r0, r0, #29
1005767c:	0fc0      	lsrs	r0, r0, #31
1005767e:	4770      	bx	lr

10057680 <llc_conn_get_instant_reached>:
10057680:	219a      	movs	r1, #154	@ 0x9a
10057682:	5a40      	ldrh	r0, [r0, r1]
10057684:	0780      	lsls	r0, r0, #30
10057686:	0fc0      	lsrs	r0, r0, #31
10057688:	4770      	bx	lr

1005768a <llc_conn_get_rx_ctrl_pdu_full>:
1005768a:	2190      	movs	r1, #144	@ 0x90
1005768c:	5840      	ldr	r0, [r0, r1]
1005768e:	8801      	ldrh	r1, [r0, #0]
10057690:	2001      	movs	r0, #1
10057692:	4008      	ands	r0, r1
10057694:	4770      	bx	lr

10057696 <llc_conn_get_rx_acl_blocked>:
10057696:	2194      	movs	r1, #148	@ 0x94
10057698:	5840      	ldr	r0, [r0, r1]
1005769a:	8800      	ldrh	r0, [r0, #0]
1005769c:	05c0      	lsls	r0, r0, #23
1005769e:	0fc0      	lsrs	r0, r0, #31
100576a0:	4770      	bx	lr

100576a2 <llc_conn_get_tx_acl_blocked>:
100576a2:	2194      	movs	r1, #148	@ 0x94
100576a4:	5840      	ldr	r0, [r0, r1]
100576a6:	8800      	ldrh	r0, [r0, #0]
100576a8:	b2c0      	uxtb	r0, r0
100576aa:	09c0      	lsrs	r0, r0, #7
100576ac:	4770      	bx	lr

100576ae <llc_conn_get_tx_ctrl_pdu_state>:
100576ae:	2194      	movs	r1, #148	@ 0x94
100576b0:	5840      	ldr	r0, [r0, r1]
100576b2:	8801      	ldrh	r1, [r0, #0]
100576b4:	2003      	movs	r0, #3
100576b6:	4008      	ands	r0, r1
100576b8:	4770      	bx	lr
	...

100576bc <llc_conn_guard_time_for_close_conn_event>:
100576bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100576be:	4607      	mov	r7, r0
100576c0:	2441      	movs	r4, #65	@ 0x41
100576c2:	5d00      	ldrb	r0, [r0, r4]
100576c4:	f7f9 fcb0 	bl	10051028 <BLEPLAT_CNTR_SmGetTxPhy>
100576c8:	4605      	mov	r5, r0
100576ca:	5d38      	ldrb	r0, [r7, r4]
100576cc:	f7f9 fc9b 	bl	10051006 <BLEPLAT_CNTR_SmGetRxPhy>
100576d0:	23b6      	movs	r3, #182	@ 0xb6
100576d2:	1e6c      	subs	r4, r5, #1
100576d4:	b2e1      	uxtb	r1, r4
100576d6:	9702      	str	r7, [sp, #8]
100576d8:	37b6      	adds	r7, #182	@ 0xb6
100576da:	2570      	movs	r5, #112	@ 0x70
100576dc:	2603      	movs	r6, #3
100576de:	2905      	cmp	r1, #5
100576e0:	4632      	mov	r2, r6
100576e2:	9501      	str	r5, [sp, #4]
100576e4:	4629      	mov	r1, r5
100576e6:	d805      	bhi.n	100576f4 <llc_conn_guard_time_for_close_conn_event+0x38>
100576e8:	b261      	sxtb	r1, r4
100576ea:	008a      	lsls	r2, r1, #2
100576ec:	4919      	ldr	r1, [pc, #100]	@ (10057754 <__arm_cp.22_0>)
100576ee:	5889      	ldr	r1, [r1, r2]
100576f0:	4c19      	ldr	r4, [pc, #100]	@ (10057758 <__arm_cp.22_1>)
100576f2:	58a2      	ldr	r2, [r4, r2]
100576f4:	9c02      	ldr	r4, [sp, #8]
100576f6:	5ae3      	ldrh	r3, [r4, r3]
100576f8:	887c      	ldrh	r4, [r7, #2]
100576fa:	1e40      	subs	r0, r0, #1
100576fc:	b2c5      	uxtb	r5, r0
100576fe:	2d05      	cmp	r5, #5
10057700:	d806      	bhi.n	10057710 <llc_conn_guard_time_for_close_conn_event+0x54>
10057702:	b240      	sxtb	r0, r0
10057704:	0080      	lsls	r0, r0, #2
10057706:	4d13      	ldr	r5, [pc, #76]	@ (10057754 <__arm_cp.22_0>)
10057708:	582d      	ldr	r5, [r5, r0]
1005770a:	9501      	str	r5, [sp, #4]
1005770c:	4d12      	ldr	r5, [pc, #72]	@ (10057758 <__arm_cp.22_1>)
1005770e:	582e      	ldr	r6, [r5, r0]
10057710:	4093      	lsls	r3, r2
10057712:	1858      	adds	r0, r3, r1
10057714:	0200      	lsls	r0, r0, #8
10057716:	2147      	movs	r1, #71	@ 0x47
10057718:	00cd      	lsls	r5, r1, #3
1005771a:	1940      	adds	r0, r0, r5
1005771c:	490f      	ldr	r1, [pc, #60]	@ (1005775c <__arm_cp.22_2>)
1005771e:	f7e8 fd8f 	bl	10040240 <__udivsi3>
10057722:	9000      	str	r0, [sp, #0]
10057724:	40b4      	lsls	r4, r6
10057726:	9801      	ldr	r0, [sp, #4]
10057728:	1820      	adds	r0, r4, r0
1005772a:	0200      	lsls	r0, r0, #8
1005772c:	1940      	adds	r0, r0, r5
1005772e:	490b      	ldr	r1, [pc, #44]	@ (1005775c <__arm_cp.22_2>)
10057730:	f7e8 fd86 	bl	10040240 <__udivsi3>
10057734:	4606      	mov	r6, r0
10057736:	88fc      	ldrh	r4, [r7, #6]
10057738:	f005 fec2 	bl	1005d4c0 <LL_sched_engine_return_actual_scheduler_margin>
1005773c:	9900      	ldr	r1, [sp, #0]
1005773e:	1808      	adds	r0, r1, r0
10057740:	b2b1      	uxth	r1, r6
10057742:	428c      	cmp	r4, r1
10057744:	d800      	bhi.n	10057748 <llc_conn_guard_time_for_close_conn_event+0x8c>
10057746:	4621      	mov	r1, r4
10057748:	1840      	adds	r0, r0, r1
1005774a:	30cd      	adds	r0, #205	@ 0xcd
1005774c:	9902      	ldr	r1, [sp, #8]
1005774e:	6748      	str	r0, [r1, #116]	@ 0x74
10057750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057752:	46c0      	nop			@ (mov r8, r8)

10057754 <__arm_cp.22_0>:
10057754:	100660b8 	.word	0x100660b8

10057758 <__arm_cp.22_1>:
10057758:	100660a0 	.word	0x100660a0

1005775c <__arm_cp.22_2>:
1005775c:	00000271 	.word	0x00000271

10057760 <llc_conn_list_add_address>:
10057760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057762:	460a      	mov	r2, r1
10057764:	4601      	mov	r1, r0
10057766:	4807      	ldr	r0, [pc, #28]	@ (10057784 <__arm_cp.23_0>)
10057768:	6800      	ldr	r0, [r0, #0]
1005776a:	239c      	movs	r3, #156	@ 0x9c
1005776c:	58c0      	ldr	r0, [r0, r3]
1005776e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10057770:	6800      	ldr	r0, [r0, #0]
10057772:	ab02      	add	r3, sp, #8
10057774:	9301      	str	r3, [sp, #4]
10057776:	ab03      	add	r3, sp, #12
10057778:	9300      	str	r3, [sp, #0]
1005777a:	3024      	adds	r0, #36	@ 0x24
1005777c:	2301      	movs	r3, #1
1005777e:	f008 fb8b 	bl	1005fe98 <addr8_list_add>
10057782:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

10057784 <__arm_cp.23_0>:
10057784:	20000f20 	.word	0x20000f20

10057788 <llc_conn_list_reset>:
10057788:	b580      	push	{r7, lr}
1005778a:	4805      	ldr	r0, [pc, #20]	@ (100577a0 <__arm_cp.24_0>)
1005778c:	6800      	ldr	r0, [r0, #0]
1005778e:	219c      	movs	r1, #156	@ 0x9c
10057790:	5840      	ldr	r0, [r0, r1]
10057792:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10057794:	6800      	ldr	r0, [r0, #0]
10057796:	3024      	adds	r0, #36	@ 0x24
10057798:	f008 fbfd 	bl	1005ff96 <addr8_list_clear>
1005779c:	bd80      	pop	{r7, pc}
1005779e:	46c0      	nop			@ (mov r8, r8)

100577a0 <__arm_cp.24_0>:
100577a0:	20000f20 	.word	0x20000f20

100577a4 <llc_conn_list_remove_address>:
100577a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100577a6:	460a      	mov	r2, r1
100577a8:	4601      	mov	r1, r0
100577aa:	4807      	ldr	r0, [pc, #28]	@ (100577c8 <__arm_cp.25_0>)
100577ac:	6800      	ldr	r0, [r0, #0]
100577ae:	239c      	movs	r3, #156	@ 0x9c
100577b0:	58c0      	ldr	r0, [r0, r3]
100577b2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100577b4:	6800      	ldr	r0, [r0, #0]
100577b6:	ab02      	add	r3, sp, #8
100577b8:	9301      	str	r3, [sp, #4]
100577ba:	ab03      	add	r3, sp, #12
100577bc:	9300      	str	r3, [sp, #0]
100577be:	3024      	adds	r0, #36	@ 0x24
100577c0:	2301      	movs	r3, #1
100577c2:	f008 fbac 	bl	1005ff1e <addr8_list_remove_by_addr>
100577c6:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

100577c8 <__arm_cp.25_0>:
100577c8:	20000f20 	.word	0x20000f20

100577cc <llc_conn_list_search_address>:
100577cc:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
100577ce:	460c      	mov	r4, r1
100577d0:	4605      	mov	r5, r0
100577d2:	f7ff fc9f 	bl	10057114 <llc_conn_get_cntxt_p>
100577d6:	2136      	movs	r1, #54	@ 0x36
100577d8:	5c40      	ldrb	r0, [r0, r1]
100577da:	2800      	cmp	r0, #0
100577dc:	d001      	beq.n	100577e2 <llc_conn_list_search_address+0x16>
100577de:	2000      	movs	r0, #0
100577e0:	e011      	b.n	10057806 <llc_conn_list_search_address+0x3a>
100577e2:	480a      	ldr	r0, [pc, #40]	@ (1005780c <__arm_cp.26_0>)
100577e4:	6800      	ldr	r0, [r0, #0]
100577e6:	219c      	movs	r1, #156	@ 0x9c
100577e8:	5840      	ldr	r0, [r0, r1]
100577ea:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100577ec:	6801      	ldr	r1, [r0, #0]
100577ee:	6a48      	ldr	r0, [r1, #36]	@ 0x24
100577f0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
100577f2:	aa03      	add	r2, sp, #12
100577f4:	2301      	movs	r3, #1
100577f6:	9300      	str	r3, [sp, #0]
100577f8:	9201      	str	r2, [sp, #4]
100577fa:	22fe      	movs	r2, #254	@ 0xfe
100577fc:	4395      	bics	r5, r2
100577fe:	462a      	mov	r2, r5
10057800:	4623      	mov	r3, r4
10057802:	f008 fae5 	bl	1005fdd0 <addr8_list_search>
10057806:	b004      	add	sp, #16
10057808:	bdb0      	pop	{r4, r5, r7, pc}
1005780a:	46c0      	nop			@ (mov r8, r8)

1005780c <__arm_cp.26_0>:
1005780c:	20000f20 	.word	0x20000f20

10057810 <llc_conn_push_adv_set_terminated_event>:
10057810:	b570      	push	{r4, r5, r6, lr}
10057812:	460d      	mov	r5, r1
10057814:	4604      	mov	r4, r0
10057816:	481a      	ldr	r0, [pc, #104]	@ (10057880 <__arm_cp.27_0>)
10057818:	6800      	ldr	r0, [r0, #0]
1005781a:	212c      	movs	r1, #44	@ 0x2c
1005781c:	5c40      	ldrb	r0, [r0, r1]
1005781e:	07c0      	lsls	r0, r0, #31
10057820:	0ec1      	lsrs	r1, r0, #27
10057822:	d101      	bne.n	10057828 <llc_conn_push_adv_set_terminated_event+0x18>
10057824:	2211      	movs	r2, #17
10057826:	e00a      	b.n	1005783e <llc_conn_push_adv_set_terminated_event+0x2e>
10057828:	4816      	ldr	r0, [pc, #88]	@ (10057884 <__arm_cp.27_1>)
1005782a:	6800      	ldr	r0, [r0, #0]
1005782c:	223d      	movs	r2, #61	@ 0x3d
1005782e:	5c82      	ldrb	r2, [r0, r2]
10057830:	0692      	lsls	r2, r2, #26
10057832:	d524      	bpl.n	1005787e <llc_conn_push_adv_set_terminated_event+0x6e>
10057834:	303d      	adds	r0, #61	@ 0x3d
10057836:	7ac0      	ldrb	r0, [r0, #11]
10057838:	0780      	lsls	r0, r0, #30
1005783a:	d520      	bpl.n	1005787e <llc_conn_push_adv_set_terminated_event+0x6e>
1005783c:	221f      	movs	r2, #31
1005783e:	204e      	movs	r0, #78	@ 0x4e
10057840:	43c0      	mvns	r0, r0
10057842:	4041      	eors	r1, r0
10057844:	4810      	ldr	r0, [pc, #64]	@ (10057888 <__arm_cp.27_2>)
10057846:	6800      	ldr	r0, [r0, #0]
10057848:	6940      	ldr	r0, [r0, #20]
1005784a:	b2ce      	uxtb	r6, r1
1005784c:	2303      	movs	r3, #3
1005784e:	4631      	mov	r1, r6
10057850:	f7fa fd44 	bl	100522dc <aci_event_fifo_push_header>
10057854:	2800      	cmp	r0, #0
10057856:	d012      	beq.n	1005787e <llc_conn_push_adv_set_terminated_event+0x6e>
10057858:	4601      	mov	r1, r0
1005785a:	7284      	strb	r4, [r0, #10]
1005785c:	2000      	movs	r0, #0
1005785e:	7308      	strb	r0, [r1, #12]
10057860:	724d      	strb	r5, [r1, #9]
10057862:	7208      	strb	r0, [r1, #8]
10057864:	2012      	movs	r0, #18
10057866:	71c8      	strb	r0, [r1, #7]
10057868:	2006      	movs	r0, #6
1005786a:	7188      	strb	r0, [r1, #6]
1005786c:	203e      	movs	r0, #62	@ 0x3e
1005786e:	7148      	strb	r0, [r1, #5]
10057870:	2004      	movs	r0, #4
10057872:	7108      	strb	r0, [r1, #4]
10057874:	0a20      	lsrs	r0, r4, #8
10057876:	72c8      	strb	r0, [r1, #11]
10057878:	4630      	mov	r0, r6
1005787a:	f7fa fdcc 	bl	10052416 <aci_event_fifo_push>
1005787e:	bd70      	pop	{r4, r5, r6, pc}

10057880 <__arm_cp.27_0>:
10057880:	20000ecc 	.word	0x20000ecc

10057884 <__arm_cp.27_1>:
10057884:	20000f20 	.word	0x20000f20

10057888 <__arm_cp.27_2>:
10057888:	20000ed0 	.word	0x20000ed0

1005788c <llc_conn_push_connection_complete_event>:
1005788c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005788e:	b08d      	sub	sp, #52	@ 0x34
10057890:	4604      	mov	r4, r0
10057892:	4895      	ldr	r0, [pc, #596]	@ (10057ae8 <__arm_cp.28_0>)
10057894:	6800      	ldr	r0, [r0, #0]
10057896:	212c      	movs	r1, #44	@ 0x2c
10057898:	5c40      	ldrb	r0, [r0, r1]
1005789a:	07c0      	lsls	r0, r0, #31
1005789c:	0ec5      	lsrs	r5, r0, #27
1005789e:	206f      	movs	r0, #111	@ 0x6f
100578a0:	43c6      	mvns	r6, r0
100578a2:	406e      	eors	r6, r5
100578a4:	f001 f9ba 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100578a8:	4990      	ldr	r1, [pc, #576]	@ (10057aec <__arm_cp.28_1>)
100578aa:	6809      	ldr	r1, [r1, #0]
100578ac:	223d      	movs	r2, #61	@ 0x3d
100578ae:	5c8b      	ldrb	r3, [r1, r2]
100578b0:	2220      	movs	r2, #32
100578b2:	4013      	ands	r3, r2
100578b4:	313d      	adds	r1, #61	@ 0x3d
100578b6:	2800      	cmp	r0, #0
100578b8:	d066      	beq.n	10057988 <llc_conn_push_connection_complete_event+0xfc>
100578ba:	2b00      	cmp	r3, #0
100578bc:	d100      	bne.n	100578c0 <llc_conn_push_connection_complete_event+0x34>
100578be:	e110      	b.n	10057ae2 <llc_conn_push_connection_complete_event+0x256>
100578c0:	7b88      	ldrb	r0, [r1, #14]
100578c2:	07c0      	lsls	r0, r0, #31
100578c4:	d063      	beq.n	1005798e <llc_conn_push_connection_complete_event+0x102>
100578c6:	2d00      	cmp	r5, #0
100578c8:	d100      	bne.n	100578cc <llc_conn_push_connection_complete_event+0x40>
100578ca:	2212      	movs	r2, #18
100578cc:	8aa0      	ldrh	r0, [r4, #20]
100578ce:	900c      	str	r0, [sp, #48]	@ 0x30
100578d0:	7da7      	ldrb	r7, [r4, #22]
100578d2:	7de0      	ldrb	r0, [r4, #23]
100578d4:	9008      	str	r0, [sp, #32]
100578d6:	8a60      	ldrh	r0, [r4, #18]
100578d8:	900b      	str	r0, [sp, #44]	@ 0x2c
100578da:	8a20      	ldrh	r0, [r4, #16]
100578dc:	9009      	str	r0, [sp, #36]	@ 0x24
100578de:	89a0      	ldrh	r0, [r4, #12]
100578e0:	900a      	str	r0, [sp, #40]	@ 0x28
100578e2:	6820      	ldr	r0, [r4, #0]
100578e4:	9005      	str	r0, [sp, #20]
100578e6:	6860      	ldr	r0, [r4, #4]
100578e8:	9007      	str	r0, [sp, #28]
100578ea:	68a0      	ldr	r0, [r4, #8]
100578ec:	9006      	str	r0, [sp, #24]
100578ee:	7e20      	ldrb	r0, [r4, #24]
100578f0:	9003      	str	r0, [sp, #12]
100578f2:	7e60      	ldrb	r0, [r4, #25]
100578f4:	9004      	str	r0, [sp, #16]
100578f6:	89e5      	ldrh	r5, [r4, #14]
100578f8:	7ea0      	ldrb	r0, [r4, #26]
100578fa:	9002      	str	r0, [sp, #8]
100578fc:	487c      	ldr	r0, [pc, #496]	@ (10057af0 <__arm_cp.28_2>)
100578fe:	6800      	ldr	r0, [r0, #0]
10057900:	6900      	ldr	r0, [r0, #16]
10057902:	b2f1      	uxtb	r1, r6
10057904:	230a      	movs	r3, #10
10057906:	f7fa fce9 	bl	100522dc <aci_event_fifo_push_header>
1005790a:	2800      	cmp	r0, #0
1005790c:	d100      	bne.n	10057910 <llc_conn_push_connection_complete_event+0x84>
1005790e:	e0e8      	b.n	10057ae2 <llc_conn_push_connection_complete_event+0x256>
10057910:	4604      	mov	r4, r0
10057912:	9701      	str	r7, [sp, #4]
10057914:	4607      	mov	r7, r0
10057916:	371f      	adds	r7, #31
10057918:	7245      	strb	r5, [r0, #9]
1005791a:	9803      	ldr	r0, [sp, #12]
1005791c:	7320      	strb	r0, [r4, #12]
1005791e:	9804      	ldr	r0, [sp, #16]
10057920:	72e0      	strb	r0, [r4, #11]
10057922:	9802      	ldr	r0, [sp, #8]
10057924:	7220      	strb	r0, [r4, #8]
10057926:	0a28      	lsrs	r0, r5, #8
10057928:	72a0      	strb	r0, [r4, #10]
1005792a:	4620      	mov	r0, r4
1005792c:	300d      	adds	r0, #13
1005792e:	2506      	movs	r5, #6
10057930:	9905      	ldr	r1, [sp, #20]
10057932:	462a      	mov	r2, r5
10057934:	4b6f      	ldr	r3, [pc, #444]	@ (10057af4 <__arm_cp.28_3>)
10057936:	4798      	blx	r3
10057938:	4620      	mov	r0, r4
1005793a:	3013      	adds	r0, #19
1005793c:	9906      	ldr	r1, [sp, #24]
1005793e:	462a      	mov	r2, r5
10057940:	4b6c      	ldr	r3, [pc, #432]	@ (10057af4 <__arm_cp.28_3>)
10057942:	4798      	blx	r3
10057944:	4b6b      	ldr	r3, [pc, #428]	@ (10057af4 <__arm_cp.28_3>)
10057946:	4620      	mov	r0, r4
10057948:	3019      	adds	r0, #25
1005794a:	9907      	ldr	r1, [sp, #28]
1005794c:	462a      	mov	r2, r5
1005794e:	4798      	blx	r3
10057950:	2021      	movs	r0, #33	@ 0x21
10057952:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057954:	5421      	strb	r1, [r4, r0]
10057956:	2025      	movs	r0, #37	@ 0x25
10057958:	9a08      	ldr	r2, [sp, #32]
1005795a:	5422      	strb	r2, [r4, r0]
1005795c:	4620      	mov	r0, r4
1005795e:	3021      	adds	r0, #33	@ 0x21
10057960:	0a09      	lsrs	r1, r1, #8
10057962:	7041      	strb	r1, [r0, #1]
10057964:	990a      	ldr	r1, [sp, #40]	@ 0x28
10057966:	0a08      	lsrs	r0, r1, #8
10057968:	7078      	strb	r0, [r7, #1]
1005796a:	7039      	strb	r1, [r7, #0]
1005796c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005796e:	0a08      	lsrs	r0, r1, #8
10057970:	7178      	strb	r0, [r7, #5]
10057972:	7139      	strb	r1, [r7, #4]
10057974:	990c      	ldr	r1, [sp, #48]	@ 0x30
10057976:	0a08      	lsrs	r0, r1, #8
10057978:	7278      	strb	r0, [r7, #9]
1005797a:	7239      	strb	r1, [r7, #8]
1005797c:	9801      	ldr	r0, [sp, #4]
1005797e:	71f8      	strb	r0, [r7, #7]
10057980:	1d20      	adds	r0, r4, #4
10057982:	2129      	movs	r1, #41	@ 0x29
10057984:	2222      	movs	r2, #34	@ 0x22
10057986:	e0a2      	b.n	10057ace <llc_conn_push_connection_complete_event+0x242>
10057988:	2b00      	cmp	r3, #0
1005798a:	d100      	bne.n	1005798e <llc_conn_push_connection_complete_event+0x102>
1005798c:	e0a9      	b.n	10057ae2 <llc_conn_push_connection_complete_event+0x256>
1005798e:	7a88      	ldrb	r0, [r1, #10]
10057990:	0780      	lsls	r0, r0, #30
10057992:	d445      	bmi.n	10057a20 <llc_conn_push_connection_complete_event+0x194>
10057994:	7a48      	ldrb	r0, [r1, #9]
10057996:	07c0      	lsls	r0, r0, #31
10057998:	d100      	bne.n	1005799c <llc_conn_push_connection_complete_event+0x110>
1005799a:	e0a2      	b.n	10057ae2 <llc_conn_push_connection_complete_event+0x256>
1005799c:	2008      	movs	r0, #8
1005799e:	4305      	orrs	r5, r0
100579a0:	7de0      	ldrb	r0, [r4, #23]
100579a2:	900c      	str	r0, [sp, #48]	@ 0x30
100579a4:	8a60      	ldrh	r0, [r4, #18]
100579a6:	900b      	str	r0, [sp, #44]	@ 0x2c
100579a8:	8a20      	ldrh	r0, [r4, #16]
100579aa:	9009      	str	r0, [sp, #36]	@ 0x24
100579ac:	89a0      	ldrh	r0, [r4, #12]
100579ae:	900a      	str	r0, [sp, #40]	@ 0x28
100579b0:	6820      	ldr	r0, [r4, #0]
100579b2:	9008      	str	r0, [sp, #32]
100579b4:	7e20      	ldrb	r0, [r4, #24]
100579b6:	9006      	str	r0, [sp, #24]
100579b8:	7e60      	ldrb	r0, [r4, #25]
100579ba:	9007      	str	r0, [sp, #28]
100579bc:	89e7      	ldrh	r7, [r4, #14]
100579be:	7ea0      	ldrb	r0, [r4, #26]
100579c0:	9005      	str	r0, [sp, #20]
100579c2:	484b      	ldr	r0, [pc, #300]	@ (10057af0 <__arm_cp.28_2>)
100579c4:	6800      	ldr	r0, [r0, #0]
100579c6:	6900      	ldr	r0, [r0, #16]
100579c8:	b2f1      	uxtb	r1, r6
100579ca:	2306      	movs	r3, #6
100579cc:	462a      	mov	r2, r5
100579ce:	f7fa fc85 	bl	100522dc <aci_event_fifo_push_header>
100579d2:	2800      	cmp	r0, #0
100579d4:	d100      	bne.n	100579d8 <llc_conn_push_connection_complete_event+0x14c>
100579d6:	e084      	b.n	10057ae2 <llc_conn_push_connection_complete_event+0x256>
100579d8:	4604      	mov	r4, r0
100579da:	4605      	mov	r5, r0
100579dc:	3513      	adds	r5, #19
100579de:	7247      	strb	r7, [r0, #9]
100579e0:	9806      	ldr	r0, [sp, #24]
100579e2:	7320      	strb	r0, [r4, #12]
100579e4:	9807      	ldr	r0, [sp, #28]
100579e6:	72e0      	strb	r0, [r4, #11]
100579e8:	9805      	ldr	r0, [sp, #20]
100579ea:	7220      	strb	r0, [r4, #8]
100579ec:	0a38      	lsrs	r0, r7, #8
100579ee:	72a0      	strb	r0, [r4, #10]
100579f0:	4620      	mov	r0, r4
100579f2:	300d      	adds	r0, #13
100579f4:	2206      	movs	r2, #6
100579f6:	9908      	ldr	r1, [sp, #32]
100579f8:	f7f7 ff24 	bl	1004f844 <BLEPLAT_MemCpy>
100579fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
100579fe:	0a08      	lsrs	r0, r1, #8
10057a00:	75a0      	strb	r0, [r4, #22]
10057a02:	7561      	strb	r1, [r4, #21]
10057a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
10057a06:	0a08      	lsrs	r0, r1, #8
10057a08:	7068      	strb	r0, [r5, #1]
10057a0a:	7029      	strb	r1, [r5, #0]
10057a0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10057a0e:	0a08      	lsrs	r0, r1, #8
10057a10:	7168      	strb	r0, [r5, #5]
10057a12:	7129      	strb	r1, [r5, #4]
10057a14:	980c      	ldr	r0, [sp, #48]	@ 0x30
10057a16:	7660      	strb	r0, [r4, #25]
10057a18:	1d20      	adds	r0, r4, #4
10057a1a:	2101      	movs	r1, #1
10057a1c:	2213      	movs	r2, #19
10057a1e:	e056      	b.n	10057ace <llc_conn_push_connection_complete_event+0x242>
10057a20:	2d00      	cmp	r5, #0
10057a22:	d001      	beq.n	10057a28 <llc_conn_push_connection_complete_event+0x19c>
10057a24:	221c      	movs	r2, #28
10057a26:	e000      	b.n	10057a2a <llc_conn_push_connection_complete_event+0x19e>
10057a28:	220d      	movs	r2, #13
10057a2a:	7de0      	ldrb	r0, [r4, #23]
10057a2c:	900a      	str	r0, [sp, #40]	@ 0x28
10057a2e:	8a67      	ldrh	r7, [r4, #18]
10057a30:	8a20      	ldrh	r0, [r4, #16]
10057a32:	900b      	str	r0, [sp, #44]	@ 0x2c
10057a34:	89a0      	ldrh	r0, [r4, #12]
10057a36:	900c      	str	r0, [sp, #48]	@ 0x30
10057a38:	6820      	ldr	r0, [r4, #0]
10057a3a:	9007      	str	r0, [sp, #28]
10057a3c:	6860      	ldr	r0, [r4, #4]
10057a3e:	9009      	str	r0, [sp, #36]	@ 0x24
10057a40:	68a0      	ldr	r0, [r4, #8]
10057a42:	9008      	str	r0, [sp, #32]
10057a44:	7e20      	ldrb	r0, [r4, #24]
10057a46:	9005      	str	r0, [sp, #20]
10057a48:	7e60      	ldrb	r0, [r4, #25]
10057a4a:	9006      	str	r0, [sp, #24]
10057a4c:	89e5      	ldrh	r5, [r4, #14]
10057a4e:	7ea0      	ldrb	r0, [r4, #26]
10057a50:	9004      	str	r0, [sp, #16]
10057a52:	4827      	ldr	r0, [pc, #156]	@ (10057af0 <__arm_cp.28_2>)
10057a54:	6800      	ldr	r0, [r0, #0]
10057a56:	6900      	ldr	r0, [r0, #16]
10057a58:	b2f1      	uxtb	r1, r6
10057a5a:	2309      	movs	r3, #9
10057a5c:	f7fa fc3e 	bl	100522dc <aci_event_fifo_push_header>
10057a60:	2800      	cmp	r0, #0
10057a62:	d03e      	beq.n	10057ae2 <llc_conn_push_connection_complete_event+0x256>
10057a64:	4604      	mov	r4, r0
10057a66:	9703      	str	r7, [sp, #12]
10057a68:	4607      	mov	r7, r0
10057a6a:	371f      	adds	r7, #31
10057a6c:	7245      	strb	r5, [r0, #9]
10057a6e:	9805      	ldr	r0, [sp, #20]
10057a70:	7320      	strb	r0, [r4, #12]
10057a72:	9806      	ldr	r0, [sp, #24]
10057a74:	72e0      	strb	r0, [r4, #11]
10057a76:	9804      	ldr	r0, [sp, #16]
10057a78:	7220      	strb	r0, [r4, #8]
10057a7a:	0a28      	lsrs	r0, r5, #8
10057a7c:	72a0      	strb	r0, [r4, #10]
10057a7e:	4620      	mov	r0, r4
10057a80:	300d      	adds	r0, #13
10057a82:	2506      	movs	r5, #6
10057a84:	9907      	ldr	r1, [sp, #28]
10057a86:	462a      	mov	r2, r5
10057a88:	4b1a      	ldr	r3, [pc, #104]	@ (10057af4 <__arm_cp.28_3>)
10057a8a:	4798      	blx	r3
10057a8c:	4620      	mov	r0, r4
10057a8e:	3013      	adds	r0, #19
10057a90:	9908      	ldr	r1, [sp, #32]
10057a92:	462a      	mov	r2, r5
10057a94:	4b17      	ldr	r3, [pc, #92]	@ (10057af4 <__arm_cp.28_3>)
10057a96:	4798      	blx	r3
10057a98:	4b16      	ldr	r3, [pc, #88]	@ (10057af4 <__arm_cp.28_3>)
10057a9a:	4620      	mov	r0, r4
10057a9c:	3019      	adds	r0, #25
10057a9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057aa0:	462a      	mov	r2, r5
10057aa2:	4798      	blx	r3
10057aa4:	2021      	movs	r0, #33	@ 0x21
10057aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10057aa8:	5422      	strb	r2, [r4, r0]
10057aaa:	2025      	movs	r0, #37	@ 0x25
10057aac:	990a      	ldr	r1, [sp, #40]	@ 0x28
10057aae:	5421      	strb	r1, [r4, r0]
10057ab0:	1d20      	adds	r0, r4, #4
10057ab2:	4621      	mov	r1, r4
10057ab4:	3121      	adds	r1, #33	@ 0x21
10057ab6:	0a12      	lsrs	r2, r2, #8
10057ab8:	704a      	strb	r2, [r1, #1]
10057aba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10057abc:	0a11      	lsrs	r1, r2, #8
10057abe:	7079      	strb	r1, [r7, #1]
10057ac0:	703a      	strb	r2, [r7, #0]
10057ac2:	9a03      	ldr	r2, [sp, #12]
10057ac4:	0a11      	lsrs	r1, r2, #8
10057ac6:	7179      	strb	r1, [r7, #5]
10057ac8:	713a      	strb	r2, [r7, #4]
10057aca:	210a      	movs	r1, #10
10057acc:	221f      	movs	r2, #31
10057ace:	2304      	movs	r3, #4
10057ad0:	7123      	strb	r3, [r4, #4]
10057ad2:	233e      	movs	r3, #62	@ 0x3e
10057ad4:	7043      	strb	r3, [r0, #1]
10057ad6:	71e1      	strb	r1, [r4, #7]
10057ad8:	71a2      	strb	r2, [r4, #6]
10057ada:	b2f0      	uxtb	r0, r6
10057adc:	4621      	mov	r1, r4
10057ade:	f7fa fc9a 	bl	10052416 <aci_event_fifo_push>
10057ae2:	b00d      	add	sp, #52	@ 0x34
10057ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057ae6:	46c0      	nop			@ (mov r8, r8)

10057ae8 <__arm_cp.28_0>:
10057ae8:	20000ecc 	.word	0x20000ecc

10057aec <__arm_cp.28_1>:
10057aec:	20000f20 	.word	0x20000f20

10057af0 <__arm_cp.28_2>:
10057af0:	20000ed0 	.word	0x20000ed0

10057af4 <__arm_cp.28_3>:
10057af4:	1004f845 	.word	0x1004f845

10057af8 <llc_conn_push_csa_event>:
10057af8:	b5b0      	push	{r4, r5, r7, lr}
10057afa:	460d      	mov	r5, r1
10057afc:	4604      	mov	r4, r0
10057afe:	4812      	ldr	r0, [pc, #72]	@ (10057b48 <__arm_cp.29_0>)
10057b00:	6800      	ldr	r0, [r0, #0]
10057b02:	213d      	movs	r1, #61	@ 0x3d
10057b04:	5c41      	ldrb	r1, [r0, r1]
10057b06:	0689      	lsls	r1, r1, #26
10057b08:	d51c      	bpl.n	10057b44 <llc_conn_push_csa_event+0x4c>
10057b0a:	303d      	adds	r0, #61	@ 0x3d
10057b0c:	7ac0      	ldrb	r0, [r0, #11]
10057b0e:	0700      	lsls	r0, r0, #28
10057b10:	d518      	bpl.n	10057b44 <llc_conn_push_csa_event+0x4c>
10057b12:	480e      	ldr	r0, [pc, #56]	@ (10057b4c <__arm_cp.29_1>)
10057b14:	6800      	ldr	r0, [r0, #0]
10057b16:	6940      	ldr	r0, [r0, #20]
10057b18:	21a1      	movs	r1, #161	@ 0xa1
10057b1a:	222c      	movs	r2, #44	@ 0x2c
10057b1c:	2302      	movs	r3, #2
10057b1e:	f7fa fbdd 	bl	100522dc <aci_event_fifo_push_header>
10057b22:	2800      	cmp	r0, #0
10057b24:	d00e      	beq.n	10057b44 <llc_conn_push_csa_event+0x4c>
10057b26:	4601      	mov	r1, r0
10057b28:	7204      	strb	r4, [r0, #8]
10057b2a:	7285      	strb	r5, [r0, #10]
10057b2c:	2014      	movs	r0, #20
10057b2e:	71c8      	strb	r0, [r1, #7]
10057b30:	2004      	movs	r0, #4
10057b32:	7188      	strb	r0, [r1, #6]
10057b34:	223e      	movs	r2, #62	@ 0x3e
10057b36:	714a      	strb	r2, [r1, #5]
10057b38:	7108      	strb	r0, [r1, #4]
10057b3a:	0a20      	lsrs	r0, r4, #8
10057b3c:	7248      	strb	r0, [r1, #9]
10057b3e:	20a1      	movs	r0, #161	@ 0xa1
10057b40:	f7fa fc69 	bl	10052416 <aci_event_fifo_push>
10057b44:	bdb0      	pop	{r4, r5, r7, pc}
10057b46:	46c0      	nop			@ (mov r8, r8)

10057b48 <__arm_cp.29_0>:
10057b48:	20000f20 	.word	0x20000f20

10057b4c <__arm_cp.29_1>:
10057b4c:	20000ed0 	.word	0x20000ed0

10057b50 <llc_conn_set_chmap_params>:
10057b50:	2398      	movs	r3, #152	@ 0x98
10057b52:	52c2      	strh	r2, [r0, r3]
10057b54:	3098      	adds	r0, #152	@ 0x98
10057b56:	6341      	str	r1, [r0, #52]	@ 0x34
10057b58:	8841      	ldrh	r1, [r0, #2]
10057b5a:	2220      	movs	r2, #32
10057b5c:	430a      	orrs	r2, r1
10057b5e:	8042      	strh	r2, [r0, #2]
10057b60:	4770      	bx	lr

10057b62 <llc_conn_set_conn_update_params>:
10057b62:	2398      	movs	r3, #152	@ 0x98
10057b64:	52c2      	strh	r2, [r0, r3]
10057b66:	3098      	adds	r0, #152	@ 0x98
10057b68:	6301      	str	r1, [r0, #48]	@ 0x30
10057b6a:	8841      	ldrh	r1, [r0, #2]
10057b6c:	2208      	movs	r2, #8
10057b6e:	430a      	orrs	r2, r1
10057b70:	8042      	strh	r2, [r0, #2]
10057b72:	4770      	bx	lr

10057b74 <llc_conn_set_rx_acl_blocked>:
10057b74:	2194      	movs	r1, #148	@ 0x94
10057b76:	5840      	ldr	r0, [r0, r1]
10057b78:	8801      	ldrh	r1, [r0, #0]
10057b7a:	2201      	movs	r2, #1
10057b7c:	0212      	lsls	r2, r2, #8
10057b7e:	430a      	orrs	r2, r1
10057b80:	8002      	strh	r2, [r0, #0]
10057b82:	4770      	bx	lr

10057b84 <llc_conn_set_start_enc>:
10057b84:	2294      	movs	r2, #148	@ 0x94
10057b86:	5880      	ldr	r0, [r0, r2]
10057b88:	2900      	cmp	r1, #0
10057b8a:	d007      	beq.n	10057b9c <llc_conn_set_start_enc+0x18>
10057b8c:	2901      	cmp	r1, #1
10057b8e:	d003      	beq.n	10057b98 <llc_conn_set_start_enc+0x14>
10057b90:	8801      	ldrh	r1, [r0, #0]
10057b92:	2210      	movs	r2, #16
10057b94:	430a      	orrs	r2, r1
10057b96:	8002      	strh	r2, [r0, #0]
10057b98:	2108      	movs	r1, #8
10057b9a:	e000      	b.n	10057b9e <llc_conn_set_start_enc+0x1a>
10057b9c:	2110      	movs	r1, #16
10057b9e:	8802      	ldrh	r2, [r0, #0]
10057ba0:	430a      	orrs	r2, r1
10057ba2:	8002      	strh	r2, [r0, #0]
10057ba4:	4770      	bx	lr

10057ba6 <llc_conn_set_stop_enc>:
10057ba6:	2294      	movs	r2, #148	@ 0x94
10057ba8:	5880      	ldr	r0, [r0, r2]
10057baa:	2900      	cmp	r1, #0
10057bac:	d007      	beq.n	10057bbe <llc_conn_set_stop_enc+0x18>
10057bae:	2901      	cmp	r1, #1
10057bb0:	d003      	beq.n	10057bba <llc_conn_set_stop_enc+0x14>
10057bb2:	8801      	ldrh	r1, [r0, #0]
10057bb4:	2240      	movs	r2, #64	@ 0x40
10057bb6:	430a      	orrs	r2, r1
10057bb8:	8002      	strh	r2, [r0, #0]
10057bba:	2120      	movs	r1, #32
10057bbc:	e000      	b.n	10057bc0 <llc_conn_set_stop_enc+0x1a>
10057bbe:	2140      	movs	r1, #64	@ 0x40
10057bc0:	8802      	ldrh	r2, [r0, #0]
10057bc2:	430a      	orrs	r2, r1
10057bc4:	8002      	strh	r2, [r0, #0]
10057bc6:	4770      	bx	lr

10057bc8 <llc_conn_set_tx_acl_blocked>:
10057bc8:	2194      	movs	r1, #148	@ 0x94
10057bca:	5840      	ldr	r0, [r0, r1]
10057bcc:	8801      	ldrh	r1, [r0, #0]
10057bce:	2280      	movs	r2, #128	@ 0x80
10057bd0:	430a      	orrs	r2, r1
10057bd2:	8002      	strh	r2, [r0, #0]
10057bd4:	4770      	bx	lr

10057bd6 <llc_conn_set_tx_ctrl_pdu_has_instant>:
10057bd6:	2194      	movs	r1, #148	@ 0x94
10057bd8:	5840      	ldr	r0, [r0, r1]
10057bda:	8801      	ldrh	r1, [r0, #0]
10057bdc:	2204      	movs	r2, #4
10057bde:	430a      	orrs	r2, r1
10057be0:	8002      	strh	r2, [r0, #0]
10057be2:	4770      	bx	lr

10057be4 <llc_conn_set_tx_ctrl_pdu_state>:
10057be4:	b580      	push	{r7, lr}
10057be6:	2294      	movs	r2, #148	@ 0x94
10057be8:	5880      	ldr	r0, [r0, r2]
10057bea:	8802      	ldrh	r2, [r0, #0]
10057bec:	2303      	movs	r3, #3
10057bee:	439a      	bics	r2, r3
10057bf0:	8002      	strh	r2, [r0, #0]
10057bf2:	4019      	ands	r1, r3
10057bf4:	8802      	ldrh	r2, [r0, #0]
10057bf6:	430a      	orrs	r2, r1
10057bf8:	8002      	strh	r2, [r0, #0]
10057bfa:	2015      	movs	r0, #21
10057bfc:	f007 feb8 	bl	1005f970 <tsk_notify_idx>
10057c00:	f7f7 f85f 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10057c04:	bd80      	pop	{r7, pc}

10057c06 <llc_conn_calc_skip_ucfg_weak>:
10057c06:	4610      	mov	r0, r2
10057c08:	4770      	bx	lr

10057c0a <llc_conn_multi_link_connection>:
10057c0a:	b5b0      	push	{r4, r5, r7, lr}
10057c0c:	4604      	mov	r4, r0
10057c0e:	2536      	movs	r5, #54	@ 0x36
10057c10:	f7ff fa80 	bl	10057114 <llc_conn_get_cntxt_p>
10057c14:	5544      	strb	r4, [r0, r5]
10057c16:	2000      	movs	r0, #0
10057c18:	bdb0      	pop	{r4, r5, r7, pc}
	...

10057c1c <llc_conn_check_connect_request_params>:
10057c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10057c1e:	b087      	sub	sp, #28
10057c20:	4604      	mov	r4, r0
10057c22:	7e00      	ldrb	r0, [r0, #24]
10057c24:	7e61      	ldrb	r1, [r4, #25]
10057c26:	0209      	lsls	r1, r1, #8
10057c28:	180e      	adds	r6, r1, r0
10057c2a:	1e72      	subs	r2, r6, #1
10057c2c:	2a08      	cmp	r2, #8
10057c2e:	d300      	bcc.n	10057c32 <llc_conn_check_connect_request_params+0x16>
10057c30:	2208      	movs	r2, #8
10057c32:	7ea0      	ldrb	r0, [r4, #26]
10057c34:	9004      	str	r0, [sp, #16]
10057c36:	7ee0      	ldrb	r0, [r4, #27]
10057c38:	9003      	str	r0, [sp, #12]
10057c3a:	7d60      	ldrb	r0, [r4, #21]
10057c3c:	2101      	movs	r1, #1
10057c3e:	4f27      	ldr	r7, [pc, #156]	@ (10057cdc <__arm_cp.1_0>)
10057c40:	9101      	str	r1, [sp, #4]
10057c42:	47b8      	blx	r7
10057c44:	4605      	mov	r5, r0
10057c46:	7da0      	ldrb	r0, [r4, #22]
10057c48:	7de1      	ldrb	r1, [r4, #23]
10057c4a:	0209      	lsls	r1, r1, #8
10057c4c:	1808      	adds	r0, r1, r0
10057c4e:	2100      	movs	r1, #0
10057c50:	9106      	str	r1, [sp, #24]
10057c52:	4632      	mov	r2, r6
10057c54:	47b8      	blx	r7
10057c56:	4633      	mov	r3, r6
10057c58:	9602      	str	r6, [sp, #8]
10057c5a:	4606      	mov	r6, r0
10057c5c:	432e      	orrs	r6, r5
10057c5e:	2019      	movs	r0, #25
10057c60:	01c2      	lsls	r2, r0, #7
10057c62:	2106      	movs	r1, #6
10057c64:	4618      	mov	r0, r3
10057c66:	9205      	str	r2, [sp, #20]
10057c68:	47b8      	blx	r7
10057c6a:	463b      	mov	r3, r7
10057c6c:	4605      	mov	r5, r0
10057c6e:	4335      	orrs	r5, r6
10057c70:	9803      	ldr	r0, [sp, #12]
10057c72:	0200      	lsls	r0, r0, #8
10057c74:	9904      	ldr	r1, [sp, #16]
10057c76:	1847      	adds	r7, r0, r1
10057c78:	22ff      	movs	r2, #255	@ 0xff
10057c7a:	32f4      	adds	r2, #244	@ 0xf4
10057c7c:	4638      	mov	r0, r7
10057c7e:	9906      	ldr	r1, [sp, #24]
10057c80:	4798      	blx	r3
10057c82:	4606      	mov	r6, r0
10057c84:	432e      	orrs	r6, r5
10057c86:	1c78      	adds	r0, r7, #1
10057c88:	9902      	ldr	r1, [sp, #8]
10057c8a:	4348      	muls	r0, r1
10057c8c:	0880      	lsrs	r0, r0, #2
10057c8e:	b281      	uxth	r1, r0
10057c90:	290a      	cmp	r1, #10
10057c92:	d800      	bhi.n	10057c96 <llc_conn_check_connect_request_params+0x7a>
10057c94:	210a      	movs	r1, #10
10057c96:	7f20      	ldrb	r0, [r4, #28]
10057c98:	7f62      	ldrb	r2, [r4, #29]
10057c9a:	0212      	lsls	r2, r2, #8
10057c9c:	1810      	adds	r0, r2, r0
10057c9e:	9a05      	ldr	r2, [sp, #20]
10057ca0:	4d0e      	ldr	r5, [pc, #56]	@ (10057cdc <__arm_cp.1_0>)
10057ca2:	47a8      	blx	r5
10057ca4:	4306      	orrs	r6, r0
10057ca6:	2023      	movs	r0, #35	@ 0x23
10057ca8:	5c21      	ldrb	r1, [r4, r0]
10057caa:	201f      	movs	r0, #31
10057cac:	4008      	ands	r0, r1
10057cae:	2105      	movs	r1, #5
10057cb0:	2210      	movs	r2, #16
10057cb2:	47a8      	blx	r5
10057cb4:	4330      	orrs	r0, r6
10057cb6:	d001      	beq.n	10057cbc <llc_conn_check_connect_request_params+0xa0>
10057cb8:	9806      	ldr	r0, [sp, #24]
10057cba:	e00c      	b.n	10057cd6 <llc_conn_check_connect_request_params+0xba>
10057cbc:	4620      	mov	r0, r4
10057cbe:	3022      	adds	r0, #34	@ 0x22
10057cc0:	7800      	ldrb	r0, [r0, #0]
10057cc2:	06c0      	lsls	r0, r0, #27
10057cc4:	d106      	bne.n	10057cd4 <llc_conn_check_connect_request_params+0xb8>
10057cc6:	201e      	movs	r0, #30
10057cc8:	2822      	cmp	r0, #34	@ 0x22
10057cca:	d0f5      	beq.n	10057cb8 <llc_conn_check_connect_request_params+0x9c>
10057ccc:	5c21      	ldrb	r1, [r4, r0]
10057cce:	1c40      	adds	r0, r0, #1
10057cd0:	2900      	cmp	r1, #0
10057cd2:	d0f9      	beq.n	10057cc8 <llc_conn_check_connect_request_params+0xac>
10057cd4:	9801      	ldr	r0, [sp, #4]
10057cd6:	b007      	add	sp, #28
10057cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057cda:	46c0      	nop			@ (mov r8, r8)

10057cdc <__arm_cp.1_0>:
10057cdc:	1005d04d 	.word	0x1005d04d

10057ce0 <llc_conn_check_ctrl_proc_rsp_timer>:
10057ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057ce2:	460d      	mov	r5, r1
10057ce4:	4604      	mov	r4, r0
10057ce6:	2030      	movs	r0, #48	@ 0x30
10057ce8:	5c20      	ldrb	r0, [r4, r0]
10057cea:	2101      	movs	r1, #1
10057cec:	f001 f871 	bl	10058dd2 <LL_cpe_get_active_status>
10057cf0:	4627      	mov	r7, r4
10057cf2:	3730      	adds	r7, #48	@ 0x30
10057cf4:	2801      	cmp	r0, #1
10057cf6:	d10e      	bne.n	10057d16 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
10057cf8:	7838      	ldrb	r0, [r7, #0]
10057cfa:	2101      	movs	r1, #1
10057cfc:	f001 fe8a 	bl	10059a14 <LL_cpe_conn_exception_opcode_from_sm>
10057d00:	2800      	cmp	r0, #0
10057d02:	d108      	bne.n	10057d16 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
10057d04:	6f20      	ldr	r0, [r4, #112]	@ 0x70
10057d06:	1e41      	subs	r1, r0, #1
10057d08:	d41d      	bmi.n	10057d46 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
10057d0a:	217d      	movs	r1, #125	@ 0x7d
10057d0c:	0449      	lsls	r1, r1, #17
10057d0e:	4288      	cmp	r0, r1
10057d10:	d800      	bhi.n	10057d14 <llc_conn_check_ctrl_proc_rsp_timer+0x34>
10057d12:	1b41      	subs	r1, r0, r5
10057d14:	6721      	str	r1, [r4, #112]	@ 0x70
10057d16:	7838      	ldrb	r0, [r7, #0]
10057d18:	2600      	movs	r6, #0
10057d1a:	4631      	mov	r1, r6
10057d1c:	f001 f859 	bl	10058dd2 <LL_cpe_get_active_status>
10057d20:	2801      	cmp	r0, #1
10057d22:	d111      	bne.n	10057d48 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10057d24:	7838      	ldrb	r0, [r7, #0]
10057d26:	2600      	movs	r6, #0
10057d28:	4631      	mov	r1, r6
10057d2a:	f001 fe73 	bl	10059a14 <LL_cpe_conn_exception_opcode_from_sm>
10057d2e:	2800      	cmp	r0, #0
10057d30:	d10a      	bne.n	10057d48 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10057d32:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10057d34:	1e41      	subs	r1, r0, #1
10057d36:	d406      	bmi.n	10057d46 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
10057d38:	217d      	movs	r1, #125	@ 0x7d
10057d3a:	0449      	lsls	r1, r1, #17
10057d3c:	4288      	cmp	r0, r1
10057d3e:	d800      	bhi.n	10057d42 <llc_conn_check_ctrl_proc_rsp_timer+0x62>
10057d40:	1b41      	subs	r1, r0, r5
10057d42:	66e1      	str	r1, [r4, #108]	@ 0x6c
10057d44:	e000      	b.n	10057d48 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10057d46:	2622      	movs	r6, #34	@ 0x22
10057d48:	4630      	mov	r0, r6
10057d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057d4c <llc_conn_check_instant_and_set_params>:
10057d4c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057d4e:	4604      	mov	r4, r0
10057d50:	209a      	movs	r0, #154	@ 0x9a
10057d52:	5a20      	ldrh	r0, [r4, r0]
10057d54:	07c2      	lsls	r2, r0, #31
10057d56:	4625      	mov	r5, r4
10057d58:	352c      	adds	r5, #44	@ 0x2c
10057d5a:	2a00      	cmp	r2, #0
10057d5c:	d100      	bne.n	10057d60 <llc_conn_check_instant_and_set_params+0x14>
10057d5e:	e081      	b.n	10057e64 <llc_conn_check_instant_and_set_params+0x118>
10057d60:	4626      	mov	r6, r4
10057d62:	3698      	adds	r6, #152	@ 0x98
10057d64:	8832      	ldrh	r2, [r6, #0]
10057d66:	1a51      	subs	r1, r2, r1
10057d68:	040b      	lsls	r3, r1, #16
10057d6a:	d004      	beq.n	10057d76 <llc_conn_check_instant_and_set_params+0x2a>
10057d6c:	b208      	sxth	r0, r1
10057d6e:	2800      	cmp	r0, #0
10057d70:	d578      	bpl.n	10057e64 <llc_conn_check_instant_and_set_params+0x118>
10057d72:	2028      	movs	r0, #40	@ 0x28
10057d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057d76:	0541      	lsls	r1, r0, #21
10057d78:	d40f      	bmi.n	10057d9a <llc_conn_check_instant_and_set_params+0x4e>
10057d7a:	0701      	lsls	r1, r0, #28
10057d7c:	d416      	bmi.n	10057dac <llc_conn_check_instant_and_set_params+0x60>
10057d7e:	0680      	lsls	r0, r0, #26
10057d80:	d438      	bmi.n	10057df4 <llc_conn_check_instant_and_set_params+0xa8>
10057d82:	7928      	ldrb	r0, [r5, #4]
10057d84:	f7f4 f949 	bl	1004c01a <LL_phy_upd_pending_ucfg>
10057d88:	2800      	cmp	r0, #0
10057d8a:	d060      	beq.n	10057e4e <llc_conn_check_instant_and_set_params+0x102>
10057d8c:	7928      	ldrb	r0, [r5, #4]
10057d8e:	2101      	movs	r1, #1
10057d90:	2200      	movs	r2, #0
10057d92:	4613      	mov	r3, r2
10057d94:	f003 f9e2 	bl	1005b15c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10057d98:	e059      	b.n	10057e4e <llc_conn_check_instant_and_set_params+0x102>
10057d9a:	7928      	ldrb	r0, [r5, #4]
10057d9c:	4611      	mov	r1, r2
10057d9e:	f7ff f9b7 	bl	10057110 <llc_cig_cmn_start_cis_ucfg_weak>
10057da2:	8870      	ldrh	r0, [r6, #2]
10057da4:	4932      	ldr	r1, [pc, #200]	@ (10057e70 <__arm_cp.3_0>)
10057da6:	4001      	ands	r1, r0
10057da8:	8071      	strh	r1, [r6, #2]
10057daa:	e050      	b.n	10057e4e <llc_conn_check_instant_and_set_params+0x102>
10057dac:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10057dae:	6b37      	ldr	r7, [r6, #48]	@ 0x30
10057db0:	6879      	ldr	r1, [r7, #4]
10057db2:	1840      	adds	r0, r0, r1
10057db4:	6460      	str	r0, [r4, #68]	@ 0x44
10057db6:	68b9      	ldr	r1, [r7, #8]
10057db8:	683a      	ldr	r2, [r7, #0]
10057dba:	7828      	ldrb	r0, [r5, #0]
10057dbc:	2802      	cmp	r0, #2
10057dbe:	9102      	str	r1, [sp, #8]
10057dc0:	9201      	str	r2, [sp, #4]
10057dc2:	d129      	bne.n	10057e18 <llc_conn_check_instant_and_set_params+0xcc>
10057dc4:	7d68      	ldrb	r0, [r5, #21]
10057dc6:	f7f9 f92f 	bl	10051028 <BLEPLAT_CNTR_SmGetTxPhy>
10057dca:	2804      	cmp	r0, #4
10057dcc:	d001      	beq.n	10057dd2 <llc_conn_check_instant_and_set_params+0x86>
10057dce:	2806      	cmp	r0, #6
10057dd0:	d100      	bne.n	10057dd4 <llc_conn_check_instant_and_set_params+0x88>
10057dd2:	2002      	movs	r0, #2
10057dd4:	9b02      	ldr	r3, [sp, #8]
10057dd6:	6979      	ldr	r1, [r7, #20]
10057dd8:	4299      	cmp	r1, r3
10057dda:	460a      	mov	r2, r1
10057ddc:	d300      	bcc.n	10057de0 <llc_conn_check_instant_and_set_params+0x94>
10057dde:	461a      	mov	r2, r3
10057de0:	6522      	str	r2, [r4, #80]	@ 0x50
10057de2:	0080      	lsls	r0, r0, #2
10057de4:	1820      	adds	r0, r4, r0
10057de6:	6581      	str	r1, [r0, #88]	@ 0x58
10057de8:	9801      	ldr	r0, [sp, #4]
10057dea:	0840      	lsrs	r0, r0, #1
10057dec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10057dee:	1808      	adds	r0, r1, r0
10057df0:	6460      	str	r0, [r4, #68]	@ 0x44
10057df2:	e01b      	b.n	10057e2c <llc_conn_check_instant_and_set_params+0xe0>
10057df4:	2083      	movs	r0, #131	@ 0x83
10057df6:	0040      	lsls	r0, r0, #1
10057df8:	1827      	adds	r7, r4, r0
10057dfa:	6b71      	ldr	r1, [r6, #52]	@ 0x34
10057dfc:	7d68      	ldrb	r0, [r5, #21]
10057dfe:	f7f9 f969 	bl	100510d4 <BLEPLAT_CNTR_SmSetChannelMap>
10057e02:	7838      	ldrb	r0, [r7, #0]
10057e04:	2801      	cmp	r0, #1
10057e06:	d104      	bne.n	10057e12 <llc_conn_check_instant_and_set_params+0xc6>
10057e08:	6b71      	ldr	r1, [r6, #52]	@ 0x34
10057e0a:	34e0      	adds	r4, #224	@ 0xe0
10057e0c:	4620      	mov	r0, r4
10057e0e:	f000 fdcf 	bl	100589b0 <llc_mngm_csa2_update_remapping_table>
10057e12:	8870      	ldrh	r0, [r6, #2]
10057e14:	2120      	movs	r1, #32
10057e16:	e018      	b.n	10057e4a <llc_conn_check_instant_and_set_params+0xfe>
10057e18:	f7ff f97c 	bl	10057114 <llc_conn_get_cntxt_p>
10057e1c:	9b02      	ldr	r3, [sp, #8]
10057e1e:	9901      	ldr	r1, [sp, #4]
10057e20:	6361      	str	r1, [r4, #52]	@ 0x34
10057e22:	6840      	ldr	r0, [r0, #4]
10057e24:	4298      	cmp	r0, r3
10057e26:	d300      	bcc.n	10057e2a <llc_conn_check_instant_and_set_params+0xde>
10057e28:	4618      	mov	r0, r3
10057e2a:	6520      	str	r0, [r4, #80]	@ 0x50
10057e2c:	68f8      	ldr	r0, [r7, #12]
10057e2e:	8720      	strh	r0, [r4, #56]	@ 0x38
10057e30:	6938      	ldr	r0, [r7, #16]
10057e32:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
10057e34:	180a      	adds	r2, r1, r0
10057e36:	6662      	str	r2, [r4, #100]	@ 0x64
10057e38:	66a0      	str	r0, [r4, #104]	@ 0x68
10057e3a:	4299      	cmp	r1, r3
10057e3c:	d003      	beq.n	10057e46 <llc_conn_check_instant_and_set_params+0xfa>
10057e3e:	64e3      	str	r3, [r4, #76]	@ 0x4c
10057e40:	4620      	mov	r0, r4
10057e42:	f000 ff72 	bl	10058d2a <llc_subrate_reset_params>
10057e46:	8870      	ldrh	r0, [r6, #2]
10057e48:	2108      	movs	r1, #8
10057e4a:	4388      	bics	r0, r1
10057e4c:	8070      	strh	r0, [r6, #2]
10057e4e:	8870      	ldrh	r0, [r6, #2]
10057e50:	2102      	movs	r1, #2
10057e52:	4301      	orrs	r1, r0
10057e54:	2001      	movs	r0, #1
10057e56:	4381      	bics	r1, r0
10057e58:	8071      	strh	r1, [r6, #2]
10057e5a:	2015      	movs	r0, #21
10057e5c:	f007 fd88 	bl	1005f970 <tsk_notify_idx>
10057e60:	f7f6 ff2f 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10057e64:	7928      	ldrb	r0, [r5, #4]
10057e66:	f7f4 f900 	bl	1004c06a <LL_phy_upd_evt_pending_check_isr_ucfg>
10057e6a:	2000      	movs	r0, #0
10057e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057e6e:	46c0      	nop			@ (mov r8, r8)

10057e70 <__arm_cp.3_0>:
10057e70:	0000fbff 	.word	0x0000fbff

10057e74 <llc_conn_check_supervision_timer>:
10057e74:	6e42      	ldr	r2, [r0, #100]	@ 0x64
10057e76:	1a51      	subs	r1, r2, r1
10057e78:	6641      	str	r1, [r0, #100]	@ 0x64
10057e7a:	1e49      	subs	r1, r1, #1
10057e7c:	d401      	bmi.n	10057e82 <llc_conn_check_supervision_timer+0xe>
10057e7e:	2000      	movs	r0, #0
10057e80:	4770      	bx	lr
10057e82:	2188      	movs	r1, #136	@ 0x88
10057e84:	5c40      	ldrb	r0, [r0, r1]
10057e86:	0680      	lsls	r0, r0, #26
10057e88:	d501      	bpl.n	10057e8e <llc_conn_check_supervision_timer+0x1a>
10057e8a:	2008      	movs	r0, #8
10057e8c:	4770      	bx	lr
10057e8e:	203e      	movs	r0, #62	@ 0x3e
10057e90:	4770      	bx	lr

10057e92 <llc_conn_release_conn_idx>:
10057e92:	b580      	push	{r7, lr}
10057e94:	f7ff f948 	bl	10057128 <llc_conn_get_cntxt_per_p>
10057e98:	212c      	movs	r1, #44	@ 0x2c
10057e9a:	2200      	movs	r2, #0
10057e9c:	5442      	strb	r2, [r0, r1]
10057e9e:	bd80      	pop	{r7, pc}

10057ea0 <llc_conn_disconnect_link>:
10057ea0:	b5b0      	push	{r4, r5, r7, lr}
10057ea2:	460c      	mov	r4, r1
10057ea4:	4601      	mov	r1, r0
10057ea6:	0a02      	lsrs	r2, r0, #8
10057ea8:	2012      	movs	r0, #18
10057eaa:	2a0e      	cmp	r2, #14
10057eac:	d81c      	bhi.n	10057ee8 <llc_conn_disconnect_link+0x48>
10057eae:	2c1a      	cmp	r4, #26
10057eb0:	d81a      	bhi.n	10057ee8 <llc_conn_disconnect_link+0x48>
10057eb2:	2201      	movs	r2, #1
10057eb4:	40a2      	lsls	r2, r4
10057eb6:	4b0d      	ldr	r3, [pc, #52]	@ (10057eec <__arm_cp.9_0>)
10057eb8:	421a      	tst	r2, r3
10057eba:	d015      	beq.n	10057ee8 <llc_conn_disconnect_link+0x48>
10057ebc:	4608      	mov	r0, r1
10057ebe:	f7ff f941 	bl	10057144 <llc_conn_get_cntxt_per_p_from_handle>
10057ec2:	2800      	cmp	r0, #0
10057ec4:	d008      	beq.n	10057ed8 <llc_conn_disconnect_link+0x38>
10057ec6:	4605      	mov	r5, r0
10057ec8:	2030      	movs	r0, #48	@ 0x30
10057eca:	5c28      	ldrb	r0, [r5, r0]
10057ecc:	f001 fd9b 	bl	10059a06 <LL_cpe_get_tx_terminate_in_progress>
10057ed0:	2801      	cmp	r0, #1
10057ed2:	d103      	bne.n	10057edc <llc_conn_disconnect_link+0x3c>
10057ed4:	203a      	movs	r0, #58	@ 0x3a
10057ed6:	bdb0      	pop	{r4, r5, r7, pc}
10057ed8:	2002      	movs	r0, #2
10057eda:	bdb0      	pop	{r4, r5, r7, pc}
10057edc:	3530      	adds	r5, #48	@ 0x30
10057ede:	7828      	ldrb	r0, [r5, #0]
10057ee0:	4621      	mov	r1, r4
10057ee2:	f001 fd83 	bl	100599ec <LL_cpe_set_disconnect>
10057ee6:	2000      	movs	r0, #0
10057ee8:	bdb0      	pop	{r4, r5, r7, pc}
10057eea:	46c0      	nop			@ (mov r8, r8)

10057eec <__arm_cp.9_0>:
10057eec:	04080020 	.word	0x04080020

10057ef0 <llc_conn_disconnect_link_from_cpf>:
10057ef0:	b510      	push	{r4, lr}
10057ef2:	4604      	mov	r4, r0
10057ef4:	202d      	movs	r0, #45	@ 0x2d
10057ef6:	5421      	strb	r1, [r4, r0]
10057ef8:	342d      	adds	r4, #45	@ 0x2d
10057efa:	7d20      	ldrb	r0, [r4, #20]
10057efc:	f005 fd72 	bl	1005d9e4 <LL_sched_delete_taskslot>
10057f00:	7d20      	ldrb	r0, [r4, #20]
10057f02:	f005 fdc1 	bl	1005da88 <LL_sched_check_and_wait_sched>
10057f06:	bd10      	pop	{r4, pc}

10057f08 <llc_conn_go_to_connect>:
10057f08:	b5f0      	push	{r4, r5, r6, r7, lr}
10057f0a:	b0ad      	sub	sp, #180	@ 0xb4
10057f0c:	4605      	mov	r5, r0
10057f0e:	7ac0      	ldrb	r0, [r0, #11]
10057f10:	f7ff f90a 	bl	10057128 <llc_conn_get_cntxt_per_p>
10057f14:	4606      	mov	r6, r0
10057f16:	f7ff f8fd 	bl	10057114 <llc_conn_get_cntxt_p>
10057f1a:	901f      	str	r0, [sp, #124]	@ 0x7c
10057f1c:	682c      	ldr	r4, [r5, #0]
10057f1e:	2022      	movs	r0, #34	@ 0x22
10057f20:	5c21      	ldrb	r1, [r4, r0]
10057f22:	221f      	movs	r2, #31
10057f24:	9217      	str	r2, [sp, #92]	@ 0x5c
10057f26:	4011      	ands	r1, r2
10057f28:	5421      	strb	r1, [r4, r0]
10057f2a:	7d60      	ldrb	r0, [r4, #21]
10057f2c:	9010      	str	r0, [sp, #64]	@ 0x40
10057f2e:	7ba0      	ldrb	r0, [r4, #14]
10057f30:	9020      	str	r0, [sp, #128]	@ 0x80
10057f32:	7be0      	ldrb	r0, [r4, #15]
10057f34:	900c      	str	r0, [sp, #48]	@ 0x30
10057f36:	7c20      	ldrb	r0, [r4, #16]
10057f38:	9018      	str	r0, [sp, #96]	@ 0x60
10057f3a:	7c60      	ldrb	r0, [r4, #17]
10057f3c:	901a      	str	r0, [sp, #104]	@ 0x68
10057f3e:	7ca0      	ldrb	r0, [r4, #18]
10057f40:	901c      	str	r0, [sp, #112]	@ 0x70
10057f42:	7ce0      	ldrb	r0, [r4, #19]
10057f44:	9013      	str	r0, [sp, #76]	@ 0x4c
10057f46:	7d20      	ldrb	r0, [r4, #20]
10057f48:	9016      	str	r0, [sp, #88]	@ 0x58
10057f4a:	7da0      	ldrb	r0, [r4, #22]
10057f4c:	9008      	str	r0, [sp, #32]
10057f4e:	7de0      	ldrb	r0, [r4, #23]
10057f50:	900e      	str	r0, [sp, #56]	@ 0x38
10057f52:	7e20      	ldrb	r0, [r4, #24]
10057f54:	9015      	str	r0, [sp, #84]	@ 0x54
10057f56:	7e60      	ldrb	r0, [r4, #25]
10057f58:	9009      	str	r0, [sp, #36]	@ 0x24
10057f5a:	7ea0      	ldrb	r0, [r4, #26]
10057f5c:	9011      	str	r0, [sp, #68]	@ 0x44
10057f5e:	7ee0      	ldrb	r0, [r4, #27]
10057f60:	900a      	str	r0, [sp, #40]	@ 0x28
10057f62:	7f20      	ldrb	r0, [r4, #28]
10057f64:	9014      	str	r0, [sp, #80]	@ 0x50
10057f66:	7f60      	ldrb	r0, [r4, #29]
10057f68:	900f      	str	r0, [sp, #60]	@ 0x3c
10057f6a:	7820      	ldrb	r0, [r4, #0]
10057f6c:	901d      	str	r0, [sp, #116]	@ 0x74
10057f6e:	4620      	mov	r0, r4
10057f70:	3022      	adds	r0, #34	@ 0x22
10057f72:	7840      	ldrb	r0, [r0, #1]
10057f74:	9019      	str	r0, [sp, #100]	@ 0x64
10057f76:	7ba8      	ldrb	r0, [r5, #14]
10057f78:	f7f9 f856 	bl	10051028 <BLEPLAT_CNTR_SmGetTxPhy>
10057f7c:	9022      	str	r0, [sp, #136]	@ 0x88
10057f7e:	f004 ff77 	bl	1005ce70 <llc_get_channel_sel_algo2_enabled>
10057f82:	900b      	str	r0, [sp, #44]	@ 0x2c
10057f84:	2094      	movs	r0, #148	@ 0x94
10057f86:	5830      	ldr	r0, [r6, r0]
10057f88:	2300      	movs	r3, #0
10057f8a:	6003      	str	r3, [r0, #0]
10057f8c:	2090      	movs	r0, #144	@ 0x90
10057f8e:	5830      	ldr	r0, [r6, r0]
10057f90:	6003      	str	r3, [r0, #0]
10057f92:	20a8      	movs	r0, #168	@ 0xa8
10057f94:	5233      	strh	r3, [r6, r0]
10057f96:	2042      	movs	r0, #66	@ 0x42
10057f98:	5233      	strh	r3, [r6, r0]
10057f9a:	202d      	movs	r0, #45	@ 0x2d
10057f9c:	5433      	strb	r3, [r6, r0]
10057f9e:	2045      	movs	r0, #69	@ 0x45
10057fa0:	0080      	lsls	r0, r0, #2
10057fa2:	5033      	str	r3, [r6, r0]
10057fa4:	2111      	movs	r1, #17
10057fa6:	0109      	lsls	r1, r1, #4
10057fa8:	5473      	strb	r3, [r6, r1]
10057faa:	2121      	movs	r1, #33	@ 0x21
10057fac:	00c9      	lsls	r1, r1, #3
10057fae:	227f      	movs	r2, #127	@ 0x7f
10057fb0:	5472      	strb	r2, [r6, r1]
10057fb2:	212f      	movs	r1, #47	@ 0x2f
10057fb4:	2207      	movs	r2, #7
10057fb6:	5472      	strb	r2, [r6, r1]
10057fb8:	2188      	movs	r1, #136	@ 0x88
10057fba:	5073      	str	r3, [r6, r1]
10057fbc:	218c      	movs	r1, #140	@ 0x8c
10057fbe:	5073      	str	r3, [r6, r1]
10057fc0:	4631      	mov	r1, r6
10057fc2:	31a8      	adds	r1, #168	@ 0xa8
10057fc4:	810b      	strh	r3, [r1, #8]
10057fc6:	9121      	str	r1, [sp, #132]	@ 0x84
10057fc8:	728b      	strb	r3, [r1, #10]
10057fca:	1830      	adds	r0, r6, r0
10057fcc:	931e      	str	r3, [sp, #120]	@ 0x78
10057fce:	900d      	str	r0, [sp, #52]	@ 0x34
10057fd0:	6043      	str	r3, [r0, #4]
10057fd2:	2701      	movs	r7, #1
10057fd4:	8537      	strh	r7, [r6, #40]	@ 0x28
10057fd6:	9523      	str	r5, [sp, #140]	@ 0x8c
10057fd8:	7ba8      	ldrb	r0, [r5, #14]
10057fda:	2141      	movs	r1, #65	@ 0x41
10057fdc:	5470      	strb	r0, [r6, r1]
10057fde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10057fe0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10057fe2:	4002      	ands	r2, r0
10057fe4:	7ae8      	ldrb	r0, [r5, #11]
10057fe6:	2131      	movs	r1, #49	@ 0x31
10057fe8:	921b      	str	r2, [sp, #108]	@ 0x6c
10057fea:	5472      	strb	r2, [r6, r1]
10057fec:	2130      	movs	r1, #48	@ 0x30
10057fee:	9112      	str	r1, [sp, #72]	@ 0x48
10057ff0:	5470      	strb	r0, [r6, r1]
10057ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
10057ff4:	0200      	lsls	r0, r0, #8
10057ff6:	9915      	ldr	r1, [sp, #84]	@ 0x54
10057ff8:	1840      	adds	r0, r0, r1
10057ffa:	9015      	str	r0, [sp, #84]	@ 0x54
10057ffc:	b280      	uxth	r0, r0
10057ffe:	0241      	lsls	r1, r0, #9
10058000:	64f1      	str	r1, [r6, #76]	@ 0x4c
10058002:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10058004:	0209      	lsls	r1, r1, #8
10058006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10058008:	1889      	adds	r1, r1, r2
1005800a:	9114      	str	r1, [sp, #80]	@ 0x50
1005800c:	b289      	uxth	r1, r1
1005800e:	0309      	lsls	r1, r1, #12
10058010:	2203      	movs	r2, #3
10058012:	920f      	str	r2, [sp, #60]	@ 0x3c
10058014:	0292      	lsls	r2, r2, #10
10058016:	4342      	muls	r2, r0
10058018:	6672      	str	r2, [r6, #100]	@ 0x64
1005801a:	66b1      	str	r1, [r6, #104]	@ 0x68
1005801c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005801e:	0200      	lsls	r0, r0, #8
10058020:	991c      	ldr	r1, [sp, #112]	@ 0x70
10058022:	1840      	adds	r0, r0, r1
10058024:	9916      	ldr	r1, [sp, #88]	@ 0x58
10058026:	0409      	lsls	r1, r1, #16
10058028:	1840      	adds	r0, r0, r1
1005802a:	9016      	str	r0, [sp, #88]	@ 0x58
1005802c:	6570      	str	r0, [r6, #84]	@ 0x54
1005802e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10058030:	0200      	lsls	r0, r0, #8
10058032:	9911      	ldr	r1, [sp, #68]	@ 0x44
10058034:	1840      	adds	r0, r0, r1
10058036:	9011      	str	r0, [sp, #68]	@ 0x44
10058038:	8730      	strh	r0, [r6, #56]	@ 0x38
1005803a:	25ff      	movs	r5, #255	@ 0xff
1005803c:	950a      	str	r5, [sp, #40]	@ 0x28
1005803e:	3512      	adds	r5, #18
10058040:	f005 fa08 	bl	1005d454 <llc_get_next_free_conn_handle>
10058044:	971c      	str	r7, [sp, #112]	@ 0x70
10058046:	5577      	strb	r7, [r6, r5]
10058048:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005804a:	8770      	strh	r0, [r6, #58]	@ 0x3a
1005804c:	207d      	movs	r0, #125	@ 0x7d
1005804e:	0440      	lsls	r0, r0, #17
10058050:	66f0      	str	r0, [r6, #108]	@ 0x6c
10058052:	6730      	str	r0, [r6, #112]	@ 0x70
10058054:	2083      	movs	r0, #131	@ 0x83
10058056:	0040      	lsls	r0, r0, #1
10058058:	1833      	adds	r3, r6, r0
1005805a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005805c:	0200      	lsls	r0, r0, #8
1005805e:	9920      	ldr	r1, [sp, #128]	@ 0x80
10058060:	1840      	adds	r0, r0, r1
10058062:	9918      	ldr	r1, [sp, #96]	@ 0x60
10058064:	0409      	lsls	r1, r1, #16
10058066:	1840      	adds	r0, r0, r1
10058068:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005806a:	0609      	lsls	r1, r1, #24
1005806c:	1840      	adds	r0, r0, r1
1005806e:	901a      	str	r0, [sp, #104]	@ 0x68
10058070:	4632      	mov	r2, r6
10058072:	322c      	adds	r2, #44	@ 0x2c
10058074:	341e      	adds	r4, #30
10058076:	9418      	str	r4, [sp, #96]	@ 0x60
10058078:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005807a:	2801      	cmp	r0, #1
1005807c:	9220      	str	r2, [sp, #128]	@ 0x80
1005807e:	9313      	str	r3, [sp, #76]	@ 0x4c
10058080:	d106      	bne.n	10058090 <llc_conn_go_to_connect+0x188>
10058082:	7c38      	ldrb	r0, [r7, #16]
10058084:	2801      	cmp	r0, #1
10058086:	d103      	bne.n	10058090 <llc_conn_go_to_connect+0x188>
10058088:	2020      	movs	r0, #32
1005808a:	991d      	ldr	r1, [sp, #116]	@ 0x74
1005808c:	4008      	ands	r0, r1
1005808e:	d104      	bne.n	1005809a <llc_conn_go_to_connect+0x192>
10058090:	7b38      	ldrb	r0, [r7, #12]
10058092:	21fe      	movs	r1, #254	@ 0xfe
10058094:	4001      	ands	r1, r0
10058096:	2902      	cmp	r1, #2
10058098:	d11b      	bne.n	100580d2 <llc_conn_go_to_connect+0x1ca>
1005809a:	2001      	movs	r0, #1
1005809c:	7018      	strb	r0, [r3, #0]
1005809e:	7bb8      	ldrb	r0, [r7, #14]
100580a0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
100580a2:	4621      	mov	r1, r4
100580a4:	f7f9 f816 	bl	100510d4 <BLEPLAT_CNTR_SmSetChannelMap>
100580a8:	4635      	mov	r5, r6
100580aa:	35e0      	adds	r5, #224	@ 0xe0
100580ac:	4628      	mov	r0, r5
100580ae:	4621      	mov	r1, r4
100580b0:	f000 fc7e 	bl	100589b0 <llc_mngm_csa2_update_remapping_table>
100580b4:	9820      	ldr	r0, [sp, #128]	@ 0x80
100580b6:	7d40      	ldrb	r0, [r0, #21]
100580b8:	2200      	movs	r2, #0
100580ba:	9200      	str	r2, [sp, #0]
100580bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
100580be:	9101      	str	r1, [sp, #4]
100580c0:	9202      	str	r2, [sp, #8]
100580c2:	4629      	mov	r1, r5
100580c4:	921b      	str	r2, [sp, #108]	@ 0x6c
100580c6:	4613      	mov	r3, r2
100580c8:	f000 fc8d 	bl	100589e6 <llc_mngm_csa2_select_channel_for_task>
100580cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
100580ce:	901e      	str	r0, [sp, #120]	@ 0x78
100580d0:	e001      	b.n	100580d6 <llc_conn_go_to_connect+0x1ce>
100580d2:	981e      	ldr	r0, [sp, #120]	@ 0x78
100580d4:	7018      	strb	r0, [r3, #0]
100580d6:	209f      	movs	r0, #159	@ 0x9f
100580d8:	990d      	ldr	r1, [sp, #52]	@ 0x34
100580da:	7788      	strb	r0, [r1, #30]
100580dc:	48f8      	ldr	r0, [pc, #992]	@ (100584c0 <__arm_cp.11_0>)
100580de:	8388      	strh	r0, [r1, #28]
100580e0:	48f8      	ldr	r0, [pc, #992]	@ (100584c4 <__arm_cp.11_1>)
100580e2:	8348      	strh	r0, [r1, #26]
100580e4:	6e10      	ldr	r0, [r2, #96]	@ 0x60
100580e6:	991c      	ldr	r1, [sp, #112]	@ 0x70
100580e8:	4388      	bics	r0, r1
100580ea:	6610      	str	r0, [r2, #96]	@ 0x60
100580ec:	7af8      	ldrb	r0, [r7, #11]
100580ee:	f7f3 ffac 	bl	1004c04a <LL_phy_update_init_per_st_data_ucfg>
100580f2:	2029      	movs	r0, #41	@ 0x29
100580f4:	00c5      	lsls	r5, r0, #3
100580f6:	20a9      	movs	r0, #169	@ 0xa9
100580f8:	0107      	lsls	r7, r0, #4
100580fa:	f7fe fb3f 	bl	1005677c <data_length_extension_csr_ucfg_weak>
100580fe:	2801      	cmp	r0, #1
10058100:	d118      	bne.n	10058134 <llc_conn_go_to_connect+0x22c>
10058102:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10058104:	8980      	ldrh	r0, [r0, #12]
10058106:	281b      	cmp	r0, #27
10058108:	d10f      	bne.n	1005812a <llc_conn_go_to_connect+0x222>
1005810a:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005810c:	2804      	cmp	r0, #4
1005810e:	d108      	bne.n	10058122 <llc_conn_go_to_connect+0x21a>
10058110:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10058112:	8a40      	ldrh	r0, [r0, #18]
10058114:	42b8      	cmp	r0, r7
10058116:	d108      	bne.n	1005812a <llc_conn_go_to_connect+0x222>
10058118:	201b      	movs	r0, #27
1005811a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005811c:	8208      	strh	r0, [r1, #16]
1005811e:	8188      	strh	r0, [r1, #12]
10058120:	e010      	b.n	10058144 <llc_conn_go_to_connect+0x23c>
10058122:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10058124:	8a00      	ldrh	r0, [r0, #16]
10058126:	42a8      	cmp	r0, r5
10058128:	d004      	beq.n	10058134 <llc_conn_go_to_connect+0x22c>
1005812a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005812c:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005812e:	2104      	movs	r1, #4
10058130:	4301      	orrs	r1, r0
10058132:	6611      	str	r1, [r2, #96]	@ 0x60
10058134:	201b      	movs	r0, #27
10058136:	9921      	ldr	r1, [sp, #132]	@ 0x84
10058138:	8208      	strh	r0, [r1, #16]
1005813a:	8188      	strh	r0, [r1, #12]
1005813c:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005813e:	2804      	cmp	r0, #4
10058140:	d000      	beq.n	10058144 <llc_conn_go_to_connect+0x23c>
10058142:	462f      	mov	r7, r5
10058144:	980e      	ldr	r0, [sp, #56]	@ 0x38
10058146:	0200      	lsls	r0, r0, #8
10058148:	900e      	str	r0, [sp, #56]	@ 0x38
1005814a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005814c:	828f      	strh	r7, [r1, #20]
1005814e:	824f      	strh	r7, [r1, #18]
10058150:	830f      	strh	r7, [r1, #24]
10058152:	201b      	movs	r0, #27
10058154:	82c8      	strh	r0, [r1, #22]
10058156:	81c8      	strh	r0, [r1, #14]
10058158:	83cf      	strh	r7, [r1, #30]
1005815a:	838f      	strh	r7, [r1, #28]
1005815c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
1005815e:	8b68      	ldrh	r0, [r5, #26]
10058160:	8348      	strh	r0, [r1, #26]
10058162:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10058164:	7af8      	ldrb	r0, [r7, #11]
10058166:	f002 f8cf 	bl	1005a308 <llc_conn_init_cte_ctxt_ucfg_weak>
1005816a:	7af8      	ldrb	r0, [r7, #11]
1005816c:	f002 ffe4 	bl	1005b138 <llc_conn_init_pcl_ctxt_ucfg_weak>
10058170:	7af8      	ldrb	r0, [r7, #11]
10058172:	f001 fe87 	bl	10059e84 <LLC_conn_init_chc_ctxt_ucfg_weak>
10058176:	4628      	mov	r0, r5
10058178:	4631      	mov	r1, r6
1005817a:	f000 fdcb 	bl	10058d14 <llc_subrate_init_acceptable_per>
1005817e:	7af8      	ldrb	r0, [r7, #11]
10058180:	f002 ffde 	bl	1005b140 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
10058184:	7af8      	ldrb	r0, [r7, #11]
10058186:	f000 fd4b 	bl	10058c20 <llc_past_init_ucfg_weak>
1005818a:	4630      	mov	r0, r6
1005818c:	f002 fe44 	bl	1005ae18 <LLC_init_le_ping_params>
10058190:	7af8      	ldrb	r0, [r7, #11]
10058192:	f001 fc5b 	bl	10059a4c <llc_cpe_init_sm_ctxt>
10058196:	9822      	ldr	r0, [sp, #136]	@ 0x88
10058198:	f7f9 f937 	bl	1005140a <BLEPLAT_CNTR_DemodDelaySt>
1005819c:	7b39      	ldrb	r1, [r7, #12]
1005819e:	4aca      	ldr	r2, [pc, #808]	@ (100584c8 <__arm_cp.11_2>)
100581a0:	6812      	ldr	r2, [r2, #0]
100581a2:	6817      	ldr	r7, [r2, #0]
100581a4:	2903      	cmp	r1, #3
100581a6:	d004      	beq.n	100581b2 <llc_conn_go_to_connect+0x2aa>
100581a8:	2902      	cmp	r1, #2
100581aa:	d10b      	bne.n	100581c4 <llc_conn_go_to_connect+0x2bc>
100581ac:	1a38      	subs	r0, r7, r0
100581ae:	383e      	subs	r0, #62	@ 0x3e
100581b0:	e012      	b.n	100581d8 <llc_conn_go_to_connect+0x2d0>
100581b2:	210e      	movs	r1, #14
100581b4:	9d22      	ldr	r5, [sp, #136]	@ 0x88
100581b6:	4628      	mov	r0, r5
100581b8:	f004 ff26 	bl	1005d008 <LL_link_calc_packetlength>
100581bc:	1a38      	subs	r0, r7, r0
100581be:	383e      	subs	r0, #62	@ 0x3e
100581c0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
100581c2:	e00b      	b.n	100581dc <llc_conn_go_to_connect+0x2d4>
100581c4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
100581c6:	7b49      	ldrb	r1, [r1, #13]
100581c8:	1a38      	subs	r0, r7, r0
100581ca:	2900      	cmp	r1, #0
100581cc:	d001      	beq.n	100581d2 <llc_conn_go_to_connect+0x2ca>
100581ce:	3090      	adds	r0, #144	@ 0x90
100581d0:	e002      	b.n	100581d8 <llc_conn_go_to_connect+0x2d0>
100581d2:	2181      	movs	r1, #129	@ 0x81
100581d4:	0049      	lsls	r1, r1, #1
100581d6:	1840      	adds	r0, r0, r1
100581d8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
100581da:	9d22      	ldr	r5, [sp, #136]	@ 0x88
100581dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100581de:	9908      	ldr	r1, [sp, #32]
100581e0:	065a      	lsls	r2, r3, #25
100581e2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
100581e4:	1861      	adds	r1, r4, r1
100581e6:	2d04      	cmp	r5, #4
100581e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
100581ea:	d007      	beq.n	100581fc <llc_conn_go_to_connect+0x2f4>
100581ec:	7b3d      	ldrb	r5, [r7, #12]
100581ee:	23fe      	movs	r3, #254	@ 0xfe
100581f0:	402b      	ands	r3, r5
100581f2:	2b02      	cmp	r3, #2
100581f4:	d100      	bne.n	100581f8 <llc_conn_go_to_connect+0x2f0>
100581f6:	931c      	str	r3, [sp, #112]	@ 0x70
100581f8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
100581fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100581fc:	09db      	lsrs	r3, r3, #7
100581fe:	930e      	str	r3, [sp, #56]	@ 0x38
10058200:	0fd2      	lsrs	r2, r2, #31
10058202:	920f      	str	r2, [sp, #60]	@ 0x3c
10058204:	1861      	adds	r1, r4, r1
10058206:	024d      	lsls	r5, r1, #9
10058208:	1829      	adds	r1, r5, r0
1005820a:	683c      	ldr	r4, [r7, #0]
1005820c:	7b78      	ldrb	r0, [r7, #13]
1005820e:	2800      	cmp	r0, #0
10058210:	d02a      	beq.n	10058268 <llc_conn_go_to_connect+0x360>
10058212:	911d      	str	r1, [sp, #116]	@ 0x74
10058214:	9819      	ldr	r0, [sp, #100]	@ 0x64
10058216:	0947      	lsrs	r7, r0, #5
10058218:	f004 ff12 	bl	1005d040 <LL_link_get_own_sca_ppm>
1005821c:	9019      	str	r0, [sp, #100]	@ 0x64
1005821e:	971c      	str	r7, [sp, #112]	@ 0x70
10058220:	4638      	mov	r0, r7
10058222:	f000 fd8f 	bl	10058d44 <llc_convert_sca_to_ppm>
10058226:	2103      	movs	r1, #3
10058228:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005822a:	7011      	strb	r1, [r2, #0]
1005822c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005822e:	0249      	lsls	r1, r1, #9
10058230:	6371      	str	r1, [r6, #52]	@ 0x34
10058232:	9919      	ldr	r1, [sp, #100]	@ 0x64
10058234:	1840      	adds	r0, r0, r1
10058236:	8570      	strh	r0, [r6, #42]	@ 0x2a
10058238:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
1005823a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005823c:	6852      	ldr	r2, [r2, #4]
1005823e:	4291      	cmp	r1, r2
10058240:	d300      	bcc.n	10058244 <llc_conn_go_to_connect+0x33c>
10058242:	4611      	mov	r1, r2
10058244:	6531      	str	r1, [r6, #80]	@ 0x50
10058246:	b280      	uxth	r0, r0
10058248:	4629      	mov	r1, r5
1005824a:	f004 fed3 	bl	1005cff4 <LL_link_calculate_window_widening_from_ppm>
1005824e:	300d      	adds	r0, #13
10058250:	0041      	lsls	r1, r0, #1
10058252:	6b72      	ldr	r2, [r6, #52]	@ 0x34
10058254:	188a      	adds	r2, r1, r2
10058256:	1ca4      	adds	r4, r4, #2
10058258:	941f      	str	r4, [sp, #124]	@ 0x7c
1005825a:	2102      	movs	r1, #2
1005825c:	9110      	str	r1, [sp, #64]	@ 0x40
1005825e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
10058260:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10058262:	4b99      	ldr	r3, [pc, #612]	@ (100584c8 <__arm_cp.11_2>)
10058264:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
10058266:	e01b      	b.n	100582a0 <llc_conn_go_to_connect+0x398>
10058268:	460d      	mov	r5, r1
1005826a:	2102      	movs	r1, #2
1005826c:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005826e:	7001      	strb	r1, [r0, #0]
10058270:	2000      	movs	r0, #0
10058272:	8570      	strh	r0, [r6, #42]	@ 0x2a
10058274:	9a22      	ldr	r2, [sp, #136]	@ 0x88
10058276:	2a04      	cmp	r2, #4
10058278:	d000      	beq.n	1005827c <llc_conn_go_to_connect+0x374>
1005827a:	4611      	mov	r1, r2
1005827c:	0089      	lsls	r1, r1, #2
1005827e:	1871      	adds	r1, r6, r1
10058280:	6d89      	ldr	r1, [r1, #88]	@ 0x58
10058282:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
10058284:	428a      	cmp	r2, r1
10058286:	4b90      	ldr	r3, [pc, #576]	@ (100584c8 <__arm_cp.11_2>)
10058288:	d300      	bcc.n	1005828c <llc_conn_go_to_connect+0x384>
1005828a:	460a      	mov	r2, r1
1005828c:	6532      	str	r2, [r6, #80]	@ 0x50
1005828e:	9910      	ldr	r1, [sp, #64]	@ 0x40
10058290:	0209      	lsls	r1, r1, #8
10058292:	186d      	adds	r5, r5, r1
10058294:	3408      	adds	r4, #8
10058296:	941f      	str	r4, [sp, #124]	@ 0x7c
10058298:	2185      	movs	r1, #133	@ 0x85
1005829a:	9110      	str	r1, [sp, #64]	@ 0x40
1005829c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005829e:	901c      	str	r0, [sp, #112]	@ 0x70
100582a0:	6475      	str	r5, [r6, #68]	@ 0x44
100582a2:	64b0      	str	r0, [r6, #72]	@ 0x48
100582a4:	a824      	add	r0, sp, #144	@ 0x90
100582a6:	2100      	movs	r1, #0
100582a8:	8081      	strh	r1, [r0, #4]
100582aa:	911d      	str	r1, [sp, #116]	@ 0x74
100582ac:	9124      	str	r1, [sp, #144]	@ 0x90
100582ae:	6818      	ldr	r0, [r3, #0]
100582b0:	213d      	movs	r1, #61	@ 0x3d
100582b2:	5c41      	ldrb	r1, [r0, r1]
100582b4:	0689      	lsls	r1, r1, #26
100582b6:	9219      	str	r2, [sp, #100]	@ 0x64
100582b8:	d506      	bpl.n	100582c8 <llc_conn_go_to_connect+0x3c0>
100582ba:	303d      	adds	r0, #61	@ 0x3d
100582bc:	7b81      	ldrb	r1, [r0, #14]
100582be:	07c9      	lsls	r1, r1, #31
100582c0:	d105      	bne.n	100582ce <llc_conn_go_to_connect+0x3c6>
100582c2:	7a80      	ldrb	r0, [r0, #10]
100582c4:	0780      	lsls	r0, r0, #30
100582c6:	d402      	bmi.n	100582ce <llc_conn_go_to_connect+0x3c6>
100582c8:	4627      	mov	r7, r4
100582ca:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
100582cc:	e036      	b.n	1005833c <llc_conn_go_to_connect+0x434>
100582ce:	6878      	ldr	r0, [r7, #4]
100582d0:	6801      	ldr	r1, [r0, #0]
100582d2:	23fe      	movs	r3, #254	@ 0xfe
100582d4:	400b      	ands	r3, r1
100582d6:	aa24      	add	r2, sp, #144	@ 0x90
100582d8:	2b02      	cmp	r3, #2
100582da:	d000      	beq.n	100582de <llc_conn_go_to_connect+0x3d6>
100582dc:	921f      	str	r2, [sp, #124]	@ 0x7c
100582de:	b2cd      	uxtb	r5, r1
100582e0:	7b79      	ldrb	r1, [r7, #13]
100582e2:	2900      	cmp	r1, #0
100582e4:	d00c      	beq.n	10058300 <llc_conn_go_to_connect+0x3f8>
100582e6:	a924      	add	r1, sp, #144	@ 0x90
100582e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100582ea:	2a00      	cmp	r2, #0
100582ec:	d016      	beq.n	1005831c <llc_conn_go_to_connect+0x414>
100582ee:	6839      	ldr	r1, [r7, #0]
100582f0:	7b4a      	ldrb	r2, [r1, #13]
100582f2:	23c0      	movs	r3, #192	@ 0xc0
100582f4:	4013      	ands	r3, r2
100582f6:	aa24      	add	r2, sp, #144	@ 0x90
100582f8:	2b40      	cmp	r3, #64	@ 0x40
100582fa:	d00e      	beq.n	1005831a <llc_conn_go_to_connect+0x412>
100582fc:	4611      	mov	r1, r2
100582fe:	e00d      	b.n	1005831c <llc_conn_go_to_connect+0x414>
10058300:	a924      	add	r1, sp, #144	@ 0x90
10058302:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10058304:	2a00      	cmp	r2, #0
10058306:	d009      	beq.n	1005831c <llc_conn_go_to_connect+0x414>
10058308:	683a      	ldr	r2, [r7, #0]
1005830a:	79d1      	ldrb	r1, [r2, #7]
1005830c:	23c0      	movs	r3, #192	@ 0xc0
1005830e:	400b      	ands	r3, r1
10058310:	a924      	add	r1, sp, #144	@ 0x90
10058312:	2b40      	cmp	r3, #64	@ 0x40
10058314:	d102      	bne.n	1005831c <llc_conn_go_to_connect+0x414>
10058316:	1c91      	adds	r1, r2, #2
10058318:	e000      	b.n	1005831c <llc_conn_go_to_connect+0x414>
1005831a:	3108      	adds	r1, #8
1005831c:	7aba      	ldrb	r2, [r7, #10]
1005831e:	ab26      	add	r3, sp, #152	@ 0x98
10058320:	759a      	strb	r2, [r3, #22]
10058322:	893a      	ldrh	r2, [r7, #8]
10058324:	829a      	strh	r2, [r3, #20]
10058326:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
10058328:	9227      	str	r2, [sp, #156]	@ 0x9c
1005832a:	9128      	str	r1, [sp, #160]	@ 0xa0
1005832c:	2dfe      	cmp	r5, #254	@ 0xfe
1005832e:	d003      	beq.n	10058338 <llc_conn_go_to_connect+0x430>
10058330:	2103      	movs	r1, #3
10058332:	400d      	ands	r5, r1
10058334:	462f      	mov	r7, r5
10058336:	e000      	b.n	1005833a <llc_conn_go_to_connect+0x432>
10058338:	2701      	movs	r7, #1
1005833a:	1c44      	adds	r4, r0, #1
1005833c:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005833e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
10058340:	630d      	str	r5, [r1, #48]	@ 0x30
10058342:	2001      	movs	r0, #1
10058344:	4038      	ands	r0, r7
10058346:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10058348:	5488      	strb	r0, [r1, r2]
1005834a:	634d      	str	r5, [r1, #52]	@ 0x34
1005834c:	4608      	mov	r0, r1
1005834e:	3030      	adds	r0, #48	@ 0x30
10058350:	1c40      	adds	r0, r0, #1
10058352:	2206      	movs	r2, #6
10058354:	4621      	mov	r1, r4
10058356:	f7f7 fa75 	bl	1004f844 <BLEPLAT_MemCpy>
1005835a:	a826      	add	r0, sp, #152	@ 0x98
1005835c:	7685      	strb	r5, [r0, #26]
1005835e:	7607      	strb	r7, [r0, #24]
10058360:	991c      	ldr	r1, [sp, #112]	@ 0x70
10058362:	75c1      	strb	r1, [r0, #23]
10058364:	9914      	ldr	r1, [sp, #80]	@ 0x50
10058366:	8241      	strh	r1, [r0, #18]
10058368:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005836a:	8201      	strh	r1, [r0, #16]
1005836c:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005836e:	8181      	strh	r1, [r0, #12]
10058370:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
10058372:	81c1      	strh	r1, [r0, #14]
10058374:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10058376:	7b79      	ldrb	r1, [r7, #13]
10058378:	7641      	strb	r1, [r0, #25]
1005837a:	9426      	str	r4, [sp, #152]	@ 0x98
1005837c:	f7ff fa86 	bl	1005788c <llc_conn_push_connection_complete_event>
10058380:	7bf8      	ldrb	r0, [r7, #15]
10058382:	2800      	cmp	r0, #0
10058384:	d003      	beq.n	1005838e <llc_conn_go_to_connect+0x486>
10058386:	7ab9      	ldrb	r1, [r7, #10]
10058388:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005838a:	f7ff fa41 	bl	10057810 <llc_conn_push_adv_set_terminated_event>
1005838e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10058390:	7801      	ldrb	r1, [r0, #0]
10058392:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
10058394:	f7ff fbb0 	bl	10057af8 <llc_conn_push_csa_event>
10058398:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005839a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
1005839c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005839e:	f7ff f9df 	bl	10057760 <llc_conn_list_add_address>
100583a2:	7b7c      	ldrb	r4, [r7, #13]
100583a4:	7bbf      	ldrb	r7, [r7, #14]
100583a6:	4638      	mov	r0, r7
100583a8:	f7f8 fe4f 	bl	1005104a <BLEPLAT_CNTR_SmGetTxPwr>
100583ac:	9021      	str	r0, [sp, #132]	@ 0x84
100583ae:	4638      	mov	r0, r7
100583b0:	f7f8 fe60 	bl	10051074 <BLEPLAT_CNTR_SmInitTo0>
100583b4:	4638      	mov	r0, r7
100583b6:	9d22      	ldr	r5, [sp, #136]	@ 0x88
100583b8:	4629      	mov	r1, r5
100583ba:	f7f8 ffd8 	bl	1005136e <BLEPLAT_CNTR_SmSetTxPhy>
100583be:	4638      	mov	r0, r7
100583c0:	4629      	mov	r1, r5
100583c2:	f7f8 ff68 	bl	10051296 <BLEPLAT_CNTR_SmSetRxPhy>
100583c6:	4638      	mov	r0, r7
100583c8:	9918      	ldr	r1, [sp, #96]	@ 0x60
100583ca:	f7f8 fe83 	bl	100510d4 <BLEPLAT_CNTR_SmSetChannelMap>
100583ce:	4638      	mov	r0, r7
100583d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
100583d2:	f7f8 fe6d 	bl	100510b0 <BLEPLAT_CNTR_SmSetAccessAddr>
100583d6:	4638      	mov	r0, r7
100583d8:	991e      	ldr	r1, [sp, #120]	@ 0x78
100583da:	f7f8 fff2 	bl	100513c2 <BLEPLAT_CNTR_SmSetUnmappedChan>
100583de:	4638      	mov	r0, r7
100583e0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
100583e2:	f7f8 fecf 	bl	10051184 <BLEPLAT_CNTR_SmSetHopIncr>
100583e6:	4638      	mov	r0, r7
100583e8:	9916      	ldr	r1, [sp, #88]	@ 0x58
100583ea:	f7f8 fea4 	bl	10051136 <BLEPLAT_CNTR_SmSetCrcInit>
100583ee:	4638      	mov	r0, r7
100583f0:	4631      	mov	r1, r6
100583f2:	f7f8 ffaa 	bl	1005134a <BLEPLAT_CNTR_SmSetTxPacketPtr>
100583f6:	4635      	mov	r5, r6
100583f8:	3514      	adds	r5, #20
100583fa:	4638      	mov	r0, r7
100583fc:	4629      	mov	r1, r5
100583fe:	f7f8 ff38 	bl	10051272 <BLEPLAT_CNTR_SmSetRxPacketPtr>
10058402:	4638      	mov	r0, r7
10058404:	9921      	ldr	r1, [sp, #132]	@ 0x84
10058406:	f7f8 ffc7 	bl	10051398 <BLEPLAT_CNTR_SmSetTxPwr>
1005840a:	f7fe f95b 	bl	100566c4 <cte_csr_ucfg_weak>
1005840e:	2800      	cmp	r0, #0
10058410:	d102      	bne.n	10058418 <llc_conn_go_to_connect+0x510>
10058412:	4638      	mov	r0, r7
10058414:	f7f8 fcd2 	bl	10050dbc <BLEPLAT_CNTR_SmCteOff>
10058418:	4638      	mov	r0, r7
1005841a:	2c00      	cmp	r4, #0
1005841c:	d002      	beq.n	10058424 <llc_conn_go_to_connect+0x51c>
1005841e:	f7f8 ff19 	bl	10051254 <BLEPLAT_CNTR_SmSetRxMode>
10058422:	e001      	b.n	10058428 <llc_conn_go_to_connect+0x520>
10058424:	f7f8 ff82 	bl	1005132c <BLEPLAT_CNTR_SmSetTxMode>
10058428:	4634      	mov	r4, r6
1005842a:	3428      	adds	r4, #40	@ 0x28
1005842c:	f7fe f9a6 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10058430:	2801      	cmp	r0, #1
10058432:	d101      	bne.n	10058438 <llc_conn_go_to_connect+0x530>
10058434:	980a      	ldr	r0, [sp, #40]	@ 0x28
10058436:	e00c      	b.n	10058452 <llc_conn_go_to_connect+0x54a>
10058438:	f000 fbee 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005843c:	2801      	cmp	r0, #1
1005843e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10058440:	d007      	beq.n	10058452 <llc_conn_go_to_connect+0x54a>
10058442:	f000 fbdf 	bl	10058c04 <cis_csr_ucfg_weak>
10058446:	2801      	cmp	r0, #1
10058448:	d001      	beq.n	1005844e <llc_conn_go_to_connect+0x546>
1005844a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005844c:	e001      	b.n	10058452 <llc_conn_go_to_connect+0x54a>
1005844e:	981d      	ldr	r0, [sp, #116]	@ 0x74
10058450:	43c0      	mvns	r0, r0
10058452:	b2c1      	uxtb	r1, r0
10058454:	4638      	mov	r0, r7
10058456:	f7f8 fe80 	bl	1005115a <BLEPLAT_CNTR_SmSetDataLength>
1005845a:	4630      	mov	r0, r6
1005845c:	4621      	mov	r1, r4
1005845e:	463a      	mov	r2, r7
10058460:	f000 fa3c 	bl	100588dc <llc_conn_set_blue_packets>
10058464:	2100      	movs	r1, #0
10058466:	4628      	mov	r0, r5
10058468:	463a      	mov	r2, r7
1005846a:	f000 fa37 	bl	100588dc <llc_conn_set_blue_packets>
1005846e:	4630      	mov	r0, r6
10058470:	f7f8 fc83 	bl	10050d7a <BLEPLAT_CNTR_PacketSetTxReady>
10058474:	4628      	mov	r0, r5
10058476:	f7f8 fc3e 	bl	10050cf6 <BLEPLAT_CNTR_PacketSetRxReady>
1005847a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
1005847c:	7b81      	ldrb	r1, [r0, #14]
1005847e:	9122      	str	r1, [sp, #136]	@ 0x88
10058480:	7c40      	ldrb	r0, [r0, #17]
10058482:	4634      	mov	r4, r6
10058484:	3444      	adds	r4, #68	@ 0x44
10058486:	cc1c      	ldmia	r4, {r2, r3, r4}
10058488:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005848a:	788d      	ldrb	r5, [r1, #2]
1005848c:	78cf      	ldrb	r7, [r1, #3]
1005848e:	490f      	ldr	r1, [pc, #60]	@ (100584cc <__arm_cp.11_3>)
10058490:	9107      	str	r1, [sp, #28]
10058492:	490f      	ldr	r1, [pc, #60]	@ (100584d0 <__arm_cp.11_4>)
10058494:	9106      	str	r1, [sp, #24]
10058496:	490f      	ldr	r1, [pc, #60]	@ (100584d4 <__arm_cp.11_5>)
10058498:	9105      	str	r1, [sp, #20]
1005849a:	490f      	ldr	r1, [pc, #60]	@ (100584d8 <__arm_cp.11_6>)
1005849c:	9104      	str	r1, [sp, #16]
1005849e:	9703      	str	r7, [sp, #12]
100584a0:	9502      	str	r5, [sp, #8]
100584a2:	1ad1      	subs	r1, r2, r3
100584a4:	9101      	str	r1, [sp, #4]
100584a6:	9400      	str	r4, [sp, #0]
100584a8:	2800      	cmp	r0, #0
100584aa:	d001      	beq.n	100584b0 <llc_conn_go_to_connect+0x5a8>
100584ac:	4c0c      	ldr	r4, [pc, #48]	@ (100584e0 <__arm_cp.11_8>)
100584ae:	e000      	b.n	100584b2 <llc_conn_go_to_connect+0x5aa>
100584b0:	4c0a      	ldr	r4, [pc, #40]	@ (100584dc <__arm_cp.11_7>)
100584b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
100584b4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100584b6:	9822      	ldr	r0, [sp, #136]	@ 0x88
100584b8:	4631      	mov	r1, r6
100584ba:	47a0      	blx	r4
100584bc:	b02d      	add	sp, #180	@ 0xb4
100584be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100584c0 <__arm_cp.11_0>:
100584c0:	000004ff 	.word	0x000004ff

100584c4 <__arm_cp.11_1>:
100584c4:	0000f7fb 	.word	0x0000f7fb

100584c8 <__arm_cp.11_2>:
100584c8:	20000f20 	.word	0x20000f20

100584cc <__arm_cp.11_3>:
100584cc:	100624ff 	.word	0x100624ff

100584d0 <__arm_cp.11_4>:
100584d0:	1006268d 	.word	0x1006268d

100584d4 <__arm_cp.11_5>:
100584d4:	10062537 	.word	0x10062537

100584d8 <__arm_cp.11_6>:
100584d8:	100625c1 	.word	0x100625c1

100584dc <__arm_cp.11_7>:
100584dc:	1005d9ad 	.word	0x1005d9ad

100584e0 <__arm_cp.11_8>:
100584e0:	1005d549 	.word	0x1005d549

100584e4 <llc_conn_peripheral_roll_back_params>:
100584e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100584e6:	b089      	sub	sp, #36	@ 0x24
100584e8:	4604      	mov	r4, r0
100584ea:	2091      	movs	r0, #145	@ 0x91
100584ec:	0040      	lsls	r0, r0, #1
100584ee:	5a25      	ldrh	r5, [r4, r0]
100584f0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
100584f2:	26ff      	movs	r6, #255	@ 0xff
100584f4:	3608      	adds	r6, #8
100584f6:	f7f7 fa70 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
100584fa:	5da1      	ldrb	r1, [r4, r6]
100584fc:	22fe      	movs	r2, #254	@ 0xfe
100584fe:	400a      	ands	r2, r1
10058500:	55a2      	strb	r2, [r4, r6]
10058502:	2135      	movs	r1, #53	@ 0x35
10058504:	0109      	lsls	r1, r1, #4
10058506:	1846      	adds	r6, r0, r1
10058508:	437d      	muls	r5, r7
1005850a:	0068      	lsls	r0, r5, #1
1005850c:	1830      	adds	r0, r6, r0
1005850e:	f3ef 8110 	mrs	r1, PRIMASK
10058512:	b672      	cpsid	i
10058514:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10058516:	43c9      	mvns	r1, r1
10058518:	1840      	adds	r0, r0, r1
1005851a:	d400      	bmi.n	1005851e <llc_conn_peripheral_roll_back_params+0x3a>
1005851c:	e089      	b.n	10058632 <llc_conn_peripheral_roll_back_params+0x14e>
1005851e:	2083      	movs	r0, #131	@ 0x83
10058520:	0040      	lsls	r0, r0, #1
10058522:	1820      	adds	r0, r4, r0
10058524:	9008      	str	r0, [sp, #32]
10058526:	4630      	mov	r0, r6
10058528:	f005 f84a 	bl	1005d5c0 <LL_sched_is_scheduler_call_pending>
1005852c:	2800      	cmp	r0, #0
1005852e:	d004      	beq.n	1005853a <llc_conn_peripheral_roll_back_params+0x56>
10058530:	4941      	ldr	r1, [pc, #260]	@ (10058638 <__arm_cp.14_0>)
10058532:	6809      	ldr	r1, [r1, #0]
10058534:	7bc9      	ldrb	r1, [r1, #15]
10058536:	2903      	cmp	r1, #3
10058538:	d171      	bne.n	1005861e <llc_conn_peripheral_roll_back_params+0x13a>
1005853a:	9706      	str	r7, [sp, #24]
1005853c:	9004      	str	r0, [sp, #16]
1005853e:	4620      	mov	r0, r4
10058540:	3031      	adds	r0, #49	@ 0x31
10058542:	9007      	str	r0, [sp, #28]
10058544:	4620      	mov	r0, r4
10058546:	3042      	adds	r0, #66	@ 0x42
10058548:	9005      	str	r0, [sp, #20]
1005854a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005854c:	1b80      	subs	r0, r0, r6
1005854e:	2700      	movs	r7, #0
10058550:	2108      	movs	r1, #8
10058552:	b24a      	sxtb	r2, r1
10058554:	2a00      	cmp	r2, #0
10058556:	d40c      	bmi.n	10058572 <llc_conn_peripheral_roll_back_params+0x8e>
10058558:	b2cb      	uxtb	r3, r1
1005855a:	462a      	mov	r2, r5
1005855c:	409a      	lsls	r2, r3
1005855e:	4290      	cmp	r0, r2
10058560:	d302      	bcc.n	10058568 <llc_conn_peripheral_roll_back_params+0x84>
10058562:	2601      	movs	r6, #1
10058564:	409e      	lsls	r6, r3
10058566:	19bf      	adds	r7, r7, r6
10058568:	1a82      	subs	r2, r0, r2
1005856a:	d300      	bcc.n	1005856e <llc_conn_peripheral_roll_back_params+0x8a>
1005856c:	4610      	mov	r0, r2
1005856e:	1e49      	subs	r1, r1, #1
10058570:	e7ef      	b.n	10058552 <llc_conn_peripheral_roll_back_params+0x6e>
10058572:	9908      	ldr	r1, [sp, #32]
10058574:	8b88      	ldrh	r0, [r1, #28]
10058576:	4347      	muls	r7, r0
10058578:	9a05      	ldr	r2, [sp, #20]
1005857a:	8810      	ldrh	r0, [r2, #0]
1005857c:	1bc0      	subs	r0, r0, r7
1005857e:	8010      	strh	r0, [r2, #0]
10058580:	b2be      	uxth	r6, r7
10058582:	9d07      	ldr	r5, [sp, #28]
10058584:	7c28      	ldrb	r0, [r5, #16]
10058586:	7809      	ldrb	r1, [r1, #0]
10058588:	2901      	cmp	r1, #1
1005858a:	d10f      	bne.n	100585ac <llc_conn_peripheral_roll_back_params+0xc8>
1005858c:	4617      	mov	r7, r2
1005858e:	f7f8 fc66 	bl	10050e5e <BLEPLAT_CNTR_SmGetAccessAddr>
10058592:	883f      	ldrh	r7, [r7, #0]
10058594:	7c2a      	ldrb	r2, [r5, #16]
10058596:	2300      	movs	r3, #0
10058598:	9300      	str	r3, [sp, #0]
1005859a:	9001      	str	r0, [sp, #4]
1005859c:	9302      	str	r3, [sp, #8]
1005859e:	4621      	mov	r1, r4
100585a0:	31e0      	adds	r1, #224	@ 0xe0
100585a2:	4610      	mov	r0, r2
100585a4:	463a      	mov	r2, r7
100585a6:	f000 fa1e 	bl	100589e6 <llc_mngm_csa2_select_channel_for_task>
100585aa:	e010      	b.n	100585ce <llc_conn_peripheral_roll_back_params+0xea>
100585ac:	f7f8 fcce 	bl	10050f4c <BLEPLAT_CNTR_SmGetHopIncr>
100585b0:	2125      	movs	r1, #37	@ 0x25
100585b2:	1a08      	subs	r0, r1, r0
100585b4:	9008      	str	r0, [sp, #32]
100585b6:	4347      	muls	r7, r0
100585b8:	7828      	ldrb	r0, [r5, #0]
100585ba:	1838      	adds	r0, r7, r0
100585bc:	b280      	uxth	r0, r0
100585be:	f000 f9e7 	bl	10058990 <llc_mngm_mod_37>
100585c2:	7028      	strb	r0, [r5, #0]
100585c4:	9908      	ldr	r1, [sp, #32]
100585c6:	1808      	adds	r0, r1, r0
100585c8:	b280      	uxth	r0, r0
100585ca:	f000 f9e1 	bl	10058990 <llc_mngm_mod_37>
100585ce:	4601      	mov	r1, r0
100585d0:	462f      	mov	r7, r5
100585d2:	7c28      	ldrb	r0, [r5, #16]
100585d4:	f7f8 fef5 	bl	100513c2 <BLEPLAT_CNTR_SmSetUnmappedChan>
100585d8:	9806      	ldr	r0, [sp, #24]
100585da:	4346      	muls	r6, r0
100585dc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
100585de:	1b80      	subs	r0, r0, r6
100585e0:	6460      	str	r0, [r4, #68]	@ 0x44
100585e2:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
100585e4:	4631      	mov	r1, r6
100585e6:	f004 fd05 	bl	1005cff4 <LL_link_calculate_window_widening_from_ppm>
100585ea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
100585ec:	4282      	cmp	r2, r0
100585ee:	d904      	bls.n	100585fa <llc_conn_peripheral_roll_back_params+0x116>
100585f0:	1a12      	subs	r2, r2, r0
100585f2:	2a0d      	cmp	r2, #13
100585f4:	d800      	bhi.n	100585f8 <llc_conn_peripheral_roll_back_params+0x114>
100585f6:	220d      	movs	r2, #13
100585f8:	64a2      	str	r2, [r4, #72]	@ 0x48
100585fa:	9d04      	ldr	r5, [sp, #16]
100585fc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
100585fe:	1980      	adds	r0, r0, r6
10058600:	6660      	str	r0, [r4, #100]	@ 0x64
10058602:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10058604:	0051      	lsls	r1, r2, #1
10058606:	1809      	adds	r1, r1, r0
10058608:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005860a:	1a82      	subs	r2, r0, r2
1005860c:	7c38      	ldrb	r0, [r7, #16]
1005860e:	f004 ff7f 	bl	1005d510 <LL_sched_set_taskslot_length_anchor>
10058612:	2d00      	cmp	r5, #0
10058614:	d10d      	bne.n	10058632 <llc_conn_peripheral_roll_back_params+0x14e>
10058616:	7c38      	ldrb	r0, [r7, #16]
10058618:	f004 fff4 	bl	1005d604 <LL_sched_engine>
1005861c:	e009      	b.n	10058632 <llc_conn_peripheral_roll_back_params+0x14e>
1005861e:	9a08      	ldr	r2, [sp, #32]
10058620:	7850      	ldrb	r0, [r2, #1]
10058622:	2101      	movs	r1, #1
10058624:	4301      	orrs	r1, r0
10058626:	7051      	strb	r1, [r2, #1]
10058628:	2013      	movs	r0, #19
1005862a:	f007 f9a1 	bl	1005f970 <tsk_notify_idx>
1005862e:	f7f6 fb48 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10058632:	b662      	cpsie	i
10058634:	b009      	add	sp, #36	@ 0x24
10058636:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058638 <__arm_cp.14_0>:
10058638:	20000f24 	.word	0x20000f24

1005863c <llc_conn_reserve_conn_idx>:
1005863c:	b510      	push	{r4, lr}
1005863e:	2400      	movs	r4, #0
10058640:	4620      	mov	r0, r4
10058642:	f7fe fd71 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058646:	490a      	ldr	r1, [pc, #40]	@ (10058670 <__arm_cp.15_0>)
10058648:	6809      	ldr	r1, [r1, #0]
1005864a:	2234      	movs	r2, #52	@ 0x34
1005864c:	5c89      	ldrb	r1, [r1, r2]
1005864e:	302c      	adds	r0, #44	@ 0x2c
10058650:	42a1      	cmp	r1, r4
10058652:	d007      	beq.n	10058664 <llc_conn_reserve_conn_idx+0x28>
10058654:	7802      	ldrb	r2, [r0, #0]
10058656:	2a00      	cmp	r2, #0
10058658:	d006      	beq.n	10058668 <llc_conn_reserve_conn_idx+0x2c>
1005865a:	224d      	movs	r2, #77	@ 0x4d
1005865c:	0092      	lsls	r2, r2, #2
1005865e:	1880      	adds	r0, r0, r2
10058660:	1c64      	adds	r4, r4, #1
10058662:	e7f5      	b.n	10058650 <llc_conn_reserve_conn_idx+0x14>
10058664:	24ff      	movs	r4, #255	@ 0xff
10058666:	e001      	b.n	1005866c <llc_conn_reserve_conn_idx+0x30>
10058668:	2101      	movs	r1, #1
1005866a:	7001      	strb	r1, [r0, #0]
1005866c:	b2e0      	uxtb	r0, r4
1005866e:	bd10      	pop	{r4, pc}

10058670 <__arm_cp.15_0>:
10058670:	20000ecc 	.word	0x20000ecc

10058674 <llc_conn_send_acl_data>:
10058674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058676:	4606      	mov	r6, r0
10058678:	8800      	ldrh	r0, [r0, #0]
1005867a:	f7fe fd63 	bl	10057144 <llc_conn_get_cntxt_per_p_from_handle>
1005867e:	2800      	cmp	r0, #0
10058680:	d012      	beq.n	100586a8 <llc_conn_send_acl_data+0x34>
10058682:	4604      	mov	r4, r0
10058684:	4607      	mov	r7, r0
10058686:	372c      	adds	r7, #44	@ 0x2c
10058688:	f3ef 8010 	mrs	r0, PRIMASK
1005868c:	b672      	cpsid	i
1005868e:	463d      	mov	r5, r7
10058690:	3554      	adds	r5, #84	@ 0x54
10058692:	4628      	mov	r0, r5
10058694:	4631      	mov	r1, r6
10058696:	f007 fb61 	bl	1005fd5c <ACL_list_insert_tail>
1005869a:	7838      	ldrb	r0, [r7, #0]
1005869c:	2803      	cmp	r0, #3
1005869e:	d105      	bne.n	100586ac <llc_conn_send_acl_data+0x38>
100586a0:	4620      	mov	r0, r4
100586a2:	f7ff ff1f 	bl	100584e4 <llc_conn_peripheral_roll_back_params>
100586a6:	e01a      	b.n	100586de <llc_conn_send_acl_data+0x6a>
100586a8:	2002      	movs	r0, #2
100586aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100586ac:	7d78      	ldrb	r0, [r7, #21]
100586ae:	4e28      	ldr	r6, [pc, #160]	@ (10058750 <__arm_cp.16_0>)
100586b0:	6831      	ldr	r1, [r6, #0]
100586b2:	7b49      	ldrb	r1, [r1, #13]
100586b4:	4288      	cmp	r0, r1
100586b6:	d112      	bne.n	100586de <llc_conn_send_acl_data+0x6a>
100586b8:	f7f7 f98f 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
100586bc:	6831      	ldr	r1, [r6, #0]
100586be:	6809      	ldr	r1, [r1, #0]
100586c0:	43c9      	mvns	r1, r1
100586c2:	1840      	adds	r0, r0, r1
100586c4:	2101      	movs	r1, #1
100586c6:	0289      	lsls	r1, r1, #10
100586c8:	1840      	adds	r0, r0, r1
100586ca:	d508      	bpl.n	100586de <llc_conn_send_acl_data+0x6a>
100586cc:	205c      	movs	r0, #92	@ 0x5c
100586ce:	5c38      	ldrb	r0, [r7, r0]
100586d0:	0640      	lsls	r0, r0, #25
100586d2:	d404      	bmi.n	100586de <llc_conn_send_acl_data+0x6a>
100586d4:	4620      	mov	r0, r4
100586d6:	f7fe ffe4 	bl	100576a2 <llc_conn_get_tx_acl_blocked>
100586da:	2800      	cmp	r0, #0
100586dc:	d002      	beq.n	100586e4 <llc_conn_send_acl_data+0x70>
100586de:	b662      	cpsie	i
100586e0:	2084      	movs	r0, #132	@ 0x84
100586e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100586e4:	4620      	mov	r0, r4
100586e6:	f7f8 fa12 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
100586ea:	4606      	mov	r6, r0
100586ec:	4620      	mov	r0, r4
100586ee:	3028      	adds	r0, #40	@ 0x28
100586f0:	4286      	cmp	r6, r0
100586f2:	d00a      	beq.n	1005870a <llc_conn_send_acl_data+0x96>
100586f4:	2101      	movs	r1, #1
100586f6:	4620      	mov	r0, r4
100586f8:	f7fe ffac 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
100586fc:	4286      	cmp	r6, r0
100586fe:	d0ee      	beq.n	100586de <llc_conn_send_acl_data+0x6a>
10058700:	7830      	ldrb	r0, [r6, #0]
10058702:	2110      	movs	r1, #16
10058704:	4301      	orrs	r1, r0
10058706:	7031      	strb	r1, [r6, #0]
10058708:	e7e9      	b.n	100586de <llc_conn_send_acl_data+0x6a>
1005870a:	4812      	ldr	r0, [pc, #72]	@ (10058754 <__arm_cp.16_1>)
1005870c:	6800      	ldr	r0, [r0, #0]
1005870e:	218c      	movs	r1, #140	@ 0x8c
10058710:	5840      	ldr	r0, [r0, r1]
10058712:	682e      	ldr	r6, [r5, #0]
10058714:	8a31      	ldrh	r1, [r6, #16]
10058716:	89f2      	ldrh	r2, [r6, #14]
10058718:	1851      	adds	r1, r2, r1
1005871a:	221f      	movs	r2, #31
1005871c:	400a      	ands	r2, r1
1005871e:	1817      	adds	r7, r2, r0
10058720:	1cbd      	adds	r5, r7, #2
10058722:	4620      	mov	r0, r4
10058724:	4629      	mov	r1, r5
10058726:	f7f8 fa34 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
1005872a:	4620      	mov	r0, r4
1005872c:	4631      	mov	r1, r6
1005872e:	f7fe fee5 	bl	100574fc <llc_conn_copy_tx_data_packet>
10058732:	67e6      	str	r6, [r4, #124]	@ 0x7c
10058734:	78f8      	ldrb	r0, [r7, #3]
10058736:	2800      	cmp	r0, #0
10058738:	d0d1      	beq.n	100586de <llc_conn_send_acl_data+0x6a>
1005873a:	2101      	movs	r1, #1
1005873c:	4620      	mov	r0, r4
1005873e:	f7fe ff8f 	bl	10057660 <llc_conn_get_enc_on>
10058742:	2801      	cmp	r0, #1
10058744:	d1cb      	bne.n	100586de <llc_conn_send_acl_data+0x6a>
10058746:	7868      	ldrb	r0, [r5, #1]
10058748:	1d00      	adds	r0, r0, #4
1005874a:	7068      	strb	r0, [r5, #1]
1005874c:	e7c7      	b.n	100586de <llc_conn_send_acl_data+0x6a>
1005874e:	46c0      	nop			@ (mov r8, r8)

10058750 <__arm_cp.16_0>:
10058750:	20000f24 	.word	0x20000f24

10058754 <__arm_cp.16_1>:
10058754:	20000f20 	.word	0x20000f20

10058758 <llc_conn_set_taskslot_params>:
10058758:	b5f0      	push	{r4, r5, r6, r7, lr}
1005875a:	b085      	sub	sp, #20
1005875c:	460f      	mov	r7, r1
1005875e:	4604      	mov	r4, r0
10058760:	2041      	movs	r0, #65	@ 0x41
10058762:	5c20      	ldrb	r0, [r4, r0]
10058764:	2183      	movs	r1, #131	@ 0x83
10058766:	0049      	lsls	r1, r1, #1
10058768:	5c61      	ldrb	r1, [r4, r1]
1005876a:	4625      	mov	r5, r4
1005876c:	352c      	adds	r5, #44	@ 0x2c
1005876e:	2901      	cmp	r1, #1
10058770:	d10d      	bne.n	1005878e <llc_conn_set_taskslot_params+0x36>
10058772:	f7f8 fb74 	bl	10050e5e <BLEPLAT_CNTR_SmGetAccessAddr>
10058776:	8aea      	ldrh	r2, [r5, #22]
10058778:	7d6e      	ldrb	r6, [r5, #21]
1005877a:	2300      	movs	r3, #0
1005877c:	9300      	str	r3, [sp, #0]
1005877e:	9001      	str	r0, [sp, #4]
10058780:	9302      	str	r3, [sp, #8]
10058782:	4621      	mov	r1, r4
10058784:	31e0      	adds	r1, #224	@ 0xe0
10058786:	4630      	mov	r0, r6
10058788:	f000 f92d 	bl	100589e6 <llc_mngm_csa2_select_channel_for_task>
1005878c:	e010      	b.n	100587b0 <llc_conn_set_taskslot_params+0x58>
1005878e:	4616      	mov	r6, r2
10058790:	f7f8 fbdc 	bl	10050f4c <BLEPLAT_CNTR_SmGetHopIncr>
10058794:	9704      	str	r7, [sp, #16]
10058796:	4607      	mov	r7, r0
10058798:	4346      	muls	r6, r0
1005879a:	7968      	ldrb	r0, [r5, #5]
1005879c:	1836      	adds	r6, r6, r0
1005879e:	b2b0      	uxth	r0, r6
100587a0:	f000 f8f6 	bl	10058990 <llc_mngm_mod_37>
100587a4:	7168      	strb	r0, [r5, #5]
100587a6:	1bf0      	subs	r0, r6, r7
100587a8:	9f04      	ldr	r7, [sp, #16]
100587aa:	b280      	uxth	r0, r0
100587ac:	f000 f8f0 	bl	10058990 <llc_mngm_mod_37>
100587b0:	4601      	mov	r1, r0
100587b2:	7d68      	ldrb	r0, [r5, #21]
100587b4:	f7f8 fe05 	bl	100513c2 <BLEPLAT_CNTR_SmSetUnmappedChan>
100587b8:	7828      	ldrb	r0, [r5, #0]
100587ba:	2802      	cmp	r0, #2
100587bc:	d10c      	bne.n	100587d8 <llc_conn_set_taskslot_params+0x80>
100587be:	4620      	mov	r0, r4
100587c0:	f7f8 fa8c 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
100587c4:	4620      	mov	r0, r4
100587c6:	f7f8 f9f3 	bl	10050bb0 <BLEPLAT_CNTR_PacketSetIncChan>
100587ca:	7d68      	ldrb	r0, [r5, #21]
100587cc:	f7f8 fdae 	bl	1005132c <BLEPLAT_CNTR_SmSetTxMode>
100587d0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
100587d2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
100587d4:	7d68      	ldrb	r0, [r5, #21]
100587d6:	e02d      	b.n	10058834 <llc_conn_set_taskslot_params+0xdc>
100587d8:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
100587da:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
100587dc:	4639      	mov	r1, r7
100587de:	f004 fc09 	bl	1005cff4 <LL_link_calculate_window_widening_from_ppm>
100587e2:	1980      	adds	r0, r0, r6
100587e4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
100587e6:	2900      	cmp	r1, #0
100587e8:	d100      	bne.n	100587ec <llc_conn_set_taskslot_params+0x94>
100587ea:	300d      	adds	r0, #13
100587ec:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
100587ee:	0849      	lsrs	r1, r1, #1
100587f0:	393e      	subs	r1, #62	@ 0x3e
100587f2:	4288      	cmp	r0, r1
100587f4:	d901      	bls.n	100587fa <llc_conn_set_taskslot_params+0xa2>
100587f6:	2008      	movs	r0, #8
100587f8:	e022      	b.n	10058840 <llc_conn_set_taskslot_params+0xe8>
100587fa:	64a0      	str	r0, [r4, #72]	@ 0x48
100587fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
100587fe:	0040      	lsls	r0, r0, #1
10058800:	2900      	cmp	r1, #0
10058802:	d001      	beq.n	10058808 <llc_conn_set_taskslot_params+0xb0>
10058804:	180f      	adds	r7, r1, r0
10058806:	e005      	b.n	10058814 <llc_conn_set_taskslot_params+0xbc>
10058808:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005880a:	1808      	adds	r0, r1, r0
1005880c:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1005880e:	42b8      	cmp	r0, r7
10058810:	d800      	bhi.n	10058814 <llc_conn_set_taskslot_params+0xbc>
10058812:	4607      	mov	r7, r0
10058814:	4626      	mov	r6, r4
10058816:	3614      	adds	r6, #20
10058818:	4630      	mov	r0, r6
1005881a:	f7f8 fa5f 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
1005881e:	4630      	mov	r0, r6
10058820:	f7f8 f9c6 	bl	10050bb0 <BLEPLAT_CNTR_PacketSetIncChan>
10058824:	7d68      	ldrb	r0, [r5, #21]
10058826:	f7f8 fd15 	bl	10051254 <BLEPLAT_CNTR_SmSetRxMode>
1005882a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005882c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005882e:	1a42      	subs	r2, r0, r1
10058830:	7d68      	ldrb	r0, [r5, #21]
10058832:	4639      	mov	r1, r7
10058834:	f004 fe6c 	bl	1005d510 <LL_sched_set_taskslot_length_anchor>
10058838:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
1005883a:	1c40      	adds	r0, r0, #1
1005883c:	8660      	strh	r0, [r4, #50]	@ 0x32
1005883e:	2000      	movs	r0, #0
10058840:	b005      	add	sp, #20
10058842:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058844 <llc_conn_update_receive_window>:
10058844:	b570      	push	{r4, r5, r6, lr}
10058846:	4604      	mov	r4, r0
10058848:	4606      	mov	r6, r0
1005884a:	362c      	adds	r6, #44	@ 0x2c
1005884c:	4605      	mov	r5, r0
1005884e:	35d0      	adds	r5, #208	@ 0xd0
10058850:	f7f3 fab4 	bl	1004bdbc <phy_upd_csr_ucfg>
10058854:	2801      	cmp	r0, #1
10058856:	d10b      	bne.n	10058870 <llc_conn_update_receive_window+0x2c>
10058858:	7930      	ldrb	r0, [r6, #4]
1005885a:	210e      	movs	r1, #14
1005885c:	4341      	muls	r1, r0
1005885e:	480e      	ldr	r0, [pc, #56]	@ (10058898 <__arm_cp.18_0>)
10058860:	6800      	ldr	r0, [r0, #0]
10058862:	229c      	movs	r2, #156	@ 0x9c
10058864:	5880      	ldr	r0, [r0, r2]
10058866:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058868:	6940      	ldr	r0, [r0, #20]
1005886a:	1840      	adds	r0, r0, r1
1005886c:	79c0      	ldrb	r0, [r0, #7]
1005886e:	e000      	b.n	10058872 <llc_conn_update_receive_window+0x2e>
10058870:	2001      	movs	r0, #1
10058872:	f7f8 fdca 	bl	1005140a <BLEPLAT_CNTR_DemodDelaySt>
10058876:	4909      	ldr	r1, [pc, #36]	@ (1005889c <__arm_cp.18_1>)
10058878:	4348      	muls	r0, r1
1005887a:	0a00      	lsrs	r0, r0, #8
1005887c:	3010      	adds	r0, #16
1005887e:	6028      	str	r0, [r5, #0]
10058880:	7832      	ldrb	r2, [r6, #0]
10058882:	2a03      	cmp	r2, #3
10058884:	d107      	bne.n	10058896 <llc_conn_update_receive_window+0x52>
10058886:	6b62      	ldr	r2, [r4, #52]	@ 0x34
10058888:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005888a:	005b      	lsls	r3, r3, #1
1005888c:	189a      	adds	r2, r3, r2
1005888e:	4351      	muls	r1, r2
10058890:	0a09      	lsrs	r1, r1, #8
10058892:	1808      	adds	r0, r1, r0
10058894:	6028      	str	r0, [r5, #0]
10058896:	bd70      	pop	{r4, r5, r6, pc}

10058898 <__arm_cp.18_0>:
10058898:	20000f20 	.word	0x20000f20

1005889c <__arm_cp.18_1>:
1005889c:	00000271 	.word	0x00000271

100588a0 <llc_conn_peripheral_roll_back_params_tsk>:
100588a0:	b570      	push	{r4, r5, r6, lr}
100588a2:	2400      	movs	r4, #0
100588a4:	4620      	mov	r0, r4
100588a6:	f7fe fc3f 	bl	10057128 <llc_conn_get_cntxt_per_p>
100588aa:	4605      	mov	r5, r0
100588ac:	4e0a      	ldr	r6, [pc, #40]	@ (100588d8 <__arm_cp.20_0>)
100588ae:	6830      	ldr	r0, [r6, #0]
100588b0:	2134      	movs	r1, #52	@ 0x34
100588b2:	5c41      	ldrb	r1, [r0, r1]
100588b4:	428c      	cmp	r4, r1
100588b6:	d20d      	bcs.n	100588d4 <llc_conn_peripheral_roll_back_params_tsk+0x34>
100588b8:	21ff      	movs	r1, #255	@ 0xff
100588ba:	3108      	adds	r1, #8
100588bc:	5c69      	ldrb	r1, [r5, r1]
100588be:	07c9      	lsls	r1, r1, #31
100588c0:	d003      	beq.n	100588ca <llc_conn_peripheral_roll_back_params_tsk+0x2a>
100588c2:	4628      	mov	r0, r5
100588c4:	f7ff fe0e 	bl	100584e4 <llc_conn_peripheral_roll_back_params>
100588c8:	6830      	ldr	r0, [r6, #0]
100588ca:	214d      	movs	r1, #77	@ 0x4d
100588cc:	0089      	lsls	r1, r1, #2
100588ce:	186d      	adds	r5, r5, r1
100588d0:	1c64      	adds	r4, r4, #1
100588d2:	e7ed      	b.n	100588b0 <llc_conn_peripheral_roll_back_params_tsk+0x10>
100588d4:	bd70      	pop	{r4, r5, r6, pc}
100588d6:	46c0      	nop			@ (mov r8, r8)

100588d8 <__arm_cp.20_0>:
100588d8:	20000ecc 	.word	0x20000ecc

100588dc <llc_conn_set_blue_packets>:
100588dc:	b570      	push	{r4, r5, r6, lr}
100588de:	4616      	mov	r6, r2
100588e0:	460d      	mov	r5, r1
100588e2:	4604      	mov	r4, r0
100588e4:	f7f8 f920 	bl	10050b28 <BLEPLAT_CNTR_PacketInitTo0>
100588e8:	4620      	mov	r0, r4
100588ea:	f7f8 f938 	bl	10050b5e <BLEPLAT_CNTR_PacketSetCrcinitSel>
100588ee:	4620      	mov	r0, r4
100588f0:	f7f8 f976 	bl	10050be0 <BLEPLAT_CNTR_PacketSetIntDone>
100588f4:	4620      	mov	r0, r4
100588f6:	4621      	mov	r1, r4
100588f8:	f7f8 f9b0 	bl	10050c5c <BLEPLAT_CNTR_PacketSetNextPtr>
100588fc:	4620      	mov	r0, r4
100588fe:	f7f8 f9e1 	bl	10050cc4 <BLEPLAT_CNTR_PacketSetNsEn>
10058902:	4620      	mov	r0, r4
10058904:	4631      	mov	r1, r6
10058906:	f7f8 f9c5 	bl	10050c94 <BLEPLAT_CNTR_PacketSetNextSlot>
1005890a:	4620      	mov	r0, r4
1005890c:	f7f8 fa0f 	bl	10050d2e <BLEPLAT_CNTR_PacketSetTimer2Active>
10058910:	4620      	mov	r0, r4
10058912:	f7f8 f9e3 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
10058916:	4620      	mov	r0, r4
10058918:	f7f8 f94a 	bl	10050bb0 <BLEPLAT_CNTR_PacketSetIncChan>
1005891c:	4620      	mov	r0, r4
1005891e:	f7f8 f990 	bl	10050c42 <BLEPLAT_CNTR_PacketSetKeepsemareq>
10058922:	2d00      	cmp	r5, #0
10058924:	d00d      	beq.n	10058942 <llc_conn_set_blue_packets+0x66>
10058926:	2094      	movs	r0, #148	@ 0x94
10058928:	2100      	movs	r1, #0
1005892a:	460a      	mov	r2, r1
1005892c:	f7f7 ff8a 	bl	10050844 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
10058930:	4601      	mov	r1, r0
10058932:	4620      	mov	r0, r4
10058934:	f7f8 f9ec 	bl	10050d10 <BLEPLAT_CNTR_PacketSetTimeout>
10058938:	4620      	mov	r0, r4
1005893a:	4629      	mov	r1, r5
1005893c:	f7f8 f929 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
10058940:	bd70      	pop	{r4, r5, r6, pc}
10058942:	4812      	ldr	r0, [pc, #72]	@ (1005898c <__arm_cp.21_0>)
10058944:	6800      	ldr	r0, [r0, #0]
10058946:	2190      	movs	r1, #144	@ 0x90
10058948:	5845      	ldr	r5, [r0, r1]
1005894a:	2096      	movs	r0, #150	@ 0x96
1005894c:	2101      	movs	r1, #1
1005894e:	2200      	movs	r2, #0
10058950:	f7f7 ff78 	bl	10050844 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
10058954:	4601      	mov	r1, r0
10058956:	4620      	mov	r0, r4
10058958:	f7f8 f9da 	bl	10050d10 <BLEPLAT_CNTR_PacketSetTimeout>
1005895c:	4620      	mov	r0, r4
1005895e:	f7f8 f94b 	bl	10050bf8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
10058962:	4620      	mov	r0, r4
10058964:	f7f8 f960 	bl	10050c28 <BLEPLAT_CNTR_PacketSetIntTxOk>
10058968:	4620      	mov	r0, r4
1005896a:	f7f8 f951 	bl	10050c10 <BLEPLAT_CNTR_PacketSetIntTimeout>
1005896e:	4620      	mov	r0, r4
10058970:	f7f8 f92a 	bl	10050bc8 <BLEPLAT_CNTR_PacketSetIntCrcErr>
10058974:	1ca9      	adds	r1, r5, #2
10058976:	4620      	mov	r0, r4
10058978:	f7f8 f90b 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
1005897c:	4620      	mov	r0, r4
1005897e:	f7f8 f994 	bl	10050caa <BLEPLAT_CNTR_PacketSetNextTxMode>
10058982:	4620      	mov	r0, r4
10058984:	f7f8 f9ec 	bl	10050d60 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
10058988:	bd70      	pop	{r4, r5, r6, pc}
1005898a:	46c0      	nop			@ (mov r8, r8)

1005898c <__arm_cp.21_0>:
1005898c:	20000f20 	.word	0x20000f20

10058990 <llc_mngm_mod_37>:
10058990:	4906      	ldr	r1, [pc, #24]	@ (100589ac <__arm_cp.0_0>)
10058992:	4341      	muls	r1, r0
10058994:	0c09      	lsrs	r1, r1, #16
10058996:	2224      	movs	r2, #36	@ 0x24
10058998:	43d2      	mvns	r2, r2
1005899a:	434a      	muls	r2, r1
1005899c:	1810      	adds	r0, r2, r0
1005899e:	b281      	uxth	r1, r0
100589a0:	2924      	cmp	r1, #36	@ 0x24
100589a2:	d900      	bls.n	100589a6 <llc_mngm_mod_37+0x16>
100589a4:	3825      	subs	r0, #37	@ 0x25
100589a6:	b2c0      	uxtb	r0, r0
100589a8:	4770      	bx	lr
100589aa:	46c0      	nop			@ (mov r8, r8)

100589ac <__arm_cp.0_0>:
100589ac:	000006eb 	.word	0x000006eb

100589b0 <llc_mngm_csa2_update_remapping_table>:
100589b0:	b570      	push	{r4, r5, r6, lr}
100589b2:	460d      	mov	r5, r1
100589b4:	4604      	mov	r4, r0
100589b6:	1c40      	adds	r0, r0, #1
100589b8:	2600      	movs	r6, #0
100589ba:	2225      	movs	r2, #37	@ 0x25
100589bc:	4631      	mov	r1, r6
100589be:	f7f6 ff51 	bl	1004f864 <BLEPLAT_MemSet>
100589c2:	4630      	mov	r0, r6
100589c4:	2e25      	cmp	r6, #37	@ 0x25
100589c6:	d20c      	bcs.n	100589e2 <llc_mngm_csa2_update_remapping_table+0x32>
100589c8:	2107      	movs	r1, #7
100589ca:	4031      	ands	r1, r6
100589cc:	08f2      	lsrs	r2, r6, #3
100589ce:	5caa      	ldrb	r2, [r5, r2]
100589d0:	40ca      	lsrs	r2, r1
100589d2:	07d1      	lsls	r1, r2, #31
100589d4:	d003      	beq.n	100589de <llc_mngm_csa2_update_remapping_table+0x2e>
100589d6:	b2c1      	uxtb	r1, r0
100589d8:	1861      	adds	r1, r4, r1
100589da:	704e      	strb	r6, [r1, #1]
100589dc:	1c40      	adds	r0, r0, #1
100589de:	1c76      	adds	r6, r6, #1
100589e0:	e7f0      	b.n	100589c4 <llc_mngm_csa2_update_remapping_table+0x14>
100589e2:	7020      	strb	r0, [r4, #0]
100589e4:	bd70      	pop	{r4, r5, r6, pc}

100589e6 <llc_mngm_csa2_select_channel_for_task>:
100589e6:	b5f0      	push	{r4, r5, r6, r7, lr}
100589e8:	b08b      	sub	sp, #44	@ 0x2c
100589ea:	9305      	str	r3, [sp, #20]
100589ec:	4617      	mov	r7, r2
100589ee:	460d      	mov	r5, r1
100589f0:	a909      	add	r1, sp, #36	@ 0x24
100589f2:	f7f8 fa44 	bl	10050e7e <BLEPLAT_CNTR_SmGetChannelMap>
100589f6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
100589f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
100589fa:	9006      	str	r0, [sp, #24]
100589fc:	2800      	cmp	r0, #0
100589fe:	d018      	beq.n	10058a32 <llc_mngm_csa2_select_channel_for_task+0x4c>
10058a00:	9504      	str	r5, [sp, #16]
10058a02:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10058a04:	2500      	movs	r5, #0
10058a06:	9806      	ldr	r0, [sp, #24]
10058a08:	42a8      	cmp	r0, r5
10058a0a:	d010      	beq.n	10058a2e <llc_mngm_csa2_select_channel_for_task+0x48>
10058a0c:	9804      	ldr	r0, [sp, #16]
10058a0e:	9003      	str	r0, [sp, #12]
10058a10:	a809      	add	r0, sp, #36	@ 0x24
10058a12:	9002      	str	r0, [sp, #8]
10058a14:	a808      	add	r0, sp, #32
10058a16:	9001      	str	r0, [sp, #4]
10058a18:	a807      	add	r0, sp, #28
10058a1a:	9000      	str	r0, [sp, #0]
10058a1c:	b2eb      	uxtb	r3, r5
10058a1e:	4620      	mov	r0, r4
10058a20:	4639      	mov	r1, r7
10058a22:	9a05      	ldr	r2, [sp, #20]
10058a24:	f000 f812 	bl	10058a4c <llc_mngm_csa2_select_channel>
10058a28:	5570      	strb	r0, [r6, r5]
10058a2a:	1c6d      	adds	r5, r5, #1
10058a2c:	e7eb      	b.n	10058a06 <llc_mngm_csa2_select_channel_for_task+0x20>
10058a2e:	7830      	ldrb	r0, [r6, #0]
10058a30:	e00a      	b.n	10058a48 <llc_mngm_csa2_select_channel_for_task+0x62>
10058a32:	9503      	str	r5, [sp, #12]
10058a34:	a809      	add	r0, sp, #36	@ 0x24
10058a36:	9002      	str	r0, [sp, #8]
10058a38:	2200      	movs	r2, #0
10058a3a:	9201      	str	r2, [sp, #4]
10058a3c:	9200      	str	r2, [sp, #0]
10058a3e:	4620      	mov	r0, r4
10058a40:	4639      	mov	r1, r7
10058a42:	4613      	mov	r3, r2
10058a44:	f000 f802 	bl	10058a4c <llc_mngm_csa2_select_channel>
10058a48:	b00b      	add	sp, #44	@ 0x2c
10058a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058a4c <llc_mngm_csa2_select_channel>:
10058a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10058a4e:	b089      	sub	sp, #36	@ 0x24
10058a50:	4615      	mov	r5, r2
10058a52:	aa08      	add	r2, sp, #32
10058a54:	2600      	movs	r6, #0
10058a56:	7016      	strb	r6, [r2, #0]
10058a58:	2d00      	cmp	r5, #0
10058a5a:	9306      	str	r3, [sp, #24]
10058a5c:	461a      	mov	r2, r3
10058a5e:	d100      	bne.n	10058a62 <llc_mngm_csa2_select_channel+0x16>
10058a60:	462a      	mov	r2, r5
10058a62:	0c07      	lsrs	r7, r0, #16
10058a64:	4047      	eors	r7, r0
10058a66:	9811      	ldr	r0, [sp, #68]	@ 0x44
10058a68:	9007      	str	r0, [sp, #28]
10058a6a:	2d00      	cmp	r5, #0
10058a6c:	d104      	bne.n	10058a78 <llc_mngm_csa2_select_channel+0x2c>
10058a6e:	2300      	movs	r3, #0
10058a70:	9806      	ldr	r0, [sp, #24]
10058a72:	2801      	cmp	r0, #1
10058a74:	461c      	mov	r4, r3
10058a76:	d838      	bhi.n	10058aea <llc_mngm_csa2_select_channel+0x9e>
10058a78:	9810      	ldr	r0, [sp, #64]	@ 0x40
10058a7a:	9005      	str	r0, [sp, #20]
10058a7c:	4079      	eors	r1, r7
10058a7e:	4051      	eors	r1, r2
10058a80:	460c      	mov	r4, r1
10058a82:	2e02      	cmp	r6, #2
10058a84:	d807      	bhi.n	10058a96 <llc_mngm_csa2_select_channel+0x4a>
10058a86:	b2a0      	uxth	r0, r4
10058a88:	f000 f842 	bl	10058b10 <llc_mngm_csa2_permutation>
10058a8c:	2111      	movs	r1, #17
10058a8e:	4341      	muls	r1, r0
10058a90:	19cc      	adds	r4, r1, r7
10058a92:	1c76      	adds	r6, r6, #1
10058a94:	e7f5      	b.n	10058a82 <llc_mngm_csa2_select_channel+0x36>
10058a96:	4620      	mov	r0, r4
10058a98:	4078      	eors	r0, r7
10058a9a:	b286      	uxth	r6, r0
10058a9c:	4630      	mov	r0, r6
10058a9e:	f7ff ff77 	bl	10058990 <llc_mngm_mod_37>
10058aa2:	2824      	cmp	r0, #36	@ 0x24
10058aa4:	d815      	bhi.n	10058ad2 <llc_mngm_csa2_select_channel+0x86>
10058aa6:	08c1      	lsrs	r1, r0, #3
10058aa8:	9a05      	ldr	r2, [sp, #20]
10058aaa:	5c52      	ldrb	r2, [r2, r1]
10058aac:	00c9      	lsls	r1, r1, #3
10058aae:	1a41      	subs	r1, r0, r1
10058ab0:	b2c9      	uxtb	r1, r1
10058ab2:	40ca      	lsrs	r2, r1
10058ab4:	07d1      	lsls	r1, r2, #31
10058ab6:	d00c      	beq.n	10058ad2 <llc_mngm_csa2_select_channel+0x86>
10058ab8:	a908      	add	r1, sp, #32
10058aba:	7008      	strb	r0, [r1, #0]
10058abc:	9a07      	ldr	r2, [sp, #28]
10058abe:	1c51      	adds	r1, r2, #1
10058ac0:	7812      	ldrb	r2, [r2, #0]
10058ac2:	2300      	movs	r3, #0
10058ac4:	429a      	cmp	r2, r3
10058ac6:	d00d      	beq.n	10058ae4 <llc_mngm_csa2_select_channel+0x98>
10058ac8:	5cce      	ldrb	r6, [r1, r3]
10058aca:	4286      	cmp	r6, r0
10058acc:	d00b      	beq.n	10058ae6 <llc_mngm_csa2_select_channel+0x9a>
10058ace:	1c5b      	adds	r3, r3, #1
10058ad0:	e7f8      	b.n	10058ac4 <llc_mngm_csa2_select_channel+0x78>
10058ad2:	9907      	ldr	r1, [sp, #28]
10058ad4:	7808      	ldrb	r0, [r1, #0]
10058ad6:	4346      	muls	r6, r0
10058ad8:	0c33      	lsrs	r3, r6, #16
10058ada:	18c8      	adds	r0, r1, r3
10058adc:	7840      	ldrb	r0, [r0, #1]
10058ade:	a908      	add	r1, sp, #32
10058ae0:	7008      	strb	r0, [r1, #0]
10058ae2:	e000      	b.n	10058ae6 <llc_mngm_csa2_select_channel+0x9a>
10058ae4:	2325      	movs	r3, #37	@ 0x25
10058ae6:	2d00      	cmp	r5, #0
10058ae8:	d10e      	bne.n	10058b08 <llc_mngm_csa2_select_channel+0xbc>
10058aea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10058aec:	980e      	ldr	r0, [sp, #56]	@ 0x38
10058aee:	ad08      	add	r5, sp, #32
10058af0:	b2ba      	uxth	r2, r7
10058af2:	9000      	str	r0, [sp, #0]
10058af4:	9201      	str	r2, [sp, #4]
10058af6:	9807      	ldr	r0, [sp, #28]
10058af8:	9002      	str	r0, [sp, #8]
10058afa:	9503      	str	r5, [sp, #12]
10058afc:	b2a2      	uxth	r2, r4
10058afe:	b2db      	uxtb	r3, r3
10058b00:	9806      	ldr	r0, [sp, #24]
10058b02:	f000 f803 	bl	10058b0c <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
10058b06:	7828      	ldrb	r0, [r5, #0]
10058b08:	b009      	add	sp, #36	@ 0x24
10058b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058b0c <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
10058b0c:	4770      	bx	lr
	...

10058b10 <llc_mngm_csa2_permutation>:
10058b10:	0041      	lsls	r1, r0, #1
10058b12:	4a0a      	ldr	r2, [pc, #40]	@ (10058b3c <__arm_cp.7_0>)
10058b14:	400a      	ands	r2, r1
10058b16:	0840      	lsrs	r0, r0, #1
10058b18:	4909      	ldr	r1, [pc, #36]	@ (10058b40 <__arm_cp.7_1>)
10058b1a:	4001      	ands	r1, r0
10058b1c:	1888      	adds	r0, r1, r2
10058b1e:	0081      	lsls	r1, r0, #2
10058b20:	4a08      	ldr	r2, [pc, #32]	@ (10058b44 <__arm_cp.7_2>)
10058b22:	400a      	ands	r2, r1
10058b24:	0880      	lsrs	r0, r0, #2
10058b26:	4908      	ldr	r1, [pc, #32]	@ (10058b48 <__arm_cp.7_3>)
10058b28:	4001      	ands	r1, r0
10058b2a:	1888      	adds	r0, r1, r2
10058b2c:	0101      	lsls	r1, r0, #4
10058b2e:	4a07      	ldr	r2, [pc, #28]	@ (10058b4c <__arm_cp.7_4>)
10058b30:	400a      	ands	r2, r1
10058b32:	0900      	lsrs	r0, r0, #4
10058b34:	4906      	ldr	r1, [pc, #24]	@ (10058b50 <__arm_cp.7_5>)
10058b36:	4001      	ands	r1, r0
10058b38:	1888      	adds	r0, r1, r2
10058b3a:	4770      	bx	lr

10058b3c <__arm_cp.7_0>:
10058b3c:	0001aaaa 	.word	0x0001aaaa

10058b40 <__arm_cp.7_1>:
10058b40:	00005555 	.word	0x00005555

10058b44 <__arm_cp.7_2>:
10058b44:	0007cccc 	.word	0x0007cccc

10058b48 <__arm_cp.7_3>:
10058b48:	00003333 	.word	0x00003333

10058b4c <__arm_cp.7_4>:
10058b4c:	0000f0f0 	.word	0x0000f0f0

10058b50 <__arm_cp.7_5>:
10058b50:	00000f0f 	.word	0x00000f0f

10058b54 <llc_wl_clear_filter_accept_list>:
10058b54:	b5b0      	push	{r4, r5, r7, lr}
10058b56:	2401      	movs	r4, #1
10058b58:	4620      	mov	r0, r4
10058b5a:	f003 f9f7 	bl	1005bf4c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
10058b5e:	4605      	mov	r5, r0
10058b60:	4620      	mov	r0, r4
10058b62:	f000 f8b4 	bl	10058cce <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
10058b66:	4328      	orrs	r0, r5
10058b68:	d10a      	bne.n	10058b80 <llc_wl_clear_filter_accept_list+0x2c>
10058b6a:	4806      	ldr	r0, [pc, #24]	@ (10058b84 <__arm_cp.1_0>)
10058b6c:	6800      	ldr	r0, [r0, #0]
10058b6e:	219c      	movs	r1, #156	@ 0x9c
10058b70:	5840      	ldr	r0, [r0, r1]
10058b72:	300c      	adds	r0, #12
10058b74:	f007 fa0f 	bl	1005ff96 <addr8_list_clear>
10058b78:	f000 f85a 	bl	10058c30 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
10058b7c:	2000      	movs	r0, #0
10058b7e:	bdb0      	pop	{r4, r5, r7, pc}
10058b80:	200c      	movs	r0, #12
10058b82:	bdb0      	pop	{r4, r5, r7, pc}

10058b84 <__arm_cp.1_0>:
10058b84:	20000f20 	.word	0x20000f20

10058b88 <llc_wl_add_device_to_filter_accept_list>:
10058b88:	b5f0      	push	{r4, r5, r6, r7, lr}
10058b8a:	b087      	sub	sp, #28
10058b8c:	460c      	mov	r4, r1
10058b8e:	4605      	mov	r5, r0
10058b90:	9106      	str	r1, [sp, #24]
10058b92:	9005      	str	r0, [sp, #20]
10058b94:	2601      	movs	r6, #1
10058b96:	4630      	mov	r0, r6
10058b98:	f003 f9d8 	bl	1005bf4c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
10058b9c:	4607      	mov	r7, r0
10058b9e:	4630      	mov	r0, r6
10058ba0:	f000 f895 	bl	10058cce <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
10058ba4:	4338      	orrs	r0, r7
10058ba6:	d11d      	bne.n	10058be4 <llc_wl_add_device_to_filter_accept_list+0x5c>
10058ba8:	b2e8      	uxtb	r0, r5
10058baa:	28ff      	cmp	r0, #255	@ 0xff
10058bac:	d105      	bne.n	10058bba <llc_wl_add_device_to_filter_accept_list+0x32>
10058bae:	9005      	str	r0, [sp, #20]
10058bb0:	21ff      	movs	r1, #255	@ 0xff
10058bb2:	0609      	lsls	r1, r1, #24
10058bb4:	400c      	ands	r4, r1
10058bb6:	9406      	str	r4, [sp, #24]
10058bb8:	4605      	mov	r5, r0
10058bba:	4810      	ldr	r0, [pc, #64]	@ (10058bfc <__arm_cp.2_0>)
10058bbc:	6800      	ldr	r0, [r0, #0]
10058bbe:	219c      	movs	r1, #156	@ 0x9c
10058bc0:	5840      	ldr	r0, [r0, r1]
10058bc2:	a903      	add	r1, sp, #12
10058bc4:	9101      	str	r1, [sp, #4]
10058bc6:	a904      	add	r1, sp, #16
10058bc8:	9100      	str	r1, [sp, #0]
10058bca:	300c      	adds	r0, #12
10058bcc:	2301      	movs	r3, #1
10058bce:	4629      	mov	r1, r5
10058bd0:	4622      	mov	r2, r4
10058bd2:	f007 f961 	bl	1005fe98 <addr8_list_add>
10058bd6:	2800      	cmp	r0, #0
10058bd8:	d006      	beq.n	10058be8 <llc_wl_add_device_to_filter_accept_list+0x60>
10058bda:	a805      	add	r0, sp, #20
10058bdc:	2101      	movs	r1, #1
10058bde:	f000 f826 	bl	10058c2e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
10058be2:	e005      	b.n	10058bf0 <llc_wl_add_device_to_filter_accept_list+0x68>
10058be4:	200c      	movs	r0, #12
10058be6:	e006      	b.n	10058bf6 <llc_wl_add_device_to_filter_accept_list+0x6e>
10058be8:	a803      	add	r0, sp, #12
10058bea:	7800      	ldrb	r0, [r0, #0]
10058bec:	2800      	cmp	r0, #0
10058bee:	d001      	beq.n	10058bf4 <llc_wl_add_device_to_filter_accept_list+0x6c>
10058bf0:	2000      	movs	r0, #0
10058bf2:	e000      	b.n	10058bf6 <llc_wl_add_device_to_filter_accept_list+0x6e>
10058bf4:	2007      	movs	r0, #7
10058bf6:	b007      	add	sp, #28
10058bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058bfa:	46c0      	nop			@ (mov r8, r8)

10058bfc <__arm_cp.2_0>:
10058bfc:	20000f20 	.word	0x20000f20

10058c00 <bis_csr_ucfg_weak>:
10058c00:	2000      	movs	r0, #0
10058c02:	4770      	bx	lr

10058c04 <cis_csr_ucfg_weak>:
10058c04:	2000      	movs	r0, #0
10058c06:	4770      	bx	lr

10058c08 <llc_isoal_mem_alloc_ucfg_weak>:
10058c08:	4770      	bx	lr

10058c0a <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
10058c0a:	2000      	movs	r0, #0
10058c0c:	4770      	bx	lr

10058c0e <iso_terminate_event_int_cb_ucfg_weak>:
10058c0e:	2000      	movs	r0, #0
10058c10:	4770      	bx	lr

10058c12 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
10058c12:	2000      	movs	r0, #0
10058c14:	4770      	bx	lr

10058c16 <llc_iso_cmn_mem_alloc_ucfg_weak>:
10058c16:	4770      	bx	lr

10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
10058c18:	2000      	movs	r0, #0
10058c1a:	4770      	bx	lr

10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
10058c1c:	2000      	movs	r0, #0
10058c1e:	4770      	bx	lr

10058c20 <llc_past_init_ucfg_weak>:
10058c20:	4770      	bx	lr

10058c22 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
10058c22:	4770      	bx	lr

10058c24 <llc_priv_init_ucfg_weak>:
10058c24:	4770      	bx	lr

10058c26 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
10058c26:	4770      	bx	lr

10058c28 <llc_priv_offline_rpa_resolution_ucfg_weak>:
10058c28:	4770      	bx	lr

10058c2a <llc_priv_controller_privacy_csr_ucfg_weak>:
10058c2a:	2000      	movs	r0, #0
10058c2c:	4770      	bx	lr

10058c2e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
10058c2e:	4770      	bx	lr

10058c30 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
10058c30:	4770      	bx	lr

10058c32 <llc_priv_start_privacy_timer_ucfg_weak>:
10058c32:	4770      	bx	lr

10058c34 <llc_priv_stop_privacy_timer_ucfg_weak>:
10058c34:	4770      	bx	lr

10058c36 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
10058c36:	4770      	bx	lr

10058c38 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
10058c38:	4770      	bx	lr
	...

10058c3c <llc_pscan_get_cntxt_per_p>:
10058c3c:	218c      	movs	r1, #140	@ 0x8c
10058c3e:	4341      	muls	r1, r0
10058c40:	4804      	ldr	r0, [pc, #16]	@ (10058c54 <__arm_cp.1_0>)
10058c42:	6800      	ldr	r0, [r0, #0]
10058c44:	229c      	movs	r2, #156	@ 0x9c
10058c46:	5880      	ldr	r0, [r0, r2]
10058c48:	6840      	ldr	r0, [r0, #4]
10058c4a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10058c4c:	6800      	ldr	r0, [r0, #0]
10058c4e:	6800      	ldr	r0, [r0, #0]
10058c50:	1840      	adds	r0, r0, r1
10058c52:	4770      	bx	lr

10058c54 <__arm_cp.1_0>:
10058c54:	20000f20 	.word	0x20000f20

10058c58 <llc_pscan_init_ucfg_weak>:
10058c58:	4770      	bx	lr

10058c5a <llc_pscan_mem_allocate_ucfg_weak>:
10058c5a:	4770      	bx	lr

10058c5c <llc_pscan_wr_init_ucfg_weak>:
10058c5c:	4770      	bx	lr
	...

10058c60 <llc_pscan_wr_mem_allocate_ucfg_weak>:
10058c60:	b510      	push	{r4, lr}
10058c62:	2801      	cmp	r0, #1
10058c64:	d110      	bne.n	10058c88 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
10058c66:	2901      	cmp	r1, #1
10058c68:	d10e      	bne.n	10058c88 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
10058c6a:	2a01      	cmp	r2, #1
10058c6c:	d10c      	bne.n	10058c88 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
10058c6e:	2400      	movs	r4, #0
10058c70:	4620      	mov	r0, r4
10058c72:	f7ff ffe3 	bl	10058c3c <llc_pscan_get_cntxt_per_p>
10058c76:	3014      	adds	r0, #20
10058c78:	4904      	ldr	r1, [pc, #16]	@ (10058c8c <__arm_cp.5_0>)
10058c7a:	7f89      	ldrb	r1, [r1, #30]
10058c7c:	2900      	cmp	r1, #0
10058c7e:	d003      	beq.n	10058c88 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
10058c80:	6004      	str	r4, [r0, #0]
10058c82:	308c      	adds	r0, #140	@ 0x8c
10058c84:	1e49      	subs	r1, r1, #1
10058c86:	e7f9      	b.n	10058c7c <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
10058c88:	bd10      	pop	{r4, pc}
10058c8a:	46c0      	nop			@ (mov r8, r8)

10058c8c <__arm_cp.5_0>:
10058c8c:	20000f34 	.word	0x20000f34

10058c90 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
10058c90:	2000      	movs	r0, #0
10058c92:	4770      	bx	lr

10058c94 <llc_scan_get_cntxt_p>:
10058c94:	4802      	ldr	r0, [pc, #8]	@ (10058ca0 <__arm_cp.0_0>)
10058c96:	6800      	ldr	r0, [r0, #0]
10058c98:	219c      	movs	r1, #156	@ 0x9c
10058c9a:	5840      	ldr	r0, [r0, r1]
10058c9c:	6840      	ldr	r0, [r0, #4]
10058c9e:	4770      	bx	lr

10058ca0 <__arm_cp.0_0>:
10058ca0:	20000f20 	.word	0x20000f20

10058ca4 <llc_scan_init_ucfg_weak>:
10058ca4:	4770      	bx	lr

10058ca6 <llc_scan_mem_allocate_ucfg_weak>:
10058ca6:	4770      	bx	lr

10058ca8 <llc_scan_set_scan_channel_bitmap>:
10058ca8:	b510      	push	{r4, lr}
10058caa:	4604      	mov	r4, r0
10058cac:	f7fd fd6c 	bl	10056788 <scan_csr_ucfg_weak>
10058cb0:	2801      	cmp	r0, #1
10058cb2:	d108      	bne.n	10058cc6 <llc_scan_set_scan_channel_bitmap+0x1e>
10058cb4:	1e60      	subs	r0, r4, #1
10058cb6:	2806      	cmp	r0, #6
10058cb8:	d807      	bhi.n	10058cca <llc_scan_set_scan_channel_bitmap+0x22>
10058cba:	f7ff ffeb 	bl	10058c94 <llc_scan_get_cntxt_p>
10058cbe:	21ef      	movs	r1, #239	@ 0xef
10058cc0:	5444      	strb	r4, [r0, r1]
10058cc2:	2000      	movs	r0, #0
10058cc4:	bd10      	pop	{r4, pc}
10058cc6:	2011      	movs	r0, #17
10058cc8:	bd10      	pop	{r4, pc}
10058cca:	2012      	movs	r0, #18
10058ccc:	bd10      	pop	{r4, pc}

10058cce <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
10058cce:	b5b0      	push	{r4, r5, r7, lr}
10058cd0:	4605      	mov	r5, r0
10058cd2:	2400      	movs	r4, #0
10058cd4:	f7fd fd58 	bl	10056788 <scan_csr_ucfg_weak>
10058cd8:	2801      	cmp	r0, #1
10058cda:	d10d      	bne.n	10058cf8 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
10058cdc:	f7ff ffda 	bl	10058c94 <llc_scan_get_cntxt_p>
10058ce0:	21eb      	movs	r1, #235	@ 0xeb
10058ce2:	5c41      	ldrb	r1, [r0, r1]
10058ce4:	07c9      	lsls	r1, r1, #31
10058ce6:	d007      	beq.n	10058cf8 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
10058ce8:	2d00      	cmp	r5, #0
10058cea:	d004      	beq.n	10058cf6 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
10058cec:	30ea      	adds	r0, #234	@ 0xea
10058cee:	7800      	ldrb	r0, [r0, #0]
10058cf0:	2401      	movs	r4, #1
10058cf2:	4004      	ands	r4, r0
10058cf4:	e000      	b.n	10058cf8 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
10058cf6:	2401      	movs	r4, #1
10058cf8:	4620      	mov	r0, r4
10058cfa:	bdb0      	pop	{r4, r5, r7, pc}

10058cfc <llc_scan_stop_ucfg_weak>:
10058cfc:	2000      	movs	r0, #0
10058cfe:	4770      	bx	lr

10058d00 <llc_subrate_init_acceptable>:
10058d00:	2100      	movs	r1, #0
10058d02:	4a03      	ldr	r2, [pc, #12]	@ (10058d10 <__arm_cp.4_0>)
10058d04:	62c1      	str	r1, [r0, #44]	@ 0x2c
10058d06:	6302      	str	r2, [r0, #48]	@ 0x30
10058d08:	2119      	movs	r1, #25
10058d0a:	01c9      	lsls	r1, r1, #7
10058d0c:	8681      	strh	r1, [r0, #52]	@ 0x34
10058d0e:	4770      	bx	lr

10058d10 <__arm_cp.4_0>:
10058d10:	00010001 	.word	0x00010001

10058d14 <llc_subrate_init_acceptable_per>:
10058d14:	b580      	push	{r7, lr}
10058d16:	4603      	mov	r3, r0
10058d18:	2049      	movs	r0, #73	@ 0x49
10058d1a:	0080      	lsls	r0, r0, #2
10058d1c:	1808      	adds	r0, r1, r0
10058d1e:	332c      	adds	r3, #44	@ 0x2c
10058d20:	220a      	movs	r2, #10
10058d22:	4619      	mov	r1, r3
10058d24:	f7f6 fd8e 	bl	1004f844 <BLEPLAT_MemCpy>
10058d28:	bd80      	pop	{r7, pc}

10058d2a <llc_subrate_reset_params>:
10058d2a:	2147      	movs	r1, #71	@ 0x47
10058d2c:	0089      	lsls	r1, r1, #2
10058d2e:	2200      	movs	r2, #0
10058d30:	5042      	str	r2, [r0, r1]
10058d32:	1840      	adds	r0, r0, r1
10058d34:	2101      	movs	r1, #1
10058d36:	0409      	lsls	r1, r1, #16
10058d38:	6041      	str	r1, [r0, #4]
10058d3a:	4770      	bx	lr

10058d3c <llc_subrate_new_sr_base_event_ucfg_weak>:
10058d3c:	4770      	bx	lr

10058d3e <llc_subrate_update_cont_counter_ucfg_weak>:
10058d3e:	4770      	bx	lr

10058d40 <llc_subrate_offline_processing_ucfg_weak>:
10058d40:	2000      	movs	r0, #0
10058d42:	4770      	bx	lr

10058d44 <llc_convert_sca_to_ppm>:
10058d44:	0740      	lsls	r0, r0, #29
10058d46:	0f00      	lsrs	r0, r0, #28
10058d48:	4901      	ldr	r1, [pc, #4]	@ (10058d50 <__arm_cp.1_0>)
10058d4a:	5a08      	ldrh	r0, [r1, r0]
10058d4c:	4770      	bx	lr
10058d4e:	46c0      	nop			@ (mov r8, r8)

10058d50 <__arm_cp.1_0>:
10058d50:	100660d0 	.word	0x100660d0

10058d54 <llc_convert_hci_phy_enum_to_hw_phy>:
10058d54:	1e80      	subs	r0, r0, #2
10058d56:	b2c0      	uxtb	r0, r0
10058d58:	2803      	cmp	r0, #3
10058d5a:	d301      	bcc.n	10058d60 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
10058d5c:	2000      	movs	r0, #0
10058d5e:	e002      	b.n	10058d66 <llc_convert_hci_phy_enum_to_hw_phy+0x12>
10058d60:	00c1      	lsls	r1, r0, #3
10058d62:	4802      	ldr	r0, [pc, #8]	@ (10058d6c <__arm_cp.4_0>)
10058d64:	40c8      	lsrs	r0, r1
10058d66:	b2c0      	uxtb	r0, r0
10058d68:	4770      	bx	lr
10058d6a:	46c0      	nop			@ (mov r8, r8)

10058d6c <__arm_cp.4_0>:
10058d6c:	00060401 	.word	0x00060401

10058d70 <ll_cpe_get_cpid_from_opcode>:
10058d70:	282a      	cmp	r0, #42	@ 0x2a
10058d72:	d804      	bhi.n	10058d7e <ll_cpe_get_cpid_from_opcode+0xe>
10058d74:	2103      	movs	r1, #3
10058d76:	4341      	muls	r1, r0
10058d78:	4802      	ldr	r0, [pc, #8]	@ (10058d84 <__arm_cp.0_0>)
10058d7a:	5c40      	ldrb	r0, [r0, r1]
10058d7c:	4770      	bx	lr
10058d7e:	2016      	movs	r0, #22
10058d80:	4770      	bx	lr
10058d82:	46c0      	nop			@ (mov r8, r8)

10058d84 <__arm_cp.0_0>:
10058d84:	100660e0 	.word	0x100660e0

10058d88 <ll_cpe_set_unknown_rsp_pending>:
10058d88:	b5b0      	push	{r4, r5, r7, lr}
10058d8a:	4604      	mov	r4, r0
10058d8c:	f7fe f9cc 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058d90:	2100      	movs	r1, #0
10058d92:	f7fe fc5f 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10058d96:	4605      	mov	r5, r0
10058d98:	4620      	mov	r0, r4
10058d9a:	f000 f80d 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
10058d9e:	8801      	ldrh	r1, [r0, #0]
10058da0:	4a04      	ldr	r2, [pc, #16]	@ (10058db4 <__arm_cp.1_0>)
10058da2:	400a      	ands	r2, r1
10058da4:	8869      	ldrh	r1, [r5, #2]
10058da6:	0609      	lsls	r1, r1, #24
10058da8:	0cc9      	lsrs	r1, r1, #19
10058daa:	1889      	adds	r1, r1, r2
10058dac:	3110      	adds	r1, #16
10058dae:	8001      	strh	r1, [r0, #0]
10058db0:	bdb0      	pop	{r4, r5, r7, pc}
10058db2:	46c0      	nop			@ (mov r8, r8)

10058db4 <__arm_cp.1_0>:
10058db4:	0000e00f 	.word	0x0000e00f

10058db8 <LL_cpe_get_ctrl_flds_common_p>:
10058db8:	b580      	push	{r7, lr}
10058dba:	f7fe f9b5 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058dbe:	30b0      	adds	r0, #176	@ 0xb0
10058dc0:	bd80      	pop	{r7, pc}

10058dc2 <LL_cpe_register_cpf>:
10058dc2:	b5b0      	push	{r4, r5, r7, lr}
10058dc4:	460c      	mov	r4, r1
10058dc6:	0085      	lsls	r5, r0, #2
10058dc8:	f7fe f9a4 	bl	10057114 <llc_conn_get_cntxt_p>
10058dcc:	6880      	ldr	r0, [r0, #8]
10058dce:	5144      	str	r4, [r0, r5]
10058dd0:	bdb0      	pop	{r4, r5, r7, pc}

10058dd2 <LL_cpe_get_active_status>:
10058dd2:	b580      	push	{r7, lr}
10058dd4:	f000 f804 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058dd8:	7801      	ldrb	r1, [r0, #0]
10058dda:	2001      	movs	r0, #1
10058ddc:	4008      	ands	r0, r1
10058dde:	bd80      	pop	{r7, pc}

10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>:
10058de0:	b510      	push	{r4, lr}
10058de2:	460c      	mov	r4, r1
10058de4:	f7fe f9a0 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058de8:	1900      	adds	r0, r0, r4
10058dea:	30a8      	adds	r0, #168	@ 0xa8
10058dec:	bd10      	pop	{r4, pc}

10058dee <LL_cpe_set_active>:
10058dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058df0:	461c      	mov	r4, r3
10058df2:	4615      	mov	r5, r2
10058df4:	460e      	mov	r6, r1
10058df6:	4607      	mov	r7, r0
10058df8:	f7fe f996 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058dfc:	1980      	adds	r0, r0, r6
10058dfe:	21ac      	movs	r1, #172	@ 0xac
10058e00:	5445      	strb	r5, [r0, r1]
10058e02:	4638      	mov	r0, r7
10058e04:	4631      	mov	r1, r6
10058e06:	f7ff ffeb 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058e0a:	7801      	ldrb	r1, [r0, #0]
10058e0c:	22de      	movs	r2, #222	@ 0xde
10058e0e:	400a      	ands	r2, r1
10058e10:	07e1      	lsls	r1, r4, #31
10058e12:	0e89      	lsrs	r1, r1, #26
10058e14:	1889      	adds	r1, r1, r2
10058e16:	1c49      	adds	r1, r1, #1
10058e18:	7001      	strb	r1, [r0, #0]
10058e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10058e1c <LL_cpe_clr_active>:
10058e1c:	b570      	push	{r4, r5, r6, lr}
10058e1e:	4616      	mov	r6, r2
10058e20:	460d      	mov	r5, r1
10058e22:	4604      	mov	r4, r0
10058e24:	f000 f814 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10058e28:	42b0      	cmp	r0, r6
10058e2a:	d110      	bne.n	10058e4e <LL_cpe_clr_active+0x32>
10058e2c:	4620      	mov	r0, r4
10058e2e:	4629      	mov	r1, r5
10058e30:	f7ff ffd6 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058e34:	2100      	movs	r1, #0
10058e36:	7001      	strb	r1, [r0, #0]
10058e38:	2d01      	cmp	r5, #1
10058e3a:	d001      	beq.n	10058e40 <LL_cpe_clr_active+0x24>
10058e3c:	256c      	movs	r5, #108	@ 0x6c
10058e3e:	e000      	b.n	10058e42 <LL_cpe_clr_active+0x26>
10058e40:	2570      	movs	r5, #112	@ 0x70
10058e42:	4620      	mov	r0, r4
10058e44:	f7fe f970 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058e48:	217d      	movs	r1, #125	@ 0x7d
10058e4a:	0449      	lsls	r1, r1, #17
10058e4c:	5141      	str	r1, [r0, r5]
10058e4e:	bd70      	pop	{r4, r5, r6, pc}

10058e50 <ll_cpe_get_cpid_from_sm>:
10058e50:	b510      	push	{r4, lr}
10058e52:	460c      	mov	r4, r1
10058e54:	f7fe f968 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058e58:	1900      	adds	r0, r0, r4
10058e5a:	21ac      	movs	r1, #172	@ 0xac
10058e5c:	5c40      	ldrb	r0, [r0, r1]
10058e5e:	bd10      	pop	{r4, pc}

10058e60 <LL_cpe_set_blocked>:
10058e60:	b510      	push	{r4, lr}
10058e62:	4614      	mov	r4, r2
10058e64:	f7ff ffbc 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058e68:	2c02      	cmp	r4, #2
10058e6a:	d805      	bhi.n	10058e78 <LL_cpe_set_blocked+0x18>
10058e6c:	00e1      	lsls	r1, r4, #3
10058e6e:	4a03      	ldr	r2, [pc, #12]	@ (10058e7c <__arm_cp.9_0>)
10058e70:	40ca      	lsrs	r2, r1
10058e72:	7801      	ldrb	r1, [r0, #0]
10058e74:	4311      	orrs	r1, r2
10058e76:	7001      	strb	r1, [r0, #0]
10058e78:	bd10      	pop	{r4, pc}
10058e7a:	46c0      	nop			@ (mov r8, r8)

10058e7c <__arm_cp.9_0>:
10058e7c:	00080402 	.word	0x00080402

10058e80 <LL_cpe_set_prepare_tx_pdu>:
10058e80:	b580      	push	{r7, lr}
10058e82:	f7ff ffad 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058e86:	7801      	ldrb	r1, [r0, #0]
10058e88:	2210      	movs	r2, #16
10058e8a:	430a      	orrs	r2, r1
10058e8c:	7002      	strb	r2, [r0, #0]
10058e8e:	2015      	movs	r0, #21
10058e90:	f006 fd6e 	bl	1005f970 <tsk_notify_idx>
10058e94:	f7f5 ff15 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10058e98:	bd80      	pop	{r7, pc}

10058e9a <LL_cpe_get_cntxt>:
10058e9a:	b510      	push	{r4, lr}
10058e9c:	460c      	mov	r4, r1
10058e9e:	f7fe f943 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058ea2:	00a1      	lsls	r1, r4, #2
10058ea4:	1840      	adds	r0, r0, r1
10058ea6:	21a0      	movs	r1, #160	@ 0xa0
10058ea8:	5840      	ldr	r0, [r0, r1]
10058eaa:	bd10      	pop	{r4, pc}

10058eac <LL_cpe_set_tx_with_instant>:
10058eac:	b5b0      	push	{r4, r5, r7, lr}
10058eae:	4604      	mov	r4, r0
10058eb0:	f7ff ff96 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058eb4:	4605      	mov	r5, r0
10058eb6:	4620      	mov	r0, r4
10058eb8:	f7fe f936 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058ebc:	7829      	ldrb	r1, [r5, #0]
10058ebe:	2240      	movs	r2, #64	@ 0x40
10058ec0:	430a      	orrs	r2, r1
10058ec2:	702a      	strb	r2, [r5, #0]
10058ec4:	f7fe fe87 	bl	10057bd6 <llc_conn_set_tx_ctrl_pdu_has_instant>
10058ec8:	bdb0      	pop	{r4, r5, r7, pc}

10058eca <LL_cpe_set_rx_with_instant>:
10058eca:	b5b0      	push	{r4, r5, r7, lr}
10058ecc:	4604      	mov	r4, r0
10058ece:	f7ff ff87 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10058ed2:	4605      	mov	r5, r0
10058ed4:	4620      	mov	r0, r4
10058ed6:	f7fe f927 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058eda:	7829      	ldrb	r1, [r5, #0]
10058edc:	2240      	movs	r2, #64	@ 0x40
10058ede:	430a      	orrs	r2, r1
10058ee0:	702a      	strb	r2, [r5, #0]
10058ee2:	219a      	movs	r1, #154	@ 0x9a
10058ee4:	5a42      	ldrh	r2, [r0, r1]
10058ee6:	2301      	movs	r3, #1
10058ee8:	4313      	orrs	r3, r2
10058eea:	5243      	strh	r3, [r0, r1]
10058eec:	bdb0      	pop	{r4, r5, r7, pc}
	...

10058ef0 <LL_cpe_engine>:
10058ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
10058ef2:	b08d      	sub	sp, #52	@ 0x34
10058ef4:	4604      	mov	r4, r0
10058ef6:	a80c      	add	r0, sp, #48	@ 0x30
10058ef8:	2700      	movs	r7, #0
10058efa:	8007      	strh	r7, [r0, #0]
10058efc:	4620      	mov	r0, r4
10058efe:	f7fe f913 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058f02:	21ff      	movs	r1, #255	@ 0xff
10058f04:	3112      	adds	r1, #18
10058f06:	900b      	str	r0, [sp, #44]	@ 0x2c
10058f08:	5c40      	ldrb	r0, [r0, r1]
10058f0a:	2800      	cmp	r0, #0
10058f0c:	9406      	str	r4, [sp, #24]
10058f0e:	d100      	bne.n	10058f12 <LL_cpe_engine+0x22>
10058f10:	e083      	b.n	1005901a <LL_cpe_engine+0x12a>
10058f12:	4620      	mov	r0, r4
10058f14:	f000 fbc2 	bl	1005969c <ll_cpe_set_active>
10058f18:	4620      	mov	r0, r4
10058f1a:	f7ff ff4d 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
10058f1e:	4606      	mov	r6, r0
10058f20:	4620      	mov	r0, r4
10058f22:	f7fe f901 	bl	10057128 <llc_conn_get_cntxt_per_p>
10058f26:	4604      	mov	r4, r0
10058f28:	8835      	ldrh	r5, [r6, #0]
10058f2a:	f7fe fbc0 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
10058f2e:	0729      	lsls	r1, r5, #28
10058f30:	d509      	bpl.n	10058f46 <LL_cpe_engine+0x56>
10058f32:	2803      	cmp	r0, #3
10058f34:	d107      	bne.n	10058f46 <LL_cpe_engine+0x56>
10058f36:	2100      	movs	r1, #0
10058f38:	4620      	mov	r0, r4
10058f3a:	f7fe fe53 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
10058f3e:	8830      	ldrh	r0, [r6, #0]
10058f40:	2108      	movs	r1, #8
10058f42:	4388      	bics	r0, r1
10058f44:	8030      	strh	r0, [r6, #0]
10058f46:	9806      	ldr	r0, [sp, #24]
10058f48:	f000 fbb0 	bl	100596ac <ll_cpe_check_rx_pdu_can_be_processed>
10058f4c:	2800      	cmp	r0, #0
10058f4e:	d100      	bne.n	10058f52 <LL_cpe_engine+0x62>
10058f50:	e12e      	b.n	100591b0 <LL_cpe_engine+0x2c0>
10058f52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10058f54:	4606      	mov	r6, r0
10058f56:	362c      	adds	r6, #44	@ 0x2c
10058f58:	4639      	mov	r1, r7
10058f5a:	f7fe fb7b 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10058f5e:	7885      	ldrb	r5, [r0, #2]
10058f60:	9005      	str	r0, [sp, #20]
10058f62:	7840      	ldrb	r0, [r0, #1]
10058f64:	9008      	str	r0, [sp, #32]
10058f66:	2101      	movs	r1, #1
10058f68:	9c06      	ldr	r4, [sp, #24]
10058f6a:	4620      	mov	r0, r4
10058f6c:	9104      	str	r1, [sp, #16]
10058f6e:	463a      	mov	r2, r7
10058f70:	f000 fbad 	bl	100596ce <ll_cpe_get_blocked_status>
10058f74:	9009      	str	r0, [sp, #36]	@ 0x24
10058f76:	4620      	mov	r0, r4
10058f78:	4639      	mov	r1, r7
10058f7a:	463a      	mov	r2, r7
10058f7c:	f000 fba7 	bl	100596ce <ll_cpe_get_blocked_status>
10058f80:	4603      	mov	r3, r0
10058f82:	9607      	str	r6, [sp, #28]
10058f84:	7830      	ldrb	r0, [r6, #0]
10058f86:	1e84      	subs	r4, r0, #2
10058f88:	1e61      	subs	r1, r4, #1
10058f8a:	4620      	mov	r0, r4
10058f8c:	4188      	sbcs	r0, r1
10058f8e:	950a      	str	r5, [sp, #40]	@ 0x28
10058f90:	2d2a      	cmp	r5, #42	@ 0x2a
10058f92:	d900      	bls.n	10058f96 <LL_cpe_engine+0xa6>
10058f94:	e068      	b.n	10059068 <LL_cpe_engine+0x178>
10058f96:	2103      	movs	r1, #3
10058f98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10058f9a:	4351      	muls	r1, r2
10058f9c:	4aa1      	ldr	r2, [pc, #644]	@ (10059224 <__arm_cp.14_7>)
10058f9e:	1851      	adds	r1, r2, r1
10058fa0:	7849      	ldrb	r1, [r1, #1]
10058fa2:	9a08      	ldr	r2, [sp, #32]
10058fa4:	4291      	cmp	r1, r2
10058fa6:	d000      	beq.n	10058faa <LL_cpe_engine+0xba>
10058fa8:	e05e      	b.n	10059068 <LL_cpe_engine+0x178>
10058faa:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058fac:	292a      	cmp	r1, #42	@ 0x2a
10058fae:	d900      	bls.n	10058fb2 <LL_cpe_engine+0xc2>
10058fb0:	e05a      	b.n	10059068 <LL_cpe_engine+0x178>
10058fb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058fb4:	0049      	lsls	r1, r1, #1
10058fb6:	46c0      	nop			@ (mov r8, r8)
10058fb8:	4479      	add	r1, pc
10058fba:	8889      	ldrh	r1, [r1, #4]
10058fbc:	0049      	lsls	r1, r1, #1
10058fbe:	448f      	add	pc, r1
10058fc0:	00540054 	.word	0x00540054
10058fc4:	0054002a 	.word	0x0054002a
10058fc8:	030e030e 	.word	0x030e030e
10058fcc:	002a002a 	.word	0x002a002a
10058fd0:	002a0054 	.word	0x002a0054
10058fd4:	002a0054 	.word	0x002a0054
10058fd8:	002a002a 	.word	0x002a002a
10058fdc:	0053030e 	.word	0x0053030e
10058fe0:	002a0053 	.word	0x002a0053
10058fe4:	002a002a 	.word	0x002a002a
10058fe8:	03150315 	.word	0x03150315
10058fec:	03600321 	.word	0x03600321
10058ff0:	00530325 	.word	0x00530325
10058ff4:	03190319 	.word	0x03190319
10058ff8:	002a0329 	.word	0x002a0329
10058ffc:	031d002a 	.word	0x031d002a
10059000:	031d032d 	.word	0x031d032d
10059004:	03110333 	.word	0x03110333
10059008:	03110311 	.word	0x03110311
1005900c:	033d0337 	.word	0x033d0337
10059010:	034c0341 	.word	0x034c0341
10059014:	0352      	.short	0x0352
10059016:	9804      	ldr	r0, [sp, #16]
10059018:	e027      	b.n	1005906a <LL_cpe_engine+0x17a>
1005901a:	4620      	mov	r0, r4
1005901c:	f7fe f884 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059020:	4605      	mov	r5, r0
10059022:	202d      	movs	r0, #45	@ 0x2d
10059024:	5c28      	ldrb	r0, [r5, r0]
10059026:	2800      	cmp	r0, #0
10059028:	d100      	bne.n	1005902c <LL_cpe_engine+0x13c>
1005902a:	e09b      	b.n	10059164 <LL_cpe_engine+0x274>
1005902c:	900a      	str	r0, [sp, #40]	@ 0x28
1005902e:	462f      	mov	r7, r5
10059030:	372c      	adds	r7, #44	@ 0x2c
10059032:	462e      	mov	r6, r5
10059034:	36d8      	adds	r6, #216	@ 0xd8
10059036:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10059038:	463c      	mov	r4, r7
1005903a:	3454      	adds	r4, #84	@ 0x54
1005903c:	7d79      	ldrb	r1, [r7, #21]
1005903e:	910b      	str	r1, [sp, #44]	@ 0x2c
10059040:	2800      	cmp	r0, #0
10059042:	d001      	beq.n	10059048 <LL_cpe_engine+0x158>
10059044:	f7f8 fee2 	bl	10051e0c <Acl_Tx_Cmpl_Pkt_Handler>
10059048:	4620      	mov	r0, r4
1005904a:	f006 fe83 	bl	1005fd54 <ACL_list_init>
1005904e:	ce03      	ldmia	r6!, {r0, r1}
10059050:	f7fe fba8 	bl	100577a4 <llc_conn_list_remove_address>
10059054:	4874      	ldr	r0, [pc, #464]	@ (10059228 <__arm_cp.14_8>)
10059056:	6800      	ldr	r0, [r0, #0]
10059058:	212c      	movs	r1, #44	@ 0x2c
1005905a:	5c40      	ldrb	r0, [r0, r1]
1005905c:	07c0      	lsls	r0, r0, #31
1005905e:	0ec1      	lsrs	r1, r0, #27
10059060:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
10059062:	d148      	bne.n	100590f6 <LL_cpe_engine+0x206>
10059064:	2205      	movs	r2, #5
10059066:	e04d      	b.n	10059104 <LL_cpe_engine+0x214>
10059068:	4638      	mov	r0, r7
1005906a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005906c:	4319      	orrs	r1, r3
1005906e:	d000      	beq.n	10059072 <LL_cpe_engine+0x182>
10059070:	e09e      	b.n	100591b0 <LL_cpe_engine+0x2c0>
10059072:	2800      	cmp	r0, #0
10059074:	d07d      	beq.n	10059172 <LL_cpe_engine+0x282>
10059076:	9805      	ldr	r0, [sp, #20]
10059078:	78c6      	ldrb	r6, [r0, #3]
1005907a:	2401      	movs	r4, #1
1005907c:	9f06      	ldr	r7, [sp, #24]
1005907e:	4638      	mov	r0, r7
10059080:	4621      	mov	r1, r4
10059082:	f000 fb3d 	bl	10059700 <ll_cpe_get_expected_opcode>
10059086:	9005      	str	r0, [sp, #20]
10059088:	4638      	mov	r0, r7
1005908a:	4621      	mov	r1, r4
1005908c:	f000 fb40 	bl	10059710 <ll_cpe_get_state>
10059090:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
10059092:	9004      	str	r0, [sp, #16]
10059094:	4628      	mov	r0, r5
10059096:	9603      	str	r6, [sp, #12]
10059098:	4631      	mov	r1, r6
1005909a:	463a      	mov	r2, r7
1005909c:	9409      	str	r4, [sp, #36]	@ 0x24
1005909e:	4623      	mov	r3, r4
100590a0:	f000 fb3e 	bl	10059720 <LL_cpe_rxctrlpdu_checkreject>
100590a4:	1e41      	subs	r1, r0, #1
100590a6:	4188      	sbcs	r0, r1
100590a8:	9905      	ldr	r1, [sp, #20]
100590aa:	1b49      	subs	r1, r1, r5
100590ac:	424a      	negs	r2, r1
100590ae:	414a      	adcs	r2, r1
100590b0:	4302      	orrs	r2, r0
100590b2:	9804      	ldr	r0, [sp, #16]
100590b4:	1f00      	subs	r0, r0, #4
100590b6:	4245      	negs	r5, r0
100590b8:	4145      	adcs	r5, r0
100590ba:	4015      	ands	r5, r2
100590bc:	2400      	movs	r4, #0
100590be:	4638      	mov	r0, r7
100590c0:	4621      	mov	r1, r4
100590c2:	f000 fb1d 	bl	10059700 <ll_cpe_get_expected_opcode>
100590c6:	4606      	mov	r6, r0
100590c8:	9807      	ldr	r0, [sp, #28]
100590ca:	7800      	ldrb	r0, [r0, #0]
100590cc:	9007      	str	r0, [sp, #28]
100590ce:	4638      	mov	r0, r7
100590d0:	4621      	mov	r1, r4
100590d2:	f000 fb1d 	bl	10059710 <ll_cpe_get_state>
100590d6:	4607      	mov	r7, r0
100590d8:	2801      	cmp	r0, #1
100590da:	d14e      	bne.n	1005917a <LL_cpe_engine+0x28a>
100590dc:	9807      	ldr	r0, [sp, #28]
100590de:	1e81      	subs	r1, r0, #2
100590e0:	1e48      	subs	r0, r1, #1
100590e2:	4181      	sbcs	r1, r0
100590e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
100590e6:	4604      	mov	r4, r0
100590e8:	9a08      	ldr	r2, [sp, #32]
100590ea:	f000 fb41 	bl	10059770 <valid_first_opcode>
100590ee:	2800      	cmp	r0, #0
100590f0:	d044      	beq.n	1005917c <LL_cpe_engine+0x28c>
100590f2:	2501      	movs	r5, #1
100590f4:	e042      	b.n	1005917c <LL_cpe_engine+0x28c>
100590f6:	484d      	ldr	r0, [pc, #308]	@ (1005922c <__arm_cp.14_9>)
100590f8:	6800      	ldr	r0, [r0, #0]
100590fa:	2236      	movs	r2, #54	@ 0x36
100590fc:	5c80      	ldrb	r0, [r0, r2]
100590fe:	06c0      	lsls	r0, r0, #27
10059100:	d51d      	bpl.n	1005913e <LL_cpe_engine+0x24e>
10059102:	2215      	movs	r2, #21
10059104:	206f      	movs	r0, #111	@ 0x6f
10059106:	43c0      	mvns	r0, r0
10059108:	4041      	eors	r1, r0
1005910a:	4849      	ldr	r0, [pc, #292]	@ (10059230 <__arm_cp.14_10>)
1005910c:	6800      	ldr	r0, [r0, #0]
1005910e:	6900      	ldr	r0, [r0, #16]
10059110:	b2ce      	uxtb	r6, r1
10059112:	2302      	movs	r3, #2
10059114:	4631      	mov	r1, r6
10059116:	f7f9 f8e1 	bl	100522dc <aci_event_fifo_push_header>
1005911a:	2800      	cmp	r0, #0
1005911c:	d00f      	beq.n	1005913e <LL_cpe_engine+0x24e>
1005911e:	4601      	mov	r1, r0
10059120:	7204      	strb	r4, [r0, #8]
10059122:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059124:	7288      	strb	r0, [r1, #10]
10059126:	2000      	movs	r0, #0
10059128:	71c8      	strb	r0, [r1, #7]
1005912a:	2004      	movs	r0, #4
1005912c:	7188      	strb	r0, [r1, #6]
1005912e:	2205      	movs	r2, #5
10059130:	714a      	strb	r2, [r1, #5]
10059132:	7108      	strb	r0, [r1, #4]
10059134:	0a20      	lsrs	r0, r4, #8
10059136:	7248      	strb	r0, [r1, #9]
10059138:	4630      	mov	r0, r6
1005913a:	f7f9 f96c 	bl	10052416 <aci_event_fifo_push>
1005913e:	4628      	mov	r0, r5
10059140:	f001 ffa4 	bl	1005b08c <LLC_authenticated_payload_timeout_reset>
10059144:	9c06      	ldr	r4, [sp, #24]
10059146:	4620      	mov	r0, r4
10059148:	f000 fc18 	bl	1005997c <ll_cpe_reset_state_machines>
1005914c:	4620      	mov	r0, r4
1005914e:	f7fe f8bb 	bl	100572c8 <llc_conn_per_init>
10059152:	4620      	mov	r0, r4
10059154:	f7ff fd9c 	bl	10058c90 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10059158:	2800      	cmp	r0, #0
1005915a:	d003      	beq.n	10059164 <LL_cpe_engine+0x274>
1005915c:	2001      	movs	r0, #1
1005915e:	7038      	strb	r0, [r7, #0]
10059160:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10059162:	7578      	strb	r0, [r7, #21]
10059164:	a80c      	add	r0, sp, #48	@ 0x30
10059166:	7841      	ldrb	r1, [r0, #1]
10059168:	2902      	cmp	r1, #2
1005916a:	d000      	beq.n	1005916e <LL_cpe_engine+0x27e>
1005916c:	e232      	b.n	100595d4 <__arm_cp.14_10+0x3a4>
1005916e:	2001      	movs	r0, #1
10059170:	e233      	b.n	100595da <__arm_cp.14_10+0x3aa>
10059172:	9806      	ldr	r0, [sp, #24]
10059174:	f7ff fe08 	bl	10058d88 <ll_cpe_set_unknown_rsp_pending>
10059178:	e017      	b.n	100591aa <LL_cpe_engine+0x2ba>
1005917a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005917c:	9903      	ldr	r1, [sp, #12]
1005917e:	2204      	movs	r2, #4
10059180:	407a      	eors	r2, r7
10059182:	4620      	mov	r0, r4
10059184:	4066      	eors	r6, r4
10059186:	4316      	orrs	r6, r2
10059188:	4274      	negs	r4, r6
1005918a:	4174      	adcs	r4, r6
1005918c:	2f04      	cmp	r7, #4
1005918e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10059190:	d000      	beq.n	10059194 <LL_cpe_engine+0x2a4>
10059192:	4626      	mov	r6, r4
10059194:	2300      	movs	r3, #0
10059196:	9a06      	ldr	r2, [sp, #24]
10059198:	f000 fac2 	bl	10059720 <LL_cpe_rxctrlpdu_checkreject>
1005919c:	2800      	cmp	r0, #0
1005919e:	d100      	bne.n	100591a2 <LL_cpe_engine+0x2b2>
100591a0:	4626      	mov	r6, r4
100591a2:	2e01      	cmp	r6, #1
100591a4:	d004      	beq.n	100591b0 <LL_cpe_engine+0x2c0>
100591a6:	2d00      	cmp	r5, #0
100591a8:	d102      	bne.n	100591b0 <LL_cpe_engine+0x2c0>
100591aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100591ac:	f7fe f998 	bl	100574e0 <llc_conn_clr_rx_ctrl_pdu_full>
100591b0:	2000      	movs	r0, #0
100591b2:	9005      	str	r0, [sp, #20]
100591b4:	43c0      	mvns	r0, r0
100591b6:	9f06      	ldr	r7, [sp, #24]
100591b8:	2801      	cmp	r0, #1
100591ba:	d100      	bne.n	100591be <LL_cpe_engine+0x2ce>
100591bc:	e1ff      	b.n	100595be <__arm_cp.14_10+0x38e>
100591be:	900a      	str	r0, [sp, #40]	@ 0x28
100591c0:	1c40      	adds	r0, r0, #1
100591c2:	900b      	str	r0, [sp, #44]	@ 0x2c
100591c4:	4638      	mov	r0, r7
100591c6:	f000 fc5a 	bl	10059a7e <ll_cpe_get_active>
100591ca:	2800      	cmp	r0, #0
100591cc:	d017      	beq.n	100591fe <LL_cpe_engine+0x30e>
100591ce:	4638      	mov	r0, r7
100591d0:	f7ff fdf2 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
100591d4:	4605      	mov	r5, r0
100591d6:	8800      	ldrh	r0, [r0, #0]
100591d8:	0780      	lsls	r0, r0, #30
100591da:	d500      	bpl.n	100591de <LL_cpe_engine+0x2ee>
100591dc:	e1ed      	b.n	100595ba <__arm_cp.14_10+0x38a>
100591de:	4638      	mov	r0, r7
100591e0:	f7fd ffa2 	bl	10057128 <llc_conn_get_cntxt_per_p>
100591e4:	24b2      	movs	r4, #178	@ 0xb2
100591e6:	5d06      	ldrb	r6, [r0, r4]
100591e8:	2e00      	cmp	r6, #0
100591ea:	d008      	beq.n	100591fe <LL_cpe_engine+0x30e>
100591ec:	4638      	mov	r0, r7
100591ee:	f7fd ff9b 	bl	10057128 <llc_conn_get_cntxt_per_p>
100591f2:	9009      	str	r0, [sp, #36]	@ 0x24
100591f4:	f7fe fa5b 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
100591f8:	2800      	cmp	r0, #0
100591fa:	d100      	bne.n	100591fe <LL_cpe_engine+0x30e>
100591fc:	e0e1      	b.n	100593c2 <__arm_cp.14_10+0x192>
100591fe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10059200:	b2c6      	uxtb	r6, r0
10059202:	4638      	mov	r0, r7
10059204:	4631      	mov	r1, r6
10059206:	f000 fa83 	bl	10059710 <ll_cpe_get_state>
1005920a:	4605      	mov	r5, r0
1005920c:	2805      	cmp	r0, #5
1005920e:	9608      	str	r6, [sp, #32]
10059210:	9009      	str	r0, [sp, #36]	@ 0x24
10059212:	d816      	bhi.n	10059242 <__arm_cp.14_10+0x12>
10059214:	447d      	add	r5, pc
10059216:	792d      	ldrb	r5, [r5, #4]
10059218:	006d      	lsls	r5, r5, #1
1005921a:	44af      	add	pc, r5
1005921c:	6544140b 	.word	0x6544140b
10059220:	46c0b799 	.word	0x46c0b799

10059224 <__arm_cp.14_7>:
10059224:	100660e0 	.word	0x100660e0

10059228 <__arm_cp.14_8>:
10059228:	20000ecc 	.word	0x20000ecc

1005922c <__arm_cp.14_9>:
1005922c:	20000f20 	.word	0x20000f20

10059230 <__arm_cp.14_10>:
10059230:	20000ed0 	.word	0x20000ed0
10059234:	4638      	mov	r0, r7
10059236:	f000 fc22 	bl	10059a7e <ll_cpe_get_active>
1005923a:	4604      	mov	r4, r0
1005923c:	1e40      	subs	r0, r0, #1
1005923e:	4184      	sbcs	r4, r0
10059240:	e180      	b.n	10059544 <__arm_cp.14_10+0x314>
10059242:	462c      	mov	r4, r5
10059244:	e17e      	b.n	10059544 <__arm_cp.14_10+0x314>
10059246:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059248:	2800      	cmp	r0, #0
1005924a:	d100      	bne.n	1005924e <__arm_cp.14_10+0x1e>
1005924c:	e0df      	b.n	1005940e <__arm_cp.14_10+0x1de>
1005924e:	4638      	mov	r0, r7
10059250:	f000 fa2c 	bl	100596ac <ll_cpe_check_rx_pdu_can_be_processed>
10059254:	2800      	cmp	r0, #0
10059256:	d100      	bne.n	1005925a <__arm_cp.14_10+0x2a>
10059258:	e0d7      	b.n	1005940a <__arm_cp.14_10+0x1da>
1005925a:	2501      	movs	r5, #1
1005925c:	4638      	mov	r0, r7
1005925e:	4629      	mov	r1, r5
10059260:	f000 fa56 	bl	10059710 <ll_cpe_get_state>
10059264:	4604      	mov	r4, r0
10059266:	4638      	mov	r0, r7
10059268:	f000 fc10 	bl	10059a8c <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005926c:	2c04      	cmp	r4, #4
1005926e:	d103      	bne.n	10059278 <__arm_cp.14_10+0x48>
10059270:	462c      	mov	r4, r5
10059272:	2800      	cmp	r0, #0
10059274:	d100      	bne.n	10059278 <__arm_cp.14_10+0x48>
10059276:	e165      	b.n	10059544 <__arm_cp.14_10+0x314>
10059278:	2100      	movs	r1, #0
1005927a:	2401      	movs	r4, #1
1005927c:	4638      	mov	r0, r7
1005927e:	4622      	mov	r2, r4
10059280:	f000 fc0c 	bl	10059a9c <ll_cpe_process_rx_pdu>
10059284:	2800      	cmp	r0, #0
10059286:	d100      	bne.n	1005928a <__arm_cp.14_10+0x5a>
10059288:	e153      	b.n	10059532 <__arm_cp.14_10+0x302>
1005928a:	2100      	movs	r1, #0
1005928c:	4638      	mov	r0, r7
1005928e:	f7ff fda0 	bl	10058dd2 <LL_cpe_get_active_status>
10059292:	2800      	cmp	r0, #0
10059294:	d100      	bne.n	10059298 <__arm_cp.14_10+0x68>
10059296:	e152      	b.n	1005953e <__arm_cp.14_10+0x30e>
10059298:	2100      	movs	r1, #0
1005929a:	4638      	mov	r0, r7
1005929c:	f000 fcf4 	bl	10059c88 <ll_cpe_get_instant_active>
100592a0:	2800      	cmp	r0, #0
100592a2:	d171      	bne.n	10059388 <__arm_cp.14_10+0x158>
100592a4:	e143      	b.n	1005952e <__arm_cp.14_10+0x2fe>
100592a6:	4638      	mov	r0, r7
100592a8:	f7fd ff3e 	bl	10057128 <llc_conn_get_cntxt_per_p>
100592ac:	4604      	mov	r4, r0
100592ae:	4638      	mov	r0, r7
100592b0:	4631      	mov	r1, r6
100592b2:	f7ff fd95 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
100592b6:	7800      	ldrb	r0, [r0, #0]
100592b8:	06c7      	lsls	r7, r0, #27
100592ba:	9407      	str	r4, [sp, #28]
100592bc:	4620      	mov	r0, r4
100592be:	f7fe f9f6 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
100592c2:	2402      	movs	r4, #2
100592c4:	2f00      	cmp	r7, #0
100592c6:	d400      	bmi.n	100592ca <__arm_cp.14_10+0x9a>
100592c8:	e09d      	b.n	10059406 <__arm_cp.14_10+0x1d6>
100592ca:	2800      	cmp	r0, #0
100592cc:	d000      	beq.n	100592d0 <__arm_cp.14_10+0xa0>
100592ce:	e09a      	b.n	10059406 <__arm_cp.14_10+0x1d6>
100592d0:	2701      	movs	r7, #1
100592d2:	9d06      	ldr	r5, [sp, #24]
100592d4:	4628      	mov	r0, r5
100592d6:	4631      	mov	r1, r6
100592d8:	463a      	mov	r2, r7
100592da:	f000 f9f8 	bl	100596ce <ll_cpe_get_blocked_status>
100592de:	2800      	cmp	r0, #0
100592e0:	d100      	bne.n	100592e4 <__arm_cp.14_10+0xb4>
100592e2:	e0b6      	b.n	10059452 <__arm_cp.14_10+0x222>
100592e4:	462f      	mov	r7, r5
100592e6:	e12d      	b.n	10059544 <__arm_cp.14_10+0x314>
100592e8:	4638      	mov	r0, r7
100592ea:	f7fd ff1d 	bl	10057128 <llc_conn_get_cntxt_per_p>
100592ee:	4605      	mov	r5, r0
100592f0:	f7fe f9dd 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
100592f4:	2803      	cmp	r0, #3
100592f6:	d000      	beq.n	100592fa <__arm_cp.14_10+0xca>
100592f8:	e0ed      	b.n	100594d6 <__arm_cp.14_10+0x2a6>
100592fa:	4638      	mov	r0, r7
100592fc:	4631      	mov	r1, r6
100592fe:	f7ff fda7 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10059302:	f000 fcff 	bl	10059d04 <LL_cpe_get_cpf>
10059306:	4604      	mov	r4, r0
10059308:	2600      	movs	r6, #0
1005930a:	4638      	mov	r0, r7
1005930c:	9908      	ldr	r1, [sp, #32]
1005930e:	4632      	mov	r2, r6
10059310:	4633      	mov	r3, r6
10059312:	47a0      	blx	r4
10059314:	4602      	mov	r2, r0
10059316:	4638      	mov	r0, r7
10059318:	9908      	ldr	r1, [sp, #32]
1005931a:	f000 fd00 	bl	10059d1e <ll_cpe_set_expected_opcode>
1005931e:	4628      	mov	r0, r5
10059320:	4631      	mov	r1, r6
10059322:	9c08      	ldr	r4, [sp, #32]
10059324:	f7fe fc5e 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
10059328:	4638      	mov	r0, r7
1005932a:	4621      	mov	r1, r4
1005932c:	f7ff fd51 	bl	10058dd2 <LL_cpe_get_active_status>
10059330:	2800      	cmp	r0, #0
10059332:	d06a      	beq.n	1005940a <__arm_cp.14_10+0x1da>
10059334:	4638      	mov	r0, r7
10059336:	4621      	mov	r1, r4
10059338:	f000 fca6 	bl	10059c88 <ll_cpe_get_instant_active>
1005933c:	2800      	cmp	r0, #0
1005933e:	d160      	bne.n	10059402 <__arm_cp.14_10+0x1d2>
10059340:	4638      	mov	r0, r7
10059342:	4621      	mov	r1, r4
10059344:	f000 f9dc 	bl	10059700 <ll_cpe_get_expected_opcode>
10059348:	28ff      	cmp	r0, #255	@ 0xff
1005934a:	d068      	beq.n	1005941e <__arm_cp.14_10+0x1ee>
1005934c:	2404      	movs	r4, #4
1005934e:	e0f9      	b.n	10059544 <__arm_cp.14_10+0x314>
10059350:	4638      	mov	r0, r7
10059352:	f000 f9ab 	bl	100596ac <ll_cpe_check_rx_pdu_can_be_processed>
10059356:	2404      	movs	r4, #4
10059358:	2800      	cmp	r0, #0
1005935a:	d100      	bne.n	1005935e <__arm_cp.14_10+0x12e>
1005935c:	e0f2      	b.n	10059544 <__arm_cp.14_10+0x314>
1005935e:	2203      	movs	r2, #3
10059360:	4638      	mov	r0, r7
10059362:	4631      	mov	r1, r6
10059364:	f000 fb9a 	bl	10059a9c <ll_cpe_process_rx_pdu>
10059368:	2800      	cmp	r0, #0
1005936a:	d05a      	beq.n	10059422 <__arm_cp.14_10+0x1f2>
1005936c:	4638      	mov	r0, r7
1005936e:	4631      	mov	r1, r6
10059370:	f7ff fd2f 	bl	10058dd2 <LL_cpe_get_active_status>
10059374:	2800      	cmp	r0, #0
10059376:	d100      	bne.n	1005937a <__arm_cp.14_10+0x14a>
10059378:	e0bb      	b.n	100594f2 <__arm_cp.14_10+0x2c2>
1005937a:	4638      	mov	r0, r7
1005937c:	4631      	mov	r1, r6
1005937e:	f000 fc83 	bl	10059c88 <ll_cpe_get_instant_active>
10059382:	2800      	cmp	r0, #0
10059384:	d100      	bne.n	10059388 <__arm_cp.14_10+0x158>
10059386:	e0b6      	b.n	100594f6 <__arm_cp.14_10+0x2c6>
10059388:	2405      	movs	r4, #5
1005938a:	e0d8      	b.n	1005953e <__arm_cp.14_10+0x30e>
1005938c:	4638      	mov	r0, r7
1005938e:	f7fd fecb 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059392:	4604      	mov	r4, r0
10059394:	f7fe f974 	bl	10057680 <llc_conn_get_instant_reached>
10059398:	2801      	cmp	r0, #1
1005939a:	d132      	bne.n	10059402 <__arm_cp.14_10+0x1d2>
1005939c:	4638      	mov	r0, r7
1005939e:	4631      	mov	r1, r6
100593a0:	f7ff fd56 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
100593a4:	f000 fcae 	bl	10059d04 <LL_cpe_get_cpf>
100593a8:	2800      	cmp	r0, #0
100593aa:	9407      	str	r4, [sp, #28]
100593ac:	d100      	bne.n	100593b0 <__arm_cp.14_10+0x180>
100593ae:	e094      	b.n	100594da <__arm_cp.14_10+0x2aa>
100593b0:	4605      	mov	r5, r0
100593b2:	4620      	mov	r0, r4
100593b4:	f7fe f95f 	bl	10057676 <llc_conn_get_instant_passed>
100593b8:	2801      	cmp	r0, #1
100593ba:	d100      	bne.n	100593be <__arm_cp.14_10+0x18e>
100593bc:	e08f      	b.n	100594de <__arm_cp.14_10+0x2ae>
100593be:	2207      	movs	r2, #7
100593c0:	e08e      	b.n	100594e0 <__arm_cp.14_10+0x2b0>
100593c2:	2101      	movs	r1, #1
100593c4:	910a      	str	r1, [sp, #40]	@ 0x28
100593c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100593c8:	f7fe f944 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
100593cc:	49b2      	ldr	r1, [pc, #712]	@ (10059698 <__arm_cp.14_1>)
100593ce:	8001      	strh	r1, [r0, #0]
100593d0:	0671      	lsls	r1, r6, #25
100593d2:	0c49      	lsrs	r1, r1, #17
100593d4:	1c89      	adds	r1, r1, #2
100593d6:	8041      	strh	r1, [r0, #2]
100593d8:	8828      	ldrh	r0, [r5, #0]
100593da:	2102      	movs	r1, #2
100593dc:	4301      	orrs	r1, r0
100593de:	8029      	strh	r1, [r5, #0]
100593e0:	4638      	mov	r0, r7
100593e2:	f7fd fea1 	bl	10057128 <llc_conn_get_cntxt_per_p>
100593e6:	9d05      	ldr	r5, [sp, #20]
100593e8:	5505      	strb	r5, [r0, r4]
100593ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
100593ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
100593ee:	4621      	mov	r1, r4
100593f0:	f7fe fbf8 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
100593f4:	2204      	movs	r2, #4
100593f6:	4638      	mov	r0, r7
100593f8:	4621      	mov	r1, r4
100593fa:	462b      	mov	r3, r5
100593fc:	f7ff fcf7 	bl	10058dee <LL_cpe_set_active>
10059400:	e0db      	b.n	100595ba <__arm_cp.14_10+0x38a>
10059402:	2405      	movs	r4, #5
10059404:	e09e      	b.n	10059544 <__arm_cp.14_10+0x314>
10059406:	9f06      	ldr	r7, [sp, #24]
10059408:	e09c      	b.n	10059544 <__arm_cp.14_10+0x314>
1005940a:	2401      	movs	r4, #1
1005940c:	e09a      	b.n	10059544 <__arm_cp.14_10+0x314>
1005940e:	2401      	movs	r4, #1
10059410:	4638      	mov	r0, r7
10059412:	4621      	mov	r1, r4
10059414:	f7ff fcdd 	bl	10058dd2 <LL_cpe_get_active_status>
10059418:	2800      	cmp	r0, #0
1005941a:	d100      	bne.n	1005941e <__arm_cp.14_10+0x1ee>
1005941c:	e092      	b.n	10059544 <__arm_cp.14_10+0x314>
1005941e:	2402      	movs	r4, #2
10059420:	e090      	b.n	10059544 <__arm_cp.14_10+0x314>
10059422:	4626      	mov	r6, r4
10059424:	4638      	mov	r0, r7
10059426:	f000 fb31 	bl	10059a8c <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005942a:	4604      	mov	r4, r0
1005942c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005942e:	4241      	negs	r1, r0
10059430:	4141      	adcs	r1, r0
10059432:	4638      	mov	r0, r7
10059434:	f000 f96c 	bl	10059710 <ll_cpe_get_state>
10059438:	2c00      	cmp	r4, #0
1005943a:	d064      	beq.n	10059506 <__arm_cp.14_10+0x2d6>
1005943c:	4638      	mov	r0, r7
1005943e:	f7fd fe73 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059442:	2100      	movs	r1, #0
10059444:	f7fe f906 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10059448:	4638      	mov	r0, r7
1005944a:	f000 fc24 	bl	10059c96 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005944e:	4634      	mov	r4, r6
10059450:	e078      	b.n	10059544 <__arm_cp.14_10+0x314>
10059452:	9704      	str	r7, [sp, #16]
10059454:	22ff      	movs	r2, #255	@ 0xff
10059456:	4628      	mov	r0, r5
10059458:	4631      	mov	r1, r6
1005945a:	f000 fc24 	bl	10059ca6 <ll_cpe_check_instant_blocked>
1005945e:	2800      	cmp	r0, #0
10059460:	462f      	mov	r7, r5
10059462:	d16f      	bne.n	10059544 <__arm_cp.14_10+0x314>
10059464:	4638      	mov	r0, r7
10059466:	4631      	mov	r1, r6
10059468:	f7ff fcf2 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
1005946c:	f000 fc4a 	bl	10059d04 <LL_cpe_get_cpf>
10059470:	4604      	mov	r4, r0
10059472:	9807      	ldr	r0, [sp, #28]
10059474:	9d04      	ldr	r5, [sp, #16]
10059476:	4629      	mov	r1, r5
10059478:	f7fe f8ec 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
1005947c:	4603      	mov	r3, r0
1005947e:	2206      	movs	r2, #6
10059480:	4638      	mov	r0, r7
10059482:	4631      	mov	r1, r6
10059484:	9303      	str	r3, [sp, #12]
10059486:	47a0      	blx	r4
10059488:	4638      	mov	r0, r7
1005948a:	4631      	mov	r1, r6
1005948c:	f7ff fca1 	bl	10058dd2 <LL_cpe_get_active_status>
10059490:	2800      	cmp	r0, #0
10059492:	462c      	mov	r4, r5
10059494:	d056      	beq.n	10059544 <__arm_cp.14_10+0x314>
10059496:	4638      	mov	r0, r7
10059498:	4631      	mov	r1, r6
1005949a:	f7ff fca1 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005949e:	7801      	ldrb	r1, [r0, #0]
100594a0:	22ef      	movs	r2, #239	@ 0xef
100594a2:	400a      	ands	r2, r1
100594a4:	7002      	strb	r2, [r0, #0]
100594a6:	22ff      	movs	r2, #255	@ 0xff
100594a8:	4638      	mov	r0, r7
100594aa:	4631      	mov	r1, r6
100594ac:	f000 fc37 	bl	10059d1e <ll_cpe_set_expected_opcode>
100594b0:	2401      	movs	r4, #1
100594b2:	9807      	ldr	r0, [sp, #28]
100594b4:	4621      	mov	r1, r4
100594b6:	f7fe fb95 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
100594ba:	9a03      	ldr	r2, [sp, #12]
100594bc:	7850      	ldrb	r0, [r2, #1]
100594be:	2108      	movs	r1, #8
100594c0:	1c80      	adds	r0, r0, #2
100594c2:	b2c0      	uxtb	r0, r0
100594c4:	9100      	str	r1, [sp, #0]
100594c6:	9001      	str	r0, [sp, #4]
100594c8:	9202      	str	r2, [sp, #8]
100594ca:	2000      	movs	r0, #0
100594cc:	4621      	mov	r1, r4
100594ce:	4622      	mov	r2, r4
100594d0:	4623      	mov	r3, r4
100594d2:	f7f8 fefe 	bl	100522d2 <log_notify_stu_ucfg_weak>
100594d6:	2403      	movs	r4, #3
100594d8:	e034      	b.n	10059544 <__arm_cp.14_10+0x314>
100594da:	2405      	movs	r4, #5
100594dc:	e005      	b.n	100594ea <__arm_cp.14_10+0x2ba>
100594de:	2208      	movs	r2, #8
100594e0:	2300      	movs	r3, #0
100594e2:	4638      	mov	r0, r7
100594e4:	4631      	mov	r1, r6
100594e6:	47a8      	blx	r5
100594e8:	2401      	movs	r4, #1
100594ea:	9807      	ldr	r0, [sp, #28]
100594ec:	f7fd ffe4 	bl	100574b8 <llc_conn_clr_instant_reached_passed>
100594f0:	e028      	b.n	10059544 <__arm_cp.14_10+0x314>
100594f2:	2401      	movs	r4, #1
100594f4:	e023      	b.n	1005953e <__arm_cp.14_10+0x30e>
100594f6:	4638      	mov	r0, r7
100594f8:	4631      	mov	r1, r6
100594fa:	f000 f901 	bl	10059700 <ll_cpe_get_expected_opcode>
100594fe:	28ff      	cmp	r0, #255	@ 0xff
10059500:	d015      	beq.n	1005952e <__arm_cp.14_10+0x2fe>
10059502:	2404      	movs	r4, #4
10059504:	e01b      	b.n	1005953e <__arm_cp.14_10+0x30e>
10059506:	2804      	cmp	r0, #4
10059508:	d004      	beq.n	10059514 <__arm_cp.14_10+0x2e4>
1005950a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005950c:	2900      	cmp	r1, #0
1005950e:	d095      	beq.n	1005943c <__arm_cp.14_10+0x20c>
10059510:	2801      	cmp	r0, #1
10059512:	d193      	bne.n	1005943c <__arm_cp.14_10+0x20c>
10059514:	4638      	mov	r0, r7
10059516:	f7ff fc4f 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
1005951a:	8801      	ldrh	r1, [r0, #0]
1005951c:	2404      	movs	r4, #4
1005951e:	4321      	orrs	r1, r4
10059520:	8001      	strh	r1, [r0, #0]
10059522:	2015      	movs	r0, #21
10059524:	f006 fa24 	bl	1005f970 <tsk_notify_idx>
10059528:	f7f5 fbcb 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005952c:	e00a      	b.n	10059544 <__arm_cp.14_10+0x314>
1005952e:	2402      	movs	r4, #2
10059530:	e005      	b.n	1005953e <__arm_cp.14_10+0x30e>
10059532:	4638      	mov	r0, r7
10059534:	f7fd fdf8 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059538:	2100      	movs	r1, #0
1005953a:	f7fe f88b 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
1005953e:	4638      	mov	r0, r7
10059540:	f000 fba9 	bl	10059c96 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
10059544:	4638      	mov	r0, r7
10059546:	f7ff fc37 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
1005954a:	4606      	mov	r6, r0
1005954c:	8800      	ldrh	r0, [r0, #0]
1005954e:	06c0      	lsls	r0, r0, #27
10059550:	d527      	bpl.n	100595a2 <__arm_cp.14_10+0x372>
10059552:	4638      	mov	r0, r7
10059554:	f7fd fde8 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059558:	4605      	mov	r5, r0
1005955a:	f7fe f8a8 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
1005955e:	9407      	str	r4, [sp, #28]
10059560:	4604      	mov	r4, r0
10059562:	2100      	movs	r1, #0
10059564:	2201      	movs	r2, #1
10059566:	4638      	mov	r0, r7
10059568:	f000 f8b1 	bl	100596ce <ll_cpe_get_blocked_status>
1005956c:	4320      	orrs	r0, r4
1005956e:	9c07      	ldr	r4, [sp, #28]
10059570:	d117      	bne.n	100595a2 <__arm_cp.14_10+0x372>
10059572:	8837      	ldrh	r7, [r6, #0]
10059574:	2401      	movs	r4, #1
10059576:	4628      	mov	r0, r5
10059578:	4621      	mov	r1, r4
1005957a:	f7fe f86b 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
1005957e:	4946      	ldr	r1, [pc, #280]	@ (10059698 <__arm_cp.14_1>)
10059580:	8001      	strh	r1, [r0, #0]
10059582:	0979      	lsrs	r1, r7, #5
10059584:	9f06      	ldr	r7, [sp, #24]
10059586:	0209      	lsls	r1, r1, #8
10059588:	1dc9      	adds	r1, r1, #7
1005958a:	8041      	strh	r1, [r0, #2]
1005958c:	8830      	ldrh	r0, [r6, #0]
1005958e:	2108      	movs	r1, #8
10059590:	4301      	orrs	r1, r0
10059592:	2010      	movs	r0, #16
10059594:	4381      	bics	r1, r0
10059596:	8031      	strh	r1, [r6, #0]
10059598:	4628      	mov	r0, r5
1005959a:	4621      	mov	r1, r4
1005959c:	9c07      	ldr	r4, [sp, #28]
1005959e:	f7fe fb21 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
100595a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
100595a4:	42a0      	cmp	r0, r4
100595a6:	d004      	beq.n	100595b2 <__arm_cp.14_10+0x382>
100595a8:	4638      	mov	r0, r7
100595aa:	9908      	ldr	r1, [sp, #32]
100595ac:	4622      	mov	r2, r4
100595ae:	f000 fa5d 	bl	10059a6c <ll_cpe_set_state>
100595b2:	a80c      	add	r0, sp, #48	@ 0x30
100595b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100595b6:	1840      	adds	r0, r0, r1
100595b8:	7044      	strb	r4, [r0, #1]
100595ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100595bc:	e5fc      	b.n	100591b8 <LL_cpe_engine+0x2c8>
100595be:	a80c      	add	r0, sp, #48	@ 0x30
100595c0:	7802      	ldrb	r2, [r0, #0]
100595c2:	2001      	movs	r0, #1
100595c4:	2a02      	cmp	r2, #2
100595c6:	d008      	beq.n	100595da <__arm_cp.14_10+0x3aa>
100595c8:	a90c      	add	r1, sp, #48	@ 0x30
100595ca:	7849      	ldrb	r1, [r1, #1]
100595cc:	2902      	cmp	r1, #2
100595ce:	d004      	beq.n	100595da <__arm_cp.14_10+0x3aa>
100595d0:	2a03      	cmp	r2, #3
100595d2:	d002      	beq.n	100595da <__arm_cp.14_10+0x3aa>
100595d4:	1ec9      	subs	r1, r1, #3
100595d6:	4248      	negs	r0, r1
100595d8:	4148      	adcs	r0, r1
100595da:	b00d      	add	sp, #52	@ 0x34
100595dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100595de:	4260      	negs	r0, r4
100595e0:	4160      	adcs	r0, r4
100595e2:	e542      	b.n	1005906a <LL_cpe_engine+0x17a>
100595e4:	461c      	mov	r4, r3
100595e6:	f7fd f8cb 	bl	10056780 <pcl_csr_ucfg_weak>
100595ea:	e046      	b.n	1005967a <__arm_cp.14_10+0x44a>
100595ec:	461c      	mov	r4, r3
100595ee:	f7fd f8c5 	bl	1005677c <data_length_extension_csr_ucfg_weak>
100595f2:	e042      	b.n	1005967a <__arm_cp.14_10+0x44a>
100595f4:	461c      	mov	r4, r3
100595f6:	f7fd f865 	bl	100566c4 <cte_csr_ucfg_weak>
100595fa:	e03e      	b.n	1005967a <__arm_cp.14_10+0x44a>
100595fc:	461d      	mov	r5, r3
100595fe:	f7ff fb01 	bl	10058c04 <cis_csr_ucfg_weak>
10059602:	e022      	b.n	1005964a <__arm_cp.14_10+0x41a>
10059604:	461c      	mov	r4, r3
10059606:	f7f2 fbd9 	bl	1004bdbc <phy_upd_csr_ucfg>
1005960a:	e036      	b.n	1005967a <__arm_cp.14_10+0x44a>
1005960c:	461d      	mov	r5, r3
1005960e:	f7f2 fbd5 	bl	1004bdbc <phy_upd_csr_ucfg>
10059612:	e01a      	b.n	1005964a <__arm_cp.14_10+0x41a>
10059614:	461c      	mov	r4, r3
10059616:	f7ff faff 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005961a:	e027      	b.n	1005966c <__arm_cp.14_10+0x43c>
1005961c:	4265      	negs	r5, r4
1005961e:	4165      	adcs	r5, r4
10059620:	461c      	mov	r4, r3
10059622:	f7ff faef 	bl	10058c04 <cis_csr_ucfg_weak>
10059626:	e031      	b.n	1005968c <__arm_cp.14_10+0x45c>
10059628:	461c      	mov	r4, r3
1005962a:	f7ff faeb 	bl	10058c04 <cis_csr_ucfg_weak>
1005962e:	e024      	b.n	1005967a <__arm_cp.14_10+0x44a>
10059630:	4265      	negs	r5, r4
10059632:	4165      	adcs	r5, r4
10059634:	461c      	mov	r4, r3
10059636:	f7fd f8ab 	bl	10056790 <subrate_csr_ucfg_weak>
1005963a:	e027      	b.n	1005968c <__arm_cp.14_10+0x45c>
1005963c:	461d      	mov	r5, r3
1005963e:	f7fd f8a7 	bl	10056790 <subrate_csr_ucfg_weak>
10059642:	e002      	b.n	1005964a <__arm_cp.14_10+0x41a>
10059644:	461d      	mov	r5, r3
10059646:	f7fc ff48 	bl	100564da <chc_csr_ucfg_weak>
1005964a:	462b      	mov	r3, r5
1005964c:	1e41      	subs	r1, r0, #1
1005964e:	4188      	sbcs	r0, r1
10059650:	1e61      	subs	r1, r4, #1
10059652:	418c      	sbcs	r4, r1
10059654:	4004      	ands	r4, r0
10059656:	4620      	mov	r0, r4
10059658:	e507      	b.n	1005906a <LL_cpe_engine+0x17a>
1005965a:	4265      	negs	r5, r4
1005965c:	4165      	adcs	r5, r4
1005965e:	461c      	mov	r4, r3
10059660:	f7fc ff3b 	bl	100564da <chc_csr_ucfg_weak>
10059664:	e012      	b.n	1005968c <__arm_cp.14_10+0x45c>
10059666:	461c      	mov	r4, r3
10059668:	f7ff fad8 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005966c:	4623      	mov	r3, r4
1005966e:	2800      	cmp	r0, #0
10059670:	4638      	mov	r0, r7
10059672:	d100      	bne.n	10059676 <__arm_cp.14_10+0x446>
10059674:	e4f9      	b.n	1005906a <LL_cpe_engine+0x17a>
10059676:	f7fd f887 	bl	10056788 <scan_csr_ucfg_weak>
1005967a:	4623      	mov	r3, r4
1005967c:	1e41      	subs	r1, r0, #1
1005967e:	4188      	sbcs	r0, r1
10059680:	e4f3      	b.n	1005906a <LL_cpe_engine+0x17a>
10059682:	4265      	negs	r5, r4
10059684:	4165      	adcs	r5, r4
10059686:	461c      	mov	r4, r3
10059688:	f7f2 fb98 	bl	1004bdbc <phy_upd_csr_ucfg>
1005968c:	4623      	mov	r3, r4
1005968e:	1e41      	subs	r1, r0, #1
10059690:	4188      	sbcs	r0, r1
10059692:	4028      	ands	r0, r5
10059694:	e4e9      	b.n	1005906a <LL_cpe_engine+0x17a>
10059696:	46c0      	nop			@ (mov r8, r8)

10059698 <__arm_cp.14_1>:
10059698:	00000203 	.word	0x00000203

1005969c <ll_cpe_set_active>:
1005969c:	b580      	push	{r7, lr}
1005969e:	f7ff fb8b 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
100596a2:	8801      	ldrh	r1, [r0, #0]
100596a4:	2201      	movs	r2, #1
100596a6:	430a      	orrs	r2, r1
100596a8:	8002      	strh	r2, [r0, #0]
100596aa:	bd80      	pop	{r7, pc}

100596ac <ll_cpe_check_rx_pdu_can_be_processed>:
100596ac:	b510      	push	{r4, lr}
100596ae:	f7fd fd3b 	bl	10057128 <llc_conn_get_cntxt_per_p>
100596b2:	4604      	mov	r4, r0
100596b4:	f7fd ffe9 	bl	1005768a <llc_conn_get_rx_ctrl_pdu_full>
100596b8:	2800      	cmp	r0, #0
100596ba:	d006      	beq.n	100596ca <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
100596bc:	4620      	mov	r0, r4
100596be:	f7fd fff6 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
100596c2:	1ec0      	subs	r0, r0, #3
100596c4:	1e41      	subs	r1, r0, #1
100596c6:	4188      	sbcs	r0, r1
100596c8:	bd10      	pop	{r4, pc}
100596ca:	2000      	movs	r0, #0
100596cc:	bd10      	pop	{r4, pc}

100596ce <ll_cpe_get_blocked_status>:
100596ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100596d0:	4614      	mov	r4, r2
100596d2:	4607      	mov	r7, r0
100596d4:	424e      	negs	r6, r1
100596d6:	414e      	adcs	r6, r1
100596d8:	4631      	mov	r1, r6
100596da:	f7ff fb7a 	bl	10058dd2 <LL_cpe_get_active_status>
100596de:	2500      	movs	r5, #0
100596e0:	2800      	cmp	r0, #0
100596e2:	d00b      	beq.n	100596fc <ll_cpe_get_blocked_status+0x2e>
100596e4:	4638      	mov	r0, r7
100596e6:	4631      	mov	r1, r6
100596e8:	f7ff fb7a 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
100596ec:	2c02      	cmp	r4, #2
100596ee:	d805      	bhi.n	100596fc <ll_cpe_get_blocked_status+0x2e>
100596f0:	7800      	ldrb	r0, [r0, #0]
100596f2:	1c61      	adds	r1, r4, #1
100596f4:	b2c9      	uxtb	r1, r1
100596f6:	40c8      	lsrs	r0, r1
100596f8:	2501      	movs	r5, #1
100596fa:	4005      	ands	r5, r0
100596fc:	4628      	mov	r0, r5
100596fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059700 <ll_cpe_get_expected_opcode>:
10059700:	b510      	push	{r4, lr}
10059702:	460c      	mov	r4, r1
10059704:	f7fd fd10 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059708:	1900      	adds	r0, r0, r4
1005970a:	21ae      	movs	r1, #174	@ 0xae
1005970c:	5c40      	ldrb	r0, [r0, r1]
1005970e:	bd10      	pop	{r4, pc}

10059710 <ll_cpe_get_state>:
10059710:	b510      	push	{r4, lr}
10059712:	460c      	mov	r4, r1
10059714:	f7fd fd08 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059718:	1900      	adds	r0, r0, r4
1005971a:	21aa      	movs	r1, #170	@ 0xaa
1005971c:	5c40      	ldrb	r0, [r0, r1]
1005971e:	bd10      	pop	{r4, pc}

10059720 <LL_cpe_rxctrlpdu_checkreject>:
10059720:	b5b0      	push	{r4, r5, r7, lr}
10059722:	460c      	mov	r4, r1
10059724:	4605      	mov	r5, r0
10059726:	4610      	mov	r0, r2
10059728:	4619      	mov	r1, r3
1005972a:	f7ff fb91 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
1005972e:	4601      	mov	r1, r0
10059730:	2001      	movs	r0, #1
10059732:	2d0d      	cmp	r5, #13
10059734:	d102      	bne.n	1005973c <LL_cpe_rxctrlpdu_checkreject+0x1c>
10059736:	2901      	cmp	r1, #1
10059738:	d100      	bne.n	1005973c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005973a:	bdb0      	pop	{r4, r5, r7, pc}
1005973c:	2200      	movs	r2, #0
1005973e:	2d11      	cmp	r5, #17
10059740:	d001      	beq.n	10059746 <LL_cpe_rxctrlpdu_checkreject+0x26>
10059742:	2d07      	cmp	r5, #7
10059744:	d110      	bne.n	10059768 <LL_cpe_rxctrlpdu_checkreject+0x48>
10059746:	2c2a      	cmp	r4, #42	@ 0x2a
10059748:	d804      	bhi.n	10059754 <LL_cpe_rxctrlpdu_checkreject+0x34>
1005974a:	2303      	movs	r3, #3
1005974c:	4363      	muls	r3, r4
1005974e:	4d07      	ldr	r5, [pc, #28]	@ (1005976c <__arm_cp.20_0>)
10059750:	5ceb      	ldrb	r3, [r5, r3]
10059752:	e000      	b.n	10059756 <LL_cpe_rxctrlpdu_checkreject+0x36>
10059754:	2316      	movs	r3, #22
10059756:	4299      	cmp	r1, r3
10059758:	d106      	bne.n	10059768 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005975a:	2103      	movs	r1, #3
1005975c:	4361      	muls	r1, r4
1005975e:	4b03      	ldr	r3, [pc, #12]	@ (1005976c <__arm_cp.20_0>)
10059760:	1859      	adds	r1, r3, r1
10059762:	7889      	ldrb	r1, [r1, #2]
10059764:	2900      	cmp	r1, #0
10059766:	d1e8      	bne.n	1005973a <LL_cpe_rxctrlpdu_checkreject+0x1a>
10059768:	4610      	mov	r0, r2
1005976a:	bdb0      	pop	{r4, r5, r7, pc}

1005976c <__arm_cp.20_0>:
1005976c:	100660e0 	.word	0x100660e0

10059770 <valid_first_opcode>:
10059770:	b5b0      	push	{r4, r5, r7, lr}
10059772:	2300      	movs	r3, #0
10059774:	282a      	cmp	r0, #42	@ 0x2a
10059776:	d863      	bhi.n	10059840 <valid_first_opcode+0xd0>
10059778:	2403      	movs	r4, #3
1005977a:	4344      	muls	r4, r0
1005977c:	4d34      	ldr	r5, [pc, #208]	@ (10059850 <__arm_cp.21_0>)
1005977e:	192c      	adds	r4, r5, r4
10059780:	7864      	ldrb	r4, [r4, #1]
10059782:	4294      	cmp	r4, r2
10059784:	d15c      	bne.n	10059840 <valid_first_opcode+0xd0>
10059786:	282a      	cmp	r0, #42	@ 0x2a
10059788:	d85a      	bhi.n	10059840 <valid_first_opcode+0xd0>
1005978a:	0080      	lsls	r0, r0, #2
1005978c:	a201      	add	r2, pc, #4	@ (adr r2, 10059794 <valid_first_opcode+0x24>)
1005978e:	5810      	ldr	r0, [r2, r0]
10059790:	4687      	mov	pc, r0
10059792:	46c0      	nop			@ (mov r8, r8)
10059794:	10059843 	.word	0x10059843
10059798:	10059843 	.word	0x10059843
1005979c:	10059841 	.word	0x10059841
100597a0:	10059843 	.word	0x10059843
100597a4:	10059841 	.word	0x10059841
100597a8:	10059841 	.word	0x10059841
100597ac:	10059841 	.word	0x10059841
100597b0:	10059841 	.word	0x10059841
100597b4:	10059843 	.word	0x10059843
100597b8:	10059841 	.word	0x10059841
100597bc:	10059843 	.word	0x10059843
100597c0:	10059841 	.word	0x10059841
100597c4:	10059847 	.word	0x10059847
100597c8:	10059841 	.word	0x10059841
100597cc:	1005984b 	.word	0x1005984b
100597d0:	10059841 	.word	0x10059841
100597d4:	10059841 	.word	0x10059841
100597d8:	10059841 	.word	0x10059841
100597dc:	10059847 	.word	0x10059847
100597e0:	10059841 	.word	0x10059841
100597e4:	10059847 	.word	0x10059847
100597e8:	10059841 	.word	0x10059841
100597ec:	10059847 	.word	0x10059847
100597f0:	10059841 	.word	0x10059841
100597f4:	10059841 	.word	0x10059841
100597f8:	10059841 	.word	0x10059841
100597fc:	10059847 	.word	0x10059847
10059800:	10059841 	.word	0x10059841
10059804:	10059847 	.word	0x10059847
10059808:	10059847 	.word	0x10059847
1005980c:	10059841 	.word	0x10059841
10059810:	10059843 	.word	0x10059843
10059814:	10059841 	.word	0x10059841
10059818:	10059841 	.word	0x10059841
1005981c:	10059847 	.word	0x10059847
10059820:	10059847 	.word	0x10059847
10059824:	10059841 	.word	0x10059841
10059828:	10059847 	.word	0x10059847
1005982c:	10059847 	.word	0x10059847
10059830:	10059847 	.word	0x10059847
10059834:	10059847 	.word	0x10059847
10059838:	10059847 	.word	0x10059847
1005983c:	10059847 	.word	0x10059847
10059840:	4619      	mov	r1, r3
10059842:	4608      	mov	r0, r1
10059844:	bdb0      	pop	{r4, r5, r7, pc}
10059846:	2101      	movs	r1, #1
10059848:	e7fb      	b.n	10059842 <valid_first_opcode+0xd2>
1005984a:	4248      	negs	r0, r1
1005984c:	4141      	adcs	r1, r0
1005984e:	e7f8      	b.n	10059842 <valid_first_opcode+0xd2>

10059850 <__arm_cp.21_0>:
10059850:	100660e0 	.word	0x100660e0

10059854 <LL_cpe_init_phy_update>:
10059854:	b580      	push	{r7, lr}
10059856:	2007      	movs	r0, #7
10059858:	4901      	ldr	r1, [pc, #4]	@ (10059860 <__arm_cp.23_0>)
1005985a:	f7ff fab2 	bl	10058dc2 <LL_cpe_register_cpf>
1005985e:	bd80      	pop	{r7, pc}

10059860 <__arm_cp.23_0>:
10059860:	1005b26d 	.word	0x1005b26d

10059864 <LL_cpe_init_conn_update>:
10059864:	b580      	push	{r7, lr}
10059866:	2000      	movs	r0, #0
10059868:	4901      	ldr	r1, [pc, #4]	@ (10059870 <__arm_cp.28_0>)
1005986a:	f7ff faaa 	bl	10058dc2 <LL_cpe_register_cpf>
1005986e:	bd80      	pop	{r7, pc}

10059870 <__arm_cp.28_0>:
10059870:	10059e91 	.word	0x10059e91

10059874 <LL_cpe_init_chmap_update>:
10059874:	b580      	push	{r7, lr}
10059876:	2002      	movs	r0, #2
10059878:	4901      	ldr	r1, [pc, #4]	@ (10059880 <__arm_cp.29_0>)
1005987a:	f7ff faa2 	bl	10058dc2 <LL_cpe_register_cpf>
1005987e:	bd80      	pop	{r7, pc}

10059880 <__arm_cp.29_0>:
10059880:	10059d81 	.word	0x10059d81

10059884 <LL_cpe_init_length_update_ucfg_weak>:
10059884:	b580      	push	{r7, lr}
10059886:	2006      	movs	r0, #6
10059888:	2100      	movs	r1, #0
1005988a:	f7ff fa9a 	bl	10058dc2 <LL_cpe_register_cpf>
1005988e:	bd80      	pop	{r7, pc}

10059890 <LL_cpe_init_cte_ucfg_weak>:
10059890:	b580      	push	{r7, lr}
10059892:	200a      	movs	r0, #10
10059894:	2100      	movs	r1, #0
10059896:	f7ff fa94 	bl	10058dc2 <LL_cpe_register_cpf>
1005989a:	bd80      	pop	{r7, pc}

1005989c <LL_cpe_init_past_ucfg_weak>:
1005989c:	b580      	push	{r7, lr}
1005989e:	2009      	movs	r0, #9
100598a0:	2100      	movs	r1, #0
100598a2:	f7ff fa8e 	bl	10058dc2 <LL_cpe_register_cpf>
100598a6:	bd80      	pop	{r7, pc}

100598a8 <LL_cpe_init_pcl_ucfg_weak>:
100598a8:	b580      	push	{r7, lr}
100598aa:	200b      	movs	r0, #11
100598ac:	2100      	movs	r1, #0
100598ae:	f7ff fa88 	bl	10058dc2 <LL_cpe_register_cpf>
100598b2:	bd80      	pop	{r7, pc}

100598b4 <LL_cpe_init_chc_enable_ucfg_weak>:
100598b4:	b580      	push	{r7, lr}
100598b6:	200c      	movs	r0, #12
100598b8:	2100      	movs	r1, #0
100598ba:	f7ff fa82 	bl	10058dc2 <LL_cpe_register_cpf>
100598be:	bd80      	pop	{r7, pc}

100598c0 <LL_cpe_init_chc_reporting_ucfg_weak>:
100598c0:	b580      	push	{r7, lr}
100598c2:	200d      	movs	r0, #13
100598c4:	2100      	movs	r1, #0
100598c6:	f7ff fa7c 	bl	10058dc2 <LL_cpe_register_cpf>
100598ca:	bd80      	pop	{r7, pc}

100598cc <LL_cpe_init_subrate_ucfg_weak>:
100598cc:	b580      	push	{r7, lr}
100598ce:	2011      	movs	r0, #17
100598d0:	2100      	movs	r1, #0
100598d2:	f7ff fa76 	bl	10058dc2 <LL_cpe_register_cpf>
100598d6:	bd80      	pop	{r7, pc}

100598d8 <LL_cpe_init_sca_upd_ucfg_weak>:
100598d8:	b580      	push	{r7, lr}
100598da:	2012      	movs	r0, #18
100598dc:	2100      	movs	r1, #0
100598de:	f7ff fa70 	bl	10058dc2 <LL_cpe_register_cpf>
100598e2:	bd80      	pop	{r7, pc}

100598e4 <LL_cpe_init_cis_ucfg_weak>:
100598e4:	b510      	push	{r4, lr}
100598e6:	200e      	movs	r0, #14
100598e8:	2400      	movs	r4, #0
100598ea:	4621      	mov	r1, r4
100598ec:	f7ff fa69 	bl	10058dc2 <LL_cpe_register_cpf>
100598f0:	2010      	movs	r0, #16
100598f2:	4621      	mov	r1, r4
100598f4:	f7ff fa65 	bl	10058dc2 <LL_cpe_register_cpf>
100598f8:	bd10      	pop	{r4, pc}
	...

100598fc <LL_cpe_init>:
100598fc:	b5b0      	push	{r4, r5, r7, lr}
100598fe:	2001      	movs	r0, #1
10059900:	4918      	ldr	r1, [pc, #96]	@ (10059964 <__arm_cp.47_0>)
10059902:	4c19      	ldr	r4, [pc, #100]	@ (10059968 <__arm_cp.47_1>)
10059904:	47a0      	blx	r4
10059906:	2003      	movs	r0, #3
10059908:	4918      	ldr	r1, [pc, #96]	@ (1005996c <__arm_cp.47_2>)
1005990a:	47a0      	blx	r4
1005990c:	2005      	movs	r0, #5
1005990e:	4918      	ldr	r1, [pc, #96]	@ (10059970 <__arm_cp.47_3>)
10059910:	47a0      	blx	r4
10059912:	2008      	movs	r0, #8
10059914:	4917      	ldr	r1, [pc, #92]	@ (10059974 <__arm_cp.47_4>)
10059916:	47a0      	blx	r4
10059918:	f7f2 fb43 	bl	1004bfa2 <LL_cpe_init_conn_update_ucfg>
1005991c:	f7f2 fb48 	bl	1004bfb0 <LL_cpe_init_chmap_update_ucfg>
10059920:	f7ff ffb0 	bl	10059884 <LL_cpe_init_length_update_ucfg_weak>
10059924:	f7f2 fb36 	bl	1004bf94 <LL_cpe_init_phy_update_ucfg>
10059928:	f7ff ffb8 	bl	1005989c <LL_cpe_init_past_ucfg_weak>
1005992c:	f7ff ffb0 	bl	10059890 <LL_cpe_init_cte_ucfg_weak>
10059930:	f7ff ffba 	bl	100598a8 <LL_cpe_init_pcl_ucfg_weak>
10059934:	f7ff ffbe 	bl	100598b4 <LL_cpe_init_chc_enable_ucfg_weak>
10059938:	f7ff ffc2 	bl	100598c0 <LL_cpe_init_chc_reporting_ucfg_weak>
1005993c:	f7ff ffd2 	bl	100598e4 <LL_cpe_init_cis_ucfg_weak>
10059940:	f7ff ffc4 	bl	100598cc <LL_cpe_init_subrate_ucfg_weak>
10059944:	f7ff ffc8 	bl	100598d8 <LL_cpe_init_sca_upd_ucfg_weak>
10059948:	2400      	movs	r4, #0
1005994a:	4d0b      	ldr	r5, [pc, #44]	@ (10059978 <__arm_cp.47_5>)
1005994c:	6828      	ldr	r0, [r5, #0]
1005994e:	2134      	movs	r1, #52	@ 0x34
10059950:	5c41      	ldrb	r1, [r0, r1]
10059952:	b2e0      	uxtb	r0, r4
10059954:	4288      	cmp	r0, r1
10059956:	d203      	bcs.n	10059960 <LL_cpe_init+0x64>
10059958:	f000 f810 	bl	1005997c <ll_cpe_reset_state_machines>
1005995c:	1c64      	adds	r4, r4, #1
1005995e:	e7f5      	b.n	1005994c <LL_cpe_init+0x50>
10059960:	bdb0      	pop	{r4, r5, r7, pc}
10059962:	46c0      	nop			@ (mov r8, r8)

10059964 <__arm_cp.47_0>:
10059964:	1005a315 	.word	0x1005a315

10059968 <__arm_cp.47_1>:
10059968:	10058dc3 	.word	0x10058dc3

1005996c <__arm_cp.47_2>:
1005996c:	1005ab01 	.word	0x1005ab01

10059970 <__arm_cp.47_3>:
10059970:	1005bb35 	.word	0x1005bb35

10059974 <__arm_cp.47_4>:
10059974:	1005b0c1 	.word	0x1005b0c1

10059978 <__arm_cp.47_5>:
10059978:	20000ecc 	.word	0x20000ecc

1005997c <ll_cpe_reset_state_machines>:
1005997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005997e:	2638      	movs	r6, #56	@ 0x38
10059980:	4346      	muls	r6, r0
10059982:	9000      	str	r0, [sp, #0]
10059984:	f7fd fbd0 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059988:	4605      	mov	r5, r0
1005998a:	4816      	ldr	r0, [pc, #88]	@ (100599e4 <__arm_cp.48_0>)
1005998c:	6800      	ldr	r0, [r0, #0]
1005998e:	219c      	movs	r1, #156	@ 0x9c
10059990:	5842      	ldr	r2, [r0, r1]
10059992:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
10059994:	6892      	ldr	r2, [r2, #8]
10059996:	1992      	adds	r2, r2, r6
10059998:	23a0      	movs	r3, #160	@ 0xa0
1005999a:	50ea      	str	r2, [r5, r3]
1005999c:	5840      	ldr	r0, [r0, r1]
1005999e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100599a0:	68c0      	ldr	r0, [r0, #12]
100599a2:	1980      	adds	r0, r0, r6
100599a4:	462e      	mov	r6, r5
100599a6:	36a0      	adds	r6, #160	@ 0xa0
100599a8:	6070      	str	r0, [r6, #4]
100599aa:	27ae      	movs	r7, #174	@ 0xae
100599ac:	2fb0      	cmp	r7, #176	@ 0xb0
100599ae:	d00f      	beq.n	100599d0 <ll_cpe_reset_state_machines+0x54>
100599b0:	4638      	mov	r0, r7
100599b2:	38ae      	subs	r0, #174	@ 0xae
100599b4:	19e9      	adds	r1, r5, r7
100599b6:	1f09      	subs	r1, r1, #4
100599b8:	2400      	movs	r4, #0
100599ba:	700c      	strb	r4, [r1, #0]
100599bc:	b2c1      	uxtb	r1, r0
100599be:	9800      	ldr	r0, [sp, #0]
100599c0:	f7ff fa0e 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
100599c4:	7004      	strb	r4, [r0, #0]
100599c6:	20ff      	movs	r0, #255	@ 0xff
100599c8:	55e8      	strb	r0, [r5, r7]
100599ca:	74f4      	strb	r4, [r6, #19]
100599cc:	1c7f      	adds	r7, r7, #1
100599ce:	e7ed      	b.n	100599ac <ll_cpe_reset_state_machines+0x30>
100599d0:	2400      	movs	r4, #0
100599d2:	74b4      	strb	r4, [r6, #18]
100599d4:	9800      	ldr	r0, [sp, #0]
100599d6:	f7ff f9ef 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
100599da:	8004      	strh	r4, [r0, #0]
100599dc:	4802      	ldr	r0, [pc, #8]	@ (100599e8 <__arm_cp.48_1>)
100599de:	8768      	strh	r0, [r5, #58]	@ 0x3a
100599e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100599e2:	46c0      	nop			@ (mov r8, r8)

100599e4 <__arm_cp.48_0>:
100599e4:	20000f20 	.word	0x20000f20

100599e8 <__arm_cp.48_1>:
100599e8:	0000ffff 	.word	0x0000ffff

100599ec <LL_cpe_set_disconnect>:
100599ec:	b510      	push	{r4, lr}
100599ee:	2480      	movs	r4, #128	@ 0x80
100599f0:	430c      	orrs	r4, r1
100599f2:	f7fd fb99 	bl	10057128 <llc_conn_get_cntxt_per_p>
100599f6:	21b2      	movs	r1, #178	@ 0xb2
100599f8:	5444      	strb	r4, [r0, r1]
100599fa:	2015      	movs	r0, #21
100599fc:	f005 ffb8 	bl	1005f970 <tsk_notify_idx>
10059a00:	f7f5 f95f 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10059a04:	bd10      	pop	{r4, pc}

10059a06 <LL_cpe_get_tx_terminate_in_progress>:
10059a06:	b580      	push	{r7, lr}
10059a08:	f7ff f9d6 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
10059a0c:	7800      	ldrb	r0, [r0, #0]
10059a0e:	0780      	lsls	r0, r0, #30
10059a10:	0fc0      	lsrs	r0, r0, #31
10059a12:	bd80      	pop	{r7, pc}

10059a14 <LL_cpe_conn_exception_opcode_from_sm>:
10059a14:	b580      	push	{r7, lr}
10059a16:	f7ff fa1b 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10059a1a:	21fd      	movs	r1, #253	@ 0xfd
10059a1c:	4008      	ands	r0, r1
10059a1e:	4241      	negs	r1, r0
10059a20:	4148      	adcs	r0, r1
10059a22:	bd80      	pop	{r7, pc}

10059a24 <LL_cpe_conn_get_proc_id_from_sm>:
10059a24:	b580      	push	{r7, lr}
10059a26:	f7ff fa13 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10059a2a:	bd80      	pop	{r7, pc}

10059a2c <llc_cpe_calc_instant>:
10059a2c:	b580      	push	{r7, lr}
10059a2e:	f7fd fb7b 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059a32:	2142      	movs	r1, #66	@ 0x42
10059a34:	5a41      	ldrh	r1, [r0, r1]
10059a36:	2291      	movs	r2, #145	@ 0x91
10059a38:	0052      	lsls	r2, r2, #1
10059a3a:	5a82      	ldrh	r2, [r0, r2]
10059a3c:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
10059a3e:	1c40      	adds	r0, r0, #1
10059a40:	4350      	muls	r0, r2
10059a42:	2206      	movs	r2, #6
10059a44:	4342      	muls	r2, r0
10059a46:	1850      	adds	r0, r2, r1
10059a48:	b280      	uxth	r0, r0
10059a4a:	bd80      	pop	{r7, pc}

10059a4c <llc_cpe_init_sm_ctxt>:
10059a4c:	b5b0      	push	{r4, r5, r7, lr}
10059a4e:	4604      	mov	r4, r0
10059a50:	f7ff fe24 	bl	1005969c <ll_cpe_set_active>
10059a54:	4620      	mov	r0, r4
10059a56:	f7fd fb67 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059a5a:	21aa      	movs	r1, #170	@ 0xaa
10059a5c:	2501      	movs	r5, #1
10059a5e:	5445      	strb	r5, [r0, r1]
10059a60:	4620      	mov	r0, r4
10059a62:	f7fd fb61 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059a66:	21ab      	movs	r1, #171	@ 0xab
10059a68:	5445      	strb	r5, [r0, r1]
10059a6a:	bdb0      	pop	{r4, r5, r7, pc}

10059a6c <ll_cpe_set_state>:
10059a6c:	b5b0      	push	{r4, r5, r7, lr}
10059a6e:	4614      	mov	r4, r2
10059a70:	460d      	mov	r5, r1
10059a72:	f7fd fb59 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059a76:	1940      	adds	r0, r0, r5
10059a78:	21aa      	movs	r1, #170	@ 0xaa
10059a7a:	5444      	strb	r4, [r0, r1]
10059a7c:	bdb0      	pop	{r4, r5, r7, pc}

10059a7e <ll_cpe_get_active>:
10059a7e:	b580      	push	{r7, lr}
10059a80:	f7ff f99a 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
10059a84:	8801      	ldrh	r1, [r0, #0]
10059a86:	2001      	movs	r0, #1
10059a88:	4008      	ands	r0, r1
10059a8a:	bd80      	pop	{r7, pc}

10059a8c <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
10059a8c:	b580      	push	{r7, lr}
10059a8e:	f7ff f993 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
10059a92:	7800      	ldrb	r0, [r0, #0]
10059a94:	0740      	lsls	r0, r0, #29
10059a96:	0fc0      	lsrs	r0, r0, #31
10059a98:	bd80      	pop	{r7, pc}
	...

10059a9c <ll_cpe_process_rx_pdu>:
10059a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10059a9e:	b08f      	sub	sp, #60	@ 0x3c
10059aa0:	9206      	str	r2, [sp, #24]
10059aa2:	460d      	mov	r5, r1
10059aa4:	4606      	mov	r6, r0
10059aa6:	f7fd fb3f 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059aaa:	212c      	movs	r1, #44	@ 0x2c
10059aac:	5c41      	ldrb	r1, [r0, r1]
10059aae:	1ec9      	subs	r1, r1, #3
10059ab0:	424a      	negs	r2, r1
10059ab2:	414a      	adcs	r2, r1
10059ab4:	9205      	str	r2, [sp, #20]
10059ab6:	2400      	movs	r4, #0
10059ab8:	900a      	str	r0, [sp, #40]	@ 0x28
10059aba:	4621      	mov	r1, r4
10059abc:	f7fd fdca 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10059ac0:	7841      	ldrb	r1, [r0, #1]
10059ac2:	9104      	str	r1, [sp, #16]
10059ac4:	9009      	str	r0, [sp, #36]	@ 0x24
10059ac6:	8847      	ldrh	r7, [r0, #2]
10059ac8:	4630      	mov	r0, r6
10059aca:	4629      	mov	r1, r5
10059acc:	f7ff fe18 	bl	10059700 <ll_cpe_get_expected_opcode>
10059ad0:	9003      	str	r0, [sp, #12]
10059ad2:	4630      	mov	r0, r6
10059ad4:	4629      	mov	r1, r5
10059ad6:	9407      	str	r4, [sp, #28]
10059ad8:	4622      	mov	r2, r4
10059ada:	f7ff fdf8 	bl	100596ce <ll_cpe_get_blocked_status>
10059ade:	900b      	str	r0, [sp, #44]	@ 0x2c
10059ae0:	b2fa      	uxtb	r2, r7
10059ae2:	4630      	mov	r0, r6
10059ae4:	4629      	mov	r1, r5
10059ae6:	920e      	str	r2, [sp, #56]	@ 0x38
10059ae8:	f000 f8dd 	bl	10059ca6 <ll_cpe_check_instant_blocked>
10059aec:	900c      	str	r0, [sp, #48]	@ 0x30
10059aee:	426c      	negs	r4, r5
10059af0:	9508      	str	r5, [sp, #32]
10059af2:	416c      	adcs	r4, r5
10059af4:	4630      	mov	r0, r6
10059af6:	4621      	mov	r1, r4
10059af8:	f7ff fe0a 	bl	10059710 <ll_cpe_get_state>
10059afc:	4605      	mov	r5, r0
10059afe:	960d      	str	r6, [sp, #52]	@ 0x34
10059b00:	4630      	mov	r0, r6
10059b02:	4621      	mov	r1, r4
10059b04:	f7ff fdfc 	bl	10059700 <ll_cpe_get_expected_opcode>
10059b08:	463a      	mov	r2, r7
10059b0a:	1ff9      	subs	r1, r7, #7
10059b0c:	b2cb      	uxtb	r3, r1
10059b0e:	2b0b      	cmp	r3, #11
10059b10:	d302      	bcc.n	10059b18 <ll_cpe_process_rx_pdu+0x7c>
10059b12:	990e      	ldr	r1, [sp, #56]	@ 0x38
10059b14:	9f07      	ldr	r7, [sp, #28]
10059b16:	e001      	b.n	10059b1c <ll_cpe_process_rx_pdu+0x80>
10059b18:	2701      	movs	r7, #1
10059b1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
10059b1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
10059b1e:	2e01      	cmp	r6, #1
10059b20:	d103      	bne.n	10059b2a <ll_cpe_process_rx_pdu+0x8e>
10059b22:	2d04      	cmp	r5, #4
10059b24:	d147      	bne.n	10059bb6 <ll_cpe_process_rx_pdu+0x11a>
10059b26:	4288      	cmp	r0, r1
10059b28:	d145      	bne.n	10059bb6 <ll_cpe_process_rx_pdu+0x11a>
10059b2a:	4955      	ldr	r1, [pc, #340]	@ (10059c80 <__arm_cp.58_0>)
10059b2c:	40d9      	lsrs	r1, r3
10059b2e:	400f      	ands	r7, r1
10059b30:	0a16      	lsrs	r6, r2, #8
10059b32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10059b34:	2901      	cmp	r1, #1
10059b36:	d11d      	bne.n	10059b74 <ll_cpe_process_rx_pdu+0xd8>
10059b38:	900c      	str	r0, [sp, #48]	@ 0x30
10059b3a:	980e      	ldr	r0, [sp, #56]	@ 0x38
10059b3c:	4631      	mov	r1, r6
10059b3e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10059b40:	4632      	mov	r2, r6
10059b42:	4623      	mov	r3, r4
10059b44:	f7ff fdec 	bl	10059720 <LL_cpe_rxctrlpdu_checkreject>
10059b48:	2d04      	cmp	r5, #4
10059b4a:	d10c      	bne.n	10059b66 <ll_cpe_process_rx_pdu+0xca>
10059b4c:	2101      	movs	r1, #1
10059b4e:	404f      	eors	r7, r1
10059b50:	d101      	bne.n	10059b56 <ll_cpe_process_rx_pdu+0xba>
10059b52:	2800      	cmp	r0, #0
10059b54:	d007      	beq.n	10059b66 <ll_cpe_process_rx_pdu+0xca>
10059b56:	980c      	ldr	r0, [sp, #48]	@ 0x30
10059b58:	990e      	ldr	r1, [sp, #56]	@ 0x38
10059b5a:	1a40      	subs	r0, r0, r1
10059b5c:	1e41      	subs	r1, r0, #1
10059b5e:	4188      	sbcs	r0, r1
10059b60:	4007      	ands	r7, r0
10059b62:	2f01      	cmp	r7, #1
10059b64:	d16e      	bne.n	10059c44 <ll_cpe_process_rx_pdu+0x1a8>
10059b66:	4630      	mov	r0, r6
10059b68:	4621      	mov	r1, r4
10059b6a:	f7ff f971 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10059b6e:	4605      	mov	r5, r0
10059b70:	2605      	movs	r6, #5
10059b72:	e026      	b.n	10059bc2 <ll_cpe_process_rx_pdu+0x126>
10059b74:	2400      	movs	r4, #0
10059b76:	9806      	ldr	r0, [sp, #24]
10059b78:	2803      	cmp	r0, #3
10059b7a:	d049      	beq.n	10059c10 <ll_cpe_process_rx_pdu+0x174>
10059b7c:	2801      	cmp	r0, #1
10059b7e:	d144      	bne.n	10059c0a <ll_cpe_process_rx_pdu+0x16e>
10059b80:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10059b82:	4630      	mov	r0, r6
10059b84:	9905      	ldr	r1, [sp, #20]
10059b86:	9a04      	ldr	r2, [sp, #16]
10059b88:	f7ff fdf2 	bl	10059770 <valid_first_opcode>
10059b8c:	2801      	cmp	r0, #1
10059b8e:	d13c      	bne.n	10059c0a <ll_cpe_process_rx_pdu+0x16e>
10059b90:	2401      	movs	r4, #1
10059b92:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10059b94:	4628      	mov	r0, r5
10059b96:	4621      	mov	r1, r4
10059b98:	f7ff f91b 	bl	10058dd2 <LL_cpe_get_active_status>
10059b9c:	4607      	mov	r7, r0
10059b9e:	4628      	mov	r0, r5
10059ba0:	4621      	mov	r1, r4
10059ba2:	f000 f897 	bl	10059cd4 <ll_cpe_get_instant_supported>
10059ba6:	4605      	mov	r5, r0
10059ba8:	4630      	mov	r0, r6
10059baa:	f000 f89b 	bl	10059ce4 <LL_cpe_is_opcode_supporting_instant>
10059bae:	2801      	cmp	r0, #1
10059bb0:	d04a      	beq.n	10059c48 <ll_cpe_process_rx_pdu+0x1ac>
10059bb2:	4622      	mov	r2, r4
10059bb4:	e049      	b.n	10059c4a <ll_cpe_process_rx_pdu+0x1ae>
10059bb6:	980d      	ldr	r0, [sp, #52]	@ 0x34
10059bb8:	4621      	mov	r1, r4
10059bba:	f7ff f949 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10059bbe:	4605      	mov	r5, r0
10059bc0:	2604      	movs	r6, #4
10059bc2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
10059bc4:	7878      	ldrb	r0, [r7, #1]
10059bc6:	2110      	movs	r1, #16
10059bc8:	1c80      	adds	r0, r0, #2
10059bca:	b2c0      	uxtb	r0, r0
10059bcc:	9100      	str	r1, [sp, #0]
10059bce:	9001      	str	r0, [sp, #4]
10059bd0:	9702      	str	r7, [sp, #8]
10059bd2:	2401      	movs	r4, #1
10059bd4:	2000      	movs	r0, #0
10059bd6:	4621      	mov	r1, r4
10059bd8:	4622      	mov	r2, r4
10059bda:	4603      	mov	r3, r0
10059bdc:	f7f8 fb79 	bl	100522d2 <log_notify_stu_ucfg_weak>
10059be0:	4628      	mov	r0, r5
10059be2:	f000 f88f 	bl	10059d04 <LL_cpe_get_cpf>
10059be6:	2800      	cmp	r0, #0
10059be8:	d00c      	beq.n	10059c04 <ll_cpe_process_rx_pdu+0x168>
10059bea:	4605      	mov	r5, r0
10059bec:	4632      	mov	r2, r6
10059bee:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10059bf0:	4630      	mov	r0, r6
10059bf2:	463b      	mov	r3, r7
10059bf4:	9f08      	ldr	r7, [sp, #32]
10059bf6:	4639      	mov	r1, r7
10059bf8:	47a8      	blx	r5
10059bfa:	4602      	mov	r2, r0
10059bfc:	4630      	mov	r0, r6
10059bfe:	4639      	mov	r1, r7
10059c00:	f000 f88d 	bl	10059d1e <ll_cpe_set_expected_opcode>
10059c04:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059c06:	f7fd fc6b 	bl	100574e0 <llc_conn_clr_rx_ctrl_pdu_full>
10059c0a:	4620      	mov	r0, r4
10059c0c:	b00f      	add	sp, #60	@ 0x3c
10059c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059c10:	980d      	ldr	r0, [sp, #52]	@ 0x34
10059c12:	9d08      	ldr	r5, [sp, #32]
10059c14:	4629      	mov	r1, r5
10059c16:	f7ff f91b 	bl	10058e50 <ll_cpe_get_cpid_from_sm>
10059c1a:	900c      	str	r0, [sp, #48]	@ 0x30
10059c1c:	2f00      	cmp	r7, #0
10059c1e:	d009      	beq.n	10059c34 <ll_cpe_process_rx_pdu+0x198>
10059c20:	980e      	ldr	r0, [sp, #56]	@ 0x38
10059c22:	4631      	mov	r1, r6
10059c24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10059c26:	462b      	mov	r3, r5
10059c28:	f7ff fd7a 	bl	10059720 <LL_cpe_rxctrlpdu_checkreject>
10059c2c:	4604      	mov	r4, r0
10059c2e:	2801      	cmp	r0, #1
10059c30:	d004      	beq.n	10059c3c <ll_cpe_process_rx_pdu+0x1a0>
10059c32:	e7ea      	b.n	10059c0a <ll_cpe_process_rx_pdu+0x16e>
10059c34:	9803      	ldr	r0, [sp, #12]
10059c36:	990e      	ldr	r1, [sp, #56]	@ 0x38
10059c38:	4288      	cmp	r0, r1
10059c3a:	d113      	bne.n	10059c64 <ll_cpe_process_rx_pdu+0x1c8>
10059c3c:	2603      	movs	r6, #3
10059c3e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
10059c40:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10059c42:	e7bf      	b.n	10059bc4 <ll_cpe_process_rx_pdu+0x128>
10059c44:	2400      	movs	r4, #0
10059c46:	e7e0      	b.n	10059c0a <ll_cpe_process_rx_pdu+0x16e>
10059c48:	2202      	movs	r2, #2
10059c4a:	4067      	eors	r7, r4
10059c4c:	4065      	eors	r5, r4
10059c4e:	433d      	orrs	r5, r7
10059c50:	9f09      	ldr	r7, [sp, #36]	@ 0x24
10059c52:	d000      	beq.n	10059c56 <ll_cpe_process_rx_pdu+0x1ba>
10059c54:	4622      	mov	r2, r4
10059c56:	2e2a      	cmp	r6, #42	@ 0x2a
10059c58:	d80e      	bhi.n	10059c78 <ll_cpe_process_rx_pdu+0x1dc>
10059c5a:	2003      	movs	r0, #3
10059c5c:	4370      	muls	r0, r6
10059c5e:	4909      	ldr	r1, [pc, #36]	@ (10059c84 <__arm_cp.58_1>)
10059c60:	5c0d      	ldrb	r5, [r1, r0]
10059c62:	e00a      	b.n	10059c7a <ll_cpe_process_rx_pdu+0x1de>
10059c64:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059c66:	f7fd fd16 	bl	10057696 <llc_conn_get_rx_acl_blocked>
10059c6a:	2801      	cmp	r0, #1
10059c6c:	d1cd      	bne.n	10059c0a <ll_cpe_process_rx_pdu+0x16e>
10059c6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
10059c70:	2801      	cmp	r0, #1
10059c72:	d1ca      	bne.n	10059c0a <ll_cpe_process_rx_pdu+0x16e>
10059c74:	2501      	movs	r5, #1
10059c76:	e77b      	b.n	10059b70 <ll_cpe_process_rx_pdu+0xd4>
10059c78:	2516      	movs	r5, #22
10059c7a:	4616      	mov	r6, r2
10059c7c:	e7a2      	b.n	10059bc4 <ll_cpe_process_rx_pdu+0x128>
10059c7e:	46c0      	nop			@ (mov r8, r8)

10059c80 <__arm_cp.58_0>:
10059c80:	00000441 	.word	0x00000441

10059c84 <__arm_cp.58_1>:
10059c84:	100660e0 	.word	0x100660e0

10059c88 <ll_cpe_get_instant_active>:
10059c88:	b580      	push	{r7, lr}
10059c8a:	f7ff f8a9 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10059c8e:	7800      	ldrb	r0, [r0, #0]
10059c90:	0640      	lsls	r0, r0, #25
10059c92:	0fc0      	lsrs	r0, r0, #31
10059c94:	bd80      	pop	{r7, pc}

10059c96 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
10059c96:	b580      	push	{r7, lr}
10059c98:	f7ff f88e 	bl	10058db8 <LL_cpe_get_ctrl_flds_common_p>
10059c9c:	8801      	ldrh	r1, [r0, #0]
10059c9e:	2204      	movs	r2, #4
10059ca0:	4391      	bics	r1, r2
10059ca2:	8001      	strh	r1, [r0, #0]
10059ca4:	bd80      	pop	{r7, pc}

10059ca6 <ll_cpe_check_instant_blocked>:
10059ca6:	b5b0      	push	{r4, r5, r7, lr}
10059ca8:	460c      	mov	r4, r1
10059caa:	4605      	mov	r5, r0
10059cac:	2aff      	cmp	r2, #255	@ 0xff
10059cae:	d003      	beq.n	10059cb8 <ll_cpe_check_instant_blocked+0x12>
10059cb0:	4610      	mov	r0, r2
10059cb2:	f000 f817 	bl	10059ce4 <LL_cpe_is_opcode_supporting_instant>
10059cb6:	e003      	b.n	10059cc0 <ll_cpe_check_instant_blocked+0x1a>
10059cb8:	4628      	mov	r0, r5
10059cba:	4621      	mov	r1, r4
10059cbc:	f000 f80a 	bl	10059cd4 <ll_cpe_get_instant_supported>
10059cc0:	2800      	cmp	r0, #0
10059cc2:	d005      	beq.n	10059cd0 <ll_cpe_check_instant_blocked+0x2a>
10059cc4:	2202      	movs	r2, #2
10059cc6:	4628      	mov	r0, r5
10059cc8:	4621      	mov	r1, r4
10059cca:	f7ff fd00 	bl	100596ce <ll_cpe_get_blocked_status>
10059cce:	bdb0      	pop	{r4, r5, r7, pc}
10059cd0:	2000      	movs	r0, #0
10059cd2:	bdb0      	pop	{r4, r5, r7, pc}

10059cd4 <ll_cpe_get_instant_supported>:
10059cd4:	b580      	push	{r7, lr}
10059cd6:	f7ff f883 	bl	10058de0 <ll_cpe_get_ctrl_flds_per_sm_p>
10059cda:	7800      	ldrb	r0, [r0, #0]
10059cdc:	0680      	lsls	r0, r0, #26
10059cde:	0fc0      	lsrs	r0, r0, #31
10059ce0:	bd80      	pop	{r7, pc}
	...

10059ce4 <LL_cpe_is_opcode_supporting_instant>:
10059ce4:	b510      	push	{r4, lr}
10059ce6:	4601      	mov	r1, r0
10059ce8:	2000      	movs	r0, #0
10059cea:	a205      	add	r2, pc, #20	@ (adr r2, 10059d00 <LL_cpe_is_opcode_supporting_instant+0x1c>)
10059cec:	4603      	mov	r3, r0
10059cee:	2b04      	cmp	r3, #4
10059cf0:	d004      	beq.n	10059cfc <LL_cpe_is_opcode_supporting_instant+0x18>
10059cf2:	5cd4      	ldrb	r4, [r2, r3]
10059cf4:	1c5b      	adds	r3, r3, #1
10059cf6:	428c      	cmp	r4, r1
10059cf8:	d1f9      	bne.n	10059cee <LL_cpe_is_opcode_supporting_instant+0xa>
10059cfa:	2001      	movs	r0, #1
10059cfc:	bd10      	pop	{r4, pc}
10059cfe:	46c0      	nop			@ (mov r8, r8)
10059d00:	1f160001 	.word	0x1f160001

10059d04 <LL_cpe_get_cpf>:
10059d04:	b510      	push	{r4, lr}
10059d06:	4601      	mov	r1, r0
10059d08:	3914      	subs	r1, #20
10059d0a:	2903      	cmp	r1, #3
10059d0c:	d201      	bcs.n	10059d12 <LL_cpe_get_cpf+0xe>
10059d0e:	2000      	movs	r0, #0
10059d10:	bd10      	pop	{r4, pc}
10059d12:	0084      	lsls	r4, r0, #2
10059d14:	f7fd f9fe 	bl	10057114 <llc_conn_get_cntxt_p>
10059d18:	6880      	ldr	r0, [r0, #8]
10059d1a:	5900      	ldr	r0, [r0, r4]
10059d1c:	bd10      	pop	{r4, pc}

10059d1e <ll_cpe_set_expected_opcode>:
10059d1e:	b5b0      	push	{r4, r5, r7, lr}
10059d20:	4614      	mov	r4, r2
10059d22:	460d      	mov	r5, r1
10059d24:	f7fd fa00 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059d28:	1940      	adds	r0, r0, r5
10059d2a:	21ae      	movs	r1, #174	@ 0xae
10059d2c:	5444      	strb	r4, [r0, r1]
10059d2e:	bdb0      	pop	{r4, r5, r7, pc}

10059d30 <LL_channel_map_update_param_check>:
10059d30:	b5b0      	push	{r4, r5, r7, lr}
10059d32:	4601      	mov	r1, r0
10059d34:	7900      	ldrb	r0, [r0, #4]
10059d36:	281f      	cmp	r0, #31
10059d38:	d811      	bhi.n	10059d5e <LL_channel_map_update_param_check+0x2e>
10059d3a:	2000      	movs	r0, #0
10059d3c:	4602      	mov	r2, r0
10059d3e:	4603      	mov	r3, r0
10059d40:	2a25      	cmp	r2, #37	@ 0x25
10059d42:	d00f      	beq.n	10059d64 <LL_channel_map_update_param_check+0x34>
10059d44:	2407      	movs	r4, #7
10059d46:	4014      	ands	r4, r2
10059d48:	08d5      	lsrs	r5, r2, #3
10059d4a:	5d4d      	ldrb	r5, [r1, r5]
10059d4c:	40e5      	lsrs	r5, r4
10059d4e:	07ec      	lsls	r4, r5, #31
10059d50:	d003      	beq.n	10059d5a <LL_channel_map_update_param_check+0x2a>
10059d52:	1c5b      	adds	r3, r3, #1
10059d54:	b2dc      	uxtb	r4, r3
10059d56:	2c02      	cmp	r4, #2
10059d58:	d003      	beq.n	10059d62 <LL_channel_map_update_param_check+0x32>
10059d5a:	1c52      	adds	r2, r2, #1
10059d5c:	e7f0      	b.n	10059d40 <LL_channel_map_update_param_check+0x10>
10059d5e:	2000      	movs	r0, #0
10059d60:	bdb0      	pop	{r4, r5, r7, pc}
10059d62:	2001      	movs	r0, #1
10059d64:	bdb0      	pop	{r4, r5, r7, pc}
	...

10059d68 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
10059d68:	b580      	push	{r7, lr}
10059d6a:	4904      	ldr	r1, [pc, #16]	@ (10059d7c <__arm_cp.1_0>)
10059d6c:	6809      	ldr	r1, [r1, #0]
10059d6e:	229c      	movs	r2, #156	@ 0x9c
10059d70:	5889      	ldr	r1, [r1, r2]
10059d72:	3148      	adds	r1, #72	@ 0x48
10059d74:	2205      	movs	r2, #5
10059d76:	f7f5 fd65 	bl	1004f844 <BLEPLAT_MemCpy>
10059d7a:	bd80      	pop	{r7, pc}

10059d7c <__arm_cp.1_0>:
10059d7c:	20000f20 	.word	0x20000f20

10059d80 <LL_channel_map_update>:
10059d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10059d82:	b085      	sub	sp, #20
10059d84:	461e      	mov	r6, r3
10059d86:	4617      	mov	r7, r2
10059d88:	4605      	mov	r5, r0
10059d8a:	9103      	str	r1, [sp, #12]
10059d8c:	f7ff f885 	bl	10058e9a <LL_cpe_get_cntxt>
10059d90:	4604      	mov	r4, r0
10059d92:	4628      	mov	r0, r5
10059d94:	f7fd f9c8 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059d98:	4602      	mov	r2, r0
10059d9a:	1e78      	subs	r0, r7, #1
10059d9c:	2806      	cmp	r0, #6
10059d9e:	d86c      	bhi.n	10059e7a <LL_channel_map_update+0xfa>
10059da0:	4478      	add	r0, pc
10059da2:	7900      	ldrb	r0, [r0, #4]
10059da4:	0040      	lsls	r0, r0, #1
10059da6:	4487      	add	pc, r0
10059da8:	30680303 	.word	0x30680303
10059dac:	005a3568 	.word	0x005a3568
10059db0:	202c      	movs	r0, #44	@ 0x2c
10059db2:	5c10      	ldrb	r0, [r2, r0]
10059db4:	2803      	cmp	r0, #3
10059db6:	d160      	bne.n	10059e7a <LL_channel_map_update+0xfa>
10059db8:	9202      	str	r2, [sp, #8]
10059dba:	1cf0      	adds	r0, r6, #3
10059dbc:	4607      	mov	r7, r0
10059dbe:	f7ff ffb7 	bl	10059d30 <LL_channel_map_update_param_check>
10059dc2:	2801      	cmp	r0, #1
10059dc4:	d151      	bne.n	10059e6a <LL_channel_map_update+0xea>
10059dc6:	7a30      	ldrb	r0, [r6, #8]
10059dc8:	9001      	str	r0, [sp, #4]
10059dca:	7a76      	ldrb	r6, [r6, #9]
10059dcc:	2205      	movs	r2, #5
10059dce:	4638      	mov	r0, r7
10059dd0:	4621      	mov	r1, r4
10059dd2:	f005 ff55 	bl	1005fc80 <char_copy>
10059dd6:	0230      	lsls	r0, r6, #8
10059dd8:	9901      	ldr	r1, [sp, #4]
10059dda:	1840      	adds	r0, r0, r1
10059ddc:	b282      	uxth	r2, r0
10059dde:	9802      	ldr	r0, [sp, #8]
10059de0:	4621      	mov	r1, r4
10059de2:	f7fd feb5 	bl	10057b50 <llc_conn_set_chmap_params>
10059de6:	2600      	movs	r6, #0
10059de8:	2702      	movs	r7, #2
10059dea:	4628      	mov	r0, r5
10059dec:	4631      	mov	r1, r6
10059dee:	463a      	mov	r2, r7
10059df0:	f7ff f836 	bl	10058e60 <LL_cpe_set_blocked>
10059df4:	2301      	movs	r3, #1
10059df6:	4628      	mov	r0, r5
10059df8:	4631      	mov	r1, r6
10059dfa:	463a      	mov	r2, r7
10059dfc:	f7fe fff7 	bl	10058dee <LL_cpe_set_active>
10059e00:	4628      	mov	r0, r5
10059e02:	9903      	ldr	r1, [sp, #12]
10059e04:	f7ff f861 	bl	10058eca <LL_cpe_set_rx_with_instant>
10059e08:	e037      	b.n	10059e7a <LL_channel_map_update+0xfa>
10059e0a:	78b0      	ldrb	r0, [r6, #2]
10059e0c:	2801      	cmp	r0, #1
10059e0e:	d030      	beq.n	10059e72 <LL_channel_map_update+0xf2>
10059e10:	212a      	movs	r1, #42	@ 0x2a
10059e12:	e02f      	b.n	10059e74 <LL_channel_map_update+0xf4>
10059e14:	4628      	mov	r0, r5
10059e16:	9202      	str	r2, [sp, #8]
10059e18:	f7ff fe08 	bl	10059a2c <llc_cpe_calc_instant>
10059e1c:	af04      	add	r7, sp, #16
10059e1e:	8038      	strh	r0, [r7, #0]
10059e20:	4620      	mov	r0, r4
10059e22:	4629      	mov	r1, r5
10059e24:	f7ff ffa0 	bl	10059d68 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
10059e28:	2001      	movs	r0, #1
10059e2a:	70b0      	strb	r0, [r6, #2]
10059e2c:	2008      	movs	r0, #8
10059e2e:	7070      	strb	r0, [r6, #1]
10059e30:	2003      	movs	r0, #3
10059e32:	7030      	strb	r0, [r6, #0]
10059e34:	1cf1      	adds	r1, r6, #3
10059e36:	2205      	movs	r2, #5
10059e38:	4620      	mov	r0, r4
10059e3a:	f005 ff21 	bl	1005fc80 <char_copy>
10059e3e:	3608      	adds	r6, #8
10059e40:	2202      	movs	r2, #2
10059e42:	4638      	mov	r0, r7
10059e44:	4631      	mov	r1, r6
10059e46:	f005 ff1b 	bl	1005fc80 <char_copy>
10059e4a:	883a      	ldrh	r2, [r7, #0]
10059e4c:	9802      	ldr	r0, [sp, #8]
10059e4e:	4621      	mov	r1, r4
10059e50:	f7fd fe7e 	bl	10057b50 <llc_conn_set_chmap_params>
10059e54:	4628      	mov	r0, r5
10059e56:	9903      	ldr	r1, [sp, #12]
10059e58:	f7ff f828 	bl	10058eac <LL_cpe_set_tx_with_instant>
10059e5c:	e00d      	b.n	10059e7a <LL_channel_map_update+0xfa>
10059e5e:	2202      	movs	r2, #2
10059e60:	4628      	mov	r0, r5
10059e62:	9903      	ldr	r1, [sp, #12]
10059e64:	f7fe ffda 	bl	10058e1c <LL_cpe_clr_active>
10059e68:	e007      	b.n	10059e7a <LL_channel_map_update+0xfa>
10059e6a:	4628      	mov	r0, r5
10059e6c:	f7fe ff8c 	bl	10058d88 <ll_cpe_set_unknown_rsp_pending>
10059e70:	e003      	b.n	10059e7a <LL_channel_map_update+0xfa>
10059e72:	2123      	movs	r1, #35	@ 0x23
10059e74:	4610      	mov	r0, r2
10059e76:	f7fe f83b 	bl	10057ef0 <llc_conn_disconnect_link_from_cpf>
10059e7a:	20ff      	movs	r0, #255	@ 0xff
10059e7c:	b005      	add	sp, #20
10059e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10059e80 <LLC_channel_map_update_offline_processing_ucfg_weak>:
10059e80:	2000      	movs	r0, #0
10059e82:	4770      	bx	lr

10059e84 <LLC_conn_init_chc_ctxt_ucfg_weak>:
10059e84:	4770      	bx	lr

10059e86 <LLC_chc_ll_cntxt_init_ucfg_weak>:
10059e86:	4770      	bx	lr

10059e88 <LLC_chc_reporting_offline_processing_ucfg_weak>:
10059e88:	2000      	movs	r0, #0
10059e8a:	4770      	bx	lr

10059e8c <LL_cpf_cis_processing_ucfg_weak>:
10059e8c:	4770      	bx	lr
	...

10059e90 <LL_cpf_conn_upd>:
10059e90:	b5f0      	push	{r4, r5, r6, r7, lr}
10059e92:	b091      	sub	sp, #68	@ 0x44
10059e94:	461e      	mov	r6, r3
10059e96:	4614      	mov	r4, r2
10059e98:	4605      	mov	r5, r0
10059e9a:	910c      	str	r1, [sp, #48]	@ 0x30
10059e9c:	f7fe fffd 	bl	10058e9a <LL_cpe_get_cntxt>
10059ea0:	4607      	mov	r7, r0
10059ea2:	4628      	mov	r0, r5
10059ea4:	f7fd f940 	bl	10057128 <llc_conn_get_cntxt_per_p>
10059ea8:	4603      	mov	r3, r0
10059eaa:	1e60      	subs	r0, r4, #1
10059eac:	2807      	cmp	r0, #7
10059eae:	d900      	bls.n	10059eb2 <LL_cpf_conn_upd+0x22>
10059eb0:	e0ce      	b.n	1005a050 <LL_cpf_conn_upd+0x1c0>
10059eb2:	46c0      	nop			@ (mov r8, r8)
10059eb4:	4478      	add	r0, pc
10059eb6:	7900      	ldrb	r0, [r0, #4]
10059eb8:	0040      	lsls	r0, r0, #1
10059eba:	4487      	add	pc, r0
10059ebc:	22c90303 	.word	0x22c90303
10059ec0:	c47c2fc9 	.word	0xc47c2fc9
10059ec4:	4618      	mov	r0, r3
10059ec6:	302c      	adds	r0, #44	@ 0x2c
10059ec8:	7800      	ldrb	r0, [r0, #0]
10059eca:	2803      	cmp	r0, #3
10059ecc:	d000      	beq.n	10059ed0 <LL_cpf_conn_upd+0x40>
10059ece:	e0bf      	b.n	1005a050 <LL_cpf_conn_upd+0x1c0>
10059ed0:	2091      	movs	r0, #145	@ 0x91
10059ed2:	0040      	lsls	r0, r0, #1
10059ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
10059ed6:	1819      	adds	r1, r3, r0
10059ed8:	8973      	ldrh	r3, [r6, #10]
10059eda:	8932      	ldrh	r2, [r6, #8]
10059edc:	88f0      	ldrh	r0, [r6, #6]
10059ede:	880c      	ldrh	r4, [r1, #0]
10059ee0:	2100      	movs	r1, #0
10059ee2:	9100      	str	r1, [sp, #0]
10059ee4:	9101      	str	r1, [sp, #4]
10059ee6:	9402      	str	r4, [sp, #8]
10059ee8:	900a      	str	r0, [sp, #40]	@ 0x28
10059eea:	4601      	mov	r1, r0
10059eec:	9209      	str	r2, [sp, #36]	@ 0x24
10059eee:	461c      	mov	r4, r3
10059ef0:	f000 f906 	bl	1005a100 <llc_conn_upd_params_check>
10059ef4:	2800      	cmp	r0, #0
10059ef6:	d100      	bne.n	10059efa <LL_cpf_conn_upd+0x6a>
10059ef8:	e0ad      	b.n	1005a056 <LL_cpf_conn_upd+0x1c6>
10059efa:	4628      	mov	r0, r5
10059efc:	f7fe ff44 	bl	10058d88 <ll_cpe_set_unknown_rsp_pending>
10059f00:	e0a6      	b.n	1005a050 <LL_cpf_conn_upd+0x1c0>
10059f02:	78b0      	ldrb	r0, [r6, #2]
10059f04:	2123      	movs	r1, #35	@ 0x23
10059f06:	280f      	cmp	r0, #15
10059f08:	460a      	mov	r2, r1
10059f0a:	d000      	beq.n	10059f0e <LL_cpf_conn_upd+0x7e>
10059f0c:	222a      	movs	r2, #42	@ 0x2a
10059f0e:	2800      	cmp	r0, #0
10059f10:	d000      	beq.n	10059f14 <LL_cpf_conn_upd+0x84>
10059f12:	4611      	mov	r1, r2
10059f14:	4618      	mov	r0, r3
10059f16:	f7fd ffeb 	bl	10057ef0 <llc_conn_disconnect_link_from_cpf>
10059f1a:	e099      	b.n	1005a050 <LL_cpf_conn_upd+0x1c0>
10059f1c:	930b      	str	r3, [sp, #44]	@ 0x2c
10059f1e:	1cb0      	adds	r0, r6, #2
10059f20:	9008      	str	r0, [sp, #32]
10059f22:	f7fd f8f7 	bl	10057114 <llc_conn_get_cntxt_p>
10059f26:	9009      	str	r0, [sp, #36]	@ 0x24
10059f28:	4628      	mov	r0, r5
10059f2a:	f7ff fd7f 	bl	10059a2c <llc_cpe_calc_instant>
10059f2e:	4604      	mov	r4, r0
10059f30:	2028      	movs	r0, #40	@ 0x28
10059f32:	2101      	movs	r1, #1
10059f34:	9107      	str	r1, [sp, #28]
10059f36:	5439      	strb	r1, [r7, r0]
10059f38:	8b38      	ldrh	r0, [r7, #24]
10059f3a:	8b79      	ldrh	r1, [r7, #26]
10059f3c:	1808      	adds	r0, r1, r0
10059f3e:	0840      	lsrs	r0, r0, #1
10059f40:	9010      	str	r0, [sp, #64]	@ 0x40
10059f42:	8bb8      	ldrh	r0, [r7, #28]
10059f44:	9006      	str	r0, [sp, #24]
10059f46:	8bf8      	ldrh	r0, [r7, #30]
10059f48:	9005      	str	r0, [sp, #20]
10059f4a:	a80d      	add	r0, sp, #52	@ 0x34
10059f4c:	7105      	strb	r5, [r0, #4]
10059f4e:	a910      	add	r1, sp, #64	@ 0x40
10059f50:	910f      	str	r1, [sp, #60]	@ 0x3c
10059f52:	970d      	str	r7, [sp, #52]	@ 0x34
10059f54:	f7f2 f83a 	bl	1004bfcc <LL_conn_upd_max_tx_time_coded_ucfg>
10059f58:	9810      	ldr	r0, [sp, #64]	@ 0x40
10059f5a:	8338      	strh	r0, [r7, #24]
10059f5c:	940a      	str	r4, [sp, #40]	@ 0x28
10059f5e:	0421      	lsls	r1, r4, #16
10059f60:	9a05      	ldr	r2, [sp, #20]
10059f62:	1889      	adds	r1, r1, r2
10059f64:	9104      	str	r1, [sp, #16]
10059f66:	9c06      	ldr	r4, [sp, #24]
10059f68:	0423      	lsls	r3, r4, #16
10059f6a:	4303      	orrs	r3, r0
10059f6c:	9808      	ldr	r0, [sp, #32]
10059f6e:	4962      	ldr	r1, [pc, #392]	@ (1005a0f8 <__arm_cp.0_2>)
10059f70:	c00a      	stmia	r0!, {r1, r3}
10059f72:	9904      	ldr	r1, [sp, #16]
10059f74:	6001      	str	r1, [r0, #0]
10059f76:	4861      	ldr	r0, [pc, #388]	@ (1005a0fc <__arm_cp.0_3>)
10059f78:	8030      	strh	r0, [r6, #0]
10059f7a:	2003      	movs	r0, #3
10059f7c:	0240      	lsls	r0, r0, #9
10059f7e:	0311      	lsls	r1, r2, #12
10059f80:	60fc      	str	r4, [r7, #12]
10059f82:	6139      	str	r1, [r7, #16]
10059f84:	9907      	ldr	r1, [sp, #28]
10059f86:	0249      	lsls	r1, r1, #9
10059f88:	c703      	stmia	r7!, {r0, r1}
10059f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
10059f8c:	6800      	ldr	r0, [r0, #0]
10059f8e:	8b79      	ldrh	r1, [r7, #26]
10059f90:	0209      	lsls	r1, r1, #8
10059f92:	3f08      	subs	r7, #8
10059f94:	4288      	cmp	r0, r1
10059f96:	d300      	bcc.n	10059f9a <LL_cpf_conn_upd+0x10a>
10059f98:	4608      	mov	r0, r1
10059f9a:	6178      	str	r0, [r7, #20]
10059f9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
10059f9e:	0240      	lsls	r0, r0, #9
10059fa0:	60b8      	str	r0, [r7, #8]
10059fa2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10059fa4:	4639      	mov	r1, r7
10059fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10059fa8:	f7fd fddb 	bl	10057b62 <llc_conn_set_conn_update_params>
10059fac:	4628      	mov	r0, r5
10059fae:	990c      	ldr	r1, [sp, #48]	@ 0x30
10059fb0:	f7fe ff7c 	bl	10058eac <LL_cpe_set_tx_with_instant>
10059fb4:	e04c      	b.n	1005a050 <LL_cpf_conn_upd+0x1c0>
10059fb6:	2028      	movs	r0, #40	@ 0x28
10059fb8:	5c38      	ldrb	r0, [r7, r0]
10059fba:	2801      	cmp	r0, #1
10059fbc:	d143      	bne.n	1005a046 <LL_cpf_conn_upd+0x1b6>
10059fbe:	461c      	mov	r4, r3
10059fc0:	a80d      	add	r0, sp, #52	@ 0x34
10059fc2:	7105      	strb	r5, [r0, #4]
10059fc4:	970d      	str	r7, [sp, #52]	@ 0x34
10059fc6:	f7f2 f80d 	bl	1004bfe4 <LL_conn_upd_data_length_change_event_ucfg>
10059fca:	4849      	ldr	r0, [pc, #292]	@ (1005a0f0 <__arm_cp.0_0>)
10059fcc:	6800      	ldr	r0, [r0, #0]
10059fce:	213d      	movs	r1, #61	@ 0x3d
10059fd0:	5c41      	ldrb	r1, [r0, r1]
10059fd2:	0689      	lsls	r1, r1, #26
10059fd4:	d532      	bpl.n	1005a03c <LL_cpf_conn_upd+0x1ac>
10059fd6:	303d      	adds	r0, #61	@ 0x3d
10059fd8:	7a40      	ldrb	r0, [r0, #9]
10059fda:	0740      	lsls	r0, r0, #29
10059fdc:	d52e      	bpl.n	1005a03c <LL_cpf_conn_upd+0x1ac>
10059fde:	8bf8      	ldrh	r0, [r7, #30]
10059fe0:	900a      	str	r0, [sp, #40]	@ 0x28
10059fe2:	8bb8      	ldrh	r0, [r7, #28]
10059fe4:	9009      	str	r0, [sp, #36]	@ 0x24
10059fe6:	8b3f      	ldrh	r7, [r7, #24]
10059fe8:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
10059fea:	4842      	ldr	r0, [pc, #264]	@ (1005a0f4 <__arm_cp.0_1>)
10059fec:	6800      	ldr	r0, [r0, #0]
10059fee:	6900      	ldr	r0, [r0, #16]
10059ff0:	2180      	movs	r1, #128	@ 0x80
10059ff2:	2224      	movs	r2, #36	@ 0x24
10059ff4:	2604      	movs	r6, #4
10059ff6:	4633      	mov	r3, r6
10059ff8:	f7f8 f970 	bl	100522dc <aci_event_fifo_push_header>
10059ffc:	2800      	cmp	r0, #0
10059ffe:	d01d      	beq.n	1005a03c <LL_cpf_conn_upd+0x1ac>
1005a000:	4601      	mov	r1, r0
1005a002:	300b      	adds	r0, #11
1005a004:	724c      	strb	r4, [r1, #9]
1005a006:	7007      	strb	r7, [r0, #0]
1005a008:	970b      	str	r7, [sp, #44]	@ 0x2c
1005a00a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005a00c:	734f      	strb	r7, [r1, #13]
1005a00e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005a010:	7103      	strb	r3, [r0, #4]
1005a012:	2200      	movs	r2, #0
1005a014:	720a      	strb	r2, [r1, #8]
1005a016:	2203      	movs	r2, #3
1005a018:	71ca      	strb	r2, [r1, #7]
1005a01a:	220a      	movs	r2, #10
1005a01c:	718a      	strb	r2, [r1, #6]
1005a01e:	223e      	movs	r2, #62	@ 0x3e
1005a020:	714a      	strb	r2, [r1, #5]
1005a022:	710e      	strb	r6, [r1, #4]
1005a024:	0a22      	lsrs	r2, r4, #8
1005a026:	728a      	strb	r2, [r1, #10]
1005a028:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a02a:	0a12      	lsrs	r2, r2, #8
1005a02c:	7042      	strb	r2, [r0, #1]
1005a02e:	0a3a      	lsrs	r2, r7, #8
1005a030:	738a      	strb	r2, [r1, #14]
1005a032:	0a1a      	lsrs	r2, r3, #8
1005a034:	7142      	strb	r2, [r0, #5]
1005a036:	2080      	movs	r0, #128	@ 0x80
1005a038:	f7f8 f9ed 	bl	10052416 <aci_event_fifo_push>
1005a03c:	2100      	movs	r1, #0
1005a03e:	4628      	mov	r0, r5
1005a040:	460a      	mov	r2, r1
1005a042:	f000 fec0 	bl	1005adc6 <LLC_update_le_ping_params>
1005a046:	2200      	movs	r2, #0
1005a048:	4628      	mov	r0, r5
1005a04a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005a04c:	f7fe fee6 	bl	10058e1c <LL_cpe_clr_active>
1005a050:	20ff      	movs	r0, #255	@ 0xff
1005a052:	b011      	add	sp, #68	@ 0x44
1005a054:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a056:	78f0      	ldrb	r0, [r6, #3]
1005a058:	2800      	cmp	r0, #0
1005a05a:	d100      	bne.n	1005a05e <LL_cpf_conn_upd+0x1ce>
1005a05c:	e74d      	b.n	10059efa <LL_cpf_conn_upd+0x6a>
1005a05e:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a060:	1e49      	subs	r1, r1, #1
1005a062:	2908      	cmp	r1, #8
1005a064:	d300      	bcc.n	1005a068 <LL_cpf_conn_upd+0x1d8>
1005a066:	2108      	movs	r1, #8
1005a068:	4281      	cmp	r1, r0
1005a06a:	d200      	bcs.n	1005a06e <LL_cpf_conn_upd+0x1de>
1005a06c:	e745      	b.n	10059efa <LL_cpf_conn_upd+0x6a>
1005a06e:	88b2      	ldrh	r2, [r6, #4]
1005a070:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a072:	428a      	cmp	r2, r1
1005a074:	d900      	bls.n	1005a078 <LL_cpf_conn_upd+0x1e8>
1005a076:	e740      	b.n	10059efa <LL_cpf_conn_upd+0x6a>
1005a078:	83fc      	strh	r4, [r7, #30]
1005a07a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a07c:	83b9      	strh	r1, [r7, #28]
1005a07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005a080:	833b      	strh	r3, [r7, #24]
1005a082:	837b      	strh	r3, [r7, #26]
1005a084:	0324      	lsls	r4, r4, #12
1005a086:	025b      	lsls	r3, r3, #9
1005a088:	0252      	lsls	r2, r2, #9
1005a08a:	0240      	lsls	r0, r0, #9
1005a08c:	c70d      	stmia	r7!, {r0, r2, r3}
1005a08e:	6039      	str	r1, [r7, #0]
1005a090:	607c      	str	r4, [r7, #4]
1005a092:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a094:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005a096:	2001      	movs	r0, #1
1005a098:	3f0c      	subs	r7, #12
1005a09a:	429a      	cmp	r2, r3
1005a09c:	d107      	bne.n	1005a0ae <LL_cpf_conn_upd+0x21e>
1005a09e:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005a0a0:	4294      	cmp	r4, r2
1005a0a2:	d104      	bne.n	1005a0ae <LL_cpf_conn_upd+0x21e>
1005a0a4:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005a0a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a0a8:	1a08      	subs	r0, r1, r0
1005a0aa:	1e41      	subs	r1, r0, #1
1005a0ac:	4188      	sbcs	r0, r1
1005a0ae:	2128      	movs	r1, #40	@ 0x28
1005a0b0:	5478      	strb	r0, [r7, r1]
1005a0b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a0b4:	9010      	str	r0, [sp, #64]	@ 0x40
1005a0b6:	a80d      	add	r0, sp, #52	@ 0x34
1005a0b8:	7105      	strb	r5, [r0, #4]
1005a0ba:	a910      	add	r1, sp, #64	@ 0x40
1005a0bc:	910f      	str	r1, [sp, #60]	@ 0x3c
1005a0be:	970d      	str	r7, [sp, #52]	@ 0x34
1005a0c0:	f7f1 ff84 	bl	1004bfcc <LL_conn_upd_max_tx_time_coded_ucfg>
1005a0c4:	2202      	movs	r2, #2
1005a0c6:	4628      	mov	r0, r5
1005a0c8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005a0ca:	4621      	mov	r1, r4
1005a0cc:	f7fe fec8 	bl	10058e60 <LL_cpe_set_blocked>
1005a0d0:	2200      	movs	r2, #0
1005a0d2:	2301      	movs	r3, #1
1005a0d4:	4628      	mov	r0, r5
1005a0d6:	4621      	mov	r1, r4
1005a0d8:	f7fe fe89 	bl	10058dee <LL_cpe_set_active>
1005a0dc:	89b2      	ldrh	r2, [r6, #12]
1005a0de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a0e0:	4639      	mov	r1, r7
1005a0e2:	f7fd fd3e 	bl	10057b62 <llc_conn_set_conn_update_params>
1005a0e6:	4628      	mov	r0, r5
1005a0e8:	4621      	mov	r1, r4
1005a0ea:	f7fe feee 	bl	10058eca <LL_cpe_set_rx_with_instant>
1005a0ee:	e7af      	b.n	1005a050 <LL_cpf_conn_upd+0x1c0>

1005a0f0 <__arm_cp.0_0>:
1005a0f0:	20000f20 	.word	0x20000f20

1005a0f4 <__arm_cp.0_1>:
1005a0f4:	20000ed0 	.word	0x20000ed0

1005a0f8 <__arm_cp.0_2>:
1005a0f8:	00010300 	.word	0x00010300

1005a0fc <__arm_cp.0_3>:
1005a0fc:	00000c03 	.word	0x00000c03

1005a100 <llc_conn_upd_params_check>:
1005a100:	b570      	push	{r4, r5, r6, lr}
1005a102:	4604      	mov	r4, r0
1005a104:	2012      	movs	r0, #18
1005a106:	2c06      	cmp	r4, #6
1005a108:	d31c      	bcc.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a10a:	2519      	movs	r5, #25
1005a10c:	01ed      	lsls	r5, r5, #7
1005a10e:	42ac      	cmp	r4, r5
1005a110:	d818      	bhi.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a112:	2906      	cmp	r1, #6
1005a114:	d316      	bcc.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a116:	42a9      	cmp	r1, r5
1005a118:	d814      	bhi.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a11a:	42a1      	cmp	r1, r4
1005a11c:	d312      	bcc.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a11e:	0894      	lsrs	r4, r2, #2
1005a120:	2c7c      	cmp	r4, #124	@ 0x7c
1005a122:	d80f      	bhi.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a124:	9c05      	ldr	r4, [sp, #20]
1005a126:	9e04      	ldr	r6, [sp, #16]
1005a128:	42b4      	cmp	r4, r6
1005a12a:	d30b      	bcc.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a12c:	2b0a      	cmp	r3, #10
1005a12e:	d309      	bcc.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a130:	42ab      	cmp	r3, r5
1005a132:	d807      	bhi.n	1005a144 <llc_conn_upd_params_check+0x44>
1005a134:	9806      	ldr	r0, [sp, #24]
1005a136:	1c52      	adds	r2, r2, #1
1005a138:	434a      	muls	r2, r1
1005a13a:	4342      	muls	r2, r0
1005a13c:	0890      	lsrs	r0, r2, #2
1005a13e:	4283      	cmp	r3, r0
1005a140:	d801      	bhi.n	1005a146 <llc_conn_upd_params_check+0x46>
1005a142:	2012      	movs	r0, #18
1005a144:	bd70      	pop	{r4, r5, r6, pc}
1005a146:	2000      	movs	r0, #0
1005a148:	bd70      	pop	{r4, r5, r6, pc}
	...

1005a14c <LL_conn_upd_max_tx_time_coded>:
1005a14c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a14e:	4606      	mov	r6, r0
1005a150:	6887      	ldr	r7, [r0, #8]
1005a152:	7904      	ldrb	r4, [r0, #4]
1005a154:	4620      	mov	r0, r4
1005a156:	f7fc ffe7 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005a15a:	4605      	mov	r5, r0
1005a15c:	4620      	mov	r0, r4
1005a15e:	f7fd f817 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005a162:	2800      	cmp	r0, #0
1005a164:	d044      	beq.n	1005a1f0 <LL_conn_upd_max_tx_time_coded+0xa4>
1005a166:	7980      	ldrb	r0, [r0, #6]
1005a168:	2804      	cmp	r0, #4
1005a16a:	d141      	bne.n	1005a1f0 <LL_conn_upd_max_tx_time_coded+0xa4>
1005a16c:	0278      	lsls	r0, r7, #9
1005a16e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005a170:	4281      	cmp	r1, r0
1005a172:	d03d      	beq.n	1005a1f0 <LL_conn_upd_max_tx_time_coded+0xa4>
1005a174:	4628      	mov	r0, r5
1005a176:	302c      	adds	r0, #44	@ 0x2c
1005a178:	9502      	str	r5, [sp, #8]
1005a17a:	35b6      	adds	r5, #182	@ 0xb6
1005a17c:	6839      	ldr	r1, [r7, #0]
1005a17e:	223d      	movs	r2, #61	@ 0x3d
1005a180:	0112      	lsls	r2, r2, #4
1005a182:	886b      	ldrh	r3, [r5, #2]
1005a184:	019b      	lsls	r3, r3, #6
1005a186:	189a      	adds	r2, r3, r2
1005a188:	88eb      	ldrh	r3, [r5, #6]
1005a18a:	429a      	cmp	r2, r3
1005a18c:	d800      	bhi.n	1005a190 <LL_conn_upd_max_tx_time_coded+0x44>
1005a18e:	4613      	mov	r3, r2
1005a190:	4a18      	ldr	r2, [pc, #96]	@ (1005a1f4 <__arm_cp.3_0>)
1005a192:	434a      	muls	r2, r1
1005a194:	4611      	mov	r1, r2
1005a196:	6836      	ldr	r6, [r6, #0]
1005a198:	7800      	ldrb	r0, [r0, #0]
1005a19a:	2802      	cmp	r0, #2
1005a19c:	d10b      	bne.n	1005a1b6 <LL_conn_upd_max_tx_time_coded+0x6a>
1005a19e:	4816      	ldr	r0, [pc, #88]	@ (1005a1f8 <__arm_cp.3_1>)
1005a1a0:	1818      	adds	r0, r3, r0
1005a1a2:	4281      	cmp	r1, r0
1005a1a4:	d207      	bcs.n	1005a1b6 <LL_conn_upd_max_tx_time_coded+0x6a>
1005a1a6:	9101      	str	r1, [sp, #4]
1005a1a8:	4912      	ldr	r1, [pc, #72]	@ (1005a1f4 <__arm_cp.3_0>)
1005a1aa:	9300      	str	r3, [sp, #0]
1005a1ac:	f7e6 f848 	bl	10040240 <__udivsi3>
1005a1b0:	9b00      	ldr	r3, [sp, #0]
1005a1b2:	9901      	ldr	r1, [sp, #4]
1005a1b4:	6038      	str	r0, [r7, #0]
1005a1b6:	8828      	ldrh	r0, [r5, #0]
1005a1b8:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005a1ba:	204b      	movs	r0, #75	@ 0x4b
1005a1bc:	0080      	lsls	r0, r0, #2
1005a1be:	1818      	adds	r0, r3, r0
1005a1c0:	1a09      	subs	r1, r1, r0
1005a1c2:	d200      	bcs.n	1005a1c6 <LL_conn_upd_max_tx_time_coded+0x7a>
1005a1c4:	2100      	movs	r1, #0
1005a1c6:	8968      	ldrh	r0, [r5, #10]
1005a1c8:	8a2a      	ldrh	r2, [r5, #16]
1005a1ca:	4290      	cmp	r0, r2
1005a1cc:	d300      	bcc.n	1005a1d0 <LL_conn_upd_max_tx_time_coded+0x84>
1005a1ce:	4610      	mov	r0, r2
1005a1d0:	4281      	cmp	r1, r0
1005a1d2:	9b02      	ldr	r3, [sp, #8]
1005a1d4:	d800      	bhi.n	1005a1d8 <LL_conn_upd_max_tx_time_coded+0x8c>
1005a1d6:	4608      	mov	r0, r1
1005a1d8:	b282      	uxth	r2, r0
1005a1da:	21a9      	movs	r1, #169	@ 0xa9
1005a1dc:	0109      	lsls	r1, r1, #4
1005a1de:	428a      	cmp	r2, r1
1005a1e0:	d800      	bhi.n	1005a1e4 <LL_conn_upd_max_tx_time_coded+0x98>
1005a1e2:	4608      	mov	r0, r1
1005a1e4:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005a1e6:	2101      	movs	r1, #1
1005a1e8:	4620      	mov	r0, r4
1005a1ea:	4632      	mov	r2, r6
1005a1ec:	f000 f806 	bl	1005a1fc <LL_adjust_max_tx_data_frag_coded>
1005a1f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a1f2:	46c0      	nop			@ (mov r8, r8)

1005a1f4 <__arm_cp.3_0>:
1005a1f4:	000004e2 	.word	0x000004e2

1005a1f8 <__arm_cp.3_1>:
1005a1f8:	00000bbc 	.word	0x00000bbc

1005a1fc <LL_adjust_max_tx_data_frag_coded>:
1005a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a1fe:	461c      	mov	r4, r3
1005a200:	4615      	mov	r5, r2
1005a202:	460e      	mov	r6, r1
1005a204:	461f      	mov	r7, r3
1005a206:	37b4      	adds	r7, #180	@ 0xb4
1005a208:	f7fc ffc2 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005a20c:	2800      	cmp	r0, #0
1005a20e:	d002      	beq.n	1005a216 <LL_adjust_max_tx_data_frag_coded+0x1a>
1005a210:	8800      	ldrh	r0, [r0, #0]
1005a212:	2802      	cmp	r0, #2
1005a214:	d001      	beq.n	1005a21a <LL_adjust_max_tx_data_frag_coded+0x1e>
1005a216:	2001      	movs	r0, #1
1005a218:	e000      	b.n	1005a21c <LL_adjust_max_tx_data_frag_coded+0x20>
1005a21a:	2003      	movs	r0, #3
1005a21c:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005a21e:	4a0b      	ldr	r2, [pc, #44]	@ (1005a24c <__arm_cp.4_0>)
1005a220:	1889      	adds	r1, r1, r2
1005a222:	40c1      	lsrs	r1, r0
1005a224:	480a      	ldr	r0, [pc, #40]	@ (1005a250 <__arm_cp.4_1>)
1005a226:	1808      	adds	r0, r1, r0
1005a228:	08c0      	lsrs	r0, r0, #3
1005a22a:	b281      	uxth	r1, r0
1005a22c:	8838      	ldrh	r0, [r7, #0]
1005a22e:	4288      	cmp	r0, r1
1005a230:	d300      	bcc.n	1005a234 <LL_adjust_max_tx_data_frag_coded+0x38>
1005a232:	4608      	mov	r0, r1
1005a234:	2e00      	cmp	r6, #0
1005a236:	d002      	beq.n	1005a23e <LL_adjust_max_tx_data_frag_coded+0x42>
1005a238:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005a23a:	4281      	cmp	r1, r0
1005a23c:	d300      	bcc.n	1005a240 <LL_adjust_max_tx_data_frag_coded+0x44>
1005a23e:	4601      	mov	r1, r0
1005a240:	8079      	strh	r1, [r7, #2]
1005a242:	4620      	mov	r0, r4
1005a244:	f7fd fa3a 	bl	100576bc <llc_conn_guard_time_for_close_conn_event>
1005a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a24a:	46c0      	nop			@ (mov r8, r8)

1005a24c <__arm_cp.4_0>:
1005a24c:	fffffe88 	.word	0xfffffe88

1005a250 <__arm_cp.4_1>:
1005a250:	0007ffb5 	.word	0x0007ffb5

1005a254 <LL_conn_upd_data_length_change_event>:
1005a254:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a256:	6805      	ldr	r5, [r0, #0]
1005a258:	7906      	ldrb	r6, [r0, #4]
1005a25a:	4630      	mov	r0, r6
1005a25c:	f7fc ff64 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005a260:	4607      	mov	r7, r0
1005a262:	4630      	mov	r0, r6
1005a264:	f7fc ff94 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005a268:	2800      	cmp	r0, #0
1005a26a:	d047      	beq.n	1005a2fc <LL_conn_upd_data_length_change_event+0xa8>
1005a26c:	7980      	ldrb	r0, [r0, #6]
1005a26e:	2804      	cmp	r0, #4
1005a270:	d144      	bne.n	1005a2fc <LL_conn_upd_data_length_change_event+0xa8>
1005a272:	463c      	mov	r4, r7
1005a274:	34b4      	adds	r4, #180	@ 0xb4
1005a276:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005a278:	88e1      	ldrh	r1, [r4, #6]
1005a27a:	4281      	cmp	r1, r0
1005a27c:	d03e      	beq.n	1005a2fc <LL_conn_upd_data_length_change_event+0xa8>
1005a27e:	80e0      	strh	r0, [r4, #6]
1005a280:	2100      	movs	r1, #0
1005a282:	4630      	mov	r0, r6
1005a284:	462a      	mov	r2, r5
1005a286:	463b      	mov	r3, r7
1005a288:	f7ff ffb8 	bl	1005a1fc <LL_adjust_max_tx_data_frag_coded>
1005a28c:	481c      	ldr	r0, [pc, #112]	@ (1005a300 <__arm_cp.6_0>)
1005a28e:	6800      	ldr	r0, [r0, #0]
1005a290:	213d      	movs	r1, #61	@ 0x3d
1005a292:	5c41      	ldrb	r1, [r0, r1]
1005a294:	0689      	lsls	r1, r1, #26
1005a296:	d531      	bpl.n	1005a2fc <LL_conn_upd_data_length_change_event+0xa8>
1005a298:	303d      	adds	r0, #61	@ 0x3d
1005a29a:	7a40      	ldrb	r0, [r0, #9]
1005a29c:	0640      	lsls	r0, r0, #25
1005a29e:	d52d      	bpl.n	1005a2fc <LL_conn_upd_data_length_change_event+0xa8>
1005a2a0:	8926      	ldrh	r6, [r4, #8]
1005a2a2:	88a5      	ldrh	r5, [r4, #4]
1005a2a4:	88e0      	ldrh	r0, [r4, #6]
1005a2a6:	9001      	str	r0, [sp, #4]
1005a2a8:	8820      	ldrh	r0, [r4, #0]
1005a2aa:	9002      	str	r0, [sp, #8]
1005a2ac:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005a2ae:	4815      	ldr	r0, [pc, #84]	@ (1005a304 <__arm_cp.6_1>)
1005a2b0:	6800      	ldr	r0, [r0, #0]
1005a2b2:	6900      	ldr	r0, [r0, #16]
1005a2b4:	2180      	movs	r1, #128	@ 0x80
1005a2b6:	2226      	movs	r2, #38	@ 0x26
1005a2b8:	2404      	movs	r4, #4
1005a2ba:	4623      	mov	r3, r4
1005a2bc:	f7f8 f80e 	bl	100522dc <aci_event_fifo_push_header>
1005a2c0:	2800      	cmp	r0, #0
1005a2c2:	d01b      	beq.n	1005a2fc <LL_conn_upd_data_length_change_event+0xa8>
1005a2c4:	4601      	mov	r1, r0
1005a2c6:	7406      	strb	r6, [r0, #16]
1005a2c8:	7385      	strb	r5, [r0, #14]
1005a2ca:	9b01      	ldr	r3, [sp, #4]
1005a2cc:	7303      	strb	r3, [r0, #12]
1005a2ce:	9a02      	ldr	r2, [sp, #8]
1005a2d0:	7282      	strb	r2, [r0, #10]
1005a2d2:	7207      	strb	r7, [r0, #8]
1005a2d4:	2007      	movs	r0, #7
1005a2d6:	71c8      	strb	r0, [r1, #7]
1005a2d8:	200b      	movs	r0, #11
1005a2da:	7188      	strb	r0, [r1, #6]
1005a2dc:	203e      	movs	r0, #62	@ 0x3e
1005a2de:	7148      	strb	r0, [r1, #5]
1005a2e0:	710c      	strb	r4, [r1, #4]
1005a2e2:	0a30      	lsrs	r0, r6, #8
1005a2e4:	7448      	strb	r0, [r1, #17]
1005a2e6:	0a28      	lsrs	r0, r5, #8
1005a2e8:	73c8      	strb	r0, [r1, #15]
1005a2ea:	0a18      	lsrs	r0, r3, #8
1005a2ec:	7348      	strb	r0, [r1, #13]
1005a2ee:	0a10      	lsrs	r0, r2, #8
1005a2f0:	72c8      	strb	r0, [r1, #11]
1005a2f2:	0a38      	lsrs	r0, r7, #8
1005a2f4:	7248      	strb	r0, [r1, #9]
1005a2f6:	2080      	movs	r0, #128	@ 0x80
1005a2f8:	f7f8 f88d 	bl	10052416 <aci_event_fifo_push>
1005a2fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a2fe:	46c0      	nop			@ (mov r8, r8)

1005a300 <__arm_cp.6_0>:
1005a300:	20000f20 	.word	0x20000f20

1005a304 <__arm_cp.6_1>:
1005a304:	20000ed0 	.word	0x20000ed0

1005a308 <llc_conn_init_cte_ctxt_ucfg_weak>:
1005a308:	4770      	bx	lr

1005a30a <LLC_cte_request_procedure_ucfg_weak>:
1005a30a:	2000      	movs	r0, #0
1005a30c:	4770      	bx	lr

1005a30e <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005a30e:	4770      	bx	lr

1005a310 <LLC_connection_cte_response_disable_ucfg_weak>:
1005a310:	4770      	bx	lr

1005a312 <llc_cte_process_rx_cte_ucfg_weak>:
1005a312:	4770      	bx	lr

1005a314 <LL_encryption>:
1005a314:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a316:	b08d      	sub	sp, #52	@ 0x34
1005a318:	9309      	str	r3, [sp, #36]	@ 0x24
1005a31a:	4617      	mov	r7, r2
1005a31c:	460d      	mov	r5, r1
1005a31e:	4606      	mov	r6, r0
1005a320:	f7fe fdbb 	bl	10058e9a <LL_cpe_get_cntxt>
1005a324:	4604      	mov	r4, r0
1005a326:	9608      	str	r6, [sp, #32]
1005a328:	4630      	mov	r0, r6
1005a32a:	f7fc fefd 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005a32e:	4603      	mov	r3, r0
1005a330:	2f05      	cmp	r7, #5
1005a332:	d107      	bne.n	1005a344 <LL_encryption+0x30>
1005a334:	213d      	movs	r1, #61	@ 0x3d
1005a336:	4618      	mov	r0, r3
1005a338:	f7fd fdda 	bl	10057ef0 <llc_conn_disconnect_link_from_cpf>
1005a33c:	27ff      	movs	r7, #255	@ 0xff
1005a33e:	4638      	mov	r0, r7
1005a340:	b00d      	add	sp, #52	@ 0x34
1005a342:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a344:	9407      	str	r4, [sp, #28]
1005a346:	4622      	mov	r2, r4
1005a348:	3228      	adds	r2, #40	@ 0x28
1005a34a:	461e      	mov	r6, r3
1005a34c:	362c      	adds	r6, #44	@ 0x2c
1005a34e:	7830      	ldrb	r0, [r6, #0]
1005a350:	2802      	cmp	r0, #2
1005a352:	d129      	bne.n	1005a3a8 <LL_encryption+0x94>
1005a354:	7810      	ldrb	r0, [r2, #0]
1005a356:	1e40      	subs	r0, r0, #1
1005a358:	27ff      	movs	r7, #255	@ 0xff
1005a35a:	280b      	cmp	r0, #11
1005a35c:	d8ef      	bhi.n	1005a33e <LL_encryption+0x2a>
1005a35e:	0040      	lsls	r0, r0, #1
1005a360:	4478      	add	r0, pc
1005a362:	8880      	ldrh	r0, [r0, #4]
1005a364:	0040      	lsls	r0, r0, #1
1005a366:	4487      	add	pc, r0
1005a368:	00a4000b 	.word	0x00a4000b
1005a36c:	00c200a7 	.word	0x00c200a7
1005a370:	00d000cc 	.word	0x00d000cc
1005a374:	01370133 	.word	0x01370133
1005a378:	016f015f 	.word	0x016f015f
1005a37c:	0181017e 	.word	0x0181017e
1005a380:	200a      	movs	r0, #10
1005a382:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a384:	7088      	strb	r0, [r1, #2]
1005a386:	27ff      	movs	r7, #255	@ 0xff
1005a388:	4638      	mov	r0, r7
1005a38a:	3004      	adds	r0, #4
1005a38c:	8008      	strh	r0, [r1, #0]
1005a38e:	2101      	movs	r1, #1
1005a390:	9808      	ldr	r0, [sp, #32]
1005a392:	4615      	mov	r5, r2
1005a394:	460a      	mov	r2, r1
1005a396:	461c      	mov	r4, r3
1005a398:	f7fe fd62 	bl	10058e60 <LL_cpe_set_blocked>
1005a39c:	4620      	mov	r0, r4
1005a39e:	f7fd fc13 	bl	10057bc8 <llc_conn_set_tx_acl_blocked>
1005a3a2:	2002      	movs	r0, #2
1005a3a4:	7028      	strb	r0, [r5, #0]
1005a3a6:	e7ca      	b.n	1005a33e <LL_encryption+0x2a>
1005a3a8:	2f01      	cmp	r7, #1
1005a3aa:	d12e      	bne.n	1005a40a <LL_encryption+0xf6>
1005a3ac:	2000      	movs	r0, #0
1005a3ae:	7050      	strb	r0, [r2, #1]
1005a3b0:	9206      	str	r2, [sp, #24]
1005a3b2:	2500      	movs	r5, #0
1005a3b4:	461e      	mov	r6, r3
1005a3b6:	4618      	mov	r0, r3
1005a3b8:	4629      	mov	r1, r5
1005a3ba:	f7fd f951 	bl	10057660 <llc_conn_get_enc_on>
1005a3be:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a3c0:	7889      	ldrb	r1, [r1, #2]
1005a3c2:	2903      	cmp	r1, #3
1005a3c4:	d157      	bne.n	1005a476 <LL_encryption+0x162>
1005a3c6:	2800      	cmp	r0, #0
1005a3c8:	4633      	mov	r3, r6
1005a3ca:	9f07      	ldr	r7, [sp, #28]
1005a3cc:	d1b2      	bne.n	1005a334 <LL_encryption+0x20>
1005a3ce:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005a3d0:	1ce0      	adds	r0, r4, #3
1005a3d2:	4639      	mov	r1, r7
1005a3d4:	3130      	adds	r1, #48	@ 0x30
1005a3d6:	2208      	movs	r2, #8
1005a3d8:	9205      	str	r2, [sp, #20]
1005a3da:	4b19      	ldr	r3, [pc, #100]	@ (1005a440 <LL_encryption+0x12c>)
1005a3dc:	4798      	blx	r3
1005a3de:	4620      	mov	r0, r4
1005a3e0:	300b      	adds	r0, #11
1005a3e2:	4639      	mov	r1, r7
1005a3e4:	312e      	adds	r1, #46	@ 0x2e
1005a3e6:	2202      	movs	r2, #2
1005a3e8:	4b15      	ldr	r3, [pc, #84]	@ (1005a440 <LL_encryption+0x12c>)
1005a3ea:	4798      	blx	r3
1005a3ec:	4620      	mov	r0, r4
1005a3ee:	300d      	adds	r0, #13
1005a3f0:	4639      	mov	r1, r7
1005a3f2:	9a05      	ldr	r2, [sp, #20]
1005a3f4:	4b12      	ldr	r3, [pc, #72]	@ (1005a440 <LL_encryption+0x12c>)
1005a3f6:	4798      	blx	r3
1005a3f8:	3415      	adds	r4, #21
1005a3fa:	3720      	adds	r7, #32
1005a3fc:	2204      	movs	r2, #4
1005a3fe:	4620      	mov	r0, r4
1005a400:	4639      	mov	r1, r7
1005a402:	4b0f      	ldr	r3, [pc, #60]	@ (1005a440 <LL_encryption+0x12c>)
1005a404:	4798      	blx	r3
1005a406:	2005      	movs	r0, #5
1005a408:	e03b      	b.n	1005a482 <LL_encryption+0x16e>
1005a40a:	7850      	ldrb	r0, [r2, #1]
1005a40c:	27ff      	movs	r7, #255	@ 0xff
1005a40e:	280d      	cmp	r0, #13
1005a410:	d895      	bhi.n	1005a33e <LL_encryption+0x2a>
1005a412:	9705      	str	r7, [sp, #20]
1005a414:	2111      	movs	r1, #17
1005a416:	0109      	lsls	r1, r1, #4
1005a418:	185f      	adds	r7, r3, r1
1005a41a:	0040      	lsls	r0, r0, #1
1005a41c:	4478      	add	r0, pc
1005a41e:	8880      	ldrh	r0, [r0, #4]
1005a420:	0040      	lsls	r0, r0, #1
1005a422:	4487      	add	pc, r0
1005a424:	0010000f 	.word	0x0010000f
1005a428:	016d0165 	.word	0x016d0165
1005a42c:	019b0176 	.word	0x019b0176
1005a430:	022001d6 	.word	0x022001d6
1005a434:	024001e9 	.word	0x024001e9
1005a438:	01fe01ed 	.word	0x01fe01ed
1005a43c:	02340214 	.word	0x02340214
1005a440:	1005fc81 	.word	0x1005fc81
1005a444:	e7b4      	b.n	1005a3b0 <LL_encryption+0x9c>
1005a446:	200b      	movs	r0, #11
1005a448:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a44a:	7088      	strb	r0, [r1, #2]
1005a44c:	2002      	movs	r0, #2
1005a44e:	7050      	strb	r0, [r2, #1]
1005a450:	27ff      	movs	r7, #255	@ 0xff
1005a452:	4638      	mov	r0, r7
1005a454:	3004      	adds	r0, #4
1005a456:	8008      	strh	r0, [r1, #0]
1005a458:	2400      	movs	r4, #0
1005a45a:	2201      	movs	r2, #1
1005a45c:	9808      	ldr	r0, [sp, #32]
1005a45e:	4621      	mov	r1, r4
1005a460:	461d      	mov	r5, r3
1005a462:	f7fe fcfd 	bl	10058e60 <LL_cpe_set_blocked>
1005a466:	4628      	mov	r0, r5
1005a468:	f7fd fbae 	bl	10057bc8 <llc_conn_set_tx_acl_blocked>
1005a46c:	4628      	mov	r0, r5
1005a46e:	4621      	mov	r1, r4
1005a470:	f7fd fb99 	bl	10057ba6 <llc_conn_set_stop_enc>
1005a474:	e763      	b.n	1005a33e <LL_encryption+0x2a>
1005a476:	2801      	cmp	r0, #1
1005a478:	4633      	mov	r3, r6
1005a47a:	d000      	beq.n	1005a47e <LL_encryption+0x16a>
1005a47c:	e75a      	b.n	1005a334 <LL_encryption+0x20>
1005a47e:	2501      	movs	r5, #1
1005a480:	4628      	mov	r0, r5
1005a482:	9f06      	ldr	r7, [sp, #24]
1005a484:	7078      	strb	r0, [r7, #1]
1005a486:	713d      	strb	r5, [r7, #4]
1005a488:	2400      	movs	r4, #0
1005a48a:	9d08      	ldr	r5, [sp, #32]
1005a48c:	4628      	mov	r0, r5
1005a48e:	4621      	mov	r1, r4
1005a490:	4622      	mov	r2, r4
1005a492:	f7fe fce5 	bl	10058e60 <LL_cpe_set_blocked>
1005a496:	4630      	mov	r0, r6
1005a498:	f7fd fb6c 	bl	10057b74 <llc_conn_set_rx_acl_blocked>
1005a49c:	4628      	mov	r0, r5
1005a49e:	4621      	mov	r1, r4
1005a4a0:	f7fe fcee 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005a4a4:	2201      	movs	r2, #1
1005a4a6:	4628      	mov	r0, r5
1005a4a8:	4621      	mov	r1, r4
1005a4aa:	4623      	mov	r3, r4
1005a4ac:	f7fe fc9f 	bl	10058dee <LL_cpe_set_active>
1005a4b0:	e744      	b.n	1005a33c <LL_encryption+0x28>
1005a4b2:	2003      	movs	r0, #3
1005a4b4:	7010      	strb	r0, [r2, #0]
1005a4b6:	e121      	b.n	1005a6fc <LL_encryption+0x3e8>
1005a4b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a4ba:	7880      	ldrb	r0, [r0, #2]
1005a4bc:	280b      	cmp	r0, #11
1005a4be:	d000      	beq.n	1005a4c2 <LL_encryption+0x1ae>
1005a4c0:	e738      	b.n	1005a334 <LL_encryption+0x20>
1005a4c2:	2004      	movs	r0, #4
1005a4c4:	7010      	strb	r0, [r2, #0]
1005a4c6:	2102      	movs	r1, #2
1005a4c8:	4618      	mov	r0, r3
1005a4ca:	461d      	mov	r5, r3
1005a4cc:	f7fd fb6b 	bl	10057ba6 <llc_conn_set_stop_enc>
1005a4d0:	2401      	movs	r4, #1
1005a4d2:	9e08      	ldr	r6, [sp, #32]
1005a4d4:	4630      	mov	r0, r6
1005a4d6:	4621      	mov	r1, r4
1005a4d8:	f7fe fcd2 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005a4dc:	2200      	movs	r2, #0
1005a4de:	4630      	mov	r0, r6
1005a4e0:	4621      	mov	r1, r4
1005a4e2:	f7fe fcbd 	bl	10058e60 <LL_cpe_set_blocked>
1005a4e6:	4628      	mov	r0, r5
1005a4e8:	f7fd fb44 	bl	10057b74 <llc_conn_set_rx_acl_blocked>
1005a4ec:	e727      	b.n	1005a33e <LL_encryption+0x2a>
1005a4ee:	200b      	movs	r0, #11
1005a4f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a4f2:	7088      	strb	r0, [r1, #2]
1005a4f4:	2005      	movs	r0, #5
1005a4f6:	7010      	strb	r0, [r2, #0]
1005a4f8:	27ff      	movs	r7, #255	@ 0xff
1005a4fa:	4638      	mov	r0, r7
1005a4fc:	3004      	adds	r0, #4
1005a4fe:	8008      	strh	r0, [r1, #0]
1005a500:	e71d      	b.n	1005a33e <LL_encryption+0x2a>
1005a502:	2006      	movs	r0, #6
1005a504:	7010      	strb	r0, [r2, #0]
1005a506:	2101      	movs	r1, #1
1005a508:	e1d6      	b.n	1005a8b8 <LL_encryption+0x5a4>
1005a50a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005a50c:	1ca0      	adds	r0, r4, #2
1005a50e:	9001      	str	r0, [sp, #4]
1005a510:	9705      	str	r7, [sp, #20]
1005a512:	2700      	movs	r7, #0
1005a514:	4dfd      	ldr	r5, [pc, #1012]	@ (1005a90c <LL_encryption+0x5f8>)
1005a516:	4638      	mov	r0, r7
1005a518:	9304      	str	r3, [sp, #16]
1005a51a:	4616      	mov	r6, r2
1005a51c:	47a8      	blx	r5
1005a51e:	9002      	str	r0, [sp, #8]
1005a520:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a522:	4638      	mov	r0, r7
1005a524:	47a8      	blx	r5
1005a526:	900c      	str	r0, [sp, #48]	@ 0x30
1005a528:	4638      	mov	r0, r7
1005a52a:	9f05      	ldr	r7, [sp, #20]
1005a52c:	47a8      	blx	r5
1005a52e:	9003      	str	r0, [sp, #12]
1005a530:	49fc      	ldr	r1, [pc, #1008]	@ (1005a924 <__arm_cp.0_10>)
1005a532:	8021      	strh	r1, [r4, #0]
1005a534:	900a      	str	r0, [sp, #40]	@ 0x28
1005a536:	4635      	mov	r5, r6
1005a538:	7a30      	ldrb	r0, [r6, #8]
1005a53a:	0200      	lsls	r0, r0, #8
1005a53c:	7a71      	ldrb	r1, [r6, #9]
1005a53e:	0409      	lsls	r1, r1, #16
1005a540:	1840      	adds	r0, r0, r1
1005a542:	7ab1      	ldrb	r1, [r6, #10]
1005a544:	9606      	str	r6, [sp, #24]
1005a546:	0609      	lsls	r1, r1, #24
1005a548:	1840      	adds	r0, r0, r1
1005a54a:	1cc0      	adds	r0, r0, #3
1005a54c:	9c01      	ldr	r4, [sp, #4]
1005a54e:	6020      	str	r0, [r4, #0]
1005a550:	9e07      	ldr	r6, [sp, #28]
1005a552:	4630      	mov	r0, r6
1005a554:	3033      	adds	r0, #51	@ 0x33
1005a556:	f000 fa25 	bl	1005a9a4 <le4ByteToInt32>
1005a55a:	6060      	str	r0, [r4, #4]
1005a55c:	9802      	ldr	r0, [sp, #8]
1005a55e:	0600      	lsls	r0, r0, #24
1005a560:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005a562:	0209      	lsls	r1, r1, #8
1005a564:	1808      	adds	r0, r1, r0
1005a566:	7be9      	ldrb	r1, [r5, #15]
1005a568:	1840      	adds	r0, r0, r1
1005a56a:	60a0      	str	r0, [r4, #8]
1005a56c:	4625      	mov	r5, r4
1005a56e:	ac0b      	add	r4, sp, #44	@ 0x2c
1005a570:	1c60      	adds	r0, r4, #1
1005a572:	f000 fa17 	bl	1005a9a4 <le4ByteToInt32>
1005a576:	60e8      	str	r0, [r5, #12]
1005a578:	9803      	ldr	r0, [sp, #12]
1005a57a:	0600      	lsls	r0, r0, #24
1005a57c:	7961      	ldrb	r1, [r4, #5]
1005a57e:	1840      	adds	r0, r0, r1
1005a580:	79a1      	ldrb	r1, [r4, #6]
1005a582:	0209      	lsls	r1, r1, #8
1005a584:	1840      	adds	r0, r0, r1
1005a586:	79e1      	ldrb	r1, [r4, #7]
1005a588:	0409      	lsls	r1, r1, #16
1005a58a:	1840      	adds	r0, r0, r1
1005a58c:	6128      	str	r0, [r5, #16]
1005a58e:	462a      	mov	r2, r5
1005a590:	ad0a      	add	r5, sp, #40	@ 0x28
1005a592:	7868      	ldrb	r0, [r5, #1]
1005a594:	78a9      	ldrb	r1, [r5, #2]
1005a596:	0209      	lsls	r1, r1, #8
1005a598:	1808      	adds	r0, r1, r0
1005a59a:	78e9      	ldrb	r1, [r5, #3]
1005a59c:	0409      	lsls	r1, r1, #16
1005a59e:	1840      	adds	r0, r0, r1
1005a5a0:	6150      	str	r0, [r2, #20]
1005a5a2:	2208      	movs	r2, #8
1005a5a4:	4620      	mov	r0, r4
1005a5a6:	4631      	mov	r1, r6
1005a5a8:	f005 fb6a 	bl	1005fc80 <char_copy>
1005a5ac:	3620      	adds	r6, #32
1005a5ae:	2204      	movs	r2, #4
1005a5b0:	4628      	mov	r0, r5
1005a5b2:	4631      	mov	r1, r6
1005a5b4:	f005 fb64 	bl	1005fc80 <char_copy>
1005a5b8:	2007      	movs	r0, #7
1005a5ba:	9906      	ldr	r1, [sp, #24]
1005a5bc:	7008      	strb	r0, [r1, #0]
1005a5be:	2101      	movs	r1, #1
1005a5c0:	9808      	ldr	r0, [sp, #32]
1005a5c2:	460a      	mov	r2, r1
1005a5c4:	f7fe fc4c 	bl	10058e60 <LL_cpe_set_blocked>
1005a5c8:	9804      	ldr	r0, [sp, #16]
1005a5ca:	f7fd fafd 	bl	10057bc8 <llc_conn_set_tx_acl_blocked>
1005a5ce:	e6b6      	b.n	1005a33e <LL_encryption+0x2a>
1005a5d0:	2008      	movs	r0, #8
1005a5d2:	7010      	strb	r0, [r2, #0]
1005a5d4:	2704      	movs	r7, #4
1005a5d6:	e6b2      	b.n	1005a33e <LL_encryption+0x2a>
1005a5d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a5da:	7880      	ldrb	r0, [r0, #2]
1005a5dc:	2811      	cmp	r0, #17
1005a5de:	d061      	beq.n	1005a6a4 <LL_encryption+0x390>
1005a5e0:	2807      	cmp	r0, #7
1005a5e2:	d05f      	beq.n	1005a6a4 <LL_encryption+0x390>
1005a5e4:	280d      	cmp	r0, #13
1005a5e6:	d05d      	beq.n	1005a6a4 <LL_encryption+0x390>
1005a5e8:	2804      	cmp	r0, #4
1005a5ea:	9c07      	ldr	r4, [sp, #28]
1005a5ec:	d000      	beq.n	1005a5f0 <LL_encryption+0x2dc>
1005a5ee:	e6a1      	b.n	1005a334 <LL_encryption+0x20>
1005a5f0:	2009      	movs	r0, #9
1005a5f2:	7010      	strb	r0, [r2, #0]
1005a5f4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005a5f6:	1cf8      	adds	r0, r7, #3
1005a5f8:	4621      	mov	r1, r4
1005a5fa:	3108      	adds	r1, #8
1005a5fc:	2208      	movs	r2, #8
1005a5fe:	461d      	mov	r5, r3
1005a600:	f005 fb3e 	bl	1005fc80 <char_copy>
1005a604:	370b      	adds	r7, #11
1005a606:	4621      	mov	r1, r4
1005a608:	3124      	adds	r1, #36	@ 0x24
1005a60a:	2204      	movs	r2, #4
1005a60c:	4638      	mov	r0, r7
1005a60e:	f005 fb37 	bl	1005fc80 <char_copy>
1005a612:	6734      	str	r4, [r6, #112]	@ 0x70
1005a614:	2101      	movs	r1, #1
1005a616:	2200      	movs	r2, #0
1005a618:	9808      	ldr	r0, [sp, #32]
1005a61a:	f7fe fc21 	bl	10058e60 <LL_cpe_set_blocked>
1005a61e:	4628      	mov	r0, r5
1005a620:	f7fd faa8 	bl	10057b74 <llc_conn_set_rx_acl_blocked>
1005a624:	2705      	movs	r7, #5
1005a626:	e68a      	b.n	1005a33e <LL_encryption+0x2a>
1005a628:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a62a:	7880      	ldrb	r0, [r0, #2]
1005a62c:	2811      	cmp	r0, #17
1005a62e:	d046      	beq.n	1005a6be <LL_encryption+0x3aa>
1005a630:	280d      	cmp	r0, #13
1005a632:	d044      	beq.n	1005a6be <LL_encryption+0x3aa>
1005a634:	2805      	cmp	r0, #5
1005a636:	d000      	beq.n	1005a63a <LL_encryption+0x326>
1005a638:	e67c      	b.n	1005a334 <LL_encryption+0x20>
1005a63a:	4614      	mov	r4, r2
1005a63c:	2101      	movs	r1, #1
1005a63e:	9808      	ldr	r0, [sp, #32]
1005a640:	f7fe fc1e 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005a644:	200a      	movs	r0, #10
1005a646:	e00c      	b.n	1005a662 <LL_encryption+0x34e>
1005a648:	2006      	movs	r0, #6
1005a64a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a64c:	7088      	strb	r0, [r1, #2]
1005a64e:	27ff      	movs	r7, #255	@ 0xff
1005a650:	4638      	mov	r0, r7
1005a652:	3004      	adds	r0, #4
1005a654:	8008      	strh	r0, [r1, #0]
1005a656:	2102      	movs	r1, #2
1005a658:	4618      	mov	r0, r3
1005a65a:	4614      	mov	r4, r2
1005a65c:	f7fd fa92 	bl	10057b84 <llc_conn_set_start_enc>
1005a660:	200b      	movs	r0, #11
1005a662:	7020      	strb	r0, [r4, #0]
1005a664:	e66b      	b.n	1005a33e <LL_encryption+0x2a>
1005a666:	200c      	movs	r0, #12
1005a668:	7010      	strb	r0, [r2, #0]
1005a66a:	e0c7      	b.n	1005a7fc <LL_encryption+0x4e8>
1005a66c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a66e:	7880      	ldrb	r0, [r0, #2]
1005a670:	2806      	cmp	r0, #6
1005a672:	d000      	beq.n	1005a676 <LL_encryption+0x362>
1005a674:	e65e      	b.n	1005a334 <LL_encryption+0x20>
1005a676:	2000      	movs	r0, #0
1005a678:	4615      	mov	r5, r2
1005a67a:	7010      	strb	r0, [r2, #0]
1005a67c:	48c4      	ldr	r0, [pc, #784]	@ (1005a990 <__arm_cp.0_0>)
1005a67e:	6800      	ldr	r0, [r0, #0]
1005a680:	212c      	movs	r1, #44	@ 0x2c
1005a682:	5c40      	ldrb	r0, [r0, r1]
1005a684:	07c0      	lsls	r0, r0, #31
1005a686:	0ec1      	lsrs	r1, r0, #27
1005a688:	206f      	movs	r0, #111	@ 0x6f
1005a68a:	43c0      	mvns	r0, r0
1005a68c:	4048      	eors	r0, r1
1005a68e:	461c      	mov	r4, r3
1005a690:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005a692:	7929      	ldrb	r1, [r5, #4]
1005a694:	b2c0      	uxtb	r0, r0
1005a696:	2901      	cmp	r1, #1
1005a698:	d000      	beq.n	1005a69c <LL_encryption+0x388>
1005a69a:	e111      	b.n	1005a8c0 <LL_encryption+0x5ac>
1005a69c:	4611      	mov	r1, r2
1005a69e:	f000 f9bf 	bl	1005aa20 <hci_encryption_key_refresh_complete_event_push>
1005a6a2:	e111      	b.n	1005a8c8 <LL_encryption+0x5b4>
1005a6a4:	48ba      	ldr	r0, [pc, #744]	@ (1005a990 <__arm_cp.0_0>)
1005a6a6:	6800      	ldr	r0, [r0, #0]
1005a6a8:	212c      	movs	r1, #44	@ 0x2c
1005a6aa:	5c40      	ldrb	r0, [r0, r1]
1005a6ac:	0100      	lsls	r0, r0, #4
1005a6ae:	43c0      	mvns	r0, r0
1005a6b0:	2180      	movs	r1, #128	@ 0x80
1005a6b2:	4301      	orrs	r1, r0
1005a6b4:	2090      	movs	r0, #144	@ 0x90
1005a6b6:	4008      	ands	r0, r1
1005a6b8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005a6ba:	211a      	movs	r1, #26
1005a6bc:	e00b      	b.n	1005a6d6 <LL_encryption+0x3c2>
1005a6be:	48b4      	ldr	r0, [pc, #720]	@ (1005a990 <__arm_cp.0_0>)
1005a6c0:	6800      	ldr	r0, [r0, #0]
1005a6c2:	212c      	movs	r1, #44	@ 0x2c
1005a6c4:	5c40      	ldrb	r0, [r0, r1]
1005a6c6:	0100      	lsls	r0, r0, #4
1005a6c8:	43c0      	mvns	r0, r0
1005a6ca:	2180      	movs	r1, #128	@ 0x80
1005a6cc:	4301      	orrs	r1, r0
1005a6ce:	2090      	movs	r0, #144	@ 0x90
1005a6d0:	4008      	ands	r0, r1
1005a6d2:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005a6d4:	2106      	movs	r1, #6
1005a6d6:	461c      	mov	r4, r3
1005a6d8:	2300      	movs	r3, #0
1005a6da:	f000 f96f 	bl	1005a9bc <hci_encryption_change_event_push>
1005a6de:	4620      	mov	r0, r4
1005a6e0:	f7fc ff05 	bl	100574ee <llc_conn_clr_tx_acl_blocked>
1005a6e4:	4620      	mov	r0, r4
1005a6e6:	f7fc fef1 	bl	100574cc <llc_conn_clr_rx_acl_blocked>
1005a6ea:	2101      	movs	r1, #1
1005a6ec:	9808      	ldr	r0, [sp, #32]
1005a6ee:	e0f4      	b.n	1005a8da <LL_encryption+0x5c6>
1005a6f0:	2003      	movs	r0, #3
1005a6f2:	7050      	strb	r0, [r2, #1]
1005a6f4:	2101      	movs	r1, #1
1005a6f6:	4618      	mov	r0, r3
1005a6f8:	f7fd fa55 	bl	10057ba6 <llc_conn_set_stop_enc>
1005a6fc:	270b      	movs	r7, #11
1005a6fe:	e61e      	b.n	1005a33e <LL_encryption+0x2a>
1005a700:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a702:	7880      	ldrb	r0, [r0, #2]
1005a704:	280b      	cmp	r0, #11
1005a706:	d000      	beq.n	1005a70a <LL_encryption+0x3f6>
1005a708:	e614      	b.n	1005a334 <LL_encryption+0x20>
1005a70a:	2004      	movs	r0, #4
1005a70c:	7050      	strb	r0, [r2, #1]
1005a70e:	2703      	movs	r7, #3
1005a710:	e615      	b.n	1005a33e <LL_encryption+0x2a>
1005a712:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a714:	7880      	ldrb	r0, [r0, #2]
1005a716:	2803      	cmp	r0, #3
1005a718:	9f05      	ldr	r7, [sp, #20]
1005a71a:	9e07      	ldr	r6, [sp, #28]
1005a71c:	d000      	beq.n	1005a720 <LL_encryption+0x40c>
1005a71e:	e609      	b.n	1005a334 <LL_encryption+0x20>
1005a720:	2005      	movs	r0, #5
1005a722:	7050      	strb	r0, [r2, #1]
1005a724:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005a726:	1ce0      	adds	r0, r4, #3
1005a728:	4631      	mov	r1, r6
1005a72a:	3130      	adds	r1, #48	@ 0x30
1005a72c:	2508      	movs	r5, #8
1005a72e:	462a      	mov	r2, r5
1005a730:	4b9b      	ldr	r3, [pc, #620]	@ (1005a9a0 <__arm_cp.0_4>)
1005a732:	4798      	blx	r3
1005a734:	4620      	mov	r0, r4
1005a736:	300b      	adds	r0, #11
1005a738:	4631      	mov	r1, r6
1005a73a:	312e      	adds	r1, #46	@ 0x2e
1005a73c:	2202      	movs	r2, #2
1005a73e:	4b98      	ldr	r3, [pc, #608]	@ (1005a9a0 <__arm_cp.0_4>)
1005a740:	4798      	blx	r3
1005a742:	4620      	mov	r0, r4
1005a744:	300d      	adds	r0, #13
1005a746:	4631      	mov	r1, r6
1005a748:	462a      	mov	r2, r5
1005a74a:	4d95      	ldr	r5, [pc, #596]	@ (1005a9a0 <__arm_cp.0_4>)
1005a74c:	47a8      	blx	r5
1005a74e:	3415      	adds	r4, #21
1005a750:	3620      	adds	r6, #32
1005a752:	2204      	movs	r2, #4
1005a754:	4620      	mov	r0, r4
1005a756:	4631      	mov	r1, r6
1005a758:	47a8      	blx	r5
1005a75a:	e0ac      	b.n	1005a8b6 <LL_encryption+0x5a2>
1005a75c:	2400      	movs	r4, #0
1005a75e:	9403      	str	r4, [sp, #12]
1005a760:	4d8e      	ldr	r5, [pc, #568]	@ (1005a99c <__arm_cp.0_3>)
1005a762:	4620      	mov	r0, r4
1005a764:	9304      	str	r3, [sp, #16]
1005a766:	9206      	str	r2, [sp, #24]
1005a768:	47a8      	blx	r5
1005a76a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a76c:	4620      	mov	r0, r4
1005a76e:	47a8      	blx	r5
1005a770:	900c      	str	r0, [sp, #48]	@ 0x30
1005a772:	4620      	mov	r0, r4
1005a774:	47a8      	blx	r5
1005a776:	2604      	movs	r6, #4
1005a778:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005a77a:	70a6      	strb	r6, [r4, #2]
1005a77c:	210d      	movs	r1, #13
1005a77e:	7061      	strb	r1, [r4, #1]
1005a780:	2103      	movs	r1, #3
1005a782:	7021      	strb	r1, [r4, #0]
1005a784:	900a      	str	r0, [sp, #40]	@ 0x28
1005a786:	1ce1      	adds	r1, r4, #3
1005a788:	ad0b      	add	r5, sp, #44	@ 0x2c
1005a78a:	2208      	movs	r2, #8
1005a78c:	9202      	str	r2, [sp, #8]
1005a78e:	4b84      	ldr	r3, [pc, #528]	@ (1005a9a0 <__arm_cp.0_4>)
1005a790:	4628      	mov	r0, r5
1005a792:	4798      	blx	r3
1005a794:	340b      	adds	r4, #11
1005a796:	af0a      	add	r7, sp, #40	@ 0x28
1005a798:	4638      	mov	r0, r7
1005a79a:	4621      	mov	r1, r4
1005a79c:	4632      	mov	r2, r6
1005a79e:	4b80      	ldr	r3, [pc, #512]	@ (1005a9a0 <__arm_cp.0_4>)
1005a7a0:	4798      	blx	r3
1005a7a2:	9c07      	ldr	r4, [sp, #28]
1005a7a4:	4621      	mov	r1, r4
1005a7a6:	3108      	adds	r1, #8
1005a7a8:	4628      	mov	r0, r5
1005a7aa:	9a02      	ldr	r2, [sp, #8]
1005a7ac:	4d7c      	ldr	r5, [pc, #496]	@ (1005a9a0 <__arm_cp.0_4>)
1005a7ae:	47a8      	blx	r5
1005a7b0:	3424      	adds	r4, #36	@ 0x24
1005a7b2:	4638      	mov	r0, r7
1005a7b4:	4621      	mov	r1, r4
1005a7b6:	4632      	mov	r2, r6
1005a7b8:	47a8      	blx	r5
1005a7ba:	2006      	movs	r0, #6
1005a7bc:	9906      	ldr	r1, [sp, #24]
1005a7be:	7048      	strb	r0, [r1, #1]
1005a7c0:	2201      	movs	r2, #1
1005a7c2:	9808      	ldr	r0, [sp, #32]
1005a7c4:	9903      	ldr	r1, [sp, #12]
1005a7c6:	f7fe fb4b 	bl	10058e60 <LL_cpe_set_blocked>
1005a7ca:	9804      	ldr	r0, [sp, #16]
1005a7cc:	f7fd f9fc 	bl	10057bc8 <llc_conn_set_tx_acl_blocked>
1005a7d0:	e0db      	b.n	1005a98a <__arm_cp.0_10+0x66>
1005a7d2:	4870      	ldr	r0, [pc, #448]	@ (1005a994 <__arm_cp.0_1>)
1005a7d4:	6800      	ldr	r0, [r0, #0]
1005a7d6:	213d      	movs	r1, #61	@ 0x3d
1005a7d8:	5c41      	ldrb	r1, [r0, r1]
1005a7da:	0689      	lsls	r1, r1, #26
1005a7dc:	d504      	bpl.n	1005a7e8 <LL_encryption+0x4d4>
1005a7de:	303d      	adds	r0, #61	@ 0x3d
1005a7e0:	7a40      	ldrb	r0, [r0, #9]
1005a7e2:	06c0      	lsls	r0, r0, #27
1005a7e4:	d500      	bpl.n	1005a7e8 <LL_encryption+0x4d4>
1005a7e6:	e093      	b.n	1005a910 <LL_encryption+0x5fc>
1005a7e8:	2100      	movs	r1, #0
1005a7ea:	9808      	ldr	r0, [sp, #32]
1005a7ec:	4614      	mov	r4, r2
1005a7ee:	f7fe fb47 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005a7f2:	4620      	mov	r0, r4
1005a7f4:	270d      	movs	r7, #13
1005a7f6:	e0c7      	b.n	1005a988 <__arm_cp.0_10+0x64>
1005a7f8:	2009      	movs	r0, #9
1005a7fa:	7050      	strb	r0, [r2, #1]
1005a7fc:	2706      	movs	r7, #6
1005a7fe:	e59e      	b.n	1005a33e <LL_encryption+0x2a>
1005a800:	2006      	movs	r0, #6
1005a802:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a804:	7088      	strb	r0, [r1, #2]
1005a806:	200b      	movs	r0, #11
1005a808:	7050      	strb	r0, [r2, #1]
1005a80a:	25ff      	movs	r5, #255	@ 0xff
1005a80c:	4628      	mov	r0, r5
1005a80e:	3004      	adds	r0, #4
1005a810:	8008      	strh	r0, [r1, #0]
1005a812:	2401      	movs	r4, #1
1005a814:	4618      	mov	r0, r3
1005a816:	4621      	mov	r1, r4
1005a818:	f7fd f9b4 	bl	10057b84 <llc_conn_set_start_enc>
1005a81c:	703c      	strb	r4, [r7, #0]
1005a81e:	462f      	mov	r7, r5
1005a820:	e58d      	b.n	1005a33e <LL_encryption+0x2a>
1005a822:	2400      	movs	r4, #0
1005a824:	7054      	strb	r4, [r2, #1]
1005a826:	485a      	ldr	r0, [pc, #360]	@ (1005a990 <__arm_cp.0_0>)
1005a828:	6800      	ldr	r0, [r0, #0]
1005a82a:	212c      	movs	r1, #44	@ 0x2c
1005a82c:	5c40      	ldrb	r0, [r0, r1]
1005a82e:	07c0      	lsls	r0, r0, #31
1005a830:	0ec1      	lsrs	r1, r0, #27
1005a832:	206f      	movs	r0, #111	@ 0x6f
1005a834:	43c0      	mvns	r0, r0
1005a836:	4048      	eors	r0, r1
1005a838:	4611      	mov	r1, r2
1005a83a:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005a83c:	7909      	ldrb	r1, [r1, #4]
1005a83e:	b2c0      	uxtb	r0, r0
1005a840:	2901      	cmp	r1, #1
1005a842:	d14e      	bne.n	1005a8e2 <LL_encryption+0x5ce>
1005a844:	4611      	mov	r1, r2
1005a846:	461e      	mov	r6, r3
1005a848:	f000 f8ea 	bl	1005aa20 <hci_encryption_key_refresh_complete_event_push>
1005a84c:	e04e      	b.n	1005a8ec <LL_encryption+0x5d8>
1005a84e:	4618      	mov	r0, r3
1005a850:	4615      	mov	r5, r2
1005a852:	f7fc fe4c 	bl	100574ee <llc_conn_clr_tx_acl_blocked>
1005a856:	2400      	movs	r4, #0
1005a858:	2201      	movs	r2, #1
1005a85a:	9808      	ldr	r0, [sp, #32]
1005a85c:	4621      	mov	r1, r4
1005a85e:	f7fe fadd 	bl	10058e1c <LL_cpe_clr_active>
1005a862:	706c      	strb	r4, [r5, #1]
1005a864:	e091      	b.n	1005a98a <__arm_cp.0_10+0x66>
1005a866:	78d0      	ldrb	r0, [r2, #3]
1005a868:	2801      	cmp	r0, #1
1005a86a:	d110      	bne.n	1005a88e <LL_encryption+0x57a>
1005a86c:	2005      	movs	r0, #5
1005a86e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a870:	7088      	strb	r0, [r1, #2]
1005a872:	9807      	ldr	r0, [sp, #28]
1005a874:	6730      	str	r0, [r6, #112]	@ 0x70
1005a876:	27ff      	movs	r7, #255	@ 0xff
1005a878:	4638      	mov	r0, r7
1005a87a:	3004      	adds	r0, #4
1005a87c:	8008      	strh	r0, [r1, #0]
1005a87e:	2100      	movs	r1, #0
1005a880:	4618      	mov	r0, r3
1005a882:	4614      	mov	r4, r2
1005a884:	f7fd f97e 	bl	10057b84 <llc_conn_set_start_enc>
1005a888:	2008      	movs	r0, #8
1005a88a:	7060      	strb	r0, [r4, #1]
1005a88c:	e557      	b.n	1005a33e <LL_encryption+0x2a>
1005a88e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a890:	4619      	mov	r1, r3
1005a892:	461c      	mov	r4, r3
1005a894:	4615      	mov	r5, r2
1005a896:	f000 f8f5 	bl	1005aa84 <llc_enc_prepare_reject>
1005a89a:	200c      	movs	r0, #12
1005a89c:	7068      	strb	r0, [r5, #1]
1005a89e:	4620      	mov	r0, r4
1005a8a0:	f7fc fe14 	bl	100574cc <llc_conn_clr_rx_acl_blocked>
1005a8a4:	e071      	b.n	1005a98a <__arm_cp.0_10+0x66>
1005a8a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a8a8:	7880      	ldrb	r0, [r0, #2]
1005a8aa:	2806      	cmp	r0, #6
1005a8ac:	9f05      	ldr	r7, [sp, #20]
1005a8ae:	d000      	beq.n	1005a8b2 <LL_encryption+0x59e>
1005a8b0:	e540      	b.n	1005a334 <LL_encryption+0x20>
1005a8b2:	200a      	movs	r0, #10
1005a8b4:	7050      	strb	r0, [r2, #1]
1005a8b6:	2100      	movs	r1, #0
1005a8b8:	9808      	ldr	r0, [sp, #32]
1005a8ba:	f7fe fae1 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005a8be:	e53e      	b.n	1005a33e <LL_encryption+0x2a>
1005a8c0:	2100      	movs	r1, #0
1005a8c2:	2301      	movs	r3, #1
1005a8c4:	f000 f87a 	bl	1005a9bc <hci_encryption_change_event_push>
1005a8c8:	9d08      	ldr	r5, [sp, #32]
1005a8ca:	4620      	mov	r0, r4
1005a8cc:	f7fc fe0f 	bl	100574ee <llc_conn_clr_tx_acl_blocked>
1005a8d0:	4620      	mov	r0, r4
1005a8d2:	f7fc fdfb 	bl	100574cc <llc_conn_clr_rx_acl_blocked>
1005a8d6:	2101      	movs	r1, #1
1005a8d8:	4628      	mov	r0, r5
1005a8da:	460a      	mov	r2, r1
1005a8dc:	f7fe fa9e 	bl	10058e1c <LL_cpe_clr_active>
1005a8e0:	e52d      	b.n	1005a33e <LL_encryption+0x2a>
1005a8e2:	2100      	movs	r1, #0
1005a8e4:	461e      	mov	r6, r3
1005a8e6:	2301      	movs	r3, #1
1005a8e8:	f000 f868 	bl	1005a9bc <hci_encryption_change_event_push>
1005a8ec:	4630      	mov	r0, r6
1005a8ee:	9e08      	ldr	r6, [sp, #32]
1005a8f0:	703c      	strb	r4, [r7, #0]
1005a8f2:	4604      	mov	r4, r0
1005a8f4:	f7fc fdfb 	bl	100574ee <llc_conn_clr_tx_acl_blocked>
1005a8f8:	4620      	mov	r0, r4
1005a8fa:	f7fc fde7 	bl	100574cc <llc_conn_clr_rx_acl_blocked>
1005a8fe:	2201      	movs	r2, #1
1005a900:	4630      	mov	r0, r6
1005a902:	4629      	mov	r1, r5
1005a904:	f7fe fa8a 	bl	10058e1c <LL_cpe_clr_active>
1005a908:	e03f      	b.n	1005a98a <__arm_cp.0_10+0x66>
1005a90a:	46c0      	nop			@ (mov r8, r8)
1005a90c:	1005ffb3 	.word	0x1005ffb3
1005a910:	481f      	ldr	r0, [pc, #124]	@ (1005a990 <__arm_cp.0_0>)
1005a912:	6800      	ldr	r0, [r0, #0]
1005a914:	212c      	movs	r1, #44	@ 0x2c
1005a916:	5c40      	ldrb	r0, [r0, r1]
1005a918:	07c0      	lsls	r0, r0, #31
1005a91a:	0ec0      	lsrs	r0, r0, #27
1005a91c:	9206      	str	r2, [sp, #24]
1005a91e:	d003      	beq.n	1005a928 <__arm_cp.0_10+0x4>
1005a920:	2219      	movs	r2, #25
1005a922:	e002      	b.n	1005a92a <__arm_cp.0_10+0x6>

1005a924 <__arm_cp.0_10>:
1005a924:	00001703 	.word	0x00001703
1005a928:	220a      	movs	r2, #10
1005a92a:	9d07      	ldr	r5, [sp, #28]
1005a92c:	216f      	movs	r1, #111	@ 0x6f
1005a92e:	43c9      	mvns	r1, r1
1005a930:	4048      	eors	r0, r1
1005a932:	b2c1      	uxtb	r1, r0
1005a934:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005a936:	9007      	str	r0, [sp, #28]
1005a938:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005a93a:	4817      	ldr	r0, [pc, #92]	@ (1005a998 <__arm_cp.0_2>)
1005a93c:	6800      	ldr	r0, [r0, #0]
1005a93e:	6900      	ldr	r0, [r0, #16]
1005a940:	2304      	movs	r3, #4
1005a942:	9109      	str	r1, [sp, #36]	@ 0x24
1005a944:	9308      	str	r3, [sp, #32]
1005a946:	f7f7 fcc9 	bl	100522dc <aci_event_fifo_push_header>
1005a94a:	2707      	movs	r7, #7
1005a94c:	2800      	cmp	r0, #0
1005a94e:	d01a      	beq.n	1005a986 <__arm_cp.0_10+0x62>
1005a950:	4606      	mov	r6, r0
1005a952:	7204      	strb	r4, [r0, #8]
1005a954:	0a20      	lsrs	r0, r4, #8
1005a956:	7270      	strb	r0, [r6, #9]
1005a958:	4630      	mov	r0, r6
1005a95a:	300a      	adds	r0, #10
1005a95c:	3530      	adds	r5, #48	@ 0x30
1005a95e:	2208      	movs	r2, #8
1005a960:	4629      	mov	r1, r5
1005a962:	f7f4 ff6f 	bl	1004f844 <BLEPLAT_MemCpy>
1005a966:	9907      	ldr	r1, [sp, #28]
1005a968:	0a08      	lsrs	r0, r1, #8
1005a96a:	74f0      	strb	r0, [r6, #19]
1005a96c:	74b1      	strb	r1, [r6, #18]
1005a96e:	2005      	movs	r0, #5
1005a970:	71f0      	strb	r0, [r6, #7]
1005a972:	200d      	movs	r0, #13
1005a974:	71b0      	strb	r0, [r6, #6]
1005a976:	203e      	movs	r0, #62	@ 0x3e
1005a978:	7170      	strb	r0, [r6, #5]
1005a97a:	9808      	ldr	r0, [sp, #32]
1005a97c:	7130      	strb	r0, [r6, #4]
1005a97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a980:	4631      	mov	r1, r6
1005a982:	f7f7 fd48 	bl	10052416 <aci_event_fifo_push>
1005a986:	9806      	ldr	r0, [sp, #24]
1005a988:	7047      	strb	r7, [r0, #1]
1005a98a:	9f05      	ldr	r7, [sp, #20]
1005a98c:	e4d7      	b.n	1005a33e <LL_encryption+0x2a>
1005a98e:	46c0      	nop			@ (mov r8, r8)

1005a990 <__arm_cp.0_0>:
1005a990:	20000ecc 	.word	0x20000ecc

1005a994 <__arm_cp.0_1>:
1005a994:	20000f20 	.word	0x20000f20

1005a998 <__arm_cp.0_2>:
1005a998:	20000ed0 	.word	0x20000ed0

1005a99c <__arm_cp.0_3>:
1005a99c:	1005ffb3 	.word	0x1005ffb3

1005a9a0 <__arm_cp.0_4>:
1005a9a0:	1005fc81 	.word	0x1005fc81

1005a9a4 <le4ByteToInt32>:
1005a9a4:	7801      	ldrb	r1, [r0, #0]
1005a9a6:	7842      	ldrb	r2, [r0, #1]
1005a9a8:	0212      	lsls	r2, r2, #8
1005a9aa:	1851      	adds	r1, r2, r1
1005a9ac:	7882      	ldrb	r2, [r0, #2]
1005a9ae:	0412      	lsls	r2, r2, #16
1005a9b0:	1889      	adds	r1, r1, r2
1005a9b2:	78c0      	ldrb	r0, [r0, #3]
1005a9b4:	0600      	lsls	r0, r0, #24
1005a9b6:	1808      	adds	r0, r1, r0
1005a9b8:	4770      	bx	lr
	...

1005a9bc <hci_encryption_change_event_push>:
1005a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a9be:	461e      	mov	r6, r3
1005a9c0:	4615      	mov	r5, r2
1005a9c2:	460f      	mov	r7, r1
1005a9c4:	4604      	mov	r4, r0
1005a9c6:	06c0      	lsls	r0, r0, #27
1005a9c8:	d406      	bmi.n	1005a9d8 <hci_encryption_change_event_push+0x1c>
1005a9ca:	4813      	ldr	r0, [pc, #76]	@ (1005aa18 <__arm_cp.2_0>)
1005a9cc:	6800      	ldr	r0, [r0, #0]
1005a9ce:	2136      	movs	r1, #54	@ 0x36
1005a9d0:	5640      	ldrsb	r0, [r0, r1]
1005a9d2:	2800      	cmp	r0, #0
1005a9d4:	d404      	bmi.n	1005a9e0 <hci_encryption_change_event_push+0x24>
1005a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a9d8:	20bf      	movs	r0, #191	@ 0xbf
1005a9da:	4004      	ands	r4, r0
1005a9dc:	2206      	movs	r2, #6
1005a9de:	e000      	b.n	1005a9e2 <hci_encryption_change_event_push+0x26>
1005a9e0:	2216      	movs	r2, #22
1005a9e2:	480e      	ldr	r0, [pc, #56]	@ (1005aa1c <__arm_cp.2_1>)
1005a9e4:	6800      	ldr	r0, [r0, #0]
1005a9e6:	0761      	lsls	r1, r4, #29
1005a9e8:	0ec9      	lsrs	r1, r1, #27
1005a9ea:	1840      	adds	r0, r0, r1
1005a9ec:	6900      	ldr	r0, [r0, #16]
1005a9ee:	2302      	movs	r3, #2
1005a9f0:	4621      	mov	r1, r4
1005a9f2:	f7f7 fc73 	bl	100522dc <aci_event_fifo_push_header>
1005a9f6:	2800      	cmp	r0, #0
1005a9f8:	d0ed      	beq.n	1005a9d6 <hci_encryption_change_event_push+0x1a>
1005a9fa:	4601      	mov	r1, r0
1005a9fc:	7205      	strb	r5, [r0, #8]
1005a9fe:	7286      	strb	r6, [r0, #10]
1005aa00:	71c7      	strb	r7, [r0, #7]
1005aa02:	2004      	movs	r0, #4
1005aa04:	7188      	strb	r0, [r1, #6]
1005aa06:	2208      	movs	r2, #8
1005aa08:	714a      	strb	r2, [r1, #5]
1005aa0a:	7108      	strb	r0, [r1, #4]
1005aa0c:	0a28      	lsrs	r0, r5, #8
1005aa0e:	7248      	strb	r0, [r1, #9]
1005aa10:	4620      	mov	r0, r4
1005aa12:	f7f7 fd00 	bl	10052416 <aci_event_fifo_push>
1005aa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005aa18 <__arm_cp.2_0>:
1005aa18:	20000f20 	.word	0x20000f20

1005aa1c <__arm_cp.2_1>:
1005aa1c:	20000ed0 	.word	0x20000ed0

1005aa20 <hci_encryption_key_refresh_complete_event_push>:
1005aa20:	b5b0      	push	{r4, r5, r7, lr}
1005aa22:	460d      	mov	r5, r1
1005aa24:	4604      	mov	r4, r0
1005aa26:	06c0      	lsls	r0, r0, #27
1005aa28:	d406      	bmi.n	1005aa38 <hci_encryption_key_refresh_complete_event_push+0x18>
1005aa2a:	4814      	ldr	r0, [pc, #80]	@ (1005aa7c <__arm_cp.3_0>)
1005aa2c:	6800      	ldr	r0, [r0, #0]
1005aa2e:	213b      	movs	r1, #59	@ 0x3b
1005aa30:	5640      	ldrsb	r0, [r0, r1]
1005aa32:	2800      	cmp	r0, #0
1005aa34:	d404      	bmi.n	1005aa40 <hci_encryption_key_refresh_complete_event_push+0x20>
1005aa36:	bdb0      	pop	{r4, r5, r7, pc}
1005aa38:	20bf      	movs	r0, #191	@ 0xbf
1005aa3a:	4004      	ands	r4, r0
1005aa3c:	2207      	movs	r2, #7
1005aa3e:	e000      	b.n	1005aa42 <hci_encryption_key_refresh_complete_event_push+0x22>
1005aa40:	2217      	movs	r2, #23
1005aa42:	480f      	ldr	r0, [pc, #60]	@ (1005aa80 <__arm_cp.3_1>)
1005aa44:	6800      	ldr	r0, [r0, #0]
1005aa46:	0761      	lsls	r1, r4, #29
1005aa48:	0ec9      	lsrs	r1, r1, #27
1005aa4a:	1840      	adds	r0, r0, r1
1005aa4c:	6900      	ldr	r0, [r0, #16]
1005aa4e:	2302      	movs	r3, #2
1005aa50:	4621      	mov	r1, r4
1005aa52:	f7f7 fc43 	bl	100522dc <aci_event_fifo_push_header>
1005aa56:	2800      	cmp	r0, #0
1005aa58:	d0ed      	beq.n	1005aa36 <hci_encryption_key_refresh_complete_event_push+0x16>
1005aa5a:	4601      	mov	r1, r0
1005aa5c:	7205      	strb	r5, [r0, #8]
1005aa5e:	2000      	movs	r0, #0
1005aa60:	71c8      	strb	r0, [r1, #7]
1005aa62:	2003      	movs	r0, #3
1005aa64:	7188      	strb	r0, [r1, #6]
1005aa66:	2030      	movs	r0, #48	@ 0x30
1005aa68:	7148      	strb	r0, [r1, #5]
1005aa6a:	2004      	movs	r0, #4
1005aa6c:	7108      	strb	r0, [r1, #4]
1005aa6e:	0a28      	lsrs	r0, r5, #8
1005aa70:	7248      	strb	r0, [r1, #9]
1005aa72:	4620      	mov	r0, r4
1005aa74:	f7f7 fccf 	bl	10052416 <aci_event_fifo_push>
1005aa78:	bdb0      	pop	{r4, r5, r7, pc}
1005aa7a:	46c0      	nop			@ (mov r8, r8)

1005aa7c <__arm_cp.3_0>:
1005aa7c:	20000f20 	.word	0x20000f20

1005aa80 <__arm_cp.3_1>:
1005aa80:	20000ed0 	.word	0x20000ed0

1005aa84 <llc_enc_prepare_reject>:
1005aa84:	2203      	movs	r2, #3
1005aa86:	7002      	strb	r2, [r0, #0]
1005aa88:	2397      	movs	r3, #151	@ 0x97
1005aa8a:	005b      	lsls	r3, r3, #1
1005aa8c:	5cc9      	ldrb	r1, [r1, r3]
1005aa8e:	0749      	lsls	r1, r1, #29
1005aa90:	d403      	bmi.n	1005aa9a <llc_enc_prepare_reject+0x16>
1005aa92:	2306      	movs	r3, #6
1005aa94:	210d      	movs	r1, #13
1005aa96:	2202      	movs	r2, #2
1005aa98:	e003      	b.n	1005aaa2 <llc_enc_prepare_reject+0x1e>
1005aa9a:	2106      	movs	r1, #6
1005aa9c:	7101      	strb	r1, [r0, #4]
1005aa9e:	2111      	movs	r1, #17
1005aaa0:	4613      	mov	r3, r2
1005aaa2:	70c3      	strb	r3, [r0, #3]
1005aaa4:	7081      	strb	r1, [r0, #2]
1005aaa6:	7042      	strb	r2, [r0, #1]
1005aaa8:	4770      	bx	lr

1005aaaa <LL_Get_LTK>:
1005aaaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005aaac:	4614      	mov	r4, r2
1005aaae:	4606      	mov	r6, r0
1005aab0:	4608      	mov	r0, r1
1005aab2:	f7fc fb47 	bl	10057144 <llc_conn_get_cntxt_per_p_from_handle>
1005aab6:	2130      	movs	r1, #48	@ 0x30
1005aab8:	5641      	ldrsb	r1, [r0, r1]
1005aaba:	2900      	cmp	r1, #0
1005aabc:	d405      	bmi.n	1005aaca <LL_Get_LTK+0x20>
1005aabe:	302c      	adds	r0, #44	@ 0x2c
1005aac0:	7800      	ldrb	r0, [r0, #0]
1005aac2:	2802      	cmp	r0, #2
1005aac4:	d103      	bne.n	1005aace <LL_Get_LTK+0x24>
1005aac6:	2512      	movs	r5, #18
1005aac8:	e018      	b.n	1005aafc <LL_Get_LTK+0x52>
1005aaca:	2502      	movs	r5, #2
1005aacc:	e016      	b.n	1005aafc <LL_Get_LTK+0x52>
1005aace:	b2cf      	uxtb	r7, r1
1005aad0:	2500      	movs	r5, #0
1005aad2:	4638      	mov	r0, r7
1005aad4:	4629      	mov	r1, r5
1005aad6:	f7fe f9d3 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005aada:	4638      	mov	r0, r7
1005aadc:	4629      	mov	r1, r5
1005aade:	f7fe f9dc 	bl	10058e9a <LL_cpe_get_cntxt>
1005aae2:	4601      	mov	r1, r0
1005aae4:	302b      	adds	r0, #43	@ 0x2b
1005aae6:	2e00      	cmp	r6, #0
1005aae8:	d001      	beq.n	1005aaee <LL_Get_LTK+0x44>
1005aaea:	7005      	strb	r5, [r0, #0]
1005aaec:	e006      	b.n	1005aafc <LL_Get_LTK+0x52>
1005aaee:	2201      	movs	r2, #1
1005aaf0:	7002      	strb	r2, [r0, #0]
1005aaf2:	3110      	adds	r1, #16
1005aaf4:	2210      	movs	r2, #16
1005aaf6:	4620      	mov	r0, r4
1005aaf8:	f005 f8c2 	bl	1005fc80 <char_copy>
1005aafc:	4628      	mov	r0, r5
1005aafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ab00 <LL_feature_exchange>:
1005ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ab02:	b085      	sub	sp, #20
1005ab04:	461c      	mov	r4, r3
1005ab06:	4615      	mov	r5, r2
1005ab08:	460e      	mov	r6, r1
1005ab0a:	4607      	mov	r7, r0
1005ab0c:	f7fe f9c5 	bl	10058e9a <LL_cpe_get_cntxt>
1005ab10:	9003      	str	r0, [sp, #12]
1005ab12:	9702      	str	r7, [sp, #8]
1005ab14:	4638      	mov	r0, r7
1005ab16:	f7fc fb07 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005ab1a:	4607      	mov	r7, r0
1005ab1c:	20ff      	movs	r0, #255	@ 0xff
1005ab1e:	2d06      	cmp	r5, #6
1005ab20:	d900      	bls.n	1005ab24 <LL_feature_exchange+0x24>
1005ab22:	e099      	b.n	1005ac58 <LL_feature_exchange+0x158>
1005ab24:	9604      	str	r6, [sp, #16]
1005ab26:	2197      	movs	r1, #151	@ 0x97
1005ab28:	0049      	lsls	r1, r1, #1
1005ab2a:	187b      	adds	r3, r7, r1
1005ab2c:	463e      	mov	r6, r7
1005ab2e:	362c      	adds	r6, #44	@ 0x2c
1005ab30:	447d      	add	r5, pc
1005ab32:	792d      	ldrb	r5, [r5, #4]
1005ab34:	006d      	lsls	r5, r5, #1
1005ab36:	44af      	add	pc, r5
1005ab38:	298f0803 	.word	0x298f0803
1005ab3c:	004a8f8f 	.word	0x004a8f8f
1005ab40:	9904      	ldr	r1, [sp, #16]
1005ab42:	2901      	cmp	r1, #1
1005ab44:	d160      	bne.n	1005ac08 <LL_feature_exchange+0x108>
1005ab46:	2009      	movs	r0, #9
1005ab48:	e086      	b.n	1005ac58 <LL_feature_exchange+0x158>
1005ab4a:	78a1      	ldrb	r1, [r4, #2]
1005ab4c:	290e      	cmp	r1, #14
1005ab4e:	d002      	beq.n	1005ab56 <LL_feature_exchange+0x56>
1005ab50:	2908      	cmp	r1, #8
1005ab52:	d000      	beq.n	1005ab56 <LL_feature_exchange+0x56>
1005ab54:	e080      	b.n	1005ac58 <LL_feature_exchange+0x158>
1005ab56:	1ce4      	adds	r4, r4, #3
1005ab58:	9903      	ldr	r1, [sp, #12]
1005ab5a:	3108      	adds	r1, #8
1005ab5c:	4605      	mov	r5, r0
1005ab5e:	2208      	movs	r2, #8
1005ab60:	4620      	mov	r0, r4
1005ab62:	461e      	mov	r6, r3
1005ab64:	f005 f88c 	bl	1005fc80 <char_copy>
1005ab68:	2205      	movs	r2, #5
1005ab6a:	4630      	mov	r0, r6
1005ab6c:	4621      	mov	r1, r4
1005ab6e:	f7f4 fe69 	bl	1004f844 <BLEPLAT_MemCpy>
1005ab72:	9e02      	ldr	r6, [sp, #8]
1005ab74:	4630      	mov	r0, r6
1005ab76:	9c04      	ldr	r4, [sp, #16]
1005ab78:	4621      	mov	r1, r4
1005ab7a:	f7fe f981 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005ab7e:	2203      	movs	r2, #3
1005ab80:	2300      	movs	r3, #0
1005ab82:	4630      	mov	r0, r6
1005ab84:	4621      	mov	r1, r4
1005ab86:	f7fe f932 	bl	10058dee <LL_cpe_set_active>
1005ab8a:	e01e      	b.n	1005abca <LL_feature_exchange+0xca>
1005ab8c:	78a1      	ldrb	r1, [r4, #2]
1005ab8e:	2907      	cmp	r1, #7
1005ab90:	d046      	beq.n	1005ac20 <LL_feature_exchange+0x120>
1005ab92:	2909      	cmp	r1, #9
1005ab94:	d160      	bne.n	1005ac58 <LL_feature_exchange+0x158>
1005ab96:	4605      	mov	r5, r0
1005ab98:	1ce4      	adds	r4, r4, #3
1005ab9a:	2205      	movs	r2, #5
1005ab9c:	4618      	mov	r0, r3
1005ab9e:	4621      	mov	r1, r4
1005aba0:	f7f4 fe50 	bl	1004f844 <BLEPLAT_MemCpy>
1005aba4:	9803      	ldr	r0, [sp, #12]
1005aba6:	7c40      	ldrb	r0, [r0, #17]
1005aba8:	2800      	cmp	r0, #0
1005abaa:	d005      	beq.n	1005abb8 <LL_feature_exchange+0xb8>
1005abac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005abae:	2080      	movs	r0, #128	@ 0x80
1005abb0:	2100      	movs	r1, #0
1005abb2:	4623      	mov	r3, r4
1005abb4:	f006 fa74 	bl	100610a0 <hci_le_read_remote_features_complete_event_push_noinline>
1005abb8:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005abba:	2110      	movs	r1, #16
1005abbc:	4301      	orrs	r1, r0
1005abbe:	6631      	str	r1, [r6, #96]	@ 0x60
1005abc0:	2203      	movs	r2, #3
1005abc2:	9802      	ldr	r0, [sp, #8]
1005abc4:	9904      	ldr	r1, [sp, #16]
1005abc6:	f7fe f929 	bl	10058e1c <LL_cpe_clr_active>
1005abca:	4628      	mov	r0, r5
1005abcc:	e044      	b.n	1005ac58 <LL_feature_exchange+0x158>
1005abce:	9002      	str	r0, [sp, #8]
1005abd0:	2009      	movs	r0, #9
1005abd2:	9001      	str	r0, [sp, #4]
1005abd4:	7060      	strb	r0, [r4, #1]
1005abd6:	2003      	movs	r0, #3
1005abd8:	7020      	strb	r0, [r4, #0]
1005abda:	1ce7      	adds	r7, r4, #3
1005abdc:	4638      	mov	r0, r7
1005abde:	f000 f83d 	bl	1005ac5c <LL_Get_Supported_Features>
1005abe2:	79a0      	ldrb	r0, [r4, #6]
1005abe4:	21f7      	movs	r1, #247	@ 0xf7
1005abe6:	4001      	ands	r1, r0
1005abe8:	71a1      	strb	r1, [r4, #6]
1005abea:	2508      	movs	r5, #8
1005abec:	4638      	mov	r0, r7
1005abee:	9f03      	ldr	r7, [sp, #12]
1005abf0:	4639      	mov	r1, r7
1005abf2:	462a      	mov	r2, r5
1005abf4:	f005 f844 	bl	1005fc80 <char_copy>
1005abf8:	9804      	ldr	r0, [sp, #16]
1005abfa:	2801      	cmp	r0, #1
1005abfc:	d108      	bne.n	1005ac10 <LL_feature_exchange+0x110>
1005abfe:	7830      	ldrb	r0, [r6, #0]
1005ac00:	2802      	cmp	r0, #2
1005ac02:	d126      	bne.n	1005ac52 <LL_feature_exchange+0x152>
1005ac04:	70a5      	strb	r5, [r4, #2]
1005ac06:	e026      	b.n	1005ac56 <LL_feature_exchange+0x156>
1005ac08:	4604      	mov	r4, r0
1005ac0a:	2203      	movs	r2, #3
1005ac0c:	9802      	ldr	r0, [sp, #8]
1005ac0e:	e01c      	b.n	1005ac4a <LL_feature_exchange+0x14a>
1005ac10:	9801      	ldr	r0, [sp, #4]
1005ac12:	70a0      	strb	r0, [r4, #2]
1005ac14:	78e0      	ldrb	r0, [r4, #3]
1005ac16:	7a39      	ldrb	r1, [r7, #8]
1005ac18:	4001      	ands	r1, r0
1005ac1a:	70e1      	strb	r1, [r4, #3]
1005ac1c:	7439      	strb	r1, [r7, #16]
1005ac1e:	e01a      	b.n	1005ac56 <LL_feature_exchange+0x156>
1005ac20:	7831      	ldrb	r1, [r6, #0]
1005ac22:	2903      	cmp	r1, #3
1005ac24:	d118      	bne.n	1005ac58 <LL_feature_exchange+0x158>
1005ac26:	4604      	mov	r4, r0
1005ac28:	7818      	ldrb	r0, [r3, #0]
1005ac2a:	21f7      	movs	r1, #247	@ 0xf7
1005ac2c:	4001      	ands	r1, r0
1005ac2e:	7019      	strb	r1, [r3, #0]
1005ac30:	9b03      	ldr	r3, [sp, #12]
1005ac32:	7c58      	ldrb	r0, [r3, #17]
1005ac34:	2800      	cmp	r0, #0
1005ac36:	d005      	beq.n	1005ac44 <LL_feature_exchange+0x144>
1005ac38:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005ac3a:	3308      	adds	r3, #8
1005ac3c:	2080      	movs	r0, #128	@ 0x80
1005ac3e:	211a      	movs	r1, #26
1005ac40:	f006 fa2e 	bl	100610a0 <hci_le_read_remote_features_complete_event_push_noinline>
1005ac44:	2203      	movs	r2, #3
1005ac46:	9802      	ldr	r0, [sp, #8]
1005ac48:	9904      	ldr	r1, [sp, #16]
1005ac4a:	f7fe f8e7 	bl	10058e1c <LL_cpe_clr_active>
1005ac4e:	4620      	mov	r0, r4
1005ac50:	e002      	b.n	1005ac58 <LL_feature_exchange+0x158>
1005ac52:	200e      	movs	r0, #14
1005ac54:	70a0      	strb	r0, [r4, #2]
1005ac56:	9802      	ldr	r0, [sp, #8]
1005ac58:	b005      	add	sp, #20
1005ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ac5c <LL_Get_Supported_Features>:
1005ac5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ac5e:	9000      	str	r0, [sp, #0]
1005ac60:	f7fb fd8c 	bl	1005677c <data_length_extension_csr_ucfg_weak>
1005ac64:	4605      	mov	r5, r0
1005ac66:	f7fd ffe0 	bl	10058c2a <llc_priv_controller_privacy_csr_ucfg_weak>
1005ac6a:	b2c0      	uxtb	r0, r0
1005ac6c:	21c0      	movs	r1, #192	@ 0xc0
1005ac6e:	4341      	muls	r1, r0
1005ac70:	0628      	lsls	r0, r5, #24
1005ac72:	0cc5      	lsrs	r5, r0, #19
1005ac74:	430d      	orrs	r5, r1
1005ac76:	2009      	movs	r0, #9
1005ac78:	0206      	lsls	r6, r0, #8
1005ac7a:	f7f1 f89f 	bl	1004bdbc <phy_upd_csr_ucfg>
1005ac7e:	b2c7      	uxtb	r7, r0
1005ac80:	4377      	muls	r7, r6
1005ac82:	432f      	orrs	r7, r5
1005ac84:	f002 f906 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005ac88:	0305      	lsls	r5, r0, #12
1005ac8a:	433d      	orrs	r5, r7
1005ac8c:	4e2c      	ldr	r6, [pc, #176]	@ (1005ad40 <__arm_cp.1_0>)
1005ac8e:	47b0      	blx	r6
1005ac90:	b2c0      	uxtb	r0, r0
1005ac92:	4f2c      	ldr	r7, [pc, #176]	@ (1005ad44 <__arm_cp.1_1>)
1005ac94:	4347      	muls	r7, r0
1005ac96:	432f      	orrs	r7, r5
1005ac98:	200d      	movs	r0, #13
1005ac9a:	0685      	lsls	r5, r0, #26
1005ac9c:	f7fd ffb2 	bl	10058c04 <cis_csr_ucfg_weak>
1005aca0:	b2c4      	uxtb	r4, r0
1005aca2:	436c      	muls	r4, r5
1005aca4:	433c      	orrs	r4, r7
1005aca6:	2073      	movs	r0, #115	@ 0x73
1005aca8:	0445      	lsls	r5, r0, #17
1005acaa:	f7fb fd0b 	bl	100566c4 <cte_csr_ucfg_weak>
1005acae:	b2c7      	uxtb	r7, r0
1005acb0:	436f      	muls	r7, r5
1005acb2:	4327      	orrs	r7, r4
1005acb4:	f7fb fd06 	bl	100566c4 <cte_csr_ucfg_weak>
1005acb8:	4605      	mov	r5, r0
1005acba:	47b0      	blx	r6
1005acbc:	4028      	ands	r0, r5
1005acbe:	b2c0      	uxtb	r0, r0
1005acc0:	2503      	movs	r5, #3
1005acc2:	04ec      	lsls	r4, r5, #19
1005acc4:	4344      	muls	r4, r0
1005acc6:	433c      	orrs	r4, r7
1005acc8:	f7fd ff9a 	bl	10058c00 <bis_csr_ucfg_weak>
1005accc:	0780      	lsls	r0, r0, #30
1005acce:	4247      	negs	r7, r0
1005acd0:	4327      	orrs	r7, r4
1005acd2:	f002 f8cd 	bl	1005ce70 <llc_get_channel_sel_algo2_enabled>
1005acd6:	0380      	lsls	r0, r0, #14
1005acd8:	4338      	orrs	r0, r7
1005acda:	491b      	ldr	r1, [pc, #108]	@ (1005ad48 <__arm_cp.1_2>)
1005acdc:	4301      	orrs	r1, r0
1005acde:	9101      	str	r1, [sp, #4]
1005ace0:	f7fb fd4e 	bl	10056780 <pcl_csr_ucfg_weak>
1005ace4:	b2c0      	uxtb	r0, r0
1005ace6:	240e      	movs	r4, #14
1005ace8:	4344      	muls	r4, r0
1005acea:	f7fb fbf6 	bl	100564da <chc_csr_ucfg_weak>
1005acee:	0600      	lsls	r0, r0, #24
1005acf0:	0c47      	lsrs	r7, r0, #17
1005acf2:	4327      	orrs	r7, r4
1005acf4:	47b0      	blx	r6
1005acf6:	21f9      	movs	r1, #249	@ 0xf9
1005acf8:	0109      	lsls	r1, r1, #4
1005acfa:	0104      	lsls	r4, r0, #4
1005acfc:	400c      	ands	r4, r1
1005acfe:	433c      	orrs	r4, r7
1005ad00:	022e      	lsls	r6, r5, #8
1005ad02:	f002 f8c7 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005ad06:	4605      	mov	r5, r0
1005ad08:	4375      	muls	r5, r6
1005ad0a:	4325      	orrs	r5, r4
1005ad0c:	2001      	movs	r0, #1
1005ad0e:	02c4      	lsls	r4, r0, #11
1005ad10:	f7fb fd3a 	bl	10056788 <scan_csr_ucfg_weak>
1005ad14:	0600      	lsls	r0, r0, #24
1005ad16:	0b00      	lsrs	r0, r0, #12
1005ad18:	1904      	adds	r4, r0, r4
1005ad1a:	f7fd ff7f 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005ad1e:	b2c0      	uxtb	r0, r0
1005ad20:	4360      	muls	r0, r4
1005ad22:	4328      	orrs	r0, r5
1005ad24:	2161      	movs	r1, #97	@ 0x61
1005ad26:	4301      	orrs	r1, r0
1005ad28:	4808      	ldr	r0, [pc, #32]	@ (1005ad4c <__arm_cp.1_3>)
1005ad2a:	6800      	ldr	r0, [r0, #0]
1005ad2c:	6a00      	ldr	r0, [r0, #32]
1005ad2e:	4008      	ands	r0, r1
1005ad30:	9002      	str	r0, [sp, #8]
1005ad32:	a901      	add	r1, sp, #4
1005ad34:	2208      	movs	r2, #8
1005ad36:	9800      	ldr	r0, [sp, #0]
1005ad38:	f7f4 fd84 	bl	1004f844 <BLEPLAT_MemCpy>
1005ad3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ad3e:	46c0      	nop			@ (mov r8, r8)

1005ad40 <__arm_cp.1_0>:
1005ad40:	10058c19 	.word	0x10058c19

1005ad44 <__arm_cp.1_1>:
1005ad44:	03002000 	.word	0x03002000

1005ad48 <__arm_cp.1_2>:
1005ad48:	0800001d 	.word	0x0800001d

1005ad4c <__arm_cp.1_3>:
1005ad4c:	20000f20 	.word	0x20000f20

1005ad50 <LL_Read_Remote_Used_Features>:
1005ad50:	b570      	push	{r4, r5, r6, lr}
1005ad52:	4604      	mov	r4, r0
1005ad54:	4608      	mov	r0, r1
1005ad56:	f7fc f9f5 	bl	10057144 <llc_conn_get_cntxt_per_p_from_handle>
1005ad5a:	2800      	cmp	r0, #0
1005ad5c:	d01c      	beq.n	1005ad98 <LL_Read_Remote_Used_Features+0x48>
1005ad5e:	4606      	mov	r6, r0
1005ad60:	362c      	adds	r6, #44	@ 0x2c
1005ad62:	7831      	ldrb	r1, [r6, #0]
1005ad64:	2903      	cmp	r1, #3
1005ad66:	d107      	bne.n	1005ad78 <LL_Read_Remote_Used_Features+0x28>
1005ad68:	2197      	movs	r1, #151	@ 0x97
1005ad6a:	0049      	lsls	r1, r1, #1
1005ad6c:	1840      	adds	r0, r0, r1
1005ad6e:	7800      	ldrb	r0, [r0, #0]
1005ad70:	0700      	lsls	r0, r0, #28
1005ad72:	d401      	bmi.n	1005ad78 <LL_Read_Remote_Used_Features+0x28>
1005ad74:	241a      	movs	r4, #26
1005ad76:	e024      	b.n	1005adc2 <LL_Read_Remote_Used_Features+0x72>
1005ad78:	7930      	ldrb	r0, [r6, #4]
1005ad7a:	2101      	movs	r1, #1
1005ad7c:	f7fe f829 	bl	10058dd2 <LL_cpe_get_active_status>
1005ad80:	2800      	cmp	r0, #0
1005ad82:	d00d      	beq.n	1005ada0 <LL_Read_Remote_Used_Features+0x50>
1005ad84:	2c00      	cmp	r4, #0
1005ad86:	d109      	bne.n	1005ad9c <LL_Read_Remote_Used_Features+0x4c>
1005ad88:	7930      	ldrb	r0, [r6, #4]
1005ad8a:	2101      	movs	r1, #1
1005ad8c:	f7fe fe4a 	bl	10059a24 <LL_cpe_conn_get_proc_id_from_sm>
1005ad90:	2803      	cmp	r0, #3
1005ad92:	d103      	bne.n	1005ad9c <LL_Read_Remote_Used_Features+0x4c>
1005ad94:	2400      	movs	r4, #0
1005ad96:	e014      	b.n	1005adc2 <LL_Read_Remote_Used_Features+0x72>
1005ad98:	2402      	movs	r4, #2
1005ad9a:	e012      	b.n	1005adc2 <LL_Read_Remote_Used_Features+0x72>
1005ad9c:	243a      	movs	r4, #58	@ 0x3a
1005ad9e:	e010      	b.n	1005adc2 <LL_Read_Remote_Used_Features+0x72>
1005ada0:	7930      	ldrb	r0, [r6, #4]
1005ada2:	2501      	movs	r5, #1
1005ada4:	4629      	mov	r1, r5
1005ada6:	f7fe f878 	bl	10058e9a <LL_cpe_get_cntxt>
1005adaa:	7444      	strb	r4, [r0, #17]
1005adac:	7930      	ldrb	r0, [r6, #4]
1005adae:	4629      	mov	r1, r5
1005adb0:	f7fe f866 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005adb4:	7930      	ldrb	r0, [r6, #4]
1005adb6:	2203      	movs	r2, #3
1005adb8:	2400      	movs	r4, #0
1005adba:	4629      	mov	r1, r5
1005adbc:	4623      	mov	r3, r4
1005adbe:	f7fe f816 	bl	10058dee <LL_cpe_set_active>
1005adc2:	4620      	mov	r0, r4
1005adc4:	bd70      	pop	{r4, r5, r6, pc}

1005adc6 <LLC_update_le_ping_params>:
1005adc6:	b5b0      	push	{r4, r5, r7, lr}
1005adc8:	4615      	mov	r5, r2
1005adca:	460c      	mov	r4, r1
1005adcc:	f7fc f9ac 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005add0:	2185      	movs	r1, #133	@ 0x85
1005add2:	0049      	lsls	r1, r1, #1
1005add4:	5a43      	ldrh	r3, [r0, r1]
1005add6:	2d00      	cmp	r5, #0
1005add8:	461a      	mov	r2, r3
1005adda:	d000      	beq.n	1005adde <LLC_update_le_ping_params+0x18>
1005addc:	4622      	mov	r2, r4
1005adde:	1841      	adds	r1, r0, r1
1005ade0:	8b0c      	ldrh	r4, [r1, #24]
1005ade2:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005ade4:	4365      	muls	r5, r4
1005ade6:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005ade8:	300a      	adds	r0, #10
1005adea:	4368      	muls	r0, r5
1005adec:	0b00      	lsrs	r0, r0, #12
1005adee:	b284      	uxth	r4, r0
1005adf0:	1d64      	adds	r4, r4, #5
1005adf2:	4294      	cmp	r4, r2
1005adf4:	d300      	bcc.n	1005adf8 <LLC_update_le_ping_params+0x32>
1005adf6:	4622      	mov	r2, r4
1005adf8:	b294      	uxth	r4, r2
1005adfa:	42a3      	cmp	r3, r4
1005adfc:	d00b      	beq.n	1005ae16 <LLC_update_le_ping_params+0x50>
1005adfe:	8048      	strh	r0, [r1, #2]
1005ae00:	800a      	strh	r2, [r1, #0]
1005ae02:	7908      	ldrb	r0, [r1, #4]
1005ae04:	2801      	cmp	r0, #1
1005ae06:	d006      	beq.n	1005ae16 <LLC_update_le_ping_params+0x50>
1005ae08:	2002      	movs	r0, #2
1005ae0a:	7108      	strb	r0, [r1, #4]
1005ae0c:	2012      	movs	r0, #18
1005ae0e:	f004 fdaf 	bl	1005f970 <tsk_notify_idx>
1005ae12:	f7f3 ff56 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005ae16:	bdb0      	pop	{r4, r5, r7, pc}

1005ae18 <LLC_init_le_ping_params>:
1005ae18:	b5b0      	push	{r4, r5, r7, lr}
1005ae1a:	2185      	movs	r1, #133	@ 0x85
1005ae1c:	004a      	lsls	r2, r1, #1
1005ae1e:	1881      	adds	r1, r0, r2
1005ae20:	8b0b      	ldrh	r3, [r1, #24]
1005ae22:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005ae24:	435c      	muls	r4, r3
1005ae26:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005ae28:	330a      	adds	r3, #10
1005ae2a:	4363      	muls	r3, r4
1005ae2c:	0b1b      	lsrs	r3, r3, #12
1005ae2e:	b29c      	uxth	r4, r3
1005ae30:	4d07      	ldr	r5, [pc, #28]	@ (1005ae50 <__arm_cp.3_0>)
1005ae32:	42ac      	cmp	r4, r5
1005ae34:	d800      	bhi.n	1005ae38 <LLC_init_le_ping_params+0x20>
1005ae36:	462c      	mov	r4, r5
1005ae38:	1d64      	adds	r4, r4, #5
1005ae3a:	5284      	strh	r4, [r0, r2]
1005ae3c:	2001      	movs	r0, #1
1005ae3e:	7108      	strb	r0, [r1, #4]
1005ae40:	804b      	strh	r3, [r1, #2]
1005ae42:	2012      	movs	r0, #18
1005ae44:	f004 fd94 	bl	1005f970 <tsk_notify_idx>
1005ae48:	f7f3 ff3b 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005ae4c:	bdb0      	pop	{r4, r5, r7, pc}
1005ae4e:	46c0      	nop			@ (mov r8, r8)

1005ae50 <__arm_cp.3_0>:
1005ae50:	00000bb3 	.word	0x00000bb3

1005ae54 <LLC_authenticated_payload_timeout_processing>:
1005ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ae56:	b089      	sub	sp, #36	@ 0x24
1005ae58:	2400      	movs	r4, #0
1005ae5a:	4620      	mov	r0, r4
1005ae5c:	f7fc f964 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005ae60:	9000      	str	r0, [sp, #0]
1005ae62:	2001      	movs	r0, #1
1005ae64:	9008      	str	r0, [sp, #32]
1005ae66:	4843      	ldr	r0, [pc, #268]	@ (1005af74 <__arm_cp.5_0>)
1005ae68:	6800      	ldr	r0, [r0, #0]
1005ae6a:	2134      	movs	r1, #52	@ 0x34
1005ae6c:	5c40      	ldrb	r0, [r0, r1]
1005ae6e:	4284      	cmp	r4, r0
1005ae70:	d300      	bcc.n	1005ae74 <LLC_authenticated_payload_timeout_processing+0x20>
1005ae72:	e07d      	b.n	1005af70 <LLC_authenticated_payload_timeout_processing+0x11c>
1005ae74:	204d      	movs	r0, #77	@ 0x4d
1005ae76:	0080      	lsls	r0, r0, #2
1005ae78:	9405      	str	r4, [sp, #20]
1005ae7a:	4360      	muls	r0, r4
1005ae7c:	9900      	ldr	r1, [sp, #0]
1005ae7e:	180c      	adds	r4, r1, r0
1005ae80:	202c      	movs	r0, #44	@ 0x2c
1005ae82:	5c20      	ldrb	r0, [r4, r0]
1005ae84:	21fe      	movs	r1, #254	@ 0xfe
1005ae86:	4001      	ands	r1, r0
1005ae88:	2902      	cmp	r1, #2
1005ae8a:	d16e      	bne.n	1005af6a <LLC_authenticated_payload_timeout_processing+0x116>
1005ae8c:	2101      	movs	r1, #1
1005ae8e:	9e00      	ldr	r6, [sp, #0]
1005ae90:	4630      	mov	r0, r6
1005ae92:	9107      	str	r1, [sp, #28]
1005ae94:	f7fc fbe4 	bl	10057660 <llc_conn_get_enc_on>
1005ae98:	4605      	mov	r5, r0
1005ae9a:	2100      	movs	r1, #0
1005ae9c:	4630      	mov	r0, r6
1005ae9e:	9101      	str	r1, [sp, #4]
1005aea0:	f7fc fbde 	bl	10057660 <llc_conn_get_enc_on>
1005aea4:	1e41      	subs	r1, r0, #1
1005aea6:	4188      	sbcs	r0, r1
1005aea8:	2d00      	cmp	r5, #0
1005aeaa:	9908      	ldr	r1, [sp, #32]
1005aeac:	9104      	str	r1, [sp, #16]
1005aeae:	d100      	bne.n	1005aeb2 <LLC_authenticated_payload_timeout_processing+0x5e>
1005aeb0:	9004      	str	r0, [sp, #16]
1005aeb2:	2043      	movs	r0, #67	@ 0x43
1005aeb4:	0080      	lsls	r0, r0, #2
1005aeb6:	1820      	adds	r0, r4, r0
1005aeb8:	9003      	str	r0, [sp, #12]
1005aeba:	2085      	movs	r0, #133	@ 0x85
1005aebc:	0040      	lsls	r0, r0, #1
1005aebe:	1820      	adds	r0, r4, r0
1005aec0:	9002      	str	r0, [sp, #8]
1005aec2:	2087      	movs	r0, #135	@ 0x87
1005aec4:	0040      	lsls	r0, r0, #1
1005aec6:	1823      	adds	r3, r4, r0
1005aec8:	9f08      	ldr	r7, [sp, #32]
1005aeca:	9306      	str	r3, [sp, #24]
1005aecc:	781c      	ldrb	r4, [r3, #0]
1005aece:	26f0      	movs	r6, #240	@ 0xf0
1005aed0:	4026      	ands	r6, r4
1005aed2:	250f      	movs	r5, #15
1005aed4:	4025      	ands	r5, r4
1005aed6:	2d03      	cmp	r5, #3
1005aed8:	d01f      	beq.n	1005af1a <LLC_authenticated_payload_timeout_processing+0xc6>
1005aeda:	2d02      	cmp	r5, #2
1005aedc:	d00b      	beq.n	1005aef6 <LLC_authenticated_payload_timeout_processing+0xa2>
1005aede:	2d01      	cmp	r5, #1
1005aee0:	d12b      	bne.n	1005af3a <LLC_authenticated_payload_timeout_processing+0xe6>
1005aee2:	9804      	ldr	r0, [sp, #16]
1005aee4:	2800      	cmp	r0, #0
1005aee6:	d02c      	beq.n	1005af42 <LLC_authenticated_payload_timeout_processing+0xee>
1005aee8:	2012      	movs	r0, #18
1005aeea:	2101      	movs	r1, #1
1005aeec:	f004 fd52 	bl	1005f994 <tsk_wait_resource_idx>
1005aef0:	9b06      	ldr	r3, [sp, #24]
1005aef2:	2502      	movs	r5, #2
1005aef4:	e025      	b.n	1005af42 <LLC_authenticated_payload_timeout_processing+0xee>
1005aef6:	9803      	ldr	r0, [sp, #12]
1005aef8:	8800      	ldrh	r0, [r0, #0]
1005aefa:	9902      	ldr	r1, [sp, #8]
1005aefc:	8809      	ldrh	r1, [r1, #0]
1005aefe:	1a08      	subs	r0, r1, r0
1005af00:	230a      	movs	r3, #10
1005af02:	4343      	muls	r3, r0
1005af04:	481c      	ldr	r0, [pc, #112]	@ (1005af78 <__arm_cp.5_1>)
1005af06:	6800      	ldr	r0, [r0, #0]
1005af08:	9905      	ldr	r1, [sp, #20]
1005af0a:	b2c9      	uxtb	r1, r1
1005af0c:	30b0      	adds	r0, #176	@ 0xb0
1005af0e:	2201      	movs	r2, #1
1005af10:	f004 fdd7 	bl	1005fac2 <CST_start>
1005af14:	9b06      	ldr	r3, [sp, #24]
1005af16:	2503      	movs	r5, #3
1005af18:	e013      	b.n	1005af42 <LLC_authenticated_payload_timeout_processing+0xee>
1005af1a:	06a0      	lsls	r0, r4, #26
1005af1c:	d511      	bpl.n	1005af42 <LLC_authenticated_payload_timeout_processing+0xee>
1005af1e:	9804      	ldr	r0, [sp, #16]
1005af20:	2800      	cmp	r0, #0
1005af22:	d00c      	beq.n	1005af3e <LLC_authenticated_payload_timeout_processing+0xea>
1005af24:	9805      	ldr	r0, [sp, #20]
1005af26:	b2c0      	uxtb	r0, r0
1005af28:	f000 f828 	bl	1005af7c <LLC_authenticated_payload_timeout_start_le_ping>
1005af2c:	2800      	cmp	r0, #0
1005af2e:	d001      	beq.n	1005af34 <LLC_authenticated_payload_timeout_processing+0xe0>
1005af30:	26d0      	movs	r6, #208	@ 0xd0
1005af32:	4026      	ands	r6, r4
1005af34:	9808      	ldr	r0, [sp, #32]
1005af36:	9b06      	ldr	r3, [sp, #24]
1005af38:	e004      	b.n	1005af44 <LLC_authenticated_payload_timeout_processing+0xf0>
1005af3a:	9801      	ldr	r0, [sp, #4]
1005af3c:	e002      	b.n	1005af44 <LLC_authenticated_payload_timeout_processing+0xf0>
1005af3e:	26d0      	movs	r6, #208	@ 0xd0
1005af40:	4026      	ands	r6, r4
1005af42:	9808      	ldr	r0, [sp, #32]
1005af44:	f3ef 8110 	mrs	r1, PRIMASK
1005af48:	b672      	cpsid	i
1005af4a:	7819      	ldrb	r1, [r3, #0]
1005af4c:	428c      	cmp	r4, r1
1005af4e:	d103      	bne.n	1005af58 <LLC_authenticated_payload_timeout_processing+0x104>
1005af50:	432e      	orrs	r6, r5
1005af52:	701e      	strb	r6, [r3, #0]
1005af54:	2100      	movs	r1, #0
1005af56:	e002      	b.n	1005af5e <LLC_authenticated_payload_timeout_processing+0x10a>
1005af58:	9907      	ldr	r1, [sp, #28]
1005af5a:	400f      	ands	r7, r1
1005af5c:	4639      	mov	r1, r7
1005af5e:	1e4a      	subs	r2, r1, #1
1005af60:	4191      	sbcs	r1, r2
1005af62:	b662      	cpsie	i
1005af64:	2700      	movs	r7, #0
1005af66:	4208      	tst	r0, r1
1005af68:	d1b0      	bne.n	1005aecc <LLC_authenticated_payload_timeout_processing+0x78>
1005af6a:	9c05      	ldr	r4, [sp, #20]
1005af6c:	1c64      	adds	r4, r4, #1
1005af6e:	e77a      	b.n	1005ae66 <LLC_authenticated_payload_timeout_processing+0x12>
1005af70:	b009      	add	sp, #36	@ 0x24
1005af72:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005af74 <__arm_cp.5_0>:
1005af74:	20000ecc 	.word	0x20000ecc

1005af78 <__arm_cp.5_1>:
1005af78:	20000f20 	.word	0x20000f20

1005af7c <LLC_authenticated_payload_timeout_start_le_ping>:
1005af7c:	b570      	push	{r4, r5, r6, lr}
1005af7e:	4605      	mov	r5, r0
1005af80:	2101      	movs	r1, #1
1005af82:	f7fd ff26 	bl	10058dd2 <LL_cpe_get_active_status>
1005af86:	4604      	mov	r4, r0
1005af88:	2801      	cmp	r0, #1
1005af8a:	d104      	bne.n	1005af96 <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005af8c:	2012      	movs	r0, #18
1005af8e:	2101      	movs	r1, #1
1005af90:	f004 fd00 	bl	1005f994 <tsk_wait_resource_idx>
1005af94:	e00a      	b.n	1005afac <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005af96:	2601      	movs	r6, #1
1005af98:	4628      	mov	r0, r5
1005af9a:	4631      	mov	r1, r6
1005af9c:	f7fd ff70 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005afa0:	2208      	movs	r2, #8
1005afa2:	2300      	movs	r3, #0
1005afa4:	4628      	mov	r0, r5
1005afa6:	4631      	mov	r1, r6
1005afa8:	f7fd ff21 	bl	10058dee <LL_cpe_set_active>
1005afac:	4260      	negs	r0, r4
1005afae:	4160      	adcs	r0, r4
1005afb0:	bd70      	pop	{r4, r5, r6, pc}
	...

1005afb4 <LLC_authenticated_payload_timeout_cb>:
1005afb4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005afb6:	4604      	mov	r4, r0
1005afb8:	f7fc f8b6 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005afbc:	4605      	mov	r5, r0
1005afbe:	202c      	movs	r0, #44	@ 0x2c
1005afc0:	5c28      	ldrb	r0, [r5, r0]
1005afc2:	21fe      	movs	r1, #254	@ 0xfe
1005afc4:	4001      	ands	r1, r0
1005afc6:	2902      	cmp	r1, #2
1005afc8:	d15b      	bne.n	1005b082 <LLC_authenticated_payload_timeout_cb+0xce>
1005afca:	9402      	str	r4, [sp, #8]
1005afcc:	2085      	movs	r0, #133	@ 0x85
1005afce:	0040      	lsls	r0, r0, #1
1005afd0:	182f      	adds	r7, r5, r0
1005afd2:	793a      	ldrb	r2, [r7, #4]
1005afd4:	06d0      	lsls	r0, r2, #27
1005afd6:	d419      	bmi.n	1005b00c <LLC_authenticated_payload_timeout_cb+0x58>
1005afd8:	24f0      	movs	r4, #240	@ 0xf0
1005afda:	9201      	str	r2, [sp, #4]
1005afdc:	4014      	ands	r4, r2
1005afde:	2101      	movs	r1, #1
1005afe0:	4628      	mov	r0, r5
1005afe2:	f7fc fb3d 	bl	10057660 <llc_conn_get_enc_on>
1005afe6:	4606      	mov	r6, r0
1005afe8:	2100      	movs	r1, #0
1005afea:	4628      	mov	r0, r5
1005afec:	f7fc fb38 	bl	10057660 <llc_conn_get_enc_on>
1005aff0:	4330      	orrs	r0, r6
1005aff2:	d006      	beq.n	1005b002 <LLC_authenticated_payload_timeout_cb+0x4e>
1005aff4:	9802      	ldr	r0, [sp, #8]
1005aff6:	f7ff ffc1 	bl	1005af7c <LLC_authenticated_payload_timeout_start_le_ping>
1005affa:	2801      	cmp	r0, #1
1005affc:	d001      	beq.n	1005b002 <LLC_authenticated_payload_timeout_cb+0x4e>
1005affe:	2020      	movs	r0, #32
1005b000:	4304      	orrs	r4, r0
1005b002:	9a01      	ldr	r2, [sp, #4]
1005b004:	2610      	movs	r6, #16
1005b006:	4326      	orrs	r6, r4
1005b008:	8878      	ldrh	r0, [r7, #2]
1005b00a:	e027      	b.n	1005b05c <LLC_authenticated_payload_timeout_cb+0xa8>
1005b00c:	26c0      	movs	r6, #192	@ 0xc0
1005b00e:	481d      	ldr	r0, [pc, #116]	@ (1005b084 <__arm_cp.7_0>)
1005b010:	6800      	ldr	r0, [r0, #0]
1005b012:	2140      	movs	r1, #64	@ 0x40
1005b014:	5640      	ldrsb	r0, [r0, r1]
1005b016:	2800      	cmp	r0, #0
1005b018:	d51c      	bpl.n	1005b054 <LLC_authenticated_payload_timeout_cb+0xa0>
1005b01a:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005b01c:	9001      	str	r0, [sp, #4]
1005b01e:	481a      	ldr	r0, [pc, #104]	@ (1005b088 <__arm_cp.7_1>)
1005b020:	6800      	ldr	r0, [r0, #0]
1005b022:	6980      	ldr	r0, [r0, #24]
1005b024:	2142      	movs	r1, #66	@ 0x42
1005b026:	4614      	mov	r4, r2
1005b028:	2223      	movs	r2, #35	@ 0x23
1005b02a:	2502      	movs	r5, #2
1005b02c:	462b      	mov	r3, r5
1005b02e:	f7f7 f955 	bl	100522dc <aci_event_fifo_push_header>
1005b032:	4622      	mov	r2, r4
1005b034:	2800      	cmp	r0, #0
1005b036:	d00d      	beq.n	1005b054 <LLC_authenticated_payload_timeout_cb+0xa0>
1005b038:	4601      	mov	r1, r0
1005b03a:	9a01      	ldr	r2, [sp, #4]
1005b03c:	71c2      	strb	r2, [r0, #7]
1005b03e:	7185      	strb	r5, [r0, #6]
1005b040:	2057      	movs	r0, #87	@ 0x57
1005b042:	7148      	strb	r0, [r1, #5]
1005b044:	2004      	movs	r0, #4
1005b046:	7108      	strb	r0, [r1, #4]
1005b048:	0a10      	lsrs	r0, r2, #8
1005b04a:	7208      	strb	r0, [r1, #8]
1005b04c:	2042      	movs	r0, #66	@ 0x42
1005b04e:	f7f7 f9e2 	bl	10052416 <aci_event_fifo_push>
1005b052:	4622      	mov	r2, r4
1005b054:	4016      	ands	r6, r2
1005b056:	8878      	ldrh	r0, [r7, #2]
1005b058:	8839      	ldrh	r1, [r7, #0]
1005b05a:	1a08      	subs	r0, r1, r0
1005b05c:	230a      	movs	r3, #10
1005b05e:	4343      	muls	r3, r0
1005b060:	f3ef 8010 	mrs	r0, PRIMASK
1005b064:	b672      	cpsid	i
1005b066:	7938      	ldrb	r0, [r7, #4]
1005b068:	4282      	cmp	r2, r0
1005b06a:	9902      	ldr	r1, [sp, #8]
1005b06c:	d102      	bne.n	1005b074 <LLC_authenticated_payload_timeout_cb+0xc0>
1005b06e:	2003      	movs	r0, #3
1005b070:	4306      	orrs	r6, r0
1005b072:	713e      	strb	r6, [r7, #4]
1005b074:	b662      	cpsie	i
1005b076:	4803      	ldr	r0, [pc, #12]	@ (1005b084 <__arm_cp.7_0>)
1005b078:	6800      	ldr	r0, [r0, #0]
1005b07a:	30b0      	adds	r0, #176	@ 0xb0
1005b07c:	2201      	movs	r2, #1
1005b07e:	f004 fd20 	bl	1005fac2 <CST_start>
1005b082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005b084 <__arm_cp.7_0>:
1005b084:	20000f20 	.word	0x20000f20

1005b088 <__arm_cp.7_1>:
1005b088:	20000ed0 	.word	0x20000ed0

1005b08c <LLC_authenticated_payload_timeout_reset>:
1005b08c:	b510      	push	{r4, lr}
1005b08e:	4604      	mov	r4, r0
1005b090:	2087      	movs	r0, #135	@ 0x87
1005b092:	0040      	lsls	r0, r0, #1
1005b094:	5c20      	ldrb	r0, [r4, r0]
1005b096:	2801      	cmp	r0, #1
1005b098:	d00e      	beq.n	1005b0b8 <LLC_authenticated_payload_timeout_reset+0x2c>
1005b09a:	4620      	mov	r0, r4
1005b09c:	3030      	adds	r0, #48	@ 0x30
1005b09e:	7801      	ldrb	r1, [r0, #0]
1005b0a0:	4806      	ldr	r0, [pc, #24]	@ (1005b0bc <__arm_cp.8_0>)
1005b0a2:	6800      	ldr	r0, [r0, #0]
1005b0a4:	30b0      	adds	r0, #176	@ 0xb0
1005b0a6:	f004 fcd6 	bl	1005fa56 <CST_stop>
1005b0aa:	2085      	movs	r0, #133	@ 0x85
1005b0ac:	0040      	lsls	r0, r0, #1
1005b0ae:	2100      	movs	r1, #0
1005b0b0:	5221      	strh	r1, [r4, r0]
1005b0b2:	1820      	adds	r0, r4, r0
1005b0b4:	8041      	strh	r1, [r0, #2]
1005b0b6:	7101      	strb	r1, [r0, #4]
1005b0b8:	bd10      	pop	{r4, pc}
1005b0ba:	46c0      	nop			@ (mov r8, r8)

1005b0bc <__arm_cp.8_0>:
1005b0bc:	20000f20 	.word	0x20000f20

1005b0c0 <LLC_le_ping>:
1005b0c0:	b570      	push	{r4, r5, r6, lr}
1005b0c2:	24ff      	movs	r4, #255	@ 0xff
1005b0c4:	2a06      	cmp	r2, #6
1005b0c6:	d835      	bhi.n	1005b134 <LLC_le_ping+0x74>
1005b0c8:	4605      	mov	r5, r0
1005b0ca:	0090      	lsls	r0, r2, #2
1005b0cc:	a201      	add	r2, pc, #4	@ (adr r2, 1005b0d4 <LLC_le_ping+0x14>)
1005b0ce:	5810      	ldr	r0, [r2, r0]
1005b0d0:	4687      	mov	pc, r0
1005b0d2:	46c0      	nop			@ (mov r8, r8)
1005b0d4:	1005b0f1 	.word	0x1005b0f1
1005b0d8:	1005b0f9 	.word	0x1005b0f9
1005b0dc:	1005b135 	.word	0x1005b135
1005b0e0:	1005b111 	.word	0x1005b111
1005b0e4:	1005b135 	.word	0x1005b135
1005b0e8:	1005b135 	.word	0x1005b135
1005b0ec:	1005b115 	.word	0x1005b115
1005b0f0:	2901      	cmp	r1, #1
1005b0f2:	d117      	bne.n	1005b124 <LLC_le_ping+0x64>
1005b0f4:	2413      	movs	r4, #19
1005b0f6:	e01d      	b.n	1005b134 <LLC_le_ping+0x74>
1005b0f8:	2600      	movs	r6, #0
1005b0fa:	4628      	mov	r0, r5
1005b0fc:	4631      	mov	r1, r6
1005b0fe:	f7fd febf 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005b102:	2208      	movs	r2, #8
1005b104:	4628      	mov	r0, r5
1005b106:	4631      	mov	r1, r6
1005b108:	4633      	mov	r3, r6
1005b10a:	f7fd fe70 	bl	10058dee <LL_cpe_set_active>
1005b10e:	e011      	b.n	1005b134 <LLC_le_ping+0x74>
1005b110:	2101      	movs	r1, #1
1005b112:	e008      	b.n	1005b126 <LLC_le_ping+0x66>
1005b114:	2001      	movs	r0, #1
1005b116:	7058      	strb	r0, [r3, #1]
1005b118:	2003      	movs	r0, #3
1005b11a:	7018      	strb	r0, [r3, #0]
1005b11c:	2901      	cmp	r1, #1
1005b11e:	d007      	beq.n	1005b130 <LLC_le_ping+0x70>
1005b120:	2013      	movs	r0, #19
1005b122:	e006      	b.n	1005b132 <LLC_le_ping+0x72>
1005b124:	2100      	movs	r1, #0
1005b126:	2208      	movs	r2, #8
1005b128:	4628      	mov	r0, r5
1005b12a:	f7fd fe77 	bl	10058e1c <LL_cpe_clr_active>
1005b12e:	e001      	b.n	1005b134 <LLC_le_ping+0x74>
1005b130:	2012      	movs	r0, #18
1005b132:	7098      	strb	r0, [r3, #2]
1005b134:	4620      	mov	r0, r4
1005b136:	bd70      	pop	{r4, r5, r6, pc}

1005b138 <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005b138:	4770      	bx	lr

1005b13a <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005b13a:	4770      	bx	lr

1005b13c <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005b13c:	4770      	bx	lr

1005b13e <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005b13e:	4770      	bx	lr

1005b140 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005b140:	b580      	push	{r7, lr}
1005b142:	f7fb fff1 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b146:	2141      	movs	r1, #65	@ 0x41
1005b148:	5c40      	ldrb	r0, [r0, r1]
1005b14a:	4903      	ldr	r1, [pc, #12]	@ (1005b158 <__arm_cp.22_0>)
1005b14c:	6809      	ldr	r1, [r1, #0]
1005b14e:	7a49      	ldrb	r1, [r1, #9]
1005b150:	f7f6 f922 	bl	10051398 <BLEPLAT_CNTR_SmSetTxPwr>
1005b154:	bd80      	pop	{r7, pc}
1005b156:	46c0      	nop			@ (mov r8, r8)

1005b158 <__arm_cp.22_0>:
1005b158:	20000f20 	.word	0x20000f20

1005b15c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005b15c:	4770      	bx	lr

1005b15e <LLC_pcl_offline_processing_ucfg_weak>:
1005b15e:	2000      	movs	r0, #0
1005b160:	4770      	bx	lr
	...

1005b164 <LL_phy_update_init>:
1005b164:	b580      	push	{r7, lr}
1005b166:	f7fb ffd5 	bl	10057114 <llc_conn_get_cntxt_p>
1005b16a:	4902      	ldr	r1, [pc, #8]	@ (1005b174 <__arm_cp.3_0>)
1005b16c:	6201      	str	r1, [r0, #32]
1005b16e:	2000      	movs	r0, #0
1005b170:	bd80      	pop	{r7, pc}
1005b172:	46c0      	nop			@ (mov r8, r8)

1005b174 <__arm_cp.3_0>:
1005b174:	07070002 	.word	0x07070002

1005b178 <LL_phy_update_init_per_st_data>:
1005b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b17a:	4605      	mov	r5, r0
1005b17c:	f7fc f808 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b180:	2800      	cmp	r0, #0
1005b182:	d027      	beq.n	1005b1d4 <LL_phy_update_init_per_st_data+0x5c>
1005b184:	4604      	mov	r4, r0
1005b186:	f7fb ffc5 	bl	10057114 <llc_conn_get_cntxt_p>
1005b18a:	4606      	mov	r6, r0
1005b18c:	4628      	mov	r0, r5
1005b18e:	f7fb ffcb 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b192:	4605      	mov	r5, r0
1005b194:	2100      	movs	r1, #0
1005b196:	220e      	movs	r2, #14
1005b198:	4620      	mov	r0, r4
1005b19a:	f7f4 fb63 	bl	1004f864 <BLEPLAT_MemSet>
1005b19e:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005b1a0:	8060      	strh	r0, [r4, #2]
1005b1a2:	8c30      	ldrh	r0, [r6, #32]
1005b1a4:	8020      	strh	r0, [r4, #0]
1005b1a6:	2741      	movs	r7, #65	@ 0x41
1005b1a8:	9500      	str	r5, [sp, #0]
1005b1aa:	5de8      	ldrb	r0, [r5, r7]
1005b1ac:	f7f5 ff3c 	bl	10051028 <BLEPLAT_CNTR_SmGetTxPhy>
1005b1b0:	2501      	movs	r5, #1
1005b1b2:	2804      	cmp	r0, #4
1005b1b4:	d101      	bne.n	1005b1ba <LL_phy_update_init_per_st_data+0x42>
1005b1b6:	4606      	mov	r6, r0
1005b1b8:	e001      	b.n	1005b1be <LL_phy_update_init_per_st_data+0x46>
1005b1ba:	462e      	mov	r6, r5
1005b1bc:	4086      	lsls	r6, r0
1005b1be:	9800      	ldr	r0, [sp, #0]
1005b1c0:	5dc0      	ldrb	r0, [r0, r7]
1005b1c2:	f7f5 ff20 	bl	10051006 <BLEPLAT_CNTR_SmGetRxPhy>
1005b1c6:	71a6      	strb	r6, [r4, #6]
1005b1c8:	2804      	cmp	r0, #4
1005b1ca:	d101      	bne.n	1005b1d0 <LL_phy_update_init_per_st_data+0x58>
1005b1cc:	4605      	mov	r5, r0
1005b1ce:	e000      	b.n	1005b1d2 <LL_phy_update_init_per_st_data+0x5a>
1005b1d0:	4085      	lsls	r5, r0
1005b1d2:	71e5      	strb	r5, [r4, #7]
1005b1d4:	2000      	movs	r0, #0
1005b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005b1d8 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005b1d8:	6800      	ldr	r0, [r0, #0]
1005b1da:	21a9      	movs	r1, #169	@ 0xa9
1005b1dc:	0109      	lsls	r1, r1, #4
1005b1de:	8181      	strh	r1, [r0, #12]
1005b1e0:	2229      	movs	r2, #41	@ 0x29
1005b1e2:	00d2      	lsls	r2, r2, #3
1005b1e4:	80c2      	strh	r2, [r0, #6]
1005b1e6:	8141      	strh	r1, [r0, #10]
1005b1e8:	8101      	strh	r1, [r0, #8]
1005b1ea:	8082      	strh	r2, [r0, #4]
1005b1ec:	4770      	bx	lr

1005b1ee <LL_phy_upd_pending>:
1005b1ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b1f0:	4605      	mov	r5, r0
1005b1f2:	f7fb ff99 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b1f6:	4604      	mov	r4, r0
1005b1f8:	4628      	mov	r0, r5
1005b1fa:	f7fb ffc9 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b1fe:	219a      	movs	r1, #154	@ 0x9a
1005b200:	5a66      	ldrh	r6, [r4, r1]
1005b202:	b271      	sxtb	r1, r6
1005b204:	2900      	cmp	r1, #0
1005b206:	d52e      	bpl.n	1005b266 <LL_phy_upd_pending+0x78>
1005b208:	4627      	mov	r7, r4
1005b20a:	372c      	adds	r7, #44	@ 0x2c
1005b20c:	7839      	ldrb	r1, [r7, #0]
1005b20e:	2902      	cmp	r1, #2
1005b210:	d106      	bne.n	1005b220 <LL_phy_upd_pending+0x32>
1005b212:	7a01      	ldrb	r1, [r0, #8]
1005b214:	2900      	cmp	r1, #0
1005b216:	d100      	bne.n	1005b21a <LL_phy_upd_pending+0x2c>
1005b218:	7981      	ldrb	r1, [r0, #6]
1005b21a:	7181      	strb	r1, [r0, #6]
1005b21c:	7a45      	ldrb	r5, [r0, #9]
1005b21e:	e005      	b.n	1005b22c <LL_phy_upd_pending+0x3e>
1005b220:	7a41      	ldrb	r1, [r0, #9]
1005b222:	2900      	cmp	r1, #0
1005b224:	d100      	bne.n	1005b228 <LL_phy_upd_pending+0x3a>
1005b226:	7981      	ldrb	r1, [r0, #6]
1005b228:	7181      	strb	r1, [r0, #6]
1005b22a:	7a05      	ldrb	r5, [r0, #8]
1005b22c:	2d00      	cmp	r5, #0
1005b22e:	d100      	bne.n	1005b232 <LL_phy_upd_pending+0x44>
1005b230:	79c5      	ldrb	r5, [r0, #7]
1005b232:	71c5      	strb	r5, [r0, #7]
1005b234:	2904      	cmp	r1, #4
1005b236:	d104      	bne.n	1005b242 <LL_phy_upd_pending+0x54>
1005b238:	8800      	ldrh	r0, [r0, #0]
1005b23a:	2801      	cmp	r0, #1
1005b23c:	d003      	beq.n	1005b246 <LL_phy_upd_pending+0x58>
1005b23e:	2104      	movs	r1, #4
1005b240:	e002      	b.n	1005b248 <LL_phy_upd_pending+0x5a>
1005b242:	0849      	lsrs	r1, r1, #1
1005b244:	e000      	b.n	1005b248 <LL_phy_upd_pending+0x5a>
1005b246:	2106      	movs	r1, #6
1005b248:	349a      	adds	r4, #154	@ 0x9a
1005b24a:	7d78      	ldrb	r0, [r7, #21]
1005b24c:	f7f6 f88f 	bl	1005136e <BLEPLAT_CNTR_SmSetTxPhy>
1005b250:	2d04      	cmp	r5, #4
1005b252:	d000      	beq.n	1005b256 <LL_phy_upd_pending+0x68>
1005b254:	086d      	lsrs	r5, r5, #1
1005b256:	7d78      	ldrb	r0, [r7, #21]
1005b258:	4629      	mov	r1, r5
1005b25a:	f7f6 f81c 	bl	10051296 <BLEPLAT_CNTR_SmSetRxPhy>
1005b25e:	8820      	ldrh	r0, [r4, #0]
1005b260:	2180      	movs	r1, #128	@ 0x80
1005b262:	4388      	bics	r0, r1
1005b264:	8020      	strh	r0, [r4, #0]
1005b266:	b2f0      	uxtb	r0, r6
1005b268:	09c0      	lsrs	r0, r0, #7
1005b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005b26c <LL_phy_update>:
1005b26c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b26e:	b087      	sub	sp, #28
1005b270:	461e      	mov	r6, r3
1005b272:	4617      	mov	r7, r2
1005b274:	460d      	mov	r5, r1
1005b276:	4604      	mov	r4, r0
1005b278:	f7fd fe0f 	bl	10058e9a <LL_cpe_get_cntxt>
1005b27c:	9003      	str	r0, [sp, #12]
1005b27e:	9404      	str	r4, [sp, #16]
1005b280:	4620      	mov	r0, r4
1005b282:	f7fb ff51 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b286:	23ff      	movs	r3, #255	@ 0xff
1005b288:	2f07      	cmp	r7, #7
1005b28a:	d900      	bls.n	1005b28e <LL_phy_update+0x22>
1005b28c:	e18d      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b28e:	9502      	str	r5, [sp, #8]
1005b290:	4605      	mov	r5, r0
1005b292:	352c      	adds	r5, #44	@ 0x2c
1005b294:	4604      	mov	r4, r0
1005b296:	3498      	adds	r4, #152	@ 0x98
1005b298:	007f      	lsls	r7, r7, #1
1005b29a:	46c0      	nop			@ (mov r8, r8)
1005b29c:	447f      	add	r7, pc
1005b29e:	88bf      	ldrh	r7, [r7, #4]
1005b2a0:	007f      	lsls	r7, r7, #1
1005b2a2:	44bf      	add	pc, r7
1005b2a4:	001c0007 	.word	0x001c0007
1005b2a8:	004d0041 	.word	0x004d0041
1005b2ac:	01820067 	.word	0x01820067
1005b2b0:	006e0026 	.word	0x006e0026
1005b2b4:	7828      	ldrb	r0, [r5, #0]
1005b2b6:	9902      	ldr	r1, [sp, #8]
1005b2b8:	2901      	cmp	r1, #1
1005b2ba:	d000      	beq.n	1005b2be <LL_phy_update+0x52>
1005b2bc:	e0b5      	b.n	1005b42a <LL_phy_update+0x1be>
1005b2be:	2802      	cmp	r0, #2
1005b2c0:	d000      	beq.n	1005b2c4 <LL_phy_update+0x58>
1005b2c2:	e103      	b.n	1005b4cc <LL_phy_update+0x260>
1005b2c4:	9e03      	ldr	r6, [sp, #12]
1005b2c6:	7c30      	ldrb	r0, [r6, #16]
1005b2c8:	2803      	cmp	r0, #3
1005b2ca:	d100      	bne.n	1005b2ce <LL_phy_update+0x62>
1005b2cc:	e158      	b.n	1005b580 <LL_phy_update+0x314>
1005b2ce:	2801      	cmp	r0, #1
1005b2d0:	d000      	beq.n	1005b2d4 <LL_phy_update+0x68>
1005b2d2:	e16a      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b2d4:	2002      	movs	r0, #2
1005b2d6:	9903      	ldr	r1, [sp, #12]
1005b2d8:	7408      	strb	r0, [r1, #16]
1005b2da:	2317      	movs	r3, #23
1005b2dc:	e165      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b2de:	78f0      	ldrb	r0, [r6, #3]
1005b2e0:	a905      	add	r1, sp, #20
1005b2e2:	7088      	strb	r0, [r1, #2]
1005b2e4:	7930      	ldrb	r0, [r6, #4]
1005b2e6:	70c8      	strb	r0, [r1, #3]
1005b2e8:	9804      	ldr	r0, [sp, #16]
1005b2ea:	461c      	mov	r4, r3
1005b2ec:	f000 fac8 	bl	1005b880 <LL_process_phy_req_rcpt>
1005b2f0:	e15a      	b.n	1005b5a8 <LL_phy_update+0x33c>
1005b2f2:	7828      	ldrb	r0, [r5, #0]
1005b2f4:	9902      	ldr	r1, [sp, #8]
1005b2f6:	2901      	cmp	r1, #1
1005b2f8:	d171      	bne.n	1005b3de <LL_phy_update+0x172>
1005b2fa:	2802      	cmp	r0, #2
1005b2fc:	9903      	ldr	r1, [sp, #12]
1005b2fe:	d000      	beq.n	1005b302 <LL_phy_update+0x96>
1005b300:	e0ce      	b.n	1005b4a0 <LL_phy_update+0x234>
1005b302:	7c08      	ldrb	r0, [r1, #16]
1005b304:	2802      	cmp	r0, #2
1005b306:	d100      	bne.n	1005b30a <LL_phy_update+0x9e>
1005b308:	e152      	b.n	1005b5b0 <LL_phy_update+0x344>
1005b30a:	2800      	cmp	r0, #0
1005b30c:	d000      	beq.n	1005b310 <LL_phy_update+0xa4>
1005b30e:	e14c      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b310:	2016      	movs	r0, #22
1005b312:	70b0      	strb	r0, [r6, #2]
1005b314:	2003      	movs	r0, #3
1005b316:	7070      	strb	r0, [r6, #1]
1005b318:	7030      	strb	r0, [r6, #0]
1005b31a:	7cc8      	ldrb	r0, [r1, #19]
1005b31c:	70f0      	strb	r0, [r6, #3]
1005b31e:	7d08      	ldrb	r0, [r1, #20]
1005b320:	7130      	strb	r0, [r6, #4]
1005b322:	2001      	movs	r0, #1
1005b324:	7408      	strb	r0, [r1, #16]
1005b326:	e140      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b328:	78f1      	ldrb	r1, [r6, #3]
1005b32a:	a805      	add	r0, sp, #20
1005b32c:	7081      	strb	r1, [r0, #2]
1005b32e:	7931      	ldrb	r1, [r6, #4]
1005b330:	70c1      	strb	r1, [r0, #3]
1005b332:	7d65      	ldrb	r5, [r4, #21]
1005b334:	461e      	mov	r6, r3
1005b336:	2d07      	cmp	r5, #7
1005b338:	d100      	bne.n	1005b33c <LL_phy_update+0xd0>
1005b33a:	e090      	b.n	1005b45e <LL_phy_update+0x1f2>
1005b33c:	2102      	movs	r1, #2
1005b33e:	e08f      	b.n	1005b460 <LL_phy_update+0x1f4>
1005b340:	78b0      	ldrb	r0, [r6, #2]
1005b342:	2807      	cmp	r0, #7
1005b344:	d100      	bne.n	1005b348 <LL_phy_update+0xdc>
1005b346:	e0d2      	b.n	1005b4ee <LL_phy_update+0x282>
1005b348:	2811      	cmp	r0, #17
1005b34a:	9f04      	ldr	r7, [sp, #16]
1005b34c:	d100      	bne.n	1005b350 <LL_phy_update+0xe4>
1005b34e:	e0e7      	b.n	1005b520 <LL_phy_update+0x2b4>
1005b350:	2818      	cmp	r0, #24
1005b352:	d100      	bne.n	1005b356 <LL_phy_update+0xea>
1005b354:	e0fa      	b.n	1005b54c <LL_phy_update+0x2e0>
1005b356:	2817      	cmp	r0, #23
1005b358:	d000      	beq.n	1005b35c <LL_phy_update+0xf0>
1005b35a:	e126      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b35c:	a905      	add	r1, sp, #20
1005b35e:	2000      	movs	r0, #0
1005b360:	7108      	strb	r0, [r1, #4]
1005b362:	78f0      	ldrb	r0, [r6, #3]
1005b364:	7088      	strb	r0, [r1, #2]
1005b366:	7930      	ldrb	r0, [r6, #4]
1005b368:	70c8      	strb	r0, [r1, #3]
1005b36a:	4638      	mov	r0, r7
1005b36c:	461c      	mov	r4, r3
1005b36e:	f000 f9cf 	bl	1005b710 <LL_compute_phy_upd_ind>
1005b372:	e119      	b.n	1005b5a8 <LL_phy_update+0x33c>
1005b374:	78b1      	ldrb	r1, [r6, #2]
1005b376:	461c      	mov	r4, r3
1005b378:	2916      	cmp	r1, #22
1005b37a:	d100      	bne.n	1005b37e <LL_phy_update+0x112>
1005b37c:	e085      	b.n	1005b48a <LL_phy_update+0x21e>
1005b37e:	212a      	movs	r1, #42	@ 0x2a
1005b380:	e084      	b.n	1005b48c <LL_phy_update+0x220>
1005b382:	9301      	str	r3, [sp, #4]
1005b384:	9f04      	ldr	r7, [sp, #16]
1005b386:	4638      	mov	r0, r7
1005b388:	9e03      	ldr	r6, [sp, #12]
1005b38a:	4631      	mov	r1, r6
1005b38c:	f000 f9a3 	bl	1005b6d6 <LL_reset_max_tx_data_frag>
1005b390:	7d69      	ldrb	r1, [r5, #21]
1005b392:	4638      	mov	r0, r7
1005b394:	f7fe ffbc 	bl	1005a310 <LLC_connection_cte_response_disable_ucfg_weak>
1005b398:	8871      	ldrh	r1, [r6, #2]
1005b39a:	8830      	ldrh	r0, [r6, #0]
1005b39c:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005b39e:	4290      	cmp	r0, r2
1005b3a0:	d102      	bne.n	1005b3a8 <LL_phy_update+0x13c>
1005b3a2:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005b3a4:	4291      	cmp	r1, r2
1005b3a6:	d00a      	beq.n	1005b3be <LL_phy_update+0x152>
1005b3a8:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005b3aa:	8460      	strh	r0, [r4, #34]	@ 0x22
1005b3ac:	f3ef 8010 	mrs	r0, PRIMASK
1005b3b0:	b672      	cpsid	i
1005b3b2:	2001      	movs	r0, #1
1005b3b4:	0240      	lsls	r0, r0, #9
1005b3b6:	8861      	ldrh	r1, [r4, #2]
1005b3b8:	4301      	orrs	r1, r0
1005b3ba:	8061      	strh	r1, [r4, #2]
1005b3bc:	b662      	cpsie	i
1005b3be:	f3ef 8010 	mrs	r0, PRIMASK
1005b3c2:	b672      	cpsid	i
1005b3c4:	2001      	movs	r0, #1
1005b3c6:	0200      	lsls	r0, r0, #8
1005b3c8:	8861      	ldrh	r1, [r4, #2]
1005b3ca:	4301      	orrs	r1, r0
1005b3cc:	8061      	strh	r1, [r4, #2]
1005b3ce:	b662      	cpsie	i
1005b3d0:	2207      	movs	r2, #7
1005b3d2:	4638      	mov	r0, r7
1005b3d4:	9902      	ldr	r1, [sp, #8]
1005b3d6:	f7fd fd21 	bl	10058e1c <LL_cpe_clr_active>
1005b3da:	9b01      	ldr	r3, [sp, #4]
1005b3dc:	e0e5      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b3de:	2802      	cmp	r0, #2
1005b3e0:	9903      	ldr	r1, [sp, #12]
1005b3e2:	d166      	bne.n	1005b4b2 <LL_phy_update+0x246>
1005b3e4:	7c08      	ldrb	r0, [r1, #16]
1005b3e6:	2805      	cmp	r0, #5
1005b3e8:	d100      	bne.n	1005b3ec <LL_phy_update+0x180>
1005b3ea:	e100      	b.n	1005b5ee <LL_phy_update+0x382>
1005b3ec:	2800      	cmp	r0, #0
1005b3ee:	d000      	beq.n	1005b3f2 <LL_phy_update+0x186>
1005b3f0:	e0db      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b3f2:	9301      	str	r3, [sp, #4]
1005b3f4:	9f04      	ldr	r7, [sp, #16]
1005b3f6:	4638      	mov	r0, r7
1005b3f8:	f7fb feca 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b3fc:	2118      	movs	r1, #24
1005b3fe:	70b1      	strb	r1, [r6, #2]
1005b400:	2105      	movs	r1, #5
1005b402:	7071      	strb	r1, [r6, #1]
1005b404:	2503      	movs	r5, #3
1005b406:	7035      	strb	r5, [r6, #0]
1005b408:	7a01      	ldrb	r1, [r0, #8]
1005b40a:	70f1      	strb	r1, [r6, #3]
1005b40c:	7a40      	ldrb	r0, [r0, #9]
1005b40e:	7130      	strb	r0, [r6, #4]
1005b410:	1d71      	adds	r1, r6, #5
1005b412:	2202      	movs	r2, #2
1005b414:	4620      	mov	r0, r4
1005b416:	f004 fc33 	bl	1005fc80 <char_copy>
1005b41a:	9803      	ldr	r0, [sp, #12]
1005b41c:	7405      	strb	r5, [r0, #16]
1005b41e:	8820      	ldrh	r0, [r4, #0]
1005b420:	2800      	cmp	r0, #0
1005b422:	d0da      	beq.n	1005b3da <LL_phy_update+0x16e>
1005b424:	4638      	mov	r0, r7
1005b426:	9902      	ldr	r1, [sp, #8]
1005b428:	e0de      	b.n	1005b5e8 <LL_phy_update+0x37c>
1005b42a:	2802      	cmp	r0, #2
1005b42c:	d14a      	bne.n	1005b4c4 <LL_phy_update+0x258>
1005b42e:	9e03      	ldr	r6, [sp, #12]
1005b430:	7c30      	ldrb	r0, [r6, #16]
1005b432:	2803      	cmp	r0, #3
1005b434:	d000      	beq.n	1005b438 <LL_phy_update+0x1cc>
1005b436:	e09f      	b.n	1005b578 <LL_phy_update+0x30c>
1005b438:	461c      	mov	r4, r3
1005b43a:	7c70      	ldrb	r0, [r6, #17]
1005b43c:	a905      	add	r1, sp, #20
1005b43e:	7108      	strb	r0, [r1, #4]
1005b440:	9d04      	ldr	r5, [sp, #16]
1005b442:	4628      	mov	r0, r5
1005b444:	4632      	mov	r2, r6
1005b446:	f000 f8f0 	bl	1005b62a <LL_process_phy_upd_ind>
1005b44a:	2800      	cmp	r0, #0
1005b44c:	d100      	bne.n	1005b450 <LL_phy_update+0x1e4>
1005b44e:	e0ab      	b.n	1005b5a8 <LL_phy_update+0x33c>
1005b450:	4628      	mov	r0, r5
1005b452:	4631      	mov	r1, r6
1005b454:	f000 f93f 	bl	1005b6d6 <LL_reset_max_tx_data_frag>
1005b458:	2207      	movs	r2, #7
1005b45a:	4628      	mov	r0, r5
1005b45c:	e074      	b.n	1005b548 <LL_phy_update+0x2dc>
1005b45e:	2101      	movs	r1, #1
1005b460:	9f04      	ldr	r7, [sp, #16]
1005b462:	7181      	strb	r1, [r0, #6]
1005b464:	2100      	movs	r1, #0
1005b466:	4638      	mov	r0, r7
1005b468:	f7fd fd17 	bl	10058e9a <LL_cpe_get_cntxt>
1005b46c:	4604      	mov	r4, r0
1005b46e:	4638      	mov	r0, r7
1005b470:	f7fb fe5a 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b474:	212c      	movs	r1, #44	@ 0x2c
1005b476:	5c40      	ldrb	r0, [r0, r1]
1005b478:	2802      	cmp	r0, #2
1005b47a:	d10a      	bne.n	1005b492 <LL_phy_update+0x226>
1005b47c:	20ff      	movs	r0, #255	@ 0xff
1005b47e:	3006      	adds	r0, #6
1005b480:	8220      	strh	r0, [r4, #16]
1005b482:	2d07      	cmp	r5, #7
1005b484:	d024      	beq.n	1005b4d0 <LL_phy_update+0x264>
1005b486:	202a      	movs	r0, #42	@ 0x2a
1005b488:	e023      	b.n	1005b4d2 <LL_phy_update+0x266>
1005b48a:	2123      	movs	r1, #35	@ 0x23
1005b48c:	f7fc fd30 	bl	10057ef0 <llc_conn_disconnect_link_from_cpf>
1005b490:	e08a      	b.n	1005b5a8 <LL_phy_update+0x33c>
1005b492:	2d07      	cmp	r5, #7
1005b494:	d129      	bne.n	1005b4ea <LL_phy_update+0x27e>
1005b496:	a905      	add	r1, sp, #20
1005b498:	4638      	mov	r0, r7
1005b49a:	f000 f9f1 	bl	1005b880 <LL_process_phy_req_rcpt>
1005b49e:	e024      	b.n	1005b4ea <LL_phy_update+0x27e>
1005b4a0:	2016      	movs	r0, #22
1005b4a2:	70b0      	strb	r0, [r6, #2]
1005b4a4:	2003      	movs	r0, #3
1005b4a6:	7070      	strb	r0, [r6, #1]
1005b4a8:	7030      	strb	r0, [r6, #0]
1005b4aa:	7cc8      	ldrb	r0, [r1, #19]
1005b4ac:	70f0      	strb	r0, [r6, #3]
1005b4ae:	7d08      	ldrb	r0, [r1, #20]
1005b4b0:	e0a5      	b.n	1005b5fe <LL_phy_update+0x392>
1005b4b2:	2017      	movs	r0, #23
1005b4b4:	70b0      	strb	r0, [r6, #2]
1005b4b6:	2003      	movs	r0, #3
1005b4b8:	7070      	strb	r0, [r6, #1]
1005b4ba:	7030      	strb	r0, [r6, #0]
1005b4bc:	7d48      	ldrb	r0, [r1, #21]
1005b4be:	70f0      	strb	r0, [r6, #3]
1005b4c0:	7d88      	ldrb	r0, [r1, #22]
1005b4c2:	e09c      	b.n	1005b5fe <LL_phy_update+0x392>
1005b4c4:	2202      	movs	r2, #2
1005b4c6:	9804      	ldr	r0, [sp, #16]
1005b4c8:	f7fd fcca 	bl	10058e60 <LL_cpe_set_blocked>
1005b4cc:	2318      	movs	r3, #24
1005b4ce:	e06c      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b4d0:	2023      	movs	r0, #35	@ 0x23
1005b4d2:	74a0      	strb	r0, [r4, #18]
1005b4d4:	2400      	movs	r4, #0
1005b4d6:	4638      	mov	r0, r7
1005b4d8:	4621      	mov	r1, r4
1005b4da:	f7fd fcd1 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005b4de:	2207      	movs	r2, #7
1005b4e0:	2301      	movs	r3, #1
1005b4e2:	4638      	mov	r0, r7
1005b4e4:	4621      	mov	r1, r4
1005b4e6:	f7fd fc82 	bl	10058dee <LL_cpe_set_active>
1005b4ea:	4633      	mov	r3, r6
1005b4ec:	e05d      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b4ee:	461c      	mov	r4, r3
1005b4f0:	a905      	add	r1, sp, #20
1005b4f2:	2007      	movs	r0, #7
1005b4f4:	7088      	strb	r0, [r1, #2]
1005b4f6:	2000      	movs	r0, #0
1005b4f8:	7048      	strb	r0, [r1, #1]
1005b4fa:	78f0      	ldrb	r0, [r6, #3]
1005b4fc:	7008      	strb	r0, [r1, #0]
1005b4fe:	9f03      	ldr	r7, [sp, #12]
1005b500:	7c78      	ldrb	r0, [r7, #17]
1005b502:	70c8      	strb	r0, [r1, #3]
1005b504:	9e04      	ldr	r6, [sp, #16]
1005b506:	4630      	mov	r0, r6
1005b508:	f000 f992 	bl	1005b830 <LL_process_unknown_rsp_reject_ind_rcpt>
1005b50c:	7828      	ldrb	r0, [r5, #0]
1005b50e:	2803      	cmp	r0, #3
1005b510:	d103      	bne.n	1005b51a <LL_phy_update+0x2ae>
1005b512:	4630      	mov	r0, r6
1005b514:	4639      	mov	r1, r7
1005b516:	f000 f8de 	bl	1005b6d6 <LL_reset_max_tx_data_frag>
1005b51a:	2207      	movs	r2, #7
1005b51c:	4630      	mov	r0, r6
1005b51e:	e013      	b.n	1005b548 <LL_phy_update+0x2dc>
1005b520:	a905      	add	r1, sp, #20
1005b522:	2011      	movs	r0, #17
1005b524:	7088      	strb	r0, [r1, #2]
1005b526:	78f0      	ldrb	r0, [r6, #3]
1005b528:	7008      	strb	r0, [r1, #0]
1005b52a:	7930      	ldrb	r0, [r6, #4]
1005b52c:	7048      	strb	r0, [r1, #1]
1005b52e:	9d03      	ldr	r5, [sp, #12]
1005b530:	7c68      	ldrb	r0, [r5, #17]
1005b532:	70c8      	strb	r0, [r1, #3]
1005b534:	4638      	mov	r0, r7
1005b536:	461c      	mov	r4, r3
1005b538:	f000 f97a 	bl	1005b830 <LL_process_unknown_rsp_reject_ind_rcpt>
1005b53c:	4638      	mov	r0, r7
1005b53e:	4629      	mov	r1, r5
1005b540:	f000 f8c9 	bl	1005b6d6 <LL_reset_max_tx_data_frag>
1005b544:	2207      	movs	r2, #7
1005b546:	4638      	mov	r0, r7
1005b548:	9902      	ldr	r1, [sp, #8]
1005b54a:	e02b      	b.n	1005b5a4 <LL_phy_update+0x338>
1005b54c:	9301      	str	r3, [sp, #4]
1005b54e:	1cf0      	adds	r0, r6, #3
1005b550:	ae05      	add	r6, sp, #20
1005b552:	2205      	movs	r2, #5
1005b554:	4631      	mov	r1, r6
1005b556:	f004 fb93 	bl	1005fc80 <char_copy>
1005b55a:	9d03      	ldr	r5, [sp, #12]
1005b55c:	7c68      	ldrb	r0, [r5, #17]
1005b55e:	7130      	strb	r0, [r6, #4]
1005b560:	4638      	mov	r0, r7
1005b562:	4631      	mov	r1, r6
1005b564:	462a      	mov	r2, r5
1005b566:	f000 f860 	bl	1005b62a <LL_process_phy_upd_ind>
1005b56a:	2800      	cmp	r0, #0
1005b56c:	d049      	beq.n	1005b602 <LL_phy_update+0x396>
1005b56e:	4638      	mov	r0, r7
1005b570:	4629      	mov	r1, r5
1005b572:	f000 f8b0 	bl	1005b6d6 <LL_reset_max_tx_data_frag>
1005b576:	e72b      	b.n	1005b3d0 <LL_phy_update+0x164>
1005b578:	2207      	movs	r2, #7
1005b57a:	9804      	ldr	r0, [sp, #16]
1005b57c:	461c      	mov	r4, r3
1005b57e:	e011      	b.n	1005b5a4 <LL_phy_update+0x338>
1005b580:	461c      	mov	r4, r3
1005b582:	7c70      	ldrb	r0, [r6, #17]
1005b584:	a905      	add	r1, sp, #20
1005b586:	7108      	strb	r0, [r1, #4]
1005b588:	9d04      	ldr	r5, [sp, #16]
1005b58a:	4628      	mov	r0, r5
1005b58c:	4632      	mov	r2, r6
1005b58e:	f000 f84c 	bl	1005b62a <LL_process_phy_upd_ind>
1005b592:	2800      	cmp	r0, #0
1005b594:	d046      	beq.n	1005b624 <LL_phy_update+0x3b8>
1005b596:	4628      	mov	r0, r5
1005b598:	4631      	mov	r1, r6
1005b59a:	f000 f89c 	bl	1005b6d6 <LL_reset_max_tx_data_frag>
1005b59e:	2101      	movs	r1, #1
1005b5a0:	2207      	movs	r2, #7
1005b5a2:	4628      	mov	r0, r5
1005b5a4:	f7fd fc3a 	bl	10058e1c <LL_cpe_clr_active>
1005b5a8:	4623      	mov	r3, r4
1005b5aa:	4618      	mov	r0, r3
1005b5ac:	b007      	add	sp, #28
1005b5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b5b0:	9301      	str	r3, [sp, #4]
1005b5b2:	9f04      	ldr	r7, [sp, #16]
1005b5b4:	4638      	mov	r0, r7
1005b5b6:	f7fb fdeb 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b5ba:	2118      	movs	r1, #24
1005b5bc:	70b1      	strb	r1, [r6, #2]
1005b5be:	2105      	movs	r1, #5
1005b5c0:	7071      	strb	r1, [r6, #1]
1005b5c2:	2503      	movs	r5, #3
1005b5c4:	7035      	strb	r5, [r6, #0]
1005b5c6:	7a01      	ldrb	r1, [r0, #8]
1005b5c8:	70f1      	strb	r1, [r6, #3]
1005b5ca:	7a40      	ldrb	r0, [r0, #9]
1005b5cc:	7130      	strb	r0, [r6, #4]
1005b5ce:	1d71      	adds	r1, r6, #5
1005b5d0:	2202      	movs	r2, #2
1005b5d2:	4620      	mov	r0, r4
1005b5d4:	f004 fb54 	bl	1005fc80 <char_copy>
1005b5d8:	9803      	ldr	r0, [sp, #12]
1005b5da:	7405      	strb	r5, [r0, #16]
1005b5dc:	8820      	ldrh	r0, [r4, #0]
1005b5de:	2800      	cmp	r0, #0
1005b5e0:	d100      	bne.n	1005b5e4 <LL_phy_update+0x378>
1005b5e2:	e6fa      	b.n	1005b3da <LL_phy_update+0x16e>
1005b5e4:	2101      	movs	r1, #1
1005b5e6:	4638      	mov	r0, r7
1005b5e8:	f7fd fc60 	bl	10058eac <LL_cpe_set_tx_with_instant>
1005b5ec:	e015      	b.n	1005b61a <LL_phy_update+0x3ae>
1005b5ee:	2016      	movs	r0, #22
1005b5f0:	70f0      	strb	r0, [r6, #3]
1005b5f2:	2011      	movs	r0, #17
1005b5f4:	70b0      	strb	r0, [r6, #2]
1005b5f6:	2003      	movs	r0, #3
1005b5f8:	7070      	strb	r0, [r6, #1]
1005b5fa:	7030      	strb	r0, [r6, #0]
1005b5fc:	7c88      	ldrb	r0, [r1, #18]
1005b5fe:	7130      	strb	r0, [r6, #4]
1005b600:	e7d3      	b.n	1005b5aa <LL_phy_update+0x33e>
1005b602:	9d02      	ldr	r5, [sp, #8]
1005b604:	2d01      	cmp	r5, #1
1005b606:	d104      	bne.n	1005b612 <LL_phy_update+0x3a6>
1005b608:	2101      	movs	r1, #1
1005b60a:	2202      	movs	r2, #2
1005b60c:	4638      	mov	r0, r7
1005b60e:	f7fd fc27 	bl	10058e60 <LL_cpe_set_blocked>
1005b612:	4638      	mov	r0, r7
1005b614:	4629      	mov	r1, r5
1005b616:	f7fd fc58 	bl	10058eca <LL_cpe_set_rx_with_instant>
1005b61a:	8860      	ldrh	r0, [r4, #2]
1005b61c:	2180      	movs	r1, #128	@ 0x80
1005b61e:	4301      	orrs	r1, r0
1005b620:	8061      	strh	r1, [r4, #2]
1005b622:	e6da      	b.n	1005b3da <LL_phy_update+0x16e>
1005b624:	2004      	movs	r0, #4
1005b626:	7430      	strb	r0, [r6, #16]
1005b628:	e7be      	b.n	1005b5a8 <LL_phy_update+0x33c>

1005b62a <LL_process_phy_upd_ind>:
1005b62a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b62c:	9201      	str	r2, [sp, #4]
1005b62e:	460c      	mov	r4, r1
1005b630:	4606      	mov	r6, r0
1005b632:	f7fb fd79 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b636:	4607      	mov	r7, r0
1005b638:	4630      	mov	r0, r6
1005b63a:	f7fb fda9 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b63e:	4605      	mov	r5, r0
1005b640:	202c      	movs	r0, #44	@ 0x2c
1005b642:	9702      	str	r7, [sp, #8]
1005b644:	5c39      	ldrb	r1, [r7, r0]
1005b646:	2903      	cmp	r1, #3
1005b648:	d111      	bne.n	1005b66e <LL_process_phy_upd_ind+0x44>
1005b64a:	7827      	ldrb	r7, [r4, #0]
1005b64c:	2001      	movs	r0, #1
1005b64e:	2f04      	cmp	r7, #4
1005b650:	d82e      	bhi.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b652:	2f03      	cmp	r7, #3
1005b654:	d02c      	beq.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b656:	7862      	ldrb	r2, [r4, #1]
1005b658:	2a04      	cmp	r2, #4
1005b65a:	d829      	bhi.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b65c:	2a03      	cmp	r2, #3
1005b65e:	d027      	beq.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b660:	9b02      	ldr	r3, [sp, #8]
1005b662:	3398      	adds	r3, #152	@ 0x98
1005b664:	726a      	strb	r2, [r5, #9]
1005b666:	722f      	strb	r7, [r5, #8]
1005b668:	8862      	ldrh	r2, [r4, #2]
1005b66a:	801a      	strh	r2, [r3, #0]
1005b66c:	e000      	b.n	1005b670 <LL_process_phy_upd_ind+0x46>
1005b66e:	7a2f      	ldrb	r7, [r5, #8]
1005b670:	2f00      	cmp	r7, #0
1005b672:	d102      	bne.n	1005b67a <LL_process_phy_upd_ind+0x50>
1005b674:	7a6a      	ldrb	r2, [r5, #9]
1005b676:	2a00      	cmp	r2, #0
1005b678:	d016      	beq.n	1005b6a8 <LL_process_phy_upd_ind+0x7e>
1005b67a:	2000      	movs	r0, #0
1005b67c:	2903      	cmp	r1, #3
1005b67e:	d117      	bne.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b680:	7a69      	ldrb	r1, [r5, #9]
1005b682:	2900      	cmp	r1, #0
1005b684:	d014      	beq.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b686:	79ea      	ldrb	r2, [r5, #7]
1005b688:	9b01      	ldr	r3, [sp, #4]
1005b68a:	9300      	str	r3, [sp, #0]
1005b68c:	403a      	ands	r2, r7
1005b68e:	0752      	lsls	r2, r2, #29
1005b690:	0fd2      	lsrs	r2, r2, #31
1005b692:	4604      	mov	r4, r0
1005b694:	2301      	movs	r3, #1
1005b696:	4630      	mov	r0, r6
1005b698:	f000 fa04 	bl	1005baa4 <LL_adjust_max_tx_data_frag>
1005b69c:	7a69      	ldrb	r1, [r5, #9]
1005b69e:	4630      	mov	r0, r6
1005b6a0:	f7fe fe35 	bl	1005a30e <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005b6a4:	4620      	mov	r0, r4
1005b6a6:	e003      	b.n	1005b6b0 <LL_process_phy_upd_ind+0x86>
1005b6a8:	7921      	ldrb	r1, [r4, #4]
1005b6aa:	2001      	movs	r0, #1
1005b6ac:	2900      	cmp	r1, #0
1005b6ae:	d000      	beq.n	1005b6b2 <LL_process_phy_upd_ind+0x88>
1005b6b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b6b2:	4604      	mov	r4, r0
1005b6b4:	79e9      	ldrb	r1, [r5, #7]
1005b6b6:	2003      	movs	r0, #3
1005b6b8:	074a      	lsls	r2, r1, #29
1005b6ba:	d500      	bpl.n	1005b6be <LL_process_phy_upd_ind+0x94>
1005b6bc:	4601      	mov	r1, r0
1005b6be:	9a02      	ldr	r2, [sp, #8]
1005b6c0:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005b6c2:	79ab      	ldrb	r3, [r5, #6]
1005b6c4:	9100      	str	r1, [sp, #0]
1005b6c6:	0759      	lsls	r1, r3, #29
1005b6c8:	d500      	bpl.n	1005b6cc <LL_process_phy_upd_ind+0xa2>
1005b6ca:	4603      	mov	r3, r0
1005b6cc:	2080      	movs	r0, #128	@ 0x80
1005b6ce:	2100      	movs	r1, #0
1005b6d0:	f000 f9b2 	bl	1005ba38 <hci_le_phy_update_complete_event_push>
1005b6d4:	e7e6      	b.n	1005b6a4 <LL_process_phy_upd_ind+0x7a>

1005b6d6 <LL_reset_max_tx_data_frag>:
1005b6d6:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005b6d8:	460d      	mov	r5, r1
1005b6da:	4604      	mov	r4, r0
1005b6dc:	f7fb fd58 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b6e0:	2800      	cmp	r0, #0
1005b6e2:	d007      	beq.n	1005b6f4 <LL_reset_max_tx_data_frag+0x1e>
1005b6e4:	7981      	ldrb	r1, [r0, #6]
1005b6e6:	79c0      	ldrb	r0, [r0, #7]
1005b6e8:	2804      	cmp	r0, #4
1005b6ea:	d107      	bne.n	1005b6fc <LL_reset_max_tx_data_frag+0x26>
1005b6ec:	4628      	mov	r0, r5
1005b6ee:	300c      	adds	r0, #12
1005b6f0:	2201      	movs	r2, #1
1005b6f2:	e005      	b.n	1005b700 <LL_reset_max_tx_data_frag+0x2a>
1005b6f4:	1da8      	adds	r0, r5, #6
1005b6f6:	2200      	movs	r2, #0
1005b6f8:	2101      	movs	r1, #1
1005b6fa:	e001      	b.n	1005b700 <LL_reset_max_tx_data_frag+0x2a>
1005b6fc:	1da8      	adds	r0, r5, #6
1005b6fe:	2200      	movs	r2, #0
1005b700:	8800      	ldrh	r0, [r0, #0]
1005b702:	8068      	strh	r0, [r5, #2]
1005b704:	9500      	str	r5, [sp, #0]
1005b706:	2300      	movs	r3, #0
1005b708:	4620      	mov	r0, r4
1005b70a:	f000 f9cb 	bl	1005baa4 <LL_adjust_max_tx_data_frag>
1005b70e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005b710 <LL_compute_phy_upd_ind>:
1005b710:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b712:	460d      	mov	r5, r1
1005b714:	4604      	mov	r4, r0
1005b716:	f7fb fd3b 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b71a:	4606      	mov	r6, r0
1005b71c:	7928      	ldrb	r0, [r5, #4]
1005b71e:	2801      	cmp	r0, #1
1005b720:	9002      	str	r0, [sp, #8]
1005b722:	d114      	bne.n	1005b74e <LL_compute_phy_upd_ind+0x3e>
1005b724:	2500      	movs	r5, #0
1005b726:	4620      	mov	r0, r4
1005b728:	4629      	mov	r1, r5
1005b72a:	f7fd fbb6 	bl	10058e9a <LL_cpe_get_cntxt>
1005b72e:	4607      	mov	r7, r0
1005b730:	7d02      	ldrb	r2, [r0, #20]
1005b732:	7cc3      	ldrb	r3, [r0, #19]
1005b734:	4293      	cmp	r3, r2
1005b736:	9501      	str	r5, [sp, #4]
1005b738:	d105      	bne.n	1005b746 <LL_compute_phy_upd_ind+0x36>
1005b73a:	2b03      	cmp	r3, #3
1005b73c:	d302      	bcc.n	1005b744 <LL_compute_phy_upd_ind+0x34>
1005b73e:	2b04      	cmp	r3, #4
1005b740:	9d01      	ldr	r5, [sp, #4]
1005b742:	d100      	bne.n	1005b746 <LL_compute_phy_upd_ind+0x36>
1005b744:	2501      	movs	r5, #1
1005b746:	78f0      	ldrb	r0, [r6, #3]
1005b748:	4018      	ands	r0, r3
1005b74a:	78b3      	ldrb	r3, [r6, #2]
1005b74c:	e014      	b.n	1005b778 <LL_compute_phy_upd_ind+0x68>
1005b74e:	2101      	movs	r1, #1
1005b750:	4620      	mov	r0, r4
1005b752:	9101      	str	r1, [sp, #4]
1005b754:	f7fd fba1 	bl	10058e9a <LL_cpe_get_cntxt>
1005b758:	4607      	mov	r7, r0
1005b75a:	78ab      	ldrb	r3, [r5, #2]
1005b75c:	7543      	strb	r3, [r0, #21]
1005b75e:	78ea      	ldrb	r2, [r5, #3]
1005b760:	7582      	strb	r2, [r0, #22]
1005b762:	2500      	movs	r5, #0
1005b764:	4293      	cmp	r3, r2
1005b766:	d104      	bne.n	1005b772 <LL_compute_phy_upd_ind+0x62>
1005b768:	2b03      	cmp	r3, #3
1005b76a:	d301      	bcc.n	1005b770 <LL_compute_phy_upd_ind+0x60>
1005b76c:	2b04      	cmp	r3, #4
1005b76e:	d100      	bne.n	1005b772 <LL_compute_phy_upd_ind+0x62>
1005b770:	2501      	movs	r5, #1
1005b772:	7d38      	ldrb	r0, [r7, #20]
1005b774:	4018      	ands	r0, r3
1005b776:	7cfb      	ldrb	r3, [r7, #19]
1005b778:	4013      	ands	r3, r2
1005b77a:	2d00      	cmp	r5, #0
1005b77c:	d002      	beq.n	1005b784 <LL_compute_phy_upd_ind+0x74>
1005b77e:	4283      	cmp	r3, r0
1005b780:	4603      	mov	r3, r0
1005b782:	d107      	bne.n	1005b794 <LL_compute_phy_upd_ind+0x84>
1005b784:	2100      	movs	r1, #0
1005b786:	2b00      	cmp	r3, #0
1005b788:	460a      	mov	r2, r1
1005b78a:	d00a      	beq.n	1005b7a2 <LL_compute_phy_upd_ind+0x92>
1005b78c:	07da      	lsls	r2, r3, #31
1005b78e:	d004      	beq.n	1005b79a <LL_compute_phy_upd_ind+0x8a>
1005b790:	2201      	movs	r2, #1
1005b792:	e003      	b.n	1005b79c <LL_compute_phy_upd_ind+0x8c>
1005b794:	2200      	movs	r2, #0
1005b796:	4611      	mov	r1, r2
1005b798:	e00d      	b.n	1005b7b6 <LL_compute_phy_upd_ind+0xa6>
1005b79a:	2204      	movs	r2, #4
1005b79c:	079b      	lsls	r3, r3, #30
1005b79e:	d500      	bpl.n	1005b7a2 <LL_compute_phy_upd_ind+0x92>
1005b7a0:	2202      	movs	r2, #2
1005b7a2:	2800      	cmp	r0, #0
1005b7a4:	d007      	beq.n	1005b7b6 <LL_compute_phy_upd_ind+0xa6>
1005b7a6:	07c1      	lsls	r1, r0, #31
1005b7a8:	d001      	beq.n	1005b7ae <LL_compute_phy_upd_ind+0x9e>
1005b7aa:	2101      	movs	r1, #1
1005b7ac:	e000      	b.n	1005b7b0 <LL_compute_phy_upd_ind+0xa0>
1005b7ae:	2104      	movs	r1, #4
1005b7b0:	0780      	lsls	r0, r0, #30
1005b7b2:	d500      	bpl.n	1005b7b6 <LL_compute_phy_upd_ind+0xa6>
1005b7b4:	2102      	movs	r1, #2
1005b7b6:	79b3      	ldrb	r3, [r6, #6]
1005b7b8:	2000      	movs	r0, #0
1005b7ba:	429a      	cmp	r2, r3
1005b7bc:	4603      	mov	r3, r0
1005b7be:	d000      	beq.n	1005b7c2 <LL_compute_phy_upd_ind+0xb2>
1005b7c0:	4613      	mov	r3, r2
1005b7c2:	7233      	strb	r3, [r6, #8]
1005b7c4:	79f2      	ldrb	r2, [r6, #7]
1005b7c6:	4291      	cmp	r1, r2
1005b7c8:	d000      	beq.n	1005b7cc <LL_compute_phy_upd_ind+0xbc>
1005b7ca:	4608      	mov	r0, r1
1005b7cc:	7270      	strb	r0, [r6, #9]
1005b7ce:	4620      	mov	r0, r4
1005b7d0:	f7fb fcaa 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b7d4:	4605      	mov	r5, r0
1005b7d6:	7a70      	ldrb	r0, [r6, #9]
1005b7d8:	2800      	cmp	r0, #0
1005b7da:	d102      	bne.n	1005b7e2 <LL_compute_phy_upd_ind+0xd2>
1005b7dc:	7a30      	ldrb	r0, [r6, #8]
1005b7de:	2800      	cmp	r0, #0
1005b7e0:	d015      	beq.n	1005b80e <LL_compute_phy_upd_ind+0xfe>
1005b7e2:	4620      	mov	r0, r4
1005b7e4:	f7fe f922 	bl	10059a2c <llc_cpe_calc_instant>
1005b7e8:	2198      	movs	r1, #152	@ 0x98
1005b7ea:	5268      	strh	r0, [r5, r1]
1005b7ec:	7a31      	ldrb	r1, [r6, #8]
1005b7ee:	2900      	cmp	r1, #0
1005b7f0:	d010      	beq.n	1005b814 <LL_compute_phy_upd_ind+0x104>
1005b7f2:	79f0      	ldrb	r0, [r6, #7]
1005b7f4:	9700      	str	r7, [sp, #0]
1005b7f6:	4008      	ands	r0, r1
1005b7f8:	0740      	lsls	r0, r0, #29
1005b7fa:	0fc2      	lsrs	r2, r0, #31
1005b7fc:	2301      	movs	r3, #1
1005b7fe:	4620      	mov	r0, r4
1005b800:	f000 f950 	bl	1005baa4 <LL_adjust_max_tx_data_frag>
1005b804:	7a31      	ldrb	r1, [r6, #8]
1005b806:	4620      	mov	r0, r4
1005b808:	f7fe fd81 	bl	1005a30e <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005b80c:	e002      	b.n	1005b814 <LL_compute_phy_upd_ind+0x104>
1005b80e:	2098      	movs	r0, #152	@ 0x98
1005b810:	2100      	movs	r1, #0
1005b812:	5229      	strh	r1, [r5, r0]
1005b814:	9802      	ldr	r0, [sp, #8]
1005b816:	2801      	cmp	r0, #1
1005b818:	d009      	beq.n	1005b82e <LL_compute_phy_upd_ind+0x11e>
1005b81a:	4620      	mov	r0, r4
1005b81c:	9d01      	ldr	r5, [sp, #4]
1005b81e:	4629      	mov	r1, r5
1005b820:	f7fd fb2e 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005b824:	2202      	movs	r2, #2
1005b826:	4620      	mov	r0, r4
1005b828:	4629      	mov	r1, r5
1005b82a:	f7fd fb19 	bl	10058e60 <LL_cpe_set_blocked>
1005b82e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005b830 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005b830:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005b832:	460d      	mov	r5, r1
1005b834:	4606      	mov	r6, r0
1005b836:	f7fb fcab 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b83a:	4604      	mov	r4, r0
1005b83c:	4630      	mov	r0, r6
1005b83e:	f7fb fc73 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b842:	78a9      	ldrb	r1, [r5, #2]
1005b844:	2907      	cmp	r1, #7
1005b846:	d107      	bne.n	1005b858 <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005b848:	21ff      	movs	r1, #255	@ 0xff
1005b84a:	3130      	adds	r1, #48	@ 0x30
1005b84c:	5c42      	ldrb	r2, [r0, r1]
1005b84e:	23f6      	movs	r3, #246	@ 0xf6
1005b850:	4013      	ands	r3, r2
1005b852:	5443      	strb	r3, [r0, r1]
1005b854:	211a      	movs	r1, #26
1005b856:	e000      	b.n	1005b85a <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005b858:	7869      	ldrb	r1, [r5, #1]
1005b85a:	78ea      	ldrb	r2, [r5, #3]
1005b85c:	2a00      	cmp	r2, #0
1005b85e:	d000      	beq.n	1005b862 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005b860:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005b862:	79e6      	ldrb	r6, [r4, #7]
1005b864:	2503      	movs	r5, #3
1005b866:	0772      	lsls	r2, r6, #29
1005b868:	d500      	bpl.n	1005b86c <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005b86a:	462e      	mov	r6, r5
1005b86c:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005b86e:	79a3      	ldrb	r3, [r4, #6]
1005b870:	9600      	str	r6, [sp, #0]
1005b872:	0758      	lsls	r0, r3, #29
1005b874:	d500      	bpl.n	1005b878 <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005b876:	462b      	mov	r3, r5
1005b878:	2080      	movs	r0, #128	@ 0x80
1005b87a:	f000 f8dd 	bl	1005ba38 <hci_le_phy_update_complete_event_push>
1005b87e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005b880 <LL_process_phy_req_rcpt>:
1005b880:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b882:	b085      	sub	sp, #20
1005b884:	460f      	mov	r7, r1
1005b886:	4604      	mov	r4, r0
1005b888:	f7fb fc4e 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b88c:	4605      	mov	r5, r0
1005b88e:	2100      	movs	r1, #0
1005b890:	4620      	mov	r0, r4
1005b892:	9102      	str	r1, [sp, #8]
1005b894:	f7fd fb01 	bl	10058e9a <LL_cpe_get_cntxt>
1005b898:	4606      	mov	r6, r0
1005b89a:	2001      	movs	r0, #1
1005b89c:	9001      	str	r0, [sp, #4]
1005b89e:	7470      	strb	r0, [r6, #17]
1005b8a0:	78b8      	ldrb	r0, [r7, #2]
1005b8a2:	74f0      	strb	r0, [r6, #19]
1005b8a4:	78f8      	ldrb	r0, [r7, #3]
1005b8a6:	7530      	strb	r0, [r6, #20]
1005b8a8:	20b6      	movs	r0, #182	@ 0xb6
1005b8aa:	5a28      	ldrh	r0, [r5, r0]
1005b8ac:	81f0      	strh	r0, [r6, #14]
1005b8ae:	a803      	add	r0, sp, #12
1005b8b0:	7104      	strb	r4, [r0, #4]
1005b8b2:	9603      	str	r6, [sp, #12]
1005b8b4:	f7ff fc90 	bl	1005b1d8 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005b8b8:	202c      	movs	r0, #44	@ 0x2c
1005b8ba:	5c28      	ldrb	r0, [r5, r0]
1005b8bc:	352c      	adds	r5, #44	@ 0x2c
1005b8be:	2802      	cmp	r0, #2
1005b8c0:	d108      	bne.n	1005b8d4 <LL_process_phy_req_rcpt+0x54>
1005b8c2:	7c70      	ldrb	r0, [r6, #17]
1005b8c4:	7138      	strb	r0, [r7, #4]
1005b8c6:	4620      	mov	r0, r4
1005b8c8:	4639      	mov	r1, r7
1005b8ca:	f7ff ff21 	bl	1005b710 <LL_compute_phy_upd_ind>
1005b8ce:	9802      	ldr	r0, [sp, #8]
1005b8d0:	7430      	strb	r0, [r6, #16]
1005b8d2:	e025      	b.n	1005b920 <LL_process_phy_req_rcpt+0xa0>
1005b8d4:	4620      	mov	r0, r4
1005b8d6:	f7fb fc5b 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b8da:	7881      	ldrb	r1, [r0, #2]
1005b8dc:	7571      	strb	r1, [r6, #21]
1005b8de:	78c7      	ldrb	r7, [r0, #3]
1005b8e0:	75b7      	strb	r7, [r6, #22]
1005b8e2:	7d33      	ldrb	r3, [r6, #20]
1005b8e4:	400b      	ands	r3, r1
1005b8e6:	b2db      	uxtb	r3, r3
1005b8e8:	2b00      	cmp	r3, #0
1005b8ea:	d019      	beq.n	1005b920 <LL_process_phy_req_rcpt+0xa0>
1005b8ec:	7981      	ldrb	r1, [r0, #6]
1005b8ee:	428b      	cmp	r3, r1
1005b8f0:	d016      	beq.n	1005b920 <LL_process_phy_req_rcpt+0xa0>
1005b8f2:	07d9      	lsls	r1, r3, #31
1005b8f4:	d002      	beq.n	1005b8fc <LL_process_phy_req_rcpt+0x7c>
1005b8f6:	9a01      	ldr	r2, [sp, #4]
1005b8f8:	4611      	mov	r1, r2
1005b8fa:	e001      	b.n	1005b900 <LL_process_phy_req_rcpt+0x80>
1005b8fc:	2102      	movs	r1, #2
1005b8fe:	9a01      	ldr	r2, [sp, #4]
1005b900:	075b      	lsls	r3, r3, #29
1005b902:	d500      	bpl.n	1005b906 <LL_process_phy_req_rcpt+0x86>
1005b904:	2104      	movs	r1, #4
1005b906:	7cf3      	ldrb	r3, [r6, #19]
1005b908:	401f      	ands	r7, r3
1005b90a:	077b      	lsls	r3, r7, #29
1005b90c:	d403      	bmi.n	1005b916 <LL_process_phy_req_rcpt+0x96>
1005b90e:	79c0      	ldrb	r0, [r0, #7]
1005b910:	1f00      	subs	r0, r0, #4
1005b912:	4242      	negs	r2, r0
1005b914:	4142      	adcs	r2, r0
1005b916:	9600      	str	r6, [sp, #0]
1005b918:	2301      	movs	r3, #1
1005b91a:	4620      	mov	r0, r4
1005b91c:	f000 f8c2 	bl	1005baa4 <LL_adjust_max_tx_data_frag>
1005b920:	2600      	movs	r6, #0
1005b922:	4620      	mov	r0, r4
1005b924:	4631      	mov	r1, r6
1005b926:	f7fd faab 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005b92a:	2207      	movs	r2, #7
1005b92c:	2301      	movs	r3, #1
1005b92e:	4620      	mov	r0, r4
1005b930:	4631      	mov	r1, r6
1005b932:	f7fd fa5c 	bl	10058dee <LL_cpe_set_active>
1005b936:	7828      	ldrb	r0, [r5, #0]
1005b938:	2802      	cmp	r0, #2
1005b93a:	d104      	bne.n	1005b946 <LL_process_phy_req_rcpt+0xc6>
1005b93c:	2100      	movs	r1, #0
1005b93e:	2202      	movs	r2, #2
1005b940:	4620      	mov	r0, r4
1005b942:	f7fd fa8d 	bl	10058e60 <LL_cpe_set_blocked>
1005b946:	b005      	add	sp, #20
1005b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005b94c <LL_phy_upd_evt_pending_check_isr>:
1005b94c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b94e:	b087      	sub	sp, #28
1005b950:	4605      	mov	r5, r0
1005b952:	f7fb fbe9 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005b956:	4604      	mov	r4, r0
1005b958:	4628      	mov	r0, r5
1005b95a:	f7fb fc19 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005b95e:	4605      	mov	r5, r0
1005b960:	209a      	movs	r0, #154	@ 0x9a
1005b962:	5a26      	ldrh	r6, [r4, r0]
1005b964:	05b0      	lsls	r0, r6, #22
1005b966:	4627      	mov	r7, r4
1005b968:	379a      	adds	r7, #154	@ 0x9a
1005b96a:	2800      	cmp	r0, #0
1005b96c:	d545      	bpl.n	1005b9fa <LL_phy_upd_evt_pending_check_isr+0xae>
1005b96e:	482e      	ldr	r0, [pc, #184]	@ (1005ba28 <__arm_cp.15_0>)
1005b970:	6800      	ldr	r0, [r0, #0]
1005b972:	213d      	movs	r1, #61	@ 0x3d
1005b974:	5c41      	ldrb	r1, [r0, r1]
1005b976:	0689      	lsls	r1, r1, #26
1005b978:	d53b      	bpl.n	1005b9f2 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005b97a:	303d      	adds	r0, #61	@ 0x3d
1005b97c:	7a40      	ldrb	r0, [r0, #9]
1005b97e:	0640      	lsls	r0, r0, #25
1005b980:	d537      	bpl.n	1005b9f2 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005b982:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005b984:	9002      	str	r0, [sp, #8]
1005b986:	8bf8      	ldrh	r0, [r7, #30]
1005b988:	9003      	str	r0, [sp, #12]
1005b98a:	8c38      	ldrh	r0, [r7, #32]
1005b98c:	9004      	str	r0, [sp, #16]
1005b98e:	8b78      	ldrh	r0, [r7, #26]
1005b990:	9005      	str	r0, [sp, #20]
1005b992:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005b994:	9006      	str	r0, [sp, #24]
1005b996:	4825      	ldr	r0, [pc, #148]	@ (1005ba2c <__arm_cp.15_1>)
1005b998:	6800      	ldr	r0, [r0, #0]
1005b99a:	6900      	ldr	r0, [r0, #16]
1005b99c:	2180      	movs	r1, #128	@ 0x80
1005b99e:	2226      	movs	r2, #38	@ 0x26
1005b9a0:	2304      	movs	r3, #4
1005b9a2:	9301      	str	r3, [sp, #4]
1005b9a4:	f7f6 fc9a 	bl	100522dc <aci_event_fifo_push_header>
1005b9a8:	2800      	cmp	r0, #0
1005b9aa:	d022      	beq.n	1005b9f2 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005b9ac:	4601      	mov	r1, r0
1005b9ae:	9a02      	ldr	r2, [sp, #8]
1005b9b0:	7402      	strb	r2, [r0, #16]
1005b9b2:	9b03      	ldr	r3, [sp, #12]
1005b9b4:	7383      	strb	r3, [r0, #14]
1005b9b6:	9804      	ldr	r0, [sp, #16]
1005b9b8:	7308      	strb	r0, [r1, #12]
1005b9ba:	9805      	ldr	r0, [sp, #20]
1005b9bc:	7288      	strb	r0, [r1, #10]
1005b9be:	9806      	ldr	r0, [sp, #24]
1005b9c0:	7208      	strb	r0, [r1, #8]
1005b9c2:	2007      	movs	r0, #7
1005b9c4:	71c8      	strb	r0, [r1, #7]
1005b9c6:	200b      	movs	r0, #11
1005b9c8:	7188      	strb	r0, [r1, #6]
1005b9ca:	203e      	movs	r0, #62	@ 0x3e
1005b9cc:	7148      	strb	r0, [r1, #5]
1005b9ce:	9801      	ldr	r0, [sp, #4]
1005b9d0:	7108      	strb	r0, [r1, #4]
1005b9d2:	0a10      	lsrs	r0, r2, #8
1005b9d4:	7448      	strb	r0, [r1, #17]
1005b9d6:	0a18      	lsrs	r0, r3, #8
1005b9d8:	73c8      	strb	r0, [r1, #15]
1005b9da:	9804      	ldr	r0, [sp, #16]
1005b9dc:	0a00      	lsrs	r0, r0, #8
1005b9de:	7348      	strb	r0, [r1, #13]
1005b9e0:	9805      	ldr	r0, [sp, #20]
1005b9e2:	0a00      	lsrs	r0, r0, #8
1005b9e4:	72c8      	strb	r0, [r1, #11]
1005b9e6:	9806      	ldr	r0, [sp, #24]
1005b9e8:	0a00      	lsrs	r0, r0, #8
1005b9ea:	7248      	strb	r0, [r1, #9]
1005b9ec:	2080      	movs	r0, #128	@ 0x80
1005b9ee:	f7f6 fd12 	bl	10052416 <aci_event_fifo_push>
1005b9f2:	8838      	ldrh	r0, [r7, #0]
1005b9f4:	490e      	ldr	r1, [pc, #56]	@ (1005ba30 <__arm_cp.15_2>)
1005b9f6:	4001      	ands	r1, r0
1005b9f8:	8039      	strh	r1, [r7, #0]
1005b9fa:	05f0      	lsls	r0, r6, #23
1005b9fc:	d512      	bpl.n	1005ba24 <LL_phy_upd_evt_pending_check_isr+0xd8>
1005b9fe:	79e9      	ldrb	r1, [r5, #7]
1005ba00:	2003      	movs	r0, #3
1005ba02:	074a      	lsls	r2, r1, #29
1005ba04:	d500      	bpl.n	1005ba08 <LL_phy_upd_evt_pending_check_isr+0xbc>
1005ba06:	4601      	mov	r1, r0
1005ba08:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005ba0a:	79ab      	ldrb	r3, [r5, #6]
1005ba0c:	9100      	str	r1, [sp, #0]
1005ba0e:	0759      	lsls	r1, r3, #29
1005ba10:	d500      	bpl.n	1005ba14 <LL_phy_upd_evt_pending_check_isr+0xc8>
1005ba12:	4603      	mov	r3, r0
1005ba14:	2080      	movs	r0, #128	@ 0x80
1005ba16:	2100      	movs	r1, #0
1005ba18:	f000 f80e 	bl	1005ba38 <hci_le_phy_update_complete_event_push>
1005ba1c:	8838      	ldrh	r0, [r7, #0]
1005ba1e:	4905      	ldr	r1, [pc, #20]	@ (1005ba34 <__arm_cp.15_3>)
1005ba20:	4001      	ands	r1, r0
1005ba22:	8039      	strh	r1, [r7, #0]
1005ba24:	b007      	add	sp, #28
1005ba26:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ba28 <__arm_cp.15_0>:
1005ba28:	20000f20 	.word	0x20000f20

1005ba2c <__arm_cp.15_1>:
1005ba2c:	20000ed0 	.word	0x20000ed0

1005ba30 <__arm_cp.15_2>:
1005ba30:	0000fdff 	.word	0x0000fdff

1005ba34 <__arm_cp.15_3>:
1005ba34:	0000feff 	.word	0x0000feff

1005ba38 <hci_le_phy_update_complete_event_push>:
1005ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ba3a:	4604      	mov	r4, r0
1005ba3c:	06c0      	lsls	r0, r0, #27
1005ba3e:	d42c      	bmi.n	1005ba9a <hci_le_phy_update_complete_event_push+0x62>
1005ba40:	460f      	mov	r7, r1
1005ba42:	4816      	ldr	r0, [pc, #88]	@ (1005ba9c <__arm_cp.16_0>)
1005ba44:	6800      	ldr	r0, [r0, #0]
1005ba46:	213d      	movs	r1, #61	@ 0x3d
1005ba48:	5c41      	ldrb	r1, [r0, r1]
1005ba4a:	0689      	lsls	r1, r1, #26
1005ba4c:	d525      	bpl.n	1005ba9a <hci_le_phy_update_complete_event_push+0x62>
1005ba4e:	303d      	adds	r0, #61	@ 0x3d
1005ba50:	7a80      	ldrb	r0, [r0, #10]
1005ba52:	0700      	lsls	r0, r0, #28
1005ba54:	d521      	bpl.n	1005ba9a <hci_le_phy_update_complete_event_push+0x62>
1005ba56:	461e      	mov	r6, r3
1005ba58:	4615      	mov	r5, r2
1005ba5a:	4811      	ldr	r0, [pc, #68]	@ (1005baa0 <__arm_cp.16_1>)
1005ba5c:	6800      	ldr	r0, [r0, #0]
1005ba5e:	0761      	lsls	r1, r4, #29
1005ba60:	0ec9      	lsrs	r1, r1, #27
1005ba62:	1840      	adds	r0, r0, r1
1005ba64:	6900      	ldr	r0, [r0, #16]
1005ba66:	2227      	movs	r2, #39	@ 0x27
1005ba68:	2303      	movs	r3, #3
1005ba6a:	4621      	mov	r1, r4
1005ba6c:	f7f6 fc36 	bl	100522dc <aci_event_fifo_push_header>
1005ba70:	2800      	cmp	r0, #0
1005ba72:	d012      	beq.n	1005ba9a <hci_le_phy_update_complete_event_push+0x62>
1005ba74:	4601      	mov	r1, r0
1005ba76:	9806      	ldr	r0, [sp, #24]
1005ba78:	724d      	strb	r5, [r1, #9]
1005ba7a:	7308      	strb	r0, [r1, #12]
1005ba7c:	72ce      	strb	r6, [r1, #11]
1005ba7e:	720f      	strb	r7, [r1, #8]
1005ba80:	200c      	movs	r0, #12
1005ba82:	71c8      	strb	r0, [r1, #7]
1005ba84:	2006      	movs	r0, #6
1005ba86:	7188      	strb	r0, [r1, #6]
1005ba88:	203e      	movs	r0, #62	@ 0x3e
1005ba8a:	7148      	strb	r0, [r1, #5]
1005ba8c:	2004      	movs	r0, #4
1005ba8e:	7108      	strb	r0, [r1, #4]
1005ba90:	0a28      	lsrs	r0, r5, #8
1005ba92:	7288      	strb	r0, [r1, #10]
1005ba94:	4620      	mov	r0, r4
1005ba96:	f7f6 fcbe 	bl	10052416 <aci_event_fifo_push>
1005ba9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ba9c <__arm_cp.16_0>:
1005ba9c:	20000f20 	.word	0x20000f20

1005baa0 <__arm_cp.16_1>:
1005baa0:	20000ed0 	.word	0x20000ed0

1005baa4 <LL_adjust_max_tx_data_frag>:
1005baa4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005baa6:	9302      	str	r3, [sp, #8]
1005baa8:	9201      	str	r2, [sp, #4]
1005baaa:	460e      	mov	r6, r1
1005baac:	4605      	mov	r5, r0
1005baae:	f7fb fb3b 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005bab2:	4604      	mov	r4, r0
1005bab4:	4607      	mov	r7, r0
1005bab6:	34b4      	adds	r4, #180	@ 0xb4
1005bab8:	4628      	mov	r0, r5
1005baba:	f7fb fb69 	bl	10057190 <llc_conn_get_phy_upd_cntxt_per_p>
1005babe:	9908      	ldr	r1, [sp, #32]
1005bac0:	2e04      	cmp	r6, #4
1005bac2:	d106      	bne.n	1005bad2 <LL_adjust_max_tx_data_frag+0x2e>
1005bac4:	2800      	cmp	r0, #0
1005bac6:	d004      	beq.n	1005bad2 <LL_adjust_max_tx_data_frag+0x2e>
1005bac8:	9a01      	ldr	r2, [sp, #4]
1005baca:	2a00      	cmp	r2, #0
1005bacc:	d00c      	beq.n	1005bae8 <LL_adjust_max_tx_data_frag+0x44>
1005bace:	220a      	movs	r2, #10
1005bad0:	e00b      	b.n	1005baea <LL_adjust_max_tx_data_frag+0x46>
1005bad2:	8888      	ldrh	r0, [r1, #4]
1005bad4:	8008      	strh	r0, [r1, #0]
1005bad6:	2e01      	cmp	r6, #1
1005bad8:	d102      	bne.n	1005bae0 <LL_adjust_max_tx_data_frag+0x3c>
1005bada:	08c0      	lsrs	r0, r0, #3
1005badc:	380e      	subs	r0, #14
1005bade:	e001      	b.n	1005bae4 <LL_adjust_max_tx_data_frag+0x40>
1005bae0:	0880      	lsrs	r0, r0, #2
1005bae2:	380f      	subs	r0, #15
1005bae4:	9e02      	ldr	r6, [sp, #8]
1005bae6:	e00f      	b.n	1005bb08 <LL_adjust_max_tx_data_frag+0x64>
1005bae8:	2208      	movs	r2, #8
1005baea:	9e02      	ldr	r6, [sp, #8]
1005baec:	5a8a      	ldrh	r2, [r1, r2]
1005baee:	800a      	strh	r2, [r1, #0]
1005baf0:	8800      	ldrh	r0, [r0, #0]
1005baf2:	2802      	cmp	r0, #2
1005baf4:	d001      	beq.n	1005bafa <LL_adjust_max_tx_data_frag+0x56>
1005baf6:	2001      	movs	r0, #1
1005baf8:	e000      	b.n	1005bafc <LL_adjust_max_tx_data_frag+0x58>
1005bafa:	2003      	movs	r0, #3
1005bafc:	4b0b      	ldr	r3, [pc, #44]	@ (1005bb2c <__arm_cp.20_0>)
1005bafe:	18d2      	adds	r2, r2, r3
1005bb00:	40c2      	lsrs	r2, r0
1005bb02:	480b      	ldr	r0, [pc, #44]	@ (1005bb30 <__arm_cp.20_1>)
1005bb04:	1810      	adds	r0, r2, r0
1005bb06:	08c0      	lsrs	r0, r0, #3
1005bb08:	b283      	uxth	r3, r0
1005bb0a:	8822      	ldrh	r2, [r4, #0]
1005bb0c:	429a      	cmp	r2, r3
1005bb0e:	d300      	bcc.n	1005bb12 <LL_adjust_max_tx_data_frag+0x6e>
1005bb10:	4602      	mov	r2, r0
1005bb12:	2e00      	cmp	r6, #0
1005bb14:	d003      	beq.n	1005bb1e <LL_adjust_max_tx_data_frag+0x7a>
1005bb16:	b293      	uxth	r3, r2
1005bb18:	89c8      	ldrh	r0, [r1, #14]
1005bb1a:	4298      	cmp	r0, r3
1005bb1c:	d300      	bcc.n	1005bb20 <LL_adjust_max_tx_data_frag+0x7c>
1005bb1e:	4610      	mov	r0, r2
1005bb20:	8060      	strh	r0, [r4, #2]
1005bb22:	4638      	mov	r0, r7
1005bb24:	f7fb fdca 	bl	100576bc <llc_conn_guard_time_for_close_conn_event>
1005bb28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005bb2a:	46c0      	nop			@ (mov r8, r8)

1005bb2c <__arm_cp.20_0>:
1005bb2c:	fffffe88 	.word	0xfffffe88

1005bb30 <__arm_cp.20_1>:
1005bb30:	0007ffb5 	.word	0x0007ffb5

1005bb34 <LL_version_exchange>:
1005bb34:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bb36:	b087      	sub	sp, #28
1005bb38:	461f      	mov	r7, r3
1005bb3a:	4616      	mov	r6, r2
1005bb3c:	460c      	mov	r4, r1
1005bb3e:	4605      	mov	r5, r0
1005bb40:	f7fd f9ab 	bl	10058e9a <LL_cpe_get_cntxt>
1005bb44:	9004      	str	r0, [sp, #16]
1005bb46:	4628      	mov	r0, r5
1005bb48:	f7fb faee 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005bb4c:	22ff      	movs	r2, #255	@ 0xff
1005bb4e:	2e06      	cmp	r6, #6
1005bb50:	d900      	bls.n	1005bb54 <LL_version_exchange+0x20>
1005bb52:	e0b2      	b.n	1005bcba <LL_version_exchange+0x186>
1005bb54:	4603      	mov	r3, r0
1005bb56:	46c0      	nop			@ (mov r8, r8)
1005bb58:	447e      	add	r6, pc
1005bb5a:	7936      	ldrb	r6, [r6, #4]
1005bb5c:	0076      	lsls	r6, r6, #1
1005bb5e:	44b7      	add	pc, r6
1005bb60:	3aac0e03 	.word	0x3aac0e03
1005bb64:	0053acac 	.word	0x0053acac
1005bb68:	2c01      	cmp	r4, #1
1005bb6a:	d15c      	bne.n	1005bc26 <LL_version_exchange+0xf2>
1005bb6c:	208c      	movs	r0, #140	@ 0x8c
1005bb6e:	5818      	ldr	r0, [r3, r0]
1005bb70:	0601      	lsls	r1, r0, #24
1005bb72:	338c      	adds	r3, #140	@ 0x8c
1005bb74:	2900      	cmp	r1, #0
1005bb76:	9904      	ldr	r1, [sp, #16]
1005bb78:	d460      	bmi.n	1005bc3c <LL_version_exchange+0x108>
1005bb7a:	220c      	movs	r2, #12
1005bb7c:	e06c      	b.n	1005bc58 <LL_version_exchange+0x124>
1005bb7e:	9302      	str	r3, [sp, #8]
1005bb80:	9203      	str	r2, [sp, #12]
1005bb82:	4628      	mov	r0, r5
1005bb84:	f000 f8d4 	bl	1005bd30 <LL_conn_get_version_exchange_cached>
1005bb88:	2800      	cmp	r0, #0
1005bb8a:	d000      	beq.n	1005bb8e <LL_version_exchange+0x5a>
1005bb8c:	e094      	b.n	1005bcb8 <LL_version_exchange+0x184>
1005bb8e:	1cf8      	adds	r0, r7, #3
1005bb90:	2205      	movs	r2, #5
1005bb92:	9201      	str	r2, [sp, #4]
1005bb94:	9e04      	ldr	r6, [sp, #16]
1005bb96:	4631      	mov	r1, r6
1005bb98:	f004 f872 	bl	1005fc80 <char_copy>
1005bb9c:	9f02      	ldr	r7, [sp, #8]
1005bb9e:	4639      	mov	r1, r7
1005bba0:	313c      	adds	r1, #60	@ 0x3c
1005bba2:	4630      	mov	r0, r6
1005bba4:	9a01      	ldr	r2, [sp, #4]
1005bba6:	f004 f86b 	bl	1005fc80 <char_copy>
1005bbaa:	208c      	movs	r0, #140	@ 0x8c
1005bbac:	5838      	ldr	r0, [r7, r0]
1005bbae:	0642      	lsls	r2, r0, #25
1005bbb0:	4639      	mov	r1, r7
1005bbb2:	318c      	adds	r1, #140	@ 0x8c
1005bbb4:	2a00      	cmp	r2, #0
1005bbb6:	d46e      	bmi.n	1005bc96 <LL_version_exchange+0x162>
1005bbb8:	2201      	movs	r2, #1
1005bbba:	0212      	lsls	r2, r2, #8
1005bbbc:	4310      	orrs	r0, r2
1005bbbe:	6008      	str	r0, [r1, #0]
1005bbc0:	4628      	mov	r0, r5
1005bbc2:	4621      	mov	r1, r4
1005bbc4:	f7fd f95c 	bl	10058e80 <LL_cpe_set_prepare_tx_pdu>
1005bbc8:	2205      	movs	r2, #5
1005bbca:	2300      	movs	r3, #0
1005bbcc:	4628      	mov	r0, r5
1005bbce:	4621      	mov	r1, r4
1005bbd0:	f7fd f90d 	bl	10058dee <LL_cpe_set_active>
1005bbd4:	e070      	b.n	1005bcb8 <LL_version_exchange+0x184>
1005bbd6:	78b8      	ldrb	r0, [r7, #2]
1005bbd8:	280c      	cmp	r0, #12
1005bbda:	d16e      	bne.n	1005bcba <LL_version_exchange+0x186>
1005bbdc:	1cf8      	adds	r0, r7, #3
1005bbde:	2605      	movs	r6, #5
1005bbe0:	9f04      	ldr	r7, [sp, #16]
1005bbe2:	4639      	mov	r1, r7
1005bbe4:	9203      	str	r2, [sp, #12]
1005bbe6:	4632      	mov	r2, r6
1005bbe8:	9302      	str	r3, [sp, #8]
1005bbea:	f004 f849 	bl	1005fc80 <char_copy>
1005bbee:	4628      	mov	r0, r5
1005bbf0:	4621      	mov	r1, r4
1005bbf2:	4632      	mov	r2, r6
1005bbf4:	f7fd f912 	bl	10058e1c <LL_cpe_clr_active>
1005bbf8:	9802      	ldr	r0, [sp, #8]
1005bbfa:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005bbfc:	4639      	mov	r1, r7
1005bbfe:	f000 f86f 	bl	1005bce0 <hci_read_remote_version_information_complete_event_push>
1005bc02:	4628      	mov	r0, r5
1005bc04:	4639      	mov	r1, r7
1005bc06:	e055      	b.n	1005bcb4 <LL_version_exchange+0x180>
1005bc08:	4616      	mov	r6, r2
1005bc0a:	a806      	add	r0, sp, #24
1005bc0c:	2130      	movs	r1, #48	@ 0x30
1005bc0e:	8001      	strh	r1, [r0, #0]
1005bc10:	2c01      	cmp	r4, #1
1005bc12:	d12a      	bne.n	1005bc6a <LL_version_exchange+0x136>
1005bc14:	208c      	movs	r0, #140	@ 0x8c
1005bc16:	5818      	ldr	r0, [r3, r0]
1005bc18:	05c1      	lsls	r1, r0, #23
1005bc1a:	d421      	bmi.n	1005bc60 <LL_version_exchange+0x12c>
1005bc1c:	338c      	adds	r3, #140	@ 0x8c
1005bc1e:	2140      	movs	r1, #64	@ 0x40
1005bc20:	4308      	orrs	r0, r1
1005bc22:	6018      	str	r0, [r3, #0]
1005bc24:	e021      	b.n	1005bc6a <LL_version_exchange+0x136>
1005bc26:	4616      	mov	r6, r2
1005bc28:	2205      	movs	r2, #5
1005bc2a:	4628      	mov	r0, r5
1005bc2c:	4621      	mov	r1, r4
1005bc2e:	f7fd f8f5 	bl	10058e1c <LL_cpe_clr_active>
1005bc32:	4628      	mov	r0, r5
1005bc34:	9904      	ldr	r1, [sp, #16]
1005bc36:	f000 f843 	bl	1005bcc0 <LL_conn_version_exchange_set_cached>
1005bc3a:	e02a      	b.n	1005bc92 <LL_version_exchange+0x15e>
1005bc3c:	4628      	mov	r0, r5
1005bc3e:	461c      	mov	r4, r3
1005bc40:	f000 f83e 	bl	1005bcc0 <LL_conn_version_exchange_set_cached>
1005bc44:	2101      	movs	r1, #1
1005bc46:	2205      	movs	r2, #5
1005bc48:	4628      	mov	r0, r5
1005bc4a:	f7fd f8e7 	bl	10058e1c <LL_cpe_clr_active>
1005bc4e:	4623      	mov	r3, r4
1005bc50:	6820      	ldr	r0, [r4, #0]
1005bc52:	2180      	movs	r1, #128	@ 0x80
1005bc54:	4388      	bics	r0, r1
1005bc56:	22ff      	movs	r2, #255	@ 0xff
1005bc58:	2140      	movs	r1, #64	@ 0x40
1005bc5a:	4388      	bics	r0, r1
1005bc5c:	6018      	str	r0, [r3, #0]
1005bc5e:	e02c      	b.n	1005bcba <LL_version_exchange+0x186>
1005bc60:	2101      	movs	r1, #1
1005bc62:	2205      	movs	r2, #5
1005bc64:	4628      	mov	r0, r5
1005bc66:	f7fd f8d9 	bl	10058e1c <LL_cpe_clr_active>
1005bc6a:	200d      	movs	r0, #13
1005bc6c:	70f8      	strb	r0, [r7, #3]
1005bc6e:	200c      	movs	r0, #12
1005bc70:	70b8      	strb	r0, [r7, #2]
1005bc72:	2006      	movs	r0, #6
1005bc74:	7078      	strb	r0, [r7, #1]
1005bc76:	2503      	movs	r5, #3
1005bc78:	703d      	strb	r5, [r7, #0]
1005bc7a:	1d39      	adds	r1, r7, #4
1005bc7c:	a806      	add	r0, sp, #24
1005bc7e:	2402      	movs	r4, #2
1005bc80:	4622      	mov	r2, r4
1005bc82:	f003 fffd 	bl	1005fc80 <char_copy>
1005bc86:	a805      	add	r0, sp, #20
1005bc88:	8005      	strh	r5, [r0, #0]
1005bc8a:	1db9      	adds	r1, r7, #6
1005bc8c:	4622      	mov	r2, r4
1005bc8e:	f003 fff7 	bl	1005fc80 <char_copy>
1005bc92:	4632      	mov	r2, r6
1005bc94:	e011      	b.n	1005bcba <LL_version_exchange+0x186>
1005bc96:	2280      	movs	r2, #128	@ 0x80
1005bc98:	4310      	orrs	r0, r2
1005bc9a:	6008      	str	r0, [r1, #0]
1005bc9c:	2205      	movs	r2, #5
1005bc9e:	4628      	mov	r0, r5
1005bca0:	4621      	mov	r1, r4
1005bca2:	463c      	mov	r4, r7
1005bca4:	f7fd f8ba 	bl	10058e1c <LL_cpe_clr_active>
1005bca8:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005bcaa:	4631      	mov	r1, r6
1005bcac:	f000 f818 	bl	1005bce0 <hci_read_remote_version_information_complete_event_push>
1005bcb0:	4628      	mov	r0, r5
1005bcb2:	4631      	mov	r1, r6
1005bcb4:	f000 f804 	bl	1005bcc0 <LL_conn_version_exchange_set_cached>
1005bcb8:	9a03      	ldr	r2, [sp, #12]
1005bcba:	4610      	mov	r0, r2
1005bcbc:	b007      	add	sp, #28
1005bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005bcc0 <LL_conn_version_exchange_set_cached>:
1005bcc0:	b510      	push	{r4, lr}
1005bcc2:	460c      	mov	r4, r1
1005bcc4:	f7fb fa30 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005bcc8:	4601      	mov	r1, r0
1005bcca:	208c      	movs	r0, #140	@ 0x8c
1005bccc:	580a      	ldr	r2, [r1, r0]
1005bcce:	2308      	movs	r3, #8
1005bcd0:	4313      	orrs	r3, r2
1005bcd2:	500b      	str	r3, [r1, r0]
1005bcd4:	313c      	adds	r1, #60	@ 0x3c
1005bcd6:	2205      	movs	r2, #5
1005bcd8:	4620      	mov	r0, r4
1005bcda:	f003 ffd1 	bl	1005fc80 <char_copy>
1005bcde:	bd10      	pop	{r4, pc}

1005bce0 <hci_read_remote_version_information_complete_event_push>:
1005bce0:	b570      	push	{r4, r5, r6, lr}
1005bce2:	460c      	mov	r4, r1
1005bce4:	4605      	mov	r5, r0
1005bce6:	4810      	ldr	r0, [pc, #64]	@ (1005bd28 <__arm_cp.2_0>)
1005bce8:	6800      	ldr	r0, [r0, #0]
1005bcea:	2137      	movs	r1, #55	@ 0x37
1005bcec:	5c40      	ldrb	r0, [r0, r1]
1005bcee:	0700      	lsls	r0, r0, #28
1005bcf0:	d519      	bpl.n	1005bd26 <hci_read_remote_version_information_complete_event_push+0x46>
1005bcf2:	480e      	ldr	r0, [pc, #56]	@ (1005bd2c <__arm_cp.2_1>)
1005bcf4:	6800      	ldr	r0, [r0, #0]
1005bcf6:	6980      	ldr	r0, [r0, #24]
1005bcf8:	2102      	movs	r1, #2
1005bcfa:	2221      	movs	r2, #33	@ 0x21
1005bcfc:	2303      	movs	r3, #3
1005bcfe:	f7f6 faed 	bl	100522dc <aci_event_fifo_push_header>
1005bd02:	2800      	cmp	r0, #0
1005bd04:	d00f      	beq.n	1005bd26 <hci_read_remote_version_information_complete_event_push+0x46>
1005bd06:	4606      	mov	r6, r0
1005bd08:	1d00      	adds	r0, r0, #4
1005bd0a:	4629      	mov	r1, r5
1005bd0c:	4622      	mov	r2, r4
1005bd0e:	f7f6 fe07 	bl	10052920 <hci_read_remote_version_information_complete_event_copy>
1005bd12:	2008      	movs	r0, #8
1005bd14:	71b0      	strb	r0, [r6, #6]
1005bd16:	200c      	movs	r0, #12
1005bd18:	7170      	strb	r0, [r6, #5]
1005bd1a:	2004      	movs	r0, #4
1005bd1c:	7130      	strb	r0, [r6, #4]
1005bd1e:	2002      	movs	r0, #2
1005bd20:	4631      	mov	r1, r6
1005bd22:	f7f6 fb78 	bl	10052416 <aci_event_fifo_push>
1005bd26:	bd70      	pop	{r4, r5, r6, pc}

1005bd28 <__arm_cp.2_0>:
1005bd28:	20000f20 	.word	0x20000f20

1005bd2c <__arm_cp.2_1>:
1005bd2c:	20000ed0 	.word	0x20000ed0

1005bd30 <LL_conn_get_version_exchange_cached>:
1005bd30:	b580      	push	{r7, lr}
1005bd32:	f7fb f9f9 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005bd36:	218c      	movs	r1, #140	@ 0x8c
1005bd38:	5840      	ldr	r0, [r0, r1]
1005bd3a:	0700      	lsls	r0, r0, #28
1005bd3c:	0fc0      	lsrs	r0, r0, #31
1005bd3e:	bd80      	pop	{r7, pc}

1005bd40 <llc_cte_get_ctxt>:
1005bd40:	4802      	ldr	r0, [pc, #8]	@ (1005bd4c <__arm_cp.2_0>)
1005bd42:	6800      	ldr	r0, [r0, #0]
1005bd44:	219c      	movs	r1, #156	@ 0x9c
1005bd46:	5840      	ldr	r0, [r0, r1]
1005bd48:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005bd4a:	4770      	bx	lr

1005bd4c <__arm_cp.2_0>:
1005bd4c:	20000f20 	.word	0x20000f20

1005bd50 <llc_cte_init_ucfg_weak>:
1005bd50:	4770      	bx	lr

1005bd52 <llc_cte_mem_allocate_ucfg_weak>:
1005bd52:	4770      	bx	lr

1005bd54 <llc_cte_timer_error_ucfg_weak>:
1005bd54:	4770      	bx	lr

1005bd56 <llc_cte_timer_stop_ucfg_weak>:
1005bd56:	2000      	movs	r0, #0
1005bd58:	4770      	bx	lr
	...

1005bd5c <LL_dtm_init>:
1005bd5c:	b5b0      	push	{r4, r5, r7, lr}
1005bd5e:	480e      	ldr	r0, [pc, #56]	@ (1005bd98 <__arm_cp.0_0>)
1005bd60:	6800      	ldr	r0, [r0, #0]
1005bd62:	21ac      	movs	r1, #172	@ 0xac
1005bd64:	5844      	ldr	r4, [r0, r1]
1005bd66:	20ff      	movs	r0, #255	@ 0xff
1005bd68:	77a0      	strb	r0, [r4, #30]
1005bd6a:	2500      	movs	r5, #0
1005bd6c:	77e5      	strb	r5, [r4, #31]
1005bd6e:	f7fa fca9 	bl	100566c4 <cte_csr_ucfg_weak>
1005bd72:	2801      	cmp	r0, #1
1005bd74:	d10f      	bne.n	1005bd96 <LL_dtm_init+0x3a>
1005bd76:	f7ff ffe3 	bl	1005bd40 <llc_cte_get_ctxt>
1005bd7a:	2224      	movs	r2, #36	@ 0x24
1005bd7c:	4907      	ldr	r1, [pc, #28]	@ (1005bd9c <__arm_cp.0_1>)
1005bd7e:	5c8a      	ldrb	r2, [r1, r2]
1005bd80:	2a00      	cmp	r2, #0
1005bd82:	462a      	mov	r2, r5
1005bd84:	d000      	beq.n	1005bd88 <LL_dtm_init+0x2c>
1005bd86:	6802      	ldr	r2, [r0, #0]
1005bd88:	62a2      	str	r2, [r4, #40]	@ 0x28
1005bd8a:	2223      	movs	r2, #35	@ 0x23
1005bd8c:	5c89      	ldrb	r1, [r1, r2]
1005bd8e:	2900      	cmp	r1, #0
1005bd90:	d000      	beq.n	1005bd94 <LL_dtm_init+0x38>
1005bd92:	6845      	ldr	r5, [r0, #4]
1005bd94:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005bd96:	bdb0      	pop	{r4, r5, r7, pc}

1005bd98 <__arm_cp.0_0>:
1005bd98:	20000f20 	.word	0x20000f20

1005bd9c <__arm_cp.0_1>:
1005bd9c:	20000f34 	.word	0x20000f34

1005bda0 <LL_eadv_switchbackupdata_data_struc>:
1005bda0:	b510      	push	{r4, lr}
1005bda2:	7c01      	ldrb	r1, [r0, #16]
1005bda4:	2902      	cmp	r1, #2
1005bda6:	d109      	bne.n	1005bdbc <LL_eadv_switchbackupdata_data_struc+0x1c>
1005bda8:	2401      	movs	r4, #1
1005bdaa:	7404      	strb	r4, [r0, #16]
1005bdac:	6801      	ldr	r1, [r0, #0]
1005bdae:	6882      	ldr	r2, [r0, #8]
1005bdb0:	68c3      	ldr	r3, [r0, #12]
1005bdb2:	c00c      	stmia	r0!, {r2, r3}
1005bdb4:	20a1      	movs	r0, #161	@ 0xa1
1005bdb6:	f005 fa0b 	bl	100611d0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005bdba:	e000      	b.n	1005bdbe <LL_eadv_switchbackupdata_data_struc+0x1e>
1005bdbc:	2400      	movs	r4, #0
1005bdbe:	4620      	mov	r0, r4
1005bdc0:	bd10      	pop	{r4, pc}

1005bdc2 <LL_eadv_Blue_Tx>:
1005bdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bdc4:	461e      	mov	r6, r3
1005bdc6:	4617      	mov	r7, r2
1005bdc8:	460d      	mov	r5, r1
1005bdca:	4604      	mov	r4, r0
1005bdcc:	f7f4 feac 	bl	10050b28 <BLEPLAT_CNTR_PacketInitTo0>
1005bdd0:	4620      	mov	r0, r4
1005bdd2:	f7f4 feb7 	bl	10050b44 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005bdd6:	4620      	mov	r0, r4
1005bdd8:	f7f4 ff33 	bl	10050c42 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005bddc:	4620      	mov	r0, r4
1005bdde:	4621      	mov	r1, r4
1005bde0:	f7f4 ff3c 	bl	10050c5c <BLEPLAT_CNTR_PacketSetNextPtr>
1005bde4:	4620      	mov	r0, r4
1005bde6:	4639      	mov	r1, r7
1005bde8:	f7f4 fed3 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
1005bdec:	4620      	mov	r0, r4
1005bdee:	4631      	mov	r1, r6
1005bdf0:	f7f4 ff8e 	bl	10050d10 <BLEPLAT_CNTR_PacketSetTimeout>
1005bdf4:	9f06      	ldr	r7, [sp, #24]
1005bdf6:	2e00      	cmp	r6, #0
1005bdf8:	d002      	beq.n	1005be00 <LL_eadv_Blue_Tx+0x3e>
1005bdfa:	4620      	mov	r0, r4
1005bdfc:	f7f4 ff97 	bl	10050d2e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005be00:	4620      	mov	r0, r4
1005be02:	f7f4 fe6b 	bl	10050adc <BLEPLAT_CNTR_PacketClrIncChan>
1005be06:	4620      	mov	r0, r4
1005be08:	f7f4 feea 	bl	10050be0 <BLEPLAT_CNTR_PacketSetIntDone>
1005be0c:	4620      	mov	r0, r4
1005be0e:	f7f4 ffb4 	bl	10050d7a <BLEPLAT_CNTR_PacketSetTxReady>
1005be12:	4620      	mov	r0, r4
1005be14:	2f81      	cmp	r7, #129	@ 0x81
1005be16:	d109      	bne.n	1005be2c <LL_eadv_Blue_Tx+0x6a>
1005be18:	4629      	mov	r1, r5
1005be1a:	f7f4 ff3b 	bl	10050c94 <BLEPLAT_CNTR_PacketSetNextSlot>
1005be1e:	4620      	mov	r0, r4
1005be20:	f7f4 ff5c 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
1005be24:	4620      	mov	r0, r4
1005be26:	f7f4 ff8e 	bl	10050d46 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005be2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005be2c:	f7f4 ff98 	bl	10050d60 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005be30:	4620      	mov	r0, r4
1005be32:	f7f4 ff22 	bl	10050c7a <BLEPLAT_CNTR_PacketSetNextRxMode>
1005be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005be38 <LL_eadv_Blue_Rx>:
1005be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005be3a:	461e      	mov	r6, r3
1005be3c:	4617      	mov	r7, r2
1005be3e:	460d      	mov	r5, r1
1005be40:	4604      	mov	r4, r0
1005be42:	f7f4 fe71 	bl	10050b28 <BLEPLAT_CNTR_PacketInitTo0>
1005be46:	4620      	mov	r0, r4
1005be48:	f7f4 fe7c 	bl	10050b44 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005be4c:	4620      	mov	r0, r4
1005be4e:	f7f4 fef8 	bl	10050c42 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005be52:	4620      	mov	r0, r4
1005be54:	4621      	mov	r1, r4
1005be56:	f7f4 ff01 	bl	10050c5c <BLEPLAT_CNTR_PacketSetNextPtr>
1005be5a:	4620      	mov	r0, r4
1005be5c:	4639      	mov	r1, r7
1005be5e:	f7f4 fe98 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
1005be62:	4620      	mov	r0, r4
1005be64:	4631      	mov	r1, r6
1005be66:	f7f4 ff53 	bl	10050d10 <BLEPLAT_CNTR_PacketSetTimeout>
1005be6a:	9f07      	ldr	r7, [sp, #28]
1005be6c:	2e00      	cmp	r6, #0
1005be6e:	d002      	beq.n	1005be76 <LL_eadv_Blue_Rx+0x3e>
1005be70:	4620      	mov	r0, r4
1005be72:	f7f4 ff5c 	bl	10050d2e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005be76:	4620      	mov	r0, r4
1005be78:	f7f4 ff17 	bl	10050caa <BLEPLAT_CNTR_PacketSetNextTxMode>
1005be7c:	4620      	mov	r0, r4
1005be7e:	f7f4 fe2d 	bl	10050adc <BLEPLAT_CNTR_PacketClrIncChan>
1005be82:	4620      	mov	r0, r4
1005be84:	f7f4 feac 	bl	10050be0 <BLEPLAT_CNTR_PacketSetIntDone>
1005be88:	4620      	mov	r0, r4
1005be8a:	f7f4 ff69 	bl	10050d60 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005be8e:	4620      	mov	r0, r4
1005be90:	f7f4 feb2 	bl	10050bf8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005be94:	4620      	mov	r0, r4
1005be96:	f7f4 ff2e 	bl	10050cf6 <BLEPLAT_CNTR_PacketSetRxReady>
1005be9a:	2f81      	cmp	r7, #129	@ 0x81
1005be9c:	d107      	bne.n	1005beae <LL_eadv_Blue_Rx+0x76>
1005be9e:	4620      	mov	r0, r4
1005bea0:	4629      	mov	r1, r5
1005bea2:	f7f4 fef7 	bl	10050c94 <BLEPLAT_CNTR_PacketSetNextSlot>
1005bea6:	4620      	mov	r0, r4
1005bea8:	f7f4 fe24 	bl	10050af4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005beae:	4620      	mov	r0, r4
1005beb0:	f7f4 ff14 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
1005beb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005beb8 <LL_eadv_BLUE_SM>:
1005beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005beba:	461d      	mov	r5, r3
1005bebc:	4616      	mov	r6, r2
1005bebe:	460f      	mov	r7, r1
1005bec0:	4604      	mov	r4, r0
1005bec2:	f7f5 f8d7 	bl	10051074 <BLEPLAT_CNTR_SmInitTo0>
1005bec6:	4911      	ldr	r1, [pc, #68]	@ (1005bf0c <__arm_cp.10_0>)
1005bec8:	4620      	mov	r0, r4
1005beca:	f7f5 f8f1 	bl	100510b0 <BLEPLAT_CNTR_SmSetAccessAddr>
1005bece:	4910      	ldr	r1, [pc, #64]	@ (1005bf10 <__arm_cp.10_1>)
1005bed0:	4620      	mov	r0, r4
1005bed2:	f7f5 f930 	bl	10051136 <BLEPLAT_CNTR_SmSetCrcInit>
1005bed6:	4620      	mov	r0, r4
1005bed8:	4639      	mov	r1, r7
1005beda:	f7f5 fa5d 	bl	10051398 <BLEPLAT_CNTR_SmSetTxPwr>
1005bede:	4620      	mov	r0, r4
1005bee0:	4631      	mov	r1, r6
1005bee2:	f7f5 fa32 	bl	1005134a <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005bee6:	4620      	mov	r0, r4
1005bee8:	4629      	mov	r1, r5
1005beea:	f7f5 f9c2 	bl	10051272 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005beee:	9806      	ldr	r0, [sp, #24]
1005bef0:	2881      	cmp	r0, #129	@ 0x81
1005bef2:	d103      	bne.n	1005befc <LL_eadv_BLUE_SM+0x44>
1005bef4:	4620      	mov	r0, r4
1005bef6:	f7f5 fa19 	bl	1005132c <BLEPLAT_CNTR_SmSetTxMode>
1005befa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005befc:	4620      	mov	r0, r4
1005befe:	f7f5 f9a9 	bl	10051254 <BLEPLAT_CNTR_SmSetRxMode>
1005bf02:	2101      	movs	r1, #1
1005bf04:	4620      	mov	r0, r4
1005bf06:	f7f5 f93d 	bl	10051184 <BLEPLAT_CNTR_SmSetHopIncr>
1005bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bf0c <__arm_cp.10_0>:
1005bf0c:	8e89bed6 	.word	0x8e89bed6

1005bf10 <__arm_cp.10_1>:
1005bf10:	00555555 	.word	0x00555555

1005bf14 <llc_get_advertising_set_index>:
1005bf14:	b570      	push	{r4, r5, r6, lr}
1005bf16:	4604      	mov	r4, r0
1005bf18:	f001 fa94 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005bf1c:	214d      	movs	r1, #77	@ 0x4d
1005bf1e:	5c41      	ldrb	r1, [r0, r1]
1005bf20:	4d09      	ldr	r5, [pc, #36]	@ (1005bf48 <__arm_cp.12_0>)
1005bf22:	2200      	movs	r2, #0
1005bf24:	23be      	movs	r3, #190	@ 0xbe
1005bf26:	4291      	cmp	r1, r2
1005bf28:	d00b      	beq.n	1005bf42 <llc_get_advertising_set_index+0x2e>
1005bf2a:	6806      	ldr	r6, [r0, #0]
1005bf2c:	5af6      	ldrh	r6, [r6, r3]
1005bf2e:	42a6      	cmp	r6, r4
1005bf30:	4616      	mov	r6, r2
1005bf32:	d000      	beq.n	1005bf36 <llc_get_advertising_set_index+0x22>
1005bf34:	462e      	mov	r6, r5
1005bf36:	2501      	movs	r5, #1
1005bf38:	022d      	lsls	r5, r5, #8
1005bf3a:	195b      	adds	r3, r3, r5
1005bf3c:	1c52      	adds	r2, r2, #1
1005bf3e:	4635      	mov	r5, r6
1005bf40:	e7f1      	b.n	1005bf26 <llc_get_advertising_set_index+0x12>
1005bf42:	b2a8      	uxth	r0, r5
1005bf44:	bd70      	pop	{r4, r5, r6, pc}
1005bf46:	46c0      	nop			@ (mov r8, r8)

1005bf48 <__arm_cp.12_0>:
1005bf48:	0000ffff 	.word	0x0000ffff

1005bf4c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bf4e:	4604      	mov	r4, r0
1005bf50:	f001 fa78 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005bf54:	4601      	mov	r1, r0
1005bf56:	204d      	movs	r0, #77	@ 0x4d
1005bf58:	5c08      	ldrb	r0, [r1, r0]
1005bf5a:	0202      	lsls	r2, r0, #8
1005bf5c:	2000      	movs	r0, #0
1005bf5e:	4b0d      	ldr	r3, [pc, #52]	@ (1005bf94 <__arm_cp.17_0>)
1005bf60:	4605      	mov	r5, r0
1005bf62:	42aa      	cmp	r2, r5
1005bf64:	d013      	beq.n	1005bf8e <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005bf66:	680e      	ldr	r6, [r1, #0]
1005bf68:	1976      	adds	r6, r6, r5
1005bf6a:	27be      	movs	r7, #190	@ 0xbe
1005bf6c:	5bf7      	ldrh	r7, [r6, r7]
1005bf6e:	429f      	cmp	r7, r3
1005bf70:	d003      	beq.n	1005bf7a <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005bf72:	27ce      	movs	r7, #206	@ 0xce
1005bf74:	5df7      	ldrb	r7, [r6, r7]
1005bf76:	2f01      	cmp	r7, #1
1005bf78:	d003      	beq.n	1005bf82 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005bf7a:	2601      	movs	r6, #1
1005bf7c:	0236      	lsls	r6, r6, #8
1005bf7e:	19ad      	adds	r5, r5, r6
1005bf80:	e7ef      	b.n	1005bf62 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005bf82:	2c00      	cmp	r4, #0
1005bf84:	d004      	beq.n	1005bf90 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005bf86:	20c3      	movs	r0, #195	@ 0xc3
1005bf88:	5c30      	ldrb	r0, [r6, r0]
1005bf8a:	1e41      	subs	r1, r0, #1
1005bf8c:	4188      	sbcs	r0, r1
1005bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005bf90:	2001      	movs	r0, #1
1005bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bf94 <__arm_cp.17_0>:
1005bf94:	0000ffff 	.word	0x0000ffff

1005bf98 <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005bf98:	b5b0      	push	{r4, r5, r7, lr}
1005bf9a:	4604      	mov	r4, r0
1005bf9c:	20d6      	movs	r0, #214	@ 0xd6
1005bf9e:	5c20      	ldrb	r0, [r4, r0]
1005bfa0:	0780      	lsls	r0, r0, #30
1005bfa2:	d401      	bmi.n	1005bfa8 <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005bfa4:	2000      	movs	r0, #0
1005bfa6:	bdb0      	pop	{r4, r5, r7, pc}
1005bfa8:	4625      	mov	r5, r4
1005bfaa:	3584      	adds	r5, #132	@ 0x84
1005bfac:	4628      	mov	r0, r5
1005bfae:	f7fc fe42 	bl	10058c36 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005bfb2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005bfb4:	4628      	mov	r0, r5
1005bfb6:	f7fc fe36 	bl	10058c26 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005bfba:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005bfbc:	3008      	adds	r0, #8
1005bfbe:	2100      	movs	r1, #0
1005bfc0:	f7fc fe2f 	bl	10058c22 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005bfc4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005bfc6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005bfc8:	6761      	str	r1, [r4, #116]	@ 0x74
1005bfca:	67a0      	str	r0, [r4, #120]	@ 0x78
1005bfcc:	2001      	movs	r0, #1
1005bfce:	bdb0      	pop	{r4, r5, r7, pc}

1005bfd0 <EADV_init>:
1005bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bfd2:	b085      	sub	sp, #20
1005bfd4:	9204      	str	r2, [sp, #16]
1005bfd6:	460e      	mov	r6, r1
1005bfd8:	4605      	mov	r5, r0
1005bfda:	244d      	movs	r4, #77	@ 0x4d
1005bfdc:	f001 fa32 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005bfe0:	5505      	strb	r5, [r0, r4]
1005bfe2:	6006      	str	r6, [r0, #0]
1005bfe4:	9003      	str	r0, [sp, #12]
1005bfe6:	304d      	adds	r0, #77	@ 0x4d
1005bfe8:	2101      	movs	r1, #1
1005bfea:	9002      	str	r0, [sp, #8]
1005bfec:	7041      	strb	r1, [r0, #1]
1005bfee:	9101      	str	r1, [sp, #4]
1005bff0:	04cb      	lsls	r3, r1, #19
1005bff2:	2600      	movs	r6, #0
1005bff4:	277c      	movs	r7, #124	@ 0x7c
1005bff6:	9a04      	ldr	r2, [sp, #16]
1005bff8:	b2e8      	uxtb	r0, r5
1005bffa:	4286      	cmp	r6, r0
1005bffc:	d226      	bcs.n	1005c04c <EADV_init+0x7c>
1005bffe:	9803      	ldr	r0, [sp, #12]
1005c000:	6800      	ldr	r0, [r0, #0]
1005c002:	51c3      	str	r3, [r0, r7]
1005c004:	19c5      	adds	r5, r0, r7
1005c006:	2054      	movs	r0, #84	@ 0x54
1005c008:	4911      	ldr	r1, [pc, #68]	@ (1005c050 <__arm_cp.19_0>)
1005c00a:	5229      	strh	r1, [r5, r0]
1005c00c:	2452      	movs	r4, #82	@ 0x52
1005c00e:	2000      	movs	r0, #0
1005c010:	5328      	strh	r0, [r5, r4]
1005c012:	2442      	movs	r4, #66	@ 0x42
1005c014:	5329      	strh	r1, [r5, r4]
1005c016:	245e      	movs	r4, #94	@ 0x5e
1005c018:	5528      	strb	r0, [r5, r4]
1005c01a:	245c      	movs	r4, #92	@ 0x5c
1005c01c:	21ff      	movs	r1, #255	@ 0xff
1005c01e:	5529      	strb	r1, [r5, r4]
1005c020:	215a      	movs	r1, #90	@ 0x5a
1005c022:	5468      	strb	r0, [r5, r1]
1005c024:	2146      	movs	r1, #70	@ 0x46
1005c026:	2407      	movs	r4, #7
1005c028:	526c      	strh	r4, [r5, r1]
1005c02a:	6128      	str	r0, [r5, #16]
1005c02c:	6168      	str	r0, [r5, #20]
1005c02e:	606b      	str	r3, [r5, #4]
1005c030:	9904      	ldr	r1, [sp, #16]
1005c032:	2900      	cmp	r1, #0
1005c034:	d002      	beq.n	1005c03c <EADV_init+0x6c>
1005c036:	6550      	str	r0, [r2, #84]	@ 0x54
1005c038:	3d2c      	subs	r5, #44	@ 0x2c
1005c03a:	602a      	str	r2, [r5, #0]
1005c03c:	9801      	ldr	r0, [sp, #4]
1005c03e:	0200      	lsls	r0, r0, #8
1005c040:	183f      	adds	r7, r7, r0
1005c042:	325c      	adds	r2, #92	@ 0x5c
1005c044:	9802      	ldr	r0, [sp, #8]
1005c046:	7805      	ldrb	r5, [r0, #0]
1005c048:	1c76      	adds	r6, r6, #1
1005c04a:	e7d5      	b.n	1005bff8 <EADV_init+0x28>
1005c04c:	b005      	add	sp, #20
1005c04e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c050 <__arm_cp.19_0>:
1005c050:	0000ffff 	.word	0x0000ffff

1005c054 <LL_LE_Set_Advertising_Parameters>:
1005c054:	b570      	push	{r4, r5, r6, lr}
1005c056:	4604      	mov	r4, r0
1005c058:	f001 f9f4 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005c05c:	4605      	mov	r5, r0
1005c05e:	4e30      	ldr	r6, [pc, #192]	@ (1005c120 <__arm_cp.20_0>)
1005c060:	4630      	mov	r0, r6
1005c062:	f7ff ff57 	bl	1005bf14 <llc_get_advertising_set_index>
1005c066:	492f      	ldr	r1, [pc, #188]	@ (1005c124 <__arm_cp.20_1>)
1005c068:	4288      	cmp	r0, r1
1005c06a:	d112      	bne.n	1005c092 <LL_LE_Set_Advertising_Parameters+0x3e>
1005c06c:	f000 f860 	bl	1005c130 <LL_Context_ReturnFree>
1005c070:	28ff      	cmp	r0, #255	@ 0xff
1005c072:	d034      	beq.n	1005c0de <LL_LE_Set_Advertising_Parameters+0x8a>
1005c074:	0200      	lsls	r0, r0, #8
1005c076:	6829      	ldr	r1, [r5, #0]
1005c078:	1808      	adds	r0, r1, r0
1005c07a:	21be      	movs	r1, #190	@ 0xbe
1005c07c:	5246      	strh	r6, [r0, r1]
1005c07e:	214c      	movs	r1, #76	@ 0x4c
1005c080:	2200      	movs	r2, #0
1005c082:	5442      	strb	r2, [r0, r1]
1005c084:	2138      	movs	r1, #56	@ 0x38
1005c086:	5442      	strb	r2, [r0, r1]
1005c088:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005c08a:	6402      	str	r2, [r0, #64]	@ 0x40
1005c08c:	6282      	str	r2, [r0, #40]	@ 0x28
1005c08e:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005c090:	e008      	b.n	1005c0a4 <LL_LE_Set_Advertising_Parameters+0x50>
1005c092:	0200      	lsls	r0, r0, #8
1005c094:	6829      	ldr	r1, [r5, #0]
1005c096:	1808      	adds	r0, r1, r0
1005c098:	21ce      	movs	r1, #206	@ 0xce
1005c09a:	5c41      	ldrb	r1, [r0, r1]
1005c09c:	2901      	cmp	r1, #1
1005c09e:	d101      	bne.n	1005c0a4 <LL_LE_Set_Advertising_Parameters+0x50>
1005c0a0:	250c      	movs	r5, #12
1005c0a2:	e03a      	b.n	1005c11a <LL_LE_Set_Advertising_Parameters+0xc6>
1005c0a4:	7961      	ldrb	r1, [r4, #5]
1005c0a6:	22c2      	movs	r2, #194	@ 0xc2
1005c0a8:	5481      	strb	r1, [r0, r2]
1005c0aa:	4606      	mov	r6, r0
1005c0ac:	36c2      	adds	r6, #194	@ 0xc2
1005c0ae:	2500      	movs	r5, #0
1005c0b0:	72f5      	strb	r5, [r6, #11]
1005c0b2:	2101      	movs	r1, #1
1005c0b4:	70f1      	strb	r1, [r6, #3]
1005c0b6:	79a1      	ldrb	r1, [r4, #6]
1005c0b8:	7071      	strb	r1, [r6, #1]
1005c0ba:	8821      	ldrh	r1, [r4, #0]
1005c0bc:	0209      	lsls	r1, r1, #8
1005c0be:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005c0c0:	4601      	mov	r1, r0
1005c0c2:	3184      	adds	r1, #132	@ 0x84
1005c0c4:	7922      	ldrb	r2, [r4, #4]
1005c0c6:	2a04      	cmp	r2, #4
1005c0c8:	d815      	bhi.n	1005c0f6 <LL_LE_Set_Advertising_Parameters+0xa2>
1005c0ca:	46c0      	nop			@ (mov r8, r8)
1005c0cc:	447a      	add	r2, pc
1005c0ce:	7912      	ldrb	r2, [r2, #4]
1005c0d0:	0052      	lsls	r2, r2, #1
1005c0d2:	4497      	add	pc, r2
1005c0d4:	0c0a0602 	.word	0x0c0a0602
1005c0d8:	000e      	.short	0x000e
1005c0da:	20f3      	movs	r0, #243	@ 0xf3
1005c0dc:	e00a      	b.n	1005c0f4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005c0de:	2507      	movs	r5, #7
1005c0e0:	e01b      	b.n	1005c11a <LL_LE_Set_Advertising_Parameters+0xc6>
1005c0e2:	4a11      	ldr	r2, [pc, #68]	@ (1005c128 <__arm_cp.20_2>)
1005c0e4:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005c0e6:	20fd      	movs	r0, #253	@ 0xfd
1005c0e8:	e004      	b.n	1005c0f4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005c0ea:	20f2      	movs	r0, #242	@ 0xf2
1005c0ec:	e002      	b.n	1005c0f4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005c0ee:	20f0      	movs	r0, #240	@ 0xf0
1005c0f0:	e000      	b.n	1005c0f4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005c0f2:	20f5      	movs	r0, #245	@ 0xf5
1005c0f4:	8688      	strh	r0, [r1, #52]	@ 0x34
1005c0f6:	7a20      	ldrb	r0, [r4, #8]
1005c0f8:	79e2      	ldrb	r2, [r4, #7]
1005c0fa:	600d      	str	r5, [r1, #0]
1005c0fc:	604d      	str	r5, [r1, #4]
1005c0fe:	7532      	strb	r2, [r6, #20]
1005c100:	7570      	strb	r0, [r6, #21]
1005c102:	7a20      	ldrb	r0, [r4, #8]
1005c104:	7008      	strb	r0, [r1, #0]
1005c106:	1c48      	adds	r0, r1, #1
1005c108:	3409      	adds	r4, #9
1005c10a:	2206      	movs	r2, #6
1005c10c:	4621      	mov	r1, r4
1005c10e:	f7f3 fb99 	bl	1004f844 <BLEPLAT_MemCpy>
1005c112:	4806      	ldr	r0, [pc, #24]	@ (1005c12c <__arm_cp.20_3>)
1005c114:	6800      	ldr	r0, [r0, #0]
1005c116:	7a40      	ldrb	r0, [r0, #9]
1005c118:	70b0      	strb	r0, [r6, #2]
1005c11a:	4628      	mov	r0, r5
1005c11c:	bd70      	pop	{r4, r5, r6, pc}
1005c11e:	46c0      	nop			@ (mov r8, r8)

1005c120 <__arm_cp.20_0>:
1005c120:	0000fffc 	.word	0x0000fffc

1005c124 <__arm_cp.20_1>:
1005c124:	0000ffff 	.word	0x0000ffff

1005c128 <__arm_cp.20_2>:
1005c128:	000005dc 	.word	0x000005dc

1005c12c <__arm_cp.20_3>:
1005c12c:	20000f20 	.word	0x20000f20

1005c130 <LL_Context_ReturnFree>:
1005c130:	b510      	push	{r4, lr}
1005c132:	f001 f987 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005c136:	214d      	movs	r1, #77	@ 0x4d
1005c138:	5c42      	ldrb	r2, [r0, r1]
1005c13a:	2100      	movs	r1, #0
1005c13c:	23be      	movs	r3, #190	@ 0xbe
1005c13e:	428a      	cmp	r2, r1
1005c140:	d008      	beq.n	1005c154 <LL_Context_ReturnFree+0x24>
1005c142:	6804      	ldr	r4, [r0, #0]
1005c144:	5ae4      	ldrh	r4, [r4, r3]
1005c146:	0b24      	lsrs	r4, r4, #12
1005c148:	d105      	bne.n	1005c156 <LL_Context_ReturnFree+0x26>
1005c14a:	2401      	movs	r4, #1
1005c14c:	0224      	lsls	r4, r4, #8
1005c14e:	191b      	adds	r3, r3, r4
1005c150:	1c49      	adds	r1, r1, #1
1005c152:	e7f4      	b.n	1005c13e <LL_Context_ReturnFree+0xe>
1005c154:	21ff      	movs	r1, #255	@ 0xff
1005c156:	b2c8      	uxtb	r0, r1
1005c158:	bd10      	pop	{r4, pc}
	...

1005c15c <LL_LE_Set_Advertise_Enable>:
1005c15c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005c15e:	4604      	mov	r4, r0
1005c160:	f000 f816 	bl	1005c190 <LL_LE_Set_Advertising_Parameters_Default>
1005c164:	2300      	movs	r3, #0
1005c166:	9300      	str	r3, [sp, #0]
1005c168:	2101      	movs	r1, #1
1005c16a:	4d07      	ldr	r5, [pc, #28]	@ (1005c188 <__arm_cp.22_0>)
1005c16c:	4620      	mov	r0, r4
1005c16e:	462a      	mov	r2, r5
1005c170:	f000 f82c 	bl	1005c1cc <LL_Set_Extented_Advertising_Enable>
1005c174:	4604      	mov	r4, r0
1005c176:	4805      	ldr	r0, [pc, #20]	@ (1005c18c <__arm_cp.22_1>)
1005c178:	6801      	ldr	r1, [r0, #0]
1005c17a:	3156      	adds	r1, #86	@ 0x56
1005c17c:	4628      	mov	r0, r5
1005c17e:	f000 f98f 	bl	1005c4a0 <LL_Set_Extented_Advertising_Set_Random_Address>
1005c182:	4620      	mov	r0, r4
1005c184:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005c186:	46c0      	nop			@ (mov r8, r8)

1005c188 <__arm_cp.22_0>:
1005c188:	0000fffc 	.word	0x0000fffc

1005c18c <__arm_cp.22_1>:
1005c18c:	20000f20 	.word	0x20000f20

1005c190 <LL_LE_Set_Advertising_Parameters_Default>:
1005c190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005c192:	480c      	ldr	r0, [pc, #48]	@ (1005c1c4 <__arm_cp.23_0>)
1005c194:	f7ff febe 	bl	1005bf14 <llc_get_advertising_set_index>
1005c198:	490b      	ldr	r1, [pc, #44]	@ (1005c1c8 <__arm_cp.23_1>)
1005c19a:	4288      	cmp	r0, r1
1005c19c:	d110      	bne.n	1005c1c0 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005c19e:	466c      	mov	r4, sp
1005c1a0:	2100      	movs	r1, #0
1005c1a2:	7221      	strb	r1, [r4, #8]
1005c1a4:	2001      	movs	r0, #1
1005c1a6:	02c0      	lsls	r0, r0, #11
1005c1a8:	8020      	strh	r0, [r4, #0]
1005c1aa:	2007      	movs	r0, #7
1005c1ac:	0200      	lsls	r0, r0, #8
1005c1ae:	9001      	str	r0, [sp, #4]
1005c1b0:	4620      	mov	r0, r4
1005c1b2:	3009      	adds	r0, #9
1005c1b4:	2206      	movs	r2, #6
1005c1b6:	f7f3 fb55 	bl	1004f864 <BLEPLAT_MemSet>
1005c1ba:	4620      	mov	r0, r4
1005c1bc:	f7ff ff4a 	bl	1005c054 <LL_LE_Set_Advertising_Parameters>
1005c1c0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005c1c2:	46c0      	nop			@ (mov r8, r8)

1005c1c4 <__arm_cp.23_0>:
1005c1c4:	0000fffc 	.word	0x0000fffc

1005c1c8 <__arm_cp.23_1>:
1005c1c8:	0000ffff 	.word	0x0000ffff

1005c1cc <LL_Set_Extented_Advertising_Enable>:
1005c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c1ce:	b08f      	sub	sp, #60	@ 0x3c
1005c1d0:	930e      	str	r3, [sp, #56]	@ 0x38
1005c1d2:	4617      	mov	r7, r2
1005c1d4:	460d      	mov	r5, r1
1005c1d6:	4606      	mov	r6, r0
1005c1d8:	4305      	orrs	r5, r0
1005c1da:	f001 f933 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005c1de:	4604      	mov	r4, r0
1005c1e0:	2d00      	cmp	r5, #0
1005c1e2:	d007      	beq.n	1005c1f4 <LL_Set_Extented_Advertising_Enable+0x28>
1005c1e4:	4638      	mov	r0, r7
1005c1e6:	f7ff fe95 	bl	1005bf14 <llc_get_advertising_set_index>
1005c1ea:	49a7      	ldr	r1, [pc, #668]	@ (1005c488 <__arm_cp.24_1>)
1005c1ec:	4288      	cmp	r0, r1
1005c1ee:	d118      	bne.n	1005c222 <LL_Set_Extented_Advertising_Enable+0x56>
1005c1f0:	2042      	movs	r0, #66	@ 0x42
1005c1f2:	e04a      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c1f4:	4625      	mov	r5, r4
1005c1f6:	354d      	adds	r5, #77	@ 0x4d
1005c1f8:	2600      	movs	r6, #0
1005c1fa:	4637      	mov	r7, r6
1005c1fc:	960e      	str	r6, [sp, #56]	@ 0x38
1005c1fe:	7828      	ldrb	r0, [r5, #0]
1005c200:	4286      	cmp	r6, r0
1005c202:	d20c      	bcs.n	1005c21e <LL_Set_Extented_Advertising_Enable+0x52>
1005c204:	6820      	ldr	r0, [r4, #0]
1005c206:	19c0      	adds	r0, r0, r7
1005c208:	21ce      	movs	r1, #206	@ 0xce
1005c20a:	5c41      	ldrb	r1, [r0, r1]
1005c20c:	2901      	cmp	r1, #1
1005c20e:	d101      	bne.n	1005c214 <LL_Set_Extented_Advertising_Enable+0x48>
1005c210:	f000 f992 	bl	1005c538 <EADV_stop>
1005c214:	2001      	movs	r0, #1
1005c216:	0200      	lsls	r0, r0, #8
1005c218:	183f      	adds	r7, r7, r0
1005c21a:	1c76      	adds	r6, r6, #1
1005c21c:	e7ef      	b.n	1005c1fe <LL_Set_Extented_Advertising_Enable+0x32>
1005c21e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c220:	e033      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c222:	0201      	lsls	r1, r0, #8
1005c224:	6822      	ldr	r2, [r4, #0]
1005c226:	1854      	adds	r4, r2, r1
1005c228:	21ce      	movs	r1, #206	@ 0xce
1005c22a:	5c61      	ldrb	r1, [r4, r1]
1005c22c:	2e01      	cmp	r6, #1
1005c22e:	d124      	bne.n	1005c27a <LL_Set_Extented_Advertising_Enable+0xae>
1005c230:	0200      	lsls	r0, r0, #8
1005c232:	1815      	adds	r5, r2, r0
1005c234:	20d6      	movs	r0, #214	@ 0xd6
1005c236:	5c28      	ldrb	r0, [r5, r0]
1005c238:	2701      	movs	r7, #1
1005c23a:	4038      	ands	r0, r7
1005c23c:	2900      	cmp	r1, #0
1005c23e:	d026      	beq.n	1005c28e <LL_Set_Extented_Advertising_Enable+0xc2>
1005c240:	2800      	cmp	r0, #0
1005c242:	d00a      	beq.n	1005c25a <LL_Set_Extented_Advertising_Enable+0x8e>
1005c244:	208c      	movs	r0, #140	@ 0x8c
1005c246:	5828      	ldr	r0, [r5, r0]
1005c248:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005c24a:	462a      	mov	r2, r5
1005c24c:	328c      	adds	r2, #140	@ 0x8c
1005c24e:	6852      	ldr	r2, [r2, #4]
1005c250:	c105      	stmia	r1!, {r0, r2}
1005c252:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005c254:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005c256:	6769      	str	r1, [r5, #116]	@ 0x74
1005c258:	67a8      	str	r0, [r5, #120]	@ 0x78
1005c25a:	2094      	movs	r0, #148	@ 0x94
1005c25c:	5828      	ldr	r0, [r5, r0]
1005c25e:	2600      	movs	r6, #0
1005c260:	2800      	cmp	r0, #0
1005c262:	d008      	beq.n	1005c276 <LL_Set_Extented_Advertising_Enable+0xaa>
1005c264:	3594      	adds	r5, #148	@ 0x94
1005c266:	207d      	movs	r0, #125	@ 0x7d
1005c268:	0144      	lsls	r4, r0, #5
1005c26a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c26c:	4344      	muls	r4, r0
1005c26e:	f7f3 fbb4 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005c272:	1820      	adds	r0, r4, r0
1005c274:	6028      	str	r0, [r5, #0]
1005c276:	4630      	mov	r0, r6
1005c278:	e007      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c27a:	2000      	movs	r0, #0
1005c27c:	2901      	cmp	r1, #1
1005c27e:	d104      	bne.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c280:	4605      	mov	r5, r0
1005c282:	4620      	mov	r0, r4
1005c284:	f000 f958 	bl	1005c538 <EADV_stop>
1005c288:	4628      	mov	r0, r5
1005c28a:	b00f      	add	sp, #60	@ 0x3c
1005c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c28e:	2800      	cmp	r0, #0
1005c290:	d007      	beq.n	1005c2a2 <LL_Set_Extented_Advertising_Enable+0xd6>
1005c292:	208c      	movs	r0, #140	@ 0x8c
1005c294:	5828      	ldr	r0, [r5, r0]
1005c296:	2800      	cmp	r0, #0
1005c298:	d103      	bne.n	1005c2a2 <LL_Set_Extented_Advertising_Enable+0xd6>
1005c29a:	2090      	movs	r0, #144	@ 0x90
1005c29c:	5828      	ldr	r0, [r5, r0]
1005c29e:	2800      	cmp	r0, #0
1005c2a0:	d006      	beq.n	1005c2b0 <LL_Set_Extented_Advertising_Enable+0xe4>
1005c2a2:	20b8      	movs	r0, #184	@ 0xb8
1005c2a4:	5a28      	ldrh	r0, [r5, r0]
1005c2a6:	07c1      	lsls	r1, r0, #31
1005c2a8:	d004      	beq.n	1005c2b4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005c2aa:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005c2ac:	29f5      	cmp	r1, #245	@ 0xf5
1005c2ae:	d901      	bls.n	1005c2b4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005c2b0:	2012      	movs	r0, #18
1005c2b2:	e7ea      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c2b4:	2312      	movs	r3, #18
1005c2b6:	4601      	mov	r1, r0
1005c2b8:	461a      	mov	r2, r3
1005c2ba:	4019      	ands	r1, r3
1005c2bc:	2902      	cmp	r1, #2
1005c2be:	d103      	bne.n	1005c2c8 <LL_Set_Extented_Advertising_Enable+0xfc>
1005c2c0:	2142      	movs	r1, #66	@ 0x42
1005c2c2:	5a69      	ldrh	r1, [r5, r1]
1005c2c4:	2900      	cmp	r1, #0
1005c2c6:	d040      	beq.n	1005c34a <LL_Set_Extented_Advertising_Enable+0x17e>
1005c2c8:	0700      	lsls	r0, r0, #28
1005c2ca:	d50f      	bpl.n	1005c2ec <LL_Set_Extented_Advertising_Enable+0x120>
1005c2cc:	486d      	ldr	r0, [pc, #436]	@ (1005c484 <__arm_cp.24_0>)
1005c2ce:	21be      	movs	r1, #190	@ 0xbe
1005c2d0:	5a69      	ldrh	r1, [r5, r1]
1005c2d2:	4281      	cmp	r1, r0
1005c2d4:	d001      	beq.n	1005c2da <LL_Set_Extented_Advertising_Enable+0x10e>
1005c2d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c2d8:	e000      	b.n	1005c2dc <LL_Set_Extented_Advertising_Enable+0x110>
1005c2da:	2080      	movs	r0, #128	@ 0x80
1005c2dc:	2880      	cmp	r0, #128	@ 0x80
1005c2de:	d901      	bls.n	1005c2e4 <LL_Set_Extented_Advertising_Enable+0x118>
1005c2e0:	4610      	mov	r0, r2
1005c2e2:	e7d2      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c2e4:	900e      	str	r0, [sp, #56]	@ 0x38
1005c2e6:	2800      	cmp	r0, #0
1005c2e8:	4610      	mov	r0, r2
1005c2ea:	d0ce      	beq.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c2ec:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005c2ee:	21ba      	movs	r1, #186	@ 0xba
1005c2f0:	5268      	strh	r0, [r5, r1]
1005c2f2:	267d      	movs	r6, #125	@ 0x7d
1005c2f4:	0171      	lsls	r1, r6, #5
1005c2f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005c2f8:	4351      	muls	r1, r2
1005c2fa:	2294      	movs	r2, #148	@ 0x94
1005c2fc:	50a9      	str	r1, [r5, r2]
1005c2fe:	2800      	cmp	r0, #0
1005c300:	d001      	beq.n	1005c306 <LL_Set_Extented_Advertising_Enable+0x13a>
1005c302:	21cf      	movs	r1, #207	@ 0xcf
1005c304:	546f      	strb	r7, [r5, r1]
1005c306:	21bc      	movs	r1, #188	@ 0xbc
1005c308:	5268      	strh	r0, [r5, r1]
1005c30a:	4620      	mov	r0, r4
1005c30c:	f7ef fecc 	bl	1004c0a8 <EADV_start_request_radio_tasks_ucfg>
1005c310:	2800      	cmp	r0, #0
1005c312:	d1ba      	bne.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c314:	4629      	mov	r1, r5
1005c316:	31d6      	adds	r1, #214	@ 0xd6
1005c318:	4628      	mov	r0, r5
1005c31a:	3064      	adds	r0, #100	@ 0x64
1005c31c:	462a      	mov	r2, r5
1005c31e:	3254      	adds	r2, #84	@ 0x54
1005c320:	676a      	str	r2, [r5, #116]	@ 0x74
1005c322:	67a8      	str	r0, [r5, #120]	@ 0x78
1005c324:	462b      	mov	r3, r5
1005c326:	3378      	adds	r3, #120	@ 0x78
1005c328:	7809      	ldrb	r1, [r1, #0]
1005c32a:	07c9      	lsls	r1, r1, #31
1005c32c:	930d      	str	r3, [sp, #52]	@ 0x34
1005c32e:	d10e      	bne.n	1005c34e <LL_Set_Extented_Advertising_Enable+0x182>
1005c330:	2100      	movs	r1, #0
1005c332:	6001      	str	r1, [r0, #0]
1005c334:	66a9      	str	r1, [r5, #104]	@ 0x68
1005c336:	4855      	ldr	r0, [pc, #340]	@ (1005c48c <__arm_cp.24_2>)
1005c338:	6801      	ldr	r1, [r0, #0]
1005c33a:	4620      	mov	r0, r4
1005c33c:	3065      	adds	r0, #101	@ 0x65
1005c33e:	2206      	movs	r2, #6
1005c340:	f7f3 fa80 	bl	1004f844 <BLEPLAT_MemCpy>
1005c344:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005c346:	6800      	ldr	r0, [r0, #0]
1005c348:	e008      	b.n	1005c35c <LL_Set_Extented_Advertising_Enable+0x190>
1005c34a:	200c      	movs	r0, #12
1005c34c:	e79d      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c34e:	218c      	movs	r1, #140	@ 0x8c
1005c350:	5869      	ldr	r1, [r5, r1]
1005c352:	462a      	mov	r2, r5
1005c354:	328c      	adds	r2, #140	@ 0x8c
1005c356:	6852      	ldr	r2, [r2, #4]
1005c358:	c006      	stmia	r0!, {r1, r2}
1005c35a:	3808      	subs	r0, #8
1005c35c:	4629      	mov	r1, r5
1005c35e:	3194      	adds	r1, #148	@ 0x94
1005c360:	910e      	str	r1, [sp, #56]	@ 0x38
1005c362:	2184      	movs	r1, #132	@ 0x84
1005c364:	5869      	ldr	r1, [r5, r1]
1005c366:	462a      	mov	r2, r5
1005c368:	3284      	adds	r2, #132	@ 0x84
1005c36a:	6852      	ldr	r2, [r2, #4]
1005c36c:	6081      	str	r1, [r0, #8]
1005c36e:	60c2      	str	r2, [r0, #12]
1005c370:	4620      	mov	r0, r4
1005c372:	f7ff fe11 	bl	1005bf98 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005c376:	2800      	cmp	r0, #0
1005c378:	960c      	str	r6, [sp, #48]	@ 0x30
1005c37a:	d002      	beq.n	1005c382 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005c37c:	f7fc fc59 	bl	10058c32 <llc_priv_start_privacy_timer_ucfg_weak>
1005c380:	e006      	b.n	1005c390 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005c382:	4628      	mov	r0, r5
1005c384:	3074      	adds	r0, #116	@ 0x74
1005c386:	6801      	ldr	r1, [r0, #0]
1005c388:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005c38a:	681a      	ldr	r2, [r3, #0]
1005c38c:	6002      	str	r2, [r0, #0]
1005c38e:	6019      	str	r1, [r3, #0]
1005c390:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005c392:	4626      	mov	r6, r4
1005c394:	36ce      	adds	r6, #206	@ 0xce
1005c396:	4628      	mov	r0, r5
1005c398:	30b8      	adds	r0, #184	@ 0xb8
1005c39a:	900d      	str	r0, [sp, #52]	@ 0x34
1005c39c:	6808      	ldr	r0, [r1, #0]
1005c39e:	2800      	cmp	r0, #0
1005c3a0:	d005      	beq.n	1005c3ae <LL_Set_Extented_Advertising_Enable+0x1e2>
1005c3a2:	f7f3 fb1a 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005c3a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005c3a8:	6811      	ldr	r1, [r2, #0]
1005c3aa:	1808      	adds	r0, r1, r0
1005c3ac:	6010      	str	r0, [r2, #0]
1005c3ae:	7037      	strb	r7, [r6, #0]
1005c3b0:	20c4      	movs	r0, #196	@ 0xc4
1005c3b2:	5c29      	ldrb	r1, [r5, r0]
1005c3b4:	27d0      	movs	r7, #208	@ 0xd0
1005c3b6:	5de8      	ldrb	r0, [r5, r7]
1005c3b8:	2281      	movs	r2, #129	@ 0x81
1005c3ba:	920e      	str	r2, [sp, #56]	@ 0x38
1005c3bc:	9200      	str	r2, [sp, #0]
1005c3be:	462e      	mov	r6, r5
1005c3c0:	3614      	adds	r6, #20
1005c3c2:	4622      	mov	r2, r4
1005c3c4:	4633      	mov	r3, r6
1005c3c6:	f7ff fd77 	bl	1005beb8 <LL_eadv_BLUE_SM>
1005c3ca:	5de8      	ldrb	r0, [r5, r7]
1005c3cc:	2125      	movs	r1, #37	@ 0x25
1005c3ce:	f7f4 fec4 	bl	1005115a <BLEPLAT_CNTR_SmSetDataLength>
1005c3d2:	462f      	mov	r7, r5
1005c3d4:	37d0      	adds	r7, #208	@ 0xd0
1005c3d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005c3d8:	8800      	ldrh	r0, [r0, #0]
1005c3da:	06c0      	lsls	r0, r0, #27
1005c3dc:	d403      	bmi.n	1005c3e6 <LL_Set_Extented_Advertising_Enable+0x21a>
1005c3de:	4620      	mov	r0, r4
1005c3e0:	f000 fd57 	bl	1005ce92 <LL_eadv_start_extended_ucfg_weak>
1005c3e4:	e042      	b.n	1005c46c <LL_Set_Extented_Advertising_Enable+0x2a0>
1005c3e6:	f7f3 faf8 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005c3ea:	219c      	movs	r1, #156	@ 0x9c
1005c3ec:	910b      	str	r1, [sp, #44]	@ 0x2c
1005c3ee:	5068      	str	r0, [r5, r1]
1005c3f0:	f001 f812 	bl	1005d418 <LL_get_tx_common_buffer_p>
1005c3f4:	9009      	str	r0, [sp, #36]	@ 0x24
1005c3f6:	f001 f817 	bl	1005d428 <LL_get_rx_common_buffer_p>
1005c3fa:	900a      	str	r0, [sp, #40]	@ 0x28
1005c3fc:	7838      	ldrb	r0, [r7, #0]
1005c3fe:	9008      	str	r0, [sp, #32]
1005c400:	2094      	movs	r0, #148	@ 0x94
1005c402:	2100      	movs	r1, #0
1005c404:	910d      	str	r1, [sp, #52]	@ 0x34
1005c406:	460a      	mov	r2, r1
1005c408:	f7f4 fa1c 	bl	10050844 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005c40c:	4603      	mov	r3, r0
1005c40e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c410:	9000      	str	r0, [sp, #0]
1005c412:	4620      	mov	r0, r4
1005c414:	9908      	ldr	r1, [sp, #32]
1005c416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005c418:	f7ff fcd3 	bl	1005bdc2 <LL_eadv_Blue_Tx>
1005c41c:	7838      	ldrb	r0, [r7, #0]
1005c41e:	9009      	str	r0, [sp, #36]	@ 0x24
1005c420:	2096      	movs	r0, #150	@ 0x96
1005c422:	2101      	movs	r1, #1
1005c424:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005c426:	f7f4 fa0d 	bl	10050844 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005c42a:	4603      	mov	r3, r0
1005c42c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005c42e:	9000      	str	r0, [sp, #0]
1005c430:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c432:	9001      	str	r0, [sp, #4]
1005c434:	4630      	mov	r0, r6
1005c436:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005c438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005c43a:	f7ff fcfd 	bl	1005be38 <LL_eadv_Blue_Rx>
1005c43e:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005c440:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c442:	582a      	ldr	r2, [r5, r0]
1005c444:	7838      	ldrb	r0, [r7, #0]
1005c446:	4b12      	ldr	r3, [pc, #72]	@ (1005c490 <__arm_cp.24_3>)
1005c448:	9307      	str	r3, [sp, #28]
1005c44a:	4b12      	ldr	r3, [pc, #72]	@ (1005c494 <__arm_cp.24_4>)
1005c44c:	9306      	str	r3, [sp, #24]
1005c44e:	4b12      	ldr	r3, [pc, #72]	@ (1005c498 <__arm_cp.24_5>)
1005c450:	9305      	str	r3, [sp, #20]
1005c452:	4b12      	ldr	r3, [pc, #72]	@ (1005c49c <__arm_cp.24_6>)
1005c454:	9304      	str	r3, [sp, #16]
1005c456:	2314      	movs	r3, #20
1005c458:	9303      	str	r3, [sp, #12]
1005c45a:	231f      	movs	r3, #31
1005c45c:	ae00      	add	r6, sp, #0
1005c45e:	c60e      	stmia	r6!, {r1, r2, r3}
1005c460:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005c462:	00cb      	lsls	r3, r1, #3
1005c464:	4621      	mov	r1, r4
1005c466:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005c468:	f001 f86e 	bl	1005d548 <LL_sched_enable_taskslot>
1005c46c:	249c      	movs	r4, #156	@ 0x9c
1005c46e:	5929      	ldr	r1, [r5, r4]
1005c470:	7838      	ldrb	r0, [r7, #0]
1005c472:	f001 f845 	bl	1005d500 <LL_sched_set_anchor>
1005c476:	5928      	ldr	r0, [r5, r4]
1005c478:	7839      	ldrb	r1, [r7, #0]
1005c47a:	f001 faf5 	bl	1005da68 <LL_sched_check_and_call_sched>
1005c47e:	2000      	movs	r0, #0
1005c480:	e703      	b.n	1005c28a <LL_Set_Extented_Advertising_Enable+0xbe>
1005c482:	46c0      	nop			@ (mov r8, r8)

1005c484 <__arm_cp.24_0>:
1005c484:	0000fffc 	.word	0x0000fffc

1005c488 <__arm_cp.24_1>:
1005c488:	0000ffff 	.word	0x0000ffff

1005c48c <__arm_cp.24_2>:
1005c48c:	20000ecc 	.word	0x20000ecc

1005c490 <__arm_cp.24_3>:
1005c490:	1005c6d5 	.word	0x1005c6d5

1005c494 <__arm_cp.24_4>:
1005c494:	1005cb5d 	.word	0x1005cb5d

1005c498 <__arm_cp.24_5>:
1005c498:	1005c9cd 	.word	0x1005c9cd

1005c49c <__arm_cp.24_6>:
1005c49c:	1005c6dd 	.word	0x1005c6dd

1005c4a0 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005c4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c4a2:	460c      	mov	r4, r1
1005c4a4:	4606      	mov	r6, r0
1005c4a6:	f7ff fd35 	bl	1005bf14 <llc_get_advertising_set_index>
1005c4aa:	4605      	mov	r5, r0
1005c4ac:	4818      	ldr	r0, [pc, #96]	@ (1005c510 <__arm_cp.25_0>)
1005c4ae:	4285      	cmp	r5, r0
1005c4b0:	d02b      	beq.n	1005c50a <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005c4b2:	9400      	str	r4, [sp, #0]
1005c4b4:	022c      	lsls	r4, r5, #8
1005c4b6:	f000 ffc5 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005c4ba:	6807      	ldr	r7, [r0, #0]
1005c4bc:	1938      	adds	r0, r7, r4
1005c4be:	21be      	movs	r1, #190	@ 0xbe
1005c4c0:	5246      	strh	r6, [r0, r1]
1005c4c2:	21b8      	movs	r1, #184	@ 0xb8
1005c4c4:	5c40      	ldrb	r0, [r0, r1]
1005c4c6:	07c0      	lsls	r0, r0, #31
1005c4c8:	d007      	beq.n	1005c4da <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005c4ca:	0228      	lsls	r0, r5, #8
1005c4cc:	1838      	adds	r0, r7, r0
1005c4ce:	21ce      	movs	r1, #206	@ 0xce
1005c4d0:	5c40      	ldrb	r0, [r0, r1]
1005c4d2:	2801      	cmp	r0, #1
1005c4d4:	d101      	bne.n	1005c4da <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005c4d6:	250c      	movs	r5, #12
1005c4d8:	e018      	b.n	1005c50c <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005c4da:	480e      	ldr	r0, [pc, #56]	@ (1005c514 <__arm_cp.25_1>)
1005c4dc:	6800      	ldr	r0, [r0, #0]
1005c4de:	3056      	adds	r0, #86	@ 0x56
1005c4e0:	2606      	movs	r6, #6
1005c4e2:	9c00      	ldr	r4, [sp, #0]
1005c4e4:	4621      	mov	r1, r4
1005c4e6:	4632      	mov	r2, r6
1005c4e8:	f7f3 f9ac 	bl	1004f844 <BLEPLAT_MemCpy>
1005c4ec:	0228      	lsls	r0, r5, #8
1005c4ee:	1838      	adds	r0, r7, r0
1005c4f0:	218c      	movs	r1, #140	@ 0x8c
1005c4f2:	2201      	movs	r2, #1
1005c4f4:	5042      	str	r2, [r0, r1]
1005c4f6:	4601      	mov	r1, r0
1005c4f8:	318c      	adds	r1, #140	@ 0x8c
1005c4fa:	2500      	movs	r5, #0
1005c4fc:	604d      	str	r5, [r1, #4]
1005c4fe:	308d      	adds	r0, #141	@ 0x8d
1005c500:	4621      	mov	r1, r4
1005c502:	4632      	mov	r2, r6
1005c504:	f7f3 f99e 	bl	1004f844 <BLEPLAT_MemCpy>
1005c508:	e000      	b.n	1005c50c <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005c50a:	2512      	movs	r5, #18
1005c50c:	4628      	mov	r0, r5
1005c50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c510 <__arm_cp.25_0>:
1005c510:	0000ffff 	.word	0x0000ffff

1005c514 <__arm_cp.25_1>:
1005c514:	20000f20 	.word	0x20000f20

1005c518 <LL_eadv_update_did>:
1005c518:	b510      	push	{r4, lr}
1005c51a:	4604      	mov	r4, r0
1005c51c:	2000      	movs	r0, #0
1005c51e:	f003 fd41 	bl	1005ffa4 <Hal_Get_Random_Number>
1005c522:	4904      	ldr	r1, [pc, #16]	@ (1005c534 <__arm_cp.27_0>)
1005c524:	4001      	ands	r1, r0
1005c526:	8820      	ldrh	r0, [r4, #0]
1005c528:	1a40      	subs	r0, r0, r1
1005c52a:	4242      	negs	r2, r0
1005c52c:	4142      	adcs	r2, r0
1005c52e:	404a      	eors	r2, r1
1005c530:	8022      	strh	r2, [r4, #0]
1005c532:	bd10      	pop	{r4, pc}

1005c534 <__arm_cp.27_0>:
1005c534:	00000fff 	.word	0x00000fff

1005c538 <EADV_stop>:
1005c538:	b5b0      	push	{r4, r5, r7, lr}
1005c53a:	4604      	mov	r4, r0
1005c53c:	f3ef 8010 	mrs	r0, PRIMASK
1005c540:	b672      	cpsid	i
1005c542:	4625      	mov	r5, r4
1005c544:	35ce      	adds	r5, #206	@ 0xce
1005c546:	78a8      	ldrb	r0, [r5, #2]
1005c548:	f000 ffec 	bl	1005d524 <LL_sched_set_cancel_request>
1005c54c:	20d1      	movs	r0, #209	@ 0xd1
1005c54e:	5c20      	ldrb	r0, [r4, r0]
1005c550:	f000 ffe8 	bl	1005d524 <LL_sched_set_cancel_request>
1005c554:	b662      	cpsie	i
1005c556:	78a8      	ldrb	r0, [r5, #2]
1005c558:	f001 fa96 	bl	1005da88 <LL_sched_check_and_wait_sched>
1005c55c:	20ce      	movs	r0, #206	@ 0xce
1005c55e:	2100      	movs	r1, #0
1005c560:	5221      	strh	r1, [r4, r0]
1005c562:	7aa8      	ldrb	r0, [r5, #10]
1005c564:	28ff      	cmp	r0, #255	@ 0xff
1005c566:	d001      	beq.n	1005c56c <EADV_stop+0x34>
1005c568:	f7fb fc93 	bl	10057e92 <llc_conn_release_conn_idx>
1005c56c:	20ff      	movs	r0, #255	@ 0xff
1005c56e:	72a8      	strb	r0, [r5, #10]
1005c570:	7a28      	ldrb	r0, [r5, #8]
1005c572:	0780      	lsls	r0, r0, #30
1005c574:	d501      	bpl.n	1005c57a <EADV_stop+0x42>
1005c576:	f7fc fb5d 	bl	10058c34 <llc_priv_stop_privacy_timer_ucfg_weak>
1005c57a:	bdb0      	pop	{r4, r5, r7, pc}

1005c57c <LL_Set_Advertising_Set_Random_Address>:
1005c57c:	b510      	push	{r4, lr}
1005c57e:	4604      	mov	r4, r0
1005c580:	f7fa f902 	bl	10056788 <scan_csr_ucfg_weak>
1005c584:	2801      	cmp	r0, #1
1005c586:	d105      	bne.n	1005c594 <LL_Set_Advertising_Set_Random_Address+0x18>
1005c588:	f7fc fb84 	bl	10058c94 <llc_scan_get_cntxt_p>
1005c58c:	21eb      	movs	r1, #235	@ 0xeb
1005c58e:	5c40      	ldrb	r0, [r0, r1]
1005c590:	07c0      	lsls	r0, r0, #31
1005c592:	d106      	bne.n	1005c5a2 <LL_Set_Advertising_Set_Random_Address+0x26>
1005c594:	f7ff fdfc 	bl	1005c190 <LL_LE_Set_Advertising_Parameters_Default>
1005c598:	4803      	ldr	r0, [pc, #12]	@ (1005c5a8 <__arm_cp.29_0>)
1005c59a:	4621      	mov	r1, r4
1005c59c:	f7ff ff80 	bl	1005c4a0 <LL_Set_Extented_Advertising_Set_Random_Address>
1005c5a0:	bd10      	pop	{r4, pc}
1005c5a2:	200c      	movs	r0, #12
1005c5a4:	bd10      	pop	{r4, pc}
1005c5a6:	46c0      	nop			@ (mov r8, r8)

1005c5a8 <__arm_cp.29_0>:
1005c5a8:	0000fffc 	.word	0x0000fffc

1005c5ac <ll_set_advertising_data_ptr>:
1005c5ac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c5ae:	9302      	str	r3, [sp, #8]
1005c5b0:	4614      	mov	r4, r2
1005c5b2:	460f      	mov	r7, r1
1005c5b4:	4605      	mov	r5, r0
1005c5b6:	f000 ff45 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005c5ba:	4606      	mov	r6, r0
1005c5bc:	4830      	ldr	r0, [pc, #192]	@ (1005c680 <__arm_cp.33_0>)
1005c5be:	4285      	cmp	r5, r0
1005c5c0:	d101      	bne.n	1005c5c6 <ll_set_advertising_data_ptr+0x1a>
1005c5c2:	201f      	movs	r0, #31
1005c5c4:	e007      	b.n	1005c5d6 <ll_set_advertising_data_ptr+0x2a>
1005c5c6:	2001      	movs	r0, #1
1005c5c8:	2102      	movs	r1, #2
1005c5ca:	f7f9 fff9 	bl	100565c0 <hci_get_set_legacy_ext_flag>
1005c5ce:	2800      	cmp	r0, #0
1005c5d0:	d000      	beq.n	1005c5d4 <ll_set_advertising_data_ptr+0x28>
1005c5d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c5d4:	482b      	ldr	r0, [pc, #172]	@ (1005c684 <__arm_cp.33_1>)
1005c5d6:	2112      	movs	r1, #18
1005c5d8:	42a0      	cmp	r0, r4
1005c5da:	d201      	bcs.n	1005c5e0 <ll_set_advertising_data_ptr+0x34>
1005c5dc:	4608      	mov	r0, r1
1005c5de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c5e0:	9101      	str	r1, [sp, #4]
1005c5e2:	4628      	mov	r0, r5
1005c5e4:	f7ff fc96 	bl	1005bf14 <llc_get_advertising_set_index>
1005c5e8:	0200      	lsls	r0, r0, #8
1005c5ea:	6831      	ldr	r1, [r6, #0]
1005c5ec:	180e      	adds	r6, r1, r0
1005c5ee:	4620      	mov	r0, r4
1005c5f0:	4631      	mov	r1, r6
1005c5f2:	f000 fc4c 	bl	1005ce8e <llc_eadv_max_supported_data_check_ucfg_weak>
1005c5f6:	2800      	cmp	r0, #0
1005c5f8:	d1eb      	bne.n	1005c5d2 <ll_set_advertising_data_ptr+0x26>
1005c5fa:	20ce      	movs	r0, #206	@ 0xce
1005c5fc:	5c31      	ldrb	r1, [r6, r0]
1005c5fe:	2038      	movs	r0, #56	@ 0x38
1005c600:	5c30      	ldrb	r0, [r6, r0]
1005c602:	2f04      	cmp	r7, #4
1005c604:	d112      	bne.n	1005c62c <ll_set_advertising_data_ptr+0x80>
1005c606:	2900      	cmp	r1, #0
1005c608:	d038      	beq.n	1005c67c <ll_set_advertising_data_ptr+0xd0>
1005c60a:	2800      	cmp	r0, #0
1005c60c:	9a01      	ldr	r2, [sp, #4]
1005c60e:	d01b      	beq.n	1005c648 <ll_set_advertising_data_ptr+0x9c>
1005c610:	481b      	ldr	r0, [pc, #108]	@ (1005c680 <__arm_cp.33_0>)
1005c612:	4285      	cmp	r5, r0
1005c614:	d118      	bne.n	1005c648 <ll_set_advertising_data_ptr+0x9c>
1005c616:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
1005c618:	2800      	cmp	r0, #0
1005c61a:	d015      	beq.n	1005c648 <ll_set_advertising_data_ptr+0x9c>
1005c61c:	20b8      	movs	r0, #184	@ 0xb8
1005c61e:	5a30      	ldrh	r0, [r6, r0]
1005c620:	2110      	movs	r1, #16
1005c622:	4001      	ands	r1, r0
1005c624:	4321      	orrs	r1, r4
1005c626:	4610      	mov	r0, r2
1005c628:	d1d3      	bne.n	1005c5d2 <ll_set_advertising_data_ptr+0x26>
1005c62a:	e00f      	b.n	1005c64c <ll_set_advertising_data_ptr+0xa0>
1005c62c:	4635      	mov	r5, r6
1005c62e:	3538      	adds	r5, #56	@ 0x38
1005c630:	2900      	cmp	r1, #0
1005c632:	d011      	beq.n	1005c658 <ll_set_advertising_data_ptr+0xac>
1005c634:	2f03      	cmp	r7, #3
1005c636:	d109      	bne.n	1005c64c <ll_set_advertising_data_ptr+0xa0>
1005c638:	2002      	movs	r0, #2
1005c63a:	7028      	strb	r0, [r5, #0]
1005c63c:	86f4      	strh	r4, [r6, #54]	@ 0x36
1005c63e:	2000      	movs	r0, #0
1005c640:	86b0      	strh	r0, [r6, #52]	@ 0x34
1005c642:	9902      	ldr	r1, [sp, #8]
1005c644:	6331      	str	r1, [r6, #48]	@ 0x30
1005c646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c648:	4610      	mov	r0, r2
1005c64a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c64c:	36b6      	adds	r6, #182	@ 0xb6
1005c64e:	4630      	mov	r0, r6
1005c650:	f7ff ff62 	bl	1005c518 <LL_eadv_update_did>
1005c654:	2000      	movs	r0, #0
1005c656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c658:	4637      	mov	r7, r6
1005c65a:	3728      	adds	r7, #40	@ 0x28
1005c65c:	2800      	cmp	r0, #0
1005c65e:	9a02      	ldr	r2, [sp, #8]
1005c660:	d005      	beq.n	1005c66e <ll_set_advertising_data_ptr+0xc2>
1005c662:	6839      	ldr	r1, [r7, #0]
1005c664:	20a1      	movs	r0, #161	@ 0xa1
1005c666:	9a02      	ldr	r2, [sp, #8]
1005c668:	f004 fdb2 	bl	100611d0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005c66c:	9a02      	ldr	r2, [sp, #8]
1005c66e:	603a      	str	r2, [r7, #0]
1005c670:	2001      	movs	r0, #1
1005c672:	7028      	strb	r0, [r5, #0]
1005c674:	85f4      	strh	r4, [r6, #46]	@ 0x2e
1005c676:	2000      	movs	r0, #0
1005c678:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1005c67a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c67c:	9801      	ldr	r0, [sp, #4]
1005c67e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005c680 <__arm_cp.33_0>:
1005c680:	0000fffc 	.word	0x0000fffc

1005c684 <__arm_cp.33_1>:
1005c684:	00000672 	.word	0x00000672

1005c688 <ll_set_legacy_advertising_data_ptr>:
1005c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c68a:	460c      	mov	r4, r1
1005c68c:	4605      	mov	r5, r0
1005c68e:	f000 fed9 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005c692:	4607      	mov	r7, r0
1005c694:	f7ff fd7c 	bl	1005c190 <LL_LE_Set_Advertising_Parameters_Default>
1005c698:	4e0c      	ldr	r6, [pc, #48]	@ (1005c6cc <__arm_cp.36_0>)
1005c69a:	4630      	mov	r0, r6
1005c69c:	f7ff fc3a 	bl	1005bf14 <llc_get_advertising_set_index>
1005c6a0:	490b      	ldr	r1, [pc, #44]	@ (1005c6d0 <__arm_cp.36_1>)
1005c6a2:	4288      	cmp	r0, r1
1005c6a4:	d108      	bne.n	1005c6b8 <ll_set_legacy_advertising_data_ptr+0x30>
1005c6a6:	f7ff fd43 	bl	1005c130 <LL_Context_ReturnFree>
1005c6aa:	28ff      	cmp	r0, #255	@ 0xff
1005c6ac:	d00b      	beq.n	1005c6c6 <ll_set_legacy_advertising_data_ptr+0x3e>
1005c6ae:	0200      	lsls	r0, r0, #8
1005c6b0:	6839      	ldr	r1, [r7, #0]
1005c6b2:	1808      	adds	r0, r1, r0
1005c6b4:	21be      	movs	r1, #190	@ 0xbe
1005c6b6:	5246      	strh	r6, [r0, r1]
1005c6b8:	2103      	movs	r1, #3
1005c6ba:	4630      	mov	r0, r6
1005c6bc:	462a      	mov	r2, r5
1005c6be:	4623      	mov	r3, r4
1005c6c0:	f7ff ff74 	bl	1005c5ac <ll_set_advertising_data_ptr>
1005c6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c6c6:	2001      	movs	r0, #1
1005c6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c6ca:	46c0      	nop			@ (mov r8, r8)

1005c6cc <__arm_cp.36_0>:
1005c6cc:	0000fffc 	.word	0x0000fffc

1005c6d0 <__arm_cp.36_1>:
1005c6d0:	0000ffff 	.word	0x0000ffff

1005c6d4 <ADV_cancelslot>:
1005c6d4:	21d0      	movs	r1, #208	@ 0xd0
1005c6d6:	22ff      	movs	r2, #255	@ 0xff
1005c6d8:	5442      	strb	r2, [r0, r1]
1005c6da:	4770      	bx	lr

1005c6dc <ADV_skiproutine>:
1005c6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c6de:	b08f      	sub	sp, #60	@ 0x3c
1005c6e0:	4607      	mov	r7, r0
1005c6e2:	20d0      	movs	r0, #208	@ 0xd0
1005c6e4:	5c38      	ldrb	r0, [r7, r0]
1005c6e6:	232c      	movs	r3, #44	@ 0x2c
1005c6e8:	4358      	muls	r0, r3
1005c6ea:	4a68      	ldr	r2, [pc, #416]	@ (1005c88c <__arm_cp.40_0>)
1005c6ec:	6812      	ldr	r2, [r2, #0]
1005c6ee:	1810      	adds	r0, r2, r0
1005c6f0:	7d80      	ldrb	r0, [r0, #22]
1005c6f2:	463c      	mov	r4, r7
1005c6f4:	3494      	adds	r4, #148	@ 0x94
1005c6f6:	463a      	mov	r2, r7
1005c6f8:	32b4      	adds	r2, #180	@ 0xb4
1005c6fa:	9205      	str	r2, [sp, #20]
1005c6fc:	463e      	mov	r6, r7
1005c6fe:	36d6      	adds	r6, #214	@ 0xd6
1005c700:	2814      	cmp	r0, #20
1005c702:	9604      	str	r6, [sp, #16]
1005c704:	9302      	str	r3, [sp, #8]
1005c706:	d10a      	bne.n	1005c71e <ADV_skiproutine+0x42>
1005c708:	f7f3 f967 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005c70c:	4605      	mov	r5, r0
1005c70e:	f000 fed7 	bl	1005d4c0 <LL_sched_engine_return_actual_scheduler_margin>
1005c712:	9b05      	ldr	r3, [sp, #20]
1005c714:	1828      	adds	r0, r5, r0
1005c716:	3032      	adds	r0, #50	@ 0x32
1005c718:	60a0      	str	r0, [r4, #8]
1005c71a:	2501      	movs	r5, #1
1005c71c:	e01b      	b.n	1005c756 <ADV_skiproutine+0x7a>
1005c71e:	68a2      	ldr	r2, [r4, #8]
1005c720:	1856      	adds	r6, r2, r1
1005c722:	2500      	movs	r5, #0
1005c724:	4630      	mov	r0, r6
1005c726:	4611      	mov	r1, r2
1005c728:	f000 fec6 	bl	1005d4b8 <LL_sched_time_t1_ge_t2>
1005c72c:	2800      	cmp	r0, #0
1005c72e:	d005      	beq.n	1005c73c <ADV_skiproutine+0x60>
1005c730:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005c732:	68a1      	ldr	r1, [r4, #8]
1005c734:	180a      	adds	r2, r1, r0
1005c736:	60a2      	str	r2, [r4, #8]
1005c738:	1c6d      	adds	r5, r5, #1
1005c73a:	e7f3      	b.n	1005c724 <ADV_skiproutine+0x48>
1005c73c:	9b05      	ldr	r3, [sp, #20]
1005c73e:	8898      	ldrh	r0, [r3, #4]
1005c740:	0700      	lsls	r0, r0, #28
1005c742:	d408      	bmi.n	1005c756 <ADV_skiproutine+0x7a>
1005c744:	2001      	movs	r0, #1
1005c746:	f003 fc34 	bl	1005ffb2 <Hal_Get_Random_Number32>
1005c74a:	9b05      	ldr	r3, [sp, #20]
1005c74c:	4950      	ldr	r1, [pc, #320]	@ (1005c890 <__arm_cp.40_1>)
1005c74e:	4001      	ands	r1, r0
1005c750:	68a0      	ldr	r0, [r4, #8]
1005c752:	1840      	adds	r0, r0, r1
1005c754:	60a0      	str	r0, [r4, #8]
1005c756:	8898      	ldrh	r0, [r3, #4]
1005c758:	2103      	movs	r1, #3
1005c75a:	4001      	ands	r1, r0
1005c75c:	1e48      	subs	r0, r1, #1
1005c75e:	4181      	sbcs	r1, r0
1005c760:	0048      	lsls	r0, r1, #1
1005c762:	8018      	strh	r0, [r3, #0]
1005c764:	7b98      	ldrb	r0, [r3, #14]
1005c766:	2201      	movs	r2, #1
1005c768:	4601      	mov	r1, r0
1005c76a:	9201      	str	r2, [sp, #4]
1005c76c:	4011      	ands	r1, r2
1005c76e:	0782      	lsls	r2, r0, #30
1005c770:	0fd2      	lsrs	r2, r2, #31
1005c772:	1889      	adds	r1, r1, r2
1005c774:	0740      	lsls	r0, r0, #29
1005c776:	0fc0      	lsrs	r0, r0, #31
1005c778:	1808      	adds	r0, r1, r0
1005c77a:	1e40      	subs	r0, r0, #1
1005c77c:	7798      	strb	r0, [r3, #30]
1005c77e:	4638      	mov	r0, r7
1005c780:	461e      	mov	r6, r3
1005c782:	f000 f88b 	bl	1005c89c <UTIL_u8GetNextAdvChannel>
1005c786:	4601      	mov	r1, r0
1005c788:	7f30      	ldrb	r0, [r6, #28]
1005c78a:	f7f4 fd10 	bl	100511ae <BLEPLAT_CNTR_SmSetRemapChan>
1005c78e:	7f30      	ldrb	r0, [r6, #28]
1005c790:	f7f4 fdcc 	bl	1005132c <BLEPLAT_CNTR_SmSetTxMode>
1005c794:	2000      	movs	r0, #0
1005c796:	9003      	str	r0, [sp, #12]
1005c798:	9904      	ldr	r1, [sp, #16]
1005c79a:	7148      	strb	r0, [r1, #5]
1005c79c:	4638      	mov	r0, r7
1005c79e:	3028      	adds	r0, #40	@ 0x28
1005c7a0:	f7ff fafe 	bl	1005bda0 <LL_eadv_switchbackupdata_data_struc>
1005c7a4:	4606      	mov	r6, r0
1005c7a6:	4638      	mov	r0, r7
1005c7a8:	303c      	adds	r0, #60	@ 0x3c
1005c7aa:	f7ff faf9 	bl	1005bda0 <LL_eadv_switchbackupdata_data_struc>
1005c7ae:	2e00      	cmp	r6, #0
1005c7b0:	9e04      	ldr	r6, [sp, #16]
1005c7b2:	d002      	beq.n	1005c7ba <ADV_skiproutine+0xde>
1005c7b4:	7931      	ldrb	r1, [r6, #4]
1005c7b6:	07c9      	lsls	r1, r1, #31
1005c7b8:	d104      	bne.n	1005c7c4 <ADV_skiproutine+0xe8>
1005c7ba:	2800      	cmp	r0, #0
1005c7bc:	d005      	beq.n	1005c7ca <ADV_skiproutine+0xee>
1005c7be:	7930      	ldrb	r0, [r6, #4]
1005c7c0:	0780      	lsls	r0, r0, #30
1005c7c2:	d502      	bpl.n	1005c7ca <ADV_skiproutine+0xee>
1005c7c4:	4638      	mov	r0, r7
1005c7c6:	f7ff fbe7 	bl	1005bf98 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005c7ca:	68a1      	ldr	r1, [r4, #8]
1005c7cc:	6820      	ldr	r0, [r4, #0]
1005c7ce:	9b05      	ldr	r3, [sp, #20]
1005c7d0:	88da      	ldrh	r2, [r3, #6]
1005c7d2:	2a00      	cmp	r2, #0
1005c7d4:	d102      	bne.n	1005c7dc <ADV_skiproutine+0x100>
1005c7d6:	7eda      	ldrb	r2, [r3, #27]
1005c7d8:	2a01      	cmp	r2, #1
1005c7da:	d003      	beq.n	1005c7e4 <ADV_skiproutine+0x108>
1005c7dc:	4288      	cmp	r0, r1
1005c7de:	da4c      	bge.n	1005c87a <ADV_skiproutine+0x19e>
1005c7e0:	2800      	cmp	r0, #0
1005c7e2:	d04a      	beq.n	1005c87a <ADV_skiproutine+0x19e>
1005c7e4:	7e98      	ldrb	r0, [r3, #26]
1005c7e6:	2800      	cmp	r0, #0
1005c7e8:	d047      	beq.n	1005c87a <ADV_skiproutine+0x19e>
1005c7ea:	8898      	ldrh	r0, [r3, #4]
1005c7ec:	0700      	lsls	r0, r0, #28
1005c7ee:	d520      	bpl.n	1005c832 <ADV_skiproutine+0x156>
1005c7f0:	a80d      	add	r0, sp, #52	@ 0x34
1005c7f2:	9000      	str	r0, [sp, #0]
1005c7f4:	9903      	ldr	r1, [sp, #12]
1005c7f6:	8081      	strh	r1, [r0, #4]
1005c7f8:	910d      	str	r1, [sp, #52]	@ 0x34
1005c7fa:	a806      	add	r0, sp, #24
1005c7fc:	9a01      	ldr	r2, [sp, #4]
1005c7fe:	7642      	strb	r2, [r0, #25]
1005c800:	223c      	movs	r2, #60	@ 0x3c
1005c802:	7682      	strb	r2, [r0, #26]
1005c804:	22ff      	movs	r2, #255	@ 0xff
1005c806:	7582      	strb	r2, [r0, #22]
1005c808:	81c1      	strh	r1, [r0, #14]
1005c80a:	4a22      	ldr	r2, [pc, #136]	@ (1005c894 <__arm_cp.40_2>)
1005c80c:	8282      	strh	r2, [r0, #20]
1005c80e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005c810:	7a13      	ldrb	r3, [r2, #8]
1005c812:	7603      	strb	r3, [r0, #24]
1005c814:	8181      	strh	r1, [r0, #12]
1005c816:	75c1      	strb	r1, [r0, #23]
1005c818:	9b00      	ldr	r3, [sp, #0]
1005c81a:	9307      	str	r3, [sp, #28]
1005c81c:	3209      	adds	r2, #9
1005c81e:	9206      	str	r2, [sp, #24]
1005c820:	910a      	str	r1, [sp, #40]	@ 0x28
1005c822:	9308      	str	r3, [sp, #32]
1005c824:	f7fb f832 	bl	1005788c <llc_conn_push_connection_complete_event>
1005c828:	7830      	ldrb	r0, [r6, #0]
1005c82a:	0780      	lsls	r0, r0, #30
1005c82c:	d501      	bpl.n	1005c832 <ADV_skiproutine+0x156>
1005c82e:	f7fc fa01 	bl	10058c34 <llc_priv_stop_privacy_timer_ucfg_weak>
1005c832:	2002      	movs	r0, #2
1005c834:	f7f9 fed2 	bl	100565dc <hci_check_legacy_ext_flag>
1005c838:	2801      	cmp	r0, #1
1005c83a:	d119      	bne.n	1005c870 <ADV_skiproutine+0x194>
1005c83c:	9b05      	ldr	r3, [sp, #20]
1005c83e:	88da      	ldrh	r2, [r3, #6]
1005c840:	2a00      	cmp	r2, #0
1005c842:	d001      	beq.n	1005c848 <ADV_skiproutine+0x16c>
1005c844:	203c      	movs	r0, #60	@ 0x3c
1005c846:	e000      	b.n	1005c84a <ADV_skiproutine+0x16e>
1005c848:	2043      	movs	r0, #67	@ 0x43
1005c84a:	9001      	str	r0, [sp, #4]
1005c84c:	4812      	ldr	r0, [pc, #72]	@ (1005c898 <__arm_cp.40_3>)
1005c84e:	6800      	ldr	r0, [r0, #0]
1005c850:	9902      	ldr	r1, [sp, #8]
1005c852:	5c40      	ldrb	r0, [r0, r1]
1005c854:	0100      	lsls	r0, r0, #4
1005c856:	43c0      	mvns	r0, r0
1005c858:	4619      	mov	r1, r3
1005c85a:	23a1      	movs	r3, #161	@ 0xa1
1005c85c:	4303      	orrs	r3, r0
1005c85e:	20b1      	movs	r0, #177	@ 0xb1
1005c860:	4018      	ands	r0, r3
1005c862:	7a0b      	ldrb	r3, [r1, #8]
1005c864:	1a9a      	subs	r2, r3, r2
1005c866:	b2d3      	uxtb	r3, r2
1005c868:	7a8a      	ldrb	r2, [r1, #10]
1005c86a:	9901      	ldr	r1, [sp, #4]
1005c86c:	f000 f85e 	bl	1005c92c <hci_le_advertising_set_terminated_event_push>
1005c870:	4638      	mov	r0, r7
1005c872:	f000 f895 	bl	1005c9a0 <EADV_stop_isr>
1005c876:	68a1      	ldr	r1, [r4, #8]
1005c878:	9b05      	ldr	r3, [sp, #20]
1005c87a:	7f18      	ldrb	r0, [r3, #28]
1005c87c:	f000 fe40 	bl	1005d500 <LL_sched_set_anchor>
1005c880:	9803      	ldr	r0, [sp, #12]
1005c882:	7170      	strb	r0, [r6, #5]
1005c884:	4628      	mov	r0, r5
1005c886:	b00f      	add	sp, #60	@ 0x3c
1005c888:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c88a:	46c0      	nop			@ (mov r8, r8)

1005c88c <__arm_cp.40_0>:
1005c88c:	20000f28 	.word	0x20000f28

1005c890 <__arm_cp.40_1>:
1005c890:	00000fff 	.word	0x00000fff

1005c894 <__arm_cp.40_2>:
1005c894:	0000ffff 	.word	0x0000ffff

1005c898 <__arm_cp.40_3>:
1005c898:	20000ecc 	.word	0x20000ecc

1005c89c <UTIL_u8GetNextAdvChannel>:
1005c89c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c89e:	4604      	mov	r4, r0
1005c8a0:	20c2      	movs	r0, #194	@ 0xc2
1005c8a2:	5c27      	ldrb	r7, [r4, r0]
1005c8a4:	2501      	movs	r5, #1
1005c8a6:	403d      	ands	r5, r7
1005c8a8:	07ba      	lsls	r2, r7, #30
1005c8aa:	0fd0      	lsrs	r0, r2, #31
1005c8ac:	1828      	adds	r0, r5, r0
1005c8ae:	0779      	lsls	r1, r7, #29
1005c8b0:	0fc9      	lsrs	r1, r1, #31
1005c8b2:	1840      	adds	r0, r0, r1
1005c8b4:	1e40      	subs	r0, r0, #1
1005c8b6:	b2c0      	uxtb	r0, r0
1005c8b8:	34c2      	adds	r4, #194	@ 0xc2
1005c8ba:	7c26      	ldrb	r6, [r4, #16]
1005c8bc:	42b0      	cmp	r0, r6
1005c8be:	d10f      	bne.n	1005c8e0 <UTIL_u8GetNextAdvChannel+0x44>
1005c8c0:	9201      	str	r2, [sp, #4]
1005c8c2:	2001      	movs	r0, #1
1005c8c4:	9002      	str	r0, [sp, #8]
1005c8c6:	f003 fb6d 	bl	1005ffa4 <Hal_Get_Random_Number>
1005c8ca:	2e01      	cmp	r6, #1
1005c8cc:	d00a      	beq.n	1005c8e4 <UTIL_u8GetNextAdvChannel+0x48>
1005c8ce:	2e02      	cmp	r6, #2
1005c8d0:	d10e      	bne.n	1005c8f0 <UTIL_u8GetNextAdvChannel+0x54>
1005c8d2:	b2c0      	uxtb	r0, r0
1005c8d4:	2106      	movs	r1, #6
1005c8d6:	f7e3 fd39 	bl	1004034c <__aeabi_uidivmod>
1005c8da:	a012      	add	r0, pc, #72	@ (adr r0, 1005c924 <UTIL_u8GetNextAdvChannel+0x88>)
1005c8dc:	5c40      	ldrb	r0, [r0, r1]
1005c8de:	e012      	b.n	1005c906 <UTIL_u8GetNextAdvChannel+0x6a>
1005c8e0:	7c60      	ldrb	r0, [r4, #17]
1005c8e2:	e011      	b.n	1005c908 <UTIL_u8GetNextAdvChannel+0x6c>
1005c8e4:	9902      	ldr	r1, [sp, #8]
1005c8e6:	4008      	ands	r0, r1
1005c8e8:	2d00      	cmp	r5, #0
1005c8ea:	d104      	bne.n	1005c8f6 <UTIL_u8GetNextAdvChannel+0x5a>
1005c8ec:	a10c      	add	r1, pc, #48	@ (adr r1, 1005c920 <UTIL_u8GetNextAdvChannel+0x84>)
1005c8ee:	e008      	b.n	1005c902 <UTIL_u8GetNextAdvChannel+0x66>
1005c8f0:	08b8      	lsrs	r0, r7, #2
1005c8f2:	1a38      	subs	r0, r7, r0
1005c8f4:	e007      	b.n	1005c906 <UTIL_u8GetNextAdvChannel+0x6a>
1005c8f6:	9901      	ldr	r1, [sp, #4]
1005c8f8:	2900      	cmp	r1, #0
1005c8fa:	d401      	bmi.n	1005c900 <UTIL_u8GetNextAdvChannel+0x64>
1005c8fc:	a107      	add	r1, pc, #28	@ (adr r1, 1005c91c <UTIL_u8GetNextAdvChannel+0x80>)
1005c8fe:	e000      	b.n	1005c902 <UTIL_u8GetNextAdvChannel+0x66>
1005c900:	a105      	add	r1, pc, #20	@ (adr r1, 1005c918 <UTIL_u8GetNextAdvChannel+0x7c>)
1005c902:	1808      	adds	r0, r1, r0
1005c904:	7800      	ldrb	r0, [r0, #0]
1005c906:	7460      	strb	r0, [r4, #17]
1005c908:	0071      	lsls	r1, r6, #1
1005c90a:	b2c2      	uxtb	r2, r0
1005c90c:	40ca      	lsrs	r2, r1
1005c90e:	2003      	movs	r0, #3
1005c910:	4010      	ands	r0, r2
1005c912:	3024      	adds	r0, #36	@ 0x24
1005c914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c916:	46c0      	nop			@ (mov r8, r8)
1005c918:	00000906 	.word	0x00000906
1005c91c:	00000d07 	.word	0x00000d07
1005c920:	00000e0b 	.word	0x00000e0b
1005c924:	2d271e1b 	.word	0x2d271e1b
1005c928:	00003936 	.word	0x00003936

1005c92c <hci_le_advertising_set_terminated_event_push>:
1005c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c92e:	461f      	mov	r7, r3
1005c930:	4616      	mov	r6, r2
1005c932:	460d      	mov	r5, r1
1005c934:	4604      	mov	r4, r0
1005c936:	06c0      	lsls	r0, r0, #27
1005c938:	d40b      	bmi.n	1005c952 <hci_le_advertising_set_terminated_event_push+0x26>
1005c93a:	4817      	ldr	r0, [pc, #92]	@ (1005c998 <__arm_cp.42_0>)
1005c93c:	6800      	ldr	r0, [r0, #0]
1005c93e:	213d      	movs	r1, #61	@ 0x3d
1005c940:	5c41      	ldrb	r1, [r0, r1]
1005c942:	0689      	lsls	r1, r1, #26
1005c944:	d527      	bpl.n	1005c996 <hci_le_advertising_set_terminated_event_push+0x6a>
1005c946:	303d      	adds	r0, #61	@ 0x3d
1005c948:	7ac0      	ldrb	r0, [r0, #11]
1005c94a:	0780      	lsls	r0, r0, #30
1005c94c:	d523      	bpl.n	1005c996 <hci_le_advertising_set_terminated_event_push+0x6a>
1005c94e:	221f      	movs	r2, #31
1005c950:	e002      	b.n	1005c958 <hci_le_advertising_set_terminated_event_push+0x2c>
1005c952:	20bf      	movs	r0, #191	@ 0xbf
1005c954:	4004      	ands	r4, r0
1005c956:	2211      	movs	r2, #17
1005c958:	4810      	ldr	r0, [pc, #64]	@ (1005c99c <__arm_cp.42_1>)
1005c95a:	6800      	ldr	r0, [r0, #0]
1005c95c:	0761      	lsls	r1, r4, #29
1005c95e:	0ec9      	lsrs	r1, r1, #27
1005c960:	1840      	adds	r0, r0, r1
1005c962:	6900      	ldr	r0, [r0, #16]
1005c964:	2303      	movs	r3, #3
1005c966:	4621      	mov	r1, r4
1005c968:	f7f5 fcb8 	bl	100522dc <aci_event_fifo_push_header>
1005c96c:	2800      	cmp	r0, #0
1005c96e:	d012      	beq.n	1005c996 <hci_le_advertising_set_terminated_event_push+0x6a>
1005c970:	4601      	mov	r1, r0
1005c972:	200f      	movs	r0, #15
1005c974:	72c8      	strb	r0, [r1, #11]
1005c976:	20ff      	movs	r0, #255	@ 0xff
1005c978:	7288      	strb	r0, [r1, #10]
1005c97a:	730f      	strb	r7, [r1, #12]
1005c97c:	724e      	strb	r6, [r1, #9]
1005c97e:	720d      	strb	r5, [r1, #8]
1005c980:	2012      	movs	r0, #18
1005c982:	71c8      	strb	r0, [r1, #7]
1005c984:	2006      	movs	r0, #6
1005c986:	7188      	strb	r0, [r1, #6]
1005c988:	203e      	movs	r0, #62	@ 0x3e
1005c98a:	7148      	strb	r0, [r1, #5]
1005c98c:	2004      	movs	r0, #4
1005c98e:	7108      	strb	r0, [r1, #4]
1005c990:	4620      	mov	r0, r4
1005c992:	f7f5 fd40 	bl	10052416 <aci_event_fifo_push>
1005c996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c998 <__arm_cp.42_0>:
1005c998:	20000f20 	.word	0x20000f20

1005c99c <__arm_cp.42_1>:
1005c99c:	20000ed0 	.word	0x20000ed0

1005c9a0 <EADV_stop_isr>:
1005c9a0:	b5b0      	push	{r4, r5, r7, lr}
1005c9a2:	4604      	mov	r4, r0
1005c9a4:	20d1      	movs	r0, #209	@ 0xd1
1005c9a6:	5c20      	ldrb	r0, [r4, r0]
1005c9a8:	f000 fdbc 	bl	1005d524 <LL_sched_set_cancel_request>
1005c9ac:	4625      	mov	r5, r4
1005c9ae:	35ce      	adds	r5, #206	@ 0xce
1005c9b0:	78a8      	ldrb	r0, [r5, #2]
1005c9b2:	f000 fdb7 	bl	1005d524 <LL_sched_set_cancel_request>
1005c9b6:	20ce      	movs	r0, #206	@ 0xce
1005c9b8:	2100      	movs	r1, #0
1005c9ba:	5221      	strh	r1, [r4, r0]
1005c9bc:	7aa8      	ldrb	r0, [r5, #10]
1005c9be:	28ff      	cmp	r0, #255	@ 0xff
1005c9c0:	d001      	beq.n	1005c9c6 <EADV_stop_isr+0x26>
1005c9c2:	f7fb fa66 	bl	10057e92 <llc_conn_release_conn_idx>
1005c9c6:	20ff      	movs	r0, #255	@ 0xff
1005c9c8:	72a8      	strb	r0, [r5, #10]
1005c9ca:	bdb0      	pop	{r4, r5, r7, pc}

1005c9cc <ADV_createslot>:
1005c9cc:	b570      	push	{r4, r5, r6, lr}
1005c9ce:	4604      	mov	r4, r0
1005c9d0:	20c5      	movs	r0, #197	@ 0xc5
1005c9d2:	5c20      	ldrb	r0, [r4, r0]
1005c9d4:	f7fc f9be 	bl	10058d54 <llc_convert_hci_phy_enum_to_hw_phy>
1005c9d8:	4605      	mov	r5, r0
1005c9da:	4626      	mov	r6, r4
1005c9dc:	36c5      	adds	r6, #197	@ 0xc5
1005c9de:	7af0      	ldrb	r0, [r6, #11]
1005c9e0:	4629      	mov	r1, r5
1005c9e2:	f7f4 fcc4 	bl	1005136e <BLEPLAT_CNTR_SmSetTxPhy>
1005c9e6:	7af0      	ldrb	r0, [r6, #11]
1005c9e8:	4629      	mov	r1, r5
1005c9ea:	f7f4 fc54 	bl	10051296 <BLEPLAT_CNTR_SmSetRxPhy>
1005c9ee:	f7f3 ffa0 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
1005c9f2:	f000 fd11 	bl	1005d418 <LL_get_tx_common_buffer_p>
1005c9f6:	4602      	mov	r2, r0
1005c9f8:	7db0      	ldrb	r0, [r6, #22]
1005c9fa:	4621      	mov	r1, r4
1005c9fc:	f000 f801 	bl	1005ca02 <EADV_vPrepareAdvOrRspLegacyPacket>
1005ca00:	bd70      	pop	{r4, r5, r6, pc}

1005ca02 <EADV_vPrepareAdvOrRspLegacyPacket>:
1005ca02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ca04:	4614      	mov	r4, r2
1005ca06:	460d      	mov	r5, r1
1005ca08:	4606      	mov	r6, r0
1005ca0a:	460f      	mov	r7, r1
1005ca0c:	37b8      	adds	r7, #184	@ 0xb8
1005ca0e:	2004      	movs	r0, #4
1005ca10:	2e00      	cmp	r6, #0
1005ca12:	4601      	mov	r1, r0
1005ca14:	d10d      	bne.n	1005ca32 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005ca16:	8839      	ldrh	r1, [r7, #0]
1005ca18:	074a      	lsls	r2, r1, #29
1005ca1a:	d407      	bmi.n	1005ca2c <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005ca1c:	2203      	movs	r2, #3
1005ca1e:	4011      	ands	r1, r2
1005ca20:	424a      	negs	r2, r1
1005ca22:	414a      	adcs	r2, r1
1005ca24:	2902      	cmp	r1, #2
1005ca26:	d003      	beq.n	1005ca30 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005ca28:	0051      	lsls	r1, r2, #1
1005ca2a:	e002      	b.n	1005ca32 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005ca2c:	2101      	movs	r1, #1
1005ca2e:	e000      	b.n	1005ca32 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005ca30:	2106      	movs	r1, #6
1005ca32:	7021      	strb	r1, [r4, #0]
1005ca34:	2e00      	cmp	r6, #0
1005ca36:	d107      	bne.n	1005ca48 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005ca38:	8839      	ldrh	r1, [r7, #0]
1005ca3a:	4001      	ands	r1, r0
1005ca3c:	d104      	bne.n	1005ca48 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005ca3e:	202e      	movs	r0, #46	@ 0x2e
1005ca40:	5c28      	ldrb	r0, [r5, r0]
1005ca42:	1d80      	adds	r0, r0, #6
1005ca44:	7060      	strb	r0, [r4, #1]
1005ca46:	e00f      	b.n	1005ca68 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005ca48:	2e00      	cmp	r6, #0
1005ca4a:	d004      	beq.n	1005ca56 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005ca4c:	4628      	mov	r0, r5
1005ca4e:	3042      	adds	r0, #66	@ 0x42
1005ca50:	7800      	ldrb	r0, [r0, #0]
1005ca52:	1d80      	adds	r0, r0, #6
1005ca54:	e000      	b.n	1005ca58 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005ca56:	200c      	movs	r0, #12
1005ca58:	7060      	strb	r0, [r4, #1]
1005ca5a:	4620      	mov	r0, r4
1005ca5c:	3008      	adds	r0, #8
1005ca5e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005ca60:	3109      	adds	r1, #9
1005ca62:	2206      	movs	r2, #6
1005ca64:	f7f2 feee 	bl	1004f844 <BLEPLAT_MemCpy>
1005ca68:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005ca6a:	1ca0      	adds	r0, r4, #2
1005ca6c:	1c49      	adds	r1, r1, #1
1005ca6e:	2206      	movs	r2, #6
1005ca70:	f7f2 fee8 	bl	1004f844 <BLEPLAT_MemCpy>
1005ca74:	7820      	ldrb	r0, [r4, #0]
1005ca76:	212f      	movs	r1, #47	@ 0x2f
1005ca78:	4001      	ands	r1, r0
1005ca7a:	7021      	strb	r1, [r4, #0]
1005ca7c:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005ca7e:	7800      	ldrb	r0, [r0, #0]
1005ca80:	07c0      	lsls	r0, r0, #31
1005ca82:	0e40      	lsrs	r0, r0, #25
1005ca84:	1840      	adds	r0, r0, r1
1005ca86:	7020      	strb	r0, [r4, #0]
1005ca88:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005ca8a:	7a09      	ldrb	r1, [r1, #8]
1005ca8c:	01c9      	lsls	r1, r1, #7
1005ca8e:	1808      	adds	r0, r1, r0
1005ca90:	7020      	strb	r0, [r4, #0]
1005ca92:	f000 f9ed 	bl	1005ce70 <llc_get_channel_sel_algo2_enabled>
1005ca96:	7821      	ldrb	r1, [r4, #0]
1005ca98:	0140      	lsls	r0, r0, #5
1005ca9a:	4308      	orrs	r0, r1
1005ca9c:	7020      	strb	r0, [r4, #0]
1005ca9e:	4271      	negs	r1, r6
1005caa0:	4171      	adcs	r1, r6
1005caa2:	8838      	ldrh	r0, [r7, #0]
1005caa4:	2204      	movs	r2, #4
1005caa6:	4002      	ands	r2, r0
1005caa8:	0890      	lsrs	r0, r2, #2
1005caaa:	4008      	ands	r0, r1
1005caac:	d101      	bne.n	1005cab2 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005caae:	2708      	movs	r7, #8
1005cab0:	e000      	b.n	1005cab4 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005cab2:	270e      	movs	r7, #14
1005cab4:	2800      	cmp	r0, #0
1005cab6:	d001      	beq.n	1005cabc <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005cab8:	200c      	movs	r0, #12
1005caba:	e011      	b.n	1005cae0 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005cabc:	2e00      	cmp	r6, #0
1005cabe:	d001      	beq.n	1005cac4 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005cac0:	203c      	movs	r0, #60	@ 0x3c
1005cac2:	e000      	b.n	1005cac6 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005cac4:	2028      	movs	r0, #40	@ 0x28
1005cac6:	5829      	ldr	r1, [r5, r0]
1005cac8:	2e00      	cmp	r6, #0
1005caca:	d001      	beq.n	1005cad0 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005cacc:	2042      	movs	r0, #66	@ 0x42
1005cace:	e000      	b.n	1005cad2 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005cad0:	202e      	movs	r0, #46	@ 0x2e
1005cad2:	5a2d      	ldrh	r5, [r5, r0]
1005cad4:	19e0      	adds	r0, r4, r7
1005cad6:	462a      	mov	r2, r5
1005cad8:	f7f2 feb4 	bl	1004f844 <BLEPLAT_MemCpy>
1005cadc:	1978      	adds	r0, r7, r5
1005cade:	1e80      	subs	r0, r0, #2
1005cae0:	7060      	strb	r0, [r4, #1]
1005cae2:	2000      	movs	r0, #0
1005cae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005cae8 <ADV_ISR_connect_request_received>:
1005cae8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005caea:	b085      	sub	sp, #20
1005caec:	4616      	mov	r6, r2
1005caee:	460d      	mov	r5, r1
1005caf0:	4604      	mov	r4, r0
1005caf2:	f7f3 ffff 	bl	10050af4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005caf6:	f7f2 ffb1 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1005cafa:	2003      	movs	r0, #3
1005cafc:	43c0      	mvns	r0, r0
1005cafe:	1cc1      	adds	r1, r0, #3
1005cb00:	4668      	mov	r0, sp
1005cb02:	8101      	strh	r1, [r0, #8]
1005cb04:	2101      	movs	r1, #1
1005cb06:	8201      	strh	r1, [r0, #16]
1005cb08:	7341      	strb	r1, [r0, #13]
1005cb0a:	21be      	movs	r1, #190	@ 0xbe
1005cb0c:	5a61      	ldrh	r1, [r4, r1]
1005cb0e:	7281      	strb	r1, [r0, #10]
1005cb10:	4627      	mov	r7, r4
1005cb12:	37be      	adds	r7, #190	@ 0xbe
1005cb14:	7eba      	ldrb	r2, [r7, #26]
1005cb16:	72c2      	strb	r2, [r0, #11]
1005cb18:	7cba      	ldrb	r2, [r7, #18]
1005cb1a:	7382      	strb	r2, [r0, #14]
1005cb1c:	4a0e      	ldr	r2, [pc, #56]	@ (1005cb58 <__arm_cp.47_0>)
1005cb1e:	1a89      	subs	r1, r1, r2
1005cb20:	1e4a      	subs	r2, r1, #1
1005cb22:	4191      	sbcs	r1, r2
1005cb24:	73c1      	strb	r1, [r0, #15]
1005cb26:	7301      	strb	r1, [r0, #12]
1005cb28:	9601      	str	r6, [sp, #4]
1005cb2a:	9500      	str	r5, [sp, #0]
1005cb2c:	f7fb f9ec 	bl	10057f08 <llc_conn_go_to_connect>
1005cb30:	4620      	mov	r0, r4
1005cb32:	3028      	adds	r0, #40	@ 0x28
1005cb34:	f7ff f934 	bl	1005bda0 <LL_eadv_switchbackupdata_data_struc>
1005cb38:	343c      	adds	r4, #60	@ 0x3c
1005cb3a:	4620      	mov	r0, r4
1005cb3c:	f7ff f930 	bl	1005bda0 <LL_eadv_switchbackupdata_data_struc>
1005cb40:	2000      	movs	r0, #0
1005cb42:	7438      	strb	r0, [r7, #16]
1005cb44:	7cb8      	ldrb	r0, [r7, #18]
1005cb46:	f000 fd5d 	bl	1005d604 <LL_sched_engine>
1005cb4a:	7e38      	ldrb	r0, [r7, #24]
1005cb4c:	0780      	lsls	r0, r0, #30
1005cb4e:	d501      	bpl.n	1005cb54 <ADV_ISR_connect_request_received+0x6c>
1005cb50:	f7fc f870 	bl	10058c34 <llc_priv_stop_privacy_timer_ucfg_weak>
1005cb54:	b005      	add	sp, #20
1005cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005cb58 <__arm_cp.47_0>:
1005cb58:	0000fffc 	.word	0x0000fffc

1005cb5c <ADV_ISR>:
1005cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cb5e:	b08d      	sub	sp, #52	@ 0x34
1005cb60:	4605      	mov	r5, r0
1005cb62:	f000 fc61 	bl	1005d428 <LL_get_rx_common_buffer_p>
1005cb66:	9006      	str	r0, [sp, #24]
1005cb68:	4c87      	ldr	r4, [pc, #540]	@ (1005cd88 <__arm_cp.48_0>)
1005cb6a:	6820      	ldr	r0, [r4, #0]
1005cb6c:	f7f3 ff7b 	bl	10050a66 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005cb70:	4606      	mov	r6, r0
1005cb72:	6820      	ldr	r0, [r4, #0]
1005cb74:	f7f3 ff8e 	bl	10050a94 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005cb78:	4607      	mov	r7, r0
1005cb7a:	20d0      	movs	r0, #208	@ 0xd0
1005cb7c:	5c28      	ldrb	r0, [r5, r0]
1005cb7e:	212c      	movs	r1, #44	@ 0x2c
1005cb80:	4341      	muls	r1, r0
1005cb82:	4a82      	ldr	r2, [pc, #520]	@ (1005cd8c <__arm_cp.48_1>)
1005cb84:	6812      	ldr	r2, [r2, #0]
1005cb86:	1851      	adds	r1, r2, r1
1005cb88:	7d89      	ldrb	r1, [r1, #22]
1005cb8a:	2914      	cmp	r1, #20
1005cb8c:	d103      	bne.n	1005cb96 <ADV_ISR+0x3a>
1005cb8e:	210a      	movs	r1, #10
1005cb90:	2203      	movs	r2, #3
1005cb92:	f000 fefd 	bl	1005d990 <LL_sched_set_priority>
1005cb96:	462c      	mov	r4, r5
1005cb98:	34b4      	adds	r4, #180	@ 0xb4
1005cb9a:	4628      	mov	r0, r5
1005cb9c:	30db      	adds	r0, #219	@ 0xdb
1005cb9e:	9004      	str	r0, [sp, #16]
1005cba0:	2e00      	cmp	r6, #0
1005cba2:	d038      	beq.n	1005cc16 <ADV_ISR+0xba>
1005cba4:	9505      	str	r5, [sp, #20]
1005cba6:	2700      	movs	r7, #0
1005cba8:	970c      	str	r7, [sp, #48]	@ 0x30
1005cbaa:	970b      	str	r7, [sp, #44]	@ 0x2c
1005cbac:	9d06      	ldr	r5, [sp, #24]
1005cbae:	7828      	ldrb	r0, [r5, #0]
1005cbb0:	09c0      	lsrs	r0, r0, #7
1005cbb2:	a90b      	add	r1, sp, #44	@ 0x2c
1005cbb4:	7008      	strb	r0, [r1, #0]
1005cbb6:	4876      	ldr	r0, [pc, #472]	@ (1005cd90 <__arm_cp.48_2>)
1005cbb8:	6800      	ldr	r0, [r0, #0]
1005cbba:	22d8      	movs	r2, #216	@ 0xd8
1005cbbc:	5c80      	ldrb	r0, [r0, r2]
1005cbbe:	9003      	str	r0, [sp, #12]
1005cbc0:	1c48      	adds	r0, r1, #1
1005cbc2:	4629      	mov	r1, r5
1005cbc4:	3108      	adds	r1, #8
1005cbc6:	2606      	movs	r6, #6
1005cbc8:	4632      	mov	r2, r6
1005cbca:	f7f2 fe3b 	bl	1004f844 <BLEPLAT_MemCpy>
1005cbce:	970a      	str	r7, [sp, #40]	@ 0x28
1005cbd0:	9709      	str	r7, [sp, #36]	@ 0x24
1005cbd2:	7828      	ldrb	r0, [r5, #0]
1005cbd4:	0640      	lsls	r0, r0, #25
1005cbd6:	0fc0      	lsrs	r0, r0, #31
1005cbd8:	a909      	add	r1, sp, #36	@ 0x24
1005cbda:	7008      	strb	r0, [r1, #0]
1005cbdc:	1c48      	adds	r0, r1, #1
1005cbde:	1ca9      	adds	r1, r5, #2
1005cbe0:	4632      	mov	r2, r6
1005cbe2:	f7f2 fe2f 	bl	1004f844 <BLEPLAT_MemCpy>
1005cbe6:	7828      	ldrb	r0, [r5, #0]
1005cbe8:	260f      	movs	r6, #15
1005cbea:	4006      	ands	r6, r0
1005cbec:	2e05      	cmp	r6, #5
1005cbee:	d101      	bne.n	1005cbf4 <ADV_ISR+0x98>
1005cbf0:	f7f2 ff34 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1005cbf4:	7be3      	ldrb	r3, [r4, #15]
1005cbf6:	7922      	ldrb	r2, [r4, #4]
1005cbf8:	9702      	str	r7, [sp, #8]
1005cbfa:	ad07      	add	r5, sp, #28
1005cbfc:	9501      	str	r5, [sp, #4]
1005cbfe:	9805      	ldr	r0, [sp, #20]
1005cc00:	3084      	adds	r0, #132	@ 0x84
1005cc02:	9000      	str	r0, [sp, #0]
1005cc04:	a809      	add	r0, sp, #36	@ 0x24
1005cc06:	4631      	mov	r1, r6
1005cc08:	f006 faee 	bl	100631e8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005cc0c:	0841      	lsrs	r1, r0, #1
1005cc0e:	297e      	cmp	r1, #126	@ 0x7e
1005cc10:	d807      	bhi.n	1005cc22 <ADV_ISR+0xc6>
1005cc12:	4601      	mov	r1, r0
1005cc14:	e006      	b.n	1005cc24 <ADV_ISR+0xc8>
1005cc16:	2601      	movs	r6, #1
1005cc18:	2f00      	cmp	r7, #0
1005cc1a:	d154      	bne.n	1005ccc6 <ADV_ISR+0x16a>
1005cc1c:	2700      	movs	r7, #0
1005cc1e:	8027      	strh	r7, [r4, #0]
1005cc20:	e056      	b.n	1005ccd0 <ADV_ISR+0x174>
1005cc22:	2101      	movs	r1, #1
1005cc24:	7029      	strb	r1, [r5, #0]
1005cc26:	9d05      	ldr	r5, [sp, #20]
1005cc28:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005cc2a:	680a      	ldr	r2, [r1, #0]
1005cc2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005cc2e:	429a      	cmp	r2, r3
1005cc30:	d12d      	bne.n	1005cc8e <ADV_ISR+0x132>
1005cc32:	6849      	ldr	r1, [r1, #4]
1005cc34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005cc36:	4291      	cmp	r1, r2
1005cc38:	d129      	bne.n	1005cc8e <ADV_ISR+0x132>
1005cc3a:	4607      	mov	r7, r0
1005cc3c:	3fff      	subs	r7, #255	@ 0xff
1005cc3e:	1e79      	subs	r1, r7, #1
1005cc40:	418f      	sbcs	r7, r1
1005cc42:	2e03      	cmp	r6, #3
1005cc44:	d123      	bne.n	1005cc8e <ADV_ISR+0x132>
1005cc46:	28ff      	cmp	r0, #255	@ 0xff
1005cc48:	d021      	beq.n	1005cc8e <ADV_ISR+0x132>
1005cc4a:	88a0      	ldrh	r0, [r4, #4]
1005cc4c:	2701      	movs	r7, #1
1005cc4e:	0780      	lsls	r0, r0, #30
1005cc50:	d51d      	bpl.n	1005cc8e <ADV_ISR+0x132>
1005cc52:	9803      	ldr	r0, [sp, #12]
1005cc54:	2801      	cmp	r0, #1
1005cc56:	d11a      	bne.n	1005cc8e <ADV_ISR+0x132>
1005cc58:	4628      	mov	r0, r5
1005cc5a:	f7f3 ff4b 	bl	10050af4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005cc5e:	7e60      	ldrb	r0, [r4, #25]
1005cc60:	2801      	cmp	r0, #1
1005cc62:	d109      	bne.n	1005cc78 <ADV_ISR+0x11c>
1005cc64:	8960      	ldrh	r0, [r4, #10]
1005cc66:	494b      	ldr	r1, [pc, #300]	@ (1005cd94 <__arm_cp.48_3>)
1005cc68:	4288      	cmp	r0, r1
1005cc6a:	d005      	beq.n	1005cc78 <ADV_ISR+0x11c>
1005cc6c:	aa07      	add	r2, sp, #28
1005cc6e:	7811      	ldrb	r1, [r2, #0]
1005cc70:	b2c0      	uxtb	r0, r0
1005cc72:	1c52      	adds	r2, r2, #1
1005cc74:	f000 f892 	bl	1005cd9c <hci_le_scan_request_received_event_push>
1005cc78:	7f20      	ldrb	r0, [r4, #28]
1005cc7a:	f7f4 fb57 	bl	1005132c <BLEPLAT_CNTR_SmSetTxMode>
1005cc7e:	2001      	movs	r0, #1
1005cc80:	9904      	ldr	r1, [sp, #16]
1005cc82:	7008      	strb	r0, [r1, #0]
1005cc84:	4628      	mov	r0, r5
1005cc86:	f7ff fea1 	bl	1005c9cc <ADV_createslot>
1005cc8a:	2600      	movs	r6, #0
1005cc8c:	e020      	b.n	1005ccd0 <ADV_ISR+0x174>
1005cc8e:	88a0      	ldrh	r0, [r4, #4]
1005cc90:	07c0      	lsls	r0, r0, #31
1005cc92:	d01a      	beq.n	1005ccca <ADV_ISR+0x16e>
1005cc94:	2e05      	cmp	r6, #5
1005cc96:	d118      	bne.n	1005ccca <ADV_ISR+0x16e>
1005cc98:	9806      	ldr	r0, [sp, #24]
1005cc9a:	f7fa ffbf 	bl	10057c1c <llc_conn_check_connect_request_params>
1005cc9e:	2801      	cmp	r0, #1
1005cca0:	d113      	bne.n	1005ccca <ADV_ISR+0x16e>
1005cca2:	9908      	ldr	r1, [sp, #32]
1005cca4:	9807      	ldr	r0, [sp, #28]
1005cca6:	f7fa fd91 	bl	100577cc <llc_conn_list_search_address>
1005ccaa:	4241      	negs	r1, r0
1005ccac:	4141      	adcs	r1, r0
1005ccae:	4039      	ands	r1, r7
1005ccb0:	2901      	cmp	r1, #1
1005ccb2:	d10a      	bne.n	1005ccca <ADV_ISR+0x16e>
1005ccb4:	9803      	ldr	r0, [sp, #12]
1005ccb6:	2801      	cmp	r0, #1
1005ccb8:	d107      	bne.n	1005ccca <ADV_ISR+0x16e>
1005ccba:	aa07      	add	r2, sp, #28
1005ccbc:	4628      	mov	r0, r5
1005ccbe:	9906      	ldr	r1, [sp, #24]
1005ccc0:	f7ef f9e2 	bl	1004c088 <ADV_ISR_connect_request_received_ucfg>
1005ccc4:	2601      	movs	r6, #1
1005ccc6:	2700      	movs	r7, #0
1005ccc8:	e002      	b.n	1005ccd0 <ADV_ISR+0x174>
1005ccca:	2700      	movs	r7, #0
1005cccc:	8027      	strh	r7, [r4, #0]
1005ccce:	2601      	movs	r6, #1
1005ccd0:	8821      	ldrh	r1, [r4, #0]
1005ccd2:	7fa0      	ldrb	r0, [r4, #30]
1005ccd4:	2800      	cmp	r0, #0
1005ccd6:	d022      	beq.n	1005cd1e <ADV_ISR+0x1c2>
1005ccd8:	2900      	cmp	r1, #0
1005ccda:	d122      	bne.n	1005cd22 <ADV_ISR+0x1c6>
1005ccdc:	1e40      	subs	r0, r0, #1
1005ccde:	77a0      	strb	r0, [r4, #30]
1005cce0:	88a0      	ldrh	r0, [r4, #4]
1005cce2:	2103      	movs	r1, #3
1005cce4:	4001      	ands	r1, r0
1005cce6:	1e48      	subs	r0, r1, #1
1005cce8:	4181      	sbcs	r1, r0
1005ccea:	0048      	lsls	r0, r1, #1
1005ccec:	8020      	strh	r0, [r4, #0]
1005ccee:	4628      	mov	r0, r5
1005ccf0:	f7ff fdd4 	bl	1005c89c <UTIL_u8GetNextAdvChannel>
1005ccf4:	4601      	mov	r1, r0
1005ccf6:	7f20      	ldrb	r0, [r4, #28]
1005ccf8:	f7f4 fa59 	bl	100511ae <BLEPLAT_CNTR_SmSetRemapChan>
1005ccfc:	7f20      	ldrb	r0, [r4, #28]
1005ccfe:	f7f4 fb15 	bl	1005132c <BLEPLAT_CNTR_SmSetTxMode>
1005cd02:	4628      	mov	r0, r5
1005cd04:	f7f3 ffea 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
1005cd08:	f7f2 fea8 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1005cd0c:	2000      	movs	r0, #0
1005cd0e:	9904      	ldr	r1, [sp, #16]
1005cd10:	7008      	strb	r0, [r1, #0]
1005cd12:	4628      	mov	r0, r5
1005cd14:	f7ff fe5a 	bl	1005c9cc <ADV_createslot>
1005cd18:	f7f2 feb8 	bl	1004fa8c <BLEPLAT_SetRadioCloseTimeout>
1005cd1c:	e02a      	b.n	1005cd74 <ADV_ISR+0x218>
1005cd1e:	2900      	cmp	r1, #0
1005cd20:	d019      	beq.n	1005cd56 <ADV_ISR+0x1fa>
1005cd22:	4819      	ldr	r0, [pc, #100]	@ (1005cd88 <__arm_cp.48_0>)
1005cd24:	6800      	ldr	r0, [r0, #0]
1005cd26:	f7f3 feb5 	bl	10050a94 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005cd2a:	2800      	cmp	r0, #0
1005cd2c:	d022      	beq.n	1005cd74 <ADV_ISR+0x218>
1005cd2e:	4628      	mov	r0, r5
1005cd30:	f7f3 ffd4 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
1005cd34:	7c60      	ldrb	r0, [r4, #17]
1005cd36:	2801      	cmp	r0, #1
1005cd38:	d001      	beq.n	1005cd3e <ADV_ISR+0x1e2>
1005cd3a:	4917      	ldr	r1, [pc, #92]	@ (1005cd98 <__arm_cp.48_4>)
1005cd3c:	e000      	b.n	1005cd40 <ADV_ISR+0x1e4>
1005cd3e:	2146      	movs	r1, #70	@ 0x46
1005cd40:	3514      	adds	r5, #20
1005cd42:	4628      	mov	r0, r5
1005cd44:	f7f4 f82b 	bl	10050d9e <BLEPLAT_CNTR_SetRcvLen>
1005cd48:	8820      	ldrh	r0, [r4, #0]
1005cd4a:	1e40      	subs	r0, r0, #1
1005cd4c:	8020      	strh	r0, [r4, #0]
1005cd4e:	f7f3 fdf0 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
1005cd52:	2600      	movs	r6, #0
1005cd54:	e00e      	b.n	1005cd74 <ADV_ISR+0x218>
1005cd56:	f7f2 fe81 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1005cd5a:	4628      	mov	r0, r5
1005cd5c:	f7f3 ffbe 	bl	10050cdc <BLEPLAT_CNTR_PacketSetPllTrig>
1005cd60:	88e0      	ldrh	r0, [r4, #6]
1005cd62:	1e40      	subs	r0, r0, #1
1005cd64:	80e0      	strh	r0, [r4, #6]
1005cd66:	2100      	movs	r1, #0
1005cd68:	4628      	mov	r0, r5
1005cd6a:	f7ff fcb7 	bl	1005c6dc <ADV_skiproutine>
1005cd6e:	7f20      	ldrb	r0, [r4, #28]
1005cd70:	f000 fc48 	bl	1005d604 <LL_sched_engine>
1005cd74:	2f00      	cmp	r7, #0
1005cd76:	d002      	beq.n	1005cd7e <ADV_ISR+0x222>
1005cd78:	8820      	ldrh	r0, [r4, #0]
1005cd7a:	1e40      	subs	r0, r0, #1
1005cd7c:	8020      	strh	r0, [r4, #0]
1005cd7e:	f7f5 faa9 	bl	100522d4 <log_notify_us_flush_ucfg_weak>
1005cd82:	4630      	mov	r0, r6
1005cd84:	b00d      	add	sp, #52	@ 0x34
1005cd86:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005cd88 <__arm_cp.48_0>:
1005cd88:	20000f1c 	.word	0x20000f1c

1005cd8c <__arm_cp.48_1>:
1005cd8c:	20000f28 	.word	0x20000f28

1005cd90 <__arm_cp.48_2>:
1005cd90:	20000f20 	.word	0x20000f20

1005cd94 <__arm_cp.48_3>:
1005cd94:	0000fffc 	.word	0x0000fffc

1005cd98 <__arm_cp.48_4>:
1005cd98:	000002ee 	.word	0x000002ee

1005cd9c <hci_le_scan_request_received_event_push>:
1005cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005cd9e:	460e      	mov	r6, r1
1005cda0:	4605      	mov	r5, r0
1005cda2:	4815      	ldr	r0, [pc, #84]	@ (1005cdf8 <__arm_cp.49_0>)
1005cda4:	6800      	ldr	r0, [r0, #0]
1005cda6:	213d      	movs	r1, #61	@ 0x3d
1005cda8:	5c41      	ldrb	r1, [r0, r1]
1005cdaa:	0689      	lsls	r1, r1, #26
1005cdac:	d522      	bpl.n	1005cdf4 <hci_le_scan_request_received_event_push+0x58>
1005cdae:	303d      	adds	r0, #61	@ 0x3d
1005cdb0:	7ac0      	ldrb	r0, [r0, #11]
1005cdb2:	0740      	lsls	r0, r0, #29
1005cdb4:	d51e      	bpl.n	1005cdf4 <hci_le_scan_request_received_event_push+0x58>
1005cdb6:	4614      	mov	r4, r2
1005cdb8:	4810      	ldr	r0, [pc, #64]	@ (1005cdfc <__arm_cp.49_1>)
1005cdba:	6800      	ldr	r0, [r0, #0]
1005cdbc:	6940      	ldr	r0, [r0, #20]
1005cdbe:	21a1      	movs	r1, #161	@ 0xa1
1005cdc0:	222b      	movs	r2, #43	@ 0x2b
1005cdc2:	2303      	movs	r3, #3
1005cdc4:	f7f5 fa8a 	bl	100522dc <aci_event_fifo_push_header>
1005cdc8:	2800      	cmp	r0, #0
1005cdca:	d013      	beq.n	1005cdf4 <hci_le_scan_request_received_event_push+0x58>
1005cdcc:	4607      	mov	r7, r0
1005cdce:	7246      	strb	r6, [r0, #9]
1005cdd0:	7205      	strb	r5, [r0, #8]
1005cdd2:	300a      	adds	r0, #10
1005cdd4:	2206      	movs	r2, #6
1005cdd6:	4621      	mov	r1, r4
1005cdd8:	f7f2 fd34 	bl	1004f844 <BLEPLAT_MemCpy>
1005cddc:	2013      	movs	r0, #19
1005cdde:	71f8      	strb	r0, [r7, #7]
1005cde0:	2009      	movs	r0, #9
1005cde2:	71b8      	strb	r0, [r7, #6]
1005cde4:	203e      	movs	r0, #62	@ 0x3e
1005cde6:	7178      	strb	r0, [r7, #5]
1005cde8:	2004      	movs	r0, #4
1005cdea:	7138      	strb	r0, [r7, #4]
1005cdec:	20a1      	movs	r0, #161	@ 0xa1
1005cdee:	4639      	mov	r1, r7
1005cdf0:	f7f5 fb11 	bl	10052416 <aci_event_fifo_push>
1005cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005cdf6:	46c0      	nop			@ (mov r8, r8)

1005cdf8 <__arm_cp.49_0>:
1005cdf8:	20000f20 	.word	0x20000f20

1005cdfc <__arm_cp.49_1>:
1005cdfc:	20000ed0 	.word	0x20000ed0

1005ce00 <EADV_start_request_radio_tasks>:
1005ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ce02:	4604      	mov	r4, r0
1005ce04:	20d8      	movs	r0, #216	@ 0xd8
1005ce06:	21ff      	movs	r1, #255	@ 0xff
1005ce08:	5421      	strb	r1, [r4, r0]
1005ce0a:	20b8      	movs	r0, #184	@ 0xb8
1005ce0c:	5a25      	ldrh	r5, [r4, r0]
1005ce0e:	2701      	movs	r7, #1
1005ce10:	402f      	ands	r7, r5
1005ce12:	4626      	mov	r6, r4
1005ce14:	36d8      	adds	r6, #216	@ 0xd8
1005ce16:	2f00      	cmp	r7, #0
1005ce18:	d004      	beq.n	1005ce24 <EADV_start_request_radio_tasks+0x24>
1005ce1a:	f7fb fc0f 	bl	1005863c <llc_conn_reserve_conn_idx>
1005ce1e:	7030      	strb	r0, [r6, #0]
1005ce20:	28ff      	cmp	r0, #255	@ 0xff
1005ce22:	d022      	beq.n	1005ce6a <EADV_start_request_radio_tasks+0x6a>
1005ce24:	34b8      	adds	r4, #184	@ 0xb8
1005ce26:	f000 fdf1 	bl	1005da0c <LL_sched_reserve_taskslot>
1005ce2a:	7620      	strb	r0, [r4, #24]
1005ce2c:	28ff      	cmp	r0, #255	@ 0xff
1005ce2e:	d013      	beq.n	1005ce58 <EADV_start_request_radio_tasks+0x58>
1005ce30:	2100      	movs	r1, #0
1005ce32:	06e8      	lsls	r0, r5, #27
1005ce34:	d41a      	bmi.n	1005ce6c <EADV_start_request_radio_tasks+0x6c>
1005ce36:	460d      	mov	r5, r1
1005ce38:	f000 fde8 	bl	1005da0c <LL_sched_reserve_taskslot>
1005ce3c:	4629      	mov	r1, r5
1005ce3e:	7660      	strb	r0, [r4, #25]
1005ce40:	28ff      	cmp	r0, #255	@ 0xff
1005ce42:	d113      	bne.n	1005ce6c <EADV_start_request_radio_tasks+0x6c>
1005ce44:	2f00      	cmp	r7, #0
1005ce46:	d002      	beq.n	1005ce4e <EADV_start_request_radio_tasks+0x4e>
1005ce48:	7830      	ldrb	r0, [r6, #0]
1005ce4a:	f7fb f822 	bl	10057e92 <llc_conn_release_conn_idx>
1005ce4e:	7e20      	ldrb	r0, [r4, #24]
1005ce50:	f000 fdfe 	bl	1005da50 <LL_sched_release_taskslot>
1005ce54:	2107      	movs	r1, #7
1005ce56:	e009      	b.n	1005ce6c <EADV_start_request_radio_tasks+0x6c>
1005ce58:	2107      	movs	r1, #7
1005ce5a:	2f00      	cmp	r7, #0
1005ce5c:	d006      	beq.n	1005ce6c <EADV_start_request_radio_tasks+0x6c>
1005ce5e:	7830      	ldrb	r0, [r6, #0]
1005ce60:	460c      	mov	r4, r1
1005ce62:	f7fb f816 	bl	10057e92 <llc_conn_release_conn_idx>
1005ce66:	4621      	mov	r1, r4
1005ce68:	e000      	b.n	1005ce6c <EADV_start_request_radio_tasks+0x6c>
1005ce6a:	210c      	movs	r1, #12
1005ce6c:	4608      	mov	r0, r1
1005ce6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ce70 <llc_get_channel_sel_algo2_enabled>:
1005ce70:	b580      	push	{r7, lr}
1005ce72:	f000 fae7 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005ce76:	214e      	movs	r1, #78	@ 0x4e
1005ce78:	5c40      	ldrb	r0, [r0, r1]
1005ce7a:	bd80      	pop	{r7, pc}

1005ce7c <LL_force_chsel_1>:
1005ce7c:	b510      	push	{r4, lr}
1005ce7e:	4244      	negs	r4, r0
1005ce80:	4144      	adcs	r4, r0
1005ce82:	f000 fadf 	bl	1005d444 <llc_get_linkms_cntxt_p>
1005ce86:	214e      	movs	r1, #78	@ 0x4e
1005ce88:	5444      	strb	r4, [r0, r1]
1005ce8a:	2000      	movs	r0, #0
1005ce8c:	bd10      	pop	{r4, pc}

1005ce8e <llc_eadv_max_supported_data_check_ucfg_weak>:
1005ce8e:	2000      	movs	r0, #0
1005ce90:	4770      	bx	lr

1005ce92 <LL_eadv_start_extended_ucfg_weak>:
1005ce92:	4770      	bx	lr

1005ce94 <ext_adv_scan_enabled_ucfg_weak>:
1005ce94:	2000      	movs	r0, #0
1005ce96:	4770      	bx	lr

1005ce98 <BLE_STACK_EndOfRadioActivityCb>:
1005ce98:	4770      	bx	lr
	...

1005ce9c <BLE_STACK_RadioHandler>:
1005ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ce9e:	b083      	sub	sp, #12
1005cea0:	4604      	mov	r4, r0
1005cea2:	484c      	ldr	r0, [pc, #304]	@ (1005cfd4 <__arm_cp.1_0>)
1005cea4:	6004      	str	r4, [r0, #0]
1005cea6:	4620      	mov	r0, r4
1005cea8:	f7f3 fdb9 	bl	10050a1e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1005ceac:	4605      	mov	r5, r0
1005ceae:	4620      	mov	r0, r4
1005ceb0:	f7f3 fd85 	bl	100509be <BLEPLAT_CNTR_IntGetIntStatusDone>
1005ceb4:	4606      	mov	r6, r0
1005ceb6:	4668      	mov	r0, sp
1005ceb8:	f7f2 fdd9 	bl	1004fa6e <BLEPLAT_GetAnchorPoint>
1005cebc:	9900      	ldr	r1, [sp, #0]
1005cebe:	1a09      	subs	r1, r1, r0
1005cec0:	0b4b      	lsrs	r3, r1, #13
1005cec2:	4945      	ldr	r1, [pc, #276]	@ (1005cfd8 <__arm_cp.1_1>)
1005cec4:	680a      	ldr	r2, [r1, #0]
1005cec6:	4611      	mov	r1, r2
1005cec8:	31d8      	adds	r1, #216	@ 0xd8
1005ceca:	2b00      	cmp	r3, #0
1005cecc:	d102      	bne.n	1005ced4 <BLE_STACK_RadioHandler+0x38>
1005cece:	6010      	str	r0, [r2, #0]
1005ced0:	2001      	movs	r0, #1
1005ced2:	e000      	b.n	1005ced6 <BLE_STACK_RadioHandler+0x3a>
1005ced4:	2000      	movs	r0, #0
1005ced6:	7008      	strb	r0, [r1, #0]
1005ced8:	4840      	ldr	r0, [pc, #256]	@ (1005cfdc <__arm_cp.1_2>)
1005ceda:	6800      	ldr	r0, [r0, #0]
1005cedc:	7b44      	ldrb	r4, [r0, #13]
1005cede:	2100      	movs	r1, #0
1005cee0:	2cff      	cmp	r4, #255	@ 0xff
1005cee2:	d00a      	beq.n	1005cefa <BLE_STACK_RadioHandler+0x5e>
1005cee4:	202c      	movs	r0, #44	@ 0x2c
1005cee6:	4360      	muls	r0, r4
1005cee8:	4a3d      	ldr	r2, [pc, #244]	@ (1005cfe0 <__arm_cp.1_3>)
1005ceea:	6812      	ldr	r2, [r2, #0]
1005ceec:	1810      	adds	r0, r2, r0
1005ceee:	7c82      	ldrb	r2, [r0, #18]
1005cef0:	2a00      	cmp	r2, #0
1005cef2:	d002      	beq.n	1005cefa <BLE_STACK_RadioHandler+0x5e>
1005cef4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1005cef6:	68c0      	ldr	r0, [r0, #12]
1005cef8:	e7ff      	b.n	1005cefa <BLE_STACK_RadioHandler+0x5e>
1005cefa:	2701      	movs	r7, #1
1005cefc:	2e00      	cmp	r6, #0
1005cefe:	d003      	beq.n	1005cf08 <BLE_STACK_RadioHandler+0x6c>
1005cf00:	2d00      	cmp	r5, #0
1005cf02:	d101      	bne.n	1005cf08 <BLE_STACK_RadioHandler+0x6c>
1005cf04:	2900      	cmp	r1, #0
1005cf06:	e011      	b.n	1005cf2c <BLE_STACK_RadioHandler+0x90>
1005cf08:	2d00      	cmp	r5, #0
1005cf0a:	d015      	beq.n	1005cf38 <BLE_STACK_RadioHandler+0x9c>
1005cf0c:	4a35      	ldr	r2, [pc, #212]	@ (1005cfe4 <__arm_cp.1_4>)
1005cf0e:	1a8b      	subs	r3, r1, r2
1005cf10:	425a      	negs	r2, r3
1005cf12:	415a      	adcs	r2, r3
1005cf14:	4b34      	ldr	r3, [pc, #208]	@ (1005cfe8 <__arm_cp.1_5>)
1005cf16:	1acd      	subs	r5, r1, r3
1005cf18:	426b      	negs	r3, r5
1005cf1a:	416b      	adcs	r3, r5
1005cf1c:	4d33      	ldr	r5, [pc, #204]	@ (1005cfec <__arm_cp.1_6>)
1005cf1e:	1b4e      	subs	r6, r1, r5
1005cf20:	4275      	negs	r5, r6
1005cf22:	4175      	adcs	r5, r6
1005cf24:	2900      	cmp	r1, #0
1005cf26:	d007      	beq.n	1005cf38 <BLE_STACK_RadioHandler+0x9c>
1005cf28:	4313      	orrs	r3, r2
1005cf2a:	431d      	orrs	r5, r3
1005cf2c:	4e2a      	ldr	r6, [pc, #168]	@ (1005cfd8 <__arm_cp.1_1>)
1005cf2e:	4d29      	ldr	r5, [pc, #164]	@ (1005cfd4 <__arm_cp.1_0>)
1005cf30:	d004      	beq.n	1005cf3c <BLE_STACK_RadioHandler+0xa0>
1005cf32:	4788      	blx	r1
1005cf34:	2700      	movs	r7, #0
1005cf36:	e001      	b.n	1005cf3c <BLE_STACK_RadioHandler+0xa0>
1005cf38:	4e27      	ldr	r6, [pc, #156]	@ (1005cfd8 <__arm_cp.1_1>)
1005cf3a:	4d26      	ldr	r5, [pc, #152]	@ (1005cfd4 <__arm_cp.1_0>)
1005cf3c:	6828      	ldr	r0, [r5, #0]
1005cf3e:	f7f3 fd62 	bl	10050a06 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1005cf42:	2800      	cmp	r0, #0
1005cf44:	d001      	beq.n	1005cf4a <BLE_STACK_RadioHandler+0xae>
1005cf46:	2504      	movs	r5, #4
1005cf48:	e020      	b.n	1005cf8c <BLE_STACK_RadioHandler+0xf0>
1005cf4a:	6828      	ldr	r0, [r5, #0]
1005cf4c:	f7f3 fd16 	bl	1005097c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1005cf50:	2800      	cmp	r0, #0
1005cf52:	d001      	beq.n	1005cf58 <BLE_STACK_RadioHandler+0xbc>
1005cf54:	2501      	movs	r5, #1
1005cf56:	e019      	b.n	1005cf8c <BLE_STACK_RadioHandler+0xf0>
1005cf58:	6828      	ldr	r0, [r5, #0]
1005cf5a:	f7f3 fd1b 	bl	10050994 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1005cf5e:	2800      	cmp	r0, #0
1005cf60:	d001      	beq.n	1005cf66 <BLE_STACK_RadioHandler+0xca>
1005cf62:	2502      	movs	r5, #2
1005cf64:	e012      	b.n	1005cf8c <BLE_STACK_RadioHandler+0xf0>
1005cf66:	6828      	ldr	r0, [r5, #0]
1005cf68:	f7f3 fd65 	bl	10050a36 <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1005cf6c:	4629      	mov	r1, r5
1005cf6e:	2505      	movs	r5, #5
1005cf70:	2800      	cmp	r0, #0
1005cf72:	d10b      	bne.n	1005cf8c <BLE_STACK_RadioHandler+0xf0>
1005cf74:	6808      	ldr	r0, [r1, #0]
1005cf76:	f7f3 fd6a 	bl	10050a4e <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1005cf7a:	2800      	cmp	r0, #0
1005cf7c:	d106      	bne.n	1005cf8c <BLE_STACK_RadioHandler+0xf0>
1005cf7e:	4815      	ldr	r0, [pc, #84]	@ (1005cfd4 <__arm_cp.1_0>)
1005cf80:	6800      	ldr	r0, [r0, #0]
1005cf82:	f7f3 fced 	bl	10050960 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1005cf86:	2800      	cmp	r0, #0
1005cf88:	d020      	beq.n	1005cfcc <BLE_STACK_RadioHandler+0x130>
1005cf8a:	2500      	movs	r5, #0
1005cf8c:	2001      	movs	r0, #1
1005cf8e:	40a8      	lsls	r0, r5
1005cf90:	4917      	ldr	r1, [pc, #92]	@ (1005cff0 <__arm_cp.1_7>)
1005cf92:	6809      	ldr	r1, [r1, #0]
1005cf94:	680a      	ldr	r2, [r1, #0]
1005cf96:	4302      	orrs	r2, r0
1005cf98:	600a      	str	r2, [r1, #0]
1005cf9a:	2000      	movs	r0, #0
1005cf9c:	f002 fce8 	bl	1005f970 <tsk_notify_idx>
1005cfa0:	f7f1 fe8f 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005cfa4:	f7f2 fd5a 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1005cfa8:	4620      	mov	r0, r4
1005cfaa:	f000 fb2b 	bl	1005d604 <LL_sched_engine>
1005cfae:	6834      	ldr	r4, [r6, #0]
1005cfb0:	7d60      	ldrb	r0, [r4, #21]
1005cfb2:	2801      	cmp	r0, #1
1005cfb4:	d108      	bne.n	1005cfc8 <BLE_STACK_RadioHandler+0x12c>
1005cfb6:	7c21      	ldrb	r1, [r4, #16]
1005cfb8:	200f      	movs	r0, #15
1005cfba:	4008      	ands	r0, r1
1005cfbc:	68e2      	ldr	r2, [r4, #12]
1005cfbe:	0909      	lsrs	r1, r1, #4
1005cfc0:	f7ff ff6a 	bl	1005ce98 <BLE_STACK_EndOfRadioActivityCb>
1005cfc4:	2000      	movs	r0, #0
1005cfc6:	7560      	strb	r0, [r4, #21]
1005cfc8:	b003      	add	sp, #12
1005cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005cfcc:	2f00      	cmp	r7, #0
1005cfce:	d1e9      	bne.n	1005cfa4 <BLE_STACK_RadioHandler+0x108>
1005cfd0:	e7ed      	b.n	1005cfae <BLE_STACK_RadioHandler+0x112>
1005cfd2:	46c0      	nop			@ (mov r8, r8)

1005cfd4 <__arm_cp.1_0>:
1005cfd4:	20000f1c 	.word	0x20000f1c

1005cfd8 <__arm_cp.1_1>:
1005cfd8:	20000f20 	.word	0x20000f20

1005cfdc <__arm_cp.1_2>:
1005cfdc:	20000f24 	.word	0x20000f24

1005cfe0 <__arm_cp.1_3>:
1005cfe0:	20000f28 	.word	0x20000f28

1005cfe4 <__arm_cp.1_4>:
1005cfe4:	10063305 	.word	0x10063305

1005cfe8 <__arm_cp.1_5>:
1005cfe8:	10063301 	.word	0x10063301

1005cfec <__arm_cp.1_6>:
1005cfec:	10063309 	.word	0x10063309

1005cff0 <__arm_cp.1_7>:
1005cff0:	20000ed0 	.word	0x20000ed0

1005cff4 <LL_link_calculate_window_widening_from_ppm>:
1005cff4:	22ff      	movs	r2, #255	@ 0xff
1005cff6:	320e      	adds	r2, #14
1005cff8:	4342      	muls	r2, r0
1005cffa:	0a10      	lsrs	r0, r2, #8
1005cffc:	0889      	lsrs	r1, r1, #2
1005cffe:	4341      	muls	r1, r0
1005d000:	0c88      	lsrs	r0, r1, #18
1005d002:	1c40      	adds	r0, r0, #1
1005d004:	4770      	bx	lr
	...

1005d008 <LL_link_calc_packetlength>:
1005d008:	2804      	cmp	r0, #4
1005d00a:	d005      	beq.n	1005d018 <LL_link_calc_packetlength+0x10>
1005d00c:	2801      	cmp	r0, #1
1005d00e:	d106      	bne.n	1005d01e <LL_link_calc_packetlength+0x16>
1005d010:	20ff      	movs	r0, #255	@ 0xff
1005d012:	30a4      	adds	r0, #164	@ 0xa4
1005d014:	4a07      	ldr	r2, [pc, #28]	@ (1005d034 <__arm_cp.7_2>)
1005d016:	e004      	b.n	1005d022 <LL_link_calc_packetlength+0x1a>
1005d018:	4a04      	ldr	r2, [pc, #16]	@ (1005d02c <__arm_cp.7_0>)
1005d01a:	4805      	ldr	r0, [pc, #20]	@ (1005d030 <__arm_cp.7_1>)
1005d01c:	e001      	b.n	1005d022 <LL_link_calc_packetlength+0x1a>
1005d01e:	4a06      	ldr	r2, [pc, #24]	@ (1005d038 <__arm_cp.7_3>)
1005d020:	4806      	ldr	r0, [pc, #24]	@ (1005d03c <__arm_cp.7_4>)
1005d022:	4341      	muls	r1, r0
1005d024:	1888      	adds	r0, r1, r2
1005d026:	0a00      	lsrs	r0, r0, #8
1005d028:	4770      	bx	lr
1005d02a:	46c0      	nop			@ (mov r8, r8)

1005d02c <__arm_cp.7_0>:
1005d02c:	000126e9 	.word	0x000126e9

1005d030 <__arm_cp.7_1>:
1005d030:	00001a38 	.word	0x00001a38

1005d034 <__arm_cp.7_2>:
1005d034:	00001206 	.word	0x00001206

1005d038 <__arm_cp.7_3>:
1005d038:	000020c6 	.word	0x000020c6

1005d03c <__arm_cp.7_4>:
1005d03c:	00000347 	.word	0x00000347

1005d040 <LL_link_get_own_sca_ppm>:
1005d040:	4801      	ldr	r0, [pc, #4]	@ (1005d048 <__arm_cp.8_0>)
1005d042:	6800      	ldr	r0, [r0, #0]
1005d044:	8b00      	ldrh	r0, [r0, #24]
1005d046:	4770      	bx	lr

1005d048 <__arm_cp.8_0>:
1005d048:	20000f20 	.word	0x20000f20

1005d04c <LL_link_is_arg_in_range>:
1005d04c:	4290      	cmp	r0, r2
1005d04e:	d801      	bhi.n	1005d054 <LL_link_is_arg_in_range+0x8>
1005d050:	4288      	cmp	r0, r1
1005d052:	d201      	bcs.n	1005d058 <LL_link_is_arg_in_range+0xc>
1005d054:	2012      	movs	r0, #18
1005d056:	4770      	bx	lr
1005d058:	2000      	movs	r0, #0
1005d05a:	4770      	bx	lr

1005d05c <Data_Len_Update_Offline_Processing_ucfg_weak>:
1005d05c:	2000      	movs	r0, #0
1005d05e:	4770      	bx	lr

1005d060 <ll_write_supported_data_ucfg_weak>:
1005d060:	2012      	movs	r0, #18
1005d062:	4770      	bx	lr

1005d064 <llc_timers_callback_wrapper>:
1005d064:	b580      	push	{r7, lr}
1005d066:	6940      	ldr	r0, [r0, #20]
1005d068:	4901      	ldr	r1, [pc, #4]	@ (1005d070 <__arm_cp.4_0>)
1005d06a:	f002 fdb8 	bl	1005fbde <cst_sharedCallback>
1005d06e:	bd80      	pop	{r7, pc}

1005d070 <__arm_cp.4_0>:
1005d070:	1005d075 	.word	0x1005d075

1005d074 <llc_timers_callback>:
1005d074:	b580      	push	{r7, lr}
1005d076:	4903      	ldr	r1, [pc, #12]	@ (1005d084 <__arm_cp.5_0>)
1005d078:	7ac9      	ldrb	r1, [r1, #11]
1005d07a:	4281      	cmp	r1, r0
1005d07c:	d901      	bls.n	1005d082 <llc_timers_callback+0xe>
1005d07e:	f7fd ff99 	bl	1005afb4 <LLC_authenticated_payload_timeout_cb>
1005d082:	bd80      	pop	{r7, pc}

1005d084 <__arm_cp.5_0>:
1005d084:	20000f34 	.word	0x20000f34

1005d088 <LL_init_ucfg_weak>:
1005d088:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d08a:	b091      	sub	sp, #68	@ 0x44
1005d08c:	9306      	str	r3, [sp, #24]
1005d08e:	4614      	mov	r4, r2
1005d090:	910d      	str	r1, [sp, #52]	@ 0x34
1005d092:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d094:	48b8      	ldr	r0, [pc, #736]	@ (1005d378 <__arm_cp.6_0>)
1005d096:	7ac1      	ldrb	r1, [r0, #11]
1005d098:	910c      	str	r1, [sp, #48]	@ 0x30
1005d09a:	7f01      	ldrb	r1, [r0, #28]
1005d09c:	9109      	str	r1, [sp, #36]	@ 0x24
1005d09e:	7ec1      	ldrb	r1, [r0, #27]
1005d0a0:	910a      	str	r1, [sp, #40]	@ 0x28
1005d0a2:	7e81      	ldrb	r1, [r0, #26]
1005d0a4:	9108      	str	r1, [sp, #32]
1005d0a6:	7fc7      	ldrb	r7, [r0, #31]
1005d0a8:	2501      	movs	r5, #1
1005d0aa:	21e8      	movs	r1, #232	@ 0xe8
1005d0ac:	4628      	mov	r0, r5
1005d0ae:	f000 fe89 	bl	1005ddc4 <csmem_mem_0_assign>
1005d0b2:	4eb2      	ldr	r6, [pc, #712]	@ (1005d37c <__arm_cp.6_1>)
1005d0b4:	6030      	str	r0, [r6, #0]
1005d0b6:	2158      	movs	r1, #88	@ 0x58
1005d0b8:	4628      	mov	r0, r5
1005d0ba:	f000 fe83 	bl	1005ddc4 <csmem_mem_0_assign>
1005d0be:	6831      	ldr	r1, [r6, #0]
1005d0c0:	229c      	movs	r2, #156	@ 0x9c
1005d0c2:	9207      	str	r2, [sp, #28]
1005d0c4:	5088      	str	r0, [r1, r2]
1005d0c6:	4638      	mov	r0, r7
1005d0c8:	f006 f8b6 	bl	10063238 <llc_wl_mem_allocate>
1005d0cc:	2107      	movs	r1, #7
1005d0ce:	4039      	ands	r1, r7
1005d0d0:	9806      	ldr	r0, [sp, #24]
1005d0d2:	f006 f8c5 	bl	10063260 <llc_priv_mem_allocate>
1005d0d6:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005d0d8:	9000      	str	r0, [sp, #0]
1005d0da:	ab19      	add	r3, sp, #100	@ 0x64
1005d0dc:	cb0e      	ldmia	r3, {r1, r2, r3}
1005d0de:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d0e0:	9106      	str	r1, [sp, #24]
1005d0e2:	930d      	str	r3, [sp, #52]	@ 0x34
1005d0e4:	f7fa f958 	bl	10057398 <llc_conn_mem_allocate>
1005d0e8:	2c01      	cmp	r4, #1
1005d0ea:	d000      	beq.n	1005d0ee <LL_init_ucfg_weak+0x66>
1005d0ec:	9508      	str	r5, [sp, #32]
1005d0ee:	2000      	movs	r0, #0
1005d0f0:	2c01      	cmp	r4, #1
1005d0f2:	d000      	beq.n	1005d0f6 <LL_init_ucfg_weak+0x6e>
1005d0f4:	900a      	str	r0, [sp, #40]	@ 0x28
1005d0f6:	2c01      	cmp	r4, #1
1005d0f8:	4fa0      	ldr	r7, [pc, #640]	@ (1005d37c <__arm_cp.6_1>)
1005d0fa:	d000      	beq.n	1005d0fe <LL_init_ucfg_weak+0x76>
1005d0fc:	9009      	str	r0, [sp, #36]	@ 0x24
1005d0fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1005d100:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d102:	2801      	cmp	r0, #1
1005d104:	9205      	str	r2, [sp, #20]
1005d106:	d118      	bne.n	1005d13a <LL_init_ucfg_weak+0xb2>
1005d108:	2029      	movs	r0, #41	@ 0x29
1005d10a:	499b      	ldr	r1, [pc, #620]	@ (1005d378 <__arm_cp.6_0>)
1005d10c:	5c08      	ldrb	r0, [r1, r0]
1005d10e:	1e41      	subs	r1, r0, #1
1005d110:	4188      	sbcs	r0, r1
1005d112:	4310      	orrs	r0, r2
1005d114:	d001      	beq.n	1005d11a <LL_init_ucfg_weak+0x92>
1005d116:	2530      	movs	r5, #48	@ 0x30
1005d118:	e000      	b.n	1005d11c <LL_init_ucfg_weak+0x94>
1005d11a:	2520      	movs	r5, #32
1005d11c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005d11e:	4630      	mov	r0, r6
1005d120:	4629      	mov	r1, r5
1005d122:	f000 fe4f 	bl	1005ddc4 <csmem_mem_0_assign>
1005d126:	6839      	ldr	r1, [r7, #0]
1005d128:	2294      	movs	r2, #148	@ 0x94
1005d12a:	5088      	str	r0, [r1, r2]
1005d12c:	4630      	mov	r0, r6
1005d12e:	4629      	mov	r1, r5
1005d130:	f000 fe48 	bl	1005ddc4 <csmem_mem_0_assign>
1005d134:	6839      	ldr	r1, [r7, #0]
1005d136:	2298      	movs	r2, #152	@ 0x98
1005d138:	5088      	str	r0, [r1, r2]
1005d13a:	262c      	movs	r6, #44	@ 0x2c
1005d13c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005d13e:	4631      	mov	r1, r6
1005d140:	f000 fe40 	bl	1005ddc4 <csmem_mem_0_assign>
1005d144:	6839      	ldr	r1, [r7, #0]
1005d146:	22a4      	movs	r2, #164	@ 0xa4
1005d148:	5088      	str	r0, [r1, r2]
1005d14a:	2041      	movs	r0, #65	@ 0x41
1005d14c:	0082      	lsls	r2, r0, #2
1005d14e:	2c01      	cmp	r4, #1
1005d150:	9402      	str	r4, [sp, #8]
1005d152:	d10a      	bne.n	1005d16a <LL_init_ucfg_weak+0xe2>
1005d154:	4611      	mov	r1, r2
1005d156:	3120      	adds	r1, #32
1005d158:	2001      	movs	r0, #1
1005d15a:	4614      	mov	r4, r2
1005d15c:	f000 fe32 	bl	1005ddc4 <csmem_mem_0_assign>
1005d160:	6839      	ldr	r1, [r7, #0]
1005d162:	228c      	movs	r2, #140	@ 0x8c
1005d164:	5088      	str	r0, [r1, r2]
1005d166:	4621      	mov	r1, r4
1005d168:	e038      	b.n	1005d1dc <LL_init_ucfg_weak+0x154>
1005d16a:	2125      	movs	r1, #37	@ 0x25
1005d16c:	4882      	ldr	r0, [pc, #520]	@ (1005d378 <__arm_cp.6_0>)
1005d16e:	910c      	str	r1, [sp, #48]	@ 0x30
1005d170:	5c41      	ldrb	r1, [r0, r1]
1005d172:	4610      	mov	r0, r2
1005d174:	3020      	adds	r0, #32
1005d176:	2900      	cmp	r1, #0
1005d178:	9201      	str	r2, [sp, #4]
1005d17a:	d001      	beq.n	1005d180 <LL_init_ucfg_weak+0xf8>
1005d17c:	4601      	mov	r1, r0
1005d17e:	e000      	b.n	1005d182 <LL_init_ucfg_weak+0xfa>
1005d180:	2144      	movs	r1, #68	@ 0x44
1005d182:	2726      	movs	r7, #38	@ 0x26
1005d184:	4a7c      	ldr	r2, [pc, #496]	@ (1005d378 <__arm_cp.6_0>)
1005d186:	5dd2      	ldrb	r2, [r2, r7]
1005d188:	2a00      	cmp	r2, #0
1005d18a:	d000      	beq.n	1005d18e <LL_init_ucfg_weak+0x106>
1005d18c:	4601      	mov	r1, r0
1005d18e:	2529      	movs	r5, #41	@ 0x29
1005d190:	4a79      	ldr	r2, [pc, #484]	@ (1005d378 <__arm_cp.6_0>)
1005d192:	5d52      	ldrb	r2, [r2, r5]
1005d194:	2a00      	cmp	r2, #0
1005d196:	d000      	beq.n	1005d19a <LL_init_ucfg_weak+0x112>
1005d198:	4601      	mov	r1, r0
1005d19a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005d19c:	2a01      	cmp	r2, #1
1005d19e:	d100      	bne.n	1005d1a2 <LL_init_ucfg_weak+0x11a>
1005d1a0:	4601      	mov	r1, r0
1005d1a2:	2001      	movs	r0, #1
1005d1a4:	f000 fe0e 	bl	1005ddc4 <csmem_mem_0_assign>
1005d1a8:	4974      	ldr	r1, [pc, #464]	@ (1005d37c <__arm_cp.6_1>)
1005d1aa:	6809      	ldr	r1, [r1, #0]
1005d1ac:	228c      	movs	r2, #140	@ 0x8c
1005d1ae:	5088      	str	r0, [r1, r2]
1005d1b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d1b2:	2801      	cmp	r0, #1
1005d1b4:	9c01      	ldr	r4, [sp, #4]
1005d1b6:	4621      	mov	r1, r4
1005d1b8:	d010      	beq.n	1005d1dc <LL_init_ucfg_weak+0x154>
1005d1ba:	486f      	ldr	r0, [pc, #444]	@ (1005d378 <__arm_cp.6_0>)
1005d1bc:	5d40      	ldrb	r0, [r0, r5]
1005d1be:	2800      	cmp	r0, #0
1005d1c0:	4621      	mov	r1, r4
1005d1c2:	d10b      	bne.n	1005d1dc <LL_init_ucfg_weak+0x154>
1005d1c4:	486c      	ldr	r0, [pc, #432]	@ (1005d378 <__arm_cp.6_0>)
1005d1c6:	5dc0      	ldrb	r0, [r0, r7]
1005d1c8:	2800      	cmp	r0, #0
1005d1ca:	4621      	mov	r1, r4
1005d1cc:	d106      	bne.n	1005d1dc <LL_init_ucfg_weak+0x154>
1005d1ce:	486a      	ldr	r0, [pc, #424]	@ (1005d378 <__arm_cp.6_0>)
1005d1d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005d1d2:	5c40      	ldrb	r0, [r0, r1]
1005d1d4:	2800      	cmp	r0, #0
1005d1d6:	d000      	beq.n	1005d1da <LL_init_ucfg_weak+0x152>
1005d1d8:	4626      	mov	r6, r4
1005d1da:	4631      	mov	r1, r6
1005d1dc:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005d1de:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d1e0:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005d1e2:	9003      	str	r0, [sp, #12]
1005d1e4:	2601      	movs	r6, #1
1005d1e6:	4d66      	ldr	r5, [pc, #408]	@ (1005d380 <__arm_cp.6_2>)
1005d1e8:	4630      	mov	r0, r6
1005d1ea:	47a8      	blx	r5
1005d1ec:	4f63      	ldr	r7, [pc, #396]	@ (1005d37c <__arm_cp.6_1>)
1005d1ee:	6839      	ldr	r1, [r7, #0]
1005d1f0:	2290      	movs	r2, #144	@ 0x90
1005d1f2:	5088      	str	r0, [r1, r2]
1005d1f4:	2110      	movs	r1, #16
1005d1f6:	4630      	mov	r0, r6
1005d1f8:	47a8      	blx	r5
1005d1fa:	6839      	ldr	r1, [r7, #0]
1005d1fc:	22a0      	movs	r2, #160	@ 0xa0
1005d1fe:	9204      	str	r2, [sp, #16]
1005d200:	5088      	str	r0, [r1, r2]
1005d202:	2104      	movs	r1, #4
1005d204:	4630      	mov	r0, r6
1005d206:	47a8      	blx	r5
1005d208:	6839      	ldr	r1, [r7, #0]
1005d20a:	22a8      	movs	r2, #168	@ 0xa8
1005d20c:	5088      	str	r0, [r1, r2]
1005d20e:	2134      	movs	r1, #52	@ 0x34
1005d210:	960c      	str	r6, [sp, #48]	@ 0x30
1005d212:	4630      	mov	r0, r6
1005d214:	47a8      	blx	r5
1005d216:	6839      	ldr	r1, [r7, #0]
1005d218:	22ac      	movs	r2, #172	@ 0xac
1005d21a:	5088      	str	r0, [r1, r2]
1005d21c:	9808      	ldr	r0, [sp, #32]
1005d21e:	b2c7      	uxtb	r7, r0
1005d220:	1f21      	subs	r1, r4, #4
1005d222:	4638      	mov	r0, r7
1005d224:	47a8      	blx	r5
1005d226:	4605      	mov	r5, r0
1005d228:	9c02      	ldr	r4, [sp, #8]
1005d22a:	2c01      	cmp	r4, #1
1005d22c:	d105      	bne.n	1005d23a <LL_init_ucfg_weak+0x1b2>
1005d22e:	215c      	movs	r1, #92	@ 0x5c
1005d230:	4638      	mov	r0, r7
1005d232:	f000 fdc7 	bl	1005ddc4 <csmem_mem_0_assign>
1005d236:	4602      	mov	r2, r0
1005d238:	e000      	b.n	1005d23c <LL_init_ucfg_weak+0x1b4>
1005d23a:	2200      	movs	r2, #0
1005d23c:	4638      	mov	r0, r7
1005d23e:	4629      	mov	r1, r5
1005d240:	f7fe fec6 	bl	1005bfd0 <EADV_init>
1005d244:	ab10      	add	r3, sp, #64	@ 0x40
1005d246:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d248:	70d8      	strb	r0, [r3, #3]
1005d24a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005d24c:	7098      	strb	r0, [r3, #2]
1005d24e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005d250:	705e      	strb	r6, [r3, #1]
1005d252:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d254:	7018      	strb	r0, [r3, #0]
1005d256:	4620      	mov	r0, r4
1005d258:	9d05      	ldr	r5, [sp, #20]
1005d25a:	4629      	mov	r1, r5
1005d25c:	463a      	mov	r2, r7
1005d25e:	f005 fffb 	bl	10063258 <llc_padv_mem_allocate_ucfg_weak>
1005d262:	9f03      	ldr	r7, [sp, #12]
1005d264:	4638      	mov	r0, r7
1005d266:	4621      	mov	r1, r4
1005d268:	f7fb fd1d 	bl	10058ca6 <llc_scan_mem_allocate_ucfg_weak>
1005d26c:	4638      	mov	r0, r7
1005d26e:	4621      	mov	r1, r4
1005d270:	462a      	mov	r2, r5
1005d272:	f7fb fcf2 	bl	10058c5a <llc_pscan_mem_allocate_ucfg_weak>
1005d276:	4638      	mov	r0, r7
1005d278:	4621      	mov	r1, r4
1005d27a:	462a      	mov	r2, r5
1005d27c:	4633      	mov	r3, r6
1005d27e:	f005 ffed 	bl	1006325c <llc_past_mem_allocate_ucfg_weak>
1005d282:	9600      	str	r6, [sp, #0]
1005d284:	463e      	mov	r6, r7
1005d286:	4638      	mov	r0, r7
1005d288:	4621      	mov	r1, r4
1005d28a:	462a      	mov	r2, r5
1005d28c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005d28e:	f7fb fce7 	bl	10058c60 <llc_pscan_wr_mem_allocate_ucfg_weak>
1005d292:	f7fb fcc0 	bl	10058c16 <llc_iso_cmn_mem_alloc_ucfg_weak>
1005d296:	2c01      	cmp	r4, #1
1005d298:	d107      	bne.n	1005d2aa <LL_init_ucfg_weak+0x222>
1005d29a:	2d01      	cmp	r5, #1
1005d29c:	d105      	bne.n	1005d2aa <LL_init_ucfg_weak+0x222>
1005d29e:	f005 f92b 	bl	100624f8 <llc_big_brc_mem_alloc_ucfg_weak>
1005d2a2:	2e01      	cmp	r6, #1
1005d2a4:	d101      	bne.n	1005d2aa <LL_init_ucfg_weak+0x222>
1005d2a6:	f005 f928 	bl	100624fa <llc_big_sync_mem_alloc_ucfg_weak>
1005d2aa:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d2ac:	2801      	cmp	r0, #1
1005d2ae:	4f33      	ldr	r7, [pc, #204]	@ (1005d37c <__arm_cp.6_1>)
1005d2b0:	d101      	bne.n	1005d2b6 <LL_init_ucfg_weak+0x22e>
1005d2b2:	f005 f923 	bl	100624fc <llc_cig_cmn_mem_alloc_ucfg_weak>
1005d2b6:	f7fb fca7 	bl	10058c08 <llc_isoal_mem_alloc_ucfg_weak>
1005d2ba:	9806      	ldr	r0, [sp, #24]
1005d2bc:	4631      	mov	r1, r6
1005d2be:	4622      	mov	r2, r4
1005d2c0:	462b      	mov	r3, r5
1005d2c2:	f7fe fd46 	bl	1005bd52 <llc_cte_mem_allocate_ucfg_weak>
1005d2c6:	4e2c      	ldr	r6, [pc, #176]	@ (1005d378 <__arm_cp.6_0>)
1005d2c8:	7af0      	ldrb	r0, [r6, #11]
1005d2ca:	1c41      	adds	r1, r0, #1
1005d2cc:	4d2d      	ldr	r5, [pc, #180]	@ (1005d384 <__arm_cp.6_3>)
1005d2ce:	4628      	mov	r0, r5
1005d2d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005d2d2:	f000 fd65 	bl	1005dda0 <csmem_mem_assign>
1005d2d6:	6839      	ldr	r1, [r7, #0]
1005d2d8:	22d0      	movs	r2, #208	@ 0xd0
1005d2da:	5088      	str	r0, [r1, r2]
1005d2dc:	7af1      	ldrb	r1, [r6, #11]
1005d2de:	2202      	movs	r2, #2
1005d2e0:	4628      	mov	r0, r5
1005d2e2:	f000 fd5d 	bl	1005dda0 <csmem_mem_assign>
1005d2e6:	6839      	ldr	r1, [r7, #0]
1005d2e8:	460a      	mov	r2, r1
1005d2ea:	32a0      	adds	r2, #160	@ 0xa0
1005d2ec:	6350      	str	r0, [r2, #52]	@ 0x34
1005d2ee:	9804      	ldr	r0, [sp, #16]
1005d2f0:	5808      	ldr	r0, [r1, r0]
1005d2f2:	6078      	str	r0, [r7, #4]
1005d2f4:	6850      	ldr	r0, [r2, #4]
1005d2f6:	60b8      	str	r0, [r7, #8]
1005d2f8:	4620      	mov	r0, r4
1005d2fa:	f7fb fcd3 	bl	10058ca4 <llc_scan_init_ucfg_weak>
1005d2fe:	f7fb fcab 	bl	10058c58 <llc_pscan_init_ucfg_weak>
1005d302:	f000 f8e3 	bl	1005d4cc <LL_sched_init>
1005d306:	f7fe fd29 	bl	1005bd5c <LL_dtm_init>
1005d30a:	f005 ffa6 	bl	1006325a <llc_padv_init_ucfg_weak>
1005d30e:	f7fe fd1f 	bl	1005bd50 <llc_cte_init_ucfg_weak>
1005d312:	f7f9 f8e5 	bl	100564e0 <HCI_Init>
1005d316:	f7f2 fb41 	bl	1004f99c <BLEPLAT_GetDefaultPALevel>
1005d31a:	6839      	ldr	r1, [r7, #0]
1005d31c:	2400      	movs	r4, #0
1005d31e:	728c      	strb	r4, [r1, #10]
1005d320:	7248      	strb	r0, [r1, #9]
1005d322:	4620      	mov	r0, r4
1005d324:	f7f2 fb42 	bl	1004f9ac <BLEPLAT_SetHighPower>
1005d328:	f7f4 fcbe 	bl	10051ca8 <ble_HAL_Init>
1005d32c:	6838      	ldr	r0, [r7, #0]
1005d32e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1005d330:	f7fd ff03 	bl	1005b13a <LLC_pcl_hal_cntxt_init_ucfg_weak>
1005d334:	6838      	ldr	r0, [r7, #0]
1005d336:	9d07      	ldr	r5, [sp, #28]
1005d338:	5940      	ldr	r0, [r0, r5]
1005d33a:	300c      	adds	r0, #12
1005d33c:	f002 fe2b 	bl	1005ff96 <addr8_list_clear>
1005d340:	463e      	mov	r6, r7
1005d342:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1005d344:	4638      	mov	r0, r7
1005d346:	f7fb fc6d 	bl	10058c24 <llc_priv_init_ucfg_weak>
1005d34a:	6830      	ldr	r0, [r6, #0]
1005d34c:	5941      	ldr	r1, [r0, r5]
1005d34e:	2240      	movs	r2, #64	@ 0x40
1005d350:	548c      	strb	r4, [r1, r2]
1005d352:	4a09      	ldr	r2, [pc, #36]	@ (1005d378 <__arm_cp.6_0>)
1005d354:	8b12      	ldrh	r2, [r2, #24]
1005d356:	8302      	strh	r2, [r0, #24]
1005d358:	201f      	movs	r0, #31
1005d35a:	900f      	str	r0, [sp, #60]	@ 0x3c
1005d35c:	43e0      	mvns	r0, r4
1005d35e:	900e      	str	r0, [sp, #56]	@ 0x38
1005d360:	3148      	adds	r1, #72	@ 0x48
1005d362:	a80e      	add	r0, sp, #56	@ 0x38
1005d364:	2205      	movs	r2, #5
1005d366:	f002 fc8b 	bl	1005fc80 <char_copy>
1005d36a:	6830      	ldr	r0, [r6, #0]
1005d36c:	5940      	ldr	r0, [r0, r5]
1005d36e:	02f9      	lsls	r1, r7, #11
1005d370:	2254      	movs	r2, #84	@ 0x54
1005d372:	5281      	strh	r1, [r0, r2]
1005d374:	b011      	add	sp, #68	@ 0x44
1005d376:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d378 <__arm_cp.6_0>:
1005d378:	20000f34 	.word	0x20000f34

1005d37c <__arm_cp.6_1>:
1005d37c:	20000f20 	.word	0x20000f20

1005d380 <__arm_cp.6_2>:
1005d380:	1005ddc5 	.word	0x1005ddc5

1005d384 <__arm_cp.6_3>:
1005d384:	20000f30 	.word	0x20000f30

1005d388 <LL_init>:
1005d388:	b5b0      	push	{r4, r5, r7, lr}
1005d38a:	b088      	sub	sp, #32
1005d38c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
1005d38e:	9406      	str	r4, [sp, #24]
1005d390:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005d392:	9405      	str	r4, [sp, #20]
1005d394:	9d10      	ldr	r5, [sp, #64]	@ 0x40
1005d396:	9504      	str	r5, [sp, #16]
1005d398:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005d39a:	9503      	str	r5, [sp, #12]
1005d39c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005d39e:	9502      	str	r5, [sp, #8]
1005d3a0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005d3a2:	9501      	str	r5, [sp, #4]
1005d3a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005d3a6:	9500      	str	r5, [sp, #0]
1005d3a8:	f7ff fe6e 	bl	1005d088 <LL_init_ucfg_weak>
1005d3ac:	2c01      	cmp	r4, #1
1005d3ae:	d112      	bne.n	1005d3d6 <LL_init+0x4e>
1005d3b0:	f7fb fc54 	bl	10058c5c <llc_pscan_wr_init_ucfg_weak>
1005d3b4:	f7f9 ff00 	bl	100571b8 <llc_conn_init>
1005d3b8:	f7ee fe01 	bl	1004bfbe <LL_cpe_init_ucfg>
1005d3bc:	4807      	ldr	r0, [pc, #28]	@ (1005d3dc <__arm_cp.7_0>)
1005d3be:	7ac1      	ldrb	r1, [r0, #11]
1005d3c0:	4807      	ldr	r0, [pc, #28]	@ (1005d3e0 <__arm_cp.7_1>)
1005d3c2:	6800      	ldr	r0, [r0, #0]
1005d3c4:	30b0      	adds	r0, #176	@ 0xb0
1005d3c6:	4a07      	ldr	r2, [pc, #28]	@ (1005d3e4 <__arm_cp.7_2>)
1005d3c8:	2305      	movs	r3, #5
1005d3ca:	f002 fb2f 	bl	1005fa2c <CST_init>
1005d3ce:	f7f4 fcd9 	bl	10051d84 <Acl_Init>
1005d3d2:	f7fc fd58 	bl	10059e86 <LLC_chc_ll_cntxt_init_ucfg_weak>
1005d3d6:	b008      	add	sp, #32
1005d3d8:	bdb0      	pop	{r4, r5, r7, pc}
1005d3da:	46c0      	nop			@ (mov r8, r8)

1005d3dc <__arm_cp.7_0>:
1005d3dc:	20000f34 	.word	0x20000f34

1005d3e0 <__arm_cp.7_1>:
1005d3e0:	20000f20 	.word	0x20000f20

1005d3e4 <__arm_cp.7_2>:
1005d3e4:	1005d065 	.word	0x1005d065

1005d3e8 <Is_Address_Initialized>:
1005d3e8:	2100      	movs	r1, #0
1005d3ea:	460a      	mov	r2, r1
1005d3ec:	2906      	cmp	r1, #6
1005d3ee:	d005      	beq.n	1005d3fc <Is_Address_Initialized+0x14>
1005d3f0:	5c43      	ldrb	r3, [r0, r1]
1005d3f2:	2b00      	cmp	r3, #0
1005d3f4:	d000      	beq.n	1005d3f8 <Is_Address_Initialized+0x10>
1005d3f6:	2201      	movs	r2, #1
1005d3f8:	1c49      	adds	r1, r1, #1
1005d3fa:	e7f7      	b.n	1005d3ec <Is_Address_Initialized+0x4>
1005d3fc:	b2d0      	uxtb	r0, r2
1005d3fe:	4770      	bx	lr

1005d400 <get_rf_rx_path_compensation_db>:
1005d400:	4804      	ldr	r0, [pc, #16]	@ (1005d414 <__arm_cp.10_0>)
1005d402:	6800      	ldr	r0, [r0, #0]
1005d404:	215e      	movs	r1, #94	@ 0x5e
1005d406:	5e40      	ldrsh	r0, [r0, r1]
1005d408:	210d      	movs	r1, #13
1005d40a:	4341      	muls	r1, r0
1005d40c:	3140      	adds	r1, #64	@ 0x40
1005d40e:	11c8      	asrs	r0, r1, #7
1005d410:	4770      	bx	lr
1005d412:	46c0      	nop			@ (mov r8, r8)

1005d414 <__arm_cp.10_0>:
1005d414:	20000f20 	.word	0x20000f20

1005d418 <LL_get_tx_common_buffer_p>:
1005d418:	4802      	ldr	r0, [pc, #8]	@ (1005d424 <__arm_cp.11_0>)
1005d41a:	6800      	ldr	r0, [r0, #0]
1005d41c:	218c      	movs	r1, #140	@ 0x8c
1005d41e:	5840      	ldr	r0, [r0, r1]
1005d420:	4770      	bx	lr
1005d422:	46c0      	nop			@ (mov r8, r8)

1005d424 <__arm_cp.11_0>:
1005d424:	20000f20 	.word	0x20000f20

1005d428 <LL_get_rx_common_buffer_p>:
1005d428:	4802      	ldr	r0, [pc, #8]	@ (1005d434 <__arm_cp.12_0>)
1005d42a:	6800      	ldr	r0, [r0, #0]
1005d42c:	2190      	movs	r1, #144	@ 0x90
1005d42e:	5840      	ldr	r0, [r0, r1]
1005d430:	4770      	bx	lr
1005d432:	46c0      	nop			@ (mov r8, r8)

1005d434 <__arm_cp.12_0>:
1005d434:	20000f20 	.word	0x20000f20

1005d438 <LL_get_control_pdu_size>:
1005d438:	2800      	cmp	r0, #0
1005d43a:	d001      	beq.n	1005d440 <LL_get_control_pdu_size+0x8>
1005d43c:	2030      	movs	r0, #48	@ 0x30
1005d43e:	4770      	bx	lr
1005d440:	2020      	movs	r0, #32
1005d442:	4770      	bx	lr

1005d444 <llc_get_linkms_cntxt_p>:
1005d444:	4802      	ldr	r0, [pc, #8]	@ (1005d450 <__arm_cp.15_0>)
1005d446:	6800      	ldr	r0, [r0, #0]
1005d448:	219c      	movs	r1, #156	@ 0x9c
1005d44a:	5840      	ldr	r0, [r0, r1]
1005d44c:	4770      	bx	lr
1005d44e:	46c0      	nop			@ (mov r8, r8)

1005d450 <__arm_cp.15_0>:
1005d450:	20000f20 	.word	0x20000f20

1005d454 <llc_get_next_free_conn_handle>:
1005d454:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d456:	4815      	ldr	r0, [pc, #84]	@ (1005d4ac <__arm_cp.16_0>)
1005d458:	6800      	ldr	r0, [r0, #0]
1005d45a:	219c      	movs	r1, #156	@ 0x9c
1005d45c:	9102      	str	r1, [sp, #8]
1005d45e:	5841      	ldr	r1, [r0, r1]
1005d460:	2054      	movs	r0, #84	@ 0x54
1005d462:	9001      	str	r0, [sp, #4]
1005d464:	5a08      	ldrh	r0, [r1, r0]
1005d466:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
1005d468:	4c12      	ldr	r4, [pc, #72]	@ (1005d4b4 <__arm_cp.16_2>)
1005d46a:	1c45      	adds	r5, r0, #1
1005d46c:	b2a9      	uxth	r1, r5
1005d46e:	0a09      	lsrs	r1, r1, #8
1005d470:	290e      	cmp	r1, #14
1005d472:	d901      	bls.n	1005d478 <llc_get_next_free_conn_handle+0x24>
1005d474:	490e      	ldr	r1, [pc, #56]	@ (1005d4b0 <__arm_cp.16_1>)
1005d476:	1845      	adds	r5, r0, r1
1005d478:	2f00      	cmp	r7, #0
1005d47a:	d00f      	beq.n	1005d49c <llc_get_next_free_conn_handle+0x48>
1005d47c:	2600      	movs	r6, #0
1005d47e:	6820      	ldr	r0, [r4, #0]
1005d480:	2134      	movs	r1, #52	@ 0x34
1005d482:	5c41      	ldrb	r1, [r0, r1]
1005d484:	b2f0      	uxtb	r0, r6
1005d486:	4288      	cmp	r0, r1
1005d488:	d208      	bcs.n	1005d49c <llc_get_next_free_conn_handle+0x48>
1005d48a:	f7f9 fe4d 	bl	10057128 <llc_conn_get_cntxt_per_p>
1005d48e:	1c76      	adds	r6, r6, #1
1005d490:	b2a9      	uxth	r1, r5
1005d492:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005d494:	4281      	cmp	r1, r0
1005d496:	d1f2      	bne.n	1005d47e <llc_get_next_free_conn_handle+0x2a>
1005d498:	4628      	mov	r0, r5
1005d49a:	e7e6      	b.n	1005d46a <llc_get_next_free_conn_handle+0x16>
1005d49c:	4803      	ldr	r0, [pc, #12]	@ (1005d4ac <__arm_cp.16_0>)
1005d49e:	6800      	ldr	r0, [r0, #0]
1005d4a0:	9902      	ldr	r1, [sp, #8]
1005d4a2:	5840      	ldr	r0, [r0, r1]
1005d4a4:	9901      	ldr	r1, [sp, #4]
1005d4a6:	5245      	strh	r5, [r0, r1]
1005d4a8:	b2a8      	uxth	r0, r5
1005d4aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005d4ac <__arm_cp.16_0>:
1005d4ac:	20000f20 	.word	0x20000f20

1005d4b0 <__arm_cp.16_1>:
1005d4b0:	fffff102 	.word	0xfffff102

1005d4b4 <__arm_cp.16_2>:
1005d4b4:	20000ecc 	.word	0x20000ecc

1005d4b8 <LL_sched_time_t1_ge_t2>:
1005d4b8:	43c0      	mvns	r0, r0
1005d4ba:	1840      	adds	r0, r0, r1
1005d4bc:	0fc0      	lsrs	r0, r0, #31
1005d4be:	4770      	bx	lr

1005d4c0 <LL_sched_engine_return_actual_scheduler_margin>:
1005d4c0:	4801      	ldr	r0, [pc, #4]	@ (1005d4c8 <__arm_cp.2_0>)
1005d4c2:	6800      	ldr	r0, [r0, #0]
1005d4c4:	6880      	ldr	r0, [r0, #8]
1005d4c6:	4770      	bx	lr

1005d4c8 <__arm_cp.2_0>:
1005d4c8:	20000f24 	.word	0x20000f24

1005d4cc <LL_sched_init>:
1005d4cc:	4809      	ldr	r0, [pc, #36]	@ (1005d4f4 <__arm_cp.4_0>)
1005d4ce:	7ac0      	ldrb	r0, [r0, #11]
1005d4d0:	4909      	ldr	r1, [pc, #36]	@ (1005d4f8 <__arm_cp.4_1>)
1005d4d2:	6809      	ldr	r1, [r1, #0]
1005d4d4:	3112      	adds	r1, #18
1005d4d6:	2800      	cmp	r0, #0
1005d4d8:	d004      	beq.n	1005d4e4 <LL_sched_init+0x18>
1005d4da:	2200      	movs	r2, #0
1005d4dc:	800a      	strh	r2, [r1, #0]
1005d4de:	312c      	adds	r1, #44	@ 0x2c
1005d4e0:	1e40      	subs	r0, r0, #1
1005d4e2:	e7f8      	b.n	1005d4d6 <LL_sched_init+0xa>
1005d4e4:	4805      	ldr	r0, [pc, #20]	@ (1005d4fc <__arm_cp.4_2>)
1005d4e6:	6800      	ldr	r0, [r0, #0]
1005d4e8:	2100      	movs	r1, #0
1005d4ea:	73c1      	strb	r1, [r0, #15]
1005d4ec:	21ff      	movs	r1, #255	@ 0xff
1005d4ee:	0209      	lsls	r1, r1, #8
1005d4f0:	8181      	strh	r1, [r0, #12]
1005d4f2:	4770      	bx	lr

1005d4f4 <__arm_cp.4_0>:
1005d4f4:	20000f34 	.word	0x20000f34

1005d4f8 <__arm_cp.4_1>:
1005d4f8:	20000f28 	.word	0x20000f28

1005d4fc <__arm_cp.4_2>:
1005d4fc:	20000f24 	.word	0x20000f24

1005d500 <LL_sched_set_anchor>:
1005d500:	222c      	movs	r2, #44	@ 0x2c
1005d502:	4342      	muls	r2, r0
1005d504:	4801      	ldr	r0, [pc, #4]	@ (1005d50c <__arm_cp.5_0>)
1005d506:	6800      	ldr	r0, [r0, #0]
1005d508:	5081      	str	r1, [r0, r2]
1005d50a:	4770      	bx	lr

1005d50c <__arm_cp.5_0>:
1005d50c:	20000f28 	.word	0x20000f28

1005d510 <LL_sched_set_taskslot_length_anchor>:
1005d510:	232c      	movs	r3, #44	@ 0x2c
1005d512:	4343      	muls	r3, r0
1005d514:	4802      	ldr	r0, [pc, #8]	@ (1005d520 <__arm_cp.6_0>)
1005d516:	6800      	ldr	r0, [r0, #0]
1005d518:	50c2      	str	r2, [r0, r3]
1005d51a:	18c0      	adds	r0, r0, r3
1005d51c:	6041      	str	r1, [r0, #4]
1005d51e:	4770      	bx	lr

1005d520 <__arm_cp.6_0>:
1005d520:	20000f28 	.word	0x20000f28

1005d524 <LL_sched_set_cancel_request>:
1005d524:	28ff      	cmp	r0, #255	@ 0xff
1005d526:	d00b      	beq.n	1005d540 <LL_sched_set_cancel_request+0x1c>
1005d528:	212c      	movs	r1, #44	@ 0x2c
1005d52a:	4341      	muls	r1, r0
1005d52c:	4805      	ldr	r0, [pc, #20]	@ (1005d544 <__arm_cp.9_0>)
1005d52e:	6800      	ldr	r0, [r0, #0]
1005d530:	1840      	adds	r0, r0, r1
1005d532:	7c81      	ldrb	r1, [r0, #18]
1005d534:	2908      	cmp	r1, #8
1005d536:	d001      	beq.n	1005d53c <LL_sched_set_cancel_request+0x18>
1005d538:	2110      	movs	r1, #16
1005d53a:	e000      	b.n	1005d53e <LL_sched_set_cancel_request+0x1a>
1005d53c:	2120      	movs	r1, #32
1005d53e:	7481      	strb	r1, [r0, #18]
1005d540:	4770      	bx	lr
1005d542:	46c0      	nop			@ (mov r8, r8)

1005d544 <__arm_cp.9_0>:
1005d544:	20000f28 	.word	0x20000f28

1005d548 <LL_sched_enable_taskslot>:
1005d548:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d54a:	b088      	sub	sp, #32
1005d54c:	9307      	str	r3, [sp, #28]
1005d54e:	272c      	movs	r7, #44	@ 0x2c
1005d550:	4347      	muls	r7, r0
1005d552:	481a      	ldr	r0, [pc, #104]	@ (1005d5bc <__arm_cp.10_0>)
1005d554:	6806      	ldr	r6, [r0, #0]
1005d556:	19f0      	adds	r0, r6, r7
1005d558:	7c84      	ldrb	r4, [r0, #18]
1005d55a:	2c01      	cmp	r4, #1
1005d55c:	d12b      	bne.n	1005d5b6 <LL_sched_enable_taskslot+0x6e>
1005d55e:	4603      	mov	r3, r0
1005d560:	3312      	adds	r3, #18
1005d562:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1005d564:	9506      	str	r5, [sp, #24]
1005d566:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1005d568:	9505      	str	r5, [sp, #20]
1005d56a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005d56c:	9503      	str	r5, [sp, #12]
1005d56e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1005d570:	9502      	str	r5, [sp, #8]
1005d572:	9104      	str	r1, [sp, #16]
1005d574:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005d576:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005d578:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005d57a:	9400      	str	r4, [sp, #0]
1005d57c:	9201      	str	r2, [sp, #4]
1005d57e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005d580:	9c07      	ldr	r4, [sp, #28]
1005d582:	6044      	str	r4, [r0, #4]
1005d584:	6082      	str	r2, [r0, #8]
1005d586:	9a00      	ldr	r2, [sp, #0]
1005d588:	51f2      	str	r2, [r6, r7]
1005d58a:	221f      	movs	r2, #31
1005d58c:	4015      	ands	r5, r2
1005d58e:	7545      	strb	r5, [r0, #21]
1005d590:	4011      	ands	r1, r2
1005d592:	7581      	strb	r1, [r0, #22]
1005d594:	2101      	movs	r1, #1
1005d596:	7501      	strb	r1, [r0, #20]
1005d598:	9a01      	ldr	r2, [sp, #4]
1005d59a:	74c2      	strb	r2, [r0, #19]
1005d59c:	8201      	strh	r1, [r0, #16]
1005d59e:	9902      	ldr	r1, [sp, #8]
1005d5a0:	61c1      	str	r1, [r0, #28]
1005d5a2:	9903      	ldr	r1, [sp, #12]
1005d5a4:	6201      	str	r1, [r0, #32]
1005d5a6:	9905      	ldr	r1, [sp, #20]
1005d5a8:	6241      	str	r1, [r0, #36]	@ 0x24
1005d5aa:	9906      	ldr	r1, [sp, #24]
1005d5ac:	6281      	str	r1, [r0, #40]	@ 0x28
1005d5ae:	9904      	ldr	r1, [sp, #16]
1005d5b0:	60c1      	str	r1, [r0, #12]
1005d5b2:	2002      	movs	r0, #2
1005d5b4:	7018      	strb	r0, [r3, #0]
1005d5b6:	b008      	add	sp, #32
1005d5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d5ba:	46c0      	nop			@ (mov r8, r8)

1005d5bc <__arm_cp.10_0>:
1005d5bc:	20000f28 	.word	0x20000f28

1005d5c0 <LL_sched_is_scheduler_call_pending>:
1005d5c0:	b580      	push	{r7, lr}
1005d5c2:	490a      	ldr	r1, [pc, #40]	@ (1005d5ec <__arm_cp.11_0>)
1005d5c4:	6809      	ldr	r1, [r1, #0]
1005d5c6:	7b0a      	ldrb	r2, [r1, #12]
1005d5c8:	2a01      	cmp	r2, #1
1005d5ca:	d106      	bne.n	1005d5da <LL_sched_is_scheduler_call_pending+0x1a>
1005d5cc:	7bca      	ldrb	r2, [r1, #15]
1005d5ce:	2a03      	cmp	r2, #3
1005d5d0:	d105      	bne.n	1005d5de <LL_sched_is_scheduler_call_pending+0x1e>
1005d5d2:	2000      	movs	r0, #0
1005d5d4:	f7fb fb92 	bl	10058cfc <llc_scan_stop_ucfg_weak>
1005d5d8:	bd80      	pop	{r7, pc}
1005d5da:	2000      	movs	r0, #0
1005d5dc:	bd80      	pop	{r7, pc}
1005d5de:	6809      	ldr	r1, [r1, #0]
1005d5e0:	1a08      	subs	r0, r1, r0
1005d5e2:	4903      	ldr	r1, [pc, #12]	@ (1005d5f0 <__arm_cp.11_1>)
1005d5e4:	1840      	adds	r0, r0, r1
1005d5e6:	0fc0      	lsrs	r0, r0, #31
1005d5e8:	bd80      	pop	{r7, pc}
1005d5ea:	46c0      	nop			@ (mov r8, r8)

1005d5ec <__arm_cp.11_0>:
1005d5ec:	20000f24 	.word	0x20000f24

1005d5f0 <__arm_cp.11_1>:
1005d5f0:	fffffe0b 	.word	0xfffffe0b

1005d5f4 <LL_sched_anchorstretch>:
1005d5f4:	4902      	ldr	r1, [pc, #8]	@ (1005d600 <__arm_cp.12_0>)
1005d5f6:	6809      	ldr	r1, [r1, #0]
1005d5f8:	684a      	ldr	r2, [r1, #4]
1005d5fa:	6002      	str	r2, [r0, #0]
1005d5fc:	7b88      	ldrb	r0, [r1, #14]
1005d5fe:	4770      	bx	lr

1005d600 <__arm_cp.12_0>:
1005d600:	20000f24 	.word	0x20000f24

1005d604 <LL_sched_engine>:
1005d604:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d606:	b0b3      	sub	sp, #204	@ 0xcc
1005d608:	4607      	mov	r7, r0
1005d60a:	48dc      	ldr	r0, [pc, #880]	@ (1005d97c <__arm_cp.13_0>)
1005d60c:	6800      	ldr	r0, [r0, #0]
1005d60e:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d610:	2001      	movs	r0, #1
1005d612:	9001      	str	r0, [sp, #4]
1005d614:	9009      	str	r0, [sp, #36]	@ 0x24
1005d616:	2100      	movs	r1, #0
1005d618:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d61a:	7381      	strb	r1, [r0, #14]
1005d61c:	48d8      	ldr	r0, [pc, #864]	@ (1005d980 <__arm_cp.13_1>)
1005d61e:	6803      	ldr	r3, [r0, #0]
1005d620:	910a      	str	r1, [sp, #40]	@ 0x28
1005d622:	7219      	strb	r1, [r3, #8]
1005d624:	20ff      	movs	r0, #255	@ 0xff
1005d626:	9008      	str	r0, [sp, #32]
1005d628:	3002      	adds	r0, #2
1005d62a:	8298      	strh	r0, [r3, #20]
1005d62c:	7c18      	ldrb	r0, [r3, #16]
1005d62e:	21f0      	movs	r1, #240	@ 0xf0
1005d630:	4001      	ands	r1, r0
1005d632:	090a      	lsrs	r2, r1, #4
1005d634:	1888      	adds	r0, r1, r2
1005d636:	7418      	strb	r0, [r3, #16]
1005d638:	8a59      	ldrh	r1, [r3, #18]
1005d63a:	40d1      	lsrs	r1, r2
1005d63c:	07c9      	lsls	r1, r1, #31
1005d63e:	49d1      	ldr	r1, [pc, #836]	@ (1005d984 <__arm_cp.13_2>)
1005d640:	6809      	ldr	r1, [r1, #0]
1005d642:	9107      	str	r1, [sp, #28]
1005d644:	9305      	str	r3, [sp, #20]
1005d646:	d006      	beq.n	1005d656 <LL_sched_engine+0x52>
1005d648:	2000      	movs	r0, #0
1005d64a:	f002 f991 	bl	1005f970 <tsk_notify_idx>
1005d64e:	f7f1 fb38 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005d652:	9b05      	ldr	r3, [sp, #20]
1005d654:	7c18      	ldrb	r0, [r3, #16]
1005d656:	210f      	movs	r1, #15
1005d658:	9102      	str	r1, [sp, #8]
1005d65a:	4008      	ands	r0, r1
1005d65c:	7418      	strb	r0, [r3, #16]
1005d65e:	2196      	movs	r1, #150	@ 0x96
1005d660:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d662:	4341      	muls	r1, r0
1005d664:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d666:	9112      	str	r1, [sp, #72]	@ 0x48
1005d668:	6081      	str	r1, [r0, #8]
1005d66a:	2001      	movs	r0, #1
1005d66c:	9004      	str	r0, [sp, #16]
1005d66e:	43c0      	mvns	r0, r0
1005d670:	b279      	sxtb	r1, r7
1005d672:	4281      	cmp	r1, r0
1005d674:	dc10      	bgt.n	1005d698 <LL_sched_engine+0x94>
1005d676:	207f      	movs	r0, #127	@ 0x7f
1005d678:	4007      	ands	r7, r0
1005d67a:	252c      	movs	r5, #44	@ 0x2c
1005d67c:	437d      	muls	r5, r7
1005d67e:	9c07      	ldr	r4, [sp, #28]
1005d680:	1960      	adds	r0, r4, r5
1005d682:	900a      	str	r0, [sp, #40]	@ 0x28
1005d684:	5966      	ldr	r6, [r4, r5]
1005d686:	f7f2 f9a8 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005d68a:	1a30      	subs	r0, r6, r0
1005d68c:	49be      	ldr	r1, [pc, #760]	@ (1005d988 <__arm_cp.13_3>)
1005d68e:	1840      	adds	r0, r0, r1
1005d690:	d500      	bpl.n	1005d694 <LL_sched_engine+0x90>
1005d692:	e0ef      	b.n	1005d874 <LL_sched_engine+0x270>
1005d694:	4638      	mov	r0, r7
1005d696:	e004      	b.n	1005d6a2 <LL_sched_engine+0x9e>
1005d698:	b2f8      	uxtb	r0, r7
1005d69a:	28ff      	cmp	r0, #255	@ 0xff
1005d69c:	d00e      	beq.n	1005d6bc <LL_sched_engine+0xb8>
1005d69e:	2100      	movs	r1, #0
1005d6a0:	910a      	str	r1, [sp, #40]	@ 0x28
1005d6a2:	212c      	movs	r1, #44	@ 0x2c
1005d6a4:	4341      	muls	r1, r0
1005d6a6:	9807      	ldr	r0, [sp, #28]
1005d6a8:	1840      	adds	r0, r0, r1
1005d6aa:	2101      	movs	r1, #1
1005d6ac:	7501      	strb	r1, [r0, #20]
1005d6ae:	7c81      	ldrb	r1, [r0, #18]
1005d6b0:	2908      	cmp	r1, #8
1005d6b2:	d102      	bne.n	1005d6ba <LL_sched_engine+0xb6>
1005d6b4:	3012      	adds	r0, #18
1005d6b6:	2104      	movs	r1, #4
1005d6b8:	7001      	strb	r1, [r0, #0]
1005d6ba:	9708      	str	r7, [sp, #32]
1005d6bc:	f7f2 f98d 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005d6c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005d6c2:	180c      	adds	r4, r1, r0
1005d6c4:	48af      	ldr	r0, [pc, #700]	@ (1005d984 <__arm_cp.13_2>)
1005d6c6:	6807      	ldr	r7, [r0, #0]
1005d6c8:	3728      	adds	r7, #40	@ 0x28
1005d6ca:	2500      	movs	r5, #0
1005d6cc:	4628      	mov	r0, r5
1005d6ce:	49af      	ldr	r1, [pc, #700]	@ (1005d98c <__arm_cp.13_4>)
1005d6d0:	7aca      	ldrb	r2, [r1, #11]
1005d6d2:	4295      	cmp	r5, r2
1005d6d4:	d23a      	bcs.n	1005d74c <LL_sched_engine+0x148>
1005d6d6:	463e      	mov	r6, r7
1005d6d8:	3e16      	subs	r6, #22
1005d6da:	7831      	ldrb	r1, [r6, #0]
1005d6dc:	070a      	lsls	r2, r1, #28
1005d6de:	0f52      	lsrs	r2, r2, #29
1005d6e0:	d01e      	beq.n	1005d720 <LL_sched_engine+0x11c>
1005d6e2:	2104      	movs	r1, #4
1005d6e4:	7031      	strb	r1, [r6, #0]
1005d6e6:	4639      	mov	r1, r7
1005d6e8:	3928      	subs	r1, #40	@ 0x28
1005d6ea:	6809      	ldr	r1, [r1, #0]
1005d6ec:	43ca      	mvns	r2, r1
1005d6ee:	18a2      	adds	r2, r4, r2
1005d6f0:	d429      	bmi.n	1005d746 <LL_sched_engine+0x142>
1005d6f2:	1a61      	subs	r1, r4, r1
1005d6f4:	4638      	mov	r0, r7
1005d6f6:	381c      	subs	r0, #28
1005d6f8:	6800      	ldr	r0, [r0, #0]
1005d6fa:	463a      	mov	r2, r7
1005d6fc:	3a0c      	subs	r2, #12
1005d6fe:	6812      	ldr	r2, [r2, #0]
1005d700:	4790      	blx	r2
1005d702:	4639      	mov	r1, r7
1005d704:	3918      	subs	r1, #24
1005d706:	880a      	ldrh	r2, [r1, #0]
1005d708:	1812      	adds	r2, r2, r0
1005d70a:	800a      	strh	r2, [r1, #0]
1005d70c:	4639      	mov	r1, r7
1005d70e:	3914      	subs	r1, #20
1005d710:	780a      	ldrb	r2, [r1, #0]
1005d712:	1880      	adds	r0, r0, r2
1005d714:	287f      	cmp	r0, #127	@ 0x7f
1005d716:	d300      	bcc.n	1005d71a <LL_sched_engine+0x116>
1005d718:	207f      	movs	r0, #127	@ 0x7f
1005d71a:	7008      	strb	r0, [r1, #0]
1005d71c:	7831      	ldrb	r1, [r6, #0]
1005d71e:	2001      	movs	r0, #1
1005d720:	0689      	lsls	r1, r1, #26
1005d722:	0f89      	lsrs	r1, r1, #30
1005d724:	d00f      	beq.n	1005d746 <LL_sched_engine+0x142>
1005d726:	6839      	ldr	r1, [r7, #0]
1005d728:	2900      	cmp	r1, #0
1005d72a:	d006      	beq.n	1005d73a <LL_sched_engine+0x136>
1005d72c:	4638      	mov	r0, r7
1005d72e:	381c      	subs	r0, #28
1005d730:	6800      	ldr	r0, [r0, #0]
1005d732:	4788      	blx	r1
1005d734:	7830      	ldrb	r0, [r6, #0]
1005d736:	2801      	cmp	r0, #1
1005d738:	d004      	beq.n	1005d744 <LL_sched_engine+0x140>
1005d73a:	2000      	movs	r0, #0
1005d73c:	7030      	strb	r0, [r6, #0]
1005d73e:	4639      	mov	r1, r7
1005d740:	3915      	subs	r1, #21
1005d742:	7008      	strb	r0, [r1, #0]
1005d744:	2001      	movs	r0, #1
1005d746:	372c      	adds	r7, #44	@ 0x2c
1005d748:	1c6d      	adds	r5, r5, #1
1005d74a:	e7c0      	b.n	1005d6ce <LL_sched_engine+0xca>
1005d74c:	2800      	cmp	r0, #0
1005d74e:	d1b5      	bne.n	1005d6bc <LL_sched_engine+0xb8>
1005d750:	488c      	ldr	r0, [pc, #560]	@ (1005d984 <__arm_cp.13_2>)
1005d752:	6800      	ldr	r0, [r0, #0]
1005d754:	4603      	mov	r3, r0
1005d756:	3312      	adds	r3, #18
1005d758:	2400      	movs	r4, #0
1005d75a:	4621      	mov	r1, r4
1005d75c:	42a2      	cmp	r2, r4
1005d75e:	d009      	beq.n	1005d774 <LL_sched_engine+0x170>
1005d760:	781d      	ldrb	r5, [r3, #0]
1005d762:	2d04      	cmp	r5, #4
1005d764:	d103      	bne.n	1005d76e <LL_sched_engine+0x16a>
1005d766:	b2cd      	uxtb	r5, r1
1005d768:	ae13      	add	r6, sp, #76	@ 0x4c
1005d76a:	5574      	strb	r4, [r6, r5]
1005d76c:	1c49      	adds	r1, r1, #1
1005d76e:	332c      	adds	r3, #44	@ 0x2c
1005d770:	1c64      	adds	r4, r4, #1
1005d772:	e7f3      	b.n	1005d75c <LL_sched_engine+0x158>
1005d774:	060a      	lsls	r2, r1, #24
1005d776:	d074      	beq.n	1005d862 <LL_sched_engine+0x25e>
1005d778:	b2ca      	uxtb	r2, r1
1005d77a:	920e      	str	r2, [sp, #56]	@ 0x38
1005d77c:	2200      	movs	r2, #0
1005d77e:	9206      	str	r2, [sp, #24]
1005d780:	460c      	mov	r4, r1
1005d782:	9203      	str	r2, [sp, #12]
1005d784:	4616      	mov	r6, r2
1005d786:	910d      	str	r1, [sp, #52]	@ 0x34
1005d788:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005d78a:	4296      	cmp	r6, r2
1005d78c:	d06e      	beq.n	1005d86c <LL_sched_engine+0x268>
1005d78e:	9612      	str	r6, [sp, #72]	@ 0x48
1005d790:	9410      	str	r4, [sp, #64]	@ 0x40
1005d792:	b2e3      	uxtb	r3, r4
1005d794:	2700      	movs	r7, #0
1005d796:	462c      	mov	r4, r5
1005d798:	463e      	mov	r6, r7
1005d79a:	42bb      	cmp	r3, r7
1005d79c:	d00d      	beq.n	1005d7ba <LL_sched_engine+0x1b6>
1005d79e:	aa13      	add	r2, sp, #76	@ 0x4c
1005d7a0:	5dd2      	ldrb	r2, [r2, r7]
1005d7a2:	252c      	movs	r5, #44	@ 0x2c
1005d7a4:	4355      	muls	r5, r2
1005d7a6:	5945      	ldr	r5, [r0, r5]
1005d7a8:	2f00      	cmp	r7, #0
1005d7aa:	d002      	beq.n	1005d7b2 <LL_sched_engine+0x1ae>
1005d7ac:	43f2      	mvns	r2, r6
1005d7ae:	18aa      	adds	r2, r5, r2
1005d7b0:	d501      	bpl.n	1005d7b6 <LL_sched_engine+0x1b2>
1005d7b2:	463c      	mov	r4, r7
1005d7b4:	462e      	mov	r6, r5
1005d7b6:	1c7f      	adds	r7, r7, #1
1005d7b8:	e7ef      	b.n	1005d79a <LL_sched_engine+0x196>
1005d7ba:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005d7bc:	1b4a      	subs	r2, r1, r5
1005d7be:	b2d2      	uxtb	r2, r2
1005d7c0:	1e51      	subs	r1, r2, #1
1005d7c2:	aa13      	add	r2, sp, #76	@ 0x4c
1005d7c4:	5c53      	ldrb	r3, [r2, r1]
1005d7c6:	b2e4      	uxtb	r4, r4
1005d7c8:	5d17      	ldrb	r7, [r2, r4]
1005d7ca:	5457      	strb	r7, [r2, r1]
1005d7cc:	5513      	strb	r3, [r2, r4]
1005d7ce:	910f      	str	r1, [sp, #60]	@ 0x3c
1005d7d0:	b2cb      	uxtb	r3, r1
1005d7d2:	5cd3      	ldrb	r3, [r2, r3]
1005d7d4:	2d00      	cmp	r5, #0
1005d7d6:	d02e      	beq.n	1005d836 <LL_sched_engine+0x232>
1005d7d8:	461d      	mov	r5, r3
1005d7da:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005d7dc:	b2ca      	uxtb	r2, r1
1005d7de:	ac13      	add	r4, sp, #76	@ 0x4c
1005d7e0:	5ca4      	ldrb	r4, [r4, r2]
1005d7e2:	272c      	movs	r7, #44	@ 0x2c
1005d7e4:	437c      	muls	r4, r7
1005d7e6:	5902      	ldr	r2, [r0, r4]
1005d7e8:	1b91      	subs	r1, r2, r6
1005d7ea:	1904      	adds	r4, r0, r4
1005d7ec:	6863      	ldr	r3, [r4, #4]
1005d7ee:	18c9      	adds	r1, r1, r3
1005d7f0:	3195      	adds	r1, #149	@ 0x95
1005d7f2:	d44a      	bmi.n	1005d88a <LL_sched_engine+0x286>
1005d7f4:	43d1      	mvns	r1, r2
1005d7f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005d7f8:	1851      	adds	r1, r2, r1
1005d7fa:	d449      	bmi.n	1005d890 <LL_sched_engine+0x28c>
1005d7fc:	436f      	muls	r7, r5
1005d7fe:	19c1      	adds	r1, r0, r7
1005d800:	7d8a      	ldrb	r2, [r1, #22]
1005d802:	7d0b      	ldrb	r3, [r1, #20]
1005d804:	4093      	lsls	r3, r2
1005d806:	7d49      	ldrb	r1, [r1, #21]
1005d808:	2601      	movs	r6, #1
1005d80a:	4632      	mov	r2, r6
1005d80c:	408a      	lsls	r2, r1
1005d80e:	429a      	cmp	r2, r3
1005d810:	d800      	bhi.n	1005d814 <LL_sched_engine+0x210>
1005d812:	4613      	mov	r3, r2
1005d814:	7da1      	ldrb	r1, [r4, #22]
1005d816:	7d27      	ldrb	r7, [r4, #20]
1005d818:	408f      	lsls	r7, r1
1005d81a:	7d61      	ldrb	r1, [r4, #21]
1005d81c:	408e      	lsls	r6, r1
1005d81e:	42be      	cmp	r6, r7
1005d820:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005d822:	d800      	bhi.n	1005d826 <LL_sched_engine+0x222>
1005d824:	4637      	mov	r7, r6
1005d826:	429f      	cmp	r7, r3
1005d828:	462b      	mov	r3, r5
1005d82a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005d82c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005d82e:	d300      	bcc.n	1005d832 <LL_sched_engine+0x22e>
1005d830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1005d832:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005d834:	e011      	b.n	1005d85a <LL_sched_engine+0x256>
1005d836:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005d838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005d83a:	2a01      	cmp	r2, #1
1005d83c:	d101      	bne.n	1005d842 <LL_sched_engine+0x23e>
1005d83e:	2202      	movs	r2, #2
1005d840:	9206      	str	r2, [sp, #24]
1005d842:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005d844:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005d846:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005d848:	222c      	movs	r2, #44	@ 0x2c
1005d84a:	435a      	muls	r2, r3
1005d84c:	5883      	ldr	r3, [r0, r2]
1005d84e:	1882      	adds	r2, r0, r2
1005d850:	6852      	ldr	r2, [r2, #4]
1005d852:	189a      	adds	r2, r3, r2
1005d854:	3296      	adds	r2, #150	@ 0x96
1005d856:	920c      	str	r2, [sp, #48]	@ 0x30
1005d858:	462b      	mov	r3, r5
1005d85a:	1e64      	subs	r4, r4, #1
1005d85c:	1c76      	adds	r6, r6, #1
1005d85e:	9311      	str	r3, [sp, #68]	@ 0x44
1005d860:	e792      	b.n	1005d788 <LL_sched_engine+0x184>
1005d862:	2000      	movs	r0, #0
1005d864:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005d866:	6048      	str	r0, [r1, #4]
1005d868:	7388      	strb	r0, [r1, #14]
1005d86a:	e02d      	b.n	1005d8c8 <LL_sched_engine+0x2c4>
1005d86c:	9a03      	ldr	r2, [sp, #12]
1005d86e:	4616      	mov	r6, r2
1005d870:	9b06      	ldr	r3, [sp, #24]
1005d872:	e013      	b.n	1005d89c <LL_sched_engine+0x298>
1005d874:	1960      	adds	r0, r4, r5
1005d876:	7c80      	ldrb	r0, [r0, #18]
1005d878:	2810      	cmp	r0, #16
1005d87a:	d100      	bne.n	1005d87e <LL_sched_engine+0x27a>
1005d87c:	e70a      	b.n	1005d694 <LL_sched_engine+0x90>
1005d87e:	2820      	cmp	r0, #32
1005d880:	d100      	bne.n	1005d884 <LL_sched_engine+0x280>
1005d882:	e707      	b.n	1005d694 <LL_sched_engine+0x90>
1005d884:	2400      	movs	r4, #0
1005d886:	463d      	mov	r5, r7
1005d888:	e021      	b.n	1005d8ce <LL_sched_engine+0x2ca>
1005d88a:	3e96      	subs	r6, #150	@ 0x96
1005d88c:	9b04      	ldr	r3, [sp, #16]
1005d88e:	e004      	b.n	1005d89a <LL_sched_engine+0x296>
1005d890:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d892:	1e40      	subs	r0, r0, #1
1005d894:	9011      	str	r0, [sp, #68]	@ 0x44
1005d896:	2600      	movs	r6, #0
1005d898:	4633      	mov	r3, r6
1005d89a:	9a03      	ldr	r2, [sp, #12]
1005d89c:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005d89e:	b2c0      	uxtb	r0, r0
1005d8a0:	a913      	add	r1, sp, #76	@ 0x4c
1005d8a2:	5c0d      	ldrb	r5, [r1, r0]
1005d8a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d8a6:	6042      	str	r2, [r0, #4]
1005d8a8:	7383      	strb	r3, [r0, #14]
1005d8aa:	2dff      	cmp	r5, #255	@ 0xff
1005d8ac:	d00c      	beq.n	1005d8c8 <LL_sched_engine+0x2c4>
1005d8ae:	202c      	movs	r0, #44	@ 0x2c
1005d8b0:	4368      	muls	r0, r5
1005d8b2:	9907      	ldr	r1, [sp, #28]
1005d8b4:	1809      	adds	r1, r1, r0
1005d8b6:	b2d8      	uxtb	r0, r3
1005d8b8:	2801      	cmp	r0, #1
1005d8ba:	910a      	str	r1, [sp, #40]	@ 0x28
1005d8bc:	d105      	bne.n	1005d8ca <LL_sched_engine+0x2c6>
1005d8be:	6808      	ldr	r0, [r1, #0]
1005d8c0:	1a30      	subs	r0, r6, r0
1005d8c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005d8c4:	6048      	str	r0, [r1, #4]
1005d8c6:	e000      	b.n	1005d8ca <LL_sched_engine+0x2c6>
1005d8c8:	25ff      	movs	r5, #255	@ 0xff
1005d8ca:	9c01      	ldr	r4, [sp, #4]
1005d8cc:	9f08      	ldr	r7, [sp, #32]
1005d8ce:	f7f3 f821 	bl	10050914 <BLEPLAT_CNTR_ClearSemareq>
1005d8d2:	482a      	ldr	r0, [pc, #168]	@ (1005d97c <__arm_cp.13_0>)
1005d8d4:	6800      	ldr	r0, [r0, #0]
1005d8d6:	2dff      	cmp	r5, #255	@ 0xff
1005d8d8:	d02f      	beq.n	1005d93a <LL_sched_engine+0x336>
1005d8da:	9711      	str	r7, [sp, #68]	@ 0x44
1005d8dc:	9412      	str	r4, [sp, #72]	@ 0x48
1005d8de:	4604      	mov	r4, r0
1005d8e0:	2008      	movs	r0, #8
1005d8e2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1005d8e4:	74b8      	strb	r0, [r7, #18]
1005d8e6:	f7fe fa36 	bl	1005bd56 <llc_cte_timer_stop_ucfg_weak>
1005d8ea:	7365      	strb	r5, [r4, #13]
1005d8ec:	6a3a      	ldr	r2, [r7, #32]
1005d8ee:	68f8      	ldr	r0, [r7, #12]
1005d8f0:	6879      	ldr	r1, [r7, #4]
1005d8f2:	4790      	blx	r2
1005d8f4:	683e      	ldr	r6, [r7, #0]
1005d8f6:	940b      	str	r4, [sp, #44]	@ 0x2c
1005d8f8:	6026      	str	r6, [r4, #0]
1005d8fa:	4628      	mov	r0, r5
1005d8fc:	f7f3 f820 	bl	10050940 <BLEPLAT_CNTR_GlobWriteSlot>
1005d900:	f7f3 f817 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
1005d904:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005d906:	2800      	cmp	r0, #0
1005d908:	d023      	beq.n	1005d952 <LL_sched_engine+0x34e>
1005d90a:	7cf8      	ldrb	r0, [r7, #19]
1005d90c:	09c1      	lsrs	r1, r0, #7
1005d90e:	2201      	movs	r2, #1
1005d910:	4630      	mov	r0, r6
1005d912:	f7f2 f889 	bl	1004fa28 <BLEPLAT_SetRadioTimerValue>
1005d916:	2800      	cmp	r0, #0
1005d918:	d01d      	beq.n	1005d956 <LL_sched_engine+0x352>
1005d91a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d91c:	0040      	lsls	r0, r0, #1
1005d91e:	9009      	str	r0, [sp, #36]	@ 0x24
1005d920:	2810      	cmp	r0, #16
1005d922:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1005d924:	d200      	bcs.n	1005d928 <LL_sched_engine+0x324>
1005d926:	e676      	b.n	1005d616 <LL_sched_engine+0x12>
1005d928:	f7fe fa14 	bl	1005bd54 <llc_cte_timer_error_ucfg_weak>
1005d92c:	20a1      	movs	r0, #161	@ 0xa1
1005d92e:	2106      	movs	r1, #6
1005d930:	2200      	movs	r2, #0
1005d932:	4613      	mov	r3, r2
1005d934:	f003 fc12 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
1005d938:	e009      	b.n	1005d94e <LL_sched_engine+0x34a>
1005d93a:	4604      	mov	r4, r0
1005d93c:	f7f2 f88e 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1005d940:	f7f2 fff0 	bl	10050924 <BLEPLAT_CNTR_GlobDisableBlue>
1005d944:	2000      	movs	r0, #0
1005d946:	73e0      	strb	r0, [r4, #15]
1005d948:	20ff      	movs	r0, #255	@ 0xff
1005d94a:	0200      	lsls	r0, r0, #8
1005d94c:	81a0      	strh	r0, [r4, #12]
1005d94e:	9904      	ldr	r1, [sp, #16]
1005d950:	e00f      	b.n	1005d972 <LL_sched_engine+0x36e>
1005d952:	f7f2 f89b 	bl	1004fa8c <BLEPLAT_SetRadioCloseTimeout>
1005d956:	9b04      	ldr	r3, [sp, #16]
1005d958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005d95a:	730b      	strb	r3, [r1, #12]
1005d95c:	7cf8      	ldrb	r0, [r7, #19]
1005d95e:	73c8      	strb	r0, [r1, #15]
1005d960:	9a05      	ldr	r2, [sp, #20]
1005d962:	60d6      	str	r6, [r2, #12]
1005d964:	7c11      	ldrb	r1, [r2, #16]
1005d966:	9c02      	ldr	r4, [sp, #8]
1005d968:	4021      	ands	r1, r4
1005d96a:	0100      	lsls	r0, r0, #4
1005d96c:	1808      	adds	r0, r1, r0
1005d96e:	4619      	mov	r1, r3
1005d970:	7410      	strb	r0, [r2, #16]
1005d972:	4803      	ldr	r0, [pc, #12]	@ (1005d980 <__arm_cp.13_1>)
1005d974:	6800      	ldr	r0, [r0, #0]
1005d976:	7201      	strb	r1, [r0, #8]
1005d978:	b033      	add	sp, #204	@ 0xcc
1005d97a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d97c <__arm_cp.13_0>:
1005d97c:	20000f24 	.word	0x20000f24

1005d980 <__arm_cp.13_1>:
1005d980:	20000f20 	.word	0x20000f20

1005d984 <__arm_cp.13_2>:
1005d984:	20000f28 	.word	0x20000f28

1005d988 <__arm_cp.13_3>:
1005d988:	fffffed4 	.word	0xfffffed4

1005d98c <__arm_cp.13_4>:
1005d98c:	20000f34 	.word	0x20000f34

1005d990 <LL_sched_set_priority>:
1005d990:	b510      	push	{r4, lr}
1005d992:	231f      	movs	r3, #31
1005d994:	401a      	ands	r2, r3
1005d996:	242c      	movs	r4, #44	@ 0x2c
1005d998:	4344      	muls	r4, r0
1005d99a:	4803      	ldr	r0, [pc, #12]	@ (1005d9a8 <__arm_cp.14_0>)
1005d99c:	6800      	ldr	r0, [r0, #0]
1005d99e:	1900      	adds	r0, r0, r4
1005d9a0:	7582      	strb	r2, [r0, #22]
1005d9a2:	4019      	ands	r1, r3
1005d9a4:	7541      	strb	r1, [r0, #21]
1005d9a6:	bd10      	pop	{r4, pc}

1005d9a8 <__arm_cp.14_0>:
1005d9a8:	20000f28 	.word	0x20000f28

1005d9ac <LL_sched_set_params>:
1005d9ac:	b5b0      	push	{r4, r5, r7, lr}
1005d9ae:	242c      	movs	r4, #44	@ 0x2c
1005d9b0:	4344      	muls	r4, r0
1005d9b2:	480b      	ldr	r0, [pc, #44]	@ (1005d9e0 <__arm_cp.15_0>)
1005d9b4:	6800      	ldr	r0, [r0, #0]
1005d9b6:	9d05      	ldr	r5, [sp, #20]
1005d9b8:	5105      	str	r5, [r0, r4]
1005d9ba:	1900      	adds	r0, r0, r4
1005d9bc:	9c04      	ldr	r4, [sp, #16]
1005d9be:	6084      	str	r4, [r0, #8]
1005d9c0:	60c1      	str	r1, [r0, #12]
1005d9c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005d9c4:	6281      	str	r1, [r0, #40]	@ 0x28
1005d9c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005d9c8:	6241      	str	r1, [r0, #36]	@ 0x24
1005d9ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d9cc:	6201      	str	r1, [r0, #32]
1005d9ce:	9908      	ldr	r1, [sp, #32]
1005d9d0:	61c1      	str	r1, [r0, #28]
1005d9d2:	9907      	ldr	r1, [sp, #28]
1005d9d4:	7581      	strb	r1, [r0, #22]
1005d9d6:	9906      	ldr	r1, [sp, #24]
1005d9d8:	7541      	strb	r1, [r0, #21]
1005d9da:	74c2      	strb	r2, [r0, #19]
1005d9dc:	6043      	str	r3, [r0, #4]
1005d9de:	bdb0      	pop	{r4, r5, r7, pc}

1005d9e0 <__arm_cp.15_0>:
1005d9e0:	20000f28 	.word	0x20000f28

1005d9e4 <LL_sched_delete_taskslot>:
1005d9e4:	212c      	movs	r1, #44	@ 0x2c
1005d9e6:	4341      	muls	r1, r0
1005d9e8:	4802      	ldr	r0, [pc, #8]	@ (1005d9f4 <__arm_cp.19_0>)
1005d9ea:	6800      	ldr	r0, [r0, #0]
1005d9ec:	1840      	adds	r0, r0, r1
1005d9ee:	2110      	movs	r1, #16
1005d9f0:	8241      	strh	r1, [r0, #18]
1005d9f2:	4770      	bx	lr

1005d9f4 <__arm_cp.19_0>:
1005d9f4:	20000f28 	.word	0x20000f28

1005d9f8 <LL_sched_set_per_state>:
1005d9f8:	222c      	movs	r2, #44	@ 0x2c
1005d9fa:	4342      	muls	r2, r0
1005d9fc:	4802      	ldr	r0, [pc, #8]	@ (1005da08 <__arm_cp.21_0>)
1005d9fe:	6800      	ldr	r0, [r0, #0]
1005da00:	1880      	adds	r0, r0, r2
1005da02:	7481      	strb	r1, [r0, #18]
1005da04:	4770      	bx	lr
1005da06:	46c0      	nop			@ (mov r8, r8)

1005da08 <__arm_cp.21_0>:
1005da08:	20000f28 	.word	0x20000f28

1005da0c <LL_sched_reserve_taskslot>:
1005da0c:	b510      	push	{r4, lr}
1005da0e:	480e      	ldr	r0, [pc, #56]	@ (1005da48 <__arm_cp.22_0>)
1005da10:	6801      	ldr	r1, [r0, #0]
1005da12:	3128      	adds	r1, #40	@ 0x28
1005da14:	2000      	movs	r0, #0
1005da16:	4a0d      	ldr	r2, [pc, #52]	@ (1005da4c <__arm_cp.22_1>)
1005da18:	7ad3      	ldrb	r3, [r2, #11]
1005da1a:	4298      	cmp	r0, r3
1005da1c:	d20b      	bcs.n	1005da36 <LL_sched_reserve_taskslot+0x2a>
1005da1e:	f3ef 8310 	mrs	r3, PRIMASK
1005da22:	b672      	cpsid	i
1005da24:	460b      	mov	r3, r1
1005da26:	3b16      	subs	r3, #22
1005da28:	781c      	ldrb	r4, [r3, #0]
1005da2a:	2c00      	cmp	r4, #0
1005da2c:	d005      	beq.n	1005da3a <LL_sched_reserve_taskslot+0x2e>
1005da2e:	b662      	cpsie	i
1005da30:	312c      	adds	r1, #44	@ 0x2c
1005da32:	1c40      	adds	r0, r0, #1
1005da34:	e7f0      	b.n	1005da18 <LL_sched_reserve_taskslot+0xc>
1005da36:	20ff      	movs	r0, #255	@ 0xff
1005da38:	e004      	b.n	1005da44 <LL_sched_reserve_taskslot+0x38>
1005da3a:	2200      	movs	r2, #0
1005da3c:	600a      	str	r2, [r1, #0]
1005da3e:	2101      	movs	r1, #1
1005da40:	7019      	strb	r1, [r3, #0]
1005da42:	b662      	cpsie	i
1005da44:	b2c0      	uxtb	r0, r0
1005da46:	bd10      	pop	{r4, pc}

1005da48 <__arm_cp.22_0>:
1005da48:	20000f28 	.word	0x20000f28

1005da4c <__arm_cp.22_1>:
1005da4c:	20000f34 	.word	0x20000f34

1005da50 <LL_sched_release_taskslot>:
1005da50:	28ff      	cmp	r0, #255	@ 0xff
1005da52:	d006      	beq.n	1005da62 <LL_sched_release_taskslot+0x12>
1005da54:	212c      	movs	r1, #44	@ 0x2c
1005da56:	4341      	muls	r1, r0
1005da58:	4802      	ldr	r0, [pc, #8]	@ (1005da64 <__arm_cp.23_0>)
1005da5a:	6800      	ldr	r0, [r0, #0]
1005da5c:	1840      	adds	r0, r0, r1
1005da5e:	2100      	movs	r1, #0
1005da60:	8241      	strh	r1, [r0, #18]
1005da62:	4770      	bx	lr

1005da64 <__arm_cp.23_0>:
1005da64:	20000f28 	.word	0x20000f28

1005da68 <LL_sched_check_and_call_sched>:
1005da68:	b510      	push	{r4, lr}
1005da6a:	460c      	mov	r4, r1
1005da6c:	f3ef 8110 	mrs	r1, PRIMASK
1005da70:	b672      	cpsid	i
1005da72:	f7ff fda5 	bl	1005d5c0 <LL_sched_is_scheduler_call_pending>
1005da76:	b662      	cpsie	i
1005da78:	2800      	cmp	r0, #0
1005da7a:	d000      	beq.n	1005da7e <LL_sched_check_and_call_sched+0x16>
1005da7c:	bd10      	pop	{r4, pc}
1005da7e:	4620      	mov	r0, r4
1005da80:	f7ff fdc0 	bl	1005d604 <LL_sched_engine>
1005da84:	bd10      	pop	{r4, pc}
	...

1005da88 <LL_sched_check_and_wait_sched>:
1005da88:	b5b0      	push	{r4, r5, r7, lr}
1005da8a:	4604      	mov	r4, r0
1005da8c:	4813      	ldr	r0, [pc, #76]	@ (1005dadc <__arm_cp.25_0>)
1005da8e:	7ac0      	ldrb	r0, [r0, #11]
1005da90:	42a0      	cmp	r0, r4
1005da92:	d922      	bls.n	1005dada <LL_sched_check_and_wait_sched+0x52>
1005da94:	f3ef 8010 	mrs	r0, PRIMASK
1005da98:	b672      	cpsid	i
1005da9a:	25ff      	movs	r5, #255	@ 0xff
1005da9c:	35ec      	adds	r5, #236	@ 0xec
1005da9e:	f7f1 ff9c 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005daa2:	1940      	adds	r0, r0, r5
1005daa4:	f7ff fd8c 	bl	1005d5c0 <LL_sched_is_scheduler_call_pending>
1005daa8:	4a0d      	ldr	r2, [pc, #52]	@ (1005dae0 <__arm_cp.25_1>)
1005daaa:	6813      	ldr	r3, [r2, #0]
1005daac:	2100      	movs	r1, #0
1005daae:	7219      	strb	r1, [r3, #8]
1005dab0:	b662      	cpsie	i
1005dab2:	2801      	cmp	r0, #1
1005dab4:	d10c      	bne.n	1005dad0 <LL_sched_check_and_wait_sched+0x48>
1005dab6:	6810      	ldr	r0, [r2, #0]
1005dab8:	6041      	str	r1, [r0, #4]
1005daba:	4a0a      	ldr	r2, [pc, #40]	@ (1005dae4 <__arm_cp.25_2>)
1005dabc:	6843      	ldr	r3, [r0, #4]
1005dabe:	4293      	cmp	r3, r2
1005dac0:	d80b      	bhi.n	1005dada <LL_sched_check_and_wait_sched+0x52>
1005dac2:	7a03      	ldrb	r3, [r0, #8]
1005dac4:	2b00      	cmp	r3, #0
1005dac6:	d107      	bne.n	1005dad8 <LL_sched_check_and_wait_sched+0x50>
1005dac8:	6843      	ldr	r3, [r0, #4]
1005daca:	1c5b      	adds	r3, r3, #1
1005dacc:	6043      	str	r3, [r0, #4]
1005dace:	e7f5      	b.n	1005dabc <LL_sched_check_and_wait_sched+0x34>
1005dad0:	4620      	mov	r0, r4
1005dad2:	f7ff fd97 	bl	1005d604 <LL_sched_engine>
1005dad6:	bdb0      	pop	{r4, r5, r7, pc}
1005dad8:	7201      	strb	r1, [r0, #8]
1005dada:	bdb0      	pop	{r4, r5, r7, pc}

1005dadc <__arm_cp.25_0>:
1005dadc:	20000f34 	.word	0x20000f34

1005dae0 <__arm_cp.25_1>:
1005dae0:	20000f20 	.word	0x20000f20

1005dae4 <__arm_cp.25_2>:
1005dae4:	0004e1ff 	.word	0x0004e1ff

1005dae8 <MBM_init>:
1005dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005daea:	4c18      	ldr	r4, [pc, #96]	@ (1005db4c <__arm_cp.1_0>)
1005daec:	2501      	movs	r5, #1
1005daee:	2204      	movs	r2, #4
1005daf0:	4e17      	ldr	r6, [pc, #92]	@ (1005db50 <__arm_cp.1_1>)
1005daf2:	4620      	mov	r0, r4
1005daf4:	4629      	mov	r1, r5
1005daf6:	47b0      	blx	r6
1005daf8:	4f16      	ldr	r7, [pc, #88]	@ (1005db54 <__arm_cp.1_2>)
1005dafa:	6038      	str	r0, [r7, #0]
1005dafc:	2210      	movs	r2, #16
1005dafe:	4620      	mov	r0, r4
1005db00:	4629      	mov	r1, r5
1005db02:	47b0      	blx	r6
1005db04:	6839      	ldr	r1, [r7, #0]
1005db06:	6008      	str	r0, [r1, #0]
1005db08:	220c      	movs	r2, #12
1005db0a:	4620      	mov	r0, r4
1005db0c:	4629      	mov	r1, r5
1005db0e:	47b0      	blx	r6
1005db10:	6839      	ldr	r1, [r7, #0]
1005db12:	6809      	ldr	r1, [r1, #0]
1005db14:	60c8      	str	r0, [r1, #12]
1005db16:	4d10      	ldr	r5, [pc, #64]	@ (1005db58 <__arm_cp.1_3>)
1005db18:	89e9      	ldrh	r1, [r5, #14]
1005db1a:	2224      	movs	r2, #36	@ 0x24
1005db1c:	4620      	mov	r0, r4
1005db1e:	47b0      	blx	r6
1005db20:	4601      	mov	r1, r0
1005db22:	6838      	ldr	r0, [r7, #0]
1005db24:	6802      	ldr	r2, [r0, #0]
1005db26:	68d0      	ldr	r0, [r2, #12]
1005db28:	6081      	str	r1, [r0, #8]
1005db2a:	2100      	movs	r1, #0
1005db2c:	2908      	cmp	r1, #8
1005db2e:	d003      	beq.n	1005db38 <MBM_init+0x50>
1005db30:	2300      	movs	r3, #0
1005db32:	5253      	strh	r3, [r2, r1]
1005db34:	1c89      	adds	r1, r1, #2
1005db36:	e7f9      	b.n	1005db2c <MBM_init+0x44>
1005db38:	89e9      	ldrh	r1, [r5, #14]
1005db3a:	80d1      	strh	r1, [r2, #6]
1005db3c:	2100      	movs	r1, #0
1005db3e:	8111      	strh	r1, [r2, #8]
1005db40:	89e9      	ldrh	r1, [r5, #14]
1005db42:	8041      	strh	r1, [r0, #2]
1005db44:	f000 f948 	bl	1005ddd8 <Mem_Buff_init>
1005db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005db4a:	46c0      	nop			@ (mov r8, r8)

1005db4c <__arm_cp.1_0>:
1005db4c:	20000f30 	.word	0x20000f30

1005db50 <__arm_cp.1_1>:
1005db50:	1005dda1 	.word	0x1005dda1

1005db54 <__arm_cp.1_2>:
1005db54:	20000f2c 	.word	0x20000f2c

1005db58 <__arm_cp.1_3>:
1005db58:	20000f34 	.word	0x20000f34

1005db5c <MBM_get>:
1005db5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005db5e:	4a1a      	ldr	r2, [pc, #104]	@ (1005dbc8 <__arm_cp.2_0>)
1005db60:	6812      	ldr	r2, [r2, #0]
1005db62:	6813      	ldr	r3, [r2, #0]
1005db64:	f3ef 8210 	mrs	r2, PRIMASK
1005db68:	b672      	cpsid	i
1005db6a:	2206      	movs	r2, #6
1005db6c:	5e9c      	ldrsh	r4, [r3, r2]
1005db6e:	17e2      	asrs	r2, r4, #31
1005db70:	4627      	mov	r7, r4
1005db72:	4397      	bics	r7, r2
1005db74:	0040      	lsls	r0, r0, #1
1005db76:	9000      	str	r0, [sp, #0]
1005db78:	5e18      	ldrsh	r0, [r3, r0]
1005db7a:	4a14      	ldr	r2, [pc, #80]	@ (1005dbcc <__arm_cp.2_1>)
1005db7c:	9102      	str	r1, [sp, #8]
1005db7e:	1889      	adds	r1, r1, r2
1005db80:	0949      	lsrs	r1, r1, #5
1005db82:	1c4d      	adds	r5, r1, #1
1005db84:	2801      	cmp	r0, #1
1005db86:	9501      	str	r5, [sp, #4]
1005db88:	db05      	blt.n	1005db96 <MBM_get+0x3a>
1005db8a:	1b42      	subs	r2, r0, r5
1005db8c:	4256      	negs	r6, r2
1005db8e:	b212      	sxth	r2, r2
1005db90:	13d5      	asrs	r5, r2, #15
1005db92:	4035      	ands	r5, r6
1005db94:	183f      	adds	r7, r7, r0
1005db96:	68d8      	ldr	r0, [r3, #12]
1005db98:	2200      	movs	r2, #0
1005db9a:	5e86      	ldrsh	r6, [r0, r2]
1005db9c:	b209      	sxth	r1, r1
1005db9e:	428e      	cmp	r6, r1
1005dba0:	dd0e      	ble.n	1005dbc0 <MBM_get+0x64>
1005dba2:	b23e      	sxth	r6, r7
1005dba4:	428e      	cmp	r6, r1
1005dba6:	dd0b      	ble.n	1005dbc0 <MBM_get+0x64>
1005dba8:	9900      	ldr	r1, [sp, #0]
1005dbaa:	1859      	adds	r1, r3, r1
1005dbac:	1b62      	subs	r2, r4, r5
1005dbae:	80da      	strh	r2, [r3, #6]
1005dbb0:	880a      	ldrh	r2, [r1, #0]
1005dbb2:	9b01      	ldr	r3, [sp, #4]
1005dbb4:	1ad2      	subs	r2, r2, r3
1005dbb6:	800a      	strh	r2, [r1, #0]
1005dbb8:	9902      	ldr	r1, [sp, #8]
1005dbba:	f000 f943 	bl	1005de44 <Mem_Buff_get>
1005dbbe:	4602      	mov	r2, r0
1005dbc0:	b662      	cpsie	i
1005dbc2:	4610      	mov	r0, r2
1005dbc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005dbc6:	46c0      	nop			@ (mov r8, r8)

1005dbc8 <__arm_cp.2_0>:
1005dbc8:	20000f2c 	.word	0x20000f2c

1005dbcc <__arm_cp.2_1>:
1005dbcc:	001fffff 	.word	0x001fffff

1005dbd0 <MBM_release>:
1005dbd0:	b5b0      	push	{r4, r5, r7, lr}
1005dbd2:	460d      	mov	r5, r1
1005dbd4:	4604      	mov	r4, r0
1005dbd6:	f000 f95b 	bl	1005de90 <Mem_Buff_get_chain_count>
1005dbda:	4601      	mov	r1, r0
1005dbdc:	4628      	mov	r0, r5
1005dbde:	f000 f80b 	bl	1005dbf8 <MBM_release_balance>
1005dbe2:	4804      	ldr	r0, [pc, #16]	@ (1005dbf4 <__arm_cp.3_0>)
1005dbe4:	6800      	ldr	r0, [r0, #0]
1005dbe6:	6800      	ldr	r0, [r0, #0]
1005dbe8:	68c0      	ldr	r0, [r0, #12]
1005dbea:	4621      	mov	r1, r4
1005dbec:	f000 f90f 	bl	1005de0e <Mem_Buff_release>
1005dbf0:	bdb0      	pop	{r4, r5, r7, pc}
1005dbf2:	46c0      	nop			@ (mov r8, r8)

1005dbf4 <__arm_cp.3_0>:
1005dbf4:	20000f2c 	.word	0x20000f2c

1005dbf8 <MBM_release_balance>:
1005dbf8:	b510      	push	{r4, lr}
1005dbfa:	4a0b      	ldr	r2, [pc, #44]	@ (1005dc28 <__arm_cp.4_0>)
1005dbfc:	6812      	ldr	r2, [r2, #0]
1005dbfe:	6812      	ldr	r2, [r2, #0]
1005dc00:	f3ef 8310 	mrs	r3, PRIMASK
1005dc04:	b672      	cpsid	i
1005dc06:	0043      	lsls	r3, r0, #1
1005dc08:	5ed0      	ldrsh	r0, [r2, r3]
1005dc0a:	1844      	adds	r4, r0, r1
1005dc0c:	52d4      	strh	r4, [r2, r3]
1005dc0e:	b20b      	sxth	r3, r1
1005dc10:	18c3      	adds	r3, r0, r3
1005dc12:	2b01      	cmp	r3, #1
1005dc14:	db02      	blt.n	1005dc1c <MBM_release_balance+0x24>
1005dc16:	4243      	negs	r3, r0
1005dc18:	0bc1      	lsrs	r1, r0, #15
1005dc1a:	4019      	ands	r1, r3
1005dc1c:	88d0      	ldrh	r0, [r2, #6]
1005dc1e:	1808      	adds	r0, r1, r0
1005dc20:	80d0      	strh	r0, [r2, #6]
1005dc22:	b662      	cpsie	i
1005dc24:	bd10      	pop	{r4, pc}
1005dc26:	46c0      	nop			@ (mov r8, r8)

1005dc28 <__arm_cp.4_0>:
1005dc28:	20000f2c 	.word	0x20000f2c

1005dc2c <MBM_get_available_mem_buffers>:
1005dc2c:	4908      	ldr	r1, [pc, #32]	@ (1005dc50 <__arm_cp.5_0>)
1005dc2e:	6809      	ldr	r1, [r1, #0]
1005dc30:	680a      	ldr	r2, [r1, #0]
1005dc32:	f3ef 8110 	mrs	r1, PRIMASK
1005dc36:	b672      	cpsid	i
1005dc38:	2106      	movs	r1, #6
1005dc3a:	5e51      	ldrsh	r1, [r2, r1]
1005dc3c:	17cb      	asrs	r3, r1, #31
1005dc3e:	4399      	bics	r1, r3
1005dc40:	0040      	lsls	r0, r0, #1
1005dc42:	5e10      	ldrsh	r0, [r2, r0]
1005dc44:	2800      	cmp	r0, #0
1005dc46:	dd00      	ble.n	1005dc4a <MBM_get_available_mem_buffers+0x1e>
1005dc48:	1809      	adds	r1, r1, r0
1005dc4a:	b288      	uxth	r0, r1
1005dc4c:	b662      	cpsie	i
1005dc4e:	4770      	bx	lr

1005dc50 <__arm_cp.5_0>:
1005dc50:	20000f2c 	.word	0x20000f2c

1005dc54 <MBM_resize>:
1005dc54:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005dc56:	2481      	movs	r4, #129	@ 0x81
1005dc58:	2800      	cmp	r0, #0
1005dc5a:	d032      	beq.n	1005dcc2 <MBM_resize+0x6e>
1005dc5c:	4606      	mov	r6, r0
1005dc5e:	9102      	str	r1, [sp, #8]
1005dc60:	9401      	str	r4, [sp, #4]
1005dc62:	4819      	ldr	r0, [pc, #100]	@ (1005dcc8 <__arm_cp.6_0>)
1005dc64:	6800      	ldr	r0, [r0, #0]
1005dc66:	6800      	ldr	r0, [r0, #0]
1005dc68:	9000      	str	r0, [sp, #0]
1005dc6a:	1e50      	subs	r0, r2, #1
1005dc6c:	211f      	movs	r1, #31
1005dc6e:	4301      	orrs	r1, r0
1005dc70:	1c4c      	adds	r4, r1, #1
1005dc72:	b2a7      	uxth	r7, r4
1005dc74:	4630      	mov	r0, r6
1005dc76:	f000 f913 	bl	1005dea0 <Mem_Buff_get_chain_size>
1005dc7a:	4605      	mov	r5, r0
1005dc7c:	4287      	cmp	r7, r0
1005dc7e:	d90c      	bls.n	1005dc9a <MBM_resize+0x46>
1005dc80:	1b60      	subs	r0, r4, r5
1005dc82:	b281      	uxth	r1, r0
1005dc84:	9802      	ldr	r0, [sp, #8]
1005dc86:	f7ff ff69 	bl	1005db5c <MBM_get>
1005dc8a:	2800      	cmp	r0, #0
1005dc8c:	9c01      	ldr	r4, [sp, #4]
1005dc8e:	d018      	beq.n	1005dcc2 <MBM_resize+0x6e>
1005dc90:	4601      	mov	r1, r0
1005dc92:	4630      	mov	r0, r6
1005dc94:	f000 fa29 	bl	1005e0ea <Mem_Buff_append>
1005dc98:	e012      	b.n	1005dcc0 <MBM_resize+0x6c>
1005dc9a:	42af      	cmp	r7, r5
1005dc9c:	d210      	bcs.n	1005dcc0 <MBM_resize+0x6c>
1005dc9e:	9800      	ldr	r0, [sp, #0]
1005dca0:	68c0      	ldr	r0, [r0, #12]
1005dca2:	4631      	mov	r1, r6
1005dca4:	463a      	mov	r2, r7
1005dca6:	f000 f907 	bl	1005deb8 <Mem_Buff_resize>
1005dcaa:	4604      	mov	r4, r0
1005dcac:	1e78      	subs	r0, r7, #1
1005dcae:	0940      	lsrs	r0, r0, #5
1005dcb0:	1e69      	subs	r1, r5, #1
1005dcb2:	0949      	lsrs	r1, r1, #5
1005dcb4:	1a08      	subs	r0, r1, r0
1005dcb6:	b281      	uxth	r1, r0
1005dcb8:	9802      	ldr	r0, [sp, #8]
1005dcba:	f7ff ff9d 	bl	1005dbf8 <MBM_release_balance>
1005dcbe:	e000      	b.n	1005dcc2 <MBM_resize+0x6e>
1005dcc0:	2400      	movs	r4, #0
1005dcc2:	4620      	mov	r0, r4
1005dcc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005dcc6:	46c0      	nop			@ (mov r8, r8)

1005dcc8 <__arm_cp.6_0>:
1005dcc8:	20000f2c 	.word	0x20000f2c

1005dccc <MBM_reserve>:
1005dccc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005dcce:	460c      	mov	r4, r1
1005dcd0:	4601      	mov	r1, r0
1005dcd2:	481c      	ldr	r0, [pc, #112]	@ (1005dd44 <__arm_cp.7_0>)
1005dcd4:	6800      	ldr	r0, [r0, #0]
1005dcd6:	6805      	ldr	r5, [r0, #0]
1005dcd8:	8928      	ldrh	r0, [r5, #8]
1005dcda:	68ea      	ldr	r2, [r5, #12]
1005dcdc:	8852      	ldrh	r2, [r2, #2]
1005dcde:	1a13      	subs	r3, r2, r0
1005dce0:	42a3      	cmp	r3, r4
1005dce2:	da26      	bge.n	1005dd32 <MBM_reserve+0x66>
1005dce4:	1aa1      	subs	r1, r4, r2
1005dce6:	1808      	adds	r0, r1, r0
1005dce8:	a901      	add	r1, sp, #4
1005dcea:	8008      	strh	r0, [r1, #0]
1005dcec:	4816      	ldr	r0, [pc, #88]	@ (1005dd48 <__arm_cp.7_1>)
1005dcee:	6800      	ldr	r0, [r0, #0]
1005dcf0:	6980      	ldr	r0, [r0, #24]
1005dcf2:	2142      	movs	r1, #66	@ 0x42
1005dcf4:	2240      	movs	r2, #64	@ 0x40
1005dcf6:	2303      	movs	r3, #3
1005dcf8:	f7f4 faf0 	bl	100522dc <aci_event_fifo_push_header>
1005dcfc:	2800      	cmp	r0, #0
1005dcfe:	d017      	beq.n	1005dd30 <MBM_reserve+0x64>
1005dd00:	4604      	mov	r4, r0
1005dd02:	2202      	movs	r2, #2
1005dd04:	72c2      	strb	r2, [r0, #11]
1005dd06:	2009      	movs	r0, #9
1005dd08:	72a0      	strb	r0, [r4, #10]
1005dd0a:	4620      	mov	r0, r4
1005dd0c:	300c      	adds	r0, #12
1005dd0e:	a901      	add	r1, sp, #4
1005dd10:	f7f1 fd98 	bl	1004f844 <BLEPLAT_MemCpy>
1005dd14:	2000      	movs	r0, #0
1005dd16:	7260      	strb	r0, [r4, #9]
1005dd18:	2106      	movs	r1, #6
1005dd1a:	7221      	strb	r1, [r4, #8]
1005dd1c:	71e0      	strb	r0, [r4, #7]
1005dd1e:	71a1      	strb	r1, [r4, #6]
1005dd20:	20ff      	movs	r0, #255	@ 0xff
1005dd22:	7160      	strb	r0, [r4, #5]
1005dd24:	2082      	movs	r0, #130	@ 0x82
1005dd26:	7120      	strb	r0, [r4, #4]
1005dd28:	2042      	movs	r0, #66	@ 0x42
1005dd2a:	4621      	mov	r1, r4
1005dd2c:	f7f4 fb73 	bl	10052416 <aci_event_fifo_push>
1005dd30:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005dd32:	2003      	movs	r0, #3
1005dd34:	4622      	mov	r2, r4
1005dd36:	f000 f809 	bl	1005dd4c <MBM_move_class>
1005dd3a:	8928      	ldrh	r0, [r5, #8]
1005dd3c:	1900      	adds	r0, r0, r4
1005dd3e:	8128      	strh	r0, [r5, #8]
1005dd40:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005dd42:	46c0      	nop			@ (mov r8, r8)

1005dd44 <__arm_cp.7_0>:
1005dd44:	20000f2c 	.word	0x20000f2c

1005dd48 <__arm_cp.7_1>:
1005dd48:	20000ed0 	.word	0x20000ed0

1005dd4c <MBM_move_class>:
1005dd4c:	b510      	push	{r4, lr}
1005dd4e:	4b08      	ldr	r3, [pc, #32]	@ (1005dd70 <__arm_cp.8_0>)
1005dd50:	681b      	ldr	r3, [r3, #0]
1005dd52:	681b      	ldr	r3, [r3, #0]
1005dd54:	f3ef 8410 	mrs	r4, PRIMASK
1005dd58:	b672      	cpsid	i
1005dd5a:	0040      	lsls	r0, r0, #1
1005dd5c:	5a1c      	ldrh	r4, [r3, r0]
1005dd5e:	1aa4      	subs	r4, r4, r2
1005dd60:	521c      	strh	r4, [r3, r0]
1005dd62:	0048      	lsls	r0, r1, #1
1005dd64:	5a19      	ldrh	r1, [r3, r0]
1005dd66:	1889      	adds	r1, r1, r2
1005dd68:	5219      	strh	r1, [r3, r0]
1005dd6a:	b662      	cpsie	i
1005dd6c:	bd10      	pop	{r4, pc}
1005dd6e:	46c0      	nop			@ (mov r8, r8)

1005dd70 <__arm_cp.8_0>:
1005dd70:	20000f2c 	.word	0x20000f2c

1005dd74 <MBM_unreserve>:
1005dd74:	b5b0      	push	{r4, r5, r7, lr}
1005dd76:	460c      	mov	r4, r1
1005dd78:	4905      	ldr	r1, [pc, #20]	@ (1005dd90 <__arm_cp.9_0>)
1005dd7a:	6809      	ldr	r1, [r1, #0]
1005dd7c:	680d      	ldr	r5, [r1, #0]
1005dd7e:	2103      	movs	r1, #3
1005dd80:	4622      	mov	r2, r4
1005dd82:	f7ff ffe3 	bl	1005dd4c <MBM_move_class>
1005dd86:	8928      	ldrh	r0, [r5, #8]
1005dd88:	1b00      	subs	r0, r0, r4
1005dd8a:	8128      	strh	r0, [r5, #8]
1005dd8c:	bdb0      	pop	{r4, r5, r7, pc}
1005dd8e:	46c0      	nop			@ (mov r8, r8)

1005dd90 <__arm_cp.9_0>:
1005dd90:	20000f2c 	.word	0x20000f2c

1005dd94 <csmem_init>:
1005dd94:	4801      	ldr	r0, [pc, #4]	@ (1005dd9c <__arm_cp.0_0>)
1005dd96:	6841      	ldr	r1, [r0, #4]
1005dd98:	6001      	str	r1, [r0, #0]
1005dd9a:	4770      	bx	lr

1005dd9c <__arm_cp.0_0>:
1005dd9c:	20000f30 	.word	0x20000f30

1005dda0 <csmem_mem_assign>:
1005dda0:	b570      	push	{r4, r5, r6, lr}
1005dda2:	4614      	mov	r4, r2
1005dda4:	4605      	mov	r5, r0
1005dda6:	434c      	muls	r4, r1
1005dda8:	6800      	ldr	r0, [r0, #0]
1005ddaa:	1e40      	subs	r0, r0, #1
1005ddac:	2103      	movs	r1, #3
1005ddae:	4301      	orrs	r1, r0
1005ddb0:	1c4e      	adds	r6, r1, #1
1005ddb2:	2100      	movs	r1, #0
1005ddb4:	4630      	mov	r0, r6
1005ddb6:	4622      	mov	r2, r4
1005ddb8:	f7f1 fd54 	bl	1004f864 <BLEPLAT_MemSet>
1005ddbc:	1930      	adds	r0, r6, r4
1005ddbe:	6028      	str	r0, [r5, #0]
1005ddc0:	4630      	mov	r0, r6
1005ddc2:	bd70      	pop	{r4, r5, r6, pc}

1005ddc4 <csmem_mem_0_assign>:
1005ddc4:	b580      	push	{r7, lr}
1005ddc6:	460a      	mov	r2, r1
1005ddc8:	4601      	mov	r1, r0
1005ddca:	4802      	ldr	r0, [pc, #8]	@ (1005ddd4 <__arm_cp.3_0>)
1005ddcc:	f7ff ffe8 	bl	1005dda0 <csmem_mem_assign>
1005ddd0:	bd80      	pop	{r7, pc}
1005ddd2:	46c0      	nop			@ (mov r8, r8)

1005ddd4 <__arm_cp.3_0>:
1005ddd4:	20000f30 	.word	0x20000f30

1005ddd8 <Mem_Buff_init>:
1005ddd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ddda:	b081      	sub	sp, #4
1005dddc:	4605      	mov	r5, r0
1005ddde:	8840      	ldrh	r0, [r0, #2]
1005dde0:	2486      	movs	r4, #134	@ 0x86
1005dde2:	2800      	cmp	r0, #0
1005dde4:	d010      	beq.n	1005de08 <Mem_Buff_init+0x30>
1005dde6:	68ae      	ldr	r6, [r5, #8]
1005dde8:	2e00      	cmp	r6, #0
1005ddea:	d00d      	beq.n	1005de08 <Mem_Buff_init+0x30>
1005ddec:	2400      	movs	r4, #0
1005ddee:	606c      	str	r4, [r5, #4]
1005ddf0:	802c      	strh	r4, [r5, #0]
1005ddf2:	4627      	mov	r7, r4
1005ddf4:	6034      	str	r4, [r6, #0]
1005ddf6:	4628      	mov	r0, r5
1005ddf8:	4631      	mov	r1, r6
1005ddfa:	f000 f808 	bl	1005de0e <Mem_Buff_release>
1005ddfe:	3624      	adds	r6, #36	@ 0x24
1005de00:	1c7f      	adds	r7, r7, #1
1005de02:	8868      	ldrh	r0, [r5, #2]
1005de04:	4287      	cmp	r7, r0
1005de06:	d3f5      	bcc.n	1005ddf4 <Mem_Buff_init+0x1c>
1005de08:	4620      	mov	r0, r4
1005de0a:	b001      	add	sp, #4
1005de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005de0e <Mem_Buff_release>:
1005de0e:	b510      	push	{r4, lr}
1005de10:	2900      	cmp	r1, #0
1005de12:	d015      	beq.n	1005de40 <Mem_Buff_release+0x32>
1005de14:	2200      	movs	r2, #0
1005de16:	460c      	mov	r4, r1
1005de18:	4623      	mov	r3, r4
1005de1a:	1c52      	adds	r2, r2, #1
1005de1c:	6824      	ldr	r4, [r4, #0]
1005de1e:	2c00      	cmp	r4, #0
1005de20:	d1fa      	bne.n	1005de18 <Mem_Buff_release+0xa>
1005de22:	f3ef 8410 	mrs	r4, PRIMASK
1005de26:	b672      	cpsid	i
1005de28:	6844      	ldr	r4, [r0, #4]
1005de2a:	6041      	str	r1, [r0, #4]
1005de2c:	601c      	str	r4, [r3, #0]
1005de2e:	8801      	ldrh	r1, [r0, #0]
1005de30:	1889      	adds	r1, r1, r2
1005de32:	8001      	strh	r1, [r0, #0]
1005de34:	b662      	cpsie	i
1005de36:	2000      	movs	r0, #0
1005de38:	f001 fdc2 	bl	1005f9c0 <tsk_signal_resource_idx>
1005de3c:	f7f0 ff41 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005de40:	bd10      	pop	{r4, pc}
	...

1005de44 <Mem_Buff_get>:
1005de44:	b5f0      	push	{r4, r5, r6, r7, lr}
1005de46:	4a11      	ldr	r2, [pc, #68]	@ (1005de8c <__arm_cp.2_0>)
1005de48:	1889      	adds	r1, r1, r2
1005de4a:	0949      	lsrs	r1, r1, #5
1005de4c:	1c4a      	adds	r2, r1, #1
1005de4e:	b294      	uxth	r4, r2
1005de50:	f3ef 8110 	mrs	r1, PRIMASK
1005de54:	b672      	cpsid	i
1005de56:	2100      	movs	r1, #0
1005de58:	2c00      	cmp	r4, #0
1005de5a:	d013      	beq.n	1005de84 <Mem_Buff_get+0x40>
1005de5c:	8803      	ldrh	r3, [r0, #0]
1005de5e:	429c      	cmp	r4, r3
1005de60:	d810      	bhi.n	1005de84 <Mem_Buff_get+0x40>
1005de62:	1e64      	subs	r4, r4, #1
1005de64:	6841      	ldr	r1, [r0, #4]
1005de66:	460d      	mov	r5, r1
1005de68:	d006      	beq.n	1005de78 <Mem_Buff_get+0x34>
1005de6a:	2600      	movs	r6, #0
1005de6c:	460d      	mov	r5, r1
1005de6e:	682d      	ldr	r5, [r5, #0]
1005de70:	1c76      	adds	r6, r6, #1
1005de72:	b2b7      	uxth	r7, r6
1005de74:	42bc      	cmp	r4, r7
1005de76:	d8fa      	bhi.n	1005de6e <Mem_Buff_get+0x2a>
1005de78:	682c      	ldr	r4, [r5, #0]
1005de7a:	6044      	str	r4, [r0, #4]
1005de7c:	2400      	movs	r4, #0
1005de7e:	602c      	str	r4, [r5, #0]
1005de80:	1a9a      	subs	r2, r3, r2
1005de82:	8002      	strh	r2, [r0, #0]
1005de84:	b662      	cpsie	i
1005de86:	4608      	mov	r0, r1
1005de88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005de8a:	46c0      	nop			@ (mov r8, r8)

1005de8c <__arm_cp.2_0>:
1005de8c:	001fffff 	.word	0x001fffff

1005de90 <Mem_Buff_get_chain_count>:
1005de90:	2100      	movs	r1, #0
1005de92:	2800      	cmp	r0, #0
1005de94:	d002      	beq.n	1005de9c <Mem_Buff_get_chain_count+0xc>
1005de96:	6800      	ldr	r0, [r0, #0]
1005de98:	1c49      	adds	r1, r1, #1
1005de9a:	e7fa      	b.n	1005de92 <Mem_Buff_get_chain_count+0x2>
1005de9c:	b288      	uxth	r0, r1
1005de9e:	4770      	bx	lr

1005dea0 <Mem_Buff_get_chain_size>:
1005dea0:	2800      	cmp	r0, #0
1005dea2:	d006      	beq.n	1005deb2 <Mem_Buff_get_chain_size+0x12>
1005dea4:	2100      	movs	r1, #0
1005dea6:	6800      	ldr	r0, [r0, #0]
1005dea8:	1c49      	adds	r1, r1, #1
1005deaa:	2800      	cmp	r0, #0
1005deac:	d1fb      	bne.n	1005dea6 <Mem_Buff_get_chain_size+0x6>
1005deae:	0148      	lsls	r0, r1, #5
1005deb0:	e000      	b.n	1005deb4 <Mem_Buff_get_chain_size+0x14>
1005deb2:	2000      	movs	r0, #0
1005deb4:	b280      	uxth	r0, r0
1005deb6:	4770      	bx	lr

1005deb8 <Mem_Buff_resize>:
1005deb8:	b570      	push	{r4, r5, r6, lr}
1005deba:	2400      	movs	r4, #0
1005debc:	2900      	cmp	r1, #0
1005debe:	d00a      	beq.n	1005ded6 <Mem_Buff_resize+0x1e>
1005dec0:	2600      	movs	r6, #0
1005dec2:	460d      	mov	r5, r1
1005dec4:	6809      	ldr	r1, [r1, #0]
1005dec6:	4633      	mov	r3, r6
1005dec8:	3320      	adds	r3, #32
1005deca:	b29e      	uxth	r6, r3
1005decc:	4296      	cmp	r6, r2
1005dece:	d20e      	bcs.n	1005deee <Mem_Buff_resize+0x36>
1005ded0:	2900      	cmp	r1, #0
1005ded2:	d1f6      	bne.n	1005dec2 <Mem_Buff_resize+0xa>
1005ded4:	e001      	b.n	1005deda <Mem_Buff_resize+0x22>
1005ded6:	4623      	mov	r3, r4
1005ded8:	4625      	mov	r5, r4
1005deda:	1ad1      	subs	r1, r2, r3
1005dedc:	b289      	uxth	r1, r1
1005dede:	f7ff ffb1 	bl	1005de44 <Mem_Buff_get>
1005dee2:	6028      	str	r0, [r5, #0]
1005dee4:	2800      	cmp	r0, #0
1005dee6:	d10a      	bne.n	1005defe <Mem_Buff_resize+0x46>
1005dee8:	2079      	movs	r0, #121	@ 0x79
1005deea:	43c4      	mvns	r4, r0
1005deec:	e007      	b.n	1005defe <Mem_Buff_resize+0x46>
1005deee:	2900      	cmp	r1, #0
1005def0:	d004      	beq.n	1005defc <Mem_Buff_resize+0x44>
1005def2:	f7ff ff8c 	bl	1005de0e <Mem_Buff_release>
1005def6:	2400      	movs	r4, #0
1005def8:	602c      	str	r4, [r5, #0]
1005defa:	e000      	b.n	1005defe <Mem_Buff_resize+0x46>
1005defc:	2400      	movs	r4, #0
1005defe:	b2e0      	uxtb	r0, r4
1005df00:	bd70      	pop	{r4, r5, r6, pc}

1005df02 <Mem_Buff_get_buff_off>:
1005df02:	2900      	cmp	r1, #0
1005df04:	d008      	beq.n	1005df18 <Mem_Buff_get_buff_off+0x16>
1005df06:	2800      	cmp	r0, #0
1005df08:	d009      	beq.n	1005df1e <Mem_Buff_get_buff_off+0x1c>
1005df0a:	b28b      	uxth	r3, r1
1005df0c:	2b20      	cmp	r3, #32
1005df0e:	d304      	bcc.n	1005df1a <Mem_Buff_get_buff_off+0x18>
1005df10:	6800      	ldr	r0, [r0, #0]
1005df12:	3920      	subs	r1, #32
1005df14:	040b      	lsls	r3, r1, #16
1005df16:	d1f6      	bne.n	1005df06 <Mem_Buff_get_buff_off+0x4>
1005df18:	2100      	movs	r1, #0
1005df1a:	8011      	strh	r1, [r2, #0]
1005df1c:	4770      	bx	lr
1005df1e:	2000      	movs	r0, #0
1005df20:	4770      	bx	lr

1005df22 <Mem_Buff_write>:
1005df22:	b5f0      	push	{r4, r5, r6, r7, lr}
1005df24:	b081      	sub	sp, #4
1005df26:	4606      	mov	r6, r0
1005df28:	0950      	lsrs	r0, r2, #5
1005df2a:	0604      	lsls	r4, r0, #24
1005df2c:	d004      	beq.n	1005df38 <Mem_Buff_write+0x16>
1005df2e:	2e00      	cmp	r6, #0
1005df30:	d02d      	beq.n	1005df8e <Mem_Buff_write+0x6c>
1005df32:	6836      	ldr	r6, [r6, #0]
1005df34:	1e40      	subs	r0, r0, #1
1005df36:	e7f8      	b.n	1005df2a <Mem_Buff_write+0x8>
1005df38:	461c      	mov	r4, r3
1005df3a:	1e5b      	subs	r3, r3, #1
1005df3c:	4620      	mov	r0, r4
1005df3e:	4198      	sbcs	r0, r3
1005df40:	2c00      	cmp	r4, #0
1005df42:	d01f      	beq.n	1005df84 <Mem_Buff_write+0x62>
1005df44:	2e00      	cmp	r6, #0
1005df46:	d01d      	beq.n	1005df84 <Mem_Buff_write+0x62>
1005df48:	201f      	movs	r0, #31
1005df4a:	4002      	ands	r2, r0
1005df4c:	2020      	movs	r0, #32
1005df4e:	1a85      	subs	r5, r0, r2
1005df50:	b2a8      	uxth	r0, r5
1005df52:	b2a3      	uxth	r3, r4
1005df54:	4298      	cmp	r0, r3
1005df56:	d300      	bcc.n	1005df5a <Mem_Buff_write+0x38>
1005df58:	4625      	mov	r5, r4
1005df5a:	9500      	str	r5, [sp, #0]
1005df5c:	b2af      	uxth	r7, r5
1005df5e:	18b0      	adds	r0, r6, r2
1005df60:	1d00      	adds	r0, r0, #4
1005df62:	463a      	mov	r2, r7
1005df64:	460d      	mov	r5, r1
1005df66:	f7f1 fc6d 	bl	1004f844 <BLEPLAT_MemCpy>
1005df6a:	9800      	ldr	r0, [sp, #0]
1005df6c:	1a24      	subs	r4, r4, r0
1005df6e:	b2a1      	uxth	r1, r4
1005df70:	1e4a      	subs	r2, r1, #1
1005df72:	4608      	mov	r0, r1
1005df74:	4190      	sbcs	r0, r2
1005df76:	2900      	cmp	r1, #0
1005df78:	d004      	beq.n	1005df84 <Mem_Buff_write+0x62>
1005df7a:	19e9      	adds	r1, r5, r7
1005df7c:	6836      	ldr	r6, [r6, #0]
1005df7e:	2200      	movs	r2, #0
1005df80:	2e00      	cmp	r6, #0
1005df82:	d1e3      	bne.n	1005df4c <Mem_Buff_write+0x2a>
1005df84:	2800      	cmp	r0, #0
1005df86:	d003      	beq.n	1005df90 <Mem_Buff_write+0x6e>
1005df88:	207e      	movs	r0, #126	@ 0x7e
1005df8a:	43c0      	mvns	r0, r0
1005df8c:	e000      	b.n	1005df90 <Mem_Buff_write+0x6e>
1005df8e:	2081      	movs	r0, #129	@ 0x81
1005df90:	b2c0      	uxtb	r0, r0
1005df92:	b001      	add	sp, #4
1005df94:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005df96 <Mem_Buff_read>:
1005df96:	b5f0      	push	{r4, r5, r6, r7, lr}
1005df98:	b081      	sub	sp, #4
1005df9a:	460d      	mov	r5, r1
1005df9c:	4606      	mov	r6, r0
1005df9e:	2a00      	cmp	r2, #0
1005dfa0:	d008      	beq.n	1005dfb4 <Mem_Buff_read+0x1e>
1005dfa2:	2e00      	cmp	r6, #0
1005dfa4:	d02a      	beq.n	1005dffc <Mem_Buff_read+0x66>
1005dfa6:	b290      	uxth	r0, r2
1005dfa8:	2820      	cmp	r0, #32
1005dfaa:	d306      	bcc.n	1005dfba <Mem_Buff_read+0x24>
1005dfac:	6836      	ldr	r6, [r6, #0]
1005dfae:	3a20      	subs	r2, #32
1005dfb0:	0410      	lsls	r0, r2, #16
1005dfb2:	d1f6      	bne.n	1005dfa2 <Mem_Buff_read+0xc>
1005dfb4:	2e00      	cmp	r6, #0
1005dfb6:	d021      	beq.n	1005dffc <Mem_Buff_read+0x66>
1005dfb8:	2200      	movs	r2, #0
1005dfba:	2b00      	cmp	r3, #0
1005dfbc:	d020      	beq.n	1005e000 <Mem_Buff_read+0x6a>
1005dfbe:	2020      	movs	r0, #32
1005dfc0:	1a84      	subs	r4, r0, r2
1005dfc2:	b2a0      	uxth	r0, r4
1005dfc4:	b299      	uxth	r1, r3
1005dfc6:	4288      	cmp	r0, r1
1005dfc8:	d300      	bcc.n	1005dfcc <Mem_Buff_read+0x36>
1005dfca:	461c      	mov	r4, r3
1005dfcc:	b2a7      	uxth	r7, r4
1005dfce:	b290      	uxth	r0, r2
1005dfd0:	1830      	adds	r0, r6, r0
1005dfd2:	1d01      	adds	r1, r0, #4
1005dfd4:	4628      	mov	r0, r5
1005dfd6:	463a      	mov	r2, r7
1005dfd8:	9300      	str	r3, [sp, #0]
1005dfda:	f7f1 fc33 	bl	1004f844 <BLEPLAT_MemCpy>
1005dfde:	9b00      	ldr	r3, [sp, #0]
1005dfe0:	1b1b      	subs	r3, r3, r4
1005dfe2:	0418      	lsls	r0, r3, #16
1005dfe4:	d004      	beq.n	1005dff0 <Mem_Buff_read+0x5a>
1005dfe6:	19ed      	adds	r5, r5, r7
1005dfe8:	6836      	ldr	r6, [r6, #0]
1005dfea:	2200      	movs	r2, #0
1005dfec:	2e00      	cmp	r6, #0
1005dfee:	d1e6      	bne.n	1005dfbe <Mem_Buff_read+0x28>
1005dff0:	b298      	uxth	r0, r3
1005dff2:	2800      	cmp	r0, #0
1005dff4:	d005      	beq.n	1005e002 <Mem_Buff_read+0x6c>
1005dff6:	207e      	movs	r0, #126	@ 0x7e
1005dff8:	43c0      	mvns	r0, r0
1005dffa:	e002      	b.n	1005e002 <Mem_Buff_read+0x6c>
1005dffc:	2081      	movs	r0, #129	@ 0x81
1005dffe:	e000      	b.n	1005e002 <Mem_Buff_read+0x6c>
1005e000:	2000      	movs	r0, #0
1005e002:	b2c0      	uxtb	r0, r0
1005e004:	b001      	add	sp, #4
1005e006:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e008 <Mem_Buff_cmp>:
1005e008:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e00a:	b083      	sub	sp, #12
1005e00c:	9102      	str	r1, [sp, #8]
1005e00e:	4606      	mov	r6, r0
1005e010:	2a00      	cmp	r2, #0
1005e012:	d008      	beq.n	1005e026 <Mem_Buff_cmp+0x1e>
1005e014:	2e00      	cmp	r6, #0
1005e016:	d033      	beq.n	1005e080 <Mem_Buff_cmp+0x78>
1005e018:	b290      	uxth	r0, r2
1005e01a:	2820      	cmp	r0, #32
1005e01c:	d306      	bcc.n	1005e02c <Mem_Buff_cmp+0x24>
1005e01e:	6836      	ldr	r6, [r6, #0]
1005e020:	3a20      	subs	r2, #32
1005e022:	0410      	lsls	r0, r2, #16
1005e024:	d1f6      	bne.n	1005e014 <Mem_Buff_cmp+0xc>
1005e026:	2e00      	cmp	r6, #0
1005e028:	d02a      	beq.n	1005e080 <Mem_Buff_cmp+0x78>
1005e02a:	2200      	movs	r2, #0
1005e02c:	2b00      	cmp	r3, #0
1005e02e:	9301      	str	r3, [sp, #4]
1005e030:	d020      	beq.n	1005e074 <Mem_Buff_cmp+0x6c>
1005e032:	2700      	movs	r7, #0
1005e034:	461d      	mov	r5, r3
1005e036:	b290      	uxth	r0, r2
1005e038:	281f      	cmp	r0, #31
1005e03a:	d814      	bhi.n	1005e066 <Mem_Buff_cmp+0x5e>
1005e03c:	2120      	movs	r1, #32
1005e03e:	1a8c      	subs	r4, r1, r2
1005e040:	b2a1      	uxth	r1, r4
1005e042:	b2aa      	uxth	r2, r5
1005e044:	4291      	cmp	r1, r2
1005e046:	d300      	bcc.n	1005e04a <Mem_Buff_cmp+0x42>
1005e048:	462c      	mov	r4, r5
1005e04a:	b2a2      	uxth	r2, r4
1005e04c:	b2b9      	uxth	r1, r7
1005e04e:	9b02      	ldr	r3, [sp, #8]
1005e050:	1859      	adds	r1, r3, r1
1005e052:	1830      	adds	r0, r6, r0
1005e054:	1d00      	adds	r0, r0, #4
1005e056:	f7f1 fc15 	bl	1004f884 <BLEPLAT_MemCmp>
1005e05a:	2800      	cmp	r0, #0
1005e05c:	d10f      	bne.n	1005e07e <Mem_Buff_cmp+0x76>
1005e05e:	1b2d      	subs	r5, r5, r4
1005e060:	19e7      	adds	r7, r4, r7
1005e062:	2200      	movs	r2, #0
1005e064:	e000      	b.n	1005e068 <Mem_Buff_cmp+0x60>
1005e066:	3a20      	subs	r2, #32
1005e068:	0428      	lsls	r0, r5, #16
1005e06a:	d004      	beq.n	1005e076 <Mem_Buff_cmp+0x6e>
1005e06c:	6836      	ldr	r6, [r6, #0]
1005e06e:	2e00      	cmp	r6, #0
1005e070:	d1e1      	bne.n	1005e036 <Mem_Buff_cmp+0x2e>
1005e072:	e000      	b.n	1005e076 <Mem_Buff_cmp+0x6e>
1005e074:	2700      	movs	r7, #0
1005e076:	b2b8      	uxth	r0, r7
1005e078:	9b01      	ldr	r3, [sp, #4]
1005e07a:	1a1b      	subs	r3, r3, r0
1005e07c:	e000      	b.n	1005e080 <Mem_Buff_cmp+0x78>
1005e07e:	4603      	mov	r3, r0
1005e080:	4618      	mov	r0, r3
1005e082:	b003      	add	sp, #12
1005e084:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e086 <Mem_Buff_block_copy>:
1005e086:	b510      	push	{r4, lr}
1005e088:	1e52      	subs	r2, r2, #1
1005e08a:	231f      	movs	r3, #31
1005e08c:	4313      	orrs	r3, r2
1005e08e:	b29a      	uxth	r2, r3
1005e090:	1c53      	adds	r3, r2, #1
1005e092:	b29a      	uxth	r2, r3
1005e094:	429a      	cmp	r2, r3
1005e096:	d001      	beq.n	1005e09c <Mem_Buff_block_copy+0x16>
1005e098:	2200      	movs	r2, #0
1005e09a:	e00d      	b.n	1005e0b8 <Mem_Buff_block_copy+0x32>
1005e09c:	0953      	lsrs	r3, r2, #5
1005e09e:	460a      	mov	r2, r1
1005e0a0:	2100      	movs	r1, #0
1005e0a2:	1854      	adds	r4, r2, r1
1005e0a4:	6864      	ldr	r4, [r4, #4]
1005e0a6:	5044      	str	r4, [r0, r1]
1005e0a8:	1d09      	adds	r1, r1, #4
1005e0aa:	2920      	cmp	r1, #32
1005e0ac:	d1f9      	bne.n	1005e0a2 <Mem_Buff_block_copy+0x1c>
1005e0ae:	6811      	ldr	r1, [r2, #0]
1005e0b0:	3020      	adds	r0, #32
1005e0b2:	1e5b      	subs	r3, r3, #1
1005e0b4:	041c      	lsls	r4, r3, #16
1005e0b6:	d1f2      	bne.n	1005e09e <Mem_Buff_block_copy+0x18>
1005e0b8:	4610      	mov	r0, r2
1005e0ba:	bd10      	pop	{r4, pc}

1005e0bc <Mem_Buff_block_write>:
1005e0bc:	b5b0      	push	{r4, r5, r7, lr}
1005e0be:	1e52      	subs	r2, r2, #1
1005e0c0:	231f      	movs	r3, #31
1005e0c2:	4313      	orrs	r3, r2
1005e0c4:	b29a      	uxth	r2, r3
1005e0c6:	1c53      	adds	r3, r2, #1
1005e0c8:	b29a      	uxth	r2, r3
1005e0ca:	429a      	cmp	r2, r3
1005e0cc:	d10c      	bne.n	1005e0e8 <Mem_Buff_block_write+0x2c>
1005e0ce:	0952      	lsrs	r2, r2, #5
1005e0d0:	1d03      	adds	r3, r0, #4
1005e0d2:	2400      	movs	r4, #0
1005e0d4:	590d      	ldr	r5, [r1, r4]
1005e0d6:	511d      	str	r5, [r3, r4]
1005e0d8:	1d24      	adds	r4, r4, #4
1005e0da:	2c20      	cmp	r4, #32
1005e0dc:	d1fa      	bne.n	1005e0d4 <Mem_Buff_block_write+0x18>
1005e0de:	6800      	ldr	r0, [r0, #0]
1005e0e0:	3120      	adds	r1, #32
1005e0e2:	1e52      	subs	r2, r2, #1
1005e0e4:	0413      	lsls	r3, r2, #16
1005e0e6:	d1f3      	bne.n	1005e0d0 <Mem_Buff_block_write+0x14>
1005e0e8:	bdb0      	pop	{r4, r5, r7, pc}

1005e0ea <Mem_Buff_append>:
1005e0ea:	4602      	mov	r2, r0
1005e0ec:	6800      	ldr	r0, [r0, #0]
1005e0ee:	2800      	cmp	r0, #0
1005e0f0:	d1fb      	bne.n	1005e0ea <Mem_Buff_append>
1005e0f2:	6011      	str	r1, [r2, #0]
1005e0f4:	4770      	bx	lr
	...

1005e0f8 <BlueNRG_Stack_Initialize_RAM_check>:
1005e0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e0fa:	b097      	sub	sp, #92	@ 0x5c
1005e0fc:	4ce5      	ldr	r4, [pc, #916]	@ (1005e494 <__arm_cp.0_4>)
1005e0fe:	2067      	movs	r0, #103	@ 0x67
1005e100:	43c5      	mvns	r5, r0
1005e102:	f7ed fe63 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e106:	4ee4      	ldr	r6, [pc, #912]	@ (1005e498 <__arm_cp.0_5>)
1005e108:	2801      	cmp	r0, #1
1005e10a:	d002      	beq.n	1005e112 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1005e10c:	7af0      	ldrb	r0, [r6, #11]
1005e10e:	2800      	cmp	r0, #0
1005e110:	d010      	beq.n	1005e134 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1005e112:	4627      	mov	r7, r4
1005e114:	462c      	mov	r4, r5
1005e116:	3438      	adds	r4, #56	@ 0x38
1005e118:	f7ed fe58 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e11c:	7af1      	ldrb	r1, [r6, #11]
1005e11e:	4361      	muls	r1, r4
1005e120:	4378      	muls	r0, r7
1005e122:	1838      	adds	r0, r7, r0
1005e124:	1844      	adds	r4, r0, r1
1005e126:	f7ed fe51 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e12a:	7af1      	ldrb	r1, [r6, #11]
1005e12c:	4341      	muls	r1, r0
1005e12e:	48db      	ldr	r0, [pc, #876]	@ (1005e49c <__arm_cp.0_6>)
1005e130:	4348      	muls	r0, r1
1005e132:	1824      	adds	r4, r4, r0
1005e134:	342e      	adds	r4, #46	@ 0x2e
1005e136:	f7ed fe49 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e13a:	2801      	cmp	r0, #1
1005e13c:	d10e      	bne.n	1005e15c <BlueNRG_Stack_Initialize_RAM_check+0x64>
1005e13e:	4628      	mov	r0, r5
1005e140:	3060      	adds	r0, #96	@ 0x60
1005e142:	8931      	ldrh	r1, [r6, #8]
1005e144:	4341      	muls	r1, r0
1005e146:	4628      	mov	r0, r5
1005e148:	3044      	adds	r0, #68	@ 0x44
1005e14a:	7ab2      	ldrb	r2, [r6, #10]
1005e14c:	4342      	muls	r2, r0
1005e14e:	1850      	adds	r0, r2, r1
1005e150:	4629      	mov	r1, r5
1005e152:	3148      	adds	r1, #72	@ 0x48
1005e154:	7b32      	ldrb	r2, [r6, #12]
1005e156:	434a      	muls	r2, r1
1005e158:	1880      	adds	r0, r0, r2
1005e15a:	e000      	b.n	1005e15e <BlueNRG_Stack_Initialize_RAM_check+0x66>
1005e15c:	2000      	movs	r0, #0
1005e15e:	9003      	str	r0, [sp, #12]
1005e160:	89f0      	ldrh	r0, [r6, #14]
1005e162:	900a      	str	r0, [sp, #40]	@ 0x28
1005e164:	f7f8 fb0a 	bl	1005677c <data_length_extension_csr_ucfg_weak>
1005e168:	2801      	cmp	r0, #1
1005e16a:	d001      	beq.n	1005e170 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1005e16c:	f7fe fe92 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005e170:	f7ed fe24 	bl	1004bdbc <phy_upd_csr_ucfg>
1005e174:	2801      	cmp	r0, #1
1005e176:	9411      	str	r4, [sp, #68]	@ 0x44
1005e178:	d109      	bne.n	1005e18e <BlueNRG_Stack_Initialize_RAM_check+0x96>
1005e17a:	462c      	mov	r4, r5
1005e17c:	3438      	adds	r4, #56	@ 0x38
1005e17e:	f7ed fe25 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e182:	4360      	muls	r0, r4
1005e184:	7af1      	ldrb	r1, [r6, #11]
1005e186:	4341      	muls	r1, r0
1005e188:	3908      	subs	r1, #8
1005e18a:	9109      	str	r1, [sp, #36]	@ 0x24
1005e18c:	e001      	b.n	1005e192 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1005e18e:	2000      	movs	r0, #0
1005e190:	9009      	str	r0, [sp, #36]	@ 0x24
1005e192:	48f2      	ldr	r0, [pc, #968]	@ (1005e55c <__arm_cp.0_3>)
1005e194:	304c      	adds	r0, #76	@ 0x4c
1005e196:	9013      	str	r0, [sp, #76]	@ 0x4c
1005e198:	f7fe fe7c 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005e19c:	2801      	cmp	r0, #1
1005e19e:	d015      	beq.n	1005e1cc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005e1a0:	f7f8 faec 	bl	1005677c <data_length_extension_csr_ucfg_weak>
1005e1a4:	2801      	cmp	r0, #1
1005e1a6:	d011      	beq.n	1005e1cc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005e1a8:	2029      	movs	r0, #41	@ 0x29
1005e1aa:	5c30      	ldrb	r0, [r6, r0]
1005e1ac:	2800      	cmp	r0, #0
1005e1ae:	d10d      	bne.n	1005e1cc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005e1b0:	2025      	movs	r0, #37	@ 0x25
1005e1b2:	5c30      	ldrb	r0, [r6, r0]
1005e1b4:	2800      	cmp	r0, #0
1005e1b6:	d109      	bne.n	1005e1cc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005e1b8:	2026      	movs	r0, #38	@ 0x26
1005e1ba:	5c30      	ldrb	r0, [r6, r0]
1005e1bc:	2800      	cmp	r0, #0
1005e1be:	d002      	beq.n	1005e1c6 <BlueNRG_Stack_Initialize_RAM_check+0xce>
1005e1c0:	48e6      	ldr	r0, [pc, #920]	@ (1005e55c <__arm_cp.0_3>)
1005e1c2:	304c      	adds	r0, #76	@ 0x4c
1005e1c4:	e001      	b.n	1005e1ca <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1005e1c6:	4628      	mov	r0, r5
1005e1c8:	3024      	adds	r0, #36	@ 0x24
1005e1ca:	9013      	str	r0, [sp, #76]	@ 0x4c
1005e1cc:	48e3      	ldr	r0, [pc, #908]	@ (1005e55c <__arm_cp.0_3>)
1005e1ce:	306c      	adds	r0, #108	@ 0x6c
1005e1d0:	9012      	str	r0, [sp, #72]	@ 0x48
1005e1d2:	f7fe fe5f 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005e1d6:	2801      	cmp	r0, #1
1005e1d8:	d015      	beq.n	1005e206 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005e1da:	f7f8 facf 	bl	1005677c <data_length_extension_csr_ucfg_weak>
1005e1de:	2801      	cmp	r0, #1
1005e1e0:	d011      	beq.n	1005e206 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005e1e2:	2029      	movs	r0, #41	@ 0x29
1005e1e4:	5c30      	ldrb	r0, [r6, r0]
1005e1e6:	2800      	cmp	r0, #0
1005e1e8:	d10d      	bne.n	1005e206 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005e1ea:	2025      	movs	r0, #37	@ 0x25
1005e1ec:	5c30      	ldrb	r0, [r6, r0]
1005e1ee:	2800      	cmp	r0, #0
1005e1f0:	d109      	bne.n	1005e206 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005e1f2:	2026      	movs	r0, #38	@ 0x26
1005e1f4:	5c30      	ldrb	r0, [r6, r0]
1005e1f6:	2800      	cmp	r0, #0
1005e1f8:	d002      	beq.n	1005e200 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1005e1fa:	48d8      	ldr	r0, [pc, #864]	@ (1005e55c <__arm_cp.0_3>)
1005e1fc:	306c      	adds	r0, #108	@ 0x6c
1005e1fe:	e001      	b.n	1005e204 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1005e200:	4628      	mov	r0, r5
1005e202:	303c      	adds	r0, #60	@ 0x3c
1005e204:	9012      	str	r0, [sp, #72]	@ 0x48
1005e206:	f7fe fe45 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005e20a:	9010      	str	r0, [sp, #64]	@ 0x40
1005e20c:	7eb0      	ldrb	r0, [r6, #26]
1005e20e:	9000      	str	r0, [sp, #0]
1005e210:	7ff0      	ldrb	r0, [r6, #31]
1005e212:	900f      	str	r0, [sp, #60]	@ 0x3c
1005e214:	f7ed fdda 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e218:	9007      	str	r0, [sp, #28]
1005e21a:	7ff0      	ldrb	r0, [r6, #31]
1005e21c:	9001      	str	r0, [sp, #4]
1005e21e:	f7fa fd04 	bl	10058c2a <llc_priv_controller_privacy_csr_ucfg_weak>
1005e222:	9008      	str	r0, [sp, #32]
1005e224:	7ff0      	ldrb	r0, [r6, #31]
1005e226:	9002      	str	r0, [sp, #8]
1005e228:	f001 f965 	bl	1005f4f6 <secure_connections_csr_ucfg_weak>
1005e22c:	2700      	movs	r7, #0
1005e22e:	f7f8 faab 	bl	10056788 <scan_csr_ucfg_weak>
1005e232:	2801      	cmp	r0, #1
1005e234:	4638      	mov	r0, r7
1005e236:	9515      	str	r5, [sp, #84]	@ 0x54
1005e238:	9716      	str	r7, [sp, #88]	@ 0x58
1005e23a:	d14f      	bne.n	1005e2dc <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1005e23c:	7f70      	ldrb	r0, [r6, #29]
1005e23e:	280a      	cmp	r0, #10
1005e240:	d300      	bcc.n	1005e244 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1005e242:	200a      	movs	r0, #10
1005e244:	462c      	mov	r4, r5
1005e246:	3438      	adds	r4, #56	@ 0x38
1005e248:	4344      	muls	r4, r0
1005e24a:	3cc0      	subs	r4, #192	@ 0xc0
1005e24c:	2500      	movs	r5, #0
1005e24e:	f7fa fce3 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005e252:	2801      	cmp	r0, #1
1005e254:	462f      	mov	r7, r5
1005e256:	d120      	bne.n	1005e29a <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1005e258:	f7ed fdb8 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e25c:	2801      	cmp	r0, #1
1005e25e:	950e      	str	r5, [sp, #56]	@ 0x38
1005e260:	d003      	beq.n	1005e26a <BlueNRG_Stack_Initialize_RAM_check+0x172>
1005e262:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005e264:	4618      	mov	r0, r3
1005e266:	3054      	adds	r0, #84	@ 0x54
1005e268:	e002      	b.n	1005e270 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1005e26a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005e26c:	4618      	mov	r0, r3
1005e26e:	3048      	adds	r0, #72	@ 0x48
1005e270:	49ba      	ldr	r1, [pc, #744]	@ (1005e55c <__arm_cp.0_3>)
1005e272:	31e4      	adds	r1, #228	@ 0xe4
1005e274:	7fb2      	ldrb	r2, [r6, #30]
1005e276:	434a      	muls	r2, r1
1005e278:	1810      	adds	r0, r2, r0
1005e27a:	4635      	mov	r5, r6
1005e27c:	461e      	mov	r6, r3
1005e27e:	3660      	adds	r6, #96	@ 0x60
1005e280:	7fe9      	ldrb	r1, [r5, #31]
1005e282:	4632      	mov	r2, r6
1005e284:	408a      	lsls	r2, r1
1005e286:	1887      	adds	r7, r0, r2
1005e288:	f7ed fda0 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e28c:	2801      	cmp	r0, #1
1005e28e:	d102      	bne.n	1005e296 <BlueNRG_Stack_Initialize_RAM_check+0x19e>
1005e290:	7ae8      	ldrb	r0, [r5, #11]
1005e292:	4346      	muls	r6, r0
1005e294:	19bf      	adds	r7, r7, r6
1005e296:	462e      	mov	r6, r5
1005e298:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005e29a:	19e0      	adds	r0, r4, r7
1005e29c:	9014      	str	r0, [sp, #80]	@ 0x50
1005e29e:	f7fa fcbd 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005e2a2:	4607      	mov	r7, r0
1005e2a4:	f7fa fcb8 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005e2a8:	4604      	mov	r4, r0
1005e2aa:	403c      	ands	r4, r7
1005e2ac:	f7ed fd8e 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e2b0:	4020      	ands	r0, r4
1005e2b2:	2801      	cmp	r0, #1
1005e2b4:	d108      	bne.n	1005e2c8 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1005e2b6:	7ef0      	ldrb	r0, [r6, #27]
1005e2b8:	1e40      	subs	r0, r0, #1
1005e2ba:	2103      	movs	r1, #3
1005e2bc:	4301      	orrs	r1, r0
1005e2be:	7fb0      	ldrb	r0, [r6, #30]
1005e2c0:	22b0      	movs	r2, #176	@ 0xb0
1005e2c2:	4342      	muls	r2, r0
1005e2c4:	43d0      	mvns	r0, r2
1005e2c6:	1a45      	subs	r5, r0, r1
1005e2c8:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005e2ca:	1944      	adds	r4, r0, r5
1005e2cc:	f7fe fde2 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005e2d0:	4360      	muls	r0, r4
1005e2d2:	49a2      	ldr	r1, [pc, #648]	@ (1005e55c <__arm_cp.0_3>)
1005e2d4:	1808      	adds	r0, r1, r0
1005e2d6:	302c      	adds	r0, #44	@ 0x2c
1005e2d8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005e2da:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005e2dc:	9006      	str	r0, [sp, #24]
1005e2de:	f7ed fd75 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e2e2:	2801      	cmp	r0, #1
1005e2e4:	4639      	mov	r1, r7
1005e2e6:	d109      	bne.n	1005e2fc <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005e2e8:	f7f8 fc14 	bl	10056b14 <l2c_cos_csr_ucfg_weak>
1005e2ec:	2801      	cmp	r0, #1
1005e2ee:	4639      	mov	r1, r7
1005e2f0:	d104      	bne.n	1005e2fc <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005e2f2:	2022      	movs	r0, #34	@ 0x22
1005e2f4:	5c30      	ldrb	r0, [r6, r0]
1005e2f6:	4629      	mov	r1, r5
1005e2f8:	3114      	adds	r1, #20
1005e2fa:	4341      	muls	r1, r0
1005e2fc:	9105      	str	r1, [sp, #20]
1005e2fe:	f7fa fc8b 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005e302:	2801      	cmp	r0, #1
1005e304:	4638      	mov	r0, r7
1005e306:	d121      	bne.n	1005e34c <BlueNRG_Stack_Initialize_RAM_check+0x254>
1005e308:	4894      	ldr	r0, [pc, #592]	@ (1005e55c <__arm_cp.0_3>)
1005e30a:	30d4      	adds	r0, #212	@ 0xd4
1005e30c:	7eb1      	ldrb	r1, [r6, #26]
1005e30e:	4341      	muls	r1, r0
1005e310:	4628      	mov	r0, r5
1005e312:	3048      	adds	r0, #72	@ 0x48
1005e314:	7af2      	ldrb	r2, [r6, #11]
1005e316:	4342      	muls	r2, r0
1005e318:	1854      	adds	r4, r2, r1
1005e31a:	2700      	movs	r7, #0
1005e31c:	f7fa fc7e 	bl	10058c1c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005e320:	2801      	cmp	r0, #1
1005e322:	d110      	bne.n	1005e346 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005e324:	f7ed fd52 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e328:	2801      	cmp	r0, #1
1005e32a:	d10c      	bne.n	1005e346 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005e32c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005e32e:	4610      	mov	r0, r2
1005e330:	3058      	adds	r0, #88	@ 0x58
1005e332:	7f31      	ldrb	r1, [r6, #28]
1005e334:	4341      	muls	r1, r0
1005e336:	4610      	mov	r0, r2
1005e338:	3060      	adds	r0, #96	@ 0x60
1005e33a:	7ef2      	ldrb	r2, [r6, #27]
1005e33c:	4342      	muls	r2, r0
1005e33e:	1850      	adds	r0, r2, r1
1005e340:	3884      	subs	r0, #132	@ 0x84
1005e342:	7eb7      	ldrb	r7, [r6, #26]
1005e344:	4347      	muls	r7, r0
1005e346:	19e0      	adds	r0, r4, r7
1005e348:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005e34a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005e34c:	900e      	str	r0, [sp, #56]	@ 0x38
1005e34e:	f7f8 f9b9 	bl	100566c4 <cte_csr_ucfg_weak>
1005e352:	2801      	cmp	r0, #1
1005e354:	4638      	mov	r0, r7
1005e356:	d133      	bne.n	1005e3c0 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1005e358:	f7ed fd38 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e35c:	2801      	cmp	r0, #1
1005e35e:	d002      	beq.n	1005e366 <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1005e360:	462f      	mov	r7, r5
1005e362:	375c      	adds	r7, #92	@ 0x5c
1005e364:	e004      	b.n	1005e370 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1005e366:	4628      	mov	r0, r5
1005e368:	3060      	adds	r0, #96	@ 0x60
1005e36a:	7af7      	ldrb	r7, [r6, #11]
1005e36c:	4347      	muls	r7, r0
1005e36e:	3f0c      	subs	r7, #12
1005e370:	2523      	movs	r5, #35	@ 0x23
1005e372:	5d70      	ldrb	r0, [r6, r5]
1005e374:	2400      	movs	r4, #0
1005e376:	2800      	cmp	r0, #0
1005e378:	4620      	mov	r0, r4
1005e37a:	d005      	beq.n	1005e388 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1005e37c:	f7ed fd26 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e380:	5d70      	ldrb	r0, [r6, r5]
1005e382:	4240      	negs	r0, r0
1005e384:	2103      	movs	r1, #3
1005e386:	4388      	bics	r0, r1
1005e388:	19c0      	adds	r0, r0, r7
1005e38a:	2724      	movs	r7, #36	@ 0x24
1005e38c:	5df1      	ldrb	r1, [r6, r7]
1005e38e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005e390:	3264      	adds	r2, #100	@ 0x64
1005e392:	434a      	muls	r2, r1
1005e394:	1885      	adds	r5, r0, r2
1005e396:	f7f8 f9f7 	bl	10056788 <scan_csr_ucfg_weak>
1005e39a:	2801      	cmp	r0, #1
1005e39c:	d10d      	bne.n	1005e3ba <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005e39e:	f7fe fd79 	bl	1005ce94 <ext_adv_scan_enabled_ucfg_weak>
1005e3a2:	2801      	cmp	r0, #1
1005e3a4:	d109      	bne.n	1005e3ba <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005e3a6:	f7fa fc37 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005e3aa:	2801      	cmp	r0, #1
1005e3ac:	d105      	bne.n	1005e3ba <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005e3ae:	5df4      	ldrb	r4, [r6, r7]
1005e3b0:	2c00      	cmp	r4, #0
1005e3b2:	9815      	ldr	r0, [sp, #84]	@ 0x54
1005e3b4:	d001      	beq.n	1005e3ba <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005e3b6:	4604      	mov	r4, r0
1005e3b8:	3450      	adds	r4, #80	@ 0x50
1005e3ba:	1928      	adds	r0, r5, r4
1005e3bc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005e3be:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005e3c0:	900d      	str	r0, [sp, #52]	@ 0x34
1005e3c2:	f7ed fd03 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e3c6:	2801      	cmp	r0, #1
1005e3c8:	4639      	mov	r1, r7
1005e3ca:	d109      	bne.n	1005e3e0 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005e3cc:	f7f8 f9d8 	bl	10056780 <pcl_csr_ucfg_weak>
1005e3d0:	2801      	cmp	r0, #1
1005e3d2:	4639      	mov	r1, r7
1005e3d4:	d104      	bne.n	1005e3e0 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005e3d6:	4628      	mov	r0, r5
1005e3d8:	3048      	adds	r0, #72	@ 0x48
1005e3da:	7af1      	ldrb	r1, [r6, #11]
1005e3dc:	4341      	muls	r1, r0
1005e3de:	3914      	subs	r1, #20
1005e3e0:	910c      	str	r1, [sp, #48]	@ 0x30
1005e3e2:	f7ed fcf3 	bl	1004bdcc <conn_supp_csr_ucfg>
1005e3e6:	2801      	cmp	r0, #1
1005e3e8:	463a      	mov	r2, r7
1005e3ea:	d108      	bne.n	1005e3fe <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005e3ec:	f7f8 f875 	bl	100564da <chc_csr_ucfg_weak>
1005e3f0:	2801      	cmp	r0, #1
1005e3f2:	463a      	mov	r2, r7
1005e3f4:	d103      	bne.n	1005e3fe <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005e3f6:	4628      	mov	r0, r5
1005e3f8:	304c      	adds	r0, #76	@ 0x4c
1005e3fa:	7af2      	ldrb	r2, [r6, #11]
1005e3fc:	4342      	muls	r2, r0
1005e3fe:	2026      	movs	r0, #38	@ 0x26
1005e400:	5c31      	ldrb	r1, [r6, r0]
1005e402:	2025      	movs	r0, #37	@ 0x25
1005e404:	5c34      	ldrb	r4, [r6, r0]
1005e406:	1863      	adds	r3, r4, r1
1005e408:	2029      	movs	r0, #41	@ 0x29
1005e40a:	5c30      	ldrb	r0, [r6, r0]
1005e40c:	9304      	str	r3, [sp, #16]
1005e40e:	2b00      	cmp	r3, #0
1005e410:	9014      	str	r0, [sp, #80]	@ 0x50
1005e412:	d010      	beq.n	1005e436 <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1005e414:	2028      	movs	r0, #40	@ 0x28
1005e416:	5c33      	ldrb	r3, [r6, r0]
1005e418:	4628      	mov	r0, r5
1005e41a:	3060      	adds	r0, #96	@ 0x60
1005e41c:	4358      	muls	r0, r3
1005e41e:	38f8      	subs	r0, #248	@ 0xf8
1005e420:	4348      	muls	r0, r1
1005e422:	2327      	movs	r3, #39	@ 0x27
1005e424:	5cf3      	ldrb	r3, [r6, r3]
1005e426:	3554      	adds	r5, #84	@ 0x54
1005e428:	435d      	muls	r5, r3
1005e42a:	4b4c      	ldr	r3, [pc, #304]	@ (1005e55c <__arm_cp.0_3>)
1005e42c:	195b      	adds	r3, r3, r5
1005e42e:	3348      	adds	r3, #72	@ 0x48
1005e430:	4363      	muls	r3, r4
1005e432:	181f      	adds	r7, r3, r0
1005e434:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005e436:	2800      	cmp	r0, #0
1005e438:	9716      	str	r7, [sp, #88]	@ 0x58
1005e43a:	920b      	str	r2, [sp, #44]	@ 0x2c
1005e43c:	d00d      	beq.n	1005e45a <BlueNRG_Stack_Initialize_RAM_check+0x362>
1005e43e:	4602      	mov	r2, r0
1005e440:	202a      	movs	r0, #42	@ 0x2a
1005e442:	5c30      	ldrb	r0, [r6, r0]
1005e444:	4d45      	ldr	r5, [pc, #276]	@ (1005e55c <__arm_cp.0_3>)
1005e446:	462b      	mov	r3, r5
1005e448:	33b0      	adds	r3, #176	@ 0xb0
1005e44a:	4343      	muls	r3, r0
1005e44c:	4637      	mov	r7, r6
1005e44e:	462e      	mov	r6, r5
1005e450:	36c8      	adds	r6, #200	@ 0xc8
1005e452:	4356      	muls	r6, r2
1005e454:	18f3      	adds	r3, r6, r3
1005e456:	3b48      	subs	r3, #72	@ 0x48
1005e458:	e003      	b.n	1005e462 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1005e45a:	202a      	movs	r0, #42	@ 0x2a
1005e45c:	5c30      	ldrb	r0, [r6, r0]
1005e45e:	2300      	movs	r3, #0
1005e460:	4637      	mov	r7, r6
1005e462:	2628      	movs	r6, #40	@ 0x28
1005e464:	5dbe      	ldrb	r6, [r7, r6]
1005e466:	4371      	muls	r1, r6
1005e468:	1809      	adds	r1, r1, r0
1005e46a:	2627      	movs	r6, #39	@ 0x27
1005e46c:	463d      	mov	r5, r7
1005e46e:	5dbe      	ldrb	r6, [r7, r6]
1005e470:	4374      	muls	r4, r6
1005e472:	1824      	adds	r4, r4, r0
1005e474:	1860      	adds	r0, r4, r1
1005e476:	d013      	beq.n	1005e4a0 <__arm_cp.0_6+0x4>
1005e478:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005e47a:	463e      	mov	r6, r7
1005e47c:	364c      	adds	r6, #76	@ 0x4c
1005e47e:	4366      	muls	r6, r4
1005e480:	463c      	mov	r4, r7
1005e482:	3434      	adds	r4, #52	@ 0x34
1005e484:	434c      	muls	r4, r1
1005e486:	19a1      	adds	r1, r4, r6
1005e488:	463c      	mov	r4, r7
1005e48a:	345c      	adds	r4, #92	@ 0x5c
1005e48c:	4344      	muls	r4, r0
1005e48e:	190c      	adds	r4, r1, r4
1005e490:	3c14      	subs	r4, #20
1005e492:	e007      	b.n	1005e4a4 <__arm_cp.0_6+0x8>

1005e494 <__arm_cp.0_4>:
1005e494:	fffffc00 	.word	0xfffffc00

1005e498 <__arm_cp.0_5>:
1005e498:	20000f34 	.word	0x20000f34

1005e49c <__arm_cp.0_6>:
1005e49c:	fffffd70 	.word	0xfffffd70
1005e4a0:	2400      	movs	r4, #0
1005e4a2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005e4a4:	9903      	ldr	r1, [sp, #12]
1005e4a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005e4a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005e4aa:	1808      	adds	r0, r1, r0
1005e4ac:	4639      	mov	r1, r7
1005e4ae:	3144      	adds	r1, #68	@ 0x44
1005e4b0:	4371      	muls	r1, r6
1005e4b2:	1840      	adds	r0, r0, r1
1005e4b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005e4b6:	1840      	adds	r0, r0, r1
1005e4b8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1005e4ba:	1840      	adds	r0, r0, r1
1005e4bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005e4be:	1841      	adds	r1, r0, r1
1005e4c0:	4638      	mov	r0, r7
1005e4c2:	3060      	adds	r0, #96	@ 0x60
1005e4c4:	4606      	mov	r6, r0
1005e4c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005e4c8:	4096      	lsls	r6, r2
1005e4ca:	1989      	adds	r1, r1, r6
1005e4cc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005e4ce:	2a01      	cmp	r2, #1
1005e4d0:	d106      	bne.n	1005e4e0 <__arm_cp.0_6+0x44>
1005e4d2:	4e22      	ldr	r6, [pc, #136]	@ (1005e55c <__arm_cp.0_3>)
1005e4d4:	9a00      	ldr	r2, [sp, #0]
1005e4d6:	4356      	muls	r6, r2
1005e4d8:	1871      	adds	r1, r6, r1
1005e4da:	2645      	movs	r6, #69	@ 0x45
1005e4dc:	00b6      	lsls	r6, r6, #2
1005e4de:	1989      	adds	r1, r1, r6
1005e4e0:	462e      	mov	r6, r5
1005e4e2:	9d07      	ldr	r5, [sp, #28]
1005e4e4:	9a05      	ldr	r2, [sp, #20]
1005e4e6:	2d01      	cmp	r5, #1
1005e4e8:	d102      	bne.n	1005e4f0 <__arm_cp.0_6+0x54>
1005e4ea:	9d01      	ldr	r5, [sp, #4]
1005e4ec:	40a8      	lsls	r0, r5
1005e4ee:	1809      	adds	r1, r1, r0
1005e4f0:	9808      	ldr	r0, [sp, #32]
1005e4f2:	2801      	cmp	r0, #1
1005e4f4:	d105      	bne.n	1005e502 <__arm_cp.0_6+0x66>
1005e4f6:	4638      	mov	r0, r7
1005e4f8:	3018      	adds	r0, #24
1005e4fa:	9d02      	ldr	r5, [sp, #8]
1005e4fc:	40a8      	lsls	r0, r5
1005e4fe:	1841      	adds	r1, r0, r1
1005e500:	3970      	subs	r1, #112	@ 0x70
1005e502:	9806      	ldr	r0, [sp, #24]
1005e504:	9d04      	ldr	r5, [sp, #16]
1005e506:	1808      	adds	r0, r1, r0
1005e508:	1880      	adds	r0, r0, r2
1005e50a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005e50c:	1840      	adds	r0, r0, r1
1005e50e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005e510:	1840      	adds	r0, r0, r1
1005e512:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005e514:	1840      	adds	r0, r0, r1
1005e516:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005e518:	1840      	adds	r0, r0, r1
1005e51a:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005e51c:	42cd      	cmn	r5, r1
1005e51e:	d001      	beq.n	1005e524 <__arm_cp.0_6+0x88>
1005e520:	1838      	adds	r0, r7, r0
1005e522:	3058      	adds	r0, #88	@ 0x58
1005e524:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005e526:	1840      	adds	r0, r0, r1
1005e528:	18c0      	adds	r0, r0, r3
1005e52a:	1904      	adds	r4, r0, r4
1005e52c:	f7f3 fed3 	bl	100522d6 <log_csr_ucfg_weak>
1005e530:	2801      	cmp	r0, #1
1005e532:	d100      	bne.n	1005e536 <__arm_cp.0_6+0x9a>
1005e534:	19e4      	adds	r4, r4, r7
1005e536:	6870      	ldr	r0, [r6, #4]
1005e538:	1820      	adds	r0, r4, r0
1005e53a:	2103      	movs	r1, #3
1005e53c:	43c9      	mvns	r1, r1
1005e53e:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1005e540:	1cd2      	adds	r2, r2, #3
1005e542:	400a      	ands	r2, r1
1005e544:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1005e546:	1cdb      	adds	r3, r3, #3
1005e548:	400b      	ands	r3, r1
1005e54a:	189a      	adds	r2, r3, r2
1005e54c:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1005e54e:	1cdb      	adds	r3, r3, #3
1005e550:	400b      	ands	r3, r1
1005e552:	18d1      	adds	r1, r2, r3
1005e554:	1a40      	subs	r0, r0, r1
1005e556:	b017      	add	sp, #92	@ 0x5c
1005e558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e55a:	46c0      	nop			@ (mov r8, r8)

1005e55c <__arm_cp.0_3>:
1005e55c:	fffffe90 	.word	0xfffffe90

1005e560 <sdb_sap_get_security_records_count>:
1005e560:	b580      	push	{r7, lr}
1005e562:	f001 f996 	bl	1005f892 <nvm_sec_db_get_record_count>
1005e566:	bd80      	pop	{r7, pc}

1005e568 <sdb_sap_add_security_record>:
1005e568:	b5b0      	push	{r4, r5, r7, lr}
1005e56a:	b094      	sub	sp, #80	@ 0x50
1005e56c:	4604      	mov	r4, r0
1005e56e:	7841      	ldrb	r1, [r0, #1]
1005e570:	2501      	movs	r5, #1
1005e572:	4029      	ands	r1, r5
1005e574:	303e      	adds	r0, #62	@ 0x3e
1005e576:	466a      	mov	r2, sp
1005e578:	f000 f819 	bl	1005e5ae <sdb_sap_read_security_record>
1005e57c:	2800      	cmp	r0, #0
1005e57e:	d10c      	bne.n	1005e59a <sdb_sap_add_security_record+0x32>
1005e580:	4669      	mov	r1, sp
1005e582:	2250      	movs	r2, #80	@ 0x50
1005e584:	4620      	mov	r0, r4
1005e586:	f7f1 f97d 	bl	1004f884 <BLEPLAT_MemCmp>
1005e58a:	2800      	cmp	r0, #0
1005e58c:	d008      	beq.n	1005e5a0 <sdb_sap_add_security_record+0x38>
1005e58e:	4669      	mov	r1, sp
1005e590:	7848      	ldrb	r0, [r1, #1]
1005e592:	4028      	ands	r0, r5
1005e594:	313e      	adds	r1, #62	@ 0x3e
1005e596:	f000 f83b 	bl	1005e610 <sdb_remove_security_record_by_address>
1005e59a:	7860      	ldrb	r0, [r4, #1]
1005e59c:	2810      	cmp	r0, #16
1005e59e:	d201      	bcs.n	1005e5a4 <sdb_sap_add_security_record+0x3c>
1005e5a0:	2000      	movs	r0, #0
1005e5a2:	e002      	b.n	1005e5aa <sdb_sap_add_security_record+0x42>
1005e5a4:	4620      	mov	r0, r4
1005e5a6:	f001 f969 	bl	1005f87c <nvm_sec_db_add_record>
1005e5aa:	b014      	add	sp, #80	@ 0x50
1005e5ac:	bdb0      	pop	{r4, r5, r7, pc}

1005e5ae <sdb_sap_read_security_record>:
1005e5ae:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e5b0:	4614      	mov	r4, r2
1005e5b2:	4606      	mov	r6, r0
1005e5b4:	2501      	movs	r5, #1
1005e5b6:	9102      	str	r1, [sp, #8]
1005e5b8:	2901      	cmp	r1, #1
1005e5ba:	d105      	bne.n	1005e5c8 <sdb_sap_read_security_record+0x1a>
1005e5bc:	7970      	ldrb	r0, [r6, #5]
1005e5be:	21c0      	movs	r1, #192	@ 0xc0
1005e5c0:	4001      	ands	r1, r0
1005e5c2:	2940      	cmp	r1, #64	@ 0x40
1005e5c4:	d100      	bne.n	1005e5c8 <sdb_sap_read_security_record+0x1a>
1005e5c6:	2500      	movs	r5, #0
1005e5c8:	f001 f940 	bl	1005f84c <nvm_sec_db_read_init>
1005e5cc:	4620      	mov	r0, r4
1005e5ce:	303e      	adds	r0, #62	@ 0x3e
1005e5d0:	9001      	str	r0, [sp, #4]
1005e5d2:	4627      	mov	r7, r4
1005e5d4:	371e      	adds	r7, #30
1005e5d6:	4620      	mov	r0, r4
1005e5d8:	f001 f93e 	bl	1005f858 <nvm_sec_db_read_next_record>
1005e5dc:	2800      	cmp	r0, #0
1005e5de:	d115      	bne.n	1005e60c <sdb_sap_read_security_record+0x5e>
1005e5e0:	2d00      	cmp	r5, #0
1005e5e2:	d00b      	beq.n	1005e5fc <sdb_sap_read_security_record+0x4e>
1005e5e4:	7860      	ldrb	r0, [r4, #1]
1005e5e6:	2101      	movs	r1, #1
1005e5e8:	4001      	ands	r1, r0
1005e5ea:	9802      	ldr	r0, [sp, #8]
1005e5ec:	4281      	cmp	r1, r0
1005e5ee:	d1f2      	bne.n	1005e5d6 <sdb_sap_read_security_record+0x28>
1005e5f0:	2206      	movs	r2, #6
1005e5f2:	9801      	ldr	r0, [sp, #4]
1005e5f4:	4631      	mov	r1, r6
1005e5f6:	f7f1 f945 	bl	1004f884 <BLEPLAT_MemCmp>
1005e5fa:	e003      	b.n	1005e604 <sdb_sap_read_security_record+0x56>
1005e5fc:	4630      	mov	r0, r6
1005e5fe:	4639      	mov	r1, r7
1005e600:	f000 f980 	bl	1005e904 <smp_sap_crt_resolve_rpa>
1005e604:	2800      	cmp	r0, #0
1005e606:	d1e6      	bne.n	1005e5d6 <sdb_sap_read_security_record+0x28>
1005e608:	2000      	movs	r0, #0
1005e60a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e60c:	20b3      	movs	r0, #179	@ 0xb3
1005e60e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005e610 <sdb_remove_security_record_by_address>:
1005e610:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e612:	b095      	sub	sp, #84	@ 0x54
1005e614:	460c      	mov	r4, r1
1005e616:	4605      	mov	r5, r0
1005e618:	f001 f918 	bl	1005f84c <nvm_sec_db_read_init>
1005e61c:	ae01      	add	r6, sp, #4
1005e61e:	363e      	adds	r6, #62	@ 0x3e
1005e620:	27b3      	movs	r7, #179	@ 0xb3
1005e622:	a801      	add	r0, sp, #4
1005e624:	f001 f918 	bl	1005f858 <nvm_sec_db_read_next_record>
1005e628:	2800      	cmp	r0, #0
1005e62a:	d110      	bne.n	1005e64e <sdb_remove_security_record_by_address+0x3e>
1005e62c:	2206      	movs	r2, #6
1005e62e:	4630      	mov	r0, r6
1005e630:	4621      	mov	r1, r4
1005e632:	f7f1 f927 	bl	1004f884 <BLEPLAT_MemCmp>
1005e636:	a901      	add	r1, sp, #4
1005e638:	7849      	ldrb	r1, [r1, #1]
1005e63a:	2201      	movs	r2, #1
1005e63c:	400a      	ands	r2, r1
1005e63e:	42aa      	cmp	r2, r5
1005e640:	d1ef      	bne.n	1005e622 <sdb_remove_security_record_by_address+0x12>
1005e642:	2800      	cmp	r0, #0
1005e644:	d1ed      	bne.n	1005e622 <sdb_remove_security_record_by_address+0x12>
1005e646:	f001 f937 	bl	1005f8b8 <nvm_discard_current_record>
1005e64a:	2700      	movs	r7, #0
1005e64c:	e7e9      	b.n	1005e622 <sdb_remove_security_record_by_address+0x12>
1005e64e:	b2f8      	uxtb	r0, r7
1005e650:	b015      	add	sp, #84	@ 0x54
1005e652:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e654 <sdb_sap_read_security_record_sequential>:
1005e654:	b5b0      	push	{r4, r5, r7, lr}
1005e656:	4604      	mov	r4, r0
1005e658:	4d07      	ldr	r5, [pc, #28]	@ (1005e678 <__arm_cp.5_0>)
1005e65a:	7828      	ldrb	r0, [r5, #0]
1005e65c:	2800      	cmp	r0, #0
1005e65e:	d103      	bne.n	1005e668 <sdb_sap_read_security_record_sequential+0x14>
1005e660:	f001 f8f4 	bl	1005f84c <nvm_sec_db_read_init>
1005e664:	2001      	movs	r0, #1
1005e666:	7028      	strb	r0, [r5, #0]
1005e668:	4620      	mov	r0, r4
1005e66a:	f001 f8f5 	bl	1005f858 <nvm_sec_db_read_next_record>
1005e66e:	2800      	cmp	r0, #0
1005e670:	d001      	beq.n	1005e676 <sdb_sap_read_security_record_sequential+0x22>
1005e672:	2100      	movs	r1, #0
1005e674:	7029      	strb	r1, [r5, #0]
1005e676:	bdb0      	pop	{r4, r5, r7, pc}

1005e678 <__arm_cp.5_0>:
1005e678:	20000f68 	.word	0x20000f68

1005e67c <sdb_sap_del_bonded_device>:
1005e67c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005e67e:	460d      	mov	r5, r1
1005e680:	4604      	mov	r4, r0
1005e682:	aa01      	add	r2, sp, #4
1005e684:	4608      	mov	r0, r1
1005e686:	4621      	mov	r1, r4
1005e688:	f000 f87f 	bl	1005e78a <sdb_gatt_search_record>
1005e68c:	2800      	cmp	r0, #0
1005e68e:	d101      	bne.n	1005e694 <sdb_sap_del_bonded_device+0x18>
1005e690:	f001 f912 	bl	1005f8b8 <nvm_discard_current_record>
1005e694:	4628      	mov	r0, r5
1005e696:	4621      	mov	r1, r4
1005e698:	f7ff ffba 	bl	1005e610 <sdb_remove_security_record_by_address>
1005e69c:	b004      	add	sp, #16
1005e69e:	bdb0      	pop	{r4, r5, r7, pc}

1005e6a0 <sdb_sap_read_security_record_matching>:
1005e6a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e6a2:	4614      	mov	r4, r2
1005e6a4:	9101      	str	r1, [sp, #4]
1005e6a6:	4606      	mov	r6, r0
1005e6a8:	f001 f8d0 	bl	1005f84c <nvm_sec_db_read_init>
1005e6ac:	4627      	mov	r7, r4
1005e6ae:	3744      	adds	r7, #68	@ 0x44
1005e6b0:	4620      	mov	r0, r4
1005e6b2:	f001 f8d1 	bl	1005f858 <nvm_sec_db_read_next_record>
1005e6b6:	2800      	cmp	r0, #0
1005e6b8:	d111      	bne.n	1005e6de <sdb_sap_read_security_record_matching+0x3e>
1005e6ba:	7860      	ldrb	r0, [r4, #1]
1005e6bc:	06c0      	lsls	r0, r0, #27
1005e6be:	d5f7      	bpl.n	1005e6b0 <sdb_sap_read_security_record_matching+0x10>
1005e6c0:	ad02      	add	r5, sp, #8
1005e6c2:	4638      	mov	r0, r7
1005e6c4:	9901      	ldr	r1, [sp, #4]
1005e6c6:	462a      	mov	r2, r5
1005e6c8:	f000 f87a 	bl	1005e7c0 <smp_sap_crt_generate_ediv>
1005e6cc:	2202      	movs	r2, #2
1005e6ce:	4628      	mov	r0, r5
1005e6d0:	4631      	mov	r1, r6
1005e6d2:	f7f1 f8d7 	bl	1004f884 <BLEPLAT_MemCmp>
1005e6d6:	2800      	cmp	r0, #0
1005e6d8:	d1ea      	bne.n	1005e6b0 <sdb_sap_read_security_record_matching+0x10>
1005e6da:	2000      	movs	r0, #0
1005e6dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e6de:	2081      	movs	r0, #129	@ 0x81
1005e6e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005e6e2 <SDB_sap_write_peer_bonded_gatt_client_data>:
1005e6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e6e4:	b085      	sub	sp, #20
1005e6e6:	461e      	mov	r6, r3
1005e6e8:	4617      	mov	r7, r2
1005e6ea:	460d      	mov	r5, r1
1005e6ec:	4604      	mov	r4, r0
1005e6ee:	aa02      	add	r2, sp, #8
1005e6f0:	4608      	mov	r0, r1
1005e6f2:	4621      	mov	r1, r4
1005e6f4:	f000 f849 	bl	1005e78a <sdb_gatt_search_record>
1005e6f8:	2800      	cmp	r0, #0
1005e6fa:	d10b      	bne.n	1005e714 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
1005e6fc:	9804      	ldr	r0, [sp, #16]
1005e6fe:	42b8      	cmp	r0, r7
1005e700:	d106      	bne.n	1005e710 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
1005e702:	b2ba      	uxth	r2, r7
1005e704:	200c      	movs	r0, #12
1005e706:	4631      	mov	r1, r6
1005e708:	f7f1 f84c 	bl	1004f7a4 <BLEPLAT_NvmCompare>
1005e70c:	2800      	cmp	r0, #0
1005e70e:	d016      	beq.n	1005e73e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005e710:	f001 f8d2 	bl	1005f8b8 <nvm_discard_current_record>
1005e714:	9601      	str	r6, [sp, #4]
1005e716:	ae02      	add	r6, sp, #8
1005e718:	7035      	strb	r5, [r6, #0]
1005e71a:	1c70      	adds	r0, r6, #1
1005e71c:	2206      	movs	r2, #6
1005e71e:	4621      	mov	r1, r4
1005e720:	f7f1 f890 	bl	1004f844 <BLEPLAT_MemCpy>
1005e724:	9704      	str	r7, [sp, #16]
1005e726:	4630      	mov	r0, r6
1005e728:	9901      	ldr	r1, [sp, #4]
1005e72a:	f001 f882 	bl	1005f832 <nvm_gatt_db_update_record>
1005e72e:	2800      	cmp	r0, #0
1005e730:	d005      	beq.n	1005e73e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005e732:	4606      	mov	r6, r0
1005e734:	4628      	mov	r0, r5
1005e736:	4621      	mov	r1, r4
1005e738:	f7ff ff6a 	bl	1005e610 <sdb_remove_security_record_by_address>
1005e73c:	e000      	b.n	1005e740 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
1005e73e:	2600      	movs	r6, #0
1005e740:	4630      	mov	r0, r6
1005e742:	b005      	add	sp, #20
1005e744:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e746 <SDB_sap_read_peer_bonded_gatt_client_data>:
1005e746:	b5b0      	push	{r4, r5, r7, lr}
1005e748:	b098      	sub	sp, #96	@ 0x60
1005e74a:	461c      	mov	r4, r3
1005e74c:	4615      	mov	r5, r2
1005e74e:	aa01      	add	r2, sp, #4
1005e750:	f7ff ff2d 	bl	1005e5ae <sdb_sap_read_security_record>
1005e754:	2800      	cmp	r0, #0
1005e756:	d116      	bne.n	1005e786 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005e758:	a901      	add	r1, sp, #4
1005e75a:	784a      	ldrb	r2, [r1, #1]
1005e75c:	2001      	movs	r0, #1
1005e75e:	4010      	ands	r0, r2
1005e760:	313e      	adds	r1, #62	@ 0x3e
1005e762:	aa15      	add	r2, sp, #84	@ 0x54
1005e764:	f000 f811 	bl	1005e78a <sdb_gatt_search_record>
1005e768:	2800      	cmp	r0, #0
1005e76a:	d001      	beq.n	1005e770 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
1005e76c:	20b3      	movs	r0, #179	@ 0xb3
1005e76e:	e00a      	b.n	1005e786 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005e770:	6829      	ldr	r1, [r5, #0]
1005e772:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005e774:	4288      	cmp	r0, r1
1005e776:	d901      	bls.n	1005e77c <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
1005e778:	2087      	movs	r0, #135	@ 0x87
1005e77a:	e004      	b.n	1005e786 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005e77c:	6028      	str	r0, [r5, #0]
1005e77e:	b281      	uxth	r1, r0
1005e780:	4620      	mov	r0, r4
1005e782:	f001 f84b 	bl	1005f81c <nvm_gatt_db_read_full_current_record>
1005e786:	b018      	add	sp, #96	@ 0x60
1005e788:	bdb0      	pop	{r4, r5, r7, pc}

1005e78a <sdb_gatt_search_record>:
1005e78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e78c:	4614      	mov	r4, r2
1005e78e:	460d      	mov	r5, r1
1005e790:	4606      	mov	r6, r0
1005e792:	f001 f81d 	bl	1005f7d0 <nvm_gatt_db_read_init>
1005e796:	1c67      	adds	r7, r4, #1
1005e798:	4620      	mov	r0, r4
1005e79a:	f001 f81f 	bl	1005f7dc <nvm_gatt_db_read_next_record>
1005e79e:	2800      	cmp	r0, #0
1005e7a0:	d10b      	bne.n	1005e7ba <sdb_gatt_search_record+0x30>
1005e7a2:	2206      	movs	r2, #6
1005e7a4:	4628      	mov	r0, r5
1005e7a6:	4639      	mov	r1, r7
1005e7a8:	f7f1 f86c 	bl	1004f884 <BLEPLAT_MemCmp>
1005e7ac:	2800      	cmp	r0, #0
1005e7ae:	d1f3      	bne.n	1005e798 <sdb_gatt_search_record+0xe>
1005e7b0:	7820      	ldrb	r0, [r4, #0]
1005e7b2:	42b0      	cmp	r0, r6
1005e7b4:	d1f0      	bne.n	1005e798 <sdb_gatt_search_record+0xe>
1005e7b6:	2000      	movs	r0, #0
1005e7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005e7ba:	20b3      	movs	r0, #179	@ 0xb3
1005e7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005e7c0 <smp_sap_crt_generate_ediv>:
1005e7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e7c2:	b091      	sub	sp, #68	@ 0x44
1005e7c4:	9201      	str	r2, [sp, #4]
1005e7c6:	9100      	str	r1, [sp, #0]
1005e7c8:	4605      	mov	r5, r0
1005e7ca:	a908      	add	r1, sp, #32
1005e7cc:	2003      	movs	r0, #3
1005e7ce:	8008      	strh	r0, [r1, #0]
1005e7d0:	aa07      	add	r2, sp, #28
1005e7d2:	2400      	movs	r4, #0
1005e7d4:	8014      	strh	r4, [r2, #0]
1005e7d6:	4814      	ldr	r0, [pc, #80]	@ (1005e828 <__arm_cp.0_0>)
1005e7d8:	6800      	ldr	r0, [r0, #0]
1005e7da:	3018      	adds	r0, #24
1005e7dc:	af03      	add	r7, sp, #12
1005e7de:	463b      	mov	r3, r7
1005e7e0:	f000 f824 	bl	1005e82c <smp_crt_diversify>
1005e7e4:	ae0d      	add	r6, sp, #52	@ 0x34
1005e7e6:	2210      	movs	r2, #16
1005e7e8:	4630      	mov	r0, r6
1005e7ea:	4621      	mov	r1, r4
1005e7ec:	f7f1 f83a 	bl	1004f864 <BLEPLAT_MemSet>
1005e7f0:	2208      	movs	r2, #8
1005e7f2:	4630      	mov	r0, r6
1005e7f4:	9900      	ldr	r1, [sp, #0]
1005e7f6:	f7f1 f825 	bl	1004f844 <BLEPLAT_MemCpy>
1005e7fa:	ac09      	add	r4, sp, #36	@ 0x24
1005e7fc:	4638      	mov	r0, r7
1005e7fe:	4631      	mov	r1, r6
1005e800:	4622      	mov	r2, r4
1005e802:	f7f7 ff61 	bl	100566c8 <hci_le_encrypt>
1005e806:	ae02      	add	r6, sp, #8
1005e808:	2202      	movs	r2, #2
1005e80a:	4630      	mov	r0, r6
1005e80c:	4621      	mov	r1, r4
1005e80e:	f7f1 f819 	bl	1004f844 <BLEPLAT_MemCpy>
1005e812:	7828      	ldrb	r0, [r5, #0]
1005e814:	9902      	ldr	r1, [sp, #8]
1005e816:	4041      	eors	r1, r0
1005e818:	9a01      	ldr	r2, [sp, #4]
1005e81a:	7011      	strb	r1, [r2, #0]
1005e81c:	7870      	ldrb	r0, [r6, #1]
1005e81e:	7869      	ldrb	r1, [r5, #1]
1005e820:	4041      	eors	r1, r0
1005e822:	7051      	strb	r1, [r2, #1]
1005e824:	b011      	add	sp, #68	@ 0x44
1005e826:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e828 <__arm_cp.0_0>:
1005e828:	20000ecc 	.word	0x20000ecc

1005e82c <smp_crt_diversify>:
1005e82c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005e82e:	780d      	ldrb	r5, [r1, #0]
1005e830:	466c      	mov	r4, sp
1005e832:	7025      	strb	r5, [r4, #0]
1005e834:	7849      	ldrb	r1, [r1, #1]
1005e836:	7061      	strb	r1, [r4, #1]
1005e838:	7811      	ldrb	r1, [r2, #0]
1005e83a:	70a1      	strb	r1, [r4, #2]
1005e83c:	7851      	ldrb	r1, [r2, #1]
1005e83e:	70e1      	strb	r1, [r4, #3]
1005e840:	2100      	movs	r1, #0
1005e842:	9103      	str	r1, [sp, #12]
1005e844:	9102      	str	r1, [sp, #8]
1005e846:	9101      	str	r1, [sp, #4]
1005e848:	4621      	mov	r1, r4
1005e84a:	461a      	mov	r2, r3
1005e84c:	f7f7 ff3c 	bl	100566c8 <hci_le_encrypt>
1005e850:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1005e854 <smp_sap_crt_generate_local_irk>:
1005e854:	b5e0      	push	{r5, r6, r7, lr}
1005e856:	4603      	mov	r3, r0
1005e858:	a901      	add	r1, sp, #4
1005e85a:	2001      	movs	r0, #1
1005e85c:	8008      	strh	r0, [r1, #0]
1005e85e:	466a      	mov	r2, sp
1005e860:	2000      	movs	r0, #0
1005e862:	8010      	strh	r0, [r2, #0]
1005e864:	4802      	ldr	r0, [pc, #8]	@ (1005e870 <__arm_cp.2_0>)
1005e866:	6800      	ldr	r0, [r0, #0]
1005e868:	3018      	adds	r0, #24
1005e86a:	f7ff ffdf 	bl	1005e82c <smp_crt_diversify>
1005e86e:	bd8c      	pop	{r2, r3, r7, pc}

1005e870 <__arm_cp.2_0>:
1005e870:	20000ecc 	.word	0x20000ecc

1005e874 <smp_sap_crt_generate_rpa>:
1005e874:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e876:	b087      	sub	sp, #28
1005e878:	9000      	str	r0, [sp, #0]
1005e87a:	ae03      	add	r6, sp, #12
1005e87c:	4630      	mov	r0, r6
1005e87e:	f7ff ffe9 	bl	1005e854 <smp_sap_crt_generate_local_irk>
1005e882:	2700      	movs	r7, #0
1005e884:	4638      	mov	r0, r7
1005e886:	f001 fb8d 	bl	1005ffa4 <Hal_Get_Random_Number>
1005e88a:	0a01      	lsrs	r1, r0, #8
1005e88c:	ad02      	add	r5, sp, #8
1005e88e:	7069      	strb	r1, [r5, #1]
1005e890:	243f      	movs	r4, #63	@ 0x3f
1005e892:	4004      	ands	r4, r0
1005e894:	3440      	adds	r4, #64	@ 0x40
1005e896:	4638      	mov	r0, r7
1005e898:	f001 fb84 	bl	1005ffa4 <Hal_Get_Random_Number>
1005e89c:	70ac      	strb	r4, [r5, #2]
1005e89e:	7028      	strb	r0, [r5, #0]
1005e8a0:	af01      	add	r7, sp, #4
1005e8a2:	4630      	mov	r0, r6
1005e8a4:	4629      	mov	r1, r5
1005e8a6:	463a      	mov	r2, r7
1005e8a8:	f000 f80e 	bl	1005e8c8 <smp_crt_calculate_hash>
1005e8ac:	2603      	movs	r6, #3
1005e8ae:	9c00      	ldr	r4, [sp, #0]
1005e8b0:	4620      	mov	r0, r4
1005e8b2:	4639      	mov	r1, r7
1005e8b4:	4632      	mov	r2, r6
1005e8b6:	f7f0 ffc5 	bl	1004f844 <BLEPLAT_MemCpy>
1005e8ba:	1ce0      	adds	r0, r4, #3
1005e8bc:	4629      	mov	r1, r5
1005e8be:	4632      	mov	r2, r6
1005e8c0:	f7f0 ffc0 	bl	1004f844 <BLEPLAT_MemCpy>
1005e8c4:	b007      	add	sp, #28
1005e8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e8c8 <smp_crt_calculate_hash>:
1005e8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e8ca:	b089      	sub	sp, #36	@ 0x24
1005e8cc:	9200      	str	r2, [sp, #0]
1005e8ce:	460f      	mov	r7, r1
1005e8d0:	4605      	mov	r5, r0
1005e8d2:	ae05      	add	r6, sp, #20
1005e8d4:	2100      	movs	r1, #0
1005e8d6:	2210      	movs	r2, #16
1005e8d8:	4630      	mov	r0, r6
1005e8da:	f7f0 ffc3 	bl	1004f864 <BLEPLAT_MemSet>
1005e8de:	2403      	movs	r4, #3
1005e8e0:	4630      	mov	r0, r6
1005e8e2:	4639      	mov	r1, r7
1005e8e4:	4622      	mov	r2, r4
1005e8e6:	f7f0 ffad 	bl	1004f844 <BLEPLAT_MemCpy>
1005e8ea:	af01      	add	r7, sp, #4
1005e8ec:	4628      	mov	r0, r5
1005e8ee:	4631      	mov	r1, r6
1005e8f0:	463a      	mov	r2, r7
1005e8f2:	f7f7 fee9 	bl	100566c8 <hci_le_encrypt>
1005e8f6:	9800      	ldr	r0, [sp, #0]
1005e8f8:	4639      	mov	r1, r7
1005e8fa:	4622      	mov	r2, r4
1005e8fc:	f7f0 ffa2 	bl	1004f844 <BLEPLAT_MemCpy>
1005e900:	b009      	add	sp, #36	@ 0x24
1005e902:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e904 <smp_sap_crt_resolve_rpa>:
1005e904:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005e906:	460a      	mov	r2, r1
1005e908:	4604      	mov	r4, r0
1005e90a:	1cc1      	adds	r1, r0, #3
1005e90c:	ad01      	add	r5, sp, #4
1005e90e:	4610      	mov	r0, r2
1005e910:	462a      	mov	r2, r5
1005e912:	f7ff ffd9 	bl	1005e8c8 <smp_crt_calculate_hash>
1005e916:	2203      	movs	r2, #3
1005e918:	4628      	mov	r0, r5
1005e91a:	4621      	mov	r1, r4
1005e91c:	f7f0 ffb2 	bl	1004f884 <BLEPLAT_MemCmp>
1005e920:	2800      	cmp	r0, #0
1005e922:	d000      	beq.n	1005e926 <smp_sap_crt_resolve_rpa+0x22>
1005e924:	2081      	movs	r0, #129	@ 0x81
1005e926:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005e928 <smp_crt_s1_generate_stk>:
1005e928:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e92a:	b085      	sub	sp, #20
1005e92c:	9300      	str	r3, [sp, #0]
1005e92e:	4617      	mov	r7, r2
1005e930:	4605      	mov	r5, r0
1005e932:	ae01      	add	r6, sp, #4
1005e934:	4630      	mov	r0, r6
1005e936:	3008      	adds	r0, #8
1005e938:	2408      	movs	r4, #8
1005e93a:	4622      	mov	r2, r4
1005e93c:	f7f0 ff82 	bl	1004f844 <BLEPLAT_MemCpy>
1005e940:	4630      	mov	r0, r6
1005e942:	4639      	mov	r1, r7
1005e944:	4622      	mov	r2, r4
1005e946:	f7f0 ff7d 	bl	1004f844 <BLEPLAT_MemCpy>
1005e94a:	4628      	mov	r0, r5
1005e94c:	4631      	mov	r1, r6
1005e94e:	9a00      	ldr	r2, [sp, #0]
1005e950:	f7f7 feba 	bl	100566c8 <hci_le_encrypt>
1005e954:	b005      	add	sp, #20
1005e956:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e958 <smp_crt_generate_csrk>:
1005e958:	b5e0      	push	{r5, r6, r7, lr}
1005e95a:	460b      	mov	r3, r1
1005e95c:	4601      	mov	r1, r0
1005e95e:	aa01      	add	r2, sp, #4
1005e960:	2001      	movs	r0, #1
1005e962:	8010      	strh	r0, [r2, #0]
1005e964:	4802      	ldr	r0, [pc, #8]	@ (1005e970 <__arm_cp.7_0>)
1005e966:	6800      	ldr	r0, [r0, #0]
1005e968:	3008      	adds	r0, #8
1005e96a:	f7ff ff5f 	bl	1005e82c <smp_crt_diversify>
1005e96e:	bd8c      	pop	{r2, r3, r7, pc}

1005e970 <__arm_cp.7_0>:
1005e970:	20000ecc 	.word	0x20000ecc

1005e974 <smp_crt_generate_cmac_tag>:
1005e974:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e976:	b095      	sub	sp, #84	@ 0x54
1005e978:	9301      	str	r3, [sp, #4]
1005e97a:	4617      	mov	r7, r2
1005e97c:	9103      	str	r1, [sp, #12]
1005e97e:	2500      	movs	r5, #0
1005e980:	9514      	str	r5, [sp, #80]	@ 0x50
1005e982:	9513      	str	r5, [sp, #76]	@ 0x4c
1005e984:	9512      	str	r5, [sp, #72]	@ 0x48
1005e986:	9511      	str	r5, [sp, #68]	@ 0x44
1005e988:	a911      	add	r1, sp, #68	@ 0x44
1005e98a:	ac0d      	add	r4, sp, #52	@ 0x34
1005e98c:	9004      	str	r0, [sp, #16]
1005e98e:	4622      	mov	r2, r4
1005e990:	f7f7 fe9a 	bl	100566c8 <hci_le_encrypt>
1005e994:	200f      	movs	r0, #15
1005e996:	9002      	str	r0, [sp, #8]
1005e998:	5626      	ldrsb	r6, [r4, r0]
1005e99a:	a909      	add	r1, sp, #36	@ 0x24
1005e99c:	4620      	mov	r0, r4
1005e99e:	f000 f885 	bl	1005eaac <smp_crt_left_shift>
1005e9a2:	2e00      	cmp	r6, #0
1005e9a4:	d467      	bmi.n	1005ea76 <smp_crt_generate_cmac_tag+0x102>
1005e9a6:	a809      	add	r0, sp, #36	@ 0x24
1005e9a8:	9902      	ldr	r1, [sp, #8]
1005e9aa:	5644      	ldrsb	r4, [r0, r1]
1005e9ac:	a905      	add	r1, sp, #20
1005e9ae:	f000 f87d 	bl	1005eaac <smp_crt_left_shift>
1005e9b2:	2c00      	cmp	r4, #0
1005e9b4:	d46c      	bmi.n	1005ea90 <smp_crt_generate_cmac_tag+0x11c>
1005e9b6:	a811      	add	r0, sp, #68	@ 0x44
1005e9b8:	2400      	movs	r4, #0
1005e9ba:	2210      	movs	r2, #16
1005e9bc:	4621      	mov	r1, r4
1005e9be:	f7f0 ff51 	bl	1004f864 <BLEPLAT_MemSet>
1005e9c2:	b2fd      	uxtb	r5, r7
1005e9c4:	2d11      	cmp	r5, #17
1005e9c6:	d321      	bcc.n	1005ea0c <smp_crt_generate_cmac_tag+0x98>
1005e9c8:	1d20      	adds	r0, r4, #4
1005e9ca:	b281      	uxth	r1, r0
1005e9cc:	2210      	movs	r2, #16
1005e9ce:	ab0d      	add	r3, sp, #52	@ 0x34
1005e9d0:	9803      	ldr	r0, [sp, #12]
1005e9d2:	f7f3 faeb 	bl	10051fac <ACL_pkt_read>
1005e9d6:	2000      	movs	r0, #0
1005e9d8:	2810      	cmp	r0, #16
1005e9da:	d007      	beq.n	1005e9ec <smp_crt_generate_cmac_tag+0x78>
1005e9dc:	a90d      	add	r1, sp, #52	@ 0x34
1005e9de:	5c09      	ldrb	r1, [r1, r0]
1005e9e0:	aa11      	add	r2, sp, #68	@ 0x44
1005e9e2:	5c13      	ldrb	r3, [r2, r0]
1005e9e4:	404b      	eors	r3, r1
1005e9e6:	5413      	strb	r3, [r2, r0]
1005e9e8:	1c40      	adds	r0, r0, #1
1005e9ea:	e7f5      	b.n	1005e9d8 <smp_crt_generate_cmac_tag+0x64>
1005e9ec:	ad11      	add	r5, sp, #68	@ 0x44
1005e9ee:	ae0d      	add	r6, sp, #52	@ 0x34
1005e9f0:	9804      	ldr	r0, [sp, #16]
1005e9f2:	4629      	mov	r1, r5
1005e9f4:	4632      	mov	r2, r6
1005e9f6:	f7f7 fe67 	bl	100566c8 <hci_le_encrypt>
1005e9fa:	2210      	movs	r2, #16
1005e9fc:	4628      	mov	r0, r5
1005e9fe:	4631      	mov	r1, r6
1005ea00:	f7f0 ff20 	bl	1004f844 <BLEPLAT_MemCpy>
1005ea04:	3f10      	subs	r7, #16
1005ea06:	3410      	adds	r4, #16
1005ea08:	b2a4      	uxth	r4, r4
1005ea0a:	e7da      	b.n	1005e9c2 <smp_crt_generate_cmac_tag+0x4e>
1005ea0c:	2d10      	cmp	r5, #16
1005ea0e:	d108      	bne.n	1005ea22 <smp_crt_generate_cmac_tag+0xae>
1005ea10:	1d20      	adds	r0, r4, #4
1005ea12:	b281      	uxth	r1, r0
1005ea14:	2210      	movs	r2, #16
1005ea16:	ab0d      	add	r3, sp, #52	@ 0x34
1005ea18:	9803      	ldr	r0, [sp, #12]
1005ea1a:	f7f3 fac7 	bl	10051fac <ACL_pkt_read>
1005ea1e:	a809      	add	r0, sp, #36	@ 0x24
1005ea20:	e014      	b.n	1005ea4c <smp_crt_generate_cmac_tag+0xd8>
1005ea22:	a80d      	add	r0, sp, #52	@ 0x34
1005ea24:	2100      	movs	r1, #0
1005ea26:	2210      	movs	r2, #16
1005ea28:	f7f0 ff1c 	bl	1004f864 <BLEPLAT_MemSet>
1005ea2c:	0638      	lsls	r0, r7, #24
1005ea2e:	d008      	beq.n	1005ea42 <smp_crt_generate_cmac_tag+0xce>
1005ea30:	a80d      	add	r0, sp, #52	@ 0x34
1005ea32:	1b43      	subs	r3, r0, r5
1005ea34:	3310      	adds	r3, #16
1005ea36:	1d20      	adds	r0, r4, #4
1005ea38:	b281      	uxth	r1, r0
1005ea3a:	9803      	ldr	r0, [sp, #12]
1005ea3c:	462a      	mov	r2, r5
1005ea3e:	f7f3 fab5 	bl	10051fac <ACL_pkt_read>
1005ea42:	a80d      	add	r0, sp, #52	@ 0x34
1005ea44:	1b40      	subs	r0, r0, r5
1005ea46:	2180      	movs	r1, #128	@ 0x80
1005ea48:	73c1      	strb	r1, [r0, #15]
1005ea4a:	a805      	add	r0, sp, #20
1005ea4c:	9a01      	ldr	r2, [sp, #4]
1005ea4e:	2100      	movs	r1, #0
1005ea50:	2910      	cmp	r1, #16
1005ea52:	d009      	beq.n	1005ea68 <smp_crt_generate_cmac_tag+0xf4>
1005ea54:	ab0d      	add	r3, sp, #52	@ 0x34
1005ea56:	5c5c      	ldrb	r4, [r3, r1]
1005ea58:	5c43      	ldrb	r3, [r0, r1]
1005ea5a:	4063      	eors	r3, r4
1005ea5c:	ad11      	add	r5, sp, #68	@ 0x44
1005ea5e:	5c6c      	ldrb	r4, [r5, r1]
1005ea60:	405c      	eors	r4, r3
1005ea62:	546c      	strb	r4, [r5, r1]
1005ea64:	1c49      	adds	r1, r1, #1
1005ea66:	e7f3      	b.n	1005ea50 <smp_crt_generate_cmac_tag+0xdc>
1005ea68:	a911      	add	r1, sp, #68	@ 0x44
1005ea6a:	9804      	ldr	r0, [sp, #16]
1005ea6c:	f7f7 fe2c 	bl	100566c8 <hci_le_encrypt>
1005ea70:	2000      	movs	r0, #0
1005ea72:	b015      	add	sp, #84	@ 0x54
1005ea74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ea76:	a811      	add	r0, sp, #68	@ 0x44
1005ea78:	2187      	movs	r1, #135	@ 0x87
1005ea7a:	7001      	strb	r1, [r0, #0]
1005ea7c:	2d0f      	cmp	r5, #15
1005ea7e:	d092      	beq.n	1005e9a6 <smp_crt_generate_cmac_tag+0x32>
1005ea80:	a809      	add	r0, sp, #36	@ 0x24
1005ea82:	5d41      	ldrb	r1, [r0, r5]
1005ea84:	aa11      	add	r2, sp, #68	@ 0x44
1005ea86:	5d52      	ldrb	r2, [r2, r5]
1005ea88:	404a      	eors	r2, r1
1005ea8a:	5542      	strb	r2, [r0, r5]
1005ea8c:	1c6d      	adds	r5, r5, #1
1005ea8e:	e7f5      	b.n	1005ea7c <smp_crt_generate_cmac_tag+0x108>
1005ea90:	a811      	add	r0, sp, #68	@ 0x44
1005ea92:	2187      	movs	r1, #135	@ 0x87
1005ea94:	7001      	strb	r1, [r0, #0]
1005ea96:	2000      	movs	r0, #0
1005ea98:	280f      	cmp	r0, #15
1005ea9a:	d08c      	beq.n	1005e9b6 <smp_crt_generate_cmac_tag+0x42>
1005ea9c:	a905      	add	r1, sp, #20
1005ea9e:	5c0a      	ldrb	r2, [r1, r0]
1005eaa0:	ab11      	add	r3, sp, #68	@ 0x44
1005eaa2:	5c1b      	ldrb	r3, [r3, r0]
1005eaa4:	4053      	eors	r3, r2
1005eaa6:	540b      	strb	r3, [r1, r0]
1005eaa8:	1c40      	adds	r0, r0, #1
1005eaaa:	e7f5      	b.n	1005ea98 <smp_crt_generate_cmac_tag+0x124>

1005eaac <smp_crt_left_shift>:
1005eaac:	b510      	push	{r4, lr}
1005eaae:	7802      	ldrb	r2, [r0, #0]
1005eab0:	0052      	lsls	r2, r2, #1
1005eab2:	700a      	strb	r2, [r1, #0]
1005eab4:	1c49      	adds	r1, r1, #1
1005eab6:	2200      	movs	r2, #0
1005eab8:	2a0f      	cmp	r2, #15
1005eaba:	d00b      	beq.n	1005ead4 <smp_crt_left_shift+0x28>
1005eabc:	1883      	adds	r3, r0, r2
1005eabe:	785b      	ldrb	r3, [r3, #1]
1005eac0:	005b      	lsls	r3, r3, #1
1005eac2:	548b      	strb	r3, [r1, r2]
1005eac4:	5684      	ldrsb	r4, [r0, r2]
1005eac6:	2c00      	cmp	r4, #0
1005eac8:	d502      	bpl.n	1005ead0 <smp_crt_left_shift+0x24>
1005eaca:	2401      	movs	r4, #1
1005eacc:	4323      	orrs	r3, r4
1005eace:	548b      	strb	r3, [r1, r2]
1005ead0:	1c52      	adds	r2, r2, #1
1005ead2:	e7f1      	b.n	1005eab8 <smp_crt_left_shift+0xc>
1005ead4:	bd10      	pop	{r4, pc}

1005ead6 <smp_debug_trudy__set_config>:
1005ead6:	200c      	movs	r0, #12
1005ead8:	4770      	bx	lr
	...

1005eadc <smp_fsm_process_actions_wrt_state_tsk>:
1005eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005eade:	2700      	movs	r7, #0
1005eae0:	4b6b      	ldr	r3, [pc, #428]	@ (1005ec90 <__arm_cp.0_0>)
1005eae2:	4a6c      	ldr	r2, [pc, #432]	@ (1005ec94 <__arm_cp.0_1>)
1005eae4:	463d      	mov	r5, r7
1005eae6:	6818      	ldr	r0, [r3, #0]
1005eae8:	2134      	movs	r1, #52	@ 0x34
1005eaea:	5c40      	ldrb	r0, [r0, r1]
1005eaec:	4285      	cmp	r5, r0
1005eaee:	d300      	bcc.n	1005eaf2 <smp_fsm_process_actions_wrt_state_tsk+0x16>
1005eaf0:	e0cd      	b.n	1005ec8e <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
1005eaf2:	6810      	ldr	r0, [r2, #0]
1005eaf4:	21a4      	movs	r1, #164	@ 0xa4
1005eaf6:	5840      	ldr	r0, [r0, r1]
1005eaf8:	2800      	cmp	r0, #0
1005eafa:	d100      	bne.n	1005eafe <smp_fsm_process_actions_wrt_state_tsk+0x22>
1005eafc:	e0b2      	b.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eafe:	19c4      	adds	r4, r0, r7
1005eb00:	8920      	ldrh	r0, [r4, #8]
1005eb02:	2800      	cmp	r0, #0
1005eb04:	d100      	bne.n	1005eb08 <smp_fsm_process_actions_wrt_state_tsk+0x2c>
1005eb06:	e0ad      	b.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb08:	7aa0      	ldrb	r0, [r4, #10]
1005eb0a:	4601      	mov	r1, r0
1005eb0c:	39d1      	subs	r1, #209	@ 0xd1
1005eb0e:	2905      	cmp	r1, #5
1005eb10:	d35d      	bcc.n	1005ebce <smp_fsm_process_actions_wrt_state_tsk+0xf2>
1005eb12:	2800      	cmp	r0, #0
1005eb14:	d100      	bne.n	1005eb18 <smp_fsm_process_actions_wrt_state_tsk+0x3c>
1005eb16:	e0a5      	b.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb18:	28fe      	cmp	r0, #254	@ 0xfe
1005eb1a:	d100      	bne.n	1005eb1e <smp_fsm_process_actions_wrt_state_tsk+0x42>
1005eb1c:	e08a      	b.n	1005ec34 <smp_fsm_process_actions_wrt_state_tsk+0x158>
1005eb1e:	28a2      	cmp	r0, #162	@ 0xa2
1005eb20:	d059      	beq.n	1005ebd6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
1005eb22:	28aa      	cmp	r0, #170	@ 0xaa
1005eb24:	d100      	bne.n	1005eb28 <smp_fsm_process_actions_wrt_state_tsk+0x4c>
1005eb26:	e081      	b.n	1005ec2c <smp_fsm_process_actions_wrt_state_tsk+0x150>
1005eb28:	28b2      	cmp	r0, #178	@ 0xb2
1005eb2a:	d054      	beq.n	1005ebd6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
1005eb2c:	28b4      	cmp	r0, #180	@ 0xb4
1005eb2e:	d100      	bne.n	1005eb32 <smp_fsm_process_actions_wrt_state_tsk+0x56>
1005eb30:	e08a      	b.n	1005ec48 <smp_fsm_process_actions_wrt_state_tsk+0x16c>
1005eb32:	28ba      	cmp	r0, #186	@ 0xba
1005eb34:	d07a      	beq.n	1005ec2c <smp_fsm_process_actions_wrt_state_tsk+0x150>
1005eb36:	28bf      	cmp	r0, #191	@ 0xbf
1005eb38:	d100      	bne.n	1005eb3c <smp_fsm_process_actions_wrt_state_tsk+0x60>
1005eb3a:	e089      	b.n	1005ec50 <smp_fsm_process_actions_wrt_state_tsk+0x174>
1005eb3c:	28f0      	cmp	r0, #240	@ 0xf0
1005eb3e:	d100      	bne.n	1005eb42 <smp_fsm_process_actions_wrt_state_tsk+0x66>
1005eb40:	e08b      	b.n	1005ec5a <smp_fsm_process_actions_wrt_state_tsk+0x17e>
1005eb42:	2810      	cmp	r0, #16
1005eb44:	d000      	beq.n	1005eb48 <smp_fsm_process_actions_wrt_state_tsk+0x6c>
1005eb46:	e090      	b.n	1005ec6a <smp_fsm_process_actions_wrt_state_tsk+0x18e>
1005eb48:	2101      	movs	r1, #1
1005eb4a:	4620      	mov	r0, r4
1005eb4c:	f004 fcb8 	bl	100634c0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
1005eb50:	2800      	cmp	r0, #0
1005eb52:	d100      	bne.n	1005eb56 <smp_fsm_process_actions_wrt_state_tsk+0x7a>
1005eb54:	e096      	b.n	1005ec84 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
1005eb56:	2600      	movs	r6, #0
1005eb58:	72a6      	strb	r6, [r4, #10]
1005eb5a:	f7f4 fc5b 	bl	10053414 <GapIsPrivacySupported>
1005eb5e:	2800      	cmp	r0, #0
1005eb60:	4b4b      	ldr	r3, [pc, #300]	@ (1005ec90 <__arm_cp.0_0>)
1005eb62:	4a4c      	ldr	r2, [pc, #304]	@ (1005ec94 <__arm_cp.0_1>)
1005eb64:	d07e      	beq.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb66:	2060      	movs	r0, #96	@ 0x60
1005eb68:	5c20      	ldrb	r0, [r4, r0]
1005eb6a:	07c0      	lsls	r0, r0, #31
1005eb6c:	d07a      	beq.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb6e:	f004 fc18 	bl	100633a2 <smp_dep_sdb_get_bonding_records_count>
1005eb72:	4a48      	ldr	r2, [pc, #288]	@ (1005ec94 <__arm_cp.0_1>)
1005eb74:	4b46      	ldr	r3, [pc, #280]	@ (1005ec90 <__arm_cp.0_0>)
1005eb76:	2800      	cmp	r0, #0
1005eb78:	d074      	beq.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb7a:	79e0      	ldrb	r0, [r4, #7]
1005eb7c:	21c0      	movs	r1, #192	@ 0xc0
1005eb7e:	4001      	ands	r1, r0
1005eb80:	2940      	cmp	r1, #64	@ 0x40
1005eb82:	d16f      	bne.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb84:	4844      	ldr	r0, [pc, #272]	@ (1005ec98 <__arm_cp.0_2>)
1005eb86:	6800      	ldr	r0, [r0, #0]
1005eb88:	214f      	movs	r1, #79	@ 0x4f
1005eb8a:	5c40      	ldrb	r0, [r0, r1]
1005eb8c:	0700      	lsls	r0, r0, #28
1005eb8e:	d569      	bpl.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005eb90:	8924      	ldrh	r4, [r4, #8]
1005eb92:	4842      	ldr	r0, [pc, #264]	@ (1005ec9c <__arm_cp.0_3>)
1005eb94:	6800      	ldr	r0, [r0, #0]
1005eb96:	6980      	ldr	r0, [r0, #24]
1005eb98:	2248      	movs	r2, #72	@ 0x48
1005eb9a:	2102      	movs	r1, #2
1005eb9c:	460b      	mov	r3, r1
1005eb9e:	f7f3 fb9d 	bl	100522dc <aci_event_fifo_push_header>
1005eba2:	4a3c      	ldr	r2, [pc, #240]	@ (1005ec94 <__arm_cp.0_1>)
1005eba4:	4b3a      	ldr	r3, [pc, #232]	@ (1005ec90 <__arm_cp.0_0>)
1005eba6:	2800      	cmp	r0, #0
1005eba8:	d05c      	beq.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005ebaa:	4601      	mov	r1, r0
1005ebac:	2004      	movs	r0, #4
1005ebae:	7248      	strb	r0, [r1, #9]
1005ebb0:	2208      	movs	r2, #8
1005ebb2:	720a      	strb	r2, [r1, #8]
1005ebb4:	71ce      	strb	r6, [r1, #7]
1005ebb6:	7188      	strb	r0, [r1, #6]
1005ebb8:	728c      	strb	r4, [r1, #10]
1005ebba:	20ff      	movs	r0, #255	@ 0xff
1005ebbc:	7148      	strb	r0, [r1, #5]
1005ebbe:	2082      	movs	r0, #130	@ 0x82
1005ebc0:	7108      	strb	r0, [r1, #4]
1005ebc2:	0a20      	lsrs	r0, r4, #8
1005ebc4:	72c8      	strb	r0, [r1, #11]
1005ebc6:	2002      	movs	r0, #2
1005ebc8:	f7f3 fc25 	bl	10052416 <aci_event_fifo_push>
1005ebcc:	e048      	b.n	1005ec60 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1005ebce:	4620      	mov	r0, r4
1005ebd0:	f005 fa2c 	bl	1006402c <smp_pp3_keys_distribution_send>
1005ebd4:	e044      	b.n	1005ec60 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1005ebd6:	7de0      	ldrb	r0, [r4, #23]
1005ebd8:	2601      	movs	r6, #1
1005ebda:	0700      	lsls	r0, r0, #28
1005ebdc:	4630      	mov	r0, r6
1005ebde:	d513      	bpl.n	1005ec08 <smp_fsm_process_actions_wrt_state_tsk+0x12c>
1005ebe0:	4620      	mov	r0, r4
1005ebe2:	f005 fd28 	bl	10064636 <smp_scp_public_key_prepare_and_exchange_ucfg_weak>
1005ebe6:	2800      	cmp	r0, #0
1005ebe8:	d006      	beq.n	1005ebf8 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
1005ebea:	2812      	cmp	r0, #18
1005ebec:	d004      	beq.n	1005ebf8 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
1005ebee:	200e      	movs	r0, #14
1005ebf0:	f000 febe 	bl	1005f970 <tsk_notify_idx>
1005ebf4:	f7f0 f865 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005ebf8:	7de0      	ldrb	r0, [r4, #23]
1005ebfa:	2160      	movs	r1, #96	@ 0x60
1005ebfc:	4001      	ands	r1, r0
1005ebfe:	3960      	subs	r1, #96	@ 0x60
1005ec00:	4248      	negs	r0, r1
1005ec02:	4148      	adcs	r0, r1
1005ec04:	4b22      	ldr	r3, [pc, #136]	@ (1005ec90 <__arm_cp.0_0>)
1005ec06:	4a23      	ldr	r2, [pc, #140]	@ (1005ec94 <__arm_cp.0_1>)
1005ec08:	7ce1      	ldrb	r1, [r4, #19]
1005ec0a:	2902      	cmp	r1, #2
1005ec0c:	d104      	bne.n	1005ec18 <smp_fsm_process_actions_wrt_state_tsk+0x13c>
1005ec0e:	7be1      	ldrb	r1, [r4, #15]
1005ec10:	2210      	movs	r2, #16
1005ec12:	400a      	ands	r2, r1
1005ec14:	0916      	lsrs	r6, r2, #4
1005ec16:	4a1f      	ldr	r2, [pc, #124]	@ (1005ec94 <__arm_cp.0_1>)
1005ec18:	2800      	cmp	r0, #0
1005ec1a:	d023      	beq.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005ec1c:	2e00      	cmp	r6, #0
1005ec1e:	d021      	beq.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005ec20:	2060      	movs	r0, #96	@ 0x60
1005ec22:	5c20      	ldrb	r0, [r4, r0]
1005ec24:	07c0      	lsls	r0, r0, #31
1005ec26:	d024      	beq.n	1005ec72 <smp_fsm_process_actions_wrt_state_tsk+0x196>
1005ec28:	204b      	movs	r0, #75	@ 0x4b
1005ec2a:	e023      	b.n	1005ec74 <smp_fsm_process_actions_wrt_state_tsk+0x198>
1005ec2c:	4620      	mov	r0, r4
1005ec2e:	f000 f837 	bl	1005eca0 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>
1005ec32:	e015      	b.n	1005ec60 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1005ec34:	2060      	movs	r0, #96	@ 0x60
1005ec36:	5620      	ldrsb	r0, [r4, r0]
1005ec38:	2800      	cmp	r0, #0
1005ec3a:	d513      	bpl.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005ec3c:	2100      	movs	r1, #0
1005ec3e:	2270      	movs	r2, #112	@ 0x70
1005ec40:	4620      	mov	r0, r4
1005ec42:	f7f0 fe0f 	bl	1004f864 <BLEPLAT_MemSet>
1005ec46:	e00b      	b.n	1005ec60 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1005ec48:	4620      	mov	r0, r4
1005ec4a:	f005 f859 	bl	10063d00 <smp_pp2_per_auth_stage_1_start>
1005ec4e:	e007      	b.n	1005ec60 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1005ec50:	2100      	movs	r1, #0
1005ec52:	4620      	mov	r0, r4
1005ec54:	f005 f9a1 	bl	10063f9a <smp_pp3_keys_distribution_start>
1005ec58:	e002      	b.n	1005ec60 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1005ec5a:	4620      	mov	r0, r4
1005ec5c:	f004 fcb2 	bl	100635c4 <smp_pp3_pairing_completed_successful>
1005ec60:	4a0c      	ldr	r2, [pc, #48]	@ (1005ec94 <__arm_cp.0_1>)
1005ec62:	4b0b      	ldr	r3, [pc, #44]	@ (1005ec90 <__arm_cp.0_0>)
1005ec64:	3770      	adds	r7, #112	@ 0x70
1005ec66:	1c6d      	adds	r5, r5, #1
1005ec68:	e73d      	b.n	1005eae6 <smp_fsm_process_actions_wrt_state_tsk+0xa>
1005ec6a:	4620      	mov	r0, r4
1005ec6c:	f000 f819 	bl	1005eca2 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
1005ec70:	e00a      	b.n	1005ec88 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
1005ec72:	205b      	movs	r0, #91	@ 0x5b
1005ec74:	43c0      	mvns	r0, r0
1005ec76:	72a0      	strb	r0, [r4, #10]
1005ec78:	200e      	movs	r0, #14
1005ec7a:	f000 fe79 	bl	1005f970 <tsk_notify_idx>
1005ec7e:	f7f0 f820 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005ec82:	e001      	b.n	1005ec88 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
1005ec84:	20f1      	movs	r0, #241	@ 0xf1
1005ec86:	72a0      	strb	r0, [r4, #10]
1005ec88:	4b01      	ldr	r3, [pc, #4]	@ (1005ec90 <__arm_cp.0_0>)
1005ec8a:	4a02      	ldr	r2, [pc, #8]	@ (1005ec94 <__arm_cp.0_1>)
1005ec8c:	e7ea      	b.n	1005ec64 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1005ec8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ec90 <__arm_cp.0_0>:
1005ec90:	20000ecc 	.word	0x20000ecc

1005ec94 <__arm_cp.0_1>:
1005ec94:	20000f6c 	.word	0x20000f6c

1005ec98 <__arm_cp.0_2>:
1005ec98:	20000f20 	.word	0x20000f20

1005ec9c <__arm_cp.0_3>:
1005ec9c:	20000ed0 	.word	0x20000ed0

1005eca0 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>:
1005eca0:	4770      	bx	lr

1005eca2 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
1005eca2:	4770      	bx	lr

1005eca4 <smp_rxp_process_rxed_packets_tsk>:
1005eca4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005eca6:	4f60      	ldr	r7, [pc, #384]	@ (1005ee28 <__arm_cp.0_0>)
1005eca8:	4c60      	ldr	r4, [pc, #384]	@ (1005ee2c <__arm_cp.0_1>)
1005ecaa:	6838      	ldr	r0, [r7, #0]
1005ecac:	6801      	ldr	r1, [r0, #0]
1005ecae:	2900      	cmp	r1, #0
1005ecb0:	d100      	bne.n	1005ecb4 <smp_rxp_process_rxed_packets_tsk+0x10>
1005ecb2:	e0b8      	b.n	1005ee26 <smp_rxp_process_rxed_packets_tsk+0x182>
1005ecb4:	f001 f878 	bl	1005fda8 <ACL_list_remove_head>
1005ecb8:	4605      	mov	r5, r0
1005ecba:	8800      	ldrh	r0, [r0, #0]
1005ecbc:	f005 fc4c 	bl	10064558 <smp_get_remote_device_list_item>
1005ecc0:	2800      	cmp	r0, #0
1005ecc2:	d0f2      	beq.n	1005ecaa <smp_rxp_process_rxed_packets_tsk+0x6>
1005ecc4:	4606      	mov	r6, r0
1005ecc6:	6838      	ldr	r0, [r7, #0]
1005ecc8:	21b0      	movs	r1, #176	@ 0xb0
1005ecca:	5c40      	ldrb	r0, [r0, r1]
1005eccc:	2800      	cmp	r0, #0
1005ecce:	d00e      	beq.n	1005ecee <smp_rxp_process_rxed_packets_tsk+0x4a>
1005ecd0:	2108      	movs	r1, #8
1005ecd2:	2200      	movs	r2, #0
1005ecd4:	2301      	movs	r3, #1
1005ecd6:	4630      	mov	r0, r6
1005ecd8:	f004 fd2c 	bl	10063734 <smp_pp3_pairing_failed_send>
1005ecdc:	2800      	cmp	r0, #0
1005ecde:	d00e      	beq.n	1005ecfe <smp_rxp_process_rxed_packets_tsk+0x5a>
1005ece0:	28fd      	cmp	r0, #253	@ 0xfd
1005ece2:	d000      	beq.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005ece4:	e096      	b.n	1005ee14 <smp_rxp_process_rxed_packets_tsk+0x170>
1005ece6:	4628      	mov	r0, r5
1005ece8:	f7f3 f944 	bl	10051f74 <ACL_pkt_release>
1005ecec:	e7dd      	b.n	1005ecaa <smp_rxp_process_rxed_packets_tsk+0x6>
1005ecee:	6868      	ldr	r0, [r5, #4]
1005ecf0:	7a00      	ldrb	r0, [r0, #8]
1005ecf2:	2805      	cmp	r0, #5
1005ecf4:	d10c      	bne.n	1005ed10 <smp_rxp_process_rxed_packets_tsk+0x6c>
1005ecf6:	4628      	mov	r0, r5
1005ecf8:	4631      	mov	r1, r6
1005ecfa:	f004 fcef 	bl	100636dc <smp_pp3_pairing_failed_receive>
1005ecfe:	4628      	mov	r0, r5
1005ed00:	f7f3 f938 	bl	10051f74 <ACL_pkt_release>
1005ed04:	200e      	movs	r0, #14
1005ed06:	f000 fe33 	bl	1005f970 <tsk_notify_idx>
1005ed0a:	f7ef ffda 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005ed0e:	e7cc      	b.n	1005ecaa <smp_rxp_process_rxed_packets_tsk+0x6>
1005ed10:	7ab1      	ldrb	r1, [r6, #10]
1005ed12:	29f1      	cmp	r1, #241	@ 0xf1
1005ed14:	d001      	beq.n	1005ed1a <smp_rxp_process_rxed_packets_tsk+0x76>
1005ed16:	2900      	cmp	r1, #0
1005ed18:	d10a      	bne.n	1005ed30 <smp_rxp_process_rxed_packets_tsk+0x8c>
1005ed1a:	2160      	movs	r1, #96	@ 0x60
1005ed1c:	5c72      	ldrb	r2, [r6, r1]
1005ed1e:	2101      	movs	r1, #1
1005ed20:	4011      	ands	r1, r2
1005ed22:	d101      	bne.n	1005ed28 <smp_rxp_process_rxed_packets_tsk+0x84>
1005ed24:	280b      	cmp	r0, #11
1005ed26:	d1de      	bne.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005ed28:	2900      	cmp	r1, #0
1005ed2a:	d001      	beq.n	1005ed30 <smp_rxp_process_rxed_packets_tsk+0x8c>
1005ed2c:	2801      	cmp	r0, #1
1005ed2e:	d1da      	bne.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005ed30:	7df0      	ldrb	r0, [r6, #23]
1005ed32:	0700      	lsls	r0, r0, #28
1005ed34:	d506      	bpl.n	1005ed44 <smp_rxp_process_rxed_packets_tsk+0xa0>
1005ed36:	9602      	str	r6, [sp, #8]
1005ed38:	9501      	str	r5, [sp, #4]
1005ed3a:	a801      	add	r0, sp, #4
1005ed3c:	f000 f894 	bl	1005ee68 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>
1005ed40:	28fc      	cmp	r0, #252	@ 0xfc
1005ed42:	d1cb      	bne.n	1005ecdc <smp_rxp_process_rxed_packets_tsk+0x38>
1005ed44:	2060      	movs	r0, #96	@ 0x60
1005ed46:	5c30      	ldrb	r0, [r6, r0]
1005ed48:	07c0      	lsls	r0, r0, #31
1005ed4a:	d107      	bne.n	1005ed5c <smp_rxp_process_rxed_packets_tsk+0xb8>
1005ed4c:	9602      	str	r6, [sp, #8]
1005ed4e:	9501      	str	r5, [sp, #4]
1005ed50:	a801      	add	r0, sp, #4
1005ed52:	f000 f88b 	bl	1005ee6c <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
1005ed56:	28fc      	cmp	r0, #252	@ 0xfc
1005ed58:	d1c0      	bne.n	1005ecdc <smp_rxp_process_rxed_packets_tsk+0x38>
1005ed5a:	e022      	b.n	1005eda2 <smp_rxp_process_rxed_packets_tsk+0xfe>
1005ed5c:	6868      	ldr	r0, [r5, #4]
1005ed5e:	7a00      	ldrb	r0, [r0, #8]
1005ed60:	2804      	cmp	r0, #4
1005ed62:	d031      	beq.n	1005edc8 <smp_rxp_process_rxed_packets_tsk+0x124>
1005ed64:	2803      	cmp	r0, #3
1005ed66:	d037      	beq.n	1005edd8 <smp_rxp_process_rxed_packets_tsk+0x134>
1005ed68:	2801      	cmp	r0, #1
1005ed6a:	d11a      	bne.n	1005eda2 <smp_rxp_process_rxed_packets_tsk+0xfe>
1005ed6c:	7ab0      	ldrb	r0, [r6, #10]
1005ed6e:	2800      	cmp	r0, #0
1005ed70:	d003      	beq.n	1005ed7a <smp_rxp_process_rxed_packets_tsk+0xd6>
1005ed72:	28fb      	cmp	r0, #251	@ 0xfb
1005ed74:	d047      	beq.n	1005ee06 <smp_rxp_process_rxed_packets_tsk+0x162>
1005ed76:	28f1      	cmp	r0, #241	@ 0xf1
1005ed78:	d1b5      	bne.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005ed7a:	8930      	ldrh	r0, [r6, #8]
1005ed7c:	f005 fbcc 	bl	10064518 <smp_get_remote_device_list_index>
1005ed80:	4602      	mov	r2, r0
1005ed82:	2000      	movs	r0, #0
1005ed84:	4601      	mov	r1, r0
1005ed86:	4623      	mov	r3, r4
1005ed88:	f000 f88e 	bl	1005eea8 <smp_timer_reset>
1005ed8c:	7e30      	ldrb	r0, [r6, #24]
1005ed8e:	0781      	lsls	r1, r0, #30
1005ed90:	d502      	bpl.n	1005ed98 <smp_rxp_process_rxed_packets_tsk+0xf4>
1005ed92:	2103      	movs	r1, #3
1005ed94:	4308      	orrs	r0, r1
1005ed96:	7630      	strb	r0, [r6, #24]
1005ed98:	4628      	mov	r0, r5
1005ed9a:	4631      	mov	r1, r6
1005ed9c:	f004 fe9e 	bl	10063adc <smp_pp1_per_rxp_pairing_request>
1005eda0:	e7d9      	b.n	1005ed56 <smp_rxp_process_rxed_packets_tsk+0xb2>
1005eda2:	4628      	mov	r0, r5
1005eda4:	4631      	mov	r1, r6
1005eda6:	f005 fa0f 	bl	100641c8 <smp_pp3_keys_distribution_receive>
1005edaa:	28fc      	cmp	r0, #252	@ 0xfc
1005edac:	d003      	beq.n	1005edb6 <smp_rxp_process_rxed_packets_tsk+0x112>
1005edae:	2886      	cmp	r0, #134	@ 0x86
1005edb0:	d099      	beq.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005edb2:	2884      	cmp	r0, #132	@ 0x84
1005edb4:	d192      	bne.n	1005ecdc <smp_rxp_process_rxed_packets_tsk+0x38>
1005edb6:	7df0      	ldrb	r0, [r6, #23]
1005edb8:	0700      	lsls	r0, r0, #28
1005edba:	d594      	bpl.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005edbc:	9602      	str	r6, [sp, #8]
1005edbe:	9501      	str	r5, [sp, #4]
1005edc0:	a801      	add	r0, sp, #4
1005edc2:	f000 f84f 	bl	1005ee64 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>
1005edc6:	e789      	b.n	1005ecdc <smp_rxp_process_rxed_packets_tsk+0x38>
1005edc8:	7ab0      	ldrb	r0, [r6, #10]
1005edca:	28b6      	cmp	r0, #182	@ 0xb6
1005edcc:	d18b      	bne.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005edce:	4628      	mov	r0, r5
1005edd0:	4631      	mov	r1, r6
1005edd2:	f005 f84d 	bl	10063e70 <smp_pp2_per_rx_process_pairing_random>
1005edd6:	e7be      	b.n	1005ed56 <smp_rxp_process_rxed_packets_tsk+0xb2>
1005edd8:	7ab0      	ldrb	r0, [r6, #10]
1005edda:	28b2      	cmp	r0, #178	@ 0xb2
1005eddc:	d009      	beq.n	1005edf2 <smp_rxp_process_rxed_packets_tsk+0x14e>
1005edde:	28b4      	cmp	r0, #180	@ 0xb4
1005ede0:	d007      	beq.n	1005edf2 <smp_rxp_process_rxed_packets_tsk+0x14e>
1005ede2:	28b5      	cmp	r0, #181	@ 0xb5
1005ede4:	d000      	beq.n	1005ede8 <smp_rxp_process_rxed_packets_tsk+0x144>
1005ede6:	e77e      	b.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005ede8:	4628      	mov	r0, r5
1005edea:	4631      	mov	r1, r6
1005edec:	f004 ff4a 	bl	10063c84 <smp_pp2_per_rx_process_pairing_confirm>
1005edf0:	e7b1      	b.n	1005ed56 <smp_rxp_process_rxed_packets_tsk+0xb2>
1005edf2:	7cf0      	ldrb	r0, [r6, #19]
1005edf4:	2802      	cmp	r0, #2
1005edf6:	d000      	beq.n	1005edfa <smp_rxp_process_rxed_packets_tsk+0x156>
1005edf8:	e775      	b.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005edfa:	6838      	ldr	r0, [r7, #0]
1005edfc:	2140      	movs	r1, #64	@ 0x40
1005edfe:	5c41      	ldrb	r1, [r0, r1]
1005ee00:	2903      	cmp	r1, #3
1005ee02:	d108      	bne.n	1005ee16 <smp_rxp_process_rxed_packets_tsk+0x172>
1005ee04:	e76f      	b.n	1005ece6 <smp_rxp_process_rxed_packets_tsk+0x42>
1005ee06:	2109      	movs	r1, #9
1005ee08:	2200      	movs	r2, #0
1005ee0a:	2301      	movs	r3, #1
1005ee0c:	4630      	mov	r0, r6
1005ee0e:	f004 fc91 	bl	10063734 <smp_pp3_pairing_failed_send>
1005ee12:	e7a0      	b.n	1005ed56 <smp_rxp_process_rxed_packets_tsk+0xb2>
1005ee14:	6838      	ldr	r0, [r7, #0]
1005ee16:	4629      	mov	r1, r5
1005ee18:	f000 ffa7 	bl	1005fd6a <ACL_list_insert_head>
1005ee1c:	200f      	movs	r0, #15
1005ee1e:	f000 fda7 	bl	1005f970 <tsk_notify_idx>
1005ee22:	f7ef ff4e 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005ee26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005ee28 <__arm_cp.0_0>:
1005ee28:	20000f6c 	.word	0x20000f6c

1005ee2c <__arm_cp.0_1>:
1005ee2c:	00007530 	.word	0x00007530

1005ee30 <smp_rxp_flush_packet_queues>:
1005ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ee32:	4d0a      	ldr	r5, [pc, #40]	@ (1005ee5c <__arm_cp.4_0>)
1005ee34:	4005      	ands	r5, r0
1005ee36:	4e0a      	ldr	r6, [pc, #40]	@ (1005ee60 <__arm_cp.4_1>)
1005ee38:	6830      	ldr	r0, [r6, #0]
1005ee3a:	6807      	ldr	r7, [r0, #0]
1005ee3c:	2f00      	cmp	r7, #0
1005ee3e:	d00c      	beq.n	1005ee5a <smp_rxp_flush_packet_queues+0x2a>
1005ee40:	463c      	mov	r4, r7
1005ee42:	69ff      	ldr	r7, [r7, #28]
1005ee44:	8820      	ldrh	r0, [r4, #0]
1005ee46:	42a8      	cmp	r0, r5
1005ee48:	d1f8      	bne.n	1005ee3c <smp_rxp_flush_packet_queues+0xc>
1005ee4a:	6830      	ldr	r0, [r6, #0]
1005ee4c:	4621      	mov	r1, r4
1005ee4e:	f000 ff95 	bl	1005fd7c <ACL_list_remove>
1005ee52:	4620      	mov	r0, r4
1005ee54:	f7f3 f88e 	bl	10051f74 <ACL_pkt_release>
1005ee58:	e7f0      	b.n	1005ee3c <smp_rxp_flush_packet_queues+0xc>
1005ee5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ee5c <__arm_cp.4_0>:
1005ee5c:	00000fff 	.word	0x00000fff

1005ee60 <__arm_cp.4_1>:
1005ee60:	20000f6c 	.word	0x20000f6c

1005ee64 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>:
1005ee64:	201f      	movs	r0, #31
1005ee66:	4770      	bx	lr

1005ee68 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>:
1005ee68:	201f      	movs	r0, #31
1005ee6a:	4770      	bx	lr

1005ee6c <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
1005ee6c:	201f      	movs	r0, #31
1005ee6e:	4770      	bx	lr

1005ee70 <smp_timer_init>:
1005ee70:	b580      	push	{r7, lr}
1005ee72:	4806      	ldr	r0, [pc, #24]	@ (1005ee8c <__arm_cp.0_0>)
1005ee74:	7ac1      	ldrb	r1, [r0, #11]
1005ee76:	4806      	ldr	r0, [pc, #24]	@ (1005ee90 <__arm_cp.0_1>)
1005ee78:	6800      	ldr	r0, [r0, #0]
1005ee7a:	3008      	adds	r0, #8
1005ee7c:	1cc9      	adds	r1, r1, #3
1005ee7e:	b2c9      	uxtb	r1, r1
1005ee80:	4a04      	ldr	r2, [pc, #16]	@ (1005ee94 <__arm_cp.0_2>)
1005ee82:	2307      	movs	r3, #7
1005ee84:	f000 fdd2 	bl	1005fa2c <CST_init>
1005ee88:	bd80      	pop	{r7, pc}
1005ee8a:	46c0      	nop			@ (mov r8, r8)

1005ee8c <__arm_cp.0_0>:
1005ee8c:	20000f34 	.word	0x20000f34

1005ee90 <__arm_cp.0_1>:
1005ee90:	20000f6c 	.word	0x20000f6c

1005ee94 <__arm_cp.0_2>:
1005ee94:	1005ee99 	.word	0x1005ee99

1005ee98 <smp_timers_cb_wrapper>:
1005ee98:	b580      	push	{r7, lr}
1005ee9a:	6940      	ldr	r0, [r0, #20]
1005ee9c:	4901      	ldr	r1, [pc, #4]	@ (1005eea4 <__arm_cp.1_0>)
1005ee9e:	f000 fe9e 	bl	1005fbde <cst_sharedCallback>
1005eea2:	bd80      	pop	{r7, pc}

1005eea4 <__arm_cp.1_0>:
1005eea4:	1005ef41 	.word	0x1005ef41

1005eea8 <smp_timer_reset>:
1005eea8:	b510      	push	{r4, lr}
1005eeaa:	2900      	cmp	r1, #0
1005eeac:	d006      	beq.n	1005eebc <smp_timer_reset+0x14>
1005eeae:	2486      	movs	r4, #134	@ 0x86
1005eeb0:	2901      	cmp	r1, #1
1005eeb2:	d11b      	bne.n	1005eeec <smp_timer_reset+0x44>
1005eeb4:	2a02      	cmp	r2, #2
1005eeb6:	d819      	bhi.n	1005eeec <smp_timer_reset+0x44>
1005eeb8:	2100      	movs	r1, #0
1005eeba:	e000      	b.n	1005eebe <smp_timer_reset+0x16>
1005eebc:	2103      	movs	r1, #3
1005eebe:	2801      	cmp	r0, #1
1005eec0:	d00a      	beq.n	1005eed8 <smp_timer_reset+0x30>
1005eec2:	2800      	cmp	r0, #0
1005eec4:	d111      	bne.n	1005eeea <smp_timer_reset+0x42>
1005eec6:	1888      	adds	r0, r1, r2
1005eec8:	b2c1      	uxtb	r1, r0
1005eeca:	4809      	ldr	r0, [pc, #36]	@ (1005eef0 <__arm_cp.2_0>)
1005eecc:	6800      	ldr	r0, [r0, #0]
1005eece:	3008      	adds	r0, #8
1005eed0:	2201      	movs	r2, #1
1005eed2:	f000 fdf6 	bl	1005fac2 <CST_start>
1005eed6:	e006      	b.n	1005eee6 <smp_timer_reset+0x3e>
1005eed8:	1888      	adds	r0, r1, r2
1005eeda:	b2c1      	uxtb	r1, r0
1005eedc:	4804      	ldr	r0, [pc, #16]	@ (1005eef0 <__arm_cp.2_0>)
1005eede:	6800      	ldr	r0, [r0, #0]
1005eee0:	3008      	adds	r0, #8
1005eee2:	f000 fdb8 	bl	1005fa56 <CST_stop>
1005eee6:	4604      	mov	r4, r0
1005eee8:	e000      	b.n	1005eeec <smp_timer_reset+0x44>
1005eeea:	2400      	movs	r4, #0
1005eeec:	4620      	mov	r0, r4
1005eeee:	bd10      	pop	{r4, pc}

1005eef0 <__arm_cp.2_0>:
1005eef0:	20000f6c 	.word	0x20000f6c

1005eef4 <smp_timers_protocol_timeout_cb>:
1005eef4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005eef6:	4605      	mov	r5, r0
1005eef8:	2070      	movs	r0, #112	@ 0x70
1005eefa:	9002      	str	r0, [sp, #8]
1005eefc:	4345      	muls	r5, r0
1005eefe:	480f      	ldr	r0, [pc, #60]	@ (1005ef3c <__arm_cp.3_0>)
1005ef00:	6800      	ldr	r0, [r0, #0]
1005ef02:	21a4      	movs	r1, #164	@ 0xa4
1005ef04:	9101      	str	r1, [sp, #4]
1005ef06:	5840      	ldr	r0, [r0, r1]
1005ef08:	1947      	adds	r7, r0, r5
1005ef0a:	8939      	ldrh	r1, [r7, #8]
1005ef0c:	2002      	movs	r0, #2
1005ef0e:	2401      	movs	r4, #1
1005ef10:	2600      	movs	r6, #0
1005ef12:	4622      	mov	r2, r4
1005ef14:	4633      	mov	r3, r6
1005ef16:	f002 f995 	bl	10061244 <aci_gap_pairing_complete_event_push_noinline>
1005ef1a:	4638      	mov	r0, r7
1005ef1c:	4621      	mov	r1, r4
1005ef1e:	f004 fbb9 	bl	10063694 <smp_pp3_pairing_completed_update_stats>
1005ef22:	8938      	ldrh	r0, [r7, #8]
1005ef24:	f7ff ff84 	bl	1005ee30 <smp_rxp_flush_packet_queues>
1005ef28:	4804      	ldr	r0, [pc, #16]	@ (1005ef3c <__arm_cp.3_0>)
1005ef2a:	6800      	ldr	r0, [r0, #0]
1005ef2c:	9901      	ldr	r1, [sp, #4]
1005ef2e:	5840      	ldr	r0, [r0, r1]
1005ef30:	1940      	adds	r0, r0, r5
1005ef32:	4631      	mov	r1, r6
1005ef34:	9a02      	ldr	r2, [sp, #8]
1005ef36:	f7f0 fc95 	bl	1004f864 <BLEPLAT_MemSet>
1005ef3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005ef3c <__arm_cp.3_0>:
1005ef3c:	20000f6c 	.word	0x20000f6c

1005ef40 <smp_timers_cb>:
1005ef40:	b580      	push	{r7, lr}
1005ef42:	2802      	cmp	r0, #2
1005ef44:	d802      	bhi.n	1005ef4c <smp_timers_cb+0xc>
1005ef46:	f005 fa57 	bl	100643f8 <smp_cmn_repeated_attacks_timer_cb>
1005ef4a:	bd80      	pop	{r7, pc}
1005ef4c:	4904      	ldr	r1, [pc, #16]	@ (1005ef60 <__arm_cp.4_0>)
1005ef4e:	7ac9      	ldrb	r1, [r1, #11]
1005ef50:	1cc9      	adds	r1, r1, #3
1005ef52:	4281      	cmp	r1, r0
1005ef54:	d903      	bls.n	1005ef5e <smp_timers_cb+0x1e>
1005ef56:	1ec0      	subs	r0, r0, #3
1005ef58:	b2c0      	uxtb	r0, r0
1005ef5a:	f7ff ffcb 	bl	1005eef4 <smp_timers_protocol_timeout_cb>
1005ef5e:	bd80      	pop	{r7, pc}

1005ef60 <__arm_cp.4_0>:
1005ef60:	20000f34 	.word	0x20000f34

1005ef64 <smp_init>:
1005ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ef66:	2029      	movs	r0, #41	@ 0x29
1005ef68:	00c1      	lsls	r1, r0, #3
1005ef6a:	2401      	movs	r4, #1
1005ef6c:	4d20      	ldr	r5, [pc, #128]	@ (1005eff0 <__arm_cp.0_0>)
1005ef6e:	4620      	mov	r0, r4
1005ef70:	47a8      	blx	r5
1005ef72:	4e20      	ldr	r6, [pc, #128]	@ (1005eff4 <__arm_cp.0_1>)
1005ef74:	6030      	str	r0, [r6, #0]
1005ef76:	4f20      	ldr	r7, [pc, #128]	@ (1005eff8 <__arm_cp.0_2>)
1005ef78:	7af8      	ldrb	r0, [r7, #11]
1005ef7a:	2170      	movs	r1, #112	@ 0x70
1005ef7c:	47a8      	blx	r5
1005ef7e:	6831      	ldr	r1, [r6, #0]
1005ef80:	22a4      	movs	r2, #164	@ 0xa4
1005ef82:	5088      	str	r0, [r1, r2]
1005ef84:	f005 f9c0 	bl	10064308 <smp_cmn_rejectlist_init>
1005ef88:	2128      	movs	r1, #40	@ 0x28
1005ef8a:	4620      	mov	r0, r4
1005ef8c:	47a8      	blx	r5
1005ef8e:	6831      	ldr	r1, [r6, #0]
1005ef90:	22ac      	movs	r2, #172	@ 0xac
1005ef92:	5088      	str	r0, [r1, r2]
1005ef94:	7af8      	ldrb	r0, [r7, #11]
1005ef96:	1cc0      	adds	r0, r0, #3
1005ef98:	b2c0      	uxtb	r0, r0
1005ef9a:	1c41      	adds	r1, r0, #1
1005ef9c:	4d17      	ldr	r5, [pc, #92]	@ (1005effc <__arm_cp.0_3>)
1005ef9e:	4628      	mov	r0, r5
1005efa0:	4622      	mov	r2, r4
1005efa2:	f7fe fefd 	bl	1005dda0 <csmem_mem_assign>
1005efa6:	6831      	ldr	r1, [r6, #0]
1005efa8:	6288      	str	r0, [r1, #40]	@ 0x28
1005efaa:	7af8      	ldrb	r0, [r7, #11]
1005efac:	1cc0      	adds	r0, r0, #3
1005efae:	b2c1      	uxtb	r1, r0
1005efb0:	2202      	movs	r2, #2
1005efb2:	4628      	mov	r0, r5
1005efb4:	f7fe fef4 	bl	1005dda0 <csmem_mem_assign>
1005efb8:	6831      	ldr	r1, [r6, #0]
1005efba:	62c8      	str	r0, [r1, #44]	@ 0x2c
1005efbc:	4608      	mov	r0, r1
1005efbe:	f000 fec9 	bl	1005fd54 <ACL_list_init>
1005efc2:	f7ff ff55 	bl	1005ee70 <smp_timer_init>
1005efc6:	6830      	ldr	r0, [r6, #0]
1005efc8:	2142      	movs	r1, #66	@ 0x42
1005efca:	2500      	movs	r5, #0
1005efcc:	5245      	strh	r5, [r0, r1]
1005efce:	2140      	movs	r1, #64	@ 0x40
1005efd0:	2203      	movs	r2, #3
1005efd2:	5442      	strb	r2, [r0, r1]
1005efd4:	490a      	ldr	r1, [pc, #40]	@ (1005f000 <__arm_cp.0_4>)
1005efd6:	6304      	str	r4, [r0, #48]	@ 0x30
1005efd8:	6341      	str	r1, [r0, #52]	@ 0x34
1005efda:	6385      	str	r5, [r0, #56]	@ 0x38
1005efdc:	3044      	adds	r0, #68	@ 0x44
1005efde:	2110      	movs	r1, #16
1005efe0:	462a      	mov	r2, r5
1005efe2:	f000 ffec 	bl	1005ffbe <HAL_Generate_Random_Bytes_To>
1005efe6:	4628      	mov	r0, r5
1005efe8:	f005 fb22 	bl	10064630 <smp_scp_init_ucfg_weak>
1005efec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005efee:	46c0      	nop			@ (mov r8, r8)

1005eff0 <__arm_cp.0_0>:
1005eff0:	1005ddc5 	.word	0x1005ddc5

1005eff4 <__arm_cp.0_1>:
1005eff4:	20000f6c 	.word	0x20000f6c

1005eff8 <__arm_cp.0_2>:
1005eff8:	20000f34 	.word	0x20000f34

1005effc <__arm_cp.0_3>:
1005effc:	20000f30 	.word	0x20000f30

1005f000 <__arm_cp.0_4>:
1005f000:	07071007 	.word	0x07071007

1005f004 <smp_sap_aci_set_io_capabilities>:
1005f004:	b510      	push	{r4, lr}
1005f006:	4604      	mov	r4, r0
1005f008:	f000 f80c 	bl	1005f024 <smp_check_is_any_pairing_ongoing>
1005f00c:	2800      	cmp	r0, #0
1005f00e:	d001      	beq.n	1005f014 <smp_sap_aci_set_io_capabilities+0x10>
1005f010:	200c      	movs	r0, #12
1005f012:	bd10      	pop	{r4, pc}
1005f014:	4802      	ldr	r0, [pc, #8]	@ (1005f020 <__arm_cp.2_0>)
1005f016:	6800      	ldr	r0, [r0, #0]
1005f018:	2140      	movs	r1, #64	@ 0x40
1005f01a:	5444      	strb	r4, [r0, r1]
1005f01c:	2000      	movs	r0, #0
1005f01e:	bd10      	pop	{r4, pc}

1005f020 <__arm_cp.2_0>:
1005f020:	20000f6c 	.word	0x20000f6c

1005f024 <smp_check_is_any_pairing_ongoing>:
1005f024:	b570      	push	{r4, r5, r6, lr}
1005f026:	4810      	ldr	r0, [pc, #64]	@ (1005f068 <__arm_cp.3_0>)
1005f028:	6800      	ldr	r0, [r0, #0]
1005f02a:	2134      	movs	r1, #52	@ 0x34
1005f02c:	5c40      	ldrb	r0, [r0, r1]
1005f02e:	2170      	movs	r1, #112	@ 0x70
1005f030:	4341      	muls	r1, r0
1005f032:	480e      	ldr	r0, [pc, #56]	@ (1005f06c <__arm_cp.3_1>)
1005f034:	6802      	ldr	r2, [r0, #0]
1005f036:	32a4      	adds	r2, #164	@ 0xa4
1005f038:	2000      	movs	r0, #0
1005f03a:	4603      	mov	r3, r0
1005f03c:	4299      	cmp	r1, r3
1005f03e:	d012      	beq.n	1005f066 <smp_check_is_any_pairing_ongoing+0x42>
1005f040:	6814      	ldr	r4, [r2, #0]
1005f042:	18e5      	adds	r5, r4, r3
1005f044:	7aac      	ldrb	r4, [r5, #10]
1005f046:	2660      	movs	r6, #96	@ 0x60
1005f048:	5dad      	ldrb	r5, [r5, r6]
1005f04a:	07ed      	lsls	r5, r5, #31
1005f04c:	d104      	bne.n	1005f058 <smp_check_is_any_pairing_ongoing+0x34>
1005f04e:	3460      	adds	r4, #96	@ 0x60
1005f050:	b2e4      	uxtb	r4, r4
1005f052:	2c51      	cmp	r4, #81	@ 0x51
1005f054:	d204      	bcs.n	1005f060 <smp_check_is_any_pairing_ongoing+0x3c>
1005f056:	e005      	b.n	1005f064 <smp_check_is_any_pairing_ongoing+0x40>
1005f058:	3450      	adds	r4, #80	@ 0x50
1005f05a:	b2e4      	uxtb	r4, r4
1005f05c:	2c41      	cmp	r4, #65	@ 0x41
1005f05e:	d301      	bcc.n	1005f064 <smp_check_is_any_pairing_ongoing+0x40>
1005f060:	3370      	adds	r3, #112	@ 0x70
1005f062:	e7eb      	b.n	1005f03c <smp_check_is_any_pairing_ongoing+0x18>
1005f064:	2001      	movs	r0, #1
1005f066:	bd70      	pop	{r4, r5, r6, pc}

1005f068 <__arm_cp.3_0>:
1005f068:	20000ecc 	.word	0x20000ecc

1005f06c <__arm_cp.3_1>:
1005f06c:	20000f6c 	.word	0x20000f6c

1005f070 <smp_sap_aci_set_authentication_req>:
1005f070:	b510      	push	{r4, lr}
1005f072:	4604      	mov	r4, r0
1005f074:	f7ff ffd6 	bl	1005f024 <smp_check_is_any_pairing_ongoing>
1005f078:	7861      	ldrb	r1, [r4, #1]
1005f07a:	2901      	cmp	r1, #1
1005f07c:	d103      	bne.n	1005f086 <smp_sap_aci_set_authentication_req+0x16>
1005f07e:	2800      	cmp	r0, #0
1005f080:	d105      	bne.n	1005f08e <smp_sap_aci_set_authentication_req+0x1e>
1005f082:	4602      	mov	r2, r0
1005f084:	e004      	b.n	1005f090 <smp_sap_aci_set_authentication_req+0x20>
1005f086:	2800      	cmp	r0, #0
1005f088:	d00f      	beq.n	1005f0aa <smp_sap_aci_set_authentication_req+0x3a>
1005f08a:	220c      	movs	r2, #12
1005f08c:	e016      	b.n	1005f0bc <smp_sap_aci_set_authentication_req+0x4c>
1005f08e:	220c      	movs	r2, #12
1005f090:	490b      	ldr	r1, [pc, #44]	@ (1005f0c0 <__arm_cp.4_0>)
1005f092:	6809      	ldr	r1, [r1, #0]
1005f094:	2340      	movs	r3, #64	@ 0x40
1005f096:	5ccb      	ldrb	r3, [r1, r3]
1005f098:	2b03      	cmp	r3, #3
1005f09a:	d101      	bne.n	1005f0a0 <smp_sap_aci_set_authentication_req+0x30>
1005f09c:	226e      	movs	r2, #110	@ 0x6e
1005f09e:	43d2      	mvns	r2, r2
1005f0a0:	2b03      	cmp	r3, #3
1005f0a2:	d00b      	beq.n	1005f0bc <smp_sap_aci_set_authentication_req+0x4c>
1005f0a4:	2800      	cmp	r0, #0
1005f0a6:	d002      	beq.n	1005f0ae <smp_sap_aci_set_authentication_req+0x3e>
1005f0a8:	e008      	b.n	1005f0bc <smp_sap_aci_set_authentication_req+0x4c>
1005f0aa:	4805      	ldr	r0, [pc, #20]	@ (1005f0c0 <__arm_cp.4_0>)
1005f0ac:	6801      	ldr	r1, [r0, #0]
1005f0ae:	3130      	adds	r1, #48	@ 0x30
1005f0b0:	2210      	movs	r2, #16
1005f0b2:	4608      	mov	r0, r1
1005f0b4:	4621      	mov	r1, r4
1005f0b6:	f7f0 fbc5 	bl	1004f844 <BLEPLAT_MemCpy>
1005f0ba:	2200      	movs	r2, #0
1005f0bc:	b2d0      	uxtb	r0, r2
1005f0be:	bd10      	pop	{r4, pc}

1005f0c0 <__arm_cp.4_0>:
1005f0c0:	20000f6c 	.word	0x20000f6c

1005f0c4 <smp_sap_aci_passkey_response>:
1005f0c4:	b510      	push	{r4, lr}
1005f0c6:	460c      	mov	r4, r1
1005f0c8:	f005 fa46 	bl	10064558 <smp_get_remote_device_list_item>
1005f0cc:	2800      	cmp	r0, #0
1005f0ce:	d010      	beq.n	1005f0f2 <smp_sap_aci_passkey_response+0x2e>
1005f0d0:	7cc1      	ldrb	r1, [r0, #19]
1005f0d2:	2902      	cmp	r1, #2
1005f0d4:	d10f      	bne.n	1005f0f6 <smp_sap_aci_passkey_response+0x32>
1005f0d6:	4909      	ldr	r1, [pc, #36]	@ (1005f0fc <__arm_cp.5_0>)
1005f0d8:	6809      	ldr	r1, [r1, #0]
1005f0da:	638c      	str	r4, [r1, #56]	@ 0x38
1005f0dc:	7bc1      	ldrb	r1, [r0, #15]
1005f0de:	2210      	movs	r2, #16
1005f0e0:	430a      	orrs	r2, r1
1005f0e2:	73c2      	strb	r2, [r0, #15]
1005f0e4:	200e      	movs	r0, #14
1005f0e6:	f000 fc43 	bl	1005f970 <tsk_notify_idx>
1005f0ea:	f7ef fdea 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005f0ee:	2000      	movs	r0, #0
1005f0f0:	bd10      	pop	{r4, pc}
1005f0f2:	2002      	movs	r0, #2
1005f0f4:	bd10      	pop	{r4, pc}
1005f0f6:	200c      	movs	r0, #12
1005f0f8:	bd10      	pop	{r4, pc}
1005f0fa:	46c0      	nop			@ (mov r8, r8)

1005f0fc <__arm_cp.5_0>:
1005f0fc:	20000f6c 	.word	0x20000f6c

1005f100 <smp_sap_hci_le_connection_complete_evt_hndl>:
1005f100:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f102:	b089      	sub	sp, #36	@ 0x24
1005f104:	9304      	str	r3, [sp, #16]
1005f106:	4615      	mov	r5, r2
1005f108:	9105      	str	r1, [sp, #20]
1005f10a:	4607      	mov	r7, r0
1005f10c:	ae06      	add	r6, sp, #24
1005f10e:	ac08      	add	r4, sp, #32
1005f110:	4630      	mov	r0, r6
1005f112:	4621      	mov	r1, r4
1005f114:	f7f4 fa28 	bl	10053568 <GAP_get_current_address>
1005f118:	7822      	ldrb	r2, [r4, #0]
1005f11a:	2000      	movs	r0, #0
1005f11c:	9500      	str	r5, [sp, #0]
1005f11e:	9904      	ldr	r1, [sp, #16]
1005f120:	9101      	str	r1, [sp, #4]
1005f122:	9002      	str	r0, [sp, #8]
1005f124:	4638      	mov	r0, r7
1005f126:	9905      	ldr	r1, [sp, #20]
1005f128:	4633      	mov	r3, r6
1005f12a:	f000 f803 	bl	1005f134 <smp_connection_complete_handler>
1005f12e:	b009      	add	sp, #36	@ 0x24
1005f130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005f134 <smp_connection_complete_handler>:
1005f134:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f136:	b087      	sub	sp, #28
1005f138:	9302      	str	r3, [sp, #8]
1005f13a:	9200      	str	r2, [sp, #0]
1005f13c:	9101      	str	r1, [sp, #4]
1005f13e:	493a      	ldr	r1, [pc, #232]	@ (1005f228 <__arm_cp.1_0>)
1005f140:	6809      	ldr	r1, [r1, #0]
1005f142:	2334      	movs	r3, #52	@ 0x34
1005f144:	5cca      	ldrb	r2, [r1, r3]
1005f146:	2770      	movs	r7, #112	@ 0x70
1005f148:	4357      	muls	r7, r2
1005f14a:	2500      	movs	r5, #0
1005f14c:	43ec      	mvns	r4, r5
1005f14e:	4b37      	ldr	r3, [pc, #220]	@ (1005f22c <__arm_cp.1_1>)
1005f150:	681e      	ldr	r6, [r3, #0]
1005f152:	36a4      	adds	r6, #164	@ 0xa4
1005f154:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005f156:	9106      	str	r1, [sp, #24]
1005f158:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005f15a:	9103      	str	r1, [sp, #12]
1005f15c:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005f15e:	9105      	str	r1, [sp, #20]
1005f160:	9404      	str	r4, [sp, #16]
1005f162:	42af      	cmp	r7, r5
1005f164:	d05e      	beq.n	1005f224 <smp_connection_complete_handler+0xf0>
1005f166:	6833      	ldr	r3, [r6, #0]
1005f168:	1959      	adds	r1, r3, r5
1005f16a:	8909      	ldrh	r1, [r1, #8]
1005f16c:	3570      	adds	r5, #112	@ 0x70
1005f16e:	1c64      	adds	r4, r4, #1
1005f170:	2900      	cmp	r1, #0
1005f172:	d1f6      	bne.n	1005f162 <smp_connection_complete_handler+0x2e>
1005f174:	4294      	cmp	r4, r2
1005f176:	d255      	bcs.n	1005f224 <smp_connection_complete_handler+0xf0>
1005f178:	195f      	adds	r7, r3, r5
1005f17a:	4639      	mov	r1, r7
1005f17c:	3968      	subs	r1, #104	@ 0x68
1005f17e:	8008      	strh	r0, [r1, #0]
1005f180:	4638      	mov	r0, r7
1005f182:	3870      	subs	r0, #112	@ 0x70
1005f184:	2105      	movs	r1, #5
1005f186:	7001      	strb	r1, [r0, #0]
1005f188:	4638      	mov	r0, r7
1005f18a:	380f      	subs	r0, #15
1005f18c:	9900      	ldr	r1, [sp, #0]
1005f18e:	7001      	strb	r1, [r0, #0]
1005f190:	4638      	mov	r0, r7
1005f192:	3810      	subs	r0, #16
1005f194:	9000      	str	r0, [sp, #0]
1005f196:	9901      	ldr	r1, [sp, #4]
1005f198:	7001      	strb	r1, [r0, #0]
1005f19a:	4638      	mov	r0, r7
1005f19c:	380e      	subs	r0, #14
1005f19e:	2206      	movs	r2, #6
1005f1a0:	4b23      	ldr	r3, [pc, #140]	@ (1005f230 <__arm_cp.1_2>)
1005f1a2:	9902      	ldr	r1, [sp, #8]
1005f1a4:	4616      	mov	r6, r2
1005f1a6:	4798      	blx	r3
1005f1a8:	20fe      	movs	r0, #254	@ 0xfe
1005f1aa:	9a06      	ldr	r2, [sp, #24]
1005f1ac:	4010      	ands	r0, r2
1005f1ae:	2101      	movs	r1, #1
1005f1b0:	400a      	ands	r2, r1
1005f1b2:	2802      	cmp	r0, #2
1005f1b4:	d000      	beq.n	1005f1b8 <smp_connection_complete_handler+0x84>
1005f1b6:	4611      	mov	r1, r2
1005f1b8:	9206      	str	r2, [sp, #24]
1005f1ba:	463c      	mov	r4, r7
1005f1bc:	3c6f      	subs	r4, #111	@ 0x6f
1005f1be:	7021      	strb	r1, [r4, #0]
1005f1c0:	2802      	cmp	r0, #2
1005f1c2:	9805      	ldr	r0, [sp, #20]
1005f1c4:	9903      	ldr	r1, [sp, #12]
1005f1c6:	d000      	beq.n	1005f1ca <smp_connection_complete_handler+0x96>
1005f1c8:	4601      	mov	r1, r0
1005f1ca:	463d      	mov	r5, r7
1005f1cc:	3d6e      	subs	r5, #110	@ 0x6e
1005f1ce:	4628      	mov	r0, r5
1005f1d0:	4632      	mov	r2, r6
1005f1d2:	4b17      	ldr	r3, [pc, #92]	@ (1005f230 <__arm_cp.1_2>)
1005f1d4:	4798      	blx	r3
1005f1d6:	4638      	mov	r0, r7
1005f1d8:	3817      	subs	r0, #23
1005f1da:	9906      	ldr	r1, [sp, #24]
1005f1dc:	7001      	strb	r1, [r0, #0]
1005f1de:	4638      	mov	r0, r7
1005f1e0:	3816      	subs	r0, #22
1005f1e2:	9905      	ldr	r1, [sp, #20]
1005f1e4:	4632      	mov	r2, r6
1005f1e6:	4b12      	ldr	r3, [pc, #72]	@ (1005f230 <__arm_cp.1_2>)
1005f1e8:	4798      	blx	r3
1005f1ea:	4638      	mov	r0, r7
1005f1ec:	3858      	subs	r0, #88	@ 0x58
1005f1ee:	2100      	movs	r1, #0
1005f1f0:	2204      	movs	r2, #4
1005f1f2:	f7f0 fb37 	bl	1004f864 <BLEPLAT_MemSet>
1005f1f6:	1f38      	subs	r0, r7, #4
1005f1f8:	3f66      	subs	r7, #102	@ 0x66
1005f1fa:	2110      	movs	r1, #16
1005f1fc:	7039      	strb	r1, [r7, #0]
1005f1fe:	9904      	ldr	r1, [sp, #16]
1005f200:	6001      	str	r1, [r0, #0]
1005f202:	7820      	ldrb	r0, [r4, #0]
1005f204:	4629      	mov	r1, r5
1005f206:	f005 f967 	bl	100644d8 <smp_cmn_is_peer_rejectlisted>
1005f20a:	2800      	cmp	r0, #0
1005f20c:	d005      	beq.n	1005f21a <smp_connection_complete_handler+0xe6>
1005f20e:	9800      	ldr	r0, [sp, #0]
1005f210:	7800      	ldrb	r0, [r0, #0]
1005f212:	07c0      	lsls	r0, r0, #31
1005f214:	d001      	beq.n	1005f21a <smp_connection_complete_handler+0xe6>
1005f216:	20fb      	movs	r0, #251	@ 0xfb
1005f218:	7038      	strb	r0, [r7, #0]
1005f21a:	200e      	movs	r0, #14
1005f21c:	f000 fba8 	bl	1005f970 <tsk_notify_idx>
1005f220:	f7ef fd4f 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005f224:	b007      	add	sp, #28
1005f226:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f228 <__arm_cp.1_0>:
1005f228:	20000ecc 	.word	0x20000ecc

1005f22c <__arm_cp.1_1>:
1005f22c:	20000f6c 	.word	0x20000f6c

1005f230 <__arm_cp.1_2>:
1005f230:	1004f845 	.word	0x1004f845

1005f234 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
1005f234:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f236:	b089      	sub	sp, #36	@ 0x24
1005f238:	9304      	str	r3, [sp, #16]
1005f23a:	4617      	mov	r7, r2
1005f23c:	9105      	str	r1, [sp, #20]
1005f23e:	4606      	mov	r6, r0
1005f240:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005f242:	4620      	mov	r0, r4
1005f244:	f7fe f8d0 	bl	1005d3e8 <Is_Address_Initialized>
1005f248:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005f24a:	2800      	cmp	r0, #0
1005f24c:	d008      	beq.n	1005f260 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
1005f24e:	a807      	add	r0, sp, #28
1005f250:	2206      	movs	r2, #6
1005f252:	4621      	mov	r1, r4
1005f254:	f7f0 faf6 	bl	1004f844 <BLEPLAT_MemCpy>
1005f258:	a806      	add	r0, sp, #24
1005f25a:	2201      	movs	r2, #1
1005f25c:	7002      	strb	r2, [r0, #0]
1005f25e:	e005      	b.n	1005f26c <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
1005f260:	a807      	add	r0, sp, #28
1005f262:	ac06      	add	r4, sp, #24
1005f264:	4621      	mov	r1, r4
1005f266:	f7f4 f97f 	bl	10053568 <GAP_get_current_address>
1005f26a:	7822      	ldrb	r2, [r4, #0]
1005f26c:	9700      	str	r7, [sp, #0]
1005f26e:	9804      	ldr	r0, [sp, #16]
1005f270:	9001      	str	r0, [sp, #4]
1005f272:	9502      	str	r5, [sp, #8]
1005f274:	ab07      	add	r3, sp, #28
1005f276:	4630      	mov	r0, r6
1005f278:	9905      	ldr	r1, [sp, #20]
1005f27a:	f7ff ff5b 	bl	1005f134 <smp_connection_complete_handler>
1005f27e:	b009      	add	sp, #36	@ 0x24
1005f280:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005f284 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
1005f284:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f286:	b089      	sub	sp, #36	@ 0x24
1005f288:	4615      	mov	r5, r2
1005f28a:	460e      	mov	r6, r1
1005f28c:	f005 f964 	bl	10064558 <smp_get_remote_device_list_item>
1005f290:	2800      	cmp	r0, #0
1005f292:	d070      	beq.n	1005f376 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
1005f294:	4604      	mov	r4, r0
1005f296:	7a80      	ldrb	r0, [r0, #10]
1005f298:	28bc      	cmp	r0, #188	@ 0xbc
1005f29a:	d106      	bne.n	1005f2aa <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
1005f29c:	8927      	ldrh	r7, [r4, #8]
1005f29e:	a808      	add	r0, sp, #32
1005f2a0:	2100      	movs	r1, #0
1005f2a2:	8001      	strh	r1, [r0, #0]
1005f2a4:	4626      	mov	r6, r4
1005f2a6:	3628      	adds	r6, #40	@ 0x28
1005f2a8:	e056      	b.n	1005f358 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
1005f2aa:	4627      	mov	r7, r4
1005f2ac:	3730      	adds	r7, #48	@ 0x30
1005f2ae:	7de1      	ldrb	r1, [r4, #23]
1005f2b0:	0709      	lsls	r1, r1, #28
1005f2b2:	d409      	bmi.n	1005f2c8 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
1005f2b4:	4620      	mov	r0, r4
1005f2b6:	3028      	adds	r0, #40	@ 0x28
1005f2b8:	2208      	movs	r2, #8
1005f2ba:	4631      	mov	r1, r6
1005f2bc:	f7f0 fac2 	bl	1004f844 <BLEPLAT_MemCpy>
1005f2c0:	703d      	strb	r5, [r7, #0]
1005f2c2:	0a28      	lsrs	r0, r5, #8
1005f2c4:	7078      	strb	r0, [r7, #1]
1005f2c6:	7aa0      	ldrb	r0, [r4, #10]
1005f2c8:	8921      	ldrh	r1, [r4, #8]
1005f2ca:	9102      	str	r1, [sp, #8]
1005f2cc:	a908      	add	r1, sp, #32
1005f2ce:	2200      	movs	r2, #0
1005f2d0:	800a      	strh	r2, [r1, #0]
1005f2d2:	4626      	mov	r6, r4
1005f2d4:	3628      	adds	r6, #40	@ 0x28
1005f2d6:	28bc      	cmp	r0, #188	@ 0xbc
1005f2d8:	d03d      	beq.n	1005f356 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
1005f2da:	4625      	mov	r5, r4
1005f2dc:	351c      	adds	r5, #28
1005f2de:	28f1      	cmp	r0, #241	@ 0xf1
1005f2e0:	d10f      	bne.n	1005f302 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
1005f2e2:	7de0      	ldrb	r0, [r4, #23]
1005f2e4:	0700      	lsls	r0, r0, #28
1005f2e6:	d436      	bmi.n	1005f356 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
1005f2e8:	aa07      	add	r2, sp, #28
1005f2ea:	9201      	str	r2, [sp, #4]
1005f2ec:	4628      	mov	r0, r5
1005f2ee:	4631      	mov	r1, r6
1005f2f0:	f7ff fa66 	bl	1005e7c0 <smp_sap_crt_generate_ediv>
1005f2f4:	2202      	movs	r2, #2
1005f2f6:	9801      	ldr	r0, [sp, #4]
1005f2f8:	4639      	mov	r1, r7
1005f2fa:	f7f0 fac3 	bl	1004f884 <BLEPLAT_MemCmp>
1005f2fe:	2800      	cmp	r0, #0
1005f300:	d021      	beq.n	1005f346 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
1005f302:	4638      	mov	r0, r7
1005f304:	4631      	mov	r1, r6
1005f306:	4622      	mov	r2, r4
1005f308:	f004 f949 	bl	1006359e <smp_dep_sdb_find_matching_ltk_read_record>
1005f30c:	2800      	cmp	r0, #0
1005f30e:	d01a      	beq.n	1005f346 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
1005f310:	9d02      	ldr	r5, [sp, #8]
1005f312:	4628      	mov	r0, r5
1005f314:	f7f7 fa09 	bl	1005672a <hci_le_long_term_key_request_negative_reply_api>
1005f318:	7e20      	ldrb	r0, [r4, #24]
1005f31a:	0780      	lsls	r0, r0, #30
1005f31c:	d00c      	beq.n	1005f338 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
1005f31e:	4628      	mov	r0, r5
1005f320:	f005 f8fa 	bl	10064518 <smp_get_remote_device_list_index>
1005f324:	4602      	mov	r2, r0
1005f326:	2001      	movs	r0, #1
1005f328:	2100      	movs	r1, #0
1005f32a:	4b15      	ldr	r3, [pc, #84]	@ (1005f380 <__arm_cp.3_1>)
1005f32c:	f7ff fdbc 	bl	1005eea8 <smp_timer_reset>
1005f330:	7e20      	ldrb	r0, [r4, #24]
1005f332:	21fc      	movs	r1, #252	@ 0xfc
1005f334:	4001      	ands	r1, r0
1005f336:	7621      	strb	r1, [r4, #24]
1005f338:	2002      	movs	r0, #2
1005f33a:	2203      	movs	r2, #3
1005f33c:	2300      	movs	r3, #0
1005f33e:	4629      	mov	r1, r5
1005f340:	f001 ff80 	bl	10061244 <aci_gap_pairing_complete_event_push_noinline>
1005f344:	e017      	b.n	1005f376 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
1005f346:	480d      	ldr	r0, [pc, #52]	@ (1005f37c <__arm_cp.3_0>)
1005f348:	6800      	ldr	r0, [r0, #0]
1005f34a:	3008      	adds	r0, #8
1005f34c:	aa08      	add	r2, sp, #32
1005f34e:	4629      	mov	r1, r5
1005f350:	4633      	mov	r3, r6
1005f352:	f7ff fa6b 	bl	1005e82c <smp_crt_diversify>
1005f356:	9f02      	ldr	r7, [sp, #8]
1005f358:	ad03      	add	r5, sp, #12
1005f35a:	2100      	movs	r1, #0
1005f35c:	2210      	movs	r2, #16
1005f35e:	4628      	mov	r0, r5
1005f360:	f7f0 fa80 	bl	1004f864 <BLEPLAT_MemSet>
1005f364:	7c22      	ldrb	r2, [r4, #16]
1005f366:	4628      	mov	r0, r5
1005f368:	4631      	mov	r1, r6
1005f36a:	f7f0 fa6b 	bl	1004f844 <BLEPLAT_MemCpy>
1005f36e:	4638      	mov	r0, r7
1005f370:	4629      	mov	r1, r5
1005f372:	f7f7 f9cb 	bl	1005670c <hci_le_long_term_key_request_reply_api>
1005f376:	b009      	add	sp, #36	@ 0x24
1005f378:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f37a:	46c0      	nop			@ (mov r8, r8)

1005f37c <__arm_cp.3_0>:
1005f37c:	20000ecc 	.word	0x20000ecc

1005f380 <__arm_cp.3_1>:
1005f380:	00007530 	.word	0x00007530

1005f384 <smp_sap_hci_encryption_change_evt_hndl>:
1005f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f386:	460e      	mov	r6, r1
1005f388:	4605      	mov	r5, r0
1005f38a:	4610      	mov	r0, r2
1005f38c:	f005 f8e4 	bl	10064558 <smp_get_remote_device_list_item>
1005f390:	2800      	cmp	r0, #0
1005f392:	d056      	beq.n	1005f442 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
1005f394:	4604      	mov	r4, r0
1005f396:	4607      	mov	r7, r0
1005f398:	2e00      	cmp	r6, #0
1005f39a:	d00b      	beq.n	1005f3b4 <smp_sap_hci_encryption_change_evt_hndl+0x30>
1005f39c:	2000      	movs	r0, #0
1005f39e:	72b8      	strb	r0, [r7, #10]
1005f3a0:	3408      	adds	r4, #8
1005f3a2:	2201      	movs	r2, #1
1005f3a4:	2d06      	cmp	r5, #6
1005f3a6:	d132      	bne.n	1005f40e <smp_sap_hci_encryption_change_evt_hndl+0x8a>
1005f3a8:	8939      	ldrh	r1, [r7, #8]
1005f3aa:	4615      	mov	r5, r2
1005f3ac:	2e06      	cmp	r6, #6
1005f3ae:	d00e      	beq.n	1005f3ce <smp_sap_hci_encryption_change_evt_hndl+0x4a>
1005f3b0:	2205      	movs	r2, #5
1005f3b2:	e00d      	b.n	1005f3d0 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
1005f3b4:	7af9      	ldrb	r1, [r7, #11]
1005f3b6:	2001      	movs	r0, #1
1005f3b8:	4308      	orrs	r0, r1
1005f3ba:	72f8      	strb	r0, [r7, #11]
1005f3bc:	7cf9      	ldrb	r1, [r7, #19]
1005f3be:	1e89      	subs	r1, r1, #2
1005f3c0:	2902      	cmp	r1, #2
1005f3c2:	d810      	bhi.n	1005f3e6 <smp_sap_hci_encryption_change_evt_hndl+0x62>
1005f3c4:	7df9      	ldrb	r1, [r7, #23]
1005f3c6:	0709      	lsls	r1, r1, #28
1005f3c8:	d508      	bpl.n	1005f3dc <smp_sap_hci_encryption_change_evt_hndl+0x58>
1005f3ca:	2104      	movs	r1, #4
1005f3cc:	e007      	b.n	1005f3de <smp_sap_hci_encryption_change_evt_hndl+0x5a>
1005f3ce:	2204      	movs	r2, #4
1005f3d0:	2002      	movs	r0, #2
1005f3d2:	2300      	movs	r3, #0
1005f3d4:	f001 ff36 	bl	10061244 <aci_gap_pairing_complete_event_push_noinline>
1005f3d8:	462a      	mov	r2, r5
1005f3da:	e018      	b.n	1005f40e <smp_sap_hci_encryption_change_evt_hndl+0x8a>
1005f3dc:	2102      	movs	r1, #2
1005f3de:	22f9      	movs	r2, #249	@ 0xf9
1005f3e0:	4010      	ands	r0, r2
1005f3e2:	1840      	adds	r0, r0, r1
1005f3e4:	72f8      	strb	r0, [r7, #11]
1005f3e6:	7ab8      	ldrb	r0, [r7, #10]
1005f3e8:	28ad      	cmp	r0, #173	@ 0xad
1005f3ea:	d005      	beq.n	1005f3f8 <smp_sap_hci_encryption_change_evt_hndl+0x74>
1005f3ec:	28ae      	cmp	r0, #174	@ 0xae
1005f3ee:	d005      	beq.n	1005f3fc <smp_sap_hci_encryption_change_evt_hndl+0x78>
1005f3f0:	28bc      	cmp	r0, #188	@ 0xbc
1005f3f2:	d127      	bne.n	1005f444 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
1005f3f4:	20bf      	movs	r0, #191	@ 0xbf
1005f3f6:	e002      	b.n	1005f3fe <smp_sap_hci_encryption_change_evt_hndl+0x7a>
1005f3f8:	20af      	movs	r0, #175	@ 0xaf
1005f3fa:	e000      	b.n	1005f3fe <smp_sap_hci_encryption_change_evt_hndl+0x7a>
1005f3fc:	20f0      	movs	r0, #240	@ 0xf0
1005f3fe:	72b8      	strb	r0, [r7, #10]
1005f400:	3408      	adds	r4, #8
1005f402:	200e      	movs	r0, #14
1005f404:	f000 fab4 	bl	1005f970 <tsk_notify_idx>
1005f408:	f7ef fc5b 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005f40c:	2200      	movs	r2, #0
1005f40e:	2060      	movs	r0, #96	@ 0x60
1005f410:	5c38      	ldrb	r0, [r7, r0]
1005f412:	07c0      	lsls	r0, r0, #31
1005f414:	d10b      	bne.n	1005f42e <smp_sap_hci_encryption_change_evt_hndl+0xaa>
1005f416:	7eb8      	ldrb	r0, [r7, #26]
1005f418:	06c1      	lsls	r1, r0, #27
1005f41a:	d505      	bpl.n	1005f428 <smp_sap_hci_encryption_change_evt_hndl+0xa4>
1005f41c:	21ef      	movs	r1, #239	@ 0xef
1005f41e:	4001      	ands	r1, r0
1005f420:	76b9      	strb	r1, [r7, #26]
1005f422:	b241      	sxtb	r1, r0
1005f424:	2900      	cmp	r1, #0
1005f426:	d418      	bmi.n	1005f45a <smp_sap_hci_encryption_change_evt_hndl+0xd6>
1005f428:	2a00      	cmp	r2, #0
1005f42a:	d119      	bne.n	1005f460 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
1005f42c:	e009      	b.n	1005f442 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
1005f42e:	7e38      	ldrb	r0, [r7, #24]
1005f430:	21fc      	movs	r1, #252	@ 0xfc
1005f432:	4001      	ands	r1, r0
1005f434:	7639      	strb	r1, [r7, #24]
1005f436:	2103      	movs	r1, #3
1005f438:	4001      	ands	r1, r0
1005f43a:	1e48      	subs	r0, r1, #1
1005f43c:	4181      	sbcs	r1, r0
1005f43e:	430a      	orrs	r2, r1
1005f440:	d10e      	bne.n	1005f460 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
1005f442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f444:	2d06      	cmp	r5, #6
1005f446:	d1db      	bne.n	1005f400 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1005f448:	28f1      	cmp	r0, #241	@ 0xf1
1005f44a:	d1d9      	bne.n	1005f400 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1005f44c:	8939      	ldrh	r1, [r7, #8]
1005f44e:	2002      	movs	r0, #2
1005f450:	2200      	movs	r2, #0
1005f452:	4613      	mov	r3, r2
1005f454:	f001 fef6 	bl	10061244 <aci_gap_pairing_complete_event_push_noinline>
1005f458:	e7d2      	b.n	1005f400 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1005f45a:	216f      	movs	r1, #111	@ 0x6f
1005f45c:	4008      	ands	r0, r1
1005f45e:	76b8      	strb	r0, [r7, #26]
1005f460:	8820      	ldrh	r0, [r4, #0]
1005f462:	f005 f859 	bl	10064518 <smp_get_remote_device_list_index>
1005f466:	4602      	mov	r2, r0
1005f468:	2001      	movs	r0, #1
1005f46a:	2100      	movs	r1, #0
1005f46c:	4b01      	ldr	r3, [pc, #4]	@ (1005f474 <__arm_cp.4_0>)
1005f46e:	f7ff fd1b 	bl	1005eea8 <smp_timer_reset>
1005f472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f474 <__arm_cp.4_0>:
1005f474:	00007530 	.word	0x00007530

1005f478 <smp_sap_hci_disconnection_complete_evt_hndl>:
1005f478:	b510      	push	{r4, lr}
1005f47a:	f005 f86d 	bl	10064558 <smp_get_remote_device_list_item>
1005f47e:	2800      	cmp	r0, #0
1005f480:	d025      	beq.n	1005f4ce <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
1005f482:	4604      	mov	r4, r0
1005f484:	8900      	ldrh	r0, [r0, #8]
1005f486:	f005 f847 	bl	10064518 <smp_get_remote_device_list_index>
1005f48a:	4602      	mov	r2, r0
1005f48c:	2001      	movs	r0, #1
1005f48e:	2100      	movs	r1, #0
1005f490:	4b0f      	ldr	r3, [pc, #60]	@ (1005f4d0 <__arm_cp.5_0>)
1005f492:	f7ff fd09 	bl	1005eea8 <smp_timer_reset>
1005f496:	8920      	ldrh	r0, [r4, #8]
1005f498:	f7ff fcca 	bl	1005ee30 <smp_rxp_flush_packet_queues>
1005f49c:	2060      	movs	r0, #96	@ 0x60
1005f49e:	5c20      	ldrb	r0, [r4, r0]
1005f4a0:	07c0      	lsls	r0, r0, #31
1005f4a2:	7aa0      	ldrb	r0, [r4, #10]
1005f4a4:	d104      	bne.n	1005f4b0 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
1005f4a6:	3060      	adds	r0, #96	@ 0x60
1005f4a8:	b2c0      	uxtb	r0, r0
1005f4aa:	2851      	cmp	r0, #81	@ 0x51
1005f4ac:	d304      	bcc.n	1005f4b8 <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
1005f4ae:	e007      	b.n	1005f4c0 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
1005f4b0:	3050      	adds	r0, #80	@ 0x50
1005f4b2:	b2c0      	uxtb	r0, r0
1005f4b4:	2840      	cmp	r0, #64	@ 0x40
1005f4b6:	d803      	bhi.n	1005f4c0 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
1005f4b8:	2102      	movs	r1, #2
1005f4ba:	4620      	mov	r0, r4
1005f4bc:	f004 f8ea 	bl	10063694 <smp_pp3_pairing_completed_update_stats>
1005f4c0:	20fe      	movs	r0, #254	@ 0xfe
1005f4c2:	72a0      	strb	r0, [r4, #10]
1005f4c4:	200e      	movs	r0, #14
1005f4c6:	f000 fa53 	bl	1005f970 <tsk_notify_idx>
1005f4ca:	f7ef fbfa 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005f4ce:	bd10      	pop	{r4, pc}

1005f4d0 <__arm_cp.5_0>:
1005f4d0:	00007530 	.word	0x00007530

1005f4d4 <smp_sap_scp_force_debug_key_usage>:
1005f4d4:	b5b0      	push	{r4, r5, r7, lr}
1005f4d6:	4605      	mov	r5, r0
1005f4d8:	2400      	movs	r4, #0
1005f4da:	4620      	mov	r0, r4
1005f4dc:	f005 f888 	bl	100645f0 <smp_scp_is_another_sc_pairing_ongoing>
1005f4e0:	2800      	cmp	r0, #0
1005f4e2:	d001      	beq.n	1005f4e8 <smp_sap_scp_force_debug_key_usage+0x14>
1005f4e4:	240c      	movs	r4, #12
1005f4e6:	e004      	b.n	1005f4f2 <smp_sap_scp_force_debug_key_usage+0x1e>
1005f4e8:	2d01      	cmp	r5, #1
1005f4ea:	d102      	bne.n	1005f4f2 <smp_sap_scp_force_debug_key_usage+0x1e>
1005f4ec:	2001      	movs	r0, #1
1005f4ee:	f005 f89f 	bl	10064630 <smp_scp_init_ucfg_weak>
1005f4f2:	4620      	mov	r0, r4
1005f4f4:	bdb0      	pop	{r4, r5, r7, pc}

1005f4f6 <secure_connections_csr_ucfg_weak>:
1005f4f6:	2000      	movs	r0, #0
1005f4f8:	4770      	bx	lr

1005f4fa <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>:
1005f4fa:	4770      	bx	lr

1005f4fc <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>:
1005f4fc:	4770      	bx	lr
	...

1005f500 <smp_sap_l2c_acl_data_hndl>:
1005f500:	b5b0      	push	{r4, r5, r7, lr}
1005f502:	460c      	mov	r4, r1
1005f504:	4605      	mov	r5, r0
1005f506:	8808      	ldrh	r0, [r1, #0]
1005f508:	f005 f826 	bl	10064558 <smp_get_remote_device_list_item>
1005f50c:	2800      	cmp	r0, #0
1005f50e:	d025      	beq.n	1005f55c <smp_sap_l2c_acl_data_hndl+0x5c>
1005f510:	2d00      	cmp	r5, #0
1005f512:	d00f      	beq.n	1005f534 <smp_sap_l2c_acl_data_hndl+0x34>
1005f514:	2d01      	cmp	r5, #1
1005f516:	d121      	bne.n	1005f55c <smp_sap_l2c_acl_data_hndl+0x5c>
1005f518:	8860      	ldrh	r0, [r4, #2]
1005f51a:	2841      	cmp	r0, #65	@ 0x41
1005f51c:	d81e      	bhi.n	1005f55c <smp_sap_l2c_acl_data_hndl+0x5c>
1005f51e:	4812      	ldr	r0, [pc, #72]	@ (1005f568 <__arm_cp.0_0>)
1005f520:	6800      	ldr	r0, [r0, #0]
1005f522:	4621      	mov	r1, r4
1005f524:	f000 fc1a 	bl	1005fd5c <ACL_list_insert_tail>
1005f528:	200f      	movs	r0, #15
1005f52a:	f000 fa21 	bl	1005f970 <tsk_notify_idx>
1005f52e:	f7ef fbc8 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1005f532:	e016      	b.n	1005f562 <smp_sap_l2c_acl_data_hndl+0x62>
1005f534:	6861      	ldr	r1, [r4, #4]
1005f536:	7a09      	ldrb	r1, [r1, #8]
1005f538:	290b      	cmp	r1, #11
1005f53a:	d109      	bne.n	1005f550 <smp_sap_l2c_acl_data_hndl+0x50>
1005f53c:	7e01      	ldrb	r1, [r0, #24]
1005f53e:	2203      	movs	r2, #3
1005f540:	400a      	ands	r2, r1
1005f542:	2a01      	cmp	r2, #1
1005f544:	d10a      	bne.n	1005f55c <smp_sap_l2c_acl_data_hndl+0x5c>
1005f546:	22fc      	movs	r2, #252	@ 0xfc
1005f548:	4011      	ands	r1, r2
1005f54a:	1c89      	adds	r1, r1, #2
1005f54c:	7601      	strb	r1, [r0, #24]
1005f54e:	e005      	b.n	1005f55c <smp_sap_l2c_acl_data_hndl+0x5c>
1005f550:	1f8a      	subs	r2, r1, #6
1005f552:	b2d2      	uxtb	r2, r2
1005f554:	2a04      	cmp	r2, #4
1005f556:	d801      	bhi.n	1005f55c <smp_sap_l2c_acl_data_hndl+0x5c>
1005f558:	f004 fe0c 	bl	10064174 <smp_pp3_keys_distribution_signaling_ack>
1005f55c:	4620      	mov	r0, r4
1005f55e:	f7f2 fd09 	bl	10051f74 <ACL_pkt_release>
1005f562:	2000      	movs	r0, #0
1005f564:	bdb0      	pop	{r4, r5, r7, pc}
1005f566:	46c0      	nop			@ (mov r8, r8)

1005f568 <__arm_cp.0_0>:
1005f568:	20000f6c 	.word	0x20000f6c

1005f56c <smp_get_sec_level_for_mode1>:
1005f56c:	b510      	push	{r4, lr}
1005f56e:	7ac3      	ldrb	r3, [r0, #11]
1005f570:	075c      	lsls	r4, r3, #29
1005f572:	0fa2      	lsrs	r2, r4, #30
1005f574:	d009      	beq.n	1005f58a <smp_get_sec_level_for_mode1+0x1e>
1005f576:	2201      	movs	r2, #1
1005f578:	4013      	ands	r3, r2
1005f57a:	425a      	negs	r2, r3
1005f57c:	415a      	adcs	r2, r3
1005f57e:	7c03      	ldrb	r3, [r0, #16]
1005f580:	2003      	movs	r0, #3
1005f582:	2b10      	cmp	r3, #16
1005f584:	d009      	beq.n	1005f59a <smp_get_sec_level_for_mode1+0x2e>
1005f586:	4603      	mov	r3, r0
1005f588:	e008      	b.n	1005f59c <smp_get_sec_level_for_mode1+0x30>
1005f58a:	07da      	lsls	r2, r3, #31
1005f58c:	d10a      	bne.n	1005f5a4 <smp_get_sec_level_for_mode1+0x38>
1005f58e:	7a80      	ldrb	r0, [r0, #10]
1005f590:	2201      	movs	r2, #1
1005f592:	28f1      	cmp	r0, #241	@ 0xf1
1005f594:	d009      	beq.n	1005f5aa <smp_get_sec_level_for_mode1+0x3e>
1005f596:	4613      	mov	r3, r2
1005f598:	e008      	b.n	1005f5ac <smp_get_sec_level_for_mode1+0x40>
1005f59a:	2304      	movs	r3, #4
1005f59c:	2c00      	cmp	r4, #0
1005f59e:	d405      	bmi.n	1005f5ac <smp_get_sec_level_for_mode1+0x40>
1005f5a0:	4603      	mov	r3, r0
1005f5a2:	e003      	b.n	1005f5ac <smp_get_sec_level_for_mode1+0x40>
1005f5a4:	2302      	movs	r3, #2
1005f5a6:	2200      	movs	r2, #0
1005f5a8:	e000      	b.n	1005f5ac <smp_get_sec_level_for_mode1+0x40>
1005f5aa:	2302      	movs	r3, #2
1005f5ac:	2a00      	cmp	r2, #0
1005f5ae:	d101      	bne.n	1005f5b4 <smp_get_sec_level_for_mode1+0x48>
1005f5b0:	4618      	mov	r0, r3
1005f5b2:	e000      	b.n	1005f5b6 <smp_get_sec_level_for_mode1+0x4a>
1005f5b4:	2001      	movs	r0, #1
1005f5b6:	2900      	cmp	r1, #0
1005f5b8:	d000      	beq.n	1005f5bc <smp_get_sec_level_for_mode1+0x50>
1005f5ba:	4618      	mov	r0, r3
1005f5bc:	bd10      	pop	{r4, pc}

1005f5be <smp_sap_get_security_level>:
1005f5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f5c0:	461c      	mov	r4, r3
1005f5c2:	4616      	mov	r6, r2
1005f5c4:	460d      	mov	r5, r1
1005f5c6:	2100      	movs	r1, #0
1005f5c8:	7029      	strb	r1, [r5, #0]
1005f5ca:	7011      	strb	r1, [r2, #0]
1005f5cc:	7019      	strb	r1, [r3, #0]
1005f5ce:	f004 ffc3 	bl	10064558 <smp_get_remote_device_list_item>
1005f5d2:	2800      	cmp	r0, #0
1005f5d4:	d017      	beq.n	1005f606 <smp_sap_get_security_level+0x48>
1005f5d6:	4607      	mov	r7, r0
1005f5d8:	2101      	movs	r1, #1
1005f5da:	7029      	strb	r1, [r5, #0]
1005f5dc:	7a80      	ldrb	r0, [r0, #10]
1005f5de:	28f1      	cmp	r0, #241	@ 0xf1
1005f5e0:	d110      	bne.n	1005f604 <smp_sap_get_security_level+0x46>
1005f5e2:	9100      	str	r1, [sp, #0]
1005f5e4:	2100      	movs	r1, #0
1005f5e6:	4638      	mov	r0, r7
1005f5e8:	f7ff ffc0 	bl	1005f56c <smp_get_sec_level_for_mode1>
1005f5ec:	7030      	strb	r0, [r6, #0]
1005f5ee:	2801      	cmp	r0, #1
1005f5f0:	d109      	bne.n	1005f606 <smp_sap_get_security_level+0x48>
1005f5f2:	2002      	movs	r0, #2
1005f5f4:	7028      	strb	r0, [r5, #0]
1005f5f6:	7af9      	ldrb	r1, [r7, #11]
1005f5f8:	0749      	lsls	r1, r1, #29
1005f5fa:	0f89      	lsrs	r1, r1, #30
1005f5fc:	d100      	bne.n	1005f600 <smp_sap_get_security_level+0x42>
1005f5fe:	9800      	ldr	r0, [sp, #0]
1005f600:	7020      	strb	r0, [r4, #0]
1005f602:	e000      	b.n	1005f606 <smp_sap_get_security_level+0x48>
1005f604:	7031      	strb	r1, [r6, #0]
1005f606:	2000      	movs	r0, #0
1005f608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f60a <smp_sap_get_remote_address_check_addr_type>:
1005f60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f60c:	461c      	mov	r4, r3
1005f60e:	4615      	mov	r5, r2
1005f610:	460f      	mov	r7, r1
1005f612:	f004 ffa1 	bl	10064558 <smp_get_remote_device_list_item>
1005f616:	2800      	cmp	r0, #0
1005f618:	d016      	beq.n	1005f648 <smp_sap_get_remote_address_check_addr_type+0x3e>
1005f61a:	4606      	mov	r6, r0
1005f61c:	1c81      	adds	r1, r0, #2
1005f61e:	2206      	movs	r2, #6
1005f620:	4628      	mov	r0, r5
1005f622:	f7f0 f90f 	bl	1004f844 <BLEPLAT_MemCpy>
1005f626:	7870      	ldrb	r0, [r6, #1]
1005f628:	4669      	mov	r1, sp
1005f62a:	7008      	strb	r0, [r1, #0]
1005f62c:	2f00      	cmp	r7, #0
1005f62e:	d01f      	beq.n	1005f670 <smp_sap_get_remote_address_check_addr_type+0x66>
1005f630:	2800      	cmp	r0, #0
1005f632:	d01d      	beq.n	1005f670 <smp_sap_get_remote_address_check_addr_type+0x66>
1005f634:	2801      	cmp	r0, #1
1005f636:	d109      	bne.n	1005f64c <smp_sap_get_remote_address_check_addr_type+0x42>
1005f638:	79f1      	ldrb	r1, [r6, #7]
1005f63a:	098a      	lsrs	r2, r1, #6
1005f63c:	2001      	movs	r0, #1
1005f63e:	2a02      	cmp	r2, #2
1005f640:	d816      	bhi.n	1005f670 <smp_sap_get_remote_address_check_addr_type+0x66>
1005f642:	2940      	cmp	r1, #64	@ 0x40
1005f644:	d203      	bcs.n	1005f64e <smp_sap_get_remote_address_check_addr_type+0x44>
1005f646:	e013      	b.n	1005f670 <smp_sap_get_remote_address_check_addr_type+0x66>
1005f648:	2002      	movs	r0, #2
1005f64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f64c:	79f1      	ldrb	r1, [r6, #7]
1005f64e:	20c0      	movs	r0, #192	@ 0xc0
1005f650:	4008      	ands	r0, r1
1005f652:	2840      	cmp	r0, #64	@ 0x40
1005f654:	d108      	bne.n	1005f668 <smp_sap_get_remote_address_check_addr_type+0x5e>
1005f656:	4669      	mov	r1, sp
1005f658:	4630      	mov	r0, r6
1005f65a:	462a      	mov	r2, r5
1005f65c:	f003 ff88 	bl	10063570 <smp_dep_sdb_find_bonding_record_read_address>
1005f660:	2800      	cmp	r0, #0
1005f662:	d003      	beq.n	1005f66c <smp_sap_get_remote_address_check_addr_type+0x62>
1005f664:	2081      	movs	r0, #129	@ 0x81
1005f666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f668:	2086      	movs	r0, #134	@ 0x86
1005f66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f66c:	4668      	mov	r0, sp
1005f66e:	7800      	ldrb	r0, [r0, #0]
1005f670:	7020      	strb	r0, [r4, #0]
1005f672:	2000      	movs	r0, #0
1005f674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f676 <smp_sap_check_is_peer_device_bonded>:
1005f676:	b5b0      	push	{r4, r5, r7, lr}
1005f678:	f004 ff6e 	bl	10064558 <smp_get_remote_device_list_item>
1005f67c:	2800      	cmp	r0, #0
1005f67e:	d011      	beq.n	1005f6a4 <smp_sap_check_is_peer_device_bonded+0x2e>
1005f680:	4604      	mov	r4, r0
1005f682:	2500      	movs	r5, #0
1005f684:	4629      	mov	r1, r5
1005f686:	f003 ff1b 	bl	100634c0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
1005f68a:	2800      	cmp	r0, #0
1005f68c:	d00b      	beq.n	1005f6a6 <smp_sap_check_is_peer_device_bonded+0x30>
1005f68e:	7aa1      	ldrb	r1, [r4, #10]
1005f690:	29f1      	cmp	r1, #241	@ 0xf1
1005f692:	d105      	bne.n	1005f6a0 <smp_sap_check_is_peer_device_bonded+0x2a>
1005f694:	7ba1      	ldrb	r1, [r4, #14]
1005f696:	07ca      	lsls	r2, r1, #31
1005f698:	d002      	beq.n	1005f6a0 <smp_sap_check_is_peer_device_bonded+0x2a>
1005f69a:	0789      	lsls	r1, r1, #30
1005f69c:	d500      	bpl.n	1005f6a0 <smp_sap_check_is_peer_device_bonded+0x2a>
1005f69e:	2000      	movs	r0, #0
1005f6a0:	4605      	mov	r5, r0
1005f6a2:	e000      	b.n	1005f6a6 <smp_sap_check_is_peer_device_bonded+0x30>
1005f6a4:	2502      	movs	r5, #2
1005f6a6:	4628      	mov	r0, r5
1005f6a8:	bdb0      	pop	{r4, r5, r7, pc}

1005f6aa <smp_sap_check_encryption_key_size>:
1005f6aa:	b510      	push	{r4, lr}
1005f6ac:	460c      	mov	r4, r1
1005f6ae:	f004 ff53 	bl	10064558 <smp_get_remote_device_list_item>
1005f6b2:	2800      	cmp	r0, #0
1005f6b4:	d005      	beq.n	1005f6c2 <smp_sap_check_encryption_key_size+0x18>
1005f6b6:	7a81      	ldrb	r1, [r0, #10]
1005f6b8:	29f1      	cmp	r1, #241	@ 0xf1
1005f6ba:	d102      	bne.n	1005f6c2 <smp_sap_check_encryption_key_size+0x18>
1005f6bc:	7c00      	ldrb	r0, [r0, #16]
1005f6be:	42a0      	cmp	r0, r4
1005f6c0:	d201      	bcs.n	1005f6c6 <smp_sap_check_encryption_key_size+0x1c>
1005f6c2:	20b6      	movs	r0, #182	@ 0xb6
1005f6c4:	bd10      	pop	{r4, pc}
1005f6c6:	2000      	movs	r0, #0
1005f6c8:	bd10      	pop	{r4, pc}

1005f6ca <smp_sap_forget_device_upon_disconnection>:
1005f6ca:	b580      	push	{r7, lr}
1005f6cc:	f004 ff44 	bl	10064558 <smp_get_remote_device_list_item>
1005f6d0:	2800      	cmp	r0, #0
1005f6d2:	d006      	beq.n	1005f6e2 <smp_sap_forget_device_upon_disconnection+0x18>
1005f6d4:	2160      	movs	r1, #96	@ 0x60
1005f6d6:	5c42      	ldrb	r2, [r0, r1]
1005f6d8:	2380      	movs	r3, #128	@ 0x80
1005f6da:	4313      	orrs	r3, r2
1005f6dc:	5443      	strb	r3, [r0, r1]
1005f6de:	2000      	movs	r0, #0
1005f6e0:	bd80      	pop	{r7, pc}
1005f6e2:	2081      	movs	r0, #129	@ 0x81
1005f6e4:	bd80      	pop	{r7, pc}

1005f6e6 <smp_sap_sm2_packet_data_signing_compute>:
1005f6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f6e8:	b089      	sub	sp, #36	@ 0x24
1005f6ea:	460e      	mov	r6, r1
1005f6ec:	f004 ff34 	bl	10064558 <smp_get_remote_device_list_item>
1005f6f0:	2800      	cmp	r0, #0
1005f6f2:	d025      	beq.n	1005f740 <smp_sap_sm2_packet_data_signing_compute+0x5a>
1005f6f4:	4605      	mov	r5, r0
1005f6f6:	301c      	adds	r0, #28
1005f6f8:	a905      	add	r1, sp, #20
1005f6fa:	9100      	str	r1, [sp, #0]
1005f6fc:	f7ff f92c 	bl	1005e958 <smp_crt_generate_csrk>
1005f700:	8874      	ldrh	r4, [r6, #2]
1005f702:	462b      	mov	r3, r5
1005f704:	3368      	adds	r3, #104	@ 0x68
1005f706:	1d27      	adds	r7, r4, #4
1005f708:	b2b9      	uxth	r1, r7
1005f70a:	2204      	movs	r2, #4
1005f70c:	4630      	mov	r0, r6
1005f70e:	f7f2 fc6f 	bl	10051ff0 <ACL_pkt_write>
1005f712:	b2fa      	uxtb	r2, r7
1005f714:	af01      	add	r7, sp, #4
1005f716:	9800      	ldr	r0, [sp, #0]
1005f718:	4631      	mov	r1, r6
1005f71a:	463b      	mov	r3, r7
1005f71c:	f7ff f92a 	bl	1005e974 <smp_crt_generate_cmac_tag>
1005f720:	3708      	adds	r7, #8
1005f722:	4620      	mov	r0, r4
1005f724:	3008      	adds	r0, #8
1005f726:	b281      	uxth	r1, r0
1005f728:	2208      	movs	r2, #8
1005f72a:	4630      	mov	r0, r6
1005f72c:	463b      	mov	r3, r7
1005f72e:	f7f2 fc5f 	bl	10051ff0 <ACL_pkt_write>
1005f732:	340c      	adds	r4, #12
1005f734:	8074      	strh	r4, [r6, #2]
1005f736:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
1005f738:	1c40      	adds	r0, r0, #1
1005f73a:	66a8      	str	r0, [r5, #104]	@ 0x68
1005f73c:	2000      	movs	r0, #0
1005f73e:	e000      	b.n	1005f742 <smp_sap_sm2_packet_data_signing_compute+0x5c>
1005f740:	2002      	movs	r0, #2
1005f742:	b009      	add	sp, #36	@ 0x24
1005f744:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f746 <smp_sap_sm2_packet_data_signing_validate>:
1005f746:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f748:	b08d      	sub	sp, #52	@ 0x34
1005f74a:	460d      	mov	r5, r1
1005f74c:	884f      	ldrh	r7, [r1, #2]
1005f74e:	f004 ff03 	bl	10064558 <smp_get_remote_device_list_item>
1005f752:	2800      	cmp	r0, #0
1005f754:	d005      	beq.n	1005f762 <smp_sap_sm2_packet_data_signing_validate+0x1c>
1005f756:	4604      	mov	r4, r0
1005f758:	7c40      	ldrb	r0, [r0, #17]
1005f75a:	0640      	lsls	r0, r0, #25
1005f75c:	d403      	bmi.n	1005f766 <smp_sap_sm2_packet_data_signing_validate+0x20>
1005f75e:	20b1      	movs	r0, #177	@ 0xb1
1005f760:	e034      	b.n	1005f7cc <smp_sap_sm2_packet_data_signing_validate+0x86>
1005f762:	2002      	movs	r0, #2
1005f764:	e032      	b.n	1005f7cc <smp_sap_sm2_packet_data_signing_validate+0x86>
1005f766:	4621      	mov	r1, r4
1005f768:	3148      	adds	r1, #72	@ 0x48
1005f76a:	a805      	add	r0, sp, #20
1005f76c:	2210      	movs	r2, #16
1005f76e:	f7f0 f869 	bl	1004f844 <BLEPLAT_MemCpy>
1005f772:	3f08      	subs	r7, #8
1005f774:	b2b9      	uxth	r1, r7
1005f776:	220c      	movs	r2, #12
1005f778:	ae02      	add	r6, sp, #8
1005f77a:	4628      	mov	r0, r5
1005f77c:	4633      	mov	r3, r6
1005f77e:	f7f2 fc15 	bl	10051fac <ACL_pkt_read>
1005f782:	7830      	ldrb	r0, [r6, #0]
1005f784:	7871      	ldrb	r1, [r6, #1]
1005f786:	0209      	lsls	r1, r1, #8
1005f788:	1808      	adds	r0, r1, r0
1005f78a:	78b1      	ldrb	r1, [r6, #2]
1005f78c:	0409      	lsls	r1, r1, #16
1005f78e:	1840      	adds	r0, r0, r1
1005f790:	78f1      	ldrb	r1, [r6, #3]
1005f792:	0609      	lsls	r1, r1, #24
1005f794:	1841      	adds	r1, r0, r1
1005f796:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
1005f798:	4281      	cmp	r1, r0
1005f79a:	d801      	bhi.n	1005f7a0 <smp_sap_sm2_packet_data_signing_validate+0x5a>
1005f79c:	1c40      	adds	r0, r0, #1
1005f79e:	d110      	bne.n	1005f7c2 <smp_sap_sm2_packet_data_signing_validate+0x7c>
1005f7a0:	9101      	str	r1, [sp, #4]
1005f7a2:	b2fa      	uxtb	r2, r7
1005f7a4:	a805      	add	r0, sp, #20
1005f7a6:	ae09      	add	r6, sp, #36	@ 0x24
1005f7a8:	4629      	mov	r1, r5
1005f7aa:	4633      	mov	r3, r6
1005f7ac:	f7ff f8e2 	bl	1005e974 <smp_crt_generate_cmac_tag>
1005f7b0:	a802      	add	r0, sp, #8
1005f7b2:	1d00      	adds	r0, r0, #4
1005f7b4:	3608      	adds	r6, #8
1005f7b6:	2208      	movs	r2, #8
1005f7b8:	4631      	mov	r1, r6
1005f7ba:	f7f0 f863 	bl	1004f884 <BLEPLAT_MemCmp>
1005f7be:	2800      	cmp	r0, #0
1005f7c0:	d001      	beq.n	1005f7c6 <smp_sap_sm2_packet_data_signing_validate+0x80>
1005f7c2:	2005      	movs	r0, #5
1005f7c4:	e002      	b.n	1005f7cc <smp_sap_sm2_packet_data_signing_validate+0x86>
1005f7c6:	9801      	ldr	r0, [sp, #4]
1005f7c8:	66e0      	str	r0, [r4, #108]	@ 0x6c
1005f7ca:	2000      	movs	r0, #0
1005f7cc:	b00d      	add	sp, #52	@ 0x34
1005f7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f7d0 <nvm_gatt_db_read_init>:
1005f7d0:	4801      	ldr	r0, [pc, #4]	@ (1005f7d8 <__arm_cp.0_0>)
1005f7d2:	2100      	movs	r1, #0
1005f7d4:	7001      	strb	r1, [r0, #0]
1005f7d6:	4770      	bx	lr

1005f7d8 <__arm_cp.0_0>:
1005f7d8:	20000f70 	.word	0x20000f70

1005f7dc <nvm_gatt_db_read_next_record>:
1005f7dc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f7de:	4603      	mov	r3, r0
1005f7e0:	4d06      	ldr	r5, [pc, #24]	@ (1005f7fc <__arm_cp.1_0>)
1005f7e2:	7828      	ldrb	r0, [r5, #0]
1005f7e4:	210c      	movs	r1, #12
1005f7e6:	9100      	str	r1, [sp, #0]
1005f7e8:	2401      	movs	r4, #1
1005f7ea:	2200      	movs	r2, #0
1005f7ec:	4621      	mov	r1, r4
1005f7ee:	f7ef ff61 	bl	1004f6b4 <BLEPLAT_NvmGet>
1005f7f2:	702c      	strb	r4, [r5, #0]
1005f7f4:	f000 f804 	bl	1005f800 <nvm_convert_bleplat_to_blestack_status>
1005f7f8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f7fa:	46c0      	nop			@ (mov r8, r8)

1005f7fc <__arm_cp.1_0>:
1005f7fc:	20000f70 	.word	0x20000f70

1005f800 <nvm_convert_bleplat_to_blestack_status>:
1005f800:	1cc0      	adds	r0, r0, #3
1005f802:	b2c0      	uxtb	r0, r0
1005f804:	2804      	cmp	r0, #4
1005f806:	d302      	bcc.n	1005f80e <nvm_convert_bleplat_to_blestack_status+0xe>
1005f808:	207e      	movs	r0, #126	@ 0x7e
1005f80a:	43c0      	mvns	r0, r0
1005f80c:	e002      	b.n	1005f814 <nvm_convert_bleplat_to_blestack_status+0x14>
1005f80e:	00c1      	lsls	r1, r0, #3
1005f810:	4801      	ldr	r0, [pc, #4]	@ (1005f818 <__arm_cp.2_0>)
1005f812:	40c8      	lsrs	r0, r1
1005f814:	b2c0      	uxtb	r0, r0
1005f816:	4770      	bx	lr

1005f818 <__arm_cp.2_0>:
1005f818:	00b4b7b3 	.word	0x00b4b7b3

1005f81c <nvm_gatt_db_read_full_current_record>:
1005f81c:	b5e0      	push	{r5, r6, r7, lr}
1005f81e:	4603      	mov	r3, r0
1005f820:	9100      	str	r1, [sp, #0]
1005f822:	2002      	movs	r0, #2
1005f824:	2101      	movs	r1, #1
1005f826:	220c      	movs	r2, #12
1005f828:	f7ef ff44 	bl	1004f6b4 <BLEPLAT_NvmGet>
1005f82c:	f7ff ffe8 	bl	1005f800 <nvm_convert_bleplat_to_blestack_status>
1005f830:	bd8c      	pop	{r2, r3, r7, pc}

1005f832 <nvm_gatt_db_update_record>:
1005f832:	b5e0      	push	{r5, r6, r7, lr}
1005f834:	460b      	mov	r3, r1
1005f836:	4601      	mov	r1, r0
1005f838:	8900      	ldrh	r0, [r0, #8]
1005f83a:	9000      	str	r0, [sp, #0]
1005f83c:	2001      	movs	r0, #1
1005f83e:	220c      	movs	r2, #12
1005f840:	f7ef feea 	bl	1004f618 <BLEPLAT_NvmAdd>
1005f844:	f7ff ffdc 	bl	1005f800 <nvm_convert_bleplat_to_blestack_status>
1005f848:	bd8c      	pop	{r2, r3, r7, pc}
	...

1005f84c <nvm_sec_db_read_init>:
1005f84c:	4801      	ldr	r0, [pc, #4]	@ (1005f854 <__arm_cp.5_0>)
1005f84e:	2100      	movs	r1, #0
1005f850:	7001      	strb	r1, [r0, #0]
1005f852:	4770      	bx	lr

1005f854 <__arm_cp.5_0>:
1005f854:	20000f71 	.word	0x20000f71

1005f858 <nvm_sec_db_read_next_record>:
1005f858:	b51c      	push	{r2, r3, r4, lr}
1005f85a:	4603      	mov	r3, r0
1005f85c:	4c06      	ldr	r4, [pc, #24]	@ (1005f878 <__arm_cp.6_0>)
1005f85e:	7820      	ldrb	r0, [r4, #0]
1005f860:	2150      	movs	r1, #80	@ 0x50
1005f862:	9100      	str	r1, [sp, #0]
1005f864:	2100      	movs	r1, #0
1005f866:	460a      	mov	r2, r1
1005f868:	f7ef ff24 	bl	1004f6b4 <BLEPLAT_NvmGet>
1005f86c:	2101      	movs	r1, #1
1005f86e:	7021      	strb	r1, [r4, #0]
1005f870:	f7ff ffc6 	bl	1005f800 <nvm_convert_bleplat_to_blestack_status>
1005f874:	bd1c      	pop	{r2, r3, r4, pc}
1005f876:	46c0      	nop			@ (mov r8, r8)

1005f878 <__arm_cp.6_0>:
1005f878:	20000f71 	.word	0x20000f71

1005f87c <nvm_sec_db_add_record>:
1005f87c:	b5e0      	push	{r5, r6, r7, lr}
1005f87e:	4601      	mov	r1, r0
1005f880:	2000      	movs	r0, #0
1005f882:	9000      	str	r0, [sp, #0]
1005f884:	2250      	movs	r2, #80	@ 0x50
1005f886:	4603      	mov	r3, r0
1005f888:	f7ef fec6 	bl	1004f618 <BLEPLAT_NvmAdd>
1005f88c:	f7ff ffb8 	bl	1005f800 <nvm_convert_bleplat_to_blestack_status>
1005f890:	bd8c      	pop	{r2, r3, r7, pc}

1005f892 <nvm_sec_db_get_record_count>:
1005f892:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f894:	2400      	movs	r4, #0
1005f896:	4621      	mov	r1, r4
1005f898:	4620      	mov	r0, r4
1005f89a:	460d      	mov	r5, r1
1005f89c:	9400      	str	r4, [sp, #0]
1005f89e:	b2c0      	uxtb	r0, r0
1005f8a0:	4621      	mov	r1, r4
1005f8a2:	4622      	mov	r2, r4
1005f8a4:	4623      	mov	r3, r4
1005f8a6:	f7ef ff05 	bl	1004f6b4 <BLEPLAT_NvmGet>
1005f8aa:	1cc2      	adds	r2, r0, #3
1005f8ac:	1c69      	adds	r1, r5, #1
1005f8ae:	2001      	movs	r0, #1
1005f8b0:	2a00      	cmp	r2, #0
1005f8b2:	d1f2      	bne.n	1005f89a <nvm_sec_db_get_record_count+0x8>
1005f8b4:	b2e8      	uxtb	r0, r5
1005f8b6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005f8b8 <nvm_discard_current_record>:
1005f8b8:	b580      	push	{r7, lr}
1005f8ba:	2002      	movs	r0, #2
1005f8bc:	f7ef ff9c 	bl	1004f7f8 <BLEPLAT_NvmDiscard>
1005f8c0:	bd80      	pop	{r7, pc}

1005f8c2 <nvm_dev_id_data_get_record>:
1005f8c2:	b5e0      	push	{r5, r6, r7, lr}
1005f8c4:	4603      	mov	r3, r0
1005f8c6:	2026      	movs	r0, #38	@ 0x26
1005f8c8:	9000      	str	r0, [sp, #0]
1005f8ca:	2102      	movs	r1, #2
1005f8cc:	2000      	movs	r0, #0
1005f8ce:	4602      	mov	r2, r0
1005f8d0:	f7ef fef0 	bl	1004f6b4 <BLEPLAT_NvmGet>
1005f8d4:	2800      	cmp	r0, #0
1005f8d6:	d000      	beq.n	1005f8da <nvm_dev_id_data_get_record+0x18>
1005f8d8:	2081      	movs	r0, #129	@ 0x81
1005f8da:	bd8c      	pop	{r2, r3, r7, pc}

1005f8dc <nvm_dev_id_data_add_record>:
1005f8dc:	b5e0      	push	{r5, r6, r7, lr}
1005f8de:	4601      	mov	r1, r0
1005f8e0:	2300      	movs	r3, #0
1005f8e2:	9300      	str	r3, [sp, #0]
1005f8e4:	2002      	movs	r0, #2
1005f8e6:	2226      	movs	r2, #38	@ 0x26
1005f8e8:	f7ef fe96 	bl	1004f618 <BLEPLAT_NvmAdd>
1005f8ec:	2800      	cmp	r0, #0
1005f8ee:	d000      	beq.n	1005f8f2 <nvm_dev_id_data_add_record+0x16>
1005f8f0:	2081      	movs	r0, #129	@ 0x81
1005f8f2:	bd8c      	pop	{r2, r3, r7, pc}

1005f8f4 <tsk_init>:
1005f8f4:	4803      	ldr	r0, [pc, #12]	@ (1005f904 <__arm_cp.0_0>)
1005f8f6:	6800      	ldr	r0, [r0, #0]
1005f8f8:	2100      	movs	r1, #0
1005f8fa:	6081      	str	r1, [r0, #8]
1005f8fc:	60c1      	str	r1, [r0, #12]
1005f8fe:	6101      	str	r1, [r0, #16]
1005f900:	6001      	str	r1, [r0, #0]
1005f902:	4770      	bx	lr

1005f904 <__arm_cp.0_0>:
1005f904:	20000f74 	.word	0x20000f74

1005f908 <tsk_scheduler>:
1005f908:	b570      	push	{r4, r5, r6, lr}
1005f90a:	4d17      	ldr	r5, [pc, #92]	@ (1005f968 <__arm_cp.1_0>)
1005f90c:	6828      	ldr	r0, [r5, #0]
1005f90e:	f3ef 8110 	mrs	r1, PRIMASK
1005f912:	b672      	cpsid	i
1005f914:	6801      	ldr	r1, [r0, #0]
1005f916:	2600      	movs	r6, #0
1005f918:	6006      	str	r6, [r0, #0]
1005f91a:	6842      	ldr	r2, [r0, #4]
1005f91c:	430a      	orrs	r2, r1
1005f91e:	6042      	str	r2, [r0, #4]
1005f920:	b662      	cpsie	i
1005f922:	682c      	ldr	r4, [r5, #0]
1005f924:	3410      	adds	r4, #16
1005f926:	6820      	ldr	r0, [r4, #0]
1005f928:	2800      	cmp	r0, #0
1005f92a:	d00f      	beq.n	1005f94c <tsk_scheduler+0x44>
1005f92c:	4620      	mov	r0, r4
1005f92e:	f000 f85b 	bl	1005f9e8 <lsbit>
1005f932:	0080      	lsls	r0, r0, #2
1005f934:	6829      	ldr	r1, [r5, #0]
1005f936:	1808      	adds	r0, r1, r0
1005f938:	f3ef 8210 	mrs	r2, PRIMASK
1005f93c:	b672      	cpsid	i
1005f93e:	6882      	ldr	r2, [r0, #8]
1005f940:	6086      	str	r6, [r0, #8]
1005f942:	6848      	ldr	r0, [r1, #4]
1005f944:	4310      	orrs	r0, r2
1005f946:	6048      	str	r0, [r1, #4]
1005f948:	b662      	cpsie	i
1005f94a:	e7ec      	b.n	1005f926 <tsk_scheduler+0x1e>
1005f94c:	6828      	ldr	r0, [r5, #0]
1005f94e:	1d04      	adds	r4, r0, #4
1005f950:	4d06      	ldr	r5, [pc, #24]	@ (1005f96c <__arm_cp.1_1>)
1005f952:	6820      	ldr	r0, [r4, #0]
1005f954:	2800      	cmp	r0, #0
1005f956:	d006      	beq.n	1005f966 <tsk_scheduler+0x5e>
1005f958:	4620      	mov	r0, r4
1005f95a:	f000 f845 	bl	1005f9e8 <lsbit>
1005f95e:	0081      	lsls	r1, r0, #2
1005f960:	5869      	ldr	r1, [r5, r1]
1005f962:	4788      	blx	r1
1005f964:	e7f5      	b.n	1005f952 <tsk_scheduler+0x4a>
1005f966:	bd70      	pop	{r4, r5, r6, pc}

1005f968 <__arm_cp.1_0>:
1005f968:	20000f74 	.word	0x20000f74

1005f96c <__arm_cp.1_1>:
1005f96c:	10066164 	.word	0x10066164

1005f970 <tsk_notify_idx>:
1005f970:	211f      	movs	r1, #31
1005f972:	4001      	ands	r1, r0
1005f974:	2201      	movs	r2, #1
1005f976:	408a      	lsls	r2, r1
1005f978:	f3ef 8110 	mrs	r1, PRIMASK
1005f97c:	b672      	cpsid	i
1005f97e:	4904      	ldr	r1, [pc, #16]	@ (1005f990 <__arm_cp.3_0>)
1005f980:	6809      	ldr	r1, [r1, #0]
1005f982:	0940      	lsrs	r0, r0, #5
1005f984:	0080      	lsls	r0, r0, #2
1005f986:	580b      	ldr	r3, [r1, r0]
1005f988:	4313      	orrs	r3, r2
1005f98a:	500b      	str	r3, [r1, r0]
1005f98c:	b662      	cpsie	i
1005f98e:	4770      	bx	lr

1005f990 <__arm_cp.3_0>:
1005f990:	20000f74 	.word	0x20000f74

1005f994 <tsk_wait_resource_idx>:
1005f994:	221f      	movs	r2, #31
1005f996:	4002      	ands	r2, r0
1005f998:	2301      	movs	r3, #1
1005f99a:	4093      	lsls	r3, r2
1005f99c:	f3ef 8210 	mrs	r2, PRIMASK
1005f9a0:	b672      	cpsid	i
1005f9a2:	0089      	lsls	r1, r1, #2
1005f9a4:	4a05      	ldr	r2, [pc, #20]	@ (1005f9bc <__arm_cp.4_0>)
1005f9a6:	6812      	ldr	r2, [r2, #0]
1005f9a8:	1851      	adds	r1, r2, r1
1005f9aa:	0940      	lsrs	r0, r0, #5
1005f9ac:	0080      	lsls	r0, r0, #2
1005f9ae:	1808      	adds	r0, r1, r0
1005f9b0:	6881      	ldr	r1, [r0, #8]
1005f9b2:	4319      	orrs	r1, r3
1005f9b4:	6081      	str	r1, [r0, #8]
1005f9b6:	b662      	cpsie	i
1005f9b8:	4770      	bx	lr
1005f9ba:	46c0      	nop			@ (mov r8, r8)

1005f9bc <__arm_cp.4_0>:
1005f9bc:	20000f74 	.word	0x20000f74

1005f9c0 <tsk_signal_resource_idx>:
1005f9c0:	211f      	movs	r1, #31
1005f9c2:	4001      	ands	r1, r0
1005f9c4:	2201      	movs	r2, #1
1005f9c6:	408a      	lsls	r2, r1
1005f9c8:	f3ef 8110 	mrs	r1, PRIMASK
1005f9cc:	b672      	cpsid	i
1005f9ce:	4905      	ldr	r1, [pc, #20]	@ (1005f9e4 <__arm_cp.5_0>)
1005f9d0:	6809      	ldr	r1, [r1, #0]
1005f9d2:	0940      	lsrs	r0, r0, #5
1005f9d4:	0080      	lsls	r0, r0, #2
1005f9d6:	1808      	adds	r0, r1, r0
1005f9d8:	6901      	ldr	r1, [r0, #16]
1005f9da:	4311      	orrs	r1, r2
1005f9dc:	6101      	str	r1, [r0, #16]
1005f9de:	b662      	cpsie	i
1005f9e0:	4770      	bx	lr
1005f9e2:	46c0      	nop			@ (mov r8, r8)

1005f9e4 <__arm_cp.5_0>:
1005f9e4:	20000f74 	.word	0x20000f74

1005f9e8 <lsbit>:
1005f9e8:	f3ef 8110 	mrs	r1, PRIMASK
1005f9ec:	b672      	cpsid	i
1005f9ee:	6801      	ldr	r1, [r0, #0]
1005f9f0:	424a      	negs	r2, r1
1005f9f2:	400a      	ands	r2, r1
1005f9f4:	4051      	eors	r1, r2
1005f9f6:	6001      	str	r1, [r0, #0]
1005f9f8:	4803      	ldr	r0, [pc, #12]	@ (1005fa08 <__arm_cp.7_0>)
1005f9fa:	4350      	muls	r0, r2
1005f9fc:	0ec0      	lsrs	r0, r0, #27
1005f9fe:	a103      	add	r1, pc, #12	@ (adr r1, 1005fa0c <__arm_cp.7_0+0x4>)
1005fa00:	5c08      	ldrb	r0, [r1, r0]
1005fa02:	b662      	cpsie	i
1005fa04:	4770      	bx	lr
1005fa06:	46c0      	nop			@ (mov r8, r8)

1005fa08 <__arm_cp.7_0>:
1005fa08:	04653adf 	.word	0x04653adf
1005fa0c:	06020100 	.word	0x06020100
1005fa10:	10070b03 	.word	0x10070b03
1005fa14:	150c0e04 	.word	0x150c0e04
1005fa18:	1a111708 	.word	0x1a111708
1005fa1c:	0f0a051f 	.word	0x0f0a051f
1005fa20:	1916140d 	.word	0x1916140d
1005fa24:	1813091e 	.word	0x1813091e
1005fa28:	1b1c121d 	.word	0x1b1c121d

1005fa2c <CST_init>:
1005fa2c:	b510      	push	{r4, lr}
1005fa2e:	2412      	movs	r4, #18
1005fa30:	2800      	cmp	r0, #0
1005fa32:	d00e      	beq.n	1005fa52 <CST_init+0x26>
1005fa34:	2a00      	cmp	r2, #0
1005fa36:	d00c      	beq.n	1005fa52 <CST_init+0x26>
1005fa38:	2b0b      	cmp	r3, #11
1005fa3a:	d80a      	bhi.n	1005fa52 <CST_init+0x26>
1005fa3c:	7041      	strb	r1, [r0, #1]
1005fa3e:	7003      	strb	r3, [r0, #0]
1005fa40:	6a03      	ldr	r3, [r0, #32]
1005fa42:	5459      	strb	r1, [r3, r1]
1005fa44:	1e49      	subs	r1, r1, #1
1005fa46:	1c4b      	adds	r3, r1, #1
1005fa48:	d3fa      	bcc.n	1005fa40 <CST_init+0x14>
1005fa4a:	6102      	str	r2, [r0, #16]
1005fa4c:	2400      	movs	r4, #0
1005fa4e:	7504      	strb	r4, [r0, #20]
1005fa50:	61c0      	str	r0, [r0, #28]
1005fa52:	4620      	mov	r0, r4
1005fa54:	bd10      	pop	{r4, pc}

1005fa56 <CST_stop>:
1005fa56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fa58:	4605      	mov	r5, r0
1005fa5a:	2012      	movs	r0, #18
1005fa5c:	2d00      	cmp	r5, #0
1005fa5e:	d01b      	beq.n	1005fa98 <CST_stop+0x42>
1005fa60:	460c      	mov	r4, r1
1005fa62:	786a      	ldrb	r2, [r5, #1]
1005fa64:	428a      	cmp	r2, r1
1005fa66:	d917      	bls.n	1005fa98 <CST_stop+0x42>
1005fa68:	6a2b      	ldr	r3, [r5, #32]
1005fa6a:	5d19      	ldrb	r1, [r3, r4]
1005fa6c:	42a1      	cmp	r1, r4
1005fa6e:	d101      	bne.n	1005fa74 <CST_stop+0x1e>
1005fa70:	2000      	movs	r0, #0
1005fa72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005fa74:	4617      	mov	r7, r2
1005fa76:	463e      	mov	r6, r7
1005fa78:	5ddf      	ldrb	r7, [r3, r7]
1005fa7a:	4297      	cmp	r7, r2
1005fa7c:	d001      	beq.n	1005fa82 <CST_stop+0x2c>
1005fa7e:	42a7      	cmp	r7, r4
1005fa80:	d1f9      	bne.n	1005fa76 <CST_stop+0x20>
1005fa82:	2000      	movs	r0, #0
1005fa84:	4297      	cmp	r7, r2
1005fa86:	d005      	beq.n	1005fa94 <CST_stop+0x3e>
1005fa88:	5599      	strb	r1, [r3, r6]
1005fa8a:	4296      	cmp	r6, r2
1005fa8c:	d102      	bne.n	1005fa94 <CST_stop+0x3e>
1005fa8e:	4628      	mov	r0, r5
1005fa90:	f000 f803 	bl	1005fa9a <Timer_TryStartFirstActive>
1005fa94:	6a29      	ldr	r1, [r5, #32]
1005fa96:	550c      	strb	r4, [r1, r4]
1005fa98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005fa9a <Timer_TryStartFirstActive>:
1005fa9a:	b510      	push	{r4, lr}
1005fa9c:	7842      	ldrb	r2, [r0, #1]
1005fa9e:	428a      	cmp	r2, r1
1005faa0:	d107      	bne.n	1005fab2 <Timer_TryStartFirstActive+0x18>
1005faa2:	7d01      	ldrb	r1, [r0, #20]
1005faa4:	2400      	movs	r4, #0
1005faa6:	2900      	cmp	r1, #0
1005faa8:	d009      	beq.n	1005fabe <Timer_TryStartFirstActive+0x24>
1005faaa:	3008      	adds	r0, #8
1005faac:	f7ef ffb0 	bl	1004fa10 <BLEPLAT_StopTimer>
1005fab0:	e005      	b.n	1005fabe <Timer_TryStartFirstActive+0x24>
1005fab2:	0049      	lsls	r1, r1, #1
1005fab4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1005fab6:	5e51      	ldrsh	r1, [r2, r1]
1005fab8:	f000 f86a 	bl	1005fb90 <Timer_StartFirstActive_sysT>
1005fabc:	4604      	mov	r4, r0
1005fabe:	4620      	mov	r0, r4
1005fac0:	bd10      	pop	{r4, pc}

1005fac2 <CST_start>:
1005fac2:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fac4:	b085      	sub	sp, #20
1005fac6:	2612      	movs	r6, #18
1005fac8:	2800      	cmp	r0, #0
1005faca:	d05e      	beq.n	1005fb8a <CST_start+0xc8>
1005facc:	461f      	mov	r7, r3
1005face:	460d      	mov	r5, r1
1005fad0:	4604      	mov	r4, r0
1005fad2:	7843      	ldrb	r3, [r0, #1]
1005fad4:	428b      	cmp	r3, r1
1005fad6:	d958      	bls.n	1005fb8a <CST_start+0xc8>
1005fad8:	7820      	ldrb	r0, [r4, #0]
1005fada:	2105      	movs	r1, #5
1005fadc:	0309      	lsls	r1, r1, #12
1005fade:	4081      	lsls	r1, r0
1005fae0:	428f      	cmp	r7, r1
1005fae2:	d852      	bhi.n	1005fb8a <CST_start+0xc8>
1005fae4:	9204      	str	r2, [sp, #16]
1005fae6:	9302      	str	r3, [sp, #8]
1005fae8:	f7ef ff77 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005faec:	4602      	mov	r2, r0
1005faee:	7823      	ldrb	r3, [r4, #0]
1005faf0:	6a20      	ldr	r0, [r4, #32]
1005faf2:	5d40      	ldrb	r0, [r0, r5]
1005faf4:	42a8      	cmp	r0, r5
1005faf6:	d00c      	beq.n	1005fb12 <CST_start+0x50>
1005faf8:	9804      	ldr	r0, [sp, #16]
1005fafa:	2800      	cmp	r0, #0
1005fafc:	d045      	beq.n	1005fb8a <CST_start+0xc8>
1005fafe:	4620      	mov	r0, r4
1005fb00:	9103      	str	r1, [sp, #12]
1005fb02:	4629      	mov	r1, r5
1005fb04:	9304      	str	r3, [sp, #16]
1005fb06:	4616      	mov	r6, r2
1005fb08:	f7ff ffa5 	bl	1005fa56 <CST_stop>
1005fb0c:	9903      	ldr	r1, [sp, #12]
1005fb0e:	4632      	mov	r2, r6
1005fb10:	9b04      	ldr	r3, [sp, #16]
1005fb12:	2033      	movs	r0, #51	@ 0x33
1005fb14:	4378      	muls	r0, r7
1005fb16:	460e      	mov	r6, r1
1005fb18:	0a01      	lsrs	r1, r0, #8
1005fb1a:	1808      	adds	r0, r1, r0
1005fb1c:	0c01      	lsrs	r1, r0, #16
1005fb1e:	1808      	adds	r0, r1, r0
1005fb20:	0771      	lsls	r1, r6, #29
1005fb22:	08d2      	lsrs	r2, r2, #3
1005fb24:	1851      	adds	r1, r2, r1
1005fb26:	1842      	adds	r2, r0, r1
1005fb28:	1d58      	adds	r0, r3, #5
1005fb2a:	b2c0      	uxtb	r0, r0
1005fb2c:	40c2      	lsrs	r2, r0
1005fb2e:	9501      	str	r5, [sp, #4]
1005fb30:	0068      	lsls	r0, r5, #1
1005fb32:	6a61      	ldr	r1, [r4, #36]	@ 0x24
1005fb34:	9204      	str	r2, [sp, #16]
1005fb36:	520a      	strh	r2, [r1, r0]
1005fb38:	f7ef ff4f 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005fb3c:	08c0      	lsrs	r0, r0, #3
1005fb3e:	9003      	str	r0, [sp, #12]
1005fb40:	7862      	ldrb	r2, [r4, #1]
1005fb42:	6a20      	ldr	r0, [r4, #32]
1005fb44:	4617      	mov	r7, r2
1005fb46:	463b      	mov	r3, r7
1005fb48:	5dc7      	ldrb	r7, [r0, r7]
1005fb4a:	4297      	cmp	r7, r2
1005fb4c:	d00d      	beq.n	1005fb6a <CST_start+0xa8>
1005fb4e:	007d      	lsls	r5, r7, #1
1005fb50:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1005fb52:	5b75      	ldrh	r5, [r6, r5]
1005fb54:	7826      	ldrb	r6, [r4, #0]
1005fb56:	1d76      	adds	r6, r6, #5
1005fb58:	9903      	ldr	r1, [sp, #12]
1005fb5a:	40f1      	lsrs	r1, r6
1005fb5c:	1a6d      	subs	r5, r5, r1
1005fb5e:	b22d      	sxth	r5, r5
1005fb60:	9e04      	ldr	r6, [sp, #16]
1005fb62:	1a71      	subs	r1, r6, r1
1005fb64:	b209      	sxth	r1, r1
1005fb66:	428d      	cmp	r5, r1
1005fb68:	dded      	ble.n	1005fb46 <CST_start+0x84>
1005fb6a:	5cc1      	ldrb	r1, [r0, r3]
1005fb6c:	9a01      	ldr	r2, [sp, #4]
1005fb6e:	5481      	strb	r1, [r0, r2]
1005fb70:	6a20      	ldr	r0, [r4, #32]
1005fb72:	54c2      	strb	r2, [r0, r3]
1005fb74:	9802      	ldr	r0, [sp, #8]
1005fb76:	4283      	cmp	r3, r0
1005fb78:	d106      	bne.n	1005fb88 <CST_start+0xc6>
1005fb7a:	9804      	ldr	r0, [sp, #16]
1005fb7c:	b201      	sxth	r1, r0
1005fb7e:	4620      	mov	r0, r4
1005fb80:	f000 f806 	bl	1005fb90 <Timer_StartFirstActive_sysT>
1005fb84:	4606      	mov	r6, r0
1005fb86:	e000      	b.n	1005fb8a <CST_start+0xc8>
1005fb88:	2600      	movs	r6, #0
1005fb8a:	4630      	mov	r0, r6
1005fb8c:	b005      	add	sp, #20
1005fb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fb90 <Timer_StartFirstActive_sysT>:
1005fb90:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005fb92:	9101      	str	r1, [sp, #4]
1005fb94:	4604      	mov	r4, r0
1005fb96:	4607      	mov	r7, r0
1005fb98:	3708      	adds	r7, #8
1005fb9a:	f7ef ff1e 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005fb9e:	9002      	str	r0, [sp, #8]
1005fba0:	460d      	mov	r5, r1
1005fba2:	7826      	ldrb	r6, [r4, #0]
1005fba4:	7d20      	ldrb	r0, [r4, #20]
1005fba6:	2800      	cmp	r0, #0
1005fba8:	d004      	beq.n	1005fbb4 <Timer_StartFirstActive_sysT+0x24>
1005fbaa:	4638      	mov	r0, r7
1005fbac:	f7ef ff30 	bl	1004fa10 <BLEPLAT_StopTimer>
1005fbb0:	7822      	ldrb	r2, [r4, #0]
1005fbb2:	e000      	b.n	1005fbb6 <Timer_StartFirstActive_sysT+0x26>
1005fbb4:	4632      	mov	r2, r6
1005fbb6:	1d70      	adds	r0, r6, #5
1005fbb8:	9c02      	ldr	r4, [sp, #8]
1005fbba:	08e1      	lsrs	r1, r4, #3
1005fbbc:	40c1      	lsrs	r1, r0
1005fbbe:	9801      	ldr	r0, [sp, #4]
1005fbc0:	1a40      	subs	r0, r0, r1
1005fbc2:	b200      	sxth	r0, r0
1005fbc4:	1e40      	subs	r0, r0, #1
1005fbc6:	17c1      	asrs	r1, r0, #31
1005fbc8:	3208      	adds	r2, #8
1005fbca:	f7e0 fcaf 	bl	1004052c <__aeabi_llsl>
1005fbce:	1902      	adds	r2, r0, r4
1005fbd0:	414d      	adcs	r5, r1
1005fbd2:	4638      	mov	r0, r7
1005fbd4:	462b      	mov	r3, r5
1005fbd6:	f7ef ff0a 	bl	1004f9ee <BLEPLAT_StartTimer>
1005fbda:	b2c0      	uxtb	r0, r0
1005fbdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005fbde <cst_sharedCallback>:
1005fbde:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005fbe0:	9102      	str	r1, [sp, #8]
1005fbe2:	4605      	mov	r5, r0
1005fbe4:	7847      	ldrb	r7, [r0, #1]
1005fbe6:	6a00      	ldr	r0, [r0, #32]
1005fbe8:	5dc4      	ldrb	r4, [r0, r7]
1005fbea:	f7ef fef6 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1005fbee:	08c0      	lsrs	r0, r0, #3
1005fbf0:	9001      	str	r0, [sp, #4]
1005fbf2:	4620      	mov	r0, r4
1005fbf4:	b2c2      	uxtb	r2, r0
1005fbf6:	42ba      	cmp	r2, r7
1005fbf8:	d00d      	beq.n	1005fc16 <cst_sharedCallback+0x38>
1005fbfa:	0053      	lsls	r3, r2, #1
1005fbfc:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
1005fbfe:	5af3      	ldrh	r3, [r6, r3]
1005fc00:	782e      	ldrb	r6, [r5, #0]
1005fc02:	1d76      	adds	r6, r6, #5
1005fc04:	9901      	ldr	r1, [sp, #4]
1005fc06:	40f1      	lsrs	r1, r6
1005fc08:	1a59      	subs	r1, r3, r1
1005fc0a:	b209      	sxth	r1, r1
1005fc0c:	2901      	cmp	r1, #1
1005fc0e:	dc03      	bgt.n	1005fc18 <cst_sharedCallback+0x3a>
1005fc10:	6a28      	ldr	r0, [r5, #32]
1005fc12:	5c80      	ldrb	r0, [r0, r2]
1005fc14:	e7ee      	b.n	1005fbf4 <cst_sharedCallback+0x16>
1005fc16:	4638      	mov	r0, r7
1005fc18:	6a29      	ldr	r1, [r5, #32]
1005fc1a:	55c8      	strb	r0, [r1, r7]
1005fc1c:	b2c6      	uxtb	r6, r0
1005fc1e:	4628      	mov	r0, r5
1005fc20:	4631      	mov	r1, r6
1005fc22:	f7ff ff3a 	bl	1005fa9a <Timer_TryStartFirstActive>
1005fc26:	b2e0      	uxtb	r0, r4
1005fc28:	42b0      	cmp	r0, r6
1005fc2a:	d006      	beq.n	1005fc3a <cst_sharedCallback+0x5c>
1005fc2c:	6a29      	ldr	r1, [r5, #32]
1005fc2e:	5c0f      	ldrb	r7, [r1, r0]
1005fc30:	540c      	strb	r4, [r1, r0]
1005fc32:	9902      	ldr	r1, [sp, #8]
1005fc34:	4788      	blx	r1
1005fc36:	463c      	mov	r4, r7
1005fc38:	e7f5      	b.n	1005fc26 <cst_sharedCallback+0x48>
1005fc3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005fc3c <copy_swap_buffer>:
1005fc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fc3e:	2a00      	cmp	r2, #0
1005fc40:	d00b      	beq.n	1005fc5a <copy_swap_buffer+0x1e>
1005fc42:	2400      	movs	r4, #0
1005fc44:	43e5      	mvns	r5, r4
1005fc46:	2b00      	cmp	r3, #0
1005fc48:	4626      	mov	r6, r4
1005fc4a:	d000      	beq.n	1005fc4e <copy_swap_buffer+0x12>
1005fc4c:	1956      	adds	r6, r2, r5
1005fc4e:	5d0f      	ldrb	r7, [r1, r4]
1005fc50:	5587      	strb	r7, [r0, r6]
1005fc52:	1e6d      	subs	r5, r5, #1
1005fc54:	1c64      	adds	r4, r4, #1
1005fc56:	42a2      	cmp	r2, r4
1005fc58:	d1f5      	bne.n	1005fc46 <copy_swap_buffer+0xa>
1005fc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fc5c <is_Buffer_All_Set_To>:
1005fc5c:	b570      	push	{r4, r5, r6, lr}
1005fc5e:	4603      	mov	r3, r0
1005fc60:	2001      	movs	r0, #1
1005fc62:	2900      	cmp	r1, #0
1005fc64:	d009      	beq.n	1005fc7a <is_Buffer_All_Set_To+0x1e>
1005fc66:	2400      	movs	r4, #0
1005fc68:	4626      	mov	r6, r4
1005fc6a:	4625      	mov	r5, r4
1005fc6c:	5d96      	ldrb	r6, [r2, r6]
1005fc6e:	429e      	cmp	r6, r3
1005fc70:	d104      	bne.n	1005fc7c <is_Buffer_All_Set_To+0x20>
1005fc72:	1c6d      	adds	r5, r5, #1
1005fc74:	b2ee      	uxtb	r6, r5
1005fc76:	428e      	cmp	r6, r1
1005fc78:	d3f8      	bcc.n	1005fc6c <is_Buffer_All_Set_To+0x10>
1005fc7a:	bd70      	pop	{r4, r5, r6, pc}
1005fc7c:	4620      	mov	r0, r4
1005fc7e:	bd70      	pop	{r4, r5, r6, pc}

1005fc80 <char_copy>:
1005fc80:	2a00      	cmp	r2, #0
1005fc82:	d005      	beq.n	1005fc90 <char_copy+0x10>
1005fc84:	7803      	ldrb	r3, [r0, #0]
1005fc86:	700b      	strb	r3, [r1, #0]
1005fc88:	1e52      	subs	r2, r2, #1
1005fc8a:	1c49      	adds	r1, r1, #1
1005fc8c:	1c40      	adds	r0, r0, #1
1005fc8e:	e7f7      	b.n	1005fc80 <char_copy>
1005fc90:	4770      	bx	lr

1005fc92 <UUID_cmp>:
1005fc92:	b580      	push	{r7, lr}
1005fc94:	7c02      	ldrb	r2, [r0, #16]
1005fc96:	7c0b      	ldrb	r3, [r1, #16]
1005fc98:	429a      	cmp	r2, r3
1005fc9a:	d106      	bne.n	1005fcaa <UUID_cmp+0x18>
1005fc9c:	2a20      	cmp	r2, #32
1005fc9e:	d007      	beq.n	1005fcb0 <UUID_cmp+0x1e>
1005fca0:	2a10      	cmp	r2, #16
1005fca2:	d109      	bne.n	1005fcb8 <UUID_cmp+0x26>
1005fca4:	8989      	ldrh	r1, [r1, #12]
1005fca6:	8980      	ldrh	r0, [r0, #12]
1005fca8:	e008      	b.n	1005fcbc <UUID_cmp+0x2a>
1005fcaa:	2000      	movs	r0, #0
1005fcac:	43c0      	mvns	r0, r0
1005fcae:	bd80      	pop	{r7, pc}
1005fcb0:	2210      	movs	r2, #16
1005fcb2:	f7ef fde7 	bl	1004f884 <BLEPLAT_MemCmp>
1005fcb6:	bd80      	pop	{r7, pc}
1005fcb8:	68c9      	ldr	r1, [r1, #12]
1005fcba:	68c0      	ldr	r0, [r0, #12]
1005fcbc:	1a40      	subs	r0, r0, r1
1005fcbe:	bd80      	pop	{r7, pc}

1005fcc0 <UUID_cmp_128bits>:
1005fcc0:	b570      	push	{r4, r5, r6, lr}
1005fcc2:	b08a      	sub	sp, #40	@ 0x28
1005fcc4:	460c      	mov	r4, r1
1005fcc6:	4601      	mov	r1, r0
1005fcc8:	ad05      	add	r5, sp, #20
1005fcca:	2614      	movs	r6, #20
1005fccc:	4628      	mov	r0, r5
1005fcce:	4632      	mov	r2, r6
1005fcd0:	f7ef fdb8 	bl	1004f844 <BLEPLAT_MemCpy>
1005fcd4:	4668      	mov	r0, sp
1005fcd6:	4621      	mov	r1, r4
1005fcd8:	4632      	mov	r2, r6
1005fcda:	f7ef fdb3 	bl	1004f844 <BLEPLAT_MemCpy>
1005fcde:	7c28      	ldrb	r0, [r5, #16]
1005fce0:	2880      	cmp	r0, #128	@ 0x80
1005fce2:	d007      	beq.n	1005fcf4 <UUID_cmp_128bits+0x34>
1005fce4:	ac05      	add	r4, sp, #20
1005fce6:	490d      	ldr	r1, [pc, #52]	@ (1005fd1c <__arm_cp.1_0>)
1005fce8:	220c      	movs	r2, #12
1005fcea:	4620      	mov	r0, r4
1005fcec:	f7ef fdaa 	bl	1004f844 <BLEPLAT_MemCpy>
1005fcf0:	2000      	movs	r0, #0
1005fcf2:	81e0      	strh	r0, [r4, #14]
1005fcf4:	4668      	mov	r0, sp
1005fcf6:	7c00      	ldrb	r0, [r0, #16]
1005fcf8:	2880      	cmp	r0, #128	@ 0x80
1005fcfa:	d007      	beq.n	1005fd0c <UUID_cmp_128bits+0x4c>
1005fcfc:	466c      	mov	r4, sp
1005fcfe:	4907      	ldr	r1, [pc, #28]	@ (1005fd1c <__arm_cp.1_0>)
1005fd00:	220c      	movs	r2, #12
1005fd02:	4620      	mov	r0, r4
1005fd04:	f7ef fd9e 	bl	1004f844 <BLEPLAT_MemCpy>
1005fd08:	2000      	movs	r0, #0
1005fd0a:	81e0      	strh	r0, [r4, #14]
1005fd0c:	a805      	add	r0, sp, #20
1005fd0e:	4669      	mov	r1, sp
1005fd10:	2210      	movs	r2, #16
1005fd12:	f7ef fdb7 	bl	1004f884 <BLEPLAT_MemCmp>
1005fd16:	b00a      	add	sp, #40	@ 0x28
1005fd18:	bd70      	pop	{r4, r5, r6, pc}
1005fd1a:	46c0      	nop			@ (mov r8, r8)

1005fd1c <__arm_cp.1_0>:
1005fd1c:	100661bc 	.word	0x100661bc

1005fd20 <UUID_write_to_flat>:
1005fd20:	b510      	push	{r4, lr}
1005fd22:	460a      	mov	r2, r1
1005fd24:	4601      	mov	r1, r0
1005fd26:	7c00      	ldrb	r0, [r0, #16]
1005fd28:	2820      	cmp	r0, #32
1005fd2a:	d004      	beq.n	1005fd36 <UUID_write_to_flat+0x16>
1005fd2c:	2810      	cmp	r0, #16
1005fd2e:	d105      	bne.n	1005fd3c <UUID_write_to_flat+0x1c>
1005fd30:	310c      	adds	r1, #12
1005fd32:	2402      	movs	r4, #2
1005fd34:	e003      	b.n	1005fd3e <UUID_write_to_flat+0x1e>
1005fd36:	310c      	adds	r1, #12
1005fd38:	2404      	movs	r4, #4
1005fd3a:	e000      	b.n	1005fd3e <UUID_write_to_flat+0x1e>
1005fd3c:	2410      	movs	r4, #16
1005fd3e:	4610      	mov	r0, r2
1005fd40:	4622      	mov	r2, r4
1005fd42:	f7ef fd7f 	bl	1004f844 <BLEPLAT_MemCpy>
1005fd46:	4620      	mov	r0, r4
1005fd48:	bd10      	pop	{r4, pc}

1005fd4a <UUID_get_value_p>:
1005fd4a:	7c01      	ldrb	r1, [r0, #16]
1005fd4c:	2980      	cmp	r1, #128	@ 0x80
1005fd4e:	d000      	beq.n	1005fd52 <UUID_get_value_p+0x8>
1005fd50:	300c      	adds	r0, #12
1005fd52:	4770      	bx	lr

1005fd54 <ACL_list_init>:
1005fd54:	2100      	movs	r1, #0
1005fd56:	6001      	str	r1, [r0, #0]
1005fd58:	6040      	str	r0, [r0, #4]
1005fd5a:	4770      	bx	lr

1005fd5c <ACL_list_insert_tail>:
1005fd5c:	2200      	movs	r2, #0
1005fd5e:	61ca      	str	r2, [r1, #28]
1005fd60:	6842      	ldr	r2, [r0, #4]
1005fd62:	6011      	str	r1, [r2, #0]
1005fd64:	311c      	adds	r1, #28
1005fd66:	6041      	str	r1, [r0, #4]
1005fd68:	4770      	bx	lr

1005fd6a <ACL_list_insert_head>:
1005fd6a:	6802      	ldr	r2, [r0, #0]
1005fd6c:	61ca      	str	r2, [r1, #28]
1005fd6e:	2a00      	cmp	r2, #0
1005fd70:	d102      	bne.n	1005fd78 <ACL_list_insert_head+0xe>
1005fd72:	460a      	mov	r2, r1
1005fd74:	321c      	adds	r2, #28
1005fd76:	6042      	str	r2, [r0, #4]
1005fd78:	6001      	str	r1, [r0, #0]
1005fd7a:	4770      	bx	lr

1005fd7c <ACL_list_remove>:
1005fd7c:	6803      	ldr	r3, [r0, #0]
1005fd7e:	428b      	cmp	r3, r1
1005fd80:	d009      	beq.n	1005fd96 <ACL_list_remove+0x1a>
1005fd82:	461a      	mov	r2, r3
1005fd84:	69db      	ldr	r3, [r3, #28]
1005fd86:	428b      	cmp	r3, r1
1005fd88:	d1fb      	bne.n	1005fd82 <ACL_list_remove+0x6>
1005fd8a:	69cb      	ldr	r3, [r1, #28]
1005fd8c:	61d3      	str	r3, [r2, #28]
1005fd8e:	2b00      	cmp	r3, #0
1005fd90:	d107      	bne.n	1005fda2 <ACL_list_remove+0x26>
1005fd92:	321c      	adds	r2, #28
1005fd94:	e004      	b.n	1005fda0 <ACL_list_remove+0x24>
1005fd96:	69ca      	ldr	r2, [r1, #28]
1005fd98:	6002      	str	r2, [r0, #0]
1005fd9a:	2a00      	cmp	r2, #0
1005fd9c:	d101      	bne.n	1005fda2 <ACL_list_remove+0x26>
1005fd9e:	4602      	mov	r2, r0
1005fda0:	6042      	str	r2, [r0, #4]
1005fda2:	2000      	movs	r0, #0
1005fda4:	61c8      	str	r0, [r1, #28]
1005fda6:	4770      	bx	lr

1005fda8 <ACL_list_remove_head>:
1005fda8:	4601      	mov	r1, r0
1005fdaa:	6800      	ldr	r0, [r0, #0]
1005fdac:	69c2      	ldr	r2, [r0, #28]
1005fdae:	600a      	str	r2, [r1, #0]
1005fdb0:	2a00      	cmp	r2, #0
1005fdb2:	d100      	bne.n	1005fdb6 <ACL_list_remove_head+0xe>
1005fdb4:	6049      	str	r1, [r1, #4]
1005fdb6:	2100      	movs	r1, #0
1005fdb8:	61c1      	str	r1, [r0, #28]
1005fdba:	4770      	bx	lr

1005fdbc <ACL_list_get_pckt_count>:
1005fdbc:	2100      	movs	r1, #0
1005fdbe:	6800      	ldr	r0, [r0, #0]
1005fdc0:	2800      	cmp	r0, #0
1005fdc2:	d002      	beq.n	1005fdca <ACL_list_get_pckt_count+0xe>
1005fdc4:	301c      	adds	r0, #28
1005fdc6:	1c49      	adds	r1, r1, #1
1005fdc8:	e7f9      	b.n	1005fdbe <ACL_list_get_pckt_count+0x2>
1005fdca:	b288      	uxth	r0, r1
1005fdcc:	4770      	bx	lr
	...

1005fdd0 <addr8_list_search>:
1005fdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fdd2:	b087      	sub	sp, #28
1005fdd4:	4604      	mov	r4, r0
1005fdd6:	0608      	lsls	r0, r1, #24
1005fdd8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005fdda:	d052      	beq.n	1005fe82 <addr8_list_search+0xb2>
1005fddc:	9501      	str	r5, [sp, #4]
1005fdde:	20ff      	movs	r0, #255	@ 0xff
1005fde0:	4615      	mov	r5, r2
1005fde2:	4385      	bics	r5, r0
1005fde4:	2601      	movs	r6, #1
1005fde6:	9305      	str	r3, [sp, #20]
1005fde8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1005fdea:	461f      	mov	r7, r3
1005fdec:	9600      	str	r6, [sp, #0]
1005fdee:	4037      	ands	r7, r6
1005fdf0:	9703      	str	r7, [sp, #12]
1005fdf2:	427e      	negs	r6, r7
1005fdf4:	4016      	ands	r6, r2
1005fdf6:	b2f2      	uxtb	r2, r6
1005fdf8:	1952      	adds	r2, r2, r5
1005fdfa:	9206      	str	r2, [sp, #24]
1005fdfc:	4d25      	ldr	r5, [pc, #148]	@ (1005fe94 <__arm_cp.0_0>)
1005fdfe:	9f05      	ldr	r7, [sp, #20]
1005fe00:	463a      	mov	r2, r7
1005fe02:	402a      	ands	r2, r5
1005fe04:	461e      	mov	r6, r3
1005fe06:	079d      	lsls	r5, r3, #30
1005fe08:	17ed      	asrs	r5, r5, #31
1005fe0a:	403d      	ands	r5, r7
1005fe0c:	9004      	str	r0, [sp, #16]
1005fe0e:	0603      	lsls	r3, r0, #24
1005fe10:	402b      	ands	r3, r5
1005fe12:	189b      	adds	r3, r3, r2
1005fe14:	2002      	movs	r0, #2
1005fe16:	4030      	ands	r0, r6
1005fe18:	9002      	str	r0, [sp, #8]
1005fe1a:	1e48      	subs	r0, r1, #1
1005fe1c:	9005      	str	r0, [sp, #20]
1005fe1e:	b2c8      	uxtb	r0, r1
1005fe20:	0841      	lsrs	r1, r0, #1
1005fe22:	2600      	movs	r6, #0
1005fe24:	b2c8      	uxtb	r0, r1
1005fe26:	00c2      	lsls	r2, r0, #3
1005fe28:	18a0      	adds	r0, r4, r2
1005fe2a:	6845      	ldr	r5, [r0, #4]
1005fe2c:	9802      	ldr	r0, [sp, #8]
1005fe2e:	2800      	cmp	r0, #0
1005fe30:	d101      	bne.n	1005fe36 <addr8_list_search+0x66>
1005fe32:	4818      	ldr	r0, [pc, #96]	@ (1005fe94 <__arm_cp.0_0>)
1005fe34:	4005      	ands	r5, r0
1005fe36:	58a0      	ldr	r0, [r4, r2]
1005fe38:	4602      	mov	r2, r0
1005fe3a:	9f04      	ldr	r7, [sp, #16]
1005fe3c:	43ba      	bics	r2, r7
1005fe3e:	9f03      	ldr	r7, [sp, #12]
1005fe40:	2f00      	cmp	r7, #0
1005fe42:	d101      	bne.n	1005fe48 <addr8_list_search+0x78>
1005fe44:	4638      	mov	r0, r7
1005fe46:	e000      	b.n	1005fe4a <addr8_list_search+0x7a>
1005fe48:	b2c0      	uxtb	r0, r0
1005fe4a:	1882      	adds	r2, r0, r2
1005fe4c:	9806      	ldr	r0, [sp, #24]
1005fe4e:	4290      	cmp	r0, r2
1005fe50:	d101      	bne.n	1005fe56 <addr8_list_search+0x86>
1005fe52:	42ab      	cmp	r3, r5
1005fe54:	d018      	beq.n	1005fe88 <addr8_list_search+0xb8>
1005fe56:	42ab      	cmp	r3, r5
1005fe58:	d803      	bhi.n	1005fe62 <addr8_list_search+0x92>
1005fe5a:	d104      	bne.n	1005fe66 <addr8_list_search+0x96>
1005fe5c:	9806      	ldr	r0, [sp, #24]
1005fe5e:	4290      	cmp	r0, r2
1005fe60:	d901      	bls.n	1005fe66 <addr8_list_search+0x96>
1005fe62:	1c4e      	adds	r6, r1, #1
1005fe64:	e001      	b.n	1005fe6a <addr8_list_search+0x9a>
1005fe66:	1e48      	subs	r0, r1, #1
1005fe68:	9005      	str	r0, [sp, #20]
1005fe6a:	9805      	ldr	r0, [sp, #20]
1005fe6c:	1b80      	subs	r0, r0, r6
1005fe6e:	b2c0      	uxtb	r0, r0
1005fe70:	1c40      	adds	r0, r0, #1
1005fe72:	b2c2      	uxtb	r2, r0
1005fe74:	0851      	lsrs	r1, r2, #1
1005fe76:	1989      	adds	r1, r1, r6
1005fe78:	4282      	cmp	r2, r0
1005fe7a:	d0d3      	beq.n	1005fe24 <addr8_list_search+0x54>
1005fe7c:	2000      	movs	r0, #0
1005fe7e:	9d01      	ldr	r5, [sp, #4]
1005fe80:	e004      	b.n	1005fe8c <addr8_list_search+0xbc>
1005fe82:	2100      	movs	r1, #0
1005fe84:	4608      	mov	r0, r1
1005fe86:	e001      	b.n	1005fe8c <addr8_list_search+0xbc>
1005fe88:	9d01      	ldr	r5, [sp, #4]
1005fe8a:	9800      	ldr	r0, [sp, #0]
1005fe8c:	7029      	strb	r1, [r5, #0]
1005fe8e:	b007      	add	sp, #28
1005fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fe92:	46c0      	nop			@ (mov r8, r8)

1005fe94 <__arm_cp.0_0>:
1005fe94:	00ffffff 	.word	0x00ffffff

1005fe98 <addr8_list_add>:
1005fe98:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fe9a:	b089      	sub	sp, #36	@ 0x24
1005fe9c:	4615      	mov	r5, r2
1005fe9e:	460f      	mov	r7, r1
1005fea0:	4604      	mov	r4, r0
1005fea2:	7906      	ldrb	r6, [r0, #4]
1005fea4:	6800      	ldr	r0, [r0, #0]
1005fea6:	6861      	ldr	r1, [r4, #4]
1005fea8:	aa08      	add	r2, sp, #32
1005feaa:	9300      	str	r3, [sp, #0]
1005feac:	9201      	str	r2, [sp, #4]
1005feae:	463a      	mov	r2, r7
1005feb0:	462b      	mov	r3, r5
1005feb2:	f7ff ff8d 	bl	1005fdd0 <addr8_list_search>
1005feb6:	2100      	movs	r1, #0
1005feb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1005feba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005febc:	2800      	cmp	r0, #0
1005febe:	9207      	str	r2, [sp, #28]
1005fec0:	d126      	bne.n	1005ff10 <addr8_list_add+0x78>
1005fec2:	9706      	str	r7, [sp, #24]
1005fec4:	7967      	ldrb	r7, [r4, #5]
1005fec6:	42be      	cmp	r6, r7
1005fec8:	d222      	bcs.n	1005ff10 <addr8_list_add+0x78>
1005feca:	9302      	str	r3, [sp, #8]
1005fecc:	9003      	str	r0, [sp, #12]
1005fece:	9504      	str	r5, [sp, #16]
1005fed0:	a908      	add	r1, sp, #32
1005fed2:	7808      	ldrb	r0, [r1, #0]
1005fed4:	9605      	str	r6, [sp, #20]
1005fed6:	4286      	cmp	r6, r0
1005fed8:	d00d      	beq.n	1005fef6 <addr8_list_add+0x5e>
1005feda:	9f05      	ldr	r7, [sp, #20]
1005fedc:	6822      	ldr	r2, [r4, #0]
1005fede:	b2fd      	uxtb	r5, r7
1005fee0:	00ed      	lsls	r5, r5, #3
1005fee2:	1956      	adds	r6, r2, r5
1005fee4:	4633      	mov	r3, r6
1005fee6:	3b08      	subs	r3, #8
1005fee8:	cb0a      	ldmia	r3, {r1, r3}
1005feea:	5151      	str	r1, [r2, r5]
1005feec:	6073      	str	r3, [r6, #4]
1005feee:	1e7f      	subs	r7, r7, #1
1005fef0:	b2f9      	uxtb	r1, r7
1005fef2:	4281      	cmp	r1, r0
1005fef4:	d1f2      	bne.n	1005fedc <addr8_list_add+0x44>
1005fef6:	6821      	ldr	r1, [r4, #0]
1005fef8:	00c0      	lsls	r0, r0, #3
1005fefa:	9a06      	ldr	r2, [sp, #24]
1005fefc:	500a      	str	r2, [r1, r0]
1005fefe:	1808      	adds	r0, r1, r0
1005ff00:	9904      	ldr	r1, [sp, #16]
1005ff02:	6041      	str	r1, [r0, #4]
1005ff04:	9805      	ldr	r0, [sp, #20]
1005ff06:	1c40      	adds	r0, r0, #1
1005ff08:	7120      	strb	r0, [r4, #4]
1005ff0a:	2101      	movs	r1, #1
1005ff0c:	9803      	ldr	r0, [sp, #12]
1005ff0e:	9b02      	ldr	r3, [sp, #8]
1005ff10:	9a08      	ldr	r2, [sp, #32]
1005ff12:	9c07      	ldr	r4, [sp, #28]
1005ff14:	7022      	strb	r2, [r4, #0]
1005ff16:	7018      	strb	r0, [r3, #0]
1005ff18:	4608      	mov	r0, r1
1005ff1a:	b009      	add	sp, #36	@ 0x24
1005ff1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ff1e <addr8_list_remove_by_addr>:
1005ff1e:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ff20:	b087      	sub	sp, #28
1005ff22:	460f      	mov	r7, r1
1005ff24:	4601      	mov	r1, r0
1005ff26:	7900      	ldrb	r0, [r0, #4]
1005ff28:	2600      	movs	r6, #0
1005ff2a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005ff2c:	2800      	cmp	r0, #0
1005ff2e:	d02f      	beq.n	1005ff90 <addr8_list_remove_by_addr+0x72>
1005ff30:	9003      	str	r0, [sp, #12]
1005ff32:	6808      	ldr	r0, [r1, #0]
1005ff34:	9104      	str	r1, [sp, #16]
1005ff36:	6849      	ldr	r1, [r1, #4]
1005ff38:	9205      	str	r2, [sp, #20]
1005ff3a:	ad06      	add	r5, sp, #24
1005ff3c:	9300      	str	r3, [sp, #0]
1005ff3e:	9501      	str	r5, [sp, #4]
1005ff40:	463a      	mov	r2, r7
1005ff42:	9b05      	ldr	r3, [sp, #20]
1005ff44:	f7ff ff44 	bl	1005fdd0 <addr8_list_search>
1005ff48:	2800      	cmp	r0, #0
1005ff4a:	d021      	beq.n	1005ff90 <addr8_list_remove_by_addr+0x72>
1005ff4c:	9002      	str	r0, [sp, #8]
1005ff4e:	9405      	str	r4, [sp, #20]
1005ff50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005ff52:	9c04      	ldr	r4, [sp, #16]
1005ff54:	6823      	ldr	r3, [r4, #0]
1005ff56:	a906      	add	r1, sp, #24
1005ff58:	7809      	ldrb	r1, [r1, #0]
1005ff5a:	00cd      	lsls	r5, r1, #3
1005ff5c:	195b      	adds	r3, r3, r5
1005ff5e:	79db      	ldrb	r3, [r3, #7]
1005ff60:	7013      	strb	r3, [r2, #0]
1005ff62:	9803      	ldr	r0, [sp, #12]
1005ff64:	1e40      	subs	r0, r0, #1
1005ff66:	9003      	str	r0, [sp, #12]
1005ff68:	b2c0      	uxtb	r0, r0
1005ff6a:	4281      	cmp	r1, r0
1005ff6c:	4623      	mov	r3, r4
1005ff6e:	d00b      	beq.n	1005ff88 <addr8_list_remove_by_addr+0x6a>
1005ff70:	681d      	ldr	r5, [r3, #0]
1005ff72:	b2ce      	uxtb	r6, r1
1005ff74:	00f6      	lsls	r6, r6, #3
1005ff76:	19af      	adds	r7, r5, r6
1005ff78:	68ba      	ldr	r2, [r7, #8]
1005ff7a:	68fc      	ldr	r4, [r7, #12]
1005ff7c:	51aa      	str	r2, [r5, r6]
1005ff7e:	607c      	str	r4, [r7, #4]
1005ff80:	1c49      	adds	r1, r1, #1
1005ff82:	b2ca      	uxtb	r2, r1
1005ff84:	4282      	cmp	r2, r0
1005ff86:	d1f3      	bne.n	1005ff70 <addr8_list_remove_by_addr+0x52>
1005ff88:	9803      	ldr	r0, [sp, #12]
1005ff8a:	7118      	strb	r0, [r3, #4]
1005ff8c:	9e02      	ldr	r6, [sp, #8]
1005ff8e:	9c05      	ldr	r4, [sp, #20]
1005ff90:	7026      	strb	r6, [r4, #0]
1005ff92:	b007      	add	sp, #28
1005ff94:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ff96 <addr8_list_clear>:
1005ff96:	2100      	movs	r1, #0
1005ff98:	7101      	strb	r1, [r0, #4]
1005ff9a:	4770      	bx	lr

1005ff9c <BLEPLAT_aes128_encrypt>:
1005ff9c:	b580      	push	{r7, lr}
1005ff9e:	f7ef fc9e 	bl	1004f8de <BLEPLAT_AesEcbEncrypt>
1005ffa2:	bd80      	pop	{r7, pc}

1005ffa4 <Hal_Get_Random_Number>:
1005ffa4:	b51c      	push	{r2, r3, r4, lr}
1005ffa6:	ac01      	add	r4, sp, #4
1005ffa8:	4620      	mov	r0, r4
1005ffaa:	f7ef fcd7 	bl	1004f95c <BLEPLAT_RngGetRandom16>
1005ffae:	8820      	ldrh	r0, [r4, #0]
1005ffb0:	bd1c      	pop	{r2, r3, r4, pc}

1005ffb2 <Hal_Get_Random_Number32>:
1005ffb2:	b5e0      	push	{r5, r6, r7, lr}
1005ffb4:	a801      	add	r0, sp, #4
1005ffb6:	f7ef fcdd 	bl	1004f974 <BLEPLAT_RngGetRandom32>
1005ffba:	9801      	ldr	r0, [sp, #4]
1005ffbc:	bd8c      	pop	{r2, r3, r7, pc}

1005ffbe <HAL_Generate_Random_Bytes_To>:
1005ffbe:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005ffc0:	460c      	mov	r4, r1
1005ffc2:	4605      	mov	r5, r0
1005ffc4:	2000      	movs	r0, #0
1005ffc6:	b2c6      	uxtb	r6, r0
1005ffc8:	42a6      	cmp	r6, r4
1005ffca:	d20e      	bcs.n	1005ffea <HAL_Generate_Random_Bytes_To+0x2c>
1005ffcc:	2000      	movs	r0, #0
1005ffce:	f7ff ffe9 	bl	1005ffa4 <Hal_Get_Random_Number>
1005ffd2:	55a8      	strb	r0, [r5, r6]
1005ffd4:	a901      	add	r1, sp, #4
1005ffd6:	7008      	strb	r0, [r1, #0]
1005ffd8:	0a00      	lsrs	r0, r0, #8
1005ffda:	4669      	mov	r1, sp
1005ffdc:	7008      	strb	r0, [r1, #0]
1005ffde:	1c71      	adds	r1, r6, #1
1005ffe0:	42a1      	cmp	r1, r4
1005ffe2:	d200      	bcs.n	1005ffe6 <HAL_Generate_Random_Bytes_To+0x28>
1005ffe4:	5468      	strb	r0, [r5, r1]
1005ffe6:	1cb0      	adds	r0, r6, #2
1005ffe8:	e7ed      	b.n	1005ffc6 <HAL_Generate_Random_Bytes_To+0x8>
1005ffea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005ffec <IDD_Initialize_Device_IDs>:
1005ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ffee:	b095      	sub	sp, #84	@ 0x54
1005fff0:	4839      	ldr	r0, [pc, #228]	@ (100600d8 <__arm_cp.0_0>)
1005fff2:	6800      	ldr	r0, [r0, #0]
1005fff4:	9000      	str	r0, [sp, #0]
1005fff6:	a80b      	add	r0, sp, #44	@ 0x2c
1005fff8:	f7ff fc63 	bl	1005f8c2 <nvm_dev_id_data_get_record>
1005fffc:	2800      	cmp	r0, #0
1005fffe:	d031      	beq.n	10060064 <IDD_Initialize_Device_IDs+0x78>
10060000:	af01      	add	r7, sp, #4
10060002:	2406      	movs	r4, #6
10060004:	2500      	movs	r5, #0
10060006:	4b35      	ldr	r3, [pc, #212]	@ (100600dc <__arm_cp.0_1>)
10060008:	4638      	mov	r0, r7
1006000a:	4621      	mov	r1, r4
1006000c:	462a      	mov	r2, r5
1006000e:	4798      	blx	r3
10060010:	7978      	ldrb	r0, [r7, #5]
10060012:	21c0      	movs	r1, #192	@ 0xc0
10060014:	4301      	orrs	r1, r0
10060016:	7179      	strb	r1, [r7, #5]
10060018:	ae0b      	add	r6, sp, #44	@ 0x2c
1006001a:	4630      	mov	r0, r6
1006001c:	3020      	adds	r0, #32
1006001e:	4b30      	ldr	r3, [pc, #192]	@ (100600e0 <__arm_cp.0_2>)
10060020:	4639      	mov	r1, r7
10060022:	4622      	mov	r2, r4
10060024:	4798      	blx	r3
10060026:	ac07      	add	r4, sp, #28
10060028:	2710      	movs	r7, #16
1006002a:	4620      	mov	r0, r4
1006002c:	4639      	mov	r1, r7
1006002e:	462a      	mov	r2, r5
10060030:	4b2a      	ldr	r3, [pc, #168]	@ (100600dc <__arm_cp.0_1>)
10060032:	4798      	blx	r3
10060034:	4630      	mov	r0, r6
10060036:	4621      	mov	r1, r4
10060038:	463a      	mov	r2, r7
1006003a:	4b29      	ldr	r3, [pc, #164]	@ (100600e0 <__arm_cp.0_2>)
1006003c:	4798      	blx	r3
1006003e:	ac03      	add	r4, sp, #12
10060040:	4620      	mov	r0, r4
10060042:	4639      	mov	r1, r7
10060044:	462a      	mov	r2, r5
10060046:	4b25      	ldr	r3, [pc, #148]	@ (100600dc <__arm_cp.0_1>)
10060048:	4798      	blx	r3
1006004a:	4630      	mov	r0, r6
1006004c:	3010      	adds	r0, #16
1006004e:	4621      	mov	r1, r4
10060050:	463a      	mov	r2, r7
10060052:	4b23      	ldr	r3, [pc, #140]	@ (100600e0 <__arm_cp.0_2>)
10060054:	4798      	blx	r3
10060056:	4630      	mov	r0, r6
10060058:	f7ff fc40 	bl	1005f8dc <nvm_dev_id_data_add_record>
1006005c:	2800      	cmp	r0, #0
1006005e:	d103      	bne.n	10060068 <IDD_Initialize_Device_IDs+0x7c>
10060060:	4605      	mov	r5, r0
10060062:	e003      	b.n	1006006c <IDD_Initialize_Device_IDs+0x80>
10060064:	2500      	movs	r5, #0
10060066:	e001      	b.n	1006006c <IDD_Initialize_Device_IDs+0x80>
10060068:	200e      	movs	r0, #14
1006006a:	43c5      	mvns	r5, r0
1006006c:	4c1d      	ldr	r4, [pc, #116]	@ (100600e4 <__arm_cp.0_3>)
1006006e:	6822      	ldr	r2, [r4, #0]
10060070:	322e      	adds	r2, #46	@ 0x2e
10060072:	2600      	movs	r6, #0
10060074:	2706      	movs	r7, #6
10060076:	4630      	mov	r0, r6
10060078:	4639      	mov	r1, r7
1006007a:	f7ff fdef 	bl	1005fc5c <is_Buffer_All_Set_To>
1006007e:	a90b      	add	r1, sp, #44	@ 0x2c
10060080:	2800      	cmp	r0, #0
10060082:	d001      	beq.n	10060088 <IDD_Initialize_Device_IDs+0x9c>
10060084:	3120      	adds	r1, #32
10060086:	e001      	b.n	1006008c <IDD_Initialize_Device_IDs+0xa0>
10060088:	6821      	ldr	r1, [r4, #0]
1006008a:	312e      	adds	r1, #46	@ 0x2e
1006008c:	9800      	ldr	r0, [sp, #0]
1006008e:	3060      	adds	r0, #96	@ 0x60
10060090:	463a      	mov	r2, r7
10060092:	f7ef fbd7 	bl	1004f844 <BLEPLAT_MemCpy>
10060096:	6822      	ldr	r2, [r4, #0]
10060098:	3208      	adds	r2, #8
1006009a:	2110      	movs	r1, #16
1006009c:	4630      	mov	r0, r6
1006009e:	f7ff fddd 	bl	1005fc5c <is_Buffer_All_Set_To>
100600a2:	2800      	cmp	r0, #0
100600a4:	d005      	beq.n	100600b2 <IDD_Initialize_Device_IDs+0xc6>
100600a6:	6820      	ldr	r0, [r4, #0]
100600a8:	3008      	adds	r0, #8
100600aa:	a90b      	add	r1, sp, #44	@ 0x2c
100600ac:	2210      	movs	r2, #16
100600ae:	f7ef fbc9 	bl	1004f844 <BLEPLAT_MemCpy>
100600b2:	6822      	ldr	r2, [r4, #0]
100600b4:	3218      	adds	r2, #24
100600b6:	2000      	movs	r0, #0
100600b8:	2110      	movs	r1, #16
100600ba:	f7ff fdcf 	bl	1005fc5c <is_Buffer_All_Set_To>
100600be:	2800      	cmp	r0, #0
100600c0:	d006      	beq.n	100600d0 <IDD_Initialize_Device_IDs+0xe4>
100600c2:	a90b      	add	r1, sp, #44	@ 0x2c
100600c4:	3110      	adds	r1, #16
100600c6:	6820      	ldr	r0, [r4, #0]
100600c8:	3018      	adds	r0, #24
100600ca:	2210      	movs	r2, #16
100600cc:	f7ef fbba 	bl	1004f844 <BLEPLAT_MemCpy>
100600d0:	b2e8      	uxtb	r0, r5
100600d2:	b015      	add	sp, #84	@ 0x54
100600d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100600d6:	46c0      	nop			@ (mov r8, r8)

100600d8 <__arm_cp.0_0>:
100600d8:	20000ed4 	.word	0x20000ed4

100600dc <__arm_cp.0_1>:
100600dc:	1005ffbf 	.word	0x1005ffbf

100600e0 <__arm_cp.0_2>:
100600e0:	1004f845 	.word	0x1004f845

100600e4 <__arm_cp.0_3>:
100600e4:	20000ecc 	.word	0x20000ecc

100600e8 <aci_gatt_clt_notification_event_notify>:
100600e8:	b5b0      	push	{r4, r5, r7, lr}
100600ea:	b0ff      	sub	sp, #508	@ 0x1fc
100600ec:	b083      	sub	sp, #12
100600ee:	461c      	mov	r4, r3
100600f0:	466d      	mov	r5, sp
100600f2:	732b      	strb	r3, [r5, #12]
100600f4:	72aa      	strb	r2, [r5, #10]
100600f6:	7229      	strb	r1, [r5, #8]
100600f8:	71a8      	strb	r0, [r5, #6]
100600fa:	0a1b      	lsrs	r3, r3, #8
100600fc:	736b      	strb	r3, [r5, #13]
100600fe:	0a12      	lsrs	r2, r2, #8
10060100:	72ea      	strb	r2, [r5, #11]
10060102:	0a09      	lsrs	r1, r1, #8
10060104:	7269      	strb	r1, [r5, #9]
10060106:	0a00      	lsrs	r0, r0, #8
10060108:	71e8      	strb	r0, [r5, #7]
1006010a:	4628      	mov	r0, r5
1006010c:	300e      	adds	r0, #14
1006010e:	9986      	ldr	r1, [sp, #536]	@ 0x218
10060110:	4622      	mov	r2, r4
10060112:	f7ef fb97 	bl	1004f844 <BLEPLAT_MemCpy>
10060116:	4620      	mov	r0, r4
10060118:	300a      	adds	r0, #10
1006011a:	70a8      	strb	r0, [r5, #2]
1006011c:	0a00      	lsrs	r0, r0, #8
1006011e:	70e8      	strb	r0, [r5, #3]
10060120:	200f      	movs	r0, #15
10060122:	7128      	strb	r0, [r5, #4]
10060124:	20ff      	movs	r0, #255	@ 0xff
10060126:	7068      	strb	r0, [r5, #1]
10060128:	2082      	movs	r0, #130	@ 0x82
1006012a:	7028      	strb	r0, [r5, #0]
1006012c:	200c      	movs	r0, #12
1006012e:	7168      	strb	r0, [r5, #5]
10060130:	340e      	adds	r4, #14
10060132:	b2a1      	uxth	r1, r4
10060134:	4628      	mov	r0, r5
10060136:	f7eb fd79 	bl	1004bc2c <BLE_STACK_Event>
1006013a:	b07f      	add	sp, #508	@ 0x1fc
1006013c:	b003      	add	sp, #12
1006013e:	bdb0      	pop	{r4, r5, r7, pc}

10060140 <aci_gatt_clt_indication_event_cb>:
10060140:	b5b0      	push	{r4, r5, r7, lr}
10060142:	b0ff      	sub	sp, #508	@ 0x1fc
10060144:	b083      	sub	sp, #12
10060146:	460c      	mov	r4, r1
10060148:	4605      	mov	r5, r0
1006014a:	688b      	ldr	r3, [r1, #8]
1006014c:	88ca      	ldrh	r2, [r1, #6]
1006014e:	8889      	ldrh	r1, [r1, #4]
10060150:	4668      	mov	r0, sp
10060152:	1d80      	adds	r0, r0, #6
10060154:	f7f2 fd57 	bl	10052c06 <aci_gatt_clt_indication_event_copy>
10060158:	0728      	lsls	r0, r5, #28
1006015a:	d502      	bpl.n	10060162 <aci_gatt_clt_indication_event_cb+0x22>
1006015c:	68a0      	ldr	r0, [r4, #8]
1006015e:	f7f1 ff09 	bl	10051f74 <ACL_pkt_release>
10060162:	9903      	ldr	r1, [sp, #12]
10060164:	460a      	mov	r2, r1
10060166:	320a      	adds	r2, #10
10060168:	4668      	mov	r0, sp
1006016a:	7082      	strb	r2, [r0, #2]
1006016c:	0a12      	lsrs	r2, r2, #8
1006016e:	70c2      	strb	r2, [r0, #3]
10060170:	220e      	movs	r2, #14
10060172:	7102      	strb	r2, [r0, #4]
10060174:	4a05      	ldr	r2, [pc, #20]	@ (1006018c <__arm_cp.1_0>)
10060176:	8002      	strh	r2, [r0, #0]
10060178:	220c      	movs	r2, #12
1006017a:	7142      	strb	r2, [r0, #5]
1006017c:	310e      	adds	r1, #14
1006017e:	b289      	uxth	r1, r1
10060180:	f7eb fd54 	bl	1004bc2c <BLE_STACK_Event>
10060184:	b07f      	add	sp, #508	@ 0x1fc
10060186:	b003      	add	sp, #12
10060188:	bdb0      	pop	{r4, r5, r7, pc}
1006018a:	46c0      	nop			@ (mov r8, r8)

1006018c <__arm_cp.1_0>:
1006018c:	0000ff82 	.word	0x0000ff82

10060190 <aci_gatt_clt_notification_event_cb>:
10060190:	b5b0      	push	{r4, r5, r7, lr}
10060192:	b0ff      	sub	sp, #508	@ 0x1fc
10060194:	b085      	sub	sp, #20
10060196:	460c      	mov	r4, r1
10060198:	4605      	mov	r5, r0
1006019a:	688b      	ldr	r3, [r1, #8]
1006019c:	88ca      	ldrh	r2, [r1, #6]
1006019e:	8889      	ldrh	r1, [r1, #4]
100601a0:	a802      	add	r0, sp, #8
100601a2:	1d80      	adds	r0, r0, #6
100601a4:	f7f2 fd54 	bl	10052c50 <aci_gatt_clt_notification_event_copy>
100601a8:	0728      	lsls	r0, r5, #28
100601aa:	d502      	bpl.n	100601b2 <aci_gatt_clt_notification_event_cb+0x22>
100601ac:	68a0      	ldr	r0, [r4, #8]
100601ae:	f7f1 fee1 	bl	10051f74 <ACL_pkt_release>
100601b2:	ac02      	add	r4, sp, #8
100601b4:	89a3      	ldrh	r3, [r4, #12]
100601b6:	8962      	ldrh	r2, [r4, #10]
100601b8:	8921      	ldrh	r1, [r4, #8]
100601ba:	88e0      	ldrh	r0, [r4, #6]
100601bc:	340e      	adds	r4, #14
100601be:	9400      	str	r4, [sp, #0]
100601c0:	f7ff ff92 	bl	100600e8 <aci_gatt_clt_notification_event_notify>
100601c4:	b07f      	add	sp, #508	@ 0x1fc
100601c6:	b005      	add	sp, #20
100601c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100601cc <aci_gatt_srv_write_event_cb>:
100601cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100601ce:	b0ff      	sub	sp, #508	@ 0x1fc
100601d0:	b086      	sub	sp, #24
100601d2:	460c      	mov	r4, r1
100601d4:	4605      	mov	r5, r0
100601d6:	7a0b      	ldrb	r3, [r1, #8]
100601d8:	88ca      	ldrh	r2, [r1, #6]
100601da:	8889      	ldrh	r1, [r1, #4]
100601dc:	8960      	ldrh	r0, [r4, #10]
100601de:	89a6      	ldrh	r6, [r4, #12]
100601e0:	6927      	ldr	r7, [r4, #16]
100601e2:	9000      	str	r0, [sp, #0]
100601e4:	9601      	str	r6, [sp, #4]
100601e6:	9702      	str	r7, [sp, #8]
100601e8:	a803      	add	r0, sp, #12
100601ea:	1d80      	adds	r0, r0, #6
100601ec:	f7f2 fd79 	bl	10052ce2 <aci_gatt_srv_write_event_copy>
100601f0:	0728      	lsls	r0, r5, #28
100601f2:	d502      	bpl.n	100601fa <aci_gatt_srv_write_event_cb+0x2e>
100601f4:	6920      	ldr	r0, [r4, #16]
100601f6:	f7f1 febd 	bl	10051f74 <ACL_pkt_release>
100601fa:	a803      	add	r0, sp, #12
100601fc:	7b41      	ldrb	r1, [r0, #13]
100601fe:	7b82      	ldrb	r2, [r0, #14]
10060200:	0212      	lsls	r2, r2, #8
10060202:	1851      	adds	r1, r2, r1
10060204:	460a      	mov	r2, r1
10060206:	320b      	adds	r2, #11
10060208:	7082      	strb	r2, [r0, #2]
1006020a:	0a12      	lsrs	r2, r2, #8
1006020c:	70c2      	strb	r2, [r0, #3]
1006020e:	221a      	movs	r2, #26
10060210:	7102      	strb	r2, [r0, #4]
10060212:	4a05      	ldr	r2, [pc, #20]	@ (10060228 <__arm_cp.3_0>)
10060214:	8002      	strh	r2, [r0, #0]
10060216:	220c      	movs	r2, #12
10060218:	7142      	strb	r2, [r0, #5]
1006021a:	310f      	adds	r1, #15
1006021c:	b289      	uxth	r1, r1
1006021e:	f7eb fd05 	bl	1004bc2c <BLE_STACK_Event>
10060222:	b07f      	add	sp, #508	@ 0x1fc
10060224:	b006      	add	sp, #24
10060226:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060228 <__arm_cp.3_0>:
10060228:	0000ff82 	.word	0x0000ff82

1006022c <aci_gatt_clt_multi_notification_int_event_cb>:
1006022c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006022e:	b0ff      	sub	sp, #508	@ 0x1fc
10060230:	b08c      	sub	sp, #48	@ 0x30
10060232:	460c      	mov	r4, r1
10060234:	4605      	mov	r5, r0
10060236:	688b      	ldr	r3, [r1, #8]
10060238:	88ca      	ldrh	r2, [r1, #6]
1006023a:	8889      	ldrh	r1, [r1, #4]
1006023c:	a807      	add	r0, sp, #28
1006023e:	1d80      	adds	r0, r0, #6
10060240:	f7f2 fd87 	bl	10052d52 <aci_gatt_clt_multi_notification_int_event_copy>
10060244:	0728      	lsls	r0, r5, #28
10060246:	d502      	bpl.n	1006024e <aci_gatt_clt_multi_notification_int_event_cb+0x22>
10060248:	68a0      	ldr	r0, [r4, #8]
1006024a:	f7f1 fe93 	bl	10051f74 <ACL_pkt_release>
1006024e:	a807      	add	r0, sp, #28
10060250:	8941      	ldrh	r1, [r0, #10]
10060252:	9105      	str	r1, [sp, #20]
10060254:	8901      	ldrh	r1, [r0, #8]
10060256:	9103      	str	r1, [sp, #12]
10060258:	88c1      	ldrh	r1, [r0, #6]
1006025a:	9102      	str	r1, [sp, #8]
1006025c:	300c      	adds	r0, #12
1006025e:	9004      	str	r0, [sp, #16]
10060260:	2500      	movs	r5, #0
10060262:	9e04      	ldr	r6, [sp, #16]
10060264:	b2a8      	uxth	r0, r5
10060266:	9905      	ldr	r1, [sp, #20]
10060268:	4288      	cmp	r0, r1
1006026a:	d21c      	bcs.n	100602a6 <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
1006026c:	1831      	adds	r1, r6, r0
1006026e:	a88a      	add	r0, sp, #552	@ 0x228
10060270:	9006      	str	r0, [sp, #24]
10060272:	2402      	movs	r4, #2
10060274:	4622      	mov	r2, r4
10060276:	f7ef fae5 	bl	1004f844 <BLEPLAT_MemCpy>
1006027a:	1ca8      	adds	r0, r5, #2
1006027c:	b280      	uxth	r0, r0
1006027e:	1831      	adds	r1, r6, r0
10060280:	af89      	add	r7, sp, #548	@ 0x224
10060282:	4638      	mov	r0, r7
10060284:	4622      	mov	r2, r4
10060286:	f7ef fadd 	bl	1004f844 <BLEPLAT_MemCpy>
1006028a:	1d28      	adds	r0, r5, #4
1006028c:	b284      	uxth	r4, r0
1006028e:	1930      	adds	r0, r6, r4
10060290:	883b      	ldrh	r3, [r7, #0]
10060292:	9906      	ldr	r1, [sp, #24]
10060294:	880a      	ldrh	r2, [r1, #0]
10060296:	9000      	str	r0, [sp, #0]
10060298:	9802      	ldr	r0, [sp, #8]
1006029a:	9903      	ldr	r1, [sp, #12]
1006029c:	f7ff ff24 	bl	100600e8 <aci_gatt_clt_notification_event_notify>
100602a0:	8838      	ldrh	r0, [r7, #0]
100602a2:	1825      	adds	r5, r4, r0
100602a4:	e7de      	b.n	10060264 <aci_gatt_clt_multi_notification_int_event_cb+0x38>
100602a6:	b07f      	add	sp, #508	@ 0x1fc
100602a8:	b00c      	add	sp, #48	@ 0x30
100602aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100602ac <aci_att_clt_find_info_resp_event_cb>:
100602ac:	b5b0      	push	{r4, r5, r7, lr}
100602ae:	b0ff      	sub	sp, #508	@ 0x1fc
100602b0:	b083      	sub	sp, #12
100602b2:	460c      	mov	r4, r1
100602b4:	4605      	mov	r5, r0
100602b6:	688b      	ldr	r3, [r1, #8]
100602b8:	88ca      	ldrh	r2, [r1, #6]
100602ba:	8889      	ldrh	r1, [r1, #4]
100602bc:	4668      	mov	r0, sp
100602be:	1d80      	adds	r0, r0, #6
100602c0:	f7f2 fbc0 	bl	10052a44 <aci_att_clt_find_info_resp_event_copy>
100602c4:	0728      	lsls	r0, r5, #28
100602c6:	d502      	bpl.n	100602ce <aci_att_clt_find_info_resp_event_cb+0x22>
100602c8:	68a0      	ldr	r0, [r4, #8]
100602ca:	f7f1 fe53 	bl	10051f74 <ACL_pkt_release>
100602ce:	4668      	mov	r0, sp
100602d0:	7ac1      	ldrb	r1, [r0, #11]
100602d2:	9a03      	ldr	r2, [sp, #12]
100602d4:	0212      	lsls	r2, r2, #8
100602d6:	1851      	adds	r1, r2, r1
100602d8:	460a      	mov	r2, r1
100602da:	3209      	adds	r2, #9
100602dc:	7082      	strb	r2, [r0, #2]
100602de:	0a12      	lsrs	r2, r2, #8
100602e0:	70c2      	strb	r2, [r0, #3]
100602e2:	2204      	movs	r2, #4
100602e4:	7102      	strb	r2, [r0, #4]
100602e6:	4a05      	ldr	r2, [pc, #20]	@ (100602fc <__arm_cp.5_0>)
100602e8:	8002      	strh	r2, [r0, #0]
100602ea:	220c      	movs	r2, #12
100602ec:	7142      	strb	r2, [r0, #5]
100602ee:	310d      	adds	r1, #13
100602f0:	b289      	uxth	r1, r1
100602f2:	f7eb fc9b 	bl	1004bc2c <BLE_STACK_Event>
100602f6:	b07f      	add	sp, #508	@ 0x1fc
100602f8:	b003      	add	sp, #12
100602fa:	bdb0      	pop	{r4, r5, r7, pc}

100602fc <__arm_cp.5_0>:
100602fc:	0000ff82 	.word	0x0000ff82

10060300 <aci_att_clt_find_by_type_value_resp_event_cb>:
10060300:	b5b0      	push	{r4, r5, r7, lr}
10060302:	b0ff      	sub	sp, #508	@ 0x1fc
10060304:	b083      	sub	sp, #12
10060306:	460c      	mov	r4, r1
10060308:	4605      	mov	r5, r0
1006030a:	688b      	ldr	r3, [r1, #8]
1006030c:	88ca      	ldrh	r2, [r1, #6]
1006030e:	8889      	ldrh	r1, [r1, #4]
10060310:	4668      	mov	r0, sp
10060312:	1d80      	adds	r0, r0, #6
10060314:	f7f2 fbb4 	bl	10052a80 <aci_att_clt_find_by_type_value_resp_event_copy>
10060318:	0728      	lsls	r0, r5, #28
1006031a:	d502      	bpl.n	10060322 <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
1006031c:	68a0      	ldr	r0, [r4, #8]
1006031e:	f7f1 fe29 	bl	10051f74 <ACL_pkt_release>
10060322:	4668      	mov	r0, sp
10060324:	7a81      	ldrb	r1, [r0, #10]
10060326:	0089      	lsls	r1, r1, #2
10060328:	1dca      	adds	r2, r1, #7
1006032a:	7082      	strb	r2, [r0, #2]
1006032c:	0a12      	lsrs	r2, r2, #8
1006032e:	70c2      	strb	r2, [r0, #3]
10060330:	2205      	movs	r2, #5
10060332:	7102      	strb	r2, [r0, #4]
10060334:	4a04      	ldr	r2, [pc, #16]	@ (10060348 <__arm_cp.6_0>)
10060336:	8002      	strh	r2, [r0, #0]
10060338:	220c      	movs	r2, #12
1006033a:	7142      	strb	r2, [r0, #5]
1006033c:	310b      	adds	r1, #11
1006033e:	f7eb fc75 	bl	1004bc2c <BLE_STACK_Event>
10060342:	b07f      	add	sp, #508	@ 0x1fc
10060344:	b003      	add	sp, #12
10060346:	bdb0      	pop	{r4, r5, r7, pc}

10060348 <__arm_cp.6_0>:
10060348:	0000ff82 	.word	0x0000ff82

1006034c <aci_att_clt_read_by_type_resp_event_cb>:
1006034c:	b5b0      	push	{r4, r5, r7, lr}
1006034e:	b0ff      	sub	sp, #508	@ 0x1fc
10060350:	b083      	sub	sp, #12
10060352:	460c      	mov	r4, r1
10060354:	4605      	mov	r5, r0
10060356:	688b      	ldr	r3, [r1, #8]
10060358:	88ca      	ldrh	r2, [r1, #6]
1006035a:	8889      	ldrh	r1, [r1, #4]
1006035c:	4668      	mov	r0, sp
1006035e:	1d80      	adds	r0, r0, #6
10060360:	f7f2 fba3 	bl	10052aaa <aci_att_clt_read_by_type_resp_event_copy>
10060364:	0728      	lsls	r0, r5, #28
10060366:	d502      	bpl.n	1006036e <aci_att_clt_read_by_type_resp_event_cb+0x22>
10060368:	68a0      	ldr	r0, [r4, #8]
1006036a:	f7f1 fe03 	bl	10051f74 <ACL_pkt_release>
1006036e:	4668      	mov	r0, sp
10060370:	7ac1      	ldrb	r1, [r0, #11]
10060372:	9a03      	ldr	r2, [sp, #12]
10060374:	0212      	lsls	r2, r2, #8
10060376:	1851      	adds	r1, r2, r1
10060378:	460a      	mov	r2, r1
1006037a:	3209      	adds	r2, #9
1006037c:	7082      	strb	r2, [r0, #2]
1006037e:	0a12      	lsrs	r2, r2, #8
10060380:	70c2      	strb	r2, [r0, #3]
10060382:	2206      	movs	r2, #6
10060384:	7102      	strb	r2, [r0, #4]
10060386:	4a05      	ldr	r2, [pc, #20]	@ (1006039c <__arm_cp.7_0>)
10060388:	8002      	strh	r2, [r0, #0]
1006038a:	220c      	movs	r2, #12
1006038c:	7142      	strb	r2, [r0, #5]
1006038e:	310d      	adds	r1, #13
10060390:	b289      	uxth	r1, r1
10060392:	f7eb fc4b 	bl	1004bc2c <BLE_STACK_Event>
10060396:	b07f      	add	sp, #508	@ 0x1fc
10060398:	b003      	add	sp, #12
1006039a:	bdb0      	pop	{r4, r5, r7, pc}

1006039c <__arm_cp.7_0>:
1006039c:	0000ff82 	.word	0x0000ff82

100603a0 <aci_att_clt_read_resp_event_cb>:
100603a0:	b5b0      	push	{r4, r5, r7, lr}
100603a2:	b0ff      	sub	sp, #508	@ 0x1fc
100603a4:	b083      	sub	sp, #12
100603a6:	460c      	mov	r4, r1
100603a8:	4605      	mov	r5, r0
100603aa:	688b      	ldr	r3, [r1, #8]
100603ac:	88ca      	ldrh	r2, [r1, #6]
100603ae:	8889      	ldrh	r1, [r1, #4]
100603b0:	4668      	mov	r0, sp
100603b2:	1d80      	adds	r0, r0, #6
100603b4:	f7f2 fb97 	bl	10052ae6 <aci_att_clt_read_resp_event_copy>
100603b8:	0728      	lsls	r0, r5, #28
100603ba:	d502      	bpl.n	100603c2 <aci_att_clt_read_resp_event_cb+0x22>
100603bc:	68a0      	ldr	r0, [r4, #8]
100603be:	f7f1 fdd9 	bl	10051f74 <ACL_pkt_release>
100603c2:	4668      	mov	r0, sp
100603c4:	8941      	ldrh	r1, [r0, #10]
100603c6:	460a      	mov	r2, r1
100603c8:	3208      	adds	r2, #8
100603ca:	7082      	strb	r2, [r0, #2]
100603cc:	0a12      	lsrs	r2, r2, #8
100603ce:	70c2      	strb	r2, [r0, #3]
100603d0:	2207      	movs	r2, #7
100603d2:	7102      	strb	r2, [r0, #4]
100603d4:	4a05      	ldr	r2, [pc, #20]	@ (100603ec <__arm_cp.8_0>)
100603d6:	8002      	strh	r2, [r0, #0]
100603d8:	220c      	movs	r2, #12
100603da:	7142      	strb	r2, [r0, #5]
100603dc:	310c      	adds	r1, #12
100603de:	b289      	uxth	r1, r1
100603e0:	f7eb fc24 	bl	1004bc2c <BLE_STACK_Event>
100603e4:	b07f      	add	sp, #508	@ 0x1fc
100603e6:	b003      	add	sp, #12
100603e8:	bdb0      	pop	{r4, r5, r7, pc}
100603ea:	46c0      	nop			@ (mov r8, r8)

100603ec <__arm_cp.8_0>:
100603ec:	0000ff82 	.word	0x0000ff82

100603f0 <aci_att_clt_read_blob_resp_event_cb>:
100603f0:	b5b0      	push	{r4, r5, r7, lr}
100603f2:	b0ff      	sub	sp, #508	@ 0x1fc
100603f4:	b083      	sub	sp, #12
100603f6:	460c      	mov	r4, r1
100603f8:	4605      	mov	r5, r0
100603fa:	688b      	ldr	r3, [r1, #8]
100603fc:	88ca      	ldrh	r2, [r1, #6]
100603fe:	8889      	ldrh	r1, [r1, #4]
10060400:	4668      	mov	r0, sp
10060402:	1d80      	adds	r0, r0, #6
10060404:	f7f2 fb85 	bl	10052b12 <aci_att_clt_read_blob_resp_event_copy>
10060408:	0728      	lsls	r0, r5, #28
1006040a:	d502      	bpl.n	10060412 <aci_att_clt_read_blob_resp_event_cb+0x22>
1006040c:	68a0      	ldr	r0, [r4, #8]
1006040e:	f7f1 fdb1 	bl	10051f74 <ACL_pkt_release>
10060412:	4668      	mov	r0, sp
10060414:	8941      	ldrh	r1, [r0, #10]
10060416:	460a      	mov	r2, r1
10060418:	3208      	adds	r2, #8
1006041a:	7082      	strb	r2, [r0, #2]
1006041c:	0a12      	lsrs	r2, r2, #8
1006041e:	70c2      	strb	r2, [r0, #3]
10060420:	2208      	movs	r2, #8
10060422:	7102      	strb	r2, [r0, #4]
10060424:	4a05      	ldr	r2, [pc, #20]	@ (1006043c <__arm_cp.9_0>)
10060426:	8002      	strh	r2, [r0, #0]
10060428:	220c      	movs	r2, #12
1006042a:	7142      	strb	r2, [r0, #5]
1006042c:	310c      	adds	r1, #12
1006042e:	b289      	uxth	r1, r1
10060430:	f7eb fbfc 	bl	1004bc2c <BLE_STACK_Event>
10060434:	b07f      	add	sp, #508	@ 0x1fc
10060436:	b003      	add	sp, #12
10060438:	bdb0      	pop	{r4, r5, r7, pc}
1006043a:	46c0      	nop			@ (mov r8, r8)

1006043c <__arm_cp.9_0>:
1006043c:	0000ff82 	.word	0x0000ff82

10060440 <aci_att_clt_read_multiple_resp_event_cb>:
10060440:	b5b0      	push	{r4, r5, r7, lr}
10060442:	b0ff      	sub	sp, #508	@ 0x1fc
10060444:	b083      	sub	sp, #12
10060446:	460c      	mov	r4, r1
10060448:	4605      	mov	r5, r0
1006044a:	688b      	ldr	r3, [r1, #8]
1006044c:	88ca      	ldrh	r2, [r1, #6]
1006044e:	8889      	ldrh	r1, [r1, #4]
10060450:	4668      	mov	r0, sp
10060452:	1d80      	adds	r0, r0, #6
10060454:	f7f2 fb73 	bl	10052b3e <aci_att_clt_read_multiple_resp_event_copy>
10060458:	0728      	lsls	r0, r5, #28
1006045a:	d502      	bpl.n	10060462 <aci_att_clt_read_multiple_resp_event_cb+0x22>
1006045c:	68a0      	ldr	r0, [r4, #8]
1006045e:	f7f1 fd89 	bl	10051f74 <ACL_pkt_release>
10060462:	4668      	mov	r0, sp
10060464:	8941      	ldrh	r1, [r0, #10]
10060466:	460a      	mov	r2, r1
10060468:	3208      	adds	r2, #8
1006046a:	7082      	strb	r2, [r0, #2]
1006046c:	0a12      	lsrs	r2, r2, #8
1006046e:	70c2      	strb	r2, [r0, #3]
10060470:	2209      	movs	r2, #9
10060472:	7102      	strb	r2, [r0, #4]
10060474:	4a05      	ldr	r2, [pc, #20]	@ (1006048c <__arm_cp.10_0>)
10060476:	8002      	strh	r2, [r0, #0]
10060478:	220c      	movs	r2, #12
1006047a:	7142      	strb	r2, [r0, #5]
1006047c:	310c      	adds	r1, #12
1006047e:	b289      	uxth	r1, r1
10060480:	f7eb fbd4 	bl	1004bc2c <BLE_STACK_Event>
10060484:	b07f      	add	sp, #508	@ 0x1fc
10060486:	b003      	add	sp, #12
10060488:	bdb0      	pop	{r4, r5, r7, pc}
1006048a:	46c0      	nop			@ (mov r8, r8)

1006048c <__arm_cp.10_0>:
1006048c:	0000ff82 	.word	0x0000ff82

10060490 <aci_att_clt_read_by_group_type_resp_event_cb>:
10060490:	b5b0      	push	{r4, r5, r7, lr}
10060492:	b0ff      	sub	sp, #508	@ 0x1fc
10060494:	b083      	sub	sp, #12
10060496:	460c      	mov	r4, r1
10060498:	4605      	mov	r5, r0
1006049a:	688b      	ldr	r3, [r1, #8]
1006049c:	88ca      	ldrh	r2, [r1, #6]
1006049e:	8889      	ldrh	r1, [r1, #4]
100604a0:	4668      	mov	r0, sp
100604a2:	1d80      	adds	r0, r0, #6
100604a4:	f7f2 fb61 	bl	10052b6a <aci_att_clt_read_by_group_type_resp_event_copy>
100604a8:	0728      	lsls	r0, r5, #28
100604aa:	d502      	bpl.n	100604b2 <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
100604ac:	68a0      	ldr	r0, [r4, #8]
100604ae:	f7f1 fd61 	bl	10051f74 <ACL_pkt_release>
100604b2:	4668      	mov	r0, sp
100604b4:	7ac1      	ldrb	r1, [r0, #11]
100604b6:	9a03      	ldr	r2, [sp, #12]
100604b8:	0212      	lsls	r2, r2, #8
100604ba:	1851      	adds	r1, r2, r1
100604bc:	460a      	mov	r2, r1
100604be:	3209      	adds	r2, #9
100604c0:	7082      	strb	r2, [r0, #2]
100604c2:	0a12      	lsrs	r2, r2, #8
100604c4:	70c2      	strb	r2, [r0, #3]
100604c6:	220a      	movs	r2, #10
100604c8:	7102      	strb	r2, [r0, #4]
100604ca:	4a05      	ldr	r2, [pc, #20]	@ (100604e0 <__arm_cp.11_0>)
100604cc:	8002      	strh	r2, [r0, #0]
100604ce:	220c      	movs	r2, #12
100604d0:	7142      	strb	r2, [r0, #5]
100604d2:	310d      	adds	r1, #13
100604d4:	b289      	uxth	r1, r1
100604d6:	f7eb fba9 	bl	1004bc2c <BLE_STACK_Event>
100604da:	b07f      	add	sp, #508	@ 0x1fc
100604dc:	b003      	add	sp, #12
100604de:	bdb0      	pop	{r4, r5, r7, pc}

100604e0 <__arm_cp.11_0>:
100604e0:	0000ff82 	.word	0x0000ff82

100604e4 <aci_att_clt_prepare_write_resp_event_cb>:
100604e4:	b5b0      	push	{r4, r5, r7, lr}
100604e6:	b0ff      	sub	sp, #508	@ 0x1fc
100604e8:	b083      	sub	sp, #12
100604ea:	460c      	mov	r4, r1
100604ec:	4605      	mov	r5, r0
100604ee:	688b      	ldr	r3, [r1, #8]
100604f0:	88ca      	ldrh	r2, [r1, #6]
100604f2:	8889      	ldrh	r1, [r1, #4]
100604f4:	4668      	mov	r0, sp
100604f6:	1d80      	adds	r0, r0, #6
100604f8:	f7f2 fb55 	bl	10052ba6 <aci_att_clt_prepare_write_resp_event_copy>
100604fc:	0728      	lsls	r0, r5, #28
100604fe:	d502      	bpl.n	10060506 <aci_att_clt_prepare_write_resp_event_cb+0x22>
10060500:	68a0      	ldr	r0, [r4, #8]
10060502:	f7f1 fd37 	bl	10051f74 <ACL_pkt_release>
10060506:	4668      	mov	r0, sp
10060508:	89c1      	ldrh	r1, [r0, #14]
1006050a:	460a      	mov	r2, r1
1006050c:	320c      	adds	r2, #12
1006050e:	7082      	strb	r2, [r0, #2]
10060510:	0a12      	lsrs	r2, r2, #8
10060512:	70c2      	strb	r2, [r0, #3]
10060514:	220c      	movs	r2, #12
10060516:	7102      	strb	r2, [r0, #4]
10060518:	4b04      	ldr	r3, [pc, #16]	@ (1006052c <__arm_cp.12_0>)
1006051a:	8003      	strh	r3, [r0, #0]
1006051c:	7142      	strb	r2, [r0, #5]
1006051e:	3110      	adds	r1, #16
10060520:	b289      	uxth	r1, r1
10060522:	f7eb fb83 	bl	1004bc2c <BLE_STACK_Event>
10060526:	b07f      	add	sp, #508	@ 0x1fc
10060528:	b003      	add	sp, #12
1006052a:	bdb0      	pop	{r4, r5, r7, pc}

1006052c <__arm_cp.12_0>:
1006052c:	0000ff82 	.word	0x0000ff82

10060530 <aci_att_srv_prepare_write_req_event_cb>:
10060530:	b5f0      	push	{r4, r5, r6, r7, lr}
10060532:	b0ff      	sub	sp, #508	@ 0x1fc
10060534:	b086      	sub	sp, #24
10060536:	460c      	mov	r4, r1
10060538:	4605      	mov	r5, r0
1006053a:	890b      	ldrh	r3, [r1, #8]
1006053c:	88ca      	ldrh	r2, [r1, #6]
1006053e:	8889      	ldrh	r1, [r1, #4]
10060540:	8960      	ldrh	r0, [r4, #10]
10060542:	89a6      	ldrh	r6, [r4, #12]
10060544:	6927      	ldr	r7, [r4, #16]
10060546:	9000      	str	r0, [sp, #0]
10060548:	9601      	str	r6, [sp, #4]
1006054a:	9702      	str	r7, [sp, #8]
1006054c:	a803      	add	r0, sp, #12
1006054e:	1d80      	adds	r0, r0, #6
10060550:	f7f2 fbe2 	bl	10052d18 <aci_att_srv_prepare_write_req_event_copy>
10060554:	0728      	lsls	r0, r5, #28
10060556:	d502      	bpl.n	1006055e <aci_att_srv_prepare_write_req_event_cb+0x2e>
10060558:	6920      	ldr	r0, [r4, #16]
1006055a:	f7f1 fd0b 	bl	10051f74 <ACL_pkt_release>
1006055e:	a803      	add	r0, sp, #12
10060560:	89c1      	ldrh	r1, [r0, #14]
10060562:	460a      	mov	r2, r1
10060564:	320c      	adds	r2, #12
10060566:	7082      	strb	r2, [r0, #2]
10060568:	0a12      	lsrs	r2, r2, #8
1006056a:	70c2      	strb	r2, [r0, #3]
1006056c:	221b      	movs	r2, #27
1006056e:	7102      	strb	r2, [r0, #4]
10060570:	4a05      	ldr	r2, [pc, #20]	@ (10060588 <__arm_cp.13_0>)
10060572:	8002      	strh	r2, [r0, #0]
10060574:	220c      	movs	r2, #12
10060576:	7142      	strb	r2, [r0, #5]
10060578:	3110      	adds	r1, #16
1006057a:	b289      	uxth	r1, r1
1006057c:	f7eb fb56 	bl	1004bc2c <BLE_STACK_Event>
10060580:	b07f      	add	sp, #508	@ 0x1fc
10060582:	b006      	add	sp, #24
10060584:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060586:	46c0      	nop			@ (mov r8, r8)

10060588 <__arm_cp.13_0>:
10060588:	0000ff82 	.word	0x0000ff82

1006058c <aci_att_clt_read_multiple_var_len_resp_event_cb>:
1006058c:	b5b0      	push	{r4, r5, r7, lr}
1006058e:	b0ff      	sub	sp, #508	@ 0x1fc
10060590:	b083      	sub	sp, #12
10060592:	460c      	mov	r4, r1
10060594:	4605      	mov	r5, r0
10060596:	688b      	ldr	r3, [r1, #8]
10060598:	88ca      	ldrh	r2, [r1, #6]
1006059a:	8889      	ldrh	r1, [r1, #4]
1006059c:	4668      	mov	r0, sp
1006059e:	1d80      	adds	r0, r0, #6
100605a0:	f7f2 fbed 	bl	10052d7e <aci_att_clt_read_multiple_var_len_resp_event_copy>
100605a4:	0728      	lsls	r0, r5, #28
100605a6:	d502      	bpl.n	100605ae <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
100605a8:	68a0      	ldr	r0, [r4, #8]
100605aa:	f7f1 fce3 	bl	10051f74 <ACL_pkt_release>
100605ae:	4668      	mov	r0, sp
100605b0:	8941      	ldrh	r1, [r0, #10]
100605b2:	460a      	mov	r2, r1
100605b4:	3208      	adds	r2, #8
100605b6:	7082      	strb	r2, [r0, #2]
100605b8:	0a12      	lsrs	r2, r2, #8
100605ba:	70c2      	strb	r2, [r0, #3]
100605bc:	221e      	movs	r2, #30
100605be:	7102      	strb	r2, [r0, #4]
100605c0:	4a05      	ldr	r2, [pc, #20]	@ (100605d8 <__arm_cp.14_0>)
100605c2:	8002      	strh	r2, [r0, #0]
100605c4:	220c      	movs	r2, #12
100605c6:	7142      	strb	r2, [r0, #5]
100605c8:	310c      	adds	r1, #12
100605ca:	b289      	uxth	r1, r1
100605cc:	f7eb fb2e 	bl	1004bc2c <BLE_STACK_Event>
100605d0:	b07f      	add	sp, #508	@ 0x1fc
100605d2:	b003      	add	sp, #12
100605d4:	bdb0      	pop	{r4, r5, r7, pc}
100605d6:	46c0      	nop			@ (mov r8, r8)

100605d8 <__arm_cp.14_0>:
100605d8:	0000ff82 	.word	0x0000ff82

100605dc <aci_gatt_srv_attribute_modified_event_push_noinline>:
100605dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100605de:	b085      	sub	sp, #20
100605e0:	4605      	mov	r5, r0
100605e2:	06c0      	lsls	r0, r0, #27
100605e4:	d445      	bmi.n	10060672 <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
100605e6:	4826      	ldr	r0, [pc, #152]	@ (10060680 <__arm_cp.15_0>)
100605e8:	6800      	ldr	r0, [r0, #0]
100605ea:	2450      	movs	r4, #80	@ 0x50
100605ec:	5d00      	ldrb	r0, [r0, r4]
100605ee:	2400      	movs	r4, #0
100605f0:	07c0      	lsls	r0, r0, #31
100605f2:	d03f      	beq.n	10060674 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
100605f4:	9302      	str	r3, [sp, #8]
100605f6:	9203      	str	r2, [sp, #12]
100605f8:	9104      	str	r1, [sp, #16]
100605fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100605fc:	4821      	ldr	r0, [pc, #132]	@ (10060684 <__arm_cp.15_1>)
100605fe:	6800      	ldr	r0, [r0, #0]
10060600:	0769      	lsls	r1, r5, #29
10060602:	0ec9      	lsrs	r1, r1, #27
10060604:	1840      	adds	r0, r0, r1
10060606:	6900      	ldr	r0, [r0, #16]
10060608:	1e71      	subs	r1, r6, #1
1006060a:	2203      	movs	r2, #3
1006060c:	430a      	orrs	r2, r1
1006060e:	3211      	adds	r2, #17
10060610:	0891      	lsrs	r1, r2, #2
10060612:	b28b      	uxth	r3, r1
10060614:	2256      	movs	r2, #86	@ 0x56
10060616:	4629      	mov	r1, r5
10060618:	f7f1 fe60 	bl	100522dc <aci_event_fifo_push_header>
1006061c:	2800      	cmp	r0, #0
1006061e:	d02c      	beq.n	1006067a <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10060620:	4607      	mov	r7, r0
10060622:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060624:	9001      	str	r0, [sp, #4]
10060626:	743e      	strb	r6, [r7, #16]
10060628:	9902      	ldr	r1, [sp, #8]
1006062a:	73b9      	strb	r1, [r7, #14]
1006062c:	9b03      	ldr	r3, [sp, #12]
1006062e:	733b      	strb	r3, [r7, #12]
10060630:	9a04      	ldr	r2, [sp, #16]
10060632:	72ba      	strb	r2, [r7, #10]
10060634:	0a30      	lsrs	r0, r6, #8
10060636:	7478      	strb	r0, [r7, #17]
10060638:	0a08      	lsrs	r0, r1, #8
1006063a:	73f8      	strb	r0, [r7, #15]
1006063c:	0a18      	lsrs	r0, r3, #8
1006063e:	7378      	strb	r0, [r7, #13]
10060640:	0a10      	lsrs	r0, r2, #8
10060642:	72f8      	strb	r0, [r7, #11]
10060644:	4638      	mov	r0, r7
10060646:	3012      	adds	r0, #18
10060648:	9901      	ldr	r1, [sp, #4]
1006064a:	4632      	mov	r2, r6
1006064c:	f7ef f8fa 	bl	1004f844 <BLEPLAT_MemCpy>
10060650:	200c      	movs	r0, #12
10060652:	7278      	strb	r0, [r7, #9]
10060654:	2001      	movs	r0, #1
10060656:	7238      	strb	r0, [r7, #8]
10060658:	360a      	adds	r6, #10
1006065a:	0a30      	lsrs	r0, r6, #8
1006065c:	71f8      	strb	r0, [r7, #7]
1006065e:	71be      	strb	r6, [r7, #6]
10060660:	20ff      	movs	r0, #255	@ 0xff
10060662:	7178      	strb	r0, [r7, #5]
10060664:	2082      	movs	r0, #130	@ 0x82
10060666:	7138      	strb	r0, [r7, #4]
10060668:	4628      	mov	r0, r5
1006066a:	4639      	mov	r1, r7
1006066c:	f7f1 fed3 	bl	10052416 <aci_event_fifo_push>
10060670:	e000      	b.n	10060674 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10060672:	2486      	movs	r4, #134	@ 0x86
10060674:	4620      	mov	r0, r4
10060676:	b005      	add	sp, #20
10060678:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006067a:	2407      	movs	r4, #7
1006067c:	e7fa      	b.n	10060674 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
1006067e:	46c0      	nop			@ (mov r8, r8)

10060680 <__arm_cp.15_0>:
10060680:	20000f20 	.word	0x20000f20

10060684 <__arm_cp.15_1>:
10060684:	20000ed0 	.word	0x20000ed0

10060688 <aci_gatt_proc_timeout_event_push_noinline>:
10060688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006068a:	4604      	mov	r4, r0
1006068c:	06c0      	lsls	r0, r0, #27
1006068e:	d408      	bmi.n	100606a2 <aci_gatt_proc_timeout_event_push_noinline+0x1a>
10060690:	460d      	mov	r5, r1
10060692:	4819      	ldr	r0, [pc, #100]	@ (100606f8 <__arm_cp.16_0>)
10060694:	6800      	ldr	r0, [r0, #0]
10060696:	2150      	movs	r1, #80	@ 0x50
10060698:	5c40      	ldrb	r0, [r0, r1]
1006069a:	0780      	lsls	r0, r0, #30
1006069c:	d403      	bmi.n	100606a6 <aci_gatt_proc_timeout_event_push_noinline+0x1e>
1006069e:	2700      	movs	r7, #0
100606a0:	e027      	b.n	100606f2 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100606a2:	2786      	movs	r7, #134	@ 0x86
100606a4:	e025      	b.n	100606f2 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100606a6:	4616      	mov	r6, r2
100606a8:	4814      	ldr	r0, [pc, #80]	@ (100606fc <__arm_cp.16_1>)
100606aa:	6800      	ldr	r0, [r0, #0]
100606ac:	0761      	lsls	r1, r4, #29
100606ae:	0ec9      	lsrs	r1, r1, #27
100606b0:	1840      	adds	r0, r0, r1
100606b2:	6900      	ldr	r0, [r0, #16]
100606b4:	2257      	movs	r2, #87	@ 0x57
100606b6:	2303      	movs	r3, #3
100606b8:	4621      	mov	r1, r4
100606ba:	f7f1 fe0f 	bl	100522dc <aci_event_fifo_push_header>
100606be:	2800      	cmp	r0, #0
100606c0:	d016      	beq.n	100606f0 <aci_gatt_proc_timeout_event_push_noinline+0x68>
100606c2:	4601      	mov	r1, r0
100606c4:	7306      	strb	r6, [r0, #12]
100606c6:	7285      	strb	r5, [r0, #10]
100606c8:	200c      	movs	r0, #12
100606ca:	7248      	strb	r0, [r1, #9]
100606cc:	2002      	movs	r0, #2
100606ce:	7208      	strb	r0, [r1, #8]
100606d0:	2700      	movs	r7, #0
100606d2:	71cf      	strb	r7, [r1, #7]
100606d4:	2006      	movs	r0, #6
100606d6:	7188      	strb	r0, [r1, #6]
100606d8:	20ff      	movs	r0, #255	@ 0xff
100606da:	7148      	strb	r0, [r1, #5]
100606dc:	2082      	movs	r0, #130	@ 0x82
100606de:	7108      	strb	r0, [r1, #4]
100606e0:	0a30      	lsrs	r0, r6, #8
100606e2:	7348      	strb	r0, [r1, #13]
100606e4:	0a28      	lsrs	r0, r5, #8
100606e6:	72c8      	strb	r0, [r1, #11]
100606e8:	4620      	mov	r0, r4
100606ea:	f7f1 fe94 	bl	10052416 <aci_event_fifo_push>
100606ee:	e000      	b.n	100606f2 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100606f0:	2707      	movs	r7, #7
100606f2:	4638      	mov	r0, r7
100606f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100606f6:	46c0      	nop			@ (mov r8, r8)

100606f8 <__arm_cp.16_0>:
100606f8:	20000f20 	.word	0x20000f20

100606fc <__arm_cp.16_1>:
100606fc:	20000ed0 	.word	0x20000ed0

10060700 <aci_gatt_clt_indication_event_push_noinline>:
10060700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060702:	4605      	mov	r5, r0
10060704:	06c0      	lsls	r0, r0, #27
10060706:	d421      	bmi.n	1006074c <aci_gatt_clt_indication_event_push_noinline+0x4c>
10060708:	460e      	mov	r6, r1
1006070a:	4813      	ldr	r0, [pc, #76]	@ (10060758 <__arm_cp.17_0>)
1006070c:	6800      	ldr	r0, [r0, #0]
1006070e:	2151      	movs	r1, #81	@ 0x51
10060710:	5c40      	ldrb	r0, [r0, r1]
10060712:	2400      	movs	r4, #0
10060714:	0680      	lsls	r0, r0, #26
10060716:	d51a      	bpl.n	1006074e <aci_gatt_clt_indication_event_push_noinline+0x4e>
10060718:	4617      	mov	r7, r2
1006071a:	9300      	str	r3, [sp, #0]
1006071c:	480f      	ldr	r0, [pc, #60]	@ (1006075c <__arm_cp.17_1>)
1006071e:	6800      	ldr	r0, [r0, #0]
10060720:	0769      	lsls	r1, r5, #29
10060722:	0ec9      	lsrs	r1, r1, #27
10060724:	1840      	adds	r0, r0, r1
10060726:	6900      	ldr	r0, [r0, #16]
10060728:	220f      	movs	r2, #15
1006072a:	2303      	movs	r3, #3
1006072c:	4629      	mov	r1, r5
1006072e:	f7f1 fdd5 	bl	100522dc <aci_event_fifo_push_header>
10060732:	2800      	cmp	r0, #0
10060734:	d00d      	beq.n	10060752 <aci_gatt_clt_indication_event_push_noinline+0x52>
10060736:	4601      	mov	r1, r0
10060738:	9800      	ldr	r0, [sp, #0]
1006073a:	60c8      	str	r0, [r1, #12]
1006073c:	814f      	strh	r7, [r1, #10]
1006073e:	810e      	strh	r6, [r1, #8]
10060740:	4807      	ldr	r0, [pc, #28]	@ (10060760 <__arm_cp.17_2>)
10060742:	6048      	str	r0, [r1, #4]
10060744:	4628      	mov	r0, r5
10060746:	f7f1 fe66 	bl	10052416 <aci_event_fifo_push>
1006074a:	e000      	b.n	1006074e <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006074c:	2486      	movs	r4, #134	@ 0x86
1006074e:	4620      	mov	r0, r4
10060750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060752:	2407      	movs	r4, #7
10060754:	e7fb      	b.n	1006074e <aci_gatt_clt_indication_event_push_noinline+0x4e>
10060756:	46c0      	nop			@ (mov r8, r8)

10060758 <__arm_cp.17_0>:
10060758:	20000f20 	.word	0x20000f20

1006075c <__arm_cp.17_1>:
1006075c:	20000ed0 	.word	0x20000ed0

10060760 <__arm_cp.17_2>:
10060760:	10060141 	.word	0x10060141

10060764 <aci_gatt_clt_notification_event_push_noinline>:
10060764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060766:	4605      	mov	r5, r0
10060768:	06c0      	lsls	r0, r0, #27
1006076a:	d421      	bmi.n	100607b0 <aci_gatt_clt_notification_event_push_noinline+0x4c>
1006076c:	460e      	mov	r6, r1
1006076e:	4813      	ldr	r0, [pc, #76]	@ (100607bc <__arm_cp.18_0>)
10060770:	6800      	ldr	r0, [r0, #0]
10060772:	2151      	movs	r1, #81	@ 0x51
10060774:	5c40      	ldrb	r0, [r0, r1]
10060776:	2400      	movs	r4, #0
10060778:	0640      	lsls	r0, r0, #25
1006077a:	d51a      	bpl.n	100607b2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
1006077c:	4617      	mov	r7, r2
1006077e:	9300      	str	r3, [sp, #0]
10060780:	480f      	ldr	r0, [pc, #60]	@ (100607c0 <__arm_cp.18_1>)
10060782:	6800      	ldr	r0, [r0, #0]
10060784:	0769      	lsls	r1, r5, #29
10060786:	0ec9      	lsrs	r1, r1, #27
10060788:	1840      	adds	r0, r0, r1
1006078a:	6900      	ldr	r0, [r0, #16]
1006078c:	2210      	movs	r2, #16
1006078e:	2303      	movs	r3, #3
10060790:	4629      	mov	r1, r5
10060792:	f7f1 fda3 	bl	100522dc <aci_event_fifo_push_header>
10060796:	2800      	cmp	r0, #0
10060798:	d00d      	beq.n	100607b6 <aci_gatt_clt_notification_event_push_noinline+0x52>
1006079a:	4601      	mov	r1, r0
1006079c:	9800      	ldr	r0, [sp, #0]
1006079e:	60c8      	str	r0, [r1, #12]
100607a0:	814f      	strh	r7, [r1, #10]
100607a2:	810e      	strh	r6, [r1, #8]
100607a4:	4807      	ldr	r0, [pc, #28]	@ (100607c4 <__arm_cp.18_2>)
100607a6:	6048      	str	r0, [r1, #4]
100607a8:	4628      	mov	r0, r5
100607aa:	f7f1 fe34 	bl	10052416 <aci_event_fifo_push>
100607ae:	e000      	b.n	100607b2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100607b0:	2486      	movs	r4, #134	@ 0x86
100607b2:	4620      	mov	r0, r4
100607b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100607b6:	2407      	movs	r4, #7
100607b8:	e7fb      	b.n	100607b2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100607ba:	46c0      	nop			@ (mov r8, r8)

100607bc <__arm_cp.18_0>:
100607bc:	20000f20 	.word	0x20000f20

100607c0 <__arm_cp.18_1>:
100607c0:	20000ed0 	.word	0x20000ed0

100607c4 <__arm_cp.18_2>:
100607c4:	10060191 	.word	0x10060191

100607c8 <aci_gatt_clt_error_resp_event_push_noinline>:
100607c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100607ca:	4604      	mov	r4, r0
100607cc:	06c0      	lsls	r0, r0, #27
100607ce:	d408      	bmi.n	100607e2 <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
100607d0:	460d      	mov	r5, r1
100607d2:	481e      	ldr	r0, [pc, #120]	@ (1006084c <__arm_cp.20_0>)
100607d4:	6800      	ldr	r0, [r0, #0]
100607d6:	2151      	movs	r1, #81	@ 0x51
100607d8:	5640      	ldrsb	r0, [r0, r1]
100607da:	2800      	cmp	r0, #0
100607dc:	d404      	bmi.n	100607e8 <aci_gatt_clt_error_resp_event_push_noinline+0x20>
100607de:	2700      	movs	r7, #0
100607e0:	e000      	b.n	100607e4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
100607e2:	2786      	movs	r7, #134	@ 0x86
100607e4:	4638      	mov	r0, r7
100607e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100607e8:	461f      	mov	r7, r3
100607ea:	4616      	mov	r6, r2
100607ec:	4818      	ldr	r0, [pc, #96]	@ (10060850 <__arm_cp.20_1>)
100607ee:	6800      	ldr	r0, [r0, #0]
100607f0:	0761      	lsls	r1, r4, #29
100607f2:	0ec9      	lsrs	r1, r1, #27
100607f4:	1840      	adds	r0, r0, r1
100607f6:	6900      	ldr	r0, [r0, #16]
100607f8:	225b      	movs	r2, #91	@ 0x5b
100607fa:	2304      	movs	r3, #4
100607fc:	4621      	mov	r1, r4
100607fe:	f7f1 fd6d 	bl	100522dc <aci_event_fifo_push_header>
10060802:	2800      	cmp	r0, #0
10060804:	d020      	beq.n	10060848 <aci_gatt_clt_error_resp_event_push_noinline+0x80>
10060806:	4601      	mov	r1, r0
10060808:	9a07      	ldr	r2, [sp, #28]
1006080a:	9806      	ldr	r0, [sp, #24]
1006080c:	9000      	str	r0, [sp, #0]
1006080e:	73c8      	strb	r0, [r1, #15]
10060810:	730e      	strb	r6, [r1, #12]
10060812:	728d      	strb	r5, [r1, #10]
10060814:	230c      	movs	r3, #12
10060816:	724b      	strb	r3, [r1, #9]
10060818:	2311      	movs	r3, #17
1006081a:	720b      	strb	r3, [r1, #8]
1006081c:	4638      	mov	r0, r7
1006081e:	2700      	movs	r7, #0
10060820:	71cf      	strb	r7, [r1, #7]
10060822:	230a      	movs	r3, #10
10060824:	718b      	strb	r3, [r1, #6]
10060826:	744a      	strb	r2, [r1, #17]
10060828:	7388      	strb	r0, [r1, #14]
1006082a:	22ff      	movs	r2, #255	@ 0xff
1006082c:	714a      	strb	r2, [r1, #5]
1006082e:	2282      	movs	r2, #130	@ 0x82
10060830:	710a      	strb	r2, [r1, #4]
10060832:	9800      	ldr	r0, [sp, #0]
10060834:	0a00      	lsrs	r0, r0, #8
10060836:	7408      	strb	r0, [r1, #16]
10060838:	0a30      	lsrs	r0, r6, #8
1006083a:	7348      	strb	r0, [r1, #13]
1006083c:	0a28      	lsrs	r0, r5, #8
1006083e:	72c8      	strb	r0, [r1, #11]
10060840:	4620      	mov	r0, r4
10060842:	f7f1 fde8 	bl	10052416 <aci_event_fifo_push>
10060846:	e7cd      	b.n	100607e4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10060848:	2707      	movs	r7, #7
1006084a:	e7cb      	b.n	100607e4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

1006084c <__arm_cp.20_0>:
1006084c:	20000f20 	.word	0x20000f20

10060850 <__arm_cp.20_1>:
10060850:	20000ed0 	.word	0x20000ed0

10060854 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
10060854:	b5f0      	push	{r4, r5, r6, r7, lr}
10060856:	b087      	sub	sp, #28
10060858:	4605      	mov	r5, r0
1006085a:	06c0      	lsls	r0, r0, #27
1006085c:	d443      	bmi.n	100608e6 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
1006085e:	460e      	mov	r6, r1
10060860:	4824      	ldr	r0, [pc, #144]	@ (100608f4 <__arm_cp.21_0>)
10060862:	6800      	ldr	r0, [r0, #0]
10060864:	2152      	movs	r1, #82	@ 0x52
10060866:	5c40      	ldrb	r0, [r0, r1]
10060868:	2400      	movs	r4, #0
1006086a:	0780      	lsls	r0, r0, #30
1006086c:	d53c      	bpl.n	100608e8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006086e:	9204      	str	r2, [sp, #16]
10060870:	9305      	str	r3, [sp, #20]
10060872:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10060874:	4820      	ldr	r0, [pc, #128]	@ (100608f8 <__arm_cp.21_1>)
10060876:	6800      	ldr	r0, [r0, #0]
10060878:	0769      	lsls	r1, r5, #29
1006087a:	0ec9      	lsrs	r1, r1, #27
1006087c:	1840      	adds	r0, r0, r1
1006087e:	6900      	ldr	r0, [r0, #16]
10060880:	491e      	ldr	r1, [pc, #120]	@ (100608fc <__arm_cp.21_2>)
10060882:	9206      	str	r2, [sp, #24]
10060884:	1851      	adds	r1, r2, r1
10060886:	2203      	movs	r2, #3
10060888:	430a      	orrs	r2, r1
1006088a:	3211      	adds	r2, #17
1006088c:	0891      	lsrs	r1, r2, #2
1006088e:	b28b      	uxth	r3, r1
10060890:	225c      	movs	r2, #92	@ 0x5c
10060892:	4629      	mov	r1, r5
10060894:	f7f1 fd22 	bl	100522dc <aci_event_fifo_push_header>
10060898:	2800      	cmp	r0, #0
1006089a:	d028      	beq.n	100608ee <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
1006089c:	4607      	mov	r7, r0
1006089e:	990d      	ldr	r1, [sp, #52]	@ 0x34
100608a0:	9806      	ldr	r0, [sp, #24]
100608a2:	9000      	str	r0, [sp, #0]
100608a4:	9103      	str	r1, [sp, #12]
100608a6:	9101      	str	r1, [sp, #4]
100608a8:	1d38      	adds	r0, r7, #4
100608aa:	4631      	mov	r1, r6
100608ac:	9a04      	ldr	r2, [sp, #16]
100608ae:	9b05      	ldr	r3, [sp, #20]
100608b0:	f7f2 f9f3 	bl	10052c9a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
100608b4:	0728      	lsls	r0, r5, #28
100608b6:	d504      	bpl.n	100608c2 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
100608b8:	9803      	ldr	r0, [sp, #12]
100608ba:	f7f1 fb5b 	bl	10051f74 <ACL_pkt_release>
100608be:	20f7      	movs	r0, #247	@ 0xf7
100608c0:	4005      	ands	r5, r0
100608c2:	200c      	movs	r0, #12
100608c4:	7278      	strb	r0, [r7, #9]
100608c6:	2012      	movs	r0, #18
100608c8:	7238      	strb	r0, [r7, #8]
100608ca:	20ff      	movs	r0, #255	@ 0xff
100608cc:	7178      	strb	r0, [r7, #5]
100608ce:	2082      	movs	r0, #130	@ 0x82
100608d0:	7138      	strb	r0, [r7, #4]
100608d2:	9806      	ldr	r0, [sp, #24]
100608d4:	1dc0      	adds	r0, r0, #7
100608d6:	71b8      	strb	r0, [r7, #6]
100608d8:	0a00      	lsrs	r0, r0, #8
100608da:	71f8      	strb	r0, [r7, #7]
100608dc:	4628      	mov	r0, r5
100608de:	4639      	mov	r1, r7
100608e0:	f7f1 fd99 	bl	10052416 <aci_event_fifo_push>
100608e4:	e000      	b.n	100608e8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100608e6:	2486      	movs	r4, #134	@ 0x86
100608e8:	4620      	mov	r0, r4
100608ea:	b007      	add	sp, #28
100608ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100608ee:	2407      	movs	r4, #7
100608f0:	e7fa      	b.n	100608e8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100608f2:	46c0      	nop			@ (mov r8, r8)

100608f4 <__arm_cp.21_0>:
100608f4:	20000f20 	.word	0x20000f20

100608f8 <__arm_cp.21_1>:
100608f8:	20000ed0 	.word	0x20000ed0

100608fc <__arm_cp.21_2>:
100608fc:	0003fffd 	.word	0x0003fffd

10060900 <aci_gatt_tx_pool_available_event_push_noinline>:
10060900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060902:	4604      	mov	r4, r0
10060904:	06c0      	lsls	r0, r0, #27
10060906:	d425      	bmi.n	10060954 <aci_gatt_tx_pool_available_event_push_noinline+0x54>
10060908:	4616      	mov	r6, r2
1006090a:	460d      	mov	r5, r1
1006090c:	4814      	ldr	r0, [pc, #80]	@ (10060960 <__arm_cp.22_0>)
1006090e:	6800      	ldr	r0, [r0, #0]
10060910:	0761      	lsls	r1, r4, #29
10060912:	0ec9      	lsrs	r1, r1, #27
10060914:	1840      	adds	r0, r0, r1
10060916:	6900      	ldr	r0, [r0, #16]
10060918:	225d      	movs	r2, #93	@ 0x5d
1006091a:	2303      	movs	r3, #3
1006091c:	4621      	mov	r1, r4
1006091e:	f7f1 fcdd 	bl	100522dc <aci_event_fifo_push_header>
10060922:	2800      	cmp	r0, #0
10060924:	d018      	beq.n	10060958 <aci_gatt_tx_pool_available_event_push_noinline+0x58>
10060926:	4601      	mov	r1, r0
10060928:	7306      	strb	r6, [r0, #12]
1006092a:	7285      	strb	r5, [r0, #10]
1006092c:	200c      	movs	r0, #12
1006092e:	7248      	strb	r0, [r1, #9]
10060930:	2016      	movs	r0, #22
10060932:	7208      	strb	r0, [r1, #8]
10060934:	2700      	movs	r7, #0
10060936:	71cf      	strb	r7, [r1, #7]
10060938:	2006      	movs	r0, #6
1006093a:	7188      	strb	r0, [r1, #6]
1006093c:	20ff      	movs	r0, #255	@ 0xff
1006093e:	7148      	strb	r0, [r1, #5]
10060940:	2082      	movs	r0, #130	@ 0x82
10060942:	7108      	strb	r0, [r1, #4]
10060944:	0a30      	lsrs	r0, r6, #8
10060946:	7348      	strb	r0, [r1, #13]
10060948:	0a28      	lsrs	r0, r5, #8
1006094a:	72c8      	strb	r0, [r1, #11]
1006094c:	4620      	mov	r0, r4
1006094e:	f7f1 fd62 	bl	10052416 <aci_event_fifo_push>
10060952:	e002      	b.n	1006095a <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10060954:	2786      	movs	r7, #134	@ 0x86
10060956:	e000      	b.n	1006095a <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10060958:	2707      	movs	r7, #7
1006095a:	4638      	mov	r0, r7
1006095c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006095e:	46c0      	nop			@ (mov r8, r8)

10060960 <__arm_cp.22_0>:
10060960:	20000ed0 	.word	0x20000ed0

10060964 <aci_gatt_srv_confirmation_event_push_noinline>:
10060964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060966:	4604      	mov	r4, r0
10060968:	06c0      	lsls	r0, r0, #27
1006096a:	d425      	bmi.n	100609b8 <aci_gatt_srv_confirmation_event_push_noinline+0x54>
1006096c:	4616      	mov	r6, r2
1006096e:	460d      	mov	r5, r1
10060970:	4814      	ldr	r0, [pc, #80]	@ (100609c4 <__arm_cp.23_0>)
10060972:	6800      	ldr	r0, [r0, #0]
10060974:	0761      	lsls	r1, r4, #29
10060976:	0ec9      	lsrs	r1, r1, #27
10060978:	1840      	adds	r0, r0, r1
1006097a:	6900      	ldr	r0, [r0, #16]
1006097c:	225e      	movs	r2, #94	@ 0x5e
1006097e:	2303      	movs	r3, #3
10060980:	4621      	mov	r1, r4
10060982:	f7f1 fcab 	bl	100522dc <aci_event_fifo_push_header>
10060986:	2800      	cmp	r0, #0
10060988:	d018      	beq.n	100609bc <aci_gatt_srv_confirmation_event_push_noinline+0x58>
1006098a:	4601      	mov	r1, r0
1006098c:	7306      	strb	r6, [r0, #12]
1006098e:	7285      	strb	r5, [r0, #10]
10060990:	200c      	movs	r0, #12
10060992:	7248      	strb	r0, [r1, #9]
10060994:	2017      	movs	r0, #23
10060996:	7208      	strb	r0, [r1, #8]
10060998:	2700      	movs	r7, #0
1006099a:	71cf      	strb	r7, [r1, #7]
1006099c:	2006      	movs	r0, #6
1006099e:	7188      	strb	r0, [r1, #6]
100609a0:	20ff      	movs	r0, #255	@ 0xff
100609a2:	7148      	strb	r0, [r1, #5]
100609a4:	2082      	movs	r0, #130	@ 0x82
100609a6:	7108      	strb	r0, [r1, #4]
100609a8:	0a30      	lsrs	r0, r6, #8
100609aa:	7348      	strb	r0, [r1, #13]
100609ac:	0a28      	lsrs	r0, r5, #8
100609ae:	72c8      	strb	r0, [r1, #11]
100609b0:	4620      	mov	r0, r4
100609b2:	f7f1 fd30 	bl	10052416 <aci_event_fifo_push>
100609b6:	e002      	b.n	100609be <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100609b8:	2786      	movs	r7, #134	@ 0x86
100609ba:	e000      	b.n	100609be <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100609bc:	2707      	movs	r7, #7
100609be:	4638      	mov	r0, r7
100609c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100609c2:	46c0      	nop			@ (mov r8, r8)

100609c4 <__arm_cp.23_0>:
100609c4:	20000ed0 	.word	0x20000ed0

100609c8 <aci_gatt_srv_read_event_push_noinline>:
100609c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100609ca:	4604      	mov	r4, r0
100609cc:	06c0      	lsls	r0, r0, #27
100609ce:	d42e      	bmi.n	10060a2e <aci_gatt_srv_read_event_push_noinline+0x66>
100609d0:	461f      	mov	r7, r3
100609d2:	4616      	mov	r6, r2
100609d4:	460d      	mov	r5, r1
100609d6:	4818      	ldr	r0, [pc, #96]	@ (10060a38 <__arm_cp.24_0>)
100609d8:	6800      	ldr	r0, [r0, #0]
100609da:	0761      	lsls	r1, r4, #29
100609dc:	0ec9      	lsrs	r1, r1, #27
100609de:	1840      	adds	r0, r0, r1
100609e0:	6900      	ldr	r0, [r0, #16]
100609e2:	225f      	movs	r2, #95	@ 0x5f
100609e4:	2304      	movs	r3, #4
100609e6:	4621      	mov	r1, r4
100609e8:	f7f1 fc78 	bl	100522dc <aci_event_fifo_push_header>
100609ec:	2800      	cmp	r0, #0
100609ee:	d020      	beq.n	10060a32 <aci_gatt_srv_read_event_push_noinline+0x6a>
100609f0:	4601      	mov	r1, r0
100609f2:	9806      	ldr	r0, [sp, #24]
100609f4:	7408      	strb	r0, [r1, #16]
100609f6:	738f      	strb	r7, [r1, #14]
100609f8:	730e      	strb	r6, [r1, #12]
100609fa:	728d      	strb	r5, [r1, #10]
100609fc:	220c      	movs	r2, #12
100609fe:	724a      	strb	r2, [r1, #9]
10060a00:	2219      	movs	r2, #25
10060a02:	720a      	strb	r2, [r1, #8]
10060a04:	462b      	mov	r3, r5
10060a06:	2500      	movs	r5, #0
10060a08:	71cd      	strb	r5, [r1, #7]
10060a0a:	220a      	movs	r2, #10
10060a0c:	718a      	strb	r2, [r1, #6]
10060a0e:	22ff      	movs	r2, #255	@ 0xff
10060a10:	714a      	strb	r2, [r1, #5]
10060a12:	2282      	movs	r2, #130	@ 0x82
10060a14:	710a      	strb	r2, [r1, #4]
10060a16:	0a00      	lsrs	r0, r0, #8
10060a18:	7448      	strb	r0, [r1, #17]
10060a1a:	0a38      	lsrs	r0, r7, #8
10060a1c:	73c8      	strb	r0, [r1, #15]
10060a1e:	0a30      	lsrs	r0, r6, #8
10060a20:	7348      	strb	r0, [r1, #13]
10060a22:	0a18      	lsrs	r0, r3, #8
10060a24:	72c8      	strb	r0, [r1, #11]
10060a26:	4620      	mov	r0, r4
10060a28:	f7f1 fcf5 	bl	10052416 <aci_event_fifo_push>
10060a2c:	e002      	b.n	10060a34 <aci_gatt_srv_read_event_push_noinline+0x6c>
10060a2e:	2586      	movs	r5, #134	@ 0x86
10060a30:	e000      	b.n	10060a34 <aci_gatt_srv_read_event_push_noinline+0x6c>
10060a32:	2507      	movs	r5, #7
10060a34:	4628      	mov	r0, r5
10060a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060a38 <__arm_cp.24_0>:
10060a38:	20000ed0 	.word	0x20000ed0

10060a3c <aci_gatt_srv_write_event_push_noinline>:
10060a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060a3e:	4604      	mov	r4, r0
10060a40:	06c0      	lsls	r0, r0, #27
10060a42:	d420      	bmi.n	10060a86 <aci_gatt_srv_write_event_push_noinline+0x4a>
10060a44:	461f      	mov	r7, r3
10060a46:	4616      	mov	r6, r2
10060a48:	460d      	mov	r5, r1
10060a4a:	4811      	ldr	r0, [pc, #68]	@ (10060a90 <__arm_cp.25_0>)
10060a4c:	6800      	ldr	r0, [r0, #0]
10060a4e:	0761      	lsls	r1, r4, #29
10060a50:	0ec9      	lsrs	r1, r1, #27
10060a52:	1840      	adds	r0, r0, r1
10060a54:	6900      	ldr	r0, [r0, #16]
10060a56:	2211      	movs	r2, #17
10060a58:	2305      	movs	r3, #5
10060a5a:	4621      	mov	r1, r4
10060a5c:	f7f1 fc3e 	bl	100522dc <aci_event_fifo_push_header>
10060a60:	2800      	cmp	r0, #0
10060a62:	d012      	beq.n	10060a8a <aci_gatt_srv_write_event_push_noinline+0x4e>
10060a64:	4601      	mov	r1, r0
10060a66:	9808      	ldr	r0, [sp, #32]
10060a68:	9a07      	ldr	r2, [sp, #28]
10060a6a:	9b06      	ldr	r3, [sp, #24]
10060a6c:	6148      	str	r0, [r1, #20]
10060a6e:	820a      	strh	r2, [r1, #16]
10060a70:	81cb      	strh	r3, [r1, #14]
10060a72:	730f      	strb	r7, [r1, #12]
10060a74:	814e      	strh	r6, [r1, #10]
10060a76:	810d      	strh	r5, [r1, #8]
10060a78:	4806      	ldr	r0, [pc, #24]	@ (10060a94 <__arm_cp.25_1>)
10060a7a:	6048      	str	r0, [r1, #4]
10060a7c:	4620      	mov	r0, r4
10060a7e:	f7f1 fcca 	bl	10052416 <aci_event_fifo_push>
10060a82:	2000      	movs	r0, #0
10060a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a86:	2086      	movs	r0, #134	@ 0x86
10060a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a8a:	2007      	movs	r0, #7
10060a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a8e:	46c0      	nop			@ (mov r8, r8)

10060a90 <__arm_cp.25_0>:
10060a90:	20000ed0 	.word	0x20000ed0

10060a94 <__arm_cp.25_1>:
10060a94:	100601cd 	.word	0x100601cd

10060a98 <aci_gatt_clt_multi_notification_int_event_push_noinline>:
10060a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060a9a:	4605      	mov	r5, r0
10060a9c:	06c0      	lsls	r0, r0, #27
10060a9e:	d421      	bmi.n	10060ae4 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
10060aa0:	460e      	mov	r6, r1
10060aa2:	4813      	ldr	r0, [pc, #76]	@ (10060af0 <__arm_cp.26_0>)
10060aa4:	6800      	ldr	r0, [r0, #0]
10060aa6:	2152      	movs	r1, #82	@ 0x52
10060aa8:	5c40      	ldrb	r0, [r0, r1]
10060aaa:	2400      	movs	r4, #0
10060aac:	0700      	lsls	r0, r0, #28
10060aae:	d51a      	bpl.n	10060ae6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10060ab0:	4617      	mov	r7, r2
10060ab2:	9300      	str	r3, [sp, #0]
10060ab4:	480f      	ldr	r0, [pc, #60]	@ (10060af4 <__arm_cp.26_1>)
10060ab6:	6800      	ldr	r0, [r0, #0]
10060ab8:	0769      	lsls	r1, r5, #29
10060aba:	0ec9      	lsrs	r1, r1, #27
10060abc:	1840      	adds	r0, r0, r1
10060abe:	6900      	ldr	r0, [r0, #16]
10060ac0:	2214      	movs	r2, #20
10060ac2:	2303      	movs	r3, #3
10060ac4:	4629      	mov	r1, r5
10060ac6:	f7f1 fc09 	bl	100522dc <aci_event_fifo_push_header>
10060aca:	2800      	cmp	r0, #0
10060acc:	d00d      	beq.n	10060aea <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
10060ace:	4601      	mov	r1, r0
10060ad0:	9800      	ldr	r0, [sp, #0]
10060ad2:	60c8      	str	r0, [r1, #12]
10060ad4:	814f      	strh	r7, [r1, #10]
10060ad6:	810e      	strh	r6, [r1, #8]
10060ad8:	4807      	ldr	r0, [pc, #28]	@ (10060af8 <__arm_cp.26_2>)
10060ada:	6048      	str	r0, [r1, #4]
10060adc:	4628      	mov	r0, r5
10060ade:	f7f1 fc9a 	bl	10052416 <aci_event_fifo_push>
10060ae2:	e000      	b.n	10060ae6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10060ae4:	2486      	movs	r4, #134	@ 0x86
10060ae6:	4620      	mov	r0, r4
10060ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060aea:	2407      	movs	r4, #7
10060aec:	e7fb      	b.n	10060ae6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10060aee:	46c0      	nop			@ (mov r8, r8)

10060af0 <__arm_cp.26_0>:
10060af0:	20000f20 	.word	0x20000f20

10060af4 <__arm_cp.26_1>:
10060af4:	20000ed0 	.word	0x20000ed0

10060af8 <__arm_cp.26_2>:
10060af8:	1006022d 	.word	0x1006022d

10060afc <aci_att_exchange_mtu_resp_event_push_noinline>:
10060afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060afe:	4604      	mov	r4, r0
10060b00:	06c0      	lsls	r0, r0, #27
10060b02:	d408      	bmi.n	10060b16 <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
10060b04:	460d      	mov	r5, r1
10060b06:	4819      	ldr	r0, [pc, #100]	@ (10060b6c <__arm_cp.27_0>)
10060b08:	6800      	ldr	r0, [r0, #0]
10060b0a:	2150      	movs	r1, #80	@ 0x50
10060b0c:	5c40      	ldrb	r0, [r0, r1]
10060b0e:	0740      	lsls	r0, r0, #29
10060b10:	d403      	bmi.n	10060b1a <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
10060b12:	2700      	movs	r7, #0
10060b14:	e027      	b.n	10060b66 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10060b16:	2786      	movs	r7, #134	@ 0x86
10060b18:	e025      	b.n	10060b66 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10060b1a:	4616      	mov	r6, r2
10060b1c:	4814      	ldr	r0, [pc, #80]	@ (10060b70 <__arm_cp.27_1>)
10060b1e:	6800      	ldr	r0, [r0, #0]
10060b20:	0761      	lsls	r1, r4, #29
10060b22:	0ec9      	lsrs	r1, r1, #27
10060b24:	1840      	adds	r0, r0, r1
10060b26:	6900      	ldr	r0, [r0, #16]
10060b28:	2258      	movs	r2, #88	@ 0x58
10060b2a:	2703      	movs	r7, #3
10060b2c:	4621      	mov	r1, r4
10060b2e:	463b      	mov	r3, r7
10060b30:	f7f1 fbd4 	bl	100522dc <aci_event_fifo_push_header>
10060b34:	2800      	cmp	r0, #0
10060b36:	d015      	beq.n	10060b64 <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
10060b38:	4601      	mov	r1, r0
10060b3a:	7306      	strb	r6, [r0, #12]
10060b3c:	7285      	strb	r5, [r0, #10]
10060b3e:	200c      	movs	r0, #12
10060b40:	7248      	strb	r0, [r1, #9]
10060b42:	720f      	strb	r7, [r1, #8]
10060b44:	2700      	movs	r7, #0
10060b46:	71cf      	strb	r7, [r1, #7]
10060b48:	2006      	movs	r0, #6
10060b4a:	7188      	strb	r0, [r1, #6]
10060b4c:	20ff      	movs	r0, #255	@ 0xff
10060b4e:	7148      	strb	r0, [r1, #5]
10060b50:	2082      	movs	r0, #130	@ 0x82
10060b52:	7108      	strb	r0, [r1, #4]
10060b54:	0a30      	lsrs	r0, r6, #8
10060b56:	7348      	strb	r0, [r1, #13]
10060b58:	0a28      	lsrs	r0, r5, #8
10060b5a:	72c8      	strb	r0, [r1, #11]
10060b5c:	4620      	mov	r0, r4
10060b5e:	f7f1 fc5a 	bl	10052416 <aci_event_fifo_push>
10060b62:	e000      	b.n	10060b66 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10060b64:	2707      	movs	r7, #7
10060b66:	4638      	mov	r0, r7
10060b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060b6a:	46c0      	nop			@ (mov r8, r8)

10060b6c <__arm_cp.27_0>:
10060b6c:	20000f20 	.word	0x20000f20

10060b70 <__arm_cp.27_1>:
10060b70:	20000ed0 	.word	0x20000ed0

10060b74 <aci_att_clt_find_info_resp_event_push_noinline>:
10060b74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060b76:	4604      	mov	r4, r0
10060b78:	06c0      	lsls	r0, r0, #27
10060b7a:	d424      	bmi.n	10060bc6 <aci_att_clt_find_info_resp_event_push_noinline+0x52>
10060b7c:	4616      	mov	r6, r2
10060b7e:	4813      	ldr	r0, [pc, #76]	@ (10060bcc <__arm_cp.28_0>)
10060b80:	6800      	ldr	r0, [r0, #0]
10060b82:	2250      	movs	r2, #80	@ 0x50
10060b84:	5c80      	ldrb	r0, [r0, r2]
10060b86:	2500      	movs	r5, #0
10060b88:	0700      	lsls	r0, r0, #28
10060b8a:	d51d      	bpl.n	10060bc8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10060b8c:	461f      	mov	r7, r3
10060b8e:	9101      	str	r1, [sp, #4]
10060b90:	9502      	str	r5, [sp, #8]
10060b92:	480f      	ldr	r0, [pc, #60]	@ (10060bd0 <__arm_cp.28_1>)
10060b94:	6800      	ldr	r0, [r0, #0]
10060b96:	0761      	lsls	r1, r4, #29
10060b98:	0ec9      	lsrs	r1, r1, #27
10060b9a:	1840      	adds	r0, r0, r1
10060b9c:	6900      	ldr	r0, [r0, #16]
10060b9e:	2507      	movs	r5, #7
10060ba0:	2303      	movs	r3, #3
10060ba2:	4621      	mov	r1, r4
10060ba4:	462a      	mov	r2, r5
10060ba6:	f7f1 fb99 	bl	100522dc <aci_event_fifo_push_header>
10060baa:	2800      	cmp	r0, #0
10060bac:	d00c      	beq.n	10060bc8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10060bae:	4601      	mov	r1, r0
10060bb0:	60c7      	str	r7, [r0, #12]
10060bb2:	8146      	strh	r6, [r0, #10]
10060bb4:	9801      	ldr	r0, [sp, #4]
10060bb6:	8108      	strh	r0, [r1, #8]
10060bb8:	4806      	ldr	r0, [pc, #24]	@ (10060bd4 <__arm_cp.28_2>)
10060bba:	6048      	str	r0, [r1, #4]
10060bbc:	4620      	mov	r0, r4
10060bbe:	f7f1 fc2a 	bl	10052416 <aci_event_fifo_push>
10060bc2:	9d02      	ldr	r5, [sp, #8]
10060bc4:	e000      	b.n	10060bc8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10060bc6:	2586      	movs	r5, #134	@ 0x86
10060bc8:	4628      	mov	r0, r5
10060bca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10060bcc <__arm_cp.28_0>:
10060bcc:	20000f20 	.word	0x20000f20

10060bd0 <__arm_cp.28_1>:
10060bd0:	20000ed0 	.word	0x20000ed0

10060bd4 <__arm_cp.28_2>:
10060bd4:	100602ad 	.word	0x100602ad

10060bd8 <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
10060bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060bda:	4605      	mov	r5, r0
10060bdc:	06c0      	lsls	r0, r0, #27
10060bde:	d421      	bmi.n	10060c24 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
10060be0:	460e      	mov	r6, r1
10060be2:	4813      	ldr	r0, [pc, #76]	@ (10060c30 <__arm_cp.29_0>)
10060be4:	6800      	ldr	r0, [r0, #0]
10060be6:	2150      	movs	r1, #80	@ 0x50
10060be8:	5c40      	ldrb	r0, [r0, r1]
10060bea:	2400      	movs	r4, #0
10060bec:	06c0      	lsls	r0, r0, #27
10060bee:	d51a      	bpl.n	10060c26 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10060bf0:	4617      	mov	r7, r2
10060bf2:	9300      	str	r3, [sp, #0]
10060bf4:	480f      	ldr	r0, [pc, #60]	@ (10060c34 <__arm_cp.29_1>)
10060bf6:	6800      	ldr	r0, [r0, #0]
10060bf8:	0769      	lsls	r1, r5, #29
10060bfa:	0ec9      	lsrs	r1, r1, #27
10060bfc:	1840      	adds	r0, r0, r1
10060bfe:	6900      	ldr	r0, [r0, #16]
10060c00:	2208      	movs	r2, #8
10060c02:	2303      	movs	r3, #3
10060c04:	4629      	mov	r1, r5
10060c06:	f7f1 fb69 	bl	100522dc <aci_event_fifo_push_header>
10060c0a:	2800      	cmp	r0, #0
10060c0c:	d00d      	beq.n	10060c2a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
10060c0e:	4601      	mov	r1, r0
10060c10:	9800      	ldr	r0, [sp, #0]
10060c12:	60c8      	str	r0, [r1, #12]
10060c14:	814f      	strh	r7, [r1, #10]
10060c16:	810e      	strh	r6, [r1, #8]
10060c18:	4807      	ldr	r0, [pc, #28]	@ (10060c38 <__arm_cp.29_2>)
10060c1a:	6048      	str	r0, [r1, #4]
10060c1c:	4628      	mov	r0, r5
10060c1e:	f7f1 fbfa 	bl	10052416 <aci_event_fifo_push>
10060c22:	e000      	b.n	10060c26 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10060c24:	2486      	movs	r4, #134	@ 0x86
10060c26:	4620      	mov	r0, r4
10060c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060c2a:	2407      	movs	r4, #7
10060c2c:	e7fb      	b.n	10060c26 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10060c2e:	46c0      	nop			@ (mov r8, r8)

10060c30 <__arm_cp.29_0>:
10060c30:	20000f20 	.word	0x20000f20

10060c34 <__arm_cp.29_1>:
10060c34:	20000ed0 	.word	0x20000ed0

10060c38 <__arm_cp.29_2>:
10060c38:	10060301 	.word	0x10060301

10060c3c <aci_att_clt_read_by_type_resp_event_push_noinline>:
10060c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060c3e:	4605      	mov	r5, r0
10060c40:	06c0      	lsls	r0, r0, #27
10060c42:	d421      	bmi.n	10060c88 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
10060c44:	460e      	mov	r6, r1
10060c46:	4813      	ldr	r0, [pc, #76]	@ (10060c94 <__arm_cp.30_0>)
10060c48:	6800      	ldr	r0, [r0, #0]
10060c4a:	2150      	movs	r1, #80	@ 0x50
10060c4c:	5c40      	ldrb	r0, [r0, r1]
10060c4e:	2400      	movs	r4, #0
10060c50:	0680      	lsls	r0, r0, #26
10060c52:	d51a      	bpl.n	10060c8a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10060c54:	4617      	mov	r7, r2
10060c56:	9300      	str	r3, [sp, #0]
10060c58:	480f      	ldr	r0, [pc, #60]	@ (10060c98 <__arm_cp.30_1>)
10060c5a:	6800      	ldr	r0, [r0, #0]
10060c5c:	0769      	lsls	r1, r5, #29
10060c5e:	0ec9      	lsrs	r1, r1, #27
10060c60:	1840      	adds	r0, r0, r1
10060c62:	6900      	ldr	r0, [r0, #16]
10060c64:	2209      	movs	r2, #9
10060c66:	2303      	movs	r3, #3
10060c68:	4629      	mov	r1, r5
10060c6a:	f7f1 fb37 	bl	100522dc <aci_event_fifo_push_header>
10060c6e:	2800      	cmp	r0, #0
10060c70:	d00d      	beq.n	10060c8e <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
10060c72:	4601      	mov	r1, r0
10060c74:	9800      	ldr	r0, [sp, #0]
10060c76:	60c8      	str	r0, [r1, #12]
10060c78:	814f      	strh	r7, [r1, #10]
10060c7a:	810e      	strh	r6, [r1, #8]
10060c7c:	4807      	ldr	r0, [pc, #28]	@ (10060c9c <__arm_cp.30_2>)
10060c7e:	6048      	str	r0, [r1, #4]
10060c80:	4628      	mov	r0, r5
10060c82:	f7f1 fbc8 	bl	10052416 <aci_event_fifo_push>
10060c86:	e000      	b.n	10060c8a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10060c88:	2486      	movs	r4, #134	@ 0x86
10060c8a:	4620      	mov	r0, r4
10060c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060c8e:	2407      	movs	r4, #7
10060c90:	e7fb      	b.n	10060c8a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10060c92:	46c0      	nop			@ (mov r8, r8)

10060c94 <__arm_cp.30_0>:
10060c94:	20000f20 	.word	0x20000f20

10060c98 <__arm_cp.30_1>:
10060c98:	20000ed0 	.word	0x20000ed0

10060c9c <__arm_cp.30_2>:
10060c9c:	1006034d 	.word	0x1006034d

10060ca0 <aci_att_clt_read_resp_event_push_noinline>:
10060ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060ca2:	4605      	mov	r5, r0
10060ca4:	06c0      	lsls	r0, r0, #27
10060ca6:	d421      	bmi.n	10060cec <aci_att_clt_read_resp_event_push_noinline+0x4c>
10060ca8:	460e      	mov	r6, r1
10060caa:	4813      	ldr	r0, [pc, #76]	@ (10060cf8 <__arm_cp.31_0>)
10060cac:	6800      	ldr	r0, [r0, #0]
10060cae:	2150      	movs	r1, #80	@ 0x50
10060cb0:	5c40      	ldrb	r0, [r0, r1]
10060cb2:	2400      	movs	r4, #0
10060cb4:	0640      	lsls	r0, r0, #25
10060cb6:	d51a      	bpl.n	10060cee <aci_att_clt_read_resp_event_push_noinline+0x4e>
10060cb8:	4617      	mov	r7, r2
10060cba:	9300      	str	r3, [sp, #0]
10060cbc:	480f      	ldr	r0, [pc, #60]	@ (10060cfc <__arm_cp.31_1>)
10060cbe:	6800      	ldr	r0, [r0, #0]
10060cc0:	0769      	lsls	r1, r5, #29
10060cc2:	0ec9      	lsrs	r1, r1, #27
10060cc4:	1840      	adds	r0, r0, r1
10060cc6:	6900      	ldr	r0, [r0, #16]
10060cc8:	220a      	movs	r2, #10
10060cca:	2303      	movs	r3, #3
10060ccc:	4629      	mov	r1, r5
10060cce:	f7f1 fb05 	bl	100522dc <aci_event_fifo_push_header>
10060cd2:	2800      	cmp	r0, #0
10060cd4:	d00d      	beq.n	10060cf2 <aci_att_clt_read_resp_event_push_noinline+0x52>
10060cd6:	4601      	mov	r1, r0
10060cd8:	9800      	ldr	r0, [sp, #0]
10060cda:	60c8      	str	r0, [r1, #12]
10060cdc:	814f      	strh	r7, [r1, #10]
10060cde:	810e      	strh	r6, [r1, #8]
10060ce0:	4807      	ldr	r0, [pc, #28]	@ (10060d00 <__arm_cp.31_2>)
10060ce2:	6048      	str	r0, [r1, #4]
10060ce4:	4628      	mov	r0, r5
10060ce6:	f7f1 fb96 	bl	10052416 <aci_event_fifo_push>
10060cea:	e000      	b.n	10060cee <aci_att_clt_read_resp_event_push_noinline+0x4e>
10060cec:	2486      	movs	r4, #134	@ 0x86
10060cee:	4620      	mov	r0, r4
10060cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060cf2:	2407      	movs	r4, #7
10060cf4:	e7fb      	b.n	10060cee <aci_att_clt_read_resp_event_push_noinline+0x4e>
10060cf6:	46c0      	nop			@ (mov r8, r8)

10060cf8 <__arm_cp.31_0>:
10060cf8:	20000f20 	.word	0x20000f20

10060cfc <__arm_cp.31_1>:
10060cfc:	20000ed0 	.word	0x20000ed0

10060d00 <__arm_cp.31_2>:
10060d00:	100603a1 	.word	0x100603a1

10060d04 <aci_att_clt_read_blob_resp_event_push_noinline>:
10060d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060d06:	4605      	mov	r5, r0
10060d08:	06c0      	lsls	r0, r0, #27
10060d0a:	d421      	bmi.n	10060d50 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
10060d0c:	460e      	mov	r6, r1
10060d0e:	4813      	ldr	r0, [pc, #76]	@ (10060d5c <__arm_cp.32_0>)
10060d10:	6800      	ldr	r0, [r0, #0]
10060d12:	2150      	movs	r1, #80	@ 0x50
10060d14:	5640      	ldrsb	r0, [r0, r1]
10060d16:	2400      	movs	r4, #0
10060d18:	2800      	cmp	r0, #0
10060d1a:	d51a      	bpl.n	10060d52 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10060d1c:	4617      	mov	r7, r2
10060d1e:	9300      	str	r3, [sp, #0]
10060d20:	480f      	ldr	r0, [pc, #60]	@ (10060d60 <__arm_cp.32_1>)
10060d22:	6800      	ldr	r0, [r0, #0]
10060d24:	0769      	lsls	r1, r5, #29
10060d26:	0ec9      	lsrs	r1, r1, #27
10060d28:	1840      	adds	r0, r0, r1
10060d2a:	6900      	ldr	r0, [r0, #16]
10060d2c:	220b      	movs	r2, #11
10060d2e:	2303      	movs	r3, #3
10060d30:	4629      	mov	r1, r5
10060d32:	f7f1 fad3 	bl	100522dc <aci_event_fifo_push_header>
10060d36:	2800      	cmp	r0, #0
10060d38:	d00d      	beq.n	10060d56 <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
10060d3a:	4601      	mov	r1, r0
10060d3c:	9800      	ldr	r0, [sp, #0]
10060d3e:	60c8      	str	r0, [r1, #12]
10060d40:	814f      	strh	r7, [r1, #10]
10060d42:	810e      	strh	r6, [r1, #8]
10060d44:	4807      	ldr	r0, [pc, #28]	@ (10060d64 <__arm_cp.32_2>)
10060d46:	6048      	str	r0, [r1, #4]
10060d48:	4628      	mov	r0, r5
10060d4a:	f7f1 fb64 	bl	10052416 <aci_event_fifo_push>
10060d4e:	e000      	b.n	10060d52 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10060d50:	2486      	movs	r4, #134	@ 0x86
10060d52:	4620      	mov	r0, r4
10060d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060d56:	2407      	movs	r4, #7
10060d58:	e7fb      	b.n	10060d52 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10060d5a:	46c0      	nop			@ (mov r8, r8)

10060d5c <__arm_cp.32_0>:
10060d5c:	20000f20 	.word	0x20000f20

10060d60 <__arm_cp.32_1>:
10060d60:	20000ed0 	.word	0x20000ed0

10060d64 <__arm_cp.32_2>:
10060d64:	100603f1 	.word	0x100603f1

10060d68 <aci_att_clt_read_multiple_resp_event_push_noinline>:
10060d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060d6a:	4605      	mov	r5, r0
10060d6c:	06c0      	lsls	r0, r0, #27
10060d6e:	d421      	bmi.n	10060db4 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
10060d70:	460e      	mov	r6, r1
10060d72:	4813      	ldr	r0, [pc, #76]	@ (10060dc0 <__arm_cp.33_0>)
10060d74:	6800      	ldr	r0, [r0, #0]
10060d76:	2151      	movs	r1, #81	@ 0x51
10060d78:	5c40      	ldrb	r0, [r0, r1]
10060d7a:	2400      	movs	r4, #0
10060d7c:	07c0      	lsls	r0, r0, #31
10060d7e:	d01a      	beq.n	10060db6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10060d80:	4617      	mov	r7, r2
10060d82:	9300      	str	r3, [sp, #0]
10060d84:	480f      	ldr	r0, [pc, #60]	@ (10060dc4 <__arm_cp.33_1>)
10060d86:	6800      	ldr	r0, [r0, #0]
10060d88:	0769      	lsls	r1, r5, #29
10060d8a:	0ec9      	lsrs	r1, r1, #27
10060d8c:	1840      	adds	r0, r0, r1
10060d8e:	6900      	ldr	r0, [r0, #16]
10060d90:	220c      	movs	r2, #12
10060d92:	2303      	movs	r3, #3
10060d94:	4629      	mov	r1, r5
10060d96:	f7f1 faa1 	bl	100522dc <aci_event_fifo_push_header>
10060d9a:	2800      	cmp	r0, #0
10060d9c:	d00d      	beq.n	10060dba <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
10060d9e:	4601      	mov	r1, r0
10060da0:	9800      	ldr	r0, [sp, #0]
10060da2:	60c8      	str	r0, [r1, #12]
10060da4:	814f      	strh	r7, [r1, #10]
10060da6:	810e      	strh	r6, [r1, #8]
10060da8:	4807      	ldr	r0, [pc, #28]	@ (10060dc8 <__arm_cp.33_2>)
10060daa:	6048      	str	r0, [r1, #4]
10060dac:	4628      	mov	r0, r5
10060dae:	f7f1 fb32 	bl	10052416 <aci_event_fifo_push>
10060db2:	e000      	b.n	10060db6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10060db4:	2486      	movs	r4, #134	@ 0x86
10060db6:	4620      	mov	r0, r4
10060db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060dba:	2407      	movs	r4, #7
10060dbc:	e7fb      	b.n	10060db6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10060dbe:	46c0      	nop			@ (mov r8, r8)

10060dc0 <__arm_cp.33_0>:
10060dc0:	20000f20 	.word	0x20000f20

10060dc4 <__arm_cp.33_1>:
10060dc4:	20000ed0 	.word	0x20000ed0

10060dc8 <__arm_cp.33_2>:
10060dc8:	10060441 	.word	0x10060441

10060dcc <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10060dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060dce:	4605      	mov	r5, r0
10060dd0:	06c0      	lsls	r0, r0, #27
10060dd2:	d421      	bmi.n	10060e18 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
10060dd4:	460e      	mov	r6, r1
10060dd6:	4813      	ldr	r0, [pc, #76]	@ (10060e24 <__arm_cp.34_0>)
10060dd8:	6800      	ldr	r0, [r0, #0]
10060dda:	2151      	movs	r1, #81	@ 0x51
10060ddc:	5c40      	ldrb	r0, [r0, r1]
10060dde:	2400      	movs	r4, #0
10060de0:	0780      	lsls	r0, r0, #30
10060de2:	d51a      	bpl.n	10060e1a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10060de4:	4617      	mov	r7, r2
10060de6:	9300      	str	r3, [sp, #0]
10060de8:	480f      	ldr	r0, [pc, #60]	@ (10060e28 <__arm_cp.34_1>)
10060dea:	6800      	ldr	r0, [r0, #0]
10060dec:	0769      	lsls	r1, r5, #29
10060dee:	0ec9      	lsrs	r1, r1, #27
10060df0:	1840      	adds	r0, r0, r1
10060df2:	6900      	ldr	r0, [r0, #16]
10060df4:	220d      	movs	r2, #13
10060df6:	2303      	movs	r3, #3
10060df8:	4629      	mov	r1, r5
10060dfa:	f7f1 fa6f 	bl	100522dc <aci_event_fifo_push_header>
10060dfe:	2800      	cmp	r0, #0
10060e00:	d00d      	beq.n	10060e1e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
10060e02:	4601      	mov	r1, r0
10060e04:	9800      	ldr	r0, [sp, #0]
10060e06:	60c8      	str	r0, [r1, #12]
10060e08:	814f      	strh	r7, [r1, #10]
10060e0a:	810e      	strh	r6, [r1, #8]
10060e0c:	4807      	ldr	r0, [pc, #28]	@ (10060e2c <__arm_cp.34_2>)
10060e0e:	6048      	str	r0, [r1, #4]
10060e10:	4628      	mov	r0, r5
10060e12:	f7f1 fb00 	bl	10052416 <aci_event_fifo_push>
10060e16:	e000      	b.n	10060e1a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10060e18:	2486      	movs	r4, #134	@ 0x86
10060e1a:	4620      	mov	r0, r4
10060e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060e1e:	2407      	movs	r4, #7
10060e20:	e7fb      	b.n	10060e1a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10060e22:	46c0      	nop			@ (mov r8, r8)

10060e24 <__arm_cp.34_0>:
10060e24:	20000f20 	.word	0x20000f20

10060e28 <__arm_cp.34_1>:
10060e28:	20000ed0 	.word	0x20000ed0

10060e2c <__arm_cp.34_2>:
10060e2c:	10060491 	.word	0x10060491

10060e30 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10060e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060e32:	4605      	mov	r5, r0
10060e34:	06c0      	lsls	r0, r0, #27
10060e36:	d421      	bmi.n	10060e7c <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
10060e38:	460e      	mov	r6, r1
10060e3a:	4813      	ldr	r0, [pc, #76]	@ (10060e88 <__arm_cp.35_0>)
10060e3c:	6800      	ldr	r0, [r0, #0]
10060e3e:	2151      	movs	r1, #81	@ 0x51
10060e40:	5c40      	ldrb	r0, [r0, r1]
10060e42:	2400      	movs	r4, #0
10060e44:	0700      	lsls	r0, r0, #28
10060e46:	d51a      	bpl.n	10060e7e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10060e48:	4617      	mov	r7, r2
10060e4a:	9300      	str	r3, [sp, #0]
10060e4c:	480f      	ldr	r0, [pc, #60]	@ (10060e8c <__arm_cp.35_1>)
10060e4e:	6800      	ldr	r0, [r0, #0]
10060e50:	0769      	lsls	r1, r5, #29
10060e52:	0ec9      	lsrs	r1, r1, #27
10060e54:	1840      	adds	r0, r0, r1
10060e56:	6900      	ldr	r0, [r0, #16]
10060e58:	220e      	movs	r2, #14
10060e5a:	2303      	movs	r3, #3
10060e5c:	4629      	mov	r1, r5
10060e5e:	f7f1 fa3d 	bl	100522dc <aci_event_fifo_push_header>
10060e62:	2800      	cmp	r0, #0
10060e64:	d00d      	beq.n	10060e82 <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
10060e66:	4601      	mov	r1, r0
10060e68:	9800      	ldr	r0, [sp, #0]
10060e6a:	60c8      	str	r0, [r1, #12]
10060e6c:	814f      	strh	r7, [r1, #10]
10060e6e:	810e      	strh	r6, [r1, #8]
10060e70:	4807      	ldr	r0, [pc, #28]	@ (10060e90 <__arm_cp.35_2>)
10060e72:	6048      	str	r0, [r1, #4]
10060e74:	4628      	mov	r0, r5
10060e76:	f7f1 face 	bl	10052416 <aci_event_fifo_push>
10060e7a:	e000      	b.n	10060e7e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10060e7c:	2486      	movs	r4, #134	@ 0x86
10060e7e:	4620      	mov	r0, r4
10060e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060e82:	2407      	movs	r4, #7
10060e84:	e7fb      	b.n	10060e7e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10060e86:	46c0      	nop			@ (mov r8, r8)

10060e88 <__arm_cp.35_0>:
10060e88:	20000f20 	.word	0x20000f20

10060e8c <__arm_cp.35_1>:
10060e8c:	20000ed0 	.word	0x20000ed0

10060e90 <__arm_cp.35_2>:
10060e90:	100604e5 	.word	0x100604e5

10060e94 <aci_att_clt_exec_write_resp_event_push_noinline>:
10060e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060e96:	4604      	mov	r4, r0
10060e98:	06c0      	lsls	r0, r0, #27
10060e9a:	d408      	bmi.n	10060eae <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
10060e9c:	460d      	mov	r5, r1
10060e9e:	4819      	ldr	r0, [pc, #100]	@ (10060f04 <__arm_cp.36_0>)
10060ea0:	6800      	ldr	r0, [r0, #0]
10060ea2:	2151      	movs	r1, #81	@ 0x51
10060ea4:	5c40      	ldrb	r0, [r0, r1]
10060ea6:	06c0      	lsls	r0, r0, #27
10060ea8:	d403      	bmi.n	10060eb2 <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
10060eaa:	2700      	movs	r7, #0
10060eac:	e027      	b.n	10060efe <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10060eae:	2786      	movs	r7, #134	@ 0x86
10060eb0:	e025      	b.n	10060efe <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10060eb2:	4616      	mov	r6, r2
10060eb4:	4814      	ldr	r0, [pc, #80]	@ (10060f08 <__arm_cp.36_1>)
10060eb6:	6800      	ldr	r0, [r0, #0]
10060eb8:	0761      	lsls	r1, r4, #29
10060eba:	0ec9      	lsrs	r1, r1, #27
10060ebc:	1840      	adds	r0, r0, r1
10060ebe:	6900      	ldr	r0, [r0, #16]
10060ec0:	2259      	movs	r2, #89	@ 0x59
10060ec2:	2303      	movs	r3, #3
10060ec4:	4621      	mov	r1, r4
10060ec6:	f7f1 fa09 	bl	100522dc <aci_event_fifo_push_header>
10060eca:	2800      	cmp	r0, #0
10060ecc:	d016      	beq.n	10060efc <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
10060ece:	4601      	mov	r1, r0
10060ed0:	7306      	strb	r6, [r0, #12]
10060ed2:	7285      	strb	r5, [r0, #10]
10060ed4:	200c      	movs	r0, #12
10060ed6:	7248      	strb	r0, [r1, #9]
10060ed8:	200d      	movs	r0, #13
10060eda:	7208      	strb	r0, [r1, #8]
10060edc:	2700      	movs	r7, #0
10060ede:	71cf      	strb	r7, [r1, #7]
10060ee0:	2006      	movs	r0, #6
10060ee2:	7188      	strb	r0, [r1, #6]
10060ee4:	20ff      	movs	r0, #255	@ 0xff
10060ee6:	7148      	strb	r0, [r1, #5]
10060ee8:	2082      	movs	r0, #130	@ 0x82
10060eea:	7108      	strb	r0, [r1, #4]
10060eec:	0a30      	lsrs	r0, r6, #8
10060eee:	7348      	strb	r0, [r1, #13]
10060ef0:	0a28      	lsrs	r0, r5, #8
10060ef2:	72c8      	strb	r0, [r1, #11]
10060ef4:	4620      	mov	r0, r4
10060ef6:	f7f1 fa8e 	bl	10052416 <aci_event_fifo_push>
10060efa:	e000      	b.n	10060efe <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10060efc:	2707      	movs	r7, #7
10060efe:	4638      	mov	r0, r7
10060f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060f02:	46c0      	nop			@ (mov r8, r8)

10060f04 <__arm_cp.36_0>:
10060f04:	20000f20 	.word	0x20000f20

10060f08 <__arm_cp.36_1>:
10060f08:	20000ed0 	.word	0x20000ed0

10060f0c <aci_att_srv_prepare_write_req_event_push_noinline>:
10060f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060f0e:	4604      	mov	r4, r0
10060f10:	06c0      	lsls	r0, r0, #27
10060f12:	d420      	bmi.n	10060f56 <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10060f14:	461f      	mov	r7, r3
10060f16:	4616      	mov	r6, r2
10060f18:	460d      	mov	r5, r1
10060f1a:	4811      	ldr	r0, [pc, #68]	@ (10060f60 <__arm_cp.37_0>)
10060f1c:	6800      	ldr	r0, [r0, #0]
10060f1e:	0761      	lsls	r1, r4, #29
10060f20:	0ec9      	lsrs	r1, r1, #27
10060f22:	1840      	adds	r0, r0, r1
10060f24:	6900      	ldr	r0, [r0, #16]
10060f26:	2212      	movs	r2, #18
10060f28:	2305      	movs	r3, #5
10060f2a:	4621      	mov	r1, r4
10060f2c:	f7f1 f9d6 	bl	100522dc <aci_event_fifo_push_header>
10060f30:	2800      	cmp	r0, #0
10060f32:	d012      	beq.n	10060f5a <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10060f34:	4601      	mov	r1, r0
10060f36:	9808      	ldr	r0, [sp, #32]
10060f38:	9a07      	ldr	r2, [sp, #28]
10060f3a:	9b06      	ldr	r3, [sp, #24]
10060f3c:	6148      	str	r0, [r1, #20]
10060f3e:	820a      	strh	r2, [r1, #16]
10060f40:	81cb      	strh	r3, [r1, #14]
10060f42:	818f      	strh	r7, [r1, #12]
10060f44:	814e      	strh	r6, [r1, #10]
10060f46:	810d      	strh	r5, [r1, #8]
10060f48:	4806      	ldr	r0, [pc, #24]	@ (10060f64 <__arm_cp.37_1>)
10060f4a:	6048      	str	r0, [r1, #4]
10060f4c:	4620      	mov	r0, r4
10060f4e:	f7f1 fa62 	bl	10052416 <aci_event_fifo_push>
10060f52:	2000      	movs	r0, #0
10060f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060f56:	2086      	movs	r0, #134	@ 0x86
10060f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060f5a:	2007      	movs	r0, #7
10060f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060f5e:	46c0      	nop			@ (mov r8, r8)

10060f60 <__arm_cp.37_0>:
10060f60:	20000ed0 	.word	0x20000ed0

10060f64 <__arm_cp.37_1>:
10060f64:	10060531 	.word	0x10060531

10060f68 <aci_att_srv_exec_write_req_event_push_noinline>:
10060f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060f6a:	4604      	mov	r4, r0
10060f6c:	06c0      	lsls	r0, r0, #27
10060f6e:	d428      	bmi.n	10060fc2 <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
10060f70:	461f      	mov	r7, r3
10060f72:	4616      	mov	r6, r2
10060f74:	460d      	mov	r5, r1
10060f76:	4815      	ldr	r0, [pc, #84]	@ (10060fcc <__arm_cp.38_0>)
10060f78:	6800      	ldr	r0, [r0, #0]
10060f7a:	0761      	lsls	r1, r4, #29
10060f7c:	0ec9      	lsrs	r1, r1, #27
10060f7e:	1840      	adds	r0, r0, r1
10060f80:	6900      	ldr	r0, [r0, #16]
10060f82:	2260      	movs	r2, #96	@ 0x60
10060f84:	2303      	movs	r3, #3
10060f86:	4621      	mov	r1, r4
10060f88:	f7f1 f9a8 	bl	100522dc <aci_event_fifo_push_header>
10060f8c:	2800      	cmp	r0, #0
10060f8e:	d01a      	beq.n	10060fc6 <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
10060f90:	4601      	mov	r1, r0
10060f92:	7306      	strb	r6, [r0, #12]
10060f94:	7285      	strb	r5, [r0, #10]
10060f96:	200c      	movs	r0, #12
10060f98:	7248      	strb	r0, [r1, #9]
10060f9a:	201c      	movs	r0, #28
10060f9c:	7208      	strb	r0, [r1, #8]
10060f9e:	463a      	mov	r2, r7
10060fa0:	2700      	movs	r7, #0
10060fa2:	71cf      	strb	r7, [r1, #7]
10060fa4:	2007      	movs	r0, #7
10060fa6:	7188      	strb	r0, [r1, #6]
10060fa8:	738a      	strb	r2, [r1, #14]
10060faa:	20ff      	movs	r0, #255	@ 0xff
10060fac:	7148      	strb	r0, [r1, #5]
10060fae:	2082      	movs	r0, #130	@ 0x82
10060fb0:	7108      	strb	r0, [r1, #4]
10060fb2:	0a30      	lsrs	r0, r6, #8
10060fb4:	7348      	strb	r0, [r1, #13]
10060fb6:	0a28      	lsrs	r0, r5, #8
10060fb8:	72c8      	strb	r0, [r1, #11]
10060fba:	4620      	mov	r0, r4
10060fbc:	f7f1 fa2b 	bl	10052416 <aci_event_fifo_push>
10060fc0:	e002      	b.n	10060fc8 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10060fc2:	2786      	movs	r7, #134	@ 0x86
10060fc4:	e000      	b.n	10060fc8 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10060fc6:	2707      	movs	r7, #7
10060fc8:	4638      	mov	r0, r7
10060fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060fcc <__arm_cp.38_0>:
10060fcc:	20000ed0 	.word	0x20000ed0

10060fd0 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10060fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060fd2:	4605      	mov	r5, r0
10060fd4:	06c0      	lsls	r0, r0, #27
10060fd6:	d421      	bmi.n	1006101c <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
10060fd8:	460e      	mov	r6, r1
10060fda:	4813      	ldr	r0, [pc, #76]	@ (10061028 <__arm_cp.39_0>)
10060fdc:	6800      	ldr	r0, [r0, #0]
10060fde:	2152      	movs	r1, #82	@ 0x52
10060fe0:	5c40      	ldrb	r0, [r0, r1]
10060fe2:	2400      	movs	r4, #0
10060fe4:	0740      	lsls	r0, r0, #29
10060fe6:	d51a      	bpl.n	1006101e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10060fe8:	4617      	mov	r7, r2
10060fea:	9300      	str	r3, [sp, #0]
10060fec:	480f      	ldr	r0, [pc, #60]	@ (1006102c <__arm_cp.39_1>)
10060fee:	6800      	ldr	r0, [r0, #0]
10060ff0:	0769      	lsls	r1, r5, #29
10060ff2:	0ec9      	lsrs	r1, r1, #27
10060ff4:	1840      	adds	r0, r0, r1
10060ff6:	6900      	ldr	r0, [r0, #16]
10060ff8:	2213      	movs	r2, #19
10060ffa:	2303      	movs	r3, #3
10060ffc:	4629      	mov	r1, r5
10060ffe:	f7f1 f96d 	bl	100522dc <aci_event_fifo_push_header>
10061002:	2800      	cmp	r0, #0
10061004:	d00d      	beq.n	10061022 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
10061006:	4601      	mov	r1, r0
10061008:	9800      	ldr	r0, [sp, #0]
1006100a:	60c8      	str	r0, [r1, #12]
1006100c:	814f      	strh	r7, [r1, #10]
1006100e:	810e      	strh	r6, [r1, #8]
10061010:	4807      	ldr	r0, [pc, #28]	@ (10061030 <__arm_cp.39_2>)
10061012:	6048      	str	r0, [r1, #4]
10061014:	4628      	mov	r0, r5
10061016:	f7f1 f9fe 	bl	10052416 <aci_event_fifo_push>
1006101a:	e000      	b.n	1006101e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
1006101c:	2486      	movs	r4, #134	@ 0x86
1006101e:	4620      	mov	r0, r4
10061020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061022:	2407      	movs	r4, #7
10061024:	e7fb      	b.n	1006101e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10061026:	46c0      	nop			@ (mov r8, r8)

10061028 <__arm_cp.39_0>:
10061028:	20000f20 	.word	0x20000f20

1006102c <__arm_cp.39_1>:
1006102c:	20000ed0 	.word	0x20000ed0

10061030 <__arm_cp.39_2>:
10061030:	1006058d 	.word	0x1006058d

10061034 <hci_number_of_completed_packets_event_cb>:
10061034:	b51c      	push	{r2, r3, r4, lr}
10061036:	8889      	ldrh	r1, [r1, #4]
10061038:	466c      	mov	r4, sp
1006103a:	1ce0      	adds	r0, r4, #3
1006103c:	f7f1 fc80 	bl	10052940 <hci_number_of_completed_packets_event_copy>
10061040:	2005      	movs	r0, #5
10061042:	70a0      	strb	r0, [r4, #2]
10061044:	2013      	movs	r0, #19
10061046:	7060      	strb	r0, [r4, #1]
10061048:	2004      	movs	r0, #4
1006104a:	7020      	strb	r0, [r4, #0]
1006104c:	2108      	movs	r1, #8
1006104e:	4620      	mov	r0, r4
10061050:	f7ea fdec 	bl	1004bc2c <BLE_STACK_Event>
10061054:	bd1c      	pop	{r2, r3, r4, pc}
	...

10061058 <hci_number_of_completed_packets_event_push_noinline>:
10061058:	b5b0      	push	{r4, r5, r7, lr}
1006105a:	4604      	mov	r4, r0
1006105c:	06c0      	lsls	r0, r0, #27
1006105e:	d416      	bmi.n	1006108e <hci_number_of_completed_packets_event_push_noinline+0x36>
10061060:	460d      	mov	r5, r1
10061062:	480d      	ldr	r0, [pc, #52]	@ (10061098 <__arm_cp.22_0>)
10061064:	6800      	ldr	r0, [r0, #0]
10061066:	0761      	lsls	r1, r4, #29
10061068:	0ec9      	lsrs	r1, r1, #27
1006106a:	1840      	adds	r0, r0, r1
1006106c:	6900      	ldr	r0, [r0, #16]
1006106e:	2202      	movs	r2, #2
10061070:	4621      	mov	r1, r4
10061072:	4613      	mov	r3, r2
10061074:	f7f1 f932 	bl	100522dc <aci_event_fifo_push_header>
10061078:	2800      	cmp	r0, #0
1006107a:	d00a      	beq.n	10061092 <hci_number_of_completed_packets_event_push_noinline+0x3a>
1006107c:	4601      	mov	r1, r0
1006107e:	4807      	ldr	r0, [pc, #28]	@ (1006109c <__arm_cp.22_1>)
10061080:	6048      	str	r0, [r1, #4]
10061082:	810d      	strh	r5, [r1, #8]
10061084:	4620      	mov	r0, r4
10061086:	f7f1 f9c6 	bl	10052416 <aci_event_fifo_push>
1006108a:	2000      	movs	r0, #0
1006108c:	bdb0      	pop	{r4, r5, r7, pc}
1006108e:	2086      	movs	r0, #134	@ 0x86
10061090:	bdb0      	pop	{r4, r5, r7, pc}
10061092:	2007      	movs	r0, #7
10061094:	bdb0      	pop	{r4, r5, r7, pc}
10061096:	46c0      	nop			@ (mov r8, r8)

10061098 <__arm_cp.22_0>:
10061098:	20000ed0 	.word	0x20000ed0

1006109c <__arm_cp.22_1>:
1006109c:	10061035 	.word	0x10061035

100610a0 <hci_le_read_remote_features_complete_event_push_noinline>:
100610a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100610a2:	4605      	mov	r5, r0
100610a4:	06c0      	lsls	r0, r0, #27
100610a6:	d433      	bmi.n	10061110 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
100610a8:	4617      	mov	r7, r2
100610aa:	481c      	ldr	r0, [pc, #112]	@ (1006111c <__arm_cp.26_0>)
100610ac:	6800      	ldr	r0, [r0, #0]
100610ae:	223d      	movs	r2, #61	@ 0x3d
100610b0:	5c82      	ldrb	r2, [r0, r2]
100610b2:	2400      	movs	r4, #0
100610b4:	0692      	lsls	r2, r2, #26
100610b6:	d52c      	bpl.n	10061112 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
100610b8:	303d      	adds	r0, #61	@ 0x3d
100610ba:	7a40      	ldrb	r0, [r0, #9]
100610bc:	0700      	lsls	r0, r0, #28
100610be:	d528      	bpl.n	10061112 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
100610c0:	9101      	str	r1, [sp, #4]
100610c2:	9302      	str	r3, [sp, #8]
100610c4:	4816      	ldr	r0, [pc, #88]	@ (10061120 <__arm_cp.26_1>)
100610c6:	6800      	ldr	r0, [r0, #0]
100610c8:	0769      	lsls	r1, r5, #29
100610ca:	0ec9      	lsrs	r1, r1, #27
100610cc:	1840      	adds	r0, r0, r1
100610ce:	6900      	ldr	r0, [r0, #16]
100610d0:	2225      	movs	r2, #37	@ 0x25
100610d2:	2304      	movs	r3, #4
100610d4:	4629      	mov	r1, r5
100610d6:	9300      	str	r3, [sp, #0]
100610d8:	f7f1 f900 	bl	100522dc <aci_event_fifo_push_header>
100610dc:	2800      	cmp	r0, #0
100610de:	d01a      	beq.n	10061116 <hci_le_read_remote_features_complete_event_push_noinline+0x76>
100610e0:	4606      	mov	r6, r0
100610e2:	7247      	strb	r7, [r0, #9]
100610e4:	9801      	ldr	r0, [sp, #4]
100610e6:	7230      	strb	r0, [r6, #8]
100610e8:	0a38      	lsrs	r0, r7, #8
100610ea:	72b0      	strb	r0, [r6, #10]
100610ec:	4630      	mov	r0, r6
100610ee:	300b      	adds	r0, #11
100610f0:	2208      	movs	r2, #8
100610f2:	9902      	ldr	r1, [sp, #8]
100610f4:	f7ee fba6 	bl	1004f844 <BLEPLAT_MemCpy>
100610f8:	9900      	ldr	r1, [sp, #0]
100610fa:	71f1      	strb	r1, [r6, #7]
100610fc:	200c      	movs	r0, #12
100610fe:	71b0      	strb	r0, [r6, #6]
10061100:	203e      	movs	r0, #62	@ 0x3e
10061102:	7170      	strb	r0, [r6, #5]
10061104:	7131      	strb	r1, [r6, #4]
10061106:	4628      	mov	r0, r5
10061108:	4631      	mov	r1, r6
1006110a:	f7f1 f984 	bl	10052416 <aci_event_fifo_push>
1006110e:	e000      	b.n	10061112 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10061110:	2486      	movs	r4, #134	@ 0x86
10061112:	4620      	mov	r0, r4
10061114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061116:	2407      	movs	r4, #7
10061118:	e7fb      	b.n	10061112 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
1006111a:	46c0      	nop			@ (mov r8, r8)

1006111c <__arm_cp.26_0>:
1006111c:	20000f20 	.word	0x20000f20

10061120 <__arm_cp.26_1>:
10061120:	20000ed0 	.word	0x20000ed0

10061124 <aci_l2cap_proc_timeout_event_cb>:
10061124:	b510      	push	{r4, lr}
10061126:	b0ff      	sub	sp, #508	@ 0x1fc
10061128:	b083      	sub	sp, #12
1006112a:	8889      	ldrh	r1, [r1, #4]
1006112c:	466c      	mov	r4, sp
1006112e:	1da0      	adds	r0, r4, #6
10061130:	f7f1 fe52 	bl	10052dd8 <aci_l2cap_proc_timeout_event_copy>
10061134:	7a21      	ldrb	r1, [r4, #8]
10061136:	1d48      	adds	r0, r1, #5
10061138:	70a0      	strb	r0, [r4, #2]
1006113a:	0a00      	lsrs	r0, r0, #8
1006113c:	70e0      	strb	r0, [r4, #3]
1006113e:	2001      	movs	r0, #1
10061140:	7120      	strb	r0, [r4, #4]
10061142:	20ff      	movs	r0, #255	@ 0xff
10061144:	7060      	strb	r0, [r4, #1]
10061146:	2082      	movs	r0, #130	@ 0x82
10061148:	7020      	strb	r0, [r4, #0]
1006114a:	2008      	movs	r0, #8
1006114c:	7160      	strb	r0, [r4, #5]
1006114e:	3109      	adds	r1, #9
10061150:	4620      	mov	r0, r4
10061152:	f7ea fd6b 	bl	1004bc2c <BLE_STACK_Event>
10061156:	b07f      	add	sp, #508	@ 0x1fc
10061158:	b003      	add	sp, #12
1006115a:	bd10      	pop	{r4, pc}

1006115c <aci_hal_fw_error_event_push_noinline>:
1006115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006115e:	4604      	mov	r4, r0
10061160:	06c0      	lsls	r0, r0, #27
10061162:	d42d      	bmi.n	100611c0 <aci_hal_fw_error_event_push_noinline+0x64>
10061164:	4615      	mov	r5, r2
10061166:	460f      	mov	r7, r1
10061168:	9300      	str	r3, [sp, #0]
1006116a:	4818      	ldr	r0, [pc, #96]	@ (100611cc <__arm_cp.0_0>)
1006116c:	6800      	ldr	r0, [r0, #0]
1006116e:	0761      	lsls	r1, r4, #29
10061170:	0ec9      	lsrs	r1, r1, #27
10061172:	1840      	adds	r0, r0, r1
10061174:	6900      	ldr	r0, [r0, #16]
10061176:	1e51      	subs	r1, r2, #1
10061178:	2203      	movs	r2, #3
1006117a:	430a      	orrs	r2, r1
1006117c:	3209      	adds	r2, #9
1006117e:	0891      	lsrs	r1, r2, #2
10061180:	b28b      	uxth	r3, r1
10061182:	2240      	movs	r2, #64	@ 0x40
10061184:	4621      	mov	r1, r4
10061186:	f7f1 f8a9 	bl	100522dc <aci_event_fifo_push_header>
1006118a:	2800      	cmp	r0, #0
1006118c:	d01a      	beq.n	100611c4 <aci_hal_fw_error_event_push_noinline+0x68>
1006118e:	4606      	mov	r6, r0
10061190:	72c5      	strb	r5, [r0, #11]
10061192:	7287      	strb	r7, [r0, #10]
10061194:	300c      	adds	r0, #12
10061196:	9900      	ldr	r1, [sp, #0]
10061198:	462a      	mov	r2, r5
1006119a:	f7ee fb53 	bl	1004f844 <BLEPLAT_MemCpy>
1006119e:	2700      	movs	r7, #0
100611a0:	7277      	strb	r7, [r6, #9]
100611a2:	2006      	movs	r0, #6
100611a4:	7230      	strb	r0, [r6, #8]
100611a6:	1d28      	adds	r0, r5, #4
100611a8:	0a01      	lsrs	r1, r0, #8
100611aa:	71f1      	strb	r1, [r6, #7]
100611ac:	71b0      	strb	r0, [r6, #6]
100611ae:	20ff      	movs	r0, #255	@ 0xff
100611b0:	7170      	strb	r0, [r6, #5]
100611b2:	2082      	movs	r0, #130	@ 0x82
100611b4:	7130      	strb	r0, [r6, #4]
100611b6:	4620      	mov	r0, r4
100611b8:	4631      	mov	r1, r6
100611ba:	f7f1 f92c 	bl	10052416 <aci_event_fifo_push>
100611be:	e002      	b.n	100611c6 <aci_hal_fw_error_event_push_noinline+0x6a>
100611c0:	2786      	movs	r7, #134	@ 0x86
100611c2:	e000      	b.n	100611c6 <aci_hal_fw_error_event_push_noinline+0x6a>
100611c4:	2707      	movs	r7, #7
100611c6:	4638      	mov	r0, r7
100611c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100611ca:	46c0      	nop			@ (mov r8, r8)

100611cc <__arm_cp.0_0>:
100611cc:	20000ed0 	.word	0x20000ed0

100611d0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
100611d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100611d2:	4604      	mov	r4, r0
100611d4:	06c0      	lsls	r0, r0, #27
100611d6:	d42d      	bmi.n	10061234 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
100611d8:	4616      	mov	r6, r2
100611da:	460d      	mov	r5, r1
100611dc:	4818      	ldr	r0, [pc, #96]	@ (10061240 <__arm_cp.1_0>)
100611de:	6800      	ldr	r0, [r0, #0]
100611e0:	0761      	lsls	r1, r4, #29
100611e2:	0ec9      	lsrs	r1, r1, #27
100611e4:	1840      	adds	r0, r0, r1
100611e6:	6900      	ldr	r0, [r0, #16]
100611e8:	2241      	movs	r2, #65	@ 0x41
100611ea:	2304      	movs	r3, #4
100611ec:	4621      	mov	r1, r4
100611ee:	f7f1 f875 	bl	100522dc <aci_event_fifo_push_header>
100611f2:	2800      	cmp	r0, #0
100611f4:	d020      	beq.n	10061238 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
100611f6:	4601      	mov	r1, r0
100611f8:	300a      	adds	r0, #10
100611fa:	7106      	strb	r6, [r0, #4]
100611fc:	7005      	strb	r5, [r0, #0]
100611fe:	2700      	movs	r7, #0
10061200:	724f      	strb	r7, [r1, #9]
10061202:	2210      	movs	r2, #16
10061204:	720a      	strb	r2, [r1, #8]
10061206:	71cf      	strb	r7, [r1, #7]
10061208:	220a      	movs	r2, #10
1006120a:	718a      	strb	r2, [r1, #6]
1006120c:	22ff      	movs	r2, #255	@ 0xff
1006120e:	714a      	strb	r2, [r1, #5]
10061210:	2282      	movs	r2, #130	@ 0x82
10061212:	710a      	strb	r2, [r1, #4]
10061214:	0e32      	lsrs	r2, r6, #24
10061216:	71c2      	strb	r2, [r0, #7]
10061218:	0c32      	lsrs	r2, r6, #16
1006121a:	7182      	strb	r2, [r0, #6]
1006121c:	0a32      	lsrs	r2, r6, #8
1006121e:	7142      	strb	r2, [r0, #5]
10061220:	0e2a      	lsrs	r2, r5, #24
10061222:	70c2      	strb	r2, [r0, #3]
10061224:	0c2a      	lsrs	r2, r5, #16
10061226:	7082      	strb	r2, [r0, #2]
10061228:	0a2a      	lsrs	r2, r5, #8
1006122a:	7042      	strb	r2, [r0, #1]
1006122c:	4620      	mov	r0, r4
1006122e:	f7f1 f8f2 	bl	10052416 <aci_event_fifo_push>
10061232:	e002      	b.n	1006123a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10061234:	2786      	movs	r7, #134	@ 0x86
10061236:	e000      	b.n	1006123a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10061238:	2707      	movs	r7, #7
1006123a:	4638      	mov	r0, r7
1006123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006123e:	46c0      	nop			@ (mov r8, r8)

10061240 <__arm_cp.1_0>:
10061240:	20000ed0 	.word	0x20000ed0

10061244 <aci_gap_pairing_complete_event_push_noinline>:
10061244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061246:	4604      	mov	r4, r0
10061248:	06c0      	lsls	r0, r0, #27
1006124a:	d408      	bmi.n	1006125e <aci_gap_pairing_complete_event_push_noinline+0x1a>
1006124c:	460d      	mov	r5, r1
1006124e:	4819      	ldr	r0, [pc, #100]	@ (100612b4 <__arm_cp.1_0>)
10061250:	6800      	ldr	r0, [r0, #0]
10061252:	214e      	movs	r1, #78	@ 0x4e
10061254:	5c40      	ldrb	r0, [r0, r1]
10061256:	0780      	lsls	r0, r0, #30
10061258:	d403      	bmi.n	10061262 <aci_gap_pairing_complete_event_push_noinline+0x1e>
1006125a:	2600      	movs	r6, #0
1006125c:	e028      	b.n	100612b0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
1006125e:	2686      	movs	r6, #134	@ 0x86
10061260:	e026      	b.n	100612b0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10061262:	461f      	mov	r7, r3
10061264:	4616      	mov	r6, r2
10061266:	4814      	ldr	r0, [pc, #80]	@ (100612b8 <__arm_cp.1_1>)
10061268:	6800      	ldr	r0, [r0, #0]
1006126a:	0761      	lsls	r1, r4, #29
1006126c:	0ec9      	lsrs	r1, r1, #27
1006126e:	1840      	adds	r0, r0, r1
10061270:	6900      	ldr	r0, [r0, #16]
10061272:	2245      	movs	r2, #69	@ 0x45
10061274:	2303      	movs	r3, #3
10061276:	4621      	mov	r1, r4
10061278:	f7f1 f830 	bl	100522dc <aci_event_fifo_push_header>
1006127c:	2800      	cmp	r0, #0
1006127e:	d016      	beq.n	100612ae <aci_gap_pairing_complete_event_push_noinline+0x6a>
10061280:	4601      	mov	r1, r0
10061282:	7285      	strb	r5, [r0, #10]
10061284:	2004      	movs	r0, #4
10061286:	7248      	strb	r0, [r1, #9]
10061288:	2001      	movs	r0, #1
1006128a:	7208      	strb	r0, [r1, #8]
1006128c:	4632      	mov	r2, r6
1006128e:	2600      	movs	r6, #0
10061290:	71ce      	strb	r6, [r1, #7]
10061292:	2006      	movs	r0, #6
10061294:	7188      	strb	r0, [r1, #6]
10061296:	734f      	strb	r7, [r1, #13]
10061298:	730a      	strb	r2, [r1, #12]
1006129a:	20ff      	movs	r0, #255	@ 0xff
1006129c:	7148      	strb	r0, [r1, #5]
1006129e:	2082      	movs	r0, #130	@ 0x82
100612a0:	7108      	strb	r0, [r1, #4]
100612a2:	0a28      	lsrs	r0, r5, #8
100612a4:	72c8      	strb	r0, [r1, #11]
100612a6:	4620      	mov	r0, r4
100612a8:	f7f1 f8b5 	bl	10052416 <aci_event_fifo_push>
100612ac:	e000      	b.n	100612b0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
100612ae:	2607      	movs	r6, #7
100612b0:	4630      	mov	r0, r6
100612b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100612b4 <__arm_cp.1_0>:
100612b4:	20000f20 	.word	0x20000f20

100612b8 <__arm_cp.1_1>:
100612b8:	20000ed0 	.word	0x20000ed0

100612bc <GAT_att_clt_init>:
100612bc:	b580      	push	{r7, lr}
100612be:	f000 fd35 	bl	10061d2c <GAT_clt_init>
100612c2:	bd80      	pop	{r7, pc}

100612c4 <GAT_att_clt_rcv>:
100612c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100612c6:	4604      	mov	r4, r0
100612c8:	8805      	ldrh	r5, [r0, #0]
100612ca:	f7f5 fb6a 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
100612ce:	4601      	mov	r1, r0
100612d0:	4628      	mov	r0, r5
100612d2:	f7f2 fcd9 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
100612d6:	4605      	mov	r5, r0
100612d8:	4620      	mov	r0, r4
100612da:	f000 f8d7 	bl	1006148c <GAT_att_cmn_get_opcode>
100612de:	281d      	cmp	r0, #29
100612e0:	d003      	beq.n	100612ea <GAT_att_clt_rcv+0x26>
100612e2:	2823      	cmp	r0, #35	@ 0x23
100612e4:	d001      	beq.n	100612ea <GAT_att_clt_rcv+0x26>
100612e6:	281b      	cmp	r0, #27
100612e8:	d10e      	bne.n	10061308 <GAT_att_clt_rcv+0x44>
100612ea:	8861      	ldrh	r1, [r4, #2]
100612ec:	88ea      	ldrh	r2, [r5, #6]
100612ee:	4291      	cmp	r1, r2
100612f0:	d805      	bhi.n	100612fe <GAT_att_clt_rcv+0x3a>
100612f2:	2903      	cmp	r1, #3
100612f4:	d303      	bcc.n	100612fe <GAT_att_clt_rcv+0x3a>
100612f6:	2823      	cmp	r0, #35	@ 0x23
100612f8:	d167      	bne.n	100613ca <GAT_att_clt_rcv+0x106>
100612fa:	2904      	cmp	r1, #4
100612fc:	d865      	bhi.n	100613ca <GAT_att_clt_rcv+0x106>
100612fe:	4620      	mov	r0, r4
10061300:	f7f0 fe38 	bl	10051f74 <ACL_pkt_release>
10061304:	2000      	movs	r0, #0
10061306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061308:	4620      	mov	r0, r4
1006130a:	f000 f8bf 	bl	1006148c <GAT_att_cmn_get_opcode>
1006130e:	88a9      	ldrh	r1, [r5, #4]
10061310:	06ca      	lsls	r2, r1, #27
10061312:	d56e      	bpl.n	100613f2 <GAT_att_clt_rcv+0x12e>
10061314:	2801      	cmp	r0, #1
10061316:	d002      	beq.n	1006131e <GAT_att_clt_rcv+0x5a>
10061318:	78aa      	ldrb	r2, [r5, #2]
1006131a:	4290      	cmp	r0, r2
1006131c:	d169      	bne.n	100613f2 <GAT_att_clt_rcv+0x12e>
1006131e:	2010      	movs	r0, #16
10061320:	4381      	bics	r1, r0
10061322:	80a9      	strh	r1, [r5, #4]
10061324:	896a      	ldrh	r2, [r5, #10]
10061326:	8929      	ldrh	r1, [r5, #8]
10061328:	2603      	movs	r6, #3
1006132a:	4630      	mov	r0, r6
1006132c:	f7f2 fd1e 	bl	10053d6c <GAT_att_cmn_stop_timer>
10061330:	8861      	ldrh	r1, [r4, #2]
10061332:	88e8      	ldrh	r0, [r5, #6]
10061334:	9100      	str	r1, [sp, #0]
10061336:	4281      	cmp	r1, r0
10061338:	d900      	bls.n	1006133c <GAT_att_clt_rcv+0x78>
1006133a:	e09a      	b.n	10061472 <GAT_att_clt_rcv+0x1ae>
1006133c:	4620      	mov	r0, r4
1006133e:	f000 f8a5 	bl	1006148c <GAT_att_cmn_get_opcode>
10061342:	1e42      	subs	r2, r0, #1
10061344:	2101      	movs	r1, #1
10061346:	41ca      	rors	r2, r1
10061348:	2300      	movs	r3, #0
1006134a:	2a10      	cmp	r2, #16
1006134c:	d900      	bls.n	10061350 <GAT_att_clt_rcv+0x8c>
1006134e:	e088      	b.n	10061462 <GAT_att_clt_rcv+0x19e>
10061350:	0092      	lsls	r2, r2, #2
10061352:	461f      	mov	r7, r3
10061354:	a301      	add	r3, pc, #4	@ (adr r3, 1006135c <GAT_att_clt_rcv+0x98>)
10061356:	589a      	ldr	r2, [r3, r2]
10061358:	463b      	mov	r3, r7
1006135a:	4697      	mov	pc, r2
1006135c:	10061413 	.word	0x10061413
10061360:	10061417 	.word	0x10061417
10061364:	10061423 	.word	0x10061423
10061368:	10061441 	.word	0x10061441
1006136c:	100613a1 	.word	0x100613a1
10061370:	10061469 	.word	0x10061469
10061374:	10061469 	.word	0x10061469
10061378:	10061469 	.word	0x10061469
1006137c:	100613a1 	.word	0x100613a1
10061380:	1006140f 	.word	0x1006140f
10061384:	10061463 	.word	0x10061463
10061388:	1006141b 	.word	0x1006141b
1006138c:	1006140f 	.word	0x1006140f
10061390:	10061463 	.word	0x10061463
10061394:	10061463 	.word	0x10061463
10061398:	10061463 	.word	0x10061463
1006139c:	10061469 	.word	0x10061469
100613a0:	2809      	cmp	r0, #9
100613a2:	d102      	bne.n	100613aa <GAT_att_clt_rcv+0xe6>
100613a4:	9900      	ldr	r1, [sp, #0]
100613a6:	2904      	cmp	r1, #4
100613a8:	d35b      	bcc.n	10061462 <GAT_att_clt_rcv+0x19e>
100613aa:	2811      	cmp	r0, #17
100613ac:	d102      	bne.n	100613b4 <GAT_att_clt_rcv+0xf0>
100613ae:	9800      	ldr	r0, [sp, #0]
100613b0:	2806      	cmp	r0, #6
100613b2:	d356      	bcc.n	10061462 <GAT_att_clt_rcv+0x19e>
100613b4:	89a0      	ldrh	r0, [r4, #12]
100613b6:	1c40      	adds	r0, r0, #1
100613b8:	b281      	uxth	r1, r0
100613ba:	4620      	mov	r0, r4
100613bc:	f000 fa47 	bl	1006184e <ACL_pkt_read_8b>
100613c0:	463b      	mov	r3, r7
100613c2:	2800      	cmp	r0, #0
100613c4:	d04d      	beq.n	10061462 <GAT_att_clt_rcv+0x19e>
100613c6:	4601      	mov	r1, r0
100613c8:	e043      	b.n	10061452 <GAT_att_clt_rcv+0x18e>
100613ca:	281d      	cmp	r0, #29
100613cc:	d10d      	bne.n	100613ea <GAT_att_clt_rcv+0x126>
100613ce:	88a8      	ldrh	r0, [r5, #4]
100613d0:	0680      	lsls	r0, r0, #26
100613d2:	d412      	bmi.n	100613fa <GAT_att_clt_rcv+0x136>
100613d4:	896a      	ldrh	r2, [r5, #10]
100613d6:	8929      	ldrh	r1, [r5, #8]
100613d8:	2002      	movs	r0, #2
100613da:	f7f2 fd11 	bl	10053e00 <GAT_att_cmn_start_timer>
100613de:	2800      	cmp	r0, #0
100613e0:	d14c      	bne.n	1006147c <GAT_att_clt_rcv+0x1b8>
100613e2:	88a8      	ldrh	r0, [r5, #4]
100613e4:	2120      	movs	r1, #32
100613e6:	4301      	orrs	r1, r0
100613e8:	80a9      	strh	r1, [r5, #4]
100613ea:	4620      	mov	r0, r4
100613ec:	f000 ffb7 	bl	1006235e <GAT_clt_rcv_srv_initiated>
100613f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100613f2:	4620      	mov	r0, r4
100613f4:	f000 fab7 	bl	10061966 <GAT_att_clt_unexpect_rx>
100613f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100613fa:	3508      	adds	r5, #8
100613fc:	2042      	movs	r0, #66	@ 0x42
100613fe:	2103      	movs	r1, #3
10061400:	2202      	movs	r2, #2
10061402:	462b      	mov	r3, r5
10061404:	f7ff feaa 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
10061408:	2800      	cmp	r0, #0
1006140a:	d137      	bne.n	1006147c <GAT_att_clt_rcv+0x1b8>
1006140c:	e777      	b.n	100612fe <GAT_att_clt_rcv+0x3a>
1006140e:	460b      	mov	r3, r1
10061410:	e027      	b.n	10061462 <GAT_att_clt_rcv+0x19e>
10061412:	2305      	movs	r3, #5
10061414:	e025      	b.n	10061462 <GAT_att_clt_rcv+0x19e>
10061416:	4633      	mov	r3, r6
10061418:	e023      	b.n	10061462 <GAT_att_clt_rcv+0x19e>
1006141a:	9b00      	ldr	r3, [sp, #0]
1006141c:	2b04      	cmp	r3, #4
1006141e:	d91f      	bls.n	10061460 <GAT_att_clt_rcv+0x19c>
10061420:	e01f      	b.n	10061462 <GAT_att_clt_rcv+0x19e>
10061422:	9800      	ldr	r0, [sp, #0]
10061424:	2806      	cmp	r0, #6
10061426:	d31c      	bcc.n	10061462 <GAT_att_clt_rcv+0x19e>
10061428:	89a0      	ldrh	r0, [r4, #12]
1006142a:	1c40      	adds	r0, r0, #1
1006142c:	b281      	uxth	r1, r0
1006142e:	4620      	mov	r0, r4
10061430:	f000 fa0d 	bl	1006184e <ACL_pkt_read_8b>
10061434:	2801      	cmp	r0, #1
10061436:	d00b      	beq.n	10061450 <GAT_att_clt_rcv+0x18c>
10061438:	2802      	cmp	r0, #2
1006143a:	d11a      	bne.n	10061472 <GAT_att_clt_rcv+0x1ae>
1006143c:	2112      	movs	r1, #18
1006143e:	e008      	b.n	10061452 <GAT_att_clt_rcv+0x18e>
10061440:	9800      	ldr	r0, [sp, #0]
10061442:	2802      	cmp	r0, #2
10061444:	d30d      	bcc.n	10061462 <GAT_att_clt_rcv+0x19e>
10061446:	9b00      	ldr	r3, [sp, #0]
10061448:	1e58      	subs	r0, r3, #1
1006144a:	0780      	lsls	r0, r0, #30
1006144c:	d108      	bne.n	10061460 <GAT_att_clt_rcv+0x19c>
1006144e:	e008      	b.n	10061462 <GAT_att_clt_rcv+0x19e>
10061450:	2104      	movs	r1, #4
10061452:	9e00      	ldr	r6, [sp, #0]
10061454:	1eb0      	subs	r0, r6, #2
10061456:	f7de ff79 	bl	1004034c <__aeabi_uidivmod>
1006145a:	2900      	cmp	r1, #0
1006145c:	4633      	mov	r3, r6
1006145e:	d000      	beq.n	10061462 <GAT_att_clt_rcv+0x19e>
10061460:	2300      	movs	r3, #0
10061462:	9800      	ldr	r0, [sp, #0]
10061464:	4298      	cmp	r0, r3
10061466:	d104      	bne.n	10061472 <GAT_att_clt_rcv+0x1ae>
10061468:	4807      	ldr	r0, [pc, #28]	@ (10061488 <__arm_cp.1_0>)
1006146a:	6801      	ldr	r1, [r0, #0]
1006146c:	4620      	mov	r0, r4
1006146e:	4788      	blx	r1
10061470:	e002      	b.n	10061478 <GAT_att_clt_rcv+0x1b4>
10061472:	4620      	mov	r0, r4
10061474:	f000 ff5e 	bl	10062334 <GAT_clt_rcv_corrupted>
10061478:	2884      	cmp	r0, #132	@ 0x84
1006147a:	d101      	bne.n	10061480 <GAT_att_clt_rcv+0x1bc>
1006147c:	2084      	movs	r0, #132	@ 0x84
1006147e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061480:	2000      	movs	r0, #0
10061482:	70a8      	strb	r0, [r5, #2]
10061484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061486:	46c0      	nop			@ (mov r8, r8)

10061488 <__arm_cp.1_0>:
10061488:	20001298 	.word	0x20001298

1006148c <GAT_att_cmn_get_opcode>:
1006148c:	b580      	push	{r7, lr}
1006148e:	8981      	ldrh	r1, [r0, #12]
10061490:	f000 f9dd 	bl	1006184e <ACL_pkt_read_8b>
10061494:	bd80      	pop	{r7, pc}

10061496 <GAT_att_clt_connection>:
10061496:	b580      	push	{r7, lr}
10061498:	f000 fc70 	bl	10061d7c <GAT_clt_connection>
1006149c:	bd80      	pop	{r7, pc}

1006149e <GAT_att_clt_bearer_close>:
1006149e:	b580      	push	{r7, lr}
100614a0:	f000 fc6e 	bl	10061d80 <GAT_clt_bearer_close>
100614a4:	bd80      	pop	{r7, pc}
	...

100614a8 <GAT_att_clt_tx>:
100614a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100614aa:	4605      	mov	r5, r0
100614ac:	8881      	ldrh	r1, [r0, #4]
100614ae:	8840      	ldrh	r0, [r0, #2]
100614b0:	f7f2 fbea 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
100614b4:	2800      	cmp	r0, #0
100614b6:	d008      	beq.n	100614ca <GAT_att_clt_tx+0x22>
100614b8:	4604      	mov	r4, r0
100614ba:	7829      	ldrb	r1, [r5, #0]
100614bc:	291e      	cmp	r1, #30
100614be:	d106      	bne.n	100614ce <GAT_att_clt_tx+0x26>
100614c0:	88a0      	ldrh	r0, [r4, #4]
100614c2:	0680      	lsls	r0, r0, #26
100614c4:	d439      	bmi.n	1006153a <GAT_att_clt_tx+0x92>
100614c6:	260c      	movs	r6, #12
100614c8:	e193      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
100614ca:	2612      	movs	r6, #18
100614cc:	e191      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
100614ce:	0648      	lsls	r0, r1, #25
100614d0:	d406      	bmi.n	100614e0 <GAT_att_clt_tx+0x38>
100614d2:	48ca      	ldr	r0, [pc, #808]	@ (100617fc <__arm_cp.5_0>)
100614d4:	4aca      	ldr	r2, [pc, #808]	@ (10061800 <__arm_cp.5_1>)
100614d6:	6002      	str	r2, [r0, #0]
100614d8:	88a0      	ldrh	r0, [r4, #4]
100614da:	06c0      	lsls	r0, r0, #27
100614dc:	d500      	bpl.n	100614e0 <GAT_att_clt_tx+0x38>
100614de:	e16d      	b.n	100617bc <GAT_att_clt_tx+0x314>
100614e0:	88e0      	ldrh	r0, [r4, #6]
100614e2:	1e8a      	subs	r2, r1, #2
100614e4:	2686      	movs	r6, #134	@ 0x86
100614e6:	2a1e      	cmp	r2, #30
100614e8:	d900      	bls.n	100614ec <GAT_att_clt_tx+0x44>
100614ea:	e091      	b.n	10061610 <GAT_att_clt_tx+0x168>
100614ec:	2703      	movs	r7, #3
100614ee:	0052      	lsls	r2, r2, #1
100614f0:	447a      	add	r2, pc
100614f2:	8892      	ldrh	r2, [r2, #4]
100614f4:	0052      	lsls	r2, r2, #1
100614f6:	4497      	add	pc, r2
100614f8:	017c0022 	.word	0x017c0022
100614fc:	017c001e 	.word	0x017c001e
10061500:	017c009f 	.word	0x017c009f
10061504:	017c00a2 	.word	0x017c00a2
10061508:	017c0022 	.word	0x017c0022
1006150c:	017c001e 	.word	0x017c001e
10061510:	017c0094 	.word	0x017c0094
10061514:	017c012d 	.word	0x017c012d
10061518:	017c0090 	.word	0x017c0090
1006151c:	017c017c 	.word	0x017c017c
10061520:	017c00a9 	.word	0x017c00a9
10061524:	017c00ac 	.word	0x017c00ac
10061528:	017c017c 	.word	0x017c017c
1006152c:	017c017c 	.word	0x017c017c
10061530:	017c0021 	.word	0x017c0021
10061534:	0094      	.short	0x0094
10061536:	2705      	movs	r7, #5
10061538:	e001      	b.n	1006153e <GAT_att_clt_tx+0x96>
1006153a:	88e0      	ldrh	r0, [r4, #6]
1006153c:	2701      	movs	r7, #1
1006153e:	b2b9      	uxth	r1, r7
10061540:	4281      	cmp	r1, r0
10061542:	d300      	bcc.n	10061546 <GAT_att_clt_tx+0x9e>
10061544:	4607      	mov	r7, r0
10061546:	9700      	str	r7, [sp, #0]
10061548:	b2bf      	uxth	r7, r7
1006154a:	4620      	mov	r0, r4
1006154c:	4639      	mov	r1, r7
1006154e:	f7f2 fc99 	bl	10053e84 <GAT_att_cmn_get_pckt>
10061552:	2800      	cmp	r0, #0
10061554:	d02f      	beq.n	100615b6 <GAT_att_clt_tx+0x10e>
10061556:	4606      	mov	r6, r0
10061558:	782a      	ldrb	r2, [r5, #0]
1006155a:	8981      	ldrh	r1, [r0, #12]
1006155c:	f000 f954 	bl	10061808 <ACL_pkt_write_8b>
10061560:	7828      	ldrb	r0, [r5, #0]
10061562:	1e81      	subs	r1, r0, #2
10061564:	2916      	cmp	r1, #22
10061566:	d82d      	bhi.n	100615c4 <GAT_att_clt_tx+0x11c>
10061568:	0049      	lsls	r1, r1, #1
1006156a:	46c0      	nop			@ (mov r8, r8)
1006156c:	4479      	add	r1, pc
1006156e:	8889      	ldrh	r1, [r1, #4]
10061570:	0049      	lsls	r1, r1, #1
10061572:	448f      	add	pc, r1
10061574:	010d0016 	.word	0x010d0016
10061578:	010d0070 	.word	0x010d0070
1006157c:	010d0077 	.word	0x010d0077
10061580:	010d0093 	.word	0x010d0093
10061584:	010d00a1 	.word	0x010d00a1
10061588:	010d00aa 	.word	0x010d00aa
1006158c:	010d00ba 	.word	0x010d00ba
10061590:	010d00c0 	.word	0x010d00c0
10061594:	010d002f 	.word	0x010d002f
10061598:	010d010d 	.word	0x010d010d
1006159c:	010d00ce 	.word	0x010d00ce
100615a0:	00e6      	.short	0x00e6
100615a2:	4898      	ldr	r0, [pc, #608]	@ (10061804 <__arm_cp.5_2>)
100615a4:	8a02      	ldrh	r2, [r0, #16]
100615a6:	89b0      	ldrh	r0, [r6, #12]
100615a8:	1c40      	adds	r0, r0, #1
100615aa:	b281      	uxth	r1, r0
100615ac:	4630      	mov	r0, r6
100615ae:	f7f0 fd16 	bl	10051fde <ACL_pkt_write_16b>
100615b2:	2003      	movs	r0, #3
100615b4:	e0eb      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
100615b6:	2008      	movs	r0, #8
100615b8:	f7fe f9da 	bl	1005f970 <tsk_notify_idx>
100615bc:	f7ed fb81 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
100615c0:	2688      	movs	r6, #136	@ 0x88
100615c2:	e116      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
100615c4:	2820      	cmp	r0, #32
100615c6:	d100      	bne.n	100615ca <GAT_att_clt_tx+0x122>
100615c8:	e0ca      	b.n	10061760 <GAT_att_clt_tx+0x2b8>
100615ca:	2852      	cmp	r0, #82	@ 0x52
100615cc:	d002      	beq.n	100615d4 <GAT_att_clt_tx+0x12c>
100615ce:	28d2      	cmp	r0, #210	@ 0xd2
100615d0:	d000      	beq.n	100615d4 <GAT_att_clt_tx+0x12c>
100615d2:	e0dd      	b.n	10061790 <GAT_att_clt_tx+0x2e8>
100615d4:	892a      	ldrh	r2, [r5, #8]
100615d6:	89b0      	ldrh	r0, [r6, #12]
100615d8:	1c40      	adds	r0, r0, #1
100615da:	b281      	uxth	r1, r0
100615dc:	4630      	mov	r0, r6
100615de:	f7f0 fcfe 	bl	10051fde <ACL_pkt_write_16b>
100615e2:	68eb      	ldr	r3, [r5, #12]
100615e4:	896a      	ldrh	r2, [r5, #10]
100615e6:	89b0      	ldrh	r0, [r6, #12]
100615e8:	1cc0      	adds	r0, r0, #3
100615ea:	b281      	uxth	r1, r0
100615ec:	4630      	mov	r0, r6
100615ee:	f7f0 fcff 	bl	10051ff0 <ACL_pkt_write>
100615f2:	7828      	ldrb	r0, [r5, #0]
100615f4:	2812      	cmp	r0, #18
100615f6:	d100      	bne.n	100615fa <GAT_att_clt_tx+0x152>
100615f8:	e0b8      	b.n	1006176c <GAT_att_clt_tx+0x2c4>
100615fa:	28d2      	cmp	r0, #210	@ 0xd2
100615fc:	d000      	beq.n	10061600 <GAT_att_clt_tx+0x158>
100615fe:	e0c7      	b.n	10061790 <GAT_att_clt_tx+0x2e8>
10061600:	9800      	ldr	r0, [sp, #0]
10061602:	380c      	subs	r0, #12
10061604:	8070      	strh	r0, [r6, #2]
10061606:	8920      	ldrh	r0, [r4, #8]
10061608:	4631      	mov	r1, r6
1006160a:	f7fe f86c 	bl	1005f6e6 <smp_sap_sm2_packet_data_signing_compute>
1006160e:	e0bf      	b.n	10061790 <GAT_att_clt_tx+0x2e8>
10061610:	2952      	cmp	r1, #82	@ 0x52
10061612:	d002      	beq.n	1006161a <GAT_att_clt_tx+0x172>
10061614:	29d2      	cmp	r1, #210	@ 0xd2
10061616:	d000      	beq.n	1006161a <GAT_att_clt_tx+0x172>
10061618:	e0eb      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
1006161a:	29d2      	cmp	r1, #210	@ 0xd2
1006161c:	d008      	beq.n	10061630 <GAT_att_clt_tx+0x188>
1006161e:	2103      	movs	r1, #3
10061620:	e007      	b.n	10061632 <GAT_att_clt_tx+0x18a>
10061622:	7a29      	ldrb	r1, [r5, #8]
10061624:	0049      	lsls	r1, r1, #1
10061626:	1c4f      	adds	r7, r1, #1
10061628:	4287      	cmp	r7, r0
1006162a:	d800      	bhi.n	1006162e <GAT_att_clt_tx+0x186>
1006162c:	e787      	b.n	1006153e <GAT_att_clt_tx+0x96>
1006162e:	e0e0      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
10061630:	210f      	movs	r1, #15
10061632:	896a      	ldrh	r2, [r5, #10]
10061634:	1857      	adds	r7, r2, r1
10061636:	e782      	b.n	1006153e <GAT_att_clt_tx+0x96>
10061638:	89e9      	ldrh	r1, [r5, #14]
1006163a:	1dcf      	adds	r7, r1, #7
1006163c:	e77f      	b.n	1006153e <GAT_att_clt_tx+0x96>
1006163e:	68e9      	ldr	r1, [r5, #12]
10061640:	7c09      	ldrb	r1, [r1, #16]
10061642:	2980      	cmp	r1, #128	@ 0x80
10061644:	d000      	beq.n	10061648 <GAT_att_clt_tx+0x1a0>
10061646:	e089      	b.n	1006175c <GAT_att_clt_tx+0x2b4>
10061648:	2715      	movs	r7, #21
1006164a:	e778      	b.n	1006153e <GAT_att_clt_tx+0x96>
1006164c:	89a9      	ldrh	r1, [r5, #12]
1006164e:	1d4f      	adds	r7, r1, #5
10061650:	e775      	b.n	1006153e <GAT_att_clt_tx+0x96>
10061652:	2702      	movs	r7, #2
10061654:	e773      	b.n	1006153e <GAT_att_clt_tx+0x96>
10061656:	896a      	ldrh	r2, [r5, #10]
10061658:	8929      	ldrh	r1, [r5, #8]
1006165a:	4630      	mov	r0, r6
1006165c:	f000 f9a2 	bl	100619a4 <GAT_att_clt_fill_handle_range>
10061660:	2005      	movs	r0, #5
10061662:	e094      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
10061664:	896a      	ldrh	r2, [r5, #10]
10061666:	8929      	ldrh	r1, [r5, #8]
10061668:	4630      	mov	r0, r6
1006166a:	f000 f99b 	bl	100619a4 <GAT_att_clt_fill_handle_range>
1006166e:	89aa      	ldrh	r2, [r5, #12]
10061670:	89b0      	ldrh	r0, [r6, #12]
10061672:	1d40      	adds	r0, r0, #5
10061674:	b281      	uxth	r1, r0
10061676:	4630      	mov	r0, r6
10061678:	f7f0 fcb1 	bl	10051fde <ACL_pkt_write_16b>
1006167c:	89e8      	ldrh	r0, [r5, #14]
1006167e:	1dc0      	adds	r0, r0, #7
10061680:	42b8      	cmp	r0, r7
10061682:	d800      	bhi.n	10061686 <GAT_att_clt_tx+0x1de>
10061684:	4607      	mov	r7, r0
10061686:	1ff8      	subs	r0, r7, #7
10061688:	b282      	uxth	r2, r0
1006168a:	692b      	ldr	r3, [r5, #16]
1006168c:	89b0      	ldrh	r0, [r6, #12]
1006168e:	1dc0      	adds	r0, r0, #7
10061690:	b281      	uxth	r1, r0
10061692:	4630      	mov	r0, r6
10061694:	f7f0 fcac 	bl	10051ff0 <ACL_pkt_write>
10061698:	2007      	movs	r0, #7
1006169a:	e078      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
1006169c:	896a      	ldrh	r2, [r5, #10]
1006169e:	8929      	ldrh	r1, [r5, #8]
100616a0:	4630      	mov	r0, r6
100616a2:	f000 f97f 	bl	100619a4 <GAT_att_clt_fill_handle_range>
100616a6:	89b0      	ldrh	r0, [r6, #12]
100616a8:	1d40      	adds	r0, r0, #5
100616aa:	68eb      	ldr	r3, [r5, #12]
100616ac:	7c19      	ldrb	r1, [r3, #16]
100616ae:	2980      	cmp	r1, #128	@ 0x80
100616b0:	d15e      	bne.n	10061770 <GAT_att_clt_tx+0x2c8>
100616b2:	b281      	uxth	r1, r0
100616b4:	2210      	movs	r2, #16
100616b6:	e05e      	b.n	10061776 <GAT_att_clt_tx+0x2ce>
100616b8:	892a      	ldrh	r2, [r5, #8]
100616ba:	89b0      	ldrh	r0, [r6, #12]
100616bc:	1c40      	adds	r0, r0, #1
100616be:	b281      	uxth	r1, r0
100616c0:	4630      	mov	r0, r6
100616c2:	f7f0 fc8c 	bl	10051fde <ACL_pkt_write_16b>
100616c6:	200b      	movs	r0, #11
100616c8:	e061      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
100616ca:	892a      	ldrh	r2, [r5, #8]
100616cc:	89b0      	ldrh	r0, [r6, #12]
100616ce:	1c40      	adds	r0, r0, #1
100616d0:	b281      	uxth	r1, r0
100616d2:	4630      	mov	r0, r6
100616d4:	f7f0 fc83 	bl	10051fde <ACL_pkt_write_16b>
100616d8:	896a      	ldrh	r2, [r5, #10]
100616da:	89b0      	ldrh	r0, [r6, #12]
100616dc:	1cc0      	adds	r0, r0, #3
100616de:	b281      	uxth	r1, r0
100616e0:	4630      	mov	r0, r6
100616e2:	f7f0 fc7c 	bl	10051fde <ACL_pkt_write_16b>
100616e6:	200d      	movs	r0, #13
100616e8:	e051      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
100616ea:	4628      	mov	r0, r5
100616ec:	4631      	mov	r1, r6
100616ee:	f000 f94d 	bl	1006198c <GAT_att_clt_fill_read_multi_req>
100616f2:	200f      	movs	r0, #15
100616f4:	e04b      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
100616f6:	896a      	ldrh	r2, [r5, #10]
100616f8:	8929      	ldrh	r1, [r5, #8]
100616fa:	4630      	mov	r0, r6
100616fc:	f000 f952 	bl	100619a4 <GAT_att_clt_fill_handle_range>
10061700:	89b0      	ldrh	r0, [r6, #12]
10061702:	1d40      	adds	r0, r0, #5
10061704:	68eb      	ldr	r3, [r5, #12]
10061706:	7c19      	ldrb	r1, [r3, #16]
10061708:	2980      	cmp	r1, #128	@ 0x80
1006170a:	d139      	bne.n	10061780 <GAT_att_clt_tx+0x2d8>
1006170c:	b281      	uxth	r1, r0
1006170e:	2210      	movs	r2, #16
10061710:	e039      	b.n	10061786 <GAT_att_clt_tx+0x2de>
10061712:	892a      	ldrh	r2, [r5, #8]
10061714:	89b0      	ldrh	r0, [r6, #12]
10061716:	1c40      	adds	r0, r0, #1
10061718:	b281      	uxth	r1, r0
1006171a:	4630      	mov	r0, r6
1006171c:	f7f0 fc5f 	bl	10051fde <ACL_pkt_write_16b>
10061720:	896a      	ldrh	r2, [r5, #10]
10061722:	89b0      	ldrh	r0, [r6, #12]
10061724:	1cc0      	adds	r0, r0, #3
10061726:	b281      	uxth	r1, r0
10061728:	4630      	mov	r0, r6
1006172a:	f7f0 fc58 	bl	10051fde <ACL_pkt_write_16b>
1006172e:	692b      	ldr	r3, [r5, #16]
10061730:	89aa      	ldrh	r2, [r5, #12]
10061732:	89b0      	ldrh	r0, [r6, #12]
10061734:	1d40      	adds	r0, r0, #5
10061736:	b281      	uxth	r1, r0
10061738:	4630      	mov	r0, r6
1006173a:	f7f0 fc59 	bl	10051ff0 <ACL_pkt_write>
1006173e:	2017      	movs	r0, #23
10061740:	e025      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
10061742:	7a2a      	ldrb	r2, [r5, #8]
10061744:	89b0      	ldrh	r0, [r6, #12]
10061746:	1c40      	adds	r0, r0, #1
10061748:	b281      	uxth	r1, r0
1006174a:	4630      	mov	r0, r6
1006174c:	f000 f85c 	bl	10061808 <ACL_pkt_write_8b>
10061750:	2019      	movs	r0, #25
10061752:	e01c      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
10061754:	68e9      	ldr	r1, [r5, #12]
10061756:	7c09      	ldrb	r1, [r1, #16]
10061758:	2980      	cmp	r1, #128	@ 0x80
1006175a:	d04c      	beq.n	100617f6 <GAT_att_clt_tx+0x34e>
1006175c:	2707      	movs	r7, #7
1006175e:	e6ee      	b.n	1006153e <GAT_att_clt_tx+0x96>
10061760:	4628      	mov	r0, r5
10061762:	4631      	mov	r1, r6
10061764:	f000 f912 	bl	1006198c <GAT_att_clt_fill_read_multi_req>
10061768:	2021      	movs	r0, #33	@ 0x21
1006176a:	e010      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
1006176c:	2013      	movs	r0, #19
1006176e:	e00e      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
10061770:	b281      	uxth	r1, r0
10061772:	330c      	adds	r3, #12
10061774:	2202      	movs	r2, #2
10061776:	4630      	mov	r0, r6
10061778:	f7f0 fc3a 	bl	10051ff0 <ACL_pkt_write>
1006177c:	2009      	movs	r0, #9
1006177e:	e006      	b.n	1006178e <GAT_att_clt_tx+0x2e6>
10061780:	b281      	uxth	r1, r0
10061782:	330c      	adds	r3, #12
10061784:	2202      	movs	r2, #2
10061786:	4630      	mov	r0, r6
10061788:	f7f0 fc32 	bl	10051ff0 <ACL_pkt_write>
1006178c:	2011      	movs	r0, #17
1006178e:	70a0      	strb	r0, [r4, #2]
10061790:	9800      	ldr	r0, [sp, #0]
10061792:	8070      	strh	r0, [r6, #2]
10061794:	782a      	ldrb	r2, [r5, #0]
10061796:	89b1      	ldrh	r1, [r6, #12]
10061798:	4630      	mov	r0, r6
1006179a:	f000 f835 	bl	10061808 <ACL_pkt_write_8b>
1006179e:	7828      	ldrb	r0, [r5, #0]
100617a0:	0641      	lsls	r1, r0, #25
100617a2:	d411      	bmi.n	100617c8 <GAT_att_clt_tx+0x320>
100617a4:	281e      	cmp	r0, #30
100617a6:	d00f      	beq.n	100617c8 <GAT_att_clt_tx+0x320>
100617a8:	8962      	ldrh	r2, [r4, #10]
100617aa:	8921      	ldrh	r1, [r4, #8]
100617ac:	2003      	movs	r0, #3
100617ae:	f7f2 fb27 	bl	10053e00 <GAT_att_cmn_start_timer>
100617b2:	2800      	cmp	r0, #0
100617b4:	d004      	beq.n	100617c0 <GAT_att_clt_tx+0x318>
100617b6:	4630      	mov	r0, r6
100617b8:	f7f0 fbdc 	bl	10051f74 <ACL_pkt_release>
100617bc:	2684      	movs	r6, #132	@ 0x84
100617be:	e018      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
100617c0:	88a0      	ldrh	r0, [r4, #4]
100617c2:	2110      	movs	r1, #16
100617c4:	4301      	orrs	r1, r0
100617c6:	80a1      	strh	r1, [r4, #4]
100617c8:	8960      	ldrh	r0, [r4, #10]
100617ca:	4631      	mov	r1, r6
100617cc:	f7f2 fade 	bl	10053d8c <GAT_att_cmn_send>
100617d0:	2800      	cmp	r0, #0
100617d2:	d001      	beq.n	100617d8 <GAT_att_clt_tx+0x330>
100617d4:	2681      	movs	r6, #129	@ 0x81
100617d6:	e00c      	b.n	100617f2 <GAT_att_clt_tx+0x34a>
100617d8:	7828      	ldrb	r0, [r5, #0]
100617da:	2600      	movs	r6, #0
100617dc:	281e      	cmp	r0, #30
100617de:	d108      	bne.n	100617f2 <GAT_att_clt_tx+0x34a>
100617e0:	8962      	ldrh	r2, [r4, #10]
100617e2:	8921      	ldrh	r1, [r4, #8]
100617e4:	2002      	movs	r0, #2
100617e6:	f7f2 fac1 	bl	10053d6c <GAT_att_cmn_stop_timer>
100617ea:	88a0      	ldrh	r0, [r4, #4]
100617ec:	2120      	movs	r1, #32
100617ee:	4388      	bics	r0, r1
100617f0:	80a0      	strh	r0, [r4, #4]
100617f2:	4630      	mov	r0, r6
100617f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100617f6:	2711      	movs	r7, #17
100617f8:	e6a1      	b.n	1006153e <GAT_att_clt_tx+0x96>
100617fa:	46c0      	nop			@ (mov r8, r8)

100617fc <__arm_cp.5_0>:
100617fc:	20001298 	.word	0x20001298

10061800 <__arm_cp.5_1>:
10061800:	10061e01 	.word	0x10061e01

10061804 <__arm_cp.5_2>:
10061804:	20000f34 	.word	0x20000f34

10061808 <ACL_pkt_write_8b>:
10061808:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006180a:	4614      	mov	r4, r2
1006180c:	6840      	ldr	r0, [r0, #4]
1006180e:	2920      	cmp	r1, #32
10061810:	d304      	bcc.n	1006181c <ACL_pkt_write_8b+0x14>
10061812:	ad01      	add	r5, sp, #4
10061814:	462a      	mov	r2, r5
10061816:	f7fc fb74 	bl	1005df02 <Mem_Buff_get_buff_off>
1006181a:	8829      	ldrh	r1, [r5, #0]
1006181c:	1840      	adds	r0, r0, r1
1006181e:	7104      	strb	r4, [r0, #4]
10061820:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10061822 <GAT_att_clt_read_grp_type_get_last_attr_h>:
10061822:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10061824:	4604      	mov	r4, r0
10061826:	8980      	ldrh	r0, [r0, #12]
10061828:	1c40      	adds	r0, r0, #1
1006182a:	b281      	uxth	r1, r0
1006182c:	4620      	mov	r0, r4
1006182e:	f000 f80e 	bl	1006184e <ACL_pkt_read_8b>
10061832:	8861      	ldrh	r1, [r4, #2]
10061834:	1a08      	subs	r0, r1, r0
10061836:	89a1      	ldrh	r1, [r4, #12]
10061838:	1840      	adds	r0, r0, r1
1006183a:	1c80      	adds	r0, r0, #2
1006183c:	b281      	uxth	r1, r0
1006183e:	2202      	movs	r2, #2
10061840:	ad01      	add	r5, sp, #4
10061842:	4620      	mov	r0, r4
10061844:	462b      	mov	r3, r5
10061846:	f7f0 fbb1 	bl	10051fac <ACL_pkt_read>
1006184a:	8828      	ldrh	r0, [r5, #0]
1006184c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006184e <ACL_pkt_read_8b>:
1006184e:	b51c      	push	{r2, r3, r4, lr}
10061850:	291f      	cmp	r1, #31
10061852:	d803      	bhi.n	1006185c <ACL_pkt_read_8b+0xe>
10061854:	aa01      	add	r2, sp, #4
10061856:	8011      	strh	r1, [r2, #0]
10061858:	6840      	ldr	r0, [r0, #4]
1006185a:	e005      	b.n	10061868 <ACL_pkt_read_8b+0x1a>
1006185c:	6840      	ldr	r0, [r0, #4]
1006185e:	ac01      	add	r4, sp, #4
10061860:	4622      	mov	r2, r4
10061862:	f7fc fb4e 	bl	1005df02 <Mem_Buff_get_buff_off>
10061866:	8821      	ldrh	r1, [r4, #0]
10061868:	1840      	adds	r0, r0, r1
1006186a:	7900      	ldrb	r0, [r0, #4]
1006186c:	bd1c      	pop	{r2, r3, r4, pc}

1006186e <GAT_att_clt_find_type_val_get_last_attr_h>:
1006186e:	b51c      	push	{r2, r3, r4, lr}
10061870:	8981      	ldrh	r1, [r0, #12]
10061872:	8842      	ldrh	r2, [r0, #2]
10061874:	1851      	adds	r1, r2, r1
10061876:	1e89      	subs	r1, r1, #2
10061878:	b289      	uxth	r1, r1
1006187a:	2202      	movs	r2, #2
1006187c:	ac01      	add	r4, sp, #4
1006187e:	4623      	mov	r3, r4
10061880:	f7f0 fb94 	bl	10051fac <ACL_pkt_read>
10061884:	8820      	ldrh	r0, [r4, #0]
10061886:	bd1c      	pop	{r2, r3, r4, pc}

10061888 <GAT_att_clt_parse_error_resp>:
10061888:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006188a:	460e      	mov	r6, r1
1006188c:	8841      	ldrh	r1, [r0, #2]
1006188e:	2905      	cmp	r1, #5
10061890:	d112      	bne.n	100618b8 <GAT_att_clt_parse_error_resp+0x30>
10061892:	461c      	mov	r4, r3
10061894:	4615      	mov	r5, r2
10061896:	8981      	ldrh	r1, [r0, #12]
10061898:	2205      	movs	r2, #5
1006189a:	af01      	add	r7, sp, #4
1006189c:	463b      	mov	r3, r7
1006189e:	f7f0 fb85 	bl	10051fac <ACL_pkt_read>
100618a2:	7878      	ldrb	r0, [r7, #1]
100618a4:	7030      	strb	r0, [r6, #0]
100618a6:	78b8      	ldrb	r0, [r7, #2]
100618a8:	78f9      	ldrb	r1, [r7, #3]
100618aa:	0209      	lsls	r1, r1, #8
100618ac:	1808      	adds	r0, r1, r0
100618ae:	8028      	strh	r0, [r5, #0]
100618b0:	9802      	ldr	r0, [sp, #8]
100618b2:	7020      	strb	r0, [r4, #0]
100618b4:	2000      	movs	r0, #0
100618b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100618b8:	2086      	movs	r0, #134	@ 0x86
100618ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100618bc <GAT_att_clt_read_type_get_last_attr_h>:
100618bc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100618be:	4604      	mov	r4, r0
100618c0:	8980      	ldrh	r0, [r0, #12]
100618c2:	1c40      	adds	r0, r0, #1
100618c4:	b281      	uxth	r1, r0
100618c6:	4620      	mov	r0, r4
100618c8:	f7ff ffc1 	bl	1006184e <ACL_pkt_read_8b>
100618cc:	8861      	ldrh	r1, [r4, #2]
100618ce:	1a08      	subs	r0, r1, r0
100618d0:	89a1      	ldrh	r1, [r4, #12]
100618d2:	1840      	adds	r0, r0, r1
100618d4:	b281      	uxth	r1, r0
100618d6:	2202      	movs	r2, #2
100618d8:	ad01      	add	r5, sp, #4
100618da:	4620      	mov	r0, r4
100618dc:	462b      	mov	r3, r5
100618de:	f7f0 fb65 	bl	10051fac <ACL_pkt_read>
100618e2:	8828      	ldrh	r0, [r5, #0]
100618e4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100618e6 <GAT_att_clt_read_type_get_data>:
100618e6:	b570      	push	{r4, r5, r6, lr}
100618e8:	4614      	mov	r4, r2
100618ea:	460e      	mov	r6, r1
100618ec:	4605      	mov	r5, r0
100618ee:	8980      	ldrh	r0, [r0, #12]
100618f0:	1c40      	adds	r0, r0, #1
100618f2:	b281      	uxth	r1, r0
100618f4:	4628      	mov	r0, r5
100618f6:	f7ff ffaa 	bl	1006184e <ACL_pkt_read_8b>
100618fa:	4602      	mov	r2, r0
100618fc:	4346      	muls	r6, r0
100618fe:	1cb0      	adds	r0, r6, #2
10061900:	8869      	ldrh	r1, [r5, #2]
10061902:	4288      	cmp	r0, r1
10061904:	d208      	bcs.n	10061918 <GAT_att_clt_read_type_get_data+0x32>
10061906:	89a9      	ldrh	r1, [r5, #12]
10061908:	1808      	adds	r0, r1, r0
1006190a:	b281      	uxth	r1, r0
1006190c:	4628      	mov	r0, r5
1006190e:	4623      	mov	r3, r4
10061910:	f7f0 fb4c 	bl	10051fac <ACL_pkt_read>
10061914:	2000      	movs	r0, #0
10061916:	bd70      	pop	{r4, r5, r6, pc}
10061918:	2086      	movs	r0, #134	@ 0x86
1006191a:	bd70      	pop	{r4, r5, r6, pc}

1006191c <GAT_att_clt_find_info_get_last_attr_h>:
1006191c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006191e:	4604      	mov	r4, r0
10061920:	8980      	ldrh	r0, [r0, #12]
10061922:	1c40      	adds	r0, r0, #1
10061924:	b281      	uxth	r1, r0
10061926:	4620      	mov	r0, r4
10061928:	f7ff ff91 	bl	1006184e <ACL_pkt_read_8b>
1006192c:	2111      	movs	r1, #17
1006192e:	43c9      	mvns	r1, r1
10061930:	2801      	cmp	r0, #1
10061932:	d100      	bne.n	10061936 <GAT_att_clt_find_info_get_last_attr_h+0x1a>
10061934:	310e      	adds	r1, #14
10061936:	8860      	ldrh	r0, [r4, #2]
10061938:	1840      	adds	r0, r0, r1
1006193a:	89a1      	ldrh	r1, [r4, #12]
1006193c:	1808      	adds	r0, r1, r0
1006193e:	b281      	uxth	r1, r0
10061940:	2202      	movs	r2, #2
10061942:	ad01      	add	r5, sp, #4
10061944:	4620      	mov	r0, r4
10061946:	462b      	mov	r3, r5
10061948:	f7f0 fb30 	bl	10051fac <ACL_pkt_read>
1006194c:	8828      	ldrh	r0, [r5, #0]
1006194e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10061950 <GAT_att_clt_prep_wr_cmp_data>:
10061950:	b580      	push	{r7, lr}
10061952:	460b      	mov	r3, r1
10061954:	8842      	ldrh	r2, [r0, #2]
10061956:	8981      	ldrh	r1, [r0, #12]
10061958:	1d49      	adds	r1, r1, #5
1006195a:	b289      	uxth	r1, r1
1006195c:	1f52      	subs	r2, r2, #5
1006195e:	b292      	uxth	r2, r2
10061960:	f7f0 fb1b 	bl	10051f9a <ACL_pkt_cmp>
10061964:	bd80      	pop	{r7, pc}

10061966 <GAT_att_clt_unexpect_rx>:
10061966:	b51c      	push	{r2, r3, r4, lr}
10061968:	4604      	mov	r4, r0
1006196a:	8800      	ldrh	r0, [r0, #0]
1006196c:	ab01      	add	r3, sp, #4
1006196e:	8018      	strh	r0, [r3, #0]
10061970:	2042      	movs	r0, #66	@ 0x42
10061972:	2102      	movs	r1, #2
10061974:	460a      	mov	r2, r1
10061976:	f7ff fbf1 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
1006197a:	2800      	cmp	r0, #0
1006197c:	d001      	beq.n	10061982 <GAT_att_clt_unexpect_rx+0x1c>
1006197e:	2084      	movs	r0, #132	@ 0x84
10061980:	bd1c      	pop	{r2, r3, r4, pc}
10061982:	4620      	mov	r0, r4
10061984:	f7f0 faf6 	bl	10051f74 <ACL_pkt_release>
10061988:	2000      	movs	r0, #0
1006198a:	bd1c      	pop	{r2, r3, r4, pc}

1006198c <GAT_att_clt_fill_read_multi_req>:
1006198c:	b510      	push	{r4, lr}
1006198e:	460c      	mov	r4, r1
10061990:	68c3      	ldr	r3, [r0, #12]
10061992:	8989      	ldrh	r1, [r1, #12]
10061994:	7a00      	ldrb	r0, [r0, #8]
10061996:	0042      	lsls	r2, r0, #1
10061998:	1c48      	adds	r0, r1, #1
1006199a:	b281      	uxth	r1, r0
1006199c:	4620      	mov	r0, r4
1006199e:	f7f0 fb27 	bl	10051ff0 <ACL_pkt_write>
100619a2:	bd10      	pop	{r4, pc}

100619a4 <GAT_att_clt_fill_handle_range>:
100619a4:	b5b0      	push	{r4, r5, r7, lr}
100619a6:	4614      	mov	r4, r2
100619a8:	460a      	mov	r2, r1
100619aa:	4605      	mov	r5, r0
100619ac:	8980      	ldrh	r0, [r0, #12]
100619ae:	1c40      	adds	r0, r0, #1
100619b0:	b281      	uxth	r1, r0
100619b2:	4628      	mov	r0, r5
100619b4:	f7f0 fb13 	bl	10051fde <ACL_pkt_write_16b>
100619b8:	89a8      	ldrh	r0, [r5, #12]
100619ba:	1cc0      	adds	r0, r0, #3
100619bc:	b281      	uxth	r1, r0
100619be:	4628      	mov	r0, r5
100619c0:	4622      	mov	r2, r4
100619c2:	f7f0 fb0c 	bl	10051fde <ACL_pkt_write_16b>
100619c6:	bdb0      	pop	{r4, r5, r7, pc}

100619c8 <GAT_att_db_init>:
100619c8:	b510      	push	{r4, lr}
100619ca:	4604      	mov	r4, r0
100619cc:	2108      	movs	r1, #8
100619ce:	f7fc f9f9 	bl	1005ddc4 <csmem_mem_0_assign>
100619d2:	4904      	ldr	r1, [pc, #16]	@ (100619e4 <__arm_cp.0_0>)
100619d4:	6809      	ldr	r1, [r1, #0]
100619d6:	2260      	movs	r2, #96	@ 0x60
100619d8:	2300      	movs	r3, #0
100619da:	528b      	strh	r3, [r1, r2]
100619dc:	6648      	str	r0, [r1, #100]	@ 0x64
100619de:	3160      	adds	r1, #96	@ 0x60
100619e0:	804c      	strh	r4, [r1, #2]
100619e2:	bd10      	pop	{r4, pc}

100619e4 <__arm_cp.0_0>:
100619e4:	20000ed8 	.word	0x20000ed8

100619e8 <GAT_att_db_insert>:
100619e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100619ea:	b085      	sub	sp, #20
100619ec:	4617      	mov	r7, r2
100619ee:	9004      	str	r0, [sp, #16]
100619f0:	4d1c      	ldr	r5, [pc, #112]	@ (10061a64 <__arm_cp.1_0>)
100619f2:	6828      	ldr	r0, [r5, #0]
100619f4:	2460      	movs	r4, #96	@ 0x60
100619f6:	5b06      	ldrh	r6, [r0, r4]
100619f8:	4602      	mov	r2, r0
100619fa:	3260      	adds	r2, #96	@ 0x60
100619fc:	8852      	ldrh	r2, [r2, #2]
100619fe:	4296      	cmp	r6, r2
10061a00:	d217      	bcs.n	10061a32 <GAT_att_db_insert+0x4a>
10061a02:	9402      	str	r4, [sp, #8]
10061a04:	9303      	str	r3, [sp, #12]
10061a06:	2900      	cmp	r1, #0
10061a08:	d017      	beq.n	10061a3a <GAT_att_db_insert+0x52>
10061a0a:	9701      	str	r7, [sp, #4]
10061a0c:	4608      	mov	r0, r1
10061a0e:	f000 f82b 	bl	10061a68 <GAT_att_db_get_att_idx>
10061a12:	1c44      	adds	r4, r0, #1
10061a14:	6828      	ldr	r0, [r5, #0]
10061a16:	b2b1      	uxth	r1, r6
10061a18:	b2a2      	uxth	r2, r4
10061a1a:	4291      	cmp	r1, r2
10061a1c:	d30b      	bcc.n	10061a36 <GAT_att_db_insert+0x4e>
10061a1e:	00c9      	lsls	r1, r1, #3
10061a20:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10061a22:	1840      	adds	r0, r0, r1
10061a24:	4601      	mov	r1, r0
10061a26:	3908      	subs	r1, #8
10061a28:	2208      	movs	r2, #8
10061a2a:	f7ed ff0b 	bl	1004f844 <BLEPLAT_MemCpy>
10061a2e:	1e76      	subs	r6, r6, #1
10061a30:	e7f0      	b.n	10061a14 <GAT_att_db_insert+0x2c>
10061a32:	2700      	movs	r7, #0
10061a34:	e012      	b.n	10061a5c <GAT_att_db_insert+0x74>
10061a36:	9f01      	ldr	r7, [sp, #4]
10061a38:	e000      	b.n	10061a3c <GAT_att_db_insert+0x54>
10061a3a:	4634      	mov	r4, r6
10061a3c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10061a3e:	b2a1      	uxth	r1, r4
10061a40:	00c9      	lsls	r1, r1, #3
10061a42:	9a04      	ldr	r2, [sp, #16]
10061a44:	5442      	strb	r2, [r0, r1]
10061a46:	1840      	adds	r0, r0, r1
10061a48:	9a03      	ldr	r2, [sp, #12]
10061a4a:	6042      	str	r2, [r0, #4]
10061a4c:	6828      	ldr	r0, [r5, #0]
10061a4e:	9b02      	ldr	r3, [sp, #8]
10061a50:	5ac2      	ldrh	r2, [r0, r3]
10061a52:	1c52      	adds	r2, r2, #1
10061a54:	52c2      	strh	r2, [r0, r3]
10061a56:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10061a58:	1840      	adds	r0, r0, r1
10061a5a:	8047      	strh	r7, [r0, #2]
10061a5c:	4638      	mov	r0, r7
10061a5e:	b005      	add	sp, #20
10061a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061a62:	46c0      	nop			@ (mov r8, r8)

10061a64 <__arm_cp.1_0>:
10061a64:	20000ed8 	.word	0x20000ed8

10061a68 <GAT_att_db_get_att_idx>:
10061a68:	4908      	ldr	r1, [pc, #32]	@ (10061a8c <__arm_cp.2_0>)
10061a6a:	680a      	ldr	r2, [r1, #0]
10061a6c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10061a6e:	2362      	movs	r3, #98	@ 0x62
10061a70:	5ad2      	ldrh	r2, [r2, r3]
10061a72:	00d2      	lsls	r2, r2, #3
10061a74:	1852      	adds	r2, r2, r1
10061a76:	3a08      	subs	r2, #8
10061a78:	4282      	cmp	r2, r0
10061a7a:	d302      	bcc.n	10061a82 <GAT_att_db_get_att_idx+0x1a>
10061a7c:	1a40      	subs	r0, r0, r1
10061a7e:	08c0      	lsrs	r0, r0, #3
10061a80:	e001      	b.n	10061a86 <GAT_att_db_get_att_idx+0x1e>
10061a82:	2000      	movs	r0, #0
10061a84:	43c0      	mvns	r0, r0
10061a86:	b280      	uxth	r0, r0
10061a88:	4770      	bx	lr
10061a8a:	46c0      	nop			@ (mov r8, r8)

10061a8c <__arm_cp.2_0>:
10061a8c:	20000ed8 	.word	0x20000ed8

10061a90 <GAT_att_db_find_by_handle>:
10061a90:	b580      	push	{r7, lr}
10061a92:	f000 f80f 	bl	10061ab4 <GAT_att_db_find_attr_idx_with_handle>
10061a96:	4905      	ldr	r1, [pc, #20]	@ (10061aac <__arm_cp.3_0>)
10061a98:	4288      	cmp	r0, r1
10061a9a:	d005      	beq.n	10061aa8 <GAT_att_db_find_by_handle+0x18>
10061a9c:	00c0      	lsls	r0, r0, #3
10061a9e:	4904      	ldr	r1, [pc, #16]	@ (10061ab0 <__arm_cp.3_1>)
10061aa0:	6809      	ldr	r1, [r1, #0]
10061aa2:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10061aa4:	1808      	adds	r0, r1, r0
10061aa6:	bd80      	pop	{r7, pc}
10061aa8:	2000      	movs	r0, #0
10061aaa:	bd80      	pop	{r7, pc}

10061aac <__arm_cp.3_0>:
10061aac:	0000ffff 	.word	0x0000ffff

10061ab0 <__arm_cp.3_1>:
10061ab0:	20000ed8 	.word	0x20000ed8

10061ab4 <GAT_att_db_find_attr_idx_with_handle>:
10061ab4:	b510      	push	{r4, lr}
10061ab6:	4604      	mov	r4, r0
10061ab8:	f000 f824 	bl	10061b04 <GAT_att_db_find_attr_idx_from_handle>
10061abc:	4906      	ldr	r1, [pc, #24]	@ (10061ad8 <__arm_cp.4_0>)
10061abe:	4288      	cmp	r0, r1
10061ac0:	d007      	beq.n	10061ad2 <GAT_att_db_find_attr_idx_with_handle+0x1e>
10061ac2:	00c2      	lsls	r2, r0, #3
10061ac4:	4b05      	ldr	r3, [pc, #20]	@ (10061adc <__arm_cp.4_1>)
10061ac6:	681b      	ldr	r3, [r3, #0]
10061ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10061aca:	189a      	adds	r2, r3, r2
10061acc:	8852      	ldrh	r2, [r2, #2]
10061ace:	42a2      	cmp	r2, r4
10061ad0:	d000      	beq.n	10061ad4 <GAT_att_db_find_attr_idx_with_handle+0x20>
10061ad2:	4608      	mov	r0, r1
10061ad4:	bd10      	pop	{r4, pc}
10061ad6:	46c0      	nop			@ (mov r8, r8)

10061ad8 <__arm_cp.4_0>:
10061ad8:	0000ffff 	.word	0x0000ffff

10061adc <__arm_cp.4_1>:
10061adc:	20000ed8 	.word	0x20000ed8

10061ae0 <GAT_att_db_find_from_handle>:
10061ae0:	b580      	push	{r7, lr}
10061ae2:	f000 f80f 	bl	10061b04 <GAT_att_db_find_attr_idx_from_handle>
10061ae6:	4905      	ldr	r1, [pc, #20]	@ (10061afc <__arm_cp.5_0>)
10061ae8:	4288      	cmp	r0, r1
10061aea:	d005      	beq.n	10061af8 <GAT_att_db_find_from_handle+0x18>
10061aec:	00c0      	lsls	r0, r0, #3
10061aee:	4904      	ldr	r1, [pc, #16]	@ (10061b00 <__arm_cp.5_1>)
10061af0:	6809      	ldr	r1, [r1, #0]
10061af2:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10061af4:	1808      	adds	r0, r1, r0
10061af6:	bd80      	pop	{r7, pc}
10061af8:	2000      	movs	r0, #0
10061afa:	bd80      	pop	{r7, pc}

10061afc <__arm_cp.5_0>:
10061afc:	0000ffff 	.word	0x0000ffff

10061b00 <__arm_cp.5_1>:
10061b00:	20000ed8 	.word	0x20000ed8

10061b04 <GAT_att_db_find_attr_idx_from_handle>:
10061b04:	b570      	push	{r4, r5, r6, lr}
10061b06:	4909      	ldr	r1, [pc, #36]	@ (10061b2c <__arm_cp.6_0>)
10061b08:	680a      	ldr	r2, [r1, #0]
10061b0a:	2160      	movs	r1, #96	@ 0x60
10061b0c:	5a53      	ldrh	r3, [r2, r1]
10061b0e:	2100      	movs	r1, #0
10061b10:	2502      	movs	r5, #2
10061b12:	4c07      	ldr	r4, [pc, #28]	@ (10061b30 <__arm_cp.6_1>)
10061b14:	428b      	cmp	r3, r1
10061b16:	d006      	beq.n	10061b26 <GAT_att_db_find_attr_idx_from_handle+0x22>
10061b18:	6e56      	ldr	r6, [r2, #100]	@ 0x64
10061b1a:	5b76      	ldrh	r6, [r6, r5]
10061b1c:	4286      	cmp	r6, r0
10061b1e:	d203      	bcs.n	10061b28 <GAT_att_db_find_attr_idx_from_handle+0x24>
10061b20:	3508      	adds	r5, #8
10061b22:	1c49      	adds	r1, r1, #1
10061b24:	e7f6      	b.n	10061b14 <GAT_att_db_find_attr_idx_from_handle+0x10>
10061b26:	4621      	mov	r1, r4
10061b28:	b288      	uxth	r0, r1
10061b2a:	bd70      	pop	{r4, r5, r6, pc}

10061b2c <__arm_cp.6_0>:
10061b2c:	20000ed8 	.word	0x20000ed8

10061b30 <__arm_cp.6_1>:
10061b30:	0000ffff 	.word	0x0000ffff

10061b34 <GAT_att_db_find_by_def>:
10061b34:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061b36:	9302      	str	r3, [sp, #8]
10061b38:	4615      	mov	r5, r2
10061b3a:	2200      	movs	r2, #0
10061b3c:	4288      	cmp	r0, r1
10061b3e:	d823      	bhi.n	10061b88 <GAT_att_db_find_by_def+0x54>
10061b40:	460c      	mov	r4, r1
10061b42:	4916      	ldr	r1, [pc, #88]	@ (10061b9c <__arm_cp.8_0>)
10061b44:	680f      	ldr	r7, [r1, #0]
10061b46:	2160      	movs	r1, #96	@ 0x60
10061b48:	5a79      	ldrh	r1, [r7, r1]
10061b4a:	2900      	cmp	r1, #0
10061b4c:	d01c      	beq.n	10061b88 <GAT_att_db_find_by_def+0x54>
10061b4e:	9200      	str	r2, [sp, #0]
10061b50:	9101      	str	r1, [sp, #4]
10061b52:	f7ff ffd7 	bl	10061b04 <GAT_att_db_find_attr_idx_from_handle>
10061b56:	4606      	mov	r6, r0
10061b58:	4620      	mov	r0, r4
10061b5a:	f7ff ffd3 	bl	10061b04 <GAT_att_db_find_attr_idx_from_handle>
10061b5e:	9901      	ldr	r1, [sp, #4]
10061b60:	1e49      	subs	r1, r1, #1
10061b62:	4281      	cmp	r1, r0
10061b64:	d300      	bcc.n	10061b68 <GAT_att_db_find_by_def+0x34>
10061b66:	4601      	mov	r1, r0
10061b68:	b289      	uxth	r1, r1
10061b6a:	b2b2      	uxth	r2, r6
10061b6c:	428a      	cmp	r2, r1
10061b6e:	d80d      	bhi.n	10061b8c <GAT_att_db_find_by_def+0x58>
10061b70:	6e78      	ldr	r0, [r7, #100]	@ 0x64
10061b72:	00d3      	lsls	r3, r2, #3
10061b74:	5cc4      	ldrb	r4, [r0, r3]
10061b76:	42ac      	cmp	r4, r5
10061b78:	d104      	bne.n	10061b84 <GAT_att_db_find_by_def+0x50>
10061b7a:	18c0      	adds	r0, r0, r3
10061b7c:	6843      	ldr	r3, [r0, #4]
10061b7e:	9c02      	ldr	r4, [sp, #8]
10061b80:	42a3      	cmp	r3, r4
10061b82:	d005      	beq.n	10061b90 <GAT_att_db_find_by_def+0x5c>
10061b84:	1c76      	adds	r6, r6, #1
10061b86:	e7f0      	b.n	10061b6a <GAT_att_db_find_by_def+0x36>
10061b88:	4610      	mov	r0, r2
10061b8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061b8c:	9800      	ldr	r0, [sp, #0]
10061b8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061b90:	4903      	ldr	r1, [pc, #12]	@ (10061ba0 <__arm_cp.8_1>)
10061b92:	428a      	cmp	r2, r1
10061b94:	d100      	bne.n	10061b98 <GAT_att_db_find_by_def+0x64>
10061b96:	2000      	movs	r0, #0
10061b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061b9a:	46c0      	nop			@ (mov r8, r8)

10061b9c <__arm_cp.8_0>:
10061b9c:	20000ed8 	.word	0x20000ed8

10061ba0 <__arm_cp.8_1>:
10061ba0:	0000ffff 	.word	0x0000ffff

10061ba4 <GAT_att_db_get_next>:
10061ba4:	b580      	push	{r7, lr}
10061ba6:	f7ff ff5f 	bl	10061a68 <GAT_att_db_get_att_idx>
10061baa:	4907      	ldr	r1, [pc, #28]	@ (10061bc8 <__arm_cp.10_0>)
10061bac:	6809      	ldr	r1, [r1, #0]
10061bae:	2260      	movs	r2, #96	@ 0x60
10061bb0:	5a8a      	ldrh	r2, [r1, r2]
10061bb2:	1c40      	adds	r0, r0, #1
10061bb4:	b280      	uxth	r0, r0
10061bb6:	4290      	cmp	r0, r2
10061bb8:	d203      	bcs.n	10061bc2 <GAT_att_db_get_next+0x1e>
10061bba:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10061bbc:	00c0      	lsls	r0, r0, #3
10061bbe:	1808      	adds	r0, r1, r0
10061bc0:	bd80      	pop	{r7, pc}
10061bc2:	2000      	movs	r0, #0
10061bc4:	bd80      	pop	{r7, pc}
10061bc6:	46c0      	nop			@ (mov r8, r8)

10061bc8 <__arm_cp.10_0>:
10061bc8:	20000ed8 	.word	0x20000ed8

10061bcc <GAT_att_db_get_last_group_handle>:
10061bcc:	b580      	push	{r7, lr}
10061bce:	f000 f803 	bl	10061bd8 <GAT_att_db_get_last_group_attribute>
10061bd2:	8840      	ldrh	r0, [r0, #2]
10061bd4:	bd80      	pop	{r7, pc}
	...

10061bd8 <GAT_att_db_get_last_group_attribute>:
10061bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061bda:	7804      	ldrb	r4, [r0, #0]
10061bdc:	2502      	movs	r5, #2
10061bde:	4621      	mov	r1, r4
10061be0:	4329      	orrs	r1, r5
10061be2:	2902      	cmp	r1, #2
10061be4:	d11e      	bne.n	10061c24 <GAT_att_db_get_last_group_attribute+0x4c>
10061be6:	f7ff ff3f 	bl	10061a68 <GAT_att_db_get_att_idx>
10061bea:	490f      	ldr	r1, [pc, #60]	@ (10061c28 <__arm_cp.12_0>)
10061bec:	6809      	ldr	r1, [r1, #0]
10061bee:	2260      	movs	r2, #96	@ 0x60
10061bf0:	5a8b      	ldrh	r3, [r1, r2]
10061bf2:	1c40      	adds	r0, r0, #1
10061bf4:	b282      	uxth	r2, r0
10061bf6:	429a      	cmp	r2, r3
10061bf8:	d210      	bcs.n	10061c1c <GAT_att_db_get_last_group_attribute+0x44>
10061bfa:	2c00      	cmp	r4, #0
10061bfc:	d008      	beq.n	10061c10 <GAT_att_db_get_last_group_attribute+0x38>
10061bfe:	2c02      	cmp	r4, #2
10061c00:	d1f7      	bne.n	10061bf2 <GAT_att_db_get_last_group_attribute+0x1a>
10061c02:	00d7      	lsls	r7, r2, #3
10061c04:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10061c06:	5df7      	ldrb	r7, [r6, r7]
10061c08:	432f      	orrs	r7, r5
10061c0a:	2f02      	cmp	r7, #2
10061c0c:	d1f1      	bne.n	10061bf2 <GAT_att_db_get_last_group_attribute+0x1a>
10061c0e:	e006      	b.n	10061c1e <GAT_att_db_get_last_group_attribute+0x46>
10061c10:	00d7      	lsls	r7, r2, #3
10061c12:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10061c14:	5df7      	ldrb	r7, [r6, r7]
10061c16:	2f00      	cmp	r7, #0
10061c18:	d1eb      	bne.n	10061bf2 <GAT_att_db_get_last_group_attribute+0x1a>
10061c1a:	e000      	b.n	10061c1e <GAT_att_db_get_last_group_attribute+0x46>
10061c1c:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10061c1e:	00d0      	lsls	r0, r2, #3
10061c20:	1980      	adds	r0, r0, r6
10061c22:	3808      	subs	r0, #8
10061c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061c26:	46c0      	nop			@ (mov r8, r8)

10061c28 <__arm_cp.12_0>:
10061c28:	20000ed8 	.word	0x20000ed8

10061c2c <GAT_att_db_get_last_handle>:
10061c2c:	4806      	ldr	r0, [pc, #24]	@ (10061c48 <__arm_cp.14_0>)
10061c2e:	6800      	ldr	r0, [r0, #0]
10061c30:	2160      	movs	r1, #96	@ 0x60
10061c32:	5a41      	ldrh	r1, [r0, r1]
10061c34:	2900      	cmp	r1, #0
10061c36:	d005      	beq.n	10061c44 <GAT_att_db_get_last_handle+0x18>
10061c38:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10061c3a:	00c9      	lsls	r1, r1, #3
10061c3c:	1808      	adds	r0, r1, r0
10061c3e:	1f80      	subs	r0, r0, #6
10061c40:	8800      	ldrh	r0, [r0, #0]
10061c42:	4770      	bx	lr
10061c44:	2000      	movs	r0, #0
10061c46:	4770      	bx	lr

10061c48 <__arm_cp.14_0>:
10061c48:	20000ed8 	.word	0x20000ed8

10061c4c <GAT_att_db_rm_att_range>:
10061c4c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061c4e:	460d      	mov	r5, r1
10061c50:	4604      	mov	r4, r0
10061c52:	f7ff ffeb 	bl	10061c2c <GAT_att_db_get_last_handle>
10061c56:	2800      	cmp	r0, #0
10061c58:	d034      	beq.n	10061cc4 <GAT_att_db_rm_att_range+0x78>
10061c5a:	42ac      	cmp	r4, r5
10061c5c:	d832      	bhi.n	10061cc4 <GAT_att_db_rm_att_range+0x78>
10061c5e:	4606      	mov	r6, r0
10061c60:	42a0      	cmp	r0, r4
10061c62:	d32f      	bcc.n	10061cc4 <GAT_att_db_rm_att_range+0x78>
10061c64:	4620      	mov	r0, r4
10061c66:	f7ff ff25 	bl	10061ab4 <GAT_att_db_find_attr_idx_with_handle>
10061c6a:	4604      	mov	r4, r0
10061c6c:	4816      	ldr	r0, [pc, #88]	@ (10061cc8 <__arm_cp.16_0>)
10061c6e:	4284      	cmp	r4, r0
10061c70:	d028      	beq.n	10061cc4 <GAT_att_db_rm_att_range+0x78>
10061c72:	42ae      	cmp	r6, r5
10061c74:	d300      	bcc.n	10061c78 <GAT_att_db_rm_att_range+0x2c>
10061c76:	462e      	mov	r6, r5
10061c78:	4630      	mov	r0, r6
10061c7a:	f7ff ff1b 	bl	10061ab4 <GAT_att_db_find_attr_idx_with_handle>
10061c7e:	4913      	ldr	r1, [pc, #76]	@ (10061ccc <__arm_cp.16_1>)
10061c80:	680f      	ldr	r7, [r1, #0]
10061c82:	2660      	movs	r6, #96	@ 0x60
10061c84:	5bb9      	ldrh	r1, [r7, r6]
10061c86:	1e4a      	subs	r2, r1, #1
10061c88:	4282      	cmp	r2, r0
10061c8a:	d917      	bls.n	10061cbc <GAT_att_db_rm_att_range+0x70>
10061c8c:	9001      	str	r0, [sp, #4]
10061c8e:	4605      	mov	r5, r0
10061c90:	9402      	str	r4, [sp, #8]
10061c92:	b28b      	uxth	r3, r1
10061c94:	1c6d      	adds	r5, r5, #1
10061c96:	b2aa      	uxth	r2, r5
10061c98:	429a      	cmp	r2, r3
10061c9a:	d20d      	bcs.n	10061cb8 <GAT_att_db_rm_att_range+0x6c>
10061c9c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10061c9e:	b2a0      	uxth	r0, r4
10061ca0:	00c0      	lsls	r0, r0, #3
10061ca2:	1808      	adds	r0, r1, r0
10061ca4:	00d2      	lsls	r2, r2, #3
10061ca6:	1889      	adds	r1, r1, r2
10061ca8:	2208      	movs	r2, #8
10061caa:	f7ed fdcb 	bl	1004f844 <BLEPLAT_MemCpy>
10061cae:	4807      	ldr	r0, [pc, #28]	@ (10061ccc <__arm_cp.16_1>)
10061cb0:	6807      	ldr	r7, [r0, #0]
10061cb2:	5bb9      	ldrh	r1, [r7, r6]
10061cb4:	1c64      	adds	r4, r4, #1
10061cb6:	e7ec      	b.n	10061c92 <GAT_att_db_rm_att_range+0x46>
10061cb8:	9c02      	ldr	r4, [sp, #8]
10061cba:	9801      	ldr	r0, [sp, #4]
10061cbc:	43c2      	mvns	r2, r0
10061cbe:	18a2      	adds	r2, r4, r2
10061cc0:	1851      	adds	r1, r2, r1
10061cc2:	53b9      	strh	r1, [r7, r6]
10061cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061cc6:	46c0      	nop			@ (mov r8, r8)

10061cc8 <__arm_cp.16_0>:
10061cc8:	0000ffff 	.word	0x0000ffff

10061ccc <__arm_cp.16_1>:
10061ccc:	20000ed8 	.word	0x20000ed8

10061cd0 <GAT_att_db_find_last_attr_of_type>:
10061cd0:	b510      	push	{r4, lr}
10061cd2:	4909      	ldr	r1, [pc, #36]	@ (10061cf8 <__arm_cp.17_0>)
10061cd4:	680a      	ldr	r2, [r1, #0]
10061cd6:	2160      	movs	r1, #96	@ 0x60
10061cd8:	5a53      	ldrh	r3, [r2, r1]
10061cda:	0419      	lsls	r1, r3, #16
10061cdc:	d009      	beq.n	10061cf2 <GAT_att_db_find_last_attr_of_type+0x22>
10061cde:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10061ce0:	b29c      	uxth	r4, r3
10061ce2:	00e4      	lsls	r4, r4, #3
10061ce4:	1861      	adds	r1, r4, r1
10061ce6:	3908      	subs	r1, #8
10061ce8:	780c      	ldrb	r4, [r1, #0]
10061cea:	1e5b      	subs	r3, r3, #1
10061cec:	4284      	cmp	r4, r0
10061cee:	d1f4      	bne.n	10061cda <GAT_att_db_find_last_attr_of_type+0xa>
10061cf0:	e000      	b.n	10061cf4 <GAT_att_db_find_last_attr_of_type+0x24>
10061cf2:	2100      	movs	r1, #0
10061cf4:	4608      	mov	r0, r1
10061cf6:	bd10      	pop	{r4, pc}

10061cf8 <__arm_cp.17_0>:
10061cf8:	20000ed8 	.word	0x20000ed8

10061cfc <GAT_att_db_reverse_find_attr_of_type>:
10061cfc:	b510      	push	{r4, lr}
10061cfe:	4604      	mov	r4, r0
10061d00:	4608      	mov	r0, r1
10061d02:	f7ff feff 	bl	10061b04 <GAT_att_db_find_attr_idx_from_handle>
10061d06:	4908      	ldr	r1, [pc, #32]	@ (10061d28 <__arm_cp.18_0>)
10061d08:	6809      	ldr	r1, [r1, #0]
10061d0a:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10061d0c:	b282      	uxth	r2, r0
10061d0e:	00d2      	lsls	r2, r2, #3
10061d10:	5c8b      	ldrb	r3, [r1, r2]
10061d12:	42a3      	cmp	r3, r4
10061d14:	d005      	beq.n	10061d22 <GAT_att_db_reverse_find_attr_of_type+0x26>
10061d16:	1e42      	subs	r2, r0, #1
10061d18:	0400      	lsls	r0, r0, #16
10061d1a:	4610      	mov	r0, r2
10061d1c:	d1f6      	bne.n	10061d0c <GAT_att_db_reverse_find_attr_of_type+0x10>
10061d1e:	2000      	movs	r0, #0
10061d20:	bd10      	pop	{r4, pc}
10061d22:	1888      	adds	r0, r1, r2
10061d24:	bd10      	pop	{r4, pc}
10061d26:	46c0      	nop			@ (mov r8, r8)

10061d28 <__arm_cp.18_0>:
10061d28:	20000ed8 	.word	0x20000ed8

10061d2c <GAT_clt_init>:
10061d2c:	b570      	push	{r4, r5, r6, lr}
10061d2e:	4c11      	ldr	r4, [pc, #68]	@ (10061d74 <__arm_cp.0_0>)
10061d30:	7aa0      	ldrb	r0, [r4, #10]
10061d32:	2124      	movs	r1, #36	@ 0x24
10061d34:	f7fc f846 	bl	1005ddc4 <csmem_mem_0_assign>
10061d38:	490f      	ldr	r1, [pc, #60]	@ (10061d78 <__arm_cp.0_1>)
10061d3a:	680b      	ldr	r3, [r1, #0]
10061d3c:	2200      	movs	r2, #0
10061d3e:	461d      	mov	r5, r3
10061d40:	3550      	adds	r5, #80	@ 0x50
10061d42:	461e      	mov	r6, r3
10061d44:	3648      	adds	r6, #72	@ 0x48
10061d46:	649a      	str	r2, [r3, #72]	@ 0x48
10061d48:	64de      	str	r6, [r3, #76]	@ 0x4c
10061d4a:	651a      	str	r2, [r3, #80]	@ 0x50
10061d4c:	655d      	str	r5, [r3, #84]	@ 0x54
10061d4e:	7aa4      	ldrb	r4, [r4, #10]
10061d50:	2c00      	cmp	r4, #0
10061d52:	d00c      	beq.n	10061d6e <GAT_clt_init+0x42>
10061d54:	6202      	str	r2, [r0, #32]
10061d56:	680b      	ldr	r3, [r1, #0]
10061d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10061d5a:	6018      	str	r0, [r3, #0]
10061d5c:	2301      	movs	r3, #1
10061d5e:	7003      	strb	r3, [r0, #0]
10061d60:	4605      	mov	r5, r0
10061d62:	3520      	adds	r5, #32
10061d64:	680b      	ldr	r3, [r1, #0]
10061d66:	655d      	str	r5, [r3, #84]	@ 0x54
10061d68:	3024      	adds	r0, #36	@ 0x24
10061d6a:	1e64      	subs	r4, r4, #1
10061d6c:	e7f0      	b.n	10061d50 <GAT_clt_init+0x24>
10061d6e:	659a      	str	r2, [r3, #88]	@ 0x58
10061d70:	bd70      	pop	{r4, r5, r6, pc}
10061d72:	46c0      	nop			@ (mov r8, r8)

10061d74 <__arm_cp.0_0>:
10061d74:	20000f34 	.word	0x20000f34

10061d78 <__arm_cp.0_1>:
10061d78:	20000ed8 	.word	0x20000ed8

10061d7c <GAT_clt_connection>:
10061d7c:	4770      	bx	lr
	...

10061d80 <GAT_clt_bearer_close>:
10061d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061d82:	460d      	mov	r5, r1
10061d84:	4604      	mov	r4, r0
10061d86:	4e19      	ldr	r6, [pc, #100]	@ (10061dec <__arm_cp.2_0>)
10061d88:	6837      	ldr	r7, [r6, #0]
10061d8a:	3748      	adds	r7, #72	@ 0x48
10061d8c:	683f      	ldr	r7, [r7, #0]
10061d8e:	2f00      	cmp	r7, #0
10061d90:	d010      	beq.n	10061db4 <GAT_clt_bearer_close+0x34>
10061d92:	8878      	ldrh	r0, [r7, #2]
10061d94:	42a0      	cmp	r0, r4
10061d96:	d10b      	bne.n	10061db0 <GAT_clt_bearer_close+0x30>
10061d98:	88b8      	ldrh	r0, [r7, #4]
10061d9a:	42a8      	cmp	r0, r5
10061d9c:	d108      	bne.n	10061db0 <GAT_clt_bearer_close+0x30>
10061d9e:	7838      	ldrb	r0, [r7, #0]
10061da0:	2118      	movs	r1, #24
10061da2:	4301      	orrs	r1, r0
10061da4:	7039      	strb	r1, [r7, #0]
10061da6:	200c      	movs	r0, #12
10061da8:	f7fd fde2 	bl	1005f970 <tsk_notify_idx>
10061dac:	f7ec ff89 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10061db0:	3720      	adds	r7, #32
10061db2:	e7eb      	b.n	10061d8c <GAT_clt_bearer_close+0xc>
10061db4:	2d04      	cmp	r5, #4
10061db6:	d117      	bne.n	10061de8 <GAT_clt_bearer_close+0x68>
10061db8:	6830      	ldr	r0, [r6, #0]
10061dba:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10061dbc:	460b      	mov	r3, r1
10061dbe:	2b00      	cmp	r3, #0
10061dc0:	d00b      	beq.n	10061dda <GAT_clt_bearer_close+0x5a>
10061dc2:	461a      	mov	r2, r3
10061dc4:	689d      	ldr	r5, [r3, #8]
10061dc6:	2300      	movs	r3, #0
10061dc8:	2d00      	cmp	r5, #0
10061dca:	d0f8      	beq.n	10061dbe <GAT_clt_bearer_close+0x3e>
10061dcc:	88ab      	ldrh	r3, [r5, #4]
10061dce:	42a3      	cmp	r3, r4
10061dd0:	462b      	mov	r3, r5
10061dd2:	d1f4      	bne.n	10061dbe <GAT_clt_bearer_close+0x3e>
10061dd4:	68ab      	ldr	r3, [r5, #8]
10061dd6:	6093      	str	r3, [r2, #8]
10061dd8:	e7f1      	b.n	10061dbe <GAT_clt_bearer_close+0x3e>
10061dda:	2900      	cmp	r1, #0
10061ddc:	d004      	beq.n	10061de8 <GAT_clt_bearer_close+0x68>
10061dde:	888a      	ldrh	r2, [r1, #4]
10061de0:	42a2      	cmp	r2, r4
10061de2:	d101      	bne.n	10061de8 <GAT_clt_bearer_close+0x68>
10061de4:	6889      	ldr	r1, [r1, #8]
10061de6:	6581      	str	r1, [r0, #88]	@ 0x58
10061de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061dea:	46c0      	nop			@ (mov r8, r8)

10061dec <__arm_cp.2_0>:
10061dec:	20000ed8 	.word	0x20000ed8

10061df0 <GAT_clt_proc_exec_tsk>:
10061df0:	b580      	push	{r7, lr}
10061df2:	4802      	ldr	r0, [pc, #8]	@ (10061dfc <__arm_cp.3_0>)
10061df4:	6800      	ldr	r0, [r0, #0]
10061df6:	4780      	blx	r0
10061df8:	bd80      	pop	{r7, pc}
10061dfa:	46c0      	nop			@ (mov r8, r8)

10061dfc <__arm_cp.3_0>:
10061dfc:	2000129c 	.word	0x2000129c

10061e00 <GAT_clt_rcv>:
10061e00:	b5f0      	push	{r4, r5, r6, r7, lr}
10061e02:	b095      	sub	sp, #84	@ 0x54
10061e04:	4605      	mov	r5, r0
10061e06:	8804      	ldrh	r4, [r0, #0]
10061e08:	f7f4 fdcb 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10061e0c:	4601      	mov	r1, r0
10061e0e:	4620      	mov	r0, r4
10061e10:	f000 fa6e 	bl	100622f0 <GAT_clt_get_proc_per_channel>
10061e14:	2686      	movs	r6, #134	@ 0x86
10061e16:	2800      	cmp	r0, #0
10061e18:	d100      	bne.n	10061e1c <GAT_clt_rcv+0x1c>
10061e1a:	e208      	b.n	1006222e <GAT_clt_rcv+0x42e>
10061e1c:	4604      	mov	r4, r0
10061e1e:	882f      	ldrh	r7, [r5, #0]
10061e20:	4628      	mov	r0, r5
10061e22:	f7f4 fdbe 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10061e26:	4601      	mov	r1, r0
10061e28:	4638      	mov	r0, r7
10061e2a:	f7f1 ff2d 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10061e2e:	9008      	str	r0, [sp, #32]
10061e30:	7820      	ldrb	r0, [r4, #0]
10061e32:	21fb      	movs	r1, #251	@ 0xfb
10061e34:	4001      	ands	r1, r0
10061e36:	7021      	strb	r1, [r4, #0]
10061e38:	270c      	movs	r7, #12
10061e3a:	4638      	mov	r0, r7
10061e3c:	f7fd fd98 	bl	1005f970 <tsk_notify_idx>
10061e40:	f7ec ff3f 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10061e44:	4628      	mov	r0, r5
10061e46:	f000 fa65 	bl	10062314 <GAT_att_cmn_get_opcode>
10061e4a:	2801      	cmp	r0, #1
10061e4c:	d107      	bne.n	10061e5e <GAT_clt_rcv+0x5e>
10061e4e:	8860      	ldrh	r0, [r4, #2]
10061e50:	f7f1 f804 	bl	10052e5c <GAP_started_gatt_proc>
10061e54:	2800      	cmp	r0, #0
10061e56:	d060      	beq.n	10061f1a <GAT_clt_rcv+0x11a>
10061e58:	4620      	mov	r0, r4
10061e5a:	f000 fa60 	bl	1006231e <GAT_clt_stop_proc>
10061e5e:	7820      	ldrb	r0, [r4, #0]
10061e60:	2200      	movs	r2, #0
10061e62:	0701      	lsls	r1, r0, #28
10061e64:	d457      	bmi.n	10061f16 <GAT_clt_rcv+0x116>
10061e66:	79a3      	ldrb	r3, [r4, #6]
10061e68:	1e59      	subs	r1, r3, #1
10061e6a:	2911      	cmp	r1, #17
10061e6c:	d900      	bls.n	10061e70 <GAT_clt_rcv+0x70>
10061e6e:	e1de      	b.n	1006222e <GAT_clt_rcv+0x42e>
10061e70:	9207      	str	r2, [sp, #28]
10061e72:	0049      	lsls	r1, r1, #1
10061e74:	4479      	add	r1, pc
10061e76:	8889      	ldrh	r1, [r1, #4]
10061e78:	0049      	lsls	r1, r1, #1
10061e7a:	448f      	add	pc, r1
10061e7c:	010200c5 	.word	0x010200c5
10061e80:	0099010f 	.word	0x0099010f
10061e84:	011f0099 	.word	0x011f0099
10061e88:	01750164 	.word	0x01750164
10061e8c:	01b9017c 	.word	0x01b9017c
10061e90:	00a600a6 	.word	0x00a600a6
10061e94:	001100b8 	.word	0x001100b8
10061e98:	001100b0 	.word	0x001100b0
10061e9c:	00b00011 	.word	0x00b00011
10061ea0:	06c0      	lsls	r0, r0, #27
10061ea2:	d500      	bpl.n	10061ea6 <GAT_clt_rcv+0xa6>
10061ea4:	e0a7      	b.n	10061ff6 <GAT_clt_rcv+0x1f6>
10061ea6:	88a2      	ldrh	r2, [r4, #4]
10061ea8:	8861      	ldrh	r1, [r4, #2]
10061eaa:	200a      	movs	r0, #10
10061eac:	462b      	mov	r3, r5
10061eae:	f7fe ffbf 	bl	10060e30 <aci_att_clt_prepare_write_resp_event_push_noinline>
10061eb2:	2800      	cmp	r0, #0
10061eb4:	d000      	beq.n	10061eb8 <GAT_clt_rcv+0xb8>
10061eb6:	e1b4      	b.n	10062222 <GAT_clt_rcv+0x422>
10061eb8:	79a0      	ldrb	r0, [r4, #6]
10061eba:	2811      	cmp	r0, #17
10061ebc:	d100      	bne.n	10061ec0 <GAT_clt_rcv+0xc0>
10061ebe:	e1b2      	b.n	10062226 <GAT_clt_rcv+0x426>
10061ec0:	7a63      	ldrb	r3, [r4, #9]
10061ec2:	6921      	ldr	r1, [r4, #16]
10061ec4:	9108      	str	r1, [sp, #32]
10061ec6:	2810      	cmp	r0, #16
10061ec8:	d000      	beq.n	10061ecc <GAT_clt_rcv+0xcc>
10061eca:	e1d0      	b.n	1006226e <GAT_clt_rcv+0x46e>
10061ecc:	9306      	str	r3, [sp, #24]
10061ece:	89a8      	ldrh	r0, [r5, #12]
10061ed0:	1c40      	adds	r0, r0, #1
10061ed2:	b281      	uxth	r1, r0
10061ed4:	4628      	mov	r0, r5
10061ed6:	f7f0 f872 	bl	10051fbe <ACL_pkt_read_16b>
10061eda:	9005      	str	r0, [sp, #20]
10061edc:	89a8      	ldrh	r0, [r5, #12]
10061ede:	1cc0      	adds	r0, r0, #3
10061ee0:	b281      	uxth	r1, r0
10061ee2:	4628      	mov	r0, r5
10061ee4:	f7f0 f86b 	bl	10051fbe <ACL_pkt_read_16b>
10061ee8:	2600      	movs	r6, #0
10061eea:	89a2      	ldrh	r2, [r4, #12]
10061eec:	8869      	ldrh	r1, [r5, #2]
10061eee:	1f49      	subs	r1, r1, #5
10061ef0:	4291      	cmp	r1, r2
10061ef2:	9004      	str	r0, [sp, #16]
10061ef4:	d000      	beq.n	10061ef8 <GAT_clt_rcv+0xf8>
10061ef6:	e1cf      	b.n	10062298 <GAT_clt_rcv+0x498>
10061ef8:	4638      	mov	r0, r7
10061efa:	9906      	ldr	r1, [sp, #24]
10061efc:	4348      	muls	r0, r1
10061efe:	9a08      	ldr	r2, [sp, #32]
10061f00:	1810      	adds	r0, r2, r0
10061f02:	6880      	ldr	r0, [r0, #8]
10061f04:	8961      	ldrh	r1, [r4, #10]
10061f06:	1841      	adds	r1, r0, r1
10061f08:	4628      	mov	r0, r5
10061f0a:	4615      	mov	r5, r2
10061f0c:	f7ff fd20 	bl	10061950 <GAT_att_clt_prep_wr_cmp_data>
10061f10:	9b06      	ldr	r3, [sp, #24]
10061f12:	9003      	str	r0, [sp, #12]
10061f14:	e1c4      	b.n	100622a0 <GAT_clt_rcv+0x4a0>
10061f16:	4616      	mov	r6, r2
10061f18:	e189      	b.n	1006222e <GAT_clt_rcv+0x42e>
10061f1a:	a909      	add	r1, sp, #36	@ 0x24
10061f1c:	aa0f      	add	r2, sp, #60	@ 0x3c
10061f1e:	ab0e      	add	r3, sp, #56	@ 0x38
10061f20:	4628      	mov	r0, r5
10061f22:	f7ff fcb1 	bl	10061888 <GAT_att_clt_parse_error_resp>
10061f26:	2800      	cmp	r0, #0
10061f28:	d02b      	beq.n	10061f82 <GAT_clt_rcv+0x182>
10061f2a:	4628      	mov	r0, r5
10061f2c:	f7f0 f822 	bl	10051f74 <ACL_pkt_release>
10061f30:	a80e      	add	r0, sp, #56	@ 0x38
10061f32:	7800      	ldrb	r0, [r0, #0]
10061f34:	2812      	cmp	r0, #18
10061f36:	d108      	bne.n	10061f4a <GAT_clt_rcv+0x14a>
10061f38:	8860      	ldrh	r0, [r4, #2]
10061f3a:	2104      	movs	r1, #4
10061f3c:	f7f1 fea4 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
10061f40:	8881      	ldrh	r1, [r0, #4]
10061f42:	2201      	movs	r2, #1
10061f44:	0252      	lsls	r2, r2, #9
10061f46:	430a      	orrs	r2, r1
10061f48:	8082      	strh	r2, [r0, #4]
10061f4a:	79a0      	ldrb	r0, [r4, #6]
10061f4c:	2801      	cmp	r0, #1
10061f4e:	d104      	bne.n	10061f5a <GAT_clt_rcv+0x15a>
10061f50:	9b08      	ldr	r3, [sp, #32]
10061f52:	8899      	ldrh	r1, [r3, #4]
10061f54:	2204      	movs	r2, #4
10061f56:	4391      	bics	r1, r2
10061f58:	8099      	strh	r1, [r3, #4]
10061f5a:	a90e      	add	r1, sp, #56	@ 0x38
10061f5c:	7809      	ldrb	r1, [r1, #0]
10061f5e:	290a      	cmp	r1, #10
10061f60:	d008      	beq.n	10061f74 <GAT_clt_rcv+0x174>
10061f62:	2907      	cmp	r1, #7
10061f64:	d102      	bne.n	10061f6c <GAT_clt_rcv+0x16c>
10061f66:	280a      	cmp	r0, #10
10061f68:	d100      	bne.n	10061f6c <GAT_clt_rcv+0x16c>
10061f6a:	e775      	b.n	10061e58 <GAT_clt_rcv+0x58>
10061f6c:	7821      	ldrb	r1, [r4, #0]
10061f6e:	2210      	movs	r2, #16
10061f70:	430a      	orrs	r2, r1
10061f72:	7022      	strb	r2, [r4, #0]
10061f74:	280e      	cmp	r0, #14
10061f76:	d100      	bne.n	10061f7a <GAT_clt_rcv+0x17a>
10061f78:	e771      	b.n	10061e5e <GAT_clt_rcv+0x5e>
10061f7a:	2810      	cmp	r0, #16
10061f7c:	d100      	bne.n	10061f80 <GAT_clt_rcv+0x180>
10061f7e:	e76e      	b.n	10061e5e <GAT_clt_rcv+0x5e>
10061f80:	e76a      	b.n	10061e58 <GAT_clt_rcv+0x58>
10061f82:	a809      	add	r0, sp, #36	@ 0x24
10061f84:	7800      	ldrb	r0, [r0, #0]
10061f86:	9007      	str	r0, [sp, #28]
10061f88:	88a3      	ldrh	r3, [r4, #4]
10061f8a:	8862      	ldrh	r2, [r4, #2]
10061f8c:	a80f      	add	r0, sp, #60	@ 0x3c
10061f8e:	8800      	ldrh	r0, [r0, #0]
10061f90:	4621      	mov	r1, r4
10061f92:	ac0e      	add	r4, sp, #56	@ 0x38
10061f94:	7824      	ldrb	r4, [r4, #0]
10061f96:	9000      	str	r0, [sp, #0]
10061f98:	9401      	str	r4, [sp, #4]
10061f9a:	460c      	mov	r4, r1
10061f9c:	2002      	movs	r0, #2
10061f9e:	4611      	mov	r1, r2
10061fa0:	461a      	mov	r2, r3
10061fa2:	9b07      	ldr	r3, [sp, #28]
10061fa4:	f7fe fc10 	bl	100607c8 <aci_gatt_clt_error_resp_event_push_noinline>
10061fa8:	2800      	cmp	r0, #0
10061faa:	d0be      	beq.n	10061f2a <GAT_clt_rcv+0x12a>
10061fac:	4606      	mov	r6, r0
10061fae:	e13e      	b.n	1006222e <GAT_clt_rcv+0x42e>
10061fb0:	88a2      	ldrh	r2, [r4, #4]
10061fb2:	8861      	ldrh	r1, [r4, #2]
10061fb4:	200a      	movs	r0, #10
10061fb6:	462b      	mov	r3, r5
10061fb8:	f7fe fe40 	bl	10060c3c <aci_att_clt_read_by_type_resp_event_push_noinline>
10061fbc:	2800      	cmp	r0, #0
10061fbe:	d000      	beq.n	10061fc2 <GAT_clt_rcv+0x1c2>
10061fc0:	e12f      	b.n	10062222 <GAT_clt_rcv+0x422>
10061fc2:	4628      	mov	r0, r5
10061fc4:	f7ff fc7a 	bl	100618bc <GAT_att_clt_read_type_get_last_attr_h>
10061fc8:	e0c8      	b.n	1006215c <GAT_clt_rcv+0x35c>
10061fca:	88a2      	ldrh	r2, [r4, #4]
10061fcc:	8861      	ldrh	r1, [r4, #2]
10061fce:	200a      	movs	r0, #10
10061fd0:	2b0b      	cmp	r3, #11
10061fd2:	d000      	beq.n	10061fd6 <GAT_clt_rcv+0x1d6>
10061fd4:	e120      	b.n	10062218 <GAT_clt_rcv+0x418>
10061fd6:	462b      	mov	r3, r5
10061fd8:	f7fe fec6 	bl	10060d68 <aci_att_clt_read_multiple_resp_event_push_noinline>
10061fdc:	e11f      	b.n	1006221e <GAT_clt_rcv+0x41e>
10061fde:	88a2      	ldrh	r2, [r4, #4]
10061fe0:	8861      	ldrh	r1, [r4, #2]
10061fe2:	2002      	movs	r0, #2
10061fe4:	f7fe ff56 	bl	10060e94 <aci_att_clt_exec_write_resp_event_push_noinline>
10061fe8:	2800      	cmp	r0, #0
10061fea:	d000      	beq.n	10061fee <GAT_clt_rcv+0x1ee>
10061fec:	e119      	b.n	10062222 <GAT_clt_rcv+0x422>
10061fee:	4628      	mov	r0, r5
10061ff0:	f7ef ffc0 	bl	10051f74 <ACL_pkt_release>
10061ff4:	e117      	b.n	10062226 <GAT_clt_rcv+0x426>
10061ff6:	8960      	ldrh	r0, [r4, #10]
10061ff8:	2800      	cmp	r0, #0
10061ffa:	d100      	bne.n	10061ffe <GAT_clt_rcv+0x1fe>
10061ffc:	e113      	b.n	10062226 <GAT_clt_rcv+0x426>
10061ffe:	2600      	movs	r6, #0
10062000:	7226      	strb	r6, [r4, #8]
10062002:	200f      	movs	r0, #15
10062004:	71a0      	strb	r0, [r4, #6]
10062006:	e112      	b.n	1006222e <GAT_clt_rcv+0x42e>
10062008:	89a8      	ldrh	r0, [r5, #12]
1006200a:	1c40      	adds	r0, r0, #1
1006200c:	b281      	uxth	r1, r0
1006200e:	4628      	mov	r0, r5
10062010:	f7ef ffd5 	bl	10051fbe <ACL_pkt_read_16b>
10062014:	4606      	mov	r6, r0
10062016:	2817      	cmp	r0, #23
10062018:	d800      	bhi.n	1006201c <GAT_clt_rcv+0x21c>
1006201a:	2617      	movs	r6, #23
1006201c:	48b3      	ldr	r0, [pc, #716]	@ (100622ec <__arm_cp.4_3>)
1006201e:	8a00      	ldrh	r0, [r0, #16]
10062020:	4286      	cmp	r6, r0
10062022:	9f08      	ldr	r7, [sp, #32]
10062024:	d300      	bcc.n	10062028 <GAT_clt_rcv+0x228>
10062026:	4606      	mov	r6, r0
10062028:	88b8      	ldrh	r0, [r7, #4]
1006202a:	0700      	lsls	r0, r0, #28
1006202c:	d514      	bpl.n	10062058 <GAT_clt_rcv+0x258>
1006202e:	88f8      	ldrh	r0, [r7, #6]
10062030:	42b0      	cmp	r0, r6
10062032:	d011      	beq.n	10062058 <GAT_clt_rcv+0x258>
10062034:	463b      	mov	r3, r7
10062036:	3308      	adds	r3, #8
10062038:	2042      	movs	r0, #66	@ 0x42
1006203a:	2103      	movs	r1, #3
1006203c:	2202      	movs	r2, #2
1006203e:	f7ff f88d 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
10062042:	2800      	cmp	r0, #0
10062044:	d000      	beq.n	10062048 <GAT_clt_rcv+0x248>
10062046:	e0ec      	b.n	10062222 <GAT_clt_rcv+0x422>
10062048:	7820      	ldrb	r0, [r4, #0]
1006204a:	2110      	movs	r1, #16
1006204c:	4301      	orrs	r1, r0
1006204e:	7021      	strb	r1, [r4, #0]
10062050:	88b8      	ldrh	r0, [r7, #4]
10062052:	2108      	movs	r1, #8
10062054:	4388      	bics	r0, r1
10062056:	80b8      	strh	r0, [r7, #4]
10062058:	7820      	ldrb	r0, [r4, #0]
1006205a:	06c0      	lsls	r0, r0, #27
1006205c:	d500      	bpl.n	10062060 <GAT_clt_rcv+0x260>
1006205e:	88fe      	ldrh	r6, [r7, #6]
10062060:	8861      	ldrh	r1, [r4, #2]
10062062:	2002      	movs	r0, #2
10062064:	4632      	mov	r2, r6
10062066:	f7fe fd49 	bl	10060afc <aci_att_exchange_mtu_resp_event_push_noinline>
1006206a:	2800      	cmp	r0, #0
1006206c:	d000      	beq.n	10062070 <GAT_clt_rcv+0x270>
1006206e:	e0d8      	b.n	10062222 <GAT_clt_rcv+0x422>
10062070:	80fe      	strh	r6, [r7, #6]
10062072:	88b8      	ldrh	r0, [r7, #4]
10062074:	2108      	movs	r1, #8
10062076:	4301      	orrs	r1, r0
10062078:	2004      	movs	r0, #4
1006207a:	4381      	bics	r1, r0
1006207c:	80b9      	strh	r1, [r7, #4]
1006207e:	4620      	mov	r0, r4
10062080:	e0dc      	b.n	1006223c <GAT_clt_rcv+0x43c>
10062082:	88a2      	ldrh	r2, [r4, #4]
10062084:	8861      	ldrh	r1, [r4, #2]
10062086:	200a      	movs	r0, #10
10062088:	462b      	mov	r3, r5
1006208a:	f7fe fe9f 	bl	10060dcc <aci_att_clt_read_by_group_type_resp_event_push_noinline>
1006208e:	2800      	cmp	r0, #0
10062090:	d000      	beq.n	10062094 <GAT_clt_rcv+0x294>
10062092:	e0c6      	b.n	10062222 <GAT_clt_rcv+0x422>
10062094:	4628      	mov	r0, r5
10062096:	f7ff fbc4 	bl	10061822 <GAT_att_clt_read_grp_type_get_last_attr_h>
1006209a:	e00b      	b.n	100620b4 <GAT_clt_rcv+0x2b4>
1006209c:	88a2      	ldrh	r2, [r4, #4]
1006209e:	8861      	ldrh	r1, [r4, #2]
100620a0:	200a      	movs	r0, #10
100620a2:	462b      	mov	r3, r5
100620a4:	f7fe fd98 	bl	10060bd8 <aci_att_clt_find_by_type_value_resp_event_push_noinline>
100620a8:	2800      	cmp	r0, #0
100620aa:	d000      	beq.n	100620ae <GAT_clt_rcv+0x2ae>
100620ac:	e0b9      	b.n	10062222 <GAT_clt_rcv+0x422>
100620ae:	4628      	mov	r0, r5
100620b0:	f7ff fbdd 	bl	1006186e <GAT_att_clt_find_type_val_get_last_attr_h>
100620b4:	498c      	ldr	r1, [pc, #560]	@ (100622e8 <__arm_cp.4_2>)
100620b6:	4288      	cmp	r0, r1
100620b8:	d153      	bne.n	10062162 <GAT_clt_rcv+0x362>
100620ba:	e0b4      	b.n	10062226 <GAT_clt_rcv+0x426>
100620bc:	4628      	mov	r0, r5
100620be:	f000 fa08 	bl	100624d2 <GAT_att_clt_read_type_get_len>
100620c2:	9008      	str	r0, [sp, #32]
100620c4:	8960      	ldrh	r0, [r4, #10]
100620c6:	a90e      	add	r1, sp, #56	@ 0x38
100620c8:	8008      	strh	r0, [r1, #0]
100620ca:	4620      	mov	r0, r4
100620cc:	300c      	adds	r0, #12
100620ce:	9007      	str	r0, [sp, #28]
100620d0:	a809      	add	r0, sp, #36	@ 0x24
100620d2:	300c      	adds	r0, #12
100620d4:	9005      	str	r0, [sp, #20]
100620d6:	a80f      	add	r0, sp, #60	@ 0x3c
100620d8:	1d40      	adds	r0, r0, #5
100620da:	9006      	str	r0, [sp, #24]
100620dc:	2600      	movs	r6, #0
100620de:	b2f7      	uxtb	r7, r6
100620e0:	aa0f      	add	r2, sp, #60	@ 0x3c
100620e2:	4628      	mov	r0, r5
100620e4:	4639      	mov	r1, r7
100620e6:	f7ff fbfe 	bl	100618e6 <GAT_att_clt_read_type_get_data>
100620ea:	2800      	cmp	r0, #0
100620ec:	d000      	beq.n	100620f0 <GAT_clt_rcv+0x2f0>
100620ee:	e0a1      	b.n	10062234 <GAT_clt_rcv+0x434>
100620f0:	9808      	ldr	r0, [sp, #32]
100620f2:	2807      	cmp	r0, #7
100620f4:	d105      	bne.n	10062102 <GAT_clt_rcv+0x302>
100620f6:	a809      	add	r0, sp, #36	@ 0x24
100620f8:	2110      	movs	r1, #16
100620fa:	7401      	strb	r1, [r0, #16]
100620fc:	2202      	movs	r2, #2
100620fe:	9805      	ldr	r0, [sp, #20]
10062100:	e003      	b.n	1006210a <GAT_clt_rcv+0x30a>
10062102:	a809      	add	r0, sp, #36	@ 0x24
10062104:	2180      	movs	r1, #128	@ 0x80
10062106:	7401      	strb	r1, [r0, #16]
10062108:	2210      	movs	r2, #16
1006210a:	9906      	ldr	r1, [sp, #24]
1006210c:	f7ed fb9a 	bl	1004f844 <BLEPLAT_MemCpy>
10062110:	a80e      	add	r0, sp, #56	@ 0x38
10062112:	a90f      	add	r1, sp, #60	@ 0x3c
10062114:	2202      	movs	r2, #2
10062116:	f7ed fb95 	bl	1004f844 <BLEPLAT_MemCpy>
1006211a:	a809      	add	r0, sp, #36	@ 0x24
1006211c:	9907      	ldr	r1, [sp, #28]
1006211e:	f7fd fdcf 	bl	1005fcc0 <UUID_cmp_128bits>
10062122:	2800      	cmp	r0, #0
10062124:	d10d      	bne.n	10062142 <GAT_clt_rcv+0x342>
10062126:	88a2      	ldrh	r2, [r4, #4]
10062128:	8861      	ldrh	r1, [r4, #2]
1006212a:	9808      	ldr	r0, [sp, #32]
1006212c:	9000      	str	r0, [sp, #0]
1006212e:	9501      	str	r5, [sp, #4]
10062130:	4347      	muls	r7, r0
10062132:	1cb8      	adds	r0, r7, #2
10062134:	b283      	uxth	r3, r0
10062136:	2002      	movs	r0, #2
10062138:	f7fe fb8c 	bl	10060854 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
1006213c:	2800      	cmp	r0, #0
1006213e:	d000      	beq.n	10062142 <GAT_clt_rcv+0x342>
10062140:	e082      	b.n	10062248 <GAT_clt_rcv+0x448>
10062142:	1c76      	adds	r6, r6, #1
10062144:	e7cb      	b.n	100620de <GAT_clt_rcv+0x2de>
10062146:	88a2      	ldrh	r2, [r4, #4]
10062148:	8861      	ldrh	r1, [r4, #2]
1006214a:	200a      	movs	r0, #10
1006214c:	462b      	mov	r3, r5
1006214e:	f7fe fd11 	bl	10060b74 <aci_att_clt_find_info_resp_event_push_noinline>
10062152:	2800      	cmp	r0, #0
10062154:	d165      	bne.n	10062222 <GAT_clt_rcv+0x422>
10062156:	4628      	mov	r0, r5
10062158:	f7ff fbe0 	bl	1006191c <GAT_att_clt_find_info_get_last_attr_h>
1006215c:	8961      	ldrh	r1, [r4, #10]
1006215e:	4288      	cmp	r0, r1
10062160:	d261      	bcs.n	10062226 <GAT_clt_rcv+0x426>
10062162:	1c40      	adds	r0, r0, #1
10062164:	8120      	strh	r0, [r4, #8]
10062166:	e061      	b.n	1006222c <GAT_clt_rcv+0x42c>
10062168:	88a2      	ldrh	r2, [r4, #4]
1006216a:	8861      	ldrh	r1, [r4, #2]
1006216c:	200a      	movs	r0, #10
1006216e:	462b      	mov	r3, r5
10062170:	f7fe fd96 	bl	10060ca0 <aci_att_clt_read_resp_event_push_noinline>
10062174:	e053      	b.n	1006221e <GAT_clt_rcv+0x41e>
10062176:	4628      	mov	r0, r5
10062178:	f000 f9ab 	bl	100624d2 <GAT_att_clt_read_type_get_len>
1006217c:	4606      	mov	r6, r0
1006217e:	9406      	str	r4, [sp, #24]
10062180:	8860      	ldrh	r0, [r4, #2]
10062182:	f7f0 fe6b 	bl	10052e5c <GAP_started_gatt_proc>
10062186:	9008      	str	r0, [sp, #32]
10062188:	2402      	movs	r4, #2
1006218a:	8868      	ldrh	r0, [r5, #2]
1006218c:	b2a3      	uxth	r3, r4
1006218e:	4283      	cmp	r3, r0
10062190:	d253      	bcs.n	1006223a <GAT_clt_rcv+0x43a>
10062192:	9808      	ldr	r0, [sp, #32]
10062194:	2801      	cmp	r0, #1
10062196:	d10e      	bne.n	100621b6 <GAT_clt_rcv+0x3b6>
10062198:	89a8      	ldrh	r0, [r5, #12]
1006219a:	1900      	adds	r0, r0, r4
1006219c:	b281      	uxth	r1, r0
1006219e:	af0f      	add	r7, sp, #60	@ 0x3c
100621a0:	4628      	mov	r0, r5
100621a2:	4632      	mov	r2, r6
100621a4:	463b      	mov	r3, r7
100621a6:	f7ef ff01 	bl	10051fac <ACL_pkt_read>
100621aa:	205c      	movs	r0, #92	@ 0x5c
100621ac:	4631      	mov	r1, r6
100621ae:	463a      	mov	r2, r7
100621b0:	f7f0 fff0 	bl	10053194 <GAP_internal_evt_handler>
100621b4:	e01a      	b.n	100621ec <GAT_clt_rcv+0x3ec>
100621b6:	9f06      	ldr	r7, [sp, #24]
100621b8:	88ba      	ldrh	r2, [r7, #4]
100621ba:	8879      	ldrh	r1, [r7, #2]
100621bc:	9600      	str	r6, [sp, #0]
100621be:	9501      	str	r5, [sp, #4]
100621c0:	2002      	movs	r0, #2
100621c2:	f7fe fb47 	bl	10060854 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
100621c6:	2800      	cmp	r0, #0
100621c8:	d12b      	bne.n	10062222 <GAT_clt_rcv+0x422>
100621ca:	7f38      	ldrb	r0, [r7, #28]
100621cc:	2810      	cmp	r0, #16
100621ce:	d10d      	bne.n	100621ec <GAT_clt_rcv+0x3ec>
100621d0:	9806      	ldr	r0, [sp, #24]
100621d2:	8b00      	ldrh	r0, [r0, #24]
100621d4:	4942      	ldr	r1, [pc, #264]	@ (100622e0 <__arm_cp.4_0>)
100621d6:	4288      	cmp	r0, r1
100621d8:	d108      	bne.n	100621ec <GAT_clt_rcv+0x3ec>
100621da:	9806      	ldr	r0, [sp, #24]
100621dc:	8840      	ldrh	r0, [r0, #2]
100621de:	2104      	movs	r1, #4
100621e0:	f7f1 fd52 	bl	10053c88 <GAT_att_cmn_get_channel_descr_p>
100621e4:	8881      	ldrh	r1, [r0, #4]
100621e6:	4a3f      	ldr	r2, [pc, #252]	@ (100622e4 <__arm_cp.4_1>)
100621e8:	4011      	ands	r1, r2
100621ea:	8081      	strh	r1, [r0, #4]
100621ec:	19a4      	adds	r4, r4, r6
100621ee:	e7cc      	b.n	1006218a <GAT_clt_rcv+0x38a>
100621f0:	88a2      	ldrh	r2, [r4, #4]
100621f2:	8861      	ldrh	r1, [r4, #2]
100621f4:	200a      	movs	r0, #10
100621f6:	462b      	mov	r3, r5
100621f8:	f7fe fd84 	bl	10060d04 <aci_att_clt_read_blob_resp_event_push_noinline>
100621fc:	2800      	cmp	r0, #0
100621fe:	d110      	bne.n	10062222 <GAT_clt_rcv+0x422>
10062200:	9808      	ldr	r0, [sp, #32]
10062202:	88c0      	ldrh	r0, [r0, #6]
10062204:	1e41      	subs	r1, r0, #1
10062206:	8868      	ldrh	r0, [r5, #2]
10062208:	1e40      	subs	r0, r0, #1
1006220a:	b282      	uxth	r2, r0
1006220c:	4291      	cmp	r1, r2
1006220e:	d80a      	bhi.n	10062226 <GAT_clt_rcv+0x426>
10062210:	8961      	ldrh	r1, [r4, #10]
10062212:	1808      	adds	r0, r1, r0
10062214:	8160      	strh	r0, [r4, #10]
10062216:	e009      	b.n	1006222c <GAT_clt_rcv+0x42c>
10062218:	462b      	mov	r3, r5
1006221a:	f7fe fed9 	bl	10060fd0 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
1006221e:	2800      	cmp	r0, #0
10062220:	d001      	beq.n	10062226 <GAT_clt_rcv+0x426>
10062222:	2684      	movs	r6, #132	@ 0x84
10062224:	e003      	b.n	1006222e <GAT_clt_rcv+0x42e>
10062226:	4620      	mov	r0, r4
10062228:	f000 f879 	bl	1006231e <GAT_clt_stop_proc>
1006222c:	9e07      	ldr	r6, [sp, #28]
1006222e:	4630      	mov	r0, r6
10062230:	b015      	add	sp, #84	@ 0x54
10062232:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062234:	a80e      	add	r0, sp, #56	@ 0x38
10062236:	8800      	ldrh	r0, [r0, #0]
10062238:	e00a      	b.n	10062250 <GAT_clt_rcv+0x450>
1006223a:	9806      	ldr	r0, [sp, #24]
1006223c:	f000 f86f 	bl	1006231e <GAT_clt_stop_proc>
10062240:	4628      	mov	r0, r5
10062242:	f7ef fe97 	bl	10051f74 <ACL_pkt_release>
10062246:	e7f1      	b.n	1006222c <GAT_clt_rcv+0x42c>
10062248:	980e      	ldr	r0, [sp, #56]	@ 0x38
1006224a:	1e40      	subs	r0, r0, #1
1006224c:	a90e      	add	r1, sp, #56	@ 0x38
1006224e:	8008      	strh	r0, [r1, #0]
10062250:	8961      	ldrh	r1, [r4, #10]
10062252:	b282      	uxth	r2, r0
10062254:	428a      	cmp	r2, r1
10062256:	d202      	bcs.n	1006225e <GAT_clt_rcv+0x45e>
10062258:	1c40      	adds	r0, r0, #1
1006225a:	8120      	strh	r0, [r4, #8]
1006225c:	e002      	b.n	10062264 <GAT_clt_rcv+0x464>
1006225e:	4620      	mov	r0, r4
10062260:	f000 f85d 	bl	1006231e <GAT_clt_stop_proc>
10062264:	4628      	mov	r0, r5
10062266:	f7ef fe85 	bl	10051f74 <ACL_pkt_release>
1006226a:	2600      	movs	r6, #0
1006226c:	e7df      	b.n	1006222e <GAT_clt_rcv+0x42e>
1006226e:	8961      	ldrh	r1, [r4, #10]
10062270:	9a08      	ldr	r2, [sp, #32]
10062272:	89a0      	ldrh	r0, [r4, #12]
10062274:	1840      	adds	r0, r0, r1
10062276:	8160      	strh	r0, [r4, #10]
10062278:	b280      	uxth	r0, r0
1006227a:	435f      	muls	r7, r3
1006227c:	19d1      	adds	r1, r2, r7
1006227e:	8889      	ldrh	r1, [r1, #4]
10062280:	4288      	cmp	r0, r1
10062282:	d1d3      	bne.n	1006222c <GAT_clt_rcv+0x42c>
10062284:	7a20      	ldrb	r0, [r4, #8]
10062286:	1e40      	subs	r0, r0, #1
10062288:	4298      	cmp	r0, r3
1006228a:	d924      	bls.n	100622d6 <GAT_clt_rcv+0x4d6>
1006228c:	2600      	movs	r6, #0
1006228e:	8166      	strh	r6, [r4, #10]
10062290:	7a60      	ldrb	r0, [r4, #9]
10062292:	1c40      	adds	r0, r0, #1
10062294:	7260      	strb	r0, [r4, #9]
10062296:	e7ca      	b.n	1006222e <GAT_clt_rcv+0x42e>
10062298:	43f0      	mvns	r0, r6
1006229a:	9003      	str	r0, [sp, #12]
1006229c:	9b06      	ldr	r3, [sp, #24]
1006229e:	9d08      	ldr	r5, [sp, #32]
100622a0:	4639      	mov	r1, r7
100622a2:	4359      	muls	r1, r3
100622a4:	5a6a      	ldrh	r2, [r5, r1]
100622a6:	4628      	mov	r0, r5
100622a8:	9d05      	ldr	r5, [sp, #20]
100622aa:	4295      	cmp	r5, r2
100622ac:	d10b      	bne.n	100622c6 <GAT_clt_rcv+0x4c6>
100622ae:	4602      	mov	r2, r0
100622b0:	1841      	adds	r1, r0, r1
100622b2:	884a      	ldrh	r2, [r1, #2]
100622b4:	8961      	ldrh	r1, [r4, #10]
100622b6:	188a      	adds	r2, r1, r2
100622b8:	9d04      	ldr	r5, [sp, #16]
100622ba:	42aa      	cmp	r2, r5
100622bc:	d103      	bne.n	100622c6 <GAT_clt_rcv+0x4c6>
100622be:	4602      	mov	r2, r0
100622c0:	9803      	ldr	r0, [sp, #12]
100622c2:	2800      	cmp	r0, #0
100622c4:	d0d5      	beq.n	10062272 <GAT_clt_rcv+0x472>
100622c6:	7226      	strb	r6, [r4, #8]
100622c8:	200f      	movs	r0, #15
100622ca:	71a0      	strb	r0, [r4, #6]
100622cc:	7820      	ldrb	r0, [r4, #0]
100622ce:	2110      	movs	r1, #16
100622d0:	4301      	orrs	r1, r0
100622d2:	7021      	strb	r1, [r4, #0]
100622d4:	e7ab      	b.n	1006222e <GAT_clt_rcv+0x42e>
100622d6:	2001      	movs	r0, #1
100622d8:	7220      	strb	r0, [r4, #8]
100622da:	200f      	movs	r0, #15
100622dc:	71a0      	strb	r0, [r4, #6]
100622de:	e7a5      	b.n	1006222c <GAT_clt_rcv+0x42c>

100622e0 <__arm_cp.4_0>:
100622e0:	00002b2a 	.word	0x00002b2a

100622e4 <__arm_cp.4_1>:
100622e4:	0000fdff 	.word	0x0000fdff

100622e8 <__arm_cp.4_2>:
100622e8:	0000ffff 	.word	0x0000ffff

100622ec <__arm_cp.4_3>:
100622ec:	20000f34 	.word	0x20000f34

100622f0 <GAT_clt_get_proc_per_channel>:
100622f0:	4a07      	ldr	r2, [pc, #28]	@ (10062310 <__arm_cp.5_0>)
100622f2:	6812      	ldr	r2, [r2, #0]
100622f4:	3248      	adds	r2, #72	@ 0x48
100622f6:	6812      	ldr	r2, [r2, #0]
100622f8:	2a00      	cmp	r2, #0
100622fa:	d007      	beq.n	1006230c <GAT_clt_get_proc_per_channel+0x1c>
100622fc:	8853      	ldrh	r3, [r2, #2]
100622fe:	4283      	cmp	r3, r0
10062300:	d102      	bne.n	10062308 <GAT_clt_get_proc_per_channel+0x18>
10062302:	8893      	ldrh	r3, [r2, #4]
10062304:	428b      	cmp	r3, r1
10062306:	d001      	beq.n	1006230c <GAT_clt_get_proc_per_channel+0x1c>
10062308:	3220      	adds	r2, #32
1006230a:	e7f4      	b.n	100622f6 <GAT_clt_get_proc_per_channel+0x6>
1006230c:	4610      	mov	r0, r2
1006230e:	4770      	bx	lr

10062310 <__arm_cp.5_0>:
10062310:	20000ed8 	.word	0x20000ed8

10062314 <GAT_att_cmn_get_opcode>:
10062314:	b580      	push	{r7, lr}
10062316:	8981      	ldrh	r1, [r0, #12]
10062318:	f000 f8cb 	bl	100624b2 <ACL_pkt_read_8b>
1006231c:	bd80      	pop	{r7, pc}

1006231e <GAT_clt_stop_proc>:
1006231e:	b580      	push	{r7, lr}
10062320:	7801      	ldrb	r1, [r0, #0]
10062322:	2208      	movs	r2, #8
10062324:	430a      	orrs	r2, r1
10062326:	7002      	strb	r2, [r0, #0]
10062328:	200c      	movs	r0, #12
1006232a:	f7fd fb21 	bl	1005f970 <tsk_notify_idx>
1006232e:	f7ec fcc8 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062332:	bd80      	pop	{r7, pc}

10062334 <GAT_clt_rcv_corrupted>:
10062334:	b510      	push	{r4, lr}
10062336:	8804      	ldrh	r4, [r0, #0]
10062338:	f7f4 fb33 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
1006233c:	4601      	mov	r1, r0
1006233e:	4620      	mov	r0, r4
10062340:	f7ff ffd6 	bl	100622f0 <GAT_clt_get_proc_per_channel>
10062344:	2800      	cmp	r0, #0
10062346:	d008      	beq.n	1006235a <GAT_clt_rcv_corrupted+0x26>
10062348:	7801      	ldrb	r1, [r0, #0]
1006234a:	2218      	movs	r2, #24
1006234c:	430a      	orrs	r2, r1
1006234e:	7002      	strb	r2, [r0, #0]
10062350:	200c      	movs	r0, #12
10062352:	f7fd fb0d 	bl	1005f970 <tsk_notify_idx>
10062356:	f7ec fcb4 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1006235a:	2000      	movs	r0, #0
1006235c:	bd10      	pop	{r4, pc}

1006235e <GAT_clt_rcv_srv_initiated>:
1006235e:	b5f0      	push	{r4, r5, r6, r7, lr}
10062360:	b085      	sub	sp, #20
10062362:	4604      	mov	r4, r0
10062364:	8805      	ldrh	r5, [r0, #0]
10062366:	8980      	ldrh	r0, [r0, #12]
10062368:	1c46      	adds	r6, r0, #1
1006236a:	4620      	mov	r0, r4
1006236c:	f7ff ffd2 	bl	10062314 <GAT_att_cmn_get_opcode>
10062370:	2823      	cmp	r0, #35	@ 0x23
10062372:	d010      	beq.n	10062396 <GAT_clt_rcv_srv_initiated+0x38>
10062374:	b2b1      	uxth	r1, r6
10062376:	281b      	cmp	r0, #27
10062378:	d122      	bne.n	100623c0 <GAT_clt_rcv_srv_initiated+0x62>
1006237a:	4620      	mov	r0, r4
1006237c:	f7ef fe1f 	bl	10051fbe <ACL_pkt_read_16b>
10062380:	4601      	mov	r1, r0
10062382:	4628      	mov	r0, r5
10062384:	f000 f85c 	bl	10062440 <GAT_clt_check_security>
10062388:	2800      	cmp	r0, #0
1006238a:	d03d      	beq.n	10062408 <GAT_clt_rcv_srv_initiated+0xaa>
1006238c:	4620      	mov	r0, r4
1006238e:	f7ef fdf1 	bl	10051f74 <ACL_pkt_release>
10062392:	2500      	movs	r5, #0
10062394:	e050      	b.n	10062438 <GAT_clt_rcv_srv_initiated+0xda>
10062396:	8867      	ldrh	r7, [r4, #2]
10062398:	b2b1      	uxth	r1, r6
1006239a:	4620      	mov	r0, r4
1006239c:	42b9      	cmp	r1, r7
1006239e:	d22a      	bcs.n	100623f6 <GAT_clt_rcv_srv_initiated+0x98>
100623a0:	f7ef fe0d 	bl	10051fbe <ACL_pkt_read_16b>
100623a4:	4601      	mov	r1, r0
100623a6:	4628      	mov	r0, r5
100623a8:	f000 f84a 	bl	10062440 <GAT_clt_check_security>
100623ac:	2800      	cmp	r0, #0
100623ae:	d1ed      	bne.n	1006238c <GAT_clt_rcv_srv_initiated+0x2e>
100623b0:	1cb0      	adds	r0, r6, #2
100623b2:	b281      	uxth	r1, r0
100623b4:	4620      	mov	r0, r4
100623b6:	f7ef fe02 	bl	10051fbe <ACL_pkt_read_16b>
100623ba:	1830      	adds	r0, r6, r0
100623bc:	1d06      	adds	r6, r0, #4
100623be:	e7eb      	b.n	10062398 <GAT_clt_rcv_srv_initiated+0x3a>
100623c0:	4620      	mov	r0, r4
100623c2:	f7ef fdfc 	bl	10051fbe <ACL_pkt_read_16b>
100623c6:	4601      	mov	r1, r0
100623c8:	4628      	mov	r0, r5
100623ca:	f000 f839 	bl	10062440 <GAT_clt_check_security>
100623ce:	2800      	cmp	r0, #0
100623d0:	d024      	beq.n	1006241c <GAT_clt_rcv_srv_initiated+0xbe>
100623d2:	466e      	mov	r6, sp
100623d4:	8075      	strh	r5, [r6, #2]
100623d6:	4620      	mov	r0, r4
100623d8:	f7f4 fae3 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
100623dc:	80b0      	strh	r0, [r6, #4]
100623de:	201e      	movs	r0, #30
100623e0:	7030      	strb	r0, [r6, #0]
100623e2:	4630      	mov	r0, r6
100623e4:	f7ff f860 	bl	100614a8 <GAT_att_clt_tx>
100623e8:	4605      	mov	r5, r0
100623ea:	2800      	cmp	r0, #0
100623ec:	d120      	bne.n	10062430 <GAT_clt_rcv_srv_initiated+0xd2>
100623ee:	4620      	mov	r0, r4
100623f0:	f7ef fdc0 	bl	10051f74 <ACL_pkt_release>
100623f4:	e01c      	b.n	10062430 <GAT_clt_rcv_srv_initiated+0xd2>
100623f6:	f7f4 fad4 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
100623fa:	4602      	mov	r2, r0
100623fc:	200a      	movs	r0, #10
100623fe:	4629      	mov	r1, r5
10062400:	4623      	mov	r3, r4
10062402:	f7fe fb49 	bl	10060a98 <aci_gatt_clt_multi_notification_int_event_push_noinline>
10062406:	e012      	b.n	1006242e <GAT_clt_rcv_srv_initiated+0xd0>
10062408:	4620      	mov	r0, r4
1006240a:	f7f4 faca 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
1006240e:	4602      	mov	r2, r0
10062410:	200a      	movs	r0, #10
10062412:	4629      	mov	r1, r5
10062414:	4623      	mov	r3, r4
10062416:	f7fe f9a5 	bl	10060764 <aci_gatt_clt_notification_event_push_noinline>
1006241a:	e008      	b.n	1006242e <GAT_clt_rcv_srv_initiated+0xd0>
1006241c:	4620      	mov	r0, r4
1006241e:	f7f4 fac0 	bl	100569a2 <L2C_get_cid_from_basic_packet_header>
10062422:	4602      	mov	r2, r0
10062424:	200a      	movs	r0, #10
10062426:	4629      	mov	r1, r5
10062428:	4623      	mov	r3, r4
1006242a:	f7fe f969 	bl	10060700 <aci_gatt_clt_indication_event_push_noinline>
1006242e:	4605      	mov	r5, r0
10062430:	2d00      	cmp	r5, #0
10062432:	d001      	beq.n	10062438 <GAT_clt_rcv_srv_initiated+0xda>
10062434:	207b      	movs	r0, #123	@ 0x7b
10062436:	43c5      	mvns	r5, r0
10062438:	b2e8      	uxtb	r0, r5
1006243a:	b005      	add	sp, #20
1006243c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10062440 <GAT_clt_check_security>:
10062440:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10062442:	4604      	mov	r4, r0
10062444:	f000 f822 	bl	1006248c <GAT_clt_find_sec_level_entry_p>
10062448:	4605      	mov	r5, r0
1006244a:	2800      	cmp	r0, #0
1006244c:	d106      	bne.n	1006245c <GAT_clt_check_security+0x1c>
1006244e:	480e      	ldr	r0, [pc, #56]	@ (10062488 <__arm_cp.13_0>)
10062450:	4601      	mov	r1, r0
10062452:	f000 f81b 	bl	1006248c <GAT_clt_find_sec_level_entry_p>
10062456:	4605      	mov	r5, r0
10062458:	2800      	cmp	r0, #0
1006245a:	d002      	beq.n	10062462 <GAT_clt_check_security+0x22>
1006245c:	7828      	ldrb	r0, [r5, #0]
1006245e:	2802      	cmp	r0, #2
10062460:	d201      	bcs.n	10062466 <GAT_clt_check_security+0x26>
10062462:	2000      	movs	r0, #0
10062464:	e00d      	b.n	10062482 <GAT_clt_check_security+0x42>
10062466:	a903      	add	r1, sp, #12
10062468:	aa02      	add	r2, sp, #8
1006246a:	ab01      	add	r3, sp, #4
1006246c:	4620      	mov	r0, r4
1006246e:	f7fd f8a6 	bl	1005f5be <smp_sap_get_security_level>
10062472:	2800      	cmp	r0, #0
10062474:	d104      	bne.n	10062480 <GAT_clt_check_security+0x40>
10062476:	7828      	ldrb	r0, [r5, #0]
10062478:	a902      	add	r1, sp, #8
1006247a:	7809      	ldrb	r1, [r1, #0]
1006247c:	4281      	cmp	r1, r0
1006247e:	d2f0      	bcs.n	10062462 <GAT_clt_check_security+0x22>
10062480:	20c0      	movs	r0, #192	@ 0xc0
10062482:	b004      	add	sp, #16
10062484:	bdb0      	pop	{r4, r5, r7, pc}
10062486:	46c0      	nop			@ (mov r8, r8)

10062488 <__arm_cp.13_0>:
10062488:	0000ffff 	.word	0x0000ffff

1006248c <GAT_clt_find_sec_level_entry_p>:
1006248c:	4a07      	ldr	r2, [pc, #28]	@ (100624ac <__arm_cp.15_0>)
1006248e:	6812      	ldr	r2, [r2, #0]
10062490:	3258      	adds	r2, #88	@ 0x58
10062492:	6812      	ldr	r2, [r2, #0]
10062494:	2a00      	cmp	r2, #0
10062496:	d007      	beq.n	100624a8 <GAT_clt_find_sec_level_entry_p+0x1c>
10062498:	8893      	ldrh	r3, [r2, #4]
1006249a:	4283      	cmp	r3, r0
1006249c:	d102      	bne.n	100624a4 <GAT_clt_find_sec_level_entry_p+0x18>
1006249e:	8853      	ldrh	r3, [r2, #2]
100624a0:	428b      	cmp	r3, r1
100624a2:	d001      	beq.n	100624a8 <GAT_clt_find_sec_level_entry_p+0x1c>
100624a4:	3208      	adds	r2, #8
100624a6:	e7f4      	b.n	10062492 <GAT_clt_find_sec_level_entry_p+0x6>
100624a8:	4610      	mov	r0, r2
100624aa:	4770      	bx	lr

100624ac <__arm_cp.15_0>:
100624ac:	20000ed8 	.word	0x20000ed8

100624b0 <GAT_clt_exec_empty>:
100624b0:	4770      	bx	lr

100624b2 <ACL_pkt_read_8b>:
100624b2:	b51c      	push	{r2, r3, r4, lr}
100624b4:	291f      	cmp	r1, #31
100624b6:	d803      	bhi.n	100624c0 <ACL_pkt_read_8b+0xe>
100624b8:	aa01      	add	r2, sp, #4
100624ba:	8011      	strh	r1, [r2, #0]
100624bc:	6840      	ldr	r0, [r0, #4]
100624be:	e005      	b.n	100624cc <ACL_pkt_read_8b+0x1a>
100624c0:	6840      	ldr	r0, [r0, #4]
100624c2:	ac01      	add	r4, sp, #4
100624c4:	4622      	mov	r2, r4
100624c6:	f7fb fd1c 	bl	1005df02 <Mem_Buff_get_buff_off>
100624ca:	8821      	ldrh	r1, [r4, #0]
100624cc:	1840      	adds	r0, r0, r1
100624ce:	7900      	ldrb	r0, [r0, #4]
100624d0:	bd1c      	pop	{r2, r3, r4, pc}

100624d2 <GAT_att_clt_read_type_get_len>:
100624d2:	b580      	push	{r7, lr}
100624d4:	8981      	ldrh	r1, [r0, #12]
100624d6:	1c49      	adds	r1, r1, #1
100624d8:	b289      	uxth	r1, r1
100624da:	f7ff ffea 	bl	100624b2 <ACL_pkt_read_8b>
100624de:	bd80      	pop	{r7, pc}

100624e0 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
100624e0:	2000      	movs	r0, #0
100624e2:	4770      	bx	lr

100624e4 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
100624e4:	2000      	movs	r0, #0
100624e6:	4770      	bx	lr

100624e8 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
100624e8:	b580      	push	{r7, lr}
100624ea:	6841      	ldr	r1, [r0, #4]
100624ec:	7800      	ldrb	r0, [r0, #0]
100624ee:	f7f4 fa53 	bl	10056998 <l2c_release_unexpected_acl_packet>
100624f2:	2000      	movs	r0, #0
100624f4:	bd80      	pop	{r7, pc}

100624f6 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
100624f6:	4770      	bx	lr

100624f8 <llc_big_brc_mem_alloc_ucfg_weak>:
100624f8:	4770      	bx	lr

100624fa <llc_big_sync_mem_alloc_ucfg_weak>:
100624fa:	4770      	bx	lr

100624fc <llc_cig_cmn_mem_alloc_ucfg_weak>:
100624fc:	4770      	bx	lr

100624fe <llc_conn_cancel_slot>:
100624fe:	b570      	push	{r4, r5, r6, lr}
10062500:	4604      	mov	r4, r0
10062502:	2030      	movs	r0, #48	@ 0x30
10062504:	5c25      	ldrb	r5, [r4, r0]
10062506:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
10062508:	f7f4 fe03 	bl	10057112 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
1006250c:	20ff      	movs	r0, #255	@ 0xff
1006250e:	3012      	adds	r0, #18
10062510:	1826      	adds	r6, r4, r0
10062512:	4628      	mov	r0, r5
10062514:	f7f6 fbbc 	bl	10058c90 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10062518:	2800      	cmp	r0, #0
1006251a:	d004      	beq.n	10062526 <llc_conn_cancel_slot+0x28>
1006251c:	3430      	adds	r4, #48	@ 0x30
1006251e:	7c60      	ldrb	r0, [r4, #17]
10062520:	2101      	movs	r1, #1
10062522:	f7fb fa69 	bl	1005d9f8 <LL_sched_set_per_state>
10062526:	2000      	movs	r0, #0
10062528:	7030      	strb	r0, [r6, #0]
1006252a:	2015      	movs	r0, #21
1006252c:	f7fd fa20 	bl	1005f970 <tsk_notify_idx>
10062530:	f7ec fbc7 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062534:	bd70      	pop	{r4, r5, r6, pc}

10062536 <llc_conn_program_slot>:
10062536:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10062538:	4604      	mov	r4, r0
1006253a:	f7ee fae8 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
1006253e:	4605      	mov	r5, r0
10062540:	2101      	movs	r1, #1
10062542:	4620      	mov	r0, r4
10062544:	f7f5 f886 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10062548:	4626      	mov	r6, r4
1006254a:	362c      	adds	r6, #44	@ 0x2c
1006254c:	4621      	mov	r1, r4
1006254e:	3128      	adds	r1, #40	@ 0x28
10062550:	428d      	cmp	r5, r1
10062552:	d010      	beq.n	10062576 <llc_conn_program_slot+0x40>
10062554:	4285      	cmp	r5, r0
10062556:	d00e      	beq.n	10062576 <llc_conn_program_slot+0x40>
10062558:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
1006255a:	4620      	mov	r0, r4
1006255c:	f7f4 ffce 	bl	100574fc <llc_conn_copy_tx_data_packet>
10062560:	2101      	movs	r1, #1
10062562:	4620      	mov	r0, r4
10062564:	f7f5 f87c 	bl	10057660 <llc_conn_get_enc_on>
10062568:	2801      	cmp	r0, #1
1006256a:	d104      	bne.n	10062576 <llc_conn_program_slot+0x40>
1006256c:	7868      	ldrb	r0, [r5, #1]
1006256e:	2800      	cmp	r0, #0
10062570:	d001      	beq.n	10062576 <llc_conn_program_slot+0x40>
10062572:	1d00      	adds	r0, r0, #4
10062574:	7068      	strb	r0, [r5, #1]
10062576:	4625      	mov	r5, r4
10062578:	35d0      	adds	r5, #208	@ 0xd0
1006257a:	7830      	ldrb	r0, [r6, #0]
1006257c:	2803      	cmp	r0, #3
1006257e:	d113      	bne.n	100625a8 <llc_conn_program_slot+0x72>
10062580:	a801      	add	r0, sp, #4
10062582:	f7fb f837 	bl	1005d5f4 <LL_sched_anchorstretch>
10062586:	2801      	cmp	r0, #1
10062588:	d006      	beq.n	10062598 <llc_conn_program_slot+0x62>
1006258a:	2800      	cmp	r0, #0
1006258c:	d10a      	bne.n	100625a4 <llc_conn_program_slot+0x6e>
1006258e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10062590:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10062592:	0049      	lsls	r1, r1, #1
10062594:	1808      	adds	r0, r1, r0
10062596:	e006      	b.n	100625a6 <llc_conn_program_slot+0x70>
10062598:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1006259a:	9801      	ldr	r0, [sp, #4]
1006259c:	4288      	cmp	r0, r1
1006259e:	d302      	bcc.n	100625a6 <llc_conn_program_slot+0x70>
100625a0:	4608      	mov	r0, r1
100625a2:	e000      	b.n	100625a6 <llc_conn_program_slot+0x70>
100625a4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
100625a6:	6068      	str	r0, [r5, #4]
100625a8:	4620      	mov	r0, r4
100625aa:	f7f5 f887 	bl	100576bc <llc_conn_guard_time_for_close_conn_event>
100625ae:	4620      	mov	r0, r4
100625b0:	f7f6 f948 	bl	10058844 <llc_conn_update_receive_window>
100625b4:	6829      	ldr	r1, [r5, #0]
100625b6:	3414      	adds	r4, #20
100625b8:	4620      	mov	r0, r4
100625ba:	f7ee fbf0 	bl	10050d9e <BLEPLAT_CNTR_SetRcvLen>
100625be:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100625c0 <llc_conn_skip_slot>:
100625c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100625c2:	b089      	sub	sp, #36	@ 0x24
100625c4:	2242      	movs	r2, #66	@ 0x42
100625c6:	5a85      	ldrh	r5, [r0, r2]
100625c8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
100625ca:	9201      	str	r2, [sp, #4]
100625cc:	1851      	adds	r1, r2, r1
100625ce:	9106      	str	r1, [sp, #24]
100625d0:	2191      	movs	r1, #145	@ 0x91
100625d2:	0049      	lsls	r1, r1, #1
100625d4:	1841      	adds	r1, r0, r1
100625d6:	9102      	str	r1, [sp, #8]
100625d8:	4601      	mov	r1, r0
100625da:	3142      	adds	r1, #66	@ 0x42
100625dc:	9105      	str	r1, [sp, #20]
100625de:	4601      	mov	r1, r0
100625e0:	312d      	adds	r1, #45	@ 0x2d
100625e2:	9103      	str	r1, [sp, #12]
100625e4:	9007      	str	r0, [sp, #28]
100625e6:	309a      	adds	r0, #154	@ 0x9a
100625e8:	9004      	str	r0, [sp, #16]
100625ea:	2000      	movs	r0, #0
100625ec:	9008      	str	r0, [sp, #32]
100625ee:	b2a9      	uxth	r1, r5
100625f0:	2201      	movs	r2, #1
100625f2:	9e07      	ldr	r6, [sp, #28]
100625f4:	4630      	mov	r0, r6
100625f6:	f7f5 fb06 	bl	10057c06 <llc_conn_calc_skip_ucfg_weak>
100625fa:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
100625fc:	4341      	muls	r1, r0
100625fe:	6c72      	ldr	r2, [r6, #68]	@ 0x44
10062600:	1854      	adds	r4, r2, r1
10062602:	6474      	str	r4, [r6, #68]	@ 0x44
10062604:	9908      	ldr	r1, [sp, #32]
10062606:	1841      	adds	r1, r0, r1
10062608:	9108      	str	r1, [sp, #32]
1006260a:	182d      	adds	r5, r5, r0
1006260c:	b2af      	uxth	r7, r5
1006260e:	4630      	mov	r0, r6
10062610:	4639      	mov	r1, r7
10062612:	f7f5 fb9b 	bl	10057d4c <llc_conn_check_instant_and_set_params>
10062616:	4606      	mov	r6, r0
10062618:	2800      	cmp	r0, #0
1006261a:	d102      	bne.n	10062622 <llc_conn_skip_slot+0x62>
1006261c:	9806      	ldr	r0, [sp, #24]
1006261e:	1a20      	subs	r0, r4, r0
10062620:	d4e5      	bmi.n	100625ee <llc_conn_skip_slot+0x2e>
10062622:	9c05      	ldr	r4, [sp, #20]
10062624:	8820      	ldrh	r0, [r4, #0]
10062626:	42b8      	cmp	r0, r7
10062628:	d907      	bls.n	1006263a <llc_conn_skip_slot+0x7a>
1006262a:	2009      	movs	r0, #9
1006262c:	0140      	lsls	r0, r0, #5
1006262e:	9907      	ldr	r1, [sp, #28]
10062630:	1809      	adds	r1, r1, r0
10062632:	9802      	ldr	r0, [sp, #8]
10062634:	8800      	ldrh	r0, [r0, #0]
10062636:	f7f6 fb81 	bl	10058d3c <llc_subrate_new_sr_base_event_ucfg_weak>
1006263a:	8025      	strh	r5, [r4, #0]
1006263c:	2e00      	cmp	r6, #0
1006263e:	9d08      	ldr	r5, [sp, #32]
10062640:	d118      	bne.n	10062674 <llc_conn_skip_slot+0xb4>
10062642:	9807      	ldr	r0, [sp, #28]
10062644:	6c41      	ldr	r1, [r0, #68]	@ 0x44
10062646:	9a01      	ldr	r2, [sp, #4]
10062648:	1a8f      	subs	r7, r1, r2
1006264a:	4639      	mov	r1, r7
1006264c:	f7f5 fc12 	bl	10057e74 <llc_conn_check_supervision_timer>
10062650:	4606      	mov	r6, r0
10062652:	2800      	cmp	r0, #0
10062654:	d10e      	bne.n	10062674 <llc_conn_skip_slot+0xb4>
10062656:	9807      	ldr	r0, [sp, #28]
10062658:	4639      	mov	r1, r7
1006265a:	f7f5 fb41 	bl	10057ce0 <llc_conn_check_ctrl_proc_rsp_timer>
1006265e:	4606      	mov	r6, r0
10062660:	2800      	cmp	r0, #0
10062662:	d107      	bne.n	10062674 <llc_conn_skip_slot+0xb4>
10062664:	9807      	ldr	r0, [sp, #28]
10062666:	4639      	mov	r1, r7
10062668:	462a      	mov	r2, r5
1006266a:	f7f6 f875 	bl	10058758 <llc_conn_set_taskslot_params>
1006266e:	4606      	mov	r6, r0
10062670:	2800      	cmp	r0, #0
10062672:	d007      	beq.n	10062684 <llc_conn_skip_slot+0xc4>
10062674:	9c03      	ldr	r4, [sp, #12]
10062676:	7d20      	ldrb	r0, [r4, #20]
10062678:	f7fb f9b4 	bl	1005d9e4 <LL_sched_delete_taskslot>
1006267c:	7026      	strb	r6, [r4, #0]
1006267e:	2000      	movs	r0, #0
10062680:	9904      	ldr	r1, [sp, #16]
10062682:	8008      	strh	r0, [r1, #0]
10062684:	4628      	mov	r0, r5
10062686:	b009      	add	sp, #36	@ 0x24
10062688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1006268c <llc_conn_isr>:
1006268c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006268e:	b099      	sub	sp, #100	@ 0x64
10062690:	4607      	mov	r7, r0
10062692:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
10062694:	1c40      	adds	r0, r0, #1
10062696:	8678      	strh	r0, [r7, #50]	@ 0x32
10062698:	2041      	movs	r0, #65	@ 0x41
1006269a:	5c3d      	ldrb	r5, [r7, r0]
1006269c:	202d      	movs	r0, #45	@ 0x2d
1006269e:	5c38      	ldrb	r0, [r7, r0]
100626a0:	2800      	cmp	r0, #0
100626a2:	d008      	beq.n	100626b6 <llc_conn_isr+0x2a>
100626a4:	f7ed f9da 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
100626a8:	4628      	mov	r0, r5
100626aa:	f7fb f99b 	bl	1005d9e4 <LL_sched_delete_taskslot>
100626ae:	4628      	mov	r0, r5
100626b0:	f7fa ffa8 	bl	1005d604 <LL_sched_engine>
100626b4:	e2a5      	b.n	10062c02 <__arm_cp.0_5+0x182>
100626b6:	2021      	movs	r0, #33	@ 0x21
100626b8:	00c0      	lsls	r0, r0, #3
100626ba:	183e      	adds	r6, r7, r0
100626bc:	4638      	mov	r0, r7
100626be:	302c      	adds	r0, #44	@ 0x2c
100626c0:	900d      	str	r0, [sp, #52]	@ 0x34
100626c2:	463c      	mov	r4, r7
100626c4:	3480      	adds	r4, #128	@ 0x80
100626c6:	4638      	mov	r0, r7
100626c8:	30d0      	adds	r0, #208	@ 0xd0
100626ca:	9007      	str	r0, [sp, #28]
100626cc:	48ea      	ldr	r0, [pc, #936]	@ (10062a78 <__arm_cp.0_3>)
100626ce:	6800      	ldr	r0, [r0, #0]
100626d0:	f7ee f9e0 	bl	10050a94 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
100626d4:	9009      	str	r0, [sp, #36]	@ 0x24
100626d6:	2800      	cmp	r0, #0
100626d8:	940b      	str	r4, [sp, #44]	@ 0x2c
100626da:	960a      	str	r6, [sp, #40]	@ 0x28
100626dc:	9508      	str	r5, [sp, #32]
100626de:	d040      	beq.n	10062762 <llc_conn_isr+0xd6>
100626e0:	463e      	mov	r6, r7
100626e2:	3614      	adds	r6, #20
100626e4:	4630      	mov	r0, r6
100626e6:	f7ee fa05 	bl	10050af4 <BLEPLAT_CNTR_PacketClrPllTrig>
100626ea:	4630      	mov	r0, r6
100626ec:	f7ee f9f6 	bl	10050adc <BLEPLAT_CNTR_PacketClrIncChan>
100626f0:	4620      	mov	r0, r4
100626f2:	3008      	adds	r0, #8
100626f4:	900c      	str	r0, [sp, #48]	@ 0x30
100626f6:	7a20      	ldrb	r0, [r4, #8]
100626f8:	0780      	lsls	r0, r0, #30
100626fa:	d445      	bmi.n	10062788 <llc_conn_isr+0xfc>
100626fc:	4638      	mov	r0, r7
100626fe:	f7ee fa06 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
10062702:	4605      	mov	r5, r0
10062704:	463c      	mov	r4, r7
10062706:	3428      	adds	r4, #40	@ 0x28
10062708:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006270a:	7800      	ldrb	r0, [r0, #0]
1006270c:	2100      	movs	r1, #0
1006270e:	9106      	str	r1, [sp, #24]
10062710:	2803      	cmp	r0, #3
10062712:	d000      	beq.n	10062716 <llc_conn_isr+0x8a>
10062714:	e0a6      	b.n	10062864 <llc_conn_isr+0x1d8>
10062716:	4630      	mov	r0, r6
10062718:	f7ee f9f9 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
1006271c:	4603      	mov	r3, r0
1006271e:	42a5      	cmp	r5, r4
10062720:	d015      	beq.n	1006274e <llc_conn_isr+0xc2>
10062722:	7829      	ldrb	r1, [r5, #0]
10062724:	2003      	movs	r0, #3
10062726:	460a      	mov	r2, r1
10062728:	4002      	ands	r2, r0
1006272a:	2a03      	cmp	r2, #3
1006272c:	d10a      	bne.n	10062744 <llc_conn_isr+0xb8>
1006272e:	0689      	lsls	r1, r1, #26
10062730:	d400      	bmi.n	10062734 <llc_conn_isr+0xa8>
10062732:	2002      	movs	r0, #2
10062734:	5c28      	ldrb	r0, [r5, r0]
10062736:	2806      	cmp	r0, #6
10062738:	d104      	bne.n	10062744 <llc_conn_isr+0xb8>
1006273a:	4638      	mov	r0, r7
1006273c:	9305      	str	r3, [sp, #20]
1006273e:	f7f4 fec5 	bl	100574cc <llc_conn_clr_rx_acl_blocked>
10062742:	9b05      	ldr	r3, [sp, #20]
10062744:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10062746:	6810      	ldr	r0, [r2, #0]
10062748:	2140      	movs	r1, #64	@ 0x40
1006274a:	4301      	orrs	r1, r0
1006274c:	6011      	str	r1, [r2, #0]
1006274e:	7818      	ldrb	r0, [r3, #0]
10062750:	7829      	ldrb	r1, [r5, #0]
10062752:	4301      	orrs	r1, r0
10062754:	06c8      	lsls	r0, r1, #27
10062756:	d474      	bmi.n	10062842 <llc_conn_isr+0x1b6>
10062758:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006275a:	7800      	ldrb	r0, [r0, #0]
1006275c:	06c0      	lsls	r0, r0, #27
1006275e:	d57d      	bpl.n	1006285c <llc_conn_isr+0x1d0>
10062760:	e080      	b.n	10062864 <llc_conn_isr+0x1d8>
10062762:	4638      	mov	r0, r7
10062764:	f7ee f9c6 	bl	10050af4 <BLEPLAT_CNTR_PacketClrPllTrig>
10062768:	4638      	mov	r0, r7
1006276a:	f7ee f9b7 	bl	10050adc <BLEPLAT_CNTR_PacketClrIncChan>
1006276e:	a80e      	add	r0, sp, #56	@ 0x38
10062770:	2600      	movs	r6, #0
10062772:	7786      	strb	r6, [r0, #30]
10062774:	7606      	strb	r6, [r0, #24]
10062776:	7746      	strb	r6, [r0, #29]
10062778:	4cbf      	ldr	r4, [pc, #764]	@ (10062a78 <__arm_cp.0_3>)
1006277a:	6820      	ldr	r0, [r4, #0]
1006277c:	f7ee f97e 	bl	10050a7c <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10062780:	2800      	cmp	r0, #0
10062782:	d010      	beq.n	100627a6 <llc_conn_isr+0x11a>
10062784:	2501      	movs	r5, #1
10062786:	e014      	b.n	100627b2 <llc_conn_isr+0x126>
10062788:	463d      	mov	r5, r7
1006278a:	35a8      	adds	r5, #168	@ 0xa8
1006278c:	f7ed f966 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
10062790:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10062792:	7d70      	ldrb	r0, [r6, #21]
10062794:	f7fb f926 	bl	1005d9e4 <LL_sched_delete_taskslot>
10062798:	2000      	movs	r0, #0
1006279a:	8028      	strh	r0, [r5, #0]
1006279c:	2113      	movs	r1, #19
1006279e:	7071      	strb	r1, [r6, #1]
100627a0:	8360      	strh	r0, [r4, #26]
100627a2:	4634      	mov	r4, r6
100627a4:	e1e5      	b.n	10062b72 <__arm_cp.0_5+0xf2>
100627a6:	6820      	ldr	r0, [r4, #0]
100627a8:	f7ee f921 	bl	100509ee <BLEPLAT_CNTR_IntGetIntStatusLenErr>
100627ac:	4605      	mov	r5, r0
100627ae:	1e40      	subs	r0, r0, #1
100627b0:	4185      	sbcs	r5, r0
100627b2:	a80e      	add	r0, sp, #56	@ 0x38
100627b4:	76c5      	strb	r5, [r0, #27]
100627b6:	6820      	ldr	r0, [r4, #0]
100627b8:	f7ee f977 	bl	10050aaa <BLEPLAT_CNTR_IntGetIntStatusTxOk>
100627bc:	9006      	str	r0, [sp, #24]
100627be:	900f      	str	r0, [sp, #60]	@ 0x3c
100627c0:	2d00      	cmp	r5, #0
100627c2:	d01f      	beq.n	10062804 <llc_conn_isr+0x178>
100627c4:	f7ed f94a 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
100627c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
100627ca:	68e8      	ldr	r0, [r5, #12]
100627cc:	2800      	cmp	r0, #0
100627ce:	d002      	beq.n	100627d6 <llc_conn_isr+0x14a>
100627d0:	88c1      	ldrh	r1, [r0, #6]
100627d2:	1c49      	adds	r1, r1, #1
100627d4:	80c1      	strh	r1, [r0, #6]
100627d6:	6928      	ldr	r0, [r5, #16]
100627d8:	2800      	cmp	r0, #0
100627da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100627dc:	9e06      	ldr	r6, [sp, #24]
100627de:	d00a      	beq.n	100627f6 <llc_conn_isr+0x16a>
100627e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100627e2:	7d40      	ldrb	r0, [r0, #21]
100627e4:	f7ee fbd4 	bl	10050f90 <BLEPLAT_CNTR_SmGetRemapChan>
100627e8:	0040      	lsls	r0, r0, #1
100627ea:	6929      	ldr	r1, [r5, #16]
100627ec:	1808      	adds	r0, r1, r0
100627ee:	2194      	movs	r1, #148	@ 0x94
100627f0:	5a42      	ldrh	r2, [r0, r1]
100627f2:	1c52      	adds	r2, r2, #1
100627f4:	5242      	strh	r2, [r0, r1]
100627f6:	a80e      	add	r0, sp, #56	@ 0x38
100627f8:	2501      	movs	r5, #1
100627fa:	7605      	strb	r5, [r0, #24]
100627fc:	68a0      	ldr	r0, [r4, #8]
100627fe:	3408      	adds	r4, #8
10062800:	2300      	movs	r3, #0
10062802:	e0b9      	b.n	10062978 <llc_conn_isr+0x2ec>
10062804:	6820      	ldr	r0, [r4, #0]
10062806:	f7ee f92e 	bl	10050a66 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1006280a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1006280c:	7a11      	ldrb	r1, [r2, #8]
1006280e:	094b      	lsrs	r3, r1, #5
10062810:	2501      	movs	r5, #1
10062812:	4629      	mov	r1, r5
10062814:	4399      	bics	r1, r3
10062816:	ab0e      	add	r3, sp, #56	@ 0x38
10062818:	7699      	strb	r1, [r3, #26]
1006281a:	9005      	str	r0, [sp, #20]
1006281c:	900e      	str	r0, [sp, #56]	@ 0x38
1006281e:	6820      	ldr	r0, [r4, #0]
10062820:	4614      	mov	r4, r2
10062822:	3408      	adds	r4, #8
10062824:	f7ee f8bf 	bl	100509a6 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
10062828:	2800      	cmp	r0, #0
1006282a:	d06e      	beq.n	1006290a <llc_conn_isr+0x27e>
1006282c:	7820      	ldrb	r0, [r4, #0]
1006282e:	06c0      	lsls	r0, r0, #27
10062830:	9704      	str	r7, [sp, #16]
10062832:	d479      	bmi.n	10062928 <llc_conn_isr+0x29c>
10062834:	f7ee f87d 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062838:	6820      	ldr	r0, [r4, #0]
1006283a:	2110      	movs	r1, #16
1006283c:	4301      	orrs	r1, r0
1006283e:	6021      	str	r1, [r4, #0]
10062840:	e076      	b.n	10062930 <llc_conn_isr+0x2a4>
10062842:	9807      	ldr	r0, [sp, #28]
10062844:	6840      	ldr	r0, [r0, #4]
10062846:	9005      	str	r0, [sp, #20]
10062848:	f7ed f8c7 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
1006284c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1006284e:	1a08      	subs	r0, r1, r0
10062850:	9905      	ldr	r1, [sp, #20]
10062852:	1840      	adds	r0, r0, r1
10062854:	d402      	bmi.n	1006285c <llc_conn_isr+0x1d0>
10062856:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10062858:	4288      	cmp	r0, r1
1006285a:	d203      	bcs.n	10062864 <llc_conn_isr+0x1d8>
1006285c:	f7ed f8fe 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
10062860:	2001      	movs	r0, #1
10062862:	9006      	str	r0, [sp, #24]
10062864:	4638      	mov	r0, r7
10062866:	f7f4 ff22 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
1006286a:	2802      	cmp	r0, #2
1006286c:	d13d      	bne.n	100628ea <llc_conn_isr+0x25e>
1006286e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10062870:	6940      	ldr	r0, [r0, #20]
10062872:	6800      	ldr	r0, [r0, #0]
10062874:	06c1      	lsls	r1, r0, #27
10062876:	d415      	bmi.n	100628a4 <llc_conn_isr+0x218>
10062878:	0640      	lsls	r0, r0, #25
1006287a:	d536      	bpl.n	100628ea <llc_conn_isr+0x25e>
1006287c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006287e:	7d40      	ldrb	r0, [r0, #21]
10062880:	f7ee fac5 	bl	10050e0e <BLEPLAT_CNTR_SmEncOff>
10062884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10062886:	6958      	ldr	r0, [r3, #20]
10062888:	6801      	ldr	r1, [r0, #0]
1006288a:	2240      	movs	r2, #64	@ 0x40
1006288c:	4391      	bics	r1, r2
1006288e:	6001      	str	r1, [r0, #0]
10062890:	6898      	ldr	r0, [r3, #8]
10062892:	2108      	movs	r1, #8
10062894:	4388      	bics	r0, r1
10062896:	6098      	str	r0, [r3, #8]
10062898:	2012      	movs	r0, #18
1006289a:	f7fd f869 	bl	1005f970 <tsk_notify_idx>
1006289e:	f7ec fa10 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
100628a2:	e022      	b.n	100628ea <llc_conn_isr+0x25e>
100628a4:	9505      	str	r5, [sp, #20]
100628a6:	2000      	movs	r0, #0
100628a8:	900f      	str	r0, [sp, #60]	@ 0x3c
100628aa:	900e      	str	r0, [sp, #56]	@ 0x38
100628ac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100628ae:	7d68      	ldrb	r0, [r5, #21]
100628b0:	f7ee fac1 	bl	10050e36 <BLEPLAT_CNTR_SmEncOn>
100628b4:	7d68      	ldrb	r0, [r5, #21]
100628b6:	a90e      	add	r1, sp, #56	@ 0x38
100628b8:	f7ee fc8e 	bl	100511d8 <BLEPLAT_CNTR_SmSetRxCount>
100628bc:	7828      	ldrb	r0, [r5, #0]
100628be:	2803      	cmp	r0, #3
100628c0:	d103      	bne.n	100628ca <llc_conn_isr+0x23e>
100628c2:	980d      	ldr	r0, [sp, #52]	@ 0x34
100628c4:	7d40      	ldrb	r0, [r0, #21]
100628c6:	f7ee fcaa 	bl	1005121e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
100628ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100628cc:	6958      	ldr	r0, [r3, #20]
100628ce:	6801      	ldr	r1, [r0, #0]
100628d0:	2210      	movs	r2, #16
100628d2:	4391      	bics	r1, r2
100628d4:	6001      	str	r1, [r0, #0]
100628d6:	6898      	ldr	r0, [r3, #8]
100628d8:	2108      	movs	r1, #8
100628da:	4301      	orrs	r1, r0
100628dc:	6099      	str	r1, [r3, #8]
100628de:	2012      	movs	r0, #18
100628e0:	f7fd f846 	bl	1005f970 <tsk_notify_idx>
100628e4:	f7ec f9ed 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
100628e8:	9d05      	ldr	r5, [sp, #20]
100628ea:	42a5      	cmp	r5, r4
100628ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
100628ee:	d001      	beq.n	100628f4 <llc_conn_isr+0x268>
100628f0:	8a88      	ldrh	r0, [r1, #20]
100628f2:	82c8      	strh	r0, [r1, #22]
100628f4:	9806      	ldr	r0, [sp, #24]
100628f6:	2800      	cmp	r0, #0
100628f8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100628fa:	d000      	beq.n	100628fe <llc_conn_isr+0x272>
100628fc:	e136      	b.n	10062b6c <__arm_cp.0_5+0xec>
100628fe:	9807      	ldr	r0, [sp, #28]
10062900:	6801      	ldr	r1, [r0, #0]
10062902:	4630      	mov	r0, r6
10062904:	f7ee fa4b 	bl	10050d9e <BLEPLAT_CNTR_SetRcvLen>
10062908:	e135      	b.n	10062b76 <__arm_cp.0_5+0xf6>
1006290a:	485b      	ldr	r0, [pc, #364]	@ (10062a78 <__arm_cp.0_3>)
1006290c:	6800      	ldr	r0, [r0, #0]
1006290e:	f7ee f862 	bl	100509d6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>
10062912:	2800      	cmp	r0, #0
10062914:	d026      	beq.n	10062964 <llc_conn_isr+0x2d8>
10062916:	9805      	ldr	r0, [sp, #20]
10062918:	2800      	cmp	r0, #0
1006291a:	d023      	beq.n	10062964 <llc_conn_isr+0x2d8>
1006291c:	f7ed f89e 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
10062920:	a80e      	add	r0, sp, #56	@ 0x38
10062922:	233d      	movs	r3, #61	@ 0x3d
10062924:	7783      	strb	r3, [r0, #30]
10062926:	e023      	b.n	10062970 <llc_conn_isr+0x2e4>
10062928:	f7ed f898 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
1006292c:	a80e      	add	r0, sp, #56	@ 0x38
1006292e:	7605      	strb	r5, [r0, #24]
10062930:	4637      	mov	r7, r6
10062932:	980a      	ldr	r0, [sp, #40]	@ 0x28
10062934:	68c0      	ldr	r0, [r0, #12]
10062936:	2800      	cmp	r0, #0
10062938:	d002      	beq.n	10062940 <llc_conn_isr+0x2b4>
1006293a:	8841      	ldrh	r1, [r0, #2]
1006293c:	1c49      	adds	r1, r1, #1
1006293e:	8041      	strh	r1, [r0, #2]
10062940:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10062942:	6930      	ldr	r0, [r6, #16]
10062944:	2800      	cmp	r0, #0
10062946:	d00a      	beq.n	1006295e <llc_conn_isr+0x2d2>
10062948:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006294a:	7d40      	ldrb	r0, [r0, #21]
1006294c:	f7ee fb20 	bl	10050f90 <BLEPLAT_CNTR_SmGetRemapChan>
10062950:	0040      	lsls	r0, r0, #1
10062952:	6931      	ldr	r1, [r6, #16]
10062954:	1808      	adds	r0, r1, r0
10062956:	214a      	movs	r1, #74	@ 0x4a
10062958:	5a42      	ldrh	r2, [r0, r1]
1006295a:	1c52      	adds	r2, r2, #1
1006295c:	5242      	strh	r2, [r0, r1]
1006295e:	463b      	mov	r3, r7
10062960:	9f04      	ldr	r7, [sp, #16]
10062962:	e005      	b.n	10062970 <llc_conn_isr+0x2e4>
10062964:	6820      	ldr	r0, [r4, #0]
10062966:	2110      	movs	r1, #16
10062968:	4388      	bics	r0, r1
1006296a:	6020      	str	r0, [r4, #0]
1006296c:	2300      	movs	r3, #0
1006296e:	461d      	mov	r5, r3
10062970:	9e06      	ldr	r6, [sp, #24]
10062972:	6821      	ldr	r1, [r4, #0]
10062974:	2020      	movs	r0, #32
10062976:	4308      	orrs	r0, r1
10062978:	4271      	negs	r1, r6
1006297a:	4171      	adcs	r1, r6
1006297c:	0189      	lsls	r1, r1, #6
1006297e:	2240      	movs	r2, #64	@ 0x40
10062980:	4390      	bics	r0, r2
10062982:	1840      	adds	r0, r0, r1
10062984:	940c      	str	r4, [sp, #48]	@ 0x30
10062986:	6020      	str	r0, [r4, #0]
10062988:	2d00      	cmp	r5, #0
1006298a:	d025      	beq.n	100629d8 <llc_conn_isr+0x34c>
1006298c:	a80e      	add	r0, sp, #56	@ 0x38
1006298e:	7f80      	ldrb	r0, [r0, #30]
10062990:	2800      	cmp	r0, #0
10062992:	d169      	bne.n	10062a68 <llc_conn_isr+0x3dc>
10062994:	a80e      	add	r0, sp, #56	@ 0x38
10062996:	7ec0      	ldrb	r0, [r0, #27]
10062998:	2800      	cmp	r0, #0
1006299a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006299c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1006299e:	d000      	beq.n	100629a2 <llc_conn_isr+0x316>
100629a0:	e0dc      	b.n	10062b5c <__arm_cp.0_5+0xdc>
100629a2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100629a4:	2800      	cmp	r0, #0
100629a6:	d100      	bne.n	100629aa <llc_conn_isr+0x31e>
100629a8:	e0b6      	b.n	10062b18 <__arm_cp.0_5+0x98>
100629aa:	4e34      	ldr	r6, [pc, #208]	@ (10062a7c <__arm_cp.0_3+0x4>)
100629ac:	6830      	ldr	r0, [r6, #0]
100629ae:	21d8      	movs	r1, #216	@ 0xd8
100629b0:	5c41      	ldrb	r1, [r0, r1]
100629b2:	2901      	cmp	r1, #1
100629b4:	d14b      	bne.n	10062a4e <llc_conn_isr+0x3c2>
100629b6:	6805      	ldr	r5, [r0, #0]
100629b8:	f7e9 fa00 	bl	1004bdbc <phy_upd_csr_ucfg>
100629bc:	2801      	cmp	r0, #1
100629be:	d000      	beq.n	100629c2 <llc_conn_isr+0x336>
100629c0:	e094      	b.n	10062aec <__arm_cp.0_5+0x6c>
100629c2:	7920      	ldrb	r0, [r4, #4]
100629c4:	210e      	movs	r1, #14
100629c6:	4341      	muls	r1, r0
100629c8:	6830      	ldr	r0, [r6, #0]
100629ca:	229c      	movs	r2, #156	@ 0x9c
100629cc:	5880      	ldr	r0, [r0, r2]
100629ce:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100629d0:	6940      	ldr	r0, [r0, #20]
100629d2:	1840      	adds	r0, r0, r1
100629d4:	79c0      	ldrb	r0, [r0, #7]
100629d6:	e08a      	b.n	10062aee <__arm_cp.0_5+0x6e>
100629d8:	461c      	mov	r4, r3
100629da:	9202      	str	r2, [sp, #8]
100629dc:	4638      	mov	r0, r7
100629de:	3014      	adds	r0, #20
100629e0:	f7ee f895 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
100629e4:	4605      	mov	r5, r0
100629e6:	9011      	str	r0, [sp, #68]	@ 0x44
100629e8:	7801      	ldrb	r1, [r0, #0]
100629ea:	2003      	movs	r0, #3
100629ec:	4001      	ands	r1, r0
100629ee:	ae0e      	add	r6, sp, #56	@ 0x38
100629f0:	9103      	str	r1, [sp, #12]
100629f2:	7571      	strb	r1, [r6, #21]
100629f4:	7829      	ldrb	r1, [r5, #0]
100629f6:	0689      	lsls	r1, r1, #26
100629f8:	d400      	bmi.n	100629fc <llc_conn_isr+0x370>
100629fa:	2002      	movs	r0, #2
100629fc:	5c28      	ldrb	r0, [r5, r0]
100629fe:	75f0      	strb	r0, [r6, #23]
10062a00:	f7f6 f9b6 	bl	10058d70 <ll_cpe_get_cpid_from_opcode>
10062a04:	7530      	strb	r0, [r6, #20]
10062a06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
10062a08:	6679      	str	r1, [r7, #100]	@ 0x64
10062a0a:	2301      	movs	r3, #1
10062a0c:	9906      	ldr	r1, [sp, #24]
10062a0e:	2900      	cmp	r1, #0
10062a10:	d009      	beq.n	10062a26 <llc_conn_isr+0x39a>
10062a12:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062a14:	6809      	ldr	r1, [r1, #0]
10062a16:	4019      	ands	r1, r3
10062a18:	d005      	beq.n	10062a26 <llc_conn_isr+0x39a>
10062a1a:	2616      	movs	r6, #22
10062a1c:	f7ed f81e 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
10062a20:	a80e      	add	r0, sp, #56	@ 0x38
10062a22:	7786      	strb	r6, [r0, #30]
10062a24:	e020      	b.n	10062a68 <llc_conn_isr+0x3dc>
10062a26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10062a28:	6949      	ldr	r1, [r1, #20]
10062a2a:	7849      	ldrb	r1, [r1, #1]
10062a2c:	07c9      	lsls	r1, r1, #31
10062a2e:	9a05      	ldr	r2, [sp, #20]
10062a30:	d018      	beq.n	10062a64 <llc_conn_isr+0x3d8>
10062a32:	2a00      	cmp	r2, #0
10062a34:	d016      	beq.n	10062a64 <llc_conn_isr+0x3d8>
10062a36:	9903      	ldr	r1, [sp, #12]
10062a38:	2903      	cmp	r1, #3
10062a3a:	d10e      	bne.n	10062a5a <llc_conn_isr+0x3ce>
10062a3c:	263d      	movs	r6, #61	@ 0x3d
10062a3e:	2814      	cmp	r0, #20
10062a40:	d8ec      	bhi.n	10062a1c <llc_conn_isr+0x390>
10062a42:	4619      	mov	r1, r3
10062a44:	4081      	lsls	r1, r0
10062a46:	480e      	ldr	r0, [pc, #56]	@ (10062a80 <__arm_cp.0_5>)
10062a48:	4201      	tst	r1, r0
10062a4a:	d10b      	bne.n	10062a64 <llc_conn_isr+0x3d8>
10062a4c:	e7e6      	b.n	10062a1c <llc_conn_isr+0x390>
10062a4e:	f7ed f805 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
10062a52:	a80e      	add	r0, sp, #56	@ 0x38
10062a54:	2101      	movs	r1, #1
10062a56:	7601      	strb	r1, [r0, #24]
10062a58:	e05d      	b.n	10062b16 <__arm_cp.0_5+0x96>
10062a5a:	7868      	ldrb	r0, [r5, #1]
10062a5c:	2800      	cmp	r0, #0
10062a5e:	d001      	beq.n	10062a64 <llc_conn_isr+0x3d8>
10062a60:	263d      	movs	r6, #61	@ 0x3d
10062a62:	e7db      	b.n	10062a1c <llc_conn_isr+0x390>
10062a64:	2c00      	cmp	r4, #0
10062a66:	d00d      	beq.n	10062a84 <__arm_cp.0_5+0x4>
10062a68:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10062a6a:	7d60      	ldrb	r0, [r4, #21]
10062a6c:	f7fa ffba 	bl	1005d9e4 <LL_sched_delete_taskslot>
10062a70:	a80e      	add	r0, sp, #56	@ 0x38
10062a72:	7f80      	ldrb	r0, [r0, #30]
10062a74:	7060      	strb	r0, [r4, #1]
10062a76:	e07c      	b.n	10062b72 <__arm_cp.0_5+0xf2>

10062a78 <__arm_cp.0_3>:
10062a78:	20000f1c 	.word	0x20000f1c
10062a7c:	20000f20 	.word	0x20000f20

10062a80 <__arm_cp.0_5>:
10062a80:	00100012 	.word	0x00100012
10062a84:	9301      	str	r3, [sp, #4]
10062a86:	4638      	mov	r0, r7
10062a88:	4614      	mov	r4, r2
10062a8a:	f7ee f840 	bl	10050b0e <BLEPLAT_CNTR_PacketGetDataPtr>
10062a8e:	4606      	mov	r6, r0
10062a90:	a80e      	add	r0, sp, #56	@ 0x38
10062a92:	2100      	movs	r1, #0
10062a94:	7701      	strb	r1, [r0, #28]
10062a96:	7641      	strb	r1, [r0, #25]
10062a98:	9612      	str	r6, [sp, #72]	@ 0x48
10062a9a:	9106      	str	r1, [sp, #24]
10062a9c:	9110      	str	r1, [sp, #64]	@ 0x40
10062a9e:	2c00      	cmp	r4, #0
10062aa0:	980d      	ldr	r0, [sp, #52]	@ 0x34
10062aa2:	d100      	bne.n	10062aa6 <__arm_cp.0_5+0x26>
10062aa4:	e147      	b.n	10062d36 <__arm_cp.0_5+0x2b6>
10062aa6:	7800      	ldrb	r0, [r0, #0]
10062aa8:	2802      	cmp	r0, #2
10062aaa:	d113      	bne.n	10062ad4 <__arm_cp.0_5+0x54>
10062aac:	7828      	ldrb	r0, [r5, #0]
10062aae:	7831      	ldrb	r1, [r6, #0]
10062ab0:	4301      	orrs	r1, r0
10062ab2:	06c8      	lsls	r0, r1, #27
10062ab4:	d509      	bpl.n	10062aca <__arm_cp.0_5+0x4a>
10062ab6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
10062ab8:	f7ec ff8f 	bl	1004f9da <BLEPLAT_GetCurrentSysTime>
10062abc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
10062abe:	1a08      	subs	r0, r1, r0
10062ac0:	1900      	adds	r0, r0, r4
10062ac2:	d402      	bmi.n	10062aca <__arm_cp.0_5+0x4a>
10062ac4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10062ac6:	4288      	cmp	r0, r1
10062ac8:	d204      	bcs.n	10062ad4 <__arm_cp.0_5+0x54>
10062aca:	f7ec ffc7 	bl	1004fa5c <BLEPLAT_ClearRadioTimerValue>
10062ace:	a80e      	add	r0, sp, #56	@ 0x38
10062ad0:	2101      	movs	r1, #1
10062ad2:	7601      	strb	r1, [r0, #24]
10062ad4:	786c      	ldrb	r4, [r5, #1]
10062ad6:	2c00      	cmp	r4, #0
10062ad8:	d100      	bne.n	10062adc <__arm_cp.0_5+0x5c>
10062ada:	e12c      	b.n	10062d36 <__arm_cp.0_5+0x2b6>
10062adc:	980c      	ldr	r0, [sp, #48]	@ 0x30
10062ade:	6800      	ldr	r0, [r0, #0]
10062ae0:	2608      	movs	r6, #8
10062ae2:	4006      	ands	r6, r0
10062ae4:	d000      	beq.n	10062ae8 <__arm_cp.0_5+0x68>
10062ae6:	e095      	b.n	10062c14 <__arm_cp.0_5+0x194>
10062ae8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10062aea:	e0aa      	b.n	10062c42 <__arm_cp.0_5+0x1c2>
10062aec:	2001      	movs	r0, #1
10062aee:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
10062af0:	f7ee fc8b 	bl	1005140a <BLEPLAT_CNTR_DemodDelaySt>
10062af4:	1a28      	subs	r0, r5, r0
10062af6:	6478      	str	r0, [r7, #68]	@ 0x44
10062af8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
10062afa:	1b89      	subs	r1, r1, r6
10062afc:	1808      	adds	r0, r1, r0
10062afe:	9a07      	ldr	r2, [sp, #28]
10062b00:	6851      	ldr	r1, [r2, #4]
10062b02:	4281      	cmp	r1, r0
10062b04:	d901      	bls.n	10062b0a <__arm_cp.0_5+0x8a>
10062b06:	1a08      	subs	r0, r1, r0
10062b08:	6050      	str	r0, [r2, #4]
10062b0a:	2000      	movs	r0, #0
10062b0c:	64b8      	str	r0, [r7, #72]	@ 0x48
10062b0e:	6378      	str	r0, [r7, #52]	@ 0x34
10062b10:	4638      	mov	r0, r7
10062b12:	f7f5 fe97 	bl	10058844 <llc_conn_update_receive_window>
10062b16:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10062b18:	a80e      	add	r0, sp, #56	@ 0x38
10062b1a:	7e80      	ldrb	r0, [r0, #26]
10062b1c:	2801      	cmp	r0, #1
10062b1e:	d102      	bne.n	10062b26 <__arm_cp.0_5+0xa6>
10062b20:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10062b22:	6678      	str	r0, [r7, #100]	@ 0x64
10062b24:	e004      	b.n	10062b30 <__arm_cp.0_5+0xb0>
10062b26:	2011      	movs	r0, #17
10062b28:	f7fc ff22 	bl	1005f970 <tsk_notify_idx>
10062b2c:	f7ec f8c9 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062b30:	980a      	ldr	r0, [sp, #40]	@ 0x28
10062b32:	68c0      	ldr	r0, [r0, #12]
10062b34:	2800      	cmp	r0, #0
10062b36:	d002      	beq.n	10062b3e <__arm_cp.0_5+0xbe>
10062b38:	8801      	ldrh	r1, [r0, #0]
10062b3a:	1c49      	adds	r1, r1, #1
10062b3c:	8001      	strh	r1, [r0, #0]
10062b3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10062b40:	6930      	ldr	r0, [r6, #16]
10062b42:	2800      	cmp	r0, #0
10062b44:	d007      	beq.n	10062b56 <__arm_cp.0_5+0xd6>
10062b46:	7d60      	ldrb	r0, [r4, #21]
10062b48:	f7ee fa22 	bl	10050f90 <BLEPLAT_CNTR_SmGetRemapChan>
10062b4c:	0040      	lsls	r0, r0, #1
10062b4e:	6931      	ldr	r1, [r6, #16]
10062b50:	5a0a      	ldrh	r2, [r1, r0]
10062b52:	1c52      	adds	r2, r2, #1
10062b54:	520a      	strh	r2, [r1, r0]
10062b56:	7920      	ldrb	r0, [r4, #4]
10062b58:	f7f8 faf0 	bl	1005b13c <LLC_pcl_incr_rx_packets_ucfg_weak>
10062b5c:	a80e      	add	r0, sp, #56	@ 0x38
10062b5e:	7e00      	ldrb	r0, [r0, #24]
10062b60:	2801      	cmp	r0, #1
10062b62:	d108      	bne.n	10062b76 <__arm_cp.0_5+0xf6>
10062b64:	6828      	ldr	r0, [r5, #0]
10062b66:	2110      	movs	r1, #16
10062b68:	4388      	bics	r0, r1
10062b6a:	6028      	str	r0, [r5, #0]
10062b6c:	4638      	mov	r0, r7
10062b6e:	f000 fa82 	bl	10063076 <llc_conn_close_event>
10062b72:	2601      	movs	r6, #1
10062b74:	e000      	b.n	10062b78 <__arm_cp.0_5+0xf8>
10062b76:	2600      	movs	r6, #0
10062b78:	7d65      	ldrb	r5, [r4, #21]
10062b7a:	4628      	mov	r0, r5
10062b7c:	f7ee f9f7 	bl	10050f6e <BLEPLAT_CNTR_SmGetMode>
10062b80:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062b82:	6809      	ldr	r1, [r1, #0]
10062b84:	2800      	cmp	r0, #0
10062b86:	d005      	beq.n	10062b94 <__arm_cp.0_5+0x114>
10062b88:	0748      	lsls	r0, r1, #29
10062b8a:	d405      	bmi.n	10062b98 <__arm_cp.0_5+0x118>
10062b8c:	4628      	mov	r0, r5
10062b8e:	f7ee f93e 	bl	10050e0e <BLEPLAT_CNTR_SmEncOff>
10062b92:	e004      	b.n	10062b9e <__arm_cp.0_5+0x11e>
10062b94:	0708      	lsls	r0, r1, #28
10062b96:	d5f9      	bpl.n	10062b8c <__arm_cp.0_5+0x10c>
10062b98:	4628      	mov	r0, r5
10062b9a:	f7ee f94c 	bl	10050e36 <BLEPLAT_CNTR_SmEncOn>
10062b9e:	2e00      	cmp	r6, #0
10062ba0:	d01d      	beq.n	10062bde <__arm_cp.0_5+0x15e>
10062ba2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10062ba4:	69e5      	ldr	r5, [r4, #28]
10062ba6:	2d00      	cmp	r5, #0
10062ba8:	d015      	beq.n	10062bd6 <__arm_cp.0_5+0x156>
10062baa:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10062bac:	7d70      	ldrb	r0, [r6, #21]
10062bae:	f7ee f9b9 	bl	10050f24 <BLEPLAT_CNTR_SmGetEncKeyPtr>
10062bb2:	4602      	mov	r2, r0
10062bb4:	4629      	mov	r1, r5
10062bb6:	3110      	adds	r1, #16
10062bb8:	2301      	movs	r3, #1
10062bba:	4628      	mov	r0, r5
10062bbc:	f7fd f9ee 	bl	1005ff9c <BLEPLAT_aes128_encrypt>
10062bc0:	7d70      	ldrb	r0, [r6, #21]
10062bc2:	f7ee f99b 	bl	10050efc <BLEPLAT_CNTR_SmGetEncIvPtr>
10062bc6:	4601      	mov	r1, r0
10062bc8:	3520      	adds	r5, #32
10062bca:	2208      	movs	r2, #8
10062bcc:	4628      	mov	r0, r5
10062bce:	f7fd f857 	bl	1005fc80 <char_copy>
10062bd2:	2000      	movs	r0, #0
10062bd4:	61e0      	str	r0, [r4, #28]
10062bd6:	9808      	ldr	r0, [sp, #32]
10062bd8:	f7fa fd14 	bl	1005d604 <LL_sched_engine>
10062bdc:	e001      	b.n	10062be2 <__arm_cp.0_5+0x162>
10062bde:	f7ed fea8 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
10062be4:	2800      	cmp	r0, #0
10062be6:	d10c      	bne.n	10062c02 <__arm_cp.0_5+0x182>
10062be8:	f7ec feef 	bl	1004f9ca <BLEPLAT_CalculateRSSI>
10062bec:	287f      	cmp	r0, #127	@ 0x7f
10062bee:	d005      	beq.n	10062bfc <__arm_cp.0_5+0x17c>
10062bf0:	4605      	mov	r5, r0
10062bf2:	f7fa fc05 	bl	1005d400 <get_rf_rx_path_compensation_db>
10062bf6:	1828      	adds	r0, r5, r0
10062bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
10062bfa:	7008      	strb	r0, [r1, #0]
10062bfc:	4638      	mov	r0, r7
10062bfe:	f7f8 fa9e 	bl	1005b13e <LLC_pcl_update_avg_rssi_ucfg_weak>
10062c02:	2401      	movs	r4, #1
10062c04:	4620      	mov	r0, r4
10062c06:	f7fc fedb 	bl	1005f9c0 <tsk_signal_resource_idx>
10062c0a:	f7ec f85a 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062c0e:	4620      	mov	r0, r4
10062c10:	b019      	add	sp, #100	@ 0x64
10062c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062c14:	f7f3 fdb2 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10062c18:	2801      	cmp	r0, #1
10062c1a:	d001      	beq.n	10062c20 <__arm_cp.0_5+0x1a0>
10062c1c:	201c      	movs	r0, #28
10062c1e:	e000      	b.n	10062c22 <__arm_cp.0_5+0x1a2>
10062c20:	20fc      	movs	r0, #252	@ 0xfc
10062c22:	4220      	tst	r0, r4
10062c24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10062c26:	d00c      	beq.n	10062c42 <__arm_cp.0_5+0x1c2>
10062c28:	7868      	ldrb	r0, [r5, #1]
10062c2a:	1f00      	subs	r0, r0, #4
10062c2c:	7068      	strb	r0, [r5, #1]
10062c2e:	2002      	movs	r0, #2
10062c30:	71a0      	strb	r0, [r4, #6]
10062c32:	2012      	movs	r0, #18
10062c34:	f7fc fe9c 	bl	1005f970 <tsk_notify_idx>
10062c38:	f7ec f843 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062c3c:	a80e      	add	r0, sp, #56	@ 0x38
10062c3e:	7d40      	ldrb	r0, [r0, #21]
10062c40:	9003      	str	r0, [sp, #12]
10062c42:	9803      	ldr	r0, [sp, #12]
10062c44:	2803      	cmp	r0, #3
10062c46:	d110      	bne.n	10062c6a <__arm_cp.0_5+0x1ea>
10062c48:	a80e      	add	r0, sp, #56	@ 0x38
10062c4a:	7dc5      	ldrb	r5, [r0, #23]
10062c4c:	2d02      	cmp	r5, #2
10062c4e:	d117      	bne.n	10062c80 <__arm_cp.0_5+0x200>
10062c50:	9811      	ldr	r0, [sp, #68]	@ 0x44
10062c52:	7840      	ldrb	r0, [r0, #1]
10062c54:	2802      	cmp	r0, #2
10062c56:	d113      	bne.n	10062c80 <__arm_cp.0_5+0x200>
10062c58:	a80e      	add	r0, sp, #56	@ 0x38
10062c5a:	2101      	movs	r1, #1
10062c5c:	7701      	strb	r1, [r0, #28]
10062c5e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10062c60:	6828      	ldr	r0, [r5, #0]
10062c62:	2102      	movs	r1, #2
10062c64:	4301      	orrs	r1, r0
10062c66:	6029      	str	r1, [r5, #0]
10062c68:	e042      	b.n	10062cf0 <__arm_cp.0_5+0x270>
10062c6a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10062c6c:	7800      	ldrb	r0, [r0, #0]
10062c6e:	2803      	cmp	r0, #3
10062c70:	d117      	bne.n	10062ca2 <__arm_cp.0_5+0x222>
10062c72:	7a20      	ldrb	r0, [r4, #8]
10062c74:	2800      	cmp	r0, #0
10062c76:	d014      	beq.n	10062ca2 <__arm_cp.0_5+0x222>
10062c78:	2002      	movs	r0, #2
10062c7a:	9910      	ldr	r1, [sp, #64]	@ 0x40
10062c7c:	4301      	orrs	r1, r0
10062c7e:	e04a      	b.n	10062d16 <__arm_cp.0_5+0x296>
10062c80:	4638      	mov	r0, r7
10062c82:	f7f4 fd02 	bl	1005768a <llc_conn_get_rx_ctrl_pdu_full>
10062c86:	2800      	cmp	r0, #0
10062c88:	d021      	beq.n	10062cce <__arm_cp.0_5+0x24e>
10062c8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10062c8c:	7d40      	ldrb	r0, [r0, #21]
10062c8e:	f7ee fbad 	bl	100513ec <BLEPLAT_CNTR_SmToggleNesn>
10062c92:	2e00      	cmp	r6, #0
10062c94:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10062c96:	d02b      	beq.n	10062cf0 <__arm_cp.0_5+0x270>
10062c98:	980d      	ldr	r0, [sp, #52]	@ 0x34
10062c9a:	7d40      	ldrb	r0, [r0, #21]
10062c9c:	f000 fa61 	bl	10063162 <llc_conn_decrement_enc_count_rx>
10062ca0:	e026      	b.n	10062cf0 <__arm_cp.0_5+0x270>
10062ca2:	9811      	ldr	r0, [sp, #68]	@ 0x44
10062ca4:	7846      	ldrb	r6, [r0, #1]
10062ca6:	f7f3 fd69 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10062caa:	2801      	cmp	r0, #1
10062cac:	d001      	beq.n	10062cb2 <__arm_cp.0_5+0x232>
10062cae:	251f      	movs	r5, #31
10062cb0:	e001      	b.n	10062cb6 <__arm_cp.0_5+0x236>
10062cb2:	9806      	ldr	r0, [sp, #24]
10062cb4:	43c5      	mvns	r5, r0
10062cb6:	4035      	ands	r5, r6
10062cb8:	0628      	lsls	r0, r5, #24
10062cba:	d01e      	beq.n	10062cfa <__arm_cp.0_5+0x27a>
10062cbc:	9806      	ldr	r0, [sp, #24]
10062cbe:	67b8      	str	r0, [r7, #120]	@ 0x78
10062cc0:	f7ef f86c 	bl	10051d9c <isr_Acl_Data_Indication_Queue_Full>
10062cc4:	2800      	cmp	r0, #0
10062cc6:	d01b      	beq.n	10062d00 <__arm_cp.0_5+0x280>
10062cc8:	2002      	movs	r0, #2
10062cca:	9010      	str	r0, [sp, #64]	@ 0x40
10062ccc:	e026      	b.n	10062d1c <__arm_cp.0_5+0x29c>
10062cce:	980d      	ldr	r0, [sp, #52]	@ 0x34
10062cd0:	7800      	ldrb	r0, [r0, #0]
10062cd2:	2803      	cmp	r0, #3
10062cd4:	d108      	bne.n	10062ce8 <__arm_cp.0_5+0x268>
10062cd6:	2d27      	cmp	r5, #39	@ 0x27
10062cd8:	d106      	bne.n	10062ce8 <__arm_cp.0_5+0x268>
10062cda:	9811      	ldr	r0, [sp, #68]	@ 0x44
10062cdc:	7840      	ldrb	r0, [r0, #1]
10062cde:	280b      	cmp	r0, #11
10062ce0:	d102      	bne.n	10062ce8 <__arm_cp.0_5+0x268>
10062ce2:	a80e      	add	r0, sp, #56	@ 0x38
10062ce4:	2101      	movs	r1, #1
10062ce6:	7741      	strb	r1, [r0, #29]
10062ce8:	a80e      	add	r0, sp, #56	@ 0x38
10062cea:	2101      	movs	r1, #1
10062cec:	7641      	strb	r1, [r0, #25]
10062cee:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10062cf0:	6828      	ldr	r0, [r5, #0]
10062cf2:	2180      	movs	r1, #128	@ 0x80
10062cf4:	4301      	orrs	r1, r0
10062cf6:	6029      	str	r1, [r5, #0]
10062cf8:	e014      	b.n	10062d24 <__arm_cp.0_5+0x2a4>
10062cfa:	9806      	ldr	r0, [sp, #24]
10062cfc:	9010      	str	r0, [sp, #64]	@ 0x40
10062cfe:	e011      	b.n	10062d24 <__arm_cp.0_5+0x2a4>
10062d00:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
10062d02:	b2ea      	uxtb	r2, r5
10062d04:	9801      	ldr	r0, [sp, #4]
10062d06:	f7ef f913 	bl	10051f30 <ACL_pkt_get>
10062d0a:	67b8      	str	r0, [r7, #120]	@ 0x78
10062d0c:	2800      	cmp	r0, #0
10062d0e:	d001      	beq.n	10062d14 <__arm_cp.0_5+0x294>
10062d10:	9901      	ldr	r1, [sp, #4]
10062d12:	e000      	b.n	10062d16 <__arm_cp.0_5+0x296>
10062d14:	2102      	movs	r1, #2
10062d16:	9110      	str	r1, [sp, #64]	@ 0x40
10062d18:	0788      	lsls	r0, r1, #30
10062d1a:	d503      	bpl.n	10062d24 <__arm_cp.0_5+0x2a4>
10062d1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
10062d1e:	7d40      	ldrb	r0, [r0, #21]
10062d20:	f7ee fb64 	bl	100513ec <BLEPLAT_CNTR_SmToggleNesn>
10062d24:	9811      	ldr	r0, [sp, #68]	@ 0x44
10062d26:	7800      	ldrb	r0, [r0, #0]
10062d28:	8aa1      	ldrh	r1, [r4, #20]
10062d2a:	82e1      	strh	r1, [r4, #22]
10062d2c:	2120      	movs	r1, #32
10062d2e:	4001      	ands	r1, r0
10062d30:	a80e      	add	r0, sp, #56	@ 0x38
10062d32:	7581      	strb	r1, [r0, #22]
10062d34:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10062d36:	2101      	movs	r1, #1
10062d38:	4638      	mov	r0, r7
10062d3a:	9105      	str	r1, [sp, #20]
10062d3c:	f7f4 fc8a 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10062d40:	4605      	mov	r5, r0
10062d42:	463b      	mov	r3, r7
10062d44:	3328      	adds	r3, #40	@ 0x28
10062d46:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10062d48:	6801      	ldr	r1, [r0, #0]
10062d4a:	2900      	cmp	r1, #0
10062d4c:	d011      	beq.n	10062d72 <__arm_cp.0_5+0x2f2>
10062d4e:	7a08      	ldrb	r0, [r1, #8]
10062d50:	0700      	lsls	r0, r0, #28
10062d52:	d50e      	bpl.n	10062d72 <__arm_cp.0_5+0x2f2>
10062d54:	69c8      	ldr	r0, [r1, #28]
10062d56:	2800      	cmp	r0, #0
10062d58:	d00b      	beq.n	10062d72 <__arm_cp.0_5+0x2f2>
10062d5a:	42ae      	cmp	r6, r5
10062d5c:	d009      	beq.n	10062d72 <__arm_cp.0_5+0x2f2>
10062d5e:	429e      	cmp	r6, r3
10062d60:	d007      	beq.n	10062d72 <__arm_cp.0_5+0x2f2>
10062d62:	460c      	mov	r4, r1
10062d64:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062d66:	6808      	ldr	r0, [r1, #0]
10062d68:	9a02      	ldr	r2, [sp, #8]
10062d6a:	4390      	bics	r0, r2
10062d6c:	6008      	str	r0, [r1, #0]
10062d6e:	4621      	mov	r1, r4
10062d70:	e003      	b.n	10062d7a <__arm_cp.0_5+0x2fa>
10062d72:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10062d74:	2800      	cmp	r0, #0
10062d76:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10062d78:	d017      	beq.n	10062daa <__arm_cp.0_5+0x32a>
10062d7a:	42ae      	cmp	r6, r5
10062d7c:	9303      	str	r3, [sp, #12]
10062d7e:	d018      	beq.n	10062db2 <__arm_cp.0_5+0x332>
10062d80:	429e      	cmp	r6, r3
10062d82:	d025      	beq.n	10062dd0 <__arm_cp.0_5+0x350>
10062d84:	6948      	ldr	r0, [r1, #20]
10062d86:	6188      	str	r0, [r1, #24]
10062d88:	460e      	mov	r6, r1
10062d8a:	7b09      	ldrb	r1, [r1, #12]
10062d8c:	9d06      	ldr	r5, [sp, #24]
10062d8e:	7335      	strb	r5, [r6, #12]
10062d90:	8a32      	ldrh	r2, [r6, #16]
10062d92:	1851      	adds	r1, r2, r1
10062d94:	8231      	strh	r1, [r6, #16]
10062d96:	b28a      	uxth	r2, r1
10062d98:	8873      	ldrh	r3, [r6, #2]
10062d9a:	429a      	cmp	r2, r3
10062d9c:	d21a      	bcs.n	10062dd4 <__arm_cp.0_5+0x354>
10062d9e:	89f2      	ldrh	r2, [r6, #14]
10062da0:	1851      	adds	r1, r2, r1
10062da2:	06c9      	lsls	r1, r1, #27
10062da4:	d019      	beq.n	10062dda <__arm_cp.0_5+0x35a>
10062da6:	4634      	mov	r4, r6
10062da8:	e01a      	b.n	10062de0 <__arm_cp.0_5+0x360>
10062daa:	f7ed fdc2 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062dae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10062db0:	e0e3      	b.n	10062f7a <__arm_cp.0_5+0x4fa>
10062db2:	460c      	mov	r4, r1
10062db4:	2103      	movs	r1, #3
10062db6:	4638      	mov	r0, r7
10062db8:	f7f4 ff14 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
10062dbc:	4638      	mov	r0, r7
10062dbe:	f7ed fe80 	bl	10050ac2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
10062dc2:	78a8      	ldrb	r0, [r5, #2]
10062dc4:	2827      	cmp	r0, #39	@ 0x27
10062dc6:	d10e      	bne.n	10062de6 <__arm_cp.0_5+0x366>
10062dc8:	a80e      	add	r0, sp, #56	@ 0x38
10062dca:	2101      	movs	r1, #1
10062dcc:	7741      	strb	r1, [r0, #29]
10062dce:	e00a      	b.n	10062de6 <__arm_cp.0_5+0x366>
10062dd0:	460c      	mov	r4, r1
10062dd2:	e008      	b.n	10062de6 <__arm_cp.0_5+0x366>
10062dd4:	69f4      	ldr	r4, [r6, #28]
10062dd6:	2504      	movs	r5, #4
10062dd8:	e002      	b.n	10062de0 <__arm_cp.0_5+0x360>
10062dda:	6800      	ldr	r0, [r0, #0]
10062ddc:	4634      	mov	r4, r6
10062dde:	61b0      	str	r0, [r6, #24]
10062de0:	9810      	ldr	r0, [sp, #64]	@ 0x40
10062de2:	4328      	orrs	r0, r5
10062de4:	9010      	str	r0, [sp, #64]	@ 0x40
10062de6:	4638      	mov	r0, r7
10062de8:	f7f4 fc5b 	bl	100576a2 <llc_conn_get_tx_acl_blocked>
10062dec:	4605      	mov	r5, r0
10062dee:	4638      	mov	r0, r7
10062df0:	f7f4 fc5d 	bl	100576ae <llc_conn_get_tx_ctrl_pdu_state>
10062df4:	a90e      	add	r1, sp, #56	@ 0x38
10062df6:	7f0e      	ldrb	r6, [r1, #28]
10062df8:	2e00      	cmp	r6, #0
10062dfa:	d124      	bne.n	10062e46 <__arm_cp.0_5+0x3c6>
10062dfc:	2801      	cmp	r0, #1
10062dfe:	d122      	bne.n	10062e46 <__arm_cp.0_5+0x3c6>
10062e00:	2101      	movs	r1, #1
10062e02:	4638      	mov	r0, r7
10062e04:	9106      	str	r1, [sp, #24]
10062e06:	f7f4 fc25 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10062e0a:	4606      	mov	r6, r0
10062e0c:	4638      	mov	r0, r7
10062e0e:	4631      	mov	r1, r6
10062e10:	f7ed febf 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
10062e14:	4632      	mov	r2, r6
10062e16:	7830      	ldrb	r0, [r6, #0]
10062e18:	0680      	lsls	r0, r0, #26
10062e1a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10062e1c:	d421      	bmi.n	10062e62 <__arm_cp.0_5+0x3e2>
10062e1e:	7890      	ldrb	r0, [r2, #2]
10062e20:	2827      	cmp	r0, #39	@ 0x27
10062e22:	d04c      	beq.n	10062ebe <__arm_cp.0_5+0x43e>
10062e24:	4615      	mov	r5, r2
10062e26:	2802      	cmp	r0, #2
10062e28:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10062e2a:	d152      	bne.n	10062ed2 <__arm_cp.0_5+0x452>
10062e2c:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062e2e:	6808      	ldr	r0, [r1, #0]
10062e30:	9a06      	ldr	r2, [sp, #24]
10062e32:	4310      	orrs	r0, r2
10062e34:	6008      	str	r0, [r1, #0]
10062e36:	7d60      	ldrb	r0, [r4, #21]
10062e38:	211f      	movs	r1, #31
10062e3a:	460a      	mov	r2, r1
10062e3c:	f7fa fda8 	bl	1005d990 <LL_sched_set_priority>
10062e40:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10062e42:	6738      	str	r0, [r7, #112]	@ 0x70
10062e44:	e045      	b.n	10062ed2 <__arm_cp.0_5+0x452>
10062e46:	f7ee ffb7 	bl	10051db8 <isr_Acl_Data_TX_Cmpl_Queue_Full>
10062e4a:	2800      	cmp	r0, #0
10062e4c:	d018      	beq.n	10062e80 <__arm_cp.0_5+0x400>
10062e4e:	f7ed fd70 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062e52:	980e      	ldr	r0, [sp, #56]	@ 0x38
10062e54:	2800      	cmp	r0, #0
10062e56:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10062e58:	d009      	beq.n	10062e6e <__arm_cp.0_5+0x3ee>
10062e5a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10062e5c:	9903      	ldr	r1, [sp, #12]
10062e5e:	9805      	ldr	r0, [sp, #20]
10062e60:	e008      	b.n	10062e74 <__arm_cp.0_5+0x3f4>
10062e62:	4615      	mov	r5, r2
10062e64:	4638      	mov	r0, r7
10062e66:	f7ed fe87 	bl	10050b78 <BLEPLAT_CNTR_PacketSetCteSamplingEn>
10062e6a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10062e6c:	e031      	b.n	10062ed2 <__arm_cp.0_5+0x452>
10062e6e:	2011      	movs	r0, #17
10062e70:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10062e72:	9903      	ldr	r1, [sp, #12]
10062e74:	8538      	strh	r0, [r7, #40]	@ 0x28
10062e76:	4638      	mov	r0, r7
10062e78:	460d      	mov	r5, r1
10062e7a:	f7ed fe8a 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
10062e7e:	e071      	b.n	10062f64 <__arm_cp.0_5+0x4e4>
10062e80:	2c00      	cmp	r4, #0
10062e82:	d0e4      	beq.n	10062e4e <__arm_cp.0_5+0x3ce>
10062e84:	2d01      	cmp	r5, #1
10062e86:	d0e2      	beq.n	10062e4e <__arm_cp.0_5+0x3ce>
10062e88:	2e01      	cmp	r6, #1
10062e8a:	d0e0      	beq.n	10062e4e <__arm_cp.0_5+0x3ce>
10062e8c:	f7ed fd51 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062e90:	4877      	ldr	r0, [pc, #476]	@ (10063070 <__arm_cp.0_2>)
10062e92:	6800      	ldr	r0, [r0, #0]
10062e94:	218c      	movs	r1, #140	@ 0x8c
10062e96:	5840      	ldr	r0, [r0, r1]
10062e98:	8a21      	ldrh	r1, [r4, #16]
10062e9a:	89e2      	ldrh	r2, [r4, #14]
10062e9c:	1851      	adds	r1, r2, r1
10062e9e:	221f      	movs	r2, #31
10062ea0:	400a      	ands	r2, r1
10062ea2:	1810      	adds	r0, r2, r0
10062ea4:	1c81      	adds	r1, r0, #2
10062ea6:	4638      	mov	r0, r7
10062ea8:	460d      	mov	r5, r1
10062eaa:	f7ed fe72 	bl	10050b92 <BLEPLAT_CNTR_PacketSetDataPtr>
10062eae:	4638      	mov	r0, r7
10062eb0:	4621      	mov	r1, r4
10062eb2:	f7f4 fb23 	bl	100574fc <llc_conn_copy_tx_data_packet>
10062eb6:	67fc      	str	r4, [r7, #124]	@ 0x7c
10062eb8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10062eba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10062ebc:	e052      	b.n	10062f64 <__arm_cp.0_5+0x4e4>
10062ebe:	990d      	ldr	r1, [sp, #52]	@ 0x34
10062ec0:	7d88      	ldrb	r0, [r1, #22]
10062ec2:	7150      	strb	r0, [r2, #5]
10062ec4:	7dc8      	ldrb	r0, [r1, #23]
10062ec6:	4615      	mov	r5, r2
10062ec8:	7190      	strb	r0, [r2, #6]
10062eca:	2000      	movs	r0, #0
10062ecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10062ece:	8290      	strh	r0, [r2, #20]
10062ed0:	460c      	mov	r4, r1
10062ed2:	6970      	ldr	r0, [r6, #20]
10062ed4:	6800      	ldr	r0, [r0, #0]
10062ed6:	0701      	lsls	r1, r0, #28
10062ed8:	d415      	bmi.n	10062f06 <__arm_cp.0_5+0x486>
10062eda:	0680      	lsls	r0, r0, #26
10062edc:	d510      	bpl.n	10062f00 <__arm_cp.0_5+0x480>
10062ede:	7d60      	ldrb	r0, [r4, #21]
10062ee0:	f7ed ff95 	bl	10050e0e <BLEPLAT_CNTR_SmEncOff>
10062ee4:	6970      	ldr	r0, [r6, #20]
10062ee6:	6801      	ldr	r1, [r0, #0]
10062ee8:	2220      	movs	r2, #32
10062eea:	4391      	bics	r1, r2
10062eec:	6001      	str	r1, [r0, #0]
10062eee:	68b0      	ldr	r0, [r6, #8]
10062ef0:	2104      	movs	r1, #4
10062ef2:	4388      	bics	r0, r1
10062ef4:	60b0      	str	r0, [r6, #8]
10062ef6:	2012      	movs	r0, #18
10062ef8:	f7fc fd3a 	bl	1005f970 <tsk_notify_idx>
10062efc:	f7eb fee1 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062f00:	f7ed fd17 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062f04:	e01f      	b.n	10062f46 <__arm_cp.0_5+0x4c6>
10062f06:	2000      	movs	r0, #0
10062f08:	9017      	str	r0, [sp, #92]	@ 0x5c
10062f0a:	9016      	str	r0, [sp, #88]	@ 0x58
10062f0c:	7d60      	ldrb	r0, [r4, #21]
10062f0e:	f7ed ff92 	bl	10050e36 <BLEPLAT_CNTR_SmEncOn>
10062f12:	7d60      	ldrb	r0, [r4, #21]
10062f14:	a916      	add	r1, sp, #88	@ 0x58
10062f16:	f7ee f9d3 	bl	100512c0 <BLEPLAT_CNTR_SmSetTxCount>
10062f1a:	7820      	ldrb	r0, [r4, #0]
10062f1c:	2802      	cmp	r0, #2
10062f1e:	d102      	bne.n	10062f26 <__arm_cp.0_5+0x4a6>
10062f20:	7d60      	ldrb	r0, [r4, #21]
10062f22:	f7ee f9e9 	bl	100512f8 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
10062f26:	f7ed fd04 	bl	10050932 <BLEPLAT_CNTR_GlobEnableBlue>
10062f2a:	6970      	ldr	r0, [r6, #20]
10062f2c:	6801      	ldr	r1, [r0, #0]
10062f2e:	2208      	movs	r2, #8
10062f30:	4391      	bics	r1, r2
10062f32:	6001      	str	r1, [r0, #0]
10062f34:	68b0      	ldr	r0, [r6, #8]
10062f36:	2104      	movs	r1, #4
10062f38:	4301      	orrs	r1, r0
10062f3a:	60b1      	str	r1, [r6, #8]
10062f3c:	2012      	movs	r0, #18
10062f3e:	f7fc fd17 	bl	1005f970 <tsk_notify_idx>
10062f42:	f7eb febe 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
10062f46:	2102      	movs	r1, #2
10062f48:	4638      	mov	r0, r7
10062f4a:	f7f4 fe4b 	bl	10057be4 <llc_conn_set_tx_ctrl_pdu_state>
10062f4e:	6970      	ldr	r0, [r6, #20]
10062f50:	6801      	ldr	r1, [r0, #0]
10062f52:	074a      	lsls	r2, r1, #29
10062f54:	d506      	bpl.n	10062f64 <__arm_cp.0_5+0x4e4>
10062f56:	2204      	movs	r2, #4
10062f58:	4391      	bics	r1, r2
10062f5a:	6001      	str	r1, [r0, #0]
10062f5c:	8b70      	ldrh	r0, [r6, #26]
10062f5e:	9906      	ldr	r1, [sp, #24]
10062f60:	4308      	orrs	r0, r1
10062f62:	8370      	strh	r0, [r6, #26]
10062f64:	2101      	movs	r1, #1
10062f66:	4638      	mov	r0, r7
10062f68:	f7f4 fb7a 	bl	10057660 <llc_conn_get_enc_on>
10062f6c:	2801      	cmp	r0, #1
10062f6e:	d104      	bne.n	10062f7a <__arm_cp.0_5+0x4fa>
10062f70:	7868      	ldrb	r0, [r5, #1]
10062f72:	2800      	cmp	r0, #0
10062f74:	d001      	beq.n	10062f7a <__arm_cp.0_5+0x4fa>
10062f76:	1d00      	adds	r0, r0, #4
10062f78:	7068      	strb	r0, [r5, #1]
10062f7a:	9810      	ldr	r0, [sp, #64]	@ 0x40
10062f7c:	0781      	lsls	r1, r0, #30
10062f7e:	d507      	bpl.n	10062f90 <__arm_cp.0_5+0x510>
10062f80:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062f82:	7809      	ldrb	r1, [r1, #0]
10062f84:	0709      	lsls	r1, r1, #28
10062f86:	d503      	bpl.n	10062f90 <__arm_cp.0_5+0x510>
10062f88:	7d60      	ldrb	r0, [r4, #21]
10062f8a:	f000 f8ea 	bl	10063162 <llc_conn_decrement_enc_count_rx>
10062f8e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10062f90:	0741      	lsls	r1, r0, #29
10062f92:	d505      	bpl.n	10062fa0 <__arm_cp.0_5+0x520>
10062f94:	4630      	mov	r0, r6
10062f96:	f7fc ff07 	bl	1005fda8 <ACL_list_remove_head>
10062f9a:	f7ee ff37 	bl	10051e0c <Acl_Tx_Cmpl_Pkt_Handler>
10062f9e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10062fa0:	07c0      	lsls	r0, r0, #31
10062fa2:	d01e      	beq.n	10062fe2 <__arm_cp.0_5+0x562>
10062fa4:	9811      	ldr	r0, [sp, #68]	@ 0x44
10062fa6:	7844      	ldrb	r4, [r0, #1]
10062fa8:	2600      	movs	r6, #0
10062faa:	f7f3 fbe7 	bl	1005677c <data_length_extension_csr_ucfg_weak>
10062fae:	2801      	cmp	r0, #1
10062fb0:	d001      	beq.n	10062fb6 <__arm_cp.0_5+0x536>
10062fb2:	251f      	movs	r5, #31
10062fb4:	e000      	b.n	10062fb8 <__arm_cp.0_5+0x538>
10062fb6:	43f5      	mvns	r5, r6
10062fb8:	4025      	ands	r5, r4
10062fba:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10062fbc:	6840      	ldr	r0, [r0, #4]
10062fbe:	9911      	ldr	r1, [sp, #68]	@ 0x44
10062fc0:	1c89      	adds	r1, r1, #2
10062fc2:	462a      	mov	r2, r5
10062fc4:	f7fb f87a 	bl	1005e0bc <Mem_Buff_block_write>
10062fc8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10062fca:	61c6      	str	r6, [r0, #28]
10062fcc:	8045      	strh	r5, [r0, #2]
10062fce:	9911      	ldr	r1, [sp, #68]	@ 0x44
10062fd0:	7809      	ldrb	r1, [r1, #0]
10062fd2:	2203      	movs	r2, #3
10062fd4:	400a      	ands	r2, r1
10062fd6:	7a01      	ldrb	r1, [r0, #8]
10062fd8:	4311      	orrs	r1, r2
10062fda:	7201      	strb	r1, [r0, #8]
10062fdc:	f7ee fefa 	bl	10051dd4 <Acl_Rcv_Pkt_Handler>
10062fe0:	67be      	str	r6, [r7, #120]	@ 0x78
10062fe2:	a80e      	add	r0, sp, #56	@ 0x38
10062fe4:	7e40      	ldrb	r0, [r0, #25]
10062fe6:	2801      	cmp	r0, #1
10062fe8:	d131      	bne.n	1006304e <__arm_cp.0_5+0x5ce>
10062fea:	2100      	movs	r1, #0
10062fec:	4638      	mov	r0, r7
10062fee:	f7f4 fb31 	bl	10057654 <llc_conn_get_ctrl_pdu_data_p>
10062ff2:	4605      	mov	r5, r0
10062ff4:	9811      	ldr	r0, [sp, #68]	@ 0x44
10062ff6:	7801      	ldrb	r1, [r0, #0]
10062ff8:	7840      	ldrb	r0, [r0, #1]
10062ffa:	0200      	lsls	r0, r0, #8
10062ffc:	1840      	adds	r0, r0, r1
10062ffe:	8028      	strh	r0, [r5, #0]
10063000:	f7f5 fe0a 	bl	10058c18 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10063004:	4606      	mov	r6, r0
10063006:	f7f5 fdfd 	bl	10058c04 <cis_csr_ucfg_weak>
1006300a:	4330      	orrs	r0, r6
1006300c:	b2c0      	uxtb	r0, r0
1006300e:	f7fa fa13 	bl	1005d438 <LL_get_control_pdu_size>
10063012:	a90e      	add	r1, sp, #56	@ 0x38
10063014:	7d89      	ldrb	r1, [r1, #22]
10063016:	2920      	cmp	r1, #32
10063018:	d001      	beq.n	1006301e <__arm_cp.0_5+0x59e>
1006301a:	2102      	movs	r1, #2
1006301c:	e000      	b.n	10063020 <__arm_cp.0_5+0x5a0>
1006301e:	2103      	movs	r1, #3
10063020:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10063022:	1851      	adds	r1, r2, r1
10063024:	1f00      	subs	r0, r0, #4
10063026:	b2c3      	uxtb	r3, r0
10063028:	7852      	ldrb	r2, [r2, #1]
1006302a:	429a      	cmp	r2, r3
1006302c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
1006302e:	d300      	bcc.n	10063032 <__arm_cp.0_5+0x5b2>
10063030:	4602      	mov	r2, r0
10063032:	b2d2      	uxtb	r2, r2
10063034:	1ca8      	adds	r0, r5, #2
10063036:	f7ec fc05 	bl	1004f844 <BLEPLAT_MemCpy>
1006303a:	6920      	ldr	r0, [r4, #16]
1006303c:	6801      	ldr	r1, [r0, #0]
1006303e:	2201      	movs	r2, #1
10063040:	430a      	orrs	r2, r1
10063042:	6002      	str	r2, [r0, #0]
10063044:	2015      	movs	r0, #21
10063046:	f7fc fc93 	bl	1005f970 <tsk_notify_idx>
1006304a:	f7eb fe3a 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1006304e:	ad0e      	add	r5, sp, #56	@ 0x38
10063050:	4638      	mov	r0, r7
10063052:	4629      	mov	r1, r5
10063054:	f000 f80e 	bl	10063074 <llc_conn_check_subrate_and_set_params_ucfg_weak>
10063058:	7da8      	ldrb	r0, [r5, #22]
1006305a:	2820      	cmp	r0, #32
1006305c:	d000      	beq.n	10063060 <__arm_cp.0_5+0x5e0>
1006305e:	e495      	b.n	1006298c <llc_conn_isr+0x300>
10063060:	9811      	ldr	r0, [sp, #68]	@ 0x44
10063062:	7880      	ldrb	r0, [r0, #2]
10063064:	0981      	lsrs	r1, r0, #6
10063066:	4638      	mov	r0, r7
10063068:	f7f7 f953 	bl	1005a312 <llc_cte_process_rx_cte_ucfg_weak>
1006306c:	e48e      	b.n	1006298c <llc_conn_isr+0x300>
1006306e:	46c0      	nop			@ (mov r8, r8)

10063070 <__arm_cp.0_2>:
10063070:	20000f20 	.word	0x20000f20

10063074 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10063074:	4770      	bx	lr

10063076 <llc_conn_close_event>:
10063076:	b5f0      	push	{r4, r5, r6, r7, lr}
10063078:	b085      	sub	sp, #20
1006307a:	4605      	mov	r5, r0
1006307c:	2045      	movs	r0, #69	@ 0x45
1006307e:	0080      	lsls	r0, r0, #2
10063080:	9003      	str	r0, [sp, #12]
10063082:	5828      	ldr	r0, [r5, r0]
10063084:	462e      	mov	r6, r5
10063086:	3642      	adds	r6, #66	@ 0x42
10063088:	2800      	cmp	r0, #0
1006308a:	d002      	beq.n	10063092 <llc_conn_close_event+0x1c>
1006308c:	8881      	ldrh	r1, [r0, #4]
1006308e:	1c49      	adds	r1, r1, #1
10063090:	8081      	strh	r1, [r0, #4]
10063092:	462c      	mov	r4, r5
10063094:	3480      	adds	r4, #128	@ 0x80
10063096:	4628      	mov	r0, r5
10063098:	f7f5 fe51 	bl	10058d3e <llc_subrate_update_cont_counter_ucfg_weak>
1006309c:	6c68      	ldr	r0, [r5, #68]	@ 0x44
1006309e:	9002      	str	r0, [sp, #8]
100630a0:	8837      	ldrh	r7, [r6, #0]
100630a2:	4628      	mov	r0, r5
100630a4:	f7f4 fa70 	bl	10057588 <llc_conn_enhanced_get_latency>
100630a8:	4602      	mov	r2, r0
100630aa:	4628      	mov	r0, r5
100630ac:	4639      	mov	r1, r7
100630ae:	f7f4 fdaa 	bl	10057c06 <llc_conn_calc_skip_ucfg_weak>
100630b2:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
100630b4:	4342      	muls	r2, r0
100630b6:	6c69      	ldr	r1, [r5, #68]	@ 0x44
100630b8:	1889      	adds	r1, r1, r2
100630ba:	6469      	str	r1, [r5, #68]	@ 0x44
100630bc:	9001      	str	r0, [sp, #4]
100630be:	1838      	adds	r0, r7, r0
100630c0:	9004      	str	r0, [sp, #16]
100630c2:	b287      	uxth	r7, r0
100630c4:	8830      	ldrh	r0, [r6, #0]
100630c6:	42b8      	cmp	r0, r7
100630c8:	d907      	bls.n	100630da <llc_conn_close_event+0x64>
100630ca:	9803      	ldr	r0, [sp, #12]
100630cc:	1828      	adds	r0, r5, r0
100630ce:	2109      	movs	r1, #9
100630d0:	0149      	lsls	r1, r1, #5
100630d2:	1869      	adds	r1, r5, r1
100630d4:	89c0      	ldrh	r0, [r0, #14]
100630d6:	f7f5 fe31 	bl	10058d3c <llc_subrate_new_sr_base_event_ucfg_weak>
100630da:	68a0      	ldr	r0, [r4, #8]
100630dc:	2180      	movs	r1, #128	@ 0x80
100630de:	4388      	bics	r0, r1
100630e0:	60a0      	str	r0, [r4, #8]
100630e2:	4628      	mov	r0, r5
100630e4:	4639      	mov	r1, r7
100630e6:	f7f4 fe31 	bl	10057d4c <llc_conn_check_instant_and_set_params>
100630ea:	4607      	mov	r7, r0
100630ec:	9804      	ldr	r0, [sp, #16]
100630ee:	8030      	strh	r0, [r6, #0]
100630f0:	2f00      	cmp	r7, #0
100630f2:	d118      	bne.n	10063126 <llc_conn_close_event+0xb0>
100630f4:	6c68      	ldr	r0, [r5, #68]	@ 0x44
100630f6:	9902      	ldr	r1, [sp, #8]
100630f8:	1a46      	subs	r6, r0, r1
100630fa:	4628      	mov	r0, r5
100630fc:	4631      	mov	r1, r6
100630fe:	f7f4 feb9 	bl	10057e74 <llc_conn_check_supervision_timer>
10063102:	4607      	mov	r7, r0
10063104:	2800      	cmp	r0, #0
10063106:	d10e      	bne.n	10063126 <llc_conn_close_event+0xb0>
10063108:	4628      	mov	r0, r5
1006310a:	4631      	mov	r1, r6
1006310c:	f7f4 fde8 	bl	10057ce0 <llc_conn_check_ctrl_proc_rsp_timer>
10063110:	4607      	mov	r7, r0
10063112:	2800      	cmp	r0, #0
10063114:	d107      	bne.n	10063126 <llc_conn_close_event+0xb0>
10063116:	4628      	mov	r0, r5
10063118:	4631      	mov	r1, r6
1006311a:	9a01      	ldr	r2, [sp, #4]
1006311c:	f7f5 fb1c 	bl	10058758 <llc_conn_set_taskslot_params>
10063120:	4607      	mov	r7, r0
10063122:	2800      	cmp	r0, #0
10063124:	d006      	beq.n	10063134 <llc_conn_close_event+0xbe>
10063126:	352d      	adds	r5, #45	@ 0x2d
10063128:	7d28      	ldrb	r0, [r5, #20]
1006312a:	f7fa fc5b 	bl	1005d9e4 <LL_sched_delete_taskslot>
1006312e:	702f      	strb	r7, [r5, #0]
10063130:	2000      	movs	r0, #0
10063132:	8360      	strh	r0, [r4, #26]
10063134:	6820      	ldr	r0, [r4, #0]
10063136:	2800      	cmp	r0, #0
10063138:	d001      	beq.n	1006313e <llc_conn_close_event+0xc8>
1006313a:	69c6      	ldr	r6, [r0, #28]
1006313c:	e00d      	b.n	1006315a <llc_conn_close_event+0xe4>
1006313e:	2600      	movs	r6, #0
10063140:	e00b      	b.n	1006315a <llc_conn_close_event+0xe4>
10063142:	4635      	mov	r5, r6
10063144:	69f6      	ldr	r6, [r6, #28]
10063146:	7a28      	ldrb	r0, [r5, #8]
10063148:	0700      	lsls	r0, r0, #28
1006314a:	d506      	bpl.n	1006315a <llc_conn_close_event+0xe4>
1006314c:	4620      	mov	r0, r4
1006314e:	4629      	mov	r1, r5
10063150:	f7fc fe14 	bl	1005fd7c <ACL_list_remove>
10063154:	4628      	mov	r0, r5
10063156:	f7ee ff0d 	bl	10051f74 <ACL_pkt_release>
1006315a:	2e00      	cmp	r6, #0
1006315c:	d1f1      	bne.n	10063142 <llc_conn_close_event+0xcc>
1006315e:	b005      	add	sp, #20
10063160:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063162 <llc_conn_decrement_enc_count_rx>:
10063162:	b51c      	push	{r2, r3, r4, lr}
10063164:	4604      	mov	r4, r0
10063166:	4669      	mov	r1, sp
10063168:	f7ed ff23 	bl	10050fb2 <BLEPLAT_CNTR_SmGetRxCount>
1006316c:	9800      	ldr	r0, [sp, #0]
1006316e:	1e41      	subs	r1, r0, #1
10063170:	9100      	str	r1, [sp, #0]
10063172:	2800      	cmp	r0, #0
10063174:	d102      	bne.n	1006317c <llc_conn_decrement_enc_count_rx+0x1a>
10063176:	9801      	ldr	r0, [sp, #4]
10063178:	1e40      	subs	r0, r0, #1
1006317a:	9001      	str	r0, [sp, #4]
1006317c:	4669      	mov	r1, sp
1006317e:	4620      	mov	r0, r4
10063180:	f7ee f82a 	bl	100511d8 <BLEPLAT_CNTR_SmSetRxCount>
10063184:	bd1c      	pop	{r2, r3, r4, pc}
	...

10063188 <llc_check_sreq_or_creq_tx_addr_res_off>:
10063188:	b570      	push	{r4, r5, r6, lr}
1006318a:	b084      	sub	sp, #16
1006318c:	4615      	mov	r5, r2
1006318e:	460a      	mov	r2, r1
10063190:	4604      	mov	r4, r0
10063192:	2b00      	cmp	r3, #0
10063194:	d007      	beq.n	100631a6 <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
10063196:	980a      	ldr	r0, [sp, #40]	@ 0x28
10063198:	4282      	cmp	r2, r0
1006319a:	d11f      	bne.n	100631dc <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1006319c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006319e:	4068      	eors	r0, r5
100631a0:	0200      	lsls	r0, r0, #8
100631a2:	d11b      	bne.n	100631dc <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100631a4:	e01b      	b.n	100631de <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100631a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100631a8:	9908      	ldr	r1, [sp, #32]
100631aa:	2301      	movs	r3, #1
100631ac:	2900      	cmp	r1, #0
100631ae:	d002      	beq.n	100631b6 <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
100631b0:	4606      	mov	r6, r0
100631b2:	401e      	ands	r6, r3
100631b4:	d104      	bne.n	100631c0 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
100631b6:	2900      	cmp	r1, #0
100631b8:	d111      	bne.n	100631de <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100631ba:	2102      	movs	r1, #2
100631bc:	4008      	ands	r0, r1
100631be:	d00e      	beq.n	100631de <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100631c0:	4808      	ldr	r0, [pc, #32]	@ (100631e4 <__arm_cp.1_0>)
100631c2:	6800      	ldr	r0, [r0, #0]
100631c4:	219c      	movs	r1, #156	@ 0x9c
100631c6:	5841      	ldr	r1, [r0, r1]
100631c8:	68c8      	ldr	r0, [r1, #12]
100631ca:	6909      	ldr	r1, [r1, #16]
100631cc:	ae03      	add	r6, sp, #12
100631ce:	9300      	str	r3, [sp, #0]
100631d0:	9601      	str	r6, [sp, #4]
100631d2:	462b      	mov	r3, r5
100631d4:	f7fc fdfc 	bl	1005fdd0 <addr8_list_search>
100631d8:	2800      	cmp	r0, #0
100631da:	d100      	bne.n	100631de <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100631dc:	24ff      	movs	r4, #255	@ 0xff
100631de:	4620      	mov	r0, r4
100631e0:	b004      	add	sp, #16
100631e2:	bd70      	pop	{r4, r5, r6, pc}

100631e4 <__arm_cp.1_0>:
100631e4:	20000f20 	.word	0x20000f20

100631e8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
100631e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100631ea:	b087      	sub	sp, #28
100631ec:	1ecd      	subs	r5, r1, #3
100631ee:	21ff      	movs	r1, #255	@ 0xff
100631f0:	24fd      	movs	r4, #253	@ 0xfd
100631f2:	4225      	tst	r5, r4
100631f4:	d11c      	bne.n	10063230 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
100631f6:	2a00      	cmp	r2, #0
100631f8:	d01a      	beq.n	10063230 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
100631fa:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100631fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
100631fe:	680c      	ldr	r4, [r1, #0]
10063200:	9405      	str	r4, [sp, #20]
10063202:	9306      	str	r3, [sp, #24]
10063204:	684b      	ldr	r3, [r1, #4]
10063206:	c882      	ldmia	r0!, {r1, r7}
10063208:	20ff      	movs	r0, #255	@ 0xff
1006320a:	0600      	lsls	r0, r0, #24
1006320c:	463c      	mov	r4, r7
1006320e:	4384      	bics	r4, r0
10063210:	c612      	stmia	r6!, {r1, r4}
10063212:	9303      	str	r3, [sp, #12]
10063214:	9805      	ldr	r0, [sp, #20]
10063216:	9002      	str	r0, [sp, #8]
10063218:	9806      	ldr	r0, [sp, #24]
1006321a:	9001      	str	r0, [sp, #4]
1006321c:	4268      	negs	r0, r5
1006321e:	4168      	adcs	r0, r5
10063220:	9000      	str	r0, [sp, #0]
10063222:	b2c8      	uxtb	r0, r1
10063224:	0752      	lsls	r2, r2, #29
10063226:	0fd3      	lsrs	r3, r2, #31
10063228:	463a      	mov	r2, r7
1006322a:	f7ff ffad 	bl	10063188 <llc_check_sreq_or_creq_tx_addr_res_off>
1006322e:	4601      	mov	r1, r0
10063230:	4608      	mov	r0, r1
10063232:	b007      	add	sp, #28
10063234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10063238 <llc_wl_mem_allocate>:
10063238:	b510      	push	{r4, lr}
1006323a:	2401      	movs	r4, #1
1006323c:	4084      	lsls	r4, r0
1006323e:	2108      	movs	r1, #8
10063240:	4620      	mov	r0, r4
10063242:	f7fa fdbf 	bl	1005ddc4 <csmem_mem_0_assign>
10063246:	4903      	ldr	r1, [pc, #12]	@ (10063254 <__arm_cp.0_0>)
10063248:	6809      	ldr	r1, [r1, #0]
1006324a:	229c      	movs	r2, #156	@ 0x9c
1006324c:	5889      	ldr	r1, [r1, r2]
1006324e:	744c      	strb	r4, [r1, #17]
10063250:	60c8      	str	r0, [r1, #12]
10063252:	bd10      	pop	{r4, pc}

10063254 <__arm_cp.0_0>:
10063254:	20000f20 	.word	0x20000f20

10063258 <llc_padv_mem_allocate_ucfg_weak>:
10063258:	4770      	bx	lr

1006325a <llc_padv_init_ucfg_weak>:
1006325a:	4770      	bx	lr

1006325c <llc_past_mem_allocate_ucfg_weak>:
1006325c:	4770      	bx	lr
	...

10063260 <llc_priv_mem_allocate>:
10063260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063262:	2800      	cmp	r0, #0
10063264:	d046      	beq.n	100632f4 <llc_priv_mem_allocate+0x94>
10063266:	460e      	mov	r6, r1
10063268:	2501      	movs	r5, #1
1006326a:	2168      	movs	r1, #104	@ 0x68
1006326c:	4628      	mov	r0, r5
1006326e:	f7fa fda9 	bl	1005ddc4 <csmem_mem_0_assign>
10063272:	4f21      	ldr	r7, [pc, #132]	@ (100632f8 <__arm_cp.0_0>)
10063274:	6839      	ldr	r1, [r7, #0]
10063276:	249c      	movs	r4, #156	@ 0x9c
10063278:	5909      	ldr	r1, [r1, r4]
1006327a:	6088      	str	r0, [r1, #8]
1006327c:	40b5      	lsls	r5, r6
1006327e:	b2ee      	uxtb	r6, r5
10063280:	2108      	movs	r1, #8
10063282:	4630      	mov	r0, r6
10063284:	f7fa fd9e 	bl	1005ddc4 <csmem_mem_0_assign>
10063288:	6839      	ldr	r1, [r7, #0]
1006328a:	5909      	ldr	r1, [r1, r4]
1006328c:	6889      	ldr	r1, [r1, #8]
1006328e:	724d      	strb	r5, [r1, #9]
10063290:	6048      	str	r0, [r1, #4]
10063292:	9600      	str	r6, [sp, #0]
10063294:	0075      	lsls	r5, r6, #1
10063296:	2611      	movs	r6, #17
10063298:	2e21      	cmp	r6, #33	@ 0x21
1006329a:	d00f      	beq.n	100632bc <llc_priv_mem_allocate+0x5c>
1006329c:	2108      	movs	r1, #8
1006329e:	4628      	mov	r0, r5
100632a0:	f7fa fd90 	bl	1005ddc4 <csmem_mem_0_assign>
100632a4:	6839      	ldr	r1, [r7, #0]
100632a6:	5909      	ldr	r1, [r1, r4]
100632a8:	6889      	ldr	r1, [r1, #8]
100632aa:	1989      	adds	r1, r1, r6
100632ac:	1f49      	subs	r1, r1, #5
100632ae:	6008      	str	r0, [r1, #0]
100632b0:	6838      	ldr	r0, [r7, #0]
100632b2:	5900      	ldr	r0, [r0, r4]
100632b4:	6880      	ldr	r0, [r0, #8]
100632b6:	5585      	strb	r5, [r0, r6]
100632b8:	3608      	adds	r6, #8
100632ba:	e7ed      	b.n	10063298 <llc_priv_mem_allocate+0x38>
100632bc:	2128      	movs	r1, #40	@ 0x28
100632be:	9800      	ldr	r0, [sp, #0]
100632c0:	f7fa fd80 	bl	1005ddc4 <csmem_mem_0_assign>
100632c4:	6839      	ldr	r1, [r7, #0]
100632c6:	5909      	ldr	r1, [r1, r4]
100632c8:	6889      	ldr	r1, [r1, #8]
100632ca:	6008      	str	r0, [r1, #0]
100632cc:	480b      	ldr	r0, [pc, #44]	@ (100632fc <__arm_cp.0_1>)
100632ce:	2502      	movs	r5, #2
100632d0:	2601      	movs	r6, #1
100632d2:	4629      	mov	r1, r5
100632d4:	4632      	mov	r2, r6
100632d6:	f7fa fd63 	bl	1005dda0 <csmem_mem_assign>
100632da:	6839      	ldr	r1, [r7, #0]
100632dc:	5909      	ldr	r1, [r1, r4]
100632de:	6889      	ldr	r1, [r1, #8]
100632e0:	6488      	str	r0, [r1, #72]	@ 0x48
100632e2:	4806      	ldr	r0, [pc, #24]	@ (100632fc <__arm_cp.0_1>)
100632e4:	4631      	mov	r1, r6
100632e6:	462a      	mov	r2, r5
100632e8:	f7fa fd5a 	bl	1005dda0 <csmem_mem_assign>
100632ec:	6839      	ldr	r1, [r7, #0]
100632ee:	5909      	ldr	r1, [r1, r4]
100632f0:	6889      	ldr	r1, [r1, #8]
100632f2:	64c8      	str	r0, [r1, #76]	@ 0x4c
100632f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100632f6:	46c0      	nop			@ (mov r8, r8)

100632f8 <__arm_cp.0_0>:
100632f8:	20000f20 	.word	0x20000f20

100632fc <__arm_cp.0_1>:
100632fc:	20000f30 	.word	0x20000f30

10063300 <llc_pscan_isr_ucfg_weak>:
10063300:	2000      	movs	r0, #0
10063302:	4770      	bx	lr

10063304 <llc_scan_isr_uncoded_ucfg_weak>:
10063304:	2000      	movs	r0, #0
10063306:	4770      	bx	lr

10063308 <llc_scan_isr_coded_ucfg_weak>:
10063308:	2000      	movs	r0, #0
1006330a:	4770      	bx	lr

1006330c <smp_dep_gap_get_local_identity_address>:
1006330c:	b580      	push	{r7, lr}
1006330e:	4a0a      	ldr	r2, [pc, #40]	@ (10063338 <__arm_cp.0_0>)
10063310:	6812      	ldr	r2, [r2, #0]
10063312:	233d      	movs	r3, #61	@ 0x3d
10063314:	5cd2      	ldrb	r2, [r2, r3]
10063316:	7002      	strb	r2, [r0, #0]
10063318:	2a01      	cmp	r2, #1
1006331a:	d005      	beq.n	10063328 <smp_dep_gap_get_local_identity_address+0x1c>
1006331c:	2a00      	cmp	r2, #0
1006331e:	d108      	bne.n	10063332 <smp_dep_gap_get_local_identity_address+0x26>
10063320:	4608      	mov	r0, r1
10063322:	f7f0 f94f 	bl	100535c4 <GAP_get_public_address>
10063326:	e002      	b.n	1006332e <smp_dep_gap_get_local_identity_address+0x22>
10063328:	4608      	mov	r0, r1
1006332a:	f7f0 f955 	bl	100535d8 <GAP_get_static_random_address>
1006332e:	2000      	movs	r0, #0
10063330:	bd80      	pop	{r7, pc}
10063332:	2086      	movs	r0, #134	@ 0x86
10063334:	bd80      	pop	{r7, pc}
10063336:	46c0      	nop			@ (mov r8, r8)

10063338 <__arm_cp.0_0>:
10063338:	20000f6c 	.word	0x20000f6c

1006333c <smp_dep_l2c_send_acl_packet>:
1006333c:	b570      	push	{r4, r5, r6, lr}
1006333e:	460d      	mov	r5, r1
10063340:	4606      	mov	r6, r0
10063342:	2006      	movs	r0, #6
10063344:	f7f3 fc58 	bl	10056bf8 <L2C_send_frame>
10063348:	4604      	mov	r4, r0
1006334a:	2800      	cmp	r0, #0
1006334c:	d003      	beq.n	10063356 <smp_dep_l2c_send_acl_packet+0x1a>
1006334e:	4628      	mov	r0, r5
10063350:	f7ee fe10 	bl	10051f74 <ACL_pkt_release>
10063354:	e008      	b.n	10063368 <smp_dep_l2c_send_acl_packet+0x2c>
10063356:	8930      	ldrh	r0, [r6, #8]
10063358:	f001 f8de 	bl	10064518 <smp_get_remote_device_list_index>
1006335c:	4602      	mov	r2, r0
1006335e:	2000      	movs	r0, #0
10063360:	4b02      	ldr	r3, [pc, #8]	@ (1006336c <__arm_cp.0_0>)
10063362:	4601      	mov	r1, r0
10063364:	f7fb fda0 	bl	1005eea8 <smp_timer_reset>
10063368:	4620      	mov	r0, r4
1006336a:	bd70      	pop	{r4, r5, r6, pc}

1006336c <__arm_cp.0_0>:
1006336c:	00007530 	.word	0x00007530

10063370 <smp_dep_l2c_send_acl_short_pdu>:
10063370:	b5b0      	push	{r4, r5, r7, lr}
10063372:	461c      	mov	r4, r3
10063374:	4615      	mov	r5, r2
10063376:	2900      	cmp	r1, #0
10063378:	d107      	bne.n	1006338a <smp_dep_l2c_send_acl_short_pdu+0x1a>
1006337a:	8901      	ldrh	r1, [r0, #8]
1006337c:	2000      	movs	r0, #0
1006337e:	2206      	movs	r2, #6
10063380:	f7ee fdd6 	bl	10051f30 <ACL_pkt_get>
10063384:	4601      	mov	r1, r0
10063386:	2800      	cmp	r0, #0
10063388:	d009      	beq.n	1006339e <smp_dep_l2c_send_acl_short_pdu+0x2e>
1006338a:	2002      	movs	r0, #2
1006338c:	8048      	strh	r0, [r1, #2]
1006338e:	6848      	ldr	r0, [r1, #4]
10063390:	7205      	strb	r5, [r0, #8]
10063392:	6848      	ldr	r0, [r1, #4]
10063394:	7244      	strb	r4, [r0, #9]
10063396:	2006      	movs	r0, #6
10063398:	f7f3 fc2e 	bl	10056bf8 <L2C_send_frame>
1006339c:	bdb0      	pop	{r4, r5, r7, pc}
1006339e:	2088      	movs	r0, #136	@ 0x88
100633a0:	bdb0      	pop	{r4, r5, r7, pc}

100633a2 <smp_dep_sdb_get_bonding_records_count>:
100633a2:	b580      	push	{r7, lr}
100633a4:	f7fb f8dc 	bl	1005e560 <sdb_sap_get_security_records_count>
100633a8:	bd80      	pop	{r7, pc}

100633aa <smp_dep_sdb_add_bonding_record>:
100633aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100633ac:	b097      	sub	sp, #92	@ 0x5c
100633ae:	4604      	mov	r4, r0
100633b0:	ae03      	add	r6, sp, #12
100633b2:	2100      	movs	r1, #0
100633b4:	2250      	movs	r2, #80	@ 0x50
100633b6:	4630      	mov	r0, r6
100633b8:	f7ec fa54 	bl	1004f864 <BLEPLAT_MemSet>
100633bc:	2059      	movs	r0, #89	@ 0x59
100633be:	5c20      	ldrb	r0, [r4, r0]
100633c0:	7871      	ldrb	r1, [r6, #1]
100633c2:	4301      	orrs	r1, r0
100633c4:	7071      	strb	r1, [r6, #1]
100633c6:	4630      	mov	r0, r6
100633c8:	303e      	adds	r0, #62	@ 0x3e
100633ca:	4621      	mov	r1, r4
100633cc:	315a      	adds	r1, #90	@ 0x5a
100633ce:	2506      	movs	r5, #6
100633d0:	462a      	mov	r2, r5
100633d2:	f7ec fa37 	bl	1004f844 <BLEPLAT_MemCpy>
100633d6:	7c20      	ldrb	r0, [r4, #16]
100633d8:	70f0      	strb	r0, [r6, #3]
100633da:	7de0      	ldrb	r0, [r4, #23]
100633dc:	0701      	lsls	r1, r0, #28
100633de:	d416      	bmi.n	1006340e <smp_dep_sdb_add_bonding_record+0x64>
100633e0:	2011      	movs	r0, #17
100633e2:	5620      	ldrsb	r0, [r4, r0]
100633e4:	2800      	cmp	r0, #0
100633e6:	d504      	bpl.n	100633f2 <smp_dep_sdb_add_bonding_record+0x48>
100633e8:	a803      	add	r0, sp, #12
100633ea:	7841      	ldrb	r1, [r0, #1]
100633ec:	2280      	movs	r2, #128	@ 0x80
100633ee:	430a      	orrs	r2, r1
100633f0:	7042      	strb	r2, [r0, #1]
100633f2:	ae03      	add	r6, sp, #12
100633f4:	1d30      	adds	r0, r6, #4
100633f6:	4621      	mov	r1, r4
100633f8:	311e      	adds	r1, #30
100633fa:	2202      	movs	r2, #2
100633fc:	f7ec fa22 	bl	1004f844 <BLEPLAT_MemCpy>
10063400:	1db0      	adds	r0, r6, #6
10063402:	4621      	mov	r1, r4
10063404:	3120      	adds	r1, #32
10063406:	2208      	movs	r2, #8
10063408:	f7ec fa1c 	bl	1004f844 <BLEPLAT_MemCpy>
1006340c:	e003      	b.n	10063416 <smp_dep_sdb_add_bonding_record+0x6c>
1006340e:	21fe      	movs	r1, #254	@ 0xfe
10063410:	4008      	ands	r0, r1
10063412:	a903      	add	r1, sp, #12
10063414:	7088      	strb	r0, [r1, #2]
10063416:	a803      	add	r0, sp, #12
10063418:	300e      	adds	r0, #14
1006341a:	4621      	mov	r1, r4
1006341c:	3128      	adds	r1, #40	@ 0x28
1006341e:	2610      	movs	r6, #16
10063420:	4632      	mov	r2, r6
10063422:	f7ec fa0f 	bl	1004f844 <BLEPLAT_MemCpy>
10063426:	7c60      	ldrb	r0, [r4, #17]
10063428:	0681      	lsls	r1, r0, #26
1006342a:	d50c      	bpl.n	10063446 <smp_dep_sdb_add_bonding_record+0x9c>
1006342c:	af03      	add	r7, sp, #12
1006342e:	4638      	mov	r0, r7
10063430:	301e      	adds	r0, #30
10063432:	4621      	mov	r1, r4
10063434:	3138      	adds	r1, #56	@ 0x38
10063436:	2210      	movs	r2, #16
10063438:	f7ec fa04 	bl	1004f844 <BLEPLAT_MemCpy>
1006343c:	7878      	ldrb	r0, [r7, #1]
1006343e:	2120      	movs	r1, #32
10063440:	4301      	orrs	r1, r0
10063442:	7079      	strb	r1, [r7, #1]
10063444:	7c60      	ldrb	r0, [r4, #17]
10063446:	0640      	lsls	r0, r0, #25
10063448:	d50b      	bpl.n	10063462 <smp_dep_sdb_add_bonding_record+0xb8>
1006344a:	af03      	add	r7, sp, #12
1006344c:	4638      	mov	r0, r7
1006344e:	302e      	adds	r0, #46	@ 0x2e
10063450:	4621      	mov	r1, r4
10063452:	3148      	adds	r1, #72	@ 0x48
10063454:	2210      	movs	r2, #16
10063456:	f7ec f9f5 	bl	1004f844 <BLEPLAT_MemCpy>
1006345a:	7878      	ldrb	r0, [r7, #1]
1006345c:	2140      	movs	r1, #64	@ 0x40
1006345e:	4301      	orrs	r1, r0
10063460:	7079      	strb	r1, [r7, #1]
10063462:	7ca0      	ldrb	r0, [r4, #18]
10063464:	2105      	movs	r1, #5
10063466:	4208      	tst	r0, r1
10063468:	d00a      	beq.n	10063480 <smp_dep_sdb_add_bonding_record+0xd6>
1006346a:	af03      	add	r7, sp, #12
1006346c:	4638      	mov	r0, r7
1006346e:	3044      	adds	r0, #68	@ 0x44
10063470:	4621      	mov	r1, r4
10063472:	311c      	adds	r1, #28
10063474:	2202      	movs	r2, #2
10063476:	f7ec f9e5 	bl	1004f844 <BLEPLAT_MemCpy>
1006347a:	7878      	ldrb	r0, [r7, #1]
1006347c:	4330      	orrs	r0, r6
1006347e:	e001      	b.n	10063484 <smp_dep_sdb_add_bonding_record+0xda>
10063480:	a803      	add	r0, sp, #12
10063482:	7840      	ldrb	r0, [r0, #1]
10063484:	7ae1      	ldrb	r1, [r4, #11]
10063486:	4029      	ands	r1, r5
10063488:	4301      	orrs	r1, r0
1006348a:	a803      	add	r0, sp, #12
1006348c:	7041      	strb	r1, [r0, #1]
1006348e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
10063490:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
10063492:	9115      	str	r1, [sp, #84]	@ 0x54
10063494:	9216      	str	r2, [sp, #88]	@ 0x58
10063496:	f7fb f867 	bl	1005e568 <sdb_sap_add_security_record>
1006349a:	4605      	mov	r5, r0
1006349c:	2800      	cmp	r0, #0
1006349e:	d00c      	beq.n	100634ba <smp_dep_sdb_add_bonding_record+0x110>
100634a0:	1ca1      	adds	r1, r4, #2
100634a2:	ac01      	add	r4, sp, #4
100634a4:	2206      	movs	r2, #6
100634a6:	4620      	mov	r0, r4
100634a8:	f7ec f9cc 	bl	1004f844 <BLEPLAT_MemCpy>
100634ac:	71a5      	strb	r5, [r4, #6]
100634ae:	2042      	movs	r0, #66	@ 0x42
100634b0:	2105      	movs	r1, #5
100634b2:	2207      	movs	r2, #7
100634b4:	4623      	mov	r3, r4
100634b6:	f7fd fe51 	bl	1006115c <aci_hal_fw_error_event_push_noinline>
100634ba:	4628      	mov	r0, r5
100634bc:	b017      	add	sp, #92	@ 0x5c
100634be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100634c0 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
100634c0:	b570      	push	{r4, r5, r6, lr}
100634c2:	b094      	sub	sp, #80	@ 0x50
100634c4:	460e      	mov	r6, r1
100634c6:	4604      	mov	r4, r0
100634c8:	7841      	ldrb	r1, [r0, #1]
100634ca:	1c80      	adds	r0, r0, #2
100634cc:	466a      	mov	r2, sp
100634ce:	f7fb f86e 	bl	1005e5ae <sdb_sap_read_security_record>
100634d2:	4605      	mov	r5, r0
100634d4:	2e00      	cmp	r6, #0
100634d6:	d005      	beq.n	100634e4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100634d8:	2d00      	cmp	r5, #0
100634da:	d103      	bne.n	100634e4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100634dc:	4668      	mov	r0, sp
100634de:	4621      	mov	r1, r4
100634e0:	f000 f804 	bl	100634ec <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100634e4:	4628      	mov	r0, r5
100634e6:	b014      	add	sp, #80	@ 0x50
100634e8:	bd70      	pop	{r4, r5, r6, pc}
	...

100634ec <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
100634ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100634ee:	460c      	mov	r4, r1
100634f0:	4605      	mov	r5, r0
100634f2:	2001      	movs	r0, #1
100634f4:	7388      	strb	r0, [r1, #14]
100634f6:	78e8      	ldrb	r0, [r5, #3]
100634f8:	7408      	strb	r0, [r1, #16]
100634fa:	4608      	mov	r0, r1
100634fc:	301c      	adds	r0, #28
100634fe:	4629      	mov	r1, r5
10063500:	3144      	adds	r1, #68	@ 0x44
10063502:	2602      	movs	r6, #2
10063504:	4f19      	ldr	r7, [pc, #100]	@ (1006356c <__arm_cp.3_0>)
10063506:	4632      	mov	r2, r6
10063508:	47b8      	blx	r7
1006350a:	4620      	mov	r0, r4
1006350c:	301e      	adds	r0, #30
1006350e:	1d29      	adds	r1, r5, #4
10063510:	4632      	mov	r2, r6
10063512:	47b8      	blx	r7
10063514:	4620      	mov	r0, r4
10063516:	3020      	adds	r0, #32
10063518:	1da9      	adds	r1, r5, #6
1006351a:	2208      	movs	r2, #8
1006351c:	47b8      	blx	r7
1006351e:	4620      	mov	r0, r4
10063520:	3028      	adds	r0, #40	@ 0x28
10063522:	4629      	mov	r1, r5
10063524:	310e      	adds	r1, #14
10063526:	2610      	movs	r6, #16
10063528:	4632      	mov	r2, r6
1006352a:	47b8      	blx	r7
1006352c:	4620      	mov	r0, r4
1006352e:	3038      	adds	r0, #56	@ 0x38
10063530:	4629      	mov	r1, r5
10063532:	311e      	adds	r1, #30
10063534:	4632      	mov	r2, r6
10063536:	47b8      	blx	r7
10063538:	4620      	mov	r0, r4
1006353a:	3048      	adds	r0, #72	@ 0x48
1006353c:	4629      	mov	r1, r5
1006353e:	312e      	adds	r1, #46	@ 0x2e
10063540:	4632      	mov	r2, r6
10063542:	47b8      	blx	r7
10063544:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10063546:	66a0      	str	r0, [r4, #104]	@ 0x68
10063548:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
1006354a:	66e0      	str	r0, [r4, #108]	@ 0x6c
1006354c:	7868      	ldrb	r0, [r5, #1]
1006354e:	2106      	movs	r1, #6
10063550:	4001      	ands	r1, r0
10063552:	72e1      	strb	r1, [r4, #11]
10063554:	21e0      	movs	r1, #224	@ 0xe0
10063556:	4001      	ands	r1, r0
10063558:	7c60      	ldrb	r0, [r4, #17]
1006355a:	4308      	orrs	r0, r1
1006355c:	7460      	strb	r0, [r4, #17]
1006355e:	78a8      	ldrb	r0, [r5, #2]
10063560:	0701      	lsls	r1, r0, #28
10063562:	d502      	bpl.n	1006356a <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10063564:	21fe      	movs	r1, #254	@ 0xfe
10063566:	4008      	ands	r0, r1
10063568:	75e0      	strb	r0, [r4, #23]
1006356a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006356c <__arm_cp.3_0>:
1006356c:	1004f845 	.word	0x1004f845

10063570 <smp_dep_sdb_find_bonding_record_read_address>:
10063570:	b570      	push	{r4, r5, r6, lr}
10063572:	b094      	sub	sp, #80	@ 0x50
10063574:	4614      	mov	r4, r2
10063576:	460e      	mov	r6, r1
10063578:	7841      	ldrb	r1, [r0, #1]
1006357a:	1c80      	adds	r0, r0, #2
1006357c:	466a      	mov	r2, sp
1006357e:	f7fb f816 	bl	1005e5ae <sdb_sap_read_security_record>
10063582:	4605      	mov	r5, r0
10063584:	2800      	cmp	r0, #0
10063586:	d107      	bne.n	10063598 <smp_dep_sdb_find_bonding_record_read_address+0x28>
10063588:	2000      	movs	r0, #0
1006358a:	7030      	strb	r0, [r6, #0]
1006358c:	4669      	mov	r1, sp
1006358e:	313e      	adds	r1, #62	@ 0x3e
10063590:	2206      	movs	r2, #6
10063592:	4620      	mov	r0, r4
10063594:	f7ec f956 	bl	1004f844 <BLEPLAT_MemCpy>
10063598:	4628      	mov	r0, r5
1006359a:	b014      	add	sp, #80	@ 0x50
1006359c:	bd70      	pop	{r4, r5, r6, pc}

1006359e <smp_dep_sdb_find_matching_ltk_read_record>:
1006359e:	b5b0      	push	{r4, r5, r7, lr}
100635a0:	b094      	sub	sp, #80	@ 0x50
100635a2:	4614      	mov	r4, r2
100635a4:	466a      	mov	r2, sp
100635a6:	f7fb f87b 	bl	1005e6a0 <sdb_sap_read_security_record_matching>
100635aa:	4605      	mov	r5, r0
100635ac:	2800      	cmp	r0, #0
100635ae:	d103      	bne.n	100635b8 <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
100635b0:	4668      	mov	r0, sp
100635b2:	4621      	mov	r1, r4
100635b4:	f7ff ff9a 	bl	100634ec <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100635b8:	4628      	mov	r0, r5
100635ba:	b014      	add	sp, #80	@ 0x50
100635bc:	bdb0      	pop	{r4, r5, r7, pc}

100635be <smp_start_encryption_ucfg_weak>:
100635be:	201f      	movs	r0, #31
100635c0:	4770      	bx	lr
	...

100635c4 <smp_pp3_pairing_completed_successful>:
100635c4:	b570      	push	{r4, r5, r6, lr}
100635c6:	4604      	mov	r4, r0
100635c8:	7b80      	ldrb	r0, [r0, #14]
100635ca:	2103      	movs	r1, #3
100635cc:	4001      	ands	r1, r0
100635ce:	8925      	ldrh	r5, [r4, #8]
100635d0:	2903      	cmp	r1, #3
100635d2:	d10a      	bne.n	100635ea <smp_pp3_pairing_completed_successful+0x26>
100635d4:	4620      	mov	r0, r4
100635d6:	f7ff fee8 	bl	100633aa <smp_dep_sdb_add_bonding_record>
100635da:	2800      	cmp	r0, #0
100635dc:	d005      	beq.n	100635ea <smp_pp3_pairing_completed_successful+0x26>
100635de:	2108      	movs	r1, #8
100635e0:	2200      	movs	r2, #0
100635e2:	4620      	mov	r0, r4
100635e4:	f000 f826 	bl	10063634 <smp_pp3_pairing_process_abort>
100635e8:	bd70      	pop	{r4, r5, r6, pc}
100635ea:	4628      	mov	r0, r5
100635ec:	f000 ff94 	bl	10064518 <smp_get_remote_device_list_index>
100635f0:	4602      	mov	r2, r0
100635f2:	2001      	movs	r0, #1
100635f4:	2100      	movs	r1, #0
100635f6:	4b0e      	ldr	r3, [pc, #56]	@ (10063630 <__arm_cp.0_0>)
100635f8:	f7fb fc56 	bl	1005eea8 <smp_timer_reset>
100635fc:	7ce0      	ldrb	r0, [r4, #19]
100635fe:	2803      	cmp	r0, #3
10063600:	d102      	bne.n	10063608 <smp_pp3_pairing_completed_successful+0x44>
10063602:	2000      	movs	r0, #0
10063604:	f000 ffe6 	bl	100645d4 <smp_oob_clear_remote_data_entry>
10063608:	4620      	mov	r0, r4
1006360a:	3018      	adds	r0, #24
1006360c:	2600      	movs	r6, #0
1006360e:	2204      	movs	r2, #4
10063610:	4631      	mov	r1, r6
10063612:	f7ec f927 	bl	1004f864 <BLEPLAT_MemSet>
10063616:	4620      	mov	r0, r4
10063618:	4631      	mov	r1, r6
1006361a:	f000 f83b 	bl	10063694 <smp_pp3_pairing_completed_update_stats>
1006361e:	20f1      	movs	r0, #241	@ 0xf1
10063620:	72a0      	strb	r0, [r4, #10]
10063622:	2002      	movs	r0, #2
10063624:	4629      	mov	r1, r5
10063626:	4632      	mov	r2, r6
10063628:	4633      	mov	r3, r6
1006362a:	f7fd fe0b 	bl	10061244 <aci_gap_pairing_complete_event_push_noinline>
1006362e:	bd70      	pop	{r4, r5, r6, pc}

10063630 <__arm_cp.0_0>:
10063630:	00007530 	.word	0x00007530

10063634 <smp_pp3_pairing_process_abort>:
10063634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063636:	4616      	mov	r6, r2
10063638:	460c      	mov	r4, r1
1006363a:	4605      	mov	r5, r0
1006363c:	8900      	ldrh	r0, [r0, #8]
1006363e:	f000 ff6b 	bl	10064518 <smp_get_remote_device_list_index>
10063642:	4602      	mov	r2, r0
10063644:	2001      	movs	r0, #1
10063646:	2700      	movs	r7, #0
10063648:	4b11      	ldr	r3, [pc, #68]	@ (10063690 <__arm_cp.1_0>)
1006364a:	4639      	mov	r1, r7
1006364c:	f7fb fc2c 	bl	1005eea8 <smp_timer_reset>
10063650:	8928      	ldrh	r0, [r5, #8]
10063652:	f7fb fbed 	bl	1005ee30 <smp_rxp_flush_packet_queues>
10063656:	2102      	movs	r1, #2
10063658:	4628      	mov	r0, r5
1006365a:	f000 f81b 	bl	10063694 <smp_pp3_pairing_completed_update_stats>
1006365e:	4628      	mov	r0, r5
10063660:	3018      	adds	r0, #24
10063662:	2204      	movs	r2, #4
10063664:	4639      	mov	r1, r7
10063666:	f7ec f8fd 	bl	1004f864 <BLEPLAT_MemSet>
1006366a:	7be8      	ldrb	r0, [r5, #15]
1006366c:	212f      	movs	r1, #47	@ 0x2f
1006366e:	4001      	ands	r1, r0
10063670:	73e9      	strb	r1, [r5, #15]
10063672:	2e00      	cmp	r6, #0
10063674:	d004      	beq.n	10063680 <smp_pp3_pairing_process_abort+0x4c>
10063676:	7868      	ldrb	r0, [r5, #1]
10063678:	1ca9      	adds	r1, r5, #2
1006367a:	f000 fe51 	bl	10064320 <smp_cmn_repeated_attacks_protection_start>
1006367e:	27fb      	movs	r7, #251	@ 0xfb
10063680:	72af      	strb	r7, [r5, #10]
10063682:	8929      	ldrh	r1, [r5, #8]
10063684:	2002      	movs	r0, #2
10063686:	4602      	mov	r2, r0
10063688:	4623      	mov	r3, r4
1006368a:	f7fd fddb 	bl	10061244 <aci_gap_pairing_complete_event_push_noinline>
1006368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063690 <__arm_cp.1_0>:
10063690:	00007530 	.word	0x00007530

10063694 <smp_pp3_pairing_completed_update_stats>:
10063694:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063696:	2260      	movs	r2, #96	@ 0x60
10063698:	5c82      	ldrb	r2, [r0, r2]
1006369a:	07d2      	lsls	r2, r2, #31
1006369c:	7a82      	ldrb	r2, [r0, #10]
1006369e:	d104      	bne.n	100636aa <smp_pp3_pairing_completed_update_stats+0x16>
100636a0:	3260      	adds	r2, #96	@ 0x60
100636a2:	b2d2      	uxtb	r2, r2
100636a4:	2a51      	cmp	r2, #81	@ 0x51
100636a6:	d304      	bcc.n	100636b2 <smp_pp3_pairing_completed_update_stats+0x1e>
100636a8:	e00f      	b.n	100636ca <smp_pp3_pairing_completed_update_stats+0x36>
100636aa:	3250      	adds	r2, #80	@ 0x50
100636ac:	b2d2      	uxtb	r2, r2
100636ae:	2a40      	cmp	r2, #64	@ 0x40
100636b0:	d80b      	bhi.n	100636ca <smp_pp3_pairing_completed_update_stats+0x36>
100636b2:	4a09      	ldr	r2, [pc, #36]	@ (100636d8 <__arm_cp.2_0>)
100636b4:	6812      	ldr	r2, [r2, #0]
100636b6:	23b1      	movs	r3, #177	@ 0xb1
100636b8:	5cd3      	ldrb	r3, [r2, r3]
100636ba:	2b00      	cmp	r3, #0
100636bc:	d005      	beq.n	100636ca <smp_pp3_pairing_completed_update_stats+0x36>
100636be:	32b1      	adds	r2, #177	@ 0xb1
100636c0:	7d04      	ldrb	r4, [r0, #20]
100636c2:	2501      	movs	r5, #1
100636c4:	40a5      	lsls	r5, r4
100636c6:	43ab      	bics	r3, r5
100636c8:	7013      	strb	r3, [r2, #0]
100636ca:	466a      	mov	r2, sp
100636cc:	7111      	strb	r1, [r2, #4]
100636ce:	9000      	str	r0, [sp, #0]
100636d0:	4610      	mov	r0, r2
100636d2:	f000 ffb2 	bl	1006463a <smp_scp_stats_update_on_pairing_complete_ucfg_weak>
100636d6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100636d8 <__arm_cp.2_0>:
100636d8:	20000f6c 	.word	0x20000f6c

100636dc <smp_pp3_pairing_failed_receive>:
100636dc:	b5b0      	push	{r4, r5, r7, lr}
100636de:	460c      	mov	r4, r1
100636e0:	2160      	movs	r1, #96	@ 0x60
100636e2:	5c61      	ldrb	r1, [r4, r1]
100636e4:	2201      	movs	r2, #1
100636e6:	400a      	ands	r2, r1
100636e8:	7aa3      	ldrb	r3, [r4, #10]
100636ea:	6840      	ldr	r0, [r0, #4]
100636ec:	7a41      	ldrb	r1, [r0, #9]
100636ee:	d102      	bne.n	100636f6 <smp_pp3_pairing_failed_receive+0x1a>
100636f0:	2b9f      	cmp	r3, #159	@ 0x9f
100636f2:	d802      	bhi.n	100636fa <smp_pp3_pairing_failed_receive+0x1e>
100636f4:	bdb0      	pop	{r4, r5, r7, pc}
100636f6:	2bb0      	cmp	r3, #176	@ 0xb0
100636f8:	d314      	bcc.n	10063724 <smp_pp3_pairing_failed_receive+0x48>
100636fa:	2bf0      	cmp	r3, #240	@ 0xf0
100636fc:	d915      	bls.n	1006372a <smp_pp3_pairing_failed_receive+0x4e>
100636fe:	2bf1      	cmp	r3, #241	@ 0xf1
10063700:	d10e      	bne.n	10063720 <smp_pp3_pairing_failed_receive+0x44>
10063702:	290f      	cmp	r1, #15
10063704:	d10c      	bne.n	10063720 <smp_pp3_pairing_failed_receive+0x44>
10063706:	4625      	mov	r5, r4
10063708:	3559      	adds	r5, #89	@ 0x59
1006370a:	210f      	movs	r1, #15
1006370c:	2201      	movs	r2, #1
1006370e:	4620      	mov	r0, r4
10063710:	f7ff ff90 	bl	10063634 <smp_pp3_pairing_process_abort>
10063714:	7829      	ldrb	r1, [r5, #0]
10063716:	345a      	adds	r4, #90	@ 0x5a
10063718:	4620      	mov	r0, r4
1006371a:	f7fa ffaf 	bl	1005e67c <sdb_sap_del_bonded_device>
1006371e:	bdb0      	pop	{r4, r5, r7, pc}
10063720:	2a00      	cmp	r2, #0
10063722:	d0e7      	beq.n	100636f4 <smp_pp3_pairing_failed_receive+0x18>
10063724:	7e20      	ldrb	r0, [r4, #24]
10063726:	0780      	lsls	r0, r0, #30
10063728:	d0e4      	beq.n	100636f4 <smp_pp3_pairing_failed_receive+0x18>
1006372a:	2201      	movs	r2, #1
1006372c:	4620      	mov	r0, r4
1006372e:	f7ff ff81 	bl	10063634 <smp_pp3_pairing_process_abort>
10063732:	bdb0      	pop	{r4, r5, r7, pc}

10063734 <smp_pp3_pairing_failed_send>:
10063734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063736:	461f      	mov	r7, r3
10063738:	4613      	mov	r3, r2
1006373a:	460c      	mov	r4, r1
1006373c:	4605      	mov	r5, r0
1006373e:	2205      	movs	r2, #5
10063740:	4619      	mov	r1, r3
10063742:	4623      	mov	r3, r4
10063744:	f7ff fe14 	bl	10063370 <smp_dep_l2c_send_acl_short_pdu>
10063748:	4606      	mov	r6, r0
1006374a:	2f00      	cmp	r7, #0
1006374c:	d101      	bne.n	10063752 <smp_pp3_pairing_failed_send+0x1e>
1006374e:	2e88      	cmp	r6, #136	@ 0x88
10063750:	d004      	beq.n	1006375c <smp_pp3_pairing_failed_send+0x28>
10063752:	2201      	movs	r2, #1
10063754:	4628      	mov	r0, r5
10063756:	4621      	mov	r1, r4
10063758:	f7ff ff6c 	bl	10063634 <smp_pp3_pairing_process_abort>
1006375c:	4630      	mov	r0, r6
1006375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063760 <smp_pp1_get_next_free_pairing_idx>:
10063760:	b510      	push	{r4, lr}
10063762:	490b      	ldr	r1, [pc, #44]	@ (10063790 <__arm_cp.0_0>)
10063764:	680a      	ldr	r2, [r1, #0]
10063766:	21b1      	movs	r1, #177	@ 0xb1
10063768:	5c53      	ldrb	r3, [r2, r1]
1006376a:	32b1      	adds	r2, #177	@ 0xb1
1006376c:	2100      	movs	r1, #0
1006376e:	2903      	cmp	r1, #3
10063770:	d005      	beq.n	1006377e <smp_pp1_get_next_free_pairing_idx+0x1e>
10063772:	2401      	movs	r4, #1
10063774:	408c      	lsls	r4, r1
10063776:	421c      	tst	r4, r3
10063778:	d003      	beq.n	10063782 <smp_pp1_get_next_free_pairing_idx+0x22>
1006377a:	1c49      	adds	r1, r1, #1
1006377c:	e7f7      	b.n	1006376e <smp_pp1_get_next_free_pairing_idx+0xe>
1006377e:	2103      	movs	r1, #3
10063780:	e003      	b.n	1006378a <smp_pp1_get_next_free_pairing_idx+0x2a>
10063782:	2800      	cmp	r0, #0
10063784:	d001      	beq.n	1006378a <smp_pp1_get_next_free_pairing_idx+0x2a>
10063786:	4323      	orrs	r3, r4
10063788:	7013      	strb	r3, [r2, #0]
1006378a:	b2c8      	uxtb	r0, r1
1006378c:	bd10      	pop	{r4, pc}
1006378e:	46c0      	nop			@ (mov r8, r8)

10063790 <__arm_cp.0_0>:
10063790:	20000f6c 	.word	0x20000f6c

10063794 <smp_pp1_get_pairing_pdu_offset>:
10063794:	0100      	lsls	r0, r0, #4
10063796:	2900      	cmp	r1, #0
10063798:	d000      	beq.n	1006379c <smp_pp1_get_pairing_pdu_offset+0x8>
1006379a:	3008      	adds	r0, #8
1006379c:	b2c0      	uxtb	r0, r0
1006379e:	4770      	bx	lr

100637a0 <smp_pp1_reqrsp_pdu_params_check>:
100637a0:	b51c      	push	{r2, r3, r4, lr}
100637a2:	2104      	movs	r1, #4
100637a4:	2207      	movs	r2, #7
100637a6:	466c      	mov	r4, sp
100637a8:	4623      	mov	r3, r4
100637aa:	f7ee fbff 	bl	10051fac <ACL_pkt_read>
100637ae:	7862      	ldrb	r2, [r4, #1]
100637b0:	210a      	movs	r1, #10
100637b2:	2a04      	cmp	r2, #4
100637b4:	d813      	bhi.n	100637de <smp_pp1_reqrsp_pdu_params_check+0x3e>
100637b6:	466a      	mov	r2, sp
100637b8:	7892      	ldrb	r2, [r2, #2]
100637ba:	2a01      	cmp	r2, #1
100637bc:	d80f      	bhi.n	100637de <smp_pp1_reqrsp_pdu_params_check+0x3e>
100637be:	466a      	mov	r2, sp
100637c0:	78d2      	ldrb	r2, [r2, #3]
100637c2:	0792      	lsls	r2, r2, #30
100637c4:	d40b      	bmi.n	100637de <smp_pp1_reqrsp_pdu_params_check+0x3e>
100637c6:	4907      	ldr	r1, [pc, #28]	@ (100637e4 <__arm_cp.2_0>)
100637c8:	6809      	ldr	r1, [r1, #0]
100637ca:	2234      	movs	r2, #52	@ 0x34
100637cc:	5c8a      	ldrb	r2, [r1, r2]
100637ce:	4669      	mov	r1, sp
100637d0:	7909      	ldrb	r1, [r1, #4]
100637d2:	4291      	cmp	r1, r2
100637d4:	d302      	bcc.n	100637dc <smp_pp1_reqrsp_pdu_params_check+0x3c>
100637d6:	2911      	cmp	r1, #17
100637d8:	4601      	mov	r1, r0
100637da:	d300      	bcc.n	100637de <smp_pp1_reqrsp_pdu_params_check+0x3e>
100637dc:	2106      	movs	r1, #6
100637de:	4608      	mov	r0, r1
100637e0:	bd1c      	pop	{r2, r3, r4, pc}
100637e2:	46c0      	nop			@ (mov r8, r8)

100637e4 <__arm_cp.2_0>:
100637e4:	20000f6c 	.word	0x20000f6c

100637e8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
100637e8:	b580      	push	{r7, lr}
100637ea:	7d12      	ldrb	r2, [r2, #20]
100637ec:	0112      	lsls	r2, r2, #4
100637ee:	2900      	cmp	r1, #0
100637f0:	d000      	beq.n	100637f4 <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
100637f2:	3208      	adds	r2, #8
100637f4:	b2d1      	uxtb	r1, r2
100637f6:	4a04      	ldr	r2, [pc, #16]	@ (10063808 <__arm_cp.3_0>)
100637f8:	6812      	ldr	r2, [r2, #0]
100637fa:	1853      	adds	r3, r2, r1
100637fc:	33b4      	adds	r3, #180	@ 0xb4
100637fe:	2104      	movs	r1, #4
10063800:	2207      	movs	r2, #7
10063802:	f7ee fbd3 	bl	10051fac <ACL_pkt_read>
10063806:	bd80      	pop	{r7, pc}

10063808 <__arm_cp.3_0>:
10063808:	20000f6c 	.word	0x20000f6c

1006380c <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
1006380c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006380e:	4924      	ldr	r1, [pc, #144]	@ (100638a0 <__arm_cp.4_0>)
10063810:	6809      	ldr	r1, [r1, #0]
10063812:	7d02      	ldrb	r2, [r0, #20]
10063814:	0112      	lsls	r2, r2, #4
10063816:	3208      	adds	r2, #8
10063818:	b2d2      	uxtb	r2, r2
1006381a:	188b      	adds	r3, r1, r2
1006381c:	24b5      	movs	r4, #181	@ 0xb5
1006381e:	5d1c      	ldrb	r4, [r3, r4]
10063820:	7304      	strb	r4, [r0, #12]
10063822:	24b6      	movs	r4, #182	@ 0xb6
10063824:	5d1b      	ldrb	r3, [r3, r4]
10063826:	2b01      	cmp	r3, #1
10063828:	d103      	bne.n	10063832 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
1006382a:	7b43      	ldrb	r3, [r0, #13]
1006382c:	2402      	movs	r4, #2
1006382e:	431c      	orrs	r4, r3
10063830:	7344      	strb	r4, [r0, #13]
10063832:	460b      	mov	r3, r1
10063834:	3336      	adds	r3, #54	@ 0x36
10063836:	2503      	movs	r5, #3
10063838:	4315      	orrs	r5, r2
1006383a:	460c      	mov	r4, r1
1006383c:	34b4      	adds	r4, #180	@ 0xb4
1006383e:	5d65      	ldrb	r5, [r4, r5]
10063840:	2601      	movs	r6, #1
10063842:	402e      	ands	r6, r5
10063844:	7b87      	ldrb	r7, [r0, #14]
10063846:	4337      	orrs	r7, r6
10063848:	7387      	strb	r7, [r0, #14]
1006384a:	2604      	movs	r6, #4
1006384c:	4035      	ands	r5, r6
1006384e:	7bc7      	ldrb	r7, [r0, #15]
10063850:	432f      	orrs	r7, r5
10063852:	73c7      	strb	r7, [r0, #15]
10063854:	4316      	orrs	r6, r2
10063856:	5da5      	ldrb	r5, [r4, r6]
10063858:	7405      	strb	r5, [r0, #16]
1006385a:	2505      	movs	r5, #5
1006385c:	4315      	orrs	r5, r2
1006385e:	5d64      	ldrb	r4, [r4, r5]
10063860:	2560      	movs	r5, #96	@ 0x60
10063862:	5d45      	ldrb	r5, [r0, r5]
10063864:	07ed      	lsls	r5, r5, #31
10063866:	d10e      	bne.n	10063886 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
10063868:	781d      	ldrb	r5, [r3, #0]
1006386a:	402c      	ands	r4, r5
1006386c:	2507      	movs	r5, #7
1006386e:	402c      	ands	r4, r5
10063870:	7484      	strb	r4, [r0, #18]
10063872:	2406      	movs	r4, #6
10063874:	4322      	orrs	r2, r4
10063876:	1889      	adds	r1, r1, r2
10063878:	22b4      	movs	r2, #180	@ 0xb4
1006387a:	5c89      	ldrb	r1, [r1, r2]
1006387c:	785a      	ldrb	r2, [r3, #1]
1006387e:	400a      	ands	r2, r1
10063880:	402a      	ands	r2, r5
10063882:	7442      	strb	r2, [r0, #17]
10063884:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063886:	785d      	ldrb	r5, [r3, #1]
10063888:	4025      	ands	r5, r4
1006388a:	7445      	strb	r5, [r0, #17]
1006388c:	2406      	movs	r4, #6
1006388e:	4322      	orrs	r2, r4
10063890:	1889      	adds	r1, r1, r2
10063892:	22b4      	movs	r2, #180	@ 0xb4
10063894:	5c89      	ldrb	r1, [r1, r2]
10063896:	781a      	ldrb	r2, [r3, #0]
10063898:	400a      	ands	r2, r1
1006389a:	7482      	strb	r2, [r0, #18]
1006389c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006389e:	46c0      	nop			@ (mov r8, r8)

100638a0 <__arm_cp.4_0>:
100638a0:	20000f6c 	.word	0x20000f6c

100638a4 <smp_pp1_key_generation_method_selection>:
100638a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100638a6:	7b01      	ldrb	r1, [r0, #12]
100638a8:	7b42      	ldrb	r2, [r0, #13]
100638aa:	07d3      	lsls	r3, r2, #31
100638ac:	d001      	beq.n	100638b2 <smp_pp1_key_generation_method_selection+0xe>
100638ae:	0793      	lsls	r3, r2, #30
100638b0:	d405      	bmi.n	100638be <smp_pp1_key_generation_method_selection+0x1a>
100638b2:	7dc3      	ldrb	r3, [r0, #23]
100638b4:	2408      	movs	r4, #8
100638b6:	401c      	ands	r4, r3
100638b8:	d003      	beq.n	100638c2 <smp_pp1_key_generation_method_selection+0x1e>
100638ba:	0792      	lsls	r2, r2, #30
100638bc:	d001      	beq.n	100638c2 <smp_pp1_key_generation_method_selection+0x1e>
100638be:	2203      	movs	r2, #3
100638c0:	e019      	b.n	100638f6 <smp_pp1_key_generation_method_selection+0x52>
100638c2:	7bc3      	ldrb	r3, [r0, #15]
100638c4:	2205      	movs	r2, #5
100638c6:	4213      	tst	r3, r2
100638c8:	d014      	beq.n	100638f4 <smp_pp1_key_generation_method_selection+0x50>
100638ca:	4b42      	ldr	r3, [pc, #264]	@ (100639d4 <__arm_cp.5_0>)
100638cc:	681b      	ldr	r3, [r3, #0]
100638ce:	2540      	movs	r5, #64	@ 0x40
100638d0:	5d5d      	ldrb	r5, [r3, r5]
100638d2:	434a      	muls	r2, r1
100638d4:	4b40      	ldr	r3, [pc, #256]	@ (100639d8 <__arm_cp.5_1>)
100638d6:	189a      	adds	r2, r3, r2
100638d8:	5d52      	ldrb	r2, [r2, r5]
100638da:	74c2      	strb	r2, [r0, #19]
100638dc:	4603      	mov	r3, r0
100638de:	3313      	adds	r3, #19
100638e0:	2a00      	cmp	r2, #0
100638e2:	d10b      	bne.n	100638fc <smp_pp1_key_generation_method_selection+0x58>
100638e4:	2c00      	cmp	r4, #0
100638e6:	d13d      	bne.n	10063964 <smp_pp1_key_generation_method_selection+0xc0>
100638e8:	2901      	cmp	r1, #1
100638ea:	d16f      	bne.n	100639cc <smp_pp1_key_generation_method_selection+0x128>
100638ec:	2d01      	cmp	r5, #1
100638ee:	d16d      	bne.n	100639cc <smp_pp1_key_generation_method_selection+0x128>
100638f0:	2201      	movs	r2, #1
100638f2:	e06c      	b.n	100639ce <smp_pp1_key_generation_method_selection+0x12a>
100638f4:	2201      	movs	r2, #1
100638f6:	74c2      	strb	r2, [r0, #19]
100638f8:	4603      	mov	r3, r0
100638fa:	3313      	adds	r3, #19
100638fc:	2460      	movs	r4, #96	@ 0x60
100638fe:	5d05      	ldrb	r5, [r0, r4]
10063900:	2601      	movs	r6, #1
10063902:	4035      	ands	r5, r6
10063904:	d103      	bne.n	1006390e <smp_pp1_key_generation_method_selection+0x6a>
10063906:	241a      	movs	r4, #26
10063908:	5704      	ldrsb	r4, [r0, r4]
1006390a:	2c00      	cmp	r4, #0
1006390c:	d426      	bmi.n	1006395c <smp_pp1_key_generation_method_selection+0xb8>
1006390e:	4604      	mov	r4, r0
10063910:	340f      	adds	r4, #15
10063912:	7824      	ldrb	r4, [r4, #0]
10063914:	07e4      	lsls	r4, r4, #31
10063916:	d004      	beq.n	10063922 <smp_pp1_key_generation_method_selection+0x7e>
10063918:	2a01      	cmp	r2, #1
1006391a:	d102      	bne.n	10063922 <smp_pp1_key_generation_method_selection+0x7e>
1006391c:	2403      	movs	r4, #3
1006391e:	701c      	strb	r4, [r3, #0]
10063920:	e052      	b.n	100639c8 <smp_pp1_key_generation_method_selection+0x124>
10063922:	7dc3      	ldrb	r3, [r0, #23]
10063924:	071b      	lsls	r3, r3, #28
10063926:	d503      	bpl.n	10063930 <smp_pp1_key_generation_method_selection+0x8c>
10063928:	2a02      	cmp	r2, #2
1006392a:	d101      	bne.n	10063930 <smp_pp1_key_generation_method_selection+0x8c>
1006392c:	2300      	movs	r3, #0
1006392e:	76c3      	strb	r3, [r0, #27]
10063930:	2a02      	cmp	r2, #2
10063932:	d111      	bne.n	10063958 <smp_pp1_key_generation_method_selection+0xb4>
10063934:	7bc2      	ldrb	r2, [r0, #15]
10063936:	23ef      	movs	r3, #239	@ 0xef
10063938:	4013      	ands	r3, r2
1006393a:	73c3      	strb	r3, [r0, #15]
1006393c:	4a25      	ldr	r2, [pc, #148]	@ (100639d4 <__arm_cp.5_0>)
1006393e:	6812      	ldr	r2, [r2, #0]
10063940:	2340      	movs	r3, #64	@ 0x40
10063942:	5cd2      	ldrb	r2, [r2, r3]
10063944:	2400      	movs	r4, #0
10063946:	2a02      	cmp	r2, #2
10063948:	4627      	mov	r7, r4
1006394a:	d318      	bcc.n	1006397e <smp_pp1_key_generation_method_selection+0xda>
1006394c:	2a04      	cmp	r2, #4
1006394e:	d00b      	beq.n	10063968 <smp_pp1_key_generation_method_selection+0xc4>
10063950:	2a02      	cmp	r2, #2
10063952:	d113      	bne.n	1006397c <smp_pp1_key_generation_method_selection+0xd8>
10063954:	4637      	mov	r7, r6
10063956:	e012      	b.n	1006397e <smp_pp1_key_generation_method_selection+0xda>
10063958:	2400      	movs	r4, #0
1006395a:	e035      	b.n	100639c8 <smp_pp1_key_generation_method_selection+0x124>
1006395c:	4c1d      	ldr	r4, [pc, #116]	@ (100639d4 <__arm_cp.5_0>)
1006395e:	6824      	ldr	r4, [r4, #0]
10063960:	3431      	adds	r4, #49	@ 0x31
10063962:	e7d6      	b.n	10063912 <smp_pp1_key_generation_method_selection+0x6e>
10063964:	2204      	movs	r2, #4
10063966:	e032      	b.n	100639ce <smp_pp1_key_generation_method_selection+0x12a>
10063968:	2902      	cmp	r1, #2
1006396a:	4637      	mov	r7, r6
1006396c:	d307      	bcc.n	1006397e <smp_pp1_key_generation_method_selection+0xda>
1006396e:	2904      	cmp	r1, #4
10063970:	462f      	mov	r7, r5
10063972:	d004      	beq.n	1006397e <smp_pp1_key_generation_method_selection+0xda>
10063974:	2902      	cmp	r1, #2
10063976:	d101      	bne.n	1006397c <smp_pp1_key_generation_method_selection+0xd8>
10063978:	4627      	mov	r7, r4
1006397a:	e000      	b.n	1006397e <smp_pp1_key_generation_method_selection+0xda>
1006397c:	27ff      	movs	r7, #255	@ 0xff
1006397e:	4917      	ldr	r1, [pc, #92]	@ (100639dc <__arm_cp.5_2>)
10063980:	6809      	ldr	r1, [r1, #0]
10063982:	224e      	movs	r2, #78	@ 0x4e
10063984:	5c89      	ldrb	r1, [r1, r2]
10063986:	0749      	lsls	r1, r1, #29
10063988:	d51e      	bpl.n	100639c8 <smp_pp1_key_generation_method_selection+0x124>
1006398a:	8906      	ldrh	r6, [r0, #8]
1006398c:	4814      	ldr	r0, [pc, #80]	@ (100639e0 <__arm_cp.5_3>)
1006398e:	6800      	ldr	r0, [r0, #0]
10063990:	6980      	ldr	r0, [r0, #24]
10063992:	2502      	movs	r5, #2
10063994:	2246      	movs	r2, #70	@ 0x46
10063996:	2303      	movs	r3, #3
10063998:	4629      	mov	r1, r5
1006399a:	f7ee fc9f 	bl	100522dc <aci_event_fifo_push_header>
1006399e:	2800      	cmp	r0, #0
100639a0:	d012      	beq.n	100639c8 <smp_pp1_key_generation_method_selection+0x124>
100639a2:	4601      	mov	r1, r0
100639a4:	7286      	strb	r6, [r0, #10]
100639a6:	2004      	movs	r0, #4
100639a8:	7248      	strb	r0, [r1, #9]
100639aa:	720d      	strb	r5, [r1, #8]
100639ac:	2400      	movs	r4, #0
100639ae:	71cc      	strb	r4, [r1, #7]
100639b0:	2005      	movs	r0, #5
100639b2:	7188      	strb	r0, [r1, #6]
100639b4:	730f      	strb	r7, [r1, #12]
100639b6:	20ff      	movs	r0, #255	@ 0xff
100639b8:	7148      	strb	r0, [r1, #5]
100639ba:	2082      	movs	r0, #130	@ 0x82
100639bc:	7108      	strb	r0, [r1, #4]
100639be:	0a30      	lsrs	r0, r6, #8
100639c0:	72c8      	strb	r0, [r1, #11]
100639c2:	4628      	mov	r0, r5
100639c4:	f7ee fd27 	bl	10052416 <aci_event_fifo_push>
100639c8:	4620      	mov	r0, r4
100639ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639cc:	2202      	movs	r2, #2
100639ce:	701a      	strb	r2, [r3, #0]
100639d0:	e794      	b.n	100638fc <smp_pp1_key_generation_method_selection+0x58>
100639d2:	46c0      	nop			@ (mov r8, r8)

100639d4 <__arm_cp.5_0>:
100639d4:	20000f6c 	.word	0x20000f6c

100639d8 <__arm_cp.5_1>:
100639d8:	100661c8 	.word	0x100661c8

100639dc <__arm_cp.5_2>:
100639dc:	20000f20 	.word	0x20000f20

100639e0 <__arm_cp.5_3>:
100639e0:	20000ed0 	.word	0x20000ed0

100639e4 <smp_pp1_auth_req_field_generate_from_device_config>:
100639e4:	490b      	ldr	r1, [pc, #44]	@ (10063a14 <__arm_cp.6_0>)
100639e6:	6809      	ldr	r1, [r1, #0]
100639e8:	2230      	movs	r2, #48	@ 0x30
100639ea:	5c8a      	ldrb	r2, [r1, r2]
100639ec:	2301      	movs	r3, #1
100639ee:	4013      	ands	r3, r2
100639f0:	3130      	adds	r1, #48	@ 0x30
100639f2:	784a      	ldrb	r2, [r1, #1]
100639f4:	07d2      	lsls	r2, r2, #31
100639f6:	0f52      	lsrs	r2, r2, #29
100639f8:	18d2      	adds	r2, r2, r3
100639fa:	78cb      	ldrb	r3, [r1, #3]
100639fc:	07db      	lsls	r3, r3, #31
100639fe:	0edb      	lsrs	r3, r3, #27
10063a00:	18d2      	adds	r2, r2, r3
10063a02:	7889      	ldrb	r1, [r1, #2]
10063a04:	084b      	lsrs	r3, r1, #1
10063a06:	430b      	orrs	r3, r1
10063a08:	07d9      	lsls	r1, r3, #31
10063a0a:	0f09      	lsrs	r1, r1, #28
10063a0c:	1851      	adds	r1, r2, r1
10063a0e:	7001      	strb	r1, [r0, #0]
10063a10:	4770      	bx	lr
10063a12:	46c0      	nop			@ (mov r8, r8)

10063a14 <__arm_cp.6_0>:
10063a14:	20000f6c 	.word	0x20000f6c

10063a18 <smp_pp1_hndl_pairing_response_mode_through_event>:
10063a18:	b570      	push	{r4, r5, r6, lr}
10063a1a:	4605      	mov	r5, r0
10063a1c:	8900      	ldrh	r0, [r0, #8]
10063a1e:	f7fb fe2a 	bl	1005f676 <smp_sap_check_is_peer_device_bonded>
10063a22:	4246      	negs	r6, r0
10063a24:	4146      	adcs	r6, r0
10063a26:	491b      	ldr	r1, [pc, #108]	@ (10063a94 <__arm_cp.8_0>)
10063a28:	6809      	ldr	r1, [r1, #0]
10063a2a:	223c      	movs	r2, #60	@ 0x3c
10063a2c:	5c89      	ldrb	r1, [r1, r2]
10063a2e:	2902      	cmp	r1, #2
10063a30:	d004      	beq.n	10063a3c <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
10063a32:	2400      	movs	r4, #0
10063a34:	2901      	cmp	r1, #1
10063a36:	d12a      	bne.n	10063a8e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10063a38:	2800      	cmp	r0, #0
10063a3a:	d128      	bne.n	10063a8e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10063a3c:	2008      	movs	r0, #8
10063a3e:	4301      	orrs	r1, r0
10063a40:	75a9      	strb	r1, [r5, #22]
10063a42:	4815      	ldr	r0, [pc, #84]	@ (10063a98 <__arm_cp.8_1>)
10063a44:	6800      	ldr	r0, [r0, #0]
10063a46:	214e      	movs	r1, #78	@ 0x4e
10063a48:	5c40      	ldrb	r0, [r0, r1]
10063a4a:	2401      	movs	r4, #1
10063a4c:	0780      	lsls	r0, r0, #30
10063a4e:	d51e      	bpl.n	10063a8e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10063a50:	892d      	ldrh	r5, [r5, #8]
10063a52:	4812      	ldr	r0, [pc, #72]	@ (10063a9c <__arm_cp.8_2>)
10063a54:	6800      	ldr	r0, [r0, #0]
10063a56:	6980      	ldr	r0, [r0, #24]
10063a58:	2102      	movs	r1, #2
10063a5a:	224b      	movs	r2, #75	@ 0x4b
10063a5c:	2303      	movs	r3, #3
10063a5e:	f7ee fc3d 	bl	100522dc <aci_event_fifo_push_header>
10063a62:	2800      	cmp	r0, #0
10063a64:	d013      	beq.n	10063a8e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10063a66:	4601      	mov	r1, r0
10063a68:	7285      	strb	r5, [r0, #10]
10063a6a:	2004      	movs	r0, #4
10063a6c:	7248      	strb	r0, [r1, #9]
10063a6e:	200b      	movs	r0, #11
10063a70:	7208      	strb	r0, [r1, #8]
10063a72:	2000      	movs	r0, #0
10063a74:	71c8      	strb	r0, [r1, #7]
10063a76:	2005      	movs	r0, #5
10063a78:	7188      	strb	r0, [r1, #6]
10063a7a:	730e      	strb	r6, [r1, #12]
10063a7c:	20ff      	movs	r0, #255	@ 0xff
10063a7e:	7148      	strb	r0, [r1, #5]
10063a80:	2082      	movs	r0, #130	@ 0x82
10063a82:	7108      	strb	r0, [r1, #4]
10063a84:	0a28      	lsrs	r0, r5, #8
10063a86:	72c8      	strb	r0, [r1, #11]
10063a88:	2002      	movs	r0, #2
10063a8a:	f7ee fcc4 	bl	10052416 <aci_event_fifo_push>
10063a8e:	4620      	mov	r0, r4
10063a90:	bd70      	pop	{r4, r5, r6, pc}
10063a92:	46c0      	nop			@ (mov r8, r8)

10063a94 <__arm_cp.8_0>:
10063a94:	20000f6c 	.word	0x20000f6c

10063a98 <__arm_cp.8_1>:
10063a98:	20000f20 	.word	0x20000f20

10063a9c <__arm_cp.8_2>:
10063a9c:	20000ed0 	.word	0x20000ed0

10063aa0 <smp_pp1_pairing_packet_build>:
10063aa0:	b510      	push	{r4, lr}
10063aa2:	2407      	movs	r4, #7
10063aa4:	8044      	strh	r4, [r0, #2]
10063aa6:	6844      	ldr	r4, [r0, #4]
10063aa8:	7221      	strb	r1, [r4, #8]
10063aaa:	490b      	ldr	r1, [pc, #44]	@ (10063ad8 <__arm_cp.9_0>)
10063aac:	6809      	ldr	r1, [r1, #0]
10063aae:	2440      	movs	r4, #64	@ 0x40
10063ab0:	5d09      	ldrb	r1, [r1, r4]
10063ab2:	6844      	ldr	r4, [r0, #4]
10063ab4:	7261      	strb	r1, [r4, #9]
10063ab6:	2101      	movs	r1, #1
10063ab8:	4011      	ands	r1, r2
10063aba:	6842      	ldr	r2, [r0, #4]
10063abc:	7291      	strb	r1, [r2, #10]
10063abe:	6841      	ldr	r1, [r0, #4]
10063ac0:	72cb      	strb	r3, [r1, #11]
10063ac2:	6841      	ldr	r1, [r0, #4]
10063ac4:	9a02      	ldr	r2, [sp, #8]
10063ac6:	730a      	strb	r2, [r1, #12]
10063ac8:	6841      	ldr	r1, [r0, #4]
10063aca:	9a03      	ldr	r2, [sp, #12]
10063acc:	734a      	strb	r2, [r1, #13]
10063ace:	6840      	ldr	r0, [r0, #4]
10063ad0:	9904      	ldr	r1, [sp, #16]
10063ad2:	7381      	strb	r1, [r0, #14]
10063ad4:	bd10      	pop	{r4, pc}
10063ad6:	46c0      	nop			@ (mov r8, r8)

10063ad8 <__arm_cp.9_0>:
10063ad8:	20000f6c 	.word	0x20000f6c

10063adc <smp_pp1_per_rxp_pairing_request>:
10063adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063ade:	460c      	mov	r4, r1
10063ae0:	4607      	mov	r7, r0
10063ae2:	2501      	movs	r5, #1
10063ae4:	4628      	mov	r0, r5
10063ae6:	f7ff fe3b 	bl	10063760 <smp_pp1_get_next_free_pairing_idx>
10063aea:	2802      	cmp	r0, #2
10063aec:	d901      	bls.n	10063af2 <smp_pp1_per_rxp_pairing_request+0x16>
10063aee:	2038      	movs	r0, #56	@ 0x38
10063af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063af2:	4606      	mov	r6, r0
10063af4:	4638      	mov	r0, r7
10063af6:	f7ff fe53 	bl	100637a0 <smp_pp1_reqrsp_pdu_params_check>
10063afa:	2800      	cmp	r0, #0
10063afc:	d010      	beq.n	10063b20 <smp_pp1_per_rxp_pairing_request+0x44>
10063afe:	4601      	mov	r1, r0
10063b00:	4810      	ldr	r0, [pc, #64]	@ (10063b44 <__arm_cp.1_0>)
10063b02:	6800      	ldr	r0, [r0, #0]
10063b04:	22b1      	movs	r2, #177	@ 0xb1
10063b06:	5c82      	ldrb	r2, [r0, r2]
10063b08:	2a00      	cmp	r2, #0
10063b0a:	d003      	beq.n	10063b14 <smp_pp1_per_rxp_pairing_request+0x38>
10063b0c:	30b1      	adds	r0, #177	@ 0xb1
10063b0e:	40b5      	lsls	r5, r6
10063b10:	43aa      	bics	r2, r5
10063b12:	7002      	strb	r2, [r0, #0]
10063b14:	2200      	movs	r2, #0
10063b16:	2301      	movs	r3, #1
10063b18:	4620      	mov	r0, r4
10063b1a:	f7ff fe0b 	bl	10063734 <smp_pp3_pairing_failed_send>
10063b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b20:	7526      	strb	r6, [r4, #20]
10063b22:	2101      	movs	r1, #1
10063b24:	4638      	mov	r0, r7
10063b26:	4622      	mov	r2, r4
10063b28:	f7ff fe5e 	bl	100637e8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10063b2c:	4620      	mov	r0, r4
10063b2e:	f7ff ff73 	bl	10063a18 <smp_pp1_hndl_pairing_response_mode_through_event>
10063b32:	2800      	cmp	r0, #0
10063b34:	d001      	beq.n	10063b3a <smp_pp1_per_rxp_pairing_request+0x5e>
10063b36:	2000      	movs	r0, #0
10063b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b3a:	4620      	mov	r0, r4
10063b3c:	f000 f804 	bl	10063b48 <smp_pp1_per_send_pairing_response>
10063b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b42:	46c0      	nop			@ (mov r8, r8)

10063b44 <__arm_cp.1_0>:
10063b44:	20000f6c 	.word	0x20000f6c

10063b48 <smp_pp1_per_send_pairing_response>:
10063b48:	b5f0      	push	{r4, r5, r6, r7, lr}
10063b4a:	b087      	sub	sp, #28
10063b4c:	4604      	mov	r4, r0
10063b4e:	a806      	add	r0, sp, #24
10063b50:	2600      	movs	r6, #0
10063b52:	7006      	strb	r6, [r0, #0]
10063b54:	8921      	ldrh	r1, [r4, #8]
10063b56:	220b      	movs	r2, #11
10063b58:	4630      	mov	r0, r6
10063b5a:	f7ee f9e9 	bl	10051f30 <ACL_pkt_get>
10063b5e:	2800      	cmp	r0, #0
10063b60:	d01b      	beq.n	10063b9a <smp_pp1_per_send_pairing_response+0x52>
10063b62:	9005      	str	r0, [sp, #20]
10063b64:	20b0      	movs	r0, #176	@ 0xb0
10063b66:	72a0      	strb	r0, [r4, #10]
10063b68:	75e6      	strb	r6, [r4, #23]
10063b6a:	7be0      	ldrb	r0, [r4, #15]
10063b6c:	212f      	movs	r1, #47	@ 0x2f
10063b6e:	4001      	ands	r1, r0
10063b70:	73e1      	strb	r1, [r4, #15]
10063b72:	4f43      	ldr	r7, [pc, #268]	@ (10063c80 <__arm_cp.2_0>)
10063b74:	683d      	ldr	r5, [r7, #0]
10063b76:	7d20      	ldrb	r0, [r4, #20]
10063b78:	2101      	movs	r1, #1
10063b7a:	9104      	str	r1, [sp, #16]
10063b7c:	f7ff fe0a 	bl	10063794 <smp_pp1_get_pairing_pdu_offset>
10063b80:	1940      	adds	r0, r0, r5
10063b82:	21b7      	movs	r1, #183	@ 0xb7
10063b84:	5c45      	ldrb	r5, [r0, r1]
10063b86:	6838      	ldr	r0, [r7, #0]
10063b88:	2132      	movs	r1, #50	@ 0x32
10063b8a:	5c40      	ldrb	r0, [r0, r1]
10063b8c:	2802      	cmp	r0, #2
10063b8e:	d106      	bne.n	10063b9e <smp_pp1_per_send_pairing_response+0x56>
10063b90:	2008      	movs	r0, #8
10063b92:	4028      	ands	r0, r5
10063b94:	d103      	bne.n	10063b9e <smp_pp1_per_send_pairing_response+0x56>
10063b96:	2103      	movs	r1, #3
10063b98:	e051      	b.n	10063c3e <smp_pp1_per_send_pairing_response+0xf6>
10063b9a:	2688      	movs	r6, #136	@ 0x88
10063b9c:	e061      	b.n	10063c62 <smp_pp1_per_send_pairing_response+0x11a>
10063b9e:	7e20      	ldrb	r0, [r4, #24]
10063ba0:	07c0      	lsls	r0, r0, #31
10063ba2:	d105      	bne.n	10063bb0 <smp_pp1_per_send_pairing_response+0x68>
10063ba4:	af06      	add	r7, sp, #24
10063ba6:	4638      	mov	r0, r7
10063ba8:	f7ff ff1c 	bl	100639e4 <smp_pp1_auth_req_field_generate_from_device_config>
10063bac:	7838      	ldrb	r0, [r7, #0]
10063bae:	e002      	b.n	10063bb6 <smp_pp1_per_send_pairing_response+0x6e>
10063bb0:	7d60      	ldrb	r0, [r4, #21]
10063bb2:	a906      	add	r1, sp, #24
10063bb4:	7008      	strb	r0, [r1, #0]
10063bb6:	4005      	ands	r5, r0
10063bb8:	2018      	movs	r0, #24
10063bba:	4028      	ands	r0, r5
10063bbc:	7de1      	ldrb	r1, [r4, #23]
10063bbe:	4301      	orrs	r1, r0
10063bc0:	75e1      	strb	r1, [r4, #23]
10063bc2:	0708      	lsls	r0, r1, #28
10063bc4:	d401      	bmi.n	10063bca <smp_pp1_per_send_pairing_response+0x82>
10063bc6:	27b4      	movs	r7, #180	@ 0xb4
10063bc8:	e006      	b.n	10063bd8 <smp_pp1_per_send_pairing_response+0x90>
10063bca:	4620      	mov	r0, r4
10063bcc:	f000 fd31 	bl	10064632 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>
10063bd0:	4601      	mov	r1, r0
10063bd2:	2800      	cmp	r0, #0
10063bd4:	d133      	bne.n	10063c3e <smp_pp1_per_send_pairing_response+0xf6>
10063bd6:	27b2      	movs	r7, #178	@ 0xb2
10063bd8:	4620      	mov	r0, r4
10063bda:	f000 fcdf 	bl	1006459c <smp_oob_check_is_remote_data_present>
10063bde:	9806      	ldr	r0, [sp, #24]
10063be0:	0741      	lsls	r1, r0, #29
10063be2:	0fc9      	lsrs	r1, r1, #31
10063be4:	73e1      	strb	r1, [r4, #15]
10063be6:	07c0      	lsls	r0, r0, #31
10063be8:	0f80      	lsrs	r0, r0, #30
10063bea:	73a0      	strb	r0, [r4, #14]
10063bec:	4620      	mov	r0, r4
10063bee:	f7ff fe0d 	bl	1006380c <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
10063bf2:	4620      	mov	r0, r4
10063bf4:	f7ff fe56 	bl	100638a4 <smp_pp1_key_generation_method_selection>
10063bf8:	4601      	mov	r1, r0
10063bfa:	2800      	cmp	r0, #0
10063bfc:	d11f      	bne.n	10063c3e <smp_pp1_per_send_pairing_response+0xf6>
10063bfe:	7ce0      	ldrb	r0, [r4, #19]
10063c00:	2802      	cmp	r0, #2
10063c02:	d104      	bne.n	10063c0e <smp_pp1_per_send_pairing_response+0xc6>
10063c04:	7be0      	ldrb	r0, [r4, #15]
10063c06:	06c0      	lsls	r0, r0, #27
10063c08:	d401      	bmi.n	10063c0e <smp_pp1_per_send_pairing_response+0xc6>
10063c0a:	204d      	movs	r0, #77	@ 0x4d
10063c0c:	43c7      	mvns	r7, r0
10063c0e:	481c      	ldr	r0, [pc, #112]	@ (10063c80 <__arm_cp.2_0>)
10063c10:	6800      	ldr	r0, [r0, #0]
10063c12:	2135      	movs	r1, #53	@ 0x35
10063c14:	5c40      	ldrb	r0, [r0, r1]
10063c16:	a906      	add	r1, sp, #24
10063c18:	780b      	ldrb	r3, [r1, #0]
10063c1a:	7b62      	ldrb	r2, [r4, #13]
10063c1c:	7c61      	ldrb	r1, [r4, #17]
10063c1e:	7ca5      	ldrb	r5, [r4, #18]
10063c20:	9000      	str	r0, [sp, #0]
10063c22:	9101      	str	r1, [sp, #4]
10063c24:	9502      	str	r5, [sp, #8]
10063c26:	2102      	movs	r1, #2
10063c28:	9d05      	ldr	r5, [sp, #20]
10063c2a:	4628      	mov	r0, r5
10063c2c:	f7ff ff38 	bl	10063aa0 <smp_pp1_pairing_packet_build>
10063c30:	4620      	mov	r0, r4
10063c32:	4629      	mov	r1, r5
10063c34:	f7ff fb82 	bl	1006333c <smp_dep_l2c_send_acl_packet>
10063c38:	4601      	mov	r1, r0
10063c3a:	2800      	cmp	r0, #0
10063c3c:	d014      	beq.n	10063c68 <smp_pp1_per_send_pairing_response+0x120>
10063c3e:	4810      	ldr	r0, [pc, #64]	@ (10063c80 <__arm_cp.2_0>)
10063c40:	6800      	ldr	r0, [r0, #0]
10063c42:	22b1      	movs	r2, #177	@ 0xb1
10063c44:	5c82      	ldrb	r2, [r0, r2]
10063c46:	2a00      	cmp	r2, #0
10063c48:	d005      	beq.n	10063c56 <smp_pp1_per_send_pairing_response+0x10e>
10063c4a:	30b1      	adds	r0, #177	@ 0xb1
10063c4c:	7d23      	ldrb	r3, [r4, #20]
10063c4e:	9d04      	ldr	r5, [sp, #16]
10063c50:	409d      	lsls	r5, r3
10063c52:	43aa      	bics	r2, r5
10063c54:	7002      	strb	r2, [r0, #0]
10063c56:	2301      	movs	r3, #1
10063c58:	4620      	mov	r0, r4
10063c5a:	9a05      	ldr	r2, [sp, #20]
10063c5c:	f7ff fd6a 	bl	10063734 <smp_pp3_pairing_failed_send>
10063c60:	4606      	mov	r6, r0
10063c62:	4630      	mov	r0, r6
10063c64:	b007      	add	sp, #28
10063c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063c68:	7ae0      	ldrb	r0, [r4, #11]
10063c6a:	21f8      	movs	r1, #248	@ 0xf8
10063c6c:	4001      	ands	r1, r0
10063c6e:	72e1      	strb	r1, [r4, #11]
10063c70:	9805      	ldr	r0, [sp, #20]
10063c72:	4631      	mov	r1, r6
10063c74:	4622      	mov	r2, r4
10063c76:	f7ff fdb7 	bl	100637e8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10063c7a:	72a7      	strb	r7, [r4, #10]
10063c7c:	e7f1      	b.n	10063c62 <smp_pp1_per_send_pairing_response+0x11a>
10063c7e:	46c0      	nop			@ (mov r8, r8)

10063c80 <__arm_cp.2_0>:
10063c80:	20000f6c 	.word	0x20000f6c

10063c84 <smp_pp2_per_rx_process_pairing_confirm>:
10063c84:	b5f0      	push	{r4, r5, r6, r7, lr}
10063c86:	b089      	sub	sp, #36	@ 0x24
10063c88:	460c      	mov	r4, r1
10063c8a:	4607      	mov	r7, r0
10063c8c:	8909      	ldrh	r1, [r1, #8]
10063c8e:	2500      	movs	r5, #0
10063c90:	2215      	movs	r2, #21
10063c92:	4628      	mov	r0, r5
10063c94:	f7ee f94c 	bl	10051f30 <ACL_pkt_get>
10063c98:	2800      	cmp	r0, #0
10063c9a:	d013      	beq.n	10063cc4 <smp_pp2_per_rx_process_pairing_confirm+0x40>
10063c9c:	4606      	mov	r6, r0
10063c9e:	2f00      	cmp	r7, #0
10063ca0:	d006      	beq.n	10063cb0 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10063ca2:	4623      	mov	r3, r4
10063ca4:	3328      	adds	r3, #40	@ 0x28
10063ca6:	2105      	movs	r1, #5
10063ca8:	2210      	movs	r2, #16
10063caa:	4638      	mov	r0, r7
10063cac:	f7ee f97e 	bl	10051fac <ACL_pkt_read>
10063cb0:	7de0      	ldrb	r0, [r4, #23]
10063cb2:	0700      	lsls	r0, r0, #28
10063cb4:	d408      	bmi.n	10063cc8 <smp_pp2_per_rx_process_pairing_confirm+0x44>
10063cb6:	4621      	mov	r1, r4
10063cb8:	3148      	adds	r1, #72	@ 0x48
10063cba:	aa05      	add	r2, sp, #20
10063cbc:	4620      	mov	r0, r4
10063cbe:	f000 f831 	bl	10063d24 <smp_pp2_per_lep_confirm_value_compute>
10063cc2:	e007      	b.n	10063cd4 <smp_pp2_per_rx_process_pairing_confirm+0x50>
10063cc4:	2088      	movs	r0, #136	@ 0x88
10063cc6:	e019      	b.n	10063cfc <smp_pp2_per_rx_process_pairing_confirm+0x78>
10063cc8:	a805      	add	r0, sp, #20
10063cca:	9002      	str	r0, [sp, #8]
10063ccc:	9401      	str	r4, [sp, #4]
10063cce:	a801      	add	r0, sp, #4
10063cd0:	f000 f961 	bl	10063f96 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>
10063cd4:	2011      	movs	r0, #17
10063cd6:	8070      	strh	r0, [r6, #2]
10063cd8:	6870      	ldr	r0, [r6, #4]
10063cda:	2103      	movs	r1, #3
10063cdc:	7201      	strb	r1, [r0, #8]
10063cde:	2105      	movs	r1, #5
10063ce0:	2210      	movs	r2, #16
10063ce2:	ab05      	add	r3, sp, #20
10063ce4:	4630      	mov	r0, r6
10063ce6:	f7ee f983 	bl	10051ff0 <ACL_pkt_write>
10063cea:	4620      	mov	r0, r4
10063cec:	4631      	mov	r1, r6
10063cee:	f7ff fb25 	bl	1006333c <smp_dep_l2c_send_acl_packet>
10063cf2:	2800      	cmp	r0, #0
10063cf4:	d102      	bne.n	10063cfc <smp_pp2_per_rx_process_pairing_confirm+0x78>
10063cf6:	20b6      	movs	r0, #182	@ 0xb6
10063cf8:	72a0      	strb	r0, [r4, #10]
10063cfa:	4628      	mov	r0, r5
10063cfc:	b009      	add	sp, #36	@ 0x24
10063cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063d00 <smp_pp2_per_auth_stage_1_start>:
10063d00:	b510      	push	{r4, lr}
10063d02:	4604      	mov	r4, r0
10063d04:	3048      	adds	r0, #72	@ 0x48
10063d06:	2110      	movs	r1, #16
10063d08:	2200      	movs	r2, #0
10063d0a:	f7fc f958 	bl	1005ffbe <HAL_Generate_Random_Bytes_To>
10063d0e:	7de0      	ldrb	r0, [r4, #23]
10063d10:	0700      	lsls	r0, r0, #28
10063d12:	d402      	bmi.n	10063d1a <smp_pp2_per_auth_stage_1_start+0x1a>
10063d14:	20b5      	movs	r0, #181	@ 0xb5
10063d16:	72a0      	strb	r0, [r4, #10]
10063d18:	bd10      	pop	{r4, pc}
10063d1a:	4620      	mov	r0, r4
10063d1c:	f000 f93a 	bl	10063f94 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>
10063d20:	bd10      	pop	{r4, pc}
	...

10063d24 <smp_pp2_per_lep_confirm_value_compute>:
10063d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10063d26:	b09b      	sub	sp, #108	@ 0x6c
10063d28:	4614      	mov	r4, r2
10063d2a:	9106      	str	r1, [sp, #24]
10063d2c:	4607      	mov	r7, r0
10063d2e:	ae0f      	add	r6, sp, #60	@ 0x3c
10063d30:	2500      	movs	r5, #0
10063d32:	222e      	movs	r2, #46	@ 0x2e
10063d34:	4630      	mov	r0, r6
10063d36:	4629      	mov	r1, r5
10063d38:	f7eb fd94 	bl	1004f864 <BLEPLAT_MemSet>
10063d3c:	4630      	mov	r0, r6
10063d3e:	3010      	adds	r0, #16
10063d40:	2210      	movs	r2, #16
10063d42:	9906      	ldr	r1, [sp, #24]
10063d44:	f7eb fd7e 	bl	1004f844 <BLEPLAT_MemCpy>
10063d48:	3620      	adds	r6, #32
10063d4a:	7cf8      	ldrb	r0, [r7, #19]
10063d4c:	2803      	cmp	r0, #3
10063d4e:	d00d      	beq.n	10063d6c <smp_pp2_per_lep_confirm_value_compute+0x48>
10063d50:	2802      	cmp	r0, #2
10063d52:	d112      	bne.n	10063d7a <smp_pp2_per_lep_confirm_value_compute+0x56>
10063d54:	4844      	ldr	r0, [pc, #272]	@ (10063e68 <__arm_cp.16_0>)
10063d56:	6800      	ldr	r0, [r0, #0]
10063d58:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10063d5a:	a90f      	add	r1, sp, #60	@ 0x3c
10063d5c:	7008      	strb	r0, [r1, #0]
10063d5e:	0a02      	lsrs	r2, r0, #8
10063d60:	704a      	strb	r2, [r1, #1]
10063d62:	0c02      	lsrs	r2, r0, #16
10063d64:	708a      	strb	r2, [r1, #2]
10063d66:	0e00      	lsrs	r0, r0, #24
10063d68:	70c8      	strb	r0, [r1, #3]
10063d6a:	e006      	b.n	10063d7a <smp_pp2_per_lep_confirm_value_compute+0x56>
10063d6c:	483e      	ldr	r0, [pc, #248]	@ (10063e68 <__arm_cp.16_0>)
10063d6e:	6801      	ldr	r1, [r0, #0]
10063d70:	3144      	adds	r1, #68	@ 0x44
10063d72:	a80f      	add	r0, sp, #60	@ 0x3c
10063d74:	2210      	movs	r2, #16
10063d76:	f7eb fd65 	bl	1004f844 <BLEPLAT_MemCpy>
10063d7a:	7d38      	ldrb	r0, [r7, #20]
10063d7c:	2101      	movs	r1, #1
10063d7e:	9105      	str	r1, [sp, #20]
10063d80:	f7ff fd08 	bl	10063794 <smp_pp1_get_pairing_pdu_offset>
10063d84:	9002      	str	r0, [sp, #8]
10063d86:	7d38      	ldrb	r0, [r7, #20]
10063d88:	4629      	mov	r1, r5
10063d8a:	f7ff fd03 	bl	10063794 <smp_pp1_get_pairing_pdu_offset>
10063d8e:	9001      	str	r0, [sp, #4]
10063d90:	2061      	movs	r0, #97	@ 0x61
10063d92:	5c38      	ldrb	r0, [r7, r0]
10063d94:	71f0      	strb	r0, [r6, #7]
10063d96:	9606      	str	r6, [sp, #24]
10063d98:	ae0f      	add	r6, sp, #60	@ 0x3c
10063d9a:	4630      	mov	r0, r6
10063d9c:	3028      	adds	r0, #40	@ 0x28
10063d9e:	4639      	mov	r1, r7
10063da0:	3162      	adds	r1, #98	@ 0x62
10063da2:	2206      	movs	r2, #6
10063da4:	9200      	str	r2, [sp, #0]
10063da6:	4b31      	ldr	r3, [pc, #196]	@ (10063e6c <__arm_cp.16_1>)
10063da8:	9004      	str	r0, [sp, #16]
10063daa:	4798      	blx	r3
10063dac:	7878      	ldrb	r0, [r7, #1]
10063dae:	9906      	ldr	r1, [sp, #24]
10063db0:	7008      	strb	r0, [r1, #0]
10063db2:	4630      	mov	r0, r6
10063db4:	3021      	adds	r0, #33	@ 0x21
10063db6:	1cb9      	adds	r1, r7, #2
10063db8:	9003      	str	r0, [sp, #12]
10063dba:	9a00      	ldr	r2, [sp, #0]
10063dbc:	4b2b      	ldr	r3, [pc, #172]	@ (10063e6c <__arm_cp.16_1>)
10063dbe:	4798      	blx	r3
10063dc0:	4829      	ldr	r0, [pc, #164]	@ (10063e68 <__arm_cp.16_0>)
10063dc2:	6800      	ldr	r0, [r0, #0]
10063dc4:	9901      	ldr	r1, [sp, #4]
10063dc6:	1841      	adds	r1, r0, r1
10063dc8:	31b4      	adds	r1, #180	@ 0xb4
10063dca:	af0b      	add	r7, sp, #44	@ 0x2c
10063dcc:	4638      	mov	r0, r7
10063dce:	3009      	adds	r0, #9
10063dd0:	2207      	movs	r2, #7
10063dd2:	9201      	str	r2, [sp, #4]
10063dd4:	4b25      	ldr	r3, [pc, #148]	@ (10063e6c <__arm_cp.16_1>)
10063dd6:	4798      	blx	r3
10063dd8:	4823      	ldr	r0, [pc, #140]	@ (10063e68 <__arm_cp.16_0>)
10063dda:	6800      	ldr	r0, [r0, #0]
10063ddc:	9902      	ldr	r1, [sp, #8]
10063dde:	1841      	adds	r1, r0, r1
10063de0:	31b4      	adds	r1, #180	@ 0xb4
10063de2:	1cb8      	adds	r0, r7, #2
10063de4:	9a01      	ldr	r2, [sp, #4]
10063de6:	4b21      	ldr	r3, [pc, #132]	@ (10063e6c <__arm_cp.16_1>)
10063de8:	4798      	blx	r3
10063dea:	1c78      	adds	r0, r7, #1
10063dec:	9906      	ldr	r1, [sp, #24]
10063dee:	1dc9      	adds	r1, r1, #7
10063df0:	9a05      	ldr	r2, [sp, #20]
10063df2:	4b1e      	ldr	r3, [pc, #120]	@ (10063e6c <__arm_cp.16_1>)
10063df4:	4798      	blx	r3
10063df6:	4b1d      	ldr	r3, [pc, #116]	@ (10063e6c <__arm_cp.16_1>)
10063df8:	4638      	mov	r0, r7
10063dfa:	9906      	ldr	r1, [sp, #24]
10063dfc:	9a05      	ldr	r2, [sp, #20]
10063dfe:	4798      	blx	r3
10063e00:	3610      	adds	r6, #16
10063e02:	2d10      	cmp	r5, #16
10063e04:	d007      	beq.n	10063e16 <smp_pp2_per_lep_confirm_value_compute+0xf2>
10063e06:	5d70      	ldrb	r0, [r6, r5]
10063e08:	a90b      	add	r1, sp, #44	@ 0x2c
10063e0a:	5d49      	ldrb	r1, [r1, r5]
10063e0c:	4041      	eors	r1, r0
10063e0e:	a807      	add	r0, sp, #28
10063e10:	5541      	strb	r1, [r0, r5]
10063e12:	1c6d      	adds	r5, r5, #1
10063e14:	e7f5      	b.n	10063e02 <smp_pp2_per_lep_confirm_value_compute+0xde>
10063e16:	a80f      	add	r0, sp, #60	@ 0x3c
10063e18:	a907      	add	r1, sp, #28
10063e1a:	4622      	mov	r2, r4
10063e1c:	f7f2 fc54 	bl	100566c8 <hci_le_encrypt>
10063e20:	ae0b      	add	r6, sp, #44	@ 0x2c
10063e22:	2500      	movs	r5, #0
10063e24:	2210      	movs	r2, #16
10063e26:	4630      	mov	r0, r6
10063e28:	4629      	mov	r1, r5
10063e2a:	f7eb fd1b 	bl	1004f864 <BLEPLAT_MemSet>
10063e2e:	2706      	movs	r7, #6
10063e30:	4630      	mov	r0, r6
10063e32:	9904      	ldr	r1, [sp, #16]
10063e34:	463a      	mov	r2, r7
10063e36:	f7eb fd05 	bl	1004f844 <BLEPLAT_MemCpy>
10063e3a:	1db0      	adds	r0, r6, #6
10063e3c:	9903      	ldr	r1, [sp, #12]
10063e3e:	463a      	mov	r2, r7
10063e40:	f7eb fd00 	bl	1004f844 <BLEPLAT_MemCpy>
10063e44:	2d10      	cmp	r5, #16
10063e46:	d007      	beq.n	10063e58 <smp_pp2_per_lep_confirm_value_compute+0x134>
10063e48:	5d60      	ldrb	r0, [r4, r5]
10063e4a:	a90b      	add	r1, sp, #44	@ 0x2c
10063e4c:	5d49      	ldrb	r1, [r1, r5]
10063e4e:	4041      	eors	r1, r0
10063e50:	a807      	add	r0, sp, #28
10063e52:	5541      	strb	r1, [r0, r5]
10063e54:	1c6d      	adds	r5, r5, #1
10063e56:	e7f5      	b.n	10063e44 <smp_pp2_per_lep_confirm_value_compute+0x120>
10063e58:	a80f      	add	r0, sp, #60	@ 0x3c
10063e5a:	a907      	add	r1, sp, #28
10063e5c:	4622      	mov	r2, r4
10063e5e:	f7f2 fc33 	bl	100566c8 <hci_le_encrypt>
10063e62:	b01b      	add	sp, #108	@ 0x6c
10063e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063e66:	46c0      	nop			@ (mov r8, r8)

10063e68 <__arm_cp.16_0>:
10063e68:	20000f6c 	.word	0x20000f6c

10063e6c <__arm_cp.16_1>:
10063e6c:	1004f845 	.word	0x1004f845

10063e70 <smp_pp2_per_rx_process_pairing_random>:
10063e70:	b5f0      	push	{r4, r5, r6, r7, lr}
10063e72:	b08b      	sub	sp, #44	@ 0x2c
10063e74:	460d      	mov	r5, r1
10063e76:	4606      	mov	r6, r0
10063e78:	2400      	movs	r4, #0
10063e7a:	9402      	str	r4, [sp, #8]
10063e7c:	8909      	ldrh	r1, [r1, #8]
10063e7e:	2215      	movs	r2, #21
10063e80:	4620      	mov	r0, r4
10063e82:	f7ee f855 	bl	10051f30 <ACL_pkt_get>
10063e86:	2800      	cmp	r0, #0
10063e88:	d020      	beq.n	10063ecc <smp_pp2_per_rx_process_pairing_random+0x5c>
10063e8a:	4607      	mov	r7, r0
10063e8c:	462b      	mov	r3, r5
10063e8e:	3338      	adds	r3, #56	@ 0x38
10063e90:	2105      	movs	r1, #5
10063e92:	2210      	movs	r2, #16
10063e94:	4630      	mov	r0, r6
10063e96:	461e      	mov	r6, r3
10063e98:	f7ee f888 	bl	10051fac <ACL_pkt_read>
10063e9c:	7de8      	ldrb	r0, [r5, #23]
10063e9e:	0700      	lsls	r0, r0, #28
10063ea0:	d416      	bmi.n	10063ed0 <smp_pp2_per_rx_process_pairing_random+0x60>
10063ea2:	9400      	str	r4, [sp, #0]
10063ea4:	4634      	mov	r4, r6
10063ea6:	ae03      	add	r6, sp, #12
10063ea8:	4628      	mov	r0, r5
10063eaa:	4621      	mov	r1, r4
10063eac:	4632      	mov	r2, r6
10063eae:	f7ff ff39 	bl	10063d24 <smp_pp2_per_lep_confirm_value_compute>
10063eb2:	4629      	mov	r1, r5
10063eb4:	3128      	adds	r1, #40	@ 0x28
10063eb6:	2210      	movs	r2, #16
10063eb8:	4630      	mov	r0, r6
10063eba:	4626      	mov	r6, r4
10063ebc:	9c00      	ldr	r4, [sp, #0]
10063ebe:	f7eb fce1 	bl	1004f884 <BLEPLAT_MemCmp>
10063ec2:	a901      	add	r1, sp, #4
10063ec4:	22bc      	movs	r2, #188	@ 0xbc
10063ec6:	700a      	strb	r2, [r1, #0]
10063ec8:	9002      	str	r0, [sp, #8]
10063eca:	e00c      	b.n	10063ee6 <smp_pp2_per_rx_process_pairing_random+0x76>
10063ecc:	2488      	movs	r4, #136	@ 0x88
10063ece:	e05b      	b.n	10063f88 <smp_pp2_per_rx_process_pairing_random+0x118>
10063ed0:	a801      	add	r0, sp, #4
10063ed2:	900a      	str	r0, [sp, #40]	@ 0x28
10063ed4:	a802      	add	r0, sp, #8
10063ed6:	9009      	str	r0, [sp, #36]	@ 0x24
10063ed8:	a803      	add	r0, sp, #12
10063eda:	9008      	str	r0, [sp, #32]
10063edc:	9507      	str	r5, [sp, #28]
10063ede:	a807      	add	r0, sp, #28
10063ee0:	f000 f85a 	bl	10063f98 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>
10063ee4:	9802      	ldr	r0, [sp, #8]
10063ee6:	2800      	cmp	r0, #0
10063ee8:	d006      	beq.n	10063ef8 <smp_pp2_per_rx_process_pairing_random+0x88>
10063eea:	2104      	movs	r1, #4
10063eec:	2301      	movs	r3, #1
10063eee:	4628      	mov	r0, r5
10063ef0:	463a      	mov	r2, r7
10063ef2:	f7ff fc1f 	bl	10063734 <smp_pp3_pairing_failed_send>
10063ef6:	e01b      	b.n	10063f30 <smp_pp2_per_rx_process_pairing_random+0xc0>
10063ef8:	2011      	movs	r0, #17
10063efa:	8078      	strh	r0, [r7, #2]
10063efc:	6878      	ldr	r0, [r7, #4]
10063efe:	2104      	movs	r1, #4
10063f00:	7201      	strb	r1, [r0, #8]
10063f02:	462b      	mov	r3, r5
10063f04:	3348      	adds	r3, #72	@ 0x48
10063f06:	2105      	movs	r1, #5
10063f08:	2210      	movs	r2, #16
10063f0a:	4638      	mov	r0, r7
10063f0c:	f7ee f870 	bl	10051ff0 <ACL_pkt_write>
10063f10:	4628      	mov	r0, r5
10063f12:	4639      	mov	r1, r7
10063f14:	f7ff fa12 	bl	1006333c <smp_dep_l2c_send_acl_packet>
10063f18:	2800      	cmp	r0, #0
10063f1a:	d109      	bne.n	10063f30 <smp_pp2_per_rx_process_pairing_random+0xc0>
10063f1c:	9801      	ldr	r0, [sp, #4]
10063f1e:	72a8      	strb	r0, [r5, #10]
10063f20:	481b      	ldr	r0, [pc, #108]	@ (10063f90 <__arm_cp.17_0>)
10063f22:	6800      	ldr	r0, [r0, #0]
10063f24:	2135      	movs	r1, #53	@ 0x35
10063f26:	5c40      	ldrb	r0, [r0, r1]
10063f28:	7c29      	ldrb	r1, [r5, #16]
10063f2a:	4281      	cmp	r1, r0
10063f2c:	d900      	bls.n	10063f30 <smp_pp2_per_rx_process_pairing_random+0xc0>
10063f2e:	7428      	strb	r0, [r5, #16]
10063f30:	9802      	ldr	r0, [sp, #8]
10063f32:	2800      	cmp	r0, #0
10063f34:	d128      	bne.n	10063f88 <smp_pp2_per_rx_process_pairing_random+0x118>
10063f36:	7de8      	ldrb	r0, [r5, #23]
10063f38:	0700      	lsls	r0, r0, #28
10063f3a:	d425      	bmi.n	10063f88 <smp_pp2_per_rx_process_pairing_random+0x118>
10063f3c:	a807      	add	r0, sp, #28
10063f3e:	2400      	movs	r4, #0
10063f40:	2210      	movs	r2, #16
10063f42:	4621      	mov	r1, r4
10063f44:	f7eb fc8e 	bl	1004f864 <BLEPLAT_MemSet>
10063f48:	7ce8      	ldrb	r0, [r5, #19]
10063f4a:	2803      	cmp	r0, #3
10063f4c:	d00d      	beq.n	10063f6a <smp_pp2_per_rx_process_pairing_random+0xfa>
10063f4e:	2802      	cmp	r0, #2
10063f50:	d112      	bne.n	10063f78 <smp_pp2_per_rx_process_pairing_random+0x108>
10063f52:	480f      	ldr	r0, [pc, #60]	@ (10063f90 <__arm_cp.17_0>)
10063f54:	6800      	ldr	r0, [r0, #0]
10063f56:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10063f58:	a907      	add	r1, sp, #28
10063f5a:	7008      	strb	r0, [r1, #0]
10063f5c:	0a02      	lsrs	r2, r0, #8
10063f5e:	704a      	strb	r2, [r1, #1]
10063f60:	0c02      	lsrs	r2, r0, #16
10063f62:	708a      	strb	r2, [r1, #2]
10063f64:	0e00      	lsrs	r0, r0, #24
10063f66:	70c8      	strb	r0, [r1, #3]
10063f68:	e006      	b.n	10063f78 <smp_pp2_per_rx_process_pairing_random+0x108>
10063f6a:	4809      	ldr	r0, [pc, #36]	@ (10063f90 <__arm_cp.17_0>)
10063f6c:	6801      	ldr	r1, [r0, #0]
10063f6e:	3144      	adds	r1, #68	@ 0x44
10063f70:	a807      	add	r0, sp, #28
10063f72:	2210      	movs	r2, #16
10063f74:	f7eb fc66 	bl	1004f844 <BLEPLAT_MemCpy>
10063f78:	4629      	mov	r1, r5
10063f7a:	3148      	adds	r1, #72	@ 0x48
10063f7c:	3528      	adds	r5, #40	@ 0x28
10063f7e:	a807      	add	r0, sp, #28
10063f80:	4632      	mov	r2, r6
10063f82:	462b      	mov	r3, r5
10063f84:	f7fa fcd0 	bl	1005e928 <smp_crt_s1_generate_stk>
10063f88:	4620      	mov	r0, r4
10063f8a:	b00b      	add	sp, #44	@ 0x2c
10063f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063f8e:	46c0      	nop			@ (mov r8, r8)

10063f90 <__arm_cp.17_0>:
10063f90:	20000f6c 	.word	0x20000f6c

10063f94 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>:
10063f94:	4770      	bx	lr

10063f96 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>:
10063f96:	4770      	bx	lr

10063f98 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>:
10063f98:	4770      	bx	lr

10063f9a <smp_pp3_keys_distribution_start>:
10063f9a:	b580      	push	{r7, lr}
10063f9c:	2901      	cmp	r1, #1
10063f9e:	d111      	bne.n	10063fc4 <smp_pp3_keys_distribution_start+0x2a>
10063fa0:	7c42      	ldrb	r2, [r0, #17]
10063fa2:	0753      	lsls	r3, r2, #29
10063fa4:	d005      	beq.n	10063fb2 <smp_pp3_keys_distribution_start+0x18>
10063fa6:	7dc3      	ldrb	r3, [r0, #23]
10063fa8:	071b      	lsls	r3, r3, #28
10063faa:	d51d      	bpl.n	10063fe8 <smp_pp3_keys_distribution_start+0x4e>
10063fac:	2306      	movs	r3, #6
10063fae:	401a      	ands	r2, r3
10063fb0:	d11a      	bne.n	10063fe8 <smp_pp3_keys_distribution_start+0x4e>
10063fb2:	2260      	movs	r2, #96	@ 0x60
10063fb4:	5c83      	ldrb	r3, [r0, r2]
10063fb6:	2201      	movs	r2, #1
10063fb8:	401a      	ands	r2, r3
10063fba:	2900      	cmp	r1, #0
10063fbc:	d006      	beq.n	10063fcc <smp_pp3_keys_distribution_start+0x32>
10063fbe:	2a00      	cmp	r2, #0
10063fc0:	d119      	bne.n	10063ff6 <smp_pp3_keys_distribution_start+0x5c>
10063fc2:	e003      	b.n	10063fcc <smp_pp3_keys_distribution_start+0x32>
10063fc4:	2900      	cmp	r1, #0
10063fc6:	d000      	beq.n	10063fca <smp_pp3_keys_distribution_start+0x30>
10063fc8:	bd80      	pop	{r7, pc}
10063fca:	2200      	movs	r2, #0
10063fcc:	7c81      	ldrb	r1, [r0, #18]
10063fce:	07cb      	lsls	r3, r1, #31
10063fd0:	d004      	beq.n	10063fdc <smp_pp3_keys_distribution_start+0x42>
10063fd2:	7dc3      	ldrb	r3, [r0, #23]
10063fd4:	071b      	lsls	r3, r3, #28
10063fd6:	d401      	bmi.n	10063fdc <smp_pp3_keys_distribution_start+0x42>
10063fd8:	21d1      	movs	r1, #209	@ 0xd1
10063fda:	e009      	b.n	10063ff0 <smp_pp3_keys_distribution_start+0x56>
10063fdc:	078b      	lsls	r3, r1, #30
10063fde:	d406      	bmi.n	10063fee <smp_pp3_keys_distribution_start+0x54>
10063fe0:	0749      	lsls	r1, r1, #29
10063fe2:	d508      	bpl.n	10063ff6 <smp_pp3_keys_distribution_start+0x5c>
10063fe4:	21d5      	movs	r1, #213	@ 0xd5
10063fe6:	e003      	b.n	10063ff0 <smp_pp3_keys_distribution_start+0x56>
10063fe8:	21d0      	movs	r1, #208	@ 0xd0
10063fea:	7281      	strb	r1, [r0, #10]
10063fec:	bd80      	pop	{r7, pc}
10063fee:	21d3      	movs	r1, #211	@ 0xd3
10063ff0:	7281      	strb	r1, [r0, #10]
10063ff2:	2a00      	cmp	r2, #0
10063ff4:	d002      	beq.n	10063ffc <smp_pp3_keys_distribution_start+0x62>
10063ff6:	f000 f804 	bl	10064002 <smp_pp3_keys_distribution_completed>
10063ffa:	bd80      	pop	{r7, pc}
10063ffc:	f000 f816 	bl	1006402c <smp_pp3_keys_distribution_send>
10064000:	bd80      	pop	{r7, pc}

10064002 <smp_pp3_keys_distribution_completed>:
10064002:	b580      	push	{r7, lr}
10064004:	2160      	movs	r1, #96	@ 0x60
10064006:	5c41      	ldrb	r1, [r0, r1]
10064008:	07c9      	lsls	r1, r1, #31
1006400a:	d106      	bne.n	1006401a <smp_pp3_keys_distribution_completed+0x18>
1006400c:	2111      	movs	r1, #17
1006400e:	5641      	ldrsb	r1, [r0, r1]
10064010:	2900      	cmp	r1, #0
10064012:	d502      	bpl.n	1006401a <smp_pp3_keys_distribution_completed+0x18>
10064014:	7e81      	ldrb	r1, [r0, #26]
10064016:	068a      	lsls	r2, r1, #26
10064018:	d402      	bmi.n	10064020 <smp_pp3_keys_distribution_completed+0x1e>
1006401a:	f7ff fad3 	bl	100635c4 <smp_pp3_pairing_completed_successful>
1006401e:	bd80      	pop	{r7, pc}
10064020:	2204      	movs	r2, #4
10064022:	4311      	orrs	r1, r2
10064024:	7681      	strb	r1, [r0, #26]
10064026:	f7ff faca 	bl	100635be <smp_start_encryption_ucfg_weak>
1006402a:	bd80      	pop	{r7, pc}

1006402c <smp_pp3_keys_distribution_send>:
1006402c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006402e:	b089      	sub	sp, #36	@ 0x24
10064030:	4604      	mov	r4, r0
10064032:	a808      	add	r0, sp, #32
10064034:	2600      	movs	r6, #0
10064036:	8006      	strh	r6, [r0, #0]
10064038:	8921      	ldrh	r1, [r4, #8]
1006403a:	2215      	movs	r2, #21
1006403c:	4630      	mov	r0, r6
1006403e:	f7ed ff77 	bl	10051f30 <ACL_pkt_get>
10064042:	2800      	cmp	r0, #0
10064044:	d02d      	beq.n	100640a2 <smp_pp3_keys_distribution_send+0x76>
10064046:	4605      	mov	r5, r0
10064048:	2060      	movs	r0, #96	@ 0x60
1006404a:	5c20      	ldrb	r0, [r4, r0]
1006404c:	06c0      	lsls	r0, r0, #27
1006404e:	d40b      	bmi.n	10064068 <smp_pp3_keys_distribution_send+0x3c>
10064050:	4627      	mov	r7, r4
10064052:	3760      	adds	r7, #96	@ 0x60
10064054:	4620      	mov	r0, r4
10064056:	301c      	adds	r0, #28
10064058:	2102      	movs	r1, #2
1006405a:	2200      	movs	r2, #0
1006405c:	f7fb ffaf 	bl	1005ffbe <HAL_Generate_Random_Bytes_To>
10064060:	7838      	ldrb	r0, [r7, #0]
10064062:	2110      	movs	r1, #16
10064064:	4301      	orrs	r1, r0
10064066:	7039      	strb	r1, [r7, #0]
10064068:	7aa0      	ldrb	r0, [r4, #10]
1006406a:	38d1      	subs	r0, #209	@ 0xd1
1006406c:	2804      	cmp	r0, #4
1006406e:	d875      	bhi.n	1006415c <smp_pp3_keys_distribution_send+0x130>
10064070:	4478      	add	r0, pc
10064072:	7900      	ldrb	r0, [r0, #4]
10064074:	0040      	lsls	r0, r0, #1
10064076:	4487      	add	pc, r0
10064078:	4e381902 	.word	0x4e381902
1006407c:	0060      	.short	0x0060
1006407e:	483c      	ldr	r0, [pc, #240]	@ (10064170 <__arm_cp.2_0>)
10064080:	6800      	ldr	r0, [r0, #0]
10064082:	4621      	mov	r1, r4
10064084:	311c      	adds	r1, #28
10064086:	3008      	adds	r0, #8
10064088:	aa08      	add	r2, sp, #32
1006408a:	ae04      	add	r6, sp, #16
1006408c:	4633      	mov	r3, r6
1006408e:	f7fa fbcd 	bl	1005e82c <smp_crt_diversify>
10064092:	6868      	ldr	r0, [r5, #4]
10064094:	2106      	movs	r1, #6
10064096:	7201      	strb	r1, [r0, #8]
10064098:	2011      	movs	r0, #17
1006409a:	8068      	strh	r0, [r5, #2]
1006409c:	7c22      	ldrb	r2, [r4, #16]
1006409e:	2105      	movs	r1, #5
100640a0:	e058      	b.n	10064154 <smp_pp3_keys_distribution_send+0x128>
100640a2:	200e      	movs	r0, #14
100640a4:	2100      	movs	r1, #0
100640a6:	f7fb fc75 	bl	1005f994 <tsk_wait_resource_idx>
100640aa:	e05f      	b.n	1006416c <smp_pp3_keys_distribution_send+0x140>
100640ac:	ae04      	add	r6, sp, #16
100640ae:	2108      	movs	r1, #8
100640b0:	9102      	str	r1, [sp, #8]
100640b2:	2200      	movs	r2, #0
100640b4:	4630      	mov	r0, r6
100640b6:	9601      	str	r6, [sp, #4]
100640b8:	f7fb ff81 	bl	1005ffbe <HAL_Generate_Random_Bytes_To>
100640bc:	4620      	mov	r0, r4
100640be:	301c      	adds	r0, #28
100640c0:	af08      	add	r7, sp, #32
100640c2:	4631      	mov	r1, r6
100640c4:	463a      	mov	r2, r7
100640c6:	f7fa fb7b 	bl	1005e7c0 <smp_sap_crt_generate_ediv>
100640ca:	200b      	movs	r0, #11
100640cc:	8068      	strh	r0, [r5, #2]
100640ce:	6868      	ldr	r0, [r5, #4]
100640d0:	2607      	movs	r6, #7
100640d2:	7206      	strb	r6, [r0, #8]
100640d4:	2105      	movs	r1, #5
100640d6:	2202      	movs	r2, #2
100640d8:	4628      	mov	r0, r5
100640da:	463b      	mov	r3, r7
100640dc:	f7ed ff88 	bl	10051ff0 <ACL_pkt_write>
100640e0:	4628      	mov	r0, r5
100640e2:	4631      	mov	r1, r6
100640e4:	9a02      	ldr	r2, [sp, #8]
100640e6:	9b01      	ldr	r3, [sp, #4]
100640e8:	e036      	b.n	10064158 <smp_pp3_keys_distribution_send+0x12c>
100640ea:	2011      	movs	r0, #17
100640ec:	8068      	strh	r0, [r5, #2]
100640ee:	6868      	ldr	r0, [r5, #4]
100640f0:	2108      	movs	r1, #8
100640f2:	7201      	strb	r1, [r0, #8]
100640f4:	a804      	add	r0, sp, #16
100640f6:	2100      	movs	r1, #0
100640f8:	2210      	movs	r2, #16
100640fa:	f7eb fbb3 	bl	1004f864 <BLEPLAT_MemSet>
100640fe:	f7ef f989 	bl	10053414 <GapIsPrivacySupported>
10064102:	2800      	cmp	r0, #0
10064104:	d002      	beq.n	1006410c <smp_pp3_keys_distribution_send+0xe0>
10064106:	a804      	add	r0, sp, #16
10064108:	f7fa fba4 	bl	1005e854 <smp_sap_crt_generate_local_irk>
1006410c:	2105      	movs	r1, #5
1006410e:	2210      	movs	r2, #16
10064110:	ab04      	add	r3, sp, #16
10064112:	4628      	mov	r0, r5
10064114:	e020      	b.n	10064158 <smp_pp3_keys_distribution_send+0x12c>
10064116:	a803      	add	r0, sp, #12
10064118:	7006      	strb	r6, [r0, #0]
1006411a:	ae04      	add	r6, sp, #16
1006411c:	4631      	mov	r1, r6
1006411e:	f7ff f8f5 	bl	1006330c <smp_dep_gap_get_local_identity_address>
10064122:	2008      	movs	r0, #8
10064124:	8068      	strh	r0, [r5, #2]
10064126:	6868      	ldr	r0, [r5, #4]
10064128:	2109      	movs	r1, #9
1006412a:	7201      	strb	r1, [r0, #8]
1006412c:	6868      	ldr	r0, [r5, #4]
1006412e:	9903      	ldr	r1, [sp, #12]
10064130:	7241      	strb	r1, [r0, #9]
10064132:	2106      	movs	r1, #6
10064134:	4628      	mov	r0, r5
10064136:	460a      	mov	r2, r1
10064138:	e00d      	b.n	10064156 <smp_pp3_keys_distribution_send+0x12a>
1006413a:	2011      	movs	r0, #17
1006413c:	8068      	strh	r0, [r5, #2]
1006413e:	6868      	ldr	r0, [r5, #4]
10064140:	210a      	movs	r1, #10
10064142:	7201      	strb	r1, [r0, #8]
10064144:	4620      	mov	r0, r4
10064146:	301c      	adds	r0, #28
10064148:	ae04      	add	r6, sp, #16
1006414a:	4631      	mov	r1, r6
1006414c:	f7fa fc04 	bl	1005e958 <smp_crt_generate_csrk>
10064150:	2105      	movs	r1, #5
10064152:	2210      	movs	r2, #16
10064154:	4628      	mov	r0, r5
10064156:	4633      	mov	r3, r6
10064158:	f7ed ff4a 	bl	10051ff0 <ACL_pkt_write>
1006415c:	4620      	mov	r0, r4
1006415e:	4629      	mov	r1, r5
10064160:	f7ff f8ec 	bl	1006333c <smp_dep_l2c_send_acl_packet>
10064164:	2800      	cmp	r0, #0
10064166:	d101      	bne.n	1006416c <smp_pp3_keys_distribution_send+0x140>
10064168:	20dd      	movs	r0, #221	@ 0xdd
1006416a:	72a0      	strb	r0, [r4, #10]
1006416c:	b009      	add	sp, #36	@ 0x24
1006416e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10064170 <__arm_cp.2_0>:
10064170:	20000ecc 	.word	0x20000ecc

10064174 <smp_pp3_keys_distribution_signaling_ack>:
10064174:	b580      	push	{r7, lr}
10064176:	7a82      	ldrb	r2, [r0, #10]
10064178:	2add      	cmp	r2, #221	@ 0xdd
1006417a:	d123      	bne.n	100641c4 <smp_pp3_keys_distribution_signaling_ack+0x50>
1006417c:	1f8a      	subs	r2, r1, #6
1006417e:	2a04      	cmp	r2, #4
10064180:	d81e      	bhi.n	100641c0 <smp_pp3_keys_distribution_signaling_ack+0x4c>
10064182:	21d2      	movs	r1, #210	@ 0xd2
10064184:	447a      	add	r2, pc
10064186:	7912      	ldrb	r2, [r2, #4]
10064188:	0052      	lsls	r2, r2, #1
1006418a:	4497      	add	pc, r2
1006418c:	07110218 	.word	0x07110218
10064190:	000a      	.short	0x000a
10064192:	7c81      	ldrb	r1, [r0, #18]
10064194:	078a      	lsls	r2, r1, #30
10064196:	d502      	bpl.n	1006419e <smp_pp3_keys_distribution_signaling_ack+0x2a>
10064198:	21d3      	movs	r1, #211	@ 0xd3
1006419a:	e010      	b.n	100641be <smp_pp3_keys_distribution_signaling_ack+0x4a>
1006419c:	7c81      	ldrb	r1, [r0, #18]
1006419e:	0749      	lsls	r1, r1, #29
100641a0:	d40c      	bmi.n	100641bc <smp_pp3_keys_distribution_signaling_ack+0x48>
100641a2:	2160      	movs	r1, #96	@ 0x60
100641a4:	5c41      	ldrb	r1, [r0, r1]
100641a6:	07c9      	lsls	r1, r1, #31
100641a8:	d104      	bne.n	100641b4 <smp_pp3_keys_distribution_signaling_ack+0x40>
100641aa:	f7ff ff2a 	bl	10064002 <smp_pp3_keys_distribution_completed>
100641ae:	bd80      	pop	{r7, pc}
100641b0:	21d4      	movs	r1, #212	@ 0xd4
100641b2:	e004      	b.n	100641be <smp_pp3_keys_distribution_signaling_ack+0x4a>
100641b4:	2101      	movs	r1, #1
100641b6:	f7ff fef0 	bl	10063f9a <smp_pp3_keys_distribution_start>
100641ba:	bd80      	pop	{r7, pc}
100641bc:	21d5      	movs	r1, #213	@ 0xd5
100641be:	7281      	strb	r1, [r0, #10]
100641c0:	f7ff ff34 	bl	1006402c <smp_pp3_keys_distribution_send>
100641c4:	bd80      	pop	{r7, pc}
	...

100641c8 <smp_pp3_keys_distribution_receive>:
100641c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100641ca:	b085      	sub	sp, #20
100641cc:	4607      	mov	r7, r0
100641ce:	6840      	ldr	r0, [r0, #4]
100641d0:	7a05      	ldrb	r5, [r0, #8]
100641d2:	1fa8      	subs	r0, r5, #6
100641d4:	2804      	cmp	r0, #4
100641d6:	d823      	bhi.n	10064220 <smp_pp3_keys_distribution_receive+0x58>
100641d8:	460c      	mov	r4, r1
100641da:	7a88      	ldrb	r0, [r1, #10]
100641dc:	2686      	movs	r6, #134	@ 0x86
100641de:	28d0      	cmp	r0, #208	@ 0xd0
100641e0:	d11f      	bne.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
100641e2:	4620      	mov	r0, r4
100641e4:	3059      	adds	r0, #89	@ 0x59
100641e6:	9001      	str	r0, [sp, #4]
100641e8:	8920      	ldrh	r0, [r4, #8]
100641ea:	f000 f995 	bl	10064518 <smp_get_remote_device_list_index>
100641ee:	4602      	mov	r2, r0
100641f0:	2000      	movs	r0, #0
100641f2:	4b44      	ldr	r3, [pc, #272]	@ (10064304 <__arm_cp.4_0>)
100641f4:	9002      	str	r0, [sp, #8]
100641f6:	4601      	mov	r1, r0
100641f8:	f7fa fe56 	bl	1005eea8 <smp_timer_reset>
100641fc:	2d06      	cmp	r5, #6
100641fe:	d005      	beq.n	1006420c <smp_pp3_keys_distribution_receive+0x44>
10064200:	2d09      	cmp	r5, #9
10064202:	d011      	beq.n	10064228 <smp_pp3_keys_distribution_receive+0x60>
10064204:	2d08      	cmp	r5, #8
10064206:	d034      	beq.n	10064272 <smp_pp3_keys_distribution_receive+0xaa>
10064208:	2d07      	cmp	r5, #7
1006420a:	d13d      	bne.n	10064288 <smp_pp3_keys_distribution_receive+0xc0>
1006420c:	7de0      	ldrb	r0, [r4, #23]
1006420e:	0700      	lsls	r0, r0, #28
10064210:	d407      	bmi.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
10064212:	7c60      	ldrb	r0, [r4, #17]
10064214:	07c0      	lsls	r0, r0, #31
10064216:	d004      	beq.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
10064218:	2d06      	cmp	r5, #6
1006421a:	d144      	bne.n	100642a6 <smp_pp3_keys_distribution_receive+0xde>
1006421c:	3428      	adds	r4, #40	@ 0x28
1006421e:	e02c      	b.n	1006427a <smp_pp3_keys_distribution_receive+0xb2>
10064220:	2684      	movs	r6, #132	@ 0x84
10064222:	4630      	mov	r0, r6
10064224:	b005      	add	sp, #20
10064226:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064228:	7c60      	ldrb	r0, [r4, #17]
1006422a:	0780      	lsls	r0, r0, #30
1006422c:	d5f9      	bpl.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
1006422e:	ab03      	add	r3, sp, #12
10064230:	2600      	movs	r6, #0
10064232:	809e      	strh	r6, [r3, #4]
10064234:	9603      	str	r6, [sp, #12]
10064236:	2106      	movs	r1, #6
10064238:	4638      	mov	r0, r7
1006423a:	460a      	mov	r2, r1
1006423c:	f7ed fead 	bl	10051f9a <ACL_pkt_cmp>
10064240:	2800      	cmp	r0, #0
10064242:	d045      	beq.n	100642d0 <smp_pp3_keys_distribution_receive+0x108>
10064244:	6878      	ldr	r0, [r7, #4]
10064246:	7a40      	ldrb	r0, [r0, #9]
10064248:	9d01      	ldr	r5, [sp, #4]
1006424a:	7028      	strb	r0, [r5, #0]
1006424c:	4623      	mov	r3, r4
1006424e:	335a      	adds	r3, #90	@ 0x5a
10064250:	2106      	movs	r1, #6
10064252:	4638      	mov	r0, r7
10064254:	460a      	mov	r2, r1
10064256:	f7ed fea9 	bl	10051fac <ACL_pkt_read>
1006425a:	7828      	ldrb	r0, [r5, #0]
1006425c:	2801      	cmp	r0, #1
1006425e:	d103      	bne.n	10064268 <smp_pp3_keys_distribution_receive+0xa0>
10064260:	79a8      	ldrb	r0, [r5, #6]
10064262:	0980      	lsrs	r0, r0, #6
10064264:	2803      	cmp	r0, #3
10064266:	d345      	bcc.n	100642f4 <smp_pp3_keys_distribution_receive+0x12c>
10064268:	7c61      	ldrb	r1, [r4, #17]
1006426a:	2020      	movs	r0, #32
1006426c:	4308      	orrs	r0, r1
1006426e:	7460      	strb	r0, [r4, #17]
10064270:	e02f      	b.n	100642d2 <smp_pp3_keys_distribution_receive+0x10a>
10064272:	7c60      	ldrb	r0, [r4, #17]
10064274:	0780      	lsls	r0, r0, #30
10064276:	d5d4      	bpl.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
10064278:	3438      	adds	r4, #56	@ 0x38
1006427a:	2105      	movs	r1, #5
1006427c:	2210      	movs	r2, #16
1006427e:	4638      	mov	r0, r7
10064280:	4623      	mov	r3, r4
10064282:	f7ed fe93 	bl	10051fac <ACL_pkt_read>
10064286:	e033      	b.n	100642f0 <smp_pp3_keys_distribution_receive+0x128>
10064288:	7c60      	ldrb	r0, [r4, #17]
1006428a:	0740      	lsls	r0, r0, #29
1006428c:	d5c9      	bpl.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
1006428e:	4623      	mov	r3, r4
10064290:	3348      	adds	r3, #72	@ 0x48
10064292:	2105      	movs	r1, #5
10064294:	2210      	movs	r2, #16
10064296:	4638      	mov	r0, r7
10064298:	f7ed fe88 	bl	10051fac <ACL_pkt_read>
1006429c:	7c60      	ldrb	r0, [r4, #17]
1006429e:	2140      	movs	r1, #64	@ 0x40
100642a0:	4301      	orrs	r1, r0
100642a2:	7461      	strb	r1, [r4, #17]
100642a4:	e017      	b.n	100642d6 <smp_pp3_keys_distribution_receive+0x10e>
100642a6:	6878      	ldr	r0, [r7, #4]
100642a8:	7a40      	ldrb	r0, [r0, #9]
100642aa:	77a0      	strb	r0, [r4, #30]
100642ac:	6878      	ldr	r0, [r7, #4]
100642ae:	7a80      	ldrb	r0, [r0, #10]
100642b0:	77e0      	strb	r0, [r4, #31]
100642b2:	4623      	mov	r3, r4
100642b4:	3320      	adds	r3, #32
100642b6:	2107      	movs	r1, #7
100642b8:	2208      	movs	r2, #8
100642ba:	4638      	mov	r0, r7
100642bc:	f7ed fe76 	bl	10051fac <ACL_pkt_read>
100642c0:	7c60      	ldrb	r0, [r4, #17]
100642c2:	2180      	movs	r1, #128	@ 0x80
100642c4:	4301      	orrs	r1, r0
100642c6:	7461      	strb	r1, [r4, #17]
100642c8:	0740      	lsls	r0, r0, #29
100642ca:	0f80      	lsrs	r0, r0, #30
100642cc:	d110      	bne.n	100642f0 <smp_pp3_keys_distribution_receive+0x128>
100642ce:	e002      	b.n	100642d6 <smp_pp3_keys_distribution_receive+0x10e>
100642d0:	7c60      	ldrb	r0, [r4, #17]
100642d2:	0740      	lsls	r0, r0, #29
100642d4:	d4a5      	bmi.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
100642d6:	9801      	ldr	r0, [sp, #4]
100642d8:	79c0      	ldrb	r0, [r0, #7]
100642da:	07c0      	lsls	r0, r0, #31
100642dc:	d105      	bne.n	100642ea <smp_pp3_keys_distribution_receive+0x122>
100642de:	2600      	movs	r6, #0
100642e0:	4620      	mov	r0, r4
100642e2:	4631      	mov	r1, r6
100642e4:	f7ff fe59 	bl	10063f9a <smp_pp3_keys_distribution_start>
100642e8:	e79b      	b.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
100642ea:	4620      	mov	r0, r4
100642ec:	f7ff f96a 	bl	100635c4 <smp_pp3_pairing_completed_successful>
100642f0:	9e02      	ldr	r6, [sp, #8]
100642f2:	e796      	b.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>
100642f4:	2108      	movs	r1, #8
100642f6:	2200      	movs	r2, #0
100642f8:	2301      	movs	r3, #1
100642fa:	4620      	mov	r0, r4
100642fc:	f7ff fa1a 	bl	10063734 <smp_pp3_pairing_failed_send>
10064300:	4606      	mov	r6, r0
10064302:	e78e      	b.n	10064222 <smp_pp3_keys_distribution_receive+0x5a>

10064304 <__arm_cp.4_0>:
10064304:	00007530 	.word	0x00007530

10064308 <smp_cmn_rejectlist_init>:
10064308:	b580      	push	{r7, lr}
1006430a:	2003      	movs	r0, #3
1006430c:	2108      	movs	r1, #8
1006430e:	f7f9 fd59 	bl	1005ddc4 <csmem_mem_0_assign>
10064312:	4902      	ldr	r1, [pc, #8]	@ (1006431c <__arm_cp.0_0>)
10064314:	6809      	ldr	r1, [r1, #0]
10064316:	22a8      	movs	r2, #168	@ 0xa8
10064318:	5088      	str	r0, [r1, r2]
1006431a:	bd80      	pop	{r7, pc}

1006431c <__arm_cp.0_0>:
1006431c:	20000f6c 	.word	0x20000f6c

10064320 <smp_cmn_repeated_attacks_protection_start>:
10064320:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064322:	9101      	str	r1, [sp, #4]
10064324:	2003      	movs	r0, #3
10064326:	9002      	str	r0, [sp, #8]
10064328:	2700      	movs	r7, #0
1006432a:	4a30      	ldr	r2, [pc, #192]	@ (100643ec <__arm_cp.1_0>)
1006432c:	463d      	mov	r5, r7
1006432e:	4616      	mov	r6, r2
10064330:	6810      	ldr	r0, [r2, #0]
10064332:	24a8      	movs	r4, #168	@ 0xa8
10064334:	5900      	ldr	r0, [r0, r4]
10064336:	19c0      	adds	r0, r0, r7
10064338:	1c80      	adds	r0, r0, #2
1006433a:	2206      	movs	r2, #6
1006433c:	9901      	ldr	r1, [sp, #4]
1006433e:	f7eb faa1 	bl	1004f884 <BLEPLAT_MemCmp>
10064342:	2800      	cmp	r0, #0
10064344:	d031      	beq.n	100643aa <smp_cmn_repeated_attacks_protection_start+0x8a>
10064346:	9802      	ldr	r0, [sp, #8]
10064348:	2803      	cmp	r0, #3
1006434a:	4632      	mov	r2, r6
1006434c:	d109      	bne.n	10064362 <smp_cmn_repeated_attacks_protection_start+0x42>
1006434e:	6810      	ldr	r0, [r2, #0]
10064350:	5900      	ldr	r0, [r0, r4]
10064352:	5dc0      	ldrb	r0, [r0, r7]
10064354:	0680      	lsls	r0, r0, #26
10064356:	0f80      	lsrs	r0, r0, #30
10064358:	d001      	beq.n	1006435e <smp_cmn_repeated_attacks_protection_start+0x3e>
1006435a:	2003      	movs	r0, #3
1006435c:	e000      	b.n	10064360 <smp_cmn_repeated_attacks_protection_start+0x40>
1006435e:	b2e8      	uxtb	r0, r5
10064360:	9002      	str	r0, [sp, #8]
10064362:	3708      	adds	r7, #8
10064364:	1c6d      	adds	r5, r5, #1
10064366:	2d03      	cmp	r5, #3
10064368:	d1e1      	bne.n	1006432e <smp_cmn_repeated_attacks_protection_start+0xe>
1006436a:	6810      	ldr	r0, [r2, #0]
1006436c:	2541      	movs	r5, #65	@ 0x41
1006436e:	5d41      	ldrb	r1, [r0, r5]
10064370:	30a8      	adds	r0, #168	@ 0xa8
10064372:	2902      	cmp	r1, #2
10064374:	d836      	bhi.n	100643e4 <smp_cmn_repeated_attacks_protection_start+0xc4>
10064376:	9902      	ldr	r1, [sp, #8]
10064378:	00cf      	lsls	r7, r1, #3
1006437a:	6800      	ldr	r0, [r0, #0]
1006437c:	19c0      	adds	r0, r0, r7
1006437e:	1c80      	adds	r0, r0, #2
10064380:	4616      	mov	r6, r2
10064382:	2206      	movs	r2, #6
10064384:	9901      	ldr	r1, [sp, #4]
10064386:	f7eb fa5d 	bl	1004f844 <BLEPLAT_MemCpy>
1006438a:	6830      	ldr	r0, [r6, #0]
1006438c:	5900      	ldr	r0, [r0, r4]
1006438e:	2110      	movs	r1, #16
10064390:	55c1      	strb	r1, [r0, r7]
10064392:	9802      	ldr	r0, [sp, #8]
10064394:	b2c2      	uxtb	r2, r0
10064396:	2000      	movs	r0, #0
10064398:	2101      	movs	r1, #1
1006439a:	4b15      	ldr	r3, [pc, #84]	@ (100643f0 <__arm_cp.1_1>)
1006439c:	f7fa fd84 	bl	1005eea8 <smp_timer_reset>
100643a0:	6830      	ldr	r0, [r6, #0]
100643a2:	5d41      	ldrb	r1, [r0, r5]
100643a4:	1c49      	adds	r1, r1, #1
100643a6:	5541      	strb	r1, [r0, r5]
100643a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100643aa:	6830      	ldr	r0, [r6, #0]
100643ac:	5900      	ldr	r0, [r0, r4]
100643ae:	5dc3      	ldrb	r3, [r0, r7]
100643b0:	21cf      	movs	r1, #207	@ 0xcf
100643b2:	4019      	ands	r1, r3
100643b4:	3110      	adds	r1, #16
100643b6:	2203      	movs	r2, #3
100643b8:	401a      	ands	r2, r3
100643ba:	1c53      	adds	r3, r2, #1
100643bc:	2a03      	cmp	r2, #3
100643be:	d002      	beq.n	100643c6 <smp_cmn_repeated_attacks_protection_start+0xa6>
100643c0:	24dc      	movs	r4, #220	@ 0xdc
100643c2:	4021      	ands	r1, r4
100643c4:	4319      	orrs	r1, r3
100643c6:	55c1      	strb	r1, [r0, r7]
100643c8:	2a03      	cmp	r2, #3
100643ca:	d100      	bne.n	100643ce <smp_cmn_repeated_attacks_protection_start+0xae>
100643cc:	4613      	mov	r3, r2
100643ce:	a009      	add	r0, pc, #36	@ (adr r0, 100643f4 <__arm_cp.1_1+0x4>)
100643d0:	5cc0      	ldrb	r0, [r0, r3]
100643d2:	217d      	movs	r1, #125	@ 0x7d
100643d4:	00cb      	lsls	r3, r1, #3
100643d6:	4343      	muls	r3, r0
100643d8:	b2ea      	uxtb	r2, r5
100643da:	2000      	movs	r0, #0
100643dc:	2101      	movs	r1, #1
100643de:	f7fa fd63 	bl	1005eea8 <smp_timer_reset>
100643e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100643e4:	2101      	movs	r1, #1
100643e6:	7201      	strb	r1, [r0, #8]
100643e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100643ea:	46c0      	nop			@ (mov r8, r8)

100643ec <__arm_cp.1_0>:
100643ec:	20000f6c 	.word	0x20000f6c

100643f0 <__arm_cp.1_1>:
100643f0:	00000bb8 	.word	0x00000bb8
100643f4:	140a0503 	.word	0x140a0503

100643f8 <smp_cmn_repeated_attacks_timer_cb>:
100643f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100643fa:	4e29      	ldr	r6, [pc, #164]	@ (100644a0 <__arm_cp.2_0>)
100643fc:	6831      	ldr	r1, [r6, #0]
100643fe:	25a8      	movs	r5, #168	@ 0xa8
10064400:	5949      	ldr	r1, [r1, r5]
10064402:	00c4      	lsls	r4, r0, #3
10064404:	5d0a      	ldrb	r2, [r1, r4]
10064406:	06d3      	lsls	r3, r2, #27
10064408:	d40e      	bmi.n	10064428 <smp_cmn_repeated_attacks_timer_cb+0x30>
1006440a:	0693      	lsls	r3, r2, #26
1006440c:	d546      	bpl.n	1006449c <smp_cmn_repeated_attacks_timer_cb+0xa4>
1006440e:	1909      	adds	r1, r1, r4
10064410:	0793      	lsls	r3, r2, #30
10064412:	d035      	beq.n	10064480 <smp_cmn_repeated_attacks_timer_cb+0x88>
10064414:	23fc      	movs	r3, #252	@ 0xfc
10064416:	4013      	ands	r3, r2
10064418:	1e52      	subs	r2, r2, #1
1006441a:	2403      	movs	r4, #3
1006441c:	4014      	ands	r4, r2
1006441e:	18e2      	adds	r2, r4, r3
10064420:	700a      	strb	r2, [r1, #0]
10064422:	f000 f841 	bl	100644a8 <smp_cmn_rejectlist_start_probation_timer2>
10064426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064428:	f000 f83e 	bl	100644a8 <smp_cmn_rejectlist_start_probation_timer2>
1006442c:	6830      	ldr	r0, [r6, #0]
1006442e:	5940      	ldr	r0, [r0, r5]
10064430:	1900      	adds	r0, r0, r4
10064432:	1c84      	adds	r4, r0, #2
10064434:	2065      	movs	r0, #101	@ 0x65
10064436:	43c6      	mvns	r6, r0
10064438:	4637      	mov	r7, r6
1006443a:	3765      	adds	r7, #101	@ 0x65
1006443c:	4819      	ldr	r0, [pc, #100]	@ (100644a4 <__arm_cp.2_1>)
1006443e:	6800      	ldr	r0, [r0, #0]
10064440:	2134      	movs	r1, #52	@ 0x34
10064442:	5c40      	ldrb	r0, [r0, r1]
10064444:	1c7f      	adds	r7, r7, #1
10064446:	4287      	cmp	r7, r0
10064448:	d228      	bcs.n	1006449c <smp_cmn_repeated_attacks_timer_cb+0xa4>
1006444a:	4815      	ldr	r0, [pc, #84]	@ (100644a0 <__arm_cp.2_0>)
1006444c:	6800      	ldr	r0, [r0, #0]
1006444e:	25a4      	movs	r5, #164	@ 0xa4
10064450:	5940      	ldr	r0, [r0, r5]
10064452:	1980      	adds	r0, r0, r6
10064454:	3670      	adds	r6, #112	@ 0x70
10064456:	3068      	adds	r0, #104	@ 0x68
10064458:	2206      	movs	r2, #6
1006445a:	4621      	mov	r1, r4
1006445c:	f7eb fa12 	bl	1004f884 <BLEPLAT_MemCmp>
10064460:	2800      	cmp	r0, #0
10064462:	d1eb      	bne.n	1006443c <smp_cmn_repeated_attacks_timer_cb+0x44>
10064464:	480e      	ldr	r0, [pc, #56]	@ (100644a0 <__arm_cp.2_0>)
10064466:	6800      	ldr	r0, [r0, #0]
10064468:	5940      	ldr	r0, [r0, r5]
1006446a:	5d81      	ldrb	r1, [r0, r6]
1006446c:	29fb      	cmp	r1, #251	@ 0xfb
1006446e:	d115      	bne.n	1006449c <smp_cmn_repeated_attacks_timer_cb+0xa4>
10064470:	2110      	movs	r1, #16
10064472:	5581      	strb	r1, [r0, r6]
10064474:	200e      	movs	r0, #14
10064476:	f7fb fa7b 	bl	1005f970 <tsk_notify_idx>
1006447a:	f7ea fc22 	bl	1004ecc2 <BLE_STACK_ProcessRequest>
1006447e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064480:	4635      	mov	r5, r6
10064482:	2400      	movs	r4, #0
10064484:	2208      	movs	r2, #8
10064486:	4608      	mov	r0, r1
10064488:	4621      	mov	r1, r4
1006448a:	f7eb f9eb 	bl	1004f864 <BLEPLAT_MemSet>
1006448e:	6830      	ldr	r0, [r6, #0]
10064490:	21b0      	movs	r1, #176	@ 0xb0
10064492:	5444      	strb	r4, [r0, r1]
10064494:	2141      	movs	r1, #65	@ 0x41
10064496:	5c42      	ldrb	r2, [r0, r1]
10064498:	1e52      	subs	r2, r2, #1
1006449a:	5442      	strb	r2, [r0, r1]
1006449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006449e:	46c0      	nop			@ (mov r8, r8)

100644a0 <__arm_cp.2_0>:
100644a0:	20000f6c 	.word	0x20000f6c

100644a4 <__arm_cp.2_1>:
100644a4:	20000ecc 	.word	0x20000ecc

100644a8 <smp_cmn_rejectlist_start_probation_timer2>:
100644a8:	b510      	push	{r4, lr}
100644aa:	4604      	mov	r4, r0
100644ac:	2000      	movs	r0, #0
100644ae:	2101      	movs	r1, #1
100644b0:	4b07      	ldr	r3, [pc, #28]	@ (100644d0 <__arm_cp.3_0>)
100644b2:	4622      	mov	r2, r4
100644b4:	f7fa fcf8 	bl	1005eea8 <smp_timer_reset>
100644b8:	4806      	ldr	r0, [pc, #24]	@ (100644d4 <__arm_cp.3_1>)
100644ba:	6800      	ldr	r0, [r0, #0]
100644bc:	21a8      	movs	r1, #168	@ 0xa8
100644be:	5840      	ldr	r0, [r0, r1]
100644c0:	00e1      	lsls	r1, r4, #3
100644c2:	5c42      	ldrb	r2, [r0, r1]
100644c4:	23cf      	movs	r3, #207	@ 0xcf
100644c6:	4013      	ands	r3, r2
100644c8:	3320      	adds	r3, #32
100644ca:	5443      	strb	r3, [r0, r1]
100644cc:	bd10      	pop	{r4, pc}
100644ce:	46c0      	nop			@ (mov r8, r8)

100644d0 <__arm_cp.3_0>:
100644d0:	00004e20 	.word	0x00004e20

100644d4 <__arm_cp.3_1>:
100644d4:	20000f6c 	.word	0x20000f6c

100644d8 <smp_cmn_is_peer_rejectlisted>:
100644d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100644da:	460c      	mov	r4, r1
100644dc:	2007      	movs	r0, #7
100644de:	43c0      	mvns	r0, r0
100644e0:	4e0c      	ldr	r6, [pc, #48]	@ (10064514 <__arm_cp.4_0>)
100644e2:	4605      	mov	r5, r0
100644e4:	3508      	adds	r5, #8
100644e6:	2d18      	cmp	r5, #24
100644e8:	d010      	beq.n	1006450c <smp_cmn_is_peer_rejectlisted+0x34>
100644ea:	6831      	ldr	r1, [r6, #0]
100644ec:	27a8      	movs	r7, #168	@ 0xa8
100644ee:	59c9      	ldr	r1, [r1, r7]
100644f0:	1808      	adds	r0, r1, r0
100644f2:	300a      	adds	r0, #10
100644f4:	2206      	movs	r2, #6
100644f6:	4621      	mov	r1, r4
100644f8:	f7eb f9c4 	bl	1004f884 <BLEPLAT_MemCmp>
100644fc:	2800      	cmp	r0, #0
100644fe:	4628      	mov	r0, r5
10064500:	d1f0      	bne.n	100644e4 <smp_cmn_is_peer_rejectlisted+0xc>
10064502:	6830      	ldr	r0, [r6, #0]
10064504:	59c0      	ldr	r0, [r0, r7]
10064506:	5d40      	ldrb	r0, [r0, r5]
10064508:	06c0      	lsls	r0, r0, #27
1006450a:	d401      	bmi.n	10064510 <smp_cmn_is_peer_rejectlisted+0x38>
1006450c:	2000      	movs	r0, #0
1006450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064510:	2001      	movs	r0, #1
10064512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064514 <__arm_cp.4_0>:
10064514:	20000f6c 	.word	0x20000f6c

10064518 <smp_get_remote_device_list_index>:
10064518:	b5b0      	push	{r4, r5, r7, lr}
1006451a:	490d      	ldr	r1, [pc, #52]	@ (10064550 <__arm_cp.0_0>)
1006451c:	6809      	ldr	r1, [r1, #0]
1006451e:	2234      	movs	r2, #52	@ 0x34
10064520:	5c89      	ldrb	r1, [r1, r2]
10064522:	2800      	cmp	r0, #0
10064524:	d011      	beq.n	1006454a <smp_get_remote_device_list_index+0x32>
10064526:	4a0b      	ldr	r2, [pc, #44]	@ (10064554 <__arm_cp.0_1>)
10064528:	6812      	ldr	r2, [r2, #0]
1006452a:	32a4      	adds	r2, #164	@ 0xa4
1006452c:	2300      	movs	r3, #0
1006452e:	b2dc      	uxtb	r4, r3
10064530:	428c      	cmp	r4, r1
10064532:	d20a      	bcs.n	1006454a <smp_get_remote_device_list_index+0x32>
10064534:	2570      	movs	r5, #112	@ 0x70
10064536:	4365      	muls	r5, r4
10064538:	6814      	ldr	r4, [r2, #0]
1006453a:	1964      	adds	r4, r4, r5
1006453c:	8924      	ldrh	r4, [r4, #8]
1006453e:	4044      	eors	r4, r0
10064540:	0524      	lsls	r4, r4, #20
10064542:	d001      	beq.n	10064548 <smp_get_remote_device_list_index+0x30>
10064544:	1c5b      	adds	r3, r3, #1
10064546:	e7f2      	b.n	1006452e <smp_get_remote_device_list_index+0x16>
10064548:	4619      	mov	r1, r3
1006454a:	b2c8      	uxtb	r0, r1
1006454c:	bdb0      	pop	{r4, r5, r7, pc}
1006454e:	46c0      	nop			@ (mov r8, r8)

10064550 <__arm_cp.0_0>:
10064550:	20000ecc 	.word	0x20000ecc

10064554 <__arm_cp.0_1>:
10064554:	20000f6c 	.word	0x20000f6c

10064558 <smp_get_remote_device_list_item>:
10064558:	b5f0      	push	{r4, r5, r6, r7, lr}
1006455a:	4601      	mov	r1, r0
1006455c:	2000      	movs	r0, #0
1006455e:	2900      	cmp	r1, #0
10064560:	d017      	beq.n	10064592 <smp_get_remote_device_list_item+0x3a>
10064562:	4a0c      	ldr	r2, [pc, #48]	@ (10064594 <__arm_cp.1_0>)
10064564:	6812      	ldr	r2, [r2, #0]
10064566:	2334      	movs	r3, #52	@ 0x34
10064568:	5cd3      	ldrb	r3, [r2, r3]
1006456a:	2270      	movs	r2, #112	@ 0x70
1006456c:	435a      	muls	r2, r3
1006456e:	236f      	movs	r3, #111	@ 0x6f
10064570:	43dd      	mvns	r5, r3
10064572:	4b09      	ldr	r3, [pc, #36]	@ (10064598 <__arm_cp.1_1>)
10064574:	681b      	ldr	r3, [r3, #0]
10064576:	33a4      	adds	r3, #164	@ 0xa4
10064578:	462c      	mov	r4, r5
1006457a:	3470      	adds	r4, #112	@ 0x70
1006457c:	42a2      	cmp	r2, r4
1006457e:	d008      	beq.n	10064592 <smp_get_remote_device_list_item+0x3a>
10064580:	681e      	ldr	r6, [r3, #0]
10064582:	1975      	adds	r5, r6, r5
10064584:	2778      	movs	r7, #120	@ 0x78
10064586:	5bed      	ldrh	r5, [r5, r7]
10064588:	404d      	eors	r5, r1
1006458a:	052d      	lsls	r5, r5, #20
1006458c:	4625      	mov	r5, r4
1006458e:	d1f4      	bne.n	1006457a <smp_get_remote_device_list_item+0x22>
10064590:	1930      	adds	r0, r6, r4
10064592:	bdf0      	pop	{r4, r5, r6, r7, pc}

10064594 <__arm_cp.1_0>:
10064594:	20000ecc 	.word	0x20000ecc

10064598 <__arm_cp.1_1>:
10064598:	20000f6c 	.word	0x20000f6c

1006459c <smp_oob_check_is_remote_data_present>:
1006459c:	b5b0      	push	{r4, r5, r7, lr}
1006459e:	4604      	mov	r4, r0
100645a0:	480b      	ldr	r0, [pc, #44]	@ (100645d0 <__arm_cp.2_0>)
100645a2:	6800      	ldr	r0, [r0, #0]
100645a4:	21ac      	movs	r1, #172	@ 0xac
100645a6:	5840      	ldr	r0, [r0, r1]
100645a8:	7845      	ldrb	r5, [r0, #1]
100645aa:	1c80      	adds	r0, r0, #2
100645ac:	1ca1      	adds	r1, r4, #2
100645ae:	2206      	movs	r2, #6
100645b0:	f7eb f968 	bl	1004f884 <BLEPLAT_MemCmp>
100645b4:	4601      	mov	r1, r0
100645b6:	2000      	movs	r0, #0
100645b8:	2900      	cmp	r1, #0
100645ba:	d000      	beq.n	100645be <smp_oob_check_is_remote_data_present+0x22>
100645bc:	bdb0      	pop	{r4, r5, r7, pc}
100645be:	7861      	ldrb	r1, [r4, #1]
100645c0:	428d      	cmp	r5, r1
100645c2:	d1fb      	bne.n	100645bc <smp_oob_check_is_remote_data_present+0x20>
100645c4:	7b61      	ldrb	r1, [r4, #13]
100645c6:	2001      	movs	r0, #1
100645c8:	4301      	orrs	r1, r0
100645ca:	7361      	strb	r1, [r4, #13]
100645cc:	bdb0      	pop	{r4, r5, r7, pc}
100645ce:	46c0      	nop			@ (mov r8, r8)

100645d0 <__arm_cp.2_0>:
100645d0:	20000f6c 	.word	0x20000f6c

100645d4 <smp_oob_clear_remote_data_entry>:
100645d4:	b580      	push	{r7, lr}
100645d6:	2228      	movs	r2, #40	@ 0x28
100645d8:	4350      	muls	r0, r2
100645da:	4904      	ldr	r1, [pc, #16]	@ (100645ec <__arm_cp.4_0>)
100645dc:	6809      	ldr	r1, [r1, #0]
100645de:	23ac      	movs	r3, #172	@ 0xac
100645e0:	58c9      	ldr	r1, [r1, r3]
100645e2:	1808      	adds	r0, r1, r0
100645e4:	2100      	movs	r1, #0
100645e6:	f7eb f93d 	bl	1004f864 <BLEPLAT_MemSet>
100645ea:	bd80      	pop	{r7, pc}

100645ec <__arm_cp.4_0>:
100645ec:	20000f6c 	.word	0x20000f6c

100645f0 <smp_scp_is_another_sc_pairing_ongoing>:
100645f0:	b570      	push	{r4, r5, r6, lr}
100645f2:	490d      	ldr	r1, [pc, #52]	@ (10064628 <__arm_cp.1_0>)
100645f4:	6809      	ldr	r1, [r1, #0]
100645f6:	2234      	movs	r2, #52	@ 0x34
100645f8:	5c89      	ldrb	r1, [r1, r2]
100645fa:	2270      	movs	r2, #112	@ 0x70
100645fc:	434a      	muls	r2, r1
100645fe:	490b      	ldr	r1, [pc, #44]	@ (1006462c <__arm_cp.1_1>)
10064600:	680b      	ldr	r3, [r1, #0]
10064602:	33a4      	adds	r3, #164	@ 0xa4
10064604:	2100      	movs	r1, #0
10064606:	460c      	mov	r4, r1
10064608:	42a2      	cmp	r2, r4
1006460a:	d00a      	beq.n	10064622 <smp_scp_is_another_sc_pairing_ongoing+0x32>
1006460c:	681d      	ldr	r5, [r3, #0]
1006460e:	192d      	adds	r5, r5, r4
10064610:	7dee      	ldrb	r6, [r5, #23]
10064612:	07f6      	lsls	r6, r6, #31
10064614:	d002      	beq.n	1006461c <smp_scp_is_another_sc_pairing_ongoing+0x2c>
10064616:	892d      	ldrh	r5, [r5, #8]
10064618:	4285      	cmp	r5, r0
1006461a:	d101      	bne.n	10064620 <smp_scp_is_another_sc_pairing_ongoing+0x30>
1006461c:	3470      	adds	r4, #112	@ 0x70
1006461e:	e7f3      	b.n	10064608 <smp_scp_is_another_sc_pairing_ongoing+0x18>
10064620:	2101      	movs	r1, #1
10064622:	4608      	mov	r0, r1
10064624:	bd70      	pop	{r4, r5, r6, pc}
10064626:	46c0      	nop			@ (mov r8, r8)

10064628 <__arm_cp.1_0>:
10064628:	20000ecc 	.word	0x20000ecc

1006462c <__arm_cp.1_1>:
1006462c:	20000f6c 	.word	0x20000f6c

10064630 <smp_scp_init_ucfg_weak>:
10064630:	4770      	bx	lr

10064632 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>:
10064632:	201f      	movs	r0, #31
10064634:	4770      	bx	lr

10064636 <smp_scp_public_key_prepare_and_exchange_ucfg_weak>:
10064636:	201f      	movs	r0, #31
10064638:	4770      	bx	lr

1006463a <smp_scp_stats_update_on_pairing_complete_ucfg_weak>:
1006463a:	4770      	bx	lr

1006463c <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1006463c:	4770      	bx	lr
	...

10064640 <malloc>:
10064640:	b510      	push	{r4, lr}
10064642:	4b03      	ldr	r3, [pc, #12]	@ (10064650 <malloc+0x10>)
10064644:	0001      	movs	r1, r0
10064646:	6818      	ldr	r0, [r3, #0]
10064648:	f000 f830 	bl	100646ac <_malloc_r>
1006464c:	bd10      	pop	{r4, pc}
1006464e:	46c0      	nop			@ (mov r8, r8)
10064650:	200012ac 	.word	0x200012ac

10064654 <free>:
10064654:	b510      	push	{r4, lr}
10064656:	4b03      	ldr	r3, [pc, #12]	@ (10064664 <free+0x10>)
10064658:	0001      	movs	r1, r0
1006465a:	6818      	ldr	r0, [r3, #0]
1006465c:	f000 fb74 	bl	10064d48 <_free_r>
10064660:	bd10      	pop	{r4, pc}
10064662:	46c0      	nop			@ (mov r8, r8)
10064664:	200012ac 	.word	0x200012ac

10064668 <sbrk_aligned>:
10064668:	b570      	push	{r4, r5, r6, lr}
1006466a:	4e0f      	ldr	r6, [pc, #60]	@ (100646a8 <sbrk_aligned+0x40>)
1006466c:	000d      	movs	r5, r1
1006466e:	6831      	ldr	r1, [r6, #0]
10064670:	0004      	movs	r4, r0
10064672:	2900      	cmp	r1, #0
10064674:	d102      	bne.n	1006467c <sbrk_aligned+0x14>
10064676:	f000 fb2b 	bl	10064cd0 <_sbrk_r>
1006467a:	6030      	str	r0, [r6, #0]
1006467c:	0029      	movs	r1, r5
1006467e:	0020      	movs	r0, r4
10064680:	f000 fb26 	bl	10064cd0 <_sbrk_r>
10064684:	1c43      	adds	r3, r0, #1
10064686:	d103      	bne.n	10064690 <sbrk_aligned+0x28>
10064688:	2501      	movs	r5, #1
1006468a:	426d      	negs	r5, r5
1006468c:	0028      	movs	r0, r5
1006468e:	bd70      	pop	{r4, r5, r6, pc}
10064690:	2303      	movs	r3, #3
10064692:	1cc5      	adds	r5, r0, #3
10064694:	439d      	bics	r5, r3
10064696:	42a8      	cmp	r0, r5
10064698:	d0f8      	beq.n	1006468c <sbrk_aligned+0x24>
1006469a:	1a29      	subs	r1, r5, r0
1006469c:	0020      	movs	r0, r4
1006469e:	f000 fb17 	bl	10064cd0 <_sbrk_r>
100646a2:	3001      	adds	r0, #1
100646a4:	d1f2      	bne.n	1006468c <sbrk_aligned+0x24>
100646a6:	e7ef      	b.n	10064688 <sbrk_aligned+0x20>
100646a8:	20000f78 	.word	0x20000f78

100646ac <_malloc_r>:
100646ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100646ae:	2203      	movs	r2, #3
100646b0:	1ccb      	adds	r3, r1, #3
100646b2:	4393      	bics	r3, r2
100646b4:	3308      	adds	r3, #8
100646b6:	0005      	movs	r5, r0
100646b8:	001f      	movs	r7, r3
100646ba:	2b0c      	cmp	r3, #12
100646bc:	d234      	bcs.n	10064728 <_malloc_r+0x7c>
100646be:	270c      	movs	r7, #12
100646c0:	42b9      	cmp	r1, r7
100646c2:	d833      	bhi.n	1006472c <_malloc_r+0x80>
100646c4:	0028      	movs	r0, r5
100646c6:	f000 f871 	bl	100647ac <__malloc_lock>
100646ca:	4e37      	ldr	r6, [pc, #220]	@ (100647a8 <_malloc_r+0xfc>)
100646cc:	6833      	ldr	r3, [r6, #0]
100646ce:	001c      	movs	r4, r3
100646d0:	2c00      	cmp	r4, #0
100646d2:	d12f      	bne.n	10064734 <_malloc_r+0x88>
100646d4:	0039      	movs	r1, r7
100646d6:	0028      	movs	r0, r5
100646d8:	f7ff ffc6 	bl	10064668 <sbrk_aligned>
100646dc:	0004      	movs	r4, r0
100646de:	1c43      	adds	r3, r0, #1
100646e0:	d15f      	bne.n	100647a2 <_malloc_r+0xf6>
100646e2:	6834      	ldr	r4, [r6, #0]
100646e4:	9400      	str	r4, [sp, #0]
100646e6:	9b00      	ldr	r3, [sp, #0]
100646e8:	2b00      	cmp	r3, #0
100646ea:	d14a      	bne.n	10064782 <_malloc_r+0xd6>
100646ec:	2c00      	cmp	r4, #0
100646ee:	d052      	beq.n	10064796 <_malloc_r+0xea>
100646f0:	6823      	ldr	r3, [r4, #0]
100646f2:	0028      	movs	r0, r5
100646f4:	18e3      	adds	r3, r4, r3
100646f6:	9900      	ldr	r1, [sp, #0]
100646f8:	9301      	str	r3, [sp, #4]
100646fa:	f000 fae9 	bl	10064cd0 <_sbrk_r>
100646fe:	9b01      	ldr	r3, [sp, #4]
10064700:	4283      	cmp	r3, r0
10064702:	d148      	bne.n	10064796 <_malloc_r+0xea>
10064704:	6823      	ldr	r3, [r4, #0]
10064706:	0028      	movs	r0, r5
10064708:	1aff      	subs	r7, r7, r3
1006470a:	0039      	movs	r1, r7
1006470c:	f7ff ffac 	bl	10064668 <sbrk_aligned>
10064710:	3001      	adds	r0, #1
10064712:	d040      	beq.n	10064796 <_malloc_r+0xea>
10064714:	6823      	ldr	r3, [r4, #0]
10064716:	19db      	adds	r3, r3, r7
10064718:	6023      	str	r3, [r4, #0]
1006471a:	6833      	ldr	r3, [r6, #0]
1006471c:	685a      	ldr	r2, [r3, #4]
1006471e:	2a00      	cmp	r2, #0
10064720:	d133      	bne.n	1006478a <_malloc_r+0xde>
10064722:	9b00      	ldr	r3, [sp, #0]
10064724:	6033      	str	r3, [r6, #0]
10064726:	e019      	b.n	1006475c <_malloc_r+0xb0>
10064728:	2b00      	cmp	r3, #0
1006472a:	dac9      	bge.n	100646c0 <_malloc_r+0x14>
1006472c:	230c      	movs	r3, #12
1006472e:	602b      	str	r3, [r5, #0]
10064730:	2000      	movs	r0, #0
10064732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064734:	6821      	ldr	r1, [r4, #0]
10064736:	1bc9      	subs	r1, r1, r7
10064738:	d420      	bmi.n	1006477c <_malloc_r+0xd0>
1006473a:	290b      	cmp	r1, #11
1006473c:	d90a      	bls.n	10064754 <_malloc_r+0xa8>
1006473e:	19e2      	adds	r2, r4, r7
10064740:	6027      	str	r7, [r4, #0]
10064742:	42a3      	cmp	r3, r4
10064744:	d104      	bne.n	10064750 <_malloc_r+0xa4>
10064746:	6032      	str	r2, [r6, #0]
10064748:	6863      	ldr	r3, [r4, #4]
1006474a:	6011      	str	r1, [r2, #0]
1006474c:	6053      	str	r3, [r2, #4]
1006474e:	e005      	b.n	1006475c <_malloc_r+0xb0>
10064750:	605a      	str	r2, [r3, #4]
10064752:	e7f9      	b.n	10064748 <_malloc_r+0x9c>
10064754:	6862      	ldr	r2, [r4, #4]
10064756:	42a3      	cmp	r3, r4
10064758:	d10e      	bne.n	10064778 <_malloc_r+0xcc>
1006475a:	6032      	str	r2, [r6, #0]
1006475c:	0028      	movs	r0, r5
1006475e:	f000 f82d 	bl	100647bc <__malloc_unlock>
10064762:	0020      	movs	r0, r4
10064764:	2207      	movs	r2, #7
10064766:	300b      	adds	r0, #11
10064768:	1d23      	adds	r3, r4, #4
1006476a:	4390      	bics	r0, r2
1006476c:	1ac2      	subs	r2, r0, r3
1006476e:	4298      	cmp	r0, r3
10064770:	d0df      	beq.n	10064732 <_malloc_r+0x86>
10064772:	1a1b      	subs	r3, r3, r0
10064774:	50a3      	str	r3, [r4, r2]
10064776:	e7dc      	b.n	10064732 <_malloc_r+0x86>
10064778:	605a      	str	r2, [r3, #4]
1006477a:	e7ef      	b.n	1006475c <_malloc_r+0xb0>
1006477c:	0023      	movs	r3, r4
1006477e:	6864      	ldr	r4, [r4, #4]
10064780:	e7a6      	b.n	100646d0 <_malloc_r+0x24>
10064782:	9c00      	ldr	r4, [sp, #0]
10064784:	6863      	ldr	r3, [r4, #4]
10064786:	9300      	str	r3, [sp, #0]
10064788:	e7ad      	b.n	100646e6 <_malloc_r+0x3a>
1006478a:	001a      	movs	r2, r3
1006478c:	685b      	ldr	r3, [r3, #4]
1006478e:	42a3      	cmp	r3, r4
10064790:	d1fb      	bne.n	1006478a <_malloc_r+0xde>
10064792:	2300      	movs	r3, #0
10064794:	e7da      	b.n	1006474c <_malloc_r+0xa0>
10064796:	230c      	movs	r3, #12
10064798:	0028      	movs	r0, r5
1006479a:	602b      	str	r3, [r5, #0]
1006479c:	f000 f80e 	bl	100647bc <__malloc_unlock>
100647a0:	e7c6      	b.n	10064730 <_malloc_r+0x84>
100647a2:	6007      	str	r7, [r0, #0]
100647a4:	e7da      	b.n	1006475c <_malloc_r+0xb0>
100647a6:	46c0      	nop			@ (mov r8, r8)
100647a8:	20000f7c 	.word	0x20000f7c

100647ac <__malloc_lock>:
100647ac:	b510      	push	{r4, lr}
100647ae:	4802      	ldr	r0, [pc, #8]	@ (100647b8 <__malloc_lock+0xc>)
100647b0:	f000 fabb 	bl	10064d2a <__retarget_lock_acquire_recursive>
100647b4:	bd10      	pop	{r4, pc}
100647b6:	46c0      	nop			@ (mov r8, r8)
100647b8:	200010c0 	.word	0x200010c0

100647bc <__malloc_unlock>:
100647bc:	b510      	push	{r4, lr}
100647be:	4802      	ldr	r0, [pc, #8]	@ (100647c8 <__malloc_unlock+0xc>)
100647c0:	f000 fab4 	bl	10064d2c <__retarget_lock_release_recursive>
100647c4:	bd10      	pop	{r4, pc}
100647c6:	46c0      	nop			@ (mov r8, r8)
100647c8:	200010c0 	.word	0x200010c0

100647cc <std>:
100647cc:	2300      	movs	r3, #0
100647ce:	b510      	push	{r4, lr}
100647d0:	0004      	movs	r4, r0
100647d2:	6003      	str	r3, [r0, #0]
100647d4:	6043      	str	r3, [r0, #4]
100647d6:	6083      	str	r3, [r0, #8]
100647d8:	8181      	strh	r1, [r0, #12]
100647da:	6643      	str	r3, [r0, #100]	@ 0x64
100647dc:	81c2      	strh	r2, [r0, #14]
100647de:	6103      	str	r3, [r0, #16]
100647e0:	6143      	str	r3, [r0, #20]
100647e2:	6183      	str	r3, [r0, #24]
100647e4:	0019      	movs	r1, r3
100647e6:	2208      	movs	r2, #8
100647e8:	305c      	adds	r0, #92	@ 0x5c
100647ea:	f000 fa2f 	bl	10064c4c <memset>
100647ee:	4b0b      	ldr	r3, [pc, #44]	@ (1006481c <std+0x50>)
100647f0:	6224      	str	r4, [r4, #32]
100647f2:	6263      	str	r3, [r4, #36]	@ 0x24
100647f4:	4b0a      	ldr	r3, [pc, #40]	@ (10064820 <std+0x54>)
100647f6:	62a3      	str	r3, [r4, #40]	@ 0x28
100647f8:	4b0a      	ldr	r3, [pc, #40]	@ (10064824 <std+0x58>)
100647fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
100647fc:	4b0a      	ldr	r3, [pc, #40]	@ (10064828 <std+0x5c>)
100647fe:	6323      	str	r3, [r4, #48]	@ 0x30
10064800:	4b0a      	ldr	r3, [pc, #40]	@ (1006482c <std+0x60>)
10064802:	429c      	cmp	r4, r3
10064804:	d005      	beq.n	10064812 <std+0x46>
10064806:	4b0a      	ldr	r3, [pc, #40]	@ (10064830 <std+0x64>)
10064808:	429c      	cmp	r4, r3
1006480a:	d002      	beq.n	10064812 <std+0x46>
1006480c:	4b09      	ldr	r3, [pc, #36]	@ (10064834 <std+0x68>)
1006480e:	429c      	cmp	r4, r3
10064810:	d103      	bne.n	1006481a <std+0x4e>
10064812:	0020      	movs	r0, r4
10064814:	3058      	adds	r0, #88	@ 0x58
10064816:	f000 fa87 	bl	10064d28 <__retarget_lock_init_recursive>
1006481a:	bd10      	pop	{r4, pc}
1006481c:	10064a59 	.word	0x10064a59
10064820:	10064a81 	.word	0x10064a81
10064824:	10064ab9 	.word	0x10064ab9
10064828:	10064ae5 	.word	0x10064ae5
1006482c:	20000f80 	.word	0x20000f80
10064830:	20000fe8 	.word	0x20000fe8
10064834:	20001050 	.word	0x20001050

10064838 <stdio_exit_handler>:
10064838:	b510      	push	{r4, lr}
1006483a:	4a03      	ldr	r2, [pc, #12]	@ (10064848 <stdio_exit_handler+0x10>)
1006483c:	4903      	ldr	r1, [pc, #12]	@ (1006484c <stdio_exit_handler+0x14>)
1006483e:	4804      	ldr	r0, [pc, #16]	@ (10064850 <stdio_exit_handler+0x18>)
10064840:	f000 f86c 	bl	1006491c <_fwalk_sglue>
10064844:	bd10      	pop	{r4, pc}
10064846:	46c0      	nop			@ (mov r8, r8)
10064848:	200012a0 	.word	0x200012a0
1006484c:	1006549d 	.word	0x1006549d
10064850:	200012b0 	.word	0x200012b0

10064854 <cleanup_stdio>:
10064854:	6841      	ldr	r1, [r0, #4]
10064856:	4b0b      	ldr	r3, [pc, #44]	@ (10064884 <cleanup_stdio+0x30>)
10064858:	b510      	push	{r4, lr}
1006485a:	0004      	movs	r4, r0
1006485c:	4299      	cmp	r1, r3
1006485e:	d001      	beq.n	10064864 <cleanup_stdio+0x10>
10064860:	f000 fe1c 	bl	1006549c <_fflush_r>
10064864:	68a1      	ldr	r1, [r4, #8]
10064866:	4b08      	ldr	r3, [pc, #32]	@ (10064888 <cleanup_stdio+0x34>)
10064868:	4299      	cmp	r1, r3
1006486a:	d002      	beq.n	10064872 <cleanup_stdio+0x1e>
1006486c:	0020      	movs	r0, r4
1006486e:	f000 fe15 	bl	1006549c <_fflush_r>
10064872:	68e1      	ldr	r1, [r4, #12]
10064874:	4b05      	ldr	r3, [pc, #20]	@ (1006488c <cleanup_stdio+0x38>)
10064876:	4299      	cmp	r1, r3
10064878:	d002      	beq.n	10064880 <cleanup_stdio+0x2c>
1006487a:	0020      	movs	r0, r4
1006487c:	f000 fe0e 	bl	1006549c <_fflush_r>
10064880:	bd10      	pop	{r4, pc}
10064882:	46c0      	nop			@ (mov r8, r8)
10064884:	20000f80 	.word	0x20000f80
10064888:	20000fe8 	.word	0x20000fe8
1006488c:	20001050 	.word	0x20001050

10064890 <global_stdio_init.part.0>:
10064890:	b510      	push	{r4, lr}
10064892:	4b09      	ldr	r3, [pc, #36]	@ (100648b8 <global_stdio_init.part.0+0x28>)
10064894:	4a09      	ldr	r2, [pc, #36]	@ (100648bc <global_stdio_init.part.0+0x2c>)
10064896:	2104      	movs	r1, #4
10064898:	601a      	str	r2, [r3, #0]
1006489a:	4809      	ldr	r0, [pc, #36]	@ (100648c0 <global_stdio_init.part.0+0x30>)
1006489c:	2200      	movs	r2, #0
1006489e:	f7ff ff95 	bl	100647cc <std>
100648a2:	2201      	movs	r2, #1
100648a4:	2109      	movs	r1, #9
100648a6:	4807      	ldr	r0, [pc, #28]	@ (100648c4 <global_stdio_init.part.0+0x34>)
100648a8:	f7ff ff90 	bl	100647cc <std>
100648ac:	2202      	movs	r2, #2
100648ae:	2112      	movs	r1, #18
100648b0:	4805      	ldr	r0, [pc, #20]	@ (100648c8 <global_stdio_init.part.0+0x38>)
100648b2:	f7ff ff8b 	bl	100647cc <std>
100648b6:	bd10      	pop	{r4, pc}
100648b8:	200010b8 	.word	0x200010b8
100648bc:	10064839 	.word	0x10064839
100648c0:	20000f80 	.word	0x20000f80
100648c4:	20000fe8 	.word	0x20000fe8
100648c8:	20001050 	.word	0x20001050

100648cc <__sfp_lock_acquire>:
100648cc:	b510      	push	{r4, lr}
100648ce:	4802      	ldr	r0, [pc, #8]	@ (100648d8 <__sfp_lock_acquire+0xc>)
100648d0:	f000 fa2b 	bl	10064d2a <__retarget_lock_acquire_recursive>
100648d4:	bd10      	pop	{r4, pc}
100648d6:	46c0      	nop			@ (mov r8, r8)
100648d8:	200010c1 	.word	0x200010c1

100648dc <__sfp_lock_release>:
100648dc:	b510      	push	{r4, lr}
100648de:	4802      	ldr	r0, [pc, #8]	@ (100648e8 <__sfp_lock_release+0xc>)
100648e0:	f000 fa24 	bl	10064d2c <__retarget_lock_release_recursive>
100648e4:	bd10      	pop	{r4, pc}
100648e6:	46c0      	nop			@ (mov r8, r8)
100648e8:	200010c1 	.word	0x200010c1

100648ec <__sinit>:
100648ec:	b510      	push	{r4, lr}
100648ee:	0004      	movs	r4, r0
100648f0:	f7ff ffec 	bl	100648cc <__sfp_lock_acquire>
100648f4:	6a23      	ldr	r3, [r4, #32]
100648f6:	2b00      	cmp	r3, #0
100648f8:	d002      	beq.n	10064900 <__sinit+0x14>
100648fa:	f7ff ffef 	bl	100648dc <__sfp_lock_release>
100648fe:	bd10      	pop	{r4, pc}
10064900:	4b04      	ldr	r3, [pc, #16]	@ (10064914 <__sinit+0x28>)
10064902:	6223      	str	r3, [r4, #32]
10064904:	4b04      	ldr	r3, [pc, #16]	@ (10064918 <__sinit+0x2c>)
10064906:	681b      	ldr	r3, [r3, #0]
10064908:	2b00      	cmp	r3, #0
1006490a:	d1f6      	bne.n	100648fa <__sinit+0xe>
1006490c:	f7ff ffc0 	bl	10064890 <global_stdio_init.part.0>
10064910:	e7f3      	b.n	100648fa <__sinit+0xe>
10064912:	46c0      	nop			@ (mov r8, r8)
10064914:	10064855 	.word	0x10064855
10064918:	200010b8 	.word	0x200010b8

1006491c <_fwalk_sglue>:
1006491c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006491e:	0014      	movs	r4, r2
10064920:	2600      	movs	r6, #0
10064922:	9000      	str	r0, [sp, #0]
10064924:	9101      	str	r1, [sp, #4]
10064926:	68a5      	ldr	r5, [r4, #8]
10064928:	6867      	ldr	r7, [r4, #4]
1006492a:	3f01      	subs	r7, #1
1006492c:	d504      	bpl.n	10064938 <_fwalk_sglue+0x1c>
1006492e:	6824      	ldr	r4, [r4, #0]
10064930:	2c00      	cmp	r4, #0
10064932:	d1f8      	bne.n	10064926 <_fwalk_sglue+0xa>
10064934:	0030      	movs	r0, r6
10064936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064938:	89ab      	ldrh	r3, [r5, #12]
1006493a:	2b01      	cmp	r3, #1
1006493c:	d908      	bls.n	10064950 <_fwalk_sglue+0x34>
1006493e:	220e      	movs	r2, #14
10064940:	5eab      	ldrsh	r3, [r5, r2]
10064942:	3301      	adds	r3, #1
10064944:	d004      	beq.n	10064950 <_fwalk_sglue+0x34>
10064946:	0029      	movs	r1, r5
10064948:	9800      	ldr	r0, [sp, #0]
1006494a:	9b01      	ldr	r3, [sp, #4]
1006494c:	4798      	blx	r3
1006494e:	4306      	orrs	r6, r0
10064950:	3568      	adds	r5, #104	@ 0x68
10064952:	e7ea      	b.n	1006492a <_fwalk_sglue+0xe>

10064954 <_puts_r>:
10064954:	6a03      	ldr	r3, [r0, #32]
10064956:	b570      	push	{r4, r5, r6, lr}
10064958:	0005      	movs	r5, r0
1006495a:	000e      	movs	r6, r1
1006495c:	6884      	ldr	r4, [r0, #8]
1006495e:	2b00      	cmp	r3, #0
10064960:	d101      	bne.n	10064966 <_puts_r+0x12>
10064962:	f7ff ffc3 	bl	100648ec <__sinit>
10064966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10064968:	07db      	lsls	r3, r3, #31
1006496a:	d405      	bmi.n	10064978 <_puts_r+0x24>
1006496c:	89a3      	ldrh	r3, [r4, #12]
1006496e:	059b      	lsls	r3, r3, #22
10064970:	d402      	bmi.n	10064978 <_puts_r+0x24>
10064972:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10064974:	f000 f9d9 	bl	10064d2a <__retarget_lock_acquire_recursive>
10064978:	89a3      	ldrh	r3, [r4, #12]
1006497a:	071b      	lsls	r3, r3, #28
1006497c:	d502      	bpl.n	10064984 <_puts_r+0x30>
1006497e:	6923      	ldr	r3, [r4, #16]
10064980:	2b00      	cmp	r3, #0
10064982:	d11f      	bne.n	100649c4 <_puts_r+0x70>
10064984:	0021      	movs	r1, r4
10064986:	0028      	movs	r0, r5
10064988:	f000 f8f4 	bl	10064b74 <__swsetup_r>
1006498c:	2800      	cmp	r0, #0
1006498e:	d019      	beq.n	100649c4 <_puts_r+0x70>
10064990:	2501      	movs	r5, #1
10064992:	426d      	negs	r5, r5
10064994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10064996:	07db      	lsls	r3, r3, #31
10064998:	d405      	bmi.n	100649a6 <_puts_r+0x52>
1006499a:	89a3      	ldrh	r3, [r4, #12]
1006499c:	059b      	lsls	r3, r3, #22
1006499e:	d402      	bmi.n	100649a6 <_puts_r+0x52>
100649a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100649a2:	f000 f9c3 	bl	10064d2c <__retarget_lock_release_recursive>
100649a6:	0028      	movs	r0, r5
100649a8:	bd70      	pop	{r4, r5, r6, pc}
100649aa:	3601      	adds	r6, #1
100649ac:	60a3      	str	r3, [r4, #8]
100649ae:	2b00      	cmp	r3, #0
100649b0:	da04      	bge.n	100649bc <_puts_r+0x68>
100649b2:	69a2      	ldr	r2, [r4, #24]
100649b4:	429a      	cmp	r2, r3
100649b6:	dc16      	bgt.n	100649e6 <_puts_r+0x92>
100649b8:	290a      	cmp	r1, #10
100649ba:	d014      	beq.n	100649e6 <_puts_r+0x92>
100649bc:	6823      	ldr	r3, [r4, #0]
100649be:	1c5a      	adds	r2, r3, #1
100649c0:	6022      	str	r2, [r4, #0]
100649c2:	7019      	strb	r1, [r3, #0]
100649c4:	68a3      	ldr	r3, [r4, #8]
100649c6:	7831      	ldrb	r1, [r6, #0]
100649c8:	3b01      	subs	r3, #1
100649ca:	2900      	cmp	r1, #0
100649cc:	d1ed      	bne.n	100649aa <_puts_r+0x56>
100649ce:	60a3      	str	r3, [r4, #8]
100649d0:	2b00      	cmp	r3, #0
100649d2:	da0f      	bge.n	100649f4 <_puts_r+0xa0>
100649d4:	0022      	movs	r2, r4
100649d6:	0028      	movs	r0, r5
100649d8:	310a      	adds	r1, #10
100649da:	f000 f889 	bl	10064af0 <__swbuf_r>
100649de:	3001      	adds	r0, #1
100649e0:	d0d6      	beq.n	10064990 <_puts_r+0x3c>
100649e2:	250a      	movs	r5, #10
100649e4:	e7d6      	b.n	10064994 <_puts_r+0x40>
100649e6:	0022      	movs	r2, r4
100649e8:	0028      	movs	r0, r5
100649ea:	f000 f881 	bl	10064af0 <__swbuf_r>
100649ee:	3001      	adds	r0, #1
100649f0:	d1e8      	bne.n	100649c4 <_puts_r+0x70>
100649f2:	e7cd      	b.n	10064990 <_puts_r+0x3c>
100649f4:	6823      	ldr	r3, [r4, #0]
100649f6:	1c5a      	adds	r2, r3, #1
100649f8:	6022      	str	r2, [r4, #0]
100649fa:	220a      	movs	r2, #10
100649fc:	701a      	strb	r2, [r3, #0]
100649fe:	e7f0      	b.n	100649e2 <_puts_r+0x8e>

10064a00 <puts>:
10064a00:	b510      	push	{r4, lr}
10064a02:	4b03      	ldr	r3, [pc, #12]	@ (10064a10 <puts+0x10>)
10064a04:	0001      	movs	r1, r0
10064a06:	6818      	ldr	r0, [r3, #0]
10064a08:	f7ff ffa4 	bl	10064954 <_puts_r>
10064a0c:	bd10      	pop	{r4, pc}
10064a0e:	46c0      	nop			@ (mov r8, r8)
10064a10:	200012ac 	.word	0x200012ac

10064a14 <siprintf>:
10064a14:	b40e      	push	{r1, r2, r3}
10064a16:	b510      	push	{r4, lr}
10064a18:	2400      	movs	r4, #0
10064a1a:	490c      	ldr	r1, [pc, #48]	@ (10064a4c <siprintf+0x38>)
10064a1c:	b09d      	sub	sp, #116	@ 0x74
10064a1e:	ab1f      	add	r3, sp, #124	@ 0x7c
10064a20:	9002      	str	r0, [sp, #8]
10064a22:	9006      	str	r0, [sp, #24]
10064a24:	9107      	str	r1, [sp, #28]
10064a26:	9104      	str	r1, [sp, #16]
10064a28:	4809      	ldr	r0, [pc, #36]	@ (10064a50 <siprintf+0x3c>)
10064a2a:	490a      	ldr	r1, [pc, #40]	@ (10064a54 <siprintf+0x40>)
10064a2c:	cb04      	ldmia	r3!, {r2}
10064a2e:	9105      	str	r1, [sp, #20]
10064a30:	6800      	ldr	r0, [r0, #0]
10064a32:	a902      	add	r1, sp, #8
10064a34:	9301      	str	r3, [sp, #4]
10064a36:	941b      	str	r4, [sp, #108]	@ 0x6c
10064a38:	f000 fa30 	bl	10064e9c <_svfiprintf_r>
10064a3c:	9b02      	ldr	r3, [sp, #8]
10064a3e:	701c      	strb	r4, [r3, #0]
10064a40:	b01d      	add	sp, #116	@ 0x74
10064a42:	bc10      	pop	{r4}
10064a44:	bc08      	pop	{r3}
10064a46:	b003      	add	sp, #12
10064a48:	4718      	bx	r3
10064a4a:	46c0      	nop			@ (mov r8, r8)
10064a4c:	7fffffff 	.word	0x7fffffff
10064a50:	200012ac 	.word	0x200012ac
10064a54:	ffff0208 	.word	0xffff0208

10064a58 <__sread>:
10064a58:	b570      	push	{r4, r5, r6, lr}
10064a5a:	000c      	movs	r4, r1
10064a5c:	250e      	movs	r5, #14
10064a5e:	5f49      	ldrsh	r1, [r1, r5]
10064a60:	f000 f922 	bl	10064ca8 <_read_r>
10064a64:	2800      	cmp	r0, #0
10064a66:	db03      	blt.n	10064a70 <__sread+0x18>
10064a68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10064a6a:	181b      	adds	r3, r3, r0
10064a6c:	6563      	str	r3, [r4, #84]	@ 0x54
10064a6e:	bd70      	pop	{r4, r5, r6, pc}
10064a70:	89a3      	ldrh	r3, [r4, #12]
10064a72:	4a02      	ldr	r2, [pc, #8]	@ (10064a7c <__sread+0x24>)
10064a74:	4013      	ands	r3, r2
10064a76:	81a3      	strh	r3, [r4, #12]
10064a78:	e7f9      	b.n	10064a6e <__sread+0x16>
10064a7a:	46c0      	nop			@ (mov r8, r8)
10064a7c:	ffffefff 	.word	0xffffefff

10064a80 <__swrite>:
10064a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064a82:	001f      	movs	r7, r3
10064a84:	898b      	ldrh	r3, [r1, #12]
10064a86:	0005      	movs	r5, r0
10064a88:	000c      	movs	r4, r1
10064a8a:	0016      	movs	r6, r2
10064a8c:	05db      	lsls	r3, r3, #23
10064a8e:	d505      	bpl.n	10064a9c <__swrite+0x1c>
10064a90:	230e      	movs	r3, #14
10064a92:	5ec9      	ldrsh	r1, [r1, r3]
10064a94:	2200      	movs	r2, #0
10064a96:	2302      	movs	r3, #2
10064a98:	f000 f8f2 	bl	10064c80 <_lseek_r>
10064a9c:	89a3      	ldrh	r3, [r4, #12]
10064a9e:	4a05      	ldr	r2, [pc, #20]	@ (10064ab4 <__swrite+0x34>)
10064aa0:	0028      	movs	r0, r5
10064aa2:	4013      	ands	r3, r2
10064aa4:	81a3      	strh	r3, [r4, #12]
10064aa6:	0032      	movs	r2, r6
10064aa8:	230e      	movs	r3, #14
10064aaa:	5ee1      	ldrsh	r1, [r4, r3]
10064aac:	003b      	movs	r3, r7
10064aae:	f000 f921 	bl	10064cf4 <_write_r>
10064ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064ab4:	ffffefff 	.word	0xffffefff

10064ab8 <__sseek>:
10064ab8:	b570      	push	{r4, r5, r6, lr}
10064aba:	000c      	movs	r4, r1
10064abc:	250e      	movs	r5, #14
10064abe:	5f49      	ldrsh	r1, [r1, r5]
10064ac0:	f000 f8de 	bl	10064c80 <_lseek_r>
10064ac4:	89a3      	ldrh	r3, [r4, #12]
10064ac6:	1c42      	adds	r2, r0, #1
10064ac8:	d103      	bne.n	10064ad2 <__sseek+0x1a>
10064aca:	4a05      	ldr	r2, [pc, #20]	@ (10064ae0 <__sseek+0x28>)
10064acc:	4013      	ands	r3, r2
10064ace:	81a3      	strh	r3, [r4, #12]
10064ad0:	bd70      	pop	{r4, r5, r6, pc}
10064ad2:	2280      	movs	r2, #128	@ 0x80
10064ad4:	0152      	lsls	r2, r2, #5
10064ad6:	4313      	orrs	r3, r2
10064ad8:	81a3      	strh	r3, [r4, #12]
10064ada:	6560      	str	r0, [r4, #84]	@ 0x54
10064adc:	e7f8      	b.n	10064ad0 <__sseek+0x18>
10064ade:	46c0      	nop			@ (mov r8, r8)
10064ae0:	ffffefff 	.word	0xffffefff

10064ae4 <__sclose>:
10064ae4:	b510      	push	{r4, lr}
10064ae6:	230e      	movs	r3, #14
10064ae8:	5ec9      	ldrsh	r1, [r1, r3]
10064aea:	f000 f8b7 	bl	10064c5c <_close_r>
10064aee:	bd10      	pop	{r4, pc}

10064af0 <__swbuf_r>:
10064af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064af2:	0006      	movs	r6, r0
10064af4:	000d      	movs	r5, r1
10064af6:	0014      	movs	r4, r2
10064af8:	2800      	cmp	r0, #0
10064afa:	d004      	beq.n	10064b06 <__swbuf_r+0x16>
10064afc:	6a03      	ldr	r3, [r0, #32]
10064afe:	2b00      	cmp	r3, #0
10064b00:	d101      	bne.n	10064b06 <__swbuf_r+0x16>
10064b02:	f7ff fef3 	bl	100648ec <__sinit>
10064b06:	69a3      	ldr	r3, [r4, #24]
10064b08:	60a3      	str	r3, [r4, #8]
10064b0a:	89a3      	ldrh	r3, [r4, #12]
10064b0c:	071b      	lsls	r3, r3, #28
10064b0e:	d502      	bpl.n	10064b16 <__swbuf_r+0x26>
10064b10:	6923      	ldr	r3, [r4, #16]
10064b12:	2b00      	cmp	r3, #0
10064b14:	d109      	bne.n	10064b2a <__swbuf_r+0x3a>
10064b16:	0021      	movs	r1, r4
10064b18:	0030      	movs	r0, r6
10064b1a:	f000 f82b 	bl	10064b74 <__swsetup_r>
10064b1e:	2800      	cmp	r0, #0
10064b20:	d003      	beq.n	10064b2a <__swbuf_r+0x3a>
10064b22:	2501      	movs	r5, #1
10064b24:	426d      	negs	r5, r5
10064b26:	0028      	movs	r0, r5
10064b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064b2a:	6923      	ldr	r3, [r4, #16]
10064b2c:	6820      	ldr	r0, [r4, #0]
10064b2e:	b2ef      	uxtb	r7, r5
10064b30:	1ac0      	subs	r0, r0, r3
10064b32:	6963      	ldr	r3, [r4, #20]
10064b34:	b2ed      	uxtb	r5, r5
10064b36:	4283      	cmp	r3, r0
10064b38:	dc05      	bgt.n	10064b46 <__swbuf_r+0x56>
10064b3a:	0021      	movs	r1, r4
10064b3c:	0030      	movs	r0, r6
10064b3e:	f000 fcad 	bl	1006549c <_fflush_r>
10064b42:	2800      	cmp	r0, #0
10064b44:	d1ed      	bne.n	10064b22 <__swbuf_r+0x32>
10064b46:	68a3      	ldr	r3, [r4, #8]
10064b48:	3001      	adds	r0, #1
10064b4a:	3b01      	subs	r3, #1
10064b4c:	60a3      	str	r3, [r4, #8]
10064b4e:	6823      	ldr	r3, [r4, #0]
10064b50:	1c5a      	adds	r2, r3, #1
10064b52:	6022      	str	r2, [r4, #0]
10064b54:	701f      	strb	r7, [r3, #0]
10064b56:	6963      	ldr	r3, [r4, #20]
10064b58:	4283      	cmp	r3, r0
10064b5a:	d004      	beq.n	10064b66 <__swbuf_r+0x76>
10064b5c:	89a3      	ldrh	r3, [r4, #12]
10064b5e:	07db      	lsls	r3, r3, #31
10064b60:	d5e1      	bpl.n	10064b26 <__swbuf_r+0x36>
10064b62:	2d0a      	cmp	r5, #10
10064b64:	d1df      	bne.n	10064b26 <__swbuf_r+0x36>
10064b66:	0021      	movs	r1, r4
10064b68:	0030      	movs	r0, r6
10064b6a:	f000 fc97 	bl	1006549c <_fflush_r>
10064b6e:	2800      	cmp	r0, #0
10064b70:	d0d9      	beq.n	10064b26 <__swbuf_r+0x36>
10064b72:	e7d6      	b.n	10064b22 <__swbuf_r+0x32>

10064b74 <__swsetup_r>:
10064b74:	4b2d      	ldr	r3, [pc, #180]	@ (10064c2c <__swsetup_r+0xb8>)
10064b76:	b570      	push	{r4, r5, r6, lr}
10064b78:	0005      	movs	r5, r0
10064b7a:	6818      	ldr	r0, [r3, #0]
10064b7c:	000c      	movs	r4, r1
10064b7e:	2800      	cmp	r0, #0
10064b80:	d004      	beq.n	10064b8c <__swsetup_r+0x18>
10064b82:	6a03      	ldr	r3, [r0, #32]
10064b84:	2b00      	cmp	r3, #0
10064b86:	d101      	bne.n	10064b8c <__swsetup_r+0x18>
10064b88:	f7ff feb0 	bl	100648ec <__sinit>
10064b8c:	220c      	movs	r2, #12
10064b8e:	5ea3      	ldrsh	r3, [r4, r2]
10064b90:	071a      	lsls	r2, r3, #28
10064b92:	d423      	bmi.n	10064bdc <__swsetup_r+0x68>
10064b94:	06da      	lsls	r2, r3, #27
10064b96:	d407      	bmi.n	10064ba8 <__swsetup_r+0x34>
10064b98:	2209      	movs	r2, #9
10064b9a:	602a      	str	r2, [r5, #0]
10064b9c:	2240      	movs	r2, #64	@ 0x40
10064b9e:	2001      	movs	r0, #1
10064ba0:	4313      	orrs	r3, r2
10064ba2:	81a3      	strh	r3, [r4, #12]
10064ba4:	4240      	negs	r0, r0
10064ba6:	e03a      	b.n	10064c1e <__swsetup_r+0xaa>
10064ba8:	075b      	lsls	r3, r3, #29
10064baa:	d513      	bpl.n	10064bd4 <__swsetup_r+0x60>
10064bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10064bae:	2900      	cmp	r1, #0
10064bb0:	d008      	beq.n	10064bc4 <__swsetup_r+0x50>
10064bb2:	0023      	movs	r3, r4
10064bb4:	3344      	adds	r3, #68	@ 0x44
10064bb6:	4299      	cmp	r1, r3
10064bb8:	d002      	beq.n	10064bc0 <__swsetup_r+0x4c>
10064bba:	0028      	movs	r0, r5
10064bbc:	f000 f8c4 	bl	10064d48 <_free_r>
10064bc0:	2300      	movs	r3, #0
10064bc2:	6363      	str	r3, [r4, #52]	@ 0x34
10064bc4:	2224      	movs	r2, #36	@ 0x24
10064bc6:	89a3      	ldrh	r3, [r4, #12]
10064bc8:	4393      	bics	r3, r2
10064bca:	81a3      	strh	r3, [r4, #12]
10064bcc:	2300      	movs	r3, #0
10064bce:	6063      	str	r3, [r4, #4]
10064bd0:	6923      	ldr	r3, [r4, #16]
10064bd2:	6023      	str	r3, [r4, #0]
10064bd4:	2308      	movs	r3, #8
10064bd6:	89a2      	ldrh	r2, [r4, #12]
10064bd8:	4313      	orrs	r3, r2
10064bda:	81a3      	strh	r3, [r4, #12]
10064bdc:	6923      	ldr	r3, [r4, #16]
10064bde:	2b00      	cmp	r3, #0
10064be0:	d10b      	bne.n	10064bfa <__swsetup_r+0x86>
10064be2:	21a0      	movs	r1, #160	@ 0xa0
10064be4:	2280      	movs	r2, #128	@ 0x80
10064be6:	89a3      	ldrh	r3, [r4, #12]
10064be8:	0089      	lsls	r1, r1, #2
10064bea:	0092      	lsls	r2, r2, #2
10064bec:	400b      	ands	r3, r1
10064bee:	4293      	cmp	r3, r2
10064bf0:	d003      	beq.n	10064bfa <__swsetup_r+0x86>
10064bf2:	0021      	movs	r1, r4
10064bf4:	0028      	movs	r0, r5
10064bf6:	f000 fca7 	bl	10065548 <__smakebuf_r>
10064bfa:	220c      	movs	r2, #12
10064bfc:	5ea3      	ldrsh	r3, [r4, r2]
10064bfe:	2101      	movs	r1, #1
10064c00:	001a      	movs	r2, r3
10064c02:	400a      	ands	r2, r1
10064c04:	420b      	tst	r3, r1
10064c06:	d00b      	beq.n	10064c20 <__swsetup_r+0xac>
10064c08:	2200      	movs	r2, #0
10064c0a:	60a2      	str	r2, [r4, #8]
10064c0c:	6962      	ldr	r2, [r4, #20]
10064c0e:	4252      	negs	r2, r2
10064c10:	61a2      	str	r2, [r4, #24]
10064c12:	2000      	movs	r0, #0
10064c14:	6922      	ldr	r2, [r4, #16]
10064c16:	4282      	cmp	r2, r0
10064c18:	d101      	bne.n	10064c1e <__swsetup_r+0xaa>
10064c1a:	061a      	lsls	r2, r3, #24
10064c1c:	d4be      	bmi.n	10064b9c <__swsetup_r+0x28>
10064c1e:	bd70      	pop	{r4, r5, r6, pc}
10064c20:	0799      	lsls	r1, r3, #30
10064c22:	d400      	bmi.n	10064c26 <__swsetup_r+0xb2>
10064c24:	6962      	ldr	r2, [r4, #20]
10064c26:	60a2      	str	r2, [r4, #8]
10064c28:	e7f3      	b.n	10064c12 <__swsetup_r+0x9e>
10064c2a:	46c0      	nop			@ (mov r8, r8)
10064c2c:	200012ac 	.word	0x200012ac

10064c30 <memcmp>:
10064c30:	b530      	push	{r4, r5, lr}
10064c32:	2400      	movs	r4, #0
10064c34:	3901      	subs	r1, #1
10064c36:	42a2      	cmp	r2, r4
10064c38:	d101      	bne.n	10064c3e <memcmp+0xe>
10064c3a:	2000      	movs	r0, #0
10064c3c:	e005      	b.n	10064c4a <memcmp+0x1a>
10064c3e:	5d03      	ldrb	r3, [r0, r4]
10064c40:	3401      	adds	r4, #1
10064c42:	5d0d      	ldrb	r5, [r1, r4]
10064c44:	42ab      	cmp	r3, r5
10064c46:	d0f6      	beq.n	10064c36 <memcmp+0x6>
10064c48:	1b58      	subs	r0, r3, r5
10064c4a:	bd30      	pop	{r4, r5, pc}

10064c4c <memset>:
10064c4c:	0003      	movs	r3, r0
10064c4e:	1882      	adds	r2, r0, r2
10064c50:	4293      	cmp	r3, r2
10064c52:	d100      	bne.n	10064c56 <memset+0xa>
10064c54:	4770      	bx	lr
10064c56:	7019      	strb	r1, [r3, #0]
10064c58:	3301      	adds	r3, #1
10064c5a:	e7f9      	b.n	10064c50 <memset+0x4>

10064c5c <_close_r>:
10064c5c:	2300      	movs	r3, #0
10064c5e:	b570      	push	{r4, r5, r6, lr}
10064c60:	4d06      	ldr	r5, [pc, #24]	@ (10064c7c <_close_r+0x20>)
10064c62:	0004      	movs	r4, r0
10064c64:	0008      	movs	r0, r1
10064c66:	602b      	str	r3, [r5, #0]
10064c68:	f7df fa5b 	bl	10044122 <_close>
10064c6c:	1c43      	adds	r3, r0, #1
10064c6e:	d103      	bne.n	10064c78 <_close_r+0x1c>
10064c70:	682b      	ldr	r3, [r5, #0]
10064c72:	2b00      	cmp	r3, #0
10064c74:	d000      	beq.n	10064c78 <_close_r+0x1c>
10064c76:	6023      	str	r3, [r4, #0]
10064c78:	bd70      	pop	{r4, r5, r6, pc}
10064c7a:	46c0      	nop			@ (mov r8, r8)
10064c7c:	200010bc 	.word	0x200010bc

10064c80 <_lseek_r>:
10064c80:	b570      	push	{r4, r5, r6, lr}
10064c82:	0004      	movs	r4, r0
10064c84:	0008      	movs	r0, r1
10064c86:	0011      	movs	r1, r2
10064c88:	001a      	movs	r2, r3
10064c8a:	2300      	movs	r3, #0
10064c8c:	4d05      	ldr	r5, [pc, #20]	@ (10064ca4 <_lseek_r+0x24>)
10064c8e:	602b      	str	r3, [r5, #0]
10064c90:	f7df fa68 	bl	10044164 <_lseek>
10064c94:	1c43      	adds	r3, r0, #1
10064c96:	d103      	bne.n	10064ca0 <_lseek_r+0x20>
10064c98:	682b      	ldr	r3, [r5, #0]
10064c9a:	2b00      	cmp	r3, #0
10064c9c:	d000      	beq.n	10064ca0 <_lseek_r+0x20>
10064c9e:	6023      	str	r3, [r4, #0]
10064ca0:	bd70      	pop	{r4, r5, r6, pc}
10064ca2:	46c0      	nop			@ (mov r8, r8)
10064ca4:	200010bc 	.word	0x200010bc

10064ca8 <_read_r>:
10064ca8:	b570      	push	{r4, r5, r6, lr}
10064caa:	0004      	movs	r4, r0
10064cac:	0008      	movs	r0, r1
10064cae:	0011      	movs	r1, r2
10064cb0:	001a      	movs	r2, r3
10064cb2:	2300      	movs	r3, #0
10064cb4:	4d05      	ldr	r5, [pc, #20]	@ (10064ccc <_read_r+0x24>)
10064cb6:	602b      	str	r3, [r5, #0]
10064cb8:	f7df f9fa 	bl	100440b0 <_read>
10064cbc:	1c43      	adds	r3, r0, #1
10064cbe:	d103      	bne.n	10064cc8 <_read_r+0x20>
10064cc0:	682b      	ldr	r3, [r5, #0]
10064cc2:	2b00      	cmp	r3, #0
10064cc4:	d000      	beq.n	10064cc8 <_read_r+0x20>
10064cc6:	6023      	str	r3, [r4, #0]
10064cc8:	bd70      	pop	{r4, r5, r6, pc}
10064cca:	46c0      	nop			@ (mov r8, r8)
10064ccc:	200010bc 	.word	0x200010bc

10064cd0 <_sbrk_r>:
10064cd0:	2300      	movs	r3, #0
10064cd2:	b570      	push	{r4, r5, r6, lr}
10064cd4:	4d06      	ldr	r5, [pc, #24]	@ (10064cf0 <_sbrk_r+0x20>)
10064cd6:	0004      	movs	r4, r0
10064cd8:	0008      	movs	r0, r1
10064cda:	602b      	str	r3, [r5, #0]
10064cdc:	f7df fa4e 	bl	1004417c <_sbrk>
10064ce0:	1c43      	adds	r3, r0, #1
10064ce2:	d103      	bne.n	10064cec <_sbrk_r+0x1c>
10064ce4:	682b      	ldr	r3, [r5, #0]
10064ce6:	2b00      	cmp	r3, #0
10064ce8:	d000      	beq.n	10064cec <_sbrk_r+0x1c>
10064cea:	6023      	str	r3, [r4, #0]
10064cec:	bd70      	pop	{r4, r5, r6, pc}
10064cee:	46c0      	nop			@ (mov r8, r8)
10064cf0:	200010bc 	.word	0x200010bc

10064cf4 <_write_r>:
10064cf4:	b570      	push	{r4, r5, r6, lr}
10064cf6:	0004      	movs	r4, r0
10064cf8:	0008      	movs	r0, r1
10064cfa:	0011      	movs	r1, r2
10064cfc:	001a      	movs	r2, r3
10064cfe:	2300      	movs	r3, #0
10064d00:	4d05      	ldr	r5, [pc, #20]	@ (10064d18 <_write_r+0x24>)
10064d02:	602b      	str	r3, [r5, #0]
10064d04:	f7df f9f1 	bl	100440ea <_write>
10064d08:	1c43      	adds	r3, r0, #1
10064d0a:	d103      	bne.n	10064d14 <_write_r+0x20>
10064d0c:	682b      	ldr	r3, [r5, #0]
10064d0e:	2b00      	cmp	r3, #0
10064d10:	d000      	beq.n	10064d14 <_write_r+0x20>
10064d12:	6023      	str	r3, [r4, #0]
10064d14:	bd70      	pop	{r4, r5, r6, pc}
10064d16:	46c0      	nop			@ (mov r8, r8)
10064d18:	200010bc 	.word	0x200010bc

10064d1c <__errno>:
10064d1c:	4b01      	ldr	r3, [pc, #4]	@ (10064d24 <__errno+0x8>)
10064d1e:	6818      	ldr	r0, [r3, #0]
10064d20:	4770      	bx	lr
10064d22:	46c0      	nop			@ (mov r8, r8)
10064d24:	200012ac 	.word	0x200012ac

10064d28 <__retarget_lock_init_recursive>:
10064d28:	4770      	bx	lr

10064d2a <__retarget_lock_acquire_recursive>:
10064d2a:	4770      	bx	lr

10064d2c <__retarget_lock_release_recursive>:
10064d2c:	4770      	bx	lr

10064d2e <__aeabi_memcpy>:
10064d2e:	b510      	push	{r4, lr}
10064d30:	f000 f801 	bl	10064d36 <memcpy>
10064d34:	bd10      	pop	{r4, pc}

10064d36 <memcpy>:
10064d36:	2300      	movs	r3, #0
10064d38:	b510      	push	{r4, lr}
10064d3a:	429a      	cmp	r2, r3
10064d3c:	d100      	bne.n	10064d40 <memcpy+0xa>
10064d3e:	bd10      	pop	{r4, pc}
10064d40:	5ccc      	ldrb	r4, [r1, r3]
10064d42:	54c4      	strb	r4, [r0, r3]
10064d44:	3301      	adds	r3, #1
10064d46:	e7f8      	b.n	10064d3a <memcpy+0x4>

10064d48 <_free_r>:
10064d48:	b570      	push	{r4, r5, r6, lr}
10064d4a:	0005      	movs	r5, r0
10064d4c:	1e0c      	subs	r4, r1, #0
10064d4e:	d010      	beq.n	10064d72 <_free_r+0x2a>
10064d50:	3c04      	subs	r4, #4
10064d52:	6823      	ldr	r3, [r4, #0]
10064d54:	2b00      	cmp	r3, #0
10064d56:	da00      	bge.n	10064d5a <_free_r+0x12>
10064d58:	18e4      	adds	r4, r4, r3
10064d5a:	0028      	movs	r0, r5
10064d5c:	f7ff fd26 	bl	100647ac <__malloc_lock>
10064d60:	4a1d      	ldr	r2, [pc, #116]	@ (10064dd8 <_free_r+0x90>)
10064d62:	6813      	ldr	r3, [r2, #0]
10064d64:	2b00      	cmp	r3, #0
10064d66:	d105      	bne.n	10064d74 <_free_r+0x2c>
10064d68:	6063      	str	r3, [r4, #4]
10064d6a:	6014      	str	r4, [r2, #0]
10064d6c:	0028      	movs	r0, r5
10064d6e:	f7ff fd25 	bl	100647bc <__malloc_unlock>
10064d72:	bd70      	pop	{r4, r5, r6, pc}
10064d74:	42a3      	cmp	r3, r4
10064d76:	d908      	bls.n	10064d8a <_free_r+0x42>
10064d78:	6820      	ldr	r0, [r4, #0]
10064d7a:	1821      	adds	r1, r4, r0
10064d7c:	428b      	cmp	r3, r1
10064d7e:	d1f3      	bne.n	10064d68 <_free_r+0x20>
10064d80:	6819      	ldr	r1, [r3, #0]
10064d82:	685b      	ldr	r3, [r3, #4]
10064d84:	1809      	adds	r1, r1, r0
10064d86:	6021      	str	r1, [r4, #0]
10064d88:	e7ee      	b.n	10064d68 <_free_r+0x20>
10064d8a:	001a      	movs	r2, r3
10064d8c:	685b      	ldr	r3, [r3, #4]
10064d8e:	2b00      	cmp	r3, #0
10064d90:	d001      	beq.n	10064d96 <_free_r+0x4e>
10064d92:	42a3      	cmp	r3, r4
10064d94:	d9f9      	bls.n	10064d8a <_free_r+0x42>
10064d96:	6811      	ldr	r1, [r2, #0]
10064d98:	1850      	adds	r0, r2, r1
10064d9a:	42a0      	cmp	r0, r4
10064d9c:	d10b      	bne.n	10064db6 <_free_r+0x6e>
10064d9e:	6820      	ldr	r0, [r4, #0]
10064da0:	1809      	adds	r1, r1, r0
10064da2:	1850      	adds	r0, r2, r1
10064da4:	6011      	str	r1, [r2, #0]
10064da6:	4283      	cmp	r3, r0
10064da8:	d1e0      	bne.n	10064d6c <_free_r+0x24>
10064daa:	6818      	ldr	r0, [r3, #0]
10064dac:	685b      	ldr	r3, [r3, #4]
10064dae:	1841      	adds	r1, r0, r1
10064db0:	6011      	str	r1, [r2, #0]
10064db2:	6053      	str	r3, [r2, #4]
10064db4:	e7da      	b.n	10064d6c <_free_r+0x24>
10064db6:	42a0      	cmp	r0, r4
10064db8:	d902      	bls.n	10064dc0 <_free_r+0x78>
10064dba:	230c      	movs	r3, #12
10064dbc:	602b      	str	r3, [r5, #0]
10064dbe:	e7d5      	b.n	10064d6c <_free_r+0x24>
10064dc0:	6820      	ldr	r0, [r4, #0]
10064dc2:	1821      	adds	r1, r4, r0
10064dc4:	428b      	cmp	r3, r1
10064dc6:	d103      	bne.n	10064dd0 <_free_r+0x88>
10064dc8:	6819      	ldr	r1, [r3, #0]
10064dca:	685b      	ldr	r3, [r3, #4]
10064dcc:	1809      	adds	r1, r1, r0
10064dce:	6021      	str	r1, [r4, #0]
10064dd0:	6063      	str	r3, [r4, #4]
10064dd2:	6054      	str	r4, [r2, #4]
10064dd4:	e7ca      	b.n	10064d6c <_free_r+0x24>
10064dd6:	46c0      	nop			@ (mov r8, r8)
10064dd8:	20000f7c 	.word	0x20000f7c

10064ddc <__ssputs_r>:
10064ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10064dde:	688e      	ldr	r6, [r1, #8]
10064de0:	b085      	sub	sp, #20
10064de2:	001f      	movs	r7, r3
10064de4:	000c      	movs	r4, r1
10064de6:	680b      	ldr	r3, [r1, #0]
10064de8:	9002      	str	r0, [sp, #8]
10064dea:	9203      	str	r2, [sp, #12]
10064dec:	42be      	cmp	r6, r7
10064dee:	d830      	bhi.n	10064e52 <__ssputs_r+0x76>
10064df0:	210c      	movs	r1, #12
10064df2:	5e62      	ldrsh	r2, [r4, r1]
10064df4:	2190      	movs	r1, #144	@ 0x90
10064df6:	00c9      	lsls	r1, r1, #3
10064df8:	420a      	tst	r2, r1
10064dfa:	d028      	beq.n	10064e4e <__ssputs_r+0x72>
10064dfc:	2003      	movs	r0, #3
10064dfe:	6921      	ldr	r1, [r4, #16]
10064e00:	1a5b      	subs	r3, r3, r1
10064e02:	9301      	str	r3, [sp, #4]
10064e04:	6963      	ldr	r3, [r4, #20]
10064e06:	4343      	muls	r3, r0
10064e08:	9801      	ldr	r0, [sp, #4]
10064e0a:	0fdd      	lsrs	r5, r3, #31
10064e0c:	18ed      	adds	r5, r5, r3
10064e0e:	1c7b      	adds	r3, r7, #1
10064e10:	181b      	adds	r3, r3, r0
10064e12:	106d      	asrs	r5, r5, #1
10064e14:	42ab      	cmp	r3, r5
10064e16:	d900      	bls.n	10064e1a <__ssputs_r+0x3e>
10064e18:	001d      	movs	r5, r3
10064e1a:	0552      	lsls	r2, r2, #21
10064e1c:	d528      	bpl.n	10064e70 <__ssputs_r+0x94>
10064e1e:	0029      	movs	r1, r5
10064e20:	9802      	ldr	r0, [sp, #8]
10064e22:	f7ff fc43 	bl	100646ac <_malloc_r>
10064e26:	1e06      	subs	r6, r0, #0
10064e28:	d02c      	beq.n	10064e84 <__ssputs_r+0xa8>
10064e2a:	9a01      	ldr	r2, [sp, #4]
10064e2c:	6921      	ldr	r1, [r4, #16]
10064e2e:	f7ff ff82 	bl	10064d36 <memcpy>
10064e32:	89a2      	ldrh	r2, [r4, #12]
10064e34:	4b18      	ldr	r3, [pc, #96]	@ (10064e98 <__ssputs_r+0xbc>)
10064e36:	401a      	ands	r2, r3
10064e38:	2380      	movs	r3, #128	@ 0x80
10064e3a:	4313      	orrs	r3, r2
10064e3c:	81a3      	strh	r3, [r4, #12]
10064e3e:	9b01      	ldr	r3, [sp, #4]
10064e40:	6126      	str	r6, [r4, #16]
10064e42:	18f6      	adds	r6, r6, r3
10064e44:	6026      	str	r6, [r4, #0]
10064e46:	003e      	movs	r6, r7
10064e48:	6165      	str	r5, [r4, #20]
10064e4a:	1aed      	subs	r5, r5, r3
10064e4c:	60a5      	str	r5, [r4, #8]
10064e4e:	42be      	cmp	r6, r7
10064e50:	d900      	bls.n	10064e54 <__ssputs_r+0x78>
10064e52:	003e      	movs	r6, r7
10064e54:	0032      	movs	r2, r6
10064e56:	9903      	ldr	r1, [sp, #12]
10064e58:	6820      	ldr	r0, [r4, #0]
10064e5a:	f000 fbb6 	bl	100655ca <memmove>
10064e5e:	2000      	movs	r0, #0
10064e60:	68a3      	ldr	r3, [r4, #8]
10064e62:	1b9b      	subs	r3, r3, r6
10064e64:	60a3      	str	r3, [r4, #8]
10064e66:	6823      	ldr	r3, [r4, #0]
10064e68:	199b      	adds	r3, r3, r6
10064e6a:	6023      	str	r3, [r4, #0]
10064e6c:	b005      	add	sp, #20
10064e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064e70:	002a      	movs	r2, r5
10064e72:	9802      	ldr	r0, [sp, #8]
10064e74:	f000 fbeb 	bl	1006564e <_realloc_r>
10064e78:	1e06      	subs	r6, r0, #0
10064e7a:	d1e0      	bne.n	10064e3e <__ssputs_r+0x62>
10064e7c:	6921      	ldr	r1, [r4, #16]
10064e7e:	9802      	ldr	r0, [sp, #8]
10064e80:	f7ff ff62 	bl	10064d48 <_free_r>
10064e84:	230c      	movs	r3, #12
10064e86:	2001      	movs	r0, #1
10064e88:	9a02      	ldr	r2, [sp, #8]
10064e8a:	4240      	negs	r0, r0
10064e8c:	6013      	str	r3, [r2, #0]
10064e8e:	89a2      	ldrh	r2, [r4, #12]
10064e90:	3334      	adds	r3, #52	@ 0x34
10064e92:	4313      	orrs	r3, r2
10064e94:	81a3      	strh	r3, [r4, #12]
10064e96:	e7e9      	b.n	10064e6c <__ssputs_r+0x90>
10064e98:	fffffb7f 	.word	0xfffffb7f

10064e9c <_svfiprintf_r>:
10064e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10064e9e:	b0a1      	sub	sp, #132	@ 0x84
10064ea0:	9003      	str	r0, [sp, #12]
10064ea2:	001d      	movs	r5, r3
10064ea4:	898b      	ldrh	r3, [r1, #12]
10064ea6:	000f      	movs	r7, r1
10064ea8:	0016      	movs	r6, r2
10064eaa:	061b      	lsls	r3, r3, #24
10064eac:	d511      	bpl.n	10064ed2 <_svfiprintf_r+0x36>
10064eae:	690b      	ldr	r3, [r1, #16]
10064eb0:	2b00      	cmp	r3, #0
10064eb2:	d10e      	bne.n	10064ed2 <_svfiprintf_r+0x36>
10064eb4:	2140      	movs	r1, #64	@ 0x40
10064eb6:	f7ff fbf9 	bl	100646ac <_malloc_r>
10064eba:	6038      	str	r0, [r7, #0]
10064ebc:	6138      	str	r0, [r7, #16]
10064ebe:	2800      	cmp	r0, #0
10064ec0:	d105      	bne.n	10064ece <_svfiprintf_r+0x32>
10064ec2:	230c      	movs	r3, #12
10064ec4:	9a03      	ldr	r2, [sp, #12]
10064ec6:	6013      	str	r3, [r2, #0]
10064ec8:	2001      	movs	r0, #1
10064eca:	4240      	negs	r0, r0
10064ecc:	e0cf      	b.n	1006506e <_svfiprintf_r+0x1d2>
10064ece:	2340      	movs	r3, #64	@ 0x40
10064ed0:	617b      	str	r3, [r7, #20]
10064ed2:	2300      	movs	r3, #0
10064ed4:	ac08      	add	r4, sp, #32
10064ed6:	6163      	str	r3, [r4, #20]
10064ed8:	3320      	adds	r3, #32
10064eda:	7663      	strb	r3, [r4, #25]
10064edc:	3310      	adds	r3, #16
10064ede:	76a3      	strb	r3, [r4, #26]
10064ee0:	9507      	str	r5, [sp, #28]
10064ee2:	0035      	movs	r5, r6
10064ee4:	782b      	ldrb	r3, [r5, #0]
10064ee6:	2b00      	cmp	r3, #0
10064ee8:	d001      	beq.n	10064eee <_svfiprintf_r+0x52>
10064eea:	2b25      	cmp	r3, #37	@ 0x25
10064eec:	d148      	bne.n	10064f80 <_svfiprintf_r+0xe4>
10064eee:	1bab      	subs	r3, r5, r6
10064ef0:	9305      	str	r3, [sp, #20]
10064ef2:	42b5      	cmp	r5, r6
10064ef4:	d00b      	beq.n	10064f0e <_svfiprintf_r+0x72>
10064ef6:	0032      	movs	r2, r6
10064ef8:	0039      	movs	r1, r7
10064efa:	9803      	ldr	r0, [sp, #12]
10064efc:	f7ff ff6e 	bl	10064ddc <__ssputs_r>
10064f00:	3001      	adds	r0, #1
10064f02:	d100      	bne.n	10064f06 <_svfiprintf_r+0x6a>
10064f04:	e0ae      	b.n	10065064 <_svfiprintf_r+0x1c8>
10064f06:	6963      	ldr	r3, [r4, #20]
10064f08:	9a05      	ldr	r2, [sp, #20]
10064f0a:	189b      	adds	r3, r3, r2
10064f0c:	6163      	str	r3, [r4, #20]
10064f0e:	782b      	ldrb	r3, [r5, #0]
10064f10:	2b00      	cmp	r3, #0
10064f12:	d100      	bne.n	10064f16 <_svfiprintf_r+0x7a>
10064f14:	e0a6      	b.n	10065064 <_svfiprintf_r+0x1c8>
10064f16:	2201      	movs	r2, #1
10064f18:	2300      	movs	r3, #0
10064f1a:	4252      	negs	r2, r2
10064f1c:	6062      	str	r2, [r4, #4]
10064f1e:	a904      	add	r1, sp, #16
10064f20:	3254      	adds	r2, #84	@ 0x54
10064f22:	1852      	adds	r2, r2, r1
10064f24:	1c6e      	adds	r6, r5, #1
10064f26:	6023      	str	r3, [r4, #0]
10064f28:	60e3      	str	r3, [r4, #12]
10064f2a:	60a3      	str	r3, [r4, #8]
10064f2c:	7013      	strb	r3, [r2, #0]
10064f2e:	65a3      	str	r3, [r4, #88]	@ 0x58
10064f30:	4b54      	ldr	r3, [pc, #336]	@ (10065084 <_svfiprintf_r+0x1e8>)
10064f32:	2205      	movs	r2, #5
10064f34:	0018      	movs	r0, r3
10064f36:	7831      	ldrb	r1, [r6, #0]
10064f38:	9305      	str	r3, [sp, #20]
10064f3a:	f000 fb7d 	bl	10065638 <memchr>
10064f3e:	1c75      	adds	r5, r6, #1
10064f40:	2800      	cmp	r0, #0
10064f42:	d11f      	bne.n	10064f84 <_svfiprintf_r+0xe8>
10064f44:	6822      	ldr	r2, [r4, #0]
10064f46:	06d3      	lsls	r3, r2, #27
10064f48:	d504      	bpl.n	10064f54 <_svfiprintf_r+0xb8>
10064f4a:	2353      	movs	r3, #83	@ 0x53
10064f4c:	a904      	add	r1, sp, #16
10064f4e:	185b      	adds	r3, r3, r1
10064f50:	2120      	movs	r1, #32
10064f52:	7019      	strb	r1, [r3, #0]
10064f54:	0713      	lsls	r3, r2, #28
10064f56:	d504      	bpl.n	10064f62 <_svfiprintf_r+0xc6>
10064f58:	2353      	movs	r3, #83	@ 0x53
10064f5a:	a904      	add	r1, sp, #16
10064f5c:	185b      	adds	r3, r3, r1
10064f5e:	212b      	movs	r1, #43	@ 0x2b
10064f60:	7019      	strb	r1, [r3, #0]
10064f62:	7833      	ldrb	r3, [r6, #0]
10064f64:	2b2a      	cmp	r3, #42	@ 0x2a
10064f66:	d016      	beq.n	10064f96 <_svfiprintf_r+0xfa>
10064f68:	0035      	movs	r5, r6
10064f6a:	2100      	movs	r1, #0
10064f6c:	200a      	movs	r0, #10
10064f6e:	68e3      	ldr	r3, [r4, #12]
10064f70:	782a      	ldrb	r2, [r5, #0]
10064f72:	1c6e      	adds	r6, r5, #1
10064f74:	3a30      	subs	r2, #48	@ 0x30
10064f76:	2a09      	cmp	r2, #9
10064f78:	d950      	bls.n	1006501c <_svfiprintf_r+0x180>
10064f7a:	2900      	cmp	r1, #0
10064f7c:	d111      	bne.n	10064fa2 <_svfiprintf_r+0x106>
10064f7e:	e017      	b.n	10064fb0 <_svfiprintf_r+0x114>
10064f80:	3501      	adds	r5, #1
10064f82:	e7af      	b.n	10064ee4 <_svfiprintf_r+0x48>
10064f84:	9b05      	ldr	r3, [sp, #20]
10064f86:	6822      	ldr	r2, [r4, #0]
10064f88:	1ac0      	subs	r0, r0, r3
10064f8a:	2301      	movs	r3, #1
10064f8c:	4083      	lsls	r3, r0
10064f8e:	4313      	orrs	r3, r2
10064f90:	002e      	movs	r6, r5
10064f92:	6023      	str	r3, [r4, #0]
10064f94:	e7cc      	b.n	10064f30 <_svfiprintf_r+0x94>
10064f96:	9b07      	ldr	r3, [sp, #28]
10064f98:	1d19      	adds	r1, r3, #4
10064f9a:	681b      	ldr	r3, [r3, #0]
10064f9c:	9107      	str	r1, [sp, #28]
10064f9e:	2b00      	cmp	r3, #0
10064fa0:	db01      	blt.n	10064fa6 <_svfiprintf_r+0x10a>
10064fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
10064fa4:	e004      	b.n	10064fb0 <_svfiprintf_r+0x114>
10064fa6:	425b      	negs	r3, r3
10064fa8:	60e3      	str	r3, [r4, #12]
10064faa:	2302      	movs	r3, #2
10064fac:	4313      	orrs	r3, r2
10064fae:	6023      	str	r3, [r4, #0]
10064fb0:	782b      	ldrb	r3, [r5, #0]
10064fb2:	2b2e      	cmp	r3, #46	@ 0x2e
10064fb4:	d10c      	bne.n	10064fd0 <_svfiprintf_r+0x134>
10064fb6:	786b      	ldrb	r3, [r5, #1]
10064fb8:	2b2a      	cmp	r3, #42	@ 0x2a
10064fba:	d134      	bne.n	10065026 <_svfiprintf_r+0x18a>
10064fbc:	9b07      	ldr	r3, [sp, #28]
10064fbe:	3502      	adds	r5, #2
10064fc0:	1d1a      	adds	r2, r3, #4
10064fc2:	681b      	ldr	r3, [r3, #0]
10064fc4:	9207      	str	r2, [sp, #28]
10064fc6:	2b00      	cmp	r3, #0
10064fc8:	da01      	bge.n	10064fce <_svfiprintf_r+0x132>
10064fca:	2301      	movs	r3, #1
10064fcc:	425b      	negs	r3, r3
10064fce:	9309      	str	r3, [sp, #36]	@ 0x24
10064fd0:	4e2d      	ldr	r6, [pc, #180]	@ (10065088 <_svfiprintf_r+0x1ec>)
10064fd2:	2203      	movs	r2, #3
10064fd4:	0030      	movs	r0, r6
10064fd6:	7829      	ldrb	r1, [r5, #0]
10064fd8:	f000 fb2e 	bl	10065638 <memchr>
10064fdc:	2800      	cmp	r0, #0
10064fde:	d006      	beq.n	10064fee <_svfiprintf_r+0x152>
10064fe0:	2340      	movs	r3, #64	@ 0x40
10064fe2:	1b80      	subs	r0, r0, r6
10064fe4:	4083      	lsls	r3, r0
10064fe6:	6822      	ldr	r2, [r4, #0]
10064fe8:	3501      	adds	r5, #1
10064fea:	4313      	orrs	r3, r2
10064fec:	6023      	str	r3, [r4, #0]
10064fee:	7829      	ldrb	r1, [r5, #0]
10064ff0:	2206      	movs	r2, #6
10064ff2:	4826      	ldr	r0, [pc, #152]	@ (1006508c <_svfiprintf_r+0x1f0>)
10064ff4:	1c6e      	adds	r6, r5, #1
10064ff6:	7621      	strb	r1, [r4, #24]
10064ff8:	f000 fb1e 	bl	10065638 <memchr>
10064ffc:	2800      	cmp	r0, #0
10064ffe:	d038      	beq.n	10065072 <_svfiprintf_r+0x1d6>
10065000:	4b23      	ldr	r3, [pc, #140]	@ (10065090 <_svfiprintf_r+0x1f4>)
10065002:	2b00      	cmp	r3, #0
10065004:	d122      	bne.n	1006504c <_svfiprintf_r+0x1b0>
10065006:	2207      	movs	r2, #7
10065008:	9b07      	ldr	r3, [sp, #28]
1006500a:	3307      	adds	r3, #7
1006500c:	4393      	bics	r3, r2
1006500e:	3308      	adds	r3, #8
10065010:	9307      	str	r3, [sp, #28]
10065012:	6963      	ldr	r3, [r4, #20]
10065014:	9a04      	ldr	r2, [sp, #16]
10065016:	189b      	adds	r3, r3, r2
10065018:	6163      	str	r3, [r4, #20]
1006501a:	e762      	b.n	10064ee2 <_svfiprintf_r+0x46>
1006501c:	4343      	muls	r3, r0
1006501e:	0035      	movs	r5, r6
10065020:	2101      	movs	r1, #1
10065022:	189b      	adds	r3, r3, r2
10065024:	e7a4      	b.n	10064f70 <_svfiprintf_r+0xd4>
10065026:	2300      	movs	r3, #0
10065028:	200a      	movs	r0, #10
1006502a:	0019      	movs	r1, r3
1006502c:	3501      	adds	r5, #1
1006502e:	6063      	str	r3, [r4, #4]
10065030:	782a      	ldrb	r2, [r5, #0]
10065032:	1c6e      	adds	r6, r5, #1
10065034:	3a30      	subs	r2, #48	@ 0x30
10065036:	2a09      	cmp	r2, #9
10065038:	d903      	bls.n	10065042 <_svfiprintf_r+0x1a6>
1006503a:	2b00      	cmp	r3, #0
1006503c:	d0c8      	beq.n	10064fd0 <_svfiprintf_r+0x134>
1006503e:	9109      	str	r1, [sp, #36]	@ 0x24
10065040:	e7c6      	b.n	10064fd0 <_svfiprintf_r+0x134>
10065042:	4341      	muls	r1, r0
10065044:	0035      	movs	r5, r6
10065046:	2301      	movs	r3, #1
10065048:	1889      	adds	r1, r1, r2
1006504a:	e7f1      	b.n	10065030 <_svfiprintf_r+0x194>
1006504c:	aa07      	add	r2, sp, #28
1006504e:	9200      	str	r2, [sp, #0]
10065050:	0021      	movs	r1, r4
10065052:	003a      	movs	r2, r7
10065054:	4b0f      	ldr	r3, [pc, #60]	@ (10065094 <_svfiprintf_r+0x1f8>)
10065056:	9803      	ldr	r0, [sp, #12]
10065058:	e000      	b.n	1006505c <_svfiprintf_r+0x1c0>
1006505a:	bf00      	nop
1006505c:	9004      	str	r0, [sp, #16]
1006505e:	9b04      	ldr	r3, [sp, #16]
10065060:	3301      	adds	r3, #1
10065062:	d1d6      	bne.n	10065012 <_svfiprintf_r+0x176>
10065064:	89bb      	ldrh	r3, [r7, #12]
10065066:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065068:	065b      	lsls	r3, r3, #25
1006506a:	d500      	bpl.n	1006506e <_svfiprintf_r+0x1d2>
1006506c:	e72c      	b.n	10064ec8 <_svfiprintf_r+0x2c>
1006506e:	b021      	add	sp, #132	@ 0x84
10065070:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065072:	aa07      	add	r2, sp, #28
10065074:	9200      	str	r2, [sp, #0]
10065076:	0021      	movs	r1, r4
10065078:	003a      	movs	r2, r7
1006507a:	4b06      	ldr	r3, [pc, #24]	@ (10065094 <_svfiprintf_r+0x1f8>)
1006507c:	9803      	ldr	r0, [sp, #12]
1006507e:	f000 f87b 	bl	10065178 <_printf_i>
10065082:	e7eb      	b.n	1006505c <_svfiprintf_r+0x1c0>
10065084:	100661e1 	.word	0x100661e1
10065088:	100661e7 	.word	0x100661e7
1006508c:	100661eb 	.word	0x100661eb
10065090:	00000000 	.word	0x00000000
10065094:	10064ddd 	.word	0x10064ddd

10065098 <_printf_common>:
10065098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006509a:	0016      	movs	r6, r2
1006509c:	9301      	str	r3, [sp, #4]
1006509e:	688a      	ldr	r2, [r1, #8]
100650a0:	690b      	ldr	r3, [r1, #16]
100650a2:	000c      	movs	r4, r1
100650a4:	9000      	str	r0, [sp, #0]
100650a6:	4293      	cmp	r3, r2
100650a8:	da00      	bge.n	100650ac <_printf_common+0x14>
100650aa:	0013      	movs	r3, r2
100650ac:	0022      	movs	r2, r4
100650ae:	6033      	str	r3, [r6, #0]
100650b0:	3243      	adds	r2, #67	@ 0x43
100650b2:	7812      	ldrb	r2, [r2, #0]
100650b4:	2a00      	cmp	r2, #0
100650b6:	d001      	beq.n	100650bc <_printf_common+0x24>
100650b8:	3301      	adds	r3, #1
100650ba:	6033      	str	r3, [r6, #0]
100650bc:	6823      	ldr	r3, [r4, #0]
100650be:	069b      	lsls	r3, r3, #26
100650c0:	d502      	bpl.n	100650c8 <_printf_common+0x30>
100650c2:	6833      	ldr	r3, [r6, #0]
100650c4:	3302      	adds	r3, #2
100650c6:	6033      	str	r3, [r6, #0]
100650c8:	6822      	ldr	r2, [r4, #0]
100650ca:	2306      	movs	r3, #6
100650cc:	0015      	movs	r5, r2
100650ce:	401d      	ands	r5, r3
100650d0:	421a      	tst	r2, r3
100650d2:	d027      	beq.n	10065124 <_printf_common+0x8c>
100650d4:	0023      	movs	r3, r4
100650d6:	3343      	adds	r3, #67	@ 0x43
100650d8:	781b      	ldrb	r3, [r3, #0]
100650da:	1e5a      	subs	r2, r3, #1
100650dc:	4193      	sbcs	r3, r2
100650de:	6822      	ldr	r2, [r4, #0]
100650e0:	0692      	lsls	r2, r2, #26
100650e2:	d430      	bmi.n	10065146 <_printf_common+0xae>
100650e4:	0022      	movs	r2, r4
100650e6:	9901      	ldr	r1, [sp, #4]
100650e8:	9800      	ldr	r0, [sp, #0]
100650ea:	9d08      	ldr	r5, [sp, #32]
100650ec:	3243      	adds	r2, #67	@ 0x43
100650ee:	47a8      	blx	r5
100650f0:	3001      	adds	r0, #1
100650f2:	d025      	beq.n	10065140 <_printf_common+0xa8>
100650f4:	2206      	movs	r2, #6
100650f6:	6823      	ldr	r3, [r4, #0]
100650f8:	2500      	movs	r5, #0
100650fa:	4013      	ands	r3, r2
100650fc:	2b04      	cmp	r3, #4
100650fe:	d105      	bne.n	1006510c <_printf_common+0x74>
10065100:	6833      	ldr	r3, [r6, #0]
10065102:	68e5      	ldr	r5, [r4, #12]
10065104:	1aed      	subs	r5, r5, r3
10065106:	43eb      	mvns	r3, r5
10065108:	17db      	asrs	r3, r3, #31
1006510a:	401d      	ands	r5, r3
1006510c:	68a3      	ldr	r3, [r4, #8]
1006510e:	6922      	ldr	r2, [r4, #16]
10065110:	4293      	cmp	r3, r2
10065112:	dd01      	ble.n	10065118 <_printf_common+0x80>
10065114:	1a9b      	subs	r3, r3, r2
10065116:	18ed      	adds	r5, r5, r3
10065118:	2600      	movs	r6, #0
1006511a:	42b5      	cmp	r5, r6
1006511c:	d120      	bne.n	10065160 <_printf_common+0xc8>
1006511e:	2000      	movs	r0, #0
10065120:	e010      	b.n	10065144 <_printf_common+0xac>
10065122:	3501      	adds	r5, #1
10065124:	68e3      	ldr	r3, [r4, #12]
10065126:	6832      	ldr	r2, [r6, #0]
10065128:	1a9b      	subs	r3, r3, r2
1006512a:	42ab      	cmp	r3, r5
1006512c:	ddd2      	ble.n	100650d4 <_printf_common+0x3c>
1006512e:	0022      	movs	r2, r4
10065130:	2301      	movs	r3, #1
10065132:	9901      	ldr	r1, [sp, #4]
10065134:	9800      	ldr	r0, [sp, #0]
10065136:	9f08      	ldr	r7, [sp, #32]
10065138:	3219      	adds	r2, #25
1006513a:	47b8      	blx	r7
1006513c:	3001      	adds	r0, #1
1006513e:	d1f0      	bne.n	10065122 <_printf_common+0x8a>
10065140:	2001      	movs	r0, #1
10065142:	4240      	negs	r0, r0
10065144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065146:	2030      	movs	r0, #48	@ 0x30
10065148:	18e1      	adds	r1, r4, r3
1006514a:	3143      	adds	r1, #67	@ 0x43
1006514c:	7008      	strb	r0, [r1, #0]
1006514e:	0021      	movs	r1, r4
10065150:	1c5a      	adds	r2, r3, #1
10065152:	3145      	adds	r1, #69	@ 0x45
10065154:	7809      	ldrb	r1, [r1, #0]
10065156:	18a2      	adds	r2, r4, r2
10065158:	3243      	adds	r2, #67	@ 0x43
1006515a:	3302      	adds	r3, #2
1006515c:	7011      	strb	r1, [r2, #0]
1006515e:	e7c1      	b.n	100650e4 <_printf_common+0x4c>
10065160:	0022      	movs	r2, r4
10065162:	2301      	movs	r3, #1
10065164:	9901      	ldr	r1, [sp, #4]
10065166:	9800      	ldr	r0, [sp, #0]
10065168:	9f08      	ldr	r7, [sp, #32]
1006516a:	321a      	adds	r2, #26
1006516c:	47b8      	blx	r7
1006516e:	3001      	adds	r0, #1
10065170:	d0e6      	beq.n	10065140 <_printf_common+0xa8>
10065172:	3601      	adds	r6, #1
10065174:	e7d1      	b.n	1006511a <_printf_common+0x82>
	...

10065178 <_printf_i>:
10065178:	b5f0      	push	{r4, r5, r6, r7, lr}
1006517a:	b08b      	sub	sp, #44	@ 0x2c
1006517c:	9206      	str	r2, [sp, #24]
1006517e:	000a      	movs	r2, r1
10065180:	3243      	adds	r2, #67	@ 0x43
10065182:	9307      	str	r3, [sp, #28]
10065184:	9005      	str	r0, [sp, #20]
10065186:	9203      	str	r2, [sp, #12]
10065188:	7e0a      	ldrb	r2, [r1, #24]
1006518a:	000c      	movs	r4, r1
1006518c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1006518e:	2a78      	cmp	r2, #120	@ 0x78
10065190:	d809      	bhi.n	100651a6 <_printf_i+0x2e>
10065192:	2a62      	cmp	r2, #98	@ 0x62
10065194:	d80b      	bhi.n	100651ae <_printf_i+0x36>
10065196:	2a00      	cmp	r2, #0
10065198:	d100      	bne.n	1006519c <_printf_i+0x24>
1006519a:	e0ba      	b.n	10065312 <_printf_i+0x19a>
1006519c:	497a      	ldr	r1, [pc, #488]	@ (10065388 <_printf_i+0x210>)
1006519e:	9104      	str	r1, [sp, #16]
100651a0:	2a58      	cmp	r2, #88	@ 0x58
100651a2:	d100      	bne.n	100651a6 <_printf_i+0x2e>
100651a4:	e08e      	b.n	100652c4 <_printf_i+0x14c>
100651a6:	0025      	movs	r5, r4
100651a8:	3542      	adds	r5, #66	@ 0x42
100651aa:	702a      	strb	r2, [r5, #0]
100651ac:	e022      	b.n	100651f4 <_printf_i+0x7c>
100651ae:	0010      	movs	r0, r2
100651b0:	3863      	subs	r0, #99	@ 0x63
100651b2:	2815      	cmp	r0, #21
100651b4:	d8f7      	bhi.n	100651a6 <_printf_i+0x2e>
100651b6:	f7db f839 	bl	1004022c <__gnu_thumb1_case_shi>
100651ba:	0016      	.short	0x0016
100651bc:	fff6001f 	.word	0xfff6001f
100651c0:	fff6fff6 	.word	0xfff6fff6
100651c4:	001ffff6 	.word	0x001ffff6
100651c8:	fff6fff6 	.word	0xfff6fff6
100651cc:	fff6fff6 	.word	0xfff6fff6
100651d0:	0036009f 	.word	0x0036009f
100651d4:	fff6007e 	.word	0xfff6007e
100651d8:	00b0fff6 	.word	0x00b0fff6
100651dc:	0036fff6 	.word	0x0036fff6
100651e0:	fff6fff6 	.word	0xfff6fff6
100651e4:	0082      	.short	0x0082
100651e6:	0025      	movs	r5, r4
100651e8:	681a      	ldr	r2, [r3, #0]
100651ea:	3542      	adds	r5, #66	@ 0x42
100651ec:	1d11      	adds	r1, r2, #4
100651ee:	6019      	str	r1, [r3, #0]
100651f0:	6813      	ldr	r3, [r2, #0]
100651f2:	702b      	strb	r3, [r5, #0]
100651f4:	2301      	movs	r3, #1
100651f6:	e09e      	b.n	10065336 <_printf_i+0x1be>
100651f8:	6818      	ldr	r0, [r3, #0]
100651fa:	6809      	ldr	r1, [r1, #0]
100651fc:	1d02      	adds	r2, r0, #4
100651fe:	060d      	lsls	r5, r1, #24
10065200:	d50b      	bpl.n	1006521a <_printf_i+0xa2>
10065202:	6806      	ldr	r6, [r0, #0]
10065204:	601a      	str	r2, [r3, #0]
10065206:	2e00      	cmp	r6, #0
10065208:	da03      	bge.n	10065212 <_printf_i+0x9a>
1006520a:	232d      	movs	r3, #45	@ 0x2d
1006520c:	9a03      	ldr	r2, [sp, #12]
1006520e:	4276      	negs	r6, r6
10065210:	7013      	strb	r3, [r2, #0]
10065212:	4b5d      	ldr	r3, [pc, #372]	@ (10065388 <_printf_i+0x210>)
10065214:	270a      	movs	r7, #10
10065216:	9304      	str	r3, [sp, #16]
10065218:	e018      	b.n	1006524c <_printf_i+0xd4>
1006521a:	6806      	ldr	r6, [r0, #0]
1006521c:	601a      	str	r2, [r3, #0]
1006521e:	0649      	lsls	r1, r1, #25
10065220:	d5f1      	bpl.n	10065206 <_printf_i+0x8e>
10065222:	b236      	sxth	r6, r6
10065224:	e7ef      	b.n	10065206 <_printf_i+0x8e>
10065226:	6808      	ldr	r0, [r1, #0]
10065228:	6819      	ldr	r1, [r3, #0]
1006522a:	c940      	ldmia	r1!, {r6}
1006522c:	0605      	lsls	r5, r0, #24
1006522e:	d402      	bmi.n	10065236 <_printf_i+0xbe>
10065230:	0640      	lsls	r0, r0, #25
10065232:	d500      	bpl.n	10065236 <_printf_i+0xbe>
10065234:	b2b6      	uxth	r6, r6
10065236:	6019      	str	r1, [r3, #0]
10065238:	4b53      	ldr	r3, [pc, #332]	@ (10065388 <_printf_i+0x210>)
1006523a:	270a      	movs	r7, #10
1006523c:	9304      	str	r3, [sp, #16]
1006523e:	2a6f      	cmp	r2, #111	@ 0x6f
10065240:	d100      	bne.n	10065244 <_printf_i+0xcc>
10065242:	3f02      	subs	r7, #2
10065244:	0023      	movs	r3, r4
10065246:	2200      	movs	r2, #0
10065248:	3343      	adds	r3, #67	@ 0x43
1006524a:	701a      	strb	r2, [r3, #0]
1006524c:	6863      	ldr	r3, [r4, #4]
1006524e:	60a3      	str	r3, [r4, #8]
10065250:	2b00      	cmp	r3, #0
10065252:	db06      	blt.n	10065262 <_printf_i+0xea>
10065254:	2104      	movs	r1, #4
10065256:	6822      	ldr	r2, [r4, #0]
10065258:	9d03      	ldr	r5, [sp, #12]
1006525a:	438a      	bics	r2, r1
1006525c:	6022      	str	r2, [r4, #0]
1006525e:	4333      	orrs	r3, r6
10065260:	d00c      	beq.n	1006527c <_printf_i+0x104>
10065262:	9d03      	ldr	r5, [sp, #12]
10065264:	0030      	movs	r0, r6
10065266:	0039      	movs	r1, r7
10065268:	f7db f870 	bl	1004034c <__aeabi_uidivmod>
1006526c:	9b04      	ldr	r3, [sp, #16]
1006526e:	3d01      	subs	r5, #1
10065270:	5c5b      	ldrb	r3, [r3, r1]
10065272:	702b      	strb	r3, [r5, #0]
10065274:	0033      	movs	r3, r6
10065276:	0006      	movs	r6, r0
10065278:	429f      	cmp	r7, r3
1006527a:	d9f3      	bls.n	10065264 <_printf_i+0xec>
1006527c:	2f08      	cmp	r7, #8
1006527e:	d109      	bne.n	10065294 <_printf_i+0x11c>
10065280:	6823      	ldr	r3, [r4, #0]
10065282:	07db      	lsls	r3, r3, #31
10065284:	d506      	bpl.n	10065294 <_printf_i+0x11c>
10065286:	6862      	ldr	r2, [r4, #4]
10065288:	6923      	ldr	r3, [r4, #16]
1006528a:	429a      	cmp	r2, r3
1006528c:	dc02      	bgt.n	10065294 <_printf_i+0x11c>
1006528e:	2330      	movs	r3, #48	@ 0x30
10065290:	3d01      	subs	r5, #1
10065292:	702b      	strb	r3, [r5, #0]
10065294:	9b03      	ldr	r3, [sp, #12]
10065296:	1b5b      	subs	r3, r3, r5
10065298:	6123      	str	r3, [r4, #16]
1006529a:	9b07      	ldr	r3, [sp, #28]
1006529c:	0021      	movs	r1, r4
1006529e:	9300      	str	r3, [sp, #0]
100652a0:	9805      	ldr	r0, [sp, #20]
100652a2:	9b06      	ldr	r3, [sp, #24]
100652a4:	aa09      	add	r2, sp, #36	@ 0x24
100652a6:	f7ff fef7 	bl	10065098 <_printf_common>
100652aa:	3001      	adds	r0, #1
100652ac:	d148      	bne.n	10065340 <_printf_i+0x1c8>
100652ae:	2001      	movs	r0, #1
100652b0:	4240      	negs	r0, r0
100652b2:	b00b      	add	sp, #44	@ 0x2c
100652b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100652b6:	2220      	movs	r2, #32
100652b8:	6809      	ldr	r1, [r1, #0]
100652ba:	430a      	orrs	r2, r1
100652bc:	6022      	str	r2, [r4, #0]
100652be:	2278      	movs	r2, #120	@ 0x78
100652c0:	4932      	ldr	r1, [pc, #200]	@ (1006538c <_printf_i+0x214>)
100652c2:	9104      	str	r1, [sp, #16]
100652c4:	0021      	movs	r1, r4
100652c6:	3145      	adds	r1, #69	@ 0x45
100652c8:	700a      	strb	r2, [r1, #0]
100652ca:	6819      	ldr	r1, [r3, #0]
100652cc:	6822      	ldr	r2, [r4, #0]
100652ce:	c940      	ldmia	r1!, {r6}
100652d0:	0610      	lsls	r0, r2, #24
100652d2:	d402      	bmi.n	100652da <_printf_i+0x162>
100652d4:	0650      	lsls	r0, r2, #25
100652d6:	d500      	bpl.n	100652da <_printf_i+0x162>
100652d8:	b2b6      	uxth	r6, r6
100652da:	6019      	str	r1, [r3, #0]
100652dc:	07d3      	lsls	r3, r2, #31
100652de:	d502      	bpl.n	100652e6 <_printf_i+0x16e>
100652e0:	2320      	movs	r3, #32
100652e2:	4313      	orrs	r3, r2
100652e4:	6023      	str	r3, [r4, #0]
100652e6:	2e00      	cmp	r6, #0
100652e8:	d001      	beq.n	100652ee <_printf_i+0x176>
100652ea:	2710      	movs	r7, #16
100652ec:	e7aa      	b.n	10065244 <_printf_i+0xcc>
100652ee:	2220      	movs	r2, #32
100652f0:	6823      	ldr	r3, [r4, #0]
100652f2:	4393      	bics	r3, r2
100652f4:	6023      	str	r3, [r4, #0]
100652f6:	e7f8      	b.n	100652ea <_printf_i+0x172>
100652f8:	681a      	ldr	r2, [r3, #0]
100652fa:	680d      	ldr	r5, [r1, #0]
100652fc:	1d10      	adds	r0, r2, #4
100652fe:	6949      	ldr	r1, [r1, #20]
10065300:	6018      	str	r0, [r3, #0]
10065302:	6813      	ldr	r3, [r2, #0]
10065304:	062e      	lsls	r6, r5, #24
10065306:	d501      	bpl.n	1006530c <_printf_i+0x194>
10065308:	6019      	str	r1, [r3, #0]
1006530a:	e002      	b.n	10065312 <_printf_i+0x19a>
1006530c:	066d      	lsls	r5, r5, #25
1006530e:	d5fb      	bpl.n	10065308 <_printf_i+0x190>
10065310:	8019      	strh	r1, [r3, #0]
10065312:	2300      	movs	r3, #0
10065314:	9d03      	ldr	r5, [sp, #12]
10065316:	6123      	str	r3, [r4, #16]
10065318:	e7bf      	b.n	1006529a <_printf_i+0x122>
1006531a:	681a      	ldr	r2, [r3, #0]
1006531c:	1d11      	adds	r1, r2, #4
1006531e:	6019      	str	r1, [r3, #0]
10065320:	6815      	ldr	r5, [r2, #0]
10065322:	2100      	movs	r1, #0
10065324:	0028      	movs	r0, r5
10065326:	6862      	ldr	r2, [r4, #4]
10065328:	f000 f986 	bl	10065638 <memchr>
1006532c:	2800      	cmp	r0, #0
1006532e:	d001      	beq.n	10065334 <_printf_i+0x1bc>
10065330:	1b40      	subs	r0, r0, r5
10065332:	6060      	str	r0, [r4, #4]
10065334:	6863      	ldr	r3, [r4, #4]
10065336:	6123      	str	r3, [r4, #16]
10065338:	2300      	movs	r3, #0
1006533a:	9a03      	ldr	r2, [sp, #12]
1006533c:	7013      	strb	r3, [r2, #0]
1006533e:	e7ac      	b.n	1006529a <_printf_i+0x122>
10065340:	002a      	movs	r2, r5
10065342:	6923      	ldr	r3, [r4, #16]
10065344:	9906      	ldr	r1, [sp, #24]
10065346:	9805      	ldr	r0, [sp, #20]
10065348:	9d07      	ldr	r5, [sp, #28]
1006534a:	47a8      	blx	r5
1006534c:	3001      	adds	r0, #1
1006534e:	d0ae      	beq.n	100652ae <_printf_i+0x136>
10065350:	6823      	ldr	r3, [r4, #0]
10065352:	079b      	lsls	r3, r3, #30
10065354:	d415      	bmi.n	10065382 <_printf_i+0x20a>
10065356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10065358:	68e0      	ldr	r0, [r4, #12]
1006535a:	4298      	cmp	r0, r3
1006535c:	daa9      	bge.n	100652b2 <_printf_i+0x13a>
1006535e:	0018      	movs	r0, r3
10065360:	e7a7      	b.n	100652b2 <_printf_i+0x13a>
10065362:	0022      	movs	r2, r4
10065364:	2301      	movs	r3, #1
10065366:	9906      	ldr	r1, [sp, #24]
10065368:	9805      	ldr	r0, [sp, #20]
1006536a:	9e07      	ldr	r6, [sp, #28]
1006536c:	3219      	adds	r2, #25
1006536e:	47b0      	blx	r6
10065370:	3001      	adds	r0, #1
10065372:	d09c      	beq.n	100652ae <_printf_i+0x136>
10065374:	3501      	adds	r5, #1
10065376:	68e3      	ldr	r3, [r4, #12]
10065378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1006537a:	1a9b      	subs	r3, r3, r2
1006537c:	42ab      	cmp	r3, r5
1006537e:	dcf0      	bgt.n	10065362 <_printf_i+0x1ea>
10065380:	e7e9      	b.n	10065356 <_printf_i+0x1de>
10065382:	2500      	movs	r5, #0
10065384:	e7f7      	b.n	10065376 <_printf_i+0x1fe>
10065386:	46c0      	nop			@ (mov r8, r8)
10065388:	100661f2 	.word	0x100661f2
1006538c:	10066203 	.word	0x10066203

10065390 <__sflush_r>:
10065390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10065392:	220c      	movs	r2, #12
10065394:	5e8b      	ldrsh	r3, [r1, r2]
10065396:	0005      	movs	r5, r0
10065398:	000c      	movs	r4, r1
1006539a:	071a      	lsls	r2, r3, #28
1006539c:	d456      	bmi.n	1006544c <__sflush_r+0xbc>
1006539e:	684a      	ldr	r2, [r1, #4]
100653a0:	2a00      	cmp	r2, #0
100653a2:	dc02      	bgt.n	100653aa <__sflush_r+0x1a>
100653a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
100653a6:	2a00      	cmp	r2, #0
100653a8:	dd4e      	ble.n	10065448 <__sflush_r+0xb8>
100653aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100653ac:	2f00      	cmp	r7, #0
100653ae:	d04b      	beq.n	10065448 <__sflush_r+0xb8>
100653b0:	2200      	movs	r2, #0
100653b2:	2080      	movs	r0, #128	@ 0x80
100653b4:	682e      	ldr	r6, [r5, #0]
100653b6:	602a      	str	r2, [r5, #0]
100653b8:	001a      	movs	r2, r3
100653ba:	0140      	lsls	r0, r0, #5
100653bc:	6a21      	ldr	r1, [r4, #32]
100653be:	4002      	ands	r2, r0
100653c0:	4203      	tst	r3, r0
100653c2:	d033      	beq.n	1006542c <__sflush_r+0x9c>
100653c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
100653c6:	89a3      	ldrh	r3, [r4, #12]
100653c8:	075b      	lsls	r3, r3, #29
100653ca:	d506      	bpl.n	100653da <__sflush_r+0x4a>
100653cc:	6863      	ldr	r3, [r4, #4]
100653ce:	1ad2      	subs	r2, r2, r3
100653d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
100653d2:	2b00      	cmp	r3, #0
100653d4:	d001      	beq.n	100653da <__sflush_r+0x4a>
100653d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
100653d8:	1ad2      	subs	r2, r2, r3
100653da:	2300      	movs	r3, #0
100653dc:	0028      	movs	r0, r5
100653de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100653e0:	6a21      	ldr	r1, [r4, #32]
100653e2:	47b8      	blx	r7
100653e4:	89a2      	ldrh	r2, [r4, #12]
100653e6:	1c43      	adds	r3, r0, #1
100653e8:	d106      	bne.n	100653f8 <__sflush_r+0x68>
100653ea:	6829      	ldr	r1, [r5, #0]
100653ec:	291d      	cmp	r1, #29
100653ee:	d846      	bhi.n	1006547e <__sflush_r+0xee>
100653f0:	4b29      	ldr	r3, [pc, #164]	@ (10065498 <__sflush_r+0x108>)
100653f2:	40cb      	lsrs	r3, r1
100653f4:	07db      	lsls	r3, r3, #31
100653f6:	d542      	bpl.n	1006547e <__sflush_r+0xee>
100653f8:	2300      	movs	r3, #0
100653fa:	6063      	str	r3, [r4, #4]
100653fc:	6923      	ldr	r3, [r4, #16]
100653fe:	6023      	str	r3, [r4, #0]
10065400:	04d2      	lsls	r2, r2, #19
10065402:	d505      	bpl.n	10065410 <__sflush_r+0x80>
10065404:	1c43      	adds	r3, r0, #1
10065406:	d102      	bne.n	1006540e <__sflush_r+0x7e>
10065408:	682b      	ldr	r3, [r5, #0]
1006540a:	2b00      	cmp	r3, #0
1006540c:	d100      	bne.n	10065410 <__sflush_r+0x80>
1006540e:	6560      	str	r0, [r4, #84]	@ 0x54
10065410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10065412:	602e      	str	r6, [r5, #0]
10065414:	2900      	cmp	r1, #0
10065416:	d017      	beq.n	10065448 <__sflush_r+0xb8>
10065418:	0023      	movs	r3, r4
1006541a:	3344      	adds	r3, #68	@ 0x44
1006541c:	4299      	cmp	r1, r3
1006541e:	d002      	beq.n	10065426 <__sflush_r+0x96>
10065420:	0028      	movs	r0, r5
10065422:	f7ff fc91 	bl	10064d48 <_free_r>
10065426:	2300      	movs	r3, #0
10065428:	6363      	str	r3, [r4, #52]	@ 0x34
1006542a:	e00d      	b.n	10065448 <__sflush_r+0xb8>
1006542c:	2301      	movs	r3, #1
1006542e:	0028      	movs	r0, r5
10065430:	47b8      	blx	r7
10065432:	0002      	movs	r2, r0
10065434:	1c43      	adds	r3, r0, #1
10065436:	d1c6      	bne.n	100653c6 <__sflush_r+0x36>
10065438:	682b      	ldr	r3, [r5, #0]
1006543a:	2b00      	cmp	r3, #0
1006543c:	d0c3      	beq.n	100653c6 <__sflush_r+0x36>
1006543e:	2b1d      	cmp	r3, #29
10065440:	d001      	beq.n	10065446 <__sflush_r+0xb6>
10065442:	2b16      	cmp	r3, #22
10065444:	d11a      	bne.n	1006547c <__sflush_r+0xec>
10065446:	602e      	str	r6, [r5, #0]
10065448:	2000      	movs	r0, #0
1006544a:	e01e      	b.n	1006548a <__sflush_r+0xfa>
1006544c:	690e      	ldr	r6, [r1, #16]
1006544e:	2e00      	cmp	r6, #0
10065450:	d0fa      	beq.n	10065448 <__sflush_r+0xb8>
10065452:	680f      	ldr	r7, [r1, #0]
10065454:	600e      	str	r6, [r1, #0]
10065456:	1bba      	subs	r2, r7, r6
10065458:	9201      	str	r2, [sp, #4]
1006545a:	2200      	movs	r2, #0
1006545c:	079b      	lsls	r3, r3, #30
1006545e:	d100      	bne.n	10065462 <__sflush_r+0xd2>
10065460:	694a      	ldr	r2, [r1, #20]
10065462:	60a2      	str	r2, [r4, #8]
10065464:	9b01      	ldr	r3, [sp, #4]
10065466:	2b00      	cmp	r3, #0
10065468:	ddee      	ble.n	10065448 <__sflush_r+0xb8>
1006546a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1006546c:	0032      	movs	r2, r6
1006546e:	001f      	movs	r7, r3
10065470:	0028      	movs	r0, r5
10065472:	9b01      	ldr	r3, [sp, #4]
10065474:	6a21      	ldr	r1, [r4, #32]
10065476:	47b8      	blx	r7
10065478:	2800      	cmp	r0, #0
1006547a:	dc07      	bgt.n	1006548c <__sflush_r+0xfc>
1006547c:	89a2      	ldrh	r2, [r4, #12]
1006547e:	2340      	movs	r3, #64	@ 0x40
10065480:	2001      	movs	r0, #1
10065482:	4313      	orrs	r3, r2
10065484:	b21b      	sxth	r3, r3
10065486:	81a3      	strh	r3, [r4, #12]
10065488:	4240      	negs	r0, r0
1006548a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006548c:	9b01      	ldr	r3, [sp, #4]
1006548e:	1836      	adds	r6, r6, r0
10065490:	1a1b      	subs	r3, r3, r0
10065492:	9301      	str	r3, [sp, #4]
10065494:	e7e6      	b.n	10065464 <__sflush_r+0xd4>
10065496:	46c0      	nop			@ (mov r8, r8)
10065498:	20400001 	.word	0x20400001

1006549c <_fflush_r>:
1006549c:	690b      	ldr	r3, [r1, #16]
1006549e:	b570      	push	{r4, r5, r6, lr}
100654a0:	0005      	movs	r5, r0
100654a2:	000c      	movs	r4, r1
100654a4:	2b00      	cmp	r3, #0
100654a6:	d102      	bne.n	100654ae <_fflush_r+0x12>
100654a8:	2500      	movs	r5, #0
100654aa:	0028      	movs	r0, r5
100654ac:	bd70      	pop	{r4, r5, r6, pc}
100654ae:	2800      	cmp	r0, #0
100654b0:	d004      	beq.n	100654bc <_fflush_r+0x20>
100654b2:	6a03      	ldr	r3, [r0, #32]
100654b4:	2b00      	cmp	r3, #0
100654b6:	d101      	bne.n	100654bc <_fflush_r+0x20>
100654b8:	f7ff fa18 	bl	100648ec <__sinit>
100654bc:	220c      	movs	r2, #12
100654be:	5ea3      	ldrsh	r3, [r4, r2]
100654c0:	2b00      	cmp	r3, #0
100654c2:	d0f1      	beq.n	100654a8 <_fflush_r+0xc>
100654c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100654c6:	07d2      	lsls	r2, r2, #31
100654c8:	d404      	bmi.n	100654d4 <_fflush_r+0x38>
100654ca:	059b      	lsls	r3, r3, #22
100654cc:	d402      	bmi.n	100654d4 <_fflush_r+0x38>
100654ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100654d0:	f7ff fc2b 	bl	10064d2a <__retarget_lock_acquire_recursive>
100654d4:	0028      	movs	r0, r5
100654d6:	0021      	movs	r1, r4
100654d8:	f7ff ff5a 	bl	10065390 <__sflush_r>
100654dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100654de:	0005      	movs	r5, r0
100654e0:	07db      	lsls	r3, r3, #31
100654e2:	d4e2      	bmi.n	100654aa <_fflush_r+0xe>
100654e4:	89a3      	ldrh	r3, [r4, #12]
100654e6:	059b      	lsls	r3, r3, #22
100654e8:	d4df      	bmi.n	100654aa <_fflush_r+0xe>
100654ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100654ec:	f7ff fc1e 	bl	10064d2c <__retarget_lock_release_recursive>
100654f0:	e7db      	b.n	100654aa <_fflush_r+0xe>
	...

100654f4 <__swhatbuf_r>:
100654f4:	b570      	push	{r4, r5, r6, lr}
100654f6:	000e      	movs	r6, r1
100654f8:	001d      	movs	r5, r3
100654fa:	230e      	movs	r3, #14
100654fc:	5ec9      	ldrsh	r1, [r1, r3]
100654fe:	0014      	movs	r4, r2
10065500:	b096      	sub	sp, #88	@ 0x58
10065502:	2900      	cmp	r1, #0
10065504:	da0c      	bge.n	10065520 <__swhatbuf_r+0x2c>
10065506:	89b2      	ldrh	r2, [r6, #12]
10065508:	2380      	movs	r3, #128	@ 0x80
1006550a:	0011      	movs	r1, r2
1006550c:	4019      	ands	r1, r3
1006550e:	421a      	tst	r2, r3
10065510:	d114      	bne.n	1006553c <__swhatbuf_r+0x48>
10065512:	2380      	movs	r3, #128	@ 0x80
10065514:	00db      	lsls	r3, r3, #3
10065516:	2000      	movs	r0, #0
10065518:	6029      	str	r1, [r5, #0]
1006551a:	6023      	str	r3, [r4, #0]
1006551c:	b016      	add	sp, #88	@ 0x58
1006551e:	bd70      	pop	{r4, r5, r6, pc}
10065520:	466a      	mov	r2, sp
10065522:	f000 f865 	bl	100655f0 <_fstat_r>
10065526:	2800      	cmp	r0, #0
10065528:	dbed      	blt.n	10065506 <__swhatbuf_r+0x12>
1006552a:	23f0      	movs	r3, #240	@ 0xf0
1006552c:	9901      	ldr	r1, [sp, #4]
1006552e:	021b      	lsls	r3, r3, #8
10065530:	4019      	ands	r1, r3
10065532:	4b04      	ldr	r3, [pc, #16]	@ (10065544 <__swhatbuf_r+0x50>)
10065534:	18c9      	adds	r1, r1, r3
10065536:	424b      	negs	r3, r1
10065538:	4159      	adcs	r1, r3
1006553a:	e7ea      	b.n	10065512 <__swhatbuf_r+0x1e>
1006553c:	2100      	movs	r1, #0
1006553e:	2340      	movs	r3, #64	@ 0x40
10065540:	e7e9      	b.n	10065516 <__swhatbuf_r+0x22>
10065542:	46c0      	nop			@ (mov r8, r8)
10065544:	ffffe000 	.word	0xffffe000

10065548 <__smakebuf_r>:
10065548:	b5f0      	push	{r4, r5, r6, r7, lr}
1006554a:	2602      	movs	r6, #2
1006554c:	898b      	ldrh	r3, [r1, #12]
1006554e:	0005      	movs	r5, r0
10065550:	000c      	movs	r4, r1
10065552:	b085      	sub	sp, #20
10065554:	4233      	tst	r3, r6
10065556:	d007      	beq.n	10065568 <__smakebuf_r+0x20>
10065558:	0023      	movs	r3, r4
1006555a:	3347      	adds	r3, #71	@ 0x47
1006555c:	6023      	str	r3, [r4, #0]
1006555e:	6123      	str	r3, [r4, #16]
10065560:	2301      	movs	r3, #1
10065562:	6163      	str	r3, [r4, #20]
10065564:	b005      	add	sp, #20
10065566:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065568:	ab03      	add	r3, sp, #12
1006556a:	aa02      	add	r2, sp, #8
1006556c:	f7ff ffc2 	bl	100654f4 <__swhatbuf_r>
10065570:	9f02      	ldr	r7, [sp, #8]
10065572:	9001      	str	r0, [sp, #4]
10065574:	0039      	movs	r1, r7
10065576:	0028      	movs	r0, r5
10065578:	f7ff f898 	bl	100646ac <_malloc_r>
1006557c:	2800      	cmp	r0, #0
1006557e:	d108      	bne.n	10065592 <__smakebuf_r+0x4a>
10065580:	220c      	movs	r2, #12
10065582:	5ea3      	ldrsh	r3, [r4, r2]
10065584:	059a      	lsls	r2, r3, #22
10065586:	d4ed      	bmi.n	10065564 <__smakebuf_r+0x1c>
10065588:	2203      	movs	r2, #3
1006558a:	4393      	bics	r3, r2
1006558c:	431e      	orrs	r6, r3
1006558e:	81a6      	strh	r6, [r4, #12]
10065590:	e7e2      	b.n	10065558 <__smakebuf_r+0x10>
10065592:	2380      	movs	r3, #128	@ 0x80
10065594:	89a2      	ldrh	r2, [r4, #12]
10065596:	6020      	str	r0, [r4, #0]
10065598:	4313      	orrs	r3, r2
1006559a:	81a3      	strh	r3, [r4, #12]
1006559c:	9b03      	ldr	r3, [sp, #12]
1006559e:	6120      	str	r0, [r4, #16]
100655a0:	6167      	str	r7, [r4, #20]
100655a2:	2b00      	cmp	r3, #0
100655a4:	d00c      	beq.n	100655c0 <__smakebuf_r+0x78>
100655a6:	0028      	movs	r0, r5
100655a8:	230e      	movs	r3, #14
100655aa:	5ee1      	ldrsh	r1, [r4, r3]
100655ac:	f000 f832 	bl	10065614 <_isatty_r>
100655b0:	2800      	cmp	r0, #0
100655b2:	d005      	beq.n	100655c0 <__smakebuf_r+0x78>
100655b4:	2303      	movs	r3, #3
100655b6:	89a2      	ldrh	r2, [r4, #12]
100655b8:	439a      	bics	r2, r3
100655ba:	3b02      	subs	r3, #2
100655bc:	4313      	orrs	r3, r2
100655be:	81a3      	strh	r3, [r4, #12]
100655c0:	89a3      	ldrh	r3, [r4, #12]
100655c2:	9a01      	ldr	r2, [sp, #4]
100655c4:	4313      	orrs	r3, r2
100655c6:	81a3      	strh	r3, [r4, #12]
100655c8:	e7cc      	b.n	10065564 <__smakebuf_r+0x1c>

100655ca <memmove>:
100655ca:	b510      	push	{r4, lr}
100655cc:	4288      	cmp	r0, r1
100655ce:	d902      	bls.n	100655d6 <memmove+0xc>
100655d0:	188b      	adds	r3, r1, r2
100655d2:	4298      	cmp	r0, r3
100655d4:	d308      	bcc.n	100655e8 <memmove+0x1e>
100655d6:	2300      	movs	r3, #0
100655d8:	429a      	cmp	r2, r3
100655da:	d007      	beq.n	100655ec <memmove+0x22>
100655dc:	5ccc      	ldrb	r4, [r1, r3]
100655de:	54c4      	strb	r4, [r0, r3]
100655e0:	3301      	adds	r3, #1
100655e2:	e7f9      	b.n	100655d8 <memmove+0xe>
100655e4:	5c8b      	ldrb	r3, [r1, r2]
100655e6:	5483      	strb	r3, [r0, r2]
100655e8:	3a01      	subs	r2, #1
100655ea:	d2fb      	bcs.n	100655e4 <memmove+0x1a>
100655ec:	bd10      	pop	{r4, pc}
	...

100655f0 <_fstat_r>:
100655f0:	2300      	movs	r3, #0
100655f2:	b570      	push	{r4, r5, r6, lr}
100655f4:	4d06      	ldr	r5, [pc, #24]	@ (10065610 <_fstat_r+0x20>)
100655f6:	0004      	movs	r4, r0
100655f8:	0008      	movs	r0, r1
100655fa:	0011      	movs	r1, r2
100655fc:	602b      	str	r3, [r5, #0]
100655fe:	f7de fd9a 	bl	10044136 <_fstat>
10065602:	1c43      	adds	r3, r0, #1
10065604:	d103      	bne.n	1006560e <_fstat_r+0x1e>
10065606:	682b      	ldr	r3, [r5, #0]
10065608:	2b00      	cmp	r3, #0
1006560a:	d000      	beq.n	1006560e <_fstat_r+0x1e>
1006560c:	6023      	str	r3, [r4, #0]
1006560e:	bd70      	pop	{r4, r5, r6, pc}
10065610:	200010bc 	.word	0x200010bc

10065614 <_isatty_r>:
10065614:	2300      	movs	r3, #0
10065616:	b570      	push	{r4, r5, r6, lr}
10065618:	4d06      	ldr	r5, [pc, #24]	@ (10065634 <_isatty_r+0x20>)
1006561a:	0004      	movs	r4, r0
1006561c:	0008      	movs	r0, r1
1006561e:	602b      	str	r3, [r5, #0]
10065620:	f7de fd97 	bl	10044152 <_isatty>
10065624:	1c43      	adds	r3, r0, #1
10065626:	d103      	bne.n	10065630 <_isatty_r+0x1c>
10065628:	682b      	ldr	r3, [r5, #0]
1006562a:	2b00      	cmp	r3, #0
1006562c:	d000      	beq.n	10065630 <_isatty_r+0x1c>
1006562e:	6023      	str	r3, [r4, #0]
10065630:	bd70      	pop	{r4, r5, r6, pc}
10065632:	46c0      	nop			@ (mov r8, r8)
10065634:	200010bc 	.word	0x200010bc

10065638 <memchr>:
10065638:	b2c9      	uxtb	r1, r1
1006563a:	1882      	adds	r2, r0, r2
1006563c:	4290      	cmp	r0, r2
1006563e:	d101      	bne.n	10065644 <memchr+0xc>
10065640:	2000      	movs	r0, #0
10065642:	4770      	bx	lr
10065644:	7803      	ldrb	r3, [r0, #0]
10065646:	428b      	cmp	r3, r1
10065648:	d0fb      	beq.n	10065642 <memchr+0xa>
1006564a:	3001      	adds	r0, #1
1006564c:	e7f6      	b.n	1006563c <memchr+0x4>

1006564e <_realloc_r>:
1006564e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10065650:	0006      	movs	r6, r0
10065652:	000c      	movs	r4, r1
10065654:	0015      	movs	r5, r2
10065656:	2900      	cmp	r1, #0
10065658:	d105      	bne.n	10065666 <_realloc_r+0x18>
1006565a:	0011      	movs	r1, r2
1006565c:	f7ff f826 	bl	100646ac <_malloc_r>
10065660:	0004      	movs	r4, r0
10065662:	0020      	movs	r0, r4
10065664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065666:	2a00      	cmp	r2, #0
10065668:	d103      	bne.n	10065672 <_realloc_r+0x24>
1006566a:	f7ff fb6d 	bl	10064d48 <_free_r>
1006566e:	002c      	movs	r4, r5
10065670:	e7f7      	b.n	10065662 <_realloc_r+0x14>
10065672:	f000 f81c 	bl	100656ae <_malloc_usable_size_r>
10065676:	0007      	movs	r7, r0
10065678:	4285      	cmp	r5, r0
1006567a:	d802      	bhi.n	10065682 <_realloc_r+0x34>
1006567c:	0843      	lsrs	r3, r0, #1
1006567e:	42ab      	cmp	r3, r5
10065680:	d3ef      	bcc.n	10065662 <_realloc_r+0x14>
10065682:	0029      	movs	r1, r5
10065684:	0030      	movs	r0, r6
10065686:	f7ff f811 	bl	100646ac <_malloc_r>
1006568a:	9001      	str	r0, [sp, #4]
1006568c:	2800      	cmp	r0, #0
1006568e:	d101      	bne.n	10065694 <_realloc_r+0x46>
10065690:	9c01      	ldr	r4, [sp, #4]
10065692:	e7e6      	b.n	10065662 <_realloc_r+0x14>
10065694:	002a      	movs	r2, r5
10065696:	42bd      	cmp	r5, r7
10065698:	d900      	bls.n	1006569c <_realloc_r+0x4e>
1006569a:	003a      	movs	r2, r7
1006569c:	0021      	movs	r1, r4
1006569e:	9801      	ldr	r0, [sp, #4]
100656a0:	f7ff fb49 	bl	10064d36 <memcpy>
100656a4:	0021      	movs	r1, r4
100656a6:	0030      	movs	r0, r6
100656a8:	f7ff fb4e 	bl	10064d48 <_free_r>
100656ac:	e7f0      	b.n	10065690 <_realloc_r+0x42>

100656ae <_malloc_usable_size_r>:
100656ae:	1f0b      	subs	r3, r1, #4
100656b0:	681b      	ldr	r3, [r3, #0]
100656b2:	1f18      	subs	r0, r3, #4
100656b4:	2b00      	cmp	r3, #0
100656b6:	da01      	bge.n	100656bc <_malloc_usable_size_r+0xe>
100656b8:	580b      	ldr	r3, [r1, r0]
100656ba:	18c0      	adds	r0, r0, r3
100656bc:	4770      	bx	lr
	...

100656c0 <AES_CMAC_Encrypt_Append>:
100656c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100656c2:	2500      	movs	r5, #0
100656c4:	b08a      	sub	sp, #40	@ 0x28
100656c6:	460e      	mov	r6, r1
100656c8:	4604      	mov	r4, r0
100656ca:	2800      	cmp	r0, #0
100656cc:	d004      	beq.n	100656d8 <AES_CMAC_Encrypt_Append+0x18>
100656ce:	2e00      	cmp	r6, #0
100656d0:	d106      	bne.n	100656e0 <AES_CMAC_Encrypt_Append+0x20>
100656d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
100656d4:	2800      	cmp	r0, #0
100656d6:	dd03      	ble.n	100656e0 <AES_CMAC_Encrypt_Append+0x20>
100656d8:	2061      	movs	r0, #97	@ 0x61
100656da:	0140      	lsls	r0, r0, #5
100656dc:	b00d      	add	sp, #52	@ 0x34
100656de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100656e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100656e2:	2800      	cmp	r0, #0
100656e4:	db04      	blt.n	100656f0 <AES_CMAC_Encrypt_Append+0x30>
100656e6:	2810      	cmp	r0, #16
100656e8:	da04      	bge.n	100656f4 <AES_CMAC_Encrypt_Append+0x34>
100656ea:	7920      	ldrb	r0, [r4, #4]
100656ec:	0680      	lsls	r0, r0, #26
100656ee:	d401      	bmi.n	100656f4 <AES_CMAC_Encrypt_Append+0x34>
100656f0:	488c      	ldr	r0, [pc, #560]	@ (10065924 <AES_CMAC_Encrypt_Append+0x264>)
100656f2:	e7f3      	b.n	100656dc <AES_CMAC_Encrypt_Append+0x1c>
100656f4:	7920      	ldrb	r0, [r4, #4]
100656f6:	0741      	lsls	r1, r0, #29
100656f8:	d401      	bmi.n	100656fe <AES_CMAC_Encrypt_Append+0x3e>
100656fa:	0781      	lsls	r1, r0, #30
100656fc:	d502      	bpl.n	10065704 <AES_CMAC_Encrypt_Append+0x44>
100656fe:	4889      	ldr	r0, [pc, #548]	@ (10065924 <AES_CMAC_Encrypt_Append+0x264>)
10065700:	1c40      	adds	r0, r0, #1
10065702:	e7eb      	b.n	100656dc <AES_CMAC_Encrypt_Append+0x1c>
10065704:	2140      	movs	r1, #64	@ 0x40
10065706:	4308      	orrs	r0, r1
10065708:	7120      	strb	r0, [r4, #4]
1006570a:	4620      	mov	r0, r4
1006570c:	3014      	adds	r0, #20
1006570e:	9008      	str	r0, [sp, #32]
10065710:	e01c      	b.n	1006574c <AES_CMAC_Encrypt_Append+0x8c>
10065712:	2000      	movs	r0, #0
10065714:	0081      	lsls	r1, r0, #2
10065716:	194a      	adds	r2, r1, r5
10065718:	1992      	adds	r2, r2, r6
1006571a:	7853      	ldrb	r3, [r2, #1]
1006571c:	7817      	ldrb	r7, [r2, #0]
1006571e:	021b      	lsls	r3, r3, #8
10065720:	433b      	orrs	r3, r7
10065722:	7897      	ldrb	r7, [r2, #2]
10065724:	ba5b      	rev16	r3, r3
10065726:	041b      	lsls	r3, r3, #16
10065728:	023f      	lsls	r7, r7, #8
1006572a:	78d2      	ldrb	r2, [r2, #3]
1006572c:	433b      	orrs	r3, r7
1006572e:	4313      	orrs	r3, r2
10065730:	190a      	adds	r2, r1, r4
10065732:	6952      	ldr	r2, [r2, #20]
10065734:	1c40      	adds	r0, r0, #1
10065736:	4053      	eors	r3, r2
10065738:	aa04      	add	r2, sp, #16
1006573a:	5053      	str	r3, [r2, r1]
1006573c:	2804      	cmp	r0, #4
1006573e:	dbe9      	blt.n	10065714 <AES_CMAC_Encrypt_Append+0x54>
10065740:	68a2      	ldr	r2, [r4, #8]
10065742:	a804      	add	r0, sp, #16
10065744:	9908      	ldr	r1, [sp, #32]
10065746:	f7e6 fe63 	bl	1004c410 <AES_128_HW_enc>
1006574a:	9d00      	ldr	r5, [sp, #0]
1006574c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006574e:	4628      	mov	r0, r5
10065750:	3010      	adds	r0, #16
10065752:	9000      	str	r0, [sp, #0]
10065754:	4288      	cmp	r0, r1
10065756:	dbdc      	blt.n	10065712 <AES_CMAC_Encrypt_Append+0x52>
10065758:	7920      	ldrb	r0, [r4, #4]
1006575a:	0680      	lsls	r0, r0, #26
1006575c:	d41e      	bmi.n	1006579c <AES_CMAC_Encrypt_Append+0xdc>
1006575e:	2900      	cmp	r1, #0
10065760:	dd1c      	ble.n	1006579c <AES_CMAC_Encrypt_Append+0xdc>
10065762:	2000      	movs	r0, #0
10065764:	0081      	lsls	r1, r0, #2
10065766:	194a      	adds	r2, r1, r5
10065768:	1992      	adds	r2, r2, r6
1006576a:	7853      	ldrb	r3, [r2, #1]
1006576c:	7817      	ldrb	r7, [r2, #0]
1006576e:	021b      	lsls	r3, r3, #8
10065770:	433b      	orrs	r3, r7
10065772:	7897      	ldrb	r7, [r2, #2]
10065774:	ba5b      	rev16	r3, r3
10065776:	041b      	lsls	r3, r3, #16
10065778:	023f      	lsls	r7, r7, #8
1006577a:	78d2      	ldrb	r2, [r2, #3]
1006577c:	433b      	orrs	r3, r7
1006577e:	4313      	orrs	r3, r2
10065780:	190a      	adds	r2, r1, r4
10065782:	6952      	ldr	r2, [r2, #20]
10065784:	1c40      	adds	r0, r0, #1
10065786:	4053      	eors	r3, r2
10065788:	aa04      	add	r2, sp, #16
1006578a:	5053      	str	r3, [r2, r1]
1006578c:	2804      	cmp	r0, #4
1006578e:	dbe9      	blt.n	10065764 <AES_CMAC_Encrypt_Append+0xa4>
10065790:	68a2      	ldr	r2, [r4, #8]
10065792:	a804      	add	r0, sp, #16
10065794:	9908      	ldr	r1, [sp, #32]
10065796:	f7e6 fe3b 	bl	1004c410 <AES_128_HW_enc>
1006579a:	e0c0      	b.n	1006591e <AES_CMAC_Encrypt_Append+0x25e>
1006579c:	2000      	movs	r0, #0
1006579e:	9000      	str	r0, [sp, #0]
100657a0:	9001      	str	r0, [sp, #4]
100657a2:	9002      	str	r0, [sp, #8]
100657a4:	9003      	str	r0, [sp, #12]
100657a6:	4669      	mov	r1, sp
100657a8:	4608      	mov	r0, r1
100657aa:	68a2      	ldr	r2, [r4, #8]
100657ac:	f7e6 fe30 	bl	1004c410 <AES_128_HW_enc>
100657b0:	9900      	ldr	r1, [sp, #0]
100657b2:	2287      	movs	r2, #135	@ 0x87
100657b4:	0fc8      	lsrs	r0, r1, #31
100657b6:	4350      	muls	r0, r2
100657b8:	9a01      	ldr	r2, [sp, #4]
100657ba:	0049      	lsls	r1, r1, #1
100657bc:	0fd2      	lsrs	r2, r2, #31
100657be:	4311      	orrs	r1, r2
100657c0:	9100      	str	r1, [sp, #0]
100657c2:	9901      	ldr	r1, [sp, #4]
100657c4:	9a02      	ldr	r2, [sp, #8]
100657c6:	0049      	lsls	r1, r1, #1
100657c8:	0fd2      	lsrs	r2, r2, #31
100657ca:	4311      	orrs	r1, r2
100657cc:	9101      	str	r1, [sp, #4]
100657ce:	9902      	ldr	r1, [sp, #8]
100657d0:	9a03      	ldr	r2, [sp, #12]
100657d2:	0049      	lsls	r1, r1, #1
100657d4:	0fd2      	lsrs	r2, r2, #31
100657d6:	4311      	orrs	r1, r2
100657d8:	9102      	str	r1, [sp, #8]
100657da:	9903      	ldr	r1, [sp, #12]
100657dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100657de:	0049      	lsls	r1, r1, #1
100657e0:	4041      	eors	r1, r0
100657e2:	4628      	mov	r0, r5
100657e4:	3010      	adds	r0, #16
100657e6:	9103      	str	r1, [sp, #12]
100657e8:	4290      	cmp	r0, r2
100657ea:	d11a      	bne.n	10065822 <AES_CMAC_Encrypt_Append+0x162>
100657ec:	2000      	movs	r0, #0
100657ee:	0081      	lsls	r1, r0, #2
100657f0:	194a      	adds	r2, r1, r5
100657f2:	1993      	adds	r3, r2, r6
100657f4:	785a      	ldrb	r2, [r3, #1]
100657f6:	781f      	ldrb	r7, [r3, #0]
100657f8:	0212      	lsls	r2, r2, #8
100657fa:	433a      	orrs	r2, r7
100657fc:	789f      	ldrb	r7, [r3, #2]
100657fe:	ba52      	rev16	r2, r2
10065800:	0412      	lsls	r2, r2, #16
10065802:	023f      	lsls	r7, r7, #8
10065804:	433a      	orrs	r2, r7
10065806:	78db      	ldrb	r3, [r3, #3]
10065808:	466f      	mov	r7, sp
1006580a:	431a      	orrs	r2, r3
1006580c:	190b      	adds	r3, r1, r4
1006580e:	695b      	ldr	r3, [r3, #20]
10065810:	587f      	ldr	r7, [r7, r1]
10065812:	1c40      	adds	r0, r0, #1
10065814:	407b      	eors	r3, r7
10065816:	405a      	eors	r2, r3
10065818:	ab04      	add	r3, sp, #16
1006581a:	505a      	str	r2, [r3, r1]
1006581c:	2804      	cmp	r0, #4
1006581e:	dbe6      	blt.n	100657ee <AES_CMAC_Encrypt_Append+0x12e>
10065820:	e074      	b.n	1006590c <AES_CMAC_Encrypt_Append+0x24c>
10065822:	9a00      	ldr	r2, [sp, #0]
10065824:	2387      	movs	r3, #135	@ 0x87
10065826:	0fd0      	lsrs	r0, r2, #31
10065828:	4358      	muls	r0, r3
1006582a:	9b01      	ldr	r3, [sp, #4]
1006582c:	0052      	lsls	r2, r2, #1
1006582e:	0fdb      	lsrs	r3, r3, #31
10065830:	431a      	orrs	r2, r3
10065832:	9200      	str	r2, [sp, #0]
10065834:	9a01      	ldr	r2, [sp, #4]
10065836:	9b02      	ldr	r3, [sp, #8]
10065838:	0052      	lsls	r2, r2, #1
1006583a:	0fdb      	lsrs	r3, r3, #31
1006583c:	431a      	orrs	r2, r3
1006583e:	9201      	str	r2, [sp, #4]
10065840:	9a02      	ldr	r2, [sp, #8]
10065842:	0fcb      	lsrs	r3, r1, #31
10065844:	0052      	lsls	r2, r2, #1
10065846:	431a      	orrs	r2, r3
10065848:	9202      	str	r2, [sp, #8]
1006584a:	004a      	lsls	r2, r1, #1
1006584c:	4042      	eors	r2, r0
1006584e:	9203      	str	r2, [sp, #12]
10065850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10065852:	2000      	movs	r0, #0
10065854:	1b53      	subs	r3, r2, r5
10065856:	17da      	asrs	r2, r3, #31
10065858:	469c      	mov	ip, r3
1006585a:	0f92      	lsrs	r2, r2, #30
1006585c:	4462      	add	r2, ip
1006585e:	1092      	asrs	r2, r2, #2
10065860:	4696      	mov	lr, r2
10065862:	e016      	b.n	10065892 <AES_CMAC_Encrypt_Append+0x1d2>
10065864:	0081      	lsls	r1, r0, #2
10065866:	194a      	adds	r2, r1, r5
10065868:	1993      	adds	r3, r2, r6
1006586a:	785a      	ldrb	r2, [r3, #1]
1006586c:	781f      	ldrb	r7, [r3, #0]
1006586e:	0212      	lsls	r2, r2, #8
10065870:	433a      	orrs	r2, r7
10065872:	789f      	ldrb	r7, [r3, #2]
10065874:	ba52      	rev16	r2, r2
10065876:	0412      	lsls	r2, r2, #16
10065878:	023f      	lsls	r7, r7, #8
1006587a:	433a      	orrs	r2, r7
1006587c:	78db      	ldrb	r3, [r3, #3]
1006587e:	466f      	mov	r7, sp
10065880:	431a      	orrs	r2, r3
10065882:	190b      	adds	r3, r1, r4
10065884:	695b      	ldr	r3, [r3, #20]
10065886:	587f      	ldr	r7, [r7, r1]
10065888:	407b      	eors	r3, r7
1006588a:	405a      	eors	r2, r3
1006588c:	ab04      	add	r3, sp, #16
1006588e:	505a      	str	r2, [r3, r1]
10065890:	1c40      	adds	r0, r0, #1
10065892:	4586      	cmp	lr, r0
10065894:	dce6      	bgt.n	10065864 <AES_CMAC_Encrypt_Append+0x1a4>
10065896:	0081      	lsls	r1, r0, #2
10065898:	190a      	adds	r2, r1, r4
1006589a:	466b      	mov	r3, sp
1006589c:	6952      	ldr	r2, [r2, #20]
1006589e:	585b      	ldr	r3, [r3, r1]
100658a0:	4667      	mov	r7, ip
100658a2:	405a      	eors	r2, r3
100658a4:	ab04      	add	r3, sp, #16
100658a6:	505a      	str	r2, [r3, r1]
100658a8:	1a7f      	subs	r7, r7, r1
100658aa:	2200      	movs	r2, #0
100658ac:	194b      	adds	r3, r1, r5
100658ae:	46bc      	mov	ip, r7
100658b0:	469e      	mov	lr, r3
100658b2:	e00b      	b.n	100658cc <AES_CMAC_Encrypt_Append+0x20c>
100658b4:	4673      	mov	r3, lr
100658b6:	189b      	adds	r3, r3, r2
100658b8:	5cf3      	ldrb	r3, [r6, r3]
100658ba:	00d7      	lsls	r7, r2, #3
100658bc:	2518      	movs	r5, #24
100658be:	1bed      	subs	r5, r5, r7
100658c0:	40ab      	lsls	r3, r5
100658c2:	ad04      	add	r5, sp, #16
100658c4:	586f      	ldr	r7, [r5, r1]
100658c6:	407b      	eors	r3, r7
100658c8:	506b      	str	r3, [r5, r1]
100658ca:	1c52      	adds	r2, r2, #1
100658cc:	4594      	cmp	ip, r2
100658ce:	dcf1      	bgt.n	100658b4 <AES_CMAC_Encrypt_Append+0x1f4>
100658d0:	2a00      	cmp	r2, #0
100658d2:	d009      	beq.n	100658e8 <AES_CMAC_Encrypt_Append+0x228>
100658d4:	00d6      	lsls	r6, r2, #3
100658d6:	2218      	movs	r2, #24
100658d8:	ab04      	add	r3, sp, #16
100658da:	1b96      	subs	r6, r2, r6
100658dc:	585d      	ldr	r5, [r3, r1]
100658de:	2280      	movs	r2, #128	@ 0x80
100658e0:	40b2      	lsls	r2, r6
100658e2:	4055      	eors	r5, r2
100658e4:	505d      	str	r5, [r3, r1]
100658e6:	e005      	b.n	100658f4 <AES_CMAC_Encrypt_Append+0x234>
100658e8:	aa04      	add	r2, sp, #16
100658ea:	5853      	ldr	r3, [r2, r1]
100658ec:	2501      	movs	r5, #1
100658ee:	07ed      	lsls	r5, r5, #31
100658f0:	406b      	eors	r3, r5
100658f2:	5053      	str	r3, [r2, r1]
100658f4:	ab04      	add	r3, sp, #16
100658f6:	466a      	mov	r2, sp
100658f8:	e005      	b.n	10065906 <AES_CMAC_Encrypt_Append+0x246>
100658fa:	0081      	lsls	r1, r0, #2
100658fc:	190d      	adds	r5, r1, r4
100658fe:	696d      	ldr	r5, [r5, #20]
10065900:	5856      	ldr	r6, [r2, r1]
10065902:	4075      	eors	r5, r6
10065904:	505d      	str	r5, [r3, r1]
10065906:	1c40      	adds	r0, r0, #1
10065908:	2804      	cmp	r0, #4
1006590a:	dbf6      	blt.n	100658fa <AES_CMAC_Encrypt_Append+0x23a>
1006590c:	68a2      	ldr	r2, [r4, #8]
1006590e:	4618      	mov	r0, r3
10065910:	9908      	ldr	r1, [sp, #32]
10065912:	f7e6 fd7d 	bl	1004c410 <AES_128_HW_enc>
10065916:	7920      	ldrb	r0, [r4, #4]
10065918:	2104      	movs	r1, #4
1006591a:	4308      	orrs	r0, r1
1006591c:	7120      	strb	r0, [r4, #4]
1006591e:	2000      	movs	r0, #0
10065920:	e6dc      	b.n	100656dc <AES_CMAC_Encrypt_Append+0x1c>
10065922:	0000      	.short	0x0000
10065924:	00000c1d 	.word	0x00000c1d

10065928 <AES_CMAC_Encrypt_Finish>:
10065928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006592a:	4616      	mov	r6, r2
1006592c:	460f      	mov	r7, r1
1006592e:	0004      	movs	r4, r0
10065930:	d009      	beq.n	10065946 <AES_CMAC_Encrypt_Finish+0x1e>
10065932:	2e00      	cmp	r6, #0
10065934:	d007      	beq.n	10065946 <AES_CMAC_Encrypt_Finish+0x1e>
10065936:	4625      	mov	r5, r4
10065938:	3580      	adds	r5, #128	@ 0x80
1006593a:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
1006593c:	1e40      	subs	r0, r0, #1
1006593e:	2810      	cmp	r0, #16
10065940:	d304      	bcc.n	1006594c <AES_CMAC_Encrypt_Finish+0x24>
10065942:	4813      	ldr	r0, [pc, #76]	@ (10065990 <AES_CMAC_Encrypt_Finish+0x68>)
10065944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065946:	2061      	movs	r0, #97	@ 0x61
10065948:	0140      	lsls	r0, r0, #5
1006594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006594c:	7920      	ldrb	r0, [r4, #4]
1006594e:	0640      	lsls	r0, r0, #25
10065950:	d404      	bmi.n	1006595c <AES_CMAC_Encrypt_Finish+0x34>
10065952:	2200      	movs	r2, #0
10065954:	4611      	mov	r1, r2
10065956:	4620      	mov	r0, r4
10065958:	f7ff feb2 	bl	100656c0 <AES_CMAC_Encrypt_Append>
1006595c:	7920      	ldrb	r0, [r4, #4]
1006595e:	2102      	movs	r1, #2
10065960:	4308      	orrs	r0, r1
10065962:	7120      	strb	r0, [r4, #4]
10065964:	2000      	movs	r0, #0
10065966:	2118      	movs	r1, #24
10065968:	e00c      	b.n	10065984 <AES_CMAC_Encrypt_Finish+0x5c>
1006596a:	17c2      	asrs	r2, r0, #31
1006596c:	0f92      	lsrs	r2, r2, #30
1006596e:	1812      	adds	r2, r2, r0
10065970:	0892      	lsrs	r2, r2, #2
10065972:	0092      	lsls	r2, r2, #2
10065974:	1912      	adds	r2, r2, r4
10065976:	0783      	lsls	r3, r0, #30
10065978:	6952      	ldr	r2, [r2, #20]
1006597a:	0edb      	lsrs	r3, r3, #27
1006597c:	1acb      	subs	r3, r1, r3
1006597e:	40da      	lsrs	r2, r3
10065980:	543a      	strb	r2, [r7, r0]
10065982:	1c40      	adds	r0, r0, #1
10065984:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
10065986:	4282      	cmp	r2, r0
10065988:	dcef      	bgt.n	1006596a <AES_CMAC_Encrypt_Finish+0x42>
1006598a:	2000      	movs	r0, #0
1006598c:	6032      	str	r2, [r6, #0]
1006598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065990:	00000c1f 	.word	0x00000c1f

10065994 <AES_CMAC_Encrypt_Init>:
10065994:	b510      	push	{r4, lr}
10065996:	0004      	movs	r4, r0
10065998:	d007      	beq.n	100659aa <AES_CMAC_Encrypt_Init+0x16>
1006599a:	2302      	movs	r3, #2
1006599c:	2200      	movs	r2, #0
1006599e:	68a1      	ldr	r1, [r4, #8]
100659a0:	f000 f81a 	bl	100659d8 <AESstdInitEnc>
100659a4:	0001      	movs	r1, r0
100659a6:	d003      	beq.n	100659b0 <AES_CMAC_Encrypt_Init+0x1c>
100659a8:	e00c      	b.n	100659c4 <AES_CMAC_Encrypt_Init+0x30>
100659aa:	2061      	movs	r0, #97	@ 0x61
100659ac:	0140      	lsls	r0, r0, #5
100659ae:	bd10      	pop	{r4, pc}
100659b0:	2000      	movs	r0, #0
100659b2:	2210      	movs	r2, #16
100659b4:	6122      	str	r2, [r4, #16]
100659b6:	4602      	mov	r2, r0
100659b8:	0083      	lsls	r3, r0, #2
100659ba:	191b      	adds	r3, r3, r4
100659bc:	1c40      	adds	r0, r0, #1
100659be:	615a      	str	r2, [r3, #20]
100659c0:	2804      	cmp	r0, #4
100659c2:	dbf9      	blt.n	100659b8 <AES_CMAC_Encrypt_Init+0x24>
100659c4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
100659c6:	2810      	cmp	r0, #16
100659c8:	d001      	beq.n	100659ce <AES_CMAC_Encrypt_Init+0x3a>
100659ca:	4802      	ldr	r0, [pc, #8]	@ (100659d4 <AES_CMAC_Encrypt_Init+0x40>)
100659cc:	bd10      	pop	{r4, pc}
100659ce:	4608      	mov	r0, r1
100659d0:	bd10      	pop	{r4, pc}
100659d2:	0000      	.short	0x0000
100659d4:	00000c1d 	.word	0x00000c1d

100659d8 <AESstdInitEnc>:
100659d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100659da:	2800      	cmp	r0, #0
100659dc:	d007      	beq.n	100659ee <AESstdInitEnc+0x16>
100659de:	2900      	cmp	r1, #0
100659e0:	d005      	beq.n	100659ee <AESstdInitEnc+0x16>
100659e2:	075b      	lsls	r3, r3, #29
100659e4:	0f9c      	lsrs	r4, r3, #30
100659e6:	2a00      	cmp	r2, #0
100659e8:	d104      	bne.n	100659f4 <AESstdInitEnc+0x1c>
100659ea:	2c01      	cmp	r4, #1
100659ec:	d002      	beq.n	100659f4 <AESstdInitEnc+0x1c>
100659ee:	2061      	movs	r0, #97	@ 0x61
100659f0:	0140      	lsls	r0, r0, #5
100659f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100659f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
100659f6:	2b10      	cmp	r3, #16
100659f8:	d003      	beq.n	10065a02 <AESstdInitEnc+0x2a>
100659fa:	2b18      	cmp	r3, #24
100659fc:	d001      	beq.n	10065a02 <AESstdInitEnc+0x2a>
100659fe:	2b20      	cmp	r3, #32
10065a00:	d105      	bne.n	10065a0e <AESstdInitEnc+0x36>
10065a02:	2c01      	cmp	r4, #1
10065a04:	d005      	beq.n	10065a12 <AESstdInitEnc+0x3a>
10065a06:	6905      	ldr	r5, [r0, #16]
10065a08:	1e6d      	subs	r5, r5, #1
10065a0a:	2d10      	cmp	r5, #16
10065a0c:	d301      	bcc.n	10065a12 <AESstdInitEnc+0x3a>
10065a0e:	481a      	ldr	r0, [pc, #104]	@ (10065a78 <AESstdInitEnc+0xa0>)
10065a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065a12:	2b10      	cmp	r3, #16
10065a14:	d002      	beq.n	10065a1c <AESstdInitEnc+0x44>
10065a16:	4818      	ldr	r0, [pc, #96]	@ (10065a78 <AESstdInitEnc+0xa0>)
10065a18:	1e80      	subs	r0, r0, #2
10065a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065a1c:	60c2      	str	r2, [r0, #12]
10065a1e:	7903      	ldrb	r3, [r0, #4]
10065a20:	25f9      	movs	r5, #249	@ 0xf9
10065a22:	402b      	ands	r3, r5
10065a24:	7103      	strb	r3, [r0, #4]
10065a26:	2c01      	cmp	r4, #1
10065a28:	d020      	beq.n	10065a6c <AESstdInitEnc+0x94>
10065a2a:	2300      	movs	r3, #0
10065a2c:	461c      	mov	r4, r3
10065a2e:	009d      	lsls	r5, r3, #2
10065a30:	182d      	adds	r5, r5, r0
10065a32:	1c5b      	adds	r3, r3, #1
10065a34:	616c      	str	r4, [r5, #20]
10065a36:	2b04      	cmp	r3, #4
10065a38:	dbf9      	blt.n	10065a2e <AESstdInitEnc+0x56>
10065a3a:	2300      	movs	r3, #0
10065a3c:	e013      	b.n	10065a66 <AESstdInitEnc+0x8e>
10065a3e:	17dc      	asrs	r4, r3, #31
10065a40:	0fa4      	lsrs	r4, r4, #30
10065a42:	18e4      	adds	r4, r4, r3
10065a44:	08a4      	lsrs	r4, r4, #2
10065a46:	00a4      	lsls	r4, r4, #2
10065a48:	1825      	adds	r5, r4, r0
10065a4a:	462e      	mov	r6, r5
10065a4c:	3614      	adds	r6, #20
10065a4e:	46b4      	mov	ip, r6
10065a50:	1b1c      	subs	r4, r3, r4
10065a52:	5cd6      	ldrb	r6, [r2, r3]
10065a54:	00e4      	lsls	r4, r4, #3
10065a56:	2718      	movs	r7, #24
10065a58:	696d      	ldr	r5, [r5, #20]
10065a5a:	1b3c      	subs	r4, r7, r4
10065a5c:	40a6      	lsls	r6, r4
10065a5e:	4335      	orrs	r5, r6
10065a60:	4666      	mov	r6, ip
10065a62:	1c5b      	adds	r3, r3, #1
10065a64:	6035      	str	r5, [r6, #0]
10065a66:	6904      	ldr	r4, [r0, #16]
10065a68:	429c      	cmp	r4, r3
10065a6a:	dce8      	bgt.n	10065a3e <AESstdInitEnc+0x66>
10065a6c:	7902      	ldrb	r2, [r0, #4]
10065a6e:	07d2      	lsls	r2, r2, #31
10065a70:	d100      	bne.n	10065a74 <AESstdInitEnc+0x9c>
10065a72:	6081      	str	r1, [r0, #8]
10065a74:	2000      	movs	r0, #0
10065a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065a78:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

10065a7c <_init>:
10065a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065a7e:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10065a80 <_fini>:
10065a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065a82:	46c0      	nop			@ (mov r8, r8)
