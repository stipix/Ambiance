
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027210  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  100672d0  100672d0  000282d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  100672d4  100672d4  000282d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000fe0  100672d8  100672d8  000282d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  100682b8  100682b8  000292b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  2000260c  100682c0  0002960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0002a004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  0002a004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  0002a004  2**2
                  ALLOC
 10 .bss          00002478  20000194  20000194  0002a004  2**2
                  ALLOC
 11 .noinit       0000223c  20002908  100685bc  00029908  2**2
                  ALLOC
 12 .ota_region_end 00000000  100685bc  100685bc  00029908  2**0
                  CONTENTS
 13 .heap         00000000  20004b44  20004b44  00029908  2**0
                  CONTENTS
 14 .stack        00000c00  20005400  20005400  0002a400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  00029908  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  00029908  2**0
                  CONTENTS, READONLY
 17 .debug_info   000335c8  00000000  00000000  00029934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008c55  00000000  00000000  0005cefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003948  00000000  00000000  00065b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2a2  00000000  00000000  000694a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000451b6  00000000  00000000  00094742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d9fb8  00000000  00000000  000d98f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      0000023b  00000000  00000000  001b38b0  2**0
                  CONTENTS, READONLY
 24 .arm_vfe_header 00000004  00000000  00000000  001b3aec  2**2
                  CONTENTS, READONLY
 25 .debug_rnglists 00002b43  00000000  00000000  001b3af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  0000dd48  00000000  00000000  001b6634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000f4  00000000  00000000  001c437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strlen>:
1004021c:	2300      	movs	r3, #0
1004021e:	5cc2      	ldrb	r2, [r0, r3]
10040220:	3301      	adds	r3, #1
10040222:	2a00      	cmp	r2, #0
10040224:	d1fb      	bne.n	1004021e <strlen+0x2>
10040226:	1e58      	subs	r0, r3, #1
10040228:	4770      	bx	lr
	...

1004022c <__gnu_thumb1_case_shi>:
1004022c:	b403      	push	{r0, r1}
1004022e:	4671      	mov	r1, lr
10040230:	0849      	lsrs	r1, r1, #1
10040232:	0040      	lsls	r0, r0, #1
10040234:	0049      	lsls	r1, r1, #1
10040236:	5e09      	ldrsh	r1, [r1, r0]
10040238:	0049      	lsls	r1, r1, #1
1004023a:	448e      	add	lr, r1
1004023c:	bc03      	pop	{r0, r1}
1004023e:	4770      	bx	lr

10040240 <__udivsi3>:
10040240:	2200      	movs	r2, #0
10040242:	0843      	lsrs	r3, r0, #1
10040244:	428b      	cmp	r3, r1
10040246:	d374      	bcc.n	10040332 <__udivsi3+0xf2>
10040248:	0903      	lsrs	r3, r0, #4
1004024a:	428b      	cmp	r3, r1
1004024c:	d35f      	bcc.n	1004030e <__udivsi3+0xce>
1004024e:	0a03      	lsrs	r3, r0, #8
10040250:	428b      	cmp	r3, r1
10040252:	d344      	bcc.n	100402de <__udivsi3+0x9e>
10040254:	0b03      	lsrs	r3, r0, #12
10040256:	428b      	cmp	r3, r1
10040258:	d328      	bcc.n	100402ac <__udivsi3+0x6c>
1004025a:	0c03      	lsrs	r3, r0, #16
1004025c:	428b      	cmp	r3, r1
1004025e:	d30d      	bcc.n	1004027c <__udivsi3+0x3c>
10040260:	22ff      	movs	r2, #255	@ 0xff
10040262:	0209      	lsls	r1, r1, #8
10040264:	ba12      	rev	r2, r2
10040266:	0c03      	lsrs	r3, r0, #16
10040268:	428b      	cmp	r3, r1
1004026a:	d302      	bcc.n	10040272 <__udivsi3+0x32>
1004026c:	1212      	asrs	r2, r2, #8
1004026e:	0209      	lsls	r1, r1, #8
10040270:	d065      	beq.n	1004033e <__udivsi3+0xfe>
10040272:	0b03      	lsrs	r3, r0, #12
10040274:	428b      	cmp	r3, r1
10040276:	d319      	bcc.n	100402ac <__udivsi3+0x6c>
10040278:	e000      	b.n	1004027c <__udivsi3+0x3c>
1004027a:	0a09      	lsrs	r1, r1, #8
1004027c:	0bc3      	lsrs	r3, r0, #15
1004027e:	428b      	cmp	r3, r1
10040280:	d301      	bcc.n	10040286 <__udivsi3+0x46>
10040282:	03cb      	lsls	r3, r1, #15
10040284:	1ac0      	subs	r0, r0, r3
10040286:	4152      	adcs	r2, r2
10040288:	0b83      	lsrs	r3, r0, #14
1004028a:	428b      	cmp	r3, r1
1004028c:	d301      	bcc.n	10040292 <__udivsi3+0x52>
1004028e:	038b      	lsls	r3, r1, #14
10040290:	1ac0      	subs	r0, r0, r3
10040292:	4152      	adcs	r2, r2
10040294:	0b43      	lsrs	r3, r0, #13
10040296:	428b      	cmp	r3, r1
10040298:	d301      	bcc.n	1004029e <__udivsi3+0x5e>
1004029a:	034b      	lsls	r3, r1, #13
1004029c:	1ac0      	subs	r0, r0, r3
1004029e:	4152      	adcs	r2, r2
100402a0:	0b03      	lsrs	r3, r0, #12
100402a2:	428b      	cmp	r3, r1
100402a4:	d301      	bcc.n	100402aa <__udivsi3+0x6a>
100402a6:	030b      	lsls	r3, r1, #12
100402a8:	1ac0      	subs	r0, r0, r3
100402aa:	4152      	adcs	r2, r2
100402ac:	0ac3      	lsrs	r3, r0, #11
100402ae:	428b      	cmp	r3, r1
100402b0:	d301      	bcc.n	100402b6 <__udivsi3+0x76>
100402b2:	02cb      	lsls	r3, r1, #11
100402b4:	1ac0      	subs	r0, r0, r3
100402b6:	4152      	adcs	r2, r2
100402b8:	0a83      	lsrs	r3, r0, #10
100402ba:	428b      	cmp	r3, r1
100402bc:	d301      	bcc.n	100402c2 <__udivsi3+0x82>
100402be:	028b      	lsls	r3, r1, #10
100402c0:	1ac0      	subs	r0, r0, r3
100402c2:	4152      	adcs	r2, r2
100402c4:	0a43      	lsrs	r3, r0, #9
100402c6:	428b      	cmp	r3, r1
100402c8:	d301      	bcc.n	100402ce <__udivsi3+0x8e>
100402ca:	024b      	lsls	r3, r1, #9
100402cc:	1ac0      	subs	r0, r0, r3
100402ce:	4152      	adcs	r2, r2
100402d0:	0a03      	lsrs	r3, r0, #8
100402d2:	428b      	cmp	r3, r1
100402d4:	d301      	bcc.n	100402da <__udivsi3+0x9a>
100402d6:	020b      	lsls	r3, r1, #8
100402d8:	1ac0      	subs	r0, r0, r3
100402da:	4152      	adcs	r2, r2
100402dc:	d2cd      	bcs.n	1004027a <__udivsi3+0x3a>
100402de:	09c3      	lsrs	r3, r0, #7
100402e0:	428b      	cmp	r3, r1
100402e2:	d301      	bcc.n	100402e8 <__udivsi3+0xa8>
100402e4:	01cb      	lsls	r3, r1, #7
100402e6:	1ac0      	subs	r0, r0, r3
100402e8:	4152      	adcs	r2, r2
100402ea:	0983      	lsrs	r3, r0, #6
100402ec:	428b      	cmp	r3, r1
100402ee:	d301      	bcc.n	100402f4 <__udivsi3+0xb4>
100402f0:	018b      	lsls	r3, r1, #6
100402f2:	1ac0      	subs	r0, r0, r3
100402f4:	4152      	adcs	r2, r2
100402f6:	0943      	lsrs	r3, r0, #5
100402f8:	428b      	cmp	r3, r1
100402fa:	d301      	bcc.n	10040300 <__udivsi3+0xc0>
100402fc:	014b      	lsls	r3, r1, #5
100402fe:	1ac0      	subs	r0, r0, r3
10040300:	4152      	adcs	r2, r2
10040302:	0903      	lsrs	r3, r0, #4
10040304:	428b      	cmp	r3, r1
10040306:	d301      	bcc.n	1004030c <__udivsi3+0xcc>
10040308:	010b      	lsls	r3, r1, #4
1004030a:	1ac0      	subs	r0, r0, r3
1004030c:	4152      	adcs	r2, r2
1004030e:	08c3      	lsrs	r3, r0, #3
10040310:	428b      	cmp	r3, r1
10040312:	d301      	bcc.n	10040318 <__udivsi3+0xd8>
10040314:	00cb      	lsls	r3, r1, #3
10040316:	1ac0      	subs	r0, r0, r3
10040318:	4152      	adcs	r2, r2
1004031a:	0883      	lsrs	r3, r0, #2
1004031c:	428b      	cmp	r3, r1
1004031e:	d301      	bcc.n	10040324 <__udivsi3+0xe4>
10040320:	008b      	lsls	r3, r1, #2
10040322:	1ac0      	subs	r0, r0, r3
10040324:	4152      	adcs	r2, r2
10040326:	0843      	lsrs	r3, r0, #1
10040328:	428b      	cmp	r3, r1
1004032a:	d301      	bcc.n	10040330 <__udivsi3+0xf0>
1004032c:	004b      	lsls	r3, r1, #1
1004032e:	1ac0      	subs	r0, r0, r3
10040330:	4152      	adcs	r2, r2
10040332:	1a41      	subs	r1, r0, r1
10040334:	d200      	bcs.n	10040338 <__udivsi3+0xf8>
10040336:	4601      	mov	r1, r0
10040338:	4152      	adcs	r2, r2
1004033a:	4610      	mov	r0, r2
1004033c:	4770      	bx	lr
1004033e:	e7ff      	b.n	10040340 <__udivsi3+0x100>
10040340:	b501      	push	{r0, lr}
10040342:	2000      	movs	r0, #0
10040344:	f000 f8f0 	bl	10040528 <__aeabi_idiv0>
10040348:	bd02      	pop	{r1, pc}
1004034a:	46c0      	nop			@ (mov r8, r8)

1004034c <__aeabi_uidivmod>:
1004034c:	2900      	cmp	r1, #0
1004034e:	d0f7      	beq.n	10040340 <__udivsi3+0x100>
10040350:	e776      	b.n	10040240 <__udivsi3>
10040352:	4770      	bx	lr

10040354 <__divsi3>:
10040354:	4603      	mov	r3, r0
10040356:	430b      	orrs	r3, r1
10040358:	d47f      	bmi.n	1004045a <__divsi3+0x106>
1004035a:	2200      	movs	r2, #0
1004035c:	0843      	lsrs	r3, r0, #1
1004035e:	428b      	cmp	r3, r1
10040360:	d374      	bcc.n	1004044c <__divsi3+0xf8>
10040362:	0903      	lsrs	r3, r0, #4
10040364:	428b      	cmp	r3, r1
10040366:	d35f      	bcc.n	10040428 <__divsi3+0xd4>
10040368:	0a03      	lsrs	r3, r0, #8
1004036a:	428b      	cmp	r3, r1
1004036c:	d344      	bcc.n	100403f8 <__divsi3+0xa4>
1004036e:	0b03      	lsrs	r3, r0, #12
10040370:	428b      	cmp	r3, r1
10040372:	d328      	bcc.n	100403c6 <__divsi3+0x72>
10040374:	0c03      	lsrs	r3, r0, #16
10040376:	428b      	cmp	r3, r1
10040378:	d30d      	bcc.n	10040396 <__divsi3+0x42>
1004037a:	22ff      	movs	r2, #255	@ 0xff
1004037c:	0209      	lsls	r1, r1, #8
1004037e:	ba12      	rev	r2, r2
10040380:	0c03      	lsrs	r3, r0, #16
10040382:	428b      	cmp	r3, r1
10040384:	d302      	bcc.n	1004038c <__divsi3+0x38>
10040386:	1212      	asrs	r2, r2, #8
10040388:	0209      	lsls	r1, r1, #8
1004038a:	d065      	beq.n	10040458 <__divsi3+0x104>
1004038c:	0b03      	lsrs	r3, r0, #12
1004038e:	428b      	cmp	r3, r1
10040390:	d319      	bcc.n	100403c6 <__divsi3+0x72>
10040392:	e000      	b.n	10040396 <__divsi3+0x42>
10040394:	0a09      	lsrs	r1, r1, #8
10040396:	0bc3      	lsrs	r3, r0, #15
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x4c>
1004039c:	03cb      	lsls	r3, r1, #15
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	0b83      	lsrs	r3, r0, #14
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x58>
100403a8:	038b      	lsls	r3, r1, #14
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0b43      	lsrs	r3, r0, #13
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x64>
100403b4:	034b      	lsls	r3, r1, #13
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	0b03      	lsrs	r3, r0, #12
100403bc:	428b      	cmp	r3, r1
100403be:	d301      	bcc.n	100403c4 <__divsi3+0x70>
100403c0:	030b      	lsls	r3, r1, #12
100403c2:	1ac0      	subs	r0, r0, r3
100403c4:	4152      	adcs	r2, r2
100403c6:	0ac3      	lsrs	r3, r0, #11
100403c8:	428b      	cmp	r3, r1
100403ca:	d301      	bcc.n	100403d0 <__divsi3+0x7c>
100403cc:	02cb      	lsls	r3, r1, #11
100403ce:	1ac0      	subs	r0, r0, r3
100403d0:	4152      	adcs	r2, r2
100403d2:	0a83      	lsrs	r3, r0, #10
100403d4:	428b      	cmp	r3, r1
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x88>
100403d8:	028b      	lsls	r3, r1, #10
100403da:	1ac0      	subs	r0, r0, r3
100403dc:	4152      	adcs	r2, r2
100403de:	0a43      	lsrs	r3, r0, #9
100403e0:	428b      	cmp	r3, r1
100403e2:	d301      	bcc.n	100403e8 <__divsi3+0x94>
100403e4:	024b      	lsls	r3, r1, #9
100403e6:	1ac0      	subs	r0, r0, r3
100403e8:	4152      	adcs	r2, r2
100403ea:	0a03      	lsrs	r3, r0, #8
100403ec:	428b      	cmp	r3, r1
100403ee:	d301      	bcc.n	100403f4 <__divsi3+0xa0>
100403f0:	020b      	lsls	r3, r1, #8
100403f2:	1ac0      	subs	r0, r0, r3
100403f4:	4152      	adcs	r2, r2
100403f6:	d2cd      	bcs.n	10040394 <__divsi3+0x40>
100403f8:	09c3      	lsrs	r3, r0, #7
100403fa:	428b      	cmp	r3, r1
100403fc:	d301      	bcc.n	10040402 <__divsi3+0xae>
100403fe:	01cb      	lsls	r3, r1, #7
10040400:	1ac0      	subs	r0, r0, r3
10040402:	4152      	adcs	r2, r2
10040404:	0983      	lsrs	r3, r0, #6
10040406:	428b      	cmp	r3, r1
10040408:	d301      	bcc.n	1004040e <__divsi3+0xba>
1004040a:	018b      	lsls	r3, r1, #6
1004040c:	1ac0      	subs	r0, r0, r3
1004040e:	4152      	adcs	r2, r2
10040410:	0943      	lsrs	r3, r0, #5
10040412:	428b      	cmp	r3, r1
10040414:	d301      	bcc.n	1004041a <__divsi3+0xc6>
10040416:	014b      	lsls	r3, r1, #5
10040418:	1ac0      	subs	r0, r0, r3
1004041a:	4152      	adcs	r2, r2
1004041c:	0903      	lsrs	r3, r0, #4
1004041e:	428b      	cmp	r3, r1
10040420:	d301      	bcc.n	10040426 <__divsi3+0xd2>
10040422:	010b      	lsls	r3, r1, #4
10040424:	1ac0      	subs	r0, r0, r3
10040426:	4152      	adcs	r2, r2
10040428:	08c3      	lsrs	r3, r0, #3
1004042a:	428b      	cmp	r3, r1
1004042c:	d301      	bcc.n	10040432 <__divsi3+0xde>
1004042e:	00cb      	lsls	r3, r1, #3
10040430:	1ac0      	subs	r0, r0, r3
10040432:	4152      	adcs	r2, r2
10040434:	0883      	lsrs	r3, r0, #2
10040436:	428b      	cmp	r3, r1
10040438:	d301      	bcc.n	1004043e <__divsi3+0xea>
1004043a:	008b      	lsls	r3, r1, #2
1004043c:	1ac0      	subs	r0, r0, r3
1004043e:	4152      	adcs	r2, r2
10040440:	0843      	lsrs	r3, r0, #1
10040442:	428b      	cmp	r3, r1
10040444:	d301      	bcc.n	1004044a <__divsi3+0xf6>
10040446:	004b      	lsls	r3, r1, #1
10040448:	1ac0      	subs	r0, r0, r3
1004044a:	4152      	adcs	r2, r2
1004044c:	1a41      	subs	r1, r0, r1
1004044e:	d200      	bcs.n	10040452 <__divsi3+0xfe>
10040450:	4601      	mov	r1, r0
10040452:	4152      	adcs	r2, r2
10040454:	4610      	mov	r0, r2
10040456:	4770      	bx	lr
10040458:	e05d      	b.n	10040516 <__divsi3+0x1c2>
1004045a:	0fca      	lsrs	r2, r1, #31
1004045c:	d000      	beq.n	10040460 <__divsi3+0x10c>
1004045e:	4249      	negs	r1, r1
10040460:	1003      	asrs	r3, r0, #32
10040462:	d300      	bcc.n	10040466 <__divsi3+0x112>
10040464:	4240      	negs	r0, r0
10040466:	4053      	eors	r3, r2
10040468:	2200      	movs	r2, #0
1004046a:	469c      	mov	ip, r3
1004046c:	0903      	lsrs	r3, r0, #4
1004046e:	428b      	cmp	r3, r1
10040470:	d32d      	bcc.n	100404ce <__divsi3+0x17a>
10040472:	0a03      	lsrs	r3, r0, #8
10040474:	428b      	cmp	r3, r1
10040476:	d312      	bcc.n	1004049e <__divsi3+0x14a>
10040478:	22fc      	movs	r2, #252	@ 0xfc
1004047a:	0189      	lsls	r1, r1, #6
1004047c:	ba12      	rev	r2, r2
1004047e:	0a03      	lsrs	r3, r0, #8
10040480:	428b      	cmp	r3, r1
10040482:	d30c      	bcc.n	1004049e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	1192      	asrs	r2, r2, #6
10040488:	428b      	cmp	r3, r1
1004048a:	d308      	bcc.n	1004049e <__divsi3+0x14a>
1004048c:	0189      	lsls	r1, r1, #6
1004048e:	1192      	asrs	r2, r2, #6
10040490:	428b      	cmp	r3, r1
10040492:	d304      	bcc.n	1004049e <__divsi3+0x14a>
10040494:	0189      	lsls	r1, r1, #6
10040496:	d03a      	beq.n	1004050e <__divsi3+0x1ba>
10040498:	1192      	asrs	r2, r2, #6
1004049a:	e000      	b.n	1004049e <__divsi3+0x14a>
1004049c:	0989      	lsrs	r1, r1, #6
1004049e:	09c3      	lsrs	r3, r0, #7
100404a0:	428b      	cmp	r3, r1
100404a2:	d301      	bcc.n	100404a8 <__divsi3+0x154>
100404a4:	01cb      	lsls	r3, r1, #7
100404a6:	1ac0      	subs	r0, r0, r3
100404a8:	4152      	adcs	r2, r2
100404aa:	0983      	lsrs	r3, r0, #6
100404ac:	428b      	cmp	r3, r1
100404ae:	d301      	bcc.n	100404b4 <__divsi3+0x160>
100404b0:	018b      	lsls	r3, r1, #6
100404b2:	1ac0      	subs	r0, r0, r3
100404b4:	4152      	adcs	r2, r2
100404b6:	0943      	lsrs	r3, r0, #5
100404b8:	428b      	cmp	r3, r1
100404ba:	d301      	bcc.n	100404c0 <__divsi3+0x16c>
100404bc:	014b      	lsls	r3, r1, #5
100404be:	1ac0      	subs	r0, r0, r3
100404c0:	4152      	adcs	r2, r2
100404c2:	0903      	lsrs	r3, r0, #4
100404c4:	428b      	cmp	r3, r1
100404c6:	d301      	bcc.n	100404cc <__divsi3+0x178>
100404c8:	010b      	lsls	r3, r1, #4
100404ca:	1ac0      	subs	r0, r0, r3
100404cc:	4152      	adcs	r2, r2
100404ce:	08c3      	lsrs	r3, r0, #3
100404d0:	428b      	cmp	r3, r1
100404d2:	d301      	bcc.n	100404d8 <__divsi3+0x184>
100404d4:	00cb      	lsls	r3, r1, #3
100404d6:	1ac0      	subs	r0, r0, r3
100404d8:	4152      	adcs	r2, r2
100404da:	0883      	lsrs	r3, r0, #2
100404dc:	428b      	cmp	r3, r1
100404de:	d301      	bcc.n	100404e4 <__divsi3+0x190>
100404e0:	008b      	lsls	r3, r1, #2
100404e2:	1ac0      	subs	r0, r0, r3
100404e4:	4152      	adcs	r2, r2
100404e6:	d2d9      	bcs.n	1004049c <__divsi3+0x148>
100404e8:	0843      	lsrs	r3, r0, #1
100404ea:	428b      	cmp	r3, r1
100404ec:	d301      	bcc.n	100404f2 <__divsi3+0x19e>
100404ee:	004b      	lsls	r3, r1, #1
100404f0:	1ac0      	subs	r0, r0, r3
100404f2:	4152      	adcs	r2, r2
100404f4:	1a41      	subs	r1, r0, r1
100404f6:	d200      	bcs.n	100404fa <__divsi3+0x1a6>
100404f8:	4601      	mov	r1, r0
100404fa:	4663      	mov	r3, ip
100404fc:	4152      	adcs	r2, r2
100404fe:	105b      	asrs	r3, r3, #1
10040500:	4610      	mov	r0, r2
10040502:	d301      	bcc.n	10040508 <__divsi3+0x1b4>
10040504:	4240      	negs	r0, r0
10040506:	2b00      	cmp	r3, #0
10040508:	d500      	bpl.n	1004050c <__divsi3+0x1b8>
1004050a:	4249      	negs	r1, r1
1004050c:	4770      	bx	lr
1004050e:	4663      	mov	r3, ip
10040510:	105b      	asrs	r3, r3, #1
10040512:	d300      	bcc.n	10040516 <__divsi3+0x1c2>
10040514:	4240      	negs	r0, r0
10040516:	b501      	push	{r0, lr}
10040518:	2000      	movs	r0, #0
1004051a:	f000 f805 	bl	10040528 <__aeabi_idiv0>
1004051e:	bd02      	pop	{r1, pc}

10040520 <__aeabi_idivmod>:
10040520:	2900      	cmp	r1, #0
10040522:	d0f8      	beq.n	10040516 <__divsi3+0x1c2>
10040524:	e716      	b.n	10040354 <__divsi3>
10040526:	4770      	bx	lr

10040528 <__aeabi_idiv0>:
10040528:	4770      	bx	lr
1004052a:	46c0      	nop			@ (mov r8, r8)

1004052c <__aeabi_llsl>:
1004052c:	4091      	lsls	r1, r2
1004052e:	0003      	movs	r3, r0
10040530:	4090      	lsls	r0, r2
10040532:	469c      	mov	ip, r3
10040534:	3a20      	subs	r2, #32
10040536:	4093      	lsls	r3, r2
10040538:	4319      	orrs	r1, r3
1004053a:	4252      	negs	r2, r2
1004053c:	4663      	mov	r3, ip
1004053e:	40d3      	lsrs	r3, r2
10040540:	4319      	orrs	r1, r3
10040542:	4770      	bx	lr

10040544 <__clzsi2>:
10040544:	211c      	movs	r1, #28
10040546:	2301      	movs	r3, #1
10040548:	041b      	lsls	r3, r3, #16
1004054a:	4298      	cmp	r0, r3
1004054c:	d301      	bcc.n	10040552 <__clzsi2+0xe>
1004054e:	0c00      	lsrs	r0, r0, #16
10040550:	3910      	subs	r1, #16
10040552:	0a1b      	lsrs	r3, r3, #8
10040554:	4298      	cmp	r0, r3
10040556:	d301      	bcc.n	1004055c <__clzsi2+0x18>
10040558:	0a00      	lsrs	r0, r0, #8
1004055a:	3908      	subs	r1, #8
1004055c:	091b      	lsrs	r3, r3, #4
1004055e:	4298      	cmp	r0, r3
10040560:	d301      	bcc.n	10040566 <__clzsi2+0x22>
10040562:	0900      	lsrs	r0, r0, #4
10040564:	3904      	subs	r1, #4
10040566:	a202      	add	r2, pc, #8	@ (adr r2, 10040570 <__clzsi2+0x2c>)
10040568:	5c10      	ldrb	r0, [r2, r0]
1004056a:	1840      	adds	r0, r0, r1
1004056c:	4770      	bx	lr
1004056e:	46c0      	nop			@ (mov r8, r8)
10040570:	02020304 	.word	0x02020304
10040574:	01010101 	.word	0x01010101
	...

10040580 <__aeabi_uldivmod>:
10040580:	2b00      	cmp	r3, #0
10040582:	d111      	bne.n	100405a8 <__aeabi_uldivmod+0x28>
10040584:	2a00      	cmp	r2, #0
10040586:	d10f      	bne.n	100405a8 <__aeabi_uldivmod+0x28>
10040588:	2900      	cmp	r1, #0
1004058a:	d100      	bne.n	1004058e <__aeabi_uldivmod+0xe>
1004058c:	2800      	cmp	r0, #0
1004058e:	d002      	beq.n	10040596 <__aeabi_uldivmod+0x16>
10040590:	2100      	movs	r1, #0
10040592:	43c9      	mvns	r1, r1
10040594:	0008      	movs	r0, r1
10040596:	b407      	push	{r0, r1, r2}
10040598:	4802      	ldr	r0, [pc, #8]	@ (100405a4 <__aeabi_uldivmod+0x24>)
1004059a:	a102      	add	r1, pc, #8	@ (adr r1, 100405a4 <__aeabi_uldivmod+0x24>)
1004059c:	1840      	adds	r0, r0, r1
1004059e:	9002      	str	r0, [sp, #8]
100405a0:	bd03      	pop	{r0, r1, pc}
100405a2:	46c0      	nop			@ (mov r8, r8)
100405a4:	ffffff85 	.word	0xffffff85
100405a8:	b403      	push	{r0, r1}
100405aa:	4668      	mov	r0, sp
100405ac:	b501      	push	{r0, lr}
100405ae:	9802      	ldr	r0, [sp, #8]
100405b0:	f000 f834 	bl	1004061c <__udivmoddi4>
100405b4:	9b01      	ldr	r3, [sp, #4]
100405b6:	469e      	mov	lr, r3
100405b8:	b002      	add	sp, #8
100405ba:	bc0c      	pop	{r2, r3}
100405bc:	4770      	bx	lr
100405be:	46c0      	nop			@ (mov r8, r8)

100405c0 <__aeabi_lmul>:
100405c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100405c2:	46ce      	mov	lr, r9
100405c4:	4699      	mov	r9, r3
100405c6:	0c03      	lsrs	r3, r0, #16
100405c8:	469c      	mov	ip, r3
100405ca:	0413      	lsls	r3, r2, #16
100405cc:	4647      	mov	r7, r8
100405ce:	0c1b      	lsrs	r3, r3, #16
100405d0:	001d      	movs	r5, r3
100405d2:	000e      	movs	r6, r1
100405d4:	4661      	mov	r1, ip
100405d6:	0404      	lsls	r4, r0, #16
100405d8:	0c24      	lsrs	r4, r4, #16
100405da:	b580      	push	{r7, lr}
100405dc:	0007      	movs	r7, r0
100405de:	0c10      	lsrs	r0, r2, #16
100405e0:	434b      	muls	r3, r1
100405e2:	4365      	muls	r5, r4
100405e4:	4341      	muls	r1, r0
100405e6:	4360      	muls	r0, r4
100405e8:	0c2c      	lsrs	r4, r5, #16
100405ea:	18c0      	adds	r0, r0, r3
100405ec:	1824      	adds	r4, r4, r0
100405ee:	468c      	mov	ip, r1
100405f0:	42a3      	cmp	r3, r4
100405f2:	d903      	bls.n	100405fc <__aeabi_lmul+0x3c>
100405f4:	2380      	movs	r3, #128	@ 0x80
100405f6:	025b      	lsls	r3, r3, #9
100405f8:	4698      	mov	r8, r3
100405fa:	44c4      	add	ip, r8
100405fc:	4649      	mov	r1, r9
100405fe:	4379      	muls	r1, r7
10040600:	4356      	muls	r6, r2
10040602:	0c23      	lsrs	r3, r4, #16
10040604:	042d      	lsls	r5, r5, #16
10040606:	0c2d      	lsrs	r5, r5, #16
10040608:	1989      	adds	r1, r1, r6
1004060a:	4463      	add	r3, ip
1004060c:	0424      	lsls	r4, r4, #16
1004060e:	1960      	adds	r0, r4, r5
10040610:	18c9      	adds	r1, r1, r3
10040612:	bcc0      	pop	{r6, r7}
10040614:	46b9      	mov	r9, r7
10040616:	46b0      	mov	r8, r6
10040618:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004061a:	46c0      	nop			@ (mov r8, r8)

1004061c <__udivmoddi4>:
1004061c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004061e:	4657      	mov	r7, sl
10040620:	464e      	mov	r6, r9
10040622:	4645      	mov	r5, r8
10040624:	46de      	mov	lr, fp
10040626:	b5e0      	push	{r5, r6, r7, lr}
10040628:	0004      	movs	r4, r0
1004062a:	000d      	movs	r5, r1
1004062c:	4692      	mov	sl, r2
1004062e:	4699      	mov	r9, r3
10040630:	b083      	sub	sp, #12
10040632:	428b      	cmp	r3, r1
10040634:	d830      	bhi.n	10040698 <__udivmoddi4+0x7c>
10040636:	d02d      	beq.n	10040694 <__udivmoddi4+0x78>
10040638:	4649      	mov	r1, r9
1004063a:	4650      	mov	r0, sl
1004063c:	f000 f8ba 	bl	100407b4 <__clzdi2>
10040640:	0029      	movs	r1, r5
10040642:	0006      	movs	r6, r0
10040644:	0020      	movs	r0, r4
10040646:	f000 f8b5 	bl	100407b4 <__clzdi2>
1004064a:	1a33      	subs	r3, r6, r0
1004064c:	4698      	mov	r8, r3
1004064e:	3b20      	subs	r3, #32
10040650:	d434      	bmi.n	100406bc <__udivmoddi4+0xa0>
10040652:	469b      	mov	fp, r3
10040654:	4653      	mov	r3, sl
10040656:	465a      	mov	r2, fp
10040658:	4093      	lsls	r3, r2
1004065a:	4642      	mov	r2, r8
1004065c:	001f      	movs	r7, r3
1004065e:	4653      	mov	r3, sl
10040660:	4093      	lsls	r3, r2
10040662:	001e      	movs	r6, r3
10040664:	42af      	cmp	r7, r5
10040666:	d83b      	bhi.n	100406e0 <__udivmoddi4+0xc4>
10040668:	42af      	cmp	r7, r5
1004066a:	d100      	bne.n	1004066e <__udivmoddi4+0x52>
1004066c:	e079      	b.n	10040762 <__udivmoddi4+0x146>
1004066e:	465b      	mov	r3, fp
10040670:	1ba4      	subs	r4, r4, r6
10040672:	41bd      	sbcs	r5, r7
10040674:	2b00      	cmp	r3, #0
10040676:	da00      	bge.n	1004067a <__udivmoddi4+0x5e>
10040678:	e076      	b.n	10040768 <__udivmoddi4+0x14c>
1004067a:	2200      	movs	r2, #0
1004067c:	2300      	movs	r3, #0
1004067e:	9200      	str	r2, [sp, #0]
10040680:	9301      	str	r3, [sp, #4]
10040682:	2301      	movs	r3, #1
10040684:	465a      	mov	r2, fp
10040686:	4093      	lsls	r3, r2
10040688:	9301      	str	r3, [sp, #4]
1004068a:	2301      	movs	r3, #1
1004068c:	4642      	mov	r2, r8
1004068e:	4093      	lsls	r3, r2
10040690:	9300      	str	r3, [sp, #0]
10040692:	e029      	b.n	100406e8 <__udivmoddi4+0xcc>
10040694:	4282      	cmp	r2, r0
10040696:	d9cf      	bls.n	10040638 <__udivmoddi4+0x1c>
10040698:	2200      	movs	r2, #0
1004069a:	2300      	movs	r3, #0
1004069c:	9200      	str	r2, [sp, #0]
1004069e:	9301      	str	r3, [sp, #4]
100406a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100406a2:	2b00      	cmp	r3, #0
100406a4:	d001      	beq.n	100406aa <__udivmoddi4+0x8e>
100406a6:	601c      	str	r4, [r3, #0]
100406a8:	605d      	str	r5, [r3, #4]
100406aa:	9800      	ldr	r0, [sp, #0]
100406ac:	9901      	ldr	r1, [sp, #4]
100406ae:	b003      	add	sp, #12
100406b0:	bcf0      	pop	{r4, r5, r6, r7}
100406b2:	46bb      	mov	fp, r7
100406b4:	46b2      	mov	sl, r6
100406b6:	46a9      	mov	r9, r5
100406b8:	46a0      	mov	r8, r4
100406ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406bc:	4642      	mov	r2, r8
100406be:	469b      	mov	fp, r3
100406c0:	2320      	movs	r3, #32
100406c2:	1a9b      	subs	r3, r3, r2
100406c4:	4652      	mov	r2, sl
100406c6:	40da      	lsrs	r2, r3
100406c8:	4641      	mov	r1, r8
100406ca:	0013      	movs	r3, r2
100406cc:	464a      	mov	r2, r9
100406ce:	408a      	lsls	r2, r1
100406d0:	0017      	movs	r7, r2
100406d2:	4642      	mov	r2, r8
100406d4:	431f      	orrs	r7, r3
100406d6:	4653      	mov	r3, sl
100406d8:	4093      	lsls	r3, r2
100406da:	001e      	movs	r6, r3
100406dc:	42af      	cmp	r7, r5
100406de:	d9c3      	bls.n	10040668 <__udivmoddi4+0x4c>
100406e0:	2200      	movs	r2, #0
100406e2:	2300      	movs	r3, #0
100406e4:	9200      	str	r2, [sp, #0]
100406e6:	9301      	str	r3, [sp, #4]
100406e8:	4643      	mov	r3, r8
100406ea:	2b00      	cmp	r3, #0
100406ec:	d0d8      	beq.n	100406a0 <__udivmoddi4+0x84>
100406ee:	07fb      	lsls	r3, r7, #31
100406f0:	0872      	lsrs	r2, r6, #1
100406f2:	431a      	orrs	r2, r3
100406f4:	4646      	mov	r6, r8
100406f6:	087b      	lsrs	r3, r7, #1
100406f8:	e00e      	b.n	10040718 <__udivmoddi4+0xfc>
100406fa:	42ab      	cmp	r3, r5
100406fc:	d101      	bne.n	10040702 <__udivmoddi4+0xe6>
100406fe:	42a2      	cmp	r2, r4
10040700:	d80c      	bhi.n	1004071c <__udivmoddi4+0x100>
10040702:	1aa4      	subs	r4, r4, r2
10040704:	419d      	sbcs	r5, r3
10040706:	2001      	movs	r0, #1
10040708:	1924      	adds	r4, r4, r4
1004070a:	416d      	adcs	r5, r5
1004070c:	2100      	movs	r1, #0
1004070e:	3e01      	subs	r6, #1
10040710:	1824      	adds	r4, r4, r0
10040712:	414d      	adcs	r5, r1
10040714:	2e00      	cmp	r6, #0
10040716:	d006      	beq.n	10040726 <__udivmoddi4+0x10a>
10040718:	42ab      	cmp	r3, r5
1004071a:	d9ee      	bls.n	100406fa <__udivmoddi4+0xde>
1004071c:	3e01      	subs	r6, #1
1004071e:	1924      	adds	r4, r4, r4
10040720:	416d      	adcs	r5, r5
10040722:	2e00      	cmp	r6, #0
10040724:	d1f8      	bne.n	10040718 <__udivmoddi4+0xfc>
10040726:	9800      	ldr	r0, [sp, #0]
10040728:	9901      	ldr	r1, [sp, #4]
1004072a:	465b      	mov	r3, fp
1004072c:	1900      	adds	r0, r0, r4
1004072e:	4169      	adcs	r1, r5
10040730:	2b00      	cmp	r3, #0
10040732:	db24      	blt.n	1004077e <__udivmoddi4+0x162>
10040734:	002b      	movs	r3, r5
10040736:	465a      	mov	r2, fp
10040738:	4644      	mov	r4, r8
1004073a:	40d3      	lsrs	r3, r2
1004073c:	002a      	movs	r2, r5
1004073e:	40e2      	lsrs	r2, r4
10040740:	001c      	movs	r4, r3
10040742:	465b      	mov	r3, fp
10040744:	0015      	movs	r5, r2
10040746:	2b00      	cmp	r3, #0
10040748:	db2a      	blt.n	100407a0 <__udivmoddi4+0x184>
1004074a:	0026      	movs	r6, r4
1004074c:	409e      	lsls	r6, r3
1004074e:	0033      	movs	r3, r6
10040750:	0026      	movs	r6, r4
10040752:	4647      	mov	r7, r8
10040754:	40be      	lsls	r6, r7
10040756:	0032      	movs	r2, r6
10040758:	1a80      	subs	r0, r0, r2
1004075a:	4199      	sbcs	r1, r3
1004075c:	9000      	str	r0, [sp, #0]
1004075e:	9101      	str	r1, [sp, #4]
10040760:	e79e      	b.n	100406a0 <__udivmoddi4+0x84>
10040762:	42a3      	cmp	r3, r4
10040764:	d8bc      	bhi.n	100406e0 <__udivmoddi4+0xc4>
10040766:	e782      	b.n	1004066e <__udivmoddi4+0x52>
10040768:	4642      	mov	r2, r8
1004076a:	2320      	movs	r3, #32
1004076c:	2100      	movs	r1, #0
1004076e:	1a9b      	subs	r3, r3, r2
10040770:	2200      	movs	r2, #0
10040772:	9100      	str	r1, [sp, #0]
10040774:	9201      	str	r2, [sp, #4]
10040776:	2201      	movs	r2, #1
10040778:	40da      	lsrs	r2, r3
1004077a:	9201      	str	r2, [sp, #4]
1004077c:	e785      	b.n	1004068a <__udivmoddi4+0x6e>
1004077e:	4642      	mov	r2, r8
10040780:	2320      	movs	r3, #32
10040782:	1a9b      	subs	r3, r3, r2
10040784:	002a      	movs	r2, r5
10040786:	4646      	mov	r6, r8
10040788:	409a      	lsls	r2, r3
1004078a:	0023      	movs	r3, r4
1004078c:	40f3      	lsrs	r3, r6
1004078e:	4644      	mov	r4, r8
10040790:	4313      	orrs	r3, r2
10040792:	002a      	movs	r2, r5
10040794:	40e2      	lsrs	r2, r4
10040796:	001c      	movs	r4, r3
10040798:	465b      	mov	r3, fp
1004079a:	0015      	movs	r5, r2
1004079c:	2b00      	cmp	r3, #0
1004079e:	dad4      	bge.n	1004074a <__udivmoddi4+0x12e>
100407a0:	4642      	mov	r2, r8
100407a2:	002f      	movs	r7, r5
100407a4:	2320      	movs	r3, #32
100407a6:	0026      	movs	r6, r4
100407a8:	4097      	lsls	r7, r2
100407aa:	1a9b      	subs	r3, r3, r2
100407ac:	40de      	lsrs	r6, r3
100407ae:	003b      	movs	r3, r7
100407b0:	4333      	orrs	r3, r6
100407b2:	e7cd      	b.n	10040750 <__udivmoddi4+0x134>

100407b4 <__clzdi2>:
100407b4:	b510      	push	{r4, lr}
100407b6:	2900      	cmp	r1, #0
100407b8:	d103      	bne.n	100407c2 <__clzdi2+0xe>
100407ba:	f7ff fec3 	bl	10040544 <__clzsi2>
100407be:	3020      	adds	r0, #32
100407c0:	e002      	b.n	100407c8 <__clzdi2+0x14>
100407c2:	0008      	movs	r0, r1
100407c4:	f7ff febe 	bl	10040544 <__clzsi2>
100407c8:	bd10      	pop	{r4, pc}
100407ca:	46c0      	nop			@ (mov r8, r8)

100407cc <BLUETOOTH_BufferInit>:
 * @function: BLUETOOTH_BufferInit()
 * @brief: initialize the the bluetooth tx buffer for virtual USART communication
 * @param: none
 * @return: none
 */
void BLUETOOTH_BufferInit(){
100407cc:	b580      	push	{r7, lr}
100407ce:	af00      	add	r7, sp, #0
	buffer.head = 0;
100407d0:	4a07      	ldr	r2, [pc, #28]	@ (100407f0 <BLUETOOTH_BufferInit+0x24>)
100407d2:	2380      	movs	r3, #128	@ 0x80
100407d4:	009b      	lsls	r3, r3, #2
100407d6:	2100      	movs	r1, #0
100407d8:	54d1      	strb	r1, [r2, r3]
	buffer.tail = 0;
100407da:	4b05      	ldr	r3, [pc, #20]	@ (100407f0 <BLUETOOTH_BufferInit+0x24>)
100407dc:	4a05      	ldr	r2, [pc, #20]	@ (100407f4 <BLUETOOTH_BufferInit+0x28>)
100407de:	2100      	movs	r1, #0
100407e0:	5499      	strb	r1, [r3, r2]
	buffer.full = 0;
100407e2:	4b03      	ldr	r3, [pc, #12]	@ (100407f0 <BLUETOOTH_BufferInit+0x24>)
100407e4:	4a04      	ldr	r2, [pc, #16]	@ (100407f8 <BLUETOOTH_BufferInit+0x2c>)
100407e6:	2100      	movs	r1, #0
100407e8:	5499      	strb	r1, [r3, r2]
}
100407ea:	46c0      	nop			@ (mov r8, r8)
100407ec:	46bd      	mov	sp, r7
100407ee:	bd80      	pop	{r7, pc}
100407f0:	20000194 	.word	0x20000194
100407f4:	00000201 	.word	0x00000201
100407f8:	00000202 	.word	0x00000202

100407fc <BLUETOOTH_WriteBuffer>:
 * @function: BLUETOOTH_WriteBuffer(uint8_t input)
 * @brief: places one character into the buffer for the external PC to read
 * @param: input: character to be placed in buffer
 * @return: none
 */
uint8_t BLUETOOTH_WriteBuffer(uint8_t input){
100407fc:	b580      	push	{r7, lr}
100407fe:	b082      	sub	sp, #8
10040800:	af00      	add	r7, sp, #0
10040802:	0002      	movs	r2, r0
10040804:	1dfb      	adds	r3, r7, #7
10040806:	701a      	strb	r2, [r3, #0]
	if(!buffer.full){
10040808:	4b1f      	ldr	r3, [pc, #124]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
1004080a:	4a20      	ldr	r2, [pc, #128]	@ (1004088c <BLUETOOTH_WriteBuffer+0x90>)
1004080c:	5c9b      	ldrb	r3, [r3, r2]
1004080e:	2b00      	cmp	r3, #0
10040810:	d134      	bne.n	1004087c <BLUETOOTH_WriteBuffer+0x80>
		buffer.data[buffer.head] = input;
10040812:	4a1d      	ldr	r2, [pc, #116]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
10040814:	2380      	movs	r3, #128	@ 0x80
10040816:	009b      	lsls	r3, r3, #2
10040818:	5cd3      	ldrb	r3, [r2, r3]
1004081a:	0019      	movs	r1, r3
1004081c:	4b1a      	ldr	r3, [pc, #104]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
1004081e:	1dfa      	adds	r2, r7, #7
10040820:	7812      	ldrb	r2, [r2, #0]
10040822:	545a      	strb	r2, [r3, r1]
		buffer.head++;
10040824:	4a18      	ldr	r2, [pc, #96]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
10040826:	2380      	movs	r3, #128	@ 0x80
10040828:	009b      	lsls	r3, r3, #2
1004082a:	5cd3      	ldrb	r3, [r2, r3]
1004082c:	3301      	adds	r3, #1
1004082e:	b2d9      	uxtb	r1, r3
10040830:	4a15      	ldr	r2, [pc, #84]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
10040832:	2380      	movs	r3, #128	@ 0x80
10040834:	009b      	lsls	r3, r3, #2
10040836:	54d1      	strb	r1, [r2, r3]
		buffer.head %= BTBUFFERSIZE;
10040838:	4a13      	ldr	r2, [pc, #76]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
1004083a:	2380      	movs	r3, #128	@ 0x80
1004083c:	009b      	lsls	r3, r3, #2
1004083e:	5cd1      	ldrb	r1, [r2, r3]
10040840:	4a11      	ldr	r2, [pc, #68]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
10040842:	2380      	movs	r3, #128	@ 0x80
10040844:	009b      	lsls	r3, r3, #2
10040846:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10040848:	4a0f      	ldr	r2, [pc, #60]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
1004084a:	2380      	movs	r3, #128	@ 0x80
1004084c:	009b      	lsls	r3, r3, #2
1004084e:	5cd3      	ldrb	r3, [r2, r3]
10040850:	3301      	adds	r3, #1
10040852:	4a0f      	ldr	r2, [pc, #60]	@ (10040890 <BLUETOOTH_WriteBuffer+0x94>)
10040854:	4013      	ands	r3, r2
10040856:	d503      	bpl.n	10040860 <BLUETOOTH_WriteBuffer+0x64>
10040858:	3b01      	subs	r3, #1
1004085a:	4a0e      	ldr	r2, [pc, #56]	@ (10040894 <BLUETOOTH_WriteBuffer+0x98>)
1004085c:	4313      	orrs	r3, r2
1004085e:	3301      	adds	r3, #1
10040860:	0019      	movs	r1, r3
10040862:	4b09      	ldr	r3, [pc, #36]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
10040864:	4a0c      	ldr	r2, [pc, #48]	@ (10040898 <BLUETOOTH_WriteBuffer+0x9c>)
10040866:	5c9b      	ldrb	r3, [r3, r2]
10040868:	1acb      	subs	r3, r1, r3
1004086a:	425a      	negs	r2, r3
1004086c:	4153      	adcs	r3, r2
1004086e:	b2db      	uxtb	r3, r3
10040870:	0019      	movs	r1, r3
10040872:	4b05      	ldr	r3, [pc, #20]	@ (10040888 <BLUETOOTH_WriteBuffer+0x8c>)
10040874:	4a05      	ldr	r2, [pc, #20]	@ (1004088c <BLUETOOTH_WriteBuffer+0x90>)
10040876:	5499      	strb	r1, [r3, r2]

		return 1;
10040878:	2301      	movs	r3, #1
1004087a:	e000      	b.n	1004087e <BLUETOOTH_WriteBuffer+0x82>
	} else {
		return 0;
1004087c:	2300      	movs	r3, #0
	}
}
1004087e:	0018      	movs	r0, r3
10040880:	46bd      	mov	sp, r7
10040882:	b002      	add	sp, #8
10040884:	bd80      	pop	{r7, pc}
10040886:	46c0      	nop			@ (mov r8, r8)
10040888:	20000194 	.word	0x20000194
1004088c:	00000202 	.word	0x00000202
10040890:	800001ff 	.word	0x800001ff
10040894:	fffffe00 	.word	0xfffffe00
10040898:	00000201 	.word	0x00000201

1004089c <BLUETOOTH_ReadBuffer>:
 * @function: BLUETOOTH_ReadBuffer(uint8_t input)
 * @brief: returns a character from the buffer and removes it from the buffer
 * @param: none
 * @return: -1 if buffer empty, uint8_t character data if the buffer has data to return
 */
int16_t BLUETOOTH_ReadBuffer(){
1004089c:	b580      	push	{r7, lr}
1004089e:	b082      	sub	sp, #8
100408a0:	af00      	add	r7, sp, #0
	int16_t ret = -1;
100408a2:	1dbb      	adds	r3, r7, #6
100408a4:	2201      	movs	r2, #1
100408a6:	4252      	negs	r2, r2
100408a8:	801a      	strh	r2, [r3, #0]
	if(buffer.head != buffer.tail || buffer.full){
100408aa:	4a21      	ldr	r2, [pc, #132]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408ac:	2380      	movs	r3, #128	@ 0x80
100408ae:	009b      	lsls	r3, r3, #2
100408b0:	5cd2      	ldrb	r2, [r2, r3]
100408b2:	4b1f      	ldr	r3, [pc, #124]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408b4:	491f      	ldr	r1, [pc, #124]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
100408b6:	5c5b      	ldrb	r3, [r3, r1]
100408b8:	429a      	cmp	r2, r3
100408ba:	d104      	bne.n	100408c6 <BLUETOOTH_ReadBuffer+0x2a>
100408bc:	4b1c      	ldr	r3, [pc, #112]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408be:	4a1e      	ldr	r2, [pc, #120]	@ (10040938 <BLUETOOTH_ReadBuffer+0x9c>)
100408c0:	5c9b      	ldrb	r3, [r3, r2]
100408c2:	2b00      	cmp	r3, #0
100408c4:	d02d      	beq.n	10040922 <BLUETOOTH_ReadBuffer+0x86>

		ret = buffer.data[buffer.tail];
100408c6:	4b1a      	ldr	r3, [pc, #104]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408c8:	4a1a      	ldr	r2, [pc, #104]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
100408ca:	5c9b      	ldrb	r3, [r3, r2]
100408cc:	001a      	movs	r2, r3
100408ce:	4b18      	ldr	r3, [pc, #96]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408d0:	5c9a      	ldrb	r2, [r3, r2]
100408d2:	1dbb      	adds	r3, r7, #6
100408d4:	801a      	strh	r2, [r3, #0]
		buffer.tail++;
100408d6:	4b16      	ldr	r3, [pc, #88]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408d8:	4a16      	ldr	r2, [pc, #88]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
100408da:	5c9b      	ldrb	r3, [r3, r2]
100408dc:	3301      	adds	r3, #1
100408de:	b2d9      	uxtb	r1, r3
100408e0:	4b13      	ldr	r3, [pc, #76]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408e2:	4a14      	ldr	r2, [pc, #80]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
100408e4:	5499      	strb	r1, [r3, r2]
		buffer.tail %= BTBUFFERSIZE;
100408e6:	4b12      	ldr	r3, [pc, #72]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408e8:	4a12      	ldr	r2, [pc, #72]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
100408ea:	5c99      	ldrb	r1, [r3, r2]
100408ec:	4b10      	ldr	r3, [pc, #64]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408ee:	4a11      	ldr	r2, [pc, #68]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
100408f0:	5499      	strb	r1, [r3, r2]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
100408f2:	4a0f      	ldr	r2, [pc, #60]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
100408f4:	2380      	movs	r3, #128	@ 0x80
100408f6:	009b      	lsls	r3, r3, #2
100408f8:	5cd3      	ldrb	r3, [r2, r3]
100408fa:	3301      	adds	r3, #1
100408fc:	4a0f      	ldr	r2, [pc, #60]	@ (1004093c <BLUETOOTH_ReadBuffer+0xa0>)
100408fe:	4013      	ands	r3, r2
10040900:	d503      	bpl.n	1004090a <BLUETOOTH_ReadBuffer+0x6e>
10040902:	3b01      	subs	r3, #1
10040904:	4a0e      	ldr	r2, [pc, #56]	@ (10040940 <BLUETOOTH_ReadBuffer+0xa4>)
10040906:	4313      	orrs	r3, r2
10040908:	3301      	adds	r3, #1
1004090a:	0019      	movs	r1, r3
1004090c:	4b08      	ldr	r3, [pc, #32]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
1004090e:	4a09      	ldr	r2, [pc, #36]	@ (10040934 <BLUETOOTH_ReadBuffer+0x98>)
10040910:	5c9b      	ldrb	r3, [r3, r2]
10040912:	1acb      	subs	r3, r1, r3
10040914:	425a      	negs	r2, r3
10040916:	4153      	adcs	r3, r2
10040918:	b2db      	uxtb	r3, r3
1004091a:	0019      	movs	r1, r3
1004091c:	4b04      	ldr	r3, [pc, #16]	@ (10040930 <BLUETOOTH_ReadBuffer+0x94>)
1004091e:	4a06      	ldr	r2, [pc, #24]	@ (10040938 <BLUETOOTH_ReadBuffer+0x9c>)
10040920:	5499      	strb	r1, [r3, r2]
	}
	return ret;
10040922:	1dbb      	adds	r3, r7, #6
10040924:	2200      	movs	r2, #0
10040926:	5e9b      	ldrsh	r3, [r3, r2]
}
10040928:	0018      	movs	r0, r3
1004092a:	46bd      	mov	sp, r7
1004092c:	b002      	add	sp, #8
1004092e:	bd80      	pop	{r7, pc}
10040930:	20000194 	.word	0x20000194
10040934:	00000201 	.word	0x00000201
10040938:	00000202 	.word	0x00000202
1004093c:	800001ff 	.word	0x800001ff
10040940:	fffffe00 	.word	0xfffffe00

10040944 <BLUETOOTH_BufferEmpty>:
 * @function: BLUETOOTH_BufferEmpty()
 * @brief: returns if the buffer is empty or if the Bluetooth is disconnected
 * @param: none
 * @return: 0 if disconnected, 1 if connected and empty, 2 if connected and not empty
 */
uint8_t BLUETOOTH_BufferEmpty(){
10040944:	b580      	push	{r7, lr}
10040946:	af00      	add	r7, sp, #0
	return (buffer.head == buffer.tail && !buffer.full);
10040948:	4a0a      	ldr	r2, [pc, #40]	@ (10040974 <BLUETOOTH_BufferEmpty+0x30>)
1004094a:	2380      	movs	r3, #128	@ 0x80
1004094c:	009b      	lsls	r3, r3, #2
1004094e:	5cd2      	ldrb	r2, [r2, r3]
10040950:	4b08      	ldr	r3, [pc, #32]	@ (10040974 <BLUETOOTH_BufferEmpty+0x30>)
10040952:	4909      	ldr	r1, [pc, #36]	@ (10040978 <BLUETOOTH_BufferEmpty+0x34>)
10040954:	5c5b      	ldrb	r3, [r3, r1]
10040956:	429a      	cmp	r2, r3
10040958:	d106      	bne.n	10040968 <BLUETOOTH_BufferEmpty+0x24>
1004095a:	4b06      	ldr	r3, [pc, #24]	@ (10040974 <BLUETOOTH_BufferEmpty+0x30>)
1004095c:	4a07      	ldr	r2, [pc, #28]	@ (1004097c <BLUETOOTH_BufferEmpty+0x38>)
1004095e:	5c9b      	ldrb	r3, [r3, r2]
10040960:	2b00      	cmp	r3, #0
10040962:	d101      	bne.n	10040968 <BLUETOOTH_BufferEmpty+0x24>
10040964:	2301      	movs	r3, #1
10040966:	e000      	b.n	1004096a <BLUETOOTH_BufferEmpty+0x26>
10040968:	2300      	movs	r3, #0
1004096a:	b2db      	uxtb	r3, r3
}
1004096c:	0018      	movs	r0, r3
1004096e:	46bd      	mov	sp, r7
10040970:	bd80      	pop	{r7, pc}
10040972:	46c0      	nop			@ (mov r8, r8)
10040974:	20000194 	.word	0x20000194
10040978:	00000201 	.word	0x00000201
1004097c:	00000202 	.word	0x00000202

10040980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
10040980:	b590      	push	{r4, r7, lr}
10040982:	b089      	sub	sp, #36	@ 0x24
10040984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040986:	2408      	movs	r4, #8
10040988:	193b      	adds	r3, r7, r4
1004098a:	0018      	movs	r0, r3
1004098c:	2318      	movs	r3, #24
1004098e:	001a      	movs	r2, r3
10040990:	2100      	movs	r1, #0
10040992:	f025 fd85 	bl	100664a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040996:	003b      	movs	r3, r7
10040998:	0018      	movs	r0, r3
1004099a:	2308      	movs	r3, #8
1004099c:	001a      	movs	r2, r3
1004099e:	2100      	movs	r1, #0
100409a0:	f025 fd7e 	bl	100664a0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
100409a4:	193b      	adds	r3, r7, r4
100409a6:	2205      	movs	r2, #5
100409a8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
100409aa:	193b      	adds	r3, r7, r4
100409ac:	2280      	movs	r2, #128	@ 0x80
100409ae:	0252      	lsls	r2, r2, #9
100409b0:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
100409b2:	193b      	adds	r3, r7, r4
100409b4:	2204      	movs	r2, #4
100409b6:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100409b8:	193b      	adds	r3, r7, r4
100409ba:	0018      	movs	r0, r3
100409bc:	f00a fe0a 	bl	1004b5d4 <HAL_RCC_OscConfig>
100409c0:	1e03      	subs	r3, r0, #0
100409c2:	d001      	beq.n	100409c8 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
100409c4:	2300      	movs	r3, #0
100409c6:	e00f      	b.n	100409e8 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
100409c8:	003b      	movs	r3, r7
100409ca:	2200      	movs	r2, #0
100409cc:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100409ce:	003b      	movs	r3, r7
100409d0:	2200      	movs	r2, #0
100409d2:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
100409d4:	003b      	movs	r3, r7
100409d6:	2110      	movs	r1, #16
100409d8:	0018      	movs	r0, r3
100409da:	f00a ff45 	bl	1004b868 <HAL_RCC_ClockConfig>
100409de:	1e03      	subs	r3, r0, #0
100409e0:	d001      	beq.n	100409e6 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
100409e2:	2300      	movs	r3, #0
100409e4:	e000      	b.n	100409e8 <SystemClock_Config+0x68>
	}
	return INIT_OK;
100409e6:	2301      	movs	r3, #1
}
100409e8:	0018      	movs	r0, r3
100409ea:	46bd      	mov	sp, r7
100409ec:	b009      	add	sp, #36	@ 0x24
100409ee:	bd90      	pop	{r4, r7, pc}

100409f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
100409f0:	b580      	push	{r7, lr}
100409f2:	b086      	sub	sp, #24
100409f4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100409f6:	003b      	movs	r3, r7
100409f8:	0018      	movs	r0, r3
100409fa:	2318      	movs	r3, #24
100409fc:	001a      	movs	r2, r3
100409fe:	2100      	movs	r1, #0
10040a00:	f025 fd4e 	bl	100664a0 <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10040a04:	003b      	movs	r3, r7
10040a06:	2202      	movs	r2, #2
10040a08:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10040a0a:	003b      	movs	r3, r7
10040a0c:	2280      	movs	r2, #128	@ 0x80
10040a0e:	0152      	lsls	r2, r2, #5
10040a10:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040a12:	003b      	movs	r3, r7
10040a14:	0018      	movs	r0, r3
10040a16:	f00b f8bd 	bl	1004bb94 <HAL_RCCEx_PeriphCLKConfig>
10040a1a:	1e03      	subs	r3, r0, #0
10040a1c:	d001      	beq.n	10040a22 <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
10040a1e:	2300      	movs	r3, #0
10040a20:	e000      	b.n	10040a24 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
10040a22:	2301      	movs	r3, #1
}
10040a24:	0018      	movs	r0, r3
10040a26:	46bd      	mov	sp, r7
10040a28:	b006      	add	sp, #24
10040a2a:	bd80      	pop	{r7, pc}

10040a2c <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
10040a2c:	b580      	push	{r7, lr}
10040a2e:	b082      	sub	sp, #8
10040a30:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10040a32:	4b0f      	ldr	r3, [pc, #60]	@ (10040a70 <BOARD_Init+0x44>)
10040a34:	781b      	ldrb	r3, [r3, #0]
10040a36:	2b00      	cmp	r3, #0
10040a38:	d001      	beq.n	10040a3e <BOARD_Init+0x12>
10040a3a:	2301      	movs	r3, #1
10040a3c:	e013      	b.n	10040a66 <BOARD_Init+0x3a>
	HAL_Init();
10040a3e:	f005 fc33 	bl	100462a8 <HAL_Init>
	int errorFlag = INIT_OK;
10040a42:	2301      	movs	r3, #1
10040a44:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10040a46:	f7ff ffd3 	bl	100409f0 <PeriphCommonClock_Config>
10040a4a:	1e03      	subs	r3, r0, #0
10040a4c:	d101      	bne.n	10040a52 <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
10040a4e:	2300      	movs	r3, #0
10040a50:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
10040a52:	f7ff ff95 	bl	10040980 <SystemClock_Config>
10040a56:	1e03      	subs	r3, r0, #0
10040a58:	d101      	bne.n	10040a5e <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
10040a5a:	2300      	movs	r3, #0
10040a5c:	607b      	str	r3, [r7, #4]
	}
	initialized = 1;
10040a5e:	4b04      	ldr	r3, [pc, #16]	@ (10040a70 <BOARD_Init+0x44>)
10040a60:	2201      	movs	r2, #1
10040a62:	701a      	strb	r2, [r3, #0]
	return errorFlag;
10040a64:	687b      	ldr	r3, [r7, #4]
}
10040a66:	0018      	movs	r0, r3
10040a68:	46bd      	mov	sp, r7
10040a6a:	b002      	add	sp, #8
10040a6c:	bd80      	pop	{r7, pc}
10040a6e:	46c0      	nop			@ (mov r8, r8)
10040a70:	20000397 	.word	0x20000397

10040a74 <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
10040a74:	b580      	push	{r7, lr}
10040a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10040a78:	b672      	cpsid	i
}
10040a7a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10040a7c:	46c0      	nop			@ (mov r8, r8)
10040a7e:	e7fd      	b.n	10040a7c <BOARD_CrashHandler+0x8>

10040a80 <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
10040a80:	b580      	push	{r7, lr}
10040a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10040a84:	b672      	cpsid	i
}
10040a86:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10040a88:	46c0      	nop			@ (mov r8, r8)
10040a8a:	e7fd      	b.n	10040a88 <Error_Handler+0x8>

10040a8c <DrawMain>:
static uint8_t monthselect;
static uint8_t dayselect;
static uint8_t Stimeselect;
static uint8_t Etimeselect;
//----------------------------------------Private Functions--------------------------------------
void DrawMain(){
10040a8c:	b5b0      	push	{r4, r5, r7, lr}
10040a8e:	b0b2      	sub	sp, #200	@ 0xc8
10040a90:	af06      	add	r7, sp, #24
					  "Back:play track\n"
			   	   	  "Sel:append schedule\n"
	   	   	  	  	  "%c:Set Date/time\n"
					  "%c:more options\n"
					  "Volume: %c%.3d%c\n"
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10040a92:	f002 fb07 	bl	100430a4 <FLASH_GetVolume>
10040a96:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10040a98:	001c      	movs	r4, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10040a9a:	f003 fdb9 	bl	10044610 <MP3_GetCurrentFile>
10040a9e:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10040aa0:	0a1b      	lsrs	r3, r3, #8
10040aa2:	b29b      	uxth	r3, r3
10040aa4:	001d      	movs	r5, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10040aa6:	f003 fdb3 	bl	10044610 <MP3_GetCurrentFile>
10040aaa:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10040aac:	001a      	movs	r2, r3
10040aae:	23ff      	movs	r3, #255	@ 0xff
10040ab0:	4013      	ands	r3, r2
10040ab2:	490d      	ldr	r1, [pc, #52]	@ (10040ae8 <DrawMain+0x5c>)
10040ab4:	0038      	movs	r0, r7
10040ab6:	9304      	str	r3, [sp, #16]
10040ab8:	9503      	str	r5, [sp, #12]
10040aba:	2308      	movs	r3, #8
10040abc:	9302      	str	r3, [sp, #8]
10040abe:	9401      	str	r4, [sp, #4]
10040ac0:	2306      	movs	r3, #6
10040ac2:	9300      	str	r3, [sp, #0]
10040ac4:	2301      	movs	r3, #1
10040ac6:	2203      	movs	r2, #3
10040ac8:	f025 fbce 	bl	10066268 <siprintf>
	OledClear(OLED_COLOR_BLACK);
10040acc:	2000      	movs	r0, #0
10040ace:	f003 fee7 	bl	100448a0 <OledClear>
	OledDrawString(maintext);
10040ad2:	003b      	movs	r3, r7
10040ad4:	0018      	movs	r0, r3
10040ad6:	f003 fe99 	bl	1004480c <OledDrawString>
	OledUpdate();
10040ada:	f003 ff17 	bl	1004490c <OledUpdate>
}
10040ade:	46c0      	nop			@ (mov r8, r8)
10040ae0:	46bd      	mov	sp, r7
10040ae2:	b02c      	add	sp, #176	@ 0xb0
10040ae4:	bdb0      	pop	{r4, r5, r7, pc}
10040ae6:	46c0      	nop			@ (mov r8, r8)
10040ae8:	100672d8 	.word	0x100672d8

10040aec <DrawFolder>:

void DrawFolder(uint8_t cursor, uint8_t folder, uint8_t track){
10040aec:	b5f0      	push	{r4, r5, r6, r7, lr}
10040aee:	b09d      	sub	sp, #116	@ 0x74
10040af0:	af04      	add	r7, sp, #16
10040af2:	0004      	movs	r4, r0
10040af4:	0008      	movs	r0, r1
10040af6:	0011      	movs	r1, r2
10040af8:	1dfb      	adds	r3, r7, #7
10040afa:	1c22      	adds	r2, r4, #0
10040afc:	701a      	strb	r2, [r3, #0]
10040afe:	1dbb      	adds	r3, r7, #6
10040b00:	1c02      	adds	r2, r0, #0
10040b02:	701a      	strb	r2, [r3, #0]
10040b04:	1d7b      	adds	r3, r7, #5
10040b06:	1c0a      	adds	r2, r1, #0
10040b08:	701a      	strb	r2, [r3, #0]

	char folderselectstring[88];
	sprintf(folderselectstring, "Select Folder\n"
10040b0a:	1dfb      	adds	r3, r7, #7
10040b0c:	781b      	ldrb	r3, [r3, #0]
10040b0e:	2b00      	cmp	r3, #0
10040b10:	d101      	bne.n	10040b16 <DrawFolder+0x2a>
10040b12:	2102      	movs	r1, #2
10040b14:	e000      	b.n	10040b18 <DrawFolder+0x2c>
10040b16:	2101      	movs	r1, #1
10040b18:	1dfb      	adds	r3, r7, #7
10040b1a:	781b      	ldrb	r3, [r3, #0]
10040b1c:	2b00      	cmp	r3, #0
10040b1e:	d001      	beq.n	10040b24 <DrawFolder+0x38>
10040b20:	2002      	movs	r0, #2
10040b22:	e000      	b.n	10040b26 <DrawFolder+0x3a>
10040b24:	2001      	movs	r0, #1
10040b26:	1dbb      	adds	r3, r7, #6
10040b28:	781c      	ldrb	r4, [r3, #0]
10040b2a:	1d7b      	adds	r3, r7, #5
10040b2c:	781d      	ldrb	r5, [r3, #0]
10040b2e:	1dfb      	adds	r3, r7, #7
10040b30:	781b      	ldrb	r3, [r3, #0]
10040b32:	2b00      	cmp	r3, #0
10040b34:	d101      	bne.n	10040b3a <DrawFolder+0x4e>
10040b36:	2304      	movs	r3, #4
10040b38:	e000      	b.n	10040b3c <DrawFolder+0x50>
10040b3a:	2303      	movs	r3, #3
10040b3c:	1dfa      	adds	r2, r7, #7
10040b3e:	7812      	ldrb	r2, [r2, #0]
10040b40:	2a00      	cmp	r2, #0
10040b42:	d001      	beq.n	10040b48 <DrawFolder+0x5c>
10040b44:	2204      	movs	r2, #4
10040b46:	e000      	b.n	10040b4a <DrawFolder+0x5e>
10040b48:	2203      	movs	r2, #3
10040b4a:	4e0e      	ldr	r6, [pc, #56]	@ (10040b84 <DrawFolder+0x98>)
10040b4c:	46b4      	mov	ip, r6
10040b4e:	2608      	movs	r6, #8
10040b50:	19be      	adds	r6, r7, r6
10040b52:	9203      	str	r2, [sp, #12]
10040b54:	9302      	str	r3, [sp, #8]
10040b56:	9501      	str	r5, [sp, #4]
10040b58:	9400      	str	r4, [sp, #0]
10040b5a:	0003      	movs	r3, r0
10040b5c:	000a      	movs	r2, r1
10040b5e:	4661      	mov	r1, ip
10040b60:	0030      	movs	r0, r6
10040b62:	f025 fb81 	bl	10066268 <siprintf>
			                    "Folder: %d Track: %d\n"
			                    "        %c        %c\n",
								!cursor?UP_ARROW_ON:UP_ARROW_OFF, cursor?UP_ARROW_ON:UP_ARROW_OFF,
								folder, track,
								!cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF, cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10040b66:	2000      	movs	r0, #0
10040b68:	f003 fe9a 	bl	100448a0 <OledClear>
	OledDrawString(folderselectstring);
10040b6c:	2608      	movs	r6, #8
10040b6e:	19bb      	adds	r3, r7, r6
10040b70:	0018      	movs	r0, r3
10040b72:	f003 fe4b 	bl	1004480c <OledDrawString>
	OledUpdate();
10040b76:	f003 fec9 	bl	1004490c <OledUpdate>
}
10040b7a:	46c0      	nop			@ (mov r8, r8)
10040b7c:	46bd      	mov	sp, r7
10040b7e:	b019      	add	sp, #100	@ 0x64
10040b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040b82:	46c0      	nop			@ (mov r8, r8)
10040b84:	1006734c 	.word	0x1006734c

10040b88 <DrawOptions>:

void DrawOptions(uint8_t cursor, uint8_t dutycycle){
10040b88:	b5f0      	push	{r4, r5, r6, r7, lr}
10040b8a:	46c6      	mov	lr, r8
10040b8c:	b500      	push	{lr}
10040b8e:	b09e      	sub	sp, #120	@ 0x78
10040b90:	af06      	add	r7, sp, #24
10040b92:	0002      	movs	r2, r0
10040b94:	1dfb      	adds	r3, r7, #7
10040b96:	701a      	strb	r2, [r3, #0]
10040b98:	1dbb      	adds	r3, r7, #6
10040b9a:	1c0a      	adds	r2, r1, #0
10040b9c:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
	sprintf(folderselectstring, "Options\n"
10040b9e:	1dfb      	adds	r3, r7, #7
10040ba0:	781b      	ldrb	r3, [r3, #0]
10040ba2:	2b00      	cmp	r3, #0
10040ba4:	d101      	bne.n	10040baa <DrawOptions+0x22>
10040ba6:	2506      	movs	r5, #6
10040ba8:	e000      	b.n	10040bac <DrawOptions+0x24>
10040baa:	2505      	movs	r5, #5
10040bac:	1dbb      	adds	r3, r7, #6
10040bae:	781b      	ldrb	r3, [r3, #0]
10040bb0:	4698      	mov	r8, r3
10040bb2:	1dfb      	adds	r3, r7, #7
10040bb4:	781b      	ldrb	r3, [r3, #0]
10040bb6:	2b00      	cmp	r3, #0
10040bb8:	d101      	bne.n	10040bbe <DrawOptions+0x36>
10040bba:	2308      	movs	r3, #8
10040bbc:	e000      	b.n	10040bc0 <DrawOptions+0x38>
10040bbe:	2307      	movs	r3, #7
10040bc0:	1dfa      	adds	r2, r7, #7
10040bc2:	7812      	ldrb	r2, [r2, #0]
10040bc4:	2a01      	cmp	r2, #1
10040bc6:	d101      	bne.n	10040bcc <DrawOptions+0x44>
10040bc8:	2206      	movs	r2, #6
10040bca:	e000      	b.n	10040bce <DrawOptions+0x46>
10040bcc:	2205      	movs	r2, #5
10040bce:	1df9      	adds	r1, r7, #7
10040bd0:	7809      	ldrb	r1, [r1, #0]
10040bd2:	2901      	cmp	r1, #1
10040bd4:	d101      	bne.n	10040bda <DrawOptions+0x52>
10040bd6:	2108      	movs	r1, #8
10040bd8:	e000      	b.n	10040bdc <DrawOptions+0x54>
10040bda:	2107      	movs	r1, #7
10040bdc:	1df8      	adds	r0, r7, #7
10040bde:	7800      	ldrb	r0, [r0, #0]
10040be0:	2802      	cmp	r0, #2
10040be2:	d101      	bne.n	10040be8 <DrawOptions+0x60>
10040be4:	2008      	movs	r0, #8
10040be6:	e000      	b.n	10040bea <DrawOptions+0x62>
10040be8:	2007      	movs	r0, #7
10040bea:	1dfc      	adds	r4, r7, #7
10040bec:	7824      	ldrb	r4, [r4, #0]
10040bee:	2c02      	cmp	r4, #2
10040bf0:	d101      	bne.n	10040bf6 <DrawOptions+0x6e>
10040bf2:	2406      	movs	r4, #6
10040bf4:	e000      	b.n	10040bf8 <DrawOptions+0x70>
10040bf6:	2405      	movs	r4, #5
10040bf8:	4e0f      	ldr	r6, [pc, #60]	@ (10040c38 <DrawOptions+0xb0>)
10040bfa:	46b4      	mov	ip, r6
10040bfc:	2608      	movs	r6, #8
10040bfe:	19be      	adds	r6, r7, r6
10040c00:	9404      	str	r4, [sp, #16]
10040c02:	9003      	str	r0, [sp, #12]
10040c04:	9102      	str	r1, [sp, #8]
10040c06:	9201      	str	r2, [sp, #4]
10040c08:	9300      	str	r3, [sp, #0]
10040c0a:	4643      	mov	r3, r8
10040c0c:	002a      	movs	r2, r5
10040c0e:	4661      	mov	r1, ip
10040c10:	0030      	movs	r0, r6
10040c12:	f025 fb29 	bl	10066268 <siprintf>
								" Song:%c%c\n"
								"%cClear Schedule%c",
								0==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF, dutycycle,0==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								1==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF,           1==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								2==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF, 		  2==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10040c16:	2000      	movs	r0, #0
10040c18:	f003 fe42 	bl	100448a0 <OledClear>
	OledDrawString(folderselectstring);
10040c1c:	2608      	movs	r6, #8
10040c1e:	19bb      	adds	r3, r7, r6
10040c20:	0018      	movs	r0, r3
10040c22:	f003 fdf3 	bl	1004480c <OledDrawString>
	OledUpdate();
10040c26:	f003 fe71 	bl	1004490c <OledUpdate>

}
10040c2a:	46c0      	nop			@ (mov r8, r8)
10040c2c:	46bd      	mov	sp, r7
10040c2e:	b018      	add	sp, #96	@ 0x60
10040c30:	bc80      	pop	{r7}
10040c32:	46b8      	mov	r8, r7
10040c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040c36:	46c0      	nop			@ (mov r8, r8)
10040c38:	1006739c 	.word	0x1006739c

10040c3c <DrawSetTime>:

void DrawSetTime(uint8_t cursor, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute){
10040c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10040c3e:	46de      	mov	lr, fp
10040c40:	4657      	mov	r7, sl
10040c42:	464e      	mov	r6, r9
10040c44:	4645      	mov	r5, r8
10040c46:	b5e0      	push	{r5, r6, r7, lr}
10040c48:	b0a5      	sub	sp, #148	@ 0x94
10040c4a:	af0a      	add	r7, sp, #40	@ 0x28
10040c4c:	0005      	movs	r5, r0
10040c4e:	000c      	movs	r4, r1
10040c50:	0010      	movs	r0, r2
10040c52:	0019      	movs	r1, r3
10040c54:	260f      	movs	r6, #15
10040c56:	19bb      	adds	r3, r7, r6
10040c58:	1c2a      	adds	r2, r5, #0
10040c5a:	701a      	strb	r2, [r3, #0]
10040c5c:	230e      	movs	r3, #14
10040c5e:	18fb      	adds	r3, r7, r3
10040c60:	1c22      	adds	r2, r4, #0
10040c62:	701a      	strb	r2, [r3, #0]
10040c64:	230d      	movs	r3, #13
10040c66:	18fb      	adds	r3, r7, r3
10040c68:	1c02      	adds	r2, r0, #0
10040c6a:	701a      	strb	r2, [r3, #0]
10040c6c:	230c      	movs	r3, #12
10040c6e:	18fb      	adds	r3, r7, r3
10040c70:	1c0a      	adds	r2, r1, #0
10040c72:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
#define TOPCHAR cursor?UP_ARROW_ON:UP_ARROW_OFF
#define BOTCHAR cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF
	sprintf(folderselectstring, "Set Date/Time\n"
10040c74:	19bb      	adds	r3, r7, r6
10040c76:	781b      	ldrb	r3, [r3, #0]
10040c78:	2b00      	cmp	r3, #0
10040c7a:	d102      	bne.n	10040c82 <DrawSetTime+0x46>
10040c7c:	2302      	movs	r3, #2
10040c7e:	469c      	mov	ip, r3
10040c80:	e001      	b.n	10040c86 <DrawSetTime+0x4a>
10040c82:	2301      	movs	r3, #1
10040c84:	469c      	mov	ip, r3
10040c86:	230f      	movs	r3, #15
10040c88:	18fb      	adds	r3, r7, r3
10040c8a:	781b      	ldrb	r3, [r3, #0]
10040c8c:	2b01      	cmp	r3, #1
10040c8e:	d102      	bne.n	10040c96 <DrawSetTime+0x5a>
10040c90:	2302      	movs	r3, #2
10040c92:	4698      	mov	r8, r3
10040c94:	e001      	b.n	10040c9a <DrawSetTime+0x5e>
10040c96:	2301      	movs	r3, #1
10040c98:	4698      	mov	r8, r3
10040c9a:	230f      	movs	r3, #15
10040c9c:	18fb      	adds	r3, r7, r3
10040c9e:	781b      	ldrb	r3, [r3, #0]
10040ca0:	2b02      	cmp	r3, #2
10040ca2:	d101      	bne.n	10040ca8 <DrawSetTime+0x6c>
10040ca4:	2202      	movs	r2, #2
10040ca6:	e000      	b.n	10040caa <DrawSetTime+0x6e>
10040ca8:	2201      	movs	r2, #1
10040caa:	230f      	movs	r3, #15
10040cac:	18fb      	adds	r3, r7, r3
10040cae:	781b      	ldrb	r3, [r3, #0]
10040cb0:	2b03      	cmp	r3, #3
10040cb2:	d101      	bne.n	10040cb8 <DrawSetTime+0x7c>
10040cb4:	2102      	movs	r1, #2
10040cb6:	e000      	b.n	10040cba <DrawSetTime+0x7e>
10040cb8:	2101      	movs	r1, #1
10040cba:	230e      	movs	r3, #14
10040cbc:	18fb      	adds	r3, r7, r3
10040cbe:	781b      	ldrb	r3, [r3, #0]
10040cc0:	4699      	mov	r9, r3
10040cc2:	230d      	movs	r3, #13
10040cc4:	18fb      	adds	r3, r7, r3
10040cc6:	781b      	ldrb	r3, [r3, #0]
10040cc8:	469a      	mov	sl, r3
10040cca:	230c      	movs	r3, #12
10040ccc:	18fb      	adds	r3, r7, r3
10040cce:	781b      	ldrb	r3, [r3, #0]
10040cd0:	469b      	mov	fp, r3
10040cd2:	2388      	movs	r3, #136	@ 0x88
10040cd4:	2008      	movs	r0, #8
10040cd6:	181b      	adds	r3, r3, r0
10040cd8:	19db      	adds	r3, r3, r7
10040cda:	781b      	ldrb	r3, [r3, #0]
10040cdc:	60bb      	str	r3, [r7, #8]
10040cde:	230f      	movs	r3, #15
10040ce0:	18fb      	adds	r3, r7, r3
10040ce2:	781b      	ldrb	r3, [r3, #0]
10040ce4:	2b00      	cmp	r3, #0
10040ce6:	d101      	bne.n	10040cec <DrawSetTime+0xb0>
10040ce8:	2404      	movs	r4, #4
10040cea:	e000      	b.n	10040cee <DrawSetTime+0xb2>
10040cec:	2403      	movs	r4, #3
10040cee:	230f      	movs	r3, #15
10040cf0:	18fb      	adds	r3, r7, r3
10040cf2:	781b      	ldrb	r3, [r3, #0]
10040cf4:	2b01      	cmp	r3, #1
10040cf6:	d101      	bne.n	10040cfc <DrawSetTime+0xc0>
10040cf8:	2504      	movs	r5, #4
10040cfa:	e000      	b.n	10040cfe <DrawSetTime+0xc2>
10040cfc:	2503      	movs	r5, #3
10040cfe:	230f      	movs	r3, #15
10040d00:	18fb      	adds	r3, r7, r3
10040d02:	781b      	ldrb	r3, [r3, #0]
10040d04:	2b02      	cmp	r3, #2
10040d06:	d101      	bne.n	10040d0c <DrawSetTime+0xd0>
10040d08:	2604      	movs	r6, #4
10040d0a:	e000      	b.n	10040d0e <DrawSetTime+0xd2>
10040d0c:	2603      	movs	r6, #3
10040d0e:	230f      	movs	r3, #15
10040d10:	18fb      	adds	r3, r7, r3
10040d12:	781b      	ldrb	r3, [r3, #0]
10040d14:	2b03      	cmp	r3, #3
10040d16:	d102      	bne.n	10040d1e <DrawSetTime+0xe2>
10040d18:	2304      	movs	r3, #4
10040d1a:	603b      	str	r3, [r7, #0]
10040d1c:	e001      	b.n	10040d22 <DrawSetTime+0xe6>
10040d1e:	2303      	movs	r3, #3
10040d20:	603b      	str	r3, [r7, #0]
10040d22:	4817      	ldr	r0, [pc, #92]	@ (10040d80 <DrawSetTime+0x144>)
10040d24:	6078      	str	r0, [r7, #4]
10040d26:	2008      	movs	r0, #8
10040d28:	2308      	movs	r3, #8
10040d2a:	18c0      	adds	r0, r0, r3
10040d2c:	19c0      	adds	r0, r0, r7
10040d2e:	683b      	ldr	r3, [r7, #0]
10040d30:	9309      	str	r3, [sp, #36]	@ 0x24
10040d32:	9608      	str	r6, [sp, #32]
10040d34:	9507      	str	r5, [sp, #28]
10040d36:	9406      	str	r4, [sp, #24]
10040d38:	68bb      	ldr	r3, [r7, #8]
10040d3a:	9305      	str	r3, [sp, #20]
10040d3c:	465b      	mov	r3, fp
10040d3e:	9304      	str	r3, [sp, #16]
10040d40:	4653      	mov	r3, sl
10040d42:	9303      	str	r3, [sp, #12]
10040d44:	464b      	mov	r3, r9
10040d46:	9302      	str	r3, [sp, #8]
10040d48:	9101      	str	r1, [sp, #4]
10040d4a:	9200      	str	r2, [sp, #0]
10040d4c:	4643      	mov	r3, r8
10040d4e:	4662      	mov	r2, ip
10040d50:	6879      	ldr	r1, [r7, #4]
10040d52:	f025 fa89 	bl	10066268 <siprintf>
								"%.2d/%.2d %.2d:%.2d\n"
								" %c  %c  %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR,
								month, day, hour, minute,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
10040d56:	2000      	movs	r0, #0
10040d58:	f003 fda2 	bl	100448a0 <OledClear>
	OledDrawString(folderselectstring);
10040d5c:	2008      	movs	r0, #8
10040d5e:	2308      	movs	r3, #8
10040d60:	18c3      	adds	r3, r0, r3
10040d62:	19db      	adds	r3, r3, r7
10040d64:	0018      	movs	r0, r3
10040d66:	f003 fd51 	bl	1004480c <OledDrawString>
	OledUpdate();
10040d6a:	f003 fdcf 	bl	1004490c <OledUpdate>

}
10040d6e:	46c0      	nop			@ (mov r8, r8)
10040d70:	46bd      	mov	sp, r7
10040d72:	b01b      	add	sp, #108	@ 0x6c
10040d74:	bcf0      	pop	{r4, r5, r6, r7}
10040d76:	46bb      	mov	fp, r7
10040d78:	46b2      	mov	sl, r6
10040d7a:	46a9      	mov	r9, r5
10040d7c:	46a0      	mov	r8, r4
10040d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040d80:	100673d8 	.word	0x100673d8

10040d84 <DrawSchedule>:

void DrawSchedule(uint8_t cursor, uint8_t month, uint8_t day, uint8_t start, uint8_t end){
10040d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10040d86:	46de      	mov	lr, fp
10040d88:	4657      	mov	r7, sl
10040d8a:	464e      	mov	r6, r9
10040d8c:	4645      	mov	r5, r8
10040d8e:	b5e0      	push	{r5, r6, r7, lr}
10040d90:	b0b3      	sub	sp, #204	@ 0xcc
10040d92:	af10      	add	r7, sp, #64	@ 0x40
10040d94:	0005      	movs	r5, r0
10040d96:	000c      	movs	r4, r1
10040d98:	0010      	movs	r0, r2
10040d9a:	0019      	movs	r1, r3
10040d9c:	2627      	movs	r6, #39	@ 0x27
10040d9e:	19bb      	adds	r3, r7, r6
10040da0:	1c2a      	adds	r2, r5, #0
10040da2:	701a      	strb	r2, [r3, #0]
10040da4:	2326      	movs	r3, #38	@ 0x26
10040da6:	18fb      	adds	r3, r7, r3
10040da8:	1c22      	adds	r2, r4, #0
10040daa:	701a      	strb	r2, [r3, #0]
10040dac:	2325      	movs	r3, #37	@ 0x25
10040dae:	18fb      	adds	r3, r7, r3
10040db0:	1c02      	adds	r2, r0, #0
10040db2:	701a      	strb	r2, [r3, #0]
10040db4:	2024      	movs	r0, #36	@ 0x24
10040db6:	183b      	adds	r3, r7, r0
10040db8:	1c0a      	adds	r2, r1, #0
10040dba:	701a      	strb	r2, [r3, #0]
	char folderselectstring[92];
	uint8_t hour1 = (start&0b11111000)>>3;
10040dbc:	2367      	movs	r3, #103	@ 0x67
10040dbe:	2120      	movs	r1, #32
10040dc0:	185b      	adds	r3, r3, r1
10040dc2:	19db      	adds	r3, r3, r7
10040dc4:	183a      	adds	r2, r7, r0
10040dc6:	7812      	ldrb	r2, [r2, #0]
10040dc8:	08d2      	lsrs	r2, r2, #3
10040dca:	701a      	strb	r2, [r3, #0]
	uint8_t minute1 = ((start & 0b011)*15);
10040dcc:	183b      	adds	r3, r7, r0
10040dce:	781b      	ldrb	r3, [r3, #0]
10040dd0:	2203      	movs	r2, #3
10040dd2:	4013      	ands	r3, r2
10040dd4:	b2da      	uxtb	r2, r3
10040dd6:	2366      	movs	r3, #102	@ 0x66
10040dd8:	0008      	movs	r0, r1
10040dda:	185b      	adds	r3, r3, r1
10040ddc:	19db      	adds	r3, r3, r7
10040dde:	1c11      	adds	r1, r2, #0
10040de0:	0109      	lsls	r1, r1, #4
10040de2:	1a8a      	subs	r2, r1, r2
10040de4:	701a      	strb	r2, [r3, #0]
	uint8_t hour2 = (end&0b11111000)>>3;
10040de6:	2365      	movs	r3, #101	@ 0x65
10040de8:	181b      	adds	r3, r3, r0
10040dea:	19da      	adds	r2, r3, r7
10040dec:	2190      	movs	r1, #144	@ 0x90
10040dee:	180b      	adds	r3, r1, r0
10040df0:	19db      	adds	r3, r3, r7
10040df2:	781b      	ldrb	r3, [r3, #0]
10040df4:	08db      	lsrs	r3, r3, #3
10040df6:	7013      	strb	r3, [r2, #0]
	uint8_t minute2 = ((end & 0b011)*15);
10040df8:	180b      	adds	r3, r1, r0
10040dfa:	19db      	adds	r3, r3, r7
10040dfc:	781b      	ldrb	r3, [r3, #0]
10040dfe:	2203      	movs	r2, #3
10040e00:	4013      	ands	r3, r2
10040e02:	b2da      	uxtb	r2, r3
10040e04:	2364      	movs	r3, #100	@ 0x64
10040e06:	181b      	adds	r3, r3, r0
10040e08:	19db      	adds	r3, r3, r7
10040e0a:	1c11      	adds	r1, r2, #0
10040e0c:	0109      	lsls	r1, r1, #4
10040e0e:	1a8a      	subs	r2, r1, r2
10040e10:	701a      	strb	r2, [r3, #0]
	sprintf(folderselectstring, "Schedule time to play\n"
10040e12:	19bb      	adds	r3, r7, r6
10040e14:	781b      	ldrb	r3, [r3, #0]
10040e16:	2b00      	cmp	r3, #0
10040e18:	d102      	bne.n	10040e20 <DrawSchedule+0x9c>
10040e1a:	2302      	movs	r3, #2
10040e1c:	623b      	str	r3, [r7, #32]
10040e1e:	e001      	b.n	10040e24 <DrawSchedule+0xa0>
10040e20:	2301      	movs	r3, #1
10040e22:	623b      	str	r3, [r7, #32]
10040e24:	2327      	movs	r3, #39	@ 0x27
10040e26:	18fb      	adds	r3, r7, r3
10040e28:	781b      	ldrb	r3, [r3, #0]
10040e2a:	2b01      	cmp	r3, #1
10040e2c:	d102      	bne.n	10040e34 <DrawSchedule+0xb0>
10040e2e:	2302      	movs	r3, #2
10040e30:	61fb      	str	r3, [r7, #28]
10040e32:	e001      	b.n	10040e38 <DrawSchedule+0xb4>
10040e34:	2301      	movs	r3, #1
10040e36:	61fb      	str	r3, [r7, #28]
10040e38:	2327      	movs	r3, #39	@ 0x27
10040e3a:	18fb      	adds	r3, r7, r3
10040e3c:	781b      	ldrb	r3, [r3, #0]
10040e3e:	2b02      	cmp	r3, #2
10040e40:	d102      	bne.n	10040e48 <DrawSchedule+0xc4>
10040e42:	2302      	movs	r3, #2
10040e44:	4698      	mov	r8, r3
10040e46:	e001      	b.n	10040e4c <DrawSchedule+0xc8>
10040e48:	2301      	movs	r3, #1
10040e4a:	4698      	mov	r8, r3
10040e4c:	2327      	movs	r3, #39	@ 0x27
10040e4e:	18fb      	adds	r3, r7, r3
10040e50:	781b      	ldrb	r3, [r3, #0]
10040e52:	2b03      	cmp	r3, #3
10040e54:	d102      	bne.n	10040e5c <DrawSchedule+0xd8>
10040e56:	2302      	movs	r3, #2
10040e58:	4699      	mov	r9, r3
10040e5a:	e001      	b.n	10040e60 <DrawSchedule+0xdc>
10040e5c:	2301      	movs	r3, #1
10040e5e:	4699      	mov	r9, r3
10040e60:	2327      	movs	r3, #39	@ 0x27
10040e62:	18fb      	adds	r3, r7, r3
10040e64:	781b      	ldrb	r3, [r3, #0]
10040e66:	2b04      	cmp	r3, #4
10040e68:	d102      	bne.n	10040e70 <DrawSchedule+0xec>
10040e6a:	2302      	movs	r3, #2
10040e6c:	469a      	mov	sl, r3
10040e6e:	e001      	b.n	10040e74 <DrawSchedule+0xf0>
10040e70:	2301      	movs	r3, #1
10040e72:	469a      	mov	sl, r3
10040e74:	2327      	movs	r3, #39	@ 0x27
10040e76:	18fb      	adds	r3, r7, r3
10040e78:	781b      	ldrb	r3, [r3, #0]
10040e7a:	2b05      	cmp	r3, #5
10040e7c:	d102      	bne.n	10040e84 <DrawSchedule+0x100>
10040e7e:	2302      	movs	r3, #2
10040e80:	469b      	mov	fp, r3
10040e82:	e001      	b.n	10040e88 <DrawSchedule+0x104>
10040e84:	2301      	movs	r3, #1
10040e86:	469b      	mov	fp, r3
10040e88:	2326      	movs	r3, #38	@ 0x26
10040e8a:	18fb      	adds	r3, r7, r3
10040e8c:	781b      	ldrb	r3, [r3, #0]
10040e8e:	61bb      	str	r3, [r7, #24]
10040e90:	2325      	movs	r3, #37	@ 0x25
10040e92:	18fb      	adds	r3, r7, r3
10040e94:	781b      	ldrb	r3, [r3, #0]
10040e96:	617b      	str	r3, [r7, #20]
10040e98:	2367      	movs	r3, #103	@ 0x67
10040e9a:	2220      	movs	r2, #32
10040e9c:	189b      	adds	r3, r3, r2
10040e9e:	19db      	adds	r3, r3, r7
10040ea0:	781b      	ldrb	r3, [r3, #0]
10040ea2:	613b      	str	r3, [r7, #16]
10040ea4:	2366      	movs	r3, #102	@ 0x66
10040ea6:	189b      	adds	r3, r3, r2
10040ea8:	19db      	adds	r3, r3, r7
10040eaa:	781b      	ldrb	r3, [r3, #0]
10040eac:	60fb      	str	r3, [r7, #12]
10040eae:	2365      	movs	r3, #101	@ 0x65
10040eb0:	189b      	adds	r3, r3, r2
10040eb2:	19db      	adds	r3, r3, r7
10040eb4:	781b      	ldrb	r3, [r3, #0]
10040eb6:	60bb      	str	r3, [r7, #8]
10040eb8:	2364      	movs	r3, #100	@ 0x64
10040eba:	189b      	adds	r3, r3, r2
10040ebc:	19db      	adds	r3, r3, r7
10040ebe:	781b      	ldrb	r3, [r3, #0]
10040ec0:	607b      	str	r3, [r7, #4]
10040ec2:	2327      	movs	r3, #39	@ 0x27
10040ec4:	18fb      	adds	r3, r7, r3
10040ec6:	781b      	ldrb	r3, [r3, #0]
10040ec8:	2b00      	cmp	r3, #0
10040eca:	d102      	bne.n	10040ed2 <DrawSchedule+0x14e>
10040ecc:	2304      	movs	r3, #4
10040ece:	469c      	mov	ip, r3
10040ed0:	e001      	b.n	10040ed6 <DrawSchedule+0x152>
10040ed2:	2303      	movs	r3, #3
10040ed4:	469c      	mov	ip, r3
10040ed6:	2327      	movs	r3, #39	@ 0x27
10040ed8:	18fb      	adds	r3, r7, r3
10040eda:	781b      	ldrb	r3, [r3, #0]
10040edc:	2b01      	cmp	r3, #1
10040ede:	d101      	bne.n	10040ee4 <DrawSchedule+0x160>
10040ee0:	2604      	movs	r6, #4
10040ee2:	e000      	b.n	10040ee6 <DrawSchedule+0x162>
10040ee4:	2603      	movs	r6, #3
10040ee6:	2327      	movs	r3, #39	@ 0x27
10040ee8:	18fb      	adds	r3, r7, r3
10040eea:	781b      	ldrb	r3, [r3, #0]
10040eec:	2b02      	cmp	r3, #2
10040eee:	d101      	bne.n	10040ef4 <DrawSchedule+0x170>
10040ef0:	2504      	movs	r5, #4
10040ef2:	e000      	b.n	10040ef6 <DrawSchedule+0x172>
10040ef4:	2503      	movs	r5, #3
10040ef6:	2327      	movs	r3, #39	@ 0x27
10040ef8:	18fb      	adds	r3, r7, r3
10040efa:	781b      	ldrb	r3, [r3, #0]
10040efc:	2b03      	cmp	r3, #3
10040efe:	d101      	bne.n	10040f04 <DrawSchedule+0x180>
10040f00:	2404      	movs	r4, #4
10040f02:	e000      	b.n	10040f06 <DrawSchedule+0x182>
10040f04:	2403      	movs	r4, #3
10040f06:	2327      	movs	r3, #39	@ 0x27
10040f08:	18fb      	adds	r3, r7, r3
10040f0a:	781b      	ldrb	r3, [r3, #0]
10040f0c:	2b04      	cmp	r3, #4
10040f0e:	d101      	bne.n	10040f14 <DrawSchedule+0x190>
10040f10:	2204      	movs	r2, #4
10040f12:	e000      	b.n	10040f16 <DrawSchedule+0x192>
10040f14:	2203      	movs	r2, #3
10040f16:	2327      	movs	r3, #39	@ 0x27
10040f18:	18fb      	adds	r3, r7, r3
10040f1a:	781b      	ldrb	r3, [r3, #0]
10040f1c:	2b05      	cmp	r3, #5
10040f1e:	d101      	bne.n	10040f24 <DrawSchedule+0x1a0>
10040f20:	2304      	movs	r3, #4
10040f22:	e000      	b.n	10040f26 <DrawSchedule+0x1a2>
10040f24:	2303      	movs	r3, #3
10040f26:	491d      	ldr	r1, [pc, #116]	@ (10040f9c <DrawSchedule+0x218>)
10040f28:	6039      	str	r1, [r7, #0]
10040f2a:	2008      	movs	r0, #8
10040f2c:	2120      	movs	r1, #32
10040f2e:	1840      	adds	r0, r0, r1
10040f30:	19c0      	adds	r0, r0, r7
10040f32:	930f      	str	r3, [sp, #60]	@ 0x3c
10040f34:	920e      	str	r2, [sp, #56]	@ 0x38
10040f36:	940d      	str	r4, [sp, #52]	@ 0x34
10040f38:	950c      	str	r5, [sp, #48]	@ 0x30
10040f3a:	960b      	str	r6, [sp, #44]	@ 0x2c
10040f3c:	4663      	mov	r3, ip
10040f3e:	930a      	str	r3, [sp, #40]	@ 0x28
10040f40:	687b      	ldr	r3, [r7, #4]
10040f42:	9309      	str	r3, [sp, #36]	@ 0x24
10040f44:	68bb      	ldr	r3, [r7, #8]
10040f46:	9308      	str	r3, [sp, #32]
10040f48:	68fb      	ldr	r3, [r7, #12]
10040f4a:	9307      	str	r3, [sp, #28]
10040f4c:	693b      	ldr	r3, [r7, #16]
10040f4e:	9306      	str	r3, [sp, #24]
10040f50:	697b      	ldr	r3, [r7, #20]
10040f52:	9305      	str	r3, [sp, #20]
10040f54:	69bb      	ldr	r3, [r7, #24]
10040f56:	9304      	str	r3, [sp, #16]
10040f58:	465b      	mov	r3, fp
10040f5a:	9303      	str	r3, [sp, #12]
10040f5c:	4653      	mov	r3, sl
10040f5e:	9302      	str	r3, [sp, #8]
10040f60:	464b      	mov	r3, r9
10040f62:	9301      	str	r3, [sp, #4]
10040f64:	4643      	mov	r3, r8
10040f66:	9300      	str	r3, [sp, #0]
10040f68:	69fb      	ldr	r3, [r7, #28]
10040f6a:	6a3a      	ldr	r2, [r7, #32]
10040f6c:	6839      	ldr	r1, [r7, #0]
10040f6e:	f025 f97b 	bl	10066268 <siprintf>
								"%.2d/%.2d S:%.2d:%.2d E:%.2d:%.2d\n"
								" %c  %c    %c  %c    %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR, 4==TOPCHAR, 5==TOPCHAR,
								month, day , hour1, minute1, hour2, minute2,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR, 4==BOTCHAR, 5==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
10040f72:	2000      	movs	r0, #0
10040f74:	f003 fc94 	bl	100448a0 <OledClear>
	OledDrawString(folderselectstring);
10040f78:	2008      	movs	r0, #8
10040f7a:	2320      	movs	r3, #32
10040f7c:	18c3      	adds	r3, r0, r3
10040f7e:	19db      	adds	r3, r3, r7
10040f80:	0018      	movs	r0, r3
10040f82:	f003 fc43 	bl	1004480c <OledDrawString>
	OledUpdate();
10040f86:	f003 fcc1 	bl	1004490c <OledUpdate>

}
10040f8a:	46c0      	nop			@ (mov r8, r8)
10040f8c:	46bd      	mov	sp, r7
10040f8e:	b023      	add	sp, #140	@ 0x8c
10040f90:	bcf0      	pop	{r4, r5, r6, r7}
10040f92:	46bb      	mov	fp, r7
10040f94:	46b2      	mov	sl, r6
10040f96:	46a9      	mov	r9, r5
10040f98:	46a0      	mov	r8, r4
10040f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040f9c:	1006741c 	.word	0x1006741c

10040fa0 <ButtonsMenuSM_Event_Init>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t ButtonsMenuSM_Event_Init(FIFO Queue){
10040fa0:	b580      	push	{r7, lr}
10040fa2:	b082      	sub	sp, #8
10040fa4:	af00      	add	r7, sp, #0
10040fa6:	6078      	str	r0, [r7, #4]
    ButtonsMenuSMqueue = Queue;
10040fa8:	4b0d      	ldr	r3, [pc, #52]	@ (10040fe0 <ButtonsMenuSM_Event_Init+0x40>)
10040faa:	687a      	ldr	r2, [r7, #4]
10040fac:	601a      	str	r2, [r3, #0]
    BMState = main;
10040fae:	4b0d      	ldr	r3, [pc, #52]	@ (10040fe4 <ButtonsMenuSM_Event_Init+0x44>)
10040fb0:	2200      	movs	r2, #0
10040fb2:	701a      	strb	r2, [r3, #0]
    displayoff = 1;
10040fb4:	4b0c      	ldr	r3, [pc, #48]	@ (10040fe8 <ButtonsMenuSM_Event_Init+0x48>)
10040fb6:	2201      	movs	r2, #1
10040fb8:	701a      	strb	r2, [r3, #0]
    GPIO_Init();
10040fba:	f002 fa9b 	bl	100434f4 <GPIO_Init>
    I2C_Init();
10040fbe:	f002 fd3d 	bl	10043a3c <I2C_Init>
	TIMERS_Init();
10040fc2:	f003 fff1 	bl	10044fa8 <TIMERS_Init>
	OledInit();
10040fc6:	f003 fb35 	bl	10044634 <OledInit>
	BSP_LED_Init(LED_BLUE);
10040fca:	2000      	movs	r0, #0
10040fcc:	f005 f8a8 	bl	10046120 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
10040fd0:	2002      	movs	r0, #2
10040fd2:	f005 f8a5 	bl	10046120 <BSP_LED_Init>
    return INIT_OK;
10040fd6:	2301      	movs	r3, #1
}
10040fd8:	0018      	movs	r0, r3
10040fda:	46bd      	mov	sp, r7
10040fdc:	b002      	add	sp, #8
10040fde:	bd80      	pop	{r7, pc}
10040fe0:	20000398 	.word	0x20000398
10040fe4:	2000039c 	.word	0x2000039c
10040fe8:	2000039d 	.word	0x2000039d

10040fec <ButtonsMenuSM_Event_Post>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void ButtonsMenuSM_Event_Post(Event_t event){
10040fec:	b580      	push	{r7, lr}
10040fee:	b082      	sub	sp, #8
10040ff0:	af00      	add	r7, sp, #0
10040ff2:	1d3b      	adds	r3, r7, #4
10040ff4:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(ButtonsMenuSMqueue, event);
10040ff6:	4b05      	ldr	r3, [pc, #20]	@ (1004100c <ButtonsMenuSM_Event_Post+0x20>)
10040ff8:	681a      	ldr	r2, [r3, #0]
10040ffa:	1d3b      	adds	r3, r7, #4
10040ffc:	6819      	ldr	r1, [r3, #0]
10040ffe:	0010      	movs	r0, r2
10041000:	f001 fef9 	bl	10042df6 <FIFO_Enqueue>
}
10041004:	46c0      	nop			@ (mov r8, r8)
10041006:	46bd      	mov	sp, r7
10041008:	b002      	add	sp, #8
1004100a:	bd80      	pop	{r7, pc}
1004100c:	20000398 	.word	0x20000398

10041010 <ButtonsMenuSM_Event_Updater>:
 * @Function: ButtonsMenuSM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t ButtonsMenuSM_Event_Updater(void){
10041010:	b5b0      	push	{r4, r5, r7, lr}
10041012:	b084      	sub	sp, #16
10041014:	af00      	add	r7, sp, #0
    static uint32_t debounce = 0;
    static uint8_t lastbuttons = 0xFF;
    static uint32_t timer = 0;
    static uint8_t timeractive = 0;

    Event_t event = (Event_t){EVENT_NONE, 0};
10041016:	1d3b      	adds	r3, r7, #4
10041018:	2200      	movs	r2, #0
1004101a:	701a      	strb	r2, [r3, #0]
1004101c:	1d3b      	adds	r3, r7, #4
1004101e:	2200      	movs	r2, #0
10041020:	805a      	strh	r2, [r3, #2]

    uint8_t currbuttons = GPIO_ReadButtons();
10041022:	250f      	movs	r5, #15
10041024:	197c      	adds	r4, r7, r5
10041026:	f002 faa7 	bl	10043578 <GPIO_ReadButtons>
1004102a:	0003      	movs	r3, r0
1004102c:	7023      	strb	r3, [r4, #0]

    if(currbuttons != lastbuttons && (debounce + DEBOUNCETIME < TIMERS_GetMilliSeconds())){
1004102e:	4b34      	ldr	r3, [pc, #208]	@ (10041100 <ButtonsMenuSM_Event_Updater+0xf0>)
10041030:	781b      	ldrb	r3, [r3, #0]
10041032:	197a      	adds	r2, r7, r5
10041034:	7812      	ldrb	r2, [r2, #0]
10041036:	429a      	cmp	r2, r3
10041038:	d02f      	beq.n	1004109a <ButtonsMenuSM_Event_Updater+0x8a>
1004103a:	4b32      	ldr	r3, [pc, #200]	@ (10041104 <ButtonsMenuSM_Event_Updater+0xf4>)
1004103c:	681b      	ldr	r3, [r3, #0]
1004103e:	3332      	adds	r3, #50	@ 0x32
10041040:	001c      	movs	r4, r3
10041042:	f003 fffd 	bl	10045040 <TIMERS_GetMilliSeconds>
10041046:	0003      	movs	r3, r0
10041048:	429c      	cmp	r4, r3
1004104a:	d226      	bcs.n	1004109a <ButtonsMenuSM_Event_Updater+0x8a>
    	event.status = EVENT_BUTTONS;
1004104c:	1d3b      	adds	r3, r7, #4
1004104e:	2204      	movs	r2, #4
10041050:	701a      	strb	r2, [r3, #0]
    	event.data = (((uint16_t)currbuttons ^ (uint16_t)lastbuttons) << 8) + (uint16_t)currbuttons;
10041052:	4b2b      	ldr	r3, [pc, #172]	@ (10041100 <ButtonsMenuSM_Event_Updater+0xf0>)
10041054:	781a      	ldrb	r2, [r3, #0]
10041056:	197b      	adds	r3, r7, r5
10041058:	781b      	ldrb	r3, [r3, #0]
1004105a:	4053      	eors	r3, r2
1004105c:	b2db      	uxtb	r3, r3
1004105e:	021b      	lsls	r3, r3, #8
10041060:	b29a      	uxth	r2, r3
10041062:	197b      	adds	r3, r7, r5
10041064:	781b      	ldrb	r3, [r3, #0]
10041066:	b29b      	uxth	r3, r3
10041068:	18d3      	adds	r3, r2, r3
1004106a:	b29a      	uxth	r2, r3
1004106c:	1d3b      	adds	r3, r7, #4
1004106e:	805a      	strh	r2, [r3, #2]
    	lastbuttons = currbuttons;
10041070:	4b23      	ldr	r3, [pc, #140]	@ (10041100 <ButtonsMenuSM_Event_Updater+0xf0>)
10041072:	197a      	adds	r2, r7, r5
10041074:	7812      	ldrb	r2, [r2, #0]
10041076:	701a      	strb	r2, [r3, #0]
    	debounce = TIMERS_GetMilliSeconds();
10041078:	f003 ffe2 	bl	10045040 <TIMERS_GetMilliSeconds>
1004107c:	0002      	movs	r2, r0
1004107e:	4b21      	ldr	r3, [pc, #132]	@ (10041104 <ButtonsMenuSM_Event_Updater+0xf4>)
10041080:	601a      	str	r2, [r3, #0]
    	timer = TIMERS_GetMilliSeconds();//delay the sleep timer
10041082:	f003 ffdd 	bl	10045040 <TIMERS_GetMilliSeconds>
10041086:	0002      	movs	r2, r0
10041088:	4b1f      	ldr	r3, [pc, #124]	@ (10041108 <ButtonsMenuSM_Event_Updater+0xf8>)
1004108a:	601a      	str	r2, [r3, #0]
    	timeractive = 1;
1004108c:	4b1f      	ldr	r3, [pc, #124]	@ (1004110c <ButtonsMenuSM_Event_Updater+0xfc>)
1004108e:	2201      	movs	r2, #1
10041090:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
10041092:	1d3b      	adds	r3, r7, #4
10041094:	6818      	ldr	r0, [r3, #0]
10041096:	f7ff ffa9 	bl	10040fec <ButtonsMenuSM_Event_Post>
    }
    if(timeractive & (timer+SLEEPTIMER < TIMERS_GetMilliSeconds())){
1004109a:	4b1c      	ldr	r3, [pc, #112]	@ (1004110c <ButtonsMenuSM_Event_Updater+0xfc>)
1004109c:	781b      	ldrb	r3, [r3, #0]
1004109e:	001d      	movs	r5, r3
100410a0:	4b19      	ldr	r3, [pc, #100]	@ (10041108 <ButtonsMenuSM_Event_Updater+0xf8>)
100410a2:	681b      	ldr	r3, [r3, #0]
100410a4:	4a1a      	ldr	r2, [pc, #104]	@ (10041110 <ButtonsMenuSM_Event_Updater+0x100>)
100410a6:	189c      	adds	r4, r3, r2
100410a8:	f003 ffca 	bl	10045040 <TIMERS_GetMilliSeconds>
100410ac:	0003      	movs	r3, r0
100410ae:	429c      	cmp	r4, r3
100410b0:	419b      	sbcs	r3, r3
100410b2:	425b      	negs	r3, r3
100410b4:	b2db      	uxtb	r3, r3
100410b6:	402b      	ands	r3, r5
100410b8:	d00c      	beq.n	100410d4 <ButtonsMenuSM_Event_Updater+0xc4>
    	event.status = EVENT_TIMEOUT;
100410ba:	1d3b      	adds	r3, r7, #4
100410bc:	2209      	movs	r2, #9
100410be:	701a      	strb	r2, [r3, #0]
    	event.data = 0;
100410c0:	1d3b      	adds	r3, r7, #4
100410c2:	2200      	movs	r2, #0
100410c4:	805a      	strh	r2, [r3, #2]
    	timeractive = 0;// disable sleep timer until next button press
100410c6:	4b11      	ldr	r3, [pc, #68]	@ (1004110c <ButtonsMenuSM_Event_Updater+0xfc>)
100410c8:	2200      	movs	r2, #0
100410ca:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
100410cc:	1d3b      	adds	r3, r7, #4
100410ce:	6818      	ldr	r0, [r3, #0]
100410d0:	f7ff ff8c 	bl	10040fec <ButtonsMenuSM_Event_Post>

    }
    return event;
100410d4:	2108      	movs	r1, #8
100410d6:	187b      	adds	r3, r7, r1
100410d8:	1d3a      	adds	r2, r7, #4
100410da:	6812      	ldr	r2, [r2, #0]
100410dc:	601a      	str	r2, [r3, #0]
100410de:	187a      	adds	r2, r7, r1
100410e0:	2300      	movs	r3, #0
100410e2:	8811      	ldrh	r1, [r2, #0]
100410e4:	0409      	lsls	r1, r1, #16
100410e6:	0c09      	lsrs	r1, r1, #16
100410e8:	0c1b      	lsrs	r3, r3, #16
100410ea:	041b      	lsls	r3, r3, #16
100410ec:	430b      	orrs	r3, r1
100410ee:	8852      	ldrh	r2, [r2, #2]
100410f0:	0412      	lsls	r2, r2, #16
100410f2:	041b      	lsls	r3, r3, #16
100410f4:	0c1b      	lsrs	r3, r3, #16
100410f6:	4313      	orrs	r3, r2
}
100410f8:	0018      	movs	r0, r3
100410fa:	46bd      	mov	sp, r7
100410fc:	b004      	add	sp, #16
100410fe:	bdb0      	pop	{r4, r5, r7, pc}
10041100:	2000260c 	.word	0x2000260c
10041104:	200003a8 	.word	0x200003a8
10041108:	200003ac 	.word	0x200003ac
1004110c:	200003b0 	.word	0x200003b0
10041110:	00007530 	.word	0x00007530

10041114 <ButtonsMenuSM_Event_Handler>:
 * @Function: ButtonsMenuSM_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t ButtonsMenuSM_Event_Handler(Event_t event){
10041114:	b590      	push	{r4, r7, lr}
10041116:	b08d      	sub	sp, #52	@ 0x34
10041118:	af02      	add	r7, sp, #8
1004111a:	1d3b      	adds	r3, r7, #4
1004111c:	6018      	str	r0, [r3, #0]
	uint8_t transition = 0;
1004111e:	2327      	movs	r3, #39	@ 0x27
10041120:	18fb      	adds	r3, r7, r3
10041122:	2200      	movs	r2, #0
10041124:	701a      	strb	r2, [r3, #0]
	ButtonsMenuStates_t nextstate = BMState;
10041126:	2326      	movs	r3, #38	@ 0x26
10041128:	18fb      	adds	r3, r7, r3
1004112a:	4ac4      	ldr	r2, [pc, #784]	@ (1004143c <ButtonsMenuSM_Event_Handler+0x328>)
1004112c:	7812      	ldrb	r2, [r2, #0]
1004112e:	701a      	strb	r2, [r3, #0]
	if(event.status == EVENT_TIMEOUT){
10041130:	1d3b      	adds	r3, r7, #4
10041132:	781b      	ldrb	r3, [r3, #0]
10041134:	b25b      	sxtb	r3, r3
10041136:	2b09      	cmp	r3, #9
10041138:	d104      	bne.n	10041144 <ButtonsMenuSM_Event_Handler+0x30>
		displayoff = 1;
1004113a:	4bc1      	ldr	r3, [pc, #772]	@ (10041440 <ButtonsMenuSM_Event_Handler+0x32c>)
1004113c:	2201      	movs	r2, #1
1004113e:	701a      	strb	r2, [r3, #0]
		OledOff();
10041140:	f003 fbdd 	bl	100448fe <OledOff>
	}
	if(displayoff){
10041144:	4bbe      	ldr	r3, [pc, #760]	@ (10041440 <ButtonsMenuSM_Event_Handler+0x32c>)
10041146:	781b      	ldrb	r3, [r3, #0]
10041148:	2b00      	cmp	r3, #0
1004114a:	d015      	beq.n	10041178 <ButtonsMenuSM_Event_Handler+0x64>
		if(event.status == EVENT_BUTTONS){
1004114c:	1d3b      	adds	r3, r7, #4
1004114e:	781b      	ldrb	r3, [r3, #0]
10041150:	b25b      	sxtb	r3, r3
10041152:	2b04      	cmp	r3, #4
10041154:	d001      	beq.n	1004115a <ButtonsMenuSM_Event_Handler+0x46>
10041156:	f001 f97a 	bl	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			displayoff = 0;
1004115a:	4bb9      	ldr	r3, [pc, #740]	@ (10041440 <ButtonsMenuSM_Event_Handler+0x32c>)
1004115c:	2200      	movs	r2, #0
1004115e:	701a      	strb	r2, [r3, #0]
			nextstate = main;
10041160:	2326      	movs	r3, #38	@ 0x26
10041162:	18fb      	adds	r3, r7, r3
10041164:	2200      	movs	r2, #0
10041166:	701a      	strb	r2, [r3, #0]
			transition = 1;
10041168:	2327      	movs	r3, #39	@ 0x27
1004116a:	18fb      	adds	r3, r7, r3
1004116c:	2201      	movs	r2, #1
1004116e:	701a      	strb	r2, [r3, #0]
			OledOn();
10041170:	f003 fbbe 	bl	100448f0 <OledOn>
10041174:	f001 f96b 	bl	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
		}
	} else {

		switch (BMState){
10041178:	4bb0      	ldr	r3, [pc, #704]	@ (1004143c <ButtonsMenuSM_Event_Handler+0x328>)
1004117a:	781b      	ldrb	r3, [r3, #0]
1004117c:	2b05      	cmp	r3, #5
1004117e:	d901      	bls.n	10041184 <ButtonsMenuSM_Event_Handler+0x70>
10041180:	f001 f958 	bl	10042434 <ButtonsMenuSM_Event_Handler+0x1320>
10041184:	009a      	lsls	r2, r3, #2
10041186:	4baf      	ldr	r3, [pc, #700]	@ (10041444 <ButtonsMenuSM_Event_Handler+0x330>)
10041188:	18d3      	adds	r3, r2, r3
1004118a:	681b      	ldr	r3, [r3, #0]
1004118c:	469f      	mov	pc, r3
		case main:
			if(event.status == EVENT_ENTRY){
1004118e:	1d3b      	adds	r3, r7, #4
10041190:	781b      	ldrb	r3, [r3, #0]
10041192:	b25b      	sxtb	r3, r3
10041194:	2b02      	cmp	r3, #2
10041196:	d101      	bne.n	1004119c <ButtonsMenuSM_Event_Handler+0x88>
				DrawMain();
10041198:	f7ff fc78 	bl	10040a8c <DrawMain>
			}
			if(event.status == EVENT_BUTTONS){
1004119c:	1d3b      	adds	r3, r7, #4
1004119e:	781b      	ldrb	r3, [r3, #0]
100411a0:	b25b      	sxtb	r3, r3
100411a2:	2b04      	cmp	r3, #4
100411a4:	d001      	beq.n	100411aa <ButtonsMenuSM_Event_Handler+0x96>
100411a6:	f001 f947 	bl	10042438 <ButtonsMenuSM_Event_Handler+0x1324>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
100411aa:	1d3b      	adds	r3, r7, #4
100411ac:	885b      	ldrh	r3, [r3, #2]
100411ae:	001a      	movs	r2, r3
100411b0:	2380      	movs	r3, #128	@ 0x80
100411b2:	005b      	lsls	r3, r3, #1
100411b4:	4013      	ands	r3, r2
100411b6:	d014      	beq.n	100411e2 <ButtonsMenuSM_Event_Handler+0xce>
100411b8:	1d3b      	adds	r3, r7, #4
100411ba:	885b      	ldrh	r3, [r3, #2]
100411bc:	001a      	movs	r2, r3
100411be:	2301      	movs	r3, #1
100411c0:	4013      	ands	r3, r2
100411c2:	d10e      	bne.n	100411e2 <ButtonsMenuSM_Event_Handler+0xce>
					//discountprintf("moving to folder control");
					nextstate = folderControl;
100411c4:	2326      	movs	r3, #38	@ 0x26
100411c6:	18fb      	adds	r3, r7, r3
100411c8:	2201      	movs	r2, #1
100411ca:	701a      	strb	r2, [r3, #0]
					transition = 1;
100411cc:	2327      	movs	r3, #39	@ 0x27
100411ce:	18fb      	adds	r3, r7, r3
100411d0:	2201      	movs	r2, #1
100411d2:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
100411d4:	4b9c      	ldr	r3, [pc, #624]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
100411d6:	2200      	movs	r2, #0
100411d8:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
100411da:	4b9c      	ldr	r3, [pc, #624]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
100411dc:	2200      	movs	r2, #0
100411de:	701a      	strb	r2, [r3, #0]
100411e0:	e0a0      	b.n	10041324 <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100411e2:	1d3b      	adds	r3, r7, #4
100411e4:	885b      	ldrh	r3, [r3, #2]
100411e6:	001a      	movs	r2, r3
100411e8:	2380      	movs	r3, #128	@ 0x80
100411ea:	009b      	lsls	r3, r3, #2
100411ec:	4013      	ands	r3, r2
100411ee:	d020      	beq.n	10041232 <ButtonsMenuSM_Event_Handler+0x11e>
100411f0:	1d3b      	adds	r3, r7, #4
100411f2:	885b      	ldrh	r3, [r3, #2]
100411f4:	001a      	movs	r2, r3
100411f6:	2302      	movs	r3, #2
100411f8:	4013      	ands	r3, r2
100411fa:	d11a      	bne.n	10041232 <ButtonsMenuSM_Event_Handler+0x11e>
					//discountprintf("moving to schedule day");
					nextstate = scheduleTime;
100411fc:	2326      	movs	r3, #38	@ 0x26
100411fe:	18fb      	adds	r3, r7, r3
10041200:	2202      	movs	r2, #2
10041202:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041204:	2327      	movs	r3, #39	@ 0x27
10041206:	18fb      	adds	r3, r7, r3
10041208:	2201      	movs	r2, #1
1004120a:	701a      	strb	r2, [r3, #0]
					monthselect = 0;
1004120c:	4b90      	ldr	r3, [pc, #576]	@ (10041450 <ButtonsMenuSM_Event_Handler+0x33c>)
1004120e:	2200      	movs	r2, #0
10041210:	701a      	strb	r2, [r3, #0]
					dayselect = 0;
10041212:	4b90      	ldr	r3, [pc, #576]	@ (10041454 <ButtonsMenuSM_Event_Handler+0x340>)
10041214:	2200      	movs	r2, #0
10041216:	701a      	strb	r2, [r3, #0]
					Stimeselect = 0;
10041218:	4b8f      	ldr	r3, [pc, #572]	@ (10041458 <ButtonsMenuSM_Event_Handler+0x344>)
1004121a:	2200      	movs	r2, #0
1004121c:	701a      	strb	r2, [r3, #0]
					Etimeselect = 0;
1004121e:	4b8f      	ldr	r3, [pc, #572]	@ (1004145c <ButtonsMenuSM_Event_Handler+0x348>)
10041220:	2200      	movs	r2, #0
10041222:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10041224:	4b88      	ldr	r3, [pc, #544]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
10041226:	2200      	movs	r2, #0
10041228:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
1004122a:	4b88      	ldr	r3, [pc, #544]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
1004122c:	2200      	movs	r2, #0
1004122e:	701a      	strb	r2, [r3, #0]
10041230:	e078      	b.n	10041324 <ButtonsMenuSM_Event_Handler+0x210>

				}else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10041232:	1d3b      	adds	r3, r7, #4
10041234:	885b      	ldrh	r3, [r3, #2]
10041236:	001a      	movs	r2, r3
10041238:	2380      	movs	r3, #128	@ 0x80
1004123a:	00db      	lsls	r3, r3, #3
1004123c:	4013      	ands	r3, r2
1004123e:	d00e      	beq.n	1004125e <ButtonsMenuSM_Event_Handler+0x14a>
10041240:	1d3b      	adds	r3, r7, #4
10041242:	885b      	ldrh	r3, [r3, #2]
10041244:	001a      	movs	r2, r3
10041246:	2304      	movs	r3, #4
10041248:	4013      	ands	r3, r2
1004124a:	d108      	bne.n	1004125e <ButtonsMenuSM_Event_Handler+0x14a>
					//discountprintf("incrementing volume");
					nextstate = setTime;
1004124c:	2326      	movs	r3, #38	@ 0x26
1004124e:	18fb      	adds	r3, r7, r3
10041250:	2204      	movs	r2, #4
10041252:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041254:	2327      	movs	r3, #39	@ 0x27
10041256:	18fb      	adds	r3, r7, r3
10041258:	2201      	movs	r2, #1
1004125a:	701a      	strb	r2, [r3, #0]
1004125c:	e062      	b.n	10041324 <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004125e:	1d3b      	adds	r3, r7, #4
10041260:	885b      	ldrh	r3, [r3, #2]
10041262:	001a      	movs	r2, r3
10041264:	2380      	movs	r3, #128	@ 0x80
10041266:	011b      	lsls	r3, r3, #4
10041268:	4013      	ands	r3, r2
1004126a:	d00e      	beq.n	1004128a <ButtonsMenuSM_Event_Handler+0x176>
1004126c:	1d3b      	adds	r3, r7, #4
1004126e:	885b      	ldrh	r3, [r3, #2]
10041270:	001a      	movs	r2, r3
10041272:	2308      	movs	r3, #8
10041274:	4013      	ands	r3, r2
10041276:	d108      	bne.n	1004128a <ButtonsMenuSM_Event_Handler+0x176>
					//discountprintf("moving to options");
					nextstate = options;
10041278:	2326      	movs	r3, #38	@ 0x26
1004127a:	18fb      	adds	r3, r7, r3
1004127c:	2205      	movs	r2, #5
1004127e:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041280:	2327      	movs	r3, #39	@ 0x27
10041282:	18fb      	adds	r3, r7, r3
10041284:	2201      	movs	r2, #1
10041286:	701a      	strb	r2, [r3, #0]
10041288:	e04c      	b.n	10041324 <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
1004128a:	1d3b      	adds	r3, r7, #4
1004128c:	885b      	ldrh	r3, [r3, #2]
1004128e:	001a      	movs	r2, r3
10041290:	2380      	movs	r3, #128	@ 0x80
10041292:	015b      	lsls	r3, r3, #5
10041294:	4013      	ands	r3, r2
10041296:	d01a      	beq.n	100412ce <ButtonsMenuSM_Event_Handler+0x1ba>
10041298:	1d3b      	adds	r3, r7, #4
1004129a:	885b      	ldrh	r3, [r3, #2]
1004129c:	001a      	movs	r2, r3
1004129e:	2310      	movs	r3, #16
100412a0:	4013      	ands	r3, r2
100412a2:	d114      	bne.n	100412ce <ButtonsMenuSM_Event_Handler+0x1ba>
					//discountprintf("decrementing volume");
					uint8_t vol = FLASH_GetVolume()-1;
100412a4:	f001 fefe 	bl	100430a4 <FLASH_GetVolume>
100412a8:	0003      	movs	r3, r0
100412aa:	001a      	movs	r2, r3
100412ac:	2421      	movs	r4, #33	@ 0x21
100412ae:	193b      	adds	r3, r7, r4
100412b0:	3a01      	subs	r2, #1
100412b2:	701a      	strb	r2, [r3, #0]
					if(vol >= 0){
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
100412b4:	f001 ff0c 	bl	100430d0 <FLASH_GetDutyCycle>
100412b8:	0003      	movs	r3, r0
100412ba:	001a      	movs	r2, r3
100412bc:	193b      	adds	r3, r7, r4
100412be:	781b      	ldrb	r3, [r3, #0]
100412c0:	0011      	movs	r1, r2
100412c2:	0018      	movs	r0, r3
100412c4:	f001 feac 	bl	10043020 <FLASH_SetDCVol>
					}
					DrawMain();
100412c8:	f7ff fbe0 	bl	10040a8c <DrawMain>
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100412cc:	e02a      	b.n	10041324 <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100412ce:	1d3b      	adds	r3, r7, #4
100412d0:	885b      	ldrh	r3, [r3, #2]
100412d2:	001a      	movs	r2, r3
100412d4:	2380      	movs	r3, #128	@ 0x80
100412d6:	019b      	lsls	r3, r3, #6
100412d8:	4013      	ands	r3, r2
100412da:	d101      	bne.n	100412e0 <ButtonsMenuSM_Event_Handler+0x1cc>
100412dc:	f001 f8ac 	bl	10042438 <ButtonsMenuSM_Event_Handler+0x1324>
100412e0:	1d3b      	adds	r3, r7, #4
100412e2:	885b      	ldrh	r3, [r3, #2]
100412e4:	001a      	movs	r2, r3
100412e6:	2320      	movs	r3, #32
100412e8:	4013      	ands	r3, r2
100412ea:	d001      	beq.n	100412f0 <ButtonsMenuSM_Event_Handler+0x1dc>
100412ec:	f001 f8a4 	bl	10042438 <ButtonsMenuSM_Event_Handler+0x1324>
					//discountprintf("moving to set Time");
					uint8_t vol = FLASH_GetVolume()+1;
100412f0:	f001 fed8 	bl	100430a4 <FLASH_GetVolume>
100412f4:	0003      	movs	r3, r0
100412f6:	001a      	movs	r2, r3
100412f8:	2420      	movs	r4, #32
100412fa:	193b      	adds	r3, r7, r4
100412fc:	3201      	adds	r2, #1
100412fe:	701a      	strb	r2, [r3, #0]
					if(vol <= 100){
10041300:	193b      	adds	r3, r7, r4
10041302:	781b      	ldrb	r3, [r3, #0]
10041304:	2b64      	cmp	r3, #100	@ 0x64
10041306:	d809      	bhi.n	1004131c <ButtonsMenuSM_Event_Handler+0x208>
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
10041308:	f001 fee2 	bl	100430d0 <FLASH_GetDutyCycle>
1004130c:	0003      	movs	r3, r0
1004130e:	001a      	movs	r2, r3
10041310:	193b      	adds	r3, r7, r4
10041312:	781b      	ldrb	r3, [r3, #0]
10041314:	0011      	movs	r1, r2
10041316:	0018      	movs	r0, r3
10041318:	f001 fe82 	bl	10043020 <FLASH_SetDCVol>
					}
					DrawMain();
1004131c:	f7ff fbb6 	bl	10040a8c <DrawMain>

				}

			}
			break;
10041320:	f001 f88a 	bl	10042438 <ButtonsMenuSM_Event_Handler+0x1324>
10041324:	f001 f888 	bl	10042438 <ButtonsMenuSM_Event_Handler+0x1324>
		case folderControl:
			if(event.status == EVENT_ENTRY){
10041328:	1d3b      	adds	r3, r7, #4
1004132a:	781b      	ldrb	r3, [r3, #0]
1004132c:	b25b      	sxtb	r3, r3
1004132e:	2b02      	cmp	r3, #2
10041330:	d10b      	bne.n	1004134a <ButtonsMenuSM_Event_Handler+0x236>
				cursorpos = 0;
10041332:	4b4b      	ldr	r3, [pc, #300]	@ (10041460 <ButtonsMenuSM_Event_Handler+0x34c>)
10041334:	2200      	movs	r2, #0
10041336:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10041338:	4b49      	ldr	r3, [pc, #292]	@ (10041460 <ButtonsMenuSM_Event_Handler+0x34c>)
1004133a:	7818      	ldrb	r0, [r3, #0]
1004133c:	4b42      	ldr	r3, [pc, #264]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
1004133e:	7819      	ldrb	r1, [r3, #0]
10041340:	4b42      	ldr	r3, [pc, #264]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
10041342:	781b      	ldrb	r3, [r3, #0]
10041344:	001a      	movs	r2, r3
10041346:	f7ff fbd1 	bl	10040aec <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
1004134a:	1d3b      	adds	r3, r7, #4
1004134c:	781b      	ldrb	r3, [r3, #0]
1004134e:	b25b      	sxtb	r3, r3
10041350:	2b04      	cmp	r3, #4
10041352:	d001      	beq.n	10041358 <ButtonsMenuSM_Event_Handler+0x244>
10041354:	f001 f872 	bl	1004243c <ButtonsMenuSM_Event_Handler+0x1328>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10041358:	1d3b      	adds	r3, r7, #4
1004135a:	885b      	ldrh	r3, [r3, #2]
1004135c:	001a      	movs	r2, r3
1004135e:	2380      	movs	r3, #128	@ 0x80
10041360:	005b      	lsls	r3, r3, #1
10041362:	4013      	ands	r3, r2
10041364:	d00e      	beq.n	10041384 <ButtonsMenuSM_Event_Handler+0x270>
10041366:	1d3b      	adds	r3, r7, #4
10041368:	885b      	ldrh	r3, [r3, #2]
1004136a:	001a      	movs	r2, r3
1004136c:	2301      	movs	r3, #1
1004136e:	4013      	ands	r3, r2
10041370:	d108      	bne.n	10041384 <ButtonsMenuSM_Event_Handler+0x270>
					//discountprintf("moving to main, back");
					nextstate = main;
10041372:	2326      	movs	r3, #38	@ 0x26
10041374:	18fb      	adds	r3, r7, r3
10041376:	2200      	movs	r2, #0
10041378:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004137a:	2327      	movs	r3, #39	@ 0x27
1004137c:	18fb      	adds	r3, r7, r3
1004137e:	2201      	movs	r2, #1
10041380:	701a      	strb	r2, [r3, #0]
10041382:	e0e9      	b.n	10041558 <ButtonsMenuSM_Event_Handler+0x444>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10041384:	1d3b      	adds	r3, r7, #4
10041386:	885b      	ldrh	r3, [r3, #2]
10041388:	001a      	movs	r2, r3
1004138a:	2380      	movs	r3, #128	@ 0x80
1004138c:	009b      	lsls	r3, r3, #2
1004138e:	4013      	ands	r3, r2
10041390:	d020      	beq.n	100413d4 <ButtonsMenuSM_Event_Handler+0x2c0>
10041392:	1d3b      	adds	r3, r7, #4
10041394:	885b      	ldrh	r3, [r3, #2]
10041396:	001a      	movs	r2, r3
10041398:	2302      	movs	r3, #2
1004139a:	4013      	ands	r3, r2
1004139c:	d11a      	bne.n	100413d4 <ButtonsMenuSM_Event_Handler+0x2c0>
					MP3_Event_Post(((Event_t){EVENT_PLAY, ((folderselect)<<8) + (trackselect)}));
1004139e:	211c      	movs	r1, #28
100413a0:	187b      	adds	r3, r7, r1
100413a2:	220b      	movs	r2, #11
100413a4:	701a      	strb	r2, [r3, #0]
100413a6:	4b28      	ldr	r3, [pc, #160]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
100413a8:	781b      	ldrb	r3, [r3, #0]
100413aa:	021b      	lsls	r3, r3, #8
100413ac:	b29b      	uxth	r3, r3
100413ae:	4a27      	ldr	r2, [pc, #156]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
100413b0:	7812      	ldrb	r2, [r2, #0]
100413b2:	189b      	adds	r3, r3, r2
100413b4:	b29a      	uxth	r2, r3
100413b6:	187b      	adds	r3, r7, r1
100413b8:	805a      	strh	r2, [r3, #2]
100413ba:	187b      	adds	r3, r7, r1
100413bc:	6818      	ldr	r0, [r3, #0]
100413be:	f002 fe0d 	bl	10043fdc <MP3_Event_Post>
					//discountprintf("moving to main, select");
					nextstate = main;
100413c2:	2326      	movs	r3, #38	@ 0x26
100413c4:	18fb      	adds	r3, r7, r3
100413c6:	2200      	movs	r2, #0
100413c8:	701a      	strb	r2, [r3, #0]
					transition = 1;
100413ca:	2327      	movs	r3, #39	@ 0x27
100413cc:	18fb      	adds	r3, r7, r3
100413ce:	2201      	movs	r2, #1
100413d0:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100413d2:	e0c1      	b.n	10041558 <ButtonsMenuSM_Event_Handler+0x444>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100413d4:	1d3b      	adds	r3, r7, #4
100413d6:	885b      	ldrh	r3, [r3, #2]
100413d8:	001a      	movs	r2, r3
100413da:	2380      	movs	r3, #128	@ 0x80
100413dc:	00db      	lsls	r3, r3, #3
100413de:	4013      	ands	r3, r2
100413e0:	d040      	beq.n	10041464 <ButtonsMenuSM_Event_Handler+0x350>
100413e2:	1d3b      	adds	r3, r7, #4
100413e4:	885b      	ldrh	r3, [r3, #2]
100413e6:	001a      	movs	r2, r3
100413e8:	2304      	movs	r3, #4
100413ea:	4013      	ands	r3, r2
100413ec:	d13a      	bne.n	10041464 <ButtonsMenuSM_Event_Handler+0x350>
					if(!cursorpos){
100413ee:	4b1c      	ldr	r3, [pc, #112]	@ (10041460 <ButtonsMenuSM_Event_Handler+0x34c>)
100413f0:	781b      	ldrb	r3, [r3, #0]
100413f2:	2b00      	cmp	r3, #0
100413f4:	d10d      	bne.n	10041412 <ButtonsMenuSM_Event_Handler+0x2fe>
						folderselect--;
100413f6:	4b14      	ldr	r3, [pc, #80]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
100413f8:	781b      	ldrb	r3, [r3, #0]
100413fa:	3b01      	subs	r3, #1
100413fc:	b2da      	uxtb	r2, r3
100413fe:	4b12      	ldr	r3, [pc, #72]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
10041400:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10041402:	4b11      	ldr	r3, [pc, #68]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
10041404:	781b      	ldrb	r3, [r3, #0]
10041406:	2bff      	cmp	r3, #255	@ 0xff
10041408:	d10d      	bne.n	10041426 <ButtonsMenuSM_Event_Handler+0x312>
							folderselect = 100;
1004140a:	4b0f      	ldr	r3, [pc, #60]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
1004140c:	2264      	movs	r2, #100	@ 0x64
1004140e:	701a      	strb	r2, [r3, #0]
10041410:	e009      	b.n	10041426 <ButtonsMenuSM_Event_Handler+0x312>
						}
					} else {
						trackselect--;
10041412:	4b0e      	ldr	r3, [pc, #56]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
10041414:	781b      	ldrb	r3, [r3, #0]
10041416:	3b01      	subs	r3, #1
10041418:	b2da      	uxtb	r2, r3
1004141a:	4b0c      	ldr	r3, [pc, #48]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
1004141c:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
1004141e:	4b0b      	ldr	r3, [pc, #44]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
10041420:	781a      	ldrb	r2, [r3, #0]
10041422:	4b0a      	ldr	r3, [pc, #40]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
10041424:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10041426:	4b0e      	ldr	r3, [pc, #56]	@ (10041460 <ButtonsMenuSM_Event_Handler+0x34c>)
10041428:	7818      	ldrb	r0, [r3, #0]
1004142a:	4b07      	ldr	r3, [pc, #28]	@ (10041448 <ButtonsMenuSM_Event_Handler+0x334>)
1004142c:	7819      	ldrb	r1, [r3, #0]
1004142e:	4b07      	ldr	r3, [pc, #28]	@ (1004144c <ButtonsMenuSM_Event_Handler+0x338>)
10041430:	781b      	ldrb	r3, [r3, #0]
10041432:	001a      	movs	r2, r3
10041434:	f7ff fb5a 	bl	10040aec <DrawFolder>
10041438:	e08e      	b.n	10041558 <ButtonsMenuSM_Event_Handler+0x444>
1004143a:	46c0      	nop			@ (mov r8, r8)
1004143c:	2000039c 	.word	0x2000039c
10041440:	2000039d 	.word	0x2000039d
10041444:	10067c88 	.word	0x10067c88
10041448:	2000039f 	.word	0x2000039f
1004144c:	200003a0 	.word	0x200003a0
10041450:	200003a1 	.word	0x200003a1
10041454:	200003a2 	.word	0x200003a2
10041458:	200003a3 	.word	0x200003a3
1004145c:	200003a4 	.word	0x200003a4
10041460:	2000039e 	.word	0x2000039e

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10041464:	1d3b      	adds	r3, r7, #4
10041466:	885b      	ldrh	r3, [r3, #2]
10041468:	001a      	movs	r2, r3
1004146a:	2380      	movs	r3, #128	@ 0x80
1004146c:	011b      	lsls	r3, r3, #4
1004146e:	4013      	ands	r3, r2
10041470:	d02f      	beq.n	100414d2 <ButtonsMenuSM_Event_Handler+0x3be>
10041472:	1d3b      	adds	r3, r7, #4
10041474:	885b      	ldrh	r3, [r3, #2]
10041476:	001a      	movs	r2, r3
10041478:	2308      	movs	r3, #8
1004147a:	4013      	ands	r3, r2
1004147c:	d129      	bne.n	100414d2 <ButtonsMenuSM_Event_Handler+0x3be>
					if(!cursorpos){
1004147e:	4bd1      	ldr	r3, [pc, #836]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
10041480:	781b      	ldrb	r3, [r3, #0]
10041482:	2b00      	cmp	r3, #0
10041484:	d110      	bne.n	100414a8 <ButtonsMenuSM_Event_Handler+0x394>
						folderselect++;
10041486:	4bd0      	ldr	r3, [pc, #832]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
10041488:	781b      	ldrb	r3, [r3, #0]
1004148a:	3301      	adds	r3, #1
1004148c:	b2da      	uxtb	r2, r3
1004148e:	4bce      	ldr	r3, [pc, #824]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
10041490:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
10041492:	4bcd      	ldr	r3, [pc, #820]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
10041494:	781b      	ldrb	r3, [r3, #0]
10041496:	2164      	movs	r1, #100	@ 0x64
10041498:	0018      	movs	r0, r3
1004149a:	f7fe ff57 	bl	1004034c <__aeabi_uidivmod>
1004149e:	000b      	movs	r3, r1
100414a0:	b2da      	uxtb	r2, r3
100414a2:	4bc9      	ldr	r3, [pc, #804]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
100414a4:	701a      	strb	r2, [r3, #0]
100414a6:	e009      	b.n	100414bc <ButtonsMenuSM_Event_Handler+0x3a8>
					} else {
						trackselect++;
100414a8:	4bc8      	ldr	r3, [pc, #800]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
100414aa:	781b      	ldrb	r3, [r3, #0]
100414ac:	3301      	adds	r3, #1
100414ae:	b2da      	uxtb	r2, r3
100414b0:	4bc6      	ldr	r3, [pc, #792]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
100414b2:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
100414b4:	4bc5      	ldr	r3, [pc, #788]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
100414b6:	781a      	ldrb	r2, [r3, #0]
100414b8:	4bc4      	ldr	r3, [pc, #784]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
100414ba:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
100414bc:	4bc1      	ldr	r3, [pc, #772]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
100414be:	7818      	ldrb	r0, [r3, #0]
100414c0:	4bc1      	ldr	r3, [pc, #772]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
100414c2:	7819      	ldrb	r1, [r3, #0]
100414c4:	4bc1      	ldr	r3, [pc, #772]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
100414c6:	781b      	ldrb	r3, [r3, #0]
100414c8:	001a      	movs	r2, r3
100414ca:	f7ff fb0f 	bl	10040aec <DrawFolder>
					break;
100414ce:	f000 ffbe 	bl	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100414d2:	1d3b      	adds	r3, r7, #4
100414d4:	885b      	ldrh	r3, [r3, #2]
100414d6:	001a      	movs	r2, r3
100414d8:	2380      	movs	r3, #128	@ 0x80
100414da:	015b      	lsls	r3, r3, #5
100414dc:	4013      	ands	r3, r2
100414de:	d017      	beq.n	10041510 <ButtonsMenuSM_Event_Handler+0x3fc>
100414e0:	1d3b      	adds	r3, r7, #4
100414e2:	885b      	ldrh	r3, [r3, #2]
100414e4:	001a      	movs	r2, r3
100414e6:	2310      	movs	r3, #16
100414e8:	4013      	ands	r3, r2
100414ea:	d111      	bne.n	10041510 <ButtonsMenuSM_Event_Handler+0x3fc>
					cursorpos = !cursorpos;
100414ec:	4bb5      	ldr	r3, [pc, #724]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
100414ee:	781b      	ldrb	r3, [r3, #0]
100414f0:	425a      	negs	r2, r3
100414f2:	4153      	adcs	r3, r2
100414f4:	b2db      	uxtb	r3, r3
100414f6:	001a      	movs	r2, r3
100414f8:	4bb2      	ldr	r3, [pc, #712]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
100414fa:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
100414fc:	4bb1      	ldr	r3, [pc, #708]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
100414fe:	7818      	ldrb	r0, [r3, #0]
10041500:	4bb1      	ldr	r3, [pc, #708]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
10041502:	7819      	ldrb	r1, [r3, #0]
10041504:	4bb1      	ldr	r3, [pc, #708]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
10041506:	781b      	ldrb	r3, [r3, #0]
10041508:	001a      	movs	r2, r3
1004150a:	f7ff faef 	bl	10040aec <DrawFolder>
1004150e:	e023      	b.n	10041558 <ButtonsMenuSM_Event_Handler+0x444>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10041510:	1d3b      	adds	r3, r7, #4
10041512:	885b      	ldrh	r3, [r3, #2]
10041514:	001a      	movs	r2, r3
10041516:	2380      	movs	r3, #128	@ 0x80
10041518:	019b      	lsls	r3, r3, #6
1004151a:	4013      	ands	r3, r2
1004151c:	d101      	bne.n	10041522 <ButtonsMenuSM_Event_Handler+0x40e>
1004151e:	f000 ff8d 	bl	1004243c <ButtonsMenuSM_Event_Handler+0x1328>
10041522:	1d3b      	adds	r3, r7, #4
10041524:	885b      	ldrh	r3, [r3, #2]
10041526:	001a      	movs	r2, r3
10041528:	2320      	movs	r3, #32
1004152a:	4013      	ands	r3, r2
1004152c:	d001      	beq.n	10041532 <ButtonsMenuSM_Event_Handler+0x41e>
1004152e:	f000 ff85 	bl	1004243c <ButtonsMenuSM_Event_Handler+0x1328>
					cursorpos = !cursorpos;
10041532:	4ba4      	ldr	r3, [pc, #656]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
10041534:	781b      	ldrb	r3, [r3, #0]
10041536:	425a      	negs	r2, r3
10041538:	4153      	adcs	r3, r2
1004153a:	b2db      	uxtb	r3, r3
1004153c:	001a      	movs	r2, r3
1004153e:	4ba1      	ldr	r3, [pc, #644]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
10041540:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10041542:	4ba0      	ldr	r3, [pc, #640]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
10041544:	7818      	ldrb	r0, [r3, #0]
10041546:	4ba0      	ldr	r3, [pc, #640]	@ (100417c8 <ButtonsMenuSM_Event_Handler+0x6b4>)
10041548:	7819      	ldrb	r1, [r3, #0]
1004154a:	4ba0      	ldr	r3, [pc, #640]	@ (100417cc <ButtonsMenuSM_Event_Handler+0x6b8>)
1004154c:	781b      	ldrb	r3, [r3, #0]
1004154e:	001a      	movs	r2, r3
10041550:	f7ff facc 	bl	10040aec <DrawFolder>
				}
			}
			break;
10041554:	f000 ff72 	bl	1004243c <ButtonsMenuSM_Event_Handler+0x1328>
10041558:	f000 ff70 	bl	1004243c <ButtonsMenuSM_Event_Handler+0x1328>
		case scheduleTime:
			if(event.status == EVENT_ENTRY){
1004155c:	1d3b      	adds	r3, r7, #4
1004155e:	781b      	ldrb	r3, [r3, #0]
10041560:	b25b      	sxtb	r3, r3
10041562:	2b02      	cmp	r3, #2
10041564:	d112      	bne.n	1004158c <ButtonsMenuSM_Event_Handler+0x478>
				cursorpos = 0;
10041566:	4b97      	ldr	r3, [pc, #604]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
10041568:	2200      	movs	r2, #0
1004156a:	701a      	strb	r2, [r3, #0]
				DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
1004156c:	4b95      	ldr	r3, [pc, #596]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
1004156e:	7818      	ldrb	r0, [r3, #0]
10041570:	4b97      	ldr	r3, [pc, #604]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
10041572:	7819      	ldrb	r1, [r3, #0]
10041574:	4b97      	ldr	r3, [pc, #604]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
10041576:	781b      	ldrb	r3, [r3, #0]
10041578:	3301      	adds	r3, #1
1004157a:	b2da      	uxtb	r2, r3
1004157c:	4b96      	ldr	r3, [pc, #600]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
1004157e:	781c      	ldrb	r4, [r3, #0]
10041580:	4b96      	ldr	r3, [pc, #600]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
10041582:	781b      	ldrb	r3, [r3, #0]
10041584:	9300      	str	r3, [sp, #0]
10041586:	0023      	movs	r3, r4
10041588:	f7ff fbfc 	bl	10040d84 <DrawSchedule>
			}
			if(event.status == EVENT_BUTTONS){
1004158c:	1d3b      	adds	r3, r7, #4
1004158e:	781b      	ldrb	r3, [r3, #0]
10041590:	b25b      	sxtb	r3, r3
10041592:	2b04      	cmp	r3, #4
10041594:	d001      	beq.n	1004159a <ButtonsMenuSM_Event_Handler+0x486>
10041596:	f000 ff53 	bl	10042440 <ButtonsMenuSM_Event_Handler+0x132c>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
1004159a:	1d3b      	adds	r3, r7, #4
1004159c:	885b      	ldrh	r3, [r3, #2]
1004159e:	001a      	movs	r2, r3
100415a0:	2380      	movs	r3, #128	@ 0x80
100415a2:	005b      	lsls	r3, r3, #1
100415a4:	4013      	ands	r3, r2
100415a6:	d00e      	beq.n	100415c6 <ButtonsMenuSM_Event_Handler+0x4b2>
100415a8:	1d3b      	adds	r3, r7, #4
100415aa:	885b      	ldrh	r3, [r3, #2]
100415ac:	001a      	movs	r2, r3
100415ae:	2301      	movs	r3, #1
100415b0:	4013      	ands	r3, r2
100415b2:	d108      	bne.n	100415c6 <ButtonsMenuSM_Event_Handler+0x4b2>
					nextstate = main;
100415b4:	2326      	movs	r3, #38	@ 0x26
100415b6:	18fb      	adds	r3, r7, r3
100415b8:	2200      	movs	r2, #0
100415ba:	701a      	strb	r2, [r3, #0]
					transition = 1;
100415bc:	2327      	movs	r3, #39	@ 0x27
100415be:	18fb      	adds	r3, r7, r3
100415c0:	2201      	movs	r2, #1
100415c2:	701a      	strb	r2, [r3, #0]
100415c4:	e1e6      	b.n	10041994 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100415c6:	1d3b      	adds	r3, r7, #4
100415c8:	885b      	ldrh	r3, [r3, #2]
100415ca:	001a      	movs	r2, r3
100415cc:	2380      	movs	r3, #128	@ 0x80
100415ce:	009b      	lsls	r3, r3, #2
100415d0:	4013      	ands	r3, r2
100415d2:	d00e      	beq.n	100415f2 <ButtonsMenuSM_Event_Handler+0x4de>
100415d4:	1d3b      	adds	r3, r7, #4
100415d6:	885b      	ldrh	r3, [r3, #2]
100415d8:	001a      	movs	r2, r3
100415da:	2302      	movs	r3, #2
100415dc:	4013      	ands	r3, r2
100415de:	d108      	bne.n	100415f2 <ButtonsMenuSM_Event_Handler+0x4de>
					nextstate = scheduleFolder;
100415e0:	2326      	movs	r3, #38	@ 0x26
100415e2:	18fb      	adds	r3, r7, r3
100415e4:	2203      	movs	r2, #3
100415e6:	701a      	strb	r2, [r3, #0]
					transition = 1;
100415e8:	2327      	movs	r3, #39	@ 0x27
100415ea:	18fb      	adds	r3, r7, r3
100415ec:	2201      	movs	r2, #1
100415ee:	701a      	strb	r2, [r3, #0]
100415f0:	e1d0      	b.n	10041994 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100415f2:	1d3b      	adds	r3, r7, #4
100415f4:	885b      	ldrh	r3, [r3, #2]
100415f6:	001a      	movs	r2, r3
100415f8:	2380      	movs	r3, #128	@ 0x80
100415fa:	00db      	lsls	r3, r3, #3
100415fc:	4013      	ands	r3, r2
100415fe:	d100      	bne.n	10041602 <ButtonsMenuSM_Event_Handler+0x4ee>
10041600:	e0a5      	b.n	1004174e <ButtonsMenuSM_Event_Handler+0x63a>
10041602:	1d3b      	adds	r3, r7, #4
10041604:	885b      	ldrh	r3, [r3, #2]
10041606:	001a      	movs	r2, r3
10041608:	2304      	movs	r3, #4
1004160a:	4013      	ands	r3, r2
1004160c:	d000      	beq.n	10041610 <ButtonsMenuSM_Event_Handler+0x4fc>
1004160e:	e09e      	b.n	1004174e <ButtonsMenuSM_Event_Handler+0x63a>
					switch(cursorpos){
10041610:	4b6c      	ldr	r3, [pc, #432]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
10041612:	781b      	ldrb	r3, [r3, #0]
10041614:	2b05      	cmp	r3, #5
10041616:	d900      	bls.n	1004161a <ButtonsMenuSM_Event_Handler+0x506>
10041618:	e083      	b.n	10041722 <ButtonsMenuSM_Event_Handler+0x60e>
1004161a:	009a      	lsls	r2, r3, #2
1004161c:	4b70      	ldr	r3, [pc, #448]	@ (100417e0 <ButtonsMenuSM_Event_Handler+0x6cc>)
1004161e:	18d3      	adds	r3, r2, r3
10041620:	681b      	ldr	r3, [r3, #0]
10041622:	469f      	mov	pc, r3
					case 0:
						monthselect--;
10041624:	4b6a      	ldr	r3, [pc, #424]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
10041626:	781b      	ldrb	r3, [r3, #0]
10041628:	3b01      	subs	r3, #1
1004162a:	b2da      	uxtb	r2, r3
1004162c:	4b68      	ldr	r3, [pc, #416]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004162e:	701a      	strb	r2, [r3, #0]
						if (monthselect == 255){
10041630:	4b67      	ldr	r3, [pc, #412]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
10041632:	781b      	ldrb	r3, [r3, #0]
10041634:	2bff      	cmp	r3, #255	@ 0xff
10041636:	d000      	beq.n	1004163a <ButtonsMenuSM_Event_Handler+0x526>
10041638:	e075      	b.n	10041726 <ButtonsMenuSM_Event_Handler+0x612>
							monthselect = 12;
1004163a:	4b65      	ldr	r3, [pc, #404]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004163c:	220c      	movs	r2, #12
1004163e:	701a      	strb	r2, [r3, #0]
						}
						break;
10041640:	e071      	b.n	10041726 <ButtonsMenuSM_Event_Handler+0x612>
					case 1:
						dayselect--;
10041642:	4b64      	ldr	r3, [pc, #400]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
10041644:	781b      	ldrb	r3, [r3, #0]
10041646:	3b01      	subs	r3, #1
10041648:	b2da      	uxtb	r2, r3
1004164a:	4b62      	ldr	r3, [pc, #392]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
1004164c:	701a      	strb	r2, [r3, #0]
						if (dayselect == 255){
1004164e:	4b61      	ldr	r3, [pc, #388]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
10041650:	781b      	ldrb	r3, [r3, #0]
10041652:	2bff      	cmp	r3, #255	@ 0xff
10041654:	d169      	bne.n	1004172a <ButtonsMenuSM_Event_Handler+0x616>
							dayselect = 30;
10041656:	4b5f      	ldr	r3, [pc, #380]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
10041658:	221e      	movs	r2, #30
1004165a:	701a      	strb	r2, [r3, #0]
						}
						break;
1004165c:	e065      	b.n	1004172a <ButtonsMenuSM_Event_Handler+0x616>
					case 2:
						if((Stimeselect&0b11111000) == 0){
1004165e:	4b5e      	ldr	r3, [pc, #376]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
10041660:	781b      	ldrb	r3, [r3, #0]
10041662:	001a      	movs	r2, r3
10041664:	23f8      	movs	r3, #248	@ 0xf8
10041666:	4013      	ands	r3, r2
10041668:	d10d      	bne.n	10041686 <ButtonsMenuSM_Event_Handler+0x572>
							Stimeselect = 0b10111000 | (Stimeselect&0b11);//23:XX
1004166a:	4b5b      	ldr	r3, [pc, #364]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
1004166c:	781b      	ldrb	r3, [r3, #0]
1004166e:	b25b      	sxtb	r3, r3
10041670:	2203      	movs	r2, #3
10041672:	4013      	ands	r3, r2
10041674:	b25b      	sxtb	r3, r3
10041676:	2248      	movs	r2, #72	@ 0x48
10041678:	4252      	negs	r2, r2
1004167a:	4313      	orrs	r3, r2
1004167c:	b25b      	sxtb	r3, r3
1004167e:	b2da      	uxtb	r2, r3
10041680:	4b55      	ldr	r3, [pc, #340]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
10041682:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect -= 0b00001000;
						}
						break;
10041684:	e052      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
							Stimeselect -= 0b00001000;
10041686:	4b54      	ldr	r3, [pc, #336]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
10041688:	781b      	ldrb	r3, [r3, #0]
1004168a:	3b08      	subs	r3, #8
1004168c:	b2da      	uxtb	r2, r3
1004168e:	4b52      	ldr	r3, [pc, #328]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
10041690:	701a      	strb	r2, [r3, #0]
						break;
10041692:	e04b      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
					case 3:
						if(Stimeselect == 0){
10041694:	4b50      	ldr	r3, [pc, #320]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
10041696:	781b      	ldrb	r3, [r3, #0]
10041698:	2b00      	cmp	r3, #0
1004169a:	d103      	bne.n	100416a4 <ButtonsMenuSM_Event_Handler+0x590>
							Stimeselect = 0b10111011;//23:45
1004169c:	4b4e      	ldr	r3, [pc, #312]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
1004169e:	22bb      	movs	r2, #187	@ 0xbb
100416a0:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect--;
							Stimeselect &= 0b11111011;
						}
						break;
100416a2:	e043      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
							Stimeselect--;
100416a4:	4b4c      	ldr	r3, [pc, #304]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
100416a6:	781b      	ldrb	r3, [r3, #0]
100416a8:	3b01      	subs	r3, #1
100416aa:	b2da      	uxtb	r2, r3
100416ac:	4b4a      	ldr	r3, [pc, #296]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
100416ae:	701a      	strb	r2, [r3, #0]
							Stimeselect &= 0b11111011;
100416b0:	4b49      	ldr	r3, [pc, #292]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
100416b2:	781b      	ldrb	r3, [r3, #0]
100416b4:	2204      	movs	r2, #4
100416b6:	4393      	bics	r3, r2
100416b8:	b2da      	uxtb	r2, r3
100416ba:	4b47      	ldr	r3, [pc, #284]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
100416bc:	701a      	strb	r2, [r3, #0]
						break;
100416be:	e035      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
					case 4:
						if((Etimeselect&0b11111000) == 0){
100416c0:	4b46      	ldr	r3, [pc, #280]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
100416c2:	781b      	ldrb	r3, [r3, #0]
100416c4:	001a      	movs	r2, r3
100416c6:	23f8      	movs	r3, #248	@ 0xf8
100416c8:	4013      	ands	r3, r2
100416ca:	d10d      	bne.n	100416e8 <ButtonsMenuSM_Event_Handler+0x5d4>
							Etimeselect = 0b10111000 | (Etimeselect&0b11);//23:XX
100416cc:	4b43      	ldr	r3, [pc, #268]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
100416ce:	781b      	ldrb	r3, [r3, #0]
100416d0:	b25b      	sxtb	r3, r3
100416d2:	2203      	movs	r2, #3
100416d4:	4013      	ands	r3, r2
100416d6:	b25b      	sxtb	r3, r3
100416d8:	2248      	movs	r2, #72	@ 0x48
100416da:	4252      	negs	r2, r2
100416dc:	4313      	orrs	r3, r2
100416de:	b25b      	sxtb	r3, r3
100416e0:	b2da      	uxtb	r2, r3
100416e2:	4b3e      	ldr	r3, [pc, #248]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
100416e4:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect -= 0b00001000;
						}break;
100416e6:	e021      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
							Etimeselect -= 0b00001000;
100416e8:	4b3c      	ldr	r3, [pc, #240]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
100416ea:	781b      	ldrb	r3, [r3, #0]
100416ec:	3b08      	subs	r3, #8
100416ee:	b2da      	uxtb	r2, r3
100416f0:	4b3a      	ldr	r3, [pc, #232]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
100416f2:	701a      	strb	r2, [r3, #0]
						}break;
100416f4:	e01a      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
					case 5:
						if(Etimeselect == 0){
100416f6:	4b39      	ldr	r3, [pc, #228]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
100416f8:	781b      	ldrb	r3, [r3, #0]
100416fa:	2b00      	cmp	r3, #0
100416fc:	d103      	bne.n	10041706 <ButtonsMenuSM_Event_Handler+0x5f2>
							Etimeselect = 0b10111011;//23:45
100416fe:	4b37      	ldr	r3, [pc, #220]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
10041700:	22bb      	movs	r2, #187	@ 0xbb
10041702:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect--;
							Etimeselect &= 0b11111011;
						}
						break;
10041704:	e012      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
							Etimeselect--;
10041706:	4b35      	ldr	r3, [pc, #212]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
10041708:	781b      	ldrb	r3, [r3, #0]
1004170a:	3b01      	subs	r3, #1
1004170c:	b2da      	uxtb	r2, r3
1004170e:	4b33      	ldr	r3, [pc, #204]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
10041710:	701a      	strb	r2, [r3, #0]
							Etimeselect &= 0b11111011;
10041712:	4b32      	ldr	r3, [pc, #200]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
10041714:	781b      	ldrb	r3, [r3, #0]
10041716:	2204      	movs	r2, #4
10041718:	4393      	bics	r3, r2
1004171a:	b2da      	uxtb	r2, r3
1004171c:	4b2f      	ldr	r3, [pc, #188]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
1004171e:	701a      	strb	r2, [r3, #0]
						break;
10041720:	e004      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
					default:
						break;
10041722:	46c0      	nop			@ (mov r8, r8)
10041724:	e002      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
						break;
10041726:	46c0      	nop			@ (mov r8, r8)
10041728:	e000      	b.n	1004172c <ButtonsMenuSM_Event_Handler+0x618>
						break;
1004172a:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
1004172c:	4b25      	ldr	r3, [pc, #148]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
1004172e:	7818      	ldrb	r0, [r3, #0]
10041730:	4b27      	ldr	r3, [pc, #156]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
10041732:	7819      	ldrb	r1, [r3, #0]
10041734:	4b27      	ldr	r3, [pc, #156]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
10041736:	781b      	ldrb	r3, [r3, #0]
10041738:	3301      	adds	r3, #1
1004173a:	b2da      	uxtb	r2, r3
1004173c:	4b26      	ldr	r3, [pc, #152]	@ (100417d8 <ButtonsMenuSM_Event_Handler+0x6c4>)
1004173e:	781c      	ldrb	r4, [r3, #0]
10041740:	4b26      	ldr	r3, [pc, #152]	@ (100417dc <ButtonsMenuSM_Event_Handler+0x6c8>)
10041742:	781b      	ldrb	r3, [r3, #0]
10041744:	9300      	str	r3, [sp, #0]
10041746:	0023      	movs	r3, r4
10041748:	f7ff fb1c 	bl	10040d84 <DrawSchedule>
1004174c:	e122      	b.n	10041994 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004174e:	1d3b      	adds	r3, r7, #4
10041750:	885b      	ldrh	r3, [r3, #2]
10041752:	001a      	movs	r2, r3
10041754:	2380      	movs	r3, #128	@ 0x80
10041756:	011b      	lsls	r3, r3, #4
10041758:	4013      	ands	r3, r2
1004175a:	d100      	bne.n	1004175e <ButtonsMenuSM_Event_Handler+0x64a>
1004175c:	e0bc      	b.n	100418d8 <ButtonsMenuSM_Event_Handler+0x7c4>
1004175e:	1d3b      	adds	r3, r7, #4
10041760:	885b      	ldrh	r3, [r3, #2]
10041762:	001a      	movs	r2, r3
10041764:	2308      	movs	r3, #8
10041766:	4013      	ands	r3, r2
10041768:	d000      	beq.n	1004176c <ButtonsMenuSM_Event_Handler+0x658>
1004176a:	e0b5      	b.n	100418d8 <ButtonsMenuSM_Event_Handler+0x7c4>
					switch(cursorpos){
1004176c:	4b15      	ldr	r3, [pc, #84]	@ (100417c4 <ButtonsMenuSM_Event_Handler+0x6b0>)
1004176e:	781b      	ldrb	r3, [r3, #0]
10041770:	2b05      	cmp	r3, #5
10041772:	d900      	bls.n	10041776 <ButtonsMenuSM_Event_Handler+0x662>
10041774:	e09a      	b.n	100418ac <ButtonsMenuSM_Event_Handler+0x798>
10041776:	009a      	lsls	r2, r3, #2
10041778:	4b1a      	ldr	r3, [pc, #104]	@ (100417e4 <ButtonsMenuSM_Event_Handler+0x6d0>)
1004177a:	18d3      	adds	r3, r2, r3
1004177c:	681b      	ldr	r3, [r3, #0]
1004177e:	469f      	mov	pc, r3
					case 0:
						monthselect++;
10041780:	4b13      	ldr	r3, [pc, #76]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
10041782:	781b      	ldrb	r3, [r3, #0]
10041784:	3301      	adds	r3, #1
10041786:	b2da      	uxtb	r2, r3
10041788:	4b11      	ldr	r3, [pc, #68]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004178a:	701a      	strb	r2, [r3, #0]
						monthselect %= 13;
1004178c:	4b10      	ldr	r3, [pc, #64]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004178e:	781b      	ldrb	r3, [r3, #0]
10041790:	210d      	movs	r1, #13
10041792:	0018      	movs	r0, r3
10041794:	f7fe fdda 	bl	1004034c <__aeabi_uidivmod>
10041798:	000b      	movs	r3, r1
1004179a:	b2da      	uxtb	r2, r3
1004179c:	4b0c      	ldr	r3, [pc, #48]	@ (100417d0 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004179e:	701a      	strb	r2, [r3, #0]
						break;
100417a0:	e089      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 1:
						dayselect++;
100417a2:	4b0c      	ldr	r3, [pc, #48]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
100417a4:	781b      	ldrb	r3, [r3, #0]
100417a6:	3301      	adds	r3, #1
100417a8:	b2da      	uxtb	r2, r3
100417aa:	4b0a      	ldr	r3, [pc, #40]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
100417ac:	701a      	strb	r2, [r3, #0]
						dayselect%=31;
100417ae:	4b09      	ldr	r3, [pc, #36]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
100417b0:	781b      	ldrb	r3, [r3, #0]
100417b2:	211f      	movs	r1, #31
100417b4:	0018      	movs	r0, r3
100417b6:	f7fe fdc9 	bl	1004034c <__aeabi_uidivmod>
100417ba:	000b      	movs	r3, r1
100417bc:	b2da      	uxtb	r2, r3
100417be:	4b05      	ldr	r3, [pc, #20]	@ (100417d4 <ButtonsMenuSM_Event_Handler+0x6c0>)
100417c0:	701a      	strb	r2, [r3, #0]
						break;
100417c2:	e078      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
100417c4:	2000039e 	.word	0x2000039e
100417c8:	2000039f 	.word	0x2000039f
100417cc:	200003a0 	.word	0x200003a0
100417d0:	200003a1 	.word	0x200003a1
100417d4:	200003a2 	.word	0x200003a2
100417d8:	200003a3 	.word	0x200003a3
100417dc:	200003a4 	.word	0x200003a4
100417e0:	10067ca0 	.word	0x10067ca0
100417e4:	10067cb8 	.word	0x10067cb8
					case 2:
						if((Stimeselect&0b11111000) == 0b10111000){
100417e8:	4bca      	ldr	r3, [pc, #808]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
100417ea:	781b      	ldrb	r3, [r3, #0]
100417ec:	001a      	movs	r2, r3
100417ee:	23f8      	movs	r3, #248	@ 0xf8
100417f0:	4013      	ands	r3, r2
100417f2:	2bb8      	cmp	r3, #184	@ 0xb8
100417f4:	d107      	bne.n	10041806 <ButtonsMenuSM_Event_Handler+0x6f2>
							Stimeselect &= 0b00000011;
100417f6:	4bc7      	ldr	r3, [pc, #796]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
100417f8:	781b      	ldrb	r3, [r3, #0]
100417fa:	2203      	movs	r2, #3
100417fc:	4013      	ands	r3, r2
100417fe:	b2da      	uxtb	r2, r3
10041800:	4bc4      	ldr	r3, [pc, #784]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041802:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect += 0b00001000;
						}
						break;
10041804:	e057      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
							Stimeselect += 0b00001000;
10041806:	4bc3      	ldr	r3, [pc, #780]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041808:	781b      	ldrb	r3, [r3, #0]
1004180a:	3308      	adds	r3, #8
1004180c:	b2da      	uxtb	r2, r3
1004180e:	4bc1      	ldr	r3, [pc, #772]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041810:	701a      	strb	r2, [r3, #0]
						break;
10041812:	e050      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 3:
						if(Stimeselect == 0b10111011){//23:45
10041814:	4bbf      	ldr	r3, [pc, #764]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041816:	781b      	ldrb	r3, [r3, #0]
10041818:	2bbb      	cmp	r3, #187	@ 0xbb
1004181a:	d103      	bne.n	10041824 <ButtonsMenuSM_Event_Handler+0x710>
							Stimeselect = 0;//0:00
1004181c:	4bbd      	ldr	r3, [pc, #756]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
1004181e:	2200      	movs	r2, #0
10041820:	701a      	strb	r2, [r3, #0]
							Stimeselect++;
							if(Stimeselect & 0b00000100){
								Stimeselect += 0b00000100;
							}
						}
						break;
10041822:	e045      	b.n	100418b0 <ButtonsMenuSM_Event_Handler+0x79c>
							Stimeselect++;
10041824:	4bbb      	ldr	r3, [pc, #748]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041826:	781b      	ldrb	r3, [r3, #0]
10041828:	3301      	adds	r3, #1
1004182a:	b2da      	uxtb	r2, r3
1004182c:	4bb9      	ldr	r3, [pc, #740]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
1004182e:	701a      	strb	r2, [r3, #0]
							if(Stimeselect & 0b00000100){
10041830:	4bb8      	ldr	r3, [pc, #736]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041832:	781b      	ldrb	r3, [r3, #0]
10041834:	001a      	movs	r2, r3
10041836:	2304      	movs	r3, #4
10041838:	4013      	ands	r3, r2
1004183a:	d039      	beq.n	100418b0 <ButtonsMenuSM_Event_Handler+0x79c>
								Stimeselect += 0b00000100;
1004183c:	4bb5      	ldr	r3, [pc, #724]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
1004183e:	781b      	ldrb	r3, [r3, #0]
10041840:	3304      	adds	r3, #4
10041842:	b2da      	uxtb	r2, r3
10041844:	4bb3      	ldr	r3, [pc, #716]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041846:	701a      	strb	r2, [r3, #0]
						break;
10041848:	e032      	b.n	100418b0 <ButtonsMenuSM_Event_Handler+0x79c>
					case 4:
						if((Etimeselect&0b11111000) == 0b10111000){
1004184a:	4bb3      	ldr	r3, [pc, #716]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
1004184c:	781b      	ldrb	r3, [r3, #0]
1004184e:	001a      	movs	r2, r3
10041850:	23f8      	movs	r3, #248	@ 0xf8
10041852:	4013      	ands	r3, r2
10041854:	2bb8      	cmp	r3, #184	@ 0xb8
10041856:	d107      	bne.n	10041868 <ButtonsMenuSM_Event_Handler+0x754>
							Etimeselect &= 0b00000011;
10041858:	4baf      	ldr	r3, [pc, #700]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
1004185a:	781b      	ldrb	r3, [r3, #0]
1004185c:	2203      	movs	r2, #3
1004185e:	4013      	ands	r3, r2
10041860:	b2da      	uxtb	r2, r3
10041862:	4bad      	ldr	r3, [pc, #692]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041864:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect += 0b00001000;
						}
						break;
10041866:	e026      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
							Etimeselect += 0b00001000;
10041868:	4bab      	ldr	r3, [pc, #684]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
1004186a:	781b      	ldrb	r3, [r3, #0]
1004186c:	3308      	adds	r3, #8
1004186e:	b2da      	uxtb	r2, r3
10041870:	4ba9      	ldr	r3, [pc, #676]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041872:	701a      	strb	r2, [r3, #0]
						break;
10041874:	e01f      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 5:
						if(Etimeselect == 0b10111011){//23:45
10041876:	4ba8      	ldr	r3, [pc, #672]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041878:	781b      	ldrb	r3, [r3, #0]
1004187a:	2bbb      	cmp	r3, #187	@ 0xbb
1004187c:	d103      	bne.n	10041886 <ButtonsMenuSM_Event_Handler+0x772>
							Etimeselect = 0;//0:00
1004187e:	4ba6      	ldr	r3, [pc, #664]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041880:	2200      	movs	r2, #0
10041882:	701a      	strb	r2, [r3, #0]
							Etimeselect++;
							if(Etimeselect & 0b00000100){
								Etimeselect += 0b00000100;
							}
						}
						break;
10041884:	e016      	b.n	100418b4 <ButtonsMenuSM_Event_Handler+0x7a0>
							Etimeselect++;
10041886:	4ba4      	ldr	r3, [pc, #656]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041888:	781b      	ldrb	r3, [r3, #0]
1004188a:	3301      	adds	r3, #1
1004188c:	b2da      	uxtb	r2, r3
1004188e:	4ba2      	ldr	r3, [pc, #648]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041890:	701a      	strb	r2, [r3, #0]
							if(Etimeselect & 0b00000100){
10041892:	4ba1      	ldr	r3, [pc, #644]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041894:	781b      	ldrb	r3, [r3, #0]
10041896:	001a      	movs	r2, r3
10041898:	2304      	movs	r3, #4
1004189a:	4013      	ands	r3, r2
1004189c:	d00a      	beq.n	100418b4 <ButtonsMenuSM_Event_Handler+0x7a0>
								Etimeselect += 0b00000100;
1004189e:	4b9e      	ldr	r3, [pc, #632]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
100418a0:	781b      	ldrb	r3, [r3, #0]
100418a2:	3304      	adds	r3, #4
100418a4:	b2da      	uxtb	r2, r3
100418a6:	4b9c      	ldr	r3, [pc, #624]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
100418a8:	701a      	strb	r2, [r3, #0]
						break;
100418aa:	e003      	b.n	100418b4 <ButtonsMenuSM_Event_Handler+0x7a0>
					default:
						break;
100418ac:	46c0      	nop			@ (mov r8, r8)
100418ae:	e002      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
						break;
100418b0:	46c0      	nop			@ (mov r8, r8)
100418b2:	e000      	b.n	100418b6 <ButtonsMenuSM_Event_Handler+0x7a2>
						break;
100418b4:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
100418b6:	4b99      	ldr	r3, [pc, #612]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
100418b8:	7818      	ldrb	r0, [r3, #0]
100418ba:	4b99      	ldr	r3, [pc, #612]	@ (10041b20 <ButtonsMenuSM_Event_Handler+0xa0c>)
100418bc:	7819      	ldrb	r1, [r3, #0]
100418be:	4b99      	ldr	r3, [pc, #612]	@ (10041b24 <ButtonsMenuSM_Event_Handler+0xa10>)
100418c0:	781b      	ldrb	r3, [r3, #0]
100418c2:	3301      	adds	r3, #1
100418c4:	b2da      	uxtb	r2, r3
100418c6:	4b93      	ldr	r3, [pc, #588]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
100418c8:	781c      	ldrb	r4, [r3, #0]
100418ca:	4b93      	ldr	r3, [pc, #588]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
100418cc:	781b      	ldrb	r3, [r3, #0]
100418ce:	9300      	str	r3, [sp, #0]
100418d0:	0023      	movs	r3, r4
100418d2:	f7ff fa57 	bl	10040d84 <DrawSchedule>
100418d6:	e05d      	b.n	10041994 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100418d8:	1d3b      	adds	r3, r7, #4
100418da:	885b      	ldrh	r3, [r3, #2]
100418dc:	001a      	movs	r2, r3
100418de:	2380      	movs	r3, #128	@ 0x80
100418e0:	015b      	lsls	r3, r3, #5
100418e2:	4013      	ands	r3, r2
100418e4:	d023      	beq.n	1004192e <ButtonsMenuSM_Event_Handler+0x81a>
100418e6:	1d3b      	adds	r3, r7, #4
100418e8:	885b      	ldrh	r3, [r3, #2]
100418ea:	001a      	movs	r2, r3
100418ec:	2310      	movs	r3, #16
100418ee:	4013      	ands	r3, r2
100418f0:	d11d      	bne.n	1004192e <ButtonsMenuSM_Event_Handler+0x81a>
					cursorpos--;
100418f2:	4b8a      	ldr	r3, [pc, #552]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
100418f4:	781b      	ldrb	r3, [r3, #0]
100418f6:	3b01      	subs	r3, #1
100418f8:	b2da      	uxtb	r2, r3
100418fa:	4b88      	ldr	r3, [pc, #544]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
100418fc:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
100418fe:	4b87      	ldr	r3, [pc, #540]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041900:	781b      	ldrb	r3, [r3, #0]
10041902:	2bff      	cmp	r3, #255	@ 0xff
10041904:	d102      	bne.n	1004190c <ButtonsMenuSM_Event_Handler+0x7f8>
						cursorpos = 5;
10041906:	4b85      	ldr	r3, [pc, #532]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041908:	2205      	movs	r2, #5
1004190a:	701a      	strb	r2, [r3, #0]
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
1004190c:	4b83      	ldr	r3, [pc, #524]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
1004190e:	7818      	ldrb	r0, [r3, #0]
10041910:	4b83      	ldr	r3, [pc, #524]	@ (10041b20 <ButtonsMenuSM_Event_Handler+0xa0c>)
10041912:	7819      	ldrb	r1, [r3, #0]
10041914:	4b83      	ldr	r3, [pc, #524]	@ (10041b24 <ButtonsMenuSM_Event_Handler+0xa10>)
10041916:	781b      	ldrb	r3, [r3, #0]
10041918:	3301      	adds	r3, #1
1004191a:	b2da      	uxtb	r2, r3
1004191c:	4b7d      	ldr	r3, [pc, #500]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
1004191e:	781c      	ldrb	r4, [r3, #0]
10041920:	4b7d      	ldr	r3, [pc, #500]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041922:	781b      	ldrb	r3, [r3, #0]
10041924:	9300      	str	r3, [sp, #0]
10041926:	0023      	movs	r3, r4
10041928:	f7ff fa2c 	bl	10040d84 <DrawSchedule>
1004192c:	e032      	b.n	10041994 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
1004192e:	1d3b      	adds	r3, r7, #4
10041930:	885b      	ldrh	r3, [r3, #2]
10041932:	001a      	movs	r2, r3
10041934:	2380      	movs	r3, #128	@ 0x80
10041936:	019b      	lsls	r3, r3, #6
10041938:	4013      	ands	r3, r2
1004193a:	d101      	bne.n	10041940 <ButtonsMenuSM_Event_Handler+0x82c>
1004193c:	f000 fd80 	bl	10042440 <ButtonsMenuSM_Event_Handler+0x132c>
10041940:	1d3b      	adds	r3, r7, #4
10041942:	885b      	ldrh	r3, [r3, #2]
10041944:	001a      	movs	r2, r3
10041946:	2320      	movs	r3, #32
10041948:	4013      	ands	r3, r2
1004194a:	d001      	beq.n	10041950 <ButtonsMenuSM_Event_Handler+0x83c>
1004194c:	f000 fd78 	bl	10042440 <ButtonsMenuSM_Event_Handler+0x132c>
					cursorpos++;
10041950:	4b72      	ldr	r3, [pc, #456]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041952:	781b      	ldrb	r3, [r3, #0]
10041954:	3301      	adds	r3, #1
10041956:	b2da      	uxtb	r2, r3
10041958:	4b70      	ldr	r3, [pc, #448]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
1004195a:	701a      	strb	r2, [r3, #0]
					cursorpos %= 6;
1004195c:	4b6f      	ldr	r3, [pc, #444]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
1004195e:	781b      	ldrb	r3, [r3, #0]
10041960:	2106      	movs	r1, #6
10041962:	0018      	movs	r0, r3
10041964:	f7fe fcf2 	bl	1004034c <__aeabi_uidivmod>
10041968:	000b      	movs	r3, r1
1004196a:	b2da      	uxtb	r2, r3
1004196c:	4b6b      	ldr	r3, [pc, #428]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
1004196e:	701a      	strb	r2, [r3, #0]
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10041970:	4b6a      	ldr	r3, [pc, #424]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041972:	7818      	ldrb	r0, [r3, #0]
10041974:	4b6a      	ldr	r3, [pc, #424]	@ (10041b20 <ButtonsMenuSM_Event_Handler+0xa0c>)
10041976:	7819      	ldrb	r1, [r3, #0]
10041978:	4b6a      	ldr	r3, [pc, #424]	@ (10041b24 <ButtonsMenuSM_Event_Handler+0xa10>)
1004197a:	781b      	ldrb	r3, [r3, #0]
1004197c:	3301      	adds	r3, #1
1004197e:	b2da      	uxtb	r2, r3
10041980:	4b64      	ldr	r3, [pc, #400]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041982:	781c      	ldrb	r4, [r3, #0]
10041984:	4b64      	ldr	r3, [pc, #400]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041986:	781b      	ldrb	r3, [r3, #0]
10041988:	9300      	str	r3, [sp, #0]
1004198a:	0023      	movs	r3, r4
1004198c:	f7ff f9fa 	bl	10040d84 <DrawSchedule>
				}
			}
			break;
10041990:	f000 fd56 	bl	10042440 <ButtonsMenuSM_Event_Handler+0x132c>
10041994:	f000 fd54 	bl	10042440 <ButtonsMenuSM_Event_Handler+0x132c>
		case scheduleFolder:
			if(event.status == EVENT_ENTRY){
10041998:	1d3b      	adds	r3, r7, #4
1004199a:	781b      	ldrb	r3, [r3, #0]
1004199c:	b25b      	sxtb	r3, r3
1004199e:	2b02      	cmp	r3, #2
100419a0:	d10b      	bne.n	100419ba <ButtonsMenuSM_Event_Handler+0x8a6>
				cursorpos = 0;
100419a2:	4b5e      	ldr	r3, [pc, #376]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
100419a4:	2200      	movs	r2, #0
100419a6:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
100419a8:	4b5c      	ldr	r3, [pc, #368]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
100419aa:	7818      	ldrb	r0, [r3, #0]
100419ac:	4b5e      	ldr	r3, [pc, #376]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
100419ae:	7819      	ldrb	r1, [r3, #0]
100419b0:	4b5e      	ldr	r3, [pc, #376]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
100419b2:	781b      	ldrb	r3, [r3, #0]
100419b4:	001a      	movs	r2, r3
100419b6:	f7ff f899 	bl	10040aec <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
100419ba:	1d3b      	adds	r3, r7, #4
100419bc:	781b      	ldrb	r3, [r3, #0]
100419be:	b25b      	sxtb	r3, r3
100419c0:	2b04      	cmp	r3, #4
100419c2:	d001      	beq.n	100419c8 <ButtonsMenuSM_Event_Handler+0x8b4>
100419c4:	f000 fd3e 	bl	10042444 <ButtonsMenuSM_Event_Handler+0x1330>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
100419c8:	1d3b      	adds	r3, r7, #4
100419ca:	885b      	ldrh	r3, [r3, #2]
100419cc:	001a      	movs	r2, r3
100419ce:	2380      	movs	r3, #128	@ 0x80
100419d0:	005b      	lsls	r3, r3, #1
100419d2:	4013      	ands	r3, r2
100419d4:	d00e      	beq.n	100419f4 <ButtonsMenuSM_Event_Handler+0x8e0>
100419d6:	1d3b      	adds	r3, r7, #4
100419d8:	885b      	ldrh	r3, [r3, #2]
100419da:	001a      	movs	r2, r3
100419dc:	2301      	movs	r3, #1
100419de:	4013      	ands	r3, r2
100419e0:	d108      	bne.n	100419f4 <ButtonsMenuSM_Event_Handler+0x8e0>
					//discountprintf("moving to schedule stop");
					nextstate = scheduleTime;
100419e2:	2326      	movs	r3, #38	@ 0x26
100419e4:	18fb      	adds	r3, r7, r3
100419e6:	2202      	movs	r2, #2
100419e8:	701a      	strb	r2, [r3, #0]
					transition = 1;
100419ea:	2327      	movs	r3, #39	@ 0x27
100419ec:	18fb      	adds	r3, r7, r3
100419ee:	2201      	movs	r2, #1
100419f0:	701a      	strb	r2, [r3, #0]
100419f2:	e0f4      	b.n	10041bde <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100419f4:	1d3b      	adds	r3, r7, #4
100419f6:	885b      	ldrh	r3, [r3, #2]
100419f8:	001a      	movs	r2, r3
100419fa:	2380      	movs	r3, #128	@ 0x80
100419fc:	009b      	lsls	r3, r3, #2
100419fe:	4013      	ands	r3, r2
10041a00:	d032      	beq.n	10041a68 <ButtonsMenuSM_Event_Handler+0x954>
10041a02:	1d3b      	adds	r3, r7, #4
10041a04:	885b      	ldrh	r3, [r3, #2]
10041a06:	001a      	movs	r2, r3
10041a08:	2302      	movs	r3, #2
10041a0a:	4013      	ands	r3, r2
10041a0c:	d12c      	bne.n	10041a68 <ButtonsMenuSM_Event_Handler+0x954>
					//discountprintf("moving to main");
					scheduleEvent sevent;
					sevent.month = monthselect;
10041a0e:	4b44      	ldr	r3, [pc, #272]	@ (10041b20 <ButtonsMenuSM_Event_Handler+0xa0c>)
10041a10:	781a      	ldrb	r2, [r3, #0]
10041a12:	2114      	movs	r1, #20
10041a14:	187b      	adds	r3, r7, r1
10041a16:	701a      	strb	r2, [r3, #0]
					sevent.day = dayselect+1;
10041a18:	4b42      	ldr	r3, [pc, #264]	@ (10041b24 <ButtonsMenuSM_Event_Handler+0xa10>)
10041a1a:	781b      	ldrb	r3, [r3, #0]
10041a1c:	3301      	adds	r3, #1
10041a1e:	b2da      	uxtb	r2, r3
10041a20:	187b      	adds	r3, r7, r1
10041a22:	705a      	strb	r2, [r3, #1]
					sevent.start = Stimeselect;
10041a24:	4b3b      	ldr	r3, [pc, #236]	@ (10041b14 <ButtonsMenuSM_Event_Handler+0xa00>)
10041a26:	781a      	ldrb	r2, [r3, #0]
10041a28:	187b      	adds	r3, r7, r1
10041a2a:	709a      	strb	r2, [r3, #2]
					sevent.stop = Etimeselect;
10041a2c:	4b3a      	ldr	r3, [pc, #232]	@ (10041b18 <ButtonsMenuSM_Event_Handler+0xa04>)
10041a2e:	781a      	ldrb	r2, [r3, #0]
10041a30:	187b      	adds	r3, r7, r1
10041a32:	70da      	strb	r2, [r3, #3]
					sevent.track = trackselect+1;
10041a34:	4b3d      	ldr	r3, [pc, #244]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
10041a36:	781b      	ldrb	r3, [r3, #0]
10041a38:	3301      	adds	r3, #1
10041a3a:	b2da      	uxtb	r2, r3
10041a3c:	187b      	adds	r3, r7, r1
10041a3e:	715a      	strb	r2, [r3, #5]
					sevent.folder = folderselect+1;
10041a40:	4b39      	ldr	r3, [pc, #228]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041a42:	781b      	ldrb	r3, [r3, #0]
10041a44:	3301      	adds	r3, #1
10041a46:	b2da      	uxtb	r2, r3
10041a48:	187b      	adds	r3, r7, r1
10041a4a:	711a      	strb	r2, [r3, #4]
					FLASH_AppendSchedule(sevent);
10041a4c:	187b      	adds	r3, r7, r1
10041a4e:	6818      	ldr	r0, [r3, #0]
10041a50:	6859      	ldr	r1, [r3, #4]
10041a52:	f001 fc2d 	bl	100432b0 <FLASH_AppendSchedule>
					nextstate = main;
10041a56:	2326      	movs	r3, #38	@ 0x26
10041a58:	18fb      	adds	r3, r7, r3
10041a5a:	2200      	movs	r2, #0
10041a5c:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041a5e:	2327      	movs	r3, #39	@ 0x27
10041a60:	18fb      	adds	r3, r7, r3
10041a62:	2201      	movs	r2, #1
10041a64:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10041a66:	e0ba      	b.n	10041bde <ButtonsMenuSM_Event_Handler+0xaca>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10041a68:	1d3b      	adds	r3, r7, #4
10041a6a:	885b      	ldrh	r3, [r3, #2]
10041a6c:	001a      	movs	r2, r3
10041a6e:	2380      	movs	r3, #128	@ 0x80
10041a70:	00db      	lsls	r3, r3, #3
10041a72:	4013      	ands	r3, r2
10041a74:	d02b      	beq.n	10041ace <ButtonsMenuSM_Event_Handler+0x9ba>
10041a76:	1d3b      	adds	r3, r7, #4
10041a78:	885b      	ldrh	r3, [r3, #2]
10041a7a:	001a      	movs	r2, r3
10041a7c:	2304      	movs	r3, #4
10041a7e:	4013      	ands	r3, r2
10041a80:	d125      	bne.n	10041ace <ButtonsMenuSM_Event_Handler+0x9ba>
					if(!cursorpos){
10041a82:	4b26      	ldr	r3, [pc, #152]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041a84:	781b      	ldrb	r3, [r3, #0]
10041a86:	2b00      	cmp	r3, #0
10041a88:	d10d      	bne.n	10041aa6 <ButtonsMenuSM_Event_Handler+0x992>
						folderselect--;
10041a8a:	4b27      	ldr	r3, [pc, #156]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041a8c:	781b      	ldrb	r3, [r3, #0]
10041a8e:	3b01      	subs	r3, #1
10041a90:	b2da      	uxtb	r2, r3
10041a92:	4b25      	ldr	r3, [pc, #148]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041a94:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10041a96:	4b24      	ldr	r3, [pc, #144]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041a98:	781b      	ldrb	r3, [r3, #0]
10041a9a:	2bff      	cmp	r3, #255	@ 0xff
10041a9c:	d10d      	bne.n	10041aba <ButtonsMenuSM_Event_Handler+0x9a6>
							folderselect = 100;
10041a9e:	4b22      	ldr	r3, [pc, #136]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041aa0:	2264      	movs	r2, #100	@ 0x64
10041aa2:	701a      	strb	r2, [r3, #0]
10041aa4:	e009      	b.n	10041aba <ButtonsMenuSM_Event_Handler+0x9a6>
						}
					} else {
						trackselect--;
10041aa6:	4b21      	ldr	r3, [pc, #132]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
10041aa8:	781b      	ldrb	r3, [r3, #0]
10041aaa:	3b01      	subs	r3, #1
10041aac:	b2da      	uxtb	r2, r3
10041aae:	4b1f      	ldr	r3, [pc, #124]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
10041ab0:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10041ab2:	4b1e      	ldr	r3, [pc, #120]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
10041ab4:	781a      	ldrb	r2, [r3, #0]
10041ab6:	4b1d      	ldr	r3, [pc, #116]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
10041ab8:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10041aba:	4b18      	ldr	r3, [pc, #96]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041abc:	7818      	ldrb	r0, [r3, #0]
10041abe:	4b1a      	ldr	r3, [pc, #104]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041ac0:	7819      	ldrb	r1, [r3, #0]
10041ac2:	4b1a      	ldr	r3, [pc, #104]	@ (10041b2c <ButtonsMenuSM_Event_Handler+0xa18>)
10041ac4:	781b      	ldrb	r3, [r3, #0]
10041ac6:	001a      	movs	r2, r3
10041ac8:	f7ff f810 	bl	10040aec <DrawFolder>
10041acc:	e087      	b.n	10041bde <ButtonsMenuSM_Event_Handler+0xaca>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10041ace:	1d3b      	adds	r3, r7, #4
10041ad0:	885b      	ldrh	r3, [r3, #2]
10041ad2:	001a      	movs	r2, r3
10041ad4:	2380      	movs	r3, #128	@ 0x80
10041ad6:	011b      	lsls	r3, r3, #4
10041ad8:	4013      	ands	r3, r2
10041ada:	d03d      	beq.n	10041b58 <ButtonsMenuSM_Event_Handler+0xa44>
10041adc:	1d3b      	adds	r3, r7, #4
10041ade:	885b      	ldrh	r3, [r3, #2]
10041ae0:	001a      	movs	r2, r3
10041ae2:	2308      	movs	r3, #8
10041ae4:	4013      	ands	r3, r2
10041ae6:	d137      	bne.n	10041b58 <ButtonsMenuSM_Event_Handler+0xa44>
					if(!cursorpos){
10041ae8:	4b0c      	ldr	r3, [pc, #48]	@ (10041b1c <ButtonsMenuSM_Event_Handler+0xa08>)
10041aea:	781b      	ldrb	r3, [r3, #0]
10041aec:	2b00      	cmp	r3, #0
10041aee:	d11f      	bne.n	10041b30 <ButtonsMenuSM_Event_Handler+0xa1c>
						folderselect++;
10041af0:	4b0d      	ldr	r3, [pc, #52]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041af2:	781b      	ldrb	r3, [r3, #0]
10041af4:	3301      	adds	r3, #1
10041af6:	b2da      	uxtb	r2, r3
10041af8:	4b0b      	ldr	r3, [pc, #44]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041afa:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
10041afc:	4b0a      	ldr	r3, [pc, #40]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041afe:	781b      	ldrb	r3, [r3, #0]
10041b00:	2164      	movs	r1, #100	@ 0x64
10041b02:	0018      	movs	r0, r3
10041b04:	f7fe fc22 	bl	1004034c <__aeabi_uidivmod>
10041b08:	000b      	movs	r3, r1
10041b0a:	b2da      	uxtb	r2, r3
10041b0c:	4b06      	ldr	r3, [pc, #24]	@ (10041b28 <ButtonsMenuSM_Event_Handler+0xa14>)
10041b0e:	701a      	strb	r2, [r3, #0]
10041b10:	e018      	b.n	10041b44 <ButtonsMenuSM_Event_Handler+0xa30>
10041b12:	46c0      	nop			@ (mov r8, r8)
10041b14:	200003a3 	.word	0x200003a3
10041b18:	200003a4 	.word	0x200003a4
10041b1c:	2000039e 	.word	0x2000039e
10041b20:	200003a1 	.word	0x200003a1
10041b24:	200003a2 	.word	0x200003a2
10041b28:	2000039f 	.word	0x2000039f
10041b2c:	200003a0 	.word	0x200003a0
					} else {
						trackselect++;
10041b30:	4bdc      	ldr	r3, [pc, #880]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041b32:	781b      	ldrb	r3, [r3, #0]
10041b34:	3301      	adds	r3, #1
10041b36:	b2da      	uxtb	r2, r3
10041b38:	4bda      	ldr	r3, [pc, #872]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041b3a:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10041b3c:	4bd9      	ldr	r3, [pc, #868]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041b3e:	781a      	ldrb	r2, [r3, #0]
10041b40:	4bd8      	ldr	r3, [pc, #864]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041b42:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10041b44:	4bd8      	ldr	r3, [pc, #864]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041b46:	7818      	ldrb	r0, [r3, #0]
10041b48:	4bd8      	ldr	r3, [pc, #864]	@ (10041eac <ButtonsMenuSM_Event_Handler+0xd98>)
10041b4a:	7819      	ldrb	r1, [r3, #0]
10041b4c:	4bd5      	ldr	r3, [pc, #852]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041b4e:	781b      	ldrb	r3, [r3, #0]
10041b50:	001a      	movs	r2, r3
10041b52:	f7fe ffcb 	bl	10040aec <DrawFolder>
10041b56:	e042      	b.n	10041bde <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10041b58:	1d3b      	adds	r3, r7, #4
10041b5a:	885b      	ldrh	r3, [r3, #2]
10041b5c:	001a      	movs	r2, r3
10041b5e:	2380      	movs	r3, #128	@ 0x80
10041b60:	015b      	lsls	r3, r3, #5
10041b62:	4013      	ands	r3, r2
10041b64:	d017      	beq.n	10041b96 <ButtonsMenuSM_Event_Handler+0xa82>
10041b66:	1d3b      	adds	r3, r7, #4
10041b68:	885b      	ldrh	r3, [r3, #2]
10041b6a:	001a      	movs	r2, r3
10041b6c:	2310      	movs	r3, #16
10041b6e:	4013      	ands	r3, r2
10041b70:	d111      	bne.n	10041b96 <ButtonsMenuSM_Event_Handler+0xa82>
					cursorpos = !cursorpos;
10041b72:	4bcd      	ldr	r3, [pc, #820]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041b74:	781b      	ldrb	r3, [r3, #0]
10041b76:	425a      	negs	r2, r3
10041b78:	4153      	adcs	r3, r2
10041b7a:	b2db      	uxtb	r3, r3
10041b7c:	001a      	movs	r2, r3
10041b7e:	4bca      	ldr	r3, [pc, #808]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041b80:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10041b82:	4bc9      	ldr	r3, [pc, #804]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041b84:	7818      	ldrb	r0, [r3, #0]
10041b86:	4bc9      	ldr	r3, [pc, #804]	@ (10041eac <ButtonsMenuSM_Event_Handler+0xd98>)
10041b88:	7819      	ldrb	r1, [r3, #0]
10041b8a:	4bc6      	ldr	r3, [pc, #792]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041b8c:	781b      	ldrb	r3, [r3, #0]
10041b8e:	001a      	movs	r2, r3
10041b90:	f7fe ffac 	bl	10040aec <DrawFolder>
10041b94:	e023      	b.n	10041bde <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10041b96:	1d3b      	adds	r3, r7, #4
10041b98:	885b      	ldrh	r3, [r3, #2]
10041b9a:	001a      	movs	r2, r3
10041b9c:	2380      	movs	r3, #128	@ 0x80
10041b9e:	019b      	lsls	r3, r3, #6
10041ba0:	4013      	ands	r3, r2
10041ba2:	d101      	bne.n	10041ba8 <ButtonsMenuSM_Event_Handler+0xa94>
10041ba4:	f000 fc4e 	bl	10042444 <ButtonsMenuSM_Event_Handler+0x1330>
10041ba8:	1d3b      	adds	r3, r7, #4
10041baa:	885b      	ldrh	r3, [r3, #2]
10041bac:	001a      	movs	r2, r3
10041bae:	2320      	movs	r3, #32
10041bb0:	4013      	ands	r3, r2
10041bb2:	d001      	beq.n	10041bb8 <ButtonsMenuSM_Event_Handler+0xaa4>
10041bb4:	f000 fc46 	bl	10042444 <ButtonsMenuSM_Event_Handler+0x1330>
					cursorpos = !cursorpos;
10041bb8:	4bbb      	ldr	r3, [pc, #748]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041bba:	781b      	ldrb	r3, [r3, #0]
10041bbc:	425a      	negs	r2, r3
10041bbe:	4153      	adcs	r3, r2
10041bc0:	b2db      	uxtb	r3, r3
10041bc2:	001a      	movs	r2, r3
10041bc4:	4bb8      	ldr	r3, [pc, #736]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041bc6:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10041bc8:	4bb7      	ldr	r3, [pc, #732]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041bca:	7818      	ldrb	r0, [r3, #0]
10041bcc:	4bb7      	ldr	r3, [pc, #732]	@ (10041eac <ButtonsMenuSM_Event_Handler+0xd98>)
10041bce:	7819      	ldrb	r1, [r3, #0]
10041bd0:	4bb4      	ldr	r3, [pc, #720]	@ (10041ea4 <ButtonsMenuSM_Event_Handler+0xd90>)
10041bd2:	781b      	ldrb	r3, [r3, #0]
10041bd4:	001a      	movs	r2, r3
10041bd6:	f7fe ff89 	bl	10040aec <DrawFolder>
				}
			}
			break;
10041bda:	f000 fc33 	bl	10042444 <ButtonsMenuSM_Event_Handler+0x1330>
10041bde:	f000 fc31 	bl	10042444 <ButtonsMenuSM_Event_Handler+0x1330>
		case setTime:
			static int8_t minute;
			static int8_t hour;
			static int8_t day;
			static int8_t month;
			if(event.status == EVENT_ENTRY){
10041be2:	1d3b      	adds	r3, r7, #4
10041be4:	781b      	ldrb	r3, [r3, #0]
10041be6:	b25b      	sxtb	r3, r3
10041be8:	2b02      	cmp	r3, #2
10041bea:	d128      	bne.n	10041c3e <ButtonsMenuSM_Event_Handler+0xb2a>
				cursorpos = 0;
10041bec:	4bae      	ldr	r3, [pc, #696]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041bee:	2200      	movs	r2, #0
10041bf0:	701a      	strb	r2, [r3, #0]
				minute = 0;
10041bf2:	4baf      	ldr	r3, [pc, #700]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041bf4:	2200      	movs	r2, #0
10041bf6:	701a      	strb	r2, [r3, #0]
				hour = 0;
10041bf8:	4bae      	ldr	r3, [pc, #696]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041bfa:	2200      	movs	r2, #0
10041bfc:	701a      	strb	r2, [r3, #0]
				day = 0;
10041bfe:	4bae      	ldr	r3, [pc, #696]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041c00:	2200      	movs	r2, #0
10041c02:	701a      	strb	r2, [r3, #0]
				month = 0;
10041c04:	4bad      	ldr	r3, [pc, #692]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041c06:	2200      	movs	r2, #0
10041c08:	701a      	strb	r2, [r3, #0]
				DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10041c0a:	4ba7      	ldr	r3, [pc, #668]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041c0c:	7818      	ldrb	r0, [r3, #0]
10041c0e:	4bab      	ldr	r3, [pc, #684]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041c10:	781b      	ldrb	r3, [r3, #0]
10041c12:	b25b      	sxtb	r3, r3
10041c14:	b2db      	uxtb	r3, r3
10041c16:	3301      	adds	r3, #1
10041c18:	b2d9      	uxtb	r1, r3
10041c1a:	4ba7      	ldr	r3, [pc, #668]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041c1c:	781b      	ldrb	r3, [r3, #0]
10041c1e:	b25b      	sxtb	r3, r3
10041c20:	b2db      	uxtb	r3, r3
10041c22:	3301      	adds	r3, #1
10041c24:	b2da      	uxtb	r2, r3
10041c26:	4ba3      	ldr	r3, [pc, #652]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041c28:	781b      	ldrb	r3, [r3, #0]
10041c2a:	b25b      	sxtb	r3, r3
10041c2c:	b2dc      	uxtb	r4, r3
10041c2e:	4ba0      	ldr	r3, [pc, #640]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041c30:	781b      	ldrb	r3, [r3, #0]
10041c32:	b25b      	sxtb	r3, r3
10041c34:	b2db      	uxtb	r3, r3
10041c36:	9300      	str	r3, [sp, #0]
10041c38:	0023      	movs	r3, r4
10041c3a:	f7fe ffff 	bl	10040c3c <DrawSetTime>
			}
			if(event.status == EVENT_BUTTONS){
10041c3e:	1d3b      	adds	r3, r7, #4
10041c40:	781b      	ldrb	r3, [r3, #0]
10041c42:	b25b      	sxtb	r3, r3
10041c44:	2b04      	cmp	r3, #4
10041c46:	d001      	beq.n	10041c4c <ButtonsMenuSM_Event_Handler+0xb38>
10041c48:	f000 fbfe 	bl	10042448 <ButtonsMenuSM_Event_Handler+0x1334>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10041c4c:	1d3b      	adds	r3, r7, #4
10041c4e:	885b      	ldrh	r3, [r3, #2]
10041c50:	001a      	movs	r2, r3
10041c52:	2380      	movs	r3, #128	@ 0x80
10041c54:	005b      	lsls	r3, r3, #1
10041c56:	4013      	ands	r3, r2
10041c58:	d00e      	beq.n	10041c78 <ButtonsMenuSM_Event_Handler+0xb64>
10041c5a:	1d3b      	adds	r3, r7, #4
10041c5c:	885b      	ldrh	r3, [r3, #2]
10041c5e:	001a      	movs	r2, r3
10041c60:	2301      	movs	r3, #1
10041c62:	4013      	ands	r3, r2
10041c64:	d108      	bne.n	10041c78 <ButtonsMenuSM_Event_Handler+0xb64>
					//discountprintf("moving to main, back");
					nextstate = main;
10041c66:	2326      	movs	r3, #38	@ 0x26
10041c68:	18fb      	adds	r3, r7, r3
10041c6a:	2200      	movs	r2, #0
10041c6c:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041c6e:	2327      	movs	r3, #39	@ 0x27
10041c70:	18fb      	adds	r3, r7, r3
10041c72:	2201      	movs	r2, #1
10041c74:	701a      	strb	r2, [r3, #0]
10041c76:	e253      	b.n	10042120 <ButtonsMenuSM_Event_Handler+0x100c>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10041c78:	1d3b      	adds	r3, r7, #4
10041c7a:	885b      	ldrh	r3, [r3, #2]
10041c7c:	001a      	movs	r2, r3
10041c7e:	2380      	movs	r3, #128	@ 0x80
10041c80:	009b      	lsls	r3, r3, #2
10041c82:	4013      	ands	r3, r2
10041c84:	d100      	bne.n	10041c88 <ButtonsMenuSM_Event_Handler+0xb74>
10041c86:	e094      	b.n	10041db2 <ButtonsMenuSM_Event_Handler+0xc9e>
10041c88:	1d3b      	adds	r3, r7, #4
10041c8a:	885b      	ldrh	r3, [r3, #2]
10041c8c:	001a      	movs	r2, r3
10041c8e:	2302      	movs	r3, #2
10041c90:	4013      	ands	r3, r2
10041c92:	d000      	beq.n	10041c96 <ButtonsMenuSM_Event_Handler+0xb82>
10041c94:	e08d      	b.n	10041db2 <ButtonsMenuSM_Event_Handler+0xc9e>
					//discountprintf("moving to main, select");
					month++;
10041c96:	4b89      	ldr	r3, [pc, #548]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041c98:	781b      	ldrb	r3, [r3, #0]
10041c9a:	b25b      	sxtb	r3, r3
10041c9c:	b2db      	uxtb	r3, r3
10041c9e:	3301      	adds	r3, #1
10041ca0:	b2db      	uxtb	r3, r3
10041ca2:	b25a      	sxtb	r2, r3
10041ca4:	4b85      	ldr	r3, [pc, #532]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041ca6:	701a      	strb	r2, [r3, #0]
					I2C_Transmit(RTCADDRESS, RTCSECADDR, 0);
10041ca8:	2200      	movs	r2, #0
10041caa:	2100      	movs	r1, #0
10041cac:	206f      	movs	r0, #111	@ 0x6f
10041cae:	f001 ff3f 	bl	10043b30 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMINADDR, ((minute/10)<<4)|minute%10);
10041cb2:	4b7f      	ldr	r3, [pc, #508]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041cb4:	781b      	ldrb	r3, [r3, #0]
10041cb6:	b25b      	sxtb	r3, r3
10041cb8:	210a      	movs	r1, #10
10041cba:	0018      	movs	r0, r3
10041cbc:	f7fe fb4a 	bl	10040354 <__divsi3>
10041cc0:	0003      	movs	r3, r0
10041cc2:	b25b      	sxtb	r3, r3
10041cc4:	011b      	lsls	r3, r3, #4
10041cc6:	b25c      	sxtb	r4, r3
10041cc8:	4b79      	ldr	r3, [pc, #484]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041cca:	781b      	ldrb	r3, [r3, #0]
10041ccc:	b25b      	sxtb	r3, r3
10041cce:	210a      	movs	r1, #10
10041cd0:	0018      	movs	r0, r3
10041cd2:	f7fe fc25 	bl	10040520 <__aeabi_idivmod>
10041cd6:	000b      	movs	r3, r1
10041cd8:	b25b      	sxtb	r3, r3
10041cda:	4323      	orrs	r3, r4
10041cdc:	b25b      	sxtb	r3, r3
10041cde:	b2db      	uxtb	r3, r3
10041ce0:	001a      	movs	r2, r3
10041ce2:	2101      	movs	r1, #1
10041ce4:	206f      	movs	r0, #111	@ 0x6f
10041ce6:	f001 ff23 	bl	10043b30 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCHOURADDR, 0b01000000|((hour/10)<<4)|hour%10);
10041cea:	4b72      	ldr	r3, [pc, #456]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041cec:	781b      	ldrb	r3, [r3, #0]
10041cee:	b25b      	sxtb	r3, r3
10041cf0:	210a      	movs	r1, #10
10041cf2:	0018      	movs	r0, r3
10041cf4:	f7fe fb2e 	bl	10040354 <__divsi3>
10041cf8:	0003      	movs	r3, r0
10041cfa:	b25b      	sxtb	r3, r3
10041cfc:	011b      	lsls	r3, r3, #4
10041cfe:	b25b      	sxtb	r3, r3
10041d00:	2240      	movs	r2, #64	@ 0x40
10041d02:	4313      	orrs	r3, r2
10041d04:	b25c      	sxtb	r4, r3
10041d06:	4b6b      	ldr	r3, [pc, #428]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041d08:	781b      	ldrb	r3, [r3, #0]
10041d0a:	b25b      	sxtb	r3, r3
10041d0c:	210a      	movs	r1, #10
10041d0e:	0018      	movs	r0, r3
10041d10:	f7fe fc06 	bl	10040520 <__aeabi_idivmod>
10041d14:	000b      	movs	r3, r1
10041d16:	b25b      	sxtb	r3, r3
10041d18:	4323      	orrs	r3, r4
10041d1a:	b25b      	sxtb	r3, r3
10041d1c:	b2db      	uxtb	r3, r3
10041d1e:	001a      	movs	r2, r3
10041d20:	2102      	movs	r1, #2
10041d22:	206f      	movs	r0, #111	@ 0x6f
10041d24:	f001 ff04 	bl	10043b30 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCDAYADDR, (((day+1)/10)<<4)|(day+1)%10);
10041d28:	4b63      	ldr	r3, [pc, #396]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041d2a:	781b      	ldrb	r3, [r3, #0]
10041d2c:	b25b      	sxtb	r3, r3
10041d2e:	3301      	adds	r3, #1
10041d30:	210a      	movs	r1, #10
10041d32:	0018      	movs	r0, r3
10041d34:	f7fe fb0e 	bl	10040354 <__divsi3>
10041d38:	0003      	movs	r3, r0
10041d3a:	b25b      	sxtb	r3, r3
10041d3c:	011b      	lsls	r3, r3, #4
10041d3e:	b25c      	sxtb	r4, r3
10041d40:	4b5d      	ldr	r3, [pc, #372]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041d42:	781b      	ldrb	r3, [r3, #0]
10041d44:	b25b      	sxtb	r3, r3
10041d46:	3301      	adds	r3, #1
10041d48:	210a      	movs	r1, #10
10041d4a:	0018      	movs	r0, r3
10041d4c:	f7fe fbe8 	bl	10040520 <__aeabi_idivmod>
10041d50:	000b      	movs	r3, r1
10041d52:	b25b      	sxtb	r3, r3
10041d54:	4323      	orrs	r3, r4
10041d56:	b25b      	sxtb	r3, r3
10041d58:	b2db      	uxtb	r3, r3
10041d5a:	001a      	movs	r2, r3
10041d5c:	2104      	movs	r1, #4
10041d5e:	206f      	movs	r0, #111	@ 0x6f
10041d60:	f001 fee6 	bl	10043b30 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMNTHADDR, (((month+1)/10)<<4)|(month+1)%10);
10041d64:	4b55      	ldr	r3, [pc, #340]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041d66:	781b      	ldrb	r3, [r3, #0]
10041d68:	b25b      	sxtb	r3, r3
10041d6a:	3301      	adds	r3, #1
10041d6c:	210a      	movs	r1, #10
10041d6e:	0018      	movs	r0, r3
10041d70:	f7fe faf0 	bl	10040354 <__divsi3>
10041d74:	0003      	movs	r3, r0
10041d76:	b25b      	sxtb	r3, r3
10041d78:	011b      	lsls	r3, r3, #4
10041d7a:	b25c      	sxtb	r4, r3
10041d7c:	4b4f      	ldr	r3, [pc, #316]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041d7e:	781b      	ldrb	r3, [r3, #0]
10041d80:	b25b      	sxtb	r3, r3
10041d82:	3301      	adds	r3, #1
10041d84:	210a      	movs	r1, #10
10041d86:	0018      	movs	r0, r3
10041d88:	f7fe fbca 	bl	10040520 <__aeabi_idivmod>
10041d8c:	000b      	movs	r3, r1
10041d8e:	b25b      	sxtb	r3, r3
10041d90:	4323      	orrs	r3, r4
10041d92:	b25b      	sxtb	r3, r3
10041d94:	b2db      	uxtb	r3, r3
10041d96:	001a      	movs	r2, r3
10041d98:	2105      	movs	r1, #5
10041d9a:	206f      	movs	r0, #111	@ 0x6f
10041d9c:	f001 fec8 	bl	10043b30 <I2C_Transmit>
					nextstate = main;
10041da0:	2326      	movs	r3, #38	@ 0x26
10041da2:	18fb      	adds	r3, r7, r3
10041da4:	2200      	movs	r2, #0
10041da6:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041da8:	2327      	movs	r3, #39	@ 0x27
10041daa:	18fb      	adds	r3, r7, r3
10041dac:	2201      	movs	r2, #1
10041dae:	701a      	strb	r2, [r3, #0]
10041db0:	e1b6      	b.n	10042120 <ButtonsMenuSM_Event_Handler+0x100c>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10041db2:	1d3b      	adds	r3, r7, #4
10041db4:	885b      	ldrh	r3, [r3, #2]
10041db6:	001a      	movs	r2, r3
10041db8:	2380      	movs	r3, #128	@ 0x80
10041dba:	00db      	lsls	r3, r3, #3
10041dbc:	4013      	ands	r3, r2
10041dbe:	d100      	bne.n	10041dc2 <ButtonsMenuSM_Event_Handler+0xcae>
10041dc0:	e09e      	b.n	10041f00 <ButtonsMenuSM_Event_Handler+0xdec>
10041dc2:	1d3b      	adds	r3, r7, #4
10041dc4:	885b      	ldrh	r3, [r3, #2]
10041dc6:	001a      	movs	r2, r3
10041dc8:	2304      	movs	r3, #4
10041dca:	4013      	ands	r3, r2
10041dcc:	d000      	beq.n	10041dd0 <ButtonsMenuSM_Event_Handler+0xcbc>
10041dce:	e097      	b.n	10041f00 <ButtonsMenuSM_Event_Handler+0xdec>
					switch(cursorpos){
10041dd0:	4b35      	ldr	r3, [pc, #212]	@ (10041ea8 <ButtonsMenuSM_Event_Handler+0xd94>)
10041dd2:	781b      	ldrb	r3, [r3, #0]
10041dd4:	2b03      	cmp	r3, #3
10041dd6:	d040      	beq.n	10041e5a <ButtonsMenuSM_Event_Handler+0xd46>
10041dd8:	dd00      	ble.n	10041ddc <ButtonsMenuSM_Event_Handler+0xcc8>
10041dda:	e076      	b.n	10041eca <ButtonsMenuSM_Event_Handler+0xdb6>
10041ddc:	2b02      	cmp	r3, #2
10041dde:	d02a      	beq.n	10041e36 <ButtonsMenuSM_Event_Handler+0xd22>
10041de0:	dd00      	ble.n	10041de4 <ButtonsMenuSM_Event_Handler+0xcd0>
10041de2:	e072      	b.n	10041eca <ButtonsMenuSM_Event_Handler+0xdb6>
10041de4:	2b00      	cmp	r3, #0
10041de6:	d002      	beq.n	10041dee <ButtonsMenuSM_Event_Handler+0xcda>
10041de8:	2b01      	cmp	r3, #1
10041dea:	d012      	beq.n	10041e12 <ButtonsMenuSM_Event_Handler+0xcfe>
10041dec:	e06d      	b.n	10041eca <ButtonsMenuSM_Event_Handler+0xdb6>
					case 0:
						month--;
10041dee:	4b33      	ldr	r3, [pc, #204]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041df0:	781b      	ldrb	r3, [r3, #0]
10041df2:	b25b      	sxtb	r3, r3
10041df4:	b2db      	uxtb	r3, r3
10041df6:	3b01      	subs	r3, #1
10041df8:	b2db      	uxtb	r3, r3
10041dfa:	b25a      	sxtb	r2, r3
10041dfc:	4b2f      	ldr	r3, [pc, #188]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041dfe:	701a      	strb	r2, [r3, #0]
						if(month < 0){
10041e00:	4b2e      	ldr	r3, [pc, #184]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041e02:	781b      	ldrb	r3, [r3, #0]
10041e04:	b25b      	sxtb	r3, r3
10041e06:	2b00      	cmp	r3, #0
10041e08:	da4a      	bge.n	10041ea0 <ButtonsMenuSM_Event_Handler+0xd8c>
							month = 11;
10041e0a:	4b2c      	ldr	r3, [pc, #176]	@ (10041ebc <ButtonsMenuSM_Event_Handler+0xda8>)
10041e0c:	220b      	movs	r2, #11
10041e0e:	701a      	strb	r2, [r3, #0]
						}
						break;
10041e10:	e046      	b.n	10041ea0 <ButtonsMenuSM_Event_Handler+0xd8c>
					case 1:
						day--;
10041e12:	4b29      	ldr	r3, [pc, #164]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041e14:	781b      	ldrb	r3, [r3, #0]
10041e16:	b25b      	sxtb	r3, r3
10041e18:	b2db      	uxtb	r3, r3
10041e1a:	3b01      	subs	r3, #1
10041e1c:	b2db      	uxtb	r3, r3
10041e1e:	b25a      	sxtb	r2, r3
10041e20:	4b25      	ldr	r3, [pc, #148]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041e22:	701a      	strb	r2, [r3, #0]
						if(day < 0){
10041e24:	4b24      	ldr	r3, [pc, #144]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041e26:	781b      	ldrb	r3, [r3, #0]
10041e28:	b25b      	sxtb	r3, r3
10041e2a:	2b00      	cmp	r3, #0
10041e2c:	da48      	bge.n	10041ec0 <ButtonsMenuSM_Event_Handler+0xdac>
							day = 30;
10041e2e:	4b22      	ldr	r3, [pc, #136]	@ (10041eb8 <ButtonsMenuSM_Event_Handler+0xda4>)
10041e30:	221e      	movs	r2, #30
10041e32:	701a      	strb	r2, [r3, #0]
						}
						break;
10041e34:	e044      	b.n	10041ec0 <ButtonsMenuSM_Event_Handler+0xdac>
					case 2:
						hour--;
10041e36:	4b1f      	ldr	r3, [pc, #124]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e38:	781b      	ldrb	r3, [r3, #0]
10041e3a:	b25b      	sxtb	r3, r3
10041e3c:	b2db      	uxtb	r3, r3
10041e3e:	3b01      	subs	r3, #1
10041e40:	b2db      	uxtb	r3, r3
10041e42:	b25a      	sxtb	r2, r3
10041e44:	4b1b      	ldr	r3, [pc, #108]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e46:	701a      	strb	r2, [r3, #0]
						if(hour < 0){
10041e48:	4b1a      	ldr	r3, [pc, #104]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e4a:	781b      	ldrb	r3, [r3, #0]
10041e4c:	b25b      	sxtb	r3, r3
10041e4e:	2b00      	cmp	r3, #0
10041e50:	da38      	bge.n	10041ec4 <ButtonsMenuSM_Event_Handler+0xdb0>
							hour = 23;
10041e52:	4b18      	ldr	r3, [pc, #96]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e54:	2217      	movs	r2, #23
10041e56:	701a      	strb	r2, [r3, #0]
						}
						break;
10041e58:	e034      	b.n	10041ec4 <ButtonsMenuSM_Event_Handler+0xdb0>
					case 3:
						minute--;
10041e5a:	4b15      	ldr	r3, [pc, #84]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041e5c:	781b      	ldrb	r3, [r3, #0]
10041e5e:	b25b      	sxtb	r3, r3
10041e60:	b2db      	uxtb	r3, r3
10041e62:	3b01      	subs	r3, #1
10041e64:	b2db      	uxtb	r3, r3
10041e66:	b25a      	sxtb	r2, r3
10041e68:	4b11      	ldr	r3, [pc, #68]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041e6a:	701a      	strb	r2, [r3, #0]
						if(minute < 0){
10041e6c:	4b10      	ldr	r3, [pc, #64]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041e6e:	781b      	ldrb	r3, [r3, #0]
10041e70:	b25b      	sxtb	r3, r3
10041e72:	2b00      	cmp	r3, #0
10041e74:	da28      	bge.n	10041ec8 <ButtonsMenuSM_Event_Handler+0xdb4>
							minute = 59;
10041e76:	4b0e      	ldr	r3, [pc, #56]	@ (10041eb0 <ButtonsMenuSM_Event_Handler+0xd9c>)
10041e78:	223b      	movs	r2, #59	@ 0x3b
10041e7a:	701a      	strb	r2, [r3, #0]
							hour--;
10041e7c:	4b0d      	ldr	r3, [pc, #52]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e7e:	781b      	ldrb	r3, [r3, #0]
10041e80:	b25b      	sxtb	r3, r3
10041e82:	b2db      	uxtb	r3, r3
10041e84:	3b01      	subs	r3, #1
10041e86:	b2db      	uxtb	r3, r3
10041e88:	b25a      	sxtb	r2, r3
10041e8a:	4b0a      	ldr	r3, [pc, #40]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e8c:	701a      	strb	r2, [r3, #0]
							if(hour < 0){
10041e8e:	4b09      	ldr	r3, [pc, #36]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e90:	781b      	ldrb	r3, [r3, #0]
10041e92:	b25b      	sxtb	r3, r3
10041e94:	2b00      	cmp	r3, #0
10041e96:	da17      	bge.n	10041ec8 <ButtonsMenuSM_Event_Handler+0xdb4>
								hour = 23;
10041e98:	4b06      	ldr	r3, [pc, #24]	@ (10041eb4 <ButtonsMenuSM_Event_Handler+0xda0>)
10041e9a:	2217      	movs	r2, #23
10041e9c:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
10041e9e:	e013      	b.n	10041ec8 <ButtonsMenuSM_Event_Handler+0xdb4>
						break;
10041ea0:	46c0      	nop			@ (mov r8, r8)
10041ea2:	e012      	b.n	10041eca <ButtonsMenuSM_Event_Handler+0xdb6>
10041ea4:	200003a0 	.word	0x200003a0
10041ea8:	2000039e 	.word	0x2000039e
10041eac:	2000039f 	.word	0x2000039f
10041eb0:	200003b1 	.word	0x200003b1
10041eb4:	200003b2 	.word	0x200003b2
10041eb8:	200003b3 	.word	0x200003b3
10041ebc:	200003b4 	.word	0x200003b4
						break;
10041ec0:	46c0      	nop			@ (mov r8, r8)
10041ec2:	e002      	b.n	10041eca <ButtonsMenuSM_Event_Handler+0xdb6>
						break;
10041ec4:	46c0      	nop			@ (mov r8, r8)
10041ec6:	e000      	b.n	10041eca <ButtonsMenuSM_Event_Handler+0xdb6>
						break;
10041ec8:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10041eca:	4bce      	ldr	r3, [pc, #824]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10041ecc:	7818      	ldrb	r0, [r3, #0]
10041ece:	4bce      	ldr	r3, [pc, #824]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10041ed0:	781b      	ldrb	r3, [r3, #0]
10041ed2:	b25b      	sxtb	r3, r3
10041ed4:	b2db      	uxtb	r3, r3
10041ed6:	3301      	adds	r3, #1
10041ed8:	b2d9      	uxtb	r1, r3
10041eda:	4bcc      	ldr	r3, [pc, #816]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
10041edc:	781b      	ldrb	r3, [r3, #0]
10041ede:	b25b      	sxtb	r3, r3
10041ee0:	b2db      	uxtb	r3, r3
10041ee2:	3301      	adds	r3, #1
10041ee4:	b2da      	uxtb	r2, r3
10041ee6:	4bca      	ldr	r3, [pc, #808]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041ee8:	781b      	ldrb	r3, [r3, #0]
10041eea:	b25b      	sxtb	r3, r3
10041eec:	b2dc      	uxtb	r4, r3
10041eee:	4bc9      	ldr	r3, [pc, #804]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10041ef0:	781b      	ldrb	r3, [r3, #0]
10041ef2:	b25b      	sxtb	r3, r3
10041ef4:	b2db      	uxtb	r3, r3
10041ef6:	9300      	str	r3, [sp, #0]
10041ef8:	0023      	movs	r3, r4
10041efa:	f7fe fe9f 	bl	10040c3c <DrawSetTime>
					break;
10041efe:	e2a6      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10041f00:	1d3b      	adds	r3, r7, #4
10041f02:	885b      	ldrh	r3, [r3, #2]
10041f04:	001a      	movs	r2, r3
10041f06:	2380      	movs	r3, #128	@ 0x80
10041f08:	011b      	lsls	r3, r3, #4
10041f0a:	4013      	ands	r3, r2
10041f0c:	d100      	bne.n	10041f10 <ButtonsMenuSM_Event_Handler+0xdfc>
10041f0e:	e09b      	b.n	10042048 <ButtonsMenuSM_Event_Handler+0xf34>
10041f10:	1d3b      	adds	r3, r7, #4
10041f12:	885b      	ldrh	r3, [r3, #2]
10041f14:	001a      	movs	r2, r3
10041f16:	2308      	movs	r3, #8
10041f18:	4013      	ands	r3, r2
10041f1a:	d000      	beq.n	10041f1e <ButtonsMenuSM_Event_Handler+0xe0a>
10041f1c:	e094      	b.n	10042048 <ButtonsMenuSM_Event_Handler+0xf34>
					switch(cursorpos){
10041f1e:	4bb9      	ldr	r3, [pc, #740]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10041f20:	781b      	ldrb	r3, [r3, #0]
10041f22:	2b03      	cmp	r3, #3
10041f24:	d048      	beq.n	10041fb8 <ButtonsMenuSM_Event_Handler+0xea4>
10041f26:	dd00      	ble.n	10041f2a <ButtonsMenuSM_Event_Handler+0xe16>
10041f28:	e073      	b.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
10041f2a:	2b02      	cmp	r3, #2
10041f2c:	d02f      	beq.n	10041f8e <ButtonsMenuSM_Event_Handler+0xe7a>
10041f2e:	dc70      	bgt.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
10041f30:	2b00      	cmp	r3, #0
10041f32:	d002      	beq.n	10041f3a <ButtonsMenuSM_Event_Handler+0xe26>
10041f34:	2b01      	cmp	r3, #1
10041f36:	d015      	beq.n	10041f64 <ButtonsMenuSM_Event_Handler+0xe50>
10041f38:	e06b      	b.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
					case 0:
						month++;
10041f3a:	4bb3      	ldr	r3, [pc, #716]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10041f3c:	781b      	ldrb	r3, [r3, #0]
10041f3e:	b25b      	sxtb	r3, r3
10041f40:	b2db      	uxtb	r3, r3
10041f42:	3301      	adds	r3, #1
10041f44:	b2db      	uxtb	r3, r3
10041f46:	b25a      	sxtb	r2, r3
10041f48:	4baf      	ldr	r3, [pc, #700]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10041f4a:	701a      	strb	r2, [r3, #0]
						month %= 12;
10041f4c:	4bae      	ldr	r3, [pc, #696]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10041f4e:	781b      	ldrb	r3, [r3, #0]
10041f50:	b25b      	sxtb	r3, r3
10041f52:	210c      	movs	r1, #12
10041f54:	0018      	movs	r0, r3
10041f56:	f7fe fae3 	bl	10040520 <__aeabi_idivmod>
10041f5a:	000b      	movs	r3, r1
10041f5c:	b25a      	sxtb	r2, r3
10041f5e:	4baa      	ldr	r3, [pc, #680]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10041f60:	701a      	strb	r2, [r3, #0]
						break;
10041f62:	e056      	b.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
					case 1:
						day++;
10041f64:	4ba9      	ldr	r3, [pc, #676]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
10041f66:	781b      	ldrb	r3, [r3, #0]
10041f68:	b25b      	sxtb	r3, r3
10041f6a:	b2db      	uxtb	r3, r3
10041f6c:	3301      	adds	r3, #1
10041f6e:	b2db      	uxtb	r3, r3
10041f70:	b25a      	sxtb	r2, r3
10041f72:	4ba6      	ldr	r3, [pc, #664]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
10041f74:	701a      	strb	r2, [r3, #0]
						day%= 31;
10041f76:	4ba5      	ldr	r3, [pc, #660]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
10041f78:	781b      	ldrb	r3, [r3, #0]
10041f7a:	b25b      	sxtb	r3, r3
10041f7c:	211f      	movs	r1, #31
10041f7e:	0018      	movs	r0, r3
10041f80:	f7fe face 	bl	10040520 <__aeabi_idivmod>
10041f84:	000b      	movs	r3, r1
10041f86:	b25a      	sxtb	r2, r3
10041f88:	4ba0      	ldr	r3, [pc, #640]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
10041f8a:	701a      	strb	r2, [r3, #0]
						break;
10041f8c:	e041      	b.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
					case 2:
						hour++;
10041f8e:	4ba0      	ldr	r3, [pc, #640]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041f90:	781b      	ldrb	r3, [r3, #0]
10041f92:	b25b      	sxtb	r3, r3
10041f94:	b2db      	uxtb	r3, r3
10041f96:	3301      	adds	r3, #1
10041f98:	b2db      	uxtb	r3, r3
10041f9a:	b25a      	sxtb	r2, r3
10041f9c:	4b9c      	ldr	r3, [pc, #624]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041f9e:	701a      	strb	r2, [r3, #0]
						hour %= 24;
10041fa0:	4b9b      	ldr	r3, [pc, #620]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041fa2:	781b      	ldrb	r3, [r3, #0]
10041fa4:	b25b      	sxtb	r3, r3
10041fa6:	2118      	movs	r1, #24
10041fa8:	0018      	movs	r0, r3
10041faa:	f7fe fab9 	bl	10040520 <__aeabi_idivmod>
10041fae:	000b      	movs	r3, r1
10041fb0:	b25a      	sxtb	r2, r3
10041fb2:	4b97      	ldr	r3, [pc, #604]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041fb4:	701a      	strb	r2, [r3, #0]
						break;
10041fb6:	e02c      	b.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
					case 3:
						minute++;
10041fb8:	4b96      	ldr	r3, [pc, #600]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10041fba:	781b      	ldrb	r3, [r3, #0]
10041fbc:	b25b      	sxtb	r3, r3
10041fbe:	b2db      	uxtb	r3, r3
10041fc0:	3301      	adds	r3, #1
10041fc2:	b2db      	uxtb	r3, r3
10041fc4:	b25a      	sxtb	r2, r3
10041fc6:	4b93      	ldr	r3, [pc, #588]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10041fc8:	701a      	strb	r2, [r3, #0]
						minute%=60;
10041fca:	4b92      	ldr	r3, [pc, #584]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10041fcc:	781b      	ldrb	r3, [r3, #0]
10041fce:	b25b      	sxtb	r3, r3
10041fd0:	213c      	movs	r1, #60	@ 0x3c
10041fd2:	0018      	movs	r0, r3
10041fd4:	f7fe faa4 	bl	10040520 <__aeabi_idivmod>
10041fd8:	000b      	movs	r3, r1
10041fda:	b25a      	sxtb	r2, r3
10041fdc:	4b8d      	ldr	r3, [pc, #564]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10041fde:	701a      	strb	r2, [r3, #0]
						if(minute == 0){
10041fe0:	4b8c      	ldr	r3, [pc, #560]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10041fe2:	781b      	ldrb	r3, [r3, #0]
10041fe4:	b25b      	sxtb	r3, r3
10041fe6:	2b00      	cmp	r3, #0
10041fe8:	d113      	bne.n	10042012 <ButtonsMenuSM_Event_Handler+0xefe>
							hour++;
10041fea:	4b89      	ldr	r3, [pc, #548]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041fec:	781b      	ldrb	r3, [r3, #0]
10041fee:	b25b      	sxtb	r3, r3
10041ff0:	b2db      	uxtb	r3, r3
10041ff2:	3301      	adds	r3, #1
10041ff4:	b2db      	uxtb	r3, r3
10041ff6:	b25a      	sxtb	r2, r3
10041ff8:	4b85      	ldr	r3, [pc, #532]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041ffa:	701a      	strb	r2, [r3, #0]
							hour %= 24;
10041ffc:	4b84      	ldr	r3, [pc, #528]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10041ffe:	781b      	ldrb	r3, [r3, #0]
10042000:	b25b      	sxtb	r3, r3
10042002:	2118      	movs	r1, #24
10042004:	0018      	movs	r0, r3
10042006:	f7fe fa8b 	bl	10040520 <__aeabi_idivmod>
1004200a:	000b      	movs	r3, r1
1004200c:	b25a      	sxtb	r2, r3
1004200e:	4b80      	ldr	r3, [pc, #512]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10042010:	701a      	strb	r2, [r3, #0]
						}
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10042012:	4b7c      	ldr	r3, [pc, #496]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10042014:	7818      	ldrb	r0, [r3, #0]
10042016:	4b7c      	ldr	r3, [pc, #496]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10042018:	781b      	ldrb	r3, [r3, #0]
1004201a:	b25b      	sxtb	r3, r3
1004201c:	b2db      	uxtb	r3, r3
1004201e:	3301      	adds	r3, #1
10042020:	b2d9      	uxtb	r1, r3
10042022:	4b7a      	ldr	r3, [pc, #488]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
10042024:	781b      	ldrb	r3, [r3, #0]
10042026:	b25b      	sxtb	r3, r3
10042028:	b2db      	uxtb	r3, r3
1004202a:	3301      	adds	r3, #1
1004202c:	b2da      	uxtb	r2, r3
1004202e:	4b78      	ldr	r3, [pc, #480]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10042030:	781b      	ldrb	r3, [r3, #0]
10042032:	b25b      	sxtb	r3, r3
10042034:	b2dc      	uxtb	r4, r3
10042036:	4b77      	ldr	r3, [pc, #476]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10042038:	781b      	ldrb	r3, [r3, #0]
1004203a:	b25b      	sxtb	r3, r3
1004203c:	b2db      	uxtb	r3, r3
1004203e:	9300      	str	r3, [sp, #0]
10042040:	0023      	movs	r3, r4
10042042:	f7fe fdfb 	bl	10040c3c <DrawSetTime>
10042046:	e06b      	b.n	10042120 <ButtonsMenuSM_Event_Handler+0x100c>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042048:	1d3b      	adds	r3, r7, #4
1004204a:	885b      	ldrh	r3, [r3, #2]
1004204c:	001a      	movs	r2, r3
1004204e:	2380      	movs	r3, #128	@ 0x80
10042050:	015b      	lsls	r3, r3, #5
10042052:	4013      	ands	r3, r2
10042054:	d02d      	beq.n	100420b2 <ButtonsMenuSM_Event_Handler+0xf9e>
10042056:	1d3b      	adds	r3, r7, #4
10042058:	885b      	ldrh	r3, [r3, #2]
1004205a:	001a      	movs	r2, r3
1004205c:	2310      	movs	r3, #16
1004205e:	4013      	ands	r3, r2
10042060:	d127      	bne.n	100420b2 <ButtonsMenuSM_Event_Handler+0xf9e>
					cursorpos--;
10042062:	4b68      	ldr	r3, [pc, #416]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10042064:	781b      	ldrb	r3, [r3, #0]
10042066:	3b01      	subs	r3, #1
10042068:	b2da      	uxtb	r2, r3
1004206a:	4b66      	ldr	r3, [pc, #408]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
1004206c:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
1004206e:	4b65      	ldr	r3, [pc, #404]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10042070:	781b      	ldrb	r3, [r3, #0]
10042072:	2bff      	cmp	r3, #255	@ 0xff
10042074:	d102      	bne.n	1004207c <ButtonsMenuSM_Event_Handler+0xf68>
						cursorpos = 3;
10042076:	4b63      	ldr	r3, [pc, #396]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10042078:	2203      	movs	r2, #3
1004207a:	701a      	strb	r2, [r3, #0]
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
1004207c:	4b61      	ldr	r3, [pc, #388]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
1004207e:	7818      	ldrb	r0, [r3, #0]
10042080:	4b61      	ldr	r3, [pc, #388]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
10042082:	781b      	ldrb	r3, [r3, #0]
10042084:	b25b      	sxtb	r3, r3
10042086:	b2db      	uxtb	r3, r3
10042088:	3301      	adds	r3, #1
1004208a:	b2d9      	uxtb	r1, r3
1004208c:	4b5f      	ldr	r3, [pc, #380]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
1004208e:	781b      	ldrb	r3, [r3, #0]
10042090:	b25b      	sxtb	r3, r3
10042092:	b2db      	uxtb	r3, r3
10042094:	3301      	adds	r3, #1
10042096:	b2da      	uxtb	r2, r3
10042098:	4b5d      	ldr	r3, [pc, #372]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
1004209a:	781b      	ldrb	r3, [r3, #0]
1004209c:	b25b      	sxtb	r3, r3
1004209e:	b2dc      	uxtb	r4, r3
100420a0:	4b5c      	ldr	r3, [pc, #368]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
100420a2:	781b      	ldrb	r3, [r3, #0]
100420a4:	b25b      	sxtb	r3, r3
100420a6:	b2db      	uxtb	r3, r3
100420a8:	9300      	str	r3, [sp, #0]
100420aa:	0023      	movs	r3, r4
100420ac:	f7fe fdc6 	bl	10040c3c <DrawSetTime>
100420b0:	e036      	b.n	10042120 <ButtonsMenuSM_Event_Handler+0x100c>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100420b2:	1d3b      	adds	r3, r7, #4
100420b4:	885b      	ldrh	r3, [r3, #2]
100420b6:	001a      	movs	r2, r3
100420b8:	2380      	movs	r3, #128	@ 0x80
100420ba:	019b      	lsls	r3, r3, #6
100420bc:	4013      	ands	r3, r2
100420be:	d100      	bne.n	100420c2 <ButtonsMenuSM_Event_Handler+0xfae>
100420c0:	e1c2      	b.n	10042448 <ButtonsMenuSM_Event_Handler+0x1334>
100420c2:	1d3b      	adds	r3, r7, #4
100420c4:	885b      	ldrh	r3, [r3, #2]
100420c6:	001a      	movs	r2, r3
100420c8:	2320      	movs	r3, #32
100420ca:	4013      	ands	r3, r2
100420cc:	d000      	beq.n	100420d0 <ButtonsMenuSM_Event_Handler+0xfbc>
100420ce:	e1bb      	b.n	10042448 <ButtonsMenuSM_Event_Handler+0x1334>
					cursorpos++;
100420d0:	4b4c      	ldr	r3, [pc, #304]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100420d2:	781b      	ldrb	r3, [r3, #0]
100420d4:	3301      	adds	r3, #1
100420d6:	b2da      	uxtb	r2, r3
100420d8:	4b4a      	ldr	r3, [pc, #296]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100420da:	701a      	strb	r2, [r3, #0]
					cursorpos %= 4;
100420dc:	4b49      	ldr	r3, [pc, #292]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100420de:	781b      	ldrb	r3, [r3, #0]
100420e0:	2203      	movs	r2, #3
100420e2:	4013      	ands	r3, r2
100420e4:	b2da      	uxtb	r2, r3
100420e6:	4b47      	ldr	r3, [pc, #284]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100420e8:	701a      	strb	r2, [r3, #0]
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
100420ea:	4b46      	ldr	r3, [pc, #280]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100420ec:	7818      	ldrb	r0, [r3, #0]
100420ee:	4b46      	ldr	r3, [pc, #280]	@ (10042208 <ButtonsMenuSM_Event_Handler+0x10f4>)
100420f0:	781b      	ldrb	r3, [r3, #0]
100420f2:	b25b      	sxtb	r3, r3
100420f4:	b2db      	uxtb	r3, r3
100420f6:	3301      	adds	r3, #1
100420f8:	b2d9      	uxtb	r1, r3
100420fa:	4b44      	ldr	r3, [pc, #272]	@ (1004220c <ButtonsMenuSM_Event_Handler+0x10f8>)
100420fc:	781b      	ldrb	r3, [r3, #0]
100420fe:	b25b      	sxtb	r3, r3
10042100:	b2db      	uxtb	r3, r3
10042102:	3301      	adds	r3, #1
10042104:	b2da      	uxtb	r2, r3
10042106:	4b42      	ldr	r3, [pc, #264]	@ (10042210 <ButtonsMenuSM_Event_Handler+0x10fc>)
10042108:	781b      	ldrb	r3, [r3, #0]
1004210a:	b25b      	sxtb	r3, r3
1004210c:	b2dc      	uxtb	r4, r3
1004210e:	4b41      	ldr	r3, [pc, #260]	@ (10042214 <ButtonsMenuSM_Event_Handler+0x1100>)
10042110:	781b      	ldrb	r3, [r3, #0]
10042112:	b25b      	sxtb	r3, r3
10042114:	b2db      	uxtb	r3, r3
10042116:	9300      	str	r3, [sp, #0]
10042118:	0023      	movs	r3, r4
1004211a:	f7fe fd8f 	bl	10040c3c <DrawSetTime>
				}
			}
			break;
1004211e:	e193      	b.n	10042448 <ButtonsMenuSM_Event_Handler+0x1334>
10042120:	e192      	b.n	10042448 <ButtonsMenuSM_Event_Handler+0x1334>
		case options:
			if(event.status == EVENT_ENTRY){
10042122:	1d3b      	adds	r3, r7, #4
10042124:	781b      	ldrb	r3, [r3, #0]
10042126:	b25b      	sxtb	r3, r3
10042128:	2b02      	cmp	r3, #2
1004212a:	d10b      	bne.n	10042144 <ButtonsMenuSM_Event_Handler+0x1030>
				cursorpos = 0;
1004212c:	4b35      	ldr	r3, [pc, #212]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
1004212e:	2200      	movs	r2, #0
10042130:	701a      	strb	r2, [r3, #0]

				DrawOptions(cursorpos, FLASH_GetDutyCycle());
10042132:	4b34      	ldr	r3, [pc, #208]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10042134:	781c      	ldrb	r4, [r3, #0]
10042136:	f000 ffcb 	bl	100430d0 <FLASH_GetDutyCycle>
1004213a:	0003      	movs	r3, r0
1004213c:	0019      	movs	r1, r3
1004213e:	0020      	movs	r0, r4
10042140:	f7fe fd22 	bl	10040b88 <DrawOptions>
			}
			if(event.status == EVENT_BUTTONS){
10042144:	1d3b      	adds	r3, r7, #4
10042146:	781b      	ldrb	r3, [r3, #0]
10042148:	b25b      	sxtb	r3, r3
1004214a:	2b04      	cmp	r3, #4
1004214c:	d000      	beq.n	10042150 <ButtonsMenuSM_Event_Handler+0x103c>
1004214e:	e17d      	b.n	1004244c <ButtonsMenuSM_Event_Handler+0x1338>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042150:	1d3b      	adds	r3, r7, #4
10042152:	885b      	ldrh	r3, [r3, #2]
10042154:	001a      	movs	r2, r3
10042156:	2380      	movs	r3, #128	@ 0x80
10042158:	005b      	lsls	r3, r3, #1
1004215a:	4013      	ands	r3, r2
1004215c:	d00e      	beq.n	1004217c <ButtonsMenuSM_Event_Handler+0x1068>
1004215e:	1d3b      	adds	r3, r7, #4
10042160:	885b      	ldrh	r3, [r3, #2]
10042162:	001a      	movs	r2, r3
10042164:	2301      	movs	r3, #1
10042166:	4013      	ands	r3, r2
10042168:	d108      	bne.n	1004217c <ButtonsMenuSM_Event_Handler+0x1068>
					//discountprintf("moving to main");
					nextstate = main;
1004216a:	2326      	movs	r3, #38	@ 0x26
1004216c:	18fb      	adds	r3, r7, r3
1004216e:	2200      	movs	r2, #0
10042170:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042172:	2327      	movs	r3, #39	@ 0x27
10042174:	18fb      	adds	r3, r7, r3
10042176:	2201      	movs	r2, #1
10042178:	701a      	strb	r2, [r3, #0]
1004217a:	e15a      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
1004217c:	1d3b      	adds	r3, r7, #4
1004217e:	885b      	ldrh	r3, [r3, #2]
10042180:	001a      	movs	r2, r3
10042182:	2380      	movs	r3, #128	@ 0x80
10042184:	009b      	lsls	r3, r3, #2
10042186:	4013      	ands	r3, r2
10042188:	d014      	beq.n	100421b4 <ButtonsMenuSM_Event_Handler+0x10a0>
1004218a:	1d3b      	adds	r3, r7, #4
1004218c:	885b      	ldrh	r3, [r3, #2]
1004218e:	001a      	movs	r2, r3
10042190:	2302      	movs	r3, #2
10042192:	4013      	ands	r3, r2
10042194:	d10e      	bne.n	100421b4 <ButtonsMenuSM_Event_Handler+0x10a0>
					//discountprintf("moving to main");
					if(cursorpos == 2){
10042196:	4b1b      	ldr	r3, [pc, #108]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
10042198:	781b      	ldrb	r3, [r3, #0]
1004219a:	2b02      	cmp	r3, #2
1004219c:	d101      	bne.n	100421a2 <ButtonsMenuSM_Event_Handler+0x108e>
						FLASH_ClearSchedule();
1004219e:	f001 f96d 	bl	1004347c <FLASH_ClearSchedule>
					}
					nextstate = main;
100421a2:	2326      	movs	r3, #38	@ 0x26
100421a4:	18fb      	adds	r3, r7, r3
100421a6:	2200      	movs	r2, #0
100421a8:	701a      	strb	r2, [r3, #0]
					transition = 1;
100421aa:	2327      	movs	r3, #39	@ 0x27
100421ac:	18fb      	adds	r3, r7, r3
100421ae:	2201      	movs	r2, #1
100421b0:	701a      	strb	r2, [r3, #0]
100421b2:	e13e      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100421b4:	1d3b      	adds	r3, r7, #4
100421b6:	885b      	ldrh	r3, [r3, #2]
100421b8:	001a      	movs	r2, r3
100421ba:	2380      	movs	r3, #128	@ 0x80
100421bc:	00db      	lsls	r3, r3, #3
100421be:	4013      	ands	r3, r2
100421c0:	d02a      	beq.n	10042218 <ButtonsMenuSM_Event_Handler+0x1104>
100421c2:	1d3b      	adds	r3, r7, #4
100421c4:	885b      	ldrh	r3, [r3, #2]
100421c6:	001a      	movs	r2, r3
100421c8:	2304      	movs	r3, #4
100421ca:	4013      	ands	r3, r2
100421cc:	d124      	bne.n	10042218 <ButtonsMenuSM_Event_Handler+0x1104>
					cursorpos++;
100421ce:	4b0d      	ldr	r3, [pc, #52]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100421d0:	781b      	ldrb	r3, [r3, #0]
100421d2:	3301      	adds	r3, #1
100421d4:	b2da      	uxtb	r2, r3
100421d6:	4b0b      	ldr	r3, [pc, #44]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100421d8:	701a      	strb	r2, [r3, #0]
					cursorpos %= 3;
100421da:	4b0a      	ldr	r3, [pc, #40]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100421dc:	781b      	ldrb	r3, [r3, #0]
100421de:	2103      	movs	r1, #3
100421e0:	0018      	movs	r0, r3
100421e2:	f7fe f8b3 	bl	1004034c <__aeabi_uidivmod>
100421e6:	000b      	movs	r3, r1
100421e8:	b2da      	uxtb	r2, r3
100421ea:	4b06      	ldr	r3, [pc, #24]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100421ec:	701a      	strb	r2, [r3, #0]
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
100421ee:	4b05      	ldr	r3, [pc, #20]	@ (10042204 <ButtonsMenuSM_Event_Handler+0x10f0>)
100421f0:	781c      	ldrb	r4, [r3, #0]
100421f2:	f000 ff6d 	bl	100430d0 <FLASH_GetDutyCycle>
100421f6:	0003      	movs	r3, r0
100421f8:	0019      	movs	r1, r3
100421fa:	0020      	movs	r0, r4
100421fc:	f7fe fcc4 	bl	10040b88 <DrawOptions>
10042200:	e117      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
10042202:	46c0      	nop			@ (mov r8, r8)
10042204:	2000039e 	.word	0x2000039e
10042208:	200003b4 	.word	0x200003b4
1004220c:	200003b3 	.word	0x200003b3
10042210:	200003b2 	.word	0x200003b2
10042214:	200003b1 	.word	0x200003b1
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042218:	1d3b      	adds	r3, r7, #4
1004221a:	885b      	ldrh	r3, [r3, #2]
1004221c:	001a      	movs	r2, r3
1004221e:	2380      	movs	r3, #128	@ 0x80
10042220:	011b      	lsls	r3, r3, #4
10042222:	4013      	ands	r3, r2
10042224:	d01c      	beq.n	10042260 <ButtonsMenuSM_Event_Handler+0x114c>
10042226:	1d3b      	adds	r3, r7, #4
10042228:	885b      	ldrh	r3, [r3, #2]
1004222a:	001a      	movs	r2, r3
1004222c:	2308      	movs	r3, #8
1004222e:	4013      	ands	r3, r2
10042230:	d116      	bne.n	10042260 <ButtonsMenuSM_Event_Handler+0x114c>
					cursorpos--;
10042232:	4b99      	ldr	r3, [pc, #612]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
10042234:	781b      	ldrb	r3, [r3, #0]
10042236:	3b01      	subs	r3, #1
10042238:	b2da      	uxtb	r2, r3
1004223a:	4b97      	ldr	r3, [pc, #604]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
1004223c:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
1004223e:	4b96      	ldr	r3, [pc, #600]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
10042240:	781b      	ldrb	r3, [r3, #0]
10042242:	2bff      	cmp	r3, #255	@ 0xff
10042244:	d102      	bne.n	1004224c <ButtonsMenuSM_Event_Handler+0x1138>
						cursorpos = 2;
10042246:	4b94      	ldr	r3, [pc, #592]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
10042248:	2202      	movs	r2, #2
1004224a:	701a      	strb	r2, [r3, #0]
					}
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
1004224c:	4b92      	ldr	r3, [pc, #584]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
1004224e:	781c      	ldrb	r4, [r3, #0]
10042250:	f000 ff3e 	bl	100430d0 <FLASH_GetDutyCycle>
10042254:	0003      	movs	r3, r0
10042256:	0019      	movs	r1, r3
10042258:	0020      	movs	r0, r4
1004225a:	f7fe fc95 	bl	10040b88 <DrawOptions>
					break;
1004225e:	e0f6      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042260:	1d3b      	adds	r3, r7, #4
10042262:	885b      	ldrh	r3, [r3, #2]
10042264:	001a      	movs	r2, r3
10042266:	2380      	movs	r3, #128	@ 0x80
10042268:	015b      	lsls	r3, r3, #5
1004226a:	4013      	ands	r3, r2
1004226c:	d06c      	beq.n	10042348 <ButtonsMenuSM_Event_Handler+0x1234>
1004226e:	1d3b      	adds	r3, r7, #4
10042270:	885b      	ldrh	r3, [r3, #2]
10042272:	001a      	movs	r2, r3
10042274:	2310      	movs	r3, #16
10042276:	4013      	ands	r3, r2
10042278:	d166      	bne.n	10042348 <ButtonsMenuSM_Event_Handler+0x1234>
					switch(cursorpos){
1004227a:	4b87      	ldr	r3, [pc, #540]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
1004227c:	781b      	ldrb	r3, [r3, #0]
1004227e:	2b00      	cmp	r3, #0
10042280:	d002      	beq.n	10042288 <ButtonsMenuSM_Event_Handler+0x1174>
10042282:	2b01      	cmp	r3, #1
10042284:	d02e      	beq.n	100422e4 <ButtonsMenuSM_Event_Handler+0x11d0>
						LPUART_WriteTx(0x00);
						LPUART_WriteTx(accumulation);//checksum
						LPUART_WriteTx(0xEF);//start flag
						break;
					default:
						break;
10042286:	e05e      	b.n	10042346 <ButtonsMenuSM_Event_Handler+0x1232>
						int8_t dc = FLASH_GetDutyCycle()-1;
10042288:	f000 ff22 	bl	100430d0 <FLASH_GetDutyCycle>
1004228c:	0003      	movs	r3, r0
1004228e:	3b01      	subs	r3, #1
10042290:	b2da      	uxtb	r2, r3
10042292:	2424      	movs	r4, #36	@ 0x24
10042294:	193b      	adds	r3, r7, r4
10042296:	701a      	strb	r2, [r3, #0]
						if(dc < 0){
10042298:	193b      	adds	r3, r7, r4
1004229a:	781b      	ldrb	r3, [r3, #0]
1004229c:	2b7f      	cmp	r3, #127	@ 0x7f
1004229e:	d90d      	bls.n	100422bc <ButtonsMenuSM_Event_Handler+0x11a8>
							dc = 0;
100422a0:	193b      	adds	r3, r7, r4
100422a2:	2200      	movs	r2, #0
100422a4:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100422a6:	f000 fefd 	bl	100430a4 <FLASH_GetVolume>
100422aa:	0003      	movs	r3, r0
100422ac:	001a      	movs	r2, r3
100422ae:	193b      	adds	r3, r7, r4
100422b0:	781b      	ldrb	r3, [r3, #0]
100422b2:	0019      	movs	r1, r3
100422b4:	0010      	movs	r0, r2
100422b6:	f000 feb3 	bl	10043020 <FLASH_SetDCVol>
						break;
100422ba:	e044      	b.n	10042346 <ButtonsMenuSM_Event_Handler+0x1232>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100422bc:	f000 fef2 	bl	100430a4 <FLASH_GetVolume>
100422c0:	0003      	movs	r3, r0
100422c2:	001a      	movs	r2, r3
100422c4:	2424      	movs	r4, #36	@ 0x24
100422c6:	193b      	adds	r3, r7, r4
100422c8:	781b      	ldrb	r3, [r3, #0]
100422ca:	0019      	movs	r1, r3
100422cc:	0010      	movs	r0, r2
100422ce:	f000 fea7 	bl	10043020 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100422d2:	4b71      	ldr	r3, [pc, #452]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
100422d4:	781a      	ldrb	r2, [r3, #0]
100422d6:	193b      	adds	r3, r7, r4
100422d8:	781b      	ldrb	r3, [r3, #0]
100422da:	0019      	movs	r1, r3
100422dc:	0010      	movs	r0, r2
100422de:	f7fe fc53 	bl	10040b88 <DrawOptions>
						break;
100422e2:	e030      	b.n	10042346 <ButtonsMenuSM_Event_Handler+0x1232>
						uint8_t accumulation = 0;
100422e4:	2425      	movs	r4, #37	@ 0x25
100422e6:	193b      	adds	r3, r7, r4
100422e8:	2200      	movs	r2, #0
100422ea:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x7E);//start flag
100422ec:	207e      	movs	r0, #126	@ 0x7e
100422ee:	f003 f809 	bl	10045304 <LPUART_WriteTx>
						accumulation += 0xFF;
100422f2:	193b      	adds	r3, r7, r4
100422f4:	193a      	adds	r2, r7, r4
100422f6:	7812      	ldrb	r2, [r2, #0]
100422f8:	3a01      	subs	r2, #1
100422fa:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0xFF);//Version?
100422fc:	20ff      	movs	r0, #255	@ 0xff
100422fe:	f003 f801 	bl	10045304 <LPUART_WriteTx>
						accumulation += 0x06;
10042302:	193b      	adds	r3, r7, r4
10042304:	193a      	adds	r2, r7, r4
10042306:	7812      	ldrb	r2, [r2, #0]
10042308:	3206      	adds	r2, #6
1004230a:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x06);//length
1004230c:	2006      	movs	r0, #6
1004230e:	f002 fff9 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0x02);//Previous track command
10042312:	2002      	movs	r0, #2
10042314:	f002 fff6 	bl	10045304 <LPUART_WriteTx>
						accumulation += 0x02;
10042318:	193b      	adds	r3, r7, r4
1004231a:	193a      	adds	r2, r7, r4
1004231c:	7812      	ldrb	r2, [r2, #0]
1004231e:	3202      	adds	r2, #2
10042320:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x00);
10042322:	2000      	movs	r0, #0
10042324:	f002 ffee 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10042328:	2000      	movs	r0, #0
1004232a:	f002 ffeb 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
1004232e:	2000      	movs	r0, #0
10042330:	f002 ffe8 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(accumulation);//checksum
10042334:	193b      	adds	r3, r7, r4
10042336:	781b      	ldrb	r3, [r3, #0]
10042338:	0018      	movs	r0, r3
1004233a:	f002 ffe3 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0xEF);//start flag
1004233e:	20ef      	movs	r0, #239	@ 0xef
10042340:	f002 ffe0 	bl	10045304 <LPUART_WriteTx>
						break;
10042344:	46c0      	nop			@ (mov r8, r8)
					switch(cursorpos){
10042346:	e074      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
					}
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042348:	1d3b      	adds	r3, r7, #4
1004234a:	885b      	ldrh	r3, [r3, #2]
1004234c:	001a      	movs	r2, r3
1004234e:	2380      	movs	r3, #128	@ 0x80
10042350:	019b      	lsls	r3, r3, #6
10042352:	4013      	ands	r3, r2
10042354:	d100      	bne.n	10042358 <ButtonsMenuSM_Event_Handler+0x1244>
10042356:	e079      	b.n	1004244c <ButtonsMenuSM_Event_Handler+0x1338>
10042358:	1d3b      	adds	r3, r7, #4
1004235a:	885b      	ldrh	r3, [r3, #2]
1004235c:	001a      	movs	r2, r3
1004235e:	2320      	movs	r3, #32
10042360:	4013      	ands	r3, r2
10042362:	d000      	beq.n	10042366 <ButtonsMenuSM_Event_Handler+0x1252>
10042364:	e072      	b.n	1004244c <ButtonsMenuSM_Event_Handler+0x1338>
					switch(cursorpos){
10042366:	4b4c      	ldr	r3, [pc, #304]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
10042368:	781b      	ldrb	r3, [r3, #0]
1004236a:	2b00      	cmp	r3, #0
1004236c:	d002      	beq.n	10042374 <ButtonsMenuSM_Event_Handler+0x1260>
1004236e:	2b01      	cmp	r3, #1
10042370:	d02e      	beq.n	100423d0 <ButtonsMenuSM_Event_Handler+0x12bc>
						LPUART_WriteTx(0x00);
						LPUART_WriteTx(accumulation);//checksum
						LPUART_WriteTx(0xEF);//start flag
						break;
					default:
						break;
10042372:	e05e      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
						uint8_t dc = FLASH_GetDutyCycle()+1;
10042374:	f000 feac 	bl	100430d0 <FLASH_GetDutyCycle>
10042378:	0003      	movs	r3, r0
1004237a:	001a      	movs	r2, r3
1004237c:	2422      	movs	r4, #34	@ 0x22
1004237e:	193b      	adds	r3, r7, r4
10042380:	3201      	adds	r2, #1
10042382:	701a      	strb	r2, [r3, #0]
						if(dc > 100){
10042384:	193b      	adds	r3, r7, r4
10042386:	781b      	ldrb	r3, [r3, #0]
10042388:	2b64      	cmp	r3, #100	@ 0x64
1004238a:	d90d      	bls.n	100423a8 <ButtonsMenuSM_Event_Handler+0x1294>
							dc = 100;
1004238c:	193b      	adds	r3, r7, r4
1004238e:	2264      	movs	r2, #100	@ 0x64
10042390:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10042392:	f000 fe87 	bl	100430a4 <FLASH_GetVolume>
10042396:	0003      	movs	r3, r0
10042398:	001a      	movs	r2, r3
1004239a:	193b      	adds	r3, r7, r4
1004239c:	781b      	ldrb	r3, [r3, #0]
1004239e:	0019      	movs	r1, r3
100423a0:	0010      	movs	r0, r2
100423a2:	f000 fe3d 	bl	10043020 <FLASH_SetDCVol>
						break;
100423a6:	e044      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100423a8:	f000 fe7c 	bl	100430a4 <FLASH_GetVolume>
100423ac:	0003      	movs	r3, r0
100423ae:	001a      	movs	r2, r3
100423b0:	2422      	movs	r4, #34	@ 0x22
100423b2:	193b      	adds	r3, r7, r4
100423b4:	781b      	ldrb	r3, [r3, #0]
100423b6:	0019      	movs	r1, r3
100423b8:	0010      	movs	r0, r2
100423ba:	f000 fe31 	bl	10043020 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100423be:	4b36      	ldr	r3, [pc, #216]	@ (10042498 <ButtonsMenuSM_Event_Handler+0x1384>)
100423c0:	781a      	ldrb	r2, [r3, #0]
100423c2:	193b      	adds	r3, r7, r4
100423c4:	781b      	ldrb	r3, [r3, #0]
100423c6:	0019      	movs	r1, r3
100423c8:	0010      	movs	r0, r2
100423ca:	f7fe fbdd 	bl	10040b88 <DrawOptions>
						break;
100423ce:	e030      	b.n	10042432 <ButtonsMenuSM_Event_Handler+0x131e>
						uint8_t accumulation = 0;
100423d0:	2423      	movs	r4, #35	@ 0x23
100423d2:	193b      	adds	r3, r7, r4
100423d4:	2200      	movs	r2, #0
100423d6:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x7E);//start flag
100423d8:	207e      	movs	r0, #126	@ 0x7e
100423da:	f002 ff93 	bl	10045304 <LPUART_WriteTx>
						accumulation += 0xFF;
100423de:	193b      	adds	r3, r7, r4
100423e0:	193a      	adds	r2, r7, r4
100423e2:	7812      	ldrb	r2, [r2, #0]
100423e4:	3a01      	subs	r2, #1
100423e6:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0xFF);//Version?
100423e8:	20ff      	movs	r0, #255	@ 0xff
100423ea:	f002 ff8b 	bl	10045304 <LPUART_WriteTx>
						accumulation += 0x06;
100423ee:	193b      	adds	r3, r7, r4
100423f0:	193a      	adds	r2, r7, r4
100423f2:	7812      	ldrb	r2, [r2, #0]
100423f4:	3206      	adds	r2, #6
100423f6:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x06);//length
100423f8:	2006      	movs	r0, #6
100423fa:	f002 ff83 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0x01);//next track command
100423fe:	2001      	movs	r0, #1
10042400:	f002 ff80 	bl	10045304 <LPUART_WriteTx>
						accumulation += 0x01;
10042404:	193b      	adds	r3, r7, r4
10042406:	193a      	adds	r2, r7, r4
10042408:	7812      	ldrb	r2, [r2, #0]
1004240a:	3201      	adds	r2, #1
1004240c:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x00);
1004240e:	2000      	movs	r0, #0
10042410:	f002 ff78 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10042414:	2000      	movs	r0, #0
10042416:	f002 ff75 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
1004241a:	2000      	movs	r0, #0
1004241c:	f002 ff72 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(accumulation);//checksum
10042420:	193b      	adds	r3, r7, r4
10042422:	781b      	ldrb	r3, [r3, #0]
10042424:	0018      	movs	r0, r3
10042426:	f002 ff6d 	bl	10045304 <LPUART_WriteTx>
						LPUART_WriteTx(0xEF);//start flag
1004242a:	20ef      	movs	r0, #239	@ 0xef
1004242c:	f002 ff6a 	bl	10045304 <LPUART_WriteTx>
						break;
10042430:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			break;
10042432:	e00b      	b.n	1004244c <ButtonsMenuSM_Event_Handler+0x1338>
		default:
			break;
10042434:	46c0      	nop			@ (mov r8, r8)
10042436:	e00a      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			break;
10042438:	46c0      	nop			@ (mov r8, r8)
1004243a:	e008      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			break;
1004243c:	46c0      	nop			@ (mov r8, r8)
1004243e:	e006      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			break;
10042440:	46c0      	nop			@ (mov r8, r8)
10042442:	e004      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			break;
10042444:	46c0      	nop			@ (mov r8, r8)
10042446:	e002      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			break;
10042448:	46c0      	nop			@ (mov r8, r8)
1004244a:	e000      	b.n	1004244e <ButtonsMenuSM_Event_Handler+0x133a>
			break;
1004244c:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if(transition){
1004244e:	2327      	movs	r3, #39	@ 0x27
10042450:	18fb      	adds	r3, r7, r3
10042452:	781b      	ldrb	r3, [r3, #0]
10042454:	2b00      	cmp	r3, #0
10042456:	d01a      	beq.n	1004248e <ButtonsMenuSM_Event_Handler+0x137a>
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_EXIT});
10042458:	2110      	movs	r1, #16
1004245a:	187b      	adds	r3, r7, r1
1004245c:	2200      	movs	r2, #0
1004245e:	601a      	str	r2, [r3, #0]
10042460:	187b      	adds	r3, r7, r1
10042462:	2203      	movs	r2, #3
10042464:	701a      	strb	r2, [r3, #0]
10042466:	187b      	adds	r3, r7, r1
10042468:	6818      	ldr	r0, [r3, #0]
1004246a:	f7fe fe53 	bl	10041114 <ButtonsMenuSM_Event_Handler>
		BMState = nextstate;
1004246e:	4b0b      	ldr	r3, [pc, #44]	@ (1004249c <ButtonsMenuSM_Event_Handler+0x1388>)
10042470:	2226      	movs	r2, #38	@ 0x26
10042472:	18ba      	adds	r2, r7, r2
10042474:	7812      	ldrb	r2, [r2, #0]
10042476:	701a      	strb	r2, [r3, #0]
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_ENTRY});
10042478:	210c      	movs	r1, #12
1004247a:	187b      	adds	r3, r7, r1
1004247c:	2200      	movs	r2, #0
1004247e:	601a      	str	r2, [r3, #0]
10042480:	187b      	adds	r3, r7, r1
10042482:	2202      	movs	r2, #2
10042484:	701a      	strb	r2, [r3, #0]
10042486:	187b      	adds	r3, r7, r1
10042488:	6818      	ldr	r0, [r3, #0]
1004248a:	f7fe fe43 	bl	10041114 <ButtonsMenuSM_Event_Handler>
	}
    return 1;
1004248e:	2301      	movs	r3, #1
}
10042490:	0018      	movs	r0, r3
10042492:	46bd      	mov	sp, r7
10042494:	b00b      	add	sp, #44	@ 0x2c
10042496:	bd90      	pop	{r4, r7, pc}
10042498:	2000039e 	.word	0x2000039e
1004249c:	2000039c 	.word	0x2000039c

100424a0 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
100424a0:	b580      	push	{r7, lr}
100424a2:	b084      	sub	sp, #16
100424a4:	af00      	add	r7, sp, #0
100424a6:	6078      	str	r0, [r7, #4]
	commSM = init;
100424a8:	4b0c      	ldr	r3, [pc, #48]	@ (100424dc <COMM_Event_Init+0x3c>)
100424aa:	2200      	movs	r2, #0
100424ac:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
100424ae:	4b0c      	ldr	r3, [pc, #48]	@ (100424e0 <COMM_Event_Init+0x40>)
100424b0:	687a      	ldr	r2, [r7, #4]
100424b2:	601a      	str	r2, [r3, #0]
	UARTs_Init();
100424b4:	f002 fe76 	bl	100451a4 <UARTs_Init>
	FLASH_Init();
100424b8:	f000 fd32 	bl	10042f20 <FLASH_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
100424bc:	210c      	movs	r1, #12
100424be:	187b      	adds	r3, r7, r1
100424c0:	2201      	movs	r2, #1
100424c2:	701a      	strb	r2, [r3, #0]
100424c4:	187b      	adds	r3, r7, r1
100424c6:	2200      	movs	r2, #0
100424c8:	805a      	strh	r2, [r3, #2]
100424ca:	187b      	adds	r3, r7, r1
100424cc:	6818      	ldr	r0, [r3, #0]
100424ce:	f000 f809 	bl	100424e4 <COMM_Event_Post>
	return INIT_OK;
100424d2:	2301      	movs	r3, #1
}
100424d4:	0018      	movs	r0, r3
100424d6:	46bd      	mov	sp, r7
100424d8:	b004      	add	sp, #16
100424da:	bd80      	pop	{r7, pc}
100424dc:	200003b5 	.word	0x200003b5
100424e0:	200003b8 	.word	0x200003b8

100424e4 <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
100424e4:	b580      	push	{r7, lr}
100424e6:	b082      	sub	sp, #8
100424e8:	af00      	add	r7, sp, #0
100424ea:	1d3b      	adds	r3, r7, #4
100424ec:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
100424ee:	4b05      	ldr	r3, [pc, #20]	@ (10042504 <COMM_Event_Post+0x20>)
100424f0:	681a      	ldr	r2, [r3, #0]
100424f2:	1d3b      	adds	r3, r7, #4
100424f4:	6819      	ldr	r1, [r3, #0]
100424f6:	0010      	movs	r0, r2
100424f8:	f000 fc7d 	bl	10042df6 <FIFO_Enqueue>
}
100424fc:	46c0      	nop			@ (mov r8, r8)
100424fe:	46bd      	mov	sp, r7
10042500:	b002      	add	sp, #8
10042502:	bd80      	pop	{r7, pc}
10042504:	200003b8 	.word	0x200003b8

10042508 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
10042508:	b5f0      	push	{r4, r5, r6, r7, lr}
1004250a:	b087      	sub	sp, #28
1004250c:	af00      	add	r7, sp, #0
	uint8_t event = 0;
1004250e:	2317      	movs	r3, #23
10042510:	18fb      	adds	r3, r7, r3
10042512:	2200      	movs	r2, #0
10042514:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
10042516:	250c      	movs	r5, #12
10042518:	197b      	adds	r3, r7, r5
1004251a:	2200      	movs	r2, #0
1004251c:	701a      	strb	r2, [r3, #0]
1004251e:	197b      	adds	r3, r7, r5
10042520:	2200      	movs	r2, #0
10042522:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
10042524:	2616      	movs	r6, #22
10042526:	19bc      	adds	r4, r7, r6
10042528:	f002 ff36 	bl	10045398 <USART_ReadRx>
1004252c:	0003      	movs	r3, r0
1004252e:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
10042530:	0031      	movs	r1, r6
10042532:	187b      	adds	r3, r7, r1
10042534:	781b      	ldrb	r3, [r3, #0]
10042536:	2b25      	cmp	r3, #37	@ 0x25
10042538:	d00b      	beq.n	10042552 <COMM_Event_Updater+0x4a>
    	event = 1;
1004253a:	2317      	movs	r3, #23
1004253c:	18fb      	adds	r3, r7, r3
1004253e:	2201      	movs	r2, #1
10042540:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
10042542:	197b      	adds	r3, r7, r5
10042544:	2206      	movs	r2, #6
10042546:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
10042548:	187b      	adds	r3, r7, r1
1004254a:	781b      	ldrb	r3, [r3, #0]
1004254c:	b29a      	uxth	r2, r3
1004254e:	197b      	adds	r3, r7, r5
10042550:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
10042552:	4b1f      	ldr	r3, [pc, #124]	@ (100425d0 <COMM_Event_Updater+0xc8>)
10042554:	781b      	ldrb	r3, [r3, #0]
10042556:	2b01      	cmp	r3, #1
10042558:	d115      	bne.n	10042586 <COMM_Event_Updater+0x7e>
    	if(USART_TxEmpty() || BLUETOOTH_BufferEmpty() == 1){
1004255a:	f002 ff38 	bl	100453ce <USART_TxEmpty>
1004255e:	1e03      	subs	r3, r0, #0
10042560:	d104      	bne.n	1004256c <COMM_Event_Updater+0x64>
10042562:	f7fe f9ef 	bl	10040944 <BLUETOOTH_BufferEmpty>
10042566:	0003      	movs	r3, r0
10042568:	2b01      	cmp	r3, #1
1004256a:	d10c      	bne.n	10042586 <COMM_Event_Updater+0x7e>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
1004256c:	4b19      	ldr	r3, [pc, #100]	@ (100425d4 <COMM_Event_Updater+0xcc>)
1004256e:	681a      	ldr	r2, [r3, #0]
10042570:	1d3b      	adds	r3, r7, #4
10042572:	2107      	movs	r1, #7
10042574:	7019      	strb	r1, [r3, #0]
10042576:	1d3b      	adds	r3, r7, #4
10042578:	2100      	movs	r1, #0
1004257a:	8059      	strh	r1, [r3, #2]
1004257c:	1d3b      	adds	r3, r7, #4
1004257e:	6819      	ldr	r1, [r3, #0]
10042580:	0010      	movs	r0, r2
10042582:	f000 fc38 	bl	10042df6 <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
10042586:	2317      	movs	r3, #23
10042588:	18fb      	adds	r3, r7, r3
1004258a:	781b      	ldrb	r3, [r3, #0]
1004258c:	2b00      	cmp	r3, #0
1004258e:	d007      	beq.n	100425a0 <COMM_Event_Updater+0x98>
10042590:	4b10      	ldr	r3, [pc, #64]	@ (100425d4 <COMM_Event_Updater+0xcc>)
10042592:	681a      	ldr	r2, [r3, #0]
10042594:	230c      	movs	r3, #12
10042596:	18fb      	adds	r3, r7, r3
10042598:	6819      	ldr	r1, [r3, #0]
1004259a:	0010      	movs	r0, r2
1004259c:	f000 fc2b 	bl	10042df6 <FIFO_Enqueue>
    return out;
100425a0:	2110      	movs	r1, #16
100425a2:	187b      	adds	r3, r7, r1
100425a4:	220c      	movs	r2, #12
100425a6:	18ba      	adds	r2, r7, r2
100425a8:	6812      	ldr	r2, [r2, #0]
100425aa:	601a      	str	r2, [r3, #0]
100425ac:	187a      	adds	r2, r7, r1
100425ae:	2300      	movs	r3, #0
100425b0:	8811      	ldrh	r1, [r2, #0]
100425b2:	0409      	lsls	r1, r1, #16
100425b4:	0c09      	lsrs	r1, r1, #16
100425b6:	0c1b      	lsrs	r3, r3, #16
100425b8:	041b      	lsls	r3, r3, #16
100425ba:	430b      	orrs	r3, r1
100425bc:	8852      	ldrh	r2, [r2, #2]
100425be:	0412      	lsls	r2, r2, #16
100425c0:	041b      	lsls	r3, r3, #16
100425c2:	0c1b      	lsrs	r3, r3, #16
100425c4:	4313      	orrs	r3, r2
}
100425c6:	0018      	movs	r0, r3
100425c8:	46bd      	mov	sp, r7
100425ca:	b007      	add	sp, #28
100425cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100425ce:	46c0      	nop			@ (mov r8, r8)
100425d0:	200003bc 	.word	0x200003bc
100425d4:	200003b8 	.word	0x200003b8

100425d8 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
100425d8:	b5b0      	push	{r4, r5, r7, lr}
100425da:	b09e      	sub	sp, #120	@ 0x78
100425dc:	af00      	add	r7, sp, #0
100425de:	1d3b      	adds	r3, r7, #4
100425e0:	6018      	str	r0, [r3, #0]
	bool transition = 0;
100425e2:	2377      	movs	r3, #119	@ 0x77
100425e4:	18fb      	adds	r3, r7, r3
100425e6:	2200      	movs	r2, #0
100425e8:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
100425ea:	2376      	movs	r3, #118	@ 0x76
100425ec:	18fb      	adds	r3, r7, r3
100425ee:	4ae1      	ldr	r2, [pc, #900]	@ (10042974 <COMM_Event_Handler+0x39c>)
100425f0:	7812      	ldrb	r2, [r2, #0]
100425f2:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
100425f4:	4bdf      	ldr	r3, [pc, #892]	@ (10042974 <COMM_Event_Handler+0x39c>)
100425f6:	781b      	ldrb	r3, [r3, #0]
100425f8:	2b0f      	cmp	r3, #15
100425fa:	d900      	bls.n	100425fe <COMM_Event_Handler+0x26>
100425fc:	e339      	b.n	10042c72 <COMM_Event_Handler+0x69a>
100425fe:	009a      	lsls	r2, r3, #2
10042600:	4bdd      	ldr	r3, [pc, #884]	@ (10042978 <COMM_Event_Handler+0x3a0>)
10042602:	18d3      	adds	r3, r2, r3
10042604:	681b      	ldr	r3, [r3, #0]
10042606:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
10042608:	1d3b      	adds	r3, r7, #4
1004260a:	781b      	ldrb	r3, [r3, #0]
1004260c:	b25b      	sxtb	r3, r3
1004260e:	2b01      	cmp	r3, #1
10042610:	d000      	beq.n	10042614 <COMM_Event_Handler+0x3c>
10042612:	e330      	b.n	10042c76 <COMM_Event_Handler+0x69e>
			next = idle;
10042614:	2376      	movs	r3, #118	@ 0x76
10042616:	18fb      	adds	r3, r7, r3
10042618:	2201      	movs	r2, #1
1004261a:	701a      	strb	r2, [r3, #0]
			transition = true;
1004261c:	2377      	movs	r3, #119	@ 0x77
1004261e:	18fb      	adds	r3, r7, r3
10042620:	2201      	movs	r2, #1
10042622:	701a      	strb	r2, [r3, #0]
		}
		break;
10042624:	e327      	b.n	10042c76 <COMM_Event_Handler+0x69e>
	case idle:
		if(event.status == EVENT_ENTRY){
10042626:	1d3b      	adds	r3, r7, #4
10042628:	781b      	ldrb	r3, [r3, #0]
1004262a:	b25b      	sxtb	r3, r3
1004262c:	2b02      	cmp	r3, #2
1004262e:	d102      	bne.n	10042636 <COMM_Event_Handler+0x5e>
			sendinglogs = 0;
10042630:	4bd2      	ldr	r3, [pc, #840]	@ (1004297c <COMM_Event_Handler+0x3a4>)
10042632:	2200      	movs	r2, #0
10042634:	701a      	strb	r2, [r3, #0]
		}
		if(event.status == EVENT_USART){
10042636:	1d3b      	adds	r3, r7, #4
10042638:	781b      	ldrb	r3, [r3, #0]
1004263a:	b25b      	sxtb	r3, r3
1004263c:	2b06      	cmp	r3, #6
1004263e:	d000      	beq.n	10042642 <COMM_Event_Handler+0x6a>
10042640:	e31b      	b.n	10042c7a <COMM_Event_Handler+0x6a2>
			switch (event.data){
10042642:	1d3b      	adds	r3, r7, #4
10042644:	885b      	ldrh	r3, [r3, #2]
10042646:	2b05      	cmp	r3, #5
10042648:	d845      	bhi.n	100426d6 <COMM_Event_Handler+0xfe>
1004264a:	009a      	lsls	r2, r3, #2
1004264c:	4bcc      	ldr	r3, [pc, #816]	@ (10042980 <COMM_Event_Handler+0x3a8>)
1004264e:	18d3      	adds	r3, r2, r3
10042650:	681b      	ldr	r3, [r3, #0]
10042652:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control");
10042654:	4bcb      	ldr	r3, [pc, #812]	@ (10042984 <COMM_Event_Handler+0x3ac>)
10042656:	0018      	movs	r0, r3
10042658:	f000 fb6a 	bl	10042d30 <discountprintf>
				next = volumecontrol;
1004265c:	2376      	movs	r3, #118	@ 0x76
1004265e:	18fb      	adds	r3, r7, r3
10042660:	2202      	movs	r2, #2
10042662:	701a      	strb	r2, [r3, #0]
				transition = true;
10042664:	2377      	movs	r3, #119	@ 0x77
10042666:	18fb      	adds	r3, r7, r3
10042668:	2201      	movs	r2, #1
1004266a:	701a      	strb	r2, [r3, #0]
				break;
1004266c:	e034      	b.n	100426d8 <COMM_Event_Handler+0x100>
			case FOLDERCONTROL:
				discountprintf("received folder control");
1004266e:	4bc6      	ldr	r3, [pc, #792]	@ (10042988 <COMM_Event_Handler+0x3b0>)
10042670:	0018      	movs	r0, r3
10042672:	f000 fb5d 	bl	10042d30 <discountprintf>
				next = foldercontrol;
10042676:	2376      	movs	r3, #118	@ 0x76
10042678:	18fb      	adds	r3, r7, r3
1004267a:	2203      	movs	r2, #3
1004267c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004267e:	2377      	movs	r3, #119	@ 0x77
10042680:	18fb      	adds	r3, r7, r3
10042682:	2201      	movs	r2, #1
10042684:	701a      	strb	r2, [r3, #0]
				break;
10042686:	e027      	b.n	100426d8 <COMM_Event_Handler+0x100>
			case LOGSREQUEST:
				discountprintf("received logs request");
10042688:	4bc0      	ldr	r3, [pc, #768]	@ (1004298c <COMM_Event_Handler+0x3b4>)
1004268a:	0018      	movs	r0, r3
1004268c:	f000 fb50 	bl	10042d30 <discountprintf>
				next = logsrequest;
10042690:	2376      	movs	r3, #118	@ 0x76
10042692:	18fb      	adds	r3, r7, r3
10042694:	2205      	movs	r2, #5
10042696:	701a      	strb	r2, [r3, #0]
				transition = true;
10042698:	2377      	movs	r3, #119	@ 0x77
1004269a:	18fb      	adds	r3, r7, r3
1004269c:	2201      	movs	r2, #1
1004269e:	701a      	strb	r2, [r3, #0]
				break;
100426a0:	e01a      	b.n	100426d8 <COMM_Event_Handler+0x100>
			case DCCONTROL:
				discountprintf("received DC control");
100426a2:	4bbb      	ldr	r3, [pc, #748]	@ (10042990 <COMM_Event_Handler+0x3b8>)
100426a4:	0018      	movs	r0, r3
100426a6:	f000 fb43 	bl	10042d30 <discountprintf>
				next = dccontrol;
100426aa:	2376      	movs	r3, #118	@ 0x76
100426ac:	18fb      	adds	r3, r7, r3
100426ae:	2207      	movs	r2, #7
100426b0:	701a      	strb	r2, [r3, #0]
				transition = true;
100426b2:	2377      	movs	r3, #119	@ 0x77
100426b4:	18fb      	adds	r3, r7, r3
100426b6:	2201      	movs	r2, #1
100426b8:	701a      	strb	r2, [r3, #0]
				break;
100426ba:	e00d      	b.n	100426d8 <COMM_Event_Handler+0x100>
			case SCHEDULECONTROL:
				discountprintf("received schedule control");
100426bc:	4bb5      	ldr	r3, [pc, #724]	@ (10042994 <COMM_Event_Handler+0x3bc>)
100426be:	0018      	movs	r0, r3
100426c0:	f000 fb36 	bl	10042d30 <discountprintf>
				next = schedulecontrol;
100426c4:	2376      	movs	r3, #118	@ 0x76
100426c6:	18fb      	adds	r3, r7, r3
100426c8:	2208      	movs	r2, #8
100426ca:	701a      	strb	r2, [r3, #0]
				transition = true;
100426cc:	2377      	movs	r3, #119	@ 0x77
100426ce:	18fb      	adds	r3, r7, r3
100426d0:	2201      	movs	r2, #1
100426d2:	701a      	strb	r2, [r3, #0]
				break;
100426d4:	e000      	b.n	100426d8 <COMM_Event_Handler+0x100>
			default:
				break;
100426d6:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
100426d8:	e2cf      	b.n	10042c7a <COMM_Event_Handler+0x6a2>
	case volumecontrol:
		if(event.status == EVENT_USART){
100426da:	1d3b      	adds	r3, r7, #4
100426dc:	781b      	ldrb	r3, [r3, #0]
100426de:	b25b      	sxtb	r3, r3
100426e0:	2b06      	cmp	r3, #6
100426e2:	d000      	beq.n	100426e6 <COMM_Event_Handler+0x10e>
100426e4:	e2cb      	b.n	10042c7e <COMM_Event_Handler+0x6a6>
			FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle());
100426e6:	1d3b      	adds	r3, r7, #4
100426e8:	885b      	ldrh	r3, [r3, #2]
100426ea:	b2dc      	uxtb	r4, r3
100426ec:	f000 fcf0 	bl	100430d0 <FLASH_GetDutyCycle>
100426f0:	0003      	movs	r3, r0
100426f2:	0019      	movs	r1, r3
100426f4:	0020      	movs	r0, r4
100426f6:	f000 fc93 	bl	10043020 <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetVolume());
100426fa:	f000 fcd3 	bl	100430a4 <FLASH_GetVolume>
100426fe:	0003      	movs	r3, r0
10042700:	001a      	movs	r2, r3
10042702:	49a5      	ldr	r1, [pc, #660]	@ (10042998 <COMM_Event_Handler+0x3c0>)
10042704:	2434      	movs	r4, #52	@ 0x34
10042706:	193b      	adds	r3, r7, r4
10042708:	0018      	movs	r0, r3
1004270a:	f023 fdad 	bl	10066268 <siprintf>
			discountprintf(text);
1004270e:	193b      	adds	r3, r7, r4
10042710:	0018      	movs	r0, r3
10042712:	f000 fb0d 	bl	10042d30 <discountprintf>
			next = idle;
10042716:	2376      	movs	r3, #118	@ 0x76
10042718:	18fb      	adds	r3, r7, r3
1004271a:	2201      	movs	r2, #1
1004271c:	701a      	strb	r2, [r3, #0]
			transition = true;
1004271e:	2377      	movs	r3, #119	@ 0x77
10042720:	18fb      	adds	r3, r7, r3
10042722:	2201      	movs	r2, #1
10042724:	701a      	strb	r2, [r3, #0]
		}
		break;
10042726:	e2aa      	b.n	10042c7e <COMM_Event_Handler+0x6a6>
	case foldercontrol:
		if(event.status == EVENT_USART){
10042728:	1d3b      	adds	r3, r7, #4
1004272a:	781b      	ldrb	r3, [r3, #0]
1004272c:	b25b      	sxtb	r3, r3
1004272e:	2b06      	cmp	r3, #6
10042730:	d000      	beq.n	10042734 <COMM_Event_Handler+0x15c>
10042732:	e2a6      	b.n	10042c82 <COMM_Event_Handler+0x6aa>
			folder = event.data;
10042734:	1d3b      	adds	r3, r7, #4
10042736:	885b      	ldrh	r3, [r3, #2]
10042738:	b2da      	uxtb	r2, r3
1004273a:	4b98      	ldr	r3, [pc, #608]	@ (1004299c <COMM_Event_Handler+0x3c4>)
1004273c:	701a      	strb	r2, [r3, #0]
			discountprintf("Storing folder selector");
1004273e:	4b98      	ldr	r3, [pc, #608]	@ (100429a0 <COMM_Event_Handler+0x3c8>)
10042740:	0018      	movs	r0, r3
10042742:	f000 faf5 	bl	10042d30 <discountprintf>
			next = folderselected;
10042746:	2376      	movs	r3, #118	@ 0x76
10042748:	18fb      	adds	r3, r7, r3
1004274a:	2204      	movs	r2, #4
1004274c:	701a      	strb	r2, [r3, #0]
			transition = true;
1004274e:	2377      	movs	r3, #119	@ 0x77
10042750:	18fb      	adds	r3, r7, r3
10042752:	2201      	movs	r2, #1
10042754:	701a      	strb	r2, [r3, #0]
		}
		break;
10042756:	e294      	b.n	10042c82 <COMM_Event_Handler+0x6aa>
	case folderselected:
		if(event.status == EVENT_USART){
10042758:	1d3b      	adds	r3, r7, #4
1004275a:	781b      	ldrb	r3, [r3, #0]
1004275c:	b25b      	sxtb	r3, r3
1004275e:	2b06      	cmp	r3, #6
10042760:	d000      	beq.n	10042764 <COMM_Event_Handler+0x18c>
10042762:	e290      	b.n	10042c86 <COMM_Event_Handler+0x6ae>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
10042764:	2130      	movs	r1, #48	@ 0x30
10042766:	187b      	adds	r3, r7, r1
10042768:	220b      	movs	r2, #11
1004276a:	701a      	strb	r2, [r3, #0]
1004276c:	4b8b      	ldr	r3, [pc, #556]	@ (1004299c <COMM_Event_Handler+0x3c4>)
1004276e:	781b      	ldrb	r3, [r3, #0]
10042770:	021b      	lsls	r3, r3, #8
10042772:	b29a      	uxth	r2, r3
10042774:	1d3b      	adds	r3, r7, #4
10042776:	885b      	ldrh	r3, [r3, #2]
10042778:	18d3      	adds	r3, r2, r3
1004277a:	b29a      	uxth	r2, r3
1004277c:	187b      	adds	r3, r7, r1
1004277e:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
10042780:	187b      	adds	r3, r7, r1
10042782:	6818      	ldr	r0, [r3, #0]
10042784:	f001 fc2a 	bl	10043fdc <MP3_Event_Post>
			discountprintf("Sending track selector");
10042788:	4b86      	ldr	r3, [pc, #536]	@ (100429a4 <COMM_Event_Handler+0x3cc>)
1004278a:	0018      	movs	r0, r3
1004278c:	f000 fad0 	bl	10042d30 <discountprintf>
			next = idle;
10042790:	2376      	movs	r3, #118	@ 0x76
10042792:	18fb      	adds	r3, r7, r3
10042794:	2201      	movs	r2, #1
10042796:	701a      	strb	r2, [r3, #0]
			transition = true;
10042798:	2377      	movs	r3, #119	@ 0x77
1004279a:	18fb      	adds	r3, r7, r3
1004279c:	2201      	movs	r2, #1
1004279e:	701a      	strb	r2, [r3, #0]
		}
		break;
100427a0:	e271      	b.n	10042c86 <COMM_Event_Handler+0x6ae>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
100427a2:	1d3b      	adds	r3, r7, #4
100427a4:	781b      	ldrb	r3, [r3, #0]
100427a6:	b25b      	sxtb	r3, r3
100427a8:	2b02      	cmp	r3, #2
100427aa:	d000      	beq.n	100427ae <COMM_Event_Handler+0x1d6>
100427ac:	e26d      	b.n	10042c8a <COMM_Event_Handler+0x6b2>
			sendinglogs = 1;
100427ae:	4b73      	ldr	r3, [pc, #460]	@ (1004297c <COMM_Event_Handler+0x3a4>)
100427b0:	2201      	movs	r2, #1
100427b2:	701a      	strb	r2, [r3, #0]
			sent = 0;
100427b4:	4b7c      	ldr	r3, [pc, #496]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
100427b6:	2200      	movs	r2, #0
100427b8:	601a      	str	r2, [r3, #0]
			uint16_t size = FLASH_GetLogsSize();
100427ba:	2568      	movs	r5, #104	@ 0x68
100427bc:	197c      	adds	r4, r7, r5
100427be:	f000 fcf3 	bl	100431a8 <FLASH_GetLogsSize>
100427c2:	0003      	movs	r3, r0
100427c4:	8023      	strh	r3, [r4, #0]
			//uint16_t size = 32;
			USART_WriteTx((uint8_t)(size>>8));
100427c6:	002c      	movs	r4, r5
100427c8:	193b      	adds	r3, r7, r4
100427ca:	881b      	ldrh	r3, [r3, #0]
100427cc:	0a1b      	lsrs	r3, r3, #8
100427ce:	b29b      	uxth	r3, r3
100427d0:	b2db      	uxtb	r3, r3
100427d2:	0018      	movs	r0, r3
100427d4:	f002 fde6 	bl	100453a4 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
100427d8:	193b      	adds	r3, r7, r4
100427da:	881b      	ldrh	r3, [r3, #0]
100427dc:	b2db      	uxtb	r3, r3
100427de:	0018      	movs	r0, r3
100427e0:	f002 fde0 	bl	100453a4 <USART_WriteTx>
			next = logsdata;
100427e4:	2376      	movs	r3, #118	@ 0x76
100427e6:	18fb      	adds	r3, r7, r3
100427e8:	2206      	movs	r2, #6
100427ea:	701a      	strb	r2, [r3, #0]
			transition = true;
100427ec:	2377      	movs	r3, #119	@ 0x77
100427ee:	18fb      	adds	r3, r7, r3
100427f0:	2201      	movs	r2, #1
100427f2:	701a      	strb	r2, [r3, #0]
		}
		break;
100427f4:	e249      	b.n	10042c8a <COMM_Event_Handler+0x6b2>
	case logsdata:
		if(event.status == EVENT_USART_READY){
100427f6:	1d3b      	adds	r3, r7, #4
100427f8:	781b      	ldrb	r3, [r3, #0]
100427fa:	b25b      	sxtb	r3, r3
100427fc:	2b07      	cmp	r3, #7
100427fe:	d000      	beq.n	10042802 <COMM_Event_Handler+0x22a>
10042800:	e245      	b.n	10042c8e <COMM_Event_Handler+0x6b6>
			//get logs size
			uint16_t size  = 32;
10042802:	216a      	movs	r1, #106	@ 0x6a
10042804:	187b      	adds	r3, r7, r1
10042806:	2220      	movs	r2, #32
10042808:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
1004280a:	187b      	adds	r3, r7, r1
1004280c:	881a      	ldrh	r2, [r3, #0]
1004280e:	4b66      	ldr	r3, [pc, #408]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
10042810:	681b      	ldr	r3, [r3, #0]
10042812:	1ad3      	subs	r3, r2, r3
10042814:	2b55      	cmp	r3, #85	@ 0x55
10042816:	d934      	bls.n	10042882 <COMM_Event_Handler+0x2aa>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10042818:	2300      	movs	r3, #0
1004281a:	673b      	str	r3, [r7, #112]	@ 0x70
1004281c:	e02d      	b.n	1004287a <COMM_Event_Handler+0x2a2>
					//scheduleEvent levent = FLASH_ReadLogs(sent);
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
1004281e:	2024      	movs	r0, #36	@ 0x24
10042820:	183b      	adds	r3, r7, r0
10042822:	4a62      	ldr	r2, [pc, #392]	@ (100429ac <COMM_Event_Handler+0x3d4>)
10042824:	6811      	ldr	r1, [r2, #0]
10042826:	6019      	str	r1, [r3, #0]
10042828:	8892      	ldrh	r2, [r2, #4]
1004282a:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
1004282c:	0004      	movs	r4, r0
1004282e:	193b      	adds	r3, r7, r4
10042830:	781b      	ldrb	r3, [r3, #0]
10042832:	0018      	movs	r0, r3
10042834:	f002 fdb6 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.day);
10042838:	193b      	adds	r3, r7, r4
1004283a:	785b      	ldrb	r3, [r3, #1]
1004283c:	0018      	movs	r0, r3
1004283e:	f002 fdb1 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.start);
10042842:	193b      	adds	r3, r7, r4
10042844:	789b      	ldrb	r3, [r3, #2]
10042846:	0018      	movs	r0, r3
10042848:	f002 fdac 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.stop);
1004284c:	193b      	adds	r3, r7, r4
1004284e:	78db      	ldrb	r3, [r3, #3]
10042850:	0018      	movs	r0, r3
10042852:	f002 fda7 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10042856:	193b      	adds	r3, r7, r4
10042858:	791b      	ldrb	r3, [r3, #4]
1004285a:	0018      	movs	r0, r3
1004285c:	f002 fda2 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.track);
10042860:	193b      	adds	r3, r7, r4
10042862:	795b      	ldrb	r3, [r3, #5]
10042864:	0018      	movs	r0, r3
10042866:	f002 fd9d 	bl	100453a4 <USART_WriteTx>
					sent++;
1004286a:	4b4f      	ldr	r3, [pc, #316]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
1004286c:	681b      	ldr	r3, [r3, #0]
1004286e:	1c5a      	adds	r2, r3, #1
10042870:	4b4d      	ldr	r3, [pc, #308]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
10042872:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10042874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10042876:	3301      	adds	r3, #1
10042878:	673b      	str	r3, [r7, #112]	@ 0x70
1004287a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1004287c:	2b54      	cmp	r3, #84	@ 0x54
1004287e:	ddce      	ble.n	1004281e <COMM_Event_Handler+0x246>
				next = idle;
				transition = true;
				discountprintf("data sent");
			}
		}
		break;
10042880:	e205      	b.n	10042c8e <COMM_Event_Handler+0x6b6>
				for(int i = 0; i < size - sent; i++){
10042882:	2300      	movs	r3, #0
10042884:	66fb      	str	r3, [r7, #108]	@ 0x6c
10042886:	e02d      	b.n	100428e4 <COMM_Event_Handler+0x30c>
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10042888:	201c      	movs	r0, #28
1004288a:	183b      	adds	r3, r7, r0
1004288c:	4a47      	ldr	r2, [pc, #284]	@ (100429ac <COMM_Event_Handler+0x3d4>)
1004288e:	6811      	ldr	r1, [r2, #0]
10042890:	6019      	str	r1, [r3, #0]
10042892:	8892      	ldrh	r2, [r2, #4]
10042894:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
10042896:	0004      	movs	r4, r0
10042898:	193b      	adds	r3, r7, r4
1004289a:	781b      	ldrb	r3, [r3, #0]
1004289c:	0018      	movs	r0, r3
1004289e:	f002 fd81 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.day);
100428a2:	193b      	adds	r3, r7, r4
100428a4:	785b      	ldrb	r3, [r3, #1]
100428a6:	0018      	movs	r0, r3
100428a8:	f002 fd7c 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.start);
100428ac:	193b      	adds	r3, r7, r4
100428ae:	789b      	ldrb	r3, [r3, #2]
100428b0:	0018      	movs	r0, r3
100428b2:	f002 fd77 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.stop);
100428b6:	193b      	adds	r3, r7, r4
100428b8:	78db      	ldrb	r3, [r3, #3]
100428ba:	0018      	movs	r0, r3
100428bc:	f002 fd72 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.folder);
100428c0:	193b      	adds	r3, r7, r4
100428c2:	791b      	ldrb	r3, [r3, #4]
100428c4:	0018      	movs	r0, r3
100428c6:	f002 fd6d 	bl	100453a4 <USART_WriteTx>
					USART_WriteTx(levent.track);
100428ca:	193b      	adds	r3, r7, r4
100428cc:	795b      	ldrb	r3, [r3, #5]
100428ce:	0018      	movs	r0, r3
100428d0:	f002 fd68 	bl	100453a4 <USART_WriteTx>
					sent++;
100428d4:	4b34      	ldr	r3, [pc, #208]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
100428d6:	681b      	ldr	r3, [r3, #0]
100428d8:	1c5a      	adds	r2, r3, #1
100428da:	4b33      	ldr	r3, [pc, #204]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
100428dc:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < size - sent; i++){
100428de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
100428e0:	3301      	adds	r3, #1
100428e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
100428e4:	236a      	movs	r3, #106	@ 0x6a
100428e6:	18fb      	adds	r3, r7, r3
100428e8:	881a      	ldrh	r2, [r3, #0]
100428ea:	4b2f      	ldr	r3, [pc, #188]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
100428ec:	681b      	ldr	r3, [r3, #0]
100428ee:	1ad2      	subs	r2, r2, r3
100428f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
100428f2:	429a      	cmp	r2, r3
100428f4:	d8c8      	bhi.n	10042888 <COMM_Event_Handler+0x2b0>
				USART_WriteTx(LOGSDONE);
100428f6:	2003      	movs	r0, #3
100428f8:	f002 fd54 	bl	100453a4 <USART_WriteTx>
				sent = 0;
100428fc:	4b2a      	ldr	r3, [pc, #168]	@ (100429a8 <COMM_Event_Handler+0x3d0>)
100428fe:	2200      	movs	r2, #0
10042900:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
10042902:	4b1e      	ldr	r3, [pc, #120]	@ (1004297c <COMM_Event_Handler+0x3a4>)
10042904:	2200      	movs	r2, #0
10042906:	701a      	strb	r2, [r3, #0]
				next = idle;
10042908:	2376      	movs	r3, #118	@ 0x76
1004290a:	18fb      	adds	r3, r7, r3
1004290c:	2201      	movs	r2, #1
1004290e:	701a      	strb	r2, [r3, #0]
				transition = true;
10042910:	2377      	movs	r3, #119	@ 0x77
10042912:	18fb      	adds	r3, r7, r3
10042914:	2201      	movs	r2, #1
10042916:	701a      	strb	r2, [r3, #0]
				discountprintf("data sent");
10042918:	4b25      	ldr	r3, [pc, #148]	@ (100429b0 <COMM_Event_Handler+0x3d8>)
1004291a:	0018      	movs	r0, r3
1004291c:	f000 fa08 	bl	10042d30 <discountprintf>
		break;
10042920:	e1b5      	b.n	10042c8e <COMM_Event_Handler+0x6b6>
	case dccontrol:
		if(event.status == EVENT_USART){
10042922:	1d3b      	adds	r3, r7, #4
10042924:	781b      	ldrb	r3, [r3, #0]
10042926:	b25b      	sxtb	r3, r3
10042928:	2b06      	cmp	r3, #6
1004292a:	d000      	beq.n	1004292e <COMM_Event_Handler+0x356>
1004292c:	e1b1      	b.n	10042c92 <COMM_Event_Handler+0x6ba>
			FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data);
1004292e:	f000 fbb9 	bl	100430a4 <FLASH_GetVolume>
10042932:	0003      	movs	r3, r0
10042934:	001a      	movs	r2, r3
10042936:	1d3b      	adds	r3, r7, #4
10042938:	885b      	ldrh	r3, [r3, #2]
1004293a:	b2db      	uxtb	r3, r3
1004293c:	0019      	movs	r1, r3
1004293e:	0010      	movs	r0, r2
10042940:	f000 fb6e 	bl	10043020 <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetDutyCycle());
10042944:	f000 fbc4 	bl	100430d0 <FLASH_GetDutyCycle>
10042948:	0003      	movs	r3, r0
1004294a:	001a      	movs	r2, r3
1004294c:	4912      	ldr	r1, [pc, #72]	@ (10042998 <COMM_Event_Handler+0x3c0>)
1004294e:	2434      	movs	r4, #52	@ 0x34
10042950:	193b      	adds	r3, r7, r4
10042952:	0018      	movs	r0, r3
10042954:	f023 fc88 	bl	10066268 <siprintf>
			discountprintf(text);
10042958:	193b      	adds	r3, r7, r4
1004295a:	0018      	movs	r0, r3
1004295c:	f000 f9e8 	bl	10042d30 <discountprintf>

			next = idle;
10042960:	2376      	movs	r3, #118	@ 0x76
10042962:	18fb      	adds	r3, r7, r3
10042964:	2201      	movs	r2, #1
10042966:	701a      	strb	r2, [r3, #0]
			transition = true;
10042968:	2377      	movs	r3, #119	@ 0x77
1004296a:	18fb      	adds	r3, r7, r3
1004296c:	2201      	movs	r2, #1
1004296e:	701a      	strb	r2, [r3, #0]
		}
		break;
10042970:	e18f      	b.n	10042c92 <COMM_Event_Handler+0x6ba>
10042972:	46c0      	nop			@ (mov r8, r8)
10042974:	200003b5 	.word	0x200003b5
10042978:	10067cd0 	.word	0x10067cd0
1004297c:	200003bc 	.word	0x200003bc
10042980:	10067d10 	.word	0x10067d10
10042984:	10067490 	.word	0x10067490
10042988:	100674a8 	.word	0x100674a8
1004298c:	100674c0 	.word	0x100674c0
10042990:	100674d8 	.word	0x100674d8
10042994:	100674ec 	.word	0x100674ec
10042998:	10067508 	.word	0x10067508
1004299c:	200003bd 	.word	0x200003bd
100429a0:	1006751c 	.word	0x1006751c
100429a4:	10067534 	.word	0x10067534
100429a8:	200003c0 	.word	0x200003c0
100429ac:	100675ec 	.word	0x100675ec
100429b0:	1006754c 	.word	0x1006754c
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
100429b4:	1d3b      	adds	r3, r7, #4
100429b6:	781b      	ldrb	r3, [r3, #0]
100429b8:	b25b      	sxtb	r3, r3
100429ba:	2b02      	cmp	r3, #2
100429bc:	d000      	beq.n	100429c0 <COMM_Event_Handler+0x3e8>
100429be:	e16a      	b.n	10042c96 <COMM_Event_Handler+0x6be>
			discountprintf("receiving schedule");
100429c0:	4bcf      	ldr	r3, [pc, #828]	@ (10042d00 <COMM_Event_Handler+0x728>)
100429c2:	0018      	movs	r0, r3
100429c4:	f000 f9b4 	bl	10042d30 <discountprintf>
			sevent = (scheduleEvent){0,0,0,0,0,0};
100429c8:	4bce      	ldr	r3, [pc, #824]	@ (10042d04 <COMM_Event_Handler+0x72c>)
100429ca:	0018      	movs	r0, r3
100429cc:	2306      	movs	r3, #6
100429ce:	001a      	movs	r2, r3
100429d0:	2100      	movs	r1, #0
100429d2:	f023 fd65 	bl	100664a0 <memset>
			FLASH_ClearSchedule();
100429d6:	f000 fd51 	bl	1004347c <FLASH_ClearSchedule>
			next = schedulemonth;
100429da:	2376      	movs	r3, #118	@ 0x76
100429dc:	18fb      	adds	r3, r7, r3
100429de:	2209      	movs	r2, #9
100429e0:	701a      	strb	r2, [r3, #0]
			transition = true;
100429e2:	2377      	movs	r3, #119	@ 0x77
100429e4:	18fb      	adds	r3, r7, r3
100429e6:	2201      	movs	r2, #1
100429e8:	701a      	strb	r2, [r3, #0]
			numevents = 0;
100429ea:	4bc7      	ldr	r3, [pc, #796]	@ (10042d08 <COMM_Event_Handler+0x730>)
100429ec:	2200      	movs	r2, #0
100429ee:	701a      	strb	r2, [r3, #0]
		}
		break;
100429f0:	e151      	b.n	10042c96 <COMM_Event_Handler+0x6be>
	case schedulemonth:
		if(event.status == EVENT_USART){
100429f2:	1d3b      	adds	r3, r7, #4
100429f4:	781b      	ldrb	r3, [r3, #0]
100429f6:	b25b      	sxtb	r3, r3
100429f8:	2b06      	cmp	r3, #6
100429fa:	d000      	beq.n	100429fe <COMM_Event_Handler+0x426>
100429fc:	e14d      	b.n	10042c9a <COMM_Event_Handler+0x6c2>
			if(event.data == SCHEDULEEND){
100429fe:	1d3b      	adds	r3, r7, #4
10042a00:	885b      	ldrh	r3, [r3, #2]
10042a02:	2b0d      	cmp	r3, #13
10042a04:	d11a      	bne.n	10042a3c <COMM_Event_Handler+0x464>
				discountprintf("schedule complete");
10042a06:	4bc1      	ldr	r3, [pc, #772]	@ (10042d0c <COMM_Event_Handler+0x734>)
10042a08:	0018      	movs	r0, r3
10042a0a:	f000 f991 	bl	10042d30 <discountprintf>
				next = idle;
10042a0e:	2376      	movs	r3, #118	@ 0x76
10042a10:	18fb      	adds	r3, r7, r3
10042a12:	2201      	movs	r2, #1
10042a14:	701a      	strb	r2, [r3, #0]
				transition = true;
10042a16:	2377      	movs	r3, #119	@ 0x77
10042a18:	18fb      	adds	r3, r7, r3
10042a1a:	2201      	movs	r2, #1
10042a1c:	701a      	strb	r2, [r3, #0]
				if(!(sevent.month == 0 && sevent.day == 0)){
10042a1e:	4bb9      	ldr	r3, [pc, #740]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a20:	781b      	ldrb	r3, [r3, #0]
10042a22:	2b00      	cmp	r3, #0
10042a24:	d104      	bne.n	10042a30 <COMM_Event_Handler+0x458>
10042a26:	4bb7      	ldr	r3, [pc, #732]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a28:	785b      	ldrb	r3, [r3, #1]
10042a2a:	2b00      	cmp	r3, #0
10042a2c:	d100      	bne.n	10042a30 <COMM_Event_Handler+0x458>
10042a2e:	e134      	b.n	10042c9a <COMM_Event_Handler+0x6c2>
					FLASH_AppendSchedule(sevent);
10042a30:	4bb4      	ldr	r3, [pc, #720]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a32:	6818      	ldr	r0, [r3, #0]
10042a34:	6859      	ldr	r1, [r3, #4]
10042a36:	f000 fc3b 	bl	100432b0 <FLASH_AppendSchedule>
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
10042a3a:	e12e      	b.n	10042c9a <COMM_Event_Handler+0x6c2>
			} else if(numevents > MAXSCHEDULEEVENTS){
10042a3c:	4bb2      	ldr	r3, [pc, #712]	@ (10042d08 <COMM_Event_Handler+0x730>)
10042a3e:	781b      	ldrb	r3, [r3, #0]
10042a40:	2bb4      	cmp	r3, #180	@ 0xb4
10042a42:	d91c      	bls.n	10042a7e <COMM_Event_Handler+0x4a6>
				discountprintf("schedule forced to complete");
10042a44:	4bb2      	ldr	r3, [pc, #712]	@ (10042d10 <COMM_Event_Handler+0x738>)
10042a46:	0018      	movs	r0, r3
10042a48:	f000 f972 	bl	10042d30 <discountprintf>
				if(!(sevent.month == 0 && sevent.day == 0)){
10042a4c:	4bad      	ldr	r3, [pc, #692]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a4e:	781b      	ldrb	r3, [r3, #0]
10042a50:	2b00      	cmp	r3, #0
10042a52:	d103      	bne.n	10042a5c <COMM_Event_Handler+0x484>
10042a54:	4bab      	ldr	r3, [pc, #684]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a56:	785b      	ldrb	r3, [r3, #1]
10042a58:	2b00      	cmp	r3, #0
10042a5a:	d004      	beq.n	10042a66 <COMM_Event_Handler+0x48e>
					FLASH_AppendSchedule(sevent);
10042a5c:	4ba9      	ldr	r3, [pc, #676]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a5e:	6818      	ldr	r0, [r3, #0]
10042a60:	6859      	ldr	r1, [r3, #4]
10042a62:	f000 fc25 	bl	100432b0 <FLASH_AppendSchedule>
				next = scheduleend;
10042a66:	2376      	movs	r3, #118	@ 0x76
10042a68:	18fb      	adds	r3, r7, r3
10042a6a:	220f      	movs	r2, #15
10042a6c:	701a      	strb	r2, [r3, #0]
				transition = true;
10042a6e:	2377      	movs	r3, #119	@ 0x77
10042a70:	18fb      	adds	r3, r7, r3
10042a72:	2201      	movs	r2, #1
10042a74:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
10042a76:	200d      	movs	r0, #13
10042a78:	f002 fc94 	bl	100453a4 <USART_WriteTx>
		break;
10042a7c:	e10d      	b.n	10042c9a <COMM_Event_Handler+0x6c2>
				if(!(sevent.month == 0 && sevent.day == 0)){
10042a7e:	4ba1      	ldr	r3, [pc, #644]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a80:	781b      	ldrb	r3, [r3, #0]
10042a82:	2b00      	cmp	r3, #0
10042a84:	d103      	bne.n	10042a8e <COMM_Event_Handler+0x4b6>
10042a86:	4b9f      	ldr	r3, [pc, #636]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a88:	785b      	ldrb	r3, [r3, #1]
10042a8a:	2b00      	cmp	r3, #0
10042a8c:	d004      	beq.n	10042a98 <COMM_Event_Handler+0x4c0>
					FLASH_AppendSchedule(sevent);
10042a8e:	4b9d      	ldr	r3, [pc, #628]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042a90:	6818      	ldr	r0, [r3, #0]
10042a92:	6859      	ldr	r1, [r3, #4]
10042a94:	f000 fc0c 	bl	100432b0 <FLASH_AppendSchedule>
				sevent.month = event.data;
10042a98:	1d3b      	adds	r3, r7, #4
10042a9a:	885b      	ldrh	r3, [r3, #2]
10042a9c:	b2da      	uxtb	r2, r3
10042a9e:	4b99      	ldr	r3, [pc, #612]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042aa0:	701a      	strb	r2, [r3, #0]
				sprintf(text, "Month: %d", event.data);
10042aa2:	1d3b      	adds	r3, r7, #4
10042aa4:	885b      	ldrh	r3, [r3, #2]
10042aa6:	001a      	movs	r2, r3
10042aa8:	499a      	ldr	r1, [pc, #616]	@ (10042d14 <COMM_Event_Handler+0x73c>)
10042aaa:	2434      	movs	r4, #52	@ 0x34
10042aac:	193b      	adds	r3, r7, r4
10042aae:	0018      	movs	r0, r3
10042ab0:	f023 fbda 	bl	10066268 <siprintf>
				discountprintf(text);
10042ab4:	193b      	adds	r3, r7, r4
10042ab6:	0018      	movs	r0, r3
10042ab8:	f000 f93a 	bl	10042d30 <discountprintf>
				next = scheduleday;
10042abc:	2376      	movs	r3, #118	@ 0x76
10042abe:	18fb      	adds	r3, r7, r3
10042ac0:	220a      	movs	r2, #10
10042ac2:	701a      	strb	r2, [r3, #0]
				transition = true;
10042ac4:	2377      	movs	r3, #119	@ 0x77
10042ac6:	18fb      	adds	r3, r7, r3
10042ac8:	2201      	movs	r2, #1
10042aca:	701a      	strb	r2, [r3, #0]
		break;
10042acc:	e0e5      	b.n	10042c9a <COMM_Event_Handler+0x6c2>
	case scheduleday:
		if(event.status == EVENT_USART){
10042ace:	1d3b      	adds	r3, r7, #4
10042ad0:	781b      	ldrb	r3, [r3, #0]
10042ad2:	b25b      	sxtb	r3, r3
10042ad4:	2b06      	cmp	r3, #6
10042ad6:	d000      	beq.n	10042ada <COMM_Event_Handler+0x502>
10042ad8:	e0e1      	b.n	10042c9e <COMM_Event_Handler+0x6c6>
			sevent.day = event.data;
10042ada:	1d3b      	adds	r3, r7, #4
10042adc:	885b      	ldrh	r3, [r3, #2]
10042ade:	b2da      	uxtb	r2, r3
10042ae0:	4b88      	ldr	r3, [pc, #544]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042ae2:	705a      	strb	r2, [r3, #1]
			sprintf(text, "Day: %d", event.data);
10042ae4:	1d3b      	adds	r3, r7, #4
10042ae6:	885b      	ldrh	r3, [r3, #2]
10042ae8:	001a      	movs	r2, r3
10042aea:	498b      	ldr	r1, [pc, #556]	@ (10042d18 <COMM_Event_Handler+0x740>)
10042aec:	2434      	movs	r4, #52	@ 0x34
10042aee:	193b      	adds	r3, r7, r4
10042af0:	0018      	movs	r0, r3
10042af2:	f023 fbb9 	bl	10066268 <siprintf>
			discountprintf(text);
10042af6:	193b      	adds	r3, r7, r4
10042af8:	0018      	movs	r0, r3
10042afa:	f000 f919 	bl	10042d30 <discountprintf>
			next = schedulestart;
10042afe:	2376      	movs	r3, #118	@ 0x76
10042b00:	18fb      	adds	r3, r7, r3
10042b02:	220b      	movs	r2, #11
10042b04:	701a      	strb	r2, [r3, #0]
			transition = true;
10042b06:	2377      	movs	r3, #119	@ 0x77
10042b08:	18fb      	adds	r3, r7, r3
10042b0a:	2201      	movs	r2, #1
10042b0c:	701a      	strb	r2, [r3, #0]
		}
		break;
10042b0e:	e0c6      	b.n	10042c9e <COMM_Event_Handler+0x6c6>
	case schedulestart:
		if(event.status == EVENT_USART){
10042b10:	1d3b      	adds	r3, r7, #4
10042b12:	781b      	ldrb	r3, [r3, #0]
10042b14:	b25b      	sxtb	r3, r3
10042b16:	2b06      	cmp	r3, #6
10042b18:	d000      	beq.n	10042b1c <COMM_Event_Handler+0x544>
10042b1a:	e0c2      	b.n	10042ca2 <COMM_Event_Handler+0x6ca>
			sevent.start =  event.data;
10042b1c:	1d3b      	adds	r3, r7, #4
10042b1e:	885b      	ldrh	r3, [r3, #2]
10042b20:	b2da      	uxtb	r2, r3
10042b22:	4b78      	ldr	r3, [pc, #480]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042b24:	709a      	strb	r2, [r3, #2]
			sprintf(text, "start time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10042b26:	1d3b      	adds	r3, r7, #4
10042b28:	885b      	ldrh	r3, [r3, #2]
10042b2a:	10db      	asrs	r3, r3, #3
10042b2c:	221f      	movs	r2, #31
10042b2e:	4013      	ands	r3, r2
10042b30:	001c      	movs	r4, r3
10042b32:	1d3b      	adds	r3, r7, #4
10042b34:	885b      	ldrh	r3, [r3, #2]
10042b36:	001a      	movs	r2, r3
10042b38:	2303      	movs	r3, #3
10042b3a:	401a      	ands	r2, r3
10042b3c:	0013      	movs	r3, r2
10042b3e:	011b      	lsls	r3, r3, #4
10042b40:	1a9b      	subs	r3, r3, r2
10042b42:	4976      	ldr	r1, [pc, #472]	@ (10042d1c <COMM_Event_Handler+0x744>)
10042b44:	2534      	movs	r5, #52	@ 0x34
10042b46:	1978      	adds	r0, r7, r5
10042b48:	0022      	movs	r2, r4
10042b4a:	f023 fb8d 	bl	10066268 <siprintf>
			discountprintf(text);
10042b4e:	197b      	adds	r3, r7, r5
10042b50:	0018      	movs	r0, r3
10042b52:	f000 f8ed 	bl	10042d30 <discountprintf>
			next = schedulestop;
10042b56:	2376      	movs	r3, #118	@ 0x76
10042b58:	18fb      	adds	r3, r7, r3
10042b5a:	220c      	movs	r2, #12
10042b5c:	701a      	strb	r2, [r3, #0]
			transition = true;
10042b5e:	2377      	movs	r3, #119	@ 0x77
10042b60:	18fb      	adds	r3, r7, r3
10042b62:	2201      	movs	r2, #1
10042b64:	701a      	strb	r2, [r3, #0]
		}
		break;
10042b66:	e09c      	b.n	10042ca2 <COMM_Event_Handler+0x6ca>
	case schedulestop:
		if(event.status == EVENT_USART){
10042b68:	1d3b      	adds	r3, r7, #4
10042b6a:	781b      	ldrb	r3, [r3, #0]
10042b6c:	b25b      	sxtb	r3, r3
10042b6e:	2b06      	cmp	r3, #6
10042b70:	d000      	beq.n	10042b74 <COMM_Event_Handler+0x59c>
10042b72:	e098      	b.n	10042ca6 <COMM_Event_Handler+0x6ce>
			sevent.stop = event.data;
10042b74:	1d3b      	adds	r3, r7, #4
10042b76:	885b      	ldrh	r3, [r3, #2]
10042b78:	b2da      	uxtb	r2, r3
10042b7a:	4b62      	ldr	r3, [pc, #392]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042b7c:	70da      	strb	r2, [r3, #3]
			sprintf(text, "end time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10042b7e:	1d3b      	adds	r3, r7, #4
10042b80:	885b      	ldrh	r3, [r3, #2]
10042b82:	10db      	asrs	r3, r3, #3
10042b84:	221f      	movs	r2, #31
10042b86:	4013      	ands	r3, r2
10042b88:	001c      	movs	r4, r3
10042b8a:	1d3b      	adds	r3, r7, #4
10042b8c:	885b      	ldrh	r3, [r3, #2]
10042b8e:	001a      	movs	r2, r3
10042b90:	2303      	movs	r3, #3
10042b92:	401a      	ands	r2, r3
10042b94:	0013      	movs	r3, r2
10042b96:	011b      	lsls	r3, r3, #4
10042b98:	1a9b      	subs	r3, r3, r2
10042b9a:	4961      	ldr	r1, [pc, #388]	@ (10042d20 <COMM_Event_Handler+0x748>)
10042b9c:	2534      	movs	r5, #52	@ 0x34
10042b9e:	1978      	adds	r0, r7, r5
10042ba0:	0022      	movs	r2, r4
10042ba2:	f023 fb61 	bl	10066268 <siprintf>
			discountprintf(text);
10042ba6:	197b      	adds	r3, r7, r5
10042ba8:	0018      	movs	r0, r3
10042baa:	f000 f8c1 	bl	10042d30 <discountprintf>
			next = schedulefolder;
10042bae:	2376      	movs	r3, #118	@ 0x76
10042bb0:	18fb      	adds	r3, r7, r3
10042bb2:	220d      	movs	r2, #13
10042bb4:	701a      	strb	r2, [r3, #0]
			transition = true;
10042bb6:	2377      	movs	r3, #119	@ 0x77
10042bb8:	18fb      	adds	r3, r7, r3
10042bba:	2201      	movs	r2, #1
10042bbc:	701a      	strb	r2, [r3, #0]
		}
		break;
10042bbe:	e072      	b.n	10042ca6 <COMM_Event_Handler+0x6ce>
	case schedulefolder:
		if(event.status == EVENT_USART){
10042bc0:	1d3b      	adds	r3, r7, #4
10042bc2:	781b      	ldrb	r3, [r3, #0]
10042bc4:	b25b      	sxtb	r3, r3
10042bc6:	2b06      	cmp	r3, #6
10042bc8:	d000      	beq.n	10042bcc <COMM_Event_Handler+0x5f4>
10042bca:	e06e      	b.n	10042caa <COMM_Event_Handler+0x6d2>
			sevent.folder = event.data;
10042bcc:	1d3b      	adds	r3, r7, #4
10042bce:	885b      	ldrh	r3, [r3, #2]
10042bd0:	b2da      	uxtb	r2, r3
10042bd2:	4b4c      	ldr	r3, [pc, #304]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042bd4:	711a      	strb	r2, [r3, #4]
			sprintf(text, "folder#: %d", event.data);
10042bd6:	1d3b      	adds	r3, r7, #4
10042bd8:	885b      	ldrh	r3, [r3, #2]
10042bda:	001a      	movs	r2, r3
10042bdc:	4951      	ldr	r1, [pc, #324]	@ (10042d24 <COMM_Event_Handler+0x74c>)
10042bde:	2434      	movs	r4, #52	@ 0x34
10042be0:	193b      	adds	r3, r7, r4
10042be2:	0018      	movs	r0, r3
10042be4:	f023 fb40 	bl	10066268 <siprintf>
			discountprintf(text);
10042be8:	193b      	adds	r3, r7, r4
10042bea:	0018      	movs	r0, r3
10042bec:	f000 f8a0 	bl	10042d30 <discountprintf>
			next = scheduletrack;
10042bf0:	2376      	movs	r3, #118	@ 0x76
10042bf2:	18fb      	adds	r3, r7, r3
10042bf4:	220e      	movs	r2, #14
10042bf6:	701a      	strb	r2, [r3, #0]
			transition = true;
10042bf8:	2377      	movs	r3, #119	@ 0x77
10042bfa:	18fb      	adds	r3, r7, r3
10042bfc:	2201      	movs	r2, #1
10042bfe:	701a      	strb	r2, [r3, #0]
		}
		break;
10042c00:	e053      	b.n	10042caa <COMM_Event_Handler+0x6d2>
	case scheduletrack:
		if(event.status == EVENT_USART){
10042c02:	1d3b      	adds	r3, r7, #4
10042c04:	781b      	ldrb	r3, [r3, #0]
10042c06:	b25b      	sxtb	r3, r3
10042c08:	2b06      	cmp	r3, #6
10042c0a:	d150      	bne.n	10042cae <COMM_Event_Handler+0x6d6>
			sevent.track = event.data;
10042c0c:	1d3b      	adds	r3, r7, #4
10042c0e:	885b      	ldrh	r3, [r3, #2]
10042c10:	b2da      	uxtb	r2, r3
10042c12:	4b3c      	ldr	r3, [pc, #240]	@ (10042d04 <COMM_Event_Handler+0x72c>)
10042c14:	715a      	strb	r2, [r3, #5]
			sprintf(text, "track#: %d", event.data);
10042c16:	1d3b      	adds	r3, r7, #4
10042c18:	885b      	ldrh	r3, [r3, #2]
10042c1a:	001a      	movs	r2, r3
10042c1c:	4942      	ldr	r1, [pc, #264]	@ (10042d28 <COMM_Event_Handler+0x750>)
10042c1e:	2434      	movs	r4, #52	@ 0x34
10042c20:	193b      	adds	r3, r7, r4
10042c22:	0018      	movs	r0, r3
10042c24:	f023 fb20 	bl	10066268 <siprintf>
			discountprintf(text);
10042c28:	193b      	adds	r3, r7, r4
10042c2a:	0018      	movs	r0, r3
10042c2c:	f000 f880 	bl	10042d30 <discountprintf>
			//record end time here
			next = schedulemonth;
10042c30:	2376      	movs	r3, #118	@ 0x76
10042c32:	18fb      	adds	r3, r7, r3
10042c34:	2209      	movs	r2, #9
10042c36:	701a      	strb	r2, [r3, #0]
			transition = true;
10042c38:	2377      	movs	r3, #119	@ 0x77
10042c3a:	18fb      	adds	r3, r7, r3
10042c3c:	2201      	movs	r2, #1
10042c3e:	701a      	strb	r2, [r3, #0]
			numevents++;
10042c40:	4b31      	ldr	r3, [pc, #196]	@ (10042d08 <COMM_Event_Handler+0x730>)
10042c42:	781b      	ldrb	r3, [r3, #0]
10042c44:	3301      	adds	r3, #1
10042c46:	b2da      	uxtb	r2, r3
10042c48:	4b2f      	ldr	r3, [pc, #188]	@ (10042d08 <COMM_Event_Handler+0x730>)
10042c4a:	701a      	strb	r2, [r3, #0]
		}
		break;
10042c4c:	e02f      	b.n	10042cae <COMM_Event_Handler+0x6d6>
	case scheduleend:
		if(event.status == EVENT_USART){
10042c4e:	1d3b      	adds	r3, r7, #4
10042c50:	781b      	ldrb	r3, [r3, #0]
10042c52:	b25b      	sxtb	r3, r3
10042c54:	2b06      	cmp	r3, #6
10042c56:	d12c      	bne.n	10042cb2 <COMM_Event_Handler+0x6da>
			if(event.data == SCHEDULEEND){
10042c58:	1d3b      	adds	r3, r7, #4
10042c5a:	885b      	ldrh	r3, [r3, #2]
10042c5c:	2b0d      	cmp	r3, #13
10042c5e:	d128      	bne.n	10042cb2 <COMM_Event_Handler+0x6da>
				next = idle;
10042c60:	2376      	movs	r3, #118	@ 0x76
10042c62:	18fb      	adds	r3, r7, r3
10042c64:	2201      	movs	r2, #1
10042c66:	701a      	strb	r2, [r3, #0]
				transition = true;
10042c68:	2377      	movs	r3, #119	@ 0x77
10042c6a:	18fb      	adds	r3, r7, r3
10042c6c:	2201      	movs	r2, #1
10042c6e:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10042c70:	e01f      	b.n	10042cb2 <COMM_Event_Handler+0x6da>
	default:
		break;
10042c72:	46c0      	nop			@ (mov r8, r8)
10042c74:	e01e      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c76:	46c0      	nop			@ (mov r8, r8)
10042c78:	e01c      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c7a:	46c0      	nop			@ (mov r8, r8)
10042c7c:	e01a      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c7e:	46c0      	nop			@ (mov r8, r8)
10042c80:	e018      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c82:	46c0      	nop			@ (mov r8, r8)
10042c84:	e016      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c86:	46c0      	nop			@ (mov r8, r8)
10042c88:	e014      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c8a:	46c0      	nop			@ (mov r8, r8)
10042c8c:	e012      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c8e:	46c0      	nop			@ (mov r8, r8)
10042c90:	e010      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c92:	46c0      	nop			@ (mov r8, r8)
10042c94:	e00e      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c96:	46c0      	nop			@ (mov r8, r8)
10042c98:	e00c      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c9a:	46c0      	nop			@ (mov r8, r8)
10042c9c:	e00a      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042c9e:	46c0      	nop			@ (mov r8, r8)
10042ca0:	e008      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042ca2:	46c0      	nop			@ (mov r8, r8)
10042ca4:	e006      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042ca6:	46c0      	nop			@ (mov r8, r8)
10042ca8:	e004      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042caa:	46c0      	nop			@ (mov r8, r8)
10042cac:	e002      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042cae:	46c0      	nop			@ (mov r8, r8)
10042cb0:	e000      	b.n	10042cb4 <COMM_Event_Handler+0x6dc>
		break;
10042cb2:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
10042cb4:	2377      	movs	r3, #119	@ 0x77
10042cb6:	18fb      	adds	r3, r7, r3
10042cb8:	781b      	ldrb	r3, [r3, #0]
10042cba:	2b00      	cmp	r3, #0
10042cbc:	d01a      	beq.n	10042cf4 <COMM_Event_Handler+0x71c>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
10042cbe:	2110      	movs	r1, #16
10042cc0:	187b      	adds	r3, r7, r1
10042cc2:	2200      	movs	r2, #0
10042cc4:	601a      	str	r2, [r3, #0]
10042cc6:	187b      	adds	r3, r7, r1
10042cc8:	2203      	movs	r2, #3
10042cca:	701a      	strb	r2, [r3, #0]
10042ccc:	187b      	adds	r3, r7, r1
10042cce:	6818      	ldr	r0, [r3, #0]
10042cd0:	f7ff fc82 	bl	100425d8 <COMM_Event_Handler>
		commSM = next;
10042cd4:	4b15      	ldr	r3, [pc, #84]	@ (10042d2c <COMM_Event_Handler+0x754>)
10042cd6:	2276      	movs	r2, #118	@ 0x76
10042cd8:	18ba      	adds	r2, r7, r2
10042cda:	7812      	ldrb	r2, [r2, #0]
10042cdc:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
10042cde:	210c      	movs	r1, #12
10042ce0:	187b      	adds	r3, r7, r1
10042ce2:	2200      	movs	r2, #0
10042ce4:	601a      	str	r2, [r3, #0]
10042ce6:	187b      	adds	r3, r7, r1
10042ce8:	2202      	movs	r2, #2
10042cea:	701a      	strb	r2, [r3, #0]
10042cec:	187b      	adds	r3, r7, r1
10042cee:	6818      	ldr	r0, [r3, #0]
10042cf0:	f7ff fc72 	bl	100425d8 <COMM_Event_Handler>
	}
	return 1;
10042cf4:	2301      	movs	r3, #1
}
10042cf6:	0018      	movs	r0, r3
10042cf8:	46bd      	mov	sp, r7
10042cfa:	b01e      	add	sp, #120	@ 0x78
10042cfc:	bdb0      	pop	{r4, r5, r7, pc}
10042cfe:	46c0      	nop			@ (mov r8, r8)
10042d00:	10067558 	.word	0x10067558
10042d04:	200003c4 	.word	0x200003c4
10042d08:	200003ca 	.word	0x200003ca
10042d0c:	1006756c 	.word	0x1006756c
10042d10:	10067580 	.word	0x10067580
10042d14:	1006759c 	.word	0x1006759c
10042d18:	100675a8 	.word	0x100675a8
10042d1c:	100675b0 	.word	0x100675b0
10042d20:	100675c4 	.word	0x100675c4
10042d24:	100675d4 	.word	0x100675d4
10042d28:	100675e0 	.word	0x100675e0
10042d2c:	200003b5 	.word	0x200003b5

10042d30 <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
10042d30:	b580      	push	{r7, lr}
10042d32:	b084      	sub	sp, #16
10042d34:	af00      	add	r7, sp, #0
10042d36:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
10042d38:	687b      	ldr	r3, [r7, #4]
10042d3a:	0018      	movs	r0, r3
10042d3c:	f7fd fa6e 	bl	1004021c <strlen>
10042d40:	0003      	movs	r3, r0
10042d42:	60bb      	str	r3, [r7, #8]
	USART_WriteTx(DEBUGPRINT);
10042d44:	200e      	movs	r0, #14
10042d46:	f002 fb2d 	bl	100453a4 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10042d4a:	2300      	movs	r3, #0
10042d4c:	60fb      	str	r3, [r7, #12]
10042d4e:	e009      	b.n	10042d64 <discountprintf+0x34>
		USART_WriteTx(text[i]);
10042d50:	68fb      	ldr	r3, [r7, #12]
10042d52:	687a      	ldr	r2, [r7, #4]
10042d54:	18d3      	adds	r3, r2, r3
10042d56:	781b      	ldrb	r3, [r3, #0]
10042d58:	0018      	movs	r0, r3
10042d5a:	f002 fb23 	bl	100453a4 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10042d5e:	68fb      	ldr	r3, [r7, #12]
10042d60:	3301      	adds	r3, #1
10042d62:	60fb      	str	r3, [r7, #12]
10042d64:	68fa      	ldr	r2, [r7, #12]
10042d66:	68bb      	ldr	r3, [r7, #8]
10042d68:	429a      	cmp	r2, r3
10042d6a:	dbf1      	blt.n	10042d50 <discountprintf+0x20>
	}
	USART_WriteTx(DEBUGPRINTEND);
10042d6c:	200a      	movs	r0, #10
10042d6e:	f002 fb19 	bl	100453a4 <USART_WriteTx>
	return 1;
10042d72:	2301      	movs	r3, #1
}
10042d74:	0018      	movs	r0, r3
10042d76:	46bd      	mov	sp, r7
10042d78:	b004      	add	sp, #16
10042d7a:	bd80      	pop	{r7, pc}

10042d7c <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
10042d7c:	b580      	push	{r7, lr}
10042d7e:	b082      	sub	sp, #8
10042d80:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
10042d82:	200c      	movs	r0, #12
10042d84:	f023 f886 	bl	10065e94 <malloc>
10042d88:	0003      	movs	r3, r0
10042d8a:	607b      	str	r3, [r7, #4]
	if(new == NULL){
10042d8c:	687b      	ldr	r3, [r7, #4]
10042d8e:	2b00      	cmp	r3, #0
10042d90:	d101      	bne.n	10042d96 <FIFO_Create+0x1a>
		return NULL;
10042d92:	2300      	movs	r3, #0
10042d94:	e009      	b.n	10042daa <FIFO_Create+0x2e>
	}
	new->first = NULL;
10042d96:	687b      	ldr	r3, [r7, #4]
10042d98:	2200      	movs	r2, #0
10042d9a:	601a      	str	r2, [r3, #0]
	new->last = NULL;
10042d9c:	687b      	ldr	r3, [r7, #4]
10042d9e:	2200      	movs	r2, #0
10042da0:	605a      	str	r2, [r3, #4]
	new->size = 0;
10042da2:	687b      	ldr	r3, [r7, #4]
10042da4:	2200      	movs	r2, #0
10042da6:	811a      	strh	r2, [r3, #8]
	return new;
10042da8:	687b      	ldr	r3, [r7, #4]
}
10042daa:	0018      	movs	r0, r3
10042dac:	46bd      	mov	sp, r7
10042dae:	b002      	add	sp, #8
10042db0:	bd80      	pop	{r7, pc}

10042db2 <FIFO_Destroy>:

uint8_t FIFO_Destroy(FIFO doomed){
10042db2:	b580      	push	{r7, lr}
10042db4:	b084      	sub	sp, #16
10042db6:	af00      	add	r7, sp, #0
10042db8:	6078      	str	r0, [r7, #4]
	if(doomed == NULL){
10042dba:	687b      	ldr	r3, [r7, #4]
10042dbc:	2b00      	cmp	r3, #0
10042dbe:	d101      	bne.n	10042dc4 <FIFO_Destroy+0x12>
		return 0;// operation failled
10042dc0:	2300      	movs	r3, #0
10042dc2:	e014      	b.n	10042dee <FIFO_Destroy+0x3c>
	}
	node* cur = doomed->first;
10042dc4:	687b      	ldr	r3, [r7, #4]
10042dc6:	681b      	ldr	r3, [r3, #0]
10042dc8:	60fb      	str	r3, [r7, #12]
	while(cur != NULL){
10042dca:	e008      	b.n	10042dde <FIFO_Destroy+0x2c>
		node* last = cur;
10042dcc:	68fb      	ldr	r3, [r7, #12]
10042dce:	60bb      	str	r3, [r7, #8]
		cur = cur->next;
10042dd0:	68fb      	ldr	r3, [r7, #12]
10042dd2:	685b      	ldr	r3, [r3, #4]
10042dd4:	60fb      	str	r3, [r7, #12]
		free(last);
10042dd6:	68bb      	ldr	r3, [r7, #8]
10042dd8:	0018      	movs	r0, r3
10042dda:	f023 f865 	bl	10065ea8 <free>
	while(cur != NULL){
10042dde:	68fb      	ldr	r3, [r7, #12]
10042de0:	2b00      	cmp	r3, #0
10042de2:	d1f3      	bne.n	10042dcc <FIFO_Destroy+0x1a>
	}
	free(doomed);
10042de4:	687b      	ldr	r3, [r7, #4]
10042de6:	0018      	movs	r0, r3
10042de8:	f023 f85e 	bl	10065ea8 <free>
	return 1;
10042dec:	2301      	movs	r3, #1
}
10042dee:	0018      	movs	r0, r3
10042df0:	46bd      	mov	sp, r7
10042df2:	b004      	add	sp, #16
10042df4:	bd80      	pop	{r7, pc}

10042df6 <FIFO_Enqueue>:

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
10042df6:	b580      	push	{r7, lr}
10042df8:	b084      	sub	sp, #16
10042dfa:	af00      	add	r7, sp, #0
10042dfc:	6078      	str	r0, [r7, #4]
10042dfe:	003b      	movs	r3, r7
10042e00:	6019      	str	r1, [r3, #0]
	if(list == NULL){
10042e02:	687b      	ldr	r3, [r7, #4]
10042e04:	2b00      	cmp	r3, #0
10042e06:	d101      	bne.n	10042e0c <FIFO_Enqueue+0x16>
		return 0;
10042e08:	2300      	movs	r3, #0
10042e0a:	e026      	b.n	10042e5a <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
10042e0c:	2008      	movs	r0, #8
10042e0e:	f023 f841 	bl	10065e94 <malloc>
10042e12:	0003      	movs	r3, r0
10042e14:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
10042e16:	68fb      	ldr	r3, [r7, #12]
10042e18:	2b00      	cmp	r3, #0
10042e1a:	d101      	bne.n	10042e20 <FIFO_Enqueue+0x2a>
		return 0;
10042e1c:	2300      	movs	r3, #0
10042e1e:	e01c      	b.n	10042e5a <FIFO_Enqueue+0x64>
	}
	new->event = event;
10042e20:	68fb      	ldr	r3, [r7, #12]
10042e22:	003a      	movs	r2, r7
10042e24:	6812      	ldr	r2, [r2, #0]
10042e26:	601a      	str	r2, [r3, #0]
	new->next = NULL;
10042e28:	68fb      	ldr	r3, [r7, #12]
10042e2a:	2200      	movs	r2, #0
10042e2c:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
10042e2e:	687b      	ldr	r3, [r7, #4]
10042e30:	685b      	ldr	r3, [r3, #4]
10042e32:	2b00      	cmp	r3, #0
10042e34:	d004      	beq.n	10042e40 <FIFO_Enqueue+0x4a>
		list->last->next = new;
10042e36:	687b      	ldr	r3, [r7, #4]
10042e38:	685b      	ldr	r3, [r3, #4]
10042e3a:	68fa      	ldr	r2, [r7, #12]
10042e3c:	605a      	str	r2, [r3, #4]
10042e3e:	e002      	b.n	10042e46 <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
10042e40:	687b      	ldr	r3, [r7, #4]
10042e42:	68fa      	ldr	r2, [r7, #12]
10042e44:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
10042e46:	687b      	ldr	r3, [r7, #4]
10042e48:	68fa      	ldr	r2, [r7, #12]
10042e4a:	605a      	str	r2, [r3, #4]
	list->size++;
10042e4c:	687b      	ldr	r3, [r7, #4]
10042e4e:	891b      	ldrh	r3, [r3, #8]
10042e50:	3301      	adds	r3, #1
10042e52:	b29a      	uxth	r2, r3
10042e54:	687b      	ldr	r3, [r7, #4]
10042e56:	811a      	strh	r2, [r3, #8]
	return 1;
10042e58:	2301      	movs	r3, #1
}
10042e5a:	0018      	movs	r0, r3
10042e5c:	46bd      	mov	sp, r7
10042e5e:	b004      	add	sp, #16
10042e60:	bd80      	pop	{r7, pc}

10042e62 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
10042e62:	b590      	push	{r4, r7, lr}
10042e64:	b089      	sub	sp, #36	@ 0x24
10042e66:	af00      	add	r7, sp, #0
10042e68:	6078      	str	r0, [r7, #4]
	if(list == NULL){
10042e6a:	687b      	ldr	r3, [r7, #4]
10042e6c:	2b00      	cmp	r3, #0
10042e6e:	d107      	bne.n	10042e80 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
10042e70:	2118      	movs	r1, #24
10042e72:	187b      	adds	r3, r7, r1
10042e74:	22ff      	movs	r2, #255	@ 0xff
10042e76:	701a      	strb	r2, [r3, #0]
10042e78:	187b      	adds	r3, r7, r1
10042e7a:	2200      	movs	r2, #0
10042e7c:	805a      	strh	r2, [r3, #2]
10042e7e:	e030      	b.n	10042ee2 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
10042e80:	687b      	ldr	r3, [r7, #4]
10042e82:	681b      	ldr	r3, [r3, #0]
10042e84:	2b00      	cmp	r3, #0
10042e86:	d10a      	bne.n	10042e9e <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
10042e88:	687b      	ldr	r3, [r7, #4]
10042e8a:	2200      	movs	r2, #0
10042e8c:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
10042e8e:	2118      	movs	r1, #24
10042e90:	187b      	adds	r3, r7, r1
10042e92:	2200      	movs	r2, #0
10042e94:	701a      	strb	r2, [r3, #0]
10042e96:	187b      	adds	r3, r7, r1
10042e98:	2200      	movs	r2, #0
10042e9a:	805a      	strh	r2, [r3, #2]
10042e9c:	e021      	b.n	10042ee2 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
10042e9e:	687b      	ldr	r3, [r7, #4]
10042ea0:	681b      	ldr	r3, [r3, #0]
10042ea2:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10042ea4:	69fb      	ldr	r3, [r7, #28]
10042ea6:	685a      	ldr	r2, [r3, #4]
10042ea8:	687b      	ldr	r3, [r7, #4]
10042eaa:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
10042eac:	687b      	ldr	r3, [r7, #4]
10042eae:	681b      	ldr	r3, [r3, #0]
10042eb0:	2b00      	cmp	r3, #0
10042eb2:	d102      	bne.n	10042eba <FIFO_Dequeue+0x58>
		list->last = NULL;
10042eb4:	687b      	ldr	r3, [r7, #4]
10042eb6:	2200      	movs	r2, #0
10042eb8:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
10042eba:	2414      	movs	r4, #20
10042ebc:	193b      	adds	r3, r7, r4
10042ebe:	69fa      	ldr	r2, [r7, #28]
10042ec0:	6812      	ldr	r2, [r2, #0]
10042ec2:	601a      	str	r2, [r3, #0]
	free(doomed);
10042ec4:	69fb      	ldr	r3, [r7, #28]
10042ec6:	0018      	movs	r0, r3
10042ec8:	f022 ffee 	bl	10065ea8 <free>
	list->size--;
10042ecc:	687b      	ldr	r3, [r7, #4]
10042ece:	891b      	ldrh	r3, [r3, #8]
10042ed0:	3b01      	subs	r3, #1
10042ed2:	b29a      	uxth	r2, r3
10042ed4:	687b      	ldr	r3, [r7, #4]
10042ed6:	811a      	strh	r2, [r3, #8]
	return out;
10042ed8:	2318      	movs	r3, #24
10042eda:	18fb      	adds	r3, r7, r3
10042edc:	193a      	adds	r2, r7, r4
10042ede:	6812      	ldr	r2, [r2, #0]
10042ee0:	601a      	str	r2, [r3, #0]

}
10042ee2:	2318      	movs	r3, #24
10042ee4:	18fa      	adds	r2, r7, r3
10042ee6:	2300      	movs	r3, #0
10042ee8:	8811      	ldrh	r1, [r2, #0]
10042eea:	0409      	lsls	r1, r1, #16
10042eec:	0c09      	lsrs	r1, r1, #16
10042eee:	0c1b      	lsrs	r3, r3, #16
10042ef0:	041b      	lsls	r3, r3, #16
10042ef2:	430b      	orrs	r3, r1
10042ef4:	8852      	ldrh	r2, [r2, #2]
10042ef6:	0412      	lsls	r2, r2, #16
10042ef8:	041b      	lsls	r3, r3, #16
10042efa:	0c1b      	lsrs	r3, r3, #16
10042efc:	4313      	orrs	r3, r2
10042efe:	0018      	movs	r0, r3
10042f00:	46bd      	mov	sp, r7
10042f02:	b009      	add	sp, #36	@ 0x24
10042f04:	bd90      	pop	{r4, r7, pc}

10042f06 <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
10042f06:	b580      	push	{r7, lr}
10042f08:	b082      	sub	sp, #8
10042f0a:	af00      	add	r7, sp, #0
10042f0c:	6078      	str	r0, [r7, #4]
	return list->size;
10042f0e:	687b      	ldr	r3, [r7, #4]
10042f10:	891b      	ldrh	r3, [r3, #8]
10042f12:	1e5a      	subs	r2, r3, #1
10042f14:	4193      	sbcs	r3, r2
10042f16:	b2db      	uxtb	r3, r3
}
10042f18:	0018      	movs	r0, r3
10042f1a:	46bd      	mov	sp, r7
10042f1c:	b002      	add	sp, #8
10042f1e:	bd80      	pop	{r7, pc}

10042f20 <FLASH_Init>:
 * @function: FLASH_Init()
 * @brief: initialize the flash access library
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint8_t FLASH_Init(){
10042f20:	b580      	push	{r7, lr}
10042f22:	b082      	sub	sp, #8
10042f24:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10042f26:	4b38      	ldr	r3, [pc, #224]	@ (10043008 <FLASH_Init+0xe8>)
10042f28:	781b      	ldrb	r3, [r3, #0]
10042f2a:	2b00      	cmp	r3, #0
10042f2c:	d001      	beq.n	10042f32 <FLASH_Init+0x12>
10042f2e:	2301      	movs	r3, #1
10042f30:	e066      	b.n	10043000 <FLASH_Init+0xe0>
	
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10042f32:	4b36      	ldr	r3, [pc, #216]	@ (1004300c <FLASH_Init+0xec>)
10042f34:	691a      	ldr	r2, [r3, #16]
10042f36:	4b35      	ldr	r3, [pc, #212]	@ (1004300c <FLASH_Init+0xec>)
10042f38:	210c      	movs	r1, #12
10042f3a:	430a      	orrs	r2, r1
10042f3c:	611a      	str	r2, [r3, #16]
	//find size of schedule
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10042f3e:	2300      	movs	r3, #0
10042f40:	607b      	str	r3, [r7, #4]
10042f42:	e011      	b.n	10042f68 <FLASH_Init+0x48>
		if ((uint8_t)(*(uint8_t*)(SCHEDULEADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
10042f44:	687b      	ldr	r3, [r7, #4]
10042f46:	4a32      	ldr	r2, [pc, #200]	@ (10043010 <FLASH_Init+0xf0>)
10042f48:	4694      	mov	ip, r2
10042f4a:	4463      	add	r3, ip
10042f4c:	00db      	lsls	r3, r3, #3
10042f4e:	781b      	ldrb	r3, [r3, #0]
10042f50:	2bff      	cmp	r3, #255	@ 0xff
10042f52:	d106      	bne.n	10042f62 <FLASH_Init+0x42>
			ScheduleSize = i-1;
10042f54:	687b      	ldr	r3, [r7, #4]
10042f56:	b29b      	uxth	r3, r3
10042f58:	3b01      	subs	r3, #1
10042f5a:	b29a      	uxth	r2, r3
10042f5c:	4b2d      	ldr	r3, [pc, #180]	@ (10043014 <FLASH_Init+0xf4>)
10042f5e:	801a      	strh	r2, [r3, #0]
			break;
10042f60:	e005      	b.n	10042f6e <FLASH_Init+0x4e>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10042f62:	687b      	ldr	r3, [r7, #4]
10042f64:	3301      	adds	r3, #1
10042f66:	607b      	str	r3, [r7, #4]
10042f68:	687b      	ldr	r3, [r7, #4]
10042f6a:	2bff      	cmp	r3, #255	@ 0xff
10042f6c:	ddea      	ble.n	10042f44 <FLASH_Init+0x24>
		}
	}
	//find size of logs
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10042f6e:	2300      	movs	r3, #0
10042f70:	603b      	str	r3, [r7, #0]
10042f72:	e011      	b.n	10042f98 <FLASH_Init+0x78>
		if ((uint8_t)(*(uint8_t*)(LOGSADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
10042f74:	683b      	ldr	r3, [r7, #0]
10042f76:	4a28      	ldr	r2, [pc, #160]	@ (10043018 <FLASH_Init+0xf8>)
10042f78:	4694      	mov	ip, r2
10042f7a:	4463      	add	r3, ip
10042f7c:	00db      	lsls	r3, r3, #3
10042f7e:	781b      	ldrb	r3, [r3, #0]
10042f80:	2bff      	cmp	r3, #255	@ 0xff
10042f82:	d106      	bne.n	10042f92 <FLASH_Init+0x72>
			LogsSize = i-1;
10042f84:	683b      	ldr	r3, [r7, #0]
10042f86:	b29b      	uxth	r3, r3
10042f88:	3b01      	subs	r3, #1
10042f8a:	b29a      	uxth	r2, r3
10042f8c:	4b23      	ldr	r3, [pc, #140]	@ (1004301c <FLASH_Init+0xfc>)
10042f8e:	801a      	strh	r2, [r3, #0]
			break;
10042f90:	e005      	b.n	10042f9e <FLASH_Init+0x7e>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10042f92:	683b      	ldr	r3, [r7, #0]
10042f94:	3301      	adds	r3, #1
10042f96:	603b      	str	r3, [r7, #0]
10042f98:	683b      	ldr	r3, [r7, #0]
10042f9a:	2bff      	cmp	r3, #255	@ 0xff
10042f9c:	ddea      	ble.n	10042f74 <FLASH_Init+0x54>
		}
	}
	initialized = 1;
10042f9e:	4b1a      	ldr	r3, [pc, #104]	@ (10043008 <FLASH_Init+0xe8>)
10042fa0:	2201      	movs	r2, #1
10042fa2:	701a      	strb	r2, [r3, #0]
	//load default values into the duty cycle and volume if they are not initialized
	if(FLASH_GetVolume() == FLASHEMPTY ||FLASH_GetDutyCycle() == FLASHEMPTY){
10042fa4:	f000 f87e 	bl	100430a4 <FLASH_GetVolume>
10042fa8:	0003      	movs	r3, r0
10042faa:	2bff      	cmp	r3, #255	@ 0xff
10042fac:	d004      	beq.n	10042fb8 <FLASH_Init+0x98>
10042fae:	f000 f88f 	bl	100430d0 <FLASH_GetDutyCycle>
10042fb2:	0003      	movs	r3, r0
10042fb4:	2bff      	cmp	r3, #255	@ 0xff
10042fb6:	d122      	bne.n	10042ffe <FLASH_Init+0xde>
		if(FLASH_GetVolume() == FLASHEMPTY && FLASH_GetDutyCycle() == FLASHEMPTY){
10042fb8:	f000 f874 	bl	100430a4 <FLASH_GetVolume>
10042fbc:	0003      	movs	r3, r0
10042fbe:	2bff      	cmp	r3, #255	@ 0xff
10042fc0:	d109      	bne.n	10042fd6 <FLASH_Init+0xb6>
10042fc2:	f000 f885 	bl	100430d0 <FLASH_GetDutyCycle>
10042fc6:	0003      	movs	r3, r0
10042fc8:	2bff      	cmp	r3, #255	@ 0xff
10042fca:	d104      	bne.n	10042fd6 <FLASH_Init+0xb6>
			FLASH_SetDCVol(50, 40);
10042fcc:	2128      	movs	r1, #40	@ 0x28
10042fce:	2032      	movs	r0, #50	@ 0x32
10042fd0:	f000 f826 	bl	10043020 <FLASH_SetDCVol>
10042fd4:	e013      	b.n	10042ffe <FLASH_Init+0xde>
		}else {
			if(FLASH_GetVolume() == FLASHEMPTY){
10042fd6:	f000 f865 	bl	100430a4 <FLASH_GetVolume>
10042fda:	0003      	movs	r3, r0
10042fdc:	2bff      	cmp	r3, #255	@ 0xff
10042fde:	d107      	bne.n	10042ff0 <FLASH_Init+0xd0>
				FLASH_SetDCVol(50, FLASH_GetDutyCycle());
10042fe0:	f000 f876 	bl	100430d0 <FLASH_GetDutyCycle>
10042fe4:	0003      	movs	r3, r0
10042fe6:	0019      	movs	r1, r3
10042fe8:	2032      	movs	r0, #50	@ 0x32
10042fea:	f000 f819 	bl	10043020 <FLASH_SetDCVol>
10042fee:	e006      	b.n	10042ffe <FLASH_Init+0xde>
			}else {
				FLASH_SetDCVol(FLASH_GetVolume(), 40);
10042ff0:	f000 f858 	bl	100430a4 <FLASH_GetVolume>
10042ff4:	0003      	movs	r3, r0
10042ff6:	2128      	movs	r1, #40	@ 0x28
10042ff8:	0018      	movs	r0, r3
10042ffa:	f000 f811 	bl	10043020 <FLASH_SetDCVol>
			}
		}
	}
	return INIT_OK;
10042ffe:	2301      	movs	r3, #1
}
10043000:	0018      	movs	r0, r3
10043002:	46bd      	mov	sp, r7
10043004:	b002      	add	sp, #8
10043006:	bd80      	pop	{r7, pc}
10043008:	200003d0 	.word	0x200003d0
1004300c:	40001000 	.word	0x40001000
10043010:	0200de00 	.word	0x0200de00
10043014:	200003cc 	.word	0x200003cc
10043018:	0200dd00 	.word	0x0200dd00
1004301c:	200003ce 	.word	0x200003ce

10043020 <FLASH_SetDCVol>:
 * @function: FLASH_SetVolume();
 * @brief: edits the volume and duty cycle stored in memory
 * @param: none
 * @return: success status
 */
uint8_t FLASH_SetDCVol(uint8_t volume, uint8_t DC){
10043020:	b5b0      	push	{r4, r5, r7, lr}
10043022:	b088      	sub	sp, #32
10043024:	af00      	add	r7, sp, #0
10043026:	0002      	movs	r2, r0
10043028:	1dfb      	adds	r3, r7, #7
1004302a:	701a      	strb	r2, [r3, #0]
1004302c:	1dbb      	adds	r3, r7, #6
1004302e:	1c0a      	adds	r2, r1, #0
10043030:	701a      	strb	r2, [r3, #0]
	if(!initialized){return 0;}
10043032:	4b1a      	ldr	r3, [pc, #104]	@ (1004309c <FLASH_SetDCVol+0x7c>)
10043034:	781b      	ldrb	r3, [r3, #0]
10043036:	2b00      	cmp	r3, #0
10043038:	d101      	bne.n	1004303e <FLASH_SetDCVol+0x1e>
1004303a:	2300      	movs	r3, #0
1004303c:	e02a      	b.n	10043094 <FLASH_SetDCVol+0x74>
	FLASH_EraseInitTypeDef erase;
	erase.Page = DCVOLPAGE;
1004303e:	210c      	movs	r1, #12
10043040:	187b      	adds	r3, r7, r1
10043042:	225c      	movs	r2, #92	@ 0x5c
10043044:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10043046:	187b      	adds	r3, r7, r1
10043048:	2201      	movs	r2, #1
1004304a:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
1004304c:	187b      	adds	r3, r7, r1
1004304e:	2200      	movs	r2, #0
10043050:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_FLASHEx_Erase(&erase, &faultypage);
10043052:	2308      	movs	r3, #8
10043054:	18fa      	adds	r2, r7, r3
10043056:	187b      	adds	r3, r7, r1
10043058:	0011      	movs	r1, r2
1004305a:	0018      	movs	r0, r3
1004305c:	f003 fbda 	bl	10046814 <HAL_FLASHEx_Erase>
	FLASH_GetVolume();
10043060:	f000 f820 	bl	100430a4 <FLASH_GetVolume>
	FLASH_GetDutyCycle();
10043064:	f000 f834 	bl	100430d0 <FLASH_GetDutyCycle>
	uint32_t data = ((uint32_t)(DC)<<8)+(uint32_t)(volume);
10043068:	1dbb      	adds	r3, r7, #6
1004306a:	781b      	ldrb	r3, [r3, #0]
1004306c:	021a      	lsls	r2, r3, #8
1004306e:	1dfb      	adds	r3, r7, #7
10043070:	781b      	ldrb	r3, [r3, #0]
10043072:	18d3      	adds	r3, r2, r3
10043074:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VOLUMEADDRESS, data);
10043076:	251b      	movs	r5, #27
10043078:	197c      	adds	r4, r7, r5
1004307a:	69fb      	ldr	r3, [r7, #28]
1004307c:	4908      	ldr	r1, [pc, #32]	@ (100430a0 <FLASH_SetDCVol+0x80>)
1004307e:	001a      	movs	r2, r3
10043080:	2000      	movs	r0, #0
10043082:	f003 faed 	bl	10046660 <HAL_FLASH_Program>
10043086:	0003      	movs	r3, r0
10043088:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
1004308a:	197b      	adds	r3, r7, r5
1004308c:	781b      	ldrb	r3, [r3, #0]
1004308e:	425a      	negs	r2, r3
10043090:	4153      	adcs	r3, r2
10043092:	b2db      	uxtb	r3, r3
}
10043094:	0018      	movs	r0, r3
10043096:	46bd      	mov	sp, r7
10043098:	b008      	add	sp, #32
1004309a:	bdb0      	pop	{r4, r5, r7, pc}
1004309c:	200003d0 	.word	0x200003d0
100430a0:	1006e000 	.word	0x1006e000

100430a4 <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
100430a4:	b580      	push	{r7, lr}
100430a6:	b082      	sub	sp, #8
100430a8:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100430aa:	4b07      	ldr	r3, [pc, #28]	@ (100430c8 <FLASH_GetVolume+0x24>)
100430ac:	781b      	ldrb	r3, [r3, #0]
100430ae:	2b00      	cmp	r3, #0
100430b0:	d101      	bne.n	100430b6 <FLASH_GetVolume+0x12>
100430b2:	2300      	movs	r3, #0
100430b4:	e003      	b.n	100430be <FLASH_GetVolume+0x1a>
	uint8_t* adr = (uint8_t*)VOLUMEADDRESS;
100430b6:	4b05      	ldr	r3, [pc, #20]	@ (100430cc <FLASH_GetVolume+0x28>)
100430b8:	607b      	str	r3, [r7, #4]
	return *adr;
100430ba:	687b      	ldr	r3, [r7, #4]
100430bc:	781b      	ldrb	r3, [r3, #0]
}
100430be:	0018      	movs	r0, r3
100430c0:	46bd      	mov	sp, r7
100430c2:	b002      	add	sp, #8
100430c4:	bd80      	pop	{r7, pc}
100430c6:	46c0      	nop			@ (mov r8, r8)
100430c8:	200003d0 	.word	0x200003d0
100430cc:	1006e000 	.word	0x1006e000

100430d0 <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
100430d0:	b580      	push	{r7, lr}
100430d2:	b082      	sub	sp, #8
100430d4:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100430d6:	4b07      	ldr	r3, [pc, #28]	@ (100430f4 <FLASH_GetDutyCycle+0x24>)
100430d8:	781b      	ldrb	r3, [r3, #0]
100430da:	2b00      	cmp	r3, #0
100430dc:	d101      	bne.n	100430e2 <FLASH_GetDutyCycle+0x12>
100430de:	2300      	movs	r3, #0
100430e0:	e003      	b.n	100430ea <FLASH_GetDutyCycle+0x1a>
	uint8_t* adr = (uint8_t*)DCADDRESS;
100430e2:	4b05      	ldr	r3, [pc, #20]	@ (100430f8 <FLASH_GetDutyCycle+0x28>)
100430e4:	607b      	str	r3, [r7, #4]
	return *adr;
100430e6:	687b      	ldr	r3, [r7, #4]
100430e8:	781b      	ldrb	r3, [r3, #0]
}
100430ea:	0018      	movs	r0, r3
100430ec:	46bd      	mov	sp, r7
100430ee:	b002      	add	sp, #8
100430f0:	bd80      	pop	{r7, pc}
100430f2:	46c0      	nop			@ (mov r8, r8)
100430f4:	200003d0 	.word	0x200003d0
100430f8:	1006e001 	.word	0x1006e001

100430fc <FLASH_AppendLogs>:
 * @function: FLASH_AppendLogs();
 * @brief: Adds a new event entry to the logs
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendLogs(scheduleEvent event){
100430fc:	b580      	push	{r7, lr}
100430fe:	b084      	sub	sp, #16
10043100:	af00      	add	r7, sp, #0
10043102:	003b      	movs	r3, r7
10043104:	6018      	str	r0, [r3, #0]
10043106:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10043108:	4b24      	ldr	r3, [pc, #144]	@ (1004319c <FLASH_AppendLogs+0xa0>)
1004310a:	781b      	ldrb	r3, [r3, #0]
1004310c:	2b00      	cmp	r3, #0
1004310e:	d101      	bne.n	10043114 <FLASH_AppendLogs+0x18>
10043110:	2300      	movs	r3, #0
10043112:	e03f      	b.n	10043194 <FLASH_AppendLogs+0x98>
	LogsSize++;
10043114:	4b22      	ldr	r3, [pc, #136]	@ (100431a0 <FLASH_AppendLogs+0xa4>)
10043116:	881b      	ldrh	r3, [r3, #0]
10043118:	3301      	adds	r3, #1
1004311a:	b29a      	uxth	r2, r3
1004311c:	4b20      	ldr	r3, [pc, #128]	@ (100431a0 <FLASH_AppendLogs+0xa4>)
1004311e:	801a      	strh	r2, [r3, #0]
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
10043120:	003b      	movs	r3, r7
10043122:	781b      	ldrb	r3, [r3, #0]
10043124:	001a      	movs	r2, r3
10043126:	003b      	movs	r3, r7
10043128:	785b      	ldrb	r3, [r3, #1]
1004312a:	021b      	lsls	r3, r3, #8
1004312c:	431a      	orrs	r2, r3
1004312e:	003b      	movs	r3, r7
10043130:	789b      	ldrb	r3, [r3, #2]
10043132:	041b      	lsls	r3, r3, #16
10043134:	431a      	orrs	r2, r3
10043136:	003b      	movs	r3, r7
10043138:	78db      	ldrb	r3, [r3, #3]
1004313a:	061b      	lsls	r3, r3, #24
1004313c:	4313      	orrs	r3, r2
1004313e:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10043140:	003b      	movs	r3, r7
10043142:	791b      	ldrb	r3, [r3, #4]
10043144:	001a      	movs	r2, r3
10043146:	003b      	movs	r3, r7
10043148:	795b      	ldrb	r3, [r3, #5]
1004314a:	021b      	lsls	r3, r3, #8
1004314c:	4313      	orrs	r3, r2
1004314e:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code, to be improved later)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10043150:	4b13      	ldr	r3, [pc, #76]	@ (100431a0 <FLASH_AppendLogs+0xa4>)
10043152:	881b      	ldrh	r3, [r3, #0]
10043154:	4a13      	ldr	r2, [pc, #76]	@ (100431a4 <FLASH_AppendLogs+0xa8>)
10043156:	4694      	mov	ip, r2
10043158:	4463      	add	r3, ip
1004315a:	00db      	lsls	r3, r3, #3
1004315c:	0019      	movs	r1, r3
1004315e:	68fb      	ldr	r3, [r7, #12]
10043160:	001a      	movs	r2, r3
10043162:	2000      	movs	r0, #0
10043164:	f003 fa7c 	bl	10046660 <HAL_FLASH_Program>
10043168:	1e03      	subs	r3, r0, #0
1004316a:	d001      	beq.n	10043170 <FLASH_AppendLogs+0x74>
		return 0;
1004316c:	2300      	movs	r3, #0
1004316e:	e011      	b.n	10043194 <FLASH_AppendLogs+0x98>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10043170:	4b0b      	ldr	r3, [pc, #44]	@ (100431a0 <FLASH_AppendLogs+0xa4>)
10043172:	881b      	ldrh	r3, [r3, #0]
10043174:	4a0b      	ldr	r2, [pc, #44]	@ (100431a4 <FLASH_AppendLogs+0xa8>)
10043176:	4694      	mov	ip, r2
10043178:	4463      	add	r3, ip
1004317a:	00db      	lsls	r3, r3, #3
1004317c:	3304      	adds	r3, #4
1004317e:	0019      	movs	r1, r3
10043180:	68bb      	ldr	r3, [r7, #8]
10043182:	001a      	movs	r2, r3
10043184:	2000      	movs	r0, #0
10043186:	f003 fa6b 	bl	10046660 <HAL_FLASH_Program>
1004318a:	1e03      	subs	r3, r0, #0
1004318c:	d001      	beq.n	10043192 <FLASH_AppendLogs+0x96>
		return 0;
1004318e:	2300      	movs	r3, #0
10043190:	e000      	b.n	10043194 <FLASH_AppendLogs+0x98>
	}
	return 1;
10043192:	2301      	movs	r3, #1
}
10043194:	0018      	movs	r0, r3
10043196:	46bd      	mov	sp, r7
10043198:	b004      	add	sp, #16
1004319a:	bd80      	pop	{r7, pc}
1004319c:	200003d0 	.word	0x200003d0
100431a0:	200003ce 	.word	0x200003ce
100431a4:	0200dd00 	.word	0x0200dd00

100431a8 <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
100431a8:	b580      	push	{r7, lr}
100431aa:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100431ac:	4b05      	ldr	r3, [pc, #20]	@ (100431c4 <FLASH_GetLogsSize+0x1c>)
100431ae:	781b      	ldrb	r3, [r3, #0]
100431b0:	2b00      	cmp	r3, #0
100431b2:	d101      	bne.n	100431b8 <FLASH_GetLogsSize+0x10>
100431b4:	2300      	movs	r3, #0
100431b6:	e001      	b.n	100431bc <FLASH_GetLogsSize+0x14>
	return LogsSize;
100431b8:	4b03      	ldr	r3, [pc, #12]	@ (100431c8 <FLASH_GetLogsSize+0x20>)
100431ba:	881b      	ldrh	r3, [r3, #0]
}
100431bc:	0018      	movs	r0, r3
100431be:	46bd      	mov	sp, r7
100431c0:	bd80      	pop	{r7, pc}
100431c2:	46c0      	nop			@ (mov r8, r8)
100431c4:	200003d0 	.word	0x200003d0
100431c8:	200003ce 	.word	0x200003ce

100431cc <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
100431cc:	b590      	push	{r4, r7, lr}
100431ce:	b087      	sub	sp, #28
100431d0:	af00      	add	r7, sp, #0
100431d2:	6078      	str	r0, [r7, #4]
100431d4:	000a      	movs	r2, r1
100431d6:	1cbb      	adds	r3, r7, #2
100431d8:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
100431da:	2410      	movs	r4, #16
100431dc:	193b      	adds	r3, r7, r4
100431de:	0018      	movs	r0, r3
100431e0:	2306      	movs	r3, #6
100431e2:	001a      	movs	r2, r3
100431e4:	2100      	movs	r1, #0
100431e6:	f023 f95b 	bl	100664a0 <memset>
	if(!initialized){return event;}
100431ea:	4b2e      	ldr	r3, [pc, #184]	@ (100432a4 <FLASH_ReadLogs+0xd8>)
100431ec:	781b      	ldrb	r3, [r3, #0]
100431ee:	2b00      	cmp	r3, #0
100431f0:	d108      	bne.n	10043204 <FLASH_ReadLogs+0x38>
100431f2:	687a      	ldr	r2, [r7, #4]
100431f4:	193b      	adds	r3, r7, r4
100431f6:	0010      	movs	r0, r2
100431f8:	0019      	movs	r1, r3
100431fa:	2306      	movs	r3, #6
100431fc:	001a      	movs	r2, r3
100431fe:	f023 f9c4 	bl	1006658a <memcpy>
10043202:	e04a      	b.n	1004329a <FLASH_ReadLogs+0xce>
	if(index >= 0 && index <= LogsSize){
10043204:	4b28      	ldr	r3, [pc, #160]	@ (100432a8 <FLASH_ReadLogs+0xdc>)
10043206:	881b      	ldrh	r3, [r3, #0]
10043208:	1cba      	adds	r2, r7, #2
1004320a:	8812      	ldrh	r2, [r2, #0]
1004320c:	429a      	cmp	r2, r3
1004320e:	d83b      	bhi.n	10043288 <FLASH_ReadLogs+0xbc>
		event.month = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE));
10043210:	1cbb      	adds	r3, r7, #2
10043212:	881b      	ldrh	r3, [r3, #0]
10043214:	4a25      	ldr	r2, [pc, #148]	@ (100432ac <FLASH_ReadLogs+0xe0>)
10043216:	4694      	mov	ip, r2
10043218:	4463      	add	r3, ip
1004321a:	00db      	lsls	r3, r3, #3
1004321c:	781a      	ldrb	r2, [r3, #0]
1004321e:	2110      	movs	r1, #16
10043220:	187b      	adds	r3, r7, r1
10043222:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1));
10043224:	1cbb      	adds	r3, r7, #2
10043226:	881b      	ldrh	r3, [r3, #0]
10043228:	4a20      	ldr	r2, [pc, #128]	@ (100432ac <FLASH_ReadLogs+0xe0>)
1004322a:	4694      	mov	ip, r2
1004322c:	4463      	add	r3, ip
1004322e:	00db      	lsls	r3, r3, #3
10043230:	3301      	adds	r3, #1
10043232:	781a      	ldrb	r2, [r3, #0]
10043234:	187b      	adds	r3, r7, r1
10043236:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2));
10043238:	1cbb      	adds	r3, r7, #2
1004323a:	881b      	ldrh	r3, [r3, #0]
1004323c:	4a1b      	ldr	r2, [pc, #108]	@ (100432ac <FLASH_ReadLogs+0xe0>)
1004323e:	4694      	mov	ip, r2
10043240:	4463      	add	r3, ip
10043242:	00db      	lsls	r3, r3, #3
10043244:	3302      	adds	r3, #2
10043246:	781a      	ldrb	r2, [r3, #0]
10043248:	187b      	adds	r3, r7, r1
1004324a:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3));
1004324c:	1cbb      	adds	r3, r7, #2
1004324e:	881b      	ldrh	r3, [r3, #0]
10043250:	4a16      	ldr	r2, [pc, #88]	@ (100432ac <FLASH_ReadLogs+0xe0>)
10043252:	4694      	mov	ip, r2
10043254:	4463      	add	r3, ip
10043256:	00db      	lsls	r3, r3, #3
10043258:	3303      	adds	r3, #3
1004325a:	781a      	ldrb	r2, [r3, #0]
1004325c:	187b      	adds	r3, r7, r1
1004325e:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4));
10043260:	1cbb      	adds	r3, r7, #2
10043262:	881b      	ldrh	r3, [r3, #0]
10043264:	4a11      	ldr	r2, [pc, #68]	@ (100432ac <FLASH_ReadLogs+0xe0>)
10043266:	4694      	mov	ip, r2
10043268:	4463      	add	r3, ip
1004326a:	00db      	lsls	r3, r3, #3
1004326c:	3304      	adds	r3, #4
1004326e:	781a      	ldrb	r2, [r3, #0]
10043270:	187b      	adds	r3, r7, r1
10043272:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5));
10043274:	1cbb      	adds	r3, r7, #2
10043276:	881b      	ldrh	r3, [r3, #0]
10043278:	4a0c      	ldr	r2, [pc, #48]	@ (100432ac <FLASH_ReadLogs+0xe0>)
1004327a:	4694      	mov	ip, r2
1004327c:	4463      	add	r3, ip
1004327e:	00db      	lsls	r3, r3, #3
10043280:	3305      	adds	r3, #5
10043282:	781a      	ldrb	r2, [r3, #0]
10043284:	187b      	adds	r3, r7, r1
10043286:	715a      	strb	r2, [r3, #5]

	}
	return event;
10043288:	687a      	ldr	r2, [r7, #4]
1004328a:	2310      	movs	r3, #16
1004328c:	18fb      	adds	r3, r7, r3
1004328e:	0010      	movs	r0, r2
10043290:	0019      	movs	r1, r3
10043292:	2306      	movs	r3, #6
10043294:	001a      	movs	r2, r3
10043296:	f023 f978 	bl	1006658a <memcpy>
}
1004329a:	6878      	ldr	r0, [r7, #4]
1004329c:	46bd      	mov	sp, r7
1004329e:	b007      	add	sp, #28
100432a0:	bd90      	pop	{r4, r7, pc}
100432a2:	46c0      	nop			@ (mov r8, r8)
100432a4:	200003d0 	.word	0x200003d0
100432a8:	200003ce 	.word	0x200003ce
100432ac:	0200dd00 	.word	0x0200dd00

100432b0 <FLASH_AppendSchedule>:
 * @function: FLASH_AppendSchedule();
 * @brief: Adds a new event entry to the schedule
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendSchedule(scheduleEvent event){
100432b0:	b580      	push	{r7, lr}
100432b2:	b086      	sub	sp, #24
100432b4:	af00      	add	r7, sp, #0
100432b6:	2308      	movs	r3, #8
100432b8:	18fb      	adds	r3, r7, r3
100432ba:	6018      	str	r0, [r3, #0]
100432bc:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
100432be:	4b2a      	ldr	r3, [pc, #168]	@ (10043368 <FLASH_AppendSchedule+0xb8>)
100432c0:	781b      	ldrb	r3, [r3, #0]
100432c2:	2b00      	cmp	r3, #0
100432c4:	d101      	bne.n	100432ca <FLASH_AppendSchedule+0x1a>
100432c6:	2300      	movs	r3, #0
100432c8:	e049      	b.n	1004335e <FLASH_AppendSchedule+0xae>
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
100432ca:	2108      	movs	r1, #8
100432cc:	187b      	adds	r3, r7, r1
100432ce:	781b      	ldrb	r3, [r3, #0]
100432d0:	001a      	movs	r2, r3
100432d2:	187b      	adds	r3, r7, r1
100432d4:	785b      	ldrb	r3, [r3, #1]
100432d6:	021b      	lsls	r3, r3, #8
100432d8:	431a      	orrs	r2, r3
100432da:	187b      	adds	r3, r7, r1
100432dc:	789b      	ldrb	r3, [r3, #2]
100432de:	041b      	lsls	r3, r3, #16
100432e0:	431a      	orrs	r2, r3
100432e2:	187b      	adds	r3, r7, r1
100432e4:	78db      	ldrb	r3, [r3, #3]
100432e6:	061b      	lsls	r3, r3, #24
100432e8:	4313      	orrs	r3, r2
100432ea:	617b      	str	r3, [r7, #20]
	uint32_t Data2 = (event.folder)|(event.track<<8);
100432ec:	187b      	adds	r3, r7, r1
100432ee:	791b      	ldrb	r3, [r3, #4]
100432f0:	001a      	movs	r2, r3
100432f2:	187b      	adds	r3, r7, r1
100432f4:	795b      	ldrb	r3, [r3, #5]
100432f6:	021b      	lsls	r3, r3, #8
100432f8:	4313      	orrs	r3, r2
100432fa:	613b      	str	r3, [r7, #16]
	//this isn't blocking code officer I swear! (this is blocking code)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
100432fc:	4b1b      	ldr	r3, [pc, #108]	@ (1004336c <FLASH_AppendSchedule+0xbc>)
100432fe:	881b      	ldrh	r3, [r3, #0]
10043300:	4a1b      	ldr	r2, [pc, #108]	@ (10043370 <FLASH_AppendSchedule+0xc0>)
10043302:	4694      	mov	ip, r2
10043304:	4463      	add	r3, ip
10043306:	00db      	lsls	r3, r3, #3
10043308:	0019      	movs	r1, r3
1004330a:	697b      	ldr	r3, [r7, #20]
1004330c:	001a      	movs	r2, r3
1004330e:	2000      	movs	r0, #0
10043310:	f003 f9a6 	bl	10046660 <HAL_FLASH_Program>
10043314:	1e03      	subs	r3, r0, #0
10043316:	d001      	beq.n	1004331c <FLASH_AppendSchedule+0x6c>
		return 0;
10043318:	2300      	movs	r3, #0
1004331a:	e020      	b.n	1004335e <FLASH_AppendSchedule+0xae>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
1004331c:	4b13      	ldr	r3, [pc, #76]	@ (1004336c <FLASH_AppendSchedule+0xbc>)
1004331e:	881b      	ldrh	r3, [r3, #0]
10043320:	4a13      	ldr	r2, [pc, #76]	@ (10043370 <FLASH_AppendSchedule+0xc0>)
10043322:	4694      	mov	ip, r2
10043324:	4463      	add	r3, ip
10043326:	00db      	lsls	r3, r3, #3
10043328:	3304      	adds	r3, #4
1004332a:	0019      	movs	r1, r3
1004332c:	693b      	ldr	r3, [r7, #16]
1004332e:	001a      	movs	r2, r3
10043330:	2000      	movs	r0, #0
10043332:	f003 f995 	bl	10046660 <HAL_FLASH_Program>
10043336:	1e03      	subs	r3, r0, #0
10043338:	d001      	beq.n	1004333e <FLASH_AppendSchedule+0x8e>
		return 0;
1004333a:	2300      	movs	r3, #0
1004333c:	e00f      	b.n	1004335e <FLASH_AppendSchedule+0xae>
	}
	ScheduleSize++;
1004333e:	4b0b      	ldr	r3, [pc, #44]	@ (1004336c <FLASH_AppendSchedule+0xbc>)
10043340:	881b      	ldrh	r3, [r3, #0]
10043342:	3301      	adds	r3, #1
10043344:	b29a      	uxth	r2, r3
10043346:	4b09      	ldr	r3, [pc, #36]	@ (1004336c <FLASH_AppendSchedule+0xbc>)
10043348:	801a      	strh	r2, [r3, #0]
	FLASH_ReadSchedule(ScheduleSize-1);
1004334a:	4b08      	ldr	r3, [pc, #32]	@ (1004336c <FLASH_AppendSchedule+0xbc>)
1004334c:	881b      	ldrh	r3, [r3, #0]
1004334e:	3b01      	subs	r3, #1
10043350:	b29a      	uxth	r2, r3
10043352:	003b      	movs	r3, r7
10043354:	0011      	movs	r1, r2
10043356:	0018      	movs	r0, r3
10043358:	f000 f81e 	bl	10043398 <FLASH_ReadSchedule>
	return 1;
1004335c:	2301      	movs	r3, #1
}
1004335e:	0018      	movs	r0, r3
10043360:	46bd      	mov	sp, r7
10043362:	b006      	add	sp, #24
10043364:	bd80      	pop	{r7, pc}
10043366:	46c0      	nop			@ (mov r8, r8)
10043368:	200003d0 	.word	0x200003d0
1004336c:	200003cc 	.word	0x200003cc
10043370:	0200de00 	.word	0x0200de00

10043374 <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
10043374:	b580      	push	{r7, lr}
10043376:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10043378:	4b05      	ldr	r3, [pc, #20]	@ (10043390 <FLASH_GetScheduleSize+0x1c>)
1004337a:	781b      	ldrb	r3, [r3, #0]
1004337c:	2b00      	cmp	r3, #0
1004337e:	d101      	bne.n	10043384 <FLASH_GetScheduleSize+0x10>
10043380:	2300      	movs	r3, #0
10043382:	e001      	b.n	10043388 <FLASH_GetScheduleSize+0x14>
	return ScheduleSize;
10043384:	4b03      	ldr	r3, [pc, #12]	@ (10043394 <FLASH_GetScheduleSize+0x20>)
10043386:	881b      	ldrh	r3, [r3, #0]
}
10043388:	0018      	movs	r0, r3
1004338a:	46bd      	mov	sp, r7
1004338c:	bd80      	pop	{r7, pc}
1004338e:	46c0      	nop			@ (mov r8, r8)
10043390:	200003d0 	.word	0x200003d0
10043394:	200003cc 	.word	0x200003cc

10043398 <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
10043398:	b590      	push	{r4, r7, lr}
1004339a:	b087      	sub	sp, #28
1004339c:	af00      	add	r7, sp, #0
1004339e:	6078      	str	r0, [r7, #4]
100433a0:	000a      	movs	r2, r1
100433a2:	1cbb      	adds	r3, r7, #2
100433a4:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
100433a6:	2410      	movs	r4, #16
100433a8:	193b      	adds	r3, r7, r4
100433aa:	0018      	movs	r0, r3
100433ac:	2306      	movs	r3, #6
100433ae:	001a      	movs	r2, r3
100433b0:	2100      	movs	r1, #0
100433b2:	f023 f875 	bl	100664a0 <memset>
	if(!initialized){return event;}
100433b6:	4b2e      	ldr	r3, [pc, #184]	@ (10043470 <FLASH_ReadSchedule+0xd8>)
100433b8:	781b      	ldrb	r3, [r3, #0]
100433ba:	2b00      	cmp	r3, #0
100433bc:	d108      	bne.n	100433d0 <FLASH_ReadSchedule+0x38>
100433be:	687a      	ldr	r2, [r7, #4]
100433c0:	193b      	adds	r3, r7, r4
100433c2:	0010      	movs	r0, r2
100433c4:	0019      	movs	r1, r3
100433c6:	2306      	movs	r3, #6
100433c8:	001a      	movs	r2, r3
100433ca:	f023 f8de 	bl	1006658a <memcpy>
100433ce:	e04a      	b.n	10043466 <FLASH_ReadSchedule+0xce>
	if(index >= 0 && index < ScheduleSize){
100433d0:	4b28      	ldr	r3, [pc, #160]	@ (10043474 <FLASH_ReadSchedule+0xdc>)
100433d2:	881b      	ldrh	r3, [r3, #0]
100433d4:	1cba      	adds	r2, r7, #2
100433d6:	8812      	ldrh	r2, [r2, #0]
100433d8:	429a      	cmp	r2, r3
100433da:	d23b      	bcs.n	10043454 <FLASH_ReadSchedule+0xbc>
		event.month = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE));
100433dc:	1cbb      	adds	r3, r7, #2
100433de:	881b      	ldrh	r3, [r3, #0]
100433e0:	4a25      	ldr	r2, [pc, #148]	@ (10043478 <FLASH_ReadSchedule+0xe0>)
100433e2:	4694      	mov	ip, r2
100433e4:	4463      	add	r3, ip
100433e6:	00db      	lsls	r3, r3, #3
100433e8:	781a      	ldrb	r2, [r3, #0]
100433ea:	2110      	movs	r1, #16
100433ec:	187b      	adds	r3, r7, r1
100433ee:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+1));
100433f0:	1cbb      	adds	r3, r7, #2
100433f2:	881b      	ldrh	r3, [r3, #0]
100433f4:	4a20      	ldr	r2, [pc, #128]	@ (10043478 <FLASH_ReadSchedule+0xe0>)
100433f6:	4694      	mov	ip, r2
100433f8:	4463      	add	r3, ip
100433fa:	00db      	lsls	r3, r3, #3
100433fc:	3301      	adds	r3, #1
100433fe:	781a      	ldrb	r2, [r3, #0]
10043400:	187b      	adds	r3, r7, r1
10043402:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+2));
10043404:	1cbb      	adds	r3, r7, #2
10043406:	881b      	ldrh	r3, [r3, #0]
10043408:	4a1b      	ldr	r2, [pc, #108]	@ (10043478 <FLASH_ReadSchedule+0xe0>)
1004340a:	4694      	mov	ip, r2
1004340c:	4463      	add	r3, ip
1004340e:	00db      	lsls	r3, r3, #3
10043410:	3302      	adds	r3, #2
10043412:	781a      	ldrb	r2, [r3, #0]
10043414:	187b      	adds	r3, r7, r1
10043416:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+3));
10043418:	1cbb      	adds	r3, r7, #2
1004341a:	881b      	ldrh	r3, [r3, #0]
1004341c:	4a16      	ldr	r2, [pc, #88]	@ (10043478 <FLASH_ReadSchedule+0xe0>)
1004341e:	4694      	mov	ip, r2
10043420:	4463      	add	r3, ip
10043422:	00db      	lsls	r3, r3, #3
10043424:	3303      	adds	r3, #3
10043426:	781a      	ldrb	r2, [r3, #0]
10043428:	187b      	adds	r3, r7, r1
1004342a:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+4));
1004342c:	1cbb      	adds	r3, r7, #2
1004342e:	881b      	ldrh	r3, [r3, #0]
10043430:	4a11      	ldr	r2, [pc, #68]	@ (10043478 <FLASH_ReadSchedule+0xe0>)
10043432:	4694      	mov	ip, r2
10043434:	4463      	add	r3, ip
10043436:	00db      	lsls	r3, r3, #3
10043438:	3304      	adds	r3, #4
1004343a:	781a      	ldrb	r2, [r3, #0]
1004343c:	187b      	adds	r3, r7, r1
1004343e:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+5));
10043440:	1cbb      	adds	r3, r7, #2
10043442:	881b      	ldrh	r3, [r3, #0]
10043444:	4a0c      	ldr	r2, [pc, #48]	@ (10043478 <FLASH_ReadSchedule+0xe0>)
10043446:	4694      	mov	ip, r2
10043448:	4463      	add	r3, ip
1004344a:	00db      	lsls	r3, r3, #3
1004344c:	3305      	adds	r3, #5
1004344e:	781a      	ldrb	r2, [r3, #0]
10043450:	187b      	adds	r3, r7, r1
10043452:	715a      	strb	r2, [r3, #5]

	}
	return event;
10043454:	687a      	ldr	r2, [r7, #4]
10043456:	2310      	movs	r3, #16
10043458:	18fb      	adds	r3, r7, r3
1004345a:	0010      	movs	r0, r2
1004345c:	0019      	movs	r1, r3
1004345e:	2306      	movs	r3, #6
10043460:	001a      	movs	r2, r3
10043462:	f023 f892 	bl	1006658a <memcpy>
}
10043466:	6878      	ldr	r0, [r7, #4]
10043468:	46bd      	mov	sp, r7
1004346a:	b007      	add	sp, #28
1004346c:	bd90      	pop	{r4, r7, pc}
1004346e:	46c0      	nop			@ (mov r8, r8)
10043470:	200003d0 	.word	0x200003d0
10043474:	200003cc 	.word	0x200003cc
10043478:	0200de00 	.word	0x0200de00

1004347c <FLASH_ClearSchedule>:
 * @function: FLASH_ClearSchedule();
 * @brief: Clears all Schedule entries
 * @param: none
 * @return: success status
 */
uint8_t FLASH_ClearSchedule(){
1004347c:	b5b0      	push	{r4, r5, r7, lr}
1004347e:	b086      	sub	sp, #24
10043480:	af00      	add	r7, sp, #0
	ScheduleSize = 0;
10043482:	4b10      	ldr	r3, [pc, #64]	@ (100434c4 <FLASH_ClearSchedule+0x48>)
10043484:	2200      	movs	r2, #0
10043486:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef erase;
	erase.Page = SCHEDULEPAGE;
10043488:	2108      	movs	r1, #8
1004348a:	187b      	adds	r3, r7, r1
1004348c:	225e      	movs	r2, #94	@ 0x5e
1004348e:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10043490:	187b      	adds	r3, r7, r1
10043492:	2201      	movs	r2, #1
10043494:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10043496:	187b      	adds	r3, r7, r1
10043498:	2200      	movs	r2, #0
1004349a:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &faultypage);
1004349c:	2517      	movs	r5, #23
1004349e:	197c      	adds	r4, r7, r5
100434a0:	1d3a      	adds	r2, r7, #4
100434a2:	187b      	adds	r3, r7, r1
100434a4:	0011      	movs	r1, r2
100434a6:	0018      	movs	r0, r3
100434a8:	f003 f9b4 	bl	10046814 <HAL_FLASHEx_Erase>
100434ac:	0003      	movs	r3, r0
100434ae:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
100434b0:	197b      	adds	r3, r7, r5
100434b2:	781b      	ldrb	r3, [r3, #0]
100434b4:	425a      	negs	r2, r3
100434b6:	4153      	adcs	r3, r2
100434b8:	b2db      	uxtb	r3, r3
}
100434ba:	0018      	movs	r0, r3
100434bc:	46bd      	mov	sp, r7
100434be:	b006      	add	sp, #24
100434c0:	bdb0      	pop	{r4, r5, r7, pc}
100434c2:	46c0      	nop			@ (mov r8, r8)
100434c4:	200003cc 	.word	0x200003cc

100434c8 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
100434c8:	b580      	push	{r7, lr}
100434ca:	b084      	sub	sp, #16
100434cc:	af00      	add	r7, sp, #0
100434ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
100434d0:	4b07      	ldr	r3, [pc, #28]	@ (100434f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100434d2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100434d4:	4b06      	ldr	r3, [pc, #24]	@ (100434f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100434d6:	687a      	ldr	r2, [r7, #4]
100434d8:	430a      	orrs	r2, r1
100434da:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100434dc:	4b04      	ldr	r3, [pc, #16]	@ (100434f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100434de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100434e0:	687a      	ldr	r2, [r7, #4]
100434e2:	4013      	ands	r3, r2
100434e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100434e6:	68fb      	ldr	r3, [r7, #12]
}
100434e8:	46c0      	nop			@ (mov r8, r8)
100434ea:	46bd      	mov	sp, r7
100434ec:	b004      	add	sp, #16
100434ee:	bd80      	pop	{r7, pc}
100434f0:	48400000 	.word	0x48400000

100434f4 <GPIO_Init>:
 * @function: GPIO_Init()
 * @brief: initialized GPIO pins to receive 6 external buttons
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int GPIO_Init(){
100434f4:	b580      	push	{r7, lr}
100434f6:	b086      	sub	sp, #24
100434f8:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100434fa:	4b1d      	ldr	r3, [pc, #116]	@ (10043570 <GPIO_Init+0x7c>)
100434fc:	781b      	ldrb	r3, [r3, #0]
100434fe:	2b00      	cmp	r3, #0
10043500:	d001      	beq.n	10043506 <GPIO_Init+0x12>
10043502:	2301      	movs	r3, #1
10043504:	e030      	b.n	10043568 <GPIO_Init+0x74>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
10043506:	1d3b      	adds	r3, r7, #4
10043508:	0018      	movs	r0, r3
1004350a:	2314      	movs	r3, #20
1004350c:	001a      	movs	r2, r3
1004350e:	2100      	movs	r1, #0
10043510:	f022 ffc6 	bl	100664a0 <memset>

	//GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
10043514:	2008      	movs	r0, #8
10043516:	f7ff ffd7 	bl	100434c8 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
1004351a:	2004      	movs	r0, #4
1004351c:	f7ff ffd4 	bl	100434c8 <LL_AHB1_GRP1_EnableClock>


	//Configure GPIO pins on port A
	GPIO_InitStruct.Pin = BUTTON_1_PIN | BUTTON_5_PIN | BUTTON_6_PIN ;
10043520:	1d3b      	adds	r3, r7, #4
10043522:	22b0      	movs	r2, #176	@ 0xb0
10043524:	0112      	lsls	r2, r2, #4
10043526:	601a      	str	r2, [r3, #0]
//	GPIO_InitStruct.Pin |= BUTTON_2_PIN | BUTTON_3_PIN;//on a separate line to easily disable to allow the debugger to run
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10043528:	1d3b      	adds	r3, r7, #4
1004352a:	2200      	movs	r2, #0
1004352c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
1004352e:	1d3b      	adds	r3, r7, #4
10043530:	2200      	movs	r2, #0
10043532:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10043534:	1d3a      	adds	r2, r7, #4
10043536:	2390      	movs	r3, #144	@ 0x90
10043538:	05db      	lsls	r3, r3, #23
1004353a:	0011      	movs	r1, r2
1004353c:	0018      	movs	r0, r3
1004353e:	f003 f9e9 	bl	10046914 <HAL_GPIO_Init>

	//Configure GPIO pins : PB15 PB13
	GPIO_InitStruct.Pin = BUTTON_4_PIN;
10043542:	1d3b      	adds	r3, r7, #4
10043544:	2210      	movs	r2, #16
10043546:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10043548:	1d3b      	adds	r3, r7, #4
1004354a:	2200      	movs	r2, #0
1004354c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
1004354e:	1d3b      	adds	r3, r7, #4
10043550:	2200      	movs	r2, #0
10043552:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043554:	1d3b      	adds	r3, r7, #4
10043556:	4a07      	ldr	r2, [pc, #28]	@ (10043574 <GPIO_Init+0x80>)
10043558:	0019      	movs	r1, r3
1004355a:	0010      	movs	r0, r2
1004355c:	f003 f9da 	bl	10046914 <HAL_GPIO_Init>

	initialized = 1;
10043560:	4b03      	ldr	r3, [pc, #12]	@ (10043570 <GPIO_Init+0x7c>)
10043562:	2201      	movs	r2, #1
10043564:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10043566:	2301      	movs	r3, #1
}
10043568:	0018      	movs	r0, r3
1004356a:	46bd      	mov	sp, r7
1004356c:	b006      	add	sp, #24
1004356e:	bd80      	pop	{r7, pc}
10043570:	200003d1 	.word	0x200003d1
10043574:	48100000 	.word	0x48100000

10043578 <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the external button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 6th bit is button 5
 */
uint8_t GPIO_ReadButtons(void){
10043578:	b5b0      	push	{r4, r5, r7, lr}
1004357a:	af00      	add	r7, sp, #0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
1004357c:	2380      	movs	r3, #128	@ 0x80
1004357e:	011a      	lsls	r2, r3, #4
10043580:	2390      	movs	r3, #144	@ 0x90
10043582:	05db      	lsls	r3, r3, #23
10043584:	0011      	movs	r1, r2
10043586:	0018      	movs	r0, r3
10043588:	f003 fc4c 	bl	10046e24 <HAL_GPIO_ReadPin>
1004358c:	0003      	movs	r3, r0
1004358e:	b25b      	sxtb	r3, r3
10043590:	015b      	lsls	r3, r3, #5
10043592:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10043594:	2380      	movs	r3, #128	@ 0x80
10043596:	009a      	lsls	r2, r3, #2
10043598:	2390      	movs	r3, #144	@ 0x90
1004359a:	05db      	lsls	r3, r3, #23
1004359c:	0011      	movs	r1, r2
1004359e:	0018      	movs	r0, r3
100435a0:	f003 fc40 	bl	10046e24 <HAL_GPIO_ReadPin>
100435a4:	0003      	movs	r3, r0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
100435a6:	b25b      	sxtb	r3, r3
100435a8:	011b      	lsls	r3, r3, #4
100435aa:	b25b      	sxtb	r3, r3
100435ac:	4323      	orrs	r3, r4
100435ae:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
100435b0:	4b19      	ldr	r3, [pc, #100]	@ (10043618 <GPIO_ReadButtons+0xa0>)
100435b2:	2110      	movs	r1, #16
100435b4:	0018      	movs	r0, r3
100435b6:	f003 fc35 	bl	10046e24 <HAL_GPIO_ReadPin>
100435ba:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
100435bc:	b25b      	sxtb	r3, r3
100435be:	00db      	lsls	r3, r3, #3
100435c0:	b25b      	sxtb	r3, r3
100435c2:	4323      	orrs	r3, r4
100435c4:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
100435c6:	2390      	movs	r3, #144	@ 0x90
100435c8:	05db      	lsls	r3, r3, #23
100435ca:	2108      	movs	r1, #8
100435cc:	0018      	movs	r0, r3
100435ce:	f003 fc29 	bl	10046e24 <HAL_GPIO_ReadPin>
100435d2:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
100435d4:	b25b      	sxtb	r3, r3
100435d6:	009b      	lsls	r3, r3, #2
100435d8:	b25b      	sxtb	r3, r3
100435da:	4323      	orrs	r3, r4
100435dc:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
100435de:	2390      	movs	r3, #144	@ 0x90
100435e0:	05db      	lsls	r3, r3, #23
100435e2:	2104      	movs	r1, #4
100435e4:	0018      	movs	r0, r3
100435e6:	f003 fc1d 	bl	10046e24 <HAL_GPIO_ReadPin>
100435ea:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
100435ec:	b25b      	sxtb	r3, r3
100435ee:	18db      	adds	r3, r3, r3
100435f0:	b25b      	sxtb	r3, r3
100435f2:	4323      	orrs	r3, r4
100435f4:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_1) << 0));
100435f6:	2380      	movs	r3, #128	@ 0x80
100435f8:	005a      	lsls	r2, r3, #1
100435fa:	2390      	movs	r3, #144	@ 0x90
100435fc:	05db      	lsls	r3, r3, #23
100435fe:	0011      	movs	r1, r2
10043600:	0018      	movs	r0, r3
10043602:	f003 fc0f 	bl	10046e24 <HAL_GPIO_ReadPin>
10043606:	0003      	movs	r3, r0
10043608:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
1004360a:	4323      	orrs	r3, r4
1004360c:	b25b      	sxtb	r3, r3
1004360e:	b2db      	uxtb	r3, r3
}
10043610:	0018      	movs	r0, r3
10043612:	46bd      	mov	sp, r7
10043614:	bdb0      	pop	{r4, r5, r7, pc}
10043616:	46c0      	nop			@ (mov r8, r8)
10043618:	48100000 	.word	0x48100000

1004361c <I2CUARTtoI2C>:
 * @brief: if control is with USART, swaps control from the USART to I2C
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoI2C(uint8_t delay){
1004361c:	b590      	push	{r4, r7, lr}
1004361e:	b085      	sub	sp, #20
10043620:	af00      	add	r7, sp, #0
10043622:	0002      	movs	r2, r0
10043624:	1dfb      	adds	r3, r7, #7
10043626:	701a      	strb	r2, [r3, #0]
	if(PORTAPIN1.Alternate != GPIO_AF0_I2C1){
10043628:	4b24      	ldr	r3, [pc, #144]	@ (100436bc <I2CUARTtoI2C+0xa0>)
1004362a:	691b      	ldr	r3, [r3, #16]
1004362c:	2b00      	cmp	r3, #0
1004362e:	d040      	beq.n	100436b2 <I2CUARTtoI2C+0x96>
		 hi2c1.Lock = HAL_UNLOCKED;
10043630:	4b23      	ldr	r3, [pc, #140]	@ (100436c0 <I2CUARTtoI2C+0xa4>)
10043632:	2240      	movs	r2, #64	@ 0x40
10043634:	2100      	movs	r1, #0
10043636:	5499      	strb	r1, [r3, r2]
		 hi2c1.State = HAL_I2C_STATE_READY;
10043638:	4b21      	ldr	r3, [pc, #132]	@ (100436c0 <I2CUARTtoI2C+0xa4>)
1004363a:	2241      	movs	r2, #65	@ 0x41
1004363c:	2120      	movs	r1, #32
1004363e:	5499      	strb	r1, [r3, r2]
		husart1.Instance->CR1 &= ~0x00000008;//disable the USART Transmit
10043640:	4b20      	ldr	r3, [pc, #128]	@ (100436c4 <I2CUARTtoI2C+0xa8>)
10043642:	681b      	ldr	r3, [r3, #0]
10043644:	681a      	ldr	r2, [r3, #0]
10043646:	4b1f      	ldr	r3, [pc, #124]	@ (100436c4 <I2CUARTtoI2C+0xa8>)
10043648:	681b      	ldr	r3, [r3, #0]
1004364a:	2108      	movs	r1, #8
1004364c:	438a      	bics	r2, r1
1004364e:	601a      	str	r2, [r3, #0]
		BSP_LED_Off(LED_BLUE);
10043650:	2000      	movs	r0, #0
10043652:	f002 fdf9 	bl	10046248 <BSP_LED_Off>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
10043656:	2390      	movs	r3, #144	@ 0x90
10043658:	05db      	lsls	r3, r3, #23
1004365a:	2102      	movs	r1, #2
1004365c:	0018      	movs	r0, r3
1004365e:	f003 fafe 	bl	10046c5e <HAL_GPIO_DeInit>

		PORTAPIN1.Mode = GPIO_MODE_AF_OD;
10043662:	4b16      	ldr	r3, [pc, #88]	@ (100436bc <I2CUARTtoI2C+0xa0>)
10043664:	2212      	movs	r2, #18
10043666:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF0_I2C1;
10043668:	4b14      	ldr	r3, [pc, #80]	@ (100436bc <I2CUARTtoI2C+0xa0>)
1004366a:	2200      	movs	r2, #0
1004366c:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
1004366e:	4a13      	ldr	r2, [pc, #76]	@ (100436bc <I2CUARTtoI2C+0xa0>)
10043670:	2390      	movs	r3, #144	@ 0x90
10043672:	05db      	lsls	r3, r3, #23
10043674:	0011      	movs	r1, r2
10043676:	0018      	movs	r0, r3
10043678:	f003 f94c 	bl	10046914 <HAL_GPIO_Init>

		HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
1004367c:	2101      	movs	r1, #1
1004367e:	2000      	movs	r0, #0
10043680:	f005 fc18 	bl	10048eb4 <HAL_PWREx_DisableGPIOPullUp>

		HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
10043684:	2101      	movs	r1, #1
10043686:	2000      	movs	r0, #0
10043688:	f005 fc42 	bl	10048f10 <HAL_PWREx_DisableGPIOPullDown>
		if(delay){
1004368c:	1dfb      	adds	r3, r7, #7
1004368e:	781b      	ldrb	r3, [r3, #0]
10043690:	2b00      	cmp	r3, #0
10043692:	d00c      	beq.n	100436ae <I2CUARTtoI2C+0x92>
			uint32_t start = TIMERS_GetMilliSeconds();
10043694:	f001 fcd4 	bl	10045040 <TIMERS_GetMilliSeconds>
10043698:	0003      	movs	r3, r0
1004369a:	60fb      	str	r3, [r7, #12]
			while(start+20 > TIMERS_GetMilliSeconds());
1004369c:	46c0      	nop			@ (mov r8, r8)
1004369e:	68fb      	ldr	r3, [r7, #12]
100436a0:	3314      	adds	r3, #20
100436a2:	001c      	movs	r4, r3
100436a4:	f001 fccc 	bl	10045040 <TIMERS_GetMilliSeconds>
100436a8:	0003      	movs	r3, r0
100436aa:	429c      	cmp	r4, r3
100436ac:	d8f7      	bhi.n	1004369e <I2CUARTtoI2C+0x82>
		}

		I2C_Flushbuffer();
100436ae:	f000 fa79 	bl	10043ba4 <I2C_Flushbuffer>
	}
}
100436b2:	46c0      	nop			@ (mov r8, r8)
100436b4:	46bd      	mov	sp, r7
100436b6:	b005      	add	sp, #20
100436b8:	bd90      	pop	{r4, r7, pc}
100436ba:	46c0      	nop			@ (mov r8, r8)
100436bc:	20002610 	.word	0x20002610
100436c0:	20002624 	.word	0x20002624
100436c4:	2000267c 	.word	0x2000267c

100436c8 <I2C_Post>:

//----------------------------------------Private functions--------------------------------------
#ifdef I2CTESTHARNESS
void fakeposter(Event_t event);
#endif
HAL_StatusTypeDef I2C_Post(MemAdd_t* post){
100436c8:	b590      	push	{r4, r7, lr}
100436ca:	b085      	sub	sp, #20
100436cc:	af02      	add	r7, sp, #8
100436ce:	6078      	str	r0, [r7, #4]
	if(post->posterindex == 0){
100436d0:	687b      	ldr	r3, [r7, #4]
100436d2:	78db      	ldrb	r3, [r3, #3]
100436d4:	2b00      	cmp	r3, #0
100436d6:	d112      	bne.n	100436fe <I2C_Post+0x36>
		return HAL_I2C_Mem_Write_IT(&hi2c1,
									post->targetadr<<1,
100436d8:	687b      	ldr	r3, [r7, #4]
100436da:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
100436dc:	18db      	adds	r3, r3, r3
100436de:	b299      	uxth	r1, r3
									post->registeradr,
100436e0:	687b      	ldr	r3, [r7, #4]
100436e2:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
100436e4:	001c      	movs	r4, r3
100436e6:	687b      	ldr	r3, [r7, #4]
100436e8:	3302      	adds	r3, #2
100436ea:	4810      	ldr	r0, [pc, #64]	@ (1004372c <I2C_Post+0x64>)
100436ec:	2201      	movs	r2, #1
100436ee:	9201      	str	r2, [sp, #4]
100436f0:	9300      	str	r3, [sp, #0]
100436f2:	2301      	movs	r3, #1
100436f4:	0022      	movs	r2, r4
100436f6:	f003 fcbf 	bl	10047078 <HAL_I2C_Mem_Write_IT>
100436fa:	0003      	movs	r3, r0
100436fc:	e011      	b.n	10043722 <I2C_Post+0x5a>
									I2C_MEMADD_SIZE_8BIT,
									&(post->data),
									1);
	} else {
		return HAL_I2C_Mem_Read_IT(&hi2c1,
								   post->targetadr<<1,
100436fe:	687b      	ldr	r3, [r7, #4]
10043700:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
10043702:	18db      	adds	r3, r3, r3
10043704:	b299      	uxth	r1, r3
								   post->registeradr,
10043706:	687b      	ldr	r3, [r7, #4]
10043708:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
1004370a:	001c      	movs	r4, r3
1004370c:	687b      	ldr	r3, [r7, #4]
1004370e:	3302      	adds	r3, #2
10043710:	4806      	ldr	r0, [pc, #24]	@ (1004372c <I2C_Post+0x64>)
10043712:	2201      	movs	r2, #1
10043714:	9201      	str	r2, [sp, #4]
10043716:	9300      	str	r3, [sp, #0]
10043718:	2301      	movs	r3, #1
1004371a:	0022      	movs	r2, r4
1004371c:	f003 fd4e 	bl	100471bc <HAL_I2C_Mem_Read_IT>
10043720:	0003      	movs	r3, r0
								   I2C_MEMADD_SIZE_8BIT,
								   &(post->data),
								   1);

	}
}
10043722:	0018      	movs	r0, r3
10043724:	46bd      	mov	sp, r7
10043726:	b003      	add	sp, #12
10043728:	bd90      	pop	{r4, r7, pc}
1004372a:	46c0      	nop			@ (mov r8, r8)
1004372c:	20002624 	.word	0x20002624

10043730 <I2C_Enqueue>:

HAL_StatusTypeDef I2C_Enqueue(MemAdd_t Post){
10043730:	b590      	push	{r4, r7, lr}
10043732:	b085      	sub	sp, #20
10043734:	af00      	add	r7, sp, #0
10043736:	1d3b      	adds	r3, r7, #4
10043738:	6018      	str	r0, [r3, #0]
	if(!initialized){return HAL_ERROR;}
1004373a:	4b49      	ldr	r3, [pc, #292]	@ (10043860 <I2C_Enqueue+0x130>)
1004373c:	781b      	ldrb	r3, [r3, #0]
1004373e:	2b00      	cmp	r3, #0
10043740:	d101      	bne.n	10043746 <I2C_Enqueue+0x16>
10043742:	2301      	movs	r3, #1
10043744:	e087      	b.n	10043856 <I2C_Enqueue+0x126>
		HAL_StatusTypeDef status = HAL_OK;
10043746:	230f      	movs	r3, #15
10043748:	18fb      	adds	r3, r7, r3
1004374a:	2200      	movs	r2, #0
1004374c:	701a      	strb	r2, [r3, #0]

		uint32_t start = TIMERS_GetMilliSeconds();
1004374e:	f001 fc77 	bl	10045040 <TIMERS_GetMilliSeconds>
10043752:	0003      	movs	r3, r0
10043754:	60bb      	str	r3, [r7, #8]
		while((MemBuff.tail == ((MemBuff.head+1)%CIRCBUFFERSIZE)) && (((start + I2CBUFFERTIMEOUT) > TIMERS_GetMilliSeconds())));
10043756:	46c0      	nop			@ (mov r8, r8)
10043758:	4b42      	ldr	r3, [pc, #264]	@ (10043864 <I2C_Enqueue+0x134>)
1004375a:	4a43      	ldr	r2, [pc, #268]	@ (10043868 <I2C_Enqueue+0x138>)
1004375c:	5a9b      	ldrh	r3, [r3, r2]
1004375e:	001c      	movs	r4, r3
10043760:	4a40      	ldr	r2, [pc, #256]	@ (10043864 <I2C_Enqueue+0x134>)
10043762:	23c0      	movs	r3, #192	@ 0xc0
10043764:	015b      	lsls	r3, r3, #5
10043766:	5ad3      	ldrh	r3, [r2, r3]
10043768:	3301      	adds	r3, #1
1004376a:	22c0      	movs	r2, #192	@ 0xc0
1004376c:	00d1      	lsls	r1, r2, #3
1004376e:	0018      	movs	r0, r3
10043770:	f7fc fed6 	bl	10040520 <__aeabi_idivmod>
10043774:	000b      	movs	r3, r1
10043776:	429c      	cmp	r4, r3
10043778:	d108      	bne.n	1004378c <I2C_Enqueue+0x5c>
1004377a:	68bb      	ldr	r3, [r7, #8]
1004377c:	22fa      	movs	r2, #250	@ 0xfa
1004377e:	0092      	lsls	r2, r2, #2
10043780:	189c      	adds	r4, r3, r2
10043782:	f001 fc5d 	bl	10045040 <TIMERS_GetMilliSeconds>
10043786:	0003      	movs	r3, r0
10043788:	429c      	cmp	r4, r3
1004378a:	d8e5      	bhi.n	10043758 <I2C_Enqueue+0x28>
		if(MemBuff.tail == (MemBuff.head+1)%CIRCBUFFERSIZE){
1004378c:	4b35      	ldr	r3, [pc, #212]	@ (10043864 <I2C_Enqueue+0x134>)
1004378e:	4a36      	ldr	r2, [pc, #216]	@ (10043868 <I2C_Enqueue+0x138>)
10043790:	5a9b      	ldrh	r3, [r3, r2]
10043792:	001c      	movs	r4, r3
10043794:	4a33      	ldr	r2, [pc, #204]	@ (10043864 <I2C_Enqueue+0x134>)
10043796:	23c0      	movs	r3, #192	@ 0xc0
10043798:	015b      	lsls	r3, r3, #5
1004379a:	5ad3      	ldrh	r3, [r2, r3]
1004379c:	3301      	adds	r3, #1
1004379e:	22c0      	movs	r2, #192	@ 0xc0
100437a0:	00d1      	lsls	r1, r2, #3
100437a2:	0018      	movs	r0, r3
100437a4:	f7fc febc 	bl	10040520 <__aeabi_idivmod>
100437a8:	000b      	movs	r3, r1
100437aa:	429c      	cmp	r4, r3
100437ac:	d104      	bne.n	100437b8 <I2C_Enqueue+0x88>
			BSP_LED_On(LED_RED);//indicate a fatal buffer overflow
100437ae:	2002      	movs	r0, #2
100437b0:	f002 fd2c 	bl	1004620c <BSP_LED_On>
			return HAL_ERROR;
100437b4:	2301      	movs	r3, #1
100437b6:	e04e      	b.n	10043856 <I2C_Enqueue+0x126>
		}
		BSP_LED_Off(LED_RED);
100437b8:	2002      	movs	r0, #2
100437ba:	f002 fd45 	bl	10046248 <BSP_LED_Off>
		//place the transmit request into the buffer
		//The I2C-UARTmanager will disable the module but leave the state as ready, the data will still be loaded into the register
		//The module will not transmit until arbitration is complete


		MemBuff.data[MemBuff.head] = Post;
100437be:	4a29      	ldr	r2, [pc, #164]	@ (10043864 <I2C_Enqueue+0x134>)
100437c0:	23c0      	movs	r3, #192	@ 0xc0
100437c2:	015b      	lsls	r3, r3, #5
100437c4:	5ad3      	ldrh	r3, [r2, r3]
100437c6:	4a27      	ldr	r2, [pc, #156]	@ (10043864 <I2C_Enqueue+0x134>)
100437c8:	0099      	lsls	r1, r3, #2
100437ca:	1d3b      	adds	r3, r7, #4
100437cc:	681b      	ldr	r3, [r3, #0]
100437ce:	508b      	str	r3, [r1, r2]
		MemBuff.head++;
100437d0:	4a24      	ldr	r2, [pc, #144]	@ (10043864 <I2C_Enqueue+0x134>)
100437d2:	23c0      	movs	r3, #192	@ 0xc0
100437d4:	015b      	lsls	r3, r3, #5
100437d6:	5ad3      	ldrh	r3, [r2, r3]
100437d8:	3301      	adds	r3, #1
100437da:	b299      	uxth	r1, r3
100437dc:	4a21      	ldr	r2, [pc, #132]	@ (10043864 <I2C_Enqueue+0x134>)
100437de:	23c0      	movs	r3, #192	@ 0xc0
100437e0:	015b      	lsls	r3, r3, #5
100437e2:	52d1      	strh	r1, [r2, r3]
		MemBuff.head %= CIRCBUFFERSIZE;
100437e4:	4a1f      	ldr	r2, [pc, #124]	@ (10043864 <I2C_Enqueue+0x134>)
100437e6:	23c0      	movs	r3, #192	@ 0xc0
100437e8:	015b      	lsls	r3, r3, #5
100437ea:	5ad3      	ldrh	r3, [r2, r3]
100437ec:	22c0      	movs	r2, #192	@ 0xc0
100437ee:	00d1      	lsls	r1, r2, #3
100437f0:	0018      	movs	r0, r3
100437f2:	f7fc fdab 	bl	1004034c <__aeabi_uidivmod>
100437f6:	000b      	movs	r3, r1
100437f8:	b299      	uxth	r1, r3
100437fa:	4a1a      	ldr	r2, [pc, #104]	@ (10043864 <I2C_Enqueue+0x134>)
100437fc:	23c0      	movs	r3, #192	@ 0xc0
100437fe:	015b      	lsls	r3, r3, #5
10043800:	52d1      	strh	r1, [r2, r3]
		if((MemBuff.tail+1)%CIRCBUFFERSIZE == MemBuff.head && hi2c1.State == HAL_I2C_STATE_READY){
10043802:	4b18      	ldr	r3, [pc, #96]	@ (10043864 <I2C_Enqueue+0x134>)
10043804:	4a18      	ldr	r2, [pc, #96]	@ (10043868 <I2C_Enqueue+0x138>)
10043806:	5a9b      	ldrh	r3, [r3, r2]
10043808:	3301      	adds	r3, #1
1004380a:	22c0      	movs	r2, #192	@ 0xc0
1004380c:	00d1      	lsls	r1, r2, #3
1004380e:	0018      	movs	r0, r3
10043810:	f7fc fe86 	bl	10040520 <__aeabi_idivmod>
10043814:	000b      	movs	r3, r1
10043816:	0019      	movs	r1, r3
10043818:	4a12      	ldr	r2, [pc, #72]	@ (10043864 <I2C_Enqueue+0x134>)
1004381a:	23c0      	movs	r3, #192	@ 0xc0
1004381c:	015b      	lsls	r3, r3, #5
1004381e:	5ad3      	ldrh	r3, [r2, r3]
10043820:	4299      	cmp	r1, r3
10043822:	d115      	bne.n	10043850 <I2C_Enqueue+0x120>
10043824:	4b11      	ldr	r3, [pc, #68]	@ (1004386c <I2C_Enqueue+0x13c>)
10043826:	2241      	movs	r2, #65	@ 0x41
10043828:	5c9b      	ldrb	r3, [r3, r2]
1004382a:	b2db      	uxtb	r3, r3
1004382c:	2b20      	cmp	r3, #32
1004382e:	d10f      	bne.n	10043850 <I2C_Enqueue+0x120>
			I2CUARTtoI2C(1);
10043830:	2001      	movs	r0, #1
10043832:	f7ff fef3 	bl	1004361c <I2CUARTtoI2C>
			status = I2C_Post(MemBuff.data+MemBuff.tail);
10043836:	4b0b      	ldr	r3, [pc, #44]	@ (10043864 <I2C_Enqueue+0x134>)
10043838:	4a0b      	ldr	r2, [pc, #44]	@ (10043868 <I2C_Enqueue+0x138>)
1004383a:	5a9b      	ldrh	r3, [r3, r2]
1004383c:	009a      	lsls	r2, r3, #2
1004383e:	4b09      	ldr	r3, [pc, #36]	@ (10043864 <I2C_Enqueue+0x134>)
10043840:	18d3      	adds	r3, r2, r3
10043842:	220f      	movs	r2, #15
10043844:	18bc      	adds	r4, r7, r2
10043846:	0018      	movs	r0, r3
10043848:	f7ff ff3e 	bl	100436c8 <I2C_Post>
1004384c:	0003      	movs	r3, r0
1004384e:	7023      	strb	r3, [r4, #0]

		}
		return status;
10043850:	230f      	movs	r3, #15
10043852:	18fb      	adds	r3, r7, r3
10043854:	781b      	ldrb	r3, [r3, #0]
}
10043856:	0018      	movs	r0, r3
10043858:	46bd      	mov	sp, r7
1004385a:	b005      	add	sp, #20
1004385c:	bd90      	pop	{r4, r7, pc}
1004385e:	46c0      	nop			@ (mov r8, r8)
10043860:	20001bd8 	.word	0x20001bd8
10043864:	200003d4 	.word	0x200003d4
10043868:	00001802 	.word	0x00001802
1004386c:	20002624 	.word	0x20002624

10043870 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
10043870:	b580      	push	{r7, lr}
10043872:	b082      	sub	sp, #8
10043874:	af00      	add	r7, sp, #0
10043876:	6078      	str	r0, [r7, #4]
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
10043878:	4b16      	ldr	r3, [pc, #88]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
1004387a:	4a17      	ldr	r2, [pc, #92]	@ (100438d8 <HAL_I2C_MemTxCpltCallback+0x68>)
1004387c:	5a9b      	ldrh	r3, [r3, r2]
1004387e:	3301      	adds	r3, #1
10043880:	b299      	uxth	r1, r3
10043882:	4b14      	ldr	r3, [pc, #80]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
10043884:	4a14      	ldr	r2, [pc, #80]	@ (100438d8 <HAL_I2C_MemTxCpltCallback+0x68>)
10043886:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
10043888:	4b12      	ldr	r3, [pc, #72]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
1004388a:	4a13      	ldr	r2, [pc, #76]	@ (100438d8 <HAL_I2C_MemTxCpltCallback+0x68>)
1004388c:	5a9b      	ldrh	r3, [r3, r2]
1004388e:	22c0      	movs	r2, #192	@ 0xc0
10043890:	00d1      	lsls	r1, r2, #3
10043892:	0018      	movs	r0, r3
10043894:	f7fc fd5a 	bl	1004034c <__aeabi_uidivmod>
10043898:	000b      	movs	r3, r1
1004389a:	b299      	uxth	r1, r3
1004389c:	4b0d      	ldr	r3, [pc, #52]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
1004389e:	4a0e      	ldr	r2, [pc, #56]	@ (100438d8 <HAL_I2C_MemTxCpltCallback+0x68>)
100438a0:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
100438a2:	4b0c      	ldr	r3, [pc, #48]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
100438a4:	4a0c      	ldr	r2, [pc, #48]	@ (100438d8 <HAL_I2C_MemTxCpltCallback+0x68>)
100438a6:	5a9a      	ldrh	r2, [r3, r2]
100438a8:	490a      	ldr	r1, [pc, #40]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
100438aa:	23c0      	movs	r3, #192	@ 0xc0
100438ac:	015b      	lsls	r3, r3, #5
100438ae:	5acb      	ldrh	r3, [r1, r3]
100438b0:	429a      	cmp	r2, r3
100438b2:	d00b      	beq.n	100438cc <HAL_I2C_MemTxCpltCallback+0x5c>
		I2CUARTtoI2C(1);
100438b4:	2001      	movs	r0, #1
100438b6:	f7ff feb1 	bl	1004361c <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
100438ba:	4b06      	ldr	r3, [pc, #24]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
100438bc:	4a06      	ldr	r2, [pc, #24]	@ (100438d8 <HAL_I2C_MemTxCpltCallback+0x68>)
100438be:	5a9b      	ldrh	r3, [r3, r2]
100438c0:	009a      	lsls	r2, r3, #2
100438c2:	4b04      	ldr	r3, [pc, #16]	@ (100438d4 <HAL_I2C_MemTxCpltCallback+0x64>)
100438c4:	18d3      	adds	r3, r2, r3
100438c6:	0018      	movs	r0, r3
100438c8:	f7ff fefe 	bl	100436c8 <I2C_Post>

	}
}
100438cc:	46c0      	nop			@ (mov r8, r8)
100438ce:	46bd      	mov	sp, r7
100438d0:	b002      	add	sp, #8
100438d2:	bd80      	pop	{r7, pc}
100438d4:	200003d4 	.word	0x200003d4
100438d8:	00001802 	.word	0x00001802

100438dc <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
100438dc:	b580      	push	{r7, lr}
100438de:	b084      	sub	sp, #16
100438e0:	af00      	add	r7, sp, #0
100438e2:	6078      	str	r0, [r7, #4]

	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, MemBuff.data[MemBuff.tail].registeradr << 8 | MemBuff.data[MemBuff.tail].data};
100438e4:	200c      	movs	r0, #12
100438e6:	183b      	adds	r3, r7, r0
100438e8:	2205      	movs	r2, #5
100438ea:	701a      	strb	r2, [r3, #0]
100438ec:	4b2a      	ldr	r3, [pc, #168]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
100438ee:	4a2b      	ldr	r2, [pc, #172]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
100438f0:	5a9b      	ldrh	r3, [r3, r2]
100438f2:	4a29      	ldr	r2, [pc, #164]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
100438f4:	009b      	lsls	r3, r3, #2
100438f6:	18d3      	adds	r3, r2, r3
100438f8:	3301      	adds	r3, #1
100438fa:	781b      	ldrb	r3, [r3, #0]
100438fc:	b21b      	sxth	r3, r3
100438fe:	021b      	lsls	r3, r3, #8
10043900:	b21a      	sxth	r2, r3
10043902:	4b25      	ldr	r3, [pc, #148]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043904:	4925      	ldr	r1, [pc, #148]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
10043906:	5a5b      	ldrh	r3, [r3, r1]
10043908:	4923      	ldr	r1, [pc, #140]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004390a:	009b      	lsls	r3, r3, #2
1004390c:	18cb      	adds	r3, r1, r3
1004390e:	3302      	adds	r3, #2
10043910:	781b      	ldrb	r3, [r3, #0]
10043912:	b21b      	sxth	r3, r3
10043914:	4313      	orrs	r3, r2
10043916:	b21b      	sxth	r3, r3
10043918:	b29a      	uxth	r2, r3
1004391a:	183b      	adds	r3, r7, r0
1004391c:	805a      	strh	r2, [r3, #2]
	//post the event to the function given by the poster index

#ifdef I2CTESTHARNESS
	fakeposter(ret);
#else
	PosterList[MemBuff.data[MemBuff.tail].posterindex-1](ret);
1004391e:	4b1e      	ldr	r3, [pc, #120]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043920:	4a1e      	ldr	r2, [pc, #120]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
10043922:	5a9b      	ldrh	r3, [r3, r2]
10043924:	4a1c      	ldr	r2, [pc, #112]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043926:	009b      	lsls	r3, r3, #2
10043928:	18d3      	adds	r3, r2, r3
1004392a:	3303      	adds	r3, #3
1004392c:	781b      	ldrb	r3, [r3, #0]
1004392e:	1e5a      	subs	r2, r3, #1
10043930:	4b1b      	ldr	r3, [pc, #108]	@ (100439a0 <HAL_I2C_MemRxCpltCallback+0xc4>)
10043932:	0092      	lsls	r2, r2, #2
10043934:	58d2      	ldr	r2, [r2, r3]
10043936:	183b      	adds	r3, r7, r0
10043938:	6818      	ldr	r0, [r3, #0]
1004393a:	4790      	blx	r2
#endif
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
1004393c:	4b16      	ldr	r3, [pc, #88]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004393e:	4a17      	ldr	r2, [pc, #92]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
10043940:	5a9b      	ldrh	r3, [r3, r2]
10043942:	3301      	adds	r3, #1
10043944:	b299      	uxth	r1, r3
10043946:	4b14      	ldr	r3, [pc, #80]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043948:	4a14      	ldr	r2, [pc, #80]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
1004394a:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
1004394c:	4b12      	ldr	r3, [pc, #72]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004394e:	4a13      	ldr	r2, [pc, #76]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
10043950:	5a9b      	ldrh	r3, [r3, r2]
10043952:	22c0      	movs	r2, #192	@ 0xc0
10043954:	00d1      	lsls	r1, r2, #3
10043956:	0018      	movs	r0, r3
10043958:	f7fc fcf8 	bl	1004034c <__aeabi_uidivmod>
1004395c:	000b      	movs	r3, r1
1004395e:	b299      	uxth	r1, r3
10043960:	4b0d      	ldr	r3, [pc, #52]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043962:	4a0e      	ldr	r2, [pc, #56]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
10043964:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
10043966:	4b0c      	ldr	r3, [pc, #48]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043968:	4a0c      	ldr	r2, [pc, #48]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
1004396a:	5a9a      	ldrh	r2, [r3, r2]
1004396c:	490a      	ldr	r1, [pc, #40]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004396e:	23c0      	movs	r3, #192	@ 0xc0
10043970:	015b      	lsls	r3, r3, #5
10043972:	5acb      	ldrh	r3, [r1, r3]
10043974:	429a      	cmp	r2, r3
10043976:	d00b      	beq.n	10043990 <HAL_I2C_MemRxCpltCallback+0xb4>
		I2CUARTtoI2C(1);
10043978:	2001      	movs	r0, #1
1004397a:	f7ff fe4f 	bl	1004361c <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
1004397e:	4b06      	ldr	r3, [pc, #24]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043980:	4a06      	ldr	r2, [pc, #24]	@ (1004399c <HAL_I2C_MemRxCpltCallback+0xc0>)
10043982:	5a9b      	ldrh	r3, [r3, r2]
10043984:	009a      	lsls	r2, r3, #2
10043986:	4b04      	ldr	r3, [pc, #16]	@ (10043998 <HAL_I2C_MemRxCpltCallback+0xbc>)
10043988:	18d3      	adds	r3, r2, r3
1004398a:	0018      	movs	r0, r3
1004398c:	f7ff fe9c 	bl	100436c8 <I2C_Post>

	}
}
10043990:	46c0      	nop			@ (mov r8, r8)
10043992:	46bd      	mov	sp, r7
10043994:	b004      	add	sp, #16
10043996:	bd80      	pop	{r7, pc}
10043998:	200003d4 	.word	0x200003d4
1004399c:	00001802 	.word	0x00001802
100439a0:	20002678 	.word	0x20002678

100439a4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
100439a4:	b590      	push	{r4, r7, lr}
100439a6:	b085      	sub	sp, #20
100439a8:	af00      	add	r7, sp, #0
100439aa:	6078      	str	r0, [r7, #4]
	if(hi2c->ErrorCode&HAL_I2C_ERROR_AF){//NACK Error
100439ac:	687b      	ldr	r3, [r7, #4]
100439ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100439b0:	2204      	movs	r2, #4
100439b2:	4013      	ands	r3, r2
100439b4:	d021      	beq.n	100439fa <HAL_I2C_ErrorCallback+0x56>
		if(MemBuff.tail != MemBuff.head){
100439b6:	4b13      	ldr	r3, [pc, #76]	@ (10043a04 <HAL_I2C_ErrorCallback+0x60>)
100439b8:	4a13      	ldr	r2, [pc, #76]	@ (10043a08 <HAL_I2C_ErrorCallback+0x64>)
100439ba:	5a9a      	ldrh	r2, [r3, r2]
100439bc:	4911      	ldr	r1, [pc, #68]	@ (10043a04 <HAL_I2C_ErrorCallback+0x60>)
100439be:	23c0      	movs	r3, #192	@ 0xc0
100439c0:	015b      	lsls	r3, r3, #5
100439c2:	5acb      	ldrh	r3, [r1, r3]
100439c4:	429a      	cmp	r2, r3
100439c6:	d018      	beq.n	100439fa <HAL_I2C_ErrorCallback+0x56>
			uint32_t start = TIMERS_GetMilliSeconds();
100439c8:	f001 fb3a 	bl	10045040 <TIMERS_GetMilliSeconds>
100439cc:	0003      	movs	r3, r0
100439ce:	60fb      	str	r3, [r7, #12]
			while(start+10 > TIMERS_GetMilliSeconds());
100439d0:	46c0      	nop			@ (mov r8, r8)
100439d2:	68fb      	ldr	r3, [r7, #12]
100439d4:	330a      	adds	r3, #10
100439d6:	001c      	movs	r4, r3
100439d8:	f001 fb32 	bl	10045040 <TIMERS_GetMilliSeconds>
100439dc:	0003      	movs	r3, r0
100439de:	429c      	cmp	r4, r3
100439e0:	d8f7      	bhi.n	100439d2 <HAL_I2C_ErrorCallback+0x2e>
			I2CUARTtoI2C(1);
100439e2:	2001      	movs	r0, #1
100439e4:	f7ff fe1a 	bl	1004361c <I2CUARTtoI2C>
			I2C_Post(MemBuff.data+MemBuff.tail);//Repost the same data packet that got NACKed, without moving the tail forward
100439e8:	4b06      	ldr	r3, [pc, #24]	@ (10043a04 <HAL_I2C_ErrorCallback+0x60>)
100439ea:	4a07      	ldr	r2, [pc, #28]	@ (10043a08 <HAL_I2C_ErrorCallback+0x64>)
100439ec:	5a9b      	ldrh	r3, [r3, r2]
100439ee:	009a      	lsls	r2, r3, #2
100439f0:	4b04      	ldr	r3, [pc, #16]	@ (10043a04 <HAL_I2C_ErrorCallback+0x60>)
100439f2:	18d3      	adds	r3, r2, r3
100439f4:	0018      	movs	r0, r3
100439f6:	f7ff fe67 	bl	100436c8 <I2C_Post>

		}
	}
}
100439fa:	46c0      	nop			@ (mov r8, r8)
100439fc:	46bd      	mov	sp, r7
100439fe:	b005      	add	sp, #20
10043a00:	bd90      	pop	{r4, r7, pc}
10043a02:	46c0      	nop			@ (mov r8, r8)
10043a04:	200003d4 	.word	0x200003d4
10043a08:	00001802 	.word	0x00001802

10043a0c <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
10043a0c:	b580      	push	{r7, lr}
10043a0e:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10043a10:	4b09      	ldr	r3, [pc, #36]	@ (10043a38 <I2C1_IRQHandler+0x2c>)
10043a12:	681b      	ldr	r3, [r3, #0]
10043a14:	699a      	ldr	r2, [r3, #24]
10043a16:	23e0      	movs	r3, #224	@ 0xe0
10043a18:	00db      	lsls	r3, r3, #3
10043a1a:	4013      	ands	r3, r2
10043a1c:	d004      	beq.n	10043a28 <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);//error handler
10043a1e:	4b06      	ldr	r3, [pc, #24]	@ (10043a38 <I2C1_IRQHandler+0x2c>)
10043a20:	0018      	movs	r0, r3
10043a22:	f003 fc83 	bl	1004732c <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
	}
}
10043a26:	e003      	b.n	10043a30 <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
10043a28:	4b03      	ldr	r3, [pc, #12]	@ (10043a38 <I2C1_IRQHandler+0x2c>)
10043a2a:	0018      	movs	r0, r3
10043a2c:	f003 fc64 	bl	100472f8 <HAL_I2C_EV_IRQHandler>
}
10043a30:	46c0      	nop			@ (mov r8, r8)
10043a32:	46bd      	mov	sp, r7
10043a34:	bd80      	pop	{r7, pc}
10043a36:	46c0      	nop			@ (mov r8, r8)
10043a38:	20002624 	.word	0x20002624

10043a3c <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
10043a3c:	b590      	push	{r4, r7, lr}
10043a3e:	b083      	sub	sp, #12
10043a40:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10043a42:	4b36      	ldr	r3, [pc, #216]	@ (10043b1c <I2C_Init+0xe0>)
10043a44:	781b      	ldrb	r3, [r3, #0]
10043a46:	2b00      	cmp	r3, #0
10043a48:	d001      	beq.n	10043a4e <I2C_Init+0x12>
10043a4a:	2301      	movs	r3, #1
10043a4c:	e062      	b.n	10043b14 <I2C_Init+0xd8>
	TIMERS_Init();
10043a4e:	f001 faab 	bl	10044fa8 <TIMERS_Init>
	hi2c1.Instance = I2C1;
10043a52:	4b33      	ldr	r3, [pc, #204]	@ (10043b20 <I2C_Init+0xe4>)
10043a54:	2282      	movs	r2, #130	@ 0x82
10043a56:	05d2      	lsls	r2, r2, #23
10043a58:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00305B5B;
10043a5a:	4b31      	ldr	r3, [pc, #196]	@ (10043b20 <I2C_Init+0xe4>)
10043a5c:	4a31      	ldr	r2, [pc, #196]	@ (10043b24 <I2C_Init+0xe8>)
10043a5e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
10043a60:	4b2f      	ldr	r3, [pc, #188]	@ (10043b20 <I2C_Init+0xe4>)
10043a62:	2200      	movs	r2, #0
10043a64:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
10043a66:	4b2e      	ldr	r3, [pc, #184]	@ (10043b20 <I2C_Init+0xe4>)
10043a68:	2201      	movs	r2, #1
10043a6a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
10043a6c:	4b2c      	ldr	r3, [pc, #176]	@ (10043b20 <I2C_Init+0xe4>)
10043a6e:	2200      	movs	r2, #0
10043a70:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
10043a72:	4b2b      	ldr	r3, [pc, #172]	@ (10043b20 <I2C_Init+0xe4>)
10043a74:	2200      	movs	r2, #0
10043a76:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
10043a78:	4b29      	ldr	r3, [pc, #164]	@ (10043b20 <I2C_Init+0xe4>)
10043a7a:	2200      	movs	r2, #0
10043a7c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10043a7e:	4b28      	ldr	r3, [pc, #160]	@ (10043b20 <I2C_Init+0xe4>)
10043a80:	2200      	movs	r2, #0
10043a82:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
10043a84:	4b26      	ldr	r3, [pc, #152]	@ (10043b20 <I2C_Init+0xe4>)
10043a86:	2200      	movs	r2, #0
10043a88:	621a      	str	r2, [r3, #32]
	hi2c1.State = HAL_I2C_STATE_RESET;
10043a8a:	4b25      	ldr	r3, [pc, #148]	@ (10043b20 <I2C_Init+0xe4>)
10043a8c:	2241      	movs	r2, #65	@ 0x41
10043a8e:	2100      	movs	r1, #0
10043a90:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef ret = HAL_I2C_Init(&hi2c1);
10043a92:	1dfc      	adds	r4, r7, #7
10043a94:	4b22      	ldr	r3, [pc, #136]	@ (10043b20 <I2C_Init+0xe4>)
10043a96:	0018      	movs	r0, r3
10043a98:	f003 fa48 	bl	10046f2c <HAL_I2C_Init>
10043a9c:	0003      	movs	r3, r0
10043a9e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10043aa0:	1dfb      	adds	r3, r7, #7
10043aa2:	781b      	ldrb	r3, [r3, #0]
10043aa4:	2b00      	cmp	r3, #0
10043aa6:	d001      	beq.n	10043aac <I2C_Init+0x70>
	{
		return INIT_ERROR;
10043aa8:	2300      	movs	r3, #0
10043aaa:	e033      	b.n	10043b14 <I2C_Init+0xd8>
	}
	// Configure Analog filter
	ret = HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
10043aac:	1dfc      	adds	r4, r7, #7
10043aae:	4b1c      	ldr	r3, [pc, #112]	@ (10043b20 <I2C_Init+0xe4>)
10043ab0:	2100      	movs	r1, #0
10043ab2:	0018      	movs	r0, r3
10043ab4:	f005 f90a 	bl	10048ccc <HAL_I2CEx_ConfigAnalogFilter>
10043ab8:	0003      	movs	r3, r0
10043aba:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10043abc:	1dfb      	adds	r3, r7, #7
10043abe:	781b      	ldrb	r3, [r3, #0]
10043ac0:	2b00      	cmp	r3, #0
10043ac2:	d001      	beq.n	10043ac8 <I2C_Init+0x8c>
	{
		return INIT_ERROR;
10043ac4:	2300      	movs	r3, #0
10043ac6:	e025      	b.n	10043b14 <I2C_Init+0xd8>
	}

	// Configure Digital filter
	ret = HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
10043ac8:	1dfc      	adds	r4, r7, #7
10043aca:	4b15      	ldr	r3, [pc, #84]	@ (10043b20 <I2C_Init+0xe4>)
10043acc:	2100      	movs	r1, #0
10043ace:	0018      	movs	r0, r3
10043ad0:	f005 f948 	bl	10048d64 <HAL_I2CEx_ConfigDigitalFilter>
10043ad4:	0003      	movs	r3, r0
10043ad6:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10043ad8:	1dfb      	adds	r3, r7, #7
10043ada:	781b      	ldrb	r3, [r3, #0]
10043adc:	2b00      	cmp	r3, #0
10043ade:	d001      	beq.n	10043ae4 <I2C_Init+0xa8>
	{
		return INIT_ERROR;
10043ae0:	2300      	movs	r3, #0
10043ae2:	e017      	b.n	10043b14 <I2C_Init+0xd8>
	}
	//set up circular buffers
	MemBuff.tail = 0;
10043ae4:	4b10      	ldr	r3, [pc, #64]	@ (10043b28 <I2C_Init+0xec>)
10043ae6:	4a11      	ldr	r2, [pc, #68]	@ (10043b2c <I2C_Init+0xf0>)
10043ae8:	2100      	movs	r1, #0
10043aea:	5299      	strh	r1, [r3, r2]
	MemBuff.head = 0;
10043aec:	4a0e      	ldr	r2, [pc, #56]	@ (10043b28 <I2C_Init+0xec>)
10043aee:	23c0      	movs	r3, #192	@ 0xc0
10043af0:	015b      	lsls	r3, r3, #5
10043af2:	2100      	movs	r1, #0
10043af4:	52d1      	strh	r1, [r2, r3]
	initialized = 1;
10043af6:	4b09      	ldr	r3, [pc, #36]	@ (10043b1c <I2C_Init+0xe0>)
10043af8:	2201      	movs	r2, #1
10043afa:	701a      	strb	r2, [r3, #0]
	I2CUARTtoI2C(1);
10043afc:	2001      	movs	r0, #1
10043afe:	f7ff fd8d 	bl	1004361c <I2CUARTtoI2C>
	//enables interrupts
	HAL_NVIC_SetPriority(I2C1_IRQn, 2, 0);
10043b02:	2200      	movs	r2, #0
10043b04:	2102      	movs	r1, #2
10043b06:	2003      	movs	r0, #3
10043b08:	f002 fd24 	bl	10046554 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
10043b0c:	2003      	movs	r0, #3
10043b0e:	f002 fd36 	bl	1004657e <HAL_NVIC_EnableIRQ>
	return INIT_OK;
10043b12:	2301      	movs	r3, #1
}
10043b14:	0018      	movs	r0, r3
10043b16:	46bd      	mov	sp, r7
10043b18:	b003      	add	sp, #12
10043b1a:	bd90      	pop	{r4, r7, pc}
10043b1c:	20001bd8 	.word	0x20001bd8
10043b20:	20002624 	.word	0x20002624
10043b24:	00305b5b 	.word	0x00305b5b
10043b28:	200003d4 	.word	0x200003d4
10043b2c:	00001802 	.word	0x00001802

10043b30 <I2C_Transmit>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to write to
 * 		   uint8_t data: to to be transmitted
 * @return: a flag if the data has been transmitted
 */
HAL_StatusTypeDef I2C_Transmit(uint8_t targetadr, uint8_t registeradr, uint8_t data){
10043b30:	b5b0      	push	{r4, r5, r7, lr}
10043b32:	b084      	sub	sp, #16
10043b34:	af00      	add	r7, sp, #0
10043b36:	0004      	movs	r4, r0
10043b38:	0008      	movs	r0, r1
10043b3a:	0011      	movs	r1, r2
10043b3c:	1dfb      	adds	r3, r7, #7
10043b3e:	1c22      	adds	r2, r4, #0
10043b40:	701a      	strb	r2, [r3, #0]
10043b42:	1dbb      	adds	r3, r7, #6
10043b44:	1c02      	adds	r2, r0, #0
10043b46:	701a      	strb	r2, [r3, #0]
10043b48:	1d7b      	adds	r3, r7, #5
10043b4a:	1c0a      	adds	r2, r1, #0
10043b4c:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10043b4e:	4b13      	ldr	r3, [pc, #76]	@ (10043b9c <I2C_Transmit+0x6c>)
10043b50:	781b      	ldrb	r3, [r3, #0]
10043b52:	2b00      	cmp	r3, #0
10043b54:	d101      	bne.n	10043b5a <I2C_Transmit+0x2a>
10043b56:	2301      	movs	r3, #1
10043b58:	e01c      	b.n	10043b94 <I2C_Transmit+0x64>
	HAL_StatusTypeDef status = HAL_OK;
10043b5a:	210f      	movs	r1, #15
10043b5c:	187b      	adds	r3, r7, r1
10043b5e:	2200      	movs	r2, #0
10043b60:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
10043b62:	4b0f      	ldr	r3, [pc, #60]	@ (10043ba0 <I2C_Transmit+0x70>)
10043b64:	1dfa      	adds	r2, r7, #7
10043b66:	7812      	ldrb	r2, [r2, #0]
10043b68:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
10043b6a:	4b0d      	ldr	r3, [pc, #52]	@ (10043ba0 <I2C_Transmit+0x70>)
10043b6c:	1dba      	adds	r2, r7, #6
10043b6e:	7812      	ldrb	r2, [r2, #0]
10043b70:	705a      	strb	r2, [r3, #1]
	Post.posterindex = 0;//null pointer, no function is posted to after the transmit is complete
10043b72:	4b0b      	ldr	r3, [pc, #44]	@ (10043ba0 <I2C_Transmit+0x70>)
10043b74:	2200      	movs	r2, #0
10043b76:	70da      	strb	r2, [r3, #3]
	Post.data = data;
10043b78:	4b09      	ldr	r3, [pc, #36]	@ (10043ba0 <I2C_Transmit+0x70>)
10043b7a:	1d7a      	adds	r2, r7, #5
10043b7c:	7812      	ldrb	r2, [r2, #0]
10043b7e:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
10043b80:	000d      	movs	r5, r1
10043b82:	187c      	adds	r4, r7, r1
10043b84:	4b06      	ldr	r3, [pc, #24]	@ (10043ba0 <I2C_Transmit+0x70>)
10043b86:	6818      	ldr	r0, [r3, #0]
10043b88:	f7ff fdd2 	bl	10043730 <I2C_Enqueue>
10043b8c:	0003      	movs	r3, r0
10043b8e:	7023      	strb	r3, [r4, #0]
	return status;
10043b90:	197b      	adds	r3, r7, r5
10043b92:	781b      	ldrb	r3, [r3, #0]
}
10043b94:	0018      	movs	r0, r3
10043b96:	46bd      	mov	sp, r7
10043b98:	b004      	add	sp, #16
10043b9a:	bdb0      	pop	{r4, r5, r7, pc}
10043b9c:	20001bd8 	.word	0x20001bd8
10043ba0:	20001bdc 	.word	0x20001bdc

10043ba4 <I2C_Flushbuffer>:

void I2C_Flushbuffer(){
10043ba4:	b580      	push	{r7, lr}
10043ba6:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_READY && MemBuff.tail != MemBuff.head){
10043ba8:	4b0d      	ldr	r3, [pc, #52]	@ (10043be0 <I2C_Flushbuffer+0x3c>)
10043baa:	2241      	movs	r2, #65	@ 0x41
10043bac:	5c9b      	ldrb	r3, [r3, r2]
10043bae:	b2db      	uxtb	r3, r3
10043bb0:	2b20      	cmp	r3, #32
10043bb2:	d111      	bne.n	10043bd8 <I2C_Flushbuffer+0x34>
10043bb4:	4b0b      	ldr	r3, [pc, #44]	@ (10043be4 <I2C_Flushbuffer+0x40>)
10043bb6:	4a0c      	ldr	r2, [pc, #48]	@ (10043be8 <I2C_Flushbuffer+0x44>)
10043bb8:	5a9a      	ldrh	r2, [r3, r2]
10043bba:	490a      	ldr	r1, [pc, #40]	@ (10043be4 <I2C_Flushbuffer+0x40>)
10043bbc:	23c0      	movs	r3, #192	@ 0xc0
10043bbe:	015b      	lsls	r3, r3, #5
10043bc0:	5acb      	ldrh	r3, [r1, r3]
10043bc2:	429a      	cmp	r2, r3
10043bc4:	d008      	beq.n	10043bd8 <I2C_Flushbuffer+0x34>
		//error recovery
		I2C_Post(MemBuff.data+MemBuff.tail);
10043bc6:	4b07      	ldr	r3, [pc, #28]	@ (10043be4 <I2C_Flushbuffer+0x40>)
10043bc8:	4a07      	ldr	r2, [pc, #28]	@ (10043be8 <I2C_Flushbuffer+0x44>)
10043bca:	5a9b      	ldrh	r3, [r3, r2]
10043bcc:	009a      	lsls	r2, r3, #2
10043bce:	4b05      	ldr	r3, [pc, #20]	@ (10043be4 <I2C_Flushbuffer+0x40>)
10043bd0:	18d3      	adds	r3, r2, r3
10043bd2:	0018      	movs	r0, r3
10043bd4:	f7ff fd78 	bl	100436c8 <I2C_Post>
	}
}
10043bd8:	46c0      	nop			@ (mov r8, r8)
10043bda:	46bd      	mov	sp, r7
10043bdc:	bd80      	pop	{r7, pc}
10043bde:	46c0      	nop			@ (mov r8, r8)
10043be0:	20002624 	.word	0x20002624
10043be4:	200003d4 	.word	0x200003d4
10043be8:	00001802 	.word	0x00001802

10043bec <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr, uint8_t posterindex){
10043bec:	b5b0      	push	{r4, r5, r7, lr}
10043bee:	b084      	sub	sp, #16
10043bf0:	af00      	add	r7, sp, #0
10043bf2:	0004      	movs	r4, r0
10043bf4:	0008      	movs	r0, r1
10043bf6:	0011      	movs	r1, r2
10043bf8:	1dfb      	adds	r3, r7, #7
10043bfa:	1c22      	adds	r2, r4, #0
10043bfc:	701a      	strb	r2, [r3, #0]
10043bfe:	1dbb      	adds	r3, r7, #6
10043c00:	1c02      	adds	r2, r0, #0
10043c02:	701a      	strb	r2, [r3, #0]
10043c04:	1d7b      	adds	r3, r7, #5
10043c06:	1c0a      	adds	r2, r1, #0
10043c08:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10043c0a:	4b18      	ldr	r3, [pc, #96]	@ (10043c6c <I2C_Recieve+0x80>)
10043c0c:	781b      	ldrb	r3, [r3, #0]
10043c0e:	2b00      	cmp	r3, #0
10043c10:	d101      	bne.n	10043c16 <I2C_Recieve+0x2a>
10043c12:	2301      	movs	r3, #1
10043c14:	e026      	b.n	10043c64 <I2C_Recieve+0x78>
	HAL_StatusTypeDef status = HAL_OK;
10043c16:	230f      	movs	r3, #15
10043c18:	18fb      	adds	r3, r7, r3
10043c1a:	2200      	movs	r2, #0
10043c1c:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
10043c1e:	4b14      	ldr	r3, [pc, #80]	@ (10043c70 <I2C_Recieve+0x84>)
10043c20:	1dfa      	adds	r2, r7, #7
10043c22:	7812      	ldrb	r2, [r2, #0]
10043c24:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
10043c26:	4b12      	ldr	r3, [pc, #72]	@ (10043c70 <I2C_Recieve+0x84>)
10043c28:	1dba      	adds	r2, r7, #6
10043c2a:	7812      	ldrb	r2, [r2, #0]
10043c2c:	705a      	strb	r2, [r3, #1]
	if(posterindex == 0 || posterindex > NUMPOSTERS){
10043c2e:	1d7b      	adds	r3, r7, #5
10043c30:	781b      	ldrb	r3, [r3, #0]
10043c32:	2b00      	cmp	r3, #0
10043c34:	d003      	beq.n	10043c3e <I2C_Recieve+0x52>
10043c36:	1d7b      	adds	r3, r7, #5
10043c38:	781b      	ldrb	r3, [r3, #0]
10043c3a:	2b01      	cmp	r3, #1
10043c3c:	d901      	bls.n	10043c42 <I2C_Recieve+0x56>
		return HAL_ERROR;
10043c3e:	2301      	movs	r3, #1
10043c40:	e010      	b.n	10043c64 <I2C_Recieve+0x78>
	}
	Post.posterindex = posterindex;
10043c42:	4b0b      	ldr	r3, [pc, #44]	@ (10043c70 <I2C_Recieve+0x84>)
10043c44:	1d7a      	adds	r2, r7, #5
10043c46:	7812      	ldrb	r2, [r2, #0]
10043c48:	70da      	strb	r2, [r3, #3]
	Post.data = 0;//will store future recieved data
10043c4a:	4b09      	ldr	r3, [pc, #36]	@ (10043c70 <I2C_Recieve+0x84>)
10043c4c:	2200      	movs	r2, #0
10043c4e:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
10043c50:	250f      	movs	r5, #15
10043c52:	197c      	adds	r4, r7, r5
10043c54:	4b06      	ldr	r3, [pc, #24]	@ (10043c70 <I2C_Recieve+0x84>)
10043c56:	6818      	ldr	r0, [r3, #0]
10043c58:	f7ff fd6a 	bl	10043730 <I2C_Enqueue>
10043c5c:	0003      	movs	r3, r0
10043c5e:	7023      	strb	r3, [r4, #0]
	return status;
10043c60:	197b      	adds	r3, r7, r5
10043c62:	781b      	ldrb	r3, [r3, #0]

}
10043c64:	0018      	movs	r0, r3
10043c66:	46bd      	mov	sp, r7
10043c68:	b004      	add	sp, #16
10043c6a:	bdb0      	pop	{r4, r5, r7, pc}
10043c6c:	20001bd8 	.word	0x20001bd8
10043c70:	20001be0 	.word	0x20001be0

10043c74 <I2C_WriteReg>:
unsigned char I2C_WriteReg(
    unsigned char I2CAddress,
    unsigned char deviceRegisterAddress,
    uint8_t data
)
{
10043c74:	b5b0      	push	{r4, r5, r7, lr}
10043c76:	b084      	sub	sp, #16
10043c78:	af00      	add	r7, sp, #0
10043c7a:	0004      	movs	r4, r0
10043c7c:	0008      	movs	r0, r1
10043c7e:	0011      	movs	r1, r2
10043c80:	1dfb      	adds	r3, r7, #7
10043c82:	1c22      	adds	r2, r4, #0
10043c84:	701a      	strb	r2, [r3, #0]
10043c86:	1dbb      	adds	r3, r7, #6
10043c88:	1c02      	adds	r2, r0, #0
10043c8a:	701a      	strb	r2, [r3, #0]
10043c8c:	1d7b      	adds	r3, r7, #5
10043c8e:	1c0a      	adds	r2, r1, #0
10043c90:	701a      	strb	r2, [r3, #0]
//        I2C_MEMADD_SIZE_8BIT,
//        &data,
//        1,
//        HAL_MAX_DELAY
//    );
    ret = I2C_Transmit(I2CAddress, deviceRegisterAddress, data);
10043c92:	250f      	movs	r5, #15
10043c94:	197c      	adds	r4, r7, r5
10043c96:	1d7b      	adds	r3, r7, #5
10043c98:	781a      	ldrb	r2, [r3, #0]
10043c9a:	1dbb      	adds	r3, r7, #6
10043c9c:	7819      	ldrb	r1, [r3, #0]
10043c9e:	1dfb      	adds	r3, r7, #7
10043ca0:	781b      	ldrb	r3, [r3, #0]
10043ca2:	0018      	movs	r0, r3
10043ca4:	f7ff ff44 	bl	10043b30 <I2C_Transmit>
10043ca8:	0003      	movs	r3, r0
10043caa:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK)
10043cac:	197b      	adds	r3, r7, r5
10043cae:	781b      	ldrb	r3, [r3, #0]
10043cb0:	2b00      	cmp	r3, #0
10043cb2:	d001      	beq.n	10043cb8 <I2C_WriteReg+0x44>
    {
        return ERROR;
10043cb4:	2301      	movs	r3, #1
10043cb6:	e000      	b.n	10043cba <I2C_WriteReg+0x46>
    }

    return SUCCESS;
10043cb8:	2300      	movs	r3, #0
}
10043cba:	0018      	movs	r0, r3
10043cbc:	46bd      	mov	sp, r7
10043cbe:	b004      	add	sp, #16
10043cc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

10043cc4 <MP3_SendData>:
static uint8_t* folders;
static uint8_t numfolders;

static char lastsent[4];
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
10043cc4:	b590      	push	{r4, r7, lr}
10043cc6:	b085      	sub	sp, #20
10043cc8:	af00      	add	r7, sp, #0
10043cca:	6078      	str	r0, [r7, #4]
	uint16_t accumulation = 0;
10043ccc:	240e      	movs	r4, #14
10043cce:	193b      	adds	r3, r7, r4
10043cd0:	2200      	movs	r2, #0
10043cd2:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
10043cd4:	207e      	movs	r0, #126	@ 0x7e
10043cd6:	f001 fb15 	bl	10045304 <LPUART_WriteTx>
	accumulation += 0xFF;
10043cda:	193b      	adds	r3, r7, r4
10043cdc:	193a      	adds	r2, r7, r4
10043cde:	8812      	ldrh	r2, [r2, #0]
10043ce0:	32ff      	adds	r2, #255	@ 0xff
10043ce2:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
10043ce4:	20ff      	movs	r0, #255	@ 0xff
10043ce6:	f001 fb0d 	bl	10045304 <LPUART_WriteTx>
	accumulation += 0x06;
10043cea:	193b      	adds	r3, r7, r4
10043cec:	193a      	adds	r2, r7, r4
10043cee:	8812      	ldrh	r2, [r2, #0]
10043cf0:	3206      	adds	r2, #6
10043cf2:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
10043cf4:	2006      	movs	r0, #6
10043cf6:	f001 fb05 	bl	10045304 <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
10043cfa:	2300      	movs	r3, #0
10043cfc:	60bb      	str	r3, [r7, #8]
10043cfe:	e01d      	b.n	10043d3c <MP3_SendData+0x78>
		accumulation += string[i];
10043d00:	68bb      	ldr	r3, [r7, #8]
10043d02:	687a      	ldr	r2, [r7, #4]
10043d04:	18d3      	adds	r3, r2, r3
10043d06:	781b      	ldrb	r3, [r3, #0]
10043d08:	0019      	movs	r1, r3
10043d0a:	220e      	movs	r2, #14
10043d0c:	18bb      	adds	r3, r7, r2
10043d0e:	18ba      	adds	r2, r7, r2
10043d10:	8812      	ldrh	r2, [r2, #0]
10043d12:	188a      	adds	r2, r1, r2
10043d14:	801a      	strh	r2, [r3, #0]
		lastsent[i] = string[i];
10043d16:	68bb      	ldr	r3, [r7, #8]
10043d18:	687a      	ldr	r2, [r7, #4]
10043d1a:	18d3      	adds	r3, r2, r3
10043d1c:	7819      	ldrb	r1, [r3, #0]
10043d1e:	4a16      	ldr	r2, [pc, #88]	@ (10043d78 <MP3_SendData+0xb4>)
10043d20:	68bb      	ldr	r3, [r7, #8]
10043d22:	18d3      	adds	r3, r2, r3
10043d24:	1c0a      	adds	r2, r1, #0
10043d26:	701a      	strb	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
10043d28:	68bb      	ldr	r3, [r7, #8]
10043d2a:	687a      	ldr	r2, [r7, #4]
10043d2c:	18d3      	adds	r3, r2, r3
10043d2e:	781b      	ldrb	r3, [r3, #0]
10043d30:	0018      	movs	r0, r3
10043d32:	f001 fae7 	bl	10045304 <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
10043d36:	68bb      	ldr	r3, [r7, #8]
10043d38:	3301      	adds	r3, #1
10043d3a:	60bb      	str	r3, [r7, #8]
10043d3c:	68bb      	ldr	r3, [r7, #8]
10043d3e:	2b03      	cmp	r3, #3
10043d40:	ddde      	ble.n	10043d00 <MP3_SendData+0x3c>
	}
	accumulation = -accumulation;//??required for it to work
10043d42:	240e      	movs	r4, #14
10043d44:	193b      	adds	r3, r7, r4
10043d46:	193a      	adds	r2, r7, r4
10043d48:	8812      	ldrh	r2, [r2, #0]
10043d4a:	4252      	negs	r2, r2
10043d4c:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(accumulation>>8);//checksum
10043d4e:	193b      	adds	r3, r7, r4
10043d50:	881b      	ldrh	r3, [r3, #0]
10043d52:	0a1b      	lsrs	r3, r3, #8
10043d54:	b29b      	uxth	r3, r3
10043d56:	b2db      	uxtb	r3, r3
10043d58:	0018      	movs	r0, r3
10043d5a:	f001 fad3 	bl	10045304 <LPUART_WriteTx>
	LPUART_WriteTx(accumulation&0xFF);//checksum
10043d5e:	193b      	adds	r3, r7, r4
10043d60:	881b      	ldrh	r3, [r3, #0]
10043d62:	b2db      	uxtb	r3, r3
10043d64:	0018      	movs	r0, r3
10043d66:	f001 facd 	bl	10045304 <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
10043d6a:	20ef      	movs	r0, #239	@ 0xef
10043d6c:	f001 faca 	bl	10045304 <LPUART_WriteTx>

}
10043d70:	46c0      	nop			@ (mov r8, r8)
10043d72:	46bd      	mov	sp, r7
10043d74:	b005      	add	sp, #20
10043d76:	bd90      	pop	{r4, r7, pc}
10043d78:	20001c08 	.word	0x20001c08

10043d7c <parsePacket>:

uint8_t parsePacket(char rx){
10043d7c:	b580      	push	{r7, lr}
10043d7e:	b086      	sub	sp, #24
10043d80:	af00      	add	r7, sp, #0
10043d82:	0002      	movs	r2, r0
10043d84:	1dfb      	adds	r3, r7, #7
10043d86:	701a      	strb	r2, [r3, #0]
	if(rx == UARTFAILED){
10043d88:	1dfb      	adds	r3, r7, #7
10043d8a:	781b      	ldrb	r3, [r3, #0]
10043d8c:	2b25      	cmp	r3, #37	@ 0x25
10043d8e:	d101      	bne.n	10043d94 <parsePacket+0x18>
		return 0;
10043d90:	2300      	movs	r3, #0
10043d92:	e0c9      	b.n	10043f28 <parsePacket+0x1ac>
	}
	if(rx == 0x7E){
10043d94:	1dfb      	adds	r3, r7, #7
10043d96:	781b      	ldrb	r3, [r3, #0]
10043d98:	2b7e      	cmp	r3, #126	@ 0x7e
10043d9a:	d102      	bne.n	10043da2 <parsePacket+0x26>
		PacketSM = Start;
10043d9c:	4b64      	ldr	r3, [pc, #400]	@ (10043f30 <parsePacket+0x1b4>)
10043d9e:	2200      	movs	r2, #0
10043da0:	701a      	strb	r2, [r3, #0]
	}
	switch (PacketSM){
10043da2:	4b63      	ldr	r3, [pc, #396]	@ (10043f30 <parsePacket+0x1b4>)
10043da4:	781b      	ldrb	r3, [r3, #0]
10043da6:	2b08      	cmp	r3, #8
10043da8:	d900      	bls.n	10043dac <parsePacket+0x30>
10043daa:	e0bc      	b.n	10043f26 <parsePacket+0x1aa>
10043dac:	009a      	lsls	r2, r3, #2
10043dae:	4b61      	ldr	r3, [pc, #388]	@ (10043f34 <parsePacket+0x1b8>)
10043db0:	18d3      	adds	r3, r2, r3
10043db2:	681b      	ldr	r3, [r3, #0]
10043db4:	469f      	mov	pc, r3
	case Start:
		if(rx == 0xFF){
10043db6:	1dfb      	adds	r3, r7, #7
10043db8:	781b      	ldrb	r3, [r3, #0]
10043dba:	2bff      	cmp	r3, #255	@ 0xff
10043dbc:	d000      	beq.n	10043dc0 <parsePacket+0x44>
10043dbe:	e0b1      	b.n	10043f24 <parsePacket+0x1a8>
			PacketSM = Version;
10043dc0:	4b5b      	ldr	r3, [pc, #364]	@ (10043f30 <parsePacket+0x1b4>)
10043dc2:	2201      	movs	r2, #1
10043dc4:	701a      	strb	r2, [r3, #0]
		}
		break;
10043dc6:	e0ad      	b.n	10043f24 <parsePacket+0x1a8>
	case Version:
		if(rx == 0x06){
10043dc8:	1dfb      	adds	r3, r7, #7
10043dca:	781b      	ldrb	r3, [r3, #0]
10043dcc:	2b06      	cmp	r3, #6
10043dce:	d103      	bne.n	10043dd8 <parsePacket+0x5c>
			PacketSM = Length;
10043dd0:	4b57      	ldr	r3, [pc, #348]	@ (10043f30 <parsePacket+0x1b4>)
10043dd2:	2202      	movs	r2, #2
10043dd4:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
10043dd6:	e0a6      	b.n	10043f26 <parsePacket+0x1aa>
			PacketSM = Start;
10043dd8:	4b55      	ldr	r3, [pc, #340]	@ (10043f30 <parsePacket+0x1b4>)
10043dda:	2200      	movs	r2, #0
10043ddc:	701a      	strb	r2, [r3, #0]
		break;
10043dde:	e0a2      	b.n	10043f26 <parsePacket+0x1aa>
	case Length:
		PacketSM = Command;
10043de0:	4b53      	ldr	r3, [pc, #332]	@ (10043f30 <parsePacket+0x1b4>)
10043de2:	2203      	movs	r2, #3
10043de4:	701a      	strb	r2, [r3, #0]
		Packet.command = rx;
10043de6:	4b54      	ldr	r3, [pc, #336]	@ (10043f38 <parsePacket+0x1bc>)
10043de8:	1dfa      	adds	r2, r7, #7
10043dea:	7812      	ldrb	r2, [r2, #0]
10043dec:	701a      	strb	r2, [r3, #0]
		break;
10043dee:	e09a      	b.n	10043f26 <parsePacket+0x1aa>
	case Command:
		if(rx == 0x01 || rx == 0x00){
10043df0:	1dfb      	adds	r3, r7, #7
10043df2:	781b      	ldrb	r3, [r3, #0]
10043df4:	2b01      	cmp	r3, #1
10043df6:	d003      	beq.n	10043e00 <parsePacket+0x84>
10043df8:	1dfb      	adds	r3, r7, #7
10043dfa:	781b      	ldrb	r3, [r3, #0]
10043dfc:	2b00      	cmp	r3, #0
10043dfe:	d103      	bne.n	10043e08 <parsePacket+0x8c>
			PacketSM = Ack;
10043e00:	4b4b      	ldr	r3, [pc, #300]	@ (10043f30 <parsePacket+0x1b4>)
10043e02:	2204      	movs	r2, #4
10043e04:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
10043e06:	e08e      	b.n	10043f26 <parsePacket+0x1aa>
			PacketSM = Start;
10043e08:	4b49      	ldr	r3, [pc, #292]	@ (10043f30 <parsePacket+0x1b4>)
10043e0a:	2200      	movs	r2, #0
10043e0c:	701a      	strb	r2, [r3, #0]
		break;
10043e0e:	e08a      	b.n	10043f26 <parsePacket+0x1aa>
	case Ack:
		PacketSM = Param1;
10043e10:	4b47      	ldr	r3, [pc, #284]	@ (10043f30 <parsePacket+0x1b4>)
10043e12:	2205      	movs	r2, #5
10043e14:	701a      	strb	r2, [r3, #0]
		Packet.Param1 = rx;
10043e16:	4b48      	ldr	r3, [pc, #288]	@ (10043f38 <parsePacket+0x1bc>)
10043e18:	1dfa      	adds	r2, r7, #7
10043e1a:	7812      	ldrb	r2, [r2, #0]
10043e1c:	709a      	strb	r2, [r3, #2]

		break;
10043e1e:	e082      	b.n	10043f26 <parsePacket+0x1aa>
	case Param1:
		PacketSM = Param2;
10043e20:	4b43      	ldr	r3, [pc, #268]	@ (10043f30 <parsePacket+0x1b4>)
10043e22:	2206      	movs	r2, #6
10043e24:	701a      	strb	r2, [r3, #0]
		Packet.Param2 = rx;
10043e26:	4b44      	ldr	r3, [pc, #272]	@ (10043f38 <parsePacket+0x1bc>)
10043e28:	1dfa      	adds	r2, r7, #7
10043e2a:	7812      	ldrb	r2, [r2, #0]
10043e2c:	70da      	strb	r2, [r3, #3]
		break;
10043e2e:	e07a      	b.n	10043f26 <parsePacket+0x1aa>
	case Param2:
		uint16_t checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
10043e30:	4b41      	ldr	r3, [pc, #260]	@ (10043f38 <parsePacket+0x1bc>)
10043e32:	781b      	ldrb	r3, [r3, #0]
10043e34:	001a      	movs	r2, r3
10043e36:	4b40      	ldr	r3, [pc, #256]	@ (10043f38 <parsePacket+0x1bc>)
10043e38:	785b      	ldrb	r3, [r3, #1]
10043e3a:	18d3      	adds	r3, r2, r3
10043e3c:	b29b      	uxth	r3, r3
10043e3e:	4a3e      	ldr	r2, [pc, #248]	@ (10043f38 <parsePacket+0x1bc>)
10043e40:	7892      	ldrb	r2, [r2, #2]
10043e42:	189b      	adds	r3, r3, r2
10043e44:	b29b      	uxth	r3, r3
10043e46:	4a3c      	ldr	r2, [pc, #240]	@ (10043f38 <parsePacket+0x1bc>)
10043e48:	78d2      	ldrb	r2, [r2, #3]
10043e4a:	189b      	adds	r3, r3, r2
10043e4c:	b29a      	uxth	r2, r3
10043e4e:	2016      	movs	r0, #22
10043e50:	183b      	adds	r3, r7, r0
10043e52:	493a      	ldr	r1, [pc, #232]	@ (10043f3c <parsePacket+0x1c0>)
10043e54:	1a8a      	subs	r2, r1, r2
10043e56:	801a      	strh	r2, [r3, #0]
		if(rx == checkval>>8){
10043e58:	1dfb      	adds	r3, r7, #7
10043e5a:	781b      	ldrb	r3, [r3, #0]
10043e5c:	b29a      	uxth	r2, r3
10043e5e:	183b      	adds	r3, r7, r0
10043e60:	881b      	ldrh	r3, [r3, #0]
10043e62:	0a1b      	lsrs	r3, r3, #8
10043e64:	b29b      	uxth	r3, r3
10043e66:	429a      	cmp	r2, r3
10043e68:	d103      	bne.n	10043e72 <parsePacket+0xf6>
			PacketSM = Checksum1;
10043e6a:	4b31      	ldr	r3, [pc, #196]	@ (10043f30 <parsePacket+0x1b4>)
10043e6c:	2207      	movs	r2, #7
10043e6e:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
10043e70:	e059      	b.n	10043f26 <parsePacket+0x1aa>
			PacketSM = Start;
10043e72:	4b2f      	ldr	r3, [pc, #188]	@ (10043f30 <parsePacket+0x1b4>)
10043e74:	2200      	movs	r2, #0
10043e76:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
10043e78:	2110      	movs	r1, #16
10043e7a:	187b      	adds	r3, r7, r1
10043e7c:	4a30      	ldr	r2, [pc, #192]	@ (10043f40 <parsePacket+0x1c4>)
10043e7e:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10043e80:	187b      	adds	r3, r7, r1
10043e82:	0018      	movs	r0, r3
10043e84:	f7ff ff1e 	bl	10043cc4 <MP3_SendData>
		break;
10043e88:	e04d      	b.n	10043f26 <parsePacket+0x1aa>
	case Checksum1:
		checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
10043e8a:	4b2b      	ldr	r3, [pc, #172]	@ (10043f38 <parsePacket+0x1bc>)
10043e8c:	781b      	ldrb	r3, [r3, #0]
10043e8e:	001a      	movs	r2, r3
10043e90:	4b29      	ldr	r3, [pc, #164]	@ (10043f38 <parsePacket+0x1bc>)
10043e92:	785b      	ldrb	r3, [r3, #1]
10043e94:	18d3      	adds	r3, r2, r3
10043e96:	b29b      	uxth	r3, r3
10043e98:	4a27      	ldr	r2, [pc, #156]	@ (10043f38 <parsePacket+0x1bc>)
10043e9a:	7892      	ldrb	r2, [r2, #2]
10043e9c:	189b      	adds	r3, r3, r2
10043e9e:	b29b      	uxth	r3, r3
10043ea0:	4a25      	ldr	r2, [pc, #148]	@ (10043f38 <parsePacket+0x1bc>)
10043ea2:	78d2      	ldrb	r2, [r2, #3]
10043ea4:	189b      	adds	r3, r3, r2
10043ea6:	b29a      	uxth	r2, r3
10043ea8:	2016      	movs	r0, #22
10043eaa:	183b      	adds	r3, r7, r0
10043eac:	4923      	ldr	r1, [pc, #140]	@ (10043f3c <parsePacket+0x1c0>)
10043eae:	1a8a      	subs	r2, r1, r2
10043eb0:	801a      	strh	r2, [r3, #0]
		if(rx == (checkval&0xFF)){
10043eb2:	1dfb      	adds	r3, r7, #7
10043eb4:	781a      	ldrb	r2, [r3, #0]
10043eb6:	183b      	adds	r3, r7, r0
10043eb8:	881b      	ldrh	r3, [r3, #0]
10043eba:	21ff      	movs	r1, #255	@ 0xff
10043ebc:	400b      	ands	r3, r1
10043ebe:	429a      	cmp	r2, r3
10043ec0:	d103      	bne.n	10043eca <parsePacket+0x14e>
			PacketSM = Checksum2;
10043ec2:	4b1b      	ldr	r3, [pc, #108]	@ (10043f30 <parsePacket+0x1b4>)
10043ec4:	2208      	movs	r2, #8
10043ec6:	701a      	strb	r2, [r3, #0]
			BSP_LED_On(LED_RED);
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
10043ec8:	e02d      	b.n	10043f26 <parsePacket+0x1aa>
			BSP_LED_On(LED_RED);
10043eca:	2002      	movs	r0, #2
10043ecc:	f002 f99e 	bl	1004620c <BSP_LED_On>
			PacketSM = Start;
10043ed0:	4b17      	ldr	r3, [pc, #92]	@ (10043f30 <parsePacket+0x1b4>)
10043ed2:	2200      	movs	r2, #0
10043ed4:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
10043ed6:	210c      	movs	r1, #12
10043ed8:	187b      	adds	r3, r7, r1
10043eda:	4a19      	ldr	r2, [pc, #100]	@ (10043f40 <parsePacket+0x1c4>)
10043edc:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10043ede:	187b      	adds	r3, r7, r1
10043ee0:	0018      	movs	r0, r3
10043ee2:	f7ff feef 	bl	10043cc4 <MP3_SendData>
		break;
10043ee6:	e01e      	b.n	10043f26 <parsePacket+0x1aa>
	case Checksum2:
		if(rx == 0xEF){
10043ee8:	1dfb      	adds	r3, r7, #7
10043eea:	781b      	ldrb	r3, [r3, #0]
10043eec:	2bef      	cmp	r3, #239	@ 0xef
10043eee:	d115      	bne.n	10043f1c <parsePacket+0x1a0>
			if(Packet.command == 0x40){
10043ef0:	4b11      	ldr	r3, [pc, #68]	@ (10043f38 <parsePacket+0x1bc>)
10043ef2:	781b      	ldrb	r3, [r3, #0]
10043ef4:	2b40      	cmp	r3, #64	@ 0x40
10043ef6:	d10c      	bne.n	10043f12 <parsePacket+0x196>
				if(Packet.Param2 == 0x04){
10043ef8:	4b0f      	ldr	r3, [pc, #60]	@ (10043f38 <parsePacket+0x1bc>)
10043efa:	78db      	ldrb	r3, [r3, #3]
10043efc:	2b04      	cmp	r3, #4
10043efe:	d108      	bne.n	10043f12 <parsePacket+0x196>
					MP3_SendData(lastsent);
10043f00:	4b10      	ldr	r3, [pc, #64]	@ (10043f44 <parsePacket+0x1c8>)
10043f02:	0018      	movs	r0, r3
10043f04:	f7ff fede 	bl	10043cc4 <MP3_SendData>

					PacketSM = Start;
10043f08:	4b09      	ldr	r3, [pc, #36]	@ (10043f30 <parsePacket+0x1b4>)
10043f0a:	2200      	movs	r2, #0
10043f0c:	701a      	strb	r2, [r3, #0]
					return 0;
10043f0e:	2300      	movs	r3, #0
10043f10:	e00a      	b.n	10043f28 <parsePacket+0x1ac>
				}
			}
			PacketSM = Start;
10043f12:	4b07      	ldr	r3, [pc, #28]	@ (10043f30 <parsePacket+0x1b4>)
10043f14:	2200      	movs	r2, #0
10043f16:	701a      	strb	r2, [r3, #0]
			return 1;
10043f18:	2301      	movs	r3, #1
10043f1a:	e005      	b.n	10043f28 <parsePacket+0x1ac>
		}
		PacketSM = Start;
10043f1c:	4b04      	ldr	r3, [pc, #16]	@ (10043f30 <parsePacket+0x1b4>)
10043f1e:	2200      	movs	r2, #0
10043f20:	701a      	strb	r2, [r3, #0]
		break;
10043f22:	e000      	b.n	10043f26 <parsePacket+0x1aa>
		break;
10043f24:	46c0      	nop			@ (mov r8, r8)
	}
	return 0;
10043f26:	2300      	movs	r3, #0
}
10043f28:	0018      	movs	r0, r3
10043f2a:	46bd      	mov	sp, r7
10043f2c:	b006      	add	sp, #24
10043f2e:	bd80      	pop	{r7, pc}
10043f30:	20001bf5 	.word	0x20001bf5
10043f34:	10067d28 	.word	0x10067d28
10043f38:	20001bf8 	.word	0x20001bf8
10043f3c:	fffffefb 	.word	0xfffffefb
10043f40:	06000040 	.word	0x06000040
10043f44:	20001c08 	.word	0x20001c08

10043f48 <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
10043f48:	b580      	push	{r7, lr}
10043f4a:	b084      	sub	sp, #16
10043f4c:	af00      	add	r7, sp, #0
10043f4e:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
10043f50:	4b1b      	ldr	r3, [pc, #108]	@ (10043fc0 <MP3_Event_Init+0x78>)
10043f52:	687a      	ldr	r2, [r7, #4]
10043f54:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
10043f56:	f001 f827 	bl	10044fa8 <TIMERS_Init>
    play = 1;
10043f5a:	4b1a      	ldr	r3, [pc, #104]	@ (10043fc4 <MP3_Event_Init+0x7c>)
10043f5c:	2201      	movs	r2, #1
10043f5e:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
10043f60:	f7ff f8b6 	bl	100430d0 <FLASH_GetDutyCycle>
10043f64:	0003      	movs	r3, r0
10043f66:	2164      	movs	r1, #100	@ 0x64
10043f68:	0018      	movs	r0, r3
10043f6a:	f7fc f969 	bl	10040240 <__udivsi3>
10043f6e:	0003      	movs	r3, r0
10043f70:	b2da      	uxtb	r2, r3
10043f72:	4b15      	ldr	r3, [pc, #84]	@ (10043fc8 <MP3_Event_Init+0x80>)
10043f74:	701a      	strb	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
10043f76:	f7ff f895 	bl	100430a4 <FLASH_GetVolume>
10043f7a:	0003      	movs	r3, r0
10043f7c:	2164      	movs	r1, #100	@ 0x64
10043f7e:	0018      	movs	r0, r3
10043f80:	f7fc f95e 	bl	10040240 <__udivsi3>
10043f84:	0003      	movs	r3, r0
10043f86:	b2da      	uxtb	r2, r3
10043f88:	4b10      	ldr	r3, [pc, #64]	@ (10043fcc <MP3_Event_Init+0x84>)
10043f8a:	701a      	strb	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
10043f8c:	f001 f858 	bl	10045040 <TIMERS_GetMilliSeconds>
10043f90:	0002      	movs	r2, r0
10043f92:	4b0f      	ldr	r3, [pc, #60]	@ (10043fd0 <MP3_Event_Init+0x88>)
10043f94:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
10043f96:	f001 f853 	bl	10045040 <TIMERS_GetMilliSeconds>
10043f9a:	0002      	movs	r2, r0
10043f9c:	4b0d      	ldr	r3, [pc, #52]	@ (10043fd4 <MP3_Event_Init+0x8c>)
10043f9e:	601a      	str	r2, [r3, #0]
    initialized = 0;
10043fa0:	4b0d      	ldr	r3, [pc, #52]	@ (10043fd8 <MP3_Event_Init+0x90>)
10043fa2:	2200      	movs	r2, #0
10043fa4:	701a      	strb	r2, [r3, #0]
	{
	char send[4] = {0x0C, 0x00, 0x00, 0x00};//reset module
10043fa6:	210c      	movs	r1, #12
10043fa8:	187b      	adds	r3, r7, r1
10043faa:	220c      	movs	r2, #12
10043fac:	601a      	str	r2, [r3, #0]
	MP3_SendData(send);
10043fae:	187b      	adds	r3, r7, r1
10043fb0:	0018      	movs	r0, r3
10043fb2:	f7ff fe87 	bl	10043cc4 <MP3_SendData>

//	{
//	char send[4] = {0x08, 0x00, 0x00, 0x01};//set folder repeat command
//	MP3_SendData(send);
//	}
    return INIT_OK;
10043fb6:	2301      	movs	r3, #1
}
10043fb8:	0018      	movs	r0, r3
10043fba:	46bd      	mov	sp, r7
10043fbc:	b004      	add	sp, #16
10043fbe:	bd80      	pop	{r7, pc}
10043fc0:	20001be4 	.word	0x20001be4
10043fc4:	20001be8 	.word	0x20001be8
10043fc8:	20001be9 	.word	0x20001be9
10043fcc:	20001bea 	.word	0x20001bea
10043fd0:	20001bec 	.word	0x20001bec
10043fd4:	20001bf0 	.word	0x20001bf0
10043fd8:	20001bf4 	.word	0x20001bf4

10043fdc <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
10043fdc:	b580      	push	{r7, lr}
10043fde:	b082      	sub	sp, #8
10043fe0:	af00      	add	r7, sp, #0
10043fe2:	1d3b      	adds	r3, r7, #4
10043fe4:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(MP3queue, event);
10043fe6:	4b05      	ldr	r3, [pc, #20]	@ (10043ffc <MP3_Event_Post+0x20>)
10043fe8:	681a      	ldr	r2, [r3, #0]
10043fea:	1d3b      	adds	r3, r7, #4
10043fec:	6819      	ldr	r1, [r3, #0]
10043fee:	0010      	movs	r0, r2
10043ff0:	f7fe ff01 	bl	10042df6 <FIFO_Enqueue>
}
10043ff4:	46c0      	nop			@ (mov r8, r8)
10043ff6:	46bd      	mov	sp, r7
10043ff8:	b002      	add	sp, #8
10043ffa:	bd80      	pop	{r7, pc}
10043ffc:	20001be4 	.word	0x20001be4

10044000 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
10044000:	b5f0      	push	{r4, r5, r6, r7, lr}
10044002:	b087      	sub	sp, #28
10044004:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
10044006:	2508      	movs	r5, #8
10044008:	197b      	adds	r3, r7, r5
1004400a:	2200      	movs	r2, #0
1004400c:	701a      	strb	r2, [r3, #0]
1004400e:	197b      	adds	r3, r7, r5
10044010:	2200      	movs	r2, #0
10044012:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10044014:	f001 f814 	bl	10045040 <TIMERS_GetMilliSeconds>
10044018:	0003      	movs	r3, r0
1004401a:	617b      	str	r3, [r7, #20]
    char rx = LPUART_ReadRx();
1004401c:	2613      	movs	r6, #19
1004401e:	19bc      	adds	r4, r7, r6
10044020:	f001 f944 	bl	100452ac <LPUART_ReadRx>
10044024:	0003      	movs	r3, r0
10044026:	7023      	strb	r3, [r4, #0]
	if(rx != UARTFAILED){
10044028:	0031      	movs	r1, r6
1004402a:	187b      	adds	r3, r7, r1
1004402c:	781b      	ldrb	r3, [r3, #0]
1004402e:	2b25      	cmp	r3, #37	@ 0x25
10044030:	d00b      	beq.n	1004404a <MP3_Event_Updater+0x4a>
		event.status = EVENT_LPUART;
10044032:	197b      	adds	r3, r7, r5
10044034:	2208      	movs	r2, #8
10044036:	701a      	strb	r2, [r3, #0]
		event.data = rx;
10044038:	187b      	adds	r3, r7, r1
1004403a:	781b      	ldrb	r3, [r3, #0]
1004403c:	b29a      	uxth	r2, r3
1004403e:	197b      	adds	r3, r7, r5
10044040:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10044042:	197b      	adds	r3, r7, r5
10044044:	6818      	ldr	r0, [r3, #0]
10044046:	f7ff ffc9 	bl	10043fdc <MP3_Event_Post>
	}
    if (play){
1004404a:	4b47      	ldr	r3, [pc, #284]	@ (10044168 <MP3_Event_Updater+0x168>)
1004404c:	781b      	ldrb	r3, [r3, #0]
1004404e:	2b00      	cmp	r3, #0
10044050:	d019      	beq.n	10044086 <MP3_Event_Updater+0x86>
		if((timer-starttime) >= CYCLELENGTH*DC){//if the speaker is playing, and time is up
10044052:	4b46      	ldr	r3, [pc, #280]	@ (1004416c <MP3_Event_Updater+0x16c>)
10044054:	681b      	ldr	r3, [r3, #0]
10044056:	697a      	ldr	r2, [r7, #20]
10044058:	1ad3      	subs	r3, r2, r3
1004405a:	4a45      	ldr	r2, [pc, #276]	@ (10044170 <MP3_Event_Updater+0x170>)
1004405c:	7812      	ldrb	r2, [r2, #0]
1004405e:	0011      	movs	r1, r2
10044060:	4a44      	ldr	r2, [pc, #272]	@ (10044174 <MP3_Event_Updater+0x174>)
10044062:	434a      	muls	r2, r1
10044064:	4293      	cmp	r3, r2
10044066:	d32d      	bcc.n	100440c4 <MP3_Event_Updater+0xc4>
			event.status = EVENT_TIMEOUT;
10044068:	2108      	movs	r1, #8
1004406a:	187b      	adds	r3, r7, r1
1004406c:	2209      	movs	r2, #9
1004406e:	701a      	strb	r2, [r3, #0]
			event.data = 0;//next state of play
10044070:	187b      	adds	r3, r7, r1
10044072:	2200      	movs	r2, #0
10044074:	805a      	strh	r2, [r3, #2]
			starttime = timer;
10044076:	4b3d      	ldr	r3, [pc, #244]	@ (1004416c <MP3_Event_Updater+0x16c>)
10044078:	697a      	ldr	r2, [r7, #20]
1004407a:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
1004407c:	187b      	adds	r3, r7, r1
1004407e:	6818      	ldr	r0, [r3, #0]
10044080:	f7ff ffac 	bl	10043fdc <MP3_Event_Post>
10044084:	e01e      	b.n	100440c4 <MP3_Event_Updater+0xc4>
		}
    } else {
		if(DC != 0 && ((timer-starttime) >= CYCLELENGTH*(1-DC))){// if the speaker is playing and time is up, DC = 0 don't play
10044086:	4b3a      	ldr	r3, [pc, #232]	@ (10044170 <MP3_Event_Updater+0x170>)
10044088:	781b      	ldrb	r3, [r3, #0]
1004408a:	2b00      	cmp	r3, #0
1004408c:	d01a      	beq.n	100440c4 <MP3_Event_Updater+0xc4>
1004408e:	4b37      	ldr	r3, [pc, #220]	@ (1004416c <MP3_Event_Updater+0x16c>)
10044090:	681b      	ldr	r3, [r3, #0]
10044092:	697a      	ldr	r2, [r7, #20]
10044094:	1ad3      	subs	r3, r2, r3
10044096:	4a36      	ldr	r2, [pc, #216]	@ (10044170 <MP3_Event_Updater+0x170>)
10044098:	7812      	ldrb	r2, [r2, #0]
1004409a:	0011      	movs	r1, r2
1004409c:	2201      	movs	r2, #1
1004409e:	1a52      	subs	r2, r2, r1
100440a0:	4934      	ldr	r1, [pc, #208]	@ (10044174 <MP3_Event_Updater+0x174>)
100440a2:	434a      	muls	r2, r1
100440a4:	4293      	cmp	r3, r2
100440a6:	d30d      	bcc.n	100440c4 <MP3_Event_Updater+0xc4>
			event.status = EVENT_TIMEOUT;
100440a8:	2108      	movs	r1, #8
100440aa:	187b      	adds	r3, r7, r1
100440ac:	2209      	movs	r2, #9
100440ae:	701a      	strb	r2, [r3, #0]
			event.data = 1;//next state of play
100440b0:	187b      	adds	r3, r7, r1
100440b2:	2201      	movs	r2, #1
100440b4:	805a      	strh	r2, [r3, #2]
			starttime = timer;
100440b6:	4b2d      	ldr	r3, [pc, #180]	@ (1004416c <MP3_Event_Updater+0x16c>)
100440b8:	697a      	ldr	r2, [r7, #20]
100440ba:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
100440bc:	187b      	adds	r3, r7, r1
100440be:	6818      	ldr	r0, [r3, #0]
100440c0:	f7ff ff8c 	bl	10043fdc <MP3_Event_Post>
		}
    }
    if(((timer-inittime) >= 3000) && !initialized){//if the speaker is playing, and time is up
100440c4:	4b2c      	ldr	r3, [pc, #176]	@ (10044178 <MP3_Event_Updater+0x178>)
100440c6:	681b      	ldr	r3, [r3, #0]
100440c8:	697a      	ldr	r2, [r7, #20]
100440ca:	1ad3      	subs	r3, r2, r3
100440cc:	4a2b      	ldr	r2, [pc, #172]	@ (1004417c <MP3_Event_Updater+0x17c>)
100440ce:	4293      	cmp	r3, r2
100440d0:	d90e      	bls.n	100440f0 <MP3_Event_Updater+0xf0>
100440d2:	4b2b      	ldr	r3, [pc, #172]	@ (10044180 <MP3_Event_Updater+0x180>)
100440d4:	781b      	ldrb	r3, [r3, #0]
100440d6:	2b00      	cmp	r3, #0
100440d8:	d10a      	bne.n	100440f0 <MP3_Event_Updater+0xf0>
		event.status = EVENT_INIT;
100440da:	2108      	movs	r1, #8
100440dc:	187b      	adds	r3, r7, r1
100440de:	2201      	movs	r2, #1
100440e0:	701a      	strb	r2, [r3, #0]
		event.data = 0;
100440e2:	187b      	adds	r3, r7, r1
100440e4:	2200      	movs	r2, #0
100440e6:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
100440e8:	187b      	adds	r3, r7, r1
100440ea:	6818      	ldr	r0, [r3, #0]
100440ec:	f7ff ff76 	bl	10043fdc <MP3_Event_Post>
	}
    if(volume != FLASH_GetVolume() || DC != FLASH_GetDutyCycle()){
100440f0:	f7fe ffd8 	bl	100430a4 <FLASH_GetVolume>
100440f4:	0003      	movs	r3, r0
100440f6:	001a      	movs	r2, r3
100440f8:	4b22      	ldr	r3, [pc, #136]	@ (10044184 <MP3_Event_Updater+0x184>)
100440fa:	781b      	ldrb	r3, [r3, #0]
100440fc:	429a      	cmp	r2, r3
100440fe:	d107      	bne.n	10044110 <MP3_Event_Updater+0x110>
10044100:	f7fe ffe6 	bl	100430d0 <FLASH_GetDutyCycle>
10044104:	0003      	movs	r3, r0
10044106:	001a      	movs	r2, r3
10044108:	4b19      	ldr	r3, [pc, #100]	@ (10044170 <MP3_Event_Updater+0x170>)
1004410a:	781b      	ldrb	r3, [r3, #0]
1004410c:	429a      	cmp	r2, r3
1004410e:	d014      	beq.n	1004413a <MP3_Event_Updater+0x13a>
    	event.status = EVENT_SETTINGS;
10044110:	2408      	movs	r4, #8
10044112:	193b      	adds	r3, r7, r4
10044114:	220a      	movs	r2, #10
10044116:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume());
10044118:	f7fe ffc4 	bl	100430a4 <FLASH_GetVolume>
1004411c:	0003      	movs	r3, r0
1004411e:	001a      	movs	r2, r3
10044120:	4b18      	ldr	r3, [pc, #96]	@ (10044184 <MP3_Event_Updater+0x184>)
10044122:	781b      	ldrb	r3, [r3, #0]
10044124:	1ad3      	subs	r3, r2, r3
10044126:	425a      	negs	r2, r3
10044128:	4153      	adcs	r3, r2
1004412a:	b2db      	uxtb	r3, r3
1004412c:	001a      	movs	r2, r3
1004412e:	193b      	adds	r3, r7, r4
10044130:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10044132:	193b      	adds	r3, r7, r4
10044134:	6818      	ldr	r0, [r3, #0]
10044136:	f7ff ff51 	bl	10043fdc <MP3_Event_Post>
    }
    return event;
1004413a:	210c      	movs	r1, #12
1004413c:	187b      	adds	r3, r7, r1
1004413e:	2208      	movs	r2, #8
10044140:	18ba      	adds	r2, r7, r2
10044142:	6812      	ldr	r2, [r2, #0]
10044144:	601a      	str	r2, [r3, #0]
10044146:	187a      	adds	r2, r7, r1
10044148:	2300      	movs	r3, #0
1004414a:	8811      	ldrh	r1, [r2, #0]
1004414c:	0409      	lsls	r1, r1, #16
1004414e:	0c09      	lsrs	r1, r1, #16
10044150:	0c1b      	lsrs	r3, r3, #16
10044152:	041b      	lsls	r3, r3, #16
10044154:	430b      	orrs	r3, r1
10044156:	8852      	ldrh	r2, [r2, #2]
10044158:	0412      	lsls	r2, r2, #16
1004415a:	041b      	lsls	r3, r3, #16
1004415c:	0c1b      	lsrs	r3, r3, #16
1004415e:	4313      	orrs	r3, r2
}
10044160:	0018      	movs	r0, r3
10044162:	46bd      	mov	sp, r7
10044164:	b007      	add	sp, #28
10044166:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044168:	20001be8 	.word	0x20001be8
1004416c:	20001bec 	.word	0x20001bec
10044170:	20001be9 	.word	0x20001be9
10044174:	000927c0 	.word	0x000927c0
10044178:	20001bf0 	.word	0x20001bf0
1004417c:	00000bb7 	.word	0x00000bb7
10044180:	20001bf4 	.word	0x20001bf4
10044184:	20001bea 	.word	0x20001bea

10044188 <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
10044188:	b5b0      	push	{r4, r5, r7, lr}
1004418a:	b0a4      	sub	sp, #144	@ 0x90
1004418c:	af00      	add	r7, sp, #0
1004418e:	1d3b      	adds	r3, r7, #4
10044190:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
10044192:	1d3b      	adds	r3, r7, #4
10044194:	781b      	ldrb	r3, [r3, #0]
10044196:	b25b      	sxtb	r3, r3
10044198:	2b01      	cmp	r3, #1
1004419a:	d000      	beq.n	1004419e <MP3_Event_Handler+0x16>
1004419c:	e098      	b.n	100442d0 <MP3_Event_Handler+0x148>
		//7E FF 06 08 00 00 01 xx EF //repeat folder
//		char send[4] = {0x08, 0x00, 0x00, 0x01};
//		MP3_SendData(send);

		{
		char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
1004419e:	2174      	movs	r1, #116	@ 0x74
100441a0:	187b      	adds	r3, r7, r1
100441a2:	220e      	movs	r2, #14
100441a4:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
100441a6:	187b      	adds	r3, r7, r1
100441a8:	0018      	movs	r0, r3
100441aa:	f7ff fd8b 	bl	10043cc4 <MP3_SendData>
		}
		uint8_t scanning = 1;
100441ae:	238f      	movs	r3, #143	@ 0x8f
100441b0:	18fb      	adds	r3, r7, r3
100441b2:	2201      	movs	r2, #1
100441b4:	701a      	strb	r2, [r3, #0]
		numfolders = 1;
100441b6:	4b8f      	ldr	r3, [pc, #572]	@ (100443f4 <MP3_Event_Handler+0x26c>)
100441b8:	2201      	movs	r2, #1
100441ba:	701a      	strb	r2, [r3, #0]
		FIFO tempFolders = FIFO_Create();
100441bc:	f7fe fdde 	bl	10042d7c <FIFO_Create>
100441c0:	0003      	movs	r3, r0
100441c2:	2280      	movs	r2, #128	@ 0x80
100441c4:	18ba      	adds	r2, r7, r2
100441c6:	6013      	str	r3, [r2, #0]
		while(scanning){
100441c8:	e03e      	b.n	10044248 <MP3_Event_Handler+0xc0>
			{
			char send[4] = {0x4E, 0x00, 0x00, numfolders};//query the number of files on the micrSD
100441ca:	2170      	movs	r1, #112	@ 0x70
100441cc:	187b      	adds	r3, r7, r1
100441ce:	224e      	movs	r2, #78	@ 0x4e
100441d0:	701a      	strb	r2, [r3, #0]
100441d2:	187b      	adds	r3, r7, r1
100441d4:	2200      	movs	r2, #0
100441d6:	705a      	strb	r2, [r3, #1]
100441d8:	187b      	adds	r3, r7, r1
100441da:	2200      	movs	r2, #0
100441dc:	709a      	strb	r2, [r3, #2]
100441de:	4b85      	ldr	r3, [pc, #532]	@ (100443f4 <MP3_Event_Handler+0x26c>)
100441e0:	781a      	ldrb	r2, [r3, #0]
100441e2:	187b      	adds	r3, r7, r1
100441e4:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
100441e6:	187b      	adds	r3, r7, r1
100441e8:	0018      	movs	r0, r3
100441ea:	f7ff fd6b 	bl	10043cc4 <MP3_SendData>
			}
			while(!parsePacket(LPUART_ReadRx()));
100441ee:	46c0      	nop			@ (mov r8, r8)
100441f0:	f001 f85c 	bl	100452ac <LPUART_ReadRx>
100441f4:	0003      	movs	r3, r0
100441f6:	0018      	movs	r0, r3
100441f8:	f7ff fdc0 	bl	10043d7c <parsePacket>
100441fc:	1e03      	subs	r3, r0, #0
100441fe:	d0f7      	beq.n	100441f0 <MP3_Event_Handler+0x68>
			if(Packet.command==0x4E){
10044200:	4b7d      	ldr	r3, [pc, #500]	@ (100443f8 <MP3_Event_Handler+0x270>)
10044202:	781b      	ldrb	r3, [r3, #0]
10044204:	2b4e      	cmp	r3, #78	@ 0x4e
10044206:	d117      	bne.n	10044238 <MP3_Event_Handler+0xb0>
				numfolders++;
10044208:	4b7a      	ldr	r3, [pc, #488]	@ (100443f4 <MP3_Event_Handler+0x26c>)
1004420a:	781b      	ldrb	r3, [r3, #0]
1004420c:	3301      	adds	r3, #1
1004420e:	b2da      	uxtb	r2, r3
10044210:	4b78      	ldr	r3, [pc, #480]	@ (100443f4 <MP3_Event_Handler+0x26c>)
10044212:	701a      	strb	r2, [r3, #0]
				FIFO_Enqueue(tempFolders, (Event_t){EVENT_NONE, Packet.Param2});
10044214:	216c      	movs	r1, #108	@ 0x6c
10044216:	187b      	adds	r3, r7, r1
10044218:	2200      	movs	r2, #0
1004421a:	701a      	strb	r2, [r3, #0]
1004421c:	4b76      	ldr	r3, [pc, #472]	@ (100443f8 <MP3_Event_Handler+0x270>)
1004421e:	78db      	ldrb	r3, [r3, #3]
10044220:	001a      	movs	r2, r3
10044222:	187b      	adds	r3, r7, r1
10044224:	805a      	strh	r2, [r3, #2]
10044226:	187b      	adds	r3, r7, r1
10044228:	2280      	movs	r2, #128	@ 0x80
1004422a:	18ba      	adds	r2, r7, r2
1004422c:	6812      	ldr	r2, [r2, #0]
1004422e:	6819      	ldr	r1, [r3, #0]
10044230:	0010      	movs	r0, r2
10044232:	f7fe fde0 	bl	10042df6 <FIFO_Enqueue>
10044236:	e007      	b.n	10044248 <MP3_Event_Handler+0xc0>
			}else if(Packet.command == 0x40){
10044238:	4b6f      	ldr	r3, [pc, #444]	@ (100443f8 <MP3_Event_Handler+0x270>)
1004423a:	781b      	ldrb	r3, [r3, #0]
1004423c:	2b40      	cmp	r3, #64	@ 0x40
1004423e:	d103      	bne.n	10044248 <MP3_Event_Handler+0xc0>
				scanning = 0;
10044240:	238f      	movs	r3, #143	@ 0x8f
10044242:	18fb      	adds	r3, r7, r3
10044244:	2200      	movs	r2, #0
10044246:	701a      	strb	r2, [r3, #0]
		while(scanning){
10044248:	238f      	movs	r3, #143	@ 0x8f
1004424a:	18fb      	adds	r3, r7, r3
1004424c:	781b      	ldrb	r3, [r3, #0]
1004424e:	2b00      	cmp	r3, #0
10044250:	d1bb      	bne.n	100441ca <MP3_Event_Handler+0x42>
			}
		}
		numfolders--;
10044252:	4b68      	ldr	r3, [pc, #416]	@ (100443f4 <MP3_Event_Handler+0x26c>)
10044254:	781b      	ldrb	r3, [r3, #0]
10044256:	3b01      	subs	r3, #1
10044258:	b2da      	uxtb	r2, r3
1004425a:	4b66      	ldr	r3, [pc, #408]	@ (100443f4 <MP3_Event_Handler+0x26c>)
1004425c:	701a      	strb	r2, [r3, #0]
		folders = malloc(sizeof(uint8_t)*numfolders);
1004425e:	4b65      	ldr	r3, [pc, #404]	@ (100443f4 <MP3_Event_Handler+0x26c>)
10044260:	781b      	ldrb	r3, [r3, #0]
10044262:	0018      	movs	r0, r3
10044264:	f021 fe16 	bl	10065e94 <malloc>
10044268:	0003      	movs	r3, r0
1004426a:	001a      	movs	r2, r3
1004426c:	4b63      	ldr	r3, [pc, #396]	@ (100443fc <MP3_Event_Handler+0x274>)
1004426e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
10044270:	2300      	movs	r3, #0
10044272:	2288      	movs	r2, #136	@ 0x88
10044274:	18ba      	adds	r2, r7, r2
10044276:	6013      	str	r3, [r2, #0]
10044278:	e019      	b.n	100442ae <MP3_Event_Handler+0x126>
			folders[i] = FIFO_Dequeue(tempFolders).data;
1004427a:	2380      	movs	r3, #128	@ 0x80
1004427c:	18fb      	adds	r3, r7, r3
1004427e:	681b      	ldr	r3, [r3, #0]
10044280:	0018      	movs	r0, r3
10044282:	f7fe fdee 	bl	10042e62 <FIFO_Dequeue>
10044286:	0003      	movs	r3, r0
10044288:	001a      	movs	r2, r3
1004428a:	2178      	movs	r1, #120	@ 0x78
1004428c:	187b      	adds	r3, r7, r1
1004428e:	601a      	str	r2, [r3, #0]
10044290:	187b      	adds	r3, r7, r1
10044292:	8859      	ldrh	r1, [r3, #2]
10044294:	4b59      	ldr	r3, [pc, #356]	@ (100443fc <MP3_Event_Handler+0x274>)
10044296:	681a      	ldr	r2, [r3, #0]
10044298:	2088      	movs	r0, #136	@ 0x88
1004429a:	183b      	adds	r3, r7, r0
1004429c:	681b      	ldr	r3, [r3, #0]
1004429e:	18d3      	adds	r3, r2, r3
100442a0:	b2ca      	uxtb	r2, r1
100442a2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
100442a4:	183b      	adds	r3, r7, r0
100442a6:	681b      	ldr	r3, [r3, #0]
100442a8:	3301      	adds	r3, #1
100442aa:	183a      	adds	r2, r7, r0
100442ac:	6013      	str	r3, [r2, #0]
100442ae:	4b51      	ldr	r3, [pc, #324]	@ (100443f4 <MP3_Event_Handler+0x26c>)
100442b0:	781b      	ldrb	r3, [r3, #0]
100442b2:	001a      	movs	r2, r3
100442b4:	2388      	movs	r3, #136	@ 0x88
100442b6:	18fb      	adds	r3, r7, r3
100442b8:	681b      	ldr	r3, [r3, #0]
100442ba:	4293      	cmp	r3, r2
100442bc:	dbdd      	blt.n	1004427a <MP3_Event_Handler+0xf2>
		}
		FIFO_Destroy(tempFolders);
100442be:	2380      	movs	r3, #128	@ 0x80
100442c0:	18fb      	adds	r3, r7, r3
100442c2:	681b      	ldr	r3, [r3, #0]
100442c4:	0018      	movs	r0, r3
100442c6:	f7fe fd74 	bl	10042db2 <FIFO_Destroy>
		initialized = 1;
100442ca:	4b4d      	ldr	r3, [pc, #308]	@ (10044400 <MP3_Event_Handler+0x278>)
100442cc:	2201      	movs	r2, #1
100442ce:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
100442d0:	1d3b      	adds	r3, r7, #4
100442d2:	781b      	ldrb	r3, [r3, #0]
100442d4:	b25b      	sxtb	r3, r3
100442d6:	2b09      	cmp	r3, #9
100442d8:	d122      	bne.n	10044320 <MP3_Event_Handler+0x198>
		//send either play or stop to the mp3 player
		if(event.data == 0){//pause
100442da:	1d3b      	adds	r3, r7, #4
100442dc:	885b      	ldrh	r3, [r3, #2]
100442de:	2b00      	cmp	r3, #0
100442e0:	d10d      	bne.n	100442fe <MP3_Event_Handler+0x176>
					play = event.data;
100442e2:	1d3b      	adds	r3, r7, #4
100442e4:	885b      	ldrh	r3, [r3, #2]
100442e6:	b2da      	uxtb	r2, r3
100442e8:	4b46      	ldr	r3, [pc, #280]	@ (10044404 <MP3_Event_Handler+0x27c>)
100442ea:	701a      	strb	r2, [r3, #0]
					char send[4] = {0x0E, 0x00, 0x00, 0x00};
100442ec:	2168      	movs	r1, #104	@ 0x68
100442ee:	187b      	adds	r3, r7, r1
100442f0:	220e      	movs	r2, #14
100442f2:	601a      	str	r2, [r3, #0]
					MP3_SendData(send);
100442f4:	187b      	adds	r3, r7, r1
100442f6:	0018      	movs	r0, r3
100442f8:	f7ff fce4 	bl	10043cc4 <MP3_SendData>
100442fc:	e010      	b.n	10044320 <MP3_Event_Handler+0x198>

		}else if(event.data == 1){//play
100442fe:	1d3b      	adds	r3, r7, #4
10044300:	885b      	ldrh	r3, [r3, #2]
10044302:	2b01      	cmp	r3, #1
10044304:	d10c      	bne.n	10044320 <MP3_Event_Handler+0x198>
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
10044306:	2164      	movs	r1, #100	@ 0x64
10044308:	187b      	adds	r3, r7, r1
1004430a:	220d      	movs	r2, #13
1004430c:	601a      	str	r2, [r3, #0]
			play = event.data;
1004430e:	1d3b      	adds	r3, r7, #4
10044310:	885b      	ldrh	r3, [r3, #2]
10044312:	b2da      	uxtb	r2, r3
10044314:	4b3b      	ldr	r3, [pc, #236]	@ (10044404 <MP3_Event_Handler+0x27c>)
10044316:	701a      	strb	r2, [r3, #0]
			MP3_SendData(send);
10044318:	187b      	adds	r3, r7, r1
1004431a:	0018      	movs	r0, r3
1004431c:	f7ff fcd2 	bl	10043cc4 <MP3_SendData>
		}

	}if(event.status == EVENT_PLAY){
10044320:	1d3b      	adds	r3, r7, #4
10044322:	781b      	ldrb	r3, [r3, #0]
10044324:	b25b      	sxtb	r3, r3
10044326:	2b0b      	cmp	r3, #11
10044328:	d000      	beq.n	1004432c <MP3_Event_Handler+0x1a4>
1004432a:	e0b4      	b.n	10044496 <MP3_Event_Handler+0x30e>
		char text[30];
		sprintf(text, "Play event: %d, %d", event.data>>8, (event.data&0xFF));
1004432c:	1d3b      	adds	r3, r7, #4
1004432e:	885b      	ldrh	r3, [r3, #2]
10044330:	0a1b      	lsrs	r3, r3, #8
10044332:	b29b      	uxth	r3, r3
10044334:	001c      	movs	r4, r3
10044336:	1d3b      	adds	r3, r7, #4
10044338:	885b      	ldrh	r3, [r3, #2]
1004433a:	001a      	movs	r2, r3
1004433c:	23ff      	movs	r3, #255	@ 0xff
1004433e:	4013      	ands	r3, r2
10044340:	4931      	ldr	r1, [pc, #196]	@ (10044408 <MP3_Event_Handler+0x280>)
10044342:	2544      	movs	r5, #68	@ 0x44
10044344:	1978      	adds	r0, r7, r5
10044346:	0022      	movs	r2, r4
10044348:	f021 ff8e 	bl	10066268 <siprintf>
		discountprintf(text);
1004434c:	197b      	adds	r3, r7, r5
1004434e:	0018      	movs	r0, r3
10044350:	f7fe fcee 	bl	10042d30 <discountprintf>
		Scheduler_Event_Post(event);
10044354:	1d3b      	adds	r3, r7, #4
10044356:	6818      	ldr	r0, [r3, #0]
10044358:	f000 fce2 	bl	10044d20 <Scheduler_Event_Post>
		if(event.data == 0){//0 is not a valid folder or track number
1004435c:	1d3b      	adds	r3, r7, #4
1004435e:	885b      	ldrh	r3, [r3, #2]
10044360:	2b00      	cmp	r3, #0
10044362:	d10b      	bne.n	1004437c <MP3_Event_Handler+0x1f4>
			DC = 0;// immediately cause a timeout to stop the speaker
10044364:	4b29      	ldr	r3, [pc, #164]	@ (1004440c <MP3_Event_Handler+0x284>)
10044366:	2200      	movs	r2, #0
10044368:	701a      	strb	r2, [r3, #0]
			{
			char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
1004436a:	2140      	movs	r1, #64	@ 0x40
1004436c:	187b      	adds	r3, r7, r1
1004436e:	220e      	movs	r2, #14
10044370:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10044372:	187b      	adds	r3, r7, r1
10044374:	0018      	movs	r0, r3
10044376:	f7ff fca5 	bl	10043cc4 <MP3_SendData>
1004437a:	e08c      	b.n	10044496 <MP3_Event_Handler+0x30e>
			}
//			char send[4] = {0x0A, 0x00, 0x00, 0x00};//enter low power mode
//			MP3_SendData(send);
		} else if(event.data>>8 != 0 && (event.data>>8) <= numfolders &&  (event.data&0xFF)!= 0 && (event.data&0xFF) <= folders[(event.data>>8)-1]){
1004437c:	1d3b      	adds	r3, r7, #4
1004437e:	885b      	ldrh	r3, [r3, #2]
10044380:	0a1b      	lsrs	r3, r3, #8
10044382:	b29b      	uxth	r3, r3
10044384:	2b00      	cmp	r3, #0
10044386:	d100      	bne.n	1004438a <MP3_Event_Handler+0x202>
10044388:	e085      	b.n	10044496 <MP3_Event_Handler+0x30e>
1004438a:	1d3b      	adds	r3, r7, #4
1004438c:	885b      	ldrh	r3, [r3, #2]
1004438e:	0a1b      	lsrs	r3, r3, #8
10044390:	b29b      	uxth	r3, r3
10044392:	4a18      	ldr	r2, [pc, #96]	@ (100443f4 <MP3_Event_Handler+0x26c>)
10044394:	7812      	ldrb	r2, [r2, #0]
10044396:	4293      	cmp	r3, r2
10044398:	d900      	bls.n	1004439c <MP3_Event_Handler+0x214>
1004439a:	e07c      	b.n	10044496 <MP3_Event_Handler+0x30e>
1004439c:	1d3b      	adds	r3, r7, #4
1004439e:	885b      	ldrh	r3, [r3, #2]
100443a0:	001a      	movs	r2, r3
100443a2:	23ff      	movs	r3, #255	@ 0xff
100443a4:	4013      	ands	r3, r2
100443a6:	d100      	bne.n	100443aa <MP3_Event_Handler+0x222>
100443a8:	e075      	b.n	10044496 <MP3_Event_Handler+0x30e>
100443aa:	1d3b      	adds	r3, r7, #4
100443ac:	885b      	ldrh	r3, [r3, #2]
100443ae:	001a      	movs	r2, r3
100443b0:	23ff      	movs	r3, #255	@ 0xff
100443b2:	401a      	ands	r2, r3
100443b4:	4b11      	ldr	r3, [pc, #68]	@ (100443fc <MP3_Event_Handler+0x274>)
100443b6:	6819      	ldr	r1, [r3, #0]
100443b8:	1d3b      	adds	r3, r7, #4
100443ba:	885b      	ldrh	r3, [r3, #2]
100443bc:	0a1b      	lsrs	r3, r3, #8
100443be:	b29b      	uxth	r3, r3
100443c0:	3b01      	subs	r3, #1
100443c2:	18cb      	adds	r3, r1, r3
100443c4:	781b      	ldrb	r3, [r3, #0]
100443c6:	429a      	cmp	r2, r3
100443c8:	dc65      	bgt.n	10044496 <MP3_Event_Handler+0x30e>
			folder = event.data>>8;
100443ca:	1d3b      	adds	r3, r7, #4
100443cc:	885b      	ldrh	r3, [r3, #2]
100443ce:	0a1b      	lsrs	r3, r3, #8
100443d0:	b29b      	uxth	r3, r3
100443d2:	b2da      	uxtb	r2, r3
100443d4:	4b0e      	ldr	r3, [pc, #56]	@ (10044410 <MP3_Event_Handler+0x288>)
100443d6:	701a      	strb	r2, [r3, #0]
			track = event.data&0xFF;
100443d8:	1d3b      	adds	r3, r7, #4
100443da:	885b      	ldrh	r3, [r3, #2]
100443dc:	b2da      	uxtb	r2, r3
100443de:	4b0d      	ldr	r3, [pc, #52]	@ (10044414 <MP3_Event_Handler+0x28c>)
100443e0:	701a      	strb	r2, [r3, #0]
			firsttrack = 1;
100443e2:	4b0d      	ldr	r3, [pc, #52]	@ (10044418 <MP3_Event_Handler+0x290>)
100443e4:	2201      	movs	r2, #1
100443e6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < folder-1; i ++){
100443e8:	2300      	movs	r3, #0
100443ea:	2284      	movs	r2, #132	@ 0x84
100443ec:	18ba      	adds	r2, r7, r2
100443ee:	6013      	str	r3, [r2, #0]
100443f0:	e026      	b.n	10044440 <MP3_Event_Handler+0x2b8>
100443f2:	46c0      	nop			@ (mov r8, r8)
100443f4:	20001c04 	.word	0x20001c04
100443f8:	20001bf8 	.word	0x20001bf8
100443fc:	20001c00 	.word	0x20001c00
10044400:	20001bf4 	.word	0x20001bf4
10044404:	20001be8 	.word	0x20001be8
10044408:	100675f4 	.word	0x100675f4
1004440c:	20001be9 	.word	0x20001be9
10044410:	20001bfd 	.word	0x20001bfd
10044414:	20001bfc 	.word	0x20001bfc
10044418:	20001bfe 	.word	0x20001bfe
				firsttrack+= folders[i];
1004441c:	4b73      	ldr	r3, [pc, #460]	@ (100445ec <MP3_Event_Handler+0x464>)
1004441e:	681a      	ldr	r2, [r3, #0]
10044420:	2184      	movs	r1, #132	@ 0x84
10044422:	187b      	adds	r3, r7, r1
10044424:	681b      	ldr	r3, [r3, #0]
10044426:	18d3      	adds	r3, r2, r3
10044428:	781a      	ldrb	r2, [r3, #0]
1004442a:	4b71      	ldr	r3, [pc, #452]	@ (100445f0 <MP3_Event_Handler+0x468>)
1004442c:	781b      	ldrb	r3, [r3, #0]
1004442e:	18d3      	adds	r3, r2, r3
10044430:	b2da      	uxtb	r2, r3
10044432:	4b6f      	ldr	r3, [pc, #444]	@ (100445f0 <MP3_Event_Handler+0x468>)
10044434:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < folder-1; i ++){
10044436:	187b      	adds	r3, r7, r1
10044438:	681b      	ldr	r3, [r3, #0]
1004443a:	3301      	adds	r3, #1
1004443c:	187a      	adds	r2, r7, r1
1004443e:	6013      	str	r3, [r2, #0]
10044440:	4b6c      	ldr	r3, [pc, #432]	@ (100445f4 <MP3_Event_Handler+0x46c>)
10044442:	781b      	ldrb	r3, [r3, #0]
10044444:	3b01      	subs	r3, #1
10044446:	2284      	movs	r2, #132	@ 0x84
10044448:	18ba      	adds	r2, r7, r2
1004444a:	6812      	ldr	r2, [r2, #0]
1004444c:	429a      	cmp	r2, r3
1004444e:	dbe5      	blt.n	1004441c <MP3_Event_Handler+0x294>
			}
			{
			char send2[4] = {0x03, 0x00, 0x00, firsttrack+track-1};
10044450:	213c      	movs	r1, #60	@ 0x3c
10044452:	187b      	adds	r3, r7, r1
10044454:	2203      	movs	r2, #3
10044456:	701a      	strb	r2, [r3, #0]
10044458:	187b      	adds	r3, r7, r1
1004445a:	2200      	movs	r2, #0
1004445c:	705a      	strb	r2, [r3, #1]
1004445e:	187b      	adds	r3, r7, r1
10044460:	2200      	movs	r2, #0
10044462:	709a      	strb	r2, [r3, #2]
10044464:	4b62      	ldr	r3, [pc, #392]	@ (100445f0 <MP3_Event_Handler+0x468>)
10044466:	781a      	ldrb	r2, [r3, #0]
10044468:	4b63      	ldr	r3, [pc, #396]	@ (100445f8 <MP3_Event_Handler+0x470>)
1004446a:	781b      	ldrb	r3, [r3, #0]
1004446c:	18d3      	adds	r3, r2, r3
1004446e:	b2db      	uxtb	r3, r3
10044470:	3b01      	subs	r3, #1
10044472:	b2da      	uxtb	r2, r3
10044474:	187b      	adds	r3, r7, r1
10044476:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send2);
10044478:	187b      	adds	r3, r7, r1
1004447a:	0018      	movs	r0, r3
1004447c:	f7ff fc22 	bl	10043cc4 <MP3_SendData>
			HAL_Delay(100);
10044480:	2064      	movs	r0, #100	@ 0x64
10044482:	f001 ff97 	bl	100463b4 <HAL_Delay>
			}
			{
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
10044486:	2138      	movs	r1, #56	@ 0x38
10044488:	187b      	adds	r3, r7, r1
1004448a:	220d      	movs	r2, #13
1004448c:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
1004448e:	187b      	adds	r3, r7, r1
10044490:	0018      	movs	r0, r3
10044492:	f7ff fc17 	bl	10043cc4 <MP3_SendData>
			}
		}


	}if(event.status == EVENT_SETTINGS){
10044496:	1d3b      	adds	r3, r7, #4
10044498:	781b      	ldrb	r3, [r3, #0]
1004449a:	b25b      	sxtb	r3, r3
1004449c:	2b0a      	cmp	r3, #10
1004449e:	d140      	bne.n	10044522 <MP3_Event_Handler+0x39a>
		DC = FLASH_GetDutyCycle();
100444a0:	f7fe fe16 	bl	100430d0 <FLASH_GetDutyCycle>
100444a4:	0003      	movs	r3, r0
100444a6:	001a      	movs	r2, r3
100444a8:	4b54      	ldr	r3, [pc, #336]	@ (100445fc <MP3_Event_Handler+0x474>)
100444aa:	701a      	strb	r2, [r3, #0]
		volume = FLASH_GetVolume();
100444ac:	f7fe fdfa 	bl	100430a4 <FLASH_GetVolume>
100444b0:	0003      	movs	r3, r0
100444b2:	001a      	movs	r2, r3
100444b4:	4b52      	ldr	r3, [pc, #328]	@ (10044600 <MP3_Event_Handler+0x478>)
100444b6:	701a      	strb	r2, [r3, #0]
		char text[30];
		sprintf(text, "Settings event: %d, %d", event.data>>8, (event.data&0xFF));
100444b8:	1d3b      	adds	r3, r7, #4
100444ba:	885b      	ldrh	r3, [r3, #2]
100444bc:	0a1b      	lsrs	r3, r3, #8
100444be:	b29b      	uxth	r3, r3
100444c0:	001c      	movs	r4, r3
100444c2:	1d3b      	adds	r3, r7, #4
100444c4:	885b      	ldrh	r3, [r3, #2]
100444c6:	001a      	movs	r2, r3
100444c8:	23ff      	movs	r3, #255	@ 0xff
100444ca:	4013      	ands	r3, r2
100444cc:	494d      	ldr	r1, [pc, #308]	@ (10044604 <MP3_Event_Handler+0x47c>)
100444ce:	2518      	movs	r5, #24
100444d0:	1978      	adds	r0, r7, r5
100444d2:	0022      	movs	r2, r4
100444d4:	f021 fec8 	bl	10066268 <siprintf>
		discountprintf(text);
100444d8:	197b      	adds	r3, r7, r5
100444da:	0018      	movs	r0, r3
100444dc:	f7fe fc28 	bl	10042d30 <discountprintf>
		if(!event.data){//volume == FLASH_GetVolume()
100444e0:	1d3b      	adds	r3, r7, #4
100444e2:	885b      	ldrh	r3, [r3, #2]
100444e4:	2b00      	cmp	r3, #0
100444e6:	d11c      	bne.n	10044522 <MP3_Event_Handler+0x39a>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
100444e8:	2414      	movs	r4, #20
100444ea:	193b      	adds	r3, r7, r4
100444ec:	2206      	movs	r2, #6
100444ee:	701a      	strb	r2, [r3, #0]
100444f0:	193b      	adds	r3, r7, r4
100444f2:	2200      	movs	r2, #0
100444f4:	705a      	strb	r2, [r3, #1]
100444f6:	193b      	adds	r3, r7, r4
100444f8:	2200      	movs	r2, #0
100444fa:	709a      	strb	r2, [r3, #2]
100444fc:	4b40      	ldr	r3, [pc, #256]	@ (10044600 <MP3_Event_Handler+0x478>)
100444fe:	781b      	ldrb	r3, [r3, #0]
10044500:	001a      	movs	r2, r3
10044502:	0013      	movs	r3, r2
10044504:	011b      	lsls	r3, r3, #4
10044506:	1a9b      	subs	r3, r3, r2
10044508:	005b      	lsls	r3, r3, #1
1004450a:	2164      	movs	r1, #100	@ 0x64
1004450c:	0018      	movs	r0, r3
1004450e:	f7fb ff21 	bl	10040354 <__divsi3>
10044512:	0003      	movs	r3, r0
10044514:	b2da      	uxtb	r2, r3
10044516:	193b      	adds	r3, r7, r4
10044518:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
1004451a:	193b      	adds	r3, r7, r4
1004451c:	0018      	movs	r0, r3
1004451e:	f7ff fbd1 	bl	10043cc4 <MP3_SendData>
		}
	}if (event.status == EVENT_LPUART){
10044522:	1d3b      	adds	r3, r7, #4
10044524:	781b      	ldrb	r3, [r3, #0]
10044526:	b25b      	sxtb	r3, r3
10044528:	2b08      	cmp	r3, #8
1004452a:	d159      	bne.n	100445e0 <MP3_Event_Handler+0x458>
		//don't do anything for now, may parse errors and moving to next track later
		USART_WriteTx(event.data);
1004452c:	1d3b      	adds	r3, r7, #4
1004452e:	885b      	ldrh	r3, [r3, #2]
10044530:	b2db      	uxtb	r3, r3
10044532:	0018      	movs	r0, r3
10044534:	f000 ff36 	bl	100453a4 <USART_WriteTx>
		char rx = event.data;
10044538:	1d3b      	adds	r3, r7, #4
1004453a:	885a      	ldrh	r2, [r3, #2]
1004453c:	217f      	movs	r1, #127	@ 0x7f
1004453e:	187b      	adds	r3, r7, r1
10044540:	701a      	strb	r2, [r3, #0]
		if(rx != UARTFAILED){
10044542:	000a      	movs	r2, r1
10044544:	18bb      	adds	r3, r7, r2
10044546:	781b      	ldrb	r3, [r3, #0]
10044548:	2b25      	cmp	r3, #37	@ 0x25
1004454a:	d049      	beq.n	100445e0 <MP3_Event_Handler+0x458>
			if(parsePacket(rx)){
1004454c:	18bb      	adds	r3, r7, r2
1004454e:	781b      	ldrb	r3, [r3, #0]
10044550:	0018      	movs	r0, r3
10044552:	f7ff fc13 	bl	10043d7c <parsePacket>
10044556:	1e03      	subs	r3, r0, #0
10044558:	d042      	beq.n	100445e0 <MP3_Event_Handler+0x458>
				if(Packet.command == 0x3D){
1004455a:	4b2b      	ldr	r3, [pc, #172]	@ (10044608 <MP3_Event_Handler+0x480>)
1004455c:	781b      	ldrb	r3, [r3, #0]
1004455e:	2b3d      	cmp	r3, #61	@ 0x3d
10044560:	d13e      	bne.n	100445e0 <MP3_Event_Handler+0x458>
					if(Packet.Param2 != lastplayed){//prevent the mp3 play from sending double
10044562:	4b29      	ldr	r3, [pc, #164]	@ (10044608 <MP3_Event_Handler+0x480>)
10044564:	78da      	ldrb	r2, [r3, #3]
10044566:	4b29      	ldr	r3, [pc, #164]	@ (1004460c <MP3_Event_Handler+0x484>)
10044568:	781b      	ldrb	r3, [r3, #0]
1004456a:	429a      	cmp	r2, r3
1004456c:	d038      	beq.n	100445e0 <MP3_Event_Handler+0x458>
						lastplayed = Packet.Param2;
1004456e:	4b26      	ldr	r3, [pc, #152]	@ (10044608 <MP3_Event_Handler+0x480>)
10044570:	78da      	ldrb	r2, [r3, #3]
10044572:	4b26      	ldr	r3, [pc, #152]	@ (1004460c <MP3_Event_Handler+0x484>)
10044574:	701a      	strb	r2, [r3, #0]
						track++;
10044576:	4b20      	ldr	r3, [pc, #128]	@ (100445f8 <MP3_Event_Handler+0x470>)
10044578:	781b      	ldrb	r3, [r3, #0]
1004457a:	3301      	adds	r3, #1
1004457c:	b2da      	uxtb	r2, r3
1004457e:	4b1e      	ldr	r3, [pc, #120]	@ (100445f8 <MP3_Event_Handler+0x470>)
10044580:	701a      	strb	r2, [r3, #0]
	//							char send[4] = {0x0D, 0x00, 0x00, 0x00};
	//							MP3_SendData(send);
						if(track > folders[folder-1]){
10044582:	4b1a      	ldr	r3, [pc, #104]	@ (100445ec <MP3_Event_Handler+0x464>)
10044584:	681a      	ldr	r2, [r3, #0]
10044586:	4b1b      	ldr	r3, [pc, #108]	@ (100445f4 <MP3_Event_Handler+0x46c>)
10044588:	781b      	ldrb	r3, [r3, #0]
1004458a:	3b01      	subs	r3, #1
1004458c:	18d3      	adds	r3, r2, r3
1004458e:	781a      	ldrb	r2, [r3, #0]
10044590:	4b19      	ldr	r3, [pc, #100]	@ (100445f8 <MP3_Event_Handler+0x470>)
10044592:	781b      	ldrb	r3, [r3, #0]
10044594:	429a      	cmp	r2, r3
10044596:	d218      	bcs.n	100445ca <MP3_Event_Handler+0x442>
							char send2[4] = {0x03, 0x00, 0x00, firsttrack};
10044598:	2110      	movs	r1, #16
1004459a:	187b      	adds	r3, r7, r1
1004459c:	2203      	movs	r2, #3
1004459e:	701a      	strb	r2, [r3, #0]
100445a0:	187b      	adds	r3, r7, r1
100445a2:	2200      	movs	r2, #0
100445a4:	705a      	strb	r2, [r3, #1]
100445a6:	187b      	adds	r3, r7, r1
100445a8:	2200      	movs	r2, #0
100445aa:	709a      	strb	r2, [r3, #2]
100445ac:	4b10      	ldr	r3, [pc, #64]	@ (100445f0 <MP3_Event_Handler+0x468>)
100445ae:	781a      	ldrb	r2, [r3, #0]
100445b0:	187b      	adds	r3, r7, r1
100445b2:	70da      	strb	r2, [r3, #3]
							MP3_SendData(send2);
100445b4:	187b      	adds	r3, r7, r1
100445b6:	0018      	movs	r0, r3
100445b8:	f7ff fb84 	bl	10043cc4 <MP3_SendData>
							BSP_LED_On(LED_RED);
100445bc:	2002      	movs	r0, #2
100445be:	f001 fe25 	bl	1004620c <BSP_LED_On>
							track = 1;
100445c2:	4b0d      	ldr	r3, [pc, #52]	@ (100445f8 <MP3_Event_Handler+0x470>)
100445c4:	2201      	movs	r2, #1
100445c6:	701a      	strb	r2, [r3, #0]
100445c8:	e00a      	b.n	100445e0 <MP3_Event_Handler+0x458>
						} else {

							char send[4] = {0x01, 0x00, 0x00, 0x00};
100445ca:	210c      	movs	r1, #12
100445cc:	187b      	adds	r3, r7, r1
100445ce:	2201      	movs	r2, #1
100445d0:	601a      	str	r2, [r3, #0]
							MP3_SendData(send);
100445d2:	187b      	adds	r3, r7, r1
100445d4:	0018      	movs	r0, r3
100445d6:	f7ff fb75 	bl	10043cc4 <MP3_SendData>
							BSP_LED_Off(LED_RED);
100445da:	2002      	movs	r0, #2
100445dc:	f001 fe34 	bl	10046248 <BSP_LED_Off>
				}
			}
		}

	}
    return 1;
100445e0:	2301      	movs	r3, #1
}
100445e2:	0018      	movs	r0, r3
100445e4:	46bd      	mov	sp, r7
100445e6:	b024      	add	sp, #144	@ 0x90
100445e8:	bdb0      	pop	{r4, r5, r7, pc}
100445ea:	46c0      	nop			@ (mov r8, r8)
100445ec:	20001c00 	.word	0x20001c00
100445f0:	20001bfe 	.word	0x20001bfe
100445f4:	20001bfd 	.word	0x20001bfd
100445f8:	20001bfc 	.word	0x20001bfc
100445fc:	20001be9 	.word	0x20001be9
10044600:	20001bea 	.word	0x20001bea
10044604:	10067608 	.word	0x10067608
10044608:	20001bf8 	.word	0x20001bf8
1004460c:	20001bff 	.word	0x20001bff

10044610 <MP3_GetCurrentFile>:
 * @Function: MP3_GetCurrentFile
 * @Brief: gets the current track being played on the mp3 player
 * @param:
 * @return: two bytes, the upper 8bits contain the folder, the lower 8 bits hold the tracck number in the folder
 */
uint16_t MP3_GetCurrentFile(){
10044610:	b580      	push	{r7, lr}
10044612:	af00      	add	r7, sp, #0
	return ((uint16_t)folder<<8)+track;
10044614:	4b05      	ldr	r3, [pc, #20]	@ (1004462c <MP3_GetCurrentFile+0x1c>)
10044616:	781b      	ldrb	r3, [r3, #0]
10044618:	021b      	lsls	r3, r3, #8
1004461a:	b29b      	uxth	r3, r3
1004461c:	4a04      	ldr	r2, [pc, #16]	@ (10044630 <MP3_GetCurrentFile+0x20>)
1004461e:	7812      	ldrb	r2, [r2, #0]
10044620:	189b      	adds	r3, r3, r2
10044622:	b29b      	uxth	r3, r3
}
10044624:	0018      	movs	r0, r3
10044626:	46bd      	mov	sp, r7
10044628:	bd80      	pop	{r7, pc}
1004462a:	46c0      	nop			@ (mov r8, r8)
1004462c:	20001bfd 	.word	0x20001bfd
10044630:	20001bfc 	.word	0x20001bfc

10044634 <OledInit>:
#include <OledDriver.h>
#include <Oled.h>
#include <Ascii.h>

void OledInit(void)
{
10044634:	b580      	push	{r7, lr}
10044636:	af00      	add	r7, sp, #0
    // First initialize the STM32 to be able to talk over I2C to the OLED.
    OledHostInit();
10044638:	f000 f96f 	bl	1004491a <OledHostInit>
    HAL_Delay(10);
1004463c:	200a      	movs	r0, #10
1004463e:	f001 feb9 	bl	100463b4 <HAL_Delay>

    // Now send initialization commands to the OLED.
    OledDriverInitDisplay();
10044642:	f000 f975 	bl	10044930 <OledDriverInitDisplay>
    HAL_Delay(200);//allow time for OLED screen to initialize
10044646:	20c8      	movs	r0, #200	@ 0xc8
10044648:	f001 feb4 	bl	100463b4 <HAL_Delay>

    // Clear the frame buffer by filling it with black pixels.
    OledClear(OLED_COLOR_BLACK);
1004464c:	2000      	movs	r0, #0
1004464e:	f000 f927 	bl	100448a0 <OledClear>

    // Finally update the screen, triggering a write of all black pixels to the screen.
    OledUpdate();
10044652:	f000 f95b 	bl	1004490c <OledUpdate>
}
10044656:	46c0      	nop			@ (mov r8, r8)
10044658:	46bd      	mov	sp, r7
1004465a:	bd80      	pop	{r7, pc}

1004465c <OledDrawChar>:
    // Now return the desired bit.
    return (rgbOledBmp[index] >> shift) & 0x01;
}

uint8_t OledDrawChar(int x, int y, char c)
{
1004465c:	b580      	push	{r7, lr}
1004465e:	b092      	sub	sp, #72	@ 0x48
10044660:	af00      	add	r7, sp, #0
10044662:	60f8      	str	r0, [r7, #12]
10044664:	60b9      	str	r1, [r7, #8]
10044666:	1dfb      	adds	r3, r7, #7
10044668:	701a      	strb	r2, [r3, #0]
    if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
1004466a:	68fb      	ldr	r3, [r7, #12]
1004466c:	2b7a      	cmp	r3, #122	@ 0x7a
1004466e:	dd00      	ble.n	10044672 <OledDrawChar+0x16>
10044670:	e0c0      	b.n	100447f4 <OledDrawChar+0x198>
10044672:	68bb      	ldr	r3, [r7, #8]
10044674:	2b38      	cmp	r3, #56	@ 0x38
10044676:	dd00      	ble.n	1004467a <OledDrawChar+0x1e>
10044678:	e0bc      	b.n	100447f4 <OledDrawChar+0x198>
        // We need to convert our signed char into an unsigned value to index into the ascii[] array.
        int charIndex = (int) (unsigned char) c;
1004467a:	1dfb      	adds	r3, r7, #7
1004467c:	781b      	ldrb	r3, [r3, #0]
1004467e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Now first determine the columns and rows of the OLED bits that need to be modified
        int rowMin, rowMax, colMin, colMax;
        rowMin = y / ASCII_FONT_HEIGHT;
10044680:	68bb      	ldr	r3, [r7, #8]
10044682:	2b00      	cmp	r3, #0
10044684:	da00      	bge.n	10044688 <OledDrawChar+0x2c>
10044686:	3307      	adds	r3, #7
10044688:	10db      	asrs	r3, r3, #3
1004468a:	63bb      	str	r3, [r7, #56]	@ 0x38
        int rowY = y % ASCII_FONT_HEIGHT;
1004468c:	68bb      	ldr	r3, [r7, #8]
1004468e:	4a5c      	ldr	r2, [pc, #368]	@ (10044800 <OledDrawChar+0x1a4>)
10044690:	4013      	ands	r3, r2
10044692:	d504      	bpl.n	1004469e <OledDrawChar+0x42>
10044694:	3b01      	subs	r3, #1
10044696:	2208      	movs	r2, #8
10044698:	4252      	negs	r2, r2
1004469a:	4313      	orrs	r3, r2
1004469c:	3301      	adds	r3, #1
1004469e:	637b      	str	r3, [r7, #52]	@ 0x34
        rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
100446a0:	68bb      	ldr	r3, [r7, #8]
100446a2:	3308      	adds	r3, #8
100446a4:	2b00      	cmp	r3, #0
100446a6:	da00      	bge.n	100446aa <OledDrawChar+0x4e>
100446a8:	3307      	adds	r3, #7
100446aa:	10db      	asrs	r3, r3, #3
100446ac:	633b      	str	r3, [r7, #48]	@ 0x30
        colMin = x;
100446ae:	68fb      	ldr	r3, [r7, #12]
100446b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        colMax = x + ASCII_FONT_WIDTH;
100446b2:	68fb      	ldr	r3, [r7, #12]
100446b4:	3306      	adds	r3, #6
100446b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        {
            // Generate a positive mask for where in the column the new symbol will be drawn.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
100446b8:	22ff      	movs	r2, #255	@ 0xff
100446ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100446bc:	409a      	lsls	r2, r3
100446be:	0013      	movs	r3, r2
100446c0:	627b      	str	r3, [r7, #36]	@ 0x24
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
100446c2:	2300      	movs	r3, #0
100446c4:	647b      	str	r3, [r7, #68]	@ 0x44
100446c6:	e03a      	b.n	1004473e <OledDrawChar+0xe2>
                int oledCol = colMin + j;
100446c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100446ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100446cc:	18d3      	adds	r3, r2, r3
100446ce:	617b      	str	r3, [r7, #20]
                uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
100446d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100446d2:	01da      	lsls	r2, r3, #7
100446d4:	697b      	ldr	r3, [r7, #20]
100446d6:	18d3      	adds	r3, r2, r3
100446d8:	4a4a      	ldr	r2, [pc, #296]	@ (10044804 <OledDrawChar+0x1a8>)
100446da:	5cd3      	ldrb	r3, [r2, r3]
100446dc:	b25b      	sxtb	r3, r3
100446de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100446e0:	b252      	sxtb	r2, r2
100446e2:	43d2      	mvns	r2, r2
100446e4:	b252      	sxtb	r2, r2
100446e6:	4013      	ands	r3, r2
100446e8:	b25a      	sxtb	r2, r3
100446ea:	2013      	movs	r0, #19
100446ec:	183b      	adds	r3, r7, r0
100446ee:	701a      	strb	r2, [r3, #0]
                // Make sure we always grab from the top part of the character.
                newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
100446f0:	4945      	ldr	r1, [pc, #276]	@ (10044808 <OledDrawChar+0x1ac>)
100446f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100446f4:	0013      	movs	r3, r2
100446f6:	005b      	lsls	r3, r3, #1
100446f8:	189b      	adds	r3, r3, r2
100446fa:	005b      	lsls	r3, r3, #1
100446fc:	18ca      	adds	r2, r1, r3
100446fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044700:	18d3      	adds	r3, r2, r3
10044702:	781b      	ldrb	r3, [r3, #0]
10044704:	0019      	movs	r1, r3
10044706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10044708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004470a:	411a      	asrs	r2, r3
1004470c:	0013      	movs	r3, r2
1004470e:	400b      	ands	r3, r1
10044710:	001a      	movs	r2, r3
10044712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044714:	409a      	lsls	r2, r3
10044716:	0013      	movs	r3, r2
10044718:	b25a      	sxtb	r2, r3
1004471a:	183b      	adds	r3, r7, r0
1004471c:	781b      	ldrb	r3, [r3, #0]
1004471e:	b25b      	sxtb	r3, r3
10044720:	4313      	orrs	r3, r2
10044722:	b25a      	sxtb	r2, r3
10044724:	183b      	adds	r3, r7, r0
10044726:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
10044728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004472a:	01da      	lsls	r2, r3, #7
1004472c:	697b      	ldr	r3, [r7, #20]
1004472e:	18d3      	adds	r3, r2, r3
10044730:	4a34      	ldr	r2, [pc, #208]	@ (10044804 <OledDrawChar+0x1a8>)
10044732:	1839      	adds	r1, r7, r0
10044734:	7809      	ldrb	r1, [r1, #0]
10044736:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10044738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004473a:	3301      	adds	r3, #1
1004473c:	647b      	str	r3, [r7, #68]	@ 0x44
1004473e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044742:	1ad3      	subs	r3, r2, r3
10044744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10044746:	429a      	cmp	r2, r3
10044748:	dbbe      	blt.n	100446c8 <OledDrawChar+0x6c>
            }
        }
        if (rowMax > rowMin) {
1004474a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004474c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004474e:	429a      	cmp	r2, r3
10044750:	dd50      	ble.n	100447f4 <OledDrawChar+0x198>
            // Generate a positive mask for where in the column the new symbol will be drawn.
            // Since we need the lower portion of the symbol, we recalculate its height.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
10044752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044754:	2208      	movs	r2, #8
10044756:	1ad3      	subs	r3, r2, r3
10044758:	22ff      	movs	r2, #255	@ 0xff
1004475a:	411a      	asrs	r2, r3
1004475c:	0013      	movs	r3, r2
1004475e:	623b      	str	r3, [r7, #32]
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
10044760:	2300      	movs	r3, #0
10044762:	643b      	str	r3, [r7, #64]	@ 0x40
10044764:	e040      	b.n	100447e8 <OledDrawChar+0x18c>
                int oledCol = colMin + j;
10044766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10044768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004476a:	18d3      	adds	r3, r2, r3
1004476c:	61fb      	str	r3, [r7, #28]
                uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] & ~colMask;
1004476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044770:	01db      	lsls	r3, r3, #7
10044772:	1d5a      	adds	r2, r3, #5
10044774:	69fb      	ldr	r3, [r7, #28]
10044776:	1ad3      	subs	r3, r2, r3
10044778:	4a22      	ldr	r2, [pc, #136]	@ (10044804 <OledDrawChar+0x1a8>)
1004477a:	5cd3      	ldrb	r3, [r2, r3]
1004477c:	b25b      	sxtb	r3, r3
1004477e:	6a3a      	ldr	r2, [r7, #32]
10044780:	b252      	sxtb	r2, r2
10044782:	43d2      	mvns	r2, r2
10044784:	b252      	sxtb	r2, r2
10044786:	4013      	ands	r3, r2
10044788:	b25a      	sxtb	r2, r3
1004478a:	201b      	movs	r0, #27
1004478c:	183b      	adds	r3, r7, r0
1004478e:	701a      	strb	r2, [r3, #0]
                // Make sure we grab the proper part of the character from the font.
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10044790:	491d      	ldr	r1, [pc, #116]	@ (10044808 <OledDrawChar+0x1ac>)
10044792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10044794:	0013      	movs	r3, r2
10044796:	005b      	lsls	r3, r3, #1
10044798:	189b      	adds	r3, r3, r2
1004479a:	005b      	lsls	r3, r3, #1
1004479c:	18ca      	adds	r2, r1, r3
1004479e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100447a0:	18d3      	adds	r3, r2, r3
100447a2:	781b      	ldrb	r3, [r3, #0]
100447a4:	0019      	movs	r1, r3
100447a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447a8:	2208      	movs	r2, #8
100447aa:	1ad3      	subs	r3, r2, r3
100447ac:	6a3a      	ldr	r2, [r7, #32]
100447ae:	409a      	lsls	r2, r3
100447b0:	0013      	movs	r3, r2
100447b2:	400b      	ands	r3, r1
100447b4:	001a      	movs	r2, r3
                        (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
100447b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447b8:	2108      	movs	r1, #8
100447ba:	1acb      	subs	r3, r1, r3
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
100447bc:	411a      	asrs	r2, r3
100447be:	0013      	movs	r3, r2
100447c0:	b25a      	sxtb	r2, r3
100447c2:	183b      	adds	r3, r7, r0
100447c4:	781b      	ldrb	r3, [r3, #0]
100447c6:	b25b      	sxtb	r3, r3
100447c8:	4313      	orrs	r3, r2
100447ca:	b25a      	sxtb	r2, r3
100447cc:	183b      	adds	r3, r7, r0
100447ce:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] = newCharCol;
100447d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100447d2:	01db      	lsls	r3, r3, #7
100447d4:	1d5a      	adds	r2, r3, #5
100447d6:	69fb      	ldr	r3, [r7, #28]
100447d8:	1ad3      	subs	r3, r2, r3
100447da:	4a0a      	ldr	r2, [pc, #40]	@ (10044804 <OledDrawChar+0x1a8>)
100447dc:	1839      	adds	r1, r7, r0
100447de:	7809      	ldrb	r1, [r1, #0]
100447e0:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
100447e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100447e4:	3301      	adds	r3, #1
100447e6:	643b      	str	r3, [r7, #64]	@ 0x40
100447e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100447ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100447ec:	1ad3      	subs	r3, r2, r3
100447ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100447f0:	429a      	cmp	r2, r3
100447f2:	dbb8      	blt.n	10044766 <OledDrawChar+0x10a>
            }
        }
    }

    return FALSE;
100447f4:	2300      	movs	r3, #0
}
100447f6:	0018      	movs	r0, r3
100447f8:	46bd      	mov	sp, r7
100447fa:	b012      	add	sp, #72	@ 0x48
100447fc:	bd80      	pop	{r7, pc}
100447fe:	46c0      	nop			@ (mov r8, r8)
10044800:	80000007 	.word	0x80000007
10044804:	20001c0c 	.word	0x20001c0c
10044808:	10067688 	.word	0x10067688

1004480c <OledDrawString>:

void OledDrawString(const char *string)
{
1004480c:	b580      	push	{r7, lr}
1004480e:	b086      	sub	sp, #24
10044810:	af00      	add	r7, sp, #0
10044812:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
10044814:	687b      	ldr	r3, [r7, #4]
10044816:	2b00      	cmp	r3, #0
10044818:	d03c      	beq.n	10044894 <OledDrawString+0x88>
        return;
    }

    // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
    int line = 0;
1004481a:	2300      	movs	r3, #0
1004481c:	617b      	str	r3, [r7, #20]

    // Track the current character we're writing to the OLED. Valid values are
    // [0, OLED_CHARS_PER_LINE).
    int column = 0;
1004481e:	2300      	movs	r3, #0
10044820:	613b      	str	r3, [r7, #16]

    // Run through all characters. The maximum length can be the number of lines times the number
    // of characters per line + three newlines.
    int i;
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
10044822:	2300      	movs	r3, #0
10044824:	60fb      	str	r3, [r7, #12]
10044826:	e02b      	b.n	10044880 <OledDrawString+0x74>
        // Move the cursor to the next line if a newline character is encountered. This allows for
        // early line ending.
        if (string[i] == '\n') {
10044828:	68fb      	ldr	r3, [r7, #12]
1004482a:	687a      	ldr	r2, [r7, #4]
1004482c:	18d3      	adds	r3, r2, r3
1004482e:	781b      	ldrb	r3, [r3, #0]
10044830:	2b0a      	cmp	r3, #10
10044832:	d105      	bne.n	10044840 <OledDrawString+0x34>
            ++line;
10044834:	697b      	ldr	r3, [r7, #20]
10044836:	3301      	adds	r3, #1
10044838:	617b      	str	r3, [r7, #20]
            column = 0;
1004483a:	2300      	movs	r3, #0
1004483c:	613b      	str	r3, [r7, #16]
            continue;
1004483e:	e01c      	b.n	1004487a <OledDrawString+0x6e>
        } else {
            // Reset to the start of the next line if we've hit the character limit of this line
            // without seeing a newline.
            if (column == OLED_CHARS_PER_LINE) {
10044840:	693b      	ldr	r3, [r7, #16]
10044842:	2b15      	cmp	r3, #21
10044844:	d104      	bne.n	10044850 <OledDrawString+0x44>
                ++line;
10044846:	697b      	ldr	r3, [r7, #20]
10044848:	3301      	adds	r3, #1
1004484a:	617b      	str	r3, [r7, #20]
                column = 0;
1004484c:	2300      	movs	r3, #0
1004484e:	613b      	str	r3, [r7, #16]
            }

            // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
            // check is implicitly handled by the above if-statement that forces a newline after
            // encountering a full line of characters.
            if (line == OLED_NUM_LINES) {
10044850:	697b      	ldr	r3, [r7, #20]
10044852:	2b08      	cmp	r3, #8
10044854:	d020      	beq.n	10044898 <OledDrawString+0x8c>
                break;
            }

            // Finally at this point, we can write characters to the OLED.
            OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
10044856:	693a      	ldr	r2, [r7, #16]
10044858:	0013      	movs	r3, r2
1004485a:	005b      	lsls	r3, r3, #1
1004485c:	189b      	adds	r3, r3, r2
1004485e:	005b      	lsls	r3, r3, #1
10044860:	0018      	movs	r0, r3
10044862:	697b      	ldr	r3, [r7, #20]
10044864:	00d9      	lsls	r1, r3, #3
10044866:	68fb      	ldr	r3, [r7, #12]
10044868:	687a      	ldr	r2, [r7, #4]
1004486a:	18d3      	adds	r3, r2, r3
1004486c:	781b      	ldrb	r3, [r3, #0]
1004486e:	001a      	movs	r2, r3
10044870:	f7ff fef4 	bl	1004465c <OledDrawChar>
            ++column;
10044874:	693b      	ldr	r3, [r7, #16]
10044876:	3301      	adds	r3, #1
10044878:	613b      	str	r3, [r7, #16]
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
1004487a:	68fb      	ldr	r3, [r7, #12]
1004487c:	3301      	adds	r3, #1
1004487e:	60fb      	str	r3, [r7, #12]
10044880:	68fb      	ldr	r3, [r7, #12]
10044882:	687a      	ldr	r2, [r7, #4]
10044884:	18d3      	adds	r3, r2, r3
10044886:	781b      	ldrb	r3, [r3, #0]
10044888:	2b00      	cmp	r3, #0
1004488a:	d006      	beq.n	1004489a <OledDrawString+0x8e>
1004488c:	68fb      	ldr	r3, [r7, #12]
1004488e:	2baa      	cmp	r3, #170	@ 0xaa
10044890:	ddca      	ble.n	10044828 <OledDrawString+0x1c>
10044892:	e002      	b.n	1004489a <OledDrawString+0x8e>
        return;
10044894:	46c0      	nop			@ (mov r8, r8)
10044896:	e000      	b.n	1004489a <OledDrawString+0x8e>
                break;
10044898:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
1004489a:	46bd      	mov	sp, r7
1004489c:	b006      	add	sp, #24
1004489e:	bd80      	pop	{r7, pc}

100448a0 <OledClear>:

void OledClear(OledColor p)
{
100448a0:	b580      	push	{r7, lr}
100448a2:	b084      	sub	sp, #16
100448a4:	af00      	add	r7, sp, #0
100448a6:	0002      	movs	r2, r0
100448a8:	1dfb      	adds	r3, r7, #7
100448aa:	701a      	strb	r2, [r3, #0]
    int i;
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
100448ac:	2300      	movs	r3, #0
100448ae:	60fb      	str	r3, [r7, #12]
100448b0:	e011      	b.n	100448d6 <OledClear+0x36>
        if (p == OLED_COLOR_WHITE) {
100448b2:	1dfb      	adds	r3, r7, #7
100448b4:	781b      	ldrb	r3, [r3, #0]
100448b6:	2b01      	cmp	r3, #1
100448b8:	d105      	bne.n	100448c6 <OledClear+0x26>
            rgbOledBmp[i] = 0xFF;
100448ba:	4a0c      	ldr	r2, [pc, #48]	@ (100448ec <OledClear+0x4c>)
100448bc:	68fb      	ldr	r3, [r7, #12]
100448be:	18d3      	adds	r3, r2, r3
100448c0:	22ff      	movs	r2, #255	@ 0xff
100448c2:	701a      	strb	r2, [r3, #0]
100448c4:	e004      	b.n	100448d0 <OledClear+0x30>
        } else {
            rgbOledBmp[i] = 0;
100448c6:	4a09      	ldr	r2, [pc, #36]	@ (100448ec <OledClear+0x4c>)
100448c8:	68fb      	ldr	r3, [r7, #12]
100448ca:	18d3      	adds	r3, r2, r3
100448cc:	2200      	movs	r2, #0
100448ce:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
100448d0:	68fb      	ldr	r3, [r7, #12]
100448d2:	3301      	adds	r3, #1
100448d4:	60fb      	str	r3, [r7, #12]
100448d6:	68fa      	ldr	r2, [r7, #12]
100448d8:	2380      	movs	r3, #128	@ 0x80
100448da:	00db      	lsls	r3, r3, #3
100448dc:	429a      	cmp	r2, r3
100448de:	dbe8      	blt.n	100448b2 <OledClear+0x12>
        }
    }
}
100448e0:	46c0      	nop			@ (mov r8, r8)
100448e2:	46c0      	nop			@ (mov r8, r8)
100448e4:	46bd      	mov	sp, r7
100448e6:	b004      	add	sp, #16
100448e8:	bd80      	pop	{r7, pc}
100448ea:	46c0      	nop			@ (mov r8, r8)
100448ec:	20001c0c 	.word	0x20001c0c

100448f0 <OledOn>:
{
    OledDriverSetDisplayNormal();
}

void OledOn(void)
{
100448f0:	b580      	push	{r7, lr}
100448f2:	af00      	add	r7, sp, #0
    OledDriverInitDisplay();
100448f4:	f000 f81c 	bl	10044930 <OledDriverInitDisplay>
}
100448f8:	46c0      	nop			@ (mov r8, r8)
100448fa:	46bd      	mov	sp, r7
100448fc:	bd80      	pop	{r7, pc}

100448fe <OledOff>:

void OledOff(void)
{
100448fe:	b580      	push	{r7, lr}
10044900:	af00      	add	r7, sp, #0
    OledDriverDisableDisplay();
10044902:	f000 f872 	bl	100449ea <OledDriverDisableDisplay>
}
10044906:	46c0      	nop			@ (mov r8, r8)
10044908:	46bd      	mov	sp, r7
1004490a:	bd80      	pop	{r7, pc}

1004490c <OledUpdate>:

void OledUpdate(void)
{
1004490c:	b580      	push	{r7, lr}
1004490e:	af00      	add	r7, sp, #0
    OledDriverUpdateDisplay();
10044910:	f000 f876 	bl	10044a00 <OledDriverUpdateDisplay>
}
10044914:	46c0      	nop			@ (mov r8, r8)
10044916:	46bd      	mov	sp, r7
10044918:	bd80      	pop	{r7, pc}

1004491a <OledHostInit>:
/**
 * Initialize the STM32 to communicate with the OLED display through the SSD1306
 * display controller using an instance of I2C.
 */
void OledHostInit(void)
{
1004491a:	b580      	push	{r7, lr}
1004491c:	af00      	add	r7, sp, #0
    BOARD_Init(); // init board and printf functionality
1004491e:	f7fc f885 	bl	10040a2c <BOARD_Init>
    TIMERS_Init(); // init timer module for delay functions
10044922:	f000 fb41 	bl	10044fa8 <TIMERS_Init>
    I2C_Init();   // init I2C module
10044926:	f7ff f889 	bl	10043a3c <I2C_Init>
}
1004492a:	46c0      	nop			@ (mov r8, r8)
1004492c:	46bd      	mov	sp, r7
1004492e:	bd80      	pop	{r7, pc}

10044930 <OledDriverInitDisplay>:

/**
 * Initialize the OLED display and send init/config sequence
 */
void OledDriverInitDisplay(void)
{
10044930:	b580      	push	{r7, lr}
10044932:	af00      	add	r7, sp, #0
    // Turn off the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10044934:	22ae      	movs	r2, #174	@ 0xae
10044936:	2180      	movs	r1, #128	@ 0x80
10044938:	203c      	movs	r0, #60	@ 0x3c
1004493a:	f7ff f99b 	bl	10043c74 <I2C_WriteReg>
    DelayMs(10);
1004493e:	200a      	movs	r0, #10
10044940:	f000 f8a0 	bl	10044a84 <DelayMs>
//
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_OSC_FREQ);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_OSC_FREQ);
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_MULTIPLEX_RATIO);
10044944:	22a8      	movs	r2, #168	@ 0xa8
10044946:	2180      	movs	r1, #128	@ 0x80
10044948:	203c      	movs	r0, #60	@ 0x3c
1004494a:	f7ff f993 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x3F);
1004494e:	223f      	movs	r2, #63	@ 0x3f
10044950:	2180      	movs	r1, #128	@ 0x80
10044952:	203c      	movs	r0, #60	@ 0x3c
10044954:	f7ff f98e 	bl	10043c74 <I2C_WriteReg>
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xD3);//Display OFFSET
10044958:	22d3      	movs	r2, #211	@ 0xd3
1004495a:	2180      	movs	r1, #128	@ 0x80
1004495c:	203c      	movs	r0, #60	@ 0x3c
1004495e:	f7ff f989 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x08);
10044962:	2208      	movs	r2, #8
10044964:	2180      	movs	r1, #128	@ 0x80
10044966:	203c      	movs	r0, #60	@ 0x3c
10044968:	f7ff f984 	bl	10043c74 <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);//Set display start line
1004496c:	2240      	movs	r2, #64	@ 0x40
1004496e:	2180      	movs	r1, #128	@ 0x80
10044970:	203c      	movs	r0, #60	@ 0x3c
10044972:	f7ff f97f 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA1);//Set segment re-map
10044976:	22a1      	movs	r2, #161	@ 0xa1
10044978:	2180      	movs	r1, #128	@ 0x80
1004497a:	203c      	movs	r0, #60	@ 0x3c
1004497c:	f7ff f97a 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xC0);//Set COM output Scan direction
10044980:	22c0      	movs	r2, #192	@ 0xc0
10044982:	2180      	movs	r1, #128	@ 0x80
10044984:	203c      	movs	r0, #60	@ 0x3c
10044986:	f7ff f975 	bl	10043c74 <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDA);//Set COM hardware config
1004498a:	22da      	movs	r2, #218	@ 0xda
1004498c:	2180      	movs	r1, #128	@ 0x80
1004498e:	203c      	movs	r0, #60	@ 0x3c
10044990:	f7ff f970 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x12);
10044994:	2212      	movs	r2, #18
10044996:	2180      	movs	r1, #128	@ 0x80
10044998:	203c      	movs	r0, #60	@ 0x3c
1004499a:	f7ff f96b 	bl	10043c74 <I2C_WriteReg>
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDB);//Set VCOMH deselect level
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);
//
//
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA4);//Set entire display on/off
1004499e:	22a4      	movs	r2, #164	@ 0xa4
100449a0:	2180      	movs	r1, #128	@ 0x80
100449a2:	203c      	movs	r0, #60	@ 0x3c
100449a4:	f7ff f966 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA6);//Set normal/inverted display
100449a8:	22a6      	movs	r2, #166	@ 0xa6
100449aa:	2180      	movs	r1, #128	@ 0x80
100449ac:	203c      	movs	r0, #60	@ 0x3c
100449ae:	f7ff f961 	bl	10043c74 <I2C_WriteReg>


    // Enable the charge pump and
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_CHARGE_PUMP);
100449b2:	228d      	movs	r2, #141	@ 0x8d
100449b4:	2180      	movs	r1, #128	@ 0x80
100449b6:	203c      	movs	r0, #60	@ 0x3c
100449b8:	f7ff f95c 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_ENABLE_CHARGE_PUMP);
100449bc:	2214      	movs	r2, #20
100449be:	2180      	movs	r1, #128	@ 0x80
100449c0:	203c      	movs	r0, #60	@ 0x3c
100449c2:	f7ff f957 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_PRECHARGE_PERIOD);
100449c6:	22d9      	movs	r2, #217	@ 0xd9
100449c8:	2180      	movs	r1, #128	@ 0x80
100449ca:	203c      	movs	r0, #60	@ 0x3c
100449cc:	f7ff f952 	bl	10043c74 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_MAXIMUM_PRECHARGE);
100449d0:	22f1      	movs	r2, #241	@ 0xf1
100449d2:	2180      	movs	r1, #128	@ 0x80
100449d4:	203c      	movs	r0, #60	@ 0x3c
100449d6:	f7ff f94d 	bl	10043c74 <I2C_WriteReg>
//    // Set sequential COM configuration with non-interleaved memory.
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_COM_PINS_CONFIG);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);

    // And turn on the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_ON);
100449da:	22af      	movs	r2, #175	@ 0xaf
100449dc:	2180      	movs	r1, #128	@ 0x80
100449de:	203c      	movs	r0, #60	@ 0x3c
100449e0:	f7ff f948 	bl	10043c74 <I2C_WriteReg>
}
100449e4:	46c0      	nop			@ (mov r8, r8)
100449e6:	46bd      	mov	sp, r7
100449e8:	bd80      	pop	{r7, pc}

100449ea <OledDriverDisableDisplay>:

/**
 * Disable the Oled display before power-off.
 */
void OledDriverDisableDisplay(void)
{
100449ea:	b580      	push	{r7, lr}
100449ec:	af00      	add	r7, sp, #0
    // Send the display off command.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
100449ee:	22ae      	movs	r2, #174	@ 0xae
100449f0:	2180      	movs	r1, #128	@ 0x80
100449f2:	203c      	movs	r0, #60	@ 0x3c
100449f4:	f7ff f93e 	bl	10043c74 <I2C_WriteReg>
}
100449f8:	46c0      	nop			@ (mov r8, r8)
100449fa:	46bd      	mov	sp, r7
100449fc:	bd80      	pop	{r7, pc}
	...

10044a00 <OledDriverUpdateDisplay>:

/**
 * Update the display with the contents of rgb0ledBmp.
 */
void OledDriverUpdateDisplay(void)
{
10044a00:	b580      	push	{r7, lr}
10044a02:	b084      	sub	sp, #16
10044a04:	af00      	add	r7, sp, #0
    uint8_t *pb = &(rgbOledBmp[OLED_DRIVER_BUFFER_SIZE-1]);
10044a06:	4b1e      	ldr	r3, [pc, #120]	@ (10044a80 <OledDriverUpdateDisplay+0x80>)
10044a08:	60fb      	str	r3, [r7, #12]
    int page;
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
10044a0a:	2300      	movs	r3, #0
10044a0c:	60bb      	str	r3, [r7, #8]
10044a0e:	e02f      	b.n	10044a70 <OledDriverUpdateDisplay+0x70>

        // Set the desired page.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xB0 | (OLED_DRIVER_PAGES- page));//select page start address
10044a10:	68bb      	ldr	r3, [r7, #8]
10044a12:	b2db      	uxtb	r3, r3
10044a14:	2208      	movs	r2, #8
10044a16:	1ad3      	subs	r3, r2, r3
10044a18:	b2db      	uxtb	r3, r3
10044a1a:	b25b      	sxtb	r3, r3
10044a1c:	2250      	movs	r2, #80	@ 0x50
10044a1e:	4252      	negs	r2, r2
10044a20:	4313      	orrs	r3, r2
10044a22:	b25b      	sxtb	r3, r3
10044a24:	b2db      	uxtb	r3, r3
10044a26:	001a      	movs	r2, r3
10044a28:	2180      	movs	r1, #128	@ 0x80
10044a2a:	203c      	movs	r0, #60	@ 0x3c
10044a2c:	f7ff f922 	bl	10043c74 <I2C_WriteReg>
//        I2C_WriteReg(OLED_ADDRESS, COMMAND, page);

        // Set the starting column back to the origin.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
10044a30:	2200      	movs	r2, #0
10044a32:	2180      	movs	r1, #128	@ 0x80
10044a34:	203c      	movs	r0, #60	@ 0x3c
10044a36:	f7ff f91d 	bl	10043c74 <I2C_WriteReg>
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
10044a3a:	2210      	movs	r2, #16
10044a3c:	2180      	movs	r1, #128	@ 0x80
10044a3e:	203c      	movs	r0, #60	@ 0x3c
10044a40:	f7ff f918 	bl	10043c74 <I2C_WriteReg>

        // Write this entire column to the OLED.
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
10044a44:	2300      	movs	r3, #0
10044a46:	607b      	str	r3, [r7, #4]
10044a48:	e00c      	b.n	10044a64 <OledDriverUpdateDisplay+0x64>
            I2C_WriteReg(OLED_ADDRESS, DATA, *pb);
10044a4a:	68fb      	ldr	r3, [r7, #12]
10044a4c:	781b      	ldrb	r3, [r3, #0]
10044a4e:	001a      	movs	r2, r3
10044a50:	21c0      	movs	r1, #192	@ 0xc0
10044a52:	203c      	movs	r0, #60	@ 0x3c
10044a54:	f7ff f90e 	bl	10043c74 <I2C_WriteReg>
            pb--;
10044a58:	68fb      	ldr	r3, [r7, #12]
10044a5a:	3b01      	subs	r3, #1
10044a5c:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
10044a5e:	687b      	ldr	r3, [r7, #4]
10044a60:	3301      	adds	r3, #1
10044a62:	607b      	str	r3, [r7, #4]
10044a64:	687b      	ldr	r3, [r7, #4]
10044a66:	2b7f      	cmp	r3, #127	@ 0x7f
10044a68:	ddef      	ble.n	10044a4a <OledDriverUpdateDisplay+0x4a>
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
10044a6a:	68bb      	ldr	r3, [r7, #8]
10044a6c:	3301      	adds	r3, #1
10044a6e:	60bb      	str	r3, [r7, #8]
10044a70:	68bb      	ldr	r3, [r7, #8]
10044a72:	2b07      	cmp	r3, #7
10044a74:	ddcc      	ble.n	10044a10 <OledDriverUpdateDisplay+0x10>
        }
    }
}
10044a76:	46c0      	nop			@ (mov r8, r8)
10044a78:	46c0      	nop			@ (mov r8, r8)
10044a7a:	46bd      	mov	sp, r7
10044a7c:	b004      	add	sp, #16
10044a7e:	bd80      	pop	{r7, pc}
10044a80:	2000200b 	.word	0x2000200b

10044a84 <DelayMs>:

/**
 * Block the processor for the desired number of milliseconds.
 * @param ms The number of milliseconds to block for.
 */
void DelayMs(uint32_t ms) {
10044a84:	b580      	push	{r7, lr}
10044a86:	b084      	sub	sp, #16
10044a88:	af00      	add	r7, sp, #0
10044a8a:	6078      	str	r0, [r7, #4]
    uint32_t curr_ms = TIMERS_GetMilliSeconds();
10044a8c:	f000 fad8 	bl	10045040 <TIMERS_GetMilliSeconds>
10044a90:	0003      	movs	r3, r0
10044a92:	60fb      	str	r3, [r7, #12]
    while ((TIMERS_GetMilliSeconds() - curr_ms) < ms);
10044a94:	46c0      	nop			@ (mov r8, r8)
10044a96:	f000 fad3 	bl	10045040 <TIMERS_GetMilliSeconds>
10044a9a:	0002      	movs	r2, r0
10044a9c:	68fb      	ldr	r3, [r7, #12]
10044a9e:	1ad3      	subs	r3, r2, r3
10044aa0:	687a      	ldr	r2, [r7, #4]
10044aa2:	429a      	cmp	r2, r3
10044aa4:	d8f7      	bhi.n	10044a96 <DelayMs+0x12>
}
10044aa6:	46c0      	nop			@ (mov r8, r8)
10044aa8:	46c0      	nop			@ (mov r8, r8)
10044aaa:	46bd      	mov	sp, r7
10044aac:	b004      	add	sp, #16
10044aae:	bd80      	pop	{r7, pc}

10044ab0 <CompareTime>:
static uint8_t minute;

static uint8_t logging;//logging
static uint8_t playdata;
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
10044ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
10044ab2:	b08d      	sub	sp, #52	@ 0x34
10044ab4:	af00      	add	r7, sp, #0
	if(month == NULLDATE || day == NULLDATE || hour == NULLDATE || minute == NULLDATE){
10044ab6:	4b86      	ldr	r3, [pc, #536]	@ (10044cd0 <CompareTime+0x220>)
10044ab8:	781b      	ldrb	r3, [r3, #0]
10044aba:	2bff      	cmp	r3, #255	@ 0xff
10044abc:	d100      	bne.n	10044ac0 <CompareTime+0x10>
10044abe:	e103      	b.n	10044cc8 <CompareTime+0x218>
10044ac0:	4b84      	ldr	r3, [pc, #528]	@ (10044cd4 <CompareTime+0x224>)
10044ac2:	781b      	ldrb	r3, [r3, #0]
10044ac4:	2bff      	cmp	r3, #255	@ 0xff
10044ac6:	d100      	bne.n	10044aca <CompareTime+0x1a>
10044ac8:	e0fe      	b.n	10044cc8 <CompareTime+0x218>
10044aca:	4b83      	ldr	r3, [pc, #524]	@ (10044cd8 <CompareTime+0x228>)
10044acc:	781b      	ldrb	r3, [r3, #0]
10044ace:	2bff      	cmp	r3, #255	@ 0xff
10044ad0:	d100      	bne.n	10044ad4 <CompareTime+0x24>
10044ad2:	e0f9      	b.n	10044cc8 <CompareTime+0x218>
10044ad4:	4b81      	ldr	r3, [pc, #516]	@ (10044cdc <CompareTime+0x22c>)
10044ad6:	781b      	ldrb	r3, [r3, #0]
10044ad8:	2bff      	cmp	r3, #255	@ 0xff
10044ada:	d100      	bne.n	10044ade <CompareTime+0x2e>
10044adc:	e0f4      	b.n	10044cc8 <CompareTime+0x218>
		return;
	}
	discountprintf("Date received");
10044ade:	4b80      	ldr	r3, [pc, #512]	@ (10044ce0 <CompareTime+0x230>)
10044ae0:	0018      	movs	r0, r3
10044ae2:	f7fe f925 	bl	10042d30 <discountprintf>
	if(logging){
10044ae6:	4b7f      	ldr	r3, [pc, #508]	@ (10044ce4 <CompareTime+0x234>)
10044ae8:	781b      	ldrb	r3, [r3, #0]
10044aea:	2b00      	cmp	r3, #0
10044aec:	d067      	beq.n	10044bbe <CompareTime+0x10e>
		scheduleEvent event;

		event.month = month;
10044aee:	4b78      	ldr	r3, [pc, #480]	@ (10044cd0 <CompareTime+0x220>)
10044af0:	781a      	ldrb	r2, [r3, #0]
10044af2:	2524      	movs	r5, #36	@ 0x24
10044af4:	197b      	adds	r3, r7, r5
10044af6:	701a      	strb	r2, [r3, #0]
		event.day = day;
10044af8:	4b76      	ldr	r3, [pc, #472]	@ (10044cd4 <CompareTime+0x224>)
10044afa:	781a      	ldrb	r2, [r3, #0]
10044afc:	197b      	adds	r3, r7, r5
10044afe:	705a      	strb	r2, [r3, #1]
		if(playdata){
10044b00:	4b79      	ldr	r3, [pc, #484]	@ (10044ce8 <CompareTime+0x238>)
10044b02:	781b      	ldrb	r3, [r3, #0]
10044b04:	2b00      	cmp	r3, #0
10044b06:	d01d      	beq.n	10044b44 <CompareTime+0x94>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10044b08:	4b73      	ldr	r3, [pc, #460]	@ (10044cd8 <CompareTime+0x228>)
10044b0a:	781b      	ldrb	r3, [r3, #0]
10044b0c:	b25b      	sxtb	r3, r3
10044b0e:	00db      	lsls	r3, r3, #3
10044b10:	b25c      	sxtb	r4, r3
10044b12:	4b72      	ldr	r3, [pc, #456]	@ (10044cdc <CompareTime+0x22c>)
10044b14:	781b      	ldrb	r3, [r3, #0]
10044b16:	210f      	movs	r1, #15
10044b18:	0018      	movs	r0, r3
10044b1a:	f7fb fb91 	bl	10040240 <__udivsi3>
10044b1e:	0003      	movs	r3, r0
10044b20:	b2db      	uxtb	r3, r3
10044b22:	b25b      	sxtb	r3, r3
10044b24:	4023      	ands	r3, r4
10044b26:	b25b      	sxtb	r3, r3
10044b28:	b2da      	uxtb	r2, r3
10044b2a:	197b      	adds	r3, r7, r5
10044b2c:	709a      	strb	r2, [r3, #2]
			event.stop = 0;
10044b2e:	197b      	adds	r3, r7, r5
10044b30:	2200      	movs	r2, #0
10044b32:	70da      	strb	r2, [r3, #3]
			event.folder = (playdata>>8)&0xFF;
10044b34:	197b      	adds	r3, r7, r5
10044b36:	2200      	movs	r2, #0
10044b38:	711a      	strb	r2, [r3, #4]
			event.track = playdata&0xFF;
10044b3a:	4b6b      	ldr	r3, [pc, #428]	@ (10044ce8 <CompareTime+0x238>)
10044b3c:	781a      	ldrb	r2, [r3, #0]
10044b3e:	197b      	adds	r3, r7, r5
10044b40:	715a      	strb	r2, [r3, #5]
10044b42:	e029      	b.n	10044b98 <CompareTime+0xe8>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
10044b44:	f7fe fb30 	bl	100431a8 <FLASH_GetLogsSize>
10044b48:	0003      	movs	r3, r0
10044b4a:	3b01      	subs	r3, #1
10044b4c:	b29a      	uxth	r2, r3
10044b4e:	261c      	movs	r6, #28
10044b50:	19bb      	adds	r3, r7, r6
10044b52:	0011      	movs	r1, r2
10044b54:	0018      	movs	r0, r3
10044b56:	f7fe fb39 	bl	100431cc <FLASH_ReadLogs>
			event.start = 0;
10044b5a:	2524      	movs	r5, #36	@ 0x24
10044b5c:	197b      	adds	r3, r7, r5
10044b5e:	2200      	movs	r2, #0
10044b60:	709a      	strb	r2, [r3, #2]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10044b62:	4b5d      	ldr	r3, [pc, #372]	@ (10044cd8 <CompareTime+0x228>)
10044b64:	781b      	ldrb	r3, [r3, #0]
10044b66:	b25b      	sxtb	r3, r3
10044b68:	00db      	lsls	r3, r3, #3
10044b6a:	b25c      	sxtb	r4, r3
10044b6c:	4b5b      	ldr	r3, [pc, #364]	@ (10044cdc <CompareTime+0x22c>)
10044b6e:	781b      	ldrb	r3, [r3, #0]
10044b70:	210f      	movs	r1, #15
10044b72:	0018      	movs	r0, r3
10044b74:	f7fb fb64 	bl	10040240 <__udivsi3>
10044b78:	0003      	movs	r3, r0
10044b7a:	b2db      	uxtb	r3, r3
10044b7c:	b25b      	sxtb	r3, r3
10044b7e:	4023      	ands	r3, r4
10044b80:	b25b      	sxtb	r3, r3
10044b82:	b2da      	uxtb	r2, r3
10044b84:	197b      	adds	r3, r7, r5
10044b86:	70da      	strb	r2, [r3, #3]
			event.folder = prevevent.folder;
10044b88:	19bb      	adds	r3, r7, r6
10044b8a:	791a      	ldrb	r2, [r3, #4]
10044b8c:	197b      	adds	r3, r7, r5
10044b8e:	711a      	strb	r2, [r3, #4]
			event.track = prevevent.track;
10044b90:	19bb      	adds	r3, r7, r6
10044b92:	795a      	ldrb	r2, [r3, #5]
10044b94:	197b      	adds	r3, r7, r5
10044b96:	715a      	strb	r2, [r3, #5]
		}
		FLASH_AppendLogs(event);
10044b98:	2324      	movs	r3, #36	@ 0x24
10044b9a:	18fb      	adds	r3, r7, r3
10044b9c:	6818      	ldr	r0, [r3, #0]
10044b9e:	6859      	ldr	r1, [r3, #4]
10044ba0:	f7fe faac 	bl	100430fc <FLASH_AppendLogs>
		month = NULLDATE;
10044ba4:	4b4a      	ldr	r3, [pc, #296]	@ (10044cd0 <CompareTime+0x220>)
10044ba6:	22ff      	movs	r2, #255	@ 0xff
10044ba8:	701a      	strb	r2, [r3, #0]
		day = NULLDATE;
10044baa:	4b4a      	ldr	r3, [pc, #296]	@ (10044cd4 <CompareTime+0x224>)
10044bac:	22ff      	movs	r2, #255	@ 0xff
10044bae:	701a      	strb	r2, [r3, #0]
		hour = NULLDATE;
10044bb0:	4b49      	ldr	r3, [pc, #292]	@ (10044cd8 <CompareTime+0x228>)
10044bb2:	22ff      	movs	r2, #255	@ 0xff
10044bb4:	701a      	strb	r2, [r3, #0]
		minute = NULLDATE;
10044bb6:	4b49      	ldr	r3, [pc, #292]	@ (10044cdc <CompareTime+0x22c>)
10044bb8:	22ff      	movs	r2, #255	@ 0xff
10044bba:	701a      	strb	r2, [r3, #0]
10044bbc:	e085      	b.n	10044cca <CompareTime+0x21a>
	} else {
		scheduleEvent event;
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10044bbe:	2300      	movs	r3, #0
10044bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
10044bc2:	e078      	b.n	10044cb6 <CompareTime+0x206>
			event = FLASH_ReadSchedule(i);
10044bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044bc6:	b29a      	uxth	r2, r3
10044bc8:	2414      	movs	r4, #20
10044bca:	193b      	adds	r3, r7, r4
10044bcc:	0011      	movs	r1, r2
10044bce:	0018      	movs	r0, r3
10044bd0:	f7fe fbe2 	bl	10043398 <FLASH_ReadSchedule>
			if(event.month == month && event.day == day){
10044bd4:	0021      	movs	r1, r4
10044bd6:	187b      	adds	r3, r7, r1
10044bd8:	781a      	ldrb	r2, [r3, #0]
10044bda:	4b3d      	ldr	r3, [pc, #244]	@ (10044cd0 <CompareTime+0x220>)
10044bdc:	781b      	ldrb	r3, [r3, #0]
10044bde:	429a      	cmp	r2, r3
10044be0:	d166      	bne.n	10044cb0 <CompareTime+0x200>
10044be2:	187b      	adds	r3, r7, r1
10044be4:	785a      	ldrb	r2, [r3, #1]
10044be6:	4b3b      	ldr	r3, [pc, #236]	@ (10044cd4 <CompareTime+0x224>)
10044be8:	781b      	ldrb	r3, [r3, #0]
10044bea:	429a      	cmp	r2, r3
10044bec:	d160      	bne.n	10044cb0 <CompareTime+0x200>
				if((event.start&0b11111000)>>3 == hour && (event.start & 0b011)*15 == minute){
10044bee:	187b      	adds	r3, r7, r1
10044bf0:	789b      	ldrb	r3, [r3, #2]
10044bf2:	08db      	lsrs	r3, r3, #3
10044bf4:	b2da      	uxtb	r2, r3
10044bf6:	4b38      	ldr	r3, [pc, #224]	@ (10044cd8 <CompareTime+0x228>)
10044bf8:	781b      	ldrb	r3, [r3, #0]
10044bfa:	429a      	cmp	r2, r3
10044bfc:	d129      	bne.n	10044c52 <CompareTime+0x1a2>
10044bfe:	187b      	adds	r3, r7, r1
10044c00:	789b      	ldrb	r3, [r3, #2]
10044c02:	001a      	movs	r2, r3
10044c04:	2303      	movs	r3, #3
10044c06:	401a      	ands	r2, r3
10044c08:	0013      	movs	r3, r2
10044c0a:	011b      	lsls	r3, r3, #4
10044c0c:	1a9b      	subs	r3, r3, r2
10044c0e:	4a33      	ldr	r2, [pc, #204]	@ (10044cdc <CompareTime+0x22c>)
10044c10:	7812      	ldrb	r2, [r2, #0]
10044c12:	4293      	cmp	r3, r2
10044c14:	d11d      	bne.n	10044c52 <CompareTime+0x1a2>
					Event_t play = (Event_t){EVENT_PLAY, (event.folder<<8) + event.track};
10044c16:	2010      	movs	r0, #16
10044c18:	183b      	adds	r3, r7, r0
10044c1a:	220b      	movs	r2, #11
10044c1c:	701a      	strb	r2, [r3, #0]
10044c1e:	187b      	adds	r3, r7, r1
10044c20:	791b      	ldrb	r3, [r3, #4]
10044c22:	021b      	lsls	r3, r3, #8
10044c24:	b29b      	uxth	r3, r3
10044c26:	187a      	adds	r2, r7, r1
10044c28:	7952      	ldrb	r2, [r2, #5]
10044c2a:	189b      	adds	r3, r3, r2
10044c2c:	b29a      	uxth	r2, r3
10044c2e:	183b      	adds	r3, r7, r0
10044c30:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
10044c32:	183b      	adds	r3, r7, r0
10044c34:	6818      	ldr	r0, [r3, #0]
10044c36:	f7ff f9d1 	bl	10043fdc <MP3_Event_Post>
					month = NULLDATE;
10044c3a:	4b25      	ldr	r3, [pc, #148]	@ (10044cd0 <CompareTime+0x220>)
10044c3c:	22ff      	movs	r2, #255	@ 0xff
10044c3e:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10044c40:	4b24      	ldr	r3, [pc, #144]	@ (10044cd4 <CompareTime+0x224>)
10044c42:	22ff      	movs	r2, #255	@ 0xff
10044c44:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
10044c46:	4b24      	ldr	r3, [pc, #144]	@ (10044cd8 <CompareTime+0x228>)
10044c48:	22ff      	movs	r2, #255	@ 0xff
10044c4a:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
10044c4c:	4b23      	ldr	r3, [pc, #140]	@ (10044cdc <CompareTime+0x22c>)
10044c4e:	22ff      	movs	r2, #255	@ 0xff
10044c50:	701a      	strb	r2, [r3, #0]
				}
				if((event.stop&0b11111000)>>3 == hour && (event.stop & 0b011)*15 == minute){
10044c52:	2114      	movs	r1, #20
10044c54:	187b      	adds	r3, r7, r1
10044c56:	78db      	ldrb	r3, [r3, #3]
10044c58:	08db      	lsrs	r3, r3, #3
10044c5a:	b2da      	uxtb	r2, r3
10044c5c:	4b1e      	ldr	r3, [pc, #120]	@ (10044cd8 <CompareTime+0x228>)
10044c5e:	781b      	ldrb	r3, [r3, #0]
10044c60:	429a      	cmp	r2, r3
10044c62:	d125      	bne.n	10044cb0 <CompareTime+0x200>
10044c64:	187b      	adds	r3, r7, r1
10044c66:	78db      	ldrb	r3, [r3, #3]
10044c68:	001a      	movs	r2, r3
10044c6a:	2303      	movs	r3, #3
10044c6c:	401a      	ands	r2, r3
10044c6e:	0013      	movs	r3, r2
10044c70:	011b      	lsls	r3, r3, #4
10044c72:	1a9b      	subs	r3, r3, r2
10044c74:	4a19      	ldr	r2, [pc, #100]	@ (10044cdc <CompareTime+0x22c>)
10044c76:	7812      	ldrb	r2, [r2, #0]
10044c78:	4293      	cmp	r3, r2
10044c7a:	d119      	bne.n	10044cb0 <CompareTime+0x200>
					Event_t play = (Event_t){EVENT_PLAY, 0};
10044c7c:	2008      	movs	r0, #8
10044c7e:	183b      	adds	r3, r7, r0
10044c80:	220b      	movs	r2, #11
10044c82:	701a      	strb	r2, [r3, #0]
10044c84:	183b      	adds	r3, r7, r0
10044c86:	2200      	movs	r2, #0
10044c88:	805a      	strh	r2, [r3, #2]
					event.start = 0;
10044c8a:	187b      	adds	r3, r7, r1
10044c8c:	2200      	movs	r2, #0
10044c8e:	709a      	strb	r2, [r3, #2]
					MP3_Event_Post(play);
10044c90:	183b      	adds	r3, r7, r0
10044c92:	6818      	ldr	r0, [r3, #0]
10044c94:	f7ff f9a2 	bl	10043fdc <MP3_Event_Post>
					month = NULLDATE;
10044c98:	4b0d      	ldr	r3, [pc, #52]	@ (10044cd0 <CompareTime+0x220>)
10044c9a:	22ff      	movs	r2, #255	@ 0xff
10044c9c:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10044c9e:	4b0d      	ldr	r3, [pc, #52]	@ (10044cd4 <CompareTime+0x224>)
10044ca0:	22ff      	movs	r2, #255	@ 0xff
10044ca2:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
10044ca4:	4b0c      	ldr	r3, [pc, #48]	@ (10044cd8 <CompareTime+0x228>)
10044ca6:	22ff      	movs	r2, #255	@ 0xff
10044ca8:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
10044caa:	4b0c      	ldr	r3, [pc, #48]	@ (10044cdc <CompareTime+0x22c>)
10044cac:	22ff      	movs	r2, #255	@ 0xff
10044cae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10044cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044cb2:	3301      	adds	r3, #1
10044cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
10044cb6:	f7fe fb5d 	bl	10043374 <FLASH_GetScheduleSize>
10044cba:	0003      	movs	r3, r0
10044cbc:	001a      	movs	r2, r3
10044cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044cc0:	4293      	cmp	r3, r2
10044cc2:	da00      	bge.n	10044cc6 <CompareTime+0x216>
10044cc4:	e77e      	b.n	10044bc4 <CompareTime+0x114>
10044cc6:	e000      	b.n	10044cca <CompareTime+0x21a>
		return;
10044cc8:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
}
10044cca:	46bd      	mov	sp, r7
10044ccc:	b00d      	add	sp, #52	@ 0x34
10044cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044cd0:	20002014 	.word	0x20002014
10044cd4:	20002015 	.word	0x20002015
10044cd8:	20002016 	.word	0x20002016
10044cdc:	20002017 	.word	0x20002017
10044ce0:	10067620 	.word	0x10067620
10044ce4:	20002018 	.word	0x20002018
10044ce8:	20002019 	.word	0x20002019

10044cec <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
10044cec:	b580      	push	{r7, lr}
10044cee:	b082      	sub	sp, #8
10044cf0:	af00      	add	r7, sp, #0
10044cf2:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
10044cf4:	4b08      	ldr	r3, [pc, #32]	@ (10044d18 <Scheduler_Event_Init+0x2c>)
10044cf6:	687a      	ldr	r2, [r7, #4]
10044cf8:	601a      	str	r2, [r3, #0]
    I2C_Init();
10044cfa:	f7fe fe9f 	bl	10043a3c <I2C_Init>
    TIMERS_Init();
10044cfe:	f000 f953 	bl	10044fa8 <TIMERS_Init>
    starttime = TIMERS_GetMilliSeconds();
10044d02:	f000 f99d 	bl	10045040 <TIMERS_GetMilliSeconds>
10044d06:	0002      	movs	r2, r0
10044d08:	4b04      	ldr	r3, [pc, #16]	@ (10044d1c <Scheduler_Event_Init+0x30>)
10044d0a:	601a      	str	r2, [r3, #0]
    return INIT_OK;
10044d0c:	2301      	movs	r3, #1
}
10044d0e:	0018      	movs	r0, r3
10044d10:	46bd      	mov	sp, r7
10044d12:	b002      	add	sp, #8
10044d14:	bd80      	pop	{r7, pc}
10044d16:	46c0      	nop			@ (mov r8, r8)
10044d18:	2000200c 	.word	0x2000200c
10044d1c:	20002010 	.word	0x20002010

10044d20 <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
10044d20:	b580      	push	{r7, lr}
10044d22:	b082      	sub	sp, #8
10044d24:	af00      	add	r7, sp, #0
10044d26:	1d3b      	adds	r3, r7, #4
10044d28:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
10044d2a:	4b05      	ldr	r3, [pc, #20]	@ (10044d40 <Scheduler_Event_Post+0x20>)
10044d2c:	681a      	ldr	r2, [r3, #0]
10044d2e:	1d3b      	adds	r3, r7, #4
10044d30:	6819      	ldr	r1, [r3, #0]
10044d32:	0010      	movs	r0, r2
10044d34:	f7fe f85f 	bl	10042df6 <FIFO_Enqueue>
}
10044d38:	46c0      	nop			@ (mov r8, r8)
10044d3a:	46bd      	mov	sp, r7
10044d3c:	b002      	add	sp, #8
10044d3e:	bd80      	pop	{r7, pc}
10044d40:	2000200c 	.word	0x2000200c

10044d44 <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
10044d44:	b580      	push	{r7, lr}
10044d46:	b084      	sub	sp, #16
10044d48:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
10044d4a:	1d3b      	adds	r3, r7, #4
10044d4c:	2200      	movs	r2, #0
10044d4e:	701a      	strb	r2, [r3, #0]
10044d50:	1d3b      	adds	r3, r7, #4
10044d52:	2200      	movs	r2, #0
10044d54:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10044d56:	f000 f973 	bl	10045040 <TIMERS_GetMilliSeconds>
10044d5a:	0003      	movs	r3, r0
10044d5c:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
10044d5e:	4b15      	ldr	r3, [pc, #84]	@ (10044db4 <Scheduler_Event_Updater+0x70>)
10044d60:	681b      	ldr	r3, [r3, #0]
10044d62:	68fa      	ldr	r2, [r7, #12]
10044d64:	1ad3      	subs	r3, r2, r3
10044d66:	4a14      	ldr	r2, [pc, #80]	@ (10044db8 <Scheduler_Event_Updater+0x74>)
10044d68:	4293      	cmp	r3, r2
10044d6a:	d90c      	bls.n	10044d86 <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
10044d6c:	1d3b      	adds	r3, r7, #4
10044d6e:	2209      	movs	r2, #9
10044d70:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10044d72:	1d3b      	adds	r3, r7, #4
10044d74:	2200      	movs	r2, #0
10044d76:	805a      	strh	r2, [r3, #2]
		starttime = timer;
10044d78:	4b0e      	ldr	r3, [pc, #56]	@ (10044db4 <Scheduler_Event_Updater+0x70>)
10044d7a:	68fa      	ldr	r2, [r7, #12]
10044d7c:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
10044d7e:	1d3b      	adds	r3, r7, #4
10044d80:	6818      	ldr	r0, [r3, #0]
10044d82:	f7ff ffcd 	bl	10044d20 <Scheduler_Event_Post>
	}
    return event;
10044d86:	2108      	movs	r1, #8
10044d88:	187b      	adds	r3, r7, r1
10044d8a:	1d3a      	adds	r2, r7, #4
10044d8c:	6812      	ldr	r2, [r2, #0]
10044d8e:	601a      	str	r2, [r3, #0]
10044d90:	187a      	adds	r2, r7, r1
10044d92:	2300      	movs	r3, #0
10044d94:	8811      	ldrh	r1, [r2, #0]
10044d96:	0409      	lsls	r1, r1, #16
10044d98:	0c09      	lsrs	r1, r1, #16
10044d9a:	0c1b      	lsrs	r3, r3, #16
10044d9c:	041b      	lsls	r3, r3, #16
10044d9e:	430b      	orrs	r3, r1
10044da0:	8852      	ldrh	r2, [r2, #2]
10044da2:	0412      	lsls	r2, r2, #16
10044da4:	041b      	lsls	r3, r3, #16
10044da6:	0c1b      	lsrs	r3, r3, #16
10044da8:	4313      	orrs	r3, r2
}
10044daa:	0018      	movs	r0, r3
10044dac:	46bd      	mov	sp, r7
10044dae:	b004      	add	sp, #16
10044db0:	bd80      	pop	{r7, pc}
10044db2:	46c0      	nop			@ (mov r8, r8)
10044db4:	20002010 	.word	0x20002010
10044db8:	0000ea5f 	.word	0x0000ea5f

10044dbc <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
10044dbc:	b580      	push	{r7, lr}
10044dbe:	b082      	sub	sp, #8
10044dc0:	af00      	add	r7, sp, #0
10044dc2:	1d3b      	adds	r3, r7, #4
10044dc4:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
10044dc6:	1d3b      	adds	r3, r7, #4
10044dc8:	781b      	ldrb	r3, [r3, #0]
10044dca:	b25b      	sxtb	r3, r3
10044dcc:	2b0b      	cmp	r3, #11
10044dce:	d11b      	bne.n	10044e08 <Scheduler_Event_Handler+0x4c>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
10044dd0:	2201      	movs	r2, #1
10044dd2:	2105      	movs	r1, #5
10044dd4:	206f      	movs	r0, #111	@ 0x6f
10044dd6:	f7fe ff09 	bl	10043bec <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
10044dda:	2201      	movs	r2, #1
10044ddc:	2104      	movs	r1, #4
10044dde:	206f      	movs	r0, #111	@ 0x6f
10044de0:	f7fe ff04 	bl	10043bec <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
10044de4:	2201      	movs	r2, #1
10044de6:	2102      	movs	r1, #2
10044de8:	206f      	movs	r0, #111	@ 0x6f
10044dea:	f7fe feff 	bl	10043bec <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
10044dee:	2201      	movs	r2, #1
10044df0:	2101      	movs	r1, #1
10044df2:	206f      	movs	r0, #111	@ 0x6f
10044df4:	f7fe fefa 	bl	10043bec <I2C_Recieve>
		logging = 1;
10044df8:	4b65      	ldr	r3, [pc, #404]	@ (10044f90 <Scheduler_Event_Handler+0x1d4>)
10044dfa:	2201      	movs	r2, #1
10044dfc:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
10044dfe:	1d3b      	adds	r3, r7, #4
10044e00:	885b      	ldrh	r3, [r3, #2]
10044e02:	b2da      	uxtb	r2, r3
10044e04:	4b63      	ldr	r3, [pc, #396]	@ (10044f94 <Scheduler_Event_Handler+0x1d8>)
10044e06:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
10044e08:	1d3b      	adds	r3, r7, #4
10044e0a:	781b      	ldrb	r3, [r3, #0]
10044e0c:	b25b      	sxtb	r3, r3
10044e0e:	2b09      	cmp	r3, #9
10044e10:	d113      	bne.n	10044e3a <Scheduler_Event_Handler+0x7e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
10044e12:	2201      	movs	r2, #1
10044e14:	2105      	movs	r1, #5
10044e16:	206f      	movs	r0, #111	@ 0x6f
10044e18:	f7fe fee8 	bl	10043bec <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
10044e1c:	2201      	movs	r2, #1
10044e1e:	2104      	movs	r1, #4
10044e20:	206f      	movs	r0, #111	@ 0x6f
10044e22:	f7fe fee3 	bl	10043bec <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
10044e26:	2201      	movs	r2, #1
10044e28:	2102      	movs	r1, #2
10044e2a:	206f      	movs	r0, #111	@ 0x6f
10044e2c:	f7fe fede 	bl	10043bec <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
10044e30:	2201      	movs	r2, #1
10044e32:	2101      	movs	r1, #1
10044e34:	206f      	movs	r0, #111	@ 0x6f
10044e36:	f7fe fed9 	bl	10043bec <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
10044e3a:	1d3b      	adds	r3, r7, #4
10044e3c:	781b      	ldrb	r3, [r3, #0]
10044e3e:	b25b      	sxtb	r3, r3
10044e40:	2b05      	cmp	r3, #5
10044e42:	d000      	beq.n	10044e46 <Scheduler_Event_Handler+0x8a>
10044e44:	e09e      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
		switch (event.data>>8){
10044e46:	1d3b      	adds	r3, r7, #4
10044e48:	885b      	ldrh	r3, [r3, #2]
10044e4a:	0a1b      	lsrs	r3, r3, #8
10044e4c:	b29b      	uxth	r3, r3
10044e4e:	2b05      	cmp	r3, #5
10044e50:	d00b      	beq.n	10044e6a <Scheduler_Event_Handler+0xae>
10044e52:	dd00      	ble.n	10044e56 <Scheduler_Event_Handler+0x9a>
10044e54:	e096      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
10044e56:	2b04      	cmp	r3, #4
10044e58:	d020      	beq.n	10044e9c <Scheduler_Event_Handler+0xe0>
10044e5a:	dd00      	ble.n	10044e5e <Scheduler_Event_Handler+0xa2>
10044e5c:	e092      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
10044e5e:	2b01      	cmp	r3, #1
10044e60:	d100      	bne.n	10044e64 <Scheduler_Event_Handler+0xa8>
10044e62:	e076      	b.n	10044f52 <Scheduler_Event_Handler+0x196>
10044e64:	2b02      	cmp	r3, #2
10044e66:	d032      	beq.n	10044ece <Scheduler_Event_Handler+0x112>
10044e68:	e08c      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
10044e6a:	1d3b      	adds	r3, r7, #4
10044e6c:	885b      	ldrh	r3, [r3, #2]
10044e6e:	111b      	asrs	r3, r3, #4
10044e70:	b2db      	uxtb	r3, r3
10044e72:	2201      	movs	r2, #1
10044e74:	4013      	ands	r3, r2
10044e76:	b2db      	uxtb	r3, r3
10044e78:	1c1a      	adds	r2, r3, #0
10044e7a:	0092      	lsls	r2, r2, #2
10044e7c:	18d3      	adds	r3, r2, r3
10044e7e:	18db      	adds	r3, r3, r3
10044e80:	b2da      	uxtb	r2, r3
10044e82:	1d3b      	adds	r3, r7, #4
10044e84:	885b      	ldrh	r3, [r3, #2]
10044e86:	b2db      	uxtb	r3, r3
10044e88:	210f      	movs	r1, #15
10044e8a:	400b      	ands	r3, r1
10044e8c:	b2db      	uxtb	r3, r3
10044e8e:	18d3      	adds	r3, r2, r3
10044e90:	b2da      	uxtb	r2, r3
10044e92:	4b41      	ldr	r3, [pc, #260]	@ (10044f98 <Scheduler_Event_Handler+0x1dc>)
10044e94:	701a      	strb	r2, [r3, #0]
			CompareTime();
10044e96:	f7ff fe0b 	bl	10044ab0 <CompareTime>
			break;
10044e9a:	e073      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
10044e9c:	1d3b      	adds	r3, r7, #4
10044e9e:	885b      	ldrh	r3, [r3, #2]
10044ea0:	111b      	asrs	r3, r3, #4
10044ea2:	b2db      	uxtb	r3, r3
10044ea4:	2203      	movs	r2, #3
10044ea6:	4013      	ands	r3, r2
10044ea8:	b2db      	uxtb	r3, r3
10044eaa:	1c1a      	adds	r2, r3, #0
10044eac:	0092      	lsls	r2, r2, #2
10044eae:	18d3      	adds	r3, r2, r3
10044eb0:	18db      	adds	r3, r3, r3
10044eb2:	b2da      	uxtb	r2, r3
10044eb4:	1d3b      	adds	r3, r7, #4
10044eb6:	885b      	ldrh	r3, [r3, #2]
10044eb8:	b2db      	uxtb	r3, r3
10044eba:	210f      	movs	r1, #15
10044ebc:	400b      	ands	r3, r1
10044ebe:	b2db      	uxtb	r3, r3
10044ec0:	18d3      	adds	r3, r2, r3
10044ec2:	b2da      	uxtb	r2, r3
10044ec4:	4b35      	ldr	r3, [pc, #212]	@ (10044f9c <Scheduler_Event_Handler+0x1e0>)
10044ec6:	701a      	strb	r2, [r3, #0]
			CompareTime();
10044ec8:	f7ff fdf2 	bl	10044ab0 <CompareTime>
			break;
10044ecc:	e05a      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
10044ece:	1d3b      	adds	r3, r7, #4
10044ed0:	885b      	ldrh	r3, [r3, #2]
10044ed2:	001a      	movs	r2, r3
10044ed4:	2340      	movs	r3, #64	@ 0x40
10044ed6:	4013      	ands	r3, r2
10044ed8:	d022      	beq.n	10044f20 <Scheduler_Event_Handler+0x164>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
10044eda:	1d3b      	adds	r3, r7, #4
10044edc:	885b      	ldrh	r3, [r3, #2]
10044ede:	115b      	asrs	r3, r3, #5
10044ee0:	b2db      	uxtb	r3, r3
10044ee2:	2201      	movs	r2, #1
10044ee4:	4013      	ands	r3, r2
10044ee6:	b2db      	uxtb	r3, r3
10044ee8:	220c      	movs	r2, #12
10044eea:	4353      	muls	r3, r2
10044eec:	b2da      	uxtb	r2, r3
10044eee:	1d3b      	adds	r3, r7, #4
10044ef0:	885b      	ldrh	r3, [r3, #2]
10044ef2:	111b      	asrs	r3, r3, #4
10044ef4:	b2db      	uxtb	r3, r3
10044ef6:	2101      	movs	r1, #1
10044ef8:	400b      	ands	r3, r1
10044efa:	b2db      	uxtb	r3, r3
10044efc:	1c19      	adds	r1, r3, #0
10044efe:	0089      	lsls	r1, r1, #2
10044f00:	18cb      	adds	r3, r1, r3
10044f02:	18db      	adds	r3, r3, r3
10044f04:	b2db      	uxtb	r3, r3
10044f06:	18d3      	adds	r3, r2, r3
10044f08:	b2da      	uxtb	r2, r3
10044f0a:	1d3b      	adds	r3, r7, #4
10044f0c:	885b      	ldrh	r3, [r3, #2]
10044f0e:	b2db      	uxtb	r3, r3
10044f10:	210f      	movs	r1, #15
10044f12:	400b      	ands	r3, r1
10044f14:	b2db      	uxtb	r3, r3
10044f16:	18d3      	adds	r3, r2, r3
10044f18:	b2da      	uxtb	r2, r3
10044f1a:	4b21      	ldr	r3, [pc, #132]	@ (10044fa0 <Scheduler_Event_Handler+0x1e4>)
10044f1c:	701a      	strb	r2, [r3, #0]
10044f1e:	e015      	b.n	10044f4c <Scheduler_Event_Handler+0x190>
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
10044f20:	1d3b      	adds	r3, r7, #4
10044f22:	885b      	ldrh	r3, [r3, #2]
10044f24:	111b      	asrs	r3, r3, #4
10044f26:	b2db      	uxtb	r3, r3
10044f28:	2203      	movs	r2, #3
10044f2a:	4013      	ands	r3, r2
10044f2c:	b2db      	uxtb	r3, r3
10044f2e:	1c1a      	adds	r2, r3, #0
10044f30:	0092      	lsls	r2, r2, #2
10044f32:	18d3      	adds	r3, r2, r3
10044f34:	18db      	adds	r3, r3, r3
10044f36:	b2da      	uxtb	r2, r3
10044f38:	1d3b      	adds	r3, r7, #4
10044f3a:	885b      	ldrh	r3, [r3, #2]
10044f3c:	b2db      	uxtb	r3, r3
10044f3e:	210f      	movs	r1, #15
10044f40:	400b      	ands	r3, r1
10044f42:	b2db      	uxtb	r3, r3
10044f44:	18d3      	adds	r3, r2, r3
10044f46:	b2da      	uxtb	r2, r3
10044f48:	4b15      	ldr	r3, [pc, #84]	@ (10044fa0 <Scheduler_Event_Handler+0x1e4>)
10044f4a:	701a      	strb	r2, [r3, #0]
			}
			CompareTime();
10044f4c:	f7ff fdb0 	bl	10044ab0 <CompareTime>
			break;
10044f50:	e018      	b.n	10044f84 <Scheduler_Event_Handler+0x1c8>
		case RTCMINADDR:
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
10044f52:	1d3b      	adds	r3, r7, #4
10044f54:	885b      	ldrh	r3, [r3, #2]
10044f56:	111b      	asrs	r3, r3, #4
10044f58:	b2db      	uxtb	r3, r3
10044f5a:	2203      	movs	r2, #3
10044f5c:	4013      	ands	r3, r2
10044f5e:	b2db      	uxtb	r3, r3
10044f60:	1c1a      	adds	r2, r3, #0
10044f62:	0092      	lsls	r2, r2, #2
10044f64:	18d3      	adds	r3, r2, r3
10044f66:	18db      	adds	r3, r3, r3
10044f68:	b2da      	uxtb	r2, r3
10044f6a:	1d3b      	adds	r3, r7, #4
10044f6c:	885b      	ldrh	r3, [r3, #2]
10044f6e:	b2db      	uxtb	r3, r3
10044f70:	210f      	movs	r1, #15
10044f72:	400b      	ands	r3, r1
10044f74:	b2db      	uxtb	r3, r3
10044f76:	18d3      	adds	r3, r2, r3
10044f78:	b2da      	uxtb	r2, r3
10044f7a:	4b0a      	ldr	r3, [pc, #40]	@ (10044fa4 <Scheduler_Event_Handler+0x1e8>)
10044f7c:	701a      	strb	r2, [r3, #0]
			CompareTime();
10044f7e:	f7ff fd97 	bl	10044ab0 <CompareTime>

			break;
10044f82:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
10044f84:	2301      	movs	r3, #1
}
10044f86:	0018      	movs	r0, r3
10044f88:	46bd      	mov	sp, r7
10044f8a:	b002      	add	sp, #8
10044f8c:	bd80      	pop	{r7, pc}
10044f8e:	46c0      	nop			@ (mov r8, r8)
10044f90:	20002018 	.word	0x20002018
10044f94:	20002019 	.word	0x20002019
10044f98:	20002014 	.word	0x20002014
10044f9c:	20002015 	.word	0x20002015
10044fa0:	20002016 	.word	0x20002016
10044fa4:	20002017 	.word	0x20002017

10044fa8 <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
10044fa8:	b580      	push	{r7, lr}
10044faa:	b084      	sub	sp, #16
10044fac:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10044fae:	4b20      	ldr	r3, [pc, #128]	@ (10045030 <TIMERS_Init+0x88>)
10044fb0:	781b      	ldrb	r3, [r3, #0]
10044fb2:	2b00      	cmp	r3, #0
10044fb4:	d001      	beq.n	10044fba <TIMERS_Init+0x12>
10044fb6:	2301      	movs	r3, #1
10044fb8:	e036      	b.n	10045028 <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
10044fba:	003b      	movs	r3, r7
10044fbc:	0018      	movs	r0, r3
10044fbe:	2310      	movs	r3, #16
10044fc0:	001a      	movs	r2, r3
10044fc2:	2100      	movs	r1, #0
10044fc4:	f021 fa6c 	bl	100664a0 <memset>
	htim2.Instance = TIM2;
10044fc8:	4b1a      	ldr	r3, [pc, #104]	@ (10045034 <TIMERS_Init+0x8c>)
10044fca:	4a1b      	ldr	r2, [pc, #108]	@ (10045038 <TIMERS_Init+0x90>)
10044fcc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
10044fce:	4b19      	ldr	r3, [pc, #100]	@ (10045034 <TIMERS_Init+0x8c>)
10044fd0:	2220      	movs	r2, #32
10044fd2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
10044fd4:	4b17      	ldr	r3, [pc, #92]	@ (10045034 <TIMERS_Init+0x8c>)
10044fd6:	2200      	movs	r2, #0
10044fd8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
10044fda:	4b16      	ldr	r3, [pc, #88]	@ (10045034 <TIMERS_Init+0x8c>)
10044fdc:	4a17      	ldr	r2, [pc, #92]	@ (1004503c <TIMERS_Init+0x94>)
10044fde:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10044fe0:	4b14      	ldr	r3, [pc, #80]	@ (10045034 <TIMERS_Init+0x8c>)
10044fe2:	2200      	movs	r2, #0
10044fe4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
10044fe6:	4b13      	ldr	r3, [pc, #76]	@ (10045034 <TIMERS_Init+0x8c>)
10044fe8:	2200      	movs	r2, #0
10044fea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
10044fec:	4b11      	ldr	r3, [pc, #68]	@ (10045034 <TIMERS_Init+0x8c>)
10044fee:	0018      	movs	r0, r3
10044ff0:	f006 fee3 	bl	1004bdba <HAL_TIM_Base_Init>
10044ff4:	1e03      	subs	r3, r0, #0
10044ff6:	d001      	beq.n	10044ffc <TIMERS_Init+0x54>
	{
		Error_Handler();
10044ff8:	f7fb fd42 	bl	10040a80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
10044ffc:	003b      	movs	r3, r7
10044ffe:	2280      	movs	r2, #128	@ 0x80
10045000:	0152      	lsls	r2, r2, #5
10045002:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
10045004:	003a      	movs	r2, r7
10045006:	4b0b      	ldr	r3, [pc, #44]	@ (10045034 <TIMERS_Init+0x8c>)
10045008:	0011      	movs	r1, r2
1004500a:	0018      	movs	r0, r3
1004500c:	f007 f84e 	bl	1004c0ac <HAL_TIM_ConfigClockSource>
10045010:	1e03      	subs	r3, r0, #0
10045012:	d001      	beq.n	10045018 <TIMERS_Init+0x70>
	{
		Error_Handler();
10045014:	f7fb fd34 	bl	10040a80 <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
10045018:	4b06      	ldr	r3, [pc, #24]	@ (10045034 <TIMERS_Init+0x8c>)
1004501a:	0018      	movs	r0, r3
1004501c:	f006 ff12 	bl	1004be44 <HAL_TIM_Base_Start_IT>
    initialized = 1;
10045020:	4b03      	ldr	r3, [pc, #12]	@ (10045030 <TIMERS_Init+0x88>)
10045022:	2201      	movs	r2, #1
10045024:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10045026:	2301      	movs	r3, #1
}
10045028:	0018      	movs	r0, r3
1004502a:	46bd      	mov	sp, r7
1004502c:	b004      	add	sp, #16
1004502e:	bd80      	pop	{r7, pc}
10045030:	2000205c 	.word	0x2000205c
10045034:	2000201c 	.word	0x2000201c
10045038:	40002000 	.word	0x40002000
1004503c:	000003e7 	.word	0x000003e7

10045040 <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
10045040:	b580      	push	{r7, lr}
10045042:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10045044:	4b05      	ldr	r3, [pc, #20]	@ (1004505c <TIMERS_GetMilliSeconds+0x1c>)
10045046:	781b      	ldrb	r3, [r3, #0]
10045048:	2b00      	cmp	r3, #0
1004504a:	d101      	bne.n	10045050 <TIMERS_GetMilliSeconds+0x10>
1004504c:	2300      	movs	r3, #0
1004504e:	e001      	b.n	10045054 <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
10045050:	4b03      	ldr	r3, [pc, #12]	@ (10045060 <TIMERS_GetMilliSeconds+0x20>)
10045052:	681b      	ldr	r3, [r3, #0]
}
10045054:	0018      	movs	r0, r3
10045056:	46bd      	mov	sp, r7
10045058:	bd80      	pop	{r7, pc}
1004505a:	46c0      	nop			@ (mov r8, r8)
1004505c:	2000205c 	.word	0x2000205c
10045060:	20002058 	.word	0x20002058

10045064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
10045064:	b580      	push	{r7, lr}
10045066:	af00      	add	r7, sp, #0

	milliSeconds++;
10045068:	4b05      	ldr	r3, [pc, #20]	@ (10045080 <TIM2_IRQHandler+0x1c>)
1004506a:	681b      	ldr	r3, [r3, #0]
1004506c:	1c5a      	adds	r2, r3, #1
1004506e:	4b04      	ldr	r3, [pc, #16]	@ (10045080 <TIM2_IRQHandler+0x1c>)
10045070:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
10045072:	4b04      	ldr	r3, [pc, #16]	@ (10045084 <TIM2_IRQHandler+0x20>)
10045074:	0018      	movs	r0, r3
10045076:	f006 ff2b 	bl	1004bed0 <HAL_TIM_IRQHandler>
}
1004507a:	46c0      	nop			@ (mov r8, r8)
1004507c:	46bd      	mov	sp, r7
1004507e:	bd80      	pop	{r7, pc}
10045080:	20002058 	.word	0x20002058
10045084:	2000201c 	.word	0x2000201c

10045088 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10045088:	b580      	push	{r7, lr}
1004508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	if(hlpuart1.Instance->ISR & USART_ISR_ORE_Msk){
1004508c:	4b3c      	ldr	r3, [pc, #240]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
1004508e:	681b      	ldr	r3, [r3, #0]
10045090:	69db      	ldr	r3, [r3, #28]
10045092:	2208      	movs	r2, #8
10045094:	4013      	ands	r3, r2
10045096:	d003      	beq.n	100450a0 <LPUART1_IRQHandler+0x18>
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_OREF);
10045098:	4b39      	ldr	r3, [pc, #228]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
1004509a:	681b      	ldr	r3, [r3, #0]
1004509c:	2208      	movs	r2, #8
1004509e:	621a      	str	r2, [r3, #32]
	}
	if(hlpuart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
100450a0:	4b37      	ldr	r3, [pc, #220]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
100450a2:	681b      	ldr	r3, [r3, #0]
100450a4:	69db      	ldr	r3, [r3, #28]
100450a6:	2220      	movs	r2, #32
100450a8:	4013      	ands	r3, r2
100450aa:	d030      	beq.n	1004510e <LPUART1_IRQHandler+0x86>
		if(!LPUARTrx.full){
100450ac:	4b35      	ldr	r3, [pc, #212]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450ae:	2224      	movs	r2, #36	@ 0x24
100450b0:	5c9b      	ldrb	r3, [r3, r2]
100450b2:	2201      	movs	r2, #1
100450b4:	4053      	eors	r3, r2
100450b6:	b2db      	uxtb	r3, r3
100450b8:	2b00      	cmp	r3, #0
100450ba:	d020      	beq.n	100450fe <LPUART1_IRQHandler+0x76>
			LPUARTrx.data[LPUARTrx.head] = hlpuart1.Instance->RDR;
100450bc:	4b30      	ldr	r3, [pc, #192]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
100450be:	681b      	ldr	r3, [r3, #0]
100450c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100450c2:	4b30      	ldr	r3, [pc, #192]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450c4:	8c1b      	ldrh	r3, [r3, #32]
100450c6:	001a      	movs	r2, r3
100450c8:	b2c9      	uxtb	r1, r1
100450ca:	4b2e      	ldr	r3, [pc, #184]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450cc:	5499      	strb	r1, [r3, r2]
			LPUARTrx.head++;
100450ce:	4b2d      	ldr	r3, [pc, #180]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450d0:	8c1b      	ldrh	r3, [r3, #32]
100450d2:	3301      	adds	r3, #1
100450d4:	b29a      	uxth	r2, r3
100450d6:	4b2b      	ldr	r3, [pc, #172]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450d8:	841a      	strh	r2, [r3, #32]
			LPUARTrx.head %= LPUARTCIRCBUFFSIZE;
100450da:	4b2a      	ldr	r3, [pc, #168]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450dc:	8c1b      	ldrh	r3, [r3, #32]
100450de:	221f      	movs	r2, #31
100450e0:	4013      	ands	r3, r2
100450e2:	b29a      	uxth	r2, r3
100450e4:	4b27      	ldr	r3, [pc, #156]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450e6:	841a      	strh	r2, [r3, #32]
			if(LPUARTrx.tail == LPUARTrx.head){
100450e8:	4b26      	ldr	r3, [pc, #152]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450ea:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
100450ec:	4b25      	ldr	r3, [pc, #148]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450ee:	8c1b      	ldrh	r3, [r3, #32]
100450f0:	429a      	cmp	r2, r3
100450f2:	d10c      	bne.n	1004510e <LPUART1_IRQHandler+0x86>
				LPUARTrx.full = true;
100450f4:	4b23      	ldr	r3, [pc, #140]	@ (10045184 <LPUART1_IRQHandler+0xfc>)
100450f6:	2224      	movs	r2, #36	@ 0x24
100450f8:	2101      	movs	r1, #1
100450fa:	5499      	strb	r1, [r3, r2]
100450fc:	e007      	b.n	1004510e <LPUART1_IRQHandler+0x86>
			}
		} else {
			hlpuart1.Instance->RQR |= 0x08;
100450fe:	4b20      	ldr	r3, [pc, #128]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
10045100:	681b      	ldr	r3, [r3, #0]
10045102:	699a      	ldr	r2, [r3, #24]
10045104:	4b1e      	ldr	r3, [pc, #120]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
10045106:	681b      	ldr	r3, [r3, #0]
10045108:	2108      	movs	r1, #8
1004510a:	430a      	orrs	r2, r1
1004510c:	619a      	str	r2, [r3, #24]
		}
	}
	if((hlpuart1.Instance->ISR & USART_ISR_TC_Msk)){
1004510e:	4b1c      	ldr	r3, [pc, #112]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
10045110:	681b      	ldr	r3, [r3, #0]
10045112:	69db      	ldr	r3, [r3, #28]
10045114:	2240      	movs	r2, #64	@ 0x40
10045116:	4013      	ands	r3, r2
10045118:	d02e      	beq.n	10045178 <LPUART1_IRQHandler+0xf0>
		if(LPUARTtx.head != LPUARTtx.tail || LPUARTtx.full){
1004511a:	4b1b      	ldr	r3, [pc, #108]	@ (10045188 <LPUART1_IRQHandler+0x100>)
1004511c:	8c1a      	ldrh	r2, [r3, #32]
1004511e:	4b1a      	ldr	r3, [pc, #104]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045120:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045122:	429a      	cmp	r2, r3
10045124:	d104      	bne.n	10045130 <LPUART1_IRQHandler+0xa8>
10045126:	4b18      	ldr	r3, [pc, #96]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045128:	2224      	movs	r2, #36	@ 0x24
1004512a:	5c9b      	ldrb	r3, [r3, r2]
1004512c:	2b00      	cmp	r3, #0
1004512e:	d01e      	beq.n	1004516e <LPUART1_IRQHandler+0xe6>
			hlpuart1.Instance->TDR = LPUARTtx.data[LPUARTtx.tail];
10045130:	4b15      	ldr	r3, [pc, #84]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045132:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045134:	001a      	movs	r2, r3
10045136:	4b14      	ldr	r3, [pc, #80]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045138:	5c9a      	ldrb	r2, [r3, r2]
1004513a:	4b11      	ldr	r3, [pc, #68]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
1004513c:	681b      	ldr	r3, [r3, #0]
1004513e:	629a      	str	r2, [r3, #40]	@ 0x28
			LPUARTtx.tail++;
10045140:	4b11      	ldr	r3, [pc, #68]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045142:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045144:	3301      	adds	r3, #1
10045146:	b29a      	uxth	r2, r3
10045148:	4b0f      	ldr	r3, [pc, #60]	@ (10045188 <LPUART1_IRQHandler+0x100>)
1004514a:	845a      	strh	r2, [r3, #34]	@ 0x22
			LPUARTtx.tail %= LPUARTCIRCBUFFSIZE;
1004514c:	4b0e      	ldr	r3, [pc, #56]	@ (10045188 <LPUART1_IRQHandler+0x100>)
1004514e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045150:	221f      	movs	r2, #31
10045152:	4013      	ands	r3, r2
10045154:	b29a      	uxth	r2, r3
10045156:	4b0c      	ldr	r3, [pc, #48]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045158:	845a      	strh	r2, [r3, #34]	@ 0x22
			if(LPUARTtx.full){
1004515a:	4b0b      	ldr	r3, [pc, #44]	@ (10045188 <LPUART1_IRQHandler+0x100>)
1004515c:	2224      	movs	r2, #36	@ 0x24
1004515e:	5c9b      	ldrb	r3, [r3, r2]
10045160:	2b00      	cmp	r3, #0
10045162:	d009      	beq.n	10045178 <LPUART1_IRQHandler+0xf0>
				LPUARTtx.full = false;
10045164:	4b08      	ldr	r3, [pc, #32]	@ (10045188 <LPUART1_IRQHandler+0x100>)
10045166:	2224      	movs	r2, #36	@ 0x24
10045168:	2100      	movs	r1, #0
1004516a:	5499      	strb	r1, [r3, r2]
			if(LPUARTtx.full){
1004516c:	e004      	b.n	10045178 <LPUART1_IRQHandler+0xf0>
			}

		} else {
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_TCF);
1004516e:	4b04      	ldr	r3, [pc, #16]	@ (10045180 <LPUART1_IRQHandler+0xf8>)
10045170:	681b      	ldr	r3, [r3, #0]
10045172:	2240      	movs	r2, #64	@ 0x40
10045174:	621a      	str	r2, [r3, #32]

	//HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10045176:	e7ff      	b.n	10045178 <LPUART1_IRQHandler+0xf0>
10045178:	46c0      	nop			@ (mov r8, r8)
1004517a:	46bd      	mov	sp, r7
1004517c:	bd80      	pop	{r7, pc}
1004517e:	46c0      	nop			@ (mov r8, r8)
10045180:	20002060 	.word	0x20002060
10045184:	20002154 	.word	0x20002154
10045188:	2000212c 	.word	0x2000212c

1004518c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
1004518c:	b580      	push	{r7, lr}
1004518e:	af00      	add	r7, sp, #0
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
			I2CUARTtoI2C(1);//after transmission is complete default to I2C, no delay
		}
	}
#endif
	HAL_USART_IRQHandler(&husart1);
10045190:	4b03      	ldr	r3, [pc, #12]	@ (100451a0 <USART1_IRQHandler+0x14>)
10045192:	0018      	movs	r0, r3
10045194:	f007 ff0c 	bl	1004cfb0 <HAL_USART_IRQHandler>

}
10045198:	46c0      	nop			@ (mov r8, r8)
1004519a:	46bd      	mov	sp, r7
1004519c:	bd80      	pop	{r7, pc}
1004519e:	46c0      	nop			@ (mov r8, r8)
100451a0:	2000267c 	.word	0x2000267c

100451a4 <UARTs_Init>:
 * @function: UARTs_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UARTs_Init(void){
100451a4:	b580      	push	{r7, lr}
100451a6:	af00      	add	r7, sp, #0

	if(initialized == 1){ return 0;}
100451a8:	4b3b      	ldr	r3, [pc, #236]	@ (10045298 <UARTs_Init+0xf4>)
100451aa:	781b      	ldrb	r3, [r3, #0]
100451ac:	2b01      	cmp	r3, #1
100451ae:	d101      	bne.n	100451b4 <UARTs_Init+0x10>
100451b0:	2300      	movs	r3, #0
100451b2:	e06e      	b.n	10045292 <UARTs_Init+0xee>
	TIMERS_Init();
100451b4:	f7ff fef8 	bl	10044fa8 <TIMERS_Init>
	initialized = 1;
100451b8:	4b37      	ldr	r3, [pc, #220]	@ (10045298 <UARTs_Init+0xf4>)
100451ba:	2201      	movs	r2, #1
100451bc:	701a      	strb	r2, [r3, #0]
	hlpuart1.Instance = LPUART1;
100451be:	4b37      	ldr	r3, [pc, #220]	@ (1004529c <UARTs_Init+0xf8>)
100451c0:	4a37      	ldr	r2, [pc, #220]	@ (100452a0 <UARTs_Init+0xfc>)
100451c2:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
100451c4:	4b35      	ldr	r3, [pc, #212]	@ (1004529c <UARTs_Init+0xf8>)
100451c6:	2296      	movs	r2, #150	@ 0x96
100451c8:	0192      	lsls	r2, r2, #6
100451ca:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
100451cc:	4b33      	ldr	r3, [pc, #204]	@ (1004529c <UARTs_Init+0xf8>)
100451ce:	2200      	movs	r2, #0
100451d0:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
100451d2:	4b32      	ldr	r3, [pc, #200]	@ (1004529c <UARTs_Init+0xf8>)
100451d4:	2200      	movs	r2, #0
100451d6:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
100451d8:	4b30      	ldr	r3, [pc, #192]	@ (1004529c <UARTs_Init+0xf8>)
100451da:	2200      	movs	r2, #0
100451dc:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
100451de:	4b2f      	ldr	r3, [pc, #188]	@ (1004529c <UARTs_Init+0xf8>)
100451e0:	220c      	movs	r2, #12
100451e2:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100451e4:	4b2d      	ldr	r3, [pc, #180]	@ (1004529c <UARTs_Init+0xf8>)
100451e6:	2200      	movs	r2, #0
100451e8:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100451ea:	4b2c      	ldr	r3, [pc, #176]	@ (1004529c <UARTs_Init+0xf8>)
100451ec:	2200      	movs	r2, #0
100451ee:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100451f0:	4b2a      	ldr	r3, [pc, #168]	@ (1004529c <UARTs_Init+0xf8>)
100451f2:	2200      	movs	r2, #0
100451f4:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100451f6:	4b29      	ldr	r3, [pc, #164]	@ (1004529c <UARTs_Init+0xf8>)
100451f8:	2200      	movs	r2, #0
100451fa:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
100451fc:	4b27      	ldr	r3, [pc, #156]	@ (1004529c <UARTs_Init+0xf8>)
100451fe:	2200      	movs	r2, #0
10045200:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10045202:	4b26      	ldr	r3, [pc, #152]	@ (1004529c <UARTs_Init+0xf8>)
10045204:	0018      	movs	r0, r3
10045206:	f007 f93b 	bl	1004c480 <HAL_UART_Init>
1004520a:	1e03      	subs	r3, r0, #0
1004520c:	d001      	beq.n	10045212 <UARTs_Init+0x6e>
	{
		Error_Handler();
1004520e:	f7fb fc37 	bl	10040a80 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10045212:	4b22      	ldr	r3, [pc, #136]	@ (1004529c <UARTs_Init+0xf8>)
10045214:	2100      	movs	r1, #0
10045216:	0018      	movs	r0, r3
10045218:	f007 fdea 	bl	1004cdf0 <HAL_UARTEx_SetTxFifoThreshold>
1004521c:	1e03      	subs	r3, r0, #0
1004521e:	d001      	beq.n	10045224 <UARTs_Init+0x80>
	{
		Error_Handler();
10045220:	f7fb fc2e 	bl	10040a80 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10045224:	4b1d      	ldr	r3, [pc, #116]	@ (1004529c <UARTs_Init+0xf8>)
10045226:	2100      	movs	r1, #0
10045228:	0018      	movs	r0, r3
1004522a:	f007 fe21 	bl	1004ce70 <HAL_UARTEx_SetRxFifoThreshold>
1004522e:	1e03      	subs	r3, r0, #0
10045230:	d001      	beq.n	10045236 <UARTs_Init+0x92>
	{
		Error_Handler();
10045232:	f7fb fc25 	bl	10040a80 <Error_Handler>
	}
	hlpuart1.Instance->CR2 |= 0x8000;//swap the RX and TX pins
10045236:	4b19      	ldr	r3, [pc, #100]	@ (1004529c <UARTs_Init+0xf8>)
10045238:	681b      	ldr	r3, [r3, #0]
1004523a:	685a      	ldr	r2, [r3, #4]
1004523c:	4b17      	ldr	r3, [pc, #92]	@ (1004529c <UARTs_Init+0xf8>)
1004523e:	681b      	ldr	r3, [r3, #0]
10045240:	2180      	movs	r1, #128	@ 0x80
10045242:	0209      	lsls	r1, r1, #8
10045244:	430a      	orrs	r2, r1
10045246:	605a      	str	r2, [r3, #4]

	HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
10045248:	2200      	movs	r2, #0
1004524a:	2100      	movs	r1, #0
1004524c:	2009      	movs	r0, #9
1004524e:	f001 f981 	bl	10046554 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10045252:	2009      	movs	r0, #9
10045254:	f001 f993 	bl	1004657e <HAL_NVIC_EnableIRQ>

	LPUARTtx.tail = 0;
10045258:	4b12      	ldr	r3, [pc, #72]	@ (100452a4 <UARTs_Init+0x100>)
1004525a:	2200      	movs	r2, #0
1004525c:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTtx.head = 0;
1004525e:	4b11      	ldr	r3, [pc, #68]	@ (100452a4 <UARTs_Init+0x100>)
10045260:	2200      	movs	r2, #0
10045262:	841a      	strh	r2, [r3, #32]
	LPUARTtx.full = false;
10045264:	4b0f      	ldr	r3, [pc, #60]	@ (100452a4 <UARTs_Init+0x100>)
10045266:	2224      	movs	r2, #36	@ 0x24
10045268:	2100      	movs	r1, #0
1004526a:	5499      	strb	r1, [r3, r2]

	LPUARTrx.tail = 0;
1004526c:	4b0e      	ldr	r3, [pc, #56]	@ (100452a8 <UARTs_Init+0x104>)
1004526e:	2200      	movs	r2, #0
10045270:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTrx.head = 0;
10045272:	4b0d      	ldr	r3, [pc, #52]	@ (100452a8 <UARTs_Init+0x104>)
10045274:	2200      	movs	r2, #0
10045276:	841a      	strh	r2, [r3, #32]
	LPUARTrx.full = false;
10045278:	4b0b      	ldr	r3, [pc, #44]	@ (100452a8 <UARTs_Init+0x104>)
1004527a:	2224      	movs	r2, #36	@ 0x24
1004527c:	2100      	movs	r1, #0
1004527e:	5499      	strb	r1, [r3, r2]
	hlpuart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10045280:	4b06      	ldr	r3, [pc, #24]	@ (1004529c <UARTs_Init+0xf8>)
10045282:	681b      	ldr	r3, [r3, #0]
10045284:	681a      	ldr	r2, [r3, #0]
10045286:	4b05      	ldr	r3, [pc, #20]	@ (1004529c <UARTs_Init+0xf8>)
10045288:	681b      	ldr	r3, [r3, #0]
1004528a:	2160      	movs	r1, #96	@ 0x60
1004528c:	430a      	orrs	r2, r1
1004528e:	601a      	str	r2, [r3, #0]
	USARTrx.head = 0;
	USARTrx.full = false;
#endif
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return 0;//not INIT_OK to have compatibility with the BLE trace function calls
10045290:	2300      	movs	r3, #0
}
10045292:	0018      	movs	r0, r3
10045294:	46bd      	mov	sp, r7
10045296:	bd80      	pop	{r7, pc}
10045298:	2000217a 	.word	0x2000217a
1004529c:	20002060 	.word	0x20002060
100452a0:	41005000 	.word	0x41005000
100452a4:	2000212c 	.word	0x2000212c
100452a8:	20002154 	.word	0x20002154

100452ac <LPUART_ReadRx>:
 * @function: UART_ReadRx()
 * @brief: reads one received byte from the lpuart
 * @param: none
 * @return: the character received, is 0x00 if no character to read
 */
char LPUART_ReadRx(void){
100452ac:	b580      	push	{r7, lr}
100452ae:	b082      	sub	sp, #8
100452b0:	af00      	add	r7, sp, #0
	if(LPUARTrx.head != LPUARTrx.tail || LPUARTrx.full){
100452b2:	4b13      	ldr	r3, [pc, #76]	@ (10045300 <LPUART_ReadRx+0x54>)
100452b4:	8c1a      	ldrh	r2, [r3, #32]
100452b6:	4b12      	ldr	r3, [pc, #72]	@ (10045300 <LPUART_ReadRx+0x54>)
100452b8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100452ba:	429a      	cmp	r2, r3
100452bc:	d104      	bne.n	100452c8 <LPUART_ReadRx+0x1c>
100452be:	4b10      	ldr	r3, [pc, #64]	@ (10045300 <LPUART_ReadRx+0x54>)
100452c0:	2224      	movs	r2, #36	@ 0x24
100452c2:	5c9b      	ldrb	r3, [r3, r2]
100452c4:	2b00      	cmp	r3, #0
100452c6:	d016      	beq.n	100452f6 <LPUART_ReadRx+0x4a>
		char data = LPUARTrx.data[LPUARTrx.tail];
100452c8:	4b0d      	ldr	r3, [pc, #52]	@ (10045300 <LPUART_ReadRx+0x54>)
100452ca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100452cc:	0019      	movs	r1, r3
100452ce:	1dfb      	adds	r3, r7, #7
100452d0:	4a0b      	ldr	r2, [pc, #44]	@ (10045300 <LPUART_ReadRx+0x54>)
100452d2:	5c52      	ldrb	r2, [r2, r1]
100452d4:	701a      	strb	r2, [r3, #0]
		LPUARTrx.tail++;
100452d6:	4b0a      	ldr	r3, [pc, #40]	@ (10045300 <LPUART_ReadRx+0x54>)
100452d8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100452da:	3301      	adds	r3, #1
100452dc:	b29a      	uxth	r2, r3
100452de:	4b08      	ldr	r3, [pc, #32]	@ (10045300 <LPUART_ReadRx+0x54>)
100452e0:	845a      	strh	r2, [r3, #34]	@ 0x22
		LPUARTrx.tail %= LPUARTCIRCBUFFSIZE;
100452e2:	4b07      	ldr	r3, [pc, #28]	@ (10045300 <LPUART_ReadRx+0x54>)
100452e4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100452e6:	221f      	movs	r2, #31
100452e8:	4013      	ands	r3, r2
100452ea:	b29a      	uxth	r2, r3
100452ec:	4b04      	ldr	r3, [pc, #16]	@ (10045300 <LPUART_ReadRx+0x54>)
100452ee:	845a      	strh	r2, [r3, #34]	@ 0x22
		return data;
100452f0:	1dfb      	adds	r3, r7, #7
100452f2:	781b      	ldrb	r3, [r3, #0]
100452f4:	e000      	b.n	100452f8 <LPUART_ReadRx+0x4c>
	} else {
		return UARTFAILED;
100452f6:	2325      	movs	r3, #37	@ 0x25
	}

}
100452f8:	0018      	movs	r0, r3
100452fa:	46bd      	mov	sp, r7
100452fc:	b002      	add	sp, #8
100452fe:	bd80      	pop	{r7, pc}
10045300:	20002154 	.word	0x20002154

10045304 <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
10045304:	b580      	push	{r7, lr}
10045306:	b082      	sub	sp, #8
10045308:	af00      	add	r7, sp, #0
1004530a:	0002      	movs	r2, r0
1004530c:	1dfb      	adds	r3, r7, #7
1004530e:	701a      	strb	r2, [r3, #0]
	if(!LPUARTtx.full){
10045310:	4b1f      	ldr	r3, [pc, #124]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045312:	2224      	movs	r2, #36	@ 0x24
10045314:	5c9b      	ldrb	r3, [r3, r2]
10045316:	2201      	movs	r2, #1
10045318:	4053      	eors	r3, r2
1004531a:	b2db      	uxtb	r3, r3
1004531c:	2b00      	cmp	r3, #0
1004531e:	d031      	beq.n	10045384 <LPUART_WriteTx+0x80>
		if(LPUARTtx.head == LPUARTtx.tail && (hlpuart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10045320:	4b1b      	ldr	r3, [pc, #108]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045322:	8c1a      	ldrh	r2, [r3, #32]
10045324:	4b1a      	ldr	r3, [pc, #104]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045326:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045328:	429a      	cmp	r2, r3
1004532a:	d10b      	bne.n	10045344 <LPUART_WriteTx+0x40>
1004532c:	4b19      	ldr	r3, [pc, #100]	@ (10045394 <LPUART_WriteTx+0x90>)
1004532e:	681b      	ldr	r3, [r3, #0]
10045330:	69db      	ldr	r3, [r3, #28]
10045332:	2280      	movs	r2, #128	@ 0x80
10045334:	4013      	ands	r3, r2
10045336:	d005      	beq.n	10045344 <LPUART_WriteTx+0x40>
			hlpuart1.Instance->TDR = input;
10045338:	4b16      	ldr	r3, [pc, #88]	@ (10045394 <LPUART_WriteTx+0x90>)
1004533a:	681b      	ldr	r3, [r3, #0]
1004533c:	1dfa      	adds	r2, r7, #7
1004533e:	7812      	ldrb	r2, [r2, #0]
10045340:	629a      	str	r2, [r3, #40]	@ 0x28
10045342:	e01d      	b.n	10045380 <LPUART_WriteTx+0x7c>
		} else {
			LPUARTtx.data[LPUARTtx.head] = input;
10045344:	4b12      	ldr	r3, [pc, #72]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045346:	8c1b      	ldrh	r3, [r3, #32]
10045348:	0019      	movs	r1, r3
1004534a:	4b11      	ldr	r3, [pc, #68]	@ (10045390 <LPUART_WriteTx+0x8c>)
1004534c:	1dfa      	adds	r2, r7, #7
1004534e:	7812      	ldrb	r2, [r2, #0]
10045350:	545a      	strb	r2, [r3, r1]
			LPUARTtx.head++;
10045352:	4b0f      	ldr	r3, [pc, #60]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045354:	8c1b      	ldrh	r3, [r3, #32]
10045356:	3301      	adds	r3, #1
10045358:	b29a      	uxth	r2, r3
1004535a:	4b0d      	ldr	r3, [pc, #52]	@ (10045390 <LPUART_WriteTx+0x8c>)
1004535c:	841a      	strh	r2, [r3, #32]
			LPUARTtx.head %= LPUARTCIRCBUFFSIZE;
1004535e:	4b0c      	ldr	r3, [pc, #48]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045360:	8c1b      	ldrh	r3, [r3, #32]
10045362:	221f      	movs	r2, #31
10045364:	4013      	ands	r3, r2
10045366:	b29a      	uxth	r2, r3
10045368:	4b09      	ldr	r3, [pc, #36]	@ (10045390 <LPUART_WriteTx+0x8c>)
1004536a:	841a      	strh	r2, [r3, #32]
			if(LPUARTtx.head == LPUARTtx.tail){
1004536c:	4b08      	ldr	r3, [pc, #32]	@ (10045390 <LPUART_WriteTx+0x8c>)
1004536e:	8c1a      	ldrh	r2, [r3, #32]
10045370:	4b07      	ldr	r3, [pc, #28]	@ (10045390 <LPUART_WriteTx+0x8c>)
10045372:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045374:	429a      	cmp	r2, r3
10045376:	d103      	bne.n	10045380 <LPUART_WriteTx+0x7c>
				LPUARTtx.full = true;
10045378:	4b05      	ldr	r3, [pc, #20]	@ (10045390 <LPUART_WriteTx+0x8c>)
1004537a:	2224      	movs	r2, #36	@ 0x24
1004537c:	2101      	movs	r1, #1
1004537e:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10045380:	2300      	movs	r3, #0
10045382:	e000      	b.n	10045386 <LPUART_WriteTx+0x82>
	} else {
		return UARTFAILED;
10045384:	2325      	movs	r3, #37	@ 0x25
	}
}
10045386:	0018      	movs	r0, r3
10045388:	46bd      	mov	sp, r7
1004538a:	b002      	add	sp, #8
1004538c:	bd80      	pop	{r7, pc}
1004538e:	46c0      	nop			@ (mov r8, r8)
10045390:	2000212c 	.word	0x2000212c
10045394:	20002060 	.word	0x20002060

10045398 <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
10045398:	b580      	push	{r7, lr}
1004539a:	af00      	add	r7, sp, #0
		return data;
	} else {
		return UARTFAILED;
	}
#else
	return UARTFAILED;
1004539c:	2325      	movs	r3, #37	@ 0x25
#endif
}
1004539e:	0018      	movs	r0, r3
100453a0:	46bd      	mov	sp, r7
100453a2:	bd80      	pop	{r7, pc}

100453a4 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
100453a4:	b580      	push	{r7, lr}
100453a6:	b082      	sub	sp, #8
100453a8:	af00      	add	r7, sp, #0
100453aa:	0002      	movs	r2, r0
100453ac:	1dfb      	adds	r3, r7, #7
100453ae:	701a      	strb	r2, [r3, #0]
	if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
100453b0:	f00b fa58 	bl	10050864 <APP_BLE_Get_Server_Connection_Status>
100453b4:	0003      	movs	r3, r0
100453b6:	2b02      	cmp	r3, #2
100453b8:	d104      	bne.n	100453c4 <USART_WriteTx+0x20>
		BLUETOOTH_WriteBuffer(input);
100453ba:	1dfb      	adds	r3, r7, #7
100453bc:	781b      	ldrb	r3, [r3, #0]
100453be:	0018      	movs	r0, r3
100453c0:	f7fb fa1c 	bl	100407fc <BLUETOOTH_WriteBuffer>
		return UARTSUCCESS;
	} else {
		return UARTFAILED;
	}
#else
	return UARTFAILED;
100453c4:	2325      	movs	r3, #37	@ 0x25
#endif
}
100453c6:	0018      	movs	r0, r3
100453c8:	46bd      	mov	sp, r7
100453ca:	b002      	add	sp, #8
100453cc:	bd80      	pop	{r7, pc}

100453ce <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
100453ce:	b580      	push	{r7, lr}
100453d0:	af00      	add	r7, sp, #0
#if USEUSART == 1
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
#else
	return 00;
100453d2:	2300      	movs	r3, #0
#endif
}
100453d4:	0018      	movs	r0, r3
100453d6:	46bd      	mov	sp, r7
100453d8:	bd80      	pop	{r7, pc}

100453da <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
100453da:	b580      	push	{r7, lr}
100453dc:	b082      	sub	sp, #8
100453de:	af00      	add	r7, sp, #0
100453e0:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
100453e2:	2000      	movs	r0, #0
100453e4:	f00d fc4c 	bl	10052c80 <APP_DEBUG_SIGNAL_SET>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
100453e8:	f008 fe62 	bl	1004e0b0 <HW_RNG_Init>
100453ec:	1e03      	subs	r3, r0, #0
100453ee:	d001      	beq.n	100453f4 <MX_APPE_Init+0x1a>
  {
    Error_Handler();
100453f0:	f7fb fb46 	bl	10040a80 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
100453f4:	f008 fd00 	bl	1004ddf8 <HW_AES_Init>
  HW_PKA_Init();
100453f8:	f008 fdf2 	bl	1004dfe0 <HW_PKA_Init>
  APP_BLE_Init();
100453fc:	f00b f86c 	bl	100504d8 <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10045400:	2000      	movs	r0, #0
10045402:	f00d fc47 	bl	10052c94 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10045406:	2300      	movs	r3, #0
}
10045408:	0018      	movs	r0, r3
1004540a:	46bd      	mov	sp, r7
1004540c:	b002      	add	sp, #8
1004540e:	bd80      	pop	{r7, pc}

10045410 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10045410:	b580      	push	{r7, lr}
10045412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10045414:	2301      	movs	r3, #1
10045416:	425b      	negs	r3, r3
10045418:	0018      	movs	r0, r3
1004541a:	f00d fc4b 	bl	10052cb4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
1004541e:	46c0      	nop			@ (mov r8, r8)
10045420:	46bd      	mov	sp, r7
10045422:	bd80      	pop	{r7, pc}

10045424 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10045424:	b580      	push	{r7, lr}
10045426:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10045428:	46c0      	nop			@ (mov r8, r8)
}
1004542a:	46bd      	mov	sp, r7
1004542c:	bd80      	pop	{r7, pc}

1004542e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
1004542e:	b580      	push	{r7, lr}
10045430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10045432:	46c0      	nop			@ (mov r8, r8)
10045434:	46bd      	mov	sp, r7
10045436:	bd80      	pop	{r7, pc}

10045438 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10045438:	b580      	push	{r7, lr}
1004543a:	b082      	sub	sp, #8
1004543c:	af00      	add	r7, sp, #0
1004543e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10045440:	687b      	ldr	r3, [r7, #4]
10045442:	691b      	ldr	r3, [r3, #16]
}
10045444:	0018      	movs	r0, r3
10045446:	46bd      	mov	sp, r7
10045448:	b002      	add	sp, #8
1004544a:	bd80      	pop	{r7, pc}

1004544c <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
1004544c:	b580      	push	{r7, lr}
1004544e:	b084      	sub	sp, #16
10045450:	af00      	add	r7, sp, #0
10045452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10045454:	4b07      	ldr	r3, [pc, #28]	@ (10045474 <LL_APB2_GRP1_EnableClock+0x28>)
10045456:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10045458:	4b06      	ldr	r3, [pc, #24]	@ (10045474 <LL_APB2_GRP1_EnableClock+0x28>)
1004545a:	687a      	ldr	r2, [r7, #4]
1004545c:	430a      	orrs	r2, r1
1004545e:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10045460:	4b04      	ldr	r3, [pc, #16]	@ (10045474 <LL_APB2_GRP1_EnableClock+0x28>)
10045462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10045464:	687a      	ldr	r2, [r7, #4]
10045466:	4013      	ands	r3, r2
10045468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004546a:	68fb      	ldr	r3, [r7, #12]
}
1004546c:	46c0      	nop			@ (mov r8, r8)
1004546e:	46bd      	mov	sp, r7
10045470:	b004      	add	sp, #16
10045472:	bd80      	pop	{r7, pc}
10045474:	48400000 	.word	0x48400000

10045478 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10045478:	b580      	push	{r7, lr}
1004547a:	b082      	sub	sp, #8
1004547c:	af00      	add	r7, sp, #0
1004547e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10045480:	4b06      	ldr	r3, [pc, #24]	@ (1004549c <LL_APB2_GRP1_IsEnabledClock+0x24>)
10045482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10045484:	687a      	ldr	r2, [r7, #4]
10045486:	4013      	ands	r3, r2
10045488:	687a      	ldr	r2, [r7, #4]
1004548a:	429a      	cmp	r2, r3
1004548c:	d101      	bne.n	10045492 <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004548e:	2301      	movs	r3, #1
10045490:	e000      	b.n	10045494 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10045492:	2300      	movs	r3, #0
}
10045494:	0018      	movs	r0, r3
10045496:	46bd      	mov	sp, r7
10045498:	b002      	add	sp, #8
1004549a:	bd80      	pop	{r7, pc}
1004549c:	48400000 	.word	0x48400000

100454a0 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
100454a0:	b580      	push	{r7, lr}
100454a2:	b082      	sub	sp, #8
100454a4:	af00      	add	r7, sp, #0
100454a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100454a8:	4b04      	ldr	r3, [pc, #16]	@ (100454bc <LL_APB2_GRP1_ForceReset+0x1c>)
100454aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100454ac:	4b03      	ldr	r3, [pc, #12]	@ (100454bc <LL_APB2_GRP1_ForceReset+0x1c>)
100454ae:	687a      	ldr	r2, [r7, #4]
100454b0:	430a      	orrs	r2, r1
100454b2:	641a      	str	r2, [r3, #64]	@ 0x40
}
100454b4:	46c0      	nop			@ (mov r8, r8)
100454b6:	46bd      	mov	sp, r7
100454b8:	b002      	add	sp, #8
100454ba:	bd80      	pop	{r7, pc}
100454bc:	48400000 	.word	0x48400000

100454c0 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
100454c0:	b580      	push	{r7, lr}
100454c2:	b082      	sub	sp, #8
100454c4:	af00      	add	r7, sp, #0
100454c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100454c8:	4b05      	ldr	r3, [pc, #20]	@ (100454e0 <LL_APB2_GRP1_ReleaseReset+0x20>)
100454ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100454cc:	687b      	ldr	r3, [r7, #4]
100454ce:	43d9      	mvns	r1, r3
100454d0:	4b03      	ldr	r3, [pc, #12]	@ (100454e0 <LL_APB2_GRP1_ReleaseReset+0x20>)
100454d2:	400a      	ands	r2, r1
100454d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
100454d6:	46c0      	nop			@ (mov r8, r8)
100454d8:	46bd      	mov	sp, r7
100454da:	b002      	add	sp, #8
100454dc:	bd80      	pop	{r7, pc}
100454de:	46c0      	nop			@ (mov r8, r8)
100454e0:	48400000 	.word	0x48400000

100454e4 <main>:
 * @author Caitlin Bonesio
 *
 */
#include "FLASH.h"
int main(void)
{
100454e4:	b580      	push	{r7, lr}
100454e6:	b086      	sub	sp, #24
100454e8:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
100454ea:	f7fb fa9f 	bl	10040a2c <BOARD_Init>
100454ee:	0003      	movs	r3, r0
100454f0:	2b01      	cmp	r3, #1
100454f2:	d001      	beq.n	100454f8 <main+0x14>
		BOARD_CrashHandler();
100454f4:	f7fb fabe 	bl	10040a74 <BOARD_CrashHandler>
	}

	MX_RADIO_Init();
100454f8:	f000 f89a 	bl	10045630 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
100454fc:	f000 f8b6 	bl	1004566c <MX_RADIO_TIMER_Init>
	MX_RNG_Init();
10045500:	f000 f8ea 	bl	100456d8 <MX_RNG_Init>
	MX_PKA_Init();
10045504:	f000 f880 	bl	10045608 <MX_PKA_Init>
	//Initialize BLE middleware
	MX_APPE_Init(NULL);
10045508:	2000      	movs	r0, #0
1004550a:	f7ff ff66 	bl	100453da <MX_APPE_Init>


	BLUETOOTH_BufferInit();
1004550e:	f7fb f95d 	bl	100407cc <BLUETOOTH_BufferInit>
	// Initialize all configured peripherals
	UARTs_Init();
10045512:	f7ff fe47 	bl	100451a4 <UARTs_Init>
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
10045516:	2300      	movs	r3, #0
10045518:	617b      	str	r3, [r7, #20]
1004551a:	e013      	b.n	10045544 <main+0x60>
		EventQueues[i] = FIFO_Create();
1004551c:	f7fd fc2e 	bl	10042d7c <FIFO_Create>
10045520:	0001      	movs	r1, r0
10045522:	4b35      	ldr	r3, [pc, #212]	@ (100455f8 <main+0x114>)
10045524:	697a      	ldr	r2, [r7, #20]
10045526:	0092      	lsls	r2, r2, #2
10045528:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
1004552a:	4b34      	ldr	r3, [pc, #208]	@ (100455fc <main+0x118>)
1004552c:	697a      	ldr	r2, [r7, #20]
1004552e:	0092      	lsls	r2, r2, #2
10045530:	58d3      	ldr	r3, [r2, r3]
10045532:	4a31      	ldr	r2, [pc, #196]	@ (100455f8 <main+0x114>)
10045534:	6979      	ldr	r1, [r7, #20]
10045536:	0089      	lsls	r1, r1, #2
10045538:	588a      	ldr	r2, [r1, r2]
1004553a:	0010      	movs	r0, r2
1004553c:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
1004553e:	697b      	ldr	r3, [r7, #20]
10045540:	3301      	adds	r3, #1
10045542:	617b      	str	r3, [r7, #20]
10045544:	697b      	ldr	r3, [r7, #20]
10045546:	2b03      	cmp	r3, #3
10045548:	dde8      	ble.n	1004551c <main+0x38>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
1004554a:	2300      	movs	r3, #0
1004554c:	613b      	str	r3, [r7, #16]
1004554e:	e012      	b.n	10045576 <main+0x92>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10045550:	4b2b      	ldr	r3, [pc, #172]	@ (10045600 <main+0x11c>)
10045552:	693a      	ldr	r2, [r7, #16]
10045554:	0092      	lsls	r2, r2, #2
10045556:	58d3      	ldr	r3, [r2, r3]
10045558:	4798      	blx	r3
1004555a:	0003      	movs	r3, r0
1004555c:	001a      	movs	r2, r3
1004555e:	1d3b      	adds	r3, r7, #4
10045560:	601a      	str	r2, [r3, #0]
10045562:	1d3b      	adds	r3, r7, #4
10045564:	781b      	ldrb	r3, [r3, #0]
10045566:	b25b      	sxtb	r3, r3
10045568:	3301      	adds	r3, #1
1004556a:	d101      	bne.n	10045570 <main+0x8c>
				BOARD_CrashHandler();//We've crashed
1004556c:	f7fb fa82 	bl	10040a74 <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10045570:	693b      	ldr	r3, [r7, #16]
10045572:	3301      	adds	r3, #1
10045574:	613b      	str	r3, [r7, #16]
10045576:	693b      	ldr	r3, [r7, #16]
10045578:	2b03      	cmp	r3, #3
1004557a:	dde9      	ble.n	10045550 <main+0x6c>
			}
		}
		uint8_t done = 0;
1004557c:	230f      	movs	r3, #15
1004557e:	18fb      	adds	r3, r7, r3
10045580:	2200      	movs	r2, #0
10045582:	701a      	strb	r2, [r3, #0]
		while(!done){
10045584:	e030      	b.n	100455e8 <main+0x104>
			//run all module event handlers
			done = 1;//assume we're done
10045586:	230f      	movs	r3, #15
10045588:	18fb      	adds	r3, r7, r3
1004558a:	2201      	movs	r2, #1
1004558c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
1004558e:	2300      	movs	r3, #0
10045590:	60bb      	str	r3, [r7, #8]
10045592:	e026      	b.n	100455e2 <main+0xfe>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
10045594:	4b18      	ldr	r3, [pc, #96]	@ (100455f8 <main+0x114>)
10045596:	68ba      	ldr	r2, [r7, #8]
10045598:	0092      	lsls	r2, r2, #2
1004559a:	58d3      	ldr	r3, [r2, r3]
1004559c:	0018      	movs	r0, r3
1004559e:	f7fd fc60 	bl	10042e62 <FIFO_Dequeue>
100455a2:	0003      	movs	r3, r0
100455a4:	001a      	movs	r2, r3
100455a6:	003b      	movs	r3, r7
100455a8:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
100455aa:	4b13      	ldr	r3, [pc, #76]	@ (100455f8 <main+0x114>)
100455ac:	68ba      	ldr	r2, [r7, #8]
100455ae:	0092      	lsls	r2, r2, #2
100455b0:	58d3      	ldr	r3, [r2, r3]
100455b2:	0018      	movs	r0, r3
100455b4:	f7fd fca7 	bl	10042f06 <FIFO_GetSize>
100455b8:	1e03      	subs	r3, r0, #0
100455ba:	d003      	beq.n	100455c4 <main+0xe0>
					done = 0;//if any queue is not empty, we are not done
100455bc:	230f      	movs	r3, #15
100455be:	18fb      	adds	r3, r7, r3
100455c0:	2200      	movs	r2, #0
100455c2:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
100455c4:	003b      	movs	r3, r7
100455c6:	781b      	ldrb	r3, [r3, #0]
100455c8:	b25b      	sxtb	r3, r3
100455ca:	2b00      	cmp	r3, #0
100455cc:	d006      	beq.n	100455dc <main+0xf8>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
100455ce:	4b0d      	ldr	r3, [pc, #52]	@ (10045604 <main+0x120>)
100455d0:	68ba      	ldr	r2, [r7, #8]
100455d2:	0092      	lsls	r2, r2, #2
100455d4:	58d2      	ldr	r2, [r2, r3]
100455d6:	003b      	movs	r3, r7
100455d8:	6818      	ldr	r0, [r3, #0]
100455da:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
100455dc:	68bb      	ldr	r3, [r7, #8]
100455de:	3301      	adds	r3, #1
100455e0:	60bb      	str	r3, [r7, #8]
100455e2:	68bb      	ldr	r3, [r7, #8]
100455e4:	2b03      	cmp	r3, #3
100455e6:	ddd5      	ble.n	10045594 <main+0xb0>
		while(!done){
100455e8:	230f      	movs	r3, #15
100455ea:	18fb      	adds	r3, r7, r3
100455ec:	781b      	ldrb	r3, [r3, #0]
100455ee:	2b00      	cmp	r3, #0
100455f0:	d0c9      	beq.n	10045586 <main+0xa2>
					}
				}
			}
		}
		//Run Bluetooth Middleware
	    MX_APPE_Process();
100455f2:	f7ff ff0d 	bl	10045410 <MX_APPE_Process>
	while(1){
100455f6:	e7a8      	b.n	1004554a <main+0x66>
100455f8:	2000217c 	.word	0x2000217c
100455fc:	200026dc 	.word	0x200026dc
10045600:	200026ec 	.word	0x200026ec
10045604:	200026fc 	.word	0x200026fc

10045608 <MX_PKA_Init>:




static void MX_PKA_Init(void)
{
10045608:	b580      	push	{r7, lr}
1004560a:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
1004560c:	4b06      	ldr	r3, [pc, #24]	@ (10045628 <MX_PKA_Init+0x20>)
1004560e:	4a07      	ldr	r2, [pc, #28]	@ (1004562c <MX_PKA_Init+0x24>)
10045610:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10045612:	4b05      	ldr	r3, [pc, #20]	@ (10045628 <MX_PKA_Init+0x20>)
10045614:	0018      	movs	r0, r3
10045616:	f003 fbf1 	bl	10048dfc <HAL_PKA_Init>
1004561a:	1e03      	subs	r3, r0, #0
1004561c:	d001      	beq.n	10045622 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
1004561e:	f7fb fa2f 	bl	10040a80 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
10045622:	46c0      	nop			@ (mov r8, r8)
10045624:	46bd      	mov	sp, r7
10045626:	bd80      	pop	{r7, pc}
10045628:	2000218c 	.word	0x2000218c
1004562c:	48300000 	.word	0x48300000

10045630 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10045630:	b580      	push	{r7, lr}
10045632:	b082      	sub	sp, #8
10045634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */
//
  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10045636:	2300      	movs	r3, #0
10045638:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */
//
  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004563a:	2001      	movs	r0, #1
1004563c:	f7ff ff1c 	bl	10045478 <LL_APB2_GRP1_IsEnabledClock>
10045640:	1e03      	subs	r3, r0, #0
10045642:	d108      	bne.n	10045656 <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10045644:	2001      	movs	r0, #1
10045646:	f7ff ff2b 	bl	100454a0 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
1004564a:	2001      	movs	r0, #1
1004564c:	f7ff ff38 	bl	100454c0 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10045650:	2001      	movs	r0, #1
10045652:	f7ff fefb 	bl	1004544c <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10045656:	23c0      	movs	r3, #192	@ 0xc0
10045658:	05db      	lsls	r3, r3, #23
1004565a:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
1004565c:	1d3b      	adds	r3, r7, #4
1004565e:	0018      	movs	r0, r3
10045660:	f003 fe2a 	bl	100492b8 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */
//
  /* USER CODE END RADIO_Init 2 */

}
10045664:	46c0      	nop			@ (mov r8, r8)
10045666:	46bd      	mov	sp, r7
10045668:	b002      	add	sp, #8
1004566a:	bd80      	pop	{r7, pc}

1004566c <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
1004566c:	b580      	push	{r7, lr}
1004566e:	b082      	sub	sp, #8
10045670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
//
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10045672:	003b      	movs	r3, r7
10045674:	0018      	movs	r0, r3
10045676:	2308      	movs	r3, #8
10045678:	001a      	movs	r2, r3
1004567a:	2100      	movs	r1, #0
1004567c:	f020 ff10 	bl	100664a0 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
//
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10045680:	2001      	movs	r0, #1
10045682:	f7ff fef9 	bl	10045478 <LL_APB2_GRP1_IsEnabledClock>
10045686:	1e03      	subs	r3, r0, #0
10045688:	d108      	bne.n	1004569c <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
1004568a:	2001      	movs	r0, #1
1004568c:	f7ff ff08 	bl	100454a0 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10045690:	2001      	movs	r0, #1
10045692:	f7ff ff15 	bl	100454c0 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10045696:	2001      	movs	r0, #1
10045698:	f7ff fed8 	bl	1004544c <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
1004569c:	46c0      	nop			@ (mov r8, r8)
1004569e:	4b0c      	ldr	r3, [pc, #48]	@ (100456d0 <MX_RADIO_TIMER_Init+0x64>)
100456a0:	0018      	movs	r0, r3
100456a2:	f7ff fec9 	bl	10045438 <LL_RADIO_TIMER_GetAbsoluteTime>
100456a6:	0003      	movs	r3, r0
100456a8:	2b0f      	cmp	r3, #15
100456aa:	d9f8      	bls.n	1004569e <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
100456ac:	003b      	movs	r3, r7
100456ae:	22a0      	movs	r2, #160	@ 0xa0
100456b0:	0052      	lsls	r2, r2, #1
100456b2:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = TRUE;
100456b4:	003b      	movs	r3, r7
100456b6:	2201      	movs	r2, #1
100456b8:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 10000;
100456ba:	003b      	movs	r3, r7
100456bc:	4a05      	ldr	r2, [pc, #20]	@ (100456d4 <MX_RADIO_TIMER_Init+0x68>)
100456be:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
100456c0:	003b      	movs	r3, r7
100456c2:	0018      	movs	r0, r3
100456c4:	f004 fb1e 	bl	10049d04 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */
//
  /* USER CODE END RADIO_TIMER_Init 2 */

}
100456c8:	46c0      	nop			@ (mov r8, r8)
100456ca:	46bd      	mov	sp, r7
100456cc:	b002      	add	sp, #8
100456ce:	bd80      	pop	{r7, pc}
100456d0:	60001800 	.word	0x60001800
100456d4:	00002710 	.word	0x00002710

100456d8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
100456d8:	b580      	push	{r7, lr}
100456da:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
100456dc:	4b06      	ldr	r3, [pc, #24]	@ (100456f8 <MX_RNG_Init+0x20>)
100456de:	4a07      	ldr	r2, [pc, #28]	@ (100456fc <MX_RNG_Init+0x24>)
100456e0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
100456e2:	4b05      	ldr	r3, [pc, #20]	@ (100456f8 <MX_RNG_Init+0x20>)
100456e4:	0018      	movs	r0, r3
100456e6:	f006 fb2d 	bl	1004bd44 <HAL_RNG_Init>
100456ea:	1e03      	subs	r3, r0, #0
100456ec:	d001      	beq.n	100456f2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
100456ee:	f7fb f9c7 	bl	10040a80 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
100456f2:	46c0      	nop			@ (mov r8, r8)
100456f4:	46bd      	mov	sp, r7
100456f6:	bd80      	pop	{r7, pc}
100456f8:	20002198 	.word	0x20002198
100456fc:	48600000 	.word	0x48600000

10045700 <LL_AHB1_GRP1_EnableClock>:
{
10045700:	b580      	push	{r7, lr}
10045702:	b084      	sub	sp, #16
10045704:	af00      	add	r7, sp, #0
10045706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10045708:	4b07      	ldr	r3, [pc, #28]	@ (10045728 <LL_AHB1_GRP1_EnableClock+0x28>)
1004570a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004570c:	4b06      	ldr	r3, [pc, #24]	@ (10045728 <LL_AHB1_GRP1_EnableClock+0x28>)
1004570e:	687a      	ldr	r2, [r7, #4]
10045710:	430a      	orrs	r2, r1
10045712:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10045714:	4b04      	ldr	r3, [pc, #16]	@ (10045728 <LL_AHB1_GRP1_EnableClock+0x28>)
10045716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10045718:	687a      	ldr	r2, [r7, #4]
1004571a:	4013      	ands	r3, r2
1004571c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004571e:	68fb      	ldr	r3, [r7, #12]
}
10045720:	46c0      	nop			@ (mov r8, r8)
10045722:	46bd      	mov	sp, r7
10045724:	b004      	add	sp, #16
10045726:	bd80      	pop	{r7, pc}
10045728:	48400000 	.word	0x48400000

1004572c <LL_APB0_GRP1_EnableClock>:
{
1004572c:	b580      	push	{r7, lr}
1004572e:	b084      	sub	sp, #16
10045730:	af00      	add	r7, sp, #0
10045732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10045734:	4b07      	ldr	r3, [pc, #28]	@ (10045754 <LL_APB0_GRP1_EnableClock+0x28>)
10045736:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10045738:	4b06      	ldr	r3, [pc, #24]	@ (10045754 <LL_APB0_GRP1_EnableClock+0x28>)
1004573a:	687a      	ldr	r2, [r7, #4]
1004573c:	430a      	orrs	r2, r1
1004573e:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10045740:	4b04      	ldr	r3, [pc, #16]	@ (10045754 <LL_APB0_GRP1_EnableClock+0x28>)
10045742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10045744:	687a      	ldr	r2, [r7, #4]
10045746:	4013      	ands	r3, r2
10045748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004574a:	68fb      	ldr	r3, [r7, #12]
}
1004574c:	46c0      	nop			@ (mov r8, r8)
1004574e:	46bd      	mov	sp, r7
10045750:	b004      	add	sp, #16
10045752:	bd80      	pop	{r7, pc}
10045754:	48400000 	.word	0x48400000

10045758 <LL_APB1_GRP1_EnableClock>:
{
10045758:	b580      	push	{r7, lr}
1004575a:	b084      	sub	sp, #16
1004575c:	af00      	add	r7, sp, #0
1004575e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10045760:	4b07      	ldr	r3, [pc, #28]	@ (10045780 <LL_APB1_GRP1_EnableClock+0x28>)
10045762:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10045764:	4b06      	ldr	r3, [pc, #24]	@ (10045780 <LL_APB1_GRP1_EnableClock+0x28>)
10045766:	687a      	ldr	r2, [r7, #4]
10045768:	430a      	orrs	r2, r1
1004576a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
1004576c:	4b04      	ldr	r3, [pc, #16]	@ (10045780 <LL_APB1_GRP1_EnableClock+0x28>)
1004576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10045770:	687a      	ldr	r2, [r7, #4]
10045772:	4013      	ands	r3, r2
10045774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10045776:	68fb      	ldr	r3, [r7, #12]
}
10045778:	46c0      	nop			@ (mov r8, r8)
1004577a:	46bd      	mov	sp, r7
1004577c:	b004      	add	sp, #16
1004577e:	bd80      	pop	{r7, pc}
10045780:	48400000 	.word	0x48400000

10045784 <LL_APB2_GRP1_EnableClock>:
{
10045784:	b580      	push	{r7, lr}
10045786:	b084      	sub	sp, #16
10045788:	af00      	add	r7, sp, #0
1004578a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004578c:	4b07      	ldr	r3, [pc, #28]	@ (100457ac <LL_APB2_GRP1_EnableClock+0x28>)
1004578e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10045790:	4b06      	ldr	r3, [pc, #24]	@ (100457ac <LL_APB2_GRP1_EnableClock+0x28>)
10045792:	687a      	ldr	r2, [r7, #4]
10045794:	430a      	orrs	r2, r1
10045796:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10045798:	4b04      	ldr	r3, [pc, #16]	@ (100457ac <LL_APB2_GRP1_EnableClock+0x28>)
1004579a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004579c:	687a      	ldr	r2, [r7, #4]
1004579e:	4013      	ands	r3, r2
100457a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100457a2:	68fb      	ldr	r3, [r7, #12]
}
100457a4:	46c0      	nop			@ (mov r8, r8)
100457a6:	46bd      	mov	sp, r7
100457a8:	b004      	add	sp, #16
100457aa:	bd80      	pop	{r7, pc}
100457ac:	48400000 	.word	0x48400000

100457b0 <LL_APB2_GRP1_IsEnabledClock>:
{
100457b0:	b580      	push	{r7, lr}
100457b2:	b082      	sub	sp, #8
100457b4:	af00      	add	r7, sp, #0
100457b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100457b8:	4b06      	ldr	r3, [pc, #24]	@ (100457d4 <LL_APB2_GRP1_IsEnabledClock+0x24>)
100457ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100457bc:	687a      	ldr	r2, [r7, #4]
100457be:	4013      	ands	r3, r2
100457c0:	687a      	ldr	r2, [r7, #4]
100457c2:	429a      	cmp	r2, r3
100457c4:	d101      	bne.n	100457ca <LL_APB2_GRP1_IsEnabledClock+0x1a>
100457c6:	2301      	movs	r3, #1
100457c8:	e000      	b.n	100457cc <LL_APB2_GRP1_IsEnabledClock+0x1c>
100457ca:	2300      	movs	r3, #0
}
100457cc:	0018      	movs	r0, r3
100457ce:	46bd      	mov	sp, r7
100457d0:	b002      	add	sp, #8
100457d2:	bd80      	pop	{r7, pc}
100457d4:	48400000 	.word	0x48400000

100457d8 <LL_APB2_GRP1_ForceReset>:
{
100457d8:	b580      	push	{r7, lr}
100457da:	b082      	sub	sp, #8
100457dc:	af00      	add	r7, sp, #0
100457de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100457e0:	4b04      	ldr	r3, [pc, #16]	@ (100457f4 <LL_APB2_GRP1_ForceReset+0x1c>)
100457e2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100457e4:	4b03      	ldr	r3, [pc, #12]	@ (100457f4 <LL_APB2_GRP1_ForceReset+0x1c>)
100457e6:	687a      	ldr	r2, [r7, #4]
100457e8:	430a      	orrs	r2, r1
100457ea:	641a      	str	r2, [r3, #64]	@ 0x40
}
100457ec:	46c0      	nop			@ (mov r8, r8)
100457ee:	46bd      	mov	sp, r7
100457f0:	b002      	add	sp, #8
100457f2:	bd80      	pop	{r7, pc}
100457f4:	48400000 	.word	0x48400000

100457f8 <LL_APB2_GRP1_ReleaseReset>:
{
100457f8:	b580      	push	{r7, lr}
100457fa:	b082      	sub	sp, #8
100457fc:	af00      	add	r7, sp, #0
100457fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10045800:	4b05      	ldr	r3, [pc, #20]	@ (10045818 <LL_APB2_GRP1_ReleaseReset+0x20>)
10045802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10045804:	687b      	ldr	r3, [r7, #4]
10045806:	43d9      	mvns	r1, r3
10045808:	4b03      	ldr	r3, [pc, #12]	@ (10045818 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004580a:	400a      	ands	r2, r1
1004580c:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004580e:	46c0      	nop			@ (mov r8, r8)
10045810:	46bd      	mov	sp, r7
10045812:	b002      	add	sp, #8
10045814:	bd80      	pop	{r7, pc}
10045816:	46c0      	nop			@ (mov r8, r8)
10045818:	48400000 	.word	0x48400000

1004581c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1004581c:	b580      	push	{r7, lr}
1004581e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10045820:	2380      	movs	r3, #128	@ 0x80
10045822:	005b      	lsls	r3, r3, #1
10045824:	0018      	movs	r0, r3
10045826:	f7ff ff81 	bl	1004572c <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
1004582a:	46c0      	nop			@ (mov r8, r8)
1004582c:	46bd      	mov	sp, r7
1004582e:	bd80      	pop	{r7, pc}

10045830 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10045830:	b590      	push	{r4, r7, lr}
10045832:	b089      	sub	sp, #36	@ 0x24
10045834:	af00      	add	r7, sp, #0
10045836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10045838:	240c      	movs	r4, #12
1004583a:	193b      	adds	r3, r7, r4
1004583c:	0018      	movs	r0, r3
1004583e:	2314      	movs	r3, #20
10045840:	001a      	movs	r2, r3
10045842:	2100      	movs	r1, #0
10045844:	f020 fe2c 	bl	100664a0 <memset>
  if(hi2c->Instance==I2C1)
10045848:	687b      	ldr	r3, [r7, #4]
1004584a:	681a      	ldr	r2, [r3, #0]
1004584c:	2382      	movs	r3, #130	@ 0x82
1004584e:	05db      	lsls	r3, r3, #23
10045850:	429a      	cmp	r2, r3
10045852:	d147      	bne.n	100458e4 <HAL_I2C_MspInit+0xb4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
10045854:	2004      	movs	r0, #4
10045856:	f7ff ff53 	bl	10045700 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
1004585a:	2008      	movs	r0, #8
1004585c:	f7ff ff50 	bl	10045700 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PA0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10045860:	193b      	adds	r3, r7, r4
10045862:	2202      	movs	r2, #2
10045864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10045866:	193b      	adds	r3, r7, r4
10045868:	2212      	movs	r2, #18
1004586a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004586c:	193b      	adds	r3, r7, r4
1004586e:	2200      	movs	r2, #0
10045870:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10045872:	193b      	adds	r3, r7, r4
10045874:	2200      	movs	r2, #0
10045876:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10045878:	193b      	adds	r3, r7, r4
1004587a:	2200      	movs	r2, #0
1004587c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004587e:	193a      	adds	r2, r7, r4
10045880:	2390      	movs	r3, #144	@ 0x90
10045882:	05db      	lsls	r3, r3, #23
10045884:	0011      	movs	r1, r2
10045886:	0018      	movs	r0, r3
10045888:	f001 f844 	bl	10046914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
1004588c:	0021      	movs	r1, r4
1004588e:	187b      	adds	r3, r7, r1
10045890:	2201      	movs	r2, #1
10045892:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10045894:	187b      	adds	r3, r7, r1
10045896:	2212      	movs	r2, #18
10045898:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004589a:	187b      	adds	r3, r7, r1
1004589c:	2200      	movs	r2, #0
1004589e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100458a0:	187b      	adds	r3, r7, r1
100458a2:	2200      	movs	r2, #0
100458a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100458a6:	187b      	adds	r3, r7, r1
100458a8:	2200      	movs	r2, #0
100458aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100458ac:	187a      	adds	r2, r7, r1
100458ae:	2390      	movs	r3, #144	@ 0x90
100458b0:	05db      	lsls	r3, r3, #23
100458b2:	0011      	movs	r1, r2
100458b4:	0018      	movs	r0, r3
100458b6:	f001 f82d 	bl	10046914 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
100458ba:	2102      	movs	r1, #2
100458bc:	2000      	movs	r0, #0
100458be:	f003 faf9 	bl	10048eb4 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
100458c2:	2101      	movs	r1, #1
100458c4:	2000      	movs	r0, #0
100458c6:	f003 faf5 	bl	10048eb4 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
100458ca:	2102      	movs	r1, #2
100458cc:	2000      	movs	r0, #0
100458ce:	f003 fb1f 	bl	10048f10 <HAL_PWREx_DisableGPIOPullDown>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
100458d2:	2101      	movs	r1, #1
100458d4:	2000      	movs	r0, #0
100458d6:	f003 fb1b 	bl	10048f10 <HAL_PWREx_DisableGPIOPullDown>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
100458da:	2380      	movs	r3, #128	@ 0x80
100458dc:	039b      	lsls	r3, r3, #14
100458de:	0018      	movs	r0, r3
100458e0:	f7ff ff3a 	bl	10045758 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
100458e4:	46c0      	nop			@ (mov r8, r8)
100458e6:	46bd      	mov	sp, r7
100458e8:	b009      	add	sp, #36	@ 0x24
100458ea:	bd90      	pop	{r4, r7, pc}

100458ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
100458ec:	b590      	push	{r4, r7, lr}
100458ee:	b08f      	sub	sp, #60	@ 0x3c
100458f0:	af00      	add	r7, sp, #0
100458f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100458f4:	2324      	movs	r3, #36	@ 0x24
100458f6:	18fb      	adds	r3, r7, r3
100458f8:	0018      	movs	r0, r3
100458fa:	2314      	movs	r3, #20
100458fc:	001a      	movs	r2, r3
100458fe:	2100      	movs	r1, #0
10045900:	f020 fdce 	bl	100664a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10045904:	240c      	movs	r4, #12
10045906:	193b      	adds	r3, r7, r4
10045908:	0018      	movs	r0, r3
1004590a:	2318      	movs	r3, #24
1004590c:	001a      	movs	r2, r3
1004590e:	2100      	movs	r1, #0
10045910:	f020 fdc6 	bl	100664a0 <memset>
  if(huart->Instance==LPUART1)
10045914:	687b      	ldr	r3, [r7, #4]
10045916:	681b      	ldr	r3, [r3, #0]
10045918:	4a46      	ldr	r2, [pc, #280]	@ (10045a34 <HAL_UART_MspInit+0x148>)
1004591a:	4293      	cmp	r3, r2
1004591c:	d000      	beq.n	10045920 <HAL_UART_MspInit+0x34>
1004591e:	e084      	b.n	10045a2a <HAL_UART_MspInit+0x13e>
//
    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
10045920:	193b      	adds	r3, r7, r4
10045922:	2210      	movs	r2, #16
10045924:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10045926:	193b      	adds	r3, r7, r4
10045928:	2200      	movs	r2, #0
1004592a:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004592c:	193b      	adds	r3, r7, r4
1004592e:	0018      	movs	r0, r3
10045930:	f006 f930 	bl	1004bb94 <HAL_RCCEx_PeriphCLKConfig>
10045934:	1e03      	subs	r3, r0, #0
10045936:	d001      	beq.n	1004593c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
10045938:	f7fb f8a2 	bl	10040a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
1004593c:	2380      	movs	r3, #128	@ 0x80
1004593e:	005b      	lsls	r3, r3, #1
10045940:	0018      	movs	r0, r3
10045942:	f7ff ff09 	bl	10045758 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10045946:	2008      	movs	r0, #8
10045948:	f7ff feda 	bl	10045700 <LL_AHB1_GRP1_EnableClock>
    PB7     ------> LPUART1_RX


    */

    GPIO_InitStruct.Pin = GPIO_PIN_3;
1004594c:	2424      	movs	r4, #36	@ 0x24
1004594e:	193b      	adds	r3, r7, r4
10045950:	2208      	movs	r2, #8
10045952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10045954:	193b      	adds	r3, r7, r4
10045956:	2202      	movs	r2, #2
10045958:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004595a:	193b      	adds	r3, r7, r4
1004595c:	2200      	movs	r2, #0
1004595e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10045960:	193b      	adds	r3, r7, r4
10045962:	2200      	movs	r2, #0
10045964:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
10045966:	193b      	adds	r3, r7, r4
10045968:	2201      	movs	r2, #1
1004596a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
1004596c:	193b      	adds	r3, r7, r4
1004596e:	4a32      	ldr	r2, [pc, #200]	@ (10045a38 <HAL_UART_MspInit+0x14c>)
10045970:	0019      	movs	r1, r3
10045972:	0010      	movs	r0, r2
10045974:	f000 ffce 	bl	10046914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10045978:	193b      	adds	r3, r7, r4
1004597a:	2280      	movs	r2, #128	@ 0x80
1004597c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004597e:	193b      	adds	r3, r7, r4
10045980:	2202      	movs	r2, #2
10045982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10045984:	193b      	adds	r3, r7, r4
10045986:	2200      	movs	r2, #0
10045988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004598a:	193b      	adds	r3, r7, r4
1004598c:	2200      	movs	r2, #0
1004598e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
10045990:	193b      	adds	r3, r7, r4
10045992:	2203      	movs	r2, #3
10045994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10045996:	193b      	adds	r3, r7, r4
10045998:	4a27      	ldr	r2, [pc, #156]	@ (10045a38 <HAL_UART_MspInit+0x14c>)
1004599a:	0019      	movs	r1, r3
1004599c:	0010      	movs	r0, r2
1004599e:	f000 ffb9 	bl	10046914 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
100459a2:	2188      	movs	r1, #136	@ 0x88
100459a4:	2001      	movs	r0, #1
100459a6:	f003 fa85 	bl	10048eb4 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
100459aa:	2188      	movs	r1, #136	@ 0x88
100459ac:	2001      	movs	r0, #1
100459ae:	f003 faaf 	bl	10048f10 <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
100459b2:	2200      	movs	r2, #0
100459b4:	2101      	movs	r1, #1
100459b6:	2009      	movs	r0, #9
100459b8:	f000 fdcc 	bl	10046554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
100459bc:	2009      	movs	r0, #9
100459be:	f000 fdde 	bl	1004657e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */
    //    PB0     ------> USART_RX
    //    PA1     ------> USART_TX
    GPIO_InitStruct.Pin = GPIO_PIN_0;
100459c2:	193b      	adds	r3, r7, r4
100459c4:	2201      	movs	r2, #1
100459c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100459c8:	193b      	adds	r3, r7, r4
100459ca:	2202      	movs	r2, #2
100459cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100459ce:	193b      	adds	r3, r7, r4
100459d0:	2200      	movs	r2, #0
100459d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100459d4:	193b      	adds	r3, r7, r4
100459d6:	2200      	movs	r2, #0
100459d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
100459da:	193b      	adds	r3, r7, r4
100459dc:	2200      	movs	r2, #0
100459de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100459e0:	193b      	adds	r3, r7, r4
100459e2:	4a15      	ldr	r2, [pc, #84]	@ (10045a38 <HAL_UART_MspInit+0x14c>)
100459e4:	0019      	movs	r1, r3
100459e6:	0010      	movs	r0, r2
100459e8:	f000 ff94 	bl	10046914 <HAL_GPIO_Init>

    //default to PA1 being in I2C control
    GPIO_InitStruct.Pin = GPIO_PIN_1;
100459ec:	0021      	movs	r1, r4
100459ee:	187b      	adds	r3, r7, r1
100459f0:	2202      	movs	r2, #2
100459f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100459f4:	187b      	adds	r3, r7, r1
100459f6:	2212      	movs	r2, #18
100459f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100459fa:	187b      	adds	r3, r7, r1
100459fc:	2200      	movs	r2, #0
100459fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10045a00:	187b      	adds	r3, r7, r1
10045a02:	2200      	movs	r2, #0
10045a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10045a06:	187b      	adds	r3, r7, r1
10045a08:	2200      	movs	r2, #0
10045a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10045a0c:	187a      	adds	r2, r7, r1
10045a0e:	2390      	movs	r3, #144	@ 0x90
10045a10:	05db      	lsls	r3, r3, #23
10045a12:	0011      	movs	r1, r2
10045a14:	0018      	movs	r0, r3
10045a16:	f000 ff7d 	bl	10046914 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_0);
10045a1a:	2101      	movs	r1, #1
10045a1c:	2001      	movs	r0, #1
10045a1e:	f003 fa49 	bl	10048eb4 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
10045a22:	2102      	movs	r1, #2
10045a24:	2000      	movs	r0, #0
10045a26:	f003 fa73 	bl	10048f10 <HAL_PWREx_DisableGPIOPullDown>
//
    /* USER CODE END LPUART1_MspInit 1 */

  }

}
10045a2a:	46c0      	nop			@ (mov r8, r8)
10045a2c:	46bd      	mov	sp, r7
10045a2e:	b00f      	add	sp, #60	@ 0x3c
10045a30:	bd90      	pop	{r4, r7, pc}
10045a32:	46c0      	nop			@ (mov r8, r8)
10045a34:	41005000 	.word	0x41005000
10045a38:	48100000 	.word	0x48100000

10045a3c <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10045a3c:	b580      	push	{r7, lr}
10045a3e:	b082      	sub	sp, #8
10045a40:	af00      	add	r7, sp, #0
10045a42:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
10045a44:	687b      	ldr	r3, [r7, #4]
10045a46:	681b      	ldr	r3, [r3, #0]
10045a48:	4a05      	ldr	r2, [pc, #20]	@ (10045a60 <HAL_PKA_MspInit+0x24>)
10045a4a:	4293      	cmp	r3, r2
10045a4c:	d104      	bne.n	10045a58 <HAL_PKA_MspInit+0x1c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
10045a4e:	2380      	movs	r3, #128	@ 0x80
10045a50:	025b      	lsls	r3, r3, #9
10045a52:	0018      	movs	r0, r3
10045a54:	f7ff fe54 	bl	10045700 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END PKA_MspInit 1 */

  }

}
10045a58:	46c0      	nop			@ (mov r8, r8)
10045a5a:	46bd      	mov	sp, r7
10045a5c:	b002      	add	sp, #8
10045a5e:	bd80      	pop	{r7, pc}
10045a60:	48300000 	.word	0x48300000

10045a64 <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10045a64:	b590      	push	{r4, r7, lr}
10045a66:	b089      	sub	sp, #36	@ 0x24
10045a68:	af00      	add	r7, sp, #0
10045a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10045a6c:	2408      	movs	r4, #8
10045a6e:	193b      	adds	r3, r7, r4
10045a70:	0018      	movs	r0, r3
10045a72:	2318      	movs	r3, #24
10045a74:	001a      	movs	r2, r3
10045a76:	2100      	movs	r1, #0
10045a78:	f020 fd12 	bl	100664a0 <memset>
  if(hradio->Instance==RADIO)
10045a7c:	687b      	ldr	r3, [r7, #4]
10045a7e:	681a      	ldr	r2, [r3, #0]
10045a80:	23c0      	movs	r3, #192	@ 0xc0
10045a82:	05db      	lsls	r3, r3, #23
10045a84:	429a      	cmp	r2, r3
10045a86:	d12d      	bne.n	10045ae4 <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10045a88:	193b      	adds	r3, r7, r4
10045a8a:	2201      	movs	r2, #1
10045a8c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10045a8e:	193b      	adds	r3, r7, r4
10045a90:	2204      	movs	r2, #4
10045a92:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10045a94:	193b      	adds	r3, r7, r4
10045a96:	0018      	movs	r0, r3
10045a98:	f006 f87c 	bl	1004bb94 <HAL_RCCEx_PeriphCLKConfig>
10045a9c:	1e03      	subs	r3, r0, #0
10045a9e:	d001      	beq.n	10045aa4 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10045aa0:	f7fa ffee 	bl	10040a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10045aa4:	2001      	movs	r0, #1
10045aa6:	f7ff fe83 	bl	100457b0 <LL_APB2_GRP1_IsEnabledClock>
10045aaa:	1e03      	subs	r3, r0, #0
10045aac:	d108      	bne.n	10045ac0 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10045aae:	2001      	movs	r0, #1
10045ab0:	f7ff fe92 	bl	100457d8 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10045ab4:	2001      	movs	r0, #1
10045ab6:	f7ff fe9f 	bl	100457f8 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10045aba:	2001      	movs	r0, #1
10045abc:	f7ff fe62 	bl	10045784 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10045ac0:	f00d f8f2 	bl	10052ca8 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10045ac4:	2200      	movs	r2, #0
10045ac6:	2100      	movs	r1, #0
10045ac8:	2012      	movs	r0, #18
10045aca:	f000 fd43 	bl	10046554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10045ace:	2012      	movs	r0, #18
10045ad0:	f000 fd55 	bl	1004657e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10045ad4:	2200      	movs	r2, #0
10045ad6:	2100      	movs	r1, #0
10045ad8:	2019      	movs	r0, #25
10045ada:	f000 fd3b 	bl	10046554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10045ade:	2019      	movs	r0, #25
10045ae0:	f000 fd4d 	bl	1004657e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
10045ae4:	46c0      	nop			@ (mov r8, r8)
10045ae6:	46bd      	mov	sp, r7
10045ae8:	b009      	add	sp, #36	@ 0x24
10045aea:	bd90      	pop	{r4, r7, pc}

10045aec <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
10045aec:	b580      	push	{r7, lr}
10045aee:	b082      	sub	sp, #8
10045af0:	af00      	add	r7, sp, #0
10045af2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
10045af4:	687b      	ldr	r3, [r7, #4]
10045af6:	681b      	ldr	r3, [r3, #0]
10045af8:	4a05      	ldr	r2, [pc, #20]	@ (10045b10 <HAL_RNG_MspInit+0x24>)
10045afa:	4293      	cmp	r3, r2
10045afc:	d104      	bne.n	10045b08 <HAL_RNG_MspInit+0x1c>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
10045afe:	2380      	movs	r3, #128	@ 0x80
10045b00:	02db      	lsls	r3, r3, #11
10045b02:	0018      	movs	r0, r3
10045b04:	f7ff fdfc 	bl	10045700 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
10045b08:	46c0      	nop			@ (mov r8, r8)
10045b0a:	46bd      	mov	sp, r7
10045b0c:	b002      	add	sp, #8
10045b0e:	bd80      	pop	{r7, pc}
10045b10:	48600000 	.word	0x48600000

10045b14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
10045b14:	b580      	push	{r7, lr}
10045b16:	b082      	sub	sp, #8
10045b18:	af00      	add	r7, sp, #0
10045b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
10045b1c:	687b      	ldr	r3, [r7, #4]
10045b1e:	681b      	ldr	r3, [r3, #0]
10045b20:	4a08      	ldr	r2, [pc, #32]	@ (10045b44 <HAL_TIM_Base_MspInit+0x30>)
10045b22:	4293      	cmp	r3, r2
10045b24:	d10a      	bne.n	10045b3c <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
10045b26:	2001      	movs	r0, #1
10045b28:	f7ff fe00 	bl	1004572c <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
10045b2c:	2200      	movs	r2, #0
10045b2e:	2101      	movs	r1, #1
10045b30:	200a      	movs	r0, #10
10045b32:	f000 fd0f 	bl	10046554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
10045b36:	200a      	movs	r0, #10
10045b38:	f000 fd21 	bl	1004657e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
10045b3c:	46c0      	nop			@ (mov r8, r8)
10045b3e:	46bd      	mov	sp, r7
10045b40:	b002      	add	sp, #8
10045b42:	bd80      	pop	{r7, pc}
10045b44:	40002000 	.word	0x40002000

10045b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10045b48:	b580      	push	{r7, lr}
10045b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10045b4c:	46c0      	nop			@ (mov r8, r8)
10045b4e:	e7fd      	b.n	10045b4c <NMI_Handler+0x4>

10045b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10045b50:	b580      	push	{r7, lr}
10045b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10045b54:	46c0      	nop			@ (mov r8, r8)
10045b56:	e7fd      	b.n	10045b54 <HardFault_Handler+0x4>

10045b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10045b58:	b580      	push	{r7, lr}
10045b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10045b5c:	46c0      	nop			@ (mov r8, r8)
10045b5e:	46bd      	mov	sp, r7
10045b60:	bd80      	pop	{r7, pc}

10045b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10045b62:	b580      	push	{r7, lr}
10045b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10045b66:	46c0      	nop			@ (mov r8, r8)
10045b68:	46bd      	mov	sp, r7
10045b6a:	bd80      	pop	{r7, pc}

10045b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10045b6c:	b580      	push	{r7, lr}
10045b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10045b70:	f000 fbfa 	bl	10046368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10045b74:	46c0      	nop			@ (mov r8, r8)
10045b76:	46bd      	mov	sp, r7
10045b78:	bd80      	pop	{r7, pc}

10045b7a <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
10045b7a:	b580      	push	{r7, lr}
10045b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
10045b7e:	2390      	movs	r3, #144	@ 0x90
10045b80:	05db      	lsls	r3, r3, #23
10045b82:	2101      	movs	r1, #1
10045b84:	0018      	movs	r0, r3
10045b86:	f000 fb7d 	bl	10046284 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
10045b8a:	46c0      	nop			@ (mov r8, r8)
10045b8c:	46bd      	mov	sp, r7
10045b8e:	bd80      	pop	{r7, pc}

10045b90 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10045b90:	b580      	push	{r7, lr}
10045b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
10045b94:	2380      	movs	r3, #128	@ 0x80
10045b96:	01db      	lsls	r3, r3, #7
10045b98:	4a06      	ldr	r2, [pc, #24]	@ (10045bb4 <GPIOB_IRQHandler+0x24>)
10045b9a:	0019      	movs	r1, r3
10045b9c:	0010      	movs	r0, r2
10045b9e:	f000 fb71 	bl	10046284 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
10045ba2:	4b04      	ldr	r3, [pc, #16]	@ (10045bb4 <GPIOB_IRQHandler+0x24>)
10045ba4:	2120      	movs	r1, #32
10045ba6:	0018      	movs	r0, r3
10045ba8:	f000 fb6c 	bl	10046284 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
10045bac:	46c0      	nop			@ (mov r8, r8)
10045bae:	46bd      	mov	sp, r7
10045bb0:	bd80      	pop	{r7, pc}
10045bb2:	46c0      	nop			@ (mov r8, r8)
10045bb4:	48100000 	.word	0x48100000

10045bb8 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10045bb8:	b580      	push	{r7, lr}
10045bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10045bbc:	f005 fb14 	bl	1004b1e8 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10045bc0:	46c0      	nop			@ (mov r8, r8)
10045bc2:	46bd      	mov	sp, r7
10045bc4:	bd80      	pop	{r7, pc}

10045bc6 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10045bc6:	b580      	push	{r7, lr}
10045bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
10045bca:	f005 fb16 	bl	1004b1fa <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10045bce:	46c0      	nop			@ (mov r8, r8)
10045bd0:	46bd      	mov	sp, r7
10045bd2:	bd80      	pop	{r7, pc}

10045bd4 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10045bd4:	b580      	push	{r7, lr}
10045bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10045bd8:	f003 ff06 	bl	100499e8 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10045bdc:	46c0      	nop			@ (mov r8, r8)
10045bde:	46bd      	mov	sp, r7
10045be0:	bd80      	pop	{r7, pc}

10045be2 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10045be2:	b580      	push	{r7, lr}
10045be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10045be6:	f003 ff20 	bl	10049a2a <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
10045bea:	46c0      	nop			@ (mov r8, r8)
10045bec:	46bd      	mov	sp, r7
10045bee:	bd80      	pop	{r7, pc}

10045bf0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10045bf0:	b580      	push	{r7, lr}
10045bf2:	b086      	sub	sp, #24
10045bf4:	af00      	add	r7, sp, #0
10045bf6:	60f8      	str	r0, [r7, #12]
10045bf8:	60b9      	str	r1, [r7, #8]
10045bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10045bfc:	2300      	movs	r3, #0
10045bfe:	617b      	str	r3, [r7, #20]
10045c00:	e00a      	b.n	10045c18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
10045c02:	e000      	b.n	10045c06 <_read+0x16>
10045c04:	bf00      	nop
10045c06:	0001      	movs	r1, r0
10045c08:	68bb      	ldr	r3, [r7, #8]
10045c0a:	1c5a      	adds	r2, r3, #1
10045c0c:	60ba      	str	r2, [r7, #8]
10045c0e:	b2ca      	uxtb	r2, r1
10045c10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10045c12:	697b      	ldr	r3, [r7, #20]
10045c14:	3301      	adds	r3, #1
10045c16:	617b      	str	r3, [r7, #20]
10045c18:	697a      	ldr	r2, [r7, #20]
10045c1a:	687b      	ldr	r3, [r7, #4]
10045c1c:	429a      	cmp	r2, r3
10045c1e:	dbf0      	blt.n	10045c02 <_read+0x12>
  }

  return len;
10045c20:	687b      	ldr	r3, [r7, #4]
}
10045c22:	0018      	movs	r0, r3
10045c24:	46bd      	mov	sp, r7
10045c26:	b006      	add	sp, #24
10045c28:	bd80      	pop	{r7, pc}

10045c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10045c2a:	b580      	push	{r7, lr}
10045c2c:	b086      	sub	sp, #24
10045c2e:	af00      	add	r7, sp, #0
10045c30:	60f8      	str	r0, [r7, #12]
10045c32:	60b9      	str	r1, [r7, #8]
10045c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10045c36:	2300      	movs	r3, #0
10045c38:	617b      	str	r3, [r7, #20]
10045c3a:	e009      	b.n	10045c50 <_write+0x26>
  {
    __io_putchar(*ptr++);
10045c3c:	68bb      	ldr	r3, [r7, #8]
10045c3e:	1c5a      	adds	r2, r3, #1
10045c40:	60ba      	str	r2, [r7, #8]
10045c42:	781b      	ldrb	r3, [r3, #0]
10045c44:	0018      	movs	r0, r3
10045c46:	e000      	b.n	10045c4a <_write+0x20>
10045c48:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10045c4a:	697b      	ldr	r3, [r7, #20]
10045c4c:	3301      	adds	r3, #1
10045c4e:	617b      	str	r3, [r7, #20]
10045c50:	697a      	ldr	r2, [r7, #20]
10045c52:	687b      	ldr	r3, [r7, #4]
10045c54:	429a      	cmp	r2, r3
10045c56:	dbf1      	blt.n	10045c3c <_write+0x12>
  }
  return len;
10045c58:	687b      	ldr	r3, [r7, #4]
}
10045c5a:	0018      	movs	r0, r3
10045c5c:	46bd      	mov	sp, r7
10045c5e:	b006      	add	sp, #24
10045c60:	bd80      	pop	{r7, pc}

10045c62 <_close>:

int _close(int file)
{
10045c62:	b580      	push	{r7, lr}
10045c64:	b082      	sub	sp, #8
10045c66:	af00      	add	r7, sp, #0
10045c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10045c6a:	2301      	movs	r3, #1
10045c6c:	425b      	negs	r3, r3
}
10045c6e:	0018      	movs	r0, r3
10045c70:	46bd      	mov	sp, r7
10045c72:	b002      	add	sp, #8
10045c74:	bd80      	pop	{r7, pc}

10045c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
10045c76:	b580      	push	{r7, lr}
10045c78:	b082      	sub	sp, #8
10045c7a:	af00      	add	r7, sp, #0
10045c7c:	6078      	str	r0, [r7, #4]
10045c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10045c80:	683b      	ldr	r3, [r7, #0]
10045c82:	2280      	movs	r2, #128	@ 0x80
10045c84:	0192      	lsls	r2, r2, #6
10045c86:	605a      	str	r2, [r3, #4]
  return 0;
10045c88:	2300      	movs	r3, #0
}
10045c8a:	0018      	movs	r0, r3
10045c8c:	46bd      	mov	sp, r7
10045c8e:	b002      	add	sp, #8
10045c90:	bd80      	pop	{r7, pc}

10045c92 <_isatty>:

int _isatty(int file)
{
10045c92:	b580      	push	{r7, lr}
10045c94:	b082      	sub	sp, #8
10045c96:	af00      	add	r7, sp, #0
10045c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10045c9a:	2301      	movs	r3, #1
}
10045c9c:	0018      	movs	r0, r3
10045c9e:	46bd      	mov	sp, r7
10045ca0:	b002      	add	sp, #8
10045ca2:	bd80      	pop	{r7, pc}

10045ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10045ca4:	b580      	push	{r7, lr}
10045ca6:	b084      	sub	sp, #16
10045ca8:	af00      	add	r7, sp, #0
10045caa:	60f8      	str	r0, [r7, #12]
10045cac:	60b9      	str	r1, [r7, #8]
10045cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10045cb0:	2300      	movs	r3, #0
}
10045cb2:	0018      	movs	r0, r3
10045cb4:	46bd      	mov	sp, r7
10045cb6:	b004      	add	sp, #16
10045cb8:	bd80      	pop	{r7, pc}
	...

10045cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10045cbc:	b580      	push	{r7, lr}
10045cbe:	b086      	sub	sp, #24
10045cc0:	af00      	add	r7, sp, #0
10045cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10045cc4:	4a14      	ldr	r2, [pc, #80]	@ (10045d18 <_sbrk+0x5c>)
10045cc6:	4b15      	ldr	r3, [pc, #84]	@ (10045d1c <_sbrk+0x60>)
10045cc8:	1ad3      	subs	r3, r2, r3
10045cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10045ccc:	697b      	ldr	r3, [r7, #20]
10045cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10045cd0:	4b13      	ldr	r3, [pc, #76]	@ (10045d20 <_sbrk+0x64>)
10045cd2:	681b      	ldr	r3, [r3, #0]
10045cd4:	2b00      	cmp	r3, #0
10045cd6:	d102      	bne.n	10045cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10045cd8:	4b11      	ldr	r3, [pc, #68]	@ (10045d20 <_sbrk+0x64>)
10045cda:	4a12      	ldr	r2, [pc, #72]	@ (10045d24 <_sbrk+0x68>)
10045cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10045cde:	4b10      	ldr	r3, [pc, #64]	@ (10045d20 <_sbrk+0x64>)
10045ce0:	681a      	ldr	r2, [r3, #0]
10045ce2:	687b      	ldr	r3, [r7, #4]
10045ce4:	18d3      	adds	r3, r2, r3
10045ce6:	693a      	ldr	r2, [r7, #16]
10045ce8:	429a      	cmp	r2, r3
10045cea:	d207      	bcs.n	10045cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
10045cec:	f020 fc40 	bl	10066570 <__errno>
10045cf0:	0003      	movs	r3, r0
10045cf2:	220c      	movs	r2, #12
10045cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10045cf6:	2301      	movs	r3, #1
10045cf8:	425b      	negs	r3, r3
10045cfa:	e009      	b.n	10045d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10045cfc:	4b08      	ldr	r3, [pc, #32]	@ (10045d20 <_sbrk+0x64>)
10045cfe:	681b      	ldr	r3, [r3, #0]
10045d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10045d02:	4b07      	ldr	r3, [pc, #28]	@ (10045d20 <_sbrk+0x64>)
10045d04:	681a      	ldr	r2, [r3, #0]
10045d06:	687b      	ldr	r3, [r7, #4]
10045d08:	18d2      	adds	r2, r2, r3
10045d0a:	4b05      	ldr	r3, [pc, #20]	@ (10045d20 <_sbrk+0x64>)
10045d0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10045d0e:	68fb      	ldr	r3, [r7, #12]
}
10045d10:	0018      	movs	r0, r3
10045d12:	46bd      	mov	sp, r7
10045d14:	b006      	add	sp, #24
10045d16:	bd80      	pop	{r7, pc}
10045d18:	20006000 	.word	0x20006000
10045d1c:	00000c00 	.word	0x00000c00
10045d20:	200021ac 	.word	0x200021ac
10045d24:	20004b44 	.word	0x20004b44

10045d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10045d28:	b590      	push	{r4, r7, lr}
10045d2a:	b083      	sub	sp, #12
10045d2c:	af00      	add	r7, sp, #0
10045d2e:	0002      	movs	r2, r0
10045d30:	6039      	str	r1, [r7, #0]
10045d32:	1dfb      	adds	r3, r7, #7
10045d34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10045d36:	1dfb      	adds	r3, r7, #7
10045d38:	781b      	ldrb	r3, [r3, #0]
10045d3a:	2b7f      	cmp	r3, #127	@ 0x7f
10045d3c:	d828      	bhi.n	10045d90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045d3e:	4a2f      	ldr	r2, [pc, #188]	@ (10045dfc <__NVIC_SetPriority+0xd4>)
10045d40:	1dfb      	adds	r3, r7, #7
10045d42:	781b      	ldrb	r3, [r3, #0]
10045d44:	b25b      	sxtb	r3, r3
10045d46:	089b      	lsrs	r3, r3, #2
10045d48:	33c0      	adds	r3, #192	@ 0xc0
10045d4a:	009b      	lsls	r3, r3, #2
10045d4c:	589b      	ldr	r3, [r3, r2]
10045d4e:	1dfa      	adds	r2, r7, #7
10045d50:	7812      	ldrb	r2, [r2, #0]
10045d52:	0011      	movs	r1, r2
10045d54:	2203      	movs	r2, #3
10045d56:	400a      	ands	r2, r1
10045d58:	00d2      	lsls	r2, r2, #3
10045d5a:	21ff      	movs	r1, #255	@ 0xff
10045d5c:	4091      	lsls	r1, r2
10045d5e:	000a      	movs	r2, r1
10045d60:	43d2      	mvns	r2, r2
10045d62:	401a      	ands	r2, r3
10045d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045d66:	683b      	ldr	r3, [r7, #0]
10045d68:	019b      	lsls	r3, r3, #6
10045d6a:	22ff      	movs	r2, #255	@ 0xff
10045d6c:	401a      	ands	r2, r3
10045d6e:	1dfb      	adds	r3, r7, #7
10045d70:	781b      	ldrb	r3, [r3, #0]
10045d72:	0018      	movs	r0, r3
10045d74:	2303      	movs	r3, #3
10045d76:	4003      	ands	r3, r0
10045d78:	00db      	lsls	r3, r3, #3
10045d7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045d7c:	481f      	ldr	r0, [pc, #124]	@ (10045dfc <__NVIC_SetPriority+0xd4>)
10045d7e:	1dfb      	adds	r3, r7, #7
10045d80:	781b      	ldrb	r3, [r3, #0]
10045d82:	b25b      	sxtb	r3, r3
10045d84:	089b      	lsrs	r3, r3, #2
10045d86:	430a      	orrs	r2, r1
10045d88:	33c0      	adds	r3, #192	@ 0xc0
10045d8a:	009b      	lsls	r3, r3, #2
10045d8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10045d8e:	e031      	b.n	10045df4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045d90:	4a1b      	ldr	r2, [pc, #108]	@ (10045e00 <__NVIC_SetPriority+0xd8>)
10045d92:	1dfb      	adds	r3, r7, #7
10045d94:	781b      	ldrb	r3, [r3, #0]
10045d96:	0019      	movs	r1, r3
10045d98:	230f      	movs	r3, #15
10045d9a:	400b      	ands	r3, r1
10045d9c:	3b08      	subs	r3, #8
10045d9e:	089b      	lsrs	r3, r3, #2
10045da0:	3306      	adds	r3, #6
10045da2:	009b      	lsls	r3, r3, #2
10045da4:	18d3      	adds	r3, r2, r3
10045da6:	3304      	adds	r3, #4
10045da8:	681b      	ldr	r3, [r3, #0]
10045daa:	1dfa      	adds	r2, r7, #7
10045dac:	7812      	ldrb	r2, [r2, #0]
10045dae:	0011      	movs	r1, r2
10045db0:	2203      	movs	r2, #3
10045db2:	400a      	ands	r2, r1
10045db4:	00d2      	lsls	r2, r2, #3
10045db6:	21ff      	movs	r1, #255	@ 0xff
10045db8:	4091      	lsls	r1, r2
10045dba:	000a      	movs	r2, r1
10045dbc:	43d2      	mvns	r2, r2
10045dbe:	401a      	ands	r2, r3
10045dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045dc2:	683b      	ldr	r3, [r7, #0]
10045dc4:	019b      	lsls	r3, r3, #6
10045dc6:	22ff      	movs	r2, #255	@ 0xff
10045dc8:	401a      	ands	r2, r3
10045dca:	1dfb      	adds	r3, r7, #7
10045dcc:	781b      	ldrb	r3, [r3, #0]
10045dce:	0018      	movs	r0, r3
10045dd0:	2303      	movs	r3, #3
10045dd2:	4003      	ands	r3, r0
10045dd4:	00db      	lsls	r3, r3, #3
10045dd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045dd8:	4809      	ldr	r0, [pc, #36]	@ (10045e00 <__NVIC_SetPriority+0xd8>)
10045dda:	1dfb      	adds	r3, r7, #7
10045ddc:	781b      	ldrb	r3, [r3, #0]
10045dde:	001c      	movs	r4, r3
10045de0:	230f      	movs	r3, #15
10045de2:	4023      	ands	r3, r4
10045de4:	3b08      	subs	r3, #8
10045de6:	089b      	lsrs	r3, r3, #2
10045de8:	430a      	orrs	r2, r1
10045dea:	3306      	adds	r3, #6
10045dec:	009b      	lsls	r3, r3, #2
10045dee:	18c3      	adds	r3, r0, r3
10045df0:	3304      	adds	r3, #4
10045df2:	601a      	str	r2, [r3, #0]
}
10045df4:	46c0      	nop			@ (mov r8, r8)
10045df6:	46bd      	mov	sp, r7
10045df8:	b003      	add	sp, #12
10045dfa:	bd90      	pop	{r4, r7, pc}
10045dfc:	e000e100 	.word	0xe000e100
10045e00:	e000ed00 	.word	0xe000ed00

10045e04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10045e04:	b580      	push	{r7, lr}
10045e06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10045e08:	f3bf 8f4f 	dsb	sy
}
10045e0c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10045e0e:	4b04      	ldr	r3, [pc, #16]	@ (10045e20 <__NVIC_SystemReset+0x1c>)
10045e10:	4a04      	ldr	r2, [pc, #16]	@ (10045e24 <__NVIC_SystemReset+0x20>)
10045e12:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10045e14:	f3bf 8f4f 	dsb	sy
}
10045e18:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10045e1a:	46c0      	nop			@ (mov r8, r8)
10045e1c:	e7fd      	b.n	10045e1a <__NVIC_SystemReset+0x16>
10045e1e:	46c0      	nop			@ (mov r8, r8)
10045e20:	e000ed00 	.word	0xe000ed00
10045e24:	05fa0004 	.word	0x05fa0004

10045e28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10045e28:	b590      	push	{r4, r7, lr}
10045e2a:	b087      	sub	sp, #28
10045e2c:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10045e2e:	4a5e      	ldr	r2, [pc, #376]	@ (10045fa8 <SystemInit+0x180>)
10045e30:	2394      	movs	r3, #148	@ 0x94
10045e32:	58d3      	ldr	r3, [r2, r3]
10045e34:	2b00      	cmp	r3, #0
10045e36:	d10e      	bne.n	10045e56 <SystemInit+0x2e>
10045e38:	4b5c      	ldr	r3, [pc, #368]	@ (10045fac <SystemInit+0x184>)
10045e3a:	691b      	ldr	r3, [r3, #16]
10045e3c:	2b00      	cmp	r3, #0
10045e3e:	d103      	bne.n	10045e48 <SystemInit+0x20>
10045e40:	4b5a      	ldr	r3, [pc, #360]	@ (10045fac <SystemInit+0x184>)
10045e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045e44:	2b00      	cmp	r3, #0
10045e46:	d006      	beq.n	10045e56 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10045e48:	4b59      	ldr	r3, [pc, #356]	@ (10045fb0 <SystemInit+0x188>)
10045e4a:	2201      	movs	r2, #1
10045e4c:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10045e4e:	f7fa f9cb 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10045e52:	f7ff ffd7 	bl	10045e04 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10045e56:	4b57      	ldr	r3, [pc, #348]	@ (10045fb4 <SystemInit+0x18c>)
10045e58:	4a57      	ldr	r2, [pc, #348]	@ (10045fb8 <SystemInit+0x190>)
10045e5a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10045e5c:	4b55      	ldr	r3, [pc, #340]	@ (10045fb4 <SystemInit+0x18c>)
10045e5e:	689a      	ldr	r2, [r3, #8]
10045e60:	4b53      	ldr	r3, [pc, #332]	@ (10045fb0 <SystemInit+0x188>)
10045e62:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10045e64:	4b51      	ldr	r3, [pc, #324]	@ (10045fac <SystemInit+0x184>)
10045e66:	685a      	ldr	r2, [r3, #4]
10045e68:	4b50      	ldr	r3, [pc, #320]	@ (10045fac <SystemInit+0x184>)
10045e6a:	2120      	movs	r1, #32
10045e6c:	430a      	orrs	r2, r1
10045e6e:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10045e70:	4b4e      	ldr	r3, [pc, #312]	@ (10045fac <SystemInit+0x184>)
10045e72:	685a      	ldr	r2, [r3, #4]
10045e74:	4b4d      	ldr	r3, [pc, #308]	@ (10045fac <SystemInit+0x184>)
10045e76:	4951      	ldr	r1, [pc, #324]	@ (10045fbc <SystemInit+0x194>)
10045e78:	400a      	ands	r2, r1
10045e7a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10045e7c:	46c0      	nop			@ (mov r8, r8)
10045e7e:	4b4b      	ldr	r3, [pc, #300]	@ (10045fac <SystemInit+0x184>)
10045e80:	695b      	ldr	r3, [r3, #20]
10045e82:	2204      	movs	r2, #4
10045e84:	4013      	ands	r3, r2
10045e86:	2b04      	cmp	r3, #4
10045e88:	d1f9      	bne.n	10045e7e <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10045e8a:	4b48      	ldr	r3, [pc, #288]	@ (10045fac <SystemInit+0x184>)
10045e8c:	69db      	ldr	r3, [r3, #28]
10045e8e:	2230      	movs	r2, #48	@ 0x30
10045e90:	4393      	bics	r3, r2
10045e92:	001a      	movs	r2, r3
10045e94:	4b45      	ldr	r3, [pc, #276]	@ (10045fac <SystemInit+0x184>)
10045e96:	2120      	movs	r1, #32
10045e98:	430a      	orrs	r2, r1
10045e9a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10045e9c:	4b43      	ldr	r3, [pc, #268]	@ (10045fac <SystemInit+0x184>)
10045e9e:	69da      	ldr	r2, [r3, #28]
10045ea0:	4b42      	ldr	r3, [pc, #264]	@ (10045fac <SystemInit+0x184>)
10045ea2:	4947      	ldr	r1, [pc, #284]	@ (10045fc0 <SystemInit+0x198>)
10045ea4:	400a      	ands	r2, r1
10045ea6:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10045ea8:	4b40      	ldr	r3, [pc, #256]	@ (10045fac <SystemInit+0x184>)
10045eaa:	69da      	ldr	r2, [r3, #28]
10045eac:	4b3f      	ldr	r3, [pc, #252]	@ (10045fac <SystemInit+0x184>)
10045eae:	2180      	movs	r1, #128	@ 0x80
10045eb0:	0049      	lsls	r1, r1, #1
10045eb2:	430a      	orrs	r2, r1
10045eb4:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10045eb6:	4b43      	ldr	r3, [pc, #268]	@ (10045fc4 <SystemInit+0x19c>)
10045eb8:	681b      	ldr	r3, [r3, #0]
10045eba:	4a43      	ldr	r2, [pc, #268]	@ (10045fc8 <SystemInit+0x1a0>)
10045ebc:	4293      	cmp	r3, r2
10045ebe:	d055      	beq.n	10045f6c <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10045ec0:	231f      	movs	r3, #31
10045ec2:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10045ec4:	2308      	movs	r3, #8
10045ec6:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10045ec8:	230a      	movs	r3, #10
10045eca:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10045ecc:	2303      	movs	r3, #3
10045ece:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10045ed0:	4b35      	ldr	r3, [pc, #212]	@ (10045fa8 <SystemInit+0x180>)
10045ed2:	68db      	ldr	r3, [r3, #12]
10045ed4:	221e      	movs	r2, #30
10045ed6:	4393      	bics	r3, r2
10045ed8:	0019      	movs	r1, r3
10045eda:	68fb      	ldr	r3, [r7, #12]
10045edc:	005a      	lsls	r2, r3, #1
10045ede:	4b32      	ldr	r3, [pc, #200]	@ (10045fa8 <SystemInit+0x180>)
10045ee0:	430a      	orrs	r2, r1
10045ee2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10045ee4:	4b30      	ldr	r3, [pc, #192]	@ (10045fa8 <SystemInit+0x180>)
10045ee6:	68da      	ldr	r2, [r3, #12]
10045ee8:	4b2f      	ldr	r3, [pc, #188]	@ (10045fa8 <SystemInit+0x180>)
10045eea:	2101      	movs	r1, #1
10045eec:	430a      	orrs	r2, r1
10045eee:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10045ef0:	4b2d      	ldr	r3, [pc, #180]	@ (10045fa8 <SystemInit+0x180>)
10045ef2:	68db      	ldr	r3, [r3, #12]
10045ef4:	4a35      	ldr	r2, [pc, #212]	@ (10045fcc <SystemInit+0x1a4>)
10045ef6:	4013      	ands	r3, r2
10045ef8:	0019      	movs	r1, r3
10045efa:	693b      	ldr	r3, [r7, #16]
10045efc:	061a      	lsls	r2, r3, #24
10045efe:	4b2a      	ldr	r3, [pc, #168]	@ (10045fa8 <SystemInit+0x180>)
10045f00:	430a      	orrs	r2, r1
10045f02:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10045f04:	4b28      	ldr	r3, [pc, #160]	@ (10045fa8 <SystemInit+0x180>)
10045f06:	68da      	ldr	r2, [r3, #12]
10045f08:	4b27      	ldr	r3, [pc, #156]	@ (10045fa8 <SystemInit+0x180>)
10045f0a:	2180      	movs	r1, #128	@ 0x80
10045f0c:	0409      	lsls	r1, r1, #16
10045f0e:	430a      	orrs	r2, r1
10045f10:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10045f12:	4a26      	ldr	r2, [pc, #152]	@ (10045fac <SystemInit+0x184>)
10045f14:	2394      	movs	r3, #148	@ 0x94
10045f16:	58d3      	ldr	r3, [r2, r3]
10045f18:	4a2d      	ldr	r2, [pc, #180]	@ (10045fd0 <SystemInit+0x1a8>)
10045f1a:	401a      	ands	r2, r3
10045f1c:	68bb      	ldr	r3, [r7, #8]
10045f1e:	0199      	lsls	r1, r3, #6
10045f20:	23f0      	movs	r3, #240	@ 0xf0
10045f22:	009b      	lsls	r3, r3, #2
10045f24:	400b      	ands	r3, r1
10045f26:	4921      	ldr	r1, [pc, #132]	@ (10045fac <SystemInit+0x184>)
10045f28:	4313      	orrs	r3, r2
10045f2a:	2294      	movs	r2, #148	@ 0x94
10045f2c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10045f2e:	4a1f      	ldr	r2, [pc, #124]	@ (10045fac <SystemInit+0x184>)
10045f30:	2394      	movs	r3, #148	@ 0x94
10045f32:	58d3      	ldr	r3, [r2, r3]
10045f34:	491d      	ldr	r1, [pc, #116]	@ (10045fac <SystemInit+0x184>)
10045f36:	2220      	movs	r2, #32
10045f38:	4313      	orrs	r3, r2
10045f3a:	2294      	movs	r2, #148	@ 0x94
10045f3c:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10045f3e:	4a1b      	ldr	r2, [pc, #108]	@ (10045fac <SystemInit+0x184>)
10045f40:	2394      	movs	r3, #148	@ 0x94
10045f42:	58d3      	ldr	r3, [r2, r3]
10045f44:	4a23      	ldr	r2, [pc, #140]	@ (10045fd4 <SystemInit+0x1ac>)
10045f46:	401a      	ands	r2, r3
10045f48:	687b      	ldr	r3, [r7, #4]
10045f4a:	02d9      	lsls	r1, r3, #11
10045f4c:	23e0      	movs	r3, #224	@ 0xe0
10045f4e:	019b      	lsls	r3, r3, #6
10045f50:	400b      	ands	r3, r1
10045f52:	4916      	ldr	r1, [pc, #88]	@ (10045fac <SystemInit+0x184>)
10045f54:	4313      	orrs	r3, r2
10045f56:	2294      	movs	r2, #148	@ 0x94
10045f58:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10045f5a:	4a14      	ldr	r2, [pc, #80]	@ (10045fac <SystemInit+0x184>)
10045f5c:	2394      	movs	r3, #148	@ 0x94
10045f5e:	58d3      	ldr	r3, [r2, r3]
10045f60:	4912      	ldr	r1, [pc, #72]	@ (10045fac <SystemInit+0x184>)
10045f62:	2280      	movs	r2, #128	@ 0x80
10045f64:	00d2      	lsls	r2, r2, #3
10045f66:	4313      	orrs	r3, r2
10045f68:	2294      	movs	r2, #148	@ 0x94
10045f6a:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10045f6c:	2317      	movs	r3, #23
10045f6e:	18fb      	adds	r3, r7, r3
10045f70:	2200      	movs	r2, #0
10045f72:	701a      	strb	r2, [r3, #0]
10045f74:	e00d      	b.n	10045f92 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10045f76:	2417      	movs	r4, #23
10045f78:	193b      	adds	r3, r7, r4
10045f7a:	781b      	ldrb	r3, [r3, #0]
10045f7c:	b25b      	sxtb	r3, r3
10045f7e:	2103      	movs	r1, #3
10045f80:	0018      	movs	r0, r3
10045f82:	f7ff fed1 	bl	10045d28 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10045f86:	0021      	movs	r1, r4
10045f88:	187b      	adds	r3, r7, r1
10045f8a:	781a      	ldrb	r2, [r3, #0]
10045f8c:	187b      	adds	r3, r7, r1
10045f8e:	3201      	adds	r2, #1
10045f90:	701a      	strb	r2, [r3, #0]
10045f92:	2317      	movs	r3, #23
10045f94:	18fb      	adds	r3, r7, r3
10045f96:	781b      	ldrb	r3, [r3, #0]
10045f98:	2b1f      	cmp	r3, #31
10045f9a:	d9ec      	bls.n	10045f76 <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
10045f9c:	b662      	cpsie	i
}
10045f9e:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10045fa0:	46c0      	nop			@ (mov r8, r8)
10045fa2:	46bd      	mov	sp, r7
10045fa4:	b007      	add	sp, #28
10045fa6:	bd90      	pop	{r4, r7, pc}
10045fa8:	48400000 	.word	0x48400000
10045fac:	48500000 	.word	0x48500000
10045fb0:	20000004 	.word	0x20000004
10045fb4:	e000ed00 	.word	0xe000ed00
10045fb8:	10040000 	.word	0x10040000
10045fbc:	fffffeff 	.word	0xfffffeff
10045fc0:	fffffbff 	.word	0xfffffbff
10045fc4:	10001ef8 	.word	0x10001ef8
10045fc8:	fcbceccc 	.word	0xfcbceccc
10045fcc:	c0ffffff 	.word	0xc0ffffff
10045fd0:	fffffc3f 	.word	0xfffffc3f
10045fd4:	ffffc7ff 	.word	0xffffc7ff

10045fd8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10045fd8:	b580      	push	{r7, lr}
10045fda:	b082      	sub	sp, #8
10045fdc:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10045fde:	4b13      	ldr	r3, [pc, #76]	@ (1004602c <SystemCoreClockUpdate+0x54>)
10045fe0:	689b      	ldr	r3, [r3, #8]
10045fe2:	085b      	lsrs	r3, r3, #1
10045fe4:	b2da      	uxtb	r2, r3
10045fe6:	1dfb      	adds	r3, r7, #7
10045fe8:	2101      	movs	r1, #1
10045fea:	400a      	ands	r2, r1
10045fec:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10045fee:	4b0f      	ldr	r3, [pc, #60]	@ (1004602c <SystemCoreClockUpdate+0x54>)
10045ff0:	689b      	ldr	r3, [r3, #8]
10045ff2:	0a1b      	lsrs	r3, r3, #8
10045ff4:	b2da      	uxtb	r2, r3
10045ff6:	1dbb      	adds	r3, r7, #6
10045ff8:	2107      	movs	r1, #7
10045ffa:	400a      	ands	r2, r1
10045ffc:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10045ffe:	1dfb      	adds	r3, r7, #7
10046000:	781b      	ldrb	r3, [r3, #0]
10046002:	2b00      	cmp	r3, #0
10046004:	d007      	beq.n	10046016 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10046006:	1dbb      	adds	r3, r7, #6
10046008:	781b      	ldrb	r3, [r3, #0]
1004600a:	3b01      	subs	r3, #1
1004600c:	4a08      	ldr	r2, [pc, #32]	@ (10046030 <SystemCoreClockUpdate+0x58>)
1004600e:	40da      	lsrs	r2, r3
10046010:	4b08      	ldr	r3, [pc, #32]	@ (10046034 <SystemCoreClockUpdate+0x5c>)
10046012:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10046014:	e005      	b.n	10046022 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10046016:	1dbb      	adds	r3, r7, #6
10046018:	781b      	ldrb	r3, [r3, #0]
1004601a:	4a07      	ldr	r2, [pc, #28]	@ (10046038 <SystemCoreClockUpdate+0x60>)
1004601c:	40da      	lsrs	r2, r3
1004601e:	4b05      	ldr	r3, [pc, #20]	@ (10046034 <SystemCoreClockUpdate+0x5c>)
10046020:	601a      	str	r2, [r3, #0]
}
10046022:	46c0      	nop			@ (mov r8, r8)
10046024:	46bd      	mov	sp, r7
10046026:	b002      	add	sp, #8
10046028:	bd80      	pop	{r7, pc}
1004602a:	46c0      	nop			@ (mov r8, r8)
1004602c:	48400000 	.word	0x48400000
10046030:	01e84800 	.word	0x01e84800
10046034:	2000270c 	.word	0x2000270c
10046038:	03d09000 	.word	0x03d09000

1004603c <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
1004603c:	4810      	ldr	r0, [pc, #64]	@ (10046080 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
1004603e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10046040:	f7ff fef2 	bl	10045e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10046044:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10046046:	e003      	b.n	10046050 <LoopCopyDataInit>

10046048 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10046048:	4b0e      	ldr	r3, [pc, #56]	@ (10046084 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1004604a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1004604c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1004604e:	3104      	adds	r1, #4

10046050 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10046050:	480d      	ldr	r0, [pc, #52]	@ (10046088 <LoopForever+0xa>)
  ldr  r3, =_edata
10046052:	4b0e      	ldr	r3, [pc, #56]	@ (1004608c <LoopForever+0xe>)
  adds  r2, r0, r1
10046054:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10046056:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10046058:	d3f6      	bcc.n	10046048 <CopyDataInit>
  ldr  r2, =_sbss
1004605a:	4a0d      	ldr	r2, [pc, #52]	@ (10046090 <LoopForever+0x12>)
  b  LoopFillZerobss
1004605c:	e002      	b.n	10046064 <LoopFillZerobss>

1004605e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
1004605e:	2300      	movs	r3, #0
  str  r3, [r2]
10046060:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10046062:	3204      	adds	r2, #4

10046064 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10046064:	4b0b      	ldr	r3, [pc, #44]	@ (10046094 <LoopForever+0x16>)
  cmp  r2, r3
10046066:	429a      	cmp	r2, r3
  bcc  FillZerobss
10046068:	d3f9      	bcc.n	1004605e <FillZerobss>
  ldr  r2, =_sbssblue
1004606a:	4a0b      	ldr	r2, [pc, #44]	@ (10046098 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
1004606c:	e002      	b.n	10046074 <LoopFillZeroBlueRam>

1004606e <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
1004606e:	2300      	movs	r3, #0
  str  r3, [r2]
10046070:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10046072:	3204      	adds	r2, #4

10046074 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10046074:	4b09      	ldr	r3, [pc, #36]	@ (1004609c <LoopForever+0x1e>)
  cmp  r2, r3
10046076:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10046078:	d3f9      	bcc.n	1004606e <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
1004607a:	f7ff fa33 	bl	100454e4 <main>

1004607e <LoopForever>:

LoopForever:
    b LoopForever
1004607e:	e7fe      	b.n	1004607e <LoopForever>
   ldr   r0, =_estack
10046080:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10046084:	100682c0 	.word	0x100682c0
  ldr  r0, =_sdata
10046088:	2000260c 	.word	0x2000260c
  ldr  r3, =_edata
1004608c:	20002908 	.word	0x20002908
  ldr  r2, =_sbss
10046090:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10046094:	2000260c 	.word	0x2000260c
  ldr  r2, =_sbssblue
10046098:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
1004609c:	20000194 	.word	0x20000194

100460a0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
100460a0:	e7fe      	b.n	100460a0 <ADC_IRQHandler>
	...

100460a4 <LL_PWR_IsEnabledPUPDCfg>:
  * @brief  Check if pull-up and pull-down configuration is enabled
  * @rmtoll CR1          APC           LL_PWR_IsEnabledPUPDCfg
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
100460a4:	b580      	push	{r7, lr}
100460a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
100460a8:	4b05      	ldr	r3, [pc, #20]	@ (100460c0 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
100460aa:	681b      	ldr	r3, [r3, #0]
100460ac:	2210      	movs	r2, #16
100460ae:	4013      	ands	r3, r2
100460b0:	2b10      	cmp	r3, #16
100460b2:	d101      	bne.n	100460b8 <LL_PWR_IsEnabledPUPDCfg+0x14>
100460b4:	2301      	movs	r3, #1
100460b6:	e000      	b.n	100460ba <LL_PWR_IsEnabledPUPDCfg+0x16>
100460b8:	2300      	movs	r3, #0
}
100460ba:	0018      	movs	r0, r3
100460bc:	46bd      	mov	sp, r7
100460be:	bd80      	pop	{r7, pc}
100460c0:	48500000 	.word	0x48500000

100460c4 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
100460c4:	b580      	push	{r7, lr}
100460c6:	b082      	sub	sp, #8
100460c8:	af00      	add	r7, sp, #0
100460ca:	6078      	str	r0, [r7, #4]
100460cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
100460ce:	687b      	ldr	r3, [r7, #4]
100460d0:	3304      	adds	r3, #4
100460d2:	681a      	ldr	r2, [r3, #0]
100460d4:	683b      	ldr	r3, [r7, #0]
100460d6:	43d9      	mvns	r1, r3
100460d8:	687b      	ldr	r3, [r7, #4]
100460da:	3304      	adds	r3, #4
100460dc:	400a      	ands	r2, r1
100460de:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100460e0:	687b      	ldr	r3, [r7, #4]
100460e2:	6819      	ldr	r1, [r3, #0]
100460e4:	687b      	ldr	r3, [r7, #4]
100460e6:	683a      	ldr	r2, [r7, #0]
100460e8:	430a      	orrs	r2, r1
100460ea:	601a      	str	r2, [r3, #0]
}
100460ec:	46c0      	nop			@ (mov r8, r8)
100460ee:	46bd      	mov	sp, r7
100460f0:	b002      	add	sp, #8
100460f2:	bd80      	pop	{r7, pc}

100460f4 <LL_AHB1_GRP1_EnableClock>:
{
100460f4:	b580      	push	{r7, lr}
100460f6:	b084      	sub	sp, #16
100460f8:	af00      	add	r7, sp, #0
100460fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100460fc:	4b07      	ldr	r3, [pc, #28]	@ (1004611c <LL_AHB1_GRP1_EnableClock+0x28>)
100460fe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10046100:	4b06      	ldr	r3, [pc, #24]	@ (1004611c <LL_AHB1_GRP1_EnableClock+0x28>)
10046102:	687a      	ldr	r2, [r7, #4]
10046104:	430a      	orrs	r2, r1
10046106:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10046108:	4b04      	ldr	r3, [pc, #16]	@ (1004611c <LL_AHB1_GRP1_EnableClock+0x28>)
1004610a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004610c:	687a      	ldr	r2, [r7, #4]
1004610e:	4013      	ands	r3, r2
10046110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046112:	68fb      	ldr	r3, [r7, #12]
}
10046114:	46c0      	nop			@ (mov r8, r8)
10046116:	46bd      	mov	sp, r7
10046118:	b004      	add	sp, #16
1004611a:	bd80      	pop	{r7, pc}
1004611c:	48400000 	.word	0x48400000

10046120 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10046120:	b590      	push	{r4, r7, lr}
10046122:	b089      	sub	sp, #36	@ 0x24
10046124:	af00      	add	r7, sp, #0
10046126:	0002      	movs	r2, r0
10046128:	1dfb      	adds	r3, r7, #7
1004612a:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
1004612c:	1dfb      	adds	r3, r7, #7
1004612e:	781b      	ldrb	r3, [r3, #0]
10046130:	2b00      	cmp	r3, #0
10046132:	d103      	bne.n	1004613c <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10046134:	2008      	movs	r0, #8
10046136:	f7ff ffdd 	bl	100460f4 <LL_AHB1_GRP1_EnableClock>
1004613a:	e00a      	b.n	10046152 <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
1004613c:	1dfb      	adds	r3, r7, #7
1004613e:	781b      	ldrb	r3, [r3, #0]
10046140:	2b01      	cmp	r3, #1
10046142:	d103      	bne.n	1004614c <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10046144:	2008      	movs	r0, #8
10046146:	f7ff ffd5 	bl	100460f4 <LL_AHB1_GRP1_EnableClock>
1004614a:	e002      	b.n	10046152 <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
1004614c:	2008      	movs	r0, #8
1004614e:	f7ff ffd1 	bl	100460f4 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10046152:	1dfb      	adds	r3, r7, #7
10046154:	781a      	ldrb	r2, [r3, #0]
10046156:	4b28      	ldr	r3, [pc, #160]	@ (100461f8 <BSP_LED_Init+0xd8>)
10046158:	0052      	lsls	r2, r2, #1
1004615a:	5ad3      	ldrh	r3, [r2, r3]
1004615c:	001a      	movs	r2, r3
1004615e:	240c      	movs	r4, #12
10046160:	193b      	adds	r3, r7, r4
10046162:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10046164:	193b      	adds	r3, r7, r4
10046166:	2201      	movs	r2, #1
10046168:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004616a:	193b      	adds	r3, r7, r4
1004616c:	2201      	movs	r2, #1
1004616e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10046170:	193b      	adds	r3, r7, r4
10046172:	2202      	movs	r2, #2
10046174:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10046176:	1dfb      	adds	r3, r7, #7
10046178:	781a      	ldrb	r2, [r3, #0]
1004617a:	4b20      	ldr	r3, [pc, #128]	@ (100461fc <BSP_LED_Init+0xdc>)
1004617c:	0092      	lsls	r2, r2, #2
1004617e:	58d3      	ldr	r3, [r2, r3]
10046180:	193a      	adds	r2, r7, r4
10046182:	0011      	movs	r1, r2
10046184:	0018      	movs	r0, r3
10046186:	f000 fbc5 	bl	10046914 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004618a:	f7ff ff8b 	bl	100460a4 <LL_PWR_IsEnabledPUPDCfg>
1004618e:	1e03      	subs	r3, r0, #0
10046190:	d01f      	beq.n	100461d2 <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10046192:	1dfb      	adds	r3, r7, #7
10046194:	781a      	ldrb	r2, [r3, #0]
10046196:	4b19      	ldr	r3, [pc, #100]	@ (100461fc <BSP_LED_Init+0xdc>)
10046198:	0092      	lsls	r2, r2, #2
1004619a:	58d2      	ldr	r2, [r2, r3]
1004619c:	2390      	movs	r3, #144	@ 0x90
1004619e:	05db      	lsls	r3, r3, #23
100461a0:	429a      	cmp	r2, r3
100461a2:	d106      	bne.n	100461b2 <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
100461a4:	193b      	adds	r3, r7, r4
100461a6:	681b      	ldr	r3, [r3, #0]
100461a8:	4a15      	ldr	r2, [pc, #84]	@ (10046200 <BSP_LED_Init+0xe0>)
100461aa:	0019      	movs	r1, r3
100461ac:	0010      	movs	r0, r2
100461ae:	f7ff ff89 	bl	100460c4 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
100461b2:	1dfb      	adds	r3, r7, #7
100461b4:	781a      	ldrb	r2, [r3, #0]
100461b6:	4b11      	ldr	r3, [pc, #68]	@ (100461fc <BSP_LED_Init+0xdc>)
100461b8:	0092      	lsls	r2, r2, #2
100461ba:	58d3      	ldr	r3, [r2, r3]
100461bc:	4a11      	ldr	r2, [pc, #68]	@ (10046204 <BSP_LED_Init+0xe4>)
100461be:	4293      	cmp	r3, r2
100461c0:	d107      	bne.n	100461d2 <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
100461c2:	230c      	movs	r3, #12
100461c4:	18fb      	adds	r3, r7, r3
100461c6:	681b      	ldr	r3, [r3, #0]
100461c8:	4a0f      	ldr	r2, [pc, #60]	@ (10046208 <BSP_LED_Init+0xe8>)
100461ca:	0019      	movs	r1, r3
100461cc:	0010      	movs	r0, r2
100461ce:	f7ff ff79 	bl	100460c4 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100461d2:	1dfb      	adds	r3, r7, #7
100461d4:	781a      	ldrb	r2, [r3, #0]
100461d6:	4b09      	ldr	r3, [pc, #36]	@ (100461fc <BSP_LED_Init+0xdc>)
100461d8:	0092      	lsls	r2, r2, #2
100461da:	58d0      	ldr	r0, [r2, r3]
100461dc:	1dfb      	adds	r3, r7, #7
100461de:	781a      	ldrb	r2, [r3, #0]
100461e0:	4b05      	ldr	r3, [pc, #20]	@ (100461f8 <BSP_LED_Init+0xd8>)
100461e2:	0052      	lsls	r2, r2, #1
100461e4:	5ad3      	ldrh	r3, [r2, r3]
100461e6:	2201      	movs	r2, #1
100461e8:	0019      	movs	r1, r3
100461ea:	f000 fe38 	bl	10046e5e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
100461ee:	2300      	movs	r3, #0
}
100461f0:	0018      	movs	r0, r3
100461f2:	46bd      	mov	sp, r7
100461f4:	b009      	add	sp, #36	@ 0x24
100461f6:	bd90      	pop	{r4, r7, pc}
100461f8:	20002710 	.word	0x20002710
100461fc:	20002718 	.word	0x20002718
10046200:	48500020 	.word	0x48500020
10046204:	48100000 	.word	0x48100000
10046208:	48500028 	.word	0x48500028

1004620c <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
1004620c:	b580      	push	{r7, lr}
1004620e:	b082      	sub	sp, #8
10046210:	af00      	add	r7, sp, #0
10046212:	0002      	movs	r2, r0
10046214:	1dfb      	adds	r3, r7, #7
10046216:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10046218:	1dfb      	adds	r3, r7, #7
1004621a:	781a      	ldrb	r2, [r3, #0]
1004621c:	4b08      	ldr	r3, [pc, #32]	@ (10046240 <BSP_LED_On+0x34>)
1004621e:	0092      	lsls	r2, r2, #2
10046220:	58d0      	ldr	r0, [r2, r3]
10046222:	1dfb      	adds	r3, r7, #7
10046224:	781a      	ldrb	r2, [r3, #0]
10046226:	4b07      	ldr	r3, [pc, #28]	@ (10046244 <BSP_LED_On+0x38>)
10046228:	0052      	lsls	r2, r2, #1
1004622a:	5ad3      	ldrh	r3, [r2, r3]
1004622c:	2200      	movs	r2, #0
1004622e:	0019      	movs	r1, r3
10046230:	f000 fe15 	bl	10046e5e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10046234:	2300      	movs	r3, #0
}
10046236:	0018      	movs	r0, r3
10046238:	46bd      	mov	sp, r7
1004623a:	b002      	add	sp, #8
1004623c:	bd80      	pop	{r7, pc}
1004623e:	46c0      	nop			@ (mov r8, r8)
10046240:	20002718 	.word	0x20002718
10046244:	20002710 	.word	0x20002710

10046248 <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10046248:	b580      	push	{r7, lr}
1004624a:	b082      	sub	sp, #8
1004624c:	af00      	add	r7, sp, #0
1004624e:	0002      	movs	r2, r0
10046250:	1dfb      	adds	r3, r7, #7
10046252:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10046254:	1dfb      	adds	r3, r7, #7
10046256:	781a      	ldrb	r2, [r3, #0]
10046258:	4b08      	ldr	r3, [pc, #32]	@ (1004627c <BSP_LED_Off+0x34>)
1004625a:	0092      	lsls	r2, r2, #2
1004625c:	58d0      	ldr	r0, [r2, r3]
1004625e:	1dfb      	adds	r3, r7, #7
10046260:	781a      	ldrb	r2, [r3, #0]
10046262:	4b07      	ldr	r3, [pc, #28]	@ (10046280 <BSP_LED_Off+0x38>)
10046264:	0052      	lsls	r2, r2, #1
10046266:	5ad3      	ldrh	r3, [r2, r3]
10046268:	2201      	movs	r2, #1
1004626a:	0019      	movs	r1, r3
1004626c:	f000 fdf7 	bl	10046e5e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10046270:	2300      	movs	r3, #0
}
10046272:	0018      	movs	r0, r3
10046274:	46bd      	mov	sp, r7
10046276:	b002      	add	sp, #8
10046278:	bd80      	pop	{r7, pc}
1004627a:	46c0      	nop			@ (mov r8, r8)
1004627c:	20002718 	.word	0x20002718
10046280:	20002710 	.word	0x20002710

10046284 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10046284:	b580      	push	{r7, lr}
10046286:	b082      	sub	sp, #8
10046288:	af00      	add	r7, sp, #0
1004628a:	6078      	str	r0, [r7, #4]
1004628c:	000a      	movs	r2, r1
1004628e:	1cbb      	adds	r3, r7, #2
10046290:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
10046292:	1cbb      	adds	r3, r7, #2
10046294:	881a      	ldrh	r2, [r3, #0]
10046296:	687b      	ldr	r3, [r7, #4]
10046298:	0011      	movs	r1, r2
1004629a:	0018      	movs	r0, r3
1004629c:	f000 fdfc 	bl	10046e98 <HAL_GPIO_EXTI_IRQHandler>
}
100462a0:	46c0      	nop			@ (mov r8, r8)
100462a2:	46bd      	mov	sp, r7
100462a4:	b002      	add	sp, #8
100462a6:	bd80      	pop	{r7, pc}

100462a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100462a8:	b580      	push	{r7, lr}
100462aa:	b082      	sub	sp, #8
100462ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
100462ae:	1dfb      	adds	r3, r7, #7
100462b0:	2200      	movs	r2, #0
100462b2:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100462b4:	2003      	movs	r0, #3
100462b6:	f000 f80f 	bl	100462d8 <HAL_InitTick>
100462ba:	1e03      	subs	r3, r0, #0
100462bc:	d003      	beq.n	100462c6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100462be:	1dfb      	adds	r3, r7, #7
100462c0:	2201      	movs	r2, #1
100462c2:	701a      	strb	r2, [r3, #0]
100462c4:	e001      	b.n	100462ca <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100462c6:	f7ff faa9 	bl	1004581c <HAL_MspInit>
  }

  /* Return function status */
  return status;
100462ca:	1dfb      	adds	r3, r7, #7
100462cc:	781b      	ldrb	r3, [r3, #0]
}
100462ce:	0018      	movs	r0, r3
100462d0:	46bd      	mov	sp, r7
100462d2:	b002      	add	sp, #8
100462d4:	bd80      	pop	{r7, pc}
	...

100462d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100462d8:	b590      	push	{r4, r7, lr}
100462da:	b085      	sub	sp, #20
100462dc:	af00      	add	r7, sp, #0
100462de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100462e0:	230f      	movs	r3, #15
100462e2:	18fb      	adds	r3, r7, r3
100462e4:	2200      	movs	r2, #0
100462e6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100462e8:	4b1d      	ldr	r3, [pc, #116]	@ (10046360 <HAL_InitTick+0x88>)
100462ea:	781b      	ldrb	r3, [r3, #0]
100462ec:	2b00      	cmp	r3, #0
100462ee:	d02c      	beq.n	1004634a <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100462f0:	f005 fb66 	bl	1004b9c0 <HAL_RCC_GetSysClockFreq>
100462f4:	0004      	movs	r4, r0
100462f6:	4b1a      	ldr	r3, [pc, #104]	@ (10046360 <HAL_InitTick+0x88>)
100462f8:	781b      	ldrb	r3, [r3, #0]
100462fa:	0019      	movs	r1, r3
100462fc:	23fa      	movs	r3, #250	@ 0xfa
100462fe:	0098      	lsls	r0, r3, #2
10046300:	f7f9 ff9e 	bl	10040240 <__udivsi3>
10046304:	0003      	movs	r3, r0
10046306:	0019      	movs	r1, r3
10046308:	0020      	movs	r0, r4
1004630a:	f7f9 ff99 	bl	10040240 <__udivsi3>
1004630e:	0003      	movs	r3, r0
10046310:	0018      	movs	r0, r3
10046312:	f000 f944 	bl	1004659e <HAL_SYSTICK_Config>
10046316:	1e03      	subs	r3, r0, #0
10046318:	d112      	bne.n	10046340 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004631a:	687b      	ldr	r3, [r7, #4]
1004631c:	2b03      	cmp	r3, #3
1004631e:	d80a      	bhi.n	10046336 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10046320:	6879      	ldr	r1, [r7, #4]
10046322:	2301      	movs	r3, #1
10046324:	425b      	negs	r3, r3
10046326:	2200      	movs	r2, #0
10046328:	0018      	movs	r0, r3
1004632a:	f000 f913 	bl	10046554 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004632e:	4b0d      	ldr	r3, [pc, #52]	@ (10046364 <HAL_InitTick+0x8c>)
10046330:	687a      	ldr	r2, [r7, #4]
10046332:	601a      	str	r2, [r3, #0]
10046334:	e00d      	b.n	10046352 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10046336:	230f      	movs	r3, #15
10046338:	18fb      	adds	r3, r7, r3
1004633a:	2201      	movs	r2, #1
1004633c:	701a      	strb	r2, [r3, #0]
1004633e:	e008      	b.n	10046352 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10046340:	230f      	movs	r3, #15
10046342:	18fb      	adds	r3, r7, r3
10046344:	2201      	movs	r2, #1
10046346:	701a      	strb	r2, [r3, #0]
10046348:	e003      	b.n	10046352 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004634a:	230f      	movs	r3, #15
1004634c:	18fb      	adds	r3, r7, r3
1004634e:	2201      	movs	r2, #1
10046350:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10046352:	230f      	movs	r3, #15
10046354:	18fb      	adds	r3, r7, r3
10046356:	781b      	ldrb	r3, [r3, #0]
}
10046358:	0018      	movs	r0, r3
1004635a:	46bd      	mov	sp, r7
1004635c:	b005      	add	sp, #20
1004635e:	bd90      	pop	{r4, r7, pc}
10046360:	20002728 	.word	0x20002728
10046364:	20002724 	.word	0x20002724

10046368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10046368:	b580      	push	{r7, lr}
1004636a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1004636c:	4b05      	ldr	r3, [pc, #20]	@ (10046384 <HAL_IncTick+0x1c>)
1004636e:	781b      	ldrb	r3, [r3, #0]
10046370:	001a      	movs	r2, r3
10046372:	4b05      	ldr	r3, [pc, #20]	@ (10046388 <HAL_IncTick+0x20>)
10046374:	681b      	ldr	r3, [r3, #0]
10046376:	18d2      	adds	r2, r2, r3
10046378:	4b03      	ldr	r3, [pc, #12]	@ (10046388 <HAL_IncTick+0x20>)
1004637a:	601a      	str	r2, [r3, #0]
}
1004637c:	46c0      	nop			@ (mov r8, r8)
1004637e:	46bd      	mov	sp, r7
10046380:	bd80      	pop	{r7, pc}
10046382:	46c0      	nop			@ (mov r8, r8)
10046384:	20002728 	.word	0x20002728
10046388:	200021b0 	.word	0x200021b0

1004638c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1004638c:	b580      	push	{r7, lr}
1004638e:	af00      	add	r7, sp, #0
  return uwTick;
10046390:	4b02      	ldr	r3, [pc, #8]	@ (1004639c <HAL_GetTick+0x10>)
10046392:	681b      	ldr	r3, [r3, #0]
}
10046394:	0018      	movs	r0, r3
10046396:	46bd      	mov	sp, r7
10046398:	bd80      	pop	{r7, pc}
1004639a:	46c0      	nop			@ (mov r8, r8)
1004639c:	200021b0 	.word	0x200021b0

100463a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100463a0:	b580      	push	{r7, lr}
100463a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
100463a4:	4b02      	ldr	r3, [pc, #8]	@ (100463b0 <HAL_GetTickPrio+0x10>)
100463a6:	681b      	ldr	r3, [r3, #0]
}
100463a8:	0018      	movs	r0, r3
100463aa:	46bd      	mov	sp, r7
100463ac:	bd80      	pop	{r7, pc}
100463ae:	46c0      	nop			@ (mov r8, r8)
100463b0:	20002724 	.word	0x20002724

100463b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100463b4:	b580      	push	{r7, lr}
100463b6:	b084      	sub	sp, #16
100463b8:	af00      	add	r7, sp, #0
100463ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100463bc:	f7ff ffe6 	bl	1004638c <HAL_GetTick>
100463c0:	0003      	movs	r3, r0
100463c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100463c4:	687b      	ldr	r3, [r7, #4]
100463c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100463c8:	68fb      	ldr	r3, [r7, #12]
100463ca:	3301      	adds	r3, #1
100463cc:	d005      	beq.n	100463da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100463ce:	4b0a      	ldr	r3, [pc, #40]	@ (100463f8 <HAL_Delay+0x44>)
100463d0:	781b      	ldrb	r3, [r3, #0]
100463d2:	001a      	movs	r2, r3
100463d4:	68fb      	ldr	r3, [r7, #12]
100463d6:	189b      	adds	r3, r3, r2
100463d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100463da:	46c0      	nop			@ (mov r8, r8)
100463dc:	f7ff ffd6 	bl	1004638c <HAL_GetTick>
100463e0:	0002      	movs	r2, r0
100463e2:	68bb      	ldr	r3, [r7, #8]
100463e4:	1ad3      	subs	r3, r2, r3
100463e6:	68fa      	ldr	r2, [r7, #12]
100463e8:	429a      	cmp	r2, r3
100463ea:	d8f7      	bhi.n	100463dc <HAL_Delay+0x28>
  {
  }
}
100463ec:	46c0      	nop			@ (mov r8, r8)
100463ee:	46c0      	nop			@ (mov r8, r8)
100463f0:	46bd      	mov	sp, r7
100463f2:	b004      	add	sp, #16
100463f4:	bd80      	pop	{r7, pc}
100463f6:	46c0      	nop			@ (mov r8, r8)
100463f8:	20002728 	.word	0x20002728

100463fc <__NVIC_EnableIRQ>:
{
100463fc:	b580      	push	{r7, lr}
100463fe:	b082      	sub	sp, #8
10046400:	af00      	add	r7, sp, #0
10046402:	0002      	movs	r2, r0
10046404:	1dfb      	adds	r3, r7, #7
10046406:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10046408:	1dfb      	adds	r3, r7, #7
1004640a:	781b      	ldrb	r3, [r3, #0]
1004640c:	2b7f      	cmp	r3, #127	@ 0x7f
1004640e:	d809      	bhi.n	10046424 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10046410:	1dfb      	adds	r3, r7, #7
10046412:	781b      	ldrb	r3, [r3, #0]
10046414:	001a      	movs	r2, r3
10046416:	231f      	movs	r3, #31
10046418:	401a      	ands	r2, r3
1004641a:	4b04      	ldr	r3, [pc, #16]	@ (1004642c <__NVIC_EnableIRQ+0x30>)
1004641c:	2101      	movs	r1, #1
1004641e:	4091      	lsls	r1, r2
10046420:	000a      	movs	r2, r1
10046422:	601a      	str	r2, [r3, #0]
}
10046424:	46c0      	nop			@ (mov r8, r8)
10046426:	46bd      	mov	sp, r7
10046428:	b002      	add	sp, #8
1004642a:	bd80      	pop	{r7, pc}
1004642c:	e000e100 	.word	0xe000e100

10046430 <__NVIC_SetPriority>:
{
10046430:	b590      	push	{r4, r7, lr}
10046432:	b083      	sub	sp, #12
10046434:	af00      	add	r7, sp, #0
10046436:	0002      	movs	r2, r0
10046438:	6039      	str	r1, [r7, #0]
1004643a:	1dfb      	adds	r3, r7, #7
1004643c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004643e:	1dfb      	adds	r3, r7, #7
10046440:	781b      	ldrb	r3, [r3, #0]
10046442:	2b7f      	cmp	r3, #127	@ 0x7f
10046444:	d828      	bhi.n	10046498 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10046446:	4a2f      	ldr	r2, [pc, #188]	@ (10046504 <__NVIC_SetPriority+0xd4>)
10046448:	1dfb      	adds	r3, r7, #7
1004644a:	781b      	ldrb	r3, [r3, #0]
1004644c:	b25b      	sxtb	r3, r3
1004644e:	089b      	lsrs	r3, r3, #2
10046450:	33c0      	adds	r3, #192	@ 0xc0
10046452:	009b      	lsls	r3, r3, #2
10046454:	589b      	ldr	r3, [r3, r2]
10046456:	1dfa      	adds	r2, r7, #7
10046458:	7812      	ldrb	r2, [r2, #0]
1004645a:	0011      	movs	r1, r2
1004645c:	2203      	movs	r2, #3
1004645e:	400a      	ands	r2, r1
10046460:	00d2      	lsls	r2, r2, #3
10046462:	21ff      	movs	r1, #255	@ 0xff
10046464:	4091      	lsls	r1, r2
10046466:	000a      	movs	r2, r1
10046468:	43d2      	mvns	r2, r2
1004646a:	401a      	ands	r2, r3
1004646c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004646e:	683b      	ldr	r3, [r7, #0]
10046470:	019b      	lsls	r3, r3, #6
10046472:	22ff      	movs	r2, #255	@ 0xff
10046474:	401a      	ands	r2, r3
10046476:	1dfb      	adds	r3, r7, #7
10046478:	781b      	ldrb	r3, [r3, #0]
1004647a:	0018      	movs	r0, r3
1004647c:	2303      	movs	r3, #3
1004647e:	4003      	ands	r3, r0
10046480:	00db      	lsls	r3, r3, #3
10046482:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10046484:	481f      	ldr	r0, [pc, #124]	@ (10046504 <__NVIC_SetPriority+0xd4>)
10046486:	1dfb      	adds	r3, r7, #7
10046488:	781b      	ldrb	r3, [r3, #0]
1004648a:	b25b      	sxtb	r3, r3
1004648c:	089b      	lsrs	r3, r3, #2
1004648e:	430a      	orrs	r2, r1
10046490:	33c0      	adds	r3, #192	@ 0xc0
10046492:	009b      	lsls	r3, r3, #2
10046494:	501a      	str	r2, [r3, r0]
}
10046496:	e031      	b.n	100464fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10046498:	4a1b      	ldr	r2, [pc, #108]	@ (10046508 <__NVIC_SetPriority+0xd8>)
1004649a:	1dfb      	adds	r3, r7, #7
1004649c:	781b      	ldrb	r3, [r3, #0]
1004649e:	0019      	movs	r1, r3
100464a0:	230f      	movs	r3, #15
100464a2:	400b      	ands	r3, r1
100464a4:	3b08      	subs	r3, #8
100464a6:	089b      	lsrs	r3, r3, #2
100464a8:	3306      	adds	r3, #6
100464aa:	009b      	lsls	r3, r3, #2
100464ac:	18d3      	adds	r3, r2, r3
100464ae:	3304      	adds	r3, #4
100464b0:	681b      	ldr	r3, [r3, #0]
100464b2:	1dfa      	adds	r2, r7, #7
100464b4:	7812      	ldrb	r2, [r2, #0]
100464b6:	0011      	movs	r1, r2
100464b8:	2203      	movs	r2, #3
100464ba:	400a      	ands	r2, r1
100464bc:	00d2      	lsls	r2, r2, #3
100464be:	21ff      	movs	r1, #255	@ 0xff
100464c0:	4091      	lsls	r1, r2
100464c2:	000a      	movs	r2, r1
100464c4:	43d2      	mvns	r2, r2
100464c6:	401a      	ands	r2, r3
100464c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100464ca:	683b      	ldr	r3, [r7, #0]
100464cc:	019b      	lsls	r3, r3, #6
100464ce:	22ff      	movs	r2, #255	@ 0xff
100464d0:	401a      	ands	r2, r3
100464d2:	1dfb      	adds	r3, r7, #7
100464d4:	781b      	ldrb	r3, [r3, #0]
100464d6:	0018      	movs	r0, r3
100464d8:	2303      	movs	r3, #3
100464da:	4003      	ands	r3, r0
100464dc:	00db      	lsls	r3, r3, #3
100464de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100464e0:	4809      	ldr	r0, [pc, #36]	@ (10046508 <__NVIC_SetPriority+0xd8>)
100464e2:	1dfb      	adds	r3, r7, #7
100464e4:	781b      	ldrb	r3, [r3, #0]
100464e6:	001c      	movs	r4, r3
100464e8:	230f      	movs	r3, #15
100464ea:	4023      	ands	r3, r4
100464ec:	3b08      	subs	r3, #8
100464ee:	089b      	lsrs	r3, r3, #2
100464f0:	430a      	orrs	r2, r1
100464f2:	3306      	adds	r3, #6
100464f4:	009b      	lsls	r3, r3, #2
100464f6:	18c3      	adds	r3, r0, r3
100464f8:	3304      	adds	r3, #4
100464fa:	601a      	str	r2, [r3, #0]
}
100464fc:	46c0      	nop			@ (mov r8, r8)
100464fe:	46bd      	mov	sp, r7
10046500:	b003      	add	sp, #12
10046502:	bd90      	pop	{r4, r7, pc}
10046504:	e000e100 	.word	0xe000e100
10046508:	e000ed00 	.word	0xe000ed00

1004650c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1004650c:	b580      	push	{r7, lr}
1004650e:	b082      	sub	sp, #8
10046510:	af00      	add	r7, sp, #0
10046512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10046514:	687b      	ldr	r3, [r7, #4]
10046516:	1e5a      	subs	r2, r3, #1
10046518:	2380      	movs	r3, #128	@ 0x80
1004651a:	045b      	lsls	r3, r3, #17
1004651c:	429a      	cmp	r2, r3
1004651e:	d301      	bcc.n	10046524 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10046520:	2301      	movs	r3, #1
10046522:	e010      	b.n	10046546 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10046524:	4b0a      	ldr	r3, [pc, #40]	@ (10046550 <SysTick_Config+0x44>)
10046526:	687a      	ldr	r2, [r7, #4]
10046528:	3a01      	subs	r2, #1
1004652a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1004652c:	2301      	movs	r3, #1
1004652e:	425b      	negs	r3, r3
10046530:	2103      	movs	r1, #3
10046532:	0018      	movs	r0, r3
10046534:	f7ff ff7c 	bl	10046430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10046538:	4b05      	ldr	r3, [pc, #20]	@ (10046550 <SysTick_Config+0x44>)
1004653a:	2200      	movs	r2, #0
1004653c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1004653e:	4b04      	ldr	r3, [pc, #16]	@ (10046550 <SysTick_Config+0x44>)
10046540:	2207      	movs	r2, #7
10046542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10046544:	2300      	movs	r3, #0
}
10046546:	0018      	movs	r0, r3
10046548:	46bd      	mov	sp, r7
1004654a:	b002      	add	sp, #8
1004654c:	bd80      	pop	{r7, pc}
1004654e:	46c0      	nop			@ (mov r8, r8)
10046550:	e000e010 	.word	0xe000e010

10046554 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10046554:	b580      	push	{r7, lr}
10046556:	b084      	sub	sp, #16
10046558:	af00      	add	r7, sp, #0
1004655a:	60b9      	str	r1, [r7, #8]
1004655c:	607a      	str	r2, [r7, #4]
1004655e:	210f      	movs	r1, #15
10046560:	187b      	adds	r3, r7, r1
10046562:	1c02      	adds	r2, r0, #0
10046564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10046566:	68ba      	ldr	r2, [r7, #8]
10046568:	187b      	adds	r3, r7, r1
1004656a:	781b      	ldrb	r3, [r3, #0]
1004656c:	b25b      	sxtb	r3, r3
1004656e:	0011      	movs	r1, r2
10046570:	0018      	movs	r0, r3
10046572:	f7ff ff5d 	bl	10046430 <__NVIC_SetPriority>
}
10046576:	46c0      	nop			@ (mov r8, r8)
10046578:	46bd      	mov	sp, r7
1004657a:	b004      	add	sp, #16
1004657c:	bd80      	pop	{r7, pc}

1004657e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1004657e:	b580      	push	{r7, lr}
10046580:	b082      	sub	sp, #8
10046582:	af00      	add	r7, sp, #0
10046584:	0002      	movs	r2, r0
10046586:	1dfb      	adds	r3, r7, #7
10046588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004658a:	1dfb      	adds	r3, r7, #7
1004658c:	781b      	ldrb	r3, [r3, #0]
1004658e:	b25b      	sxtb	r3, r3
10046590:	0018      	movs	r0, r3
10046592:	f7ff ff33 	bl	100463fc <__NVIC_EnableIRQ>
}
10046596:	46c0      	nop			@ (mov r8, r8)
10046598:	46bd      	mov	sp, r7
1004659a:	b002      	add	sp, #8
1004659c:	bd80      	pop	{r7, pc}

1004659e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1004659e:	b580      	push	{r7, lr}
100465a0:	b082      	sub	sp, #8
100465a2:	af00      	add	r7, sp, #0
100465a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100465a6:	687b      	ldr	r3, [r7, #4]
100465a8:	0018      	movs	r0, r3
100465aa:	f7ff ffaf 	bl	1004650c <SysTick_Config>
100465ae:	0003      	movs	r3, r0
}
100465b0:	0018      	movs	r0, r3
100465b2:	46bd      	mov	sp, r7
100465b4:	b002      	add	sp, #8
100465b6:	bd80      	pop	{r7, pc}

100465b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
100465b8:	b580      	push	{r7, lr}
100465ba:	b084      	sub	sp, #16
100465bc:	af00      	add	r7, sp, #0
100465be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
100465c0:	210f      	movs	r1, #15
100465c2:	187b      	adds	r3, r7, r1
100465c4:	2200      	movs	r2, #0
100465c6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
100465c8:	687b      	ldr	r3, [r7, #4]
100465ca:	2225      	movs	r2, #37	@ 0x25
100465cc:	5c9b      	ldrb	r3, [r3, r2]
100465ce:	b2db      	uxtb	r3, r3
100465d0:	2b02      	cmp	r3, #2
100465d2:	d006      	beq.n	100465e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
100465d4:	687b      	ldr	r3, [r7, #4]
100465d6:	2204      	movs	r2, #4
100465d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
100465da:	187b      	adds	r3, r7, r1
100465dc:	2201      	movs	r2, #1
100465de:	701a      	strb	r2, [r3, #0]
100465e0:	e02a      	b.n	10046638 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
100465e2:	687b      	ldr	r3, [r7, #4]
100465e4:	681b      	ldr	r3, [r3, #0]
100465e6:	681a      	ldr	r2, [r3, #0]
100465e8:	687b      	ldr	r3, [r7, #4]
100465ea:	681b      	ldr	r3, [r3, #0]
100465ec:	210e      	movs	r1, #14
100465ee:	438a      	bics	r2, r1
100465f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
100465f2:	687b      	ldr	r3, [r7, #4]
100465f4:	681b      	ldr	r3, [r3, #0]
100465f6:	681a      	ldr	r2, [r3, #0]
100465f8:	687b      	ldr	r3, [r7, #4]
100465fa:	681b      	ldr	r3, [r3, #0]
100465fc:	2101      	movs	r1, #1
100465fe:	438a      	bics	r2, r1
10046600:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10046602:	687b      	ldr	r3, [r7, #4]
10046604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046606:	223c      	movs	r2, #60	@ 0x3c
10046608:	401a      	ands	r2, r3
1004660a:	687b      	ldr	r3, [r7, #4]
1004660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1004660e:	2101      	movs	r1, #1
10046610:	4091      	lsls	r1, r2
10046612:	000a      	movs	r2, r1
10046614:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10046616:	687b      	ldr	r3, [r7, #4]
10046618:	2225      	movs	r2, #37	@ 0x25
1004661a:	2101      	movs	r1, #1
1004661c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004661e:	687b      	ldr	r3, [r7, #4]
10046620:	2224      	movs	r2, #36	@ 0x24
10046622:	2100      	movs	r1, #0
10046624:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
10046626:	687b      	ldr	r3, [r7, #4]
10046628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004662a:	2b00      	cmp	r3, #0
1004662c:	d004      	beq.n	10046638 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
1004662e:	687b      	ldr	r3, [r7, #4]
10046630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046632:	687a      	ldr	r2, [r7, #4]
10046634:	0010      	movs	r0, r2
10046636:	4798      	blx	r3
    }
  }
  return status;
10046638:	230f      	movs	r3, #15
1004663a:	18fb      	adds	r3, r7, r3
1004663c:	781b      	ldrb	r3, [r3, #0]
}
1004663e:	0018      	movs	r0, r3
10046640:	46bd      	mov	sp, r7
10046642:	b004      	add	sp, #16
10046644:	bd80      	pop	{r7, pc}

10046646 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
10046646:	b580      	push	{r7, lr}
10046648:	b082      	sub	sp, #8
1004664a:	af00      	add	r7, sp, #0
1004664c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
1004664e:	687b      	ldr	r3, [r7, #4]
10046650:	2225      	movs	r2, #37	@ 0x25
10046652:	5c9b      	ldrb	r3, [r3, r2]
10046654:	b2db      	uxtb	r3, r3
}
10046656:	0018      	movs	r0, r3
10046658:	46bd      	mov	sp, r7
1004665a:	b002      	add	sp, #8
1004665c:	bd80      	pop	{r7, pc}
	...

10046660 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10046660:	b5b0      	push	{r4, r5, r7, lr}
10046662:	b086      	sub	sp, #24
10046664:	af00      	add	r7, sp, #0
10046666:	60f8      	str	r0, [r7, #12]
10046668:	60b9      	str	r1, [r7, #8]
1004666a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004666c:	4b1d      	ldr	r3, [pc, #116]	@ (100466e4 <HAL_FLASH_Program+0x84>)
1004666e:	781b      	ldrb	r3, [r3, #0]
10046670:	2b01      	cmp	r3, #1
10046672:	d101      	bne.n	10046678 <HAL_FLASH_Program+0x18>
10046674:	2302      	movs	r3, #2
10046676:	e031      	b.n	100466dc <HAL_FLASH_Program+0x7c>
10046678:	4b1a      	ldr	r3, [pc, #104]	@ (100466e4 <HAL_FLASH_Program+0x84>)
1004667a:	2201      	movs	r2, #1
1004667c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004667e:	4b19      	ldr	r3, [pc, #100]	@ (100466e4 <HAL_FLASH_Program+0x84>)
10046680:	2200      	movs	r2, #0
10046682:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10046684:	2517      	movs	r5, #23
10046686:	197c      	adds	r4, r7, r5
10046688:	23fa      	movs	r3, #250	@ 0xfa
1004668a:	009b      	lsls	r3, r3, #2
1004668c:	0018      	movs	r0, r3
1004668e:	f000 f82b 	bl	100466e8 <FLASH_WaitForLastOperation>
10046692:	0003      	movs	r3, r0
10046694:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10046696:	197b      	adds	r3, r7, r5
10046698:	781b      	ldrb	r3, [r3, #0]
1004669a:	2b00      	cmp	r3, #0
1004669c:	d118      	bne.n	100466d0 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
1004669e:	68fb      	ldr	r3, [r7, #12]
100466a0:	2b00      	cmp	r3, #0
100466a2:	d106      	bne.n	100466b2 <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
100466a4:	687a      	ldr	r2, [r7, #4]
100466a6:	68bb      	ldr	r3, [r7, #8]
100466a8:	0011      	movs	r1, r2
100466aa:	0018      	movs	r0, r3
100466ac:	f000 f856 	bl	1004675c <FLASH_Program_Word>
100466b0:	e005      	b.n	100466be <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
100466b2:	687a      	ldr	r2, [r7, #4]
100466b4:	68bb      	ldr	r3, [r7, #8]
100466b6:	0011      	movs	r1, r2
100466b8:	0018      	movs	r0, r3
100466ba:	f000 f871 	bl	100467a0 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
100466be:	2317      	movs	r3, #23
100466c0:	18fc      	adds	r4, r7, r3
100466c2:	23fa      	movs	r3, #250	@ 0xfa
100466c4:	009b      	lsls	r3, r3, #2
100466c6:	0018      	movs	r0, r3
100466c8:	f000 f80e 	bl	100466e8 <FLASH_WaitForLastOperation>
100466cc:	0003      	movs	r3, r0
100466ce:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
100466d0:	4b04      	ldr	r3, [pc, #16]	@ (100466e4 <HAL_FLASH_Program+0x84>)
100466d2:	2200      	movs	r2, #0
100466d4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
100466d6:	2317      	movs	r3, #23
100466d8:	18fb      	adds	r3, r7, r3
100466da:	781b      	ldrb	r3, [r3, #0]
}
100466dc:	0018      	movs	r0, r3
100466de:	46bd      	mov	sp, r7
100466e0:	b006      	add	sp, #24
100466e2:	bdb0      	pop	{r4, r5, r7, pc}
100466e4:	200021b4 	.word	0x200021b4

100466e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
100466e8:	b580      	push	{r7, lr}
100466ea:	b084      	sub	sp, #16
100466ec:	af00      	add	r7, sp, #0
100466ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100466f0:	f7ff fe4c 	bl	1004638c <HAL_GetTick>
100466f4:	0003      	movs	r3, r0
100466f6:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100466f8:	e00c      	b.n	10046714 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
100466fa:	687b      	ldr	r3, [r7, #4]
100466fc:	3301      	adds	r3, #1
100466fe:	d009      	beq.n	10046714 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
10046700:	f7ff fe44 	bl	1004638c <HAL_GetTick>
10046704:	0002      	movs	r2, r0
10046706:	68fb      	ldr	r3, [r7, #12]
10046708:	1ad3      	subs	r3, r2, r3
1004670a:	687a      	ldr	r2, [r7, #4]
1004670c:	429a      	cmp	r2, r3
1004670e:	d801      	bhi.n	10046714 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10046710:	2303      	movs	r3, #3
10046712:	e01b      	b.n	1004674c <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10046714:	4b0f      	ldr	r3, [pc, #60]	@ (10046754 <FLASH_WaitForLastOperation+0x6c>)
10046716:	691b      	ldr	r3, [r3, #16]
10046718:	2201      	movs	r2, #1
1004671a:	4013      	ands	r3, r2
1004671c:	2b01      	cmp	r3, #1
1004671e:	d1ec      	bne.n	100466fa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10046720:	4b0c      	ldr	r3, [pc, #48]	@ (10046754 <FLASH_WaitForLastOperation+0x6c>)
10046722:	691b      	ldr	r3, [r3, #16]
10046724:	220c      	movs	r2, #12
10046726:	4013      	ands	r3, r2
10046728:	2b0c      	cmp	r3, #12
1004672a:	d10e      	bne.n	1004674a <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
1004672c:	4b09      	ldr	r3, [pc, #36]	@ (10046754 <FLASH_WaitForLastOperation+0x6c>)
1004672e:	689a      	ldr	r2, [r3, #8]
10046730:	4b09      	ldr	r3, [pc, #36]	@ (10046758 <FLASH_WaitForLastOperation+0x70>)
10046732:	685b      	ldr	r3, [r3, #4]
10046734:	431a      	orrs	r2, r3
10046736:	4b08      	ldr	r3, [pc, #32]	@ (10046758 <FLASH_WaitForLastOperation+0x70>)
10046738:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
1004673a:	4b06      	ldr	r3, [pc, #24]	@ (10046754 <FLASH_WaitForLastOperation+0x6c>)
1004673c:	691a      	ldr	r2, [r3, #16]
1004673e:	4b05      	ldr	r3, [pc, #20]	@ (10046754 <FLASH_WaitForLastOperation+0x6c>)
10046740:	210c      	movs	r1, #12
10046742:	430a      	orrs	r2, r1
10046744:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
10046746:	2301      	movs	r3, #1
10046748:	e000      	b.n	1004674c <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
1004674a:	2300      	movs	r3, #0
}
1004674c:	0018      	movs	r0, r3
1004674e:	46bd      	mov	sp, r7
10046750:	b004      	add	sp, #16
10046752:	bd80      	pop	{r7, pc}
10046754:	40001000 	.word	0x40001000
10046758:	200021b4 	.word	0x200021b4

1004675c <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
1004675c:	b580      	push	{r7, lr}
1004675e:	b082      	sub	sp, #8
10046760:	af00      	add	r7, sp, #0
10046762:	6078      	str	r0, [r7, #4]
10046764:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10046766:	4b0c      	ldr	r3, [pc, #48]	@ (10046798 <FLASH_Program_Word+0x3c>)
10046768:	691a      	ldr	r2, [r3, #16]
1004676a:	4b0b      	ldr	r3, [pc, #44]	@ (10046798 <FLASH_Program_Word+0x3c>)
1004676c:	210f      	movs	r1, #15
1004676e:	430a      	orrs	r2, r1
10046770:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10046772:	687b      	ldr	r3, [r7, #4]
10046774:	4a09      	ldr	r2, [pc, #36]	@ (1004679c <FLASH_Program_Word+0x40>)
10046776:	4694      	mov	ip, r2
10046778:	4463      	add	r3, ip
1004677a:	089a      	lsrs	r2, r3, #2
1004677c:	4b06      	ldr	r3, [pc, #24]	@ (10046798 <FLASH_Program_Word+0x3c>)
1004677e:	0412      	lsls	r2, r2, #16
10046780:	0c12      	lsrs	r2, r2, #16
10046782:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10046784:	4b04      	ldr	r3, [pc, #16]	@ (10046798 <FLASH_Program_Word+0x3c>)
10046786:	683a      	ldr	r2, [r7, #0]
10046788:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
1004678a:	4b03      	ldr	r3, [pc, #12]	@ (10046798 <FLASH_Program_Word+0x3c>)
1004678c:	2233      	movs	r2, #51	@ 0x33
1004678e:	601a      	str	r2, [r3, #0]
}
10046790:	46c0      	nop			@ (mov r8, r8)
10046792:	46bd      	mov	sp, r7
10046794:	b002      	add	sp, #8
10046796:	bd80      	pop	{r7, pc}
10046798:	40001000 	.word	0x40001000
1004679c:	effc0000 	.word	0xeffc0000

100467a0 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
100467a0:	b580      	push	{r7, lr}
100467a2:	b084      	sub	sp, #16
100467a4:	af00      	add	r7, sp, #0
100467a6:	6078      	str	r0, [r7, #4]
100467a8:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
100467aa:	683b      	ldr	r3, [r7, #0]
100467ac:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100467ae:	4b17      	ldr	r3, [pc, #92]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467b0:	691a      	ldr	r2, [r3, #16]
100467b2:	4b16      	ldr	r3, [pc, #88]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467b4:	210f      	movs	r1, #15
100467b6:	430a      	orrs	r2, r1
100467b8:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
100467ba:	687b      	ldr	r3, [r7, #4]
100467bc:	4a14      	ldr	r2, [pc, #80]	@ (10046810 <FLASH_Program_Burst+0x70>)
100467be:	4694      	mov	ip, r2
100467c0:	4463      	add	r3, ip
100467c2:	089a      	lsrs	r2, r3, #2
100467c4:	4b11      	ldr	r3, [pc, #68]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467c6:	0412      	lsls	r2, r2, #16
100467c8:	0c12      	lsrs	r2, r2, #16
100467ca:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
100467cc:	4a0f      	ldr	r2, [pc, #60]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467ce:	68fb      	ldr	r3, [r7, #12]
100467d0:	681b      	ldr	r3, [r3, #0]
100467d2:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
100467d4:	68fb      	ldr	r3, [r7, #12]
100467d6:	3304      	adds	r3, #4
100467d8:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
100467da:	4a0c      	ldr	r2, [pc, #48]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467dc:	68fb      	ldr	r3, [r7, #12]
100467de:	681b      	ldr	r3, [r3, #0]
100467e0:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
100467e2:	68fb      	ldr	r3, [r7, #12]
100467e4:	3304      	adds	r3, #4
100467e6:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
100467e8:	4a08      	ldr	r2, [pc, #32]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467ea:	68fb      	ldr	r3, [r7, #12]
100467ec:	681b      	ldr	r3, [r3, #0]
100467ee:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
100467f0:	68fb      	ldr	r3, [r7, #12]
100467f2:	3304      	adds	r3, #4
100467f4:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
100467f6:	4a05      	ldr	r2, [pc, #20]	@ (1004680c <FLASH_Program_Burst+0x6c>)
100467f8:	68fb      	ldr	r3, [r7, #12]
100467fa:	681b      	ldr	r3, [r3, #0]
100467fc:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
100467fe:	4b03      	ldr	r3, [pc, #12]	@ (1004680c <FLASH_Program_Burst+0x6c>)
10046800:	22cc      	movs	r2, #204	@ 0xcc
10046802:	601a      	str	r2, [r3, #0]
}
10046804:	46c0      	nop			@ (mov r8, r8)
10046806:	46bd      	mov	sp, r7
10046808:	b004      	add	sp, #16
1004680a:	bd80      	pop	{r7, pc}
1004680c:	40001000 	.word	0x40001000
10046810:	effc0000 	.word	0xeffc0000

10046814 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
10046814:	b5b0      	push	{r4, r5, r7, lr}
10046816:	b084      	sub	sp, #16
10046818:	af00      	add	r7, sp, #0
1004681a:	6078      	str	r0, [r7, #4]
1004681c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004681e:	4b27      	ldr	r3, [pc, #156]	@ (100468bc <HAL_FLASHEx_Erase+0xa8>)
10046820:	781b      	ldrb	r3, [r3, #0]
10046822:	2b01      	cmp	r3, #1
10046824:	d101      	bne.n	1004682a <HAL_FLASHEx_Erase+0x16>
10046826:	2302      	movs	r3, #2
10046828:	e043      	b.n	100468b2 <HAL_FLASHEx_Erase+0x9e>
1004682a:	4b24      	ldr	r3, [pc, #144]	@ (100468bc <HAL_FLASHEx_Erase+0xa8>)
1004682c:	2201      	movs	r2, #1
1004682e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10046830:	4b22      	ldr	r3, [pc, #136]	@ (100468bc <HAL_FLASHEx_Erase+0xa8>)
10046832:	2200      	movs	r2, #0
10046834:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
10046836:	687b      	ldr	r3, [r7, #4]
10046838:	681b      	ldr	r3, [r3, #0]
1004683a:	2bff      	cmp	r3, #255	@ 0xff
1004683c:	d10b      	bne.n	10046856 <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
1004683e:	f000 f83f 	bl	100468c0 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10046842:	230f      	movs	r3, #15
10046844:	18fc      	adds	r4, r7, r3
10046846:	23fa      	movs	r3, #250	@ 0xfa
10046848:	009b      	lsls	r3, r3, #2
1004684a:	0018      	movs	r0, r3
1004684c:	f7ff ff4c 	bl	100466e8 <FLASH_WaitForLastOperation>
10046850:	0003      	movs	r3, r0
10046852:	7023      	strb	r3, [r4, #0]
10046854:	e027      	b.n	100468a6 <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10046856:	683b      	ldr	r3, [r7, #0]
10046858:	2201      	movs	r2, #1
1004685a:	4252      	negs	r2, r2
1004685c:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004685e:	687b      	ldr	r3, [r7, #4]
10046860:	685b      	ldr	r3, [r3, #4]
10046862:	60bb      	str	r3, [r7, #8]
10046864:	e017      	b.n	10046896 <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10046866:	68bb      	ldr	r3, [r7, #8]
10046868:	0018      	movs	r0, r3
1004686a:	f000 f839 	bl	100468e0 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004686e:	250f      	movs	r5, #15
10046870:	197c      	adds	r4, r7, r5
10046872:	23fa      	movs	r3, #250	@ 0xfa
10046874:	009b      	lsls	r3, r3, #2
10046876:	0018      	movs	r0, r3
10046878:	f7ff ff36 	bl	100466e8 <FLASH_WaitForLastOperation>
1004687c:	0003      	movs	r3, r0
1004687e:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10046880:	197b      	adds	r3, r7, r5
10046882:	781b      	ldrb	r3, [r3, #0]
10046884:	2b00      	cmp	r3, #0
10046886:	d003      	beq.n	10046890 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10046888:	683b      	ldr	r3, [r7, #0]
1004688a:	68ba      	ldr	r2, [r7, #8]
1004688c:	601a      	str	r2, [r3, #0]
        break;
1004688e:	e00a      	b.n	100468a6 <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10046890:	68bb      	ldr	r3, [r7, #8]
10046892:	3301      	adds	r3, #1
10046894:	60bb      	str	r3, [r7, #8]
10046896:	687b      	ldr	r3, [r7, #4]
10046898:	685a      	ldr	r2, [r3, #4]
1004689a:	687b      	ldr	r3, [r7, #4]
1004689c:	689b      	ldr	r3, [r3, #8]
1004689e:	18d3      	adds	r3, r2, r3
100468a0:	68ba      	ldr	r2, [r7, #8]
100468a2:	429a      	cmp	r2, r3
100468a4:	d3df      	bcc.n	10046866 <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
100468a6:	4b05      	ldr	r3, [pc, #20]	@ (100468bc <HAL_FLASHEx_Erase+0xa8>)
100468a8:	2200      	movs	r2, #0
100468aa:	701a      	strb	r2, [r3, #0]

  return status;
100468ac:	230f      	movs	r3, #15
100468ae:	18fb      	adds	r3, r7, r3
100468b0:	781b      	ldrb	r3, [r3, #0]
}
100468b2:	0018      	movs	r0, r3
100468b4:	46bd      	mov	sp, r7
100468b6:	b004      	add	sp, #16
100468b8:	bdb0      	pop	{r4, r5, r7, pc}
100468ba:	46c0      	nop			@ (mov r8, r8)
100468bc:	200021b4 	.word	0x200021b4

100468c0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
100468c0:	b580      	push	{r7, lr}
100468c2:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100468c4:	4b05      	ldr	r3, [pc, #20]	@ (100468dc <FLASH_MassErase+0x1c>)
100468c6:	691a      	ldr	r2, [r3, #16]
100468c8:	4b04      	ldr	r3, [pc, #16]	@ (100468dc <FLASH_MassErase+0x1c>)
100468ca:	210f      	movs	r1, #15
100468cc:	430a      	orrs	r2, r1
100468ce:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
100468d0:	4b02      	ldr	r3, [pc, #8]	@ (100468dc <FLASH_MassErase+0x1c>)
100468d2:	2222      	movs	r2, #34	@ 0x22
100468d4:	601a      	str	r2, [r3, #0]
}
100468d6:	46c0      	nop			@ (mov r8, r8)
100468d8:	46bd      	mov	sp, r7
100468da:	bd80      	pop	{r7, pc}
100468dc:	40001000 	.word	0x40001000

100468e0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
100468e0:	b580      	push	{r7, lr}
100468e2:	b082      	sub	sp, #8
100468e4:	af00      	add	r7, sp, #0
100468e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100468e8:	4b09      	ldr	r3, [pc, #36]	@ (10046910 <FLASH_PageErase+0x30>)
100468ea:	691a      	ldr	r2, [r3, #16]
100468ec:	4b08      	ldr	r3, [pc, #32]	@ (10046910 <FLASH_PageErase+0x30>)
100468ee:	210f      	movs	r1, #15
100468f0:	430a      	orrs	r2, r1
100468f2:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
100468f4:	687b      	ldr	r3, [r7, #4]
100468f6:	02db      	lsls	r3, r3, #11
100468f8:	089a      	lsrs	r2, r3, #2
100468fa:	4b05      	ldr	r3, [pc, #20]	@ (10046910 <FLASH_PageErase+0x30>)
100468fc:	0412      	lsls	r2, r2, #16
100468fe:	0c12      	lsrs	r2, r2, #16
10046900:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
10046902:	4b03      	ldr	r3, [pc, #12]	@ (10046910 <FLASH_PageErase+0x30>)
10046904:	2211      	movs	r2, #17
10046906:	601a      	str	r2, [r3, #0]
}
10046908:	46c0      	nop			@ (mov r8, r8)
1004690a:	46bd      	mov	sp, r7
1004690c:	b002      	add	sp, #8
1004690e:	bd80      	pop	{r7, pc}
10046910:	40001000 	.word	0x40001000

10046914 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10046914:	b580      	push	{r7, lr}
10046916:	b086      	sub	sp, #24
10046918:	af00      	add	r7, sp, #0
1004691a:	6078      	str	r0, [r7, #4]
1004691c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004691e:	2300      	movs	r3, #0
10046920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10046922:	e190      	b.n	10046c46 <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10046924:	683b      	ldr	r3, [r7, #0]
10046926:	681b      	ldr	r3, [r3, #0]
10046928:	2101      	movs	r1, #1
1004692a:	697a      	ldr	r2, [r7, #20]
1004692c:	4091      	lsls	r1, r2
1004692e:	000a      	movs	r2, r1
10046930:	4013      	ands	r3, r2
10046932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10046934:	68fb      	ldr	r3, [r7, #12]
10046936:	2b00      	cmp	r3, #0
10046938:	d100      	bne.n	1004693c <HAL_GPIO_Init+0x28>
1004693a:	e181      	b.n	10046c40 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
1004693c:	683b      	ldr	r3, [r7, #0]
1004693e:	685b      	ldr	r3, [r3, #4]
10046940:	2203      	movs	r2, #3
10046942:	4013      	ands	r3, r2
10046944:	2b01      	cmp	r3, #1
10046946:	d005      	beq.n	10046954 <HAL_GPIO_Init+0x40>
10046948:	683b      	ldr	r3, [r7, #0]
1004694a:	685b      	ldr	r3, [r3, #4]
1004694c:	2203      	movs	r2, #3
1004694e:	4013      	ands	r3, r2
10046950:	2b02      	cmp	r3, #2
10046952:	d130      	bne.n	100469b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10046954:	687b      	ldr	r3, [r7, #4]
10046956:	689b      	ldr	r3, [r3, #8]
10046958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004695a:	697b      	ldr	r3, [r7, #20]
1004695c:	005b      	lsls	r3, r3, #1
1004695e:	2203      	movs	r2, #3
10046960:	409a      	lsls	r2, r3
10046962:	0013      	movs	r3, r2
10046964:	43da      	mvns	r2, r3
10046966:	693b      	ldr	r3, [r7, #16]
10046968:	4013      	ands	r3, r2
1004696a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004696c:	683b      	ldr	r3, [r7, #0]
1004696e:	68da      	ldr	r2, [r3, #12]
10046970:	697b      	ldr	r3, [r7, #20]
10046972:	005b      	lsls	r3, r3, #1
10046974:	409a      	lsls	r2, r3
10046976:	0013      	movs	r3, r2
10046978:	693a      	ldr	r2, [r7, #16]
1004697a:	4313      	orrs	r3, r2
1004697c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004697e:	687b      	ldr	r3, [r7, #4]
10046980:	693a      	ldr	r2, [r7, #16]
10046982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10046984:	687b      	ldr	r3, [r7, #4]
10046986:	685b      	ldr	r3, [r3, #4]
10046988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004698a:	2201      	movs	r2, #1
1004698c:	697b      	ldr	r3, [r7, #20]
1004698e:	409a      	lsls	r2, r3
10046990:	0013      	movs	r3, r2
10046992:	43da      	mvns	r2, r3
10046994:	693b      	ldr	r3, [r7, #16]
10046996:	4013      	ands	r3, r2
10046998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004699a:	683b      	ldr	r3, [r7, #0]
1004699c:	685b      	ldr	r3, [r3, #4]
1004699e:	091b      	lsrs	r3, r3, #4
100469a0:	2201      	movs	r2, #1
100469a2:	401a      	ands	r2, r3
100469a4:	697b      	ldr	r3, [r7, #20]
100469a6:	409a      	lsls	r2, r3
100469a8:	0013      	movs	r3, r2
100469aa:	693a      	ldr	r2, [r7, #16]
100469ac:	4313      	orrs	r3, r2
100469ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
100469b0:	687b      	ldr	r3, [r7, #4]
100469b2:	693a      	ldr	r2, [r7, #16]
100469b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
100469b6:	683b      	ldr	r3, [r7, #0]
100469b8:	685b      	ldr	r3, [r3, #4]
100469ba:	2203      	movs	r2, #3
100469bc:	4013      	ands	r3, r2
100469be:	2b03      	cmp	r3, #3
100469c0:	d017      	beq.n	100469f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
100469c2:	687b      	ldr	r3, [r7, #4]
100469c4:	68db      	ldr	r3, [r3, #12]
100469c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
100469c8:	697b      	ldr	r3, [r7, #20]
100469ca:	005b      	lsls	r3, r3, #1
100469cc:	2203      	movs	r2, #3
100469ce:	409a      	lsls	r2, r3
100469d0:	0013      	movs	r3, r2
100469d2:	43da      	mvns	r2, r3
100469d4:	693b      	ldr	r3, [r7, #16]
100469d6:	4013      	ands	r3, r2
100469d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
100469da:	683b      	ldr	r3, [r7, #0]
100469dc:	689a      	ldr	r2, [r3, #8]
100469de:	697b      	ldr	r3, [r7, #20]
100469e0:	005b      	lsls	r3, r3, #1
100469e2:	409a      	lsls	r2, r3
100469e4:	0013      	movs	r3, r2
100469e6:	693a      	ldr	r2, [r7, #16]
100469e8:	4313      	orrs	r3, r2
100469ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
100469ec:	687b      	ldr	r3, [r7, #4]
100469ee:	693a      	ldr	r2, [r7, #16]
100469f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100469f2:	683b      	ldr	r3, [r7, #0]
100469f4:	685b      	ldr	r3, [r3, #4]
100469f6:	2203      	movs	r2, #3
100469f8:	4013      	ands	r3, r2
100469fa:	2b02      	cmp	r3, #2
100469fc:	d123      	bne.n	10046a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100469fe:	697b      	ldr	r3, [r7, #20]
10046a00:	08da      	lsrs	r2, r3, #3
10046a02:	687b      	ldr	r3, [r7, #4]
10046a04:	3208      	adds	r2, #8
10046a06:	0092      	lsls	r2, r2, #2
10046a08:	58d3      	ldr	r3, [r2, r3]
10046a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10046a0c:	697b      	ldr	r3, [r7, #20]
10046a0e:	2207      	movs	r2, #7
10046a10:	4013      	ands	r3, r2
10046a12:	009b      	lsls	r3, r3, #2
10046a14:	220f      	movs	r2, #15
10046a16:	409a      	lsls	r2, r3
10046a18:	0013      	movs	r3, r2
10046a1a:	43da      	mvns	r2, r3
10046a1c:	693b      	ldr	r3, [r7, #16]
10046a1e:	4013      	ands	r3, r2
10046a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
10046a22:	683b      	ldr	r3, [r7, #0]
10046a24:	691a      	ldr	r2, [r3, #16]
10046a26:	697b      	ldr	r3, [r7, #20]
10046a28:	2107      	movs	r1, #7
10046a2a:	400b      	ands	r3, r1
10046a2c:	009b      	lsls	r3, r3, #2
10046a2e:	409a      	lsls	r2, r3
10046a30:	0013      	movs	r3, r2
10046a32:	693a      	ldr	r2, [r7, #16]
10046a34:	4313      	orrs	r3, r2
10046a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10046a38:	697b      	ldr	r3, [r7, #20]
10046a3a:	08da      	lsrs	r2, r3, #3
10046a3c:	687b      	ldr	r3, [r7, #4]
10046a3e:	3208      	adds	r2, #8
10046a40:	0092      	lsls	r2, r2, #2
10046a42:	6939      	ldr	r1, [r7, #16]
10046a44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10046a46:	687b      	ldr	r3, [r7, #4]
10046a48:	681b      	ldr	r3, [r3, #0]
10046a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10046a4c:	697b      	ldr	r3, [r7, #20]
10046a4e:	005b      	lsls	r3, r3, #1
10046a50:	2203      	movs	r2, #3
10046a52:	409a      	lsls	r2, r3
10046a54:	0013      	movs	r3, r2
10046a56:	43da      	mvns	r2, r3
10046a58:	693b      	ldr	r3, [r7, #16]
10046a5a:	4013      	ands	r3, r2
10046a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10046a5e:	683b      	ldr	r3, [r7, #0]
10046a60:	685b      	ldr	r3, [r3, #4]
10046a62:	2203      	movs	r2, #3
10046a64:	401a      	ands	r2, r3
10046a66:	697b      	ldr	r3, [r7, #20]
10046a68:	005b      	lsls	r3, r3, #1
10046a6a:	409a      	lsls	r2, r3
10046a6c:	0013      	movs	r3, r2
10046a6e:	693a      	ldr	r2, [r7, #16]
10046a70:	4313      	orrs	r3, r2
10046a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10046a74:	687b      	ldr	r3, [r7, #4]
10046a76:	693a      	ldr	r2, [r7, #16]
10046a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10046a7a:	683b      	ldr	r3, [r7, #0]
10046a7c:	685a      	ldr	r2, [r3, #4]
10046a7e:	23c0      	movs	r3, #192	@ 0xc0
10046a80:	029b      	lsls	r3, r3, #10
10046a82:	4013      	ands	r3, r2
10046a84:	d100      	bne.n	10046a88 <HAL_GPIO_Init+0x174>
10046a86:	e0db      	b.n	10046c40 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10046a88:	683b      	ldr	r3, [r7, #0]
10046a8a:	685a      	ldr	r2, [r3, #4]
10046a8c:	2380      	movs	r3, #128	@ 0x80
10046a8e:	02db      	lsls	r3, r3, #11
10046a90:	4013      	ands	r3, r2
10046a92:	d030      	beq.n	10046af6 <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
10046a94:	2380      	movs	r3, #128	@ 0x80
10046a96:	05db      	lsls	r3, r3, #23
10046a98:	68db      	ldr	r3, [r3, #12]
10046a9a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10046a9c:	687a      	ldr	r2, [r7, #4]
10046a9e:	2390      	movs	r3, #144	@ 0x90
10046aa0:	05db      	lsls	r3, r3, #23
10046aa2:	429a      	cmp	r2, r3
10046aa4:	d111      	bne.n	10046aca <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10046aa6:	2201      	movs	r2, #1
10046aa8:	697b      	ldr	r3, [r7, #20]
10046aaa:	409a      	lsls	r2, r3
10046aac:	0013      	movs	r3, r2
10046aae:	43db      	mvns	r3, r3
10046ab0:	001a      	movs	r2, r3
10046ab2:	693b      	ldr	r3, [r7, #16]
10046ab4:	4013      	ands	r3, r2
10046ab6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046ab8:	2201      	movs	r2, #1
10046aba:	697b      	ldr	r3, [r7, #20]
10046abc:	409a      	lsls	r2, r3
10046abe:	0013      	movs	r3, r2
10046ac0:	001a      	movs	r2, r3
10046ac2:	693b      	ldr	r3, [r7, #16]
10046ac4:	4313      	orrs	r3, r2
10046ac6:	613b      	str	r3, [r7, #16]
10046ac8:	e011      	b.n	10046aee <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10046aca:	2201      	movs	r2, #1
10046acc:	697b      	ldr	r3, [r7, #20]
10046ace:	409a      	lsls	r2, r3
10046ad0:	0013      	movs	r3, r2
10046ad2:	041b      	lsls	r3, r3, #16
10046ad4:	43db      	mvns	r3, r3
10046ad6:	001a      	movs	r2, r3
10046ad8:	693b      	ldr	r3, [r7, #16]
10046ada:	4013      	ands	r3, r2
10046adc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10046ade:	2201      	movs	r2, #1
10046ae0:	697b      	ldr	r3, [r7, #20]
10046ae2:	409a      	lsls	r2, r3
10046ae4:	0013      	movs	r3, r2
10046ae6:	041b      	lsls	r3, r3, #16
10046ae8:	693a      	ldr	r2, [r7, #16]
10046aea:	4313      	orrs	r3, r2
10046aec:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10046aee:	2380      	movs	r3, #128	@ 0x80
10046af0:	05db      	lsls	r3, r3, #23
10046af2:	693a      	ldr	r2, [r7, #16]
10046af4:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10046af6:	683b      	ldr	r3, [r7, #0]
10046af8:	685a      	ldr	r2, [r3, #4]
10046afa:	2380      	movs	r3, #128	@ 0x80
10046afc:	035b      	lsls	r3, r3, #13
10046afe:	4013      	ands	r3, r2
10046b00:	d030      	beq.n	10046b64 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
10046b02:	2380      	movs	r3, #128	@ 0x80
10046b04:	05db      	lsls	r3, r3, #23
10046b06:	691b      	ldr	r3, [r3, #16]
10046b08:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10046b0a:	687a      	ldr	r2, [r7, #4]
10046b0c:	2390      	movs	r3, #144	@ 0x90
10046b0e:	05db      	lsls	r3, r3, #23
10046b10:	429a      	cmp	r2, r3
10046b12:	d111      	bne.n	10046b38 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
10046b14:	2201      	movs	r2, #1
10046b16:	697b      	ldr	r3, [r7, #20]
10046b18:	409a      	lsls	r2, r3
10046b1a:	0013      	movs	r3, r2
10046b1c:	43db      	mvns	r3, r3
10046b1e:	001a      	movs	r2, r3
10046b20:	693b      	ldr	r3, [r7, #16]
10046b22:	4013      	ands	r3, r2
10046b24:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046b26:	2201      	movs	r2, #1
10046b28:	697b      	ldr	r3, [r7, #20]
10046b2a:	409a      	lsls	r2, r3
10046b2c:	0013      	movs	r3, r2
10046b2e:	001a      	movs	r2, r3
10046b30:	693b      	ldr	r3, [r7, #16]
10046b32:	4313      	orrs	r3, r2
10046b34:	613b      	str	r3, [r7, #16]
10046b36:	e011      	b.n	10046b5c <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10046b38:	2201      	movs	r2, #1
10046b3a:	697b      	ldr	r3, [r7, #20]
10046b3c:	409a      	lsls	r2, r3
10046b3e:	0013      	movs	r3, r2
10046b40:	041b      	lsls	r3, r3, #16
10046b42:	43db      	mvns	r3, r3
10046b44:	001a      	movs	r2, r3
10046b46:	693b      	ldr	r3, [r7, #16]
10046b48:	4013      	ands	r3, r2
10046b4a:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10046b4c:	2201      	movs	r2, #1
10046b4e:	697b      	ldr	r3, [r7, #20]
10046b50:	409a      	lsls	r2, r3
10046b52:	0013      	movs	r3, r2
10046b54:	041b      	lsls	r3, r3, #16
10046b56:	693a      	ldr	r2, [r7, #16]
10046b58:	4313      	orrs	r3, r2
10046b5a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10046b5c:	2380      	movs	r3, #128	@ 0x80
10046b5e:	05db      	lsls	r3, r3, #23
10046b60:	693a      	ldr	r2, [r7, #16]
10046b62:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10046b64:	683b      	ldr	r3, [r7, #0]
10046b66:	685a      	ldr	r2, [r3, #4]
10046b68:	2380      	movs	r3, #128	@ 0x80
10046b6a:	03db      	lsls	r3, r3, #15
10046b6c:	4013      	ands	r3, r2
10046b6e:	d030      	beq.n	10046bd2 <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
10046b70:	2380      	movs	r3, #128	@ 0x80
10046b72:	05db      	lsls	r3, r3, #23
10046b74:	695b      	ldr	r3, [r3, #20]
10046b76:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10046b78:	687a      	ldr	r2, [r7, #4]
10046b7a:	2390      	movs	r3, #144	@ 0x90
10046b7c:	05db      	lsls	r3, r3, #23
10046b7e:	429a      	cmp	r2, r3
10046b80:	d111      	bne.n	10046ba6 <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
10046b82:	2201      	movs	r2, #1
10046b84:	697b      	ldr	r3, [r7, #20]
10046b86:	409a      	lsls	r2, r3
10046b88:	0013      	movs	r3, r2
10046b8a:	43db      	mvns	r3, r3
10046b8c:	001a      	movs	r2, r3
10046b8e:	693b      	ldr	r3, [r7, #16]
10046b90:	4013      	ands	r3, r2
10046b92:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046b94:	2201      	movs	r2, #1
10046b96:	697b      	ldr	r3, [r7, #20]
10046b98:	409a      	lsls	r2, r3
10046b9a:	0013      	movs	r3, r2
10046b9c:	001a      	movs	r2, r3
10046b9e:	693b      	ldr	r3, [r7, #16]
10046ba0:	4313      	orrs	r3, r2
10046ba2:	613b      	str	r3, [r7, #16]
10046ba4:	e011      	b.n	10046bca <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10046ba6:	2201      	movs	r2, #1
10046ba8:	697b      	ldr	r3, [r7, #20]
10046baa:	409a      	lsls	r2, r3
10046bac:	0013      	movs	r3, r2
10046bae:	041b      	lsls	r3, r3, #16
10046bb0:	43db      	mvns	r3, r3
10046bb2:	001a      	movs	r2, r3
10046bb4:	693b      	ldr	r3, [r7, #16]
10046bb6:	4013      	ands	r3, r2
10046bb8:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10046bba:	2201      	movs	r2, #1
10046bbc:	697b      	ldr	r3, [r7, #20]
10046bbe:	409a      	lsls	r2, r3
10046bc0:	0013      	movs	r3, r2
10046bc2:	041b      	lsls	r3, r3, #16
10046bc4:	693a      	ldr	r2, [r7, #16]
10046bc6:	4313      	orrs	r3, r2
10046bc8:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10046bca:	2380      	movs	r3, #128	@ 0x80
10046bcc:	05db      	lsls	r3, r3, #23
10046bce:	693a      	ldr	r2, [r7, #16]
10046bd0:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10046bd2:	683b      	ldr	r3, [r7, #0]
10046bd4:	685a      	ldr	r2, [r3, #4]
10046bd6:	2380      	movs	r3, #128	@ 0x80
10046bd8:	025b      	lsls	r3, r3, #9
10046bda:	4013      	ands	r3, r2
10046bdc:	d030      	beq.n	10046c40 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
10046bde:	2380      	movs	r3, #128	@ 0x80
10046be0:	05db      	lsls	r3, r3, #23
10046be2:	699b      	ldr	r3, [r3, #24]
10046be4:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10046be6:	687a      	ldr	r2, [r7, #4]
10046be8:	2390      	movs	r3, #144	@ 0x90
10046bea:	05db      	lsls	r3, r3, #23
10046bec:	429a      	cmp	r2, r3
10046bee:	d111      	bne.n	10046c14 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
10046bf0:	2201      	movs	r2, #1
10046bf2:	697b      	ldr	r3, [r7, #20]
10046bf4:	409a      	lsls	r2, r3
10046bf6:	0013      	movs	r3, r2
10046bf8:	43db      	mvns	r3, r3
10046bfa:	001a      	movs	r2, r3
10046bfc:	693b      	ldr	r3, [r7, #16]
10046bfe:	4013      	ands	r3, r2
10046c00:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046c02:	2201      	movs	r2, #1
10046c04:	697b      	ldr	r3, [r7, #20]
10046c06:	409a      	lsls	r2, r3
10046c08:	0013      	movs	r3, r2
10046c0a:	001a      	movs	r2, r3
10046c0c:	693b      	ldr	r3, [r7, #16]
10046c0e:	4313      	orrs	r3, r2
10046c10:	613b      	str	r3, [r7, #16]
10046c12:	e011      	b.n	10046c38 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10046c14:	2201      	movs	r2, #1
10046c16:	697b      	ldr	r3, [r7, #20]
10046c18:	409a      	lsls	r2, r3
10046c1a:	0013      	movs	r3, r2
10046c1c:	041b      	lsls	r3, r3, #16
10046c1e:	43db      	mvns	r3, r3
10046c20:	001a      	movs	r2, r3
10046c22:	693b      	ldr	r3, [r7, #16]
10046c24:	4013      	ands	r3, r2
10046c26:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10046c28:	2201      	movs	r2, #1
10046c2a:	697b      	ldr	r3, [r7, #20]
10046c2c:	409a      	lsls	r2, r3
10046c2e:	0013      	movs	r3, r2
10046c30:	041b      	lsls	r3, r3, #16
10046c32:	693a      	ldr	r2, [r7, #16]
10046c34:	4313      	orrs	r3, r2
10046c36:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10046c38:	2380      	movs	r3, #128	@ 0x80
10046c3a:	05db      	lsls	r3, r3, #23
10046c3c:	693a      	ldr	r2, [r7, #16]
10046c3e:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10046c40:	697b      	ldr	r3, [r7, #20]
10046c42:	3301      	adds	r3, #1
10046c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10046c46:	683b      	ldr	r3, [r7, #0]
10046c48:	681a      	ldr	r2, [r3, #0]
10046c4a:	697b      	ldr	r3, [r7, #20]
10046c4c:	40da      	lsrs	r2, r3
10046c4e:	1e13      	subs	r3, r2, #0
10046c50:	d000      	beq.n	10046c54 <HAL_GPIO_Init+0x340>
10046c52:	e667      	b.n	10046924 <HAL_GPIO_Init+0x10>
  }
}
10046c54:	46c0      	nop			@ (mov r8, r8)
10046c56:	46c0      	nop			@ (mov r8, r8)
10046c58:	46bd      	mov	sp, r7
10046c5a:	b006      	add	sp, #24
10046c5c:	bd80      	pop	{r7, pc}

10046c5e <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
10046c5e:	b580      	push	{r7, lr}
10046c60:	b086      	sub	sp, #24
10046c62:	af00      	add	r7, sp, #0
10046c64:	6078      	str	r0, [r7, #4]
10046c66:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10046c68:	2300      	movs	r3, #0
10046c6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
10046c6c:	e0cf      	b.n	10046e0e <HAL_GPIO_DeInit+0x1b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
10046c6e:	2201      	movs	r2, #1
10046c70:	697b      	ldr	r3, [r7, #20]
10046c72:	409a      	lsls	r2, r3
10046c74:	683b      	ldr	r3, [r7, #0]
10046c76:	4013      	ands	r3, r2
10046c78:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10046c7a:	68fb      	ldr	r3, [r7, #12]
10046c7c:	2b00      	cmp	r3, #0
10046c7e:	d100      	bne.n	10046c82 <HAL_GPIO_DeInit+0x24>
10046c80:	e0c2      	b.n	10046e08 <HAL_GPIO_DeInit+0x1aa>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      /* Disable the specified EXTI interrupt line */
      tmp = SYSCFG->IO_IER;
10046c82:	2380      	movs	r3, #128	@ 0x80
10046c84:	05db      	lsls	r3, r3, #23
10046c86:	699b      	ldr	r3, [r3, #24]
10046c88:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10046c8a:	687a      	ldr	r2, [r7, #4]
10046c8c:	2390      	movs	r3, #144	@ 0x90
10046c8e:	05db      	lsls	r3, r3, #23
10046c90:	429a      	cmp	r2, r3
10046c92:	d109      	bne.n	10046ca8 <HAL_GPIO_DeInit+0x4a>
      {
        tmp &= ~(1<<position);
10046c94:	2201      	movs	r2, #1
10046c96:	697b      	ldr	r3, [r7, #20]
10046c98:	409a      	lsls	r2, r3
10046c9a:	0013      	movs	r3, r2
10046c9c:	43db      	mvns	r3, r3
10046c9e:	001a      	movs	r2, r3
10046ca0:	693b      	ldr	r3, [r7, #16]
10046ca2:	4013      	ands	r3, r2
10046ca4:	613b      	str	r3, [r7, #16]
10046ca6:	e009      	b.n	10046cbc <HAL_GPIO_DeInit+0x5e>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10046ca8:	2201      	movs	r2, #1
10046caa:	697b      	ldr	r3, [r7, #20]
10046cac:	409a      	lsls	r2, r3
10046cae:	0013      	movs	r3, r2
10046cb0:	041b      	lsls	r3, r3, #16
10046cb2:	43db      	mvns	r3, r3
10046cb4:	001a      	movs	r2, r3
10046cb6:	693b      	ldr	r3, [r7, #16]
10046cb8:	4013      	ands	r3, r2
10046cba:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IER = tmp;
10046cbc:	2380      	movs	r3, #128	@ 0x80
10046cbe:	05db      	lsls	r3, r3, #23
10046cc0:	693a      	ldr	r2, [r7, #16]
10046cc2:	619a      	str	r2, [r3, #24]

      /* Clear EXTI line configuration */
      tmp = SYSCFG->IO_DTR;
10046cc4:	2380      	movs	r3, #128	@ 0x80
10046cc6:	05db      	lsls	r3, r3, #23
10046cc8:	68db      	ldr	r3, [r3, #12]
10046cca:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10046ccc:	687a      	ldr	r2, [r7, #4]
10046cce:	2390      	movs	r3, #144	@ 0x90
10046cd0:	05db      	lsls	r3, r3, #23
10046cd2:	429a      	cmp	r2, r3
10046cd4:	d109      	bne.n	10046cea <HAL_GPIO_DeInit+0x8c>
      {
        tmp &= ~(1<<position);
10046cd6:	2201      	movs	r2, #1
10046cd8:	697b      	ldr	r3, [r7, #20]
10046cda:	409a      	lsls	r2, r3
10046cdc:	0013      	movs	r3, r2
10046cde:	43db      	mvns	r3, r3
10046ce0:	001a      	movs	r2, r3
10046ce2:	693b      	ldr	r3, [r7, #16]
10046ce4:	4013      	ands	r3, r2
10046ce6:	613b      	str	r3, [r7, #16]
10046ce8:	e009      	b.n	10046cfe <HAL_GPIO_DeInit+0xa0>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10046cea:	2201      	movs	r2, #1
10046cec:	697b      	ldr	r3, [r7, #20]
10046cee:	409a      	lsls	r2, r3
10046cf0:	0013      	movs	r3, r2
10046cf2:	041b      	lsls	r3, r3, #16
10046cf4:	43db      	mvns	r3, r3
10046cf6:	001a      	movs	r2, r3
10046cf8:	693b      	ldr	r3, [r7, #16]
10046cfa:	4013      	ands	r3, r2
10046cfc:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_DTR = tmp;
10046cfe:	2380      	movs	r3, #128	@ 0x80
10046d00:	05db      	lsls	r3, r3, #23
10046d02:	693a      	ldr	r2, [r7, #16]
10046d04:	60da      	str	r2, [r3, #12]

      tmp = SYSCFG->IO_IBER;
10046d06:	2380      	movs	r3, #128	@ 0x80
10046d08:	05db      	lsls	r3, r3, #23
10046d0a:	691b      	ldr	r3, [r3, #16]
10046d0c:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10046d0e:	687a      	ldr	r2, [r7, #4]
10046d10:	2390      	movs	r3, #144	@ 0x90
10046d12:	05db      	lsls	r3, r3, #23
10046d14:	429a      	cmp	r2, r3
10046d16:	d109      	bne.n	10046d2c <HAL_GPIO_DeInit+0xce>
      {
        tmp &= ~(1<<position);
10046d18:	2201      	movs	r2, #1
10046d1a:	697b      	ldr	r3, [r7, #20]
10046d1c:	409a      	lsls	r2, r3
10046d1e:	0013      	movs	r3, r2
10046d20:	43db      	mvns	r3, r3
10046d22:	001a      	movs	r2, r3
10046d24:	693b      	ldr	r3, [r7, #16]
10046d26:	4013      	ands	r3, r2
10046d28:	613b      	str	r3, [r7, #16]
10046d2a:	e009      	b.n	10046d40 <HAL_GPIO_DeInit+0xe2>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10046d2c:	2201      	movs	r2, #1
10046d2e:	697b      	ldr	r3, [r7, #20]
10046d30:	409a      	lsls	r2, r3
10046d32:	0013      	movs	r3, r2
10046d34:	041b      	lsls	r3, r3, #16
10046d36:	43db      	mvns	r3, r3
10046d38:	001a      	movs	r2, r3
10046d3a:	693b      	ldr	r3, [r7, #16]
10046d3c:	4013      	ands	r3, r2
10046d3e:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IBER = tmp;
10046d40:	2380      	movs	r3, #128	@ 0x80
10046d42:	05db      	lsls	r3, r3, #23
10046d44:	693a      	ldr	r2, [r7, #16]
10046d46:	611a      	str	r2, [r3, #16]

      /* Clear trigger mode configuration */
      tmp = SYSCFG->IO_IEVR;
10046d48:	2380      	movs	r3, #128	@ 0x80
10046d4a:	05db      	lsls	r3, r3, #23
10046d4c:	695b      	ldr	r3, [r3, #20]
10046d4e:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10046d50:	687a      	ldr	r2, [r7, #4]
10046d52:	2390      	movs	r3, #144	@ 0x90
10046d54:	05db      	lsls	r3, r3, #23
10046d56:	429a      	cmp	r2, r3
10046d58:	d109      	bne.n	10046d6e <HAL_GPIO_DeInit+0x110>
      {
        tmp &= ~(1<<position);
10046d5a:	2201      	movs	r2, #1
10046d5c:	697b      	ldr	r3, [r7, #20]
10046d5e:	409a      	lsls	r2, r3
10046d60:	0013      	movs	r3, r2
10046d62:	43db      	mvns	r3, r3
10046d64:	001a      	movs	r2, r3
10046d66:	693b      	ldr	r3, [r7, #16]
10046d68:	4013      	ands	r3, r2
10046d6a:	613b      	str	r3, [r7, #16]
10046d6c:	e009      	b.n	10046d82 <HAL_GPIO_DeInit+0x124>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10046d6e:	2201      	movs	r2, #1
10046d70:	697b      	ldr	r3, [r7, #20]
10046d72:	409a      	lsls	r2, r3
10046d74:	0013      	movs	r3, r2
10046d76:	041b      	lsls	r3, r3, #16
10046d78:	43db      	mvns	r3, r3
10046d7a:	001a      	movs	r2, r3
10046d7c:	693b      	ldr	r3, [r7, #16]
10046d7e:	4013      	ands	r3, r2
10046d80:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IEVR = tmp;
10046d82:	2380      	movs	r3, #128	@ 0x80
10046d84:	05db      	lsls	r3, r3, #23
10046d86:	693a      	ldr	r2, [r7, #16]
10046d88:	615a      	str	r2, [r3, #20]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
10046d8a:	687b      	ldr	r3, [r7, #4]
10046d8c:	681a      	ldr	r2, [r3, #0]
10046d8e:	697b      	ldr	r3, [r7, #20]
10046d90:	005b      	lsls	r3, r3, #1
10046d92:	2103      	movs	r1, #3
10046d94:	4099      	lsls	r1, r3
10046d96:	000b      	movs	r3, r1
10046d98:	431a      	orrs	r2, r3
10046d9a:	687b      	ldr	r3, [r7, #4]
10046d9c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
10046d9e:	697b      	ldr	r3, [r7, #20]
10046da0:	08da      	lsrs	r2, r3, #3
10046da2:	687b      	ldr	r3, [r7, #4]
10046da4:	3208      	adds	r2, #8
10046da6:	0092      	lsls	r2, r2, #2
10046da8:	58d3      	ldr	r3, [r2, r3]
10046daa:	697a      	ldr	r2, [r7, #20]
10046dac:	2107      	movs	r1, #7
10046dae:	400a      	ands	r2, r1
10046db0:	0092      	lsls	r2, r2, #2
10046db2:	210f      	movs	r1, #15
10046db4:	4091      	lsls	r1, r2
10046db6:	000a      	movs	r2, r1
10046db8:	43d1      	mvns	r1, r2
10046dba:	697a      	ldr	r2, [r7, #20]
10046dbc:	08d2      	lsrs	r2, r2, #3
10046dbe:	4019      	ands	r1, r3
10046dc0:	687b      	ldr	r3, [r7, #4]
10046dc2:	3208      	adds	r2, #8
10046dc4:	0092      	lsls	r2, r2, #2
10046dc6:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
10046dc8:	687b      	ldr	r3, [r7, #4]
10046dca:	68db      	ldr	r3, [r3, #12]
10046dcc:	697a      	ldr	r2, [r7, #20]
10046dce:	0052      	lsls	r2, r2, #1
10046dd0:	2103      	movs	r1, #3
10046dd2:	4091      	lsls	r1, r2
10046dd4:	000a      	movs	r2, r1
10046dd6:	43d2      	mvns	r2, r2
10046dd8:	401a      	ands	r2, r3
10046dda:	687b      	ldr	r3, [r7, #4]
10046ddc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
10046dde:	687b      	ldr	r3, [r7, #4]
10046de0:	685b      	ldr	r3, [r3, #4]
10046de2:	2101      	movs	r1, #1
10046de4:	697a      	ldr	r2, [r7, #20]
10046de6:	4091      	lsls	r1, r2
10046de8:	000a      	movs	r2, r1
10046dea:	43d2      	mvns	r2, r2
10046dec:	401a      	ands	r2, r3
10046dee:	687b      	ldr	r3, [r7, #4]
10046df0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10046df2:	687b      	ldr	r3, [r7, #4]
10046df4:	689b      	ldr	r3, [r3, #8]
10046df6:	697a      	ldr	r2, [r7, #20]
10046df8:	0052      	lsls	r2, r2, #1
10046dfa:	2103      	movs	r1, #3
10046dfc:	4091      	lsls	r1, r2
10046dfe:	000a      	movs	r2, r1
10046e00:	43d2      	mvns	r2, r2
10046e02:	401a      	ands	r2, r3
10046e04:	687b      	ldr	r3, [r7, #4]
10046e06:	609a      	str	r2, [r3, #8]
    }

    position++;
10046e08:	697b      	ldr	r3, [r7, #20]
10046e0a:	3301      	adds	r3, #1
10046e0c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
10046e0e:	683a      	ldr	r2, [r7, #0]
10046e10:	697b      	ldr	r3, [r7, #20]
10046e12:	40da      	lsrs	r2, r3
10046e14:	1e13      	subs	r3, r2, #0
10046e16:	d000      	beq.n	10046e1a <HAL_GPIO_DeInit+0x1bc>
10046e18:	e729      	b.n	10046c6e <HAL_GPIO_DeInit+0x10>
  }
}
10046e1a:	46c0      	nop			@ (mov r8, r8)
10046e1c:	46c0      	nop			@ (mov r8, r8)
10046e1e:	46bd      	mov	sp, r7
10046e20:	b006      	add	sp, #24
10046e22:	bd80      	pop	{r7, pc}

10046e24 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10046e24:	b580      	push	{r7, lr}
10046e26:	b084      	sub	sp, #16
10046e28:	af00      	add	r7, sp, #0
10046e2a:	6078      	str	r0, [r7, #4]
10046e2c:	000a      	movs	r2, r1
10046e2e:	1cbb      	adds	r3, r7, #2
10046e30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10046e32:	687b      	ldr	r3, [r7, #4]
10046e34:	691b      	ldr	r3, [r3, #16]
10046e36:	1cba      	adds	r2, r7, #2
10046e38:	8812      	ldrh	r2, [r2, #0]
10046e3a:	4013      	ands	r3, r2
10046e3c:	d004      	beq.n	10046e48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10046e3e:	230f      	movs	r3, #15
10046e40:	18fb      	adds	r3, r7, r3
10046e42:	2201      	movs	r2, #1
10046e44:	701a      	strb	r2, [r3, #0]
10046e46:	e003      	b.n	10046e50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
10046e48:	230f      	movs	r3, #15
10046e4a:	18fb      	adds	r3, r7, r3
10046e4c:	2200      	movs	r2, #0
10046e4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10046e50:	230f      	movs	r3, #15
10046e52:	18fb      	adds	r3, r7, r3
10046e54:	781b      	ldrb	r3, [r3, #0]
}
10046e56:	0018      	movs	r0, r3
10046e58:	46bd      	mov	sp, r7
10046e5a:	b004      	add	sp, #16
10046e5c:	bd80      	pop	{r7, pc}

10046e5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10046e5e:	b580      	push	{r7, lr}
10046e60:	b082      	sub	sp, #8
10046e62:	af00      	add	r7, sp, #0
10046e64:	6078      	str	r0, [r7, #4]
10046e66:	0008      	movs	r0, r1
10046e68:	0011      	movs	r1, r2
10046e6a:	1cbb      	adds	r3, r7, #2
10046e6c:	1c02      	adds	r2, r0, #0
10046e6e:	801a      	strh	r2, [r3, #0]
10046e70:	1c7b      	adds	r3, r7, #1
10046e72:	1c0a      	adds	r2, r1, #0
10046e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10046e76:	1c7b      	adds	r3, r7, #1
10046e78:	781b      	ldrb	r3, [r3, #0]
10046e7a:	2b00      	cmp	r3, #0
10046e7c:	d004      	beq.n	10046e88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10046e7e:	1cbb      	adds	r3, r7, #2
10046e80:	881a      	ldrh	r2, [r3, #0]
10046e82:	687b      	ldr	r3, [r7, #4]
10046e84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10046e86:	e003      	b.n	10046e90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10046e88:	1cbb      	adds	r3, r7, #2
10046e8a:	881a      	ldrh	r2, [r3, #0]
10046e8c:	687b      	ldr	r3, [r7, #4]
10046e8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046e90:	46c0      	nop			@ (mov r8, r8)
10046e92:	46bd      	mov	sp, r7
10046e94:	b002      	add	sp, #8
10046e96:	bd80      	pop	{r7, pc}

10046e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10046e98:	b580      	push	{r7, lr}
10046e9a:	b082      	sub	sp, #8
10046e9c:	af00      	add	r7, sp, #0
10046e9e:	6078      	str	r0, [r7, #4]
10046ea0:	000a      	movs	r2, r1
10046ea2:	1cbb      	adds	r3, r7, #2
10046ea4:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
10046ea6:	687a      	ldr	r2, [r7, #4]
10046ea8:	2390      	movs	r3, #144	@ 0x90
10046eaa:	05db      	lsls	r3, r3, #23
10046eac:	429a      	cmp	r2, r3
10046eae:	d109      	bne.n	10046ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
10046eb0:	2380      	movs	r3, #128	@ 0x80
10046eb2:	05db      	lsls	r3, r3, #23
10046eb4:	69db      	ldr	r3, [r3, #28]
10046eb6:	1cba      	adds	r2, r7, #2
10046eb8:	8812      	ldrh	r2, [r2, #0]
10046eba:	4013      	ands	r3, r2
10046ebc:	1e5a      	subs	r2, r3, #1
10046ebe:	4193      	sbcs	r3, r2
10046ec0:	b2db      	uxtb	r3, r3
10046ec2:	e009      	b.n	10046ed8 <HAL_GPIO_EXTI_IRQHandler+0x40>
10046ec4:	2380      	movs	r3, #128	@ 0x80
10046ec6:	05db      	lsls	r3, r3, #23
10046ec8:	69db      	ldr	r3, [r3, #28]
10046eca:	1cba      	adds	r2, r7, #2
10046ecc:	8812      	ldrh	r2, [r2, #0]
10046ece:	0412      	lsls	r2, r2, #16
10046ed0:	4013      	ands	r3, r2
10046ed2:	1e5a      	subs	r2, r3, #1
10046ed4:	4193      	sbcs	r3, r2
10046ed6:	b2db      	uxtb	r3, r3
10046ed8:	2b00      	cmp	r3, #0
10046eda:	d017      	beq.n	10046f0c <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
10046edc:	687a      	ldr	r2, [r7, #4]
10046ede:	2390      	movs	r3, #144	@ 0x90
10046ee0:	05db      	lsls	r3, r3, #23
10046ee2:	429a      	cmp	r2, r3
10046ee4:	d105      	bne.n	10046ef2 <HAL_GPIO_EXTI_IRQHandler+0x5a>
10046ee6:	2380      	movs	r3, #128	@ 0x80
10046ee8:	05db      	lsls	r3, r3, #23
10046eea:	1cba      	adds	r2, r7, #2
10046eec:	8812      	ldrh	r2, [r2, #0]
10046eee:	61da      	str	r2, [r3, #28]
10046ef0:	e005      	b.n	10046efe <HAL_GPIO_EXTI_IRQHandler+0x66>
10046ef2:	1cbb      	adds	r3, r7, #2
10046ef4:	881a      	ldrh	r2, [r3, #0]
10046ef6:	2380      	movs	r3, #128	@ 0x80
10046ef8:	05db      	lsls	r3, r3, #23
10046efa:	0412      	lsls	r2, r2, #16
10046efc:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10046efe:	1cbb      	adds	r3, r7, #2
10046f00:	881a      	ldrh	r2, [r3, #0]
10046f02:	687b      	ldr	r3, [r7, #4]
10046f04:	0011      	movs	r1, r2
10046f06:	0018      	movs	r0, r3
10046f08:	f000 f804 	bl	10046f14 <HAL_GPIO_EXTI_Callback>
  }
}
10046f0c:	46c0      	nop			@ (mov r8, r8)
10046f0e:	46bd      	mov	sp, r7
10046f10:	b002      	add	sp, #8
10046f12:	bd80      	pop	{r7, pc}

10046f14 <HAL_GPIO_EXTI_Callback>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10046f14:	b580      	push	{r7, lr}
10046f16:	b082      	sub	sp, #8
10046f18:	af00      	add	r7, sp, #0
10046f1a:	6078      	str	r0, [r7, #4]
10046f1c:	000a      	movs	r2, r1
10046f1e:	1cbb      	adds	r3, r7, #2
10046f20:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
10046f22:	46c0      	nop			@ (mov r8, r8)
10046f24:	46bd      	mov	sp, r7
10046f26:	b002      	add	sp, #8
10046f28:	bd80      	pop	{r7, pc}
	...

10046f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10046f2c:	b580      	push	{r7, lr}
10046f2e:	b082      	sub	sp, #8
10046f30:	af00      	add	r7, sp, #0
10046f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10046f34:	687b      	ldr	r3, [r7, #4]
10046f36:	2b00      	cmp	r3, #0
10046f38:	d101      	bne.n	10046f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
10046f3a:	2301      	movs	r3, #1
10046f3c:	e08f      	b.n	1004705e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10046f3e:	687b      	ldr	r3, [r7, #4]
10046f40:	2241      	movs	r2, #65	@ 0x41
10046f42:	5c9b      	ldrb	r3, [r3, r2]
10046f44:	b2db      	uxtb	r3, r3
10046f46:	2b00      	cmp	r3, #0
10046f48:	d107      	bne.n	10046f5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
10046f4a:	687b      	ldr	r3, [r7, #4]
10046f4c:	2240      	movs	r2, #64	@ 0x40
10046f4e:	2100      	movs	r1, #0
10046f50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10046f52:	687b      	ldr	r3, [r7, #4]
10046f54:	0018      	movs	r0, r3
10046f56:	f7fe fc6b 	bl	10045830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
10046f5a:	687b      	ldr	r3, [r7, #4]
10046f5c:	2241      	movs	r2, #65	@ 0x41
10046f5e:	2124      	movs	r1, #36	@ 0x24
10046f60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10046f62:	687b      	ldr	r3, [r7, #4]
10046f64:	681b      	ldr	r3, [r3, #0]
10046f66:	681a      	ldr	r2, [r3, #0]
10046f68:	687b      	ldr	r3, [r7, #4]
10046f6a:	681b      	ldr	r3, [r3, #0]
10046f6c:	2101      	movs	r1, #1
10046f6e:	438a      	bics	r2, r1
10046f70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10046f72:	687b      	ldr	r3, [r7, #4]
10046f74:	685a      	ldr	r2, [r3, #4]
10046f76:	687b      	ldr	r3, [r7, #4]
10046f78:	681b      	ldr	r3, [r3, #0]
10046f7a:	493b      	ldr	r1, [pc, #236]	@ (10047068 <HAL_I2C_Init+0x13c>)
10046f7c:	400a      	ands	r2, r1
10046f7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10046f80:	687b      	ldr	r3, [r7, #4]
10046f82:	681b      	ldr	r3, [r3, #0]
10046f84:	689a      	ldr	r2, [r3, #8]
10046f86:	687b      	ldr	r3, [r7, #4]
10046f88:	681b      	ldr	r3, [r3, #0]
10046f8a:	4938      	ldr	r1, [pc, #224]	@ (1004706c <HAL_I2C_Init+0x140>)
10046f8c:	400a      	ands	r2, r1
10046f8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10046f90:	687b      	ldr	r3, [r7, #4]
10046f92:	68db      	ldr	r3, [r3, #12]
10046f94:	2b01      	cmp	r3, #1
10046f96:	d108      	bne.n	10046faa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10046f98:	687b      	ldr	r3, [r7, #4]
10046f9a:	689a      	ldr	r2, [r3, #8]
10046f9c:	687b      	ldr	r3, [r7, #4]
10046f9e:	681b      	ldr	r3, [r3, #0]
10046fa0:	2180      	movs	r1, #128	@ 0x80
10046fa2:	0209      	lsls	r1, r1, #8
10046fa4:	430a      	orrs	r2, r1
10046fa6:	609a      	str	r2, [r3, #8]
10046fa8:	e007      	b.n	10046fba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
10046faa:	687b      	ldr	r3, [r7, #4]
10046fac:	689a      	ldr	r2, [r3, #8]
10046fae:	687b      	ldr	r3, [r7, #4]
10046fb0:	681b      	ldr	r3, [r3, #0]
10046fb2:	2184      	movs	r1, #132	@ 0x84
10046fb4:	0209      	lsls	r1, r1, #8
10046fb6:	430a      	orrs	r2, r1
10046fb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10046fba:	687b      	ldr	r3, [r7, #4]
10046fbc:	68db      	ldr	r3, [r3, #12]
10046fbe:	2b02      	cmp	r3, #2
10046fc0:	d109      	bne.n	10046fd6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10046fc2:	687b      	ldr	r3, [r7, #4]
10046fc4:	681b      	ldr	r3, [r3, #0]
10046fc6:	685a      	ldr	r2, [r3, #4]
10046fc8:	687b      	ldr	r3, [r7, #4]
10046fca:	681b      	ldr	r3, [r3, #0]
10046fcc:	2180      	movs	r1, #128	@ 0x80
10046fce:	0109      	lsls	r1, r1, #4
10046fd0:	430a      	orrs	r2, r1
10046fd2:	605a      	str	r2, [r3, #4]
10046fd4:	e007      	b.n	10046fe6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10046fd6:	687b      	ldr	r3, [r7, #4]
10046fd8:	681b      	ldr	r3, [r3, #0]
10046fda:	685a      	ldr	r2, [r3, #4]
10046fdc:	687b      	ldr	r3, [r7, #4]
10046fde:	681b      	ldr	r3, [r3, #0]
10046fe0:	4923      	ldr	r1, [pc, #140]	@ (10047070 <HAL_I2C_Init+0x144>)
10046fe2:	400a      	ands	r2, r1
10046fe4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
10046fe6:	687b      	ldr	r3, [r7, #4]
10046fe8:	681b      	ldr	r3, [r3, #0]
10046fea:	685a      	ldr	r2, [r3, #4]
10046fec:	687b      	ldr	r3, [r7, #4]
10046fee:	681b      	ldr	r3, [r3, #0]
10046ff0:	4920      	ldr	r1, [pc, #128]	@ (10047074 <HAL_I2C_Init+0x148>)
10046ff2:	430a      	orrs	r2, r1
10046ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
10046ff6:	687b      	ldr	r3, [r7, #4]
10046ff8:	681b      	ldr	r3, [r3, #0]
10046ffa:	68da      	ldr	r2, [r3, #12]
10046ffc:	687b      	ldr	r3, [r7, #4]
10046ffe:	681b      	ldr	r3, [r3, #0]
10047000:	491a      	ldr	r1, [pc, #104]	@ (1004706c <HAL_I2C_Init+0x140>)
10047002:	400a      	ands	r2, r1
10047004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10047006:	687b      	ldr	r3, [r7, #4]
10047008:	691a      	ldr	r2, [r3, #16]
1004700a:	687b      	ldr	r3, [r7, #4]
1004700c:	695b      	ldr	r3, [r3, #20]
1004700e:	431a      	orrs	r2, r3
10047010:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
10047012:	687b      	ldr	r3, [r7, #4]
10047014:	699b      	ldr	r3, [r3, #24]
10047016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10047018:	687b      	ldr	r3, [r7, #4]
1004701a:	681b      	ldr	r3, [r3, #0]
1004701c:	430a      	orrs	r2, r1
1004701e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10047020:	687b      	ldr	r3, [r7, #4]
10047022:	69d9      	ldr	r1, [r3, #28]
10047024:	687b      	ldr	r3, [r7, #4]
10047026:	6a1a      	ldr	r2, [r3, #32]
10047028:	687b      	ldr	r3, [r7, #4]
1004702a:	681b      	ldr	r3, [r3, #0]
1004702c:	430a      	orrs	r2, r1
1004702e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
10047030:	687b      	ldr	r3, [r7, #4]
10047032:	681b      	ldr	r3, [r3, #0]
10047034:	681a      	ldr	r2, [r3, #0]
10047036:	687b      	ldr	r3, [r7, #4]
10047038:	681b      	ldr	r3, [r3, #0]
1004703a:	2101      	movs	r1, #1
1004703c:	430a      	orrs	r2, r1
1004703e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10047040:	687b      	ldr	r3, [r7, #4]
10047042:	2200      	movs	r2, #0
10047044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
10047046:	687b      	ldr	r3, [r7, #4]
10047048:	2241      	movs	r2, #65	@ 0x41
1004704a:	2120      	movs	r1, #32
1004704c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
1004704e:	687b      	ldr	r3, [r7, #4]
10047050:	2200      	movs	r2, #0
10047052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10047054:	687b      	ldr	r3, [r7, #4]
10047056:	2242      	movs	r2, #66	@ 0x42
10047058:	2100      	movs	r1, #0
1004705a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004705c:	2300      	movs	r3, #0
}
1004705e:	0018      	movs	r0, r3
10047060:	46bd      	mov	sp, r7
10047062:	b002      	add	sp, #8
10047064:	bd80      	pop	{r7, pc}
10047066:	46c0      	nop			@ (mov r8, r8)
10047068:	f0ffffff 	.word	0xf0ffffff
1004706c:	ffff7fff 	.word	0xffff7fff
10047070:	fffff7ff 	.word	0xfffff7ff
10047074:	02008000 	.word	0x02008000

10047078 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10047078:	b590      	push	{r4, r7, lr}
1004707a:	b087      	sub	sp, #28
1004707c:	af02      	add	r7, sp, #8
1004707e:	60f8      	str	r0, [r7, #12]
10047080:	000c      	movs	r4, r1
10047082:	0010      	movs	r0, r2
10047084:	0019      	movs	r1, r3
10047086:	230a      	movs	r3, #10
10047088:	18fb      	adds	r3, r7, r3
1004708a:	1c22      	adds	r2, r4, #0
1004708c:	801a      	strh	r2, [r3, #0]
1004708e:	2308      	movs	r3, #8
10047090:	18fb      	adds	r3, r7, r3
10047092:	1c02      	adds	r2, r0, #0
10047094:	801a      	strh	r2, [r3, #0]
10047096:	1dbb      	adds	r3, r7, #6
10047098:	1c0a      	adds	r2, r1, #0
1004709a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004709c:	68fb      	ldr	r3, [r7, #12]
1004709e:	2241      	movs	r2, #65	@ 0x41
100470a0:	5c9b      	ldrb	r3, [r3, r2]
100470a2:	b2db      	uxtb	r3, r3
100470a4:	2b20      	cmp	r3, #32
100470a6:	d000      	beq.n	100470aa <HAL_I2C_Mem_Write_IT+0x32>
100470a8:	e07d      	b.n	100471a6 <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
100470aa:	6a3b      	ldr	r3, [r7, #32]
100470ac:	2b00      	cmp	r3, #0
100470ae:	d004      	beq.n	100470ba <HAL_I2C_Mem_Write_IT+0x42>
100470b0:	2324      	movs	r3, #36	@ 0x24
100470b2:	18fb      	adds	r3, r7, r3
100470b4:	881b      	ldrh	r3, [r3, #0]
100470b6:	2b00      	cmp	r3, #0
100470b8:	d105      	bne.n	100470c6 <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100470ba:	68fb      	ldr	r3, [r7, #12]
100470bc:	2280      	movs	r2, #128	@ 0x80
100470be:	0092      	lsls	r2, r2, #2
100470c0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
100470c2:	2301      	movs	r3, #1
100470c4:	e070      	b.n	100471a8 <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
100470c6:	68fb      	ldr	r3, [r7, #12]
100470c8:	681b      	ldr	r3, [r3, #0]
100470ca:	699a      	ldr	r2, [r3, #24]
100470cc:	2380      	movs	r3, #128	@ 0x80
100470ce:	021b      	lsls	r3, r3, #8
100470d0:	401a      	ands	r2, r3
100470d2:	2380      	movs	r3, #128	@ 0x80
100470d4:	021b      	lsls	r3, r3, #8
100470d6:	429a      	cmp	r2, r3
100470d8:	d101      	bne.n	100470de <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
100470da:	2302      	movs	r3, #2
100470dc:	e064      	b.n	100471a8 <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100470de:	68fb      	ldr	r3, [r7, #12]
100470e0:	2240      	movs	r2, #64	@ 0x40
100470e2:	5c9b      	ldrb	r3, [r3, r2]
100470e4:	2b01      	cmp	r3, #1
100470e6:	d101      	bne.n	100470ec <HAL_I2C_Mem_Write_IT+0x74>
100470e8:	2302      	movs	r3, #2
100470ea:	e05d      	b.n	100471a8 <HAL_I2C_Mem_Write_IT+0x130>
100470ec:	68fb      	ldr	r3, [r7, #12]
100470ee:	2240      	movs	r2, #64	@ 0x40
100470f0:	2101      	movs	r1, #1
100470f2:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
100470f4:	68fb      	ldr	r3, [r7, #12]
100470f6:	2241      	movs	r2, #65	@ 0x41
100470f8:	2121      	movs	r1, #33	@ 0x21
100470fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
100470fc:	68fb      	ldr	r3, [r7, #12]
100470fe:	2242      	movs	r2, #66	@ 0x42
10047100:	2140      	movs	r1, #64	@ 0x40
10047102:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10047104:	68fb      	ldr	r3, [r7, #12]
10047106:	2200      	movs	r2, #0
10047108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
1004710a:	68fb      	ldr	r3, [r7, #12]
1004710c:	2200      	movs	r2, #0
1004710e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
10047110:	68fb      	ldr	r3, [r7, #12]
10047112:	6a3a      	ldr	r2, [r7, #32]
10047114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10047116:	68fb      	ldr	r3, [r7, #12]
10047118:	2224      	movs	r2, #36	@ 0x24
1004711a:	18ba      	adds	r2, r7, r2
1004711c:	8812      	ldrh	r2, [r2, #0]
1004711e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10047120:	68fb      	ldr	r3, [r7, #12]
10047122:	4a23      	ldr	r2, [pc, #140]	@ (100471b0 <HAL_I2C_Mem_Write_IT+0x138>)
10047124:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10047126:	68fb      	ldr	r3, [r7, #12]
10047128:	4a22      	ldr	r2, [pc, #136]	@ (100471b4 <HAL_I2C_Mem_Write_IT+0x13c>)
1004712a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
1004712c:	230a      	movs	r3, #10
1004712e:	18fb      	adds	r3, r7, r3
10047130:	881a      	ldrh	r2, [r3, #0]
10047132:	68fb      	ldr	r3, [r7, #12]
10047134:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10047136:	1dbb      	adds	r3, r7, #6
10047138:	881b      	ldrh	r3, [r3, #0]
1004713a:	2b01      	cmp	r3, #1
1004713c:	d10b      	bne.n	10047156 <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
1004713e:	2308      	movs	r3, #8
10047140:	18fb      	adds	r3, r7, r3
10047142:	881b      	ldrh	r3, [r3, #0]
10047144:	b2da      	uxtb	r2, r3
10047146:	68fb      	ldr	r3, [r7, #12]
10047148:	681b      	ldr	r3, [r3, #0]
1004714a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
1004714c:	68fb      	ldr	r3, [r7, #12]
1004714e:	2201      	movs	r2, #1
10047150:	4252      	negs	r2, r2
10047152:	651a      	str	r2, [r3, #80]	@ 0x50
10047154:	e00e      	b.n	10047174 <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10047156:	2108      	movs	r1, #8
10047158:	187b      	adds	r3, r7, r1
1004715a:	881b      	ldrh	r3, [r3, #0]
1004715c:	0a1b      	lsrs	r3, r3, #8
1004715e:	b29b      	uxth	r3, r3
10047160:	b2da      	uxtb	r2, r3
10047162:	68fb      	ldr	r3, [r7, #12]
10047164:	681b      	ldr	r3, [r3, #0]
10047166:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
10047168:	187b      	adds	r3, r7, r1
1004716a:	881b      	ldrh	r3, [r3, #0]
1004716c:	b2db      	uxtb	r3, r3
1004716e:	001a      	movs	r2, r3
10047170:	68fb      	ldr	r3, [r7, #12]
10047172:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10047174:	1dbb      	adds	r3, r7, #6
10047176:	881b      	ldrh	r3, [r3, #0]
10047178:	b2da      	uxtb	r2, r3
1004717a:	2380      	movs	r3, #128	@ 0x80
1004717c:	045c      	lsls	r4, r3, #17
1004717e:	230a      	movs	r3, #10
10047180:	18fb      	adds	r3, r7, r3
10047182:	8819      	ldrh	r1, [r3, #0]
10047184:	68f8      	ldr	r0, [r7, #12]
10047186:	4b0c      	ldr	r3, [pc, #48]	@ (100471b8 <HAL_I2C_Mem_Write_IT+0x140>)
10047188:	9300      	str	r3, [sp, #0]
1004718a:	0023      	movs	r3, r4
1004718c:	f001 fc76 	bl	10048a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10047190:	68fb      	ldr	r3, [r7, #12]
10047192:	2240      	movs	r2, #64	@ 0x40
10047194:	2100      	movs	r1, #0
10047196:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10047198:	68fb      	ldr	r3, [r7, #12]
1004719a:	2101      	movs	r1, #1
1004719c:	0018      	movs	r0, r3
1004719e:	f001 fca7 	bl	10048af0 <I2C_Enable_IRQ>

    return HAL_OK;
100471a2:	2300      	movs	r3, #0
100471a4:	e000      	b.n	100471a8 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
100471a6:	2302      	movs	r3, #2
  }
}
100471a8:	0018      	movs	r0, r3
100471aa:	46bd      	mov	sp, r7
100471ac:	b005      	add	sp, #20
100471ae:	bd90      	pop	{r4, r7, pc}
100471b0:	ffff0000 	.word	0xffff0000
100471b4:	10047471 	.word	0x10047471
100471b8:	80002000 	.word	0x80002000

100471bc <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
100471bc:	b590      	push	{r4, r7, lr}
100471be:	b087      	sub	sp, #28
100471c0:	af02      	add	r7, sp, #8
100471c2:	60f8      	str	r0, [r7, #12]
100471c4:	000c      	movs	r4, r1
100471c6:	0010      	movs	r0, r2
100471c8:	0019      	movs	r1, r3
100471ca:	230a      	movs	r3, #10
100471cc:	18fb      	adds	r3, r7, r3
100471ce:	1c22      	adds	r2, r4, #0
100471d0:	801a      	strh	r2, [r3, #0]
100471d2:	2308      	movs	r3, #8
100471d4:	18fb      	adds	r3, r7, r3
100471d6:	1c02      	adds	r2, r0, #0
100471d8:	801a      	strh	r2, [r3, #0]
100471da:	1dbb      	adds	r3, r7, #6
100471dc:	1c0a      	adds	r2, r1, #0
100471de:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100471e0:	68fb      	ldr	r3, [r7, #12]
100471e2:	2241      	movs	r2, #65	@ 0x41
100471e4:	5c9b      	ldrb	r3, [r3, r2]
100471e6:	b2db      	uxtb	r3, r3
100471e8:	2b20      	cmp	r3, #32
100471ea:	d000      	beq.n	100471ee <HAL_I2C_Mem_Read_IT+0x32>
100471ec:	e078      	b.n	100472e0 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
100471ee:	6a3b      	ldr	r3, [r7, #32]
100471f0:	2b00      	cmp	r3, #0
100471f2:	d004      	beq.n	100471fe <HAL_I2C_Mem_Read_IT+0x42>
100471f4:	2324      	movs	r3, #36	@ 0x24
100471f6:	18fb      	adds	r3, r7, r3
100471f8:	881b      	ldrh	r3, [r3, #0]
100471fa:	2b00      	cmp	r3, #0
100471fc:	d105      	bne.n	1004720a <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100471fe:	68fb      	ldr	r3, [r7, #12]
10047200:	2280      	movs	r2, #128	@ 0x80
10047202:	0092      	lsls	r2, r2, #2
10047204:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10047206:	2301      	movs	r3, #1
10047208:	e06b      	b.n	100472e2 <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1004720a:	68fb      	ldr	r3, [r7, #12]
1004720c:	681b      	ldr	r3, [r3, #0]
1004720e:	699a      	ldr	r2, [r3, #24]
10047210:	2380      	movs	r3, #128	@ 0x80
10047212:	021b      	lsls	r3, r3, #8
10047214:	401a      	ands	r2, r3
10047216:	2380      	movs	r3, #128	@ 0x80
10047218:	021b      	lsls	r3, r3, #8
1004721a:	429a      	cmp	r2, r3
1004721c:	d101      	bne.n	10047222 <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
1004721e:	2302      	movs	r3, #2
10047220:	e05f      	b.n	100472e2 <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10047222:	68fb      	ldr	r3, [r7, #12]
10047224:	2240      	movs	r2, #64	@ 0x40
10047226:	5c9b      	ldrb	r3, [r3, r2]
10047228:	2b01      	cmp	r3, #1
1004722a:	d101      	bne.n	10047230 <HAL_I2C_Mem_Read_IT+0x74>
1004722c:	2302      	movs	r3, #2
1004722e:	e058      	b.n	100472e2 <HAL_I2C_Mem_Read_IT+0x126>
10047230:	68fb      	ldr	r3, [r7, #12]
10047232:	2240      	movs	r2, #64	@ 0x40
10047234:	2101      	movs	r1, #1
10047236:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
10047238:	68fb      	ldr	r3, [r7, #12]
1004723a:	2241      	movs	r2, #65	@ 0x41
1004723c:	2122      	movs	r1, #34	@ 0x22
1004723e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10047240:	68fb      	ldr	r3, [r7, #12]
10047242:	2242      	movs	r2, #66	@ 0x42
10047244:	2140      	movs	r1, #64	@ 0x40
10047246:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10047248:	68fb      	ldr	r3, [r7, #12]
1004724a:	2200      	movs	r2, #0
1004724c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
1004724e:	68fb      	ldr	r3, [r7, #12]
10047250:	6a3a      	ldr	r2, [r7, #32]
10047252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10047254:	68fb      	ldr	r3, [r7, #12]
10047256:	2224      	movs	r2, #36	@ 0x24
10047258:	18ba      	adds	r2, r7, r2
1004725a:	8812      	ldrh	r2, [r2, #0]
1004725c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004725e:	68fb      	ldr	r3, [r7, #12]
10047260:	4a22      	ldr	r2, [pc, #136]	@ (100472ec <HAL_I2C_Mem_Read_IT+0x130>)
10047262:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10047264:	68fb      	ldr	r3, [r7, #12]
10047266:	4a22      	ldr	r2, [pc, #136]	@ (100472f0 <HAL_I2C_Mem_Read_IT+0x134>)
10047268:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
1004726a:	230a      	movs	r3, #10
1004726c:	18fb      	adds	r3, r7, r3
1004726e:	881a      	ldrh	r2, [r3, #0]
10047270:	68fb      	ldr	r3, [r7, #12]
10047272:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10047274:	1dbb      	adds	r3, r7, #6
10047276:	881b      	ldrh	r3, [r3, #0]
10047278:	2b01      	cmp	r3, #1
1004727a:	d10b      	bne.n	10047294 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
1004727c:	2308      	movs	r3, #8
1004727e:	18fb      	adds	r3, r7, r3
10047280:	881b      	ldrh	r3, [r3, #0]
10047282:	b2da      	uxtb	r2, r3
10047284:	68fb      	ldr	r3, [r7, #12]
10047286:	681b      	ldr	r3, [r3, #0]
10047288:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
1004728a:	68fb      	ldr	r3, [r7, #12]
1004728c:	2201      	movs	r2, #1
1004728e:	4252      	negs	r2, r2
10047290:	651a      	str	r2, [r3, #80]	@ 0x50
10047292:	e00e      	b.n	100472b2 <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10047294:	2108      	movs	r1, #8
10047296:	187b      	adds	r3, r7, r1
10047298:	881b      	ldrh	r3, [r3, #0]
1004729a:	0a1b      	lsrs	r3, r3, #8
1004729c:	b29b      	uxth	r3, r3
1004729e:	b2da      	uxtb	r2, r3
100472a0:	68fb      	ldr	r3, [r7, #12]
100472a2:	681b      	ldr	r3, [r3, #0]
100472a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
100472a6:	187b      	adds	r3, r7, r1
100472a8:	881b      	ldrh	r3, [r3, #0]
100472aa:	b2db      	uxtb	r3, r3
100472ac:	001a      	movs	r2, r3
100472ae:	68fb      	ldr	r3, [r7, #12]
100472b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
100472b2:	1dbb      	adds	r3, r7, #6
100472b4:	881b      	ldrh	r3, [r3, #0]
100472b6:	b2da      	uxtb	r2, r3
100472b8:	230a      	movs	r3, #10
100472ba:	18fb      	adds	r3, r7, r3
100472bc:	8819      	ldrh	r1, [r3, #0]
100472be:	68f8      	ldr	r0, [r7, #12]
100472c0:	4b0c      	ldr	r3, [pc, #48]	@ (100472f4 <HAL_I2C_Mem_Read_IT+0x138>)
100472c2:	9300      	str	r3, [sp, #0]
100472c4:	2300      	movs	r3, #0
100472c6:	f001 fbd9 	bl	10048a7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100472ca:	68fb      	ldr	r3, [r7, #12]
100472cc:	2240      	movs	r2, #64	@ 0x40
100472ce:	2100      	movs	r1, #0
100472d0:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
100472d2:	68fb      	ldr	r3, [r7, #12]
100472d4:	2101      	movs	r1, #1
100472d6:	0018      	movs	r0, r3
100472d8:	f001 fc0a 	bl	10048af0 <I2C_Enable_IRQ>

    return HAL_OK;
100472dc:	2300      	movs	r3, #0
100472de:	e000      	b.n	100472e2 <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
100472e0:	2302      	movs	r3, #2
  }
}
100472e2:	0018      	movs	r0, r3
100472e4:	46bd      	mov	sp, r7
100472e6:	b005      	add	sp, #20
100472e8:	bd90      	pop	{r4, r7, pc}
100472ea:	46c0      	nop			@ (mov r8, r8)
100472ec:	ffff0000 	.word	0xffff0000
100472f0:	10047471 	.word	0x10047471
100472f4:	80002000 	.word	0x80002000

100472f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
100472f8:	b580      	push	{r7, lr}
100472fa:	b084      	sub	sp, #16
100472fc:	af00      	add	r7, sp, #0
100472fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10047300:	687b      	ldr	r3, [r7, #4]
10047302:	681b      	ldr	r3, [r3, #0]
10047304:	699b      	ldr	r3, [r3, #24]
10047306:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10047308:	687b      	ldr	r3, [r7, #4]
1004730a:	681b      	ldr	r3, [r3, #0]
1004730c:	681b      	ldr	r3, [r3, #0]
1004730e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10047310:	687b      	ldr	r3, [r7, #4]
10047312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10047314:	2b00      	cmp	r3, #0
10047316:	d005      	beq.n	10047324 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
10047318:	687b      	ldr	r3, [r7, #4]
1004731a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1004731c:	68ba      	ldr	r2, [r7, #8]
1004731e:	68f9      	ldr	r1, [r7, #12]
10047320:	6878      	ldr	r0, [r7, #4]
10047322:	4798      	blx	r3
  }
}
10047324:	46c0      	nop			@ (mov r8, r8)
10047326:	46bd      	mov	sp, r7
10047328:	b004      	add	sp, #16
1004732a:	bd80      	pop	{r7, pc}

1004732c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
1004732c:	b580      	push	{r7, lr}
1004732e:	b086      	sub	sp, #24
10047330:	af00      	add	r7, sp, #0
10047332:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10047334:	687b      	ldr	r3, [r7, #4]
10047336:	681b      	ldr	r3, [r3, #0]
10047338:	699b      	ldr	r3, [r3, #24]
1004733a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
1004733c:	687b      	ldr	r3, [r7, #4]
1004733e:	681b      	ldr	r3, [r3, #0]
10047340:	681b      	ldr	r3, [r3, #0]
10047342:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10047344:	697b      	ldr	r3, [r7, #20]
10047346:	0a1b      	lsrs	r3, r3, #8
10047348:	001a      	movs	r2, r3
1004734a:	2301      	movs	r3, #1
1004734c:	4013      	ands	r3, r2
1004734e:	d010      	beq.n	10047372 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10047350:	693b      	ldr	r3, [r7, #16]
10047352:	09db      	lsrs	r3, r3, #7
10047354:	001a      	movs	r2, r3
10047356:	2301      	movs	r3, #1
10047358:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
1004735a:	d00a      	beq.n	10047372 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
1004735c:	687b      	ldr	r3, [r7, #4]
1004735e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10047360:	2201      	movs	r2, #1
10047362:	431a      	orrs	r2, r3
10047364:	687b      	ldr	r3, [r7, #4]
10047366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10047368:	687b      	ldr	r3, [r7, #4]
1004736a:	681b      	ldr	r3, [r3, #0]
1004736c:	2280      	movs	r2, #128	@ 0x80
1004736e:	0052      	lsls	r2, r2, #1
10047370:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10047372:	697b      	ldr	r3, [r7, #20]
10047374:	0a9b      	lsrs	r3, r3, #10
10047376:	001a      	movs	r2, r3
10047378:	2301      	movs	r3, #1
1004737a:	4013      	ands	r3, r2
1004737c:	d010      	beq.n	100473a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
1004737e:	693b      	ldr	r3, [r7, #16]
10047380:	09db      	lsrs	r3, r3, #7
10047382:	001a      	movs	r2, r3
10047384:	2301      	movs	r3, #1
10047386:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10047388:	d00a      	beq.n	100473a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
1004738a:	687b      	ldr	r3, [r7, #4]
1004738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004738e:	2208      	movs	r2, #8
10047390:	431a      	orrs	r2, r3
10047392:	687b      	ldr	r3, [r7, #4]
10047394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10047396:	687b      	ldr	r3, [r7, #4]
10047398:	681b      	ldr	r3, [r3, #0]
1004739a:	2280      	movs	r2, #128	@ 0x80
1004739c:	00d2      	lsls	r2, r2, #3
1004739e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
100473a0:	697b      	ldr	r3, [r7, #20]
100473a2:	0a5b      	lsrs	r3, r3, #9
100473a4:	001a      	movs	r2, r3
100473a6:	2301      	movs	r3, #1
100473a8:	4013      	ands	r3, r2
100473aa:	d010      	beq.n	100473ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
100473ac:	693b      	ldr	r3, [r7, #16]
100473ae:	09db      	lsrs	r3, r3, #7
100473b0:	001a      	movs	r2, r3
100473b2:	2301      	movs	r3, #1
100473b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
100473b6:	d00a      	beq.n	100473ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
100473b8:	687b      	ldr	r3, [r7, #4]
100473ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100473bc:	2202      	movs	r2, #2
100473be:	431a      	orrs	r2, r3
100473c0:	687b      	ldr	r3, [r7, #4]
100473c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
100473c4:	687b      	ldr	r3, [r7, #4]
100473c6:	681b      	ldr	r3, [r3, #0]
100473c8:	2280      	movs	r2, #128	@ 0x80
100473ca:	0092      	lsls	r2, r2, #2
100473cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
100473ce:	687b      	ldr	r3, [r7, #4]
100473d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100473d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
100473d4:	68fb      	ldr	r3, [r7, #12]
100473d6:	220b      	movs	r2, #11
100473d8:	4013      	ands	r3, r2
100473da:	d005      	beq.n	100473e8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
100473dc:	68fa      	ldr	r2, [r7, #12]
100473de:	687b      	ldr	r3, [r7, #4]
100473e0:	0011      	movs	r1, r2
100473e2:	0018      	movs	r0, r3
100473e4:	f001 f9de 	bl	100487a4 <I2C_ITError>
  }
}
100473e8:	46c0      	nop			@ (mov r8, r8)
100473ea:	46bd      	mov	sp, r7
100473ec:	b006      	add	sp, #24
100473ee:	bd80      	pop	{r7, pc}

100473f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100473f0:	b580      	push	{r7, lr}
100473f2:	b082      	sub	sp, #8
100473f4:	af00      	add	r7, sp, #0
100473f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
100473f8:	46c0      	nop			@ (mov r8, r8)
100473fa:	46bd      	mov	sp, r7
100473fc:	b002      	add	sp, #8
100473fe:	bd80      	pop	{r7, pc}

10047400 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10047400:	b580      	push	{r7, lr}
10047402:	b082      	sub	sp, #8
10047404:	af00      	add	r7, sp, #0
10047406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
10047408:	46c0      	nop			@ (mov r8, r8)
1004740a:	46bd      	mov	sp, r7
1004740c:	b002      	add	sp, #8
1004740e:	bd80      	pop	{r7, pc}

10047410 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10047410:	b580      	push	{r7, lr}
10047412:	b082      	sub	sp, #8
10047414:	af00      	add	r7, sp, #0
10047416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
10047418:	46c0      	nop			@ (mov r8, r8)
1004741a:	46bd      	mov	sp, r7
1004741c:	b002      	add	sp, #8
1004741e:	bd80      	pop	{r7, pc}

10047420 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10047420:	b580      	push	{r7, lr}
10047422:	b082      	sub	sp, #8
10047424:	af00      	add	r7, sp, #0
10047426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
10047428:	46c0      	nop			@ (mov r8, r8)
1004742a:	46bd      	mov	sp, r7
1004742c:	b002      	add	sp, #8
1004742e:	bd80      	pop	{r7, pc}

10047430 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10047430:	b580      	push	{r7, lr}
10047432:	b082      	sub	sp, #8
10047434:	af00      	add	r7, sp, #0
10047436:	6078      	str	r0, [r7, #4]
10047438:	0008      	movs	r0, r1
1004743a:	0011      	movs	r1, r2
1004743c:	1cfb      	adds	r3, r7, #3
1004743e:	1c02      	adds	r2, r0, #0
10047440:	701a      	strb	r2, [r3, #0]
10047442:	003b      	movs	r3, r7
10047444:	1c0a      	adds	r2, r1, #0
10047446:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
10047448:	46c0      	nop			@ (mov r8, r8)
1004744a:	46bd      	mov	sp, r7
1004744c:	b002      	add	sp, #8
1004744e:	bd80      	pop	{r7, pc}

10047450 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10047450:	b580      	push	{r7, lr}
10047452:	b082      	sub	sp, #8
10047454:	af00      	add	r7, sp, #0
10047456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10047458:	46c0      	nop			@ (mov r8, r8)
1004745a:	46bd      	mov	sp, r7
1004745c:	b002      	add	sp, #8
1004745e:	bd80      	pop	{r7, pc}

10047460 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10047460:	b580      	push	{r7, lr}
10047462:	b082      	sub	sp, #8
10047464:	af00      	add	r7, sp, #0
10047466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10047468:	46c0      	nop			@ (mov r8, r8)
1004746a:	46bd      	mov	sp, r7
1004746c:	b002      	add	sp, #8
1004746e:	bd80      	pop	{r7, pc}

10047470 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
10047470:	b590      	push	{r4, r7, lr}
10047472:	b089      	sub	sp, #36	@ 0x24
10047474:	af02      	add	r7, sp, #8
10047476:	60f8      	str	r0, [r7, #12]
10047478:	60b9      	str	r1, [r7, #8]
1004747a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
1004747c:	4b97      	ldr	r3, [pc, #604]	@ (100476dc <I2C_Mem_ISR_IT+0x26c>)
1004747e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10047480:	68bb      	ldr	r3, [r7, #8]
10047482:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10047484:	68fb      	ldr	r3, [r7, #12]
10047486:	2240      	movs	r2, #64	@ 0x40
10047488:	5c9b      	ldrb	r3, [r3, r2]
1004748a:	2b01      	cmp	r3, #1
1004748c:	d101      	bne.n	10047492 <I2C_Mem_ISR_IT+0x22>
1004748e:	2302      	movs	r3, #2
10047490:	e11f      	b.n	100476d2 <I2C_Mem_ISR_IT+0x262>
10047492:	68fb      	ldr	r3, [r7, #12]
10047494:	2240      	movs	r2, #64	@ 0x40
10047496:	2101      	movs	r1, #1
10047498:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004749a:	693b      	ldr	r3, [r7, #16]
1004749c:	091b      	lsrs	r3, r3, #4
1004749e:	001a      	movs	r2, r3
100474a0:	2301      	movs	r3, #1
100474a2:	4013      	ands	r3, r2
100474a4:	d014      	beq.n	100474d0 <I2C_Mem_ISR_IT+0x60>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100474a6:	687b      	ldr	r3, [r7, #4]
100474a8:	091b      	lsrs	r3, r3, #4
100474aa:	001a      	movs	r2, r3
100474ac:	2301      	movs	r3, #1
100474ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100474b0:	d00e      	beq.n	100474d0 <I2C_Mem_ISR_IT+0x60>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100474b2:	68fb      	ldr	r3, [r7, #12]
100474b4:	681b      	ldr	r3, [r3, #0]
100474b6:	2210      	movs	r2, #16
100474b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100474ba:	68fb      	ldr	r3, [r7, #12]
100474bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100474be:	2204      	movs	r2, #4
100474c0:	431a      	orrs	r2, r3
100474c2:	68fb      	ldr	r3, [r7, #12]
100474c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
100474c6:	68fb      	ldr	r3, [r7, #12]
100474c8:	0018      	movs	r0, r3
100474ca:	f001 fa96 	bl	100489fa <I2C_Flush_TXDR>
100474ce:	e0e9      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100474d0:	693b      	ldr	r3, [r7, #16]
100474d2:	089b      	lsrs	r3, r3, #2
100474d4:	001a      	movs	r2, r3
100474d6:	2301      	movs	r3, #1
100474d8:	4013      	ands	r3, r2
100474da:	d023      	beq.n	10047524 <I2C_Mem_ISR_IT+0xb4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100474dc:	687b      	ldr	r3, [r7, #4]
100474de:	089b      	lsrs	r3, r3, #2
100474e0:	001a      	movs	r2, r3
100474e2:	2301      	movs	r3, #1
100474e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100474e6:	d01d      	beq.n	10047524 <I2C_Mem_ISR_IT+0xb4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
100474e8:	693b      	ldr	r3, [r7, #16]
100474ea:	2204      	movs	r2, #4
100474ec:	4393      	bics	r3, r2
100474ee:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100474f0:	68fb      	ldr	r3, [r7, #12]
100474f2:	681b      	ldr	r3, [r3, #0]
100474f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100474f6:	68fb      	ldr	r3, [r7, #12]
100474f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100474fa:	b2d2      	uxtb	r2, r2
100474fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100474fe:	68fb      	ldr	r3, [r7, #12]
10047500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10047502:	1c5a      	adds	r2, r3, #1
10047504:	68fb      	ldr	r3, [r7, #12]
10047506:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
10047508:	68fb      	ldr	r3, [r7, #12]
1004750a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004750c:	3b01      	subs	r3, #1
1004750e:	b29a      	uxth	r2, r3
10047510:	68fb      	ldr	r3, [r7, #12]
10047512:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
10047514:	68fb      	ldr	r3, [r7, #12]
10047516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047518:	b29b      	uxth	r3, r3
1004751a:	3b01      	subs	r3, #1
1004751c:	b29a      	uxth	r2, r3
1004751e:	68fb      	ldr	r3, [r7, #12]
10047520:	855a      	strh	r2, [r3, #42]	@ 0x2a
10047522:	e0bf      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10047524:	693b      	ldr	r3, [r7, #16]
10047526:	085b      	lsrs	r3, r3, #1
10047528:	001a      	movs	r2, r3
1004752a:	2301      	movs	r3, #1
1004752c:	4013      	ands	r3, r2
1004752e:	d02c      	beq.n	1004758a <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10047530:	687b      	ldr	r3, [r7, #4]
10047532:	085b      	lsrs	r3, r3, #1
10047534:	001a      	movs	r2, r3
10047536:	2301      	movs	r3, #1
10047538:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
1004753a:	d026      	beq.n	1004758a <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
1004753c:	68fb      	ldr	r3, [r7, #12]
1004753e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10047540:	3301      	adds	r3, #1
10047542:	d118      	bne.n	10047576 <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10047544:	68fb      	ldr	r3, [r7, #12]
10047546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10047548:	781a      	ldrb	r2, [r3, #0]
1004754a:	68fb      	ldr	r3, [r7, #12]
1004754c:	681b      	ldr	r3, [r3, #0]
1004754e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10047550:	68fb      	ldr	r3, [r7, #12]
10047552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10047554:	1c5a      	adds	r2, r3, #1
10047556:	68fb      	ldr	r3, [r7, #12]
10047558:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
1004755a:	68fb      	ldr	r3, [r7, #12]
1004755c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004755e:	3b01      	subs	r3, #1
10047560:	b29a      	uxth	r2, r3
10047562:	68fb      	ldr	r3, [r7, #12]
10047564:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10047566:	68fb      	ldr	r3, [r7, #12]
10047568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004756a:	b29b      	uxth	r3, r3
1004756c:	3b01      	subs	r3, #1
1004756e:	b29a      	uxth	r2, r3
10047570:	68fb      	ldr	r3, [r7, #12]
10047572:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10047574:	e096      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
10047576:	68fb      	ldr	r3, [r7, #12]
10047578:	681b      	ldr	r3, [r3, #0]
1004757a:	68fa      	ldr	r2, [r7, #12]
1004757c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004757e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10047580:	68fb      	ldr	r3, [r7, #12]
10047582:	2201      	movs	r2, #1
10047584:	4252      	negs	r2, r2
10047586:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10047588:	e08c      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
1004758a:	693b      	ldr	r3, [r7, #16]
1004758c:	09db      	lsrs	r3, r3, #7
1004758e:	001a      	movs	r2, r3
10047590:	2301      	movs	r3, #1
10047592:	4013      	ands	r3, r2
10047594:	d03e      	beq.n	10047614 <I2C_Mem_ISR_IT+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10047596:	687b      	ldr	r3, [r7, #4]
10047598:	099b      	lsrs	r3, r3, #6
1004759a:	001a      	movs	r2, r3
1004759c:	2301      	movs	r3, #1
1004759e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
100475a0:	d038      	beq.n	10047614 <I2C_Mem_ISR_IT+0x1a4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100475a2:	68fb      	ldr	r3, [r7, #12]
100475a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100475a6:	b29b      	uxth	r3, r3
100475a8:	2b00      	cmp	r3, #0
100475aa:	d02c      	beq.n	10047606 <I2C_Mem_ISR_IT+0x196>
100475ac:	68fb      	ldr	r3, [r7, #12]
100475ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100475b0:	2b00      	cmp	r3, #0
100475b2:	d128      	bne.n	10047606 <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100475b4:	68fb      	ldr	r3, [r7, #12]
100475b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100475b8:	b29b      	uxth	r3, r3
100475ba:	2bff      	cmp	r3, #255	@ 0xff
100475bc:	d910      	bls.n	100475e0 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100475be:	68fb      	ldr	r3, [r7, #12]
100475c0:	22ff      	movs	r2, #255	@ 0xff
100475c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100475c4:	68fb      	ldr	r3, [r7, #12]
100475c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100475c8:	b299      	uxth	r1, r3
100475ca:	68fb      	ldr	r3, [r7, #12]
100475cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100475ce:	b2da      	uxtb	r2, r3
100475d0:	2380      	movs	r3, #128	@ 0x80
100475d2:	045b      	lsls	r3, r3, #17
100475d4:	68f8      	ldr	r0, [r7, #12]
100475d6:	2400      	movs	r4, #0
100475d8:	9400      	str	r4, [sp, #0]
100475da:	f001 fa4f 	bl	10048a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100475de:	e018      	b.n	10047612 <I2C_Mem_ISR_IT+0x1a2>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100475e0:	68fb      	ldr	r3, [r7, #12]
100475e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100475e4:	b29a      	uxth	r2, r3
100475e6:	68fb      	ldr	r3, [r7, #12]
100475e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100475ea:	68fb      	ldr	r3, [r7, #12]
100475ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100475ee:	b299      	uxth	r1, r3
100475f0:	68fb      	ldr	r3, [r7, #12]
100475f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100475f4:	b2da      	uxtb	r2, r3
100475f6:	2380      	movs	r3, #128	@ 0x80
100475f8:	049b      	lsls	r3, r3, #18
100475fa:	68f8      	ldr	r0, [r7, #12]
100475fc:	2400      	movs	r4, #0
100475fe:	9400      	str	r4, [sp, #0]
10047600:	f001 fa3c 	bl	10048a7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10047604:	e005      	b.n	10047612 <I2C_Mem_ISR_IT+0x1a2>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10047606:	68fb      	ldr	r3, [r7, #12]
10047608:	2140      	movs	r1, #64	@ 0x40
1004760a:	0018      	movs	r0, r3
1004760c:	f001 f8ca 	bl	100487a4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10047610:	e048      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
10047612:	e047      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10047614:	693b      	ldr	r3, [r7, #16]
10047616:	099b      	lsrs	r3, r3, #6
10047618:	001a      	movs	r2, r3
1004761a:	2301      	movs	r3, #1
1004761c:	4013      	ands	r3, r2
1004761e:	d041      	beq.n	100476a4 <I2C_Mem_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10047620:	687b      	ldr	r3, [r7, #4]
10047622:	099b      	lsrs	r3, r3, #6
10047624:	001a      	movs	r2, r3
10047626:	2301      	movs	r3, #1
10047628:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
1004762a:	d03b      	beq.n	100476a4 <I2C_Mem_ISR_IT+0x234>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004762c:	68fb      	ldr	r3, [r7, #12]
1004762e:	2101      	movs	r1, #1
10047630:	0018      	movs	r0, r3
10047632:	f001 fae7 	bl	10048c04 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
10047636:	68fb      	ldr	r3, [r7, #12]
10047638:	2102      	movs	r1, #2
1004763a:	0018      	movs	r0, r3
1004763c:	f001 fa58 	bl	10048af0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047640:	68fb      	ldr	r3, [r7, #12]
10047642:	2241      	movs	r2, #65	@ 0x41
10047644:	5c9b      	ldrb	r3, [r3, r2]
10047646:	b2db      	uxtb	r3, r3
10047648:	2b22      	cmp	r3, #34	@ 0x22
1004764a:	d101      	bne.n	10047650 <I2C_Mem_ISR_IT+0x1e0>
    {
      direction = I2C_GENERATE_START_READ;
1004764c:	4b24      	ldr	r3, [pc, #144]	@ (100476e0 <I2C_Mem_ISR_IT+0x270>)
1004764e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10047650:	68fb      	ldr	r3, [r7, #12]
10047652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047654:	b29b      	uxth	r3, r3
10047656:	2bff      	cmp	r3, #255	@ 0xff
10047658:	d911      	bls.n	1004767e <I2C_Mem_ISR_IT+0x20e>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
1004765a:	68fb      	ldr	r3, [r7, #12]
1004765c:	22ff      	movs	r2, #255	@ 0xff
1004765e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10047660:	68fb      	ldr	r3, [r7, #12]
10047662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10047664:	b299      	uxth	r1, r3
10047666:	68fb      	ldr	r3, [r7, #12]
10047668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004766a:	b2da      	uxtb	r2, r3
1004766c:	2380      	movs	r3, #128	@ 0x80
1004766e:	045c      	lsls	r4, r3, #17
10047670:	68f8      	ldr	r0, [r7, #12]
10047672:	697b      	ldr	r3, [r7, #20]
10047674:	9300      	str	r3, [sp, #0]
10047676:	0023      	movs	r3, r4
10047678:	f001 fa00 	bl	10048a7c <I2C_TransferConfig>
1004767c:	e012      	b.n	100476a4 <I2C_Mem_ISR_IT+0x234>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
1004767e:	68fb      	ldr	r3, [r7, #12]
10047680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047682:	b29a      	uxth	r2, r3
10047684:	68fb      	ldr	r3, [r7, #12]
10047686:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10047688:	68fb      	ldr	r3, [r7, #12]
1004768a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004768c:	b299      	uxth	r1, r3
1004768e:	68fb      	ldr	r3, [r7, #12]
10047690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047692:	b2da      	uxtb	r2, r3
10047694:	2380      	movs	r3, #128	@ 0x80
10047696:	049c      	lsls	r4, r3, #18
10047698:	68f8      	ldr	r0, [r7, #12]
1004769a:	697b      	ldr	r3, [r7, #20]
1004769c:	9300      	str	r3, [sp, #0]
1004769e:	0023      	movs	r3, r4
100476a0:	f001 f9ec 	bl	10048a7c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100476a4:	693b      	ldr	r3, [r7, #16]
100476a6:	095b      	lsrs	r3, r3, #5
100476a8:	001a      	movs	r2, r3
100476aa:	2301      	movs	r3, #1
100476ac:	4013      	ands	r3, r2
100476ae:	d00b      	beq.n	100476c8 <I2C_Mem_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100476b0:	687b      	ldr	r3, [r7, #4]
100476b2:	095b      	lsrs	r3, r3, #5
100476b4:	001a      	movs	r2, r3
100476b6:	2301      	movs	r3, #1
100476b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100476ba:	d005      	beq.n	100476c8 <I2C_Mem_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
100476bc:	693a      	ldr	r2, [r7, #16]
100476be:	68fb      	ldr	r3, [r7, #12]
100476c0:	0011      	movs	r1, r2
100476c2:	0018      	movs	r0, r3
100476c4:	f000 fdb2 	bl	1004822c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100476c8:	68fb      	ldr	r3, [r7, #12]
100476ca:	2240      	movs	r2, #64	@ 0x40
100476cc:	2100      	movs	r1, #0
100476ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100476d0:	2300      	movs	r3, #0
}
100476d2:	0018      	movs	r0, r3
100476d4:	46bd      	mov	sp, r7
100476d6:	b007      	add	sp, #28
100476d8:	bd90      	pop	{r4, r7, pc}
100476da:	46c0      	nop			@ (mov r8, r8)
100476dc:	80002000 	.word	0x80002000
100476e0:	80002400 	.word	0x80002400

100476e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
100476e4:	b580      	push	{r7, lr}
100476e6:	b086      	sub	sp, #24
100476e8:	af00      	add	r7, sp, #0
100476ea:	60f8      	str	r0, [r7, #12]
100476ec:	60b9      	str	r1, [r7, #8]
100476ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100476f0:	68fb      	ldr	r3, [r7, #12]
100476f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100476f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
100476f6:	68bb      	ldr	r3, [r7, #8]
100476f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
100476fa:	68fb      	ldr	r3, [r7, #12]
100476fc:	2240      	movs	r2, #64	@ 0x40
100476fe:	5c9b      	ldrb	r3, [r3, r2]
10047700:	2b01      	cmp	r3, #1
10047702:	d101      	bne.n	10047708 <I2C_Slave_ISR_IT+0x24>
10047704:	2302      	movs	r3, #2
10047706:	e0fb      	b.n	10047900 <I2C_Slave_ISR_IT+0x21c>
10047708:	68fb      	ldr	r3, [r7, #12]
1004770a:	2240      	movs	r2, #64	@ 0x40
1004770c:	2101      	movs	r1, #1
1004770e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10047710:	693b      	ldr	r3, [r7, #16]
10047712:	095b      	lsrs	r3, r3, #5
10047714:	001a      	movs	r2, r3
10047716:	2301      	movs	r3, #1
10047718:	4013      	ands	r3, r2
1004771a:	d00c      	beq.n	10047736 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
1004771c:	687b      	ldr	r3, [r7, #4]
1004771e:	095b      	lsrs	r3, r3, #5
10047720:	001a      	movs	r2, r3
10047722:	2301      	movs	r3, #1
10047724:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10047726:	d006      	beq.n	10047736 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10047728:	693a      	ldr	r2, [r7, #16]
1004772a:	68fb      	ldr	r3, [r7, #12]
1004772c:	0011      	movs	r1, r2
1004772e:	0018      	movs	r0, r3
10047730:	f000 fe4e 	bl	100483d0 <I2C_ITSlaveCplt>
10047734:	e0df      	b.n	100478f6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10047736:	693b      	ldr	r3, [r7, #16]
10047738:	091b      	lsrs	r3, r3, #4
1004773a:	001a      	movs	r2, r3
1004773c:	2301      	movs	r3, #1
1004773e:	4013      	ands	r3, r2
10047740:	d054      	beq.n	100477ec <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10047742:	687b      	ldr	r3, [r7, #4]
10047744:	091b      	lsrs	r3, r3, #4
10047746:	001a      	movs	r2, r3
10047748:	2301      	movs	r3, #1
1004774a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004774c:	d04e      	beq.n	100477ec <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
1004774e:	68fb      	ldr	r3, [r7, #12]
10047750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047752:	b29b      	uxth	r3, r3
10047754:	2b00      	cmp	r3, #0
10047756:	d12d      	bne.n	100477b4 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10047758:	68fb      	ldr	r3, [r7, #12]
1004775a:	2241      	movs	r2, #65	@ 0x41
1004775c:	5c9b      	ldrb	r3, [r3, r2]
1004775e:	b2db      	uxtb	r3, r3
10047760:	2b28      	cmp	r3, #40	@ 0x28
10047762:	d10b      	bne.n	1004777c <I2C_Slave_ISR_IT+0x98>
10047764:	697a      	ldr	r2, [r7, #20]
10047766:	2380      	movs	r3, #128	@ 0x80
10047768:	049b      	lsls	r3, r3, #18
1004776a:	429a      	cmp	r2, r3
1004776c:	d106      	bne.n	1004777c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
1004776e:	693a      	ldr	r2, [r7, #16]
10047770:	68fb      	ldr	r3, [r7, #12]
10047772:	0011      	movs	r1, r2
10047774:	0018      	movs	r0, r3
10047776:	f000 ffbb 	bl	100486f0 <I2C_ITListenCplt>
1004777a:	e036      	b.n	100477ea <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
1004777c:	68fb      	ldr	r3, [r7, #12]
1004777e:	2241      	movs	r2, #65	@ 0x41
10047780:	5c9b      	ldrb	r3, [r3, r2]
10047782:	b2db      	uxtb	r3, r3
10047784:	2b29      	cmp	r3, #41	@ 0x29
10047786:	d110      	bne.n	100477aa <I2C_Slave_ISR_IT+0xc6>
10047788:	697b      	ldr	r3, [r7, #20]
1004778a:	4a5f      	ldr	r2, [pc, #380]	@ (10047908 <I2C_Slave_ISR_IT+0x224>)
1004778c:	4293      	cmp	r3, r2
1004778e:	d00c      	beq.n	100477aa <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047790:	68fb      	ldr	r3, [r7, #12]
10047792:	681b      	ldr	r3, [r3, #0]
10047794:	2210      	movs	r2, #16
10047796:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10047798:	68fb      	ldr	r3, [r7, #12]
1004779a:	0018      	movs	r0, r3
1004779c:	f001 f92d 	bl	100489fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
100477a0:	68fb      	ldr	r3, [r7, #12]
100477a2:	0018      	movs	r0, r3
100477a4:	f000 fcdc 	bl	10048160 <I2C_ITSlaveSeqCplt>
100477a8:	e01f      	b.n	100477ea <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100477aa:	68fb      	ldr	r3, [r7, #12]
100477ac:	681b      	ldr	r3, [r3, #0]
100477ae:	2210      	movs	r2, #16
100477b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
100477b2:	e09d      	b.n	100478f0 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100477b4:	68fb      	ldr	r3, [r7, #12]
100477b6:	681b      	ldr	r3, [r3, #0]
100477b8:	2210      	movs	r2, #16
100477ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100477bc:	68fb      	ldr	r3, [r7, #12]
100477be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100477c0:	2204      	movs	r2, #4
100477c2:	431a      	orrs	r2, r3
100477c4:	68fb      	ldr	r3, [r7, #12]
100477c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100477c8:	697b      	ldr	r3, [r7, #20]
100477ca:	2b00      	cmp	r3, #0
100477cc:	d005      	beq.n	100477da <I2C_Slave_ISR_IT+0xf6>
100477ce:	697a      	ldr	r2, [r7, #20]
100477d0:	2380      	movs	r3, #128	@ 0x80
100477d2:	045b      	lsls	r3, r3, #17
100477d4:	429a      	cmp	r2, r3
100477d6:	d000      	beq.n	100477da <I2C_Slave_ISR_IT+0xf6>
100477d8:	e08a      	b.n	100478f0 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
100477da:	68fb      	ldr	r3, [r7, #12]
100477dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100477de:	68fb      	ldr	r3, [r7, #12]
100477e0:	0011      	movs	r1, r2
100477e2:	0018      	movs	r0, r3
100477e4:	f000 ffde 	bl	100487a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
100477e8:	e082      	b.n	100478f0 <I2C_Slave_ISR_IT+0x20c>
100477ea:	e081      	b.n	100478f0 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100477ec:	693b      	ldr	r3, [r7, #16]
100477ee:	089b      	lsrs	r3, r3, #2
100477f0:	001a      	movs	r2, r3
100477f2:	2301      	movs	r3, #1
100477f4:	4013      	ands	r3, r2
100477f6:	d031      	beq.n	1004785c <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100477f8:	687b      	ldr	r3, [r7, #4]
100477fa:	089b      	lsrs	r3, r3, #2
100477fc:	001a      	movs	r2, r3
100477fe:	2301      	movs	r3, #1
10047800:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10047802:	d02b      	beq.n	1004785c <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
10047804:	68fb      	ldr	r3, [r7, #12]
10047806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047808:	b29b      	uxth	r3, r3
1004780a:	2b00      	cmp	r3, #0
1004780c:	d018      	beq.n	10047840 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004780e:	68fb      	ldr	r3, [r7, #12]
10047810:	681b      	ldr	r3, [r3, #0]
10047812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10047814:	68fb      	ldr	r3, [r7, #12]
10047816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10047818:	b2d2      	uxtb	r2, r2
1004781a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
1004781c:	68fb      	ldr	r3, [r7, #12]
1004781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10047820:	1c5a      	adds	r2, r3, #1
10047822:	68fb      	ldr	r3, [r7, #12]
10047824:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10047826:	68fb      	ldr	r3, [r7, #12]
10047828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004782a:	3b01      	subs	r3, #1
1004782c:	b29a      	uxth	r2, r3
1004782e:	68fb      	ldr	r3, [r7, #12]
10047830:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10047832:	68fb      	ldr	r3, [r7, #12]
10047834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047836:	b29b      	uxth	r3, r3
10047838:	3b01      	subs	r3, #1
1004783a:	b29a      	uxth	r2, r3
1004783c:	68fb      	ldr	r3, [r7, #12]
1004783e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10047840:	68fb      	ldr	r3, [r7, #12]
10047842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047844:	b29b      	uxth	r3, r3
10047846:	2b00      	cmp	r3, #0
10047848:	d154      	bne.n	100478f4 <I2C_Slave_ISR_IT+0x210>
1004784a:	697b      	ldr	r3, [r7, #20]
1004784c:	4a2e      	ldr	r2, [pc, #184]	@ (10047908 <I2C_Slave_ISR_IT+0x224>)
1004784e:	4293      	cmp	r3, r2
10047850:	d050      	beq.n	100478f4 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10047852:	68fb      	ldr	r3, [r7, #12]
10047854:	0018      	movs	r0, r3
10047856:	f000 fc83 	bl	10048160 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
1004785a:	e04b      	b.n	100478f4 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
1004785c:	693b      	ldr	r3, [r7, #16]
1004785e:	08db      	lsrs	r3, r3, #3
10047860:	001a      	movs	r2, r3
10047862:	2301      	movs	r3, #1
10047864:	4013      	ands	r3, r2
10047866:	d00c      	beq.n	10047882 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10047868:	687b      	ldr	r3, [r7, #4]
1004786a:	08db      	lsrs	r3, r3, #3
1004786c:	001a      	movs	r2, r3
1004786e:	2301      	movs	r3, #1
10047870:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10047872:	d006      	beq.n	10047882 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10047874:	693a      	ldr	r2, [r7, #16]
10047876:	68fb      	ldr	r3, [r7, #12]
10047878:	0011      	movs	r1, r2
1004787a:	0018      	movs	r0, r3
1004787c:	f000 fb8a 	bl	10047f94 <I2C_ITAddrCplt>
10047880:	e039      	b.n	100478f6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10047882:	693b      	ldr	r3, [r7, #16]
10047884:	085b      	lsrs	r3, r3, #1
10047886:	001a      	movs	r2, r3
10047888:	2301      	movs	r3, #1
1004788a:	4013      	ands	r3, r2
1004788c:	d033      	beq.n	100478f6 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
1004788e:	687b      	ldr	r3, [r7, #4]
10047890:	085b      	lsrs	r3, r3, #1
10047892:	001a      	movs	r2, r3
10047894:	2301      	movs	r3, #1
10047896:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10047898:	d02d      	beq.n	100478f6 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
1004789a:	68fb      	ldr	r3, [r7, #12]
1004789c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004789e:	b29b      	uxth	r3, r3
100478a0:	2b00      	cmp	r3, #0
100478a2:	d018      	beq.n	100478d6 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
100478a4:	68fb      	ldr	r3, [r7, #12]
100478a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100478a8:	781a      	ldrb	r2, [r3, #0]
100478aa:	68fb      	ldr	r3, [r7, #12]
100478ac:	681b      	ldr	r3, [r3, #0]
100478ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100478b0:	68fb      	ldr	r3, [r7, #12]
100478b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100478b4:	1c5a      	adds	r2, r3, #1
100478b6:	68fb      	ldr	r3, [r7, #12]
100478b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
100478ba:	68fb      	ldr	r3, [r7, #12]
100478bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100478be:	b29b      	uxth	r3, r3
100478c0:	3b01      	subs	r3, #1
100478c2:	b29a      	uxth	r2, r3
100478c4:	68fb      	ldr	r3, [r7, #12]
100478c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
100478c8:	68fb      	ldr	r3, [r7, #12]
100478ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100478cc:	3b01      	subs	r3, #1
100478ce:	b29a      	uxth	r2, r3
100478d0:	68fb      	ldr	r3, [r7, #12]
100478d2:	851a      	strh	r2, [r3, #40]	@ 0x28
100478d4:	e00f      	b.n	100478f6 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
100478d6:	697a      	ldr	r2, [r7, #20]
100478d8:	2380      	movs	r3, #128	@ 0x80
100478da:	045b      	lsls	r3, r3, #17
100478dc:	429a      	cmp	r2, r3
100478de:	d002      	beq.n	100478e6 <I2C_Slave_ISR_IT+0x202>
100478e0:	697b      	ldr	r3, [r7, #20]
100478e2:	2b00      	cmp	r3, #0
100478e4:	d107      	bne.n	100478f6 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
100478e6:	68fb      	ldr	r3, [r7, #12]
100478e8:	0018      	movs	r0, r3
100478ea:	f000 fc39 	bl	10048160 <I2C_ITSlaveSeqCplt>
100478ee:	e002      	b.n	100478f6 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
100478f0:	46c0      	nop			@ (mov r8, r8)
100478f2:	e000      	b.n	100478f6 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
100478f4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100478f6:	68fb      	ldr	r3, [r7, #12]
100478f8:	2240      	movs	r2, #64	@ 0x40
100478fa:	2100      	movs	r1, #0
100478fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100478fe:	2300      	movs	r3, #0
}
10047900:	0018      	movs	r0, r3
10047902:	46bd      	mov	sp, r7
10047904:	b006      	add	sp, #24
10047906:	bd80      	pop	{r7, pc}
10047908:	ffff0000 	.word	0xffff0000

1004790c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
1004790c:	b590      	push	{r4, r7, lr}
1004790e:	b089      	sub	sp, #36	@ 0x24
10047910:	af02      	add	r7, sp, #8
10047912:	60f8      	str	r0, [r7, #12]
10047914:	60b9      	str	r1, [r7, #8]
10047916:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
10047918:	68fb      	ldr	r3, [r7, #12]
1004791a:	2240      	movs	r2, #64	@ 0x40
1004791c:	5c9b      	ldrb	r3, [r3, r2]
1004791e:	2b01      	cmp	r3, #1
10047920:	d101      	bne.n	10047926 <I2C_Master_ISR_DMA+0x1a>
10047922:	2302      	movs	r3, #2
10047924:	e0f7      	b.n	10047b16 <I2C_Master_ISR_DMA+0x20a>
10047926:	68fb      	ldr	r3, [r7, #12]
10047928:	2240      	movs	r2, #64	@ 0x40
1004792a:	2101      	movs	r1, #1
1004792c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
1004792e:	68bb      	ldr	r3, [r7, #8]
10047930:	091b      	lsrs	r3, r3, #4
10047932:	001a      	movs	r2, r3
10047934:	2301      	movs	r3, #1
10047936:	4013      	ands	r3, r2
10047938:	d019      	beq.n	1004796e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1004793a:	687b      	ldr	r3, [r7, #4]
1004793c:	091b      	lsrs	r3, r3, #4
1004793e:	001a      	movs	r2, r3
10047940:	2301      	movs	r3, #1
10047942:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10047944:	d013      	beq.n	1004796e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047946:	68fb      	ldr	r3, [r7, #12]
10047948:	681b      	ldr	r3, [r3, #0]
1004794a:	2210      	movs	r2, #16
1004794c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004794e:	68fb      	ldr	r3, [r7, #12]
10047950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10047952:	2204      	movs	r2, #4
10047954:	431a      	orrs	r2, r3
10047956:	68fb      	ldr	r3, [r7, #12]
10047958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
1004795a:	68fb      	ldr	r3, [r7, #12]
1004795c:	2120      	movs	r1, #32
1004795e:	0018      	movs	r0, r3
10047960:	f001 f8c6 	bl	10048af0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10047964:	68fb      	ldr	r3, [r7, #12]
10047966:	0018      	movs	r0, r3
10047968:	f001 f847 	bl	100489fa <I2C_Flush_TXDR>
1004796c:	e0ce      	b.n	10047b0c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
1004796e:	68bb      	ldr	r3, [r7, #8]
10047970:	09db      	lsrs	r3, r3, #7
10047972:	001a      	movs	r2, r3
10047974:	2301      	movs	r3, #1
10047976:	4013      	ands	r3, r2
10047978:	d100      	bne.n	1004797c <I2C_Master_ISR_DMA+0x70>
1004797a:	e07e      	b.n	10047a7a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004797c:	687b      	ldr	r3, [r7, #4]
1004797e:	099b      	lsrs	r3, r3, #6
10047980:	001a      	movs	r2, r3
10047982:	2301      	movs	r3, #1
10047984:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10047986:	d100      	bne.n	1004798a <I2C_Master_ISR_DMA+0x7e>
10047988:	e077      	b.n	10047a7a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
1004798a:	68fb      	ldr	r3, [r7, #12]
1004798c:	681b      	ldr	r3, [r3, #0]
1004798e:	681a      	ldr	r2, [r3, #0]
10047990:	68fb      	ldr	r3, [r7, #12]
10047992:	681b      	ldr	r3, [r3, #0]
10047994:	2140      	movs	r1, #64	@ 0x40
10047996:	438a      	bics	r2, r1
10047998:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
1004799a:	68fb      	ldr	r3, [r7, #12]
1004799c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004799e:	b29b      	uxth	r3, r3
100479a0:	2b00      	cmp	r3, #0
100479a2:	d055      	beq.n	10047a50 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
100479a4:	68fb      	ldr	r3, [r7, #12]
100479a6:	681b      	ldr	r3, [r3, #0]
100479a8:	685b      	ldr	r3, [r3, #4]
100479aa:	b29a      	uxth	r2, r3
100479ac:	2312      	movs	r3, #18
100479ae:	18fb      	adds	r3, r7, r3
100479b0:	0592      	lsls	r2, r2, #22
100479b2:	0d92      	lsrs	r2, r2, #22
100479b4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100479b6:	68fb      	ldr	r3, [r7, #12]
100479b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100479ba:	b29b      	uxth	r3, r3
100479bc:	2bff      	cmp	r3, #255	@ 0xff
100479be:	d906      	bls.n	100479ce <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100479c0:	68fb      	ldr	r3, [r7, #12]
100479c2:	22ff      	movs	r2, #255	@ 0xff
100479c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
100479c6:	2380      	movs	r3, #128	@ 0x80
100479c8:	045b      	lsls	r3, r3, #17
100479ca:	617b      	str	r3, [r7, #20]
100479cc:	e010      	b.n	100479f0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100479ce:	68fb      	ldr	r3, [r7, #12]
100479d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100479d2:	b29a      	uxth	r2, r3
100479d4:	68fb      	ldr	r3, [r7, #12]
100479d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
100479d8:	68fb      	ldr	r3, [r7, #12]
100479da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100479dc:	4a50      	ldr	r2, [pc, #320]	@ (10047b20 <I2C_Master_ISR_DMA+0x214>)
100479de:	4293      	cmp	r3, r2
100479e0:	d003      	beq.n	100479ea <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
100479e2:	68fb      	ldr	r3, [r7, #12]
100479e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100479e6:	617b      	str	r3, [r7, #20]
100479e8:	e002      	b.n	100479f0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
100479ea:	2380      	movs	r3, #128	@ 0x80
100479ec:	049b      	lsls	r3, r3, #18
100479ee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
100479f0:	68fb      	ldr	r3, [r7, #12]
100479f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100479f4:	b2da      	uxtb	r2, r3
100479f6:	697c      	ldr	r4, [r7, #20]
100479f8:	2312      	movs	r3, #18
100479fa:	18fb      	adds	r3, r7, r3
100479fc:	8819      	ldrh	r1, [r3, #0]
100479fe:	68f8      	ldr	r0, [r7, #12]
10047a00:	2300      	movs	r3, #0
10047a02:	9300      	str	r3, [sp, #0]
10047a04:	0023      	movs	r3, r4
10047a06:	f001 f839 	bl	10048a7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10047a0a:	68fb      	ldr	r3, [r7, #12]
10047a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047a0e:	b29a      	uxth	r2, r3
10047a10:	68fb      	ldr	r3, [r7, #12]
10047a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047a14:	1ad3      	subs	r3, r2, r3
10047a16:	b29a      	uxth	r2, r3
10047a18:	68fb      	ldr	r3, [r7, #12]
10047a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047a1c:	68fb      	ldr	r3, [r7, #12]
10047a1e:	2241      	movs	r2, #65	@ 0x41
10047a20:	5c9b      	ldrb	r3, [r3, r2]
10047a22:	b2db      	uxtb	r3, r3
10047a24:	2b22      	cmp	r3, #34	@ 0x22
10047a26:	d109      	bne.n	10047a3c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10047a28:	68fb      	ldr	r3, [r7, #12]
10047a2a:	681b      	ldr	r3, [r3, #0]
10047a2c:	681a      	ldr	r2, [r3, #0]
10047a2e:	68fb      	ldr	r3, [r7, #12]
10047a30:	681b      	ldr	r3, [r3, #0]
10047a32:	2180      	movs	r1, #128	@ 0x80
10047a34:	0209      	lsls	r1, r1, #8
10047a36:	430a      	orrs	r2, r1
10047a38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10047a3a:	e067      	b.n	10047b0c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10047a3c:	68fb      	ldr	r3, [r7, #12]
10047a3e:	681b      	ldr	r3, [r3, #0]
10047a40:	681a      	ldr	r2, [r3, #0]
10047a42:	68fb      	ldr	r3, [r7, #12]
10047a44:	681b      	ldr	r3, [r3, #0]
10047a46:	2180      	movs	r1, #128	@ 0x80
10047a48:	01c9      	lsls	r1, r1, #7
10047a4a:	430a      	orrs	r2, r1
10047a4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10047a4e:	e05d      	b.n	10047b0c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10047a50:	68fb      	ldr	r3, [r7, #12]
10047a52:	681b      	ldr	r3, [r3, #0]
10047a54:	685a      	ldr	r2, [r3, #4]
10047a56:	2380      	movs	r3, #128	@ 0x80
10047a58:	049b      	lsls	r3, r3, #18
10047a5a:	401a      	ands	r2, r3
10047a5c:	2380      	movs	r3, #128	@ 0x80
10047a5e:	049b      	lsls	r3, r3, #18
10047a60:	429a      	cmp	r2, r3
10047a62:	d004      	beq.n	10047a6e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10047a64:	68fb      	ldr	r3, [r7, #12]
10047a66:	0018      	movs	r0, r3
10047a68:	f000 fb38 	bl	100480dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
10047a6c:	e04e      	b.n	10047b0c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10047a6e:	68fb      	ldr	r3, [r7, #12]
10047a70:	2140      	movs	r1, #64	@ 0x40
10047a72:	0018      	movs	r0, r3
10047a74:	f000 fe96 	bl	100487a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10047a78:	e048      	b.n	10047b0c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10047a7a:	68bb      	ldr	r3, [r7, #8]
10047a7c:	099b      	lsrs	r3, r3, #6
10047a7e:	001a      	movs	r2, r3
10047a80:	2301      	movs	r3, #1
10047a82:	4013      	ands	r3, r2
10047a84:	d02e      	beq.n	10047ae4 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10047a86:	687b      	ldr	r3, [r7, #4]
10047a88:	099b      	lsrs	r3, r3, #6
10047a8a:	001a      	movs	r2, r3
10047a8c:	2301      	movs	r3, #1
10047a8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10047a90:	d028      	beq.n	10047ae4 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
10047a92:	68fb      	ldr	r3, [r7, #12]
10047a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047a96:	b29b      	uxth	r3, r3
10047a98:	2b00      	cmp	r3, #0
10047a9a:	d11d      	bne.n	10047ad8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10047a9c:	68fb      	ldr	r3, [r7, #12]
10047a9e:	681b      	ldr	r3, [r3, #0]
10047aa0:	685a      	ldr	r2, [r3, #4]
10047aa2:	2380      	movs	r3, #128	@ 0x80
10047aa4:	049b      	lsls	r3, r3, #18
10047aa6:	401a      	ands	r2, r3
10047aa8:	2380      	movs	r3, #128	@ 0x80
10047aaa:	049b      	lsls	r3, r3, #18
10047aac:	429a      	cmp	r2, r3
10047aae:	d02c      	beq.n	10047b0a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
10047ab0:	68fb      	ldr	r3, [r7, #12]
10047ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10047ab4:	4a1a      	ldr	r2, [pc, #104]	@ (10047b20 <I2C_Master_ISR_DMA+0x214>)
10047ab6:	4293      	cmp	r3, r2
10047ab8:	d109      	bne.n	10047ace <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
10047aba:	68fb      	ldr	r3, [r7, #12]
10047abc:	681b      	ldr	r3, [r3, #0]
10047abe:	685a      	ldr	r2, [r3, #4]
10047ac0:	68fb      	ldr	r3, [r7, #12]
10047ac2:	681b      	ldr	r3, [r3, #0]
10047ac4:	2180      	movs	r1, #128	@ 0x80
10047ac6:	01c9      	lsls	r1, r1, #7
10047ac8:	430a      	orrs	r2, r1
10047aca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
10047acc:	e01d      	b.n	10047b0a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
10047ace:	68fb      	ldr	r3, [r7, #12]
10047ad0:	0018      	movs	r0, r3
10047ad2:	f000 fb03 	bl	100480dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
10047ad6:	e018      	b.n	10047b0a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10047ad8:	68fb      	ldr	r3, [r7, #12]
10047ada:	2140      	movs	r1, #64	@ 0x40
10047adc:	0018      	movs	r0, r3
10047ade:	f000 fe61 	bl	100487a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10047ae2:	e012      	b.n	10047b0a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10047ae4:	68bb      	ldr	r3, [r7, #8]
10047ae6:	095b      	lsrs	r3, r3, #5
10047ae8:	001a      	movs	r2, r3
10047aea:	2301      	movs	r3, #1
10047aec:	4013      	ands	r3, r2
10047aee:	d00d      	beq.n	10047b0c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10047af0:	687b      	ldr	r3, [r7, #4]
10047af2:	095b      	lsrs	r3, r3, #5
10047af4:	001a      	movs	r2, r3
10047af6:	2301      	movs	r3, #1
10047af8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10047afa:	d007      	beq.n	10047b0c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10047afc:	68ba      	ldr	r2, [r7, #8]
10047afe:	68fb      	ldr	r3, [r7, #12]
10047b00:	0011      	movs	r1, r2
10047b02:	0018      	movs	r0, r3
10047b04:	f000 fb92 	bl	1004822c <I2C_ITMasterCplt>
10047b08:	e000      	b.n	10047b0c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
10047b0a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10047b0c:	68fb      	ldr	r3, [r7, #12]
10047b0e:	2240      	movs	r2, #64	@ 0x40
10047b10:	2100      	movs	r1, #0
10047b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10047b14:	2300      	movs	r3, #0
}
10047b16:	0018      	movs	r0, r3
10047b18:	46bd      	mov	sp, r7
10047b1a:	b007      	add	sp, #28
10047b1c:	bd90      	pop	{r4, r7, pc}
10047b1e:	46c0      	nop			@ (mov r8, r8)
10047b20:	ffff0000 	.word	0xffff0000

10047b24 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
10047b24:	b590      	push	{r4, r7, lr}
10047b26:	b089      	sub	sp, #36	@ 0x24
10047b28:	af02      	add	r7, sp, #8
10047b2a:	60f8      	str	r0, [r7, #12]
10047b2c:	60b9      	str	r1, [r7, #8]
10047b2e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10047b30:	4b9a      	ldr	r3, [pc, #616]	@ (10047d9c <I2C_Mem_ISR_DMA+0x278>)
10047b32:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10047b34:	68fb      	ldr	r3, [r7, #12]
10047b36:	2240      	movs	r2, #64	@ 0x40
10047b38:	5c9b      	ldrb	r3, [r3, r2]
10047b3a:	2b01      	cmp	r3, #1
10047b3c:	d101      	bne.n	10047b42 <I2C_Mem_ISR_DMA+0x1e>
10047b3e:	2302      	movs	r3, #2
10047b40:	e127      	b.n	10047d92 <I2C_Mem_ISR_DMA+0x26e>
10047b42:	68fb      	ldr	r3, [r7, #12]
10047b44:	2240      	movs	r2, #64	@ 0x40
10047b46:	2101      	movs	r1, #1
10047b48:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10047b4a:	68bb      	ldr	r3, [r7, #8]
10047b4c:	091b      	lsrs	r3, r3, #4
10047b4e:	001a      	movs	r2, r3
10047b50:	2301      	movs	r3, #1
10047b52:	4013      	ands	r3, r2
10047b54:	d019      	beq.n	10047b8a <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10047b56:	687b      	ldr	r3, [r7, #4]
10047b58:	091b      	lsrs	r3, r3, #4
10047b5a:	001a      	movs	r2, r3
10047b5c:	2301      	movs	r3, #1
10047b5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10047b60:	d013      	beq.n	10047b8a <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047b62:	68fb      	ldr	r3, [r7, #12]
10047b64:	681b      	ldr	r3, [r3, #0]
10047b66:	2210      	movs	r2, #16
10047b68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10047b6a:	68fb      	ldr	r3, [r7, #12]
10047b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10047b6e:	2204      	movs	r2, #4
10047b70:	431a      	orrs	r2, r3
10047b72:	68fb      	ldr	r3, [r7, #12]
10047b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10047b76:	68fb      	ldr	r3, [r7, #12]
10047b78:	2120      	movs	r1, #32
10047b7a:	0018      	movs	r0, r3
10047b7c:	f000 ffb8 	bl	10048af0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10047b80:	68fb      	ldr	r3, [r7, #12]
10047b82:	0018      	movs	r0, r3
10047b84:	f000 ff39 	bl	100489fa <I2C_Flush_TXDR>
10047b88:	e0fe      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10047b8a:	68bb      	ldr	r3, [r7, #8]
10047b8c:	085b      	lsrs	r3, r3, #1
10047b8e:	001a      	movs	r2, r3
10047b90:	2301      	movs	r3, #1
10047b92:	4013      	ands	r3, r2
10047b94:	d00f      	beq.n	10047bb6 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10047b96:	687b      	ldr	r3, [r7, #4]
10047b98:	085b      	lsrs	r3, r3, #1
10047b9a:	001a      	movs	r2, r3
10047b9c:	2301      	movs	r3, #1
10047b9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10047ba0:	d009      	beq.n	10047bb6 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
10047ba2:	68fb      	ldr	r3, [r7, #12]
10047ba4:	681b      	ldr	r3, [r3, #0]
10047ba6:	68fa      	ldr	r2, [r7, #12]
10047ba8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10047baa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
10047bac:	68fb      	ldr	r3, [r7, #12]
10047bae:	2201      	movs	r2, #1
10047bb0:	4252      	negs	r2, r2
10047bb2:	651a      	str	r2, [r3, #80]	@ 0x50
10047bb4:	e0e8      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10047bb6:	68bb      	ldr	r3, [r7, #8]
10047bb8:	09db      	lsrs	r3, r3, #7
10047bba:	001a      	movs	r2, r3
10047bbc:	2301      	movs	r3, #1
10047bbe:	4013      	ands	r3, r2
10047bc0:	d065      	beq.n	10047c8e <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10047bc2:	687b      	ldr	r3, [r7, #4]
10047bc4:	099b      	lsrs	r3, r3, #6
10047bc6:	001a      	movs	r2, r3
10047bc8:	2301      	movs	r3, #1
10047bca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10047bcc:	d05f      	beq.n	10047c8e <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10047bce:	68fb      	ldr	r3, [r7, #12]
10047bd0:	2101      	movs	r1, #1
10047bd2:	0018      	movs	r0, r3
10047bd4:	f001 f816 	bl	10048c04 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10047bd8:	68fb      	ldr	r3, [r7, #12]
10047bda:	2110      	movs	r1, #16
10047bdc:	0018      	movs	r0, r3
10047bde:	f000 ff87 	bl	10048af0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
10047be2:	68fb      	ldr	r3, [r7, #12]
10047be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047be6:	b29b      	uxth	r3, r3
10047be8:	2b00      	cmp	r3, #0
10047bea:	d04a      	beq.n	10047c82 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10047bec:	68fb      	ldr	r3, [r7, #12]
10047bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047bf0:	b29b      	uxth	r3, r3
10047bf2:	2bff      	cmp	r3, #255	@ 0xff
10047bf4:	d910      	bls.n	10047c18 <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10047bf6:	68fb      	ldr	r3, [r7, #12]
10047bf8:	22ff      	movs	r2, #255	@ 0xff
10047bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10047bfc:	68fb      	ldr	r3, [r7, #12]
10047bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10047c00:	b299      	uxth	r1, r3
10047c02:	68fb      	ldr	r3, [r7, #12]
10047c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047c06:	b2da      	uxtb	r2, r3
10047c08:	2380      	movs	r3, #128	@ 0x80
10047c0a:	045b      	lsls	r3, r3, #17
10047c0c:	68f8      	ldr	r0, [r7, #12]
10047c0e:	2400      	movs	r4, #0
10047c10:	9400      	str	r4, [sp, #0]
10047c12:	f000 ff33 	bl	10048a7c <I2C_TransferConfig>
10047c16:	e011      	b.n	10047c3c <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10047c18:	68fb      	ldr	r3, [r7, #12]
10047c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047c1c:	b29a      	uxth	r2, r3
10047c1e:	68fb      	ldr	r3, [r7, #12]
10047c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10047c22:	68fb      	ldr	r3, [r7, #12]
10047c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10047c26:	b299      	uxth	r1, r3
10047c28:	68fb      	ldr	r3, [r7, #12]
10047c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047c2c:	b2da      	uxtb	r2, r3
10047c2e:	2380      	movs	r3, #128	@ 0x80
10047c30:	049b      	lsls	r3, r3, #18
10047c32:	68f8      	ldr	r0, [r7, #12]
10047c34:	2400      	movs	r4, #0
10047c36:	9400      	str	r4, [sp, #0]
10047c38:	f000 ff20 	bl	10048a7c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10047c3c:	68fb      	ldr	r3, [r7, #12]
10047c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047c40:	b29a      	uxth	r2, r3
10047c42:	68fb      	ldr	r3, [r7, #12]
10047c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047c46:	1ad3      	subs	r3, r2, r3
10047c48:	b29a      	uxth	r2, r3
10047c4a:	68fb      	ldr	r3, [r7, #12]
10047c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047c4e:	68fb      	ldr	r3, [r7, #12]
10047c50:	2241      	movs	r2, #65	@ 0x41
10047c52:	5c9b      	ldrb	r3, [r3, r2]
10047c54:	b2db      	uxtb	r3, r3
10047c56:	2b22      	cmp	r3, #34	@ 0x22
10047c58:	d109      	bne.n	10047c6e <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10047c5a:	68fb      	ldr	r3, [r7, #12]
10047c5c:	681b      	ldr	r3, [r3, #0]
10047c5e:	681a      	ldr	r2, [r3, #0]
10047c60:	68fb      	ldr	r3, [r7, #12]
10047c62:	681b      	ldr	r3, [r3, #0]
10047c64:	2180      	movs	r1, #128	@ 0x80
10047c66:	0209      	lsls	r1, r1, #8
10047c68:	430a      	orrs	r2, r1
10047c6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10047c6c:	e08c      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10047c6e:	68fb      	ldr	r3, [r7, #12]
10047c70:	681b      	ldr	r3, [r3, #0]
10047c72:	681a      	ldr	r2, [r3, #0]
10047c74:	68fb      	ldr	r3, [r7, #12]
10047c76:	681b      	ldr	r3, [r3, #0]
10047c78:	2180      	movs	r1, #128	@ 0x80
10047c7a:	01c9      	lsls	r1, r1, #7
10047c7c:	430a      	orrs	r2, r1
10047c7e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10047c80:	e082      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10047c82:	68fb      	ldr	r3, [r7, #12]
10047c84:	2140      	movs	r1, #64	@ 0x40
10047c86:	0018      	movs	r0, r3
10047c88:	f000 fd8c 	bl	100487a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10047c8c:	e07c      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10047c8e:	68bb      	ldr	r3, [r7, #8]
10047c90:	099b      	lsrs	r3, r3, #6
10047c92:	001a      	movs	r2, r3
10047c94:	2301      	movs	r3, #1
10047c96:	4013      	ands	r3, r2
10047c98:	d064      	beq.n	10047d64 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10047c9a:	687b      	ldr	r3, [r7, #4]
10047c9c:	099b      	lsrs	r3, r3, #6
10047c9e:	001a      	movs	r2, r3
10047ca0:	2301      	movs	r3, #1
10047ca2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10047ca4:	d05e      	beq.n	10047d64 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10047ca6:	68fb      	ldr	r3, [r7, #12]
10047ca8:	2101      	movs	r1, #1
10047caa:	0018      	movs	r0, r3
10047cac:	f000 ffaa 	bl	10048c04 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10047cb0:	68fb      	ldr	r3, [r7, #12]
10047cb2:	2110      	movs	r1, #16
10047cb4:	0018      	movs	r0, r3
10047cb6:	f000 ff1b 	bl	10048af0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047cba:	68fb      	ldr	r3, [r7, #12]
10047cbc:	2241      	movs	r2, #65	@ 0x41
10047cbe:	5c9b      	ldrb	r3, [r3, r2]
10047cc0:	b2db      	uxtb	r3, r3
10047cc2:	2b22      	cmp	r3, #34	@ 0x22
10047cc4:	d101      	bne.n	10047cca <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
10047cc6:	4b36      	ldr	r3, [pc, #216]	@ (10047da0 <I2C_Mem_ISR_DMA+0x27c>)
10047cc8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10047cca:	68fb      	ldr	r3, [r7, #12]
10047ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047cce:	b29b      	uxth	r3, r3
10047cd0:	2bff      	cmp	r3, #255	@ 0xff
10047cd2:	d911      	bls.n	10047cf8 <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10047cd4:	68fb      	ldr	r3, [r7, #12]
10047cd6:	22ff      	movs	r2, #255	@ 0xff
10047cd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10047cda:	68fb      	ldr	r3, [r7, #12]
10047cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10047cde:	b299      	uxth	r1, r3
10047ce0:	68fb      	ldr	r3, [r7, #12]
10047ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047ce4:	b2da      	uxtb	r2, r3
10047ce6:	2380      	movs	r3, #128	@ 0x80
10047ce8:	045c      	lsls	r4, r3, #17
10047cea:	68f8      	ldr	r0, [r7, #12]
10047cec:	697b      	ldr	r3, [r7, #20]
10047cee:	9300      	str	r3, [sp, #0]
10047cf0:	0023      	movs	r3, r4
10047cf2:	f000 fec3 	bl	10048a7c <I2C_TransferConfig>
10047cf6:	e012      	b.n	10047d1e <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10047cf8:	68fb      	ldr	r3, [r7, #12]
10047cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047cfc:	b29a      	uxth	r2, r3
10047cfe:	68fb      	ldr	r3, [r7, #12]
10047d00:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10047d02:	68fb      	ldr	r3, [r7, #12]
10047d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10047d06:	b299      	uxth	r1, r3
10047d08:	68fb      	ldr	r3, [r7, #12]
10047d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047d0c:	b2da      	uxtb	r2, r3
10047d0e:	2380      	movs	r3, #128	@ 0x80
10047d10:	049c      	lsls	r4, r3, #18
10047d12:	68f8      	ldr	r0, [r7, #12]
10047d14:	697b      	ldr	r3, [r7, #20]
10047d16:	9300      	str	r3, [sp, #0]
10047d18:	0023      	movs	r3, r4
10047d1a:	f000 feaf 	bl	10048a7c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
10047d1e:	68fb      	ldr	r3, [r7, #12]
10047d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10047d22:	b29a      	uxth	r2, r3
10047d24:	68fb      	ldr	r3, [r7, #12]
10047d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10047d28:	1ad3      	subs	r3, r2, r3
10047d2a:	b29a      	uxth	r2, r3
10047d2c:	68fb      	ldr	r3, [r7, #12]
10047d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047d30:	68fb      	ldr	r3, [r7, #12]
10047d32:	2241      	movs	r2, #65	@ 0x41
10047d34:	5c9b      	ldrb	r3, [r3, r2]
10047d36:	b2db      	uxtb	r3, r3
10047d38:	2b22      	cmp	r3, #34	@ 0x22
10047d3a:	d109      	bne.n	10047d50 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10047d3c:	68fb      	ldr	r3, [r7, #12]
10047d3e:	681b      	ldr	r3, [r3, #0]
10047d40:	681a      	ldr	r2, [r3, #0]
10047d42:	68fb      	ldr	r3, [r7, #12]
10047d44:	681b      	ldr	r3, [r3, #0]
10047d46:	2180      	movs	r1, #128	@ 0x80
10047d48:	0209      	lsls	r1, r1, #8
10047d4a:	430a      	orrs	r2, r1
10047d4c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047d4e:	e01b      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10047d50:	68fb      	ldr	r3, [r7, #12]
10047d52:	681b      	ldr	r3, [r3, #0]
10047d54:	681a      	ldr	r2, [r3, #0]
10047d56:	68fb      	ldr	r3, [r7, #12]
10047d58:	681b      	ldr	r3, [r3, #0]
10047d5a:	2180      	movs	r1, #128	@ 0x80
10047d5c:	01c9      	lsls	r1, r1, #7
10047d5e:	430a      	orrs	r2, r1
10047d60:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10047d62:	e011      	b.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10047d64:	68bb      	ldr	r3, [r7, #8]
10047d66:	095b      	lsrs	r3, r3, #5
10047d68:	001a      	movs	r2, r3
10047d6a:	2301      	movs	r3, #1
10047d6c:	4013      	ands	r3, r2
10047d6e:	d00b      	beq.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10047d70:	687b      	ldr	r3, [r7, #4]
10047d72:	095b      	lsrs	r3, r3, #5
10047d74:	001a      	movs	r2, r3
10047d76:	2301      	movs	r3, #1
10047d78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10047d7a:	d005      	beq.n	10047d88 <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10047d7c:	68ba      	ldr	r2, [r7, #8]
10047d7e:	68fb      	ldr	r3, [r7, #12]
10047d80:	0011      	movs	r1, r2
10047d82:	0018      	movs	r0, r3
10047d84:	f000 fa52 	bl	1004822c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10047d88:	68fb      	ldr	r3, [r7, #12]
10047d8a:	2240      	movs	r2, #64	@ 0x40
10047d8c:	2100      	movs	r1, #0
10047d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10047d90:	2300      	movs	r3, #0
}
10047d92:	0018      	movs	r0, r3
10047d94:	46bd      	mov	sp, r7
10047d96:	b007      	add	sp, #28
10047d98:	bd90      	pop	{r4, r7, pc}
10047d9a:	46c0      	nop			@ (mov r8, r8)
10047d9c:	80002000 	.word	0x80002000
10047da0:	80002400 	.word	0x80002400

10047da4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
10047da4:	b580      	push	{r7, lr}
10047da6:	b088      	sub	sp, #32
10047da8:	af00      	add	r7, sp, #0
10047daa:	60f8      	str	r0, [r7, #12]
10047dac:	60b9      	str	r1, [r7, #8]
10047dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10047db0:	68fb      	ldr	r3, [r7, #12]
10047db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10047db4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
10047db6:	2300      	movs	r3, #0
10047db8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
10047dba:	68fb      	ldr	r3, [r7, #12]
10047dbc:	2240      	movs	r2, #64	@ 0x40
10047dbe:	5c9b      	ldrb	r3, [r3, r2]
10047dc0:	2b01      	cmp	r3, #1
10047dc2:	d101      	bne.n	10047dc8 <I2C_Slave_ISR_DMA+0x24>
10047dc4:	2302      	movs	r3, #2
10047dc6:	e0de      	b.n	10047f86 <I2C_Slave_ISR_DMA+0x1e2>
10047dc8:	68fb      	ldr	r3, [r7, #12]
10047dca:	2240      	movs	r2, #64	@ 0x40
10047dcc:	2101      	movs	r1, #1
10047dce:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10047dd0:	68bb      	ldr	r3, [r7, #8]
10047dd2:	095b      	lsrs	r3, r3, #5
10047dd4:	001a      	movs	r2, r3
10047dd6:	2301      	movs	r3, #1
10047dd8:	4013      	ands	r3, r2
10047dda:	d00c      	beq.n	10047df6 <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10047ddc:	687b      	ldr	r3, [r7, #4]
10047dde:	095b      	lsrs	r3, r3, #5
10047de0:	001a      	movs	r2, r3
10047de2:	2301      	movs	r3, #1
10047de4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10047de6:	d006      	beq.n	10047df6 <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
10047de8:	68ba      	ldr	r2, [r7, #8]
10047dea:	68fb      	ldr	r3, [r7, #12]
10047dec:	0011      	movs	r1, r2
10047dee:	0018      	movs	r0, r3
10047df0:	f000 faee 	bl	100483d0 <I2C_ITSlaveCplt>
10047df4:	e0c2      	b.n	10047f7c <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10047df6:	68bb      	ldr	r3, [r7, #8]
10047df8:	091b      	lsrs	r3, r3, #4
10047dfa:	001a      	movs	r2, r3
10047dfc:	2301      	movs	r3, #1
10047dfe:	4013      	ands	r3, r2
10047e00:	d100      	bne.n	10047e04 <I2C_Slave_ISR_DMA+0x60>
10047e02:	e0a9      	b.n	10047f58 <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10047e04:	687b      	ldr	r3, [r7, #4]
10047e06:	091b      	lsrs	r3, r3, #4
10047e08:	001a      	movs	r2, r3
10047e0a:	2301      	movs	r3, #1
10047e0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10047e0e:	d100      	bne.n	10047e12 <I2C_Slave_ISR_DMA+0x6e>
10047e10:	e0a2      	b.n	10047f58 <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10047e12:	687b      	ldr	r3, [r7, #4]
10047e14:	0b9b      	lsrs	r3, r3, #14
10047e16:	001a      	movs	r2, r3
10047e18:	2301      	movs	r3, #1
10047e1a:	4013      	ands	r3, r2
10047e1c:	d106      	bne.n	10047e2c <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
10047e1e:	687b      	ldr	r3, [r7, #4]
10047e20:	0bdb      	lsrs	r3, r3, #15
10047e22:	001a      	movs	r2, r3
10047e24:	2301      	movs	r3, #1
10047e26:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10047e28:	d100      	bne.n	10047e2c <I2C_Slave_ISR_DMA+0x88>
10047e2a:	e08e      	b.n	10047f4a <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
10047e2c:	68fb      	ldr	r3, [r7, #12]
10047e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10047e30:	2b00      	cmp	r3, #0
10047e32:	d00d      	beq.n	10047e50 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
10047e34:	687b      	ldr	r3, [r7, #4]
10047e36:	0bdb      	lsrs	r3, r3, #15
10047e38:	001a      	movs	r2, r3
10047e3a:	2301      	movs	r3, #1
10047e3c:	4013      	ands	r3, r2
10047e3e:	d007      	beq.n	10047e50 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
10047e40:	68fb      	ldr	r3, [r7, #12]
10047e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10047e44:	681b      	ldr	r3, [r3, #0]
10047e46:	685b      	ldr	r3, [r3, #4]
10047e48:	2b00      	cmp	r3, #0
10047e4a:	d101      	bne.n	10047e50 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
10047e4c:	2301      	movs	r3, #1
10047e4e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
10047e50:	68fb      	ldr	r3, [r7, #12]
10047e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047e54:	2b00      	cmp	r3, #0
10047e56:	d00d      	beq.n	10047e74 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
10047e58:	687b      	ldr	r3, [r7, #4]
10047e5a:	0b9b      	lsrs	r3, r3, #14
10047e5c:	001a      	movs	r2, r3
10047e5e:	2301      	movs	r3, #1
10047e60:	4013      	ands	r3, r2
10047e62:	d007      	beq.n	10047e74 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
10047e64:	68fb      	ldr	r3, [r7, #12]
10047e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047e68:	681b      	ldr	r3, [r3, #0]
10047e6a:	685b      	ldr	r3, [r3, #4]
10047e6c:	2b00      	cmp	r3, #0
10047e6e:	d101      	bne.n	10047e74 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
10047e70:	2301      	movs	r3, #1
10047e72:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
10047e74:	69fb      	ldr	r3, [r7, #28]
10047e76:	2b01      	cmp	r3, #1
10047e78:	d12d      	bne.n	10047ed6 <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10047e7a:	68fb      	ldr	r3, [r7, #12]
10047e7c:	2241      	movs	r2, #65	@ 0x41
10047e7e:	5c9b      	ldrb	r3, [r3, r2]
10047e80:	b2db      	uxtb	r3, r3
10047e82:	2b28      	cmp	r3, #40	@ 0x28
10047e84:	d10b      	bne.n	10047e9e <I2C_Slave_ISR_DMA+0xfa>
10047e86:	69ba      	ldr	r2, [r7, #24]
10047e88:	2380      	movs	r3, #128	@ 0x80
10047e8a:	049b      	lsls	r3, r3, #18
10047e8c:	429a      	cmp	r2, r3
10047e8e:	d106      	bne.n	10047e9e <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
10047e90:	68ba      	ldr	r2, [r7, #8]
10047e92:	68fb      	ldr	r3, [r7, #12]
10047e94:	0011      	movs	r1, r2
10047e96:	0018      	movs	r0, r3
10047e98:	f000 fc2a 	bl	100486f0 <I2C_ITListenCplt>
10047e9c:	e054      	b.n	10047f48 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10047e9e:	68fb      	ldr	r3, [r7, #12]
10047ea0:	2241      	movs	r2, #65	@ 0x41
10047ea2:	5c9b      	ldrb	r3, [r3, r2]
10047ea4:	b2db      	uxtb	r3, r3
10047ea6:	2b29      	cmp	r3, #41	@ 0x29
10047ea8:	d110      	bne.n	10047ecc <I2C_Slave_ISR_DMA+0x128>
10047eaa:	69bb      	ldr	r3, [r7, #24]
10047eac:	4a38      	ldr	r2, [pc, #224]	@ (10047f90 <I2C_Slave_ISR_DMA+0x1ec>)
10047eae:	4293      	cmp	r3, r2
10047eb0:	d00c      	beq.n	10047ecc <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047eb2:	68fb      	ldr	r3, [r7, #12]
10047eb4:	681b      	ldr	r3, [r3, #0]
10047eb6:	2210      	movs	r2, #16
10047eb8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
10047eba:	68fb      	ldr	r3, [r7, #12]
10047ebc:	0018      	movs	r0, r3
10047ebe:	f000 fd9c 	bl	100489fa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
10047ec2:	68fb      	ldr	r3, [r7, #12]
10047ec4:	0018      	movs	r0, r3
10047ec6:	f000 f94b 	bl	10048160 <I2C_ITSlaveSeqCplt>
10047eca:	e03d      	b.n	10047f48 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047ecc:	68fb      	ldr	r3, [r7, #12]
10047ece:	681b      	ldr	r3, [r3, #0]
10047ed0:	2210      	movs	r2, #16
10047ed2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
10047ed4:	e03e      	b.n	10047f54 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047ed6:	68fb      	ldr	r3, [r7, #12]
10047ed8:	681b      	ldr	r3, [r3, #0]
10047eda:	2210      	movs	r2, #16
10047edc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10047ede:	68fb      	ldr	r3, [r7, #12]
10047ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10047ee2:	2204      	movs	r2, #4
10047ee4:	431a      	orrs	r2, r3
10047ee6:	68fb      	ldr	r3, [r7, #12]
10047ee8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
10047eea:	2317      	movs	r3, #23
10047eec:	18fb      	adds	r3, r7, r3
10047eee:	68fa      	ldr	r2, [r7, #12]
10047ef0:	2141      	movs	r1, #65	@ 0x41
10047ef2:	5c52      	ldrb	r2, [r2, r1]
10047ef4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10047ef6:	69bb      	ldr	r3, [r7, #24]
10047ef8:	2b00      	cmp	r3, #0
10047efa:	d004      	beq.n	10047f06 <I2C_Slave_ISR_DMA+0x162>
10047efc:	69ba      	ldr	r2, [r7, #24]
10047efe:	2380      	movs	r3, #128	@ 0x80
10047f00:	045b      	lsls	r3, r3, #17
10047f02:	429a      	cmp	r2, r3
10047f04:	d126      	bne.n	10047f54 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10047f06:	2217      	movs	r2, #23
10047f08:	18bb      	adds	r3, r7, r2
10047f0a:	781b      	ldrb	r3, [r3, #0]
10047f0c:	2b21      	cmp	r3, #33	@ 0x21
10047f0e:	d003      	beq.n	10047f18 <I2C_Slave_ISR_DMA+0x174>
10047f10:	18bb      	adds	r3, r7, r2
10047f12:	781b      	ldrb	r3, [r3, #0]
10047f14:	2b29      	cmp	r3, #41	@ 0x29
10047f16:	d103      	bne.n	10047f20 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10047f18:	68fb      	ldr	r3, [r7, #12]
10047f1a:	2221      	movs	r2, #33	@ 0x21
10047f1c:	631a      	str	r2, [r3, #48]	@ 0x30
10047f1e:	e00b      	b.n	10047f38 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10047f20:	2217      	movs	r2, #23
10047f22:	18bb      	adds	r3, r7, r2
10047f24:	781b      	ldrb	r3, [r3, #0]
10047f26:	2b22      	cmp	r3, #34	@ 0x22
10047f28:	d003      	beq.n	10047f32 <I2C_Slave_ISR_DMA+0x18e>
10047f2a:	18bb      	adds	r3, r7, r2
10047f2c:	781b      	ldrb	r3, [r3, #0]
10047f2e:	2b2a      	cmp	r3, #42	@ 0x2a
10047f30:	d102      	bne.n	10047f38 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10047f32:	68fb      	ldr	r3, [r7, #12]
10047f34:	2222      	movs	r2, #34	@ 0x22
10047f36:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
10047f38:	68fb      	ldr	r3, [r7, #12]
10047f3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10047f3c:	68fb      	ldr	r3, [r7, #12]
10047f3e:	0011      	movs	r1, r2
10047f40:	0018      	movs	r0, r3
10047f42:	f000 fc2f 	bl	100487a4 <I2C_ITError>
      if (treatdmanack == 1U)
10047f46:	e005      	b.n	10047f54 <I2C_Slave_ISR_DMA+0x1b0>
10047f48:	e004      	b.n	10047f54 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10047f4a:	68fb      	ldr	r3, [r7, #12]
10047f4c:	681b      	ldr	r3, [r3, #0]
10047f4e:	2210      	movs	r2, #16
10047f50:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10047f52:	e013      	b.n	10047f7c <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
10047f54:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10047f56:	e011      	b.n	10047f7c <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10047f58:	68bb      	ldr	r3, [r7, #8]
10047f5a:	08db      	lsrs	r3, r3, #3
10047f5c:	001a      	movs	r2, r3
10047f5e:	2301      	movs	r3, #1
10047f60:	4013      	ands	r3, r2
10047f62:	d00b      	beq.n	10047f7c <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10047f64:	687b      	ldr	r3, [r7, #4]
10047f66:	08db      	lsrs	r3, r3, #3
10047f68:	001a      	movs	r2, r3
10047f6a:	2301      	movs	r3, #1
10047f6c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10047f6e:	d005      	beq.n	10047f7c <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
10047f70:	68ba      	ldr	r2, [r7, #8]
10047f72:	68fb      	ldr	r3, [r7, #12]
10047f74:	0011      	movs	r1, r2
10047f76:	0018      	movs	r0, r3
10047f78:	f000 f80c 	bl	10047f94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10047f7c:	68fb      	ldr	r3, [r7, #12]
10047f7e:	2240      	movs	r2, #64	@ 0x40
10047f80:	2100      	movs	r1, #0
10047f82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10047f84:	2300      	movs	r3, #0
}
10047f86:	0018      	movs	r0, r3
10047f88:	46bd      	mov	sp, r7
10047f8a:	b008      	add	sp, #32
10047f8c:	bd80      	pop	{r7, pc}
10047f8e:	46c0      	nop			@ (mov r8, r8)
10047f90:	ffff0000 	.word	0xffff0000

10047f94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10047f94:	b5b0      	push	{r4, r5, r7, lr}
10047f96:	b084      	sub	sp, #16
10047f98:	af00      	add	r7, sp, #0
10047f9a:	6078      	str	r0, [r7, #4]
10047f9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10047f9e:	687b      	ldr	r3, [r7, #4]
10047fa0:	2241      	movs	r2, #65	@ 0x41
10047fa2:	5c9b      	ldrb	r3, [r3, r2]
10047fa4:	b2db      	uxtb	r3, r3
10047fa6:	001a      	movs	r2, r3
10047fa8:	2328      	movs	r3, #40	@ 0x28
10047faa:	4013      	ands	r3, r2
10047fac:	2b28      	cmp	r3, #40	@ 0x28
10047fae:	d000      	beq.n	10047fb2 <I2C_ITAddrCplt+0x1e>
10047fb0:	e088      	b.n	100480c4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10047fb2:	687b      	ldr	r3, [r7, #4]
10047fb4:	681b      	ldr	r3, [r3, #0]
10047fb6:	699b      	ldr	r3, [r3, #24]
10047fb8:	0c1b      	lsrs	r3, r3, #16
10047fba:	b2da      	uxtb	r2, r3
10047fbc:	250f      	movs	r5, #15
10047fbe:	197b      	adds	r3, r7, r5
10047fc0:	2101      	movs	r1, #1
10047fc2:	400a      	ands	r2, r1
10047fc4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10047fc6:	687b      	ldr	r3, [r7, #4]
10047fc8:	681b      	ldr	r3, [r3, #0]
10047fca:	699b      	ldr	r3, [r3, #24]
10047fcc:	0c1b      	lsrs	r3, r3, #16
10047fce:	b29a      	uxth	r2, r3
10047fd0:	200c      	movs	r0, #12
10047fd2:	183b      	adds	r3, r7, r0
10047fd4:	21fe      	movs	r1, #254	@ 0xfe
10047fd6:	400a      	ands	r2, r1
10047fd8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10047fda:	687b      	ldr	r3, [r7, #4]
10047fdc:	681b      	ldr	r3, [r3, #0]
10047fde:	689b      	ldr	r3, [r3, #8]
10047fe0:	b29a      	uxth	r2, r3
10047fe2:	240a      	movs	r4, #10
10047fe4:	193b      	adds	r3, r7, r4
10047fe6:	0592      	lsls	r2, r2, #22
10047fe8:	0d92      	lsrs	r2, r2, #22
10047fea:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10047fec:	687b      	ldr	r3, [r7, #4]
10047fee:	681b      	ldr	r3, [r3, #0]
10047ff0:	68db      	ldr	r3, [r3, #12]
10047ff2:	b29a      	uxth	r2, r3
10047ff4:	2308      	movs	r3, #8
10047ff6:	18fb      	adds	r3, r7, r3
10047ff8:	21fe      	movs	r1, #254	@ 0xfe
10047ffa:	400a      	ands	r2, r1
10047ffc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10047ffe:	687b      	ldr	r3, [r7, #4]
10048000:	68db      	ldr	r3, [r3, #12]
10048002:	2b02      	cmp	r3, #2
10048004:	d148      	bne.n	10048098 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
10048006:	0021      	movs	r1, r4
10048008:	187b      	adds	r3, r7, r1
1004800a:	881b      	ldrh	r3, [r3, #0]
1004800c:	09db      	lsrs	r3, r3, #7
1004800e:	b29a      	uxth	r2, r3
10048010:	183b      	adds	r3, r7, r0
10048012:	881b      	ldrh	r3, [r3, #0]
10048014:	4053      	eors	r3, r2
10048016:	b29b      	uxth	r3, r3
10048018:	001a      	movs	r2, r3
1004801a:	2306      	movs	r3, #6
1004801c:	4013      	ands	r3, r2
1004801e:	d120      	bne.n	10048062 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
10048020:	183b      	adds	r3, r7, r0
10048022:	187a      	adds	r2, r7, r1
10048024:	8812      	ldrh	r2, [r2, #0]
10048026:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
10048028:	687b      	ldr	r3, [r7, #4]
1004802a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004802c:	1c5a      	adds	r2, r3, #1
1004802e:	687b      	ldr	r3, [r7, #4]
10048030:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10048032:	687b      	ldr	r3, [r7, #4]
10048034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10048036:	2b02      	cmp	r3, #2
10048038:	d14c      	bne.n	100480d4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
1004803a:	687b      	ldr	r3, [r7, #4]
1004803c:	2200      	movs	r2, #0
1004803e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10048040:	687b      	ldr	r3, [r7, #4]
10048042:	681b      	ldr	r3, [r3, #0]
10048044:	2208      	movs	r2, #8
10048046:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10048048:	687b      	ldr	r3, [r7, #4]
1004804a:	2240      	movs	r2, #64	@ 0x40
1004804c:	2100      	movs	r1, #0
1004804e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10048050:	183b      	adds	r3, r7, r0
10048052:	881a      	ldrh	r2, [r3, #0]
10048054:	197b      	adds	r3, r7, r5
10048056:	7819      	ldrb	r1, [r3, #0]
10048058:	687b      	ldr	r3, [r7, #4]
1004805a:	0018      	movs	r0, r3
1004805c:	f7ff f9e8 	bl	10047430 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10048060:	e038      	b.n	100480d4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10048062:	240c      	movs	r4, #12
10048064:	193b      	adds	r3, r7, r4
10048066:	2208      	movs	r2, #8
10048068:	18ba      	adds	r2, r7, r2
1004806a:	8812      	ldrh	r2, [r2, #0]
1004806c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1004806e:	2380      	movs	r3, #128	@ 0x80
10048070:	021a      	lsls	r2, r3, #8
10048072:	687b      	ldr	r3, [r7, #4]
10048074:	0011      	movs	r1, r2
10048076:	0018      	movs	r0, r3
10048078:	f000 fdc4 	bl	10048c04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
1004807c:	687b      	ldr	r3, [r7, #4]
1004807e:	2240      	movs	r2, #64	@ 0x40
10048080:	2100      	movs	r1, #0
10048082:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10048084:	193b      	adds	r3, r7, r4
10048086:	881a      	ldrh	r2, [r3, #0]
10048088:	230f      	movs	r3, #15
1004808a:	18fb      	adds	r3, r7, r3
1004808c:	7819      	ldrb	r1, [r3, #0]
1004808e:	687b      	ldr	r3, [r7, #4]
10048090:	0018      	movs	r0, r3
10048092:	f7ff f9cd 	bl	10047430 <HAL_I2C_AddrCallback>
}
10048096:	e01d      	b.n	100480d4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10048098:	2380      	movs	r3, #128	@ 0x80
1004809a:	021a      	lsls	r2, r3, #8
1004809c:	687b      	ldr	r3, [r7, #4]
1004809e:	0011      	movs	r1, r2
100480a0:	0018      	movs	r0, r3
100480a2:	f000 fdaf 	bl	10048c04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
100480a6:	687b      	ldr	r3, [r7, #4]
100480a8:	2240      	movs	r2, #64	@ 0x40
100480aa:	2100      	movs	r1, #0
100480ac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
100480ae:	230c      	movs	r3, #12
100480b0:	18fb      	adds	r3, r7, r3
100480b2:	881a      	ldrh	r2, [r3, #0]
100480b4:	230f      	movs	r3, #15
100480b6:	18fb      	adds	r3, r7, r3
100480b8:	7819      	ldrb	r1, [r3, #0]
100480ba:	687b      	ldr	r3, [r7, #4]
100480bc:	0018      	movs	r0, r3
100480be:	f7ff f9b7 	bl	10047430 <HAL_I2C_AddrCallback>
}
100480c2:	e007      	b.n	100480d4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
100480c4:	687b      	ldr	r3, [r7, #4]
100480c6:	681b      	ldr	r3, [r3, #0]
100480c8:	2208      	movs	r2, #8
100480ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
100480cc:	687b      	ldr	r3, [r7, #4]
100480ce:	2240      	movs	r2, #64	@ 0x40
100480d0:	2100      	movs	r1, #0
100480d2:	5499      	strb	r1, [r3, r2]
}
100480d4:	46c0      	nop			@ (mov r8, r8)
100480d6:	46bd      	mov	sp, r7
100480d8:	b004      	add	sp, #16
100480da:	bdb0      	pop	{r4, r5, r7, pc}

100480dc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
100480dc:	b580      	push	{r7, lr}
100480de:	b082      	sub	sp, #8
100480e0:	af00      	add	r7, sp, #0
100480e2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
100480e4:	687b      	ldr	r3, [r7, #4]
100480e6:	2242      	movs	r2, #66	@ 0x42
100480e8:	2100      	movs	r1, #0
100480ea:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
100480ec:	687b      	ldr	r3, [r7, #4]
100480ee:	2241      	movs	r2, #65	@ 0x41
100480f0:	5c9b      	ldrb	r3, [r3, r2]
100480f2:	b2db      	uxtb	r3, r3
100480f4:	2b21      	cmp	r3, #33	@ 0x21
100480f6:	d117      	bne.n	10048128 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
100480f8:	687b      	ldr	r3, [r7, #4]
100480fa:	2241      	movs	r2, #65	@ 0x41
100480fc:	2120      	movs	r1, #32
100480fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10048100:	687b      	ldr	r3, [r7, #4]
10048102:	2211      	movs	r2, #17
10048104:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
10048106:	687b      	ldr	r3, [r7, #4]
10048108:	2200      	movs	r2, #0
1004810a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004810c:	687b      	ldr	r3, [r7, #4]
1004810e:	2101      	movs	r1, #1
10048110:	0018      	movs	r0, r3
10048112:	f000 fd77 	bl	10048c04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048116:	687b      	ldr	r3, [r7, #4]
10048118:	2240      	movs	r2, #64	@ 0x40
1004811a:	2100      	movs	r1, #0
1004811c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
1004811e:	687b      	ldr	r3, [r7, #4]
10048120:	0018      	movs	r0, r3
10048122:	f7ff f965 	bl	100473f0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10048126:	e016      	b.n	10048156 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
10048128:	687b      	ldr	r3, [r7, #4]
1004812a:	2241      	movs	r2, #65	@ 0x41
1004812c:	2120      	movs	r1, #32
1004812e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10048130:	687b      	ldr	r3, [r7, #4]
10048132:	2212      	movs	r2, #18
10048134:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
10048136:	687b      	ldr	r3, [r7, #4]
10048138:	2200      	movs	r2, #0
1004813a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004813c:	687b      	ldr	r3, [r7, #4]
1004813e:	2102      	movs	r1, #2
10048140:	0018      	movs	r0, r3
10048142:	f000 fd5f 	bl	10048c04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10048146:	687b      	ldr	r3, [r7, #4]
10048148:	2240      	movs	r2, #64	@ 0x40
1004814a:	2100      	movs	r1, #0
1004814c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
1004814e:	687b      	ldr	r3, [r7, #4]
10048150:	0018      	movs	r0, r3
10048152:	f7ff f955 	bl	10047400 <HAL_I2C_MasterRxCpltCallback>
}
10048156:	46c0      	nop			@ (mov r8, r8)
10048158:	46bd      	mov	sp, r7
1004815a:	b002      	add	sp, #8
1004815c:	bd80      	pop	{r7, pc}
	...

10048160 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10048160:	b580      	push	{r7, lr}
10048162:	b084      	sub	sp, #16
10048164:	af00      	add	r7, sp, #0
10048166:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10048168:	687b      	ldr	r3, [r7, #4]
1004816a:	681b      	ldr	r3, [r3, #0]
1004816c:	681b      	ldr	r3, [r3, #0]
1004816e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10048170:	687b      	ldr	r3, [r7, #4]
10048172:	2242      	movs	r2, #66	@ 0x42
10048174:	2100      	movs	r1, #0
10048176:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10048178:	68fb      	ldr	r3, [r7, #12]
1004817a:	0b9b      	lsrs	r3, r3, #14
1004817c:	001a      	movs	r2, r3
1004817e:	2301      	movs	r3, #1
10048180:	4013      	ands	r3, r2
10048182:	d008      	beq.n	10048196 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10048184:	687b      	ldr	r3, [r7, #4]
10048186:	681b      	ldr	r3, [r3, #0]
10048188:	681a      	ldr	r2, [r3, #0]
1004818a:	687b      	ldr	r3, [r7, #4]
1004818c:	681b      	ldr	r3, [r3, #0]
1004818e:	4925      	ldr	r1, [pc, #148]	@ (10048224 <I2C_ITSlaveSeqCplt+0xc4>)
10048190:	400a      	ands	r2, r1
10048192:	601a      	str	r2, [r3, #0]
10048194:	e00d      	b.n	100481b2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10048196:	68fb      	ldr	r3, [r7, #12]
10048198:	0bdb      	lsrs	r3, r3, #15
1004819a:	001a      	movs	r2, r3
1004819c:	2301      	movs	r3, #1
1004819e:	4013      	ands	r3, r2
100481a0:	d007      	beq.n	100481b2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100481a2:	687b      	ldr	r3, [r7, #4]
100481a4:	681b      	ldr	r3, [r3, #0]
100481a6:	681a      	ldr	r2, [r3, #0]
100481a8:	687b      	ldr	r3, [r7, #4]
100481aa:	681b      	ldr	r3, [r3, #0]
100481ac:	491e      	ldr	r1, [pc, #120]	@ (10048228 <I2C_ITSlaveSeqCplt+0xc8>)
100481ae:	400a      	ands	r2, r1
100481b0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
100481b2:	687b      	ldr	r3, [r7, #4]
100481b4:	2241      	movs	r2, #65	@ 0x41
100481b6:	5c9b      	ldrb	r3, [r3, r2]
100481b8:	b2db      	uxtb	r3, r3
100481ba:	2b29      	cmp	r3, #41	@ 0x29
100481bc:	d114      	bne.n	100481e8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100481be:	687b      	ldr	r3, [r7, #4]
100481c0:	2241      	movs	r2, #65	@ 0x41
100481c2:	2128      	movs	r1, #40	@ 0x28
100481c4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100481c6:	687b      	ldr	r3, [r7, #4]
100481c8:	2221      	movs	r2, #33	@ 0x21
100481ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100481cc:	687b      	ldr	r3, [r7, #4]
100481ce:	2101      	movs	r1, #1
100481d0:	0018      	movs	r0, r3
100481d2:	f000 fd17 	bl	10048c04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100481d6:	687b      	ldr	r3, [r7, #4]
100481d8:	2240      	movs	r2, #64	@ 0x40
100481da:	2100      	movs	r1, #0
100481dc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
100481de:	687b      	ldr	r3, [r7, #4]
100481e0:	0018      	movs	r0, r3
100481e2:	f7ff f915 	bl	10047410 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
100481e6:	e019      	b.n	1004821c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
100481e8:	687b      	ldr	r3, [r7, #4]
100481ea:	2241      	movs	r2, #65	@ 0x41
100481ec:	5c9b      	ldrb	r3, [r3, r2]
100481ee:	b2db      	uxtb	r3, r3
100481f0:	2b2a      	cmp	r3, #42	@ 0x2a
100481f2:	d113      	bne.n	1004821c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100481f4:	687b      	ldr	r3, [r7, #4]
100481f6:	2241      	movs	r2, #65	@ 0x41
100481f8:	2128      	movs	r1, #40	@ 0x28
100481fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100481fc:	687b      	ldr	r3, [r7, #4]
100481fe:	2222      	movs	r2, #34	@ 0x22
10048200:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10048202:	687b      	ldr	r3, [r7, #4]
10048204:	2102      	movs	r1, #2
10048206:	0018      	movs	r0, r3
10048208:	f000 fcfc 	bl	10048c04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
1004820c:	687b      	ldr	r3, [r7, #4]
1004820e:	2240      	movs	r2, #64	@ 0x40
10048210:	2100      	movs	r1, #0
10048212:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10048214:	687b      	ldr	r3, [r7, #4]
10048216:	0018      	movs	r0, r3
10048218:	f7ff f902 	bl	10047420 <HAL_I2C_SlaveRxCpltCallback>
}
1004821c:	46c0      	nop			@ (mov r8, r8)
1004821e:	46bd      	mov	sp, r7
10048220:	b004      	add	sp, #16
10048222:	bd80      	pop	{r7, pc}
10048224:	ffffbfff 	.word	0xffffbfff
10048228:	ffff7fff 	.word	0xffff7fff

1004822c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004822c:	b580      	push	{r7, lr}
1004822e:	b086      	sub	sp, #24
10048230:	af00      	add	r7, sp, #0
10048232:	6078      	str	r0, [r7, #4]
10048234:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
10048236:	683b      	ldr	r3, [r7, #0]
10048238:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004823a:	687b      	ldr	r3, [r7, #4]
1004823c:	681b      	ldr	r3, [r3, #0]
1004823e:	2220      	movs	r2, #32
10048240:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10048242:	687b      	ldr	r3, [r7, #4]
10048244:	2241      	movs	r2, #65	@ 0x41
10048246:	5c9b      	ldrb	r3, [r3, r2]
10048248:	b2db      	uxtb	r3, r3
1004824a:	2b21      	cmp	r3, #33	@ 0x21
1004824c:	d108      	bne.n	10048260 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004824e:	687b      	ldr	r3, [r7, #4]
10048250:	2101      	movs	r1, #1
10048252:	0018      	movs	r0, r3
10048254:	f000 fcd6 	bl	10048c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10048258:	687b      	ldr	r3, [r7, #4]
1004825a:	2211      	movs	r2, #17
1004825c:	631a      	str	r2, [r3, #48]	@ 0x30
1004825e:	e00d      	b.n	1004827c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048260:	687b      	ldr	r3, [r7, #4]
10048262:	2241      	movs	r2, #65	@ 0x41
10048264:	5c9b      	ldrb	r3, [r3, r2]
10048266:	b2db      	uxtb	r3, r3
10048268:	2b22      	cmp	r3, #34	@ 0x22
1004826a:	d107      	bne.n	1004827c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004826c:	687b      	ldr	r3, [r7, #4]
1004826e:	2102      	movs	r1, #2
10048270:	0018      	movs	r0, r3
10048272:	f000 fcc7 	bl	10048c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10048276:	687b      	ldr	r3, [r7, #4]
10048278:	2212      	movs	r2, #18
1004827a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
1004827c:	687b      	ldr	r3, [r7, #4]
1004827e:	681b      	ldr	r3, [r3, #0]
10048280:	685a      	ldr	r2, [r3, #4]
10048282:	687b      	ldr	r3, [r7, #4]
10048284:	681b      	ldr	r3, [r3, #0]
10048286:	4950      	ldr	r1, [pc, #320]	@ (100483c8 <I2C_ITMasterCplt+0x19c>)
10048288:	400a      	ands	r2, r1
1004828a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
1004828c:	687b      	ldr	r3, [r7, #4]
1004828e:	2200      	movs	r2, #0
10048290:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10048292:	687b      	ldr	r3, [r7, #4]
10048294:	4a4d      	ldr	r2, [pc, #308]	@ (100483cc <I2C_ITMasterCplt+0x1a0>)
10048296:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
10048298:	697b      	ldr	r3, [r7, #20]
1004829a:	091b      	lsrs	r3, r3, #4
1004829c:	001a      	movs	r2, r3
1004829e:	2301      	movs	r3, #1
100482a0:	4013      	ands	r3, r2
100482a2:	d009      	beq.n	100482b8 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100482a4:	687b      	ldr	r3, [r7, #4]
100482a6:	681b      	ldr	r3, [r3, #0]
100482a8:	2210      	movs	r2, #16
100482aa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100482ac:	687b      	ldr	r3, [r7, #4]
100482ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100482b0:	2204      	movs	r2, #4
100482b2:	431a      	orrs	r2, r3
100482b4:	687b      	ldr	r3, [r7, #4]
100482b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
100482b8:	687b      	ldr	r3, [r7, #4]
100482ba:	2241      	movs	r2, #65	@ 0x41
100482bc:	5c9b      	ldrb	r3, [r3, r2]
100482be:	b2db      	uxtb	r3, r3
100482c0:	2b60      	cmp	r3, #96	@ 0x60
100482c2:	d10b      	bne.n	100482dc <I2C_ITMasterCplt+0xb0>
100482c4:	697b      	ldr	r3, [r7, #20]
100482c6:	089b      	lsrs	r3, r3, #2
100482c8:	001a      	movs	r2, r3
100482ca:	2301      	movs	r3, #1
100482cc:	4013      	ands	r3, r2
100482ce:	d005      	beq.n	100482dc <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
100482d0:	687b      	ldr	r3, [r7, #4]
100482d2:	681b      	ldr	r3, [r3, #0]
100482d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100482d6:	b2db      	uxtb	r3, r3
100482d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
100482da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
100482dc:	687b      	ldr	r3, [r7, #4]
100482de:	0018      	movs	r0, r3
100482e0:	f000 fb8b 	bl	100489fa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
100482e4:	687b      	ldr	r3, [r7, #4]
100482e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100482e8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
100482ea:	687b      	ldr	r3, [r7, #4]
100482ec:	2241      	movs	r2, #65	@ 0x41
100482ee:	5c9b      	ldrb	r3, [r3, r2]
100482f0:	b2db      	uxtb	r3, r3
100482f2:	2b60      	cmp	r3, #96	@ 0x60
100482f4:	d002      	beq.n	100482fc <I2C_ITMasterCplt+0xd0>
100482f6:	693b      	ldr	r3, [r7, #16]
100482f8:	2b00      	cmp	r3, #0
100482fa:	d007      	beq.n	1004830c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
100482fc:	687b      	ldr	r3, [r7, #4]
100482fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048300:	687b      	ldr	r3, [r7, #4]
10048302:	0011      	movs	r1, r2
10048304:	0018      	movs	r0, r3
10048306:	f000 fa4d 	bl	100487a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
1004830a:	e058      	b.n	100483be <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
1004830c:	687b      	ldr	r3, [r7, #4]
1004830e:	2241      	movs	r2, #65	@ 0x41
10048310:	5c9b      	ldrb	r3, [r3, r2]
10048312:	b2db      	uxtb	r3, r3
10048314:	2b21      	cmp	r3, #33	@ 0x21
10048316:	d126      	bne.n	10048366 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
10048318:	687b      	ldr	r3, [r7, #4]
1004831a:	2241      	movs	r2, #65	@ 0x41
1004831c:	2120      	movs	r1, #32
1004831e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10048320:	687b      	ldr	r3, [r7, #4]
10048322:	2200      	movs	r2, #0
10048324:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10048326:	687b      	ldr	r3, [r7, #4]
10048328:	2242      	movs	r2, #66	@ 0x42
1004832a:	5c9b      	ldrb	r3, [r3, r2]
1004832c:	b2db      	uxtb	r3, r3
1004832e:	2b40      	cmp	r3, #64	@ 0x40
10048330:	d10c      	bne.n	1004834c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10048332:	687b      	ldr	r3, [r7, #4]
10048334:	2242      	movs	r2, #66	@ 0x42
10048336:	2100      	movs	r1, #0
10048338:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004833a:	687b      	ldr	r3, [r7, #4]
1004833c:	2240      	movs	r2, #64	@ 0x40
1004833e:	2100      	movs	r1, #0
10048340:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
10048342:	687b      	ldr	r3, [r7, #4]
10048344:	0018      	movs	r0, r3
10048346:	f7fb fa93 	bl	10043870 <HAL_I2C_MemTxCpltCallback>
}
1004834a:	e038      	b.n	100483be <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004834c:	687b      	ldr	r3, [r7, #4]
1004834e:	2242      	movs	r2, #66	@ 0x42
10048350:	2100      	movs	r1, #0
10048352:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10048354:	687b      	ldr	r3, [r7, #4]
10048356:	2240      	movs	r2, #64	@ 0x40
10048358:	2100      	movs	r1, #0
1004835a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
1004835c:	687b      	ldr	r3, [r7, #4]
1004835e:	0018      	movs	r0, r3
10048360:	f7ff f846 	bl	100473f0 <HAL_I2C_MasterTxCpltCallback>
}
10048364:	e02b      	b.n	100483be <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048366:	687b      	ldr	r3, [r7, #4]
10048368:	2241      	movs	r2, #65	@ 0x41
1004836a:	5c9b      	ldrb	r3, [r3, r2]
1004836c:	b2db      	uxtb	r3, r3
1004836e:	2b22      	cmp	r3, #34	@ 0x22
10048370:	d125      	bne.n	100483be <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
10048372:	687b      	ldr	r3, [r7, #4]
10048374:	2241      	movs	r2, #65	@ 0x41
10048376:	2120      	movs	r1, #32
10048378:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004837a:	687b      	ldr	r3, [r7, #4]
1004837c:	2200      	movs	r2, #0
1004837e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10048380:	687b      	ldr	r3, [r7, #4]
10048382:	2242      	movs	r2, #66	@ 0x42
10048384:	5c9b      	ldrb	r3, [r3, r2]
10048386:	b2db      	uxtb	r3, r3
10048388:	2b40      	cmp	r3, #64	@ 0x40
1004838a:	d10c      	bne.n	100483a6 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004838c:	687b      	ldr	r3, [r7, #4]
1004838e:	2242      	movs	r2, #66	@ 0x42
10048390:	2100      	movs	r1, #0
10048392:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10048394:	687b      	ldr	r3, [r7, #4]
10048396:	2240      	movs	r2, #64	@ 0x40
10048398:	2100      	movs	r1, #0
1004839a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
1004839c:	687b      	ldr	r3, [r7, #4]
1004839e:	0018      	movs	r0, r3
100483a0:	f7fb fa9c 	bl	100438dc <HAL_I2C_MemRxCpltCallback>
}
100483a4:	e00b      	b.n	100483be <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
100483a6:	687b      	ldr	r3, [r7, #4]
100483a8:	2242      	movs	r2, #66	@ 0x42
100483aa:	2100      	movs	r1, #0
100483ac:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
100483ae:	687b      	ldr	r3, [r7, #4]
100483b0:	2240      	movs	r2, #64	@ 0x40
100483b2:	2100      	movs	r1, #0
100483b4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
100483b6:	687b      	ldr	r3, [r7, #4]
100483b8:	0018      	movs	r0, r3
100483ba:	f7ff f821 	bl	10047400 <HAL_I2C_MasterRxCpltCallback>
}
100483be:	46c0      	nop			@ (mov r8, r8)
100483c0:	46bd      	mov	sp, r7
100483c2:	b006      	add	sp, #24
100483c4:	bd80      	pop	{r7, pc}
100483c6:	46c0      	nop			@ (mov r8, r8)
100483c8:	fe00e800 	.word	0xfe00e800
100483cc:	ffff0000 	.word	0xffff0000

100483d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100483d0:	b580      	push	{r7, lr}
100483d2:	b086      	sub	sp, #24
100483d4:	af00      	add	r7, sp, #0
100483d6:	6078      	str	r0, [r7, #4]
100483d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
100483da:	687b      	ldr	r3, [r7, #4]
100483dc:	681b      	ldr	r3, [r3, #0]
100483de:	681b      	ldr	r3, [r3, #0]
100483e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
100483e2:	683b      	ldr	r3, [r7, #0]
100483e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
100483e6:	687b      	ldr	r3, [r7, #4]
100483e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100483ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
100483ec:	200b      	movs	r0, #11
100483ee:	183b      	adds	r3, r7, r0
100483f0:	687a      	ldr	r2, [r7, #4]
100483f2:	2141      	movs	r1, #65	@ 0x41
100483f4:	5c52      	ldrb	r2, [r2, r1]
100483f6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100483f8:	687b      	ldr	r3, [r7, #4]
100483fa:	681b      	ldr	r3, [r3, #0]
100483fc:	2220      	movs	r2, #32
100483fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10048400:	183b      	adds	r3, r7, r0
10048402:	781b      	ldrb	r3, [r3, #0]
10048404:	2b21      	cmp	r3, #33	@ 0x21
10048406:	d003      	beq.n	10048410 <I2C_ITSlaveCplt+0x40>
10048408:	183b      	adds	r3, r7, r0
1004840a:	781b      	ldrb	r3, [r3, #0]
1004840c:	2b29      	cmp	r3, #41	@ 0x29
1004840e:	d109      	bne.n	10048424 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10048410:	4ab0      	ldr	r2, [pc, #704]	@ (100486d4 <I2C_ITSlaveCplt+0x304>)
10048412:	687b      	ldr	r3, [r7, #4]
10048414:	0011      	movs	r1, r2
10048416:	0018      	movs	r0, r3
10048418:	f000 fbf4 	bl	10048c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1004841c:	687b      	ldr	r3, [r7, #4]
1004841e:	2221      	movs	r2, #33	@ 0x21
10048420:	631a      	str	r2, [r3, #48]	@ 0x30
10048422:	e020      	b.n	10048466 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10048424:	220b      	movs	r2, #11
10048426:	18bb      	adds	r3, r7, r2
10048428:	781b      	ldrb	r3, [r3, #0]
1004842a:	2b22      	cmp	r3, #34	@ 0x22
1004842c:	d003      	beq.n	10048436 <I2C_ITSlaveCplt+0x66>
1004842e:	18bb      	adds	r3, r7, r2
10048430:	781b      	ldrb	r3, [r3, #0]
10048432:	2b2a      	cmp	r3, #42	@ 0x2a
10048434:	d109      	bne.n	1004844a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
10048436:	4aa8      	ldr	r2, [pc, #672]	@ (100486d8 <I2C_ITSlaveCplt+0x308>)
10048438:	687b      	ldr	r3, [r7, #4]
1004843a:	0011      	movs	r1, r2
1004843c:	0018      	movs	r0, r3
1004843e:	f000 fbe1 	bl	10048c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10048442:	687b      	ldr	r3, [r7, #4]
10048444:	2222      	movs	r2, #34	@ 0x22
10048446:	631a      	str	r2, [r3, #48]	@ 0x30
10048448:	e00d      	b.n	10048466 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
1004844a:	230b      	movs	r3, #11
1004844c:	18fb      	adds	r3, r7, r3
1004844e:	781b      	ldrb	r3, [r3, #0]
10048450:	2b28      	cmp	r3, #40	@ 0x28
10048452:	d108      	bne.n	10048466 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10048454:	4aa1      	ldr	r2, [pc, #644]	@ (100486dc <I2C_ITSlaveCplt+0x30c>)
10048456:	687b      	ldr	r3, [r7, #4]
10048458:	0011      	movs	r1, r2
1004845a:	0018      	movs	r0, r3
1004845c:	f000 fbd2 	bl	10048c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
10048460:	687b      	ldr	r3, [r7, #4]
10048462:	2200      	movs	r2, #0
10048464:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10048466:	687b      	ldr	r3, [r7, #4]
10048468:	681b      	ldr	r3, [r3, #0]
1004846a:	685a      	ldr	r2, [r3, #4]
1004846c:	687b      	ldr	r3, [r7, #4]
1004846e:	681b      	ldr	r3, [r3, #0]
10048470:	2180      	movs	r1, #128	@ 0x80
10048472:	0209      	lsls	r1, r1, #8
10048474:	430a      	orrs	r2, r1
10048476:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10048478:	687b      	ldr	r3, [r7, #4]
1004847a:	681b      	ldr	r3, [r3, #0]
1004847c:	685a      	ldr	r2, [r3, #4]
1004847e:	687b      	ldr	r3, [r7, #4]
10048480:	681b      	ldr	r3, [r3, #0]
10048482:	4997      	ldr	r1, [pc, #604]	@ (100486e0 <I2C_ITSlaveCplt+0x310>)
10048484:	400a      	ands	r2, r1
10048486:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10048488:	687b      	ldr	r3, [r7, #4]
1004848a:	0018      	movs	r0, r3
1004848c:	f000 fab5 	bl	100489fa <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10048490:	693b      	ldr	r3, [r7, #16]
10048492:	0b9b      	lsrs	r3, r3, #14
10048494:	001a      	movs	r2, r3
10048496:	2301      	movs	r3, #1
10048498:	4013      	ands	r3, r2
1004849a:	d013      	beq.n	100484c4 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004849c:	687b      	ldr	r3, [r7, #4]
1004849e:	681b      	ldr	r3, [r3, #0]
100484a0:	681a      	ldr	r2, [r3, #0]
100484a2:	687b      	ldr	r3, [r7, #4]
100484a4:	681b      	ldr	r3, [r3, #0]
100484a6:	498f      	ldr	r1, [pc, #572]	@ (100486e4 <I2C_ITSlaveCplt+0x314>)
100484a8:	400a      	ands	r2, r1
100484aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
100484ac:	687b      	ldr	r3, [r7, #4]
100484ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100484b0:	2b00      	cmp	r3, #0
100484b2:	d020      	beq.n	100484f6 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
100484b4:	687b      	ldr	r3, [r7, #4]
100484b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100484b8:	681b      	ldr	r3, [r3, #0]
100484ba:	685b      	ldr	r3, [r3, #4]
100484bc:	b29a      	uxth	r2, r3
100484be:	687b      	ldr	r3, [r7, #4]
100484c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
100484c2:	e018      	b.n	100484f6 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
100484c4:	693b      	ldr	r3, [r7, #16]
100484c6:	0bdb      	lsrs	r3, r3, #15
100484c8:	001a      	movs	r2, r3
100484ca:	2301      	movs	r3, #1
100484cc:	4013      	ands	r3, r2
100484ce:	d012      	beq.n	100484f6 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100484d0:	687b      	ldr	r3, [r7, #4]
100484d2:	681b      	ldr	r3, [r3, #0]
100484d4:	681a      	ldr	r2, [r3, #0]
100484d6:	687b      	ldr	r3, [r7, #4]
100484d8:	681b      	ldr	r3, [r3, #0]
100484da:	4983      	ldr	r1, [pc, #524]	@ (100486e8 <I2C_ITSlaveCplt+0x318>)
100484dc:	400a      	ands	r2, r1
100484de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
100484e0:	687b      	ldr	r3, [r7, #4]
100484e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100484e4:	2b00      	cmp	r3, #0
100484e6:	d006      	beq.n	100484f6 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
100484e8:	687b      	ldr	r3, [r7, #4]
100484ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100484ec:	681b      	ldr	r3, [r3, #0]
100484ee:	685b      	ldr	r3, [r3, #4]
100484f0:	b29a      	uxth	r2, r3
100484f2:	687b      	ldr	r3, [r7, #4]
100484f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
100484f6:	697b      	ldr	r3, [r7, #20]
100484f8:	089b      	lsrs	r3, r3, #2
100484fa:	001a      	movs	r2, r3
100484fc:	2301      	movs	r3, #1
100484fe:	4013      	ands	r3, r2
10048500:	d020      	beq.n	10048544 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10048502:	697b      	ldr	r3, [r7, #20]
10048504:	2204      	movs	r2, #4
10048506:	4393      	bics	r3, r2
10048508:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004850a:	687b      	ldr	r3, [r7, #4]
1004850c:	681b      	ldr	r3, [r3, #0]
1004850e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048510:	687b      	ldr	r3, [r7, #4]
10048512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048514:	b2d2      	uxtb	r2, r2
10048516:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10048518:	687b      	ldr	r3, [r7, #4]
1004851a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004851c:	1c5a      	adds	r2, r3, #1
1004851e:	687b      	ldr	r3, [r7, #4]
10048520:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10048522:	687b      	ldr	r3, [r7, #4]
10048524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048526:	2b00      	cmp	r3, #0
10048528:	d00c      	beq.n	10048544 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
1004852a:	687b      	ldr	r3, [r7, #4]
1004852c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004852e:	3b01      	subs	r3, #1
10048530:	b29a      	uxth	r2, r3
10048532:	687b      	ldr	r3, [r7, #4]
10048534:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10048536:	687b      	ldr	r3, [r7, #4]
10048538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004853a:	b29b      	uxth	r3, r3
1004853c:	3b01      	subs	r3, #1
1004853e:	b29a      	uxth	r2, r3
10048540:	687b      	ldr	r3, [r7, #4]
10048542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10048544:	687b      	ldr	r3, [r7, #4]
10048546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048548:	b29b      	uxth	r3, r3
1004854a:	2b00      	cmp	r3, #0
1004854c:	d005      	beq.n	1004855a <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004854e:	687b      	ldr	r3, [r7, #4]
10048550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048552:	2204      	movs	r2, #4
10048554:	431a      	orrs	r2, r3
10048556:	687b      	ldr	r3, [r7, #4]
10048558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004855a:	697b      	ldr	r3, [r7, #20]
1004855c:	091b      	lsrs	r3, r3, #4
1004855e:	001a      	movs	r2, r3
10048560:	2301      	movs	r3, #1
10048562:	4013      	ands	r3, r2
10048564:	d051      	beq.n	1004860a <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
10048566:	693b      	ldr	r3, [r7, #16]
10048568:	091b      	lsrs	r3, r3, #4
1004856a:	001a      	movs	r2, r3
1004856c:	2301      	movs	r3, #1
1004856e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048570:	d04b      	beq.n	1004860a <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10048572:	687b      	ldr	r3, [r7, #4]
10048574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048576:	b29b      	uxth	r3, r3
10048578:	2b00      	cmp	r3, #0
1004857a:	d12d      	bne.n	100485d8 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
1004857c:	687b      	ldr	r3, [r7, #4]
1004857e:	2241      	movs	r2, #65	@ 0x41
10048580:	5c9b      	ldrb	r3, [r3, r2]
10048582:	b2db      	uxtb	r3, r3
10048584:	2b28      	cmp	r3, #40	@ 0x28
10048586:	d10b      	bne.n	100485a0 <I2C_ITSlaveCplt+0x1d0>
10048588:	68fa      	ldr	r2, [r7, #12]
1004858a:	2380      	movs	r3, #128	@ 0x80
1004858c:	049b      	lsls	r3, r3, #18
1004858e:	429a      	cmp	r2, r3
10048590:	d106      	bne.n	100485a0 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10048592:	697a      	ldr	r2, [r7, #20]
10048594:	687b      	ldr	r3, [r7, #4]
10048596:	0011      	movs	r1, r2
10048598:	0018      	movs	r0, r3
1004859a:	f000 f8a9 	bl	100486f0 <I2C_ITListenCplt>
1004859e:	e034      	b.n	1004860a <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
100485a0:	687b      	ldr	r3, [r7, #4]
100485a2:	2241      	movs	r2, #65	@ 0x41
100485a4:	5c9b      	ldrb	r3, [r3, r2]
100485a6:	b2db      	uxtb	r3, r3
100485a8:	2b29      	cmp	r3, #41	@ 0x29
100485aa:	d110      	bne.n	100485ce <I2C_ITSlaveCplt+0x1fe>
100485ac:	68fb      	ldr	r3, [r7, #12]
100485ae:	4a4f      	ldr	r2, [pc, #316]	@ (100486ec <I2C_ITSlaveCplt+0x31c>)
100485b0:	4293      	cmp	r3, r2
100485b2:	d00c      	beq.n	100485ce <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100485b4:	687b      	ldr	r3, [r7, #4]
100485b6:	681b      	ldr	r3, [r3, #0]
100485b8:	2210      	movs	r2, #16
100485ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
100485bc:	687b      	ldr	r3, [r7, #4]
100485be:	0018      	movs	r0, r3
100485c0:	f000 fa1b 	bl	100489fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
100485c4:	687b      	ldr	r3, [r7, #4]
100485c6:	0018      	movs	r0, r3
100485c8:	f7ff fdca 	bl	10048160 <I2C_ITSlaveSeqCplt>
100485cc:	e01d      	b.n	1004860a <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100485ce:	687b      	ldr	r3, [r7, #4]
100485d0:	681b      	ldr	r3, [r3, #0]
100485d2:	2210      	movs	r2, #16
100485d4:	61da      	str	r2, [r3, #28]
100485d6:	e018      	b.n	1004860a <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100485d8:	687b      	ldr	r3, [r7, #4]
100485da:	681b      	ldr	r3, [r3, #0]
100485dc:	2210      	movs	r2, #16
100485de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100485e0:	687b      	ldr	r3, [r7, #4]
100485e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100485e4:	2204      	movs	r2, #4
100485e6:	431a      	orrs	r2, r3
100485e8:	687b      	ldr	r3, [r7, #4]
100485ea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100485ec:	68fb      	ldr	r3, [r7, #12]
100485ee:	2b00      	cmp	r3, #0
100485f0:	d004      	beq.n	100485fc <I2C_ITSlaveCplt+0x22c>
100485f2:	68fa      	ldr	r2, [r7, #12]
100485f4:	2380      	movs	r3, #128	@ 0x80
100485f6:	045b      	lsls	r3, r3, #17
100485f8:	429a      	cmp	r2, r3
100485fa:	d106      	bne.n	1004860a <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
100485fc:	687b      	ldr	r3, [r7, #4]
100485fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048600:	687b      	ldr	r3, [r7, #4]
10048602:	0011      	movs	r1, r2
10048604:	0018      	movs	r0, r3
10048606:	f000 f8cd 	bl	100487a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
1004860a:	687b      	ldr	r3, [r7, #4]
1004860c:	2242      	movs	r2, #66	@ 0x42
1004860e:	2100      	movs	r1, #0
10048610:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10048612:	687b      	ldr	r3, [r7, #4]
10048614:	2200      	movs	r2, #0
10048616:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
10048618:	687b      	ldr	r3, [r7, #4]
1004861a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004861c:	2b00      	cmp	r3, #0
1004861e:	d013      	beq.n	10048648 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10048620:	687b      	ldr	r3, [r7, #4]
10048622:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048624:	687b      	ldr	r3, [r7, #4]
10048626:	0011      	movs	r1, r2
10048628:	0018      	movs	r0, r3
1004862a:	f000 f8bb 	bl	100487a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
1004862e:	687b      	ldr	r3, [r7, #4]
10048630:	2241      	movs	r2, #65	@ 0x41
10048632:	5c9b      	ldrb	r3, [r3, r2]
10048634:	b2db      	uxtb	r3, r3
10048636:	2b28      	cmp	r3, #40	@ 0x28
10048638:	d147      	bne.n	100486ca <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
1004863a:	697a      	ldr	r2, [r7, #20]
1004863c:	687b      	ldr	r3, [r7, #4]
1004863e:	0011      	movs	r1, r2
10048640:	0018      	movs	r0, r3
10048642:	f000 f855 	bl	100486f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10048646:	e040      	b.n	100486ca <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10048648:	687b      	ldr	r3, [r7, #4]
1004864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004864c:	4a27      	ldr	r2, [pc, #156]	@ (100486ec <I2C_ITSlaveCplt+0x31c>)
1004864e:	4293      	cmp	r3, r2
10048650:	d016      	beq.n	10048680 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
10048652:	687b      	ldr	r3, [r7, #4]
10048654:	0018      	movs	r0, r3
10048656:	f7ff fd83 	bl	10048160 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004865a:	687b      	ldr	r3, [r7, #4]
1004865c:	4a23      	ldr	r2, [pc, #140]	@ (100486ec <I2C_ITSlaveCplt+0x31c>)
1004865e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10048660:	687b      	ldr	r3, [r7, #4]
10048662:	2241      	movs	r2, #65	@ 0x41
10048664:	2120      	movs	r1, #32
10048666:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10048668:	687b      	ldr	r3, [r7, #4]
1004866a:	2200      	movs	r2, #0
1004866c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004866e:	687b      	ldr	r3, [r7, #4]
10048670:	2240      	movs	r2, #64	@ 0x40
10048672:	2100      	movs	r1, #0
10048674:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
10048676:	687b      	ldr	r3, [r7, #4]
10048678:	0018      	movs	r0, r3
1004867a:	f7fe fee9 	bl	10047450 <HAL_I2C_ListenCpltCallback>
}
1004867e:	e024      	b.n	100486ca <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048680:	687b      	ldr	r3, [r7, #4]
10048682:	2241      	movs	r2, #65	@ 0x41
10048684:	5c9b      	ldrb	r3, [r3, r2]
10048686:	b2db      	uxtb	r3, r3
10048688:	2b22      	cmp	r3, #34	@ 0x22
1004868a:	d10f      	bne.n	100486ac <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
1004868c:	687b      	ldr	r3, [r7, #4]
1004868e:	2241      	movs	r2, #65	@ 0x41
10048690:	2120      	movs	r1, #32
10048692:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10048694:	687b      	ldr	r3, [r7, #4]
10048696:	2200      	movs	r2, #0
10048698:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004869a:	687b      	ldr	r3, [r7, #4]
1004869c:	2240      	movs	r2, #64	@ 0x40
1004869e:	2100      	movs	r1, #0
100486a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
100486a2:	687b      	ldr	r3, [r7, #4]
100486a4:	0018      	movs	r0, r3
100486a6:	f7fe febb 	bl	10047420 <HAL_I2C_SlaveRxCpltCallback>
}
100486aa:	e00e      	b.n	100486ca <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
100486ac:	687b      	ldr	r3, [r7, #4]
100486ae:	2241      	movs	r2, #65	@ 0x41
100486b0:	2120      	movs	r1, #32
100486b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
100486b4:	687b      	ldr	r3, [r7, #4]
100486b6:	2200      	movs	r2, #0
100486b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
100486ba:	687b      	ldr	r3, [r7, #4]
100486bc:	2240      	movs	r2, #64	@ 0x40
100486be:	2100      	movs	r1, #0
100486c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
100486c2:	687b      	ldr	r3, [r7, #4]
100486c4:	0018      	movs	r0, r3
100486c6:	f7fe fea3 	bl	10047410 <HAL_I2C_SlaveTxCpltCallback>
}
100486ca:	46c0      	nop			@ (mov r8, r8)
100486cc:	46bd      	mov	sp, r7
100486ce:	b006      	add	sp, #24
100486d0:	bd80      	pop	{r7, pc}
100486d2:	46c0      	nop			@ (mov r8, r8)
100486d4:	00008001 	.word	0x00008001
100486d8:	00008002 	.word	0x00008002
100486dc:	00008003 	.word	0x00008003
100486e0:	fe00e800 	.word	0xfe00e800
100486e4:	ffffbfff 	.word	0xffffbfff
100486e8:	ffff7fff 	.word	0xffff7fff
100486ec:	ffff0000 	.word	0xffff0000

100486f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100486f0:	b580      	push	{r7, lr}
100486f2:	b082      	sub	sp, #8
100486f4:	af00      	add	r7, sp, #0
100486f6:	6078      	str	r0, [r7, #4]
100486f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100486fa:	687b      	ldr	r3, [r7, #4]
100486fc:	4a27      	ldr	r2, [pc, #156]	@ (1004879c <I2C_ITListenCplt+0xac>)
100486fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
10048700:	687b      	ldr	r3, [r7, #4]
10048702:	2200      	movs	r2, #0
10048704:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
10048706:	687b      	ldr	r3, [r7, #4]
10048708:	2241      	movs	r2, #65	@ 0x41
1004870a:	2120      	movs	r1, #32
1004870c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004870e:	687b      	ldr	r3, [r7, #4]
10048710:	2242      	movs	r2, #66	@ 0x42
10048712:	2100      	movs	r1, #0
10048714:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10048716:	687b      	ldr	r3, [r7, #4]
10048718:	2200      	movs	r2, #0
1004871a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
1004871c:	683b      	ldr	r3, [r7, #0]
1004871e:	089b      	lsrs	r3, r3, #2
10048720:	001a      	movs	r2, r3
10048722:	2301      	movs	r3, #1
10048724:	4013      	ands	r3, r2
10048726:	d022      	beq.n	1004876e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10048728:	687b      	ldr	r3, [r7, #4]
1004872a:	681b      	ldr	r3, [r3, #0]
1004872c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004872e:	687b      	ldr	r3, [r7, #4]
10048730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048732:	b2d2      	uxtb	r2, r2
10048734:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10048736:	687b      	ldr	r3, [r7, #4]
10048738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004873a:	1c5a      	adds	r2, r3, #1
1004873c:	687b      	ldr	r3, [r7, #4]
1004873e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10048740:	687b      	ldr	r3, [r7, #4]
10048742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048744:	2b00      	cmp	r3, #0
10048746:	d012      	beq.n	1004876e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
10048748:	687b      	ldr	r3, [r7, #4]
1004874a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004874c:	3b01      	subs	r3, #1
1004874e:	b29a      	uxth	r2, r3
10048750:	687b      	ldr	r3, [r7, #4]
10048752:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10048754:	687b      	ldr	r3, [r7, #4]
10048756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048758:	b29b      	uxth	r3, r3
1004875a:	3b01      	subs	r3, #1
1004875c:	b29a      	uxth	r2, r3
1004875e:	687b      	ldr	r3, [r7, #4]
10048760:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048762:	687b      	ldr	r3, [r7, #4]
10048764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048766:	2204      	movs	r2, #4
10048768:	431a      	orrs	r2, r3
1004876a:	687b      	ldr	r3, [r7, #4]
1004876c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004876e:	4a0c      	ldr	r2, [pc, #48]	@ (100487a0 <I2C_ITListenCplt+0xb0>)
10048770:	687b      	ldr	r3, [r7, #4]
10048772:	0011      	movs	r1, r2
10048774:	0018      	movs	r0, r3
10048776:	f000 fa45 	bl	10048c04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004877a:	687b      	ldr	r3, [r7, #4]
1004877c:	681b      	ldr	r3, [r3, #0]
1004877e:	2210      	movs	r2, #16
10048780:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10048782:	687b      	ldr	r3, [r7, #4]
10048784:	2240      	movs	r2, #64	@ 0x40
10048786:	2100      	movs	r1, #0
10048788:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
1004878a:	687b      	ldr	r3, [r7, #4]
1004878c:	0018      	movs	r0, r3
1004878e:	f7fe fe5f 	bl	10047450 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10048792:	46c0      	nop			@ (mov r8, r8)
10048794:	46bd      	mov	sp, r7
10048796:	b002      	add	sp, #8
10048798:	bd80      	pop	{r7, pc}
1004879a:	46c0      	nop			@ (mov r8, r8)
1004879c:	ffff0000 	.word	0xffff0000
100487a0:	00008003 	.word	0x00008003

100487a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
100487a4:	b580      	push	{r7, lr}
100487a6:	b084      	sub	sp, #16
100487a8:	af00      	add	r7, sp, #0
100487aa:	6078      	str	r0, [r7, #4]
100487ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
100487ae:	200f      	movs	r0, #15
100487b0:	183b      	adds	r3, r7, r0
100487b2:	687a      	ldr	r2, [r7, #4]
100487b4:	2141      	movs	r1, #65	@ 0x41
100487b6:	5c52      	ldrb	r2, [r2, r1]
100487b8:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
100487ba:	687b      	ldr	r3, [r7, #4]
100487bc:	2242      	movs	r2, #66	@ 0x42
100487be:	2100      	movs	r1, #0
100487c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
100487c2:	687b      	ldr	r3, [r7, #4]
100487c4:	4a72      	ldr	r2, [pc, #456]	@ (10048990 <I2C_ITError+0x1ec>)
100487c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
100487c8:	687b      	ldr	r3, [r7, #4]
100487ca:	2200      	movs	r2, #0
100487cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
100487ce:	687b      	ldr	r3, [r7, #4]
100487d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100487d2:	683b      	ldr	r3, [r7, #0]
100487d4:	431a      	orrs	r2, r3
100487d6:	687b      	ldr	r3, [r7, #4]
100487d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
100487da:	183b      	adds	r3, r7, r0
100487dc:	781b      	ldrb	r3, [r3, #0]
100487de:	2b28      	cmp	r3, #40	@ 0x28
100487e0:	d007      	beq.n	100487f2 <I2C_ITError+0x4e>
100487e2:	183b      	adds	r3, r7, r0
100487e4:	781b      	ldrb	r3, [r3, #0]
100487e6:	2b29      	cmp	r3, #41	@ 0x29
100487e8:	d003      	beq.n	100487f2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
100487ea:	183b      	adds	r3, r7, r0
100487ec:	781b      	ldrb	r3, [r3, #0]
100487ee:	2b2a      	cmp	r3, #42	@ 0x2a
100487f0:	d10c      	bne.n	1004880c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100487f2:	687b      	ldr	r3, [r7, #4]
100487f4:	2103      	movs	r1, #3
100487f6:	0018      	movs	r0, r3
100487f8:	f000 fa04 	bl	10048c04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100487fc:	687b      	ldr	r3, [r7, #4]
100487fe:	2241      	movs	r2, #65	@ 0x41
10048800:	2128      	movs	r1, #40	@ 0x28
10048802:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
10048804:	687b      	ldr	r3, [r7, #4]
10048806:	4a63      	ldr	r2, [pc, #396]	@ (10048994 <I2C_ITError+0x1f0>)
10048808:	635a      	str	r2, [r3, #52]	@ 0x34
1004880a:	e032      	b.n	10048872 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004880c:	4a62      	ldr	r2, [pc, #392]	@ (10048998 <I2C_ITError+0x1f4>)
1004880e:	687b      	ldr	r3, [r7, #4]
10048810:	0011      	movs	r1, r2
10048812:	0018      	movs	r0, r3
10048814:	f000 f9f6 	bl	10048c04 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10048818:	687b      	ldr	r3, [r7, #4]
1004881a:	0018      	movs	r0, r3
1004881c:	f000 f8ed 	bl	100489fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
10048820:	687b      	ldr	r3, [r7, #4]
10048822:	2241      	movs	r2, #65	@ 0x41
10048824:	5c9b      	ldrb	r3, [r3, r2]
10048826:	b2db      	uxtb	r3, r3
10048828:	2b60      	cmp	r3, #96	@ 0x60
1004882a:	d01f      	beq.n	1004886c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
1004882c:	687b      	ldr	r3, [r7, #4]
1004882e:	2241      	movs	r2, #65	@ 0x41
10048830:	2120      	movs	r1, #32
10048832:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
10048834:	687b      	ldr	r3, [r7, #4]
10048836:	681b      	ldr	r3, [r3, #0]
10048838:	699b      	ldr	r3, [r3, #24]
1004883a:	2220      	movs	r2, #32
1004883c:	4013      	ands	r3, r2
1004883e:	2b20      	cmp	r3, #32
10048840:	d114      	bne.n	1004886c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
10048842:	687b      	ldr	r3, [r7, #4]
10048844:	681b      	ldr	r3, [r3, #0]
10048846:	699b      	ldr	r3, [r3, #24]
10048848:	2210      	movs	r2, #16
1004884a:	4013      	ands	r3, r2
1004884c:	2b10      	cmp	r3, #16
1004884e:	d109      	bne.n	10048864 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048850:	687b      	ldr	r3, [r7, #4]
10048852:	681b      	ldr	r3, [r3, #0]
10048854:	2210      	movs	r2, #16
10048856:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048858:	687b      	ldr	r3, [r7, #4]
1004885a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004885c:	2204      	movs	r2, #4
1004885e:	431a      	orrs	r2, r3
10048860:	687b      	ldr	r3, [r7, #4]
10048862:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10048864:	687b      	ldr	r3, [r7, #4]
10048866:	681b      	ldr	r3, [r3, #0]
10048868:	2220      	movs	r2, #32
1004886a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
1004886c:	687b      	ldr	r3, [r7, #4]
1004886e:	2200      	movs	r2, #0
10048870:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
10048872:	687b      	ldr	r3, [r7, #4]
10048874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10048876:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
10048878:	687b      	ldr	r3, [r7, #4]
1004887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004887c:	2b00      	cmp	r3, #0
1004887e:	d03b      	beq.n	100488f8 <I2C_ITError+0x154>
10048880:	68bb      	ldr	r3, [r7, #8]
10048882:	2b11      	cmp	r3, #17
10048884:	d002      	beq.n	1004888c <I2C_ITError+0xe8>
10048886:	68bb      	ldr	r3, [r7, #8]
10048888:	2b21      	cmp	r3, #33	@ 0x21
1004888a:	d135      	bne.n	100488f8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
1004888c:	687b      	ldr	r3, [r7, #4]
1004888e:	681b      	ldr	r3, [r3, #0]
10048890:	681a      	ldr	r2, [r3, #0]
10048892:	2380      	movs	r3, #128	@ 0x80
10048894:	01db      	lsls	r3, r3, #7
10048896:	401a      	ands	r2, r3
10048898:	2380      	movs	r3, #128	@ 0x80
1004889a:	01db      	lsls	r3, r3, #7
1004889c:	429a      	cmp	r2, r3
1004889e:	d107      	bne.n	100488b0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
100488a0:	687b      	ldr	r3, [r7, #4]
100488a2:	681b      	ldr	r3, [r3, #0]
100488a4:	681a      	ldr	r2, [r3, #0]
100488a6:	687b      	ldr	r3, [r7, #4]
100488a8:	681b      	ldr	r3, [r3, #0]
100488aa:	493c      	ldr	r1, [pc, #240]	@ (1004899c <I2C_ITError+0x1f8>)
100488ac:	400a      	ands	r2, r1
100488ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100488b0:	687b      	ldr	r3, [r7, #4]
100488b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100488b4:	0018      	movs	r0, r3
100488b6:	f7fd fec6 	bl	10046646 <HAL_DMA_GetState>
100488ba:	0003      	movs	r3, r0
100488bc:	2b01      	cmp	r3, #1
100488be:	d016      	beq.n	100488ee <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
100488c0:	687b      	ldr	r3, [r7, #4]
100488c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100488c4:	4a36      	ldr	r2, [pc, #216]	@ (100489a0 <I2C_ITError+0x1fc>)
100488c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
100488c8:	687b      	ldr	r3, [r7, #4]
100488ca:	2240      	movs	r2, #64	@ 0x40
100488cc:	2100      	movs	r1, #0
100488ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
100488d0:	687b      	ldr	r3, [r7, #4]
100488d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100488d4:	0018      	movs	r0, r3
100488d6:	f7fd fe6f 	bl	100465b8 <HAL_DMA_Abort_IT>
100488da:	1e03      	subs	r3, r0, #0
100488dc:	d051      	beq.n	10048982 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
100488de:	687b      	ldr	r3, [r7, #4]
100488e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100488e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100488e4:	687b      	ldr	r3, [r7, #4]
100488e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100488e8:	0018      	movs	r0, r3
100488ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100488ec:	e049      	b.n	10048982 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
100488ee:	687b      	ldr	r3, [r7, #4]
100488f0:	0018      	movs	r0, r3
100488f2:	f000 f859 	bl	100489a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100488f6:	e044      	b.n	10048982 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
100488f8:	687b      	ldr	r3, [r7, #4]
100488fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100488fc:	2b00      	cmp	r3, #0
100488fe:	d03b      	beq.n	10048978 <I2C_ITError+0x1d4>
10048900:	68bb      	ldr	r3, [r7, #8]
10048902:	2b12      	cmp	r3, #18
10048904:	d002      	beq.n	1004890c <I2C_ITError+0x168>
10048906:	68bb      	ldr	r3, [r7, #8]
10048908:	2b22      	cmp	r3, #34	@ 0x22
1004890a:	d135      	bne.n	10048978 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
1004890c:	687b      	ldr	r3, [r7, #4]
1004890e:	681b      	ldr	r3, [r3, #0]
10048910:	681a      	ldr	r2, [r3, #0]
10048912:	2380      	movs	r3, #128	@ 0x80
10048914:	021b      	lsls	r3, r3, #8
10048916:	401a      	ands	r2, r3
10048918:	2380      	movs	r3, #128	@ 0x80
1004891a:	021b      	lsls	r3, r3, #8
1004891c:	429a      	cmp	r2, r3
1004891e:	d107      	bne.n	10048930 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10048920:	687b      	ldr	r3, [r7, #4]
10048922:	681b      	ldr	r3, [r3, #0]
10048924:	681a      	ldr	r2, [r3, #0]
10048926:	687b      	ldr	r3, [r7, #4]
10048928:	681b      	ldr	r3, [r3, #0]
1004892a:	491e      	ldr	r1, [pc, #120]	@ (100489a4 <I2C_ITError+0x200>)
1004892c:	400a      	ands	r2, r1
1004892e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10048930:	687b      	ldr	r3, [r7, #4]
10048932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048934:	0018      	movs	r0, r3
10048936:	f7fd fe86 	bl	10046646 <HAL_DMA_GetState>
1004893a:	0003      	movs	r3, r0
1004893c:	2b01      	cmp	r3, #1
1004893e:	d016      	beq.n	1004896e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
10048940:	687b      	ldr	r3, [r7, #4]
10048942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048944:	4a16      	ldr	r2, [pc, #88]	@ (100489a0 <I2C_ITError+0x1fc>)
10048946:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10048948:	687b      	ldr	r3, [r7, #4]
1004894a:	2240      	movs	r2, #64	@ 0x40
1004894c:	2100      	movs	r1, #0
1004894e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10048950:	687b      	ldr	r3, [r7, #4]
10048952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048954:	0018      	movs	r0, r3
10048956:	f7fd fe2f 	bl	100465b8 <HAL_DMA_Abort_IT>
1004895a:	1e03      	subs	r3, r0, #0
1004895c:	d013      	beq.n	10048986 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
1004895e:	687b      	ldr	r3, [r7, #4]
10048960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10048964:	687b      	ldr	r3, [r7, #4]
10048966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048968:	0018      	movs	r0, r3
1004896a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004896c:	e00b      	b.n	10048986 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004896e:	687b      	ldr	r3, [r7, #4]
10048970:	0018      	movs	r0, r3
10048972:	f000 f819 	bl	100489a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10048976:	e006      	b.n	10048986 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
10048978:	687b      	ldr	r3, [r7, #4]
1004897a:	0018      	movs	r0, r3
1004897c:	f000 f814 	bl	100489a8 <I2C_TreatErrorCallback>
  }
}
10048980:	e002      	b.n	10048988 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10048982:	46c0      	nop			@ (mov r8, r8)
10048984:	e000      	b.n	10048988 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10048986:	46c0      	nop			@ (mov r8, r8)
}
10048988:	46c0      	nop			@ (mov r8, r8)
1004898a:	46bd      	mov	sp, r7
1004898c:	b004      	add	sp, #16
1004898e:	bd80      	pop	{r7, pc}
10048990:	ffff0000 	.word	0xffff0000
10048994:	100476e5 	.word	0x100476e5
10048998:	00008003 	.word	0x00008003
1004899c:	ffffbfff 	.word	0xffffbfff
100489a0:	10048a3f 	.word	0x10048a3f
100489a4:	ffff7fff 	.word	0xffff7fff

100489a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
100489a8:	b580      	push	{r7, lr}
100489aa:	b082      	sub	sp, #8
100489ac:	af00      	add	r7, sp, #0
100489ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
100489b0:	687b      	ldr	r3, [r7, #4]
100489b2:	2241      	movs	r2, #65	@ 0x41
100489b4:	5c9b      	ldrb	r3, [r3, r2]
100489b6:	b2db      	uxtb	r3, r3
100489b8:	2b60      	cmp	r3, #96	@ 0x60
100489ba:	d10f      	bne.n	100489dc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
100489bc:	687b      	ldr	r3, [r7, #4]
100489be:	2241      	movs	r2, #65	@ 0x41
100489c0:	2120      	movs	r1, #32
100489c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
100489c4:	687b      	ldr	r3, [r7, #4]
100489c6:	2200      	movs	r2, #0
100489c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100489ca:	687b      	ldr	r3, [r7, #4]
100489cc:	2240      	movs	r2, #64	@ 0x40
100489ce:	2100      	movs	r1, #0
100489d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
100489d2:	687b      	ldr	r3, [r7, #4]
100489d4:	0018      	movs	r0, r3
100489d6:	f7fe fd43 	bl	10047460 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
100489da:	e00a      	b.n	100489f2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
100489dc:	687b      	ldr	r3, [r7, #4]
100489de:	2200      	movs	r2, #0
100489e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
100489e2:	687b      	ldr	r3, [r7, #4]
100489e4:	2240      	movs	r2, #64	@ 0x40
100489e6:	2100      	movs	r1, #0
100489e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
100489ea:	687b      	ldr	r3, [r7, #4]
100489ec:	0018      	movs	r0, r3
100489ee:	f7fa ffd9 	bl	100439a4 <HAL_I2C_ErrorCallback>
}
100489f2:	46c0      	nop			@ (mov r8, r8)
100489f4:	46bd      	mov	sp, r7
100489f6:	b002      	add	sp, #8
100489f8:	bd80      	pop	{r7, pc}

100489fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
100489fa:	b580      	push	{r7, lr}
100489fc:	b082      	sub	sp, #8
100489fe:	af00      	add	r7, sp, #0
10048a00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10048a02:	687b      	ldr	r3, [r7, #4]
10048a04:	681b      	ldr	r3, [r3, #0]
10048a06:	699b      	ldr	r3, [r3, #24]
10048a08:	2202      	movs	r2, #2
10048a0a:	4013      	ands	r3, r2
10048a0c:	2b02      	cmp	r3, #2
10048a0e:	d103      	bne.n	10048a18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10048a10:	687b      	ldr	r3, [r7, #4]
10048a12:	681b      	ldr	r3, [r3, #0]
10048a14:	2200      	movs	r2, #0
10048a16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10048a18:	687b      	ldr	r3, [r7, #4]
10048a1a:	681b      	ldr	r3, [r3, #0]
10048a1c:	699b      	ldr	r3, [r3, #24]
10048a1e:	2201      	movs	r2, #1
10048a20:	4013      	ands	r3, r2
10048a22:	2b01      	cmp	r3, #1
10048a24:	d007      	beq.n	10048a36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10048a26:	687b      	ldr	r3, [r7, #4]
10048a28:	681b      	ldr	r3, [r3, #0]
10048a2a:	699a      	ldr	r2, [r3, #24]
10048a2c:	687b      	ldr	r3, [r7, #4]
10048a2e:	681b      	ldr	r3, [r3, #0]
10048a30:	2101      	movs	r1, #1
10048a32:	430a      	orrs	r2, r1
10048a34:	619a      	str	r2, [r3, #24]
  }
}
10048a36:	46c0      	nop			@ (mov r8, r8)
10048a38:	46bd      	mov	sp, r7
10048a3a:	b002      	add	sp, #8
10048a3c:	bd80      	pop	{r7, pc}

10048a3e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
10048a3e:	b580      	push	{r7, lr}
10048a40:	b084      	sub	sp, #16
10048a42:	af00      	add	r7, sp, #0
10048a44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
10048a46:	687b      	ldr	r3, [r7, #4]
10048a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048a4a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
10048a4c:	68fb      	ldr	r3, [r7, #12]
10048a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10048a50:	2b00      	cmp	r3, #0
10048a52:	d003      	beq.n	10048a5c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10048a54:	68fb      	ldr	r3, [r7, #12]
10048a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10048a58:	2200      	movs	r2, #0
10048a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
10048a5c:	68fb      	ldr	r3, [r7, #12]
10048a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048a60:	2b00      	cmp	r3, #0
10048a62:	d003      	beq.n	10048a6c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10048a64:	68fb      	ldr	r3, [r7, #12]
10048a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048a68:	2200      	movs	r2, #0
10048a6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
10048a6c:	68fb      	ldr	r3, [r7, #12]
10048a6e:	0018      	movs	r0, r3
10048a70:	f7ff ff9a 	bl	100489a8 <I2C_TreatErrorCallback>
}
10048a74:	46c0      	nop			@ (mov r8, r8)
10048a76:	46bd      	mov	sp, r7
10048a78:	b004      	add	sp, #16
10048a7a:	bd80      	pop	{r7, pc}

10048a7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10048a7c:	b590      	push	{r4, r7, lr}
10048a7e:	b087      	sub	sp, #28
10048a80:	af00      	add	r7, sp, #0
10048a82:	60f8      	str	r0, [r7, #12]
10048a84:	0008      	movs	r0, r1
10048a86:	0011      	movs	r1, r2
10048a88:	607b      	str	r3, [r7, #4]
10048a8a:	240a      	movs	r4, #10
10048a8c:	193b      	adds	r3, r7, r4
10048a8e:	1c02      	adds	r2, r0, #0
10048a90:	801a      	strh	r2, [r3, #0]
10048a92:	2009      	movs	r0, #9
10048a94:	183b      	adds	r3, r7, r0
10048a96:	1c0a      	adds	r2, r1, #0
10048a98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10048a9a:	193b      	adds	r3, r7, r4
10048a9c:	881b      	ldrh	r3, [r3, #0]
10048a9e:	059b      	lsls	r3, r3, #22
10048aa0:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10048aa2:	183b      	adds	r3, r7, r0
10048aa4:	781b      	ldrb	r3, [r3, #0]
10048aa6:	0419      	lsls	r1, r3, #16
10048aa8:	23ff      	movs	r3, #255	@ 0xff
10048aaa:	041b      	lsls	r3, r3, #16
10048aac:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10048aae:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10048ab0:	687b      	ldr	r3, [r7, #4]
10048ab2:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10048ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048ab6:	4313      	orrs	r3, r2
10048ab8:	005b      	lsls	r3, r3, #1
10048aba:	085b      	lsrs	r3, r3, #1
10048abc:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10048abe:	68fb      	ldr	r3, [r7, #12]
10048ac0:	681b      	ldr	r3, [r3, #0]
10048ac2:	685b      	ldr	r3, [r3, #4]
10048ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048ac6:	0d51      	lsrs	r1, r2, #21
10048ac8:	2280      	movs	r2, #128	@ 0x80
10048aca:	00d2      	lsls	r2, r2, #3
10048acc:	400a      	ands	r2, r1
10048ace:	4907      	ldr	r1, [pc, #28]	@ (10048aec <I2C_TransferConfig+0x70>)
10048ad0:	430a      	orrs	r2, r1
10048ad2:	43d2      	mvns	r2, r2
10048ad4:	401a      	ands	r2, r3
10048ad6:	0011      	movs	r1, r2
10048ad8:	68fb      	ldr	r3, [r7, #12]
10048ada:	681b      	ldr	r3, [r3, #0]
10048adc:	697a      	ldr	r2, [r7, #20]
10048ade:	430a      	orrs	r2, r1
10048ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10048ae2:	46c0      	nop			@ (mov r8, r8)
10048ae4:	46bd      	mov	sp, r7
10048ae6:	b007      	add	sp, #28
10048ae8:	bd90      	pop	{r4, r7, pc}
10048aea:	46c0      	nop			@ (mov r8, r8)
10048aec:	03ff63ff 	.word	0x03ff63ff

10048af0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
10048af0:	b580      	push	{r7, lr}
10048af2:	b084      	sub	sp, #16
10048af4:	af00      	add	r7, sp, #0
10048af6:	6078      	str	r0, [r7, #4]
10048af8:	000a      	movs	r2, r1
10048afa:	1cbb      	adds	r3, r7, #2
10048afc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
10048afe:	2300      	movs	r3, #0
10048b00:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
10048b02:	687b      	ldr	r3, [r7, #4]
10048b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048b06:	4b3c      	ldr	r3, [pc, #240]	@ (10048bf8 <I2C_Enable_IRQ+0x108>)
10048b08:	429a      	cmp	r2, r3
10048b0a:	d035      	beq.n	10048b78 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
10048b0c:	687b      	ldr	r3, [r7, #4]
10048b0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
10048b10:	4b3a      	ldr	r3, [pc, #232]	@ (10048bfc <I2C_Enable_IRQ+0x10c>)
10048b12:	429a      	cmp	r2, r3
10048b14:	d030      	beq.n	10048b78 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
10048b16:	687b      	ldr	r3, [r7, #4]
10048b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
10048b1a:	4b39      	ldr	r3, [pc, #228]	@ (10048c00 <I2C_Enable_IRQ+0x110>)
10048b1c:	429a      	cmp	r2, r3
10048b1e:	d02b      	beq.n	10048b78 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10048b20:	1cbb      	adds	r3, r7, #2
10048b22:	2200      	movs	r2, #0
10048b24:	5e9b      	ldrsh	r3, [r3, r2]
10048b26:	2b00      	cmp	r3, #0
10048b28:	da03      	bge.n	10048b32 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10048b2a:	68fb      	ldr	r3, [r7, #12]
10048b2c:	22b8      	movs	r2, #184	@ 0xb8
10048b2e:	4313      	orrs	r3, r2
10048b30:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10048b32:	1cbb      	adds	r3, r7, #2
10048b34:	881b      	ldrh	r3, [r3, #0]
10048b36:	2201      	movs	r2, #1
10048b38:	4013      	ands	r3, r2
10048b3a:	d003      	beq.n	10048b44 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
10048b3c:	68fb      	ldr	r3, [r7, #12]
10048b3e:	22f2      	movs	r2, #242	@ 0xf2
10048b40:	4313      	orrs	r3, r2
10048b42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10048b44:	1cbb      	adds	r3, r7, #2
10048b46:	881b      	ldrh	r3, [r3, #0]
10048b48:	2202      	movs	r2, #2
10048b4a:	4013      	ands	r3, r2
10048b4c:	d003      	beq.n	10048b56 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
10048b4e:	68fb      	ldr	r3, [r7, #12]
10048b50:	22f4      	movs	r2, #244	@ 0xf4
10048b52:	4313      	orrs	r3, r2
10048b54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
10048b56:	1cbb      	adds	r3, r7, #2
10048b58:	881b      	ldrh	r3, [r3, #0]
10048b5a:	2b10      	cmp	r3, #16
10048b5c:	d103      	bne.n	10048b66 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10048b5e:	68fb      	ldr	r3, [r7, #12]
10048b60:	2290      	movs	r2, #144	@ 0x90
10048b62:	4313      	orrs	r3, r2
10048b64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
10048b66:	1cbb      	adds	r3, r7, #2
10048b68:	881b      	ldrh	r3, [r3, #0]
10048b6a:	2b20      	cmp	r3, #32
10048b6c:	d137      	bne.n	10048bde <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
10048b6e:	68fb      	ldr	r3, [r7, #12]
10048b70:	2220      	movs	r2, #32
10048b72:	4313      	orrs	r3, r2
10048b74:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
10048b76:	e032      	b.n	10048bde <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10048b78:	1cbb      	adds	r3, r7, #2
10048b7a:	2200      	movs	r2, #0
10048b7c:	5e9b      	ldrsh	r3, [r3, r2]
10048b7e:	2b00      	cmp	r3, #0
10048b80:	da03      	bge.n	10048b8a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10048b82:	68fb      	ldr	r3, [r7, #12]
10048b84:	22b8      	movs	r2, #184	@ 0xb8
10048b86:	4313      	orrs	r3, r2
10048b88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10048b8a:	1cbb      	adds	r3, r7, #2
10048b8c:	881b      	ldrh	r3, [r3, #0]
10048b8e:	2201      	movs	r2, #1
10048b90:	4013      	ands	r3, r2
10048b92:	d003      	beq.n	10048b9c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
10048b94:	68fb      	ldr	r3, [r7, #12]
10048b96:	22f2      	movs	r2, #242	@ 0xf2
10048b98:	4313      	orrs	r3, r2
10048b9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10048b9c:	1cbb      	adds	r3, r7, #2
10048b9e:	881b      	ldrh	r3, [r3, #0]
10048ba0:	2202      	movs	r2, #2
10048ba2:	4013      	ands	r3, r2
10048ba4:	d003      	beq.n	10048bae <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
10048ba6:	68fb      	ldr	r3, [r7, #12]
10048ba8:	22f4      	movs	r2, #244	@ 0xf4
10048baa:	4313      	orrs	r3, r2
10048bac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
10048bae:	1cbb      	adds	r3, r7, #2
10048bb0:	881b      	ldrh	r3, [r3, #0]
10048bb2:	2b10      	cmp	r3, #16
10048bb4:	d103      	bne.n	10048bbe <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10048bb6:	68fb      	ldr	r3, [r7, #12]
10048bb8:	2290      	movs	r2, #144	@ 0x90
10048bba:	4313      	orrs	r3, r2
10048bbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
10048bbe:	1cbb      	adds	r3, r7, #2
10048bc0:	881b      	ldrh	r3, [r3, #0]
10048bc2:	2b20      	cmp	r3, #32
10048bc4:	d103      	bne.n	10048bce <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
10048bc6:	68fb      	ldr	r3, [r7, #12]
10048bc8:	2260      	movs	r2, #96	@ 0x60
10048bca:	4313      	orrs	r3, r2
10048bcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
10048bce:	1cbb      	adds	r3, r7, #2
10048bd0:	881b      	ldrh	r3, [r3, #0]
10048bd2:	2b40      	cmp	r3, #64	@ 0x40
10048bd4:	d103      	bne.n	10048bde <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
10048bd6:	68fb      	ldr	r3, [r7, #12]
10048bd8:	2240      	movs	r2, #64	@ 0x40
10048bda:	4313      	orrs	r3, r2
10048bdc:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
10048bde:	687b      	ldr	r3, [r7, #4]
10048be0:	681b      	ldr	r3, [r3, #0]
10048be2:	6819      	ldr	r1, [r3, #0]
10048be4:	687b      	ldr	r3, [r7, #4]
10048be6:	681b      	ldr	r3, [r3, #0]
10048be8:	68fa      	ldr	r2, [r7, #12]
10048bea:	430a      	orrs	r2, r1
10048bec:	601a      	str	r2, [r3, #0]
}
10048bee:	46c0      	nop			@ (mov r8, r8)
10048bf0:	46bd      	mov	sp, r7
10048bf2:	b004      	add	sp, #16
10048bf4:	bd80      	pop	{r7, pc}
10048bf6:	46c0      	nop			@ (mov r8, r8)
10048bf8:	1004790d 	.word	0x1004790d
10048bfc:	10047da5 	.word	0x10047da5
10048c00:	10047b25 	.word	0x10047b25

10048c04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
10048c04:	b580      	push	{r7, lr}
10048c06:	b084      	sub	sp, #16
10048c08:	af00      	add	r7, sp, #0
10048c0a:	6078      	str	r0, [r7, #4]
10048c0c:	000a      	movs	r2, r1
10048c0e:	1cbb      	adds	r3, r7, #2
10048c10:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
10048c12:	2300      	movs	r3, #0
10048c14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10048c16:	1cbb      	adds	r3, r7, #2
10048c18:	881b      	ldrh	r3, [r3, #0]
10048c1a:	2201      	movs	r2, #1
10048c1c:	4013      	ands	r3, r2
10048c1e:	d010      	beq.n	10048c42 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
10048c20:	68fb      	ldr	r3, [r7, #12]
10048c22:	2242      	movs	r2, #66	@ 0x42
10048c24:	4313      	orrs	r3, r2
10048c26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10048c28:	687b      	ldr	r3, [r7, #4]
10048c2a:	2241      	movs	r2, #65	@ 0x41
10048c2c:	5c9b      	ldrb	r3, [r3, r2]
10048c2e:	b2db      	uxtb	r3, r3
10048c30:	001a      	movs	r2, r3
10048c32:	2328      	movs	r3, #40	@ 0x28
10048c34:	4013      	ands	r3, r2
10048c36:	2b28      	cmp	r3, #40	@ 0x28
10048c38:	d003      	beq.n	10048c42 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10048c3a:	68fb      	ldr	r3, [r7, #12]
10048c3c:	22b0      	movs	r2, #176	@ 0xb0
10048c3e:	4313      	orrs	r3, r2
10048c40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10048c42:	1cbb      	adds	r3, r7, #2
10048c44:	881b      	ldrh	r3, [r3, #0]
10048c46:	2202      	movs	r2, #2
10048c48:	4013      	ands	r3, r2
10048c4a:	d010      	beq.n	10048c6e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
10048c4c:	68fb      	ldr	r3, [r7, #12]
10048c4e:	2244      	movs	r2, #68	@ 0x44
10048c50:	4313      	orrs	r3, r2
10048c52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10048c54:	687b      	ldr	r3, [r7, #4]
10048c56:	2241      	movs	r2, #65	@ 0x41
10048c58:	5c9b      	ldrb	r3, [r3, r2]
10048c5a:	b2db      	uxtb	r3, r3
10048c5c:	001a      	movs	r2, r3
10048c5e:	2328      	movs	r3, #40	@ 0x28
10048c60:	4013      	ands	r3, r2
10048c62:	2b28      	cmp	r3, #40	@ 0x28
10048c64:	d003      	beq.n	10048c6e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10048c66:	68fb      	ldr	r3, [r7, #12]
10048c68:	22b0      	movs	r2, #176	@ 0xb0
10048c6a:	4313      	orrs	r3, r2
10048c6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10048c6e:	1cbb      	adds	r3, r7, #2
10048c70:	2200      	movs	r2, #0
10048c72:	5e9b      	ldrsh	r3, [r3, r2]
10048c74:	2b00      	cmp	r3, #0
10048c76:	da03      	bge.n	10048c80 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10048c78:	68fb      	ldr	r3, [r7, #12]
10048c7a:	22b8      	movs	r2, #184	@ 0xb8
10048c7c:	4313      	orrs	r3, r2
10048c7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
10048c80:	1cbb      	adds	r3, r7, #2
10048c82:	881b      	ldrh	r3, [r3, #0]
10048c84:	2b10      	cmp	r3, #16
10048c86:	d103      	bne.n	10048c90 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10048c88:	68fb      	ldr	r3, [r7, #12]
10048c8a:	2290      	movs	r2, #144	@ 0x90
10048c8c:	4313      	orrs	r3, r2
10048c8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
10048c90:	1cbb      	adds	r3, r7, #2
10048c92:	881b      	ldrh	r3, [r3, #0]
10048c94:	2b20      	cmp	r3, #32
10048c96:	d103      	bne.n	10048ca0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
10048c98:	68fb      	ldr	r3, [r7, #12]
10048c9a:	2220      	movs	r2, #32
10048c9c:	4313      	orrs	r3, r2
10048c9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
10048ca0:	1cbb      	adds	r3, r7, #2
10048ca2:	881b      	ldrh	r3, [r3, #0]
10048ca4:	2b40      	cmp	r3, #64	@ 0x40
10048ca6:	d103      	bne.n	10048cb0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
10048ca8:	68fb      	ldr	r3, [r7, #12]
10048caa:	2240      	movs	r2, #64	@ 0x40
10048cac:	4313      	orrs	r3, r2
10048cae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
10048cb0:	687b      	ldr	r3, [r7, #4]
10048cb2:	681b      	ldr	r3, [r3, #0]
10048cb4:	681a      	ldr	r2, [r3, #0]
10048cb6:	68fb      	ldr	r3, [r7, #12]
10048cb8:	43d9      	mvns	r1, r3
10048cba:	687b      	ldr	r3, [r7, #4]
10048cbc:	681b      	ldr	r3, [r3, #0]
10048cbe:	400a      	ands	r2, r1
10048cc0:	601a      	str	r2, [r3, #0]
}
10048cc2:	46c0      	nop			@ (mov r8, r8)
10048cc4:	46bd      	mov	sp, r7
10048cc6:	b004      	add	sp, #16
10048cc8:	bd80      	pop	{r7, pc}
	...

10048ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10048ccc:	b580      	push	{r7, lr}
10048cce:	b082      	sub	sp, #8
10048cd0:	af00      	add	r7, sp, #0
10048cd2:	6078      	str	r0, [r7, #4]
10048cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10048cd6:	687b      	ldr	r3, [r7, #4]
10048cd8:	2241      	movs	r2, #65	@ 0x41
10048cda:	5c9b      	ldrb	r3, [r3, r2]
10048cdc:	b2db      	uxtb	r3, r3
10048cde:	2b20      	cmp	r3, #32
10048ce0:	d138      	bne.n	10048d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10048ce2:	687b      	ldr	r3, [r7, #4]
10048ce4:	2240      	movs	r2, #64	@ 0x40
10048ce6:	5c9b      	ldrb	r3, [r3, r2]
10048ce8:	2b01      	cmp	r3, #1
10048cea:	d101      	bne.n	10048cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
10048cec:	2302      	movs	r3, #2
10048cee:	e032      	b.n	10048d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
10048cf0:	687b      	ldr	r3, [r7, #4]
10048cf2:	2240      	movs	r2, #64	@ 0x40
10048cf4:	2101      	movs	r1, #1
10048cf6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10048cf8:	687b      	ldr	r3, [r7, #4]
10048cfa:	2241      	movs	r2, #65	@ 0x41
10048cfc:	2124      	movs	r1, #36	@ 0x24
10048cfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10048d00:	687b      	ldr	r3, [r7, #4]
10048d02:	681b      	ldr	r3, [r3, #0]
10048d04:	681a      	ldr	r2, [r3, #0]
10048d06:	687b      	ldr	r3, [r7, #4]
10048d08:	681b      	ldr	r3, [r3, #0]
10048d0a:	2101      	movs	r1, #1
10048d0c:	438a      	bics	r2, r1
10048d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
10048d10:	687b      	ldr	r3, [r7, #4]
10048d12:	681b      	ldr	r3, [r3, #0]
10048d14:	681a      	ldr	r2, [r3, #0]
10048d16:	687b      	ldr	r3, [r7, #4]
10048d18:	681b      	ldr	r3, [r3, #0]
10048d1a:	4911      	ldr	r1, [pc, #68]	@ (10048d60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
10048d1c:	400a      	ands	r2, r1
10048d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
10048d20:	687b      	ldr	r3, [r7, #4]
10048d22:	681b      	ldr	r3, [r3, #0]
10048d24:	6819      	ldr	r1, [r3, #0]
10048d26:	687b      	ldr	r3, [r7, #4]
10048d28:	681b      	ldr	r3, [r3, #0]
10048d2a:	683a      	ldr	r2, [r7, #0]
10048d2c:	430a      	orrs	r2, r1
10048d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10048d30:	687b      	ldr	r3, [r7, #4]
10048d32:	681b      	ldr	r3, [r3, #0]
10048d34:	681a      	ldr	r2, [r3, #0]
10048d36:	687b      	ldr	r3, [r7, #4]
10048d38:	681b      	ldr	r3, [r3, #0]
10048d3a:	2101      	movs	r1, #1
10048d3c:	430a      	orrs	r2, r1
10048d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10048d40:	687b      	ldr	r3, [r7, #4]
10048d42:	2241      	movs	r2, #65	@ 0x41
10048d44:	2120      	movs	r1, #32
10048d46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048d48:	687b      	ldr	r3, [r7, #4]
10048d4a:	2240      	movs	r2, #64	@ 0x40
10048d4c:	2100      	movs	r1, #0
10048d4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10048d50:	2300      	movs	r3, #0
10048d52:	e000      	b.n	10048d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
10048d54:	2302      	movs	r3, #2
  }
}
10048d56:	0018      	movs	r0, r3
10048d58:	46bd      	mov	sp, r7
10048d5a:	b002      	add	sp, #8
10048d5c:	bd80      	pop	{r7, pc}
10048d5e:	46c0      	nop			@ (mov r8, r8)
10048d60:	ffffefff 	.word	0xffffefff

10048d64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
10048d64:	b580      	push	{r7, lr}
10048d66:	b084      	sub	sp, #16
10048d68:	af00      	add	r7, sp, #0
10048d6a:	6078      	str	r0, [r7, #4]
10048d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10048d6e:	687b      	ldr	r3, [r7, #4]
10048d70:	2241      	movs	r2, #65	@ 0x41
10048d72:	5c9b      	ldrb	r3, [r3, r2]
10048d74:	b2db      	uxtb	r3, r3
10048d76:	2b20      	cmp	r3, #32
10048d78:	d139      	bne.n	10048dee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10048d7a:	687b      	ldr	r3, [r7, #4]
10048d7c:	2240      	movs	r2, #64	@ 0x40
10048d7e:	5c9b      	ldrb	r3, [r3, r2]
10048d80:	2b01      	cmp	r3, #1
10048d82:	d101      	bne.n	10048d88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
10048d84:	2302      	movs	r3, #2
10048d86:	e033      	b.n	10048df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10048d88:	687b      	ldr	r3, [r7, #4]
10048d8a:	2240      	movs	r2, #64	@ 0x40
10048d8c:	2101      	movs	r1, #1
10048d8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10048d90:	687b      	ldr	r3, [r7, #4]
10048d92:	2241      	movs	r2, #65	@ 0x41
10048d94:	2124      	movs	r1, #36	@ 0x24
10048d96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10048d98:	687b      	ldr	r3, [r7, #4]
10048d9a:	681b      	ldr	r3, [r3, #0]
10048d9c:	681a      	ldr	r2, [r3, #0]
10048d9e:	687b      	ldr	r3, [r7, #4]
10048da0:	681b      	ldr	r3, [r3, #0]
10048da2:	2101      	movs	r1, #1
10048da4:	438a      	bics	r2, r1
10048da6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10048da8:	687b      	ldr	r3, [r7, #4]
10048daa:	681b      	ldr	r3, [r3, #0]
10048dac:	681b      	ldr	r3, [r3, #0]
10048dae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10048db0:	68fb      	ldr	r3, [r7, #12]
10048db2:	4a11      	ldr	r2, [pc, #68]	@ (10048df8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
10048db4:	4013      	ands	r3, r2
10048db6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10048db8:	683b      	ldr	r3, [r7, #0]
10048dba:	021b      	lsls	r3, r3, #8
10048dbc:	68fa      	ldr	r2, [r7, #12]
10048dbe:	4313      	orrs	r3, r2
10048dc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10048dc2:	687b      	ldr	r3, [r7, #4]
10048dc4:	681b      	ldr	r3, [r3, #0]
10048dc6:	68fa      	ldr	r2, [r7, #12]
10048dc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10048dca:	687b      	ldr	r3, [r7, #4]
10048dcc:	681b      	ldr	r3, [r3, #0]
10048dce:	681a      	ldr	r2, [r3, #0]
10048dd0:	687b      	ldr	r3, [r7, #4]
10048dd2:	681b      	ldr	r3, [r3, #0]
10048dd4:	2101      	movs	r1, #1
10048dd6:	430a      	orrs	r2, r1
10048dd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10048dda:	687b      	ldr	r3, [r7, #4]
10048ddc:	2241      	movs	r2, #65	@ 0x41
10048dde:	2120      	movs	r1, #32
10048de0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048de2:	687b      	ldr	r3, [r7, #4]
10048de4:	2240      	movs	r2, #64	@ 0x40
10048de6:	2100      	movs	r1, #0
10048de8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10048dea:	2300      	movs	r3, #0
10048dec:	e000      	b.n	10048df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
10048dee:	2302      	movs	r3, #2
  }
}
10048df0:	0018      	movs	r0, r3
10048df2:	46bd      	mov	sp, r7
10048df4:	b004      	add	sp, #16
10048df6:	bd80      	pop	{r7, pc}
10048df8:	fffff0ff 	.word	0xfffff0ff

10048dfc <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
10048dfc:	b580      	push	{r7, lr}
10048dfe:	b084      	sub	sp, #16
10048e00:	af00      	add	r7, sp, #0
10048e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10048e04:	230f      	movs	r3, #15
10048e06:	18fb      	adds	r3, r7, r3
10048e08:	2200      	movs	r2, #0
10048e0a:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
10048e0c:	687b      	ldr	r3, [r7, #4]
10048e0e:	2b00      	cmp	r3, #0
10048e10:	d045      	beq.n	10048e9e <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
10048e12:	687b      	ldr	r3, [r7, #4]
10048e14:	791b      	ldrb	r3, [r3, #4]
10048e16:	b2db      	uxtb	r3, r3
10048e18:	2b00      	cmp	r3, #0
10048e1a:	d103      	bne.n	10048e24 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
10048e1c:	687b      	ldr	r3, [r7, #4]
10048e1e:	0018      	movs	r0, r3
10048e20:	f7fc fe0c 	bl	10045a3c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
10048e24:	f7fd fab2 	bl	1004638c <HAL_GetTick>
10048e28:	0003      	movs	r3, r0
10048e2a:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
10048e2c:	687b      	ldr	r3, [r7, #4]
10048e2e:	2202      	movs	r2, #2
10048e30:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
10048e32:	e011      	b.n	10048e58 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
10048e34:	687b      	ldr	r3, [r7, #4]
10048e36:	681b      	ldr	r3, [r3, #0]
10048e38:	2201      	movs	r2, #1
10048e3a:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
10048e3c:	f7fd faa6 	bl	1004638c <HAL_GetTick>
10048e40:	0002      	movs	r2, r0
10048e42:	68bb      	ldr	r3, [r7, #8]
10048e44:	1ad2      	subs	r2, r2, r3
10048e46:	23fa      	movs	r3, #250	@ 0xfa
10048e48:	009b      	lsls	r3, r3, #2
10048e4a:	429a      	cmp	r2, r3
10048e4c:	d904      	bls.n	10048e58 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
10048e4e:	230f      	movs	r3, #15
10048e50:	18fb      	adds	r3, r7, r3
10048e52:	2203      	movs	r2, #3
10048e54:	701a      	strb	r2, [r3, #0]
        break;
10048e56:	e006      	b.n	10048e66 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
10048e58:	687b      	ldr	r3, [r7, #4]
10048e5a:	681b      	ldr	r3, [r3, #0]
10048e5c:	681b      	ldr	r3, [r3, #0]
10048e5e:	2201      	movs	r2, #1
10048e60:	4013      	ands	r3, r2
10048e62:	2b01      	cmp	r3, #1
10048e64:	d1e6      	bne.n	10048e34 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
10048e66:	230f      	movs	r3, #15
10048e68:	18fb      	adds	r3, r7, r3
10048e6a:	781b      	ldrb	r3, [r3, #0]
10048e6c:	2b00      	cmp	r3, #0
10048e6e:	d10f      	bne.n	10048e90 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
10048e70:	687b      	ldr	r3, [r7, #4]
10048e72:	681b      	ldr	r3, [r3, #0]
10048e74:	689a      	ldr	r2, [r3, #8]
10048e76:	687b      	ldr	r3, [r7, #4]
10048e78:	681b      	ldr	r3, [r3, #0]
10048e7a:	21d0      	movs	r1, #208	@ 0xd0
10048e7c:	0349      	lsls	r1, r1, #13
10048e7e:	430a      	orrs	r2, r1
10048e80:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
10048e82:	687b      	ldr	r3, [r7, #4]
10048e84:	2200      	movs	r2, #0
10048e86:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
10048e88:	687b      	ldr	r3, [r7, #4]
10048e8a:	2201      	movs	r2, #1
10048e8c:	711a      	strb	r2, [r3, #4]
10048e8e:	e00a      	b.n	10048ea6 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
10048e90:	687b      	ldr	r3, [r7, #4]
10048e92:	2204      	movs	r2, #4
10048e94:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
10048e96:	687b      	ldr	r3, [r7, #4]
10048e98:	2203      	movs	r2, #3
10048e9a:	711a      	strb	r2, [r3, #4]
10048e9c:	e003      	b.n	10048ea6 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
10048e9e:	230f      	movs	r3, #15
10048ea0:	18fb      	adds	r3, r7, r3
10048ea2:	2201      	movs	r2, #1
10048ea4:	701a      	strb	r2, [r3, #0]
  }

  return err;
10048ea6:	230f      	movs	r3, #15
10048ea8:	18fb      	adds	r3, r7, r3
10048eaa:	781b      	ldrb	r3, [r3, #0]
}
10048eac:	0018      	movs	r0, r3
10048eae:	46bd      	mov	sp, r7
10048eb0:	b004      	add	sp, #16
10048eb2:	bd80      	pop	{r7, pc}

10048eb4 <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10048eb4:	b580      	push	{r7, lr}
10048eb6:	b084      	sub	sp, #16
10048eb8:	af00      	add	r7, sp, #0
10048eba:	6078      	str	r0, [r7, #4]
10048ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10048ebe:	230f      	movs	r3, #15
10048ec0:	18fb      	adds	r3, r7, r3
10048ec2:	2200      	movs	r2, #0
10048ec4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
10048ec6:	687b      	ldr	r3, [r7, #4]
10048ec8:	2b00      	cmp	r3, #0
10048eca:	d003      	beq.n	10048ed4 <HAL_PWREx_DisableGPIOPullUp+0x20>
10048ecc:	687b      	ldr	r3, [r7, #4]
10048ece:	2b01      	cmp	r3, #1
10048ed0:	d008      	beq.n	10048ee4 <HAL_PWREx_DisableGPIOPullUp+0x30>
10048ed2:	e00f      	b.n	10048ef4 <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
10048ed4:	4b0d      	ldr	r3, [pc, #52]	@ (10048f0c <HAL_PWREx_DisableGPIOPullUp+0x58>)
10048ed6:	6a1a      	ldr	r2, [r3, #32]
10048ed8:	683b      	ldr	r3, [r7, #0]
10048eda:	43d9      	mvns	r1, r3
10048edc:	4b0b      	ldr	r3, [pc, #44]	@ (10048f0c <HAL_PWREx_DisableGPIOPullUp+0x58>)
10048ede:	400a      	ands	r2, r1
10048ee0:	621a      	str	r2, [r3, #32]
      break;
10048ee2:	e00c      	b.n	10048efe <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
10048ee4:	4b09      	ldr	r3, [pc, #36]	@ (10048f0c <HAL_PWREx_DisableGPIOPullUp+0x58>)
10048ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048ee8:	683b      	ldr	r3, [r7, #0]
10048eea:	43d9      	mvns	r1, r3
10048eec:	4b07      	ldr	r3, [pc, #28]	@ (10048f0c <HAL_PWREx_DisableGPIOPullUp+0x58>)
10048eee:	400a      	ands	r2, r1
10048ef0:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
10048ef2:	e004      	b.n	10048efe <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
10048ef4:	230f      	movs	r3, #15
10048ef6:	18fb      	adds	r3, r7, r3
10048ef8:	2201      	movs	r2, #1
10048efa:	701a      	strb	r2, [r3, #0]
      break;
10048efc:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10048efe:	230f      	movs	r3, #15
10048f00:	18fb      	adds	r3, r7, r3
10048f02:	781b      	ldrb	r3, [r3, #0]
}
10048f04:	0018      	movs	r0, r3
10048f06:	46bd      	mov	sp, r7
10048f08:	b004      	add	sp, #16
10048f0a:	bd80      	pop	{r7, pc}
10048f0c:	48500000 	.word	0x48500000

10048f10 <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
10048f10:	b580      	push	{r7, lr}
10048f12:	b084      	sub	sp, #16
10048f14:	af00      	add	r7, sp, #0
10048f16:	6078      	str	r0, [r7, #4]
10048f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10048f1a:	230f      	movs	r3, #15
10048f1c:	18fb      	adds	r3, r7, r3
10048f1e:	2200      	movs	r2, #0
10048f20:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
10048f22:	687b      	ldr	r3, [r7, #4]
10048f24:	2b00      	cmp	r3, #0
10048f26:	d003      	beq.n	10048f30 <HAL_PWREx_DisableGPIOPullDown+0x20>
10048f28:	687b      	ldr	r3, [r7, #4]
10048f2a:	2b01      	cmp	r3, #1
10048f2c:	d008      	beq.n	10048f40 <HAL_PWREx_DisableGPIOPullDown+0x30>
10048f2e:	e00f      	b.n	10048f50 <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
10048f30:	4b0d      	ldr	r3, [pc, #52]	@ (10048f68 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10048f32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048f34:	683b      	ldr	r3, [r7, #0]
10048f36:	43d9      	mvns	r1, r3
10048f38:	4b0b      	ldr	r3, [pc, #44]	@ (10048f68 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10048f3a:	400a      	ands	r2, r1
10048f3c:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
10048f3e:	e00c      	b.n	10048f5a <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
10048f40:	4b09      	ldr	r3, [pc, #36]	@ (10048f68 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10048f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048f44:	683b      	ldr	r3, [r7, #0]
10048f46:	43d9      	mvns	r1, r3
10048f48:	4b07      	ldr	r3, [pc, #28]	@ (10048f68 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10048f4a:	400a      	ands	r2, r1
10048f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
10048f4e:	e004      	b.n	10048f5a <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
10048f50:	230f      	movs	r3, #15
10048f52:	18fb      	adds	r3, r7, r3
10048f54:	2201      	movs	r2, #1
10048f56:	701a      	strb	r2, [r3, #0]
      break;
10048f58:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10048f5a:	230f      	movs	r3, #15
10048f5c:	18fb      	adds	r3, r7, r3
10048f5e:	781b      	ldrb	r3, [r3, #0]
}
10048f60:	0018      	movs	r0, r3
10048f62:	46bd      	mov	sp, r7
10048f64:	b004      	add	sp, #16
10048f66:	bd80      	pop	{r7, pc}
10048f68:	48500000 	.word	0x48500000

10048f6c <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10048f6c:	b580      	push	{r7, lr}
10048f6e:	b082      	sub	sp, #8
10048f70:	af00      	add	r7, sp, #0
10048f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10048f74:	4b04      	ldr	r3, [pc, #16]	@ (10048f88 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10048f76:	681b      	ldr	r3, [r3, #0]
10048f78:	4b03      	ldr	r3, [pc, #12]	@ (10048f88 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10048f7a:	687a      	ldr	r2, [r7, #4]
10048f7c:	601a      	str	r2, [r3, #0]
}
10048f7e:	46c0      	nop			@ (mov r8, r8)
10048f80:	46bd      	mov	sp, r7
10048f82:	b002      	add	sp, #8
10048f84:	bd80      	pop	{r7, pc}
10048f86:	46c0      	nop			@ (mov r8, r8)
10048f88:	200000c0 	.word	0x200000c0

10048f8c <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10048f8c:	b580      	push	{r7, lr}
10048f8e:	b082      	sub	sp, #8
10048f90:	af00      	add	r7, sp, #0
10048f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10048f94:	4b07      	ldr	r3, [pc, #28]	@ (10048fb4 <LL_RADIO_SetWakeupInitDelay+0x28>)
10048f96:	685b      	ldr	r3, [r3, #4]
10048f98:	4a07      	ldr	r2, [pc, #28]	@ (10048fb8 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10048f9a:	4013      	ands	r3, r2
10048f9c:	0019      	movs	r1, r3
10048f9e:	687b      	ldr	r3, [r7, #4]
10048fa0:	021b      	lsls	r3, r3, #8
10048fa2:	041b      	lsls	r3, r3, #16
10048fa4:	0c1a      	lsrs	r2, r3, #16
10048fa6:	4b03      	ldr	r3, [pc, #12]	@ (10048fb4 <LL_RADIO_SetWakeupInitDelay+0x28>)
10048fa8:	430a      	orrs	r2, r1
10048faa:	605a      	str	r2, [r3, #4]
}
10048fac:	46c0      	nop			@ (mov r8, r8)
10048fae:	46bd      	mov	sp, r7
10048fb0:	b002      	add	sp, #8
10048fb2:	bd80      	pop	{r7, pc}
10048fb4:	200000c0 	.word	0x200000c0
10048fb8:	ffff00ff 	.word	0xffff00ff

10048fbc <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10048fbc:	b580      	push	{r7, lr}
10048fbe:	b082      	sub	sp, #8
10048fc0:	af00      	add	r7, sp, #0
10048fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10048fc4:	4b08      	ldr	r3, [pc, #32]	@ (10048fe8 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10048fc6:	685b      	ldr	r3, [r3, #4]
10048fc8:	4a08      	ldr	r2, [pc, #32]	@ (10048fec <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10048fca:	4013      	ands	r3, r2
10048fcc:	0019      	movs	r1, r3
10048fce:	687b      	ldr	r3, [r7, #4]
10048fd0:	041a      	lsls	r2, r3, #16
10048fd2:	23ff      	movs	r3, #255	@ 0xff
10048fd4:	041b      	lsls	r3, r3, #16
10048fd6:	401a      	ands	r2, r3
10048fd8:	4b03      	ldr	r3, [pc, #12]	@ (10048fe8 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10048fda:	430a      	orrs	r2, r1
10048fdc:	605a      	str	r2, [r3, #4]
}
10048fde:	46c0      	nop			@ (mov r8, r8)
10048fe0:	46bd      	mov	sp, r7
10048fe2:	b002      	add	sp, #8
10048fe4:	bd80      	pop	{r7, pc}
10048fe6:	46c0      	nop			@ (mov r8, r8)
10048fe8:	200000c0 	.word	0x200000c0
10048fec:	ff00ffff 	.word	0xff00ffff

10048ff0 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10048ff0:	b580      	push	{r7, lr}
10048ff2:	b082      	sub	sp, #8
10048ff4:	af00      	add	r7, sp, #0
10048ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10048ff8:	4b06      	ldr	r3, [pc, #24]	@ (10049014 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10048ffa:	685b      	ldr	r3, [r3, #4]
10048ffc:	021b      	lsls	r3, r3, #8
10048ffe:	0a19      	lsrs	r1, r3, #8
10049000:	687b      	ldr	r3, [r7, #4]
10049002:	061a      	lsls	r2, r3, #24
10049004:	4b03      	ldr	r3, [pc, #12]	@ (10049014 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10049006:	430a      	orrs	r2, r1
10049008:	605a      	str	r2, [r3, #4]
}
1004900a:	46c0      	nop			@ (mov r8, r8)
1004900c:	46bd      	mov	sp, r7
1004900e:	b002      	add	sp, #8
10049010:	bd80      	pop	{r7, pc}
10049012:	46c0      	nop			@ (mov r8, r8)
10049014:	200000c0 	.word	0x200000c0

10049018 <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
10049018:	b580      	push	{r7, lr}
1004901a:	b082      	sub	sp, #8
1004901c:	af00      	add	r7, sp, #0
1004901e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10049020:	4b07      	ldr	r3, [pc, #28]	@ (10049040 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10049022:	689b      	ldr	r3, [r3, #8]
10049024:	22ff      	movs	r2, #255	@ 0xff
10049026:	4393      	bics	r3, r2
10049028:	0019      	movs	r1, r3
1004902a:	687b      	ldr	r3, [r7, #4]
1004902c:	22ff      	movs	r2, #255	@ 0xff
1004902e:	401a      	ands	r2, r3
10049030:	4b03      	ldr	r3, [pc, #12]	@ (10049040 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10049032:	430a      	orrs	r2, r1
10049034:	609a      	str	r2, [r3, #8]
}
10049036:	46c0      	nop			@ (mov r8, r8)
10049038:	46bd      	mov	sp, r7
1004903a:	b002      	add	sp, #8
1004903c:	bd80      	pop	{r7, pc}
1004903e:	46c0      	nop			@ (mov r8, r8)
10049040:	200000c0 	.word	0x200000c0

10049044 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
10049044:	b580      	push	{r7, lr}
10049046:	b082      	sub	sp, #8
10049048:	af00      	add	r7, sp, #0
1004904a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
1004904c:	4b07      	ldr	r3, [pc, #28]	@ (1004906c <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004904e:	689b      	ldr	r3, [r3, #8]
10049050:	4a07      	ldr	r2, [pc, #28]	@ (10049070 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10049052:	4013      	ands	r3, r2
10049054:	0019      	movs	r1, r3
10049056:	687b      	ldr	r3, [r7, #4]
10049058:	021b      	lsls	r3, r3, #8
1004905a:	041b      	lsls	r3, r3, #16
1004905c:	0c1a      	lsrs	r2, r3, #16
1004905e:	4b03      	ldr	r3, [pc, #12]	@ (1004906c <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10049060:	430a      	orrs	r2, r1
10049062:	609a      	str	r2, [r3, #8]
}
10049064:	46c0      	nop			@ (mov r8, r8)
10049066:	46bd      	mov	sp, r7
10049068:	b002      	add	sp, #8
1004906a:	bd80      	pop	{r7, pc}
1004906c:	200000c0 	.word	0x200000c0
10049070:	ffff00ff 	.word	0xffff00ff

10049074 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
10049074:	b580      	push	{r7, lr}
10049076:	b082      	sub	sp, #8
10049078:	af00      	add	r7, sp, #0
1004907a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
1004907c:	4b08      	ldr	r3, [pc, #32]	@ (100490a0 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004907e:	689b      	ldr	r3, [r3, #8]
10049080:	4a08      	ldr	r2, [pc, #32]	@ (100490a4 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10049082:	4013      	ands	r3, r2
10049084:	0019      	movs	r1, r3
10049086:	687b      	ldr	r3, [r7, #4]
10049088:	041a      	lsls	r2, r3, #16
1004908a:	23ff      	movs	r3, #255	@ 0xff
1004908c:	041b      	lsls	r3, r3, #16
1004908e:	401a      	ands	r2, r3
10049090:	4b03      	ldr	r3, [pc, #12]	@ (100490a0 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10049092:	430a      	orrs	r2, r1
10049094:	609a      	str	r2, [r3, #8]
}
10049096:	46c0      	nop			@ (mov r8, r8)
10049098:	46bd      	mov	sp, r7
1004909a:	b002      	add	sp, #8
1004909c:	bd80      	pop	{r7, pc}
1004909e:	46c0      	nop			@ (mov r8, r8)
100490a0:	200000c0 	.word	0x200000c0
100490a4:	ff00ffff 	.word	0xff00ffff

100490a8 <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
100490a8:	b580      	push	{r7, lr}
100490aa:	b082      	sub	sp, #8
100490ac:	af00      	add	r7, sp, #0
100490ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
100490b0:	4b06      	ldr	r3, [pc, #24]	@ (100490cc <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
100490b2:	689b      	ldr	r3, [r3, #8]
100490b4:	021b      	lsls	r3, r3, #8
100490b6:	0a19      	lsrs	r1, r3, #8
100490b8:	687b      	ldr	r3, [r7, #4]
100490ba:	061a      	lsls	r2, r3, #24
100490bc:	4b03      	ldr	r3, [pc, #12]	@ (100490cc <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
100490be:	430a      	orrs	r2, r1
100490c0:	609a      	str	r2, [r3, #8]
}
100490c2:	46c0      	nop			@ (mov r8, r8)
100490c4:	46bd      	mov	sp, r7
100490c6:	b002      	add	sp, #8
100490c8:	bd80      	pop	{r7, pc}
100490ca:	46c0      	nop			@ (mov r8, r8)
100490cc:	200000c0 	.word	0x200000c0

100490d0 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
100490d0:	b580      	push	{r7, lr}
100490d2:	b082      	sub	sp, #8
100490d4:	af00      	add	r7, sp, #0
100490d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
100490d8:	4b07      	ldr	r3, [pc, #28]	@ (100490f8 <LL_RADIO_SetConfigurationEndDuration+0x28>)
100490da:	68db      	ldr	r3, [r3, #12]
100490dc:	22ff      	movs	r2, #255	@ 0xff
100490de:	4393      	bics	r3, r2
100490e0:	0019      	movs	r1, r3
100490e2:	687b      	ldr	r3, [r7, #4]
100490e4:	22ff      	movs	r2, #255	@ 0xff
100490e6:	401a      	ands	r2, r3
100490e8:	4b03      	ldr	r3, [pc, #12]	@ (100490f8 <LL_RADIO_SetConfigurationEndDuration+0x28>)
100490ea:	430a      	orrs	r2, r1
100490ec:	60da      	str	r2, [r3, #12]
}
100490ee:	46c0      	nop			@ (mov r8, r8)
100490f0:	46bd      	mov	sp, r7
100490f2:	b002      	add	sp, #8
100490f4:	bd80      	pop	{r7, pc}
100490f6:	46c0      	nop			@ (mov r8, r8)
100490f8:	200000c0 	.word	0x200000c0

100490fc <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
100490fc:	b580      	push	{r7, lr}
100490fe:	b082      	sub	sp, #8
10049100:	af00      	add	r7, sp, #0
10049102:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10049104:	4b07      	ldr	r3, [pc, #28]	@ (10049124 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10049106:	68db      	ldr	r3, [r3, #12]
10049108:	4a07      	ldr	r2, [pc, #28]	@ (10049128 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004910a:	4013      	ands	r3, r2
1004910c:	0019      	movs	r1, r3
1004910e:	687b      	ldr	r3, [r7, #4]
10049110:	021b      	lsls	r3, r3, #8
10049112:	041b      	lsls	r3, r3, #16
10049114:	0c1a      	lsrs	r2, r3, #16
10049116:	4b03      	ldr	r3, [pc, #12]	@ (10049124 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10049118:	430a      	orrs	r2, r1
1004911a:	60da      	str	r2, [r3, #12]
}
1004911c:	46c0      	nop			@ (mov r8, r8)
1004911e:	46bd      	mov	sp, r7
10049120:	b002      	add	sp, #8
10049122:	bd80      	pop	{r7, pc}
10049124:	200000c0 	.word	0x200000c0
10049128:	ffff00ff 	.word	0xffff00ff

1004912c <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
1004912c:	b580      	push	{r7, lr}
1004912e:	b082      	sub	sp, #8
10049130:	af00      	add	r7, sp, #0
10049132:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10049134:	4b08      	ldr	r3, [pc, #32]	@ (10049158 <LL_RADIO_SetTxDelayStart+0x2c>)
10049136:	68db      	ldr	r3, [r3, #12]
10049138:	4a08      	ldr	r2, [pc, #32]	@ (1004915c <LL_RADIO_SetTxDelayStart+0x30>)
1004913a:	4013      	ands	r3, r2
1004913c:	0019      	movs	r1, r3
1004913e:	687b      	ldr	r3, [r7, #4]
10049140:	041a      	lsls	r2, r3, #16
10049142:	23ff      	movs	r3, #255	@ 0xff
10049144:	041b      	lsls	r3, r3, #16
10049146:	401a      	ands	r2, r3
10049148:	4b03      	ldr	r3, [pc, #12]	@ (10049158 <LL_RADIO_SetTxDelayStart+0x2c>)
1004914a:	430a      	orrs	r2, r1
1004914c:	60da      	str	r2, [r3, #12]
}
1004914e:	46c0      	nop			@ (mov r8, r8)
10049150:	46bd      	mov	sp, r7
10049152:	b002      	add	sp, #8
10049154:	bd80      	pop	{r7, pc}
10049156:	46c0      	nop			@ (mov r8, r8)
10049158:	200000c0 	.word	0x200000c0
1004915c:	ff00ffff 	.word	0xff00ffff

10049160 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
10049160:	b580      	push	{r7, lr}
10049162:	b082      	sub	sp, #8
10049164:	af00      	add	r7, sp, #0
10049166:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10049168:	4b08      	ldr	r3, [pc, #32]	@ (1004918c <LL_RADIO_SetTxDelayEnd+0x2c>)
1004916a:	68db      	ldr	r3, [r3, #12]
1004916c:	4a08      	ldr	r2, [pc, #32]	@ (10049190 <LL_RADIO_SetTxDelayEnd+0x30>)
1004916e:	4013      	ands	r3, r2
10049170:	0019      	movs	r1, r3
10049172:	687b      	ldr	r3, [r7, #4]
10049174:	061a      	lsls	r2, r3, #24
10049176:	23fc      	movs	r3, #252	@ 0xfc
10049178:	059b      	lsls	r3, r3, #22
1004917a:	401a      	ands	r2, r3
1004917c:	4b03      	ldr	r3, [pc, #12]	@ (1004918c <LL_RADIO_SetTxDelayEnd+0x2c>)
1004917e:	430a      	orrs	r2, r1
10049180:	60da      	str	r2, [r3, #12]
}
10049182:	46c0      	nop			@ (mov r8, r8)
10049184:	46bd      	mov	sp, r7
10049186:	b002      	add	sp, #8
10049188:	bd80      	pop	{r7, pc}
1004918a:	46c0      	nop			@ (mov r8, r8)
1004918c:	200000c0 	.word	0x200000c0
10049190:	c0ffffff 	.word	0xc0ffffff

10049194 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
10049194:	b580      	push	{r7, lr}
10049196:	b082      	sub	sp, #8
10049198:	af00      	add	r7, sp, #0
1004919a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
1004919c:	4b07      	ldr	r3, [pc, #28]	@ (100491bc <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004919e:	691b      	ldr	r3, [r3, #16]
100491a0:	22ff      	movs	r2, #255	@ 0xff
100491a2:	4393      	bics	r3, r2
100491a4:	0019      	movs	r1, r3
100491a6:	687b      	ldr	r3, [r7, #4]
100491a8:	22ff      	movs	r2, #255	@ 0xff
100491aa:	401a      	ands	r2, r3
100491ac:	4b03      	ldr	r3, [pc, #12]	@ (100491bc <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
100491ae:	430a      	orrs	r2, r1
100491b0:	611a      	str	r2, [r3, #16]
}
100491b2:	46c0      	nop			@ (mov r8, r8)
100491b4:	46bd      	mov	sp, r7
100491b6:	b002      	add	sp, #8
100491b8:	bd80      	pop	{r7, pc}
100491ba:	46c0      	nop			@ (mov r8, r8)
100491bc:	200000c0 	.word	0x200000c0

100491c0 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
100491c0:	b580      	push	{r7, lr}
100491c2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
100491c4:	4b04      	ldr	r3, [pc, #16]	@ (100491d8 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
100491c6:	695a      	ldr	r2, [r3, #20]
100491c8:	4b03      	ldr	r3, [pc, #12]	@ (100491d8 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
100491ca:	2104      	movs	r1, #4
100491cc:	430a      	orrs	r2, r1
100491ce:	615a      	str	r2, [r3, #20]
}
100491d0:	46c0      	nop			@ (mov r8, r8)
100491d2:	46bd      	mov	sp, r7
100491d4:	bd80      	pop	{r7, pc}
100491d6:	46c0      	nop			@ (mov r8, r8)
100491d8:	200000c0 	.word	0x200000c0

100491dc <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
100491dc:	b580      	push	{r7, lr}
100491de:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
100491e0:	4b04      	ldr	r3, [pc, #16]	@ (100491f4 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
100491e2:	695a      	ldr	r2, [r3, #20]
100491e4:	4b03      	ldr	r3, [pc, #12]	@ (100491f4 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
100491e6:	2180      	movs	r1, #128	@ 0x80
100491e8:	0409      	lsls	r1, r1, #16
100491ea:	430a      	orrs	r2, r1
100491ec:	615a      	str	r2, [r3, #20]
}
100491ee:	46c0      	nop			@ (mov r8, r8)
100491f0:	46bd      	mov	sp, r7
100491f2:	bd80      	pop	{r7, pc}
100491f4:	200000c0 	.word	0x200000c0

100491f8 <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
100491f8:	b580      	push	{r7, lr}
100491fa:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
100491fc:	4b04      	ldr	r3, [pc, #16]	@ (10049210 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
100491fe:	695a      	ldr	r2, [r3, #20]
10049200:	4b03      	ldr	r3, [pc, #12]	@ (10049210 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10049202:	2180      	movs	r1, #128	@ 0x80
10049204:	0589      	lsls	r1, r1, #22
10049206:	430a      	orrs	r2, r1
10049208:	615a      	str	r2, [r3, #20]
}
1004920a:	46c0      	nop			@ (mov r8, r8)
1004920c:	46bd      	mov	sp, r7
1004920e:	bd80      	pop	{r7, pc}
10049210:	200000c0 	.word	0x200000c0

10049214 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
10049214:	b580      	push	{r7, lr}
10049216:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10049218:	4b04      	ldr	r3, [pc, #16]	@ (1004922c <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004921a:	695a      	ldr	r2, [r3, #20]
1004921c:	4b03      	ldr	r3, [pc, #12]	@ (1004922c <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004921e:	2180      	movs	r1, #128	@ 0x80
10049220:	05c9      	lsls	r1, r1, #23
10049222:	430a      	orrs	r2, r1
10049224:	615a      	str	r2, [r3, #20]
}
10049226:	46c0      	nop			@ (mov r8, r8)
10049228:	46bd      	mov	sp, r7
1004922a:	bd80      	pop	{r7, pc}
1004922c:	200000c0 	.word	0x200000c0

10049230 <LL_RADIO_SetDefaultAntennaID>:
  * @rmtoll WORD6          DEFAULTANTENNAID       LL_RADIO_SetDefaultAntennaID
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDefaultAntennaID(uint32_t value)
{
10049230:	b580      	push	{r7, lr}
10049232:	b082      	sub	sp, #8
10049234:	af00      	add	r7, sp, #0
10049236:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
10049238:	4b07      	ldr	r3, [pc, #28]	@ (10049258 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004923a:	699b      	ldr	r3, [r3, #24]
1004923c:	227f      	movs	r2, #127	@ 0x7f
1004923e:	4393      	bics	r3, r2
10049240:	0019      	movs	r1, r3
10049242:	687b      	ldr	r3, [r7, #4]
10049244:	227f      	movs	r2, #127	@ 0x7f
10049246:	401a      	ands	r2, r3
10049248:	4b03      	ldr	r3, [pc, #12]	@ (10049258 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004924a:	430a      	orrs	r2, r1
1004924c:	619a      	str	r2, [r3, #24]
}
1004924e:	46c0      	nop			@ (mov r8, r8)
10049250:	46bd      	mov	sp, r7
10049252:	b002      	add	sp, #8
10049254:	bd80      	pop	{r7, pc}
10049256:	46c0      	nop			@ (mov r8, r8)
10049258:	200000c0 	.word	0x200000c0

1004925c <LL_RADIO_TIMER_DisableTimer1>:
{
1004925c:	b580      	push	{r7, lr}
1004925e:	b082      	sub	sp, #8
10049260:	af00      	add	r7, sp, #0
10049262:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10049264:	687b      	ldr	r3, [r7, #4]
10049266:	68db      	ldr	r3, [r3, #12]
10049268:	2203      	movs	r2, #3
1004926a:	4393      	bics	r3, r2
1004926c:	001a      	movs	r2, r3
1004926e:	687b      	ldr	r3, [r7, #4]
10049270:	60da      	str	r2, [r3, #12]
}
10049272:	46c0      	nop			@ (mov r8, r8)
10049274:	46bd      	mov	sp, r7
10049276:	b002      	add	sp, #8
10049278:	bd80      	pop	{r7, pc}

1004927a <LL_RADIO_TIMER_DisableTimer2>:
{
1004927a:	b580      	push	{r7, lr}
1004927c:	b082      	sub	sp, #8
1004927e:	af00      	add	r7, sp, #0
10049280:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10049282:	687b      	ldr	r3, [r7, #4]
10049284:	68db      	ldr	r3, [r3, #12]
10049286:	2203      	movs	r2, #3
10049288:	4393      	bics	r3, r2
1004928a:	001a      	movs	r2, r3
1004928c:	687b      	ldr	r3, [r7, #4]
1004928e:	60da      	str	r2, [r3, #12]
}
10049290:	46c0      	nop			@ (mov r8, r8)
10049292:	46bd      	mov	sp, r7
10049294:	b002      	add	sp, #8
10049296:	bd80      	pop	{r7, pc}

10049298 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10049298:	b580      	push	{r7, lr}
1004929a:	b082      	sub	sp, #8
1004929c:	af00      	add	r7, sp, #0
1004929e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100492a0:	687b      	ldr	r3, [r7, #4]
100492a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100492a4:	4a03      	ldr	r2, [pc, #12]	@ (100492b4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100492a6:	401a      	ands	r2, r3
100492a8:	687b      	ldr	r3, [r7, #4]
100492aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
100492ac:	46c0      	nop			@ (mov r8, r8)
100492ae:	46bd      	mov	sp, r7
100492b0:	b002      	add	sp, #8
100492b2:	bd80      	pop	{r7, pc}
100492b4:	bfffffff 	.word	0xbfffffff

100492b8 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
100492b8:	b590      	push	{r4, r7, lr}
100492ba:	b08d      	sub	sp, #52	@ 0x34
100492bc:	af00      	add	r7, sp, #0
100492be:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
100492c0:	4b14      	ldr	r3, [pc, #80]	@ (10049314 <HAL_RADIO_Init+0x5c>)
100492c2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
100492c4:	4b14      	ldr	r3, [pc, #80]	@ (10049318 <HAL_RADIO_Init+0x60>)
100492c6:	681b      	ldr	r3, [r3, #0]
100492c8:	4a14      	ldr	r2, [pc, #80]	@ (1004931c <HAL_RADIO_Init+0x64>)
100492ca:	4293      	cmp	r3, r2
100492cc:	d12a      	bne.n	10049324 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
100492ce:	4b14      	ldr	r3, [pc, #80]	@ (10049320 <HAL_RADIO_Init+0x68>)
100492d0:	681b      	ldr	r3, [r3, #0]
100492d2:	0a1b      	lsrs	r3, r3, #8
100492d4:	220f      	movs	r2, #15
100492d6:	4013      	ands	r3, r2
100492d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
100492da:	4b11      	ldr	r3, [pc, #68]	@ (10049320 <HAL_RADIO_Init+0x68>)
100492dc:	681b      	ldr	r3, [r3, #0]
100492de:	0b1b      	lsrs	r3, r3, #12
100492e0:	220f      	movs	r2, #15
100492e2:	4013      	ands	r3, r2
100492e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
100492e6:	4b0e      	ldr	r3, [pc, #56]	@ (10049320 <HAL_RADIO_Init+0x68>)
100492e8:	681b      	ldr	r3, [r3, #0]
100492ea:	0c1b      	lsrs	r3, r3, #16
100492ec:	220f      	movs	r2, #15
100492ee:	4013      	ands	r3, r2
100492f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
100492f2:	4b0b      	ldr	r3, [pc, #44]	@ (10049320 <HAL_RADIO_Init+0x68>)
100492f4:	681b      	ldr	r3, [r3, #0]
100492f6:	0d1b      	lsrs	r3, r3, #20
100492f8:	2207      	movs	r2, #7
100492fa:	4013      	ands	r3, r2
100492fc:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
100492fe:	4b08      	ldr	r3, [pc, #32]	@ (10049320 <HAL_RADIO_Init+0x68>)
10049300:	681b      	ldr	r3, [r3, #0]
10049302:	0e1b      	lsrs	r3, r3, #24
10049304:	2207      	movs	r2, #7
10049306:	4013      	ands	r3, r2
10049308:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004930a:	231b      	movs	r3, #27
1004930c:	18fb      	adds	r3, r7, r3
1004930e:	2201      	movs	r2, #1
10049310:	701a      	strb	r2, [r3, #0]
10049312:	e018      	b.n	10049346 <HAL_RADIO_Init+0x8e>
10049314:	200021dc 	.word	0x200021dc
10049318:	10001ef8 	.word	0x10001ef8
1004931c:	fcbceccc 	.word	0xfcbceccc
10049320:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10049324:	2308      	movs	r3, #8
10049326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10049328:	2307      	movs	r3, #7
1004932a:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004932c:	2308      	movs	r3, #8
1004932e:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10049330:	211b      	movs	r1, #27
10049332:	187b      	adds	r3, r7, r1
10049334:	2200      	movs	r2, #0
10049336:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
10049338:	2303      	movs	r3, #3
1004933a:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004933c:	2303      	movs	r3, #3
1004933e:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10049340:	187b      	adds	r3, r7, r1
10049342:	2201      	movs	r2, #1
10049344:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10049346:	4bfc      	ldr	r3, [pc, #1008]	@ (10049738 <HAL_RADIO_Init+0x480>)
10049348:	2200      	movs	r2, #0
1004934a:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004934c:	687b      	ldr	r3, [r7, #4]
1004934e:	2b00      	cmp	r3, #0
10049350:	d003      	beq.n	1004935a <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
10049352:	687b      	ldr	r3, [r7, #4]
10049354:	0018      	movs	r0, r3
10049356:	f7fc fb85 	bl	10045a64 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004935a:	23c0      	movs	r3, #192	@ 0xc0
1004935c:	05db      	lsls	r3, r3, #23
1004935e:	0018      	movs	r0, r3
10049360:	f7ff ff7c 	bl	1004925c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10049364:	23c0      	movs	r3, #192	@ 0xc0
10049366:	05db      	lsls	r3, r3, #23
10049368:	0018      	movs	r0, r3
1004936a:	f7ff ff86 	bl	1004927a <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004936e:	4bf3      	ldr	r3, [pc, #972]	@ (1004973c <HAL_RADIO_Init+0x484>)
10049370:	0018      	movs	r0, r3
10049372:	f7ff ff91 	bl	10049298 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10049376:	4af2      	ldr	r2, [pc, #968]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049378:	239e      	movs	r3, #158	@ 0x9e
1004937a:	009b      	lsls	r3, r3, #2
1004937c:	58d3      	ldr	r3, [r2, r3]
1004937e:	220f      	movs	r2, #15
10049380:	4393      	bics	r3, r2
10049382:	001a      	movs	r2, r3
10049384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049386:	210f      	movs	r1, #15
10049388:	400b      	ands	r3, r1
1004938a:	49ed      	ldr	r1, [pc, #948]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004938c:	431a      	orrs	r2, r3
1004938e:	239e      	movs	r3, #158	@ 0x9e
10049390:	009b      	lsls	r3, r3, #2
10049392:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10049394:	4aea      	ldr	r2, [pc, #936]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049396:	239d      	movs	r3, #157	@ 0x9d
10049398:	009b      	lsls	r3, r3, #2
1004939a:	58d3      	ldr	r3, [r2, r3]
1004939c:	22f0      	movs	r2, #240	@ 0xf0
1004939e:	4393      	bics	r3, r2
100493a0:	001a      	movs	r2, r3
100493a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100493a4:	011b      	lsls	r3, r3, #4
100493a6:	21ff      	movs	r1, #255	@ 0xff
100493a8:	400b      	ands	r3, r1
100493aa:	49e5      	ldr	r1, [pc, #916]	@ (10049740 <HAL_RADIO_Init+0x488>)
100493ac:	431a      	orrs	r2, r3
100493ae:	239d      	movs	r3, #157	@ 0x9d
100493b0:	009b      	lsls	r3, r3, #2
100493b2:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
100493b4:	4ae2      	ldr	r2, [pc, #904]	@ (10049740 <HAL_RADIO_Init+0x488>)
100493b6:	239d      	movs	r3, #157	@ 0x9d
100493b8:	009b      	lsls	r3, r3, #2
100493ba:	58d3      	ldr	r3, [r2, r3]
100493bc:	220f      	movs	r2, #15
100493be:	4393      	bics	r3, r2
100493c0:	001a      	movs	r2, r3
100493c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100493c4:	210f      	movs	r1, #15
100493c6:	400b      	ands	r3, r1
100493c8:	49dd      	ldr	r1, [pc, #884]	@ (10049740 <HAL_RADIO_Init+0x488>)
100493ca:	431a      	orrs	r2, r3
100493cc:	239d      	movs	r3, #157	@ 0x9d
100493ce:	009b      	lsls	r3, r3, #2
100493d0:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
100493d2:	231b      	movs	r3, #27
100493d4:	18fb      	adds	r3, r7, r3
100493d6:	781b      	ldrb	r3, [r3, #0]
100493d8:	2b00      	cmp	r3, #0
100493da:	d01e      	beq.n	1004941a <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
100493dc:	4ad8      	ldr	r2, [pc, #864]	@ (10049740 <HAL_RADIO_Init+0x488>)
100493de:	2392      	movs	r3, #146	@ 0x92
100493e0:	009b      	lsls	r3, r3, #2
100493e2:	58d3      	ldr	r3, [r2, r3]
100493e4:	2207      	movs	r2, #7
100493e6:	4393      	bics	r3, r2
100493e8:	001a      	movs	r2, r3
100493ea:	6a3b      	ldr	r3, [r7, #32]
100493ec:	2107      	movs	r1, #7
100493ee:	400b      	ands	r3, r1
100493f0:	49d3      	ldr	r1, [pc, #844]	@ (10049740 <HAL_RADIO_Init+0x488>)
100493f2:	431a      	orrs	r2, r3
100493f4:	2392      	movs	r3, #146	@ 0x92
100493f6:	009b      	lsls	r3, r3, #2
100493f8:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
100493fa:	4ad1      	ldr	r2, [pc, #836]	@ (10049740 <HAL_RADIO_Init+0x488>)
100493fc:	2392      	movs	r3, #146	@ 0x92
100493fe:	009b      	lsls	r3, r3, #2
10049400:	58d3      	ldr	r3, [r2, r3]
10049402:	2238      	movs	r2, #56	@ 0x38
10049404:	4393      	bics	r3, r2
10049406:	001a      	movs	r2, r3
10049408:	69fb      	ldr	r3, [r7, #28]
1004940a:	00db      	lsls	r3, r3, #3
1004940c:	2138      	movs	r1, #56	@ 0x38
1004940e:	400b      	ands	r3, r1
10049410:	49cb      	ldr	r1, [pc, #812]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049412:	431a      	orrs	r2, r3
10049414:	2392      	movs	r3, #146	@ 0x92
10049416:	009b      	lsls	r3, r3, #2
10049418:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004941a:	4ac9      	ldr	r2, [pc, #804]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004941c:	23a4      	movs	r3, #164	@ 0xa4
1004941e:	005b      	lsls	r3, r3, #1
10049420:	58d3      	ldr	r3, [r2, r3]
10049422:	22ff      	movs	r2, #255	@ 0xff
10049424:	4393      	bics	r3, r2
10049426:	49c6      	ldr	r1, [pc, #792]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049428:	2255      	movs	r2, #85	@ 0x55
1004942a:	431a      	orrs	r2, r3
1004942c:	23a4      	movs	r3, #164	@ 0xa4
1004942e:	005b      	lsls	r3, r3, #1
10049430:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10049432:	4ac3      	ldr	r2, [pc, #780]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049434:	23aa      	movs	r3, #170	@ 0xaa
10049436:	005b      	lsls	r3, r3, #1
10049438:	58d3      	ldr	r3, [r2, r3]
1004943a:	22ff      	movs	r2, #255	@ 0xff
1004943c:	4393      	bics	r3, r2
1004943e:	49c0      	ldr	r1, [pc, #768]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049440:	2266      	movs	r2, #102	@ 0x66
10049442:	431a      	orrs	r2, r3
10049444:	23aa      	movs	r3, #170	@ 0xaa
10049446:	005b      	lsls	r3, r3, #1
10049448:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004944a:	4abd      	ldr	r2, [pc, #756]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004944c:	23b4      	movs	r3, #180	@ 0xb4
1004944e:	005b      	lsls	r3, r3, #1
10049450:	58d3      	ldr	r3, [r2, r3]
10049452:	22ff      	movs	r2, #255	@ 0xff
10049454:	4393      	bics	r3, r2
10049456:	49ba      	ldr	r1, [pc, #744]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049458:	2255      	movs	r2, #85	@ 0x55
1004945a:	431a      	orrs	r2, r3
1004945c:	23b4      	movs	r3, #180	@ 0xb4
1004945e:	005b      	lsls	r3, r3, #1
10049460:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10049462:	4ab7      	ldr	r2, [pc, #732]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049464:	23c4      	movs	r3, #196	@ 0xc4
10049466:	005b      	lsls	r3, r3, #1
10049468:	58d3      	ldr	r3, [r2, r3]
1004946a:	22ff      	movs	r2, #255	@ 0xff
1004946c:	4393      	bics	r3, r2
1004946e:	49b4      	ldr	r1, [pc, #720]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049470:	221d      	movs	r2, #29
10049472:	431a      	orrs	r2, r3
10049474:	23c4      	movs	r3, #196	@ 0xc4
10049476:	005b      	lsls	r3, r3, #1
10049478:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004947a:	4ab1      	ldr	r2, [pc, #708]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004947c:	23c2      	movs	r3, #194	@ 0xc2
1004947e:	005b      	lsls	r3, r3, #1
10049480:	58d3      	ldr	r3, [r2, r3]
10049482:	22ff      	movs	r2, #255	@ 0xff
10049484:	4393      	bics	r3, r2
10049486:	49ae      	ldr	r1, [pc, #696]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049488:	2259      	movs	r2, #89	@ 0x59
1004948a:	431a      	orrs	r2, r3
1004948c:	23c2      	movs	r3, #194	@ 0xc2
1004948e:	005b      	lsls	r3, r3, #1
10049490:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10049492:	4aab      	ldr	r2, [pc, #684]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049494:	23c6      	movs	r3, #198	@ 0xc6
10049496:	005b      	lsls	r3, r3, #1
10049498:	58d3      	ldr	r3, [r2, r3]
1004949a:	22ff      	movs	r2, #255	@ 0xff
1004949c:	4393      	bics	r3, r2
1004949e:	49a8      	ldr	r1, [pc, #672]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494a0:	2232      	movs	r2, #50	@ 0x32
100494a2:	431a      	orrs	r2, r3
100494a4:	23c6      	movs	r3, #198	@ 0xc6
100494a6:	005b      	lsls	r3, r3, #1
100494a8:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
100494aa:	4aa5      	ldr	r2, [pc, #660]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494ac:	23b6      	movs	r3, #182	@ 0xb6
100494ae:	005b      	lsls	r3, r3, #1
100494b0:	58d3      	ldr	r3, [r2, r3]
100494b2:	49a3      	ldr	r1, [pc, #652]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494b4:	2201      	movs	r2, #1
100494b6:	431a      	orrs	r2, r3
100494b8:	23b6      	movs	r3, #182	@ 0xb6
100494ba:	005b      	lsls	r3, r3, #1
100494bc:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
100494be:	4aa0      	ldr	r2, [pc, #640]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494c0:	23d0      	movs	r3, #208	@ 0xd0
100494c2:	009b      	lsls	r3, r3, #2
100494c4:	58d3      	ldr	r3, [r2, r3]
100494c6:	22ff      	movs	r2, #255	@ 0xff
100494c8:	4393      	bics	r3, r2
100494ca:	499d      	ldr	r1, [pc, #628]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494cc:	221f      	movs	r2, #31
100494ce:	431a      	orrs	r2, r3
100494d0:	23d0      	movs	r3, #208	@ 0xd0
100494d2:	009b      	lsls	r3, r3, #2
100494d4:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
100494d6:	4a9a      	ldr	r2, [pc, #616]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494d8:	23d1      	movs	r3, #209	@ 0xd1
100494da:	009b      	lsls	r3, r3, #2
100494dc:	58d3      	ldr	r3, [r2, r3]
100494de:	22ff      	movs	r2, #255	@ 0xff
100494e0:	4393      	bics	r3, r2
100494e2:	4997      	ldr	r1, [pc, #604]	@ (10049740 <HAL_RADIO_Init+0x488>)
100494e4:	2209      	movs	r2, #9
100494e6:	431a      	orrs	r2, r3
100494e8:	23d1      	movs	r3, #209	@ 0xd1
100494ea:	009b      	lsls	r3, r3, #2
100494ec:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
100494ee:	2040      	movs	r0, #64	@ 0x40
100494f0:	f7ff fd4c 	bl	10048f8c <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
100494f4:	203f      	movs	r0, #63	@ 0x3f
100494f6:	f7ff fd61 	bl	10048fbc <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
100494fa:	2009      	movs	r0, #9
100494fc:	f7ff fd78 	bl	10048ff0 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
10049500:	205a      	movs	r0, #90	@ 0x5a
10049502:	f7ff fdb7 	bl	10049074 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
10049506:	2032      	movs	r0, #50	@ 0x32
10049508:	f7ff fdce 	bl	100490a8 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004950c:	205a      	movs	r0, #90	@ 0x5a
1004950e:	f7ff fd83 	bl	10049018 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
10049512:	2032      	movs	r0, #50	@ 0x32
10049514:	f7ff fd96 	bl	10049044 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
10049518:	2010      	movs	r0, #16
1004951a:	f7ff fe07 	bl	1004912c <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004951e:	2010      	movs	r0, #16
10049520:	f7ff fe1e 	bl	10049160 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
10049524:	2004      	movs	r0, #4
10049526:	f7ff fe35 	bl	10049194 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004952a:	2014      	movs	r0, #20
1004952c:	f7ff fdd0 	bl	100490d0 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
10049530:	2005      	movs	r0, #5
10049532:	f7ff fde3 	bl	100490fc <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
10049536:	f7ff fe43 	bl	100491c0 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004953a:	f7ff fe4f 	bl	100491dc <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004953e:	f7ff fe5b 	bl	100491f8 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
10049542:	2000      	movs	r0, #0
10049544:	f7ff fe74 	bl	10049230 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10049548:	2013      	movs	r0, #19
1004954a:	183b      	adds	r3, r7, r0
1004954c:	2200      	movs	r2, #0
1004954e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10049550:	183b      	adds	r3, r7, r0
10049552:	781b      	ldrb	r3, [r3, #0]
10049554:	183a      	adds	r2, r7, r0
10049556:	1c59      	adds	r1, r3, #1
10049558:	7011      	strb	r1, [r2, #0]
1004955a:	001a      	movs	r2, r3
1004955c:	697b      	ldr	r3, [r7, #20]
1004955e:	189b      	adds	r3, r3, r2
10049560:	2201      	movs	r2, #1
10049562:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10049564:	183b      	adds	r3, r7, r0
10049566:	781b      	ldrb	r3, [r3, #0]
10049568:	183a      	adds	r2, r7, r0
1004956a:	1c59      	adds	r1, r3, #1
1004956c:	7011      	strb	r1, [r2, #0]
1004956e:	001a      	movs	r2, r3
10049570:	697b      	ldr	r3, [r7, #20]
10049572:	189b      	adds	r3, r3, r2
10049574:	225e      	movs	r2, #94	@ 0x5e
10049576:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10049578:	4a71      	ldr	r2, [pc, #452]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004957a:	239e      	movs	r3, #158	@ 0x9e
1004957c:	009b      	lsls	r3, r3, #2
1004957e:	58d1      	ldr	r1, [r2, r3]
10049580:	183b      	adds	r3, r7, r0
10049582:	781b      	ldrb	r3, [r3, #0]
10049584:	0004      	movs	r4, r0
10049586:	183a      	adds	r2, r7, r0
10049588:	1c58      	adds	r0, r3, #1
1004958a:	7010      	strb	r0, [r2, #0]
1004958c:	001a      	movs	r2, r3
1004958e:	697b      	ldr	r3, [r7, #20]
10049590:	189b      	adds	r3, r3, r2
10049592:	b2ca      	uxtb	r2, r1
10049594:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10049596:	0020      	movs	r0, r4
10049598:	183b      	adds	r3, r7, r0
1004959a:	781b      	ldrb	r3, [r3, #0]
1004959c:	183a      	adds	r2, r7, r0
1004959e:	1c59      	adds	r1, r3, #1
100495a0:	7011      	strb	r1, [r2, #0]
100495a2:	001a      	movs	r2, r3
100495a4:	697b      	ldr	r3, [r7, #20]
100495a6:	189b      	adds	r3, r3, r2
100495a8:	2201      	movs	r2, #1
100495aa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
100495ac:	183b      	adds	r3, r7, r0
100495ae:	781b      	ldrb	r3, [r3, #0]
100495b0:	183a      	adds	r2, r7, r0
100495b2:	1c59      	adds	r1, r3, #1
100495b4:	7011      	strb	r1, [r2, #0]
100495b6:	001a      	movs	r2, r3
100495b8:	697b      	ldr	r3, [r7, #20]
100495ba:	189b      	adds	r3, r3, r2
100495bc:	225d      	movs	r2, #93	@ 0x5d
100495be:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
100495c0:	4a5f      	ldr	r2, [pc, #380]	@ (10049740 <HAL_RADIO_Init+0x488>)
100495c2:	239d      	movs	r3, #157	@ 0x9d
100495c4:	009b      	lsls	r3, r3, #2
100495c6:	58d1      	ldr	r1, [r2, r3]
100495c8:	183b      	adds	r3, r7, r0
100495ca:	781b      	ldrb	r3, [r3, #0]
100495cc:	0004      	movs	r4, r0
100495ce:	183a      	adds	r2, r7, r0
100495d0:	1c58      	adds	r0, r3, #1
100495d2:	7010      	strb	r0, [r2, #0]
100495d4:	001a      	movs	r2, r3
100495d6:	697b      	ldr	r3, [r7, #20]
100495d8:	189b      	adds	r3, r3, r2
100495da:	b2ca      	uxtb	r2, r1
100495dc:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100495de:	0020      	movs	r0, r4
100495e0:	183b      	adds	r3, r7, r0
100495e2:	781b      	ldrb	r3, [r3, #0]
100495e4:	183a      	adds	r2, r7, r0
100495e6:	1c59      	adds	r1, r3, #1
100495e8:	7011      	strb	r1, [r2, #0]
100495ea:	001a      	movs	r2, r3
100495ec:	697b      	ldr	r3, [r7, #20]
100495ee:	189b      	adds	r3, r3, r2
100495f0:	2201      	movs	r2, #1
100495f2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
100495f4:	183b      	adds	r3, r7, r0
100495f6:	781b      	ldrb	r3, [r3, #0]
100495f8:	183a      	adds	r2, r7, r0
100495fa:	1c59      	adds	r1, r3, #1
100495fc:	7011      	strb	r1, [r2, #0]
100495fe:	001a      	movs	r2, r3
10049600:	697b      	ldr	r3, [r7, #20]
10049602:	189b      	adds	r3, r3, r2
10049604:	2252      	movs	r2, #82	@ 0x52
10049606:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
10049608:	4a4d      	ldr	r2, [pc, #308]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004960a:	2392      	movs	r3, #146	@ 0x92
1004960c:	009b      	lsls	r3, r3, #2
1004960e:	58d1      	ldr	r1, [r2, r3]
10049610:	183b      	adds	r3, r7, r0
10049612:	781b      	ldrb	r3, [r3, #0]
10049614:	0004      	movs	r4, r0
10049616:	183a      	adds	r2, r7, r0
10049618:	1c58      	adds	r0, r3, #1
1004961a:	7010      	strb	r0, [r2, #0]
1004961c:	001a      	movs	r2, r3
1004961e:	697b      	ldr	r3, [r7, #20]
10049620:	189b      	adds	r3, r3, r2
10049622:	b2ca      	uxtb	r2, r1
10049624:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10049626:	0020      	movs	r0, r4
10049628:	183b      	adds	r3, r7, r0
1004962a:	781b      	ldrb	r3, [r3, #0]
1004962c:	183a      	adds	r2, r7, r0
1004962e:	1c59      	adds	r1, r3, #1
10049630:	7011      	strb	r1, [r2, #0]
10049632:	001a      	movs	r2, r3
10049634:	697b      	ldr	r3, [r7, #20]
10049636:	189b      	adds	r3, r3, r2
10049638:	2201      	movs	r2, #1
1004963a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004963c:	183b      	adds	r3, r7, r0
1004963e:	781b      	ldrb	r3, [r3, #0]
10049640:	183a      	adds	r2, r7, r0
10049642:	1c59      	adds	r1, r3, #1
10049644:	7011      	strb	r1, [r2, #0]
10049646:	001a      	movs	r2, r3
10049648:	697b      	ldr	r3, [r7, #20]
1004964a:	189b      	adds	r3, r3, r2
1004964c:	2212      	movs	r2, #18
1004964e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
10049650:	4a3b      	ldr	r2, [pc, #236]	@ (10049740 <HAL_RADIO_Init+0x488>)
10049652:	23a4      	movs	r3, #164	@ 0xa4
10049654:	005b      	lsls	r3, r3, #1
10049656:	58d1      	ldr	r1, [r2, r3]
10049658:	183b      	adds	r3, r7, r0
1004965a:	781b      	ldrb	r3, [r3, #0]
1004965c:	0004      	movs	r4, r0
1004965e:	183a      	adds	r2, r7, r0
10049660:	1c58      	adds	r0, r3, #1
10049662:	7010      	strb	r0, [r2, #0]
10049664:	001a      	movs	r2, r3
10049666:	697b      	ldr	r3, [r7, #20]
10049668:	189b      	adds	r3, r3, r2
1004966a:	b2ca      	uxtb	r2, r1
1004966c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004966e:	0020      	movs	r0, r4
10049670:	183b      	adds	r3, r7, r0
10049672:	781b      	ldrb	r3, [r3, #0]
10049674:	183a      	adds	r2, r7, r0
10049676:	1c59      	adds	r1, r3, #1
10049678:	7011      	strb	r1, [r2, #0]
1004967a:	001a      	movs	r2, r3
1004967c:	697b      	ldr	r3, [r7, #20]
1004967e:	189b      	adds	r3, r3, r2
10049680:	2201      	movs	r2, #1
10049682:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10049684:	183b      	adds	r3, r7, r0
10049686:	781b      	ldrb	r3, [r3, #0]
10049688:	183a      	adds	r2, r7, r0
1004968a:	1c59      	adds	r1, r3, #1
1004968c:	7011      	strb	r1, [r2, #0]
1004968e:	001a      	movs	r2, r3
10049690:	697b      	ldr	r3, [r7, #20]
10049692:	189b      	adds	r3, r3, r2
10049694:	2215      	movs	r2, #21
10049696:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10049698:	4a29      	ldr	r2, [pc, #164]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004969a:	23aa      	movs	r3, #170	@ 0xaa
1004969c:	005b      	lsls	r3, r3, #1
1004969e:	58d1      	ldr	r1, [r2, r3]
100496a0:	183b      	adds	r3, r7, r0
100496a2:	781b      	ldrb	r3, [r3, #0]
100496a4:	0004      	movs	r4, r0
100496a6:	183a      	adds	r2, r7, r0
100496a8:	1c58      	adds	r0, r3, #1
100496aa:	7010      	strb	r0, [r2, #0]
100496ac:	001a      	movs	r2, r3
100496ae:	697b      	ldr	r3, [r7, #20]
100496b0:	189b      	adds	r3, r3, r2
100496b2:	b2ca      	uxtb	r2, r1
100496b4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100496b6:	0020      	movs	r0, r4
100496b8:	183b      	adds	r3, r7, r0
100496ba:	781b      	ldrb	r3, [r3, #0]
100496bc:	183a      	adds	r2, r7, r0
100496be:	1c59      	adds	r1, r3, #1
100496c0:	7011      	strb	r1, [r2, #0]
100496c2:	001a      	movs	r2, r3
100496c4:	697b      	ldr	r3, [r7, #20]
100496c6:	189b      	adds	r3, r3, r2
100496c8:	2201      	movs	r2, #1
100496ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
100496cc:	183b      	adds	r3, r7, r0
100496ce:	781b      	ldrb	r3, [r3, #0]
100496d0:	183a      	adds	r2, r7, r0
100496d2:	1c59      	adds	r1, r3, #1
100496d4:	7011      	strb	r1, [r2, #0]
100496d6:	001a      	movs	r2, r3
100496d8:	697b      	ldr	r3, [r7, #20]
100496da:	189b      	adds	r3, r3, r2
100496dc:	221a      	movs	r2, #26
100496de:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
100496e0:	4a17      	ldr	r2, [pc, #92]	@ (10049740 <HAL_RADIO_Init+0x488>)
100496e2:	23b4      	movs	r3, #180	@ 0xb4
100496e4:	005b      	lsls	r3, r3, #1
100496e6:	58d1      	ldr	r1, [r2, r3]
100496e8:	183b      	adds	r3, r7, r0
100496ea:	781b      	ldrb	r3, [r3, #0]
100496ec:	0004      	movs	r4, r0
100496ee:	183a      	adds	r2, r7, r0
100496f0:	1c58      	adds	r0, r3, #1
100496f2:	7010      	strb	r0, [r2, #0]
100496f4:	001a      	movs	r2, r3
100496f6:	697b      	ldr	r3, [r7, #20]
100496f8:	189b      	adds	r3, r3, r2
100496fa:	b2ca      	uxtb	r2, r1
100496fc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100496fe:	0020      	movs	r0, r4
10049700:	183b      	adds	r3, r7, r0
10049702:	781b      	ldrb	r3, [r3, #0]
10049704:	183a      	adds	r2, r7, r0
10049706:	1c59      	adds	r1, r3, #1
10049708:	7011      	strb	r1, [r2, #0]
1004970a:	001a      	movs	r2, r3
1004970c:	697b      	ldr	r3, [r7, #20]
1004970e:	189b      	adds	r3, r3, r2
10049710:	2201      	movs	r2, #1
10049712:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
10049714:	183b      	adds	r3, r7, r0
10049716:	781b      	ldrb	r3, [r3, #0]
10049718:	183a      	adds	r2, r7, r0
1004971a:	1c59      	adds	r1, r3, #1
1004971c:	7011      	strb	r1, [r2, #0]
1004971e:	001a      	movs	r2, r3
10049720:	697b      	ldr	r3, [r7, #20]
10049722:	189b      	adds	r3, r3, r2
10049724:	2222      	movs	r2, #34	@ 0x22
10049726:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
10049728:	4a05      	ldr	r2, [pc, #20]	@ (10049740 <HAL_RADIO_Init+0x488>)
1004972a:	23c4      	movs	r3, #196	@ 0xc4
1004972c:	005b      	lsls	r3, r3, #1
1004972e:	58d1      	ldr	r1, [r2, r3]
10049730:	183b      	adds	r3, r7, r0
10049732:	781b      	ldrb	r3, [r3, #0]
10049734:	0004      	movs	r4, r0
10049736:	e005      	b.n	10049744 <HAL_RADIO_Init+0x48c>
10049738:	200000c0 	.word	0x200000c0
1004973c:	60001800 	.word	0x60001800
10049740:	60001400 	.word	0x60001400
10049744:	183a      	adds	r2, r7, r0
10049746:	1c58      	adds	r0, r3, #1
10049748:	7010      	strb	r0, [r2, #0]
1004974a:	001a      	movs	r2, r3
1004974c:	697b      	ldr	r3, [r7, #20]
1004974e:	189b      	adds	r3, r3, r2
10049750:	b2ca      	uxtb	r2, r1
10049752:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10049754:	0020      	movs	r0, r4
10049756:	183b      	adds	r3, r7, r0
10049758:	781b      	ldrb	r3, [r3, #0]
1004975a:	183a      	adds	r2, r7, r0
1004975c:	1c59      	adds	r1, r3, #1
1004975e:	7011      	strb	r1, [r2, #0]
10049760:	001a      	movs	r2, r3
10049762:	697b      	ldr	r3, [r7, #20]
10049764:	189b      	adds	r3, r3, r2
10049766:	2201      	movs	r2, #1
10049768:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004976a:	183b      	adds	r3, r7, r0
1004976c:	781b      	ldrb	r3, [r3, #0]
1004976e:	183a      	adds	r2, r7, r0
10049770:	1c59      	adds	r1, r3, #1
10049772:	7011      	strb	r1, [r2, #0]
10049774:	001a      	movs	r2, r3
10049776:	697b      	ldr	r3, [r7, #20]
10049778:	189b      	adds	r3, r3, r2
1004977a:	2221      	movs	r2, #33	@ 0x21
1004977c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004977e:	4a6d      	ldr	r2, [pc, #436]	@ (10049934 <HAL_RADIO_Init+0x67c>)
10049780:	23c2      	movs	r3, #194	@ 0xc2
10049782:	005b      	lsls	r3, r3, #1
10049784:	58d1      	ldr	r1, [r2, r3]
10049786:	183b      	adds	r3, r7, r0
10049788:	781b      	ldrb	r3, [r3, #0]
1004978a:	0004      	movs	r4, r0
1004978c:	183a      	adds	r2, r7, r0
1004978e:	1c58      	adds	r0, r3, #1
10049790:	7010      	strb	r0, [r2, #0]
10049792:	001a      	movs	r2, r3
10049794:	697b      	ldr	r3, [r7, #20]
10049796:	189b      	adds	r3, r3, r2
10049798:	b2ca      	uxtb	r2, r1
1004979a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004979c:	0020      	movs	r0, r4
1004979e:	183b      	adds	r3, r7, r0
100497a0:	781b      	ldrb	r3, [r3, #0]
100497a2:	183a      	adds	r2, r7, r0
100497a4:	1c59      	adds	r1, r3, #1
100497a6:	7011      	strb	r1, [r2, #0]
100497a8:	001a      	movs	r2, r3
100497aa:	697b      	ldr	r3, [r7, #20]
100497ac:	189b      	adds	r3, r3, r2
100497ae:	2201      	movs	r2, #1
100497b0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
100497b2:	183b      	adds	r3, r7, r0
100497b4:	781b      	ldrb	r3, [r3, #0]
100497b6:	183a      	adds	r2, r7, r0
100497b8:	1c59      	adds	r1, r3, #1
100497ba:	7011      	strb	r1, [r2, #0]
100497bc:	001a      	movs	r2, r3
100497be:	697b      	ldr	r3, [r7, #20]
100497c0:	189b      	adds	r3, r3, r2
100497c2:	2223      	movs	r2, #35	@ 0x23
100497c4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
100497c6:	4a5b      	ldr	r2, [pc, #364]	@ (10049934 <HAL_RADIO_Init+0x67c>)
100497c8:	23c6      	movs	r3, #198	@ 0xc6
100497ca:	005b      	lsls	r3, r3, #1
100497cc:	58d1      	ldr	r1, [r2, r3]
100497ce:	183b      	adds	r3, r7, r0
100497d0:	781b      	ldrb	r3, [r3, #0]
100497d2:	0004      	movs	r4, r0
100497d4:	183a      	adds	r2, r7, r0
100497d6:	1c58      	adds	r0, r3, #1
100497d8:	7010      	strb	r0, [r2, #0]
100497da:	001a      	movs	r2, r3
100497dc:	697b      	ldr	r3, [r7, #20]
100497de:	189b      	adds	r3, r3, r2
100497e0:	b2ca      	uxtb	r2, r1
100497e2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100497e4:	0020      	movs	r0, r4
100497e6:	183b      	adds	r3, r7, r0
100497e8:	781b      	ldrb	r3, [r3, #0]
100497ea:	183a      	adds	r2, r7, r0
100497ec:	1c59      	adds	r1, r3, #1
100497ee:	7011      	strb	r1, [r2, #0]
100497f0:	001a      	movs	r2, r3
100497f2:	697b      	ldr	r3, [r7, #20]
100497f4:	189b      	adds	r3, r3, r2
100497f6:	2201      	movs	r2, #1
100497f8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
100497fa:	183b      	adds	r3, r7, r0
100497fc:	781b      	ldrb	r3, [r3, #0]
100497fe:	183a      	adds	r2, r7, r0
10049800:	1c59      	adds	r1, r3, #1
10049802:	7011      	strb	r1, [r2, #0]
10049804:	001a      	movs	r2, r3
10049806:	697b      	ldr	r3, [r7, #20]
10049808:	189b      	adds	r3, r3, r2
1004980a:	221b      	movs	r2, #27
1004980c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004980e:	4a49      	ldr	r2, [pc, #292]	@ (10049934 <HAL_RADIO_Init+0x67c>)
10049810:	23b6      	movs	r3, #182	@ 0xb6
10049812:	005b      	lsls	r3, r3, #1
10049814:	58d1      	ldr	r1, [r2, r3]
10049816:	183b      	adds	r3, r7, r0
10049818:	781b      	ldrb	r3, [r3, #0]
1004981a:	0004      	movs	r4, r0
1004981c:	183a      	adds	r2, r7, r0
1004981e:	1c58      	adds	r0, r3, #1
10049820:	7010      	strb	r0, [r2, #0]
10049822:	001a      	movs	r2, r3
10049824:	697b      	ldr	r3, [r7, #20]
10049826:	189b      	adds	r3, r3, r2
10049828:	b2ca      	uxtb	r2, r1
1004982a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004982c:	0020      	movs	r0, r4
1004982e:	183b      	adds	r3, r7, r0
10049830:	781b      	ldrb	r3, [r3, #0]
10049832:	183a      	adds	r2, r7, r0
10049834:	1c59      	adds	r1, r3, #1
10049836:	7011      	strb	r1, [r2, #0]
10049838:	001a      	movs	r2, r3
1004983a:	697b      	ldr	r3, [r7, #20]
1004983c:	189b      	adds	r3, r3, r2
1004983e:	2201      	movs	r2, #1
10049840:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
10049842:	183b      	adds	r3, r7, r0
10049844:	781b      	ldrb	r3, [r3, #0]
10049846:	183a      	adds	r2, r7, r0
10049848:	1c59      	adds	r1, r3, #1
1004984a:	7011      	strb	r1, [r2, #0]
1004984c:	001a      	movs	r2, r3
1004984e:	697b      	ldr	r3, [r7, #20]
10049850:	189b      	adds	r3, r3, r2
10049852:	2290      	movs	r2, #144	@ 0x90
10049854:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
10049856:	4a37      	ldr	r2, [pc, #220]	@ (10049934 <HAL_RADIO_Init+0x67c>)
10049858:	23d0      	movs	r3, #208	@ 0xd0
1004985a:	009b      	lsls	r3, r3, #2
1004985c:	58d1      	ldr	r1, [r2, r3]
1004985e:	183b      	adds	r3, r7, r0
10049860:	781b      	ldrb	r3, [r3, #0]
10049862:	0004      	movs	r4, r0
10049864:	183a      	adds	r2, r7, r0
10049866:	1c58      	adds	r0, r3, #1
10049868:	7010      	strb	r0, [r2, #0]
1004986a:	001a      	movs	r2, r3
1004986c:	697b      	ldr	r3, [r7, #20]
1004986e:	189b      	adds	r3, r3, r2
10049870:	b2ca      	uxtb	r2, r1
10049872:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10049874:	0020      	movs	r0, r4
10049876:	183b      	adds	r3, r7, r0
10049878:	781b      	ldrb	r3, [r3, #0]
1004987a:	183a      	adds	r2, r7, r0
1004987c:	1c59      	adds	r1, r3, #1
1004987e:	7011      	strb	r1, [r2, #0]
10049880:	001a      	movs	r2, r3
10049882:	697b      	ldr	r3, [r7, #20]
10049884:	189b      	adds	r3, r3, r2
10049886:	2201      	movs	r2, #1
10049888:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004988a:	183b      	adds	r3, r7, r0
1004988c:	781b      	ldrb	r3, [r3, #0]
1004988e:	183a      	adds	r2, r7, r0
10049890:	1c59      	adds	r1, r3, #1
10049892:	7011      	strb	r1, [r2, #0]
10049894:	001a      	movs	r2, r3
10049896:	697b      	ldr	r3, [r7, #20]
10049898:	189b      	adds	r3, r3, r2
1004989a:	2291      	movs	r2, #145	@ 0x91
1004989c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004989e:	4a25      	ldr	r2, [pc, #148]	@ (10049934 <HAL_RADIO_Init+0x67c>)
100498a0:	23d1      	movs	r3, #209	@ 0xd1
100498a2:	009b      	lsls	r3, r3, #2
100498a4:	58d1      	ldr	r1, [r2, r3]
100498a6:	183b      	adds	r3, r7, r0
100498a8:	781b      	ldrb	r3, [r3, #0]
100498aa:	0004      	movs	r4, r0
100498ac:	183a      	adds	r2, r7, r0
100498ae:	1c58      	adds	r0, r3, #1
100498b0:	7010      	strb	r0, [r2, #0]
100498b2:	001a      	movs	r2, r3
100498b4:	697b      	ldr	r3, [r7, #20]
100498b6:	189b      	adds	r3, r3, r2
100498b8:	b2ca      	uxtb	r2, r1
100498ba:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
100498bc:	193b      	adds	r3, r7, r4
100498be:	781b      	ldrb	r3, [r3, #0]
100498c0:	193a      	adds	r2, r7, r4
100498c2:	1c59      	adds	r1, r3, #1
100498c4:	7011      	strb	r1, [r2, #0]
100498c6:	001a      	movs	r2, r3
100498c8:	697b      	ldr	r3, [r7, #20]
100498ca:	189b      	adds	r3, r3, r2
100498cc:	2200      	movs	r2, #0
100498ce:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
100498d0:	4a19      	ldr	r2, [pc, #100]	@ (10049938 <HAL_RADIO_Init+0x680>)
100498d2:	4b1a      	ldr	r3, [pc, #104]	@ (1004993c <HAL_RADIO_Init+0x684>)
100498d4:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
100498d6:	4a18      	ldr	r2, [pc, #96]	@ (10049938 <HAL_RADIO_Init+0x680>)
100498d8:	4b18      	ldr	r3, [pc, #96]	@ (1004993c <HAL_RADIO_Init+0x684>)
100498da:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
100498dc:	4a18      	ldr	r2, [pc, #96]	@ (10049940 <HAL_RADIO_Init+0x688>)
100498de:	4b17      	ldr	r3, [pc, #92]	@ (1004993c <HAL_RADIO_Init+0x684>)
100498e0:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
100498e2:	4b16      	ldr	r3, [pc, #88]	@ (1004993c <HAL_RADIO_Init+0x684>)
100498e4:	2200      	movs	r2, #0
100498e6:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
100498e8:	4b14      	ldr	r3, [pc, #80]	@ (1004993c <HAL_RADIO_Init+0x684>)
100498ea:	681b      	ldr	r3, [r3, #0]
100498ec:	0018      	movs	r0, r3
100498ee:	f7ff fb3d 	bl	10048f6c <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
100498f2:	4b10      	ldr	r3, [pc, #64]	@ (10049934 <HAL_RADIO_Init+0x67c>)
100498f4:	2201      	movs	r2, #1
100498f6:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
100498f8:	f7ff fc8c 	bl	10049214 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
100498fc:	23c0      	movs	r3, #192	@ 0xc0
100498fe:	05db      	lsls	r3, r3, #23
10049900:	685b      	ldr	r3, [r3, #4]
10049902:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
10049904:	23c0      	movs	r3, #192	@ 0xc0
10049906:	05db      	lsls	r3, r3, #23
10049908:	68fa      	ldr	r2, [r7, #12]
1004990a:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004990c:	4b0d      	ldr	r3, [pc, #52]	@ (10049944 <HAL_RADIO_Init+0x68c>)
1004990e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049910:	4b0c      	ldr	r3, [pc, #48]	@ (10049944 <HAL_RADIO_Init+0x68c>)
10049912:	2101      	movs	r1, #1
10049914:	430a      	orrs	r2, r1
10049916:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
10049918:	4b0a      	ldr	r3, [pc, #40]	@ (10049944 <HAL_RADIO_Init+0x68c>)
1004991a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004991c:	4b09      	ldr	r3, [pc, #36]	@ (10049944 <HAL_RADIO_Init+0x68c>)
1004991e:	2101      	movs	r1, #1
10049920:	430a      	orrs	r2, r1
10049922:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
10049924:	23c0      	movs	r3, #192	@ 0xc0
10049926:	05db      	lsls	r3, r3, #23
10049928:	685b      	ldr	r3, [r3, #4]
1004992a:	60fb      	str	r3, [r7, #12]

  return;
1004992c:	46c0      	nop			@ (mov r8, r8)
}
1004992e:	46bd      	mov	sp, r7
10049930:	b00d      	add	sp, #52	@ 0x34
10049932:	bd90      	pop	{r4, r7, pc}
10049934:	60001400 	.word	0x60001400
10049938:	200021dc 	.word	0x200021dc
1004993c:	200021cc 	.word	0x200021cc
10049940:	200021d8 	.word	0x200021d8
10049944:	60001800 	.word	0x60001800

10049948 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10049948:	b580      	push	{r7, lr}
1004994a:	b086      	sub	sp, #24
1004994c:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004994e:	4a24      	ldr	r2, [pc, #144]	@ (100499e0 <HAL_RADIO_ReadRSSI+0x98>)
10049950:	23a9      	movs	r3, #169	@ 0xa9
10049952:	009b      	lsls	r3, r3, #2
10049954:	58d3      	ldr	r3, [r2, r3]
10049956:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10049958:	4a21      	ldr	r2, [pc, #132]	@ (100499e0 <HAL_RADIO_ReadRSSI+0x98>)
1004995a:	23aa      	movs	r3, #170	@ 0xaa
1004995c:	009b      	lsls	r3, r3, #2
1004995e:	58d3      	ldr	r3, [r2, r3]
10049960:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
10049962:	68bb      	ldr	r3, [r7, #8]
10049964:	021b      	lsls	r3, r3, #8
10049966:	041b      	lsls	r3, r3, #16
10049968:	0c1a      	lsrs	r2, r3, #16
1004996a:	68fb      	ldr	r3, [r7, #12]
1004996c:	21ff      	movs	r1, #255	@ 0xff
1004996e:	400b      	ands	r3, r1
10049970:	4313      	orrs	r3, r2
10049972:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
10049974:	4a1a      	ldr	r2, [pc, #104]	@ (100499e0 <HAL_RADIO_ReadRSSI+0x98>)
10049976:	23ab      	movs	r3, #171	@ 0xab
10049978:	009b      	lsls	r3, r3, #2
1004997a:	58d3      	ldr	r3, [r2, r3]
1004997c:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004997e:	693b      	ldr	r3, [r7, #16]
10049980:	2b00      	cmp	r3, #0
10049982:	d002      	beq.n	1004998a <HAL_RADIO_ReadRSSI+0x42>
10049984:	687b      	ldr	r3, [r7, #4]
10049986:	2b0b      	cmp	r3, #11
10049988:	d902      	bls.n	10049990 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004998a:	237f      	movs	r3, #127	@ 0x7f
1004998c:	617b      	str	r3, [r7, #20]
1004998e:	e020      	b.n	100499d2 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
10049990:	687a      	ldr	r2, [r7, #4]
10049992:	0013      	movs	r3, r2
10049994:	005b      	lsls	r3, r3, #1
10049996:	189b      	adds	r3, r3, r2
10049998:	005b      	lsls	r3, r3, #1
1004999a:	3b77      	subs	r3, #119	@ 0x77
1004999c:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004999e:	e005      	b.n	100499ac <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
100499a0:	697b      	ldr	r3, [r7, #20]
100499a2:	3306      	adds	r3, #6
100499a4:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
100499a6:	693b      	ldr	r3, [r7, #16]
100499a8:	085b      	lsrs	r3, r3, #1
100499aa:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
100499ac:	693b      	ldr	r3, [r7, #16]
100499ae:	2b1e      	cmp	r3, #30
100499b0:	d8f6      	bhi.n	100499a0 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
100499b2:	693a      	ldr	r2, [r7, #16]
100499b4:	0013      	movs	r3, r2
100499b6:	005b      	lsls	r3, r3, #1
100499b8:	189b      	adds	r3, r3, r2
100499ba:	009b      	lsls	r3, r3, #2
100499bc:	189b      	adds	r3, r3, r2
100499be:	015b      	lsls	r3, r3, #5
100499c0:	189b      	adds	r3, r3, r2
100499c2:	4a08      	ldr	r2, [pc, #32]	@ (100499e4 <HAL_RADIO_ReadRSSI+0x9c>)
100499c4:	4694      	mov	ip, r2
100499c6:	4463      	add	r3, ip
100499c8:	0a9b      	lsrs	r3, r3, #10
100499ca:	001a      	movs	r2, r3
100499cc:	697b      	ldr	r3, [r7, #20]
100499ce:	189b      	adds	r3, r3, r2
100499d0:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
100499d2:	697b      	ldr	r3, [r7, #20]
100499d4:	b25b      	sxtb	r3, r3
}
100499d6:	0018      	movs	r0, r3
100499d8:	46bd      	mov	sp, r7
100499da:	b006      	add	sp, #24
100499dc:	bd80      	pop	{r7, pc}
100499de:	46c0      	nop			@ (mov r8, r8)
100499e0:	60001400 	.word	0x60001400
100499e4:	000046a0 	.word	0x000046a0

100499e8 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
100499e8:	b580      	push	{r7, lr}
100499ea:	b082      	sub	sp, #8
100499ec:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
100499ee:	23c0      	movs	r3, #192	@ 0xc0
100499f0:	05db      	lsls	r3, r3, #23
100499f2:	69db      	ldr	r3, [r3, #28]
100499f4:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
100499f6:	23c0      	movs	r3, #192	@ 0xc0
100499f8:	05db      	lsls	r3, r3, #23
100499fa:	685b      	ldr	r3, [r3, #4]
100499fc:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
100499fe:	23c0      	movs	r3, #192	@ 0xc0
10049a00:	05db      	lsls	r3, r3, #23
10049a02:	683a      	ldr	r2, [r7, #0]
10049a04:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10049a06:	f000 fcd3 	bl	1004a3b0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10049a0a:	687a      	ldr	r2, [r7, #4]
10049a0c:	683b      	ldr	r3, [r7, #0]
10049a0e:	4313      	orrs	r3, r2
10049a10:	0018      	movs	r0, r3
10049a12:	f006 fd4a 	bl	100504aa <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10049a16:	f000 fcc5 	bl	1004a3a4 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10049a1a:	23c0      	movs	r3, #192	@ 0xc0
10049a1c:	05db      	lsls	r3, r3, #23
10049a1e:	685b      	ldr	r3, [r3, #4]
10049a20:	603b      	str	r3, [r7, #0]
}
10049a22:	46c0      	nop			@ (mov r8, r8)
10049a24:	46bd      	mov	sp, r7
10049a26:	b002      	add	sp, #8
10049a28:	bd80      	pop	{r7, pc}

10049a2a <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10049a2a:	b580      	push	{r7, lr}
10049a2c:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10049a2e:	f006 fb61 	bl	100500f4 <HAL_RADIO_TxRxSeqCallback>
}
10049a32:	46c0      	nop			@ (mov r8, r8)
10049a34:	46bd      	mov	sp, r7
10049a36:	bd80      	pop	{r7, pc}

10049a38 <__NVIC_EnableIRQ>:
{
10049a38:	b580      	push	{r7, lr}
10049a3a:	b082      	sub	sp, #8
10049a3c:	af00      	add	r7, sp, #0
10049a3e:	0002      	movs	r2, r0
10049a40:	1dfb      	adds	r3, r7, #7
10049a42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10049a44:	1dfb      	adds	r3, r7, #7
10049a46:	781b      	ldrb	r3, [r3, #0]
10049a48:	2b7f      	cmp	r3, #127	@ 0x7f
10049a4a:	d809      	bhi.n	10049a60 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10049a4c:	1dfb      	adds	r3, r7, #7
10049a4e:	781b      	ldrb	r3, [r3, #0]
10049a50:	001a      	movs	r2, r3
10049a52:	231f      	movs	r3, #31
10049a54:	401a      	ands	r2, r3
10049a56:	4b04      	ldr	r3, [pc, #16]	@ (10049a68 <__NVIC_EnableIRQ+0x30>)
10049a58:	2101      	movs	r1, #1
10049a5a:	4091      	lsls	r1, r2
10049a5c:	000a      	movs	r2, r1
10049a5e:	601a      	str	r2, [r3, #0]
}
10049a60:	46c0      	nop			@ (mov r8, r8)
10049a62:	46bd      	mov	sp, r7
10049a64:	b002      	add	sp, #8
10049a66:	bd80      	pop	{r7, pc}
10049a68:	e000e100 	.word	0xe000e100

10049a6c <LL_RADIO_TIMER_EnableTimer1>:
{
10049a6c:	b580      	push	{r7, lr}
10049a6e:	b082      	sub	sp, #8
10049a70:	af00      	add	r7, sp, #0
10049a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10049a74:	687b      	ldr	r3, [r7, #4]
10049a76:	68db      	ldr	r3, [r3, #12]
10049a78:	2203      	movs	r2, #3
10049a7a:	4393      	bics	r3, r2
10049a7c:	2202      	movs	r2, #2
10049a7e:	431a      	orrs	r2, r3
10049a80:	687b      	ldr	r3, [r7, #4]
10049a82:	60da      	str	r2, [r3, #12]
}
10049a84:	46c0      	nop			@ (mov r8, r8)
10049a86:	46bd      	mov	sp, r7
10049a88:	b002      	add	sp, #8
10049a8a:	bd80      	pop	{r7, pc}

10049a8c <LL_RADIO_TIMER_DisableTimer1>:
{
10049a8c:	b580      	push	{r7, lr}
10049a8e:	b082      	sub	sp, #8
10049a90:	af00      	add	r7, sp, #0
10049a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10049a94:	687b      	ldr	r3, [r7, #4]
10049a96:	68db      	ldr	r3, [r3, #12]
10049a98:	2203      	movs	r2, #3
10049a9a:	4393      	bics	r3, r2
10049a9c:	001a      	movs	r2, r3
10049a9e:	687b      	ldr	r3, [r7, #4]
10049aa0:	60da      	str	r2, [r3, #12]
}
10049aa2:	46c0      	nop			@ (mov r8, r8)
10049aa4:	46bd      	mov	sp, r7
10049aa6:	b002      	add	sp, #8
10049aa8:	bd80      	pop	{r7, pc}

10049aaa <LL_RADIO_TIMER_DisableTimer2>:
{
10049aaa:	b580      	push	{r7, lr}
10049aac:	b082      	sub	sp, #8
10049aae:	af00      	add	r7, sp, #0
10049ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10049ab2:	687b      	ldr	r3, [r7, #4]
10049ab4:	68db      	ldr	r3, [r3, #12]
10049ab6:	2203      	movs	r2, #3
10049ab8:	4393      	bics	r3, r2
10049aba:	001a      	movs	r2, r3
10049abc:	687b      	ldr	r3, [r7, #4]
10049abe:	60da      	str	r2, [r3, #12]
}
10049ac0:	46c0      	nop			@ (mov r8, r8)
10049ac2:	46bd      	mov	sp, r7
10049ac4:	b002      	add	sp, #8
10049ac6:	bd80      	pop	{r7, pc}

10049ac8 <LL_RADIO_TIMER_SetTimeout>:
{
10049ac8:	b580      	push	{r7, lr}
10049aca:	b082      	sub	sp, #8
10049acc:	af00      	add	r7, sp, #0
10049ace:	6078      	str	r0, [r7, #4]
10049ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10049ad2:	687b      	ldr	r3, [r7, #4]
10049ad4:	683a      	ldr	r2, [r7, #0]
10049ad6:	611a      	str	r2, [r3, #16]
}
10049ad8:	46c0      	nop			@ (mov r8, r8)
10049ada:	46bd      	mov	sp, r7
10049adc:	b002      	add	sp, #8
10049ade:	bd80      	pop	{r7, pc}

10049ae0 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10049ae0:	b580      	push	{r7, lr}
10049ae2:	b082      	sub	sp, #8
10049ae4:	af00      	add	r7, sp, #0
10049ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10049ae8:	687b      	ldr	r3, [r7, #4]
10049aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049aec:	2280      	movs	r2, #128	@ 0x80
10049aee:	05d2      	lsls	r2, r2, #23
10049af0:	431a      	orrs	r2, r3
10049af2:	687b      	ldr	r3, [r7, #4]
10049af4:	629a      	str	r2, [r3, #40]	@ 0x28
}
10049af6:	46c0      	nop			@ (mov r8, r8)
10049af8:	46bd      	mov	sp, r7
10049afa:	b002      	add	sp, #8
10049afc:	bd80      	pop	{r7, pc}
	...

10049b00 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10049b00:	b580      	push	{r7, lr}
10049b02:	b082      	sub	sp, #8
10049b04:	af00      	add	r7, sp, #0
10049b06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10049b08:	687b      	ldr	r3, [r7, #4]
10049b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049b0c:	4a03      	ldr	r2, [pc, #12]	@ (10049b1c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10049b0e:	401a      	ands	r2, r3
10049b10:	687b      	ldr	r3, [r7, #4]
10049b12:	629a      	str	r2, [r3, #40]	@ 0x28
}
10049b14:	46c0      	nop			@ (mov r8, r8)
10049b16:	46bd      	mov	sp, r7
10049b18:	b002      	add	sp, #8
10049b1a:	bd80      	pop	{r7, pc}
10049b1c:	bfffffff 	.word	0xbfffffff

10049b20 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
10049b20:	b580      	push	{r7, lr}
10049b22:	b082      	sub	sp, #8
10049b24:	af00      	add	r7, sp, #0
10049b26:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10049b28:	687b      	ldr	r3, [r7, #4]
10049b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10049b2c:	2280      	movs	r2, #128	@ 0x80
10049b2e:	05d2      	lsls	r2, r2, #23
10049b30:	431a      	orrs	r2, r3
10049b32:	687b      	ldr	r3, [r7, #4]
10049b34:	631a      	str	r2, [r3, #48]	@ 0x30
}
10049b36:	46c0      	nop			@ (mov r8, r8)
10049b38:	46bd      	mov	sp, r7
10049b3a:	b002      	add	sp, #8
10049b3c:	bd80      	pop	{r7, pc}
	...

10049b40 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
10049b40:	b580      	push	{r7, lr}
10049b42:	b082      	sub	sp, #8
10049b44:	af00      	add	r7, sp, #0
10049b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10049b48:	687b      	ldr	r3, [r7, #4]
10049b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10049b4c:	4a03      	ldr	r2, [pc, #12]	@ (10049b5c <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10049b4e:	401a      	ands	r2, r3
10049b50:	687b      	ldr	r3, [r7, #4]
10049b52:	631a      	str	r2, [r3, #48]	@ 0x30
}
10049b54:	46c0      	nop			@ (mov r8, r8)
10049b56:	46bd      	mov	sp, r7
10049b58:	b002      	add	sp, #8
10049b5a:	bd80      	pop	{r7, pc}
10049b5c:	bfffffff 	.word	0xbfffffff

10049b60 <LL_RADIO_TIMER_SetWakeupOffset>:
{
10049b60:	b580      	push	{r7, lr}
10049b62:	b082      	sub	sp, #8
10049b64:	af00      	add	r7, sp, #0
10049b66:	6078      	str	r0, [r7, #4]
10049b68:	000a      	movs	r2, r1
10049b6a:	1cfb      	adds	r3, r7, #3
10049b6c:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
10049b6e:	1cfb      	adds	r3, r7, #3
10049b70:	781a      	ldrb	r2, [r3, #0]
10049b72:	687b      	ldr	r3, [r7, #4]
10049b74:	609a      	str	r2, [r3, #8]
}
10049b76:	46c0      	nop			@ (mov r8, r8)
10049b78:	46bd      	mov	sp, r7
10049b7a:	b002      	add	sp, #8
10049b7c:	bd80      	pop	{r7, pc}

10049b7e <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
10049b7e:	b580      	push	{r7, lr}
10049b80:	b082      	sub	sp, #8
10049b82:	af00      	add	r7, sp, #0
10049b84:	6078      	str	r0, [r7, #4]
10049b86:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10049b88:	687b      	ldr	r3, [r7, #4]
10049b8a:	683a      	ldr	r2, [r7, #0]
10049b8c:	625a      	str	r2, [r3, #36]	@ 0x24
}
10049b8e:	46c0      	nop			@ (mov r8, r8)
10049b90:	46bd      	mov	sp, r7
10049b92:	b002      	add	sp, #8
10049b94:	bd80      	pop	{r7, pc}

10049b96 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
10049b96:	b580      	push	{r7, lr}
10049b98:	b082      	sub	sp, #8
10049b9a:	af00      	add	r7, sp, #0
10049b9c:	6078      	str	r0, [r7, #4]
10049b9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10049ba0:	687b      	ldr	r3, [r7, #4]
10049ba2:	683a      	ldr	r2, [r7, #0]
10049ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10049ba6:	46c0      	nop			@ (mov r8, r8)
10049ba8:	46bd      	mov	sp, r7
10049baa:	b002      	add	sp, #8
10049bac:	bd80      	pop	{r7, pc}

10049bae <LL_RADIO_TIMER_GetAbsoluteTime>:
{
10049bae:	b580      	push	{r7, lr}
10049bb0:	b082      	sub	sp, #8
10049bb2:	af00      	add	r7, sp, #0
10049bb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10049bb6:	687b      	ldr	r3, [r7, #4]
10049bb8:	691b      	ldr	r3, [r3, #16]
}
10049bba:	0018      	movs	r0, r3
10049bbc:	46bd      	mov	sp, r7
10049bbe:	b002      	add	sp, #8
10049bc0:	bd80      	pop	{r7, pc}

10049bc2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
10049bc2:	b580      	push	{r7, lr}
10049bc4:	b082      	sub	sp, #8
10049bc6:	af00      	add	r7, sp, #0
10049bc8:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10049bca:	687b      	ldr	r3, [r7, #4]
10049bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049bce:	2280      	movs	r2, #128	@ 0x80
10049bd0:	0592      	lsls	r2, r2, #22
10049bd2:	431a      	orrs	r2, r3
10049bd4:	687b      	ldr	r3, [r7, #4]
10049bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
10049bd8:	46c0      	nop			@ (mov r8, r8)
10049bda:	46bd      	mov	sp, r7
10049bdc:	b002      	add	sp, #8
10049bde:	bd80      	pop	{r7, pc}

10049be0 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10049be0:	b580      	push	{r7, lr}
10049be2:	b082      	sub	sp, #8
10049be4:	af00      	add	r7, sp, #0
10049be6:	6078      	str	r0, [r7, #4]
10049be8:	000a      	movs	r2, r1
10049bea:	1cfb      	adds	r3, r7, #3
10049bec:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
10049bee:	4b08      	ldr	r3, [pc, #32]	@ (10049c10 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10049bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049bf2:	2207      	movs	r2, #7
10049bf4:	4393      	bics	r3, r2
10049bf6:	0019      	movs	r1, r3
10049bf8:	1cfb      	adds	r3, r7, #3
10049bfa:	781b      	ldrb	r3, [r3, #0]
10049bfc:	2207      	movs	r2, #7
10049bfe:	401a      	ands	r2, r3
10049c00:	4b03      	ldr	r3, [pc, #12]	@ (10049c10 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10049c02:	430a      	orrs	r2, r1
10049c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
10049c06:	46c0      	nop			@ (mov r8, r8)
10049c08:	46bd      	mov	sp, r7
10049c0a:	b002      	add	sp, #8
10049c0c:	bd80      	pop	{r7, pc}
10049c0e:	46c0      	nop			@ (mov r8, r8)
10049c10:	60001800 	.word	0x60001800

10049c14 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10049c14:	b580      	push	{r7, lr}
10049c16:	b082      	sub	sp, #8
10049c18:	af00      	add	r7, sp, #0
10049c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
10049c1c:	687b      	ldr	r3, [r7, #4]
10049c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10049c20:	2201      	movs	r2, #1
10049c22:	431a      	orrs	r2, r3
10049c24:	687b      	ldr	r3, [r7, #4]
10049c26:	649a      	str	r2, [r3, #72]	@ 0x48
}
10049c28:	46c0      	nop			@ (mov r8, r8)
10049c2a:	46bd      	mov	sp, r7
10049c2c:	b002      	add	sp, #8
10049c2e:	bd80      	pop	{r7, pc}

10049c30 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10049c30:	b580      	push	{r7, lr}
10049c32:	b082      	sub	sp, #8
10049c34:	af00      	add	r7, sp, #0
10049c36:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
10049c38:	687b      	ldr	r3, [r7, #4]
10049c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049c3c:	2201      	movs	r2, #1
10049c3e:	431a      	orrs	r2, r3
10049c40:	687b      	ldr	r3, [r7, #4]
10049c42:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10049c44:	46c0      	nop			@ (mov r8, r8)
10049c46:	46bd      	mov	sp, r7
10049c48:	b002      	add	sp, #8
10049c4a:	bd80      	pop	{r7, pc}

10049c4c <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10049c4c:	b580      	push	{r7, lr}
10049c4e:	b082      	sub	sp, #8
10049c50:	af00      	add	r7, sp, #0
10049c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10049c54:	687b      	ldr	r3, [r7, #4]
10049c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049c58:	2201      	movs	r2, #1
10049c5a:	4013      	ands	r3, r2
10049c5c:	2b01      	cmp	r3, #1
10049c5e:	d101      	bne.n	10049c64 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10049c60:	2301      	movs	r3, #1
10049c62:	e000      	b.n	10049c66 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
10049c64:	2300      	movs	r3, #0
}
10049c66:	0018      	movs	r0, r3
10049c68:	46bd      	mov	sp, r7
10049c6a:	b002      	add	sp, #8
10049c6c:	bd80      	pop	{r7, pc}

10049c6e <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
10049c6e:	b580      	push	{r7, lr}
10049c70:	b082      	sub	sp, #8
10049c72:	af00      	add	r7, sp, #0
10049c74:	6078      	str	r0, [r7, #4]
10049c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
10049c78:	687b      	ldr	r3, [r7, #4]
10049c7a:	683a      	ldr	r2, [r7, #0]
10049c7c:	605a      	str	r2, [r3, #4]
}
10049c7e:	46c0      	nop			@ (mov r8, r8)
10049c80:	46bd      	mov	sp, r7
10049c82:	b002      	add	sp, #8
10049c84:	bd80      	pop	{r7, pc}

10049c86 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10049c86:	b580      	push	{r7, lr}
10049c88:	b082      	sub	sp, #8
10049c8a:	af00      	add	r7, sp, #0
10049c8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10049c8e:	687b      	ldr	r3, [r7, #4]
10049c90:	2200      	movs	r2, #0
10049c92:	609a      	str	r2, [r3, #8]
}
10049c94:	46c0      	nop			@ (mov r8, r8)
10049c96:	46bd      	mov	sp, r7
10049c98:	b002      	add	sp, #8
10049c9a:	bd80      	pop	{r7, pc}

10049c9c <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10049c9c:	b580      	push	{r7, lr}
10049c9e:	b082      	sub	sp, #8
10049ca0:	af00      	add	r7, sp, #0
10049ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
10049ca4:	687b      	ldr	r3, [r7, #4]
10049ca6:	689b      	ldr	r3, [r3, #8]
}
10049ca8:	0018      	movs	r0, r3
10049caa:	46bd      	mov	sp, r7
10049cac:	b002      	add	sp, #8
10049cae:	bd80      	pop	{r7, pc}

10049cb0 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10049cb0:	b580      	push	{r7, lr}
10049cb2:	b082      	sub	sp, #8
10049cb4:	af00      	add	r7, sp, #0
10049cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
10049cb8:	687b      	ldr	r3, [r7, #4]
10049cba:	68db      	ldr	r3, [r3, #12]
}
10049cbc:	0018      	movs	r0, r3
10049cbe:	46bd      	mov	sp, r7
10049cc0:	b002      	add	sp, #8
10049cc2:	bd80      	pop	{r7, pc}

10049cc4 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10049cc4:	b580      	push	{r7, lr}
10049cc6:	b082      	sub	sp, #8
10049cc8:	af00      	add	r7, sp, #0
10049cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10049ccc:	687b      	ldr	r3, [r7, #4]
10049cce:	691b      	ldr	r3, [r3, #16]
10049cd0:	2201      	movs	r2, #1
10049cd2:	431a      	orrs	r2, r3
10049cd4:	687b      	ldr	r3, [r7, #4]
10049cd6:	611a      	str	r2, [r3, #16]
}
10049cd8:	46c0      	nop			@ (mov r8, r8)
10049cda:	46bd      	mov	sp, r7
10049cdc:	b002      	add	sp, #8
10049cde:	bd80      	pop	{r7, pc}

10049ce0 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10049ce0:	b580      	push	{r7, lr}
10049ce2:	b082      	sub	sp, #8
10049ce4:	af00      	add	r7, sp, #0
10049ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
10049ce8:	687b      	ldr	r3, [r7, #4]
10049cea:	691b      	ldr	r3, [r3, #16]
10049cec:	2201      	movs	r2, #1
10049cee:	4013      	ands	r3, r2
10049cf0:	2b01      	cmp	r3, #1
10049cf2:	d101      	bne.n	10049cf8 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
10049cf4:	2301      	movs	r3, #1
10049cf6:	e000      	b.n	10049cfa <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
10049cf8:	2300      	movs	r3, #0
}
10049cfa:	0018      	movs	r0, r3
10049cfc:	46bd      	mov	sp, r7
10049cfe:	b002      	add	sp, #8
10049d00:	bd80      	pop	{r7, pc}
	...

10049d04 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
10049d04:	b5f0      	push	{r4, r5, r6, r7, lr}
10049d06:	b083      	sub	sp, #12
10049d08:	af00      	add	r7, sp, #0
10049d0a:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10049d0c:	4b71      	ldr	r3, [pc, #452]	@ (10049ed4 <HAL_RADIO_TIMER_Init+0x1d0>)
10049d0e:	0018      	movs	r0, r3
10049d10:	f7ff ff8e 	bl	10049c30 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
10049d14:	4b6f      	ldr	r3, [pc, #444]	@ (10049ed4 <HAL_RADIO_TIMER_Init+0x1d0>)
10049d16:	0018      	movs	r0, r3
10049d18:	f7ff ff7c 	bl	10049c14 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10049d1c:	2017      	movs	r0, #23
10049d1e:	f7ff fe8b 	bl	10049a38 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
10049d22:	2014      	movs	r0, #20
10049d24:	f7ff fe88 	bl	10049a38 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
10049d28:	687b      	ldr	r3, [r7, #4]
10049d2a:	685b      	ldr	r3, [r3, #4]
10049d2c:	1e5a      	subs	r2, r3, #1
10049d2e:	4193      	sbcs	r3, r2
10049d30:	b2db      	uxtb	r3, r3
10049d32:	001a      	movs	r2, r3
10049d34:	4b68      	ldr	r3, [pc, #416]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d36:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
10049d38:	4b67      	ldr	r3, [pc, #412]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d3a:	781b      	ldrb	r3, [r3, #0]
10049d3c:	2b00      	cmp	r3, #0
10049d3e:	d103      	bne.n	10049d48 <HAL_RADIO_TIMER_Init+0x44>
10049d40:	687b      	ldr	r3, [r7, #4]
10049d42:	789b      	ldrb	r3, [r3, #2]
10049d44:	2b00      	cmp	r3, #0
10049d46:	d002      	beq.n	10049d4e <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
10049d48:	f000 fc0a 	bl	1004a560 <_calibrationProcedure>
10049d4c:	e010      	b.n	10049d70 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
10049d4e:	4b62      	ldr	r3, [pc, #392]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d50:	22c8      	movs	r2, #200	@ 0xc8
10049d52:	0352      	lsls	r2, r2, #13
10049d54:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
10049d56:	4b60      	ldr	r3, [pc, #384]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d58:	22c8      	movs	r2, #200	@ 0xc8
10049d5a:	0352      	lsls	r2, r2, #13
10049d5c:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
10049d5e:	4b5e      	ldr	r3, [pc, #376]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d60:	4a5e      	ldr	r2, [pc, #376]	@ (10049edc <HAL_RADIO_TIMER_Init+0x1d8>)
10049d62:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
10049d64:	4b5c      	ldr	r3, [pc, #368]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d66:	4a5e      	ldr	r2, [pc, #376]	@ (10049ee0 <HAL_RADIO_TIMER_Init+0x1dc>)
10049d68:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
10049d6a:	4b5b      	ldr	r3, [pc, #364]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d6c:	4a5d      	ldr	r2, [pc, #372]	@ (10049ee4 <HAL_RADIO_TIMER_Init+0x1e0>)
10049d6e:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
10049d70:	687b      	ldr	r3, [r7, #4]
10049d72:	685b      	ldr	r3, [r3, #4]
10049d74:	2b00      	cmp	r3, #0
10049d76:	d108      	bne.n	10049d8a <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
10049d78:	23a0      	movs	r3, #160	@ 0xa0
10049d7a:	05db      	lsls	r3, r3, #23
10049d7c:	0018      	movs	r0, r3
10049d7e:	f000 fb23 	bl	1004a3c8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10049d82:	0002      	movs	r2, r0
10049d84:	4b54      	ldr	r3, [pc, #336]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d86:	605a      	str	r2, [r3, #4]
10049d88:	e01d      	b.n	10049dc6 <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
10049d8a:	687b      	ldr	r3, [r7, #4]
10049d8c:	685b      	ldr	r3, [r3, #4]
10049d8e:	031b      	lsls	r3, r3, #12
10049d90:	210a      	movs	r1, #10
10049d92:	0018      	movs	r0, r3
10049d94:	f7f6 fa54 	bl	10040240 <__udivsi3>
10049d98:	0003      	movs	r3, r0
10049d9a:	001a      	movs	r2, r3
10049d9c:	4b4e      	ldr	r3, [pc, #312]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049d9e:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10049da0:	4b4d      	ldr	r3, [pc, #308]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049da2:	685e      	ldr	r6, [r3, #4]
10049da4:	4b50      	ldr	r3, [pc, #320]	@ (10049ee8 <HAL_RADIO_TIMER_Init+0x1e4>)
10049da6:	0018      	movs	r0, r3
10049da8:	f000 fb0e 	bl	1004a3c8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10049dac:	0003      	movs	r3, r0
10049dae:	429e      	cmp	r6, r3
10049db0:	d202      	bcs.n	10049db8 <HAL_RADIO_TIMER_Init+0xb4>
10049db2:	4b49      	ldr	r3, [pc, #292]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049db4:	685a      	ldr	r2, [r3, #4]
10049db6:	e004      	b.n	10049dc2 <HAL_RADIO_TIMER_Init+0xbe>
10049db8:	4b4b      	ldr	r3, [pc, #300]	@ (10049ee8 <HAL_RADIO_TIMER_Init+0x1e4>)
10049dba:	0018      	movs	r0, r3
10049dbc:	f000 fb04 	bl	1004a3c8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10049dc0:	0002      	movs	r2, r0
10049dc2:	4b45      	ldr	r3, [pc, #276]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049dc4:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration = CALIBRATION_CHECK_DURATION;
10049dc6:	4b44      	ldr	r3, [pc, #272]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049dc8:	2264      	movs	r2, #100	@ 0x64
10049dca:	609a      	str	r2, [r3, #8]
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10049dcc:	4b42      	ldr	r3, [pc, #264]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049dce:	2200      	movs	r2, #0
10049dd0:	731a      	strb	r2, [r3, #12]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
10049dd2:	687b      	ldr	r3, [r7, #4]
10049dd4:	881b      	ldrh	r3, [r3, #0]
10049dd6:	001a      	movs	r2, r3
10049dd8:	4b3f      	ldr	r3, [pc, #252]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049dda:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
10049ddc:	4b3e      	ldr	r3, [pc, #248]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10049de0:	b29a      	uxth	r2, r3
10049de2:	4b3d      	ldr	r3, [pc, #244]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049de4:	699b      	ldr	r3, [r3, #24]
10049de6:	0019      	movs	r1, r3
10049de8:	0010      	movs	r0, r2
10049dea:	f000 fd2d 	bl	1004a848 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
10049dee:	4b3a      	ldr	r3, [pc, #232]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049df0:	2284      	movs	r2, #132	@ 0x84
10049df2:	2100      	movs	r1, #0
10049df4:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
10049df6:	4938      	ldr	r1, [pc, #224]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049df8:	2200      	movs	r2, #0
10049dfa:	2300      	movs	r3, #0
10049dfc:	670a      	str	r2, [r1, #112]	@ 0x70
10049dfe:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10049e00:	4b34      	ldr	r3, [pc, #208]	@ (10049ed4 <HAL_RADIO_TIMER_Init+0x1d0>)
10049e02:	0018      	movs	r0, r3
10049e04:	f7ff fed3 	bl	10049bae <LL_RADIO_TIMER_GetAbsoluteTime>
10049e08:	0002      	movs	r2, r0
10049e0a:	4b33      	ldr	r3, [pc, #204]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e0c:	2180      	movs	r1, #128	@ 0x80
10049e0e:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
10049e10:	4931      	ldr	r1, [pc, #196]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e12:	2200      	movs	r2, #0
10049e14:	2300      	movs	r3, #0
10049e16:	678a      	str	r2, [r1, #120]	@ 0x78
10049e18:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10049e1a:	492f      	ldr	r1, [pc, #188]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e1c:	2200      	movs	r2, #0
10049e1e:	2300      	movs	r3, #0
10049e20:	628a      	str	r2, [r1, #40]	@ 0x28
10049e22:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
10049e24:	4b2c      	ldr	r3, [pc, #176]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e26:	2234      	movs	r2, #52	@ 0x34
10049e28:	2100      	movs	r1, #0
10049e2a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10049e2c:	4b2a      	ldr	r3, [pc, #168]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e2e:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10049e30:	4b29      	ldr	r3, [pc, #164]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e32:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10049e34:	0019      	movs	r1, r3
10049e36:	4b2d      	ldr	r3, [pc, #180]	@ (10049eec <HAL_RADIO_TIMER_Init+0x1e8>)
10049e38:	001a      	movs	r2, r3
10049e3a:	f7f6 f941 	bl	100400c0 <blue_unit_conversion>
10049e3e:	0002      	movs	r2, r0
10049e40:	4b25      	ldr	r3, [pc, #148]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e42:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
10049e44:	4b24      	ldr	r3, [pc, #144]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e46:	7819      	ldrb	r1, [r3, #0]
10049e48:	4b23      	ldr	r3, [pc, #140]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e4a:	2294      	movs	r2, #148	@ 0x94
10049e4c:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
10049e4e:	4b22      	ldr	r3, [pc, #136]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e50:	228c      	movs	r2, #140	@ 0x8c
10049e52:	2100      	movs	r1, #0
10049e54:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
10049e56:	4b20      	ldr	r3, [pc, #128]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e58:	2290      	movs	r2, #144	@ 0x90
10049e5a:	2101      	movs	r1, #1
10049e5c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
10049e5e:	4b1e      	ldr	r3, [pc, #120]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e60:	2293      	movs	r2, #147	@ 0x93
10049e62:	2100      	movs	r1, #0
10049e64:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
10049e66:	4b1c      	ldr	r3, [pc, #112]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e68:	2291      	movs	r2, #145	@ 0x91
10049e6a:	2100      	movs	r1, #0
10049e6c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
10049e6e:	4b1a      	ldr	r3, [pc, #104]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e70:	2292      	movs	r2, #146	@ 0x92
10049e72:	2100      	movs	r1, #0
10049e74:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10049e76:	4b18      	ldr	r3, [pc, #96]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e78:	2261      	movs	r2, #97	@ 0x61
10049e7a:	2100      	movs	r1, #0
10049e7c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10049e7e:	4b16      	ldr	r3, [pc, #88]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e80:	2262      	movs	r2, #98	@ 0x62
10049e82:	2100      	movs	r1, #0
10049e84:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10049e86:	4b14      	ldr	r3, [pc, #80]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e88:	2263      	movs	r2, #99	@ 0x63
10049e8a:	2100      	movs	r1, #0
10049e8c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10049e8e:	4912      	ldr	r1, [pc, #72]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e90:	2200      	movs	r2, #0
10049e92:	2300      	movs	r3, #0
10049e94:	658a      	str	r2, [r1, #88]	@ 0x58
10049e96:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
10049e98:	4b0f      	ldr	r3, [pc, #60]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049e9a:	4a15      	ldr	r2, [pc, #84]	@ (10049ef0 <HAL_RADIO_TIMER_Init+0x1ec>)
10049e9c:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10049e9e:	4b0e      	ldr	r3, [pc, #56]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049ea0:	2200      	movs	r2, #0
10049ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10049ea4:	f000 faa6 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10049ea8:	0002      	movs	r2, r0
10049eaa:	000b      	movs	r3, r1
10049eac:	490a      	ldr	r1, [pc, #40]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049eae:	6849      	ldr	r1, [r1, #4]
10049eb0:	000c      	movs	r4, r1
10049eb2:	2100      	movs	r1, #0
10049eb4:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10049eb6:	1912      	adds	r2, r2, r4
10049eb8:	416b      	adcs	r3, r5
10049eba:	490e      	ldr	r1, [pc, #56]	@ (10049ef4 <HAL_RADIO_TIMER_Init+0x1f0>)
10049ebc:	0008      	movs	r0, r1
10049ebe:	f000 fd1d 	bl	1004a8fc <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
10049ec2:	4b05      	ldr	r3, [pc, #20]	@ (10049ed8 <HAL_RADIO_TIMER_Init+0x1d4>)
10049ec4:	2101      	movs	r1, #1
10049ec6:	0018      	movs	r0, r3
10049ec8:	f000 fbfa 	bl	1004a6c0 <_configureTxRxDelay>
}
10049ecc:	46c0      	nop			@ (mov r8, r8)
10049ece:	46bd      	mov	sp, r7
10049ed0:	b003      	add	sp, #12
10049ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049ed4:	60001800 	.word	0x60001800
10049ed8:	20002208 	.word	0x20002208
10049edc:	0028f5c2 	.word	0x0028f5c2
10049ee0:	00005b8d 	.word	0x00005b8d
10049ee4:	0165ebec 	.word	0x0165ebec
10049ee8:	ffffefff 	.word	0xffffefff
10049eec:	00000326 	.word	0x00000326
10049ef0:	1004a8a5 	.word	0x1004a8a5
10049ef4:	20002248 	.word	0x20002248

10049ef8 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10049ef8:	b5b0      	push	{r4, r5, r7, lr}
10049efa:	b090      	sub	sp, #64	@ 0x40
10049efc:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
10049efe:	230f      	movs	r3, #15
10049f00:	18fb      	adds	r3, r7, r3
10049f02:	2200      	movs	r2, #0
10049f04:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049f06:	f3ef 8310 	mrs	r3, PRIMASK
10049f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10049f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
10049f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10049f10:	b672      	cpsid	i
}
10049f12:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10049f14:	4b9e      	ldr	r3, [pc, #632]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f16:	2261      	movs	r2, #97	@ 0x61
10049f18:	5c9b      	ldrb	r3, [r3, r2]
10049f1a:	2b00      	cmp	r3, #0
10049f1c:	d00f      	beq.n	10049f3e <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
10049f1e:	4b9c      	ldr	r3, [pc, #624]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f20:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10049f22:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
10049f24:	f000 fa66 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10049f28:	0002      	movs	r2, r0
10049f2a:	000b      	movs	r3, r1
10049f2c:	42ab      	cmp	r3, r5
10049f2e:	d802      	bhi.n	10049f36 <HAL_RADIO_TIMER_Tick+0x3e>
10049f30:	d105      	bne.n	10049f3e <HAL_RADIO_TIMER_Tick+0x46>
10049f32:	42a2      	cmp	r2, r4
10049f34:	d903      	bls.n	10049f3e <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
10049f36:	4b96      	ldr	r3, [pc, #600]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f38:	2261      	movs	r2, #97	@ 0x61
10049f3a:	2100      	movs	r1, #0
10049f3c:	5499      	strb	r1, [r3, r2]
10049f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049f40:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049f42:	6a3b      	ldr	r3, [r7, #32]
10049f44:	f383 8810 	msr	PRIMASK, r3
}
10049f48:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10049f4a:	e06e      	b.n	1004a02a <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
10049f4c:	4b90      	ldr	r3, [pc, #576]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f4e:	2291      	movs	r2, #145	@ 0x91
10049f50:	5c99      	ldrb	r1, [r3, r2]
10049f52:	4b8f      	ldr	r3, [pc, #572]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f54:	2292      	movs	r2, #146	@ 0x92
10049f56:	5c9a      	ldrb	r2, [r3, r2]
10049f58:	232b      	movs	r3, #43	@ 0x2b
10049f5a:	2008      	movs	r0, #8
10049f5c:	181b      	adds	r3, r3, r0
10049f5e:	19db      	adds	r3, r3, r7
10049f60:	1a8a      	subs	r2, r1, r2
10049f62:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
10049f64:	4b8a      	ldr	r3, [pc, #552]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f66:	228c      	movs	r2, #140	@ 0x8c
10049f68:	589b      	ldr	r3, [r3, r2]
10049f6a:	183a      	adds	r2, r7, r0
10049f6c:	0011      	movs	r1, r2
10049f6e:	0018      	movs	r0, r3
10049f70:	f000 fe9a 	bl	1004aca8 <_check_callbacks>
10049f74:	0002      	movs	r2, r0
10049f76:	4b86      	ldr	r3, [pc, #536]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049f78:	218c      	movs	r1, #140	@ 0x8c
10049f7a:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
10049f7c:	68bb      	ldr	r3, [r7, #8]
10049f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
10049f80:	e010      	b.n	10049fa4 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
10049f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049f84:	691b      	ldr	r3, [r3, #16]
10049f86:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
10049f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049f8a:	2200      	movs	r2, #0
10049f8c:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
10049f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049f90:	689b      	ldr	r3, [r3, #8]
10049f92:	2b00      	cmp	r3, #0
10049f94:	d004      	beq.n	10049fa0 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
10049f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049f98:	689b      	ldr	r3, [r3, #8]
10049f9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10049f9c:	0010      	movs	r0, r2
10049f9e:	4798      	blx	r3
      }
      curr = next;
10049fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
10049fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049fa6:	2b00      	cmp	r3, #0
10049fa8:	d1eb      	bne.n	10049f82 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10049faa:	4b79      	ldr	r3, [pc, #484]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049fac:	228c      	movs	r2, #140	@ 0x8c
10049fae:	589b      	ldr	r3, [r3, r2]
10049fb0:	240f      	movs	r4, #15
10049fb2:	193a      	adds	r2, r7, r4
10049fb4:	0011      	movs	r1, r2
10049fb6:	0018      	movs	r0, r3
10049fb8:	f000 fd66 	bl	1004aa88 <_update_user_timeout>
10049fbc:	0002      	movs	r2, r0
10049fbe:	4b74      	ldr	r3, [pc, #464]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049fc0:	218c      	movs	r1, #140	@ 0x8c
10049fc2:	505a      	str	r2, [r3, r1]
    if (expired == 1)
10049fc4:	193b      	adds	r3, r7, r4
10049fc6:	781b      	ldrb	r3, [r3, #0]
10049fc8:	2b01      	cmp	r3, #1
10049fca:	d121      	bne.n	1004a010 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049fcc:	f3ef 8310 	mrs	r3, PRIMASK
10049fd0:	61fb      	str	r3, [r7, #28]
  return(result);
10049fd2:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10049fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
10049fd6:	b672      	cpsid	i
}
10049fd8:	46c0      	nop			@ (mov r8, r8)
10049fda:	4b6d      	ldr	r3, [pc, #436]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049fdc:	2291      	movs	r2, #145	@ 0x91
10049fde:	5c9b      	ldrb	r3, [r3, r2]
10049fe0:	3301      	adds	r3, #1
10049fe2:	4a6b      	ldr	r2, [pc, #428]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049fe4:	2192      	movs	r1, #146	@ 0x92
10049fe6:	5c52      	ldrb	r2, [r2, r1]
10049fe8:	4293      	cmp	r3, r2
10049fea:	d103      	bne.n	10049ff4 <HAL_RADIO_TIMER_Tick+0xfc>
10049fec:	4b68      	ldr	r3, [pc, #416]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049fee:	2291      	movs	r2, #145	@ 0x91
10049ff0:	5c9b      	ldrb	r3, [r3, r2]
10049ff2:	e004      	b.n	10049ffe <HAL_RADIO_TIMER_Tick+0x106>
10049ff4:	4b66      	ldr	r3, [pc, #408]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
10049ff6:	2291      	movs	r2, #145	@ 0x91
10049ff8:	5c9b      	ldrb	r3, [r3, r2]
10049ffa:	3301      	adds	r3, #1
10049ffc:	b2db      	uxtb	r3, r3
10049ffe:	4a64      	ldr	r2, [pc, #400]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a000:	2191      	movs	r1, #145	@ 0x91
1004a002:	5453      	strb	r3, [r2, r1]
1004a004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a006:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a008:	69bb      	ldr	r3, [r7, #24]
1004a00a:	f383 8810 	msr	PRIMASK, r3
}
1004a00e:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004a010:	4b5f      	ldr	r3, [pc, #380]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a012:	2292      	movs	r2, #146	@ 0x92
1004a014:	5c9a      	ldrb	r2, [r3, r2]
1004a016:	232b      	movs	r3, #43	@ 0x2b
1004a018:	2108      	movs	r1, #8
1004a01a:	185b      	adds	r3, r3, r1
1004a01c:	19db      	adds	r3, r3, r7
1004a01e:	781b      	ldrb	r3, [r3, #0]
1004a020:	18d3      	adds	r3, r2, r3
1004a022:	b2d9      	uxtb	r1, r3
1004a024:	4b5a      	ldr	r3, [pc, #360]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a026:	2292      	movs	r2, #146	@ 0x92
1004a028:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004a02a:	4b59      	ldr	r3, [pc, #356]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a02c:	2291      	movs	r2, #145	@ 0x91
1004a02e:	5c9a      	ldrb	r2, [r3, r2]
1004a030:	4b57      	ldr	r3, [pc, #348]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a032:	2192      	movs	r1, #146	@ 0x92
1004a034:	5c5b      	ldrb	r3, [r3, r1]
1004a036:	429a      	cmp	r2, r3
1004a038:	d30a      	bcc.n	1004a050 <HAL_RADIO_TIMER_Tick+0x158>
1004a03a:	4b55      	ldr	r3, [pc, #340]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a03c:	2291      	movs	r2, #145	@ 0x91
1004a03e:	5c9a      	ldrb	r2, [r3, r2]
1004a040:	4b53      	ldr	r3, [pc, #332]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a042:	2192      	movs	r1, #146	@ 0x92
1004a044:	5c5b      	ldrb	r3, [r3, r1]
1004a046:	1ad3      	subs	r3, r2, r3
1004a048:	1e5a      	subs	r2, r3, #1
1004a04a:	4193      	sbcs	r3, r2
1004a04c:	b2db      	uxtb	r3, r3
1004a04e:	e00c      	b.n	1004a06a <HAL_RADIO_TIMER_Tick+0x172>
1004a050:	4b4f      	ldr	r3, [pc, #316]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a052:	2291      	movs	r2, #145	@ 0x91
1004a054:	5c9b      	ldrb	r3, [r3, r2]
1004a056:	0019      	movs	r1, r3
1004a058:	4b4d      	ldr	r3, [pc, #308]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a05a:	2292      	movs	r2, #146	@ 0x92
1004a05c:	5c9b      	ldrb	r3, [r3, r2]
1004a05e:	1acb      	subs	r3, r1, r3
1004a060:	3301      	adds	r3, #1
1004a062:	33ff      	adds	r3, #255	@ 0xff
1004a064:	1e5a      	subs	r2, r3, #1
1004a066:	4193      	sbcs	r3, r2
1004a068:	b2db      	uxtb	r3, r3
1004a06a:	2b00      	cmp	r3, #0
1004a06c:	d000      	beq.n	1004a070 <HAL_RADIO_TIMER_Tick+0x178>
1004a06e:	e76d      	b.n	10049f4c <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004a070:	4b47      	ldr	r3, [pc, #284]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a072:	7b1b      	ldrb	r3, [r3, #12]
1004a074:	2b00      	cmp	r3, #0
1004a076:	d06a      	beq.n	1004a14e <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004a078:	4b46      	ldr	r3, [pc, #280]	@ (1004a194 <HAL_RADIO_TIMER_Tick+0x29c>)
1004a07a:	0018      	movs	r0, r3
1004a07c:	f7ff fe30 	bl	10049ce0 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004a080:	1e03      	subs	r3, r0, #0
1004a082:	d100      	bne.n	1004a086 <HAL_RADIO_TIMER_Tick+0x18e>
1004a084:	e07f      	b.n	1004a186 <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004a086:	4b42      	ldr	r3, [pc, #264]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a088:	2200      	movs	r2, #0
1004a08a:	731a      	strb	r2, [r3, #12]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004a08c:	4b40      	ldr	r3, [pc, #256]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a08e:	2294      	movs	r2, #148	@ 0x94
1004a090:	5c9b      	ldrb	r3, [r3, r2]
1004a092:	2b00      	cmp	r3, #0
1004a094:	d109      	bne.n	1004a0aa <HAL_RADIO_TIMER_Tick+0x1b2>
1004a096:	4b3e      	ldr	r3, [pc, #248]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a098:	2293      	movs	r2, #147	@ 0x93
1004a09a:	5c9b      	ldrb	r3, [r3, r2]
1004a09c:	2b00      	cmp	r3, #0
1004a09e:	d004      	beq.n	1004a0aa <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004a0a0:	4b3b      	ldr	r3, [pc, #236]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0a2:	2293      	movs	r2, #147	@ 0x93
1004a0a4:	2100      	movs	r1, #0
1004a0a6:	5499      	strb	r1, [r3, r2]
1004a0a8:	e034      	b.n	1004a114 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004a0aa:	f000 fe47 	bl	1004ad3c <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004a0ae:	4b38      	ldr	r3, [pc, #224]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0b0:	228c      	movs	r2, #140	@ 0x8c
1004a0b2:	589b      	ldr	r3, [r3, r2]
1004a0b4:	240f      	movs	r4, #15
1004a0b6:	193a      	adds	r2, r7, r4
1004a0b8:	0011      	movs	r1, r2
1004a0ba:	0018      	movs	r0, r3
1004a0bc:	f000 fce4 	bl	1004aa88 <_update_user_timeout>
1004a0c0:	0002      	movs	r2, r0
1004a0c2:	4b33      	ldr	r3, [pc, #204]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0c4:	218c      	movs	r1, #140	@ 0x8c
1004a0c6:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004a0c8:	193b      	adds	r3, r7, r4
1004a0ca:	781b      	ldrb	r3, [r3, #0]
1004a0cc:	2b01      	cmp	r3, #1
1004a0ce:	d121      	bne.n	1004a114 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a0d0:	f3ef 8310 	mrs	r3, PRIMASK
1004a0d4:	617b      	str	r3, [r7, #20]
  return(result);
1004a0d6:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004a0da:	b672      	cpsid	i
}
1004a0dc:	46c0      	nop			@ (mov r8, r8)
1004a0de:	4b2c      	ldr	r3, [pc, #176]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0e0:	2291      	movs	r2, #145	@ 0x91
1004a0e2:	5c9b      	ldrb	r3, [r3, r2]
1004a0e4:	3301      	adds	r3, #1
1004a0e6:	4a2a      	ldr	r2, [pc, #168]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0e8:	2192      	movs	r1, #146	@ 0x92
1004a0ea:	5c52      	ldrb	r2, [r2, r1]
1004a0ec:	4293      	cmp	r3, r2
1004a0ee:	d103      	bne.n	1004a0f8 <HAL_RADIO_TIMER_Tick+0x200>
1004a0f0:	4b27      	ldr	r3, [pc, #156]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0f2:	2291      	movs	r2, #145	@ 0x91
1004a0f4:	5c9b      	ldrb	r3, [r3, r2]
1004a0f6:	e004      	b.n	1004a102 <HAL_RADIO_TIMER_Tick+0x20a>
1004a0f8:	4b25      	ldr	r3, [pc, #148]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a0fa:	2291      	movs	r2, #145	@ 0x91
1004a0fc:	5c9b      	ldrb	r3, [r3, r2]
1004a0fe:	3301      	adds	r3, #1
1004a100:	b2db      	uxtb	r3, r3
1004a102:	4a23      	ldr	r2, [pc, #140]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a104:	2191      	movs	r1, #145	@ 0x91
1004a106:	5453      	strb	r3, [r2, r1]
1004a108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a10a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a10c:	693b      	ldr	r3, [r7, #16]
1004a10e:	f383 8810 	msr	PRIMASK, r3
}
1004a112:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
1004a114:	230f      	movs	r3, #15
1004a116:	18fa      	adds	r2, r7, r3
1004a118:	4b1f      	ldr	r3, [pc, #124]	@ (1004a198 <HAL_RADIO_TIMER_Tick+0x2a0>)
1004a11a:	0011      	movs	r1, r2
1004a11c:	0018      	movs	r0, r3
1004a11e:	f000 fec1 	bl	1004aea4 <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004a122:	4b1e      	ldr	r3, [pc, #120]	@ (1004a19c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004a124:	0018      	movs	r0, r3
1004a126:	f000 f991 	bl	1004a44c <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004a12a:	f000 f963 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004a12e:	0002      	movs	r2, r0
1004a130:	000b      	movs	r3, r1
1004a132:	4917      	ldr	r1, [pc, #92]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a134:	6849      	ldr	r1, [r1, #4]
1004a136:	6039      	str	r1, [r7, #0]
1004a138:	2100      	movs	r1, #0
1004a13a:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004a13c:	6838      	ldr	r0, [r7, #0]
1004a13e:	6879      	ldr	r1, [r7, #4]
1004a140:	1812      	adds	r2, r2, r0
1004a142:	414b      	adcs	r3, r1
1004a144:	4915      	ldr	r1, [pc, #84]	@ (1004a19c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004a146:	0008      	movs	r0, r1
1004a148:	f000 fbd8 	bl	1004a8fc <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004a14c:	e01b      	b.n	1004a186 <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004a14e:	4b10      	ldr	r3, [pc, #64]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a150:	781b      	ldrb	r3, [r3, #0]
1004a152:	2b00      	cmp	r3, #0
1004a154:	d017      	beq.n	1004a186 <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004a156:	f000 f94d 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004a15a:	4b0d      	ldr	r3, [pc, #52]	@ (1004a190 <HAL_RADIO_TIMER_Tick+0x298>)
1004a15c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004a160:	24fa      	movs	r4, #250	@ 0xfa
1004a162:	0364      	lsls	r4, r4, #13
1004a164:	2500      	movs	r5, #0
1004a166:	1912      	adds	r2, r2, r4
1004a168:	416b      	adcs	r3, r5
1004a16a:	4299      	cmp	r1, r3
1004a16c:	d803      	bhi.n	1004a176 <HAL_RADIO_TIMER_Tick+0x27e>
1004a16e:	d10a      	bne.n	1004a186 <HAL_RADIO_TIMER_Tick+0x28e>
1004a170:	4290      	cmp	r0, r2
1004a172:	d800      	bhi.n	1004a176 <HAL_RADIO_TIMER_Tick+0x27e>
}
1004a174:	e007      	b.n	1004a186 <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004a176:	4b09      	ldr	r3, [pc, #36]	@ (1004a19c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004a178:	0018      	movs	r0, r3
1004a17a:	f000 f967 	bl	1004a44c <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004a17e:	4b07      	ldr	r3, [pc, #28]	@ (1004a19c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004a180:	0018      	movs	r0, r3
1004a182:	f000 fb8f 	bl	1004a8a4 <_calibration_callback>
}
1004a186:	46c0      	nop			@ (mov r8, r8)
1004a188:	46bd      	mov	sp, r7
1004a18a:	b010      	add	sp, #64	@ 0x40
1004a18c:	bdb0      	pop	{r4, r5, r7, pc}
1004a18e:	46c0      	nop			@ (mov r8, r8)
1004a190:	20002208 	.word	0x20002208
1004a194:	60001000 	.word	0x60001000
1004a198:	20002260 	.word	0x20002260
1004a19c:	20002248 	.word	0x20002248

1004a1a0 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004a1a0:	b580      	push	{r7, lr}
1004a1a2:	b082      	sub	sp, #8
1004a1a4:	af00      	add	r7, sp, #0
1004a1a6:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004a1a8:	23c0      	movs	r3, #192	@ 0xc0
1004a1aa:	05db      	lsls	r3, r3, #23
1004a1ac:	695b      	ldr	r3, [r3, #20]
1004a1ae:	687a      	ldr	r2, [r7, #4]
1004a1b0:	0011      	movs	r1, r2
1004a1b2:	0018      	movs	r0, r3
1004a1b4:	f000 ffe8 	bl	1004b188 <TIMER_GetPastSysTime>
1004a1b8:	0002      	movs	r2, r0
1004a1ba:	000b      	movs	r3, r1
}
1004a1bc:	0010      	movs	r0, r2
1004a1be:	0019      	movs	r1, r3
1004a1c0:	46bd      	mov	sp, r7
1004a1c2:	b002      	add	sp, #8
1004a1c4:	bd80      	pop	{r7, pc}
	...

1004a1c8 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a1ca:	b085      	sub	sp, #20
1004a1cc:	af00      	add	r7, sp, #0
1004a1ce:	6078      	str	r0, [r7, #4]
1004a1d0:	0008      	movs	r0, r1
1004a1d2:	0011      	movs	r1, r2
1004a1d4:	1cfb      	adds	r3, r7, #3
1004a1d6:	1c02      	adds	r2, r0, #0
1004a1d8:	701a      	strb	r2, [r3, #0]
1004a1da:	1cbb      	adds	r3, r7, #2
1004a1dc:	1c0a      	adds	r2, r1, #0
1004a1de:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004a1e0:	260f      	movs	r6, #15
1004a1e2:	19bb      	adds	r3, r7, r6
1004a1e4:	2200      	movs	r2, #0
1004a1e6:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004a1e8:	1cfb      	adds	r3, r7, #3
1004a1ea:	781b      	ldrb	r3, [r3, #0]
1004a1ec:	1e5a      	subs	r2, r3, #1
1004a1ee:	4193      	sbcs	r3, r2
1004a1f0:	b2d9      	uxtb	r1, r3
1004a1f2:	4b1b      	ldr	r3, [pc, #108]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a1f4:	2264      	movs	r2, #100	@ 0x64
1004a1f6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004a1f8:	1cbb      	adds	r3, r7, #2
1004a1fa:	781b      	ldrb	r3, [r3, #0]
1004a1fc:	1e5a      	subs	r2, r3, #1
1004a1fe:	4193      	sbcs	r3, r2
1004a200:	b2d9      	uxtb	r1, r3
1004a202:	4b17      	ldr	r3, [pc, #92]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a204:	2260      	movs	r2, #96	@ 0x60
1004a206:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004a208:	4b15      	ldr	r3, [pc, #84]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a20a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004a20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004a20e:	4914      	ldr	r1, [pc, #80]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a210:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004a212:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004a214:	6879      	ldr	r1, [r7, #4]
1004a216:	1a09      	subs	r1, r1, r0
1004a218:	000c      	movs	r4, r1
1004a21a:	2100      	movs	r1, #0
1004a21c:	000d      	movs	r5, r1
1004a21e:	1912      	adds	r2, r2, r4
1004a220:	416b      	adcs	r3, r5
1004a222:	490f      	ldr	r1, [pc, #60]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a224:	658a      	str	r2, [r1, #88]	@ 0x58
1004a226:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004a228:	4b0d      	ldr	r3, [pc, #52]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a22a:	2261      	movs	r2, #97	@ 0x61
1004a22c:	2100      	movs	r1, #0
1004a22e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004a230:	4b0b      	ldr	r3, [pc, #44]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a232:	2263      	movs	r2, #99	@ 0x63
1004a234:	2100      	movs	r1, #0
1004a236:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004a238:	4b09      	ldr	r3, [pc, #36]	@ (1004a260 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004a23a:	2262      	movs	r2, #98	@ 0x62
1004a23c:	2101      	movs	r1, #1
1004a23e:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004a240:	19ba      	adds	r2, r7, r6
1004a242:	4b08      	ldr	r3, [pc, #32]	@ (1004a264 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004a244:	0011      	movs	r1, r2
1004a246:	0018      	movs	r0, r3
1004a248:	f000 fe2c 	bl	1004aea4 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004a24c:	2001      	movs	r0, #1
1004a24e:	f000 fcd3 	bl	1004abf8 <_virtualTimeBaseEnable>

  return retVal;
1004a252:	19bb      	adds	r3, r7, r6
1004a254:	781b      	ldrb	r3, [r3, #0]
}
1004a256:	0018      	movs	r0, r3
1004a258:	46bd      	mov	sp, r7
1004a25a:	b005      	add	sp, #20
1004a25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a25e:	46c0      	nop			@ (mov r8, r8)
1004a260:	20002208 	.word	0x20002208
1004a264:	20002260 	.word	0x20002260

1004a268 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004a268:	b5b0      	push	{r4, r5, r7, lr}
1004a26a:	b088      	sub	sp, #32
1004a26c:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004a26e:	23c0      	movs	r3, #192	@ 0xc0
1004a270:	05db      	lsls	r3, r3, #23
1004a272:	0018      	movs	r0, r3
1004a274:	f7ff fc0a 	bl	10049a8c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004a278:	23c0      	movs	r3, #192	@ 0xc0
1004a27a:	05db      	lsls	r3, r3, #23
1004a27c:	0018      	movs	r0, r3
1004a27e:	f7ff fc14 	bl	10049aaa <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004a282:	4b31      	ldr	r3, [pc, #196]	@ (1004a348 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004a284:	0018      	movs	r0, r3
1004a286:	f7ff fc3b 	bl	10049b00 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004a28a:	4b30      	ldr	r3, [pc, #192]	@ (1004a34c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004a28c:	2261      	movs	r2, #97	@ 0x61
1004a28e:	2100      	movs	r1, #0
1004a290:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004a292:	4b2e      	ldr	r3, [pc, #184]	@ (1004a34c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004a294:	2262      	movs	r2, #98	@ 0x62
1004a296:	2100      	movs	r1, #0
1004a298:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004a29a:	4b2c      	ldr	r3, [pc, #176]	@ (1004a34c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004a29c:	2263      	movs	r2, #99	@ 0x63
1004a29e:	2100      	movs	r1, #0
1004a2a0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a2a2:	f3ef 8310 	mrs	r3, PRIMASK
1004a2a6:	60bb      	str	r3, [r7, #8]
  return(result);
1004a2a8:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004a2aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004a2ac:	b672      	cpsid	i
}
1004a2ae:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004a2b0:	4b26      	ldr	r3, [pc, #152]	@ (1004a34c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004a2b2:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004a2b4:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004a2b6:	f000 f89d 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004a2ba:	0002      	movs	r2, r0
1004a2bc:	000b      	movs	r3, r1
1004a2be:	1aa4      	subs	r4, r4, r2
1004a2c0:	419d      	sbcs	r5, r3
1004a2c2:	0022      	movs	r2, r4
1004a2c4:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004a2c6:	4921      	ldr	r1, [pc, #132]	@ (1004a34c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004a2c8:	2084      	movs	r0, #132	@ 0x84
1004a2ca:	5c09      	ldrb	r1, [r1, r0]
1004a2cc:	6039      	str	r1, [r7, #0]
1004a2ce:	2100      	movs	r1, #0
1004a2d0:	6079      	str	r1, [r7, #4]
1004a2d2:	6838      	ldr	r0, [r7, #0]
1004a2d4:	6879      	ldr	r1, [r7, #4]
1004a2d6:	1a12      	subs	r2, r2, r0
1004a2d8:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004a2da:	613a      	str	r2, [r7, #16]
1004a2dc:	617b      	str	r3, [r7, #20]
1004a2de:	69bb      	ldr	r3, [r7, #24]
1004a2e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a2e2:	68fb      	ldr	r3, [r7, #12]
1004a2e4:	f383 8810 	msr	PRIMASK, r3
}
1004a2e8:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004a2ea:	697b      	ldr	r3, [r7, #20]
1004a2ec:	2b00      	cmp	r3, #0
1004a2ee:	dc0c      	bgt.n	1004a30a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004a2f0:	697b      	ldr	r3, [r7, #20]
1004a2f2:	2b00      	cmp	r3, #0
1004a2f4:	d102      	bne.n	1004a2fc <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004a2f6:	693b      	ldr	r3, [r7, #16]
1004a2f8:	2b00      	cmp	r3, #0
1004a2fa:	d106      	bne.n	1004a30a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004a2fc:	2317      	movs	r3, #23
1004a2fe:	2208      	movs	r2, #8
1004a300:	189b      	adds	r3, r3, r2
1004a302:	19db      	adds	r3, r3, r7
1004a304:	2201      	movs	r2, #1
1004a306:	701a      	strb	r2, [r3, #0]
1004a308:	e015      	b.n	1004a336 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004a30a:	697b      	ldr	r3, [r7, #20]
1004a30c:	2b00      	cmp	r3, #0
1004a30e:	dc0c      	bgt.n	1004a32a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004a310:	697b      	ldr	r3, [r7, #20]
1004a312:	2b00      	cmp	r3, #0
1004a314:	d102      	bne.n	1004a31c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004a316:	693b      	ldr	r3, [r7, #16]
1004a318:	2b0e      	cmp	r3, #14
1004a31a:	d806      	bhi.n	1004a32a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004a31c:	2317      	movs	r3, #23
1004a31e:	2208      	movs	r2, #8
1004a320:	189b      	adds	r3, r3, r2
1004a322:	19db      	adds	r3, r3, r7
1004a324:	2202      	movs	r2, #2
1004a326:	701a      	strb	r2, [r3, #0]
1004a328:	e005      	b.n	1004a336 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004a32a:	2317      	movs	r3, #23
1004a32c:	2208      	movs	r2, #8
1004a32e:	189b      	adds	r3, r3, r2
1004a330:	19db      	adds	r3, r3, r7
1004a332:	2200      	movs	r2, #0
1004a334:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004a336:	2317      	movs	r3, #23
1004a338:	2208      	movs	r2, #8
1004a33a:	189b      	adds	r3, r3, r2
1004a33c:	19db      	adds	r3, r3, r7
1004a33e:	781b      	ldrb	r3, [r3, #0]
}
1004a340:	0018      	movs	r0, r3
1004a342:	46bd      	mov	sp, r7
1004a344:	b008      	add	sp, #32
1004a346:	bdb0      	pop	{r4, r5, r7, pc}
1004a348:	60001800 	.word	0x60001800
1004a34c:	20002208 	.word	0x20002208

1004a350 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004a350:	b580      	push	{r7, lr}
1004a352:	b084      	sub	sp, #16
1004a354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a356:	f3ef 8310 	mrs	r3, PRIMASK
1004a35a:	603b      	str	r3, [r7, #0]
  return(result);
1004a35c:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004a35e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004a360:	b672      	cpsid	i
}
1004a362:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004a364:	4b0e      	ldr	r3, [pc, #56]	@ (1004a3a0 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004a366:	0018      	movs	r0, r3
1004a368:	f7ff fc21 	bl	10049bae <LL_RADIO_TIMER_GetAbsoluteTime>
1004a36c:	0003      	movs	r3, r0
1004a36e:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
1004a370:	68bb      	ldr	r3, [r7, #8]
1004a372:	1c9a      	adds	r2, r3, #2
1004a374:	23c0      	movs	r3, #192	@ 0xc0
1004a376:	05db      	lsls	r3, r3, #23
1004a378:	0011      	movs	r1, r2
1004a37a:	0018      	movs	r0, r3
1004a37c:	f7ff fba4 	bl	10049ac8 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004a380:	23c0      	movs	r3, #192	@ 0xc0
1004a382:	05db      	lsls	r3, r3, #23
1004a384:	0018      	movs	r0, r3
1004a386:	f7ff fb71 	bl	10049a6c <LL_RADIO_TIMER_EnableTimer1>
1004a38a:	68fb      	ldr	r3, [r7, #12]
1004a38c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a38e:	687b      	ldr	r3, [r7, #4]
1004a390:	f383 8810 	msr	PRIMASK, r3
}
1004a394:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004a396:	46c0      	nop			@ (mov r8, r8)
1004a398:	46bd      	mov	sp, r7
1004a39a:	b004      	add	sp, #16
1004a39c:	bd80      	pop	{r7, pc}
1004a39e:	46c0      	nop			@ (mov r8, r8)
1004a3a0:	60001800 	.word	0x60001800

1004a3a4 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004a3a4:	b580      	push	{r7, lr}
1004a3a6:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004a3a8:	46c0      	nop			@ (mov r8, r8)
1004a3aa:	46bd      	mov	sp, r7
1004a3ac:	bd80      	pop	{r7, pc}
	...

1004a3b0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004a3b0:	b580      	push	{r7, lr}
1004a3b2:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004a3b4:	4b03      	ldr	r3, [pc, #12]	@ (1004a3c4 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004a3b6:	2263      	movs	r2, #99	@ 0x63
1004a3b8:	2100      	movs	r1, #0
1004a3ba:	5499      	strb	r1, [r3, r2]
}
1004a3bc:	46c0      	nop			@ (mov r8, r8)
1004a3be:	46bd      	mov	sp, r7
1004a3c0:	bd80      	pop	{r7, pc}
1004a3c2:	46c0      	nop			@ (mov r8, r8)
1004a3c4:	20002208 	.word	0x20002208

1004a3c8 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004a3c8:	b580      	push	{r7, lr}
1004a3ca:	b082      	sub	sp, #8
1004a3cc:	af00      	add	r7, sp, #0
1004a3ce:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004a3d0:	4b06      	ldr	r3, [pc, #24]	@ (1004a3ec <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004a3d2:	69db      	ldr	r3, [r3, #28]
1004a3d4:	0019      	movs	r1, r3
1004a3d6:	4a06      	ldr	r2, [pc, #24]	@ (1004a3f0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004a3d8:	687b      	ldr	r3, [r7, #4]
1004a3da:	0018      	movs	r0, r3
1004a3dc:	f7f5 fe70 	bl	100400c0 <blue_unit_conversion>
1004a3e0:	0003      	movs	r3, r0
}
1004a3e2:	0018      	movs	r0, r3
1004a3e4:	46bd      	mov	sp, r7
1004a3e6:	b002      	add	sp, #8
1004a3e8:	bd80      	pop	{r7, pc}
1004a3ea:	46c0      	nop			@ (mov r8, r8)
1004a3ec:	20002208 	.word	0x20002208
1004a3f0:	00000635 	.word	0x00000635

1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004a3f4:	b580      	push	{r7, lr}
1004a3f6:	b082      	sub	sp, #8
1004a3f8:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004a3fa:	1d3a      	adds	r2, r7, #4
1004a3fc:	4b05      	ldr	r3, [pc, #20]	@ (1004a414 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004a3fe:	0011      	movs	r1, r2
1004a400:	0018      	movs	r0, r3
1004a402:	f000 fad9 	bl	1004a9b8 <_get_system_time_and_machine>
1004a406:	0002      	movs	r2, r0
1004a408:	000b      	movs	r3, r1
}
1004a40a:	0010      	movs	r0, r2
1004a40c:	0019      	movs	r1, r3
1004a40e:	46bd      	mov	sp, r7
1004a410:	b002      	add	sp, #8
1004a412:	bd80      	pop	{r7, pc}
1004a414:	20002208 	.word	0x20002208

1004a418 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004a418:	b590      	push	{r4, r7, lr}
1004a41a:	b087      	sub	sp, #28
1004a41c:	af00      	add	r7, sp, #0
1004a41e:	60f8      	str	r0, [r7, #12]
1004a420:	603a      	str	r2, [r7, #0]
1004a422:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004a424:	683a      	ldr	r2, [r7, #0]
1004a426:	687b      	ldr	r3, [r7, #4]
1004a428:	68f9      	ldr	r1, [r7, #12]
1004a42a:	0008      	movs	r0, r1
1004a42c:	f000 fa66 	bl	1004a8fc <_start_timer>
1004a430:	0002      	movs	r2, r0
1004a432:	2417      	movs	r4, #23
1004a434:	193b      	adds	r3, r7, r4
1004a436:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004a438:	2001      	movs	r0, #1
1004a43a:	f000 fbdd 	bl	1004abf8 <_virtualTimeBaseEnable>

  return retVal;
1004a43e:	193b      	adds	r3, r7, r4
1004a440:	781b      	ldrb	r3, [r3, #0]
}
1004a442:	0018      	movs	r0, r3
1004a444:	46bd      	mov	sp, r7
1004a446:	b007      	add	sp, #28
1004a448:	bd90      	pop	{r4, r7, pc}
	...

1004a44c <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004a44c:	b590      	push	{r4, r7, lr}
1004a44e:	b089      	sub	sp, #36	@ 0x24
1004a450:	af00      	add	r7, sp, #0
1004a452:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004a454:	4b28      	ldr	r3, [pc, #160]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a456:	228c      	movs	r2, #140	@ 0x8c
1004a458:	589b      	ldr	r3, [r3, r2]
1004a45a:	687a      	ldr	r2, [r7, #4]
1004a45c:	0011      	movs	r1, r2
1004a45e:	0018      	movs	r0, r3
1004a460:	f000 fbf6 	bl	1004ac50 <_remove_timer_in_queue>
1004a464:	0003      	movs	r3, r0
1004a466:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004a468:	210f      	movs	r1, #15
1004a46a:	187b      	adds	r3, r7, r1
1004a46c:	2200      	movs	r2, #0
1004a46e:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004a470:	687b      	ldr	r3, [r7, #4]
1004a472:	2200      	movs	r2, #0
1004a474:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004a476:	4b20      	ldr	r3, [pc, #128]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a478:	228c      	movs	r2, #140	@ 0x8c
1004a47a:	589b      	ldr	r3, [r3, r2]
1004a47c:	69fa      	ldr	r2, [r7, #28]
1004a47e:	429a      	cmp	r2, r3
1004a480:	d031      	beq.n	1004a4e6 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004a482:	000c      	movs	r4, r1
1004a484:	187a      	adds	r2, r7, r1
1004a486:	69fb      	ldr	r3, [r7, #28]
1004a488:	0011      	movs	r1, r2
1004a48a:	0018      	movs	r0, r3
1004a48c:	f000 fafc 	bl	1004aa88 <_update_user_timeout>
1004a490:	0002      	movs	r2, r0
1004a492:	4b19      	ldr	r3, [pc, #100]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a494:	218c      	movs	r1, #140	@ 0x8c
1004a496:	505a      	str	r2, [r3, r1]
    if (expired)
1004a498:	193b      	adds	r3, r7, r4
1004a49a:	781b      	ldrb	r3, [r3, #0]
1004a49c:	2b00      	cmp	r3, #0
1004a49e:	d026      	beq.n	1004a4ee <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a4a0:	f3ef 8310 	mrs	r3, PRIMASK
1004a4a4:	617b      	str	r3, [r7, #20]
  return(result);
1004a4a6:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004a4a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004a4aa:	b672      	cpsid	i
}
1004a4ac:	46c0      	nop			@ (mov r8, r8)
1004a4ae:	4b12      	ldr	r3, [pc, #72]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a4b0:	2291      	movs	r2, #145	@ 0x91
1004a4b2:	5c9b      	ldrb	r3, [r3, r2]
1004a4b4:	3301      	adds	r3, #1
1004a4b6:	4a10      	ldr	r2, [pc, #64]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a4b8:	2192      	movs	r1, #146	@ 0x92
1004a4ba:	5c52      	ldrb	r2, [r2, r1]
1004a4bc:	4293      	cmp	r3, r2
1004a4be:	d103      	bne.n	1004a4c8 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004a4c0:	4b0d      	ldr	r3, [pc, #52]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a4c2:	2291      	movs	r2, #145	@ 0x91
1004a4c4:	5c9b      	ldrb	r3, [r3, r2]
1004a4c6:	e004      	b.n	1004a4d2 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004a4c8:	4b0b      	ldr	r3, [pc, #44]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a4ca:	2291      	movs	r2, #145	@ 0x91
1004a4cc:	5c9b      	ldrb	r3, [r3, r2]
1004a4ce:	3301      	adds	r3, #1
1004a4d0:	b2db      	uxtb	r3, r3
1004a4d2:	4a09      	ldr	r2, [pc, #36]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a4d4:	2191      	movs	r1, #145	@ 0x91
1004a4d6:	5453      	strb	r3, [r2, r1]
1004a4d8:	69bb      	ldr	r3, [r7, #24]
1004a4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a4dc:	693b      	ldr	r3, [r7, #16]
1004a4de:	f383 8810 	msr	PRIMASK, r3
}
1004a4e2:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004a4e4:	e003      	b.n	1004a4ee <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004a4e6:	4b04      	ldr	r3, [pc, #16]	@ (1004a4f8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004a4e8:	218c      	movs	r1, #140	@ 0x8c
1004a4ea:	69fa      	ldr	r2, [r7, #28]
1004a4ec:	505a      	str	r2, [r3, r1]
}
1004a4ee:	46c0      	nop			@ (mov r8, r8)
1004a4f0:	46bd      	mov	sp, r7
1004a4f2:	b009      	add	sp, #36	@ 0x24
1004a4f4:	bd90      	pop	{r4, r7, pc}
1004a4f6:	46c0      	nop			@ (mov r8, r8)
1004a4f8:	20002208 	.word	0x20002208

1004a4fc <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004a4fc:	b580      	push	{r7, lr}
1004a4fe:	b082      	sub	sp, #8
1004a500:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004a502:	2300      	movs	r3, #0
1004a504:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004a506:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004a508:	4b13      	ldr	r3, [pc, #76]	@ (1004a558 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004a50a:	0018      	movs	r0, r3
1004a50c:	f7ff fb18 	bl	10049b40 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004a510:	4b12      	ldr	r3, [pc, #72]	@ (1004a55c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004a512:	2291      	movs	r2, #145	@ 0x91
1004a514:	5c9b      	ldrb	r3, [r3, r2]
1004a516:	3301      	adds	r3, #1
1004a518:	4a10      	ldr	r2, [pc, #64]	@ (1004a55c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004a51a:	2192      	movs	r1, #146	@ 0x92
1004a51c:	5c52      	ldrb	r2, [r2, r1]
1004a51e:	4293      	cmp	r3, r2
1004a520:	d103      	bne.n	1004a52a <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004a522:	4b0e      	ldr	r3, [pc, #56]	@ (1004a55c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004a524:	2291      	movs	r2, #145	@ 0x91
1004a526:	5c9b      	ldrb	r3, [r3, r2]
1004a528:	e004      	b.n	1004a534 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004a52a:	4b0c      	ldr	r3, [pc, #48]	@ (1004a55c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004a52c:	2291      	movs	r2, #145	@ 0x91
1004a52e:	5c9b      	ldrb	r3, [r3, r2]
1004a530:	3301      	adds	r3, #1
1004a532:	b2db      	uxtb	r3, r3
1004a534:	4a09      	ldr	r2, [pc, #36]	@ (1004a55c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004a536:	2191      	movs	r1, #145	@ 0x91
1004a538:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004a53a:	4b07      	ldr	r3, [pc, #28]	@ (1004a558 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004a53c:	0018      	movs	r0, r3
1004a53e:	f7ff fb77 	bl	10049c30 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004a542:	4b05      	ldr	r3, [pc, #20]	@ (1004a558 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004a544:	0018      	movs	r0, r3
1004a546:	f7ff fb81 	bl	10049c4c <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004a54a:	0003      	movs	r3, r0
1004a54c:	607b      	str	r3, [r7, #4]
}
1004a54e:	46c0      	nop			@ (mov r8, r8)
1004a550:	46bd      	mov	sp, r7
1004a552:	b002      	add	sp, #8
1004a554:	bd80      	pop	{r7, pc}
1004a556:	46c0      	nop			@ (mov r8, r8)
1004a558:	60001800 	.word	0x60001800
1004a55c:	20002208 	.word	0x20002208

1004a560 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004a560:	b580      	push	{r7, lr}
1004a562:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004a564:	46c0      	nop			@ (mov r8, r8)
1004a566:	4b0b      	ldr	r3, [pc, #44]	@ (1004a594 <_calibrationProcedure+0x34>)
1004a568:	0018      	movs	r0, r3
1004a56a:	f7ff fbb9 	bl	10049ce0 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004a56e:	1e03      	subs	r3, r0, #0
1004a570:	d0f9      	beq.n	1004a566 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004a572:	4b08      	ldr	r3, [pc, #32]	@ (1004a594 <_calibrationProcedure+0x34>)
1004a574:	2117      	movs	r1, #23
1004a576:	0018      	movs	r0, r3
1004a578:	f7ff fb79 	bl	10049c6e <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004a57c:	4b06      	ldr	r3, [pc, #24]	@ (1004a598 <_calibrationProcedure+0x38>)
1004a57e:	0018      	movs	r0, r3
1004a580:	f000 f81e 	bl	1004a5c0 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004a584:	4b05      	ldr	r3, [pc, #20]	@ (1004a59c <_calibrationProcedure+0x3c>)
1004a586:	69da      	ldr	r2, [r3, #28]
1004a588:	4b04      	ldr	r3, [pc, #16]	@ (1004a59c <_calibrationProcedure+0x3c>)
1004a58a:	621a      	str	r2, [r3, #32]

}
1004a58c:	46c0      	nop			@ (mov r8, r8)
1004a58e:	46bd      	mov	sp, r7
1004a590:	bd80      	pop	{r7, pc}
1004a592:	46c0      	nop			@ (mov r8, r8)
1004a594:	60001000 	.word	0x60001000
1004a598:	20002218 	.word	0x20002218
1004a59c:	20002208 	.word	0x20002208

1004a5a0 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004a5a0:	b580      	push	{r7, lr}
1004a5a2:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004a5a4:	4b05      	ldr	r3, [pc, #20]	@ (1004a5bc <_timer_start_calibration+0x1c>)
1004a5a6:	0018      	movs	r0, r3
1004a5a8:	f7ff fb8c 	bl	10049cc4 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004a5ac:	4b03      	ldr	r3, [pc, #12]	@ (1004a5bc <_timer_start_calibration+0x1c>)
1004a5ae:	0018      	movs	r0, r3
1004a5b0:	f7ff fb69 	bl	10049c86 <LL_RADIO_TIMER_StartLSICalibration>
}
1004a5b4:	46c0      	nop			@ (mov r8, r8)
1004a5b6:	46bd      	mov	sp, r7
1004a5b8:	bd80      	pop	{r7, pc}
1004a5ba:	46c0      	nop			@ (mov r8, r8)
1004a5bc:	60001000 	.word	0x60001000

1004a5c0 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004a5c0:	b580      	push	{r7, lr}
1004a5c2:	b082      	sub	sp, #8
1004a5c4:	af00      	add	r7, sp, #0
1004a5c6:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004a5c8:	f7ff ffea 	bl	1004a5a0 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004a5cc:	46c0      	nop			@ (mov r8, r8)
1004a5ce:	4b07      	ldr	r3, [pc, #28]	@ (1004a5ec <_timer_calibrate+0x2c>)
1004a5d0:	0018      	movs	r0, r3
1004a5d2:	f7ff fb85 	bl	10049ce0 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004a5d6:	1e03      	subs	r3, r0, #0
1004a5d8:	d0f9      	beq.n	1004a5ce <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004a5da:	687b      	ldr	r3, [r7, #4]
1004a5dc:	0018      	movs	r0, r3
1004a5de:	f000 f807 	bl	1004a5f0 <_get_calibration_data>
}
1004a5e2:	46c0      	nop			@ (mov r8, r8)
1004a5e4:	46bd      	mov	sp, r7
1004a5e6:	b002      	add	sp, #8
1004a5e8:	bd80      	pop	{r7, pc}
1004a5ea:	46c0      	nop			@ (mov r8, r8)
1004a5ec:	60001000 	.word	0x60001000

1004a5f0 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004a5f0:	b580      	push	{r7, lr}
1004a5f2:	b08a      	sub	sp, #40	@ 0x28
1004a5f4:	af00      	add	r7, sp, #0
1004a5f6:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004a5f8:	4b2e      	ldr	r3, [pc, #184]	@ (1004a6b4 <_get_calibration_data+0xc4>)
1004a5fa:	0018      	movs	r0, r3
1004a5fc:	f7ff fb4e 	bl	10049c9c <LL_RADIO_TIMER_GetLSIPeriod>
1004a600:	0003      	movs	r3, r0
1004a602:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004a604:	e005      	b.n	1004a612 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004a606:	4b2b      	ldr	r3, [pc, #172]	@ (1004a6b4 <_get_calibration_data+0xc4>)
1004a608:	0018      	movs	r0, r3
1004a60a:	f7ff fb47 	bl	10049c9c <LL_RADIO_TIMER_GetLSIPeriod>
1004a60e:	0003      	movs	r3, r0
1004a610:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004a612:	4b28      	ldr	r3, [pc, #160]	@ (1004a6b4 <_get_calibration_data+0xc4>)
1004a614:	0018      	movs	r0, r3
1004a616:	f7ff fb41 	bl	10049c9c <LL_RADIO_TIMER_GetLSIPeriod>
1004a61a:	0002      	movs	r2, r0
1004a61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a61e:	429a      	cmp	r2, r3
1004a620:	d1f1      	bne.n	1004a606 <_get_calibration_data+0x16>
1004a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a624:	2b00      	cmp	r3, #0
1004a626:	d0ee      	beq.n	1004a606 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004a628:	4b23      	ldr	r3, [pc, #140]	@ (1004a6b8 <_get_calibration_data+0xc8>)
1004a62a:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a62e:	121b      	asrs	r3, r3, #8
1004a630:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a634:	22ff      	movs	r2, #255	@ 0xff
1004a636:	4013      	ands	r3, r2
1004a638:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004a63a:	69fb      	ldr	r3, [r7, #28]
1004a63c:	69ba      	ldr	r2, [r7, #24]
1004a63e:	435a      	muls	r2, r3
1004a640:	697b      	ldr	r3, [r7, #20]
1004a642:	69f9      	ldr	r1, [r7, #28]
1004a644:	434b      	muls	r3, r1
1004a646:	121b      	asrs	r3, r3, #8
1004a648:	18d3      	adds	r3, r2, r3
1004a64a:	3310      	adds	r3, #16
1004a64c:	115a      	asrs	r2, r3, #5
1004a64e:	687b      	ldr	r3, [r7, #4]
1004a650:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004a652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004a654:	687b      	ldr	r3, [r7, #4]
1004a656:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004a658:	4b18      	ldr	r3, [pc, #96]	@ (1004a6bc <_get_calibration_data+0xcc>)
1004a65a:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004a65c:	4b15      	ldr	r3, [pc, #84]	@ (1004a6b4 <_get_calibration_data+0xc4>)
1004a65e:	0018      	movs	r0, r3
1004a660:	f7ff fb26 	bl	10049cb0 <LL_RADIO_TIMER_GetLSIFrequency>
1004a664:	0003      	movs	r3, r0
1004a666:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004a668:	e005      	b.n	1004a676 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004a66a:	4b12      	ldr	r3, [pc, #72]	@ (1004a6b4 <_get_calibration_data+0xc4>)
1004a66c:	0018      	movs	r0, r3
1004a66e:	f7ff fb1f 	bl	10049cb0 <LL_RADIO_TIMER_GetLSIFrequency>
1004a672:	0003      	movs	r3, r0
1004a674:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004a676:	4b0f      	ldr	r3, [pc, #60]	@ (1004a6b4 <_get_calibration_data+0xc4>)
1004a678:	0018      	movs	r0, r3
1004a67a:	f7ff fb19 	bl	10049cb0 <LL_RADIO_TIMER_GetLSIFrequency>
1004a67e:	0002      	movs	r2, r0
1004a680:	6a3b      	ldr	r3, [r7, #32]
1004a682:	429a      	cmp	r2, r3
1004a684:	d1f1      	bne.n	1004a66a <_get_calibration_data+0x7a>
1004a686:	6a3b      	ldr	r3, [r7, #32]
1004a688:	2b00      	cmp	r3, #0
1004a68a:	d0ee      	beq.n	1004a66a <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004a68c:	6a3b      	ldr	r3, [r7, #32]
1004a68e:	119b      	asrs	r3, r3, #6
1004a690:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004a692:	68fb      	ldr	r3, [r7, #12]
1004a694:	693a      	ldr	r2, [r7, #16]
1004a696:	4353      	muls	r3, r2
1004a698:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004a69a:	68bb      	ldr	r3, [r7, #8]
1004a69c:	3380      	adds	r3, #128	@ 0x80
1004a69e:	121a      	asrs	r2, r3, #8
1004a6a0:	687b      	ldr	r3, [r7, #4]
1004a6a2:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004a6a4:	6a3a      	ldr	r2, [r7, #32]
1004a6a6:	687b      	ldr	r3, [r7, #4]
1004a6a8:	605a      	str	r2, [r3, #4]
}
1004a6aa:	46c0      	nop			@ (mov r8, r8)
1004a6ac:	46bd      	mov	sp, r7
1004a6ae:	b00a      	add	sp, #40	@ 0x28
1004a6b0:	bd80      	pop	{r7, pc}
1004a6b2:	46c0      	nop			@ (mov r8, r8)
1004a6b4:	60001000 	.word	0x60001000
1004a6b8:	0008bcf6 	.word	0x0008bcf6
1004a6bc:	00000753 	.word	0x00000753

1004a6c0 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004a6c0:	b590      	push	{r4, r7, lr}
1004a6c2:	b085      	sub	sp, #20
1004a6c4:	af00      	add	r7, sp, #0
1004a6c6:	6078      	str	r0, [r7, #4]
1004a6c8:	000a      	movs	r2, r1
1004a6ca:	1cfb      	adds	r3, r7, #3
1004a6cc:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004a6ce:	4b38      	ldr	r3, [pc, #224]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a6d0:	7b9b      	ldrb	r3, [r3, #14]
1004a6d2:	b2db      	uxtb	r3, r3
1004a6d4:	2b00      	cmp	r3, #0
1004a6d6:	da00      	bge.n	1004a6da <_configureTxRxDelay+0x1a>
1004a6d8:	3307      	adds	r3, #7
1004a6da:	10db      	asrs	r3, r3, #3
1004a6dc:	b2da      	uxtb	r2, r3
1004a6de:	240f      	movs	r4, #15
1004a6e0:	193b      	adds	r3, r7, r4
1004a6e2:	3201      	adds	r2, #1
1004a6e4:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004a6e6:	687b      	ldr	r3, [r7, #4]
1004a6e8:	699b      	ldr	r3, [r3, #24]
1004a6ea:	0019      	movs	r1, r3
1004a6ec:	4b31      	ldr	r3, [pc, #196]	@ (1004a7b4 <_configureTxRxDelay+0xf4>)
1004a6ee:	001a      	movs	r2, r3
1004a6f0:	201b      	movs	r0, #27
1004a6f2:	f7f5 fce5 	bl	100400c0 <blue_unit_conversion>
1004a6f6:	0002      	movs	r2, r0
1004a6f8:	4b2d      	ldr	r3, [pc, #180]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a6fa:	b2d2      	uxtb	r2, r2
1004a6fc:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004a6fe:	4b2c      	ldr	r3, [pc, #176]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a700:	799b      	ldrb	r3, [r3, #6]
1004a702:	b2db      	uxtb	r3, r3
1004a704:	0018      	movs	r0, r3
1004a706:	f000 f86d 	bl	1004a7e4 <_us_to_machinetime>
1004a70a:	0003      	movs	r3, r0
1004a70c:	b2d9      	uxtb	r1, r3
1004a70e:	687b      	ldr	r3, [r7, #4]
1004a710:	223d      	movs	r2, #61	@ 0x3d
1004a712:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004a714:	4b26      	ldr	r3, [pc, #152]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a716:	7a1b      	ldrb	r3, [r3, #8]
1004a718:	b2db      	uxtb	r3, r3
1004a71a:	001a      	movs	r2, r3
1004a71c:	193b      	adds	r3, r7, r4
1004a71e:	781b      	ldrb	r3, [r3, #0]
1004a720:	18d3      	adds	r3, r2, r3
1004a722:	0018      	movs	r0, r3
1004a724:	f000 f85e 	bl	1004a7e4 <_us_to_machinetime>
1004a728:	0003      	movs	r3, r0
1004a72a:	b2d9      	uxtb	r1, r3
1004a72c:	687b      	ldr	r3, [r7, #4]
1004a72e:	2238      	movs	r2, #56	@ 0x38
1004a730:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004a732:	4b1f      	ldr	r3, [pc, #124]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a734:	7a5b      	ldrb	r3, [r3, #9]
1004a736:	b2db      	uxtb	r3, r3
1004a738:	001a      	movs	r2, r3
1004a73a:	193b      	adds	r3, r7, r4
1004a73c:	781b      	ldrb	r3, [r3, #0]
1004a73e:	18d3      	adds	r3, r2, r3
1004a740:	0018      	movs	r0, r3
1004a742:	f000 f84f 	bl	1004a7e4 <_us_to_machinetime>
1004a746:	0003      	movs	r3, r0
1004a748:	b2d9      	uxtb	r1, r3
1004a74a:	687b      	ldr	r3, [r7, #4]
1004a74c:	2239      	movs	r2, #57	@ 0x39
1004a74e:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004a750:	4b17      	ldr	r3, [pc, #92]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a752:	7a9b      	ldrb	r3, [r3, #10]
1004a754:	b2db      	uxtb	r3, r3
1004a756:	0018      	movs	r0, r3
1004a758:	f000 f844 	bl	1004a7e4 <_us_to_machinetime>
1004a75c:	0003      	movs	r3, r0
1004a75e:	b2d9      	uxtb	r1, r3
1004a760:	687b      	ldr	r3, [r7, #4]
1004a762:	223a      	movs	r2, #58	@ 0x3a
1004a764:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004a766:	4b12      	ldr	r3, [pc, #72]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a768:	7adb      	ldrb	r3, [r3, #11]
1004a76a:	b2db      	uxtb	r3, r3
1004a76c:	0018      	movs	r0, r3
1004a76e:	f000 f839 	bl	1004a7e4 <_us_to_machinetime>
1004a772:	0003      	movs	r3, r0
1004a774:	b2d9      	uxtb	r1, r3
1004a776:	687b      	ldr	r3, [r7, #4]
1004a778:	223b      	movs	r2, #59	@ 0x3b
1004a77a:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004a77c:	1cfb      	adds	r3, r7, #3
1004a77e:	781b      	ldrb	r3, [r3, #0]
1004a780:	2b00      	cmp	r3, #0
1004a782:	d010      	beq.n	1004a7a6 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004a784:	4b0a      	ldr	r3, [pc, #40]	@ (1004a7b0 <_configureTxRxDelay+0xf0>)
1004a786:	7a1b      	ldrb	r3, [r3, #8]
1004a788:	b2db      	uxtb	r3, r3
1004a78a:	001a      	movs	r2, r3
1004a78c:	193b      	adds	r3, r7, r4
1004a78e:	781b      	ldrb	r3, [r3, #0]
1004a790:	18d3      	adds	r3, r2, r3
1004a792:	0018      	movs	r0, r3
1004a794:	f000 f810 	bl	1004a7b8 <_us_to_systime>
1004a798:	0003      	movs	r3, r0
1004a79a:	b2db      	uxtb	r3, r3
1004a79c:	331b      	adds	r3, #27
1004a79e:	b2d9      	uxtb	r1, r3
1004a7a0:	687b      	ldr	r3, [r7, #4]
1004a7a2:	223c      	movs	r2, #60	@ 0x3c
1004a7a4:	5499      	strb	r1, [r3, r2]
  }

}
1004a7a6:	46c0      	nop			@ (mov r8, r8)
1004a7a8:	46bd      	mov	sp, r7
1004a7aa:	b005      	add	sp, #20
1004a7ac:	bd90      	pop	{r4, r7, pc}
1004a7ae:	46c0      	nop			@ (mov r8, r8)
1004a7b0:	200000c0 	.word	0x200000c0
1004a7b4:	00000326 	.word	0x00000326

1004a7b8 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004a7b8:	b580      	push	{r7, lr}
1004a7ba:	b084      	sub	sp, #16
1004a7bc:	af00      	add	r7, sp, #0
1004a7be:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004a7c0:	687b      	ldr	r3, [r7, #4]
1004a7c2:	2268      	movs	r2, #104	@ 0x68
1004a7c4:	4353      	muls	r3, r2
1004a7c6:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004a7c8:	687b      	ldr	r3, [r7, #4]
1004a7ca:	22db      	movs	r2, #219	@ 0xdb
1004a7cc:	4353      	muls	r3, r2
1004a7ce:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004a7d0:	68fb      	ldr	r3, [r7, #12]
1004a7d2:	0a1a      	lsrs	r2, r3, #8
1004a7d4:	68bb      	ldr	r3, [r7, #8]
1004a7d6:	0c1b      	lsrs	r3, r3, #16
1004a7d8:	18d3      	adds	r3, r2, r3
}
1004a7da:	0018      	movs	r0, r3
1004a7dc:	46bd      	mov	sp, r7
1004a7de:	b004      	add	sp, #16
1004a7e0:	bd80      	pop	{r7, pc}
	...

1004a7e4 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004a7e4:	b5b0      	push	{r4, r5, r7, lr}
1004a7e6:	b088      	sub	sp, #32
1004a7e8:	af00      	add	r7, sp, #0
1004a7ea:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004a7ec:	4915      	ldr	r1, [pc, #84]	@ (1004a844 <_us_to_machinetime+0x60>)
1004a7ee:	6949      	ldr	r1, [r1, #20]
1004a7f0:	6039      	str	r1, [r7, #0]
1004a7f2:	2100      	movs	r1, #0
1004a7f4:	6079      	str	r1, [r7, #4]
1004a7f6:	68f9      	ldr	r1, [r7, #12]
1004a7f8:	000a      	movs	r2, r1
1004a7fa:	2100      	movs	r1, #0
1004a7fc:	000b      	movs	r3, r1
1004a7fe:	6838      	ldr	r0, [r7, #0]
1004a800:	6879      	ldr	r1, [r7, #4]
1004a802:	f7f5 fedd 	bl	100405c0 <__aeabi_lmul>
1004a806:	0002      	movs	r2, r0
1004a808:	000b      	movs	r3, r1
1004a80a:	0010      	movs	r0, r2
1004a80c:	0019      	movs	r1, r3
1004a80e:	0002      	movs	r2, r0
1004a810:	000b      	movs	r3, r1
1004a812:	1892      	adds	r2, r2, r2
1004a814:	415b      	adcs	r3, r3
1004a816:	1812      	adds	r2, r2, r0
1004a818:	414b      	adcs	r3, r1
1004a81a:	61ba      	str	r2, [r7, #24]
1004a81c:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004a81e:	69ba      	ldr	r2, [r7, #24]
1004a820:	69fb      	ldr	r3, [r7, #28]
1004a822:	2080      	movs	r0, #128	@ 0x80
1004a824:	04c0      	lsls	r0, r0, #19
1004a826:	2100      	movs	r1, #0
1004a828:	1812      	adds	r2, r2, r0
1004a82a:	414b      	adcs	r3, r1
1004a82c:	0159      	lsls	r1, r3, #5
1004a82e:	0ed4      	lsrs	r4, r2, #27
1004a830:	430c      	orrs	r4, r1
1004a832:	0edd      	lsrs	r5, r3, #27
1004a834:	0023      	movs	r3, r4
1004a836:	617b      	str	r3, [r7, #20]

  return time_mt;
1004a838:	697b      	ldr	r3, [r7, #20]
}
1004a83a:	0018      	movs	r0, r3
1004a83c:	46bd      	mov	sp, r7
1004a83e:	b008      	add	sp, #32
1004a840:	bdb0      	pop	{r4, r5, r7, pc}
1004a842:	46c0      	nop			@ (mov r8, r8)
1004a844:	20002208 	.word	0x20002208

1004a848 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004a848:	b580      	push	{r7, lr}
1004a84a:	b084      	sub	sp, #16
1004a84c:	af00      	add	r7, sp, #0
1004a84e:	0002      	movs	r2, r0
1004a850:	6039      	str	r1, [r7, #0]
1004a852:	1dbb      	adds	r3, r7, #6
1004a854:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004a856:	1dbb      	adds	r3, r7, #6
1004a858:	881b      	ldrh	r3, [r3, #0]
1004a85a:	6839      	ldr	r1, [r7, #0]
1004a85c:	4a0e      	ldr	r2, [pc, #56]	@ (1004a898 <_update_xtal_startup_time+0x50>)
1004a85e:	0018      	movs	r0, r3
1004a860:	f7f5 fc2e 	bl	100400c0 <blue_unit_conversion>
1004a864:	0003      	movs	r3, r0
1004a866:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004a868:	68fa      	ldr	r2, [r7, #12]
1004a86a:	2380      	movs	r3, #128	@ 0x80
1004a86c:	015b      	lsls	r3, r3, #5
1004a86e:	429a      	cmp	r2, r3
1004a870:	db01      	blt.n	1004a876 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004a872:	4b0a      	ldr	r3, [pc, #40]	@ (1004a89c <_update_xtal_startup_time+0x54>)
1004a874:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004a876:	68fb      	ldr	r3, [r7, #12]
1004a878:	2b0f      	cmp	r3, #15
1004a87a:	dc01      	bgt.n	1004a880 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004a87c:	2310      	movs	r3, #16
1004a87e:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004a880:	68fb      	ldr	r3, [r7, #12]
1004a882:	111b      	asrs	r3, r3, #4
1004a884:	b2db      	uxtb	r3, r3
1004a886:	4a06      	ldr	r2, [pc, #24]	@ (1004a8a0 <_update_xtal_startup_time+0x58>)
1004a888:	0019      	movs	r1, r3
1004a88a:	0010      	movs	r0, r2
1004a88c:	f7ff f968 	bl	10049b60 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004a890:	46c0      	nop			@ (mov r8, r8)
1004a892:	46bd      	mov	sp, r7
1004a894:	b004      	add	sp, #16
1004a896:	bd80      	pop	{r7, pc}
1004a898:	00000326 	.word	0x00000326
1004a89c:	00000fff 	.word	0x00000fff
1004a8a0:	60001800 	.word	0x60001800

1004a8a4 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004a8a4:	b5b0      	push	{r4, r5, r7, lr}
1004a8a6:	b082      	sub	sp, #8
1004a8a8:	af00      	add	r7, sp, #0
1004a8aa:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
1004a8ac:	4b11      	ldr	r3, [pc, #68]	@ (1004a8f4 <_calibration_callback+0x50>)
1004a8ae:	7b1b      	ldrb	r3, [r3, #12]
1004a8b0:	2201      	movs	r2, #1
1004a8b2:	4053      	eors	r3, r2
1004a8b4:	b2db      	uxtb	r3, r3
1004a8b6:	2b00      	cmp	r3, #0
1004a8b8:	d008      	beq.n	1004a8cc <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004a8ba:	4b0e      	ldr	r3, [pc, #56]	@ (1004a8f4 <_calibration_callback+0x50>)
1004a8bc:	781b      	ldrb	r3, [r3, #0]
1004a8be:	2b00      	cmp	r3, #0
1004a8c0:	d001      	beq.n	1004a8c6 <_calibration_callback+0x22>
    {
      _timer_start_calibration();
1004a8c2:	f7ff fe6d 	bl	1004a5a0 <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004a8c6:	4b0b      	ldr	r3, [pc, #44]	@ (1004a8f4 <_calibration_callback+0x50>)
1004a8c8:	2201      	movs	r2, #1
1004a8ca:	731a      	strb	r2, [r3, #12]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration);
1004a8cc:	f7ff fd92 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004a8d0:	0002      	movs	r2, r0
1004a8d2:	000b      	movs	r3, r1
1004a8d4:	4907      	ldr	r1, [pc, #28]	@ (1004a8f4 <_calibration_callback+0x50>)
1004a8d6:	6889      	ldr	r1, [r1, #8]
1004a8d8:	000c      	movs	r4, r1
1004a8da:	2100      	movs	r1, #0
1004a8dc:	000d      	movs	r5, r1
1004a8de:	1912      	adds	r2, r2, r4
1004a8e0:	416b      	adcs	r3, r5
1004a8e2:	4905      	ldr	r1, [pc, #20]	@ (1004a8f8 <_calibration_callback+0x54>)
1004a8e4:	0008      	movs	r0, r1
1004a8e6:	f000 f809 	bl	1004a8fc <_start_timer>
}
1004a8ea:	46c0      	nop			@ (mov r8, r8)
1004a8ec:	46bd      	mov	sp, r7
1004a8ee:	b002      	add	sp, #8
1004a8f0:	bdb0      	pop	{r4, r5, r7, pc}
1004a8f2:	46c0      	nop			@ (mov r8, r8)
1004a8f4:	20002208 	.word	0x20002208
1004a8f8:	20002248 	.word	0x20002248

1004a8fc <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004a8fc:	b590      	push	{r4, r7, lr}
1004a8fe:	b089      	sub	sp, #36	@ 0x24
1004a900:	af00      	add	r7, sp, #0
1004a902:	60f8      	str	r0, [r7, #12]
1004a904:	603a      	str	r2, [r7, #0]
1004a906:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004a908:	2313      	movs	r3, #19
1004a90a:	18fb      	adds	r3, r7, r3
1004a90c:	2200      	movs	r2, #0
1004a90e:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004a910:	68fb      	ldr	r3, [r7, #12]
1004a912:	7b1b      	ldrb	r3, [r3, #12]
1004a914:	2b00      	cmp	r3, #0
1004a916:	d001      	beq.n	1004a91c <_start_timer+0x20>
  {
    return 1;
1004a918:	2301      	movs	r3, #1
1004a91a:	e047      	b.n	1004a9ac <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004a91c:	68f9      	ldr	r1, [r7, #12]
1004a91e:	683a      	ldr	r2, [r7, #0]
1004a920:	687b      	ldr	r3, [r7, #4]
1004a922:	600a      	str	r2, [r1, #0]
1004a924:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004a926:	68fb      	ldr	r3, [r7, #12]
1004a928:	2201      	movs	r2, #1
1004a92a:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004a92c:	4b21      	ldr	r3, [pc, #132]	@ (1004a9b4 <_start_timer+0xb8>)
1004a92e:	228c      	movs	r2, #140	@ 0x8c
1004a930:	589b      	ldr	r3, [r3, r2]
1004a932:	68fa      	ldr	r2, [r7, #12]
1004a934:	0011      	movs	r1, r2
1004a936:	0018      	movs	r0, r3
1004a938:	f000 f92e 	bl	1004ab98 <_insert_timer_in_queue>
1004a93c:	0002      	movs	r2, r0
1004a93e:	68fb      	ldr	r3, [r7, #12]
1004a940:	4293      	cmp	r3, r2
1004a942:	d130      	bne.n	1004a9a6 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004a944:	2413      	movs	r4, #19
1004a946:	193a      	adds	r2, r7, r4
1004a948:	68fb      	ldr	r3, [r7, #12]
1004a94a:	0011      	movs	r1, r2
1004a94c:	0018      	movs	r0, r3
1004a94e:	f000 f89b 	bl	1004aa88 <_update_user_timeout>
1004a952:	0002      	movs	r2, r0
1004a954:	4b17      	ldr	r3, [pc, #92]	@ (1004a9b4 <_start_timer+0xb8>)
1004a956:	218c      	movs	r1, #140	@ 0x8c
1004a958:	505a      	str	r2, [r3, r1]
    if (expired)
1004a95a:	193b      	adds	r3, r7, r4
1004a95c:	781b      	ldrb	r3, [r3, #0]
1004a95e:	2b00      	cmp	r3, #0
1004a960:	d021      	beq.n	1004a9a6 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a962:	f3ef 8310 	mrs	r3, PRIMASK
1004a966:	61bb      	str	r3, [r7, #24]
  return(result);
1004a968:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004a96a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004a96c:	b672      	cpsid	i
}
1004a96e:	46c0      	nop			@ (mov r8, r8)
1004a970:	4b10      	ldr	r3, [pc, #64]	@ (1004a9b4 <_start_timer+0xb8>)
1004a972:	2291      	movs	r2, #145	@ 0x91
1004a974:	5c9b      	ldrb	r3, [r3, r2]
1004a976:	3301      	adds	r3, #1
1004a978:	4a0e      	ldr	r2, [pc, #56]	@ (1004a9b4 <_start_timer+0xb8>)
1004a97a:	2192      	movs	r1, #146	@ 0x92
1004a97c:	5c52      	ldrb	r2, [r2, r1]
1004a97e:	4293      	cmp	r3, r2
1004a980:	d103      	bne.n	1004a98a <_start_timer+0x8e>
1004a982:	4b0c      	ldr	r3, [pc, #48]	@ (1004a9b4 <_start_timer+0xb8>)
1004a984:	2291      	movs	r2, #145	@ 0x91
1004a986:	5c9b      	ldrb	r3, [r3, r2]
1004a988:	e004      	b.n	1004a994 <_start_timer+0x98>
1004a98a:	4b0a      	ldr	r3, [pc, #40]	@ (1004a9b4 <_start_timer+0xb8>)
1004a98c:	2291      	movs	r2, #145	@ 0x91
1004a98e:	5c9b      	ldrb	r3, [r3, r2]
1004a990:	3301      	adds	r3, #1
1004a992:	b2db      	uxtb	r3, r3
1004a994:	4a07      	ldr	r2, [pc, #28]	@ (1004a9b4 <_start_timer+0xb8>)
1004a996:	2191      	movs	r1, #145	@ 0x91
1004a998:	5453      	strb	r3, [r2, r1]
1004a99a:	69fb      	ldr	r3, [r7, #28]
1004a99c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a99e:	697b      	ldr	r3, [r7, #20]
1004a9a0:	f383 8810 	msr	PRIMASK, r3
}
1004a9a4:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
1004a9a6:	2313      	movs	r3, #19
1004a9a8:	18fb      	adds	r3, r7, r3
1004a9aa:	781b      	ldrb	r3, [r3, #0]
}
1004a9ac:	0018      	movs	r0, r3
1004a9ae:	46bd      	mov	sp, r7
1004a9b0:	b009      	add	sp, #36	@ 0x24
1004a9b2:	bd90      	pop	{r4, r7, pc}
1004a9b4:	20002208 	.word	0x20002208

1004a9b8 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004a9b8:	b5b0      	push	{r4, r5, r7, lr}
1004a9ba:	b08a      	sub	sp, #40	@ 0x28
1004a9bc:	af00      	add	r7, sp, #0
1004a9be:	60f8      	str	r0, [r7, #12]
1004a9c0:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a9c2:	f3ef 8310 	mrs	r3, PRIMASK
1004a9c6:	617b      	str	r3, [r7, #20]
  return(result);
1004a9c8:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004a9ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004a9cc:	b672      	cpsid	i
}
1004a9ce:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004a9d0:	68fb      	ldr	r3, [r7, #12]
1004a9d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004a9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004a9d6:	623a      	str	r2, [r7, #32]
1004a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004a9da:	4b29      	ldr	r3, [pc, #164]	@ (1004aa80 <_get_system_time_and_machine+0xc8>)
1004a9dc:	0018      	movs	r0, r3
1004a9de:	f7ff f8e6 	bl	10049bae <LL_RADIO_TIMER_GetAbsoluteTime>
1004a9e2:	0002      	movs	r2, r0
1004a9e4:	68bb      	ldr	r3, [r7, #8]
1004a9e6:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004a9e8:	68bb      	ldr	r3, [r7, #8]
1004a9ea:	681a      	ldr	r2, [r3, #0]
1004a9ec:	68fb      	ldr	r3, [r7, #12]
1004a9ee:	2180      	movs	r1, #128	@ 0x80
1004a9f0:	585b      	ldr	r3, [r3, r1]
1004a9f2:	1ad3      	subs	r3, r2, r3
1004a9f4:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004a9f6:	68fb      	ldr	r3, [r7, #12]
1004a9f8:	69db      	ldr	r3, [r3, #28]
1004a9fa:	0019      	movs	r1, r3
1004a9fc:	4a21      	ldr	r2, [pc, #132]	@ (1004aa84 <_get_system_time_and_machine+0xcc>)
1004a9fe:	69bb      	ldr	r3, [r7, #24]
1004aa00:	0018      	movs	r0, r3
1004aa02:	f7f5 fb5d 	bl	100400c0 <blue_unit_conversion>
1004aa06:	0003      	movs	r3, r0
1004aa08:	603b      	str	r3, [r7, #0]
1004aa0a:	2300      	movs	r3, #0
1004aa0c:	607b      	str	r3, [r7, #4]
1004aa0e:	6a3a      	ldr	r2, [r7, #32]
1004aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004aa12:	6838      	ldr	r0, [r7, #0]
1004aa14:	6879      	ldr	r1, [r7, #4]
1004aa16:	1812      	adds	r2, r2, r0
1004aa18:	414b      	adcs	r3, r1
1004aa1a:	623a      	str	r2, [r7, #32]
1004aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004aa1e:	68fb      	ldr	r3, [r7, #12]
1004aa20:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004aa22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004aa24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004aa26:	4299      	cmp	r1, r3
1004aa28:	d305      	bcc.n	1004aa36 <_get_system_time_and_machine+0x7e>
1004aa2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004aa2c:	4299      	cmp	r1, r3
1004aa2e:	d115      	bne.n	1004aa5c <_get_system_time_and_machine+0xa4>
1004aa30:	6a39      	ldr	r1, [r7, #32]
1004aa32:	4291      	cmp	r1, r2
1004aa34:	d212      	bcs.n	1004aa5c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004aa36:	68fb      	ldr	r3, [r7, #12]
1004aa38:	69db      	ldr	r3, [r3, #28]
1004aa3a:	0019      	movs	r1, r3
1004aa3c:	4a11      	ldr	r2, [pc, #68]	@ (1004aa84 <_get_system_time_and_machine+0xcc>)
1004aa3e:	2301      	movs	r3, #1
1004aa40:	425b      	negs	r3, r3
1004aa42:	0018      	movs	r0, r3
1004aa44:	f7f5 fb3c 	bl	100400c0 <blue_unit_conversion>
1004aa48:	0003      	movs	r3, r0
1004aa4a:	001c      	movs	r4, r3
1004aa4c:	2300      	movs	r3, #0
1004aa4e:	001d      	movs	r5, r3
1004aa50:	6a3a      	ldr	r2, [r7, #32]
1004aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004aa54:	1912      	adds	r2, r2, r4
1004aa56:	416b      	adcs	r3, r5
1004aa58:	623a      	str	r2, [r7, #32]
1004aa5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004aa5c:	68f9      	ldr	r1, [r7, #12]
1004aa5e:	6a3a      	ldr	r2, [r7, #32]
1004aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004aa62:	678a      	str	r2, [r1, #120]	@ 0x78
1004aa64:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004aa66:	69fb      	ldr	r3, [r7, #28]
1004aa68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004aa6a:	693b      	ldr	r3, [r7, #16]
1004aa6c:	f383 8810 	msr	PRIMASK, r3
}
1004aa70:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004aa72:	6a3a      	ldr	r2, [r7, #32]
1004aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004aa76:	0010      	movs	r0, r2
1004aa78:	0019      	movs	r1, r3
1004aa7a:	46bd      	mov	sp, r7
1004aa7c:	b00a      	add	sp, #40	@ 0x28
1004aa7e:	bdb0      	pop	{r4, r5, r7, pc}
1004aa80:	60001800 	.word	0x60001800
1004aa84:	00000635 	.word	0x00000635

1004aa88 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004aa88:	b5b0      	push	{r4, r5, r7, lr}
1004aa8a:	b08a      	sub	sp, #40	@ 0x28
1004aa8c:	af00      	add	r7, sp, #0
1004aa8e:	6078      	str	r0, [r7, #4]
1004aa90:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004aa92:	687b      	ldr	r3, [r7, #4]
1004aa94:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004aa96:	687b      	ldr	r3, [r7, #4]
1004aa98:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004aa9a:	683b      	ldr	r3, [r7, #0]
1004aa9c:	2200      	movs	r2, #0
1004aa9e:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004aaa0:	e033      	b.n	1004ab0a <_update_user_timeout+0x82>
  {
    if (curr->active)
1004aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004aaa4:	7b1b      	ldrb	r3, [r3, #12]
1004aaa6:	2b00      	cmp	r3, #0
1004aaa8:	d02c      	beq.n	1004ab04 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004aaaa:	f3ef 8310 	mrs	r3, PRIMASK
1004aaae:	60fb      	str	r3, [r7, #12]
  return(result);
1004aab0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004aab2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004aab4:	b672      	cpsid	i
}
1004aab6:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004aaba:	681c      	ldr	r4, [r3, #0]
1004aabc:	685d      	ldr	r5, [r3, #4]
1004aabe:	f7ff fc99 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004aac2:	0002      	movs	r2, r0
1004aac4:	000b      	movs	r3, r1
1004aac6:	1aa4      	subs	r4, r4, r2
1004aac8:	419d      	sbcs	r5, r3
1004aaca:	0022      	movs	r2, r4
1004aacc:	002b      	movs	r3, r5
1004aace:	613a      	str	r2, [r7, #16]
1004aad0:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004aad2:	697b      	ldr	r3, [r7, #20]
1004aad4:	2b00      	cmp	r3, #0
1004aad6:	dc05      	bgt.n	1004aae4 <_update_user_timeout+0x5c>
1004aad8:	697b      	ldr	r3, [r7, #20]
1004aada:	2b00      	cmp	r3, #0
1004aadc:	d108      	bne.n	1004aaf0 <_update_user_timeout+0x68>
1004aade:	693b      	ldr	r3, [r7, #16]
1004aae0:	2b00      	cmp	r3, #0
1004aae2:	d005      	beq.n	1004aaf0 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004aae4:	693b      	ldr	r3, [r7, #16]
1004aae6:	2101      	movs	r1, #1
1004aae8:	0018      	movs	r0, r3
1004aaea:	f000 f81d 	bl	1004ab28 <VTIMER_SetWakeupTime>
1004aaee:	e002      	b.n	1004aaf6 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004aaf0:	683b      	ldr	r3, [r7, #0]
1004aaf2:	2201      	movs	r2, #1
1004aaf4:	701a      	strb	r2, [r3, #0]
1004aaf6:	69fb      	ldr	r3, [r7, #28]
1004aaf8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004aafa:	68bb      	ldr	r3, [r7, #8]
1004aafc:	f383 8810 	msr	PRIMASK, r3
}
1004ab00:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004ab02:	e005      	b.n	1004ab10 <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ab06:	691b      	ldr	r3, [r3, #16]
1004ab08:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ab0c:	2b00      	cmp	r3, #0
1004ab0e:	d1c8      	bne.n	1004aaa2 <_update_user_timeout+0x1a>
  }
  if (*expired)
1004ab10:	683b      	ldr	r3, [r7, #0]
1004ab12:	781b      	ldrb	r3, [r3, #0]
1004ab14:	2b00      	cmp	r3, #0
1004ab16:	d001      	beq.n	1004ab1c <_update_user_timeout+0x94>
  {
    return rootOrig;
1004ab18:	6a3b      	ldr	r3, [r7, #32]
1004ab1a:	e000      	b.n	1004ab1e <_update_user_timeout+0x96>
  }

  return curr;
1004ab1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004ab1e:	0018      	movs	r0, r3
1004ab20:	46bd      	mov	sp, r7
1004ab22:	b00a      	add	sp, #40	@ 0x28
1004ab24:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004ab28 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004ab28:	b580      	push	{r7, lr}
1004ab2a:	b084      	sub	sp, #16
1004ab2c:	af00      	add	r7, sp, #0
1004ab2e:	6078      	str	r0, [r7, #4]
1004ab30:	000a      	movs	r2, r1
1004ab32:	1cfb      	adds	r3, r7, #3
1004ab34:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004ab36:	4b15      	ldr	r3, [pc, #84]	@ (1004ab8c <VTIMER_SetWakeupTime+0x64>)
1004ab38:	699b      	ldr	r3, [r3, #24]
1004ab3a:	0019      	movs	r1, r3
1004ab3c:	4a14      	ldr	r2, [pc, #80]	@ (1004ab90 <VTIMER_SetWakeupTime+0x68>)
1004ab3e:	687b      	ldr	r3, [r7, #4]
1004ab40:	0018      	movs	r0, r3
1004ab42:	f7f5 fabd 	bl	100400c0 <blue_unit_conversion>
1004ab46:	0003      	movs	r3, r0
1004ab48:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004ab4a:	687b      	ldr	r3, [r7, #4]
1004ab4c:	2b20      	cmp	r3, #32
1004ab4e:	d200      	bcs.n	1004ab52 <VTIMER_SetWakeupTime+0x2a>
1004ab50:	2320      	movs	r3, #32
1004ab52:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004ab54:	4b0f      	ldr	r3, [pc, #60]	@ (1004ab94 <VTIMER_SetWakeupTime+0x6c>)
1004ab56:	0018      	movs	r0, r3
1004ab58:	f7ff f829 	bl	10049bae <LL_RADIO_TIMER_GetAbsoluteTime>
1004ab5c:	0003      	movs	r3, r0
1004ab5e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004ab60:	687a      	ldr	r2, [r7, #4]
1004ab62:	68fb      	ldr	r3, [r7, #12]
1004ab64:	18d3      	adds	r3, r2, r3
1004ab66:	3308      	adds	r3, #8
1004ab68:	4a0a      	ldr	r2, [pc, #40]	@ (1004ab94 <VTIMER_SetWakeupTime+0x6c>)
1004ab6a:	0019      	movs	r1, r3
1004ab6c:	0010      	movs	r0, r2
1004ab6e:	f7ff f812 	bl	10049b96 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004ab72:	4b08      	ldr	r3, [pc, #32]	@ (1004ab94 <VTIMER_SetWakeupTime+0x6c>)
1004ab74:	0018      	movs	r0, r3
1004ab76:	f7ff f824 	bl	10049bc2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004ab7a:	4b06      	ldr	r3, [pc, #24]	@ (1004ab94 <VTIMER_SetWakeupTime+0x6c>)
1004ab7c:	0018      	movs	r0, r3
1004ab7e:	f7fe ffcf 	bl	10049b20 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004ab82:	68fb      	ldr	r3, [r7, #12]
}
1004ab84:	0018      	movs	r0, r3
1004ab86:	46bd      	mov	sp, r7
1004ab88:	b004      	add	sp, #16
1004ab8a:	bd80      	pop	{r7, pc}
1004ab8c:	20002208 	.word	0x20002208
1004ab90:	00000326 	.word	0x00000326
1004ab94:	60001800 	.word	0x60001800

1004ab98 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004ab98:	b580      	push	{r7, lr}
1004ab9a:	b086      	sub	sp, #24
1004ab9c:	af00      	add	r7, sp, #0
1004ab9e:	6078      	str	r0, [r7, #4]
1004aba0:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004aba2:	687b      	ldr	r3, [r7, #4]
1004aba4:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004aba6:	2300      	movs	r3, #0
1004aba8:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004abaa:	687b      	ldr	r3, [r7, #4]
1004abac:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004abae:	e004      	b.n	1004abba <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004abb0:	697b      	ldr	r3, [r7, #20]
1004abb2:	613b      	str	r3, [r7, #16]
    current = current->next;
1004abb4:	697b      	ldr	r3, [r7, #20]
1004abb6:	691b      	ldr	r3, [r3, #16]
1004abb8:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004abba:	697b      	ldr	r3, [r7, #20]
1004abbc:	2b00      	cmp	r3, #0
1004abbe:	d00a      	beq.n	1004abd6 <_insert_timer_in_queue+0x3e>
1004abc0:	697b      	ldr	r3, [r7, #20]
1004abc2:	681a      	ldr	r2, [r3, #0]
1004abc4:	685b      	ldr	r3, [r3, #4]
1004abc6:	6839      	ldr	r1, [r7, #0]
1004abc8:	6808      	ldr	r0, [r1, #0]
1004abca:	6849      	ldr	r1, [r1, #4]
1004abcc:	4299      	cmp	r1, r3
1004abce:	d8ef      	bhi.n	1004abb0 <_insert_timer_in_queue+0x18>
1004abd0:	d101      	bne.n	1004abd6 <_insert_timer_in_queue+0x3e>
1004abd2:	4290      	cmp	r0, r2
1004abd4:	d8ec      	bhi.n	1004abb0 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004abd6:	683b      	ldr	r3, [r7, #0]
1004abd8:	697a      	ldr	r2, [r7, #20]
1004abda:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004abdc:	693b      	ldr	r3, [r7, #16]
1004abde:	2b00      	cmp	r3, #0
1004abe0:	d102      	bne.n	1004abe8 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004abe2:	683b      	ldr	r3, [r7, #0]
1004abe4:	60fb      	str	r3, [r7, #12]
1004abe6:	e002      	b.n	1004abee <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004abe8:	693b      	ldr	r3, [r7, #16]
1004abea:	683a      	ldr	r2, [r7, #0]
1004abec:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004abee:	68fb      	ldr	r3, [r7, #12]
}
1004abf0:	0018      	movs	r0, r3
1004abf2:	46bd      	mov	sp, r7
1004abf4:	b006      	add	sp, #24
1004abf6:	bd80      	pop	{r7, pc}

1004abf8 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004abf8:	b580      	push	{r7, lr}
1004abfa:	b082      	sub	sp, #8
1004abfc:	af00      	add	r7, sp, #0
1004abfe:	0002      	movs	r2, r0
1004ac00:	1dfb      	adds	r3, r7, #7
1004ac02:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004ac04:	1dfb      	adds	r3, r7, #7
1004ac06:	781b      	ldrb	r3, [r3, #0]
1004ac08:	2b00      	cmp	r3, #0
1004ac0a:	d010      	beq.n	1004ac2e <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004ac0c:	4b0e      	ldr	r3, [pc, #56]	@ (1004ac48 <_virtualTimeBaseEnable+0x50>)
1004ac0e:	2290      	movs	r2, #144	@ 0x90
1004ac10:	5c9b      	ldrb	r3, [r3, r2]
1004ac12:	2201      	movs	r2, #1
1004ac14:	4053      	eors	r3, r2
1004ac16:	b2db      	uxtb	r3, r3
1004ac18:	2b00      	cmp	r3, #0
1004ac1a:	d010      	beq.n	1004ac3e <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004ac1c:	4b0b      	ldr	r3, [pc, #44]	@ (1004ac4c <_virtualTimeBaseEnable+0x54>)
1004ac1e:	0018      	movs	r0, r3
1004ac20:	f7ff fe40 	bl	1004a8a4 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004ac24:	4b08      	ldr	r3, [pc, #32]	@ (1004ac48 <_virtualTimeBaseEnable+0x50>)
1004ac26:	2290      	movs	r2, #144	@ 0x90
1004ac28:	2101      	movs	r1, #1
1004ac2a:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004ac2c:	e007      	b.n	1004ac3e <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004ac2e:	4b07      	ldr	r3, [pc, #28]	@ (1004ac4c <_virtualTimeBaseEnable+0x54>)
1004ac30:	0018      	movs	r0, r3
1004ac32:	f7ff fc0b 	bl	1004a44c <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004ac36:	4b04      	ldr	r3, [pc, #16]	@ (1004ac48 <_virtualTimeBaseEnable+0x50>)
1004ac38:	2290      	movs	r2, #144	@ 0x90
1004ac3a:	2100      	movs	r1, #0
1004ac3c:	5499      	strb	r1, [r3, r2]
}
1004ac3e:	46c0      	nop			@ (mov r8, r8)
1004ac40:	46bd      	mov	sp, r7
1004ac42:	b002      	add	sp, #8
1004ac44:	bd80      	pop	{r7, pc}
1004ac46:	46c0      	nop			@ (mov r8, r8)
1004ac48:	20002208 	.word	0x20002208
1004ac4c:	20002248 	.word	0x20002248

1004ac50 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004ac50:	b580      	push	{r7, lr}
1004ac52:	b086      	sub	sp, #24
1004ac54:	af00      	add	r7, sp, #0
1004ac56:	6078      	str	r0, [r7, #4]
1004ac58:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004ac5a:	687b      	ldr	r3, [r7, #4]
1004ac5c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004ac5e:	2300      	movs	r3, #0
1004ac60:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004ac62:	687b      	ldr	r3, [r7, #4]
1004ac64:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004ac66:	e004      	b.n	1004ac72 <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004ac68:	697b      	ldr	r3, [r7, #20]
1004ac6a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004ac6c:	697b      	ldr	r3, [r7, #20]
1004ac6e:	691b      	ldr	r3, [r3, #16]
1004ac70:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004ac72:	697b      	ldr	r3, [r7, #20]
1004ac74:	2b00      	cmp	r3, #0
1004ac76:	d003      	beq.n	1004ac80 <_remove_timer_in_queue+0x30>
1004ac78:	697a      	ldr	r2, [r7, #20]
1004ac7a:	683b      	ldr	r3, [r7, #0]
1004ac7c:	429a      	cmp	r2, r3
1004ac7e:	d1f3      	bne.n	1004ac68 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004ac80:	697b      	ldr	r3, [r7, #20]
1004ac82:	2b00      	cmp	r3, #0
1004ac84:	d00b      	beq.n	1004ac9e <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004ac86:	697a      	ldr	r2, [r7, #20]
1004ac88:	687b      	ldr	r3, [r7, #4]
1004ac8a:	429a      	cmp	r2, r3
1004ac8c:	d103      	bne.n	1004ac96 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004ac8e:	697b      	ldr	r3, [r7, #20]
1004ac90:	691b      	ldr	r3, [r3, #16]
1004ac92:	60fb      	str	r3, [r7, #12]
1004ac94:	e003      	b.n	1004ac9e <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004ac96:	697b      	ldr	r3, [r7, #20]
1004ac98:	691a      	ldr	r2, [r3, #16]
1004ac9a:	693b      	ldr	r3, [r7, #16]
1004ac9c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004ac9e:	68fb      	ldr	r3, [r7, #12]
}
1004aca0:	0018      	movs	r0, r3
1004aca2:	46bd      	mov	sp, r7
1004aca4:	b006      	add	sp, #24
1004aca6:	bd80      	pop	{r7, pc}

1004aca8 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004aca8:	b5b0      	push	{r4, r5, r7, lr}
1004acaa:	b088      	sub	sp, #32
1004acac:	af00      	add	r7, sp, #0
1004acae:	6078      	str	r0, [r7, #4]
1004acb0:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004acb2:	687b      	ldr	r3, [r7, #4]
1004acb4:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004acb6:	2300      	movs	r3, #0
1004acb8:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004acba:	687b      	ldr	r3, [r7, #4]
1004acbc:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004acbe:	683b      	ldr	r3, [r7, #0]
1004acc0:	687a      	ldr	r2, [r7, #4]
1004acc2:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004acc4:	2300      	movs	r3, #0
1004acc6:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004acc8:	e021      	b.n	1004ad0e <_check_callbacks+0x66>
  {

    if (curr->active)
1004acca:	69fb      	ldr	r3, [r7, #28]
1004accc:	7b1b      	ldrb	r3, [r3, #12]
1004acce:	2b00      	cmp	r3, #0
1004acd0:	d015      	beq.n	1004acfe <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004acd2:	69fb      	ldr	r3, [r7, #28]
1004acd4:	681c      	ldr	r4, [r3, #0]
1004acd6:	685d      	ldr	r5, [r3, #4]
1004acd8:	f7ff fb8c 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004acdc:	0002      	movs	r2, r0
1004acde:	000b      	movs	r3, r1
1004ace0:	1aa4      	subs	r4, r4, r2
1004ace2:	419d      	sbcs	r5, r3
1004ace4:	0022      	movs	r2, r4
1004ace6:	002b      	movs	r3, r5
1004ace8:	60ba      	str	r2, [r7, #8]
1004acea:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004acec:	68fb      	ldr	r3, [r7, #12]
1004acee:	2b00      	cmp	r3, #0
1004acf0:	dc11      	bgt.n	1004ad16 <_check_callbacks+0x6e>
1004acf2:	68fb      	ldr	r3, [r7, #12]
1004acf4:	2b00      	cmp	r3, #0
1004acf6:	d102      	bne.n	1004acfe <_check_callbacks+0x56>
1004acf8:	68bb      	ldr	r3, [r7, #8]
1004acfa:	2b05      	cmp	r3, #5
1004acfc:	d80b      	bhi.n	1004ad16 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004acfe:	69fb      	ldr	r3, [r7, #28]
1004ad00:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004ad02:	69fb      	ldr	r3, [r7, #28]
1004ad04:	691b      	ldr	r3, [r3, #16]
1004ad06:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004ad08:	693b      	ldr	r3, [r7, #16]
1004ad0a:	3301      	adds	r3, #1
1004ad0c:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004ad0e:	69fb      	ldr	r3, [r7, #28]
1004ad10:	2b00      	cmp	r3, #0
1004ad12:	d1da      	bne.n	1004acca <_check_callbacks+0x22>
1004ad14:	e000      	b.n	1004ad18 <_check_callbacks+0x70>
        break;
1004ad16:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004ad18:	693b      	ldr	r3, [r7, #16]
1004ad1a:	2b00      	cmp	r3, #0
1004ad1c:	d005      	beq.n	1004ad2a <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004ad1e:	69bb      	ldr	r3, [r7, #24]
1004ad20:	2200      	movs	r2, #0
1004ad22:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004ad24:	69fb      	ldr	r3, [r7, #28]
1004ad26:	617b      	str	r3, [r7, #20]
1004ad28:	e002      	b.n	1004ad30 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004ad2a:	683b      	ldr	r3, [r7, #0]
1004ad2c:	2200      	movs	r2, #0
1004ad2e:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004ad30:	697b      	ldr	r3, [r7, #20]
}
1004ad32:	0018      	movs	r0, r3
1004ad34:	46bd      	mov	sp, r7
1004ad36:	b008      	add	sp, #32
1004ad38:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004ad3c <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004ad3c:	b580      	push	{r7, lr}
1004ad3e:	b090      	sub	sp, #64	@ 0x40
1004ad40:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004ad42:	4b28      	ldr	r3, [pc, #160]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad44:	781b      	ldrb	r3, [r3, #0]
1004ad46:	2b00      	cmp	r3, #0
1004ad48:	d037      	beq.n	1004adba <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
1004ad4a:	003b      	movs	r3, r7
1004ad4c:	0018      	movs	r0, r3
1004ad4e:	f7ff fc4f 	bl	1004a5f0 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
1004ad52:	4b24      	ldr	r3, [pc, #144]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004ad56:	b29a      	uxth	r2, r3
1004ad58:	003b      	movs	r3, r7
1004ad5a:	689b      	ldr	r3, [r3, #8]
1004ad5c:	0019      	movs	r1, r3
1004ad5e:	0010      	movs	r0, r2
1004ad60:	f7ff fd72 	bl	1004a848 <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ad64:	f3ef 8310 	mrs	r3, PRIMASK
1004ad68:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
1004ad6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004ad6e:	b672      	cpsid	i
}
1004ad70:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004ad72:	4b1c      	ldr	r3, [pc, #112]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad74:	2234      	movs	r2, #52	@ 0x34
1004ad76:	2101      	movs	r1, #1
1004ad78:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
1004ad7a:	003b      	movs	r3, r7
1004ad7c:	685a      	ldr	r2, [r3, #4]
1004ad7e:	4b19      	ldr	r3, [pc, #100]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad80:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004ad82:	003b      	movs	r3, r7
1004ad84:	689a      	ldr	r2, [r3, #8]
1004ad86:	4b17      	ldr	r3, [pc, #92]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad88:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
1004ad8a:	003b      	movs	r3, r7
1004ad8c:	681a      	ldr	r2, [r3, #0]
1004ad8e:	4b15      	ldr	r3, [pc, #84]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad90:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004ad92:	003b      	movs	r3, r7
1004ad94:	68da      	ldr	r2, [r3, #12]
1004ad96:	4b13      	ldr	r3, [pc, #76]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad98:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
1004ad9a:	4b12      	ldr	r3, [pc, #72]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004ad9c:	0018      	movs	r0, r3
1004ad9e:	f000 f823 	bl	1004ade8 <_update_system_time>
1004ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ada4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ada6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ada8:	f383 8810 	msr	PRIMASK, r3
}
1004adac:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004adae:	4b0d      	ldr	r3, [pc, #52]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004adb0:	2100      	movs	r1, #0
1004adb2:	0018      	movs	r0, r3
1004adb4:	f7ff fc84 	bl	1004a6c0 <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
1004adb8:	e010      	b.n	1004addc <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004adba:	f3ef 8310 	mrs	r3, PRIMASK
1004adbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004adc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004adc4:	b672      	cpsid	i
}
1004adc6:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004adc8:	4b06      	ldr	r3, [pc, #24]	@ (1004ade4 <_updateCalibrationData+0xa8>)
1004adca:	0018      	movs	r0, r3
1004adcc:	f000 f80c 	bl	1004ade8 <_update_system_time>
1004add0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004add2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004add4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004add6:	f383 8810 	msr	PRIMASK, r3
}
1004adda:	46c0      	nop			@ (mov r8, r8)
}
1004addc:	46c0      	nop			@ (mov r8, r8)
1004adde:	46bd      	mov	sp, r7
1004ade0:	b010      	add	sp, #64	@ 0x40
1004ade2:	bd80      	pop	{r7, pc}
1004ade4:	20002208 	.word	0x20002208

1004ade8 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004ade8:	b5b0      	push	{r4, r5, r7, lr}
1004adea:	b088      	sub	sp, #32
1004adec:	af00      	add	r7, sp, #0
1004adee:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004adf0:	4b2a      	ldr	r3, [pc, #168]	@ (1004ae9c <_update_system_time+0xb4>)
1004adf2:	0018      	movs	r0, r3
1004adf4:	f7fe fedb 	bl	10049bae <LL_RADIO_TIMER_GetAbsoluteTime>
1004adf8:	0003      	movs	r3, r0
1004adfa:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004adfc:	697b      	ldr	r3, [r7, #20]
1004adfe:	6a1b      	ldr	r3, [r3, #32]
1004ae00:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004ae02:	697b      	ldr	r3, [r7, #20]
1004ae04:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004ae06:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004ae08:	697b      	ldr	r3, [r7, #20]
1004ae0a:	2280      	movs	r2, #128	@ 0x80
1004ae0c:	589b      	ldr	r3, [r3, r2]
1004ae0e:	69fa      	ldr	r2, [r7, #28]
1004ae10:	1ad3      	subs	r3, r2, r3
1004ae12:	4a23      	ldr	r2, [pc, #140]	@ (1004aea0 <_update_system_time+0xb8>)
1004ae14:	69b9      	ldr	r1, [r7, #24]
1004ae16:	0018      	movs	r0, r3
1004ae18:	f7f5 f952 	bl	100400c0 <blue_unit_conversion>
1004ae1c:	0003      	movs	r3, r0
1004ae1e:	60bb      	str	r3, [r7, #8]
1004ae20:	2300      	movs	r3, #0
1004ae22:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004ae24:	68ba      	ldr	r2, [r7, #8]
1004ae26:	68fb      	ldr	r3, [r7, #12]
1004ae28:	1912      	adds	r2, r2, r4
1004ae2a:	416b      	adcs	r3, r5
1004ae2c:	6979      	ldr	r1, [r7, #20]
1004ae2e:	670a      	str	r2, [r1, #112]	@ 0x70
1004ae30:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004ae32:	697b      	ldr	r3, [r7, #20]
1004ae34:	781b      	ldrb	r3, [r3, #0]
1004ae36:	2b00      	cmp	r3, #0
1004ae38:	d11d      	bne.n	1004ae76 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004ae3a:	697b      	ldr	r3, [r7, #20]
1004ae3c:	2280      	movs	r2, #128	@ 0x80
1004ae3e:	589b      	ldr	r3, [r3, r2]
1004ae40:	69fa      	ldr	r2, [r7, #28]
1004ae42:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004ae44:	697b      	ldr	r3, [r7, #20]
1004ae46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004ae48:	429a      	cmp	r2, r3
1004ae4a:	d214      	bcs.n	1004ae76 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004ae4c:	4a14      	ldr	r2, [pc, #80]	@ (1004aea0 <_update_system_time+0xb8>)
1004ae4e:	69b9      	ldr	r1, [r7, #24]
1004ae50:	2301      	movs	r3, #1
1004ae52:	425b      	negs	r3, r3
1004ae54:	0018      	movs	r0, r3
1004ae56:	f7f5 f933 	bl	100400c0 <blue_unit_conversion>
1004ae5a:	0001      	movs	r1, r0
1004ae5c:	697b      	ldr	r3, [r7, #20]
1004ae5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004ae60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004ae62:	6039      	str	r1, [r7, #0]
1004ae64:	2100      	movs	r1, #0
1004ae66:	6079      	str	r1, [r7, #4]
1004ae68:	6838      	ldr	r0, [r7, #0]
1004ae6a:	6879      	ldr	r1, [r7, #4]
1004ae6c:	1812      	adds	r2, r2, r0
1004ae6e:	414b      	adcs	r3, r1
1004ae70:	6979      	ldr	r1, [r7, #20]
1004ae72:	670a      	str	r2, [r1, #112]	@ 0x70
1004ae74:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004ae76:	697b      	ldr	r3, [r7, #20]
1004ae78:	2180      	movs	r1, #128	@ 0x80
1004ae7a:	69fa      	ldr	r2, [r7, #28]
1004ae7c:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004ae7e:	697b      	ldr	r3, [r7, #20]
1004ae80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004ae82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004ae84:	6979      	ldr	r1, [r7, #20]
1004ae86:	628a      	str	r2, [r1, #40]	@ 0x28
1004ae88:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004ae8a:	697b      	ldr	r3, [r7, #20]
1004ae8c:	69da      	ldr	r2, [r3, #28]
1004ae8e:	697b      	ldr	r3, [r7, #20]
1004ae90:	621a      	str	r2, [r3, #32]
}
1004ae92:	46c0      	nop			@ (mov r8, r8)
1004ae94:	46bd      	mov	sp, r7
1004ae96:	b008      	add	sp, #32
1004ae98:	bdb0      	pop	{r4, r5, r7, pc}
1004ae9a:	46c0      	nop			@ (mov r8, r8)
1004ae9c:	60001800 	.word	0x60001800
1004aea0:	00000635 	.word	0x00000635

1004aea4 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004aea4:	b5b0      	push	{r4, r5, r7, lr}
1004aea6:	b08a      	sub	sp, #40	@ 0x28
1004aea8:	af00      	add	r7, sp, #0
1004aeaa:	6078      	str	r0, [r7, #4]
1004aeac:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004aeae:	683b      	ldr	r3, [r7, #0]
1004aeb0:	2200      	movs	r2, #0
1004aeb2:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004aeb4:	687b      	ldr	r3, [r7, #4]
1004aeb6:	7a9b      	ldrb	r3, [r3, #10]
1004aeb8:	2b00      	cmp	r3, #0
1004aeba:	d100      	bne.n	1004aebe <_check_radio_activity+0x1a>
1004aebc:	e070      	b.n	1004afa0 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004aebe:	4b3a      	ldr	r3, [pc, #232]	@ (1004afa8 <_check_radio_activity+0x104>)
1004aec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004aec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004aec4:	4938      	ldr	r1, [pc, #224]	@ (1004afa8 <_check_radio_activity+0x104>)
1004aec6:	6849      	ldr	r1, [r1, #4]
1004aec8:	000c      	movs	r4, r1
1004aeca:	2100      	movs	r1, #0
1004aecc:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004aece:	1912      	adds	r2, r2, r4
1004aed0:	416b      	adcs	r3, r5
1004aed2:	623a      	str	r2, [r7, #32]
1004aed4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004aed6:	f3ef 8310 	mrs	r3, PRIMASK
1004aeda:	60fb      	str	r3, [r7, #12]
  return(result);
1004aedc:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004aede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004aee0:	b672      	cpsid	i
}
1004aee2:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004aee4:	f7ff fa86 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004aee8:	0002      	movs	r2, r0
1004aeea:	000b      	movs	r3, r1
1004aeec:	613a      	str	r2, [r7, #16]
1004aeee:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004aef0:	687b      	ldr	r3, [r7, #4]
1004aef2:	681a      	ldr	r2, [r3, #0]
1004aef4:	685b      	ldr	r3, [r3, #4]
1004aef6:	6a38      	ldr	r0, [r7, #32]
1004aef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004aefa:	24c8      	movs	r4, #200	@ 0xc8
1004aefc:	02a4      	lsls	r4, r4, #10
1004aefe:	2500      	movs	r5, #0
1004af00:	1900      	adds	r0, r0, r4
1004af02:	4169      	adcs	r1, r5
1004af04:	4299      	cmp	r1, r3
1004af06:	d812      	bhi.n	1004af2e <_check_radio_activity+0x8a>
1004af08:	d101      	bne.n	1004af0e <_check_radio_activity+0x6a>
1004af0a:	4290      	cmp	r0, r2
1004af0c:	d80f      	bhi.n	1004af2e <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004af0e:	6a3a      	ldr	r2, [r7, #32]
1004af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004af12:	20b9      	movs	r0, #185	@ 0xb9
1004af14:	0040      	lsls	r0, r0, #1
1004af16:	2100      	movs	r1, #0
1004af18:	1812      	adds	r2, r2, r0
1004af1a:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004af1c:	6979      	ldr	r1, [r7, #20]
1004af1e:	4299      	cmp	r1, r3
1004af20:	d805      	bhi.n	1004af2e <_check_radio_activity+0x8a>
1004af22:	6979      	ldr	r1, [r7, #20]
1004af24:	4299      	cmp	r1, r3
1004af26:	d135      	bne.n	1004af94 <_check_radio_activity+0xf0>
1004af28:	6939      	ldr	r1, [r7, #16]
1004af2a:	4291      	cmp	r1, r2
1004af2c:	d932      	bls.n	1004af94 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004af2e:	687b      	ldr	r3, [r7, #4]
1004af30:	681a      	ldr	r2, [r3, #0]
1004af32:	685b      	ldr	r3, [r3, #4]
1004af34:	204c      	movs	r0, #76	@ 0x4c
1004af36:	4240      	negs	r0, r0
1004af38:	17c1      	asrs	r1, r0, #31
1004af3a:	1880      	adds	r0, r0, r2
1004af3c:	4159      	adcs	r1, r3
1004af3e:	693a      	ldr	r2, [r7, #16]
1004af40:	697b      	ldr	r3, [r7, #20]
1004af42:	240a      	movs	r4, #10
1004af44:	2500      	movs	r5, #0
1004af46:	1912      	adds	r2, r2, r4
1004af48:	416b      	adcs	r3, r5
1004af4a:	4299      	cmp	r1, r3
1004af4c:	d802      	bhi.n	1004af54 <_check_radio_activity+0xb0>
1004af4e:	d11a      	bne.n	1004af86 <_check_radio_activity+0xe2>
1004af50:	4290      	cmp	r0, r2
1004af52:	d918      	bls.n	1004af86 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004af54:	687b      	ldr	r3, [r7, #4]
1004af56:	681a      	ldr	r2, [r3, #0]
1004af58:	685b      	ldr	r3, [r3, #4]
1004af5a:	0010      	movs	r0, r2
1004af5c:	687b      	ldr	r3, [r7, #4]
1004af5e:	7b19      	ldrb	r1, [r3, #12]
1004af60:	687b      	ldr	r3, [r7, #4]
1004af62:	7a1b      	ldrb	r3, [r3, #8]
1004af64:	001a      	movs	r2, r3
1004af66:	f000 f821 	bl	1004afac <TIMER_SetRadioTimerValue>
1004af6a:	0003      	movs	r3, r0
1004af6c:	001a      	movs	r2, r3
1004af6e:	683b      	ldr	r3, [r7, #0]
1004af70:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004af72:	687b      	ldr	r3, [r7, #4]
1004af74:	2200      	movs	r2, #0
1004af76:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004af78:	687b      	ldr	r3, [r7, #4]
1004af7a:	2201      	movs	r2, #1
1004af7c:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004af7e:	687b      	ldr	r3, [r7, #4]
1004af80:	2201      	movs	r2, #1
1004af82:	72da      	strb	r2, [r3, #11]
1004af84:	e006      	b.n	1004af94 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004af86:	4b08      	ldr	r3, [pc, #32]	@ (1004afa8 <_check_radio_activity+0x104>)
1004af88:	2262      	movs	r2, #98	@ 0x62
1004af8a:	2100      	movs	r1, #0
1004af8c:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004af8e:	683b      	ldr	r3, [r7, #0]
1004af90:	2201      	movs	r2, #1
1004af92:	701a      	strb	r2, [r3, #0]
1004af94:	69fb      	ldr	r3, [r7, #28]
1004af96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004af98:	68bb      	ldr	r3, [r7, #8]
1004af9a:	f383 8810 	msr	PRIMASK, r3
}
1004af9e:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
1004afa0:	46c0      	nop			@ (mov r8, r8)
1004afa2:	46bd      	mov	sp, r7
1004afa4:	b00a      	add	sp, #40	@ 0x28
1004afa6:	bdb0      	pop	{r4, r5, r7, pc}
1004afa8:	20002208 	.word	0x20002208

1004afac <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004afac:	b580      	push	{r7, lr}
1004afae:	b08a      	sub	sp, #40	@ 0x28
1004afb0:	af00      	add	r7, sp, #0
1004afb2:	6078      	str	r0, [r7, #4]
1004afb4:	0008      	movs	r0, r1
1004afb6:	0011      	movs	r1, r2
1004afb8:	1cfb      	adds	r3, r7, #3
1004afba:	1c02      	adds	r2, r0, #0
1004afbc:	701a      	strb	r2, [r3, #0]
1004afbe:	1cbb      	adds	r3, r7, #2
1004afc0:	1c0a      	adds	r2, r1, #0
1004afc2:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004afc4:	1cfb      	adds	r3, r7, #3
1004afc6:	781b      	ldrb	r3, [r3, #0]
1004afc8:	2b00      	cmp	r3, #0
1004afca:	d015      	beq.n	1004aff8 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004afcc:	1cbb      	adds	r3, r7, #2
1004afce:	781b      	ldrb	r3, [r3, #0]
1004afd0:	2b00      	cmp	r3, #0
1004afd2:	d008      	beq.n	1004afe6 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004afd4:	4b67      	ldr	r3, [pc, #412]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004afd6:	2238      	movs	r2, #56	@ 0x38
1004afd8:	5c9b      	ldrb	r3, [r3, r2]
1004afda:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004afdc:	4b65      	ldr	r3, [pc, #404]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004afde:	223c      	movs	r2, #60	@ 0x3c
1004afe0:	5c9b      	ldrb	r3, [r3, r2]
1004afe2:	61fb      	str	r3, [r7, #28]
1004afe4:	e01d      	b.n	1004b022 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004afe6:	4b63      	ldr	r3, [pc, #396]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004afe8:	2239      	movs	r2, #57	@ 0x39
1004afea:	5c9b      	ldrb	r3, [r3, r2]
1004afec:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004afee:	4b61      	ldr	r3, [pc, #388]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004aff0:	223c      	movs	r2, #60	@ 0x3c
1004aff2:	5c9b      	ldrb	r3, [r3, r2]
1004aff4:	61fb      	str	r3, [r7, #28]
1004aff6:	e014      	b.n	1004b022 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004aff8:	1cbb      	adds	r3, r7, #2
1004affa:	781b      	ldrb	r3, [r3, #0]
1004affc:	2b00      	cmp	r3, #0
1004affe:	d008      	beq.n	1004b012 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004b000:	4b5c      	ldr	r3, [pc, #368]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b002:	223a      	movs	r2, #58	@ 0x3a
1004b004:	5c9b      	ldrb	r3, [r3, r2]
1004b006:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004b008:	4b5a      	ldr	r3, [pc, #360]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b00a:	223c      	movs	r2, #60	@ 0x3c
1004b00c:	5c9b      	ldrb	r3, [r3, r2]
1004b00e:	61fb      	str	r3, [r7, #28]
1004b010:	e007      	b.n	1004b022 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004b012:	4b58      	ldr	r3, [pc, #352]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b014:	223b      	movs	r2, #59	@ 0x3b
1004b016:	5c9b      	ldrb	r3, [r3, r2]
1004b018:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004b01a:	4b56      	ldr	r3, [pc, #344]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b01c:	223c      	movs	r2, #60	@ 0x3c
1004b01e:	5c9b      	ldrb	r3, [r3, r2]
1004b020:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004b022:	230c      	movs	r3, #12
1004b024:	18fa      	adds	r2, r7, r3
1004b026:	4b53      	ldr	r3, [pc, #332]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b028:	0011      	movs	r1, r2
1004b02a:	0018      	movs	r0, r3
1004b02c:	f7ff fcc4 	bl	1004a9b8 <_get_system_time_and_machine>
1004b030:	0002      	movs	r2, r0
1004b032:	000b      	movs	r3, r1
1004b034:	687b      	ldr	r3, [r7, #4]
1004b036:	1a9b      	subs	r3, r3, r2
1004b038:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004b03a:	4b4e      	ldr	r3, [pc, #312]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b03c:	699b      	ldr	r3, [r3, #24]
1004b03e:	0019      	movs	r1, r3
1004b040:	4a4d      	ldr	r2, [pc, #308]	@ (1004b178 <TIMER_SetRadioTimerValue+0x1cc>)
1004b042:	697b      	ldr	r3, [r7, #20]
1004b044:	0018      	movs	r0, r3
1004b046:	f7f5 f83b 	bl	100400c0 <blue_unit_conversion>
1004b04a:	0003      	movs	r3, r0
1004b04c:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004b04e:	4b49      	ldr	r3, [pc, #292]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b050:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004b052:	69fb      	ldr	r3, [r7, #28]
1004b054:	18d3      	adds	r3, r2, r3
1004b056:	33c8      	adds	r3, #200	@ 0xc8
1004b058:	697a      	ldr	r2, [r7, #20]
1004b05a:	429a      	cmp	r2, r3
1004b05c:	d92f      	bls.n	1004b0be <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004b05e:	4b47      	ldr	r3, [pc, #284]	@ (1004b17c <TIMER_SetRadioTimerValue+0x1d0>)
1004b060:	795b      	ldrb	r3, [r3, #5]
1004b062:	b2db      	uxtb	r3, r3
1004b064:	001a      	movs	r2, r3
1004b066:	693b      	ldr	r3, [r7, #16]
1004b068:	1a9a      	subs	r2, r3, r2
1004b06a:	6a3b      	ldr	r3, [r7, #32]
1004b06c:	1ad3      	subs	r3, r2, r3
1004b06e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004b070:	68fa      	ldr	r2, [r7, #12]
1004b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b074:	18d3      	adds	r3, r2, r3
1004b076:	4a42      	ldr	r2, [pc, #264]	@ (1004b180 <TIMER_SetRadioTimerValue+0x1d4>)
1004b078:	0019      	movs	r1, r3
1004b07a:	0010      	movs	r0, r2
1004b07c:	f7fe fd7f 	bl	10049b7e <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004b080:	4b3f      	ldr	r3, [pc, #252]	@ (1004b180 <TIMER_SetRadioTimerValue+0x1d4>)
1004b082:	2100      	movs	r1, #0
1004b084:	0018      	movs	r0, r3
1004b086:	f7fe fdab 	bl	10049be0 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004b08a:	23c0      	movs	r3, #192	@ 0xc0
1004b08c:	05db      	lsls	r3, r3, #23
1004b08e:	0018      	movs	r0, r3
1004b090:	f7fe fcfc 	bl	10049a8c <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004b094:	23c0      	movs	r3, #192	@ 0xc0
1004b096:	05db      	lsls	r3, r3, #23
1004b098:	0018      	movs	r0, r3
1004b09a:	f7fe fd06 	bl	10049aaa <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004b09e:	4b38      	ldr	r3, [pc, #224]	@ (1004b180 <TIMER_SetRadioTimerValue+0x1d4>)
1004b0a0:	0018      	movs	r0, r3
1004b0a2:	f7fe fd1d 	bl	10049ae0 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004b0a6:	4b36      	ldr	r3, [pc, #216]	@ (1004b180 <TIMER_SetRadioTimerValue+0x1d4>)
1004b0a8:	0018      	movs	r0, r3
1004b0aa:	f7fe fd8a 	bl	10049bc2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004b0ae:	4b33      	ldr	r3, [pc, #204]	@ (1004b17c <TIMER_SetRadioTimerValue+0x1d0>)
1004b0b0:	795b      	ldrb	r3, [r3, #5]
1004b0b2:	b2db      	uxtb	r3, r3
1004b0b4:	001a      	movs	r2, r3
1004b0b6:	6a3b      	ldr	r3, [r7, #32]
1004b0b8:	189b      	adds	r3, r3, r2
1004b0ba:	623b      	str	r3, [r7, #32]
1004b0bc:	e021      	b.n	1004b102 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004b0be:	4b2d      	ldr	r3, [pc, #180]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b0c0:	223d      	movs	r2, #61	@ 0x3d
1004b0c2:	5c9b      	ldrb	r3, [r3, r2]
1004b0c4:	001a      	movs	r2, r3
1004b0c6:	693b      	ldr	r3, [r7, #16]
1004b0c8:	1a9a      	subs	r2, r3, r2
1004b0ca:	6a3b      	ldr	r3, [r7, #32]
1004b0cc:	1ad3      	subs	r3, r2, r3
1004b0ce:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004b0d0:	68fa      	ldr	r2, [r7, #12]
1004b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b0d4:	18d2      	adds	r2, r2, r3
1004b0d6:	23c0      	movs	r3, #192	@ 0xc0
1004b0d8:	05db      	lsls	r3, r3, #23
1004b0da:	0011      	movs	r1, r2
1004b0dc:	0018      	movs	r0, r3
1004b0de:	f7fe fcf3 	bl	10049ac8 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004b0e2:	4b27      	ldr	r3, [pc, #156]	@ (1004b180 <TIMER_SetRadioTimerValue+0x1d4>)
1004b0e4:	0018      	movs	r0, r3
1004b0e6:	f7fe fd0b 	bl	10049b00 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004b0ea:	23c0      	movs	r3, #192	@ 0xc0
1004b0ec:	05db      	lsls	r3, r3, #23
1004b0ee:	0018      	movs	r0, r3
1004b0f0:	f7fe fcbc 	bl	10049a6c <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004b0f4:	4b1f      	ldr	r3, [pc, #124]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b0f6:	223d      	movs	r2, #61	@ 0x3d
1004b0f8:	5c9b      	ldrb	r3, [r3, r2]
1004b0fa:	001a      	movs	r2, r3
1004b0fc:	6a3b      	ldr	r3, [r7, #32]
1004b0fe:	189b      	adds	r3, r3, r2
1004b100:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004b102:	68fa      	ldr	r2, [r7, #12]
1004b104:	693b      	ldr	r3, [r7, #16]
1004b106:	18d2      	adds	r2, r2, r3
1004b108:	4b1a      	ldr	r3, [pc, #104]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b10a:	2188      	movs	r1, #136	@ 0x88
1004b10c:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004b10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004b110:	6a3b      	ldr	r3, [r7, #32]
1004b112:	18d2      	adds	r2, r2, r3
1004b114:	6a3b      	ldr	r3, [r7, #32]
1004b116:	3305      	adds	r3, #5
1004b118:	429a      	cmp	r2, r3
1004b11a:	d212      	bcs.n	1004b142 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004b11c:	23c0      	movs	r3, #192	@ 0xc0
1004b11e:	05db      	lsls	r3, r3, #23
1004b120:	0018      	movs	r0, r3
1004b122:	f7fe fcb3 	bl	10049a8c <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004b126:	23c0      	movs	r3, #192	@ 0xc0
1004b128:	05db      	lsls	r3, r3, #23
1004b12a:	0018      	movs	r0, r3
1004b12c:	f7fe fcbd 	bl	10049aaa <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004b130:	4b13      	ldr	r3, [pc, #76]	@ (1004b180 <TIMER_SetRadioTimerValue+0x1d4>)
1004b132:	0018      	movs	r0, r3
1004b134:	f7fe fce4 	bl	10049b00 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004b138:	231b      	movs	r3, #27
1004b13a:	18fb      	adds	r3, r7, r3
1004b13c:	2201      	movs	r2, #1
1004b13e:	701a      	strb	r2, [r3, #0]
1004b140:	e010      	b.n	1004b164 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004b142:	4b0c      	ldr	r3, [pc, #48]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b144:	69db      	ldr	r3, [r3, #28]
1004b146:	0019      	movs	r1, r3
1004b148:	4a0e      	ldr	r2, [pc, #56]	@ (1004b184 <TIMER_SetRadioTimerValue+0x1d8>)
1004b14a:	6a3b      	ldr	r3, [r7, #32]
1004b14c:	0018      	movs	r0, r3
1004b14e:	f7f4 ffb7 	bl	100400c0 <blue_unit_conversion>
1004b152:	0003      	movs	r3, r0
1004b154:	b2d9      	uxtb	r1, r3
1004b156:	4b07      	ldr	r3, [pc, #28]	@ (1004b174 <TIMER_SetRadioTimerValue+0x1c8>)
1004b158:	2284      	movs	r2, #132	@ 0x84
1004b15a:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004b15c:	231b      	movs	r3, #27
1004b15e:	18fb      	adds	r3, r7, r3
1004b160:	2200      	movs	r2, #0
1004b162:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004b164:	231b      	movs	r3, #27
1004b166:	18fb      	adds	r3, r7, r3
1004b168:	781b      	ldrb	r3, [r3, #0]
}
1004b16a:	0018      	movs	r0, r3
1004b16c:	46bd      	mov	sp, r7
1004b16e:	b00a      	add	sp, #40	@ 0x28
1004b170:	bd80      	pop	{r7, pc}
1004b172:	46c0      	nop			@ (mov r8, r8)
1004b174:	20002208 	.word	0x20002208
1004b178:	00000326 	.word	0x00000326
1004b17c:	200000c0 	.word	0x200000c0
1004b180:	60001800 	.word	0x60001800
1004b184:	00000635 	.word	0x00000635

1004b188 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004b188:	b5b0      	push	{r4, r5, r7, lr}
1004b18a:	b084      	sub	sp, #16
1004b18c:	af00      	add	r7, sp, #0
1004b18e:	6078      	str	r0, [r7, #4]
1004b190:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004b192:	2308      	movs	r3, #8
1004b194:	18fa      	adds	r2, r7, r3
1004b196:	4b12      	ldr	r3, [pc, #72]	@ (1004b1e0 <TIMER_GetPastSysTime+0x58>)
1004b198:	0011      	movs	r1, r2
1004b19a:	0018      	movs	r0, r3
1004b19c:	f7ff fc0c 	bl	1004a9b8 <_get_system_time_and_machine>
1004b1a0:	0002      	movs	r2, r0
1004b1a2:	000b      	movs	r3, r1
1004b1a4:	6839      	ldr	r1, [r7, #0]
1004b1a6:	600a      	str	r2, [r1, #0]
1004b1a8:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004b1aa:	68ba      	ldr	r2, [r7, #8]
1004b1ac:	687b      	ldr	r3, [r7, #4]
1004b1ae:	1ad0      	subs	r0, r2, r3
1004b1b0:	4b0b      	ldr	r3, [pc, #44]	@ (1004b1e0 <TIMER_GetPastSysTime+0x58>)
1004b1b2:	69db      	ldr	r3, [r3, #28]
1004b1b4:	0019      	movs	r1, r3
1004b1b6:	4b0b      	ldr	r3, [pc, #44]	@ (1004b1e4 <TIMER_GetPastSysTime+0x5c>)
1004b1b8:	001a      	movs	r2, r3
1004b1ba:	f7f4 ff81 	bl	100400c0 <blue_unit_conversion>
1004b1be:	0003      	movs	r3, r0
1004b1c0:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004b1c2:	683b      	ldr	r3, [r7, #0]
1004b1c4:	681a      	ldr	r2, [r3, #0]
1004b1c6:	685b      	ldr	r3, [r3, #4]
1004b1c8:	68f9      	ldr	r1, [r7, #12]
1004b1ca:	000c      	movs	r4, r1
1004b1cc:	2100      	movs	r1, #0
1004b1ce:	000d      	movs	r5, r1
1004b1d0:	1b12      	subs	r2, r2, r4
1004b1d2:	41ab      	sbcs	r3, r5
}
1004b1d4:	0010      	movs	r0, r2
1004b1d6:	0019      	movs	r1, r3
1004b1d8:	46bd      	mov	sp, r7
1004b1da:	b004      	add	sp, #16
1004b1dc:	bdb0      	pop	{r4, r5, r7, pc}
1004b1de:	46c0      	nop			@ (mov r8, r8)
1004b1e0:	20002208 	.word	0x20002208
1004b1e4:	00000635 	.word	0x00000635

1004b1e8 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004b1e8:	b580      	push	{r7, lr}
1004b1ea:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004b1ec:	f7ff f986 	bl	1004a4fc <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004b1f0:	f005 f954 	bl	1005049c <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004b1f4:	46c0      	nop			@ (mov r8, r8)
1004b1f6:	46bd      	mov	sp, r7
1004b1f8:	bd80      	pop	{r7, pc}

1004b1fa <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004b1fa:	b580      	push	{r7, lr}
1004b1fc:	b082      	sub	sp, #8
1004b1fe:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004b200:	2300      	movs	r3, #0
1004b202:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004b204:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004b206:	23c0      	movs	r3, #192	@ 0xc0
1004b208:	05db      	lsls	r3, r3, #23
1004b20a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004b20c:	23c0      	movs	r3, #192	@ 0xc0
1004b20e:	05db      	lsls	r3, r3, #23
1004b210:	2101      	movs	r1, #1
1004b212:	430a      	orrs	r2, r1
1004b214:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004b216:	23c0      	movs	r3, #192	@ 0xc0
1004b218:	05db      	lsls	r3, r3, #23
1004b21a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004b21c:	607b      	str	r3, [r7, #4]
}
1004b21e:	46c0      	nop			@ (mov r8, r8)
1004b220:	46bd      	mov	sp, r7
1004b222:	b002      	add	sp, #8
1004b224:	bd80      	pop	{r7, pc}
	...

1004b228 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
1004b228:	b580      	push	{r7, lr}
1004b22a:	b082      	sub	sp, #8
1004b22c:	af00      	add	r7, sp, #0
1004b22e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004b230:	4b08      	ldr	r3, [pc, #32]	@ (1004b254 <LL_PWR_SetNoPullB+0x2c>)
1004b232:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004b234:	687b      	ldr	r3, [r7, #4]
1004b236:	43d9      	mvns	r1, r3
1004b238:	4b06      	ldr	r3, [pc, #24]	@ (1004b254 <LL_PWR_SetNoPullB+0x2c>)
1004b23a:	400a      	ands	r2, r1
1004b23c:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004b23e:	4b05      	ldr	r3, [pc, #20]	@ (1004b254 <LL_PWR_SetNoPullB+0x2c>)
1004b240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004b242:	687b      	ldr	r3, [r7, #4]
1004b244:	43d9      	mvns	r1, r3
1004b246:	4b03      	ldr	r3, [pc, #12]	@ (1004b254 <LL_PWR_SetNoPullB+0x2c>)
1004b248:	400a      	ands	r2, r1
1004b24a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004b24c:	46c0      	nop			@ (mov r8, r8)
1004b24e:	46bd      	mov	sp, r7
1004b250:	b002      	add	sp, #8
1004b252:	bd80      	pop	{r7, pc}
1004b254:	48500000 	.word	0x48500000

1004b258 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
1004b258:	b580      	push	{r7, lr}
1004b25a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004b25c:	4b04      	ldr	r3, [pc, #16]	@ (1004b270 <LL_RCC_HSE_Enable+0x18>)
1004b25e:	681a      	ldr	r2, [r3, #0]
1004b260:	4b03      	ldr	r3, [pc, #12]	@ (1004b270 <LL_RCC_HSE_Enable+0x18>)
1004b262:	2180      	movs	r1, #128	@ 0x80
1004b264:	0249      	lsls	r1, r1, #9
1004b266:	430a      	orrs	r2, r1
1004b268:	601a      	str	r2, [r3, #0]
}
1004b26a:	46c0      	nop			@ (mov r8, r8)
1004b26c:	46bd      	mov	sp, r7
1004b26e:	bd80      	pop	{r7, pc}
1004b270:	48400000 	.word	0x48400000

1004b274 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004b274:	b580      	push	{r7, lr}
1004b276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1004b278:	4b04      	ldr	r3, [pc, #16]	@ (1004b28c <LL_RCC_HSE_Disable+0x18>)
1004b27a:	681a      	ldr	r2, [r3, #0]
1004b27c:	4b03      	ldr	r3, [pc, #12]	@ (1004b28c <LL_RCC_HSE_Disable+0x18>)
1004b27e:	4904      	ldr	r1, [pc, #16]	@ (1004b290 <LL_RCC_HSE_Disable+0x1c>)
1004b280:	400a      	ands	r2, r1
1004b282:	601a      	str	r2, [r3, #0]
}
1004b284:	46c0      	nop			@ (mov r8, r8)
1004b286:	46bd      	mov	sp, r7
1004b288:	bd80      	pop	{r7, pc}
1004b28a:	46c0      	nop			@ (mov r8, r8)
1004b28c:	48400000 	.word	0x48400000
1004b290:	fffeffff 	.word	0xfffeffff

1004b294 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004b294:	b580      	push	{r7, lr}
1004b296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004b298:	4b07      	ldr	r3, [pc, #28]	@ (1004b2b8 <LL_RCC_HSE_IsReady+0x24>)
1004b29a:	681a      	ldr	r2, [r3, #0]
1004b29c:	2380      	movs	r3, #128	@ 0x80
1004b29e:	029b      	lsls	r3, r3, #10
1004b2a0:	401a      	ands	r2, r3
1004b2a2:	2380      	movs	r3, #128	@ 0x80
1004b2a4:	029b      	lsls	r3, r3, #10
1004b2a6:	429a      	cmp	r2, r3
1004b2a8:	d101      	bne.n	1004b2ae <LL_RCC_HSE_IsReady+0x1a>
1004b2aa:	2301      	movs	r3, #1
1004b2ac:	e000      	b.n	1004b2b0 <LL_RCC_HSE_IsReady+0x1c>
1004b2ae:	2300      	movs	r3, #0
}
1004b2b0:	0018      	movs	r0, r3
1004b2b2:	46bd      	mov	sp, r7
1004b2b4:	bd80      	pop	{r7, pc}
1004b2b6:	46c0      	nop			@ (mov r8, r8)
1004b2b8:	48400000 	.word	0x48400000

1004b2bc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
1004b2bc:	b580      	push	{r7, lr}
1004b2be:	b082      	sub	sp, #8
1004b2c0:	af00      	add	r7, sp, #0
1004b2c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004b2c4:	4a0b      	ldr	r2, [pc, #44]	@ (1004b2f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004b2c6:	2398      	movs	r3, #152	@ 0x98
1004b2c8:	58d3      	ldr	r3, [r2, r3]
1004b2ca:	4a0b      	ldr	r2, [pc, #44]	@ (1004b2f8 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004b2cc:	401a      	ands	r2, r3
1004b2ce:	687b      	ldr	r3, [r7, #4]
1004b2d0:	021b      	lsls	r3, r3, #8
1004b2d2:	4908      	ldr	r1, [pc, #32]	@ (1004b2f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004b2d4:	4313      	orrs	r3, r2
1004b2d6:	2298      	movs	r2, #152	@ 0x98
1004b2d8:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004b2da:	4a06      	ldr	r2, [pc, #24]	@ (1004b2f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004b2dc:	2398      	movs	r3, #152	@ 0x98
1004b2de:	58d3      	ldr	r3, [r2, r3]
1004b2e0:	4904      	ldr	r1, [pc, #16]	@ (1004b2f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004b2e2:	2280      	movs	r2, #128	@ 0x80
1004b2e4:	4313      	orrs	r3, r2
1004b2e6:	2298      	movs	r2, #152	@ 0x98
1004b2e8:	508b      	str	r3, [r1, r2]
}
1004b2ea:	46c0      	nop			@ (mov r8, r8)
1004b2ec:	46bd      	mov	sp, r7
1004b2ee:	b002      	add	sp, #8
1004b2f0:	bd80      	pop	{r7, pc}
1004b2f2:	46c0      	nop			@ (mov r8, r8)
1004b2f4:	48400000 	.word	0x48400000
1004b2f8:	ffffc0ff 	.word	0xffffc0ff

1004b2fc <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
1004b2fc:	b580      	push	{r7, lr}
1004b2fe:	b082      	sub	sp, #8
1004b300:	af00      	add	r7, sp, #0
1004b302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004b304:	4a07      	ldr	r2, [pc, #28]	@ (1004b324 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004b306:	2398      	movs	r3, #152	@ 0x98
1004b308:	58d3      	ldr	r3, [r2, r3]
1004b30a:	2270      	movs	r2, #112	@ 0x70
1004b30c:	4393      	bics	r3, r2
1004b30e:	001a      	movs	r2, r3
1004b310:	4904      	ldr	r1, [pc, #16]	@ (1004b324 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004b312:	687b      	ldr	r3, [r7, #4]
1004b314:	4313      	orrs	r3, r2
1004b316:	2298      	movs	r2, #152	@ 0x98
1004b318:	508b      	str	r3, [r1, r2]
}
1004b31a:	46c0      	nop			@ (mov r8, r8)
1004b31c:	46bd      	mov	sp, r7
1004b31e:	b002      	add	sp, #8
1004b320:	bd80      	pop	{r7, pc}
1004b322:	46c0      	nop			@ (mov r8, r8)
1004b324:	48400000 	.word	0x48400000

1004b328 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
1004b328:	b580      	push	{r7, lr}
1004b32a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004b32c:	4b07      	ldr	r3, [pc, #28]	@ (1004b34c <LL_RCC_HSI_Enable+0x24>)
1004b32e:	689a      	ldr	r2, [r3, #8]
1004b330:	4b06      	ldr	r3, [pc, #24]	@ (1004b34c <LL_RCC_HSI_Enable+0x24>)
1004b332:	2104      	movs	r1, #4
1004b334:	438a      	bics	r2, r1
1004b336:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004b338:	4b04      	ldr	r3, [pc, #16]	@ (1004b34c <LL_RCC_HSI_Enable+0x24>)
1004b33a:	689a      	ldr	r2, [r3, #8]
1004b33c:	4b03      	ldr	r3, [pc, #12]	@ (1004b34c <LL_RCC_HSI_Enable+0x24>)
1004b33e:	2102      	movs	r1, #2
1004b340:	438a      	bics	r2, r1
1004b342:	609a      	str	r2, [r3, #8]
}
1004b344:	46c0      	nop			@ (mov r8, r8)
1004b346:	46bd      	mov	sp, r7
1004b348:	bd80      	pop	{r7, pc}
1004b34a:	46c0      	nop			@ (mov r8, r8)
1004b34c:	48400000 	.word	0x48400000

1004b350 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
1004b350:	b580      	push	{r7, lr}
1004b352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004b354:	4b07      	ldr	r3, [pc, #28]	@ (1004b374 <LL_RCC_HSI_Disable+0x24>)
1004b356:	689a      	ldr	r2, [r3, #8]
1004b358:	4b06      	ldr	r3, [pc, #24]	@ (1004b374 <LL_RCC_HSI_Disable+0x24>)
1004b35a:	2102      	movs	r1, #2
1004b35c:	430a      	orrs	r2, r1
1004b35e:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004b360:	4b04      	ldr	r3, [pc, #16]	@ (1004b374 <LL_RCC_HSI_Disable+0x24>)
1004b362:	689a      	ldr	r2, [r3, #8]
1004b364:	4b03      	ldr	r3, [pc, #12]	@ (1004b374 <LL_RCC_HSI_Disable+0x24>)
1004b366:	2104      	movs	r1, #4
1004b368:	430a      	orrs	r2, r1
1004b36a:	609a      	str	r2, [r3, #8]
}
1004b36c:	46c0      	nop			@ (mov r8, r8)
1004b36e:	46bd      	mov	sp, r7
1004b370:	bd80      	pop	{r7, pc}
1004b372:	46c0      	nop			@ (mov r8, r8)
1004b374:	48400000 	.word	0x48400000

1004b378 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
1004b378:	b580      	push	{r7, lr}
1004b37a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004b37c:	4b07      	ldr	r3, [pc, #28]	@ (1004b39c <LL_RCC_HSI_IsReady+0x24>)
1004b37e:	681a      	ldr	r2, [r3, #0]
1004b380:	2380      	movs	r3, #128	@ 0x80
1004b382:	00db      	lsls	r3, r3, #3
1004b384:	401a      	ands	r2, r3
1004b386:	2380      	movs	r3, #128	@ 0x80
1004b388:	00db      	lsls	r3, r3, #3
1004b38a:	429a      	cmp	r2, r3
1004b38c:	d101      	bne.n	1004b392 <LL_RCC_HSI_IsReady+0x1a>
1004b38e:	2301      	movs	r3, #1
1004b390:	e000      	b.n	1004b394 <LL_RCC_HSI_IsReady+0x1c>
1004b392:	2300      	movs	r3, #0
}
1004b394:	0018      	movs	r0, r3
1004b396:	46bd      	mov	sp, r7
1004b398:	bd80      	pop	{r7, pc}
1004b39a:	46c0      	nop			@ (mov r8, r8)
1004b39c:	48400000 	.word	0x48400000

1004b3a0 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
1004b3a0:	b580      	push	{r7, lr}
1004b3a2:	b082      	sub	sp, #8
1004b3a4:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004b3a6:	46c0      	nop			@ (mov r8, r8)
1004b3a8:	4b0f      	ldr	r3, [pc, #60]	@ (1004b3e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004b3aa:	681a      	ldr	r2, [r3, #0]
1004b3ac:	2380      	movs	r3, #128	@ 0x80
1004b3ae:	029b      	lsls	r3, r3, #10
1004b3b0:	4013      	ands	r3, r2
1004b3b2:	d0f9      	beq.n	1004b3a8 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004b3b4:	4b0c      	ldr	r3, [pc, #48]	@ (1004b3e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004b3b6:	689a      	ldr	r2, [r3, #8]
1004b3b8:	4b0b      	ldr	r3, [pc, #44]	@ (1004b3e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004b3ba:	2102      	movs	r1, #2
1004b3bc:	430a      	orrs	r2, r1
1004b3be:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004b3c0:	2300      	movs	r3, #0
1004b3c2:	607b      	str	r3, [r7, #4]
1004b3c4:	e003      	b.n	1004b3ce <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004b3c6:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004b3c8:	687b      	ldr	r3, [r7, #4]
1004b3ca:	3301      	adds	r3, #1
1004b3cc:	607b      	str	r3, [r7, #4]
1004b3ce:	687b      	ldr	r3, [r7, #4]
1004b3d0:	2b05      	cmp	r3, #5
1004b3d2:	ddf8      	ble.n	1004b3c6 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004b3d4:	4b04      	ldr	r3, [pc, #16]	@ (1004b3e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004b3d6:	689a      	ldr	r2, [r3, #8]
1004b3d8:	4b03      	ldr	r3, [pc, #12]	@ (1004b3e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004b3da:	2104      	movs	r1, #4
1004b3dc:	430a      	orrs	r2, r1
1004b3de:	609a      	str	r2, [r3, #8]
}
1004b3e0:	46c0      	nop			@ (mov r8, r8)
1004b3e2:	46bd      	mov	sp, r7
1004b3e4:	b002      	add	sp, #8
1004b3e6:	bd80      	pop	{r7, pc}
1004b3e8:	48400000 	.word	0x48400000

1004b3ec <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
1004b3ec:	b580      	push	{r7, lr}
1004b3ee:	b082      	sub	sp, #8
1004b3f0:	af00      	add	r7, sp, #0
1004b3f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004b3f4:	4b06      	ldr	r3, [pc, #24]	@ (1004b410 <LL_RCC_LSCO_SetSource+0x24>)
1004b3f6:	689b      	ldr	r3, [r3, #8]
1004b3f8:	4a06      	ldr	r2, [pc, #24]	@ (1004b414 <LL_RCC_LSCO_SetSource+0x28>)
1004b3fa:	4013      	ands	r3, r2
1004b3fc:	0019      	movs	r1, r3
1004b3fe:	4b04      	ldr	r3, [pc, #16]	@ (1004b410 <LL_RCC_LSCO_SetSource+0x24>)
1004b400:	687a      	ldr	r2, [r7, #4]
1004b402:	430a      	orrs	r2, r1
1004b404:	609a      	str	r2, [r3, #8]
}
1004b406:	46c0      	nop			@ (mov r8, r8)
1004b408:	46bd      	mov	sp, r7
1004b40a:	b002      	add	sp, #8
1004b40c:	bd80      	pop	{r7, pc}
1004b40e:	46c0      	nop			@ (mov r8, r8)
1004b410:	48400000 	.word	0x48400000
1004b414:	fffe7fff 	.word	0xfffe7fff

1004b418 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
1004b418:	b580      	push	{r7, lr}
1004b41a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004b41c:	4b04      	ldr	r3, [pc, #16]	@ (1004b430 <LL_RCC_LSE_Enable+0x18>)
1004b41e:	681a      	ldr	r2, [r3, #0]
1004b420:	4b03      	ldr	r3, [pc, #12]	@ (1004b430 <LL_RCC_LSE_Enable+0x18>)
1004b422:	2110      	movs	r1, #16
1004b424:	430a      	orrs	r2, r1
1004b426:	601a      	str	r2, [r3, #0]
}
1004b428:	46c0      	nop			@ (mov r8, r8)
1004b42a:	46bd      	mov	sp, r7
1004b42c:	bd80      	pop	{r7, pc}
1004b42e:	46c0      	nop			@ (mov r8, r8)
1004b430:	48400000 	.word	0x48400000

1004b434 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
1004b434:	b580      	push	{r7, lr}
1004b436:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004b438:	4b04      	ldr	r3, [pc, #16]	@ (1004b44c <LL_RCC_LSE_Disable+0x18>)
1004b43a:	681a      	ldr	r2, [r3, #0]
1004b43c:	4b03      	ldr	r3, [pc, #12]	@ (1004b44c <LL_RCC_LSE_Disable+0x18>)
1004b43e:	2110      	movs	r1, #16
1004b440:	438a      	bics	r2, r1
1004b442:	601a      	str	r2, [r3, #0]
}
1004b444:	46c0      	nop			@ (mov r8, r8)
1004b446:	46bd      	mov	sp, r7
1004b448:	bd80      	pop	{r7, pc}
1004b44a:	46c0      	nop			@ (mov r8, r8)
1004b44c:	48400000 	.word	0x48400000

1004b450 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
1004b450:	b580      	push	{r7, lr}
1004b452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004b454:	4b05      	ldr	r3, [pc, #20]	@ (1004b46c <LL_RCC_LSE_IsReady+0x1c>)
1004b456:	681b      	ldr	r3, [r3, #0]
1004b458:	2220      	movs	r2, #32
1004b45a:	4013      	ands	r3, r2
1004b45c:	2b20      	cmp	r3, #32
1004b45e:	d101      	bne.n	1004b464 <LL_RCC_LSE_IsReady+0x14>
1004b460:	2301      	movs	r3, #1
1004b462:	e000      	b.n	1004b466 <LL_RCC_LSE_IsReady+0x16>
1004b464:	2300      	movs	r3, #0
}
1004b466:	0018      	movs	r0, r3
1004b468:	46bd      	mov	sp, r7
1004b46a:	bd80      	pop	{r7, pc}
1004b46c:	48400000 	.word	0x48400000

1004b470 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
1004b470:	b580      	push	{r7, lr}
1004b472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004b474:	4b04      	ldr	r3, [pc, #16]	@ (1004b488 <LL_RCC_LSE_EnableBypass+0x18>)
1004b476:	681a      	ldr	r2, [r3, #0]
1004b478:	4b03      	ldr	r3, [pc, #12]	@ (1004b488 <LL_RCC_LSE_EnableBypass+0x18>)
1004b47a:	2140      	movs	r1, #64	@ 0x40
1004b47c:	430a      	orrs	r2, r1
1004b47e:	601a      	str	r2, [r3, #0]
}
1004b480:	46c0      	nop			@ (mov r8, r8)
1004b482:	46bd      	mov	sp, r7
1004b484:	bd80      	pop	{r7, pc}
1004b486:	46c0      	nop			@ (mov r8, r8)
1004b488:	48400000 	.word	0x48400000

1004b48c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
1004b48c:	b580      	push	{r7, lr}
1004b48e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1004b490:	4b04      	ldr	r3, [pc, #16]	@ (1004b4a4 <LL_RCC_LSE_DisableBypass+0x18>)
1004b492:	681a      	ldr	r2, [r3, #0]
1004b494:	4b03      	ldr	r3, [pc, #12]	@ (1004b4a4 <LL_RCC_LSE_DisableBypass+0x18>)
1004b496:	2140      	movs	r1, #64	@ 0x40
1004b498:	438a      	bics	r2, r1
1004b49a:	601a      	str	r2, [r3, #0]
}
1004b49c:	46c0      	nop			@ (mov r8, r8)
1004b49e:	46bd      	mov	sp, r7
1004b4a0:	bd80      	pop	{r7, pc}
1004b4a2:	46c0      	nop			@ (mov r8, r8)
1004b4a4:	48400000 	.word	0x48400000

1004b4a8 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
1004b4a8:	b580      	push	{r7, lr}
1004b4aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004b4ac:	4b05      	ldr	r3, [pc, #20]	@ (1004b4c4 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004b4ae:	681b      	ldr	r3, [r3, #0]
1004b4b0:	2240      	movs	r2, #64	@ 0x40
1004b4b2:	4013      	ands	r3, r2
1004b4b4:	2b40      	cmp	r3, #64	@ 0x40
1004b4b6:	d101      	bne.n	1004b4bc <LL_RCC_LSE_IsBypassEnabled+0x14>
1004b4b8:	2301      	movs	r3, #1
1004b4ba:	e000      	b.n	1004b4be <LL_RCC_LSE_IsBypassEnabled+0x16>
1004b4bc:	2300      	movs	r3, #0
}
1004b4be:	0018      	movs	r0, r3
1004b4c0:	46bd      	mov	sp, r7
1004b4c2:	bd80      	pop	{r7, pc}
1004b4c4:	48400000 	.word	0x48400000

1004b4c8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
1004b4c8:	b580      	push	{r7, lr}
1004b4ca:	b082      	sub	sp, #8
1004b4cc:	af00      	add	r7, sp, #0
1004b4ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004b4d0:	4b06      	ldr	r3, [pc, #24]	@ (1004b4ec <LL_RCC_LSE_SetDriveCapability+0x24>)
1004b4d2:	68db      	ldr	r3, [r3, #12]
1004b4d4:	2260      	movs	r2, #96	@ 0x60
1004b4d6:	4393      	bics	r3, r2
1004b4d8:	0019      	movs	r1, r3
1004b4da:	4b04      	ldr	r3, [pc, #16]	@ (1004b4ec <LL_RCC_LSE_SetDriveCapability+0x24>)
1004b4dc:	687a      	ldr	r2, [r7, #4]
1004b4de:	430a      	orrs	r2, r1
1004b4e0:	60da      	str	r2, [r3, #12]
}
1004b4e2:	46c0      	nop			@ (mov r8, r8)
1004b4e4:	46bd      	mov	sp, r7
1004b4e6:	b002      	add	sp, #8
1004b4e8:	bd80      	pop	{r7, pc}
1004b4ea:	46c0      	nop			@ (mov r8, r8)
1004b4ec:	48400000 	.word	0x48400000

1004b4f0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004b4f0:	b580      	push	{r7, lr}
1004b4f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004b4f4:	4b04      	ldr	r3, [pc, #16]	@ (1004b508 <LL_RCC_LSI_Enable+0x18>)
1004b4f6:	681a      	ldr	r2, [r3, #0]
1004b4f8:	4b03      	ldr	r3, [pc, #12]	@ (1004b508 <LL_RCC_LSI_Enable+0x18>)
1004b4fa:	2104      	movs	r1, #4
1004b4fc:	430a      	orrs	r2, r1
1004b4fe:	601a      	str	r2, [r3, #0]
}
1004b500:	46c0      	nop			@ (mov r8, r8)
1004b502:	46bd      	mov	sp, r7
1004b504:	bd80      	pop	{r7, pc}
1004b506:	46c0      	nop			@ (mov r8, r8)
1004b508:	48400000 	.word	0x48400000

1004b50c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004b50c:	b580      	push	{r7, lr}
1004b50e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004b510:	4b04      	ldr	r3, [pc, #16]	@ (1004b524 <LL_RCC_LSI_Disable+0x18>)
1004b512:	681a      	ldr	r2, [r3, #0]
1004b514:	4b03      	ldr	r3, [pc, #12]	@ (1004b524 <LL_RCC_LSI_Disable+0x18>)
1004b516:	2104      	movs	r1, #4
1004b518:	438a      	bics	r2, r1
1004b51a:	601a      	str	r2, [r3, #0]
}
1004b51c:	46c0      	nop			@ (mov r8, r8)
1004b51e:	46bd      	mov	sp, r7
1004b520:	bd80      	pop	{r7, pc}
1004b522:	46c0      	nop			@ (mov r8, r8)
1004b524:	48400000 	.word	0x48400000

1004b528 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
1004b528:	b580      	push	{r7, lr}
1004b52a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004b52c:	4b05      	ldr	r3, [pc, #20]	@ (1004b544 <LL_RCC_LSI_IsReady+0x1c>)
1004b52e:	681b      	ldr	r3, [r3, #0]
1004b530:	2208      	movs	r2, #8
1004b532:	4013      	ands	r3, r2
1004b534:	2b08      	cmp	r3, #8
1004b536:	d101      	bne.n	1004b53c <LL_RCC_LSI_IsReady+0x14>
1004b538:	2301      	movs	r3, #1
1004b53a:	e000      	b.n	1004b53e <LL_RCC_LSI_IsReady+0x16>
1004b53c:	2300      	movs	r3, #0
}
1004b53e:	0018      	movs	r0, r3
1004b540:	46bd      	mov	sp, r7
1004b542:	bd80      	pop	{r7, pc}
1004b544:	48400000 	.word	0x48400000

1004b548 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004b548:	b580      	push	{r7, lr}
1004b54a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004b54c:	4b04      	ldr	r3, [pc, #16]	@ (1004b560 <LL_RCC_RC64MPLL_Enable+0x18>)
1004b54e:	681a      	ldr	r2, [r3, #0]
1004b550:	4b03      	ldr	r3, [pc, #12]	@ (1004b560 <LL_RCC_RC64MPLL_Enable+0x18>)
1004b552:	2180      	movs	r1, #128	@ 0x80
1004b554:	0189      	lsls	r1, r1, #6
1004b556:	430a      	orrs	r2, r1
1004b558:	601a      	str	r2, [r3, #0]
}
1004b55a:	46c0      	nop			@ (mov r8, r8)
1004b55c:	46bd      	mov	sp, r7
1004b55e:	bd80      	pop	{r7, pc}
1004b560:	48400000 	.word	0x48400000

1004b564 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004b564:	b580      	push	{r7, lr}
1004b566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004b568:	4b04      	ldr	r3, [pc, #16]	@ (1004b57c <LL_RCC_RC64MPLL_Disable+0x18>)
1004b56a:	681a      	ldr	r2, [r3, #0]
1004b56c:	4b03      	ldr	r3, [pc, #12]	@ (1004b57c <LL_RCC_RC64MPLL_Disable+0x18>)
1004b56e:	4904      	ldr	r1, [pc, #16]	@ (1004b580 <LL_RCC_RC64MPLL_Disable+0x1c>)
1004b570:	400a      	ands	r2, r1
1004b572:	601a      	str	r2, [r3, #0]
}
1004b574:	46c0      	nop			@ (mov r8, r8)
1004b576:	46bd      	mov	sp, r7
1004b578:	bd80      	pop	{r7, pc}
1004b57a:	46c0      	nop			@ (mov r8, r8)
1004b57c:	48400000 	.word	0x48400000
1004b580:	ffffdfff 	.word	0xffffdfff

1004b584 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004b584:	b580      	push	{r7, lr}
1004b586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004b588:	4b07      	ldr	r3, [pc, #28]	@ (1004b5a8 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004b58a:	681a      	ldr	r2, [r3, #0]
1004b58c:	2380      	movs	r3, #128	@ 0x80
1004b58e:	01db      	lsls	r3, r3, #7
1004b590:	401a      	ands	r2, r3
1004b592:	2380      	movs	r3, #128	@ 0x80
1004b594:	01db      	lsls	r3, r3, #7
1004b596:	429a      	cmp	r2, r3
1004b598:	d101      	bne.n	1004b59e <LL_RCC_RC64MPLL_IsReady+0x1a>
1004b59a:	2301      	movs	r3, #1
1004b59c:	e000      	b.n	1004b5a0 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004b59e:	2300      	movs	r3, #0
}
1004b5a0:	0018      	movs	r0, r3
1004b5a2:	46bd      	mov	sp, r7
1004b5a4:	bd80      	pop	{r7, pc}
1004b5a6:	46c0      	nop			@ (mov r8, r8)
1004b5a8:	48400000 	.word	0x48400000

1004b5ac <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004b5ac:	b580      	push	{r7, lr}
1004b5ae:	b082      	sub	sp, #8
1004b5b0:	af00      	add	r7, sp, #0
1004b5b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004b5b4:	4b06      	ldr	r3, [pc, #24]	@ (1004b5d0 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004b5b6:	689b      	ldr	r3, [r3, #8]
1004b5b8:	22e0      	movs	r2, #224	@ 0xe0
1004b5ba:	4393      	bics	r3, r2
1004b5bc:	0019      	movs	r1, r3
1004b5be:	4b04      	ldr	r3, [pc, #16]	@ (1004b5d0 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004b5c0:	687a      	ldr	r2, [r7, #4]
1004b5c2:	430a      	orrs	r2, r1
1004b5c4:	609a      	str	r2, [r3, #8]
}
1004b5c6:	46c0      	nop			@ (mov r8, r8)
1004b5c8:	46bd      	mov	sp, r7
1004b5ca:	b002      	add	sp, #8
1004b5cc:	bd80      	pop	{r7, pc}
1004b5ce:	46c0      	nop			@ (mov r8, r8)
1004b5d0:	48400000 	.word	0x48400000

1004b5d4 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004b5d4:	b580      	push	{r7, lr}
1004b5d6:	b084      	sub	sp, #16
1004b5d8:	af00      	add	r7, sp, #0
1004b5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004b5dc:	687b      	ldr	r3, [r7, #4]
1004b5de:	2b00      	cmp	r3, #0
1004b5e0:	d101      	bne.n	1004b5e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004b5e2:	2301      	movs	r3, #1
1004b5e4:	e13c      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004b5e6:	687b      	ldr	r3, [r7, #4]
1004b5e8:	681b      	ldr	r3, [r3, #0]
1004b5ea:	2210      	movs	r2, #16
1004b5ec:	4013      	ands	r3, r2
1004b5ee:	d033      	beq.n	1004b658 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004b5f0:	687b      	ldr	r3, [r7, #4]
1004b5f2:	689b      	ldr	r3, [r3, #8]
1004b5f4:	2b00      	cmp	r3, #0
1004b5f6:	d102      	bne.n	1004b5fe <HAL_RCC_OscConfig+0x2a>
1004b5f8:	f7ff fe96 	bl	1004b328 <LL_RCC_HSI_Enable>
1004b5fc:	e001      	b.n	1004b602 <HAL_RCC_OscConfig+0x2e>
1004b5fe:	f7ff fea7 	bl	1004b350 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004b602:	687b      	ldr	r3, [r7, #4]
1004b604:	689b      	ldr	r3, [r3, #8]
1004b606:	2b04      	cmp	r3, #4
1004b608:	d113      	bne.n	1004b632 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b60a:	f7fa febf 	bl	1004638c <HAL_GetTick>
1004b60e:	0003      	movs	r3, r0
1004b610:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004b612:	e008      	b.n	1004b626 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004b614:	f7fa feba 	bl	1004638c <HAL_GetTick>
1004b618:	0002      	movs	r2, r0
1004b61a:	68fb      	ldr	r3, [r7, #12]
1004b61c:	1ad3      	subs	r3, r2, r3
1004b61e:	2b64      	cmp	r3, #100	@ 0x64
1004b620:	d901      	bls.n	1004b626 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004b622:	2303      	movs	r3, #3
1004b624:	e11c      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004b626:	f7ff fea7 	bl	1004b378 <LL_RCC_HSI_IsReady>
1004b62a:	0003      	movs	r3, r0
1004b62c:	2b01      	cmp	r3, #1
1004b62e:	d0f1      	beq.n	1004b614 <HAL_RCC_OscConfig+0x40>
1004b630:	e012      	b.n	1004b658 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b632:	f7fa feab 	bl	1004638c <HAL_GetTick>
1004b636:	0003      	movs	r3, r0
1004b638:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004b63a:	e008      	b.n	1004b64e <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004b63c:	f7fa fea6 	bl	1004638c <HAL_GetTick>
1004b640:	0002      	movs	r2, r0
1004b642:	68fb      	ldr	r3, [r7, #12]
1004b644:	1ad3      	subs	r3, r2, r3
1004b646:	2b64      	cmp	r3, #100	@ 0x64
1004b648:	d901      	bls.n	1004b64e <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004b64a:	2303      	movs	r3, #3
1004b64c:	e108      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004b64e:	f7ff fe93 	bl	1004b378 <LL_RCC_HSI_IsReady>
1004b652:	0003      	movs	r3, r0
1004b654:	2b01      	cmp	r3, #1
1004b656:	d1f1      	bne.n	1004b63c <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004b658:	687b      	ldr	r3, [r7, #4]
1004b65a:	681b      	ldr	r3, [r3, #0]
1004b65c:	2201      	movs	r2, #1
1004b65e:	4013      	ands	r3, r2
1004b660:	d039      	beq.n	1004b6d6 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004b662:	2020      	movs	r0, #32
1004b664:	f7ff fe2a 	bl	1004b2bc <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004b668:	2030      	movs	r0, #48	@ 0x30
1004b66a:	f7ff fe47 	bl	1004b2fc <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004b66e:	687b      	ldr	r3, [r7, #4]
1004b670:	685a      	ldr	r2, [r3, #4]
1004b672:	2380      	movs	r3, #128	@ 0x80
1004b674:	025b      	lsls	r3, r3, #9
1004b676:	429a      	cmp	r2, r3
1004b678:	d102      	bne.n	1004b680 <HAL_RCC_OscConfig+0xac>
1004b67a:	f7ff fded 	bl	1004b258 <LL_RCC_HSE_Enable>
1004b67e:	e001      	b.n	1004b684 <HAL_RCC_OscConfig+0xb0>
1004b680:	f7ff fdf8 	bl	1004b274 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004b684:	687b      	ldr	r3, [r7, #4]
1004b686:	685b      	ldr	r3, [r3, #4]
1004b688:	2b00      	cmp	r3, #0
1004b68a:	d012      	beq.n	1004b6b2 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b68c:	f7fa fe7e 	bl	1004638c <HAL_GetTick>
1004b690:	0003      	movs	r3, r0
1004b692:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004b694:	e008      	b.n	1004b6a8 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004b696:	f7fa fe79 	bl	1004638c <HAL_GetTick>
1004b69a:	0002      	movs	r2, r0
1004b69c:	68fb      	ldr	r3, [r7, #12]
1004b69e:	1ad3      	subs	r3, r2, r3
1004b6a0:	2b64      	cmp	r3, #100	@ 0x64
1004b6a2:	d901      	bls.n	1004b6a8 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004b6a4:	2303      	movs	r3, #3
1004b6a6:	e0db      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
1004b6a8:	f7ff fdf4 	bl	1004b294 <LL_RCC_HSE_IsReady>
1004b6ac:	1e03      	subs	r3, r0, #0
1004b6ae:	d0f2      	beq.n	1004b696 <HAL_RCC_OscConfig+0xc2>
1004b6b0:	e011      	b.n	1004b6d6 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b6b2:	f7fa fe6b 	bl	1004638c <HAL_GetTick>
1004b6b6:	0003      	movs	r3, r0
1004b6b8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004b6ba:	e008      	b.n	1004b6ce <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004b6bc:	f7fa fe66 	bl	1004638c <HAL_GetTick>
1004b6c0:	0002      	movs	r2, r0
1004b6c2:	68fb      	ldr	r3, [r7, #12]
1004b6c4:	1ad3      	subs	r3, r2, r3
1004b6c6:	2b64      	cmp	r3, #100	@ 0x64
1004b6c8:	d901      	bls.n	1004b6ce <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004b6ca:	2303      	movs	r3, #3
1004b6cc:	e0c8      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004b6ce:	f7ff fde1 	bl	1004b294 <LL_RCC_HSE_IsReady>
1004b6d2:	1e03      	subs	r3, r0, #0
1004b6d4:	d1f2      	bne.n	1004b6bc <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004b6d6:	687b      	ldr	r3, [r7, #4]
1004b6d8:	681b      	ldr	r3, [r3, #0]
1004b6da:	2204      	movs	r2, #4
1004b6dc:	4013      	ands	r3, r2
1004b6de:	d03a      	beq.n	1004b756 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004b6e0:	687b      	ldr	r3, [r7, #4]
1004b6e2:	691b      	ldr	r3, [r3, #16]
1004b6e4:	2b00      	cmp	r3, #0
1004b6e6:	d022      	beq.n	1004b72e <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004b6e8:	f7ff ff10 	bl	1004b50c <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004b6ec:	46c0      	nop			@ (mov r8, r8)
1004b6ee:	f7ff ff1b 	bl	1004b528 <LL_RCC_LSI_IsReady>
1004b6f2:	1e03      	subs	r3, r0, #0
1004b6f4:	d1fb      	bne.n	1004b6ee <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004b6f6:	f7ff fe9d 	bl	1004b434 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004b6fa:	2380      	movs	r3, #128	@ 0x80
1004b6fc:	025b      	lsls	r3, r3, #9
1004b6fe:	0018      	movs	r0, r3
1004b700:	f7ff fe74 	bl	1004b3ec <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
1004b704:	f7ff fef4 	bl	1004b4f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b708:	f7fa fe40 	bl	1004638c <HAL_GetTick>
1004b70c:	0003      	movs	r3, r0
1004b70e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004b710:	e008      	b.n	1004b724 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004b712:	f7fa fe3b 	bl	1004638c <HAL_GetTick>
1004b716:	0002      	movs	r2, r0
1004b718:	68fb      	ldr	r3, [r7, #12]
1004b71a:	1ad3      	subs	r3, r2, r3
1004b71c:	2b02      	cmp	r3, #2
1004b71e:	d901      	bls.n	1004b724 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004b720:	2303      	movs	r3, #3
1004b722:	e09d      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004b724:	f7ff ff00 	bl	1004b528 <LL_RCC_LSI_IsReady>
1004b728:	1e03      	subs	r3, r0, #0
1004b72a:	d0f2      	beq.n	1004b712 <HAL_RCC_OscConfig+0x13e>
1004b72c:	e013      	b.n	1004b756 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004b72e:	f7ff feed 	bl	1004b50c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b732:	f7fa fe2b 	bl	1004638c <HAL_GetTick>
1004b736:	0003      	movs	r3, r0
1004b738:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004b73a:	e008      	b.n	1004b74e <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004b73c:	f7fa fe26 	bl	1004638c <HAL_GetTick>
1004b740:	0002      	movs	r2, r0
1004b742:	68fb      	ldr	r3, [r7, #12]
1004b744:	1ad3      	subs	r3, r2, r3
1004b746:	2b02      	cmp	r3, #2
1004b748:	d901      	bls.n	1004b74e <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004b74a:	2303      	movs	r3, #3
1004b74c:	e088      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004b74e:	f7ff feeb 	bl	1004b528 <LL_RCC_LSI_IsReady>
1004b752:	1e03      	subs	r3, r0, #0
1004b754:	d1f2      	bne.n	1004b73c <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004b756:	687b      	ldr	r3, [r7, #4]
1004b758:	681b      	ldr	r3, [r3, #0]
1004b75a:	2202      	movs	r2, #2
1004b75c:	4013      	ands	r3, r2
1004b75e:	d047      	beq.n	1004b7f0 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004b760:	f7ff fed4 	bl	1004b50c <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004b764:	f7ff fe66 	bl	1004b434 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004b768:	46c0      	nop			@ (mov r8, r8)
1004b76a:	f7ff fe71 	bl	1004b450 <LL_RCC_LSE_IsReady>
1004b76e:	1e03      	subs	r3, r0, #0
1004b770:	d1fb      	bne.n	1004b76a <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004b772:	23c0      	movs	r3, #192	@ 0xc0
1004b774:	019b      	lsls	r3, r3, #6
1004b776:	0018      	movs	r0, r3
1004b778:	f7ff fd56 	bl	1004b228 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004b77c:	2380      	movs	r3, #128	@ 0x80
1004b77e:	021b      	lsls	r3, r3, #8
1004b780:	0018      	movs	r0, r3
1004b782:	f7ff fe33 	bl	1004b3ec <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004b786:	2020      	movs	r0, #32
1004b788:	f7ff fe9e 	bl	1004b4c8 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004b78c:	687b      	ldr	r3, [r7, #4]
1004b78e:	68db      	ldr	r3, [r3, #12]
1004b790:	2b10      	cmp	r3, #16
1004b792:	d102      	bne.n	1004b79a <HAL_RCC_OscConfig+0x1c6>
1004b794:	f7ff fe40 	bl	1004b418 <LL_RCC_LSE_Enable>
1004b798:	e001      	b.n	1004b79e <HAL_RCC_OscConfig+0x1ca>
1004b79a:	f7ff fe4b 	bl	1004b434 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004b79e:	687b      	ldr	r3, [r7, #4]
1004b7a0:	68db      	ldr	r3, [r3, #12]
1004b7a2:	2b00      	cmp	r3, #0
1004b7a4:	d012      	beq.n	1004b7cc <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b7a6:	f7fa fdf1 	bl	1004638c <HAL_GetTick>
1004b7aa:	0003      	movs	r3, r0
1004b7ac:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004b7ae:	e008      	b.n	1004b7c2 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004b7b0:	f7fa fdec 	bl	1004638c <HAL_GetTick>
1004b7b4:	0002      	movs	r2, r0
1004b7b6:	68fb      	ldr	r3, [r7, #12]
1004b7b8:	1ad3      	subs	r3, r2, r3
1004b7ba:	2b64      	cmp	r3, #100	@ 0x64
1004b7bc:	d901      	bls.n	1004b7c2 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004b7be:	2303      	movs	r3, #3
1004b7c0:	e04e      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004b7c2:	f7ff fe45 	bl	1004b450 <LL_RCC_LSE_IsReady>
1004b7c6:	1e03      	subs	r3, r0, #0
1004b7c8:	d0f2      	beq.n	1004b7b0 <HAL_RCC_OscConfig+0x1dc>
1004b7ca:	e011      	b.n	1004b7f0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b7cc:	f7fa fdde 	bl	1004638c <HAL_GetTick>
1004b7d0:	0003      	movs	r3, r0
1004b7d2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004b7d4:	e008      	b.n	1004b7e8 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004b7d6:	f7fa fdd9 	bl	1004638c <HAL_GetTick>
1004b7da:	0002      	movs	r2, r0
1004b7dc:	68fb      	ldr	r3, [r7, #12]
1004b7de:	1ad3      	subs	r3, r2, r3
1004b7e0:	2b64      	cmp	r3, #100	@ 0x64
1004b7e2:	d901      	bls.n	1004b7e8 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
1004b7e4:	2303      	movs	r3, #3
1004b7e6:	e03b      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004b7e8:	f7ff fe32 	bl	1004b450 <LL_RCC_LSE_IsReady>
1004b7ec:	1e03      	subs	r3, r0, #0
1004b7ee:	d1f2      	bne.n	1004b7d6 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004b7f0:	687b      	ldr	r3, [r7, #4]
1004b7f2:	681b      	ldr	r3, [r3, #0]
1004b7f4:	2208      	movs	r2, #8
1004b7f6:	4013      	ands	r3, r2
1004b7f8:	d031      	beq.n	1004b85e <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004b7fa:	687b      	ldr	r3, [r7, #4]
1004b7fc:	695b      	ldr	r3, [r3, #20]
1004b7fe:	2b40      	cmp	r3, #64	@ 0x40
1004b800:	d102      	bne.n	1004b808 <HAL_RCC_OscConfig+0x234>
1004b802:	f7ff fe35 	bl	1004b470 <LL_RCC_LSE_EnableBypass>
1004b806:	e001      	b.n	1004b80c <HAL_RCC_OscConfig+0x238>
1004b808:	f7ff fe40 	bl	1004b48c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004b80c:	687b      	ldr	r3, [r7, #4]
1004b80e:	695b      	ldr	r3, [r3, #20]
1004b810:	2b00      	cmp	r3, #0
1004b812:	d012      	beq.n	1004b83a <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b814:	f7fa fdba 	bl	1004638c <HAL_GetTick>
1004b818:	0003      	movs	r3, r0
1004b81a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004b81c:	e008      	b.n	1004b830 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004b81e:	f7fa fdb5 	bl	1004638c <HAL_GetTick>
1004b822:	0002      	movs	r2, r0
1004b824:	68fb      	ldr	r3, [r7, #12]
1004b826:	1ad3      	subs	r3, r2, r3
1004b828:	2b64      	cmp	r3, #100	@ 0x64
1004b82a:	d901      	bls.n	1004b830 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
1004b82c:	2303      	movs	r3, #3
1004b82e:	e017      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004b830:	f7ff fe3a 	bl	1004b4a8 <LL_RCC_LSE_IsBypassEnabled>
1004b834:	1e03      	subs	r3, r0, #0
1004b836:	d0f2      	beq.n	1004b81e <HAL_RCC_OscConfig+0x24a>
1004b838:	e011      	b.n	1004b85e <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004b83a:	f7fa fda7 	bl	1004638c <HAL_GetTick>
1004b83e:	0003      	movs	r3, r0
1004b840:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004b842:	e008      	b.n	1004b856 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004b844:	f7fa fda2 	bl	1004638c <HAL_GetTick>
1004b848:	0002      	movs	r2, r0
1004b84a:	68fb      	ldr	r3, [r7, #12]
1004b84c:	1ad3      	subs	r3, r2, r3
1004b84e:	2b64      	cmp	r3, #100	@ 0x64
1004b850:	d901      	bls.n	1004b856 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004b852:	2303      	movs	r3, #3
1004b854:	e004      	b.n	1004b860 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004b856:	f7ff fe27 	bl	1004b4a8 <LL_RCC_LSE_IsBypassEnabled>
1004b85a:	1e03      	subs	r3, r0, #0
1004b85c:	d1f2      	bne.n	1004b844 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1004b85e:	2300      	movs	r3, #0
}
1004b860:	0018      	movs	r0, r3
1004b862:	46bd      	mov	sp, r7
1004b864:	b004      	add	sp, #16
1004b866:	bd80      	pop	{r7, pc}

1004b868 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004b868:	b580      	push	{r7, lr}
1004b86a:	b084      	sub	sp, #16
1004b86c:	af00      	add	r7, sp, #0
1004b86e:	6078      	str	r0, [r7, #4]
1004b870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004b872:	687b      	ldr	r3, [r7, #4]
1004b874:	2b00      	cmp	r3, #0
1004b876:	d101      	bne.n	1004b87c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004b878:	2301      	movs	r3, #1
1004b87a:	e098      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004b87c:	4b4e      	ldr	r3, [pc, #312]	@ (1004b9b8 <HAL_RCC_ClockConfig+0x150>)
1004b87e:	685b      	ldr	r3, [r3, #4]
1004b880:	2230      	movs	r2, #48	@ 0x30
1004b882:	4393      	bics	r3, r2
1004b884:	0019      	movs	r1, r3
1004b886:	4b4c      	ldr	r3, [pc, #304]	@ (1004b9b8 <HAL_RCC_ClockConfig+0x150>)
1004b888:	683a      	ldr	r2, [r7, #0]
1004b88a:	430a      	orrs	r2, r1
1004b88c:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004b88e:	687b      	ldr	r3, [r7, #4]
1004b890:	681b      	ldr	r3, [r3, #0]
1004b892:	2b02      	cmp	r3, #2
1004b894:	d10e      	bne.n	1004b8b4 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004b896:	f7ff fd47 	bl	1004b328 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004b89a:	f7ff fd6d 	bl	1004b378 <LL_RCC_HSI_IsReady>
1004b89e:	1e03      	subs	r3, r0, #0
1004b8a0:	d101      	bne.n	1004b8a6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004b8a2:	2301      	movs	r3, #1
1004b8a4:	e083      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004b8a6:	f7ff fe5d 	bl	1004b564 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004b8aa:	687b      	ldr	r3, [r7, #4]
1004b8ac:	685b      	ldr	r3, [r3, #4]
1004b8ae:	0018      	movs	r0, r3
1004b8b0:	f7ff fe7c 	bl	1004b5ac <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
1004b8b4:	687b      	ldr	r3, [r7, #4]
1004b8b6:	681b      	ldr	r3, [r3, #0]
1004b8b8:	2b00      	cmp	r3, #0
1004b8ba:	d124      	bne.n	1004b906 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004b8bc:	f7ff fd5c 	bl	1004b378 <LL_RCC_HSI_IsReady>
1004b8c0:	1e03      	subs	r3, r0, #0
1004b8c2:	d101      	bne.n	1004b8c8 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
1004b8c4:	2301      	movs	r3, #1
1004b8c6:	e072      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004b8c8:	f7ff fce4 	bl	1004b294 <LL_RCC_HSE_IsReady>
1004b8cc:	1e03      	subs	r3, r0, #0
1004b8ce:	d101      	bne.n	1004b8d4 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004b8d0:	2301      	movs	r3, #1
1004b8d2:	e06c      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004b8d4:	f7ff fe38 	bl	1004b548 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004b8d8:	f7fa fd58 	bl	1004638c <HAL_GetTick>
1004b8dc:	0003      	movs	r3, r0
1004b8de:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004b8e0:	e008      	b.n	1004b8f4 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004b8e2:	f7fa fd53 	bl	1004638c <HAL_GetTick>
1004b8e6:	0002      	movs	r2, r0
1004b8e8:	68fb      	ldr	r3, [r7, #12]
1004b8ea:	1ad3      	subs	r3, r2, r3
1004b8ec:	2b02      	cmp	r3, #2
1004b8ee:	d901      	bls.n	1004b8f4 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004b8f0:	2303      	movs	r3, #3
1004b8f2:	e05c      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004b8f4:	f7ff fe46 	bl	1004b584 <LL_RCC_RC64MPLL_IsReady>
1004b8f8:	1e03      	subs	r3, r0, #0
1004b8fa:	d0f2      	beq.n	1004b8e2 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004b8fc:	687b      	ldr	r3, [r7, #4]
1004b8fe:	685b      	ldr	r3, [r3, #4]
1004b900:	0018      	movs	r0, r3
1004b902:	f7ff fe53 	bl	1004b5ac <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004b906:	687b      	ldr	r3, [r7, #4]
1004b908:	681b      	ldr	r3, [r3, #0]
1004b90a:	2b01      	cmp	r3, #1
1004b90c:	d117      	bne.n	1004b93e <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004b90e:	f7ff fd47 	bl	1004b3a0 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004b912:	f7ff fd31 	bl	1004b378 <LL_RCC_HSI_IsReady>
1004b916:	1e03      	subs	r3, r0, #0
1004b918:	d001      	beq.n	1004b91e <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004b91a:	2301      	movs	r3, #1
1004b91c:	e047      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004b91e:	f7ff fcb9 	bl	1004b294 <LL_RCC_HSE_IsReady>
1004b922:	1e03      	subs	r3, r0, #0
1004b924:	d101      	bne.n	1004b92a <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004b926:	2301      	movs	r3, #1
1004b928:	e041      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004b92a:	4b24      	ldr	r3, [pc, #144]	@ (1004b9bc <HAL_RCC_ClockConfig+0x154>)
1004b92c:	689b      	ldr	r3, [r3, #8]
1004b92e:	22e0      	movs	r2, #224	@ 0xe0
1004b930:	4393      	bics	r3, r2
1004b932:	0019      	movs	r1, r3
1004b934:	687b      	ldr	r3, [r7, #4]
1004b936:	685a      	ldr	r2, [r3, #4]
1004b938:	4b20      	ldr	r3, [pc, #128]	@ (1004b9bc <HAL_RCC_ClockConfig+0x154>)
1004b93a:	430a      	orrs	r2, r1
1004b93c:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004b93e:	4b1e      	ldr	r3, [pc, #120]	@ (1004b9b8 <HAL_RCC_ClockConfig+0x150>)
1004b940:	685b      	ldr	r3, [r3, #4]
1004b942:	2230      	movs	r2, #48	@ 0x30
1004b944:	4013      	ands	r3, r2
1004b946:	683a      	ldr	r2, [r7, #0]
1004b948:	429a      	cmp	r2, r3
1004b94a:	d01d      	beq.n	1004b988 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004b94c:	4b1a      	ldr	r3, [pc, #104]	@ (1004b9b8 <HAL_RCC_ClockConfig+0x150>)
1004b94e:	685b      	ldr	r3, [r3, #4]
1004b950:	2230      	movs	r2, #48	@ 0x30
1004b952:	4393      	bics	r3, r2
1004b954:	0019      	movs	r1, r3
1004b956:	4b18      	ldr	r3, [pc, #96]	@ (1004b9b8 <HAL_RCC_ClockConfig+0x150>)
1004b958:	683a      	ldr	r2, [r7, #0]
1004b95a:	430a      	orrs	r2, r1
1004b95c:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004b95e:	f7fa fd15 	bl	1004638c <HAL_GetTick>
1004b962:	0003      	movs	r3, r0
1004b964:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004b966:	e008      	b.n	1004b97a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004b968:	f7fa fd10 	bl	1004638c <HAL_GetTick>
1004b96c:	0002      	movs	r2, r0
1004b96e:	68fb      	ldr	r3, [r7, #12]
1004b970:	1ad3      	subs	r3, r2, r3
1004b972:	2b02      	cmp	r3, #2
1004b974:	d901      	bls.n	1004b97a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004b976:	2303      	movs	r3, #3
1004b978:	e019      	b.n	1004b9ae <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004b97a:	4b0f      	ldr	r3, [pc, #60]	@ (1004b9b8 <HAL_RCC_ClockConfig+0x150>)
1004b97c:	685b      	ldr	r3, [r3, #4]
1004b97e:	2230      	movs	r2, #48	@ 0x30
1004b980:	4013      	ands	r3, r2
1004b982:	683a      	ldr	r2, [r7, #0]
1004b984:	429a      	cmp	r2, r3
1004b986:	d1ef      	bne.n	1004b968 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004b988:	2300      	movs	r3, #0
1004b98a:	60bb      	str	r3, [r7, #8]
1004b98c:	e003      	b.n	1004b996 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004b98e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004b990:	68bb      	ldr	r3, [r7, #8]
1004b992:	3301      	adds	r3, #1
1004b994:	60bb      	str	r3, [r7, #8]
1004b996:	68bb      	ldr	r3, [r7, #8]
1004b998:	2b05      	cmp	r3, #5
1004b99a:	ddf8      	ble.n	1004b98e <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004b99c:	f7fa fb1c 	bl	10045fd8 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004b9a0:	f7fa fcfe 	bl	100463a0 <HAL_GetTickPrio>
1004b9a4:	0003      	movs	r3, r0
1004b9a6:	0018      	movs	r0, r3
1004b9a8:	f7fa fc96 	bl	100462d8 <HAL_InitTick>
1004b9ac:	0003      	movs	r3, r0
}
1004b9ae:	0018      	movs	r0, r3
1004b9b0:	46bd      	mov	sp, r7
1004b9b2:	b004      	add	sp, #16
1004b9b4:	bd80      	pop	{r7, pc}
1004b9b6:	46c0      	nop			@ (mov r8, r8)
1004b9b8:	40001000 	.word	0x40001000
1004b9bc:	48400000 	.word	0x48400000

1004b9c0 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004b9c0:	b580      	push	{r7, lr}
1004b9c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004b9c4:	4b02      	ldr	r3, [pc, #8]	@ (1004b9d0 <HAL_RCC_GetSysClockFreq+0x10>)
1004b9c6:	681b      	ldr	r3, [r3, #0]
}
1004b9c8:	0018      	movs	r0, r3
1004b9ca:	46bd      	mov	sp, r7
1004b9cc:	bd80      	pop	{r7, pc}
1004b9ce:	46c0      	nop			@ (mov r8, r8)
1004b9d0:	2000270c 	.word	0x2000270c

1004b9d4 <LL_RCC_HSE_IsReady>:
{
1004b9d4:	b580      	push	{r7, lr}
1004b9d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004b9d8:	4b07      	ldr	r3, [pc, #28]	@ (1004b9f8 <LL_RCC_HSE_IsReady+0x24>)
1004b9da:	681a      	ldr	r2, [r3, #0]
1004b9dc:	2380      	movs	r3, #128	@ 0x80
1004b9de:	029b      	lsls	r3, r3, #10
1004b9e0:	401a      	ands	r2, r3
1004b9e2:	2380      	movs	r3, #128	@ 0x80
1004b9e4:	029b      	lsls	r3, r3, #10
1004b9e6:	429a      	cmp	r2, r3
1004b9e8:	d101      	bne.n	1004b9ee <LL_RCC_HSE_IsReady+0x1a>
1004b9ea:	2301      	movs	r3, #1
1004b9ec:	e000      	b.n	1004b9f0 <LL_RCC_HSE_IsReady+0x1c>
1004b9ee:	2300      	movs	r3, #0
}
1004b9f0:	0018      	movs	r0, r3
1004b9f2:	46bd      	mov	sp, r7
1004b9f4:	bd80      	pop	{r7, pc}
1004b9f6:	46c0      	nop			@ (mov r8, r8)
1004b9f8:	48400000 	.word	0x48400000

1004b9fc <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004b9fc:	b580      	push	{r7, lr}
1004b9fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004ba00:	4b05      	ldr	r3, [pc, #20]	@ (1004ba18 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004ba02:	689b      	ldr	r3, [r3, #8]
1004ba04:	2208      	movs	r2, #8
1004ba06:	4013      	ands	r3, r2
1004ba08:	2b08      	cmp	r3, #8
1004ba0a:	d101      	bne.n	1004ba10 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004ba0c:	2301      	movs	r3, #1
1004ba0e:	e000      	b.n	1004ba12 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004ba10:	2300      	movs	r3, #0
}
1004ba12:	0018      	movs	r0, r3
1004ba14:	46bd      	mov	sp, r7
1004ba16:	bd80      	pop	{r7, pc}
1004ba18:	48400000 	.word	0x48400000

1004ba1c <LL_RCC_LSCO_SetSource>:
{
1004ba1c:	b580      	push	{r7, lr}
1004ba1e:	b082      	sub	sp, #8
1004ba20:	af00      	add	r7, sp, #0
1004ba22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004ba24:	4b06      	ldr	r3, [pc, #24]	@ (1004ba40 <LL_RCC_LSCO_SetSource+0x24>)
1004ba26:	689b      	ldr	r3, [r3, #8]
1004ba28:	4a06      	ldr	r2, [pc, #24]	@ (1004ba44 <LL_RCC_LSCO_SetSource+0x28>)
1004ba2a:	4013      	ands	r3, r2
1004ba2c:	0019      	movs	r1, r3
1004ba2e:	4b04      	ldr	r3, [pc, #16]	@ (1004ba40 <LL_RCC_LSCO_SetSource+0x24>)
1004ba30:	687a      	ldr	r2, [r7, #4]
1004ba32:	430a      	orrs	r2, r1
1004ba34:	609a      	str	r2, [r3, #8]
}
1004ba36:	46c0      	nop			@ (mov r8, r8)
1004ba38:	46bd      	mov	sp, r7
1004ba3a:	b002      	add	sp, #8
1004ba3c:	bd80      	pop	{r7, pc}
1004ba3e:	46c0      	nop			@ (mov r8, r8)
1004ba40:	48400000 	.word	0x48400000
1004ba44:	fffe7fff 	.word	0xfffe7fff

1004ba48 <LL_RCC_LSCO_GetSource>:
{
1004ba48:	b580      	push	{r7, lr}
1004ba4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
1004ba4c:	4b03      	ldr	r3, [pc, #12]	@ (1004ba5c <LL_RCC_LSCO_GetSource+0x14>)
1004ba4e:	689a      	ldr	r2, [r3, #8]
1004ba50:	23c0      	movs	r3, #192	@ 0xc0
1004ba52:	025b      	lsls	r3, r3, #9
1004ba54:	4013      	ands	r3, r2
}
1004ba56:	0018      	movs	r0, r3
1004ba58:	46bd      	mov	sp, r7
1004ba5a:	bd80      	pop	{r7, pc}
1004ba5c:	48400000 	.word	0x48400000

1004ba60 <LL_RCC_SetRFClock>:
{
1004ba60:	b580      	push	{r7, lr}
1004ba62:	b082      	sub	sp, #8
1004ba64:	af00      	add	r7, sp, #0
1004ba66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1004ba68:	4b06      	ldr	r3, [pc, #24]	@ (1004ba84 <LL_RCC_SetRFClock+0x24>)
1004ba6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004ba6c:	2204      	movs	r2, #4
1004ba6e:	4393      	bics	r3, r2
1004ba70:	0019      	movs	r1, r3
1004ba72:	4b04      	ldr	r3, [pc, #16]	@ (1004ba84 <LL_RCC_SetRFClock+0x24>)
1004ba74:	687a      	ldr	r2, [r7, #4]
1004ba76:	430a      	orrs	r2, r1
1004ba78:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004ba7a:	46c0      	nop			@ (mov r8, r8)
1004ba7c:	46bd      	mov	sp, r7
1004ba7e:	b002      	add	sp, #8
1004ba80:	bd80      	pop	{r7, pc}
1004ba82:	46c0      	nop			@ (mov r8, r8)
1004ba84:	48400000 	.word	0x48400000

1004ba88 <LL_RCC_GetRFClock>:
{
1004ba88:	b580      	push	{r7, lr}
1004ba8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
1004ba8c:	4b03      	ldr	r3, [pc, #12]	@ (1004ba9c <LL_RCC_GetRFClock+0x14>)
1004ba8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004ba90:	2204      	movs	r2, #4
1004ba92:	4013      	ands	r3, r2
}
1004ba94:	0018      	movs	r0, r3
1004ba96:	46bd      	mov	sp, r7
1004ba98:	bd80      	pop	{r7, pc}
1004ba9a:	46c0      	nop			@ (mov r8, r8)
1004ba9c:	48400000 	.word	0x48400000

1004baa0 <LL_RCC_SetSMPSPrescaler>:
{
1004baa0:	b580      	push	{r7, lr}
1004baa2:	b082      	sub	sp, #8
1004baa4:	af00      	add	r7, sp, #0
1004baa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1004baa8:	4b06      	ldr	r3, [pc, #24]	@ (1004bac4 <LL_RCC_SetSMPSPrescaler+0x24>)
1004baaa:	689b      	ldr	r3, [r3, #8]
1004baac:	4a06      	ldr	r2, [pc, #24]	@ (1004bac8 <LL_RCC_SetSMPSPrescaler+0x28>)
1004baae:	4013      	ands	r3, r2
1004bab0:	0019      	movs	r1, r3
1004bab2:	4b04      	ldr	r3, [pc, #16]	@ (1004bac4 <LL_RCC_SetSMPSPrescaler+0x24>)
1004bab4:	687a      	ldr	r2, [r7, #4]
1004bab6:	430a      	orrs	r2, r1
1004bab8:	609a      	str	r2, [r3, #8]
}
1004baba:	46c0      	nop			@ (mov r8, r8)
1004babc:	46bd      	mov	sp, r7
1004babe:	b002      	add	sp, #8
1004bac0:	bd80      	pop	{r7, pc}
1004bac2:	46c0      	nop			@ (mov r8, r8)
1004bac4:	48400000 	.word	0x48400000
1004bac8:	ffffefff 	.word	0xffffefff

1004bacc <LL_RCC_GetSMPSPrescaler>:
{
1004bacc:	b580      	push	{r7, lr}
1004bace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004bad0:	4b03      	ldr	r3, [pc, #12]	@ (1004bae0 <LL_RCC_GetSMPSPrescaler+0x14>)
1004bad2:	689a      	ldr	r2, [r3, #8]
1004bad4:	2380      	movs	r3, #128	@ 0x80
1004bad6:	015b      	lsls	r3, r3, #5
1004bad8:	4013      	ands	r3, r2
}
1004bada:	0018      	movs	r0, r3
1004badc:	46bd      	mov	sp, r7
1004bade:	bd80      	pop	{r7, pc}
1004bae0:	48400000 	.word	0x48400000

1004bae4 <LL_RCC_SetLPUARTClockSource>:
{
1004bae4:	b580      	push	{r7, lr}
1004bae6:	b082      	sub	sp, #8
1004bae8:	af00      	add	r7, sp, #0
1004baea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004baec:	4b06      	ldr	r3, [pc, #24]	@ (1004bb08 <LL_RCC_SetLPUARTClockSource+0x24>)
1004baee:	689b      	ldr	r3, [r3, #8]
1004baf0:	4a06      	ldr	r2, [pc, #24]	@ (1004bb0c <LL_RCC_SetLPUARTClockSource+0x28>)
1004baf2:	4013      	ands	r3, r2
1004baf4:	0019      	movs	r1, r3
1004baf6:	4b04      	ldr	r3, [pc, #16]	@ (1004bb08 <LL_RCC_SetLPUARTClockSource+0x24>)
1004baf8:	687a      	ldr	r2, [r7, #4]
1004bafa:	430a      	orrs	r2, r1
1004bafc:	609a      	str	r2, [r3, #8]
}
1004bafe:	46c0      	nop			@ (mov r8, r8)
1004bb00:	46bd      	mov	sp, r7
1004bb02:	b002      	add	sp, #8
1004bb04:	bd80      	pop	{r7, pc}
1004bb06:	46c0      	nop			@ (mov r8, r8)
1004bb08:	48400000 	.word	0x48400000
1004bb0c:	ffffdfff 	.word	0xffffdfff

1004bb10 <LL_RCC_GetLPUARTClockSource>:
{
1004bb10:	b580      	push	{r7, lr}
1004bb12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004bb14:	4b03      	ldr	r3, [pc, #12]	@ (1004bb24 <LL_RCC_GetLPUARTClockSource+0x14>)
1004bb16:	689a      	ldr	r2, [r3, #8]
1004bb18:	2380      	movs	r3, #128	@ 0x80
1004bb1a:	019b      	lsls	r3, r3, #6
1004bb1c:	4013      	ands	r3, r2
}
1004bb1e:	0018      	movs	r0, r3
1004bb20:	46bd      	mov	sp, r7
1004bb22:	bd80      	pop	{r7, pc}
1004bb24:	48400000 	.word	0x48400000

1004bb28 <LL_RCC_SetSPI3I2SClockSource>:
{
1004bb28:	b580      	push	{r7, lr}
1004bb2a:	b082      	sub	sp, #8
1004bb2c:	af00      	add	r7, sp, #0
1004bb2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004bb30:	4b06      	ldr	r3, [pc, #24]	@ (1004bb4c <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004bb32:	689b      	ldr	r3, [r3, #8]
1004bb34:	4a06      	ldr	r2, [pc, #24]	@ (1004bb50 <LL_RCC_SetSPI3I2SClockSource+0x28>)
1004bb36:	4013      	ands	r3, r2
1004bb38:	0019      	movs	r1, r3
1004bb3a:	4b04      	ldr	r3, [pc, #16]	@ (1004bb4c <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004bb3c:	687a      	ldr	r2, [r7, #4]
1004bb3e:	430a      	orrs	r2, r1
1004bb40:	609a      	str	r2, [r3, #8]
}
1004bb42:	46c0      	nop			@ (mov r8, r8)
1004bb44:	46bd      	mov	sp, r7
1004bb46:	b002      	add	sp, #8
1004bb48:	bd80      	pop	{r7, pc}
1004bb4a:	46c0      	nop			@ (mov r8, r8)
1004bb4c:	48400000 	.word	0x48400000
1004bb50:	ff3fffff 	.word	0xff3fffff

1004bb54 <LL_RCC_GetSPI3I2SClockSource>:
{
1004bb54:	b580      	push	{r7, lr}
1004bb56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1004bb58:	4b03      	ldr	r3, [pc, #12]	@ (1004bb68 <LL_RCC_GetSPI3I2SClockSource+0x14>)
1004bb5a:	689a      	ldr	r2, [r3, #8]
1004bb5c:	23c0      	movs	r3, #192	@ 0xc0
1004bb5e:	041b      	lsls	r3, r3, #16
1004bb60:	4013      	ands	r3, r2
}
1004bb62:	0018      	movs	r0, r3
1004bb64:	46bd      	mov	sp, r7
1004bb66:	bd80      	pop	{r7, pc}
1004bb68:	48400000 	.word	0x48400000

1004bb6c <LL_RCC_RC64MPLL_IsReady>:
{
1004bb6c:	b580      	push	{r7, lr}
1004bb6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004bb70:	4b07      	ldr	r3, [pc, #28]	@ (1004bb90 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004bb72:	681a      	ldr	r2, [r3, #0]
1004bb74:	2380      	movs	r3, #128	@ 0x80
1004bb76:	01db      	lsls	r3, r3, #7
1004bb78:	401a      	ands	r2, r3
1004bb7a:	2380      	movs	r3, #128	@ 0x80
1004bb7c:	01db      	lsls	r3, r3, #7
1004bb7e:	429a      	cmp	r2, r3
1004bb80:	d101      	bne.n	1004bb86 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004bb82:	2301      	movs	r3, #1
1004bb84:	e000      	b.n	1004bb88 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004bb86:	2300      	movs	r3, #0
}
1004bb88:	0018      	movs	r0, r3
1004bb8a:	46bd      	mov	sp, r7
1004bb8c:	bd80      	pop	{r7, pc}
1004bb8e:	46c0      	nop			@ (mov r8, r8)
1004bb90:	48400000 	.word	0x48400000

1004bb94 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004bb94:	b580      	push	{r7, lr}
1004bb96:	b082      	sub	sp, #8
1004bb98:	af00      	add	r7, sp, #0
1004bb9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004bb9c:	687b      	ldr	r3, [r7, #4]
1004bb9e:	681b      	ldr	r3, [r3, #0]
1004bba0:	2201      	movs	r2, #1
1004bba2:	4013      	ands	r3, r2
1004bba4:	d004      	beq.n	1004bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004bba6:	687b      	ldr	r3, [r7, #4]
1004bba8:	691b      	ldr	r3, [r3, #16]
1004bbaa:	0018      	movs	r0, r3
1004bbac:	f7ff ff58 	bl	1004ba60 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004bbb0:	687b      	ldr	r3, [r7, #4]
1004bbb2:	681b      	ldr	r3, [r3, #0]
1004bbb4:	2202      	movs	r2, #2
1004bbb6:	4013      	ands	r3, r2
1004bbb8:	d004      	beq.n	1004bbc4 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004bbba:	687b      	ldr	r3, [r7, #4]
1004bbbc:	695b      	ldr	r3, [r3, #20]
1004bbbe:	0018      	movs	r0, r3
1004bbc0:	f7ff ff6e 	bl	1004baa0 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004bbc4:	687b      	ldr	r3, [r7, #4]
1004bbc6:	681b      	ldr	r3, [r3, #0]
1004bbc8:	2208      	movs	r2, #8
1004bbca:	4013      	ands	r3, r2
1004bbcc:	d004      	beq.n	1004bbd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004bbce:	687b      	ldr	r3, [r7, #4]
1004bbd0:	685b      	ldr	r3, [r3, #4]
1004bbd2:	0018      	movs	r0, r3
1004bbd4:	f7ff ffa8 	bl	1004bb28 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004bbd8:	687b      	ldr	r3, [r7, #4]
1004bbda:	681b      	ldr	r3, [r3, #0]
1004bbdc:	2210      	movs	r2, #16
1004bbde:	4013      	ands	r3, r2
1004bbe0:	d004      	beq.n	1004bbec <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004bbe2:	687b      	ldr	r3, [r7, #4]
1004bbe4:	68db      	ldr	r3, [r3, #12]
1004bbe6:	0018      	movs	r0, r3
1004bbe8:	f7ff ff7c 	bl	1004bae4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004bbec:	687b      	ldr	r3, [r7, #4]
1004bbee:	689b      	ldr	r3, [r3, #8]
1004bbf0:	2220      	movs	r2, #32
1004bbf2:	4013      	ands	r3, r2
1004bbf4:	d004      	beq.n	1004bc00 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004bbf6:	687b      	ldr	r3, [r7, #4]
1004bbf8:	689b      	ldr	r3, [r3, #8]
1004bbfa:	0018      	movs	r0, r3
1004bbfc:	f7ff ff0e 	bl	1004ba1c <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004bc00:	2300      	movs	r3, #0
}
1004bc02:	0018      	movs	r0, r3
1004bc04:	46bd      	mov	sp, r7
1004bc06:	b002      	add	sp, #8
1004bc08:	bd80      	pop	{r7, pc}
	...

1004bc0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004bc0c:	b580      	push	{r7, lr}
1004bc0e:	b084      	sub	sp, #16
1004bc10:	af00      	add	r7, sp, #0
1004bc12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
1004bc14:	2300      	movs	r3, #0
1004bc16:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004bc18:	687b      	ldr	r3, [r7, #4]
1004bc1a:	2b20      	cmp	r3, #32
1004bc1c:	d900      	bls.n	1004bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004bc1e:	e07b      	b.n	1004bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004bc20:	687b      	ldr	r3, [r7, #4]
1004bc22:	009a      	lsls	r2, r3, #2
1004bc24:	4b40      	ldr	r3, [pc, #256]	@ (1004bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004bc26:	18d3      	adds	r3, r2, r3
1004bc28:	681b      	ldr	r3, [r3, #0]
1004bc2a:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
1004bc2c:	f7ff ff2c 	bl	1004ba88 <LL_RCC_GetRFClock>
1004bc30:	1e03      	subs	r3, r0, #0
1004bc32:	d002      	beq.n	1004bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
1004bc34:	2b04      	cmp	r3, #4
1004bc36:	d003      	beq.n	1004bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004bc38:	e071      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004bc3a:	4b3c      	ldr	r3, [pc, #240]	@ (1004bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004bc3c:	60fb      	str	r3, [r7, #12]
          break;
1004bc3e:	e002      	b.n	1004bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004bc40:	4b3b      	ldr	r3, [pc, #236]	@ (1004bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004bc42:	60fb      	str	r3, [r7, #12]
          break;
1004bc44:	46c0      	nop			@ (mov r8, r8)
      break;
1004bc46:	e06a      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004bc48:	f7ff ff40 	bl	1004bacc <LL_RCC_GetSMPSPrescaler>
1004bc4c:	1e03      	subs	r3, r0, #0
1004bc4e:	d004      	beq.n	1004bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004bc50:	2280      	movs	r2, #128	@ 0x80
1004bc52:	0152      	lsls	r2, r2, #5
1004bc54:	4293      	cmp	r3, r2
1004bc56:	d003      	beq.n	1004bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004bc58:	e061      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004bc5a:	4b36      	ldr	r3, [pc, #216]	@ (1004bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1004bc5c:	60fb      	str	r3, [r7, #12]
          break;
1004bc5e:	e002      	b.n	1004bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004bc60:	4b35      	ldr	r3, [pc, #212]	@ (1004bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004bc62:	60fb      	str	r3, [r7, #12]
          break;
1004bc64:	46c0      	nop			@ (mov r8, r8)
      break;
1004bc66:	e05a      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004bc68:	f7ff fec8 	bl	1004b9fc <LL_RCC_DIRECT_HSE_IsEnabled>
1004bc6c:	1e03      	subs	r3, r0, #0
1004bc6e:	d005      	beq.n	1004bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004bc70:	f7ff feb0 	bl	1004b9d4 <LL_RCC_HSE_IsReady>
1004bc74:	1e03      	subs	r3, r0, #0
1004bc76:	d107      	bne.n	1004bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004bc78:	2300      	movs	r3, #0
1004bc7a:	e051      	b.n	1004bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004bc7c:	f7ff ff76 	bl	1004bb6c <LL_RCC_RC64MPLL_IsReady>
1004bc80:	1e03      	subs	r3, r0, #0
1004bc82:	d101      	bne.n	1004bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004bc84:	2300      	movs	r3, #0
1004bc86:	e04b      	b.n	1004bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1004bc88:	f7ff ff64 	bl	1004bb54 <LL_RCC_GetSPI3I2SClockSource>
1004bc8c:	0003      	movs	r3, r0
1004bc8e:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004bc90:	68bb      	ldr	r3, [r7, #8]
1004bc92:	2b00      	cmp	r3, #0
1004bc94:	d101      	bne.n	1004bc9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004bc96:	4b26      	ldr	r3, [pc, #152]	@ (1004bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004bc98:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004bc9a:	68ba      	ldr	r2, [r7, #8]
1004bc9c:	2380      	movs	r3, #128	@ 0x80
1004bc9e:	03db      	lsls	r3, r3, #15
1004bca0:	429a      	cmp	r2, r3
1004bca2:	d101      	bne.n	1004bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004bca4:	4b21      	ldr	r3, [pc, #132]	@ (1004bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004bca6:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1004bca8:	68ba      	ldr	r2, [r7, #8]
1004bcaa:	2380      	movs	r3, #128	@ 0x80
1004bcac:	041b      	lsls	r3, r3, #16
1004bcae:	429a      	cmp	r2, r3
1004bcb0:	d134      	bne.n	1004bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004bcb2:	4b22      	ldr	r3, [pc, #136]	@ (1004bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004bcb4:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004bcb6:	e031      	b.n	1004bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
1004bcb8:	f7ff ff2a 	bl	1004bb10 <LL_RCC_GetLPUARTClockSource>
1004bcbc:	0002      	movs	r2, r0
1004bcbe:	2380      	movs	r3, #128	@ 0x80
1004bcc0:	019b      	lsls	r3, r3, #6
1004bcc2:	429a      	cmp	r2, r3
1004bcc4:	d103      	bne.n	1004bcce <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004bcc6:	2380      	movs	r3, #128	@ 0x80
1004bcc8:	021b      	lsls	r3, r3, #8
1004bcca:	60fb      	str	r3, [r7, #12]
          break;
1004bccc:	e002      	b.n	1004bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004bcce:	4b18      	ldr	r3, [pc, #96]	@ (1004bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004bcd0:	60fb      	str	r3, [r7, #12]
          break;
1004bcd2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004bcd4:	e023      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004bcd6:	f7ff feb7 	bl	1004ba48 <LL_RCC_LSCO_GetSource>
1004bcda:	0003      	movs	r3, r0
1004bcdc:	22c0      	movs	r2, #192	@ 0xc0
1004bcde:	0252      	lsls	r2, r2, #9
1004bce0:	4293      	cmp	r3, r2
1004bce2:	d014      	beq.n	1004bd0e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004bce4:	22c0      	movs	r2, #192	@ 0xc0
1004bce6:	0252      	lsls	r2, r2, #9
1004bce8:	4293      	cmp	r3, r2
1004bcea:	d813      	bhi.n	1004bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004bcec:	2280      	movs	r2, #128	@ 0x80
1004bcee:	0212      	lsls	r2, r2, #8
1004bcf0:	4293      	cmp	r3, r2
1004bcf2:	d004      	beq.n	1004bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004bcf4:	2280      	movs	r2, #128	@ 0x80
1004bcf6:	0252      	lsls	r2, r2, #9
1004bcf8:	4293      	cmp	r3, r2
1004bcfa:	d004      	beq.n	1004bd06 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004bcfc:	e00a      	b.n	1004bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004bcfe:	2380      	movs	r3, #128	@ 0x80
1004bd00:	021b      	lsls	r3, r3, #8
1004bd02:	60fb      	str	r3, [r7, #12]
          break;
1004bd04:	e007      	b.n	1004bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004bd06:	23fa      	movs	r3, #250	@ 0xfa
1004bd08:	01db      	lsls	r3, r3, #7
1004bd0a:	60fb      	str	r3, [r7, #12]
          break;
1004bd0c:	e003      	b.n	1004bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004bd0e:	4b0c      	ldr	r3, [pc, #48]	@ (1004bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004bd10:	60fb      	str	r3, [r7, #12]
          break;
1004bd12:	e000      	b.n	1004bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
1004bd14:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004bd16:	e002      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004bd18:	46c0      	nop			@ (mov r8, r8)
1004bd1a:	e000      	b.n	1004bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004bd1c:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004bd1e:	68fb      	ldr	r3, [r7, #12]
}
1004bd20:	0018      	movs	r0, r3
1004bd22:	46bd      	mov	sp, r7
1004bd24:	b004      	add	sp, #16
1004bd26:	bd80      	pop	{r7, pc}
1004bd28:	10067d4c 	.word	0x10067d4c
1004bd2c:	01e84800 	.word	0x01e84800
1004bd30:	00f42400 	.word	0x00f42400
1004bd34:	007a1200 	.word	0x007a1200
1004bd38:	003d0900 	.word	0x003d0900
1004bd3c:	03d09000 	.word	0x03d09000
1004bd40:	00007a12 	.word	0x00007a12

1004bd44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
1004bd44:	b580      	push	{r7, lr}
1004bd46:	b082      	sub	sp, #8
1004bd48:	af00      	add	r7, sp, #0
1004bd4a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
1004bd4c:	687b      	ldr	r3, [r7, #4]
1004bd4e:	2b00      	cmp	r3, #0
1004bd50:	d101      	bne.n	1004bd56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
1004bd52:	2301      	movs	r3, #1
1004bd54:	e02d      	b.n	1004bdb2 <HAL_RNG_Init+0x6e>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined (RNG_CR_TST_CLK)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* RNG_CR_TST_CLK */

  if (hrng->State == HAL_RNG_STATE_RESET)
1004bd56:	687b      	ldr	r3, [r7, #4]
1004bd58:	7a5b      	ldrb	r3, [r3, #9]
1004bd5a:	b2db      	uxtb	r3, r3
1004bd5c:	2b00      	cmp	r3, #0
1004bd5e:	d106      	bne.n	1004bd6e <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
1004bd60:	687b      	ldr	r3, [r7, #4]
1004bd62:	2200      	movs	r2, #0
1004bd64:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
1004bd66:	687b      	ldr	r3, [r7, #4]
1004bd68:	0018      	movs	r0, r3
1004bd6a:	f7f9 febf 	bl	10045aec <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
1004bd6e:	687b      	ldr	r3, [r7, #4]
1004bd70:	2202      	movs	r2, #2
1004bd72:	725a      	strb	r2, [r3, #9]

  /* Reset the CR */
  hrng->Instance->CR = 0U;
1004bd74:	687b      	ldr	r3, [r7, #4]
1004bd76:	681b      	ldr	r3, [r3, #0]
1004bd78:	2200      	movs	r2, #0
1004bd7a:	601a      	str	r2, [r3, #0]

#if defined (RNG_CR_TST_CLK)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_TST_CLK, hrng->Init.ClockErrorDetection);
1004bd7c:	687b      	ldr	r3, [r7, #4]
1004bd7e:	681b      	ldr	r3, [r3, #0]
1004bd80:	681b      	ldr	r3, [r3, #0]
1004bd82:	2208      	movs	r2, #8
1004bd84:	4393      	bics	r3, r2
1004bd86:	0019      	movs	r1, r3
1004bd88:	687b      	ldr	r3, [r7, #4]
1004bd8a:	685a      	ldr	r2, [r3, #4]
1004bd8c:	687b      	ldr	r3, [r7, #4]
1004bd8e:	681b      	ldr	r3, [r3, #0]
1004bd90:	430a      	orrs	r2, r1
1004bd92:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_TST_CLK */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
1004bd94:	687b      	ldr	r3, [r7, #4]
1004bd96:	681b      	ldr	r3, [r3, #0]
1004bd98:	681a      	ldr	r2, [r3, #0]
1004bd9a:	687b      	ldr	r3, [r7, #4]
1004bd9c:	681b      	ldr	r3, [r3, #0]
1004bd9e:	2104      	movs	r1, #4
1004bda0:	438a      	bics	r2, r1
1004bda2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
1004bda4:	687b      	ldr	r3, [r7, #4]
1004bda6:	2201      	movs	r2, #1
1004bda8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
1004bdaa:	687b      	ldr	r3, [r7, #4]
1004bdac:	2200      	movs	r2, #0
1004bdae:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
1004bdb0:	2300      	movs	r3, #0
}
1004bdb2:	0018      	movs	r0, r3
1004bdb4:	46bd      	mov	sp, r7
1004bdb6:	b002      	add	sp, #8
1004bdb8:	bd80      	pop	{r7, pc}

1004bdba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
1004bdba:	b580      	push	{r7, lr}
1004bdbc:	b082      	sub	sp, #8
1004bdbe:	af00      	add	r7, sp, #0
1004bdc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1004bdc2:	687b      	ldr	r3, [r7, #4]
1004bdc4:	2b00      	cmp	r3, #0
1004bdc6:	d101      	bne.n	1004bdcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1004bdc8:	2301      	movs	r3, #1
1004bdca:	e036      	b.n	1004be3a <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
1004bdcc:	687b      	ldr	r3, [r7, #4]
1004bdce:	2235      	movs	r2, #53	@ 0x35
1004bdd0:	5c9b      	ldrb	r3, [r3, r2]
1004bdd2:	b2db      	uxtb	r3, r3
1004bdd4:	2b00      	cmp	r3, #0
1004bdd6:	d107      	bne.n	1004bde8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1004bdd8:	687b      	ldr	r3, [r7, #4]
1004bdda:	2234      	movs	r2, #52	@ 0x34
1004bddc:	2100      	movs	r1, #0
1004bdde:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
1004bde0:	687b      	ldr	r3, [r7, #4]
1004bde2:	0018      	movs	r0, r3
1004bde4:	f7f9 fe96 	bl	10045b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004bde8:	687b      	ldr	r3, [r7, #4]
1004bdea:	2235      	movs	r2, #53	@ 0x35
1004bdec:	2102      	movs	r1, #2
1004bdee:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
1004bdf0:	687b      	ldr	r3, [r7, #4]
1004bdf2:	681a      	ldr	r2, [r3, #0]
1004bdf4:	687b      	ldr	r3, [r7, #4]
1004bdf6:	3304      	adds	r3, #4
1004bdf8:	0019      	movs	r1, r3
1004bdfa:	0010      	movs	r0, r2
1004bdfc:	f000 fa3a 	bl	1004c274 <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
1004be00:	687b      	ldr	r3, [r7, #4]
1004be02:	223b      	movs	r2, #59	@ 0x3b
1004be04:	2101      	movs	r1, #1
1004be06:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004be08:	687b      	ldr	r3, [r7, #4]
1004be0a:	2236      	movs	r2, #54	@ 0x36
1004be0c:	2101      	movs	r1, #1
1004be0e:	5499      	strb	r1, [r3, r2]
1004be10:	687b      	ldr	r3, [r7, #4]
1004be12:	2237      	movs	r2, #55	@ 0x37
1004be14:	2101      	movs	r1, #1
1004be16:	5499      	strb	r1, [r3, r2]
1004be18:	687b      	ldr	r3, [r7, #4]
1004be1a:	2238      	movs	r2, #56	@ 0x38
1004be1c:	2101      	movs	r1, #1
1004be1e:	5499      	strb	r1, [r3, r2]
1004be20:	687b      	ldr	r3, [r7, #4]
1004be22:	2239      	movs	r2, #57	@ 0x39
1004be24:	2101      	movs	r1, #1
1004be26:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004be28:	687b      	ldr	r3, [r7, #4]
1004be2a:	223a      	movs	r2, #58	@ 0x3a
1004be2c:	2101      	movs	r1, #1
1004be2e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1004be30:	687b      	ldr	r3, [r7, #4]
1004be32:	2235      	movs	r2, #53	@ 0x35
1004be34:	2101      	movs	r1, #1
1004be36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004be38:	2300      	movs	r3, #0
}
1004be3a:	0018      	movs	r0, r3
1004be3c:	46bd      	mov	sp, r7
1004be3e:	b002      	add	sp, #8
1004be40:	bd80      	pop	{r7, pc}
	...

1004be44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
1004be44:	b580      	push	{r7, lr}
1004be46:	b084      	sub	sp, #16
1004be48:	af00      	add	r7, sp, #0
1004be4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
1004be4c:	687b      	ldr	r3, [r7, #4]
1004be4e:	2235      	movs	r2, #53	@ 0x35
1004be50:	5c9b      	ldrb	r3, [r3, r2]
1004be52:	b2db      	uxtb	r3, r3
1004be54:	2b01      	cmp	r3, #1
1004be56:	d001      	beq.n	1004be5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
1004be58:	2301      	movs	r3, #1
1004be5a:	e030      	b.n	1004bebe <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004be5c:	687b      	ldr	r3, [r7, #4]
1004be5e:	2235      	movs	r2, #53	@ 0x35
1004be60:	2102      	movs	r1, #2
1004be62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
1004be64:	687b      	ldr	r3, [r7, #4]
1004be66:	681b      	ldr	r3, [r3, #0]
1004be68:	68da      	ldr	r2, [r3, #12]
1004be6a:	687b      	ldr	r3, [r7, #4]
1004be6c:	681b      	ldr	r3, [r3, #0]
1004be6e:	2101      	movs	r1, #1
1004be70:	430a      	orrs	r2, r1
1004be72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
1004be74:	687b      	ldr	r3, [r7, #4]
1004be76:	681b      	ldr	r3, [r3, #0]
1004be78:	4a13      	ldr	r2, [pc, #76]	@ (1004bec8 <HAL_TIM_Base_Start_IT+0x84>)
1004be7a:	4293      	cmp	r3, r2
1004be7c:	d116      	bne.n	1004beac <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1004be7e:	687b      	ldr	r3, [r7, #4]
1004be80:	681b      	ldr	r3, [r3, #0]
1004be82:	689b      	ldr	r3, [r3, #8]
1004be84:	4a11      	ldr	r2, [pc, #68]	@ (1004becc <HAL_TIM_Base_Start_IT+0x88>)
1004be86:	4013      	ands	r3, r2
1004be88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1004be8a:	68fb      	ldr	r3, [r7, #12]
1004be8c:	2b06      	cmp	r3, #6
1004be8e:	d015      	beq.n	1004bebc <HAL_TIM_Base_Start_IT+0x78>
1004be90:	68fa      	ldr	r2, [r7, #12]
1004be92:	2380      	movs	r3, #128	@ 0x80
1004be94:	025b      	lsls	r3, r3, #9
1004be96:	429a      	cmp	r2, r3
1004be98:	d010      	beq.n	1004bebc <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004be9a:	687b      	ldr	r3, [r7, #4]
1004be9c:	681b      	ldr	r3, [r3, #0]
1004be9e:	681a      	ldr	r2, [r3, #0]
1004bea0:	687b      	ldr	r3, [r7, #4]
1004bea2:	681b      	ldr	r3, [r3, #0]
1004bea4:	2101      	movs	r1, #1
1004bea6:	430a      	orrs	r2, r1
1004bea8:	601a      	str	r2, [r3, #0]
1004beaa:	e007      	b.n	1004bebc <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004beac:	687b      	ldr	r3, [r7, #4]
1004beae:	681b      	ldr	r3, [r3, #0]
1004beb0:	681a      	ldr	r2, [r3, #0]
1004beb2:	687b      	ldr	r3, [r7, #4]
1004beb4:	681b      	ldr	r3, [r3, #0]
1004beb6:	2101      	movs	r1, #1
1004beb8:	430a      	orrs	r2, r1
1004beba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004bebc:	2300      	movs	r3, #0
}
1004bebe:	0018      	movs	r0, r3
1004bec0:	46bd      	mov	sp, r7
1004bec2:	b004      	add	sp, #16
1004bec4:	bd80      	pop	{r7, pc}
1004bec6:	46c0      	nop			@ (mov r8, r8)
1004bec8:	40002000 	.word	0x40002000
1004becc:	00010007 	.word	0x00010007

1004bed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
1004bed0:	b580      	push	{r7, lr}
1004bed2:	b084      	sub	sp, #16
1004bed4:	af00      	add	r7, sp, #0
1004bed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004bed8:	687b      	ldr	r3, [r7, #4]
1004beda:	681b      	ldr	r3, [r3, #0]
1004bedc:	68db      	ldr	r3, [r3, #12]
1004bede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
1004bee0:	687b      	ldr	r3, [r7, #4]
1004bee2:	681b      	ldr	r3, [r3, #0]
1004bee4:	691b      	ldr	r3, [r3, #16]
1004bee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004bee8:	68bb      	ldr	r3, [r7, #8]
1004beea:	2202      	movs	r2, #2
1004beec:	4013      	ands	r3, r2
1004beee:	d021      	beq.n	1004bf34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
1004bef0:	68fb      	ldr	r3, [r7, #12]
1004bef2:	2202      	movs	r2, #2
1004bef4:	4013      	ands	r3, r2
1004bef6:	d01d      	beq.n	1004bf34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004bef8:	687b      	ldr	r3, [r7, #4]
1004befa:	681b      	ldr	r3, [r3, #0]
1004befc:	2203      	movs	r2, #3
1004befe:	4252      	negs	r2, r2
1004bf00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
1004bf02:	687b      	ldr	r3, [r7, #4]
1004bf04:	2201      	movs	r2, #1
1004bf06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004bf08:	687b      	ldr	r3, [r7, #4]
1004bf0a:	681b      	ldr	r3, [r3, #0]
1004bf0c:	699b      	ldr	r3, [r3, #24]
1004bf0e:	2203      	movs	r2, #3
1004bf10:	4013      	ands	r3, r2
1004bf12:	d004      	beq.n	1004bf1e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
1004bf14:	687b      	ldr	r3, [r7, #4]
1004bf16:	0018      	movs	r0, r3
1004bf18:	f000 f994 	bl	1004c244 <HAL_TIM_IC_CaptureCallback>
1004bf1c:	e007      	b.n	1004bf2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004bf1e:	687b      	ldr	r3, [r7, #4]
1004bf20:	0018      	movs	r0, r3
1004bf22:	f000 f987 	bl	1004c234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004bf26:	687b      	ldr	r3, [r7, #4]
1004bf28:	0018      	movs	r0, r3
1004bf2a:	f000 f993 	bl	1004c254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004bf2e:	687b      	ldr	r3, [r7, #4]
1004bf30:	2200      	movs	r2, #0
1004bf32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
1004bf34:	68bb      	ldr	r3, [r7, #8]
1004bf36:	2204      	movs	r2, #4
1004bf38:	4013      	ands	r3, r2
1004bf3a:	d022      	beq.n	1004bf82 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004bf3c:	68fb      	ldr	r3, [r7, #12]
1004bf3e:	2204      	movs	r2, #4
1004bf40:	4013      	ands	r3, r2
1004bf42:	d01e      	beq.n	1004bf82 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1004bf44:	687b      	ldr	r3, [r7, #4]
1004bf46:	681b      	ldr	r3, [r3, #0]
1004bf48:	2205      	movs	r2, #5
1004bf4a:	4252      	negs	r2, r2
1004bf4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004bf4e:	687b      	ldr	r3, [r7, #4]
1004bf50:	2202      	movs	r2, #2
1004bf52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1004bf54:	687b      	ldr	r3, [r7, #4]
1004bf56:	681b      	ldr	r3, [r3, #0]
1004bf58:	699a      	ldr	r2, [r3, #24]
1004bf5a:	23c0      	movs	r3, #192	@ 0xc0
1004bf5c:	009b      	lsls	r3, r3, #2
1004bf5e:	4013      	ands	r3, r2
1004bf60:	d004      	beq.n	1004bf6c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004bf62:	687b      	ldr	r3, [r7, #4]
1004bf64:	0018      	movs	r0, r3
1004bf66:	f000 f96d 	bl	1004c244 <HAL_TIM_IC_CaptureCallback>
1004bf6a:	e007      	b.n	1004bf7c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004bf6c:	687b      	ldr	r3, [r7, #4]
1004bf6e:	0018      	movs	r0, r3
1004bf70:	f000 f960 	bl	1004c234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004bf74:	687b      	ldr	r3, [r7, #4]
1004bf76:	0018      	movs	r0, r3
1004bf78:	f000 f96c 	bl	1004c254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004bf7c:	687b      	ldr	r3, [r7, #4]
1004bf7e:	2200      	movs	r2, #0
1004bf80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
1004bf82:	68bb      	ldr	r3, [r7, #8]
1004bf84:	2208      	movs	r2, #8
1004bf86:	4013      	ands	r3, r2
1004bf88:	d021      	beq.n	1004bfce <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004bf8a:	68fb      	ldr	r3, [r7, #12]
1004bf8c:	2208      	movs	r2, #8
1004bf8e:	4013      	ands	r3, r2
1004bf90:	d01d      	beq.n	1004bfce <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
1004bf92:	687b      	ldr	r3, [r7, #4]
1004bf94:	681b      	ldr	r3, [r3, #0]
1004bf96:	2209      	movs	r2, #9
1004bf98:	4252      	negs	r2, r2
1004bf9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004bf9c:	687b      	ldr	r3, [r7, #4]
1004bf9e:	2204      	movs	r2, #4
1004bfa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
1004bfa2:	687b      	ldr	r3, [r7, #4]
1004bfa4:	681b      	ldr	r3, [r3, #0]
1004bfa6:	69db      	ldr	r3, [r3, #28]
1004bfa8:	2203      	movs	r2, #3
1004bfaa:	4013      	ands	r3, r2
1004bfac:	d004      	beq.n	1004bfb8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004bfae:	687b      	ldr	r3, [r7, #4]
1004bfb0:	0018      	movs	r0, r3
1004bfb2:	f000 f947 	bl	1004c244 <HAL_TIM_IC_CaptureCallback>
1004bfb6:	e007      	b.n	1004bfc8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004bfb8:	687b      	ldr	r3, [r7, #4]
1004bfba:	0018      	movs	r0, r3
1004bfbc:	f000 f93a 	bl	1004c234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004bfc0:	687b      	ldr	r3, [r7, #4]
1004bfc2:	0018      	movs	r0, r3
1004bfc4:	f000 f946 	bl	1004c254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004bfc8:	687b      	ldr	r3, [r7, #4]
1004bfca:	2200      	movs	r2, #0
1004bfcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004bfce:	68bb      	ldr	r3, [r7, #8]
1004bfd0:	2210      	movs	r2, #16
1004bfd2:	4013      	ands	r3, r2
1004bfd4:	d022      	beq.n	1004c01c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004bfd6:	68fb      	ldr	r3, [r7, #12]
1004bfd8:	2210      	movs	r2, #16
1004bfda:	4013      	ands	r3, r2
1004bfdc:	d01e      	beq.n	1004c01c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004bfde:	687b      	ldr	r3, [r7, #4]
1004bfe0:	681b      	ldr	r3, [r3, #0]
1004bfe2:	2211      	movs	r2, #17
1004bfe4:	4252      	negs	r2, r2
1004bfe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004bfe8:	687b      	ldr	r3, [r7, #4]
1004bfea:	2208      	movs	r2, #8
1004bfec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004bfee:	687b      	ldr	r3, [r7, #4]
1004bff0:	681b      	ldr	r3, [r3, #0]
1004bff2:	69da      	ldr	r2, [r3, #28]
1004bff4:	23c0      	movs	r3, #192	@ 0xc0
1004bff6:	009b      	lsls	r3, r3, #2
1004bff8:	4013      	ands	r3, r2
1004bffa:	d004      	beq.n	1004c006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004bffc:	687b      	ldr	r3, [r7, #4]
1004bffe:	0018      	movs	r0, r3
1004c000:	f000 f920 	bl	1004c244 <HAL_TIM_IC_CaptureCallback>
1004c004:	e007      	b.n	1004c016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004c006:	687b      	ldr	r3, [r7, #4]
1004c008:	0018      	movs	r0, r3
1004c00a:	f000 f913 	bl	1004c234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004c00e:	687b      	ldr	r3, [r7, #4]
1004c010:	0018      	movs	r0, r3
1004c012:	f000 f91f 	bl	1004c254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004c016:	687b      	ldr	r3, [r7, #4]
1004c018:	2200      	movs	r2, #0
1004c01a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004c01c:	68bb      	ldr	r3, [r7, #8]
1004c01e:	2201      	movs	r2, #1
1004c020:	4013      	ands	r3, r2
1004c022:	d00c      	beq.n	1004c03e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
1004c024:	68fb      	ldr	r3, [r7, #12]
1004c026:	2201      	movs	r2, #1
1004c028:	4013      	ands	r3, r2
1004c02a:	d008      	beq.n	1004c03e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004c02c:	687b      	ldr	r3, [r7, #4]
1004c02e:	681b      	ldr	r3, [r3, #0]
1004c030:	2202      	movs	r2, #2
1004c032:	4252      	negs	r2, r2
1004c034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
1004c036:	687b      	ldr	r3, [r7, #4]
1004c038:	0018      	movs	r0, r3
1004c03a:	f000 f8f3 	bl	1004c224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004c03e:	68bb      	ldr	r3, [r7, #8]
1004c040:	2280      	movs	r2, #128	@ 0x80
1004c042:	4013      	ands	r3, r2
1004c044:	d00c      	beq.n	1004c060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
1004c046:	68fb      	ldr	r3, [r7, #12]
1004c048:	2280      	movs	r2, #128	@ 0x80
1004c04a:	4013      	ands	r3, r2
1004c04c:	d008      	beq.n	1004c060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004c04e:	687b      	ldr	r3, [r7, #4]
1004c050:	681b      	ldr	r3, [r3, #0]
1004c052:	2281      	movs	r2, #129	@ 0x81
1004c054:	4252      	negs	r2, r2
1004c056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
1004c058:	687b      	ldr	r3, [r7, #4]
1004c05a:	0018      	movs	r0, r3
1004c05c:	f000 fa08 	bl	1004c470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
1004c060:	68bb      	ldr	r3, [r7, #8]
1004c062:	2240      	movs	r2, #64	@ 0x40
1004c064:	4013      	ands	r3, r2
1004c066:	d00c      	beq.n	1004c082 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
1004c068:	68fb      	ldr	r3, [r7, #12]
1004c06a:	2240      	movs	r2, #64	@ 0x40
1004c06c:	4013      	ands	r3, r2
1004c06e:	d008      	beq.n	1004c082 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
1004c070:	687b      	ldr	r3, [r7, #4]
1004c072:	681b      	ldr	r3, [r3, #0]
1004c074:	2241      	movs	r2, #65	@ 0x41
1004c076:	4252      	negs	r2, r2
1004c078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004c07a:	687b      	ldr	r3, [r7, #4]
1004c07c:	0018      	movs	r0, r3
1004c07e:	f000 f8f1 	bl	1004c264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
1004c082:	68bb      	ldr	r3, [r7, #8]
1004c084:	2220      	movs	r2, #32
1004c086:	4013      	ands	r3, r2
1004c088:	d00c      	beq.n	1004c0a4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004c08a:	68fb      	ldr	r3, [r7, #12]
1004c08c:	2220      	movs	r2, #32
1004c08e:	4013      	ands	r3, r2
1004c090:	d008      	beq.n	1004c0a4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
1004c092:	687b      	ldr	r3, [r7, #4]
1004c094:	681b      	ldr	r3, [r3, #0]
1004c096:	2221      	movs	r2, #33	@ 0x21
1004c098:	4252      	negs	r2, r2
1004c09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004c09c:	687b      	ldr	r3, [r7, #4]
1004c09e:	0018      	movs	r0, r3
1004c0a0:	f000 f9de 	bl	1004c460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
1004c0a4:	46c0      	nop			@ (mov r8, r8)
1004c0a6:	46bd      	mov	sp, r7
1004c0a8:	b004      	add	sp, #16
1004c0aa:	bd80      	pop	{r7, pc}

1004c0ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004c0ac:	b580      	push	{r7, lr}
1004c0ae:	b084      	sub	sp, #16
1004c0b0:	af00      	add	r7, sp, #0
1004c0b2:	6078      	str	r0, [r7, #4]
1004c0b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004c0b6:	230f      	movs	r3, #15
1004c0b8:	18fb      	adds	r3, r7, r3
1004c0ba:	2200      	movs	r2, #0
1004c0bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004c0be:	687b      	ldr	r3, [r7, #4]
1004c0c0:	2234      	movs	r2, #52	@ 0x34
1004c0c2:	5c9b      	ldrb	r3, [r3, r2]
1004c0c4:	2b01      	cmp	r3, #1
1004c0c6:	d101      	bne.n	1004c0cc <HAL_TIM_ConfigClockSource+0x20>
1004c0c8:	2302      	movs	r3, #2
1004c0ca:	e0a2      	b.n	1004c212 <HAL_TIM_ConfigClockSource+0x166>
1004c0cc:	687b      	ldr	r3, [r7, #4]
1004c0ce:	2234      	movs	r2, #52	@ 0x34
1004c0d0:	2101      	movs	r1, #1
1004c0d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
1004c0d4:	687b      	ldr	r3, [r7, #4]
1004c0d6:	2235      	movs	r2, #53	@ 0x35
1004c0d8:	2102      	movs	r1, #2
1004c0da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004c0dc:	687b      	ldr	r3, [r7, #4]
1004c0de:	681b      	ldr	r3, [r3, #0]
1004c0e0:	689b      	ldr	r3, [r3, #8]
1004c0e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
1004c0e4:	68bb      	ldr	r3, [r7, #8]
1004c0e6:	4a4d      	ldr	r2, [pc, #308]	@ (1004c21c <HAL_TIM_ConfigClockSource+0x170>)
1004c0e8:	4013      	ands	r3, r2
1004c0ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004c0ec:	68bb      	ldr	r3, [r7, #8]
1004c0ee:	4a4c      	ldr	r2, [pc, #304]	@ (1004c220 <HAL_TIM_ConfigClockSource+0x174>)
1004c0f0:	4013      	ands	r3, r2
1004c0f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
1004c0f4:	687b      	ldr	r3, [r7, #4]
1004c0f6:	681b      	ldr	r3, [r3, #0]
1004c0f8:	68ba      	ldr	r2, [r7, #8]
1004c0fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004c0fc:	683b      	ldr	r3, [r7, #0]
1004c0fe:	681b      	ldr	r3, [r3, #0]
1004c100:	2280      	movs	r2, #128	@ 0x80
1004c102:	0192      	lsls	r2, r2, #6
1004c104:	4293      	cmp	r3, r2
1004c106:	d02f      	beq.n	1004c168 <HAL_TIM_ConfigClockSource+0xbc>
1004c108:	2280      	movs	r2, #128	@ 0x80
1004c10a:	0192      	lsls	r2, r2, #6
1004c10c:	4293      	cmp	r3, r2
1004c10e:	d900      	bls.n	1004c112 <HAL_TIM_ConfigClockSource+0x66>
1004c110:	e06e      	b.n	1004c1f0 <HAL_TIM_ConfigClockSource+0x144>
1004c112:	2280      	movs	r2, #128	@ 0x80
1004c114:	0152      	lsls	r2, r2, #5
1004c116:	4293      	cmp	r3, r2
1004c118:	d100      	bne.n	1004c11c <HAL_TIM_ConfigClockSource+0x70>
1004c11a:	e06e      	b.n	1004c1fa <HAL_TIM_ConfigClockSource+0x14e>
1004c11c:	2280      	movs	r2, #128	@ 0x80
1004c11e:	0152      	lsls	r2, r2, #5
1004c120:	4293      	cmp	r3, r2
1004c122:	d865      	bhi.n	1004c1f0 <HAL_TIM_ConfigClockSource+0x144>
1004c124:	2b70      	cmp	r3, #112	@ 0x70
1004c126:	d008      	beq.n	1004c13a <HAL_TIM_ConfigClockSource+0x8e>
1004c128:	d862      	bhi.n	1004c1f0 <HAL_TIM_ConfigClockSource+0x144>
1004c12a:	2b60      	cmp	r3, #96	@ 0x60
1004c12c:	d040      	beq.n	1004c1b0 <HAL_TIM_ConfigClockSource+0x104>
1004c12e:	d85f      	bhi.n	1004c1f0 <HAL_TIM_ConfigClockSource+0x144>
1004c130:	2b40      	cmp	r3, #64	@ 0x40
1004c132:	d04d      	beq.n	1004c1d0 <HAL_TIM_ConfigClockSource+0x124>
1004c134:	2b50      	cmp	r3, #80	@ 0x50
1004c136:	d02b      	beq.n	1004c190 <HAL_TIM_ConfigClockSource+0xe4>
1004c138:	e05a      	b.n	1004c1f0 <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004c13a:	687b      	ldr	r3, [r7, #4]
1004c13c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004c13e:	683b      	ldr	r3, [r7, #0]
1004c140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004c142:	683b      	ldr	r3, [r7, #0]
1004c144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004c146:	683b      	ldr	r3, [r7, #0]
1004c148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004c14a:	f000 f969 	bl	1004c420 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
1004c14e:	687b      	ldr	r3, [r7, #4]
1004c150:	681b      	ldr	r3, [r3, #0]
1004c152:	689b      	ldr	r3, [r3, #8]
1004c154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
1004c156:	68bb      	ldr	r3, [r7, #8]
1004c158:	2277      	movs	r2, #119	@ 0x77
1004c15a:	4313      	orrs	r3, r2
1004c15c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
1004c15e:	687b      	ldr	r3, [r7, #4]
1004c160:	681b      	ldr	r3, [r3, #0]
1004c162:	68ba      	ldr	r2, [r7, #8]
1004c164:	609a      	str	r2, [r3, #8]
      break;
1004c166:	e049      	b.n	1004c1fc <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004c168:	687b      	ldr	r3, [r7, #4]
1004c16a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004c16c:	683b      	ldr	r3, [r7, #0]
1004c16e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004c170:	683b      	ldr	r3, [r7, #0]
1004c172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004c174:	683b      	ldr	r3, [r7, #0]
1004c176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004c178:	f000 f952 	bl	1004c420 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
1004c17c:	687b      	ldr	r3, [r7, #4]
1004c17e:	681b      	ldr	r3, [r3, #0]
1004c180:	689a      	ldr	r2, [r3, #8]
1004c182:	687b      	ldr	r3, [r7, #4]
1004c184:	681b      	ldr	r3, [r3, #0]
1004c186:	2180      	movs	r1, #128	@ 0x80
1004c188:	01c9      	lsls	r1, r1, #7
1004c18a:	430a      	orrs	r2, r1
1004c18c:	609a      	str	r2, [r3, #8]
      break;
1004c18e:	e035      	b.n	1004c1fc <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004c190:	687b      	ldr	r3, [r7, #4]
1004c192:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004c194:	683b      	ldr	r3, [r7, #0]
1004c196:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004c198:	683b      	ldr	r3, [r7, #0]
1004c19a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004c19c:	001a      	movs	r2, r3
1004c19e:	f000 f8c5 	bl	1004c32c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
1004c1a2:	687b      	ldr	r3, [r7, #4]
1004c1a4:	681b      	ldr	r3, [r3, #0]
1004c1a6:	2150      	movs	r1, #80	@ 0x50
1004c1a8:	0018      	movs	r0, r3
1004c1aa:	f000 f91f 	bl	1004c3ec <TIM_ITRx_SetConfig>
      break;
1004c1ae:	e025      	b.n	1004c1fc <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
1004c1b0:	687b      	ldr	r3, [r7, #4]
1004c1b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004c1b4:	683b      	ldr	r3, [r7, #0]
1004c1b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004c1b8:	683b      	ldr	r3, [r7, #0]
1004c1ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004c1bc:	001a      	movs	r2, r3
1004c1be:	f000 f8e3 	bl	1004c388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
1004c1c2:	687b      	ldr	r3, [r7, #4]
1004c1c4:	681b      	ldr	r3, [r3, #0]
1004c1c6:	2160      	movs	r1, #96	@ 0x60
1004c1c8:	0018      	movs	r0, r3
1004c1ca:	f000 f90f 	bl	1004c3ec <TIM_ITRx_SetConfig>
      break;
1004c1ce:	e015      	b.n	1004c1fc <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004c1d0:	687b      	ldr	r3, [r7, #4]
1004c1d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004c1d4:	683b      	ldr	r3, [r7, #0]
1004c1d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004c1d8:	683b      	ldr	r3, [r7, #0]
1004c1da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004c1dc:	001a      	movs	r2, r3
1004c1de:	f000 f8a5 	bl	1004c32c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
1004c1e2:	687b      	ldr	r3, [r7, #4]
1004c1e4:	681b      	ldr	r3, [r3, #0]
1004c1e6:	2140      	movs	r1, #64	@ 0x40
1004c1e8:	0018      	movs	r0, r3
1004c1ea:	f000 f8ff 	bl	1004c3ec <TIM_ITRx_SetConfig>
      break;
1004c1ee:	e005      	b.n	1004c1fc <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
1004c1f0:	230f      	movs	r3, #15
1004c1f2:	18fb      	adds	r3, r7, r3
1004c1f4:	2201      	movs	r2, #1
1004c1f6:	701a      	strb	r2, [r3, #0]
      break;
1004c1f8:	e000      	b.n	1004c1fc <HAL_TIM_ConfigClockSource+0x150>
      break;
1004c1fa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004c1fc:	687b      	ldr	r3, [r7, #4]
1004c1fe:	2235      	movs	r2, #53	@ 0x35
1004c200:	2101      	movs	r1, #1
1004c202:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
1004c204:	687b      	ldr	r3, [r7, #4]
1004c206:	2234      	movs	r2, #52	@ 0x34
1004c208:	2100      	movs	r1, #0
1004c20a:	5499      	strb	r1, [r3, r2]

  return status;
1004c20c:	230f      	movs	r3, #15
1004c20e:	18fb      	adds	r3, r7, r3
1004c210:	781b      	ldrb	r3, [r3, #0]
}
1004c212:	0018      	movs	r0, r3
1004c214:	46bd      	mov	sp, r7
1004c216:	b004      	add	sp, #16
1004c218:	bd80      	pop	{r7, pc}
1004c21a:	46c0      	nop			@ (mov r8, r8)
1004c21c:	fffeff88 	.word	0xfffeff88
1004c220:	ffff00ff 	.word	0xffff00ff

1004c224 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004c224:	b580      	push	{r7, lr}
1004c226:	b082      	sub	sp, #8
1004c228:	af00      	add	r7, sp, #0
1004c22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004c22c:	46c0      	nop			@ (mov r8, r8)
1004c22e:	46bd      	mov	sp, r7
1004c230:	b002      	add	sp, #8
1004c232:	bd80      	pop	{r7, pc}

1004c234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004c234:	b580      	push	{r7, lr}
1004c236:	b082      	sub	sp, #8
1004c238:	af00      	add	r7, sp, #0
1004c23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1004c23c:	46c0      	nop			@ (mov r8, r8)
1004c23e:	46bd      	mov	sp, r7
1004c240:	b002      	add	sp, #8
1004c242:	bd80      	pop	{r7, pc}

1004c244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004c244:	b580      	push	{r7, lr}
1004c246:	b082      	sub	sp, #8
1004c248:	af00      	add	r7, sp, #0
1004c24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
1004c24c:	46c0      	nop			@ (mov r8, r8)
1004c24e:	46bd      	mov	sp, r7
1004c250:	b002      	add	sp, #8
1004c252:	bd80      	pop	{r7, pc}

1004c254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
1004c254:	b580      	push	{r7, lr}
1004c256:	b082      	sub	sp, #8
1004c258:	af00      	add	r7, sp, #0
1004c25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
1004c25c:	46c0      	nop			@ (mov r8, r8)
1004c25e:	46bd      	mov	sp, r7
1004c260:	b002      	add	sp, #8
1004c262:	bd80      	pop	{r7, pc}

1004c264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
1004c264:	b580      	push	{r7, lr}
1004c266:	b082      	sub	sp, #8
1004c268:	af00      	add	r7, sp, #0
1004c26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
1004c26c:	46c0      	nop			@ (mov r8, r8)
1004c26e:	46bd      	mov	sp, r7
1004c270:	b002      	add	sp, #8
1004c272:	bd80      	pop	{r7, pc}

1004c274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
1004c274:	b580      	push	{r7, lr}
1004c276:	b084      	sub	sp, #16
1004c278:	af00      	add	r7, sp, #0
1004c27a:	6078      	str	r0, [r7, #4]
1004c27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
1004c27e:	687b      	ldr	r3, [r7, #4]
1004c280:	681b      	ldr	r3, [r3, #0]
1004c282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
1004c284:	687b      	ldr	r3, [r7, #4]
1004c286:	4a25      	ldr	r2, [pc, #148]	@ (1004c31c <TIM_Base_SetConfig+0xa8>)
1004c288:	4293      	cmp	r3, r2
1004c28a:	d108      	bne.n	1004c29e <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
1004c28c:	68fb      	ldr	r3, [r7, #12]
1004c28e:	2270      	movs	r2, #112	@ 0x70
1004c290:	4393      	bics	r3, r2
1004c292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
1004c294:	683b      	ldr	r3, [r7, #0]
1004c296:	685b      	ldr	r3, [r3, #4]
1004c298:	68fa      	ldr	r2, [r7, #12]
1004c29a:	4313      	orrs	r3, r2
1004c29c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004c29e:	687b      	ldr	r3, [r7, #4]
1004c2a0:	4a1e      	ldr	r2, [pc, #120]	@ (1004c31c <TIM_Base_SetConfig+0xa8>)
1004c2a2:	4293      	cmp	r3, r2
1004c2a4:	d007      	beq.n	1004c2b6 <TIM_Base_SetConfig+0x42>
1004c2a6:	687b      	ldr	r3, [r7, #4]
1004c2a8:	4a1d      	ldr	r2, [pc, #116]	@ (1004c320 <TIM_Base_SetConfig+0xac>)
1004c2aa:	4293      	cmp	r3, r2
1004c2ac:	d003      	beq.n	1004c2b6 <TIM_Base_SetConfig+0x42>
1004c2ae:	687b      	ldr	r3, [r7, #4]
1004c2b0:	4a1c      	ldr	r2, [pc, #112]	@ (1004c324 <TIM_Base_SetConfig+0xb0>)
1004c2b2:	4293      	cmp	r3, r2
1004c2b4:	d108      	bne.n	1004c2c8 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
1004c2b6:	68fb      	ldr	r3, [r7, #12]
1004c2b8:	4a1b      	ldr	r2, [pc, #108]	@ (1004c328 <TIM_Base_SetConfig+0xb4>)
1004c2ba:	4013      	ands	r3, r2
1004c2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004c2be:	683b      	ldr	r3, [r7, #0]
1004c2c0:	68db      	ldr	r3, [r3, #12]
1004c2c2:	68fa      	ldr	r2, [r7, #12]
1004c2c4:	4313      	orrs	r3, r2
1004c2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
1004c2c8:	68fb      	ldr	r3, [r7, #12]
1004c2ca:	2280      	movs	r2, #128	@ 0x80
1004c2cc:	4393      	bics	r3, r2
1004c2ce:	001a      	movs	r2, r3
1004c2d0:	683b      	ldr	r3, [r7, #0]
1004c2d2:	695b      	ldr	r3, [r3, #20]
1004c2d4:	4313      	orrs	r3, r2
1004c2d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
1004c2d8:	687b      	ldr	r3, [r7, #4]
1004c2da:	68fa      	ldr	r2, [r7, #12]
1004c2dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004c2de:	683b      	ldr	r3, [r7, #0]
1004c2e0:	689a      	ldr	r2, [r3, #8]
1004c2e2:	687b      	ldr	r3, [r7, #4]
1004c2e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
1004c2e6:	683b      	ldr	r3, [r7, #0]
1004c2e8:	681a      	ldr	r2, [r3, #0]
1004c2ea:	687b      	ldr	r3, [r7, #4]
1004c2ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004c2ee:	687b      	ldr	r3, [r7, #4]
1004c2f0:	4a0a      	ldr	r2, [pc, #40]	@ (1004c31c <TIM_Base_SetConfig+0xa8>)
1004c2f2:	4293      	cmp	r3, r2
1004c2f4:	d007      	beq.n	1004c306 <TIM_Base_SetConfig+0x92>
1004c2f6:	687b      	ldr	r3, [r7, #4]
1004c2f8:	4a09      	ldr	r2, [pc, #36]	@ (1004c320 <TIM_Base_SetConfig+0xac>)
1004c2fa:	4293      	cmp	r3, r2
1004c2fc:	d003      	beq.n	1004c306 <TIM_Base_SetConfig+0x92>
1004c2fe:	687b      	ldr	r3, [r7, #4]
1004c300:	4a08      	ldr	r2, [pc, #32]	@ (1004c324 <TIM_Base_SetConfig+0xb0>)
1004c302:	4293      	cmp	r3, r2
1004c304:	d103      	bne.n	1004c30e <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
1004c306:	683b      	ldr	r3, [r7, #0]
1004c308:	691a      	ldr	r2, [r3, #16]
1004c30a:	687b      	ldr	r3, [r7, #4]
1004c30c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004c30e:	687b      	ldr	r3, [r7, #4]
1004c310:	2201      	movs	r2, #1
1004c312:	615a      	str	r2, [r3, #20]
}
1004c314:	46c0      	nop			@ (mov r8, r8)
1004c316:	46bd      	mov	sp, r7
1004c318:	b004      	add	sp, #16
1004c31a:	bd80      	pop	{r7, pc}
1004c31c:	40002000 	.word	0x40002000
1004c320:	40005000 	.word	0x40005000
1004c324:	40006000 	.word	0x40006000
1004c328:	fffffcff 	.word	0xfffffcff

1004c32c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004c32c:	b580      	push	{r7, lr}
1004c32e:	b086      	sub	sp, #24
1004c330:	af00      	add	r7, sp, #0
1004c332:	60f8      	str	r0, [r7, #12]
1004c334:	60b9      	str	r1, [r7, #8]
1004c336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
1004c338:	68fb      	ldr	r3, [r7, #12]
1004c33a:	6a1b      	ldr	r3, [r3, #32]
1004c33c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
1004c33e:	68fb      	ldr	r3, [r7, #12]
1004c340:	6a1b      	ldr	r3, [r3, #32]
1004c342:	2201      	movs	r2, #1
1004c344:	4393      	bics	r3, r2
1004c346:	001a      	movs	r2, r3
1004c348:	68fb      	ldr	r3, [r7, #12]
1004c34a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004c34c:	68fb      	ldr	r3, [r7, #12]
1004c34e:	699b      	ldr	r3, [r3, #24]
1004c350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
1004c352:	693b      	ldr	r3, [r7, #16]
1004c354:	22f0      	movs	r2, #240	@ 0xf0
1004c356:	4393      	bics	r3, r2
1004c358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
1004c35a:	687b      	ldr	r3, [r7, #4]
1004c35c:	011b      	lsls	r3, r3, #4
1004c35e:	693a      	ldr	r2, [r7, #16]
1004c360:	4313      	orrs	r3, r2
1004c362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
1004c364:	697b      	ldr	r3, [r7, #20]
1004c366:	220a      	movs	r2, #10
1004c368:	4393      	bics	r3, r2
1004c36a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
1004c36c:	697a      	ldr	r2, [r7, #20]
1004c36e:	68bb      	ldr	r3, [r7, #8]
1004c370:	4313      	orrs	r3, r2
1004c372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1004c374:	68fb      	ldr	r3, [r7, #12]
1004c376:	693a      	ldr	r2, [r7, #16]
1004c378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004c37a:	68fb      	ldr	r3, [r7, #12]
1004c37c:	697a      	ldr	r2, [r7, #20]
1004c37e:	621a      	str	r2, [r3, #32]
}
1004c380:	46c0      	nop			@ (mov r8, r8)
1004c382:	46bd      	mov	sp, r7
1004c384:	b006      	add	sp, #24
1004c386:	bd80      	pop	{r7, pc}

1004c388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004c388:	b580      	push	{r7, lr}
1004c38a:	b086      	sub	sp, #24
1004c38c:	af00      	add	r7, sp, #0
1004c38e:	60f8      	str	r0, [r7, #12]
1004c390:	60b9      	str	r1, [r7, #8]
1004c392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
1004c394:	68fb      	ldr	r3, [r7, #12]
1004c396:	6a1b      	ldr	r3, [r3, #32]
1004c398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004c39a:	68fb      	ldr	r3, [r7, #12]
1004c39c:	6a1b      	ldr	r3, [r3, #32]
1004c39e:	2210      	movs	r2, #16
1004c3a0:	4393      	bics	r3, r2
1004c3a2:	001a      	movs	r2, r3
1004c3a4:	68fb      	ldr	r3, [r7, #12]
1004c3a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004c3a8:	68fb      	ldr	r3, [r7, #12]
1004c3aa:	699b      	ldr	r3, [r3, #24]
1004c3ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004c3ae:	693b      	ldr	r3, [r7, #16]
1004c3b0:	4a0d      	ldr	r2, [pc, #52]	@ (1004c3e8 <TIM_TI2_ConfigInputStage+0x60>)
1004c3b2:	4013      	ands	r3, r2
1004c3b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
1004c3b6:	687b      	ldr	r3, [r7, #4]
1004c3b8:	031b      	lsls	r3, r3, #12
1004c3ba:	693a      	ldr	r2, [r7, #16]
1004c3bc:	4313      	orrs	r3, r2
1004c3be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1004c3c0:	697b      	ldr	r3, [r7, #20]
1004c3c2:	22a0      	movs	r2, #160	@ 0xa0
1004c3c4:	4393      	bics	r3, r2
1004c3c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
1004c3c8:	68bb      	ldr	r3, [r7, #8]
1004c3ca:	011b      	lsls	r3, r3, #4
1004c3cc:	697a      	ldr	r2, [r7, #20]
1004c3ce:	4313      	orrs	r3, r2
1004c3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1004c3d2:	68fb      	ldr	r3, [r7, #12]
1004c3d4:	693a      	ldr	r2, [r7, #16]
1004c3d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004c3d8:	68fb      	ldr	r3, [r7, #12]
1004c3da:	697a      	ldr	r2, [r7, #20]
1004c3dc:	621a      	str	r2, [r3, #32]
}
1004c3de:	46c0      	nop			@ (mov r8, r8)
1004c3e0:	46bd      	mov	sp, r7
1004c3e2:	b006      	add	sp, #24
1004c3e4:	bd80      	pop	{r7, pc}
1004c3e6:	46c0      	nop			@ (mov r8, r8)
1004c3e8:	ffff0fff 	.word	0xffff0fff

1004c3ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004c3ec:	b580      	push	{r7, lr}
1004c3ee:	b084      	sub	sp, #16
1004c3f0:	af00      	add	r7, sp, #0
1004c3f2:	6078      	str	r0, [r7, #4]
1004c3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
1004c3f6:	687b      	ldr	r3, [r7, #4]
1004c3f8:	689b      	ldr	r3, [r3, #8]
1004c3fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004c3fc:	68fb      	ldr	r3, [r7, #12]
1004c3fe:	2270      	movs	r2, #112	@ 0x70
1004c400:	4393      	bics	r3, r2
1004c402:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
1004c404:	683a      	ldr	r2, [r7, #0]
1004c406:	68fb      	ldr	r3, [r7, #12]
1004c408:	4313      	orrs	r3, r2
1004c40a:	2207      	movs	r2, #7
1004c40c:	4313      	orrs	r3, r2
1004c40e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004c410:	687b      	ldr	r3, [r7, #4]
1004c412:	68fa      	ldr	r2, [r7, #12]
1004c414:	609a      	str	r2, [r3, #8]
}
1004c416:	46c0      	nop			@ (mov r8, r8)
1004c418:	46bd      	mov	sp, r7
1004c41a:	b004      	add	sp, #16
1004c41c:	bd80      	pop	{r7, pc}
	...

1004c420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
1004c420:	b580      	push	{r7, lr}
1004c422:	b086      	sub	sp, #24
1004c424:	af00      	add	r7, sp, #0
1004c426:	60f8      	str	r0, [r7, #12]
1004c428:	60b9      	str	r1, [r7, #8]
1004c42a:	607a      	str	r2, [r7, #4]
1004c42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004c42e:	68fb      	ldr	r3, [r7, #12]
1004c430:	689b      	ldr	r3, [r3, #8]
1004c432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004c434:	697b      	ldr	r3, [r7, #20]
1004c436:	4a09      	ldr	r2, [pc, #36]	@ (1004c45c <TIM_ETR_SetConfig+0x3c>)
1004c438:	4013      	ands	r3, r2
1004c43a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
1004c43c:	683b      	ldr	r3, [r7, #0]
1004c43e:	021a      	lsls	r2, r3, #8
1004c440:	687b      	ldr	r3, [r7, #4]
1004c442:	431a      	orrs	r2, r3
1004c444:	68bb      	ldr	r3, [r7, #8]
1004c446:	4313      	orrs	r3, r2
1004c448:	697a      	ldr	r2, [r7, #20]
1004c44a:	4313      	orrs	r3, r2
1004c44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004c44e:	68fb      	ldr	r3, [r7, #12]
1004c450:	697a      	ldr	r2, [r7, #20]
1004c452:	609a      	str	r2, [r3, #8]
}
1004c454:	46c0      	nop			@ (mov r8, r8)
1004c456:	46bd      	mov	sp, r7
1004c458:	b006      	add	sp, #24
1004c45a:	bd80      	pop	{r7, pc}
1004c45c:	ffff00ff 	.word	0xffff00ff

1004c460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
1004c460:	b580      	push	{r7, lr}
1004c462:	b082      	sub	sp, #8
1004c464:	af00      	add	r7, sp, #0
1004c466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
1004c468:	46c0      	nop			@ (mov r8, r8)
1004c46a:	46bd      	mov	sp, r7
1004c46c:	b002      	add	sp, #8
1004c46e:	bd80      	pop	{r7, pc}

1004c470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
1004c470:	b580      	push	{r7, lr}
1004c472:	b082      	sub	sp, #8
1004c474:	af00      	add	r7, sp, #0
1004c476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
1004c478:	46c0      	nop			@ (mov r8, r8)
1004c47a:	46bd      	mov	sp, r7
1004c47c:	b002      	add	sp, #8
1004c47e:	bd80      	pop	{r7, pc}

1004c480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
1004c480:	b580      	push	{r7, lr}
1004c482:	b082      	sub	sp, #8
1004c484:	af00      	add	r7, sp, #0
1004c486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004c488:	687b      	ldr	r3, [r7, #4]
1004c48a:	2b00      	cmp	r3, #0
1004c48c:	d101      	bne.n	1004c492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004c48e:	2301      	movs	r3, #1
1004c490:	e055      	b.n	1004c53e <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004c492:	687b      	ldr	r3, [r7, #4]
1004c494:	2288      	movs	r2, #136	@ 0x88
1004c496:	589b      	ldr	r3, [r3, r2]
1004c498:	2b00      	cmp	r3, #0
1004c49a:	d116      	bne.n	1004c4ca <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004c49c:	687b      	ldr	r3, [r7, #4]
1004c49e:	2284      	movs	r2, #132	@ 0x84
1004c4a0:	2100      	movs	r1, #0
1004c4a2:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
1004c4a4:	687b      	ldr	r3, [r7, #4]
1004c4a6:	0018      	movs	r0, r3
1004c4a8:	f000 f89e 	bl	1004c5e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1004c4ac:	687b      	ldr	r3, [r7, #4]
1004c4ae:	22c4      	movs	r2, #196	@ 0xc4
1004c4b0:	589b      	ldr	r3, [r3, r2]
1004c4b2:	2b00      	cmp	r3, #0
1004c4b4:	d103      	bne.n	1004c4be <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
1004c4b6:	687b      	ldr	r3, [r7, #4]
1004c4b8:	21c4      	movs	r1, #196	@ 0xc4
1004c4ba:	4a23      	ldr	r2, [pc, #140]	@ (1004c548 <HAL_UART_Init+0xc8>)
1004c4bc:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1004c4be:	687b      	ldr	r3, [r7, #4]
1004c4c0:	22c4      	movs	r2, #196	@ 0xc4
1004c4c2:	589b      	ldr	r3, [r3, r2]
1004c4c4:	687a      	ldr	r2, [r7, #4]
1004c4c6:	0010      	movs	r0, r2
1004c4c8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004c4ca:	687b      	ldr	r3, [r7, #4]
1004c4cc:	2288      	movs	r2, #136	@ 0x88
1004c4ce:	2124      	movs	r1, #36	@ 0x24
1004c4d0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
1004c4d2:	687b      	ldr	r3, [r7, #4]
1004c4d4:	681b      	ldr	r3, [r3, #0]
1004c4d6:	681a      	ldr	r2, [r3, #0]
1004c4d8:	687b      	ldr	r3, [r7, #4]
1004c4da:	681b      	ldr	r3, [r3, #0]
1004c4dc:	2101      	movs	r1, #1
1004c4de:	438a      	bics	r2, r1
1004c4e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1004c4e2:	687b      	ldr	r3, [r7, #4]
1004c4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004c4e6:	2b00      	cmp	r3, #0
1004c4e8:	d003      	beq.n	1004c4f2 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
1004c4ea:	687b      	ldr	r3, [r7, #4]
1004c4ec:	0018      	movs	r0, r3
1004c4ee:	f000 fa33 	bl	1004c958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1004c4f2:	687b      	ldr	r3, [r7, #4]
1004c4f4:	0018      	movs	r0, r3
1004c4f6:	f000 f8c7 	bl	1004c688 <UART_SetConfig>
1004c4fa:	0003      	movs	r3, r0
1004c4fc:	2b01      	cmp	r3, #1
1004c4fe:	d101      	bne.n	1004c504 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
1004c500:	2301      	movs	r3, #1
1004c502:	e01c      	b.n	1004c53e <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004c504:	687b      	ldr	r3, [r7, #4]
1004c506:	681b      	ldr	r3, [r3, #0]
1004c508:	685a      	ldr	r2, [r3, #4]
1004c50a:	687b      	ldr	r3, [r7, #4]
1004c50c:	681b      	ldr	r3, [r3, #0]
1004c50e:	490f      	ldr	r1, [pc, #60]	@ (1004c54c <HAL_UART_Init+0xcc>)
1004c510:	400a      	ands	r2, r1
1004c512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004c514:	687b      	ldr	r3, [r7, #4]
1004c516:	681b      	ldr	r3, [r3, #0]
1004c518:	689a      	ldr	r2, [r3, #8]
1004c51a:	687b      	ldr	r3, [r7, #4]
1004c51c:	681b      	ldr	r3, [r3, #0]
1004c51e:	212a      	movs	r1, #42	@ 0x2a
1004c520:	438a      	bics	r2, r1
1004c522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004c524:	687b      	ldr	r3, [r7, #4]
1004c526:	681b      	ldr	r3, [r3, #0]
1004c528:	681a      	ldr	r2, [r3, #0]
1004c52a:	687b      	ldr	r3, [r7, #4]
1004c52c:	681b      	ldr	r3, [r3, #0]
1004c52e:	2101      	movs	r1, #1
1004c530:	430a      	orrs	r2, r1
1004c532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004c534:	687b      	ldr	r3, [r7, #4]
1004c536:	0018      	movs	r0, r3
1004c538:	f000 fac2 	bl	1004cac0 <UART_CheckIdleState>
1004c53c:	0003      	movs	r3, r0
}
1004c53e:	0018      	movs	r0, r3
1004c540:	46bd      	mov	sp, r7
1004c542:	b002      	add	sp, #8
1004c544:	bd80      	pop	{r7, pc}
1004c546:	46c0      	nop			@ (mov r8, r8)
1004c548:	100458ed 	.word	0x100458ed
1004c54c:	ffffb7ff 	.word	0xffffb7ff

1004c550 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
1004c550:	b580      	push	{r7, lr}
1004c552:	b082      	sub	sp, #8
1004c554:	af00      	add	r7, sp, #0
1004c556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
1004c558:	46c0      	nop			@ (mov r8, r8)
1004c55a:	46bd      	mov	sp, r7
1004c55c:	b002      	add	sp, #8
1004c55e:	bd80      	pop	{r7, pc}

1004c560 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004c560:	b580      	push	{r7, lr}
1004c562:	b082      	sub	sp, #8
1004c564:	af00      	add	r7, sp, #0
1004c566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
1004c568:	46c0      	nop			@ (mov r8, r8)
1004c56a:	46bd      	mov	sp, r7
1004c56c:	b002      	add	sp, #8
1004c56e:	bd80      	pop	{r7, pc}

1004c570 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
1004c570:	b580      	push	{r7, lr}
1004c572:	b082      	sub	sp, #8
1004c574:	af00      	add	r7, sp, #0
1004c576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
1004c578:	46c0      	nop			@ (mov r8, r8)
1004c57a:	46bd      	mov	sp, r7
1004c57c:	b002      	add	sp, #8
1004c57e:	bd80      	pop	{r7, pc}

1004c580 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004c580:	b580      	push	{r7, lr}
1004c582:	b082      	sub	sp, #8
1004c584:	af00      	add	r7, sp, #0
1004c586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
1004c588:	46c0      	nop			@ (mov r8, r8)
1004c58a:	46bd      	mov	sp, r7
1004c58c:	b002      	add	sp, #8
1004c58e:	bd80      	pop	{r7, pc}

1004c590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
1004c590:	b580      	push	{r7, lr}
1004c592:	b082      	sub	sp, #8
1004c594:	af00      	add	r7, sp, #0
1004c596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
1004c598:	46c0      	nop			@ (mov r8, r8)
1004c59a:	46bd      	mov	sp, r7
1004c59c:	b002      	add	sp, #8
1004c59e:	bd80      	pop	{r7, pc}

1004c5a0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
1004c5a0:	b580      	push	{r7, lr}
1004c5a2:	b082      	sub	sp, #8
1004c5a4:	af00      	add	r7, sp, #0
1004c5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
1004c5a8:	46c0      	nop			@ (mov r8, r8)
1004c5aa:	46bd      	mov	sp, r7
1004c5ac:	b002      	add	sp, #8
1004c5ae:	bd80      	pop	{r7, pc}

1004c5b0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
1004c5b0:	b580      	push	{r7, lr}
1004c5b2:	b082      	sub	sp, #8
1004c5b4:	af00      	add	r7, sp, #0
1004c5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
1004c5b8:	46c0      	nop			@ (mov r8, r8)
1004c5ba:	46bd      	mov	sp, r7
1004c5bc:	b002      	add	sp, #8
1004c5be:	bd80      	pop	{r7, pc}

1004c5c0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
1004c5c0:	b580      	push	{r7, lr}
1004c5c2:	b082      	sub	sp, #8
1004c5c4:	af00      	add	r7, sp, #0
1004c5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
1004c5c8:	46c0      	nop			@ (mov r8, r8)
1004c5ca:	46bd      	mov	sp, r7
1004c5cc:	b002      	add	sp, #8
1004c5ce:	bd80      	pop	{r7, pc}

1004c5d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
1004c5d0:	b580      	push	{r7, lr}
1004c5d2:	b082      	sub	sp, #8
1004c5d4:	af00      	add	r7, sp, #0
1004c5d6:	6078      	str	r0, [r7, #4]
1004c5d8:	000a      	movs	r2, r1
1004c5da:	1cbb      	adds	r3, r7, #2
1004c5dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
1004c5de:	46c0      	nop			@ (mov r8, r8)
1004c5e0:	46bd      	mov	sp, r7
1004c5e2:	b002      	add	sp, #8
1004c5e4:	bd80      	pop	{r7, pc}
	...

1004c5e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
1004c5e8:	b580      	push	{r7, lr}
1004c5ea:	b082      	sub	sp, #8
1004c5ec:	af00      	add	r7, sp, #0
1004c5ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
1004c5f0:	687b      	ldr	r3, [r7, #4]
1004c5f2:	2194      	movs	r1, #148	@ 0x94
1004c5f4:	4a18      	ldr	r2, [pc, #96]	@ (1004c658 <UART_InitCallbacksToDefault+0x70>)
1004c5f6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
1004c5f8:	687b      	ldr	r3, [r7, #4]
1004c5fa:	2198      	movs	r1, #152	@ 0x98
1004c5fc:	4a17      	ldr	r2, [pc, #92]	@ (1004c65c <UART_InitCallbacksToDefault+0x74>)
1004c5fe:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
1004c600:	687b      	ldr	r3, [r7, #4]
1004c602:	219c      	movs	r1, #156	@ 0x9c
1004c604:	4a16      	ldr	r2, [pc, #88]	@ (1004c660 <UART_InitCallbacksToDefault+0x78>)
1004c606:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
1004c608:	687b      	ldr	r3, [r7, #4]
1004c60a:	21a0      	movs	r1, #160	@ 0xa0
1004c60c:	4a15      	ldr	r2, [pc, #84]	@ (1004c664 <UART_InitCallbacksToDefault+0x7c>)
1004c60e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
1004c610:	687b      	ldr	r3, [r7, #4]
1004c612:	21a4      	movs	r1, #164	@ 0xa4
1004c614:	4a14      	ldr	r2, [pc, #80]	@ (1004c668 <UART_InitCallbacksToDefault+0x80>)
1004c616:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
1004c618:	687b      	ldr	r3, [r7, #4]
1004c61a:	21a8      	movs	r1, #168	@ 0xa8
1004c61c:	4a13      	ldr	r2, [pc, #76]	@ (1004c66c <UART_InitCallbacksToDefault+0x84>)
1004c61e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
1004c620:	687b      	ldr	r3, [r7, #4]
1004c622:	21ac      	movs	r1, #172	@ 0xac
1004c624:	4a12      	ldr	r2, [pc, #72]	@ (1004c670 <UART_InitCallbacksToDefault+0x88>)
1004c626:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
1004c628:	687b      	ldr	r3, [r7, #4]
1004c62a:	21b0      	movs	r1, #176	@ 0xb0
1004c62c:	4a11      	ldr	r2, [pc, #68]	@ (1004c674 <UART_InitCallbacksToDefault+0x8c>)
1004c62e:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1004c630:	687b      	ldr	r3, [r7, #4]
1004c632:	21b4      	movs	r1, #180	@ 0xb4
1004c634:	4a10      	ldr	r2, [pc, #64]	@ (1004c678 <UART_InitCallbacksToDefault+0x90>)
1004c636:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
1004c638:	687b      	ldr	r3, [r7, #4]
1004c63a:	21b8      	movs	r1, #184	@ 0xb8
1004c63c:	4a0f      	ldr	r2, [pc, #60]	@ (1004c67c <UART_InitCallbacksToDefault+0x94>)
1004c63e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1004c640:	687b      	ldr	r3, [r7, #4]
1004c642:	21bc      	movs	r1, #188	@ 0xbc
1004c644:	4a0e      	ldr	r2, [pc, #56]	@ (1004c680 <UART_InitCallbacksToDefault+0x98>)
1004c646:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
1004c648:	687b      	ldr	r3, [r7, #4]
1004c64a:	21c0      	movs	r1, #192	@ 0xc0
1004c64c:	4a0d      	ldr	r2, [pc, #52]	@ (1004c684 <UART_InitCallbacksToDefault+0x9c>)
1004c64e:	505a      	str	r2, [r3, r1]

}
1004c650:	46c0      	nop			@ (mov r8, r8)
1004c652:	46bd      	mov	sp, r7
1004c654:	b002      	add	sp, #8
1004c656:	bd80      	pop	{r7, pc}
1004c658:	1004c561 	.word	0x1004c561
1004c65c:	1004c551 	.word	0x1004c551
1004c660:	1004c581 	.word	0x1004c581
1004c664:	1004c571 	.word	0x1004c571
1004c668:	1004c591 	.word	0x1004c591
1004c66c:	1004c5a1 	.word	0x1004c5a1
1004c670:	1004c5b1 	.word	0x1004c5b1
1004c674:	1004c5c1 	.word	0x1004c5c1
1004c678:	1004cdc1 	.word	0x1004cdc1
1004c67c:	1004cdd1 	.word	0x1004cdd1
1004c680:	1004cde1 	.word	0x1004cde1
1004c684:	1004c5d1 	.word	0x1004c5d1

1004c688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004c688:	b5b0      	push	{r4, r5, r7, lr}
1004c68a:	b090      	sub	sp, #64	@ 0x40
1004c68c:	af00      	add	r7, sp, #0
1004c68e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1004c690:	231b      	movs	r3, #27
1004c692:	2220      	movs	r2, #32
1004c694:	189b      	adds	r3, r3, r2
1004c696:	19db      	adds	r3, r3, r7
1004c698:	2200      	movs	r2, #0
1004c69a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1004c69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c69e:	689a      	ldr	r2, [r3, #8]
1004c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6a2:	691b      	ldr	r3, [r3, #16]
1004c6a4:	431a      	orrs	r2, r3
1004c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6a8:	695b      	ldr	r3, [r3, #20]
1004c6aa:	431a      	orrs	r2, r3
1004c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6ae:	69db      	ldr	r3, [r3, #28]
1004c6b0:	4313      	orrs	r3, r2
1004c6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6b6:	681b      	ldr	r3, [r3, #0]
1004c6b8:	681b      	ldr	r3, [r3, #0]
1004c6ba:	4aa1      	ldr	r2, [pc, #644]	@ (1004c940 <UART_SetConfig+0x2b8>)
1004c6bc:	4013      	ands	r3, r2
1004c6be:	0019      	movs	r1, r3
1004c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6c2:	681a      	ldr	r2, [r3, #0]
1004c6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c6c6:	430b      	orrs	r3, r1
1004c6c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6cc:	681b      	ldr	r3, [r3, #0]
1004c6ce:	685b      	ldr	r3, [r3, #4]
1004c6d0:	4a9c      	ldr	r2, [pc, #624]	@ (1004c944 <UART_SetConfig+0x2bc>)
1004c6d2:	4013      	ands	r3, r2
1004c6d4:	0018      	movs	r0, r3
1004c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6d8:	68d9      	ldr	r1, [r3, #12]
1004c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6dc:	681a      	ldr	r2, [r3, #0]
1004c6de:	0003      	movs	r3, r0
1004c6e0:	430b      	orrs	r3, r1
1004c6e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6e6:	699b      	ldr	r3, [r3, #24]
1004c6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6ec:	681b      	ldr	r3, [r3, #0]
1004c6ee:	4a96      	ldr	r2, [pc, #600]	@ (1004c948 <UART_SetConfig+0x2c0>)
1004c6f0:	4293      	cmp	r3, r2
1004c6f2:	d004      	beq.n	1004c6fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004c6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6f6:	6a1b      	ldr	r3, [r3, #32]
1004c6f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004c6fa:	4313      	orrs	r3, r2
1004c6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1004c6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c700:	681b      	ldr	r3, [r3, #0]
1004c702:	689b      	ldr	r3, [r3, #8]
1004c704:	4a91      	ldr	r2, [pc, #580]	@ (1004c94c <UART_SetConfig+0x2c4>)
1004c706:	4013      	ands	r3, r2
1004c708:	0019      	movs	r1, r3
1004c70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c70c:	681a      	ldr	r2, [r3, #0]
1004c70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c710:	430b      	orrs	r3, r1
1004c712:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c716:	681b      	ldr	r3, [r3, #0]
1004c718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004c71a:	220f      	movs	r2, #15
1004c71c:	4393      	bics	r3, r2
1004c71e:	0018      	movs	r0, r3
1004c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c722:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004c724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c726:	681a      	ldr	r2, [r3, #0]
1004c728:	0003      	movs	r3, r0
1004c72a:	430b      	orrs	r3, r1
1004c72c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1004c72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c730:	681b      	ldr	r3, [r3, #0]
1004c732:	4a85      	ldr	r2, [pc, #532]	@ (1004c948 <UART_SetConfig+0x2c0>)
1004c734:	4293      	cmp	r3, r2
1004c736:	d16d      	bne.n	1004c814 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004c738:	2010      	movs	r0, #16
1004c73a:	f7ff fa67 	bl	1004bc0c <HAL_RCCEx_GetPeriphCLKFreq>
1004c73e:	0003      	movs	r3, r0
1004c740:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004c742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c744:	2b00      	cmp	r3, #0
1004c746:	d100      	bne.n	1004c74a <UART_SetConfig+0xc2>
1004c748:	e0e3      	b.n	1004c912 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c74c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004c74e:	4b80      	ldr	r3, [pc, #512]	@ (1004c950 <UART_SetConfig+0x2c8>)
1004c750:	0052      	lsls	r2, r2, #1
1004c752:	5ad3      	ldrh	r3, [r2, r3]
1004c754:	0019      	movs	r1, r3
1004c756:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004c758:	f7f3 fd72 	bl	10040240 <__udivsi3>
1004c75c:	0003      	movs	r3, r0
1004c75e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c762:	685a      	ldr	r2, [r3, #4]
1004c764:	0013      	movs	r3, r2
1004c766:	005b      	lsls	r3, r3, #1
1004c768:	189b      	adds	r3, r3, r2
1004c76a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004c76c:	429a      	cmp	r2, r3
1004c76e:	d305      	bcc.n	1004c77c <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1004c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c772:	685b      	ldr	r3, [r3, #4]
1004c774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004c776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004c778:	429a      	cmp	r2, r3
1004c77a:	d906      	bls.n	1004c78a <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
1004c77c:	231b      	movs	r3, #27
1004c77e:	2220      	movs	r2, #32
1004c780:	189b      	adds	r3, r3, r2
1004c782:	19db      	adds	r3, r3, r7
1004c784:	2201      	movs	r2, #1
1004c786:	701a      	strb	r2, [r3, #0]
1004c788:	e0c3      	b.n	1004c912 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004c78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c78c:	61bb      	str	r3, [r7, #24]
1004c78e:	2300      	movs	r3, #0
1004c790:	61fb      	str	r3, [r7, #28]
1004c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004c796:	4b6e      	ldr	r3, [pc, #440]	@ (1004c950 <UART_SetConfig+0x2c8>)
1004c798:	0052      	lsls	r2, r2, #1
1004c79a:	5ad3      	ldrh	r3, [r2, r3]
1004c79c:	613b      	str	r3, [r7, #16]
1004c79e:	2300      	movs	r3, #0
1004c7a0:	617b      	str	r3, [r7, #20]
1004c7a2:	693a      	ldr	r2, [r7, #16]
1004c7a4:	697b      	ldr	r3, [r7, #20]
1004c7a6:	69b8      	ldr	r0, [r7, #24]
1004c7a8:	69f9      	ldr	r1, [r7, #28]
1004c7aa:	f7f3 fee9 	bl	10040580 <__aeabi_uldivmod>
1004c7ae:	0002      	movs	r2, r0
1004c7b0:	000b      	movs	r3, r1
1004c7b2:	0e11      	lsrs	r1, r2, #24
1004c7b4:	021d      	lsls	r5, r3, #8
1004c7b6:	430d      	orrs	r5, r1
1004c7b8:	0214      	lsls	r4, r2, #8
1004c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c7bc:	685b      	ldr	r3, [r3, #4]
1004c7be:	085b      	lsrs	r3, r3, #1
1004c7c0:	60bb      	str	r3, [r7, #8]
1004c7c2:	2300      	movs	r3, #0
1004c7c4:	60fb      	str	r3, [r7, #12]
1004c7c6:	68b8      	ldr	r0, [r7, #8]
1004c7c8:	68f9      	ldr	r1, [r7, #12]
1004c7ca:	1900      	adds	r0, r0, r4
1004c7cc:	4169      	adcs	r1, r5
1004c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c7d0:	685b      	ldr	r3, [r3, #4]
1004c7d2:	603b      	str	r3, [r7, #0]
1004c7d4:	2300      	movs	r3, #0
1004c7d6:	607b      	str	r3, [r7, #4]
1004c7d8:	683a      	ldr	r2, [r7, #0]
1004c7da:	687b      	ldr	r3, [r7, #4]
1004c7dc:	f7f3 fed0 	bl	10040580 <__aeabi_uldivmod>
1004c7e0:	0002      	movs	r2, r0
1004c7e2:	000b      	movs	r3, r1
1004c7e4:	0013      	movs	r3, r2
1004c7e6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004c7e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004c7ea:	23c0      	movs	r3, #192	@ 0xc0
1004c7ec:	009b      	lsls	r3, r3, #2
1004c7ee:	429a      	cmp	r2, r3
1004c7f0:	d309      	bcc.n	1004c806 <UART_SetConfig+0x17e>
1004c7f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004c7f4:	2380      	movs	r3, #128	@ 0x80
1004c7f6:	035b      	lsls	r3, r3, #13
1004c7f8:	429a      	cmp	r2, r3
1004c7fa:	d204      	bcs.n	1004c806 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
1004c7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c7fe:	681b      	ldr	r3, [r3, #0]
1004c800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004c802:	60da      	str	r2, [r3, #12]
1004c804:	e085      	b.n	1004c912 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004c806:	231b      	movs	r3, #27
1004c808:	2220      	movs	r2, #32
1004c80a:	189b      	adds	r3, r3, r2
1004c80c:	19db      	adds	r3, r3, r7
1004c80e:	2201      	movs	r2, #1
1004c810:	701a      	strb	r2, [r3, #0]
1004c812:	e07e      	b.n	1004c912 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c816:	69da      	ldr	r2, [r3, #28]
1004c818:	2380      	movs	r3, #128	@ 0x80
1004c81a:	021b      	lsls	r3, r3, #8
1004c81c:	429a      	cmp	r2, r3
1004c81e:	d148      	bne.n	1004c8b2 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
1004c820:	4b4c      	ldr	r3, [pc, #304]	@ (1004c954 <UART_SetConfig+0x2cc>)
1004c822:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004c824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c826:	2b00      	cmp	r3, #0
1004c828:	d100      	bne.n	1004c82c <UART_SetConfig+0x1a4>
1004c82a:	e072      	b.n	1004c912 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c82e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004c830:	4b47      	ldr	r3, [pc, #284]	@ (1004c950 <UART_SetConfig+0x2c8>)
1004c832:	0052      	lsls	r2, r2, #1
1004c834:	5ad3      	ldrh	r3, [r2, r3]
1004c836:	0019      	movs	r1, r3
1004c838:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004c83a:	f7f3 fd01 	bl	10040240 <__udivsi3>
1004c83e:	0003      	movs	r3, r0
1004c840:	005a      	lsls	r2, r3, #1
1004c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c844:	685b      	ldr	r3, [r3, #4]
1004c846:	085b      	lsrs	r3, r3, #1
1004c848:	18d2      	adds	r2, r2, r3
1004c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c84c:	685b      	ldr	r3, [r3, #4]
1004c84e:	0019      	movs	r1, r3
1004c850:	0010      	movs	r0, r2
1004c852:	f7f3 fcf5 	bl	10040240 <__udivsi3>
1004c856:	0003      	movs	r3, r0
1004c858:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004c85c:	2b0f      	cmp	r3, #15
1004c85e:	d921      	bls.n	1004c8a4 <UART_SetConfig+0x21c>
1004c860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004c862:	2380      	movs	r3, #128	@ 0x80
1004c864:	025b      	lsls	r3, r3, #9
1004c866:	429a      	cmp	r2, r3
1004c868:	d21c      	bcs.n	1004c8a4 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004c86c:	b29a      	uxth	r2, r3
1004c86e:	200e      	movs	r0, #14
1004c870:	2420      	movs	r4, #32
1004c872:	1903      	adds	r3, r0, r4
1004c874:	19db      	adds	r3, r3, r7
1004c876:	210f      	movs	r1, #15
1004c878:	438a      	bics	r2, r1
1004c87a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1004c87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004c87e:	085b      	lsrs	r3, r3, #1
1004c880:	b29b      	uxth	r3, r3
1004c882:	2207      	movs	r2, #7
1004c884:	4013      	ands	r3, r2
1004c886:	b299      	uxth	r1, r3
1004c888:	1903      	adds	r3, r0, r4
1004c88a:	19db      	adds	r3, r3, r7
1004c88c:	1902      	adds	r2, r0, r4
1004c88e:	19d2      	adds	r2, r2, r7
1004c890:	8812      	ldrh	r2, [r2, #0]
1004c892:	430a      	orrs	r2, r1
1004c894:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c898:	681b      	ldr	r3, [r3, #0]
1004c89a:	1902      	adds	r2, r0, r4
1004c89c:	19d2      	adds	r2, r2, r7
1004c89e:	8812      	ldrh	r2, [r2, #0]
1004c8a0:	60da      	str	r2, [r3, #12]
1004c8a2:	e036      	b.n	1004c912 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004c8a4:	231b      	movs	r3, #27
1004c8a6:	2220      	movs	r2, #32
1004c8a8:	189b      	adds	r3, r3, r2
1004c8aa:	19db      	adds	r3, r3, r7
1004c8ac:	2201      	movs	r2, #1
1004c8ae:	701a      	strb	r2, [r3, #0]
1004c8b0:	e02f      	b.n	1004c912 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004c8b2:	4b28      	ldr	r3, [pc, #160]	@ (1004c954 <UART_SetConfig+0x2cc>)
1004c8b4:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004c8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c8b8:	2b00      	cmp	r3, #0
1004c8ba:	d02a      	beq.n	1004c912 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004c8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c8be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004c8c0:	4b23      	ldr	r3, [pc, #140]	@ (1004c950 <UART_SetConfig+0x2c8>)
1004c8c2:	0052      	lsls	r2, r2, #1
1004c8c4:	5ad3      	ldrh	r3, [r2, r3]
1004c8c6:	0019      	movs	r1, r3
1004c8c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004c8ca:	f7f3 fcb9 	bl	10040240 <__udivsi3>
1004c8ce:	0003      	movs	r3, r0
1004c8d0:	001a      	movs	r2, r3
1004c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c8d4:	685b      	ldr	r3, [r3, #4]
1004c8d6:	085b      	lsrs	r3, r3, #1
1004c8d8:	18d2      	adds	r2, r2, r3
1004c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c8dc:	685b      	ldr	r3, [r3, #4]
1004c8de:	0019      	movs	r1, r3
1004c8e0:	0010      	movs	r0, r2
1004c8e2:	f7f3 fcad 	bl	10040240 <__udivsi3>
1004c8e6:	0003      	movs	r3, r0
1004c8e8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004c8ec:	2b0f      	cmp	r3, #15
1004c8ee:	d90a      	bls.n	1004c906 <UART_SetConfig+0x27e>
1004c8f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004c8f2:	2380      	movs	r3, #128	@ 0x80
1004c8f4:	025b      	lsls	r3, r3, #9
1004c8f6:	429a      	cmp	r2, r3
1004c8f8:	d205      	bcs.n	1004c906 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004c8fc:	b29a      	uxth	r2, r3
1004c8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c900:	681b      	ldr	r3, [r3, #0]
1004c902:	60da      	str	r2, [r3, #12]
1004c904:	e005      	b.n	1004c912 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004c906:	231b      	movs	r3, #27
1004c908:	2220      	movs	r2, #32
1004c90a:	189b      	adds	r3, r3, r2
1004c90c:	19db      	adds	r3, r3, r7
1004c90e:	2201      	movs	r2, #1
1004c910:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004c912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c914:	226a      	movs	r2, #106	@ 0x6a
1004c916:	2101      	movs	r1, #1
1004c918:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c91c:	2268      	movs	r2, #104	@ 0x68
1004c91e:	2101      	movs	r1, #1
1004c920:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c924:	2200      	movs	r2, #0
1004c926:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c92a:	2200      	movs	r2, #0
1004c92c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1004c92e:	231b      	movs	r3, #27
1004c930:	2220      	movs	r2, #32
1004c932:	189b      	adds	r3, r3, r2
1004c934:	19db      	adds	r3, r3, r7
1004c936:	781b      	ldrb	r3, [r3, #0]
}
1004c938:	0018      	movs	r0, r3
1004c93a:	46bd      	mov	sp, r7
1004c93c:	b010      	add	sp, #64	@ 0x40
1004c93e:	bdb0      	pop	{r4, r5, r7, pc}
1004c940:	cfff69f3 	.word	0xcfff69f3
1004c944:	ffffcfff 	.word	0xffffcfff
1004c948:	41005000 	.word	0x41005000
1004c94c:	11fff4ff 	.word	0x11fff4ff
1004c950:	10067dd0 	.word	0x10067dd0
1004c954:	00f42400 	.word	0x00f42400

1004c958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004c958:	b580      	push	{r7, lr}
1004c95a:	b082      	sub	sp, #8
1004c95c:	af00      	add	r7, sp, #0
1004c95e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1004c960:	687b      	ldr	r3, [r7, #4]
1004c962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004c964:	2208      	movs	r2, #8
1004c966:	4013      	ands	r3, r2
1004c968:	d00b      	beq.n	1004c982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004c96a:	687b      	ldr	r3, [r7, #4]
1004c96c:	681b      	ldr	r3, [r3, #0]
1004c96e:	685b      	ldr	r3, [r3, #4]
1004c970:	4a4a      	ldr	r2, [pc, #296]	@ (1004ca9c <UART_AdvFeatureConfig+0x144>)
1004c972:	4013      	ands	r3, r2
1004c974:	0019      	movs	r1, r3
1004c976:	687b      	ldr	r3, [r7, #4]
1004c978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004c97a:	687b      	ldr	r3, [r7, #4]
1004c97c:	681b      	ldr	r3, [r3, #0]
1004c97e:	430a      	orrs	r2, r1
1004c980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004c982:	687b      	ldr	r3, [r7, #4]
1004c984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004c986:	2201      	movs	r2, #1
1004c988:	4013      	ands	r3, r2
1004c98a:	d00b      	beq.n	1004c9a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1004c98c:	687b      	ldr	r3, [r7, #4]
1004c98e:	681b      	ldr	r3, [r3, #0]
1004c990:	685b      	ldr	r3, [r3, #4]
1004c992:	4a43      	ldr	r2, [pc, #268]	@ (1004caa0 <UART_AdvFeatureConfig+0x148>)
1004c994:	4013      	ands	r3, r2
1004c996:	0019      	movs	r1, r3
1004c998:	687b      	ldr	r3, [r7, #4]
1004c99a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004c99c:	687b      	ldr	r3, [r7, #4]
1004c99e:	681b      	ldr	r3, [r3, #0]
1004c9a0:	430a      	orrs	r2, r1
1004c9a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004c9a4:	687b      	ldr	r3, [r7, #4]
1004c9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004c9a8:	2202      	movs	r2, #2
1004c9aa:	4013      	ands	r3, r2
1004c9ac:	d00b      	beq.n	1004c9c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1004c9ae:	687b      	ldr	r3, [r7, #4]
1004c9b0:	681b      	ldr	r3, [r3, #0]
1004c9b2:	685b      	ldr	r3, [r3, #4]
1004c9b4:	4a3b      	ldr	r2, [pc, #236]	@ (1004caa4 <UART_AdvFeatureConfig+0x14c>)
1004c9b6:	4013      	ands	r3, r2
1004c9b8:	0019      	movs	r1, r3
1004c9ba:	687b      	ldr	r3, [r7, #4]
1004c9bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004c9be:	687b      	ldr	r3, [r7, #4]
1004c9c0:	681b      	ldr	r3, [r3, #0]
1004c9c2:	430a      	orrs	r2, r1
1004c9c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004c9c6:	687b      	ldr	r3, [r7, #4]
1004c9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004c9ca:	2204      	movs	r2, #4
1004c9cc:	4013      	ands	r3, r2
1004c9ce:	d00b      	beq.n	1004c9e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1004c9d0:	687b      	ldr	r3, [r7, #4]
1004c9d2:	681b      	ldr	r3, [r3, #0]
1004c9d4:	685b      	ldr	r3, [r3, #4]
1004c9d6:	4a34      	ldr	r2, [pc, #208]	@ (1004caa8 <UART_AdvFeatureConfig+0x150>)
1004c9d8:	4013      	ands	r3, r2
1004c9da:	0019      	movs	r1, r3
1004c9dc:	687b      	ldr	r3, [r7, #4]
1004c9de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004c9e0:	687b      	ldr	r3, [r7, #4]
1004c9e2:	681b      	ldr	r3, [r3, #0]
1004c9e4:	430a      	orrs	r2, r1
1004c9e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004c9e8:	687b      	ldr	r3, [r7, #4]
1004c9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004c9ec:	2210      	movs	r2, #16
1004c9ee:	4013      	ands	r3, r2
1004c9f0:	d00b      	beq.n	1004ca0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004c9f2:	687b      	ldr	r3, [r7, #4]
1004c9f4:	681b      	ldr	r3, [r3, #0]
1004c9f6:	689b      	ldr	r3, [r3, #8]
1004c9f8:	4a2c      	ldr	r2, [pc, #176]	@ (1004caac <UART_AdvFeatureConfig+0x154>)
1004c9fa:	4013      	ands	r3, r2
1004c9fc:	0019      	movs	r1, r3
1004c9fe:	687b      	ldr	r3, [r7, #4]
1004ca00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004ca02:	687b      	ldr	r3, [r7, #4]
1004ca04:	681b      	ldr	r3, [r3, #0]
1004ca06:	430a      	orrs	r2, r1
1004ca08:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004ca0a:	687b      	ldr	r3, [r7, #4]
1004ca0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ca0e:	2220      	movs	r2, #32
1004ca10:	4013      	ands	r3, r2
1004ca12:	d00b      	beq.n	1004ca2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004ca14:	687b      	ldr	r3, [r7, #4]
1004ca16:	681b      	ldr	r3, [r3, #0]
1004ca18:	689b      	ldr	r3, [r3, #8]
1004ca1a:	4a25      	ldr	r2, [pc, #148]	@ (1004cab0 <UART_AdvFeatureConfig+0x158>)
1004ca1c:	4013      	ands	r3, r2
1004ca1e:	0019      	movs	r1, r3
1004ca20:	687b      	ldr	r3, [r7, #4]
1004ca22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004ca24:	687b      	ldr	r3, [r7, #4]
1004ca26:	681b      	ldr	r3, [r3, #0]
1004ca28:	430a      	orrs	r2, r1
1004ca2a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1004ca2c:	687b      	ldr	r3, [r7, #4]
1004ca2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ca30:	2240      	movs	r2, #64	@ 0x40
1004ca32:	4013      	ands	r3, r2
1004ca34:	d01d      	beq.n	1004ca72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004ca36:	687b      	ldr	r3, [r7, #4]
1004ca38:	681b      	ldr	r3, [r3, #0]
1004ca3a:	685b      	ldr	r3, [r3, #4]
1004ca3c:	4a1d      	ldr	r2, [pc, #116]	@ (1004cab4 <UART_AdvFeatureConfig+0x15c>)
1004ca3e:	4013      	ands	r3, r2
1004ca40:	0019      	movs	r1, r3
1004ca42:	687b      	ldr	r3, [r7, #4]
1004ca44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004ca46:	687b      	ldr	r3, [r7, #4]
1004ca48:	681b      	ldr	r3, [r3, #0]
1004ca4a:	430a      	orrs	r2, r1
1004ca4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1004ca4e:	687b      	ldr	r3, [r7, #4]
1004ca50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004ca52:	2380      	movs	r3, #128	@ 0x80
1004ca54:	035b      	lsls	r3, r3, #13
1004ca56:	429a      	cmp	r2, r3
1004ca58:	d10b      	bne.n	1004ca72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004ca5a:	687b      	ldr	r3, [r7, #4]
1004ca5c:	681b      	ldr	r3, [r3, #0]
1004ca5e:	685b      	ldr	r3, [r3, #4]
1004ca60:	4a15      	ldr	r2, [pc, #84]	@ (1004cab8 <UART_AdvFeatureConfig+0x160>)
1004ca62:	4013      	ands	r3, r2
1004ca64:	0019      	movs	r1, r3
1004ca66:	687b      	ldr	r3, [r7, #4]
1004ca68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004ca6a:	687b      	ldr	r3, [r7, #4]
1004ca6c:	681b      	ldr	r3, [r3, #0]
1004ca6e:	430a      	orrs	r2, r1
1004ca70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004ca72:	687b      	ldr	r3, [r7, #4]
1004ca74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ca76:	2280      	movs	r2, #128	@ 0x80
1004ca78:	4013      	ands	r3, r2
1004ca7a:	d00b      	beq.n	1004ca94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1004ca7c:	687b      	ldr	r3, [r7, #4]
1004ca7e:	681b      	ldr	r3, [r3, #0]
1004ca80:	685b      	ldr	r3, [r3, #4]
1004ca82:	4a0e      	ldr	r2, [pc, #56]	@ (1004cabc <UART_AdvFeatureConfig+0x164>)
1004ca84:	4013      	ands	r3, r2
1004ca86:	0019      	movs	r1, r3
1004ca88:	687b      	ldr	r3, [r7, #4]
1004ca8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
1004ca8c:	687b      	ldr	r3, [r7, #4]
1004ca8e:	681b      	ldr	r3, [r3, #0]
1004ca90:	430a      	orrs	r2, r1
1004ca92:	605a      	str	r2, [r3, #4]
  }
}
1004ca94:	46c0      	nop			@ (mov r8, r8)
1004ca96:	46bd      	mov	sp, r7
1004ca98:	b002      	add	sp, #8
1004ca9a:	bd80      	pop	{r7, pc}
1004ca9c:	ffff7fff 	.word	0xffff7fff
1004caa0:	fffdffff 	.word	0xfffdffff
1004caa4:	fffeffff 	.word	0xfffeffff
1004caa8:	fffbffff 	.word	0xfffbffff
1004caac:	ffffefff 	.word	0xffffefff
1004cab0:	ffffdfff 	.word	0xffffdfff
1004cab4:	ffefffff 	.word	0xffefffff
1004cab8:	ff9fffff 	.word	0xff9fffff
1004cabc:	fff7ffff 	.word	0xfff7ffff

1004cac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1004cac0:	b580      	push	{r7, lr}
1004cac2:	b092      	sub	sp, #72	@ 0x48
1004cac4:	af02      	add	r7, sp, #8
1004cac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004cac8:	687b      	ldr	r3, [r7, #4]
1004caca:	2290      	movs	r2, #144	@ 0x90
1004cacc:	2100      	movs	r1, #0
1004cace:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1004cad0:	f7f9 fc5c 	bl	1004638c <HAL_GetTick>
1004cad4:	0003      	movs	r3, r0
1004cad6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004cad8:	687b      	ldr	r3, [r7, #4]
1004cada:	681b      	ldr	r3, [r3, #0]
1004cadc:	681b      	ldr	r3, [r3, #0]
1004cade:	2208      	movs	r2, #8
1004cae0:	4013      	ands	r3, r2
1004cae2:	2b08      	cmp	r3, #8
1004cae4:	d12d      	bne.n	1004cb42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004cae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004cae8:	2280      	movs	r2, #128	@ 0x80
1004caea:	0391      	lsls	r1, r2, #14
1004caec:	6878      	ldr	r0, [r7, #4]
1004caee:	4a47      	ldr	r2, [pc, #284]	@ (1004cc0c <UART_CheckIdleState+0x14c>)
1004caf0:	9200      	str	r2, [sp, #0]
1004caf2:	2200      	movs	r2, #0
1004caf4:	f000 f88e 	bl	1004cc14 <UART_WaitOnFlagUntilTimeout>
1004caf8:	1e03      	subs	r3, r0, #0
1004cafa:	d022      	beq.n	1004cb42 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cafc:	f3ef 8310 	mrs	r3, PRIMASK
1004cb00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
1004cb04:	63bb      	str	r3, [r7, #56]	@ 0x38
1004cb06:	2301      	movs	r3, #1
1004cb08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004cb0c:	f383 8810 	msr	PRIMASK, r3
}
1004cb10:	46c0      	nop			@ (mov r8, r8)
1004cb12:	687b      	ldr	r3, [r7, #4]
1004cb14:	681b      	ldr	r3, [r3, #0]
1004cb16:	681a      	ldr	r2, [r3, #0]
1004cb18:	687b      	ldr	r3, [r7, #4]
1004cb1a:	681b      	ldr	r3, [r3, #0]
1004cb1c:	2180      	movs	r1, #128	@ 0x80
1004cb1e:	438a      	bics	r2, r1
1004cb20:	601a      	str	r2, [r3, #0]
1004cb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004cb24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004cb28:	f383 8810 	msr	PRIMASK, r3
}
1004cb2c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004cb2e:	687b      	ldr	r3, [r7, #4]
1004cb30:	2288      	movs	r2, #136	@ 0x88
1004cb32:	2120      	movs	r1, #32
1004cb34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004cb36:	687b      	ldr	r3, [r7, #4]
1004cb38:	2284      	movs	r2, #132	@ 0x84
1004cb3a:	2100      	movs	r1, #0
1004cb3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004cb3e:	2303      	movs	r3, #3
1004cb40:	e060      	b.n	1004cc04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004cb42:	687b      	ldr	r3, [r7, #4]
1004cb44:	681b      	ldr	r3, [r3, #0]
1004cb46:	681b      	ldr	r3, [r3, #0]
1004cb48:	2204      	movs	r2, #4
1004cb4a:	4013      	ands	r3, r2
1004cb4c:	2b04      	cmp	r3, #4
1004cb4e:	d146      	bne.n	1004cbde <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004cb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004cb52:	2280      	movs	r2, #128	@ 0x80
1004cb54:	03d1      	lsls	r1, r2, #15
1004cb56:	6878      	ldr	r0, [r7, #4]
1004cb58:	4a2c      	ldr	r2, [pc, #176]	@ (1004cc0c <UART_CheckIdleState+0x14c>)
1004cb5a:	9200      	str	r2, [sp, #0]
1004cb5c:	2200      	movs	r2, #0
1004cb5e:	f000 f859 	bl	1004cc14 <UART_WaitOnFlagUntilTimeout>
1004cb62:	1e03      	subs	r3, r0, #0
1004cb64:	d03b      	beq.n	1004cbde <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cb66:	f3ef 8310 	mrs	r3, PRIMASK
1004cb6a:	60fb      	str	r3, [r7, #12]
  return(result);
1004cb6c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004cb6e:	637b      	str	r3, [r7, #52]	@ 0x34
1004cb70:	2301      	movs	r3, #1
1004cb72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cb74:	693b      	ldr	r3, [r7, #16]
1004cb76:	f383 8810 	msr	PRIMASK, r3
}
1004cb7a:	46c0      	nop			@ (mov r8, r8)
1004cb7c:	687b      	ldr	r3, [r7, #4]
1004cb7e:	681b      	ldr	r3, [r3, #0]
1004cb80:	681a      	ldr	r2, [r3, #0]
1004cb82:	687b      	ldr	r3, [r7, #4]
1004cb84:	681b      	ldr	r3, [r3, #0]
1004cb86:	4922      	ldr	r1, [pc, #136]	@ (1004cc10 <UART_CheckIdleState+0x150>)
1004cb88:	400a      	ands	r2, r1
1004cb8a:	601a      	str	r2, [r3, #0]
1004cb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004cb8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cb90:	697b      	ldr	r3, [r7, #20]
1004cb92:	f383 8810 	msr	PRIMASK, r3
}
1004cb96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cb98:	f3ef 8310 	mrs	r3, PRIMASK
1004cb9c:	61bb      	str	r3, [r7, #24]
  return(result);
1004cb9e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004cba0:	633b      	str	r3, [r7, #48]	@ 0x30
1004cba2:	2301      	movs	r3, #1
1004cba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cba6:	69fb      	ldr	r3, [r7, #28]
1004cba8:	f383 8810 	msr	PRIMASK, r3
}
1004cbac:	46c0      	nop			@ (mov r8, r8)
1004cbae:	687b      	ldr	r3, [r7, #4]
1004cbb0:	681b      	ldr	r3, [r3, #0]
1004cbb2:	689a      	ldr	r2, [r3, #8]
1004cbb4:	687b      	ldr	r3, [r7, #4]
1004cbb6:	681b      	ldr	r3, [r3, #0]
1004cbb8:	2101      	movs	r1, #1
1004cbba:	438a      	bics	r2, r1
1004cbbc:	609a      	str	r2, [r3, #8]
1004cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004cbc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cbc2:	6a3b      	ldr	r3, [r7, #32]
1004cbc4:	f383 8810 	msr	PRIMASK, r3
}
1004cbc8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004cbca:	687b      	ldr	r3, [r7, #4]
1004cbcc:	228c      	movs	r2, #140	@ 0x8c
1004cbce:	2120      	movs	r1, #32
1004cbd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004cbd2:	687b      	ldr	r3, [r7, #4]
1004cbd4:	2284      	movs	r2, #132	@ 0x84
1004cbd6:	2100      	movs	r1, #0
1004cbd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004cbda:	2303      	movs	r3, #3
1004cbdc:	e012      	b.n	1004cc04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004cbde:	687b      	ldr	r3, [r7, #4]
1004cbe0:	2288      	movs	r2, #136	@ 0x88
1004cbe2:	2120      	movs	r1, #32
1004cbe4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004cbe6:	687b      	ldr	r3, [r7, #4]
1004cbe8:	228c      	movs	r2, #140	@ 0x8c
1004cbea:	2120      	movs	r1, #32
1004cbec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004cbee:	687b      	ldr	r3, [r7, #4]
1004cbf0:	2200      	movs	r2, #0
1004cbf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004cbf4:	687b      	ldr	r3, [r7, #4]
1004cbf6:	2200      	movs	r2, #0
1004cbf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004cbfa:	687b      	ldr	r3, [r7, #4]
1004cbfc:	2284      	movs	r2, #132	@ 0x84
1004cbfe:	2100      	movs	r1, #0
1004cc00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004cc02:	2300      	movs	r3, #0
}
1004cc04:	0018      	movs	r0, r3
1004cc06:	46bd      	mov	sp, r7
1004cc08:	b010      	add	sp, #64	@ 0x40
1004cc0a:	bd80      	pop	{r7, pc}
1004cc0c:	01ffffff 	.word	0x01ffffff
1004cc10:	fffffedf 	.word	0xfffffedf

1004cc14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004cc14:	b580      	push	{r7, lr}
1004cc16:	b084      	sub	sp, #16
1004cc18:	af00      	add	r7, sp, #0
1004cc1a:	60f8      	str	r0, [r7, #12]
1004cc1c:	60b9      	str	r1, [r7, #8]
1004cc1e:	603b      	str	r3, [r7, #0]
1004cc20:	1dfb      	adds	r3, r7, #7
1004cc22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004cc24:	e051      	b.n	1004ccca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004cc26:	69bb      	ldr	r3, [r7, #24]
1004cc28:	3301      	adds	r3, #1
1004cc2a:	d04e      	beq.n	1004ccca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004cc2c:	f7f9 fbae 	bl	1004638c <HAL_GetTick>
1004cc30:	0002      	movs	r2, r0
1004cc32:	683b      	ldr	r3, [r7, #0]
1004cc34:	1ad3      	subs	r3, r2, r3
1004cc36:	69ba      	ldr	r2, [r7, #24]
1004cc38:	429a      	cmp	r2, r3
1004cc3a:	d302      	bcc.n	1004cc42 <UART_WaitOnFlagUntilTimeout+0x2e>
1004cc3c:	69bb      	ldr	r3, [r7, #24]
1004cc3e:	2b00      	cmp	r3, #0
1004cc40:	d101      	bne.n	1004cc46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004cc42:	2303      	movs	r3, #3
1004cc44:	e051      	b.n	1004ccea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004cc46:	68fb      	ldr	r3, [r7, #12]
1004cc48:	681b      	ldr	r3, [r3, #0]
1004cc4a:	681b      	ldr	r3, [r3, #0]
1004cc4c:	2204      	movs	r2, #4
1004cc4e:	4013      	ands	r3, r2
1004cc50:	d03b      	beq.n	1004ccca <UART_WaitOnFlagUntilTimeout+0xb6>
1004cc52:	68bb      	ldr	r3, [r7, #8]
1004cc54:	2b80      	cmp	r3, #128	@ 0x80
1004cc56:	d038      	beq.n	1004ccca <UART_WaitOnFlagUntilTimeout+0xb6>
1004cc58:	68bb      	ldr	r3, [r7, #8]
1004cc5a:	2b40      	cmp	r3, #64	@ 0x40
1004cc5c:	d035      	beq.n	1004ccca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004cc5e:	68fb      	ldr	r3, [r7, #12]
1004cc60:	681b      	ldr	r3, [r3, #0]
1004cc62:	69db      	ldr	r3, [r3, #28]
1004cc64:	2208      	movs	r2, #8
1004cc66:	4013      	ands	r3, r2
1004cc68:	2b08      	cmp	r3, #8
1004cc6a:	d111      	bne.n	1004cc90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004cc6c:	68fb      	ldr	r3, [r7, #12]
1004cc6e:	681b      	ldr	r3, [r3, #0]
1004cc70:	2208      	movs	r2, #8
1004cc72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004cc74:	68fb      	ldr	r3, [r7, #12]
1004cc76:	0018      	movs	r0, r3
1004cc78:	f000 f83c 	bl	1004ccf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004cc7c:	68fb      	ldr	r3, [r7, #12]
1004cc7e:	2290      	movs	r2, #144	@ 0x90
1004cc80:	2108      	movs	r1, #8
1004cc82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004cc84:	68fb      	ldr	r3, [r7, #12]
1004cc86:	2284      	movs	r2, #132	@ 0x84
1004cc88:	2100      	movs	r1, #0
1004cc8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004cc8c:	2301      	movs	r3, #1
1004cc8e:	e02c      	b.n	1004ccea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004cc90:	68fb      	ldr	r3, [r7, #12]
1004cc92:	681b      	ldr	r3, [r3, #0]
1004cc94:	69da      	ldr	r2, [r3, #28]
1004cc96:	2380      	movs	r3, #128	@ 0x80
1004cc98:	011b      	lsls	r3, r3, #4
1004cc9a:	401a      	ands	r2, r3
1004cc9c:	2380      	movs	r3, #128	@ 0x80
1004cc9e:	011b      	lsls	r3, r3, #4
1004cca0:	429a      	cmp	r2, r3
1004cca2:	d112      	bne.n	1004ccca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004cca4:	68fb      	ldr	r3, [r7, #12]
1004cca6:	681b      	ldr	r3, [r3, #0]
1004cca8:	2280      	movs	r2, #128	@ 0x80
1004ccaa:	0112      	lsls	r2, r2, #4
1004ccac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004ccae:	68fb      	ldr	r3, [r7, #12]
1004ccb0:	0018      	movs	r0, r3
1004ccb2:	f000 f81f 	bl	1004ccf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004ccb6:	68fb      	ldr	r3, [r7, #12]
1004ccb8:	2290      	movs	r2, #144	@ 0x90
1004ccba:	2120      	movs	r1, #32
1004ccbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004ccbe:	68fb      	ldr	r3, [r7, #12]
1004ccc0:	2284      	movs	r2, #132	@ 0x84
1004ccc2:	2100      	movs	r1, #0
1004ccc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004ccc6:	2303      	movs	r3, #3
1004ccc8:	e00f      	b.n	1004ccea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004ccca:	68fb      	ldr	r3, [r7, #12]
1004cccc:	681b      	ldr	r3, [r3, #0]
1004ccce:	69db      	ldr	r3, [r3, #28]
1004ccd0:	68ba      	ldr	r2, [r7, #8]
1004ccd2:	4013      	ands	r3, r2
1004ccd4:	68ba      	ldr	r2, [r7, #8]
1004ccd6:	1ad3      	subs	r3, r2, r3
1004ccd8:	425a      	negs	r2, r3
1004ccda:	4153      	adcs	r3, r2
1004ccdc:	b2db      	uxtb	r3, r3
1004ccde:	001a      	movs	r2, r3
1004cce0:	1dfb      	adds	r3, r7, #7
1004cce2:	781b      	ldrb	r3, [r3, #0]
1004cce4:	429a      	cmp	r2, r3
1004cce6:	d09e      	beq.n	1004cc26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004cce8:	2300      	movs	r3, #0
}
1004ccea:	0018      	movs	r0, r3
1004ccec:	46bd      	mov	sp, r7
1004ccee:	b004      	add	sp, #16
1004ccf0:	bd80      	pop	{r7, pc}
	...

1004ccf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004ccf4:	b580      	push	{r7, lr}
1004ccf6:	b08e      	sub	sp, #56	@ 0x38
1004ccf8:	af00      	add	r7, sp, #0
1004ccfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ccfc:	f3ef 8310 	mrs	r3, PRIMASK
1004cd00:	617b      	str	r3, [r7, #20]
  return(result);
1004cd02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004cd04:	637b      	str	r3, [r7, #52]	@ 0x34
1004cd06:	2301      	movs	r3, #1
1004cd08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cd0a:	69bb      	ldr	r3, [r7, #24]
1004cd0c:	f383 8810 	msr	PRIMASK, r3
}
1004cd10:	46c0      	nop			@ (mov r8, r8)
1004cd12:	687b      	ldr	r3, [r7, #4]
1004cd14:	681b      	ldr	r3, [r3, #0]
1004cd16:	681a      	ldr	r2, [r3, #0]
1004cd18:	687b      	ldr	r3, [r7, #4]
1004cd1a:	681b      	ldr	r3, [r3, #0]
1004cd1c:	4926      	ldr	r1, [pc, #152]	@ (1004cdb8 <UART_EndRxTransfer+0xc4>)
1004cd1e:	400a      	ands	r2, r1
1004cd20:	601a      	str	r2, [r3, #0]
1004cd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004cd24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cd26:	69fb      	ldr	r3, [r7, #28]
1004cd28:	f383 8810 	msr	PRIMASK, r3
}
1004cd2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cd2e:	f3ef 8310 	mrs	r3, PRIMASK
1004cd32:	623b      	str	r3, [r7, #32]
  return(result);
1004cd34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004cd36:	633b      	str	r3, [r7, #48]	@ 0x30
1004cd38:	2301      	movs	r3, #1
1004cd3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cd3e:	f383 8810 	msr	PRIMASK, r3
}
1004cd42:	46c0      	nop			@ (mov r8, r8)
1004cd44:	687b      	ldr	r3, [r7, #4]
1004cd46:	681b      	ldr	r3, [r3, #0]
1004cd48:	689a      	ldr	r2, [r3, #8]
1004cd4a:	687b      	ldr	r3, [r7, #4]
1004cd4c:	681b      	ldr	r3, [r3, #0]
1004cd4e:	491b      	ldr	r1, [pc, #108]	@ (1004cdbc <UART_EndRxTransfer+0xc8>)
1004cd50:	400a      	ands	r2, r1
1004cd52:	609a      	str	r2, [r3, #8]
1004cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004cd56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004cd5a:	f383 8810 	msr	PRIMASK, r3
}
1004cd5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004cd60:	687b      	ldr	r3, [r7, #4]
1004cd62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004cd64:	2b01      	cmp	r3, #1
1004cd66:	d118      	bne.n	1004cd9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cd68:	f3ef 8310 	mrs	r3, PRIMASK
1004cd6c:	60bb      	str	r3, [r7, #8]
  return(result);
1004cd6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004cd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004cd72:	2301      	movs	r3, #1
1004cd74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cd76:	68fb      	ldr	r3, [r7, #12]
1004cd78:	f383 8810 	msr	PRIMASK, r3
}
1004cd7c:	46c0      	nop			@ (mov r8, r8)
1004cd7e:	687b      	ldr	r3, [r7, #4]
1004cd80:	681b      	ldr	r3, [r3, #0]
1004cd82:	681a      	ldr	r2, [r3, #0]
1004cd84:	687b      	ldr	r3, [r7, #4]
1004cd86:	681b      	ldr	r3, [r3, #0]
1004cd88:	2110      	movs	r1, #16
1004cd8a:	438a      	bics	r2, r1
1004cd8c:	601a      	str	r2, [r3, #0]
1004cd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004cd90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cd92:	693b      	ldr	r3, [r7, #16]
1004cd94:	f383 8810 	msr	PRIMASK, r3
}
1004cd98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004cd9a:	687b      	ldr	r3, [r7, #4]
1004cd9c:	228c      	movs	r2, #140	@ 0x8c
1004cd9e:	2120      	movs	r1, #32
1004cda0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004cda2:	687b      	ldr	r3, [r7, #4]
1004cda4:	2200      	movs	r2, #0
1004cda6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004cda8:	687b      	ldr	r3, [r7, #4]
1004cdaa:	2200      	movs	r2, #0
1004cdac:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004cdae:	46c0      	nop			@ (mov r8, r8)
1004cdb0:	46bd      	mov	sp, r7
1004cdb2:	b00e      	add	sp, #56	@ 0x38
1004cdb4:	bd80      	pop	{r7, pc}
1004cdb6:	46c0      	nop			@ (mov r8, r8)
1004cdb8:	fffffedf 	.word	0xfffffedf
1004cdbc:	effffffe 	.word	0xeffffffe

1004cdc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
1004cdc0:	b580      	push	{r7, lr}
1004cdc2:	b082      	sub	sp, #8
1004cdc4:	af00      	add	r7, sp, #0
1004cdc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004cdc8:	46c0      	nop			@ (mov r8, r8)
1004cdca:	46bd      	mov	sp, r7
1004cdcc:	b002      	add	sp, #8
1004cdce:	bd80      	pop	{r7, pc}

1004cdd0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
1004cdd0:	b580      	push	{r7, lr}
1004cdd2:	b082      	sub	sp, #8
1004cdd4:	af00      	add	r7, sp, #0
1004cdd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004cdd8:	46c0      	nop			@ (mov r8, r8)
1004cdda:	46bd      	mov	sp, r7
1004cddc:	b002      	add	sp, #8
1004cdde:	bd80      	pop	{r7, pc}

1004cde0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
1004cde0:	b580      	push	{r7, lr}
1004cde2:	b082      	sub	sp, #8
1004cde4:	af00      	add	r7, sp, #0
1004cde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004cde8:	46c0      	nop			@ (mov r8, r8)
1004cdea:	46bd      	mov	sp, r7
1004cdec:	b002      	add	sp, #8
1004cdee:	bd80      	pop	{r7, pc}

1004cdf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004cdf0:	b580      	push	{r7, lr}
1004cdf2:	b084      	sub	sp, #16
1004cdf4:	af00      	add	r7, sp, #0
1004cdf6:	6078      	str	r0, [r7, #4]
1004cdf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004cdfa:	687b      	ldr	r3, [r7, #4]
1004cdfc:	2284      	movs	r2, #132	@ 0x84
1004cdfe:	5c9b      	ldrb	r3, [r3, r2]
1004ce00:	2b01      	cmp	r3, #1
1004ce02:	d101      	bne.n	1004ce08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004ce04:	2302      	movs	r3, #2
1004ce06:	e02e      	b.n	1004ce66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004ce08:	687b      	ldr	r3, [r7, #4]
1004ce0a:	2284      	movs	r2, #132	@ 0x84
1004ce0c:	2101      	movs	r1, #1
1004ce0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004ce10:	687b      	ldr	r3, [r7, #4]
1004ce12:	2288      	movs	r2, #136	@ 0x88
1004ce14:	2124      	movs	r1, #36	@ 0x24
1004ce16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004ce18:	687b      	ldr	r3, [r7, #4]
1004ce1a:	681b      	ldr	r3, [r3, #0]
1004ce1c:	681b      	ldr	r3, [r3, #0]
1004ce1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004ce20:	687b      	ldr	r3, [r7, #4]
1004ce22:	681b      	ldr	r3, [r3, #0]
1004ce24:	681a      	ldr	r2, [r3, #0]
1004ce26:	687b      	ldr	r3, [r7, #4]
1004ce28:	681b      	ldr	r3, [r3, #0]
1004ce2a:	2101      	movs	r1, #1
1004ce2c:	438a      	bics	r2, r1
1004ce2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004ce30:	687b      	ldr	r3, [r7, #4]
1004ce32:	681b      	ldr	r3, [r3, #0]
1004ce34:	689b      	ldr	r3, [r3, #8]
1004ce36:	00db      	lsls	r3, r3, #3
1004ce38:	08d9      	lsrs	r1, r3, #3
1004ce3a:	687b      	ldr	r3, [r7, #4]
1004ce3c:	681b      	ldr	r3, [r3, #0]
1004ce3e:	683a      	ldr	r2, [r7, #0]
1004ce40:	430a      	orrs	r2, r1
1004ce42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004ce44:	687b      	ldr	r3, [r7, #4]
1004ce46:	0018      	movs	r0, r3
1004ce48:	f000 f854 	bl	1004cef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004ce4c:	687b      	ldr	r3, [r7, #4]
1004ce4e:	681b      	ldr	r3, [r3, #0]
1004ce50:	68fa      	ldr	r2, [r7, #12]
1004ce52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004ce54:	687b      	ldr	r3, [r7, #4]
1004ce56:	2288      	movs	r2, #136	@ 0x88
1004ce58:	2120      	movs	r1, #32
1004ce5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004ce5c:	687b      	ldr	r3, [r7, #4]
1004ce5e:	2284      	movs	r2, #132	@ 0x84
1004ce60:	2100      	movs	r1, #0
1004ce62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004ce64:	2300      	movs	r3, #0
}
1004ce66:	0018      	movs	r0, r3
1004ce68:	46bd      	mov	sp, r7
1004ce6a:	b004      	add	sp, #16
1004ce6c:	bd80      	pop	{r7, pc}
	...

1004ce70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004ce70:	b580      	push	{r7, lr}
1004ce72:	b084      	sub	sp, #16
1004ce74:	af00      	add	r7, sp, #0
1004ce76:	6078      	str	r0, [r7, #4]
1004ce78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004ce7a:	687b      	ldr	r3, [r7, #4]
1004ce7c:	2284      	movs	r2, #132	@ 0x84
1004ce7e:	5c9b      	ldrb	r3, [r3, r2]
1004ce80:	2b01      	cmp	r3, #1
1004ce82:	d101      	bne.n	1004ce88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004ce84:	2302      	movs	r3, #2
1004ce86:	e02f      	b.n	1004cee8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004ce88:	687b      	ldr	r3, [r7, #4]
1004ce8a:	2284      	movs	r2, #132	@ 0x84
1004ce8c:	2101      	movs	r1, #1
1004ce8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004ce90:	687b      	ldr	r3, [r7, #4]
1004ce92:	2288      	movs	r2, #136	@ 0x88
1004ce94:	2124      	movs	r1, #36	@ 0x24
1004ce96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004ce98:	687b      	ldr	r3, [r7, #4]
1004ce9a:	681b      	ldr	r3, [r3, #0]
1004ce9c:	681b      	ldr	r3, [r3, #0]
1004ce9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004cea0:	687b      	ldr	r3, [r7, #4]
1004cea2:	681b      	ldr	r3, [r3, #0]
1004cea4:	681a      	ldr	r2, [r3, #0]
1004cea6:	687b      	ldr	r3, [r7, #4]
1004cea8:	681b      	ldr	r3, [r3, #0]
1004ceaa:	2101      	movs	r1, #1
1004ceac:	438a      	bics	r2, r1
1004ceae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004ceb0:	687b      	ldr	r3, [r7, #4]
1004ceb2:	681b      	ldr	r3, [r3, #0]
1004ceb4:	689b      	ldr	r3, [r3, #8]
1004ceb6:	4a0e      	ldr	r2, [pc, #56]	@ (1004cef0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004ceb8:	4013      	ands	r3, r2
1004ceba:	0019      	movs	r1, r3
1004cebc:	687b      	ldr	r3, [r7, #4]
1004cebe:	681b      	ldr	r3, [r3, #0]
1004cec0:	683a      	ldr	r2, [r7, #0]
1004cec2:	430a      	orrs	r2, r1
1004cec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004cec6:	687b      	ldr	r3, [r7, #4]
1004cec8:	0018      	movs	r0, r3
1004ceca:	f000 f813 	bl	1004cef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004cece:	687b      	ldr	r3, [r7, #4]
1004ced0:	681b      	ldr	r3, [r3, #0]
1004ced2:	68fa      	ldr	r2, [r7, #12]
1004ced4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004ced6:	687b      	ldr	r3, [r7, #4]
1004ced8:	2288      	movs	r2, #136	@ 0x88
1004ceda:	2120      	movs	r1, #32
1004cedc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004cede:	687b      	ldr	r3, [r7, #4]
1004cee0:	2284      	movs	r2, #132	@ 0x84
1004cee2:	2100      	movs	r1, #0
1004cee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004cee6:	2300      	movs	r3, #0
}
1004cee8:	0018      	movs	r0, r3
1004ceea:	46bd      	mov	sp, r7
1004ceec:	b004      	add	sp, #16
1004ceee:	bd80      	pop	{r7, pc}
1004cef0:	f1ffffff 	.word	0xf1ffffff

1004cef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004cef4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cef6:	b085      	sub	sp, #20
1004cef8:	af00      	add	r7, sp, #0
1004cefa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004cefc:	687b      	ldr	r3, [r7, #4]
1004cefe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004cf00:	2b00      	cmp	r3, #0
1004cf02:	d108      	bne.n	1004cf16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004cf04:	687b      	ldr	r3, [r7, #4]
1004cf06:	226a      	movs	r2, #106	@ 0x6a
1004cf08:	2101      	movs	r1, #1
1004cf0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004cf0c:	687b      	ldr	r3, [r7, #4]
1004cf0e:	2268      	movs	r2, #104	@ 0x68
1004cf10:	2101      	movs	r1, #1
1004cf12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004cf14:	e043      	b.n	1004cf9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004cf16:	260f      	movs	r6, #15
1004cf18:	19bb      	adds	r3, r7, r6
1004cf1a:	2208      	movs	r2, #8
1004cf1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004cf1e:	200e      	movs	r0, #14
1004cf20:	183b      	adds	r3, r7, r0
1004cf22:	2208      	movs	r2, #8
1004cf24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004cf26:	687b      	ldr	r3, [r7, #4]
1004cf28:	681b      	ldr	r3, [r3, #0]
1004cf2a:	689b      	ldr	r3, [r3, #8]
1004cf2c:	0e5b      	lsrs	r3, r3, #25
1004cf2e:	b2da      	uxtb	r2, r3
1004cf30:	240d      	movs	r4, #13
1004cf32:	193b      	adds	r3, r7, r4
1004cf34:	2107      	movs	r1, #7
1004cf36:	400a      	ands	r2, r1
1004cf38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004cf3a:	687b      	ldr	r3, [r7, #4]
1004cf3c:	681b      	ldr	r3, [r3, #0]
1004cf3e:	689b      	ldr	r3, [r3, #8]
1004cf40:	0f5b      	lsrs	r3, r3, #29
1004cf42:	b2da      	uxtb	r2, r3
1004cf44:	250c      	movs	r5, #12
1004cf46:	197b      	adds	r3, r7, r5
1004cf48:	2107      	movs	r1, #7
1004cf4a:	400a      	ands	r2, r1
1004cf4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004cf4e:	183b      	adds	r3, r7, r0
1004cf50:	781b      	ldrb	r3, [r3, #0]
1004cf52:	197a      	adds	r2, r7, r5
1004cf54:	7812      	ldrb	r2, [r2, #0]
1004cf56:	4914      	ldr	r1, [pc, #80]	@ (1004cfa8 <UARTEx_SetNbDataToProcess+0xb4>)
1004cf58:	5c8a      	ldrb	r2, [r1, r2]
1004cf5a:	435a      	muls	r2, r3
1004cf5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004cf5e:	197b      	adds	r3, r7, r5
1004cf60:	781b      	ldrb	r3, [r3, #0]
1004cf62:	4a12      	ldr	r2, [pc, #72]	@ (1004cfac <UARTEx_SetNbDataToProcess+0xb8>)
1004cf64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004cf66:	0019      	movs	r1, r3
1004cf68:	f7f3 f9f4 	bl	10040354 <__divsi3>
1004cf6c:	0003      	movs	r3, r0
1004cf6e:	b299      	uxth	r1, r3
1004cf70:	687b      	ldr	r3, [r7, #4]
1004cf72:	226a      	movs	r2, #106	@ 0x6a
1004cf74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004cf76:	19bb      	adds	r3, r7, r6
1004cf78:	781b      	ldrb	r3, [r3, #0]
1004cf7a:	193a      	adds	r2, r7, r4
1004cf7c:	7812      	ldrb	r2, [r2, #0]
1004cf7e:	490a      	ldr	r1, [pc, #40]	@ (1004cfa8 <UARTEx_SetNbDataToProcess+0xb4>)
1004cf80:	5c8a      	ldrb	r2, [r1, r2]
1004cf82:	435a      	muls	r2, r3
1004cf84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004cf86:	193b      	adds	r3, r7, r4
1004cf88:	781b      	ldrb	r3, [r3, #0]
1004cf8a:	4a08      	ldr	r2, [pc, #32]	@ (1004cfac <UARTEx_SetNbDataToProcess+0xb8>)
1004cf8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004cf8e:	0019      	movs	r1, r3
1004cf90:	f7f3 f9e0 	bl	10040354 <__divsi3>
1004cf94:	0003      	movs	r3, r0
1004cf96:	b299      	uxth	r1, r3
1004cf98:	687b      	ldr	r3, [r7, #4]
1004cf9a:	2268      	movs	r2, #104	@ 0x68
1004cf9c:	5299      	strh	r1, [r3, r2]
}
1004cf9e:	46c0      	nop			@ (mov r8, r8)
1004cfa0:	46bd      	mov	sp, r7
1004cfa2:	b005      	add	sp, #20
1004cfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004cfa6:	46c0      	nop			@ (mov r8, r8)
1004cfa8:	10067de8 	.word	0x10067de8
1004cfac:	10067df0 	.word	0x10067df0

1004cfb0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
1004cfb0:	b580      	push	{r7, lr}
1004cfb2:	b088      	sub	sp, #32
1004cfb4:	af00      	add	r7, sp, #0
1004cfb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
1004cfb8:	687b      	ldr	r3, [r7, #4]
1004cfba:	681b      	ldr	r3, [r3, #0]
1004cfbc:	69db      	ldr	r3, [r3, #28]
1004cfbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
1004cfc0:	687b      	ldr	r3, [r7, #4]
1004cfc2:	681b      	ldr	r3, [r3, #0]
1004cfc4:	681b      	ldr	r3, [r3, #0]
1004cfc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
1004cfc8:	687b      	ldr	r3, [r7, #4]
1004cfca:	681b      	ldr	r3, [r3, #0]
1004cfcc:	689b      	ldr	r3, [r3, #8]
1004cfce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
1004cfd0:	69fb      	ldr	r3, [r7, #28]
1004cfd2:	4ab3      	ldr	r2, [pc, #716]	@ (1004d2a0 <HAL_USART_IRQHandler+0x2f0>)
1004cfd4:	4013      	ands	r3, r2
1004cfd6:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
1004cfd8:	693b      	ldr	r3, [r7, #16]
1004cfda:	2b00      	cmp	r3, #0
1004cfdc:	d117      	bne.n	1004d00e <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004cfde:	69fb      	ldr	r3, [r7, #28]
1004cfe0:	2220      	movs	r2, #32
1004cfe2:	4013      	ands	r3, r2
1004cfe4:	d013      	beq.n	1004d00e <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004cfe6:	69bb      	ldr	r3, [r7, #24]
1004cfe8:	2220      	movs	r2, #32
1004cfea:	4013      	ands	r3, r2
1004cfec:	d104      	bne.n	1004cff8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004cfee:	697a      	ldr	r2, [r7, #20]
1004cff0:	2380      	movs	r3, #128	@ 0x80
1004cff2:	055b      	lsls	r3, r3, #21
1004cff4:	4013      	ands	r3, r2
1004cff6:	d00a      	beq.n	1004d00e <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
1004cff8:	687b      	ldr	r3, [r7, #4]
1004cffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004cffc:	2b00      	cmp	r3, #0
1004cffe:	d100      	bne.n	1004d002 <HAL_USART_IRQHandler+0x52>
1004d000:	e14a      	b.n	1004d298 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
1004d002:	687b      	ldr	r3, [r7, #4]
1004d004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004d006:	687a      	ldr	r2, [r7, #4]
1004d008:	0010      	movs	r0, r2
1004d00a:	4798      	blx	r3
      }
      return;
1004d00c:	e144      	b.n	1004d298 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004d00e:	693b      	ldr	r3, [r7, #16]
1004d010:	2b00      	cmp	r3, #0
1004d012:	d100      	bne.n	1004d016 <HAL_USART_IRQHandler+0x66>
1004d014:	e100      	b.n	1004d218 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004d016:	697b      	ldr	r3, [r7, #20]
1004d018:	4aa2      	ldr	r2, [pc, #648]	@ (1004d2a4 <HAL_USART_IRQHandler+0x2f4>)
1004d01a:	4013      	ands	r3, r2
1004d01c:	d105      	bne.n	1004d02a <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
1004d01e:	69ba      	ldr	r2, [r7, #24]
1004d020:	2390      	movs	r3, #144	@ 0x90
1004d022:	005b      	lsls	r3, r3, #1
1004d024:	4013      	ands	r3, r2
1004d026:	d100      	bne.n	1004d02a <HAL_USART_IRQHandler+0x7a>
1004d028:	e0f6      	b.n	1004d218 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004d02a:	69fb      	ldr	r3, [r7, #28]
1004d02c:	2201      	movs	r2, #1
1004d02e:	4013      	ands	r3, r2
1004d030:	d00e      	beq.n	1004d050 <HAL_USART_IRQHandler+0xa0>
1004d032:	69ba      	ldr	r2, [r7, #24]
1004d034:	2380      	movs	r3, #128	@ 0x80
1004d036:	005b      	lsls	r3, r3, #1
1004d038:	4013      	ands	r3, r2
1004d03a:	d009      	beq.n	1004d050 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
1004d03c:	687b      	ldr	r3, [r7, #4]
1004d03e:	681b      	ldr	r3, [r3, #0]
1004d040:	2201      	movs	r2, #1
1004d042:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
1004d044:	687b      	ldr	r3, [r7, #4]
1004d046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d048:	2201      	movs	r2, #1
1004d04a:	431a      	orrs	r2, r3
1004d04c:	687b      	ldr	r3, [r7, #4]
1004d04e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004d050:	69fb      	ldr	r3, [r7, #28]
1004d052:	2202      	movs	r2, #2
1004d054:	4013      	ands	r3, r2
1004d056:	d00d      	beq.n	1004d074 <HAL_USART_IRQHandler+0xc4>
1004d058:	697b      	ldr	r3, [r7, #20]
1004d05a:	2201      	movs	r2, #1
1004d05c:	4013      	ands	r3, r2
1004d05e:	d009      	beq.n	1004d074 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
1004d060:	687b      	ldr	r3, [r7, #4]
1004d062:	681b      	ldr	r3, [r3, #0]
1004d064:	2202      	movs	r2, #2
1004d066:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
1004d068:	687b      	ldr	r3, [r7, #4]
1004d06a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d06c:	2204      	movs	r2, #4
1004d06e:	431a      	orrs	r2, r3
1004d070:	687b      	ldr	r3, [r7, #4]
1004d072:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004d074:	69fb      	ldr	r3, [r7, #28]
1004d076:	2204      	movs	r2, #4
1004d078:	4013      	ands	r3, r2
1004d07a:	d00d      	beq.n	1004d098 <HAL_USART_IRQHandler+0xe8>
1004d07c:	697b      	ldr	r3, [r7, #20]
1004d07e:	2201      	movs	r2, #1
1004d080:	4013      	ands	r3, r2
1004d082:	d009      	beq.n	1004d098 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
1004d084:	687b      	ldr	r3, [r7, #4]
1004d086:	681b      	ldr	r3, [r3, #0]
1004d088:	2204      	movs	r2, #4
1004d08a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
1004d08c:	687b      	ldr	r3, [r7, #4]
1004d08e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d090:	2202      	movs	r2, #2
1004d092:	431a      	orrs	r2, r3
1004d094:	687b      	ldr	r3, [r7, #4]
1004d096:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004d098:	69fb      	ldr	r3, [r7, #28]
1004d09a:	2208      	movs	r2, #8
1004d09c:	4013      	ands	r3, r2
1004d09e:	d011      	beq.n	1004d0c4 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004d0a0:	69bb      	ldr	r3, [r7, #24]
1004d0a2:	2220      	movs	r2, #32
1004d0a4:	4013      	ands	r3, r2
1004d0a6:	d103      	bne.n	1004d0b0 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004d0a8:	697b      	ldr	r3, [r7, #20]
1004d0aa:	4a7e      	ldr	r2, [pc, #504]	@ (1004d2a4 <HAL_USART_IRQHandler+0x2f4>)
1004d0ac:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004d0ae:	d009      	beq.n	1004d0c4 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1004d0b0:	687b      	ldr	r3, [r7, #4]
1004d0b2:	681b      	ldr	r3, [r3, #0]
1004d0b4:	2208      	movs	r2, #8
1004d0b6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
1004d0b8:	687b      	ldr	r3, [r7, #4]
1004d0ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d0bc:	2208      	movs	r2, #8
1004d0be:	431a      	orrs	r2, r3
1004d0c0:	687b      	ldr	r3, [r7, #4]
1004d0c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004d0c4:	69fa      	ldr	r2, [r7, #28]
1004d0c6:	2380      	movs	r3, #128	@ 0x80
1004d0c8:	011b      	lsls	r3, r3, #4
1004d0ca:	4013      	ands	r3, r2
1004d0cc:	d00f      	beq.n	1004d0ee <HAL_USART_IRQHandler+0x13e>
1004d0ce:	69ba      	ldr	r2, [r7, #24]
1004d0d0:	2380      	movs	r3, #128	@ 0x80
1004d0d2:	04db      	lsls	r3, r3, #19
1004d0d4:	4013      	ands	r3, r2
1004d0d6:	d00a      	beq.n	1004d0ee <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
1004d0d8:	687b      	ldr	r3, [r7, #4]
1004d0da:	681b      	ldr	r3, [r3, #0]
1004d0dc:	2280      	movs	r2, #128	@ 0x80
1004d0de:	0112      	lsls	r2, r2, #4
1004d0e0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
1004d0e2:	687b      	ldr	r3, [r7, #4]
1004d0e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d0e6:	2280      	movs	r2, #128	@ 0x80
1004d0e8:	431a      	orrs	r2, r3
1004d0ea:	687b      	ldr	r3, [r7, #4]
1004d0ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004d0ee:	69fa      	ldr	r2, [r7, #28]
1004d0f0:	2380      	movs	r3, #128	@ 0x80
1004d0f2:	019b      	lsls	r3, r3, #6
1004d0f4:	4013      	ands	r3, r2
1004d0f6:	d01a      	beq.n	1004d12e <HAL_USART_IRQHandler+0x17e>
1004d0f8:	697b      	ldr	r3, [r7, #20]
1004d0fa:	2201      	movs	r2, #1
1004d0fc:	4013      	ands	r3, r2
1004d0fe:	d016      	beq.n	1004d12e <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
1004d100:	687b      	ldr	r3, [r7, #4]
1004d102:	2259      	movs	r2, #89	@ 0x59
1004d104:	5c9b      	ldrb	r3, [r3, r2]
1004d106:	b2db      	uxtb	r3, r3
1004d108:	2b22      	cmp	r3, #34	@ 0x22
1004d10a:	d105      	bne.n	1004d118 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004d10c:	687b      	ldr	r3, [r7, #4]
1004d10e:	681b      	ldr	r3, [r3, #0]
1004d110:	2280      	movs	r2, #128	@ 0x80
1004d112:	0192      	lsls	r2, r2, #6
1004d114:	621a      	str	r2, [r3, #32]
        return;
1004d116:	e0ca      	b.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004d118:	687b      	ldr	r3, [r7, #4]
1004d11a:	681b      	ldr	r3, [r3, #0]
1004d11c:	2280      	movs	r2, #128	@ 0x80
1004d11e:	0192      	lsls	r2, r2, #6
1004d120:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
1004d122:	687b      	ldr	r3, [r7, #4]
1004d124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d126:	2220      	movs	r2, #32
1004d128:	431a      	orrs	r2, r3
1004d12a:	687b      	ldr	r3, [r7, #4]
1004d12c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
1004d12e:	687b      	ldr	r3, [r7, #4]
1004d130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d132:	2b00      	cmp	r3, #0
1004d134:	d100      	bne.n	1004d138 <HAL_USART_IRQHandler+0x188>
1004d136:	e0b1      	b.n	1004d29c <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004d138:	69fb      	ldr	r3, [r7, #28]
1004d13a:	2220      	movs	r2, #32
1004d13c:	4013      	ands	r3, r2
1004d13e:	d011      	beq.n	1004d164 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004d140:	69bb      	ldr	r3, [r7, #24]
1004d142:	2220      	movs	r2, #32
1004d144:	4013      	ands	r3, r2
1004d146:	d104      	bne.n	1004d152 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004d148:	697a      	ldr	r2, [r7, #20]
1004d14a:	2380      	movs	r3, #128	@ 0x80
1004d14c:	055b      	lsls	r3, r3, #21
1004d14e:	4013      	ands	r3, r2
1004d150:	d008      	beq.n	1004d164 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
1004d152:	687b      	ldr	r3, [r7, #4]
1004d154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004d156:	2b00      	cmp	r3, #0
1004d158:	d004      	beq.n	1004d164 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
1004d15a:	687b      	ldr	r3, [r7, #4]
1004d15c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004d15e:	687a      	ldr	r2, [r7, #4]
1004d160:	0010      	movs	r0, r2
1004d162:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
1004d164:	687b      	ldr	r3, [r7, #4]
1004d166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004d168:	2208      	movs	r2, #8
1004d16a:	4013      	ands	r3, r2
1004d16c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
1004d16e:	687b      	ldr	r3, [r7, #4]
1004d170:	681b      	ldr	r3, [r3, #0]
1004d172:	689b      	ldr	r3, [r3, #8]
1004d174:	2240      	movs	r2, #64	@ 0x40
1004d176:	4013      	ands	r3, r2
1004d178:	2b40      	cmp	r3, #64	@ 0x40
1004d17a:	d002      	beq.n	1004d182 <HAL_USART_IRQHandler+0x1d2>
1004d17c:	68fb      	ldr	r3, [r7, #12]
1004d17e:	2b00      	cmp	r3, #0
1004d180:	d040      	beq.n	1004d204 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
1004d182:	687b      	ldr	r3, [r7, #4]
1004d184:	0018      	movs	r0, r3
1004d186:	f000 f8ad 	bl	1004d2e4 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004d18a:	687b      	ldr	r3, [r7, #4]
1004d18c:	681b      	ldr	r3, [r3, #0]
1004d18e:	689b      	ldr	r3, [r3, #8]
1004d190:	2240      	movs	r2, #64	@ 0x40
1004d192:	4013      	ands	r3, r2
1004d194:	2b40      	cmp	r3, #64	@ 0x40
1004d196:	d130      	bne.n	1004d1fa <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
1004d198:	687b      	ldr	r3, [r7, #4]
1004d19a:	681b      	ldr	r3, [r3, #0]
1004d19c:	689a      	ldr	r2, [r3, #8]
1004d19e:	687b      	ldr	r3, [r7, #4]
1004d1a0:	681b      	ldr	r3, [r3, #0]
1004d1a2:	2140      	movs	r1, #64	@ 0x40
1004d1a4:	438a      	bics	r2, r1
1004d1a6:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
1004d1a8:	687b      	ldr	r3, [r7, #4]
1004d1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004d1ac:	2b00      	cmp	r3, #0
1004d1ae:	d008      	beq.n	1004d1c2 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
1004d1b0:	687b      	ldr	r3, [r7, #4]
1004d1b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004d1b4:	2200      	movs	r2, #0
1004d1b6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
1004d1b8:	687b      	ldr	r3, [r7, #4]
1004d1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004d1bc:	0018      	movs	r0, r3
1004d1be:	f7f9 f9fb 	bl	100465b8 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
1004d1c2:	687b      	ldr	r3, [r7, #4]
1004d1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004d1c6:	2b00      	cmp	r3, #0
1004d1c8:	d012      	beq.n	1004d1f0 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1004d1ca:	687b      	ldr	r3, [r7, #4]
1004d1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004d1ce:	4a36      	ldr	r2, [pc, #216]	@ (1004d2a8 <HAL_USART_IRQHandler+0x2f8>)
1004d1d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1004d1d2:	687b      	ldr	r3, [r7, #4]
1004d1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004d1d6:	0018      	movs	r0, r3
1004d1d8:	f7f9 f9ee 	bl	100465b8 <HAL_DMA_Abort_IT>
1004d1dc:	1e03      	subs	r3, r0, #0
1004d1de:	d019      	beq.n	1004d214 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
1004d1e0:	687b      	ldr	r3, [r7, #4]
1004d1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004d1e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004d1e6:	687b      	ldr	r3, [r7, #4]
1004d1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004d1ea:	0018      	movs	r0, r3
1004d1ec:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004d1ee:	e011      	b.n	1004d214 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
1004d1f0:	687b      	ldr	r3, [r7, #4]
1004d1f2:	0018      	movs	r0, r3
1004d1f4:	f000 f86e 	bl	1004d2d4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004d1f8:	e00c      	b.n	1004d214 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
1004d1fa:	687b      	ldr	r3, [r7, #4]
1004d1fc:	0018      	movs	r0, r3
1004d1fe:	f000 f869 	bl	1004d2d4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004d202:	e007      	b.n	1004d214 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
1004d204:	687b      	ldr	r3, [r7, #4]
1004d206:	0018      	movs	r0, r3
1004d208:	f000 f864 	bl	1004d2d4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
1004d20c:	687b      	ldr	r3, [r7, #4]
1004d20e:	2200      	movs	r2, #0
1004d210:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
1004d212:	e043      	b.n	1004d29c <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004d214:	46c0      	nop			@ (mov r8, r8)
    return;
1004d216:	e041      	b.n	1004d29c <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004d218:	69fb      	ldr	r3, [r7, #28]
1004d21a:	2280      	movs	r2, #128	@ 0x80
1004d21c:	4013      	ands	r3, r2
1004d21e:	d012      	beq.n	1004d246 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004d220:	69bb      	ldr	r3, [r7, #24]
1004d222:	2280      	movs	r2, #128	@ 0x80
1004d224:	4013      	ands	r3, r2
1004d226:	d104      	bne.n	1004d232 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004d228:	697a      	ldr	r2, [r7, #20]
1004d22a:	2380      	movs	r3, #128	@ 0x80
1004d22c:	041b      	lsls	r3, r3, #16
1004d22e:	4013      	ands	r3, r2
1004d230:	d009      	beq.n	1004d246 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
1004d232:	687b      	ldr	r3, [r7, #4]
1004d234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004d236:	2b00      	cmp	r3, #0
1004d238:	d038      	beq.n	1004d2ac <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004d23a:	687b      	ldr	r3, [r7, #4]
1004d23c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004d23e:	687a      	ldr	r2, [r7, #4]
1004d240:	0010      	movs	r0, r2
1004d242:	4798      	blx	r3
    }
    return;
1004d244:	e032      	b.n	1004d2ac <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004d246:	69fb      	ldr	r3, [r7, #28]
1004d248:	2240      	movs	r2, #64	@ 0x40
1004d24a:	4013      	ands	r3, r2
1004d24c:	d008      	beq.n	1004d260 <HAL_USART_IRQHandler+0x2b0>
1004d24e:	69bb      	ldr	r3, [r7, #24]
1004d250:	2240      	movs	r2, #64	@ 0x40
1004d252:	4013      	ands	r3, r2
1004d254:	d004      	beq.n	1004d260 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
1004d256:	687b      	ldr	r3, [r7, #4]
1004d258:	0018      	movs	r0, r3
1004d25a:	f000 f878 	bl	1004d34e <USART_EndTransmit_IT>
    return;
1004d25e:	e026      	b.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004d260:	69fa      	ldr	r2, [r7, #28]
1004d262:	2380      	movs	r3, #128	@ 0x80
1004d264:	041b      	lsls	r3, r3, #16
1004d266:	4013      	ands	r3, r2
1004d268:	d009      	beq.n	1004d27e <HAL_USART_IRQHandler+0x2ce>
1004d26a:	69ba      	ldr	r2, [r7, #24]
1004d26c:	2380      	movs	r3, #128	@ 0x80
1004d26e:	05db      	lsls	r3, r3, #23
1004d270:	4013      	ands	r3, r2
1004d272:	d004      	beq.n	1004d27e <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
1004d274:	687b      	ldr	r3, [r7, #4]
1004d276:	0018      	movs	r0, r3
1004d278:	f000 f8b4 	bl	1004d3e4 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004d27c:	e017      	b.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004d27e:	69fa      	ldr	r2, [r7, #28]
1004d280:	2380      	movs	r3, #128	@ 0x80
1004d282:	045b      	lsls	r3, r3, #17
1004d284:	4013      	ands	r3, r2
1004d286:	d012      	beq.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
1004d288:	69bb      	ldr	r3, [r7, #24]
1004d28a:	2b00      	cmp	r3, #0
1004d28c:	da0f      	bge.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
1004d28e:	687b      	ldr	r3, [r7, #4]
1004d290:	0018      	movs	r0, r3
1004d292:	f000 f89f 	bl	1004d3d4 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004d296:	e00a      	b.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
      return;
1004d298:	46c0      	nop			@ (mov r8, r8)
1004d29a:	e008      	b.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
    return;
1004d29c:	46c0      	nop			@ (mov r8, r8)
1004d29e:	e006      	b.n	1004d2ae <HAL_USART_IRQHandler+0x2fe>
1004d2a0:	0000280f 	.word	0x0000280f
1004d2a4:	10000001 	.word	0x10000001
1004d2a8:	1004d325 	.word	0x1004d325
    return;
1004d2ac:	46c0      	nop			@ (mov r8, r8)
  }
}
1004d2ae:	46bd      	mov	sp, r7
1004d2b0:	b008      	add	sp, #32
1004d2b2:	bd80      	pop	{r7, pc}

1004d2b4 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
1004d2b4:	b580      	push	{r7, lr}
1004d2b6:	b082      	sub	sp, #8
1004d2b8:	af00      	add	r7, sp, #0
1004d2ba:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
1004d2bc:	46c0      	nop			@ (mov r8, r8)
1004d2be:	46bd      	mov	sp, r7
1004d2c0:	b002      	add	sp, #8
1004d2c2:	bd80      	pop	{r7, pc}

1004d2c4 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
1004d2c4:	b580      	push	{r7, lr}
1004d2c6:	b082      	sub	sp, #8
1004d2c8:	af00      	add	r7, sp, #0
1004d2ca:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
1004d2cc:	46c0      	nop			@ (mov r8, r8)
1004d2ce:	46bd      	mov	sp, r7
1004d2d0:	b002      	add	sp, #8
1004d2d2:	bd80      	pop	{r7, pc}

1004d2d4 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
1004d2d4:	b580      	push	{r7, lr}
1004d2d6:	b082      	sub	sp, #8
1004d2d8:	af00      	add	r7, sp, #0
1004d2da:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
1004d2dc:	46c0      	nop			@ (mov r8, r8)
1004d2de:	46bd      	mov	sp, r7
1004d2e0:	b002      	add	sp, #8
1004d2e2:	bd80      	pop	{r7, pc}

1004d2e4 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
1004d2e4:	b580      	push	{r7, lr}
1004d2e6:	b082      	sub	sp, #8
1004d2e8:	af00      	add	r7, sp, #0
1004d2ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
1004d2ec:	687b      	ldr	r3, [r7, #4]
1004d2ee:	681b      	ldr	r3, [r3, #0]
1004d2f0:	681a      	ldr	r2, [r3, #0]
1004d2f2:	687b      	ldr	r3, [r7, #4]
1004d2f4:	681b      	ldr	r3, [r3, #0]
1004d2f6:	4909      	ldr	r1, [pc, #36]	@ (1004d31c <USART_EndTransfer+0x38>)
1004d2f8:	400a      	ands	r2, r1
1004d2fa:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
1004d2fc:	687b      	ldr	r3, [r7, #4]
1004d2fe:	681b      	ldr	r3, [r3, #0]
1004d300:	689a      	ldr	r2, [r3, #8]
1004d302:	687b      	ldr	r3, [r7, #4]
1004d304:	681b      	ldr	r3, [r3, #0]
1004d306:	4906      	ldr	r1, [pc, #24]	@ (1004d320 <USART_EndTransfer+0x3c>)
1004d308:	400a      	ands	r2, r1
1004d30a:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
1004d30c:	687b      	ldr	r3, [r7, #4]
1004d30e:	2259      	movs	r2, #89	@ 0x59
1004d310:	2101      	movs	r1, #1
1004d312:	5499      	strb	r1, [r3, r2]
}
1004d314:	46c0      	nop			@ (mov r8, r8)
1004d316:	46bd      	mov	sp, r7
1004d318:	b002      	add	sp, #8
1004d31a:	bd80      	pop	{r7, pc}
1004d31c:	fffffe1f 	.word	0xfffffe1f
1004d320:	ef7ffffe 	.word	0xef7ffffe

1004d324 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004d324:	b580      	push	{r7, lr}
1004d326:	b084      	sub	sp, #16
1004d328:	af00      	add	r7, sp, #0
1004d32a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
1004d32c:	687b      	ldr	r3, [r7, #4]
1004d32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004d330:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
1004d332:	68fb      	ldr	r3, [r7, #12]
1004d334:	2200      	movs	r2, #0
1004d336:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
1004d338:	68fb      	ldr	r3, [r7, #12]
1004d33a:	2200      	movs	r2, #0
1004d33c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
1004d33e:	68fb      	ldr	r3, [r7, #12]
1004d340:	0018      	movs	r0, r3
1004d342:	f7ff ffc7 	bl	1004d2d4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
1004d346:	46c0      	nop			@ (mov r8, r8)
1004d348:	46bd      	mov	sp, r7
1004d34a:	b004      	add	sp, #16
1004d34c:	bd80      	pop	{r7, pc}

1004d34e <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
1004d34e:	b580      	push	{r7, lr}
1004d350:	b082      	sub	sp, #8
1004d352:	af00      	add	r7, sp, #0
1004d354:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
1004d356:	687b      	ldr	r3, [r7, #4]
1004d358:	681b      	ldr	r3, [r3, #0]
1004d35a:	681a      	ldr	r2, [r3, #0]
1004d35c:	687b      	ldr	r3, [r7, #4]
1004d35e:	681b      	ldr	r3, [r3, #0]
1004d360:	2140      	movs	r1, #64	@ 0x40
1004d362:	438a      	bics	r2, r1
1004d364:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
1004d366:	687b      	ldr	r3, [r7, #4]
1004d368:	681b      	ldr	r3, [r3, #0]
1004d36a:	689a      	ldr	r2, [r3, #8]
1004d36c:	687b      	ldr	r3, [r7, #4]
1004d36e:	681b      	ldr	r3, [r3, #0]
1004d370:	2101      	movs	r1, #1
1004d372:	438a      	bics	r2, r1
1004d374:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
1004d376:	687b      	ldr	r3, [r7, #4]
1004d378:	2200      	movs	r2, #0
1004d37a:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
1004d37c:	687b      	ldr	r3, [r7, #4]
1004d37e:	2259      	movs	r2, #89	@ 0x59
1004d380:	5c9b      	ldrb	r3, [r3, r2]
1004d382:	b2db      	uxtb	r3, r3
1004d384:	2b12      	cmp	r3, #18
1004d386:	d114      	bne.n	1004d3b2 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
1004d388:	687b      	ldr	r3, [r7, #4]
1004d38a:	681b      	ldr	r3, [r3, #0]
1004d38c:	2208      	movs	r2, #8
1004d38e:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
1004d390:	687b      	ldr	r3, [r7, #4]
1004d392:	681b      	ldr	r3, [r3, #0]
1004d394:	699a      	ldr	r2, [r3, #24]
1004d396:	687b      	ldr	r3, [r7, #4]
1004d398:	681b      	ldr	r3, [r3, #0]
1004d39a:	2108      	movs	r1, #8
1004d39c:	430a      	orrs	r2, r1
1004d39e:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
1004d3a0:	687b      	ldr	r3, [r7, #4]
1004d3a2:	2259      	movs	r2, #89	@ 0x59
1004d3a4:	2101      	movs	r1, #1
1004d3a6:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
1004d3a8:	687b      	ldr	r3, [r7, #4]
1004d3aa:	0018      	movs	r0, r3
1004d3ac:	f7ff ff82 	bl	1004d2b4 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004d3b0:	e00c      	b.n	1004d3cc <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
1004d3b2:	687b      	ldr	r3, [r7, #4]
1004d3b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
1004d3b6:	b29b      	uxth	r3, r3
1004d3b8:	2b00      	cmp	r3, #0
1004d3ba:	d107      	bne.n	1004d3cc <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
1004d3bc:	687b      	ldr	r3, [r7, #4]
1004d3be:	2259      	movs	r2, #89	@ 0x59
1004d3c0:	2101      	movs	r1, #1
1004d3c2:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
1004d3c4:	687b      	ldr	r3, [r7, #4]
1004d3c6:	0018      	movs	r0, r3
1004d3c8:	f7ff ff7c 	bl	1004d2c4 <HAL_USART_TxRxCpltCallback>
}
1004d3cc:	46c0      	nop			@ (mov r8, r8)
1004d3ce:	46bd      	mov	sp, r7
1004d3d0:	b002      	add	sp, #8
1004d3d2:	bd80      	pop	{r7, pc}

1004d3d4 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
1004d3d4:	b580      	push	{r7, lr}
1004d3d6:	b082      	sub	sp, #8
1004d3d8:	af00      	add	r7, sp, #0
1004d3da:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004d3dc:	46c0      	nop			@ (mov r8, r8)
1004d3de:	46bd      	mov	sp, r7
1004d3e0:	b002      	add	sp, #8
1004d3e2:	bd80      	pop	{r7, pc}

1004d3e4 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
1004d3e4:	b580      	push	{r7, lr}
1004d3e6:	b082      	sub	sp, #8
1004d3e8:	af00      	add	r7, sp, #0
1004d3ea:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004d3ec:	46c0      	nop			@ (mov r8, r8)
1004d3ee:	46bd      	mov	sp, r7
1004d3f0:	b002      	add	sp, #8
1004d3f2:	bd80      	pop	{r7, pc}

1004d3f4 <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1004d3f4:	b580      	push	{r7, lr}
1004d3f6:	b082      	sub	sp, #8
1004d3f8:	af00      	add	r7, sp, #0
1004d3fa:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
1004d3fc:	4b0c      	ldr	r3, [pc, #48]	@ (1004d430 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004d3fe:	791b      	ldrb	r3, [r3, #4]
1004d400:	2b01      	cmp	r3, #1
1004d402:	d102      	bne.n	1004d40a <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1004d404:	2301      	movs	r3, #1
1004d406:	425b      	negs	r3, r3
1004d408:	e00d      	b.n	1004d426 <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
1004d40a:	4b09      	ldr	r3, [pc, #36]	@ (1004d430 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004d40c:	791b      	ldrb	r3, [r3, #4]
1004d40e:	001a      	movs	r2, r3
1004d410:	4b07      	ldr	r3, [pc, #28]	@ (1004d430 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004d412:	0092      	lsls	r2, r2, #2
1004d414:	6879      	ldr	r1, [r7, #4]
1004d416:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
1004d418:	4b05      	ldr	r3, [pc, #20]	@ (1004d430 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004d41a:	791b      	ldrb	r3, [r3, #4]
1004d41c:	3301      	adds	r3, #1
1004d41e:	b2da      	uxtb	r2, r3
1004d420:	4b03      	ldr	r3, [pc, #12]	@ (1004d430 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004d422:	711a      	strb	r2, [r3, #4]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1004d424:	2300      	movs	r3, #0
}
1004d426:	0018      	movs	r0, r3
1004d428:	46bd      	mov	sp, r7
1004d42a:	b002      	add	sp, #8
1004d42c:	bd80      	pop	{r7, pc}
1004d42e:	46c0      	nop			@ (mov r8, r8)
1004d430:	200022a0 	.word	0x200022a0

1004d434 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004d434:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d436:	b089      	sub	sp, #36	@ 0x24
1004d438:	af00      	add	r7, sp, #0
1004d43a:	6078      	str	r0, [r7, #4]
1004d43c:	000a      	movs	r2, r1
1004d43e:	1cbb      	adds	r3, r7, #2
1004d440:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004d442:	231f      	movs	r3, #31
1004d444:	18fb      	adds	r3, r7, r3
1004d446:	2200      	movs	r2, #0
1004d448:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004d44a:	687b      	ldr	r3, [r7, #4]
1004d44c:	781b      	ldrb	r3, [r3, #0]
1004d44e:	2b04      	cmp	r3, #4
1004d450:	d003      	beq.n	1004d45a <BLE_STACK_Event+0x26>
1004d452:	687b      	ldr	r3, [r7, #4]
1004d454:	781b      	ldrb	r3, [r3, #0]
1004d456:	2b82      	cmp	r3, #130	@ 0x82
1004d458:	d148      	bne.n	1004d4ec <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004d45a:	687b      	ldr	r3, [r7, #4]
1004d45c:	3301      	adds	r3, #1
1004d45e:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004d460:	687b      	ldr	r3, [r7, #4]
1004d462:	781b      	ldrb	r3, [r3, #0]
1004d464:	2b04      	cmp	r3, #4
1004d466:	d103      	bne.n	1004d470 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004d468:	693b      	ldr	r3, [r7, #16]
1004d46a:	3302      	adds	r3, #2
1004d46c:	61bb      	str	r3, [r7, #24]
1004d46e:	e005      	b.n	1004d47c <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004d470:	687b      	ldr	r3, [r7, #4]
1004d472:	3301      	adds	r3, #1
1004d474:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
1004d476:	68fb      	ldr	r3, [r7, #12]
1004d478:	3303      	adds	r3, #3
1004d47a:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004d47c:	693b      	ldr	r3, [r7, #16]
1004d47e:	781b      	ldrb	r3, [r3, #0]
1004d480:	2bff      	cmp	r3, #255	@ 0xff
1004d482:	d133      	bne.n	1004d4ec <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004d484:	69bb      	ldr	r3, [r7, #24]
1004d486:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
1004d488:	68bb      	ldr	r3, [r7, #8]
1004d48a:	781a      	ldrb	r2, [r3, #0]
1004d48c:	785b      	ldrb	r3, [r3, #1]
1004d48e:	021b      	lsls	r3, r3, #8
1004d490:	4313      	orrs	r3, r2
1004d492:	b29b      	uxth	r3, r3
1004d494:	001a      	movs	r2, r3
1004d496:	23fc      	movs	r3, #252	@ 0xfc
1004d498:	021b      	lsls	r3, r3, #8
1004d49a:	401a      	ands	r2, r3
1004d49c:	23c0      	movs	r3, #192	@ 0xc0
1004d49e:	011b      	lsls	r3, r3, #4
1004d4a0:	429a      	cmp	r2, r3
1004d4a2:	d123      	bne.n	1004d4ec <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004d4a4:	2317      	movs	r3, #23
1004d4a6:	18fb      	adds	r3, r7, r3
1004d4a8:	2200      	movs	r2, #0
1004d4aa:	701a      	strb	r2, [r3, #0]
1004d4ac:	e015      	b.n	1004d4da <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
1004d4ae:	2517      	movs	r5, #23
1004d4b0:	197b      	adds	r3, r7, r5
1004d4b2:	781a      	ldrb	r2, [r3, #0]
1004d4b4:	4b14      	ldr	r3, [pc, #80]	@ (1004d508 <BLE_STACK_Event+0xd4>)
1004d4b6:	0092      	lsls	r2, r2, #2
1004d4b8:	58d3      	ldr	r3, [r2, r3]
1004d4ba:	261f      	movs	r6, #31
1004d4bc:	19bc      	adds	r4, r7, r6
1004d4be:	68ba      	ldr	r2, [r7, #8]
1004d4c0:	0010      	movs	r0, r2
1004d4c2:	4798      	blx	r3
1004d4c4:	0003      	movs	r3, r0
1004d4c6:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
1004d4c8:	19bb      	adds	r3, r7, r6
1004d4ca:	781b      	ldrb	r3, [r3, #0]
1004d4cc:	2b01      	cmp	r3, #1
1004d4ce:	d00c      	beq.n	1004d4ea <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004d4d0:	197b      	adds	r3, r7, r5
1004d4d2:	781a      	ldrb	r2, [r3, #0]
1004d4d4:	197b      	adds	r3, r7, r5
1004d4d6:	3201      	adds	r2, #1
1004d4d8:	701a      	strb	r2, [r3, #0]
1004d4da:	4b0b      	ldr	r3, [pc, #44]	@ (1004d508 <BLE_STACK_Event+0xd4>)
1004d4dc:	791b      	ldrb	r3, [r3, #4]
1004d4de:	2217      	movs	r2, #23
1004d4e0:	18ba      	adds	r2, r7, r2
1004d4e2:	7812      	ldrb	r2, [r2, #0]
1004d4e4:	429a      	cmp	r2, r3
1004d4e6:	d3e2      	bcc.n	1004d4ae <BLE_STACK_Event+0x7a>
1004d4e8:	e000      	b.n	1004d4ec <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
1004d4ea:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004d4ec:	231f      	movs	r3, #31
1004d4ee:	18fb      	adds	r3, r7, r3
1004d4f0:	781b      	ldrb	r3, [r3, #0]
1004d4f2:	2b00      	cmp	r3, #0
1004d4f4:	d103      	bne.n	1004d4fe <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1004d4f6:	687b      	ldr	r3, [r7, #4]
1004d4f8:	0018      	movs	r0, r3
1004d4fa:	f003 f81d 	bl	10050538 <BLEEVT_App_Notification>
  }
}
1004d4fe:	46c0      	nop			@ (mov r8, r8)
1004d500:	46bd      	mov	sp, r7
1004d502:	b009      	add	sp, #36	@ 0x24
1004d504:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d506:	46c0      	nop			@ (mov r8, r8)
1004d508:	200022a0 	.word	0x200022a0

1004d50c <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
1004d50c:	b580      	push	{r7, lr}
1004d50e:	b082      	sub	sp, #8
1004d510:	af00      	add	r7, sp, #0
1004d512:	0002      	movs	r2, r0
1004d514:	1dbb      	adds	r3, r7, #6
1004d516:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
1004d518:	1dbb      	adds	r3, r7, #6
1004d51a:	881b      	ldrh	r3, [r3, #0]
1004d51c:	0018      	movs	r0, r3
1004d51e:	f007 f89f 	bl	10054660 <GAP_name_disc_proc_connected_check>
}
1004d522:	46c0      	nop			@ (mov r8, r8)
1004d524:	46bd      	mov	sp, r7
1004d526:	b002      	add	sp, #8
1004d528:	bd80      	pop	{r7, pc}

1004d52a <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
1004d52a:	b580      	push	{r7, lr}
1004d52c:	b082      	sub	sp, #8
1004d52e:	af00      	add	r7, sp, #0
1004d530:	0002      	movs	r2, r0
1004d532:	1dfb      	adds	r3, r7, #7
1004d534:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1004d536:	1dfb      	adds	r3, r7, #7
1004d538:	781b      	ldrb	r3, [r3, #0]
1004d53a:	0018      	movs	r0, r3
1004d53c:	f007 fad4 	bl	10054ae8 <GAP_LimDiscTimeoutcb>
}
1004d540:	46c0      	nop			@ (mov r8, r8)
1004d542:	46bd      	mov	sp, r7
1004d544:	b002      	add	sp, #8
1004d546:	bd80      	pop	{r7, pc}

1004d548 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
1004d548:	b580      	push	{r7, lr}
1004d54a:	b082      	sub	sp, #8
1004d54c:	af00      	add	r7, sp, #0
1004d54e:	6078      	str	r0, [r7, #4]
1004d550:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
1004d552:	683a      	ldr	r2, [r7, #0]
1004d554:	687b      	ldr	r3, [r7, #4]
1004d556:	0011      	movs	r1, r2
1004d558:	0018      	movs	r0, r3
1004d55a:	f006 f8ab 	bl	100536b4 <hci_acl_data_tx_cmpl_event_int_cb>
1004d55e:	0003      	movs	r3, r0
                                             buff_p);
}
1004d560:	0018      	movs	r0, r3
1004d562:	46bd      	mov	sp, r7
1004d564:	b002      	add	sp, #8
1004d566:	bd80      	pop	{r7, pc}

1004d568 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
1004d568:	b580      	push	{r7, lr}
1004d56a:	b082      	sub	sp, #8
1004d56c:	af00      	add	r7, sp, #0
1004d56e:	6078      	str	r0, [r7, #4]
1004d570:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
1004d572:	683a      	ldr	r2, [r7, #0]
1004d574:	687b      	ldr	r3, [r7, #4]
1004d576:	0011      	movs	r1, r2
1004d578:	0018      	movs	r0, r3
1004d57a:	f006 f8c5 	bl	10053708 <hci_acl_data_ind_event_int_cb>
1004d57e:	0003      	movs	r3, r0
                                         buff_p);
}
1004d580:	0018      	movs	r0, r3
1004d582:	46bd      	mov	sp, r7
1004d584:	b002      	add	sp, #8
1004d586:	bd80      	pop	{r7, pc}

1004d588 <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
1004d588:	b580      	push	{r7, lr}
1004d58a:	b082      	sub	sp, #8
1004d58c:	af00      	add	r7, sp, #0
1004d58e:	0002      	movs	r2, r0
1004d590:	1dbb      	adds	r3, r7, #6
1004d592:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
1004d594:	1dbb      	adds	r3, r7, #6
1004d596:	881b      	ldrh	r3, [r3, #0]
1004d598:	0018      	movs	r0, r3
1004d59a:	f00a fc03 	bl	10057da4 <Controller_Process_Q>
}
1004d59e:	46c0      	nop			@ (mov r8, r8)
1004d5a0:	46bd      	mov	sp, r7
1004d5a2:	b002      	add	sp, #8
1004d5a4:	bd80      	pop	{r7, pc}

1004d5a6 <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
1004d5a6:	b580      	push	{r7, lr}
1004d5a8:	b082      	sub	sp, #8
1004d5aa:	af00      	add	r7, sp, #0
1004d5ac:	0002      	movs	r2, r0
1004d5ae:	1dbb      	adds	r3, r7, #6
1004d5b0:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1004d5b2:	1dbb      	adds	r3, r7, #6
1004d5b4:	881b      	ldrh	r3, [r3, #0]
1004d5b6:	0018      	movs	r0, r3
1004d5b8:	f00a fc44 	bl	10057e44 <LLC_offline_control_procedures_processing>
}
1004d5bc:	46c0      	nop			@ (mov r8, r8)
1004d5be:	46bd      	mov	sp, r7
1004d5c0:	b002      	add	sp, #8
1004d5c2:	bd80      	pop	{r7, pc}

1004d5c4 <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1004d5c4:	b580      	push	{r7, lr}
1004d5c6:	af00      	add	r7, sp, #0
    return phy_upd_csr();
1004d5c8:	f00a fd06 	bl	10057fd8 <phy_upd_csr>
1004d5cc:	0003      	movs	r3, r0
}
1004d5ce:	0018      	movs	r0, r3
1004d5d0:	46bd      	mov	sp, r7
1004d5d2:	bd80      	pop	{r7, pc}

1004d5d4 <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1004d5d4:	b580      	push	{r7, lr}
1004d5d6:	af00      	add	r7, sp, #0
    return conn_supp_csr();
1004d5d8:	f00a fd02 	bl	10057fe0 <conn_supp_csr>
1004d5dc:	0003      	movs	r3, r0
}
1004d5de:	0018      	movs	r0, r3
1004d5e0:	46bd      	mov	sp, r7
1004d5e2:	bd80      	pop	{r7, pc}

1004d5e4 <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1004d5e4:	b580      	push	{r7, lr}
1004d5e6:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
1004d5e8:	f006 f8b0 	bl	1005374c <ACL_pkt_init>
1004d5ec:	0003      	movs	r3, r0
}
1004d5ee:	0018      	movs	r0, r3
1004d5f0:	46bd      	mov	sp, r7
1004d5f2:	bd80      	pop	{r7, pc}

1004d5f4 <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004d5f4:	b580      	push	{r7, lr}
1004d5f6:	b082      	sub	sp, #8
1004d5f8:	af00      	add	r7, sp, #0
1004d5fa:	6078      	str	r0, [r7, #4]
1004d5fc:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
1004d5fe:	683a      	ldr	r2, [r7, #0]
1004d600:	687b      	ldr	r3, [r7, #4]
1004d602:	0011      	movs	r1, r2
1004d604:	0018      	movs	r0, r3
1004d606:	f006 fc53 	bl	10053eb0 <hci_disconnection_complete_event_int_cb>
1004d60a:	0003      	movs	r3, r0
                                                   buff_p);
}
1004d60c:	0018      	movs	r0, r3
1004d60e:	46bd      	mov	sp, r7
1004d610:	b002      	add	sp, #8
1004d612:	bd80      	pop	{r7, pc}

1004d614 <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1004d614:	b580      	push	{r7, lr}
1004d616:	b082      	sub	sp, #8
1004d618:	af00      	add	r7, sp, #0
1004d61a:	6078      	str	r0, [r7, #4]
1004d61c:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
1004d61e:	683a      	ldr	r2, [r7, #0]
1004d620:	687b      	ldr	r3, [r7, #4]
1004d622:	0011      	movs	r1, r2
1004d624:	0018      	movs	r0, r3
1004d626:	f006 fc73 	bl	10053f10 <hci_encryption_change_event_int_cb>
1004d62a:	0003      	movs	r3, r0
                                              buff_p);
}
1004d62c:	0018      	movs	r0, r3
1004d62e:	46bd      	mov	sp, r7
1004d630:	b002      	add	sp, #8
1004d632:	bd80      	pop	{r7, pc}

1004d634 <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004d634:	b580      	push	{r7, lr}
1004d636:	b082      	sub	sp, #8
1004d638:	af00      	add	r7, sp, #0
1004d63a:	6078      	str	r0, [r7, #4]
1004d63c:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
1004d63e:	683a      	ldr	r2, [r7, #0]
1004d640:	687b      	ldr	r3, [r7, #4]
1004d642:	0011      	movs	r1, r2
1004d644:	0018      	movs	r0, r3
1004d646:	f006 fc7f 	bl	10053f48 <hci_encryption_key_refresh_complete_event_int_cb>
1004d64a:	0003      	movs	r3, r0
                                                            buff_p);
}
1004d64c:	0018      	movs	r0, r3
1004d64e:	46bd      	mov	sp, r7
1004d650:	b002      	add	sp, #8
1004d652:	bd80      	pop	{r7, pc}

1004d654 <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004d654:	b580      	push	{r7, lr}
1004d656:	b082      	sub	sp, #8
1004d658:	af00      	add	r7, sp, #0
1004d65a:	6078      	str	r0, [r7, #4]
1004d65c:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
1004d65e:	683a      	ldr	r2, [r7, #0]
1004d660:	687b      	ldr	r3, [r7, #4]
1004d662:	0011      	movs	r1, r2
1004d664:	0018      	movs	r0, r3
1004d666:	f006 fc8b 	bl	10053f80 <hci_le_connection_complete_event_int_cb>
1004d66a:	0003      	movs	r3, r0
                                                   buff_p);
}
1004d66c:	0018      	movs	r0, r3
1004d66e:	46bd      	mov	sp, r7
1004d670:	b002      	add	sp, #8
1004d672:	bd80      	pop	{r7, pc}

1004d674 <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004d674:	b580      	push	{r7, lr}
1004d676:	b082      	sub	sp, #8
1004d678:	af00      	add	r7, sp, #0
1004d67a:	6078      	str	r0, [r7, #4]
1004d67c:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
1004d67e:	683a      	ldr	r2, [r7, #0]
1004d680:	687b      	ldr	r3, [r7, #4]
1004d682:	0011      	movs	r1, r2
1004d684:	0018      	movs	r0, r3
1004d686:	f006 fcbb 	bl	10054000 <hci_le_enhanced_connection_complete_event_int_cb>
1004d68a:	0003      	movs	r3, r0
                                                            buff_p);
}
1004d68c:	0018      	movs	r0, r3
1004d68e:	46bd      	mov	sp, r7
1004d690:	b002      	add	sp, #8
1004d692:	bd80      	pop	{r7, pc}

1004d694 <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
1004d694:	b580      	push	{r7, lr}
1004d696:	b082      	sub	sp, #8
1004d698:	af00      	add	r7, sp, #0
1004d69a:	6078      	str	r0, [r7, #4]
1004d69c:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
1004d69e:	683a      	ldr	r2, [r7, #0]
1004d6a0:	687b      	ldr	r3, [r7, #4]
1004d6a2:	0011      	movs	r1, r2
1004d6a4:	0018      	movs	r0, r3
1004d6a6:	f006 fcf1 	bl	1005408c <hci_le_long_term_key_request_event_int_cb>
1004d6aa:	0003      	movs	r3, r0
                                                     buff_p);
}
1004d6ac:	0018      	movs	r0, r3
1004d6ae:	46bd      	mov	sp, r7
1004d6b0:	b002      	add	sp, #8
1004d6b2:	bd80      	pop	{r7, pc}

1004d6b4 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1004d6b4:	b580      	push	{r7, lr}
1004d6b6:	b082      	sub	sp, #8
1004d6b8:	af00      	add	r7, sp, #0
1004d6ba:	6078      	str	r0, [r7, #4]
1004d6bc:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
1004d6be:	683a      	ldr	r2, [r7, #0]
1004d6c0:	687b      	ldr	r3, [r7, #4]
1004d6c2:	0011      	movs	r1, r2
1004d6c4:	0018      	movs	r0, r3
1004d6c6:	f006 fd11 	bl	100540ec <hci_le_read_local_p256_public_key_complete_event_int_cb>
1004d6ca:	0003      	movs	r3, r0
                                                                   buff_p);
}
1004d6cc:	0018      	movs	r0, r3
1004d6ce:	46bd      	mov	sp, r7
1004d6d0:	b002      	add	sp, #8
1004d6d2:	bd80      	pop	{r7, pc}

1004d6d4 <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1004d6d4:	b580      	push	{r7, lr}
1004d6d6:	b082      	sub	sp, #8
1004d6d8:	af00      	add	r7, sp, #0
1004d6da:	6078      	str	r0, [r7, #4]
1004d6dc:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
1004d6de:	683a      	ldr	r2, [r7, #0]
1004d6e0:	687b      	ldr	r3, [r7, #4]
1004d6e2:	0011      	movs	r1, r2
1004d6e4:	0018      	movs	r0, r3
1004d6e6:	f006 fd1f 	bl	10054128 <hci_le_generate_dhkey_complete_event_int_cb>
1004d6ea:	0003      	movs	r3, r0
                                                       buff_p);
}
1004d6ec:	0018      	movs	r0, r3
1004d6ee:	46bd      	mov	sp, r7
1004d6f0:	b002      	add	sp, #8
1004d6f2:	bd80      	pop	{r7, pc}

1004d6f4 <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
1004d6f4:	b580      	push	{r7, lr}
1004d6f6:	af00      	add	r7, sp, #0
    return MBM_init();
1004d6f8:	f011 fe20 	bl	1005f33c <MBM_init>
1004d6fc:	0003      	movs	r3, r0
}
1004d6fe:	0018      	movs	r0, r3
1004d700:	46bd      	mov	sp, r7
1004d702:	bd80      	pop	{r7, pc}

1004d704 <smp_debug_trudy__set_config_ucfg>:
#endif

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_debug_trudy__set_config_ucfg(uint32_t config)
{
1004d704:	b580      	push	{r7, lr}
1004d706:	b082      	sub	sp, #8
1004d708:	af00      	add	r7, sp, #0
1004d70a:	6078      	str	r0, [r7, #4]
    return smp_debug_trudy__set_config(config);
1004d70c:	687b      	ldr	r3, [r7, #4]
1004d70e:	0018      	movs	r0, r3
1004d710:	f012 fe0b 	bl	1006032a <smp_debug_trudy__set_config>
1004d714:	0003      	movs	r3, r0
}
1004d716:	0018      	movs	r0, r3
1004d718:	46bd      	mov	sp, r7
1004d71a:	b002      	add	sp, #8
1004d71c:	bd80      	pop	{r7, pc}

1004d71e <smp_sap_scp_force_debug_key_usage_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_sap_scp_force_debug_key_usage_ucfg(uint8_t config_val)
{
1004d71e:	b580      	push	{r7, lr}
1004d720:	b082      	sub	sp, #8
1004d722:	af00      	add	r7, sp, #0
1004d724:	0002      	movs	r2, r0
1004d726:	1dfb      	adds	r3, r7, #7
1004d728:	701a      	strb	r2, [r3, #0]
    return smp_sap_scp_force_debug_key_usage(config_val);
1004d72a:	1dfb      	adds	r3, r7, #7
1004d72c:	781b      	ldrb	r3, [r3, #0]
1004d72e:	0018      	movs	r0, r3
1004d730:	f013 fafa 	bl	10060d28 <smp_sap_scp_force_debug_key_usage>
1004d734:	0003      	movs	r3, r0
}
1004d736:	0018      	movs	r0, r3
1004d738:	46bd      	mov	sp, r7
1004d73a:	b002      	add	sp, #8
1004d73c:	bd80      	pop	{r7, pc}

1004d73e <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
1004d73e:	b580      	push	{r7, lr}
1004d740:	b082      	sub	sp, #8
1004d742:	af00      	add	r7, sp, #0
1004d744:	0002      	movs	r2, r0
1004d746:	1dfb      	adds	r3, r7, #7
1004d748:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
1004d74a:	1dfb      	adds	r3, r7, #7
1004d74c:	781b      	ldrb	r3, [r3, #0]
1004d74e:	0018      	movs	r0, r3
1004d750:	f00a fe26 	bl	100583a0 <L2C_init>
1004d754:	0003      	movs	r3, r0
}
1004d756:	0018      	movs	r0, r3
1004d758:	46bd      	mov	sp, r7
1004d75a:	b002      	add	sp, #8
1004d75c:	bd80      	pop	{r7, pc}

1004d75e <llc_conn_multi_link_connection_ucfg>:
#endif /* ((CONNECTION_SUBRATING_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
tBleStatus llc_conn_multi_link_connection_ucfg(uint8_t enable)
{
1004d75e:	b580      	push	{r7, lr}
1004d760:	b082      	sub	sp, #8
1004d762:	af00      	add	r7, sp, #0
1004d764:	0002      	movs	r2, r0
1004d766:	1dfb      	adds	r3, r7, #7
1004d768:	701a      	strb	r2, [r3, #0]
    return llc_conn_multi_link_connection(enable);
1004d76a:	1dfb      	adds	r3, r7, #7
1004d76c:	781b      	ldrb	r3, [r3, #0]
1004d76e:	0018      	movs	r0, r3
1004d770:	f00b fe75 	bl	1005945e <llc_conn_multi_link_connection>
1004d774:	0003      	movs	r3, r0
}
1004d776:	0018      	movs	r0, r3
1004d778:	46bd      	mov	sp, r7
1004d77a:	b002      	add	sp, #8
1004d77c:	bd80      	pop	{r7, pc}

1004d77e <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
1004d77e:	b580      	push	{r7, lr}
1004d780:	b082      	sub	sp, #8
1004d782:	af00      	add	r7, sp, #0
1004d784:	0002      	movs	r2, r0
1004d786:	1dbb      	adds	r3, r7, #6
1004d788:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
1004d78a:	1dbb      	adds	r3, r7, #6
1004d78c:	881b      	ldrh	r3, [r3, #0]
1004d78e:	0018      	movs	r0, r3
1004d790:	f00c fcb0 	bl	1005a0f4 <llc_conn_peripheral_roll_back_params_tsk>
}
1004d794:	46c0      	nop			@ (mov r8, r8)
1004d796:	46bd      	mov	sp, r7
1004d798:	b002      	add	sp, #8
1004d79a:	bd80      	pop	{r7, pc}

1004d79c <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
1004d79c:	b580      	push	{r7, lr}
1004d79e:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
1004d7a0:	f00d fc82 	bl	1005b0a8 <LL_cpe_init_phy_update>
}
1004d7a4:	46c0      	nop			@ (mov r8, r8)
1004d7a6:	46bd      	mov	sp, r7
1004d7a8:	bd80      	pop	{r7, pc}

1004d7aa <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1004d7aa:	b580      	push	{r7, lr}
1004d7ac:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
1004d7ae:	f00d fc83 	bl	1005b0b8 <LL_cpe_init_conn_update>
}
1004d7b2:	46c0      	nop			@ (mov r8, r8)
1004d7b4:	46bd      	mov	sp, r7
1004d7b6:	bd80      	pop	{r7, pc}

1004d7b8 <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1004d7b8:	b580      	push	{r7, lr}
1004d7ba:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
1004d7bc:	f00d fc84 	bl	1005b0c8 <LL_cpe_init_chmap_update>
}
1004d7c0:	46c0      	nop			@ (mov r8, r8)
1004d7c2:	46bd      	mov	sp, r7
1004d7c4:	bd80      	pop	{r7, pc}

1004d7c6 <LL_cpe_init_ucfg>:
#endif /* ((CONTROLLER_CIS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1004d7c6:	b580      	push	{r7, lr}
1004d7c8:	af00      	add	r7, sp, #0
    LL_cpe_init();
1004d7ca:	f00d fcc1 	bl	1005b150 <LL_cpe_init>
}
1004d7ce:	46c0      	nop			@ (mov r8, r8)
1004d7d0:	46bd      	mov	sp, r7
1004d7d2:	bd80      	pop	{r7, pc}

1004d7d4 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
1004d7d4:	b580      	push	{r7, lr}
1004d7d6:	b082      	sub	sp, #8
1004d7d8:	af00      	add	r7, sp, #0
1004d7da:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
1004d7dc:	687b      	ldr	r3, [r7, #4]
1004d7de:	0018      	movs	r0, r3
1004d7e0:	f00e f8de 	bl	1005b9a0 <LL_conn_upd_max_tx_time_coded>
}
1004d7e4:	46c0      	nop			@ (mov r8, r8)
1004d7e6:	46bd      	mov	sp, r7
1004d7e8:	b002      	add	sp, #8
1004d7ea:	bd80      	pop	{r7, pc}

1004d7ec <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
1004d7ec:	b580      	push	{r7, lr}
1004d7ee:	b082      	sub	sp, #8
1004d7f0:	af00      	add	r7, sp, #0
1004d7f2:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
1004d7f4:	687b      	ldr	r3, [r7, #4]
1004d7f6:	0018      	movs	r0, r3
1004d7f8:	f00e f956 	bl	1005baa8 <LL_conn_upd_data_length_change_event>
}
1004d7fc:	46c0      	nop			@ (mov r8, r8)
1004d7fe:	46bd      	mov	sp, r7
1004d800:	b002      	add	sp, #8
1004d802:	bd80      	pop	{r7, pc}

1004d804 <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
1004d804:	b580      	push	{r7, lr}
1004d806:	b082      	sub	sp, #8
1004d808:	af00      	add	r7, sp, #0
1004d80a:	0002      	movs	r2, r0
1004d80c:	1dbb      	adds	r3, r7, #6
1004d80e:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
1004d810:	1dbb      	adds	r3, r7, #6
1004d812:	881b      	ldrh	r3, [r3, #0]
1004d814:	0018      	movs	r0, r3
1004d816:	f00e ff47 	bl	1005c6a8 <LLC_authenticated_payload_timeout_processing>
}
1004d81a:	46c0      	nop			@ (mov r8, r8)
1004d81c:	46bd      	mov	sp, r7
1004d81e:	b002      	add	sp, #8
1004d820:	bd80      	pop	{r7, pc}

1004d822 <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
1004d822:	b580      	push	{r7, lr}
1004d824:	b082      	sub	sp, #8
1004d826:	af00      	add	r7, sp, #0
1004d828:	0002      	movs	r2, r0
1004d82a:	1dfb      	adds	r3, r7, #7
1004d82c:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
1004d82e:	1dfb      	adds	r3, r7, #7
1004d830:	781b      	ldrb	r3, [r3, #0]
1004d832:	0018      	movs	r0, r3
1004d834:	f00f f905 	bl	1005ca42 <LL_phy_upd_pending>
1004d838:	0003      	movs	r3, r0
}
1004d83a:	0018      	movs	r0, r3
1004d83c:	46bd      	mov	sp, r7
1004d83e:	b002      	add	sp, #8
1004d840:	bd80      	pop	{r7, pc}

1004d842 <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
1004d842:	b580      	push	{r7, lr}
1004d844:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
1004d846:	f00f f8b7 	bl	1005c9b8 <LL_phy_update_init>
1004d84a:	0003      	movs	r3, r0
}
1004d84c:	0018      	movs	r0, r3
1004d84e:	46bd      	mov	sp, r7
1004d850:	bd80      	pop	{r7, pc}

1004d852 <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
1004d852:	b580      	push	{r7, lr}
1004d854:	b082      	sub	sp, #8
1004d856:	af00      	add	r7, sp, #0
1004d858:	0002      	movs	r2, r0
1004d85a:	1dfb      	adds	r3, r7, #7
1004d85c:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
1004d85e:	1dfb      	adds	r3, r7, #7
1004d860:	781b      	ldrb	r3, [r3, #0]
1004d862:	0018      	movs	r0, r3
1004d864:	f00f f8b2 	bl	1005c9cc <LL_phy_update_init_per_st_data>
1004d868:	0003      	movs	r3, r0
}
1004d86a:	0018      	movs	r0, r3
1004d86c:	46bd      	mov	sp, r7
1004d86e:	b002      	add	sp, #8
1004d870:	bd80      	pop	{r7, pc}

1004d872 <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
1004d872:	b580      	push	{r7, lr}
1004d874:	b082      	sub	sp, #8
1004d876:	af00      	add	r7, sp, #0
1004d878:	0002      	movs	r2, r0
1004d87a:	1dfb      	adds	r3, r7, #7
1004d87c:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1004d87e:	1dfb      	adds	r3, r7, #7
1004d880:	781b      	ldrb	r3, [r3, #0]
1004d882:	0018      	movs	r0, r3
1004d884:	f00f fc8c 	bl	1005d1a0 <LL_phy_upd_evt_pending_check_isr>
}
1004d888:	46c0      	nop			@ (mov r8, r8)
1004d88a:	46bd      	mov	sp, r7
1004d88c:	b002      	add	sp, #8
1004d88e:	bd80      	pop	{r7, pc}

1004d890 <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1004d890:	b580      	push	{r7, lr}
1004d892:	b084      	sub	sp, #16
1004d894:	af00      	add	r7, sp, #0
1004d896:	60f8      	str	r0, [r7, #12]
1004d898:	60b9      	str	r1, [r7, #8]
1004d89a:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
1004d89c:	687a      	ldr	r2, [r7, #4]
1004d89e:	68b9      	ldr	r1, [r7, #8]
1004d8a0:	68fb      	ldr	r3, [r7, #12]
1004d8a2:	0018      	movs	r0, r3
1004d8a4:	f010 fd4a 	bl	1005e33c <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
1004d8a8:	46c0      	nop			@ (mov r8, r8)
1004d8aa:	46bd      	mov	sp, r7
1004d8ac:	b004      	add	sp, #16
1004d8ae:	bd80      	pop	{r7, pc}

1004d8b0 <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1004d8b0:	b580      	push	{r7, lr}
1004d8b2:	b082      	sub	sp, #8
1004d8b4:	af00      	add	r7, sp, #0
1004d8b6:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
1004d8b8:	687b      	ldr	r3, [r7, #4]
1004d8ba:	0018      	movs	r0, r3
1004d8bc:	f010 feca 	bl	1005e654 <EADV_start_request_radio_tasks>
1004d8c0:	0003      	movs	r3, r0
}
1004d8c2:	0018      	movs	r0, r3
1004d8c4:	46bd      	mov	sp, r7
1004d8c6:	b002      	add	sp, #8
1004d8c8:	bd80      	pop	{r7, pc}

1004d8ca <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
1004d8ca:	b5b0      	push	{r4, r5, r7, lr}
1004d8cc:	b08a      	sub	sp, #40	@ 0x28
1004d8ce:	af08      	add	r7, sp, #32
1004d8d0:	0005      	movs	r5, r0
1004d8d2:	000c      	movs	r4, r1
1004d8d4:	0010      	movs	r0, r2
1004d8d6:	0019      	movs	r1, r3
1004d8d8:	1dfb      	adds	r3, r7, #7
1004d8da:	1c2a      	adds	r2, r5, #0
1004d8dc:	701a      	strb	r2, [r3, #0]
1004d8de:	1dbb      	adds	r3, r7, #6
1004d8e0:	1c22      	adds	r2, r4, #0
1004d8e2:	701a      	strb	r2, [r3, #0]
1004d8e4:	1d7b      	adds	r3, r7, #5
1004d8e6:	1c02      	adds	r2, r0, #0
1004d8e8:	701a      	strb	r2, [r3, #0]
1004d8ea:	1d3b      	adds	r3, r7, #4
1004d8ec:	1c0a      	adds	r2, r1, #0
1004d8ee:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1004d8f0:	1d3b      	adds	r3, r7, #4
1004d8f2:	781c      	ldrb	r4, [r3, #0]
1004d8f4:	1d7b      	adds	r3, r7, #5
1004d8f6:	781a      	ldrb	r2, [r3, #0]
1004d8f8:	1dbb      	adds	r3, r7, #6
1004d8fa:	7819      	ldrb	r1, [r3, #0]
1004d8fc:	1dfb      	adds	r3, r7, #7
1004d8fe:	7818      	ldrb	r0, [r3, #0]
1004d900:	2330      	movs	r3, #48	@ 0x30
1004d902:	18fb      	adds	r3, r7, r3
1004d904:	781b      	ldrb	r3, [r3, #0]
1004d906:	9306      	str	r3, [sp, #24]
1004d908:	232c      	movs	r3, #44	@ 0x2c
1004d90a:	18fb      	adds	r3, r7, r3
1004d90c:	781b      	ldrb	r3, [r3, #0]
1004d90e:	9305      	str	r3, [sp, #20]
1004d910:	2328      	movs	r3, #40	@ 0x28
1004d912:	18fb      	adds	r3, r7, r3
1004d914:	781b      	ldrb	r3, [r3, #0]
1004d916:	9304      	str	r3, [sp, #16]
1004d918:	2324      	movs	r3, #36	@ 0x24
1004d91a:	18fb      	adds	r3, r7, r3
1004d91c:	781b      	ldrb	r3, [r3, #0]
1004d91e:	9303      	str	r3, [sp, #12]
1004d920:	2320      	movs	r3, #32
1004d922:	18fb      	adds	r3, r7, r3
1004d924:	781b      	ldrb	r3, [r3, #0]
1004d926:	9302      	str	r3, [sp, #8]
1004d928:	231c      	movs	r3, #28
1004d92a:	18fb      	adds	r3, r7, r3
1004d92c:	781b      	ldrb	r3, [r3, #0]
1004d92e:	9301      	str	r3, [sp, #4]
1004d930:	2318      	movs	r3, #24
1004d932:	18fb      	adds	r3, r7, r3
1004d934:	781b      	ldrb	r3, [r3, #0]
1004d936:	9300      	str	r3, [sp, #0]
1004d938:	0023      	movs	r3, r4
1004d93a:	f011 f94f 	bl	1005ebdc <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
1004d93e:	46c0      	nop			@ (mov r8, r8)
1004d940:	46bd      	mov	sp, r7
1004d942:	b002      	add	sp, #8
1004d944:	bdb0      	pop	{r4, r5, r7, pc}

1004d946 <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
1004d946:	b580      	push	{r7, lr}
1004d948:	b082      	sub	sp, #8
1004d94a:	af00      	add	r7, sp, #0
1004d94c:	0002      	movs	r2, r0
1004d94e:	1dbb      	adds	r3, r7, #6
1004d950:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
1004d952:	1dbb      	adds	r3, r7, #6
1004d954:	881b      	ldrh	r3, [r3, #0]
1004d956:	0018      	movs	r0, r3
1004d958:	f012 fcea 	bl	10060330 <smp_fsm_process_actions_wrt_state_tsk>
}
1004d95c:	46c0      	nop			@ (mov r8, r8)
1004d95e:	46bd      	mov	sp, r7
1004d960:	b002      	add	sp, #8
1004d962:	bd80      	pop	{r7, pc}

1004d964 <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1004d964:	b580      	push	{r7, lr}
1004d966:	b082      	sub	sp, #8
1004d968:	af00      	add	r7, sp, #0
1004d96a:	0002      	movs	r2, r0
1004d96c:	1dbb      	adds	r3, r7, #6
1004d96e:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
1004d970:	1dbb      	adds	r3, r7, #6
1004d972:	881b      	ldrh	r3, [r3, #0]
1004d974:	0018      	movs	r0, r3
1004d976:	f012 fdbf 	bl	100604f8 <smp_rxp_process_rxed_packets_tsk>
}
1004d97a:	46c0      	nop			@ (mov r8, r8)
1004d97c:	46bd      	mov	sp, r7
1004d97e:	b002      	add	sp, #8
1004d980:	bd80      	pop	{r7, pc}

1004d982 <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1004d982:	b580      	push	{r7, lr}
1004d984:	af00      	add	r7, sp, #0
    smp_init();
1004d986:	f012 ff17 	bl	100607b8 <smp_init>
}
1004d98a:	46c0      	nop			@ (mov r8, r8)
1004d98c:	46bd      	mov	sp, r7
1004d98e:	bd80      	pop	{r7, pc}

1004d990 <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1004d990:	b580      	push	{r7, lr}
1004d992:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
1004d994:	f007 fc66 	bl	10055264 <GAT_att_cmn_init>
}
1004d998:	46c0      	nop			@ (mov r8, r8)
1004d99a:	46bd      	mov	sp, r7
1004d99c:	bd80      	pop	{r7, pc}

1004d99e <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1004d99e:	b580      	push	{r7, lr}
1004d9a0:	b082      	sub	sp, #8
1004d9a2:	af00      	add	r7, sp, #0
1004d9a4:	0002      	movs	r2, r0
1004d9a6:	1dbb      	adds	r3, r7, #6
1004d9a8:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
1004d9aa:	1dbb      	adds	r3, r7, #6
1004d9ac:	881b      	ldrh	r3, [r3, #0]
1004d9ae:	0018      	movs	r0, r3
1004d9b0:	f007 fcc4 	bl	1005533c <GAT_att_cmn_timer_expire_tsk>
}
1004d9b4:	46c0      	nop			@ (mov r8, r8)
1004d9b6:	46bd      	mov	sp, r7
1004d9b8:	b002      	add	sp, #8
1004d9ba:	bd80      	pop	{r7, pc}

1004d9bc <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
1004d9bc:	b580      	push	{r7, lr}
1004d9be:	b082      	sub	sp, #8
1004d9c0:	af00      	add	r7, sp, #0
1004d9c2:	0002      	movs	r2, r0
1004d9c4:	1dbb      	adds	r3, r7, #6
1004d9c6:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
1004d9c8:	1dbb      	adds	r3, r7, #6
1004d9ca:	881b      	ldrh	r3, [r3, #0]
1004d9cc:	0018      	movs	r0, r3
1004d9ce:	f007 fd29 	bl	10055424 <GAT_att_cmn_tx_pool_evt_tsk>
}
1004d9d2:	46c0      	nop			@ (mov r8, r8)
1004d9d4:	46bd      	mov	sp, r7
1004d9d6:	b002      	add	sp, #8
1004d9d8:	bd80      	pop	{r7, pc}

1004d9da <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
1004d9da:	b580      	push	{r7, lr}
1004d9dc:	b082      	sub	sp, #8
1004d9de:	af00      	add	r7, sp, #0
1004d9e0:	0002      	movs	r2, r0
1004d9e2:	1dbb      	adds	r3, r7, #6
1004d9e4:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
1004d9e6:	1dbb      	adds	r3, r7, #6
1004d9e8:	881b      	ldrh	r3, [r3, #0]
1004d9ea:	0018      	movs	r0, r3
1004d9ec:	f008 f846 	bl	10055a7c <GAT_att_srv_process_rx_pckt_tsk>
}
1004d9f0:	46c0      	nop			@ (mov r8, r8)
1004d9f2:	46bd      	mov	sp, r7
1004d9f4:	b002      	add	sp, #8
1004d9f6:	bd80      	pop	{r7, pc}

1004d9f8 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
1004d9f8:	b580      	push	{r7, lr}
1004d9fa:	b082      	sub	sp, #8
1004d9fc:	af00      	add	r7, sp, #0
1004d9fe:	0002      	movs	r2, r0
1004da00:	1dbb      	adds	r3, r7, #6
1004da02:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
1004da04:	1dbb      	adds	r3, r7, #6
1004da06:	881b      	ldrh	r3, [r3, #0]
1004da08:	0018      	movs	r0, r3
1004da0a:	f009 f921 	bl	10056c50 <GAT_srv_db_hash_tsk>
}
1004da0e:	46c0      	nop			@ (mov r8, r8)
1004da10:	46bd      	mov	sp, r7
1004da12:	b002      	add	sp, #8
1004da14:	bd80      	pop	{r7, pc}

1004da16 <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
1004da16:	b580      	push	{r7, lr}
1004da18:	b082      	sub	sp, #8
1004da1a:	af00      	add	r7, sp, #0
1004da1c:	0002      	movs	r2, r0
1004da1e:	1dbb      	adds	r3, r7, #6
1004da20:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
1004da22:	1dbb      	adds	r3, r7, #6
1004da24:	881b      	ldrh	r3, [r3, #0]
1004da26:	0018      	movs	r0, r3
1004da28:	f009 f9cc 	bl	10056dc4 <GAT_srv_send_srv_change_tsk>
}
1004da2c:	46c0      	nop			@ (mov r8, r8)
1004da2e:	46bd      	mov	sp, r7
1004da30:	b002      	add	sp, #8
1004da32:	bd80      	pop	{r7, pc}

1004da34 <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
1004da34:	b580      	push	{r7, lr}
1004da36:	b082      	sub	sp, #8
1004da38:	af00      	add	r7, sp, #0
1004da3a:	0002      	movs	r2, r0
1004da3c:	1dbb      	adds	r3, r7, #6
1004da3e:	801a      	strh	r2, [r3, #0]
1004da40:	1d7b      	adds	r3, r7, #5
1004da42:	1c0a      	adds	r2, r1, #0
1004da44:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
1004da46:	1d7b      	adds	r3, r7, #5
1004da48:	781a      	ldrb	r2, [r3, #0]
1004da4a:	1dbb      	adds	r3, r7, #6
1004da4c:	881b      	ldrh	r3, [r3, #0]
1004da4e:	0011      	movs	r1, r2
1004da50:	0018      	movs	r0, r3
1004da52:	f005 fb49 	bl	100530e8 <aci_gap_terminate_api>
1004da56:	0003      	movs	r3, r0
                                 Reason);
}
1004da58:	0018      	movs	r0, r3
1004da5a:	46bd      	mov	sp, r7
1004da5c:	b002      	add	sp, #8
1004da5e:	bd80      	pop	{r7, pc}

1004da60 <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1004da60:	b580      	push	{r7, lr}
1004da62:	b082      	sub	sp, #8
1004da64:	af00      	add	r7, sp, #0
1004da66:	0002      	movs	r2, r0
1004da68:	1dfb      	adds	r3, r7, #7
1004da6a:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
1004da6c:	1dfb      	adds	r3, r7, #7
1004da6e:	781b      	ldrb	r3, [r3, #0]
1004da70:	0018      	movs	r0, r3
1004da72:	f005 fbc4 	bl	100531fe <aci_gap_set_io_capability_api>
1004da76:	0003      	movs	r3, r0
}
1004da78:	0018      	movs	r0, r3
1004da7a:	46bd      	mov	sp, r7
1004da7c:	b002      	add	sp, #8
1004da7e:	bd80      	pop	{r7, pc}

1004da80 <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1004da80:	b5b0      	push	{r4, r5, r7, lr}
1004da82:	b086      	sub	sp, #24
1004da84:	af04      	add	r7, sp, #16
1004da86:	0005      	movs	r5, r0
1004da88:	000c      	movs	r4, r1
1004da8a:	0010      	movs	r0, r2
1004da8c:	0019      	movs	r1, r3
1004da8e:	1dfb      	adds	r3, r7, #7
1004da90:	1c2a      	adds	r2, r5, #0
1004da92:	701a      	strb	r2, [r3, #0]
1004da94:	1dbb      	adds	r3, r7, #6
1004da96:	1c22      	adds	r2, r4, #0
1004da98:	701a      	strb	r2, [r3, #0]
1004da9a:	1d7b      	adds	r3, r7, #5
1004da9c:	1c02      	adds	r2, r0, #0
1004da9e:	701a      	strb	r2, [r3, #0]
1004daa0:	1d3b      	adds	r3, r7, #4
1004daa2:	1c0a      	adds	r2, r1, #0
1004daa4:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
1004daa6:	1d3b      	adds	r3, r7, #4
1004daa8:	781c      	ldrb	r4, [r3, #0]
1004daaa:	1d7b      	adds	r3, r7, #5
1004daac:	781a      	ldrb	r2, [r3, #0]
1004daae:	1dbb      	adds	r3, r7, #6
1004dab0:	7819      	ldrb	r1, [r3, #0]
1004dab2:	1dfb      	adds	r3, r7, #7
1004dab4:	7818      	ldrb	r0, [r3, #0]
1004dab6:	2320      	movs	r3, #32
1004dab8:	18fb      	adds	r3, r7, r3
1004daba:	781b      	ldrb	r3, [r3, #0]
1004dabc:	9302      	str	r3, [sp, #8]
1004dabe:	231c      	movs	r3, #28
1004dac0:	18fb      	adds	r3, r7, r3
1004dac2:	781b      	ldrb	r3, [r3, #0]
1004dac4:	9301      	str	r3, [sp, #4]
1004dac6:	2318      	movs	r3, #24
1004dac8:	18fb      	adds	r3, r7, r3
1004daca:	781b      	ldrb	r3, [r3, #0]
1004dacc:	9300      	str	r3, [sp, #0]
1004dace:	0023      	movs	r3, r4
1004dad0:	f005 fb9e 	bl	10053210 <aci_gap_set_security_requirements_api>
1004dad4:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
1004dad6:	0018      	movs	r0, r3
1004dad8:	46bd      	mov	sp, r7
1004dada:	b002      	add	sp, #8
1004dadc:	bdb0      	pop	{r4, r5, r7, pc}

1004dade <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
1004dade:	b580      	push	{r7, lr}
1004dae0:	b082      	sub	sp, #8
1004dae2:	af00      	add	r7, sp, #0
1004dae4:	0002      	movs	r2, r0
1004dae6:	6039      	str	r1, [r7, #0]
1004dae8:	1dbb      	adds	r3, r7, #6
1004daea:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
1004daec:	683a      	ldr	r2, [r7, #0]
1004daee:	1dbb      	adds	r3, r7, #6
1004daf0:	881b      	ldrh	r3, [r3, #0]
1004daf2:	0011      	movs	r1, r2
1004daf4:	0018      	movs	r0, r3
1004daf6:	f005 fbcf 	bl	10053298 <aci_gap_passkey_resp_api>
1004dafa:	0003      	movs	r3, r0
                                    Passkey);
}
1004dafc:	0018      	movs	r0, r3
1004dafe:	46bd      	mov	sp, r7
1004db00:	b002      	add	sp, #8
1004db02:	bd80      	pop	{r7, pc}

1004db04 <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1004db04:	b580      	push	{r7, lr}
1004db06:	b082      	sub	sp, #8
1004db08:	af00      	add	r7, sp, #0
1004db0a:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
1004db0c:	687b      	ldr	r3, [r7, #4]
1004db0e:	0018      	movs	r0, r3
1004db10:	f005 fbce 	bl	100532b0 <aci_gatt_srv_add_service_api>
1004db14:	0003      	movs	r3, r0
}
1004db16:	0018      	movs	r0, r3
1004db18:	46bd      	mov	sp, r7
1004db1a:	b002      	add	sp, #8
1004db1c:	bd80      	pop	{r7, pc}

1004db1e <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
1004db1e:	b580      	push	{r7, lr}
1004db20:	b082      	sub	sp, #8
1004db22:	af00      	add	r7, sp, #0
1004db24:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1004db26:	687b      	ldr	r3, [r7, #4]
1004db28:	0018      	movs	r0, r3
1004db2a:	f005 fbc5 	bl	100532b8 <aci_gatt_srv_get_service_handle_api>
1004db2e:	0003      	movs	r3, r0
}
1004db30:	0018      	movs	r0, r3
1004db32:	46bd      	mov	sp, r7
1004db34:	b002      	add	sp, #8
1004db36:	bd80      	pop	{r7, pc}

1004db38 <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
1004db38:	b580      	push	{r7, lr}
1004db3a:	b082      	sub	sp, #8
1004db3c:	af00      	add	r7, sp, #0
1004db3e:	6078      	str	r0, [r7, #4]
1004db40:	000a      	movs	r2, r1
1004db42:	1cbb      	adds	r3, r7, #2
1004db44:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1004db46:	1cbb      	adds	r3, r7, #2
1004db48:	881a      	ldrh	r2, [r3, #0]
1004db4a:	687b      	ldr	r3, [r7, #4]
1004db4c:	0011      	movs	r1, r2
1004db4e:	0018      	movs	r0, r3
1004db50:	f005 fbb6 	bl	100532c0 <aci_gatt_srv_add_char_api>
1004db54:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1004db56:	0018      	movs	r0, r3
1004db58:	46bd      	mov	sp, r7
1004db5a:	b002      	add	sp, #8
1004db5c:	bd80      	pop	{r7, pc}

1004db5e <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
1004db5e:	b580      	push	{r7, lr}
1004db60:	b082      	sub	sp, #8
1004db62:	af00      	add	r7, sp, #0
1004db64:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1004db66:	687b      	ldr	r3, [r7, #4]
1004db68:	0018      	movs	r0, r3
1004db6a:	f005 fbad 	bl	100532c8 <aci_gatt_srv_get_char_decl_handle_api>
1004db6e:	0003      	movs	r3, r0
}
1004db70:	0018      	movs	r0, r3
1004db72:	46bd      	mov	sp, r7
1004db74:	b002      	add	sp, #8
1004db76:	bd80      	pop	{r7, pc}

1004db78 <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
1004db78:	b5b0      	push	{r4, r5, r7, lr}
1004db7a:	b084      	sub	sp, #16
1004db7c:	af02      	add	r7, sp, #8
1004db7e:	0005      	movs	r5, r0
1004db80:	000c      	movs	r4, r1
1004db82:	0010      	movs	r0, r2
1004db84:	0019      	movs	r1, r3
1004db86:	1dbb      	adds	r3, r7, #6
1004db88:	1c2a      	adds	r2, r5, #0
1004db8a:	801a      	strh	r2, [r3, #0]
1004db8c:	1d3b      	adds	r3, r7, #4
1004db8e:	1c22      	adds	r2, r4, #0
1004db90:	801a      	strh	r2, [r3, #0]
1004db92:	1cbb      	adds	r3, r7, #2
1004db94:	1c02      	adds	r2, r0, #0
1004db96:	801a      	strh	r2, [r3, #0]
1004db98:	1c7b      	adds	r3, r7, #1
1004db9a:	1c0a      	adds	r2, r1, #0
1004db9c:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
1004db9e:	1c7b      	adds	r3, r7, #1
1004dba0:	781c      	ldrb	r4, [r3, #0]
1004dba2:	1cbb      	adds	r3, r7, #2
1004dba4:	881a      	ldrh	r2, [r3, #0]
1004dba6:	1d3b      	adds	r3, r7, #4
1004dba8:	8819      	ldrh	r1, [r3, #0]
1004dbaa:	1dbb      	adds	r3, r7, #6
1004dbac:	8818      	ldrh	r0, [r3, #0]
1004dbae:	69fb      	ldr	r3, [r7, #28]
1004dbb0:	9301      	str	r3, [sp, #4]
1004dbb2:	2318      	movs	r3, #24
1004dbb4:	18fb      	adds	r3, r7, r3
1004dbb6:	881b      	ldrh	r3, [r3, #0]
1004dbb8:	9300      	str	r3, [sp, #0]
1004dbba:	0023      	movs	r3, r4
1004dbbc:	f005 fb88 	bl	100532d0 <aci_gatt_srv_resp_api>
1004dbc0:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1004dbc2:	0018      	movs	r0, r3
1004dbc4:	46bd      	mov	sp, r7
1004dbc6:	b002      	add	sp, #8
1004dbc8:	bdb0      	pop	{r4, r5, r7, pc}

1004dbca <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
1004dbca:	b5b0      	push	{r4, r5, r7, lr}
1004dbcc:	b084      	sub	sp, #16
1004dbce:	af02      	add	r7, sp, #8
1004dbd0:	0005      	movs	r5, r0
1004dbd2:	000c      	movs	r4, r1
1004dbd4:	0010      	movs	r0, r2
1004dbd6:	0019      	movs	r1, r3
1004dbd8:	1dbb      	adds	r3, r7, #6
1004dbda:	1c2a      	adds	r2, r5, #0
1004dbdc:	801a      	strh	r2, [r3, #0]
1004dbde:	1d3b      	adds	r3, r7, #4
1004dbe0:	1c22      	adds	r2, r4, #0
1004dbe2:	801a      	strh	r2, [r3, #0]
1004dbe4:	1cbb      	adds	r3, r7, #2
1004dbe6:	1c02      	adds	r2, r0, #0
1004dbe8:	801a      	strh	r2, [r3, #0]
1004dbea:	003b      	movs	r3, r7
1004dbec:	1c0a      	adds	r2, r1, #0
1004dbee:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
1004dbf0:	003b      	movs	r3, r7
1004dbf2:	881c      	ldrh	r4, [r3, #0]
1004dbf4:	1cbb      	adds	r3, r7, #2
1004dbf6:	881a      	ldrh	r2, [r3, #0]
1004dbf8:	1d3b      	adds	r3, r7, #4
1004dbfa:	8819      	ldrh	r1, [r3, #0]
1004dbfc:	1dbb      	adds	r3, r7, #6
1004dbfe:	8818      	ldrh	r0, [r3, #0]
1004dc00:	2318      	movs	r3, #24
1004dc02:	18fb      	adds	r3, r7, r3
1004dc04:	881b      	ldrh	r3, [r3, #0]
1004dc06:	9300      	str	r3, [sp, #0]
1004dc08:	0023      	movs	r3, r4
1004dc0a:	f005 fcd7 	bl	100535bc <aci_l2cap_connection_parameter_update_req_api>
1004dc0e:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
1004dc10:	0018      	movs	r0, r3
1004dc12:	46bd      	mov	sp, r7
1004dc14:	b002      	add	sp, #8
1004dc16:	bdb0      	pop	{r4, r5, r7, pc}

1004dc18 <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
1004dc18:	b580      	push	{r7, lr}
1004dc1a:	b094      	sub	sp, #80	@ 0x50
1004dc1c:	af00      	add	r7, sp, #0
1004dc1e:	60f8      	str	r0, [r7, #12]
1004dc20:	60b9      	str	r1, [r7, #8]
1004dc22:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
1004dc24:	2330      	movs	r3, #48	@ 0x30
1004dc26:	18fb      	adds	r3, r7, r3
1004dc28:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
1004dc2a:	2320      	movs	r3, #32
1004dc2c:	18fb      	adds	r3, r7, r3
1004dc2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
1004dc30:	2310      	movs	r3, #16
1004dc32:	18fb      	adds	r3, r7, r3
1004dc34:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
1004dc36:	2300      	movs	r3, #0
1004dc38:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004dc3a:	e00d      	b.n	1004dc58 <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
1004dc3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc3e:	687a      	ldr	r2, [r7, #4]
1004dc40:	18d2      	adds	r2, r2, r3
1004dc42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc44:	210f      	movs	r1, #15
1004dc46:	1acb      	subs	r3, r1, r3
1004dc48:	0019      	movs	r1, r3
1004dc4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1004dc4c:	185b      	adds	r3, r3, r1
1004dc4e:	7812      	ldrb	r2, [r2, #0]
1004dc50:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
1004dc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc54:	3301      	adds	r3, #1
1004dc56:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004dc58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc5a:	2b0f      	cmp	r3, #15
1004dc5c:	ddee      	ble.n	1004dc3c <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004dc5e:	2300      	movs	r3, #0
1004dc60:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004dc62:	e03d      	b.n	1004dce0 <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
1004dc64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc66:	2203      	movs	r2, #3
1004dc68:	1ad3      	subs	r3, r2, r3
1004dc6a:	009b      	lsls	r3, r3, #2
1004dc6c:	68fa      	ldr	r2, [r7, #12]
1004dc6e:	18d3      	adds	r3, r2, r3
1004dc70:	681a      	ldr	r2, [r3, #0]
1004dc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc74:	009b      	lsls	r3, r3, #2
1004dc76:	0019      	movs	r1, r3
1004dc78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004dc7a:	185b      	adds	r3, r3, r1
1004dc7c:	b2d2      	uxtb	r2, r2
1004dc7e:	701a      	strb	r2, [r3, #0]
1004dc80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc82:	2203      	movs	r2, #3
1004dc84:	1ad3      	subs	r3, r2, r3
1004dc86:	009b      	lsls	r3, r3, #2
1004dc88:	68fa      	ldr	r2, [r7, #12]
1004dc8a:	18d3      	adds	r3, r2, r3
1004dc8c:	681b      	ldr	r3, [r3, #0]
1004dc8e:	0a19      	lsrs	r1, r3, #8
1004dc90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dc92:	009b      	lsls	r3, r3, #2
1004dc94:	3301      	adds	r3, #1
1004dc96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004dc98:	18d3      	adds	r3, r2, r3
1004dc9a:	b2ca      	uxtb	r2, r1
1004dc9c:	701a      	strb	r2, [r3, #0]
1004dc9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dca0:	2203      	movs	r2, #3
1004dca2:	1ad3      	subs	r3, r2, r3
1004dca4:	009b      	lsls	r3, r3, #2
1004dca6:	68fa      	ldr	r2, [r7, #12]
1004dca8:	18d3      	adds	r3, r2, r3
1004dcaa:	681b      	ldr	r3, [r3, #0]
1004dcac:	0c19      	lsrs	r1, r3, #16
1004dcae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dcb0:	009b      	lsls	r3, r3, #2
1004dcb2:	3302      	adds	r3, #2
1004dcb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004dcb6:	18d3      	adds	r3, r2, r3
1004dcb8:	b2ca      	uxtb	r2, r1
1004dcba:	701a      	strb	r2, [r3, #0]
1004dcbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dcbe:	2203      	movs	r2, #3
1004dcc0:	1ad3      	subs	r3, r2, r3
1004dcc2:	009b      	lsls	r3, r3, #2
1004dcc4:	68fa      	ldr	r2, [r7, #12]
1004dcc6:	18d3      	adds	r3, r2, r3
1004dcc8:	681b      	ldr	r3, [r3, #0]
1004dcca:	0e19      	lsrs	r1, r3, #24
1004dccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dcce:	009b      	lsls	r3, r3, #2
1004dcd0:	3303      	adds	r3, #3
1004dcd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004dcd4:	18d3      	adds	r3, r2, r3
1004dcd6:	b2ca      	uxtb	r2, r1
1004dcd8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004dcda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dcdc:	3301      	adds	r3, #1
1004dcde:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004dce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dce2:	2b03      	cmp	r3, #3
1004dce4:	ddbe      	ble.n	1004dc64 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
1004dce6:	2310      	movs	r3, #16
1004dce8:	18fa      	adds	r2, r7, r3
1004dcea:	2330      	movs	r3, #48	@ 0x30
1004dcec:	18f9      	adds	r1, r7, r3
1004dcee:	2320      	movs	r3, #32
1004dcf0:	18fb      	adds	r3, r7, r3
1004dcf2:	0018      	movs	r0, r3
1004dcf4:	f000 f894 	bl	1004de20 <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004dcf8:	2300      	movs	r3, #0
1004dcfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004dcfc:	e028      	b.n	1004dd50 <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
1004dcfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd00:	009b      	lsls	r3, r3, #2
1004dd02:	3303      	adds	r3, #3
1004dd04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1004dd06:	18d3      	adds	r3, r2, r3
1004dd08:	781b      	ldrb	r3, [r3, #0]
1004dd0a:	061a      	lsls	r2, r3, #24
1004dd0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd0e:	009b      	lsls	r3, r3, #2
1004dd10:	3302      	adds	r3, #2
1004dd12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004dd14:	18cb      	adds	r3, r1, r3
1004dd16:	781b      	ldrb	r3, [r3, #0]
1004dd18:	041b      	lsls	r3, r3, #16
1004dd1a:	431a      	orrs	r2, r3
1004dd1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd1e:	009b      	lsls	r3, r3, #2
1004dd20:	3301      	adds	r3, #1
1004dd22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004dd24:	18cb      	adds	r3, r1, r3
1004dd26:	781b      	ldrb	r3, [r3, #0]
1004dd28:	021b      	lsls	r3, r3, #8
1004dd2a:	431a      	orrs	r2, r3
1004dd2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd2e:	009b      	lsls	r3, r3, #2
1004dd30:	0019      	movs	r1, r3
1004dd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004dd34:	185b      	adds	r3, r3, r1
1004dd36:	781b      	ldrb	r3, [r3, #0]
1004dd38:	0018      	movs	r0, r3
1004dd3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd3c:	2103      	movs	r1, #3
1004dd3e:	1acb      	subs	r3, r1, r3
1004dd40:	009b      	lsls	r3, r3, #2
1004dd42:	68b9      	ldr	r1, [r7, #8]
1004dd44:	18cb      	adds	r3, r1, r3
1004dd46:	4302      	orrs	r2, r0
1004dd48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004dd4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd4c:	3301      	adds	r3, #1
1004dd4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004dd50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004dd52:	2b03      	cmp	r3, #3
1004dd54:	ddd3      	ble.n	1004dcfe <AES_128_HW_enc+0xe6>
  }
}
1004dd56:	46c0      	nop			@ (mov r8, r8)
1004dd58:	46c0      	nop			@ (mov r8, r8)
1004dd5a:	46bd      	mov	sp, r7
1004dd5c:	b014      	add	sp, #80	@ 0x50
1004dd5e:	bd80      	pop	{r7, pc}

1004dd60 <LL_APB2_GRP1_EnableClock>:
{
1004dd60:	b580      	push	{r7, lr}
1004dd62:	b084      	sub	sp, #16
1004dd64:	af00      	add	r7, sp, #0
1004dd66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004dd68:	4b07      	ldr	r3, [pc, #28]	@ (1004dd88 <LL_APB2_GRP1_EnableClock+0x28>)
1004dd6a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004dd6c:	4b06      	ldr	r3, [pc, #24]	@ (1004dd88 <LL_APB2_GRP1_EnableClock+0x28>)
1004dd6e:	687a      	ldr	r2, [r7, #4]
1004dd70:	430a      	orrs	r2, r1
1004dd72:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004dd74:	4b04      	ldr	r3, [pc, #16]	@ (1004dd88 <LL_APB2_GRP1_EnableClock+0x28>)
1004dd76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004dd78:	687a      	ldr	r2, [r7, #4]
1004dd7a:	4013      	ands	r3, r2
1004dd7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004dd7e:	68fb      	ldr	r3, [r7, #12]
}
1004dd80:	46c0      	nop			@ (mov r8, r8)
1004dd82:	46bd      	mov	sp, r7
1004dd84:	b004      	add	sp, #16
1004dd86:	bd80      	pop	{r7, pc}
1004dd88:	48400000 	.word	0x48400000

1004dd8c <LL_APB2_GRP1_IsEnabledClock>:
{
1004dd8c:	b580      	push	{r7, lr}
1004dd8e:	b082      	sub	sp, #8
1004dd90:	af00      	add	r7, sp, #0
1004dd92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004dd94:	4b06      	ldr	r3, [pc, #24]	@ (1004ddb0 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004dd96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004dd98:	687a      	ldr	r2, [r7, #4]
1004dd9a:	4013      	ands	r3, r2
1004dd9c:	687a      	ldr	r2, [r7, #4]
1004dd9e:	429a      	cmp	r2, r3
1004dda0:	d101      	bne.n	1004dda6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004dda2:	2301      	movs	r3, #1
1004dda4:	e000      	b.n	1004dda8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004dda6:	2300      	movs	r3, #0
}
1004dda8:	0018      	movs	r0, r3
1004ddaa:	46bd      	mov	sp, r7
1004ddac:	b002      	add	sp, #8
1004ddae:	bd80      	pop	{r7, pc}
1004ddb0:	48400000 	.word	0x48400000

1004ddb4 <LL_APB2_GRP1_ForceReset>:
{
1004ddb4:	b580      	push	{r7, lr}
1004ddb6:	b082      	sub	sp, #8
1004ddb8:	af00      	add	r7, sp, #0
1004ddba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004ddbc:	4b04      	ldr	r3, [pc, #16]	@ (1004ddd0 <LL_APB2_GRP1_ForceReset+0x1c>)
1004ddbe:	6c19      	ldr	r1, [r3, #64]	@ 0x40
1004ddc0:	4b03      	ldr	r3, [pc, #12]	@ (1004ddd0 <LL_APB2_GRP1_ForceReset+0x1c>)
1004ddc2:	687a      	ldr	r2, [r7, #4]
1004ddc4:	430a      	orrs	r2, r1
1004ddc6:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004ddc8:	46c0      	nop			@ (mov r8, r8)
1004ddca:	46bd      	mov	sp, r7
1004ddcc:	b002      	add	sp, #8
1004ddce:	bd80      	pop	{r7, pc}
1004ddd0:	48400000 	.word	0x48400000

1004ddd4 <LL_APB2_GRP1_ReleaseReset>:
{
1004ddd4:	b580      	push	{r7, lr}
1004ddd6:	b082      	sub	sp, #8
1004ddd8:	af00      	add	r7, sp, #0
1004ddda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004dddc:	4b05      	ldr	r3, [pc, #20]	@ (1004ddf4 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004ddde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004dde0:	687b      	ldr	r3, [r7, #4]
1004dde2:	43d9      	mvns	r1, r3
1004dde4:	4b03      	ldr	r3, [pc, #12]	@ (1004ddf4 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004dde6:	400a      	ands	r2, r1
1004dde8:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004ddea:	46c0      	nop			@ (mov r8, r8)
1004ddec:	46bd      	mov	sp, r7
1004ddee:	b002      	add	sp, #8
1004ddf0:	bd80      	pop	{r7, pc}
1004ddf2:	46c0      	nop			@ (mov r8, r8)
1004ddf4:	48400000 	.word	0x48400000

1004ddf8 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
1004ddf8:	b580      	push	{r7, lr}
1004ddfa:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004ddfc:	2001      	movs	r0, #1
1004ddfe:	f7ff ffc5 	bl	1004dd8c <LL_APB2_GRP1_IsEnabledClock>
1004de02:	1e03      	subs	r3, r0, #0
1004de04:	d108      	bne.n	1004de18 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004de06:	2001      	movs	r0, #1
1004de08:	f7ff ffd4 	bl	1004ddb4 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004de0c:	2001      	movs	r0, #1
1004de0e:	f7ff ffe1 	bl	1004ddd4 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004de12:	2001      	movs	r0, #1
1004de14:	f7ff ffa4 	bl	1004dd60 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
1004de18:	2300      	movs	r3, #0
}
1004de1a:	0018      	movs	r0, r3
1004de1c:	46bd      	mov	sp, r7
1004de1e:	bd80      	pop	{r7, pc}

1004de20 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
1004de20:	b590      	push	{r4, r7, lr}
1004de22:	b087      	sub	sp, #28
1004de24:	af00      	add	r7, sp, #0
1004de26:	60f8      	str	r0, [r7, #12]
1004de28:	60b9      	str	r1, [r7, #8]
1004de2a:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
1004de2c:	4b31      	ldr	r3, [pc, #196]	@ (1004def4 <HW_AES_Encrypt+0xd4>)
1004de2e:	781b      	ldrb	r3, [r3, #0]
1004de30:	b2db      	uxtb	r3, r3
1004de32:	3301      	adds	r3, #1
1004de34:	b2da      	uxtb	r2, r3
1004de36:	4b2f      	ldr	r3, [pc, #188]	@ (1004def4 <HW_AES_Encrypt+0xd4>)
1004de38:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
1004de3a:	2417      	movs	r4, #23
1004de3c:	193b      	adds	r3, r7, r4
1004de3e:	4a2d      	ldr	r2, [pc, #180]	@ (1004def4 <HW_AES_Encrypt+0xd4>)
1004de40:	7812      	ldrb	r2, [r2, #0]
1004de42:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
1004de44:	23c0      	movs	r3, #192	@ 0xc0
1004de46:	05db      	lsls	r3, r3, #23
1004de48:	68ba      	ldr	r2, [r7, #8]
1004de4a:	6812      	ldr	r2, [r2, #0]
1004de4c:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
1004de4e:	68bb      	ldr	r3, [r7, #8]
1004de50:	1d1a      	adds	r2, r3, #4
1004de52:	23c0      	movs	r3, #192	@ 0xc0
1004de54:	05db      	lsls	r3, r3, #23
1004de56:	6812      	ldr	r2, [r2, #0]
1004de58:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
1004de5a:	68bb      	ldr	r3, [r7, #8]
1004de5c:	3308      	adds	r3, #8
1004de5e:	001a      	movs	r2, r3
1004de60:	23c0      	movs	r3, #192	@ 0xc0
1004de62:	05db      	lsls	r3, r3, #23
1004de64:	6812      	ldr	r2, [r2, #0]
1004de66:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
1004de68:	68bb      	ldr	r3, [r7, #8]
1004de6a:	330c      	adds	r3, #12
1004de6c:	001a      	movs	r2, r3
1004de6e:	23c0      	movs	r3, #192	@ 0xc0
1004de70:	05db      	lsls	r3, r3, #23
1004de72:	6812      	ldr	r2, [r2, #0]
1004de74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
1004de76:	23c0      	movs	r3, #192	@ 0xc0
1004de78:	05db      	lsls	r3, r3, #23
1004de7a:	68fa      	ldr	r2, [r7, #12]
1004de7c:	6812      	ldr	r2, [r2, #0]
1004de7e:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
1004de80:	68fb      	ldr	r3, [r7, #12]
1004de82:	1d1a      	adds	r2, r3, #4
1004de84:	23c0      	movs	r3, #192	@ 0xc0
1004de86:	05db      	lsls	r3, r3, #23
1004de88:	6812      	ldr	r2, [r2, #0]
1004de8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
1004de8c:	68fb      	ldr	r3, [r7, #12]
1004de8e:	3308      	adds	r3, #8
1004de90:	001a      	movs	r2, r3
1004de92:	23c0      	movs	r3, #192	@ 0xc0
1004de94:	05db      	lsls	r3, r3, #23
1004de96:	6812      	ldr	r2, [r2, #0]
1004de98:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
1004de9a:	68fb      	ldr	r3, [r7, #12]
1004de9c:	330c      	adds	r3, #12
1004de9e:	001a      	movs	r2, r3
1004dea0:	23c0      	movs	r3, #192	@ 0xc0
1004dea2:	05db      	lsls	r3, r3, #23
1004dea4:	6812      	ldr	r2, [r2, #0]
1004dea6:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
1004dea8:	f000 f826 	bl	1004def8 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
1004deac:	23c0      	movs	r3, #192	@ 0xc0
1004deae:	05db      	lsls	r3, r3, #23
1004deb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004deb2:	687b      	ldr	r3, [r7, #4]
1004deb4:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
1004deb6:	23c0      	movs	r3, #192	@ 0xc0
1004deb8:	05da      	lsls	r2, r3, #23
1004deba:	687b      	ldr	r3, [r7, #4]
1004debc:	3304      	adds	r3, #4
1004debe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
1004dec0:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
1004dec2:	23c0      	movs	r3, #192	@ 0xc0
1004dec4:	05da      	lsls	r2, r3, #23
1004dec6:	687b      	ldr	r3, [r7, #4]
1004dec8:	3308      	adds	r3, #8
1004deca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004decc:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
1004dece:	23c0      	movs	r3, #192	@ 0xc0
1004ded0:	05da      	lsls	r2, r3, #23
1004ded2:	687b      	ldr	r3, [r7, #4]
1004ded4:	330c      	adds	r3, #12
1004ded6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
1004ded8:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
1004deda:	4b06      	ldr	r3, [pc, #24]	@ (1004def4 <HW_AES_Encrypt+0xd4>)
1004dedc:	781b      	ldrb	r3, [r3, #0]
1004dede:	b2db      	uxtb	r3, r3
1004dee0:	193a      	adds	r2, r7, r4
1004dee2:	7812      	ldrb	r2, [r2, #0]
1004dee4:	429a      	cmp	r2, r3
1004dee6:	d1a8      	bne.n	1004de3a <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
1004dee8:	2300      	movs	r3, #0
}
1004deea:	0018      	movs	r0, r3
1004deec:	46bd      	mov	sp, r7
1004deee:	b007      	add	sp, #28
1004def0:	bd90      	pop	{r4, r7, pc}
1004def2:	46c0      	nop			@ (mov r8, r8)
1004def4:	200022a8 	.word	0x200022a8

1004def8 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
1004def8:	b580      	push	{r7, lr}
1004defa:	b082      	sub	sp, #8
1004defc:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
1004defe:	1dfb      	adds	r3, r7, #7
1004df00:	2264      	movs	r2, #100	@ 0x64
1004df02:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
1004df04:	23c0      	movs	r3, #192	@ 0xc0
1004df06:	05db      	lsls	r3, r3, #23
1004df08:	0018      	movs	r0, r3
1004df0a:	f000 f81c 	bl	1004df46 <LL_AES_StartManualEncription>
    do
    {
        i--;
1004df0e:	1dfb      	adds	r3, r7, #7
1004df10:	781b      	ldrb	r3, [r3, #0]
1004df12:	b2db      	uxtb	r3, r3
1004df14:	3b01      	subs	r3, #1
1004df16:	b2da      	uxtb	r2, r3
1004df18:	1dfb      	adds	r3, r7, #7
1004df1a:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
1004df1c:	23c0      	movs	r3, #192	@ 0xc0
1004df1e:	05db      	lsls	r3, r3, #23
1004df20:	0018      	movs	r0, r3
1004df22:	f000 f81e 	bl	1004df62 <LL_AES_IsBusy>
1004df26:	1e03      	subs	r3, r0, #0
1004df28:	d005      	beq.n	1004df36 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
1004df2a:	1dfb      	adds	r3, r7, #7
1004df2c:	781b      	ldrb	r3, [r3, #0]
1004df2e:	b2db      	uxtb	r3, r3
1004df30:	2b00      	cmp	r3, #0
1004df32:	d1ec      	bne.n	1004df0e <HW_AES_Start+0x16>
1004df34:	e000      	b.n	1004df38 <HW_AES_Start+0x40>
            break;
1004df36:	46c0      	nop			@ (mov r8, r8)

    return i;
1004df38:	1dfb      	adds	r3, r7, #7
1004df3a:	781b      	ldrb	r3, [r3, #0]
1004df3c:	b2db      	uxtb	r3, r3
}
1004df3e:	0018      	movs	r0, r3
1004df40:	46bd      	mov	sp, r7
1004df42:	b002      	add	sp, #8
1004df44:	bd80      	pop	{r7, pc}

1004df46 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
1004df46:	b580      	push	{r7, lr}
1004df48:	b082      	sub	sp, #8
1004df4a:	af00      	add	r7, sp, #0
1004df4c:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
1004df4e:	687b      	ldr	r3, [r7, #4]
1004df50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004df52:	2201      	movs	r2, #1
1004df54:	431a      	orrs	r2, r3
1004df56:	687b      	ldr	r3, [r7, #4]
1004df58:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004df5a:	46c0      	nop			@ (mov r8, r8)
1004df5c:	46bd      	mov	sp, r7
1004df5e:	b002      	add	sp, #8
1004df60:	bd80      	pop	{r7, pc}

1004df62 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
1004df62:	b580      	push	{r7, lr}
1004df64:	b082      	sub	sp, #8
1004df66:	af00      	add	r7, sp, #0
1004df68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
1004df6a:	687b      	ldr	r3, [r7, #4]
1004df6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004df6e:	2201      	movs	r2, #1
1004df70:	4013      	ands	r3, r2
1004df72:	2b01      	cmp	r3, #1
1004df74:	d101      	bne.n	1004df7a <LL_AES_IsBusy+0x18>
1004df76:	2301      	movs	r3, #1
1004df78:	e000      	b.n	1004df7c <LL_AES_IsBusy+0x1a>
1004df7a:	2300      	movs	r3, #0
}
1004df7c:	0018      	movs	r0, r3
1004df7e:	46bd      	mov	sp, r7
1004df80:	b002      	add	sp, #8
1004df82:	bd80      	pop	{r7, pc}

1004df84 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
1004df84:	b580      	push	{r7, lr}
1004df86:	b082      	sub	sp, #8
1004df88:	af00      	add	r7, sp, #0
1004df8a:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
1004df8c:	687b      	ldr	r3, [r7, #4]
1004df8e:	681b      	ldr	r3, [r3, #0]
1004df90:	2280      	movs	r2, #128	@ 0x80
1004df92:	0352      	lsls	r2, r2, #13
1004df94:	431a      	orrs	r2, r3
1004df96:	687b      	ldr	r3, [r7, #4]
1004df98:	601a      	str	r2, [r3, #0]
}
1004df9a:	46c0      	nop			@ (mov r8, r8)
1004df9c:	46bd      	mov	sp, r7
1004df9e:	b002      	add	sp, #8
1004dfa0:	bd80      	pop	{r7, pc}

1004dfa2 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
1004dfa2:	b580      	push	{r7, lr}
1004dfa4:	b082      	sub	sp, #8
1004dfa6:	af00      	add	r7, sp, #0
1004dfa8:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
1004dfaa:	687b      	ldr	r3, [r7, #4]
1004dfac:	681b      	ldr	r3, [r3, #0]
1004dfae:	2280      	movs	r2, #128	@ 0x80
1004dfb0:	0312      	lsls	r2, r2, #12
1004dfb2:	431a      	orrs	r2, r3
1004dfb4:	687b      	ldr	r3, [r7, #4]
1004dfb6:	601a      	str	r2, [r3, #0]
}
1004dfb8:	46c0      	nop			@ (mov r8, r8)
1004dfba:	46bd      	mov	sp, r7
1004dfbc:	b002      	add	sp, #8
1004dfbe:	bd80      	pop	{r7, pc}

1004dfc0 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
1004dfc0:	b580      	push	{r7, lr}
1004dfc2:	b082      	sub	sp, #8
1004dfc4:	af00      	add	r7, sp, #0
1004dfc6:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004dfc8:	687b      	ldr	r3, [r7, #4]
1004dfca:	681b      	ldr	r3, [r3, #0]
1004dfcc:	2280      	movs	r2, #128	@ 0x80
1004dfce:	0292      	lsls	r2, r2, #10
1004dfd0:	431a      	orrs	r2, r3
1004dfd2:	687b      	ldr	r3, [r7, #4]
1004dfd4:	601a      	str	r2, [r3, #0]
}
1004dfd6:	46c0      	nop			@ (mov r8, r8)
1004dfd8:	46bd      	mov	sp, r7
1004dfda:	b002      	add	sp, #8
1004dfdc:	bd80      	pop	{r7, pc}
	...

1004dfe0 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1004dfe0:	b580      	push	{r7, lr}
1004dfe2:	af00      	add	r7, sp, #0
  PKAMGR_Init();
1004dfe4:	f001 fc98 	bl	1004f918 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
1004dfe8:	4b07      	ldr	r3, [pc, #28]	@ (1004e008 <HW_PKA_Init+0x28>)
1004dfea:	0018      	movs	r0, r3
1004dfec:	f7ff ffca 	bl	1004df84 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1004dff0:	4b05      	ldr	r3, [pc, #20]	@ (1004e008 <HW_PKA_Init+0x28>)
1004dff2:	0018      	movs	r0, r3
1004dff4:	f7ff ffd5 	bl	1004dfa2 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
1004dff8:	4b03      	ldr	r3, [pc, #12]	@ (1004e008 <HW_PKA_Init+0x28>)
1004dffa:	0018      	movs	r0, r3
1004dffc:	f7ff ffe0 	bl	1004dfc0 <LL_PKA_EnableIT_PROCEND>
}
1004e000:	46c0      	nop			@ (mov r8, r8)
1004e002:	46bd      	mov	sp, r7
1004e004:	bd80      	pop	{r7, pc}
1004e006:	46c0      	nop			@ (mov r8, r8)
1004e008:	48300000 	.word	0x48300000

1004e00c <LL_AHB1_GRP1_EnableClock>:
{
1004e00c:	b580      	push	{r7, lr}
1004e00e:	b084      	sub	sp, #16
1004e010:	af00      	add	r7, sp, #0
1004e012:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004e014:	4b07      	ldr	r3, [pc, #28]	@ (1004e034 <LL_AHB1_GRP1_EnableClock+0x28>)
1004e016:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004e018:	4b06      	ldr	r3, [pc, #24]	@ (1004e034 <LL_AHB1_GRP1_EnableClock+0x28>)
1004e01a:	687a      	ldr	r2, [r7, #4]
1004e01c:	430a      	orrs	r2, r1
1004e01e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004e020:	4b04      	ldr	r3, [pc, #16]	@ (1004e034 <LL_AHB1_GRP1_EnableClock+0x28>)
1004e022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e024:	687a      	ldr	r2, [r7, #4]
1004e026:	4013      	ands	r3, r2
1004e028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004e02a:	68fb      	ldr	r3, [r7, #12]
}
1004e02c:	46c0      	nop			@ (mov r8, r8)
1004e02e:	46bd      	mov	sp, r7
1004e030:	b004      	add	sp, #16
1004e032:	bd80      	pop	{r7, pc}
1004e034:	48400000 	.word	0x48400000

1004e038 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
1004e038:	b580      	push	{r7, lr}
1004e03a:	b082      	sub	sp, #8
1004e03c:	af00      	add	r7, sp, #0
1004e03e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNG_DIS);
1004e040:	687b      	ldr	r3, [r7, #4]
1004e042:	681b      	ldr	r3, [r3, #0]
1004e044:	2204      	movs	r2, #4
1004e046:	4393      	bics	r3, r2
1004e048:	001a      	movs	r2, r3
1004e04a:	687b      	ldr	r3, [r7, #4]
1004e04c:	601a      	str	r2, [r3, #0]
}
1004e04e:	46c0      	nop			@ (mov r8, r8)
1004e050:	46bd      	mov	sp, r7
1004e052:	b002      	add	sp, #8
1004e054:	bd80      	pop	{r7, pc}

1004e056 <LL_RNG_IsActiveFlag_RNGRDY>:
  * @rmtoll SR           RNGRDY          LL_RNG_IsActiveFlag_RNGRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_RNGRDY(RNG_TypeDef *RNGx)
{
1004e056:	b580      	push	{r7, lr}
1004e058:	b082      	sub	sp, #8
1004e05a:	af00      	add	r7, sp, #0
1004e05c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_RNGRDY) == (RNG_SR_RNGRDY)) ? 1UL : 0UL);
1004e05e:	687b      	ldr	r3, [r7, #4]
1004e060:	685b      	ldr	r3, [r3, #4]
1004e062:	2201      	movs	r2, #1
1004e064:	4013      	ands	r3, r2
1004e066:	2b01      	cmp	r3, #1
1004e068:	d101      	bne.n	1004e06e <LL_RNG_IsActiveFlag_RNGRDY+0x18>
1004e06a:	2301      	movs	r3, #1
1004e06c:	e000      	b.n	1004e070 <LL_RNG_IsActiveFlag_RNGRDY+0x1a>
1004e06e:	2300      	movs	r3, #0
}
1004e070:	0018      	movs	r0, r3
1004e072:	46bd      	mov	sp, r7
1004e074:	b002      	add	sp, #8
1004e076:	bd80      	pop	{r7, pc}

1004e078 <LL_RNG_IsActiveFlag_FAULT>:
  * @rmtoll SR           FAULT          LL_RNG_IsActiveFlag_FAULT
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_FAULT(RNG_TypeDef *RNGx)
{
1004e078:	b580      	push	{r7, lr}
1004e07a:	b082      	sub	sp, #8
1004e07c:	af00      	add	r7, sp, #0
1004e07e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_FAULT) == (RNG_SR_FAULT)) ? 1UL : 0UL);
1004e080:	687b      	ldr	r3, [r7, #4]
1004e082:	685b      	ldr	r3, [r3, #4]
1004e084:	2204      	movs	r2, #4
1004e086:	4013      	ands	r3, r2
1004e088:	2b04      	cmp	r3, #4
1004e08a:	d101      	bne.n	1004e090 <LL_RNG_IsActiveFlag_FAULT+0x18>
1004e08c:	2301      	movs	r3, #1
1004e08e:	e000      	b.n	1004e092 <LL_RNG_IsActiveFlag_FAULT+0x1a>
1004e090:	2300      	movs	r3, #0
}
1004e092:	0018      	movs	r0, r3
1004e094:	46bd      	mov	sp, r7
1004e096:	b002      	add	sp, #8
1004e098:	bd80      	pop	{r7, pc}

1004e09a <LL_RNG_ReadRandData16>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData16
  * @param  RNGx RNG Instance
  * @retval Generated 16-bit random value
  */
__STATIC_INLINE uint16_t LL_RNG_ReadRandData16(RNG_TypeDef *RNGx)
{
1004e09a:	b580      	push	{r7, lr}
1004e09c:	b082      	sub	sp, #8
1004e09e:	af00      	add	r7, sp, #0
1004e0a0:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(RNGx->VAL));
1004e0a2:	687b      	ldr	r3, [r7, #4]
1004e0a4:	689b      	ldr	r3, [r3, #8]
1004e0a6:	b29b      	uxth	r3, r3
}
1004e0a8:	0018      	movs	r0, r3
1004e0aa:	46bd      	mov	sp, r7
1004e0ac:	b002      	add	sp, #8
1004e0ae:	bd80      	pop	{r7, pc}

1004e0b0 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1004e0b0:	b580      	push	{r7, lr}
1004e0b2:	af00      	add	r7, sp, #0
  }
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
1004e0b4:	2380      	movs	r3, #128	@ 0x80
1004e0b6:	02db      	lsls	r3, r3, #11
1004e0b8:	0018      	movs	r0, r3
1004e0ba:	f7ff ffa7 	bl	1004e00c <LL_AHB1_GRP1_EnableClock>

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1004e0be:	4b0b      	ldr	r3, [pc, #44]	@ (1004e0ec <HW_RNG_Init+0x3c>)
1004e0c0:	0018      	movs	r0, r3
1004e0c2:	f7ff ffb9 	bl	1004e038 <LL_RNG_Enable>

  /* Wait for DRDY flag to be raised */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004e0c6:	46c0      	nop			@ (mov r8, r8)
1004e0c8:	4b08      	ldr	r3, [pc, #32]	@ (1004e0ec <HW_RNG_Init+0x3c>)
1004e0ca:	0018      	movs	r0, r3
1004e0cc:	f7ff ffc3 	bl	1004e056 <LL_RNG_IsActiveFlag_RNGRDY>
1004e0d0:	1e03      	subs	r3, r0, #0
1004e0d2:	d0f9      	beq.n	1004e0c8 <HW_RNG_Init+0x18>

  /* Check if error occurs */
  if (  LL_RNG_IsActiveFlag_FAULT(RNG)  )
1004e0d4:	4b05      	ldr	r3, [pc, #20]	@ (1004e0ec <HW_RNG_Init+0x3c>)
1004e0d6:	0018      	movs	r0, r3
1004e0d8:	f7ff ffce 	bl	1004e078 <LL_RNG_IsActiveFlag_FAULT>
1004e0dc:	1e03      	subs	r3, r0, #0
1004e0de:	d001      	beq.n	1004e0e4 <HW_RNG_Init+0x34>
  {
    /* Clock or Seed Error detected. Set LED to blinking mode (Error type)*/
    return HW_RNG_ERROR;
1004e0e0:	2301      	movs	r3, #1
1004e0e2:	e000      	b.n	1004e0e6 <HW_RNG_Init+0x36>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
1004e0e4:	2300      	movs	r3, #0
}
1004e0e6:	0018      	movs	r0, r3
1004e0e8:	46bd      	mov	sp, r7
1004e0ea:	bd80      	pop	{r7, pc}
1004e0ec:	48600000 	.word	0x48600000

1004e0f0 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1004e0f0:	b580      	push	{r7, lr}
1004e0f2:	b082      	sub	sp, #8
1004e0f4:	af00      	add	r7, sp, #0
1004e0f6:	6078      	str	r0, [r7, #4]

#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004e0f8:	46c0      	nop			@ (mov r8, r8)
1004e0fa:	4b09      	ldr	r3, [pc, #36]	@ (1004e120 <HW_RNG_GetRandom16+0x30>)
1004e0fc:	0018      	movs	r0, r3
1004e0fe:	f7ff ffaa 	bl	1004e056 <LL_RNG_IsActiveFlag_RNGRDY>
1004e102:	1e03      	subs	r3, r0, #0
1004e104:	d0f9      	beq.n	1004e0fa <HW_RNG_GetRandom16+0xa>

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004e106:	4b06      	ldr	r3, [pc, #24]	@ (1004e120 <HW_RNG_GetRandom16+0x30>)
1004e108:	0018      	movs	r0, r3
1004e10a:	f7ff ffc6 	bl	1004e09a <LL_RNG_ReadRandData16>
1004e10e:	0003      	movs	r3, r0
1004e110:	001a      	movs	r2, r3
1004e112:	687b      	ldr	r3, [r7, #4]
1004e114:	801a      	strh	r2, [r3, #0]

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004e116:	2300      	movs	r3, #0
}
1004e118:	0018      	movs	r0, r3
1004e11a:	46bd      	mov	sp, r7
1004e11c:	b002      	add	sp, #8
1004e11e:	bd80      	pop	{r7, pc}
1004e120:	48600000 	.word	0x48600000

1004e124 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
1004e124:	b590      	push	{r4, r7, lr}
1004e126:	b085      	sub	sp, #20
1004e128:	af00      	add	r7, sp, #0
1004e12a:	6078      	str	r0, [r7, #4]

  *num = LL_RNG_READRANDDATA32(RNG);
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  uint16_t *num_16 = (uint16_t *) num;
1004e12c:	687b      	ldr	r3, [r7, #4]
1004e12e:	60fb      	str	r3, [r7, #12]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004e130:	46c0      	nop			@ (mov r8, r8)
1004e132:	4b11      	ldr	r3, [pc, #68]	@ (1004e178 <HW_RNG_GetRandom32+0x54>)
1004e134:	0018      	movs	r0, r3
1004e136:	f7ff ff8e 	bl	1004e056 <LL_RNG_IsActiveFlag_RNGRDY>
1004e13a:	1e03      	subs	r3, r0, #0
1004e13c:	d0f9      	beq.n	1004e132 <HW_RNG_GetRandom32+0xe>

  num_16[0] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004e13e:	4b0e      	ldr	r3, [pc, #56]	@ (1004e178 <HW_RNG_GetRandom32+0x54>)
1004e140:	0018      	movs	r0, r3
1004e142:	f7ff ffaa 	bl	1004e09a <LL_RNG_ReadRandData16>
1004e146:	0003      	movs	r3, r0
1004e148:	001a      	movs	r2, r3
1004e14a:	68fb      	ldr	r3, [r7, #12]
1004e14c:	801a      	strh	r2, [r3, #0]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004e14e:	46c0      	nop			@ (mov r8, r8)
1004e150:	4b09      	ldr	r3, [pc, #36]	@ (1004e178 <HW_RNG_GetRandom32+0x54>)
1004e152:	0018      	movs	r0, r3
1004e154:	f7ff ff7f 	bl	1004e056 <LL_RNG_IsActiveFlag_RNGRDY>
1004e158:	1e03      	subs	r3, r0, #0
1004e15a:	d0f9      	beq.n	1004e150 <HW_RNG_GetRandom32+0x2c>

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004e15c:	68fb      	ldr	r3, [r7, #12]
1004e15e:	1c9c      	adds	r4, r3, #2
1004e160:	4b05      	ldr	r3, [pc, #20]	@ (1004e178 <HW_RNG_GetRandom32+0x54>)
1004e162:	0018      	movs	r0, r3
1004e164:	f7ff ff99 	bl	1004e09a <LL_RNG_ReadRandData16>
1004e168:	0003      	movs	r3, r0
1004e16a:	8023      	strh	r3, [r4, #0]
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004e16c:	2300      	movs	r3, #0
}
1004e16e:	0018      	movs	r0, r3
1004e170:	46bd      	mov	sp, r7
1004e172:	b005      	add	sp, #20
1004e174:	bd90      	pop	{r4, r7, pc}
1004e176:	46c0      	nop			@ (mov r8, r8)
1004e178:	48600000 	.word	0x48600000

1004e17c <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
1004e17c:	b580      	push	{r7, lr}
1004e17e:	b084      	sub	sp, #16
1004e180:	af00      	add	r7, sp, #0
1004e182:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
1004e184:	687b      	ldr	r3, [r7, #4]
1004e186:	681b      	ldr	r3, [r3, #0]
1004e188:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
1004e18a:	687b      	ldr	r3, [r7, #4]
1004e18c:	2200      	movs	r2, #0
1004e18e:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1004e190:	687b      	ldr	r3, [r7, #4]
1004e192:	2200      	movs	r2, #0
1004e194:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004e196:	687b      	ldr	r3, [r7, #4]
1004e198:	2200      	movs	r2, #0
1004e19a:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
1004e19c:	687b      	ldr	r3, [r7, #4]
1004e19e:	2200      	movs	r2, #0
1004e1a0:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004e1a2:	68fb      	ldr	r3, [r7, #12]
1004e1a4:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004e1a6:	68bb      	ldr	r3, [r7, #8]
1004e1a8:	781b      	ldrb	r3, [r3, #0]
1004e1aa:	2bff      	cmp	r3, #255	@ 0xff
1004e1ac:	d10c      	bne.n	1004e1c8 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1004e1ae:	687b      	ldr	r3, [r7, #4]
1004e1b0:	685b      	ldr	r3, [r3, #4]
1004e1b2:	b29a      	uxth	r2, r3
1004e1b4:	68fb      	ldr	r3, [r7, #12]
1004e1b6:	b29b      	uxth	r3, r3
1004e1b8:	1ad3      	subs	r3, r2, r3
1004e1ba:	b29b      	uxth	r3, r3
1004e1bc:	3b04      	subs	r3, #4
1004e1be:	b29a      	uxth	r2, r3
1004e1c0:	687b      	ldr	r3, [r7, #4]
1004e1c2:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
1004e1c4:	2300      	movs	r3, #0
1004e1c6:	e028      	b.n	1004e21a <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
1004e1c8:	68bb      	ldr	r3, [r7, #8]
1004e1ca:	781b      	ldrb	r3, [r3, #0]
1004e1cc:	2bfe      	cmp	r3, #254	@ 0xfe
1004e1ce:	d106      	bne.n	1004e1de <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1004e1d0:	687b      	ldr	r3, [r7, #4]
1004e1d2:	891b      	ldrh	r3, [r3, #8]
1004e1d4:	3301      	adds	r3, #1
1004e1d6:	b29a      	uxth	r2, r3
1004e1d8:	687b      	ldr	r3, [r7, #4]
1004e1da:	811a      	strh	r2, [r3, #8]
1004e1dc:	e00c      	b.n	1004e1f8 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004e1de:	68bb      	ldr	r3, [r7, #8]
1004e1e0:	781b      	ldrb	r3, [r3, #0]
1004e1e2:	2b00      	cmp	r3, #0
1004e1e4:	d106      	bne.n	1004e1f4 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004e1e6:	687b      	ldr	r3, [r7, #4]
1004e1e8:	895b      	ldrh	r3, [r3, #10]
1004e1ea:	3301      	adds	r3, #1
1004e1ec:	b29a      	uxth	r2, r3
1004e1ee:	687b      	ldr	r3, [r7, #4]
1004e1f0:	815a      	strh	r2, [r3, #10]
1004e1f2:	e001      	b.n	1004e1f8 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
1004e1f4:	2303      	movs	r3, #3
1004e1f6:	e010      	b.n	1004e21a <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004e1f8:	68bb      	ldr	r3, [r7, #8]
1004e1fa:	885b      	ldrh	r3, [r3, #2]
1004e1fc:	3303      	adds	r3, #3
1004e1fe:	2203      	movs	r2, #3
1004e200:	4313      	orrs	r3, r2
1004e202:	001a      	movs	r2, r3
1004e204:	68fb      	ldr	r3, [r7, #12]
1004e206:	18d3      	adds	r3, r2, r3
1004e208:	3301      	adds	r3, #1
1004e20a:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
1004e20c:	68fb      	ldr	r3, [r7, #12]
1004e20e:	1d5a      	adds	r2, r3, #5
1004e210:	687b      	ldr	r3, [r7, #4]
1004e212:	685b      	ldr	r3, [r3, #4]
1004e214:	429a      	cmp	r2, r3
1004e216:	d3c4      	bcc.n	1004e1a2 <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
1004e218:	2300      	movs	r3, #0
    }
  }
}
1004e21a:	0018      	movs	r0, r3
1004e21c:	46bd      	mov	sp, r7
1004e21e:	b004      	add	sp, #16
1004e220:	bd80      	pop	{r7, pc}

1004e222 <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004e222:	b580      	push	{r7, lr}
1004e224:	b086      	sub	sp, #24
1004e226:	af00      	add	r7, sp, #0
1004e228:	60f8      	str	r0, [r7, #12]
1004e22a:	607a      	str	r2, [r7, #4]
1004e22c:	603b      	str	r3, [r7, #0]
1004e22e:	230b      	movs	r3, #11
1004e230:	18fb      	adds	r3, r7, r3
1004e232:	1c0a      	adds	r2, r1, #0
1004e234:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
1004e236:	2020      	movs	r0, #32
1004e238:	183b      	adds	r3, r7, r0
1004e23a:	881b      	ldrh	r3, [r3, #0]
1004e23c:	2b00      	cmp	r3, #0
1004e23e:	d00a      	beq.n	1004e256 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004e240:	2110      	movs	r1, #16
1004e242:	187a      	adds	r2, r7, r1
1004e244:	183b      	adds	r3, r7, r0
1004e246:	881b      	ldrh	r3, [r3, #0]
1004e248:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
1004e24a:	187b      	adds	r3, r7, r1
1004e24c:	22fe      	movs	r2, #254	@ 0xfe
1004e24e:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004e250:	187b      	adds	r3, r7, r1
1004e252:	617b      	str	r3, [r7, #20]
1004e254:	e002      	b.n	1004e25c <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004e256:	68fb      	ldr	r3, [r7, #12]
1004e258:	685b      	ldr	r3, [r3, #4]
1004e25a:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004e25c:	68fb      	ldr	r3, [r7, #12]
1004e25e:	685a      	ldr	r2, [r3, #4]
1004e260:	68fb      	ldr	r3, [r7, #12]
1004e262:	689b      	ldr	r3, [r3, #8]
1004e264:	429a      	cmp	r2, r3
1004e266:	d203      	bcs.n	1004e270 <NextRecordNoLock+0x4e>
1004e268:	697b      	ldr	r3, [r7, #20]
1004e26a:	781b      	ldrb	r3, [r3, #0]
1004e26c:	2bff      	cmp	r3, #255	@ 0xff
1004e26e:	d101      	bne.n	1004e274 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1004e270:	2304      	movs	r3, #4
1004e272:	e04b      	b.n	1004e30c <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
1004e274:	68fb      	ldr	r3, [r7, #12]
1004e276:	7b1b      	ldrb	r3, [r3, #12]
1004e278:	2b00      	cmp	r3, #0
1004e27a:	d003      	beq.n	1004e284 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
1004e27c:	68fb      	ldr	r3, [r7, #12]
1004e27e:	2200      	movs	r2, #0
1004e280:	731a      	strb	r2, [r3, #12]
1004e282:	e019      	b.n	1004e2b8 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004e284:	68fb      	ldr	r3, [r7, #12]
1004e286:	685b      	ldr	r3, [r3, #4]
1004e288:	697a      	ldr	r2, [r7, #20]
1004e28a:	8852      	ldrh	r2, [r2, #2]
1004e28c:	3203      	adds	r2, #3
1004e28e:	2103      	movs	r1, #3
1004e290:	430a      	orrs	r2, r1
1004e292:	189b      	adds	r3, r3, r2
1004e294:	1c5a      	adds	r2, r3, #1
1004e296:	68fb      	ldr	r3, [r7, #12]
1004e298:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004e29a:	68fb      	ldr	r3, [r7, #12]
1004e29c:	685b      	ldr	r3, [r3, #4]
1004e29e:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004e2a0:	68fb      	ldr	r3, [r7, #12]
1004e2a2:	685a      	ldr	r2, [r3, #4]
1004e2a4:	68fb      	ldr	r3, [r7, #12]
1004e2a6:	689b      	ldr	r3, [r3, #8]
1004e2a8:	429a      	cmp	r2, r3
1004e2aa:	d203      	bcs.n	1004e2b4 <NextRecordNoLock+0x92>
1004e2ac:	697b      	ldr	r3, [r7, #20]
1004e2ae:	781b      	ldrb	r3, [r3, #0]
1004e2b0:	2bff      	cmp	r3, #255	@ 0xff
1004e2b2:	d101      	bne.n	1004e2b8 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004e2b4:	2304      	movs	r3, #4
1004e2b6:	e029      	b.n	1004e30c <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
1004e2b8:	697b      	ldr	r3, [r7, #20]
1004e2ba:	781b      	ldrb	r3, [r3, #0]
1004e2bc:	2b00      	cmp	r3, #0
1004e2be:	d023      	beq.n	1004e308 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1004e2c0:	697b      	ldr	r3, [r7, #20]
1004e2c2:	781b      	ldrb	r3, [r3, #0]
1004e2c4:	2bfe      	cmp	r3, #254	@ 0xfe
1004e2c6:	d001      	beq.n	1004e2cc <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
1004e2c8:	2303      	movs	r3, #3
1004e2ca:	e01f      	b.n	1004e30c <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
1004e2cc:	220b      	movs	r2, #11
1004e2ce:	18bb      	adds	r3, r7, r2
1004e2d0:	781b      	ldrb	r3, [r3, #0]
1004e2d2:	2bff      	cmp	r3, #255	@ 0xff
1004e2d4:	d005      	beq.n	1004e2e2 <NextRecordNoLock+0xc0>
1004e2d6:	697b      	ldr	r3, [r7, #20]
1004e2d8:	785b      	ldrb	r3, [r3, #1]
1004e2da:	18ba      	adds	r2, r7, r2
1004e2dc:	7812      	ldrb	r2, [r2, #0]
1004e2de:	429a      	cmp	r2, r3
1004e2e0:	d1c8      	bne.n	1004e274 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004e2e2:	68fb      	ldr	r3, [r7, #12]
1004e2e4:	685b      	ldr	r3, [r3, #4]
1004e2e6:	3304      	adds	r3, #4
1004e2e8:	001a      	movs	r2, r3
1004e2ea:	687b      	ldr	r3, [r7, #4]
1004e2ec:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004e2ee:	697b      	ldr	r3, [r7, #20]
1004e2f0:	885a      	ldrh	r2, [r3, #2]
1004e2f2:	683b      	ldr	r3, [r7, #0]
1004e2f4:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004e2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2f8:	2b00      	cmp	r3, #0
1004e2fa:	d003      	beq.n	1004e304 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
1004e2fc:	697b      	ldr	r3, [r7, #20]
1004e2fe:	785a      	ldrb	r2, [r3, #1]
1004e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e302:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
1004e304:	2300      	movs	r3, #0
1004e306:	e001      	b.n	1004e30c <NextRecordNoLock+0xea>
      continue;
1004e308:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
1004e30a:	e7b3      	b.n	1004e274 <NextRecordNoLock+0x52>
    }
  }
}
1004e30c:	0018      	movs	r0, r3
1004e30e:	46bd      	mov	sp, r7
1004e310:	b006      	add	sp, #24
1004e312:	bd80      	pop	{r7, pc}

1004e314 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
1004e314:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e316:	b08b      	sub	sp, #44	@ 0x2c
1004e318:	af02      	add	r7, sp, #8
1004e31a:	60f8      	str	r0, [r7, #12]
1004e31c:	0008      	movs	r0, r1
1004e31e:	0011      	movs	r1, r2
1004e320:	607b      	str	r3, [r7, #4]
1004e322:	230b      	movs	r3, #11
1004e324:	18fb      	adds	r3, r7, r3
1004e326:	1c02      	adds	r2, r0, #0
1004e328:	701a      	strb	r2, [r3, #0]
1004e32a:	2208      	movs	r2, #8
1004e32c:	0010      	movs	r0, r2
1004e32e:	18bb      	adds	r3, r7, r2
1004e330:	1c0a      	adds	r2, r1, #0
1004e332:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
1004e334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e336:	2200      	movs	r2, #0
1004e338:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
1004e33a:	261f      	movs	r6, #31
1004e33c:	19bc      	adds	r4, r7, r6
1004e33e:	2216      	movs	r2, #22
1004e340:	18bd      	adds	r5, r7, r2
1004e342:	2218      	movs	r2, #24
1004e344:	18ba      	adds	r2, r7, r2
1004e346:	230b      	movs	r3, #11
1004e348:	18fb      	adds	r3, r7, r3
1004e34a:	7819      	ldrb	r1, [r3, #0]
1004e34c:	68fb      	ldr	r3, [r7, #12]
1004e34e:	469c      	mov	ip, r3
1004e350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004e352:	9301      	str	r3, [sp, #4]
1004e354:	2338      	movs	r3, #56	@ 0x38
1004e356:	181b      	adds	r3, r3, r0
1004e358:	19db      	adds	r3, r3, r7
1004e35a:	881b      	ldrh	r3, [r3, #0]
1004e35c:	9300      	str	r3, [sp, #0]
1004e35e:	002b      	movs	r3, r5
1004e360:	4660      	mov	r0, ip
1004e362:	f7ff ff5e 	bl	1004e222 <NextRecordNoLock>
1004e366:	0003      	movs	r3, r0
1004e368:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
1004e36a:	19bb      	adds	r3, r7, r6
1004e36c:	781b      	ldrb	r3, [r3, #0]
1004e36e:	2b00      	cmp	r3, #0
1004e370:	d002      	beq.n	1004e378 <ReadNextRecordNoLock+0x64>
  {
    return status;
1004e372:	19bb      	adds	r3, r7, r6
1004e374:	781b      	ldrb	r3, [r3, #0]
1004e376:	e027      	b.n	1004e3c8 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
1004e378:	2316      	movs	r3, #22
1004e37a:	18fb      	adds	r3, r7, r3
1004e37c:	881b      	ldrh	r3, [r3, #0]
1004e37e:	2208      	movs	r2, #8
1004e380:	18ba      	adds	r2, r7, r2
1004e382:	8812      	ldrh	r2, [r2, #0]
1004e384:	429a      	cmp	r2, r3
1004e386:	d301      	bcc.n	1004e38c <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004e388:	2306      	movs	r3, #6
1004e38a:	e01d      	b.n	1004e3c8 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
1004e38c:	69ba      	ldr	r2, [r7, #24]
1004e38e:	2408      	movs	r4, #8
1004e390:	193b      	adds	r3, r7, r4
1004e392:	881b      	ldrh	r3, [r3, #0]
1004e394:	18d1      	adds	r1, r2, r3
1004e396:	2330      	movs	r3, #48	@ 0x30
1004e398:	2208      	movs	r2, #8
1004e39a:	189b      	adds	r3, r3, r2
1004e39c:	19db      	adds	r3, r3, r7
1004e39e:	881a      	ldrh	r2, [r3, #0]
1004e3a0:	2316      	movs	r3, #22
1004e3a2:	18fb      	adds	r3, r7, r3
1004e3a4:	881b      	ldrh	r3, [r3, #0]
1004e3a6:	0018      	movs	r0, r3
1004e3a8:	193b      	adds	r3, r7, r4
1004e3aa:	881b      	ldrh	r3, [r3, #0]
1004e3ac:	1ac3      	subs	r3, r0, r3
1004e3ae:	429a      	cmp	r2, r3
1004e3b0:	dd00      	ble.n	1004e3b4 <ReadNextRecordNoLock+0xa0>
1004e3b2:	001a      	movs	r2, r3
1004e3b4:	687b      	ldr	r3, [r7, #4]
1004e3b6:	0018      	movs	r0, r3
1004e3b8:	f018 f8e7 	bl	1006658a <memcpy>
  *size_p = data_len;
1004e3bc:	2316      	movs	r3, #22
1004e3be:	18fb      	adds	r3, r7, r3
1004e3c0:	881a      	ldrh	r2, [r3, #0]
1004e3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e3c4:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004e3c6:	2300      	movs	r3, #0
}
1004e3c8:	0018      	movs	r0, r3
1004e3ca:	46bd      	mov	sp, r7
1004e3cc:	b009      	add	sp, #36	@ 0x24
1004e3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e3d0 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1004e3d0:	b590      	push	{r4, r7, lr}
1004e3d2:	b089      	sub	sp, #36	@ 0x24
1004e3d4:	af00      	add	r7, sp, #0
1004e3d6:	60f8      	str	r0, [r7, #12]
1004e3d8:	607a      	str	r2, [r7, #4]
1004e3da:	200a      	movs	r0, #10
1004e3dc:	183b      	adds	r3, r7, r0
1004e3de:	1c0a      	adds	r2, r1, #0
1004e3e0:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004e3e2:	687b      	ldr	r3, [r7, #4]
1004e3e4:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004e3e6:	0001      	movs	r1, r0
1004e3e8:	187b      	adds	r3, r7, r1
1004e3ea:	881b      	ldrh	r3, [r3, #0]
1004e3ec:	089b      	lsrs	r3, r3, #2
1004e3ee:	b29a      	uxth	r2, r3
1004e3f0:	2016      	movs	r0, #22
1004e3f2:	183b      	adds	r3, r7, r0
1004e3f4:	0092      	lsls	r2, r2, #2
1004e3f6:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
1004e3f8:	187b      	adds	r3, r7, r1
1004e3fa:	881b      	ldrh	r3, [r3, #0]
1004e3fc:	b2d9      	uxtb	r1, r3
1004e3fe:	183b      	adds	r3, r7, r0
1004e400:	881b      	ldrh	r3, [r3, #0]
1004e402:	b2da      	uxtb	r2, r3
1004e404:	2315      	movs	r3, #21
1004e406:	18fb      	adds	r3, r7, r3
1004e408:	1a8a      	subs	r2, r1, r2
1004e40a:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
1004e40c:	2300      	movs	r3, #0
1004e40e:	61fb      	str	r3, [r7, #28]
1004e410:	e013      	b.n	1004e43a <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004e412:	69fb      	ldr	r3, [r7, #28]
1004e414:	69ba      	ldr	r2, [r7, #24]
1004e416:	18d1      	adds	r1, r2, r3
1004e418:	2310      	movs	r3, #16
1004e41a:	18fb      	adds	r3, r7, r3
1004e41c:	2204      	movs	r2, #4
1004e41e:	0018      	movs	r0, r3
1004e420:	f018 f8b3 	bl	1006658a <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
1004e424:	69fa      	ldr	r2, [r7, #28]
1004e426:	68fb      	ldr	r3, [r7, #12]
1004e428:	18d3      	adds	r3, r2, r3
1004e42a:	693a      	ldr	r2, [r7, #16]
1004e42c:	0019      	movs	r1, r3
1004e42e:	2000      	movs	r0, #0
1004e430:	f7f8 f916 	bl	10046660 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
1004e434:	69fb      	ldr	r3, [r7, #28]
1004e436:	3304      	adds	r3, #4
1004e438:	61fb      	str	r3, [r7, #28]
1004e43a:	2416      	movs	r4, #22
1004e43c:	193b      	adds	r3, r7, r4
1004e43e:	881b      	ldrh	r3, [r3, #0]
1004e440:	69fa      	ldr	r2, [r7, #28]
1004e442:	429a      	cmp	r2, r3
1004e444:	dbe5      	blt.n	1004e412 <write_data+0x42>
  }
  word = 0xFFFFFFFF;
1004e446:	2301      	movs	r3, #1
1004e448:	425b      	negs	r3, r3
1004e44a:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
1004e44c:	193b      	adds	r3, r7, r4
1004e44e:	881b      	ldrh	r3, [r3, #0]
1004e450:	69ba      	ldr	r2, [r7, #24]
1004e452:	18d1      	adds	r1, r2, r3
1004e454:	2315      	movs	r3, #21
1004e456:	18fb      	adds	r3, r7, r3
1004e458:	781a      	ldrb	r2, [r3, #0]
1004e45a:	2310      	movs	r3, #16
1004e45c:	18fb      	adds	r3, r7, r3
1004e45e:	0018      	movs	r0, r3
1004e460:	f018 f893 	bl	1006658a <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
1004e464:	193b      	adds	r3, r7, r4
1004e466:	881a      	ldrh	r2, [r3, #0]
1004e468:	68fb      	ldr	r3, [r7, #12]
1004e46a:	18d3      	adds	r3, r2, r3
1004e46c:	693a      	ldr	r2, [r7, #16]
1004e46e:	0019      	movs	r1, r3
1004e470:	2000      	movs	r0, #0
1004e472:	f7f8 f8f5 	bl	10046660 <HAL_FLASH_Program>
}
1004e476:	46c0      	nop			@ (mov r8, r8)
1004e478:	46bd      	mov	sp, r7
1004e47a:	b009      	add	sp, #36	@ 0x24
1004e47c:	bd90      	pop	{r4, r7, pc}

1004e47e <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004e47e:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e480:	b087      	sub	sp, #28
1004e482:	af00      	add	r7, sp, #0
1004e484:	60f8      	str	r0, [r7, #12]
1004e486:	0008      	movs	r0, r1
1004e488:	0011      	movs	r1, r2
1004e48a:	607b      	str	r3, [r7, #4]
1004e48c:	250b      	movs	r5, #11
1004e48e:	197b      	adds	r3, r7, r5
1004e490:	1c02      	adds	r2, r0, #0
1004e492:	701a      	strb	r2, [r3, #0]
1004e494:	2408      	movs	r4, #8
1004e496:	193b      	adds	r3, r7, r4
1004e498:	1c0a      	adds	r2, r1, #0
1004e49a:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
1004e49c:	2310      	movs	r3, #16
1004e49e:	18fb      	adds	r3, r7, r3
1004e4a0:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004e4a2:	193b      	adds	r3, r7, r4
1004e4a4:	881b      	ldrh	r3, [r3, #0]
1004e4a6:	3b01      	subs	r3, #1
1004e4a8:	b29b      	uxth	r3, r3
1004e4aa:	b21b      	sxth	r3, r3
1004e4ac:	2203      	movs	r2, #3
1004e4ae:	4313      	orrs	r3, r2
1004e4b0:	b21b      	sxth	r3, r3
1004e4b2:	b29a      	uxth	r2, r3
1004e4b4:	193b      	adds	r3, r7, r4
1004e4b6:	3201      	adds	r2, #1
1004e4b8:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
1004e4ba:	697b      	ldr	r3, [r7, #20]
1004e4bc:	22fe      	movs	r2, #254	@ 0xfe
1004e4be:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1004e4c0:	697b      	ldr	r3, [r7, #20]
1004e4c2:	197a      	adds	r2, r7, r5
1004e4c4:	7812      	ldrb	r2, [r2, #0]
1004e4c6:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
1004e4c8:	193a      	adds	r2, r7, r4
1004e4ca:	2520      	movs	r5, #32
1004e4cc:	2608      	movs	r6, #8
1004e4ce:	19ab      	adds	r3, r5, r6
1004e4d0:	2108      	movs	r1, #8
1004e4d2:	468c      	mov	ip, r1
1004e4d4:	44bc      	add	ip, r7
1004e4d6:	4463      	add	r3, ip
1004e4d8:	8812      	ldrh	r2, [r2, #0]
1004e4da:	881b      	ldrh	r3, [r3, #0]
1004e4dc:	18d3      	adds	r3, r2, r3
1004e4de:	b29a      	uxth	r2, r3
1004e4e0:	697b      	ldr	r3, [r7, #20]
1004e4e2:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
1004e4e4:	693a      	ldr	r2, [r7, #16]
1004e4e6:	68fb      	ldr	r3, [r7, #12]
1004e4e8:	0019      	movs	r1, r3
1004e4ea:	2000      	movs	r0, #0
1004e4ec:	f7f8 f8b8 	bl	10046660 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1004e4f0:	68fb      	ldr	r3, [r7, #12]
1004e4f2:	1d18      	adds	r0, r3, #4
1004e4f4:	687a      	ldr	r2, [r7, #4]
1004e4f6:	193b      	adds	r3, r7, r4
1004e4f8:	881b      	ldrh	r3, [r3, #0]
1004e4fa:	0019      	movs	r1, r3
1004e4fc:	f7ff ff68 	bl	1004e3d0 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1004e500:	193b      	adds	r3, r7, r4
1004e502:	881a      	ldrh	r2, [r3, #0]
1004e504:	68fb      	ldr	r3, [r7, #12]
1004e506:	18d3      	adds	r3, r2, r3
1004e508:	1d18      	adds	r0, r3, #4
1004e50a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004e50c:	19ab      	adds	r3, r5, r6
1004e50e:	2108      	movs	r1, #8
1004e510:	468c      	mov	ip, r1
1004e512:	44bc      	add	ip, r7
1004e514:	4463      	add	r3, ip
1004e516:	881b      	ldrh	r3, [r3, #0]
1004e518:	0019      	movs	r1, r3
1004e51a:	f7ff ff59 	bl	1004e3d0 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004e51e:	2300      	movs	r3, #0
}
1004e520:	0018      	movs	r0, r3
1004e522:	46bd      	mov	sp, r7
1004e524:	b007      	add	sp, #28
1004e526:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e528 <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
1004e528:	b580      	push	{r7, lr}
1004e52a:	b086      	sub	sp, #24
1004e52c:	af00      	add	r7, sp, #0
1004e52e:	60f8      	str	r0, [r7, #12]
1004e530:	0008      	movs	r0, r1
1004e532:	607a      	str	r2, [r7, #4]
1004e534:	0019      	movs	r1, r3
1004e536:	230a      	movs	r3, #10
1004e538:	18fb      	adds	r3, r7, r3
1004e53a:	1c02      	adds	r2, r0, #0
1004e53c:	801a      	strh	r2, [r3, #0]
1004e53e:	2308      	movs	r3, #8
1004e540:	18fb      	adds	r3, r7, r3
1004e542:	1c0a      	adds	r2, r1, #0
1004e544:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004e546:	68fb      	ldr	r3, [r7, #12]
1004e548:	685b      	ldr	r3, [r3, #4]
1004e54a:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004e54c:	68fb      	ldr	r3, [r7, #12]
1004e54e:	685a      	ldr	r2, [r3, #4]
1004e550:	68fb      	ldr	r3, [r7, #12]
1004e552:	689b      	ldr	r3, [r3, #8]
1004e554:	429a      	cmp	r2, r3
1004e556:	d203      	bcs.n	1004e560 <NVMDB_CompareCurrentRecord+0x38>
1004e558:	697b      	ldr	r3, [r7, #20]
1004e55a:	781b      	ldrb	r3, [r3, #0]
1004e55c:	2bff      	cmp	r3, #255	@ 0xff
1004e55e:	d101      	bne.n	1004e564 <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
1004e560:	2304      	movs	r3, #4
1004e562:	e02a      	b.n	1004e5ba <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004e564:	68fb      	ldr	r3, [r7, #12]
1004e566:	7b1b      	ldrb	r3, [r3, #12]
1004e568:	2b00      	cmp	r3, #0
1004e56a:	d103      	bne.n	1004e574 <NVMDB_CompareCurrentRecord+0x4c>
1004e56c:	697b      	ldr	r3, [r7, #20]
1004e56e:	781b      	ldrb	r3, [r3, #0]
1004e570:	2bfe      	cmp	r3, #254	@ 0xfe
1004e572:	d001      	beq.n	1004e578 <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004e574:	2305      	movs	r3, #5
1004e576:	e020      	b.n	1004e5ba <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004e578:	697b      	ldr	r3, [r7, #20]
1004e57a:	885b      	ldrh	r3, [r3, #2]
1004e57c:	220a      	movs	r2, #10
1004e57e:	18ba      	adds	r2, r7, r2
1004e580:	8812      	ldrh	r2, [r2, #0]
1004e582:	429a      	cmp	r2, r3
1004e584:	d301      	bcc.n	1004e58a <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004e586:	2306      	movs	r3, #6
1004e588:	e017      	b.n	1004e5ba <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
1004e58a:	68fb      	ldr	r3, [r7, #12]
1004e58c:	2200      	movs	r2, #0
1004e58e:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
1004e590:	230a      	movs	r3, #10
1004e592:	18fb      	adds	r3, r7, r3
1004e594:	881a      	ldrh	r2, [r3, #0]
1004e596:	68fb      	ldr	r3, [r7, #12]
1004e598:	685b      	ldr	r3, [r3, #4]
1004e59a:	18d3      	adds	r3, r2, r3
1004e59c:	3304      	adds	r3, #4
1004e59e:	0019      	movs	r1, r3
1004e5a0:	2308      	movs	r3, #8
1004e5a2:	18fb      	adds	r3, r7, r3
1004e5a4:	881a      	ldrh	r2, [r3, #0]
1004e5a6:	687b      	ldr	r3, [r7, #4]
1004e5a8:	0018      	movs	r0, r3
1004e5aa:	f017 ff6b 	bl	10066484 <memcmp>
1004e5ae:	1e03      	subs	r3, r0, #0
1004e5b0:	d101      	bne.n	1004e5b6 <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1004e5b2:	2300      	movs	r3, #0
1004e5b4:	e001      	b.n	1004e5ba <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
1004e5b6:	2301      	movs	r3, #1
1004e5b8:	425b      	negs	r3, r3
  }
}
1004e5ba:	0018      	movs	r0, r3
1004e5bc:	46bd      	mov	sp, r7
1004e5be:	b006      	add	sp, #24
1004e5c0:	bd80      	pop	{r7, pc}

1004e5c2 <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1004e5c2:	b590      	push	{r4, r7, lr}
1004e5c4:	b087      	sub	sp, #28
1004e5c6:	af00      	add	r7, sp, #0
1004e5c8:	60f8      	str	r0, [r7, #12]
1004e5ca:	0008      	movs	r0, r1
1004e5cc:	607a      	str	r2, [r7, #4]
1004e5ce:	0019      	movs	r1, r3
1004e5d0:	230a      	movs	r3, #10
1004e5d2:	18fb      	adds	r3, r7, r3
1004e5d4:	1c02      	adds	r2, r0, #0
1004e5d6:	801a      	strh	r2, [r3, #0]
1004e5d8:	2308      	movs	r3, #8
1004e5da:	0018      	movs	r0, r3
1004e5dc:	18fb      	adds	r3, r7, r3
1004e5de:	1c0a      	adds	r2, r1, #0
1004e5e0:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1004e5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e5e4:	2200      	movs	r2, #0
1004e5e6:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004e5e8:	2224      	movs	r2, #36	@ 0x24
1004e5ea:	1813      	adds	r3, r2, r0
1004e5ec:	19db      	adds	r3, r3, r7
1004e5ee:	881b      	ldrh	r3, [r3, #0]
1004e5f0:	2b00      	cmp	r3, #0
1004e5f2:	d00b      	beq.n	1004e60c <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
1004e5f4:	2110      	movs	r1, #16
1004e5f6:	187b      	adds	r3, r7, r1
1004e5f8:	1812      	adds	r2, r2, r0
1004e5fa:	19d2      	adds	r2, r2, r7
1004e5fc:	8812      	ldrh	r2, [r2, #0]
1004e5fe:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
1004e600:	187b      	adds	r3, r7, r1
1004e602:	22fe      	movs	r2, #254	@ 0xfe
1004e604:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004e606:	187b      	adds	r3, r7, r1
1004e608:	617b      	str	r3, [r7, #20]
1004e60a:	e002      	b.n	1004e612 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004e60c:	68fb      	ldr	r3, [r7, #12]
1004e60e:	685b      	ldr	r3, [r3, #4]
1004e610:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004e612:	68fb      	ldr	r3, [r7, #12]
1004e614:	685a      	ldr	r2, [r3, #4]
1004e616:	68fb      	ldr	r3, [r7, #12]
1004e618:	689b      	ldr	r3, [r3, #8]
1004e61a:	429a      	cmp	r2, r3
1004e61c:	d203      	bcs.n	1004e626 <ReadCurrentRecordNoLock+0x64>
1004e61e:	697b      	ldr	r3, [r7, #20]
1004e620:	781b      	ldrb	r3, [r3, #0]
1004e622:	2bff      	cmp	r3, #255	@ 0xff
1004e624:	d101      	bne.n	1004e62a <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
1004e626:	2304      	movs	r3, #4
1004e628:	e033      	b.n	1004e692 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004e62a:	68fb      	ldr	r3, [r7, #12]
1004e62c:	7b1b      	ldrb	r3, [r3, #12]
1004e62e:	2b00      	cmp	r3, #0
1004e630:	d103      	bne.n	1004e63a <ReadCurrentRecordNoLock+0x78>
1004e632:	697b      	ldr	r3, [r7, #20]
1004e634:	781b      	ldrb	r3, [r3, #0]
1004e636:	2bfe      	cmp	r3, #254	@ 0xfe
1004e638:	d001      	beq.n	1004e63e <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004e63a:	2305      	movs	r3, #5
1004e63c:	e029      	b.n	1004e692 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004e63e:	697b      	ldr	r3, [r7, #20]
1004e640:	885b      	ldrh	r3, [r3, #2]
1004e642:	220a      	movs	r2, #10
1004e644:	18ba      	adds	r2, r7, r2
1004e646:	8812      	ldrh	r2, [r2, #0]
1004e648:	429a      	cmp	r2, r3
1004e64a:	d301      	bcc.n	1004e650 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004e64c:	2306      	movs	r3, #6
1004e64e:	e020      	b.n	1004e692 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
1004e650:	68fb      	ldr	r3, [r7, #12]
1004e652:	2200      	movs	r2, #0
1004e654:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
1004e656:	240a      	movs	r4, #10
1004e658:	193b      	adds	r3, r7, r4
1004e65a:	881a      	ldrh	r2, [r3, #0]
1004e65c:	68fb      	ldr	r3, [r7, #12]
1004e65e:	685b      	ldr	r3, [r3, #4]
1004e660:	18d3      	adds	r3, r2, r3
1004e662:	3304      	adds	r3, #4
1004e664:	0018      	movs	r0, r3
1004e666:	2308      	movs	r3, #8
1004e668:	18fb      	adds	r3, r7, r3
1004e66a:	881a      	ldrh	r2, [r3, #0]
1004e66c:	697b      	ldr	r3, [r7, #20]
1004e66e:	885b      	ldrh	r3, [r3, #2]
1004e670:	0019      	movs	r1, r3
1004e672:	193b      	adds	r3, r7, r4
1004e674:	881b      	ldrh	r3, [r3, #0]
1004e676:	1acb      	subs	r3, r1, r3
1004e678:	429a      	cmp	r2, r3
1004e67a:	dd00      	ble.n	1004e67e <ReadCurrentRecordNoLock+0xbc>
1004e67c:	001a      	movs	r2, r3
1004e67e:	687b      	ldr	r3, [r7, #4]
1004e680:	0001      	movs	r1, r0
1004e682:	0018      	movs	r0, r3
1004e684:	f017 ff81 	bl	1006658a <memcpy>
  *size_p = record_p->header.length;
1004e688:	697b      	ldr	r3, [r7, #20]
1004e68a:	885a      	ldrh	r2, [r3, #2]
1004e68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e68e:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004e690:	2300      	movs	r3, #0
}
1004e692:	0018      	movs	r0, r3
1004e694:	46bd      	mov	sp, r7
1004e696:	b007      	add	sp, #28
1004e698:	bd90      	pop	{r4, r7, pc}
	...

1004e69c <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
1004e69c:	b580      	push	{r7, lr}
1004e69e:	b084      	sub	sp, #16
1004e6a0:	af00      	add	r7, sp, #0
1004e6a2:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
1004e6a4:	4b06      	ldr	r3, [pc, #24]	@ (1004e6c0 <InvalidateRecord+0x24>)
1004e6a6:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
1004e6a8:	68fa      	ldr	r2, [r7, #12]
1004e6aa:	687b      	ldr	r3, [r7, #4]
1004e6ac:	0019      	movs	r1, r3
1004e6ae:	2000      	movs	r0, #0
1004e6b0:	f7f7 ffd6 	bl	10046660 <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004e6b4:	2300      	movs	r3, #0
}
1004e6b6:	0018      	movs	r0, r3
1004e6b8:	46bd      	mov	sp, r7
1004e6ba:	b004      	add	sp, #16
1004e6bc:	bd80      	pop	{r7, pc}
1004e6be:	46c0      	nop			@ (mov r8, r8)
1004e6c0:	ffffff00 	.word	0xffffff00

1004e6c4 <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
1004e6c4:	b5b0      	push	{r4, r5, r7, lr}
1004e6c6:	b084      	sub	sp, #16
1004e6c8:	af00      	add	r7, sp, #0
1004e6ca:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004e6cc:	687b      	ldr	r3, [r7, #4]
1004e6ce:	685b      	ldr	r3, [r3, #4]
1004e6d0:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004e6d2:	687b      	ldr	r3, [r7, #4]
1004e6d4:	685a      	ldr	r2, [r3, #4]
1004e6d6:	687b      	ldr	r3, [r7, #4]
1004e6d8:	689b      	ldr	r3, [r3, #8]
1004e6da:	429a      	cmp	r2, r3
1004e6dc:	d203      	bcs.n	1004e6e6 <NVMDB_DeleteRecordNoCache+0x22>
1004e6de:	68fb      	ldr	r3, [r7, #12]
1004e6e0:	781b      	ldrb	r3, [r3, #0]
1004e6e2:	2bff      	cmp	r3, #255	@ 0xff
1004e6e4:	d101      	bne.n	1004e6ea <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
1004e6e6:	2304      	movs	r3, #4
1004e6e8:	e041      	b.n	1004e76e <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
1004e6ea:	68fb      	ldr	r3, [r7, #12]
1004e6ec:	781b      	ldrb	r3, [r3, #0]
1004e6ee:	2bfe      	cmp	r3, #254	@ 0xfe
1004e6f0:	d13c      	bne.n	1004e76c <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
1004e6f2:	68fb      	ldr	r3, [r7, #12]
1004e6f4:	250b      	movs	r5, #11
1004e6f6:	197c      	adds	r4, r7, r5
1004e6f8:	0018      	movs	r0, r3
1004e6fa:	f7ff ffcf 	bl	1004e69c <InvalidateRecord>
1004e6fe:	0003      	movs	r3, r0
1004e700:	7023      	strb	r3, [r4, #0]
    if(status)
1004e702:	197b      	adds	r3, r7, r5
1004e704:	781b      	ldrb	r3, [r3, #0]
1004e706:	2b00      	cmp	r3, #0
1004e708:	d002      	beq.n	1004e710 <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
1004e70a:	197b      	adds	r3, r7, r5
1004e70c:	781b      	ldrb	r3, [r3, #0]
1004e70e:	e02e      	b.n	1004e76e <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
1004e710:	687b      	ldr	r3, [r7, #4]
1004e712:	781b      	ldrb	r3, [r3, #0]
1004e714:	001a      	movs	r2, r3
1004e716:	4918      	ldr	r1, [pc, #96]	@ (1004e778 <NVMDB_DeleteRecordNoCache+0xb4>)
1004e718:	0013      	movs	r3, r2
1004e71a:	009b      	lsls	r3, r3, #2
1004e71c:	189b      	adds	r3, r3, r2
1004e71e:	009b      	lsls	r3, r3, #2
1004e720:	18cb      	adds	r3, r1, r3
1004e722:	3308      	adds	r3, #8
1004e724:	881b      	ldrh	r3, [r3, #0]
1004e726:	3b01      	subs	r3, #1
1004e728:	b298      	uxth	r0, r3
1004e72a:	4913      	ldr	r1, [pc, #76]	@ (1004e778 <NVMDB_DeleteRecordNoCache+0xb4>)
1004e72c:	0013      	movs	r3, r2
1004e72e:	009b      	lsls	r3, r3, #2
1004e730:	189b      	adds	r3, r3, r2
1004e732:	009b      	lsls	r3, r3, #2
1004e734:	18cb      	adds	r3, r1, r3
1004e736:	3308      	adds	r3, #8
1004e738:	1c02      	adds	r2, r0, #0
1004e73a:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
1004e73c:	687b      	ldr	r3, [r7, #4]
1004e73e:	781b      	ldrb	r3, [r3, #0]
1004e740:	001a      	movs	r2, r3
1004e742:	490d      	ldr	r1, [pc, #52]	@ (1004e778 <NVMDB_DeleteRecordNoCache+0xb4>)
1004e744:	0013      	movs	r3, r2
1004e746:	009b      	lsls	r3, r3, #2
1004e748:	189b      	adds	r3, r3, r2
1004e74a:	009b      	lsls	r3, r3, #2
1004e74c:	18cb      	adds	r3, r1, r3
1004e74e:	330a      	adds	r3, #10
1004e750:	881b      	ldrh	r3, [r3, #0]
1004e752:	3301      	adds	r3, #1
1004e754:	b298      	uxth	r0, r3
1004e756:	4908      	ldr	r1, [pc, #32]	@ (1004e778 <NVMDB_DeleteRecordNoCache+0xb4>)
1004e758:	0013      	movs	r3, r2
1004e75a:	009b      	lsls	r3, r3, #2
1004e75c:	189b      	adds	r3, r3, r2
1004e75e:	009b      	lsls	r3, r3, #2
1004e760:	18cb      	adds	r3, r1, r3
1004e762:	330a      	adds	r3, #10
1004e764:	1c02      	adds	r2, r0, #0
1004e766:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
1004e768:	2300      	movs	r3, #0
1004e76a:	e000      	b.n	1004e76e <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004e76c:	2305      	movs	r3, #5
  }
}
1004e76e:	0018      	movs	r0, r3
1004e770:	46bd      	mov	sp, r7
1004e772:	b004      	add	sp, #16
1004e774:	bdb0      	pop	{r4, r5, r7, pc}
1004e776:	46c0      	nop			@ (mov r8, r8)
1004e778:	200022ac 	.word	0x200022ac

1004e77c <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
1004e77c:	b580      	push	{r7, lr}
1004e77e:	b088      	sub	sp, #32
1004e780:	af00      	add	r7, sp, #0
1004e782:	6078      	str	r0, [r7, #4]
1004e784:	000a      	movs	r2, r1
1004e786:	1cfb      	adds	r3, r7, #3
1004e788:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004e78a:	687b      	ldr	r3, [r7, #4]
1004e78c:	4a0d      	ldr	r2, [pc, #52]	@ (1004e7c4 <ErasePage+0x48>)
1004e78e:	4694      	mov	ip, r2
1004e790:	4463      	add	r3, ip
1004e792:	0adb      	lsrs	r3, r3, #11
1004e794:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
1004e796:	2110      	movs	r1, #16
1004e798:	187b      	adds	r3, r7, r1
1004e79a:	2200      	movs	r2, #0
1004e79c:	601a      	str	r2, [r3, #0]
1004e79e:	69fa      	ldr	r2, [r7, #28]
1004e7a0:	187b      	adds	r3, r7, r1
1004e7a2:	605a      	str	r2, [r3, #4]
1004e7a4:	1cfb      	adds	r3, r7, #3
1004e7a6:	781a      	ldrb	r2, [r3, #0]
1004e7a8:	187b      	adds	r3, r7, r1
1004e7aa:	609a      	str	r2, [r3, #8]
1004e7ac:	230c      	movs	r3, #12
1004e7ae:	18fa      	adds	r2, r7, r3
1004e7b0:	187b      	adds	r3, r7, r1
1004e7b2:	0011      	movs	r1, r2
1004e7b4:	0018      	movs	r0, r3
1004e7b6:	f7f8 f82d 	bl	10046814 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1004e7ba:	46c0      	nop			@ (mov r8, r8)
1004e7bc:	46bd      	mov	sp, r7
1004e7be:	b008      	add	sp, #32
1004e7c0:	bd80      	pop	{r7, pc}
1004e7c2:	46c0      	nop			@ (mov r8, r8)
1004e7c4:	effc0000 	.word	0xeffc0000

1004e7c8 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
1004e7c8:	b580      	push	{r7, lr}
1004e7ca:	b086      	sub	sp, #24
1004e7cc:	af00      	add	r7, sp, #0
1004e7ce:	60f8      	str	r0, [r7, #12]
1004e7d0:	60b9      	str	r1, [r7, #8]
1004e7d2:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
1004e7d4:	687b      	ldr	r3, [r7, #4]
1004e7d6:	055b      	lsls	r3, r3, #21
1004e7d8:	0d5b      	lsrs	r3, r3, #21
1004e7da:	d107      	bne.n	1004e7ec <WriteBufferToFlash+0x24>
1004e7dc:	68fb      	ldr	r3, [r7, #12]
1004e7de:	687a      	ldr	r2, [r7, #4]
1004e7e0:	68b9      	ldr	r1, [r7, #8]
1004e7e2:	0018      	movs	r0, r3
1004e7e4:	f017 fe4e 	bl	10066484 <memcmp>
1004e7e8:	1e03      	subs	r3, r0, #0
1004e7ea:	d026      	beq.n	1004e83a <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
1004e7ec:	687b      	ldr	r3, [r7, #4]
1004e7ee:	3b01      	subs	r3, #1
1004e7f0:	4a14      	ldr	r2, [pc, #80]	@ (1004e844 <WriteBufferToFlash+0x7c>)
1004e7f2:	4313      	orrs	r3, r2
1004e7f4:	3301      	adds	r3, #1
1004e7f6:	0adb      	lsrs	r3, r3, #11
1004e7f8:	b2da      	uxtb	r2, r3
1004e7fa:	68fb      	ldr	r3, [r7, #12]
1004e7fc:	0011      	movs	r1, r2
1004e7fe:	0018      	movs	r0, r3
1004e800:	f7ff ffbc 	bl	1004e77c <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
1004e804:	2300      	movs	r3, #0
1004e806:	617b      	str	r3, [r7, #20]
1004e808:	e012      	b.n	1004e830 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
1004e80a:	697a      	ldr	r2, [r7, #20]
1004e80c:	68fb      	ldr	r3, [r7, #12]
1004e80e:	18d1      	adds	r1, r2, r3
1004e810:	697b      	ldr	r3, [r7, #20]
1004e812:	2b00      	cmp	r3, #0
1004e814:	da00      	bge.n	1004e818 <WriteBufferToFlash+0x50>
1004e816:	3303      	adds	r3, #3
1004e818:	109b      	asrs	r3, r3, #2
1004e81a:	009b      	lsls	r3, r3, #2
1004e81c:	68ba      	ldr	r2, [r7, #8]
1004e81e:	18d3      	adds	r3, r2, r3
1004e820:	681b      	ldr	r3, [r3, #0]
1004e822:	001a      	movs	r2, r3
1004e824:	2000      	movs	r0, #0
1004e826:	f7f7 ff1b 	bl	10046660 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
1004e82a:	697b      	ldr	r3, [r7, #20]
1004e82c:	3304      	adds	r3, #4
1004e82e:	617b      	str	r3, [r7, #20]
1004e830:	697b      	ldr	r3, [r7, #20]
1004e832:	687a      	ldr	r2, [r7, #4]
1004e834:	429a      	cmp	r2, r3
1004e836:	d8e8      	bhi.n	1004e80a <WriteBufferToFlash+0x42>
1004e838:	e000      	b.n	1004e83c <WriteBufferToFlash+0x74>
    return;
1004e83a:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
1004e83c:	46bd      	mov	sp, r7
1004e83e:	b006      	add	sp, #24
1004e840:	bd80      	pop	{r7, pc}
1004e842:	46c0      	nop			@ (mov r8, r8)
1004e844:	000007ff 	.word	0x000007ff

1004e848 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
1004e848:	b580      	push	{r7, lr}
1004e84a:	b082      	sub	sp, #8
1004e84c:	af00      	add	r7, sp, #0
1004e84e:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
1004e850:	687b      	ldr	r3, [r7, #4]
1004e852:	2201      	movs	r2, #1
1004e854:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
1004e856:	687b      	ldr	r3, [r7, #4]
1004e858:	2200      	movs	r2, #0
1004e85a:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
1004e85c:	687b      	ldr	r3, [r7, #4]
1004e85e:	2200      	movs	r2, #0
1004e860:	809a      	strh	r2, [r3, #4]
}
1004e862:	46c0      	nop			@ (mov r8, r8)
1004e864:	46bd      	mov	sp, r7
1004e866:	b002      	add	sp, #8
1004e868:	bd80      	pop	{r7, pc}

1004e86a <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
1004e86a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e86c:	b08d      	sub	sp, #52	@ 0x34
1004e86e:	af04      	add	r7, sp, #16
1004e870:	60f8      	str	r0, [r7, #12]
1004e872:	60b9      	str	r1, [r7, #8]
1004e874:	603b      	str	r3, [r7, #0]
1004e876:	1dbb      	adds	r3, r7, #6
1004e878:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
1004e87a:	231e      	movs	r3, #30
1004e87c:	18fb      	adds	r3, r7, r3
1004e87e:	2200      	movs	r2, #0
1004e880:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
1004e882:	1dbb      	adds	r3, r7, #6
1004e884:	881a      	ldrh	r2, [r3, #0]
1004e886:	68bb      	ldr	r3, [r7, #8]
1004e888:	21ff      	movs	r1, #255	@ 0xff
1004e88a:	0018      	movs	r0, r3
1004e88c:	f017 fe08 	bl	100664a0 <memset>

  header.valid_flag = VALID_RECORD;
1004e890:	2310      	movs	r3, #16
1004e892:	18fb      	adds	r3, r7, r3
1004e894:	22fe      	movs	r2, #254	@ 0xfe
1004e896:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004e898:	1dba      	adds	r2, r7, #6
1004e89a:	251e      	movs	r5, #30
1004e89c:	197b      	adds	r3, r7, r5
1004e89e:	8812      	ldrh	r2, [r2, #0]
1004e8a0:	881b      	ldrh	r3, [r3, #0]
1004e8a2:	1ad3      	subs	r3, r2, r3
1004e8a4:	b29a      	uxth	r2, r3
1004e8a6:	231c      	movs	r3, #28
1004e8a8:	18fb      	adds	r3, r7, r3
1004e8aa:	3a04      	subs	r2, #4
1004e8ac:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1004e8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e8b0:	781b      	ldrb	r3, [r3, #0]
1004e8b2:	2b00      	cmp	r3, #0
1004e8b4:	d04e      	beq.n	1004e954 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
1004e8b6:	197b      	adds	r3, r7, r5
1004e8b8:	881b      	ldrh	r3, [r3, #0]
1004e8ba:	3304      	adds	r3, #4
1004e8bc:	68ba      	ldr	r2, [r7, #8]
1004e8be:	18d1      	adds	r1, r2, r3
1004e8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e8c2:	889b      	ldrh	r3, [r3, #4]
1004e8c4:	261b      	movs	r6, #27
1004e8c6:	19bc      	adds	r4, r7, r6
1004e8c8:	68f8      	ldr	r0, [r7, #12]
1004e8ca:	2210      	movs	r2, #16
1004e8cc:	18ba      	adds	r2, r7, r2
1004e8ce:	3201      	adds	r2, #1
1004e8d0:	9203      	str	r2, [sp, #12]
1004e8d2:	9302      	str	r3, [sp, #8]
1004e8d4:	2216      	movs	r2, #22
1004e8d6:	18bb      	adds	r3, r7, r2
1004e8d8:	9301      	str	r3, [sp, #4]
1004e8da:	231c      	movs	r3, #28
1004e8dc:	18fb      	adds	r3, r7, r3
1004e8de:	881b      	ldrh	r3, [r3, #0]
1004e8e0:	9300      	str	r3, [sp, #0]
1004e8e2:	000b      	movs	r3, r1
1004e8e4:	2200      	movs	r2, #0
1004e8e6:	21ff      	movs	r1, #255	@ 0xff
1004e8e8:	f7ff fd14 	bl	1004e314 <ReadNextRecordNoLock>
1004e8ec:	0003      	movs	r3, r0
1004e8ee:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
1004e8f0:	2216      	movs	r2, #22
1004e8f2:	18bb      	adds	r3, r7, r2
1004e8f4:	881a      	ldrh	r2, [r3, #0]
1004e8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e8f8:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
1004e8fa:	19bb      	adds	r3, r7, r6
1004e8fc:	781b      	ldrb	r3, [r3, #0]
1004e8fe:	2b00      	cmp	r3, #0
1004e900:	d006      	beq.n	1004e910 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
1004e902:	683b      	ldr	r3, [r7, #0]
1004e904:	197a      	adds	r2, r7, r5
1004e906:	8812      	ldrh	r2, [r2, #0]
1004e908:	801a      	strh	r2, [r3, #0]
        return status;
1004e90a:	19bb      	adds	r3, r7, r6
1004e90c:	781b      	ldrb	r3, [r3, #0]
1004e90e:	e0a1      	b.n	1004ea54 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
1004e910:	2316      	movs	r3, #22
1004e912:	18fb      	adds	r3, r7, r3
1004e914:	881a      	ldrh	r2, [r3, #0]
1004e916:	2110      	movs	r1, #16
1004e918:	187b      	adds	r3, r7, r1
1004e91a:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
1004e91c:	251e      	movs	r5, #30
1004e91e:	197b      	adds	r3, r7, r5
1004e920:	881b      	ldrh	r3, [r3, #0]
1004e922:	68ba      	ldr	r2, [r7, #8]
1004e924:	18d3      	adds	r3, r2, r3
1004e926:	000c      	movs	r4, r1
1004e928:	1879      	adds	r1, r7, r1
1004e92a:	2204      	movs	r2, #4
1004e92c:	0018      	movs	r0, r3
1004e92e:	f017 fe2c 	bl	1006658a <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
1004e932:	193b      	adds	r3, r7, r4
1004e934:	885b      	ldrh	r3, [r3, #2]
1004e936:	3303      	adds	r3, #3
1004e938:	b29b      	uxth	r3, r3
1004e93a:	b21b      	sxth	r3, r3
1004e93c:	2203      	movs	r2, #3
1004e93e:	4313      	orrs	r3, r2
1004e940:	b21b      	sxth	r3, r3
1004e942:	b29a      	uxth	r2, r3
1004e944:	197b      	adds	r3, r7, r5
1004e946:	881b      	ldrh	r3, [r3, #0]
1004e948:	18d3      	adds	r3, r2, r3
1004e94a:	b29a      	uxth	r2, r3
1004e94c:	197b      	adds	r3, r7, r5
1004e94e:	3201      	adds	r2, #1
1004e950:	801a      	strh	r2, [r3, #0]
1004e952:	e031      	b.n	1004e9b8 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
1004e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e956:	8859      	ldrh	r1, [r3, #2]
1004e958:	231e      	movs	r3, #30
1004e95a:	18fb      	adds	r3, r7, r3
1004e95c:	881b      	ldrh	r3, [r3, #0]
1004e95e:	68ba      	ldr	r2, [r7, #8]
1004e960:	18d5      	adds	r5, r2, r3
1004e962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e964:	889b      	ldrh	r3, [r3, #4]
1004e966:	261b      	movs	r6, #27
1004e968:	19bc      	adds	r4, r7, r6
1004e96a:	221c      	movs	r2, #28
1004e96c:	18ba      	adds	r2, r7, r2
1004e96e:	8812      	ldrh	r2, [r2, #0]
1004e970:	68f8      	ldr	r0, [r7, #12]
1004e972:	9301      	str	r3, [sp, #4]
1004e974:	2316      	movs	r3, #22
1004e976:	18fb      	adds	r3, r7, r3
1004e978:	9300      	str	r3, [sp, #0]
1004e97a:	0013      	movs	r3, r2
1004e97c:	002a      	movs	r2, r5
1004e97e:	f7ff fe20 	bl	1004e5c2 <ReadCurrentRecordNoLock>
1004e982:	0003      	movs	r3, r0
1004e984:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
1004e986:	19bb      	adds	r3, r7, r6
1004e988:	781b      	ldrb	r3, [r3, #0]
1004e98a:	2b00      	cmp	r3, #0
1004e98c:	d002      	beq.n	1004e994 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1004e98e:	19bb      	adds	r3, r7, r6
1004e990:	781b      	ldrb	r3, [r3, #0]
1004e992:	e05f      	b.n	1004ea54 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
1004e994:	2316      	movs	r3, #22
1004e996:	18fb      	adds	r3, r7, r3
1004e998:	881a      	ldrh	r2, [r3, #0]
1004e99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e99c:	885b      	ldrh	r3, [r3, #2]
1004e99e:	1ad3      	subs	r3, r2, r3
1004e9a0:	b29b      	uxth	r3, r3
1004e9a2:	3b01      	subs	r3, #1
1004e9a4:	b29b      	uxth	r3, r3
1004e9a6:	b21b      	sxth	r3, r3
1004e9a8:	2203      	movs	r2, #3
1004e9aa:	4313      	orrs	r3, r2
1004e9ac:	b21b      	sxth	r3, r3
1004e9ae:	b29a      	uxth	r2, r3
1004e9b0:	231e      	movs	r3, #30
1004e9b2:	18fb      	adds	r3, r7, r3
1004e9b4:	3201      	adds	r2, #1
1004e9b6:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
1004e9b8:	2316      	movs	r3, #22
1004e9ba:	18fb      	adds	r3, r7, r3
1004e9bc:	881a      	ldrh	r2, [r3, #0]
1004e9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e9c0:	885b      	ldrh	r3, [r3, #2]
1004e9c2:	1ad3      	subs	r3, r2, r3
1004e9c4:	b29b      	uxth	r3, r3
1004e9c6:	3b01      	subs	r3, #1
1004e9c8:	b29b      	uxth	r3, r3
1004e9ca:	b21b      	sxth	r3, r3
1004e9cc:	2203      	movs	r2, #3
1004e9ce:	4313      	orrs	r3, r2
1004e9d0:	b21b      	sxth	r3, r3
1004e9d2:	b29a      	uxth	r2, r3
1004e9d4:	2118      	movs	r1, #24
1004e9d6:	187b      	adds	r3, r7, r1
1004e9d8:	3201      	adds	r2, #1
1004e9da:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
1004e9dc:	187a      	adds	r2, r7, r1
1004e9de:	211c      	movs	r1, #28
1004e9e0:	187b      	adds	r3, r7, r1
1004e9e2:	8812      	ldrh	r2, [r2, #0]
1004e9e4:	881b      	ldrh	r3, [r3, #0]
1004e9e6:	429a      	cmp	r2, r3
1004e9e8:	d910      	bls.n	1004ea0c <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
1004e9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e9ec:	2200      	movs	r2, #0
1004e9ee:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
1004e9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e9f2:	885a      	ldrh	r2, [r3, #2]
1004e9f4:	187b      	adds	r3, r7, r1
1004e9f6:	881b      	ldrh	r3, [r3, #0]
1004e9f8:	18d3      	adds	r3, r2, r3
1004e9fa:	b29a      	uxth	r2, r3
1004e9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e9fe:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004ea00:	683b      	ldr	r3, [r7, #0]
1004ea02:	1dba      	adds	r2, r7, #6
1004ea04:	8812      	ldrh	r2, [r2, #0]
1004ea06:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004ea08:	2300      	movs	r3, #0
1004ea0a:	e023      	b.n	1004ea54 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
1004ea0c:	2318      	movs	r3, #24
1004ea0e:	18fa      	adds	r2, r7, r3
1004ea10:	231c      	movs	r3, #28
1004ea12:	18fb      	adds	r3, r7, r3
1004ea14:	8812      	ldrh	r2, [r2, #0]
1004ea16:	881b      	ldrh	r3, [r3, #0]
1004ea18:	429a      	cmp	r2, r3
1004ea1a:	d10b      	bne.n	1004ea34 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
1004ea1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ea1e:	2201      	movs	r2, #1
1004ea20:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004ea22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ea24:	2200      	movs	r2, #0
1004ea26:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004ea28:	683b      	ldr	r3, [r7, #0]
1004ea2a:	1dba      	adds	r2, r7, #6
1004ea2c:	8812      	ldrh	r2, [r2, #0]
1004ea2e:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004ea30:	2300      	movs	r3, #0
1004ea32:	e00f      	b.n	1004ea54 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
1004ea34:	2318      	movs	r3, #24
1004ea36:	18fa      	adds	r2, r7, r3
1004ea38:	231c      	movs	r3, #28
1004ea3a:	18fb      	adds	r3, r7, r3
1004ea3c:	8812      	ldrh	r2, [r2, #0]
1004ea3e:	881b      	ldrh	r3, [r3, #0]
1004ea40:	429a      	cmp	r2, r3
1004ea42:	d300      	bcc.n	1004ea46 <LoadDBToRAM+0x1dc>
1004ea44:	e728      	b.n	1004e898 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
1004ea46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ea48:	2201      	movs	r2, #1
1004ea4a:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004ea4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ea4e:	2200      	movs	r2, #0
1004ea50:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004ea52:	e721      	b.n	1004e898 <LoadDBToRAM+0x2e>
    }
  }
}
1004ea54:	0018      	movs	r0, r3
1004ea56:	46bd      	mov	sp, r7
1004ea58:	b009      	add	sp, #36	@ 0x24
1004ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ea5c <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
1004ea5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ea5e:	4c60      	ldr	r4, [pc, #384]	@ (1004ebe0 <CleanLargeDB+0x184>)
1004ea60:	44a5      	add	sp, r4
1004ea62:	af02      	add	r7, sp, #8
1004ea64:	0002      	movs	r2, r0
1004ea66:	4b5f      	ldr	r3, [pc, #380]	@ (1004ebe4 <CleanLargeDB+0x188>)
1004ea68:	2184      	movs	r1, #132	@ 0x84
1004ea6a:	0109      	lsls	r1, r1, #4
1004ea6c:	185b      	adds	r3, r3, r1
1004ea6e:	19db      	adds	r3, r3, r7
1004ea70:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
1004ea72:	4b5c      	ldr	r3, [pc, #368]	@ (1004ebe4 <CleanLargeDB+0x188>)
1004ea74:	185b      	adds	r3, r3, r1
1004ea76:	19db      	adds	r3, r3, r7
1004ea78:	781a      	ldrb	r2, [r3, #0]
1004ea7a:	495b      	ldr	r1, [pc, #364]	@ (1004ebe8 <CleanLargeDB+0x18c>)
1004ea7c:	0013      	movs	r3, r2
1004ea7e:	009b      	lsls	r3, r3, #2
1004ea80:	189b      	adds	r3, r3, r2
1004ea82:	009b      	lsls	r3, r3, #2
1004ea84:	18cb      	adds	r3, r1, r3
1004ea86:	330a      	adds	r3, #10
1004ea88:	881b      	ldrh	r3, [r3, #0]
1004ea8a:	2b00      	cmp	r3, #0
1004ea8c:	d101      	bne.n	1004ea92 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
1004ea8e:	2300      	movs	r3, #0
1004ea90:	e0a0      	b.n	1004ebd4 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
1004ea92:	4b56      	ldr	r3, [pc, #344]	@ (1004ebec <CleanLargeDB+0x190>)
1004ea94:	18fc      	adds	r4, r7, r3
1004ea96:	4d56      	ldr	r5, [pc, #344]	@ (1004ebf0 <CleanLargeDB+0x194>)
1004ea98:	197a      	adds	r2, r7, r5
1004ea9a:	4b52      	ldr	r3, [pc, #328]	@ (1004ebe4 <CleanLargeDB+0x188>)
1004ea9c:	2184      	movs	r1, #132	@ 0x84
1004ea9e:	0109      	lsls	r1, r1, #4
1004eaa0:	185b      	adds	r3, r3, r1
1004eaa2:	19db      	adds	r3, r3, r7
1004eaa4:	781b      	ldrb	r3, [r3, #0]
1004eaa6:	0011      	movs	r1, r2
1004eaa8:	0018      	movs	r0, r3
1004eaaa:	f000 fcd3 	bl	1004f454 <NVMDB_HandleInit>
1004eaae:	0003      	movs	r3, r0
1004eab0:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
1004eab2:	197b      	adds	r3, r7, r5
1004eab4:	685b      	ldr	r3, [r3, #4]
1004eab6:	4a4f      	ldr	r2, [pc, #316]	@ (1004ebf4 <CleanLargeDB+0x198>)
1004eab8:	18ba      	adds	r2, r7, r2
1004eaba:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
1004eabc:	4b4e      	ldr	r3, [pc, #312]	@ (1004ebf8 <CleanLargeDB+0x19c>)
1004eabe:	18fb      	adds	r3, r7, r3
1004eac0:	0018      	movs	r0, r3
1004eac2:	f7ff fec1 	bl	1004e848 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
1004eac6:	4e49      	ldr	r6, [pc, #292]	@ (1004ebec <CleanLargeDB+0x190>)
1004eac8:	19bc      	adds	r4, r7, r6
1004eaca:	4b4c      	ldr	r3, [pc, #304]	@ (1004ebfc <CleanLargeDB+0x1a0>)
1004eacc:	18fd      	adds	r5, r7, r3
1004eace:	2380      	movs	r3, #128	@ 0x80
1004ead0:	011a      	lsls	r2, r3, #4
1004ead2:	230c      	movs	r3, #12
1004ead4:	18f9      	adds	r1, r7, r3
1004ead6:	4b46      	ldr	r3, [pc, #280]	@ (1004ebf0 <CleanLargeDB+0x194>)
1004ead8:	18f8      	adds	r0, r7, r3
1004eada:	4b47      	ldr	r3, [pc, #284]	@ (1004ebf8 <CleanLargeDB+0x19c>)
1004eadc:	18fb      	adds	r3, r7, r3
1004eade:	9300      	str	r3, [sp, #0]
1004eae0:	002b      	movs	r3, r5
1004eae2:	f7ff fec2 	bl	1004e86a <LoadDBToRAM>
1004eae6:	0003      	movs	r3, r0
1004eae8:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
1004eaea:	19bb      	adds	r3, r7, r6
1004eaec:	781b      	ldrb	r3, [r3, #0]
1004eaee:	2b04      	cmp	r3, #4
1004eaf0:	d006      	beq.n	1004eb00 <CleanLargeDB+0xa4>
1004eaf2:	19bb      	adds	r3, r7, r6
1004eaf4:	781b      	ldrb	r3, [r3, #0]
1004eaf6:	2b00      	cmp	r3, #0
1004eaf8:	d002      	beq.n	1004eb00 <CleanLargeDB+0xa4>
    {
      return status;
1004eafa:	19bb      	adds	r3, r7, r6
1004eafc:	781b      	ldrb	r3, [r3, #0]
1004eafe:	e069      	b.n	1004ebd4 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
1004eb00:	4b3e      	ldr	r3, [pc, #248]	@ (1004ebfc <CleanLargeDB+0x1a0>)
1004eb02:	18fb      	adds	r3, r7, r3
1004eb04:	881a      	ldrh	r2, [r3, #0]
1004eb06:	2380      	movs	r3, #128	@ 0x80
1004eb08:	011b      	lsls	r3, r3, #4
1004eb0a:	429a      	cmp	r2, r3
1004eb0c:	d004      	beq.n	1004eb18 <CleanLargeDB+0xbc>
1004eb0e:	4b37      	ldr	r3, [pc, #220]	@ (1004ebec <CleanLargeDB+0x190>)
1004eb10:	18fb      	adds	r3, r7, r3
1004eb12:	781b      	ldrb	r3, [r3, #0]
1004eb14:	2b00      	cmp	r3, #0
1004eb16:	d0d6      	beq.n	1004eac6 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
1004eb18:	4a38      	ldr	r2, [pc, #224]	@ (1004ebfc <CleanLargeDB+0x1a0>)
1004eb1a:	18bb      	adds	r3, r7, r2
1004eb1c:	881b      	ldrh	r3, [r3, #0]
1004eb1e:	2b00      	cmp	r3, #0
1004eb20:	d019      	beq.n	1004eb56 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
1004eb22:	18bb      	adds	r3, r7, r2
1004eb24:	881b      	ldrh	r3, [r3, #0]
1004eb26:	001a      	movs	r2, r3
1004eb28:	230c      	movs	r3, #12
1004eb2a:	18f9      	adds	r1, r7, r3
1004eb2c:	4c31      	ldr	r4, [pc, #196]	@ (1004ebf4 <CleanLargeDB+0x198>)
1004eb2e:	193b      	adds	r3, r7, r4
1004eb30:	681b      	ldr	r3, [r3, #0]
1004eb32:	0018      	movs	r0, r3
1004eb34:	f7ff fe48 	bl	1004e7c8 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
1004eb38:	0022      	movs	r2, r4
1004eb3a:	18bb      	adds	r3, r7, r2
1004eb3c:	681b      	ldr	r3, [r3, #0]
1004eb3e:	2180      	movs	r1, #128	@ 0x80
1004eb40:	0109      	lsls	r1, r1, #4
1004eb42:	468c      	mov	ip, r1
1004eb44:	4463      	add	r3, ip
1004eb46:	18ba      	adds	r2, r7, r2
1004eb48:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
1004eb4a:	4b28      	ldr	r3, [pc, #160]	@ (1004ebec <CleanLargeDB+0x190>)
1004eb4c:	18fb      	adds	r3, r7, r3
1004eb4e:	781b      	ldrb	r3, [r3, #0]
1004eb50:	2b00      	cmp	r3, #0
1004eb52:	d102      	bne.n	1004eb5a <CleanLargeDB+0xfe>
  {
1004eb54:	e7b7      	b.n	1004eac6 <CleanLargeDB+0x6a>
        break;
1004eb56:	46c0      	nop			@ (mov r8, r8)
1004eb58:	e000      	b.n	1004eb5c <CleanLargeDB+0x100>
      {
        break;
1004eb5a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
1004eb5c:	4b24      	ldr	r3, [pc, #144]	@ (1004ebf0 <CleanLargeDB+0x194>)
1004eb5e:	18fb      	adds	r3, r7, r3
1004eb60:	689b      	ldr	r3, [r3, #8]
1004eb62:	3b01      	subs	r3, #1
1004eb64:	4a26      	ldr	r2, [pc, #152]	@ (1004ec00 <CleanLargeDB+0x1a4>)
1004eb66:	431a      	orrs	r2, r3
1004eb68:	4922      	ldr	r1, [pc, #136]	@ (1004ebf4 <CleanLargeDB+0x198>)
1004eb6a:	187b      	adds	r3, r7, r1
1004eb6c:	681b      	ldr	r3, [r3, #0]
1004eb6e:	1ad3      	subs	r3, r2, r3
1004eb70:	3301      	adds	r3, #1
1004eb72:	0ada      	lsrs	r2, r3, #11
1004eb74:	4823      	ldr	r0, [pc, #140]	@ (1004ec04 <CleanLargeDB+0x1a8>)
1004eb76:	183b      	adds	r3, r7, r0
1004eb78:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004eb7a:	187b      	adds	r3, r7, r1
1004eb7c:	681b      	ldr	r3, [r3, #0]
1004eb7e:	4a22      	ldr	r2, [pc, #136]	@ (1004ec08 <CleanLargeDB+0x1ac>)
1004eb80:	4694      	mov	ip, r2
1004eb82:	4463      	add	r3, ip
1004eb84:	0ada      	lsrs	r2, r3, #11
1004eb86:	4c21      	ldr	r4, [pc, #132]	@ (1004ec0c <CleanLargeDB+0x1b0>)
1004eb88:	193b      	adds	r3, r7, r4
1004eb8a:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004eb8c:	2181      	movs	r1, #129	@ 0x81
1004eb8e:	0109      	lsls	r1, r1, #4
1004eb90:	187b      	adds	r3, r7, r1
1004eb92:	2200      	movs	r2, #0
1004eb94:	601a      	str	r2, [r3, #0]
1004eb96:	193b      	adds	r3, r7, r4
1004eb98:	781a      	ldrb	r2, [r3, #0]
1004eb9a:	187b      	adds	r3, r7, r1
1004eb9c:	605a      	str	r2, [r3, #4]
1004eb9e:	183b      	adds	r3, r7, r0
1004eba0:	781a      	ldrb	r2, [r3, #0]
1004eba2:	187b      	adds	r3, r7, r1
1004eba4:	609a      	str	r2, [r3, #8]
1004eba6:	4b1a      	ldr	r3, [pc, #104]	@ (1004ec10 <CleanLargeDB+0x1b4>)
1004eba8:	18fa      	adds	r2, r7, r3
1004ebaa:	187b      	adds	r3, r7, r1
1004ebac:	0011      	movs	r1, r2
1004ebae:	0018      	movs	r0, r3
1004ebb0:	f7f7 fe30 	bl	10046814 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
1004ebb4:	4b0b      	ldr	r3, [pc, #44]	@ (1004ebe4 <CleanLargeDB+0x188>)
1004ebb6:	2284      	movs	r2, #132	@ 0x84
1004ebb8:	0112      	lsls	r2, r2, #4
1004ebba:	189b      	adds	r3, r3, r2
1004ebbc:	19db      	adds	r3, r3, r7
1004ebbe:	781a      	ldrb	r2, [r3, #0]
1004ebc0:	0013      	movs	r3, r2
1004ebc2:	009b      	lsls	r3, r3, #2
1004ebc4:	189b      	adds	r3, r3, r2
1004ebc6:	009b      	lsls	r3, r3, #2
1004ebc8:	4a07      	ldr	r2, [pc, #28]	@ (1004ebe8 <CleanLargeDB+0x18c>)
1004ebca:	189b      	adds	r3, r3, r2
1004ebcc:	0018      	movs	r0, r3
1004ebce:	f7ff fad5 	bl	1004e17c <NVMDB_get_info>
1004ebd2:	0003      	movs	r3, r0
}
1004ebd4:	0018      	movs	r0, r3
1004ebd6:	46bd      	mov	sp, r7
1004ebd8:	4b0e      	ldr	r3, [pc, #56]	@ (1004ec14 <CleanLargeDB+0x1b8>)
1004ebda:	449d      	add	sp, r3
1004ebdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ebde:	46c0      	nop			@ (mov r8, r8)
1004ebe0:	fffff7b4 	.word	0xfffff7b4
1004ebe4:	fffff7c7 	.word	0xfffff7c7
1004ebe8:	200022ac 	.word	0x200022ac
1004ebec:	0000083b 	.word	0x0000083b
1004ebf0:	00000824 	.word	0x00000824
1004ebf4:	0000083c 	.word	0x0000083c
1004ebf8:	0000081c 	.word	0x0000081c
1004ebfc:	00000836 	.word	0x00000836
1004ec00:	000007ff 	.word	0x000007ff
1004ec04:	0000083a 	.word	0x0000083a
1004ec08:	effc0000 	.word	0xeffc0000
1004ec0c:	00000839 	.word	0x00000839
1004ec10:	0000080c 	.word	0x0000080c
1004ec14:	00000844 	.word	0x00000844

1004ec18 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
1004ec18:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ec1a:	4c7a      	ldr	r4, [pc, #488]	@ (1004ee04 <CleanPage+0x1ec>)
1004ec1c:	44a5      	add	sp, r4
1004ec1e:	af02      	add	r7, sp, #8
1004ec20:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
1004ec22:	4b79      	ldr	r3, [pc, #484]	@ (1004ee08 <CleanPage+0x1f0>)
1004ec24:	18fb      	adds	r3, r7, r3
1004ec26:	2200      	movs	r2, #0
1004ec28:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
1004ec2a:	4b78      	ldr	r3, [pc, #480]	@ (1004ee0c <CleanPage+0x1f4>)
1004ec2c:	18fb      	adds	r3, r7, r3
1004ec2e:	2200      	movs	r2, #0
1004ec30:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004ec32:	2300      	movs	r3, #0
1004ec34:	4a76      	ldr	r2, [pc, #472]	@ (1004ee10 <CleanPage+0x1f8>)
1004ec36:	18ba      	adds	r2, r7, r2
1004ec38:	6013      	str	r3, [r2, #0]
1004ec3a:	e023      	b.n	1004ec84 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004ec3c:	687b      	ldr	r3, [r7, #4]
1004ec3e:	6899      	ldr	r1, [r3, #8]
1004ec40:	4b73      	ldr	r3, [pc, #460]	@ (1004ee10 <CleanPage+0x1f8>)
1004ec42:	18fb      	adds	r3, r7, r3
1004ec44:	681a      	ldr	r2, [r3, #0]
1004ec46:	0013      	movs	r3, r2
1004ec48:	005b      	lsls	r3, r3, #1
1004ec4a:	189b      	adds	r3, r3, r2
1004ec4c:	009b      	lsls	r3, r3, #2
1004ec4e:	18ca      	adds	r2, r1, r3
1004ec50:	4970      	ldr	r1, [pc, #448]	@ (1004ee14 <CleanPage+0x1fc>)
1004ec52:	187b      	adds	r3, r7, r1
1004ec54:	7812      	ldrb	r2, [r2, #0]
1004ec56:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
1004ec58:	187b      	adds	r3, r7, r1
1004ec5a:	781a      	ldrb	r2, [r3, #0]
1004ec5c:	496e      	ldr	r1, [pc, #440]	@ (1004ee18 <CleanPage+0x200>)
1004ec5e:	0013      	movs	r3, r2
1004ec60:	009b      	lsls	r3, r3, #2
1004ec62:	189b      	adds	r3, r3, r2
1004ec64:	009b      	lsls	r3, r3, #2
1004ec66:	18cb      	adds	r3, r1, r3
1004ec68:	330a      	adds	r3, #10
1004ec6a:	881b      	ldrh	r3, [r3, #0]
1004ec6c:	2b00      	cmp	r3, #0
1004ec6e:	d003      	beq.n	1004ec78 <CleanPage+0x60>
    {
      found = TRUE;
1004ec70:	4b66      	ldr	r3, [pc, #408]	@ (1004ee0c <CleanPage+0x1f4>)
1004ec72:	18fb      	adds	r3, r7, r3
1004ec74:	2201      	movs	r2, #1
1004ec76:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004ec78:	4a65      	ldr	r2, [pc, #404]	@ (1004ee10 <CleanPage+0x1f8>)
1004ec7a:	18bb      	adds	r3, r7, r2
1004ec7c:	681b      	ldr	r3, [r3, #0]
1004ec7e:	3301      	adds	r3, #1
1004ec80:	18ba      	adds	r2, r7, r2
1004ec82:	6013      	str	r3, [r2, #0]
1004ec84:	687b      	ldr	r3, [r7, #4]
1004ec86:	791b      	ldrb	r3, [r3, #4]
1004ec88:	001a      	movs	r2, r3
1004ec8a:	4b61      	ldr	r3, [pc, #388]	@ (1004ee10 <CleanPage+0x1f8>)
1004ec8c:	18fb      	adds	r3, r7, r3
1004ec8e:	681b      	ldr	r3, [r3, #0]
1004ec90:	4293      	cmp	r3, r2
1004ec92:	dbd3      	blt.n	1004ec3c <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
1004ec94:	4b5d      	ldr	r3, [pc, #372]	@ (1004ee0c <CleanPage+0x1f4>)
1004ec96:	18fb      	adds	r3, r7, r3
1004ec98:	781b      	ldrb	r3, [r3, #0]
1004ec9a:	2b00      	cmp	r3, #0
1004ec9c:	d101      	bne.n	1004eca2 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1004ec9e:	2300      	movs	r3, #0
1004eca0:	e0ab      	b.n	1004edfa <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004eca2:	2380      	movs	r3, #128	@ 0x80
1004eca4:	011a      	lsls	r2, r3, #4
1004eca6:	2308      	movs	r3, #8
1004eca8:	18fb      	adds	r3, r7, r3
1004ecaa:	21ff      	movs	r1, #255	@ 0xff
1004ecac:	0018      	movs	r0, r3
1004ecae:	f017 fbf7 	bl	100664a0 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004ecb2:	2300      	movs	r3, #0
1004ecb4:	4a56      	ldr	r2, [pc, #344]	@ (1004ee10 <CleanPage+0x1f8>)
1004ecb6:	18ba      	adds	r2, r7, r2
1004ecb8:	6013      	str	r3, [r2, #0]
1004ecba:	e051      	b.n	1004ed60 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004ecbc:	687b      	ldr	r3, [r7, #4]
1004ecbe:	6899      	ldr	r1, [r3, #8]
1004ecc0:	4853      	ldr	r0, [pc, #332]	@ (1004ee10 <CleanPage+0x1f8>)
1004ecc2:	183b      	adds	r3, r7, r0
1004ecc4:	681a      	ldr	r2, [r3, #0]
1004ecc6:	0013      	movs	r3, r2
1004ecc8:	005b      	lsls	r3, r3, #1
1004ecca:	189b      	adds	r3, r3, r2
1004eccc:	009b      	lsls	r3, r3, #2
1004ecce:	18ca      	adds	r2, r1, r3
1004ecd0:	4d50      	ldr	r5, [pc, #320]	@ (1004ee14 <CleanPage+0x1fc>)
1004ecd2:	197b      	adds	r3, r7, r5
1004ecd4:	7812      	ldrb	r2, [r2, #0]
1004ecd6:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
1004ecd8:	687b      	ldr	r3, [r7, #4]
1004ecda:	6899      	ldr	r1, [r3, #8]
1004ecdc:	183b      	adds	r3, r7, r0
1004ecde:	681a      	ldr	r2, [r3, #0]
1004ece0:	0013      	movs	r3, r2
1004ece2:	005b      	lsls	r3, r3, #1
1004ece4:	189b      	adds	r3, r3, r2
1004ece6:	009b      	lsls	r3, r3, #2
1004ece8:	18cb      	adds	r3, r1, r3
1004ecea:	685b      	ldr	r3, [r3, #4]
1004ecec:	2282      	movs	r2, #130	@ 0x82
1004ecee:	0112      	lsls	r2, r2, #4
1004ecf0:	18ba      	adds	r2, r7, r2
1004ecf2:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
1004ecf4:	4e49      	ldr	r6, [pc, #292]	@ (1004ee1c <CleanPage+0x204>)
1004ecf6:	19bc      	adds	r4, r7, r6
1004ecf8:	2381      	movs	r3, #129	@ 0x81
1004ecfa:	011b      	lsls	r3, r3, #4
1004ecfc:	18fa      	adds	r2, r7, r3
1004ecfe:	197b      	adds	r3, r7, r5
1004ed00:	781b      	ldrb	r3, [r3, #0]
1004ed02:	0011      	movs	r1, r2
1004ed04:	0018      	movs	r0, r3
1004ed06:	f000 fba5 	bl	1004f454 <NVMDB_HandleInit>
1004ed0a:	0003      	movs	r3, r0
1004ed0c:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
1004ed0e:	19bb      	adds	r3, r7, r6
1004ed10:	781b      	ldrb	r3, [r3, #0]
1004ed12:	2b00      	cmp	r3, #0
1004ed14:	d001      	beq.n	1004ed1a <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
1004ed16:	2300      	movs	r3, #0
1004ed18:	e06f      	b.n	1004edfa <CleanPage+0x1e2>
    }

    InitReadState(&state);
1004ed1a:	4d41      	ldr	r5, [pc, #260]	@ (1004ee20 <CleanPage+0x208>)
1004ed1c:	197b      	adds	r3, r7, r5
1004ed1e:	0018      	movs	r0, r3
1004ed20:	f7ff fd92 	bl	1004e848 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
1004ed24:	2308      	movs	r3, #8
1004ed26:	18fa      	adds	r2, r7, r3
1004ed28:	2082      	movs	r0, #130	@ 0x82
1004ed2a:	0100      	lsls	r0, r0, #4
1004ed2c:	183b      	adds	r3, r7, r0
1004ed2e:	681b      	ldr	r3, [r3, #0]
1004ed30:	18d1      	adds	r1, r2, r3
1004ed32:	183b      	adds	r3, r7, r0
1004ed34:	681b      	ldr	r3, [r3, #0]
1004ed36:	b29b      	uxth	r3, r3
1004ed38:	2280      	movs	r2, #128	@ 0x80
1004ed3a:	0112      	lsls	r2, r2, #4
1004ed3c:	1ad3      	subs	r3, r2, r3
1004ed3e:	b29a      	uxth	r2, r3
1004ed40:	4b38      	ldr	r3, [pc, #224]	@ (1004ee24 <CleanPage+0x20c>)
1004ed42:	18fc      	adds	r4, r7, r3
1004ed44:	2381      	movs	r3, #129	@ 0x81
1004ed46:	011b      	lsls	r3, r3, #4
1004ed48:	18f8      	adds	r0, r7, r3
1004ed4a:	197b      	adds	r3, r7, r5
1004ed4c:	9300      	str	r3, [sp, #0]
1004ed4e:	0023      	movs	r3, r4
1004ed50:	f7ff fd8b 	bl	1004e86a <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004ed54:	4a2e      	ldr	r2, [pc, #184]	@ (1004ee10 <CleanPage+0x1f8>)
1004ed56:	18bb      	adds	r3, r7, r2
1004ed58:	681b      	ldr	r3, [r3, #0]
1004ed5a:	3301      	adds	r3, #1
1004ed5c:	18ba      	adds	r2, r7, r2
1004ed5e:	6013      	str	r3, [r2, #0]
1004ed60:	687b      	ldr	r3, [r7, #4]
1004ed62:	791b      	ldrb	r3, [r3, #4]
1004ed64:	001a      	movs	r2, r3
1004ed66:	4c2a      	ldr	r4, [pc, #168]	@ (1004ee10 <CleanPage+0x1f8>)
1004ed68:	193b      	adds	r3, r7, r4
1004ed6a:	681b      	ldr	r3, [r3, #0]
1004ed6c:	4293      	cmp	r3, r2
1004ed6e:	dba5      	blt.n	1004ecbc <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004ed70:	687b      	ldr	r3, [r7, #4]
1004ed72:	681b      	ldr	r3, [r3, #0]
1004ed74:	2280      	movs	r2, #128	@ 0x80
1004ed76:	0112      	lsls	r2, r2, #4
1004ed78:	2108      	movs	r1, #8
1004ed7a:	1879      	adds	r1, r7, r1
1004ed7c:	0018      	movs	r0, r3
1004ed7e:	f7ff fd23 	bl	1004e7c8 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004ed82:	2300      	movs	r3, #0
1004ed84:	193a      	adds	r2, r7, r4
1004ed86:	6013      	str	r3, [r2, #0]
1004ed88:	e02c      	b.n	1004ede4 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004ed8a:	687b      	ldr	r3, [r7, #4]
1004ed8c:	6899      	ldr	r1, [r3, #8]
1004ed8e:	4b20      	ldr	r3, [pc, #128]	@ (1004ee10 <CleanPage+0x1f8>)
1004ed90:	18fb      	adds	r3, r7, r3
1004ed92:	681a      	ldr	r2, [r3, #0]
1004ed94:	0013      	movs	r3, r2
1004ed96:	005b      	lsls	r3, r3, #1
1004ed98:	189b      	adds	r3, r3, r2
1004ed9a:	009b      	lsls	r3, r3, #2
1004ed9c:	18ca      	adds	r2, r1, r3
1004ed9e:	491d      	ldr	r1, [pc, #116]	@ (1004ee14 <CleanPage+0x1fc>)
1004eda0:	187b      	adds	r3, r7, r1
1004eda2:	7812      	ldrb	r2, [r2, #0]
1004eda4:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
1004eda6:	187b      	adds	r3, r7, r1
1004eda8:	781a      	ldrb	r2, [r3, #0]
1004edaa:	0013      	movs	r3, r2
1004edac:	009b      	lsls	r3, r3, #2
1004edae:	189b      	adds	r3, r3, r2
1004edb0:	009b      	lsls	r3, r3, #2
1004edb2:	4a19      	ldr	r2, [pc, #100]	@ (1004ee18 <CleanPage+0x200>)
1004edb4:	189b      	adds	r3, r3, r2
1004edb6:	4d19      	ldr	r5, [pc, #100]	@ (1004ee1c <CleanPage+0x204>)
1004edb8:	197c      	adds	r4, r7, r5
1004edba:	0018      	movs	r0, r3
1004edbc:	f7ff f9de 	bl	1004e17c <NVMDB_get_info>
1004edc0:	0003      	movs	r3, r0
1004edc2:	7023      	strb	r3, [r4, #0]
    if(status)
1004edc4:	002a      	movs	r2, r5
1004edc6:	18bb      	adds	r3, r7, r2
1004edc8:	781b      	ldrb	r3, [r3, #0]
1004edca:	2b00      	cmp	r3, #0
1004edcc:	d004      	beq.n	1004edd8 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
1004edce:	4b0e      	ldr	r3, [pc, #56]	@ (1004ee08 <CleanPage+0x1f0>)
1004edd0:	18fb      	adds	r3, r7, r3
1004edd2:	18ba      	adds	r2, r7, r2
1004edd4:	7812      	ldrb	r2, [r2, #0]
1004edd6:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004edd8:	4a0d      	ldr	r2, [pc, #52]	@ (1004ee10 <CleanPage+0x1f8>)
1004edda:	18bb      	adds	r3, r7, r2
1004eddc:	681b      	ldr	r3, [r3, #0]
1004edde:	3301      	adds	r3, #1
1004ede0:	18ba      	adds	r2, r7, r2
1004ede2:	6013      	str	r3, [r2, #0]
1004ede4:	687b      	ldr	r3, [r7, #4]
1004ede6:	791b      	ldrb	r3, [r3, #4]
1004ede8:	001a      	movs	r2, r3
1004edea:	4b09      	ldr	r3, [pc, #36]	@ (1004ee10 <CleanPage+0x1f8>)
1004edec:	18fb      	adds	r3, r7, r3
1004edee:	681b      	ldr	r3, [r3, #0]
1004edf0:	4293      	cmp	r3, r2
1004edf2:	dbca      	blt.n	1004ed8a <CleanPage+0x172>
    }
  }

  return ret;
1004edf4:	4b04      	ldr	r3, [pc, #16]	@ (1004ee08 <CleanPage+0x1f0>)
1004edf6:	18fb      	adds	r3, r7, r3
1004edf8:	781b      	ldrb	r3, [r3, #0]
}
1004edfa:	0018      	movs	r0, r3
1004edfc:	46bd      	mov	sp, r7
1004edfe:	4b0a      	ldr	r3, [pc, #40]	@ (1004ee28 <CleanPage+0x210>)
1004ee00:	449d      	add	sp, r3
1004ee02:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ee04:	fffff7c4 	.word	0xfffff7c4
1004ee08:	0000082f 	.word	0x0000082f
1004ee0c:	00000827 	.word	0x00000827
1004ee10:	00000828 	.word	0x00000828
1004ee14:	00000826 	.word	0x00000826
1004ee18:	200022ac 	.word	0x200022ac
1004ee1c:	00000825 	.word	0x00000825
1004ee20:	00000808 	.word	0x00000808
1004ee24:	0000080e 	.word	0x0000080e
1004ee28:	00000834 	.word	0x00000834

1004ee2c <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
1004ee2c:	b590      	push	{r4, r7, lr}
1004ee2e:	b087      	sub	sp, #28
1004ee30:	af00      	add	r7, sp, #0
1004ee32:	0002      	movs	r2, r0
1004ee34:	6039      	str	r1, [r7, #0]
1004ee36:	1dfb      	adds	r3, r7, #7
1004ee38:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004ee3a:	2300      	movs	r3, #0
1004ee3c:	617b      	str	r3, [r7, #20]
1004ee3e:	e016      	b.n	1004ee6e <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004ee40:	240b      	movs	r4, #11
1004ee42:	1939      	adds	r1, r7, r4
1004ee44:	482e      	ldr	r0, [pc, #184]	@ (1004ef00 <GetDBType+0xd4>)
1004ee46:	697a      	ldr	r2, [r7, #20]
1004ee48:	0013      	movs	r3, r2
1004ee4a:	005b      	lsls	r3, r3, #1
1004ee4c:	189b      	adds	r3, r3, r2
1004ee4e:	009b      	lsls	r3, r3, #2
1004ee50:	18c3      	adds	r3, r0, r3
1004ee52:	3306      	adds	r3, #6
1004ee54:	781b      	ldrb	r3, [r3, #0]
1004ee56:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
1004ee58:	193a      	adds	r2, r7, r4
1004ee5a:	1dfb      	adds	r3, r7, #7
1004ee5c:	7812      	ldrb	r2, [r2, #0]
1004ee5e:	781b      	ldrb	r3, [r3, #0]
1004ee60:	429a      	cmp	r2, r3
1004ee62:	d101      	bne.n	1004ee68 <GetDBType+0x3c>
    {
      return LARGE_DB;
1004ee64:	2302      	movs	r3, #2
1004ee66:	e046      	b.n	1004eef6 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004ee68:	697b      	ldr	r3, [r7, #20]
1004ee6a:	3301      	adds	r3, #1
1004ee6c:	617b      	str	r3, [r7, #20]
1004ee6e:	697b      	ldr	r3, [r7, #20]
1004ee70:	2b01      	cmp	r3, #1
1004ee72:	dde5      	ble.n	1004ee40 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004ee74:	2300      	movs	r3, #0
1004ee76:	613b      	str	r3, [r7, #16]
1004ee78:	e039      	b.n	1004eeee <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004ee7a:	2300      	movs	r3, #0
1004ee7c:	60fb      	str	r3, [r7, #12]
1004ee7e:	e026      	b.n	1004eece <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004ee80:	4920      	ldr	r1, [pc, #128]	@ (1004ef04 <GetDBType+0xd8>)
1004ee82:	693a      	ldr	r2, [r7, #16]
1004ee84:	0013      	movs	r3, r2
1004ee86:	005b      	lsls	r3, r3, #1
1004ee88:	189b      	adds	r3, r3, r2
1004ee8a:	009b      	lsls	r3, r3, #2
1004ee8c:	18cb      	adds	r3, r1, r3
1004ee8e:	3308      	adds	r3, #8
1004ee90:	6819      	ldr	r1, [r3, #0]
1004ee92:	68fa      	ldr	r2, [r7, #12]
1004ee94:	0013      	movs	r3, r2
1004ee96:	005b      	lsls	r3, r3, #1
1004ee98:	189b      	adds	r3, r3, r2
1004ee9a:	009b      	lsls	r3, r3, #2
1004ee9c:	18ca      	adds	r2, r1, r3
1004ee9e:	210b      	movs	r1, #11
1004eea0:	187b      	adds	r3, r7, r1
1004eea2:	7812      	ldrb	r2, [r2, #0]
1004eea4:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
1004eea6:	187a      	adds	r2, r7, r1
1004eea8:	1dfb      	adds	r3, r7, #7
1004eeaa:	7812      	ldrb	r2, [r2, #0]
1004eeac:	781b      	ldrb	r3, [r3, #0]
1004eeae:	429a      	cmp	r2, r3
1004eeb0:	d10a      	bne.n	1004eec8 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
1004eeb2:	693a      	ldr	r2, [r7, #16]
1004eeb4:	0013      	movs	r3, r2
1004eeb6:	005b      	lsls	r3, r3, #1
1004eeb8:	189b      	adds	r3, r3, r2
1004eeba:	009b      	lsls	r3, r3, #2
1004eebc:	4a11      	ldr	r2, [pc, #68]	@ (1004ef04 <GetDBType+0xd8>)
1004eebe:	189a      	adds	r2, r3, r2
1004eec0:	683b      	ldr	r3, [r7, #0]
1004eec2:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
1004eec4:	2301      	movs	r3, #1
1004eec6:	e016      	b.n	1004eef6 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004eec8:	68fb      	ldr	r3, [r7, #12]
1004eeca:	3301      	adds	r3, #1
1004eecc:	60fb      	str	r3, [r7, #12]
1004eece:	490d      	ldr	r1, [pc, #52]	@ (1004ef04 <GetDBType+0xd8>)
1004eed0:	693a      	ldr	r2, [r7, #16]
1004eed2:	0013      	movs	r3, r2
1004eed4:	005b      	lsls	r3, r3, #1
1004eed6:	189b      	adds	r3, r3, r2
1004eed8:	009b      	lsls	r3, r3, #2
1004eeda:	18cb      	adds	r3, r1, r3
1004eedc:	3304      	adds	r3, #4
1004eede:	781b      	ldrb	r3, [r3, #0]
1004eee0:	001a      	movs	r2, r3
1004eee2:	68fb      	ldr	r3, [r7, #12]
1004eee4:	4293      	cmp	r3, r2
1004eee6:	dbcb      	blt.n	1004ee80 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004eee8:	693b      	ldr	r3, [r7, #16]
1004eeea:	3301      	adds	r3, #1
1004eeec:	613b      	str	r3, [r7, #16]
1004eeee:	693b      	ldr	r3, [r7, #16]
1004eef0:	2b00      	cmp	r3, #0
1004eef2:	dbc2      	blt.n	1004ee7a <GetDBType+0x4e>
      }
    }
  }

  return 0;
1004eef4:	2300      	movs	r3, #0
}
1004eef6:	0018      	movs	r0, r3
1004eef8:	46bd      	mov	sp, r7
1004eefa:	b007      	add	sp, #28
1004eefc:	bd90      	pop	{r4, r7, pc}
1004eefe:	46c0      	nop			@ (mov r8, r8)
1004ef00:	10067df8 	.word	0x10067df8
1004ef04:	200022d8 	.word	0x200022d8

1004ef08 <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
1004ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ef0a:	4c3d      	ldr	r4, [pc, #244]	@ (1004f000 <EraseSmallDB+0xf8>)
1004ef0c:	44a5      	add	sp, r4
1004ef0e:	af02      	add	r7, sp, #8
1004ef10:	0002      	movs	r2, r0
1004ef12:	6039      	str	r1, [r7, #0]
1004ef14:	4b3b      	ldr	r3, [pc, #236]	@ (1004f004 <EraseSmallDB+0xfc>)
1004ef16:	2183      	movs	r1, #131	@ 0x83
1004ef18:	0109      	lsls	r1, r1, #4
1004ef1a:	185b      	adds	r3, r3, r1
1004ef1c:	19db      	adds	r3, r3, r7
1004ef1e:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004ef20:	2380      	movs	r3, #128	@ 0x80
1004ef22:	011a      	lsls	r2, r3, #4
1004ef24:	2324      	movs	r3, #36	@ 0x24
1004ef26:	18fb      	adds	r3, r7, r3
1004ef28:	21ff      	movs	r1, #255	@ 0xff
1004ef2a:	0018      	movs	r0, r3
1004ef2c:	f017 fab8 	bl	100664a0 <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004ef30:	2300      	movs	r3, #0
1004ef32:	4a35      	ldr	r2, [pc, #212]	@ (1004f008 <EraseSmallDB+0x100>)
1004ef34:	18ba      	adds	r2, r7, r2
1004ef36:	6013      	str	r3, [r2, #0]
1004ef38:	e04b      	b.n	1004efd2 <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004ef3a:	683b      	ldr	r3, [r7, #0]
1004ef3c:	6899      	ldr	r1, [r3, #8]
1004ef3e:	4c32      	ldr	r4, [pc, #200]	@ (1004f008 <EraseSmallDB+0x100>)
1004ef40:	193b      	adds	r3, r7, r4
1004ef42:	681a      	ldr	r2, [r3, #0]
1004ef44:	0013      	movs	r3, r2
1004ef46:	005b      	lsls	r3, r3, #1
1004ef48:	189b      	adds	r3, r3, r2
1004ef4a:	009b      	lsls	r3, r3, #2
1004ef4c:	18ca      	adds	r2, r1, r3
1004ef4e:	492f      	ldr	r1, [pc, #188]	@ (1004f00c <EraseSmallDB+0x104>)
1004ef50:	187b      	adds	r3, r7, r1
1004ef52:	7812      	ldrb	r2, [r2, #0]
1004ef54:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
1004ef56:	187a      	adds	r2, r7, r1
1004ef58:	4b2a      	ldr	r3, [pc, #168]	@ (1004f004 <EraseSmallDB+0xfc>)
1004ef5a:	2083      	movs	r0, #131	@ 0x83
1004ef5c:	0100      	lsls	r0, r0, #4
1004ef5e:	181b      	adds	r3, r3, r0
1004ef60:	19db      	adds	r3, r3, r7
1004ef62:	7812      	ldrb	r2, [r2, #0]
1004ef64:	781b      	ldrb	r3, [r3, #0]
1004ef66:	429a      	cmp	r2, r3
1004ef68:	d02d      	beq.n	1004efc6 <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
1004ef6a:	2514      	movs	r5, #20
1004ef6c:	197a      	adds	r2, r7, r5
1004ef6e:	187b      	adds	r3, r7, r1
1004ef70:	781b      	ldrb	r3, [r3, #0]
1004ef72:	0011      	movs	r1, r2
1004ef74:	0018      	movs	r0, r3
1004ef76:	f000 fa6d 	bl	1004f454 <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
1004ef7a:	683b      	ldr	r3, [r7, #0]
1004ef7c:	6899      	ldr	r1, [r3, #8]
1004ef7e:	193b      	adds	r3, r7, r4
1004ef80:	681a      	ldr	r2, [r3, #0]
1004ef82:	0013      	movs	r3, r2
1004ef84:	005b      	lsls	r3, r3, #1
1004ef86:	189b      	adds	r3, r3, r2
1004ef88:	009b      	lsls	r3, r3, #2
1004ef8a:	18cb      	adds	r3, r1, r3
1004ef8c:	685b      	ldr	r3, [r3, #4]
1004ef8e:	4c20      	ldr	r4, [pc, #128]	@ (1004f010 <EraseSmallDB+0x108>)
1004ef90:	193a      	adds	r2, r7, r4
1004ef92:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
1004ef94:	260c      	movs	r6, #12
1004ef96:	19bb      	adds	r3, r7, r6
1004ef98:	0018      	movs	r0, r3
1004ef9a:	f7ff fc55 	bl	1004e848 <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
1004ef9e:	2324      	movs	r3, #36	@ 0x24
1004efa0:	18fa      	adds	r2, r7, r3
1004efa2:	193b      	adds	r3, r7, r4
1004efa4:	681b      	ldr	r3, [r3, #0]
1004efa6:	18d1      	adds	r1, r2, r3
1004efa8:	193b      	adds	r3, r7, r4
1004efaa:	681b      	ldr	r3, [r3, #0]
1004efac:	b29b      	uxth	r3, r3
1004efae:	2280      	movs	r2, #128	@ 0x80
1004efb0:	0112      	lsls	r2, r2, #4
1004efb2:	1ad3      	subs	r3, r2, r3
1004efb4:	b29a      	uxth	r2, r3
1004efb6:	2312      	movs	r3, #18
1004efb8:	18fc      	adds	r4, r7, r3
1004efba:	1978      	adds	r0, r7, r5
1004efbc:	19bb      	adds	r3, r7, r6
1004efbe:	9300      	str	r3, [sp, #0]
1004efc0:	0023      	movs	r3, r4
1004efc2:	f7ff fc52 	bl	1004e86a <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004efc6:	4a10      	ldr	r2, [pc, #64]	@ (1004f008 <EraseSmallDB+0x100>)
1004efc8:	18bb      	adds	r3, r7, r2
1004efca:	681b      	ldr	r3, [r3, #0]
1004efcc:	3301      	adds	r3, #1
1004efce:	18ba      	adds	r2, r7, r2
1004efd0:	6013      	str	r3, [r2, #0]
1004efd2:	683b      	ldr	r3, [r7, #0]
1004efd4:	791b      	ldrb	r3, [r3, #4]
1004efd6:	001a      	movs	r2, r3
1004efd8:	4b0b      	ldr	r3, [pc, #44]	@ (1004f008 <EraseSmallDB+0x100>)
1004efda:	18fb      	adds	r3, r7, r3
1004efdc:	681b      	ldr	r3, [r3, #0]
1004efde:	4293      	cmp	r3, r2
1004efe0:	dbab      	blt.n	1004ef3a <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004efe2:	683b      	ldr	r3, [r7, #0]
1004efe4:	681b      	ldr	r3, [r3, #0]
1004efe6:	2280      	movs	r2, #128	@ 0x80
1004efe8:	0112      	lsls	r2, r2, #4
1004efea:	2124      	movs	r1, #36	@ 0x24
1004efec:	1879      	adds	r1, r7, r1
1004efee:	0018      	movs	r0, r3
1004eff0:	f7ff fbea 	bl	1004e7c8 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004eff4:	2300      	movs	r3, #0
}
1004eff6:	0018      	movs	r0, r3
1004eff8:	46bd      	mov	sp, r7
1004effa:	4b06      	ldr	r3, [pc, #24]	@ (1004f014 <EraseSmallDB+0x10c>)
1004effc:	449d      	add	sp, r3
1004effe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f000:	fffff7c4 	.word	0xfffff7c4
1004f004:	fffff7d7 	.word	0xfffff7d7
1004f008:	0000082c 	.word	0x0000082c
1004f00c:	0000082b 	.word	0x0000082b
1004f010:	00000824 	.word	0x00000824
1004f014:	00000834 	.word	0x00000834

1004f018 <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004f018:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f01a:	b089      	sub	sp, #36	@ 0x24
1004f01c:	af02      	add	r7, sp, #8
1004f01e:	60f8      	str	r0, [r7, #12]
1004f020:	0008      	movs	r0, r1
1004f022:	0011      	movs	r1, r2
1004f024:	607b      	str	r3, [r7, #4]
1004f026:	230b      	movs	r3, #11
1004f028:	18fb      	adds	r3, r7, r3
1004f02a:	1c02      	adds	r2, r0, #0
1004f02c:	701a      	strb	r2, [r3, #0]
1004f02e:	2008      	movs	r0, #8
1004f030:	183b      	adds	r3, r7, r0
1004f032:	1c0a      	adds	r2, r1, #0
1004f034:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
1004f036:	0001      	movs	r1, r0
1004f038:	187b      	adds	r3, r7, r1
1004f03a:	881b      	ldrh	r3, [r3, #0]
1004f03c:	3b01      	subs	r3, #1
1004f03e:	b29b      	uxth	r3, r3
1004f040:	b21b      	sxth	r3, r3
1004f042:	2203      	movs	r2, #3
1004f044:	4313      	orrs	r3, r2
1004f046:	b21b      	sxth	r3, r3
1004f048:	b29a      	uxth	r2, r3
1004f04a:	187b      	adds	r3, r7, r1
1004f04c:	3201      	adds	r2, #1
1004f04e:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004f050:	68fb      	ldr	r3, [r7, #12]
1004f052:	685b      	ldr	r3, [r3, #4]
1004f054:	1d5a      	adds	r2, r3, #5
1004f056:	68fb      	ldr	r3, [r7, #12]
1004f058:	689b      	ldr	r3, [r3, #8]
1004f05a:	429a      	cmp	r2, r3
1004f05c:	d310      	bcc.n	1004f080 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
1004f05e:	68fb      	ldr	r3, [r7, #12]
1004f060:	781b      	ldrb	r3, [r3, #0]
1004f062:	0019      	movs	r1, r3
1004f064:	4a4a      	ldr	r2, [pc, #296]	@ (1004f190 <NVMDB_AppendRecordNoCache+0x178>)
1004f066:	000b      	movs	r3, r1
1004f068:	009b      	lsls	r3, r3, #2
1004f06a:	185b      	adds	r3, r3, r1
1004f06c:	009b      	lsls	r3, r3, #2
1004f06e:	18d3      	adds	r3, r2, r3
1004f070:	330a      	adds	r3, #10
1004f072:	881b      	ldrh	r3, [r3, #0]
1004f074:	2b00      	cmp	r3, #0
1004f076:	d001      	beq.n	1004f07c <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
1004f078:	230b      	movs	r3, #11
1004f07a:	e084      	b.n	1004f186 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
1004f07c:	2302      	movs	r3, #2
1004f07e:	e082      	b.n	1004f186 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004f080:	68fb      	ldr	r3, [r7, #12]
1004f082:	685b      	ldr	r3, [r3, #4]
1004f084:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
1004f086:	697b      	ldr	r3, [r7, #20]
1004f088:	781b      	ldrb	r3, [r3, #0]
1004f08a:	2bff      	cmp	r3, #255	@ 0xff
1004f08c:	d11c      	bne.n	1004f0c8 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
1004f08e:	68fb      	ldr	r3, [r7, #12]
1004f090:	689a      	ldr	r2, [r3, #8]
1004f092:	68fb      	ldr	r3, [r7, #12]
1004f094:	685b      	ldr	r3, [r3, #4]
1004f096:	1ad3      	subs	r3, r2, r3
1004f098:	2280      	movs	r2, #128	@ 0x80
1004f09a:	0252      	lsls	r2, r2, #9
1004f09c:	4293      	cmp	r3, r2
1004f09e:	d300      	bcc.n	1004f0a2 <NVMDB_AppendRecordNoCache+0x8a>
1004f0a0:	4b3c      	ldr	r3, [pc, #240]	@ (1004f194 <NVMDB_AppendRecordNoCache+0x17c>)
1004f0a2:	2112      	movs	r1, #18
1004f0a4:	187a      	adds	r2, r7, r1
1004f0a6:	8013      	strh	r3, [r2, #0]
      break;
1004f0a8:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
1004f0aa:	2308      	movs	r3, #8
1004f0ac:	0018      	movs	r0, r3
1004f0ae:	18fb      	adds	r3, r7, r3
1004f0b0:	881a      	ldrh	r2, [r3, #0]
1004f0b2:	2328      	movs	r3, #40	@ 0x28
1004f0b4:	181b      	adds	r3, r3, r0
1004f0b6:	19db      	adds	r3, r3, r7
1004f0b8:	881b      	ldrh	r3, [r3, #0]
1004f0ba:	18d3      	adds	r3, r2, r3
1004f0bc:	1cda      	adds	r2, r3, #3
1004f0be:	187b      	adds	r3, r7, r1
1004f0c0:	881b      	ldrh	r3, [r3, #0]
1004f0c2:	429a      	cmp	r2, r3
1004f0c4:	db27      	blt.n	1004f116 <NVMDB_AppendRecordNoCache+0xfe>
1004f0c6:	e015      	b.n	1004f0f4 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
1004f0c8:	697b      	ldr	r3, [r7, #20]
1004f0ca:	781b      	ldrb	r3, [r3, #0]
1004f0cc:	2bfe      	cmp	r3, #254	@ 0xfe
1004f0ce:	d005      	beq.n	1004f0dc <NVMDB_AppendRecordNoCache+0xc4>
1004f0d0:	697b      	ldr	r3, [r7, #20]
1004f0d2:	781b      	ldrb	r3, [r3, #0]
1004f0d4:	2b00      	cmp	r3, #0
1004f0d6:	d001      	beq.n	1004f0dc <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
1004f0d8:	2303      	movs	r3, #3
1004f0da:	e054      	b.n	1004f186 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004f0dc:	68fb      	ldr	r3, [r7, #12]
1004f0de:	685b      	ldr	r3, [r3, #4]
1004f0e0:	697a      	ldr	r2, [r7, #20]
1004f0e2:	8852      	ldrh	r2, [r2, #2]
1004f0e4:	3203      	adds	r2, #3
1004f0e6:	2103      	movs	r1, #3
1004f0e8:	430a      	orrs	r2, r1
1004f0ea:	189b      	adds	r3, r3, r2
1004f0ec:	1c5a      	adds	r2, r3, #1
1004f0ee:	68fb      	ldr	r3, [r7, #12]
1004f0f0:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004f0f2:	e7ad      	b.n	1004f050 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
1004f0f4:	68fb      	ldr	r3, [r7, #12]
1004f0f6:	781b      	ldrb	r3, [r3, #0]
1004f0f8:	0019      	movs	r1, r3
1004f0fa:	4a25      	ldr	r2, [pc, #148]	@ (1004f190 <NVMDB_AppendRecordNoCache+0x178>)
1004f0fc:	000b      	movs	r3, r1
1004f0fe:	009b      	lsls	r3, r3, #2
1004f100:	185b      	adds	r3, r3, r1
1004f102:	009b      	lsls	r3, r3, #2
1004f104:	18d3      	adds	r3, r2, r3
1004f106:	330a      	adds	r3, #10
1004f108:	881b      	ldrh	r3, [r3, #0]
1004f10a:	2b00      	cmp	r3, #0
1004f10c:	d001      	beq.n	1004f112 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
1004f10e:	230b      	movs	r3, #11
1004f110:	e039      	b.n	1004f186 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
1004f112:	2302      	movs	r3, #2
1004f114:	e037      	b.n	1004f186 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
1004f116:	68fb      	ldr	r3, [r7, #12]
1004f118:	6858      	ldr	r0, [r3, #4]
1004f11a:	2611      	movs	r6, #17
1004f11c:	19bc      	adds	r4, r7, r6
1004f11e:	687d      	ldr	r5, [r7, #4]
1004f120:	2308      	movs	r3, #8
1004f122:	001a      	movs	r2, r3
1004f124:	18fb      	adds	r3, r7, r3
1004f126:	881b      	ldrh	r3, [r3, #0]
1004f128:	469c      	mov	ip, r3
1004f12a:	230b      	movs	r3, #11
1004f12c:	18fb      	adds	r3, r7, r3
1004f12e:	7819      	ldrb	r1, [r3, #0]
1004f130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004f132:	9301      	str	r3, [sp, #4]
1004f134:	2328      	movs	r3, #40	@ 0x28
1004f136:	189b      	adds	r3, r3, r2
1004f138:	19db      	adds	r3, r3, r7
1004f13a:	881b      	ldrh	r3, [r3, #0]
1004f13c:	9300      	str	r3, [sp, #0]
1004f13e:	002b      	movs	r3, r5
1004f140:	4662      	mov	r2, ip
1004f142:	f7ff f99c 	bl	1004e47e <WriteRecord>
1004f146:	0003      	movs	r3, r0
1004f148:	7023      	strb	r3, [r4, #0]
  if(status)
1004f14a:	19bb      	adds	r3, r7, r6
1004f14c:	781b      	ldrb	r3, [r3, #0]
1004f14e:	2b00      	cmp	r3, #0
1004f150:	d002      	beq.n	1004f158 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
1004f152:	19bb      	adds	r3, r7, r6
1004f154:	781b      	ldrb	r3, [r3, #0]
1004f156:	e016      	b.n	1004f186 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
1004f158:	68fb      	ldr	r3, [r7, #12]
1004f15a:	781b      	ldrb	r3, [r3, #0]
1004f15c:	001a      	movs	r2, r3
1004f15e:	490c      	ldr	r1, [pc, #48]	@ (1004f190 <NVMDB_AppendRecordNoCache+0x178>)
1004f160:	0013      	movs	r3, r2
1004f162:	009b      	lsls	r3, r3, #2
1004f164:	189b      	adds	r3, r3, r2
1004f166:	009b      	lsls	r3, r3, #2
1004f168:	18cb      	adds	r3, r1, r3
1004f16a:	3308      	adds	r3, #8
1004f16c:	881b      	ldrh	r3, [r3, #0]
1004f16e:	3301      	adds	r3, #1
1004f170:	b298      	uxth	r0, r3
1004f172:	4907      	ldr	r1, [pc, #28]	@ (1004f190 <NVMDB_AppendRecordNoCache+0x178>)
1004f174:	0013      	movs	r3, r2
1004f176:	009b      	lsls	r3, r3, #2
1004f178:	189b      	adds	r3, r3, r2
1004f17a:	009b      	lsls	r3, r3, #2
1004f17c:	18cb      	adds	r3, r1, r3
1004f17e:	3308      	adds	r3, #8
1004f180:	1c02      	adds	r2, r0, #0
1004f182:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004f184:	2300      	movs	r3, #0
}
1004f186:	0018      	movs	r0, r3
1004f188:	46bd      	mov	sp, r7
1004f18a:	b007      	add	sp, #28
1004f18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f18e:	46c0      	nop			@ (mov r8, r8)
1004f190:	200022ac 	.word	0x200022ac
1004f194:	0000ffff 	.word	0x0000ffff

1004f198 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
1004f198:	b5b0      	push	{r4, r5, r7, lr}
1004f19a:	b088      	sub	sp, #32
1004f19c:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004f19e:	2300      	movs	r3, #0
1004f1a0:	61fb      	str	r3, [r7, #28]
1004f1a2:	e0cd      	b.n	1004f340 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
1004f1a4:	49a8      	ldr	r1, [pc, #672]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f1a6:	69fa      	ldr	r2, [r7, #28]
1004f1a8:	0013      	movs	r3, r2
1004f1aa:	005b      	lsls	r3, r3, #1
1004f1ac:	189b      	adds	r3, r3, r2
1004f1ae:	009b      	lsls	r3, r3, #2
1004f1b0:	585b      	ldr	r3, [r3, r1]
1004f1b2:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004f1b4:	2300      	movs	r3, #0
1004f1b6:	61bb      	str	r3, [r7, #24]
1004f1b8:	e0b1      	b.n	1004f31e <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004f1ba:	49a3      	ldr	r1, [pc, #652]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f1bc:	69fa      	ldr	r2, [r7, #28]
1004f1be:	0013      	movs	r3, r2
1004f1c0:	005b      	lsls	r3, r3, #1
1004f1c2:	189b      	adds	r3, r3, r2
1004f1c4:	009b      	lsls	r3, r3, #2
1004f1c6:	18cb      	adds	r3, r1, r3
1004f1c8:	3308      	adds	r3, #8
1004f1ca:	6819      	ldr	r1, [r3, #0]
1004f1cc:	69ba      	ldr	r2, [r7, #24]
1004f1ce:	0013      	movs	r3, r2
1004f1d0:	005b      	lsls	r3, r3, #1
1004f1d2:	189b      	adds	r3, r3, r2
1004f1d4:	009b      	lsls	r3, r3, #2
1004f1d6:	18ca      	adds	r2, r1, r3
1004f1d8:	2013      	movs	r0, #19
1004f1da:	183b      	adds	r3, r7, r0
1004f1dc:	7812      	ldrb	r2, [r2, #0]
1004f1de:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
1004f1e0:	4999      	ldr	r1, [pc, #612]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f1e2:	69fa      	ldr	r2, [r7, #28]
1004f1e4:	0013      	movs	r3, r2
1004f1e6:	005b      	lsls	r3, r3, #1
1004f1e8:	189b      	adds	r3, r3, r2
1004f1ea:	009b      	lsls	r3, r3, #2
1004f1ec:	18cb      	adds	r3, r1, r3
1004f1ee:	3308      	adds	r3, #8
1004f1f0:	6819      	ldr	r1, [r3, #0]
1004f1f2:	69ba      	ldr	r2, [r7, #24]
1004f1f4:	0013      	movs	r3, r2
1004f1f6:	005b      	lsls	r3, r3, #1
1004f1f8:	189b      	adds	r3, r3, r2
1004f1fa:	009b      	lsls	r3, r3, #2
1004f1fc:	18cb      	adds	r3, r1, r3
1004f1fe:	685b      	ldr	r3, [r3, #4]
1004f200:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
1004f202:	4991      	ldr	r1, [pc, #580]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f204:	69fa      	ldr	r2, [r7, #28]
1004f206:	0013      	movs	r3, r2
1004f208:	005b      	lsls	r3, r3, #1
1004f20a:	189b      	adds	r3, r3, r2
1004f20c:	009b      	lsls	r3, r3, #2
1004f20e:	18cb      	adds	r3, r1, r3
1004f210:	3308      	adds	r3, #8
1004f212:	6819      	ldr	r1, [r3, #0]
1004f214:	69ba      	ldr	r2, [r7, #24]
1004f216:	0013      	movs	r3, r2
1004f218:	005b      	lsls	r3, r3, #1
1004f21a:	189b      	adds	r3, r3, r2
1004f21c:	009b      	lsls	r3, r3, #2
1004f21e:	18ca      	adds	r2, r1, r3
1004f220:	1dbb      	adds	r3, r7, #6
1004f222:	8912      	ldrh	r2, [r2, #8]
1004f224:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
1004f226:	183b      	adds	r3, r7, r0
1004f228:	781a      	ldrb	r2, [r3, #0]
1004f22a:	4988      	ldr	r1, [pc, #544]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f22c:	0013      	movs	r3, r2
1004f22e:	009b      	lsls	r3, r3, #2
1004f230:	189b      	adds	r3, r3, r2
1004f232:	009b      	lsls	r3, r3, #2
1004f234:	585b      	ldr	r3, [r3, r1]
1004f236:	2b00      	cmp	r3, #0
1004f238:	d103      	bne.n	1004f242 <NVMDB_Init+0xaa>
1004f23a:	183b      	adds	r3, r7, r0
1004f23c:	781b      	ldrb	r3, [r3, #0]
1004f23e:	2b01      	cmp	r3, #1
1004f240:	d901      	bls.n	1004f246 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
1004f242:	2301      	movs	r3, #1
1004f244:	e0fc      	b.n	1004f440 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
1004f246:	2413      	movs	r4, #19
1004f248:	193b      	adds	r3, r7, r4
1004f24a:	781a      	ldrb	r2, [r3, #0]
1004f24c:	68f9      	ldr	r1, [r7, #12]
1004f24e:	68bb      	ldr	r3, [r7, #8]
1004f250:	18c8      	adds	r0, r1, r3
1004f252:	497e      	ldr	r1, [pc, #504]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f254:	0013      	movs	r3, r2
1004f256:	009b      	lsls	r3, r3, #2
1004f258:	189b      	adds	r3, r3, r2
1004f25a:	009b      	lsls	r3, r3, #2
1004f25c:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
1004f25e:	497a      	ldr	r1, [pc, #488]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f260:	69fa      	ldr	r2, [r7, #28]
1004f262:	0013      	movs	r3, r2
1004f264:	005b      	lsls	r3, r3, #1
1004f266:	189b      	adds	r3, r3, r2
1004f268:	009b      	lsls	r3, r3, #2
1004f26a:	18cb      	adds	r3, r1, r3
1004f26c:	3304      	adds	r3, #4
1004f26e:	781b      	ldrb	r3, [r3, #0]
1004f270:	3b01      	subs	r3, #1
1004f272:	69ba      	ldr	r2, [r7, #24]
1004f274:	429a      	cmp	r2, r3
1004f276:	d10e      	bne.n	1004f296 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
1004f278:	193b      	adds	r3, r7, r4
1004f27a:	781a      	ldrb	r2, [r3, #0]
1004f27c:	68fb      	ldr	r3, [r7, #12]
1004f27e:	2180      	movs	r1, #128	@ 0x80
1004f280:	0109      	lsls	r1, r1, #4
1004f282:	1859      	adds	r1, r3, r1
1004f284:	4871      	ldr	r0, [pc, #452]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f286:	0013      	movs	r3, r2
1004f288:	009b      	lsls	r3, r3, #2
1004f28a:	189b      	adds	r3, r3, r2
1004f28c:	009b      	lsls	r3, r3, #2
1004f28e:	18c3      	adds	r3, r0, r3
1004f290:	3304      	adds	r3, #4
1004f292:	6019      	str	r1, [r3, #0]
1004f294:	e01d      	b.n	1004f2d2 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
1004f296:	496c      	ldr	r1, [pc, #432]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f298:	69fa      	ldr	r2, [r7, #28]
1004f29a:	0013      	movs	r3, r2
1004f29c:	005b      	lsls	r3, r3, #1
1004f29e:	189b      	adds	r3, r3, r2
1004f2a0:	009b      	lsls	r3, r3, #2
1004f2a2:	18cb      	adds	r3, r1, r3
1004f2a4:	3308      	adds	r3, #8
1004f2a6:	6819      	ldr	r1, [r3, #0]
1004f2a8:	69bb      	ldr	r3, [r7, #24]
1004f2aa:	1c5a      	adds	r2, r3, #1
1004f2ac:	0013      	movs	r3, r2
1004f2ae:	005b      	lsls	r3, r3, #1
1004f2b0:	189b      	adds	r3, r3, r2
1004f2b2:	009b      	lsls	r3, r3, #2
1004f2b4:	18cb      	adds	r3, r1, r3
1004f2b6:	6859      	ldr	r1, [r3, #4]
1004f2b8:	2313      	movs	r3, #19
1004f2ba:	18fb      	adds	r3, r7, r3
1004f2bc:	781a      	ldrb	r2, [r3, #0]
1004f2be:	68fb      	ldr	r3, [r7, #12]
1004f2c0:	18c9      	adds	r1, r1, r3
1004f2c2:	4862      	ldr	r0, [pc, #392]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f2c4:	0013      	movs	r3, r2
1004f2c6:	009b      	lsls	r3, r3, #2
1004f2c8:	189b      	adds	r3, r3, r2
1004f2ca:	009b      	lsls	r3, r3, #2
1004f2cc:	18c3      	adds	r3, r0, r3
1004f2ce:	3304      	adds	r3, #4
1004f2d0:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
1004f2d2:	2013      	movs	r0, #19
1004f2d4:	183b      	adds	r3, r7, r0
1004f2d6:	781a      	ldrb	r2, [r3, #0]
1004f2d8:	495c      	ldr	r1, [pc, #368]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f2da:	0013      	movs	r3, r2
1004f2dc:	009b      	lsls	r3, r3, #2
1004f2de:	189b      	adds	r3, r3, r2
1004f2e0:	009b      	lsls	r3, r3, #2
1004f2e2:	18cb      	adds	r3, r1, r3
1004f2e4:	3310      	adds	r3, #16
1004f2e6:	1dba      	adds	r2, r7, #6
1004f2e8:	8812      	ldrh	r2, [r2, #0]
1004f2ea:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
1004f2ec:	183b      	adds	r3, r7, r0
1004f2ee:	781a      	ldrb	r2, [r3, #0]
1004f2f0:	0013      	movs	r3, r2
1004f2f2:	009b      	lsls	r3, r3, #2
1004f2f4:	189b      	adds	r3, r3, r2
1004f2f6:	009b      	lsls	r3, r3, #2
1004f2f8:	4a54      	ldr	r2, [pc, #336]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f2fa:	189b      	adds	r3, r3, r2
1004f2fc:	2512      	movs	r5, #18
1004f2fe:	197c      	adds	r4, r7, r5
1004f300:	0018      	movs	r0, r3
1004f302:	f7fe ff3b 	bl	1004e17c <NVMDB_get_info>
1004f306:	0003      	movs	r3, r0
1004f308:	7023      	strb	r3, [r4, #0]
      if(status)
1004f30a:	197b      	adds	r3, r7, r5
1004f30c:	781b      	ldrb	r3, [r3, #0]
1004f30e:	2b00      	cmp	r3, #0
1004f310:	d002      	beq.n	1004f318 <NVMDB_Init+0x180>
      {
        return status;
1004f312:	197b      	adds	r3, r7, r5
1004f314:	781b      	ldrb	r3, [r3, #0]
1004f316:	e093      	b.n	1004f440 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004f318:	69bb      	ldr	r3, [r7, #24]
1004f31a:	3301      	adds	r3, #1
1004f31c:	61bb      	str	r3, [r7, #24]
1004f31e:	494a      	ldr	r1, [pc, #296]	@ (1004f448 <NVMDB_Init+0x2b0>)
1004f320:	69fa      	ldr	r2, [r7, #28]
1004f322:	0013      	movs	r3, r2
1004f324:	005b      	lsls	r3, r3, #1
1004f326:	189b      	adds	r3, r3, r2
1004f328:	009b      	lsls	r3, r3, #2
1004f32a:	18cb      	adds	r3, r1, r3
1004f32c:	3304      	adds	r3, #4
1004f32e:	781b      	ldrb	r3, [r3, #0]
1004f330:	001a      	movs	r2, r3
1004f332:	69bb      	ldr	r3, [r7, #24]
1004f334:	4293      	cmp	r3, r2
1004f336:	da00      	bge.n	1004f33a <NVMDB_Init+0x1a2>
1004f338:	e73f      	b.n	1004f1ba <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004f33a:	69fb      	ldr	r3, [r7, #28]
1004f33c:	3301      	adds	r3, #1
1004f33e:	61fb      	str	r3, [r7, #28]
1004f340:	69fb      	ldr	r3, [r7, #28]
1004f342:	2b00      	cmp	r3, #0
1004f344:	da00      	bge.n	1004f348 <NVMDB_Init+0x1b0>
1004f346:	e72d      	b.n	1004f1a4 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004f348:	2300      	movs	r3, #0
1004f34a:	617b      	str	r3, [r7, #20]
1004f34c:	e074      	b.n	1004f438 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004f34e:	2413      	movs	r4, #19
1004f350:	1939      	adds	r1, r7, r4
1004f352:	483f      	ldr	r0, [pc, #252]	@ (1004f450 <NVMDB_Init+0x2b8>)
1004f354:	697a      	ldr	r2, [r7, #20]
1004f356:	0013      	movs	r3, r2
1004f358:	005b      	lsls	r3, r3, #1
1004f35a:	189b      	adds	r3, r3, r2
1004f35c:	009b      	lsls	r3, r3, #2
1004f35e:	18c3      	adds	r3, r0, r3
1004f360:	3306      	adds	r3, #6
1004f362:	781b      	ldrb	r3, [r3, #0]
1004f364:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
1004f366:	193b      	adds	r3, r7, r4
1004f368:	781a      	ldrb	r2, [r3, #0]
1004f36a:	4938      	ldr	r1, [pc, #224]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f36c:	0013      	movs	r3, r2
1004f36e:	009b      	lsls	r3, r3, #2
1004f370:	189b      	adds	r3, r3, r2
1004f372:	009b      	lsls	r3, r3, #2
1004f374:	585b      	ldr	r3, [r3, r1]
1004f376:	2b00      	cmp	r3, #0
1004f378:	d103      	bne.n	1004f382 <NVMDB_Init+0x1ea>
1004f37a:	193b      	adds	r3, r7, r4
1004f37c:	781b      	ldrb	r3, [r3, #0]
1004f37e:	2b01      	cmp	r3, #1
1004f380:	d901      	bls.n	1004f386 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1004f382:	2301      	movs	r3, #1
1004f384:	e05c      	b.n	1004f440 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
1004f386:	2413      	movs	r4, #19
1004f388:	193b      	adds	r3, r7, r4
1004f38a:	781a      	ldrb	r2, [r3, #0]
1004f38c:	4830      	ldr	r0, [pc, #192]	@ (1004f450 <NVMDB_Init+0x2b8>)
1004f38e:	6979      	ldr	r1, [r7, #20]
1004f390:	000b      	movs	r3, r1
1004f392:	005b      	lsls	r3, r3, #1
1004f394:	185b      	adds	r3, r3, r1
1004f396:	009b      	lsls	r3, r3, #2
1004f398:	5818      	ldr	r0, [r3, r0]
1004f39a:	492c      	ldr	r1, [pc, #176]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f39c:	0013      	movs	r3, r2
1004f39e:	009b      	lsls	r3, r3, #2
1004f3a0:	189b      	adds	r3, r3, r2
1004f3a2:	009b      	lsls	r3, r3, #2
1004f3a4:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
1004f3a6:	492a      	ldr	r1, [pc, #168]	@ (1004f450 <NVMDB_Init+0x2b8>)
1004f3a8:	697a      	ldr	r2, [r7, #20]
1004f3aa:	0013      	movs	r3, r2
1004f3ac:	005b      	lsls	r3, r3, #1
1004f3ae:	189b      	adds	r3, r3, r2
1004f3b0:	009b      	lsls	r3, r3, #2
1004f3b2:	5859      	ldr	r1, [r3, r1]
1004f3b4:	4826      	ldr	r0, [pc, #152]	@ (1004f450 <NVMDB_Init+0x2b8>)
1004f3b6:	697a      	ldr	r2, [r7, #20]
1004f3b8:	0013      	movs	r3, r2
1004f3ba:	005b      	lsls	r3, r3, #1
1004f3bc:	189b      	adds	r3, r3, r2
1004f3be:	009b      	lsls	r3, r3, #2
1004f3c0:	18c3      	adds	r3, r0, r3
1004f3c2:	3304      	adds	r3, #4
1004f3c4:	881b      	ldrh	r3, [r3, #0]
1004f3c6:	0018      	movs	r0, r3
1004f3c8:	193b      	adds	r3, r7, r4
1004f3ca:	781a      	ldrb	r2, [r3, #0]
1004f3cc:	1809      	adds	r1, r1, r0
1004f3ce:	481f      	ldr	r0, [pc, #124]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f3d0:	0013      	movs	r3, r2
1004f3d2:	009b      	lsls	r3, r3, #2
1004f3d4:	189b      	adds	r3, r3, r2
1004f3d6:	009b      	lsls	r3, r3, #2
1004f3d8:	18c3      	adds	r3, r0, r3
1004f3da:	3304      	adds	r3, #4
1004f3dc:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1004f3de:	193b      	adds	r3, r7, r4
1004f3e0:	781a      	ldrb	r2, [r3, #0]
1004f3e2:	481b      	ldr	r0, [pc, #108]	@ (1004f450 <NVMDB_Init+0x2b8>)
1004f3e4:	6979      	ldr	r1, [r7, #20]
1004f3e6:	000b      	movs	r3, r1
1004f3e8:	005b      	lsls	r3, r3, #1
1004f3ea:	185b      	adds	r3, r3, r1
1004f3ec:	009b      	lsls	r3, r3, #2
1004f3ee:	18c3      	adds	r3, r0, r3
1004f3f0:	3308      	adds	r3, #8
1004f3f2:	8818      	ldrh	r0, [r3, #0]
1004f3f4:	4915      	ldr	r1, [pc, #84]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f3f6:	0013      	movs	r3, r2
1004f3f8:	009b      	lsls	r3, r3, #2
1004f3fa:	189b      	adds	r3, r3, r2
1004f3fc:	009b      	lsls	r3, r3, #2
1004f3fe:	18cb      	adds	r3, r1, r3
1004f400:	3310      	adds	r3, #16
1004f402:	1c02      	adds	r2, r0, #0
1004f404:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
1004f406:	193b      	adds	r3, r7, r4
1004f408:	781a      	ldrb	r2, [r3, #0]
1004f40a:	0013      	movs	r3, r2
1004f40c:	009b      	lsls	r3, r3, #2
1004f40e:	189b      	adds	r3, r3, r2
1004f410:	009b      	lsls	r3, r3, #2
1004f412:	4a0e      	ldr	r2, [pc, #56]	@ (1004f44c <NVMDB_Init+0x2b4>)
1004f414:	189b      	adds	r3, r3, r2
1004f416:	2512      	movs	r5, #18
1004f418:	197c      	adds	r4, r7, r5
1004f41a:	0018      	movs	r0, r3
1004f41c:	f7fe feae 	bl	1004e17c <NVMDB_get_info>
1004f420:	0003      	movs	r3, r0
1004f422:	7023      	strb	r3, [r4, #0]
    if(status)
1004f424:	197b      	adds	r3, r7, r5
1004f426:	781b      	ldrb	r3, [r3, #0]
1004f428:	2b00      	cmp	r3, #0
1004f42a:	d002      	beq.n	1004f432 <NVMDB_Init+0x29a>
    {
      return status;
1004f42c:	197b      	adds	r3, r7, r5
1004f42e:	781b      	ldrb	r3, [r3, #0]
1004f430:	e006      	b.n	1004f440 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004f432:	697b      	ldr	r3, [r7, #20]
1004f434:	3301      	adds	r3, #1
1004f436:	617b      	str	r3, [r7, #20]
1004f438:	697b      	ldr	r3, [r7, #20]
1004f43a:	2b01      	cmp	r3, #1
1004f43c:	dd87      	ble.n	1004f34e <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
1004f43e:	2300      	movs	r3, #0
}
1004f440:	0018      	movs	r0, r3
1004f442:	46bd      	mov	sp, r7
1004f444:	b008      	add	sp, #32
1004f446:	bdb0      	pop	{r4, r5, r7, pc}
1004f448:	200022d8 	.word	0x200022d8
1004f44c:	200022ac 	.word	0x200022ac
1004f450:	10067df8 	.word	0x10067df8

1004f454 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
1004f454:	b580      	push	{r7, lr}
1004f456:	b082      	sub	sp, #8
1004f458:	af00      	add	r7, sp, #0
1004f45a:	0002      	movs	r2, r0
1004f45c:	6039      	str	r1, [r7, #0]
1004f45e:	1dfb      	adds	r3, r7, #7
1004f460:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
1004f462:	1dfb      	adds	r3, r7, #7
1004f464:	781b      	ldrb	r3, [r3, #0]
1004f466:	2b01      	cmp	r3, #1
1004f468:	d901      	bls.n	1004f46e <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
1004f46a:	2301      	movs	r3, #1
1004f46c:	e020      	b.n	1004f4b0 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1004f46e:	1dfb      	adds	r3, r7, #7
1004f470:	781a      	ldrb	r2, [r3, #0]
1004f472:	4911      	ldr	r1, [pc, #68]	@ (1004f4b8 <NVMDB_HandleInit+0x64>)
1004f474:	0013      	movs	r3, r2
1004f476:	009b      	lsls	r3, r3, #2
1004f478:	189b      	adds	r3, r3, r2
1004f47a:	009b      	lsls	r3, r3, #2
1004f47c:	585a      	ldr	r2, [r3, r1]
1004f47e:	683b      	ldr	r3, [r7, #0]
1004f480:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
1004f482:	1dfb      	adds	r3, r7, #7
1004f484:	781a      	ldrb	r2, [r3, #0]
1004f486:	490c      	ldr	r1, [pc, #48]	@ (1004f4b8 <NVMDB_HandleInit+0x64>)
1004f488:	0013      	movs	r3, r2
1004f48a:	009b      	lsls	r3, r3, #2
1004f48c:	189b      	adds	r3, r3, r2
1004f48e:	009b      	lsls	r3, r3, #2
1004f490:	18cb      	adds	r3, r1, r3
1004f492:	3304      	adds	r3, #4
1004f494:	681a      	ldr	r2, [r3, #0]
1004f496:	683b      	ldr	r3, [r7, #0]
1004f498:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004f49a:	683b      	ldr	r3, [r7, #0]
1004f49c:	2201      	movs	r2, #1
1004f49e:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
1004f4a0:	683b      	ldr	r3, [r7, #0]
1004f4a2:	1dfa      	adds	r2, r7, #7
1004f4a4:	7812      	ldrb	r2, [r2, #0]
1004f4a6:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
1004f4a8:	683b      	ldr	r3, [r7, #0]
1004f4aa:	2200      	movs	r2, #0
1004f4ac:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004f4ae:	2300      	movs	r3, #0
}
1004f4b0:	0018      	movs	r0, r3
1004f4b2:	46bd      	mov	sp, r7
1004f4b4:	b002      	add	sp, #8
1004f4b6:	bd80      	pop	{r7, pc}
1004f4b8:	200022ac 	.word	0x200022ac

1004f4bc <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004f4bc:	b590      	push	{r4, r7, lr}
1004f4be:	b089      	sub	sp, #36	@ 0x24
1004f4c0:	af04      	add	r7, sp, #16
1004f4c2:	60f8      	str	r0, [r7, #12]
1004f4c4:	0008      	movs	r0, r1
1004f4c6:	0011      	movs	r1, r2
1004f4c8:	607b      	str	r3, [r7, #4]
1004f4ca:	230b      	movs	r3, #11
1004f4cc:	18fb      	adds	r3, r7, r3
1004f4ce:	1c02      	adds	r2, r0, #0
1004f4d0:	701a      	strb	r2, [r3, #0]
1004f4d2:	2308      	movs	r3, #8
1004f4d4:	18fb      	adds	r3, r7, r3
1004f4d6:	1c0a      	adds	r2, r1, #0
1004f4d8:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004f4da:	68fb      	ldr	r3, [r7, #12]
1004f4dc:	781b      	ldrb	r3, [r3, #0]
1004f4de:	0019      	movs	r1, r3
1004f4e0:	4a12      	ldr	r2, [pc, #72]	@ (1004f52c <NVMDB_ReadNextRecord+0x70>)
1004f4e2:	000b      	movs	r3, r1
1004f4e4:	009b      	lsls	r3, r3, #2
1004f4e6:	185b      	adds	r3, r3, r1
1004f4e8:	009b      	lsls	r3, r3, #2
1004f4ea:	18d3      	adds	r3, r2, r3
1004f4ec:	330e      	adds	r3, #14
1004f4ee:	781b      	ldrb	r3, [r3, #0]
1004f4f0:	2b00      	cmp	r3, #0
1004f4f2:	d001      	beq.n	1004f4f8 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004f4f4:	230a      	movs	r3, #10
1004f4f6:	e015      	b.n	1004f524 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
1004f4f8:	687c      	ldr	r4, [r7, #4]
1004f4fa:	2308      	movs	r3, #8
1004f4fc:	18fb      	adds	r3, r7, r3
1004f4fe:	881a      	ldrh	r2, [r3, #0]
1004f500:	230b      	movs	r3, #11
1004f502:	18fb      	adds	r3, r7, r3
1004f504:	7819      	ldrb	r1, [r3, #0]
1004f506:	68f8      	ldr	r0, [r7, #12]
1004f508:	2300      	movs	r3, #0
1004f50a:	9303      	str	r3, [sp, #12]
1004f50c:	2300      	movs	r3, #0
1004f50e:	9302      	str	r3, [sp, #8]
1004f510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f512:	9301      	str	r3, [sp, #4]
1004f514:	2320      	movs	r3, #32
1004f516:	18fb      	adds	r3, r7, r3
1004f518:	881b      	ldrh	r3, [r3, #0]
1004f51a:	9300      	str	r3, [sp, #0]
1004f51c:	0023      	movs	r3, r4
1004f51e:	f7fe fef9 	bl	1004e314 <ReadNextRecordNoLock>
1004f522:	0003      	movs	r3, r0
}
1004f524:	0018      	movs	r0, r3
1004f526:	46bd      	mov	sp, r7
1004f528:	b005      	add	sp, #20
1004f52a:	bd90      	pop	{r4, r7, pc}
1004f52c:	200022ac 	.word	0x200022ac

1004f530 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004f530:	b590      	push	{r4, r7, lr}
1004f532:	b087      	sub	sp, #28
1004f534:	af02      	add	r7, sp, #8
1004f536:	60f8      	str	r0, [r7, #12]
1004f538:	0008      	movs	r0, r1
1004f53a:	607a      	str	r2, [r7, #4]
1004f53c:	0019      	movs	r1, r3
1004f53e:	230a      	movs	r3, #10
1004f540:	18fb      	adds	r3, r7, r3
1004f542:	1c02      	adds	r2, r0, #0
1004f544:	801a      	strh	r2, [r3, #0]
1004f546:	2308      	movs	r3, #8
1004f548:	18fb      	adds	r3, r7, r3
1004f54a:	1c0a      	adds	r2, r1, #0
1004f54c:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004f54e:	68fb      	ldr	r3, [r7, #12]
1004f550:	781b      	ldrb	r3, [r3, #0]
1004f552:	0019      	movs	r1, r3
1004f554:	4a0f      	ldr	r2, [pc, #60]	@ (1004f594 <NVMDB_ReadCurrentRecord+0x64>)
1004f556:	000b      	movs	r3, r1
1004f558:	009b      	lsls	r3, r3, #2
1004f55a:	185b      	adds	r3, r3, r1
1004f55c:	009b      	lsls	r3, r3, #2
1004f55e:	18d3      	adds	r3, r2, r3
1004f560:	330e      	adds	r3, #14
1004f562:	781b      	ldrb	r3, [r3, #0]
1004f564:	2b00      	cmp	r3, #0
1004f566:	d001      	beq.n	1004f56c <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004f568:	230a      	movs	r3, #10
1004f56a:	e00f      	b.n	1004f58c <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
1004f56c:	2308      	movs	r3, #8
1004f56e:	18fb      	adds	r3, r7, r3
1004f570:	881c      	ldrh	r4, [r3, #0]
1004f572:	687a      	ldr	r2, [r7, #4]
1004f574:	230a      	movs	r3, #10
1004f576:	18fb      	adds	r3, r7, r3
1004f578:	8819      	ldrh	r1, [r3, #0]
1004f57a:	68f8      	ldr	r0, [r7, #12]
1004f57c:	2300      	movs	r3, #0
1004f57e:	9301      	str	r3, [sp, #4]
1004f580:	6a3b      	ldr	r3, [r7, #32]
1004f582:	9300      	str	r3, [sp, #0]
1004f584:	0023      	movs	r3, r4
1004f586:	f7ff f81c 	bl	1004e5c2 <ReadCurrentRecordNoLock>
1004f58a:	0003      	movs	r3, r0
}
1004f58c:	0018      	movs	r0, r3
1004f58e:	46bd      	mov	sp, r7
1004f590:	b005      	add	sp, #20
1004f592:	bd90      	pop	{r4, r7, pc}
1004f594:	200022ac 	.word	0x200022ac

1004f598 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
1004f598:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f59a:	46c6      	mov	lr, r8
1004f59c:	b500      	push	{lr}
1004f59e:	b088      	sub	sp, #32
1004f5a0:	af02      	add	r7, sp, #8
1004f5a2:	60f8      	str	r0, [r7, #12]
1004f5a4:	0008      	movs	r0, r1
1004f5a6:	0011      	movs	r1, r2
1004f5a8:	607b      	str	r3, [r7, #4]
1004f5aa:	230b      	movs	r3, #11
1004f5ac:	001c      	movs	r4, r3
1004f5ae:	18fb      	adds	r3, r7, r3
1004f5b0:	1c02      	adds	r2, r0, #0
1004f5b2:	701a      	strb	r2, [r3, #0]
1004f5b4:	2008      	movs	r0, #8
1004f5b6:	183b      	adds	r3, r7, r0
1004f5b8:	1c0a      	adds	r2, r1, #0
1004f5ba:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
1004f5bc:	2617      	movs	r6, #23
1004f5be:	46b0      	mov	r8, r6
1004f5c0:	44b8      	add	r8, r7
1004f5c2:	687d      	ldr	r5, [r7, #4]
1004f5c4:	183b      	adds	r3, r7, r0
1004f5c6:	881a      	ldrh	r2, [r3, #0]
1004f5c8:	0023      	movs	r3, r4
1004f5ca:	18fb      	adds	r3, r7, r3
1004f5cc:	7819      	ldrb	r1, [r3, #0]
1004f5ce:	68f8      	ldr	r0, [r7, #12]
1004f5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004f5d2:	9301      	str	r3, [sp, #4]
1004f5d4:	2328      	movs	r3, #40	@ 0x28
1004f5d6:	2408      	movs	r4, #8
1004f5d8:	191b      	adds	r3, r3, r4
1004f5da:	19db      	adds	r3, r3, r7
1004f5dc:	881b      	ldrh	r3, [r3, #0]
1004f5de:	9300      	str	r3, [sp, #0]
1004f5e0:	002b      	movs	r3, r5
1004f5e2:	f7ff fd19 	bl	1004f018 <NVMDB_AppendRecordNoCache>
1004f5e6:	0003      	movs	r3, r0
1004f5e8:	4642      	mov	r2, r8
1004f5ea:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
1004f5ec:	19bb      	adds	r3, r7, r6
1004f5ee:	781b      	ldrb	r3, [r3, #0]
1004f5f0:	2b00      	cmp	r3, #0
1004f5f2:	d002      	beq.n	1004f5fa <NVMDB_AppendRecord+0x62>
  {
    return status;
1004f5f4:	19bb      	adds	r3, r7, r6
1004f5f6:	781b      	ldrb	r3, [r3, #0]
1004f5f8:	e02c      	b.n	1004f654 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
1004f5fa:	68fb      	ldr	r3, [r7, #12]
1004f5fc:	781b      	ldrb	r3, [r3, #0]
1004f5fe:	0019      	movs	r1, r3
1004f600:	4a17      	ldr	r2, [pc, #92]	@ (1004f660 <NVMDB_AppendRecord+0xc8>)
1004f602:	000b      	movs	r3, r1
1004f604:	009b      	lsls	r3, r3, #2
1004f606:	185b      	adds	r3, r3, r1
1004f608:	009b      	lsls	r3, r3, #2
1004f60a:	18d3      	adds	r3, r2, r3
1004f60c:	330c      	adds	r3, #12
1004f60e:	881a      	ldrh	r2, [r3, #0]
1004f610:	2308      	movs	r3, #8
1004f612:	0018      	movs	r0, r3
1004f614:	18f9      	adds	r1, r7, r3
1004f616:	2328      	movs	r3, #40	@ 0x28
1004f618:	181b      	adds	r3, r3, r0
1004f61a:	19db      	adds	r3, r3, r7
1004f61c:	8809      	ldrh	r1, [r1, #0]
1004f61e:	881b      	ldrh	r3, [r3, #0]
1004f620:	18cb      	adds	r3, r1, r3
1004f622:	b29b      	uxth	r3, r3
1004f624:	3b01      	subs	r3, #1
1004f626:	b29b      	uxth	r3, r3
1004f628:	b21b      	sxth	r3, r3
1004f62a:	2103      	movs	r1, #3
1004f62c:	430b      	orrs	r3, r1
1004f62e:	b21b      	sxth	r3, r3
1004f630:	b29b      	uxth	r3, r3
1004f632:	1ad3      	subs	r3, r2, r3
1004f634:	b29b      	uxth	r3, r3
1004f636:	68fa      	ldr	r2, [r7, #12]
1004f638:	7812      	ldrb	r2, [r2, #0]
1004f63a:	0011      	movs	r1, r2
1004f63c:	3b05      	subs	r3, #5
1004f63e:	b298      	uxth	r0, r3
1004f640:	4a07      	ldr	r2, [pc, #28]	@ (1004f660 <NVMDB_AppendRecord+0xc8>)
1004f642:	000b      	movs	r3, r1
1004f644:	009b      	lsls	r3, r3, #2
1004f646:	185b      	adds	r3, r3, r1
1004f648:	009b      	lsls	r3, r3, #2
1004f64a:	18d3      	adds	r3, r2, r3
1004f64c:	330c      	adds	r3, #12
1004f64e:	1c02      	adds	r2, r0, #0
1004f650:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004f652:	2300      	movs	r3, #0
}
1004f654:	0018      	movs	r0, r3
1004f656:	46bd      	mov	sp, r7
1004f658:	b006      	add	sp, #24
1004f65a:	bc80      	pop	{r7}
1004f65c:	46b8      	mov	r8, r7
1004f65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f660:	200022ac 	.word	0x200022ac

1004f664 <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
1004f664:	b580      	push	{r7, lr}
1004f666:	b082      	sub	sp, #8
1004f668:	af00      	add	r7, sp, #0
1004f66a:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
1004f66c:	687b      	ldr	r3, [r7, #4]
1004f66e:	0018      	movs	r0, r3
1004f670:	f7ff f828 	bl	1004e6c4 <NVMDB_DeleteRecordNoCache>
1004f674:	0003      	movs	r3, r0

#endif
}
1004f676:	0018      	movs	r0, r3
1004f678:	46bd      	mov	sp, r7
1004f67a:	b002      	add	sp, #8
1004f67c:	bd80      	pop	{r7, pc}
	...

1004f680 <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
1004f680:	b5b0      	push	{r4, r5, r7, lr}
1004f682:	b08c      	sub	sp, #48	@ 0x30
1004f684:	af00      	add	r7, sp, #0
1004f686:	0002      	movs	r2, r0
1004f688:	1dfb      	adds	r3, r7, #7
1004f68a:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
1004f68c:	252b      	movs	r5, #43	@ 0x2b
1004f68e:	197c      	adds	r4, r7, r5
1004f690:	2318      	movs	r3, #24
1004f692:	18fa      	adds	r2, r7, r3
1004f694:	1dfb      	adds	r3, r7, #7
1004f696:	781b      	ldrb	r3, [r3, #0]
1004f698:	0011      	movs	r1, r2
1004f69a:	0018      	movs	r0, r3
1004f69c:	f7ff fbc6 	bl	1004ee2c <GetDBType>
1004f6a0:	0003      	movs	r3, r0
1004f6a2:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
1004f6a4:	197b      	adds	r3, r7, r5
1004f6a6:	781b      	ldrb	r3, [r3, #0]
1004f6a8:	2b02      	cmp	r3, #2
1004f6aa:	d146      	bne.n	1004f73a <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
1004f6ac:	1dfb      	adds	r3, r7, #7
1004f6ae:	781a      	ldrb	r2, [r3, #0]
1004f6b0:	4942      	ldr	r1, [pc, #264]	@ (1004f7bc <NVMDB_Erase+0x13c>)
1004f6b2:	0013      	movs	r3, r2
1004f6b4:	009b      	lsls	r3, r3, #2
1004f6b6:	189b      	adds	r3, r3, r2
1004f6b8:	009b      	lsls	r3, r3, #2
1004f6ba:	585b      	ldr	r3, [r3, r1]
1004f6bc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
1004f6be:	1dfb      	adds	r3, r7, #7
1004f6c0:	781a      	ldrb	r2, [r3, #0]
1004f6c2:	493e      	ldr	r1, [pc, #248]	@ (1004f7bc <NVMDB_Erase+0x13c>)
1004f6c4:	0013      	movs	r3, r2
1004f6c6:	009b      	lsls	r3, r3, #2
1004f6c8:	189b      	adds	r3, r3, r2
1004f6ca:	009b      	lsls	r3, r3, #2
1004f6cc:	18cb      	adds	r3, r1, r3
1004f6ce:	3304      	adds	r3, #4
1004f6d0:	681b      	ldr	r3, [r3, #0]
1004f6d2:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004f6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f6d6:	4a3a      	ldr	r2, [pc, #232]	@ (1004f7c0 <NVMDB_Erase+0x140>)
1004f6d8:	4694      	mov	ip, r2
1004f6da:	4463      	add	r3, ip
1004f6dc:	0ada      	lsrs	r2, r3, #11
1004f6de:	201f      	movs	r0, #31
1004f6e0:	183b      	adds	r3, r7, r0
1004f6e2:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
1004f6e4:	6a3b      	ldr	r3, [r7, #32]
1004f6e6:	3b01      	subs	r3, #1
1004f6e8:	4a36      	ldr	r2, [pc, #216]	@ (1004f7c4 <NVMDB_Erase+0x144>)
1004f6ea:	431a      	orrs	r2, r3
1004f6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f6ee:	1ad3      	subs	r3, r2, r3
1004f6f0:	3301      	adds	r3, #1
1004f6f2:	0ada      	lsrs	r2, r3, #11
1004f6f4:	241e      	movs	r4, #30
1004f6f6:	193b      	adds	r3, r7, r4
1004f6f8:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004f6fa:	210c      	movs	r1, #12
1004f6fc:	187b      	adds	r3, r7, r1
1004f6fe:	2200      	movs	r2, #0
1004f700:	601a      	str	r2, [r3, #0]
1004f702:	183b      	adds	r3, r7, r0
1004f704:	781a      	ldrb	r2, [r3, #0]
1004f706:	187b      	adds	r3, r7, r1
1004f708:	605a      	str	r2, [r3, #4]
1004f70a:	193b      	adds	r3, r7, r4
1004f70c:	781a      	ldrb	r2, [r3, #0]
1004f70e:	187b      	adds	r3, r7, r1
1004f710:	609a      	str	r2, [r3, #8]
1004f712:	2308      	movs	r3, #8
1004f714:	18fa      	adds	r2, r7, r3
1004f716:	187b      	adds	r3, r7, r1
1004f718:	0011      	movs	r1, r2
1004f71a:	0018      	movs	r0, r3
1004f71c:	f7f7 f87a 	bl	10046814 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
1004f720:	1dfb      	adds	r3, r7, #7
1004f722:	781a      	ldrb	r2, [r3, #0]
1004f724:	0013      	movs	r3, r2
1004f726:	009b      	lsls	r3, r3, #2
1004f728:	189b      	adds	r3, r3, r2
1004f72a:	009b      	lsls	r3, r3, #2
1004f72c:	4a23      	ldr	r2, [pc, #140]	@ (1004f7bc <NVMDB_Erase+0x13c>)
1004f72e:	189b      	adds	r3, r3, r2
1004f730:	0018      	movs	r0, r3
1004f732:	f7fe fd23 	bl	1004e17c <NVMDB_get_info>

    return NVMDB_STATUS_OK;
1004f736:	2300      	movs	r3, #0
1004f738:	e03b      	b.n	1004f7b2 <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
1004f73a:	232b      	movs	r3, #43	@ 0x2b
1004f73c:	18fb      	adds	r3, r7, r3
1004f73e:	781b      	ldrb	r3, [r3, #0]
1004f740:	2b01      	cmp	r3, #1
1004f742:	d135      	bne.n	1004f7b0 <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
1004f744:	69ba      	ldr	r2, [r7, #24]
1004f746:	252a      	movs	r5, #42	@ 0x2a
1004f748:	197c      	adds	r4, r7, r5
1004f74a:	1dfb      	adds	r3, r7, #7
1004f74c:	781b      	ldrb	r3, [r3, #0]
1004f74e:	0011      	movs	r1, r2
1004f750:	0018      	movs	r0, r3
1004f752:	f7ff fbd9 	bl	1004ef08 <EraseSmallDB>
1004f756:	0003      	movs	r3, r0
1004f758:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
1004f75a:	197b      	adds	r3, r7, r5
1004f75c:	781b      	ldrb	r3, [r3, #0]
1004f75e:	2b00      	cmp	r3, #0
1004f760:	d122      	bne.n	1004f7a8 <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004f762:	2300      	movs	r3, #0
1004f764:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004f766:	e019      	b.n	1004f79c <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004f768:	69bb      	ldr	r3, [r7, #24]
1004f76a:	6899      	ldr	r1, [r3, #8]
1004f76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004f76e:	0013      	movs	r3, r2
1004f770:	005b      	lsls	r3, r3, #1
1004f772:	189b      	adds	r3, r3, r2
1004f774:	009b      	lsls	r3, r3, #2
1004f776:	18ca      	adds	r2, r1, r3
1004f778:	2129      	movs	r1, #41	@ 0x29
1004f77a:	187b      	adds	r3, r7, r1
1004f77c:	7812      	ldrb	r2, [r2, #0]
1004f77e:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
1004f780:	187b      	adds	r3, r7, r1
1004f782:	781a      	ldrb	r2, [r3, #0]
1004f784:	0013      	movs	r3, r2
1004f786:	009b      	lsls	r3, r3, #2
1004f788:	189b      	adds	r3, r3, r2
1004f78a:	009b      	lsls	r3, r3, #2
1004f78c:	4a0b      	ldr	r2, [pc, #44]	@ (1004f7bc <NVMDB_Erase+0x13c>)
1004f78e:	189b      	adds	r3, r3, r2
1004f790:	0018      	movs	r0, r3
1004f792:	f7fe fcf3 	bl	1004e17c <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004f796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004f798:	3301      	adds	r3, #1
1004f79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004f79c:	69bb      	ldr	r3, [r7, #24]
1004f79e:	791b      	ldrb	r3, [r3, #4]
1004f7a0:	001a      	movs	r2, r3
1004f7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004f7a4:	4293      	cmp	r3, r2
1004f7a6:	dbdf      	blt.n	1004f768 <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
1004f7a8:	232a      	movs	r3, #42	@ 0x2a
1004f7aa:	18fb      	adds	r3, r7, r3
1004f7ac:	781b      	ldrb	r3, [r3, #0]
1004f7ae:	e000      	b.n	1004f7b2 <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
1004f7b0:	2301      	movs	r3, #1
}
1004f7b2:	0018      	movs	r0, r3
1004f7b4:	46bd      	mov	sp, r7
1004f7b6:	b00c      	add	sp, #48	@ 0x30
1004f7b8:	bdb0      	pop	{r4, r5, r7, pc}
1004f7ba:	46c0      	nop			@ (mov r8, r8)
1004f7bc:	200022ac 	.word	0x200022ac
1004f7c0:	effc0000 	.word	0xeffc0000
1004f7c4:	000007ff 	.word	0x000007ff

1004f7c8 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
1004f7c8:	b5b0      	push	{r4, r5, r7, lr}
1004f7ca:	b084      	sub	sp, #16
1004f7cc:	af00      	add	r7, sp, #0
1004f7ce:	0002      	movs	r2, r0
1004f7d0:	1dfb      	adds	r3, r7, #7
1004f7d2:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
1004f7d4:	250f      	movs	r5, #15
1004f7d6:	197c      	adds	r4, r7, r5
1004f7d8:	2308      	movs	r3, #8
1004f7da:	18fa      	adds	r2, r7, r3
1004f7dc:	1dfb      	adds	r3, r7, #7
1004f7de:	781b      	ldrb	r3, [r3, #0]
1004f7e0:	0011      	movs	r1, r2
1004f7e2:	0018      	movs	r0, r3
1004f7e4:	f7ff fb22 	bl	1004ee2c <GetDBType>
1004f7e8:	0003      	movs	r3, r0
1004f7ea:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
1004f7ec:	197b      	adds	r3, r7, r5
1004f7ee:	781b      	ldrb	r3, [r3, #0]
1004f7f0:	2b02      	cmp	r3, #2
1004f7f2:	d106      	bne.n	1004f802 <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
1004f7f4:	1dfb      	adds	r3, r7, #7
1004f7f6:	781b      	ldrb	r3, [r3, #0]
1004f7f8:	0018      	movs	r0, r3
1004f7fa:	f7ff f92f 	bl	1004ea5c <CleanLargeDB>
1004f7fe:	0003      	movs	r3, r0
1004f800:	e00b      	b.n	1004f81a <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004f802:	230f      	movs	r3, #15
1004f804:	18fb      	adds	r3, r7, r3
1004f806:	781b      	ldrb	r3, [r3, #0]
1004f808:	2b01      	cmp	r3, #1
1004f80a:	d105      	bne.n	1004f818 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
1004f80c:	68bb      	ldr	r3, [r7, #8]
1004f80e:	0018      	movs	r0, r3
1004f810:	f7ff fa02 	bl	1004ec18 <CleanPage>
1004f814:	0003      	movs	r3, r0
1004f816:	e000      	b.n	1004f81a <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
1004f818:	2301      	movs	r3, #1
}
1004f81a:	0018      	movs	r0, r3
1004f81c:	46bd      	mov	sp, r7
1004f81e:	b004      	add	sp, #16
1004f820:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004f824 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
1004f824:	b590      	push	{r4, r7, lr}
1004f826:	b083      	sub	sp, #12
1004f828:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
1004f82a:	1dfc      	adds	r4, r7, #7
1004f82c:	f000 f816 	bl	1004f85c <NVMDB_CleanCheck>
1004f830:	0003      	movs	r3, r0
1004f832:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
1004f834:	1dfb      	adds	r3, r7, #7
1004f836:	781b      	ldrb	r3, [r3, #0]
1004f838:	2b7f      	cmp	r3, #127	@ 0x7f
1004f83a:	d808      	bhi.n	1004f84e <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
1004f83c:	1dfb      	adds	r3, r7, #7
1004f83e:	781b      	ldrb	r3, [r3, #0]
1004f840:	0018      	movs	r0, r3
1004f842:	f7ff ffc1 	bl	1004f7c8 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
1004f846:	4b04      	ldr	r3, [pc, #16]	@ (1004f858 <NVMDB_Tick+0x34>)
1004f848:	0018      	movs	r0, r3
1004f84a:	f016 fd03 	bl	10066254 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
1004f84e:	2300      	movs	r3, #0
}
1004f850:	0018      	movs	r0, r3
1004f852:	46bd      	mov	sp, r7
1004f854:	b003      	add	sp, #12
1004f856:	bd90      	pop	{r4, r7, pc}
1004f858:	10067630 	.word	0x10067630

1004f85c <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
1004f85c:	b580      	push	{r7, lr}
1004f85e:	b082      	sub	sp, #8
1004f860:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
1004f862:	4b2b      	ldr	r3, [pc, #172]	@ (1004f910 <NVMDB_CleanCheck+0xb4>)
1004f864:	2200      	movs	r2, #0
1004f866:	569a      	ldrsb	r2, [r3, r2]
1004f868:	1dfb      	adds	r3, r7, #7
1004f86a:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
1004f86c:	1dfb      	adds	r3, r7, #7
1004f86e:	781a      	ldrb	r2, [r3, #0]
1004f870:	4928      	ldr	r1, [pc, #160]	@ (1004f914 <NVMDB_CleanCheck+0xb8>)
1004f872:	0013      	movs	r3, r2
1004f874:	009b      	lsls	r3, r3, #2
1004f876:	189b      	adds	r3, r3, r2
1004f878:	009b      	lsls	r3, r3, #2
1004f87a:	18cb      	adds	r3, r1, r3
1004f87c:	330a      	adds	r3, #10
1004f87e:	881b      	ldrh	r3, [r3, #0]
1004f880:	2b00      	cmp	r3, #0
1004f882:	d028      	beq.n	1004f8d6 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
1004f884:	1dfb      	adds	r3, r7, #7
1004f886:	781a      	ldrb	r2, [r3, #0]
1004f888:	4922      	ldr	r1, [pc, #136]	@ (1004f914 <NVMDB_CleanCheck+0xb8>)
1004f88a:	0013      	movs	r3, r2
1004f88c:	009b      	lsls	r3, r3, #2
1004f88e:	189b      	adds	r3, r3, r2
1004f890:	009b      	lsls	r3, r3, #2
1004f892:	18cb      	adds	r3, r1, r3
1004f894:	330c      	adds	r3, #12
1004f896:	8819      	ldrh	r1, [r3, #0]
1004f898:	1dfb      	adds	r3, r7, #7
1004f89a:	781a      	ldrb	r2, [r3, #0]
1004f89c:	481d      	ldr	r0, [pc, #116]	@ (1004f914 <NVMDB_CleanCheck+0xb8>)
1004f89e:	0013      	movs	r3, r2
1004f8a0:	009b      	lsls	r3, r3, #2
1004f8a2:	189b      	adds	r3, r3, r2
1004f8a4:	009b      	lsls	r3, r3, #2
1004f8a6:	18c3      	adds	r3, r0, r3
1004f8a8:	3310      	adds	r3, #16
1004f8aa:	881b      	ldrh	r3, [r3, #0]
1004f8ac:	4299      	cmp	r1, r3
1004f8ae:	d212      	bcs.n	1004f8d6 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
1004f8b0:	1dfb      	adds	r3, r7, #7
1004f8b2:	781b      	ldrb	r3, [r3, #0]
1004f8b4:	3301      	adds	r3, #1
1004f8b6:	b2db      	uxtb	r3, r3
1004f8b8:	b25a      	sxtb	r2, r3
1004f8ba:	4b15      	ldr	r3, [pc, #84]	@ (1004f910 <NVMDB_CleanCheck+0xb4>)
1004f8bc:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
1004f8be:	4b14      	ldr	r3, [pc, #80]	@ (1004f910 <NVMDB_CleanCheck+0xb4>)
1004f8c0:	781b      	ldrb	r3, [r3, #0]
1004f8c2:	b25b      	sxtb	r3, r3
1004f8c4:	2b02      	cmp	r3, #2
1004f8c6:	d102      	bne.n	1004f8ce <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
1004f8c8:	4b11      	ldr	r3, [pc, #68]	@ (1004f910 <NVMDB_CleanCheck+0xb4>)
1004f8ca:	2200      	movs	r2, #0
1004f8cc:	701a      	strb	r2, [r3, #0]
        }
        return i;
1004f8ce:	1dfb      	adds	r3, r7, #7
1004f8d0:	781b      	ldrb	r3, [r3, #0]
1004f8d2:	b25b      	sxtb	r3, r3
1004f8d4:	e017      	b.n	1004f906 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
1004f8d6:	1dfb      	adds	r3, r7, #7
1004f8d8:	781a      	ldrb	r2, [r3, #0]
1004f8da:	1dfb      	adds	r3, r7, #7
1004f8dc:	3201      	adds	r2, #1
1004f8de:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
1004f8e0:	1dfb      	adds	r3, r7, #7
1004f8e2:	781b      	ldrb	r3, [r3, #0]
1004f8e4:	2b02      	cmp	r3, #2
1004f8e6:	d102      	bne.n	1004f8ee <NVMDB_CleanCheck+0x92>
    {
      i = 0;
1004f8e8:	1dfb      	adds	r3, r7, #7
1004f8ea:	2200      	movs	r2, #0
1004f8ec:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
1004f8ee:	1dfb      	adds	r3, r7, #7
1004f8f0:	781b      	ldrb	r3, [r3, #0]
1004f8f2:	4a07      	ldr	r2, [pc, #28]	@ (1004f910 <NVMDB_CleanCheck+0xb4>)
1004f8f4:	7812      	ldrb	r2, [r2, #0]
1004f8f6:	b252      	sxtb	r2, r2
1004f8f8:	4293      	cmp	r3, r2
1004f8fa:	d1b7      	bne.n	1004f86c <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
1004f8fc:	4b04      	ldr	r3, [pc, #16]	@ (1004f910 <NVMDB_CleanCheck+0xb4>)
1004f8fe:	2200      	movs	r2, #0
1004f900:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
1004f902:	2301      	movs	r3, #1
1004f904:	425b      	negs	r3, r3
}
1004f906:	0018      	movs	r0, r3
1004f908:	46bd      	mov	sp, r7
1004f90a:	b002      	add	sp, #8
1004f90c:	bd80      	pop	{r7, pc}
1004f90e:	46c0      	nop			@ (mov r8, r8)
1004f910:	200022d4 	.word	0x200022d4
1004f914:	200022ac 	.word	0x200022ac

1004f918 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
1004f918:	b580      	push	{r7, lr}
1004f91a:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
1004f91c:	4b03      	ldr	r3, [pc, #12]	@ (1004f92c <PKAMGR_Init+0x14>)
1004f91e:	2201      	movs	r2, #1
1004f920:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
1004f922:	2300      	movs	r3, #0
}
1004f924:	0018      	movs	r0, r3
1004f926:	46bd      	mov	sp, r7
1004f928:	bd80      	pop	{r7, pc}
1004f92a:	46c0      	nop			@ (mov r8, r8)
1004f92c:	2000272c 	.word	0x2000272c

1004f930 <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
1004f930:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f932:	b087      	sub	sp, #28
1004f934:	af00      	add	r7, sp, #0
1004f936:	60ba      	str	r2, [r7, #8]
1004f938:	607b      	str	r3, [r7, #4]
1004f93a:	240f      	movs	r4, #15
1004f93c:	193b      	adds	r3, r7, r4
1004f93e:	1c02      	adds	r2, r0, #0
1004f940:	701a      	strb	r2, [r3, #0]
1004f942:	230e      	movs	r3, #14
1004f944:	18fb      	adds	r3, r7, r3
1004f946:	1c0a      	adds	r2, r1, #0
1004f948:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
1004f94a:	68bb      	ldr	r3, [r7, #8]
1004f94c:	2200      	movs	r2, #0
1004f94e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
1004f950:	687b      	ldr	r3, [r7, #4]
1004f952:	2200      	movs	r2, #0
1004f954:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
1004f956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004f958:	2200      	movs	r2, #0
1004f95a:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
1004f95c:	193b      	adds	r3, r7, r4
1004f95e:	781b      	ldrb	r3, [r3, #0]
1004f960:	2205      	movs	r2, #5
1004f962:	4013      	ands	r3, r2
1004f964:	d046      	beq.n	1004f9f4 <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
1004f966:	2517      	movs	r5, #23
1004f968:	197c      	adds	r4, r7, r5
1004f96a:	4b25      	ldr	r3, [pc, #148]	@ (1004fa00 <aci_gap_profile_init+0xd0>)
1004f96c:	0018      	movs	r0, r3
1004f96e:	f7fe f8c9 	bl	1004db04 <aci_gatt_srv_add_service>
1004f972:	0003      	movs	r3, r0
1004f974:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004f976:	197b      	adds	r3, r7, r5
1004f978:	781b      	ldrb	r3, [r3, #0]
1004f97a:	2b00      	cmp	r3, #0
1004f97c:	d002      	beq.n	1004f984 <aci_gap_profile_init+0x54>
    {
      return ret;
1004f97e:	197b      	adds	r3, r7, r5
1004f980:	781b      	ldrb	r3, [r3, #0]
1004f982:	e038      	b.n	1004f9f6 <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
1004f984:	4b1f      	ldr	r3, [pc, #124]	@ (1004fa04 <aci_gap_profile_init+0xd4>)
1004f986:	0018      	movs	r0, r3
1004f988:	f7fe f8e9 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
1004f98c:	0003      	movs	r3, r0
1004f98e:	001a      	movs	r2, r3
1004f990:	68bb      	ldr	r3, [r7, #8]
1004f992:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
1004f994:	4b1c      	ldr	r3, [pc, #112]	@ (1004fa08 <aci_gap_profile_init+0xd8>)
1004f996:	0018      	movs	r0, r3
1004f998:	f7fe f8e1 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
1004f99c:	0003      	movs	r3, r0
1004f99e:	001a      	movs	r2, r3
1004f9a0:	687b      	ldr	r3, [r7, #4]
1004f9a2:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
1004f9a4:	2614      	movs	r6, #20
1004f9a6:	19bc      	adds	r4, r7, r6
1004f9a8:	4b15      	ldr	r3, [pc, #84]	@ (1004fa00 <aci_gap_profile_init+0xd0>)
1004f9aa:	0018      	movs	r0, r3
1004f9ac:	f7fe f8b7 	bl	1004db1e <aci_gatt_srv_get_service_handle>
1004f9b0:	0003      	movs	r3, r0
1004f9b2:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
1004f9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004f9b6:	2200      	movs	r2, #0
1004f9b8:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
1004f9ba:	230e      	movs	r3, #14
1004f9bc:	18fb      	adds	r3, r7, r3
1004f9be:	781b      	ldrb	r3, [r3, #0]
1004f9c0:	2b02      	cmp	r3, #2
1004f9c2:	d111      	bne.n	1004f9e8 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
1004f9c4:	2517      	movs	r5, #23
1004f9c6:	197c      	adds	r4, r7, r5
1004f9c8:	19bb      	adds	r3, r7, r6
1004f9ca:	881a      	ldrh	r2, [r3, #0]
1004f9cc:	4b0f      	ldr	r3, [pc, #60]	@ (1004fa0c <aci_gap_profile_init+0xdc>)
1004f9ce:	0011      	movs	r1, r2
1004f9d0:	0018      	movs	r0, r3
1004f9d2:	f7fe f8b1 	bl	1004db38 <aci_gatt_srv_add_char>
1004f9d6:	0003      	movs	r3, r0
1004f9d8:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
1004f9da:	197b      	adds	r3, r7, r5
1004f9dc:	781b      	ldrb	r3, [r3, #0]
1004f9de:	2b00      	cmp	r3, #0
1004f9e0:	d002      	beq.n	1004f9e8 <aci_gap_profile_init+0xb8>
      {
        return ret;
1004f9e2:	197b      	adds	r3, r7, r5
1004f9e4:	781b      	ldrb	r3, [r3, #0]
1004f9e6:	e006      	b.n	1004f9f6 <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
1004f9e8:	4b09      	ldr	r3, [pc, #36]	@ (1004fa10 <aci_gap_profile_init+0xe0>)
1004f9ea:	001a      	movs	r2, r3
1004f9ec:	2108      	movs	r1, #8
1004f9ee:	2000      	movs	r0, #0
1004f9f0:	f000 f810 	bl	1004fa14 <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
1004f9f4:	2300      	movs	r3, #0
}
1004f9f6:	0018      	movs	r0, r3
1004f9f8:	46bd      	mov	sp, r7
1004f9fa:	b007      	add	sp, #28
1004f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f9fe:	46c0      	nop			@ (mov r8, r8)
1004fa00:	200027fc 	.word	0x200027fc
1004fa04:	20002748 	.word	0x20002748
1004fa08:	2000276c 	.word	0x2000276c
1004fa0c:	200027b4 	.word	0x200027b4
1004fa10:	10067e10 	.word	0x10067e10

1004fa14 <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
1004fa14:	b590      	push	{r4, r7, lr}
1004fa16:	b085      	sub	sp, #20
1004fa18:	af00      	add	r7, sp, #0
1004fa1a:	603a      	str	r2, [r7, #0]
1004fa1c:	1dbb      	adds	r3, r7, #6
1004fa1e:	1c02      	adds	r2, r0, #0
1004fa20:	801a      	strh	r2, [r3, #0]
1004fa22:	1d3b      	adds	r3, r7, #4
1004fa24:	1c0a      	adds	r2, r1, #0
1004fa26:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
1004fa28:	4b0c      	ldr	r3, [pc, #48]	@ (1004fa5c <Gap_profile_set_dev_name+0x48>)
1004fa2a:	0018      	movs	r0, r3
1004fa2c:	f7fe f897 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
1004fa30:	0003      	movs	r3, r0
1004fa32:	001a      	movs	r2, r3
1004fa34:	200e      	movs	r0, #14
1004fa36:	183b      	adds	r3, r7, r0
1004fa38:	3201      	adds	r2, #1
1004fa3a:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
1004fa3c:	683c      	ldr	r4, [r7, #0]
1004fa3e:	1d3b      	adds	r3, r7, #4
1004fa40:	881a      	ldrh	r2, [r3, #0]
1004fa42:	1dbb      	adds	r3, r7, #6
1004fa44:	8819      	ldrh	r1, [r3, #0]
1004fa46:	183b      	adds	r3, r7, r0
1004fa48:	8818      	ldrh	r0, [r3, #0]
1004fa4a:	0023      	movs	r3, r4
1004fa4c:	f000 f82e 	bl	1004faac <Gap_profile_set_char_value>
1004fa50:	0003      	movs	r3, r0
}
1004fa52:	0018      	movs	r0, r3
1004fa54:	46bd      	mov	sp, r7
1004fa56:	b005      	add	sp, #20
1004fa58:	bd90      	pop	{r4, r7, pc}
1004fa5a:	46c0      	nop			@ (mov r8, r8)
1004fa5c:	20002748 	.word	0x20002748

1004fa60 <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
1004fa60:	b590      	push	{r4, r7, lr}
1004fa62:	b085      	sub	sp, #20
1004fa64:	af00      	add	r7, sp, #0
1004fa66:	603a      	str	r2, [r7, #0]
1004fa68:	1dbb      	adds	r3, r7, #6
1004fa6a:	1c02      	adds	r2, r0, #0
1004fa6c:	801a      	strh	r2, [r3, #0]
1004fa6e:	1d3b      	adds	r3, r7, #4
1004fa70:	1c0a      	adds	r2, r1, #0
1004fa72:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
1004fa74:	4b0c      	ldr	r3, [pc, #48]	@ (1004faa8 <Gap_profile_set_appearance+0x48>)
1004fa76:	0018      	movs	r0, r3
1004fa78:	f7fe f871 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
1004fa7c:	0003      	movs	r3, r0
1004fa7e:	001a      	movs	r2, r3
1004fa80:	200e      	movs	r0, #14
1004fa82:	183b      	adds	r3, r7, r0
1004fa84:	3201      	adds	r2, #1
1004fa86:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
1004fa88:	683c      	ldr	r4, [r7, #0]
1004fa8a:	1d3b      	adds	r3, r7, #4
1004fa8c:	881a      	ldrh	r2, [r3, #0]
1004fa8e:	1dbb      	adds	r3, r7, #6
1004fa90:	8819      	ldrh	r1, [r3, #0]
1004fa92:	183b      	adds	r3, r7, r0
1004fa94:	8818      	ldrh	r0, [r3, #0]
1004fa96:	0023      	movs	r3, r4
1004fa98:	f000 f808 	bl	1004faac <Gap_profile_set_char_value>
1004fa9c:	0003      	movs	r3, r0
}
1004fa9e:	0018      	movs	r0, r3
1004faa0:	46bd      	mov	sp, r7
1004faa2:	b005      	add	sp, #20
1004faa4:	bd90      	pop	{r4, r7, pc}
1004faa6:	46c0      	nop			@ (mov r8, r8)
1004faa8:	2000276c 	.word	0x2000276c

1004faac <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
1004faac:	b5b0      	push	{r4, r5, r7, lr}
1004faae:	b086      	sub	sp, #24
1004fab0:	af00      	add	r7, sp, #0
1004fab2:	0004      	movs	r4, r0
1004fab4:	0008      	movs	r0, r1
1004fab6:	0011      	movs	r1, r2
1004fab8:	607b      	str	r3, [r7, #4]
1004faba:	230e      	movs	r3, #14
1004fabc:	18fb      	adds	r3, r7, r3
1004fabe:	1c22      	adds	r2, r4, #0
1004fac0:	801a      	strh	r2, [r3, #0]
1004fac2:	230c      	movs	r3, #12
1004fac4:	18fb      	adds	r3, r7, r3
1004fac6:	1c02      	adds	r2, r0, #0
1004fac8:	801a      	strh	r2, [r3, #0]
1004faca:	230a      	movs	r3, #10
1004facc:	18fb      	adds	r3, r7, r3
1004face:	1c0a      	adds	r2, r1, #0
1004fad0:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004fad2:	2317      	movs	r3, #23
1004fad4:	18fb      	adds	r3, r7, r3
1004fad6:	2200      	movs	r2, #0
1004fad8:	701a      	strb	r2, [r3, #0]
1004fada:	e021      	b.n	1004fb20 <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
1004fadc:	2317      	movs	r3, #23
1004fade:	18fb      	adds	r3, r7, r3
1004fae0:	781a      	ldrb	r2, [r3, #0]
1004fae2:	0013      	movs	r3, r2
1004fae4:	00db      	lsls	r3, r3, #3
1004fae6:	189b      	adds	r3, r3, r2
1004fae8:	009b      	lsls	r3, r3, #2
1004faea:	4a43      	ldr	r2, [pc, #268]	@ (1004fbf8 <Gap_profile_set_char_value+0x14c>)
1004faec:	189b      	adds	r3, r3, r2
1004faee:	2514      	movs	r5, #20
1004faf0:	197c      	adds	r4, r7, r5
1004faf2:	0018      	movs	r0, r3
1004faf4:	f7fe f833 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
1004faf8:	0003      	movs	r3, r0
1004fafa:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004fafc:	197b      	adds	r3, r7, r5
1004fafe:	881b      	ldrh	r3, [r3, #0]
1004fb00:	2b00      	cmp	r3, #0
1004fb02:	d007      	beq.n	1004fb14 <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
1004fb04:	197b      	adds	r3, r7, r5
1004fb06:	881b      	ldrh	r3, [r3, #0]
1004fb08:	1c5a      	adds	r2, r3, #1
1004fb0a:	230e      	movs	r3, #14
1004fb0c:	18fb      	adds	r3, r7, r3
1004fb0e:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004fb10:	429a      	cmp	r2, r3
1004fb12:	d00b      	beq.n	1004fb2c <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004fb14:	2117      	movs	r1, #23
1004fb16:	187b      	adds	r3, r7, r1
1004fb18:	781a      	ldrb	r2, [r3, #0]
1004fb1a:	187b      	adds	r3, r7, r1
1004fb1c:	3201      	adds	r2, #1
1004fb1e:	701a      	strb	r2, [r3, #0]
1004fb20:	2317      	movs	r3, #23
1004fb22:	18fb      	adds	r3, r7, r3
1004fb24:	781b      	ldrb	r3, [r3, #0]
1004fb26:	2b04      	cmp	r3, #4
1004fb28:	d9d8      	bls.n	1004fadc <Gap_profile_set_char_value+0x30>
1004fb2a:	e000      	b.n	1004fb2e <Gap_profile_set_char_value+0x82>
        {
            break;
1004fb2c:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
1004fb2e:	2317      	movs	r3, #23
1004fb30:	18fb      	adds	r3, r7, r3
1004fb32:	781b      	ldrb	r3, [r3, #0]
1004fb34:	2b05      	cmp	r3, #5
1004fb36:	d101      	bne.n	1004fb3c <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004fb38:	2312      	movs	r3, #18
1004fb3a:	e059      	b.n	1004fbf0 <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
1004fb3c:	230c      	movs	r3, #12
1004fb3e:	18fb      	adds	r3, r7, r3
1004fb40:	881a      	ldrh	r2, [r3, #0]
1004fb42:	230a      	movs	r3, #10
1004fb44:	18fb      	adds	r3, r7, r3
1004fb46:	881b      	ldrh	r3, [r3, #0]
1004fb48:	18d1      	adds	r1, r2, r3
1004fb4a:	2317      	movs	r3, #23
1004fb4c:	18fb      	adds	r3, r7, r3
1004fb4e:	781a      	ldrb	r2, [r3, #0]
1004fb50:	4829      	ldr	r0, [pc, #164]	@ (1004fbf8 <Gap_profile_set_char_value+0x14c>)
1004fb52:	0013      	movs	r3, r2
1004fb54:	00db      	lsls	r3, r3, #3
1004fb56:	189b      	adds	r3, r3, r2
1004fb58:	009b      	lsls	r3, r3, #2
1004fb5a:	18c3      	adds	r3, r0, r3
1004fb5c:	3320      	adds	r3, #32
1004fb5e:	681b      	ldr	r3, [r3, #0]
1004fb60:	889b      	ldrh	r3, [r3, #4]
1004fb62:	4299      	cmp	r1, r3
1004fb64:	dd01      	ble.n	1004fb6a <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004fb66:	2312      	movs	r3, #18
1004fb68:	e042      	b.n	1004fbf0 <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
1004fb6a:	2317      	movs	r3, #23
1004fb6c:	18fb      	adds	r3, r7, r3
1004fb6e:	781a      	ldrb	r2, [r3, #0]
1004fb70:	4921      	ldr	r1, [pc, #132]	@ (1004fbf8 <Gap_profile_set_char_value+0x14c>)
1004fb72:	0013      	movs	r3, r2
1004fb74:	00db      	lsls	r3, r3, #3
1004fb76:	189b      	adds	r3, r3, r2
1004fb78:	009b      	lsls	r3, r3, #2
1004fb7a:	18cb      	adds	r3, r1, r3
1004fb7c:	3320      	adds	r3, #32
1004fb7e:	681b      	ldr	r3, [r3, #0]
1004fb80:	2b00      	cmp	r3, #0
1004fb82:	d101      	bne.n	1004fb88 <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
1004fb84:	2312      	movs	r3, #18
1004fb86:	e033      	b.n	1004fbf0 <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
1004fb88:	2417      	movs	r4, #23
1004fb8a:	193b      	adds	r3, r7, r4
1004fb8c:	781a      	ldrb	r2, [r3, #0]
1004fb8e:	491a      	ldr	r1, [pc, #104]	@ (1004fbf8 <Gap_profile_set_char_value+0x14c>)
1004fb90:	0013      	movs	r3, r2
1004fb92:	00db      	lsls	r3, r3, #3
1004fb94:	189b      	adds	r3, r3, r2
1004fb96:	009b      	lsls	r3, r3, #2
1004fb98:	18cb      	adds	r3, r1, r3
1004fb9a:	3320      	adds	r3, #32
1004fb9c:	681b      	ldr	r3, [r3, #0]
1004fb9e:	689a      	ldr	r2, [r3, #8]
1004fba0:	230c      	movs	r3, #12
1004fba2:	18fb      	adds	r3, r7, r3
1004fba4:	881b      	ldrh	r3, [r3, #0]
1004fba6:	18d0      	adds	r0, r2, r3
1004fba8:	250a      	movs	r5, #10
1004fbaa:	197b      	adds	r3, r7, r5
1004fbac:	881a      	ldrh	r2, [r3, #0]
1004fbae:	687b      	ldr	r3, [r7, #4]
1004fbb0:	0019      	movs	r1, r3
1004fbb2:	f016 fcea 	bl	1006658a <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
1004fbb6:	193b      	adds	r3, r7, r4
1004fbb8:	781a      	ldrb	r2, [r3, #0]
1004fbba:	490f      	ldr	r1, [pc, #60]	@ (1004fbf8 <Gap_profile_set_char_value+0x14c>)
1004fbbc:	0013      	movs	r3, r2
1004fbbe:	00db      	lsls	r3, r3, #3
1004fbc0:	189b      	adds	r3, r3, r2
1004fbc2:	009b      	lsls	r3, r3, #2
1004fbc4:	18cb      	adds	r3, r1, r3
1004fbc6:	3320      	adds	r3, #32
1004fbc8:	681b      	ldr	r3, [r3, #0]
1004fbca:	781b      	ldrb	r3, [r3, #0]
1004fbcc:	001a      	movs	r2, r3
1004fbce:	2302      	movs	r3, #2
1004fbd0:	4013      	ands	r3, r2
1004fbd2:	d00c      	beq.n	1004fbee <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
1004fbd4:	193b      	adds	r3, r7, r4
1004fbd6:	781a      	ldrb	r2, [r3, #0]
1004fbd8:	4907      	ldr	r1, [pc, #28]	@ (1004fbf8 <Gap_profile_set_char_value+0x14c>)
1004fbda:	0013      	movs	r3, r2
1004fbdc:	00db      	lsls	r3, r3, #3
1004fbde:	189b      	adds	r3, r3, r2
1004fbe0:	009b      	lsls	r3, r3, #2
1004fbe2:	18cb      	adds	r3, r1, r3
1004fbe4:	3320      	adds	r3, #32
1004fbe6:	681b      	ldr	r3, [r3, #0]
1004fbe8:	197a      	adds	r2, r7, r5
1004fbea:	8812      	ldrh	r2, [r2, #0]
1004fbec:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
1004fbee:	2300      	movs	r3, #0
}
1004fbf0:	0018      	movs	r0, r3
1004fbf2:	46bd      	mov	sp, r7
1004fbf4:	b006      	add	sp, #24
1004fbf6:	bdb0      	pop	{r4, r5, r7, pc}
1004fbf8:	20002748 	.word	0x20002748

1004fbfc <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
1004fbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004fbfe:	b085      	sub	sp, #20
1004fc00:	af00      	add	r7, sp, #0
1004fc02:	0002      	movs	r2, r0
1004fc04:	6039      	str	r1, [r7, #0]
1004fc06:	1dfb      	adds	r3, r7, #7
1004fc08:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
1004fc0a:	683b      	ldr	r3, [r7, #0]
1004fc0c:	2200      	movs	r2, #0
1004fc0e:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
1004fc10:	250f      	movs	r5, #15
1004fc12:	197c      	adds	r4, r7, r5
1004fc14:	4b38      	ldr	r3, [pc, #224]	@ (1004fcf8 <aci_gatt_srv_profile_init+0xfc>)
1004fc16:	0018      	movs	r0, r3
1004fc18:	f7fd ff74 	bl	1004db04 <aci_gatt_srv_add_service>
1004fc1c:	0003      	movs	r3, r0
1004fc1e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004fc20:	197b      	adds	r3, r7, r5
1004fc22:	781b      	ldrb	r3, [r3, #0]
1004fc24:	2b00      	cmp	r3, #0
1004fc26:	d002      	beq.n	1004fc2e <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
1004fc28:	197b      	adds	r3, r7, r5
1004fc2a:	781b      	ldrb	r3, [r3, #0]
1004fc2c:	e060      	b.n	1004fcf0 <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
1004fc2e:	260c      	movs	r6, #12
1004fc30:	19bc      	adds	r4, r7, r6
1004fc32:	4b31      	ldr	r3, [pc, #196]	@ (1004fcf8 <aci_gatt_srv_profile_init+0xfc>)
1004fc34:	0018      	movs	r0, r3
1004fc36:	f7fd ff72 	bl	1004db1e <aci_gatt_srv_get_service_handle>
1004fc3a:	0003      	movs	r3, r0
1004fc3c:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
1004fc3e:	1dfb      	adds	r3, r7, #7
1004fc40:	781b      	ldrb	r3, [r3, #0]
1004fc42:	2201      	movs	r2, #1
1004fc44:	4013      	ands	r3, r2
1004fc46:	d011      	beq.n	1004fc6c <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
1004fc48:	250f      	movs	r5, #15
1004fc4a:	197c      	adds	r4, r7, r5
1004fc4c:	19bb      	adds	r3, r7, r6
1004fc4e:	881a      	ldrh	r2, [r3, #0]
1004fc50:	4b2a      	ldr	r3, [pc, #168]	@ (1004fcfc <aci_gatt_srv_profile_init+0x100>)
1004fc52:	0011      	movs	r1, r2
1004fc54:	0018      	movs	r0, r3
1004fc56:	f7fd ff6f 	bl	1004db38 <aci_gatt_srv_add_char>
1004fc5a:	0003      	movs	r3, r0
1004fc5c:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004fc5e:	197b      	adds	r3, r7, r5
1004fc60:	781b      	ldrb	r3, [r3, #0]
1004fc62:	2b00      	cmp	r3, #0
1004fc64:	d002      	beq.n	1004fc6c <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
1004fc66:	197b      	adds	r3, r7, r5
1004fc68:	781b      	ldrb	r3, [r3, #0]
1004fc6a:	e041      	b.n	1004fcf0 <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
1004fc6c:	4b23      	ldr	r3, [pc, #140]	@ (1004fcfc <aci_gatt_srv_profile_init+0x100>)
1004fc6e:	0018      	movs	r0, r3
1004fc70:	f7fd ff75 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
1004fc74:	0003      	movs	r3, r0
1004fc76:	001a      	movs	r2, r3
1004fc78:	683b      	ldr	r3, [r7, #0]
1004fc7a:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
1004fc7c:	250f      	movs	r5, #15
1004fc7e:	197c      	adds	r4, r7, r5
1004fc80:	230c      	movs	r3, #12
1004fc82:	18fb      	adds	r3, r7, r3
1004fc84:	881a      	ldrh	r2, [r3, #0]
1004fc86:	4b1e      	ldr	r3, [pc, #120]	@ (1004fd00 <aci_gatt_srv_profile_init+0x104>)
1004fc88:	0011      	movs	r1, r2
1004fc8a:	0018      	movs	r0, r3
1004fc8c:	f7fd ff54 	bl	1004db38 <aci_gatt_srv_add_char>
1004fc90:	0003      	movs	r3, r0
1004fc92:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004fc94:	197b      	adds	r3, r7, r5
1004fc96:	781b      	ldrb	r3, [r3, #0]
1004fc98:	2b00      	cmp	r3, #0
1004fc9a:	d002      	beq.n	1004fca2 <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
1004fc9c:	197b      	adds	r3, r7, r5
1004fc9e:	781b      	ldrb	r3, [r3, #0]
1004fca0:	e026      	b.n	1004fcf0 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
1004fca2:	250f      	movs	r5, #15
1004fca4:	197c      	adds	r4, r7, r5
1004fca6:	230c      	movs	r3, #12
1004fca8:	18fb      	adds	r3, r7, r3
1004fcaa:	881a      	ldrh	r2, [r3, #0]
1004fcac:	4b15      	ldr	r3, [pc, #84]	@ (1004fd04 <aci_gatt_srv_profile_init+0x108>)
1004fcae:	0011      	movs	r1, r2
1004fcb0:	0018      	movs	r0, r3
1004fcb2:	f7fd ff41 	bl	1004db38 <aci_gatt_srv_add_char>
1004fcb6:	0003      	movs	r3, r0
1004fcb8:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004fcba:	197b      	adds	r3, r7, r5
1004fcbc:	781b      	ldrb	r3, [r3, #0]
1004fcbe:	2b00      	cmp	r3, #0
1004fcc0:	d002      	beq.n	1004fcc8 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
1004fcc2:	197b      	adds	r3, r7, r5
1004fcc4:	781b      	ldrb	r3, [r3, #0]
1004fcc6:	e013      	b.n	1004fcf0 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
1004fcc8:	250f      	movs	r5, #15
1004fcca:	197c      	adds	r4, r7, r5
1004fccc:	230c      	movs	r3, #12
1004fcce:	18fb      	adds	r3, r7, r3
1004fcd0:	881a      	ldrh	r2, [r3, #0]
1004fcd2:	4b0d      	ldr	r3, [pc, #52]	@ (1004fd08 <aci_gatt_srv_profile_init+0x10c>)
1004fcd4:	0011      	movs	r1, r2
1004fcd6:	0018      	movs	r0, r3
1004fcd8:	f7fd ff2e 	bl	1004db38 <aci_gatt_srv_add_char>
1004fcdc:	0003      	movs	r3, r0
1004fcde:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004fce0:	197b      	adds	r3, r7, r5
1004fce2:	781b      	ldrb	r3, [r3, #0]
1004fce4:	2b00      	cmp	r3, #0
1004fce6:	d002      	beq.n	1004fcee <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
1004fce8:	197b      	adds	r3, r7, r5
1004fcea:	781b      	ldrb	r3, [r3, #0]
1004fcec:	e000      	b.n	1004fcf0 <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
1004fcee:	2300      	movs	r3, #0
}
1004fcf0:	0018      	movs	r0, r3
1004fcf2:	46bd      	mov	sp, r7
1004fcf4:	b005      	add	sp, #20
1004fcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004fcf8:	20002840 	.word	0x20002840
1004fcfc:	10067e74 	.word	0x10067e74
1004fd00:	10067e98 	.word	0x10067e98
1004fd04:	10067ebc 	.word	0x10067ebc
1004fd08:	10067ee0 	.word	0x10067ee0

1004fd0c <__NVIC_EnableIRQ>:
{
1004fd0c:	b580      	push	{r7, lr}
1004fd0e:	b082      	sub	sp, #8
1004fd10:	af00      	add	r7, sp, #0
1004fd12:	0002      	movs	r2, r0
1004fd14:	1dfb      	adds	r3, r7, #7
1004fd16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004fd18:	1dfb      	adds	r3, r7, #7
1004fd1a:	781b      	ldrb	r3, [r3, #0]
1004fd1c:	2b7f      	cmp	r3, #127	@ 0x7f
1004fd1e:	d809      	bhi.n	1004fd34 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004fd20:	1dfb      	adds	r3, r7, #7
1004fd22:	781b      	ldrb	r3, [r3, #0]
1004fd24:	001a      	movs	r2, r3
1004fd26:	231f      	movs	r3, #31
1004fd28:	401a      	ands	r2, r3
1004fd2a:	4b04      	ldr	r3, [pc, #16]	@ (1004fd3c <__NVIC_EnableIRQ+0x30>)
1004fd2c:	2101      	movs	r1, #1
1004fd2e:	4091      	lsls	r1, r2
1004fd30:	000a      	movs	r2, r1
1004fd32:	601a      	str	r2, [r3, #0]
}
1004fd34:	46c0      	nop			@ (mov r8, r8)
1004fd36:	46bd      	mov	sp, r7
1004fd38:	b002      	add	sp, #8
1004fd3a:	bd80      	pop	{r7, pc}
1004fd3c:	e000e100 	.word	0xe000e100

1004fd40 <__NVIC_DisableIRQ>:
{
1004fd40:	b580      	push	{r7, lr}
1004fd42:	b082      	sub	sp, #8
1004fd44:	af00      	add	r7, sp, #0
1004fd46:	0002      	movs	r2, r0
1004fd48:	1dfb      	adds	r3, r7, #7
1004fd4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004fd4c:	1dfb      	adds	r3, r7, #7
1004fd4e:	781b      	ldrb	r3, [r3, #0]
1004fd50:	2b7f      	cmp	r3, #127	@ 0x7f
1004fd52:	d810      	bhi.n	1004fd76 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004fd54:	1dfb      	adds	r3, r7, #7
1004fd56:	781b      	ldrb	r3, [r3, #0]
1004fd58:	001a      	movs	r2, r3
1004fd5a:	231f      	movs	r3, #31
1004fd5c:	4013      	ands	r3, r2
1004fd5e:	4908      	ldr	r1, [pc, #32]	@ (1004fd80 <__NVIC_DisableIRQ+0x40>)
1004fd60:	2201      	movs	r2, #1
1004fd62:	409a      	lsls	r2, r3
1004fd64:	0013      	movs	r3, r2
1004fd66:	2280      	movs	r2, #128	@ 0x80
1004fd68:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
1004fd6a:	f3bf 8f4f 	dsb	sy
}
1004fd6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
1004fd70:	f3bf 8f6f 	isb	sy
}
1004fd74:	46c0      	nop			@ (mov r8, r8)
}
1004fd76:	46c0      	nop			@ (mov r8, r8)
1004fd78:	46bd      	mov	sp, r7
1004fd7a:	b002      	add	sp, #8
1004fd7c:	bd80      	pop	{r7, pc}
1004fd7e:	46c0      	nop			@ (mov r8, r8)
1004fd80:	e000e100 	.word	0xe000e100

1004fd84 <LL_PWR_IsSMPSReady>:
{
1004fd84:	b580      	push	{r7, lr}
1004fd86:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
1004fd88:	4b05      	ldr	r3, [pc, #20]	@ (1004fda0 <LL_PWR_IsSMPSReady+0x1c>)
1004fd8a:	695b      	ldr	r3, [r3, #20]
1004fd8c:	2204      	movs	r2, #4
1004fd8e:	4013      	ands	r3, r2
1004fd90:	2b04      	cmp	r3, #4
1004fd92:	d101      	bne.n	1004fd98 <LL_PWR_IsSMPSReady+0x14>
1004fd94:	2301      	movs	r3, #1
1004fd96:	e000      	b.n	1004fd9a <LL_PWR_IsSMPSReady+0x16>
1004fd98:	2300      	movs	r3, #0
}
1004fd9a:	0018      	movs	r0, r3
1004fd9c:	46bd      	mov	sp, r7
1004fd9e:	bd80      	pop	{r7, pc}
1004fda0:	48500000 	.word	0x48500000

1004fda4 <LL_PWR_GetSMPSMode>:
{
1004fda4:	b580      	push	{r7, lr}
1004fda6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
1004fda8:	4b03      	ldr	r3, [pc, #12]	@ (1004fdb8 <LL_PWR_GetSMPSMode+0x14>)
1004fdaa:	69da      	ldr	r2, [r3, #28]
1004fdac:	2380      	movs	r3, #128	@ 0x80
1004fdae:	00db      	lsls	r3, r3, #3
1004fdb0:	4013      	ands	r3, r2
}
1004fdb2:	0018      	movs	r0, r3
1004fdb4:	46bd      	mov	sp, r7
1004fdb6:	bd80      	pop	{r7, pc}
1004fdb8:	48500000 	.word	0x48500000

1004fdbc <LL_PWR_SetSMPSPrechargeMode>:
{
1004fdbc:	b580      	push	{r7, lr}
1004fdbe:	b082      	sub	sp, #8
1004fdc0:	af00      	add	r7, sp, #0
1004fdc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
1004fdc4:	4b06      	ldr	r3, [pc, #24]	@ (1004fde0 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004fdc6:	69db      	ldr	r3, [r3, #28]
1004fdc8:	4a06      	ldr	r2, [pc, #24]	@ (1004fde4 <LL_PWR_SetSMPSPrechargeMode+0x28>)
1004fdca:	4013      	ands	r3, r2
1004fdcc:	0019      	movs	r1, r3
1004fdce:	4b04      	ldr	r3, [pc, #16]	@ (1004fde0 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004fdd0:	687a      	ldr	r2, [r7, #4]
1004fdd2:	430a      	orrs	r2, r1
1004fdd4:	61da      	str	r2, [r3, #28]
}
1004fdd6:	46c0      	nop			@ (mov r8, r8)
1004fdd8:	46bd      	mov	sp, r7
1004fdda:	b002      	add	sp, #8
1004fddc:	bd80      	pop	{r7, pc}
1004fdde:	46c0      	nop			@ (mov r8, r8)
1004fde0:	48500000 	.word	0x48500000
1004fde4:	fffffdff 	.word	0xfffffdff

1004fde8 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
1004fde8:	b580      	push	{r7, lr}
1004fdea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1004fdec:	4b07      	ldr	r3, [pc, #28]	@ (1004fe0c <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1004fdee:	69da      	ldr	r2, [r3, #28]
1004fdf0:	2380      	movs	r3, #128	@ 0x80
1004fdf2:	009b      	lsls	r3, r3, #2
1004fdf4:	401a      	ands	r2, r3
1004fdf6:	2380      	movs	r3, #128	@ 0x80
1004fdf8:	009b      	lsls	r3, r3, #2
1004fdfa:	429a      	cmp	r2, r3
1004fdfc:	d101      	bne.n	1004fe02 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1004fdfe:	2301      	movs	r3, #1
1004fe00:	e000      	b.n	1004fe04 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
1004fe02:	2300      	movs	r3, #0
}
1004fe04:	0018      	movs	r0, r3
1004fe06:	46bd      	mov	sp, r7
1004fe08:	bd80      	pop	{r7, pc}
1004fe0a:	46c0      	nop			@ (mov r8, r8)
1004fe0c:	48500000 	.word	0x48500000

1004fe10 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
1004fe10:	b580      	push	{r7, lr}
1004fe12:	b082      	sub	sp, #8
1004fe14:	af00      	add	r7, sp, #0
1004fe16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
1004fe18:	4b06      	ldr	r3, [pc, #24]	@ (1004fe34 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004fe1a:	69db      	ldr	r3, [r3, #28]
1004fe1c:	220f      	movs	r2, #15
1004fe1e:	4393      	bics	r3, r2
1004fe20:	0019      	movs	r1, r3
1004fe22:	4b04      	ldr	r3, [pc, #16]	@ (1004fe34 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004fe24:	687a      	ldr	r2, [r7, #4]
1004fe26:	430a      	orrs	r2, r1
1004fe28:	61da      	str	r2, [r3, #28]
}
1004fe2a:	46c0      	nop			@ (mov r8, r8)
1004fe2c:	46bd      	mov	sp, r7
1004fe2e:	b002      	add	sp, #8
1004fe30:	bd80      	pop	{r7, pc}
1004fe32:	46c0      	nop			@ (mov r8, r8)
1004fe34:	48500000 	.word	0x48500000

1004fe38 <LL_SYSCFG_BLERXTX_EnableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_EnableIT(uint32_t Signal)
{
1004fe38:	b580      	push	{r7, lr}
1004fe3a:	b082      	sub	sp, #8
1004fe3c:	af00      	add	r7, sp, #0
1004fe3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->BLERXTX_IER, Signal);
1004fe40:	2380      	movs	r3, #128	@ 0x80
1004fe42:	05db      	lsls	r3, r3, #23
1004fe44:	6b99      	ldr	r1, [r3, #56]	@ 0x38
1004fe46:	2380      	movs	r3, #128	@ 0x80
1004fe48:	05db      	lsls	r3, r3, #23
1004fe4a:	687a      	ldr	r2, [r7, #4]
1004fe4c:	430a      	orrs	r2, r1
1004fe4e:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004fe50:	46c0      	nop			@ (mov r8, r8)
1004fe52:	46bd      	mov	sp, r7
1004fe54:	b002      	add	sp, #8
1004fe56:	bd80      	pop	{r7, pc}

1004fe58 <LL_SYSCFG_BLERXTX_DisableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_DisableIT(uint32_t Signal)
{
1004fe58:	b580      	push	{r7, lr}
1004fe5a:	b082      	sub	sp, #8
1004fe5c:	af00      	add	r7, sp, #0
1004fe5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SYSCFG->BLERXTX_IER, Signal);
1004fe60:	2380      	movs	r3, #128	@ 0x80
1004fe62:	05db      	lsls	r3, r3, #23
1004fe64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004fe66:	687b      	ldr	r3, [r7, #4]
1004fe68:	43d9      	mvns	r1, r3
1004fe6a:	2380      	movs	r3, #128	@ 0x80
1004fe6c:	05db      	lsls	r3, r3, #23
1004fe6e:	400a      	ands	r2, r1
1004fe70:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004fe72:	46c0      	nop			@ (mov r8, r8)
1004fe74:	46bd      	mov	sp, r7
1004fe76:	b002      	add	sp, #8
1004fe78:	bd80      	pop	{r7, pc}

1004fe7a <LL_SYSCFG_BLERXTX_SetType>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetType(uint8_t Type, uint32_t Signal)
{
1004fe7a:	b580      	push	{r7, lr}
1004fe7c:	b082      	sub	sp, #8
1004fe7e:	af00      	add	r7, sp, #0
1004fe80:	0002      	movs	r2, r0
1004fe82:	6039      	str	r1, [r7, #0]
1004fe84:	1dfb      	adds	r3, r7, #7
1004fe86:	701a      	strb	r2, [r3, #0]
  if (Type == LL_SYSCFG_BLERXTX_DET_TYPE_EDGE)
1004fe88:	1dfb      	adds	r3, r7, #7
1004fe8a:	781b      	ldrb	r3, [r3, #0]
1004fe8c:	2b00      	cmp	r3, #0
1004fe8e:	d109      	bne.n	1004fea4 <LL_SYSCFG_BLERXTX_SetType+0x2a>
  {
    CLEAR_BIT(SYSCFG->BLERXTX_DTR, Signal);
1004fe90:	2380      	movs	r3, #128	@ 0x80
1004fe92:	05db      	lsls	r3, r3, #23
1004fe94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004fe96:	683b      	ldr	r3, [r7, #0]
1004fe98:	43d9      	mvns	r1, r3
1004fe9a:	2380      	movs	r3, #128	@ 0x80
1004fe9c:	05db      	lsls	r3, r3, #23
1004fe9e:	400a      	ands	r2, r1
1004fea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
  }
}
1004fea2:	e007      	b.n	1004feb4 <LL_SYSCFG_BLERXTX_SetType+0x3a>
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
1004fea4:	2380      	movs	r3, #128	@ 0x80
1004fea6:	05db      	lsls	r3, r3, #23
1004fea8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1004feaa:	2380      	movs	r3, #128	@ 0x80
1004feac:	05db      	lsls	r3, r3, #23
1004feae:	683a      	ldr	r2, [r7, #0]
1004feb0:	430a      	orrs	r2, r1
1004feb2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004feb4:	46c0      	nop			@ (mov r8, r8)
1004feb6:	46bd      	mov	sp, r7
1004feb8:	b002      	add	sp, #8
1004feba:	bd80      	pop	{r7, pc}

1004febc <LL_SYSCFG_BLERXTX_SetTrigger>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetTrigger(uint8_t Trigger, uint32_t Signal)
{
1004febc:	b580      	push	{r7, lr}
1004febe:	b082      	sub	sp, #8
1004fec0:	af00      	add	r7, sp, #0
1004fec2:	0002      	movs	r2, r0
1004fec4:	6039      	str	r1, [r7, #0]
1004fec6:	1dfb      	adds	r3, r7, #7
1004fec8:	701a      	strb	r2, [r3, #0]
  switch (Trigger)
1004feca:	1dfb      	adds	r3, r7, #7
1004fecc:	781b      	ldrb	r3, [r3, #0]
1004fece:	2b04      	cmp	r3, #4
1004fed0:	d860      	bhi.n	1004ff94 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
1004fed2:	009a      	lsls	r2, r3, #2
1004fed4:	4b31      	ldr	r3, [pc, #196]	@ (1004ff9c <LL_SYSCFG_BLERXTX_SetTrigger+0xe0>)
1004fed6:	18d3      	adds	r3, r2, r3
1004fed8:	681b      	ldr	r3, [r3, #0]
1004feda:	469f      	mov	pc, r3
  {
    case LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE:
    {
      SET_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004fedc:	2380      	movs	r3, #128	@ 0x80
1004fede:	05db      	lsls	r3, r3, #23
1004fee0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004fee2:	2380      	movs	r3, #128	@ 0x80
1004fee4:	05db      	lsls	r3, r3, #23
1004fee6:	683a      	ldr	r2, [r7, #0]
1004fee8:	430a      	orrs	r2, r1
1004feea:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004feec:	2380      	movs	r3, #128	@ 0x80
1004feee:	05db      	lsls	r3, r3, #23
1004fef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004fef2:	683b      	ldr	r3, [r7, #0]
1004fef4:	43d9      	mvns	r1, r3
1004fef6:	2380      	movs	r3, #128	@ 0x80
1004fef8:	05db      	lsls	r3, r3, #23
1004fefa:	400a      	ands	r2, r1
1004fefc:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004fefe:	e049      	b.n	1004ff94 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_RISING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004ff00:	2380      	movs	r3, #128	@ 0x80
1004ff02:	05db      	lsls	r3, r3, #23
1004ff04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004ff06:	683b      	ldr	r3, [r7, #0]
1004ff08:	43d9      	mvns	r1, r3
1004ff0a:	2380      	movs	r3, #128	@ 0x80
1004ff0c:	05db      	lsls	r3, r3, #23
1004ff0e:	400a      	ands	r2, r1
1004ff10:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004ff12:	2380      	movs	r3, #128	@ 0x80
1004ff14:	05db      	lsls	r3, r3, #23
1004ff16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1004ff18:	2380      	movs	r3, #128	@ 0x80
1004ff1a:	05db      	lsls	r3, r3, #23
1004ff1c:	683a      	ldr	r2, [r7, #0]
1004ff1e:	430a      	orrs	r2, r1
1004ff20:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004ff22:	e037      	b.n	1004ff94 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_FALLING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004ff24:	2380      	movs	r3, #128	@ 0x80
1004ff26:	05db      	lsls	r3, r3, #23
1004ff28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004ff2a:	683b      	ldr	r3, [r7, #0]
1004ff2c:	43d9      	mvns	r1, r3
1004ff2e:	2380      	movs	r3, #128	@ 0x80
1004ff30:	05db      	lsls	r3, r3, #23
1004ff32:	400a      	ands	r2, r1
1004ff34:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004ff36:	2380      	movs	r3, #128	@ 0x80
1004ff38:	05db      	lsls	r3, r3, #23
1004ff3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004ff3c:	683b      	ldr	r3, [r7, #0]
1004ff3e:	43d9      	mvns	r1, r3
1004ff40:	2380      	movs	r3, #128	@ 0x80
1004ff42:	05db      	lsls	r3, r3, #23
1004ff44:	400a      	ands	r2, r1
1004ff46:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004ff48:	e024      	b.n	1004ff94 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_LOW_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004ff4a:	2380      	movs	r3, #128	@ 0x80
1004ff4c:	05db      	lsls	r3, r3, #23
1004ff4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004ff50:	683b      	ldr	r3, [r7, #0]
1004ff52:	43d9      	mvns	r1, r3
1004ff54:	2380      	movs	r3, #128	@ 0x80
1004ff56:	05db      	lsls	r3, r3, #23
1004ff58:	400a      	ands	r2, r1
1004ff5a:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004ff5c:	2380      	movs	r3, #128	@ 0x80
1004ff5e:	05db      	lsls	r3, r3, #23
1004ff60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004ff62:	683b      	ldr	r3, [r7, #0]
1004ff64:	43d9      	mvns	r1, r3
1004ff66:	2380      	movs	r3, #128	@ 0x80
1004ff68:	05db      	lsls	r3, r3, #23
1004ff6a:	400a      	ands	r2, r1
1004ff6c:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1004ff6e:	e011      	b.n	1004ff94 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_HIGH_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1004ff70:	2380      	movs	r3, #128	@ 0x80
1004ff72:	05db      	lsls	r3, r3, #23
1004ff74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004ff76:	683b      	ldr	r3, [r7, #0]
1004ff78:	43d9      	mvns	r1, r3
1004ff7a:	2380      	movs	r3, #128	@ 0x80
1004ff7c:	05db      	lsls	r3, r3, #23
1004ff7e:	400a      	ands	r2, r1
1004ff80:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1004ff82:	2380      	movs	r3, #128	@ 0x80
1004ff84:	05db      	lsls	r3, r3, #23
1004ff86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1004ff88:	2380      	movs	r3, #128	@ 0x80
1004ff8a:	05db      	lsls	r3, r3, #23
1004ff8c:	683a      	ldr	r2, [r7, #0]
1004ff8e:	430a      	orrs	r2, r1
1004ff90:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
}
1004ff92:	e7ff      	b.n	1004ff94 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
1004ff94:	46c0      	nop			@ (mov r8, r8)
1004ff96:	46bd      	mov	sp, r7
1004ff98:	b002      	add	sp, #8
1004ff9a:	bd80      	pop	{r7, pc}
1004ff9c:	10067f04 	.word	0x10067f04

1004ffa0 <LL_SYSCFG_BLERXTX_IsInterruptPending>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSCFG_BLERXTX_IsInterruptPending(uint32_t Signal)
{
1004ffa0:	b580      	push	{r7, lr}
1004ffa2:	b082      	sub	sp, #8
1004ffa4:	af00      	add	r7, sp, #0
1004ffa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SYSCFG->BLERXTX_ISCR, Signal) == (Signal)) ? 1UL : 0UL);
1004ffa8:	2380      	movs	r3, #128	@ 0x80
1004ffaa:	05db      	lsls	r3, r3, #23
1004ffac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004ffae:	687a      	ldr	r2, [r7, #4]
1004ffb0:	4013      	ands	r3, r2
1004ffb2:	687a      	ldr	r2, [r7, #4]
1004ffb4:	429a      	cmp	r2, r3
1004ffb6:	d101      	bne.n	1004ffbc <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1c>
1004ffb8:	2301      	movs	r3, #1
1004ffba:	e000      	b.n	1004ffbe <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1e>
1004ffbc:	2300      	movs	r3, #0
}
1004ffbe:	0018      	movs	r0, r3
1004ffc0:	46bd      	mov	sp, r7
1004ffc2:	b002      	add	sp, #8
1004ffc4:	bd80      	pop	{r7, pc}

1004ffc6 <LL_SYSCFG_BLERXTX_ClearInterrupt>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_ClearInterrupt(uint32_t Signal)
{
1004ffc6:	b580      	push	{r7, lr}
1004ffc8:	b082      	sub	sp, #8
1004ffca:	af00      	add	r7, sp, #0
1004ffcc:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->BLERXTX_ISCR, Signal);
1004ffce:	2380      	movs	r3, #128	@ 0x80
1004ffd0:	05db      	lsls	r3, r3, #23
1004ffd2:	687a      	ldr	r2, [r7, #4]
1004ffd4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
1004ffd6:	46c0      	nop			@ (mov r8, r8)
1004ffd8:	46bd      	mov	sp, r7
1004ffda:	b002      	add	sp, #8
1004ffdc:	bd80      	pop	{r7, pc}
	...

1004ffe0 <LL_APB0_GRP1_EnableClock>:
{
1004ffe0:	b580      	push	{r7, lr}
1004ffe2:	b084      	sub	sp, #16
1004ffe4:	af00      	add	r7, sp, #0
1004ffe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
1004ffe8:	4b07      	ldr	r3, [pc, #28]	@ (10050008 <LL_APB0_GRP1_EnableClock+0x28>)
1004ffea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004ffec:	4b06      	ldr	r3, [pc, #24]	@ (10050008 <LL_APB0_GRP1_EnableClock+0x28>)
1004ffee:	687a      	ldr	r2, [r7, #4]
1004fff0:	430a      	orrs	r2, r1
1004fff2:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004fff4:	4b04      	ldr	r3, [pc, #16]	@ (10050008 <LL_APB0_GRP1_EnableClock+0x28>)
1004fff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004fff8:	687a      	ldr	r2, [r7, #4]
1004fffa:	4013      	ands	r3, r2
1004fffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004fffe:	68fb      	ldr	r3, [r7, #12]
}
10050000:	46c0      	nop			@ (mov r8, r8)
10050002:	46bd      	mov	sp, r7
10050004:	b004      	add	sp, #16
10050006:	bd80      	pop	{r7, pc}
10050008:	48400000 	.word	0x48400000

1005000c <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
1005000c:	b580      	push	{r7, lr}
1005000e:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
10050010:	231f      	movs	r3, #31
}
10050012:	0018      	movs	r0, r3
10050014:	46bd      	mov	sp, r7
10050016:	bd80      	pop	{r7, pc}

10050018 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
10050018:	b580      	push	{r7, lr}
1005001a:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
1005001c:	231f      	movs	r3, #31
}
1005001e:	0018      	movs	r0, r3
10050020:	46bd      	mov	sp, r7
10050022:	bd80      	pop	{r7, pc}

10050024 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
10050024:	b580      	push	{r7, lr}
10050026:	b082      	sub	sp, #8
10050028:	af00      	add	r7, sp, #0
1005002a:	0002      	movs	r2, r0
1005002c:	1dfb      	adds	r3, r7, #7
1005002e:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
10050030:	1dfb      	adds	r3, r7, #7
10050032:	781b      	ldrb	r3, [r3, #0]
10050034:	2b00      	cmp	r3, #0
10050036:	d01d      	beq.n	10050074 <RADIO_SetHighPower+0x50>
  {
    if(high_power == FALSE)
10050038:	4b2d      	ldr	r3, [pc, #180]	@ (100500f0 <RADIO_SetHighPower+0xcc>)
1005003a:	781b      	ldrb	r3, [r3, #0]
1005003c:	2b00      	cmp	r3, #0
1005003e:	d129      	bne.n	10050094 <RADIO_SetHighPower+0x70>
    {
      high_power = TRUE;
10050040:	4b2b      	ldr	r3, [pc, #172]	@ (100500f0 <RADIO_SetHighPower+0xcc>)
10050042:	2201      	movs	r2, #1
10050044:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_SYSCFG);
10050046:	2380      	movs	r3, #128	@ 0x80
10050048:	005b      	lsls	r3, r3, #1
1005004a:	0018      	movs	r0, r3
1005004c:	f7ff ffc8 	bl	1004ffe0 <LL_APB0_GRP1_EnableClock>
      LL_SYSCFG_BLERXTX_SetTrigger(LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE, LL_SYSCFG_BLE_TX_EVENT);
10050050:	2101      	movs	r1, #1
10050052:	2002      	movs	r0, #2
10050054:	f7ff ff32 	bl	1004febc <LL_SYSCFG_BLERXTX_SetTrigger>
      LL_SYSCFG_BLERXTX_SetType(LL_SYSCFG_BLERXTX_DET_TYPE_EDGE, LL_SYSCFG_BLE_TX_EVENT);
10050058:	2101      	movs	r1, #1
1005005a:	2000      	movs	r0, #0
1005005c:	f7ff ff0d 	bl	1004fe7a <LL_SYSCFG_BLERXTX_SetType>
      LL_SYSCFG_BLERXTX_EnableIT(LL_SYSCFG_BLE_TX_EVENT);
10050060:	2001      	movs	r0, #1
10050062:	f7ff fee9 	bl	1004fe38 <LL_SYSCFG_BLERXTX_EnableIT>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10050066:	2001      	movs	r0, #1
10050068:	f7ff ffad 	bl	1004ffc6 <LL_SYSCFG_BLERXTX_ClearInterrupt>
      NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
1005006c:	2019      	movs	r0, #25
1005006e:	f7ff fe4d 	bl	1004fd0c <__NVIC_EnableIRQ>
10050072:	e00f      	b.n	10050094 <RADIO_SetHighPower+0x70>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10050074:	4b1e      	ldr	r3, [pc, #120]	@ (100500f0 <RADIO_SetHighPower+0xcc>)
10050076:	781b      	ldrb	r3, [r3, #0]
10050078:	2b01      	cmp	r3, #1
1005007a:	d10b      	bne.n	10050094 <RADIO_SetHighPower+0x70>
    {
      high_power = FALSE;
1005007c:	4b1c      	ldr	r3, [pc, #112]	@ (100500f0 <RADIO_SetHighPower+0xcc>)
1005007e:	2200      	movs	r2, #0
10050080:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_SYSCFG_BLERXTX_DisableIT(LL_SYSCFG_BLE_TX_EVENT);
10050082:	2001      	movs	r0, #1
10050084:	f7ff fee8 	bl	1004fe58 <LL_SYSCFG_BLERXTX_DisableIT>
      NVIC_DisableIRQ(RADIO_TXRX_SEQ_IRQn);
10050088:	2019      	movs	r0, #25
1005008a:	f7ff fe59 	bl	1004fd40 <__NVIC_DisableIRQ>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1005008e:	2001      	movs	r0, #1
10050090:	f7ff ff99 	bl	1004ffc6 <LL_SYSCFG_BLERXTX_ClearInterrupt>
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10050094:	f7ff fea8 	bl	1004fde8 <LL_PWR_IsEnabledSMPSPrechargeMode>
10050098:	1e03      	subs	r3, r0, #0
1005009a:	d124      	bne.n	100500e6 <RADIO_SetHighPower+0xc2>
1005009c:	f7ff fe82 	bl	1004fda4 <LL_PWR_GetSMPSMode>
100500a0:	0002      	movs	r2, r0
100500a2:	2380      	movs	r3, #128	@ 0x80
100500a4:	00db      	lsls	r3, r3, #3
100500a6:	429a      	cmp	r2, r3
100500a8:	d01d      	beq.n	100500e6 <RADIO_SetHighPower+0xc2>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
100500aa:	2380      	movs	r3, #128	@ 0x80
100500ac:	009b      	lsls	r3, r3, #2
100500ae:	0018      	movs	r0, r3
100500b0:	f7ff fe84 	bl	1004fdbc <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
100500b4:	46c0      	nop			@ (mov r8, r8)
100500b6:	f7ff fe65 	bl	1004fd84 <LL_PWR_IsSMPSReady>
100500ba:	1e03      	subs	r3, r0, #0
100500bc:	d1fb      	bne.n	100500b6 <RADIO_SetHighPower+0x92>
  /* Change level */
  if(state != DISABLE)
100500be:	1dfb      	adds	r3, r7, #7
100500c0:	781b      	ldrb	r3, [r3, #0]
100500c2:	2b00      	cmp	r3, #0
100500c4:	d003      	beq.n	100500ce <RADIO_SetHighPower+0xaa>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
100500c6:	200e      	movs	r0, #14
100500c8:	f7ff fea2 	bl	1004fe10 <LL_PWR_SMPS_SetOutputVoltageLevel>
100500cc:	e002      	b.n	100500d4 <RADIO_SetHighPower+0xb0>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
100500ce:	2004      	movs	r0, #4
100500d0:	f7ff fe9e 	bl	1004fe10 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
100500d4:	2000      	movs	r0, #0
100500d6:	f7ff fe71 	bl	1004fdbc <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
100500da:	46c0      	nop			@ (mov r8, r8)
100500dc:	f7ff fe52 	bl	1004fd84 <LL_PWR_IsSMPSReady>
100500e0:	1e03      	subs	r3, r0, #0
100500e2:	d0fb      	beq.n	100500dc <RADIO_SetHighPower+0xb8>
100500e4:	e000      	b.n	100500e8 <RADIO_SetHighPower+0xc4>
    return;
100500e6:	46c0      	nop			@ (mov r8, r8)
}
100500e8:	46bd      	mov	sp, r7
100500ea:	b002      	add	sp, #8
100500ec:	bd80      	pop	{r7, pc}
100500ee:	46c0      	nop			@ (mov r8, r8)
100500f0:	2000231f 	.word	0x2000231f

100500f4 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
100500f4:	b580      	push	{r7, lr}
100500f6:	af00      	add	r7, sp, #0
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
  if(high_power == FALSE)
100500f8:	4b16      	ldr	r3, [pc, #88]	@ (10050154 <HAL_RADIO_TxRxSeqCallback+0x60>)
100500fa:	781b      	ldrb	r3, [r3, #0]
100500fc:	2b00      	cmp	r3, #0
100500fe:	d025      	beq.n	1005014c <HAL_RADIO_TxRxSeqCallback+0x58>
    return;

  if(LL_SYSCFG_BLERXTX_IsInterruptPending(LL_SYSCFG_BLE_TX_EVENT)){
10050100:	2001      	movs	r0, #1
10050102:	f7ff ff4d 	bl	1004ffa0 <LL_SYSCFG_BLERXTX_IsInterruptPending>
10050106:	1e03      	subs	r3, r0, #0
10050108:	d021      	beq.n	1005014e <HAL_RADIO_TxRxSeqCallback+0x5a>
    if(RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS_4)
1005010a:	4a13      	ldr	r2, [pc, #76]	@ (10050158 <HAL_RADIO_TxRxSeqCallback+0x64>)
1005010c:	23a6      	movs	r3, #166	@ 0xa6
1005010e:	009b      	lsls	r3, r3, #2
10050110:	58d3      	ldr	r3, [r2, r3]
10050112:	2210      	movs	r2, #16
10050114:	4013      	ands	r3, r2
10050116:	d00a      	beq.n	1005012e <HAL_RADIO_TxRxSeqCallback+0x3a>
    {
      // Rising edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 1);
10050118:	4a0f      	ldr	r2, [pc, #60]	@ (10050158 <HAL_RADIO_TxRxSeqCallback+0x64>)
1005011a:	2395      	movs	r3, #149	@ 0x95
1005011c:	009b      	lsls	r3, r3, #2
1005011e:	58d3      	ldr	r3, [r2, r3]
10050120:	490d      	ldr	r1, [pc, #52]	@ (10050158 <HAL_RADIO_TxRxSeqCallback+0x64>)
10050122:	2202      	movs	r2, #2
10050124:	431a      	orrs	r2, r3
10050126:	2395      	movs	r3, #149	@ 0x95
10050128:	009b      	lsls	r3, r3, #2
1005012a:	50ca      	str	r2, [r1, r3]
1005012c:	e00a      	b.n	10050144 <HAL_RADIO_TxRxSeqCallback+0x50>
    }
    else
    {
      // Falling edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
1005012e:	4a0a      	ldr	r2, [pc, #40]	@ (10050158 <HAL_RADIO_TxRxSeqCallback+0x64>)
10050130:	2395      	movs	r3, #149	@ 0x95
10050132:	009b      	lsls	r3, r3, #2
10050134:	58d3      	ldr	r3, [r2, r3]
10050136:	4908      	ldr	r1, [pc, #32]	@ (10050158 <HAL_RADIO_TxRxSeqCallback+0x64>)
10050138:	2202      	movs	r2, #2
1005013a:	4393      	bics	r3, r2
1005013c:	001a      	movs	r2, r3
1005013e:	2395      	movs	r3, #149	@ 0x95
10050140:	009b      	lsls	r3, r3, #2
10050142:	50ca      	str	r2, [r1, r3]
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10050144:	2001      	movs	r0, #1
10050146:	f7ff ff3e 	bl	1004ffc6 <LL_SYSCFG_BLERXTX_ClearInterrupt>
1005014a:	e000      	b.n	1005014e <HAL_RADIO_TxRxSeqCallback+0x5a>
    return;
1005014c:	46c0      	nop			@ (mov r8, r8)
  }
#endif
}
1005014e:	46bd      	mov	sp, r7
10050150:	bd80      	pop	{r7, pc}
10050152:	46c0      	nop			@ (mov r8, r8)
10050154:	2000231f 	.word	0x2000231f
10050158:	60001400 	.word	0x60001400

1005015c <LL_SYSCFG_GetDeviceRevision>:
{
1005015c:	b580      	push	{r7, lr}
1005015e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
10050160:	2380      	movs	r3, #128	@ 0x80
10050162:	05db      	lsls	r3, r3, #23
10050164:	681b      	ldr	r3, [r3, #0]
10050166:	220f      	movs	r2, #15
10050168:	4013      	ands	r3, r2
}
1005016a:	0018      	movs	r0, r3
1005016c:	46bd      	mov	sp, r7
1005016e:	bd80      	pop	{r7, pc}

10050170 <LL_SYSCFG_GetDeviceVersion>:
{
10050170:	b580      	push	{r7, lr}
10050172:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10050174:	2380      	movs	r3, #128	@ 0x80
10050176:	05db      	lsls	r3, r3, #23
10050178:	681b      	ldr	r3, [r3, #0]
1005017a:	091b      	lsrs	r3, r3, #4
1005017c:	220f      	movs	r2, #15
1005017e:	4013      	ands	r3, r2
}
10050180:	0018      	movs	r0, r3
10050182:	46bd      	mov	sp, r7
10050184:	bd80      	pop	{r7, pc}

10050186 <LL_SYSCFG_GetDeviceJTAG_ID>:
{
10050186:	b580      	push	{r7, lr}
10050188:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
1005018a:	2380      	movs	r3, #128	@ 0x80
1005018c:	05db      	lsls	r3, r3, #23
1005018e:	685b      	ldr	r3, [r3, #4]
}
10050190:	0018      	movs	r0, r3
10050192:	46bd      	mov	sp, r7
10050194:	bd80      	pop	{r7, pc}
	...

10050198 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10050198:	b580      	push	{r7, lr}
1005019a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
1005019c:	4b03      	ldr	r3, [pc, #12]	@ (100501ac <LL_GetFlashSize+0x14>)
1005019e:	681b      	ldr	r3, [r3, #0]
100501a0:	041b      	lsls	r3, r3, #16
100501a2:	0c1b      	lsrs	r3, r3, #16
}
100501a4:	0018      	movs	r0, r3
100501a6:	46bd      	mov	sp, r7
100501a8:	bd80      	pop	{r7, pc}
100501aa:	46c0      	nop			@ (mov r8, r8)
100501ac:	40001014 	.word	0x40001014

100501b0 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
100501b0:	b580      	push	{r7, lr}
100501b2:	b082      	sub	sp, #8
100501b4:	af00      	add	r7, sp, #0

    if (tmpreg == 0) {
      tmpreg = LL_UTILS_RAMSIZE_32K;
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
100501b6:	2300      	movs	r3, #0
100501b8:	607b      	str	r3, [r7, #4]
#endif
    
    return tmpreg;
100501ba:	687b      	ldr	r3, [r7, #4]
  }
100501bc:	0018      	movs	r0, r3
100501be:	46bd      	mov	sp, r7
100501c0:	b002      	add	sp, #8
100501c2:	bd80      	pop	{r7, pc}

100501c4 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
100501c4:	b580      	push	{r7, lr}
100501c6:	b084      	sub	sp, #16
100501c8:	af00      	add	r7, sp, #0
100501ca:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
100501cc:	687b      	ldr	r3, [r7, #4]
100501ce:	22ff      	movs	r2, #255	@ 0xff
100501d0:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
100501d2:	f7ff ffd8 	bl	10050186 <LL_SYSCFG_GetDeviceJTAG_ID>
100501d6:	0003      	movs	r3, r0
100501d8:	60fb      	str	r3, [r7, #12]
  if(jtag_id == JTAG_ID_CODE_STM32WB07XX)
  {
    partInfo->die_id = DIE_SW_ID_STM32WB07XX;
  }
#elif defined(STM32WB05)
  if(jtag_id == JTAG_ID_CODE_STM32WB05XX)
100501da:	68fb      	ldr	r3, [r7, #12]
100501dc:	4a18      	ldr	r2, [pc, #96]	@ (10050240 <GetPartInfo+0x7c>)
100501de:	4293      	cmp	r3, r2
100501e0:	d102      	bne.n	100501e8 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
100501e2:	687b      	ldr	r3, [r7, #4]
100501e4:	2205      	movs	r2, #5
100501e6:	701a      	strb	r2, [r3, #0]
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
100501e8:	f7ff ffc2 	bl	10050170 <LL_SYSCFG_GetDeviceVersion>
100501ec:	0003      	movs	r3, r0
100501ee:	b2da      	uxtb	r2, r3
100501f0:	687b      	ldr	r3, [r7, #4]
100501f2:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
100501f4:	f7ff ffb2 	bl	1005015c <LL_SYSCFG_GetDeviceRevision>
100501f8:	0003      	movs	r3, r0
100501fa:	b2da      	uxtb	r2, r3
100501fc:	687b      	ldr	r3, [r7, #4]
100501fe:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
10050200:	f7ff ffc1 	bl	10050186 <LL_SYSCFG_GetDeviceJTAG_ID>
10050204:	0002      	movs	r2, r0
10050206:	687b      	ldr	r3, [r7, #4]
10050208:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
1005020a:	f7ff ffc5 	bl	10050198 <LL_GetFlashSize>
1005020e:	0003      	movs	r3, r0
10050210:	3301      	adds	r3, #1
10050212:	009a      	lsls	r2, r3, #2
10050214:	687b      	ldr	r3, [r7, #4]
10050216:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
10050218:	f7ff ffca 	bl	100501b0 <LL_GetRAMSize>
1005021c:	1e03      	subs	r3, r0, #0
1005021e:	d007      	beq.n	10050230 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
10050220:	f7ff ffc6 	bl	100501b0 <LL_GetRAMSize>
10050224:	0003      	movs	r3, r0
10050226:	3301      	adds	r3, #1
10050228:	039a      	lsls	r2, r3, #14
1005022a:	687b      	ldr	r3, [r7, #4]
1005022c:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
1005022e:	e003      	b.n	10050238 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
10050230:	687b      	ldr	r3, [r7, #4]
10050232:	22c0      	movs	r2, #192	@ 0xc0
10050234:	01d2      	lsls	r2, r2, #7
10050236:	60da      	str	r2, [r3, #12]
}
10050238:	46c0      	nop			@ (mov r8, r8)
1005023a:	46bd      	mov	sp, r7
1005023c:	b004      	add	sp, #16
1005023e:	bd80      	pop	{r7, pc}
10050240:	02028041 	.word	0x02028041

10050244 <__NVIC_SystemReset>:
{
10050244:	b580      	push	{r7, lr}
10050246:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10050248:	f3bf 8f4f 	dsb	sy
}
1005024c:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1005024e:	4b04      	ldr	r3, [pc, #16]	@ (10050260 <__NVIC_SystemReset+0x1c>)
10050250:	4a04      	ldr	r2, [pc, #16]	@ (10050264 <__NVIC_SystemReset+0x20>)
10050252:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10050254:	f3bf 8f4f 	dsb	sy
}
10050258:	46c0      	nop			@ (mov r8, r8)
    __NOP();
1005025a:	46c0      	nop			@ (mov r8, r8)
1005025c:	e7fd      	b.n	1005025a <__NVIC_SystemReset+0x16>
1005025e:	46c0      	nop			@ (mov r8, r8)
10050260:	e000ed00 	.word	0xe000ed00
10050264:	05fa0004 	.word	0x05fa0004

10050268 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
10050268:	b580      	push	{r7, lr}
1005026a:	af00      	add	r7, sp, #0
  BLENVM_Init();
1005026c:	f000 fde4 	bl	10050e38 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10050270:	f7ff fb52 	bl	1004f918 <PKAMGR_Init>
10050274:	0003      	movs	r3, r0
10050276:	3301      	adds	r3, #1
10050278:	d101      	bne.n	1005027e <ModulesInit+0x16>
  {
    Error_Handler();
1005027a:	f7f0 fc01 	bl	10040a80 <Error_Handler>
  }
}
1005027e:	46c0      	nop			@ (mov r8, r8)
10050280:	46bd      	mov	sp, r7
10050282:	bd80      	pop	{r7, pc}

10050284 <BLE_Init>:

void BLE_Init(void)
{
10050284:	b5f0      	push	{r4, r5, r6, r7, lr}
10050286:	b099      	sub	sp, #100	@ 0x64
10050288:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
1005028a:	234f      	movs	r3, #79	@ 0x4f
1005028c:	18fb      	adds	r3, r7, r3
1005028e:	2200      	movs	r2, #0
10050290:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
10050292:	233c      	movs	r3, #60	@ 0x3c
10050294:	18fb      	adds	r3, r7, r3
10050296:	0018      	movs	r0, r3
10050298:	2306      	movs	r3, #6
1005029a:	001a      	movs	r2, r3
1005029c:	2100      	movs	r1, #0
1005029e:	f016 f8ff 	bl	100664a0 <memset>
  uint8_t bd_address_len= 6;
100502a2:	234e      	movs	r3, #78	@ 0x4e
100502a4:	18fb      	adds	r3, r7, r3
100502a6:	2206      	movs	r2, #6
100502a8:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
100502aa:	233a      	movs	r3, #58	@ 0x3a
100502ac:	18fb      	adds	r3, r7, r3
100502ae:	22a0      	movs	r2, #160	@ 0xa0
100502b0:	0092      	lsls	r2, r2, #2
100502b2:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
100502b4:	1d3a      	adds	r2, r7, #4
100502b6:	4b5b      	ldr	r3, [pc, #364]	@ (10050424 <BLE_Init+0x1a0>)
100502b8:	0010      	movs	r0, r2
100502ba:	0019      	movs	r1, r3
100502bc:	2334      	movs	r3, #52	@ 0x34
100502be:	001a      	movs	r2, r3
100502c0:	f016 f963 	bl	1006658a <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
100502c4:	254d      	movs	r5, #77	@ 0x4d
100502c6:	197c      	adds	r4, r7, r5
100502c8:	1d3b      	adds	r3, r7, #4
100502ca:	0018      	movs	r0, r3
100502cc:	f003 fbf2 	bl	10053ab4 <BLE_STACK_Init>
100502d0:	0003      	movs	r3, r0
100502d2:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
100502d4:	197b      	adds	r3, r7, r5
100502d6:	781b      	ldrb	r3, [r3, #0]
100502d8:	2b00      	cmp	r3, #0
100502da:	d001      	beq.n	100502e0 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
    Error_Handler();
100502dc:	f7f0 fbd0 	bl	10040a80 <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
100502e0:	213c      	movs	r1, #60	@ 0x3c
100502e2:	187b      	adds	r3, r7, r1
100502e4:	2234      	movs	r2, #52	@ 0x34
100502e6:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
100502e8:	187b      	adds	r3, r7, r1
100502ea:	2212      	movs	r2, #18
100502ec:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
100502ee:	187b      	adds	r3, r7, r1
100502f0:	222a      	movs	r2, #42	@ 0x2a
100502f2:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
100502f4:	187b      	adds	r3, r7, r1
100502f6:	22e1      	movs	r2, #225	@ 0xe1
100502f8:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
100502fa:	187b      	adds	r3, r7, r1
100502fc:	2208      	movs	r2, #8
100502fe:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
10050300:	187b      	adds	r3, r7, r1
10050302:	2200      	movs	r2, #0
10050304:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
10050306:	254d      	movs	r5, #77	@ 0x4d
10050308:	197c      	adds	r4, r7, r5
1005030a:	187b      	adds	r3, r7, r1
1005030c:	001a      	movs	r2, r3
1005030e:	2106      	movs	r1, #6
10050310:	2000      	movs	r0, #0
10050312:	f003 f8c7 	bl	100534a4 <aci_hal_write_config_data>
10050316:	0003      	movs	r3, r0
10050318:	7023      	strb	r3, [r4, #0]
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
1005031a:	197c      	adds	r4, r7, r5
1005031c:	211f      	movs	r1, #31
1005031e:	2000      	movs	r0, #0
10050320:	f003 f8c4 	bl	100534ac <aci_hal_set_tx_power_level>
10050324:	0003      	movs	r3, r0
10050326:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
10050328:	197c      	adds	r4, r7, r5
1005032a:	234a      	movs	r3, #74	@ 0x4a
1005032c:	18fb      	adds	r3, r7, r3
1005032e:	0019      	movs	r1, r3
10050330:	2001      	movs	r0, #1
10050332:	f7ff fc63 	bl	1004fbfc <aci_gatt_srv_profile_init>
10050336:	0003      	movs	r3, r0
10050338:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
1005033a:	214c      	movs	r1, #76	@ 0x4c
1005033c:	187b      	adds	r3, r7, r1
1005033e:	2200      	movs	r2, #0
10050340:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
10050342:	187b      	adds	r3, r7, r1
10050344:	187a      	adds	r2, r7, r1
10050346:	7812      	ldrb	r2, [r2, #0]
10050348:	2101      	movs	r1, #1
1005034a:	430a      	orrs	r2, r1
1005034c:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
1005034e:	197c      	adds	r4, r7, r5
10050350:	224f      	movs	r2, #79	@ 0x4f
10050352:	18bb      	adds	r3, r7, r2
10050354:	781b      	ldrb	r3, [r3, #0]
10050356:	2100      	movs	r1, #0
10050358:	0018      	movs	r0, r3
1005035a:	f002 febd 	bl	100530d8 <aci_gap_init>
1005035e:	0003      	movs	r3, r0
10050360:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
  }

  ret = aci_gap_profile_init(role, privacy_type,
10050362:	002e      	movs	r6, r5
10050364:	197c      	adds	r4, r7, r5
10050366:	2546      	movs	r5, #70	@ 0x46
10050368:	197d      	adds	r5, r7, r5
1005036a:	2348      	movs	r3, #72	@ 0x48
1005036c:	18fa      	adds	r2, r7, r3
1005036e:	204f      	movs	r0, #79	@ 0x4f
10050370:	183b      	adds	r3, r7, r0
10050372:	7819      	ldrb	r1, [r3, #0]
10050374:	234c      	movs	r3, #76	@ 0x4c
10050376:	18fb      	adds	r3, r7, r3
10050378:	7818      	ldrb	r0, [r3, #0]
1005037a:	2344      	movs	r3, #68	@ 0x44
1005037c:	18fb      	adds	r3, r7, r3
1005037e:	9300      	str	r3, [sp, #0]
10050380:	002b      	movs	r3, r5
10050382:	f7ff fad5 	bl	1004f930 <aci_gap_profile_init>
10050386:	0003      	movs	r3, r0
10050388:	7023      	strb	r3, [r4, #0]
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
1005038a:	0035      	movs	r5, r6
1005038c:	197c      	adds	r4, r7, r5
1005038e:	4b26      	ldr	r3, [pc, #152]	@ (10050428 <BLE_Init+0x1a4>)
10050390:	001a      	movs	r2, r3
10050392:	2119      	movs	r1, #25
10050394:	2000      	movs	r0, #0
10050396:	f7ff fb3d 	bl	1004fa14 <Gap_profile_set_dev_name>
1005039a:	0003      	movs	r3, r0
1005039c:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
1005039e:	197c      	adds	r4, r7, r5
100503a0:	233a      	movs	r3, #58	@ 0x3a
100503a2:	18fb      	adds	r3, r7, r3
100503a4:	001a      	movs	r2, r3
100503a6:	2102      	movs	r1, #2
100503a8:	2000      	movs	r0, #0
100503aa:	f7ff fb59 	bl	1004fa60 <Gap_profile_set_appearance>
100503ae:	0003      	movs	r3, r0
100503b0:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
100503b2:	4b1e      	ldr	r3, [pc, #120]	@ (1005042c <BLE_Init+0x1a8>)
100503b4:	2201      	movs	r2, #1
100503b6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
100503b8:	4b1c      	ldr	r3, [pc, #112]	@ (1005042c <BLE_Init+0x1a8>)
100503ba:	781b      	ldrb	r3, [r3, #0]
100503bc:	197c      	adds	r4, r7, r5
100503be:	0018      	movs	r0, r3
100503c0:	f7fd fb4e 	bl	1004da60 <aci_gap_set_io_capability>
100503c4:	0003      	movs	r3, r0
100503c6:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
100503c8:	4b18      	ldr	r3, [pc, #96]	@ (1005042c <BLE_Init+0x1a8>)
100503ca:	2201      	movs	r2, #1
100503cc:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
100503ce:	4b17      	ldr	r3, [pc, #92]	@ (1005042c <BLE_Init+0x1a8>)
100503d0:	2208      	movs	r2, #8
100503d2:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
100503d4:	4b15      	ldr	r3, [pc, #84]	@ (1005042c <BLE_Init+0x1a8>)
100503d6:	2210      	movs	r2, #16
100503d8:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
100503da:	4b14      	ldr	r3, [pc, #80]	@ (1005042c <BLE_Init+0x1a8>)
100503dc:	2201      	movs	r2, #1
100503de:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
100503e0:	4b12      	ldr	r3, [pc, #72]	@ (1005042c <BLE_Init+0x1a8>)
100503e2:	7898      	ldrb	r0, [r3, #2]
100503e4:	4b11      	ldr	r3, [pc, #68]	@ (1005042c <BLE_Init+0x1a8>)
100503e6:	7859      	ldrb	r1, [r3, #1]
100503e8:	4b10      	ldr	r3, [pc, #64]	@ (1005042c <BLE_Init+0x1a8>)
100503ea:	78db      	ldrb	r3, [r3, #3]
100503ec:	4a0f      	ldr	r2, [pc, #60]	@ (1005042c <BLE_Init+0x1a8>)
100503ee:	7912      	ldrb	r2, [r2, #4]
100503f0:	002e      	movs	r6, r5
100503f2:	197c      	adds	r4, r7, r5
100503f4:	2500      	movs	r5, #0
100503f6:	9502      	str	r5, [sp, #8]
100503f8:	9201      	str	r2, [sp, #4]
100503fa:	9300      	str	r3, [sp, #0]
100503fc:	2300      	movs	r3, #0
100503fe:	2201      	movs	r2, #1
10050400:	f7fd fb3e 	bl	1004da80 <aci_gap_set_security_requirements>
10050404:	0003      	movs	r3, r0
10050406:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
10050408:	4b08      	ldr	r3, [pc, #32]	@ (1005042c <BLE_Init+0x1a8>)
1005040a:	789b      	ldrb	r3, [r3, #2]
1005040c:	2b00      	cmp	r3, #0
1005040e:	d005      	beq.n	1005041c <BLE_Init+0x198>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
10050410:	19bc      	adds	r4, r7, r6
10050412:	2001      	movs	r0, #1
10050414:	f002 fe8a 	bl	1005312c <aci_gap_configure_filter_accept_and_resolving_list>
10050418:	0003      	movs	r3, r0
1005041a:	7023      	strb	r3, [r4, #0]
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");

}
1005041c:	46c0      	nop			@ (mov r8, r8)
1005041e:	46bd      	mov	sp, r7
10050420:	b015      	add	sp, #84	@ 0x54
10050422:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050424:	10067654 	.word	0x10067654
10050428:	10067f18 	.word	0x10067f18
1005042c:	20002320 	.word	0x20002320

10050430 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
10050430:	b580      	push	{r7, lr}
10050432:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10050434:	2101      	movs	r1, #1
10050436:	2001      	movs	r0, #1
10050438:	f002 fd60 	bl	10052efc <UTIL_SEQ_SetTask>
}
1005043c:	46c0      	nop			@ (mov r8, r8)
1005043e:	46bd      	mov	sp, r7
10050440:	bd80      	pop	{r7, pc}

10050442 <BLEStack_Process>:
static void BLEStack_Process(void)
{
10050442:	b580      	push	{r7, lr}
10050444:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10050446:	2001      	movs	r0, #1
10050448:	f002 fc1a 	bl	10052c80 <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
1005044c:	f003 fa4e 	bl	100538ec <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10050450:	2001      	movs	r0, #1
10050452:	f002 fc1f 	bl	10052c94 <APP_DEBUG_SIGNAL_RESET>
}
10050456:	46c0      	nop			@ (mov r8, r8)
10050458:	46bd      	mov	sp, r7
1005045a:	bd80      	pop	{r7, pc}

1005045c <VTimer_Process>:

void VTimer_Process(void)
{
1005045c:	b580      	push	{r7, lr}
1005045e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10050460:	f7f9 fd4a 	bl	10049ef8 <HAL_RADIO_TIMER_Tick>
}
10050464:	46c0      	nop			@ (mov r8, r8)
10050466:	46bd      	mov	sp, r7
10050468:	bd80      	pop	{r7, pc}

1005046a <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
1005046a:	b580      	push	{r7, lr}
1005046c:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
1005046e:	2100      	movs	r1, #0
10050470:	2002      	movs	r0, #2
10050472:	f002 fd43 	bl	10052efc <UTIL_SEQ_SetTask>
}
10050476:	46c0      	nop			@ (mov r8, r8)
10050478:	46bd      	mov	sp, r7
1005047a:	bd80      	pop	{r7, pc}

1005047c <NVM_Process>:
void NVM_Process(void)
{
1005047c:	b580      	push	{r7, lr}
1005047e:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10050480:	f7ff f9d0 	bl	1004f824 <NVMDB_Tick>
}
10050484:	46c0      	nop			@ (mov r8, r8)
10050486:	46bd      	mov	sp, r7
10050488:	bd80      	pop	{r7, pc}

1005048a <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
1005048a:	b580      	push	{r7, lr}
1005048c:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
1005048e:	2101      	movs	r1, #1
10050490:	2004      	movs	r0, #4
10050492:	f002 fd33 	bl	10052efc <UTIL_SEQ_SetTask>
}
10050496:	46c0      	nop			@ (mov r8, r8)
10050498:	46bd      	mov	sp, r7
1005049a:	bd80      	pop	{r7, pc}

1005049c <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
1005049c:	b580      	push	{r7, lr}
1005049e:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
100504a0:	f7ff ffe3 	bl	1005046a <VTimer_Process_Schedule>
}
100504a4:	46c0      	nop			@ (mov r8, r8)
100504a6:	46bd      	mov	sp, r7
100504a8:	bd80      	pop	{r7, pc}

100504aa <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
100504aa:	b580      	push	{r7, lr}
100504ac:	b082      	sub	sp, #8
100504ae:	af00      	add	r7, sp, #0
100504b0:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
100504b2:	687b      	ldr	r3, [r7, #4]
100504b4:	0018      	movs	r0, r3
100504b6:	f00e f91b 	bl	1005e6f0 <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
100504ba:	f7ff ffd6 	bl	1005046a <VTimer_Process_Schedule>
  NVM_Process_Schedule();
100504be:	f7ff ffe4 	bl	1005048a <NVM_Process_Schedule>
}
100504c2:	46c0      	nop			@ (mov r8, r8)
100504c4:	46bd      	mov	sp, r7
100504c6:	b002      	add	sp, #8
100504c8:	bd80      	pop	{r7, pc}

100504ca <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
100504ca:	b580      	push	{r7, lr}
100504cc:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
100504ce:	f7ff ffaf 	bl	10050430 <BLEStack_Process_Schedule>
}
100504d2:	46c0      	nop			@ (mov r8, r8)
100504d4:	46bd      	mov	sp, r7
100504d6:	bd80      	pop	{r7, pc}

100504d8 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
100504d8:	b580      	push	{r7, lr}
100504da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
100504dc:	4b12      	ldr	r3, [pc, #72]	@ (10050528 <APP_BLE_Init+0x50>)
100504de:	001a      	movs	r2, r3
100504e0:	2100      	movs	r1, #0
100504e2:	2001      	movs	r0, #1
100504e4:	f002 fce6 	bl	10052eb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
100504e8:	4b10      	ldr	r3, [pc, #64]	@ (1005052c <APP_BLE_Init+0x54>)
100504ea:	001a      	movs	r2, r3
100504ec:	2100      	movs	r1, #0
100504ee:	2002      	movs	r0, #2
100504f0:	f002 fce0 	bl	10052eb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
100504f4:	4b0e      	ldr	r3, [pc, #56]	@ (10050530 <APP_BLE_Init+0x58>)
100504f6:	001a      	movs	r2, r3
100504f8:	2100      	movs	r1, #0
100504fa:	2004      	movs	r0, #4
100504fc:	f002 fcda 	bl	10052eb4 <UTIL_SEQ_RegTask>
  ModulesInit();
10050500:	f7ff feb2 	bl	10050268 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10050504:	f7ff febe 	bl	10050284 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10050508:	4b0a      	ldr	r3, [pc, #40]	@ (10050534 <APP_BLE_Init+0x5c>)
1005050a:	2200      	movs	r2, #0
1005050c:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
1005050e:	4b09      	ldr	r3, [pc, #36]	@ (10050534 <APP_BLE_Init+0x5c>)
10050510:	2201      	movs	r2, #1
10050512:	4252      	negs	r2, r2
10050514:	819a      	strh	r2, [r3, #12]
  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
  APP_DBG_MSG("Services and Characteristics creation\n");
  USART_APP_Init();
10050516:	f000 fc81 	bl	10050e1c <USART_APP_Init>
  APP_DBG_MSG("\n");

  /* USER CODE BEGIN APP_BLE_Init_3 */

    /* Start to Advertise to accept a connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
1005051a:	2001      	movs	r0, #1
1005051c:	f000 f9ac 	bl	10050878 <APP_BLE_Procedure_Gap_Peripheral>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
10050520:	46c0      	nop			@ (mov r8, r8)
}
10050522:	46bd      	mov	sp, r7
10050524:	bd80      	pop	{r7, pc}
10050526:	46c0      	nop			@ (mov r8, r8)
10050528:	10050443 	.word	0x10050443
1005052c:	1005045d 	.word	0x1005045d
10050530:	1005047d 	.word	0x1005047d
10050534:	20002320 	.word	0x20002320

10050538 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10050538:	b5f0      	push	{r4, r5, r6, r7, lr}
1005053a:	b099      	sub	sp, #100	@ 0x64
1005053c:	af04      	add	r7, sp, #16
1005053e:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
10050540:	234b      	movs	r3, #75	@ 0x4b
10050542:	18fb      	adds	r3, r7, r3
10050544:	2286      	movs	r2, #134	@ 0x86
10050546:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
10050548:	687b      	ldr	r3, [r7, #4]
1005054a:	781b      	ldrb	r3, [r3, #0]
1005054c:	2b04      	cmp	r3, #4
1005054e:	d004      	beq.n	1005055a <BLEEVT_App_Notification+0x22>
10050550:	687b      	ldr	r3, [r7, #4]
10050552:	781b      	ldrb	r3, [r3, #0]
10050554:	2b82      	cmp	r3, #130	@ 0x82
10050556:	d000      	beq.n	1005055a <BLEEVT_App_Notification+0x22>
10050558:	e132      	b.n	100507c0 <BLEEVT_App_Notification+0x288>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
1005055a:	687b      	ldr	r3, [r7, #4]
1005055c:	3301      	adds	r3, #1
1005055e:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10050560:	687b      	ldr	r3, [r7, #4]
10050562:	781b      	ldrb	r3, [r3, #0]
10050564:	2b04      	cmp	r3, #4
10050566:	d103      	bne.n	10050570 <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10050568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1005056a:	3302      	adds	r3, #2
1005056c:	64fb      	str	r3, [r7, #76]	@ 0x4c
1005056e:	e005      	b.n	1005057c <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10050570:	687b      	ldr	r3, [r7, #4]
10050572:	3301      	adds	r3, #1
10050574:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10050576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10050578:	3303      	adds	r3, #3
1005057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
1005057c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1005057e:	781b      	ldrb	r3, [r3, #0]
10050580:	2bff      	cmp	r3, #255	@ 0xff
10050582:	d100      	bne.n	10050586 <BLEEVT_App_Notification+0x4e>
10050584:	e0a4      	b.n	100506d0 <BLEEVT_App_Notification+0x198>
10050586:	dd00      	ble.n	1005058a <BLEEVT_App_Notification+0x52>
10050588:	e11c      	b.n	100507c4 <BLEEVT_App_Notification+0x28c>
1005058a:	2b3e      	cmp	r3, #62	@ 0x3e
1005058c:	d02d      	beq.n	100505ea <BLEEVT_App_Notification+0xb2>
1005058e:	dd00      	ble.n	10050592 <BLEEVT_App_Notification+0x5a>
10050590:	e118      	b.n	100507c4 <BLEEVT_App_Notification+0x28c>
10050592:	2b05      	cmp	r3, #5
10050594:	d003      	beq.n	1005059e <BLEEVT_App_Notification+0x66>
10050596:	2b10      	cmp	r3, #16
10050598:	d100      	bne.n	1005059c <BLEEVT_App_Notification+0x64>
1005059a:	e108      	b.n	100507ae <BLEEVT_App_Notification+0x276>

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/

    /* USER CODE END ECODE_DEFAULT*/
    break;
1005059c:	e112      	b.n	100507c4 <BLEEVT_App_Notification+0x28c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
1005059e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100505a0:	3302      	adds	r3, #2
100505a2:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
100505a4:	68fb      	ldr	r3, [r7, #12]
100505a6:	785a      	ldrb	r2, [r3, #1]
100505a8:	789b      	ldrb	r3, [r3, #2]
100505aa:	021b      	lsls	r3, r3, #8
100505ac:	4313      	orrs	r3, r2
100505ae:	b29a      	uxth	r2, r3
100505b0:	4b87      	ldr	r3, [pc, #540]	@ (100507d0 <BLEEVT_App_Notification+0x298>)
100505b2:	899b      	ldrh	r3, [r3, #12]
100505b4:	429a      	cmp	r2, r3
100505b6:	d106      	bne.n	100505c6 <BLEEVT_App_Notification+0x8e>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
100505b8:	4b85      	ldr	r3, [pc, #532]	@ (100507d0 <BLEEVT_App_Notification+0x298>)
100505ba:	2201      	movs	r2, #1
100505bc:	4252      	negs	r2, r2
100505be:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
100505c0:	4b83      	ldr	r3, [pc, #524]	@ (100507d0 <BLEEVT_App_Notification+0x298>)
100505c2:	2200      	movs	r2, #0
100505c4:	739a      	strb	r2, [r3, #14]
      gap_cmd_resp_release();
100505c6:	f000 fa2b 	bl	10050a20 <gap_cmd_resp_release>
      USARTHandleNotification.EvtOpcode = USART_DISCON_HANDLE_EVT;
100505ca:	4b82      	ldr	r3, [pc, #520]	@ (100507d4 <BLEEVT_App_Notification+0x29c>)
100505cc:	2201      	movs	r2, #1
100505ce:	701a      	strb	r2, [r3, #0]
      USARTHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
100505d0:	68fb      	ldr	r3, [r7, #12]
100505d2:	785a      	ldrb	r2, [r3, #1]
100505d4:	789b      	ldrb	r3, [r3, #2]
100505d6:	021b      	lsls	r3, r3, #8
100505d8:	4313      	orrs	r3, r2
100505da:	b29a      	uxth	r2, r3
100505dc:	4b7d      	ldr	r3, [pc, #500]	@ (100507d4 <BLEEVT_App_Notification+0x29c>)
100505de:	805a      	strh	r2, [r3, #2]
      USART_APP_EvtRx(&USARTHandleNotification);
100505e0:	4b7c      	ldr	r3, [pc, #496]	@ (100507d4 <BLEEVT_App_Notification+0x29c>)
100505e2:	0018      	movs	r0, r3
100505e4:	f000 fbfc 	bl	10050de0 <USART_APP_EvtRx>
    break;
100505e8:	e0ef      	b.n	100507ca <BLEEVT_App_Notification+0x292>
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
100505ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100505ec:	3302      	adds	r3, #2
100505ee:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_meta_evt->subevent)
100505f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100505f2:	781b      	ldrb	r3, [r3, #0]
100505f4:	2b0c      	cmp	r3, #12
100505f6:	d00b      	beq.n	10050610 <BLEEVT_App_Notification+0xd8>
100505f8:	dc68      	bgt.n	100506cc <BLEEVT_App_Notification+0x194>
100505fa:	2b0a      	cmp	r3, #10
100505fc:	d00e      	beq.n	1005061c <BLEEVT_App_Notification+0xe4>
100505fe:	dc65      	bgt.n	100506cc <BLEEVT_App_Notification+0x194>
10050600:	2b01      	cmp	r3, #1
10050602:	d037      	beq.n	10050674 <BLEEVT_App_Notification+0x13c>
10050604:	2b03      	cmp	r3, #3
10050606:	d161      	bne.n	100506cc <BLEEVT_App_Notification+0x194>
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
10050608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005060a:	3301      	adds	r3, #1
1005060c:	61bb      	str	r3, [r7, #24]
        break;
1005060e:	e05e      	b.n	100506ce <BLEEVT_App_Notification+0x196>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
10050610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050612:	3301      	adds	r3, #1
10050614:	623b      	str	r3, [r7, #32]
          gap_cmd_resp_release();
10050616:	f000 fa03 	bl	10050a20 <gap_cmd_resp_release>
        break;
1005061a:	e058      	b.n	100506ce <BLEEVT_App_Notification+0x196>
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
1005061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005061e:	3301      	adds	r3, #1
10050620:	61fb      	str	r3, [r7, #28]
          connection_complete_event(p_enhanced_conn_complete->Status,
10050622:	69fb      	ldr	r3, [r7, #28]
10050624:	781c      	ldrb	r4, [r3, #0]
10050626:	69fb      	ldr	r3, [r7, #28]
10050628:	785a      	ldrb	r2, [r3, #1]
1005062a:	789b      	ldrb	r3, [r3, #2]
1005062c:	021b      	lsls	r3, r3, #8
1005062e:	4313      	orrs	r3, r2
10050630:	b29d      	uxth	r5, r3
10050632:	69fb      	ldr	r3, [r7, #28]
10050634:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Peer_Address,
10050636:	69fb      	ldr	r3, [r7, #28]
10050638:	3305      	adds	r3, #5
1005063a:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
1005063c:	69fb      	ldr	r3, [r7, #28]
1005063e:	7dda      	ldrb	r2, [r3, #23]
10050640:	7e1b      	ldrb	r3, [r3, #24]
10050642:	021b      	lsls	r3, r3, #8
10050644:	4313      	orrs	r3, r2
10050646:	b29a      	uxth	r2, r3
10050648:	69fb      	ldr	r3, [r7, #28]
1005064a:	7e59      	ldrb	r1, [r3, #25]
1005064c:	7e9b      	ldrb	r3, [r3, #26]
1005064e:	021b      	lsls	r3, r3, #8
10050650:	430b      	orrs	r3, r1
10050652:	b299      	uxth	r1, r3
10050654:	69fb      	ldr	r3, [r7, #28]
10050656:	7ed8      	ldrb	r0, [r3, #27]
10050658:	7f1b      	ldrb	r3, [r3, #28]
1005065a:	021b      	lsls	r3, r3, #8
1005065c:	4303      	orrs	r3, r0
1005065e:	b29b      	uxth	r3, r3
10050660:	9302      	str	r3, [sp, #8]
10050662:	9101      	str	r1, [sp, #4]
10050664:	9200      	str	r2, [sp, #0]
10050666:	4663      	mov	r3, ip
10050668:	0032      	movs	r2, r6
1005066a:	0029      	movs	r1, r5
1005066c:	0020      	movs	r0, r4
1005066e:	f000 f8bf 	bl	100507f0 <connection_complete_event>
        break;
10050672:	e02c      	b.n	100506ce <BLEEVT_App_Notification+0x196>
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
10050674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050676:	3301      	adds	r3, #1
10050678:	617b      	str	r3, [r7, #20]
          connection_complete_event(p_conn_complete->Status,
1005067a:	697b      	ldr	r3, [r7, #20]
1005067c:	781c      	ldrb	r4, [r3, #0]
1005067e:	697b      	ldr	r3, [r7, #20]
10050680:	785a      	ldrb	r2, [r3, #1]
10050682:	789b      	ldrb	r3, [r3, #2]
10050684:	021b      	lsls	r3, r3, #8
10050686:	4313      	orrs	r3, r2
10050688:	b29d      	uxth	r5, r3
1005068a:	697b      	ldr	r3, [r7, #20]
1005068c:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Peer_Address,
1005068e:	697b      	ldr	r3, [r7, #20]
10050690:	3305      	adds	r3, #5
10050692:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
10050694:	697b      	ldr	r3, [r7, #20]
10050696:	7ada      	ldrb	r2, [r3, #11]
10050698:	7b1b      	ldrb	r3, [r3, #12]
1005069a:	021b      	lsls	r3, r3, #8
1005069c:	4313      	orrs	r3, r2
1005069e:	b29a      	uxth	r2, r3
100506a0:	697b      	ldr	r3, [r7, #20]
100506a2:	7b59      	ldrb	r1, [r3, #13]
100506a4:	7b9b      	ldrb	r3, [r3, #14]
100506a6:	021b      	lsls	r3, r3, #8
100506a8:	430b      	orrs	r3, r1
100506aa:	b299      	uxth	r1, r3
100506ac:	697b      	ldr	r3, [r7, #20]
100506ae:	7bd8      	ldrb	r0, [r3, #15]
100506b0:	7c1b      	ldrb	r3, [r3, #16]
100506b2:	021b      	lsls	r3, r3, #8
100506b4:	4303      	orrs	r3, r0
100506b6:	b29b      	uxth	r3, r3
100506b8:	9302      	str	r3, [sp, #8]
100506ba:	9101      	str	r1, [sp, #4]
100506bc:	9200      	str	r2, [sp, #0]
100506be:	4663      	mov	r3, ip
100506c0:	0032      	movs	r2, r6
100506c2:	0029      	movs	r1, r5
100506c4:	0020      	movs	r0, r4
100506c6:	f000 f893 	bl	100507f0 <connection_complete_event>
        break;
100506ca:	e000      	b.n	100506ce <BLEEVT_App_Notification+0x196>
        break;
100506cc:	46c0      	nop			@ (mov r8, r8)
    break;
100506ce:	e07c      	b.n	100507ca <BLEEVT_App_Notification+0x292>
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
100506d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100506d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
100506d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100506d6:	781a      	ldrb	r2, [r3, #0]
100506d8:	785b      	ldrb	r3, [r3, #1]
100506da:	021b      	lsls	r3, r3, #8
100506dc:	4313      	orrs	r3, r2
100506de:	b29b      	uxth	r3, r3
100506e0:	4a3d      	ldr	r2, [pc, #244]	@ (100507d8 <BLEEVT_App_Notification+0x2a0>)
100506e2:	4293      	cmp	r3, r2
100506e4:	d03b      	beq.n	1005075e <BLEEVT_App_Notification+0x226>
100506e6:	4a3c      	ldr	r2, [pc, #240]	@ (100507d8 <BLEEVT_App_Notification+0x2a0>)
100506e8:	4293      	cmp	r3, r2
100506ea:	dc5a      	bgt.n	100507a2 <BLEEVT_App_Notification+0x26a>
100506ec:	2280      	movs	r2, #128	@ 0x80
100506ee:	0112      	lsls	r2, r2, #4
100506f0:	4293      	cmp	r3, r2
100506f2:	d01c      	beq.n	1005072e <BLEEVT_App_Notification+0x1f6>
100506f4:	2280      	movs	r2, #128	@ 0x80
100506f6:	0112      	lsls	r2, r2, #4
100506f8:	4293      	cmp	r3, r2
100506fa:	dc52      	bgt.n	100507a2 <BLEEVT_App_Notification+0x26a>
100506fc:	4a37      	ldr	r2, [pc, #220]	@ (100507dc <BLEEVT_App_Notification+0x2a4>)
100506fe:	4293      	cmp	r3, r2
10050700:	d051      	beq.n	100507a6 <BLEEVT_App_Notification+0x26e>
10050702:	4a36      	ldr	r2, [pc, #216]	@ (100507dc <BLEEVT_App_Notification+0x2a4>)
10050704:	4293      	cmp	r3, r2
10050706:	dc4c      	bgt.n	100507a2 <BLEEVT_App_Notification+0x26a>
10050708:	4a35      	ldr	r2, [pc, #212]	@ (100507e0 <BLEEVT_App_Notification+0x2a8>)
1005070a:	4293      	cmp	r3, r2
1005070c:	d013      	beq.n	10050736 <BLEEVT_App_Notification+0x1fe>
1005070e:	2281      	movs	r2, #129	@ 0x81
10050710:	00d2      	lsls	r2, r2, #3
10050712:	4293      	cmp	r3, r2
10050714:	da45      	bge.n	100507a2 <BLEEVT_App_Notification+0x26a>
10050716:	4a33      	ldr	r2, [pc, #204]	@ (100507e4 <BLEEVT_App_Notification+0x2ac>)
10050718:	4293      	cmp	r3, r2
1005071a:	d010      	beq.n	1005073e <BLEEVT_App_Notification+0x206>
1005071c:	4a31      	ldr	r2, [pc, #196]	@ (100507e4 <BLEEVT_App_Notification+0x2ac>)
1005071e:	4293      	cmp	r3, r2
10050720:	dc3f      	bgt.n	100507a2 <BLEEVT_App_Notification+0x26a>
10050722:	2b04      	cmp	r3, #4
10050724:	d041      	beq.n	100507aa <BLEEVT_App_Notification+0x272>
10050726:	4a30      	ldr	r2, [pc, #192]	@ (100507e8 <BLEEVT_App_Notification+0x2b0>)
10050728:	4293      	cmp	r3, r2
1005072a:	d014      	beq.n	10050756 <BLEEVT_App_Notification+0x21e>
        break;
1005072c:	e039      	b.n	100507a2 <BLEEVT_App_Notification+0x26a>
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
1005072e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050730:	3302      	adds	r3, #2
10050732:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10050734:	e03a      	b.n	100507ac <BLEEVT_App_Notification+0x274>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
10050736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050738:	3302      	adds	r3, #2
1005073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
1005073c:	e036      	b.n	100507ac <BLEEVT_App_Notification+0x274>
          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
1005073e:	4b24      	ldr	r3, [pc, #144]	@ (100507d0 <BLEEVT_App_Notification+0x298>)
10050740:	899b      	ldrh	r3, [r3, #12]
10050742:	224b      	movs	r2, #75	@ 0x4b
10050744:	18bc      	adds	r4, r7, r2
10050746:	4a29      	ldr	r2, [pc, #164]	@ (100507ec <BLEEVT_App_Notification+0x2b4>)
10050748:	0011      	movs	r1, r2
1005074a:	0018      	movs	r0, r3
1005074c:	f7fd f9c7 	bl	1004dade <aci_gap_passkey_resp>
10050750:	0003      	movs	r3, r0
10050752:	7023      	strb	r3, [r4, #0]
        break;
10050754:	e02a      	b.n	100507ac <BLEEVT_App_Notification+0x274>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
10050756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050758:	3302      	adds	r3, #2
1005075a:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
1005075c:	e026      	b.n	100507ac <BLEEVT_App_Notification+0x274>
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
1005075e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050760:	3302      	adds	r3, #2
10050762:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
10050764:	2437      	movs	r4, #55	@ 0x37
10050766:	193b      	adds	r3, r7, r4
10050768:	2208      	movs	r2, #8
1005076a:	701a      	strb	r2, [r3, #0]
          aci_gatt_srv_resp(p_read->Connection_Handle,
1005076c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005076e:	781a      	ldrb	r2, [r3, #0]
10050770:	785b      	ldrb	r3, [r3, #1]
10050772:	021b      	lsls	r3, r3, #8
10050774:	4313      	orrs	r3, r2
10050776:	b298      	uxth	r0, r3
10050778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005077a:	789a      	ldrb	r2, [r3, #2]
1005077c:	78db      	ldrb	r3, [r3, #3]
1005077e:	021b      	lsls	r3, r3, #8
10050780:	4313      	orrs	r3, r2
10050782:	b299      	uxth	r1, r3
10050784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050786:	791a      	ldrb	r2, [r3, #4]
10050788:	795b      	ldrb	r3, [r3, #5]
1005078a:	021b      	lsls	r3, r3, #8
1005078c:	4313      	orrs	r3, r2
1005078e:	b29a      	uxth	r2, r3
10050790:	193b      	adds	r3, r7, r4
10050792:	781b      	ldrb	r3, [r3, #0]
10050794:	2400      	movs	r4, #0
10050796:	9401      	str	r4, [sp, #4]
10050798:	2400      	movs	r4, #0
1005079a:	9400      	str	r4, [sp, #0]
1005079c:	f7fd f9ec 	bl	1004db78 <aci_gatt_srv_resp>
          break;
100507a0:	e004      	b.n	100507ac <BLEEVT_App_Notification+0x274>
        break;
100507a2:	46c0      	nop			@ (mov r8, r8)
100507a4:	e011      	b.n	100507ca <BLEEVT_App_Notification+0x292>
        break;
100507a6:	46c0      	nop			@ (mov r8, r8)
100507a8:	e00f      	b.n	100507ca <BLEEVT_App_Notification+0x292>
        break;
100507aa:	46c0      	nop			@ (mov r8, r8)
    break;
100507ac:	e00d      	b.n	100507ca <BLEEVT_App_Notification+0x292>
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
100507ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100507b0:	3302      	adds	r3, #2
100507b2:	613b      	str	r3, [r7, #16]
      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
100507b4:	693b      	ldr	r3, [r7, #16]
100507b6:	781b      	ldrb	r3, [r3, #0]
100507b8:	2b03      	cmp	r3, #3
100507ba:	d805      	bhi.n	100507c8 <BLEEVT_App_Notification+0x290>
        NVIC_SystemReset();
100507bc:	f7ff fd42 	bl	10050244 <__NVIC_SystemReset>
    return;
100507c0:	46c0      	nop			@ (mov r8, r8)
100507c2:	e002      	b.n	100507ca <BLEEVT_App_Notification+0x292>
    break;
100507c4:	46c0      	nop			@ (mov r8, r8)
100507c6:	e000      	b.n	100507ca <BLEEVT_App_Notification+0x292>
    break;
100507c8:	46c0      	nop			@ (mov r8, r8)
  }
}
100507ca:	46bd      	mov	sp, r7
100507cc:	b015      	add	sp, #84	@ 0x54
100507ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100507d0:	20002320 	.word	0x20002320
100507d4:	20002330 	.word	0x20002330
100507d8:	00000c19 	.word	0x00000c19
100507dc:	0000040a 	.word	0x0000040a
100507e0:	00000407 	.word	0x00000407
100507e4:	00000402 	.word	0x00000402
100507e8:	00000401 	.word	0x00000401
100507ec:	0001b207 	.word	0x0001b207

100507f0 <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
100507f0:	b590      	push	{r4, r7, lr}
100507f2:	b083      	sub	sp, #12
100507f4:	af00      	add	r7, sp, #0
100507f6:	0004      	movs	r4, r0
100507f8:	0008      	movs	r0, r1
100507fa:	0011      	movs	r1, r2
100507fc:	603b      	str	r3, [r7, #0]
100507fe:	1dfb      	adds	r3, r7, #7
10050800:	1c22      	adds	r2, r4, #0
10050802:	701a      	strb	r2, [r3, #0]
10050804:	1d3b      	adds	r3, r7, #4
10050806:	1c02      	adds	r2, r0, #0
10050808:	801a      	strh	r2, [r3, #0]
1005080a:	1dbb      	adds	r3, r7, #6
1005080c:	1c0a      	adds	r2, r1, #0
1005080e:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
10050810:	1dfb      	adds	r3, r7, #7
10050812:	781b      	ldrb	r3, [r3, #0]
10050814:	2b00      	cmp	r3, #0
10050816:	d003      	beq.n	10050820 <connection_complete_event+0x30>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10050818:	4b10      	ldr	r3, [pc, #64]	@ (1005085c <connection_complete_event+0x6c>)
1005081a:	2200      	movs	r2, #0
1005081c:	739a      	strb	r2, [r3, #14]
    return;
1005081e:	e019      	b.n	10050854 <connection_complete_event+0x64>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
10050820:	4b0e      	ldr	r3, [pc, #56]	@ (1005085c <connection_complete_event+0x6c>)
10050822:	7b9b      	ldrb	r3, [r3, #14]
10050824:	2b01      	cmp	r3, #1
10050826:	d103      	bne.n	10050830 <connection_complete_event+0x40>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
10050828:	4b0c      	ldr	r3, [pc, #48]	@ (1005085c <connection_complete_event+0x6c>)
1005082a:	2203      	movs	r2, #3
1005082c:	739a      	strb	r2, [r3, #14]
1005082e:	e002      	b.n	10050836 <connection_complete_event+0x46>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
10050830:	4b0a      	ldr	r3, [pc, #40]	@ (1005085c <connection_complete_event+0x6c>)
10050832:	2202      	movs	r2, #2
10050834:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
10050836:	4b09      	ldr	r3, [pc, #36]	@ (1005085c <connection_complete_event+0x6c>)
10050838:	1d3a      	adds	r2, r7, #4
1005083a:	8812      	ldrh	r2, [r2, #0]
1005083c:	819a      	strh	r2, [r3, #12]

  USARTHandleNotification.EvtOpcode = USART_CONN_HANDLE_EVT;
1005083e:	4b08      	ldr	r3, [pc, #32]	@ (10050860 <connection_complete_event+0x70>)
10050840:	2200      	movs	r2, #0
10050842:	701a      	strb	r2, [r3, #0]
  USARTHandleNotification.ConnectionHandle = Connection_Handle;
10050844:	4b06      	ldr	r3, [pc, #24]	@ (10050860 <connection_complete_event+0x70>)
10050846:	1d3a      	adds	r2, r7, #4
10050848:	8812      	ldrh	r2, [r2, #0]
1005084a:	805a      	strh	r2, [r3, #2]
  USART_APP_EvtRx(&USARTHandleNotification);
1005084c:	4b04      	ldr	r3, [pc, #16]	@ (10050860 <connection_complete_event+0x70>)
1005084e:	0018      	movs	r0, r3
10050850:	f000 fac6 	bl	10050de0 <USART_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
10050854:	46bd      	mov	sp, r7
10050856:	b003      	add	sp, #12
10050858:	bd90      	pop	{r4, r7, pc}
1005085a:	46c0      	nop			@ (mov r8, r8)
1005085c:	20002320 	.word	0x20002320
10050860:	20002330 	.word	0x20002330

10050864 <APP_BLE_Get_Server_Connection_Status>:
/* USER CODE BEGIN EVT_VENDOR_3 */

/* USER CODE END EVT_VENDOR_3 */

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
10050864:	b580      	push	{r7, lr}
10050866:	af00      	add	r7, sp, #0
  return bleAppContext.Device_Connection_Status;
10050868:	4b02      	ldr	r3, [pc, #8]	@ (10050874 <APP_BLE_Get_Server_Connection_Status+0x10>)
1005086a:	7b9b      	ldrb	r3, [r3, #14]
}
1005086c:	0018      	movs	r0, r3
1005086e:	46bd      	mov	sp, r7
10050870:	bd80      	pop	{r7, pc}
10050872:	46c0      	nop			@ (mov r8, r8)
10050874:	20002320 	.word	0x20002320

10050878 <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
10050878:	b5b0      	push	{r4, r5, r7, lr}
1005087a:	b094      	sub	sp, #80	@ 0x50
1005087c:	af0c      	add	r7, sp, #48	@ 0x30
1005087e:	0002      	movs	r2, r0
10050880:	1dfb      	adds	r3, r7, #7
10050882:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
10050884:	2380      	movs	r3, #128	@ 0x80
10050886:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
10050888:	23a0      	movs	r3, #160	@ 0xa0
1005088a:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
1005088c:	1dfb      	adds	r3, r7, #7
1005088e:	781b      	ldrb	r3, [r3, #0]
10050890:	2b05      	cmp	r3, #5
10050892:	d834      	bhi.n	100508fe <APP_BLE_Procedure_Gap_Peripheral+0x86>
10050894:	009a      	lsls	r2, r3, #2
10050896:	4b5f      	ldr	r3, [pc, #380]	@ (10050a14 <APP_BLE_Procedure_Gap_Peripheral+0x19c>)
10050898:	18d3      	adds	r3, r2, r3
1005089a:	681b      	ldr	r3, [r3, #0]
1005089c:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
1005089e:	2380      	movs	r3, #128	@ 0x80
100508a0:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
100508a2:	23a0      	movs	r3, #160	@ 0xa0
100508a4:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
100508a6:	2304      	movs	r3, #4
100508a8:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
100508aa:	e02b      	b.n	10050904 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
100508ac:	23c8      	movs	r3, #200	@ 0xc8
100508ae:	00db      	lsls	r3, r3, #3
100508b0:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
100508b2:	23fa      	movs	r3, #250	@ 0xfa
100508b4:	011b      	lsls	r3, r3, #4
100508b6:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
100508b8:	2305      	movs	r3, #5
100508ba:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
100508bc:	e022      	b.n	10050904 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
100508be:	2300      	movs	r3, #0
100508c0:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
100508c2:	e01f      	b.n	10050904 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
100508c4:	23c8      	movs	r3, #200	@ 0xc8
100508c6:	009b      	lsls	r3, r3, #2
100508c8:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
100508ca:	23c8      	movs	r3, #200	@ 0xc8
100508cc:	009b      	lsls	r3, r3, #2
100508ce:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
100508d0:	2300      	movs	r3, #0
100508d2:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
100508d4:	23fa      	movs	r3, #250	@ 0xfa
100508d6:	005b      	lsls	r3, r3, #1
100508d8:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */

      /* USER CODE END CONN_PARAM_UPDATE */
      break;
100508da:	e013      	b.n	10050904 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
100508dc:	4b4e      	ldr	r3, [pc, #312]	@ (10050a18 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
100508de:	899b      	ldrh	r3, [r3, #12]
100508e0:	250f      	movs	r5, #15
100508e2:	197c      	adds	r4, r7, r5
100508e4:	2113      	movs	r1, #19
100508e6:	0018      	movs	r0, r3
100508e8:	f7fd f8a4 	bl	1004da34 <aci_gap_terminate>
100508ec:	0003      	movs	r3, r0
100508ee:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
100508f0:	197b      	adds	r3, r7, r5
100508f2:	781b      	ldrb	r3, [r3, #0]
100508f4:	2b00      	cmp	r3, #0
100508f6:	d104      	bne.n	10050902 <APP_BLE_Procedure_Gap_Peripheral+0x8a>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
      }
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
100508f8:	f000 f89a 	bl	10050a30 <gap_cmd_resp_wait>
      }
      break;
100508fc:	e001      	b.n	10050902 <APP_BLE_Procedure_Gap_Peripheral+0x8a>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
100508fe:	46c0      	nop			@ (mov r8, r8)
10050900:	e000      	b.n	10050904 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
      break;
10050902:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
10050904:	1dfb      	adds	r3, r7, #7
10050906:	781b      	ldrb	r3, [r3, #0]
10050908:	2b06      	cmp	r3, #6
1005090a:	d100      	bne.n	1005090e <APP_BLE_Procedure_Gap_Peripheral+0x96>
1005090c:	e078      	b.n	10050a00 <APP_BLE_Procedure_Gap_Peripheral+0x188>
1005090e:	dd00      	ble.n	10050912 <APP_BLE_Procedure_Gap_Peripheral+0x9a>
10050910:	e078      	b.n	10050a04 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10050912:	2b04      	cmp	r3, #4
10050914:	d061      	beq.n	100509da <APP_BLE_Procedure_Gap_Peripheral+0x162>
10050916:	dd00      	ble.n	1005091a <APP_BLE_Procedure_Gap_Peripheral+0xa2>
10050918:	e074      	b.n	10050a04 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
1005091a:	2b01      	cmp	r3, #1
1005091c:	dc02      	bgt.n	10050924 <APP_BLE_Procedure_Gap_Peripheral+0xac>
1005091e:	2b00      	cmp	r3, #0
10050920:	da03      	bge.n	1005092a <APP_BLE_Procedure_Gap_Peripheral+0xb2>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
10050922:	e06f      	b.n	10050a04 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
  switch(ProcGapPeripheralId)
10050924:	2b02      	cmp	r3, #2
10050926:	d046      	beq.n	100509b6 <APP_BLE_Procedure_Gap_Peripheral+0x13e>
      break;
10050928:	e06c      	b.n	10050a04 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
1005092a:	2308      	movs	r3, #8
1005092c:	18fb      	adds	r3, r7, r3
1005092e:	0018      	movs	r0, r3
10050930:	2306      	movs	r3, #6
10050932:	001a      	movs	r2, r3
10050934:	2100      	movs	r1, #0
10050936:	f015 fdb3 	bl	100664a0 <memset>
      status = aci_gap_set_advertising_configuration(0,
1005093a:	250f      	movs	r5, #15
1005093c:	197c      	adds	r4, r7, r5
1005093e:	69fa      	ldr	r2, [r7, #28]
10050940:	2300      	movs	r3, #0
10050942:	930a      	str	r3, [sp, #40]	@ 0x28
10050944:	2300      	movs	r3, #0
10050946:	9309      	str	r3, [sp, #36]	@ 0x24
10050948:	2301      	movs	r3, #1
1005094a:	9308      	str	r3, [sp, #32]
1005094c:	2300      	movs	r3, #0
1005094e:	9307      	str	r3, [sp, #28]
10050950:	2301      	movs	r3, #1
10050952:	9306      	str	r3, [sp, #24]
10050954:	2300      	movs	r3, #0
10050956:	9305      	str	r3, [sp, #20]
10050958:	2300      	movs	r3, #0
1005095a:	9304      	str	r3, [sp, #16]
1005095c:	2300      	movs	r3, #0
1005095e:	9303      	str	r3, [sp, #12]
10050960:	2300      	movs	r3, #0
10050962:	9302      	str	r3, [sp, #8]
10050964:	2307      	movs	r3, #7
10050966:	9301      	str	r3, [sp, #4]
10050968:	69bb      	ldr	r3, [r7, #24]
1005096a:	9300      	str	r3, [sp, #0]
1005096c:	0013      	movs	r3, r2
1005096e:	2213      	movs	r2, #19
10050970:	2102      	movs	r1, #2
10050972:	2000      	movs	r0, #0
10050974:	f002 fc06 	bl	10053184 <aci_gap_set_advertising_configuration>
10050978:	0003      	movs	r3, r0
1005097a:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1005097c:	197b      	adds	r3, r7, r5
1005097e:	781b      	ldrb	r3, [r3, #0]
10050980:	2b00      	cmp	r3, #0
10050982:	d103      	bne.n	1005098c <APP_BLE_Procedure_Gap_Peripheral+0x114>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10050984:	697b      	ldr	r3, [r7, #20]
10050986:	b2da      	uxtb	r2, r3
10050988:	4b23      	ldr	r3, [pc, #140]	@ (10050a18 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1005098a:	739a      	strb	r2, [r3, #14]
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
1005098c:	250f      	movs	r5, #15
1005098e:	197c      	adds	r4, r7, r5
10050990:	4b22      	ldr	r3, [pc, #136]	@ (10050a1c <APP_BLE_Procedure_Gap_Peripheral+0x1a4>)
10050992:	2210      	movs	r2, #16
10050994:	2103      	movs	r1, #3
10050996:	2000      	movs	r0, #0
10050998:	f002 fc29 	bl	100531ee <aci_gap_set_advertising_data>
1005099c:	0003      	movs	r3, r0
1005099e:	7023      	strb	r3, [r4, #0]
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
100509a0:	197c      	adds	r4, r7, r5
100509a2:	2308      	movs	r3, #8
100509a4:	18fb      	adds	r3, r7, r3
100509a6:	001a      	movs	r2, r3
100509a8:	2101      	movs	r1, #1
100509aa:	2001      	movs	r0, #1
100509ac:	f002 fc23 	bl	100531f6 <aci_gap_set_advertising_enable>
100509b0:	0003      	movs	r3, r0
100509b2:	7023      	strb	r3, [r4, #0]
      break;
100509b4:	e029      	b.n	10050a0a <APP_BLE_Procedure_Gap_Peripheral+0x192>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
100509b6:	250f      	movs	r5, #15
100509b8:	197c      	adds	r4, r7, r5
100509ba:	2200      	movs	r2, #0
100509bc:	2100      	movs	r1, #0
100509be:	2000      	movs	r0, #0
100509c0:	f002 fc19 	bl	100531f6 <aci_gap_set_advertising_enable>
100509c4:	0003      	movs	r3, r0
100509c6:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
100509c8:	197b      	adds	r3, r7, r5
100509ca:	781b      	ldrb	r3, [r3, #0]
100509cc:	2b00      	cmp	r3, #0
100509ce:	d11b      	bne.n	10050a08 <APP_BLE_Procedure_Gap_Peripheral+0x190>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
100509d0:	697b      	ldr	r3, [r7, #20]
100509d2:	b2da      	uxtb	r2, r3
100509d4:	4b10      	ldr	r3, [pc, #64]	@ (10050a18 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
100509d6:	739a      	strb	r2, [r3, #14]
      break;
100509d8:	e016      	b.n	10050a08 <APP_BLE_Procedure_Gap_Peripheral+0x190>
       status = aci_l2cap_connection_parameter_update_req(
100509da:	4b0f      	ldr	r3, [pc, #60]	@ (10050a18 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
100509dc:	8998      	ldrh	r0, [r3, #12]
100509de:	69fb      	ldr	r3, [r7, #28]
100509e0:	b299      	uxth	r1, r3
100509e2:	69bb      	ldr	r3, [r7, #24]
100509e4:	b29a      	uxth	r2, r3
100509e6:	697b      	ldr	r3, [r7, #20]
100509e8:	b29d      	uxth	r5, r3
100509ea:	693b      	ldr	r3, [r7, #16]
100509ec:	b29b      	uxth	r3, r3
100509ee:	240f      	movs	r4, #15
100509f0:	193c      	adds	r4, r7, r4
100509f2:	9300      	str	r3, [sp, #0]
100509f4:	002b      	movs	r3, r5
100509f6:	f7fd f8e8 	bl	1004dbca <aci_l2cap_connection_parameter_update_req>
100509fa:	0003      	movs	r3, r0
100509fc:	7023      	strb	r3, [r4, #0]
      break;
100509fe:	e004      	b.n	10050a0a <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10050a00:	46c0      	nop			@ (mov r8, r8)
10050a02:	e002      	b.n	10050a0a <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10050a04:	46c0      	nop			@ (mov r8, r8)
10050a06:	e000      	b.n	10050a0a <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10050a08:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10050a0a:	46c0      	nop			@ (mov r8, r8)
}
10050a0c:	46bd      	mov	sp, r7
10050a0e:	b008      	add	sp, #32
10050a10:	bdb0      	pop	{r4, r5, r7, pc}
10050a12:	46c0      	nop			@ (mov r8, r8)
10050a14:	10067f34 	.word	0x10067f34
10050a18:	20002320 	.word	0x20002320
10050a1c:	20002868 	.word	0x20002868

10050a20 <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
10050a20:	b580      	push	{r7, lr}
10050a22:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10050a24:	2001      	movs	r0, #1
10050a26:	f002 fa95 	bl	10052f54 <UTIL_SEQ_SetEvt>
  return;
10050a2a:	46c0      	nop			@ (mov r8, r8)
}
10050a2c:	46bd      	mov	sp, r7
10050a2e:	bd80      	pop	{r7, pc}

10050a30 <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
10050a30:	b580      	push	{r7, lr}
10050a32:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10050a34:	2001      	movs	r0, #1
10050a36:	f002 faab 	bl	10052f90 <UTIL_SEQ_WaitEvt>
  return;
10050a3a:	46c0      	nop			@ (mov r8, r8)
}
10050a3c:	46bd      	mov	sp, r7
10050a3e:	bd80      	pop	{r7, pc}

10050a40 <USART_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t USART_EventHandler(aci_blecore_event *p_evt)
{
10050a40:	b580      	push	{r7, lr}
10050a42:	b08e      	sub	sp, #56	@ 0x38
10050a44:	af00      	add	r7, sp, #0
10050a46:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
10050a48:	2337      	movs	r3, #55	@ 0x37
10050a4a:	18fb      	adds	r3, r7, r3
10050a4c:	2200      	movs	r2, #0
10050a4e:	701a      	strb	r2, [r3, #0]
  USART_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
10050a50:	687b      	ldr	r3, [r7, #4]
10050a52:	781a      	ldrb	r2, [r3, #0]
10050a54:	785b      	ldrb	r3, [r3, #1]
10050a56:	021b      	lsls	r3, r3, #8
10050a58:	4313      	orrs	r3, r2
10050a5a:	b29b      	uxth	r3, r3
10050a5c:	4a62      	ldr	r2, [pc, #392]	@ (10050be8 <USART_EventHandler+0x1a8>)
10050a5e:	4694      	mov	ip, r2
10050a60:	4463      	add	r3, ip
10050a62:	2b19      	cmp	r3, #25
10050a64:	d900      	bls.n	10050a68 <USART_EventHandler+0x28>
10050a66:	e0b1      	b.n	10050bcc <USART_EventHandler+0x18c>
10050a68:	009a      	lsls	r2, r3, #2
10050a6a:	4b60      	ldr	r3, [pc, #384]	@ (10050bec <USART_EventHandler+0x1ac>)
10050a6c:	18d3      	adds	r3, r2, r3
10050a6e:	681b      	ldr	r3, [r3, #0]
10050a70:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
10050a72:	687b      	ldr	r3, [r7, #4]
10050a74:	3302      	adds	r3, #2
10050a76:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
10050a78:	6a3b      	ldr	r3, [r7, #32]
10050a7a:	781a      	ldrb	r2, [r3, #0]
10050a7c:	785b      	ldrb	r3, [r3, #1]
10050a7e:	021b      	lsls	r3, r3, #8
10050a80:	4313      	orrs	r3, r2
10050a82:	b29a      	uxth	r2, r3
10050a84:	210c      	movs	r1, #12
10050a86:	187b      	adds	r3, r7, r1
10050a88:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
10050a8a:	6a3b      	ldr	r3, [r7, #32]
10050a8c:	791a      	ldrb	r2, [r3, #4]
10050a8e:	795b      	ldrb	r3, [r3, #5]
10050a90:	021b      	lsls	r3, r3, #8
10050a92:	4313      	orrs	r3, r2
10050a94:	b29a      	uxth	r2, r3
10050a96:	187b      	adds	r3, r7, r1
10050a98:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
10050a9a:	6a3b      	ldr	r3, [r7, #32]
10050a9c:	799a      	ldrb	r2, [r3, #6]
10050a9e:	79db      	ldrb	r3, [r3, #7]
10050aa0:	021b      	lsls	r3, r3, #8
10050aa2:	4313      	orrs	r3, r2
10050aa4:	b29b      	uxth	r3, r3
10050aa6:	b2da      	uxtb	r2, r3
10050aa8:	187b      	adds	r3, r7, r1
10050aaa:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10050aac:	6a3b      	ldr	r3, [r7, #32]
10050aae:	3308      	adds	r3, #8
10050ab0:	001a      	movs	r2, r3
10050ab2:	187b      	adds	r3, r7, r1
10050ab4:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10050ab6:	6a3b      	ldr	r3, [r7, #32]
10050ab8:	791a      	ldrb	r2, [r3, #4]
10050aba:	795b      	ldrb	r3, [r3, #5]
10050abc:	021b      	lsls	r3, r3, #8
10050abe:	4313      	orrs	r3, r2
10050ac0:	b29b      	uxth	r3, r3
10050ac2:	001a      	movs	r2, r3
10050ac4:	4b4a      	ldr	r3, [pc, #296]	@ (10050bf0 <USART_EventHandler+0x1b0>)
10050ac6:	889b      	ldrh	r3, [r3, #4]
10050ac8:	3301      	adds	r3, #1
10050aca:	429a      	cmp	r2, r3
10050acc:	d10b      	bne.n	10050ae6 <USART_EventHandler+0xa6>
      {
        return_value = BLEEVT_Ack;
10050ace:	2337      	movs	r3, #55	@ 0x37
10050ad0:	18fb      	adds	r3, r7, r3
10050ad2:	2201      	movs	r2, #1
10050ad4:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = USART_RX_WRITE_NO_RESP_EVT;
10050ad6:	187b      	adds	r3, r7, r1
10050ad8:	2201      	movs	r2, #1
10050ada:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

        /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        USART_Notification(&notification);
10050adc:	187b      	adds	r3, r7, r1
10050ade:	0018      	movs	r0, r3
10050ae0:	f000 f914 	bl	10050d0c <USART_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10050ae4:	e074      	b.n	10050bd0 <USART_EventHandler+0x190>
      else if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10050ae6:	6a3b      	ldr	r3, [r7, #32]
10050ae8:	791a      	ldrb	r2, [r3, #4]
10050aea:	795b      	ldrb	r3, [r3, #5]
10050aec:	021b      	lsls	r3, r3, #8
10050aee:	4313      	orrs	r3, r2
10050af0:	b29b      	uxth	r3, r3
10050af2:	001a      	movs	r2, r3
10050af4:	4b3e      	ldr	r3, [pc, #248]	@ (10050bf0 <USART_EventHandler+0x1b0>)
10050af6:	88db      	ldrh	r3, [r3, #6]
10050af8:	3301      	adds	r3, #1
10050afa:	429a      	cmp	r2, r3
10050afc:	d168      	bne.n	10050bd0 <USART_EventHandler+0x190>
        return_value = BLEEVT_Ack;
10050afe:	2337      	movs	r3, #55	@ 0x37
10050b00:	18fb      	adds	r3, r7, r3
10050b02:	2201      	movs	r2, #1
10050b04:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = USART_REQ_TX_WRITE_EVT;
10050b06:	210c      	movs	r1, #12
10050b08:	187b      	adds	r3, r7, r1
10050b0a:	2203      	movs	r2, #3
10050b0c:	701a      	strb	r2, [r3, #0]
        USART_Notification(&notification);
10050b0e:	187b      	adds	r3, r7, r1
10050b10:	0018      	movs	r0, r3
10050b12:	f000 f8fb 	bl	10050d0c <USART_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10050b16:	e05b      	b.n	10050bd0 <USART_EventHandler+0x190>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
10050b18:	687b      	ldr	r3, [r7, #4]
10050b1a:	3302      	adds	r3, #2
10050b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if(p_read->Attribute_Handle == (USART_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10050b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050b20:	791a      	ldrb	r2, [r3, #4]
10050b22:	795b      	ldrb	r3, [r3, #5]
10050b24:	021b      	lsls	r3, r3, #8
10050b26:	4313      	orrs	r3, r2
10050b28:	b29b      	uxth	r3, r3
10050b2a:	001a      	movs	r2, r3
10050b2c:	4b30      	ldr	r3, [pc, #192]	@ (10050bf0 <USART_EventHandler+0x1b0>)
10050b2e:	885b      	ldrh	r3, [r3, #2]
10050b30:	3301      	adds	r3, #1
10050b32:	429a      	cmp	r2, r3
10050b34:	d10c      	bne.n	10050b50 <USART_EventHandler+0x110>
	  {
		return_value = BLEEVT_Ack;
10050b36:	2337      	movs	r3, #55	@ 0x37
10050b38:	18fb      	adds	r3, r7, r3
10050b3a:	2201      	movs	r2, #1
10050b3c:	701a      	strb	r2, [r3, #0]
		/*USER CODE BEGIN Service1_Char_1_ACI_GATT_SRV_READ_VSEVT_CODE_1 */
		notification.EvtOpcode = USART_TX_READ_EVT;
10050b3e:	210c      	movs	r1, #12
10050b40:	187b      	adds	r3, r7, r1
10050b42:	2200      	movs	r2, #0
10050b44:	701a      	strb	r2, [r3, #0]
		USART_Notification(&notification);
10050b46:	187b      	adds	r3, r7, r1
10050b48:	0018      	movs	r0, r3
10050b4a:	f000 f8df 	bl	10050d0c <USART_Notification>
	  } /* if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10050b4e:	e041      	b.n	10050bd4 <USART_EventHandler+0x194>
	  else if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10050b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050b52:	791a      	ldrb	r2, [r3, #4]
10050b54:	795b      	ldrb	r3, [r3, #5]
10050b56:	021b      	lsls	r3, r3, #8
10050b58:	4313      	orrs	r3, r2
10050b5a:	b29b      	uxth	r3, r3
10050b5c:	001a      	movs	r2, r3
10050b5e:	4b24      	ldr	r3, [pc, #144]	@ (10050bf0 <USART_EventHandler+0x1b0>)
10050b60:	88db      	ldrh	r3, [r3, #6]
10050b62:	3301      	adds	r3, #1
10050b64:	429a      	cmp	r2, r3
10050b66:	d135      	bne.n	10050bd4 <USART_EventHandler+0x194>
		return_value = BLEEVT_Ack;
10050b68:	2337      	movs	r3, #55	@ 0x37
10050b6a:	18fb      	adds	r3, r7, r3
10050b6c:	2201      	movs	r2, #1
10050b6e:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10050b70:	e030      	b.n	10050bd4 <USART_EventHandler+0x194>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
10050b72:	687b      	ldr	r3, [r7, #4]
10050b74:	3302      	adds	r3, #2
10050b76:	633b      	str	r3, [r7, #48]	@ 0x30
      if(p_write->Attribute_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10050b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050b7a:	795a      	ldrb	r2, [r3, #5]
10050b7c:	799b      	ldrb	r3, [r3, #6]
10050b7e:	021b      	lsls	r3, r3, #8
10050b80:	4313      	orrs	r3, r2
10050b82:	b29b      	uxth	r3, r3
10050b84:	001a      	movs	r2, r3
10050b86:	4b1a      	ldr	r3, [pc, #104]	@ (10050bf0 <USART_EventHandler+0x1b0>)
10050b88:	889b      	ldrh	r3, [r3, #4]
10050b8a:	3301      	adds	r3, #1
10050b8c:	429a      	cmp	r2, r3
10050b8e:	d104      	bne.n	10050b9a <USART_EventHandler+0x15a>
      {
        return_value = BLEEVT_Ack;
10050b90:	2337      	movs	r3, #55	@ 0x37
10050b92:	18fb      	adds	r3, r7, r3
10050b94:	2201      	movs	r2, #1
10050b96:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10050b98:	e01e      	b.n	10050bd8 <USART_EventHandler+0x198>
      else if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10050b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050b9c:	795a      	ldrb	r2, [r3, #5]
10050b9e:	799b      	ldrb	r3, [r3, #6]
10050ba0:	021b      	lsls	r3, r3, #8
10050ba2:	4313      	orrs	r3, r2
10050ba4:	b29b      	uxth	r3, r3
10050ba6:	001a      	movs	r2, r3
10050ba8:	4b11      	ldr	r3, [pc, #68]	@ (10050bf0 <USART_EventHandler+0x1b0>)
10050baa:	88db      	ldrh	r3, [r3, #6]
10050bac:	3301      	adds	r3, #1
10050bae:	429a      	cmp	r2, r3
10050bb0:	d112      	bne.n	10050bd8 <USART_EventHandler+0x198>
        return_value = BLEEVT_Ack;
10050bb2:	2337      	movs	r3, #55	@ 0x37
10050bb4:	18fb      	adds	r3, r7, r3
10050bb6:	2201      	movs	r2, #1
10050bb8:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10050bba:	e00d      	b.n	10050bd8 <USART_EventHandler+0x198>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
10050bbc:	687b      	ldr	r3, [r7, #4]
10050bbe:	3302      	adds	r3, #2
10050bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10050bc2:	e00a      	b.n	10050bda <USART_EventHandler+0x19a>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10050bc4:	687b      	ldr	r3, [r7, #4]
10050bc6:	3302      	adds	r3, #2
10050bc8:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
10050bca:	e006      	b.n	10050bda <USART_EventHandler+0x19a>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
10050bcc:	46c0      	nop			@ (mov r8, r8)
10050bce:	e004      	b.n	10050bda <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10050bd0:	46c0      	nop			@ (mov r8, r8)
10050bd2:	e002      	b.n	10050bda <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10050bd4:	46c0      	nop			@ (mov r8, r8)
10050bd6:	e000      	b.n	10050bda <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10050bd8:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
10050bda:	2337      	movs	r3, #55	@ 0x37
10050bdc:	18fb      	adds	r3, r7, r3
10050bde:	781b      	ldrb	r3, [r3, #0]
}/* end USART_EventHandler */
10050be0:	0018      	movs	r0, r3
10050be2:	46bd      	mov	sp, r7
10050be4:	b00e      	add	sp, #56	@ 0x38
10050be6:	bd80      	pop	{r7, pc}
10050be8:	fffff3ff 	.word	0xfffff3ff
10050bec:	10067fe0 	.word	0x10067fe0
10050bf0:	20002334 	.word	0x20002334

10050bf4 <USART_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void USART_Init(void)
{
10050bf4:	b590      	push	{r4, r7, lr}
10050bf6:	b083      	sub	sp, #12
10050bf8:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10050bfa:	1dfb      	adds	r3, r7, #7
10050bfc:	2212      	movs	r2, #18
10050bfe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(USART_EventHandler);
10050c00:	4b17      	ldr	r3, [pc, #92]	@ (10050c60 <USART_Init+0x6c>)
10050c02:	0018      	movs	r0, r3
10050c04:	f7fc fbf6 	bl	1004d3f4 <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&usart_service);
10050c08:	1dfc      	adds	r4, r7, #7
10050c0a:	4b16      	ldr	r3, [pc, #88]	@ (10050c64 <USART_Init+0x70>)
10050c0c:	0018      	movs	r0, r3
10050c0e:	f7fc ff79 	bl	1004db04 <aci_gatt_srv_add_service>
10050c12:	0003      	movs	r3, r0
10050c14:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: USART \n");
  }

  USART_Context.UsartSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &usart_service);
10050c16:	4b13      	ldr	r3, [pc, #76]	@ (10050c64 <USART_Init+0x70>)
10050c18:	0018      	movs	r0, r3
10050c1a:	f7fc ff80 	bl	1004db1e <aci_gatt_srv_get_service_handle>
10050c1e:	0003      	movs	r3, r0
10050c20:	001a      	movs	r2, r3
10050c22:	4b11      	ldr	r3, [pc, #68]	@ (10050c68 <USART_Init+0x74>)
10050c24:	801a      	strh	r2, [r3, #0]
  USART_Context.TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[0]);
10050c26:	4b11      	ldr	r3, [pc, #68]	@ (10050c6c <USART_Init+0x78>)
10050c28:	0018      	movs	r0, r3
10050c2a:	f7fc ff98 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
10050c2e:	0003      	movs	r3, r0
10050c30:	001a      	movs	r2, r3
10050c32:	4b0d      	ldr	r3, [pc, #52]	@ (10050c68 <USART_Init+0x74>)
10050c34:	805a      	strh	r2, [r3, #2]
  USART_Context.RxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[1]);
10050c36:	4b0e      	ldr	r3, [pc, #56]	@ (10050c70 <USART_Init+0x7c>)
10050c38:	0018      	movs	r0, r3
10050c3a:	f7fc ff90 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
10050c3e:	0003      	movs	r3, r0
10050c40:	001a      	movs	r2, r3
10050c42:	4b09      	ldr	r3, [pc, #36]	@ (10050c68 <USART_Init+0x74>)
10050c44:	809a      	strh	r2, [r3, #4]
  USART_Context.Req_TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[2]);
10050c46:	4b0b      	ldr	r3, [pc, #44]	@ (10050c74 <USART_Init+0x80>)
10050c48:	0018      	movs	r0, r3
10050c4a:	f7fc ff88 	bl	1004db5e <aci_gatt_srv_get_char_decl_handle>
10050c4e:	0003      	movs	r3, r0
10050c50:	001a      	movs	r2, r3
10050c52:	4b05      	ldr	r3, [pc, #20]	@ (10050c68 <USART_Init+0x74>)
10050c54:	80da      	strh	r2, [r3, #6]
  if (ret != BLE_STATUS_SUCCESS)
  {
    APP_DBG_MSG("  Fail registering USART handlers\n");
  }

  return;
10050c56:	46c0      	nop			@ (mov r8, r8)
}
10050c58:	46bd      	mov	sp, r7
10050c5a:	b003      	add	sp, #12
10050c5c:	bd90      	pop	{r4, r7, pc}
10050c5e:	46c0      	nop			@ (mov r8, r8)
10050c60:	10050a41 	.word	0x10050a41
10050c64:	10067fb8 	.word	0x10067fb8
10050c68:	20002334 	.word	0x20002334
10050c6c:	10067f4c 	.word	0x10067f4c
10050c70:	10067f70 	.word	0x10067f70
10050c74:	10067f94 	.word	0x10067f94

10050c78 <USART_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: pointer to the new data to be written in the characteristic
 *
 */
tBleStatus USART_UpdateValue(USART_CharOpcode_t CharOpcode, USART_Data_t *pData)
{
10050c78:	b580      	push	{r7, lr}
10050c7a:	b084      	sub	sp, #16
10050c7c:	af00      	add	r7, sp, #0
10050c7e:	0002      	movs	r2, r0
10050c80:	6039      	str	r1, [r7, #0]
10050c82:	1dfb      	adds	r3, r7, #7
10050c84:	701a      	strb	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_SUCCESS;
10050c86:	230f      	movs	r3, #15
10050c88:	18fb      	adds	r3, r7, r3
10050c8a:	2200      	movs	r2, #0
10050c8c:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
10050c8e:	1dfb      	adds	r3, r7, #7
10050c90:	781b      	ldrb	r3, [r3, #0]
10050c92:	2b02      	cmp	r3, #2
10050c94:	d01f      	beq.n	10050cd6 <USART_UpdateValue+0x5e>
10050c96:	dc2b      	bgt.n	10050cf0 <USART_UpdateValue+0x78>
10050c98:	2b00      	cmp	r3, #0
10050c9a:	d002      	beq.n	10050ca2 <USART_UpdateValue+0x2a>
10050c9c:	2b01      	cmp	r3, #1
10050c9e:	d00d      	beq.n	10050cbc <USART_UpdateValue+0x44>

      /* USER CODE END Service1_Char_Value_3*/
      break;

    default:
      break;
10050ca0:	e026      	b.n	10050cf0 <USART_UpdateValue+0x78>
      memcpy(tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(tx_val_buffer)));
10050ca2:	683b      	ldr	r3, [r7, #0]
10050ca4:	6819      	ldr	r1, [r3, #0]
10050ca6:	683b      	ldr	r3, [r7, #0]
10050ca8:	791b      	ldrb	r3, [r3, #4]
10050caa:	1e5a      	subs	r2, r3, #1
10050cac:	4193      	sbcs	r3, r2
10050cae:	b2db      	uxtb	r3, r3
10050cb0:	001a      	movs	r2, r3
10050cb2:	4b13      	ldr	r3, [pc, #76]	@ (10050d00 <USART_UpdateValue+0x88>)
10050cb4:	0018      	movs	r0, r3
10050cb6:	f015 fc68 	bl	1006658a <memcpy>
      break;
10050cba:	e01a      	b.n	10050cf2 <USART_UpdateValue+0x7a>
      memcpy(rx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rx_val_buffer)));
10050cbc:	683b      	ldr	r3, [r7, #0]
10050cbe:	6819      	ldr	r1, [r3, #0]
10050cc0:	683b      	ldr	r3, [r7, #0]
10050cc2:	791b      	ldrb	r3, [r3, #4]
10050cc4:	1e5a      	subs	r2, r3, #1
10050cc6:	4193      	sbcs	r3, r2
10050cc8:	b2db      	uxtb	r3, r3
10050cca:	001a      	movs	r2, r3
10050ccc:	4b0d      	ldr	r3, [pc, #52]	@ (10050d04 <USART_UpdateValue+0x8c>)
10050cce:	0018      	movs	r0, r3
10050cd0:	f015 fc5b 	bl	1006658a <memcpy>
      break;
10050cd4:	e00d      	b.n	10050cf2 <USART_UpdateValue+0x7a>
      memcpy(req_tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(req_tx_val_buffer)));
10050cd6:	683b      	ldr	r3, [r7, #0]
10050cd8:	6819      	ldr	r1, [r3, #0]
10050cda:	683b      	ldr	r3, [r7, #0]
10050cdc:	791b      	ldrb	r3, [r3, #4]
10050cde:	1e5a      	subs	r2, r3, #1
10050ce0:	4193      	sbcs	r3, r2
10050ce2:	b2db      	uxtb	r3, r3
10050ce4:	001a      	movs	r2, r3
10050ce6:	4b08      	ldr	r3, [pc, #32]	@ (10050d08 <USART_UpdateValue+0x90>)
10050ce8:	0018      	movs	r0, r3
10050cea:	f015 fc4e 	bl	1006658a <memcpy>
      break;
10050cee:	e000      	b.n	10050cf2 <USART_UpdateValue+0x7a>
      break;
10050cf0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
10050cf2:	230f      	movs	r3, #15
10050cf4:	18fb      	adds	r3, r7, r3
10050cf6:	781b      	ldrb	r3, [r3, #0]
}
10050cf8:	0018      	movs	r0, r3
10050cfa:	46bd      	mov	sp, r7
10050cfc:	b004      	add	sp, #16
10050cfe:	bd80      	pop	{r7, pc}
10050d00:	2000233c 	.word	0x2000233c
10050d04:	20002340 	.word	0x20002340
10050d08:	20002344 	.word	0x20002344

10050d0c <USART_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void USART_Notification(USART_NotificationEvt_t *p_Notification)
{
10050d0c:	b5b0      	push	{r4, r5, r7, lr}
10050d0e:	b08e      	sub	sp, #56	@ 0x38
10050d10:	af00      	add	r7, sp, #0
10050d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
10050d14:	687b      	ldr	r3, [r7, #4]
10050d16:	781b      	ldrb	r3, [r3, #0]
10050d18:	2b03      	cmp	r3, #3
10050d1a:	d017      	beq.n	10050d4c <USART_Notification+0x40>
10050d1c:	dc56      	bgt.n	10050dcc <USART_Notification+0xc0>
10050d1e:	2b02      	cmp	r3, #2
10050d20:	d056      	beq.n	10050dd0 <USART_Notification+0xc4>
10050d22:	dc53      	bgt.n	10050dcc <USART_Notification+0xc0>
10050d24:	2b00      	cmp	r3, #0
10050d26:	d055      	beq.n	10050dd4 <USART_Notification+0xc8>
10050d28:	2b01      	cmp	r3, #1
10050d2a:	d000      	beq.n	10050d2e <USART_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
10050d2c:	e04e      	b.n	10050dcc <USART_Notification+0xc0>
      Event_t recieved = {EVENT_USART, p_Notification->DataTransfered.p_Payload[0]};
10050d2e:	2130      	movs	r1, #48	@ 0x30
10050d30:	187b      	adds	r3, r7, r1
10050d32:	2206      	movs	r2, #6
10050d34:	701a      	strb	r2, [r3, #0]
10050d36:	687b      	ldr	r3, [r7, #4]
10050d38:	685b      	ldr	r3, [r3, #4]
10050d3a:	781b      	ldrb	r3, [r3, #0]
10050d3c:	001a      	movs	r2, r3
10050d3e:	187b      	adds	r3, r7, r1
10050d40:	805a      	strh	r2, [r3, #2]
      COMM_Event_Post(recieved);
10050d42:	187b      	adds	r3, r7, r1
10050d44:	6818      	ldr	r0, [r3, #0]
10050d46:	f7f1 fbcd 	bl	100424e4 <COMM_Event_Post>
      break;
10050d4a:	e044      	b.n	10050dd6 <USART_Notification+0xca>
        int16_t data = BLUETOOTH_ReadBuffer();
10050d4c:	2536      	movs	r5, #54	@ 0x36
10050d4e:	197c      	adds	r4, r7, r5
10050d50:	f7ef fda4 	bl	1004089c <BLUETOOTH_ReadBuffer>
10050d54:	0003      	movs	r3, r0
10050d56:	8023      	strh	r3, [r4, #0]
        if(data != -1){
10050d58:	002a      	movs	r2, r5
10050d5a:	18bb      	adds	r3, r7, r2
10050d5c:	2100      	movs	r1, #0
10050d5e:	5e5b      	ldrsh	r3, [r3, r1]
10050d60:	3301      	adds	r3, #1
10050d62:	d022      	beq.n	10050daa <USART_Notification+0x9e>
        	uint8_t data1 = (uint8_t)data;
10050d64:	18bb      	adds	r3, r7, r2
10050d66:	881b      	ldrh	r3, [r3, #0]
10050d68:	b2da      	uxtb	r2, r3
10050d6a:	202f      	movs	r0, #47	@ 0x2f
10050d6c:	183b      	adds	r3, r7, r0
10050d6e:	701a      	strb	r2, [r3, #0]
			USART_Data_t value1 = {&data1, 1};
10050d70:	2124      	movs	r1, #36	@ 0x24
10050d72:	187b      	adds	r3, r7, r1
10050d74:	183a      	adds	r2, r7, r0
10050d76:	601a      	str	r2, [r3, #0]
10050d78:	187b      	adds	r3, r7, r1
10050d7a:	2201      	movs	r2, #1
10050d7c:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_TX, &value1);
10050d7e:	187b      	adds	r3, r7, r1
10050d80:	0019      	movs	r1, r3
10050d82:	2000      	movs	r0, #0
10050d84:	f7ff ff78 	bl	10050c78 <USART_UpdateValue>
			uint8_t data2 = 0;
10050d88:	2023      	movs	r0, #35	@ 0x23
10050d8a:	183b      	adds	r3, r7, r0
10050d8c:	2200      	movs	r2, #0
10050d8e:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
10050d90:	2118      	movs	r1, #24
10050d92:	187b      	adds	r3, r7, r1
10050d94:	183a      	adds	r2, r7, r0
10050d96:	601a      	str	r2, [r3, #0]
10050d98:	187b      	adds	r3, r7, r1
10050d9a:	2201      	movs	r2, #1
10050d9c:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
10050d9e:	187b      	adds	r3, r7, r1
10050da0:	0019      	movs	r1, r3
10050da2:	2002      	movs	r0, #2
10050da4:	f7ff ff68 	bl	10050c78 <USART_UpdateValue>
      break;
10050da8:	e015      	b.n	10050dd6 <USART_Notification+0xca>
			uint8_t data2 = 2;
10050daa:	2017      	movs	r0, #23
10050dac:	183b      	adds	r3, r7, r0
10050dae:	2202      	movs	r2, #2
10050db0:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
10050db2:	210c      	movs	r1, #12
10050db4:	187b      	adds	r3, r7, r1
10050db6:	183a      	adds	r2, r7, r0
10050db8:	601a      	str	r2, [r3, #0]
10050dba:	187b      	adds	r3, r7, r1
10050dbc:	2201      	movs	r2, #1
10050dbe:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
10050dc0:	187b      	adds	r3, r7, r1
10050dc2:	0019      	movs	r1, r3
10050dc4:	2002      	movs	r0, #2
10050dc6:	f7ff ff57 	bl	10050c78 <USART_UpdateValue>
      break;
10050dca:	e004      	b.n	10050dd6 <USART_Notification+0xca>
      break;
10050dcc:	46c0      	nop			@ (mov r8, r8)
10050dce:	e002      	b.n	10050dd6 <USART_Notification+0xca>
      break;
10050dd0:	46c0      	nop			@ (mov r8, r8)
10050dd2:	e000      	b.n	10050dd6 <USART_Notification+0xca>
      break;
10050dd4:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
10050dd6:	46c0      	nop			@ (mov r8, r8)
}
10050dd8:	46bd      	mov	sp, r7
10050dda:	b00e      	add	sp, #56	@ 0x38
10050ddc:	bdb0      	pop	{r4, r5, r7, pc}
	...

10050de0 <USART_APP_EvtRx>:

void USART_APP_EvtRx(USART_APP_ConnHandleNotEvt_t *p_Notification)
{
10050de0:	b580      	push	{r7, lr}
10050de2:	b082      	sub	sp, #8
10050de4:	af00      	add	r7, sp, #0
10050de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
10050de8:	687b      	ldr	r3, [r7, #4]
10050dea:	781b      	ldrb	r3, [r3, #0]
10050dec:	2b00      	cmp	r3, #0
10050dee:	d002      	beq.n	10050df6 <USART_APP_EvtRx+0x16>
10050df0:	2b01      	cmp	r3, #1
10050df2:	d005      	beq.n	10050e00 <USART_APP_EvtRx+0x20>
      break;
    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
10050df4:	e00c      	b.n	10050e10 <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
10050df6:	687b      	ldr	r3, [r7, #4]
10050df8:	885a      	ldrh	r2, [r3, #2]
10050dfa:	4b07      	ldr	r3, [pc, #28]	@ (10050e18 <USART_APP_EvtRx+0x38>)
10050dfc:	801a      	strh	r2, [r3, #0]
      break;
10050dfe:	e007      	b.n	10050e10 <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = 0xFFFF;
10050e00:	4b05      	ldr	r3, [pc, #20]	@ (10050e18 <USART_APP_EvtRx+0x38>)
10050e02:	2201      	movs	r2, #1
10050e04:	4252      	negs	r2, r2
10050e06:	801a      	strh	r2, [r3, #0]
            APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10050e08:	2001      	movs	r0, #1
10050e0a:	f7ff fd35 	bl	10050878 <APP_BLE_Procedure_Gap_Peripheral>
      break;
10050e0e:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
10050e10:	46c0      	nop			@ (mov r8, r8)
}
10050e12:	46bd      	mov	sp, r7
10050e14:	b002      	add	sp, #8
10050e16:	bd80      	pop	{r7, pc}
10050e18:	20002348 	.word	0x20002348

10050e1c <USART_APP_Init>:

void USART_APP_Init(void)
{
10050e1c:	b580      	push	{r7, lr}
10050e1e:	af00      	add	r7, sp, #0
  USART_APP_Context.ConnectionHandle = 0xFFFF;
10050e20:	4b04      	ldr	r3, [pc, #16]	@ (10050e34 <USART_APP_Init+0x18>)
10050e22:	2201      	movs	r2, #1
10050e24:	4252      	negs	r2, r2
10050e26:	801a      	strh	r2, [r3, #0]
  USART_Init();
10050e28:	f7ff fee4 	bl	10050bf4 <USART_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
10050e2c:	46c0      	nop			@ (mov r8, r8)
}
10050e2e:	46bd      	mov	sp, r7
10050e30:	bd80      	pop	{r7, pc}
10050e32:	46c0      	nop			@ (mov r8, r8)
10050e34:	20002348 	.word	0x20002348

10050e38 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
10050e38:	b580      	push	{r7, lr}
10050e3a:	af00      	add	r7, sp, #0
  NVMDB_Init();
10050e3c:	f7fe f9ac 	bl	1004f198 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10050e40:	4b07      	ldr	r3, [pc, #28]	@ (10050e60 <BLENVM_Init+0x28>)
10050e42:	0019      	movs	r1, r3
10050e44:	2000      	movs	r0, #0
10050e46:	f7fe fb05 	bl	1004f454 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
10050e4a:	4b06      	ldr	r3, [pc, #24]	@ (10050e64 <BLENVM_Init+0x2c>)
10050e4c:	0019      	movs	r1, r3
10050e4e:	2001      	movs	r0, #1
10050e50:	f7fe fb00 	bl	1004f454 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10050e54:	4b04      	ldr	r3, [pc, #16]	@ (10050e68 <BLENVM_Init+0x30>)
10050e56:	4a02      	ldr	r2, [pc, #8]	@ (10050e60 <BLENVM_Init+0x28>)
10050e58:	601a      	str	r2, [r3, #0]
}
10050e5a:	46c0      	nop			@ (mov r8, r8)
10050e5c:	46bd      	mov	sp, r7
10050e5e:	bd80      	pop	{r7, pc}
10050e60:	2000234c 	.word	0x2000234c
10050e64:	2000235c 	.word	0x2000235c
10050e68:	2000236c 	.word	0x2000236c

10050e6c <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10050e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10050e6e:	b089      	sub	sp, #36	@ 0x24
10050e70:	af02      	add	r7, sp, #8
10050e72:	60b9      	str	r1, [r7, #8]
10050e74:	0011      	movs	r1, r2
10050e76:	607b      	str	r3, [r7, #4]
10050e78:	240f      	movs	r4, #15
10050e7a:	193b      	adds	r3, r7, r4
10050e7c:	1c02      	adds	r2, r0, #0
10050e7e:	701a      	strb	r2, [r3, #0]
10050e80:	230c      	movs	r3, #12
10050e82:	18fb      	adds	r3, r7, r3
10050e84:	1c0a      	adds	r2, r1, #0
10050e86:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10050e88:	193b      	adds	r3, r7, r4
10050e8a:	781b      	ldrb	r3, [r3, #0]
10050e8c:	2b02      	cmp	r3, #2
10050e8e:	d103      	bne.n	10050e98 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10050e90:	4b1a      	ldr	r3, [pc, #104]	@ (10050efc <BLEPLAT_NvmAdd+0x90>)
10050e92:	4a1b      	ldr	r2, [pc, #108]	@ (10050f00 <BLEPLAT_NvmAdd+0x94>)
10050e94:	601a      	str	r2, [r3, #0]
10050e96:	e002      	b.n	10050e9e <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10050e98:	4b18      	ldr	r3, [pc, #96]	@ (10050efc <BLEPLAT_NvmAdd+0x90>)
10050e9a:	4a1a      	ldr	r2, [pc, #104]	@ (10050f04 <BLEPLAT_NvmAdd+0x98>)
10050e9c:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
10050e9e:	4b17      	ldr	r3, [pc, #92]	@ (10050efc <BLEPLAT_NvmAdd+0x90>)
10050ea0:	6818      	ldr	r0, [r3, #0]
10050ea2:	2617      	movs	r6, #23
10050ea4:	19bc      	adds	r4, r7, r6
10050ea6:	68bd      	ldr	r5, [r7, #8]
10050ea8:	230c      	movs	r3, #12
10050eaa:	18fb      	adds	r3, r7, r3
10050eac:	881b      	ldrh	r3, [r3, #0]
10050eae:	469c      	mov	ip, r3
10050eb0:	230f      	movs	r3, #15
10050eb2:	18fb      	adds	r3, r7, r3
10050eb4:	7819      	ldrb	r1, [r3, #0]
10050eb6:	687b      	ldr	r3, [r7, #4]
10050eb8:	9301      	str	r3, [sp, #4]
10050eba:	2328      	movs	r3, #40	@ 0x28
10050ebc:	2208      	movs	r2, #8
10050ebe:	189b      	adds	r3, r3, r2
10050ec0:	19db      	adds	r3, r3, r7
10050ec2:	881b      	ldrh	r3, [r3, #0]
10050ec4:	9300      	str	r3, [sp, #0]
10050ec6:	002b      	movs	r3, r5
10050ec8:	4662      	mov	r2, ip
10050eca:	f7fe fb65 	bl	1004f598 <NVMDB_AppendRecord>
10050ece:	0003      	movs	r3, r0
10050ed0:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
10050ed2:	19bb      	adds	r3, r7, r6
10050ed4:	781b      	ldrb	r3, [r3, #0]
10050ed6:	2b00      	cmp	r3, #0
10050ed8:	d101      	bne.n	10050ede <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
10050eda:	2300      	movs	r3, #0
10050edc:	e009      	b.n	10050ef2 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
10050ede:	2317      	movs	r3, #23
10050ee0:	18fb      	adds	r3, r7, r3
10050ee2:	781b      	ldrb	r3, [r3, #0]
10050ee4:	2b02      	cmp	r3, #2
10050ee6:	d102      	bne.n	10050eee <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10050ee8:	2301      	movs	r3, #1
10050eea:	425b      	negs	r3, r3
10050eec:	e001      	b.n	10050ef2 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
10050eee:	2302      	movs	r3, #2
10050ef0:	425b      	negs	r3, r3
}
10050ef2:	0018      	movs	r0, r3
10050ef4:	46bd      	mov	sp, r7
10050ef6:	b007      	add	sp, #28
10050ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050efa:	46c0      	nop			@ (mov r8, r8)
10050efc:	2000236c 	.word	0x2000236c
10050f00:	2000235c 	.word	0x2000235c
10050f04:	2000234c 	.word	0x2000234c

10050f08 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
10050f08:	b5b0      	push	{r4, r5, r7, lr}
10050f0a:	b086      	sub	sp, #24
10050f0c:	af02      	add	r7, sp, #8
10050f0e:	0004      	movs	r4, r0
10050f10:	0008      	movs	r0, r1
10050f12:	0011      	movs	r1, r2
10050f14:	603b      	str	r3, [r7, #0]
10050f16:	1dfb      	adds	r3, r7, #7
10050f18:	1c22      	adds	r2, r4, #0
10050f1a:	701a      	strb	r2, [r3, #0]
10050f1c:	1dbb      	adds	r3, r7, #6
10050f1e:	1c02      	adds	r2, r0, #0
10050f20:	701a      	strb	r2, [r3, #0]
10050f22:	1d3b      	adds	r3, r7, #4
10050f24:	1c0a      	adds	r2, r1, #0
10050f26:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10050f28:	1dbb      	adds	r3, r7, #6
10050f2a:	781b      	ldrb	r3, [r3, #0]
10050f2c:	2b02      	cmp	r3, #2
10050f2e:	d107      	bne.n	10050f40 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10050f30:	4b2e      	ldr	r3, [pc, #184]	@ (10050fec <BLEPLAT_NvmGet+0xe4>)
10050f32:	4a2f      	ldr	r2, [pc, #188]	@ (10050ff0 <BLEPLAT_NvmGet+0xe8>)
10050f34:	601a      	str	r2, [r3, #0]
    db_id = 1;
10050f36:	230e      	movs	r3, #14
10050f38:	18fb      	adds	r3, r7, r3
10050f3a:	2201      	movs	r2, #1
10050f3c:	701a      	strb	r2, [r3, #0]
10050f3e:	e006      	b.n	10050f4e <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10050f40:	4b2a      	ldr	r3, [pc, #168]	@ (10050fec <BLEPLAT_NvmGet+0xe4>)
10050f42:	4a2c      	ldr	r2, [pc, #176]	@ (10050ff4 <BLEPLAT_NvmGet+0xec>)
10050f44:	601a      	str	r2, [r3, #0]
    db_id = 0;
10050f46:	230e      	movs	r3, #14
10050f48:	18fb      	adds	r3, r7, r3
10050f4a:	2200      	movs	r2, #0
10050f4c:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10050f4e:	1dfb      	adds	r3, r7, #7
10050f50:	781b      	ldrb	r3, [r3, #0]
10050f52:	2b02      	cmp	r3, #2
10050f54:	d112      	bne.n	10050f7c <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10050f56:	4b25      	ldr	r3, [pc, #148]	@ (10050fec <BLEPLAT_NvmGet+0xe4>)
10050f58:	6818      	ldr	r0, [r3, #0]
10050f5a:	230f      	movs	r3, #15
10050f5c:	18fc      	adds	r4, r7, r3
10050f5e:	2320      	movs	r3, #32
10050f60:	18fb      	adds	r3, r7, r3
10050f62:	881d      	ldrh	r5, [r3, #0]
10050f64:	683a      	ldr	r2, [r7, #0]
10050f66:	1d3b      	adds	r3, r7, #4
10050f68:	8819      	ldrh	r1, [r3, #0]
10050f6a:	230c      	movs	r3, #12
10050f6c:	18fb      	adds	r3, r7, r3
10050f6e:	9300      	str	r3, [sp, #0]
10050f70:	002b      	movs	r3, r5
10050f72:	f7fe fadd 	bl	1004f530 <NVMDB_ReadCurrentRecord>
10050f76:	0003      	movs	r3, r0
10050f78:	7023      	strb	r3, [r4, #0]
10050f7a:	e021      	b.n	10050fc0 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10050f7c:	1dfb      	adds	r3, r7, #7
10050f7e:	781b      	ldrb	r3, [r3, #0]
10050f80:	2b00      	cmp	r3, #0
10050f82:	d108      	bne.n	10050f96 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10050f84:	4b19      	ldr	r3, [pc, #100]	@ (10050fec <BLEPLAT_NvmGet+0xe4>)
10050f86:	681a      	ldr	r2, [r3, #0]
10050f88:	230e      	movs	r3, #14
10050f8a:	18fb      	adds	r3, r7, r3
10050f8c:	781b      	ldrb	r3, [r3, #0]
10050f8e:	0011      	movs	r1, r2
10050f90:	0018      	movs	r0, r3
10050f92:	f7fe fa5f 	bl	1004f454 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10050f96:	4b15      	ldr	r3, [pc, #84]	@ (10050fec <BLEPLAT_NvmGet+0xe4>)
10050f98:	6818      	ldr	r0, [r3, #0]
10050f9a:	230f      	movs	r3, #15
10050f9c:	18fc      	adds	r4, r7, r3
10050f9e:	683d      	ldr	r5, [r7, #0]
10050fa0:	1d3b      	adds	r3, r7, #4
10050fa2:	881a      	ldrh	r2, [r3, #0]
10050fa4:	1dbb      	adds	r3, r7, #6
10050fa6:	7819      	ldrb	r1, [r3, #0]
10050fa8:	230c      	movs	r3, #12
10050faa:	18fb      	adds	r3, r7, r3
10050fac:	9301      	str	r3, [sp, #4]
10050fae:	2320      	movs	r3, #32
10050fb0:	18fb      	adds	r3, r7, r3
10050fb2:	881b      	ldrh	r3, [r3, #0]
10050fb4:	9300      	str	r3, [sp, #0]
10050fb6:	002b      	movs	r3, r5
10050fb8:	f7fe fa80 	bl	1004f4bc <NVMDB_ReadNextRecord>
10050fbc:	0003      	movs	r3, r0
10050fbe:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10050fc0:	230f      	movs	r3, #15
10050fc2:	18fb      	adds	r3, r7, r3
10050fc4:	781b      	ldrb	r3, [r3, #0]
10050fc6:	2b00      	cmp	r3, #0
10050fc8:	d101      	bne.n	10050fce <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10050fca:	2300      	movs	r3, #0
10050fcc:	e009      	b.n	10050fe2 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
10050fce:	230f      	movs	r3, #15
10050fd0:	18fb      	adds	r3, r7, r3
10050fd2:	781b      	ldrb	r3, [r3, #0]
10050fd4:	2b04      	cmp	r3, #4
10050fd6:	d102      	bne.n	10050fde <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10050fd8:	2303      	movs	r3, #3
10050fda:	425b      	negs	r3, r3
10050fdc:	e001      	b.n	10050fe2 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
10050fde:	2302      	movs	r3, #2
10050fe0:	425b      	negs	r3, r3
}
10050fe2:	0018      	movs	r0, r3
10050fe4:	46bd      	mov	sp, r7
10050fe6:	b004      	add	sp, #16
10050fe8:	bdb0      	pop	{r4, r5, r7, pc}
10050fea:	46c0      	nop			@ (mov r8, r8)
10050fec:	2000236c 	.word	0x2000236c
10050ff0:	2000235c 	.word	0x2000235c
10050ff4:	2000234c 	.word	0x2000234c

10050ff8 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
10050ff8:	b590      	push	{r4, r7, lr}
10050ffa:	b085      	sub	sp, #20
10050ffc:	af00      	add	r7, sp, #0
10050ffe:	6039      	str	r1, [r7, #0]
10051000:	0011      	movs	r1, r2
10051002:	1dbb      	adds	r3, r7, #6
10051004:	1c02      	adds	r2, r0, #0
10051006:	801a      	strh	r2, [r3, #0]
10051008:	1d3b      	adds	r3, r7, #4
1005100a:	1c0a      	adds	r2, r1, #0
1005100c:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
1005100e:	4b0e      	ldr	r3, [pc, #56]	@ (10051048 <BLEPLAT_NvmCompare+0x50>)
10051010:	6818      	ldr	r0, [r3, #0]
10051012:	1d3b      	adds	r3, r7, #4
10051014:	881c      	ldrh	r4, [r3, #0]
10051016:	683a      	ldr	r2, [r7, #0]
10051018:	1dbb      	adds	r3, r7, #6
1005101a:	8819      	ldrh	r1, [r3, #0]
1005101c:	0023      	movs	r3, r4
1005101e:	f7fd fa83 	bl	1004e528 <NVMDB_CompareCurrentRecord>
10051022:	0003      	movs	r3, r0
10051024:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
10051026:	68fb      	ldr	r3, [r7, #12]
10051028:	2b00      	cmp	r3, #0
1005102a:	d101      	bne.n	10051030 <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
1005102c:	2300      	movs	r3, #0
1005102e:	e007      	b.n	10051040 <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
10051030:	68fb      	ldr	r3, [r7, #12]
10051032:	2b00      	cmp	r3, #0
10051034:	da02      	bge.n	1005103c <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
10051036:	1d3b      	adds	r3, r7, #4
10051038:	881b      	ldrh	r3, [r3, #0]
1005103a:	e001      	b.n	10051040 <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
1005103c:	2303      	movs	r3, #3
1005103e:	425b      	negs	r3, r3
  }
}
10051040:	0018      	movs	r0, r3
10051042:	46bd      	mov	sp, r7
10051044:	b005      	add	sp, #20
10051046:	bd90      	pop	{r4, r7, pc}
10051048:	2000236c 	.word	0x2000236c

1005104c <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
1005104c:	b580      	push	{r7, lr}
1005104e:	b082      	sub	sp, #8
10051050:	af00      	add	r7, sp, #0
10051052:	0002      	movs	r2, r0
10051054:	1dfb      	adds	r3, r7, #7
10051056:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
10051058:	1dfb      	adds	r3, r7, #7
1005105a:	781b      	ldrb	r3, [r3, #0]
1005105c:	2b02      	cmp	r3, #2
1005105e:	d10a      	bne.n	10051076 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
10051060:	4b0b      	ldr	r3, [pc, #44]	@ (10051090 <BLEPLAT_NvmDiscard+0x44>)
10051062:	681a      	ldr	r2, [r3, #0]
10051064:	4b0b      	ldr	r3, [pc, #44]	@ (10051094 <BLEPLAT_NvmDiscard+0x48>)
10051066:	429a      	cmp	r2, r3
10051068:	d00d      	beq.n	10051086 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
1005106a:	4b09      	ldr	r3, [pc, #36]	@ (10051090 <BLEPLAT_NvmDiscard+0x44>)
1005106c:	681b      	ldr	r3, [r3, #0]
1005106e:	0018      	movs	r0, r3
10051070:	f7fe faf8 	bl	1004f664 <NVMDB_DeleteRecord>
10051074:	e008      	b.n	10051088 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
10051076:	1dfb      	adds	r3, r7, #7
10051078:	781b      	ldrb	r3, [r3, #0]
1005107a:	2b03      	cmp	r3, #3
1005107c:	d104      	bne.n	10051088 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
1005107e:	2000      	movs	r0, #0
10051080:	f7fe fafe 	bl	1004f680 <NVMDB_Erase>
10051084:	e000      	b.n	10051088 <BLEPLAT_NvmDiscard+0x3c>
      return;
10051086:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
10051088:	46bd      	mov	sp, r7
1005108a:	b002      	add	sp, #8
1005108c:	bd80      	pop	{r7, pc}
1005108e:	46c0      	nop			@ (mov r8, r8)
10051090:	2000236c 	.word	0x2000236c
10051094:	2000235c 	.word	0x2000235c

10051098 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10051098:	b580      	push	{r7, lr}
1005109a:	b084      	sub	sp, #16
1005109c:	af00      	add	r7, sp, #0
1005109e:	60f8      	str	r0, [r7, #12]
100510a0:	60b9      	str	r1, [r7, #8]
100510a2:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
100510a4:	687a      	ldr	r2, [r7, #4]
100510a6:	68b9      	ldr	r1, [r7, #8]
100510a8:	68fb      	ldr	r3, [r7, #12]
100510aa:	0018      	movs	r0, r3
100510ac:	f7ef f82a 	bl	10040104 <Osal_MemCpy>
}
100510b0:	46c0      	nop			@ (mov r8, r8)
100510b2:	46bd      	mov	sp, r7
100510b4:	b004      	add	sp, #16
100510b6:	bd80      	pop	{r7, pc}

100510b8 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
100510b8:	b580      	push	{r7, lr}
100510ba:	b084      	sub	sp, #16
100510bc:	af00      	add	r7, sp, #0
100510be:	60f8      	str	r0, [r7, #12]
100510c0:	60b9      	str	r1, [r7, #8]
100510c2:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
100510c4:	687a      	ldr	r2, [r7, #4]
100510c6:	68b9      	ldr	r1, [r7, #8]
100510c8:	68fb      	ldr	r3, [r7, #12]
100510ca:	0018      	movs	r0, r3
100510cc:	f015 f9e8 	bl	100664a0 <memset>
}
100510d0:	46c0      	nop			@ (mov r8, r8)
100510d2:	46bd      	mov	sp, r7
100510d4:	b004      	add	sp, #16
100510d6:	bd80      	pop	{r7, pc}

100510d8 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
100510d8:	b580      	push	{r7, lr}
100510da:	b084      	sub	sp, #16
100510dc:	af00      	add	r7, sp, #0
100510de:	60f8      	str	r0, [r7, #12]
100510e0:	60b9      	str	r1, [r7, #8]
100510e2:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
100510e4:	687a      	ldr	r2, [r7, #4]
100510e6:	68b9      	ldr	r1, [r7, #8]
100510e8:	68fb      	ldr	r3, [r7, #12]
100510ea:	0018      	movs	r0, r3
100510ec:	f015 f9ca 	bl	10066484 <memcmp>
100510f0:	0003      	movs	r3, r0
}
100510f2:	0018      	movs	r0, r3
100510f4:	46bd      	mov	sp, r7
100510f6:	b004      	add	sp, #16
100510f8:	bd80      	pop	{r7, pc}

100510fa <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
100510fa:	b590      	push	{r4, r7, lr}
100510fc:	b089      	sub	sp, #36	@ 0x24
100510fe:	af00      	add	r7, sp, #0
10051100:	60f8      	str	r0, [r7, #12]
10051102:	60b9      	str	r1, [r7, #8]
10051104:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10051106:	2410      	movs	r4, #16
10051108:	193b      	adds	r3, r7, r4
1005110a:	0018      	movs	r0, r3
1005110c:	f7ff f85a 	bl	100501c4 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10051110:	0021      	movs	r1, r4
10051112:	187b      	adds	r3, r7, r1
10051114:	781a      	ldrb	r2, [r3, #0]
10051116:	68fb      	ldr	r3, [r7, #12]
10051118:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
1005111a:	187b      	adds	r3, r7, r1
1005111c:	785a      	ldrb	r2, [r3, #1]
1005111e:	68bb      	ldr	r3, [r7, #8]
10051120:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10051122:	187b      	adds	r3, r7, r1
10051124:	789a      	ldrb	r2, [r3, #2]
10051126:	687b      	ldr	r3, [r7, #4]
10051128:	701a      	strb	r2, [r3, #0]
}
1005112a:	46c0      	nop			@ (mov r8, r8)
1005112c:	46bd      	mov	sp, r7
1005112e:	b009      	add	sp, #36	@ 0x24
10051130:	bd90      	pop	{r4, r7, pc}

10051132 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10051132:	b580      	push	{r7, lr}
10051134:	b084      	sub	sp, #16
10051136:	af00      	add	r7, sp, #0
10051138:	60f8      	str	r0, [r7, #12]
1005113a:	60b9      	str	r1, [r7, #8]
1005113c:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
1005113e:	687a      	ldr	r2, [r7, #4]
10051140:	68b9      	ldr	r1, [r7, #8]
10051142:	68fb      	ldr	r3, [r7, #12]
10051144:	0018      	movs	r0, r3
10051146:	f7fc fe6b 	bl	1004de20 <HW_AES_Encrypt>
}
1005114a:	46c0      	nop			@ (mov r8, r8)
1005114c:	46bd      	mov	sp, r7
1005114e:	b004      	add	sp, #16
10051150:	bd80      	pop	{r7, pc}

10051152 <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
10051152:	b580      	push	{r7, lr}
10051154:	b082      	sub	sp, #8
10051156:	af00      	add	r7, sp, #0
10051158:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
1005115a:	687b      	ldr	r3, [r7, #4]
1005115c:	0018      	movs	r0, r3
1005115e:	f016 f843 	bl	100671e8 <AES_CMAC_Encrypt_Init>
10051162:	0003      	movs	r3, r0
}
10051164:	0018      	movs	r0, r3
10051166:	46bd      	mov	sp, r7
10051168:	b002      	add	sp, #8
1005116a:	bd80      	pop	{r7, pc}

1005116c <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
1005116c:	b580      	push	{r7, lr}
1005116e:	b084      	sub	sp, #16
10051170:	af00      	add	r7, sp, #0
10051172:	60f8      	str	r0, [r7, #12]
10051174:	60b9      	str	r1, [r7, #8]
10051176:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
10051178:	687a      	ldr	r2, [r7, #4]
1005117a:	68b9      	ldr	r1, [r7, #8]
1005117c:	68fb      	ldr	r3, [r7, #12]
1005117e:	0018      	movs	r0, r3
10051180:	f015 fec8 	bl	10066f14 <AES_CMAC_Encrypt_Append>
10051184:	0003      	movs	r3, r0
}
10051186:	0018      	movs	r0, r3
10051188:	46bd      	mov	sp, r7
1005118a:	b004      	add	sp, #16
1005118c:	bd80      	pop	{r7, pc}

1005118e <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
1005118e:	b580      	push	{r7, lr}
10051190:	b084      	sub	sp, #16
10051192:	af00      	add	r7, sp, #0
10051194:	60f8      	str	r0, [r7, #12]
10051196:	60b9      	str	r1, [r7, #8]
10051198:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
1005119a:	687a      	ldr	r2, [r7, #4]
1005119c:	68b9      	ldr	r1, [r7, #8]
1005119e:	68fb      	ldr	r3, [r7, #12]
100511a0:	0018      	movs	r0, r3
100511a2:	f015 ffeb 	bl	1006717c <AES_CMAC_Encrypt_Finish>
100511a6:	0003      	movs	r3, r0
}
100511a8:	0018      	movs	r0, r3
100511aa:	46bd      	mov	sp, r7
100511ac:	b004      	add	sp, #16
100511ae:	bd80      	pop	{r7, pc}

100511b0 <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
100511b0:	b580      	push	{r7, lr}
100511b2:	b082      	sub	sp, #8
100511b4:	af00      	add	r7, sp, #0
100511b6:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
100511b8:	687b      	ldr	r3, [r7, #4]
100511ba:	0018      	movs	r0, r3
100511bc:	f7fc ff98 	bl	1004e0f0 <HW_RNG_GetRandom16>
}
100511c0:	46c0      	nop			@ (mov r8, r8)
100511c2:	46bd      	mov	sp, r7
100511c4:	b002      	add	sp, #8
100511c6:	bd80      	pop	{r7, pc}

100511c8 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
100511c8:	b580      	push	{r7, lr}
100511ca:	b082      	sub	sp, #8
100511cc:	af00      	add	r7, sp, #0
100511ce:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
100511d0:	687b      	ldr	r3, [r7, #4]
100511d2:	0018      	movs	r0, r3
100511d4:	f7fc ffa6 	bl	1004e124 <HW_RNG_GetRandom32>
}
100511d8:	46c0      	nop			@ (mov r8, r8)
100511da:	46bd      	mov	sp, r7
100511dc:	b002      	add	sp, #8
100511de:	bd80      	pop	{r7, pc}

100511e0 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
100511e0:	b580      	push	{r7, lr}
100511e2:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
100511e4:	f7fe ff12 	bl	1005000c <RADIO_GetMaxPALevel>
100511e8:	0003      	movs	r3, r0
}
100511ea:	0018      	movs	r0, r3
100511ec:	46bd      	mov	sp, r7
100511ee:	bd80      	pop	{r7, pc}

100511f0 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
100511f0:	b580      	push	{r7, lr}
100511f2:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
100511f4:	f7fe ff10 	bl	10050018 <RADIO_GetDefaultPALevel>
100511f8:	0003      	movs	r3, r0
}
100511fa:	0018      	movs	r0, r3
100511fc:	46bd      	mov	sp, r7
100511fe:	bd80      	pop	{r7, pc}

10051200 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
10051200:	b580      	push	{r7, lr}
10051202:	b082      	sub	sp, #8
10051204:	af00      	add	r7, sp, #0
10051206:	0002      	movs	r2, r0
10051208:	1dfb      	adds	r3, r7, #7
1005120a:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
1005120c:	1dfb      	adds	r3, r7, #7
1005120e:	781b      	ldrb	r3, [r3, #0]
10051210:	0018      	movs	r0, r3
10051212:	f7fe ff07 	bl	10050024 <RADIO_SetHighPower>
}
10051216:	46c0      	nop			@ (mov r8, r8)
10051218:	46bd      	mov	sp, r7
1005121a:	b002      	add	sp, #8
1005121c:	bd80      	pop	{r7, pc}

1005121e <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
1005121e:	b580      	push	{r7, lr}
10051220:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
10051222:	f7f8 fb91 	bl	10049948 <HAL_RADIO_ReadRSSI>
10051226:	0003      	movs	r3, r0
}
10051228:	0018      	movs	r0, r3
1005122a:	46bd      	mov	sp, r7
1005122c:	bd80      	pop	{r7, pc}

1005122e <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
1005122e:	b580      	push	{r7, lr}
10051230:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10051232:	f7f9 f8df 	bl	1004a3f4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10051236:	0002      	movs	r2, r0
10051238:	000b      	movs	r3, r1

}
1005123a:	0010      	movs	r0, r2
1005123c:	0019      	movs	r1, r3
1005123e:	46bd      	mov	sp, r7
10051240:	bd80      	pop	{r7, pc}

10051242 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10051242:	b580      	push	{r7, lr}
10051244:	b084      	sub	sp, #16
10051246:	af00      	add	r7, sp, #0
10051248:	60f8      	str	r0, [r7, #12]
1005124a:	603a      	str	r2, [r7, #0]
1005124c:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
1005124e:	683a      	ldr	r2, [r7, #0]
10051250:	687b      	ldr	r3, [r7, #4]
10051252:	68f9      	ldr	r1, [r7, #12]
10051254:	0008      	movs	r0, r1
10051256:	f7f9 f8df 	bl	1004a418 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
1005125a:	0003      	movs	r3, r0
}
1005125c:	0018      	movs	r0, r3
1005125e:	46bd      	mov	sp, r7
10051260:	b004      	add	sp, #16
10051262:	bd80      	pop	{r7, pc}

10051264 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10051264:	b580      	push	{r7, lr}
10051266:	b082      	sub	sp, #8
10051268:	af00      	add	r7, sp, #0
1005126a:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
1005126c:	687b      	ldr	r3, [r7, #4]
1005126e:	0018      	movs	r0, r3
10051270:	f7f9 f8ec 	bl	1004a44c <HAL_RADIO_TIMER_StopVirtualTimer>
}
10051274:	46c0      	nop			@ (mov r8, r8)
10051276:	46bd      	mov	sp, r7
10051278:	b002      	add	sp, #8
1005127a:	bd80      	pop	{r7, pc}

1005127c <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
1005127c:	b580      	push	{r7, lr}
1005127e:	b082      	sub	sp, #8
10051280:	af00      	add	r7, sp, #0
10051282:	6078      	str	r0, [r7, #4]
10051284:	0008      	movs	r0, r1
10051286:	0011      	movs	r1, r2
10051288:	1cfb      	adds	r3, r7, #3
1005128a:	1c02      	adds	r2, r0, #0
1005128c:	701a      	strb	r2, [r3, #0]
1005128e:	1cbb      	adds	r3, r7, #2
10051290:	1c0a      	adds	r2, r1, #0
10051292:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10051294:	1cbb      	adds	r3, r7, #2
10051296:	781a      	ldrb	r2, [r3, #0]
10051298:	1cfb      	adds	r3, r7, #3
1005129a:	7819      	ldrb	r1, [r3, #0]
1005129c:	687b      	ldr	r3, [r7, #4]
1005129e:	0018      	movs	r0, r3
100512a0:	f7f8 ff92 	bl	1004a1c8 <HAL_RADIO_TIMER_SetRadioTimerValue>
100512a4:	0003      	movs	r3, r0
100512a6:	b2db      	uxtb	r3, r3
}
100512a8:	0018      	movs	r0, r3
100512aa:	46bd      	mov	sp, r7
100512ac:	b002      	add	sp, #8
100512ae:	bd80      	pop	{r7, pc}

100512b0 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
100512b0:	b580      	push	{r7, lr}
100512b2:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
100512b4:	f7f8 ffd8 	bl	1004a268 <HAL_RADIO_TIMER_ClearRadioTimerValue>
100512b8:	0003      	movs	r3, r0
100512ba:	b2db      	uxtb	r3, r3
}
100512bc:	0018      	movs	r0, r3
100512be:	46bd      	mov	sp, r7
100512c0:	bd80      	pop	{r7, pc}

100512c2 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
100512c2:	b580      	push	{r7, lr}
100512c4:	b082      	sub	sp, #8
100512c6:	af00      	add	r7, sp, #0
100512c8:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
100512ca:	687b      	ldr	r3, [r7, #4]
100512cc:	0018      	movs	r0, r3
100512ce:	f7f8 ff67 	bl	1004a1a0 <HAL_RADIO_TIMER_GetAnchorPoint>
100512d2:	0002      	movs	r2, r0
100512d4:	000b      	movs	r3, r1
}
100512d6:	0010      	movs	r0, r2
100512d8:	0019      	movs	r1, r3
100512da:	46bd      	mov	sp, r7
100512dc:	b002      	add	sp, #8
100512de:	bd80      	pop	{r7, pc}

100512e0 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
100512e0:	b580      	push	{r7, lr}
100512e2:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
100512e4:	f7f9 f834 	bl	1004a350 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
100512e8:	46c0      	nop			@ (mov r8, r8)
100512ea:	46bd      	mov	sp, r7
100512ec:	bd80      	pop	{r7, pc}
	...

100512f0 <LL_RADIO_SetCurrentConnectionMachineNumber>:
{
100512f0:	b580      	push	{r7, lr}
100512f2:	b082      	sub	sp, #8
100512f4:	af00      	add	r7, sp, #0
100512f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
100512f8:	4b07      	ldr	r3, [pc, #28]	@ (10051318 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100512fa:	685b      	ldr	r3, [r3, #4]
100512fc:	227f      	movs	r2, #127	@ 0x7f
100512fe:	4393      	bics	r3, r2
10051300:	0019      	movs	r1, r3
10051302:	687b      	ldr	r3, [r7, #4]
10051304:	227f      	movs	r2, #127	@ 0x7f
10051306:	401a      	ands	r2, r3
10051308:	4b03      	ldr	r3, [pc, #12]	@ (10051318 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
1005130a:	430a      	orrs	r2, r1
1005130c:	605a      	str	r2, [r3, #4]
}
1005130e:	46c0      	nop			@ (mov r8, r8)
10051310:	46bd      	mov	sp, r7
10051312:	b002      	add	sp, #8
10051314:	bd80      	pop	{r7, pc}
10051316:	46c0      	nop			@ (mov r8, r8)
10051318:	200000c0 	.word	0x200000c0

1005131c <LL_RADIO_GlobalEnableBlue>:
{
1005131c:	b580      	push	{r7, lr}
1005131e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10051320:	4b04      	ldr	r3, [pc, #16]	@ (10051334 <LL_RADIO_GlobalEnableBlue+0x18>)
10051322:	685a      	ldr	r2, [r3, #4]
10051324:	4b03      	ldr	r3, [pc, #12]	@ (10051334 <LL_RADIO_GlobalEnableBlue+0x18>)
10051326:	2180      	movs	r1, #128	@ 0x80
10051328:	430a      	orrs	r2, r1
1005132a:	605a      	str	r2, [r3, #4]
}
1005132c:	46c0      	nop			@ (mov r8, r8)
1005132e:	46bd      	mov	sp, r7
10051330:	bd80      	pop	{r7, pc}
10051332:	46c0      	nop			@ (mov r8, r8)
10051334:	200000c0 	.word	0x200000c0

10051338 <LL_RADIO_GlobalDisableBlue>:
{
10051338:	b580      	push	{r7, lr}
1005133a:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
1005133c:	4b04      	ldr	r3, [pc, #16]	@ (10051350 <LL_RADIO_GlobalDisableBlue+0x18>)
1005133e:	685a      	ldr	r2, [r3, #4]
10051340:	4b03      	ldr	r3, [pc, #12]	@ (10051350 <LL_RADIO_GlobalDisableBlue+0x18>)
10051342:	2180      	movs	r1, #128	@ 0x80
10051344:	438a      	bics	r2, r1
10051346:	605a      	str	r2, [r3, #4]
}
10051348:	46c0      	nop			@ (mov r8, r8)
1005134a:	46bd      	mov	sp, r7
1005134c:	bd80      	pop	{r7, pc}
1005134e:	46c0      	nop			@ (mov r8, r8)
10051350:	200000c0 	.word	0x200000c0

10051354 <LL_RADIO_SetReceiveWindowTimeout>:
{
10051354:	b580      	push	{r7, lr}
10051356:	b082      	sub	sp, #8
10051358:	af00      	add	r7, sp, #0
1005135a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
1005135c:	4b07      	ldr	r3, [pc, #28]	@ (1005137c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1005135e:	691b      	ldr	r3, [r3, #16]
10051360:	4a07      	ldr	r2, [pc, #28]	@ (10051380 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10051362:	4013      	ands	r3, r2
10051364:	0019      	movs	r1, r3
10051366:	687b      	ldr	r3, [r7, #4]
10051368:	021b      	lsls	r3, r3, #8
1005136a:	4a06      	ldr	r2, [pc, #24]	@ (10051384 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
1005136c:	401a      	ands	r2, r3
1005136e:	4b03      	ldr	r3, [pc, #12]	@ (1005137c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10051370:	430a      	orrs	r2, r1
10051372:	611a      	str	r2, [r3, #16]
}
10051374:	46c0      	nop			@ (mov r8, r8)
10051376:	46bd      	mov	sp, r7
10051378:	b002      	add	sp, #8
1005137a:	bd80      	pop	{r7, pc}
1005137c:	200000c0 	.word	0x200000c0
10051380:	f00000ff 	.word	0xf00000ff
10051384:	0fffff00 	.word	0x0fffff00

10051388 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
10051388:	b580      	push	{r7, lr}
1005138a:	b082      	sub	sp, #8
1005138c:	af00      	add	r7, sp, #0
1005138e:	0002      	movs	r2, r0
10051390:	6039      	str	r1, [r7, #0]
10051392:	1dfb      	adds	r3, r7, #7
10051394:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
10051396:	1dfb      	adds	r3, r7, #7
10051398:	781b      	ldrb	r3, [r3, #0]
1005139a:	225c      	movs	r2, #92	@ 0x5c
1005139c:	4353      	muls	r3, r2
1005139e:	4a0b      	ldr	r2, [pc, #44]	@ (100513cc <LL_RADIO_SetUnmappedChannel+0x44>)
100513a0:	4694      	mov	ip, r2
100513a2:	4463      	add	r3, ip
100513a4:	681b      	ldr	r3, [r3, #0]
100513a6:	223f      	movs	r2, #63	@ 0x3f
100513a8:	4393      	bics	r3, r2
100513aa:	0019      	movs	r1, r3
100513ac:	683b      	ldr	r3, [r7, #0]
100513ae:	223f      	movs	r2, #63	@ 0x3f
100513b0:	401a      	ands	r2, r3
100513b2:	1dfb      	adds	r3, r7, #7
100513b4:	781b      	ldrb	r3, [r3, #0]
100513b6:	205c      	movs	r0, #92	@ 0x5c
100513b8:	4343      	muls	r3, r0
100513ba:	4804      	ldr	r0, [pc, #16]	@ (100513cc <LL_RADIO_SetUnmappedChannel+0x44>)
100513bc:	4684      	mov	ip, r0
100513be:	4463      	add	r3, ip
100513c0:	430a      	orrs	r2, r1
100513c2:	601a      	str	r2, [r3, #0]
}
100513c4:	46c0      	nop			@ (mov r8, r8)
100513c6:	46bd      	mov	sp, r7
100513c8:	b002      	add	sp, #8
100513ca:	bd80      	pop	{r7, pc}
100513cc:	200000dc 	.word	0x200000dc

100513d0 <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
100513d0:	b580      	push	{r7, lr}
100513d2:	b082      	sub	sp, #8
100513d4:	af00      	add	r7, sp, #0
100513d6:	0002      	movs	r2, r0
100513d8:	1dfb      	adds	r3, r7, #7
100513da:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
100513dc:	1dfb      	adds	r3, r7, #7
100513de:	781b      	ldrb	r3, [r3, #0]
100513e0:	225c      	movs	r2, #92	@ 0x5c
100513e2:	4353      	muls	r3, r2
100513e4:	4a08      	ldr	r2, [pc, #32]	@ (10051408 <LL_RADIO_RadioCommandList_Enable+0x38>)
100513e6:	4694      	mov	ip, r2
100513e8:	4463      	add	r3, ip
100513ea:	681a      	ldr	r2, [r3, #0]
100513ec:	1dfb      	adds	r3, r7, #7
100513ee:	781b      	ldrb	r3, [r3, #0]
100513f0:	215c      	movs	r1, #92	@ 0x5c
100513f2:	434b      	muls	r3, r1
100513f4:	4904      	ldr	r1, [pc, #16]	@ (10051408 <LL_RADIO_RadioCommandList_Enable+0x38>)
100513f6:	468c      	mov	ip, r1
100513f8:	4463      	add	r3, ip
100513fa:	2140      	movs	r1, #64	@ 0x40
100513fc:	430a      	orrs	r2, r1
100513fe:	601a      	str	r2, [r3, #0]
}
10051400:	46c0      	nop			@ (mov r8, r8)
10051402:	46bd      	mov	sp, r7
10051404:	b002      	add	sp, #8
10051406:	bd80      	pop	{r7, pc}
10051408:	200000dc 	.word	0x200000dc

1005140c <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
1005140c:	b580      	push	{r7, lr}
1005140e:	b082      	sub	sp, #8
10051410:	af00      	add	r7, sp, #0
10051412:	0002      	movs	r2, r0
10051414:	1dfb      	adds	r3, r7, #7
10051416:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10051418:	1dfb      	adds	r3, r7, #7
1005141a:	781b      	ldrb	r3, [r3, #0]
1005141c:	225c      	movs	r2, #92	@ 0x5c
1005141e:	4353      	muls	r3, r2
10051420:	4a08      	ldr	r2, [pc, #32]	@ (10051444 <LL_RADIO_RadioCommandList_Disable+0x38>)
10051422:	4694      	mov	ip, r2
10051424:	4463      	add	r3, ip
10051426:	681a      	ldr	r2, [r3, #0]
10051428:	1dfb      	adds	r3, r7, #7
1005142a:	781b      	ldrb	r3, [r3, #0]
1005142c:	215c      	movs	r1, #92	@ 0x5c
1005142e:	434b      	muls	r3, r1
10051430:	4904      	ldr	r1, [pc, #16]	@ (10051444 <LL_RADIO_RadioCommandList_Disable+0x38>)
10051432:	468c      	mov	ip, r1
10051434:	4463      	add	r3, ip
10051436:	2140      	movs	r1, #64	@ 0x40
10051438:	438a      	bics	r2, r1
1005143a:	601a      	str	r2, [r3, #0]
}
1005143c:	46c0      	nop			@ (mov r8, r8)
1005143e:	46bd      	mov	sp, r7
10051440:	b002      	add	sp, #8
10051442:	bd80      	pop	{r7, pc}
10051444:	200000dc 	.word	0x200000dc

10051448 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10051448:	b580      	push	{r7, lr}
1005144a:	b082      	sub	sp, #8
1005144c:	af00      	add	r7, sp, #0
1005144e:	0002      	movs	r2, r0
10051450:	1dfb      	adds	r3, r7, #7
10051452:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10051454:	1dfb      	adds	r3, r7, #7
10051456:	781b      	ldrb	r3, [r3, #0]
10051458:	225c      	movs	r2, #92	@ 0x5c
1005145a:	4353      	muls	r3, r2
1005145c:	4a08      	ldr	r2, [pc, #32]	@ (10051480 <LL_RADIO_TxMode_Enable+0x38>)
1005145e:	4694      	mov	ip, r2
10051460:	4463      	add	r3, ip
10051462:	681a      	ldr	r2, [r3, #0]
10051464:	1dfb      	adds	r3, r7, #7
10051466:	781b      	ldrb	r3, [r3, #0]
10051468:	215c      	movs	r1, #92	@ 0x5c
1005146a:	434b      	muls	r3, r1
1005146c:	4904      	ldr	r1, [pc, #16]	@ (10051480 <LL_RADIO_TxMode_Enable+0x38>)
1005146e:	468c      	mov	ip, r1
10051470:	4463      	add	r3, ip
10051472:	2180      	movs	r1, #128	@ 0x80
10051474:	430a      	orrs	r2, r1
10051476:	601a      	str	r2, [r3, #0]
}
10051478:	46c0      	nop			@ (mov r8, r8)
1005147a:	46bd      	mov	sp, r7
1005147c:	b002      	add	sp, #8
1005147e:	bd80      	pop	{r7, pc}
10051480:	200000dc 	.word	0x200000dc

10051484 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10051484:	b580      	push	{r7, lr}
10051486:	b082      	sub	sp, #8
10051488:	af00      	add	r7, sp, #0
1005148a:	0002      	movs	r2, r0
1005148c:	1dfb      	adds	r3, r7, #7
1005148e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10051490:	1dfb      	adds	r3, r7, #7
10051492:	781b      	ldrb	r3, [r3, #0]
10051494:	225c      	movs	r2, #92	@ 0x5c
10051496:	4353      	muls	r3, r2
10051498:	4a08      	ldr	r2, [pc, #32]	@ (100514bc <LL_RADIO_TxMode_Disable+0x38>)
1005149a:	4694      	mov	ip, r2
1005149c:	4463      	add	r3, ip
1005149e:	681a      	ldr	r2, [r3, #0]
100514a0:	1dfb      	adds	r3, r7, #7
100514a2:	781b      	ldrb	r3, [r3, #0]
100514a4:	215c      	movs	r1, #92	@ 0x5c
100514a6:	434b      	muls	r3, r1
100514a8:	4904      	ldr	r1, [pc, #16]	@ (100514bc <LL_RADIO_TxMode_Disable+0x38>)
100514aa:	468c      	mov	ip, r1
100514ac:	4463      	add	r3, ip
100514ae:	2180      	movs	r1, #128	@ 0x80
100514b0:	438a      	bics	r2, r1
100514b2:	601a      	str	r2, [r3, #0]
}
100514b4:	46c0      	nop			@ (mov r8, r8)
100514b6:	46bd      	mov	sp, r7
100514b8:	b002      	add	sp, #8
100514ba:	bd80      	pop	{r7, pc}
100514bc:	200000dc 	.word	0x200000dc

100514c0 <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
100514c0:	b580      	push	{r7, lr}
100514c2:	b082      	sub	sp, #8
100514c4:	af00      	add	r7, sp, #0
100514c6:	0002      	movs	r2, r0
100514c8:	1dfb      	adds	r3, r7, #7
100514ca:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
100514cc:	1dfb      	adds	r3, r7, #7
100514ce:	781b      	ldrb	r3, [r3, #0]
100514d0:	225c      	movs	r2, #92	@ 0x5c
100514d2:	4353      	muls	r3, r2
100514d4:	4a07      	ldr	r2, [pc, #28]	@ (100514f4 <LL_RADIO_TxMode_IsEnabled+0x34>)
100514d6:	4694      	mov	ip, r2
100514d8:	4463      	add	r3, ip
100514da:	681b      	ldr	r3, [r3, #0]
100514dc:	2280      	movs	r2, #128	@ 0x80
100514de:	4013      	ands	r3, r2
100514e0:	2b80      	cmp	r3, #128	@ 0x80
100514e2:	d101      	bne.n	100514e8 <LL_RADIO_TxMode_IsEnabled+0x28>
100514e4:	2301      	movs	r3, #1
100514e6:	e000      	b.n	100514ea <LL_RADIO_TxMode_IsEnabled+0x2a>
100514e8:	2300      	movs	r3, #0
}
100514ea:	0018      	movs	r0, r3
100514ec:	46bd      	mov	sp, r7
100514ee:	b002      	add	sp, #8
100514f0:	bd80      	pop	{r7, pc}
100514f2:	46c0      	nop			@ (mov r8, r8)
100514f4:	200000dc 	.word	0x200000dc

100514f8 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
100514f8:	b580      	push	{r7, lr}
100514fa:	b082      	sub	sp, #8
100514fc:	af00      	add	r7, sp, #0
100514fe:	0002      	movs	r2, r0
10051500:	6039      	str	r1, [r7, #0]
10051502:	1dfb      	adds	r3, r7, #7
10051504:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10051506:	1dfb      	adds	r3, r7, #7
10051508:	781b      	ldrb	r3, [r3, #0]
1005150a:	225c      	movs	r2, #92	@ 0x5c
1005150c:	4353      	muls	r3, r2
1005150e:	4a0c      	ldr	r2, [pc, #48]	@ (10051540 <LL_RADIO_SetRemapChannel+0x48>)
10051510:	4694      	mov	ip, r2
10051512:	4463      	add	r3, ip
10051514:	681b      	ldr	r3, [r3, #0]
10051516:	4a0b      	ldr	r2, [pc, #44]	@ (10051544 <LL_RADIO_SetRemapChannel+0x4c>)
10051518:	4013      	ands	r3, r2
1005151a:	0019      	movs	r1, r3
1005151c:	683b      	ldr	r3, [r7, #0]
1005151e:	021a      	lsls	r2, r3, #8
10051520:	23fc      	movs	r3, #252	@ 0xfc
10051522:	019b      	lsls	r3, r3, #6
10051524:	401a      	ands	r2, r3
10051526:	1dfb      	adds	r3, r7, #7
10051528:	781b      	ldrb	r3, [r3, #0]
1005152a:	205c      	movs	r0, #92	@ 0x5c
1005152c:	4343      	muls	r3, r0
1005152e:	4804      	ldr	r0, [pc, #16]	@ (10051540 <LL_RADIO_SetRemapChannel+0x48>)
10051530:	4684      	mov	ip, r0
10051532:	4463      	add	r3, ip
10051534:	430a      	orrs	r2, r1
10051536:	601a      	str	r2, [r3, #0]
}
10051538:	46c0      	nop			@ (mov r8, r8)
1005153a:	46bd      	mov	sp, r7
1005153c:	b002      	add	sp, #8
1005153e:	bd80      	pop	{r7, pc}
10051540:	200000dc 	.word	0x200000dc
10051544:	ffffc0ff 	.word	0xffffc0ff

10051548 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
10051548:	b580      	push	{r7, lr}
1005154a:	b082      	sub	sp, #8
1005154c:	af00      	add	r7, sp, #0
1005154e:	0002      	movs	r2, r0
10051550:	1dfb      	adds	r3, r7, #7
10051552:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
10051554:	1dfb      	adds	r3, r7, #7
10051556:	781b      	ldrb	r3, [r3, #0]
10051558:	225c      	movs	r2, #92	@ 0x5c
1005155a:	4353      	muls	r3, r2
1005155c:	4a05      	ldr	r2, [pc, #20]	@ (10051574 <LL_RADIO_GetRemapChannel+0x2c>)
1005155e:	4694      	mov	ip, r2
10051560:	4463      	add	r3, ip
10051562:	681b      	ldr	r3, [r3, #0]
10051564:	0a1b      	lsrs	r3, r3, #8
10051566:	223f      	movs	r2, #63	@ 0x3f
10051568:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
1005156a:	0018      	movs	r0, r3
1005156c:	46bd      	mov	sp, r7
1005156e:	b002      	add	sp, #8
10051570:	bd80      	pop	{r7, pc}
10051572:	46c0      	nop			@ (mov r8, r8)
10051574:	200000dc 	.word	0x200000dc

10051578 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10051578:	b580      	push	{r7, lr}
1005157a:	b082      	sub	sp, #8
1005157c:	af00      	add	r7, sp, #0
1005157e:	0002      	movs	r2, r0
10051580:	1dfb      	adds	r3, r7, #7
10051582:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
10051584:	1dfb      	adds	r3, r7, #7
10051586:	781b      	ldrb	r3, [r3, #0]
10051588:	225c      	movs	r2, #92	@ 0x5c
1005158a:	4353      	muls	r3, r2
1005158c:	4a09      	ldr	r2, [pc, #36]	@ (100515b4 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1005158e:	4694      	mov	ip, r2
10051590:	4463      	add	r3, ip
10051592:	681a      	ldr	r2, [r3, #0]
10051594:	1dfb      	adds	r3, r7, #7
10051596:	781b      	ldrb	r3, [r3, #0]
10051598:	215c      	movs	r1, #92	@ 0x5c
1005159a:	434b      	muls	r3, r1
1005159c:	4905      	ldr	r1, [pc, #20]	@ (100515b4 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1005159e:	468c      	mov	ip, r1
100515a0:	4463      	add	r3, ip
100515a2:	2180      	movs	r1, #128	@ 0x80
100515a4:	0209      	lsls	r1, r1, #8
100515a6:	404a      	eors	r2, r1
100515a8:	601a      	str	r2, [r3, #0]
}
100515aa:	46c0      	nop			@ (mov r8, r8)
100515ac:	46bd      	mov	sp, r7
100515ae:	b002      	add	sp, #8
100515b0:	bd80      	pop	{r7, pc}
100515b2:	46c0      	nop			@ (mov r8, r8)
100515b4:	200000dc 	.word	0x200000dc

100515b8 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
100515b8:	b580      	push	{r7, lr}
100515ba:	b082      	sub	sp, #8
100515bc:	af00      	add	r7, sp, #0
100515be:	0002      	movs	r2, r0
100515c0:	1dfb      	adds	r3, r7, #7
100515c2:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
100515c4:	1dfb      	adds	r3, r7, #7
100515c6:	781b      	ldrb	r3, [r3, #0]
100515c8:	225c      	movs	r2, #92	@ 0x5c
100515ca:	4353      	muls	r3, r2
100515cc:	4a09      	ldr	r2, [pc, #36]	@ (100515f4 <LL_RADIO_Encryption_Enable+0x3c>)
100515ce:	4694      	mov	ip, r2
100515d0:	4463      	add	r3, ip
100515d2:	681a      	ldr	r2, [r3, #0]
100515d4:	1dfb      	adds	r3, r7, #7
100515d6:	781b      	ldrb	r3, [r3, #0]
100515d8:	215c      	movs	r1, #92	@ 0x5c
100515da:	434b      	muls	r3, r1
100515dc:	4905      	ldr	r1, [pc, #20]	@ (100515f4 <LL_RADIO_Encryption_Enable+0x3c>)
100515de:	468c      	mov	ip, r1
100515e0:	4463      	add	r3, ip
100515e2:	2180      	movs	r1, #128	@ 0x80
100515e4:	0389      	lsls	r1, r1, #14
100515e6:	430a      	orrs	r2, r1
100515e8:	601a      	str	r2, [r3, #0]
}
100515ea:	46c0      	nop			@ (mov r8, r8)
100515ec:	46bd      	mov	sp, r7
100515ee:	b002      	add	sp, #8
100515f0:	bd80      	pop	{r7, pc}
100515f2:	46c0      	nop			@ (mov r8, r8)
100515f4:	200000dc 	.word	0x200000dc

100515f8 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
100515f8:	b580      	push	{r7, lr}
100515fa:	b082      	sub	sp, #8
100515fc:	af00      	add	r7, sp, #0
100515fe:	0002      	movs	r2, r0
10051600:	1dfb      	adds	r3, r7, #7
10051602:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10051604:	1dfb      	adds	r3, r7, #7
10051606:	781b      	ldrb	r3, [r3, #0]
10051608:	225c      	movs	r2, #92	@ 0x5c
1005160a:	4353      	muls	r3, r2
1005160c:	4a08      	ldr	r2, [pc, #32]	@ (10051630 <LL_RADIO_Encryption_Disable+0x38>)
1005160e:	4694      	mov	ip, r2
10051610:	4463      	add	r3, ip
10051612:	681a      	ldr	r2, [r3, #0]
10051614:	1dfb      	adds	r3, r7, #7
10051616:	781b      	ldrb	r3, [r3, #0]
10051618:	215c      	movs	r1, #92	@ 0x5c
1005161a:	434b      	muls	r3, r1
1005161c:	4904      	ldr	r1, [pc, #16]	@ (10051630 <LL_RADIO_Encryption_Disable+0x38>)
1005161e:	468c      	mov	ip, r1
10051620:	4463      	add	r3, ip
10051622:	4904      	ldr	r1, [pc, #16]	@ (10051634 <LL_RADIO_Encryption_Disable+0x3c>)
10051624:	400a      	ands	r2, r1
10051626:	601a      	str	r2, [r3, #0]
}
10051628:	46c0      	nop			@ (mov r8, r8)
1005162a:	46bd      	mov	sp, r7
1005162c:	b002      	add	sp, #8
1005162e:	bd80      	pop	{r7, pc}
10051630:	200000dc 	.word	0x200000dc
10051634:	ffdfffff 	.word	0xffdfffff

10051638 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10051638:	b580      	push	{r7, lr}
1005163a:	b082      	sub	sp, #8
1005163c:	af00      	add	r7, sp, #0
1005163e:	0002      	movs	r2, r0
10051640:	6039      	str	r1, [r7, #0]
10051642:	1dfb      	adds	r3, r7, #7
10051644:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10051646:	1dfb      	adds	r3, r7, #7
10051648:	781b      	ldrb	r3, [r3, #0]
1005164a:	225c      	movs	r2, #92	@ 0x5c
1005164c:	4353      	muls	r3, r2
1005164e:	4a0c      	ldr	r2, [pc, #48]	@ (10051680 <LL_RADIO_SetTransmissionPhy+0x48>)
10051650:	4694      	mov	ip, r2
10051652:	4463      	add	r3, ip
10051654:	681b      	ldr	r3, [r3, #0]
10051656:	4a0b      	ldr	r2, [pc, #44]	@ (10051684 <LL_RADIO_SetTransmissionPhy+0x4c>)
10051658:	4013      	ands	r3, r2
1005165a:	0019      	movs	r1, r3
1005165c:	683b      	ldr	r3, [r7, #0]
1005165e:	061a      	lsls	r2, r3, #24
10051660:	23e0      	movs	r3, #224	@ 0xe0
10051662:	04db      	lsls	r3, r3, #19
10051664:	401a      	ands	r2, r3
10051666:	1dfb      	adds	r3, r7, #7
10051668:	781b      	ldrb	r3, [r3, #0]
1005166a:	205c      	movs	r0, #92	@ 0x5c
1005166c:	4343      	muls	r3, r0
1005166e:	4804      	ldr	r0, [pc, #16]	@ (10051680 <LL_RADIO_SetTransmissionPhy+0x48>)
10051670:	4684      	mov	ip, r0
10051672:	4463      	add	r3, ip
10051674:	430a      	orrs	r2, r1
10051676:	601a      	str	r2, [r3, #0]
}
10051678:	46c0      	nop			@ (mov r8, r8)
1005167a:	46bd      	mov	sp, r7
1005167c:	b002      	add	sp, #8
1005167e:	bd80      	pop	{r7, pc}
10051680:	200000dc 	.word	0x200000dc
10051684:	f8ffffff 	.word	0xf8ffffff

10051688 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
10051688:	b580      	push	{r7, lr}
1005168a:	b082      	sub	sp, #8
1005168c:	af00      	add	r7, sp, #0
1005168e:	0002      	movs	r2, r0
10051690:	1dfb      	adds	r3, r7, #7
10051692:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
10051694:	1dfb      	adds	r3, r7, #7
10051696:	781b      	ldrb	r3, [r3, #0]
10051698:	225c      	movs	r2, #92	@ 0x5c
1005169a:	4353      	muls	r3, r2
1005169c:	4a05      	ldr	r2, [pc, #20]	@ (100516b4 <LL_RADIO_GetTransmissionPhy+0x2c>)
1005169e:	4694      	mov	ip, r2
100516a0:	4463      	add	r3, ip
100516a2:	681b      	ldr	r3, [r3, #0]
100516a4:	0e1b      	lsrs	r3, r3, #24
100516a6:	2207      	movs	r2, #7
100516a8:	4013      	ands	r3, r2
}
100516aa:	0018      	movs	r0, r3
100516ac:	46bd      	mov	sp, r7
100516ae:	b002      	add	sp, #8
100516b0:	bd80      	pop	{r7, pc}
100516b2:	46c0      	nop			@ (mov r8, r8)
100516b4:	200000dc 	.word	0x200000dc

100516b8 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
100516b8:	b580      	push	{r7, lr}
100516ba:	b082      	sub	sp, #8
100516bc:	af00      	add	r7, sp, #0
100516be:	0002      	movs	r2, r0
100516c0:	6039      	str	r1, [r7, #0]
100516c2:	1dfb      	adds	r3, r7, #7
100516c4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
100516c6:	1dfb      	adds	r3, r7, #7
100516c8:	781b      	ldrb	r3, [r3, #0]
100516ca:	225c      	movs	r2, #92	@ 0x5c
100516cc:	4353      	muls	r3, r2
100516ce:	4a0c      	ldr	r2, [pc, #48]	@ (10051700 <LL_RADIO_SetCTEDisable+0x48>)
100516d0:	4694      	mov	ip, r2
100516d2:	4463      	add	r3, ip
100516d4:	681b      	ldr	r3, [r3, #0]
100516d6:	4a0b      	ldr	r2, [pc, #44]	@ (10051704 <LL_RADIO_SetCTEDisable+0x4c>)
100516d8:	4013      	ands	r3, r2
100516da:	0019      	movs	r1, r3
100516dc:	683b      	ldr	r3, [r7, #0]
100516de:	06da      	lsls	r2, r3, #27
100516e0:	2380      	movs	r3, #128	@ 0x80
100516e2:	051b      	lsls	r3, r3, #20
100516e4:	401a      	ands	r2, r3
100516e6:	1dfb      	adds	r3, r7, #7
100516e8:	781b      	ldrb	r3, [r3, #0]
100516ea:	205c      	movs	r0, #92	@ 0x5c
100516ec:	4343      	muls	r3, r0
100516ee:	4804      	ldr	r0, [pc, #16]	@ (10051700 <LL_RADIO_SetCTEDisable+0x48>)
100516f0:	4684      	mov	ip, r0
100516f2:	4463      	add	r3, ip
100516f4:	430a      	orrs	r2, r1
100516f6:	601a      	str	r2, [r3, #0]
}
100516f8:	46c0      	nop			@ (mov r8, r8)
100516fa:	46bd      	mov	sp, r7
100516fc:	b002      	add	sp, #8
100516fe:	bd80      	pop	{r7, pc}
10051700:	200000dc 	.word	0x200000dc
10051704:	f7ffffff 	.word	0xf7ffffff

10051708 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10051708:	b580      	push	{r7, lr}
1005170a:	b082      	sub	sp, #8
1005170c:	af00      	add	r7, sp, #0
1005170e:	0002      	movs	r2, r0
10051710:	6039      	str	r1, [r7, #0]
10051712:	1dfb      	adds	r3, r7, #7
10051714:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10051716:	1dfb      	adds	r3, r7, #7
10051718:	781b      	ldrb	r3, [r3, #0]
1005171a:	225c      	movs	r2, #92	@ 0x5c
1005171c:	4353      	muls	r3, r2
1005171e:	4a0c      	ldr	r2, [pc, #48]	@ (10051750 <LL_RADIO_SetReceptionPhy+0x48>)
10051720:	4694      	mov	ip, r2
10051722:	4463      	add	r3, ip
10051724:	681b      	ldr	r3, [r3, #0]
10051726:	4a0b      	ldr	r2, [pc, #44]	@ (10051754 <LL_RADIO_SetReceptionPhy+0x4c>)
10051728:	4013      	ands	r3, r2
1005172a:	0019      	movs	r1, r3
1005172c:	683b      	ldr	r3, [r7, #0]
1005172e:	071a      	lsls	r2, r3, #28
10051730:	23e0      	movs	r3, #224	@ 0xe0
10051732:	05db      	lsls	r3, r3, #23
10051734:	401a      	ands	r2, r3
10051736:	1dfb      	adds	r3, r7, #7
10051738:	781b      	ldrb	r3, [r3, #0]
1005173a:	205c      	movs	r0, #92	@ 0x5c
1005173c:	4343      	muls	r3, r0
1005173e:	4804      	ldr	r0, [pc, #16]	@ (10051750 <LL_RADIO_SetReceptionPhy+0x48>)
10051740:	4684      	mov	ip, r0
10051742:	4463      	add	r3, ip
10051744:	430a      	orrs	r2, r1
10051746:	601a      	str	r2, [r3, #0]
}
10051748:	46c0      	nop			@ (mov r8, r8)
1005174a:	46bd      	mov	sp, r7
1005174c:	b002      	add	sp, #8
1005174e:	bd80      	pop	{r7, pc}
10051750:	200000dc 	.word	0x200000dc
10051754:	8fffffff 	.word	0x8fffffff

10051758 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
10051758:	b580      	push	{r7, lr}
1005175a:	b082      	sub	sp, #8
1005175c:	af00      	add	r7, sp, #0
1005175e:	0002      	movs	r2, r0
10051760:	1dfb      	adds	r3, r7, #7
10051762:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10051764:	1dfb      	adds	r3, r7, #7
10051766:	781b      	ldrb	r3, [r3, #0]
10051768:	225c      	movs	r2, #92	@ 0x5c
1005176a:	4353      	muls	r3, r2
1005176c:	4a05      	ldr	r2, [pc, #20]	@ (10051784 <LL_RADIO_GetReceptionPhy+0x2c>)
1005176e:	4694      	mov	ip, r2
10051770:	4463      	add	r3, ip
10051772:	681b      	ldr	r3, [r3, #0]
10051774:	0f1b      	lsrs	r3, r3, #28
10051776:	2207      	movs	r2, #7
10051778:	4013      	ands	r3, r2
}
1005177a:	0018      	movs	r0, r3
1005177c:	46bd      	mov	sp, r7
1005177e:	b002      	add	sp, #8
10051780:	bd80      	pop	{r7, pc}
10051782:	46c0      	nop			@ (mov r8, r8)
10051784:	200000dc 	.word	0x200000dc

10051788 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10051788:	b580      	push	{r7, lr}
1005178a:	b082      	sub	sp, #8
1005178c:	af00      	add	r7, sp, #0
1005178e:	0002      	movs	r2, r0
10051790:	6039      	str	r1, [r7, #0]
10051792:	1dfb      	adds	r3, r7, #7
10051794:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10051796:	1dfb      	adds	r3, r7, #7
10051798:	781b      	ldrb	r3, [r3, #0]
1005179a:	225c      	movs	r2, #92	@ 0x5c
1005179c:	4353      	muls	r3, r2
1005179e:	4a08      	ldr	r2, [pc, #32]	@ (100517c0 <LL_RADIO_SetTxPoint+0x38>)
100517a0:	4694      	mov	ip, r2
100517a2:	4463      	add	r3, ip
100517a4:	685b      	ldr	r3, [r3, #4]
100517a6:	1dfb      	adds	r3, r7, #7
100517a8:	781b      	ldrb	r3, [r3, #0]
100517aa:	225c      	movs	r2, #92	@ 0x5c
100517ac:	4353      	muls	r3, r2
100517ae:	4a04      	ldr	r2, [pc, #16]	@ (100517c0 <LL_RADIO_SetTxPoint+0x38>)
100517b0:	4694      	mov	ip, r2
100517b2:	4463      	add	r3, ip
100517b4:	683a      	ldr	r2, [r7, #0]
100517b6:	605a      	str	r2, [r3, #4]
}
100517b8:	46c0      	nop			@ (mov r8, r8)
100517ba:	46bd      	mov	sp, r7
100517bc:	b002      	add	sp, #8
100517be:	bd80      	pop	{r7, pc}
100517c0:	200000dc 	.word	0x200000dc

100517c4 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
100517c4:	b580      	push	{r7, lr}
100517c6:	b082      	sub	sp, #8
100517c8:	af00      	add	r7, sp, #0
100517ca:	0002      	movs	r2, r0
100517cc:	6039      	str	r1, [r7, #0]
100517ce:	1dfb      	adds	r3, r7, #7
100517d0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
100517d2:	1dfb      	adds	r3, r7, #7
100517d4:	781b      	ldrb	r3, [r3, #0]
100517d6:	225c      	movs	r2, #92	@ 0x5c
100517d8:	4353      	muls	r3, r2
100517da:	4a08      	ldr	r2, [pc, #32]	@ (100517fc <LL_RADIO_SetRcvPoint+0x38>)
100517dc:	4694      	mov	ip, r2
100517de:	4463      	add	r3, ip
100517e0:	689b      	ldr	r3, [r3, #8]
100517e2:	1dfb      	adds	r3, r7, #7
100517e4:	781b      	ldrb	r3, [r3, #0]
100517e6:	225c      	movs	r2, #92	@ 0x5c
100517e8:	4353      	muls	r3, r2
100517ea:	4a04      	ldr	r2, [pc, #16]	@ (100517fc <LL_RADIO_SetRcvPoint+0x38>)
100517ec:	4694      	mov	ip, r2
100517ee:	4463      	add	r3, ip
100517f0:	683a      	ldr	r2, [r7, #0]
100517f2:	609a      	str	r2, [r3, #8]
}
100517f4:	46c0      	nop			@ (mov r8, r8)
100517f6:	46bd      	mov	sp, r7
100517f8:	b002      	add	sp, #8
100517fa:	bd80      	pop	{r7, pc}
100517fc:	200000dc 	.word	0x200000dc

10051800 <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
10051800:	b580      	push	{r7, lr}
10051802:	b082      	sub	sp, #8
10051804:	af00      	add	r7, sp, #0
10051806:	0002      	movs	r2, r0
10051808:	6039      	str	r1, [r7, #0]
1005180a:	1dfb      	adds	r3, r7, #7
1005180c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
1005180e:	1dfb      	adds	r3, r7, #7
10051810:	781b      	ldrb	r3, [r3, #0]
10051812:	225c      	movs	r2, #92	@ 0x5c
10051814:	4353      	muls	r3, r2
10051816:	4a08      	ldr	r2, [pc, #32]	@ (10051838 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10051818:	4694      	mov	ip, r2
1005181a:	4463      	add	r3, ip
1005181c:	699b      	ldr	r3, [r3, #24]
1005181e:	1dfb      	adds	r3, r7, #7
10051820:	781b      	ldrb	r3, [r3, #0]
10051822:	225c      	movs	r2, #92	@ 0x5c
10051824:	4353      	muls	r3, r2
10051826:	4a04      	ldr	r2, [pc, #16]	@ (10051838 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10051828:	4694      	mov	ip, r2
1005182a:	4463      	add	r3, ip
1005182c:	683a      	ldr	r2, [r7, #0]
1005182e:	619a      	str	r2, [r3, #24]
}
10051830:	46c0      	nop			@ (mov r8, r8)
10051832:	46bd      	mov	sp, r7
10051834:	b002      	add	sp, #8
10051836:	bd80      	pop	{r7, pc}
10051838:	200000dc 	.word	0x200000dc

1005183c <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
1005183c:	b580      	push	{r7, lr}
1005183e:	b082      	sub	sp, #8
10051840:	af00      	add	r7, sp, #0
10051842:	0002      	movs	r2, r0
10051844:	6039      	str	r1, [r7, #0]
10051846:	1dfb      	adds	r3, r7, #7
10051848:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
1005184a:	1dfb      	adds	r3, r7, #7
1005184c:	781b      	ldrb	r3, [r3, #0]
1005184e:	225c      	movs	r2, #92	@ 0x5c
10051850:	4353      	muls	r3, r2
10051852:	4a0b      	ldr	r2, [pc, #44]	@ (10051880 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10051854:	4694      	mov	ip, r2
10051856:	4463      	add	r3, ip
10051858:	69db      	ldr	r3, [r3, #28]
1005185a:	22ff      	movs	r2, #255	@ 0xff
1005185c:	4393      	bics	r3, r2
1005185e:	0019      	movs	r1, r3
10051860:	683b      	ldr	r3, [r7, #0]
10051862:	22ff      	movs	r2, #255	@ 0xff
10051864:	401a      	ands	r2, r3
10051866:	1dfb      	adds	r3, r7, #7
10051868:	781b      	ldrb	r3, [r3, #0]
1005186a:	205c      	movs	r0, #92	@ 0x5c
1005186c:	4343      	muls	r3, r0
1005186e:	4804      	ldr	r0, [pc, #16]	@ (10051880 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10051870:	4684      	mov	ip, r0
10051872:	4463      	add	r3, ip
10051874:	430a      	orrs	r2, r1
10051876:	61da      	str	r2, [r3, #28]
}
10051878:	46c0      	nop			@ (mov r8, r8)
1005187a:	46bd      	mov	sp, r7
1005187c:	b002      	add	sp, #8
1005187e:	bd80      	pop	{r7, pc}
10051880:	200000dc 	.word	0x200000dc

10051884 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10051884:	b580      	push	{r7, lr}
10051886:	b082      	sub	sp, #8
10051888:	af00      	add	r7, sp, #0
1005188a:	0002      	movs	r2, r0
1005188c:	1dfb      	adds	r3, r7, #7
1005188e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10051890:	1dfb      	adds	r3, r7, #7
10051892:	781b      	ldrb	r3, [r3, #0]
10051894:	225c      	movs	r2, #92	@ 0x5c
10051896:	4353      	muls	r3, r2
10051898:	4a04      	ldr	r2, [pc, #16]	@ (100518ac <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
1005189a:	4694      	mov	ip, r2
1005189c:	4463      	add	r3, ip
1005189e:	69db      	ldr	r3, [r3, #28]
100518a0:	22ff      	movs	r2, #255	@ 0xff
100518a2:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
100518a4:	0018      	movs	r0, r3
100518a6:	46bd      	mov	sp, r7
100518a8:	b002      	add	sp, #8
100518aa:	bd80      	pop	{r7, pc}
100518ac:	200000dc 	.word	0x200000dc

100518b0 <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
100518b0:	b580      	push	{r7, lr}
100518b2:	b082      	sub	sp, #8
100518b4:	af00      	add	r7, sp, #0
100518b6:	0002      	movs	r2, r0
100518b8:	6039      	str	r1, [r7, #0]
100518ba:	1dfb      	adds	r3, r7, #7
100518bc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
100518be:	1dfb      	adds	r3, r7, #7
100518c0:	781b      	ldrb	r3, [r3, #0]
100518c2:	225c      	movs	r2, #92	@ 0x5c
100518c4:	4353      	muls	r3, r2
100518c6:	4a0b      	ldr	r2, [pc, #44]	@ (100518f4 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
100518c8:	4694      	mov	ip, r2
100518ca:	4463      	add	r3, ip
100518cc:	69db      	ldr	r3, [r3, #28]
100518ce:	22ff      	movs	r2, #255	@ 0xff
100518d0:	4013      	ands	r3, r2
100518d2:	0019      	movs	r1, r3
100518d4:	683b      	ldr	r3, [r7, #0]
100518d6:	021a      	lsls	r2, r3, #8
100518d8:	1dfb      	adds	r3, r7, #7
100518da:	781b      	ldrb	r3, [r3, #0]
100518dc:	205c      	movs	r0, #92	@ 0x5c
100518de:	4343      	muls	r3, r0
100518e0:	4804      	ldr	r0, [pc, #16]	@ (100518f4 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
100518e2:	4684      	mov	ip, r0
100518e4:	4463      	add	r3, ip
100518e6:	430a      	orrs	r2, r1
100518e8:	61da      	str	r2, [r3, #28]
}
100518ea:	46c0      	nop			@ (mov r8, r8)
100518ec:	46bd      	mov	sp, r7
100518ee:	b002      	add	sp, #8
100518f0:	bd80      	pop	{r7, pc}
100518f2:	46c0      	nop			@ (mov r8, r8)
100518f4:	200000dc 	.word	0x200000dc

100518f8 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
100518f8:	b580      	push	{r7, lr}
100518fa:	b082      	sub	sp, #8
100518fc:	af00      	add	r7, sp, #0
100518fe:	0002      	movs	r2, r0
10051900:	1dfb      	adds	r3, r7, #7
10051902:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10051904:	1dfb      	adds	r3, r7, #7
10051906:	781b      	ldrb	r3, [r3, #0]
10051908:	225c      	movs	r2, #92	@ 0x5c
1005190a:	4353      	muls	r3, r2
1005190c:	4a05      	ldr	r2, [pc, #20]	@ (10051924 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
1005190e:	4694      	mov	ip, r2
10051910:	4463      	add	r3, ip
10051912:	69db      	ldr	r3, [r3, #28]
10051914:	0a1b      	lsrs	r3, r3, #8
10051916:	021b      	lsls	r3, r3, #8
10051918:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
1005191a:	0018      	movs	r0, r3
1005191c:	46bd      	mov	sp, r7
1005191e:	b002      	add	sp, #8
10051920:	bd80      	pop	{r7, pc}
10051922:	46c0      	nop			@ (mov r8, r8)
10051924:	200000dc 	.word	0x200000dc

10051928 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
10051928:	b580      	push	{r7, lr}
1005192a:	b082      	sub	sp, #8
1005192c:	af00      	add	r7, sp, #0
1005192e:	0002      	movs	r2, r0
10051930:	6039      	str	r1, [r7, #0]
10051932:	1dfb      	adds	r3, r7, #7
10051934:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
10051936:	1dfb      	adds	r3, r7, #7
10051938:	781b      	ldrb	r3, [r3, #0]
1005193a:	225c      	movs	r2, #92	@ 0x5c
1005193c:	4353      	muls	r3, r2
1005193e:	4a0b      	ldr	r2, [pc, #44]	@ (1005196c <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10051940:	4694      	mov	ip, r2
10051942:	4463      	add	r3, ip
10051944:	6a1b      	ldr	r3, [r3, #32]
10051946:	0c1b      	lsrs	r3, r3, #16
10051948:	0419      	lsls	r1, r3, #16
1005194a:	683b      	ldr	r3, [r7, #0]
1005194c:	041b      	lsls	r3, r3, #16
1005194e:	0c1a      	lsrs	r2, r3, #16
10051950:	1dfb      	adds	r3, r7, #7
10051952:	781b      	ldrb	r3, [r3, #0]
10051954:	205c      	movs	r0, #92	@ 0x5c
10051956:	4343      	muls	r3, r0
10051958:	4804      	ldr	r0, [pc, #16]	@ (1005196c <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
1005195a:	4684      	mov	ip, r0
1005195c:	4463      	add	r3, ip
1005195e:	430a      	orrs	r2, r1
10051960:	621a      	str	r2, [r3, #32]
}
10051962:	46c0      	nop			@ (mov r8, r8)
10051964:	46bd      	mov	sp, r7
10051966:	b002      	add	sp, #8
10051968:	bd80      	pop	{r7, pc}
1005196a:	46c0      	nop			@ (mov r8, r8)
1005196c:	200000dc 	.word	0x200000dc

10051970 <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
10051970:	b580      	push	{r7, lr}
10051972:	b082      	sub	sp, #8
10051974:	af00      	add	r7, sp, #0
10051976:	0002      	movs	r2, r0
10051978:	1dfb      	adds	r3, r7, #7
1005197a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
1005197c:	1dfb      	adds	r3, r7, #7
1005197e:	781b      	ldrb	r3, [r3, #0]
10051980:	225c      	movs	r2, #92	@ 0x5c
10051982:	4353      	muls	r3, r2
10051984:	4a04      	ldr	r2, [pc, #16]	@ (10051998 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
10051986:	4694      	mov	ip, r2
10051988:	4463      	add	r3, ip
1005198a:	6a1b      	ldr	r3, [r3, #32]
1005198c:	041b      	lsls	r3, r3, #16
1005198e:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
10051990:	0018      	movs	r0, r3
10051992:	46bd      	mov	sp, r7
10051994:	b002      	add	sp, #8
10051996:	bd80      	pop	{r7, pc}
10051998:	200000dc 	.word	0x200000dc

1005199c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
1005199c:	b580      	push	{r7, lr}
1005199e:	b082      	sub	sp, #8
100519a0:	af00      	add	r7, sp, #0
100519a2:	0002      	movs	r2, r0
100519a4:	1dfb      	adds	r3, r7, #7
100519a6:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
100519a8:	1dfb      	adds	r3, r7, #7
100519aa:	781b      	ldrb	r3, [r3, #0]
100519ac:	225c      	movs	r2, #92	@ 0x5c
100519ae:	4353      	muls	r3, r2
100519b0:	4a09      	ldr	r2, [pc, #36]	@ (100519d8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
100519b2:	4694      	mov	ip, r2
100519b4:	4463      	add	r3, ip
100519b6:	6a1a      	ldr	r2, [r3, #32]
100519b8:	1dfb      	adds	r3, r7, #7
100519ba:	781b      	ldrb	r3, [r3, #0]
100519bc:	215c      	movs	r1, #92	@ 0x5c
100519be:	434b      	muls	r3, r1
100519c0:	4905      	ldr	r1, [pc, #20]	@ (100519d8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
100519c2:	468c      	mov	ip, r1
100519c4:	4463      	add	r3, ip
100519c6:	2180      	movs	r1, #128	@ 0x80
100519c8:	0589      	lsls	r1, r1, #22
100519ca:	430a      	orrs	r2, r1
100519cc:	621a      	str	r2, [r3, #32]
}
100519ce:	46c0      	nop			@ (mov r8, r8)
100519d0:	46bd      	mov	sp, r7
100519d2:	b002      	add	sp, #8
100519d4:	bd80      	pop	{r7, pc}
100519d6:	46c0      	nop			@ (mov r8, r8)
100519d8:	200000dc 	.word	0x200000dc

100519dc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
100519dc:	b580      	push	{r7, lr}
100519de:	b082      	sub	sp, #8
100519e0:	af00      	add	r7, sp, #0
100519e2:	0002      	movs	r2, r0
100519e4:	1dfb      	adds	r3, r7, #7
100519e6:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
100519e8:	1dfb      	adds	r3, r7, #7
100519ea:	781b      	ldrb	r3, [r3, #0]
100519ec:	225c      	movs	r2, #92	@ 0x5c
100519ee:	4353      	muls	r3, r2
100519f0:	4a08      	ldr	r2, [pc, #32]	@ (10051a14 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100519f2:	4694      	mov	ip, r2
100519f4:	4463      	add	r3, ip
100519f6:	6a1a      	ldr	r2, [r3, #32]
100519f8:	1dfb      	adds	r3, r7, #7
100519fa:	781b      	ldrb	r3, [r3, #0]
100519fc:	215c      	movs	r1, #92	@ 0x5c
100519fe:	434b      	muls	r3, r1
10051a00:	4904      	ldr	r1, [pc, #16]	@ (10051a14 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10051a02:	468c      	mov	ip, r1
10051a04:	4463      	add	r3, ip
10051a06:	4904      	ldr	r1, [pc, #16]	@ (10051a18 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
10051a08:	400a      	ands	r2, r1
10051a0a:	621a      	str	r2, [r3, #32]
}
10051a0c:	46c0      	nop			@ (mov r8, r8)
10051a0e:	46bd      	mov	sp, r7
10051a10:	b002      	add	sp, #8
10051a12:	bd80      	pop	{r7, pc}
10051a14:	200000dc 	.word	0x200000dc
10051a18:	dfffffff 	.word	0xdfffffff

10051a1c <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10051a1c:	b580      	push	{r7, lr}
10051a1e:	b082      	sub	sp, #8
10051a20:	af00      	add	r7, sp, #0
10051a22:	0002      	movs	r2, r0
10051a24:	6039      	str	r1, [r7, #0]
10051a26:	1dfb      	adds	r3, r7, #7
10051a28:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10051a2a:	1dfb      	adds	r3, r7, #7
10051a2c:	781b      	ldrb	r3, [r3, #0]
10051a2e:	225c      	movs	r2, #92	@ 0x5c
10051a30:	4353      	muls	r3, r2
10051a32:	4a08      	ldr	r2, [pc, #32]	@ (10051a54 <LL_RADIO_SetAccessAddress+0x38>)
10051a34:	4694      	mov	ip, r2
10051a36:	4463      	add	r3, ip
10051a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10051a3a:	1dfb      	adds	r3, r7, #7
10051a3c:	781b      	ldrb	r3, [r3, #0]
10051a3e:	225c      	movs	r2, #92	@ 0x5c
10051a40:	4353      	muls	r3, r2
10051a42:	4a04      	ldr	r2, [pc, #16]	@ (10051a54 <LL_RADIO_SetAccessAddress+0x38>)
10051a44:	4694      	mov	ip, r2
10051a46:	4463      	add	r3, ip
10051a48:	683a      	ldr	r2, [r7, #0]
10051a4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
10051a4c:	46c0      	nop			@ (mov r8, r8)
10051a4e:	46bd      	mov	sp, r7
10051a50:	b002      	add	sp, #8
10051a52:	bd80      	pop	{r7, pc}
10051a54:	200000dc 	.word	0x200000dc

10051a58 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10051a58:	b580      	push	{r7, lr}
10051a5a:	b082      	sub	sp, #8
10051a5c:	af00      	add	r7, sp, #0
10051a5e:	0002      	movs	r2, r0
10051a60:	1dfb      	adds	r3, r7, #7
10051a62:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10051a64:	1dfb      	adds	r3, r7, #7
10051a66:	781b      	ldrb	r3, [r3, #0]
10051a68:	225c      	movs	r2, #92	@ 0x5c
10051a6a:	4353      	muls	r3, r2
10051a6c:	4a03      	ldr	r2, [pc, #12]	@ (10051a7c <LL_RADIO_GetAccessAddress+0x24>)
10051a6e:	4694      	mov	ip, r2
10051a70:	4463      	add	r3, ip
10051a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10051a74:	0018      	movs	r0, r3
10051a76:	46bd      	mov	sp, r7
10051a78:	b002      	add	sp, #8
10051a7a:	bd80      	pop	{r7, pc}
10051a7c:	200000dc 	.word	0x200000dc

10051a80 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10051a80:	b580      	push	{r7, lr}
10051a82:	b082      	sub	sp, #8
10051a84:	af00      	add	r7, sp, #0
10051a86:	0002      	movs	r2, r0
10051a88:	6039      	str	r1, [r7, #0]
10051a8a:	1dfb      	adds	r3, r7, #7
10051a8c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10051a8e:	1dfb      	adds	r3, r7, #7
10051a90:	781b      	ldrb	r3, [r3, #0]
10051a92:	225c      	movs	r2, #92	@ 0x5c
10051a94:	4353      	muls	r3, r2
10051a96:	4a0b      	ldr	r2, [pc, #44]	@ (10051ac4 <LL_RADIO_SetCRCInitializationValue+0x44>)
10051a98:	4694      	mov	ip, r2
10051a9a:	4463      	add	r3, ip
10051a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051a9e:	0e1b      	lsrs	r3, r3, #24
10051aa0:	0619      	lsls	r1, r3, #24
10051aa2:	683b      	ldr	r3, [r7, #0]
10051aa4:	021b      	lsls	r3, r3, #8
10051aa6:	0a1a      	lsrs	r2, r3, #8
10051aa8:	1dfb      	adds	r3, r7, #7
10051aaa:	781b      	ldrb	r3, [r3, #0]
10051aac:	205c      	movs	r0, #92	@ 0x5c
10051aae:	4343      	muls	r3, r0
10051ab0:	4804      	ldr	r0, [pc, #16]	@ (10051ac4 <LL_RADIO_SetCRCInitializationValue+0x44>)
10051ab2:	4684      	mov	ip, r0
10051ab4:	4463      	add	r3, ip
10051ab6:	430a      	orrs	r2, r1
10051ab8:	629a      	str	r2, [r3, #40]	@ 0x28
}
10051aba:	46c0      	nop			@ (mov r8, r8)
10051abc:	46bd      	mov	sp, r7
10051abe:	b002      	add	sp, #8
10051ac0:	bd80      	pop	{r7, pc}
10051ac2:	46c0      	nop			@ (mov r8, r8)
10051ac4:	200000dc 	.word	0x200000dc

10051ac8 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10051ac8:	b580      	push	{r7, lr}
10051aca:	b082      	sub	sp, #8
10051acc:	af00      	add	r7, sp, #0
10051ace:	0002      	movs	r2, r0
10051ad0:	6039      	str	r1, [r7, #0]
10051ad2:	1dfb      	adds	r3, r7, #7
10051ad4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10051ad6:	1dfb      	adds	r3, r7, #7
10051ad8:	781b      	ldrb	r3, [r3, #0]
10051ada:	225c      	movs	r2, #92	@ 0x5c
10051adc:	4353      	muls	r3, r2
10051ade:	4a0a      	ldr	r2, [pc, #40]	@ (10051b08 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10051ae0:	4694      	mov	ip, r2
10051ae2:	4463      	add	r3, ip
10051ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051ae6:	021b      	lsls	r3, r3, #8
10051ae8:	0a19      	lsrs	r1, r3, #8
10051aea:	683b      	ldr	r3, [r7, #0]
10051aec:	061a      	lsls	r2, r3, #24
10051aee:	1dfb      	adds	r3, r7, #7
10051af0:	781b      	ldrb	r3, [r3, #0]
10051af2:	205c      	movs	r0, #92	@ 0x5c
10051af4:	4343      	muls	r3, r0
10051af6:	4804      	ldr	r0, [pc, #16]	@ (10051b08 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10051af8:	4684      	mov	ip, r0
10051afa:	4463      	add	r3, ip
10051afc:	430a      	orrs	r2, r1
10051afe:	629a      	str	r2, [r3, #40]	@ 0x28
}
10051b00:	46c0      	nop			@ (mov r8, r8)
10051b02:	46bd      	mov	sp, r7
10051b04:	b002      	add	sp, #8
10051b06:	bd80      	pop	{r7, pc}
10051b08:	200000dc 	.word	0x200000dc

10051b0c <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
10051b0c:	b580      	push	{r7, lr}
10051b0e:	b082      	sub	sp, #8
10051b10:	af00      	add	r7, sp, #0
10051b12:	0002      	movs	r2, r0
10051b14:	6039      	str	r1, [r7, #0]
10051b16:	1dfb      	adds	r3, r7, #7
10051b18:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
10051b1a:	1dfb      	adds	r3, r7, #7
10051b1c:	781b      	ldrb	r3, [r3, #0]
10051b1e:	225c      	movs	r2, #92	@ 0x5c
10051b20:	4353      	muls	r3, r2
10051b22:	4a0b      	ldr	r2, [pc, #44]	@ (10051b50 <LL_RADIO_SetPAPower+0x44>)
10051b24:	4694      	mov	ip, r2
10051b26:	4463      	add	r3, ip
10051b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10051b2a:	221f      	movs	r2, #31
10051b2c:	4393      	bics	r3, r2
10051b2e:	0019      	movs	r1, r3
10051b30:	683b      	ldr	r3, [r7, #0]
10051b32:	221f      	movs	r2, #31
10051b34:	401a      	ands	r2, r3
10051b36:	1dfb      	adds	r3, r7, #7
10051b38:	781b      	ldrb	r3, [r3, #0]
10051b3a:	205c      	movs	r0, #92	@ 0x5c
10051b3c:	4343      	muls	r3, r0
10051b3e:	4804      	ldr	r0, [pc, #16]	@ (10051b50 <LL_RADIO_SetPAPower+0x44>)
10051b40:	4684      	mov	ip, r0
10051b42:	4463      	add	r3, ip
10051b44:	430a      	orrs	r2, r1
10051b46:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10051b48:	46c0      	nop			@ (mov r8, r8)
10051b4a:	46bd      	mov	sp, r7
10051b4c:	b002      	add	sp, #8
10051b4e:	bd80      	pop	{r7, pc}
10051b50:	200000dc 	.word	0x200000dc

10051b54 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10051b54:	b580      	push	{r7, lr}
10051b56:	b082      	sub	sp, #8
10051b58:	af00      	add	r7, sp, #0
10051b5a:	0002      	movs	r2, r0
10051b5c:	1dfb      	adds	r3, r7, #7
10051b5e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10051b60:	1dfb      	adds	r3, r7, #7
10051b62:	781b      	ldrb	r3, [r3, #0]
10051b64:	225c      	movs	r2, #92	@ 0x5c
10051b66:	4353      	muls	r3, r2
10051b68:	4a04      	ldr	r2, [pc, #16]	@ (10051b7c <LL_RADIO_GetPAPower+0x28>)
10051b6a:	4694      	mov	ip, r2
10051b6c:	4463      	add	r3, ip
10051b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10051b70:	221f      	movs	r2, #31
10051b72:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10051b74:	0018      	movs	r0, r3
10051b76:	46bd      	mov	sp, r7
10051b78:	b002      	add	sp, #8
10051b7a:	bd80      	pop	{r7, pc}
10051b7c:	200000dc 	.word	0x200000dc

10051b80 <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10051b80:	b580      	push	{r7, lr}
10051b82:	b082      	sub	sp, #8
10051b84:	af00      	add	r7, sp, #0
10051b86:	0002      	movs	r2, r0
10051b88:	6039      	str	r1, [r7, #0]
10051b8a:	1dfb      	adds	r3, r7, #7
10051b8c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10051b8e:	1dfb      	adds	r3, r7, #7
10051b90:	781b      	ldrb	r3, [r3, #0]
10051b92:	225c      	movs	r2, #92	@ 0x5c
10051b94:	4353      	muls	r3, r2
10051b96:	4a0c      	ldr	r2, [pc, #48]	@ (10051bc8 <LL_RADIO_SetHopIncrement+0x48>)
10051b98:	4694      	mov	ip, r2
10051b9a:	4463      	add	r3, ip
10051b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10051b9e:	4a0b      	ldr	r2, [pc, #44]	@ (10051bcc <LL_RADIO_SetHopIncrement+0x4c>)
10051ba0:	4013      	ands	r3, r2
10051ba2:	0019      	movs	r1, r3
10051ba4:	683b      	ldr	r3, [r7, #0]
10051ba6:	021a      	lsls	r2, r3, #8
10051ba8:	23fc      	movs	r3, #252	@ 0xfc
10051baa:	019b      	lsls	r3, r3, #6
10051bac:	401a      	ands	r2, r3
10051bae:	1dfb      	adds	r3, r7, #7
10051bb0:	781b      	ldrb	r3, [r3, #0]
10051bb2:	205c      	movs	r0, #92	@ 0x5c
10051bb4:	4343      	muls	r3, r0
10051bb6:	4804      	ldr	r0, [pc, #16]	@ (10051bc8 <LL_RADIO_SetHopIncrement+0x48>)
10051bb8:	4684      	mov	ip, r0
10051bba:	4463      	add	r3, ip
10051bbc:	430a      	orrs	r2, r1
10051bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10051bc0:	46c0      	nop			@ (mov r8, r8)
10051bc2:	46bd      	mov	sp, r7
10051bc4:	b002      	add	sp, #8
10051bc6:	bd80      	pop	{r7, pc}
10051bc8:	200000dc 	.word	0x200000dc
10051bcc:	ffffc0ff 	.word	0xffffc0ff

10051bd0 <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
10051bd0:	b580      	push	{r7, lr}
10051bd2:	b082      	sub	sp, #8
10051bd4:	af00      	add	r7, sp, #0
10051bd6:	0002      	movs	r2, r0
10051bd8:	1dfb      	adds	r3, r7, #7
10051bda:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10051bdc:	1dfb      	adds	r3, r7, #7
10051bde:	781b      	ldrb	r3, [r3, #0]
10051be0:	225c      	movs	r2, #92	@ 0x5c
10051be2:	4353      	muls	r3, r2
10051be4:	4a05      	ldr	r2, [pc, #20]	@ (10051bfc <LL_RADIO_GetHopIncrement+0x2c>)
10051be6:	4694      	mov	ip, r2
10051be8:	4463      	add	r3, ip
10051bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10051bec:	0a1b      	lsrs	r3, r3, #8
10051bee:	223f      	movs	r2, #63	@ 0x3f
10051bf0:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
10051bf2:	0018      	movs	r0, r3
10051bf4:	46bd      	mov	sp, r7
10051bf6:	b002      	add	sp, #8
10051bf8:	bd80      	pop	{r7, pc}
10051bfa:	46c0      	nop			@ (mov r8, r8)
10051bfc:	200000dc 	.word	0x200000dc

10051c00 <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
10051c00:	b580      	push	{r7, lr}
10051c02:	b082      	sub	sp, #8
10051c04:	af00      	add	r7, sp, #0
10051c06:	0002      	movs	r2, r0
10051c08:	6039      	str	r1, [r7, #0]
10051c0a:	1dfb      	adds	r3, r7, #7
10051c0c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
10051c0e:	1dfb      	adds	r3, r7, #7
10051c10:	781b      	ldrb	r3, [r3, #0]
10051c12:	225c      	movs	r2, #92	@ 0x5c
10051c14:	4353      	muls	r3, r2
10051c16:	4a0a      	ldr	r2, [pc, #40]	@ (10051c40 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10051c18:	4694      	mov	ip, r2
10051c1a:	4463      	add	r3, ip
10051c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10051c1e:	041b      	lsls	r3, r3, #16
10051c20:	0c19      	lsrs	r1, r3, #16
10051c22:	683b      	ldr	r3, [r7, #0]
10051c24:	041a      	lsls	r2, r3, #16
10051c26:	1dfb      	adds	r3, r7, #7
10051c28:	781b      	ldrb	r3, [r3, #0]
10051c2a:	205c      	movs	r0, #92	@ 0x5c
10051c2c:	4343      	muls	r3, r0
10051c2e:	4804      	ldr	r0, [pc, #16]	@ (10051c40 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10051c30:	4684      	mov	ip, r0
10051c32:	4463      	add	r3, ip
10051c34:	430a      	orrs	r2, r1
10051c36:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10051c38:	46c0      	nop			@ (mov r8, r8)
10051c3a:	46bd      	mov	sp, r7
10051c3c:	b002      	add	sp, #8
10051c3e:	bd80      	pop	{r7, pc}
10051c40:	200000dc 	.word	0x200000dc

10051c44 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
10051c44:	b580      	push	{r7, lr}
10051c46:	b082      	sub	sp, #8
10051c48:	af00      	add	r7, sp, #0
10051c4a:	0002      	movs	r2, r0
10051c4c:	1dfb      	adds	r3, r7, #7
10051c4e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10051c50:	1dfb      	adds	r3, r7, #7
10051c52:	781b      	ldrb	r3, [r3, #0]
10051c54:	225c      	movs	r2, #92	@ 0x5c
10051c56:	4353      	muls	r3, r2
10051c58:	4a05      	ldr	r2, [pc, #20]	@ (10051c70 <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
10051c5a:	4694      	mov	ip, r2
10051c5c:	4463      	add	r3, ip
10051c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10051c60:	0c1b      	lsrs	r3, r3, #16
10051c62:	041b      	lsls	r3, r3, #16
10051c64:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10051c66:	0018      	movs	r0, r3
10051c68:	46bd      	mov	sp, r7
10051c6a:	b002      	add	sp, #8
10051c6c:	bd80      	pop	{r7, pc}
10051c6e:	46c0      	nop			@ (mov r8, r8)
10051c70:	200000dc 	.word	0x200000dc

10051c74 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10051c74:	b580      	push	{r7, lr}
10051c76:	b082      	sub	sp, #8
10051c78:	af00      	add	r7, sp, #0
10051c7a:	0002      	movs	r2, r0
10051c7c:	6039      	str	r1, [r7, #0]
10051c7e:	1dfb      	adds	r3, r7, #7
10051c80:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
10051c82:	1dfb      	adds	r3, r7, #7
10051c84:	781b      	ldrb	r3, [r3, #0]
10051c86:	225c      	movs	r2, #92	@ 0x5c
10051c88:	4353      	muls	r3, r2
10051c8a:	4a0b      	ldr	r2, [pc, #44]	@ (10051cb8 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10051c8c:	4694      	mov	ip, r2
10051c8e:	4463      	add	r3, ip
10051c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10051c92:	0d9b      	lsrs	r3, r3, #22
10051c94:	0599      	lsls	r1, r3, #22
10051c96:	683b      	ldr	r3, [r7, #0]
10051c98:	029b      	lsls	r3, r3, #10
10051c9a:	0a9a      	lsrs	r2, r3, #10
10051c9c:	1dfb      	adds	r3, r7, #7
10051c9e:	781b      	ldrb	r3, [r3, #0]
10051ca0:	205c      	movs	r0, #92	@ 0x5c
10051ca2:	4343      	muls	r3, r0
10051ca4:	4804      	ldr	r0, [pc, #16]	@ (10051cb8 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10051ca6:	4684      	mov	ip, r0
10051ca8:	4463      	add	r3, ip
10051caa:	430a      	orrs	r2, r1
10051cac:	631a      	str	r2, [r3, #48]	@ 0x30
}
10051cae:	46c0      	nop			@ (mov r8, r8)
10051cb0:	46bd      	mov	sp, r7
10051cb2:	b002      	add	sp, #8
10051cb4:	bd80      	pop	{r7, pc}
10051cb6:	46c0      	nop			@ (mov r8, r8)
10051cb8:	200000dc 	.word	0x200000dc

10051cbc <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10051cbc:	b580      	push	{r7, lr}
10051cbe:	b082      	sub	sp, #8
10051cc0:	af00      	add	r7, sp, #0
10051cc2:	0002      	movs	r2, r0
10051cc4:	1dfb      	adds	r3, r7, #7
10051cc6:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10051cc8:	1dfb      	adds	r3, r7, #7
10051cca:	781b      	ldrb	r3, [r3, #0]
10051ccc:	225c      	movs	r2, #92	@ 0x5c
10051cce:	4353      	muls	r3, r2
10051cd0:	4a04      	ldr	r2, [pc, #16]	@ (10051ce4 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
10051cd2:	4694      	mov	ip, r2
10051cd4:	4463      	add	r3, ip
10051cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10051cd8:	029b      	lsls	r3, r3, #10
10051cda:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
10051cdc:	0018      	movs	r0, r3
10051cde:	46bd      	mov	sp, r7
10051ce0:	b002      	add	sp, #8
10051ce2:	bd80      	pop	{r7, pc}
10051ce4:	200000dc 	.word	0x200000dc

10051ce8 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10051ce8:	b580      	push	{r7, lr}
10051cea:	b082      	sub	sp, #8
10051cec:	af00      	add	r7, sp, #0
10051cee:	6078      	str	r0, [r7, #4]
10051cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10051cf2:	687b      	ldr	r3, [r7, #4]
10051cf4:	681b      	ldr	r3, [r3, #0]
10051cf6:	687b      	ldr	r3, [r7, #4]
10051cf8:	683a      	ldr	r2, [r7, #0]
10051cfa:	601a      	str	r2, [r3, #0]
}
10051cfc:	46c0      	nop			@ (mov r8, r8)
10051cfe:	46bd      	mov	sp, r7
10051d00:	b002      	add	sp, #8
10051d02:	bd80      	pop	{r7, pc}

10051d04 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10051d04:	b580      	push	{r7, lr}
10051d06:	b082      	sub	sp, #8
10051d08:	af00      	add	r7, sp, #0
10051d0a:	6078      	str	r0, [r7, #4]
10051d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
10051d0e:	687b      	ldr	r3, [r7, #4]
10051d10:	685b      	ldr	r3, [r3, #4]
10051d12:	2201      	movs	r2, #1
10051d14:	4393      	bics	r3, r2
10051d16:	001a      	movs	r2, r3
10051d18:	683b      	ldr	r3, [r7, #0]
10051d1a:	2101      	movs	r1, #1
10051d1c:	400b      	ands	r3, r1
10051d1e:	431a      	orrs	r2, r3
10051d20:	687b      	ldr	r3, [r7, #4]
10051d22:	605a      	str	r2, [r3, #4]
}
10051d24:	46c0      	nop			@ (mov r8, r8)
10051d26:	46bd      	mov	sp, r7
10051d28:	b002      	add	sp, #8
10051d2a:	bd80      	pop	{r7, pc}

10051d2c <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10051d2c:	b580      	push	{r7, lr}
10051d2e:	b082      	sub	sp, #8
10051d30:	af00      	add	r7, sp, #0
10051d32:	6078      	str	r0, [r7, #4]
10051d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
10051d36:	687b      	ldr	r3, [r7, #4]
10051d38:	685b      	ldr	r3, [r3, #4]
10051d3a:	2204      	movs	r2, #4
10051d3c:	4393      	bics	r3, r2
10051d3e:	001a      	movs	r2, r3
10051d40:	683b      	ldr	r3, [r7, #0]
10051d42:	009b      	lsls	r3, r3, #2
10051d44:	2104      	movs	r1, #4
10051d46:	400b      	ands	r3, r1
10051d48:	431a      	orrs	r2, r3
10051d4a:	687b      	ldr	r3, [r7, #4]
10051d4c:	605a      	str	r2, [r3, #4]
}
10051d4e:	46c0      	nop			@ (mov r8, r8)
10051d50:	46bd      	mov	sp, r7
10051d52:	b002      	add	sp, #8
10051d54:	bd80      	pop	{r7, pc}

10051d56 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10051d56:	b580      	push	{r7, lr}
10051d58:	b082      	sub	sp, #8
10051d5a:	af00      	add	r7, sp, #0
10051d5c:	6078      	str	r0, [r7, #4]
10051d5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
10051d60:	687b      	ldr	r3, [r7, #4]
10051d62:	685b      	ldr	r3, [r3, #4]
10051d64:	2208      	movs	r2, #8
10051d66:	4393      	bics	r3, r2
10051d68:	001a      	movs	r2, r3
10051d6a:	683b      	ldr	r3, [r7, #0]
10051d6c:	00db      	lsls	r3, r3, #3
10051d6e:	2108      	movs	r1, #8
10051d70:	400b      	ands	r3, r1
10051d72:	431a      	orrs	r2, r3
10051d74:	687b      	ldr	r3, [r7, #4]
10051d76:	605a      	str	r2, [r3, #4]
}
10051d78:	46c0      	nop			@ (mov r8, r8)
10051d7a:	46bd      	mov	sp, r7
10051d7c:	b002      	add	sp, #8
10051d7e:	bd80      	pop	{r7, pc}

10051d80 <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
10051d80:	b580      	push	{r7, lr}
10051d82:	b082      	sub	sp, #8
10051d84:	af00      	add	r7, sp, #0
10051d86:	6078      	str	r0, [r7, #4]
10051d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
10051d8a:	687b      	ldr	r3, [r7, #4]
10051d8c:	685b      	ldr	r3, [r3, #4]
10051d8e:	2210      	movs	r2, #16
10051d90:	4393      	bics	r3, r2
10051d92:	001a      	movs	r2, r3
10051d94:	683b      	ldr	r3, [r7, #0]
10051d96:	011b      	lsls	r3, r3, #4
10051d98:	2110      	movs	r1, #16
10051d9a:	400b      	ands	r3, r1
10051d9c:	431a      	orrs	r2, r3
10051d9e:	687b      	ldr	r3, [r7, #4]
10051da0:	605a      	str	r2, [r3, #4]
}
10051da2:	46c0      	nop			@ (mov r8, r8)
10051da4:	46bd      	mov	sp, r7
10051da6:	b002      	add	sp, #8
10051da8:	bd80      	pop	{r7, pc}

10051daa <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10051daa:	b580      	push	{r7, lr}
10051dac:	b082      	sub	sp, #8
10051dae:	af00      	add	r7, sp, #0
10051db0:	6078      	str	r0, [r7, #4]
10051db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10051db4:	687b      	ldr	r3, [r7, #4]
10051db6:	685b      	ldr	r3, [r3, #4]
10051db8:	2220      	movs	r2, #32
10051dba:	4393      	bics	r3, r2
10051dbc:	001a      	movs	r2, r3
10051dbe:	683b      	ldr	r3, [r7, #0]
10051dc0:	015b      	lsls	r3, r3, #5
10051dc2:	2120      	movs	r1, #32
10051dc4:	400b      	ands	r3, r1
10051dc6:	431a      	orrs	r2, r3
10051dc8:	687b      	ldr	r3, [r7, #4]
10051dca:	605a      	str	r2, [r3, #4]
}
10051dcc:	46c0      	nop			@ (mov r8, r8)
10051dce:	46bd      	mov	sp, r7
10051dd0:	b002      	add	sp, #8
10051dd2:	bd80      	pop	{r7, pc}

10051dd4 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10051dd4:	b580      	push	{r7, lr}
10051dd6:	b082      	sub	sp, #8
10051dd8:	af00      	add	r7, sp, #0
10051dda:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
10051ddc:	687b      	ldr	r3, [r7, #4]
10051dde:	685b      	ldr	r3, [r3, #4]
10051de0:	2240      	movs	r2, #64	@ 0x40
10051de2:	431a      	orrs	r2, r3
10051de4:	687b      	ldr	r3, [r7, #4]
10051de6:	605a      	str	r2, [r3, #4]
}
10051de8:	46c0      	nop			@ (mov r8, r8)
10051dea:	46bd      	mov	sp, r7
10051dec:	b002      	add	sp, #8
10051dee:	bd80      	pop	{r7, pc}

10051df0 <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
10051df0:	b580      	push	{r7, lr}
10051df2:	b082      	sub	sp, #8
10051df4:	af00      	add	r7, sp, #0
10051df6:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10051df8:	687b      	ldr	r3, [r7, #4]
10051dfa:	685b      	ldr	r3, [r3, #4]
10051dfc:	2280      	movs	r2, #128	@ 0x80
10051dfe:	431a      	orrs	r2, r3
10051e00:	687b      	ldr	r3, [r7, #4]
10051e02:	605a      	str	r2, [r3, #4]
}
10051e04:	46c0      	nop			@ (mov r8, r8)
10051e06:	46bd      	mov	sp, r7
10051e08:	b002      	add	sp, #8
10051e0a:	bd80      	pop	{r7, pc}

10051e0c <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
10051e0c:	b580      	push	{r7, lr}
10051e0e:	b082      	sub	sp, #8
10051e10:	af00      	add	r7, sp, #0
10051e12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10051e14:	687b      	ldr	r3, [r7, #4]
10051e16:	685b      	ldr	r3, [r3, #4]
10051e18:	2280      	movs	r2, #128	@ 0x80
10051e1a:	4393      	bics	r3, r2
10051e1c:	001a      	movs	r2, r3
10051e1e:	687b      	ldr	r3, [r7, #4]
10051e20:	605a      	str	r2, [r3, #4]
}
10051e22:	46c0      	nop			@ (mov r8, r8)
10051e24:	46bd      	mov	sp, r7
10051e26:	b002      	add	sp, #8
10051e28:	bd80      	pop	{r7, pc}
	...

10051e2c <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
10051e2c:	b580      	push	{r7, lr}
10051e2e:	b082      	sub	sp, #8
10051e30:	af00      	add	r7, sp, #0
10051e32:	6078      	str	r0, [r7, #4]
10051e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
10051e36:	687b      	ldr	r3, [r7, #4]
10051e38:	685b      	ldr	r3, [r3, #4]
10051e3a:	4a07      	ldr	r2, [pc, #28]	@ (10051e58 <LL_RADIO_SetNextTxMode+0x2c>)
10051e3c:	401a      	ands	r2, r3
10051e3e:	683b      	ldr	r3, [r7, #0]
10051e40:	0219      	lsls	r1, r3, #8
10051e42:	2380      	movs	r3, #128	@ 0x80
10051e44:	005b      	lsls	r3, r3, #1
10051e46:	400b      	ands	r3, r1
10051e48:	431a      	orrs	r2, r3
10051e4a:	687b      	ldr	r3, [r7, #4]
10051e4c:	605a      	str	r2, [r3, #4]
}
10051e4e:	46c0      	nop			@ (mov r8, r8)
10051e50:	46bd      	mov	sp, r7
10051e52:	b002      	add	sp, #8
10051e54:	bd80      	pop	{r7, pc}
10051e56:	46c0      	nop			@ (mov r8, r8)
10051e58:	fffffeff 	.word	0xfffffeff

10051e5c <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10051e5c:	b580      	push	{r7, lr}
10051e5e:	b082      	sub	sp, #8
10051e60:	af00      	add	r7, sp, #0
10051e62:	6078      	str	r0, [r7, #4]
10051e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10051e66:	687b      	ldr	r3, [r7, #4]
10051e68:	685b      	ldr	r3, [r3, #4]
10051e6a:	4a07      	ldr	r2, [pc, #28]	@ (10051e88 <LL_RADIO_SetAllTableDataReady+0x2c>)
10051e6c:	401a      	ands	r2, r3
10051e6e:	683b      	ldr	r3, [r7, #0]
10051e70:	0259      	lsls	r1, r3, #9
10051e72:	2380      	movs	r3, #128	@ 0x80
10051e74:	009b      	lsls	r3, r3, #2
10051e76:	400b      	ands	r3, r1
10051e78:	431a      	orrs	r2, r3
10051e7a:	687b      	ldr	r3, [r7, #4]
10051e7c:	605a      	str	r2, [r3, #4]
}
10051e7e:	46c0      	nop			@ (mov r8, r8)
10051e80:	46bd      	mov	sp, r7
10051e82:	b002      	add	sp, #8
10051e84:	bd80      	pop	{r7, pc}
10051e86:	46c0      	nop			@ (mov r8, r8)
10051e88:	fffffdff 	.word	0xfffffdff

10051e8c <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10051e8c:	b580      	push	{r7, lr}
10051e8e:	b082      	sub	sp, #8
10051e90:	af00      	add	r7, sp, #0
10051e92:	6078      	str	r0, [r7, #4]
10051e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10051e96:	687b      	ldr	r3, [r7, #4]
10051e98:	685b      	ldr	r3, [r3, #4]
10051e9a:	4a07      	ldr	r2, [pc, #28]	@ (10051eb8 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10051e9c:	401a      	ands	r2, r3
10051e9e:	683b      	ldr	r3, [r7, #0]
10051ea0:	0299      	lsls	r1, r3, #10
10051ea2:	2380      	movs	r3, #128	@ 0x80
10051ea4:	00db      	lsls	r3, r3, #3
10051ea6:	400b      	ands	r3, r1
10051ea8:	431a      	orrs	r2, r3
10051eaa:	687b      	ldr	r3, [r7, #4]
10051eac:	605a      	str	r2, [r3, #4]
}
10051eae:	46c0      	nop			@ (mov r8, r8)
10051eb0:	46bd      	mov	sp, r7
10051eb2:	b002      	add	sp, #8
10051eb4:	bd80      	pop	{r7, pc}
10051eb6:	46c0      	nop			@ (mov r8, r8)
10051eb8:	fffffbff 	.word	0xfffffbff

10051ebc <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10051ebc:	b580      	push	{r7, lr}
10051ebe:	b082      	sub	sp, #8
10051ec0:	af00      	add	r7, sp, #0
10051ec2:	6078      	str	r0, [r7, #4]
10051ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10051ec6:	687b      	ldr	r3, [r7, #4]
10051ec8:	689b      	ldr	r3, [r3, #8]
10051eca:	687b      	ldr	r3, [r7, #4]
10051ecc:	683a      	ldr	r2, [r7, #0]
10051ece:	609a      	str	r2, [r3, #8]
}
10051ed0:	46c0      	nop			@ (mov r8, r8)
10051ed2:	46bd      	mov	sp, r7
10051ed4:	b002      	add	sp, #8
10051ed6:	bd80      	pop	{r7, pc}

10051ed8 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10051ed8:	b580      	push	{r7, lr}
10051eda:	b082      	sub	sp, #8
10051edc:	af00      	add	r7, sp, #0
10051ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
10051ee0:	687b      	ldr	r3, [r7, #4]
10051ee2:	689b      	ldr	r3, [r3, #8]
}
10051ee4:	0018      	movs	r0, r3
10051ee6:	46bd      	mov	sp, r7
10051ee8:	b002      	add	sp, #8
10051eea:	bd80      	pop	{r7, pc}

10051eec <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
10051eec:	b580      	push	{r7, lr}
10051eee:	b082      	sub	sp, #8
10051ef0:	af00      	add	r7, sp, #0
10051ef2:	6078      	str	r0, [r7, #4]
10051ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
10051ef6:	687b      	ldr	r3, [r7, #4]
10051ef8:	68db      	ldr	r3, [r3, #12]
10051efa:	0d1b      	lsrs	r3, r3, #20
10051efc:	051a      	lsls	r2, r3, #20
10051efe:	683b      	ldr	r3, [r7, #0]
10051f00:	031b      	lsls	r3, r3, #12
10051f02:	0b1b      	lsrs	r3, r3, #12
10051f04:	431a      	orrs	r2, r3
10051f06:	687b      	ldr	r3, [r7, #4]
10051f08:	60da      	str	r2, [r3, #12]
}
10051f0a:	46c0      	nop			@ (mov r8, r8)
10051f0c:	46bd      	mov	sp, r7
10051f0e:	b002      	add	sp, #8
10051f10:	bd80      	pop	{r7, pc}

10051f12 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
10051f12:	b580      	push	{r7, lr}
10051f14:	b082      	sub	sp, #8
10051f16:	af00      	add	r7, sp, #0
10051f18:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
10051f1a:	687b      	ldr	r3, [r7, #4]
10051f1c:	68db      	ldr	r3, [r3, #12]
10051f1e:	2280      	movs	r2, #128	@ 0x80
10051f20:	0352      	lsls	r2, r2, #13
10051f22:	431a      	orrs	r2, r3
10051f24:	687b      	ldr	r3, [r7, #4]
10051f26:	60da      	str	r2, [r3, #12]
}
10051f28:	46c0      	nop			@ (mov r8, r8)
10051f2a:	46bd      	mov	sp, r7
10051f2c:	b002      	add	sp, #8
10051f2e:	bd80      	pop	{r7, pc}

10051f30 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
10051f30:	b580      	push	{r7, lr}
10051f32:	b082      	sub	sp, #8
10051f34:	af00      	add	r7, sp, #0
10051f36:	6078      	str	r0, [r7, #4]
10051f38:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
10051f3a:	687b      	ldr	r3, [r7, #4]
10051f3c:	68db      	ldr	r3, [r3, #12]
10051f3e:	4a07      	ldr	r2, [pc, #28]	@ (10051f5c <LL_RADIO_SetTrigRcv+0x2c>)
10051f40:	401a      	ands	r2, r3
10051f42:	683b      	ldr	r3, [r7, #0]
10051f44:	0599      	lsls	r1, r3, #22
10051f46:	2380      	movs	r3, #128	@ 0x80
10051f48:	03db      	lsls	r3, r3, #15
10051f4a:	400b      	ands	r3, r1
10051f4c:	431a      	orrs	r2, r3
10051f4e:	687b      	ldr	r3, [r7, #4]
10051f50:	60da      	str	r2, [r3, #12]
}
10051f52:	46c0      	nop			@ (mov r8, r8)
10051f54:	46bd      	mov	sp, r7
10051f56:	b002      	add	sp, #8
10051f58:	bd80      	pop	{r7, pc}
10051f5a:	46c0      	nop			@ (mov r8, r8)
10051f5c:	ffbfffff 	.word	0xffbfffff

10051f60 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10051f60:	b580      	push	{r7, lr}
10051f62:	b082      	sub	sp, #8
10051f64:	af00      	add	r7, sp, #0
10051f66:	6078      	str	r0, [r7, #4]
10051f68:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10051f6a:	687b      	ldr	r3, [r7, #4]
10051f6c:	68db      	ldr	r3, [r3, #12]
10051f6e:	4a07      	ldr	r2, [pc, #28]	@ (10051f8c <LL_RADIO_SetTrigDone+0x2c>)
10051f70:	401a      	ands	r2, r3
10051f72:	683b      	ldr	r3, [r7, #0]
10051f74:	05d9      	lsls	r1, r3, #23
10051f76:	2380      	movs	r3, #128	@ 0x80
10051f78:	041b      	lsls	r3, r3, #16
10051f7a:	400b      	ands	r3, r1
10051f7c:	431a      	orrs	r2, r3
10051f7e:	687b      	ldr	r3, [r7, #4]
10051f80:	60da      	str	r2, [r3, #12]
}
10051f82:	46c0      	nop			@ (mov r8, r8)
10051f84:	46bd      	mov	sp, r7
10051f86:	b002      	add	sp, #8
10051f88:	bd80      	pop	{r7, pc}
10051f8a:	46c0      	nop			@ (mov r8, r8)
10051f8c:	ff7fffff 	.word	0xff7fffff

10051f90 <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
10051f90:	b580      	push	{r7, lr}
10051f92:	b082      	sub	sp, #8
10051f94:	af00      	add	r7, sp, #0
10051f96:	6078      	str	r0, [r7, #4]
10051f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
10051f9a:	687b      	ldr	r3, [r7, #4]
10051f9c:	68db      	ldr	r3, [r3, #12]
10051f9e:	4a07      	ldr	r2, [pc, #28]	@ (10051fbc <LL_RADIO_SetIntTxOk+0x2c>)
10051fa0:	401a      	ands	r2, r3
10051fa2:	683b      	ldr	r3, [r7, #0]
10051fa4:	0619      	lsls	r1, r3, #24
10051fa6:	2380      	movs	r3, #128	@ 0x80
10051fa8:	045b      	lsls	r3, r3, #17
10051faa:	400b      	ands	r3, r1
10051fac:	431a      	orrs	r2, r3
10051fae:	687b      	ldr	r3, [r7, #4]
10051fb0:	60da      	str	r2, [r3, #12]
}
10051fb2:	46c0      	nop			@ (mov r8, r8)
10051fb4:	46bd      	mov	sp, r7
10051fb6:	b002      	add	sp, #8
10051fb8:	bd80      	pop	{r7, pc}
10051fba:	46c0      	nop			@ (mov r8, r8)
10051fbc:	feffffff 	.word	0xfeffffff

10051fc0 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10051fc0:	b580      	push	{r7, lr}
10051fc2:	b082      	sub	sp, #8
10051fc4:	af00      	add	r7, sp, #0
10051fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10051fc8:	687b      	ldr	r3, [r7, #4]
10051fca:	68db      	ldr	r3, [r3, #12]
10051fcc:	2280      	movs	r2, #128	@ 0x80
10051fce:	0492      	lsls	r2, r2, #18
10051fd0:	431a      	orrs	r2, r3
10051fd2:	687b      	ldr	r3, [r7, #4]
10051fd4:	60da      	str	r2, [r3, #12]
}
10051fd6:	46c0      	nop			@ (mov r8, r8)
10051fd8:	46bd      	mov	sp, r7
10051fda:	b002      	add	sp, #8
10051fdc:	bd80      	pop	{r7, pc}

10051fde <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
10051fde:	b580      	push	{r7, lr}
10051fe0:	b082      	sub	sp, #8
10051fe2:	af00      	add	r7, sp, #0
10051fe4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
10051fe6:	687b      	ldr	r3, [r7, #4]
10051fe8:	68db      	ldr	r3, [r3, #12]
10051fea:	2280      	movs	r2, #128	@ 0x80
10051fec:	04d2      	lsls	r2, r2, #19
10051fee:	431a      	orrs	r2, r3
10051ff0:	687b      	ldr	r3, [r7, #4]
10051ff2:	60da      	str	r2, [r3, #12]
}
10051ff4:	46c0      	nop			@ (mov r8, r8)
10051ff6:	46bd      	mov	sp, r7
10051ff8:	b002      	add	sp, #8
10051ffa:	bd80      	pop	{r7, pc}

10051ffc <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
10051ffc:	b580      	push	{r7, lr}
10051ffe:	b082      	sub	sp, #8
10052000:	af00      	add	r7, sp, #0
10052002:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
10052004:	687b      	ldr	r3, [r7, #4]
10052006:	68db      	ldr	r3, [r3, #12]
10052008:	2280      	movs	r2, #128	@ 0x80
1005200a:	05d2      	lsls	r2, r2, #23
1005200c:	431a      	orrs	r2, r3
1005200e:	687b      	ldr	r3, [r7, #4]
10052010:	60da      	str	r2, [r3, #12]
}
10052012:	46c0      	nop			@ (mov r8, r8)
10052014:	46bd      	mov	sp, r7
10052016:	b002      	add	sp, #8
10052018:	bd80      	pop	{r7, pc}

1005201a <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
1005201a:	b580      	push	{r7, lr}
1005201c:	b082      	sub	sp, #8
1005201e:	af00      	add	r7, sp, #0
10052020:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
10052022:	687b      	ldr	r3, [r7, #4]
10052024:	68db      	ldr	r3, [r3, #12]
10052026:	2280      	movs	r2, #128	@ 0x80
10052028:	0612      	lsls	r2, r2, #24
1005202a:	431a      	orrs	r2, r3
1005202c:	687b      	ldr	r3, [r7, #4]
1005202e:	60da      	str	r2, [r3, #12]
}
10052030:	46c0      	nop			@ (mov r8, r8)
10052032:	46bd      	mov	sp, r7
10052034:	b002      	add	sp, #8
10052036:	bd80      	pop	{r7, pc}

10052038 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
10052038:	b580      	push	{r7, lr}
1005203a:	b082      	sub	sp, #8
1005203c:	af00      	add	r7, sp, #0
1005203e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
10052040:	23c0      	movs	r3, #192	@ 0xc0
10052042:	05db      	lsls	r3, r3, #23
10052044:	685b      	ldr	r3, [r3, #4]
10052046:	4a07      	ldr	r2, [pc, #28]	@ (10052064 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
10052048:	4013      	ands	r3, r2
1005204a:	0019      	movs	r1, r3
1005204c:	687b      	ldr	r3, [r7, #4]
1005204e:	4a06      	ldr	r2, [pc, #24]	@ (10052068 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
10052050:	401a      	ands	r2, r3
10052052:	23c0      	movs	r3, #192	@ 0xc0
10052054:	05db      	lsls	r3, r3, #23
10052056:	430a      	orrs	r2, r1
10052058:	605a      	str	r2, [r3, #4]
}
1005205a:	46c0      	nop			@ (mov r8, r8)
1005205c:	46bd      	mov	sp, r7
1005205e:	b002      	add	sp, #8
10052060:	bd80      	pop	{r7, pc}
10052062:	46c0      	nop			@ (mov r8, r8)
10052064:	0002004f 	.word	0x0002004f
10052068:	fffdffb0 	.word	0xfffdffb0

1005206c <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
1005206c:	b580      	push	{r7, lr}
1005206e:	b082      	sub	sp, #8
10052070:	af00      	add	r7, sp, #0
10052072:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10052074:	23c0      	movs	r3, #192	@ 0xc0
10052076:	05db      	lsls	r3, r3, #23
10052078:	699b      	ldr	r3, [r3, #24]
1005207a:	2208      	movs	r2, #8
1005207c:	4393      	bics	r3, r2
1005207e:	0019      	movs	r1, r3
10052080:	687b      	ldr	r3, [r7, #4]
10052082:	00db      	lsls	r3, r3, #3
10052084:	2208      	movs	r2, #8
10052086:	401a      	ands	r2, r3
10052088:	23c0      	movs	r3, #192	@ 0xc0
1005208a:	05db      	lsls	r3, r3, #23
1005208c:	430a      	orrs	r2, r1
1005208e:	619a      	str	r2, [r3, #24]
}
10052090:	46c0      	nop			@ (mov r8, r8)
10052092:	46bd      	mov	sp, r7
10052094:	b002      	add	sp, #8
10052096:	bd80      	pop	{r7, pc}

10052098 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10052098:	b580      	push	{r7, lr}
1005209a:	b088      	sub	sp, #32
1005209c:	af00      	add	r7, sp, #0
1005209e:	6078      	str	r0, [r7, #4]
100520a0:	0008      	movs	r0, r1
100520a2:	0011      	movs	r1, r2
100520a4:	1cfb      	adds	r3, r7, #3
100520a6:	1c02      	adds	r2, r0, #0
100520a8:	701a      	strb	r2, [r3, #0]
100520aa:	1cbb      	adds	r3, r7, #2
100520ac:	1c0a      	adds	r2, r1, #0
100520ae:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
100520b0:	687b      	ldr	r3, [r7, #4]
100520b2:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
100520b4:	1cfb      	adds	r3, r7, #3
100520b6:	781b      	ldrb	r3, [r3, #0]
100520b8:	2b01      	cmp	r3, #1
100520ba:	d105      	bne.n	100520c8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in connection, initiating and active
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
100520bc:	2304      	movs	r3, #4
100520be:	60bb      	str	r3, [r7, #8]
#else
        const int32_t Adjust_Value = 6;
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
100520c0:	68bb      	ldr	r3, [r7, #8]
100520c2:	3302      	adds	r3, #2
100520c4:	61fb      	str	r3, [r7, #28]
100520c6:	e015      	b.n	100520f4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
100520c8:	1cfb      	adds	r3, r7, #3
100520ca:	781b      	ldrb	r3, [r3, #0]
100520cc:	2b00      	cmp	r3, #0
100520ce:	d105      	bne.n	100520dc <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * values used in prrevious versions of the stack.
         * They could be optimized after careful analysis of timing margins and
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
100520d0:	2304      	movs	r3, #4
100520d2:	60fb      	str	r3, [r7, #12]
#else
        const int32_t Adjust_Value = 4;
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
100520d4:	68fb      	ldr	r3, [r7, #12]
100520d6:	3302      	adds	r3, #2
100520d8:	61fb      	str	r3, [r7, #28]
100520da:	e00b      	b.n	100520f4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
100520dc:	1cfb      	adds	r3, r7, #3
100520de:	781b      	ldrb	r3, [r3, #0]
100520e0:	2b02      	cmp	r3, #2
100520e2:	d105      	bne.n	100520f0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
    {
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
100520e4:	2301      	movs	r3, #1
100520e6:	613b      	str	r3, [r7, #16]
#else
        const int32_t Adjust_Value = 2;
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
100520e8:	693b      	ldr	r3, [r7, #16]
100520ea:	3304      	adds	r3, #4
100520ec:	61fb      	str	r3, [r7, #28]
100520ee:	e001      	b.n	100520f4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
100520f0:	2300      	movs	r3, #0
100520f2:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
100520f4:	1cfb      	adds	r3, r7, #3
100520f6:	781b      	ldrb	r3, [r3, #0]
100520f8:	2b01      	cmp	r3, #1
100520fa:	d003      	beq.n	10052104 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
100520fc:	1cfb      	adds	r3, r7, #3
100520fe:	781b      	ldrb	r3, [r3, #0]
10052100:	2b02      	cmp	r3, #2
10052102:	d109      	bne.n	10052118 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
10052104:	1cbb      	adds	r3, r7, #2
10052106:	781b      	ldrb	r3, [r3, #0]
10052108:	2b01      	cmp	r3, #1
1005210a:	d102      	bne.n	10052112 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
1005210c:	239b      	movs	r3, #155	@ 0x9b
1005210e:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10052110:	e013      	b.n	1005213a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
10052112:	233d      	movs	r3, #61	@ 0x3d
10052114:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10052116:	e010      	b.n	1005213a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
10052118:	1cfb      	adds	r3, r7, #3
1005211a:	781b      	ldrb	r3, [r3, #0]
1005211c:	2b00      	cmp	r3, #0
1005211e:	d003      	beq.n	10052128 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
10052120:	1cfb      	adds	r3, r7, #3
10052122:	781b      	ldrb	r3, [r3, #0]
10052124:	2b03      	cmp	r3, #3
10052126:	d108      	bne.n	1005213a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
10052128:	1cbb      	adds	r3, r7, #2
1005212a:	781b      	ldrb	r3, [r3, #0]
1005212c:	2b01      	cmp	r3, #1
1005212e:	d102      	bne.n	10052136 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
10052130:	2399      	movs	r3, #153	@ 0x99
10052132:	61bb      	str	r3, [r7, #24]
10052134:	e001      	b.n	1005213a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
10052136:	233b      	movs	r3, #59	@ 0x3b
10052138:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
1005213a:	69ba      	ldr	r2, [r7, #24]
1005213c:	69fb      	ldr	r3, [r7, #28]
1005213e:	18d3      	adds	r3, r2, r3
10052140:	697a      	ldr	r2, [r7, #20]
10052142:	1ad3      	subs	r3, r2, r3
10052144:	617b      	str	r3, [r7, #20]

    return Timeout;
10052146:	697b      	ldr	r3, [r7, #20]
}
10052148:	0018      	movs	r0, r3
1005214a:	46bd      	mov	sp, r7
1005214c:	b008      	add	sp, #32
1005214e:	bd80      	pop	{r7, pc}

10052150 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
10052150:	b580      	push	{r7, lr}
10052152:	b082      	sub	sp, #8
10052154:	af00      	add	r7, sp, #0
10052156:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10052158:	687b      	ldr	r3, [r7, #4]
1005215a:	0018      	movs	r0, r3
1005215c:	f7ff ff6c 	bl	10052038 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
10052160:	46c0      	nop			@ (mov r8, r8)
10052162:	46bd      	mov	sp, r7
10052164:	b002      	add	sp, #8
10052166:	bd80      	pop	{r7, pc}

10052168 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10052168:	b580      	push	{r7, lr}
1005216a:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
1005216c:	2001      	movs	r0, #1
1005216e:	f7ff ff7d 	bl	1005206c <LL_RADIO_BlueSetClearSemaphoreRequest>
}
10052172:	46c0      	nop			@ (mov r8, r8)
10052174:	46bd      	mov	sp, r7
10052176:	bd80      	pop	{r7, pc}

10052178 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10052178:	b580      	push	{r7, lr}
1005217a:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
1005217c:	f7ff f8dc 	bl	10051338 <LL_RADIO_GlobalDisableBlue>
}
10052180:	46c0      	nop			@ (mov r8, r8)
10052182:	46bd      	mov	sp, r7
10052184:	bd80      	pop	{r7, pc}

10052186 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10052186:	b580      	push	{r7, lr}
10052188:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
1005218a:	f7ff f8c7 	bl	1005131c <LL_RADIO_GlobalEnableBlue>
}
1005218e:	46c0      	nop			@ (mov r8, r8)
10052190:	46bd      	mov	sp, r7
10052192:	bd80      	pop	{r7, pc}

10052194 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10052194:	b580      	push	{r7, lr}
10052196:	b082      	sub	sp, #8
10052198:	af00      	add	r7, sp, #0
1005219a:	0002      	movs	r2, r0
1005219c:	1dfb      	adds	r3, r7, #7
1005219e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
100521a0:	1dfb      	adds	r3, r7, #7
100521a2:	781b      	ldrb	r3, [r3, #0]
100521a4:	0018      	movs	r0, r3
100521a6:	f7ff f8a3 	bl	100512f0 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
100521aa:	46c0      	nop			@ (mov r8, r8)
100521ac:	46bd      	mov	sp, r7
100521ae:	b002      	add	sp, #8
100521b0:	bd80      	pop	{r7, pc}
	...

100521b4 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
100521b4:	b580      	push	{r7, lr}
100521b6:	b082      	sub	sp, #8
100521b8:	af00      	add	r7, sp, #0
100521ba:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
100521bc:	687b      	ldr	r3, [r7, #4]
100521be:	4a03      	ldr	r2, [pc, #12]	@ (100521cc <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
100521c0:	4013      	ands	r3, r2
}
100521c2:	0018      	movs	r0, r3
100521c4:	46bd      	mov	sp, r7
100521c6:	b002      	add	sp, #8
100521c8:	bd80      	pop	{r7, pc}
100521ca:	46c0      	nop			@ (mov r8, r8)
100521cc:	00c9df30 	.word	0x00c9df30

100521d0 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
100521d0:	b580      	push	{r7, lr}
100521d2:	b082      	sub	sp, #8
100521d4:	af00      	add	r7, sp, #0
100521d6:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
100521d8:	687a      	ldr	r2, [r7, #4]
100521da:	2380      	movs	r3, #128	@ 0x80
100521dc:	03db      	lsls	r3, r3, #15
100521de:	4013      	ands	r3, r2
}
100521e0:	0018      	movs	r0, r3
100521e2:	46bd      	mov	sp, r7
100521e4:	b002      	add	sp, #8
100521e6:	bd80      	pop	{r7, pc}

100521e8 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
100521e8:	b580      	push	{r7, lr}
100521ea:	b082      	sub	sp, #8
100521ec:	af00      	add	r7, sp, #0
100521ee:	6078      	str	r0, [r7, #4]
    return 0;
100521f0:	2300      	movs	r3, #0
}
100521f2:	0018      	movs	r0, r3
100521f4:	46bd      	mov	sp, r7
100521f6:	b002      	add	sp, #8
100521f8:	bd80      	pop	{r7, pc}

100521fa <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
100521fa:	b580      	push	{r7, lr}
100521fc:	b082      	sub	sp, #8
100521fe:	af00      	add	r7, sp, #0
10052200:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
10052202:	687a      	ldr	r2, [r7, #4]
10052204:	2380      	movs	r3, #128	@ 0x80
10052206:	05db      	lsls	r3, r3, #23
10052208:	4013      	ands	r3, r2
}
1005220a:	0018      	movs	r0, r3
1005220c:	46bd      	mov	sp, r7
1005220e:	b002      	add	sp, #8
10052210:	bd80      	pop	{r7, pc}

10052212 <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
10052212:	b580      	push	{r7, lr}
10052214:	b082      	sub	sp, #8
10052216:	af00      	add	r7, sp, #0
10052218:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
1005221a:	687a      	ldr	r2, [r7, #4]
1005221c:	2380      	movs	r3, #128	@ 0x80
1005221e:	049b      	lsls	r3, r3, #18
10052220:	4013      	ands	r3, r2
}
10052222:	0018      	movs	r0, r3
10052224:	46bd      	mov	sp, r7
10052226:	b002      	add	sp, #8
10052228:	bd80      	pop	{r7, pc}

1005222a <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
1005222a:	b580      	push	{r7, lr}
1005222c:	b082      	sub	sp, #8
1005222e:	af00      	add	r7, sp, #0
10052230:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
10052232:	687a      	ldr	r2, [r7, #4]
10052234:	2380      	movs	r3, #128	@ 0x80
10052236:	019b      	lsls	r3, r3, #6
10052238:	4013      	ands	r3, r2
}
1005223a:	0018      	movs	r0, r3
1005223c:	46bd      	mov	sp, r7
1005223e:	b002      	add	sp, #8
10052240:	bd80      	pop	{r7, pc}

10052242 <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
10052242:	b580      	push	{r7, lr}
10052244:	b082      	sub	sp, #8
10052246:	af00      	add	r7, sp, #0
10052248:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
1005224a:	687a      	ldr	r2, [r7, #4]
1005224c:	2380      	movs	r3, #128	@ 0x80
1005224e:	02db      	lsls	r3, r3, #11
10052250:	4013      	ands	r3, r2
}
10052252:	0018      	movs	r0, r3
10052254:	46bd      	mov	sp, r7
10052256:	b002      	add	sp, #8
10052258:	bd80      	pop	{r7, pc}

1005225a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
1005225a:	b580      	push	{r7, lr}
1005225c:	b082      	sub	sp, #8
1005225e:	af00      	add	r7, sp, #0
10052260:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
10052262:	687a      	ldr	r2, [r7, #4]
10052264:	2380      	movs	r3, #128	@ 0x80
10052266:	025b      	lsls	r3, r3, #9
10052268:	4013      	ands	r3, r2
}
1005226a:	0018      	movs	r0, r3
1005226c:	46bd      	mov	sp, r7
1005226e:	b002      	add	sp, #8
10052270:	bd80      	pop	{r7, pc}

10052272 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
10052272:	b580      	push	{r7, lr}
10052274:	b082      	sub	sp, #8
10052276:	af00      	add	r7, sp, #0
10052278:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
1005227a:	687a      	ldr	r2, [r7, #4]
1005227c:	2380      	movs	r3, #128	@ 0x80
1005227e:	039b      	lsls	r3, r3, #14
10052280:	4013      	ands	r3, r2
}
10052282:	0018      	movs	r0, r3
10052284:	46bd      	mov	sp, r7
10052286:	b002      	add	sp, #8
10052288:	bd80      	pop	{r7, pc}

1005228a <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
1005228a:	b580      	push	{r7, lr}
1005228c:	b082      	sub	sp, #8
1005228e:	af00      	add	r7, sp, #0
10052290:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
10052292:	687a      	ldr	r2, [r7, #4]
10052294:	2380      	movs	r3, #128	@ 0x80
10052296:	009b      	lsls	r3, r3, #2
10052298:	4013      	ands	r3, r2
}
1005229a:	0018      	movs	r0, r3
1005229c:	46bd      	mov	sp, r7
1005229e:	b002      	add	sp, #8
100522a0:	bd80      	pop	{r7, pc}

100522a2 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
100522a2:	b580      	push	{r7, lr}
100522a4:	b082      	sub	sp, #8
100522a6:	af00      	add	r7, sp, #0
100522a8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
100522aa:	687a      	ldr	r2, [r7, #4]
100522ac:	2380      	movs	r3, #128	@ 0x80
100522ae:	011b      	lsls	r3, r3, #4
100522b0:	4013      	ands	r3, r2
}
100522b2:	0018      	movs	r0, r3
100522b4:	46bd      	mov	sp, r7
100522b6:	b002      	add	sp, #8
100522b8:	bd80      	pop	{r7, pc}

100522ba <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
100522ba:	b580      	push	{r7, lr}
100522bc:	b082      	sub	sp, #8
100522be:	af00      	add	r7, sp, #0
100522c0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
100522c2:	687b      	ldr	r3, [r7, #4]
100522c4:	0fdb      	lsrs	r3, r3, #31
100522c6:	07db      	lsls	r3, r3, #31
}
100522c8:	0018      	movs	r0, r3
100522ca:	46bd      	mov	sp, r7
100522cc:	b002      	add	sp, #8
100522ce:	bd80      	pop	{r7, pc}

100522d0 <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
100522d0:	b580      	push	{r7, lr}
100522d2:	b082      	sub	sp, #8
100522d4:	af00      	add	r7, sp, #0
100522d6:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
100522d8:	687a      	ldr	r2, [r7, #4]
100522da:	2380      	movs	r3, #128	@ 0x80
100522dc:	04db      	lsls	r3, r3, #19
100522de:	4013      	ands	r3, r2
}
100522e0:	0018      	movs	r0, r3
100522e2:	46bd      	mov	sp, r7
100522e4:	b002      	add	sp, #8
100522e6:	bd80      	pop	{r7, pc}

100522e8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
100522e8:	b580      	push	{r7, lr}
100522ea:	b082      	sub	sp, #8
100522ec:	af00      	add	r7, sp, #0
100522ee:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100522f0:	687b      	ldr	r3, [r7, #4]
100522f2:	2240      	movs	r2, #64	@ 0x40
100522f4:	4013      	ands	r3, r2
}
100522f6:	0018      	movs	r0, r3
100522f8:	46bd      	mov	sp, r7
100522fa:	b002      	add	sp, #8
100522fc:	bd80      	pop	{r7, pc}

100522fe <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
100522fe:	b580      	push	{r7, lr}
10052300:	b082      	sub	sp, #8
10052302:	af00      	add	r7, sp, #0
10052304:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
10052306:	687a      	ldr	r2, [r7, #4]
10052308:	2380      	movs	r3, #128	@ 0x80
1005230a:	045b      	lsls	r3, r3, #17
1005230c:	4013      	ands	r3, r2
}
1005230e:	0018      	movs	r0, r3
10052310:	46bd      	mov	sp, r7
10052312:	b002      	add	sp, #8
10052314:	bd80      	pop	{r7, pc}

10052316 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052316:	b580      	push	{r7, lr}
10052318:	b082      	sub	sp, #8
1005231a:	af00      	add	r7, sp, #0
1005231c:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
1005231e:	687b      	ldr	r3, [r7, #4]
10052320:	2100      	movs	r1, #0
10052322:	0018      	movs	r0, r3
10052324:	f7ff fd17 	bl	10051d56 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10052328:	46c0      	nop			@ (mov r8, r8)
1005232a:	46bd      	mov	sp, r7
1005232c:	b002      	add	sp, #8
1005232e:	bd80      	pop	{r7, pc}

10052330 <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052330:	b580      	push	{r7, lr}
10052332:	b082      	sub	sp, #8
10052334:	af00      	add	r7, sp, #0
10052336:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
10052338:	687b      	ldr	r3, [r7, #4]
1005233a:	0018      	movs	r0, r3
1005233c:	f7ff fd66 	bl	10051e0c <LL_RADIO_IncrementerChannel_Disable>
}
10052340:	46c0      	nop			@ (mov r8, r8)
10052342:	46bd      	mov	sp, r7
10052344:	b002      	add	sp, #8
10052346:	bd80      	pop	{r7, pc}

10052348 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052348:	b580      	push	{r7, lr}
1005234a:	b082      	sub	sp, #8
1005234c:	af00      	add	r7, sp, #0
1005234e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10052350:	687b      	ldr	r3, [r7, #4]
10052352:	2100      	movs	r1, #0
10052354:	0018      	movs	r0, r3
10052356:	f7ff fcd5 	bl	10051d04 <LL_RADIO_SetCalibrationRequest>
}
1005235a:	46c0      	nop			@ (mov r8, r8)
1005235c:	46bd      	mov	sp, r7
1005235e:	b002      	add	sp, #8
10052360:	bd80      	pop	{r7, pc}

10052362 <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052362:	b580      	push	{r7, lr}
10052364:	b082      	sub	sp, #8
10052366:	af00      	add	r7, sp, #0
10052368:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
1005236a:	687b      	ldr	r3, [r7, #4]
1005236c:	0018      	movs	r0, r3
1005236e:	f7ff fdb3 	bl	10051ed8 <LL_RADIO_GetDataPointer>
10052372:	0003      	movs	r3, r0
}
10052374:	0018      	movs	r0, r3
10052376:	46bd      	mov	sp, r7
10052378:	b002      	add	sp, #8
1005237a:	bd80      	pop	{r7, pc}

1005237c <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005237c:	b580      	push	{r7, lr}
1005237e:	b082      	sub	sp, #8
10052380:	af00      	add	r7, sp, #0
10052382:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10052384:	687b      	ldr	r3, [r7, #4]
10052386:	2210      	movs	r2, #16
10052388:	2100      	movs	r1, #0
1005238a:	0018      	movs	r0, r3
1005238c:	f014 f888 	bl	100664a0 <memset>
}
10052390:	46c0      	nop			@ (mov r8, r8)
10052392:	46bd      	mov	sp, r7
10052394:	b002      	add	sp, #8
10052396:	bd80      	pop	{r7, pc}

10052398 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052398:	b580      	push	{r7, lr}
1005239a:	b082      	sub	sp, #8
1005239c:	af00      	add	r7, sp, #0
1005239e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100523a0:	687b      	ldr	r3, [r7, #4]
100523a2:	2101      	movs	r1, #1
100523a4:	0018      	movs	r0, r3
100523a6:	f7ff fd00 	bl	10051daa <LL_RADIO_SetAdvertise>
}
100523aa:	46c0      	nop			@ (mov r8, r8)
100523ac:	46bd      	mov	sp, r7
100523ae:	b002      	add	sp, #8
100523b0:	bd80      	pop	{r7, pc}

100523b2 <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100523b2:	b580      	push	{r7, lr}
100523b4:	b082      	sub	sp, #8
100523b6:	af00      	add	r7, sp, #0
100523b8:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100523ba:	687b      	ldr	r3, [r7, #4]
100523bc:	2101      	movs	r1, #1
100523be:	0018      	movs	r0, r3
100523c0:	f7ff fcde 	bl	10051d80 <LL_RADIO_SetCRCInitializationSelector>
}
100523c4:	46c0      	nop			@ (mov r8, r8)
100523c6:	46bd      	mov	sp, r7
100523c8:	b002      	add	sp, #8
100523ca:	bd80      	pop	{r7, pc}

100523cc <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100523cc:	b580      	push	{r7, lr}
100523ce:	b082      	sub	sp, #8
100523d0:	af00      	add	r7, sp, #0
100523d2:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
100523d4:	687b      	ldr	r3, [r7, #4]
100523d6:	2101      	movs	r1, #1
100523d8:	0018      	movs	r0, r3
100523da:	f7ff fcbc 	bl	10051d56 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100523de:	46c0      	nop			@ (mov r8, r8)
100523e0:	46bd      	mov	sp, r7
100523e2:	b002      	add	sp, #8
100523e4:	bd80      	pop	{r7, pc}

100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
100523e6:	b580      	push	{r7, lr}
100523e8:	b082      	sub	sp, #8
100523ea:	af00      	add	r7, sp, #0
100523ec:	6078      	str	r0, [r7, #4]
100523ee:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
100523f0:	683a      	ldr	r2, [r7, #0]
100523f2:	687b      	ldr	r3, [r7, #4]
100523f4:	0011      	movs	r1, r2
100523f6:	0018      	movs	r0, r3
100523f8:	f7ff fd60 	bl	10051ebc <LL_RADIO_SetDataPointer>
}
100523fc:	46c0      	nop			@ (mov r8, r8)
100523fe:	46bd      	mov	sp, r7
10052400:	b002      	add	sp, #8
10052402:	bd80      	pop	{r7, pc}

10052404 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052404:	b580      	push	{r7, lr}
10052406:	b082      	sub	sp, #8
10052408:	af00      	add	r7, sp, #0
1005240a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
1005240c:	687b      	ldr	r3, [r7, #4]
1005240e:	0018      	movs	r0, r3
10052410:	f7ff fcee 	bl	10051df0 <LL_RADIO_IncrementerChannel_Enable>
}
10052414:	46c0      	nop			@ (mov r8, r8)
10052416:	46bd      	mov	sp, r7
10052418:	b002      	add	sp, #8
1005241a:	bd80      	pop	{r7, pc}

1005241c <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005241c:	b580      	push	{r7, lr}
1005241e:	b082      	sub	sp, #8
10052420:	af00      	add	r7, sp, #0
10052422:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
10052424:	687b      	ldr	r3, [r7, #4]
10052426:	0018      	movs	r0, r3
10052428:	f7ff fde8 	bl	10051ffc <LL_RADIO_IntRcvCRCErr_Enable>
}
1005242c:	46c0      	nop			@ (mov r8, r8)
1005242e:	46bd      	mov	sp, r7
10052430:	b002      	add	sp, #8
10052432:	bd80      	pop	{r7, pc}

10052434 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052434:	b580      	push	{r7, lr}
10052436:	b082      	sub	sp, #8
10052438:	af00      	add	r7, sp, #0
1005243a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
1005243c:	687b      	ldr	r3, [r7, #4]
1005243e:	0018      	movs	r0, r3
10052440:	f7ff fdbe 	bl	10051fc0 <LL_RADIO_IntDone_Enable>
}
10052444:	46c0      	nop			@ (mov r8, r8)
10052446:	46bd      	mov	sp, r7
10052448:	b002      	add	sp, #8
1005244a:	bd80      	pop	{r7, pc}

1005244c <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005244c:	b580      	push	{r7, lr}
1005244e:	b082      	sub	sp, #8
10052450:	af00      	add	r7, sp, #0
10052452:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10052454:	687b      	ldr	r3, [r7, #4]
10052456:	0018      	movs	r0, r3
10052458:	f7ff fddf 	bl	1005201a <LL_RADIO_IntRcvOk_Enable>
}
1005245c:	46c0      	nop			@ (mov r8, r8)
1005245e:	46bd      	mov	sp, r7
10052460:	b002      	add	sp, #8
10052462:	bd80      	pop	{r7, pc}

10052464 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052464:	b580      	push	{r7, lr}
10052466:	b082      	sub	sp, #8
10052468:	af00      	add	r7, sp, #0
1005246a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
1005246c:	687b      	ldr	r3, [r7, #4]
1005246e:	0018      	movs	r0, r3
10052470:	f7ff fdb5 	bl	10051fde <LL_RADIO_IntRcvTimeout_Enable>
}
10052474:	46c0      	nop			@ (mov r8, r8)
10052476:	46bd      	mov	sp, r7
10052478:	b002      	add	sp, #8
1005247a:	bd80      	pop	{r7, pc}

1005247c <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005247c:	b580      	push	{r7, lr}
1005247e:	b082      	sub	sp, #8
10052480:	af00      	add	r7, sp, #0
10052482:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10052484:	687b      	ldr	r3, [r7, #4]
10052486:	2101      	movs	r1, #1
10052488:	0018      	movs	r0, r3
1005248a:	f7ff fd81 	bl	10051f90 <LL_RADIO_SetIntTxOk>
}
1005248e:	46c0      	nop			@ (mov r8, r8)
10052490:	46bd      	mov	sp, r7
10052492:	b002      	add	sp, #8
10052494:	bd80      	pop	{r7, pc}

10052496 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052496:	b580      	push	{r7, lr}
10052498:	b082      	sub	sp, #8
1005249a:	af00      	add	r7, sp, #0
1005249c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1005249e:	687b      	ldr	r3, [r7, #4]
100524a0:	2101      	movs	r1, #1
100524a2:	0018      	movs	r0, r3
100524a4:	f7ff fc42 	bl	10051d2c <LL_RADIO_SetKeepSemaRequest>
}
100524a8:	46c0      	nop			@ (mov r8, r8)
100524aa:	46bd      	mov	sp, r7
100524ac:	b002      	add	sp, #8
100524ae:	bd80      	pop	{r7, pc}

100524b0 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
100524b0:	b580      	push	{r7, lr}
100524b2:	b082      	sub	sp, #8
100524b4:	af00      	add	r7, sp, #0
100524b6:	6078      	str	r0, [r7, #4]
100524b8:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
100524ba:	683a      	ldr	r2, [r7, #0]
100524bc:	687b      	ldr	r3, [r7, #4]
100524be:	0011      	movs	r1, r2
100524c0:	0018      	movs	r0, r3
100524c2:	f7ff fc11 	bl	10051ce8 <LL_RADIO_SetNextPointer>
}
100524c6:	46c0      	nop			@ (mov r8, r8)
100524c8:	46bd      	mov	sp, r7
100524ca:	b002      	add	sp, #8
100524cc:	bd80      	pop	{r7, pc}

100524ce <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100524ce:	b580      	push	{r7, lr}
100524d0:	b082      	sub	sp, #8
100524d2:	af00      	add	r7, sp, #0
100524d4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
100524d6:	687b      	ldr	r3, [r7, #4]
100524d8:	2100      	movs	r1, #0
100524da:	0018      	movs	r0, r3
100524dc:	f7ff fca6 	bl	10051e2c <LL_RADIO_SetNextTxMode>
}
100524e0:	46c0      	nop			@ (mov r8, r8)
100524e2:	46bd      	mov	sp, r7
100524e4:	b002      	add	sp, #8
100524e6:	bd80      	pop	{r7, pc}

100524e8 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
100524e8:	b580      	push	{r7, lr}
100524ea:	b082      	sub	sp, #8
100524ec:	af00      	add	r7, sp, #0
100524ee:	6078      	str	r0, [r7, #4]
100524f0:	000a      	movs	r2, r1
100524f2:	1cfb      	adds	r3, r7, #3
100524f4:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
100524f6:	46c0      	nop			@ (mov r8, r8)
100524f8:	46bd      	mov	sp, r7
100524fa:	b002      	add	sp, #8
100524fc:	bd80      	pop	{r7, pc}

100524fe <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100524fe:	b580      	push	{r7, lr}
10052500:	b082      	sub	sp, #8
10052502:	af00      	add	r7, sp, #0
10052504:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10052506:	687b      	ldr	r3, [r7, #4]
10052508:	2101      	movs	r1, #1
1005250a:	0018      	movs	r0, r3
1005250c:	f7ff fc8e 	bl	10051e2c <LL_RADIO_SetNextTxMode>
}
10052510:	46c0      	nop			@ (mov r8, r8)
10052512:	46bd      	mov	sp, r7
10052514:	b002      	add	sp, #8
10052516:	bd80      	pop	{r7, pc}

10052518 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052518:	b580      	push	{r7, lr}
1005251a:	b082      	sub	sp, #8
1005251c:	af00      	add	r7, sp, #0
1005251e:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
10052520:	687b      	ldr	r3, [r7, #4]
10052522:	0018      	movs	r0, r3
10052524:	f7ff fc56 	bl	10051dd4 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
10052528:	46c0      	nop			@ (mov r8, r8)
1005252a:	46bd      	mov	sp, r7
1005252c:	b002      	add	sp, #8
1005252e:	bd80      	pop	{r7, pc}

10052530 <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052530:	b580      	push	{r7, lr}
10052532:	b082      	sub	sp, #8
10052534:	af00      	add	r7, sp, #0
10052536:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10052538:	687b      	ldr	r3, [r7, #4]
1005253a:	2101      	movs	r1, #1
1005253c:	0018      	movs	r0, r3
1005253e:	f7ff fbe1 	bl	10051d04 <LL_RADIO_SetCalibrationRequest>
}
10052542:	46c0      	nop			@ (mov r8, r8)
10052544:	46bd      	mov	sp, r7
10052546:	b002      	add	sp, #8
10052548:	bd80      	pop	{r7, pc}

1005254a <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005254a:	b580      	push	{r7, lr}
1005254c:	b082      	sub	sp, #8
1005254e:	af00      	add	r7, sp, #0
10052550:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10052552:	687b      	ldr	r3, [r7, #4]
10052554:	2101      	movs	r1, #1
10052556:	0018      	movs	r0, r3
10052558:	f7ff fc80 	bl	10051e5c <LL_RADIO_SetAllTableDataReady>
}
1005255c:	46c0      	nop			@ (mov r8, r8)
1005255e:	46bd      	mov	sp, r7
10052560:	b002      	add	sp, #8
10052562:	bd80      	pop	{r7, pc}

10052564 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10052564:	b580      	push	{r7, lr}
10052566:	b082      	sub	sp, #8
10052568:	af00      	add	r7, sp, #0
1005256a:	6078      	str	r0, [r7, #4]
1005256c:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
1005256e:	683a      	ldr	r2, [r7, #0]
10052570:	687b      	ldr	r3, [r7, #4]
10052572:	0011      	movs	r1, r2
10052574:	0018      	movs	r0, r3
10052576:	f7ff fcb9 	bl	10051eec <LL_RADIO_SetTimer2Triggering>
}
1005257a:	46c0      	nop			@ (mov r8, r8)
1005257c:	46bd      	mov	sp, r7
1005257e:	b002      	add	sp, #8
10052580:	bd80      	pop	{r7, pc}

10052582 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052582:	b580      	push	{r7, lr}
10052584:	b082      	sub	sp, #8
10052586:	af00      	add	r7, sp, #0
10052588:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
1005258a:	687b      	ldr	r3, [r7, #4]
1005258c:	0018      	movs	r0, r3
1005258e:	f7ff fcc0 	bl	10051f12 <LL_RADIO_Timer2_Enable>
}
10052592:	46c0      	nop			@ (mov r8, r8)
10052594:	46bd      	mov	sp, r7
10052596:	b002      	add	sp, #8
10052598:	bd80      	pop	{r7, pc}

1005259a <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005259a:	b580      	push	{r7, lr}
1005259c:	b082      	sub	sp, #8
1005259e:	af00      	add	r7, sp, #0
100525a0:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100525a2:	687b      	ldr	r3, [r7, #4]
100525a4:	2101      	movs	r1, #1
100525a6:	0018      	movs	r0, r3
100525a8:	f7ff fcda 	bl	10051f60 <LL_RADIO_SetTrigDone>
}
100525ac:	46c0      	nop			@ (mov r8, r8)
100525ae:	46bd      	mov	sp, r7
100525b0:	b002      	add	sp, #8
100525b2:	bd80      	pop	{r7, pc}

100525b4 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100525b4:	b580      	push	{r7, lr}
100525b6:	b082      	sub	sp, #8
100525b8:	af00      	add	r7, sp, #0
100525ba:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100525bc:	687b      	ldr	r3, [r7, #4]
100525be:	2101      	movs	r1, #1
100525c0:	0018      	movs	r0, r3
100525c2:	f7ff fcb5 	bl	10051f30 <LL_RADIO_SetTrigRcv>
}
100525c6:	46c0      	nop			@ (mov r8, r8)
100525c8:	46bd      	mov	sp, r7
100525ca:	b002      	add	sp, #8
100525cc:	bd80      	pop	{r7, pc}

100525ce <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100525ce:	b580      	push	{r7, lr}
100525d0:	b082      	sub	sp, #8
100525d2:	af00      	add	r7, sp, #0
100525d4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100525d6:	687b      	ldr	r3, [r7, #4]
100525d8:	2101      	movs	r1, #1
100525da:	0018      	movs	r0, r3
100525dc:	f7ff fc56 	bl	10051e8c <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100525e0:	687b      	ldr	r3, [r7, #4]
100525e2:	2101      	movs	r1, #1
100525e4:	0018      	movs	r0, r3
100525e6:	f7ff fc39 	bl	10051e5c <LL_RADIO_SetAllTableDataReady>
}
100525ea:	46c0      	nop			@ (mov r8, r8)
100525ec:	46bd      	mov	sp, r7
100525ee:	b002      	add	sp, #8
100525f0:	bd80      	pop	{r7, pc}

100525f2 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
100525f2:	b580      	push	{r7, lr}
100525f4:	b082      	sub	sp, #8
100525f6:	af00      	add	r7, sp, #0
100525f8:	6078      	str	r0, [r7, #4]
100525fa:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
100525fc:	683b      	ldr	r3, [r7, #0]
100525fe:	031b      	lsls	r3, r3, #12
10052600:	0b1b      	lsrs	r3, r3, #12
10052602:	0018      	movs	r0, r3
10052604:	f7fe fea6 	bl	10051354 <LL_RADIO_SetReceiveWindowTimeout>
}
10052608:	46c0      	nop			@ (mov r8, r8)
1005260a:	46bd      	mov	sp, r7
1005260c:	b002      	add	sp, #8
1005260e:	bd80      	pop	{r7, pc}

10052610 <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
10052610:	b580      	push	{r7, lr}
10052612:	b082      	sub	sp, #8
10052614:	af00      	add	r7, sp, #0
10052616:	0002      	movs	r2, r0
10052618:	1dfb      	adds	r3, r7, #7
1005261a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
1005261c:	1dfb      	adds	r3, r7, #7
1005261e:	781b      	ldrb	r3, [r3, #0]
10052620:	2101      	movs	r1, #1
10052622:	0018      	movs	r0, r3
10052624:	f7ff f848 	bl	100516b8 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10052628:	46c0      	nop			@ (mov r8, r8)
1005262a:	46bd      	mov	sp, r7
1005262c:	b002      	add	sp, #8
1005262e:	bd80      	pop	{r7, pc}

10052630 <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10052630:	b580      	push	{r7, lr}
10052632:	b082      	sub	sp, #8
10052634:	af00      	add	r7, sp, #0
10052636:	0002      	movs	r2, r0
10052638:	6039      	str	r1, [r7, #0]
1005263a:	1dfb      	adds	r3, r7, #7
1005263c:	701a      	strb	r2, [r3, #0]
    if(enable)
1005263e:	683b      	ldr	r3, [r7, #0]
10052640:	2b00      	cmp	r3, #0
10052642:	d005      	beq.n	10052650 <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10052644:	1dfb      	adds	r3, r7, #7
10052646:	781b      	ldrb	r3, [r3, #0]
10052648:	0018      	movs	r0, r3
1005264a:	f7fe fec1 	bl	100513d0 <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
1005264e:	e004      	b.n	1005265a <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10052650:	1dfb      	adds	r3, r7, #7
10052652:	781b      	ldrb	r3, [r3, #0]
10052654:	0018      	movs	r0, r3
10052656:	f7fe fed9 	bl	1005140c <LL_RADIO_RadioCommandList_Disable>
}
1005265a:	46c0      	nop			@ (mov r8, r8)
1005265c:	46bd      	mov	sp, r7
1005265e:	b002      	add	sp, #8
10052660:	bd80      	pop	{r7, pc}

10052662 <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
10052662:	b580      	push	{r7, lr}
10052664:	b082      	sub	sp, #8
10052666:	af00      	add	r7, sp, #0
10052668:	0002      	movs	r2, r0
1005266a:	1dfb      	adds	r3, r7, #7
1005266c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
1005266e:	1dfb      	adds	r3, r7, #7
10052670:	781b      	ldrb	r3, [r3, #0]
10052672:	0018      	movs	r0, r3
10052674:	f7fe ffc0 	bl	100515f8 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10052678:	1dfb      	adds	r3, r7, #7
1005267a:	781b      	ldrb	r3, [r3, #0]
1005267c:	0018      	movs	r0, r3
1005267e:	f7ff f9ad 	bl	100519dc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
10052682:	46c0      	nop			@ (mov r8, r8)
10052684:	46bd      	mov	sp, r7
10052686:	b002      	add	sp, #8
10052688:	bd80      	pop	{r7, pc}

1005268a <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
1005268a:	b580      	push	{r7, lr}
1005268c:	b082      	sub	sp, #8
1005268e:	af00      	add	r7, sp, #0
10052690:	0002      	movs	r2, r0
10052692:	1dfb      	adds	r3, r7, #7
10052694:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10052696:	1dfb      	adds	r3, r7, #7
10052698:	781b      	ldrb	r3, [r3, #0]
1005269a:	0018      	movs	r0, r3
1005269c:	f7fe ff8c 	bl	100515b8 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
100526a0:	1dfb      	adds	r3, r7, #7
100526a2:	781b      	ldrb	r3, [r3, #0]
100526a4:	0018      	movs	r0, r3
100526a6:	f7ff f979 	bl	1005199c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
100526aa:	46c0      	nop			@ (mov r8, r8)
100526ac:	46bd      	mov	sp, r7
100526ae:	b002      	add	sp, #8
100526b0:	bd80      	pop	{r7, pc}

100526b2 <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
100526b2:	b580      	push	{r7, lr}
100526b4:	b082      	sub	sp, #8
100526b6:	af00      	add	r7, sp, #0
100526b8:	0002      	movs	r2, r0
100526ba:	1dfb      	adds	r3, r7, #7
100526bc:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
100526be:	1dfb      	adds	r3, r7, #7
100526c0:	781b      	ldrb	r3, [r3, #0]
100526c2:	0018      	movs	r0, r3
100526c4:	f7ff f9c8 	bl	10051a58 <LL_RADIO_GetAccessAddress>
100526c8:	0003      	movs	r3, r0
}
100526ca:	0018      	movs	r0, r3
100526cc:	46bd      	mov	sp, r7
100526ce:	b002      	add	sp, #8
100526d0:	bd80      	pop	{r7, pc}

100526d2 <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
100526d2:	b580      	push	{r7, lr}
100526d4:	b082      	sub	sp, #8
100526d6:	af00      	add	r7, sp, #0
100526d8:	0002      	movs	r2, r0
100526da:	6039      	str	r1, [r7, #0]
100526dc:	1dfb      	adds	r3, r7, #7
100526de:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
100526e0:	1dfb      	adds	r3, r7, #7
100526e2:	781b      	ldrb	r3, [r3, #0]
100526e4:	0018      	movs	r0, r3
100526e6:	f7ff faad 	bl	10051c44 <LL_RADIO_GetUsedChannelFlags_15_0>
100526ea:	0003      	movs	r3, r0
100526ec:	b2da      	uxtb	r2, r3
100526ee:	683b      	ldr	r3, [r7, #0]
100526f0:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
100526f2:	1dfb      	adds	r3, r7, #7
100526f4:	781b      	ldrb	r3, [r3, #0]
100526f6:	0018      	movs	r0, r3
100526f8:	f7ff faa4 	bl	10051c44 <LL_RADIO_GetUsedChannelFlags_15_0>
100526fc:	0003      	movs	r3, r0
100526fe:	0a1a      	lsrs	r2, r3, #8
10052700:	683b      	ldr	r3, [r7, #0]
10052702:	3301      	adds	r3, #1
10052704:	b2d2      	uxtb	r2, r2
10052706:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
10052708:	1dfb      	adds	r3, r7, #7
1005270a:	781b      	ldrb	r3, [r3, #0]
1005270c:	0018      	movs	r0, r3
1005270e:	f7ff fad5 	bl	10051cbc <LL_RADIO_GetUsedChannelFlags_36_16>
10052712:	0002      	movs	r2, r0
10052714:	683b      	ldr	r3, [r7, #0]
10052716:	3302      	adds	r3, #2
10052718:	b2d2      	uxtb	r2, r2
1005271a:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
1005271c:	1dfb      	adds	r3, r7, #7
1005271e:	781b      	ldrb	r3, [r3, #0]
10052720:	0018      	movs	r0, r3
10052722:	f7ff facb 	bl	10051cbc <LL_RADIO_GetUsedChannelFlags_36_16>
10052726:	0003      	movs	r3, r0
10052728:	0a1a      	lsrs	r2, r3, #8
1005272a:	683b      	ldr	r3, [r7, #0]
1005272c:	3303      	adds	r3, #3
1005272e:	b2d2      	uxtb	r2, r2
10052730:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
10052732:	1dfb      	adds	r3, r7, #7
10052734:	781b      	ldrb	r3, [r3, #0]
10052736:	0018      	movs	r0, r3
10052738:	f7ff fac0 	bl	10051cbc <LL_RADIO_GetUsedChannelFlags_36_16>
1005273c:	0003      	movs	r3, r0
1005273e:	0c1a      	lsrs	r2, r3, #16
10052740:	683b      	ldr	r3, [r7, #0]
10052742:	3304      	adds	r3, #4
10052744:	b2d2      	uxtb	r2, r2
10052746:	701a      	strb	r2, [r3, #0]
}
10052748:	46c0      	nop			@ (mov r8, r8)
1005274a:	46bd      	mov	sp, r7
1005274c:	b002      	add	sp, #8
1005274e:	bd80      	pop	{r7, pc}

10052750 <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
10052750:	b580      	push	{r7, lr}
10052752:	b082      	sub	sp, #8
10052754:	af00      	add	r7, sp, #0
10052756:	0002      	movs	r2, r0
10052758:	1dfb      	adds	r3, r7, #7
1005275a:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
1005275c:	1dfb      	adds	r3, r7, #7
1005275e:	781b      	ldrb	r3, [r3, #0]
10052760:	225c      	movs	r2, #92	@ 0x5c
10052762:	4353      	muls	r3, r2
10052764:	4a03      	ldr	r2, [pc, #12]	@ (10052774 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10052766:	4694      	mov	ip, r2
10052768:	4463      	add	r3, ip
1005276a:	3338      	adds	r3, #56	@ 0x38
}
1005276c:	0018      	movs	r0, r3
1005276e:	46bd      	mov	sp, r7
10052770:	b002      	add	sp, #8
10052772:	bd80      	pop	{r7, pc}
10052774:	200000dc 	.word	0x200000dc

10052778 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10052778:	b580      	push	{r7, lr}
1005277a:	b082      	sub	sp, #8
1005277c:	af00      	add	r7, sp, #0
1005277e:	0002      	movs	r2, r0
10052780:	1dfb      	adds	r3, r7, #7
10052782:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10052784:	1dfb      	adds	r3, r7, #7
10052786:	781b      	ldrb	r3, [r3, #0]
10052788:	225c      	movs	r2, #92	@ 0x5c
1005278a:	4353      	muls	r3, r2
1005278c:	4a03      	ldr	r2, [pc, #12]	@ (1005279c <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
1005278e:	4694      	mov	ip, r2
10052790:	4463      	add	r3, ip
10052792:	3340      	adds	r3, #64	@ 0x40
}
10052794:	0018      	movs	r0, r3
10052796:	46bd      	mov	sp, r7
10052798:	b002      	add	sp, #8
1005279a:	bd80      	pop	{r7, pc}
1005279c:	200000dc 	.word	0x200000dc

100527a0 <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
100527a0:	b580      	push	{r7, lr}
100527a2:	b082      	sub	sp, #8
100527a4:	af00      	add	r7, sp, #0
100527a6:	0002      	movs	r2, r0
100527a8:	1dfb      	adds	r3, r7, #7
100527aa:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
100527ac:	1dfb      	adds	r3, r7, #7
100527ae:	781b      	ldrb	r3, [r3, #0]
100527b0:	0018      	movs	r0, r3
100527b2:	f7ff fa0d 	bl	10051bd0 <LL_RADIO_GetHopIncrement>
100527b6:	0003      	movs	r3, r0
100527b8:	b2db      	uxtb	r3, r3
}
100527ba:	0018      	movs	r0, r3
100527bc:	46bd      	mov	sp, r7
100527be:	b002      	add	sp, #8
100527c0:	bd80      	pop	{r7, pc}

100527c2 <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
100527c2:	b580      	push	{r7, lr}
100527c4:	b082      	sub	sp, #8
100527c6:	af00      	add	r7, sp, #0
100527c8:	0002      	movs	r2, r0
100527ca:	1dfb      	adds	r3, r7, #7
100527cc:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
100527ce:	1dfb      	adds	r3, r7, #7
100527d0:	781b      	ldrb	r3, [r3, #0]
100527d2:	0018      	movs	r0, r3
100527d4:	f7fe fe74 	bl	100514c0 <LL_RADIO_TxMode_IsEnabled>
100527d8:	0003      	movs	r3, r0
100527da:	b2db      	uxtb	r3, r3
}
100527dc:	0018      	movs	r0, r3
100527de:	46bd      	mov	sp, r7
100527e0:	b002      	add	sp, #8
100527e2:	bd80      	pop	{r7, pc}

100527e4 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
100527e4:	b580      	push	{r7, lr}
100527e6:	b082      	sub	sp, #8
100527e8:	af00      	add	r7, sp, #0
100527ea:	0002      	movs	r2, r0
100527ec:	1dfb      	adds	r3, r7, #7
100527ee:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
100527f0:	1dfb      	adds	r3, r7, #7
100527f2:	781b      	ldrb	r3, [r3, #0]
100527f4:	0018      	movs	r0, r3
100527f6:	f7fe fea7 	bl	10051548 <LL_RADIO_GetRemapChannel>
100527fa:	0003      	movs	r3, r0
100527fc:	b2db      	uxtb	r3, r3
}
100527fe:	0018      	movs	r0, r3
10052800:	46bd      	mov	sp, r7
10052802:	b002      	add	sp, #8
10052804:	bd80      	pop	{r7, pc}

10052806 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10052806:	b590      	push	{r4, r7, lr}
10052808:	b083      	sub	sp, #12
1005280a:	af00      	add	r7, sp, #0
1005280c:	0002      	movs	r2, r0
1005280e:	6039      	str	r1, [r7, #0]
10052810:	1dfb      	adds	r3, r7, #7
10052812:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
10052814:	1dfb      	adds	r3, r7, #7
10052816:	781b      	ldrb	r3, [r3, #0]
10052818:	0018      	movs	r0, r3
1005281a:	f7ff f86d 	bl	100518f8 <LL_RADIO_GetPacketCounterRx_23_0>
1005281e:	0002      	movs	r2, r0
10052820:	683b      	ldr	r3, [r7, #0]
10052822:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
10052824:	683b      	ldr	r3, [r7, #0]
10052826:	681c      	ldr	r4, [r3, #0]
10052828:	1dfb      	adds	r3, r7, #7
1005282a:	781b      	ldrb	r3, [r3, #0]
1005282c:	0018      	movs	r0, r3
1005282e:	f7ff f89f 	bl	10051970 <LL_RADIO_GetPacketCounterRx_39_24>
10052832:	0003      	movs	r3, r0
10052834:	061b      	lsls	r3, r3, #24
10052836:	0022      	movs	r2, r4
10052838:	431a      	orrs	r2, r3
1005283a:	683b      	ldr	r3, [r7, #0]
1005283c:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
1005283e:	1dfb      	adds	r3, r7, #7
10052840:	781b      	ldrb	r3, [r3, #0]
10052842:	0018      	movs	r0, r3
10052844:	f7ff f894 	bl	10051970 <LL_RADIO_GetPacketCounterRx_39_24>
10052848:	0002      	movs	r2, r0
1005284a:	683b      	ldr	r3, [r7, #0]
1005284c:	3304      	adds	r3, #4
1005284e:	0a12      	lsrs	r2, r2, #8
10052850:	601a      	str	r2, [r3, #0]
}
10052852:	46c0      	nop			@ (mov r8, r8)
10052854:	46bd      	mov	sp, r7
10052856:	b003      	add	sp, #12
10052858:	bd90      	pop	{r4, r7, pc}

1005285a <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
1005285a:	b580      	push	{r7, lr}
1005285c:	b082      	sub	sp, #8
1005285e:	af00      	add	r7, sp, #0
10052860:	0002      	movs	r2, r0
10052862:	1dfb      	adds	r3, r7, #7
10052864:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10052866:	1dfb      	adds	r3, r7, #7
10052868:	781b      	ldrb	r3, [r3, #0]
1005286a:	0018      	movs	r0, r3
1005286c:	f7fe ff74 	bl	10051758 <LL_RADIO_GetReceptionPhy>
10052870:	0003      	movs	r3, r0
10052872:	b2db      	uxtb	r3, r3
}
10052874:	0018      	movs	r0, r3
10052876:	46bd      	mov	sp, r7
10052878:	b002      	add	sp, #8
1005287a:	bd80      	pop	{r7, pc}

1005287c <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
1005287c:	b580      	push	{r7, lr}
1005287e:	b082      	sub	sp, #8
10052880:	af00      	add	r7, sp, #0
10052882:	0002      	movs	r2, r0
10052884:	1dfb      	adds	r3, r7, #7
10052886:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10052888:	1dfb      	adds	r3, r7, #7
1005288a:	781b      	ldrb	r3, [r3, #0]
1005288c:	0018      	movs	r0, r3
1005288e:	f7fe fefb 	bl	10051688 <LL_RADIO_GetTransmissionPhy>
10052892:	0003      	movs	r3, r0
10052894:	b2db      	uxtb	r3, r3
}
10052896:	0018      	movs	r0, r3
10052898:	46bd      	mov	sp, r7
1005289a:	b002      	add	sp, #8
1005289c:	bd80      	pop	{r7, pc}

1005289e <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
1005289e:	b580      	push	{r7, lr}
100528a0:	b084      	sub	sp, #16
100528a2:	af00      	add	r7, sp, #0
100528a4:	0002      	movs	r2, r0
100528a6:	1dfb      	adds	r3, r7, #7
100528a8:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
100528aa:	1dfb      	adds	r3, r7, #7
100528ac:	781b      	ldrb	r3, [r3, #0]
100528ae:	0018      	movs	r0, r3
100528b0:	f7ff f950 	bl	10051b54 <LL_RADIO_GetPAPower>
100528b4:	0002      	movs	r2, r0
100528b6:	210f      	movs	r1, #15
100528b8:	187b      	adds	r3, r7, r1
100528ba:	701a      	strb	r2, [r3, #0]
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
    {
        pa_level = HP_PA_LEVEL;
    }
#endif
    return pa_level;
100528bc:	187b      	adds	r3, r7, r1
100528be:	781b      	ldrb	r3, [r3, #0]
}
100528c0:	0018      	movs	r0, r3
100528c2:	46bd      	mov	sp, r7
100528c4:	b004      	add	sp, #16
100528c6:	bd80      	pop	{r7, pc}

100528c8 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
100528c8:	b580      	push	{r7, lr}
100528ca:	b082      	sub	sp, #8
100528cc:	af00      	add	r7, sp, #0
100528ce:	0002      	movs	r2, r0
100528d0:	1dfb      	adds	r3, r7, #7
100528d2:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
100528d4:	1dfb      	adds	r3, r7, #7
100528d6:	781b      	ldrb	r3, [r3, #0]
100528d8:	225c      	movs	r2, #92	@ 0x5c
100528da:	4353      	muls	r3, r2
100528dc:	4a08      	ldr	r2, [pc, #32]	@ (10052900 <BLEPLAT_CNTR_SmInitTo0+0x38>)
100528de:	4694      	mov	ip, r2
100528e0:	4463      	add	r3, ip
100528e2:	225c      	movs	r2, #92	@ 0x5c
100528e4:	2100      	movs	r1, #0
100528e6:	0018      	movs	r0, r3
100528e8:	f013 fdda 	bl	100664a0 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
100528ec:	1dfb      	adds	r3, r7, #7
100528ee:	781b      	ldrb	r3, [r3, #0]
100528f0:	2101      	movs	r1, #1
100528f2:	0018      	movs	r0, r3
100528f4:	f7ff fe9c 	bl	10052630 <BLEPLAT_CNTR_SmEnRadioConfig>
}
100528f8:	46c0      	nop			@ (mov r8, r8)
100528fa:	46bd      	mov	sp, r7
100528fc:	b002      	add	sp, #8
100528fe:	bd80      	pop	{r7, pc}
10052900:	200000dc 	.word	0x200000dc

10052904 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
10052904:	b580      	push	{r7, lr}
10052906:	b082      	sub	sp, #8
10052908:	af00      	add	r7, sp, #0
1005290a:	0002      	movs	r2, r0
1005290c:	6039      	str	r1, [r7, #0]
1005290e:	1dfb      	adds	r3, r7, #7
10052910:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
10052912:	683a      	ldr	r2, [r7, #0]
10052914:	1dfb      	adds	r3, r7, #7
10052916:	781b      	ldrb	r3, [r3, #0]
10052918:	0011      	movs	r1, r2
1005291a:	0018      	movs	r0, r3
1005291c:	f7ff f87e 	bl	10051a1c <LL_RADIO_SetAccessAddress>
}
10052920:	46c0      	nop			@ (mov r8, r8)
10052922:	46bd      	mov	sp, r7
10052924:	b002      	add	sp, #8
10052926:	bd80      	pop	{r7, pc}

10052928 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10052928:	b580      	push	{r7, lr}
1005292a:	b084      	sub	sp, #16
1005292c:	af00      	add	r7, sp, #0
1005292e:	0002      	movs	r2, r0
10052930:	6039      	str	r1, [r7, #0]
10052932:	1dfb      	adds	r3, r7, #7
10052934:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
10052936:	683b      	ldr	r3, [r7, #0]
10052938:	781b      	ldrb	r3, [r3, #0]
1005293a:	001a      	movs	r2, r3
1005293c:	683b      	ldr	r3, [r7, #0]
1005293e:	3301      	adds	r3, #1
10052940:	781b      	ldrb	r3, [r3, #0]
10052942:	021b      	lsls	r3, r3, #8
10052944:	4313      	orrs	r3, r2
10052946:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
10052948:	68fa      	ldr	r2, [r7, #12]
1005294a:	1dfb      	adds	r3, r7, #7
1005294c:	781b      	ldrb	r3, [r3, #0]
1005294e:	0011      	movs	r1, r2
10052950:	0018      	movs	r0, r3
10052952:	f7ff f955 	bl	10051c00 <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10052956:	683b      	ldr	r3, [r7, #0]
10052958:	3302      	adds	r3, #2
1005295a:	781b      	ldrb	r3, [r3, #0]
1005295c:	001a      	movs	r2, r3
1005295e:	683b      	ldr	r3, [r7, #0]
10052960:	3303      	adds	r3, #3
10052962:	781b      	ldrb	r3, [r3, #0]
10052964:	021b      	lsls	r3, r3, #8
10052966:	431a      	orrs	r2, r3
10052968:	683b      	ldr	r3, [r7, #0]
1005296a:	3304      	adds	r3, #4
1005296c:	781b      	ldrb	r3, [r3, #0]
1005296e:	041b      	lsls	r3, r3, #16
10052970:	4313      	orrs	r3, r2
10052972:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10052974:	68fa      	ldr	r2, [r7, #12]
10052976:	1dfb      	adds	r3, r7, #7
10052978:	781b      	ldrb	r3, [r3, #0]
1005297a:	0011      	movs	r1, r2
1005297c:	0018      	movs	r0, r3
1005297e:	f7ff f979 	bl	10051c74 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10052982:	46c0      	nop			@ (mov r8, r8)
10052984:	46bd      	mov	sp, r7
10052986:	b004      	add	sp, #16
10052988:	bd80      	pop	{r7, pc}

1005298a <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
1005298a:	b580      	push	{r7, lr}
1005298c:	b082      	sub	sp, #8
1005298e:	af00      	add	r7, sp, #0
10052990:	0002      	movs	r2, r0
10052992:	6039      	str	r1, [r7, #0]
10052994:	1dfb      	adds	r3, r7, #7
10052996:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10052998:	683a      	ldr	r2, [r7, #0]
1005299a:	1dfb      	adds	r3, r7, #7
1005299c:	781b      	ldrb	r3, [r3, #0]
1005299e:	0011      	movs	r1, r2
100529a0:	0018      	movs	r0, r3
100529a2:	f7ff f86d 	bl	10051a80 <LL_RADIO_SetCRCInitializationValue>
}
100529a6:	46c0      	nop			@ (mov r8, r8)
100529a8:	46bd      	mov	sp, r7
100529aa:	b002      	add	sp, #8
100529ac:	bd80      	pop	{r7, pc}

100529ae <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
100529ae:	b580      	push	{r7, lr}
100529b0:	b082      	sub	sp, #8
100529b2:	af00      	add	r7, sp, #0
100529b4:	0002      	movs	r2, r0
100529b6:	1dfb      	adds	r3, r7, #7
100529b8:	701a      	strb	r2, [r3, #0]
100529ba:	1dbb      	adds	r3, r7, #6
100529bc:	1c0a      	adds	r2, r1, #0
100529be:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
100529c0:	1dbb      	adds	r3, r7, #6
100529c2:	781a      	ldrb	r2, [r3, #0]
100529c4:	1dfb      	adds	r3, r7, #7
100529c6:	781b      	ldrb	r3, [r3, #0]
100529c8:	0011      	movs	r1, r2
100529ca:	0018      	movs	r0, r3
100529cc:	f7ff f87c 	bl	10051ac8 <LL_RADIO_SetMaximumReceiveLength>
}
100529d0:	46c0      	nop			@ (mov r8, r8)
100529d2:	46bd      	mov	sp, r7
100529d4:	b002      	add	sp, #8
100529d6:	bd80      	pop	{r7, pc}

100529d8 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
100529d8:	b580      	push	{r7, lr}
100529da:	b082      	sub	sp, #8
100529dc:	af00      	add	r7, sp, #0
100529de:	0002      	movs	r2, r0
100529e0:	1dfb      	adds	r3, r7, #7
100529e2:	701a      	strb	r2, [r3, #0]
100529e4:	1dbb      	adds	r3, r7, #6
100529e6:	1c0a      	adds	r2, r1, #0
100529e8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
100529ea:	1dbb      	adds	r3, r7, #6
100529ec:	781a      	ldrb	r2, [r3, #0]
100529ee:	1dfb      	adds	r3, r7, #7
100529f0:	781b      	ldrb	r3, [r3, #0]
100529f2:	0011      	movs	r1, r2
100529f4:	0018      	movs	r0, r3
100529f6:	f7ff f8c3 	bl	10051b80 <LL_RADIO_SetHopIncrement>
}
100529fa:	46c0      	nop			@ (mov r8, r8)
100529fc:	46bd      	mov	sp, r7
100529fe:	b002      	add	sp, #8
10052a00:	bd80      	pop	{r7, pc}

10052a02 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10052a02:	b580      	push	{r7, lr}
10052a04:	b082      	sub	sp, #8
10052a06:	af00      	add	r7, sp, #0
10052a08:	0002      	movs	r2, r0
10052a0a:	1dfb      	adds	r3, r7, #7
10052a0c:	701a      	strb	r2, [r3, #0]
10052a0e:	1dbb      	adds	r3, r7, #6
10052a10:	1c0a      	adds	r2, r1, #0
10052a12:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10052a14:	1dbb      	adds	r3, r7, #6
10052a16:	781a      	ldrb	r2, [r3, #0]
10052a18:	1dfb      	adds	r3, r7, #7
10052a1a:	781b      	ldrb	r3, [r3, #0]
10052a1c:	0011      	movs	r1, r2
10052a1e:	0018      	movs	r0, r3
10052a20:	f7fe fd6a 	bl	100514f8 <LL_RADIO_SetRemapChannel>
}
10052a24:	46c0      	nop			@ (mov r8, r8)
10052a26:	46bd      	mov	sp, r7
10052a28:	b002      	add	sp, #8
10052a2a:	bd80      	pop	{r7, pc}

10052a2c <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10052a2c:	b580      	push	{r7, lr}
10052a2e:	b084      	sub	sp, #16
10052a30:	af00      	add	r7, sp, #0
10052a32:	0002      	movs	r2, r0
10052a34:	6039      	str	r1, [r7, #0]
10052a36:	1dfb      	adds	r3, r7, #7
10052a38:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
10052a3a:	683b      	ldr	r3, [r7, #0]
10052a3c:	681a      	ldr	r2, [r3, #0]
10052a3e:	1dfb      	adds	r3, r7, #7
10052a40:	781b      	ldrb	r3, [r3, #0]
10052a42:	0011      	movs	r1, r2
10052a44:	0018      	movs	r0, r3
10052a46:	f7fe ff33 	bl	100518b0 <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
10052a4a:	683b      	ldr	r3, [r7, #0]
10052a4c:	3304      	adds	r3, #4
10052a4e:	681b      	ldr	r3, [r3, #0]
10052a50:	021a      	lsls	r2, r3, #8
10052a52:	683b      	ldr	r3, [r7, #0]
10052a54:	681b      	ldr	r3, [r3, #0]
10052a56:	0e1b      	lsrs	r3, r3, #24
10052a58:	4313      	orrs	r3, r2
10052a5a:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10052a5c:	68fa      	ldr	r2, [r7, #12]
10052a5e:	1dfb      	adds	r3, r7, #7
10052a60:	781b      	ldrb	r3, [r3, #0]
10052a62:	0011      	movs	r1, r2
10052a64:	0018      	movs	r0, r3
10052a66:	f7fe ff5f 	bl	10051928 <LL_RADIO_SetPacketCounterRx_39_24>
}
10052a6a:	46c0      	nop			@ (mov r8, r8)
10052a6c:	46bd      	mov	sp, r7
10052a6e:	b004      	add	sp, #16
10052a70:	bd80      	pop	{r7, pc}

10052a72 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
10052a72:	b580      	push	{r7, lr}
10052a74:	b084      	sub	sp, #16
10052a76:	af00      	add	r7, sp, #0
10052a78:	0002      	movs	r2, r0
10052a7a:	1dfb      	adds	r3, r7, #7
10052a7c:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
10052a7e:	1dfb      	adds	r3, r7, #7
10052a80:	781b      	ldrb	r3, [r3, #0]
10052a82:	0018      	movs	r0, r3
10052a84:	f7fe ff74 	bl	10051970 <LL_RADIO_GetPacketCounterRx_39_24>
10052a88:	0002      	movs	r2, r0
10052a8a:	2380      	movs	r3, #128	@ 0x80
10052a8c:	021b      	lsls	r3, r3, #8
10052a8e:	4313      	orrs	r3, r2
10052a90:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10052a92:	68fa      	ldr	r2, [r7, #12]
10052a94:	1dfb      	adds	r3, r7, #7
10052a96:	781b      	ldrb	r3, [r3, #0]
10052a98:	0011      	movs	r1, r2
10052a9a:	0018      	movs	r0, r3
10052a9c:	f7fe ff44 	bl	10051928 <LL_RADIO_SetPacketCounterRx_39_24>
}
10052aa0:	46c0      	nop			@ (mov r8, r8)
10052aa2:	46bd      	mov	sp, r7
10052aa4:	b004      	add	sp, #16
10052aa6:	bd80      	pop	{r7, pc}

10052aa8 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10052aa8:	b580      	push	{r7, lr}
10052aaa:	b082      	sub	sp, #8
10052aac:	af00      	add	r7, sp, #0
10052aae:	0002      	movs	r2, r0
10052ab0:	1dfb      	adds	r3, r7, #7
10052ab2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10052ab4:	1dfb      	adds	r3, r7, #7
10052ab6:	781b      	ldrb	r3, [r3, #0]
10052ab8:	0018      	movs	r0, r3
10052aba:	f7fe fce3 	bl	10051484 <LL_RADIO_TxMode_Disable>
}
10052abe:	46c0      	nop			@ (mov r8, r8)
10052ac0:	46bd      	mov	sp, r7
10052ac2:	b002      	add	sp, #8
10052ac4:	bd80      	pop	{r7, pc}

10052ac6 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052ac6:	b580      	push	{r7, lr}
10052ac8:	b082      	sub	sp, #8
10052aca:	af00      	add	r7, sp, #0
10052acc:	0002      	movs	r2, r0
10052ace:	6039      	str	r1, [r7, #0]
10052ad0:	1dfb      	adds	r3, r7, #7
10052ad2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10052ad4:	683a      	ldr	r2, [r7, #0]
10052ad6:	1dfb      	adds	r3, r7, #7
10052ad8:	781b      	ldrb	r3, [r3, #0]
10052ada:	0011      	movs	r1, r2
10052adc:	0018      	movs	r0, r3
10052ade:	f7fe fe71 	bl	100517c4 <LL_RADIO_SetRcvPoint>
}
10052ae2:	46c0      	nop			@ (mov r8, r8)
10052ae4:	46bd      	mov	sp, r7
10052ae6:	b002      	add	sp, #8
10052ae8:	bd80      	pop	{r7, pc}

10052aea <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
10052aea:	b580      	push	{r7, lr}
10052aec:	b082      	sub	sp, #8
10052aee:	af00      	add	r7, sp, #0
10052af0:	0002      	movs	r2, r0
10052af2:	1dfb      	adds	r3, r7, #7
10052af4:	701a      	strb	r2, [r3, #0]
10052af6:	1dbb      	adds	r3, r7, #6
10052af8:	1c0a      	adds	r2, r1, #0
10052afa:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
10052afc:	1dbb      	adds	r3, r7, #6
10052afe:	781a      	ldrb	r2, [r3, #0]
10052b00:	1dfb      	adds	r3, r7, #7
10052b02:	781b      	ldrb	r3, [r3, #0]
10052b04:	0011      	movs	r1, r2
10052b06:	0018      	movs	r0, r3
10052b08:	f7fe fdfe 	bl	10051708 <LL_RADIO_SetReceptionPhy>
}
10052b0c:	46c0      	nop			@ (mov r8, r8)
10052b0e:	46bd      	mov	sp, r7
10052b10:	b002      	add	sp, #8
10052b12:	bd80      	pop	{r7, pc}

10052b14 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
10052b14:	b580      	push	{r7, lr}
10052b16:	b082      	sub	sp, #8
10052b18:	af00      	add	r7, sp, #0
10052b1a:	0002      	movs	r2, r0
10052b1c:	6039      	str	r1, [r7, #0]
10052b1e:	1dfb      	adds	r3, r7, #7
10052b20:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
10052b22:	683b      	ldr	r3, [r7, #0]
10052b24:	681a      	ldr	r2, [r3, #0]
10052b26:	1dfb      	adds	r3, r7, #7
10052b28:	781b      	ldrb	r3, [r3, #0]
10052b2a:	0011      	movs	r1, r2
10052b2c:	0018      	movs	r0, r3
10052b2e:	f7fe fe67 	bl	10051800 <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
10052b32:	683b      	ldr	r3, [r7, #0]
10052b34:	3304      	adds	r3, #4
10052b36:	681a      	ldr	r2, [r3, #0]
10052b38:	1dfb      	adds	r3, r7, #7
10052b3a:	781b      	ldrb	r3, [r3, #0]
10052b3c:	0011      	movs	r1, r2
10052b3e:	0018      	movs	r0, r3
10052b40:	f7fe fe7c 	bl	1005183c <LL_RADIO_SetPacketCounterTx_39_32>
}
10052b44:	46c0      	nop			@ (mov r8, r8)
10052b46:	46bd      	mov	sp, r7
10052b48:	b002      	add	sp, #8
10052b4a:	bd80      	pop	{r7, pc}

10052b4c <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
10052b4c:	b580      	push	{r7, lr}
10052b4e:	b084      	sub	sp, #16
10052b50:	af00      	add	r7, sp, #0
10052b52:	0002      	movs	r2, r0
10052b54:	1dfb      	adds	r3, r7, #7
10052b56:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10052b58:	1dfb      	adds	r3, r7, #7
10052b5a:	781b      	ldrb	r3, [r3, #0]
10052b5c:	0018      	movs	r0, r3
10052b5e:	f7fe fe91 	bl	10051884 <LL_RADIO_GetPacketCounterTx_39_32>
10052b62:	0003      	movs	r3, r0
10052b64:	2280      	movs	r2, #128	@ 0x80
10052b66:	4313      	orrs	r3, r2
10052b68:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
10052b6a:	68fa      	ldr	r2, [r7, #12]
10052b6c:	1dfb      	adds	r3, r7, #7
10052b6e:	781b      	ldrb	r3, [r3, #0]
10052b70:	0011      	movs	r1, r2
10052b72:	0018      	movs	r0, r3
10052b74:	f7fe fe62 	bl	1005183c <LL_RADIO_SetPacketCounterTx_39_32>
}
10052b78:	46c0      	nop			@ (mov r8, r8)
10052b7a:	46bd      	mov	sp, r7
10052b7c:	b004      	add	sp, #16
10052b7e:	bd80      	pop	{r7, pc}

10052b80 <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10052b80:	b580      	push	{r7, lr}
10052b82:	b082      	sub	sp, #8
10052b84:	af00      	add	r7, sp, #0
10052b86:	0002      	movs	r2, r0
10052b88:	1dfb      	adds	r3, r7, #7
10052b8a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10052b8c:	1dfb      	adds	r3, r7, #7
10052b8e:	781b      	ldrb	r3, [r3, #0]
10052b90:	0018      	movs	r0, r3
10052b92:	f7fe fc59 	bl	10051448 <LL_RADIO_TxMode_Enable>
}
10052b96:	46c0      	nop			@ (mov r8, r8)
10052b98:	46bd      	mov	sp, r7
10052b9a:	b002      	add	sp, #8
10052b9c:	bd80      	pop	{r7, pc}

10052b9e <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10052b9e:	b580      	push	{r7, lr}
10052ba0:	b082      	sub	sp, #8
10052ba2:	af00      	add	r7, sp, #0
10052ba4:	0002      	movs	r2, r0
10052ba6:	6039      	str	r1, [r7, #0]
10052ba8:	1dfb      	adds	r3, r7, #7
10052baa:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10052bac:	683a      	ldr	r2, [r7, #0]
10052bae:	1dfb      	adds	r3, r7, #7
10052bb0:	781b      	ldrb	r3, [r3, #0]
10052bb2:	0011      	movs	r1, r2
10052bb4:	0018      	movs	r0, r3
10052bb6:	f7fe fde7 	bl	10051788 <LL_RADIO_SetTxPoint>
}
10052bba:	46c0      	nop			@ (mov r8, r8)
10052bbc:	46bd      	mov	sp, r7
10052bbe:	b002      	add	sp, #8
10052bc0:	bd80      	pop	{r7, pc}

10052bc2 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10052bc2:	b580      	push	{r7, lr}
10052bc4:	b082      	sub	sp, #8
10052bc6:	af00      	add	r7, sp, #0
10052bc8:	0002      	movs	r2, r0
10052bca:	1dfb      	adds	r3, r7, #7
10052bcc:	701a      	strb	r2, [r3, #0]
10052bce:	1dbb      	adds	r3, r7, #6
10052bd0:	1c0a      	adds	r2, r1, #0
10052bd2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10052bd4:	1dbb      	adds	r3, r7, #6
10052bd6:	781a      	ldrb	r2, [r3, #0]
10052bd8:	1dfb      	adds	r3, r7, #7
10052bda:	781b      	ldrb	r3, [r3, #0]
10052bdc:	0011      	movs	r1, r2
10052bde:	0018      	movs	r0, r3
10052be0:	f7fe fd2a 	bl	10051638 <LL_RADIO_SetTransmissionPhy>
}
10052be4:	46c0      	nop			@ (mov r8, r8)
10052be6:	46bd      	mov	sp, r7
10052be8:	b002      	add	sp, #8
10052bea:	bd80      	pop	{r7, pc}

10052bec <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10052bec:	b580      	push	{r7, lr}
10052bee:	b082      	sub	sp, #8
10052bf0:	af00      	add	r7, sp, #0
10052bf2:	0002      	movs	r2, r0
10052bf4:	1dfb      	adds	r3, r7, #7
10052bf6:	701a      	strb	r2, [r3, #0]
10052bf8:	1dbb      	adds	r3, r7, #6
10052bfa:	1c0a      	adds	r2, r1, #0
10052bfc:	701a      	strb	r2, [r3, #0]
  {
    LL_RADIO_TxHp_Disable(smNo);
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10052bfe:	1dbb      	adds	r3, r7, #6
10052c00:	781a      	ldrb	r2, [r3, #0]
10052c02:	1dfb      	adds	r3, r7, #7
10052c04:	781b      	ldrb	r3, [r3, #0]
10052c06:	0011      	movs	r1, r2
10052c08:	0018      	movs	r0, r3
10052c0a:	f7fe ff7f 	bl	10051b0c <LL_RADIO_SetPAPower>
}
10052c0e:	46c0      	nop			@ (mov r8, r8)
10052c10:	46bd      	mov	sp, r7
10052c12:	b002      	add	sp, #8
10052c14:	bd80      	pop	{r7, pc}

10052c16 <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
10052c16:	b580      	push	{r7, lr}
10052c18:	b082      	sub	sp, #8
10052c1a:	af00      	add	r7, sp, #0
10052c1c:	0002      	movs	r2, r0
10052c1e:	1dfb      	adds	r3, r7, #7
10052c20:	701a      	strb	r2, [r3, #0]
10052c22:	1dbb      	adds	r3, r7, #6
10052c24:	1c0a      	adds	r2, r1, #0
10052c26:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
10052c28:	1dbb      	adds	r3, r7, #6
10052c2a:	781a      	ldrb	r2, [r3, #0]
10052c2c:	1dfb      	adds	r3, r7, #7
10052c2e:	781b      	ldrb	r3, [r3, #0]
10052c30:	0011      	movs	r1, r2
10052c32:	0018      	movs	r0, r3
10052c34:	f7fe fba8 	bl	10051388 <LL_RADIO_SetUnmappedChannel>
}
10052c38:	46c0      	nop			@ (mov r8, r8)
10052c3a:	46bd      	mov	sp, r7
10052c3c:	b002      	add	sp, #8
10052c3e:	bd80      	pop	{r7, pc}

10052c40 <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
10052c40:	b580      	push	{r7, lr}
10052c42:	b082      	sub	sp, #8
10052c44:	af00      	add	r7, sp, #0
10052c46:	0002      	movs	r2, r0
10052c48:	1dfb      	adds	r3, r7, #7
10052c4a:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
10052c4c:	1dfb      	adds	r3, r7, #7
10052c4e:	781b      	ldrb	r3, [r3, #0]
10052c50:	0018      	movs	r0, r3
10052c52:	f7fe fc91 	bl	10051578 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10052c56:	46c0      	nop			@ (mov r8, r8)
10052c58:	46bd      	mov	sp, r7
10052c5a:	b002      	add	sp, #8
10052c5c:	bd80      	pop	{r7, pc}

10052c5e <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
10052c5e:	b580      	push	{r7, lr}
10052c60:	b082      	sub	sp, #8
10052c62:	af00      	add	r7, sp, #0
10052c64:	0002      	movs	r2, r0
10052c66:	1dfb      	adds	r3, r7, #7
10052c68:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
10052c6a:	1dfb      	adds	r3, r7, #7
10052c6c:	781b      	ldrb	r3, [r3, #0]
10052c6e:	2b04      	cmp	r3, #4
10052c70:	d101      	bne.n	10052c76 <BLEPLAT_CNTR_DemodDelaySt+0x18>
10052c72:	239d      	movs	r3, #157	@ 0x9d
10052c74:	e000      	b.n	10052c78 <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10052c76:	2312      	movs	r3, #18
}
10052c78:	0018      	movs	r0, r3
10052c7a:	46bd      	mov	sp, r7
10052c7c:	b002      	add	sp, #8
10052c7e:	bd80      	pop	{r7, pc}

10052c80 <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10052c80:	b580      	push	{r7, lr}
10052c82:	b082      	sub	sp, #8
10052c84:	af00      	add	r7, sp, #0
10052c86:	0002      	movs	r2, r0
10052c88:	1dfb      	adds	r3, r7, #7
10052c8a:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10052c8c:	46c0      	nop			@ (mov r8, r8)
10052c8e:	46bd      	mov	sp, r7
10052c90:	b002      	add	sp, #8
10052c92:	bd80      	pop	{r7, pc}

10052c94 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10052c94:	b580      	push	{r7, lr}
10052c96:	b082      	sub	sp, #8
10052c98:	af00      	add	r7, sp, #0
10052c9a:	0002      	movs	r2, r0
10052c9c:	1dfb      	adds	r3, r7, #7
10052c9e:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10052ca0:	46c0      	nop			@ (mov r8, r8)
10052ca2:	46bd      	mov	sp, r7
10052ca4:	b002      	add	sp, #8
10052ca6:	bd80      	pop	{r7, pc}

10052ca8 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10052ca8:	b580      	push	{r7, lr}
10052caa:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10052cac:	46c0      	nop			@ (mov r8, r8)
10052cae:	46bd      	mov	sp, r7
10052cb0:	bd80      	pop	{r7, pc}
	...

10052cb4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10052cb4:	b580      	push	{r7, lr}
10052cb6:	b090      	sub	sp, #64	@ 0x40
10052cb8:	af00      	add	r7, sp, #0
10052cba:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10052cbc:	4b75      	ldr	r3, [pc, #468]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052cbe:	681b      	ldr	r3, [r3, #0]
10052cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
10052cc2:	4b74      	ldr	r3, [pc, #464]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052cc4:	681b      	ldr	r3, [r3, #0]
10052cc6:	687a      	ldr	r2, [r7, #4]
10052cc8:	401a      	ands	r2, r3
10052cca:	4b72      	ldr	r3, [pc, #456]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052ccc:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
10052cce:	4b72      	ldr	r3, [pc, #456]	@ (10052e98 <UTIL_SEQ_Run+0x1e4>)
10052cd0:	681b      	ldr	r3, [r3, #0]
10052cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10052cd4:	4b71      	ldr	r3, [pc, #452]	@ (10052e9c <UTIL_SEQ_Run+0x1e8>)
10052cd6:	681b      	ldr	r3, [r3, #0]
10052cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
10052cda:	4b71      	ldr	r3, [pc, #452]	@ (10052ea0 <UTIL_SEQ_Run+0x1ec>)
10052cdc:	681b      	ldr	r3, [r3, #0]
10052cde:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
10052ce0:	4b70      	ldr	r3, [pc, #448]	@ (10052ea4 <UTIL_SEQ_Run+0x1f0>)
10052ce2:	681b      	ldr	r3, [r3, #0]
10052ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10052ce6:	e090      	b.n	10052e0a <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
10052ce8:	2300      	movs	r3, #0
10052cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10052cec:	e002      	b.n	10052cf4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
10052cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052cf0:	3301      	adds	r3, #1
10052cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10052cf4:	4b6c      	ldr	r3, [pc, #432]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052cf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10052cf8:	00d2      	lsls	r2, r2, #3
10052cfa:	58d3      	ldr	r3, [r2, r3]
10052cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052cfe:	401a      	ands	r2, r3
10052d00:	4b64      	ldr	r3, [pc, #400]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052d02:	681b      	ldr	r3, [r3, #0]
10052d04:	4013      	ands	r3, r2
10052d06:	d0f2      	beq.n	10052cee <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
10052d08:	4b67      	ldr	r3, [pc, #412]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052d0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10052d0c:	00d2      	lsls	r2, r2, #3
10052d0e:	58d3      	ldr	r3, [r2, r3]
10052d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052d12:	401a      	ands	r2, r3
10052d14:	4b5f      	ldr	r3, [pc, #380]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052d16:	681b      	ldr	r3, [r3, #0]
10052d18:	4013      	ands	r3, r2
10052d1a:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
10052d1c:	4a62      	ldr	r2, [pc, #392]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052d20:	00db      	lsls	r3, r3, #3
10052d22:	18d3      	adds	r3, r2, r3
10052d24:	3304      	adds	r3, #4
10052d26:	681b      	ldr	r3, [r3, #0]
10052d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10052d2a:	4013      	ands	r3, r2
10052d2c:	d107      	bne.n	10052d3e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
10052d2e:	4a5e      	ldr	r2, [pc, #376]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052d32:	00db      	lsls	r3, r3, #3
10052d34:	18d3      	adds	r3, r2, r3
10052d36:	3304      	adds	r3, #4
10052d38:	2201      	movs	r2, #1
10052d3a:	4252      	negs	r2, r2
10052d3c:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10052d3e:	4a5a      	ldr	r2, [pc, #360]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052d42:	00db      	lsls	r3, r3, #3
10052d44:	18d3      	adds	r3, r2, r3
10052d46:	3304      	adds	r3, #4
10052d48:	681b      	ldr	r3, [r3, #0]
10052d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10052d4c:	4013      	ands	r3, r2
10052d4e:	0018      	movs	r0, r3
10052d50:	f000 f97c 	bl	1005304c <SEQ_BitPosition>
10052d54:	0003      	movs	r3, r0
10052d56:	001a      	movs	r2, r3
10052d58:	4b54      	ldr	r3, [pc, #336]	@ (10052eac <UTIL_SEQ_Run+0x1f8>)
10052d5a:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10052d5c:	4a52      	ldr	r2, [pc, #328]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052d60:	00db      	lsls	r3, r3, #3
10052d62:	18d3      	adds	r3, r2, r3
10052d64:	3304      	adds	r3, #4
10052d66:	681a      	ldr	r2, [r3, #0]
10052d68:	4b50      	ldr	r3, [pc, #320]	@ (10052eac <UTIL_SEQ_Run+0x1f8>)
10052d6a:	681b      	ldr	r3, [r3, #0]
10052d6c:	2101      	movs	r1, #1
10052d6e:	4099      	lsls	r1, r3
10052d70:	000b      	movs	r3, r1
10052d72:	43db      	mvns	r3, r3
10052d74:	401a      	ands	r2, r3
10052d76:	494c      	ldr	r1, [pc, #304]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052d7a:	00db      	lsls	r3, r3, #3
10052d7c:	18cb      	adds	r3, r1, r3
10052d7e:	3304      	adds	r3, #4
10052d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052d82:	f3ef 8310 	mrs	r3, PRIMASK
10052d86:	61bb      	str	r3, [r7, #24]
  return(result);
10052d88:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052d8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10052d8c:	b672      	cpsid	i
}
10052d8e:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
10052d90:	4b46      	ldr	r3, [pc, #280]	@ (10052eac <UTIL_SEQ_Run+0x1f8>)
10052d92:	681b      	ldr	r3, [r3, #0]
10052d94:	2201      	movs	r2, #1
10052d96:	409a      	lsls	r2, r3
10052d98:	0013      	movs	r3, r2
10052d9a:	43da      	mvns	r2, r3
10052d9c:	4b3e      	ldr	r3, [pc, #248]	@ (10052e98 <UTIL_SEQ_Run+0x1e4>)
10052d9e:	681b      	ldr	r3, [r3, #0]
10052da0:	401a      	ands	r2, r3
10052da2:	4b3d      	ldr	r3, [pc, #244]	@ (10052e98 <UTIL_SEQ_Run+0x1e4>)
10052da4:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10052da6:	2302      	movs	r3, #2
10052da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
10052daa:	e013      	b.n	10052dd4 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
10052dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052dae:	1e5a      	subs	r2, r3, #1
10052db0:	4b3d      	ldr	r3, [pc, #244]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052db2:	00d2      	lsls	r2, r2, #3
10052db4:	58d1      	ldr	r1, [r2, r3]
10052db6:	4b3d      	ldr	r3, [pc, #244]	@ (10052eac <UTIL_SEQ_Run+0x1f8>)
10052db8:	681b      	ldr	r3, [r3, #0]
10052dba:	2201      	movs	r2, #1
10052dbc:	409a      	lsls	r2, r3
10052dbe:	0013      	movs	r3, r2
10052dc0:	43db      	mvns	r3, r3
10052dc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10052dc4:	3a01      	subs	r2, #1
10052dc6:	4019      	ands	r1, r3
10052dc8:	4b37      	ldr	r3, [pc, #220]	@ (10052ea8 <UTIL_SEQ_Run+0x1f4>)
10052dca:	00d2      	lsls	r2, r2, #3
10052dcc:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10052dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052dd0:	3b01      	subs	r3, #1
10052dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
10052dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052dd6:	2b00      	cmp	r3, #0
10052dd8:	d1e8      	bne.n	10052dac <UTIL_SEQ_Run+0xf8>
10052dda:	6a3b      	ldr	r3, [r7, #32]
10052ddc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052dde:	697b      	ldr	r3, [r7, #20]
10052de0:	f383 8810 	msr	PRIMASK, r3
}
10052de4:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
10052de6:	4b31      	ldr	r3, [pc, #196]	@ (10052eac <UTIL_SEQ_Run+0x1f8>)
10052de8:	681a      	ldr	r2, [r3, #0]
10052dea:	4b31      	ldr	r3, [pc, #196]	@ (10052eb0 <UTIL_SEQ_Run+0x1fc>)
10052dec:	0092      	lsls	r2, r2, #2
10052dee:	58d3      	ldr	r3, [r2, r3]
10052df0:	4798      	blx	r3

    local_taskset = TaskSet;
10052df2:	4b29      	ldr	r3, [pc, #164]	@ (10052e98 <UTIL_SEQ_Run+0x1e4>)
10052df4:	681b      	ldr	r3, [r3, #0]
10052df6:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10052df8:	4b28      	ldr	r3, [pc, #160]	@ (10052e9c <UTIL_SEQ_Run+0x1e8>)
10052dfa:	681b      	ldr	r3, [r3, #0]
10052dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10052dfe:	4b28      	ldr	r3, [pc, #160]	@ (10052ea0 <UTIL_SEQ_Run+0x1ec>)
10052e00:	681b      	ldr	r3, [r3, #0]
10052e02:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
10052e04:	4b27      	ldr	r3, [pc, #156]	@ (10052ea4 <UTIL_SEQ_Run+0x1f0>)
10052e06:	681b      	ldr	r3, [r3, #0]
10052e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10052e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052e0e:	401a      	ands	r2, r3
10052e10:	4b20      	ldr	r3, [pc, #128]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052e12:	681b      	ldr	r3, [r3, #0]
10052e14:	4013      	ands	r3, r2
10052e16:	d004      	beq.n	10052e22 <UTIL_SEQ_Run+0x16e>
10052e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10052e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10052e1c:	4013      	ands	r3, r2
10052e1e:	d100      	bne.n	10052e22 <UTIL_SEQ_Run+0x16e>
10052e20:	e762      	b.n	10052ce8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
10052e22:	4b22      	ldr	r3, [pc, #136]	@ (10052eac <UTIL_SEQ_Run+0x1f8>)
10052e24:	2201      	movs	r2, #1
10052e26:	4252      	negs	r2, r2
10052e28:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
10052e2a:	4b1e      	ldr	r3, [pc, #120]	@ (10052ea4 <UTIL_SEQ_Run+0x1f0>)
10052e2c:	681b      	ldr	r3, [r3, #0]
10052e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10052e30:	4013      	ands	r3, r2
10052e32:	d127      	bne.n	10052e84 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
10052e34:	f7f2 faf6 	bl	10045424 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052e38:	f3ef 8310 	mrs	r3, PRIMASK
10052e3c:	613b      	str	r3, [r7, #16]
  return(result);
10052e3e:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
10052e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10052e42:	b672      	cpsid	i
}
10052e44:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
10052e46:	4b14      	ldr	r3, [pc, #80]	@ (10052e98 <UTIL_SEQ_Run+0x1e4>)
10052e48:	681b      	ldr	r3, [r3, #0]
10052e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10052e4c:	4b13      	ldr	r3, [pc, #76]	@ (10052e9c <UTIL_SEQ_Run+0x1e8>)
10052e4e:	681b      	ldr	r3, [r3, #0]
10052e50:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10052e52:	4b13      	ldr	r3, [pc, #76]	@ (10052ea0 <UTIL_SEQ_Run+0x1ec>)
10052e54:	681b      	ldr	r3, [r3, #0]
10052e56:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
10052e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052e5c:	401a      	ands	r2, r3
10052e5e:	4b0d      	ldr	r3, [pc, #52]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052e60:	681b      	ldr	r3, [r3, #0]
10052e62:	4013      	ands	r3, r2
10052e64:	d106      	bne.n	10052e74 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
10052e66:	4b0f      	ldr	r3, [pc, #60]	@ (10052ea4 <UTIL_SEQ_Run+0x1f0>)
10052e68:	681b      	ldr	r3, [r3, #0]
10052e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10052e6c:	4013      	ands	r3, r2
10052e6e:	d101      	bne.n	10052e74 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
10052e70:	f7f2 fadd 	bl	1004542e <UTIL_SEQ_Idle>
10052e74:	69fb      	ldr	r3, [r7, #28]
10052e76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052e78:	68fb      	ldr	r3, [r7, #12]
10052e7a:	f383 8810 	msr	PRIMASK, r3
}
10052e7e:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
10052e80:	f000 f8de 	bl	10053040 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10052e84:	4b03      	ldr	r3, [pc, #12]	@ (10052e94 <UTIL_SEQ_Run+0x1e0>)
10052e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10052e88:	601a      	str	r2, [r3, #0]

  return;
10052e8a:	46c0      	nop			@ (mov r8, r8)
}
10052e8c:	46bd      	mov	sp, r7
10052e8e:	b010      	add	sp, #64	@ 0x40
10052e90:	bd80      	pop	{r7, pc}
10052e92:	46c0      	nop			@ (mov r8, r8)
10052e94:	200028a0 	.word	0x200028a0
10052e98:	20002370 	.word	0x20002370
10052e9c:	20002374 	.word	0x20002374
10052ea0:	2000289c 	.word	0x2000289c
10052ea4:	20002378 	.word	0x20002378
10052ea8:	20002400 	.word	0x20002400
10052eac:	2000237c 	.word	0x2000237c
10052eb0:	20002380 	.word	0x20002380

10052eb4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10052eb4:	b580      	push	{r7, lr}
10052eb6:	b088      	sub	sp, #32
10052eb8:	af00      	add	r7, sp, #0
10052eba:	60f8      	str	r0, [r7, #12]
10052ebc:	60b9      	str	r1, [r7, #8]
10052ebe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052ec0:	f3ef 8310 	mrs	r3, PRIMASK
10052ec4:	617b      	str	r3, [r7, #20]
  return(result);
10052ec6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
10052ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10052eca:	b672      	cpsid	i
}
10052ecc:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
10052ece:	68fb      	ldr	r3, [r7, #12]
10052ed0:	0018      	movs	r0, r3
10052ed2:	f000 f8bb 	bl	1005304c <SEQ_BitPosition>
10052ed6:	0003      	movs	r3, r0
10052ed8:	001a      	movs	r2, r3
10052eda:	4b07      	ldr	r3, [pc, #28]	@ (10052ef8 <UTIL_SEQ_RegTask+0x44>)
10052edc:	0092      	lsls	r2, r2, #2
10052ede:	6879      	ldr	r1, [r7, #4]
10052ee0:	50d1      	str	r1, [r2, r3]
10052ee2:	69fb      	ldr	r3, [r7, #28]
10052ee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052ee6:	69bb      	ldr	r3, [r7, #24]
10052ee8:	f383 8810 	msr	PRIMASK, r3
}
10052eec:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
10052eee:	46c0      	nop			@ (mov r8, r8)
}
10052ef0:	46bd      	mov	sp, r7
10052ef2:	b008      	add	sp, #32
10052ef4:	bd80      	pop	{r7, pc}
10052ef6:	46c0      	nop			@ (mov r8, r8)
10052ef8:	20002380 	.word	0x20002380

10052efc <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
10052efc:	b580      	push	{r7, lr}
10052efe:	b086      	sub	sp, #24
10052f00:	af00      	add	r7, sp, #0
10052f02:	6078      	str	r0, [r7, #4]
10052f04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052f06:	f3ef 8310 	mrs	r3, PRIMASK
10052f0a:	60fb      	str	r3, [r7, #12]
  return(result);
10052f0c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052f0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10052f10:	b672      	cpsid	i
}
10052f12:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
10052f14:	4b0d      	ldr	r3, [pc, #52]	@ (10052f4c <UTIL_SEQ_SetTask+0x50>)
10052f16:	681a      	ldr	r2, [r3, #0]
10052f18:	687b      	ldr	r3, [r7, #4]
10052f1a:	431a      	orrs	r2, r3
10052f1c:	4b0b      	ldr	r3, [pc, #44]	@ (10052f4c <UTIL_SEQ_SetTask+0x50>)
10052f1e:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
10052f20:	4b0b      	ldr	r3, [pc, #44]	@ (10052f50 <UTIL_SEQ_SetTask+0x54>)
10052f22:	683a      	ldr	r2, [r7, #0]
10052f24:	00d2      	lsls	r2, r2, #3
10052f26:	58d2      	ldr	r2, [r2, r3]
10052f28:	687b      	ldr	r3, [r7, #4]
10052f2a:	431a      	orrs	r2, r3
10052f2c:	0011      	movs	r1, r2
10052f2e:	4b08      	ldr	r3, [pc, #32]	@ (10052f50 <UTIL_SEQ_SetTask+0x54>)
10052f30:	683a      	ldr	r2, [r7, #0]
10052f32:	00d2      	lsls	r2, r2, #3
10052f34:	50d1      	str	r1, [r2, r3]
10052f36:	697b      	ldr	r3, [r7, #20]
10052f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052f3a:	693b      	ldr	r3, [r7, #16]
10052f3c:	f383 8810 	msr	PRIMASK, r3
}
10052f40:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10052f42:	46c0      	nop			@ (mov r8, r8)
}
10052f44:	46bd      	mov	sp, r7
10052f46:	b006      	add	sp, #24
10052f48:	bd80      	pop	{r7, pc}
10052f4a:	46c0      	nop			@ (mov r8, r8)
10052f4c:	20002370 	.word	0x20002370
10052f50:	20002400 	.word	0x20002400

10052f54 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10052f54:	b580      	push	{r7, lr}
10052f56:	b086      	sub	sp, #24
10052f58:	af00      	add	r7, sp, #0
10052f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052f5c:	f3ef 8310 	mrs	r3, PRIMASK
10052f60:	60fb      	str	r3, [r7, #12]
  return(result);
10052f62:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052f64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10052f66:	b672      	cpsid	i
}
10052f68:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
10052f6a:	4b08      	ldr	r3, [pc, #32]	@ (10052f8c <UTIL_SEQ_SetEvt+0x38>)
10052f6c:	681a      	ldr	r2, [r3, #0]
10052f6e:	687b      	ldr	r3, [r7, #4]
10052f70:	431a      	orrs	r2, r3
10052f72:	4b06      	ldr	r3, [pc, #24]	@ (10052f8c <UTIL_SEQ_SetEvt+0x38>)
10052f74:	601a      	str	r2, [r3, #0]
10052f76:	697b      	ldr	r3, [r7, #20]
10052f78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052f7a:	693b      	ldr	r3, [r7, #16]
10052f7c:	f383 8810 	msr	PRIMASK, r3
}
10052f80:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10052f82:	46c0      	nop			@ (mov r8, r8)
}
10052f84:	46bd      	mov	sp, r7
10052f86:	b006      	add	sp, #24
10052f88:	bd80      	pop	{r7, pc}
10052f8a:	46c0      	nop			@ (mov r8, r8)
10052f8c:	20002374 	.word	0x20002374

10052f90 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
10052f90:	b580      	push	{r7, lr}
10052f92:	b088      	sub	sp, #32
10052f94:	af00      	add	r7, sp, #0
10052f96:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
10052f98:	4b1f      	ldr	r3, [pc, #124]	@ (10053018 <UTIL_SEQ_WaitEvt+0x88>)
10052f9a:	681b      	ldr	r3, [r3, #0]
10052f9c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
10052f9e:	4b1e      	ldr	r3, [pc, #120]	@ (10053018 <UTIL_SEQ_WaitEvt+0x88>)
10052fa0:	681b      	ldr	r3, [r3, #0]
10052fa2:	3301      	adds	r3, #1
10052fa4:	d102      	bne.n	10052fac <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
10052fa6:	2300      	movs	r3, #0
10052fa8:	61fb      	str	r3, [r7, #28]
10052faa:	e005      	b.n	10052fb8 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
10052fac:	4b1a      	ldr	r3, [pc, #104]	@ (10053018 <UTIL_SEQ_WaitEvt+0x88>)
10052fae:	681b      	ldr	r3, [r3, #0]
10052fb0:	2201      	movs	r2, #1
10052fb2:	409a      	lsls	r2, r3
10052fb4:	0013      	movs	r3, r2
10052fb6:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
10052fb8:	4b18      	ldr	r3, [pc, #96]	@ (1005301c <UTIL_SEQ_WaitEvt+0x8c>)
10052fba:	681b      	ldr	r3, [r3, #0]
10052fbc:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
10052fbe:	4b17      	ldr	r3, [pc, #92]	@ (1005301c <UTIL_SEQ_WaitEvt+0x8c>)
10052fc0:	687a      	ldr	r2, [r7, #4]
10052fc2:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10052fc4:	e005      	b.n	10052fd2 <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
10052fc6:	687a      	ldr	r2, [r7, #4]
10052fc8:	69fb      	ldr	r3, [r7, #28]
10052fca:	0011      	movs	r1, r2
10052fcc:	0018      	movs	r0, r3
10052fce:	f000 f829 	bl	10053024 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
10052fd2:	4b13      	ldr	r3, [pc, #76]	@ (10053020 <UTIL_SEQ_WaitEvt+0x90>)
10052fd4:	681b      	ldr	r3, [r3, #0]
10052fd6:	687a      	ldr	r2, [r7, #4]
10052fd8:	4013      	ands	r3, r2
10052fda:	d0f4      	beq.n	10052fc6 <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
10052fdc:	4b0e      	ldr	r3, [pc, #56]	@ (10053018 <UTIL_SEQ_WaitEvt+0x88>)
10052fde:	69ba      	ldr	r2, [r7, #24]
10052fe0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052fe2:	f3ef 8310 	mrs	r3, PRIMASK
10052fe6:	60bb      	str	r3, [r7, #8]
  return(result);
10052fe8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10052fec:	b672      	cpsid	i
}
10052fee:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
10052ff0:	687b      	ldr	r3, [r7, #4]
10052ff2:	43da      	mvns	r2, r3
10052ff4:	4b0a      	ldr	r3, [pc, #40]	@ (10053020 <UTIL_SEQ_WaitEvt+0x90>)
10052ff6:	681b      	ldr	r3, [r3, #0]
10052ff8:	401a      	ands	r2, r3
10052ffa:	4b09      	ldr	r3, [pc, #36]	@ (10053020 <UTIL_SEQ_WaitEvt+0x90>)
10052ffc:	601a      	str	r2, [r3, #0]
10052ffe:	693b      	ldr	r3, [r7, #16]
10053000:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10053002:	68fb      	ldr	r3, [r7, #12]
10053004:	f383 8810 	msr	PRIMASK, r3
}
10053008:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
1005300a:	4b04      	ldr	r3, [pc, #16]	@ (1005301c <UTIL_SEQ_WaitEvt+0x8c>)
1005300c:	697a      	ldr	r2, [r7, #20]
1005300e:	601a      	str	r2, [r3, #0]
  return;
10053010:	46c0      	nop			@ (mov r8, r8)
}
10053012:	46bd      	mov	sp, r7
10053014:	b008      	add	sp, #32
10053016:	bd80      	pop	{r7, pc}
10053018:	2000237c 	.word	0x2000237c
1005301c:	20002378 	.word	0x20002378
10053020:	20002374 	.word	0x20002374

10053024 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
10053024:	b580      	push	{r7, lr}
10053026:	b082      	sub	sp, #8
10053028:	af00      	add	r7, sp, #0
1005302a:	6078      	str	r0, [r7, #4]
1005302c:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
1005302e:	687b      	ldr	r3, [r7, #4]
10053030:	43db      	mvns	r3, r3
10053032:	0018      	movs	r0, r3
10053034:	f7ff fe3e 	bl	10052cb4 <UTIL_SEQ_Run>
  return;
10053038:	46c0      	nop			@ (mov r8, r8)
}
1005303a:	46bd      	mov	sp, r7
1005303c:	b002      	add	sp, #8
1005303e:	bd80      	pop	{r7, pc}

10053040 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
10053040:	b580      	push	{r7, lr}
10053042:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
10053044:	46c0      	nop			@ (mov r8, r8)
}
10053046:	46bd      	mov	sp, r7
10053048:	bd80      	pop	{r7, pc}
	...

1005304c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
1005304c:	b580      	push	{r7, lr}
1005304e:	b084      	sub	sp, #16
10053050:	af00      	add	r7, sp, #0
10053052:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10053054:	210f      	movs	r1, #15
10053056:	187b      	adds	r3, r7, r1
10053058:	2200      	movs	r2, #0
1005305a:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
1005305c:	687b      	ldr	r3, [r7, #4]
1005305e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
10053060:	68ba      	ldr	r2, [r7, #8]
10053062:	2380      	movs	r3, #128	@ 0x80
10053064:	025b      	lsls	r3, r3, #9
10053066:	429a      	cmp	r2, r3
10053068:	d205      	bcs.n	10053076 <SEQ_BitPosition+0x2a>
1005306a:	187b      	adds	r3, r7, r1
1005306c:	2210      	movs	r2, #16
1005306e:	701a      	strb	r2, [r3, #0]
10053070:	68bb      	ldr	r3, [r7, #8]
10053072:	041b      	lsls	r3, r3, #16
10053074:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
10053076:	68ba      	ldr	r2, [r7, #8]
10053078:	2380      	movs	r3, #128	@ 0x80
1005307a:	045b      	lsls	r3, r3, #17
1005307c:	429a      	cmp	r2, r3
1005307e:	d208      	bcs.n	10053092 <SEQ_BitPosition+0x46>
10053080:	220f      	movs	r2, #15
10053082:	18bb      	adds	r3, r7, r2
10053084:	18ba      	adds	r2, r7, r2
10053086:	7812      	ldrb	r2, [r2, #0]
10053088:	3208      	adds	r2, #8
1005308a:	701a      	strb	r2, [r3, #0]
1005308c:	68bb      	ldr	r3, [r7, #8]
1005308e:	021b      	lsls	r3, r3, #8
10053090:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
10053092:	68ba      	ldr	r2, [r7, #8]
10053094:	2380      	movs	r3, #128	@ 0x80
10053096:	055b      	lsls	r3, r3, #21
10053098:	429a      	cmp	r2, r3
1005309a:	d208      	bcs.n	100530ae <SEQ_BitPosition+0x62>
1005309c:	220f      	movs	r2, #15
1005309e:	18bb      	adds	r3, r7, r2
100530a0:	18ba      	adds	r2, r7, r2
100530a2:	7812      	ldrb	r2, [r2, #0]
100530a4:	3204      	adds	r2, #4
100530a6:	701a      	strb	r2, [r3, #0]
100530a8:	68bb      	ldr	r3, [r7, #8]
100530aa:	011b      	lsls	r3, r3, #4
100530ac:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
100530ae:	68bb      	ldr	r3, [r7, #8]
100530b0:	0f1b      	lsrs	r3, r3, #28
100530b2:	4a08      	ldr	r2, [pc, #32]	@ (100530d4 <SEQ_BitPosition+0x88>)
100530b4:	5cd1      	ldrb	r1, [r2, r3]
100530b6:	200f      	movs	r0, #15
100530b8:	183b      	adds	r3, r7, r0
100530ba:	183a      	adds	r2, r7, r0
100530bc:	7812      	ldrb	r2, [r2, #0]
100530be:	188a      	adds	r2, r1, r2
100530c0:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
100530c2:	183b      	adds	r3, r7, r0
100530c4:	781b      	ldrb	r3, [r3, #0]
100530c6:	221f      	movs	r2, #31
100530c8:	1ad3      	subs	r3, r2, r3
100530ca:	b2db      	uxtb	r3, r3
}
100530cc:	0018      	movs	r0, r3
100530ce:	46bd      	mov	sp, r7
100530d0:	b004      	add	sp, #16
100530d2:	bd80      	pop	{r7, pc}
100530d4:	10068048 	.word	0x10068048

100530d8 <aci_gap_init>:
100530d8:	b580      	push	{r7, lr}
100530da:	2802      	cmp	r0, #2
100530dc:	d901      	bls.n	100530e2 <aci_gap_init+0xa>
100530de:	2012      	movs	r0, #18
100530e0:	bd80      	pop	{r7, pc}
100530e2:	f001 fc17 	bl	10054914 <GAP_Init>
100530e6:	bd80      	pop	{r7, pc}

100530e8 <aci_gap_terminate_api>:
100530e8:	b580      	push	{r7, lr}
100530ea:	f001 fde9 	bl	10054cc0 <GAP_Terminate_Link>
100530ee:	bd80      	pop	{r7, pc}

100530f0 <_aci_gap_lists_check>:
100530f0:	b5b0      	push	{r4, r5, r7, lr}
100530f2:	4604      	mov	r4, r0
100530f4:	7800      	ldrb	r0, [r0, #0]
100530f6:	2800      	cmp	r0, #0
100530f8:	d001      	beq.n	100530fe <_aci_gap_lists_check+0xe>
100530fa:	2804      	cmp	r0, #4
100530fc:	d301      	bcc.n	10053102 <_aci_gap_lists_check+0x12>
100530fe:	2012      	movs	r0, #18
10053100:	e000      	b.n	10053104 <_aci_gap_lists_check+0x14>
10053102:	2000      	movs	r0, #0
10053104:	2512      	movs	r5, #18
10053106:	2a00      	cmp	r2, #0
10053108:	462a      	mov	r2, r5
1005310a:	d000      	beq.n	1005310e <_aci_gap_lists_check+0x1e>
1005310c:	4602      	mov	r2, r0
1005310e:	2901      	cmp	r1, #1
10053110:	d800      	bhi.n	10053114 <_aci_gap_lists_check+0x24>
10053112:	4615      	mov	r5, r2
10053114:	2d00      	cmp	r5, #0
10053116:	d107      	bne.n	10053128 <_aci_gap_lists_check+0x38>
10053118:	f007 f9b1 	bl	1005a47e <llc_priv_controller_privacy_csr_ucfg_weak>
1005311c:	2800      	cmp	r0, #0
1005311e:	d103      	bne.n	10053128 <_aci_gap_lists_check+0x38>
10053120:	7820      	ldrb	r0, [r4, #0]
10053122:	21fd      	movs	r1, #253	@ 0xfd
10053124:	4001      	ands	r1, r0
10053126:	7021      	strb	r1, [r4, #0]
10053128:	4628      	mov	r0, r5
1005312a:	bdb0      	pop	{r4, r5, r7, pc}

1005312c <aci_gap_configure_filter_accept_and_resolving_list>:
1005312c:	b5e0      	push	{r5, r6, r7, lr}
1005312e:	a901      	add	r1, sp, #4
10053130:	7008      	strb	r0, [r1, #0]
10053132:	2201      	movs	r2, #1
10053134:	4608      	mov	r0, r1
10053136:	4611      	mov	r1, r2
10053138:	f7ff ffda 	bl	100530f0 <_aci_gap_lists_check>
1005313c:	2800      	cmp	r0, #0
1005313e:	d000      	beq.n	10053142 <aci_gap_configure_filter_accept_and_resolving_list+0x16>
10053140:	bd8c      	pop	{r2, r3, r7, pc}
10053142:	a801      	add	r0, sp, #4
10053144:	7800      	ldrb	r0, [r0, #0]
10053146:	f001 fdd1 	bl	10054cec <GAP_configure_filter_accept_and_resolving_list>
1005314a:	bd8c      	pop	{r2, r3, r7, pc}

1005314c <GAP_set_advertising_configuration_ucfg_weak>:
1005314c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005314e:	461c      	mov	r4, r3
10053150:	4608      	mov	r0, r1
10053152:	990a      	ldr	r1, [sp, #40]	@ 0x28
10053154:	9103      	str	r1, [sp, #12]
10053156:	9909      	ldr	r1, [sp, #36]	@ 0x24
10053158:	9102      	str	r1, [sp, #8]
1005315a:	9908      	ldr	r1, [sp, #32]
1005315c:	9101      	str	r1, [sp, #4]
1005315e:	9907      	ldr	r1, [sp, #28]
10053160:	9100      	str	r1, [sp, #0]
10053162:	9b06      	ldr	r3, [sp, #24]
10053164:	4611      	mov	r1, r2
10053166:	4622      	mov	r2, r4
10053168:	f001 fea0 	bl	10054eac <GAP_set_legacy_advertising_configuration>
1005316c:	b004      	add	sp, #16
1005316e:	bd10      	pop	{r4, pc}

10053170 <GAP_set_advertising_data_ucfg_weak>:
10053170:	b580      	push	{r7, lr}
10053172:	4619      	mov	r1, r3
10053174:	4610      	mov	r0, r2
10053176:	f002 f80d 	bl	10055194 <GAP_set_legacy_advertising_data>
1005317a:	bd80      	pop	{r7, pc}

1005317c <GAP_set_advertising_enable_ucfg_weak>:
1005317c:	b580      	push	{r7, lr}
1005317e:	f001 ff05 	bl	10054f8c <GAP_set_legacy_advertising_enable>
10053182:	bd80      	pop	{r7, pc}

10053184 <aci_gap_set_advertising_configuration>:
10053184:	b5f0      	push	{r4, r5, r6, r7, lr}
10053186:	b093      	sub	sp, #76	@ 0x4c
10053188:	461f      	mov	r7, r3
1005318a:	4615      	mov	r5, r2
1005318c:	460e      	mov	r6, r1
1005318e:	9012      	str	r0, [sp, #72]	@ 0x48
10053190:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10053192:	4608      	mov	r0, r1
10053194:	4611      	mov	r1, r2
10053196:	4622      	mov	r2, r4
10053198:	f001 fe5a 	bl	10054e50 <GAP_check_discoverability_mode>
1005319c:	2800      	cmp	r0, #0
1005319e:	d124      	bne.n	100531ea <aci_gap_set_advertising_configuration+0x66>
100531a0:	9822      	ldr	r0, [sp, #136]	@ 0x88
100531a2:	900d      	str	r0, [sp, #52]	@ 0x34
100531a4:	ab1f      	add	r3, sp, #124	@ 0x7c
100531a6:	cb0d      	ldmia	r3, {r0, r2, r3}
100531a8:	9011      	str	r0, [sp, #68]	@ 0x44
100531aa:	981e      	ldr	r0, [sp, #120]	@ 0x78
100531ac:	900f      	str	r0, [sp, #60]	@ 0x3c
100531ae:	981d      	ldr	r0, [sp, #116]	@ 0x74
100531b0:	900e      	str	r0, [sp, #56]	@ 0x38
100531b2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
100531b4:	900c      	str	r0, [sp, #48]	@ 0x30
100531b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
100531b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
100531ba:	9710      	str	r7, [sp, #64]	@ 0x40
100531bc:	9f18      	ldr	r7, [sp, #96]	@ 0x60
100531be:	9208      	str	r2, [sp, #32]
100531c0:	9309      	str	r3, [sp, #36]	@ 0x24
100531c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100531c4:	920a      	str	r2, [sp, #40]	@ 0x28
100531c6:	9700      	str	r7, [sp, #0]
100531c8:	9001      	str	r0, [sp, #4]
100531ca:	9102      	str	r1, [sp, #8]
100531cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
100531ce:	9003      	str	r0, [sp, #12]
100531d0:	9404      	str	r4, [sp, #16]
100531d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
100531d4:	9005      	str	r0, [sp, #20]
100531d6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100531d8:	9006      	str	r0, [sp, #24]
100531da:	9811      	ldr	r0, [sp, #68]	@ 0x44
100531dc:	9007      	str	r0, [sp, #28]
100531de:	9812      	ldr	r0, [sp, #72]	@ 0x48
100531e0:	4631      	mov	r1, r6
100531e2:	462a      	mov	r2, r5
100531e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100531e6:	f7ff ffb1 	bl	1005314c <GAP_set_advertising_configuration_ucfg_weak>
100531ea:	b013      	add	sp, #76	@ 0x4c
100531ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

100531ee <aci_gap_set_advertising_data>:
100531ee:	b580      	push	{r7, lr}
100531f0:	f7ff ffbe 	bl	10053170 <GAP_set_advertising_data_ucfg_weak>
100531f4:	bd80      	pop	{r7, pc}

100531f6 <aci_gap_set_advertising_enable>:
100531f6:	b580      	push	{r7, lr}
100531f8:	f7ff ffc0 	bl	1005317c <GAP_set_advertising_enable_ucfg_weak>
100531fc:	bd80      	pop	{r7, pc}

100531fe <aci_gap_set_io_capability_api>:
100531fe:	b580      	push	{r7, lr}
10053200:	2804      	cmp	r0, #4
10053202:	d901      	bls.n	10053208 <aci_gap_set_io_capability_api+0xa>
10053204:	2012      	movs	r0, #18
10053206:	bd80      	pop	{r7, pc}
10053208:	f00d fb26 	bl	10060858 <smp_sap_aci_set_io_capabilities>
1005320c:	bd80      	pop	{r7, pc}
	...

10053210 <aci_gap_set_security_requirements_api>:
10053210:	b5f0      	push	{r4, r5, r6, r7, lr}
10053212:	b089      	sub	sp, #36	@ 0x24
10053214:	4605      	mov	r5, r0
10053216:	4608      	mov	r0, r1
10053218:	4328      	orrs	r0, r5
1005321a:	2412      	movs	r4, #18
1005321c:	2801      	cmp	r0, #1
1005321e:	d836      	bhi.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
10053220:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
10053222:	2f07      	cmp	r7, #7
10053224:	d333      	bcc.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
10053226:	2f10      	cmp	r7, #16
10053228:	d831      	bhi.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
1005322a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1005322c:	2810      	cmp	r0, #16
1005322e:	d82e      	bhi.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
10053230:	42b8      	cmp	r0, r7
10053232:	d32c      	bcc.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
10053234:	460e      	mov	r6, r1
10053236:	9910      	ldr	r1, [sp, #64]	@ 0x40
10053238:	2902      	cmp	r1, #2
1005323a:	d828      	bhi.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
1005323c:	9101      	str	r1, [sp, #4]
1005323e:	9002      	str	r0, [sp, #8]
10053240:	9303      	str	r3, [sp, #12]
10053242:	9204      	str	r2, [sp, #16]
10053244:	f00d fd81 	bl	10060d4a <secure_connections_csr_ucfg_weak>
10053248:	2801      	cmp	r0, #1
1005324a:	d106      	bne.n	1005325a <aci_gap_set_security_requirements_api+0x4a>
1005324c:	9904      	ldr	r1, [sp, #16]
1005324e:	2902      	cmp	r1, #2
10053250:	d81d      	bhi.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
10053252:	9a03      	ldr	r2, [sp, #12]
10053254:	2a01      	cmp	r2, #1
10053256:	d907      	bls.n	10053268 <aci_gap_set_security_requirements_api+0x58>
10053258:	e019      	b.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
1005325a:	9a03      	ldr	r2, [sp, #12]
1005325c:	4610      	mov	r0, r2
1005325e:	9904      	ldr	r1, [sp, #16]
10053260:	4308      	orrs	r0, r1
10053262:	d001      	beq.n	10053268 <aci_gap_set_security_requirements_api+0x58>
10053264:	2411      	movs	r4, #17
10053266:	e012      	b.n	1005328e <aci_gap_set_security_requirements_api+0x7e>
10053268:	ac05      	add	r4, sp, #20
1005326a:	9801      	ldr	r0, [sp, #4]
1005326c:	7320      	strb	r0, [r4, #12]
1005326e:	4809      	ldr	r0, [pc, #36]	@ (10053294 <__arm_cp.1_0>)
10053270:	80e0      	strh	r0, [r4, #6]
10053272:	9802      	ldr	r0, [sp, #8]
10053274:	7160      	strb	r0, [r4, #5]
10053276:	7127      	strb	r7, [r4, #4]
10053278:	70e2      	strb	r2, [r4, #3]
1005327a:	70a1      	strb	r1, [r4, #2]
1005327c:	7066      	strb	r6, [r4, #1]
1005327e:	7025      	strb	r5, [r4, #0]
10053280:	f001 fcfe 	bl	10054c80 <GAP_get_identity_address_type>
10053284:	7360      	strb	r0, [r4, #13]
10053286:	4620      	mov	r0, r4
10053288:	f00d fb1c 	bl	100608c4 <smp_sap_aci_set_authentication_req>
1005328c:	4604      	mov	r4, r0
1005328e:	4620      	mov	r0, r4
10053290:	b009      	add	sp, #36	@ 0x24
10053292:	bdf0      	pop	{r4, r5, r6, r7, pc}

10053294 <__arm_cp.1_0>:
10053294:	00000707 	.word	0x00000707

10053298 <aci_gap_passkey_resp_api>:
10053298:	b580      	push	{r7, lr}
1005329a:	4a04      	ldr	r2, [pc, #16]	@ (100532ac <__arm_cp.4_0>)
1005329c:	4291      	cmp	r1, r2
1005329e:	d901      	bls.n	100532a4 <aci_gap_passkey_resp_api+0xc>
100532a0:	2012      	movs	r0, #18
100532a2:	bd80      	pop	{r7, pc}
100532a4:	f00d fb38 	bl	10060918 <smp_sap_aci_passkey_response>
100532a8:	bd80      	pop	{r7, pc}
100532aa:	46c0      	nop			@ (mov r8, r8)

100532ac <__arm_cp.4_0>:
100532ac:	000f423f 	.word	0x000f423f

100532b0 <aci_gatt_srv_add_service_api>:
100532b0:	b580      	push	{r7, lr}
100532b2:	f004 fa37 	bl	10057724 <GAT_srv_add_service>
100532b6:	bd80      	pop	{r7, pc}

100532b8 <aci_gatt_srv_get_service_handle_api>:
100532b8:	b580      	push	{r7, lr}
100532ba:	f004 fc71 	bl	10057ba0 <GAT_srv_get_service_handle>
100532be:	bd80      	pop	{r7, pc}

100532c0 <aci_gatt_srv_add_char_api>:
100532c0:	b580      	push	{r7, lr}
100532c2:	f004 fadf 	bl	10057884 <GAT_srv_add_characteristic>
100532c6:	bd80      	pop	{r7, pc}

100532c8 <aci_gatt_srv_get_char_decl_handle_api>:
100532c8:	b580      	push	{r7, lr}
100532ca:	f004 fc73 	bl	10057bb4 <GAT_srv_get_char_decl_handle>
100532ce:	bd80      	pop	{r7, pc}

100532d0 <aci_gatt_srv_resp_api>:
100532d0:	b51c      	push	{r2, r3, r4, lr}
100532d2:	9c05      	ldr	r4, [sp, #20]
100532d4:	9401      	str	r4, [sp, #4]
100532d6:	9c04      	ldr	r4, [sp, #16]
100532d8:	9400      	str	r4, [sp, #0]
100532da:	f004 fc59 	bl	10057b90 <GAT_srv_resp>
100532de:	2000      	movs	r0, #0
100532e0:	bd1c      	pop	{r2, r3, r4, pc}

100532e2 <configBitmapSet>:
100532e2:	2000      	movs	r0, #0
100532e4:	4770      	bx	lr
	...

100532e8 <HAL_Write_ConfigData>:
100532e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100532ea:	b087      	sub	sp, #28
100532ec:	4614      	mov	r4, r2
100532ee:	460d      	mov	r5, r1
100532f0:	4606      	mov	r6, r0
100532f2:	4869      	ldr	r0, [pc, #420]	@ (10053498 <__arm_cp.4_0>)
100532f4:	6800      	ldr	r0, [r0, #0]
100532f6:	2e00      	cmp	r6, #0
100532f8:	d101      	bne.n	100532fe <HAL_Write_ConfigData+0x16>
100532fa:	2d06      	cmp	r5, #6
100532fc:	d017      	beq.n	1005332e <HAL_Write_ConfigData+0x46>
100532fe:	2e06      	cmp	r6, #6
10053300:	d101      	bne.n	10053306 <HAL_Write_ConfigData+0x1e>
10053302:	2d02      	cmp	r5, #2
10053304:	d013      	beq.n	1005332e <HAL_Write_ConfigData+0x46>
10053306:	2e08      	cmp	r6, #8
10053308:	d101      	bne.n	1005330e <HAL_Write_ConfigData+0x26>
1005330a:	2d10      	cmp	r5, #16
1005330c:	d00f      	beq.n	1005332e <HAL_Write_ConfigData+0x46>
1005330e:	2e18      	cmp	r6, #24
10053310:	d101      	bne.n	10053316 <HAL_Write_ConfigData+0x2e>
10053312:	2d10      	cmp	r5, #16
10053314:	d00b      	beq.n	1005332e <HAL_Write_ConfigData+0x46>
10053316:	2e28      	cmp	r6, #40	@ 0x28
10053318:	d101      	bne.n	1005331e <HAL_Write_ConfigData+0x36>
1005331a:	2d02      	cmp	r5, #2
1005331c:	d007      	beq.n	1005332e <HAL_Write_ConfigData+0x46>
1005331e:	2e2a      	cmp	r6, #42	@ 0x2a
10053320:	d101      	bne.n	10053326 <HAL_Write_ConfigData+0x3e>
10053322:	2d02      	cmp	r5, #2
10053324:	d003      	beq.n	1005332e <HAL_Write_ConfigData+0x46>
10053326:	2e2c      	cmp	r6, #44	@ 0x2c
10053328:	d109      	bne.n	1005333e <HAL_Write_ConfigData+0x56>
1005332a:	2d01      	cmp	r5, #1
1005332c:	d107      	bne.n	1005333e <HAL_Write_ConfigData+0x56>
1005332e:	1980      	adds	r0, r0, r6
10053330:	4621      	mov	r1, r4
10053332:	462a      	mov	r2, r5
10053334:	f7fd feb0 	bl	10051098 <BLEPLAT_MemCpy>
10053338:	2000      	movs	r0, #0
1005333a:	b007      	add	sp, #28
1005333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005333e:	2e2e      	cmp	r6, #46	@ 0x2e
10053340:	d107      	bne.n	10053352 <HAL_Write_ConfigData+0x6a>
10053342:	2d06      	cmp	r5, #6
10053344:	d105      	bne.n	10053352 <HAL_Write_ConfigData+0x6a>
10053346:	7961      	ldrb	r1, [r4, #5]
10053348:	0989      	lsrs	r1, r1, #6
1005334a:	2903      	cmp	r1, #3
1005334c:	d2ef      	bcs.n	1005332e <HAL_Write_ConfigData+0x46>
1005334e:	2012      	movs	r0, #18
10053350:	e7f3      	b.n	1005333a <HAL_Write_ConfigData+0x52>
10053352:	2ed0      	cmp	r6, #208	@ 0xd0
10053354:	d105      	bne.n	10053362 <HAL_Write_ConfigData+0x7a>
10053356:	2d01      	cmp	r5, #1
10053358:	d103      	bne.n	10053362 <HAL_Write_ConfigData+0x7a>
1005335a:	7820      	ldrb	r0, [r4, #0]
1005335c:	f7fa f9df 	bl	1004d71e <smp_sap_scp_force_debug_key_usage_ucfg>
10053360:	e7eb      	b.n	1005333a <HAL_Write_ConfigData+0x52>
10053362:	2ed2      	cmp	r6, #210	@ 0xd2
10053364:	d105      	bne.n	10053372 <HAL_Write_ConfigData+0x8a>
10053366:	2d01      	cmp	r5, #1
10053368:	d103      	bne.n	10053372 <HAL_Write_ConfigData+0x8a>
1005336a:	7821      	ldrb	r1, [r4, #0]
1005336c:	2236      	movs	r2, #54	@ 0x36
1005336e:	5481      	strb	r1, [r0, r2]
10053370:	e7e2      	b.n	10053338 <HAL_Write_ConfigData+0x50>
10053372:	2ed5      	cmp	r6, #213	@ 0xd5
10053374:	d10a      	bne.n	1005338c <HAL_Write_ConfigData+0xa4>
10053376:	2d04      	cmp	r5, #4
10053378:	d108      	bne.n	1005338c <HAL_Write_ConfigData+0xa4>
1005337a:	a802      	add	r0, sp, #8
1005337c:	2204      	movs	r2, #4
1005337e:	4621      	mov	r1, r4
10053380:	f7fd fe8a 	bl	10051098 <BLEPLAT_MemCpy>
10053384:	9802      	ldr	r0, [sp, #8]
10053386:	f7fa f9bd 	bl	1004d704 <smp_debug_trudy__set_config_ucfg>
1005338a:	e7d6      	b.n	1005333a <HAL_Write_ConfigData+0x52>
1005338c:	f004 fe20 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10053390:	2d08      	cmp	r5, #8
10053392:	d123      	bne.n	100533dc <HAL_Write_ConfigData+0xf4>
10053394:	2ed1      	cmp	r6, #209	@ 0xd1
10053396:	d121      	bne.n	100533dc <HAL_Write_ConfigData+0xf4>
10053398:	2801      	cmp	r0, #1
1005339a:	d11f      	bne.n	100533dc <HAL_Write_ConfigData+0xf4>
1005339c:	a802      	add	r0, sp, #8
1005339e:	9001      	str	r0, [sp, #4]
100533a0:	2602      	movs	r6, #2
100533a2:	4d3f      	ldr	r5, [pc, #252]	@ (100534a0 <__arm_cp.4_2>)
100533a4:	4621      	mov	r1, r4
100533a6:	4632      	mov	r2, r6
100533a8:	47a8      	blx	r5
100533aa:	1ca1      	adds	r1, r4, #2
100533ac:	af06      	add	r7, sp, #24
100533ae:	4638      	mov	r0, r7
100533b0:	4632      	mov	r2, r6
100533b2:	47a8      	blx	r5
100533b4:	1d21      	adds	r1, r4, #4
100533b6:	ad05      	add	r5, sp, #20
100533b8:	4628      	mov	r0, r5
100533ba:	4632      	mov	r2, r6
100533bc:	4b38      	ldr	r3, [pc, #224]	@ (100534a0 <__arm_cp.4_2>)
100533be:	4798      	blx	r3
100533c0:	1da1      	adds	r1, r4, #6
100533c2:	ac04      	add	r4, sp, #16
100533c4:	4620      	mov	r0, r4
100533c6:	4632      	mov	r2, r6
100533c8:	4b35      	ldr	r3, [pc, #212]	@ (100534a0 <__arm_cp.4_2>)
100533ca:	4798      	blx	r3
100533cc:	8823      	ldrh	r3, [r4, #0]
100533ce:	882a      	ldrh	r2, [r5, #0]
100533d0:	8839      	ldrh	r1, [r7, #0]
100533d2:	9801      	ldr	r0, [sp, #4]
100533d4:	8800      	ldrh	r0, [r0, #0]
100533d6:	f00b fa6d 	bl	1005e8b4 <ll_write_supported_data_ucfg_weak>
100533da:	e7ae      	b.n	1005333a <HAL_Write_ConfigData+0x52>
100533dc:	2e30      	cmp	r6, #48	@ 0x30
100533de:	d105      	bne.n	100533ec <HAL_Write_ConfigData+0x104>
100533e0:	2d01      	cmp	r5, #1
100533e2:	d103      	bne.n	100533ec <HAL_Write_ConfigData+0x104>
100533e4:	7820      	ldrb	r0, [r4, #0]
100533e6:	f7fa f9ba 	bl	1004d75e <llc_conn_multi_link_connection_ucfg>
100533ea:	e7a6      	b.n	1005333a <HAL_Write_ConfigData+0x52>
100533ec:	2ed3      	cmp	r6, #211	@ 0xd3
100533ee:	d105      	bne.n	100533fc <HAL_Write_ConfigData+0x114>
100533f0:	2d01      	cmp	r5, #1
100533f2:	d103      	bne.n	100533fc <HAL_Write_ConfigData+0x114>
100533f4:	7820      	ldrb	r0, [r4, #0]
100533f6:	f00b f96b 	bl	1005e6d0 <LL_force_chsel_1>
100533fa:	e79e      	b.n	1005333a <HAL_Write_ConfigData+0x52>
100533fc:	2eff      	cmp	r6, #255	@ 0xff
100533fe:	d10a      	bne.n	10053416 <HAL_Write_ConfigData+0x12e>
10053400:	2d04      	cmp	r5, #4
10053402:	d108      	bne.n	10053416 <HAL_Write_ConfigData+0x12e>
10053404:	a802      	add	r0, sp, #8
10053406:	2204      	movs	r2, #4
10053408:	4621      	mov	r1, r4
1005340a:	f7fd fe45 	bl	10051098 <BLEPLAT_MemCpy>
1005340e:	9802      	ldr	r0, [sp, #8]
10053410:	f7ff ff67 	bl	100532e2 <configBitmapSet>
10053414:	e00c      	b.n	10053430 <HAL_Write_ConfigData+0x148>
10053416:	2efe      	cmp	r6, #254	@ 0xfe
10053418:	d10d      	bne.n	10053436 <HAL_Write_ConfigData+0x14e>
1005341a:	2d05      	cmp	r5, #5
1005341c:	d10b      	bne.n	10053436 <HAL_Write_ConfigData+0x14e>
1005341e:	ad02      	add	r5, sp, #8
10053420:	2205      	movs	r2, #5
10053422:	4628      	mov	r0, r5
10053424:	4621      	mov	r1, r4
10053426:	f7fd fe37 	bl	10051098 <BLEPLAT_MemCpy>
1005342a:	4628      	mov	r0, r5
1005342c:	f000 fb78 	bl	10053b20 <log_verbosity_set_ucfg_weak>
10053430:	2800      	cmp	r0, #0
10053432:	d181      	bne.n	10053338 <HAL_Write_ConfigData+0x50>
10053434:	e78b      	b.n	1005334e <HAL_Write_ConfigData+0x66>
10053436:	2e2f      	cmp	r6, #47	@ 0x2f
10053438:	d105      	bne.n	10053446 <HAL_Write_ConfigData+0x15e>
1005343a:	2d01      	cmp	r5, #1
1005343c:	d103      	bne.n	10053446 <HAL_Write_ConfigData+0x15e>
1005343e:	7820      	ldrb	r0, [r4, #0]
10053440:	f007 f85c 	bl	1005a4fc <llc_scan_set_scan_channel_bitmap>
10053444:	e779      	b.n	1005333a <HAL_Write_ConfigData+0x52>
10053446:	2e32      	cmp	r6, #50	@ 0x32
10053448:	d112      	bne.n	10053470 <HAL_Write_ConfigData+0x188>
1005344a:	2d02      	cmp	r5, #2
1005344c:	d110      	bne.n	10053470 <HAL_Write_ConfigData+0x188>
1005344e:	ad02      	add	r5, sp, #8
10053450:	2202      	movs	r2, #2
10053452:	4628      	mov	r0, r5
10053454:	4621      	mov	r1, r4
10053456:	f7fd fe1f 	bl	10051098 <BLEPLAT_MemCpy>
1005345a:	8828      	ldrh	r0, [r5, #0]
1005345c:	1e41      	subs	r1, r0, #1
1005345e:	08c9      	lsrs	r1, r1, #3
10053460:	29e0      	cmp	r1, #224	@ 0xe0
10053462:	d900      	bls.n	10053466 <HAL_Write_ConfigData+0x17e>
10053464:	e773      	b.n	1005334e <HAL_Write_ConfigData+0x66>
10053466:	490d      	ldr	r1, [pc, #52]	@ (1005349c <__arm_cp.4_1>)
10053468:	6809      	ldr	r1, [r1, #0]
1005346a:	225a      	movs	r2, #90	@ 0x5a
1005346c:	5288      	strh	r0, [r1, r2]
1005346e:	e763      	b.n	10053338 <HAL_Write_ConfigData+0x50>
10053470:	2012      	movs	r0, #18
10053472:	2e33      	cmp	r6, #51	@ 0x33
10053474:	d000      	beq.n	10053478 <HAL_Write_ConfigData+0x190>
10053476:	e760      	b.n	1005333a <HAL_Write_ConfigData+0x52>
10053478:	2d01      	cmp	r5, #1
1005347a:	d000      	beq.n	1005347e <HAL_Write_ConfigData+0x196>
1005347c:	e75d      	b.n	1005333a <HAL_Write_ConfigData+0x52>
1005347e:	ad02      	add	r5, sp, #8
10053480:	2201      	movs	r2, #1
10053482:	4628      	mov	r0, r5
10053484:	4621      	mov	r1, r4
10053486:	f7fd fe07 	bl	10051098 <BLEPLAT_MemCpy>
1005348a:	7828      	ldrb	r0, [r5, #0]
1005348c:	f001 fcd8 	bl	10054e40 <GAP_enable_rpa_change_at_timeout>
10053490:	7828      	ldrb	r0, [r5, #0]
10053492:	f006 fffb 	bl	1005a48c <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10053496:	e74f      	b.n	10053338 <HAL_Write_ConfigData+0x50>

10053498 <__arm_cp.4_0>:
10053498:	20002414 	.word	0x20002414

1005349c <__arm_cp.4_1>:
1005349c:	2000241c 	.word	0x2000241c

100534a0 <__arm_cp.4_2>:
100534a0:	10051099 	.word	0x10051099

100534a4 <aci_hal_write_config_data>:
100534a4:	b580      	push	{r7, lr}
100534a6:	f7ff ff1f 	bl	100532e8 <HAL_Write_ConfigData>
100534aa:	bd80      	pop	{r7, pc}

100534ac <aci_hal_set_tx_power_level>:
100534ac:	b580      	push	{r7, lr}
100534ae:	f000 f801 	bl	100534b4 <HAL_Set_TX_Power_Level>
100534b2:	bd80      	pop	{r7, pc}

100534b4 <HAL_Set_TX_Power_Level>:
100534b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100534b6:	460e      	mov	r6, r1
100534b8:	4605      	mov	r5, r0
100534ba:	2412      	movs	r4, #18
100534bc:	f7fd fe90 	bl	100511e0 <BLEPLAT_GetMaxPALevel>
100534c0:	42b0      	cmp	r0, r6
100534c2:	d317      	bcc.n	100534f4 <HAL_Set_TX_Power_Level+0x40>
100534c4:	2d01      	cmp	r5, #1
100534c6:	d815      	bhi.n	100534f4 <HAL_Set_TX_Power_Level+0x40>
100534c8:	480b      	ldr	r0, [pc, #44]	@ (100534f8 <__arm_cp.11_0>)
100534ca:	6800      	ldr	r0, [r0, #0]
100534cc:	7a81      	ldrb	r1, [r0, #10]
100534ce:	9100      	str	r1, [sp, #0]
100534d0:	7285      	strb	r5, [r0, #10]
100534d2:	7a47      	ldrb	r7, [r0, #9]
100534d4:	7246      	strb	r6, [r0, #9]
100534d6:	4628      	mov	r0, r5
100534d8:	f7fd fe92 	bl	10051200 <BLEPLAT_SetHighPower>
100534dc:	2400      	movs	r4, #0
100534de:	42b7      	cmp	r7, r6
100534e0:	d102      	bne.n	100534e8 <HAL_Set_TX_Power_Level+0x34>
100534e2:	9800      	ldr	r0, [sp, #0]
100534e4:	42a8      	cmp	r0, r5
100534e6:	d005      	beq.n	100534f4 <HAL_Set_TX_Power_Level+0x40>
100534e8:	20ff      	movs	r0, #255	@ 0xff
100534ea:	227f      	movs	r2, #127	@ 0x7f
100534ec:	2101      	movs	r1, #1
100534ee:	460b      	mov	r3, r1
100534f0:	f009 fa5e 	bl	1005c9b0 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
100534f4:	4620      	mov	r0, r4
100534f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100534f8 <__arm_cp.11_0>:
100534f8:	20002468 	.word	0x20002468

100534fc <ble_HAL_Init>:
100534fc:	b580      	push	{r7, lr}
100534fe:	4804      	ldr	r0, [pc, #16]	@ (10053510 <__arm_cp.17_0>)
10053500:	6800      	ldr	r0, [r0, #0]
10053502:	3060      	adds	r0, #96	@ 0x60
10053504:	2100      	movs	r1, #0
10053506:	2204      	movs	r2, #4
10053508:	f7fd fdd6 	bl	100510b8 <BLEPLAT_MemSet>
1005350c:	bd80      	pop	{r7, pc}
1005350e:	46c0      	nop			@ (mov r8, r8)

10053510 <__arm_cp.17_0>:
10053510:	20002468 	.word	0x20002468

10053514 <hal_read_radio_activity_state>:
10053514:	b570      	push	{r4, r5, r6, lr}
10053516:	4603      	mov	r3, r0
10053518:	480a      	ldr	r0, [pc, #40]	@ (10053544 <__arm_cp.18_0>)
1005351a:	6804      	ldr	r4, [r0, #0]
1005351c:	f3ef 8010 	mrs	r0, PRIMASK
10053520:	b672      	cpsid	i
10053522:	7d20      	ldrb	r0, [r4, #20]
10053524:	2500      	movs	r5, #0
10053526:	7525      	strb	r5, [r4, #20]
10053528:	7c25      	ldrb	r5, [r4, #16]
1005352a:	260f      	movs	r6, #15
1005352c:	402e      	ands	r6, r5
1005352e:	701e      	strb	r6, [r3, #0]
10053530:	7c23      	ldrb	r3, [r4, #16]
10053532:	091b      	lsrs	r3, r3, #4
10053534:	700b      	strb	r3, [r1, #0]
10053536:	68e1      	ldr	r1, [r4, #12]
10053538:	6011      	str	r1, [r2, #0]
1005353a:	1e41      	subs	r1, r0, #1
1005353c:	4188      	sbcs	r0, r1
1005353e:	b662      	cpsie	i
10053540:	bd70      	pop	{r4, r5, r6, pc}
10053542:	46c0      	nop			@ (mov r8, r8)

10053544 <__arm_cp.18_0>:
10053544:	20002468 	.word	0x20002468

10053548 <hal_radio_activity_state_init>:
10053548:	4803      	ldr	r0, [pc, #12]	@ (10053558 <__arm_cp.20_0>)
1005354a:	6800      	ldr	r0, [r0, #0]
1005354c:	2100      	movs	r1, #0
1005354e:	7501      	strb	r1, [r0, #20]
10053550:	8241      	strh	r1, [r0, #18]
10053552:	7401      	strb	r1, [r0, #16]
10053554:	4770      	bx	lr
10053556:	46c0      	nop			@ (mov r8, r8)

10053558 <__arm_cp.20_0>:
10053558:	20002468 	.word	0x20002468

1005355c <hal_radio_activity_state_cb_check>:
1005355c:	b510      	push	{r4, lr}
1005355e:	b086      	sub	sp, #24
10053560:	4815      	ldr	r0, [pc, #84]	@ (100535b8 <__arm_cp.22_0>)
10053562:	6804      	ldr	r4, [r0, #0]
10053564:	a802      	add	r0, sp, #8
10053566:	a901      	add	r1, sp, #4
10053568:	466a      	mov	r2, sp
1005356a:	f7ff ffd3 	bl	10053514 <hal_read_radio_activity_state>
1005356e:	2800      	cmp	r0, #0
10053570:	d01f      	beq.n	100535b2 <hal_radio_activity_state_cb_check+0x56>
10053572:	a802      	add	r0, sp, #8
10053574:	7801      	ldrb	r1, [r0, #0]
10053576:	8a60      	ldrh	r0, [r4, #18]
10053578:	40c8      	lsrs	r0, r1
1005357a:	07c0      	lsls	r0, r0, #31
1005357c:	d019      	beq.n	100535b2 <hal_radio_activity_state_cb_check+0x56>
1005357e:	9a01      	ldr	r2, [sp, #4]
10053580:	9b00      	ldr	r3, [sp, #0]
10053582:	a803      	add	r0, sp, #12
10053584:	2408      	movs	r4, #8
10053586:	7084      	strb	r4, [r0, #2]
10053588:	0e1c      	lsrs	r4, r3, #24
1005358a:	72c4      	strb	r4, [r0, #11]
1005358c:	0c1c      	lsrs	r4, r3, #16
1005358e:	7284      	strb	r4, [r0, #10]
10053590:	0a1c      	lsrs	r4, r3, #8
10053592:	7244      	strb	r4, [r0, #9]
10053594:	7203      	strb	r3, [r0, #8]
10053596:	71c2      	strb	r2, [r0, #7]
10053598:	7181      	strb	r1, [r0, #6]
1005359a:	21ff      	movs	r1, #255	@ 0xff
1005359c:	7041      	strb	r1, [r0, #1]
1005359e:	2182      	movs	r1, #130	@ 0x82
100535a0:	7001      	strb	r1, [r0, #0]
100535a2:	2100      	movs	r1, #0
100535a4:	7141      	strb	r1, [r0, #5]
100535a6:	2204      	movs	r2, #4
100535a8:	7102      	strb	r2, [r0, #4]
100535aa:	70c1      	strb	r1, [r0, #3]
100535ac:	210c      	movs	r1, #12
100535ae:	f7f9 ff41 	bl	1004d434 <BLE_STACK_Event>
100535b2:	b006      	add	sp, #24
100535b4:	bd10      	pop	{r4, pc}
100535b6:	46c0      	nop			@ (mov r8, r8)

100535b8 <__arm_cp.22_0>:
100535b8:	20002468 	.word	0x20002468

100535bc <aci_l2cap_connection_parameter_update_req_api>:
100535bc:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
100535be:	ac01      	add	r4, sp, #4
100535c0:	9d08      	ldr	r5, [sp, #32]
100535c2:	8125      	strh	r5, [r4, #8]
100535c4:	80e3      	strh	r3, [r4, #6]
100535c6:	80a2      	strh	r2, [r4, #4]
100535c8:	8061      	strh	r1, [r4, #2]
100535ca:	8020      	strh	r0, [r4, #0]
100535cc:	4620      	mov	r0, r4
100535ce:	f004 fd0b 	bl	10057fe8 <L2C_build_connect_update_request>
100535d2:	b004      	add	sp, #16
100535d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

100535d8 <Acl_Init>:
100535d8:	4803      	ldr	r0, [pc, #12]	@ (100535e8 <__arm_cp.0_0>)
100535da:	6800      	ldr	r0, [r0, #0]
100535dc:	2188      	movs	r1, #136	@ 0x88
100535de:	4a03      	ldr	r2, [pc, #12]	@ (100535ec <__arm_cp.0_1>)
100535e0:	5042      	str	r2, [r0, r1]
100535e2:	2000      	movs	r0, #0
100535e4:	4770      	bx	lr
100535e6:	46c0      	nop			@ (mov r8, r8)

100535e8 <__arm_cp.0_0>:
100535e8:	20002468 	.word	0x20002468

100535ec <__arm_cp.0_1>:
100535ec:	03030000 	.word	0x03030000

100535f0 <isr_Acl_Data_Indication_Queue_Full>:
100535f0:	4805      	ldr	r0, [pc, #20]	@ (10053608 <__arm_cp.1_0>)
100535f2:	6800      	ldr	r0, [r0, #0]
100535f4:	2188      	movs	r1, #136	@ 0x88
100535f6:	5c41      	ldrb	r1, [r0, r1]
100535f8:	3088      	adds	r0, #136	@ 0x88
100535fa:	7880      	ldrb	r0, [r0, #2]
100535fc:	4281      	cmp	r1, r0
100535fe:	d801      	bhi.n	10053604 <isr_Acl_Data_Indication_Queue_Full+0x14>
10053600:	2000      	movs	r0, #0
10053602:	4770      	bx	lr
10053604:	2001      	movs	r0, #1
10053606:	4770      	bx	lr

10053608 <__arm_cp.1_0>:
10053608:	20002468 	.word	0x20002468

1005360c <isr_Acl_Data_TX_Cmpl_Queue_Full>:
1005360c:	4805      	ldr	r0, [pc, #20]	@ (10053624 <__arm_cp.2_0>)
1005360e:	6800      	ldr	r0, [r0, #0]
10053610:	2189      	movs	r1, #137	@ 0x89
10053612:	5c41      	ldrb	r1, [r0, r1]
10053614:	3089      	adds	r0, #137	@ 0x89
10053616:	7880      	ldrb	r0, [r0, #2]
10053618:	4281      	cmp	r1, r0
1005361a:	d801      	bhi.n	10053620 <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
1005361c:	2000      	movs	r0, #0
1005361e:	4770      	bx	lr
10053620:	2001      	movs	r0, #1
10053622:	4770      	bx	lr

10053624 <__arm_cp.2_0>:
10053624:	20002468 	.word	0x20002468

10053628 <Acl_Rcv_Pkt_Handler>:
10053628:	b510      	push	{r4, lr}
1005362a:	4604      	mov	r4, r0
1005362c:	480a      	ldr	r0, [pc, #40]	@ (10053658 <__arm_cp.5_0>)
1005362e:	6800      	ldr	r0, [r0, #0]
10053630:	6900      	ldr	r0, [r0, #16]
10053632:	2190      	movs	r1, #144	@ 0x90
10053634:	2201      	movs	r2, #1
10053636:	4613      	mov	r3, r2
10053638:	f000 fa7a 	bl	10053b30 <aci_event_fifo_push_header>
1005363c:	2800      	cmp	r0, #0
1005363e:	d004      	beq.n	1005364a <Acl_Rcv_Pkt_Handler+0x22>
10053640:	4601      	mov	r1, r0
10053642:	6044      	str	r4, [r0, #4]
10053644:	2090      	movs	r0, #144	@ 0x90
10053646:	f000 fb10 	bl	10053c6a <aci_event_fifo_push>
1005364a:	4804      	ldr	r0, [pc, #16]	@ (1005365c <__arm_cp.5_1>)
1005364c:	6800      	ldr	r0, [r0, #0]
1005364e:	2188      	movs	r1, #136	@ 0x88
10053650:	5c42      	ldrb	r2, [r0, r1]
10053652:	1c52      	adds	r2, r2, #1
10053654:	5442      	strb	r2, [r0, r1]
10053656:	bd10      	pop	{r4, pc}

10053658 <__arm_cp.5_0>:
10053658:	20002418 	.word	0x20002418

1005365c <__arm_cp.5_1>:
1005365c:	20002468 	.word	0x20002468

10053660 <Acl_Tx_Cmpl_Pkt_Handler>:
10053660:	b510      	push	{r4, lr}
10053662:	4604      	mov	r4, r0
10053664:	7a00      	ldrb	r0, [r0, #8]
10053666:	21f7      	movs	r1, #247	@ 0xf7
10053668:	4001      	ands	r1, r0
1005366a:	7221      	strb	r1, [r4, #8]
1005366c:	480a      	ldr	r0, [pc, #40]	@ (10053698 <__arm_cp.6_0>)
1005366e:	6800      	ldr	r0, [r0, #0]
10053670:	6900      	ldr	r0, [r0, #16]
10053672:	2190      	movs	r1, #144	@ 0x90
10053674:	2200      	movs	r2, #0
10053676:	2301      	movs	r3, #1
10053678:	f000 fa5a 	bl	10053b30 <aci_event_fifo_push_header>
1005367c:	2800      	cmp	r0, #0
1005367e:	d004      	beq.n	1005368a <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10053680:	4601      	mov	r1, r0
10053682:	6044      	str	r4, [r0, #4]
10053684:	2090      	movs	r0, #144	@ 0x90
10053686:	f000 faf0 	bl	10053c6a <aci_event_fifo_push>
1005368a:	4804      	ldr	r0, [pc, #16]	@ (1005369c <__arm_cp.6_1>)
1005368c:	6800      	ldr	r0, [r0, #0]
1005368e:	2189      	movs	r1, #137	@ 0x89
10053690:	5c42      	ldrb	r2, [r0, r1]
10053692:	1c52      	adds	r2, r2, #1
10053694:	5442      	strb	r2, [r0, r1]
10053696:	bd10      	pop	{r4, pc}

10053698 <__arm_cp.6_0>:
10053698:	20002418 	.word	0x20002418

1005369c <__arm_cp.6_1>:
1005369c:	20002468 	.word	0x20002468

100536a0 <Acl_Transmit_Data>:
100536a0:	b510      	push	{r4, lr}
100536a2:	2400      	movs	r4, #0
100536a4:	61c4      	str	r4, [r0, #28]
100536a6:	f006 fc0f 	bl	10059ec8 <llc_conn_send_acl_data>
100536aa:	2884      	cmp	r0, #132	@ 0x84
100536ac:	d000      	beq.n	100536b0 <Acl_Transmit_Data+0x10>
100536ae:	2481      	movs	r4, #129	@ 0x81
100536b0:	4620      	mov	r0, r4
100536b2:	bd10      	pop	{r4, pc}

100536b4 <hci_acl_data_tx_cmpl_event_int_cb>:
100536b4:	b5b0      	push	{r4, r5, r7, lr}
100536b6:	6809      	ldr	r1, [r1, #0]
100536b8:	2483      	movs	r4, #131	@ 0x83
100536ba:	2200      	movs	r2, #0
100536bc:	2900      	cmp	r1, #0
100536be:	d012      	beq.n	100536e6 <hci_acl_data_tx_cmpl_event_int_cb+0x32>
100536c0:	69cd      	ldr	r5, [r1, #28]
100536c2:	2400      	movs	r4, #0
100536c4:	61cc      	str	r4, [r1, #28]
100536c6:	7a08      	ldrb	r0, [r1, #8]
100536c8:	06c0      	lsls	r0, r0, #27
100536ca:	d403      	bmi.n	100536d4 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
100536cc:	2000      	movs	r0, #0
100536ce:	f004 ff87 	bl	100585e0 <L2C_mux_acl_packet>
100536d2:	e002      	b.n	100536da <hci_acl_data_tx_cmpl_event_int_cb+0x26>
100536d4:	4608      	mov	r0, r1
100536d6:	f004 faab 	bl	10057c30 <hci_tx_acl_data_done>
100536da:	2201      	movs	r2, #1
100536dc:	2800      	cmp	r0, #0
100536de:	4629      	mov	r1, r5
100536e0:	d0ec      	beq.n	100536bc <hci_acl_data_tx_cmpl_event_int_cb+0x8>
100536e2:	2483      	movs	r4, #131	@ 0x83
100536e4:	e00c      	b.n	10053700 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
100536e6:	07d0      	lsls	r0, r2, #31
100536e8:	d00a      	beq.n	10053700 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
100536ea:	f3ef 8010 	mrs	r0, PRIMASK
100536ee:	b672      	cpsid	i
100536f0:	4804      	ldr	r0, [pc, #16]	@ (10053704 <__arm_cp.9_0>)
100536f2:	6800      	ldr	r0, [r0, #0]
100536f4:	2189      	movs	r1, #137	@ 0x89
100536f6:	5c42      	ldrb	r2, [r0, r1]
100536f8:	1e52      	subs	r2, r2, #1
100536fa:	5442      	strb	r2, [r0, r1]
100536fc:	b662      	cpsie	i
100536fe:	2400      	movs	r4, #0
10053700:	b2e0      	uxtb	r0, r4
10053702:	bdb0      	pop	{r4, r5, r7, pc}

10053704 <__arm_cp.9_0>:
10053704:	20002468 	.word	0x20002468

10053708 <hci_acl_data_ind_event_int_cb>:
10053708:	b580      	push	{r7, lr}
1005370a:	480e      	ldr	r0, [pc, #56]	@ (10053744 <__arm_cp.11_0>)
1005370c:	6800      	ldr	r0, [r0, #0]
1005370e:	222c      	movs	r2, #44	@ 0x2c
10053710:	5c80      	ldrb	r0, [r0, r2]
10053712:	07c0      	lsls	r0, r0, #31
10053714:	6808      	ldr	r0, [r1, #0]
10053716:	d102      	bne.n	1005371e <hci_acl_data_ind_event_int_cb+0x16>
10053718:	f004 fed4 	bl	100584c4 <L2C_receive_data>
1005371c:	e001      	b.n	10053722 <hci_acl_data_ind_event_int_cb+0x1a>
1005371e:	f004 fa53 	bl	10057bc8 <hci_rx_acl_data>
10053722:	2800      	cmp	r0, #0
10053724:	d001      	beq.n	1005372a <hci_acl_data_ind_event_int_cb+0x22>
10053726:	2083      	movs	r0, #131	@ 0x83
10053728:	bd80      	pop	{r7, pc}
1005372a:	f3ef 8010 	mrs	r0, PRIMASK
1005372e:	b672      	cpsid	i
10053730:	4805      	ldr	r0, [pc, #20]	@ (10053748 <__arm_cp.11_1>)
10053732:	6800      	ldr	r0, [r0, #0]
10053734:	2188      	movs	r1, #136	@ 0x88
10053736:	5c42      	ldrb	r2, [r0, r1]
10053738:	1e52      	subs	r2, r2, #1
1005373a:	5442      	strb	r2, [r0, r1]
1005373c:	b662      	cpsie	i
1005373e:	2000      	movs	r0, #0
10053740:	bd80      	pop	{r7, pc}
10053742:	46c0      	nop			@ (mov r8, r8)

10053744 <__arm_cp.11_0>:
10053744:	20002414 	.word	0x20002414

10053748 <__arm_cp.11_1>:
10053748:	20002468 	.word	0x20002468

1005374c <ACL_pkt_init>:
1005374c:	b570      	push	{r4, r5, r6, lr}
1005374e:	4c0b      	ldr	r4, [pc, #44]	@ (1005377c <__arm_cp.1_0>)
10053750:	2501      	movs	r5, #1
10053752:	2204      	movs	r2, #4
10053754:	4620      	mov	r0, r4
10053756:	4629      	mov	r1, r5
10053758:	f00b ff4c 	bl	1005f5f4 <csmem_mem_assign>
1005375c:	4e08      	ldr	r6, [pc, #32]	@ (10053780 <__arm_cp.1_1>)
1005375e:	6030      	str	r0, [r6, #0]
10053760:	2206      	movs	r2, #6
10053762:	4620      	mov	r0, r4
10053764:	4629      	mov	r1, r5
10053766:	f00b ff45 	bl	1005f5f4 <csmem_mem_assign>
1005376a:	6831      	ldr	r1, [r6, #0]
1005376c:	6008      	str	r0, [r1, #0]
1005376e:	6830      	ldr	r0, [r6, #0]
10053770:	6801      	ldr	r1, [r0, #0]
10053772:	2000      	movs	r0, #0
10053774:	8088      	strh	r0, [r1, #4]
10053776:	8048      	strh	r0, [r1, #2]
10053778:	7008      	strb	r0, [r1, #0]
1005377a:	bd70      	pop	{r4, r5, r6, pc}

1005377c <__arm_cp.1_0>:
1005377c:	20002478 	.word	0x20002478

10053780 <__arm_cp.1_1>:
10053780:	20002410 	.word	0x20002410

10053784 <ACL_pkt_get>:
10053784:	b5b0      	push	{r4, r5, r7, lr}
10053786:	460d      	mov	r5, r1
10053788:	4604      	mov	r4, r0
1005378a:	1e41      	subs	r1, r0, #1
1005378c:	4188      	sbcs	r0, r1
1005378e:	1e51      	subs	r1, r2, #1
10053790:	221f      	movs	r2, #31
10053792:	430a      	orrs	r2, r1
10053794:	3221      	adds	r2, #33	@ 0x21
10053796:	b291      	uxth	r1, r2
10053798:	f00b fe0a 	bl	1005f3b0 <MBM_get>
1005379c:	2800      	cmp	r0, #0
1005379e:	d006      	beq.n	100537ae <ACL_pkt_get+0x2a>
100537a0:	8085      	strh	r5, [r0, #4]
100537a2:	6801      	ldr	r1, [r0, #0]
100537a4:	6081      	str	r1, [r0, #8]
100537a6:	2c00      	cmp	r4, #0
100537a8:	d103      	bne.n	100537b2 <ACL_pkt_get+0x2e>
100537aa:	2140      	movs	r1, #64	@ 0x40
100537ac:	e003      	b.n	100537b6 <ACL_pkt_get+0x32>
100537ae:	2000      	movs	r0, #0
100537b0:	bdb0      	pop	{r4, r5, r7, pc}
100537b2:	217f      	movs	r1, #127	@ 0x7f
100537b4:	43c9      	mvns	r1, r1
100537b6:	7301      	strb	r1, [r0, #12]
100537b8:	1d00      	adds	r0, r0, #4
100537ba:	bdb0      	pop	{r4, r5, r7, pc}

100537bc <ACL_pkt_get_available_mem_buffers>:
100537bc:	b580      	push	{r7, lr}
100537be:	1e41      	subs	r1, r0, #1
100537c0:	4188      	sbcs	r0, r1
100537c2:	f00b fe5d 	bl	1005f480 <MBM_get_available_mem_buffers>
100537c6:	bd80      	pop	{r7, pc}

100537c8 <ACL_pkt_release>:
100537c8:	b580      	push	{r7, lr}
100537ca:	7a01      	ldrb	r1, [r0, #8]
100537cc:	098a      	lsrs	r2, r1, #6
100537ce:	2101      	movs	r1, #1
100537d0:	4391      	bics	r1, r2
100537d2:	1f00      	subs	r0, r0, #4
100537d4:	f00b fe26 	bl	1005f424 <MBM_release>
100537d8:	bd80      	pop	{r7, pc}

100537da <ACL_pkt_resize>:
100537da:	b580      	push	{r7, lr}
100537dc:	460a      	mov	r2, r1
100537de:	7a01      	ldrb	r1, [r0, #8]
100537e0:	098b      	lsrs	r3, r1, #6
100537e2:	2101      	movs	r1, #1
100537e4:	4399      	bics	r1, r3
100537e6:	6840      	ldr	r0, [r0, #4]
100537e8:	f00b fe5e 	bl	1005f4a8 <MBM_resize>
100537ec:	bd80      	pop	{r7, pc}

100537ee <ACL_pkt_cmp>:
100537ee:	b510      	push	{r4, lr}
100537f0:	4614      	mov	r4, r2
100537f2:	460a      	mov	r2, r1
100537f4:	6840      	ldr	r0, [r0, #4]
100537f6:	4619      	mov	r1, r3
100537f8:	4623      	mov	r3, r4
100537fa:	f00c f82f 	bl	1005f85c <Mem_Buff_cmp>
100537fe:	bd10      	pop	{r4, pc}

10053800 <ACL_pkt_read>:
10053800:	b510      	push	{r4, lr}
10053802:	4614      	mov	r4, r2
10053804:	460a      	mov	r2, r1
10053806:	6840      	ldr	r0, [r0, #4]
10053808:	4619      	mov	r1, r3
1005380a:	4623      	mov	r3, r4
1005380c:	f00b ffed 	bl	1005f7ea <Mem_Buff_read>
10053810:	bd10      	pop	{r4, pc}

10053812 <ACL_pkt_read_16b>:
10053812:	b5e0      	push	{r5, r6, r7, lr}
10053814:	2202      	movs	r2, #2
10053816:	ab01      	add	r3, sp, #4
10053818:	f7ff fff2 	bl	10053800 <ACL_pkt_read>
1005381c:	2800      	cmp	r0, #0
1005381e:	d001      	beq.n	10053824 <ACL_pkt_read_16b+0x12>
10053820:	2000      	movs	r0, #0
10053822:	e004      	b.n	1005382e <ACL_pkt_read_16b+0x1c>
10053824:	a801      	add	r0, sp, #4
10053826:	7801      	ldrb	r1, [r0, #0]
10053828:	7840      	ldrb	r0, [r0, #1]
1005382a:	0200      	lsls	r0, r0, #8
1005382c:	1840      	adds	r0, r0, r1
1005382e:	b280      	uxth	r0, r0
10053830:	bd8c      	pop	{r2, r3, r7, pc}

10053832 <ACL_pkt_write_16b>:
10053832:	b5e0      	push	{r5, r6, r7, lr}
10053834:	ab01      	add	r3, sp, #4
10053836:	701a      	strb	r2, [r3, #0]
10053838:	0a12      	lsrs	r2, r2, #8
1005383a:	705a      	strb	r2, [r3, #1]
1005383c:	2202      	movs	r2, #2
1005383e:	f000 f801 	bl	10053844 <ACL_pkt_write>
10053842:	bd8c      	pop	{r2, r3, r7, pc}

10053844 <ACL_pkt_write>:
10053844:	b510      	push	{r4, lr}
10053846:	4614      	mov	r4, r2
10053848:	460a      	mov	r2, r1
1005384a:	6840      	ldr	r0, [r0, #4]
1005384c:	4619      	mov	r1, r3
1005384e:	4623      	mov	r3, r4
10053850:	f00b ff91 	bl	1005f776 <Mem_Buff_write>
10053854:	bd10      	pop	{r4, pc}

10053856 <ACL_pkt_extract_pdu>:
10053856:	1f01      	subs	r1, r0, #4
10053858:	2200      	movs	r2, #0
1005385a:	600a      	str	r2, [r1, #0]
1005385c:	6840      	ldr	r0, [r0, #4]
1005385e:	4770      	bx	lr

10053860 <ACL_pkt_connection>:
10053860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053862:	480f      	ldr	r0, [pc, #60]	@ (100538a0 <__arm_cp.14_0>)
10053864:	6800      	ldr	r0, [r0, #0]
10053866:	6805      	ldr	r5, [r0, #0]
10053868:	7828      	ldrb	r0, [r5, #0]
1005386a:	1c41      	adds	r1, r0, #1
1005386c:	7029      	strb	r1, [r5, #0]
1005386e:	4f0d      	ldr	r7, [pc, #52]	@ (100538a4 <__arm_cp.14_1>)
10053870:	8a39      	ldrh	r1, [r7, #16]
10053872:	3125      	adds	r1, #37	@ 0x25
10053874:	094e      	lsrs	r6, r1, #5
10053876:	1c74      	adds	r4, r6, #1
10053878:	2800      	cmp	r0, #0
1005387a:	d109      	bne.n	10053890 <ACL_pkt_connection+0x30>
1005387c:	2000      	movs	r0, #0
1005387e:	4621      	mov	r1, r4
10053880:	f00b fe4e 	bl	1005f520 <MBM_reserve>
10053884:	8a38      	ldrh	r0, [r7, #16]
10053886:	3025      	adds	r0, #37	@ 0x25
10053888:	0940      	lsrs	r0, r0, #5
1005388a:	1c40      	adds	r0, r0, #1
1005388c:	8068      	strh	r0, [r5, #2]
1005388e:	1cb4      	adds	r4, r6, #2
10053890:	2001      	movs	r0, #1
10053892:	4621      	mov	r1, r4
10053894:	f00b fe44 	bl	1005f520 <MBM_reserve>
10053898:	88a8      	ldrh	r0, [r5, #4]
1005389a:	1900      	adds	r0, r0, r4
1005389c:	80a8      	strh	r0, [r5, #4]
1005389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100538a0 <__arm_cp.14_0>:
100538a0:	20002410 	.word	0x20002410

100538a4 <__arm_cp.14_1>:
100538a4:	2000247c 	.word	0x2000247c

100538a8 <ACL_pkt_disconnection>:
100538a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100538aa:	480e      	ldr	r0, [pc, #56]	@ (100538e4 <__arm_cp.15_0>)
100538ac:	6800      	ldr	r0, [r0, #0]
100538ae:	6806      	ldr	r6, [r0, #0]
100538b0:	7830      	ldrb	r0, [r6, #0]
100538b2:	1e40      	subs	r0, r0, #1
100538b4:	7030      	strb	r0, [r6, #0]
100538b6:	490c      	ldr	r1, [pc, #48]	@ (100538e8 <__arm_cp.15_1>)
100538b8:	8a09      	ldrh	r1, [r1, #16]
100538ba:	3125      	adds	r1, #37	@ 0x25
100538bc:	094f      	lsrs	r7, r1, #5
100538be:	1c7c      	adds	r4, r7, #1
100538c0:	0600      	lsls	r0, r0, #24
100538c2:	d106      	bne.n	100538d2 <ACL_pkt_disconnection+0x2a>
100538c4:	2500      	movs	r5, #0
100538c6:	4628      	mov	r0, r5
100538c8:	4621      	mov	r1, r4
100538ca:	f00b fe7d 	bl	1005f5c8 <MBM_unreserve>
100538ce:	8075      	strh	r5, [r6, #2]
100538d0:	1cbc      	adds	r4, r7, #2
100538d2:	2001      	movs	r0, #1
100538d4:	4621      	mov	r1, r4
100538d6:	f00b fe77 	bl	1005f5c8 <MBM_unreserve>
100538da:	88b0      	ldrh	r0, [r6, #4]
100538dc:	1b00      	subs	r0, r0, r4
100538de:	80b0      	strh	r0, [r6, #4]
100538e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100538e2:	46c0      	nop			@ (mov r8, r8)

100538e4 <__arm_cp.15_0>:
100538e4:	20002410 	.word	0x20002410

100538e8 <__arm_cp.15_1>:
100538e8:	2000247c 	.word	0x2000247c

100538ec <BLE_STACK_Tick>:
100538ec:	b580      	push	{r7, lr}
100538ee:	f00d fc35 	bl	1006115c <tsk_scheduler>
100538f2:	bd80      	pop	{r7, pc}

100538f4 <BlueNRG_Stack_Initialize_Layers>:
100538f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100538f6:	b08f      	sub	sp, #60	@ 0x3c
100538f8:	9309      	str	r3, [sp, #36]	@ 0x24
100538fa:	920b      	str	r2, [sp, #44]	@ 0x2c
100538fc:	910a      	str	r1, [sp, #40]	@ 0x28
100538fe:	9008      	str	r0, [sp, #32]
10053900:	f00b fe72 	bl	1005f5e8 <csmem_init>
10053904:	2401      	movs	r4, #1
10053906:	2138      	movs	r1, #56	@ 0x38
10053908:	4620      	mov	r0, r4
1005390a:	f00b fe85 	bl	1005f618 <csmem_mem_0_assign>
1005390e:	4933      	ldr	r1, [pc, #204]	@ (100539dc <__arm_cp.1_0>)
10053910:	7ac9      	ldrb	r1, [r1, #11]
10053912:	2234      	movs	r2, #52	@ 0x34
10053914:	5481      	strb	r1, [r0, r2]
10053916:	4e32      	ldr	r6, [pc, #200]	@ (100539e0 <__arm_cp.1_1>)
10053918:	6030      	str	r0, [r6, #0]
1005391a:	2700      	movs	r7, #0
1005391c:	7007      	strb	r7, [r0, #0]
1005391e:	6830      	ldr	r0, [r6, #0]
10053920:	7047      	strb	r7, [r0, #1]
10053922:	6830      	ldr	r0, [r6, #0]
10053924:	7087      	strb	r7, [r0, #2]
10053926:	6830      	ldr	r0, [r6, #0]
10053928:	21e1      	movs	r1, #225	@ 0xe1
1005392a:	70c1      	strb	r1, [r0, #3]
1005392c:	2005      	movs	r0, #5
1005392e:	01c0      	lsls	r0, r0, #7
10053930:	6831      	ldr	r1, [r6, #0]
10053932:	8088      	strh	r0, [r1, #4]
10053934:	2030      	movs	r0, #48	@ 0x30
10053936:	8508      	strh	r0, [r1, #40]	@ 0x28
10053938:	ad0e      	add	r5, sp, #56	@ 0x38
1005393a:	a90d      	add	r1, sp, #52	@ 0x34
1005393c:	aa0c      	add	r2, sp, #48	@ 0x30
1005393e:	4628      	mov	r0, r5
10053940:	f7fd fbdb 	bl	100510fa <BLEPLAT_GetPartInfo>
10053944:	980c      	ldr	r0, [sp, #48]	@ 0x30
10053946:	0200      	lsls	r0, r0, #8
10053948:	7829      	ldrb	r1, [r5, #0]
1005394a:	0109      	lsls	r1, r1, #4
1005394c:	4301      	orrs	r1, r0
1005394e:	980d      	ldr	r0, [sp, #52]	@ 0x34
10053950:	0300      	lsls	r0, r0, #12
10053952:	4308      	orrs	r0, r1
10053954:	1d00      	adds	r0, r0, #4
10053956:	6831      	ldr	r1, [r6, #0]
10053958:	8548      	strh	r0, [r1, #42]	@ 0x2a
1005395a:	2118      	movs	r1, #24
1005395c:	4620      	mov	r0, r4
1005395e:	f00b fe5b 	bl	1005f618 <csmem_mem_0_assign>
10053962:	4920      	ldr	r1, [pc, #128]	@ (100539e4 <__arm_cp.1_2>)
10053964:	6008      	str	r0, [r1, #0]
10053966:	7507      	strb	r7, [r0, #20]
10053968:	f00d fbee 	bl	10061148 <tsk_init>
1005396c:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005396e:	9006      	str	r0, [sp, #24]
10053970:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10053972:	9405      	str	r4, [sp, #20]
10053974:	981a      	ldr	r0, [sp, #104]	@ 0x68
10053976:	9004      	str	r0, [sp, #16]
10053978:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005397a:	9003      	str	r0, [sp, #12]
1005397c:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005397e:	9002      	str	r0, [sp, #8]
10053980:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10053982:	9001      	str	r0, [sp, #4]
10053984:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10053986:	9500      	str	r5, [sp, #0]
10053988:	9808      	ldr	r0, [sp, #32]
1005398a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005398c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005398e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10053990:	f7f9 ff9b 	bl	1004d8ca <LL_init_ucfg>
10053994:	f7f9 feae 	bl	1004d6f4 <MBM_init_ucfg>
10053998:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
1005399a:	2c01      	cmp	r4, #1
1005399c:	d101      	bne.n	100539a2 <BlueNRG_Stack_Initialize_Layers+0xae>
1005399e:	f7f9 fe21 	bl	1004d5e4 <ACL_pkt_init_ucfg>
100539a2:	f000 f98b 	bl	10053cbc <Events_Process_init>
100539a6:	2f01      	cmp	r7, #1
100539a8:	d101      	bne.n	100539ae <BlueNRG_Stack_Initialize_Layers+0xba>
100539aa:	f000 f8bb 	bl	10053b24 <log_init_ucfg_weak>
100539ae:	6830      	ldr	r0, [r6, #0]
100539b0:	212c      	movs	r1, #44	@ 0x2c
100539b2:	5c40      	ldrb	r0, [r0, r1]
100539b4:	07c0      	lsls	r0, r0, #31
100539b6:	d10e      	bne.n	100539d6 <BlueNRG_Stack_Initialize_Layers+0xe2>
100539b8:	2c01      	cmp	r4, #1
100539ba:	d106      	bne.n	100539ca <BlueNRG_Stack_Initialize_Layers+0xd6>
100539bc:	9816      	ldr	r0, [sp, #88]	@ 0x58
100539be:	f7f9 febe 	bl	1004d73e <L2C_init_ucfg>
100539c2:	f7f9 ffde 	bl	1004d982 <smp_init_ucfg>
100539c6:	f7f9 ffe3 	bl	1004d990 <GAT_att_cmn_init_ucfg>
100539ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
100539cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100539ce:	462a      	mov	r2, r5
100539d0:	4623      	mov	r3, r4
100539d2:	f000 ff03 	bl	100547dc <GAP_init_context>
100539d6:	b00f      	add	sp, #60	@ 0x3c
100539d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100539da:	46c0      	nop			@ (mov r8, r8)

100539dc <__arm_cp.1_0>:
100539dc:	2000247c 	.word	0x2000247c

100539e0 <__arm_cp.1_1>:
100539e0:	20002414 	.word	0x20002414

100539e4 <__arm_cp.1_2>:
100539e4:	200024bc 	.word	0x200024bc

100539e8 <_BlueNRG_Stack_Initialization>:
100539e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100539ea:	b095      	sub	sp, #84	@ 0x54
100539ec:	2001      	movs	r0, #1
100539ee:	0481      	lsls	r1, r0, #18
100539f0:	9114      	str	r1, [sp, #80]	@ 0x50
100539f2:	482e      	ldr	r0, [pc, #184]	@ (10053aac <__arm_cp.2_0>)
100539f4:	6001      	str	r1, [r0, #0]
100539f6:	f3bf 8f4f 	dsb	sy
100539fa:	f3bf 8f6f 	isb	sy
100539fe:	f7fe fbbb 	bl	10052178 <BLEPLAT_CNTR_GlobDisableBlue>
10053a02:	f7fd fc55 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10053a06:	2000      	movs	r0, #0
10053a08:	9012      	str	r0, [sp, #72]	@ 0x48
10053a0a:	43c0      	mvns	r0, r0
10053a0c:	f7fe fba0 	bl	10052150 <BLEPLAT_CNTR_ClearInterrupt>
10053a10:	f004 fade 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10053a14:	9013      	str	r0, [sp, #76]	@ 0x4c
10053a16:	f7f9 fdd5 	bl	1004d5c4 <phy_upd_csr_ucfg>
10053a1a:	9011      	str	r0, [sp, #68]	@ 0x44
10053a1c:	f00a fe64 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
10053a20:	9010      	str	r0, [sp, #64]	@ 0x40
10053a22:	f006 fd2c 	bl	1005a47e <llc_priv_controller_privacy_csr_ucfg_weak>
10053a26:	900f      	str	r0, [sp, #60]	@ 0x3c
10053a28:	f00d f98f 	bl	10060d4a <secure_connections_csr_ucfg_weak>
10053a2c:	f004 fad6 	bl	10057fdc <scan_csr_ucfg_weak>
10053a30:	900e      	str	r0, [sp, #56]	@ 0x38
10053a32:	f004 fc99 	bl	10058368 <l2c_cos_csr_ucfg_weak>
10053a36:	900d      	str	r0, [sp, #52]	@ 0x34
10053a38:	f006 fd18 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10053a3c:	900c      	str	r0, [sp, #48]	@ 0x30
10053a3e:	f006 fd17 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10053a42:	900b      	str	r0, [sp, #44]	@ 0x2c
10053a44:	f004 fa68 	bl	10057f18 <cte_csr_ucfg_weak>
10053a48:	4604      	mov	r4, r0
10053a4a:	f004 fac3 	bl	10057fd4 <pcl_csr_ucfg_weak>
10053a4e:	4605      	mov	r5, r0
10053a50:	f7f9 fdc0 	bl	1004d5d4 <conn_supp_csr_ucfg>
10053a54:	4606      	mov	r6, r0
10053a56:	f004 f96a 	bl	10057d2e <chc_csr_ucfg_weak>
10053a5a:	4607      	mov	r7, r0
10053a5c:	f000 f865 	bl	10053b2a <log_csr_ucfg_weak>
10053a60:	b2c0      	uxtb	r0, r0
10053a62:	b2f9      	uxtb	r1, r7
10053a64:	9108      	str	r1, [sp, #32]
10053a66:	9009      	str	r0, [sp, #36]	@ 0x24
10053a68:	b2f0      	uxtb	r0, r6
10053a6a:	b2e9      	uxtb	r1, r5
10053a6c:	b2e2      	uxtb	r2, r4
10053a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10053a70:	b2db      	uxtb	r3, r3
10053a72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10053a74:	b2e4      	uxtb	r4, r4
10053a76:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10053a78:	b2ed      	uxtb	r5, r5
10053a7a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10053a7c:	b2f6      	uxtb	r6, r6
10053a7e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10053a80:	9700      	str	r7, [sp, #0]
10053a82:	9601      	str	r6, [sp, #4]
10053a84:	9502      	str	r5, [sp, #8]
10053a86:	9403      	str	r4, [sp, #12]
10053a88:	9304      	str	r3, [sp, #16]
10053a8a:	9205      	str	r2, [sp, #20]
10053a8c:	9106      	str	r1, [sp, #24]
10053a8e:	9007      	str	r0, [sp, #28]
10053a90:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10053a92:	b2c0      	uxtb	r0, r0
10053a94:	9911      	ldr	r1, [sp, #68]	@ 0x44
10053a96:	b2c9      	uxtb	r1, r1
10053a98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10053a9a:	b2d3      	uxtb	r3, r2
10053a9c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10053a9e:	f7ff ff29 	bl	100538f4 <BlueNRG_Stack_Initialize_Layers>
10053aa2:	4803      	ldr	r0, [pc, #12]	@ (10053ab0 <__arm_cp.2_1>)
10053aa4:	9914      	ldr	r1, [sp, #80]	@ 0x50
10053aa6:	6001      	str	r1, [r0, #0]
10053aa8:	b015      	add	sp, #84	@ 0x54
10053aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

10053aac <__arm_cp.2_0>:
10053aac:	e000e180 	.word	0xe000e180

10053ab0 <__arm_cp.2_1>:
10053ab0:	e000e100 	.word	0xe000e100

10053ab4 <BLE_STACK_Init>:
10053ab4:	b5b0      	push	{r4, r5, r7, lr}
10053ab6:	4605      	mov	r5, r0
10053ab8:	7ac0      	ldrb	r0, [r0, #11]
10053aba:	2412      	movs	r4, #18
10053abc:	2880      	cmp	r0, #128	@ 0x80
10053abe:	d829      	bhi.n	10053b14 <BLE_STACK_Init+0x60>
10053ac0:	8c29      	ldrh	r1, [r5, #32]
10053ac2:	2917      	cmp	r1, #23
10053ac4:	d326      	bcc.n	10053b14 <BLE_STACK_Init+0x60>
10053ac6:	4814      	ldr	r0, [pc, #80]	@ (10053b18 <__arm_cp.3_0>)
10053ac8:	1d82      	adds	r2, r0, #6
10053aca:	4291      	cmp	r1, r2
10053acc:	d822      	bhi.n	10053b14 <BLE_STACK_Init+0x60>
10053ace:	8a29      	ldrh	r1, [r5, #16]
10053ad0:	2917      	cmp	r1, #23
10053ad2:	d31f      	bcc.n	10053b14 <BLE_STACK_Init+0x60>
10053ad4:	4281      	cmp	r1, r0
10053ad6:	d81d      	bhi.n	10053b14 <BLE_STACK_Init+0x60>
10053ad8:	7ea8      	ldrb	r0, [r5, #26]
10053ada:	2800      	cmp	r0, #0
10053adc:	d01a      	beq.n	10053b14 <BLE_STACK_Init+0x60>
10053ade:	f006 fcc7 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10053ae2:	2800      	cmp	r0, #0
10053ae4:	d008      	beq.n	10053af8 <BLE_STACK_Init+0x44>
10053ae6:	7ee8      	ldrb	r0, [r5, #27]
10053ae8:	2800      	cmp	r0, #0
10053aea:	d013      	beq.n	10053b14 <BLE_STACK_Init+0x60>
10053aec:	2880      	cmp	r0, #128	@ 0x80
10053aee:	d811      	bhi.n	10053b14 <BLE_STACK_Init+0x60>
10053af0:	7f28      	ldrb	r0, [r5, #28]
10053af2:	1e40      	subs	r0, r0, #1
10053af4:	280e      	cmp	r0, #14
10053af6:	d80d      	bhi.n	10053b14 <BLE_STACK_Init+0x60>
10053af8:	4808      	ldr	r0, [pc, #32]	@ (10053b1c <__arm_cp.3_1>)
10053afa:	2234      	movs	r2, #52	@ 0x34
10053afc:	4629      	mov	r1, r5
10053afe:	f7fd facb 	bl	10051098 <BLEPLAT_MemCpy>
10053b02:	f00b ff23 	bl	1005f94c <BlueNRG_Stack_Initialize_RAM_check>
10053b06:	2800      	cmp	r0, #0
10053b08:	d403      	bmi.n	10053b12 <BLE_STACK_Init+0x5e>
10053b0a:	f7ff ff6d 	bl	100539e8 <_BlueNRG_Stack_Initialization>
10053b0e:	2400      	movs	r4, #0
10053b10:	e000      	b.n	10053b14 <BLE_STACK_Init+0x60>
10053b12:	2487      	movs	r4, #135	@ 0x87
10053b14:	4620      	mov	r0, r4
10053b16:	bdb0      	pop	{r4, r5, r7, pc}

10053b18 <__arm_cp.3_0>:
10053b18:	000003fa 	.word	0x000003fa

10053b1c <__arm_cp.3_1>:
10053b1c:	2000247c 	.word	0x2000247c

10053b20 <log_verbosity_set_ucfg_weak>:
10053b20:	2000      	movs	r0, #0
10053b22:	4770      	bx	lr

10053b24 <log_init_ucfg_weak>:
10053b24:	4770      	bx	lr

10053b26 <log_notify_stu_ucfg_weak>:
10053b26:	4770      	bx	lr

10053b28 <log_notify_us_flush_ucfg_weak>:
10053b28:	4770      	bx	lr

10053b2a <log_csr_ucfg_weak>:
10053b2a:	2000      	movs	r0, #0
10053b2c:	4770      	bx	lr
	...

10053b30 <aci_event_fifo_push_header>:
10053b30:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10053b32:	4615      	mov	r5, r2
10053b34:	460c      	mov	r4, r1
10053b36:	4606      	mov	r6, r0
10053b38:	0608      	lsls	r0, r1, #24
10053b3a:	d414      	bmi.n	10053b66 <aci_event_fifo_push_header+0x36>
10053b3c:	aa02      	add	r2, sp, #8
10053b3e:	af01      	add	r7, sp, #4
10053b40:	4630      	mov	r0, r6
10053b42:	4619      	mov	r1, r3
10053b44:	463b      	mov	r3, r7
10053b46:	f000 f853 	bl	10053bf0 <fifoBuf_getFreeHeader>
10053b4a:	2800      	cmp	r0, #0
10053b4c:	d021      	beq.n	10053b92 <aci_event_fifo_push_header+0x62>
10053b4e:	0660      	lsls	r0, r4, #25
10053b50:	d438      	bmi.n	10053bc4 <aci_event_fifo_push_header+0x94>
10053b52:	9802      	ldr	r0, [sp, #8]
10053b54:	7881      	ldrb	r1, [r0, #2]
10053b56:	22fc      	movs	r2, #252	@ 0xfc
10053b58:	400a      	ands	r2, r1
10053b5a:	7082      	strb	r2, [r0, #2]
10053b5c:	9901      	ldr	r1, [sp, #4]
10053b5e:	8001      	strh	r1, [r0, #0]
10053b60:	8071      	strh	r1, [r6, #2]
10053b62:	2701      	movs	r7, #1
10053b64:	e02f      	b.n	10053bc6 <aci_event_fifo_push_header+0x96>
10053b66:	f3ef 8010 	mrs	r0, PRIMASK
10053b6a:	b672      	cpsid	i
10053b6c:	aa02      	add	r2, sp, #8
10053b6e:	af01      	add	r7, sp, #4
10053b70:	4630      	mov	r0, r6
10053b72:	4619      	mov	r1, r3
10053b74:	463b      	mov	r3, r7
10053b76:	f000 f83b 	bl	10053bf0 <fifoBuf_getFreeHeader>
10053b7a:	2800      	cmp	r0, #0
10053b7c:	d00b      	beq.n	10053b96 <aci_event_fifo_push_header+0x66>
10053b7e:	9902      	ldr	r1, [sp, #8]
10053b80:	788a      	ldrb	r2, [r1, #2]
10053b82:	23fc      	movs	r3, #252	@ 0xfc
10053b84:	4013      	ands	r3, r2
10053b86:	708b      	strb	r3, [r1, #2]
10053b88:	9a01      	ldr	r2, [sp, #4]
10053b8a:	800a      	strh	r2, [r1, #0]
10053b8c:	8072      	strh	r2, [r6, #2]
10053b8e:	2701      	movs	r7, #1
10053b90:	e002      	b.n	10053b98 <aci_event_fifo_push_header+0x68>
10053b92:	2700      	movs	r7, #0
10053b94:	e003      	b.n	10053b9e <aci_event_fifo_push_header+0x6e>
10053b96:	2700      	movs	r7, #0
10053b98:	b662      	cpsie	i
10053b9a:	2800      	cmp	r0, #0
10053b9c:	d113      	bne.n	10053bc6 <aci_event_fifo_push_header+0x96>
10053b9e:	f3ef 8010 	mrs	r0, PRIMASK
10053ba2:	b672      	cpsid	i
10053ba4:	06a0      	lsls	r0, r4, #26
10053ba6:	d40a      	bmi.n	10053bbe <aci_event_fifo_push_header+0x8e>
10053ba8:	4810      	ldr	r0, [pc, #64]	@ (10053bec <__arm_cp.0_0>)
10053baa:	6800      	ldr	r0, [r0, #0]
10053bac:	6801      	ldr	r1, [r0, #0]
10053bae:	2208      	movs	r2, #8
10053bb0:	430a      	orrs	r2, r1
10053bb2:	6002      	str	r2, [r0, #0]
10053bb4:	2000      	movs	r0, #0
10053bb6:	f00d fb05 	bl	100611c4 <tsk_notify_idx>
10053bba:	f7fc fc86 	bl	100504ca <BLE_STACK_ProcessRequest>
10053bbe:	b662      	cpsie	i
10053bc0:	2600      	movs	r6, #0
10053bc2:	e00a      	b.n	10053bda <aci_event_fifo_push_header+0xaa>
10053bc4:	2700      	movs	r7, #0
10053bc6:	9e02      	ldr	r6, [sp, #8]
10053bc8:	70f5      	strb	r5, [r6, #3]
10053bca:	00a0      	lsls	r0, r4, #2
10053bcc:	2160      	movs	r1, #96	@ 0x60
10053bce:	4001      	ands	r1, r0
10053bd0:	78b0      	ldrb	r0, [r6, #2]
10053bd2:	2203      	movs	r2, #3
10053bd4:	4002      	ands	r2, r0
10053bd6:	1850      	adds	r0, r2, r1
10053bd8:	70b0      	strb	r0, [r6, #2]
10053bda:	2f00      	cmp	r7, #0
10053bdc:	d004      	beq.n	10053be8 <aci_event_fifo_push_header+0xb8>
10053bde:	2000      	movs	r0, #0
10053be0:	f00d faf0 	bl	100611c4 <tsk_notify_idx>
10053be4:	f7fc fc71 	bl	100504ca <BLE_STACK_ProcessRequest>
10053be8:	4630      	mov	r0, r6
10053bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053bec <__arm_cp.0_0>:
10053bec:	20002418 	.word	0x20002418

10053bf0 <fifoBuf_getFreeHeader>:
10053bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053bf2:	9200      	str	r2, [sp, #0]
10053bf4:	8845      	ldrh	r5, [r0, #2]
10053bf6:	08ac      	lsrs	r4, r5, #2
10053bf8:	801c      	strh	r4, [r3, #0]
10053bfa:	1c49      	adds	r1, r1, #1
10053bfc:	b28a      	uxth	r2, r1
10053bfe:	18a6      	adds	r6, r4, r2
10053c00:	8887      	ldrh	r7, [r0, #4]
10053c02:	42be      	cmp	r6, r7
10053c04:	d900      	bls.n	10053c08 <fifoBuf_getFreeHeader+0x18>
10053c06:	1b09      	subs	r1, r1, r4
10053c08:	190a      	adds	r2, r1, r4
10053c0a:	0092      	lsls	r2, r2, #2
10053c0c:	42be      	cmp	r6, r7
10053c0e:	d900      	bls.n	10053c12 <fifoBuf_getFreeHeader+0x22>
10053c10:	1c6d      	adds	r5, r5, #1
10053c12:	2603      	movs	r6, #3
10053c14:	4035      	ands	r5, r6
10053c16:	1952      	adds	r2, r2, r5
10053c18:	801a      	strh	r2, [r3, #0]
10053c1a:	00a3      	lsls	r3, r4, #2
10053c1c:	181b      	adds	r3, r3, r0
10053c1e:	3308      	adds	r3, #8
10053c20:	9c00      	ldr	r4, [sp, #0]
10053c22:	6023      	str	r3, [r4, #0]
10053c24:	b292      	uxth	r2, r2
10053c26:	8805      	ldrh	r5, [r0, #0]
10053c28:	1b52      	subs	r2, r2, r5
10053c2a:	4617      	mov	r7, r2
10053c2c:	4037      	ands	r7, r6
10053c2e:	8884      	ldrh	r4, [r0, #4]
10053c30:	4367      	muls	r7, r4
10053c32:	4035      	ands	r5, r6
10053c34:	1952      	adds	r2, r2, r5
10053c36:	0892      	lsrs	r2, r2, #2
10053c38:	19d2      	adds	r2, r2, r7
10053c3a:	b295      	uxth	r5, r2
10053c3c:	88c6      	ldrh	r6, [r0, #6]
10053c3e:	42b5      	cmp	r5, r6
10053c40:	d900      	bls.n	10053c44 <fifoBuf_getFreeHeader+0x54>
10053c42:	80c2      	strh	r2, [r0, #6]
10053c44:	42a5      	cmp	r5, r4
10053c46:	d80a      	bhi.n	10053c5e <fifoBuf_getFreeHeader+0x6e>
10053c48:	b209      	sxth	r1, r1
10053c4a:	2900      	cmp	r1, #0
10053c4c:	d507      	bpl.n	10053c5e <fifoBuf_getFreeHeader+0x6e>
10053c4e:	7899      	ldrb	r1, [r3, #2]
10053c50:	22fc      	movs	r2, #252	@ 0xfc
10053c52:	400a      	ands	r2, r1
10053c54:	1c51      	adds	r1, r2, #1
10053c56:	7099      	strb	r1, [r3, #2]
10053c58:	3008      	adds	r0, #8
10053c5a:	9900      	ldr	r1, [sp, #0]
10053c5c:	6008      	str	r0, [r1, #0]
10053c5e:	42a5      	cmp	r5, r4
10053c60:	d901      	bls.n	10053c66 <fifoBuf_getFreeHeader+0x76>
10053c62:	2000      	movs	r0, #0
10053c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053c66:	2001      	movs	r0, #1
10053c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053c6a <aci_event_fifo_push>:
10053c6a:	b580      	push	{r7, lr}
10053c6c:	0640      	lsls	r0, r0, #25
10053c6e:	d405      	bmi.n	10053c7c <aci_event_fifo_push+0x12>
10053c70:	7888      	ldrb	r0, [r1, #2]
10053c72:	22fc      	movs	r2, #252	@ 0xfc
10053c74:	4002      	ands	r2, r0
10053c76:	1c90      	adds	r0, r2, #2
10053c78:	7088      	strb	r0, [r1, #2]
10053c7a:	bd80      	pop	{r7, pc}
10053c7c:	4608      	mov	r0, r1
10053c7e:	f000 f801 	bl	10053c84 <event_notify_cb>
10053c82:	bd80      	pop	{r7, pc}

10053c84 <event_notify_cb>:
10053c84:	b580      	push	{r7, lr}
10053c86:	1d01      	adds	r1, r0, #4
10053c88:	78c2      	ldrb	r2, [r0, #3]
10053c8a:	2a14      	cmp	r2, #20
10053c8c:	d804      	bhi.n	10053c98 <event_notify_cb+0x14>
10053c8e:	6842      	ldr	r2, [r0, #4]
10053c90:	7880      	ldrb	r0, [r0, #2]
10053c92:	0880      	lsrs	r0, r0, #2
10053c94:	4790      	blx	r2
10053c96:	bd80      	pop	{r7, pc}
10053c98:	2a3d      	cmp	r2, #61	@ 0x3d
10053c9a:	d803      	bhi.n	10053ca4 <event_notify_cb+0x20>
10053c9c:	2000      	movs	r0, #0
10053c9e:	f000 f8e9 	bl	10053e74 <hci_event_notify_cb>
10053ca2:	bd80      	pop	{r7, pc}
10053ca4:	2a3f      	cmp	r2, #63	@ 0x3f
10053ca6:	d803      	bhi.n	10053cb0 <event_notify_cb+0x2c>
10053ca8:	2000      	movs	r0, #0
10053caa:	f000 f8f5 	bl	10053e98 <hci_rx_data_notify_cb>
10053cae:	bd80      	pop	{r7, pc}
10053cb0:	2a60      	cmp	r2, #96	@ 0x60
10053cb2:	d802      	bhi.n	10053cba <event_notify_cb+0x36>
10053cb4:	2000      	movs	r0, #0
10053cb6:	f000 f8e4 	bl	10053e82 <hci_aci_event_notify_cb>
10053cba:	bd80      	pop	{r7, pc}

10053cbc <Events_Process_init>:
10053cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053cbe:	2001      	movs	r0, #1
10053cc0:	211c      	movs	r1, #28
10053cc2:	4a29      	ldr	r2, [pc, #164]	@ (10053d68 <__arm_cp.7_0>)
10053cc4:	4790      	blx	r2
10053cc6:	4f29      	ldr	r7, [pc, #164]	@ (10053d6c <__arm_cp.7_1>)
10053cc8:	6038      	str	r0, [r7, #0]
10053cca:	4d29      	ldr	r5, [pc, #164]	@ (10053d70 <__arm_cp.7_2>)
10053ccc:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
10053cce:	1e40      	subs	r0, r0, #1
10053cd0:	2603      	movs	r6, #3
10053cd2:	4330      	orrs	r0, r6
10053cd4:	1c40      	adds	r0, r0, #1
10053cd6:	0880      	lsrs	r0, r0, #2
10053cd8:	1cc0      	adds	r0, r0, #3
10053cda:	2404      	movs	r4, #4
10053cdc:	4621      	mov	r1, r4
10053cde:	4a22      	ldr	r2, [pc, #136]	@ (10053d68 <__arm_cp.7_0>)
10053ce0:	4790      	blx	r2
10053ce2:	6839      	ldr	r1, [r7, #0]
10053ce4:	6048      	str	r0, [r1, #4]
10053ce6:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
10053ce8:	1e40      	subs	r0, r0, #1
10053cea:	4330      	orrs	r0, r6
10053cec:	1c40      	adds	r0, r0, #1
10053cee:	0880      	lsrs	r0, r0, #2
10053cf0:	1cc0      	adds	r0, r0, #3
10053cf2:	4621      	mov	r1, r4
10053cf4:	4d1c      	ldr	r5, [pc, #112]	@ (10053d68 <__arm_cp.7_0>)
10053cf6:	47a8      	blx	r5
10053cf8:	462a      	mov	r2, r5
10053cfa:	6839      	ldr	r1, [r7, #0]
10053cfc:	6088      	str	r0, [r1, #8]
10053cfe:	4d1c      	ldr	r5, [pc, #112]	@ (10053d70 <__arm_cp.7_2>)
10053d00:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
10053d02:	1e40      	subs	r0, r0, #1
10053d04:	4330      	orrs	r0, r6
10053d06:	1c40      	adds	r0, r0, #1
10053d08:	0880      	lsrs	r0, r0, #2
10053d0a:	1cc0      	adds	r0, r0, #3
10053d0c:	4621      	mov	r1, r4
10053d0e:	4790      	blx	r2
10053d10:	6839      	ldr	r1, [r7, #0]
10053d12:	60c8      	str	r0, [r1, #12]
10053d14:	f7ff fc18 	bl	10053548 <hal_radio_activity_state_init>
10053d18:	6838      	ldr	r0, [r7, #0]
10053d1a:	6842      	ldr	r2, [r0, #4]
10053d1c:	2100      	movs	r1, #0
10053d1e:	8011      	strh	r1, [r2, #0]
10053d20:	8051      	strh	r1, [r2, #2]
10053d22:	6883      	ldr	r3, [r0, #8]
10053d24:	8019      	strh	r1, [r3, #0]
10053d26:	80d1      	strh	r1, [r2, #6]
10053d28:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
10053d2a:	1e7f      	subs	r7, r7, #1
10053d2c:	4337      	orrs	r7, r6
10053d2e:	1c7f      	adds	r7, r7, #1
10053d30:	08bf      	lsrs	r7, r7, #2
10053d32:	8097      	strh	r7, [r2, #4]
10053d34:	8059      	strh	r1, [r3, #2]
10053d36:	80d9      	strh	r1, [r3, #6]
10053d38:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
10053d3a:	1e7f      	subs	r7, r7, #1
10053d3c:	4337      	orrs	r7, r6
10053d3e:	1c7f      	adds	r7, r7, #1
10053d40:	08bf      	lsrs	r7, r7, #2
10053d42:	809f      	strh	r7, [r3, #4]
10053d44:	68c7      	ldr	r7, [r0, #12]
10053d46:	8039      	strh	r1, [r7, #0]
10053d48:	6102      	str	r2, [r0, #16]
10053d4a:	6143      	str	r3, [r0, #20]
10053d4c:	80f9      	strh	r1, [r7, #6]
10053d4e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10053d50:	1e52      	subs	r2, r2, #1
10053d52:	4332      	orrs	r2, r6
10053d54:	1c52      	adds	r2, r2, #1
10053d56:	0892      	lsrs	r2, r2, #2
10053d58:	80ba      	strh	r2, [r7, #4]
10053d5a:	8079      	strh	r1, [r7, #2]
10053d5c:	6187      	str	r7, [r0, #24]
10053d5e:	4622      	mov	r2, r4
10053d60:	f7fd f9aa 	bl	100510b8 <BLEPLAT_MemSet>
10053d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053d66:	46c0      	nop			@ (mov r8, r8)

10053d68 <__arm_cp.7_0>:
10053d68:	1005f619 	.word	0x1005f619

10053d6c <__arm_cp.7_1>:
10053d6c:	20002418 	.word	0x20002418

10053d70 <__arm_cp.7_2>:
10053d70:	2000247c 	.word	0x2000247c

10053d74 <Events_Process_Q>:
10053d74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10053d76:	4d3d      	ldr	r5, [pc, #244]	@ (10053e6c <__arm_cp.8_0>)
10053d78:	6828      	ldr	r0, [r5, #0]
10053d7a:	3010      	adds	r0, #16
10053d7c:	2100      	movs	r1, #0
10053d7e:	2906      	cmp	r1, #6
10053d80:	d005      	beq.n	10053d8e <Events_Process_Q+0x1a>
10053d82:	c804      	ldmia	r0!, {r2}
10053d84:	8852      	ldrh	r2, [r2, #2]
10053d86:	ab01      	add	r3, sp, #4
10053d88:	525a      	strh	r2, [r3, r1]
10053d8a:	1c89      	adds	r1, r1, #2
10053d8c:	e7f7      	b.n	10053d7e <Events_Process_Q+0xa>
10053d8e:	f3ef 8010 	mrs	r0, PRIMASK
10053d92:	b672      	cpsid	i
10053d94:	6828      	ldr	r0, [r5, #0]
10053d96:	6804      	ldr	r4, [r0, #0]
10053d98:	2700      	movs	r7, #0
10053d9a:	6007      	str	r7, [r0, #0]
10053d9c:	b662      	cpsie	i
10053d9e:	07e0      	lsls	r0, r4, #31
10053da0:	d002      	beq.n	10053da8 <Events_Process_Q+0x34>
10053da2:	2000      	movs	r0, #0
10053da4:	f000 fc4a 	bl	1005463c <hci_hardware_error_event_cb>
10053da8:	07a0      	lsls	r0, r4, #30
10053daa:	d502      	bpl.n	10053db2 <Events_Process_Q+0x3e>
10053dac:	2001      	movs	r0, #1
10053dae:	f000 fc45 	bl	1005463c <hci_hardware_error_event_cb>
10053db2:	0760      	lsls	r0, r4, #29
10053db4:	d502      	bpl.n	10053dbc <Events_Process_Q+0x48>
10053db6:	2002      	movs	r0, #2
10053db8:	f000 fc40 	bl	1005463c <hci_hardware_error_event_cb>
10053dbc:	0720      	lsls	r0, r4, #28
10053dbe:	d502      	bpl.n	10053dc6 <Events_Process_Q+0x52>
10053dc0:	2003      	movs	r0, #3
10053dc2:	f000 fc3b 	bl	1005463c <hci_hardware_error_event_cb>
10053dc6:	06e0      	lsls	r0, r4, #27
10053dc8:	d54a      	bpl.n	10053e60 <Events_Process_Q+0xec>
10053dca:	2004      	movs	r0, #4
10053dcc:	f000 fc36 	bl	1005463c <hci_hardware_error_event_cb>
10053dd0:	e046      	b.n	10053e60 <Events_Process_Q+0xec>
10053dd2:	0078      	lsls	r0, r7, #1
10053dd4:	a901      	add	r1, sp, #4
10053dd6:	5a0e      	ldrh	r6, [r1, r0]
10053dd8:	9700      	str	r7, [sp, #0]
10053dda:	00bf      	lsls	r7, r7, #2
10053ddc:	6828      	ldr	r0, [r5, #0]
10053dde:	19c0      	adds	r0, r0, r7
10053de0:	6900      	ldr	r0, [r0, #16]
10053de2:	8801      	ldrh	r1, [r0, #0]
10053de4:	8802      	ldrh	r2, [r0, #0]
10053de6:	42b2      	cmp	r2, r6
10053de8:	d02a      	beq.n	10053e40 <Events_Process_Q+0xcc>
10053dea:	0889      	lsrs	r1, r1, #2
10053dec:	1c89      	adds	r1, r1, #2
10053dee:	0089      	lsls	r1, r1, #2
10053df0:	1844      	adds	r4, r0, r1
10053df2:	78a1      	ldrb	r1, [r4, #2]
10053df4:	2203      	movs	r2, #3
10053df6:	400a      	ands	r2, r1
10053df8:	2a01      	cmp	r2, #1
10053dfa:	d002      	beq.n	10053e02 <Events_Process_Q+0x8e>
10053dfc:	2a00      	cmp	r2, #0
10053dfe:	d103      	bne.n	10053e08 <Events_Process_Q+0x94>
10053e00:	e01e      	b.n	10053e40 <Events_Process_Q+0xcc>
10053e02:	7a81      	ldrb	r1, [r0, #10]
10053e04:	3008      	adds	r0, #8
10053e06:	4604      	mov	r4, r0
10053e08:	0648      	lsls	r0, r1, #25
10053e0a:	d403      	bmi.n	10053e14 <Events_Process_Q+0xa0>
10053e0c:	4620      	mov	r0, r4
10053e0e:	f7ff ff39 	bl	10053c84 <event_notify_cb>
10053e12:	e00a      	b.n	10053e2a <Events_Process_Q+0xb6>
10053e14:	78e0      	ldrb	r0, [r4, #3]
10053e16:	2813      	cmp	r0, #19
10053e18:	d207      	bcs.n	10053e2a <Events_Process_Q+0xb6>
10053e1a:	0080      	lsls	r0, r0, #2
10053e1c:	4914      	ldr	r1, [pc, #80]	@ (10053e70 <__arm_cp.8_1>)
10053e1e:	580a      	ldr	r2, [r1, r0]
10053e20:	1d21      	adds	r1, r4, #4
10053e22:	4620      	mov	r0, r4
10053e24:	4790      	blx	r2
10053e26:	2800      	cmp	r0, #0
10053e28:	d105      	bne.n	10053e36 <Events_Process_Q+0xc2>
10053e2a:	6828      	ldr	r0, [r5, #0]
10053e2c:	19c0      	adds	r0, r0, r7
10053e2e:	6900      	ldr	r0, [r0, #16]
10053e30:	8821      	ldrh	r1, [r4, #0]
10053e32:	8001      	strh	r1, [r0, #0]
10053e34:	e7d5      	b.n	10053de2 <Events_Process_Q+0x6e>
10053e36:	2000      	movs	r0, #0
10053e38:	f00d f9c4 	bl	100611c4 <tsk_notify_idx>
10053e3c:	f7fc fb45 	bl	100504ca <BLE_STACK_ProcessRequest>
10053e40:	f3ef 8010 	mrs	r0, PRIMASK
10053e44:	b672      	cpsid	i
10053e46:	6828      	ldr	r0, [r5, #0]
10053e48:	19c0      	adds	r0, r0, r7
10053e4a:	6900      	ldr	r0, [r0, #16]
10053e4c:	8841      	ldrh	r1, [r0, #2]
10053e4e:	8802      	ldrh	r2, [r0, #0]
10053e50:	4291      	cmp	r1, r2
10053e52:	d102      	bne.n	10053e5a <Events_Process_Q+0xe6>
10053e54:	2100      	movs	r1, #0
10053e56:	8001      	strh	r1, [r0, #0]
10053e58:	8041      	strh	r1, [r0, #2]
10053e5a:	b662      	cpsie	i
10053e5c:	9f00      	ldr	r7, [sp, #0]
10053e5e:	1c7f      	adds	r7, r7, #1
10053e60:	2f03      	cmp	r7, #3
10053e62:	d1b6      	bne.n	10053dd2 <Events_Process_Q+0x5e>
10053e64:	f7ff fb7a 	bl	1005355c <hal_radio_activity_state_cb_check>
10053e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10053e6a:	46c0      	nop			@ (mov r8, r8)

10053e6c <__arm_cp.8_0>:
10053e6c:	20002418 	.word	0x20002418

10053e70 <__arm_cp.8_1>:
10053e70:	10068058 	.word	0x10068058

10053e74 <hci_event_notify_cb>:
10053e74:	b580      	push	{r7, lr}
10053e76:	4608      	mov	r0, r1
10053e78:	7889      	ldrb	r1, [r1, #2]
10053e7a:	1cc9      	adds	r1, r1, #3
10053e7c:	f7f9 fada 	bl	1004d434 <BLE_STACK_Event>
10053e80:	bd80      	pop	{r7, pc}

10053e82 <hci_aci_event_notify_cb>:
10053e82:	b580      	push	{r7, lr}
10053e84:	4608      	mov	r0, r1
10053e86:	7889      	ldrb	r1, [r1, #2]
10053e88:	78c2      	ldrb	r2, [r0, #3]
10053e8a:	0212      	lsls	r2, r2, #8
10053e8c:	1851      	adds	r1, r2, r1
10053e8e:	1d09      	adds	r1, r1, #4
10053e90:	b289      	uxth	r1, r1
10053e92:	f7f9 facf 	bl	1004d434 <BLE_STACK_Event>
10053e96:	bd80      	pop	{r7, pc}

10053e98 <hci_rx_data_notify_cb>:
10053e98:	b580      	push	{r7, lr}
10053e9a:	4608      	mov	r0, r1
10053e9c:	78c9      	ldrb	r1, [r1, #3]
10053e9e:	7902      	ldrb	r2, [r0, #4]
10053ea0:	0212      	lsls	r2, r2, #8
10053ea2:	1851      	adds	r1, r2, r1
10053ea4:	1d49      	adds	r1, r1, #5
10053ea6:	b289      	uxth	r1, r1
10053ea8:	f7f9 fac4 	bl	1004d434 <BLE_STACK_Event>
10053eac:	bd80      	pop	{r7, pc}
	...

10053eb0 <hci_disconnection_complete_event_int_cb>:
10053eb0:	b5b0      	push	{r4, r5, r7, lr}
10053eb2:	460d      	mov	r5, r1
10053eb4:	4604      	mov	r4, r0
10053eb6:	7908      	ldrb	r0, [r1, #4]
10053eb8:	7949      	ldrb	r1, [r1, #5]
10053eba:	0209      	lsls	r1, r1, #8
10053ebc:	1808      	adds	r0, r1, r0
10053ebe:	f001 fb3f 	bl	10055540 <GAT_att_cmn_disconnection>
10053ec2:	7928      	ldrb	r0, [r5, #4]
10053ec4:	7969      	ldrb	r1, [r5, #5]
10053ec6:	0209      	lsls	r1, r1, #8
10053ec8:	1808      	adds	r0, r1, r0
10053eca:	f00c feff 	bl	10060ccc <smp_sap_hci_disconnection_complete_evt_hndl>
10053ece:	7928      	ldrb	r0, [r5, #4]
10053ed0:	7969      	ldrb	r1, [r5, #5]
10053ed2:	0209      	lsls	r1, r1, #8
10053ed4:	1808      	adds	r0, r1, r0
10053ed6:	f004 fd1b 	bl	10058910 <l2c_sap_hci_disconnection_complete_evt_hndl>
10053eda:	f000 feba 	bl	10054c52 <GAP_hci_disconnection_complete_evt_hndl>
10053ede:	7928      	ldrb	r0, [r5, #4]
10053ee0:	7969      	ldrb	r1, [r5, #5]
10053ee2:	0209      	lsls	r1, r1, #8
10053ee4:	1808      	adds	r0, r1, r0
10053ee6:	f7ff fcdf 	bl	100538a8 <ACL_pkt_disconnection>
10053eea:	4808      	ldr	r0, [pc, #32]	@ (10053f0c <__arm_cp.14_0>)
10053eec:	6800      	ldr	r0, [r0, #0]
10053eee:	2136      	movs	r1, #54	@ 0x36
10053ef0:	5c40      	ldrb	r0, [r0, r1]
10053ef2:	06c0      	lsls	r0, r0, #27
10053ef4:	d401      	bmi.n	10053efa <hci_disconnection_complete_event_int_cb+0x4a>
10053ef6:	2000      	movs	r0, #0
10053ef8:	bdb0      	pop	{r4, r5, r7, pc}
10053efa:	2015      	movs	r0, #21
10053efc:	70e0      	strb	r0, [r4, #3]
10053efe:	78a0      	ldrb	r0, [r4, #2]
10053f00:	21bf      	movs	r1, #191	@ 0xbf
10053f02:	4001      	ands	r1, r0
10053f04:	70a1      	strb	r1, [r4, #2]
10053f06:	2084      	movs	r0, #132	@ 0x84
10053f08:	bdb0      	pop	{r4, r5, r7, pc}
10053f0a:	46c0      	nop			@ (mov r8, r8)

10053f0c <__arm_cp.14_0>:
10053f0c:	20002468 	.word	0x20002468

10053f10 <hci_encryption_change_event_int_cb>:
10053f10:	b510      	push	{r4, lr}
10053f12:	4604      	mov	r4, r0
10053f14:	7908      	ldrb	r0, [r1, #4]
10053f16:	794a      	ldrb	r2, [r1, #5]
10053f18:	0212      	lsls	r2, r2, #8
10053f1a:	1812      	adds	r2, r2, r0
10053f1c:	78c9      	ldrb	r1, [r1, #3]
10053f1e:	2006      	movs	r0, #6
10053f20:	f00c fe5a 	bl	10060bd8 <smp_sap_hci_encryption_change_evt_hndl>
10053f24:	4807      	ldr	r0, [pc, #28]	@ (10053f44 <__arm_cp.16_0>)
10053f26:	6800      	ldr	r0, [r0, #0]
10053f28:	2136      	movs	r1, #54	@ 0x36
10053f2a:	5640      	ldrsb	r0, [r0, r1]
10053f2c:	2800      	cmp	r0, #0
10053f2e:	d401      	bmi.n	10053f34 <hci_encryption_change_event_int_cb+0x24>
10053f30:	2000      	movs	r0, #0
10053f32:	bd10      	pop	{r4, pc}
10053f34:	2016      	movs	r0, #22
10053f36:	70e0      	strb	r0, [r4, #3]
10053f38:	78a0      	ldrb	r0, [r4, #2]
10053f3a:	21bf      	movs	r1, #191	@ 0xbf
10053f3c:	4001      	ands	r1, r0
10053f3e:	70a1      	strb	r1, [r4, #2]
10053f40:	2084      	movs	r0, #132	@ 0x84
10053f42:	bd10      	pop	{r4, pc}

10053f44 <__arm_cp.16_0>:
10053f44:	20002468 	.word	0x20002468

10053f48 <hci_encryption_key_refresh_complete_event_int_cb>:
10053f48:	b510      	push	{r4, lr}
10053f4a:	4604      	mov	r4, r0
10053f4c:	7908      	ldrb	r0, [r1, #4]
10053f4e:	794a      	ldrb	r2, [r1, #5]
10053f50:	0212      	lsls	r2, r2, #8
10053f52:	1812      	adds	r2, r2, r0
10053f54:	78c9      	ldrb	r1, [r1, #3]
10053f56:	2007      	movs	r0, #7
10053f58:	f00c fe3e 	bl	10060bd8 <smp_sap_hci_encryption_change_evt_hndl>
10053f5c:	4807      	ldr	r0, [pc, #28]	@ (10053f7c <__arm_cp.18_0>)
10053f5e:	6800      	ldr	r0, [r0, #0]
10053f60:	213b      	movs	r1, #59	@ 0x3b
10053f62:	5640      	ldrsb	r0, [r0, r1]
10053f64:	2800      	cmp	r0, #0
10053f66:	d401      	bmi.n	10053f6c <hci_encryption_key_refresh_complete_event_int_cb+0x24>
10053f68:	2000      	movs	r0, #0
10053f6a:	bd10      	pop	{r4, pc}
10053f6c:	2017      	movs	r0, #23
10053f6e:	70e0      	strb	r0, [r4, #3]
10053f70:	78a0      	ldrb	r0, [r4, #2]
10053f72:	21bf      	movs	r1, #191	@ 0xbf
10053f74:	4001      	ands	r1, r0
10053f76:	70a1      	strb	r1, [r4, #2]
10053f78:	2084      	movs	r0, #132	@ 0x84
10053f7a:	bd10      	pop	{r4, pc}

10053f7c <__arm_cp.18_0>:
10053f7c:	20002468 	.word	0x20002468

10053f80 <hci_le_connection_complete_event_int_cb>:
10053f80:	b5b0      	push	{r4, r5, r7, lr}
10053f82:	460d      	mov	r5, r1
10053f84:	4604      	mov	r4, r0
10053f86:	7908      	ldrb	r0, [r1, #4]
10053f88:	2800      	cmp	r0, #0
10053f8a:	d11d      	bne.n	10053fc8 <hci_le_connection_complete_event_int_cb+0x48>
10053f8c:	7968      	ldrb	r0, [r5, #5]
10053f8e:	79a9      	ldrb	r1, [r5, #6]
10053f90:	0209      	lsls	r1, r1, #8
10053f92:	1808      	adds	r0, r1, r0
10053f94:	f7ff fc64 	bl	10053860 <ACL_pkt_connection>
10053f98:	7968      	ldrb	r0, [r5, #5]
10053f9a:	79a9      	ldrb	r1, [r5, #6]
10053f9c:	0209      	lsls	r1, r1, #8
10053f9e:	1808      	adds	r0, r1, r0
10053fa0:	7a2a      	ldrb	r2, [r5, #8]
10053fa2:	79e9      	ldrb	r1, [r5, #7]
10053fa4:	462b      	mov	r3, r5
10053fa6:	3309      	adds	r3, #9
10053fa8:	f00c fcd4 	bl	10060954 <smp_sap_hci_le_connection_complete_evt_hndl>
10053fac:	7968      	ldrb	r0, [r5, #5]
10053fae:	79a9      	ldrb	r1, [r5, #6]
10053fb0:	0209      	lsls	r1, r1, #8
10053fb2:	1808      	adds	r0, r1, r0
10053fb4:	f001 faa4 	bl	10055500 <GAT_att_cmn_connection>
10053fb8:	7968      	ldrb	r0, [r5, #5]
10053fba:	79a9      	ldrb	r1, [r5, #6]
10053fbc:	0209      	lsls	r1, r1, #8
10053fbe:	1808      	adds	r0, r1, r0
10053fc0:	79e9      	ldrb	r1, [r5, #7]
10053fc2:	f004 fc95 	bl	100588f0 <l2c_sap_hci_le_connection_complete_evt_hndl>
10053fc6:	7928      	ldrb	r0, [r5, #4]
10053fc8:	7969      	ldrb	r1, [r5, #5]
10053fca:	79aa      	ldrb	r2, [r5, #6]
10053fcc:	0212      	lsls	r2, r2, #8
10053fce:	1851      	adds	r1, r2, r1
10053fd0:	79ea      	ldrb	r2, [r5, #7]
10053fd2:	f000 fe3f 	bl	10054c54 <GAP_hci_le_connection_complete_evt_hndl>
10053fd6:	4809      	ldr	r0, [pc, #36]	@ (10053ffc <__arm_cp.20_0>)
10053fd8:	6801      	ldr	r1, [r0, #0]
10053fda:	203d      	movs	r0, #61	@ 0x3d
10053fdc:	5c0a      	ldrb	r2, [r1, r0]
10053fde:	2000      	movs	r0, #0
10053fe0:	0692      	lsls	r2, r2, #26
10053fe2:	d50a      	bpl.n	10053ffa <hci_le_connection_complete_event_int_cb+0x7a>
10053fe4:	313d      	adds	r1, #61	@ 0x3d
10053fe6:	7a49      	ldrb	r1, [r1, #9]
10053fe8:	07c9      	lsls	r1, r1, #31
10053fea:	d006      	beq.n	10053ffa <hci_le_connection_complete_event_int_cb+0x7a>
10053fec:	2018      	movs	r0, #24
10053fee:	70e0      	strb	r0, [r4, #3]
10053ff0:	78a0      	ldrb	r0, [r4, #2]
10053ff2:	21bf      	movs	r1, #191	@ 0xbf
10053ff4:	4001      	ands	r1, r0
10053ff6:	70a1      	strb	r1, [r4, #2]
10053ff8:	2084      	movs	r0, #132	@ 0x84
10053ffa:	bdb0      	pop	{r4, r5, r7, pc}

10053ffc <__arm_cp.20_0>:
10053ffc:	20002468 	.word	0x20002468

10054000 <hci_le_enhanced_connection_complete_event_int_cb>:
10054000:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10054002:	460d      	mov	r5, r1
10054004:	4604      	mov	r4, r0
10054006:	7908      	ldrb	r0, [r1, #4]
10054008:	2800      	cmp	r0, #0
1005400a:	d123      	bne.n	10054054 <hci_le_enhanced_connection_complete_event_int_cb+0x54>
1005400c:	7968      	ldrb	r0, [r5, #5]
1005400e:	79a9      	ldrb	r1, [r5, #6]
10054010:	0209      	lsls	r1, r1, #8
10054012:	1808      	adds	r0, r1, r0
10054014:	f7ff fc24 	bl	10053860 <ACL_pkt_connection>
10054018:	7a2a      	ldrb	r2, [r5, #8]
1005401a:	79e9      	ldrb	r1, [r5, #7]
1005401c:	7968      	ldrb	r0, [r5, #5]
1005401e:	79ab      	ldrb	r3, [r5, #6]
10054020:	462e      	mov	r6, r5
10054022:	3615      	adds	r6, #21
10054024:	462f      	mov	r7, r5
10054026:	370f      	adds	r7, #15
10054028:	9700      	str	r7, [sp, #0]
1005402a:	9601      	str	r6, [sp, #4]
1005402c:	021b      	lsls	r3, r3, #8
1005402e:	1818      	adds	r0, r3, r0
10054030:	462b      	mov	r3, r5
10054032:	3309      	adds	r3, #9
10054034:	f00c fd28 	bl	10060a88 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
10054038:	7968      	ldrb	r0, [r5, #5]
1005403a:	79a9      	ldrb	r1, [r5, #6]
1005403c:	0209      	lsls	r1, r1, #8
1005403e:	1808      	adds	r0, r1, r0
10054040:	f001 fa5e 	bl	10055500 <GAT_att_cmn_connection>
10054044:	7968      	ldrb	r0, [r5, #5]
10054046:	79a9      	ldrb	r1, [r5, #6]
10054048:	0209      	lsls	r1, r1, #8
1005404a:	1808      	adds	r0, r1, r0
1005404c:	79e9      	ldrb	r1, [r5, #7]
1005404e:	f004 fc4f 	bl	100588f0 <l2c_sap_hci_le_connection_complete_evt_hndl>
10054052:	7928      	ldrb	r0, [r5, #4]
10054054:	7969      	ldrb	r1, [r5, #5]
10054056:	79aa      	ldrb	r2, [r5, #6]
10054058:	0212      	lsls	r2, r2, #8
1005405a:	1851      	adds	r1, r2, r1
1005405c:	79ea      	ldrb	r2, [r5, #7]
1005405e:	f000 fdf9 	bl	10054c54 <GAP_hci_le_connection_complete_evt_hndl>
10054062:	4809      	ldr	r0, [pc, #36]	@ (10054088 <__arm_cp.22_0>)
10054064:	6801      	ldr	r1, [r0, #0]
10054066:	203d      	movs	r0, #61	@ 0x3d
10054068:	5c0a      	ldrb	r2, [r1, r0]
1005406a:	2000      	movs	r0, #0
1005406c:	0692      	lsls	r2, r2, #26
1005406e:	d50a      	bpl.n	10054086 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10054070:	313d      	adds	r1, #61	@ 0x3d
10054072:	7a89      	ldrb	r1, [r1, #10]
10054074:	0789      	lsls	r1, r1, #30
10054076:	d506      	bpl.n	10054086 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10054078:	201c      	movs	r0, #28
1005407a:	70e0      	strb	r0, [r4, #3]
1005407c:	78a0      	ldrb	r0, [r4, #2]
1005407e:	21bf      	movs	r1, #191	@ 0xbf
10054080:	4001      	ands	r1, r0
10054082:	70a1      	strb	r1, [r4, #2]
10054084:	2084      	movs	r0, #132	@ 0x84
10054086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10054088 <__arm_cp.22_0>:
10054088:	20002468 	.word	0x20002468

1005408c <hci_le_long_term_key_request_event_int_cb>:
1005408c:	b570      	push	{r4, r5, r6, lr}
1005408e:	4604      	mov	r4, r0
10054090:	4d14      	ldr	r5, [pc, #80]	@ (100540e4 <__arm_cp.24_0>)
10054092:	6828      	ldr	r0, [r5, #0]
10054094:	2636      	movs	r6, #54	@ 0x36
10054096:	5d80      	ldrb	r0, [r0, r6]
10054098:	2800      	cmp	r0, #0
1005409a:	d10e      	bne.n	100540ba <hci_le_long_term_key_request_event_int_cb+0x2e>
1005409c:	7908      	ldrb	r0, [r1, #4]
1005409e:	794a      	ldrb	r2, [r1, #5]
100540a0:	0212      	lsls	r2, r2, #8
100540a2:	1810      	adds	r0, r2, r0
100540a4:	7b8a      	ldrb	r2, [r1, #14]
100540a6:	7bcb      	ldrb	r3, [r1, #15]
100540a8:	021b      	lsls	r3, r3, #8
100540aa:	189a      	adds	r2, r3, r2
100540ac:	1d89      	adds	r1, r1, #6
100540ae:	f00c fd13 	bl	10060ad8 <smp_sap_hci_le_long_term_key_request_evt_hndl>
100540b2:	6828      	ldr	r0, [r5, #0]
100540b4:	5d80      	ldrb	r0, [r0, r6]
100540b6:	2800      	cmp	r0, #0
100540b8:	d012      	beq.n	100540e0 <hci_le_long_term_key_request_event_int_cb+0x54>
100540ba:	480b      	ldr	r0, [pc, #44]	@ (100540e8 <__arm_cp.24_1>)
100540bc:	6801      	ldr	r1, [r0, #0]
100540be:	203d      	movs	r0, #61	@ 0x3d
100540c0:	5c0a      	ldrb	r2, [r1, r0]
100540c2:	2000      	movs	r0, #0
100540c4:	0692      	lsls	r2, r2, #26
100540c6:	d50a      	bpl.n	100540de <hci_le_long_term_key_request_event_int_cb+0x52>
100540c8:	313d      	adds	r1, #61	@ 0x3d
100540ca:	7a49      	ldrb	r1, [r1, #9]
100540cc:	06c9      	lsls	r1, r1, #27
100540ce:	d506      	bpl.n	100540de <hci_le_long_term_key_request_event_int_cb+0x52>
100540d0:	2019      	movs	r0, #25
100540d2:	70e0      	strb	r0, [r4, #3]
100540d4:	78a0      	ldrb	r0, [r4, #2]
100540d6:	21bf      	movs	r1, #191	@ 0xbf
100540d8:	4001      	ands	r1, r0
100540da:	70a1      	strb	r1, [r4, #2]
100540dc:	2084      	movs	r0, #132	@ 0x84
100540de:	bd70      	pop	{r4, r5, r6, pc}
100540e0:	2000      	movs	r0, #0
100540e2:	bd70      	pop	{r4, r5, r6, pc}

100540e4 <__arm_cp.24_0>:
100540e4:	20002414 	.word	0x20002414

100540e8 <__arm_cp.24_1>:
100540e8:	20002468 	.word	0x20002468

100540ec <hci_le_read_local_p256_public_key_complete_event_int_cb>:
100540ec:	b510      	push	{r4, lr}
100540ee:	4604      	mov	r4, r0
100540f0:	7908      	ldrb	r0, [r1, #4]
100540f2:	1d49      	adds	r1, r1, #5
100540f4:	f00c fe2b 	bl	10060d4e <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>
100540f8:	480a      	ldr	r0, [pc, #40]	@ (10054124 <__arm_cp.26_0>)
100540fa:	6801      	ldr	r1, [r0, #0]
100540fc:	203d      	movs	r0, #61	@ 0x3d
100540fe:	5c0a      	ldrb	r2, [r1, r0]
10054100:	2000      	movs	r0, #0
10054102:	0692      	lsls	r2, r2, #26
10054104:	d504      	bpl.n	10054110 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
10054106:	313d      	adds	r1, #61	@ 0x3d
10054108:	2209      	movs	r2, #9
1005410a:	5689      	ldrsb	r1, [r1, r2]
1005410c:	2900      	cmp	r1, #0
1005410e:	d400      	bmi.n	10054112 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
10054110:	bd10      	pop	{r4, pc}
10054112:	201a      	movs	r0, #26
10054114:	70e0      	strb	r0, [r4, #3]
10054116:	78a0      	ldrb	r0, [r4, #2]
10054118:	21bf      	movs	r1, #191	@ 0xbf
1005411a:	4001      	ands	r1, r0
1005411c:	70a1      	strb	r1, [r4, #2]
1005411e:	2084      	movs	r0, #132	@ 0x84
10054120:	bd10      	pop	{r4, pc}
10054122:	46c0      	nop			@ (mov r8, r8)

10054124 <__arm_cp.26_0>:
10054124:	20002468 	.word	0x20002468

10054128 <hci_le_generate_dhkey_complete_event_int_cb>:
10054128:	b510      	push	{r4, lr}
1005412a:	4604      	mov	r4, r0
1005412c:	7908      	ldrb	r0, [r1, #4]
1005412e:	1d49      	adds	r1, r1, #5
10054130:	f00c fe0e 	bl	10060d50 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>
10054134:	4809      	ldr	r0, [pc, #36]	@ (1005415c <__arm_cp.28_0>)
10054136:	6801      	ldr	r1, [r0, #0]
10054138:	203d      	movs	r0, #61	@ 0x3d
1005413a:	5c0a      	ldrb	r2, [r1, r0]
1005413c:	2000      	movs	r0, #0
1005413e:	0692      	lsls	r2, r2, #26
10054140:	d50a      	bpl.n	10054158 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10054142:	313d      	adds	r1, #61	@ 0x3d
10054144:	7a89      	ldrb	r1, [r1, #10]
10054146:	07c9      	lsls	r1, r1, #31
10054148:	d006      	beq.n	10054158 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
1005414a:	201b      	movs	r0, #27
1005414c:	70e0      	strb	r0, [r4, #3]
1005414e:	78a0      	ldrb	r0, [r4, #2]
10054150:	21bf      	movs	r1, #191	@ 0xbf
10054152:	4001      	ands	r1, r0
10054154:	70a1      	strb	r1, [r4, #2]
10054156:	2084      	movs	r0, #132	@ 0x84
10054158:	bd10      	pop	{r4, pc}
1005415a:	46c0      	nop			@ (mov r8, r8)

1005415c <__arm_cp.28_0>:
1005415c:	20002468 	.word	0x20002468

10054160 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
10054160:	2000      	movs	r0, #0
10054162:	4770      	bx	lr

10054164 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10054164:	2000      	movs	r0, #0
10054166:	4770      	bx	lr

10054168 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10054168:	2000      	movs	r0, #0
1005416a:	4770      	bx	lr

1005416c <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
1005416c:	2000      	movs	r0, #0
1005416e:	4770      	bx	lr

10054170 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
10054170:	2000      	movs	r0, #0
10054172:	4770      	bx	lr

10054174 <hci_read_remote_version_information_complete_event_copy>:
10054174:	7101      	strb	r1, [r0, #4]
10054176:	2300      	movs	r3, #0
10054178:	70c3      	strb	r3, [r0, #3]
1005417a:	0a09      	lsrs	r1, r1, #8
1005417c:	7141      	strb	r1, [r0, #5]
1005417e:	7811      	ldrb	r1, [r2, #0]
10054180:	7181      	strb	r1, [r0, #6]
10054182:	7851      	ldrb	r1, [r2, #1]
10054184:	7893      	ldrb	r3, [r2, #2]
10054186:	7203      	strb	r3, [r0, #8]
10054188:	71c1      	strb	r1, [r0, #7]
1005418a:	78d1      	ldrb	r1, [r2, #3]
1005418c:	7912      	ldrb	r2, [r2, #4]
1005418e:	7282      	strb	r2, [r0, #10]
10054190:	7241      	strb	r1, [r0, #9]
10054192:	4770      	bx	lr

10054194 <hci_number_of_completed_packets_event_copy>:
10054194:	2200      	movs	r2, #0
10054196:	7102      	strb	r2, [r0, #4]
10054198:	2201      	movs	r2, #1
1005419a:	70c2      	strb	r2, [r0, #3]
1005419c:	7041      	strb	r1, [r0, #1]
1005419e:	7002      	strb	r2, [r0, #0]
100541a0:	0a09      	lsrs	r1, r1, #8
100541a2:	7081      	strb	r1, [r0, #2]
100541a4:	4770      	bx	lr

100541a6 <aci_gap_proc_complete_event_copy>:
100541a6:	b510      	push	{r4, lr}
100541a8:	7813      	ldrb	r3, [r2, #0]
100541aa:	7183      	strb	r3, [r0, #6]
100541ac:	7853      	ldrb	r3, [r2, #1]
100541ae:	1e8c      	subs	r4, r1, #2
100541b0:	7204      	strb	r4, [r0, #8]
100541b2:	71c3      	strb	r3, [r0, #7]
100541b4:	3009      	adds	r0, #9
100541b6:	1c91      	adds	r1, r2, #2
100541b8:	b2e2      	uxtb	r2, r4
100541ba:	f7fc ff6d 	bl	10051098 <BLEPLAT_MemCpy>
100541be:	bd10      	pop	{r4, pc}

100541c0 <aci_l2cap_connection_update_req_event_copy>:
100541c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100541c2:	b085      	sub	sp, #20
100541c4:	4617      	mov	r7, r2
100541c6:	9103      	str	r1, [sp, #12]
100541c8:	4604      	mov	r4, r0
100541ca:	6850      	ldr	r0, [r2, #4]
100541cc:	7a40      	ldrb	r0, [r0, #9]
100541ce:	9004      	str	r0, [sp, #16]
100541d0:	2106      	movs	r1, #6
100541d2:	4d16      	ldr	r5, [pc, #88]	@ (1005422c <__arm_cp.42_0>)
100541d4:	4610      	mov	r0, r2
100541d6:	47a8      	blx	r5
100541d8:	9002      	str	r0, [sp, #8]
100541da:	2108      	movs	r1, #8
100541dc:	4638      	mov	r0, r7
100541de:	47a8      	blx	r5
100541e0:	9001      	str	r0, [sp, #4]
100541e2:	210a      	movs	r1, #10
100541e4:	4638      	mov	r0, r7
100541e6:	47a8      	blx	r5
100541e8:	4606      	mov	r6, r0
100541ea:	210c      	movs	r1, #12
100541ec:	4638      	mov	r0, r7
100541ee:	47a8      	blx	r5
100541f0:	462a      	mov	r2, r5
100541f2:	4605      	mov	r5, r0
100541f4:	210e      	movs	r1, #14
100541f6:	4638      	mov	r0, r7
100541f8:	4790      	blx	r2
100541fa:	7460      	strb	r0, [r4, #17]
100541fc:	0a29      	lsrs	r1, r5, #8
100541fe:	7421      	strb	r1, [r4, #16]
10054200:	73e5      	strb	r5, [r4, #15]
10054202:	0a31      	lsrs	r1, r6, #8
10054204:	73a1      	strb	r1, [r4, #14]
10054206:	7366      	strb	r6, [r4, #13]
10054208:	9a01      	ldr	r2, [sp, #4]
1005420a:	0a11      	lsrs	r1, r2, #8
1005420c:	7321      	strb	r1, [r4, #12]
1005420e:	72e2      	strb	r2, [r4, #11]
10054210:	9a02      	ldr	r2, [sp, #8]
10054212:	0a11      	lsrs	r1, r2, #8
10054214:	72a1      	strb	r1, [r4, #10]
10054216:	7262      	strb	r2, [r4, #9]
10054218:	9a03      	ldr	r2, [sp, #12]
1005421a:	0a11      	lsrs	r1, r2, #8
1005421c:	71e1      	strb	r1, [r4, #7]
1005421e:	71a2      	strb	r2, [r4, #6]
10054220:	9904      	ldr	r1, [sp, #16]
10054222:	7221      	strb	r1, [r4, #8]
10054224:	0a00      	lsrs	r0, r0, #8
10054226:	74a0      	strb	r0, [r4, #18]
10054228:	b005      	add	sp, #20
1005422a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005422c <__arm_cp.42_0>:
1005422c:	10053813 	.word	0x10053813

10054230 <ACL_pkt_read_8b>:
10054230:	b51c      	push	{r2, r3, r4, lr}
10054232:	291f      	cmp	r1, #31
10054234:	d803      	bhi.n	1005423e <ACL_pkt_read_8b+0xe>
10054236:	aa01      	add	r2, sp, #4
10054238:	8011      	strh	r1, [r2, #0]
1005423a:	6840      	ldr	r0, [r0, #4]
1005423c:	e005      	b.n	1005424a <ACL_pkt_read_8b+0x1a>
1005423e:	6840      	ldr	r0, [r0, #4]
10054240:	ac01      	add	r4, sp, #4
10054242:	4622      	mov	r2, r4
10054244:	f00b fa87 	bl	1005f756 <Mem_Buff_get_buff_off>
10054248:	8821      	ldrh	r1, [r4, #0]
1005424a:	1840      	adds	r0, r0, r1
1005424c:	7900      	ldrb	r0, [r0, #4]
1005424e:	bd1c      	pop	{r2, r3, r4, pc}

10054250 <aci_l2cap_command_reject_event_copy>:
10054250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054252:	4615      	mov	r5, r2
10054254:	460e      	mov	r6, r1
10054256:	4604      	mov	r4, r0
10054258:	6850      	ldr	r0, [r2, #4]
1005425a:	7a40      	ldrb	r0, [r0, #9]
1005425c:	9000      	str	r0, [sp, #0]
1005425e:	2106      	movs	r1, #6
10054260:	4610      	mov	r0, r2
10054262:	f7ff fad6 	bl	10053812 <ACL_pkt_read_16b>
10054266:	4607      	mov	r7, r0
10054268:	2108      	movs	r1, #8
1005426a:	4628      	mov	r0, r5
1005426c:	f7ff fad1 	bl	10053812 <ACL_pkt_read_16b>
10054270:	1eb9      	subs	r1, r7, #2
10054272:	72e1      	strb	r1, [r4, #11]
10054274:	7260      	strb	r0, [r4, #9]
10054276:	9a00      	ldr	r2, [sp, #0]
10054278:	7222      	strb	r2, [r4, #8]
1005427a:	0a32      	lsrs	r2, r6, #8
1005427c:	71e2      	strb	r2, [r4, #7]
1005427e:	71a6      	strb	r6, [r4, #6]
10054280:	0a00      	lsrs	r0, r0, #8
10054282:	72a0      	strb	r0, [r4, #10]
10054284:	b2ca      	uxtb	r2, r1
10054286:	89a8      	ldrh	r0, [r5, #12]
10054288:	340c      	adds	r4, #12
1005428a:	1d80      	adds	r0, r0, #6
1005428c:	b281      	uxth	r1, r0
1005428e:	4628      	mov	r0, r5
10054290:	4623      	mov	r3, r4
10054292:	f7ff fab5 	bl	10053800 <ACL_pkt_read>
10054296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054298 <aci_att_clt_find_info_resp_event_copy>:
10054298:	b570      	push	{r4, r5, r6, lr}
1005429a:	461c      	mov	r4, r3
1005429c:	4605      	mov	r5, r0
1005429e:	885e      	ldrh	r6, [r3, #2]
100542a0:	0a10      	lsrs	r0, r2, #8
100542a2:	70e8      	strb	r0, [r5, #3]
100542a4:	70aa      	strb	r2, [r5, #2]
100542a6:	0a08      	lsrs	r0, r1, #8
100542a8:	7068      	strb	r0, [r5, #1]
100542aa:	7029      	strb	r1, [r5, #0]
100542ac:	8998      	ldrh	r0, [r3, #12]
100542ae:	1c40      	adds	r0, r0, #1
100542b0:	b281      	uxth	r1, r0
100542b2:	4618      	mov	r0, r3
100542b4:	f7ff ffbc 	bl	10054230 <ACL_pkt_read_8b>
100542b8:	1eb1      	subs	r1, r6, #2
100542ba:	0a0a      	lsrs	r2, r1, #8
100542bc:	71aa      	strb	r2, [r5, #6]
100542be:	7169      	strb	r1, [r5, #5]
100542c0:	7128      	strb	r0, [r5, #4]
100542c2:	89a0      	ldrh	r0, [r4, #12]
100542c4:	1deb      	adds	r3, r5, #7
100542c6:	b28a      	uxth	r2, r1
100542c8:	1c80      	adds	r0, r0, #2
100542ca:	b281      	uxth	r1, r0
100542cc:	4620      	mov	r0, r4
100542ce:	f7ff fa97 	bl	10053800 <ACL_pkt_read>
100542d2:	bd70      	pop	{r4, r5, r6, pc}

100542d4 <aci_att_clt_find_by_type_value_resp_event_copy>:
100542d4:	b5b0      	push	{r4, r5, r7, lr}
100542d6:	461c      	mov	r4, r3
100542d8:	885b      	ldrh	r3, [r3, #2]
100542da:	0a15      	lsrs	r5, r2, #8
100542dc:	70c5      	strb	r5, [r0, #3]
100542de:	7082      	strb	r2, [r0, #2]
100542e0:	0a0a      	lsrs	r2, r1, #8
100542e2:	7042      	strb	r2, [r0, #1]
100542e4:	7001      	strb	r1, [r0, #0]
100542e6:	1e59      	subs	r1, r3, #1
100542e8:	088a      	lsrs	r2, r1, #2
100542ea:	7102      	strb	r2, [r0, #4]
100542ec:	89a5      	ldrh	r5, [r4, #12]
100542ee:	1d43      	adds	r3, r0, #5
100542f0:	b28a      	uxth	r2, r1
100542f2:	1c68      	adds	r0, r5, #1
100542f4:	b281      	uxth	r1, r0
100542f6:	4620      	mov	r0, r4
100542f8:	f7ff fa82 	bl	10053800 <ACL_pkt_read>
100542fc:	bdb0      	pop	{r4, r5, r7, pc}

100542fe <aci_att_clt_read_by_type_resp_event_copy>:
100542fe:	b570      	push	{r4, r5, r6, lr}
10054300:	461c      	mov	r4, r3
10054302:	4605      	mov	r5, r0
10054304:	885e      	ldrh	r6, [r3, #2]
10054306:	0a10      	lsrs	r0, r2, #8
10054308:	70e8      	strb	r0, [r5, #3]
1005430a:	70aa      	strb	r2, [r5, #2]
1005430c:	0a08      	lsrs	r0, r1, #8
1005430e:	7068      	strb	r0, [r5, #1]
10054310:	7029      	strb	r1, [r5, #0]
10054312:	8998      	ldrh	r0, [r3, #12]
10054314:	1c40      	adds	r0, r0, #1
10054316:	b281      	uxth	r1, r0
10054318:	4618      	mov	r0, r3
1005431a:	f7ff ff89 	bl	10054230 <ACL_pkt_read_8b>
1005431e:	1eb1      	subs	r1, r6, #2
10054320:	0a0a      	lsrs	r2, r1, #8
10054322:	71aa      	strb	r2, [r5, #6]
10054324:	7169      	strb	r1, [r5, #5]
10054326:	7128      	strb	r0, [r5, #4]
10054328:	89a0      	ldrh	r0, [r4, #12]
1005432a:	1deb      	adds	r3, r5, #7
1005432c:	b28a      	uxth	r2, r1
1005432e:	1c80      	adds	r0, r0, #2
10054330:	b281      	uxth	r1, r0
10054332:	4620      	mov	r0, r4
10054334:	f7ff fa64 	bl	10053800 <ACL_pkt_read>
10054338:	bd70      	pop	{r4, r5, r6, pc}

1005433a <aci_att_clt_read_resp_event_copy>:
1005433a:	b5b0      	push	{r4, r5, r7, lr}
1005433c:	461c      	mov	r4, r3
1005433e:	885b      	ldrh	r3, [r3, #2]
10054340:	0a15      	lsrs	r5, r2, #8
10054342:	70c5      	strb	r5, [r0, #3]
10054344:	7082      	strb	r2, [r0, #2]
10054346:	0a0a      	lsrs	r2, r1, #8
10054348:	7042      	strb	r2, [r0, #1]
1005434a:	7001      	strb	r1, [r0, #0]
1005434c:	1e59      	subs	r1, r3, #1
1005434e:	7101      	strb	r1, [r0, #4]
10054350:	0a0a      	lsrs	r2, r1, #8
10054352:	7142      	strb	r2, [r0, #5]
10054354:	89a5      	ldrh	r5, [r4, #12]
10054356:	1d83      	adds	r3, r0, #6
10054358:	b28a      	uxth	r2, r1
1005435a:	1c68      	adds	r0, r5, #1
1005435c:	b281      	uxth	r1, r0
1005435e:	4620      	mov	r0, r4
10054360:	f7ff fa4e 	bl	10053800 <ACL_pkt_read>
10054364:	bdb0      	pop	{r4, r5, r7, pc}

10054366 <aci_att_clt_read_blob_resp_event_copy>:
10054366:	b5b0      	push	{r4, r5, r7, lr}
10054368:	461c      	mov	r4, r3
1005436a:	885b      	ldrh	r3, [r3, #2]
1005436c:	0a15      	lsrs	r5, r2, #8
1005436e:	70c5      	strb	r5, [r0, #3]
10054370:	7082      	strb	r2, [r0, #2]
10054372:	0a0a      	lsrs	r2, r1, #8
10054374:	7042      	strb	r2, [r0, #1]
10054376:	7001      	strb	r1, [r0, #0]
10054378:	1e59      	subs	r1, r3, #1
1005437a:	7101      	strb	r1, [r0, #4]
1005437c:	0a0a      	lsrs	r2, r1, #8
1005437e:	7142      	strb	r2, [r0, #5]
10054380:	89a5      	ldrh	r5, [r4, #12]
10054382:	1d83      	adds	r3, r0, #6
10054384:	b28a      	uxth	r2, r1
10054386:	1c68      	adds	r0, r5, #1
10054388:	b281      	uxth	r1, r0
1005438a:	4620      	mov	r0, r4
1005438c:	f7ff fa38 	bl	10053800 <ACL_pkt_read>
10054390:	bdb0      	pop	{r4, r5, r7, pc}

10054392 <aci_att_clt_read_multiple_resp_event_copy>:
10054392:	b5b0      	push	{r4, r5, r7, lr}
10054394:	461c      	mov	r4, r3
10054396:	885b      	ldrh	r3, [r3, #2]
10054398:	0a15      	lsrs	r5, r2, #8
1005439a:	70c5      	strb	r5, [r0, #3]
1005439c:	7082      	strb	r2, [r0, #2]
1005439e:	0a0a      	lsrs	r2, r1, #8
100543a0:	7042      	strb	r2, [r0, #1]
100543a2:	7001      	strb	r1, [r0, #0]
100543a4:	1e59      	subs	r1, r3, #1
100543a6:	7101      	strb	r1, [r0, #4]
100543a8:	0a0a      	lsrs	r2, r1, #8
100543aa:	7142      	strb	r2, [r0, #5]
100543ac:	89a5      	ldrh	r5, [r4, #12]
100543ae:	1d83      	adds	r3, r0, #6
100543b0:	b28a      	uxth	r2, r1
100543b2:	1c68      	adds	r0, r5, #1
100543b4:	b281      	uxth	r1, r0
100543b6:	4620      	mov	r0, r4
100543b8:	f7ff fa22 	bl	10053800 <ACL_pkt_read>
100543bc:	bdb0      	pop	{r4, r5, r7, pc}

100543be <aci_att_clt_read_by_group_type_resp_event_copy>:
100543be:	b570      	push	{r4, r5, r6, lr}
100543c0:	461c      	mov	r4, r3
100543c2:	4605      	mov	r5, r0
100543c4:	885e      	ldrh	r6, [r3, #2]
100543c6:	0a10      	lsrs	r0, r2, #8
100543c8:	70e8      	strb	r0, [r5, #3]
100543ca:	70aa      	strb	r2, [r5, #2]
100543cc:	0a08      	lsrs	r0, r1, #8
100543ce:	7068      	strb	r0, [r5, #1]
100543d0:	7029      	strb	r1, [r5, #0]
100543d2:	8998      	ldrh	r0, [r3, #12]
100543d4:	1c40      	adds	r0, r0, #1
100543d6:	b281      	uxth	r1, r0
100543d8:	4618      	mov	r0, r3
100543da:	f7ff ff29 	bl	10054230 <ACL_pkt_read_8b>
100543de:	1eb1      	subs	r1, r6, #2
100543e0:	0a0a      	lsrs	r2, r1, #8
100543e2:	71aa      	strb	r2, [r5, #6]
100543e4:	7169      	strb	r1, [r5, #5]
100543e6:	7128      	strb	r0, [r5, #4]
100543e8:	89a0      	ldrh	r0, [r4, #12]
100543ea:	1deb      	adds	r3, r5, #7
100543ec:	b28a      	uxth	r2, r1
100543ee:	1c80      	adds	r0, r0, #2
100543f0:	b281      	uxth	r1, r0
100543f2:	4620      	mov	r0, r4
100543f4:	f7ff fa04 	bl	10053800 <ACL_pkt_read>
100543f8:	bd70      	pop	{r4, r5, r6, pc}

100543fa <aci_att_clt_prepare_write_resp_event_copy>:
100543fa:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100543fc:	461c      	mov	r4, r3
100543fe:	4617      	mov	r7, r2
10054400:	9102      	str	r1, [sp, #8]
10054402:	4605      	mov	r5, r0
10054404:	8858      	ldrh	r0, [r3, #2]
10054406:	9001      	str	r0, [sp, #4]
10054408:	8998      	ldrh	r0, [r3, #12]
1005440a:	1c40      	adds	r0, r0, #1
1005440c:	b281      	uxth	r1, r0
1005440e:	4618      	mov	r0, r3
10054410:	f7ff f9ff 	bl	10053812 <ACL_pkt_read_16b>
10054414:	4606      	mov	r6, r0
10054416:	89a0      	ldrh	r0, [r4, #12]
10054418:	1cc0      	adds	r0, r0, #3
1005441a:	b281      	uxth	r1, r0
1005441c:	4620      	mov	r0, r4
1005441e:	f7ff f9f8 	bl	10053812 <ACL_pkt_read_16b>
10054422:	9901      	ldr	r1, [sp, #4]
10054424:	1f49      	subs	r1, r1, #5
10054426:	0a0a      	lsrs	r2, r1, #8
10054428:	726a      	strb	r2, [r5, #9]
1005442a:	7229      	strb	r1, [r5, #8]
1005442c:	71a8      	strb	r0, [r5, #6]
1005442e:	0a32      	lsrs	r2, r6, #8
10054430:	716a      	strb	r2, [r5, #5]
10054432:	712e      	strb	r6, [r5, #4]
10054434:	0a3a      	lsrs	r2, r7, #8
10054436:	70ea      	strb	r2, [r5, #3]
10054438:	70af      	strb	r7, [r5, #2]
1005443a:	9b02      	ldr	r3, [sp, #8]
1005443c:	0a1a      	lsrs	r2, r3, #8
1005443e:	706a      	strb	r2, [r5, #1]
10054440:	702b      	strb	r3, [r5, #0]
10054442:	0a00      	lsrs	r0, r0, #8
10054444:	71e8      	strb	r0, [r5, #7]
10054446:	89a0      	ldrh	r0, [r4, #12]
10054448:	350a      	adds	r5, #10
1005444a:	b28a      	uxth	r2, r1
1005444c:	1d40      	adds	r0, r0, #5
1005444e:	b281      	uxth	r1, r0
10054450:	4620      	mov	r0, r4
10054452:	462b      	mov	r3, r5
10054454:	f7ff f9d4 	bl	10053800 <ACL_pkt_read>
10054458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005445a <aci_gatt_clt_indication_event_copy>:
1005445a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005445c:	461c      	mov	r4, r3
1005445e:	4617      	mov	r7, r2
10054460:	460e      	mov	r6, r1
10054462:	4605      	mov	r5, r0
10054464:	8858      	ldrh	r0, [r3, #2]
10054466:	9000      	str	r0, [sp, #0]
10054468:	8998      	ldrh	r0, [r3, #12]
1005446a:	1c40      	adds	r0, r0, #1
1005446c:	b281      	uxth	r1, r0
1005446e:	4618      	mov	r0, r3
10054470:	f7ff f9cf 	bl	10053812 <ACL_pkt_read_16b>
10054474:	9900      	ldr	r1, [sp, #0]
10054476:	1ec9      	subs	r1, r1, #3
10054478:	0a0a      	lsrs	r2, r1, #8
1005447a:	71ea      	strb	r2, [r5, #7]
1005447c:	71a9      	strb	r1, [r5, #6]
1005447e:	7128      	strb	r0, [r5, #4]
10054480:	0a3a      	lsrs	r2, r7, #8
10054482:	70ea      	strb	r2, [r5, #3]
10054484:	70af      	strb	r7, [r5, #2]
10054486:	0a32      	lsrs	r2, r6, #8
10054488:	706a      	strb	r2, [r5, #1]
1005448a:	702e      	strb	r6, [r5, #0]
1005448c:	0a00      	lsrs	r0, r0, #8
1005448e:	7168      	strb	r0, [r5, #5]
10054490:	89a0      	ldrh	r0, [r4, #12]
10054492:	3508      	adds	r5, #8
10054494:	b28a      	uxth	r2, r1
10054496:	1cc0      	adds	r0, r0, #3
10054498:	b281      	uxth	r1, r0
1005449a:	4620      	mov	r0, r4
1005449c:	462b      	mov	r3, r5
1005449e:	f7ff f9af 	bl	10053800 <ACL_pkt_read>
100544a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100544a4 <aci_gatt_clt_notification_event_copy>:
100544a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100544a6:	461c      	mov	r4, r3
100544a8:	4617      	mov	r7, r2
100544aa:	460e      	mov	r6, r1
100544ac:	4605      	mov	r5, r0
100544ae:	8858      	ldrh	r0, [r3, #2]
100544b0:	9000      	str	r0, [sp, #0]
100544b2:	8998      	ldrh	r0, [r3, #12]
100544b4:	1c40      	adds	r0, r0, #1
100544b6:	b281      	uxth	r1, r0
100544b8:	4618      	mov	r0, r3
100544ba:	f7ff f9aa 	bl	10053812 <ACL_pkt_read_16b>
100544be:	9900      	ldr	r1, [sp, #0]
100544c0:	1ec9      	subs	r1, r1, #3
100544c2:	0a0a      	lsrs	r2, r1, #8
100544c4:	71ea      	strb	r2, [r5, #7]
100544c6:	71a9      	strb	r1, [r5, #6]
100544c8:	7128      	strb	r0, [r5, #4]
100544ca:	0a3a      	lsrs	r2, r7, #8
100544cc:	70ea      	strb	r2, [r5, #3]
100544ce:	70af      	strb	r7, [r5, #2]
100544d0:	0a32      	lsrs	r2, r6, #8
100544d2:	706a      	strb	r2, [r5, #1]
100544d4:	702e      	strb	r6, [r5, #0]
100544d6:	0a00      	lsrs	r0, r0, #8
100544d8:	7168      	strb	r0, [r5, #5]
100544da:	89a0      	ldrh	r0, [r4, #12]
100544dc:	3508      	adds	r5, #8
100544de:	b28a      	uxth	r2, r1
100544e0:	1cc0      	adds	r0, r0, #3
100544e2:	b281      	uxth	r1, r0
100544e4:	4620      	mov	r0, r4
100544e6:	462b      	mov	r3, r5
100544e8:	f7ff f98a 	bl	10053800 <ACL_pkt_read>
100544ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100544ee <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
100544ee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100544f0:	461d      	mov	r5, r3
100544f2:	4604      	mov	r4, r0
100544f4:	7202      	strb	r2, [r0, #8]
100544f6:	7181      	strb	r1, [r0, #6]
100544f8:	0a10      	lsrs	r0, r2, #8
100544fa:	7260      	strb	r0, [r4, #9]
100544fc:	0a08      	lsrs	r0, r1, #8
100544fe:	71e0      	strb	r0, [r4, #7]
10054500:	9e07      	ldr	r6, [sp, #28]
10054502:	89b0      	ldrh	r0, [r6, #12]
10054504:	18c0      	adds	r0, r0, r3
10054506:	b281      	uxth	r1, r0
10054508:	2202      	movs	r2, #2
1005450a:	ab01      	add	r3, sp, #4
1005450c:	4630      	mov	r0, r6
1005450e:	f7ff f977 	bl	10053800 <ACL_pkt_read>
10054512:	9806      	ldr	r0, [sp, #24]
10054514:	1e80      	subs	r0, r0, #2
10054516:	7320      	strb	r0, [r4, #12]
10054518:	9901      	ldr	r1, [sp, #4]
1005451a:	72a1      	strb	r1, [r4, #10]
1005451c:	0a09      	lsrs	r1, r1, #8
1005451e:	72e1      	strb	r1, [r4, #11]
10054520:	89b1      	ldrh	r1, [r6, #12]
10054522:	1869      	adds	r1, r5, r1
10054524:	1c89      	adds	r1, r1, #2
10054526:	b289      	uxth	r1, r1
10054528:	340d      	adds	r4, #13
1005452a:	b2c2      	uxtb	r2, r0
1005452c:	4630      	mov	r0, r6
1005452e:	4623      	mov	r3, r4
10054530:	f7ff f966 	bl	10053800 <ACL_pkt_read>
10054534:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10054536 <aci_gatt_srv_write_event_copy>:
10054536:	b5b0      	push	{r4, r5, r7, lr}
10054538:	4615      	mov	r5, r2
1005453a:	4604      	mov	r4, r0
1005453c:	9a05      	ldr	r2, [sp, #20]
1005453e:	71c2      	strb	r2, [r0, #7]
10054540:	9804      	ldr	r0, [sp, #16]
10054542:	7160      	strb	r0, [r4, #5]
10054544:	7123      	strb	r3, [r4, #4]
10054546:	70a5      	strb	r5, [r4, #2]
10054548:	7021      	strb	r1, [r4, #0]
1005454a:	0a13      	lsrs	r3, r2, #8
1005454c:	7223      	strb	r3, [r4, #8]
1005454e:	0a00      	lsrs	r0, r0, #8
10054550:	71a0      	strb	r0, [r4, #6]
10054552:	0a28      	lsrs	r0, r5, #8
10054554:	70e0      	strb	r0, [r4, #3]
10054556:	0a08      	lsrs	r0, r1, #8
10054558:	7060      	strb	r0, [r4, #1]
1005455a:	9806      	ldr	r0, [sp, #24]
1005455c:	8981      	ldrh	r1, [r0, #12]
1005455e:	3409      	adds	r4, #9
10054560:	1cc9      	adds	r1, r1, #3
10054562:	b289      	uxth	r1, r1
10054564:	4623      	mov	r3, r4
10054566:	f7ff f94b 	bl	10053800 <ACL_pkt_read>
1005456a:	bdb0      	pop	{r4, r5, r7, pc}

1005456c <aci_att_srv_prepare_write_req_event_copy>:
1005456c:	b570      	push	{r4, r5, r6, lr}
1005456e:	4615      	mov	r5, r2
10054570:	4604      	mov	r4, r0
10054572:	9a05      	ldr	r2, [sp, #20]
10054574:	7202      	strb	r2, [r0, #8]
10054576:	9804      	ldr	r0, [sp, #16]
10054578:	71a0      	strb	r0, [r4, #6]
1005457a:	7123      	strb	r3, [r4, #4]
1005457c:	70a5      	strb	r5, [r4, #2]
1005457e:	7021      	strb	r1, [r4, #0]
10054580:	0a16      	lsrs	r6, r2, #8
10054582:	7266      	strb	r6, [r4, #9]
10054584:	0a00      	lsrs	r0, r0, #8
10054586:	71e0      	strb	r0, [r4, #7]
10054588:	0a18      	lsrs	r0, r3, #8
1005458a:	7160      	strb	r0, [r4, #5]
1005458c:	0a28      	lsrs	r0, r5, #8
1005458e:	70e0      	strb	r0, [r4, #3]
10054590:	0a08      	lsrs	r0, r1, #8
10054592:	7060      	strb	r0, [r4, #1]
10054594:	9806      	ldr	r0, [sp, #24]
10054596:	8981      	ldrh	r1, [r0, #12]
10054598:	340a      	adds	r4, #10
1005459a:	1d49      	adds	r1, r1, #5
1005459c:	b289      	uxth	r1, r1
1005459e:	4623      	mov	r3, r4
100545a0:	f7ff f92e 	bl	10053800 <ACL_pkt_read>
100545a4:	bd70      	pop	{r4, r5, r6, pc}

100545a6 <aci_gatt_clt_multi_notification_int_event_copy>:
100545a6:	b5b0      	push	{r4, r5, r7, lr}
100545a8:	461c      	mov	r4, r3
100545aa:	885b      	ldrh	r3, [r3, #2]
100545ac:	0a15      	lsrs	r5, r2, #8
100545ae:	70c5      	strb	r5, [r0, #3]
100545b0:	7082      	strb	r2, [r0, #2]
100545b2:	0a0a      	lsrs	r2, r1, #8
100545b4:	7042      	strb	r2, [r0, #1]
100545b6:	7001      	strb	r1, [r0, #0]
100545b8:	1e59      	subs	r1, r3, #1
100545ba:	7101      	strb	r1, [r0, #4]
100545bc:	0a0a      	lsrs	r2, r1, #8
100545be:	7142      	strb	r2, [r0, #5]
100545c0:	89a5      	ldrh	r5, [r4, #12]
100545c2:	1d83      	adds	r3, r0, #6
100545c4:	b28a      	uxth	r2, r1
100545c6:	1c68      	adds	r0, r5, #1
100545c8:	b281      	uxth	r1, r0
100545ca:	4620      	mov	r0, r4
100545cc:	f7ff f918 	bl	10053800 <ACL_pkt_read>
100545d0:	bdb0      	pop	{r4, r5, r7, pc}

100545d2 <aci_att_clt_read_multiple_var_len_resp_event_copy>:
100545d2:	b5b0      	push	{r4, r5, r7, lr}
100545d4:	461c      	mov	r4, r3
100545d6:	885b      	ldrh	r3, [r3, #2]
100545d8:	0a15      	lsrs	r5, r2, #8
100545da:	70c5      	strb	r5, [r0, #3]
100545dc:	7082      	strb	r2, [r0, #2]
100545de:	0a0a      	lsrs	r2, r1, #8
100545e0:	7042      	strb	r2, [r0, #1]
100545e2:	7001      	strb	r1, [r0, #0]
100545e4:	1e59      	subs	r1, r3, #1
100545e6:	7101      	strb	r1, [r0, #4]
100545e8:	0a0a      	lsrs	r2, r1, #8
100545ea:	7142      	strb	r2, [r0, #5]
100545ec:	89a5      	ldrh	r5, [r4, #12]
100545ee:	1d83      	adds	r3, r0, #6
100545f0:	b28a      	uxth	r2, r1
100545f2:	1c68      	adds	r0, r5, #1
100545f4:	b281      	uxth	r1, r0
100545f6:	4620      	mov	r0, r4
100545f8:	f7ff f902 	bl	10053800 <ACL_pkt_read>
100545fc:	bdb0      	pop	{r4, r5, r7, pc}

100545fe <hci_rx_acl_data_event_copy>:
100545fe:	b5b0      	push	{r4, r5, r7, lr}
10054600:	4614      	mov	r4, r2
10054602:	9a04      	ldr	r2, [sp, #16]
10054604:	70c2      	strb	r2, [r0, #3]
10054606:	7041      	strb	r1, [r0, #1]
10054608:	0a15      	lsrs	r5, r2, #8
1005460a:	7105      	strb	r5, [r0, #4]
1005460c:	250f      	movs	r5, #15
1005460e:	022d      	lsls	r5, r5, #8
10054610:	400d      	ands	r5, r1
10054612:	07a1      	lsls	r1, r4, #30
10054614:	0c89      	lsrs	r1, r1, #18
10054616:	1949      	adds	r1, r1, r5
10054618:	039b      	lsls	r3, r3, #14
1005461a:	18c9      	adds	r1, r1, r3
1005461c:	0a09      	lsrs	r1, r1, #8
1005461e:	7081      	strb	r1, [r0, #2]
10054620:	1d43      	adds	r3, r0, #5
10054622:	9805      	ldr	r0, [sp, #20]
10054624:	2100      	movs	r1, #0
10054626:	f7ff f8eb 	bl	10053800 <ACL_pkt_read>
1005462a:	bdb0      	pop	{r4, r5, r7, pc}

1005462c <aci_l2cap_proc_timeout_event_copy>:
1005462c:	7001      	strb	r1, [r0, #0]
1005462e:	2200      	movs	r2, #0
10054630:	7082      	strb	r2, [r0, #2]
10054632:	0a09      	lsrs	r1, r1, #8
10054634:	7041      	strb	r1, [r0, #1]
10054636:	4770      	bx	lr

10054638 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10054638:	2000      	movs	r0, #0
1005463a:	4770      	bx	lr

1005463c <hci_hardware_error_event_cb>:
1005463c:	b5e0      	push	{r5, r6, r7, lr}
1005463e:	aa01      	add	r2, sp, #4
10054640:	70d0      	strb	r0, [r2, #3]
10054642:	2001      	movs	r0, #1
10054644:	7090      	strb	r0, [r2, #2]
10054646:	2010      	movs	r0, #16
10054648:	7050      	strb	r0, [r2, #1]
1005464a:	2104      	movs	r1, #4
1005464c:	7011      	strb	r1, [r2, #0]
1005464e:	4610      	mov	r0, r2
10054650:	f7f8 fef0 	bl	1004d434 <BLE_STACK_Event>
10054654:	bd8c      	pop	{r2, r3, r7, pc}

10054656 <GAP_enable_disable_scan_ucfg_weak>:
10054656:	2000      	movs	r0, #0
10054658:	4770      	bx	lr

1005465a <GAP_discover_peer_name_ucfg_weak>:
1005465a:	2000      	movs	r0, #0
1005465c:	4770      	bx	lr
	...

10054660 <GAP_name_disc_proc_connected_check>:
10054660:	b51c      	push	{r2, r3, r4, lr}
10054662:	4811      	ldr	r0, [pc, #68]	@ (100546a8 <__arm_cp.18_0>)
10054664:	6804      	ldr	r4, [r0, #0]
10054666:	f7ff fff8 	bl	1005465a <GAP_discover_peer_name_ucfg_weak>
1005466a:	2888      	cmp	r0, #136	@ 0x88
1005466c:	d007      	beq.n	1005467e <GAP_name_disc_proc_connected_check+0x1e>
1005466e:	280c      	cmp	r0, #12
10054670:	d005      	beq.n	1005467e <GAP_name_disc_proc_connected_check+0x1e>
10054672:	345d      	adds	r4, #93	@ 0x5d
10054674:	2800      	cmp	r0, #0
10054676:	d108      	bne.n	1005468a <GAP_name_disc_proc_connected_check+0x2a>
10054678:	2002      	movs	r0, #2
1005467a:	7060      	strb	r0, [r4, #1]
1005467c:	bd1c      	pop	{r2, r3, r4, pc}
1005467e:	2005      	movs	r0, #5
10054680:	f00c fda0 	bl	100611c4 <tsk_notify_idx>
10054684:	f7fb ff21 	bl	100504ca <BLE_STACK_ProcessRequest>
10054688:	bd1c      	pop	{r2, r3, r4, pc}
1005468a:	2000      	movs	r0, #0
1005468c:	7060      	strb	r0, [r4, #1]
1005468e:	7820      	ldrb	r0, [r4, #0]
10054690:	217f      	movs	r1, #127	@ 0x7f
10054692:	4001      	ands	r1, r0
10054694:	7021      	strb	r1, [r4, #0]
10054696:	a901      	add	r1, sp, #4
10054698:	2086      	movs	r0, #134	@ 0x86
1005469a:	7048      	strb	r0, [r1, #1]
1005469c:	2080      	movs	r0, #128	@ 0x80
1005469e:	7008      	strb	r0, [r1, #0]
100546a0:	2002      	movs	r0, #2
100546a2:	f000 f9bf 	bl	10054a24 <aci_gap_proc_complete_event_wrapper>
100546a6:	bd1c      	pop	{r2, r3, r4, pc}

100546a8 <__arm_cp.18_0>:
100546a8:	2000241c 	.word	0x2000241c

100546ac <GAP_central_connection_complete_handler_ucfg_weak>:
100546ac:	4770      	bx	lr

100546ae <GAP_DiscProcTimeoutcb_ucfg_weak>:
100546ae:	4770      	bx	lr

100546b0 <GAP_started_gatt_proc>:
100546b0:	4907      	ldr	r1, [pc, #28]	@ (100546d0 <__arm_cp.28_0>)
100546b2:	6809      	ldr	r1, [r1, #0]
100546b4:	225d      	movs	r2, #93	@ 0x5d
100546b6:	5c8a      	ldrb	r2, [r1, r2]
100546b8:	2388      	movs	r3, #136	@ 0x88
100546ba:	421a      	tst	r2, r3
100546bc:	d004      	beq.n	100546c8 <GAP_started_gatt_proc+0x18>
100546be:	3172      	adds	r1, #114	@ 0x72
100546c0:	8809      	ldrh	r1, [r1, #0]
100546c2:	4041      	eors	r1, r0
100546c4:	0508      	lsls	r0, r1, #20
100546c6:	d001      	beq.n	100546cc <GAP_started_gatt_proc+0x1c>
100546c8:	2000      	movs	r0, #0
100546ca:	4770      	bx	lr
100546cc:	2001      	movs	r0, #1
100546ce:	4770      	bx	lr

100546d0 <__arm_cp.28_0>:
100546d0:	2000241c 	.word	0x2000241c

100546d4 <gap_timers_callback_wrapper>:
100546d4:	b580      	push	{r7, lr}
100546d6:	6940      	ldr	r0, [r0, #20]
100546d8:	4901      	ldr	r1, [pc, #4]	@ (100546e0 <__arm_cp.0_0>)
100546da:	f00c feaa 	bl	10061432 <cst_sharedCallback>
100546de:	bd80      	pop	{r7, pc}

100546e0 <__arm_cp.0_0>:
100546e0:	100546e5 	.word	0x100546e5

100546e4 <gap_timers_callback>:
100546e4:	b580      	push	{r7, lr}
100546e6:	2802      	cmp	r0, #2
100546e8:	d007      	beq.n	100546fa <gap_timers_callback+0x16>
100546ea:	2801      	cmp	r0, #1
100546ec:	d009      	beq.n	10054702 <gap_timers_callback+0x1e>
100546ee:	2800      	cmp	r0, #0
100546f0:	d106      	bne.n	10054700 <gap_timers_callback+0x1c>
100546f2:	2000      	movs	r0, #0
100546f4:	f7f8 ff19 	bl	1004d52a <GAP_LimDiscTimeoutcb_ucfg>
100546f8:	bd80      	pop	{r7, pc}
100546fa:	2000      	movs	r0, #0
100546fc:	f7ff ffd7 	bl	100546ae <GAP_DiscProcTimeoutcb_ucfg_weak>
10054700:	bd80      	pop	{r7, pc}
10054702:	2000      	movs	r0, #0
10054704:	f000 f802 	bl	1005470c <GAP_PrivateAddrTimercb>
10054708:	bd80      	pop	{r7, pc}
	...

1005470c <GAP_PrivateAddrTimercb>:
1005470c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005470e:	b087      	sub	sp, #28
10054710:	4831      	ldr	r0, [pc, #196]	@ (100547d8 <__arm_cp.2_0>)
10054712:	6804      	ldr	r4, [r0, #0]
10054714:	a906      	add	r1, sp, #24
10054716:	9104      	str	r1, [sp, #16]
10054718:	2000      	movs	r0, #0
1005471a:	9001      	str	r0, [sp, #4]
1005471c:	7008      	strb	r0, [r1, #0]
1005471e:	ae05      	add	r6, sp, #20
10054720:	2001      	movs	r0, #1
10054722:	7030      	strb	r0, [r6, #0]
10054724:	f000 f950 	bl	100549c8 <GAP_reset_privacy_timer>
10054728:	205d      	movs	r0, #93	@ 0x5d
1005472a:	9403      	str	r4, [sp, #12]
1005472c:	5c27      	ldrb	r7, [r4, r0]
1005472e:	1e78      	subs	r0, r7, #1
10054730:	463d      	mov	r5, r7
10054732:	4185      	sbcs	r5, r0
10054734:	2020      	movs	r0, #32
10054736:	4038      	ands	r0, r7
10054738:	4244      	negs	r4, r0
1005473a:	9002      	str	r0, [sp, #8]
1005473c:	4144      	adcs	r4, r0
1005473e:	9804      	ldr	r0, [sp, #16]
10054740:	4631      	mov	r1, r6
10054742:	f000 fd51 	bl	100551e8 <GAP_check_adv_status>
10054746:	2f00      	cmp	r7, #0
10054748:	d101      	bne.n	1005474e <GAP_PrivateAddrTimercb+0x42>
1005474a:	2801      	cmp	r0, #1
1005474c:	d13e      	bne.n	100547cc <GAP_PrivateAddrTimercb+0xc0>
1005474e:	402c      	ands	r4, r5
10054750:	d138      	bne.n	100547c4 <GAP_PrivateAddrTimercb+0xb8>
10054752:	a805      	add	r0, sp, #20
10054754:	7800      	ldrb	r0, [r0, #0]
10054756:	2800      	cmp	r0, #0
10054758:	d034      	beq.n	100547c4 <GAP_PrivateAddrTimercb+0xb8>
1005475a:	9c03      	ldr	r4, [sp, #12]
1005475c:	4620      	mov	r0, r4
1005475e:	305d      	adds	r0, #93	@ 0x5d
10054760:	7bc0      	ldrb	r0, [r0, #15]
10054762:	2800      	cmp	r0, #0
10054764:	d034      	beq.n	100547d0 <GAP_PrivateAddrTimercb+0xc4>
10054766:	3428      	adds	r4, #40	@ 0x28
10054768:	9d02      	ldr	r5, [sp, #8]
1005476a:	2d00      	cmp	r5, #0
1005476c:	d003      	beq.n	10054776 <GAP_PrivateAddrTimercb+0x6a>
1005476e:	7821      	ldrb	r1, [r4, #0]
10054770:	2000      	movs	r0, #0
10054772:	f7ff ff70 	bl	10054656 <GAP_enable_disable_scan_ucfg_weak>
10054776:	a806      	add	r0, sp, #24
10054778:	7800      	ldrb	r0, [r0, #0]
1005477a:	2801      	cmp	r0, #1
1005477c:	d102      	bne.n	10054784 <GAP_PrivateAddrTimercb+0x78>
1005477e:	2000      	movs	r0, #0
10054780:	f000 fcf6 	bl	10055170 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10054784:	f000 fafc 	bl	10054d80 <GAP_generate_new_rpa>
10054788:	2800      	cmp	r0, #0
1005478a:	d104      	bne.n	10054796 <GAP_PrivateAddrTimercb+0x8a>
1005478c:	2000      	movs	r0, #0
1005478e:	2101      	movs	r1, #1
10054790:	f000 face 	bl	10054d30 <GAP_start_privacy_timer>
10054794:	9001      	str	r0, [sp, #4]
10054796:	2d00      	cmp	r5, #0
10054798:	d00a      	beq.n	100547b0 <GAP_PrivateAddrTimercb+0xa4>
1005479a:	7821      	ldrb	r1, [r4, #0]
1005479c:	2001      	movs	r0, #1
1005479e:	f7ff ff5a 	bl	10054656 <GAP_enable_disable_scan_ucfg_weak>
100547a2:	2800      	cmp	r0, #0
100547a4:	d004      	beq.n	100547b0 <GAP_PrivateAddrTimercb+0xa4>
100547a6:	9801      	ldr	r0, [sp, #4]
100547a8:	2800      	cmp	r0, #0
100547aa:	d001      	beq.n	100547b0 <GAP_PrivateAddrTimercb+0xa4>
100547ac:	f000 fa2c 	bl	10054c08 <GAP_stop_privacy_timer>
100547b0:	a806      	add	r0, sp, #24
100547b2:	7800      	ldrb	r0, [r0, #0]
100547b4:	2801      	cmp	r0, #1
100547b6:	d109      	bne.n	100547cc <GAP_PrivateAddrTimercb+0xc0>
100547b8:	2006      	movs	r0, #6
100547ba:	f00c fd03 	bl	100611c4 <tsk_notify_idx>
100547be:	f7fb fe84 	bl	100504ca <BLE_STACK_ProcessRequest>
100547c2:	e003      	b.n	100547cc <GAP_PrivateAddrTimercb+0xc0>
100547c4:	2001      	movs	r0, #1
100547c6:	4601      	mov	r1, r0
100547c8:	f000 fab2 	bl	10054d30 <GAP_start_privacy_timer>
100547cc:	b007      	add	sp, #28
100547ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100547d0:	2000      	movs	r0, #0
100547d2:	2101      	movs	r1, #1
100547d4:	e7f8      	b.n	100547c8 <GAP_PrivateAddrTimercb+0xbc>
100547d6:	46c0      	nop			@ (mov r8, r8)

100547d8 <__arm_cp.2_0>:
100547d8:	2000241c 	.word	0x2000241c

100547dc <GAP_init_context>:
100547dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100547de:	461f      	mov	r7, r3
100547e0:	9201      	str	r2, [sp, #4]
100547e2:	9102      	str	r1, [sp, #8]
100547e4:	4605      	mov	r5, r0
100547e6:	2401      	movs	r4, #1
100547e8:	2178      	movs	r1, #120	@ 0x78
100547ea:	4620      	mov	r0, r4
100547ec:	f00a ff14 	bl	1005f618 <csmem_mem_0_assign>
100547f0:	21e1      	movs	r1, #225	@ 0xe1
100547f2:	0089      	lsls	r1, r1, #2
100547f4:	225a      	movs	r2, #90	@ 0x5a
100547f6:	5281      	strh	r1, [r0, r2]
100547f8:	4e24      	ldr	r6, [pc, #144]	@ (1005488c <__arm_cp.3_0>)
100547fa:	6030      	str	r0, [r6, #0]
100547fc:	2d01      	cmp	r5, #1
100547fe:	d117      	bne.n	10054830 <GAP_init_context+0x54>
10054800:	2001      	movs	r0, #1
10054802:	2106      	movs	r1, #6
10054804:	f00a ff08 	bl	1005f618 <csmem_mem_0_assign>
10054808:	4601      	mov	r1, r0
1005480a:	6830      	ldr	r0, [r6, #0]
1005480c:	6381      	str	r1, [r0, #56]	@ 0x38
1005480e:	2f01      	cmp	r7, #1
10054810:	d10e      	bne.n	10054830 <GAP_init_context+0x54>
10054812:	2501      	movs	r5, #1
10054814:	270e      	movs	r7, #14
10054816:	4628      	mov	r0, r5
10054818:	4639      	mov	r1, r7
1005481a:	f00a fefd 	bl	1005f618 <csmem_mem_0_assign>
1005481e:	6831      	ldr	r1, [r6, #0]
10054820:	64c8      	str	r0, [r1, #76]	@ 0x4c
10054822:	4628      	mov	r0, r5
10054824:	4639      	mov	r1, r7
10054826:	f00a fef7 	bl	1005f618 <csmem_mem_0_assign>
1005482a:	4601      	mov	r1, r0
1005482c:	6830      	ldr	r0, [r6, #0]
1005482e:	6501      	str	r1, [r0, #80]	@ 0x50
10054830:	9902      	ldr	r1, [sp, #8]
10054832:	2901      	cmp	r1, #1
10054834:	d10b      	bne.n	1005484e <GAP_init_context+0x72>
10054836:	9801      	ldr	r0, [sp, #4]
10054838:	2801      	cmp	r0, #1
1005483a:	d105      	bne.n	10054848 <GAP_init_context+0x6c>
1005483c:	201c      	movs	r0, #28
1005483e:	2101      	movs	r1, #1
10054840:	f00a feea 	bl	1005f618 <csmem_mem_0_assign>
10054844:	6831      	ldr	r1, [r6, #0]
10054846:	62c8      	str	r0, [r1, #44]	@ 0x2c
10054848:	4811      	ldr	r0, [pc, #68]	@ (10054890 <__arm_cp.3_1>)
1005484a:	7e84      	ldrb	r4, [r0, #26]
1005484c:	e001      	b.n	10054852 <GAP_init_context+0x76>
1005484e:	2100      	movs	r1, #0
10054850:	62c1      	str	r1, [r0, #44]	@ 0x2c
10054852:	2114      	movs	r1, #20
10054854:	4620      	mov	r0, r4
10054856:	f00a fedf 	bl	1005f618 <csmem_mem_0_assign>
1005485a:	6831      	ldr	r1, [r6, #0]
1005485c:	6548      	str	r0, [r1, #84]	@ 0x54
1005485e:	4c0d      	ldr	r4, [pc, #52]	@ (10054894 <__arm_cp.3_2>)
10054860:	2104      	movs	r1, #4
10054862:	2201      	movs	r2, #1
10054864:	4620      	mov	r0, r4
10054866:	f00a fec5 	bl	1005f5f4 <csmem_mem_assign>
1005486a:	6831      	ldr	r1, [r6, #0]
1005486c:	6208      	str	r0, [r1, #32]
1005486e:	2503      	movs	r5, #3
10054870:	2202      	movs	r2, #2
10054872:	4620      	mov	r0, r4
10054874:	4629      	mov	r1, r5
10054876:	f00a febd 	bl	1005f5f4 <csmem_mem_assign>
1005487a:	6831      	ldr	r1, [r6, #0]
1005487c:	6248      	str	r0, [r1, #36]	@ 0x24
1005487e:	4a06      	ldr	r2, [pc, #24]	@ (10054898 <__arm_cp.3_3>)
10054880:	2307      	movs	r3, #7
10054882:	4608      	mov	r0, r1
10054884:	4629      	mov	r1, r5
10054886:	f00c fcfb 	bl	10061280 <CST_init>
1005488a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005488c <__arm_cp.3_0>:
1005488c:	2000241c 	.word	0x2000241c

10054890 <__arm_cp.3_1>:
10054890:	2000247c 	.word	0x2000247c

10054894 <__arm_cp.3_2>:
10054894:	20002478 	.word	0x20002478

10054898 <__arm_cp.3_3>:
10054898:	100546d5 	.word	0x100546d5

1005489c <GAP_get_default_le_event_mask>:
1005489c:	b5b0      	push	{r4, r5, r7, lr}
1005489e:	4604      	mov	r4, r0
100548a0:	2100      	movs	r1, #0
100548a2:	2508      	movs	r5, #8
100548a4:	462a      	mov	r2, r5
100548a6:	f7fc fc07 	bl	100510b8 <BLEPLAT_MemSet>
100548aa:	7820      	ldrb	r0, [r4, #0]
100548ac:	21df      	movs	r1, #223	@ 0xdf
100548ae:	4301      	orrs	r1, r0
100548b0:	7021      	strb	r1, [r4, #0]
100548b2:	7860      	ldrb	r0, [r4, #1]
100548b4:	2109      	movs	r1, #9
100548b6:	4301      	orrs	r1, r0
100548b8:	7061      	strb	r1, [r4, #1]
100548ba:	78a1      	ldrb	r1, [r4, #2]
100548bc:	4329      	orrs	r1, r5
100548be:	70a1      	strb	r1, [r4, #2]
100548c0:	4911      	ldr	r1, [pc, #68]	@ (10054908 <__arm_cp.4_0>)
100548c2:	6809      	ldr	r1, [r1, #0]
100548c4:	225c      	movs	r2, #92	@ 0x5c
100548c6:	5c89      	ldrb	r1, [r1, r2]
100548c8:	0689      	lsls	r1, r1, #26
100548ca:	d502      	bpl.n	100548d2 <GAP_get_default_le_event_mask+0x36>
100548cc:	210f      	movs	r1, #15
100548ce:	4308      	orrs	r0, r1
100548d0:	7060      	strb	r0, [r4, #1]
100548d2:	f009 ff09 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
100548d6:	2801      	cmp	r0, #1
100548d8:	d107      	bne.n	100548ea <GAP_get_default_le_event_mask+0x4e>
100548da:	7860      	ldrb	r0, [r4, #1]
100548dc:	2112      	movs	r1, #18
100548de:	4301      	orrs	r1, r0
100548e0:	7061      	strb	r1, [r4, #1]
100548e2:	78a0      	ldrb	r0, [r4, #2]
100548e4:	2107      	movs	r1, #7
100548e6:	4301      	orrs	r1, r0
100548e8:	70a1      	strb	r1, [r4, #2]
100548ea:	f005 fdbf 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100548ee:	b2c0      	uxtb	r0, r0
100548f0:	2801      	cmp	r0, #1
100548f2:	d107      	bne.n	10054904 <GAP_get_default_le_event_mask+0x68>
100548f4:	7860      	ldrb	r0, [r4, #1]
100548f6:	21e0      	movs	r1, #224	@ 0xe0
100548f8:	4301      	orrs	r1, r0
100548fa:	7061      	strb	r1, [r4, #1]
100548fc:	78a0      	ldrb	r0, [r4, #2]
100548fe:	2180      	movs	r1, #128	@ 0x80
10054900:	4301      	orrs	r1, r0
10054902:	70a1      	strb	r1, [r4, #2]
10054904:	bdb0      	pop	{r4, r5, r7, pc}
10054906:	46c0      	nop			@ (mov r8, r8)

10054908 <__arm_cp.4_0>:
10054908:	2000241c 	.word	0x2000241c

1005490c <gap_extended_adv_scan_supported>:
1005490c:	b580      	push	{r7, lr}
1005490e:	f009 feeb 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
10054912:	bd80      	pop	{r7, pc}

10054914 <GAP_Init>:
10054914:	b5f0      	push	{r4, r5, r6, r7, lr}
10054916:	b085      	sub	sp, #20
10054918:	4605      	mov	r5, r0
1005491a:	a804      	add	r0, sp, #16
1005491c:	2700      	movs	r7, #0
1005491e:	7007      	strb	r7, [r0, #0]
10054920:	2412      	movs	r4, #18
10054922:	2901      	cmp	r1, #1
10054924:	d901      	bls.n	1005492a <GAP_Init+0x16>
10054926:	4620      	mov	r0, r4
10054928:	e048      	b.n	100549bc <GAP_Init+0xa8>
1005492a:	460e      	mov	r6, r1
1005492c:	4824      	ldr	r0, [pc, #144]	@ (100549c0 <__arm_cp.7_0>)
1005492e:	6800      	ldr	r0, [r0, #0]
10054930:	9000      	str	r0, [sp, #0]
10054932:	f00c ff85 	bl	10061840 <IDD_Initialize_Device_IDs>
10054936:	2800      	cmp	r0, #0
10054938:	d140      	bne.n	100549bc <GAP_Init+0xa8>
1005493a:	9900      	ldr	r1, [sp, #0]
1005493c:	315c      	adds	r1, #92	@ 0x5c
1005493e:	7808      	ldrb	r0, [r1, #0]
10054940:	07c0      	lsls	r0, r0, #31
10054942:	d111      	bne.n	10054968 <GAP_Init+0x54>
10054944:	78c8      	ldrb	r0, [r1, #3]
10054946:	4330      	orrs	r0, r6
10054948:	460e      	mov	r6, r1
1005494a:	70c8      	strb	r0, [r1, #3]
1005494c:	a803      	add	r0, sp, #12
1005494e:	2107      	movs	r1, #7
10054950:	7001      	strb	r1, [r0, #0]
10054952:	2d00      	cmp	r5, #0
10054954:	d012      	beq.n	1005497c <GAP_Init+0x68>
10054956:	2d02      	cmp	r5, #2
10054958:	d008      	beq.n	1005496c <GAP_Init+0x58>
1005495a:	2d01      	cmp	r5, #1
1005495c:	4620      	mov	r0, r4
1005495e:	d12d      	bne.n	100549bc <GAP_Init+0xa8>
10054960:	a804      	add	r0, sp, #16
10054962:	2110      	movs	r1, #16
10054964:	7001      	strb	r1, [r0, #0]
10054966:	e009      	b.n	1005497c <GAP_Init+0x68>
10054968:	200c      	movs	r0, #12
1005496a:	e027      	b.n	100549bc <GAP_Init+0xa8>
1005496c:	a804      	add	r0, sp, #16
1005496e:	2120      	movs	r1, #32
10054970:	7001      	strb	r1, [r0, #0]
10054972:	a903      	add	r1, sp, #12
10054974:	f000 f9a2 	bl	10054cbc <GAP_enable_controller_privacy_ucfg_weak>
10054978:	2800      	cmp	r0, #0
1005497a:	d11f      	bne.n	100549bc <GAP_Init+0xa8>
1005497c:	f000 f9d6 	bl	10054d2c <GAP_init_advertising_sets_ucfg_weak>
10054980:	2800      	cmp	r0, #0
10054982:	d11b      	bne.n	100549bc <GAP_Init+0xa8>
10054984:	9800      	ldr	r0, [sp, #0]
10054986:	3060      	adds	r0, #96	@ 0x60
10054988:	f000 f9cc 	bl	10054d24 <GAP_set_controller_random_address_ucfg_weak>
1005498c:	2800      	cmp	r0, #0
1005498e:	d115      	bne.n	100549bc <GAP_Init+0xa8>
10054990:	9804      	ldr	r0, [sp, #16]
10054992:	2101      	movs	r1, #1
10054994:	7431      	strb	r1, [r6, #16]
10054996:	4308      	orrs	r0, r1
10054998:	7030      	strb	r0, [r6, #0]
1005499a:	f000 f815 	bl	100549c8 <GAP_reset_privacy_timer>
1005499e:	ac01      	add	r4, sp, #4
100549a0:	4620      	mov	r0, r4
100549a2:	f7ff ff7b 	bl	1005489c <GAP_get_default_le_event_mask>
100549a6:	4620      	mov	r0, r4
100549a8:	f003 fa24 	bl	10057df4 <hci_le_set_event_mask>
100549ac:	43f8      	mvns	r0, r7
100549ae:	9001      	str	r0, [sp, #4]
100549b0:	4804      	ldr	r0, [pc, #16]	@ (100549c4 <__arm_cp.7_1>)
100549b2:	9002      	str	r0, [sp, #8]
100549b4:	4620      	mov	r0, r4
100549b6:	f003 fa0d 	bl	10057dd4 <hci_set_event_mask>
100549ba:	4638      	mov	r0, r7
100549bc:	b005      	add	sp, #20
100549be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100549c0 <__arm_cp.7_0>:
100549c0:	2000241c 	.word	0x2000241c

100549c4 <__arm_cp.7_1>:
100549c4:	20009fff 	.word	0x20009fff

100549c8 <GAP_reset_privacy_timer>:
100549c8:	4806      	ldr	r0, [pc, #24]	@ (100549e4 <__arm_cp.8_0>)
100549ca:	6800      	ldr	r0, [r0, #0]
100549cc:	215c      	movs	r1, #92	@ 0x5c
100549ce:	5c41      	ldrb	r1, [r0, r1]
100549d0:	0689      	lsls	r1, r1, #26
100549d2:	0f89      	lsrs	r1, r1, #30
100549d4:	d004      	beq.n	100549e0 <GAP_reset_privacy_timer+0x18>
100549d6:	305c      	adds	r0, #92	@ 0x5c
100549d8:	78c1      	ldrb	r1, [r0, #3]
100549da:	2202      	movs	r2, #2
100549dc:	430a      	orrs	r2, r1
100549de:	70c2      	strb	r2, [r0, #3]
100549e0:	4770      	bx	lr
100549e2:	46c0      	nop			@ (mov r8, r8)

100549e4 <__arm_cp.8_0>:
100549e4:	2000241c 	.word	0x2000241c

100549e8 <GAP_internal_evt_handler>:
100549e8:	b5b0      	push	{r4, r5, r7, lr}
100549ea:	285c      	cmp	r0, #92	@ 0x5c
100549ec:	d106      	bne.n	100549fc <GAP_internal_evt_handler+0x14>
100549ee:	480c      	ldr	r0, [pc, #48]	@ (10054a20 <__arm_cp.12_0>)
100549f0:	6804      	ldr	r4, [r0, #0]
100549f2:	345d      	adds	r4, #93	@ 0x5d
100549f4:	2500      	movs	r5, #0
100549f6:	5760      	ldrsb	r0, [r4, r5]
100549f8:	2800      	cmp	r0, #0
100549fa:	d400      	bmi.n	100549fe <GAP_internal_evt_handler+0x16>
100549fc:	bdb0      	pop	{r4, r5, r7, pc}
100549fe:	7860      	ldrb	r0, [r4, #1]
10054a00:	2802      	cmp	r0, #2
10054a02:	d1fb      	bne.n	100549fc <GAP_internal_evt_handler+0x14>
10054a04:	7055      	strb	r5, [r2, #1]
10054a06:	2080      	movs	r0, #128	@ 0x80
10054a08:	7010      	strb	r0, [r2, #0]
10054a0a:	b2c8      	uxtb	r0, r1
10054a0c:	4611      	mov	r1, r2
10054a0e:	f000 f809 	bl	10054a24 <aci_gap_proc_complete_event_wrapper>
10054a12:	7065      	strb	r5, [r4, #1]
10054a14:	7820      	ldrb	r0, [r4, #0]
10054a16:	217f      	movs	r1, #127	@ 0x7f
10054a18:	4001      	ands	r1, r0
10054a1a:	7021      	strb	r1, [r4, #0]
10054a1c:	bdb0      	pop	{r4, r5, r7, pc}
10054a1e:	46c0      	nop			@ (mov r8, r8)

10054a20 <__arm_cp.12_0>:
10054a20:	2000241c 	.word	0x2000241c

10054a24 <aci_gap_proc_complete_event_wrapper>:
10054a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054a26:	2900      	cmp	r1, #0
10054a28:	d016      	beq.n	10054a58 <aci_gap_proc_complete_event_wrapper+0x34>
10054a2a:	460e      	mov	r6, r1
10054a2c:	4605      	mov	r5, r0
10054a2e:	7809      	ldrb	r1, [r1, #0]
10054a30:	2400      	movs	r4, #0
10054a32:	07c8      	lsls	r0, r1, #31
10054a34:	4620      	mov	r0, r4
10054a36:	d11f      	bne.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a38:	0788      	lsls	r0, r1, #30
10054a3a:	d40f      	bmi.n	10054a5c <aci_gap_proc_complete_event_wrapper+0x38>
10054a3c:	0748      	lsls	r0, r1, #29
10054a3e:	d40f      	bmi.n	10054a60 <aci_gap_proc_complete_event_wrapper+0x3c>
10054a40:	0708      	lsls	r0, r1, #28
10054a42:	d40f      	bmi.n	10054a64 <aci_gap_proc_complete_event_wrapper+0x40>
10054a44:	06c8      	lsls	r0, r1, #27
10054a46:	d40f      	bmi.n	10054a68 <aci_gap_proc_complete_event_wrapper+0x44>
10054a48:	0688      	lsls	r0, r1, #26
10054a4a:	d40f      	bmi.n	10054a6c <aci_gap_proc_complete_event_wrapper+0x48>
10054a4c:	0648      	lsls	r0, r1, #25
10054a4e:	d40f      	bmi.n	10054a70 <aci_gap_proc_complete_event_wrapper+0x4c>
10054a50:	0608      	lsls	r0, r1, #24
10054a52:	d50f      	bpl.n	10054a74 <aci_gap_proc_complete_event_wrapper+0x50>
10054a54:	2007      	movs	r0, #7
10054a56:	e00f      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a58:	2412      	movs	r4, #18
10054a5a:	e03c      	b.n	10054ad6 <aci_gap_proc_complete_event_wrapper+0xb2>
10054a5c:	2001      	movs	r0, #1
10054a5e:	e00b      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a60:	2002      	movs	r0, #2
10054a62:	e009      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a64:	2003      	movs	r0, #3
10054a66:	e007      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a68:	2004      	movs	r0, #4
10054a6a:	e005      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a6c:	2005      	movs	r0, #5
10054a6e:	e003      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a70:	2006      	movs	r0, #6
10054a72:	e001      	b.n	10054a78 <aci_gap_proc_complete_event_wrapper+0x54>
10054a74:	2000      	movs	r0, #0
10054a76:	43c0      	mvns	r0, r0
10054a78:	7030      	strb	r0, [r6, #0]
10054a7a:	4818      	ldr	r0, [pc, #96]	@ (10054adc <__arm_cp.13_0>)
10054a7c:	6800      	ldr	r0, [r0, #0]
10054a7e:	214e      	movs	r1, #78	@ 0x4e
10054a80:	5640      	ldrsb	r0, [r0, r1]
10054a82:	2800      	cmp	r0, #0
10054a84:	d527      	bpl.n	10054ad6 <aci_gap_proc_complete_event_wrapper+0xb2>
10054a86:	4816      	ldr	r0, [pc, #88]	@ (10054ae0 <__arm_cp.13_1>)
10054a88:	1828      	adds	r0, r5, r0
10054a8a:	2103      	movs	r1, #3
10054a8c:	4301      	orrs	r1, r0
10054a8e:	310d      	adds	r1, #13
10054a90:	0888      	lsrs	r0, r1, #2
10054a92:	b283      	uxth	r3, r0
10054a94:	4813      	ldr	r0, [pc, #76]	@ (10054ae4 <__arm_cp.13_2>)
10054a96:	6800      	ldr	r0, [r0, #0]
10054a98:	6980      	ldr	r0, [r0, #24]
10054a9a:	2102      	movs	r1, #2
10054a9c:	2247      	movs	r2, #71	@ 0x47
10054a9e:	f7ff f847 	bl	10053b30 <aci_event_fifo_push_header>
10054aa2:	2800      	cmp	r0, #0
10054aa4:	d016      	beq.n	10054ad4 <aci_gap_proc_complete_event_wrapper+0xb0>
10054aa6:	4607      	mov	r7, r0
10054aa8:	1d00      	adds	r0, r0, #4
10054aaa:	4629      	mov	r1, r5
10054aac:	4632      	mov	r2, r6
10054aae:	f7ff fb7a 	bl	100541a6 <aci_gap_proc_complete_event_copy>
10054ab2:	2004      	movs	r0, #4
10054ab4:	7278      	strb	r0, [r7, #9]
10054ab6:	2007      	movs	r0, #7
10054ab8:	7238      	strb	r0, [r7, #8]
10054aba:	1ce8      	adds	r0, r5, #3
10054abc:	0a01      	lsrs	r1, r0, #8
10054abe:	71f9      	strb	r1, [r7, #7]
10054ac0:	71b8      	strb	r0, [r7, #6]
10054ac2:	20ff      	movs	r0, #255	@ 0xff
10054ac4:	7178      	strb	r0, [r7, #5]
10054ac6:	2082      	movs	r0, #130	@ 0x82
10054ac8:	7138      	strb	r0, [r7, #4]
10054aca:	2002      	movs	r0, #2
10054acc:	4639      	mov	r1, r7
10054ace:	f7ff f8cc 	bl	10053c6a <aci_event_fifo_push>
10054ad2:	e000      	b.n	10054ad6 <aci_gap_proc_complete_event_wrapper+0xb2>
10054ad4:	2407      	movs	r4, #7
10054ad6:	4620      	mov	r0, r4
10054ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054ada:	46c0      	nop			@ (mov r8, r8)

10054adc <__arm_cp.13_0>:
10054adc:	20002468 	.word	0x20002468

10054ae0 <__arm_cp.13_1>:
10054ae0:	0003fffd 	.word	0x0003fffd

10054ae4 <__arm_cp.13_2>:
10054ae4:	20002418 	.word	0x20002418

10054ae8 <GAP_LimDiscTimeoutcb>:
10054ae8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10054aea:	4811      	ldr	r0, [pc, #68]	@ (10054b30 <__arm_cp.15_0>)
10054aec:	6800      	ldr	r0, [r0, #0]
10054aee:	6d44      	ldr	r4, [r0, #84]	@ 0x54
10054af0:	f009 fdfa 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
10054af4:	2800      	cmp	r0, #0
10054af6:	d002      	beq.n	10054afe <GAP_LimDiscTimeoutcb+0x16>
10054af8:	480e      	ldr	r0, [pc, #56]	@ (10054b34 <__arm_cp.15_1>)
10054afa:	7e80      	ldrb	r0, [r0, #26]
10054afc:	e000      	b.n	10054b00 <GAP_LimDiscTimeoutcb+0x18>
10054afe:	2001      	movs	r0, #1
10054b00:	b2c5      	uxtb	r5, r0
10054b02:	3411      	adds	r4, #17
10054b04:	2d00      	cmp	r5, #0
10054b06:	d011      	beq.n	10054b2c <GAP_LimDiscTimeoutcb+0x44>
10054b08:	7820      	ldrb	r0, [r4, #0]
10054b0a:	2800      	cmp	r0, #0
10054b0c:	d00b      	beq.n	10054b26 <GAP_LimDiscTimeoutcb+0x3e>
10054b0e:	4620      	mov	r0, r4
10054b10:	380f      	subs	r0, #15
10054b12:	7800      	ldrb	r0, [r0, #0]
10054b14:	0780      	lsls	r0, r0, #30
10054b16:	d506      	bpl.n	10054b26 <GAP_LimDiscTimeoutcb+0x3e>
10054b18:	7860      	ldrb	r0, [r4, #1]
10054b1a:	466a      	mov	r2, sp
10054b1c:	7010      	strb	r0, [r2, #0]
10054b1e:	2000      	movs	r0, #0
10054b20:	2101      	movs	r1, #1
10054b22:	f7fe fb2b 	bl	1005317c <GAP_set_advertising_enable_ucfg_weak>
10054b26:	3414      	adds	r4, #20
10054b28:	1e6d      	subs	r5, r5, #1
10054b2a:	e7eb      	b.n	10054b04 <GAP_LimDiscTimeoutcb+0x1c>
10054b2c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10054b2e:	46c0      	nop			@ (mov r8, r8)

10054b30 <__arm_cp.15_0>:
10054b30:	2000241c 	.word	0x2000241c

10054b34 <__arm_cp.15_1>:
10054b34:	2000247c 	.word	0x2000247c

10054b38 <GAP_stop_discoverability>:
10054b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054b3a:	4604      	mov	r4, r0
10054b3c:	4668      	mov	r0, sp
10054b3e:	2500      	movs	r5, #0
10054b40:	7005      	strb	r5, [r0, #0]
10054b42:	f009 fdd1 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
10054b46:	2800      	cmp	r0, #0
10054b48:	d005      	beq.n	10054b56 <GAP_stop_discoverability+0x1e>
10054b4a:	466d      	mov	r5, sp
10054b4c:	4620      	mov	r0, r4
10054b4e:	4629      	mov	r1, r5
10054b50:	f000 f9fe 	bl	10054f50 <GAP_get_advertising_set_index>
10054b54:	782d      	ldrb	r5, [r5, #0]
10054b56:	f009 fdc7 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
10054b5a:	2800      	cmp	r0, #0
10054b5c:	d002      	beq.n	10054b64 <GAP_stop_discoverability+0x2c>
10054b5e:	4826      	ldr	r0, [pc, #152]	@ (10054bf8 <__arm_cp.18_0>)
10054b60:	7e83      	ldrb	r3, [r0, #26]
10054b62:	e000      	b.n	10054b66 <GAP_stop_discoverability+0x2e>
10054b64:	2301      	movs	r3, #1
10054b66:	2614      	movs	r6, #20
10054b68:	4375      	muls	r5, r6
10054b6a:	4f24      	ldr	r7, [pc, #144]	@ (10054bfc <__arm_cp.18_1>)
10054b6c:	6838      	ldr	r0, [r7, #0]
10054b6e:	6d41      	ldr	r1, [r0, #84]	@ 0x54
10054b70:	194c      	adds	r4, r1, r5
10054b72:	78a5      	ldrb	r5, [r4, #2]
10054b74:	2202      	movs	r2, #2
10054b76:	402a      	ands	r2, r5
10054b78:	d002      	beq.n	10054b80 <GAP_stop_discoverability+0x48>
10054b7a:	1ca4      	adds	r4, r4, #2
10054b7c:	2500      	movs	r5, #0
10054b7e:	7025      	strb	r5, [r4, #0]
10054b80:	3111      	adds	r1, #17
10054b82:	b2db      	uxtb	r3, r3
10054b84:	2b00      	cmp	r3, #0
10054b86:	d00a      	beq.n	10054b9e <GAP_stop_discoverability+0x66>
10054b88:	780c      	ldrb	r4, [r1, #0]
10054b8a:	2c00      	cmp	r4, #0
10054b8c:	d004      	beq.n	10054b98 <GAP_stop_discoverability+0x60>
10054b8e:	460c      	mov	r4, r1
10054b90:	3c0f      	subs	r4, #15
10054b92:	7824      	ldrb	r4, [r4, #0]
10054b94:	07a4      	lsls	r4, r4, #30
10054b96:	d426      	bmi.n	10054be6 <GAP_stop_discoverability+0xae>
10054b98:	1e5b      	subs	r3, r3, #1
10054b9a:	3114      	adds	r1, #20
10054b9c:	e7f2      	b.n	10054b84 <GAP_stop_discoverability+0x4c>
10054b9e:	2a00      	cmp	r2, #0
10054ba0:	d021      	beq.n	10054be6 <GAP_stop_discoverability+0xae>
10054ba2:	2400      	movs	r4, #0
10054ba4:	4621      	mov	r1, r4
10054ba6:	f00c fb80 	bl	100612aa <CST_stop>
10054baa:	4815      	ldr	r0, [pc, #84]	@ (10054c00 <__arm_cp.18_2>)
10054bac:	6800      	ldr	r0, [r0, #0]
10054bae:	214e      	movs	r1, #78	@ 0x4e
10054bb0:	5c40      	ldrb	r0, [r0, r1]
10054bb2:	07c0      	lsls	r0, r0, #31
10054bb4:	d017      	beq.n	10054be6 <GAP_stop_discoverability+0xae>
10054bb6:	4813      	ldr	r0, [pc, #76]	@ (10054c04 <__arm_cp.18_3>)
10054bb8:	6800      	ldr	r0, [r0, #0]
10054bba:	6980      	ldr	r0, [r0, #24]
10054bbc:	2244      	movs	r2, #68	@ 0x44
10054bbe:	2502      	movs	r5, #2
10054bc0:	4629      	mov	r1, r5
10054bc2:	462b      	mov	r3, r5
10054bc4:	f7fe ffb4 	bl	10053b30 <aci_event_fifo_push_header>
10054bc8:	2800      	cmp	r0, #0
10054bca:	d00c      	beq.n	10054be6 <GAP_stop_discoverability+0xae>
10054bcc:	4601      	mov	r1, r0
10054bce:	7185      	strb	r5, [r0, #6]
10054bd0:	71c4      	strb	r4, [r0, #7]
10054bd2:	7204      	strb	r4, [r0, #8]
10054bd4:	20ff      	movs	r0, #255	@ 0xff
10054bd6:	7148      	strb	r0, [r1, #5]
10054bd8:	2082      	movs	r0, #130	@ 0x82
10054bda:	7108      	strb	r0, [r1, #4]
10054bdc:	2004      	movs	r0, #4
10054bde:	7248      	strb	r0, [r1, #9]
10054be0:	4628      	mov	r0, r5
10054be2:	f7ff f842 	bl	10053c6a <aci_event_fifo_push>
10054be6:	4668      	mov	r0, sp
10054be8:	7800      	ldrb	r0, [r0, #0]
10054bea:	4346      	muls	r6, r0
10054bec:	6838      	ldr	r0, [r7, #0]
10054bee:	6d40      	ldr	r0, [r0, #84]	@ 0x54
10054bf0:	1980      	adds	r0, r0, r6
10054bf2:	2100      	movs	r1, #0
10054bf4:	7441      	strb	r1, [r0, #17]
10054bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054bf8 <__arm_cp.18_0>:
10054bf8:	2000247c 	.word	0x2000247c

10054bfc <__arm_cp.18_1>:
10054bfc:	2000241c 	.word	0x2000241c

10054c00 <__arm_cp.18_2>:
10054c00:	20002468 	.word	0x20002468

10054c04 <__arm_cp.18_3>:
10054c04:	20002418 	.word	0x20002418

10054c08 <GAP_stop_privacy_timer>:
10054c08:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10054c0a:	4c0d      	ldr	r4, [pc, #52]	@ (10054c40 <__arm_cp.19_0>)
10054c0c:	6825      	ldr	r5, [r4, #0]
10054c0e:	205c      	movs	r0, #92	@ 0x5c
10054c10:	5c28      	ldrb	r0, [r5, r0]
10054c12:	0680      	lsls	r0, r0, #26
10054c14:	0f80      	lsrs	r0, r0, #30
10054c16:	d012      	beq.n	10054c3e <GAP_stop_privacy_timer+0x36>
10054c18:	355c      	adds	r5, #92	@ 0x5c
10054c1a:	78e8      	ldrb	r0, [r5, #3]
10054c1c:	2602      	movs	r6, #2
10054c1e:	4030      	ands	r0, r6
10054c20:	d10d      	bne.n	10054c3e <GAP_stop_privacy_timer+0x36>
10054c22:	a801      	add	r0, sp, #4
10054c24:	4669      	mov	r1, sp
10054c26:	f000 fadf 	bl	100551e8 <GAP_check_adv_status>
10054c2a:	7869      	ldrb	r1, [r5, #1]
10054c2c:	4301      	orrs	r1, r0
10054c2e:	d106      	bne.n	10054c3e <GAP_stop_privacy_timer+0x36>
10054c30:	78e8      	ldrb	r0, [r5, #3]
10054c32:	4330      	orrs	r0, r6
10054c34:	70e8      	strb	r0, [r5, #3]
10054c36:	6820      	ldr	r0, [r4, #0]
10054c38:	2101      	movs	r1, #1
10054c3a:	f00c fb36 	bl	100612aa <CST_stop>
10054c3e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10054c40 <__arm_cp.19_0>:
10054c40:	2000241c 	.word	0x2000241c

10054c44 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
10054c44:	b580      	push	{r7, lr}
10054c46:	2000      	movs	r0, #0
10054c48:	f7ff ff76 	bl	10054b38 <GAP_stop_discoverability>
10054c4c:	f7ff ffdc 	bl	10054c08 <GAP_stop_privacy_timer>
10054c50:	bd80      	pop	{r7, pc}

10054c52 <GAP_hci_disconnection_complete_evt_hndl>:
10054c52:	4770      	bx	lr

10054c54 <GAP_hci_le_connection_complete_evt_hndl>:
10054c54:	b580      	push	{r7, lr}
10054c56:	2a00      	cmp	r2, #0
10054c58:	d003      	beq.n	10054c62 <GAP_hci_le_connection_complete_evt_hndl+0xe>
10054c5a:	4608      	mov	r0, r1
10054c5c:	f7ff fff2 	bl	10054c44 <GAP_peripheral_connection_complete_handler_ucfg_weak>
10054c60:	bd80      	pop	{r7, pc}
10054c62:	f7ff fd23 	bl	100546ac <GAP_central_connection_complete_handler_ucfg_weak>
10054c66:	bd80      	pop	{r7, pc}

10054c68 <GapIsPrivacySupported>:
10054c68:	4804      	ldr	r0, [pc, #16]	@ (10054c7c <__arm_cp.26_0>)
10054c6a:	6800      	ldr	r0, [r0, #0]
10054c6c:	215c      	movs	r1, #92	@ 0x5c
10054c6e:	5c41      	ldrb	r1, [r0, r1]
10054c70:	2030      	movs	r0, #48	@ 0x30
10054c72:	4008      	ands	r0, r1
10054c74:	1e41      	subs	r1, r0, #1
10054c76:	4188      	sbcs	r0, r1
10054c78:	4770      	bx	lr
10054c7a:	46c0      	nop			@ (mov r8, r8)

10054c7c <__arm_cp.26_0>:
10054c7c:	2000241c 	.word	0x2000241c

10054c80 <GAP_get_identity_address_type>:
10054c80:	4803      	ldr	r0, [pc, #12]	@ (10054c90 <__arm_cp.28_0>)
10054c82:	6800      	ldr	r0, [r0, #0]
10054c84:	215f      	movs	r1, #95	@ 0x5f
10054c86:	5c41      	ldrb	r1, [r0, r1]
10054c88:	2001      	movs	r0, #1
10054c8a:	4008      	ands	r0, r1
10054c8c:	4770      	bx	lr
10054c8e:	46c0      	nop			@ (mov r8, r8)

10054c90 <__arm_cp.28_0>:
10054c90:	2000241c 	.word	0x2000241c

10054c94 <GAP_get_own_address_type>:
10054c94:	4808      	ldr	r0, [pc, #32]	@ (10054cb8 <__arm_cp.29_0>)
10054c96:	6800      	ldr	r0, [r0, #0]
10054c98:	215c      	movs	r1, #92	@ 0x5c
10054c9a:	5c41      	ldrb	r1, [r0, r1]
10054c9c:	06ca      	lsls	r2, r1, #27
10054c9e:	d406      	bmi.n	10054cae <GAP_get_own_address_type+0x1a>
10054ca0:	0689      	lsls	r1, r1, #26
10054ca2:	d406      	bmi.n	10054cb2 <GAP_get_own_address_type+0x1e>
10054ca4:	305c      	adds	r0, #92	@ 0x5c
10054ca6:	78c1      	ldrb	r1, [r0, #3]
10054ca8:	2001      	movs	r0, #1
10054caa:	4008      	ands	r0, r1
10054cac:	4770      	bx	lr
10054cae:	2001      	movs	r0, #1
10054cb0:	4770      	bx	lr
10054cb2:	2003      	movs	r0, #3
10054cb4:	4770      	bx	lr
10054cb6:	46c0      	nop			@ (mov r8, r8)

10054cb8 <__arm_cp.29_0>:
10054cb8:	2000241c 	.word	0x2000241c

10054cbc <GAP_enable_controller_privacy_ucfg_weak>:
10054cbc:	2012      	movs	r0, #18
10054cbe:	4770      	bx	lr

10054cc0 <GAP_Terminate_Link>:
10054cc0:	b580      	push	{r7, lr}
10054cc2:	f004 fd17 	bl	100596f4 <llc_conn_disconnect_link>
10054cc6:	bd80      	pop	{r7, pc}

10054cc8 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
10054cc8:	b580      	push	{r7, lr}
10054cca:	07c0      	lsls	r0, r0, #31
10054ccc:	d101      	bne.n	10054cd2 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
10054cce:	2000      	movs	r0, #0
10054cd0:	bd80      	pop	{r7, pc}
10054cd2:	4608      	mov	r0, r1
10054cd4:	4611      	mov	r1, r2
10054cd6:	f003 f966 	bl	10057fa6 <hci_le_add_device_to_filter_accept_list>
10054cda:	bd80      	pop	{r7, pc}

10054cdc <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
10054cdc:	b580      	push	{r7, lr}
10054cde:	07c0      	lsls	r0, r0, #31
10054ce0:	d101      	bne.n	10054ce6 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
10054ce2:	2000      	movs	r0, #0
10054ce4:	bd80      	pop	{r7, pc}
10054ce6:	f003 f95a 	bl	10057f9e <hci_le_clear_filter_accept_list>
10054cea:	bd80      	pop	{r7, pc}

10054cec <GAP_configure_filter_accept_and_resolving_list>:
10054cec:	b570      	push	{r4, r5, r6, lr}
10054cee:	b094      	sub	sp, #80	@ 0x50
10054cf0:	4604      	mov	r4, r0
10054cf2:	f7ff fff3 	bl	10054cdc <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
10054cf6:	4606      	mov	r6, r0
10054cf8:	466d      	mov	r5, sp
10054cfa:	353e      	adds	r5, #62	@ 0x3e
10054cfc:	4668      	mov	r0, sp
10054cfe:	f00b f8d3 	bl	1005fea8 <sdb_sap_read_security_record_sequential>
10054d02:	2800      	cmp	r0, #0
10054d04:	d10b      	bne.n	10054d1e <GAP_configure_filter_accept_and_resolving_list+0x32>
10054d06:	2e00      	cmp	r6, #0
10054d08:	d109      	bne.n	10054d1e <GAP_configure_filter_accept_and_resolving_list+0x32>
10054d0a:	4668      	mov	r0, sp
10054d0c:	7840      	ldrb	r0, [r0, #1]
10054d0e:	2101      	movs	r1, #1
10054d10:	4001      	ands	r1, r0
10054d12:	4620      	mov	r0, r4
10054d14:	462a      	mov	r2, r5
10054d16:	f7ff ffd7 	bl	10054cc8 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
10054d1a:	4606      	mov	r6, r0
10054d1c:	e7ee      	b.n	10054cfc <GAP_configure_filter_accept_and_resolving_list+0x10>
10054d1e:	b2f0      	uxtb	r0, r6
10054d20:	b014      	add	sp, #80	@ 0x50
10054d22:	bd70      	pop	{r4, r5, r6, pc}

10054d24 <GAP_set_controller_random_address_ucfg_weak>:
10054d24:	b580      	push	{r7, lr}
10054d26:	f003 f851 	bl	10057dcc <hci_le_set_random_address>
10054d2a:	bd80      	pop	{r7, pc}

10054d2c <GAP_init_advertising_sets_ucfg_weak>:
10054d2c:	2000      	movs	r0, #0
10054d2e:	4770      	bx	lr

10054d30 <GAP_start_privacy_timer>:
10054d30:	b5b0      	push	{r4, r5, r7, lr}
10054d32:	4602      	mov	r2, r0
10054d34:	4810      	ldr	r0, [pc, #64]	@ (10054d78 <__arm_cp.47_0>)
10054d36:	6800      	ldr	r0, [r0, #0]
10054d38:	4605      	mov	r5, r0
10054d3a:	355a      	adds	r5, #90	@ 0x5a
10054d3c:	2900      	cmp	r1, #0
10054d3e:	d108      	bne.n	10054d52 <GAP_start_privacy_timer+0x22>
10054d40:	78a9      	ldrb	r1, [r5, #2]
10054d42:	0689      	lsls	r1, r1, #26
10054d44:	2400      	movs	r4, #0
10054d46:	0f89      	lsrs	r1, r1, #30
10054d48:	d014      	beq.n	10054d74 <GAP_start_privacy_timer+0x44>
10054d4a:	7969      	ldrb	r1, [r5, #5]
10054d4c:	2302      	movs	r3, #2
10054d4e:	400b      	ands	r3, r1
10054d50:	d010      	beq.n	10054d74 <GAP_start_privacy_timer+0x44>
10054d52:	2a00      	cmp	r2, #0
10054d54:	d001      	beq.n	10054d5a <GAP_start_privacy_timer+0x2a>
10054d56:	4b09      	ldr	r3, [pc, #36]	@ (10054d7c <__arm_cp.47_1>)
10054d58:	e003      	b.n	10054d62 <GAP_start_privacy_timer+0x32>
10054d5a:	217d      	movs	r1, #125	@ 0x7d
10054d5c:	00c9      	lsls	r1, r1, #3
10054d5e:	882b      	ldrh	r3, [r5, #0]
10054d60:	434b      	muls	r3, r1
10054d62:	2401      	movs	r4, #1
10054d64:	4621      	mov	r1, r4
10054d66:	4622      	mov	r2, r4
10054d68:	f00c fad5 	bl	10061316 <CST_start>
10054d6c:	7968      	ldrb	r0, [r5, #5]
10054d6e:	21fd      	movs	r1, #253	@ 0xfd
10054d70:	4001      	ands	r1, r0
10054d72:	7169      	strb	r1, [r5, #5]
10054d74:	4620      	mov	r0, r4
10054d76:	bdb0      	pop	{r4, r5, r7, pc}

10054d78 <__arm_cp.47_0>:
10054d78:	2000241c 	.word	0x2000241c

10054d7c <__arm_cp.47_1>:
10054d7c:	00007530 	.word	0x00007530

10054d80 <GAP_generate_new_rpa>:
10054d80:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10054d82:	4d0d      	ldr	r5, [pc, #52]	@ (10054db8 <__arm_cp.48_0>)
10054d84:	6828      	ldr	r0, [r5, #0]
10054d86:	215f      	movs	r1, #95	@ 0x5f
10054d88:	5c40      	ldrb	r0, [r0, r1]
10054d8a:	0780      	lsls	r0, r0, #30
10054d8c:	d401      	bmi.n	10054d92 <GAP_generate_new_rpa+0x12>
10054d8e:	240c      	movs	r4, #12
10054d90:	e00f      	b.n	10054db2 <GAP_generate_new_rpa+0x32>
10054d92:	466c      	mov	r4, sp
10054d94:	4620      	mov	r0, r4
10054d96:	f00b f997 	bl	100600c8 <smp_sap_crt_generate_rpa>
10054d9a:	4620      	mov	r0, r4
10054d9c:	f7ff ffc2 	bl	10054d24 <GAP_set_controller_random_address_ucfg_weak>
10054da0:	4604      	mov	r4, r0
10054da2:	2800      	cmp	r0, #0
10054da4:	d105      	bne.n	10054db2 <GAP_generate_new_rpa+0x32>
10054da6:	6828      	ldr	r0, [r5, #0]
10054da8:	3066      	adds	r0, #102	@ 0x66
10054daa:	4669      	mov	r1, sp
10054dac:	2206      	movs	r2, #6
10054dae:	f7fc f973 	bl	10051098 <BLEPLAT_MemCpy>
10054db2:	4620      	mov	r0, r4
10054db4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10054db6:	46c0      	nop			@ (mov r8, r8)

10054db8 <__arm_cp.48_0>:
10054db8:	2000241c 	.word	0x2000241c

10054dbc <GAP_get_current_address>:
10054dbc:	b5b0      	push	{r4, r5, r7, lr}
10054dbe:	460d      	mov	r5, r1
10054dc0:	4604      	mov	r4, r0
10054dc2:	480f      	ldr	r0, [pc, #60]	@ (10054e00 <__arm_cp.49_0>)
10054dc4:	6800      	ldr	r0, [r0, #0]
10054dc6:	215c      	movs	r1, #92	@ 0x5c
10054dc8:	5c40      	ldrb	r0, [r0, r1]
10054dca:	0680      	lsls	r0, r0, #26
10054dcc:	0f80      	lsrs	r0, r0, #30
10054dce:	d005      	beq.n	10054ddc <GAP_get_current_address+0x20>
10054dd0:	2001      	movs	r0, #1
10054dd2:	7028      	strb	r0, [r5, #0]
10054dd4:	4620      	mov	r0, r4
10054dd6:	f000 f815 	bl	10054e04 <GAP_get_rpa>
10054dda:	e00e      	b.n	10054dfa <GAP_get_current_address+0x3e>
10054ddc:	f7ff ff5a 	bl	10054c94 <GAP_get_own_address_type>
10054de0:	2800      	cmp	r0, #0
10054de2:	d005      	beq.n	10054df0 <GAP_get_current_address+0x34>
10054de4:	2001      	movs	r0, #1
10054de6:	7028      	strb	r0, [r5, #0]
10054de8:	4620      	mov	r0, r4
10054dea:	f000 f81f 	bl	10054e2c <GAP_get_static_random_address>
10054dee:	e004      	b.n	10054dfa <GAP_get_current_address+0x3e>
10054df0:	2000      	movs	r0, #0
10054df2:	7028      	strb	r0, [r5, #0]
10054df4:	4620      	mov	r0, r4
10054df6:	f000 f80f 	bl	10054e18 <GAP_get_public_address>
10054dfa:	2000      	movs	r0, #0
10054dfc:	bdb0      	pop	{r4, r5, r7, pc}
10054dfe:	46c0      	nop			@ (mov r8, r8)

10054e00 <__arm_cp.49_0>:
10054e00:	2000241c 	.word	0x2000241c

10054e04 <GAP_get_rpa>:
10054e04:	b580      	push	{r7, lr}
10054e06:	4903      	ldr	r1, [pc, #12]	@ (10054e14 <__arm_cp.50_0>)
10054e08:	6809      	ldr	r1, [r1, #0]
10054e0a:	3166      	adds	r1, #102	@ 0x66
10054e0c:	2206      	movs	r2, #6
10054e0e:	f7fc f943 	bl	10051098 <BLEPLAT_MemCpy>
10054e12:	bd80      	pop	{r7, pc}

10054e14 <__arm_cp.50_0>:
10054e14:	2000241c 	.word	0x2000241c

10054e18 <GAP_get_public_address>:
10054e18:	b580      	push	{r7, lr}
10054e1a:	4903      	ldr	r1, [pc, #12]	@ (10054e28 <__arm_cp.51_0>)
10054e1c:	6809      	ldr	r1, [r1, #0]
10054e1e:	2206      	movs	r2, #6
10054e20:	f7fc f93a 	bl	10051098 <BLEPLAT_MemCpy>
10054e24:	bd80      	pop	{r7, pc}
10054e26:	46c0      	nop			@ (mov r8, r8)

10054e28 <__arm_cp.51_0>:
10054e28:	20002414 	.word	0x20002414

10054e2c <GAP_get_static_random_address>:
10054e2c:	b580      	push	{r7, lr}
10054e2e:	4903      	ldr	r1, [pc, #12]	@ (10054e3c <__arm_cp.52_0>)
10054e30:	6809      	ldr	r1, [r1, #0]
10054e32:	3160      	adds	r1, #96	@ 0x60
10054e34:	2206      	movs	r2, #6
10054e36:	f7fc f92f 	bl	10051098 <BLEPLAT_MemCpy>
10054e3a:	bd80      	pop	{r7, pc}

10054e3c <__arm_cp.52_0>:
10054e3c:	2000241c 	.word	0x2000241c

10054e40 <GAP_enable_rpa_change_at_timeout>:
10054e40:	4902      	ldr	r1, [pc, #8]	@ (10054e4c <__arm_cp.53_0>)
10054e42:	6809      	ldr	r1, [r1, #0]
10054e44:	226c      	movs	r2, #108	@ 0x6c
10054e46:	5488      	strb	r0, [r1, r2]
10054e48:	4770      	bx	lr
10054e4a:	46c0      	nop			@ (mov r8, r8)

10054e4c <__arm_cp.53_0>:
10054e4c:	2000241c 	.word	0x2000241c

10054e50 <GAP_check_discoverability_mode>:
10054e50:	1e43      	subs	r3, r0, #1
10054e52:	2b02      	cmp	r3, #2
10054e54:	d309      	bcc.n	10054e6a <GAP_check_discoverability_mode+0x1a>
10054e56:	2800      	cmp	r0, #0
10054e58:	d00c      	beq.n	10054e74 <GAP_check_discoverability_mode+0x24>
10054e5a:	2803      	cmp	r0, #3
10054e5c:	d109      	bne.n	10054e72 <GAP_check_discoverability_mode+0x22>
10054e5e:	2001      	movs	r0, #1
10054e60:	4001      	ands	r1, r0
10054e62:	4249      	negs	r1, r1
10054e64:	2012      	movs	r0, #18
10054e66:	4008      	ands	r0, r1
10054e68:	4770      	bx	lr
10054e6a:	2a00      	cmp	r2, #0
10054e6c:	d101      	bne.n	10054e72 <GAP_check_discoverability_mode+0x22>
10054e6e:	4610      	mov	r0, r2
10054e70:	4770      	bx	lr
10054e72:	2012      	movs	r0, #18
10054e74:	4770      	bx	lr
	...

10054e78 <GAP_advEvtProp_to_advType>:
10054e78:	4601      	mov	r1, r0
10054e7a:	3910      	subs	r1, #16
10054e7c:	2905      	cmp	r1, #5
10054e7e:	d80a      	bhi.n	10054e96 <GAP_advEvtProp_to_advType+0x1e>
10054e80:	2000      	movs	r0, #0
10054e82:	46c0      	nop			@ (mov r8, r8)
10054e84:	4479      	add	r1, pc
10054e86:	7909      	ldrb	r1, [r1, #4]
10054e88:	0049      	lsls	r1, r1, #1
10054e8a:	448f      	add	pc, r1
10054e8c:	090a0802 	.word	0x090a0802
10054e90:	0c08      	.short	0x0c08
10054e92:	2003      	movs	r0, #3
10054e94:	4770      	bx	lr
10054e96:	281d      	cmp	r0, #29
10054e98:	d101      	bne.n	10054e9e <GAP_advEvtProp_to_advType+0x26>
10054e9a:	2001      	movs	r0, #1
10054e9c:	4770      	bx	lr
10054e9e:	2005      	movs	r0, #5
10054ea0:	4770      	bx	lr
10054ea2:	2002      	movs	r0, #2
10054ea4:	4770      	bx	lr
10054ea6:	2004      	movs	r0, #4
10054ea8:	4770      	bx	lr
	...

10054eac <GAP_set_legacy_advertising_configuration>:
10054eac:	b5f0      	push	{r4, r5, r6, r7, lr}
10054eae:	b08b      	sub	sp, #44	@ 0x2c
10054eb0:	4615      	mov	r5, r2
10054eb2:	460f      	mov	r7, r1
10054eb4:	4601      	mov	r1, r0
10054eb6:	06fa      	lsls	r2, r7, #27
10054eb8:	2012      	movs	r0, #18
10054eba:	2a00      	cmp	r2, #0
10054ebc:	d53f      	bpl.n	10054f3e <GAP_set_legacy_advertising_configuration+0x92>
10054ebe:	461c      	mov	r4, r3
10054ec0:	2301      	movs	r3, #1
10054ec2:	039a      	lsls	r2, r3, #14
10054ec4:	4295      	cmp	r5, r2
10054ec6:	d83a      	bhi.n	10054f3e <GAP_set_legacy_advertising_configuration+0x92>
10054ec8:	4294      	cmp	r4, r2
10054eca:	d838      	bhi.n	10054f3e <GAP_set_legacy_advertising_configuration+0x92>
10054ecc:	930a      	str	r3, [sp, #40]	@ 0x28
10054ece:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10054ed0:	9009      	str	r0, [sp, #36]	@ 0x24
10054ed2:	9812      	ldr	r0, [sp, #72]	@ 0x48
10054ed4:	9008      	str	r0, [sp, #32]
10054ed6:	9811      	ldr	r0, [sp, #68]	@ 0x44
10054ed8:	9006      	str	r0, [sp, #24]
10054eda:	9810      	ldr	r0, [sp, #64]	@ 0x40
10054edc:	9007      	str	r0, [sp, #28]
10054ede:	4819      	ldr	r0, [pc, #100]	@ (10054f44 <__arm_cp.2_0>)
10054ee0:	6800      	ldr	r0, [r0, #0]
10054ee2:	6d46      	ldr	r6, [r0, #84]	@ 0x54
10054ee4:	2000      	movs	r0, #0
10054ee6:	9004      	str	r0, [sp, #16]
10054ee8:	7070      	strb	r0, [r6, #1]
10054eea:	7031      	strb	r1, [r6, #0]
10054eec:	f7ff fed2 	bl	10054c94 <GAP_get_own_address_type>
10054ef0:	9005      	str	r0, [sp, #20]
10054ef2:	4638      	mov	r0, r7
10054ef4:	f7ff ffc0 	bl	10054e78 <GAP_advEvtProp_to_advType>
10054ef8:	4602      	mov	r2, r0
10054efa:	7870      	ldrb	r0, [r6, #1]
10054efc:	2120      	movs	r1, #32
10054efe:	4301      	orrs	r1, r0
10054f00:	7071      	strb	r1, [r6, #1]
10054f02:	2a04      	cmp	r2, #4
10054f04:	d808      	bhi.n	10054f18 <GAP_set_legacy_advertising_configuration+0x6c>
10054f06:	2117      	movs	r1, #23
10054f08:	40d1      	lsrs	r1, r2
10054f0a:	07c9      	lsls	r1, r1, #31
10054f0c:	d004      	beq.n	10054f18 <GAP_set_legacy_advertising_configuration+0x6c>
10054f0e:	b251      	sxtb	r1, r2
10054f10:	a30d      	add	r3, pc, #52	@ (adr r3, 10054f48 <__arm_cp.2_0+0x4>)
10054f12:	5c59      	ldrb	r1, [r3, r1]
10054f14:	4308      	orrs	r0, r1
10054f16:	7070      	strb	r0, [r6, #1]
10054f18:	9806      	ldr	r0, [sp, #24]
10054f1a:	9000      	str	r0, [sp, #0]
10054f1c:	9808      	ldr	r0, [sp, #32]
10054f1e:	9001      	str	r0, [sp, #4]
10054f20:	9807      	ldr	r0, [sp, #28]
10054f22:	9002      	str	r0, [sp, #8]
10054f24:	9809      	ldr	r0, [sp, #36]	@ 0x24
10054f26:	9003      	str	r0, [sp, #12]
10054f28:	b2a8      	uxth	r0, r5
10054f2a:	b2a1      	uxth	r1, r4
10054f2c:	9b05      	ldr	r3, [sp, #20]
10054f2e:	f002 fe8d 	bl	10057c4c <hci_le_set_advertising_parameters>
10054f32:	2800      	cmp	r0, #0
10054f34:	990a      	ldr	r1, [sp, #40]	@ 0x28
10054f36:	d102      	bne.n	10054f3e <GAP_set_legacy_advertising_configuration+0x92>
10054f38:	9804      	ldr	r0, [sp, #16]
10054f3a:	74b0      	strb	r0, [r6, #18]
10054f3c:	7431      	strb	r1, [r6, #16]
10054f3e:	b00b      	add	sp, #44	@ 0x2c
10054f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054f42:	46c0      	nop			@ (mov r8, r8)

10054f44 <__arm_cp.2_0>:
10054f44:	2000241c 	.word	0x2000241c
10054f48:	70287028 	.word	0x70287028
10054f4c:	00000030 	.word	0x00000030

10054f50 <GAP_get_advertising_set_index>:
10054f50:	b570      	push	{r4, r5, r6, lr}
10054f52:	4602      	mov	r2, r0
10054f54:	480b      	ldr	r0, [pc, #44]	@ (10054f84 <__arm_cp.4_0>)
10054f56:	7e84      	ldrb	r4, [r0, #26]
10054f58:	480b      	ldr	r0, [pc, #44]	@ (10054f88 <__arm_cp.4_1>)
10054f5a:	6800      	ldr	r0, [r0, #0]
10054f5c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
10054f5e:	3510      	adds	r5, #16
10054f60:	2000      	movs	r0, #0
10054f62:	4603      	mov	r3, r0
10054f64:	429c      	cmp	r4, r3
10054f66:	d008      	beq.n	10054f7a <GAP_get_advertising_set_index+0x2a>
10054f68:	782e      	ldrb	r6, [r5, #0]
10054f6a:	2e00      	cmp	r6, #0
10054f6c:	d008      	beq.n	10054f80 <GAP_get_advertising_set_index+0x30>
10054f6e:	78ae      	ldrb	r6, [r5, #2]
10054f70:	4296      	cmp	r6, r2
10054f72:	d004      	beq.n	10054f7e <GAP_get_advertising_set_index+0x2e>
10054f74:	3514      	adds	r5, #20
10054f76:	1c5b      	adds	r3, r3, #1
10054f78:	e7f4      	b.n	10054f64 <GAP_get_advertising_set_index+0x14>
10054f7a:	4623      	mov	r3, r4
10054f7c:	e000      	b.n	10054f80 <GAP_get_advertising_set_index+0x30>
10054f7e:	2001      	movs	r0, #1
10054f80:	700b      	strb	r3, [r1, #0]
10054f82:	bd70      	pop	{r4, r5, r6, pc}

10054f84 <__arm_cp.4_0>:
10054f84:	2000247c 	.word	0x2000247c

10054f88 <__arm_cp.4_1>:
10054f88:	2000241c 	.word	0x2000241c

10054f8c <GAP_set_legacy_advertising_enable>:
10054f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054f8e:	4604      	mov	r4, r0
10054f90:	4819      	ldr	r0, [pc, #100]	@ (10054ff8 <__arm_cp.5_0>)
10054f92:	6800      	ldr	r0, [r0, #0]
10054f94:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10054f96:	2c00      	cmp	r4, #0
10054f98:	d00d      	beq.n	10054fb6 <GAP_set_legacy_advertising_enable+0x2a>
10054f9a:	7c38      	ldrb	r0, [r7, #16]
10054f9c:	2800      	cmp	r0, #0
10054f9e:	d023      	beq.n	10054fe8 <GAP_set_legacy_advertising_enable+0x5c>
10054fa0:	2000      	movs	r0, #0
10054fa2:	4601      	mov	r1, r0
10054fa4:	f000 f82a 	bl	10054ffc <GAP_check_flags>
10054fa8:	4605      	mov	r5, r0
10054faa:	2800      	cmp	r0, #0
10054fac:	d122      	bne.n	10054ff4 <GAP_set_legacy_advertising_enable+0x68>
10054fae:	f7ff fee7 	bl	10054d80 <GAP_generate_new_rpa>
10054fb2:	4606      	mov	r6, r0
10054fb4:	e000      	b.n	10054fb8 <GAP_set_legacy_advertising_enable+0x2c>
10054fb6:	260c      	movs	r6, #12
10054fb8:	4620      	mov	r0, r4
10054fba:	f002 fea7 	bl	10057d0c <hci_le_set_advertising_enable>
10054fbe:	4605      	mov	r5, r0
10054fc0:	2800      	cmp	r0, #0
10054fc2:	d117      	bne.n	10054ff4 <GAP_set_legacy_advertising_enable+0x68>
10054fc4:	2500      	movs	r5, #0
10054fc6:	4620      	mov	r0, r4
10054fc8:	4629      	mov	r1, r5
10054fca:	462a      	mov	r2, r5
10054fcc:	f000 f870 	bl	100550b0 <GAP_set_discoverability_mode>
10054fd0:	2c00      	cmp	r4, #0
10054fd2:	d00b      	beq.n	10054fec <GAP_set_legacy_advertising_enable+0x60>
10054fd4:	2001      	movs	r0, #1
10054fd6:	7478      	strb	r0, [r7, #17]
10054fd8:	2e00      	cmp	r6, #0
10054fda:	d10b      	bne.n	10054ff4 <GAP_set_legacy_advertising_enable+0x68>
10054fdc:	2500      	movs	r5, #0
10054fde:	4628      	mov	r0, r5
10054fe0:	4629      	mov	r1, r5
10054fe2:	f7ff fea5 	bl	10054d30 <GAP_start_privacy_timer>
10054fe6:	e005      	b.n	10054ff4 <GAP_set_legacy_advertising_enable+0x68>
10054fe8:	25d3      	movs	r5, #211	@ 0xd3
10054fea:	e003      	b.n	10054ff4 <GAP_set_legacy_advertising_enable+0x68>
10054fec:	2500      	movs	r5, #0
10054fee:	747d      	strb	r5, [r7, #17]
10054ff0:	f7ff fe0a 	bl	10054c08 <GAP_stop_privacy_timer>
10054ff4:	4628      	mov	r0, r5
10054ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054ff8 <__arm_cp.5_0>:
10054ff8:	2000241c 	.word	0x2000241c

10054ffc <GAP_check_flags>:
10054ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054ffe:	4a28      	ldr	r2, [pc, #160]	@ (100550a0 <__arm_cp.6_0>)
10055000:	7e92      	ldrb	r2, [r2, #26]
10055002:	2512      	movs	r5, #18
10055004:	428a      	cmp	r2, r1
10055006:	d925      	bls.n	10055054 <GAP_check_flags+0x58>
10055008:	2800      	cmp	r0, #0
1005500a:	d100      	bne.n	1005500e <GAP_check_flags+0x12>
1005500c:	4601      	mov	r1, r0
1005500e:	2214      	movs	r2, #20
10055010:	434a      	muls	r2, r1
10055012:	4824      	ldr	r0, [pc, #144]	@ (100550a4 <__arm_cp.6_1>)
10055014:	6800      	ldr	r0, [r0, #0]
10055016:	6d43      	ldr	r3, [r0, #84]	@ 0x54
10055018:	1899      	adds	r1, r3, r2
1005501a:	784c      	ldrb	r4, [r1, #1]
1005501c:	06a0      	lsls	r0, r4, #26
1005501e:	0fc6      	lsrs	r6, r0, #31
10055020:	2000      	movs	r0, #0
10055022:	2e00      	cmp	r6, #0
10055024:	d002      	beq.n	1005502c <GAP_check_flags+0x30>
10055026:	2710      	movs	r7, #16
10055028:	4027      	ands	r7, r4
1005502a:	d114      	bne.n	10055056 <GAP_check_flags+0x5a>
1005502c:	2e00      	cmp	r6, #0
1005502e:	d102      	bne.n	10055036 <GAP_check_flags+0x3a>
10055030:	2608      	movs	r6, #8
10055032:	4034      	ands	r4, r6
10055034:	d10f      	bne.n	10055056 <GAP_check_flags+0x5a>
10055036:	5c9e      	ldrb	r6, [r3, r2]
10055038:	684c      	ldr	r4, [r1, #4]
1005503a:	8988      	ldrh	r0, [r1, #12]
1005503c:	4621      	mov	r1, r4
1005503e:	f000 f8bb 	bl	100551b8 <GAP_search_flags_index>
10055042:	4919      	ldr	r1, [pc, #100]	@ (100550a8 <__arm_cp.6_2>)
10055044:	4288      	cmp	r0, r1
10055046:	d008      	beq.n	1005505a <GAP_check_flags+0x5e>
10055048:	1900      	adds	r0, r0, r4
1005504a:	7881      	ldrb	r1, [r0, #2]
1005504c:	0748      	lsls	r0, r1, #29
1005504e:	d40b      	bmi.n	10055068 <GAP_check_flags+0x6c>
10055050:	20d4      	movs	r0, #212	@ 0xd4
10055052:	e000      	b.n	10055056 <GAP_check_flags+0x5a>
10055054:	4628      	mov	r0, r5
10055056:	b2c0      	uxtb	r0, r0
10055058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005505a:	2e03      	cmp	r6, #3
1005505c:	4628      	mov	r0, r5
1005505e:	d8fa      	bhi.n	10055056 <GAP_check_flags+0x5a>
10055060:	00f1      	lsls	r1, r6, #3
10055062:	4812      	ldr	r0, [pc, #72]	@ (100550ac <__arm_cp.6_3>)
10055064:	40c8      	lsrs	r0, r1
10055066:	e7f6      	b.n	10055056 <GAP_check_flags+0x5a>
10055068:	2e03      	cmp	r6, #3
1005506a:	4628      	mov	r0, r5
1005506c:	d8f3      	bhi.n	10055056 <GAP_check_flags+0x5a>
1005506e:	46c0      	nop			@ (mov r8, r8)
10055070:	447e      	add	r6, pc
10055072:	7936      	ldrb	r6, [r6, #4]
10055074:	0076      	lsls	r6, r6, #1
10055076:	44b7      	add	pc, r6
10055078:	010d0601 	.word	0x010d0601
1005507c:	2003      	movs	r0, #3
1005507e:	4001      	ands	r1, r0
10055080:	d105      	bne.n	1005508e <GAP_check_flags+0x92>
10055082:	4608      	mov	r0, r1
10055084:	e7e7      	b.n	10055056 <GAP_check_flags+0x5a>
10055086:	2003      	movs	r0, #3
10055088:	4001      	ands	r1, r0
1005508a:	2901      	cmp	r1, #1
1005508c:	d006      	beq.n	1005509c <GAP_check_flags+0xa0>
1005508e:	202b      	movs	r0, #43	@ 0x2b
10055090:	43c0      	mvns	r0, r0
10055092:	e7e0      	b.n	10055056 <GAP_check_flags+0x5a>
10055094:	2003      	movs	r0, #3
10055096:	4001      	ands	r1, r0
10055098:	2902      	cmp	r1, #2
1005509a:	d1f8      	bne.n	1005508e <GAP_check_flags+0x92>
1005509c:	2000      	movs	r0, #0
1005509e:	e7da      	b.n	10055056 <GAP_check_flags+0x5a>

100550a0 <__arm_cp.6_0>:
100550a0:	2000247c 	.word	0x2000247c

100550a4 <__arm_cp.6_1>:
100550a4:	2000241c 	.word	0x2000241c

100550a8 <__arm_cp.6_2>:
100550a8:	0000ffff 	.word	0x0000ffff

100550ac <__arm_cp.6_3>:
100550ac:	00d4d400 	.word	0x00d4d400

100550b0 <GAP_set_discoverability_mode>:
100550b0:	b570      	push	{r4, r5, r6, lr}
100550b2:	4603      	mov	r3, r0
100550b4:	2900      	cmp	r1, #0
100550b6:	d100      	bne.n	100550ba <GAP_set_discoverability_mode+0xa>
100550b8:	460a      	mov	r2, r1
100550ba:	4829      	ldr	r0, [pc, #164]	@ (10055160 <__arm_cp.7_0>)
100550bc:	6800      	ldr	r0, [r0, #0]
100550be:	6d41      	ldr	r1, [r0, #84]	@ 0x54
100550c0:	2b01      	cmp	r3, #1
100550c2:	d10c      	bne.n	100550de <GAP_set_discoverability_mode+0x2e>
100550c4:	2314      	movs	r3, #20
100550c6:	4353      	muls	r3, r2
100550c8:	5cca      	ldrb	r2, [r1, r3]
100550ca:	2a01      	cmp	r2, #1
100550cc:	d033      	beq.n	10055136 <GAP_set_discoverability_mode+0x86>
100550ce:	2a02      	cmp	r2, #2
100550d0:	d13e      	bne.n	10055150 <GAP_set_discoverability_mode+0xa0>
100550d2:	18ca      	adds	r2, r1, r3
100550d4:	7894      	ldrb	r4, [r2, #2]
100550d6:	2004      	movs	r0, #4
100550d8:	4320      	orrs	r0, r4
100550da:	7090      	strb	r0, [r2, #2]
100550dc:	e03a      	b.n	10055154 <GAP_set_discoverability_mode+0xa4>
100550de:	2314      	movs	r3, #20
100550e0:	4353      	muls	r3, r2
100550e2:	18c9      	adds	r1, r1, r3
100550e4:	1c8e      	adds	r6, r1, #2
100550e6:	7889      	ldrb	r1, [r1, #2]
100550e8:	0789      	lsls	r1, r1, #30
100550ea:	d521      	bpl.n	10055130 <GAP_set_discoverability_mode+0x80>
100550ec:	2400      	movs	r4, #0
100550ee:	4621      	mov	r1, r4
100550f0:	f00c f8db 	bl	100612aa <CST_stop>
100550f4:	481b      	ldr	r0, [pc, #108]	@ (10055164 <__arm_cp.7_1>)
100550f6:	6800      	ldr	r0, [r0, #0]
100550f8:	214e      	movs	r1, #78	@ 0x4e
100550fa:	5c40      	ldrb	r0, [r0, r1]
100550fc:	07c0      	lsls	r0, r0, #31
100550fe:	d017      	beq.n	10055130 <GAP_set_discoverability_mode+0x80>
10055100:	4819      	ldr	r0, [pc, #100]	@ (10055168 <__arm_cp.7_2>)
10055102:	6800      	ldr	r0, [r0, #0]
10055104:	6980      	ldr	r0, [r0, #24]
10055106:	2244      	movs	r2, #68	@ 0x44
10055108:	2502      	movs	r5, #2
1005510a:	4629      	mov	r1, r5
1005510c:	462b      	mov	r3, r5
1005510e:	f7fe fd0f 	bl	10053b30 <aci_event_fifo_push_header>
10055112:	2800      	cmp	r0, #0
10055114:	d00c      	beq.n	10055130 <GAP_set_discoverability_mode+0x80>
10055116:	4601      	mov	r1, r0
10055118:	7185      	strb	r5, [r0, #6]
1005511a:	71c4      	strb	r4, [r0, #7]
1005511c:	7204      	strb	r4, [r0, #8]
1005511e:	20ff      	movs	r0, #255	@ 0xff
10055120:	7148      	strb	r0, [r1, #5]
10055122:	2082      	movs	r0, #130	@ 0x82
10055124:	7108      	strb	r0, [r1, #4]
10055126:	2004      	movs	r0, #4
10055128:	7248      	strb	r0, [r1, #9]
1005512a:	4628      	mov	r0, r5
1005512c:	f7fe fd9d 	bl	10053c6a <aci_event_fifo_push>
10055130:	2000      	movs	r0, #0
10055132:	7030      	strb	r0, [r6, #0]
10055134:	bd70      	pop	{r4, r5, r6, pc}
10055136:	18c9      	adds	r1, r1, r3
10055138:	784a      	ldrb	r2, [r1, #1]
1005513a:	788b      	ldrb	r3, [r1, #2]
1005513c:	4313      	orrs	r3, r2
1005513e:	2202      	movs	r2, #2
10055140:	431a      	orrs	r2, r3
10055142:	708a      	strb	r2, [r1, #2]
10055144:	2100      	movs	r1, #0
10055146:	2201      	movs	r2, #1
10055148:	4b08      	ldr	r3, [pc, #32]	@ (1005516c <__arm_cp.7_3>)
1005514a:	f00c f8e4 	bl	10061316 <CST_start>
1005514e:	bd70      	pop	{r4, r5, r6, pc}
10055150:	18c8      	adds	r0, r1, r3
10055152:	7880      	ldrb	r0, [r0, #2]
10055154:	18c9      	adds	r1, r1, r3
10055156:	784a      	ldrb	r2, [r1, #1]
10055158:	4302      	orrs	r2, r0
1005515a:	708a      	strb	r2, [r1, #2]
1005515c:	bd70      	pop	{r4, r5, r6, pc}
1005515e:	46c0      	nop			@ (mov r8, r8)

10055160 <__arm_cp.7_0>:
10055160:	2000241c 	.word	0x2000241c

10055164 <__arm_cp.7_1>:
10055164:	20002468 	.word	0x20002468

10055168 <__arm_cp.7_2>:
10055168:	20002418 	.word	0x20002418

1005516c <__arm_cp.7_3>:
1005516c:	0002bf20 	.word	0x0002bf20

10055170 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
10055170:	b580      	push	{r7, lr}
10055172:	f000 f801 	bl	10055178 <GAP_suspend_resume_active_advertising_sets_legacy>
10055176:	bd80      	pop	{r7, pc}

10055178 <GAP_suspend_resume_active_advertising_sets_legacy>:
10055178:	b580      	push	{r7, lr}
1005517a:	4905      	ldr	r1, [pc, #20]	@ (10055190 <__arm_cp.11_0>)
1005517c:	6809      	ldr	r1, [r1, #0]
1005517e:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10055180:	7c49      	ldrb	r1, [r1, #17]
10055182:	2901      	cmp	r1, #1
10055184:	d102      	bne.n	1005518c <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10055186:	f002 fdc1 	bl	10057d0c <hci_le_set_advertising_enable>
1005518a:	bd80      	pop	{r7, pc}
1005518c:	2000      	movs	r0, #0
1005518e:	bd80      	pop	{r7, pc}

10055190 <__arm_cp.11_0>:
10055190:	2000241c 	.word	0x2000241c

10055194 <GAP_set_legacy_advertising_data>:
10055194:	b5b0      	push	{r4, r5, r7, lr}
10055196:	460c      	mov	r4, r1
10055198:	4605      	mov	r5, r0
1005519a:	b2c0      	uxtb	r0, r0
1005519c:	f008 fe9e 	bl	1005dedc <ll_set_legacy_advertising_data_ptr>
100551a0:	2800      	cmp	r0, #0
100551a2:	d000      	beq.n	100551a6 <GAP_set_legacy_advertising_data+0x12>
100551a4:	bdb0      	pop	{r4, r5, r7, pc}
100551a6:	4903      	ldr	r1, [pc, #12]	@ (100551b4 <__arm_cp.12_0>)
100551a8:	6809      	ldr	r1, [r1, #0]
100551aa:	6d49      	ldr	r1, [r1, #84]	@ 0x54
100551ac:	818d      	strh	r5, [r1, #12]
100551ae:	604c      	str	r4, [r1, #4]
100551b0:	bdb0      	pop	{r4, r5, r7, pc}
100551b2:	46c0      	nop			@ (mov r8, r8)

100551b4 <__arm_cp.12_0>:
100551b4:	2000241c 	.word	0x2000241c

100551b8 <GAP_search_flags_index>:
100551b8:	b5b0      	push	{r4, r5, r7, lr}
100551ba:	4a0a      	ldr	r2, [pc, #40]	@ (100551e4 <__arm_cp.16_0>)
100551bc:	2803      	cmp	r0, #3
100551be:	d30f      	bcc.n	100551e0 <GAP_search_flags_index+0x28>
100551c0:	2300      	movs	r3, #0
100551c2:	b29d      	uxth	r5, r3
100551c4:	5d4c      	ldrb	r4, [r1, r5]
100551c6:	2c02      	cmp	r4, #2
100551c8:	d103      	bne.n	100551d2 <GAP_search_flags_index+0x1a>
100551ca:	186d      	adds	r5, r5, r1
100551cc:	786d      	ldrb	r5, [r5, #1]
100551ce:	2d01      	cmp	r5, #1
100551d0:	d005      	beq.n	100551de <GAP_search_flags_index+0x26>
100551d2:	191b      	adds	r3, r3, r4
100551d4:	1c5b      	adds	r3, r3, #1
100551d6:	b29c      	uxth	r4, r3
100551d8:	4284      	cmp	r4, r0
100551da:	d3f2      	bcc.n	100551c2 <GAP_search_flags_index+0xa>
100551dc:	e000      	b.n	100551e0 <GAP_search_flags_index+0x28>
100551de:	461a      	mov	r2, r3
100551e0:	b290      	uxth	r0, r2
100551e2:	bdb0      	pop	{r4, r5, r7, pc}

100551e4 <__arm_cp.16_0>:
100551e4:	0000ffff 	.word	0x0000ffff

100551e8 <GAP_check_adv_status>:
100551e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100551ea:	4605      	mov	r5, r0
100551ec:	2600      	movs	r6, #0
100551ee:	7006      	strb	r6, [r0, #0]
100551f0:	2401      	movs	r4, #1
100551f2:	9100      	str	r1, [sp, #0]
100551f4:	700c      	strb	r4, [r1, #0]
100551f6:	4816      	ldr	r0, [pc, #88]	@ (10055250 <__arm_cp.17_0>)
100551f8:	6800      	ldr	r0, [r0, #0]
100551fa:	6d47      	ldr	r7, [r0, #84]	@ 0x54
100551fc:	f7ff fb86 	bl	1005490c <gap_extended_adv_scan_supported>
10055200:	2800      	cmp	r0, #0
10055202:	d001      	beq.n	10055208 <GAP_check_adv_status+0x20>
10055204:	4813      	ldr	r0, [pc, #76]	@ (10055254 <__arm_cp.17_1>)
10055206:	7e84      	ldrb	r4, [r0, #26]
10055208:	b2e1      	uxtb	r1, r4
1005520a:	3711      	adds	r7, #17
1005520c:	4630      	mov	r0, r6
1005520e:	4632      	mov	r2, r6
10055210:	2900      	cmp	r1, #0
10055212:	d00f      	beq.n	10055234 <GAP_check_adv_status+0x4c>
10055214:	783b      	ldrb	r3, [r7, #0]
10055216:	2b00      	cmp	r3, #0
10055218:	d009      	beq.n	1005522e <GAP_check_adv_status+0x46>
1005521a:	2b02      	cmp	r3, #2
1005521c:	d100      	bne.n	10055220 <GAP_check_adv_status+0x38>
1005521e:	2001      	movs	r0, #1
10055220:	463a      	mov	r2, r7
10055222:	3a0f      	subs	r2, #15
10055224:	7813      	ldrb	r3, [r2, #0]
10055226:	2201      	movs	r2, #1
10055228:	079b      	lsls	r3, r3, #30
1005522a:	d500      	bpl.n	1005522e <GAP_check_adv_status+0x46>
1005522c:	4616      	mov	r6, r2
1005522e:	3714      	adds	r7, #20
10055230:	1e49      	subs	r1, r1, #1
10055232:	e7ed      	b.n	10055210 <GAP_check_adv_status+0x28>
10055234:	2a01      	cmp	r2, #1
10055236:	d101      	bne.n	1005523c <GAP_check_adv_status+0x54>
10055238:	2101      	movs	r1, #1
1005523a:	7029      	strb	r1, [r5, #0]
1005523c:	2801      	cmp	r0, #1
1005523e:	d002      	beq.n	10055246 <GAP_check_adv_status+0x5e>
10055240:	b2f0      	uxtb	r0, r6
10055242:	2801      	cmp	r0, #1
10055244:	d102      	bne.n	1005524c <GAP_check_adv_status+0x64>
10055246:	2000      	movs	r0, #0
10055248:	9900      	ldr	r1, [sp, #0]
1005524a:	7008      	strb	r0, [r1, #0]
1005524c:	b2d0      	uxtb	r0, r2
1005524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055250 <__arm_cp.17_0>:
10055250:	2000241c 	.word	0x2000241c

10055254 <__arm_cp.17_1>:
10055254:	2000247c 	.word	0x2000247c

10055258 <GAP_ResumeAdvertising_ucfg_weak>:
10055258:	b580      	push	{r7, lr}
1005525a:	2001      	movs	r0, #1
1005525c:	f7ff ff8c 	bl	10055178 <GAP_suspend_resume_active_advertising_sets_legacy>
10055260:	bd80      	pop	{r7, pc}
	...

10055264 <GAT_att_cmn_init>:
10055264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055266:	2001      	movs	r0, #1
10055268:	2198      	movs	r1, #152	@ 0x98
1005526a:	f00a f9d5 	bl	1005f618 <csmem_mem_0_assign>
1005526e:	4e2b      	ldr	r6, [pc, #172]	@ (1005531c <__arm_cp.1_0>)
10055270:	6030      	str	r0, [r6, #0]
10055272:	4f2b      	ldr	r7, [pc, #172]	@ (10055320 <__arm_cp.1_1>)
10055274:	7af8      	ldrb	r0, [r7, #11]
10055276:	7b39      	ldrb	r1, [r7, #12]
10055278:	1808      	adds	r0, r1, r0
1005527a:	2414      	movs	r4, #20
1005527c:	4621      	mov	r1, r4
1005527e:	f00a f9cb 	bl	1005f618 <csmem_mem_0_assign>
10055282:	6832      	ldr	r2, [r6, #0]
10055284:	2500      	movs	r5, #0
10055286:	6355      	str	r5, [r2, #52]	@ 0x34
10055288:	62d5      	str	r5, [r2, #44]	@ 0x2c
1005528a:	7af9      	ldrb	r1, [r7, #11]
1005528c:	4603      	mov	r3, r0
1005528e:	462f      	mov	r7, r5
10055290:	42b9      	cmp	r1, r7
10055292:	d00a      	beq.n	100552aa <GAT_att_cmn_init+0x46>
10055294:	611d      	str	r5, [r3, #16]
10055296:	705f      	strb	r7, [r3, #1]
10055298:	701f      	strb	r7, [r3, #0]
1005529a:	6832      	ldr	r2, [r6, #0]
1005529c:	62d3      	str	r3, [r2, #44]	@ 0x2c
1005529e:	4625      	mov	r5, r4
100552a0:	437d      	muls	r5, r7
100552a2:	1945      	adds	r5, r0, r5
100552a4:	3314      	adds	r3, #20
100552a6:	1c7f      	adds	r7, r7, #1
100552a8:	e7f2      	b.n	10055290 <GAT_att_cmn_init+0x2c>
100552aa:	2300      	movs	r3, #0
100552ac:	6313      	str	r3, [r2, #48]	@ 0x30
100552ae:	4a1c      	ldr	r2, [pc, #112]	@ (10055320 <__arm_cp.1_1>)
100552b0:	7b12      	ldrb	r2, [r2, #12]
100552b2:	1852      	adds	r2, r2, r1
100552b4:	b2cd      	uxtb	r5, r1
100552b6:	42aa      	cmp	r2, r5
100552b8:	d90a      	bls.n	100552d0 <GAT_att_cmn_init+0x6c>
100552ba:	4365      	muls	r5, r4
100552bc:	27ff      	movs	r7, #255	@ 0xff
100552be:	5547      	strb	r7, [r0, r5]
100552c0:	1945      	adds	r5, r0, r5
100552c2:	612b      	str	r3, [r5, #16]
100552c4:	7069      	strb	r1, [r5, #1]
100552c6:	6833      	ldr	r3, [r6, #0]
100552c8:	631d      	str	r5, [r3, #48]	@ 0x30
100552ca:	1c49      	adds	r1, r1, #1
100552cc:	462b      	mov	r3, r5
100552ce:	e7f1      	b.n	100552b4 <GAT_att_cmn_init+0x50>
100552d0:	0690      	lsls	r0, r2, #26
100552d2:	0e00      	lsrs	r0, r0, #24
100552d4:	1c41      	adds	r1, r0, #1
100552d6:	4c13      	ldr	r4, [pc, #76]	@ (10055324 <__arm_cp.1_2>)
100552d8:	2201      	movs	r2, #1
100552da:	4620      	mov	r0, r4
100552dc:	f00a f98a 	bl	1005f5f4 <csmem_mem_assign>
100552e0:	6831      	ldr	r1, [r6, #0]
100552e2:	6208      	str	r0, [r1, #32]
100552e4:	4d0e      	ldr	r5, [pc, #56]	@ (10055320 <__arm_cp.1_1>)
100552e6:	7ae8      	ldrb	r0, [r5, #11]
100552e8:	7b29      	ldrb	r1, [r5, #12]
100552ea:	1808      	adds	r0, r1, r0
100552ec:	0680      	lsls	r0, r0, #26
100552ee:	0e01      	lsrs	r1, r0, #24
100552f0:	2202      	movs	r2, #2
100552f2:	4620      	mov	r0, r4
100552f4:	f00a f97e 	bl	1005f5f4 <csmem_mem_assign>
100552f8:	6834      	ldr	r4, [r6, #0]
100552fa:	6260      	str	r0, [r4, #36]	@ 0x24
100552fc:	7ae8      	ldrb	r0, [r5, #11]
100552fe:	7b29      	ldrb	r1, [r5, #12]
10055300:	1808      	adds	r0, r1, r0
10055302:	0680      	lsls	r0, r0, #26
10055304:	0e01      	lsrs	r1, r0, #24
10055306:	4a08      	ldr	r2, [pc, #32]	@ (10055328 <__arm_cp.1_3>)
10055308:	2307      	movs	r3, #7
1005530a:	4620      	mov	r0, r4
1005530c:	f00b ffb8 	bl	10061280 <CST_init>
10055310:	f000 f9f2 	bl	100556f8 <GAT_att_srv_init>
10055314:	f00d fbfc 	bl	10062b10 <GAT_att_clt_init>
10055318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005531a:	46c0      	nop			@ (mov r8, r8)

1005531c <__arm_cp.1_0>:
1005531c:	20002420 	.word	0x20002420

10055320 <__arm_cp.1_1>:
10055320:	2000247c 	.word	0x2000247c

10055324 <__arm_cp.1_2>:
10055324:	20002478 	.word	0x20002478

10055328 <__arm_cp.1_3>:
10055328:	1005532d 	.word	0x1005532d

1005532c <GAT_att_cmn_timeout_cb_wrapper>:
1005532c:	b580      	push	{r7, lr}
1005532e:	6940      	ldr	r0, [r0, #20]
10055330:	4901      	ldr	r1, [pc, #4]	@ (10055338 <__arm_cp.2_0>)
10055332:	f00c f87e 	bl	10061432 <cst_sharedCallback>
10055336:	bd80      	pop	{r7, pc}

10055338 <__arm_cp.2_0>:
10055338:	100556a5 	.word	0x100556a5

1005533c <GAT_att_cmn_timer_expire_tsk>:
1005533c:	b5e0      	push	{r5, r6, r7, lr}
1005533e:	2000      	movs	r0, #0
10055340:	9000      	str	r0, [sp, #0]
10055342:	4b06      	ldr	r3, [pc, #24]	@ (1005535c <__arm_cp.4_0>)
10055344:	4601      	mov	r1, r0
10055346:	4602      	mov	r2, r0
10055348:	f000 f80a 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
1005534c:	2800      	cmp	r0, #0
1005534e:	d004      	beq.n	1005535a <GAT_att_cmn_timer_expire_tsk+0x1e>
10055350:	2007      	movs	r0, #7
10055352:	f00b ff37 	bl	100611c4 <tsk_notify_idx>
10055356:	f7fb f8b8 	bl	100504ca <BLE_STACK_ProcessRequest>
1005535a:	bd8c      	pop	{r2, r3, r7, pc}

1005535c <__arm_cp.4_0>:
1005535c:	100553bd 	.word	0x100553bd

10055360 <GAT_att_cmn_for_each_ch_descr>:
10055360:	b5f0      	push	{r4, r5, r6, r7, lr}
10055362:	b085      	sub	sp, #20
10055364:	9304      	str	r3, [sp, #16]
10055366:	9201      	str	r2, [sp, #4]
10055368:	9102      	str	r1, [sp, #8]
1005536a:	4607      	mov	r7, r0
1005536c:	2002      	movs	r0, #2
1005536e:	4038      	ands	r0, r7
10055370:	9003      	str	r0, [sp, #12]
10055372:	2401      	movs	r4, #1
10055374:	403c      	ands	r4, r7
10055376:	4810      	ldr	r0, [pc, #64]	@ (100553b8 <__arm_cp.5_0>)
10055378:	6805      	ldr	r5, [r0, #0]
1005537a:	3534      	adds	r5, #52	@ 0x34
1005537c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005537e:	682d      	ldr	r5, [r5, #0]
10055380:	2d00      	cmp	r5, #0
10055382:	d016      	beq.n	100553b2 <GAT_att_cmn_for_each_ch_descr+0x52>
10055384:	2f00      	cmp	r7, #0
10055386:	d00c      	beq.n	100553a2 <GAT_att_cmn_for_each_ch_descr+0x42>
10055388:	2c00      	cmp	r4, #0
1005538a:	d003      	beq.n	10055394 <GAT_att_cmn_for_each_ch_descr+0x34>
1005538c:	8928      	ldrh	r0, [r5, #8]
1005538e:	9902      	ldr	r1, [sp, #8]
10055390:	4288      	cmp	r0, r1
10055392:	d10c      	bne.n	100553ae <GAT_att_cmn_for_each_ch_descr+0x4e>
10055394:	9803      	ldr	r0, [sp, #12]
10055396:	2800      	cmp	r0, #0
10055398:	d003      	beq.n	100553a2 <GAT_att_cmn_for_each_ch_descr+0x42>
1005539a:	8968      	ldrh	r0, [r5, #10]
1005539c:	9901      	ldr	r1, [sp, #4]
1005539e:	4288      	cmp	r0, r1
100553a0:	d105      	bne.n	100553ae <GAT_att_cmn_for_each_ch_descr+0x4e>
100553a2:	4628      	mov	r0, r5
100553a4:	4631      	mov	r1, r6
100553a6:	9a04      	ldr	r2, [sp, #16]
100553a8:	4790      	blx	r2
100553aa:	2800      	cmp	r0, #0
100553ac:	d102      	bne.n	100553b4 <GAT_att_cmn_for_each_ch_descr+0x54>
100553ae:	3510      	adds	r5, #16
100553b0:	e7e5      	b.n	1005537e <GAT_att_cmn_for_each_ch_descr+0x1e>
100553b2:	2000      	movs	r0, #0
100553b4:	b005      	add	sp, #20
100553b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100553b8 <__arm_cp.5_0>:
100553b8:	20002420 	.word	0x20002420

100553bc <GAT_att_cmn_handle_disconnec_iterate_f>:
100553bc:	b5b0      	push	{r4, r5, r7, lr}
100553be:	4604      	mov	r4, r0
100553c0:	8880      	ldrh	r0, [r0, #4]
100553c2:	2500      	movs	r5, #0
100553c4:	05c0      	lsls	r0, r0, #23
100553c6:	d401      	bmi.n	100553cc <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
100553c8:	4628      	mov	r0, r5
100553ca:	e006      	b.n	100553da <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
100553cc:	8962      	ldrh	r2, [r4, #10]
100553ce:	8921      	ldrh	r1, [r4, #8]
100553d0:	2002      	movs	r0, #2
100553d2:	f00c fd83 	bl	10061edc <aci_gatt_proc_timeout_event_push_noinline>
100553d6:	2800      	cmp	r0, #0
100553d8:	d000      	beq.n	100553dc <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
100553da:	bdb0      	pop	{r4, r5, r7, pc}
100553dc:	8920      	ldrh	r0, [r4, #8]
100553de:	8961      	ldrh	r1, [r4, #10]
100553e0:	2904      	cmp	r1, #4
100553e2:	d102      	bne.n	100553ea <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
100553e4:	f000 f8ac 	bl	10055540 <GAT_att_cmn_disconnection>
100553e8:	e7ee      	b.n	100553c8 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
100553ea:	f000 fb17 	bl	10055a1c <GAT_att_srv_bearer_close>
100553ee:	8961      	ldrh	r1, [r4, #10]
100553f0:	8920      	ldrh	r0, [r4, #8]
100553f2:	f00d fc7e 	bl	10062cf2 <GAT_att_clt_bearer_close>
100553f6:	2000      	movs	r0, #0
100553f8:	8120      	strh	r0, [r4, #8]
100553fa:	4909      	ldr	r1, [pc, #36]	@ (10055420 <__arm_cp.6_0>)
100553fc:	6809      	ldr	r1, [r1, #0]
100553fe:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10055400:	42a3      	cmp	r3, r4
10055402:	d005      	beq.n	10055410 <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
10055404:	461a      	mov	r2, r3
10055406:	691b      	ldr	r3, [r3, #16]
10055408:	42a3      	cmp	r3, r4
1005540a:	d1fb      	bne.n	10055404 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
1005540c:	3210      	adds	r2, #16
1005540e:	e001      	b.n	10055414 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
10055410:	460a      	mov	r2, r1
10055412:	3234      	adds	r2, #52	@ 0x34
10055414:	6923      	ldr	r3, [r4, #16]
10055416:	6013      	str	r3, [r2, #0]
10055418:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
1005541a:	6122      	str	r2, [r4, #16]
1005541c:	630c      	str	r4, [r1, #48]	@ 0x30
1005541e:	bdb0      	pop	{r4, r5, r7, pc}

10055420 <__arm_cp.6_0>:
10055420:	20002420 	.word	0x20002420

10055424 <GAT_att_cmn_tx_pool_evt_tsk>:
10055424:	b580      	push	{r7, lr}
10055426:	2000      	movs	r0, #0
10055428:	f7fe f9c8 	bl	100537bc <ACL_pkt_get_available_mem_buffers>
1005542c:	490d      	ldr	r1, [pc, #52]	@ (10055464 <__arm_cp.8_0>)
1005542e:	8a09      	ldrh	r1, [r1, #16]
10055430:	3125      	adds	r1, #37	@ 0x25
10055432:	0949      	lsrs	r1, r1, #5
10055434:	4288      	cmp	r0, r1
10055436:	d90f      	bls.n	10055458 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
10055438:	1c49      	adds	r1, r1, #1
1005543a:	f7ea ff01 	bl	10040240 <__udivsi3>
1005543e:	4602      	mov	r2, r0
10055440:	2042      	movs	r0, #66	@ 0x42
10055442:	2100      	movs	r1, #0
10055444:	f00c fe86 	bl	10062154 <aci_gatt_tx_pool_available_event_push_noinline>
10055448:	2800      	cmp	r0, #0
1005544a:	d004      	beq.n	10055456 <GAT_att_cmn_tx_pool_evt_tsk+0x32>
1005544c:	2008      	movs	r0, #8
1005544e:	f00b feb9 	bl	100611c4 <tsk_notify_idx>
10055452:	f7fb f83a 	bl	100504ca <BLE_STACK_ProcessRequest>
10055456:	bd80      	pop	{r7, pc}
10055458:	2008      	movs	r0, #8
1005545a:	2100      	movs	r1, #0
1005545c:	f00b fec4 	bl	100611e8 <tsk_wait_resource_idx>
10055460:	bd80      	pop	{r7, pc}
10055462:	46c0      	nop			@ (mov r8, r8)

10055464 <__arm_cp.8_0>:
10055464:	2000247c 	.word	0x2000247c

10055468 <GAT_att_cmn_rcv>:
10055468:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005546a:	460c      	mov	r4, r1
1005546c:	2800      	cmp	r0, #0
1005546e:	d013      	beq.n	10055498 <GAT_att_cmn_rcv+0x30>
10055470:	8825      	ldrh	r5, [r4, #0]
10055472:	4620      	mov	r0, r4
10055474:	f002 febf 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10055478:	4601      	mov	r1, r0
1005547a:	4628      	mov	r0, r5
1005547c:	f000 f82e 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10055480:	2800      	cmp	r0, #0
10055482:	d009      	beq.n	10055498 <GAT_att_cmn_rcv+0x30>
10055484:	8860      	ldrh	r0, [r4, #2]
10055486:	2800      	cmp	r0, #0
10055488:	d006      	beq.n	10055498 <GAT_att_cmn_rcv+0x30>
1005548a:	89a1      	ldrh	r1, [r4, #12]
1005548c:	291f      	cmp	r1, #31
1005548e:	d808      	bhi.n	100554a2 <GAT_att_cmn_rcv+0x3a>
10055490:	a801      	add	r0, sp, #4
10055492:	8001      	strh	r1, [r0, #0]
10055494:	6860      	ldr	r0, [r4, #4]
10055496:	e00a      	b.n	100554ae <GAT_att_cmn_rcv+0x46>
10055498:	4620      	mov	r0, r4
1005549a:	f7fe f995 	bl	100537c8 <ACL_pkt_release>
1005549e:	2000      	movs	r0, #0
100554a0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100554a2:	6860      	ldr	r0, [r4, #4]
100554a4:	ad01      	add	r5, sp, #4
100554a6:	462a      	mov	r2, r5
100554a8:	f00a f955 	bl	1005f756 <Mem_Buff_get_buff_off>
100554ac:	8829      	ldrh	r1, [r5, #0]
100554ae:	1840      	adds	r0, r0, r1
100554b0:	7900      	ldrb	r0, [r0, #4]
100554b2:	07c1      	lsls	r1, r0, #31
100554b4:	d104      	bne.n	100554c0 <GAT_att_cmn_rcv+0x58>
100554b6:	281b      	cmp	r0, #27
100554b8:	d008      	beq.n	100554cc <GAT_att_cmn_rcv+0x64>
100554ba:	281d      	cmp	r0, #29
100554bc:	d006      	beq.n	100554cc <GAT_att_cmn_rcv+0x64>
100554be:	e009      	b.n	100554d4 <GAT_att_cmn_rcv+0x6c>
100554c0:	281e      	cmp	r0, #30
100554c2:	d303      	bcc.n	100554cc <GAT_att_cmn_rcv+0x64>
100554c4:	2102      	movs	r1, #2
100554c6:	4308      	orrs	r0, r1
100554c8:	2823      	cmp	r0, #35	@ 0x23
100554ca:	d103      	bne.n	100554d4 <GAT_att_cmn_rcv+0x6c>
100554cc:	4620      	mov	r0, r4
100554ce:	f00d fb23 	bl	10062b18 <GAT_att_clt_rcv>
100554d2:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100554d4:	4620      	mov	r0, r4
100554d6:	f000 f927 	bl	10055728 <GAT_att_srv_rcv>
100554da:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100554dc <GAT_att_cmn_get_channel_descr_p>:
100554dc:	4a07      	ldr	r2, [pc, #28]	@ (100554fc <__arm_cp.10_0>)
100554de:	6812      	ldr	r2, [r2, #0]
100554e0:	3234      	adds	r2, #52	@ 0x34
100554e2:	6812      	ldr	r2, [r2, #0]
100554e4:	2a00      	cmp	r2, #0
100554e6:	d007      	beq.n	100554f8 <GAT_att_cmn_get_channel_descr_p+0x1c>
100554e8:	8913      	ldrh	r3, [r2, #8]
100554ea:	4283      	cmp	r3, r0
100554ec:	d102      	bne.n	100554f4 <GAT_att_cmn_get_channel_descr_p+0x18>
100554ee:	8953      	ldrh	r3, [r2, #10]
100554f0:	428b      	cmp	r3, r1
100554f2:	d001      	beq.n	100554f8 <GAT_att_cmn_get_channel_descr_p+0x1c>
100554f4:	3210      	adds	r2, #16
100554f6:	e7f4      	b.n	100554e2 <GAT_att_cmn_get_channel_descr_p+0x6>
100554f8:	4610      	mov	r0, r2
100554fa:	4770      	bx	lr

100554fc <__arm_cp.10_0>:
100554fc:	20002420 	.word	0x20002420

10055500 <GAT_att_cmn_connection>:
10055500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055502:	4604      	mov	r4, r0
10055504:	4e0d      	ldr	r6, [pc, #52]	@ (1005553c <__arm_cp.11_0>)
10055506:	6830      	ldr	r0, [r6, #0]
10055508:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
1005550a:	6929      	ldr	r1, [r5, #16]
1005550c:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005550e:	882f      	ldrh	r7, [r5, #0]
10055510:	2100      	movs	r1, #0
10055512:	2214      	movs	r2, #20
10055514:	4628      	mov	r0, r5
10055516:	f7fb fdcf 	bl	100510b8 <BLEPLAT_MemSet>
1005551a:	2004      	movs	r0, #4
1005551c:	8168      	strh	r0, [r5, #10]
1005551e:	2017      	movs	r0, #23
10055520:	80e8      	strh	r0, [r5, #6]
10055522:	812c      	strh	r4, [r5, #8]
10055524:	802f      	strh	r7, [r5, #0]
10055526:	6830      	ldr	r0, [r6, #0]
10055528:	6b41      	ldr	r1, [r0, #52]	@ 0x34
1005552a:	6345      	str	r5, [r0, #52]	@ 0x34
1005552c:	6129      	str	r1, [r5, #16]
1005552e:	4620      	mov	r0, r4
10055530:	f000 fa70 	bl	10055a14 <GAT_att_srv_connection>
10055534:	4620      	mov	r0, r4
10055536:	f00d fbd8 	bl	10062cea <GAT_att_clt_connection>
1005553a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005553c <__arm_cp.11_0>:
1005553c:	20002420 	.word	0x20002420

10055540 <GAT_att_cmn_disconnection>:
10055540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055542:	4604      	mov	r4, r0
10055544:	f00b fceb 	bl	10060f1e <smp_sap_forget_device_upon_disconnection>
10055548:	481c      	ldr	r0, [pc, #112]	@ (100555bc <__arm_cp.12_0>)
1005554a:	6800      	ldr	r0, [r0, #0]
1005554c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
1005554e:	2e00      	cmp	r6, #0
10055550:	d032      	beq.n	100555b8 <GAT_att_cmn_disconnection+0x78>
10055552:	4637      	mov	r7, r6
10055554:	6936      	ldr	r6, [r6, #16]
10055556:	8938      	ldrh	r0, [r7, #8]
10055558:	42a0      	cmp	r0, r4
1005555a:	d1f8      	bne.n	1005554e <GAT_att_cmn_disconnection+0xe>
1005555c:	2500      	movs	r5, #0
1005555e:	897a      	ldrh	r2, [r7, #10]
10055560:	b2e8      	uxtb	r0, r5
10055562:	2803      	cmp	r0, #3
10055564:	d804      	bhi.n	10055570 <GAT_att_cmn_disconnection+0x30>
10055566:	4621      	mov	r1, r4
10055568:	f000 f82a 	bl	100555c0 <GAT_att_cmn_stop_timer>
1005556c:	1c6d      	adds	r5, r5, #1
1005556e:	e7f6      	b.n	1005555e <GAT_att_cmn_disconnection+0x1e>
10055570:	4620      	mov	r0, r4
10055572:	4611      	mov	r1, r2
10055574:	f000 fa52 	bl	10055a1c <GAT_att_srv_bearer_close>
10055578:	8979      	ldrh	r1, [r7, #10]
1005557a:	4620      	mov	r0, r4
1005557c:	f00d fbb9 	bl	10062cf2 <GAT_att_clt_bearer_close>
10055580:	2000      	movs	r0, #0
10055582:	8138      	strh	r0, [r7, #8]
10055584:	480d      	ldr	r0, [pc, #52]	@ (100555bc <__arm_cp.12_0>)
10055586:	6800      	ldr	r0, [r0, #0]
10055588:	6b42      	ldr	r2, [r0, #52]	@ 0x34
1005558a:	42ba      	cmp	r2, r7
1005558c:	d005      	beq.n	1005559a <GAT_att_cmn_disconnection+0x5a>
1005558e:	4611      	mov	r1, r2
10055590:	6912      	ldr	r2, [r2, #16]
10055592:	42ba      	cmp	r2, r7
10055594:	d1fb      	bne.n	1005558e <GAT_att_cmn_disconnection+0x4e>
10055596:	3110      	adds	r1, #16
10055598:	e001      	b.n	1005559e <GAT_att_cmn_disconnection+0x5e>
1005559a:	4601      	mov	r1, r0
1005559c:	3134      	adds	r1, #52	@ 0x34
1005559e:	693a      	ldr	r2, [r7, #16]
100555a0:	600a      	str	r2, [r1, #0]
100555a2:	8979      	ldrh	r1, [r7, #10]
100555a4:	2904      	cmp	r1, #4
100555a6:	d103      	bne.n	100555b0 <GAT_att_cmn_disconnection+0x70>
100555a8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
100555aa:	6139      	str	r1, [r7, #16]
100555ac:	62c7      	str	r7, [r0, #44]	@ 0x2c
100555ae:	e7ce      	b.n	1005554e <GAT_att_cmn_disconnection+0xe>
100555b0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
100555b2:	6139      	str	r1, [r7, #16]
100555b4:	6307      	str	r7, [r0, #48]	@ 0x30
100555b6:	e7ca      	b.n	1005554e <GAT_att_cmn_disconnection+0xe>
100555b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100555ba:	46c0      	nop			@ (mov r8, r8)

100555bc <__arm_cp.12_0>:
100555bc:	20002420 	.word	0x20002420

100555c0 <GAT_att_cmn_stop_timer>:
100555c0:	b510      	push	{r4, lr}
100555c2:	4604      	mov	r4, r0
100555c4:	4608      	mov	r0, r1
100555c6:	4611      	mov	r1, r2
100555c8:	f000 f858 	bl	1005567c <GAT_att_cmn_get_timer_index>
100555cc:	0080      	lsls	r0, r0, #2
100555ce:	1900      	adds	r0, r0, r4
100555d0:	b2c1      	uxtb	r1, r0
100555d2:	4802      	ldr	r0, [pc, #8]	@ (100555dc <__arm_cp.13_0>)
100555d4:	6800      	ldr	r0, [r0, #0]
100555d6:	f00b fe68 	bl	100612aa <CST_stop>
100555da:	bd10      	pop	{r4, pc}

100555dc <__arm_cp.13_0>:
100555dc:	20002420 	.word	0x20002420

100555e0 <GAT_att_cmn_send>:
100555e0:	b5b0      	push	{r4, r5, r7, lr}
100555e2:	460c      	mov	r4, r1
100555e4:	4605      	mov	r5, r0
100555e6:	8848      	ldrh	r0, [r1, #2]
100555e8:	1d00      	adds	r0, r0, #4
100555ea:	b281      	uxth	r1, r0
100555ec:	4620      	mov	r0, r4
100555ee:	f7fe f8f4 	bl	100537da <ACL_pkt_resize>
100555f2:	4628      	mov	r0, r5
100555f4:	4621      	mov	r1, r4
100555f6:	f002 ff29 	bl	1005844c <L2C_send_frame>
100555fa:	2800      	cmp	r0, #0
100555fc:	d004      	beq.n	10055608 <GAT_att_cmn_send+0x28>
100555fe:	4620      	mov	r0, r4
10055600:	f7fe f8e2 	bl	100537c8 <ACL_pkt_release>
10055604:	2081      	movs	r0, #129	@ 0x81
10055606:	bdb0      	pop	{r4, r5, r7, pc}
10055608:	2000      	movs	r0, #0
1005560a:	bdb0      	pop	{r4, r5, r7, pc}

1005560c <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
1005560c:	8809      	ldrh	r1, [r1, #0]
1005560e:	8880      	ldrh	r0, [r0, #4]
10055610:	4008      	ands	r0, r1
10055612:	d000      	beq.n	10055616 <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
10055614:	2086      	movs	r0, #134	@ 0x86
10055616:	4770      	bx	lr

10055618 <GAT_att_cmn_dscr_flag_set_f>:
10055618:	8809      	ldrh	r1, [r1, #0]
1005561a:	8882      	ldrh	r2, [r0, #4]
1005561c:	430a      	orrs	r2, r1
1005561e:	8082      	strh	r2, [r0, #4]
10055620:	2000      	movs	r0, #0
10055622:	4770      	bx	lr

10055624 <GAT_att_cmn_dscr_flag_clear_f>:
10055624:	8809      	ldrh	r1, [r1, #0]
10055626:	8882      	ldrh	r2, [r0, #4]
10055628:	438a      	bics	r2, r1
1005562a:	8082      	strh	r2, [r0, #4]
1005562c:	2000      	movs	r0, #0
1005562e:	4770      	bx	lr

10055630 <GAT_att_cmn_get_conn_index>:
10055630:	4907      	ldr	r1, [pc, #28]	@ (10055650 <__arm_cp.22_0>)
10055632:	6809      	ldr	r1, [r1, #0]
10055634:	3134      	adds	r1, #52	@ 0x34
10055636:	6809      	ldr	r1, [r1, #0]
10055638:	2900      	cmp	r1, #0
1005563a:	d004      	beq.n	10055646 <GAT_att_cmn_get_conn_index+0x16>
1005563c:	890a      	ldrh	r2, [r1, #8]
1005563e:	4282      	cmp	r2, r0
10055640:	d003      	beq.n	1005564a <GAT_att_cmn_get_conn_index+0x1a>
10055642:	3110      	adds	r1, #16
10055644:	e7f7      	b.n	10055636 <GAT_att_cmn_get_conn_index+0x6>
10055646:	20ff      	movs	r0, #255	@ 0xff
10055648:	4770      	bx	lr
1005564a:	7808      	ldrb	r0, [r1, #0]
1005564c:	4770      	bx	lr
1005564e:	46c0      	nop			@ (mov r8, r8)

10055650 <__arm_cp.22_0>:
10055650:	20002420 	.word	0x20002420

10055654 <GAT_att_cmn_start_timer>:
10055654:	b510      	push	{r4, lr}
10055656:	4604      	mov	r4, r0
10055658:	4608      	mov	r0, r1
1005565a:	4611      	mov	r1, r2
1005565c:	f000 f80e 	bl	1005567c <GAT_att_cmn_get_timer_index>
10055660:	0080      	lsls	r0, r0, #2
10055662:	1900      	adds	r0, r0, r4
10055664:	b2c1      	uxtb	r1, r0
10055666:	4803      	ldr	r0, [pc, #12]	@ (10055674 <__arm_cp.23_0>)
10055668:	6800      	ldr	r0, [r0, #0]
1005566a:	2200      	movs	r2, #0
1005566c:	4b02      	ldr	r3, [pc, #8]	@ (10055678 <__arm_cp.23_1>)
1005566e:	f00b fe52 	bl	10061316 <CST_start>
10055672:	bd10      	pop	{r4, pc}

10055674 <__arm_cp.23_0>:
10055674:	20002420 	.word	0x20002420

10055678 <__arm_cp.23_1>:
10055678:	00007530 	.word	0x00007530

1005567c <GAT_att_cmn_get_timer_index>:
1005567c:	4a08      	ldr	r2, [pc, #32]	@ (100556a0 <__arm_cp.24_0>)
1005567e:	6812      	ldr	r2, [r2, #0]
10055680:	3234      	adds	r2, #52	@ 0x34
10055682:	6812      	ldr	r2, [r2, #0]
10055684:	2a00      	cmp	r2, #0
10055686:	d007      	beq.n	10055698 <GAT_att_cmn_get_timer_index+0x1c>
10055688:	8913      	ldrh	r3, [r2, #8]
1005568a:	4283      	cmp	r3, r0
1005568c:	d102      	bne.n	10055694 <GAT_att_cmn_get_timer_index+0x18>
1005568e:	8953      	ldrh	r3, [r2, #10]
10055690:	428b      	cmp	r3, r1
10055692:	d003      	beq.n	1005569c <GAT_att_cmn_get_timer_index+0x20>
10055694:	3210      	adds	r2, #16
10055696:	e7f4      	b.n	10055682 <GAT_att_cmn_get_timer_index+0x6>
10055698:	20ff      	movs	r0, #255	@ 0xff
1005569a:	4770      	bx	lr
1005569c:	7850      	ldrb	r0, [r2, #1]
1005569e:	4770      	bx	lr

100556a0 <__arm_cp.24_0>:
100556a0:	20002420 	.word	0x20002420

100556a4 <GAT_att_cmn_timeout_cb>:
100556a4:	b580      	push	{r7, lr}
100556a6:	0881      	lsrs	r1, r0, #2
100556a8:	480a      	ldr	r0, [pc, #40]	@ (100556d4 <__arm_cp.25_0>)
100556aa:	6800      	ldr	r0, [r0, #0]
100556ac:	3034      	adds	r0, #52	@ 0x34
100556ae:	6800      	ldr	r0, [r0, #0]
100556b0:	2800      	cmp	r0, #0
100556b2:	d00e      	beq.n	100556d2 <GAT_att_cmn_timeout_cb+0x2e>
100556b4:	7842      	ldrb	r2, [r0, #1]
100556b6:	428a      	cmp	r2, r1
100556b8:	d001      	beq.n	100556be <GAT_att_cmn_timeout_cb+0x1a>
100556ba:	3010      	adds	r0, #16
100556bc:	e7f7      	b.n	100556ae <GAT_att_cmn_timeout_cb+0xa>
100556be:	2101      	movs	r1, #1
100556c0:	0209      	lsls	r1, r1, #8
100556c2:	8882      	ldrh	r2, [r0, #4]
100556c4:	430a      	orrs	r2, r1
100556c6:	8082      	strh	r2, [r0, #4]
100556c8:	2007      	movs	r0, #7
100556ca:	f00b fd7b 	bl	100611c4 <tsk_notify_idx>
100556ce:	f7fa fefc 	bl	100504ca <BLE_STACK_ProcessRequest>
100556d2:	bd80      	pop	{r7, pc}

100556d4 <__arm_cp.25_0>:
100556d4:	20002420 	.word	0x20002420

100556d8 <GAT_att_cmn_get_pckt>:
100556d8:	b510      	push	{r4, lr}
100556da:	8944      	ldrh	r4, [r0, #10]
100556dc:	2c04      	cmp	r4, #4
100556de:	d000      	beq.n	100556e2 <GAT_att_cmn_get_pckt+0xa>
100556e0:	2406      	movs	r4, #6
100556e2:	1861      	adds	r1, r4, r1
100556e4:	b28a      	uxth	r2, r1
100556e6:	8901      	ldrh	r1, [r0, #8]
100556e8:	2000      	movs	r0, #0
100556ea:	f7fe f84b 	bl	10053784 <ACL_pkt_get>
100556ee:	2800      	cmp	r0, #0
100556f0:	d000      	beq.n	100556f4 <GAT_att_cmn_get_pckt+0x1c>
100556f2:	8184      	strh	r4, [r0, #12]
100556f4:	bd10      	pop	{r4, pc}
	...

100556f8 <GAT_att_srv_init>:
100556f8:	b510      	push	{r4, lr}
100556fa:	4c08      	ldr	r4, [pc, #32]	@ (1005571c <__arm_cp.0_0>)
100556fc:	6820      	ldr	r0, [r4, #0]
100556fe:	3040      	adds	r0, #64	@ 0x40
10055700:	f00b ff52 	bl	100615a8 <ACL_list_init>
10055704:	6820      	ldr	r0, [r4, #0]
10055706:	3038      	adds	r0, #56	@ 0x38
10055708:	f00b ff4e 	bl	100615a8 <ACL_list_init>
1005570c:	4804      	ldr	r0, [pc, #16]	@ (10055720 <__arm_cp.0_1>)
1005570e:	4905      	ldr	r1, [pc, #20]	@ (10055724 <__arm_cp.0_2>)
10055710:	223c      	movs	r2, #60	@ 0x3c
10055712:	f7fb fcc1 	bl	10051098 <BLEPLAT_MemCpy>
10055716:	f001 f8ef 	bl	100568f8 <GAT_srv_init>
1005571a:	bd10      	pop	{r4, pc}

1005571c <__arm_cp.0_0>:
1005571c:	20002420 	.word	0x20002420

10055720 <__arm_cp.0_1>:
10055720:	20002424 	.word	0x20002424

10055724 <__arm_cp.0_2>:
10055724:	100680a4 	.word	0x100680a4

10055728 <GAT_att_srv_rcv>:
10055728:	b5f0      	push	{r4, r5, r6, r7, lr}
1005572a:	b087      	sub	sp, #28
1005572c:	4604      	mov	r4, r0
1005572e:	8805      	ldrh	r5, [r0, #0]
10055730:	f002 fd61 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10055734:	4601      	mov	r1, r0
10055736:	4628      	mov	r0, r5
10055738:	f7ff fed0 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
1005573c:	4605      	mov	r5, r0
1005573e:	4620      	mov	r0, r4
10055740:	f000 f858 	bl	100557f4 <GAT_att_cmn_get_opcode>
10055744:	4606      	mov	r6, r0
10055746:	f000 f85b 	bl	10055800 <GAT_att_srv_get_exec_fn_id_by_op>
1005574a:	280f      	cmp	r0, #15
1005574c:	d119      	bne.n	10055782 <GAT_att_srv_rcv+0x5a>
1005574e:	2e1e      	cmp	r6, #30
10055750:	d047      	beq.n	100557e2 <GAT_att_srv_rcv+0xba>
10055752:	2040      	movs	r0, #64	@ 0x40
10055754:	4030      	ands	r0, r6
10055756:	d144      	bne.n	100557e2 <GAT_att_srv_rcv+0xba>
10055758:	2105      	movs	r1, #5
1005575a:	4628      	mov	r0, r5
1005575c:	f7ff ffbc 	bl	100556d8 <GAT_att_cmn_get_pckt>
10055760:	2800      	cmp	r0, #0
10055762:	d045      	beq.n	100557f0 <GAT_att_srv_rcv+0xc8>
10055764:	4607      	mov	r7, r0
10055766:	2100      	movs	r1, #0
10055768:	2206      	movs	r2, #6
1005576a:	4630      	mov	r0, r6
1005576c:	463b      	mov	r3, r7
1005576e:	f000 fafd 	bl	10055d6c <GAT_att_srv_write_err_packet>
10055772:	8968      	ldrh	r0, [r5, #10]
10055774:	4639      	mov	r1, r7
10055776:	f7ff ff33 	bl	100555e0 <GAT_att_cmn_send>
1005577a:	4607      	mov	r7, r0
1005577c:	2800      	cmp	r0, #0
1005577e:	d134      	bne.n	100557ea <GAT_att_srv_rcv+0xc2>
10055780:	e02f      	b.n	100557e2 <GAT_att_srv_rcv+0xba>
10055782:	9501      	str	r5, [sp, #4]
10055784:	2500      	movs	r5, #0
10055786:	2e1e      	cmp	r6, #30
10055788:	462f      	mov	r7, r5
1005578a:	d016      	beq.n	100557ba <GAT_att_srv_rcv+0x92>
1005578c:	2040      	movs	r0, #64	@ 0x40
1005578e:	4006      	ands	r6, r0
10055790:	462f      	mov	r7, r5
10055792:	d112      	bne.n	100557ba <GAT_att_srv_rcv+0x92>
10055794:	9b01      	ldr	r3, [sp, #4]
10055796:	8898      	ldrh	r0, [r3, #4]
10055798:	07c0      	lsls	r0, r0, #31
1005579a:	d118      	bne.n	100557ce <GAT_att_srv_rcv+0xa6>
1005579c:	895a      	ldrh	r2, [r3, #10]
1005579e:	8919      	ldrh	r1, [r3, #8]
100557a0:	2600      	movs	r6, #0
100557a2:	4630      	mov	r0, r6
100557a4:	f7ff ff56 	bl	10055654 <GAT_att_cmn_start_timer>
100557a8:	4607      	mov	r7, r0
100557aa:	2800      	cmp	r0, #0
100557ac:	d105      	bne.n	100557ba <GAT_att_srv_rcv+0x92>
100557ae:	9a01      	ldr	r2, [sp, #4]
100557b0:	8890      	ldrh	r0, [r2, #4]
100557b2:	2101      	movs	r1, #1
100557b4:	4301      	orrs	r1, r0
100557b6:	8091      	strh	r1, [r2, #4]
100557b8:	4637      	mov	r7, r6
100557ba:	a802      	add	r0, sp, #8
100557bc:	8005      	strh	r5, [r0, #0]
100557be:	9506      	str	r5, [sp, #24]
100557c0:	9505      	str	r5, [sp, #20]
100557c2:	9901      	ldr	r1, [sp, #4]
100557c4:	9104      	str	r1, [sp, #16]
100557c6:	9403      	str	r4, [sp, #12]
100557c8:	f000 f854 	bl	10055874 <GAT_att_srv_run>
100557cc:	e00d      	b.n	100557ea <GAT_att_srv_rcv+0xc2>
100557ce:	3308      	adds	r3, #8
100557d0:	2042      	movs	r0, #66	@ 0x42
100557d2:	2103      	movs	r1, #3
100557d4:	2202      	movs	r2, #2
100557d6:	f00d f8eb 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
100557da:	2800      	cmp	r0, #0
100557dc:	d001      	beq.n	100557e2 <GAT_att_srv_rcv+0xba>
100557de:	2784      	movs	r7, #132	@ 0x84
100557e0:	e003      	b.n	100557ea <GAT_att_srv_rcv+0xc2>
100557e2:	4620      	mov	r0, r4
100557e4:	f7fd fff0 	bl	100537c8 <ACL_pkt_release>
100557e8:	2700      	movs	r7, #0
100557ea:	4638      	mov	r0, r7
100557ec:	b007      	add	sp, #28
100557ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100557f0:	2788      	movs	r7, #136	@ 0x88
100557f2:	e7fa      	b.n	100557ea <GAT_att_srv_rcv+0xc2>

100557f4 <GAT_att_cmn_get_opcode>:
100557f4:	b580      	push	{r7, lr}
100557f6:	8981      	ldrh	r1, [r0, #12]
100557f8:	f001 f84d 	bl	10056896 <ACL_pkt_read_8b>
100557fc:	bd80      	pop	{r7, pc}
	...

10055800 <GAT_att_srv_get_exec_fn_id_by_op>:
10055800:	1e81      	subs	r1, r0, #2
10055802:	291e      	cmp	r1, #30
10055804:	d816      	bhi.n	10055834 <GAT_att_srv_get_exec_fn_id_by_op+0x34>
10055806:	2000      	movs	r0, #0
10055808:	4479      	add	r1, pc
1005580a:	7909      	ldrb	r1, [r1, #4]
1005580c:	0049      	lsls	r1, r1, #1
1005580e:	448f      	add	pc, r1
10055810:	170f1718 	.word	0x170f1718
10055814:	171b1719 	.word	0x171b1719
10055818:	171f171d 	.word	0x171f171d
1005581c:	17231721 	.word	0x17231721
10055820:	17171725 	.word	0x17171725
10055824:	17291727 	.word	0x17291727
10055828:	17171717 	.word	0x17171717
1005582c:	002d172b 	.word	0x002d172b
10055830:	2001      	movs	r0, #1
10055832:	4770      	bx	lr
10055834:	2852      	cmp	r0, #82	@ 0x52
10055836:	d01b      	beq.n	10055870 <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10055838:	28d2      	cmp	r0, #210	@ 0xd2
1005583a:	d101      	bne.n	10055840 <GAT_att_srv_get_exec_fn_id_by_op+0x40>
1005583c:	200a      	movs	r0, #10
1005583e:	4770      	bx	lr
10055840:	200f      	movs	r0, #15
10055842:	4770      	bx	lr
10055844:	2002      	movs	r0, #2
10055846:	4770      	bx	lr
10055848:	2003      	movs	r0, #3
1005584a:	4770      	bx	lr
1005584c:	2004      	movs	r0, #4
1005584e:	4770      	bx	lr
10055850:	2005      	movs	r0, #5
10055852:	4770      	bx	lr
10055854:	2006      	movs	r0, #6
10055856:	4770      	bx	lr
10055858:	2007      	movs	r0, #7
1005585a:	4770      	bx	lr
1005585c:	2008      	movs	r0, #8
1005585e:	4770      	bx	lr
10055860:	200b      	movs	r0, #11
10055862:	4770      	bx	lr
10055864:	200c      	movs	r0, #12
10055866:	4770      	bx	lr
10055868:	200d      	movs	r0, #13
1005586a:	4770      	bx	lr
1005586c:	200e      	movs	r0, #14
1005586e:	4770      	bx	lr
10055870:	2009      	movs	r0, #9
10055872:	4770      	bx	lr

10055874 <GAT_att_srv_run>:
10055874:	b5f0      	push	{r4, r5, r6, r7, lr}
10055876:	b085      	sub	sp, #20
10055878:	4604      	mov	r4, r0
1005587a:	7800      	ldrb	r0, [r0, #0]
1005587c:	2800      	cmp	r0, #0
1005587e:	d107      	bne.n	10055890 <GAT_att_srv_run+0x1c>
10055880:	6860      	ldr	r0, [r4, #4]
10055882:	f7ff ffb7 	bl	100557f4 <GAT_att_cmn_get_opcode>
10055886:	7060      	strb	r0, [r4, #1]
10055888:	68a5      	ldr	r5, [r4, #8]
1005588a:	68e8      	ldr	r0, [r5, #12]
1005588c:	2800      	cmp	r0, #0
1005588e:	d03c      	beq.n	1005590a <GAT_att_srv_run+0x96>
10055890:	7865      	ldrb	r5, [r4, #1]
10055892:	4628      	mov	r0, r5
10055894:	f7ff ffb4 	bl	10055800 <GAT_att_srv_get_exec_fn_id_by_op>
10055898:	280e      	cmp	r0, #14
1005589a:	d808      	bhi.n	100558ae <GAT_att_srv_run+0x3a>
1005589c:	0080      	lsls	r0, r0, #2
1005589e:	495b      	ldr	r1, [pc, #364]	@ (10055a0c <__arm_cp.4_3>)
100558a0:	5809      	ldr	r1, [r1, r0]
100558a2:	2900      	cmp	r1, #0
100558a4:	d003      	beq.n	100558ae <GAT_att_srv_run+0x3a>
100558a6:	4620      	mov	r0, r4
100558a8:	4788      	blx	r1
100558aa:	4607      	mov	r7, r0
100558ac:	e007      	b.n	100558be <GAT_att_srv_run+0x4a>
100558ae:	68a0      	ldr	r0, [r4, #8]
100558b0:	68c3      	ldr	r3, [r0, #12]
100558b2:	2100      	movs	r1, #0
100558b4:	2206      	movs	r2, #6
100558b6:	4628      	mov	r0, r5
100558b8:	f000 fa58 	bl	10055d6c <GAT_att_srv_write_err_packet>
100558bc:	2786      	movs	r7, #134	@ 0x86
100558be:	6861      	ldr	r1, [r4, #4]
100558c0:	2900      	cmp	r1, #0
100558c2:	d019      	beq.n	100558f8 <GAT_att_srv_run+0x84>
100558c4:	2f88      	cmp	r7, #136	@ 0x88
100558c6:	d003      	beq.n	100558d0 <GAT_att_srv_run+0x5c>
100558c8:	2f84      	cmp	r7, #132	@ 0x84
100558ca:	d00c      	beq.n	100558e6 <GAT_att_srv_run+0x72>
100558cc:	2f07      	cmp	r7, #7
100558ce:	d110      	bne.n	100558f2 <GAT_att_srv_run+0x7e>
100558d0:	484f      	ldr	r0, [pc, #316]	@ (10055a10 <__arm_cp.4_4>)
100558d2:	6800      	ldr	r0, [r0, #0]
100558d4:	3040      	adds	r0, #64	@ 0x40
100558d6:	f00b fe6b 	bl	100615b0 <ACL_list_insert_tail>
100558da:	2009      	movs	r0, #9
100558dc:	f00b fc72 	bl	100611c4 <tsk_notify_idx>
100558e0:	f7fa fdf3 	bl	100504ca <BLE_STACK_ProcessRequest>
100558e4:	e008      	b.n	100558f8 <GAT_att_srv_run+0x84>
100558e6:	484a      	ldr	r0, [pc, #296]	@ (10055a10 <__arm_cp.4_4>)
100558e8:	6800      	ldr	r0, [r0, #0]
100558ea:	3038      	adds	r0, #56	@ 0x38
100558ec:	f00b fe60 	bl	100615b0 <ACL_list_insert_tail>
100558f0:	e009      	b.n	10055906 <GAT_att_srv_run+0x92>
100558f2:	4608      	mov	r0, r1
100558f4:	f7fd ff68 	bl	100537c8 <ACL_pkt_release>
100558f8:	2f86      	cmp	r7, #134	@ 0x86
100558fa:	d001      	beq.n	10055900 <GAT_att_srv_run+0x8c>
100558fc:	2f00      	cmp	r7, #0
100558fe:	d102      	bne.n	10055906 <GAT_att_srv_run+0x92>
10055900:	68a0      	ldr	r0, [r4, #8]
10055902:	f000 fa47 	bl	10055d94 <GAT_att_srv_send_response>
10055906:	b005      	add	sp, #20
10055908:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005590a:	6867      	ldr	r7, [r4, #4]
1005590c:	4638      	mov	r0, r7
1005590e:	f7ff ff71 	bl	100557f4 <GAT_att_cmn_get_opcode>
10055912:	4606      	mov	r6, r0
10055914:	f7ff ff74 	bl	10055800 <GAT_att_srv_get_exec_fn_id_by_op>
10055918:	8879      	ldrh	r1, [r7, #2]
1005591a:	88ea      	ldrh	r2, [r5, #6]
1005591c:	2304      	movs	r3, #4
1005591e:	9302      	str	r3, [sp, #8]
10055920:	2300      	movs	r3, #0
10055922:	4291      	cmp	r1, r2
10055924:	d83e      	bhi.n	100559a4 <GAT_att_srv_run+0x130>
10055926:	280e      	cmp	r0, #14
10055928:	d83c      	bhi.n	100559a4 <GAT_att_srv_run+0x130>
1005592a:	9301      	str	r3, [sp, #4]
1005592c:	0042      	lsls	r2, r0, #1
1005592e:	4b34      	ldr	r3, [pc, #208]	@ (10055a00 <__arm_cp.4_0>)
10055930:	5a9a      	ldrh	r2, [r3, r2]
10055932:	4b34      	ldr	r3, [pc, #208]	@ (10055a04 <__arm_cp.4_1>)
10055934:	40c3      	lsrs	r3, r0
10055936:	07db      	lsls	r3, r3, #31
10055938:	d105      	bne.n	10055946 <GAT_att_srv_run+0xd2>
1005593a:	2380      	movs	r3, #128	@ 0x80
1005593c:	439a      	bics	r2, r3
1005593e:	4291      	cmp	r1, r2
10055940:	9b01      	ldr	r3, [sp, #4]
10055942:	d003      	beq.n	1005594c <GAT_att_srv_run+0xd8>
10055944:	e02e      	b.n	100559a4 <GAT_att_srv_run+0x130>
10055946:	4291      	cmp	r1, r2
10055948:	9b01      	ldr	r3, [sp, #4]
1005594a:	d32b      	bcc.n	100559a4 <GAT_att_srv_run+0x130>
1005594c:	1e41      	subs	r1, r0, #1
1005594e:	2903      	cmp	r1, #3
10055950:	d301      	bcc.n	10055956 <GAT_att_srv_run+0xe2>
10055952:	2807      	cmp	r0, #7
10055954:	d10d      	bne.n	10055972 <GAT_att_srv_run+0xfe>
10055956:	a904      	add	r1, sp, #16
10055958:	aa03      	add	r2, sp, #12
1005595a:	9202      	str	r2, [sp, #8]
1005595c:	4638      	mov	r0, r7
1005595e:	460f      	mov	r7, r1
10055960:	f000 ff49 	bl	100567f6 <GAT_att_srv_get_handle_range>
10055964:	883b      	ldrh	r3, [r7, #0]
10055966:	9802      	ldr	r0, [sp, #8]
10055968:	8800      	ldrh	r0, [r0, #0]
1005596a:	4283      	cmp	r3, r0
1005596c:	d818      	bhi.n	100559a0 <GAT_att_srv_run+0x12c>
1005596e:	2b00      	cmp	r3, #0
10055970:	d016      	beq.n	100559a0 <GAT_att_srv_run+0x12c>
10055972:	6866      	ldr	r6, [r4, #4]
10055974:	4630      	mov	r0, r6
10055976:	f7ff ff3d 	bl	100557f4 <GAT_att_cmn_get_opcode>
1005597a:	4607      	mov	r7, r0
1005597c:	8835      	ldrh	r5, [r6, #0]
1005597e:	4630      	mov	r0, r6
10055980:	f002 fc39 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10055984:	4601      	mov	r1, r0
10055986:	4628      	mov	r0, r5
10055988:	f7ff fda8 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
1005598c:	4605      	mov	r5, r0
1005598e:	2f1e      	cmp	r7, #30
10055990:	d01d      	beq.n	100559ce <GAT_att_srv_run+0x15a>
10055992:	2040      	movs	r0, #64	@ 0x40
10055994:	4038      	ands	r0, r7
10055996:	d11a      	bne.n	100559ce <GAT_att_srv_run+0x15a>
10055998:	2f16      	cmp	r7, #22
1005599a:	d11b      	bne.n	100559d4 <GAT_att_srv_run+0x160>
1005599c:	8871      	ldrh	r1, [r6, #2]
1005599e:	e026      	b.n	100559ee <GAT_att_srv_run+0x17a>
100559a0:	2001      	movs	r0, #1
100559a2:	9002      	str	r0, [sp, #8]
100559a4:	2786      	movs	r7, #134	@ 0x86
100559a6:	2e1e      	cmp	r6, #30
100559a8:	d089      	beq.n	100558be <GAT_att_srv_run+0x4a>
100559aa:	2040      	movs	r0, #64	@ 0x40
100559ac:	4030      	ands	r0, r6
100559ae:	d186      	bne.n	100558be <GAT_att_srv_run+0x4a>
100559b0:	9301      	str	r3, [sp, #4]
100559b2:	2105      	movs	r1, #5
100559b4:	4628      	mov	r0, r5
100559b6:	f7ff fe8f 	bl	100556d8 <GAT_att_cmn_get_pckt>
100559ba:	60e8      	str	r0, [r5, #12]
100559bc:	2800      	cmp	r0, #0
100559be:	d01d      	beq.n	100559fc <GAT_att_srv_run+0x188>
100559c0:	4603      	mov	r3, r0
100559c2:	4630      	mov	r0, r6
100559c4:	9901      	ldr	r1, [sp, #4]
100559c6:	9a02      	ldr	r2, [sp, #8]
100559c8:	f000 f9d0 	bl	10055d6c <GAT_att_srv_write_err_packet>
100559cc:	e777      	b.n	100558be <GAT_att_srv_run+0x4a>
100559ce:	2000      	movs	r0, #0
100559d0:	60e8      	str	r0, [r5, #12]
100559d2:	e75d      	b.n	10055890 <GAT_att_srv_run+0x1c>
100559d4:	4638      	mov	r0, r7
100559d6:	f7ff ff13 	bl	10055800 <GAT_att_srv_get_exec_fn_id_by_op>
100559da:	280e      	cmp	r0, #14
100559dc:	d900      	bls.n	100559e0 <GAT_att_srv_run+0x16c>
100559de:	e76d      	b.n	100558bc <GAT_att_srv_run+0x48>
100559e0:	0040      	lsls	r0, r0, #1
100559e2:	4909      	ldr	r1, [pc, #36]	@ (10055a08 <__arm_cp.4_2>)
100559e4:	5a09      	ldrh	r1, [r1, r0]
100559e6:	88e8      	ldrh	r0, [r5, #6]
100559e8:	4281      	cmp	r1, r0
100559ea:	d300      	bcc.n	100559ee <GAT_att_srv_run+0x17a>
100559ec:	4601      	mov	r1, r0
100559ee:	4628      	mov	r0, r5
100559f0:	f7ff fe72 	bl	100556d8 <GAT_att_cmn_get_pckt>
100559f4:	60e8      	str	r0, [r5, #12]
100559f6:	2800      	cmp	r0, #0
100559f8:	d000      	beq.n	100559fc <GAT_att_srv_run+0x188>
100559fa:	e749      	b.n	10055890 <GAT_att_srv_run+0x1c>
100559fc:	2788      	movs	r7, #136	@ 0x88
100559fe:	e75e      	b.n	100558be <GAT_att_srv_run+0x4a>

10055a00 <__arm_cp.4_0>:
10055a00:	100680e0 	.word	0x100680e0

10055a04 <__arm_cp.4_1>:
10055a04:	00004fcc 	.word	0x00004fcc

10055a08 <__arm_cp.4_2>:
10055a08:	100680fe 	.word	0x100680fe

10055a0c <__arm_cp.4_3>:
10055a0c:	20002424 	.word	0x20002424

10055a10 <__arm_cp.4_4>:
10055a10:	20002420 	.word	0x20002420

10055a14 <GAT_att_srv_connection>:
10055a14:	b580      	push	{r7, lr}
10055a16:	f000 ff81 	bl	1005691c <GAT_srv_connection>
10055a1a:	bd80      	pop	{r7, pc}

10055a1c <GAT_att_srv_bearer_close>:
10055a1c:	b570      	push	{r4, r5, r6, lr}
10055a1e:	460c      	mov	r4, r1
10055a20:	4605      	mov	r5, r0
10055a22:	f001 f821 	bl	10056a68 <GAT_srv_bearer_close>
10055a26:	4e07      	ldr	r6, [pc, #28]	@ (10055a44 <__arm_cp.6_0>)
10055a28:	6832      	ldr	r2, [r6, #0]
10055a2a:	3240      	adds	r2, #64	@ 0x40
10055a2c:	4628      	mov	r0, r5
10055a2e:	4621      	mov	r1, r4
10055a30:	f000 f80a 	bl	10055a48 <GAT_att_srv_flush_rx_pckts>
10055a34:	6832      	ldr	r2, [r6, #0]
10055a36:	3238      	adds	r2, #56	@ 0x38
10055a38:	4628      	mov	r0, r5
10055a3a:	4621      	mov	r1, r4
10055a3c:	f000 f804 	bl	10055a48 <GAT_att_srv_flush_rx_pckts>
10055a40:	bd70      	pop	{r4, r5, r6, pc}
10055a42:	46c0      	nop			@ (mov r8, r8)

10055a44 <__arm_cp.6_0>:
10055a44:	20002420 	.word	0x20002420

10055a48 <GAT_att_srv_flush_rx_pckts>:
10055a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055a4a:	460d      	mov	r5, r1
10055a4c:	4606      	mov	r6, r0
10055a4e:	9200      	str	r2, [sp, #0]
10055a50:	6814      	ldr	r4, [r2, #0]
10055a52:	2c00      	cmp	r4, #0
10055a54:	d011      	beq.n	10055a7a <GAT_att_srv_flush_rx_pckts+0x32>
10055a56:	4627      	mov	r7, r4
10055a58:	69e4      	ldr	r4, [r4, #28]
10055a5a:	8838      	ldrh	r0, [r7, #0]
10055a5c:	42b0      	cmp	r0, r6
10055a5e:	d1f8      	bne.n	10055a52 <GAT_att_srv_flush_rx_pckts+0xa>
10055a60:	4638      	mov	r0, r7
10055a62:	f002 fbc8 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10055a66:	42a8      	cmp	r0, r5
10055a68:	d1f3      	bne.n	10055a52 <GAT_att_srv_flush_rx_pckts+0xa>
10055a6a:	9800      	ldr	r0, [sp, #0]
10055a6c:	4639      	mov	r1, r7
10055a6e:	f00b fdaf 	bl	100615d0 <ACL_list_remove>
10055a72:	4638      	mov	r0, r7
10055a74:	f7fd fea8 	bl	100537c8 <ACL_pkt_release>
10055a78:	e7eb      	b.n	10055a52 <GAT_att_srv_flush_rx_pckts+0xa>
10055a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055a7c <GAT_att_srv_process_rx_pckt_tsk>:
10055a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10055a7e:	b085      	sub	sp, #20
10055a80:	4f0f      	ldr	r7, [pc, #60]	@ (10055ac0 <__arm_cp.9_0>)
10055a82:	6838      	ldr	r0, [r7, #0]
10055a84:	3040      	adds	r0, #64	@ 0x40
10055a86:	f00b fdc3 	bl	10061610 <ACL_list_get_pckt_count>
10055a8a:	4604      	mov	r4, r0
10055a8c:	0420      	lsls	r0, r4, #16
10055a8e:	d014      	beq.n	10055aba <GAT_att_srv_process_rx_pckt_tsk+0x3e>
10055a90:	466d      	mov	r5, sp
10055a92:	2000      	movs	r0, #0
10055a94:	7028      	strb	r0, [r5, #0]
10055a96:	6838      	ldr	r0, [r7, #0]
10055a98:	3040      	adds	r0, #64	@ 0x40
10055a9a:	f00b fdaf 	bl	100615fc <ACL_list_remove_head>
10055a9e:	9001      	str	r0, [sp, #4]
10055aa0:	8806      	ldrh	r6, [r0, #0]
10055aa2:	f002 fba8 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10055aa6:	4601      	mov	r1, r0
10055aa8:	4630      	mov	r0, r6
10055aaa:	f7ff fd17 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10055aae:	9002      	str	r0, [sp, #8]
10055ab0:	4628      	mov	r0, r5
10055ab2:	f7ff fedf 	bl	10055874 <GAT_att_srv_run>
10055ab6:	1e64      	subs	r4, r4, #1
10055ab8:	e7e8      	b.n	10055a8c <GAT_att_srv_process_rx_pckt_tsk+0x10>
10055aba:	b005      	add	sp, #20
10055abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055abe:	46c0      	nop			@ (mov r8, r8)

10055ac0 <__arm_cp.9_0>:
10055ac0:	20002420 	.word	0x20002420

10055ac4 <GAT_att_srv_hvtx>:
10055ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
10055ac6:	b08b      	sub	sp, #44	@ 0x2c
10055ac8:	930a      	str	r3, [sp, #40]	@ 0x28
10055aca:	4614      	mov	r4, r2
10055acc:	460d      	mov	r5, r1
10055ace:	4607      	mov	r7, r0
10055ad0:	f7ff fd04 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10055ad4:	2800      	cmp	r0, #0
10055ad6:	d011      	beq.n	10055afc <GAT_att_srv_hvtx+0x38>
10055ad8:	4606      	mov	r6, r0
10055ada:	9704      	str	r7, [sp, #16]
10055adc:	8880      	ldrh	r0, [r0, #4]
10055ade:	270c      	movs	r7, #12
10055ae0:	0741      	lsls	r1, r0, #29
10055ae2:	d47f      	bmi.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055ae4:	2c02      	cmp	r4, #2
10055ae6:	d101      	bne.n	10055aec <GAT_att_srv_hvtx+0x28>
10055ae8:	0780      	lsls	r0, r0, #30
10055aea:	d47b      	bmi.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055aec:	9502      	str	r5, [sp, #8]
10055aee:	9403      	str	r4, [sp, #12]
10055af0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10055af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10055af4:	2b01      	cmp	r3, #1
10055af6:	d803      	bhi.n	10055b00 <GAT_att_srv_hvtx+0x3c>
10055af8:	2503      	movs	r5, #3
10055afa:	e003      	b.n	10055b04 <GAT_att_srv_hvtx+0x40>
10055afc:	2712      	movs	r7, #18
10055afe:	e071      	b.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055b00:	0098      	lsls	r0, r3, #2
10055b02:	1c45      	adds	r5, r0, #1
10055b04:	1ca0      	adds	r0, r4, #2
10055b06:	4619      	mov	r1, r3
10055b08:	2900      	cmp	r1, #0
10055b0a:	d004      	beq.n	10055b16 <GAT_att_srv_hvtx+0x52>
10055b0c:	8802      	ldrh	r2, [r0, #0]
10055b0e:	1955      	adds	r5, r2, r5
10055b10:	3008      	adds	r0, #8
10055b12:	1e49      	subs	r1, r1, #1
10055b14:	e7f8      	b.n	10055b08 <GAT_att_srv_hvtx+0x44>
10055b16:	88f0      	ldrh	r0, [r6, #6]
10055b18:	2b02      	cmp	r3, #2
10055b1a:	d302      	bcc.n	10055b22 <GAT_att_srv_hvtx+0x5e>
10055b1c:	b2a9      	uxth	r1, r5
10055b1e:	4281      	cmp	r1, r0
10055b20:	d860      	bhi.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055b22:	b2a9      	uxth	r1, r5
10055b24:	4281      	cmp	r1, r0
10055b26:	d300      	bcc.n	10055b2a <GAT_att_srv_hvtx+0x66>
10055b28:	4605      	mov	r5, r0
10055b2a:	b2a9      	uxth	r1, r5
10055b2c:	4630      	mov	r0, r6
10055b2e:	9106      	str	r1, [sp, #24]
10055b30:	f7ff fdd2 	bl	100556d8 <GAT_att_cmn_get_pckt>
10055b34:	2800      	cmp	r0, #0
10055b36:	d00e      	beq.n	10055b56 <GAT_att_srv_hvtx+0x92>
10055b38:	4607      	mov	r7, r0
10055b3a:	9803      	ldr	r0, [sp, #12]
10055b3c:	2802      	cmp	r0, #2
10055b3e:	9707      	str	r7, [sp, #28]
10055b40:	9601      	str	r6, [sp, #4]
10055b42:	d10f      	bne.n	10055b64 <GAT_att_srv_hvtx+0xa0>
10055b44:	89b9      	ldrh	r1, [r7, #12]
10055b46:	221d      	movs	r2, #29
10055b48:	4638      	mov	r0, r7
10055b4a:	f000 f889 	bl	10055c60 <ACL_pkt_write_8b>
10055b4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055b50:	2801      	cmp	r0, #1
10055b52:	d00f      	beq.n	10055b74 <GAT_att_srv_hvtx+0xb0>
10055b54:	e04e      	b.n	10055bf4 <GAT_att_srv_hvtx+0x130>
10055b56:	2008      	movs	r0, #8
10055b58:	f00b fb34 	bl	100611c4 <tsk_notify_idx>
10055b5c:	f7fa fcb5 	bl	100504ca <BLE_STACK_ProcessRequest>
10055b60:	2788      	movs	r7, #136	@ 0x88
10055b62:	e03f      	b.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055b64:	89b9      	ldrh	r1, [r7, #12]
10055b66:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055b68:	2801      	cmp	r0, #1
10055b6a:	d13e      	bne.n	10055bea <GAT_att_srv_hvtx+0x126>
10055b6c:	221b      	movs	r2, #27
10055b6e:	4638      	mov	r0, r7
10055b70:	f000 f876 	bl	10055c60 <ACL_pkt_write_8b>
10055b74:	8822      	ldrh	r2, [r4, #0]
10055b76:	89b8      	ldrh	r0, [r7, #12]
10055b78:	1c40      	adds	r0, r0, #1
10055b7a:	b281      	uxth	r1, r0
10055b7c:	4638      	mov	r0, r7
10055b7e:	f7fd fe58 	bl	10053832 <ACL_pkt_write_16b>
10055b82:	6863      	ldr	r3, [r4, #4]
10055b84:	89b8      	ldrh	r0, [r7, #12]
10055b86:	1ee9      	subs	r1, r5, #3
10055b88:	b28a      	uxth	r2, r1
10055b8a:	1cc0      	adds	r0, r0, #3
10055b8c:	b281      	uxth	r1, r0
10055b8e:	4638      	mov	r0, r7
10055b90:	f7fd fe58 	bl	10053844 <ACL_pkt_write>
10055b94:	9807      	ldr	r0, [sp, #28]
10055b96:	8045      	strh	r5, [r0, #2]
10055b98:	9d03      	ldr	r5, [sp, #12]
10055b9a:	2d02      	cmp	r5, #2
10055b9c:	d10c      	bne.n	10055bb8 <GAT_att_srv_hvtx+0xf4>
10055b9e:	2001      	movs	r0, #1
10055ba0:	9904      	ldr	r1, [sp, #16]
10055ba2:	9a02      	ldr	r2, [sp, #8]
10055ba4:	f7ff fd56 	bl	10055654 <GAT_att_cmn_start_timer>
10055ba8:	2800      	cmp	r0, #0
10055baa:	9c01      	ldr	r4, [sp, #4]
10055bac:	d00c      	beq.n	10055bc8 <GAT_att_srv_hvtx+0x104>
10055bae:	4607      	mov	r7, r0
10055bb0:	9807      	ldr	r0, [sp, #28]
10055bb2:	f7fd fe09 	bl	100537c8 <ACL_pkt_release>
10055bb6:	e015      	b.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055bb8:	07e8      	lsls	r0, r5, #31
10055bba:	9c01      	ldr	r4, [sp, #4]
10055bbc:	d004      	beq.n	10055bc8 <GAT_att_srv_hvtx+0x104>
10055bbe:	9a07      	ldr	r2, [sp, #28]
10055bc0:	7a10      	ldrb	r0, [r2, #8]
10055bc2:	2108      	movs	r1, #8
10055bc4:	4301      	orrs	r1, r0
10055bc6:	7211      	strb	r1, [r2, #8]
10055bc8:	9802      	ldr	r0, [sp, #8]
10055bca:	9907      	ldr	r1, [sp, #28]
10055bcc:	f7ff fd08 	bl	100555e0 <GAT_att_cmn_send>
10055bd0:	4607      	mov	r7, r0
10055bd2:	2d02      	cmp	r5, #2
10055bd4:	d106      	bne.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055bd6:	2f00      	cmp	r7, #0
10055bd8:	d104      	bne.n	10055be4 <GAT_att_srv_hvtx+0x120>
10055bda:	88a0      	ldrh	r0, [r4, #4]
10055bdc:	2102      	movs	r1, #2
10055bde:	4301      	orrs	r1, r0
10055be0:	80a1      	strh	r1, [r4, #4]
10055be2:	2700      	movs	r7, #0
10055be4:	4638      	mov	r0, r7
10055be6:	b00b      	add	sp, #44	@ 0x2c
10055be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055bea:	2223      	movs	r2, #35	@ 0x23
10055bec:	4638      	mov	r0, r7
10055bee:	f000 f837 	bl	10055c60 <ACL_pkt_write_8b>
10055bf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055bf4:	1ca7      	adds	r7, r4, #2
10055bf6:	2101      	movs	r1, #1
10055bf8:	9505      	str	r5, [sp, #20]
10055bfa:	2800      	cmp	r0, #0
10055bfc:	d0ca      	beq.n	10055b94 <GAT_att_srv_hvtx+0xd0>
10055bfe:	900a      	str	r0, [sp, #40]	@ 0x28
10055c00:	9d07      	ldr	r5, [sp, #28]
10055c02:	89a8      	ldrh	r0, [r5, #12]
10055c04:	1840      	adds	r0, r0, r1
10055c06:	9108      	str	r1, [sp, #32]
10055c08:	b281      	uxth	r1, r0
10055c0a:	1ebb      	subs	r3, r7, #2
10055c0c:	2402      	movs	r4, #2
10055c0e:	4628      	mov	r0, r5
10055c10:	4622      	mov	r2, r4
10055c12:	4e12      	ldr	r6, [pc, #72]	@ (10055c5c <__arm_cp.10_0>)
10055c14:	47b0      	blx	r6
10055c16:	89a8      	ldrh	r0, [r5, #12]
10055c18:	9e08      	ldr	r6, [sp, #32]
10055c1a:	1830      	adds	r0, r6, r0
10055c1c:	1c80      	adds	r0, r0, #2
10055c1e:	b281      	uxth	r1, r0
10055c20:	4628      	mov	r0, r5
10055c22:	9409      	str	r4, [sp, #36]	@ 0x24
10055c24:	4622      	mov	r2, r4
10055c26:	463b      	mov	r3, r7
10055c28:	4c0c      	ldr	r4, [pc, #48]	@ (10055c5c <__arm_cp.10_0>)
10055c2a:	47a0      	blx	r4
10055c2c:	1d31      	adds	r1, r6, #4
10055c2e:	89a8      	ldrh	r0, [r5, #12]
10055c30:	1840      	adds	r0, r0, r1
10055c32:	b28e      	uxth	r6, r1
10055c34:	9906      	ldr	r1, [sp, #24]
10055c36:	1b8a      	subs	r2, r1, r6
10055c38:	8839      	ldrh	r1, [r7, #0]
10055c3a:	428a      	cmp	r2, r1
10055c3c:	db00      	blt.n	10055c40 <GAT_att_srv_hvtx+0x17c>
10055c3e:	460a      	mov	r2, r1
10055c40:	9909      	ldr	r1, [sp, #36]	@ 0x24
10055c42:	587b      	ldr	r3, [r7, r1]
10055c44:	b281      	uxth	r1, r0
10055c46:	b294      	uxth	r4, r2
10055c48:	4628      	mov	r0, r5
10055c4a:	4622      	mov	r2, r4
10055c4c:	4d03      	ldr	r5, [pc, #12]	@ (10055c5c <__arm_cp.10_0>)
10055c4e:	47a8      	blx	r5
10055c50:	19a1      	adds	r1, r4, r6
10055c52:	3708      	adds	r7, #8
10055c54:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055c56:	1e40      	subs	r0, r0, #1
10055c58:	9d05      	ldr	r5, [sp, #20]
10055c5a:	e7ce      	b.n	10055bfa <GAT_att_srv_hvtx+0x136>

10055c5c <__arm_cp.10_0>:
10055c5c:	10053845 	.word	0x10053845

10055c60 <ACL_pkt_write_8b>:
10055c60:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10055c62:	4614      	mov	r4, r2
10055c64:	6840      	ldr	r0, [r0, #4]
10055c66:	2920      	cmp	r1, #32
10055c68:	d304      	bcc.n	10055c74 <ACL_pkt_write_8b+0x14>
10055c6a:	ad01      	add	r5, sp, #4
10055c6c:	462a      	mov	r2, r5
10055c6e:	f009 fd72 	bl	1005f756 <Mem_Buff_get_buff_off>
10055c72:	8829      	ldrh	r1, [r5, #0]
10055c74:	1840      	adds	r0, r0, r1
10055c76:	7104      	strb	r4, [r0, #4]
10055c78:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10055c7a <GAT_att_srv_extract_write_packet_data>:
10055c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055c7c:	461d      	mov	r5, r3
10055c7e:	4614      	mov	r4, r2
10055c80:	460f      	mov	r7, r1
10055c82:	4606      	mov	r6, r0
10055c84:	f7ff fdb6 	bl	100557f4 <GAT_att_cmn_get_opcode>
10055c88:	210e      	movs	r1, #14
10055c8a:	43c9      	mvns	r1, r1
10055c8c:	28d2      	cmp	r0, #210	@ 0xd2
10055c8e:	d000      	beq.n	10055c92 <GAT_att_srv_extract_write_packet_data+0x18>
10055c90:	310c      	adds	r1, #12
10055c92:	8870      	ldrh	r0, [r6, #2]
10055c94:	1808      	adds	r0, r1, r0
10055c96:	b282      	uxth	r2, r0
10055c98:	9906      	ldr	r1, [sp, #24]
10055c9a:	42ba      	cmp	r2, r7
10055c9c:	d905      	bls.n	10055caa <GAT_att_srv_extract_write_packet_data+0x30>
10055c9e:	200d      	movs	r0, #13
10055ca0:	7008      	strb	r0, [r1, #0]
10055ca2:	2000      	movs	r0, #0
10055ca4:	8028      	strh	r0, [r5, #0]
10055ca6:	2786      	movs	r7, #134	@ 0x86
10055ca8:	e009      	b.n	10055cbe <GAT_att_srv_extract_write_packet_data+0x44>
10055caa:	2700      	movs	r7, #0
10055cac:	700f      	strb	r7, [r1, #0]
10055cae:	8028      	strh	r0, [r5, #0]
10055cb0:	89b0      	ldrh	r0, [r6, #12]
10055cb2:	1cc0      	adds	r0, r0, #3
10055cb4:	b281      	uxth	r1, r0
10055cb6:	4630      	mov	r0, r6
10055cb8:	4623      	mov	r3, r4
10055cba:	f7fd fda1 	bl	10053800 <ACL_pkt_read>
10055cbe:	4638      	mov	r0, r7
10055cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10055cc4 <GAT_att_srv_resp>:
10055cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
10055cc6:	b089      	sub	sp, #36	@ 0x24
10055cc8:	461f      	mov	r7, r3
10055cca:	9203      	str	r2, [sp, #12]
10055ccc:	460e      	mov	r6, r1
10055cce:	4605      	mov	r5, r0
10055cd0:	f7ff fc04 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10055cd4:	2800      	cmp	r0, #0
10055cd6:	d045      	beq.n	10055d64 <GAT_att_srv_resp+0xa0>
10055cd8:	4604      	mov	r4, r0
10055cda:	68c0      	ldr	r0, [r0, #12]
10055cdc:	2800      	cmp	r0, #0
10055cde:	d041      	beq.n	10055d64 <GAT_att_srv_resp+0xa0>
10055ce0:	9702      	str	r7, [sp, #8]
10055ce2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10055ce4:	9001      	str	r0, [sp, #4]
10055ce6:	980e      	ldr	r0, [sp, #56]	@ 0x38
10055ce8:	9000      	str	r0, [sp, #0]
10055cea:	481f      	ldr	r0, [pc, #124]	@ (10055d68 <__arm_cp.13_0>)
10055cec:	6807      	ldr	r7, [r0, #0]
10055cee:	3738      	adds	r7, #56	@ 0x38
10055cf0:	683f      	ldr	r7, [r7, #0]
10055cf2:	2f00      	cmp	r7, #0
10055cf4:	d00f      	beq.n	10055d16 <GAT_att_srv_resp+0x52>
10055cf6:	8838      	ldrh	r0, [r7, #0]
10055cf8:	42a8      	cmp	r0, r5
10055cfa:	d104      	bne.n	10055d06 <GAT_att_srv_resp+0x42>
10055cfc:	4638      	mov	r0, r7
10055cfe:	f002 fa7a 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10055d02:	42b0      	cmp	r0, r6
10055d04:	d001      	beq.n	10055d0a <GAT_att_srv_resp+0x46>
10055d06:	371c      	adds	r7, #28
10055d08:	e7f2      	b.n	10055cf0 <GAT_att_srv_resp+0x2c>
10055d0a:	4817      	ldr	r0, [pc, #92]	@ (10055d68 <__arm_cp.13_0>)
10055d0c:	6800      	ldr	r0, [r0, #0]
10055d0e:	3038      	adds	r0, #56	@ 0x38
10055d10:	4639      	mov	r1, r7
10055d12:	f00b fc5d 	bl	100615d0 <ACL_list_remove>
10055d16:	68e0      	ldr	r0, [r4, #12]
10055d18:	f7ff fd6c 	bl	100557f4 <GAT_att_cmn_get_opcode>
10055d1c:	1e41      	subs	r1, r0, #1
10055d1e:	9802      	ldr	r0, [sp, #8]
10055d20:	2800      	cmp	r0, #0
10055d22:	d013      	beq.n	10055d4c <GAT_att_srv_resp+0x88>
10055d24:	b2c8      	uxtb	r0, r1
10055d26:	281e      	cmp	r0, #30
10055d28:	d007      	beq.n	10055d3a <GAT_att_srv_resp+0x76>
10055d2a:	2240      	movs	r2, #64	@ 0x40
10055d2c:	4011      	ands	r1, r2
10055d2e:	d104      	bne.n	10055d3a <GAT_att_srv_resp+0x76>
10055d30:	68e3      	ldr	r3, [r4, #12]
10055d32:	9903      	ldr	r1, [sp, #12]
10055d34:	9a02      	ldr	r2, [sp, #8]
10055d36:	f000 f819 	bl	10055d6c <GAT_att_srv_write_err_packet>
10055d3a:	4620      	mov	r0, r4
10055d3c:	f000 f82a 	bl	10055d94 <GAT_att_srv_send_response>
10055d40:	2f00      	cmp	r7, #0
10055d42:	d00f      	beq.n	10055d64 <GAT_att_srv_resp+0xa0>
10055d44:	4638      	mov	r0, r7
10055d46:	f7fd fd3f 	bl	100537c8 <ACL_pkt_release>
10055d4a:	e00b      	b.n	10055d64 <GAT_att_srv_resp+0xa0>
10055d4c:	a804      	add	r0, sp, #16
10055d4e:	9a00      	ldr	r2, [sp, #0]
10055d50:	8182      	strh	r2, [r0, #12]
10055d52:	7041      	strb	r1, [r0, #1]
10055d54:	2101      	movs	r1, #1
10055d56:	7001      	strb	r1, [r0, #0]
10055d58:	9901      	ldr	r1, [sp, #4]
10055d5a:	9108      	str	r1, [sp, #32]
10055d5c:	9406      	str	r4, [sp, #24]
10055d5e:	9705      	str	r7, [sp, #20]
10055d60:	f7ff fd88 	bl	10055874 <GAT_att_srv_run>
10055d64:	b009      	add	sp, #36	@ 0x24
10055d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055d68 <__arm_cp.13_0>:
10055d68:	20002420 	.word	0x20002420

10055d6c <GAT_att_srv_write_err_packet>:
10055d6c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10055d6e:	2b00      	cmp	r3, #0
10055d70:	d00f      	beq.n	10055d92 <GAT_att_srv_write_err_packet+0x26>
10055d72:	461c      	mov	r4, r3
10055d74:	466b      	mov	r3, sp
10055d76:	7099      	strb	r1, [r3, #2]
10055d78:	7058      	strb	r0, [r3, #1]
10055d7a:	2001      	movs	r0, #1
10055d7c:	7018      	strb	r0, [r3, #0]
10055d7e:	711a      	strb	r2, [r3, #4]
10055d80:	0a08      	lsrs	r0, r1, #8
10055d82:	70d8      	strb	r0, [r3, #3]
10055d84:	89a1      	ldrh	r1, [r4, #12]
10055d86:	2505      	movs	r5, #5
10055d88:	4620      	mov	r0, r4
10055d8a:	462a      	mov	r2, r5
10055d8c:	f7fd fd5a 	bl	10053844 <ACL_pkt_write>
10055d90:	8065      	strh	r5, [r4, #2]
10055d92:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10055d94 <GAT_att_srv_send_response>:
10055d94:	b510      	push	{r4, lr}
10055d96:	4604      	mov	r4, r0
10055d98:	68c0      	ldr	r0, [r0, #12]
10055d9a:	2800      	cmp	r0, #0
10055d9c:	d015      	beq.n	10055dca <GAT_att_srv_send_response+0x36>
10055d9e:	8841      	ldrh	r1, [r0, #2]
10055da0:	1d09      	adds	r1, r1, #4
10055da2:	b289      	uxth	r1, r1
10055da4:	f7fd fd19 	bl	100537da <ACL_pkt_resize>
10055da8:	68e1      	ldr	r1, [r4, #12]
10055daa:	8960      	ldrh	r0, [r4, #10]
10055dac:	f7ff fc18 	bl	100555e0 <GAT_att_cmn_send>
10055db0:	2800      	cmp	r0, #0
10055db2:	d108      	bne.n	10055dc6 <GAT_att_srv_send_response+0x32>
10055db4:	8962      	ldrh	r2, [r4, #10]
10055db6:	8921      	ldrh	r1, [r4, #8]
10055db8:	2000      	movs	r0, #0
10055dba:	f7ff fc01 	bl	100555c0 <GAT_att_cmn_stop_timer>
10055dbe:	88a0      	ldrh	r0, [r4, #4]
10055dc0:	2101      	movs	r1, #1
10055dc2:	4388      	bics	r0, r1
10055dc4:	80a0      	strh	r0, [r4, #4]
10055dc6:	2000      	movs	r0, #0
10055dc8:	60e0      	str	r0, [r4, #12]
10055dca:	bd10      	pop	{r4, pc}

10055dcc <GAT_att_srv_confirmation_pending>:
10055dcc:	b5e0      	push	{r5, r6, r7, lr}
10055dce:	a801      	add	r0, sp, #4
10055dd0:	2102      	movs	r1, #2
10055dd2:	8001      	strh	r1, [r0, #0]
10055dd4:	9000      	str	r0, [sp, #0]
10055dd6:	2000      	movs	r0, #0
10055dd8:	4b04      	ldr	r3, [pc, #16]	@ (10055dec <__arm_cp.16_0>)
10055dda:	4601      	mov	r1, r0
10055ddc:	4602      	mov	r2, r0
10055dde:	f7ff fabf 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10055de2:	3886      	subs	r0, #134	@ 0x86
10055de4:	4241      	negs	r1, r0
10055de6:	4148      	adcs	r0, r1
10055de8:	bd8c      	pop	{r2, r3, r7, pc}
10055dea:	46c0      	nop			@ (mov r8, r8)

10055dec <__arm_cp.16_0>:
10055dec:	1005560d 	.word	0x1005560d

10055df0 <GAT_att_srv_request_user_pending>:
10055df0:	b510      	push	{r4, lr}
10055df2:	480a      	ldr	r0, [pc, #40]	@ (10055e1c <__arm_cp.17_0>)
10055df4:	6804      	ldr	r4, [r0, #0]
10055df6:	3438      	adds	r4, #56	@ 0x38
10055df8:	6824      	ldr	r4, [r4, #0]
10055dfa:	2c00      	cmp	r4, #0
10055dfc:	d009      	beq.n	10055e12 <GAT_att_srv_request_user_pending+0x22>
10055dfe:	4620      	mov	r0, r4
10055e00:	f7ff fcf8 	bl	100557f4 <GAT_att_cmn_get_opcode>
10055e04:	281e      	cmp	r0, #30
10055e06:	d002      	beq.n	10055e0e <GAT_att_srv_request_user_pending+0x1e>
10055e08:	2140      	movs	r1, #64	@ 0x40
10055e0a:	4008      	ands	r0, r1
10055e0c:	d003      	beq.n	10055e16 <GAT_att_srv_request_user_pending+0x26>
10055e0e:	341c      	adds	r4, #28
10055e10:	e7f2      	b.n	10055df8 <GAT_att_srv_request_user_pending+0x8>
10055e12:	2000      	movs	r0, #0
10055e14:	bd10      	pop	{r4, pc}
10055e16:	2001      	movs	r0, #1
10055e18:	bd10      	pop	{r4, pc}
10055e1a:	46c0      	nop			@ (mov r8, r8)

10055e1c <__arm_cp.17_0>:
10055e1c:	20002420 	.word	0x20002420

10055e20 <GAT_att_srv_flush_user_pending_list>:
10055e20:	b570      	push	{r4, r5, r6, lr}
10055e22:	4d08      	ldr	r5, [pc, #32]	@ (10055e44 <__arm_cp.18_0>)
10055e24:	6828      	ldr	r0, [r5, #0]
10055e26:	6b84      	ldr	r4, [r0, #56]	@ 0x38
10055e28:	2c00      	cmp	r4, #0
10055e2a:	d00a      	beq.n	10055e42 <GAT_att_srv_flush_user_pending_list+0x22>
10055e2c:	69e6      	ldr	r6, [r4, #28]
10055e2e:	6828      	ldr	r0, [r5, #0]
10055e30:	3038      	adds	r0, #56	@ 0x38
10055e32:	4621      	mov	r1, r4
10055e34:	f00b fbcc 	bl	100615d0 <ACL_list_remove>
10055e38:	4620      	mov	r0, r4
10055e3a:	f7fd fcc5 	bl	100537c8 <ACL_pkt_release>
10055e3e:	4634      	mov	r4, r6
10055e40:	e7f2      	b.n	10055e28 <GAT_att_srv_flush_user_pending_list+0x8>
10055e42:	bd70      	pop	{r4, r5, r6, pc}

10055e44 <__arm_cp.18_0>:
10055e44:	20002420 	.word	0x20002420

10055e48 <GAT_att_srv_exchange_mtu_exc>:
10055e48:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10055e4a:	4604      	mov	r4, r0
10055e4c:	6880      	ldr	r0, [r0, #8]
10055e4e:	8941      	ldrh	r1, [r0, #10]
10055e50:	2904      	cmp	r1, #4
10055e52:	d11a      	bne.n	10055e8a <GAT_att_srv_exchange_mtu_exc+0x42>
10055e54:	6860      	ldr	r0, [r4, #4]
10055e56:	8981      	ldrh	r1, [r0, #12]
10055e58:	1c49      	adds	r1, r1, #1
10055e5a:	b289      	uxth	r1, r1
10055e5c:	f7fd fcd9 	bl	10053812 <ACL_pkt_read_16b>
10055e60:	4605      	mov	r5, r0
10055e62:	2817      	cmp	r0, #23
10055e64:	d800      	bhi.n	10055e68 <GAT_att_srv_exchange_mtu_exc+0x20>
10055e66:	2517      	movs	r5, #23
10055e68:	4e1d      	ldr	r6, [pc, #116]	@ (10055ee0 <__arm_cp.19_0>)
10055e6a:	8a30      	ldrh	r0, [r6, #16]
10055e6c:	4285      	cmp	r5, r0
10055e6e:	d300      	bcc.n	10055e72 <GAT_att_srv_exchange_mtu_exc+0x2a>
10055e70:	4605      	mov	r5, r0
10055e72:	68a3      	ldr	r3, [r4, #8]
10055e74:	8898      	ldrh	r0, [r3, #4]
10055e76:	0700      	lsls	r0, r0, #28
10055e78:	d40f      	bmi.n	10055e9a <GAT_att_srv_exchange_mtu_exc+0x52>
10055e7a:	8919      	ldrh	r1, [r3, #8]
10055e7c:	2002      	movs	r0, #2
10055e7e:	462a      	mov	r2, r5
10055e80:	f00c fa66 	bl	10062350 <aci_att_exchange_mtu_resp_event_push_noinline>
10055e84:	2800      	cmp	r0, #0
10055e86:	d014      	beq.n	10055eb2 <GAT_att_srv_exchange_mtu_exc+0x6a>
10055e88:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10055e8a:	68c3      	ldr	r3, [r0, #12]
10055e8c:	2002      	movs	r0, #2
10055e8e:	2100      	movs	r1, #0
10055e90:	2206      	movs	r2, #6
10055e92:	f7ff ff6b 	bl	10055d6c <GAT_att_srv_write_err_packet>
10055e96:	2086      	movs	r0, #134	@ 0x86
10055e98:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10055e9a:	88d8      	ldrh	r0, [r3, #6]
10055e9c:	42a8      	cmp	r0, r5
10055e9e:	d00e      	beq.n	10055ebe <GAT_att_srv_exchange_mtu_exc+0x76>
10055ea0:	3308      	adds	r3, #8
10055ea2:	2042      	movs	r0, #66	@ 0x42
10055ea4:	2103      	movs	r1, #3
10055ea6:	2202      	movs	r2, #2
10055ea8:	f00c fd82 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
10055eac:	2800      	cmp	r0, #0
10055eae:	d1eb      	bne.n	10055e88 <GAT_att_srv_exchange_mtu_exc+0x40>
10055eb0:	e005      	b.n	10055ebe <GAT_att_srv_exchange_mtu_exc+0x76>
10055eb2:	68a0      	ldr	r0, [r4, #8]
10055eb4:	80c5      	strh	r5, [r0, #6]
10055eb6:	8881      	ldrh	r1, [r0, #4]
10055eb8:	2208      	movs	r2, #8
10055eba:	430a      	orrs	r2, r1
10055ebc:	8082      	strh	r2, [r0, #4]
10055ebe:	8a30      	ldrh	r0, [r6, #16]
10055ec0:	ab01      	add	r3, sp, #4
10055ec2:	7058      	strb	r0, [r3, #1]
10055ec4:	2503      	movs	r5, #3
10055ec6:	701d      	strb	r5, [r3, #0]
10055ec8:	0a00      	lsrs	r0, r0, #8
10055eca:	7098      	strb	r0, [r3, #2]
10055ecc:	68a0      	ldr	r0, [r4, #8]
10055ece:	68c4      	ldr	r4, [r0, #12]
10055ed0:	89a1      	ldrh	r1, [r4, #12]
10055ed2:	4620      	mov	r0, r4
10055ed4:	462a      	mov	r2, r5
10055ed6:	f7fd fcb5 	bl	10053844 <ACL_pkt_write>
10055eda:	8065      	strh	r5, [r4, #2]
10055edc:	2000      	movs	r0, #0
10055ede:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10055ee0 <__arm_cp.19_0>:
10055ee0:	2000247c 	.word	0x2000247c

10055ee4 <GAT_att_srv_find_info_exc>:
10055ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
10055ee6:	b08f      	sub	sp, #60	@ 0x3c
10055ee8:	4601      	mov	r1, r0
10055eea:	6840      	ldr	r0, [r0, #4]
10055eec:	9101      	str	r1, [sp, #4]
10055eee:	6889      	ldr	r1, [r1, #8]
10055ef0:	68cf      	ldr	r7, [r1, #12]
10055ef2:	ad0d      	add	r5, sp, #52	@ 0x34
10055ef4:	ac0e      	add	r4, sp, #56	@ 0x38
10055ef6:	4629      	mov	r1, r5
10055ef8:	4622      	mov	r2, r4
10055efa:	f000 fc7c 	bl	100567f6 <GAT_att_srv_get_handle_range>
10055efe:	8828      	ldrh	r0, [r5, #0]
10055f00:	9007      	str	r0, [sp, #28]
10055f02:	f00d fa17 	bl	10063334 <GAT_att_db_find_from_handle>
10055f06:	4602      	mov	r2, r0
10055f08:	8820      	ldrh	r0, [r4, #0]
10055f0a:	9002      	str	r0, [sp, #8]
10055f0c:	2500      	movs	r5, #0
10055f0e:	462b      	mov	r3, r5
10055f10:	9500      	str	r5, [sp, #0]
10055f12:	9503      	str	r5, [sp, #12]
10055f14:	2a00      	cmp	r2, #0
10055f16:	9506      	str	r5, [sp, #24]
10055f18:	d050      	beq.n	10055fbc <GAT_att_srv_find_info_exc+0xd8>
10055f1a:	8850      	ldrh	r0, [r2, #2]
10055f1c:	9007      	str	r0, [sp, #28]
10055f1e:	9902      	ldr	r1, [sp, #8]
10055f20:	4288      	cmp	r0, r1
10055f22:	d84b      	bhi.n	10055fbc <GAT_att_srv_find_info_exc+0xd8>
10055f24:	b2a8      	uxth	r0, r5
10055f26:	18c0      	adds	r0, r0, r3
10055f28:	9901      	ldr	r1, [sp, #4]
10055f2a:	6889      	ldr	r1, [r1, #8]
10055f2c:	88c9      	ldrh	r1, [r1, #6]
10055f2e:	4288      	cmp	r0, r1
10055f30:	d844      	bhi.n	10055fbc <GAT_att_srv_find_info_exc+0xd8>
10055f32:	461c      	mov	r4, r3
10055f34:	ad08      	add	r5, sp, #32
10055f36:	9205      	str	r2, [sp, #20]
10055f38:	4610      	mov	r0, r2
10055f3a:	4629      	mov	r1, r5
10055f3c:	f000 ffba 	bl	10056eb4 <GAT_srv_get_attr_type>
10055f40:	7c2e      	ldrb	r6, [r5, #16]
10055f42:	9803      	ldr	r0, [sp, #12]
10055f44:	0600      	lsls	r0, r0, #24
10055f46:	d006      	beq.n	10055f56 <GAT_att_srv_find_info_exc+0x72>
10055f48:	9800      	ldr	r0, [sp, #0]
10055f4a:	4286      	cmp	r6, r0
10055f4c:	d139      	bne.n	10055fc2 <GAT_att_srv_find_info_exc+0xde>
10055f4e:	08c0      	lsrs	r0, r0, #3
10055f50:	9004      	str	r0, [sp, #16]
10055f52:	9d06      	ldr	r5, [sp, #24]
10055f54:	e016      	b.n	10055f84 <GAT_att_srv_find_info_exc+0xa0>
10055f56:	89b9      	ldrh	r1, [r7, #12]
10055f58:	2205      	movs	r2, #5
10055f5a:	4638      	mov	r0, r7
10055f5c:	f7ff fe80 	bl	10055c60 <ACL_pkt_write_8b>
10055f60:	2e10      	cmp	r6, #16
10055f62:	d001      	beq.n	10055f68 <GAT_att_srv_find_info_exc+0x84>
10055f64:	2202      	movs	r2, #2
10055f66:	e000      	b.n	10055f6a <GAT_att_srv_find_info_exc+0x86>
10055f68:	2201      	movs	r2, #1
10055f6a:	9d06      	ldr	r5, [sp, #24]
10055f6c:	89b8      	ldrh	r0, [r7, #12]
10055f6e:	1c40      	adds	r0, r0, #1
10055f70:	b281      	uxth	r1, r0
10055f72:	4638      	mov	r0, r7
10055f74:	9203      	str	r2, [sp, #12]
10055f76:	f7ff fe73 	bl	10055c60 <ACL_pkt_write_8b>
10055f7a:	1cad      	adds	r5, r5, #2
10055f7c:	08f0      	lsrs	r0, r6, #3
10055f7e:	9004      	str	r0, [sp, #16]
10055f80:	1c84      	adds	r4, r0, #2
10055f82:	9600      	str	r6, [sp, #0]
10055f84:	89b8      	ldrh	r0, [r7, #12]
10055f86:	1940      	adds	r0, r0, r5
10055f88:	b281      	uxth	r1, r0
10055f8a:	4638      	mov	r0, r7
10055f8c:	9a07      	ldr	r2, [sp, #28]
10055f8e:	f7fd fc50 	bl	10053832 <ACL_pkt_write_16b>
10055f92:	89b8      	ldrh	r0, [r7, #12]
10055f94:	1828      	adds	r0, r5, r0
10055f96:	1c86      	adds	r6, r0, #2
10055f98:	a808      	add	r0, sp, #32
10055f9a:	f00b fb00 	bl	1006159e <UUID_get_value_p>
10055f9e:	4603      	mov	r3, r0
10055fa0:	b2b1      	uxth	r1, r6
10055fa2:	9804      	ldr	r0, [sp, #16]
10055fa4:	b2c2      	uxtb	r2, r0
10055fa6:	4638      	mov	r0, r7
10055fa8:	f7fd fc4c 	bl	10053844 <ACL_pkt_write>
10055fac:	b2e0      	uxtb	r0, r4
10055fae:	182d      	adds	r5, r5, r0
10055fb0:	9805      	ldr	r0, [sp, #20]
10055fb2:	f00d fa21 	bl	100633f8 <GAT_att_db_get_next>
10055fb6:	4602      	mov	r2, r0
10055fb8:	4623      	mov	r3, r4
10055fba:	e7ab      	b.n	10055f14 <GAT_att_srv_find_info_exc+0x30>
10055fbc:	9803      	ldr	r0, [sp, #12]
10055fbe:	0600      	lsls	r0, r0, #24
10055fc0:	d003      	beq.n	10055fca <GAT_att_srv_find_info_exc+0xe6>
10055fc2:	9806      	ldr	r0, [sp, #24]
10055fc4:	8078      	strh	r0, [r7, #2]
10055fc6:	2000      	movs	r0, #0
10055fc8:	e007      	b.n	10055fda <GAT_att_srv_find_info_exc+0xf6>
10055fca:	9807      	ldr	r0, [sp, #28]
10055fcc:	b281      	uxth	r1, r0
10055fce:	2004      	movs	r0, #4
10055fd0:	220a      	movs	r2, #10
10055fd2:	463b      	mov	r3, r7
10055fd4:	f7ff feca 	bl	10055d6c <GAT_att_srv_write_err_packet>
10055fd8:	2086      	movs	r0, #134	@ 0x86
10055fda:	b00f      	add	sp, #60	@ 0x3c
10055fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055fde <GAT_att_srv_find_by_type_val_exc>:
10055fde:	b5f0      	push	{r4, r5, r6, r7, lr}
10055fe0:	b091      	sub	sp, #68	@ 0x44
10055fe2:	4607      	mov	r7, r0
10055fe4:	ac09      	add	r4, sp, #36	@ 0x24
10055fe6:	2010      	movs	r0, #16
10055fe8:	7420      	strb	r0, [r4, #16]
10055fea:	6878      	ldr	r0, [r7, #4]
10055fec:	8981      	ldrh	r1, [r0, #12]
10055fee:	1d49      	adds	r1, r1, #5
10055ff0:	b289      	uxth	r1, r1
10055ff2:	f7fd fc0e 	bl	10053812 <ACL_pkt_read_16b>
10055ff6:	81a0      	strh	r0, [r4, #12]
10055ff8:	6878      	ldr	r0, [r7, #4]
10055ffa:	ae0f      	add	r6, sp, #60	@ 0x3c
10055ffc:	ad0e      	add	r5, sp, #56	@ 0x38
10055ffe:	4631      	mov	r1, r6
10056000:	462a      	mov	r2, r5
10056002:	f000 fbf8 	bl	100567f6 <GAT_att_srv_get_handle_range>
10056006:	8836      	ldrh	r6, [r6, #0]
10056008:	6878      	ldr	r0, [r7, #4]
1005600a:	9706      	str	r7, [sp, #24]
1005600c:	68b9      	ldr	r1, [r7, #8]
1005600e:	8844      	ldrh	r4, [r0, #2]
10056010:	68c8      	ldr	r0, [r1, #12]
10056012:	8981      	ldrh	r1, [r0, #12]
10056014:	2207      	movs	r2, #7
10056016:	9002      	str	r0, [sp, #8]
10056018:	f7ff fe22 	bl	10055c60 <ACL_pkt_write_8b>
1005601c:	1fe0      	subs	r0, r4, #7
1005601e:	8829      	ldrh	r1, [r5, #0]
10056020:	9104      	str	r1, [sp, #16]
10056022:	2101      	movs	r1, #1
10056024:	9105      	str	r1, [sp, #20]
10056026:	b280      	uxth	r0, r0
10056028:	9003      	str	r0, [sp, #12]
1005602a:	9601      	str	r6, [sp, #4]
1005602c:	9805      	ldr	r0, [sp, #20]
1005602e:	b287      	uxth	r7, r0
10056030:	1d3c      	adds	r4, r7, #4
10056032:	9806      	ldr	r0, [sp, #24]
10056034:	6880      	ldr	r0, [r0, #8]
10056036:	88c0      	ldrh	r0, [r0, #6]
10056038:	4284      	cmp	r4, r0
1005603a:	d83c      	bhi.n	100560b6 <GAT_att_srv_find_by_type_val_exc+0xd8>
1005603c:	b2b0      	uxth	r0, r6
1005603e:	aa09      	add	r2, sp, #36	@ 0x24
10056040:	9904      	ldr	r1, [sp, #16]
10056042:	f001 faa7 	bl	10057594 <GAT_srv_find_by_type_attr_p>
10056046:	2800      	cmp	r0, #0
10056048:	d035      	beq.n	100560b6 <GAT_att_srv_find_by_type_val_exc+0xd8>
1005604a:	4605      	mov	r5, r0
1005604c:	a810      	add	r0, sp, #64	@ 0x40
1005604e:	9000      	str	r0, [sp, #0]
10056050:	2200      	movs	r2, #0
10056052:	ab08      	add	r3, sp, #32
10056054:	9806      	ldr	r0, [sp, #24]
10056056:	4629      	mov	r1, r5
10056058:	f000 fbe0 	bl	1005681c <GAT_att_srv_value_read>
1005605c:	2886      	cmp	r0, #134	@ 0x86
1005605e:	d028      	beq.n	100560b2 <GAT_att_srv_find_by_type_val_exc+0xd4>
10056060:	2800      	cmp	r0, #0
10056062:	d136      	bne.n	100560d2 <GAT_att_srv_find_by_type_val_exc+0xf4>
10056064:	886e      	ldrh	r6, [r5, #2]
10056066:	9808      	ldr	r0, [sp, #32]
10056068:	6843      	ldr	r3, [r0, #4]
1005606a:	9806      	ldr	r0, [sp, #24]
1005606c:	6840      	ldr	r0, [r0, #4]
1005606e:	8981      	ldrh	r1, [r0, #12]
10056070:	1dc9      	adds	r1, r1, #7
10056072:	b289      	uxth	r1, r1
10056074:	9f03      	ldr	r7, [sp, #12]
10056076:	463a      	mov	r2, r7
10056078:	f7fd fbb9 	bl	100537ee <ACL_pkt_cmp>
1005607c:	9908      	ldr	r1, [sp, #32]
1005607e:	8809      	ldrh	r1, [r1, #0]
10056080:	42b9      	cmp	r1, r7
10056082:	d116      	bne.n	100560b2 <GAT_att_srv_find_by_type_val_exc+0xd4>
10056084:	2800      	cmp	r0, #0
10056086:	d114      	bne.n	100560b2 <GAT_att_srv_find_by_type_val_exc+0xd4>
10056088:	af07      	add	r7, sp, #28
1005608a:	703e      	strb	r6, [r7, #0]
1005608c:	0a30      	lsrs	r0, r6, #8
1005608e:	7078      	strb	r0, [r7, #1]
10056090:	4628      	mov	r0, r5
10056092:	f000 ff37 	bl	10056f04 <GAT_srv_get_att_group_end_handle>
10056096:	4606      	mov	r6, r0
10056098:	70b8      	strb	r0, [r7, #2]
1005609a:	0a00      	lsrs	r0, r0, #8
1005609c:	70f8      	strb	r0, [r7, #3]
1005609e:	9802      	ldr	r0, [sp, #8]
100560a0:	8981      	ldrh	r1, [r0, #12]
100560a2:	9a05      	ldr	r2, [sp, #20]
100560a4:	1889      	adds	r1, r1, r2
100560a6:	b289      	uxth	r1, r1
100560a8:	2204      	movs	r2, #4
100560aa:	463b      	mov	r3, r7
100560ac:	f7fd fbca 	bl	10053844 <ACL_pkt_write>
100560b0:	9405      	str	r4, [sp, #20]
100560b2:	1c76      	adds	r6, r6, #1
100560b4:	e7ba      	b.n	1005602c <GAT_att_srv_find_by_type_val_exc+0x4e>
100560b6:	2f01      	cmp	r7, #1
100560b8:	d107      	bne.n	100560ca <GAT_att_srv_find_by_type_val_exc+0xec>
100560ba:	2006      	movs	r0, #6
100560bc:	220a      	movs	r2, #10
100560be:	9901      	ldr	r1, [sp, #4]
100560c0:	9b02      	ldr	r3, [sp, #8]
100560c2:	f7ff fe53 	bl	10055d6c <GAT_att_srv_write_err_packet>
100560c6:	2086      	movs	r0, #134	@ 0x86
100560c8:	e003      	b.n	100560d2 <GAT_att_srv_find_by_type_val_exc+0xf4>
100560ca:	9802      	ldr	r0, [sp, #8]
100560cc:	9905      	ldr	r1, [sp, #20]
100560ce:	8041      	strh	r1, [r0, #2]
100560d0:	2000      	movs	r0, #0
100560d2:	b011      	add	sp, #68	@ 0x44
100560d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

100560d6 <GAT_att_srv_read_by_type_exc>:
100560d6:	b5f0      	push	{r4, r5, r6, r7, lr}
100560d8:	b097      	sub	sp, #92	@ 0x5c
100560da:	4604      	mov	r4, r0
100560dc:	6840      	ldr	r0, [r0, #4]
100560de:	a915      	add	r1, sp, #84	@ 0x54
100560e0:	aa14      	add	r2, sp, #80	@ 0x50
100560e2:	f000 fb88 	bl	100567f6 <GAT_att_srv_get_handle_range>
100560e6:	940a      	str	r4, [sp, #40]	@ 0x28
100560e8:	6860      	ldr	r0, [r4, #4]
100560ea:	8981      	ldrh	r1, [r0, #12]
100560ec:	1d49      	adds	r1, r1, #5
100560ee:	8842      	ldrh	r2, [r0, #2]
100560f0:	b289      	uxth	r1, r1
100560f2:	2a07      	cmp	r2, #7
100560f4:	d105      	bne.n	10056102 <GAT_att_srv_read_by_type_exc+0x2c>
100560f6:	f7fd fb8c 	bl	10053812 <ACL_pkt_read_16b>
100560fa:	a90f      	add	r1, sp, #60	@ 0x3c
100560fc:	8188      	strh	r0, [r1, #12]
100560fe:	2010      	movs	r0, #16
10056100:	e004      	b.n	1005610c <GAT_att_srv_read_by_type_exc+0x36>
10056102:	2210      	movs	r2, #16
10056104:	ab0f      	add	r3, sp, #60	@ 0x3c
10056106:	f7fd fb7b 	bl	10053800 <ACL_pkt_read>
1005610a:	2080      	movs	r0, #128	@ 0x80
1005610c:	a90f      	add	r1, sp, #60	@ 0x3c
1005610e:	7408      	strb	r0, [r1, #16]
10056110:	980a      	ldr	r0, [sp, #40]	@ 0x28
10056112:	7840      	ldrb	r0, [r0, #1]
10056114:	2810      	cmp	r0, #16
10056116:	d001      	beq.n	1005611c <GAT_att_srv_read_by_type_exc+0x46>
10056118:	2102      	movs	r1, #2
1005611a:	e000      	b.n	1005611e <GAT_att_srv_read_by_type_exc+0x48>
1005611c:	2104      	movs	r1, #4
1005611e:	9107      	str	r1, [sp, #28]
10056120:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10056122:	6891      	ldr	r1, [r2, #8]
10056124:	68cc      	ldr	r4, [r1, #12]
10056126:	88cb      	ldrh	r3, [r1, #6]
10056128:	9305      	str	r3, [sp, #20]
1005612a:	7812      	ldrb	r2, [r2, #0]
1005612c:	2a00      	cmp	r2, #0
1005612e:	9404      	str	r4, [sp, #16]
10056130:	d00a      	beq.n	10056148 <GAT_att_srv_read_by_type_exc+0x72>
10056132:	8865      	ldrh	r5, [r4, #2]
10056134:	2d02      	cmp	r5, #2
10056136:	d315      	bcc.n	10056164 <GAT_att_srv_read_by_type_exc+0x8e>
10056138:	89a0      	ldrh	r0, [r4, #12]
1005613a:	1c40      	adds	r0, r0, #1
1005613c:	b281      	uxth	r1, r0
1005613e:	4620      	mov	r0, r4
10056140:	f000 fba9 	bl	10056896 <ACL_pkt_read_8b>
10056144:	4606      	mov	r6, r0
10056146:	e00e      	b.n	10056166 <GAT_att_srv_read_by_type_exc+0x90>
10056148:	aa15      	add	r2, sp, #84	@ 0x54
1005614a:	8815      	ldrh	r5, [r2, #0]
1005614c:	2810      	cmp	r0, #16
1005614e:	d112      	bne.n	10056176 <GAT_att_srv_read_by_type_exc+0xa0>
10056150:	a80f      	add	r0, sp, #60	@ 0x3c
10056152:	f001 f981 	bl	10057458 <GAT_srv_is_supported_grouping_type>
10056156:	2800      	cmp	r0, #0
10056158:	d100      	bne.n	1005615c <GAT_att_srv_read_by_type_exc+0x86>
1005615a:	e0b8      	b.n	100562ce <GAT_att_srv_read_by_type_exc+0x1f8>
1005615c:	9508      	str	r5, [sp, #32]
1005615e:	89a1      	ldrh	r1, [r4, #12]
10056160:	2211      	movs	r2, #17
10056162:	e01b      	b.n	1005619c <GAT_att_srv_read_by_type_exc+0xc6>
10056164:	2600      	movs	r6, #0
10056166:	89a0      	ldrh	r0, [r4, #12]
10056168:	1940      	adds	r0, r0, r5
1005616a:	b281      	uxth	r1, r0
1005616c:	4620      	mov	r0, r4
1005616e:	f7fd fb50 	bl	10053812 <ACL_pkt_read_16b>
10056172:	9008      	str	r0, [sp, #32]
10056174:	e018      	b.n	100561a8 <GAT_att_srv_read_by_type_exc+0xd2>
10056176:	a80b      	add	r0, sp, #44	@ 0x2c
10056178:	8105      	strh	r5, [r0, #8]
1005617a:	2202      	movs	r2, #2
1005617c:	7102      	strb	r2, [r0, #4]
1005617e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10056180:	8142      	strh	r2, [r0, #10]
10056182:	910b      	str	r1, [sp, #44]	@ 0x2c
10056184:	a90f      	add	r1, sp, #60	@ 0x3c
10056186:	910e      	str	r1, [sp, #56]	@ 0x38
10056188:	f001 f9a8 	bl	100574dc <GAT_srv_check_change_aware>
1005618c:	2886      	cmp	r0, #134	@ 0x86
1005618e:	d102      	bne.n	10056196 <GAT_att_srv_read_by_type_exc+0xc0>
10056190:	a816      	add	r0, sp, #88	@ 0x58
10056192:	2212      	movs	r2, #18
10056194:	e09d      	b.n	100562d2 <GAT_att_srv_read_by_type_exc+0x1fc>
10056196:	9508      	str	r5, [sp, #32]
10056198:	89a1      	ldrh	r1, [r4, #12]
1005619a:	2209      	movs	r2, #9
1005619c:	4620      	mov	r0, r4
1005619e:	f7ff fd5f 	bl	10055c60 <ACL_pkt_write_8b>
100561a2:	2501      	movs	r5, #1
100561a4:	8065      	strh	r5, [r4, #2]
100561a6:	2600      	movs	r6, #0
100561a8:	9805      	ldr	r0, [sp, #20]
100561aa:	1e80      	subs	r0, r0, #2
100561ac:	9001      	str	r0, [sp, #4]
100561ae:	a814      	add	r0, sp, #80	@ 0x50
100561b0:	8800      	ldrh	r0, [r0, #0]
100561b2:	9003      	str	r0, [sp, #12]
100561b4:	9609      	str	r6, [sp, #36]	@ 0x24
100561b6:	b2f6      	uxtb	r6, r6
100561b8:	9506      	str	r5, [sp, #24]
100561ba:	b2af      	uxth	r7, r5
100561bc:	19b8      	adds	r0, r7, r6
100561be:	9905      	ldr	r1, [sp, #20]
100561c0:	4288      	cmp	r0, r1
100561c2:	d874      	bhi.n	100562ae <GAT_att_srv_read_by_type_exc+0x1d8>
100561c4:	9808      	ldr	r0, [sp, #32]
100561c6:	b285      	uxth	r5, r0
100561c8:	aa0f      	add	r2, sp, #60	@ 0x3c
100561ca:	4628      	mov	r0, r5
100561cc:	9903      	ldr	r1, [sp, #12]
100561ce:	f001 f9e1 	bl	10057594 <GAT_srv_find_by_type_attr_p>
100561d2:	2800      	cmp	r0, #0
100561d4:	d06b      	beq.n	100562ae <GAT_att_srv_read_by_type_exc+0x1d8>
100561d6:	4604      	mov	r4, r0
100561d8:	9502      	str	r5, [sp, #8]
100561da:	a816      	add	r0, sp, #88	@ 0x58
100561dc:	9000      	str	r0, [sp, #0]
100561de:	2500      	movs	r5, #0
100561e0:	ab0b      	add	r3, sp, #44	@ 0x2c
100561e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
100561e4:	4621      	mov	r1, r4
100561e6:	462a      	mov	r2, r5
100561e8:	f000 fb18 	bl	1005681c <GAT_att_srv_value_read>
100561ec:	2800      	cmp	r0, #0
100561ee:	d14f      	bne.n	10056290 <GAT_att_srv_read_by_type_exc+0x1ba>
100561f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100561f2:	8800      	ldrh	r0, [r0, #0]
100561f4:	9907      	ldr	r1, [sp, #28]
100561f6:	1809      	adds	r1, r1, r0
100561f8:	2f01      	cmp	r7, #1
100561fa:	d111      	bne.n	10056220 <GAT_att_srv_read_by_type_exc+0x14a>
100561fc:	29ff      	cmp	r1, #255	@ 0xff
100561fe:	d300      	bcc.n	10056202 <GAT_att_srv_read_by_type_exc+0x12c>
10056200:	21ff      	movs	r1, #255	@ 0xff
10056202:	9801      	ldr	r0, [sp, #4]
10056204:	4281      	cmp	r1, r0
10056206:	d300      	bcc.n	1005620a <GAT_att_srv_read_by_type_exc+0x134>
10056208:	9901      	ldr	r1, [sp, #4]
1005620a:	9109      	str	r1, [sp, #36]	@ 0x24
1005620c:	b2ca      	uxtb	r2, r1
1005620e:	9e04      	ldr	r6, [sp, #16]
10056210:	89b0      	ldrh	r0, [r6, #12]
10056212:	1c40      	adds	r0, r0, #1
10056214:	b281      	uxth	r1, r0
10056216:	4630      	mov	r0, r6
10056218:	f7ff fd22 	bl	10055c60 <ACL_pkt_write_8b>
1005621c:	2702      	movs	r7, #2
1005621e:	e003      	b.n	10056228 <GAT_att_srv_read_by_type_exc+0x152>
10056220:	42b1      	cmp	r1, r6
10056222:	9e04      	ldr	r6, [sp, #16]
10056224:	9f06      	ldr	r7, [sp, #24]
10056226:	d15c      	bne.n	100562e2 <GAT_att_srv_read_by_type_exc+0x20c>
10056228:	8865      	ldrh	r5, [r4, #2]
1005622a:	4620      	mov	r0, r4
1005622c:	f000 fe6a 	bl	10056f04 <GAT_srv_get_att_group_end_handle>
10056230:	9008      	str	r0, [sp, #32]
10056232:	89b0      	ldrh	r0, [r6, #12]
10056234:	19c0      	adds	r0, r0, r7
10056236:	b281      	uxth	r1, r0
10056238:	4630      	mov	r0, r6
1005623a:	462a      	mov	r2, r5
1005623c:	f7fd faf9 	bl	10053832 <ACL_pkt_write_16b>
10056240:	9807      	ldr	r0, [sp, #28]
10056242:	9909      	ldr	r1, [sp, #36]	@ 0x24
10056244:	1a0a      	subs	r2, r1, r0
10056246:	463c      	mov	r4, r7
10056248:	1cbf      	adds	r7, r7, #2
1005624a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005624c:	7840      	ldrb	r0, [r0, #1]
1005624e:	2810      	cmp	r0, #16
10056250:	d10a      	bne.n	10056268 <GAT_att_srv_read_by_type_exc+0x192>
10056252:	89b0      	ldrh	r0, [r6, #12]
10056254:	19c0      	adds	r0, r0, r7
10056256:	b281      	uxth	r1, r0
10056258:	4630      	mov	r0, r6
1005625a:	9d08      	ldr	r5, [sp, #32]
1005625c:	4617      	mov	r7, r2
1005625e:	462a      	mov	r2, r5
10056260:	f7fd fae7 	bl	10053832 <ACL_pkt_write_16b>
10056264:	463a      	mov	r2, r7
10056266:	1d27      	adds	r7, r4, #4
10056268:	462c      	mov	r4, r5
1005626a:	89b0      	ldrh	r0, [r6, #12]
1005626c:	19c0      	adds	r0, r0, r7
1005626e:	b281      	uxth	r1, r0
10056270:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10056272:	6843      	ldr	r3, [r0, #4]
10056274:	b2d5      	uxtb	r5, r2
10056276:	4630      	mov	r0, r6
10056278:	462a      	mov	r2, r5
1005627a:	f7fd fae3 	bl	10053844 <ACL_pkt_write>
1005627e:	197d      	adds	r5, r7, r5
10056280:	8075      	strh	r5, [r6, #2]
10056282:	2002      	movs	r0, #2
10056284:	990a      	ldr	r1, [sp, #40]	@ 0x28
10056286:	7008      	strb	r0, [r1, #0]
10056288:	1c60      	adds	r0, r4, #1
1005628a:	9008      	str	r0, [sp, #32]
1005628c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005628e:	e791      	b.n	100561b4 <GAT_att_srv_read_by_type_exc+0xde>
10056290:	2886      	cmp	r0, #134	@ 0x86
10056292:	9a06      	ldr	r2, [sp, #24]
10056294:	d016      	beq.n	100562c4 <GAT_att_srv_read_by_type_exc+0x1ee>
10056296:	2884      	cmp	r0, #132	@ 0x84
10056298:	4605      	mov	r5, r0
1005629a:	9804      	ldr	r0, [sp, #16]
1005629c:	d121      	bne.n	100562e2 <GAT_att_srv_read_by_type_exc+0x20c>
1005629e:	8981      	ldrh	r1, [r0, #12]
100562a0:	1889      	adds	r1, r1, r2
100562a2:	b289      	uxth	r1, r1
100562a4:	9a02      	ldr	r2, [sp, #8]
100562a6:	f7fd fac4 	bl	10053832 <ACL_pkt_write_16b>
100562aa:	2584      	movs	r5, #132	@ 0x84
100562ac:	e019      	b.n	100562e2 <GAT_att_srv_read_by_type_exc+0x20c>
100562ae:	2f01      	cmp	r7, #1
100562b0:	d106      	bne.n	100562c0 <GAT_att_srv_read_by_type_exc+0x1ea>
100562b2:	a816      	add	r0, sp, #88	@ 0x58
100562b4:	220a      	movs	r2, #10
100562b6:	7002      	strb	r2, [r0, #0]
100562b8:	a815      	add	r0, sp, #84	@ 0x54
100562ba:	8805      	ldrh	r5, [r0, #0]
100562bc:	9c04      	ldr	r4, [sp, #16]
100562be:	e009      	b.n	100562d4 <GAT_att_srv_read_by_type_exc+0x1fe>
100562c0:	2500      	movs	r5, #0
100562c2:	e00e      	b.n	100562e2 <GAT_att_srv_read_by_type_exc+0x20c>
100562c4:	a816      	add	r0, sp, #88	@ 0x58
100562c6:	7802      	ldrb	r2, [r0, #0]
100562c8:	9c04      	ldr	r4, [sp, #16]
100562ca:	9d08      	ldr	r5, [sp, #32]
100562cc:	e002      	b.n	100562d4 <GAT_att_srv_read_by_type_exc+0x1fe>
100562ce:	a816      	add	r0, sp, #88	@ 0x58
100562d0:	2210      	movs	r2, #16
100562d2:	7002      	strb	r2, [r0, #0]
100562d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
100562d6:	7840      	ldrb	r0, [r0, #1]
100562d8:	b2a9      	uxth	r1, r5
100562da:	4623      	mov	r3, r4
100562dc:	f7ff fd46 	bl	10055d6c <GAT_att_srv_write_err_packet>
100562e0:	2586      	movs	r5, #134	@ 0x86
100562e2:	4628      	mov	r0, r5
100562e4:	b017      	add	sp, #92	@ 0x5c
100562e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100562e8 <GAT_att_srv_read_exc>:
100562e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100562ea:	b08b      	sub	sp, #44	@ 0x2c
100562ec:	4605      	mov	r5, r0
100562ee:	6880      	ldr	r0, [r0, #8]
100562f0:	68c4      	ldr	r4, [r0, #12]
100562f2:	88c7      	ldrh	r7, [r0, #6]
100562f4:	7828      	ldrb	r0, [r5, #0]
100562f6:	2800      	cmp	r0, #0
100562f8:	d024      	beq.n	10056344 <GAT_att_srv_read_exc+0x5c>
100562fa:	462e      	mov	r6, r5
100562fc:	360c      	adds	r6, #12
100562fe:	9605      	str	r6, [sp, #20]
10056300:	6868      	ldr	r0, [r5, #4]
10056302:	8980      	ldrh	r0, [r0, #12]
10056304:	1c40      	adds	r0, r0, #1
10056306:	b281      	uxth	r1, r0
10056308:	2204      	movs	r2, #4
1005630a:	ab04      	add	r3, sp, #16
1005630c:	4620      	mov	r0, r4
1005630e:	f7fd fa77 	bl	10053800 <ACL_pkt_read>
10056312:	8830      	ldrh	r0, [r6, #0]
10056314:	7869      	ldrb	r1, [r5, #1]
10056316:	1e7f      	subs	r7, r7, #1
10056318:	290c      	cmp	r1, #12
1005631a:	d103      	bne.n	10056324 <GAT_att_srv_read_exc+0x3c>
1005631c:	4287      	cmp	r7, r0
1005631e:	d253      	bcs.n	100563c8 <GAT_att_srv_read_exc+0xe0>
10056320:	9904      	ldr	r1, [sp, #16]
10056322:	1a40      	subs	r0, r0, r1
10056324:	b280      	uxth	r0, r0
10056326:	4287      	cmp	r7, r0
10056328:	d300      	bcc.n	1005632c <GAT_att_srv_read_exc+0x44>
1005632a:	4607      	mov	r7, r0
1005632c:	b2ba      	uxth	r2, r7
1005632e:	6873      	ldr	r3, [r6, #4]
10056330:	89a0      	ldrh	r0, [r4, #12]
10056332:	1c40      	adds	r0, r0, #1
10056334:	b281      	uxth	r1, r0
10056336:	4620      	mov	r0, r4
10056338:	f7fd fa84 	bl	10053844 <ACL_pkt_write>
1005633c:	1c78      	adds	r0, r7, #1
1005633e:	8060      	strh	r0, [r4, #2]
10056340:	2000      	movs	r0, #0
10056342:	e04d      	b.n	100563e0 <GAT_att_srv_read_exc+0xf8>
10056344:	7868      	ldrb	r0, [r5, #1]
10056346:	280c      	cmp	r0, #12
10056348:	9702      	str	r7, [sp, #8]
1005634a:	d107      	bne.n	1005635c <GAT_att_srv_read_exc+0x74>
1005634c:	6868      	ldr	r0, [r5, #4]
1005634e:	8981      	ldrh	r1, [r0, #12]
10056350:	1cc9      	adds	r1, r1, #3
10056352:	b289      	uxth	r1, r1
10056354:	f7fd fa5d 	bl	10053812 <ACL_pkt_read_16b>
10056358:	220d      	movs	r2, #13
1005635a:	e001      	b.n	10056360 <GAT_att_srv_read_exc+0x78>
1005635c:	220b      	movs	r2, #11
1005635e:	2000      	movs	r0, #0
10056360:	af04      	add	r7, sp, #16
10056362:	9003      	str	r0, [sp, #12]
10056364:	8038      	strh	r0, [r7, #0]
10056366:	89a1      	ldrh	r1, [r4, #12]
10056368:	4620      	mov	r0, r4
1005636a:	f7ff fc79 	bl	10055c60 <ACL_pkt_write_8b>
1005636e:	6868      	ldr	r0, [r5, #4]
10056370:	8981      	ldrh	r1, [r0, #12]
10056372:	1c49      	adds	r1, r1, #1
10056374:	b289      	uxth	r1, r1
10056376:	f7fd fa4c 	bl	10053812 <ACL_pkt_read_16b>
1005637a:	4606      	mov	r6, r0
1005637c:	8078      	strh	r0, [r7, #2]
1005637e:	a807      	add	r0, sp, #28
10056380:	8106      	strh	r6, [r0, #8]
10056382:	2701      	movs	r7, #1
10056384:	7107      	strb	r7, [r0, #4]
10056386:	68a9      	ldr	r1, [r5, #8]
10056388:	9107      	str	r1, [sp, #28]
1005638a:	f001 f8a7 	bl	100574dc <GAT_srv_check_change_aware>
1005638e:	2886      	cmp	r0, #134	@ 0x86
10056390:	d101      	bne.n	10056396 <GAT_att_srv_read_exc+0xae>
10056392:	2712      	movs	r7, #18
10056394:	e015      	b.n	100563c2 <GAT_att_srv_read_exc+0xda>
10056396:	4630      	mov	r0, r6
10056398:	f00c ffa4 	bl	100632e4 <GAT_att_db_find_by_handle>
1005639c:	2800      	cmp	r0, #0
1005639e:	d010      	beq.n	100563c2 <GAT_att_srv_read_exc+0xda>
100563a0:	4601      	mov	r1, r0
100563a2:	a806      	add	r0, sp, #24
100563a4:	9000      	str	r0, [sp, #0]
100563a6:	ab05      	add	r3, sp, #20
100563a8:	4628      	mov	r0, r5
100563aa:	9a03      	ldr	r2, [sp, #12]
100563ac:	f000 fa36 	bl	1005681c <GAT_att_srv_value_read>
100563b0:	2800      	cmp	r0, #0
100563b2:	d017      	beq.n	100563e4 <GAT_att_srv_read_exc+0xfc>
100563b4:	2884      	cmp	r0, #132	@ 0x84
100563b6:	d018      	beq.n	100563ea <GAT_att_srv_read_exc+0x102>
100563b8:	2886      	cmp	r0, #134	@ 0x86
100563ba:	d111      	bne.n	100563e0 <GAT_att_srv_read_exc+0xf8>
100563bc:	a806      	add	r0, sp, #24
100563be:	7807      	ldrb	r7, [r0, #0]
100563c0:	e007      	b.n	100563d2 <GAT_att_srv_read_exc+0xea>
100563c2:	a806      	add	r0, sp, #24
100563c4:	7007      	strb	r7, [r0, #0]
100563c6:	e004      	b.n	100563d2 <GAT_att_srv_read_exc+0xea>
100563c8:	a806      	add	r0, sp, #24
100563ca:	270b      	movs	r7, #11
100563cc:	7007      	strb	r7, [r0, #0]
100563ce:	a804      	add	r0, sp, #16
100563d0:	8846      	ldrh	r6, [r0, #2]
100563d2:	7868      	ldrb	r0, [r5, #1]
100563d4:	4631      	mov	r1, r6
100563d6:	463a      	mov	r2, r7
100563d8:	4623      	mov	r3, r4
100563da:	f7ff fcc7 	bl	10055d6c <GAT_att_srv_write_err_packet>
100563de:	2086      	movs	r0, #134	@ 0x86
100563e0:	b00b      	add	sp, #44	@ 0x2c
100563e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100563e4:	9e05      	ldr	r6, [sp, #20]
100563e6:	9f02      	ldr	r7, [sp, #8]
100563e8:	e793      	b.n	10056312 <GAT_att_srv_read_exc+0x2a>
100563ea:	89a0      	ldrh	r0, [r4, #12]
100563ec:	1c40      	adds	r0, r0, #1
100563ee:	b281      	uxth	r1, r0
100563f0:	2204      	movs	r2, #4
100563f2:	ab04      	add	r3, sp, #16
100563f4:	4620      	mov	r0, r4
100563f6:	f7fd fa25 	bl	10053844 <ACL_pkt_write>
100563fa:	2084      	movs	r0, #132	@ 0x84
100563fc:	e7f0      	b.n	100563e0 <GAT_att_srv_read_exc+0xf8>

100563fe <GAT_att_srv_read_multi_exc>:
100563fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10056400:	b08d      	sub	sp, #52	@ 0x34
10056402:	6881      	ldr	r1, [r0, #8]
10056404:	68ce      	ldr	r6, [r1, #12]
10056406:	88c9      	ldrh	r1, [r1, #6]
10056408:	9106      	str	r1, [sp, #24]
1005640a:	7801      	ldrb	r1, [r0, #0]
1005640c:	2900      	cmp	r1, #0
1005640e:	9007      	str	r0, [sp, #28]
10056410:	d009      	beq.n	10056426 <GAT_att_srv_read_multi_exc+0x28>
10056412:	8877      	ldrh	r7, [r6, #2]
10056414:	89b0      	ldrh	r0, [r6, #12]
10056416:	19c0      	adds	r0, r0, r7
10056418:	b281      	uxth	r1, r0
1005641a:	4630      	mov	r0, r6
1005641c:	f7fd f9f9 	bl	10053812 <ACL_pkt_read_16b>
10056420:	9907      	ldr	r1, [sp, #28]
10056422:	4602      	mov	r2, r0
10056424:	e00c      	b.n	10056440 <GAT_att_srv_read_multi_exc+0x42>
10056426:	7840      	ldrb	r0, [r0, #1]
10056428:	280e      	cmp	r0, #14
1005642a:	d001      	beq.n	10056430 <GAT_att_srv_read_multi_exc+0x32>
1005642c:	2221      	movs	r2, #33	@ 0x21
1005642e:	e000      	b.n	10056432 <GAT_att_srv_read_multi_exc+0x34>
10056430:	220f      	movs	r2, #15
10056432:	89b1      	ldrh	r1, [r6, #12]
10056434:	4630      	mov	r0, r6
10056436:	f7ff fc13 	bl	10055c60 <ACL_pkt_write_8b>
1005643a:	2201      	movs	r2, #1
1005643c:	4617      	mov	r7, r2
1005643e:	9907      	ldr	r1, [sp, #28]
10056440:	6848      	ldr	r0, [r1, #4]
10056442:	7880      	ldrb	r0, [r0, #2]
10056444:	1a80      	subs	r0, r0, r2
10056446:	b2c0      	uxtb	r0, r0
10056448:	0845      	lsrs	r5, r0, #1
1005644a:	7808      	ldrb	r0, [r1, #0]
1005644c:	2800      	cmp	r0, #0
1005644e:	9602      	str	r6, [sp, #8]
10056450:	d066      	beq.n	10056520 <GAT_att_srv_read_multi_exc+0x122>
10056452:	9907      	ldr	r1, [sp, #28]
10056454:	4608      	mov	r0, r1
10056456:	300c      	adds	r0, #12
10056458:	9001      	str	r0, [sp, #4]
1005645a:	b2ed      	uxtb	r5, r5
1005645c:	35ff      	adds	r5, #255	@ 0xff
1005645e:	b2e8      	uxtb	r0, r5
10056460:	2300      	movs	r3, #0
10056462:	9303      	str	r3, [sp, #12]
10056464:	42a8      	cmp	r0, r5
10056466:	d100      	bne.n	1005646a <GAT_att_srv_read_multi_exc+0x6c>
10056468:	e0b3      	b.n	100565d2 <GAT_att_srv_read_multi_exc+0x1d4>
1005646a:	b2bc      	uxth	r4, r7
1005646c:	9806      	ldr	r0, [sp, #24]
1005646e:	42a0      	cmp	r0, r4
10056470:	d800      	bhi.n	10056474 <GAT_att_srv_read_multi_exc+0x76>
10056472:	e0ae      	b.n	100565d2 <GAT_att_srv_read_multi_exc+0x1d4>
10056474:	6848      	ldr	r0, [r1, #4]
10056476:	8981      	ldrh	r1, [r0, #12]
10056478:	9205      	str	r2, [sp, #20]
1005647a:	1889      	adds	r1, r1, r2
1005647c:	b289      	uxth	r1, r1
1005647e:	2202      	movs	r2, #2
10056480:	ab0c      	add	r3, sp, #48	@ 0x30
10056482:	9204      	str	r2, [sp, #16]
10056484:	f7fd f9bc 	bl	10053800 <ACL_pkt_read>
10056488:	9907      	ldr	r1, [sp, #28]
1005648a:	7808      	ldrb	r0, [r1, #0]
1005648c:	2801      	cmp	r0, #1
1005648e:	d102      	bne.n	10056496 <GAT_att_srv_read_multi_exc+0x98>
10056490:	9801      	ldr	r0, [sp, #4]
10056492:	9008      	str	r0, [sp, #32]
10056494:	e00d      	b.n	100564b2 <GAT_att_srv_read_multi_exc+0xb4>
10056496:	a80c      	add	r0, sp, #48	@ 0x30
10056498:	8800      	ldrh	r0, [r0, #0]
1005649a:	f00c ff23 	bl	100632e4 <GAT_att_db_find_by_handle>
1005649e:	4601      	mov	r1, r0
100564a0:	9807      	ldr	r0, [sp, #28]
100564a2:	6880      	ldr	r0, [r0, #8]
100564a4:	8900      	ldrh	r0, [r0, #8]
100564a6:	aa08      	add	r2, sp, #32
100564a8:	f000 fdc6 	bl	10057038 <GAT_srv_get_attr_value>
100564ac:	9907      	ldr	r1, [sp, #28]
100564ae:	2884      	cmp	r0, #132	@ 0x84
100564b0:	d065      	beq.n	1005657e <GAT_att_srv_read_multi_exc+0x180>
100564b2:	9806      	ldr	r0, [sp, #24]
100564b4:	1b04      	subs	r4, r0, r4
100564b6:	7848      	ldrb	r0, [r1, #1]
100564b8:	280e      	cmp	r0, #14
100564ba:	d109      	bne.n	100564d0 <GAT_att_srv_read_multi_exc+0xd2>
100564bc:	89b0      	ldrh	r0, [r6, #12]
100564be:	19c1      	adds	r1, r0, r7
100564c0:	9808      	ldr	r0, [sp, #32]
100564c2:	8802      	ldrh	r2, [r0, #0]
100564c4:	4294      	cmp	r4, r2
100564c6:	db00      	blt.n	100564ca <GAT_att_srv_read_multi_exc+0xcc>
100564c8:	4614      	mov	r4, r2
100564ca:	b289      	uxth	r1, r1
100564cc:	b2a2      	uxth	r2, r4
100564ce:	e013      	b.n	100564f8 <GAT_att_srv_read_multi_exc+0xfa>
100564d0:	89b0      	ldrh	r0, [r6, #12]
100564d2:	19c0      	adds	r0, r0, r7
100564d4:	b281      	uxth	r1, r0
100564d6:	9a08      	ldr	r2, [sp, #32]
100564d8:	4630      	mov	r0, r6
100564da:	8816      	ldrh	r6, [r2, #0]
100564dc:	4632      	mov	r2, r6
100564de:	f7fd f9a8 	bl	10053832 <ACL_pkt_write_16b>
100564e2:	1ea4      	subs	r4, r4, #2
100564e4:	42b4      	cmp	r4, r6
100564e6:	d300      	bcc.n	100564ea <GAT_att_srv_read_multi_exc+0xec>
100564e8:	4634      	mov	r4, r6
100564ea:	b2a2      	uxth	r2, r4
100564ec:	1cbf      	adds	r7, r7, #2
100564ee:	9e02      	ldr	r6, [sp, #8]
100564f0:	89b0      	ldrh	r0, [r6, #12]
100564f2:	19c0      	adds	r0, r0, r7
100564f4:	b281      	uxth	r1, r0
100564f6:	9808      	ldr	r0, [sp, #32]
100564f8:	6843      	ldr	r3, [r0, #4]
100564fa:	4630      	mov	r0, r6
100564fc:	f7fd f9a2 	bl	10053844 <ACL_pkt_write>
10056500:	193f      	adds	r7, r7, r4
10056502:	8077      	strh	r7, [r6, #2]
10056504:	9907      	ldr	r1, [sp, #28]
10056506:	7848      	ldrb	r0, [r1, #1]
10056508:	2820      	cmp	r0, #32
1005650a:	9a05      	ldr	r2, [sp, #20]
1005650c:	d104      	bne.n	10056518 <GAT_att_srv_read_multi_exc+0x11a>
1005650e:	9806      	ldr	r0, [sp, #24]
10056510:	1bc0      	subs	r0, r0, r7
10056512:	b280      	uxth	r0, r0
10056514:	2802      	cmp	r0, #2
10056516:	d35c      	bcc.n	100565d2 <GAT_att_srv_read_multi_exc+0x1d4>
10056518:	9804      	ldr	r0, [sp, #16]
1005651a:	7008      	strb	r0, [r1, #0]
1005651c:	1c92      	adds	r2, r2, #2
1005651e:	e79c      	b.n	1005645a <GAT_att_srv_read_multi_exc+0x5c>
10056520:	2100      	movs	r1, #0
10056522:	9205      	str	r2, [sp, #20]
10056524:	9c07      	ldr	r4, [sp, #28]
10056526:	b288      	uxth	r0, r1
10056528:	42a8      	cmp	r0, r5
1005652a:	d292      	bcs.n	10056452 <GAT_att_srv_read_multi_exc+0x54>
1005652c:	9104      	str	r1, [sp, #16]
1005652e:	0049      	lsls	r1, r1, #1
10056530:	6860      	ldr	r0, [r4, #4]
10056532:	8982      	ldrh	r2, [r0, #12]
10056534:	1851      	adds	r1, r2, r1
10056536:	1c49      	adds	r1, r1, #1
10056538:	b289      	uxth	r1, r1
1005653a:	2202      	movs	r2, #2
1005653c:	ab0c      	add	r3, sp, #48	@ 0x30
1005653e:	f7fd f95f 	bl	10053800 <ACL_pkt_read>
10056542:	a808      	add	r0, sp, #32
10056544:	2601      	movs	r6, #1
10056546:	7106      	strb	r6, [r0, #4]
10056548:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005654a:	8101      	strh	r1, [r0, #8]
1005654c:	68a1      	ldr	r1, [r4, #8]
1005654e:	9108      	str	r1, [sp, #32]
10056550:	f000 ffc4 	bl	100574dc <GAT_srv_check_change_aware>
10056554:	2886      	cmp	r0, #134	@ 0x86
10056556:	d02a      	beq.n	100565ae <GAT_att_srv_read_multi_exc+0x1b0>
10056558:	a80c      	add	r0, sp, #48	@ 0x30
1005655a:	8800      	ldrh	r0, [r0, #0]
1005655c:	f00c fec2 	bl	100632e4 <GAT_att_db_find_by_handle>
10056560:	2800      	cmp	r0, #0
10056562:	d027      	beq.n	100565b4 <GAT_att_srv_read_multi_exc+0x1b6>
10056564:	9907      	ldr	r1, [sp, #28]
10056566:	6889      	ldr	r1, [r1, #8]
10056568:	8909      	ldrh	r1, [r1, #8]
1005656a:	2201      	movs	r2, #1
1005656c:	f000 fcee 	bl	10056f4c <GAT_srv_check_perms>
10056570:	2800      	cmp	r0, #0
10056572:	d11e      	bne.n	100565b2 <GAT_att_srv_read_multi_exc+0x1b4>
10056574:	9904      	ldr	r1, [sp, #16]
10056576:	1c49      	adds	r1, r1, #1
10056578:	9e02      	ldr	r6, [sp, #8]
1005657a:	9a05      	ldr	r2, [sp, #20]
1005657c:	e7d3      	b.n	10056526 <GAT_att_srv_read_multi_exc+0x128>
1005657e:	a80c      	add	r0, sp, #48	@ 0x30
10056580:	8803      	ldrh	r3, [r0, #0]
10056582:	6888      	ldr	r0, [r1, #8]
10056584:	8942      	ldrh	r2, [r0, #10]
10056586:	8901      	ldrh	r1, [r0, #8]
10056588:	2000      	movs	r0, #0
1005658a:	9000      	str	r0, [sp, #0]
1005658c:	2002      	movs	r0, #2
1005658e:	f00b fe45 	bl	1006221c <aci_gatt_srv_read_event_push_noinline>
10056592:	9003      	str	r0, [sp, #12]
10056594:	2800      	cmp	r0, #0
10056596:	9a05      	ldr	r2, [sp, #20]
10056598:	d11b      	bne.n	100565d2 <GAT_att_srv_read_multi_exc+0x1d4>
1005659a:	8077      	strh	r7, [r6, #2]
1005659c:	89b0      	ldrh	r0, [r6, #12]
1005659e:	19c0      	adds	r0, r0, r7
100565a0:	b281      	uxth	r1, r0
100565a2:	b292      	uxth	r2, r2
100565a4:	4630      	mov	r0, r6
100565a6:	f7fd f944 	bl	10053832 <ACL_pkt_write_16b>
100565aa:	2084      	movs	r0, #132	@ 0x84
100565ac:	e010      	b.n	100565d0 <GAT_att_srv_read_multi_exc+0x1d2>
100565ae:	2612      	movs	r6, #18
100565b0:	e000      	b.n	100565b4 <GAT_att_srv_read_multi_exc+0x1b6>
100565b2:	4606      	mov	r6, r0
100565b4:	a80c      	add	r0, sp, #48	@ 0x30
100565b6:	8801      	ldrh	r1, [r0, #0]
100565b8:	9807      	ldr	r0, [sp, #28]
100565ba:	7840      	ldrb	r0, [r0, #1]
100565bc:	280e      	cmp	r0, #14
100565be:	d101      	bne.n	100565c4 <GAT_att_srv_read_multi_exc+0x1c6>
100565c0:	200e      	movs	r0, #14
100565c2:	e000      	b.n	100565c6 <GAT_att_srv_read_multi_exc+0x1c8>
100565c4:	2020      	movs	r0, #32
100565c6:	4632      	mov	r2, r6
100565c8:	9b02      	ldr	r3, [sp, #8]
100565ca:	f7ff fbcf 	bl	10055d6c <GAT_att_srv_write_err_packet>
100565ce:	2086      	movs	r0, #134	@ 0x86
100565d0:	9003      	str	r0, [sp, #12]
100565d2:	9803      	ldr	r0, [sp, #12]
100565d4:	b00d      	add	sp, #52	@ 0x34
100565d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100565d8 <GAT_att_srv_write_exc>:
100565d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100565da:	b089      	sub	sp, #36	@ 0x24
100565dc:	4604      	mov	r4, r0
100565de:	7800      	ldrb	r0, [r0, #0]
100565e0:	2800      	cmp	r0, #0
100565e2:	d001      	beq.n	100565e8 <GAT_att_srv_write_exc+0x10>
100565e4:	2000      	movs	r0, #0
100565e6:	e03b      	b.n	10056660 <GAT_att_srv_write_exc+0x88>
100565e8:	6860      	ldr	r0, [r4, #4]
100565ea:	68a1      	ldr	r1, [r4, #8]
100565ec:	68c9      	ldr	r1, [r1, #12]
100565ee:	9106      	str	r1, [sp, #24]
100565f0:	8846      	ldrh	r6, [r0, #2]
100565f2:	8981      	ldrh	r1, [r0, #12]
100565f4:	1c49      	adds	r1, r1, #1
100565f6:	b289      	uxth	r1, r1
100565f8:	f7fd f90b 	bl	10053812 <ACL_pkt_read_16b>
100565fc:	4605      	mov	r5, r0
100565fe:	1ef1      	subs	r1, r6, #3
10056600:	7860      	ldrb	r0, [r4, #1]
10056602:	2700      	movs	r7, #0
10056604:	2852      	cmp	r0, #82	@ 0x52
10056606:	d00c      	beq.n	10056622 <GAT_att_srv_write_exc+0x4a>
10056608:	28d2      	cmp	r0, #210	@ 0xd2
1005660a:	d10e      	bne.n	1005662a <GAT_att_srv_write_exc+0x52>
1005660c:	68a0      	ldr	r0, [r4, #8]
1005660e:	8940      	ldrh	r0, [r0, #10]
10056610:	2804      	cmp	r0, #4
10056612:	d124      	bne.n	1005665e <GAT_att_srv_write_exc+0x86>
10056614:	3e0f      	subs	r6, #15
10056616:	2205      	movs	r2, #5
10056618:	2701      	movs	r7, #1
1005661a:	2000      	movs	r0, #0
1005661c:	9004      	str	r0, [sp, #16]
1005661e:	9605      	str	r6, [sp, #20]
10056620:	e00e      	b.n	10056640 <GAT_att_srv_write_exc+0x68>
10056622:	9105      	str	r1, [sp, #20]
10056624:	2204      	movs	r2, #4
10056626:	9704      	str	r7, [sp, #16]
10056628:	e00a      	b.n	10056640 <GAT_att_srv_write_exc+0x68>
1005662a:	9105      	str	r1, [sp, #20]
1005662c:	9e06      	ldr	r6, [sp, #24]
1005662e:	89b1      	ldrh	r1, [r6, #12]
10056630:	2213      	movs	r2, #19
10056632:	4630      	mov	r0, r6
10056634:	f7ff fb14 	bl	10055c60 <ACL_pkt_write_8b>
10056638:	2001      	movs	r0, #1
1005663a:	9004      	str	r0, [sp, #16]
1005663c:	8070      	strh	r0, [r6, #2]
1005663e:	2203      	movs	r2, #3
10056640:	ab07      	add	r3, sp, #28
10056642:	4620      	mov	r0, r4
10056644:	4629      	mov	r1, r5
10056646:	f000 f936 	bl	100568b6 <GAT_att_srv_set_attr_value_check>
1005664a:	4602      	mov	r2, r0
1005664c:	a808      	add	r0, sp, #32
1005664e:	7002      	strb	r2, [r0, #0]
10056650:	2a00      	cmp	r2, #0
10056652:	d007      	beq.n	10056664 <GAT_att_srv_write_exc+0x8c>
10056654:	7860      	ldrb	r0, [r4, #1]
10056656:	4629      	mov	r1, r5
10056658:	9b06      	ldr	r3, [sp, #24]
1005665a:	f7ff fb87 	bl	10055d6c <GAT_att_srv_write_err_packet>
1005665e:	2086      	movs	r0, #134	@ 0x86
10056660:	b009      	add	sp, #36	@ 0x24
10056662:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056664:	2f00      	cmp	r7, #0
10056666:	d008      	beq.n	1005667a <GAT_att_srv_write_exc+0xa2>
10056668:	6861      	ldr	r1, [r4, #4]
1005666a:	68a0      	ldr	r0, [r4, #8]
1005666c:	8900      	ldrh	r0, [r0, #8]
1005666e:	f00a fc94 	bl	10060f9a <smp_sap_sm2_packet_data_signing_validate>
10056672:	2800      	cmp	r0, #0
10056674:	d001      	beq.n	1005667a <GAT_att_srv_write_exc+0xa2>
10056676:	2200      	movs	r2, #0
10056678:	e7ec      	b.n	10056654 <GAT_att_srv_write_exc+0x7c>
1005667a:	6861      	ldr	r1, [r4, #4]
1005667c:	9807      	ldr	r0, [sp, #28]
1005667e:	aa08      	add	r2, sp, #32
10056680:	f000 fdda 	bl	10057238 <GAT_srv_attr_value_write>
10056684:	2800      	cmp	r0, #0
10056686:	d0eb      	beq.n	10056660 <GAT_att_srv_write_exc+0x88>
10056688:	2884      	cmp	r0, #132	@ 0x84
1005668a:	d112      	bne.n	100566b2 <GAT_att_srv_write_exc+0xda>
1005668c:	6860      	ldr	r0, [r4, #4]
1005668e:	68a1      	ldr	r1, [r4, #8]
10056690:	894a      	ldrh	r2, [r1, #10]
10056692:	8909      	ldrh	r1, [r1, #8]
10056694:	9b05      	ldr	r3, [sp, #20]
10056696:	b29b      	uxth	r3, r3
10056698:	9500      	str	r5, [sp, #0]
1005669a:	9301      	str	r3, [sp, #4]
1005669c:	9002      	str	r0, [sp, #8]
1005669e:	200a      	movs	r0, #10
100566a0:	9b04      	ldr	r3, [sp, #16]
100566a2:	f00b fdf5 	bl	10062290 <aci_gatt_srv_write_event_push_noinline>
100566a6:	2800      	cmp	r0, #0
100566a8:	d1da      	bne.n	10056660 <GAT_att_srv_write_exc+0x88>
100566aa:	2000      	movs	r0, #0
100566ac:	6060      	str	r0, [r4, #4]
100566ae:	2084      	movs	r0, #132	@ 0x84
100566b0:	e7d6      	b.n	10056660 <GAT_att_srv_write_exc+0x88>
100566b2:	a808      	add	r0, sp, #32
100566b4:	7802      	ldrb	r2, [r0, #0]
100566b6:	e7cd      	b.n	10056654 <GAT_att_srv_write_exc+0x7c>

100566b8 <GAT_att_srv_prep_wr_exc>:
100566b8:	b570      	push	{r4, r5, r6, lr}
100566ba:	b086      	sub	sp, #24
100566bc:	4604      	mov	r4, r0
100566be:	7800      	ldrb	r0, [r0, #0]
100566c0:	2800      	cmp	r0, #0
100566c2:	d014      	beq.n	100566ee <GAT_att_srv_prep_wr_exc+0x36>
100566c4:	89a5      	ldrh	r5, [r4, #12]
100566c6:	68a0      	ldr	r0, [r4, #8]
100566c8:	88c1      	ldrh	r1, [r0, #6]
100566ca:	1f49      	subs	r1, r1, #5
100566cc:	42a9      	cmp	r1, r5
100566ce:	d800      	bhi.n	100566d2 <GAT_att_srv_prep_wr_exc+0x1a>
100566d0:	460d      	mov	r5, r1
100566d2:	b2aa      	uxth	r2, r5
100566d4:	6923      	ldr	r3, [r4, #16]
100566d6:	68c0      	ldr	r0, [r0, #12]
100566d8:	8981      	ldrh	r1, [r0, #12]
100566da:	1d49      	adds	r1, r1, #5
100566dc:	b289      	uxth	r1, r1
100566de:	f7fd f8b1 	bl	10053844 <ACL_pkt_write>
100566e2:	1d68      	adds	r0, r5, #5
100566e4:	68a1      	ldr	r1, [r4, #8]
100566e6:	68c9      	ldr	r1, [r1, #12]
100566e8:	8048      	strh	r0, [r1, #2]
100566ea:	2000      	movs	r0, #0
100566ec:	e040      	b.n	10056770 <GAT_att_srv_prep_wr_exc+0xb8>
100566ee:	6860      	ldr	r0, [r4, #4]
100566f0:	8981      	ldrh	r1, [r0, #12]
100566f2:	1c49      	adds	r1, r1, #1
100566f4:	b289      	uxth	r1, r1
100566f6:	f7fd f88c 	bl	10053812 <ACL_pkt_read_16b>
100566fa:	4605      	mov	r5, r0
100566fc:	2203      	movs	r2, #3
100566fe:	ab05      	add	r3, sp, #20
10056700:	4620      	mov	r0, r4
10056702:	4629      	mov	r1, r5
10056704:	f000 f8d7 	bl	100568b6 <GAT_att_srv_set_attr_value_check>
10056708:	2800      	cmp	r0, #0
1005670a:	d008      	beq.n	1005671e <GAT_att_srv_prep_wr_exc+0x66>
1005670c:	4602      	mov	r2, r0
1005670e:	68a0      	ldr	r0, [r4, #8]
10056710:	68c3      	ldr	r3, [r0, #12]
10056712:	2016      	movs	r0, #22
10056714:	4629      	mov	r1, r5
10056716:	f7ff fb29 	bl	10055d6c <GAT_att_srv_write_err_packet>
1005671a:	2086      	movs	r0, #134	@ 0x86
1005671c:	e028      	b.n	10056770 <GAT_att_srv_prep_wr_exc+0xb8>
1005671e:	6860      	ldr	r0, [r4, #4]
10056720:	8981      	ldrh	r1, [r0, #12]
10056722:	1cc9      	adds	r1, r1, #3
10056724:	b289      	uxth	r1, r1
10056726:	f7fd f874 	bl	10053812 <ACL_pkt_read_16b>
1005672a:	4606      	mov	r6, r0
1005672c:	6860      	ldr	r0, [r4, #4]
1005672e:	68a1      	ldr	r1, [r4, #8]
10056730:	894a      	ldrh	r2, [r1, #10]
10056732:	8909      	ldrh	r1, [r1, #8]
10056734:	8843      	ldrh	r3, [r0, #2]
10056736:	1f5b      	subs	r3, r3, #5
10056738:	b29b      	uxth	r3, r3
1005673a:	9600      	str	r6, [sp, #0]
1005673c:	9301      	str	r3, [sp, #4]
1005673e:	9002      	str	r0, [sp, #8]
10056740:	200a      	movs	r0, #10
10056742:	462b      	mov	r3, r5
10056744:	f00c f80c 	bl	10062760 <aci_att_srv_prepare_write_req_event_push_noinline>
10056748:	2800      	cmp	r0, #0
1005674a:	d111      	bne.n	10056770 <GAT_att_srv_prep_wr_exc+0xb8>
1005674c:	ab03      	add	r3, sp, #12
1005674e:	705d      	strb	r5, [r3, #1]
10056750:	0a28      	lsrs	r0, r5, #8
10056752:	7098      	strb	r0, [r3, #2]
10056754:	70de      	strb	r6, [r3, #3]
10056756:	2017      	movs	r0, #23
10056758:	7018      	strb	r0, [r3, #0]
1005675a:	0a30      	lsrs	r0, r6, #8
1005675c:	7118      	strb	r0, [r3, #4]
1005675e:	68a0      	ldr	r0, [r4, #8]
10056760:	68c0      	ldr	r0, [r0, #12]
10056762:	8981      	ldrh	r1, [r0, #12]
10056764:	2205      	movs	r2, #5
10056766:	f7fd f86d 	bl	10053844 <ACL_pkt_write>
1005676a:	2000      	movs	r0, #0
1005676c:	6060      	str	r0, [r4, #4]
1005676e:	2084      	movs	r0, #132	@ 0x84
10056770:	b006      	add	sp, #24
10056772:	bd70      	pop	{r4, r5, r6, pc}

10056774 <GAT_att_srv_exec_wr_exc>:
10056774:	b510      	push	{r4, lr}
10056776:	4604      	mov	r4, r0
10056778:	7800      	ldrb	r0, [r0, #0]
1005677a:	2800      	cmp	r0, #0
1005677c:	d001      	beq.n	10056782 <GAT_att_srv_exec_wr_exc+0xe>
1005677e:	2000      	movs	r0, #0
10056780:	bd10      	pop	{r4, pc}
10056782:	6860      	ldr	r0, [r4, #4]
10056784:	8981      	ldrh	r1, [r0, #12]
10056786:	1c49      	adds	r1, r1, #1
10056788:	b289      	uxth	r1, r1
1005678a:	f000 f884 	bl	10056896 <ACL_pkt_read_8b>
1005678e:	4603      	mov	r3, r0
10056790:	68a0      	ldr	r0, [r4, #8]
10056792:	8942      	ldrh	r2, [r0, #10]
10056794:	8901      	ldrh	r1, [r0, #8]
10056796:	2002      	movs	r0, #2
10056798:	f00c f810 	bl	100627bc <aci_att_srv_exec_write_req_event_push_noinline>
1005679c:	2800      	cmp	r0, #0
1005679e:	d000      	beq.n	100567a2 <GAT_att_srv_exec_wr_exc+0x2e>
100567a0:	bd10      	pop	{r4, pc}
100567a2:	68a0      	ldr	r0, [r4, #8]
100567a4:	68c0      	ldr	r0, [r0, #12]
100567a6:	8981      	ldrh	r1, [r0, #12]
100567a8:	2219      	movs	r2, #25
100567aa:	f7ff fa59 	bl	10055c60 <ACL_pkt_write_8b>
100567ae:	68a0      	ldr	r0, [r4, #8]
100567b0:	68c0      	ldr	r0, [r0, #12]
100567b2:	2101      	movs	r1, #1
100567b4:	8041      	strh	r1, [r0, #2]
100567b6:	2084      	movs	r0, #132	@ 0x84
100567b8:	bd10      	pop	{r4, pc}

100567ba <GAT_att_srv_confirm_exc>:
100567ba:	b5b0      	push	{r4, r5, r7, lr}
100567bc:	4605      	mov	r5, r0
100567be:	6880      	ldr	r0, [r0, #8]
100567c0:	8942      	ldrh	r2, [r0, #10]
100567c2:	8901      	ldrh	r1, [r0, #8]
100567c4:	2042      	movs	r0, #66	@ 0x42
100567c6:	f00b fcf7 	bl	100621b8 <aci_gatt_srv_confirmation_event_push_noinline>
100567ca:	4604      	mov	r4, r0
100567cc:	2800      	cmp	r0, #0
100567ce:	d110      	bne.n	100567f2 <GAT_att_srv_confirm_exc+0x38>
100567d0:	68a8      	ldr	r0, [r5, #8]
100567d2:	8942      	ldrh	r2, [r0, #10]
100567d4:	8901      	ldrh	r1, [r0, #8]
100567d6:	2001      	movs	r0, #1
100567d8:	f7fe fef2 	bl	100555c0 <GAT_att_cmn_stop_timer>
100567dc:	68a8      	ldr	r0, [r5, #8]
100567de:	8881      	ldrh	r1, [r0, #4]
100567e0:	064a      	lsls	r2, r1, #25
100567e2:	d503      	bpl.n	100567ec <GAT_att_srv_confirm_exc+0x32>
100567e4:	f000 fe6c 	bl	100574c0 <GAT_srv_set_change_aware>
100567e8:	68a8      	ldr	r0, [r5, #8]
100567ea:	8881      	ldrh	r1, [r0, #4]
100567ec:	2202      	movs	r2, #2
100567ee:	4391      	bics	r1, r2
100567f0:	8081      	strh	r1, [r0, #4]
100567f2:	4620      	mov	r0, r4
100567f4:	bdb0      	pop	{r4, r5, r7, pc}

100567f6 <GAT_att_srv_get_handle_range>:
100567f6:	b570      	push	{r4, r5, r6, lr}
100567f8:	4614      	mov	r4, r2
100567fa:	460d      	mov	r5, r1
100567fc:	4606      	mov	r6, r0
100567fe:	8980      	ldrh	r0, [r0, #12]
10056800:	1c40      	adds	r0, r0, #1
10056802:	b281      	uxth	r1, r0
10056804:	4630      	mov	r0, r6
10056806:	f7fd f804 	bl	10053812 <ACL_pkt_read_16b>
1005680a:	8028      	strh	r0, [r5, #0]
1005680c:	89b0      	ldrh	r0, [r6, #12]
1005680e:	1cc0      	adds	r0, r0, #3
10056810:	b281      	uxth	r1, r0
10056812:	4630      	mov	r0, r6
10056814:	f7fc fffd 	bl	10053812 <ACL_pkt_read_16b>
10056818:	8020      	strh	r0, [r4, #0]
1005681a:	bd70      	pop	{r4, r5, r6, pc}

1005681c <GAT_att_srv_value_read>:
1005681c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005681e:	461f      	mov	r7, r3
10056820:	4606      	mov	r6, r0
10056822:	9d08      	ldr	r5, [sp, #32]
10056824:	2400      	movs	r4, #0
10056826:	702c      	strb	r4, [r5, #0]
10056828:	7800      	ldrb	r0, [r0, #0]
1005682a:	2801      	cmp	r0, #1
1005682c:	d107      	bne.n	1005683e <GAT_att_srv_value_read+0x22>
1005682e:	6930      	ldr	r0, [r6, #16]
10056830:	2800      	cmp	r0, #0
10056832:	d01f      	beq.n	10056874 <GAT_att_srv_value_read+0x58>
10056834:	360c      	adds	r6, #12
10056836:	603e      	str	r6, [r7, #0]
10056838:	2000      	movs	r0, #0
1005683a:	7028      	strb	r0, [r5, #0]
1005683c:	e029      	b.n	10056892 <GAT_att_srv_value_read+0x76>
1005683e:	9202      	str	r2, [sp, #8]
10056840:	68b0      	ldr	r0, [r6, #8]
10056842:	8900      	ldrh	r0, [r0, #8]
10056844:	9101      	str	r1, [sp, #4]
10056846:	463a      	mov	r2, r7
10056848:	462b      	mov	r3, r5
1005684a:	f000 fb66 	bl	10056f1a <GAT_srv_attr_value_read>
1005684e:	2800      	cmp	r0, #0
10056850:	d012      	beq.n	10056878 <GAT_att_srv_value_read+0x5c>
10056852:	2884      	cmp	r0, #132	@ 0x84
10056854:	d11d      	bne.n	10056892 <GAT_att_srv_value_read+0x76>
10056856:	9801      	ldr	r0, [sp, #4]
10056858:	8843      	ldrh	r3, [r0, #2]
1005685a:	68b0      	ldr	r0, [r6, #8]
1005685c:	8942      	ldrh	r2, [r0, #10]
1005685e:	8901      	ldrh	r1, [r0, #8]
10056860:	9802      	ldr	r0, [sp, #8]
10056862:	9000      	str	r0, [sp, #0]
10056864:	2002      	movs	r0, #2
10056866:	f00b fcd9 	bl	1006221c <aci_gatt_srv_read_event_push_noinline>
1005686a:	2800      	cmp	r0, #0
1005686c:	d111      	bne.n	10056892 <GAT_att_srv_value_read+0x76>
1005686e:	207b      	movs	r0, #123	@ 0x7b
10056870:	43c0      	mvns	r0, r0
10056872:	e00e      	b.n	10056892 <GAT_att_srv_value_read+0x76>
10056874:	200e      	movs	r0, #14
10056876:	e005      	b.n	10056884 <GAT_att_srv_value_read+0x68>
10056878:	6838      	ldr	r0, [r7, #0]
1005687a:	8801      	ldrh	r1, [r0, #0]
1005687c:	9a02      	ldr	r2, [sp, #8]
1005687e:	4291      	cmp	r1, r2
10056880:	d203      	bcs.n	1005688a <GAT_att_srv_value_read+0x6e>
10056882:	2007      	movs	r0, #7
10056884:	7028      	strb	r0, [r5, #0]
10056886:	2086      	movs	r0, #134	@ 0x86
10056888:	e003      	b.n	10056892 <GAT_att_srv_value_read+0x76>
1005688a:	6841      	ldr	r1, [r0, #4]
1005688c:	1889      	adds	r1, r1, r2
1005688e:	6041      	str	r1, [r0, #4]
10056890:	4620      	mov	r0, r4
10056892:	b2c0      	uxtb	r0, r0
10056894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10056896 <ACL_pkt_read_8b>:
10056896:	b51c      	push	{r2, r3, r4, lr}
10056898:	291f      	cmp	r1, #31
1005689a:	d803      	bhi.n	100568a4 <ACL_pkt_read_8b+0xe>
1005689c:	aa01      	add	r2, sp, #4
1005689e:	8011      	strh	r1, [r2, #0]
100568a0:	6840      	ldr	r0, [r0, #4]
100568a2:	e005      	b.n	100568b0 <ACL_pkt_read_8b+0x1a>
100568a4:	6840      	ldr	r0, [r0, #4]
100568a6:	ac01      	add	r4, sp, #4
100568a8:	4622      	mov	r2, r4
100568aa:	f008 ff54 	bl	1005f756 <Mem_Buff_get_buff_off>
100568ae:	8821      	ldrh	r1, [r4, #0]
100568b0:	1840      	adds	r0, r0, r1
100568b2:	7900      	ldrb	r0, [r0, #4]
100568b4:	bd1c      	pop	{r2, r3, r4, pc}

100568b6 <GAT_att_srv_set_attr_value_check>:
100568b6:	b5f0      	push	{r4, r5, r6, r7, lr}
100568b8:	b085      	sub	sp, #20
100568ba:	461e      	mov	r6, r3
100568bc:	4614      	mov	r4, r2
100568be:	460f      	mov	r7, r1
100568c0:	4605      	mov	r5, r0
100568c2:	a801      	add	r0, sp, #4
100568c4:	8101      	strh	r1, [r0, #8]
100568c6:	7102      	strb	r2, [r0, #4]
100568c8:	68a9      	ldr	r1, [r5, #8]
100568ca:	9101      	str	r1, [sp, #4]
100568cc:	f000 fe06 	bl	100574dc <GAT_srv_check_change_aware>
100568d0:	2886      	cmp	r0, #134	@ 0x86
100568d2:	d101      	bne.n	100568d8 <GAT_att_srv_set_attr_value_check+0x22>
100568d4:	2012      	movs	r0, #18
100568d6:	e00c      	b.n	100568f2 <GAT_att_srv_set_attr_value_check+0x3c>
100568d8:	4638      	mov	r0, r7
100568da:	f00c fd03 	bl	100632e4 <GAT_att_db_find_by_handle>
100568de:	6030      	str	r0, [r6, #0]
100568e0:	2800      	cmp	r0, #0
100568e2:	d005      	beq.n	100568f0 <GAT_att_srv_set_attr_value_check+0x3a>
100568e4:	68a9      	ldr	r1, [r5, #8]
100568e6:	8909      	ldrh	r1, [r1, #8]
100568e8:	4622      	mov	r2, r4
100568ea:	f000 fb2f 	bl	10056f4c <GAT_srv_check_perms>
100568ee:	e000      	b.n	100568f2 <GAT_att_srv_set_attr_value_check+0x3c>
100568f0:	2001      	movs	r0, #1
100568f2:	b005      	add	sp, #20
100568f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100568f8 <GAT_srv_init>:
100568f8:	b580      	push	{r7, lr}
100568fa:	4806      	ldr	r0, [pc, #24]	@ (10056914 <__arm_cp.0_0>)
100568fc:	8900      	ldrh	r0, [r0, #8]
100568fe:	3016      	adds	r0, #22
10056900:	b280      	uxth	r0, r0
10056902:	f00c fc8b 	bl	1006321c <GAT_att_db_init>
10056906:	4804      	ldr	r0, [pc, #16]	@ (10056918 <__arm_cp.0_1>)
10056908:	6800      	ldr	r0, [r0, #0]
1005690a:	215c      	movs	r1, #92	@ 0x5c
1005690c:	2201      	movs	r2, #1
1005690e:	5442      	strb	r2, [r0, r1]
10056910:	bd80      	pop	{r7, pc}
10056912:	46c0      	nop			@ (mov r8, r8)

10056914 <__arm_cp.0_0>:
10056914:	2000247c 	.word	0x2000247c

10056918 <__arm_cp.0_1>:
10056918:	20002420 	.word	0x20002420

1005691c <GAT_srv_connection>:
1005691c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005691e:	b0a1      	sub	sp, #132	@ 0x84
10056920:	4604      	mov	r4, r0
10056922:	f000 f89b 	bl	10056a5c <GAT_srv_is_bonded>
10056926:	2801      	cmp	r0, #1
10056928:	d114      	bne.n	10056954 <GAT_srv_connection+0x38>
1005692a:	a807      	add	r0, sp, #28
1005692c:	4945      	ldr	r1, [pc, #276]	@ (10056a44 <__arm_cp.1_0>)
1005692e:	2514      	movs	r5, #20
10056930:	462a      	mov	r2, r5
10056932:	f00f fe26 	bl	10066582 <__aeabi_memcpy>
10056936:	a802      	add	r0, sp, #8
10056938:	4943      	ldr	r1, [pc, #268]	@ (10056a48 <__arm_cp.1_1>)
1005693a:	462a      	mov	r2, r5
1005693c:	f00f fe21 	bl	10066582 <__aeabi_memcpy>
10056940:	2044      	movs	r0, #68	@ 0x44
10056942:	900f      	str	r0, [sp, #60]	@ 0x3c
10056944:	2101      	movs	r1, #1
10056946:	aa0d      	add	r2, sp, #52	@ 0x34
10056948:	ab0c      	add	r3, sp, #48	@ 0x30
1005694a:	4620      	mov	r0, r4
1005694c:	f00a fa87 	bl	10060e5e <smp_sap_get_remote_address_check_addr_type>
10056950:	2800      	cmp	r0, #0
10056952:	d001      	beq.n	10056958 <GAT_srv_connection+0x3c>
10056954:	b021      	add	sp, #132	@ 0x84
10056956:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056958:	a80c      	add	r0, sp, #48	@ 0x30
1005695a:	7801      	ldrb	r1, [r0, #0]
1005695c:	a80d      	add	r0, sp, #52	@ 0x34
1005695e:	aa0f      	add	r2, sp, #60	@ 0x3c
10056960:	ab10      	add	r3, sp, #64	@ 0x40
10056962:	f009 fb1a 	bl	1005ff9a <SDB_sap_read_peer_bonded_gatt_client_data>
10056966:	2800      	cmp	r0, #0
10056968:	d1f4      	bne.n	10056954 <GAT_srv_connection+0x38>
1005696a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1005696c:	2844      	cmp	r0, #68	@ 0x44
1005696e:	d8f1      	bhi.n	10056954 <GAT_srv_connection+0x38>
10056970:	2001      	movs	r0, #1
10056972:	4d36      	ldr	r5, [pc, #216]	@ (10056a4c <__arm_cp.1_2>)
10056974:	aa02      	add	r2, sp, #8
10056976:	4629      	mov	r1, r5
10056978:	f000 fe0c 	bl	10057594 <GAT_srv_find_by_type_attr_p>
1005697c:	2800      	cmp	r0, #0
1005697e:	d010      	beq.n	100569a2 <GAT_srv_connection+0x86>
10056980:	4606      	mov	r6, r0
10056982:	4620      	mov	r0, r4
10056984:	f7fe fe54 	bl	10055630 <GAT_att_cmn_get_conn_index>
10056988:	a910      	add	r1, sp, #64	@ 0x40
1005698a:	7c0a      	ldrb	r2, [r1, #16]
1005698c:	4930      	ldr	r1, [pc, #192]	@ (10056a50 <__arm_cp.1_3>)
1005698e:	7ac9      	ldrb	r1, [r1, #11]
10056990:	6873      	ldr	r3, [r6, #4]
10056992:	6a1b      	ldr	r3, [r3, #32]
10056994:	689b      	ldr	r3, [r3, #8]
10056996:	9300      	str	r3, [sp, #0]
10056998:	0849      	lsrs	r1, r1, #1
1005699a:	1c4b      	adds	r3, r1, #1
1005699c:	2104      	movs	r1, #4
1005699e:	f000 fd08 	bl	100573b2 <GAT_srv_set_zip_val>
100569a2:	482c      	ldr	r0, [pc, #176]	@ (10056a54 <__arm_cp.1_4>)
100569a4:	6801      	ldr	r1, [r0, #0]
100569a6:	3183      	adds	r1, #131	@ 0x83
100569a8:	a810      	add	r0, sp, #64	@ 0x40
100569aa:	2210      	movs	r2, #16
100569ac:	f7fa fb94 	bl	100510d8 <BLEPLAT_MemCmp>
100569b0:	2800      	cmp	r0, #0
100569b2:	d01f      	beq.n	100569f4 <GAT_srv_connection+0xd8>
100569b4:	2001      	movs	r0, #1
100569b6:	aa07      	add	r2, sp, #28
100569b8:	4629      	mov	r1, r5
100569ba:	f000 fdeb 	bl	10057594 <GAT_srv_find_by_type_attr_p>
100569be:	2800      	cmp	r0, #0
100569c0:	d0c8      	beq.n	10056954 <GAT_srv_connection+0x38>
100569c2:	f000 fe3f 	bl	10057644 <GAT_srv_get_cccd_attr_p>
100569c6:	2800      	cmp	r0, #0
100569c8:	d0c4      	beq.n	10056954 <GAT_srv_connection+0x38>
100569ca:	4605      	mov	r5, r0
100569cc:	2104      	movs	r1, #4
100569ce:	4620      	mov	r0, r4
100569d0:	f7fe fd84 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
100569d4:	8881      	ldrh	r1, [r0, #4]
100569d6:	2240      	movs	r2, #64	@ 0x40
100569d8:	430a      	orrs	r2, r1
100569da:	8082      	strh	r2, [r0, #4]
100569dc:	a810      	add	r0, sp, #64	@ 0x40
100569de:	7c42      	ldrb	r2, [r0, #17]
100569e0:	4620      	mov	r0, r4
100569e2:	4629      	mov	r1, r5
100569e4:	f000 fd26 	bl	10057434 <GAT_srv_set_cccd_val>
100569e8:	200b      	movs	r0, #11
100569ea:	f00a fbeb 	bl	100611c4 <tsk_notify_idx>
100569ee:	f7f9 fd6c 	bl	100504ca <BLE_STACK_ProcessRequest>
100569f2:	e7af      	b.n	10056954 <GAT_srv_connection+0x38>
100569f4:	2001      	movs	r0, #1
100569f6:	f00c fc9d 	bl	10063334 <GAT_att_db_find_from_handle>
100569fa:	4606      	mov	r6, r0
100569fc:	ad10      	add	r5, sp, #64	@ 0x40
100569fe:	3512      	adds	r5, #18
10056a00:	2700      	movs	r7, #0
10056a02:	2e00      	cmp	r6, #0
10056a04:	d0a6      	beq.n	10056954 <GAT_srv_connection+0x38>
10056a06:	b2b8      	uxth	r0, r7
10056a08:	2863      	cmp	r0, #99	@ 0x63
10056a0a:	d8a3      	bhi.n	10056954 <GAT_srv_connection+0x38>
10056a0c:	7831      	ldrb	r1, [r6, #0]
10056a0e:	2904      	cmp	r1, #4
10056a10:	d112      	bne.n	10056a38 <GAT_srv_connection+0x11c>
10056a12:	6871      	ldr	r1, [r6, #4]
10056a14:	7d0a      	ldrb	r2, [r1, #20]
10056a16:	2a10      	cmp	r2, #16
10056a18:	d10e      	bne.n	10056a38 <GAT_srv_connection+0x11c>
10056a1a:	8a09      	ldrh	r1, [r1, #16]
10056a1c:	4a0e      	ldr	r2, [pc, #56]	@ (10056a58 <__arm_cp.1_5>)
10056a1e:	4291      	cmp	r1, r2
10056a20:	d10a      	bne.n	10056a38 <GAT_srv_connection+0x11c>
10056a22:	2102      	movs	r1, #2
10056a24:	2232      	movs	r2, #50	@ 0x32
10056a26:	462b      	mov	r3, r5
10056a28:	f000 fcb0 	bl	1005738c <GAT_srv_get_zip_val>
10056a2c:	4602      	mov	r2, r0
10056a2e:	4620      	mov	r0, r4
10056a30:	4631      	mov	r1, r6
10056a32:	f000 fcff 	bl	10057434 <GAT_srv_set_cccd_val>
10056a36:	1c7f      	adds	r7, r7, #1
10056a38:	4630      	mov	r0, r6
10056a3a:	f00c fcdd 	bl	100633f8 <GAT_att_db_get_next>
10056a3e:	4606      	mov	r6, r0
10056a40:	e7df      	b.n	10056a02 <GAT_srv_connection+0xe6>
10056a42:	46c0      	nop			@ (mov r8, r8)

10056a44 <__arm_cp.1_0>:
10056a44:	1006811c 	.word	0x1006811c

10056a48 <__arm_cp.1_1>:
10056a48:	10068130 	.word	0x10068130

10056a4c <__arm_cp.1_2>:
10056a4c:	0000ffff 	.word	0x0000ffff

10056a50 <__arm_cp.1_3>:
10056a50:	2000247c 	.word	0x2000247c

10056a54 <__arm_cp.1_4>:
10056a54:	20002420 	.word	0x20002420

10056a58 <__arm_cp.1_5>:
10056a58:	00002902 	.word	0x00002902

10056a5c <GAT_srv_is_bonded>:
10056a5c:	b580      	push	{r7, lr}
10056a5e:	f00a fa34 	bl	10060eca <smp_sap_check_is_peer_device_bonded>
10056a62:	4241      	negs	r1, r0
10056a64:	4148      	adcs	r0, r1
10056a66:	bd80      	pop	{r7, pc}

10056a68 <GAT_srv_bearer_close>:
10056a68:	b5f0      	push	{r4, r5, r6, r7, lr}
10056a6a:	b0a1      	sub	sp, #132	@ 0x84
10056a6c:	2904      	cmp	r1, #4
10056a6e:	d000      	beq.n	10056a72 <GAT_srv_bearer_close+0xa>
10056a70:	e0de      	b.n	10056c30 <GAT_srv_bearer_close+0x1c8>
10056a72:	4607      	mov	r7, r0
10056a74:	f7ff fff2 	bl	10056a5c <GAT_srv_is_bonded>
10056a78:	4c6e      	ldr	r4, [pc, #440]	@ (10056c34 <__arm_cp.3_0>)
10056a7a:	4e6f      	ldr	r6, [pc, #444]	@ (10056c38 <__arm_cp.3_1>)
10056a7c:	2801      	cmp	r0, #1
10056a7e:	d000      	beq.n	10056a82 <GAT_srv_bearer_close+0x1a>
10056a80:	e0a0      	b.n	10056bc4 <GAT_srv_bearer_close+0x15c>
10056a82:	ad0b      	add	r5, sp, #44	@ 0x2c
10056a84:	496d      	ldr	r1, [pc, #436]	@ (10056c3c <__arm_cp.3_2>)
10056a86:	2214      	movs	r2, #20
10056a88:	4628      	mov	r0, r5
10056a8a:	f00f fd7a 	bl	10066582 <__aeabi_memcpy>
10056a8e:	a810      	add	r0, sp, #64	@ 0x40
10056a90:	4634      	mov	r4, r6
10056a92:	2600      	movs	r6, #0
10056a94:	2244      	movs	r2, #68	@ 0x44
10056a96:	4631      	mov	r1, r6
10056a98:	f7fa fb0e 	bl	100510b8 <BLEPLAT_MemSet>
10056a9c:	2001      	movs	r0, #1
10056a9e:	4621      	mov	r1, r4
10056aa0:	462a      	mov	r2, r5
10056aa2:	f000 fd77 	bl	10057594 <GAT_srv_find_by_type_attr_p>
10056aa6:	2800      	cmp	r0, #0
10056aa8:	d00f      	beq.n	10056aca <GAT_srv_bearer_close+0x62>
10056aaa:	4604      	mov	r4, r0
10056aac:	4638      	mov	r0, r7
10056aae:	f7fe fdbf 	bl	10055630 <GAT_att_cmn_get_conn_index>
10056ab2:	6861      	ldr	r1, [r4, #4]
10056ab4:	6a09      	ldr	r1, [r1, #32]
10056ab6:	688b      	ldr	r3, [r1, #8]
10056ab8:	4961      	ldr	r1, [pc, #388]	@ (10056c40 <__arm_cp.3_3>)
10056aba:	7ac9      	ldrb	r1, [r1, #11]
10056abc:	0849      	lsrs	r1, r1, #1
10056abe:	1c4a      	adds	r2, r1, #1
10056ac0:	2104      	movs	r1, #4
10056ac2:	f000 fc63 	bl	1005738c <GAT_srv_get_zip_val>
10056ac6:	a910      	add	r1, sp, #64	@ 0x40
10056ac8:	7408      	strb	r0, [r1, #16]
10056aca:	2104      	movs	r1, #4
10056acc:	9704      	str	r7, [sp, #16]
10056ace:	4638      	mov	r0, r7
10056ad0:	f7fe fd04 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10056ad4:	a910      	add	r1, sp, #64	@ 0x40
10056ad6:	7c09      	ldrb	r1, [r1, #16]
10056ad8:	2901      	cmp	r1, #1
10056ada:	d103      	bne.n	10056ae4 <GAT_srv_bearer_close+0x7c>
10056adc:	8880      	ldrh	r0, [r0, #4]
10056ade:	0600      	lsls	r0, r0, #24
10056ae0:	0f80      	lsrs	r0, r0, #30
10056ae2:	d106      	bne.n	10056af2 <GAT_srv_bearer_close+0x8a>
10056ae4:	4857      	ldr	r0, [pc, #348]	@ (10056c44 <__arm_cp.3_4>)
10056ae6:	6801      	ldr	r1, [r0, #0]
10056ae8:	3183      	adds	r1, #131	@ 0x83
10056aea:	a810      	add	r0, sp, #64	@ 0x40
10056aec:	2210      	movs	r2, #16
10056aee:	f7fa fad3 	bl	10051098 <BLEPLAT_MemCpy>
10056af2:	2001      	movs	r0, #1
10056af4:	9003      	str	r0, [sp, #12]
10056af6:	f00c fc1d 	bl	10063334 <GAT_att_db_find_from_handle>
10056afa:	4605      	mov	r5, r0
10056afc:	a810      	add	r0, sp, #64	@ 0x40
10056afe:	3012      	adds	r0, #18
10056b00:	9002      	str	r0, [sp, #8]
10056b02:	9605      	str	r6, [sp, #20]
10056b04:	4c4b      	ldr	r4, [pc, #300]	@ (10056c34 <__arm_cp.3_0>)
10056b06:	2d00      	cmp	r5, #0
10056b08:	d034      	beq.n	10056b74 <GAT_srv_bearer_close+0x10c>
10056b0a:	b2b7      	uxth	r7, r6
10056b0c:	2f63      	cmp	r7, #99	@ 0x63
10056b0e:	d831      	bhi.n	10056b74 <GAT_srv_bearer_close+0x10c>
10056b10:	7828      	ldrb	r0, [r5, #0]
10056b12:	2804      	cmp	r0, #4
10056b14:	d00b      	beq.n	10056b2e <GAT_srv_bearer_close+0xc6>
10056b16:	2802      	cmp	r0, #2
10056b18:	d127      	bne.n	10056b6a <GAT_srv_bearer_close+0x102>
10056b1a:	6868      	ldr	r0, [r5, #4]
10056b1c:	7d01      	ldrb	r1, [r0, #20]
10056b1e:	2910      	cmp	r1, #16
10056b20:	d121      	bne.n	10056b66 <GAT_srv_bearer_close+0xfe>
10056b22:	8a00      	ldrh	r0, [r0, #16]
10056b24:	4949      	ldr	r1, [pc, #292]	@ (10056c4c <__arm_cp.3_6>)
10056b26:	4288      	cmp	r0, r1
10056b28:	d11d      	bne.n	10056b66 <GAT_srv_bearer_close+0xfe>
10056b2a:	9803      	ldr	r0, [sp, #12]
10056b2c:	e01c      	b.n	10056b68 <GAT_srv_bearer_close+0x100>
10056b2e:	6868      	ldr	r0, [r5, #4]
10056b30:	7d01      	ldrb	r1, [r0, #20]
10056b32:	2910      	cmp	r1, #16
10056b34:	d119      	bne.n	10056b6a <GAT_srv_bearer_close+0x102>
10056b36:	8a00      	ldrh	r0, [r0, #16]
10056b38:	42a0      	cmp	r0, r4
10056b3a:	d116      	bne.n	10056b6a <GAT_srv_bearer_close+0x102>
10056b3c:	9804      	ldr	r0, [sp, #16]
10056b3e:	4629      	mov	r1, r5
10056b40:	f000 fdb0 	bl	100576a4 <GAT_srv_get_cccd_val>
10056b44:	4604      	mov	r4, r0
10056b46:	9802      	ldr	r0, [sp, #8]
10056b48:	9000      	str	r0, [sp, #0]
10056b4a:	b2e2      	uxtb	r2, r4
10056b4c:	2102      	movs	r1, #2
10056b4e:	2332      	movs	r3, #50	@ 0x32
10056b50:	4638      	mov	r0, r7
10056b52:	f000 fc2e 	bl	100573b2 <GAT_srv_set_zip_val>
10056b56:	9805      	ldr	r0, [sp, #20]
10056b58:	2801      	cmp	r0, #1
10056b5a:	d101      	bne.n	10056b60 <GAT_srv_bearer_close+0xf8>
10056b5c:	a810      	add	r0, sp, #64	@ 0x40
10056b5e:	7444      	strb	r4, [r0, #17]
10056b60:	1c76      	adds	r6, r6, #1
10056b62:	4c34      	ldr	r4, [pc, #208]	@ (10056c34 <__arm_cp.3_0>)
10056b64:	e001      	b.n	10056b6a <GAT_srv_bearer_close+0x102>
10056b66:	2000      	movs	r0, #0
10056b68:	9005      	str	r0, [sp, #20]
10056b6a:	4628      	mov	r0, r5
10056b6c:	f00c fc44 	bl	100633f8 <GAT_att_db_get_next>
10056b70:	4605      	mov	r5, r0
10056b72:	e7c8      	b.n	10056b06 <GAT_srv_bearer_close+0x9e>
10056b74:	2101      	movs	r1, #1
10056b76:	aa09      	add	r2, sp, #36	@ 0x24
10056b78:	ab08      	add	r3, sp, #32
10056b7a:	9f04      	ldr	r7, [sp, #16]
10056b7c:	4638      	mov	r0, r7
10056b7e:	f00a f96e 	bl	10060e5e <smp_sap_get_remote_address_check_addr_type>
10056b82:	2800      	cmp	r0, #0
10056b84:	d11c      	bne.n	10056bc0 <GAT_srv_bearer_close+0x158>
10056b86:	b2b0      	uxth	r0, r6
10056b88:	0040      	lsls	r0, r0, #1
10056b8a:	492f      	ldr	r1, [pc, #188]	@ (10056c48 <__arm_cp.3_5>)
10056b8c:	1840      	adds	r0, r0, r1
10056b8e:	0880      	lsrs	r0, r0, #2
10056b90:	3013      	adds	r0, #19
10056b92:	b282      	uxth	r2, r0
10056b94:	a808      	add	r0, sp, #32
10056b96:	7801      	ldrb	r1, [r0, #0]
10056b98:	a809      	add	r0, sp, #36	@ 0x24
10056b9a:	ab10      	add	r3, sp, #64	@ 0x40
10056b9c:	f009 f9cb 	bl	1005ff36 <SDB_sap_write_peer_bonded_gatt_client_data>
10056ba0:	2800      	cmp	r0, #0
10056ba2:	d00d      	beq.n	10056bc0 <GAT_srv_bearer_close+0x158>
10056ba4:	4604      	mov	r4, r0
10056ba6:	ad06      	add	r5, sp, #24
10056ba8:	a909      	add	r1, sp, #36	@ 0x24
10056baa:	2206      	movs	r2, #6
10056bac:	4628      	mov	r0, r5
10056bae:	f7fa fa73 	bl	10051098 <BLEPLAT_MemCpy>
10056bb2:	71ac      	strb	r4, [r5, #6]
10056bb4:	2042      	movs	r0, #66	@ 0x42
10056bb6:	2104      	movs	r1, #4
10056bb8:	2207      	movs	r2, #7
10056bba:	462b      	mov	r3, r5
10056bbc:	f00b fef8 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
10056bc0:	4e1d      	ldr	r6, [pc, #116]	@ (10056c38 <__arm_cp.3_1>)
10056bc2:	4c1c      	ldr	r4, [pc, #112]	@ (10056c34 <__arm_cp.3_0>)
10056bc4:	2001      	movs	r0, #1
10056bc6:	f00c fbb5 	bl	10063334 <GAT_att_db_find_from_handle>
10056bca:	4605      	mov	r5, r0
10056bcc:	2800      	cmp	r0, #0
10056bce:	d012      	beq.n	10056bf6 <GAT_srv_bearer_close+0x18e>
10056bd0:	7828      	ldrb	r0, [r5, #0]
10056bd2:	2804      	cmp	r0, #4
10056bd4:	d10b      	bne.n	10056bee <GAT_srv_bearer_close+0x186>
10056bd6:	6868      	ldr	r0, [r5, #4]
10056bd8:	7d01      	ldrb	r1, [r0, #20]
10056bda:	2910      	cmp	r1, #16
10056bdc:	d107      	bne.n	10056bee <GAT_srv_bearer_close+0x186>
10056bde:	8a00      	ldrh	r0, [r0, #16]
10056be0:	42a0      	cmp	r0, r4
10056be2:	d104      	bne.n	10056bee <GAT_srv_bearer_close+0x186>
10056be4:	2200      	movs	r2, #0
10056be6:	4638      	mov	r0, r7
10056be8:	4629      	mov	r1, r5
10056bea:	f000 fc23 	bl	10057434 <GAT_srv_set_cccd_val>
10056bee:	4628      	mov	r0, r5
10056bf0:	f00c fc02 	bl	100633f8 <GAT_att_db_get_next>
10056bf4:	e7e9      	b.n	10056bca <GAT_srv_bearer_close+0x162>
10056bf6:	ac10      	add	r4, sp, #64	@ 0x40
10056bf8:	4910      	ldr	r1, [pc, #64]	@ (10056c3c <__arm_cp.3_2>)
10056bfa:	2214      	movs	r2, #20
10056bfc:	4620      	mov	r0, r4
10056bfe:	f00f fcc0 	bl	10066582 <__aeabi_memcpy>
10056c02:	2001      	movs	r0, #1
10056c04:	4631      	mov	r1, r6
10056c06:	4622      	mov	r2, r4
10056c08:	f000 fcc4 	bl	10057594 <GAT_srv_find_by_type_attr_p>
10056c0c:	2800      	cmp	r0, #0
10056c0e:	d00f      	beq.n	10056c30 <GAT_srv_bearer_close+0x1c8>
10056c10:	4604      	mov	r4, r0
10056c12:	4638      	mov	r0, r7
10056c14:	f7fe fd0c 	bl	10055630 <GAT_att_cmn_get_conn_index>
10056c18:	4909      	ldr	r1, [pc, #36]	@ (10056c40 <__arm_cp.3_3>)
10056c1a:	7ac9      	ldrb	r1, [r1, #11]
10056c1c:	6862      	ldr	r2, [r4, #4]
10056c1e:	6a12      	ldr	r2, [r2, #32]
10056c20:	6892      	ldr	r2, [r2, #8]
10056c22:	9200      	str	r2, [sp, #0]
10056c24:	0849      	lsrs	r1, r1, #1
10056c26:	1c4b      	adds	r3, r1, #1
10056c28:	2104      	movs	r1, #4
10056c2a:	2200      	movs	r2, #0
10056c2c:	f000 fbc1 	bl	100573b2 <GAT_srv_set_zip_val>
10056c30:	b021      	add	sp, #132	@ 0x84
10056c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056c34 <__arm_cp.3_0>:
10056c34:	00002902 	.word	0x00002902

10056c38 <__arm_cp.3_1>:
10056c38:	0000ffff 	.word	0x0000ffff

10056c3c <__arm_cp.3_2>:
10056c3c:	10068130 	.word	0x10068130

10056c40 <__arm_cp.3_3>:
10056c40:	2000247c 	.word	0x2000247c

10056c44 <__arm_cp.3_4>:
10056c44:	20002420 	.word	0x20002420

10056c48 <__arm_cp.3_5>:
10056c48:	0003fffe 	.word	0x0003fffe

10056c4c <__arm_cp.3_6>:
10056c4c:	00002a05 	.word	0x00002a05

10056c50 <GAT_srv_db_hash_tsk>:
10056c50:	b5f0      	push	{r4, r5, r6, r7, lr}
10056c52:	b0d3      	sub	sp, #332	@ 0x14c
10056c54:	2500      	movs	r5, #0
10056c56:	950c      	str	r5, [sp, #48]	@ 0x30
10056c58:	950b      	str	r5, [sp, #44]	@ 0x2c
10056c5a:	950a      	str	r5, [sp, #40]	@ 0x28
10056c5c:	9509      	str	r5, [sp, #36]	@ 0x24
10056c5e:	2041      	movs	r0, #65	@ 0x41
10056c60:	0082      	lsls	r2, r0, #2
10056c62:	ac0d      	add	r4, sp, #52	@ 0x34
10056c64:	4620      	mov	r0, r4
10056c66:	4629      	mov	r1, r5
10056c68:	f7fa fa26 	bl	100510b8 <BLEPLAT_MemSet>
10056c6c:	7125      	strb	r5, [r4, #4]
10056c6e:	2010      	movs	r0, #16
10056c70:	9044      	str	r0, [sp, #272]	@ 0x110
10056c72:	9016      	str	r0, [sp, #88]	@ 0x58
10056c74:	a809      	add	r0, sp, #36	@ 0x24
10056c76:	900f      	str	r0, [sp, #60]	@ 0x3c
10056c78:	4620      	mov	r0, r4
10056c7a:	f7fa fa6a 	bl	10051152 <BLEPLAT_AesCMACEncryptInit>
10056c7e:	34dc      	adds	r4, #220	@ 0xdc
10056c80:	9401      	str	r4, [sp, #4]
10056c82:	2001      	movs	r0, #1
10056c84:	f00c fb56 	bl	10063334 <GAT_att_db_find_from_handle>
10056c88:	4606      	mov	r6, r0
10056c8a:	a84e      	add	r0, sp, #312	@ 0x138
10056c8c:	300c      	adds	r0, #12
10056c8e:	9002      	str	r0, [sp, #8]
10056c90:	4d48      	ldr	r5, [pc, #288]	@ (10056db4 <__arm_cp.5_2>)
10056c92:	2e00      	cmp	r6, #0
10056c94:	d041      	beq.n	10056d1a <GAT_srv_db_hash_tsk+0xca>
10056c96:	7830      	ldrb	r0, [r6, #0]
10056c98:	2803      	cmp	r0, #3
10056c9a:	d039      	beq.n	10056d10 <GAT_srv_db_hash_tsk+0xc0>
10056c9c:	af4e      	add	r7, sp, #312	@ 0x138
10056c9e:	4630      	mov	r0, r6
10056ca0:	4639      	mov	r1, r7
10056ca2:	f000 f907 	bl	10056eb4 <GAT_srv_get_attr_type>
10056ca6:	7c38      	ldrb	r0, [r7, #16]
10056ca8:	2810      	cmp	r0, #16
10056caa:	d131      	bne.n	10056d10 <GAT_srv_db_hash_tsk+0xc0>
10056cac:	8870      	ldrh	r0, [r6, #2]
10056cae:	a904      	add	r1, sp, #16
10056cb0:	8008      	strh	r0, [r1, #0]
10056cb2:	a84e      	add	r0, sp, #312	@ 0x138
10056cb4:	8980      	ldrh	r0, [r0, #12]
10056cb6:	493d      	ldr	r1, [pc, #244]	@ (10056dac <__arm_cp.5_0>)
10056cb8:	1841      	adds	r1, r0, r1
10056cba:	2905      	cmp	r1, #5
10056cbc:	d31c      	bcc.n	10056cf8 <GAT_srv_db_hash_tsk+0xa8>
10056cbe:	493c      	ldr	r1, [pc, #240]	@ (10056db0 <__arm_cp.5_1>)
10056cc0:	1841      	adds	r1, r0, r1
10056cc2:	2904      	cmp	r1, #4
10056cc4:	d303      	bcc.n	10056cce <GAT_srv_db_hash_tsk+0x7e>
10056cc6:	2129      	movs	r1, #41	@ 0x29
10056cc8:	0209      	lsls	r1, r1, #8
10056cca:	4288      	cmp	r0, r1
10056ccc:	d120      	bne.n	10056d10 <GAT_srv_db_hash_tsk+0xc0>
10056cce:	af0d      	add	r7, sp, #52	@ 0x34
10056cd0:	2402      	movs	r4, #2
10056cd2:	aa04      	add	r2, sp, #16
10056cd4:	4638      	mov	r0, r7
10056cd6:	4621      	mov	r1, r4
10056cd8:	47a8      	blx	r5
10056cda:	4638      	mov	r0, r7
10056cdc:	4621      	mov	r1, r4
10056cde:	9a02      	ldr	r2, [sp, #8]
10056ce0:	47a8      	blx	r5
10056ce2:	2000      	movs	r0, #0
10056ce4:	aa05      	add	r2, sp, #20
10056ce6:	4631      	mov	r1, r6
10056ce8:	f000 f9a6 	bl	10057038 <GAT_srv_get_attr_value>
10056cec:	9805      	ldr	r0, [sp, #20]
10056cee:	6842      	ldr	r2, [r0, #4]
10056cf0:	8801      	ldrh	r1, [r0, #0]
10056cf2:	4638      	mov	r0, r7
10056cf4:	47a8      	blx	r5
10056cf6:	e00b      	b.n	10056d10 <GAT_srv_db_hash_tsk+0xc0>
10056cf8:	ac0d      	add	r4, sp, #52	@ 0x34
10056cfa:	2702      	movs	r7, #2
10056cfc:	aa04      	add	r2, sp, #16
10056cfe:	4620      	mov	r0, r4
10056d00:	4639      	mov	r1, r7
10056d02:	f000 fcdb 	bl	100576bc <GAT_srv_aes_cmac_append>
10056d06:	4620      	mov	r0, r4
10056d08:	4639      	mov	r1, r7
10056d0a:	9a02      	ldr	r2, [sp, #8]
10056d0c:	f000 fcd6 	bl	100576bc <GAT_srv_aes_cmac_append>
10056d10:	4630      	mov	r0, r6
10056d12:	f00c fb71 	bl	100633f8 <GAT_att_db_get_next>
10056d16:	4606      	mov	r6, r0
10056d18:	e7bb      	b.n	10056c92 <GAT_srv_db_hash_tsk+0x42>
10056d1a:	9801      	ldr	r0, [sp, #4]
10056d1c:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
10056d1e:	2a00      	cmp	r2, #0
10056d20:	d006      	beq.n	10056d30 <GAT_srv_db_hash_tsk+0xe0>
10056d22:	a80d      	add	r0, sp, #52	@ 0x34
10056d24:	2120      	movs	r1, #32
10056d26:	7101      	strb	r1, [r0, #4]
10056d28:	4601      	mov	r1, r0
10056d2a:	31e0      	adds	r1, #224	@ 0xe0
10056d2c:	f7fa fa1e 	bl	1005116c <BLEPLAT_AesCMACEncryptAppend>
10056d30:	a80d      	add	r0, sp, #52	@ 0x34
10056d32:	ac4e      	add	r4, sp, #312	@ 0x138
10056d34:	aa04      	add	r2, sp, #16
10056d36:	4621      	mov	r1, r4
10056d38:	f7fa fa29 	bl	1005118e <BLEPLAT_AesCMACEncryptFinish>
10056d3c:	ad05      	add	r5, sp, #20
10056d3e:	2610      	movs	r6, #16
10056d40:	2301      	movs	r3, #1
10056d42:	4628      	mov	r0, r5
10056d44:	4621      	mov	r1, r4
10056d46:	4632      	mov	r2, r6
10056d48:	f00a fba2 	bl	10061490 <copy_swap_buffer>
10056d4c:	4f1a      	ldr	r7, [pc, #104]	@ (10056db8 <__arm_cp.5_3>)
10056d4e:	6839      	ldr	r1, [r7, #0]
10056d50:	3183      	adds	r1, #131	@ 0x83
10056d52:	4628      	mov	r0, r5
10056d54:	4632      	mov	r2, r6
10056d56:	f7fa f9bf 	bl	100510d8 <BLEPLAT_MemCmp>
10056d5a:	2800      	cmp	r0, #0
10056d5c:	d019      	beq.n	10056d92 <GAT_srv_db_hash_tsk+0x142>
10056d5e:	6838      	ldr	r0, [r7, #0]
10056d60:	3083      	adds	r0, #131	@ 0x83
10056d62:	a905      	add	r1, sp, #20
10056d64:	2210      	movs	r2, #16
10056d66:	f7fa f997 	bl	10051098 <BLEPLAT_MemCpy>
10056d6a:	ad03      	add	r5, sp, #12
10056d6c:	2082      	movs	r0, #130	@ 0x82
10056d6e:	8028      	strh	r0, [r5, #0]
10056d70:	9500      	str	r5, [sp, #0]
10056d72:	2400      	movs	r4, #0
10056d74:	4b11      	ldr	r3, [pc, #68]	@ (10056dbc <__arm_cp.5_4>)
10056d76:	4620      	mov	r0, r4
10056d78:	4621      	mov	r1, r4
10056d7a:	4622      	mov	r2, r4
10056d7c:	f7fe faf0 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10056d80:	2040      	movs	r0, #64	@ 0x40
10056d82:	8028      	strh	r0, [r5, #0]
10056d84:	9500      	str	r5, [sp, #0]
10056d86:	4b0e      	ldr	r3, [pc, #56]	@ (10056dc0 <__arm_cp.5_5>)
10056d88:	4620      	mov	r0, r4
10056d8a:	4621      	mov	r1, r4
10056d8c:	4622      	mov	r2, r4
10056d8e:	f7fe fae7 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10056d92:	6838      	ldr	r0, [r7, #0]
10056d94:	215c      	movs	r1, #92	@ 0x5c
10056d96:	5c42      	ldrb	r2, [r0, r1]
10056d98:	23fd      	movs	r3, #253	@ 0xfd
10056d9a:	4013      	ands	r3, r2
10056d9c:	5443      	strb	r3, [r0, r1]
10056d9e:	200b      	movs	r0, #11
10056da0:	f00a fa10 	bl	100611c4 <tsk_notify_idx>
10056da4:	f7f9 fb91 	bl	100504ca <BLE_STACK_ProcessRequest>
10056da8:	b053      	add	sp, #332	@ 0x14c
10056daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056dac <__arm_cp.5_0>:
10056dac:	ffffd6ff 	.word	0xffffd6ff

10056db0 <__arm_cp.5_1>:
10056db0:	ffffd800 	.word	0xffffd800

10056db4 <__arm_cp.5_2>:
10056db4:	100576bd 	.word	0x100576bd

10056db8 <__arm_cp.5_3>:
10056db8:	20002420 	.word	0x20002420

10056dbc <__arm_cp.5_4>:
10056dbc:	10055625 	.word	0x10055625

10056dc0 <__arm_cp.5_5>:
10056dc0:	10055619 	.word	0x10055619

10056dc4 <GAT_srv_send_srv_change_tsk>:
10056dc4:	b5e0      	push	{r5, r6, r7, lr}
10056dc6:	2100      	movs	r1, #0
10056dc8:	9100      	str	r1, [sp, #0]
10056dca:	2002      	movs	r0, #2
10056dcc:	2204      	movs	r2, #4
10056dce:	4b07      	ldr	r3, [pc, #28]	@ (10056dec <__arm_cp.7_0>)
10056dd0:	f7fe fac6 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10056dd4:	2800      	cmp	r0, #0
10056dd6:	d001      	beq.n	10056ddc <GAT_srv_send_srv_change_tsk+0x18>
10056dd8:	2881      	cmp	r0, #129	@ 0x81
10056dda:	d100      	bne.n	10056dde <GAT_srv_send_srv_change_tsk+0x1a>
10056ddc:	bd8c      	pop	{r2, r3, r7, pc}
10056dde:	200b      	movs	r0, #11
10056de0:	f00a f9f0 	bl	100611c4 <tsk_notify_idx>
10056de4:	f7f9 fb71 	bl	100504ca <BLE_STACK_ProcessRequest>
10056de8:	bd8c      	pop	{r2, r3, r7, pc}
10056dea:	46c0      	nop			@ (mov r8, r8)

10056dec <__arm_cp.7_0>:
10056dec:	10056df1 	.word	0x10056df1

10056df0 <GAT_srv_tx_service_change>:
10056df0:	b5b0      	push	{r4, r5, r7, lr}
10056df2:	b08a      	sub	sp, #40	@ 0x28
10056df4:	4604      	mov	r4, r0
10056df6:	8880      	ldrh	r0, [r0, #4]
10056df8:	0640      	lsls	r0, r0, #25
10056dfa:	d401      	bmi.n	10056e00 <GAT_srv_tx_service_change+0x10>
10056dfc:	2500      	movs	r5, #0
10056dfe:	e04b      	b.n	10056e98 <GAT_srv_tx_service_change+0xa8>
10056e00:	a809      	add	r0, sp, #36	@ 0x24
10056e02:	2180      	movs	r1, #128	@ 0x80
10056e04:	8001      	strh	r1, [r0, #0]
10056e06:	8921      	ldrh	r1, [r4, #8]
10056e08:	9000      	str	r0, [sp, #0]
10056e0a:	2001      	movs	r0, #1
10056e0c:	2500      	movs	r5, #0
10056e0e:	4b24      	ldr	r3, [pc, #144]	@ (10056ea0 <__arm_cp.8_0>)
10056e10:	462a      	mov	r2, r5
10056e12:	f7fe faa5 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10056e16:	88a1      	ldrh	r1, [r4, #4]
10056e18:	0789      	lsls	r1, r1, #30
10056e1a:	d43d      	bmi.n	10056e98 <GAT_srv_tx_service_change+0xa8>
10056e1c:	2800      	cmp	r0, #0
10056e1e:	d13b      	bne.n	10056e98 <GAT_srv_tx_service_change+0xa8>
10056e20:	ad04      	add	r5, sp, #16
10056e22:	4920      	ldr	r1, [pc, #128]	@ (10056ea4 <__arm_cp.8_1>)
10056e24:	2214      	movs	r2, #20
10056e26:	4628      	mov	r0, r5
10056e28:	f00f fbab 	bl	10066582 <__aeabi_memcpy>
10056e2c:	2001      	movs	r0, #1
10056e2e:	491e      	ldr	r1, [pc, #120]	@ (10056ea8 <__arm_cp.8_2>)
10056e30:	462a      	mov	r2, r5
10056e32:	f000 fbaf 	bl	10057594 <GAT_srv_find_by_type_attr_p>
10056e36:	2800      	cmp	r0, #0
10056e38:	d012      	beq.n	10056e60 <GAT_srv_tx_service_change+0x70>
10056e3a:	4605      	mov	r5, r0
10056e3c:	f000 fc02 	bl	10057644 <GAT_srv_get_cccd_attr_p>
10056e40:	2800      	cmp	r0, #0
10056e42:	d00d      	beq.n	10056e60 <GAT_srv_tx_service_change+0x70>
10056e44:	4601      	mov	r1, r0
10056e46:	8920      	ldrh	r0, [r4, #8]
10056e48:	f000 fc2c 	bl	100576a4 <GAT_srv_get_cccd_val>
10056e4c:	0780      	lsls	r0, r0, #30
10056e4e:	d412      	bmi.n	10056e76 <GAT_srv_tx_service_change+0x86>
10056e50:	8920      	ldrh	r0, [r4, #8]
10056e52:	2100      	movs	r1, #0
10056e54:	2201      	movs	r2, #1
10056e56:	f000 fbbd 	bl	100575d4 <GAT_srv_check_client_support_feature>
10056e5a:	4605      	mov	r5, r0
10056e5c:	2881      	cmp	r0, #129	@ 0x81
10056e5e:	d11b      	bne.n	10056e98 <GAT_srv_tx_service_change+0xa8>
10056e60:	a809      	add	r0, sp, #36	@ 0x24
10056e62:	2140      	movs	r1, #64	@ 0x40
10056e64:	8001      	strh	r1, [r0, #0]
10056e66:	8921      	ldrh	r1, [r4, #8]
10056e68:	9000      	str	r0, [sp, #0]
10056e6a:	2001      	movs	r0, #1
10056e6c:	2200      	movs	r2, #0
10056e6e:	4b10      	ldr	r3, [pc, #64]	@ (10056eb0 <__arm_cp.8_4>)
10056e70:	f7fe fa76 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10056e74:	e00f      	b.n	10056e96 <GAT_srv_tx_service_change+0xa6>
10056e76:	480d      	ldr	r0, [pc, #52]	@ (10056eac <__arm_cp.8_3>)
10056e78:	9003      	str	r0, [sp, #12]
10056e7a:	aa01      	add	r2, sp, #4
10056e7c:	2004      	movs	r0, #4
10056e7e:	8050      	strh	r0, [r2, #2]
10056e80:	8868      	ldrh	r0, [r5, #2]
10056e82:	8010      	strh	r0, [r2, #0]
10056e84:	a803      	add	r0, sp, #12
10056e86:	9002      	str	r0, [sp, #8]
10056e88:	8961      	ldrh	r1, [r4, #10]
10056e8a:	8920      	ldrh	r0, [r4, #8]
10056e8c:	9200      	str	r2, [sp, #0]
10056e8e:	2202      	movs	r2, #2
10056e90:	2301      	movs	r3, #1
10056e92:	f7fe fe17 	bl	10055ac4 <GAT_att_srv_hvtx>
10056e96:	4605      	mov	r5, r0
10056e98:	4628      	mov	r0, r5
10056e9a:	b00a      	add	sp, #40	@ 0x28
10056e9c:	bdb0      	pop	{r4, r5, r7, pc}
10056e9e:	46c0      	nop			@ (mov r8, r8)

10056ea0 <__arm_cp.8_0>:
10056ea0:	1005560d 	.word	0x1005560d

10056ea4 <__arm_cp.8_1>:
10056ea4:	1006811c 	.word	0x1006811c

10056ea8 <__arm_cp.8_2>:
10056ea8:	0000ffff 	.word	0x0000ffff

10056eac <__arm_cp.8_3>:
10056eac:	ffff0001 	.word	0xffff0001

10056eb0 <__arm_cp.8_4>:
10056eb0:	10055625 	.word	0x10055625

10056eb4 <GAT_srv_get_attr_type>:
10056eb4:	b580      	push	{r7, lr}
10056eb6:	2210      	movs	r2, #16
10056eb8:	740a      	strb	r2, [r1, #16]
10056eba:	7802      	ldrb	r2, [r0, #0]
10056ebc:	2a04      	cmp	r2, #4
10056ebe:	d80d      	bhi.n	10056edc <GAT_srv_get_attr_type+0x28>
10056ec0:	447a      	add	r2, pc
10056ec2:	7912      	ldrb	r2, [r2, #4]
10056ec4:	0052      	lsls	r2, r2, #1
10056ec6:	4497      	add	pc, r2
10056ec8:	0212160a 	.word	0x0212160a
10056ecc:	0002      	.short	0x0002
10056ece:	6840      	ldr	r0, [r0, #4]
10056ed0:	1d03      	adds	r3, r0, #4
10056ed2:	2214      	movs	r2, #20
10056ed4:	4608      	mov	r0, r1
10056ed6:	4619      	mov	r1, r3
10056ed8:	f7fa f8de 	bl	10051098 <BLEPLAT_MemCpy>
10056edc:	bd80      	pop	{r7, pc}
10056ede:	2205      	movs	r2, #5
10056ee0:	02d2      	lsls	r2, r2, #11
10056ee2:	6840      	ldr	r0, [r0, #4]
10056ee4:	7d00      	ldrb	r0, [r0, #20]
10056ee6:	2801      	cmp	r0, #1
10056ee8:	d109      	bne.n	10056efe <GAT_srv_get_attr_type+0x4a>
10056eea:	818a      	strh	r2, [r1, #12]
10056eec:	bd80      	pop	{r7, pc}
10056eee:	2005      	movs	r0, #5
10056ef0:	02c0      	lsls	r0, r0, #11
10056ef2:	1cc0      	adds	r0, r0, #3
10056ef4:	e004      	b.n	10056f00 <GAT_srv_get_attr_type+0x4c>
10056ef6:	2005      	movs	r0, #5
10056ef8:	02c0      	lsls	r0, r0, #11
10056efa:	1c80      	adds	r0, r0, #2
10056efc:	e000      	b.n	10056f00 <GAT_srv_get_attr_type+0x4c>
10056efe:	1c50      	adds	r0, r2, #1
10056f00:	8188      	strh	r0, [r1, #12]
10056f02:	bd80      	pop	{r7, pc}

10056f04 <GAT_srv_get_att_group_end_handle>:
10056f04:	b580      	push	{r7, lr}
10056f06:	7801      	ldrb	r1, [r0, #0]
10056f08:	2202      	movs	r2, #2
10056f0a:	430a      	orrs	r2, r1
10056f0c:	2a02      	cmp	r2, #2
10056f0e:	d102      	bne.n	10056f16 <GAT_srv_get_att_group_end_handle+0x12>
10056f10:	f00c fa86 	bl	10063420 <GAT_att_db_get_last_group_handle>
10056f14:	bd80      	pop	{r7, pc}
10056f16:	8840      	ldrh	r0, [r0, #2]
10056f18:	bd80      	pop	{r7, pc}

10056f1a <GAT_srv_attr_value_read>:
10056f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056f1c:	461c      	mov	r4, r3
10056f1e:	9200      	str	r2, [sp, #0]
10056f20:	460e      	mov	r6, r1
10056f22:	4607      	mov	r7, r0
10056f24:	2201      	movs	r2, #1
10056f26:	4608      	mov	r0, r1
10056f28:	4639      	mov	r1, r7
10056f2a:	f000 f80f 	bl	10056f4c <GAT_srv_check_perms>
10056f2e:	7020      	strb	r0, [r4, #0]
10056f30:	2586      	movs	r5, #134	@ 0x86
10056f32:	2800      	cmp	r0, #0
10056f34:	d108      	bne.n	10056f48 <GAT_srv_attr_value_read+0x2e>
10056f36:	4638      	mov	r0, r7
10056f38:	4631      	mov	r1, r6
10056f3a:	9a00      	ldr	r2, [sp, #0]
10056f3c:	f000 f87c 	bl	10057038 <GAT_srv_get_attr_value>
10056f40:	2886      	cmp	r0, #134	@ 0x86
10056f42:	d102      	bne.n	10056f4a <GAT_srv_attr_value_read+0x30>
10056f44:	200e      	movs	r0, #14
10056f46:	7020      	strb	r0, [r4, #0]
10056f48:	4628      	mov	r0, r5
10056f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056f4c <GAT_srv_check_perms>:
10056f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10056f4e:	b085      	sub	sp, #20
10056f50:	4615      	mov	r5, r2
10056f52:	9101      	str	r1, [sp, #4]
10056f54:	4601      	mov	r1, r0
10056f56:	7804      	ldrb	r4, [r0, #0]
10056f58:	2700      	movs	r7, #0
10056f5a:	2302      	movs	r3, #2
10056f5c:	200e      	movs	r0, #14
10056f5e:	2c03      	cmp	r4, #3
10056f60:	461a      	mov	r2, r3
10056f62:	463e      	mov	r6, r7
10056f64:	d312      	bcc.n	10056f8c <GAT_srv_check_perms+0x40>
10056f66:	d00b      	beq.n	10056f80 <GAT_srv_check_perms+0x34>
10056f68:	2c04      	cmp	r4, #4
10056f6a:	d158      	bne.n	1005701e <GAT_srv_check_perms+0xd2>
10056f6c:	6848      	ldr	r0, [r1, #4]
10056f6e:	7801      	ldrb	r1, [r0, #0]
10056f70:	078c      	lsls	r4, r1, #30
10056f72:	07c9      	lsls	r1, r1, #31
10056f74:	0f8a      	lsrs	r2, r1, #30
10056f76:	2c00      	cmp	r4, #0
10056f78:	d500      	bpl.n	10056f7c <GAT_srv_check_perms+0x30>
10056f7a:	324c      	adds	r2, #76	@ 0x4c
10056f7c:	1c41      	adds	r1, r0, #1
10056f7e:	e002      	b.n	10056f86 <GAT_srv_check_perms+0x3a>
10056f80:	6848      	ldr	r0, [r1, #4]
10056f82:	1c41      	adds	r1, r0, #1
10056f84:	7802      	ldrb	r2, [r0, #0]
10056f86:	1c80      	adds	r0, r0, #2
10056f88:	780e      	ldrb	r6, [r1, #0]
10056f8a:	7807      	ldrb	r7, [r0, #0]
10056f8c:	2d01      	cmp	r5, #1
10056f8e:	d103      	bne.n	10056f98 <GAT_srv_check_perms+0x4c>
10056f90:	4610      	mov	r0, r2
10056f92:	4018      	ands	r0, r3
10056f94:	4618      	mov	r0, r3
10056f96:	d042      	beq.n	1005701e <GAT_srv_check_perms+0xd2>
10056f98:	2003      	movs	r0, #3
10056f9a:	2d03      	cmp	r5, #3
10056f9c:	d102      	bne.n	10056fa4 <GAT_srv_check_perms+0x58>
10056f9e:	2108      	movs	r1, #8
10056fa0:	4011      	ands	r1, r2
10056fa2:	d03c      	beq.n	1005701e <GAT_srv_check_perms+0xd2>
10056fa4:	2d04      	cmp	r5, #4
10056fa6:	d102      	bne.n	10056fae <GAT_srv_check_perms+0x62>
10056fa8:	2104      	movs	r1, #4
10056faa:	4011      	ands	r1, r2
10056fac:	d037      	beq.n	1005701e <GAT_srv_check_perms+0xd2>
10056fae:	2d05      	cmp	r5, #5
10056fb0:	d102      	bne.n	10056fb8 <GAT_srv_check_perms+0x6c>
10056fb2:	2140      	movs	r1, #64	@ 0x40
10056fb4:	400a      	ands	r2, r1
10056fb6:	d032      	beq.n	1005701e <GAT_srv_check_perms+0xd2>
10056fb8:	a904      	add	r1, sp, #16
10056fba:	aa03      	add	r2, sp, #12
10056fbc:	ab02      	add	r3, sp, #8
10056fbe:	9c01      	ldr	r4, [sp, #4]
10056fc0:	4620      	mov	r0, r4
10056fc2:	f009 ff26 	bl	10060e12 <smp_sap_get_security_level>
10056fc6:	2802      	cmp	r0, #2
10056fc8:	d102      	bne.n	10056fd0 <GAT_srv_check_perms+0x84>
10056fca:	2f00      	cmp	r7, #0
10056fcc:	d10f      	bne.n	10056fee <GAT_srv_check_perms+0xa2>
10056fce:	e025      	b.n	1005701c <GAT_srv_check_perms+0xd0>
10056fd0:	2d01      	cmp	r5, #1
10056fd2:	d000      	beq.n	10056fd6 <GAT_srv_check_perms+0x8a>
10056fd4:	08ff      	lsrs	r7, r7, #3
10056fd6:	2d05      	cmp	r5, #5
10056fd8:	d10b      	bne.n	10056ff2 <GAT_srv_check_perms+0xa6>
10056fda:	a804      	add	r0, sp, #16
10056fdc:	7800      	ldrb	r0, [r0, #0]
10056fde:	2802      	cmp	r0, #2
10056fe0:	d105      	bne.n	10056fee <GAT_srv_check_perms+0xa2>
10056fe2:	a802      	add	r0, sp, #8
10056fe4:	7800      	ldrb	r0, [r0, #0]
10056fe6:	2802      	cmp	r0, #2
10056fe8:	d114      	bne.n	10057014 <GAT_srv_check_perms+0xc8>
10056fea:	2000      	movs	r0, #0
10056fec:	e013      	b.n	10057016 <GAT_srv_check_perms+0xca>
10056fee:	200e      	movs	r0, #14
10056ff0:	e015      	b.n	1005701e <GAT_srv_check_perms+0xd2>
10056ff2:	2000      	movs	r0, #0
10056ff4:	2f00      	cmp	r7, #0
10056ff6:	d012      	beq.n	1005701e <GAT_srv_check_perms+0xd2>
10056ff8:	a903      	add	r1, sp, #12
10056ffa:	7809      	ldrb	r1, [r1, #0]
10056ffc:	07fa      	lsls	r2, r7, #31
10056ffe:	d003      	beq.n	10057008 <GAT_srv_check_perms+0xbc>
10057000:	2903      	cmp	r1, #3
10057002:	d201      	bcs.n	10057008 <GAT_srv_check_perms+0xbc>
10057004:	2005      	movs	r0, #5
10057006:	e00a      	b.n	1005701e <GAT_srv_check_perms+0xd2>
10057008:	077a      	lsls	r2, r7, #29
1005700a:	d508      	bpl.n	1005701e <GAT_srv_check_perms+0xd2>
1005700c:	2902      	cmp	r1, #2
1005700e:	d208      	bcs.n	10057022 <GAT_srv_check_perms+0xd6>
10057010:	200f      	movs	r0, #15
10057012:	e004      	b.n	1005701e <GAT_srv_check_perms+0xd2>
10057014:	2005      	movs	r0, #5
10057016:	2101      	movs	r1, #1
10057018:	400f      	ands	r7, r1
1005701a:	d100      	bne.n	1005701e <GAT_srv_check_perms+0xd2>
1005701c:	4638      	mov	r0, r7
1005701e:	b005      	add	sp, #20
10057020:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057022:	4620      	mov	r0, r4
10057024:	4631      	mov	r1, r6
10057026:	f009 ff6a 	bl	10060efe <smp_sap_check_encryption_key_size>
1005702a:	28b6      	cmp	r0, #182	@ 0xb6
1005702c:	d001      	beq.n	10057032 <GAT_srv_check_perms+0xe6>
1005702e:	2000      	movs	r0, #0
10057030:	e7f5      	b.n	1005701e <GAT_srv_check_perms+0xd2>
10057032:	200c      	movs	r0, #12
10057034:	e7f3      	b.n	1005701e <GAT_srv_check_perms+0xd2>
	...

10057038 <GAT_srv_get_attr_value>:
10057038:	b5f0      	push	{r4, r5, r6, r7, lr}
1005703a:	b085      	sub	sp, #20
1005703c:	460d      	mov	r5, r1
1005703e:	7809      	ldrb	r1, [r1, #0]
10057040:	2904      	cmp	r1, #4
10057042:	d811      	bhi.n	10057068 <GAT_srv_get_attr_value+0x30>
10057044:	4614      	mov	r4, r2
10057046:	46c0      	nop			@ (mov r8, r8)
10057048:	4479      	add	r1, pc
1005704a:	7909      	ldrb	r1, [r1, #4]
1005704c:	0049      	lsls	r1, r1, #1
1005704e:	448f      	add	pc, r1
10057050:	694a0d02 	.word	0x694a0d02
10057054:	007e      	.short	0x007e
10057056:	4e73      	ldr	r6, [pc, #460]	@ (10057224 <__arm_cp.13_0>)
10057058:	6830      	ldr	r0, [r6, #0]
1005705a:	4601      	mov	r1, r0
1005705c:	3170      	adds	r1, #112	@ 0x70
1005705e:	66c1      	str	r1, [r0, #108]	@ 0x6c
10057060:	6868      	ldr	r0, [r5, #4]
10057062:	f00a fa87 	bl	10061574 <UUID_write_to_flat>
10057066:	e057      	b.n	10057118 <GAT_srv_get_attr_value+0xe0>
10057068:	2686      	movs	r6, #134	@ 0x86
1005706a:	e0d3      	b.n	10057214 <GAT_srv_get_attr_value+0x1dc>
1005706c:	4f6d      	ldr	r7, [pc, #436]	@ (10057224 <__arm_cp.13_0>)
1005706e:	6838      	ldr	r0, [r7, #0]
10057070:	4601      	mov	r1, r0
10057072:	3170      	adds	r1, #112	@ 0x70
10057074:	66c1      	str	r1, [r0, #108]	@ 0x6c
10057076:	686b      	ldr	r3, [r5, #4]
10057078:	2001      	movs	r0, #1
1005707a:	496e      	ldr	r1, [pc, #440]	@ (10057234 <__arm_cp.13_4>)
1005707c:	2600      	movs	r6, #0
1005707e:	4632      	mov	r2, r6
10057080:	f000 fad6 	bl	10057630 <GAT_srv_get_attribute_handle>
10057084:	a901      	add	r1, sp, #4
10057086:	8008      	strh	r0, [r1, #0]
10057088:	2800      	cmp	r0, #0
1005708a:	d100      	bne.n	1005708e <GAT_srv_get_attr_value+0x56>
1005708c:	e0ad      	b.n	100571ea <GAT_srv_get_attr_value+0x1b2>
1005708e:	f00c f929 	bl	100632e4 <GAT_att_db_find_by_handle>
10057092:	f7ff ff37 	bl	10056f04 <GAT_srv_get_att_group_end_handle>
10057096:	a902      	add	r1, sp, #8
10057098:	9100      	str	r1, [sp, #0]
1005709a:	8008      	strh	r0, [r1, #0]
1005709c:	6838      	ldr	r0, [r7, #0]
1005709e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100570a0:	a901      	add	r1, sp, #4
100570a2:	2702      	movs	r7, #2
100570a4:	463a      	mov	r2, r7
100570a6:	f7f9 fff7 	bl	10051098 <BLEPLAT_MemCpy>
100570aa:	485e      	ldr	r0, [pc, #376]	@ (10057224 <__arm_cp.13_0>)
100570ac:	6800      	ldr	r0, [r0, #0]
100570ae:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100570b0:	1c80      	adds	r0, r0, #2
100570b2:	9900      	ldr	r1, [sp, #0]
100570b4:	463a      	mov	r2, r7
100570b6:	f7f9 ffef 	bl	10051098 <BLEPLAT_MemCpy>
100570ba:	485a      	ldr	r0, [pc, #360]	@ (10057224 <__arm_cp.13_0>)
100570bc:	6800      	ldr	r0, [r0, #0]
100570be:	2768      	movs	r7, #104	@ 0x68
100570c0:	2104      	movs	r1, #4
100570c2:	53c1      	strh	r1, [r0, r7]
100570c4:	6869      	ldr	r1, [r5, #4]
100570c6:	7c0a      	ldrb	r2, [r1, #16]
100570c8:	2a10      	cmp	r2, #16
100570ca:	d000      	beq.n	100570ce <GAT_srv_get_attr_value+0x96>
100570cc:	e091      	b.n	100571f2 <GAT_srv_get_attr_value+0x1ba>
100570ce:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100570d0:	310c      	adds	r1, #12
100570d2:	1d00      	adds	r0, r0, #4
100570d4:	2202      	movs	r2, #2
100570d6:	f7f9 ffdf 	bl	10051098 <BLEPLAT_MemCpy>
100570da:	4852      	ldr	r0, [pc, #328]	@ (10057224 <__arm_cp.13_0>)
100570dc:	6800      	ldr	r0, [r0, #0]
100570de:	5bc1      	ldrh	r1, [r0, r7]
100570e0:	1c89      	adds	r1, r1, #2
100570e2:	53c1      	strh	r1, [r0, r7]
100570e4:	e085      	b.n	100571f2 <GAT_srv_get_attr_value+0x1ba>
100570e6:	4e4f      	ldr	r6, [pc, #316]	@ (10057224 <__arm_cp.13_0>)
100570e8:	6830      	ldr	r0, [r6, #0]
100570ea:	4601      	mov	r1, r0
100570ec:	3170      	adds	r1, #112	@ 0x70
100570ee:	66c1      	str	r1, [r0, #108]	@ 0x6c
100570f0:	6869      	ldr	r1, [r5, #4]
100570f2:	7809      	ldrb	r1, [r1, #0]
100570f4:	2270      	movs	r2, #112	@ 0x70
100570f6:	5481      	strb	r1, [r0, r2]
100570f8:	8869      	ldrh	r1, [r5, #2]
100570fa:	1c4a      	adds	r2, r1, #1
100570fc:	a903      	add	r1, sp, #12
100570fe:	800a      	strh	r2, [r1, #0]
10057100:	3071      	adds	r0, #113	@ 0x71
10057102:	2202      	movs	r2, #2
10057104:	f7f9 ffc8 	bl	10051098 <BLEPLAT_MemCpy>
10057108:	6830      	ldr	r0, [r6, #0]
1005710a:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
1005710c:	6868      	ldr	r0, [r5, #4]
1005710e:	1d00      	adds	r0, r0, #4
10057110:	1cc9      	adds	r1, r1, #3
10057112:	f00a fa2f 	bl	10061574 <UUID_write_to_flat>
10057116:	1cc0      	adds	r0, r0, #3
10057118:	6831      	ldr	r1, [r6, #0]
1005711a:	2268      	movs	r2, #104	@ 0x68
1005711c:	5288      	strh	r0, [r1, r2]
1005711e:	3168      	adds	r1, #104	@ 0x68
10057120:	6021      	str	r1, [r4, #0]
10057122:	e076      	b.n	10057212 <GAT_srv_get_attr_value+0x1da>
10057124:	6869      	ldr	r1, [r5, #4]
10057126:	7d0a      	ldrb	r2, [r1, #20]
10057128:	2a10      	cmp	r2, #16
1005712a:	d132      	bne.n	10057192 <GAT_srv_get_attr_value+0x15a>
1005712c:	4a3f      	ldr	r2, [pc, #252]	@ (1005722c <__arm_cp.13_2>)
1005712e:	1c52      	adds	r2, r2, #1
10057130:	8a0b      	ldrh	r3, [r1, #16]
10057132:	4293      	cmp	r3, r2
10057134:	d12d      	bne.n	10057192 <GAT_srv_get_attr_value+0x15a>
10057136:	483b      	ldr	r0, [pc, #236]	@ (10057224 <__arm_cp.13_0>)
10057138:	6801      	ldr	r1, [r0, #0]
1005713a:	3168      	adds	r1, #104	@ 0x68
1005713c:	6021      	str	r1, [r4, #0]
1005713e:	6800      	ldr	r0, [r0, #0]
10057140:	2168      	movs	r1, #104	@ 0x68
10057142:	2210      	movs	r2, #16
10057144:	5242      	strh	r2, [r0, r1]
10057146:	4601      	mov	r1, r0
10057148:	3183      	adds	r1, #131	@ 0x83
1005714a:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005714c:	e061      	b.n	10057212 <GAT_srv_get_attr_value+0x1da>
1005714e:	6869      	ldr	r1, [r5, #4]
10057150:	6989      	ldr	r1, [r1, #24]
10057152:	2900      	cmp	r1, #0
10057154:	d045      	beq.n	100571e2 <GAT_srv_get_attr_value+0x1aa>
10057156:	4e33      	ldr	r6, [pc, #204]	@ (10057224 <__arm_cp.13_0>)
10057158:	6831      	ldr	r1, [r6, #0]
1005715a:	3168      	adds	r1, #104	@ 0x68
1005715c:	6021      	str	r1, [r4, #0]
1005715e:	6869      	ldr	r1, [r5, #4]
10057160:	7d0a      	ldrb	r2, [r1, #20]
10057162:	2a10      	cmp	r2, #16
10057164:	d13f      	bne.n	100571e6 <GAT_srv_get_attr_value+0x1ae>
10057166:	8a0a      	ldrh	r2, [r1, #16]
10057168:	4b2f      	ldr	r3, [pc, #188]	@ (10057228 <__arm_cp.13_1>)
1005716a:	429a      	cmp	r2, r3
1005716c:	d13b      	bne.n	100571e6 <GAT_srv_get_attr_value+0x1ae>
1005716e:	6831      	ldr	r1, [r6, #0]
10057170:	2268      	movs	r2, #104	@ 0x68
10057172:	2402      	movs	r4, #2
10057174:	528c      	strh	r4, [r1, r2]
10057176:	460a      	mov	r2, r1
10057178:	3270      	adds	r2, #112	@ 0x70
1005717a:	66ca      	str	r2, [r1, #108]	@ 0x6c
1005717c:	4629      	mov	r1, r5
1005717e:	f000 fa91 	bl	100576a4 <GAT_srv_get_cccd_val>
10057182:	a904      	add	r1, sp, #16
10057184:	8008      	strh	r0, [r1, #0]
10057186:	6830      	ldr	r0, [r6, #0]
10057188:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005718a:	4622      	mov	r2, r4
1005718c:	f7f9 ff84 	bl	10051098 <BLEPLAT_MemCpy>
10057190:	e03f      	b.n	10057212 <GAT_srv_get_attr_value+0x1da>
10057192:	6a09      	ldr	r1, [r1, #32]
10057194:	2900      	cmp	r1, #0
10057196:	d024      	beq.n	100571e2 <GAT_srv_get_attr_value+0x1aa>
10057198:	4e22      	ldr	r6, [pc, #136]	@ (10057224 <__arm_cp.13_0>)
1005719a:	6831      	ldr	r1, [r6, #0]
1005719c:	3168      	adds	r1, #104	@ 0x68
1005719e:	6021      	str	r1, [r4, #0]
100571a0:	6869      	ldr	r1, [r5, #4]
100571a2:	7d0a      	ldrb	r2, [r1, #20]
100571a4:	2a10      	cmp	r2, #16
100571a6:	d127      	bne.n	100571f8 <GAT_srv_get_attr_value+0x1c0>
100571a8:	8a0a      	ldrh	r2, [r1, #16]
100571aa:	4b20      	ldr	r3, [pc, #128]	@ (1005722c <__arm_cp.13_2>)
100571ac:	429a      	cmp	r2, r3
100571ae:	d123      	bne.n	100571f8 <GAT_srv_get_attr_value+0x1c0>
100571b0:	6831      	ldr	r1, [r6, #0]
100571b2:	2268      	movs	r2, #104	@ 0x68
100571b4:	2301      	movs	r3, #1
100571b6:	528b      	strh	r3, [r1, r2]
100571b8:	460a      	mov	r2, r1
100571ba:	3270      	adds	r2, #112	@ 0x70
100571bc:	66ca      	str	r2, [r1, #108]	@ 0x6c
100571be:	f7fe fa37 	bl	10055630 <GAT_att_cmn_get_conn_index>
100571c2:	28ff      	cmp	r0, #255	@ 0xff
100571c4:	d029      	beq.n	1005721a <GAT_srv_get_attr_value+0x1e2>
100571c6:	6869      	ldr	r1, [r5, #4]
100571c8:	6a09      	ldr	r1, [r1, #32]
100571ca:	688b      	ldr	r3, [r1, #8]
100571cc:	4918      	ldr	r1, [pc, #96]	@ (10057230 <__arm_cp.13_3>)
100571ce:	7ac9      	ldrb	r1, [r1, #11]
100571d0:	0849      	lsrs	r1, r1, #1
100571d2:	1c4a      	adds	r2, r1, #1
100571d4:	2104      	movs	r1, #4
100571d6:	f000 f8d9 	bl	1005738c <GAT_srv_get_zip_val>
100571da:	6831      	ldr	r1, [r6, #0]
100571dc:	2270      	movs	r2, #112	@ 0x70
100571de:	5488      	strb	r0, [r1, r2]
100571e0:	e017      	b.n	10057212 <GAT_srv_get_attr_value+0x1da>
100571e2:	2684      	movs	r6, #132	@ 0x84
100571e4:	e016      	b.n	10057214 <GAT_srv_get_attr_value+0x1dc>
100571e6:	6988      	ldr	r0, [r1, #24]
100571e8:	e007      	b.n	100571fa <GAT_srv_get_attr_value+0x1c2>
100571ea:	6838      	ldr	r0, [r7, #0]
100571ec:	2168      	movs	r1, #104	@ 0x68
100571ee:	2200      	movs	r2, #0
100571f0:	5242      	strh	r2, [r0, r1]
100571f2:	3068      	adds	r0, #104	@ 0x68
100571f4:	6020      	str	r0, [r4, #0]
100571f6:	e00d      	b.n	10057214 <GAT_srv_get_attr_value+0x1dc>
100571f8:	6a08      	ldr	r0, [r1, #32]
100571fa:	7801      	ldrb	r1, [r0, #0]
100571fc:	0789      	lsls	r1, r1, #30
100571fe:	d501      	bpl.n	10057204 <GAT_srv_get_attr_value+0x1cc>
10057200:	2102      	movs	r1, #2
10057202:	e000      	b.n	10057206 <GAT_srv_get_attr_value+0x1ce>
10057204:	2104      	movs	r1, #4
10057206:	5a41      	ldrh	r1, [r0, r1]
10057208:	6880      	ldr	r0, [r0, #8]
1005720a:	6832      	ldr	r2, [r6, #0]
1005720c:	2368      	movs	r3, #104	@ 0x68
1005720e:	52d1      	strh	r1, [r2, r3]
10057210:	66d0      	str	r0, [r2, #108]	@ 0x6c
10057212:	2600      	movs	r6, #0
10057214:	4630      	mov	r0, r6
10057216:	b005      	add	sp, #20
10057218:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005721a:	6830      	ldr	r0, [r6, #0]
1005721c:	2170      	movs	r1, #112	@ 0x70
1005721e:	2600      	movs	r6, #0
10057220:	5446      	strb	r6, [r0, r1]
10057222:	e7f7      	b.n	10057214 <GAT_srv_get_attr_value+0x1dc>

10057224 <__arm_cp.13_0>:
10057224:	20002420 	.word	0x20002420

10057228 <__arm_cp.13_1>:
10057228:	00002902 	.word	0x00002902

1005722c <__arm_cp.13_2>:
1005722c:	00002b29 	.word	0x00002b29

10057230 <__arm_cp.13_3>:
10057230:	2000247c 	.word	0x2000247c

10057234 <__arm_cp.13_4>:
10057234:	0000ffff 	.word	0x0000ffff

10057238 <GAT_srv_attr_value_write>:
10057238:	b5f0      	push	{r4, r5, r6, r7, lr}
1005723a:	b089      	sub	sp, #36	@ 0x24
1005723c:	4617      	mov	r7, r2
1005723e:	460d      	mov	r5, r1
10057240:	4606      	mov	r6, r0
10057242:	7800      	ldrb	r0, [r0, #0]
10057244:	8874      	ldrh	r4, [r6, #2]
10057246:	2804      	cmp	r0, #4
10057248:	d045      	beq.n	100572d6 <GAT_srv_attr_value_write+0x9e>
1005724a:	2803      	cmp	r0, #3
1005724c:	d177      	bne.n	1005733e <GAT_srv_attr_value_write+0x106>
1005724e:	6871      	ldr	r1, [r6, #4]
10057250:	6a08      	ldr	r0, [r1, #32]
10057252:	2800      	cmp	r0, #0
10057254:	d07d      	beq.n	10057352 <GAT_srv_attr_value_write+0x11a>
10057256:	7d0a      	ldrb	r2, [r1, #20]
10057258:	2a10      	cmp	r2, #16
1005725a:	d174      	bne.n	10057346 <GAT_srv_attr_value_write+0x10e>
1005725c:	8a09      	ldrh	r1, [r1, #16]
1005725e:	4a49      	ldr	r2, [pc, #292]	@ (10057384 <__arm_cp.14_1>)
10057260:	4291      	cmp	r1, r2
10057262:	d170      	bne.n	10057346 <GAT_srv_attr_value_write+0x10e>
10057264:	9700      	str	r7, [sp, #0]
10057266:	2101      	movs	r1, #1
10057268:	aa07      	add	r2, sp, #28
1005726a:	ab08      	add	r3, sp, #32
1005726c:	4628      	mov	r0, r5
1005726e:	f7fe fd04 	bl	10055c7a <GAT_att_srv_extract_write_packet_data>
10057272:	2800      	cmp	r0, #0
10057274:	d16e      	bne.n	10057354 <GAT_srv_attr_value_write+0x11c>
10057276:	8828      	ldrh	r0, [r5, #0]
10057278:	f7fe f9da 	bl	10055630 <GAT_att_cmn_get_conn_index>
1005727c:	aa07      	add	r2, sp, #28
1005727e:	7811      	ldrb	r1, [r2, #0]
10057280:	2307      	movs	r3, #7
10057282:	400b      	ands	r3, r1
10057284:	9305      	str	r3, [sp, #20]
10057286:	7013      	strb	r3, [r2, #0]
10057288:	6871      	ldr	r1, [r6, #4]
1005728a:	6a09      	ldr	r1, [r1, #32]
1005728c:	688b      	ldr	r3, [r1, #8]
1005728e:	493e      	ldr	r1, [pc, #248]	@ (10057388 <__arm_cp.14_2>)
10057290:	7ac9      	ldrb	r1, [r1, #11]
10057292:	0849      	lsrs	r1, r1, #1
10057294:	1c4a      	adds	r2, r1, #1
10057296:	2104      	movs	r1, #4
10057298:	9004      	str	r0, [sp, #16]
1005729a:	9203      	str	r2, [sp, #12]
1005729c:	9302      	str	r3, [sp, #8]
1005729e:	f000 f875 	bl	1005738c <GAT_srv_get_zip_val>
100572a2:	9a05      	ldr	r2, [sp, #20]
100572a4:	4601      	mov	r1, r0
100572a6:	4011      	ands	r1, r2
100572a8:	4281      	cmp	r1, r0
100572aa:	d157      	bne.n	1005735c <GAT_srv_attr_value_write+0x124>
100572ac:	9802      	ldr	r0, [sp, #8]
100572ae:	9000      	str	r0, [sp, #0]
100572b0:	2104      	movs	r1, #4
100572b2:	9804      	ldr	r0, [sp, #16]
100572b4:	9b03      	ldr	r3, [sp, #12]
100572b6:	f000 f87c 	bl	100573b2 <GAT_srv_set_zip_val>
100572ba:	6870      	ldr	r0, [r6, #4]
100572bc:	6a00      	ldr	r0, [r0, #32]
100572be:	7800      	ldrb	r0, [r0, #0]
100572c0:	07c0      	lsls	r0, r0, #31
100572c2:	d03a      	beq.n	1005733a <GAT_srv_attr_value_write+0x102>
100572c4:	882e      	ldrh	r6, [r5, #0]
100572c6:	4628      	mov	r0, r5
100572c8:	f000 ff95 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
100572cc:	4602      	mov	r2, r0
100572ce:	a808      	add	r0, sp, #32
100572d0:	8800      	ldrh	r0, [r0, #0]
100572d2:	a907      	add	r1, sp, #28
100572d4:	e04c      	b.n	10057370 <GAT_srv_attr_value_write+0x138>
100572d6:	6871      	ldr	r1, [r6, #4]
100572d8:	6988      	ldr	r0, [r1, #24]
100572da:	2800      	cmp	r0, #0
100572dc:	d039      	beq.n	10057352 <GAT_srv_attr_value_write+0x11a>
100572de:	7d0a      	ldrb	r2, [r1, #20]
100572e0:	2a10      	cmp	r2, #16
100572e2:	d130      	bne.n	10057346 <GAT_srv_attr_value_write+0x10e>
100572e4:	8a09      	ldrh	r1, [r1, #16]
100572e6:	4a26      	ldr	r2, [pc, #152]	@ (10057380 <__arm_cp.14_0>)
100572e8:	4291      	cmp	r1, r2
100572ea:	d12c      	bne.n	10057346 <GAT_srv_attr_value_write+0x10e>
100572ec:	9700      	str	r7, [sp, #0]
100572ee:	2102      	movs	r1, #2
100572f0:	aa06      	add	r2, sp, #24
100572f2:	ab08      	add	r3, sp, #32
100572f4:	4628      	mov	r0, r5
100572f6:	f7fe fcc0 	bl	10055c7a <GAT_att_srv_extract_write_packet_data>
100572fa:	2800      	cmp	r0, #0
100572fc:	d12a      	bne.n	10057354 <GAT_srv_attr_value_write+0x11c>
100572fe:	a806      	add	r0, sp, #24
10057300:	8800      	ldrh	r0, [r0, #0]
10057302:	9005      	str	r0, [sp, #20]
10057304:	8870      	ldrh	r0, [r6, #2]
10057306:	1e80      	subs	r0, r0, #2
10057308:	b281      	uxth	r1, r0
1005730a:	2002      	movs	r0, #2
1005730c:	f00c f920 	bl	10063550 <GAT_att_db_reverse_find_attr_of_type>
10057310:	2800      	cmp	r0, #0
10057312:	d021      	beq.n	10057358 <GAT_srv_attr_value_write+0x120>
10057314:	9905      	ldr	r1, [sp, #20]
10057316:	0789      	lsls	r1, r1, #30
10057318:	0e89      	lsrs	r1, r1, #26
1005731a:	6840      	ldr	r0, [r0, #4]
1005731c:	7800      	ldrb	r0, [r0, #0]
1005731e:	4008      	ands	r0, r1
10057320:	4288      	cmp	r0, r1
10057322:	d119      	bne.n	10057358 <GAT_srv_attr_value_write+0x120>
10057324:	a806      	add	r0, sp, #24
10057326:	8802      	ldrh	r2, [r0, #0]
10057328:	8828      	ldrh	r0, [r5, #0]
1005732a:	4631      	mov	r1, r6
1005732c:	f000 f882 	bl	10057434 <GAT_srv_set_cccd_val>
10057330:	6870      	ldr	r0, [r6, #4]
10057332:	6980      	ldr	r0, [r0, #24]
10057334:	7800      	ldrb	r0, [r0, #0]
10057336:	07c0      	lsls	r0, r0, #31
10057338:	d112      	bne.n	10057360 <GAT_srv_attr_value_write+0x128>
1005733a:	2000      	movs	r0, #0
1005733c:	e00a      	b.n	10057354 <GAT_srv_attr_value_write+0x11c>
1005733e:	2003      	movs	r0, #3
10057340:	7038      	strb	r0, [r7, #0]
10057342:	2086      	movs	r0, #134	@ 0x86
10057344:	e006      	b.n	10057354 <GAT_srv_attr_value_write+0x11c>
10057346:	4621      	mov	r1, r4
10057348:	462a      	mov	r2, r5
1005734a:	463b      	mov	r3, r7
1005734c:	f000 f847 	bl	100573de <GAT_srv_attr_direct_value_write>
10057350:	e000      	b.n	10057354 <GAT_srv_attr_value_write+0x11c>
10057352:	2084      	movs	r0, #132	@ 0x84
10057354:	b009      	add	sp, #36	@ 0x24
10057356:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057358:	20fd      	movs	r0, #253	@ 0xfd
1005735a:	e7f1      	b.n	10057340 <GAT_srv_attr_value_write+0x108>
1005735c:	2013      	movs	r0, #19
1005735e:	e7ef      	b.n	10057340 <GAT_srv_attr_value_write+0x108>
10057360:	882e      	ldrh	r6, [r5, #0]
10057362:	4628      	mov	r0, r5
10057364:	f000 ff47 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10057368:	4602      	mov	r2, r0
1005736a:	a808      	add	r0, sp, #32
1005736c:	8800      	ldrh	r0, [r0, #0]
1005736e:	a906      	add	r1, sp, #24
10057370:	9000      	str	r0, [sp, #0]
10057372:	9101      	str	r1, [sp, #4]
10057374:	2002      	movs	r0, #2
10057376:	4631      	mov	r1, r6
10057378:	4623      	mov	r3, r4
1005737a:	f00a fd59 	bl	10061e30 <aci_gatt_srv_attribute_modified_event_push_noinline>
1005737e:	e7e9      	b.n	10057354 <GAT_srv_attr_value_write+0x11c>

10057380 <__arm_cp.14_0>:
10057380:	00002902 	.word	0x00002902

10057384 <__arm_cp.14_1>:
10057384:	00002b29 	.word	0x00002b29

10057388 <__arm_cp.14_2>:
10057388:	2000247c 	.word	0x2000247c

1005738c <GAT_srv_get_zip_val>:
1005738c:	b510      	push	{r4, lr}
1005738e:	4348      	muls	r0, r1
10057390:	08c4      	lsrs	r4, r0, #3
10057392:	b2a4      	uxth	r4, r4
10057394:	4294      	cmp	r4, r2
10057396:	d901      	bls.n	1005739c <GAT_srv_get_zip_val+0x10>
10057398:	2000      	movs	r0, #0
1005739a:	bd10      	pop	{r4, pc}
1005739c:	2207      	movs	r2, #7
1005739e:	4010      	ands	r0, r2
100573a0:	5d1a      	ldrb	r2, [r3, r4]
100573a2:	40c2      	lsrs	r2, r0
100573a4:	2020      	movs	r0, #32
100573a6:	1a41      	subs	r1, r0, r1
100573a8:	2000      	movs	r0, #0
100573aa:	43c0      	mvns	r0, r0
100573ac:	40c8      	lsrs	r0, r1
100573ae:	4010      	ands	r0, r2
100573b0:	bd10      	pop	{r4, pc}

100573b2 <GAT_srv_set_zip_val>:
100573b2:	b5b0      	push	{r4, r5, r7, lr}
100573b4:	4348      	muls	r0, r1
100573b6:	08c4      	lsrs	r4, r0, #3
100573b8:	b2a4      	uxth	r4, r4
100573ba:	429c      	cmp	r4, r3
100573bc:	d80e      	bhi.n	100573dc <GAT_srv_set_zip_val+0x2a>
100573be:	9b04      	ldr	r3, [sp, #16]
100573c0:	2507      	movs	r5, #7
100573c2:	4028      	ands	r0, r5
100573c4:	2520      	movs	r5, #32
100573c6:	1a69      	subs	r1, r5, r1
100573c8:	2500      	movs	r5, #0
100573ca:	43ed      	mvns	r5, r5
100573cc:	40cd      	lsrs	r5, r1
100573ce:	402a      	ands	r2, r5
100573d0:	4082      	lsls	r2, r0
100573d2:	4085      	lsls	r5, r0
100573d4:	5d18      	ldrb	r0, [r3, r4]
100573d6:	43a8      	bics	r0, r5
100573d8:	4310      	orrs	r0, r2
100573da:	5518      	strb	r0, [r3, r4]
100573dc:	bdb0      	pop	{r4, r5, r7, pc}

100573de <GAT_srv_attr_direct_value_write>:
100573de:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100573e0:	4616      	mov	r6, r2
100573e2:	460c      	mov	r4, r1
100573e4:	4605      	mov	r5, r0
100573e6:	6882      	ldr	r2, [r0, #8]
100573e8:	8881      	ldrh	r1, [r0, #4]
100573ea:	9300      	str	r3, [sp, #0]
100573ec:	ab02      	add	r3, sp, #8
100573ee:	4630      	mov	r0, r6
100573f0:	f7fe fc43 	bl	10055c7a <GAT_att_srv_extract_write_packet_data>
100573f4:	2800      	cmp	r0, #0
100573f6:	d000      	beq.n	100573fa <GAT_srv_attr_direct_value_write+0x1c>
100573f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100573fa:	7828      	ldrb	r0, [r5, #0]
100573fc:	0781      	lsls	r1, r0, #30
100573fe:	d403      	bmi.n	10057408 <GAT_srv_attr_direct_value_write+0x2a>
10057400:	88a9      	ldrh	r1, [r5, #4]
10057402:	aa02      	add	r2, sp, #8
10057404:	8011      	strh	r1, [r2, #0]
10057406:	e001      	b.n	1005740c <GAT_srv_attr_direct_value_write+0x2e>
10057408:	9902      	ldr	r1, [sp, #8]
1005740a:	8069      	strh	r1, [r5, #2]
1005740c:	07c0      	lsls	r0, r0, #31
1005740e:	d101      	bne.n	10057414 <GAT_srv_attr_direct_value_write+0x36>
10057410:	2000      	movs	r0, #0
10057412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057414:	8837      	ldrh	r7, [r6, #0]
10057416:	4630      	mov	r0, r6
10057418:	f000 feed 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
1005741c:	4602      	mov	r2, r0
1005741e:	a802      	add	r0, sp, #8
10057420:	8800      	ldrh	r0, [r0, #0]
10057422:	68a9      	ldr	r1, [r5, #8]
10057424:	9000      	str	r0, [sp, #0]
10057426:	9101      	str	r1, [sp, #4]
10057428:	2002      	movs	r0, #2
1005742a:	4639      	mov	r1, r7
1005742c:	4623      	mov	r3, r4
1005742e:	f00a fcff 	bl	10061e30 <aci_gatt_srv_attribute_modified_event_push_noinline>
10057432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10057434 <GAT_srv_set_cccd_val>:
10057434:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057436:	4614      	mov	r4, r2
10057438:	460d      	mov	r5, r1
1005743a:	f7fe f8f9 	bl	10055630 <GAT_att_cmn_get_conn_index>
1005743e:	6869      	ldr	r1, [r5, #4]
10057440:	6989      	ldr	r1, [r1, #24]
10057442:	888b      	ldrh	r3, [r1, #4]
10057444:	6889      	ldr	r1, [r1, #8]
10057446:	9100      	str	r1, [sp, #0]
10057448:	2103      	movs	r1, #3
1005744a:	400c      	ands	r4, r1
1005744c:	2102      	movs	r1, #2
1005744e:	4622      	mov	r2, r4
10057450:	f7ff ffaf 	bl	100573b2 <GAT_srv_set_zip_val>
10057454:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10057458 <GAT_srv_is_supported_grouping_type>:
10057458:	b570      	push	{r4, r5, r6, lr}
1005745a:	b08a      	sub	sp, #40	@ 0x28
1005745c:	4604      	mov	r4, r0
1005745e:	ad05      	add	r5, sp, #20
10057460:	a10d      	add	r1, pc, #52	@ (adr r1, 10057498 <GAT_srv_is_supported_grouping_type+0x40>)
10057462:	2614      	movs	r6, #20
10057464:	4628      	mov	r0, r5
10057466:	4632      	mov	r2, r6
10057468:	f00f f88b 	bl	10066582 <__aeabi_memcpy>
1005746c:	4668      	mov	r0, sp
1005746e:	a10f      	add	r1, pc, #60	@ (adr r1, 100574ac <GAT_srv_is_supported_grouping_type+0x54>)
10057470:	4632      	mov	r2, r6
10057472:	f00f f886 	bl	10066582 <__aeabi_memcpy>
10057476:	4620      	mov	r0, r4
10057478:	4629      	mov	r1, r5
1005747a:	f00a f84b 	bl	10061514 <UUID_cmp_128bits>
1005747e:	2800      	cmp	r0, #0
10057480:	d007      	beq.n	10057492 <GAT_srv_is_supported_grouping_type+0x3a>
10057482:	4669      	mov	r1, sp
10057484:	4620      	mov	r0, r4
10057486:	f00a f845 	bl	10061514 <UUID_cmp_128bits>
1005748a:	4601      	mov	r1, r0
1005748c:	4240      	negs	r0, r0
1005748e:	4148      	adcs	r0, r1
10057490:	e000      	b.n	10057494 <GAT_srv_is_supported_grouping_type+0x3c>
10057492:	2001      	movs	r0, #1
10057494:	b00a      	add	sp, #40	@ 0x28
10057496:	bd70      	pop	{r4, r5, r6, pc}
10057498:	5f9b34fb 	.word	0x5f9b34fb
1005749c:	80000080 	.word	0x80000080
100574a0:	00001000 	.word	0x00001000
100574a4:	00002800 	.word	0x00002800
100574a8:	00000010 	.word	0x00000010
100574ac:	5f9b34fb 	.word	0x5f9b34fb
100574b0:	80000080 	.word	0x80000080
100574b4:	00001000 	.word	0x00001000
100574b8:	00002801 	.word	0x00002801
100574bc:	00000010 	.word	0x00000010

100574c0 <GAT_srv_set_change_aware>:
100574c0:	b5e0      	push	{r5, r6, r7, lr}
100574c2:	aa01      	add	r2, sp, #4
100574c4:	21c2      	movs	r1, #194	@ 0xc2
100574c6:	8011      	strh	r1, [r2, #0]
100574c8:	8901      	ldrh	r1, [r0, #8]
100574ca:	9200      	str	r2, [sp, #0]
100574cc:	2001      	movs	r0, #1
100574ce:	2200      	movs	r2, #0
100574d0:	4b01      	ldr	r3, [pc, #4]	@ (100574d8 <__arm_cp.21_0>)
100574d2:	f7fd ff45 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
100574d6:	bd8c      	pop	{r2, r3, r7, pc}

100574d8 <__arm_cp.21_0>:
100574d8:	10055625 	.word	0x10055625

100574dc <GAT_srv_check_change_aware>:
100574dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100574de:	b087      	sub	sp, #28
100574e0:	4605      	mov	r5, r0
100574e2:	ac02      	add	r4, sp, #8
100574e4:	4927      	ldr	r1, [pc, #156]	@ (10057584 <__arm_cp.22_0>)
100574e6:	2214      	movs	r2, #20
100574e8:	4620      	mov	r0, r4
100574ea:	f00f f84a 	bl	10066582 <__aeabi_memcpy>
100574ee:	2001      	movs	r0, #1
100574f0:	4e25      	ldr	r6, [pc, #148]	@ (10057588 <__arm_cp.22_1>)
100574f2:	4631      	mov	r1, r6
100574f4:	4622      	mov	r2, r4
100574f6:	f000 f84d 	bl	10057594 <GAT_srv_find_by_type_attr_p>
100574fa:	2700      	movs	r7, #0
100574fc:	2800      	cmp	r0, #0
100574fe:	d03c      	beq.n	1005757a <GAT_srv_check_change_aware+0x9e>
10057500:	4601      	mov	r1, r0
10057502:	6828      	ldr	r0, [r5, #0]
10057504:	8882      	ldrh	r2, [r0, #4]
10057506:	0652      	lsls	r2, r2, #25
10057508:	d537      	bpl.n	1005757a <GAT_srv_check_change_aware+0x9e>
1005750a:	792a      	ldrb	r2, [r5, #4]
1005750c:	23fe      	movs	r3, #254	@ 0xfe
1005750e:	4013      	ands	r3, r2
10057510:	2486      	movs	r4, #134	@ 0x86
10057512:	2b04      	cmp	r3, #4
10057514:	d032      	beq.n	1005757c <GAT_srv_check_change_aware+0xa0>
10057516:	8900      	ldrh	r0, [r0, #8]
10057518:	2201      	movs	r2, #1
1005751a:	f000 f85b 	bl	100575d4 <GAT_srv_check_client_support_feature>
1005751e:	2881      	cmp	r0, #129	@ 0x81
10057520:	d02b      	beq.n	1005757a <GAT_srv_check_change_aware+0x9e>
10057522:	6828      	ldr	r0, [r5, #0]
10057524:	8881      	ldrh	r1, [r0, #4]
10057526:	060a      	lsls	r2, r1, #24
10057528:	d425      	bmi.n	10057576 <GAT_srv_check_change_aware+0x9a>
1005752a:	2780      	movs	r7, #128	@ 0x80
1005752c:	4339      	orrs	r1, r7
1005752e:	8081      	strh	r1, [r0, #4]
10057530:	7928      	ldrb	r0, [r5, #4]
10057532:	2802      	cmp	r0, #2
10057534:	d122      	bne.n	1005757c <GAT_srv_check_change_aware+0xa0>
10057536:	8928      	ldrh	r0, [r5, #8]
10057538:	2801      	cmp	r0, #1
1005753a:	d11f      	bne.n	1005757c <GAT_srv_check_change_aware+0xa0>
1005753c:	8968      	ldrh	r0, [r5, #10]
1005753e:	42b0      	cmp	r0, r6
10057540:	d11c      	bne.n	1005757c <GAT_srv_check_change_aware+0xa0>
10057542:	68ea      	ldr	r2, [r5, #12]
10057544:	7c10      	ldrb	r0, [r2, #16]
10057546:	2810      	cmp	r0, #16
10057548:	d118      	bne.n	1005757c <GAT_srv_check_change_aware+0xa0>
1005754a:	8990      	ldrh	r0, [r2, #12]
1005754c:	490f      	ldr	r1, [pc, #60]	@ (1005758c <__arm_cp.22_2>)
1005754e:	4288      	cmp	r0, r1
10057550:	d114      	bne.n	1005757c <GAT_srv_check_change_aware+0xa0>
10057552:	2001      	movs	r0, #1
10057554:	4631      	mov	r1, r6
10057556:	f000 f81d 	bl	10057594 <GAT_srv_find_by_type_attr_p>
1005755a:	2800      	cmp	r0, #0
1005755c:	d00e      	beq.n	1005757c <GAT_srv_check_change_aware+0xa0>
1005755e:	a801      	add	r0, sp, #4
10057560:	8007      	strh	r7, [r0, #0]
10057562:	6829      	ldr	r1, [r5, #0]
10057564:	8909      	ldrh	r1, [r1, #8]
10057566:	9000      	str	r0, [sp, #0]
10057568:	2001      	movs	r0, #1
1005756a:	2400      	movs	r4, #0
1005756c:	4b08      	ldr	r3, [pc, #32]	@ (10057590 <__arm_cp.22_3>)
1005756e:	4622      	mov	r2, r4
10057570:	f7fd fef6 	bl	10055360 <GAT_att_cmn_for_each_ch_descr>
10057574:	e002      	b.n	1005757c <GAT_srv_check_change_aware+0xa0>
10057576:	f7ff ffa3 	bl	100574c0 <GAT_srv_set_change_aware>
1005757a:	463c      	mov	r4, r7
1005757c:	4620      	mov	r0, r4
1005757e:	b007      	add	sp, #28
10057580:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057582:	46c0      	nop			@ (mov r8, r8)

10057584 <__arm_cp.22_0>:
10057584:	10068130 	.word	0x10068130

10057588 <__arm_cp.22_1>:
10057588:	0000ffff 	.word	0x0000ffff

1005758c <__arm_cp.22_2>:
1005758c:	00002b2a 	.word	0x00002b2a

10057590 <__arm_cp.22_3>:
10057590:	10055619 	.word	0x10055619

10057594 <GAT_srv_find_by_type_attr_p>:
10057594:	b5f0      	push	{r4, r5, r6, r7, lr}
10057596:	b085      	sub	sp, #20
10057598:	4614      	mov	r4, r2
1005759a:	460d      	mov	r5, r1
1005759c:	f00b feca 	bl	10063334 <GAT_att_db_find_from_handle>
100575a0:	4606      	mov	r6, r0
100575a2:	2000      	movs	r0, #0
100575a4:	2e00      	cmp	r6, #0
100575a6:	d012      	beq.n	100575ce <GAT_srv_find_by_type_attr_p+0x3a>
100575a8:	8871      	ldrh	r1, [r6, #2]
100575aa:	42a9      	cmp	r1, r5
100575ac:	d80f      	bhi.n	100575ce <GAT_srv_find_by_type_attr_p+0x3a>
100575ae:	466f      	mov	r7, sp
100575b0:	4630      	mov	r0, r6
100575b2:	4639      	mov	r1, r7
100575b4:	f7ff fc7e 	bl	10056eb4 <GAT_srv_get_attr_type>
100575b8:	4620      	mov	r0, r4
100575ba:	4639      	mov	r1, r7
100575bc:	f009 ff93 	bl	100614e6 <UUID_cmp>
100575c0:	2800      	cmp	r0, #0
100575c2:	d003      	beq.n	100575cc <GAT_srv_find_by_type_attr_p+0x38>
100575c4:	4630      	mov	r0, r6
100575c6:	f00b ff17 	bl	100633f8 <GAT_att_db_get_next>
100575ca:	e7e9      	b.n	100575a0 <GAT_srv_find_by_type_attr_p+0xc>
100575cc:	4630      	mov	r0, r6
100575ce:	b005      	add	sp, #20
100575d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100575d4 <GAT_srv_check_client_support_feature>:
100575d4:	b570      	push	{r4, r5, r6, lr}
100575d6:	b086      	sub	sp, #24
100575d8:	4614      	mov	r4, r2
100575da:	460e      	mov	r6, r1
100575dc:	4605      	mov	r5, r0
100575de:	a801      	add	r0, sp, #4
100575e0:	4910      	ldr	r1, [pc, #64]	@ (10057624 <__arm_cp.24_0>)
100575e2:	2214      	movs	r2, #20
100575e4:	f00e ffcd 	bl	10066582 <__aeabi_memcpy>
100575e8:	2e00      	cmp	r6, #0
100575ea:	d107      	bne.n	100575fc <GAT_srv_check_client_support_feature+0x28>
100575ec:	2001      	movs	r0, #1
100575ee:	490e      	ldr	r1, [pc, #56]	@ (10057628 <__arm_cp.24_1>)
100575f0:	aa01      	add	r2, sp, #4
100575f2:	f7ff ffcf 	bl	10057594 <GAT_srv_find_by_type_attr_p>
100575f6:	4606      	mov	r6, r0
100575f8:	2800      	cmp	r0, #0
100575fa:	d010      	beq.n	1005761e <GAT_srv_check_client_support_feature+0x4a>
100575fc:	4628      	mov	r0, r5
100575fe:	f7fe f817 	bl	10055630 <GAT_att_cmn_get_conn_index>
10057602:	6871      	ldr	r1, [r6, #4]
10057604:	6a09      	ldr	r1, [r1, #32]
10057606:	688b      	ldr	r3, [r1, #8]
10057608:	4908      	ldr	r1, [pc, #32]	@ (1005762c <__arm_cp.24_2>)
1005760a:	7ac9      	ldrb	r1, [r1, #11]
1005760c:	0849      	lsrs	r1, r1, #1
1005760e:	1c4a      	adds	r2, r1, #1
10057610:	2104      	movs	r1, #4
10057612:	f7ff febb 	bl	1005738c <GAT_srv_get_zip_val>
10057616:	4220      	tst	r0, r4
10057618:	d001      	beq.n	1005761e <GAT_srv_check_client_support_feature+0x4a>
1005761a:	2000      	movs	r0, #0
1005761c:	e000      	b.n	10057620 <GAT_srv_check_client_support_feature+0x4c>
1005761e:	2081      	movs	r0, #129	@ 0x81
10057620:	b006      	add	sp, #24
10057622:	bd70      	pop	{r4, r5, r6, pc}

10057624 <__arm_cp.24_0>:
10057624:	10068130 	.word	0x10068130

10057628 <__arm_cp.24_1>:
10057628:	0000ffff 	.word	0x0000ffff

1005762c <__arm_cp.24_2>:
1005762c:	2000247c 	.word	0x2000247c

10057630 <GAT_srv_get_attribute_handle>:
10057630:	b580      	push	{r7, lr}
10057632:	f00b fea9 	bl	10063388 <GAT_att_db_find_by_def>
10057636:	2800      	cmp	r0, #0
10057638:	d001      	beq.n	1005763e <GAT_srv_get_attribute_handle+0xe>
1005763a:	8840      	ldrh	r0, [r0, #2]
1005763c:	bd80      	pop	{r7, pc}
1005763e:	2000      	movs	r0, #0
10057640:	bd80      	pop	{r7, pc}
	...

10057644 <GAT_srv_get_cccd_attr_p>:
10057644:	b570      	push	{r4, r5, r6, lr}
10057646:	b08a      	sub	sp, #40	@ 0x28
10057648:	4605      	mov	r5, r0
1005764a:	a805      	add	r0, sp, #20
1005764c:	a110      	add	r1, pc, #64	@ (adr r1, 10057690 <GAT_srv_get_cccd_attr_p+0x4c>)
1005764e:	2214      	movs	r2, #20
10057650:	f00e ff97 	bl	10066582 <__aeabi_memcpy>
10057654:	7828      	ldrb	r0, [r5, #0]
10057656:	21fe      	movs	r1, #254	@ 0xfe
10057658:	4001      	ands	r1, r0
1005765a:	2400      	movs	r4, #0
1005765c:	2902      	cmp	r1, #2
1005765e:	d114      	bne.n	1005768a <GAT_srv_get_cccd_attr_p+0x46>
10057660:	4628      	mov	r0, r5
10057662:	f00b fec9 	bl	100633f8 <GAT_att_db_get_next>
10057666:	4605      	mov	r5, r0
10057668:	2800      	cmp	r0, #0
1005766a:	d00e      	beq.n	1005768a <GAT_srv_get_cccd_attr_p+0x46>
1005766c:	7828      	ldrb	r0, [r5, #0]
1005766e:	2802      	cmp	r0, #2
10057670:	d00b      	beq.n	1005768a <GAT_srv_get_cccd_attr_p+0x46>
10057672:	466e      	mov	r6, sp
10057674:	4628      	mov	r0, r5
10057676:	4631      	mov	r1, r6
10057678:	f7ff fc1c 	bl	10056eb4 <GAT_srv_get_attr_type>
1005767c:	a805      	add	r0, sp, #20
1005767e:	4631      	mov	r1, r6
10057680:	f009 ff31 	bl	100614e6 <UUID_cmp>
10057684:	2800      	cmp	r0, #0
10057686:	d1eb      	bne.n	10057660 <GAT_srv_get_cccd_attr_p+0x1c>
10057688:	462c      	mov	r4, r5
1005768a:	4620      	mov	r0, r4
1005768c:	b00a      	add	sp, #40	@ 0x28
1005768e:	bd70      	pop	{r4, r5, r6, pc}
10057690:	5f9b34fb 	.word	0x5f9b34fb
10057694:	80000080 	.word	0x80000080
10057698:	00001000 	.word	0x00001000
1005769c:	00002902 	.word	0x00002902
100576a0:	00000010 	.word	0x00000010

100576a4 <GAT_srv_get_cccd_val>:
100576a4:	b510      	push	{r4, lr}
100576a6:	460c      	mov	r4, r1
100576a8:	f7fd ffc2 	bl	10055630 <GAT_att_cmn_get_conn_index>
100576ac:	6861      	ldr	r1, [r4, #4]
100576ae:	6989      	ldr	r1, [r1, #24]
100576b0:	688b      	ldr	r3, [r1, #8]
100576b2:	888a      	ldrh	r2, [r1, #4]
100576b4:	2102      	movs	r1, #2
100576b6:	f7ff fe69 	bl	1005738c <GAT_srv_get_zip_val>
100576ba:	bd10      	pop	{r4, pc}

100576bc <GAT_srv_aes_cmac_append>:
100576bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100576be:	b085      	sub	sp, #20
100576c0:	9203      	str	r2, [sp, #12]
100576c2:	460c      	mov	r4, r1
100576c4:	2101      	movs	r1, #1
100576c6:	0209      	lsls	r1, r1, #8
100576c8:	1841      	adds	r1, r0, r1
100576ca:	9104      	str	r1, [sp, #16]
100576cc:	9002      	str	r0, [sp, #8]
100576ce:	30e0      	adds	r0, #224	@ 0xe0
100576d0:	9001      	str	r0, [sp, #4]
100576d2:	0420      	lsls	r0, r4, #16
100576d4:	d023      	beq.n	1005771e <GAT_srv_aes_cmac_append+0x62>
100576d6:	9804      	ldr	r0, [sp, #16]
100576d8:	8800      	ldrh	r0, [r0, #0]
100576da:	2810      	cmp	r0, #16
100576dc:	d107      	bne.n	100576ee <GAT_srv_aes_cmac_append+0x32>
100576de:	2210      	movs	r2, #16
100576e0:	9802      	ldr	r0, [sp, #8]
100576e2:	9901      	ldr	r1, [sp, #4]
100576e4:	f7f9 fd42 	bl	1005116c <BLEPLAT_AesCMACEncryptAppend>
100576e8:	2000      	movs	r0, #0
100576ea:	9904      	ldr	r1, [sp, #16]
100576ec:	8008      	strh	r0, [r1, #0]
100576ee:	2110      	movs	r1, #16
100576f0:	1a0d      	subs	r5, r1, r0
100576f2:	b2a9      	uxth	r1, r5
100576f4:	b2a2      	uxth	r2, r4
100576f6:	4291      	cmp	r1, r2
100576f8:	d300      	bcc.n	100576fc <GAT_srv_aes_cmac_append+0x40>
100576fa:	4625      	mov	r5, r4
100576fc:	b2af      	uxth	r7, r5
100576fe:	9902      	ldr	r1, [sp, #8]
10057700:	1808      	adds	r0, r1, r0
10057702:	30e0      	adds	r0, #224	@ 0xe0
10057704:	9e03      	ldr	r6, [sp, #12]
10057706:	4631      	mov	r1, r6
10057708:	463a      	mov	r2, r7
1005770a:	f7f9 fcc5 	bl	10051098 <BLEPLAT_MemCpy>
1005770e:	9904      	ldr	r1, [sp, #16]
10057710:	8808      	ldrh	r0, [r1, #0]
10057712:	1828      	adds	r0, r5, r0
10057714:	8008      	strh	r0, [r1, #0]
10057716:	1b64      	subs	r4, r4, r5
10057718:	19f6      	adds	r6, r6, r7
1005771a:	9603      	str	r6, [sp, #12]
1005771c:	e7d9      	b.n	100576d2 <GAT_srv_aes_cmac_append+0x16>
1005771e:	b005      	add	sp, #20
10057720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10057724 <GAT_srv_add_service>:
10057724:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057726:	4604      	mov	r4, r0
10057728:	f000 f89c 	bl	10057864 <GAT_srv_db_update_allowed>
1005772c:	250c      	movs	r5, #12
1005772e:	2800      	cmp	r0, #0
10057730:	d025      	beq.n	1005777e <GAT_srv_add_service+0x5a>
10057732:	2612      	movs	r6, #18
10057734:	2c00      	cmp	r4, #0
10057736:	d023      	beq.n	10057780 <GAT_srv_add_service+0x5c>
10057738:	7d20      	ldrb	r0, [r4, #20]
1005773a:	1e40      	subs	r0, r0, #1
1005773c:	2801      	cmp	r0, #1
1005773e:	d81f      	bhi.n	10057780 <GAT_srv_add_service+0x5c>
10057740:	7c20      	ldrb	r0, [r4, #16]
10057742:	2880      	cmp	r0, #128	@ 0x80
10057744:	d01e      	beq.n	10057784 <GAT_srv_add_service+0x60>
10057746:	2810      	cmp	r0, #16
10057748:	d11a      	bne.n	10057780 <GAT_srv_add_service+0x5c>
1005774a:	89a0      	ldrh	r0, [r4, #12]
1005774c:	2101      	movs	r1, #1
1005774e:	4388      	bics	r0, r1
10057750:	2103      	movs	r1, #3
10057752:	02c9      	lsls	r1, r1, #11
10057754:	4288      	cmp	r0, r1
10057756:	d115      	bne.n	10057784 <GAT_srv_add_service+0x60>
10057758:	2001      	movs	r0, #1
1005775a:	f00b fdeb 	bl	10063334 <GAT_att_db_find_from_handle>
1005775e:	2800      	cmp	r0, #0
10057760:	d010      	beq.n	10057784 <GAT_srv_add_service+0x60>
10057762:	7801      	ldrb	r1, [r0, #0]
10057764:	2900      	cmp	r1, #0
10057766:	d107      	bne.n	10057778 <GAT_srv_add_service+0x54>
10057768:	6841      	ldr	r1, [r0, #4]
1005776a:	7c0a      	ldrb	r2, [r1, #16]
1005776c:	2a10      	cmp	r2, #16
1005776e:	d103      	bne.n	10057778 <GAT_srv_add_service+0x54>
10057770:	8989      	ldrh	r1, [r1, #12]
10057772:	89a2      	ldrh	r2, [r4, #12]
10057774:	428a      	cmp	r2, r1
10057776:	d002      	beq.n	1005777e <GAT_srv_add_service+0x5a>
10057778:	f00b fe3e 	bl	100633f8 <GAT_att_db_get_next>
1005777c:	e7ef      	b.n	1005775e <GAT_srv_add_service+0x3a>
1005777e:	462e      	mov	r6, r5
10057780:	4630      	mov	r0, r6
10057782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057784:	2000      	movs	r0, #0
10057786:	f00b fecd 	bl	10063524 <GAT_att_db_find_last_attr_of_type>
1005778a:	2800      	cmp	r0, #0
1005778c:	d006      	beq.n	1005779c <GAT_srv_add_service+0x78>
1005778e:	6841      	ldr	r1, [r0, #4]
10057790:	8ac9      	ldrh	r1, [r1, #22]
10057792:	2900      	cmp	r1, #0
10057794:	d004      	beq.n	100577a0 <GAT_srv_add_service+0x7c>
10057796:	8840      	ldrh	r0, [r0, #2]
10057798:	1840      	adds	r0, r0, r1
1005779a:	e004      	b.n	100577a6 <GAT_srv_add_service+0x82>
1005779c:	2001      	movs	r0, #1
1005779e:	e002      	b.n	100577a6 <GAT_srv_add_service+0x82>
100577a0:	f00b fe6e 	bl	10063480 <GAT_att_db_get_last_handle>
100577a4:	1c40      	adds	r0, r0, #1
100577a6:	b282      	uxth	r2, r0
100577a8:	2600      	movs	r6, #0
100577aa:	4630      	mov	r0, r6
100577ac:	4631      	mov	r1, r6
100577ae:	4623      	mov	r3, r4
100577b0:	f00b fd44 	bl	1006323c <GAT_att_db_insert>
100577b4:	2800      	cmp	r0, #0
100577b6:	d020      	beq.n	100577fa <GAT_srv_add_service+0xd6>
100577b8:	43f7      	mvns	r7, r6
100577ba:	8ae1      	ldrh	r1, [r4, #22]
100577bc:	1e49      	subs	r1, r1, #1
100577be:	9102      	str	r1, [sp, #8]
100577c0:	9000      	str	r0, [sp, #0]
100577c2:	9401      	str	r4, [sp, #4]
100577c4:	1c7f      	adds	r7, r7, #1
100577c6:	7e21      	ldrb	r1, [r4, #24]
100577c8:	428f      	cmp	r7, r1
100577ca:	d218      	bcs.n	100577fe <GAT_srv_add_service+0xda>
100577cc:	8ae1      	ldrh	r1, [r4, #22]
100577ce:	2900      	cmp	r1, #0
100577d0:	d004      	beq.n	100577dc <GAT_srv_add_service+0xb8>
100577d2:	9a02      	ldr	r2, [sp, #8]
100577d4:	0411      	lsls	r1, r2, #16
100577d6:	d03a      	beq.n	1005784e <GAT_srv_add_service+0x12a>
100577d8:	1e52      	subs	r2, r2, #1
100577da:	9202      	str	r2, [sp, #8]
100577dc:	1d35      	adds	r5, r6, #4
100577de:	1c40      	adds	r0, r0, #1
100577e0:	9c01      	ldr	r4, [sp, #4]
100577e2:	69e1      	ldr	r1, [r4, #28]
100577e4:	598b      	ldr	r3, [r1, r6]
100577e6:	b282      	uxth	r2, r0
100577e8:	2001      	movs	r0, #1
100577ea:	2100      	movs	r1, #0
100577ec:	f00b fd26 	bl	1006323c <GAT_att_db_insert>
100577f0:	2800      	cmp	r0, #0
100577f2:	462e      	mov	r6, r5
100577f4:	d1e6      	bne.n	100577c4 <GAT_srv_add_service+0xa0>
100577f6:	2687      	movs	r6, #135	@ 0x87
100577f8:	e02e      	b.n	10057858 <GAT_srv_add_service+0x134>
100577fa:	2687      	movs	r6, #135	@ 0x87
100577fc:	e7c0      	b.n	10057780 <GAT_srv_add_service+0x5c>
100577fe:	4818      	ldr	r0, [pc, #96]	@ (10057860 <__arm_cp.0_0>)
10057800:	6800      	ldr	r0, [r0, #0]
10057802:	215c      	movs	r1, #92	@ 0x5c
10057804:	5c42      	ldrb	r2, [r0, r1]
10057806:	2302      	movs	r3, #2
10057808:	4313      	orrs	r3, r2
1005780a:	5443      	strb	r3, [r0, r1]
1005780c:	200a      	movs	r0, #10
1005780e:	f009 fcd9 	bl	100611c4 <tsk_notify_idx>
10057812:	f7f8 fe5a 	bl	100504ca <BLE_STACK_ProcessRequest>
10057816:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10057818:	2600      	movs	r6, #0
1005781a:	2800      	cmp	r0, #0
1005781c:	d0b0      	beq.n	10057780 <GAT_srv_add_service+0x5c>
1005781e:	2020      	movs	r0, #32
10057820:	5c20      	ldrb	r0, [r4, r0]
10057822:	2800      	cmp	r0, #0
10057824:	d0ac      	beq.n	10057780 <GAT_srv_add_service+0x5c>
10057826:	4621      	mov	r1, r4
10057828:	3120      	adds	r1, #32
1005782a:	9102      	str	r1, [sp, #8]
1005782c:	2500      	movs	r5, #0
1005782e:	462f      	mov	r7, r5
10057830:	9501      	str	r5, [sp, #4]
10057832:	4285      	cmp	r5, r0
10057834:	9900      	ldr	r1, [sp, #0]
10057836:	d20c      	bcs.n	10057852 <GAT_srv_add_service+0x12e>
10057838:	6a60      	ldr	r0, [r4, #36]	@ 0x24
1005783a:	19c0      	adds	r0, r0, r7
1005783c:	f000 f822 	bl	10057884 <GAT_srv_add_characteristic>
10057840:	2800      	cmp	r0, #0
10057842:	d108      	bne.n	10057856 <GAT_srv_add_service+0x132>
10057844:	3724      	adds	r7, #36	@ 0x24
10057846:	9802      	ldr	r0, [sp, #8]
10057848:	7800      	ldrb	r0, [r0, #0]
1005784a:	1c6d      	adds	r5, r5, #1
1005784c:	e7f1      	b.n	10057832 <GAT_srv_add_service+0x10e>
1005784e:	2612      	movs	r6, #18
10057850:	e002      	b.n	10057858 <GAT_srv_add_service+0x134>
10057852:	9e01      	ldr	r6, [sp, #4]
10057854:	e794      	b.n	10057780 <GAT_srv_add_service+0x5c>
10057856:	4606      	mov	r6, r0
10057858:	9800      	ldr	r0, [sp, #0]
1005785a:	f000 f8a3 	bl	100579a4 <GAT_srv_rm_service>
1005785e:	e78f      	b.n	10057780 <GAT_srv_add_service+0x5c>

10057860 <__arm_cp.0_0>:
10057860:	20002420 	.word	0x20002420

10057864 <GAT_srv_db_update_allowed>:
10057864:	b510      	push	{r4, lr}
10057866:	f7fe fac3 	bl	10055df0 <GAT_att_srv_request_user_pending>
1005786a:	2400      	movs	r4, #0
1005786c:	2800      	cmp	r0, #0
1005786e:	d106      	bne.n	1005787e <GAT_srv_db_update_allowed+0x1a>
10057870:	f7fe faac 	bl	10055dcc <GAT_att_srv_confirmation_pending>
10057874:	2800      	cmp	r0, #0
10057876:	d102      	bne.n	1005787e <GAT_srv_db_update_allowed+0x1a>
10057878:	f7fe fad2 	bl	10055e20 <GAT_att_srv_flush_user_pending_list>
1005787c:	2401      	movs	r4, #1
1005787e:	4620      	mov	r0, r4
10057880:	bd10      	pop	{r4, pc}
	...

10057884 <GAT_srv_add_characteristic>:
10057884:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057886:	460e      	mov	r6, r1
10057888:	4604      	mov	r4, r0
1005788a:	f7ff ffeb 	bl	10057864 <GAT_srv_db_update_allowed>
1005788e:	2800      	cmp	r0, #0
10057890:	d066      	beq.n	10057960 <GAT_srv_add_characteristic+0xdc>
10057892:	2512      	movs	r5, #18
10057894:	2c00      	cmp	r4, #0
10057896:	d064      	beq.n	10057962 <GAT_srv_add_characteristic+0xde>
10057898:	7d20      	ldrb	r0, [r4, #20]
1005789a:	2880      	cmp	r0, #128	@ 0x80
1005789c:	d013      	beq.n	100578c6 <GAT_srv_add_characteristic+0x42>
1005789e:	2810      	cmp	r0, #16
100578a0:	d15f      	bne.n	10057962 <GAT_srv_add_characteristic+0xde>
100578a2:	8a20      	ldrh	r0, [r4, #16]
100578a4:	493c      	ldr	r1, [pc, #240]	@ (10057998 <__arm_cp.2_0>)
100578a6:	4288      	cmp	r0, r1
100578a8:	d10d      	bne.n	100578c6 <GAT_srv_add_characteristic+0x42>
100578aa:	6a20      	ldr	r0, [r4, #32]
100578ac:	2800      	cmp	r0, #0
100578ae:	d058      	beq.n	10057962 <GAT_srv_add_characteristic+0xde>
100578b0:	8882      	ldrh	r2, [r0, #4]
100578b2:	493a      	ldr	r1, [pc, #232]	@ (1005799c <__arm_cp.2_1>)
100578b4:	7ac9      	ldrb	r1, [r1, #11]
100578b6:	0849      	lsrs	r1, r1, #1
100578b8:	1c49      	adds	r1, r1, #1
100578ba:	428a      	cmp	r2, r1
100578bc:	d351      	bcc.n	10057962 <GAT_srv_add_characteristic+0xde>
100578be:	6880      	ldr	r0, [r0, #8]
100578c0:	2100      	movs	r1, #0
100578c2:	f7f9 fbf9 	bl	100510b8 <BLEPLAT_MemSet>
100578c6:	78a0      	ldrb	r0, [r4, #2]
100578c8:	2124      	movs	r1, #36	@ 0x24
100578ca:	4208      	tst	r0, r1
100578cc:	d003      	beq.n	100578d6 <GAT_srv_add_characteristic+0x52>
100578ce:	7860      	ldrb	r0, [r4, #1]
100578d0:	1fc0      	subs	r0, r0, #7
100578d2:	2809      	cmp	r0, #9
100578d4:	d845      	bhi.n	10057962 <GAT_srv_add_characteristic+0xde>
100578d6:	4630      	mov	r0, r6
100578d8:	f00b fd04 	bl	100632e4 <GAT_att_db_find_by_handle>
100578dc:	2800      	cmp	r0, #0
100578de:	d040      	beq.n	10057962 <GAT_srv_add_characteristic+0xde>
100578e0:	4606      	mov	r6, r0
100578e2:	7800      	ldrb	r0, [r0, #0]
100578e4:	2800      	cmp	r0, #0
100578e6:	d13c      	bne.n	10057962 <GAT_srv_add_characteristic+0xde>
100578e8:	7e20      	ldrb	r0, [r4, #24]
100578ea:	1c81      	adds	r1, r0, #2
100578ec:	4630      	mov	r0, r6
100578ee:	f000 f883 	bl	100579f8 <GAT_srv_check_group_size>
100578f2:	4605      	mov	r5, r0
100578f4:	2800      	cmp	r0, #0
100578f6:	d134      	bne.n	10057962 <GAT_srv_add_characteristic+0xde>
100578f8:	4630      	mov	r0, r6
100578fa:	f7ff fb03 	bl	10056f04 <GAT_srv_get_att_group_end_handle>
100578fe:	4605      	mov	r5, r0
10057900:	f00b fcf0 	bl	100632e4 <GAT_att_db_find_by_handle>
10057904:	4601      	mov	r1, r0
10057906:	1c68      	adds	r0, r5, #1
10057908:	b286      	uxth	r6, r0
1005790a:	2702      	movs	r7, #2
1005790c:	4638      	mov	r0, r7
1005790e:	4632      	mov	r2, r6
10057910:	4623      	mov	r3, r4
10057912:	f00b fc93 	bl	1006323c <GAT_att_db_insert>
10057916:	42b0      	cmp	r0, r6
10057918:	d125      	bne.n	10057966 <GAT_srv_add_characteristic+0xe2>
1005791a:	4630      	mov	r0, r6
1005791c:	f00b fce2 	bl	100632e4 <GAT_att_db_find_by_handle>
10057920:	4601      	mov	r1, r0
10057922:	1ca8      	adds	r0, r5, #2
10057924:	b282      	uxth	r2, r0
10057926:	2003      	movs	r0, #3
10057928:	4623      	mov	r3, r4
1005792a:	f00b fc87 	bl	1006323c <GAT_att_db_insert>
1005792e:	2800      	cmp	r0, #0
10057930:	d029      	beq.n	10057986 <GAT_srv_add_characteristic+0x102>
10057932:	9701      	str	r7, [sp, #4]
10057934:	9602      	str	r6, [sp, #8]
10057936:	69e0      	ldr	r0, [r4, #28]
10057938:	2800      	cmp	r0, #0
1005793a:	d016      	beq.n	1005796a <GAT_srv_add_characteristic+0xe6>
1005793c:	7e20      	ldrb	r0, [r4, #24]
1005793e:	2800      	cmp	r0, #0
10057940:	d013      	beq.n	1005796a <GAT_srv_add_characteristic+0xe6>
10057942:	2600      	movs	r6, #0
10057944:	4637      	mov	r7, r6
10057946:	4287      	cmp	r7, r0
10057948:	d20f      	bcs.n	1005796a <GAT_srv_add_characteristic+0xe6>
1005794a:	69e0      	ldr	r0, [r4, #28]
1005794c:	1980      	adds	r0, r0, r6
1005794e:	9902      	ldr	r1, [sp, #8]
10057950:	f000 f86c 	bl	10057a2c <GAT_srv_add_char_descriptor>
10057954:	2800      	cmp	r0, #0
10057956:	d118      	bne.n	1005798a <GAT_srv_add_characteristic+0x106>
10057958:	361c      	adds	r6, #28
1005795a:	7e20      	ldrb	r0, [r4, #24]
1005795c:	1c7f      	adds	r7, r7, #1
1005795e:	e7f2      	b.n	10057946 <GAT_srv_add_characteristic+0xc2>
10057960:	250c      	movs	r5, #12
10057962:	4628      	mov	r0, r5
10057964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057966:	2587      	movs	r5, #135	@ 0x87
10057968:	e7fb      	b.n	10057962 <GAT_srv_add_characteristic+0xde>
1005796a:	480d      	ldr	r0, [pc, #52]	@ (100579a0 <__arm_cp.2_2>)
1005796c:	6800      	ldr	r0, [r0, #0]
1005796e:	215c      	movs	r1, #92	@ 0x5c
10057970:	5c42      	ldrb	r2, [r0, r1]
10057972:	9b01      	ldr	r3, [sp, #4]
10057974:	431a      	orrs	r2, r3
10057976:	5442      	strb	r2, [r0, r1]
10057978:	200a      	movs	r0, #10
1005797a:	f009 fc23 	bl	100611c4 <tsk_notify_idx>
1005797e:	f7f8 fda4 	bl	100504ca <BLE_STACK_ProcessRequest>
10057982:	2500      	movs	r5, #0
10057984:	e7ed      	b.n	10057962 <GAT_srv_add_characteristic+0xde>
10057986:	2587      	movs	r5, #135	@ 0x87
10057988:	e001      	b.n	1005798e <GAT_srv_add_characteristic+0x10a>
1005798a:	4605      	mov	r5, r0
1005798c:	9e02      	ldr	r6, [sp, #8]
1005798e:	4630      	mov	r0, r6
10057990:	f000 f8d4 	bl	10057b3c <GAT_srv_rm_characteristic>
10057994:	e7e5      	b.n	10057962 <GAT_srv_add_characteristic+0xde>
10057996:	46c0      	nop			@ (mov r8, r8)

10057998 <__arm_cp.2_0>:
10057998:	00002b29 	.word	0x00002b29

1005799c <__arm_cp.2_1>:
1005799c:	2000247c 	.word	0x2000247c

100579a0 <__arm_cp.2_2>:
100579a0:	20002420 	.word	0x20002420

100579a4 <GAT_srv_rm_service>:
100579a4:	b510      	push	{r4, lr}
100579a6:	4604      	mov	r4, r0
100579a8:	f7ff ff5c 	bl	10057864 <GAT_srv_db_update_allowed>
100579ac:	2800      	cmp	r0, #0
100579ae:	d00a      	beq.n	100579c6 <GAT_srv_rm_service+0x22>
100579b0:	4620      	mov	r0, r4
100579b2:	f00b fc97 	bl	100632e4 <GAT_att_db_find_by_handle>
100579b6:	4601      	mov	r1, r0
100579b8:	2012      	movs	r0, #18
100579ba:	2900      	cmp	r1, #0
100579bc:	d002      	beq.n	100579c4 <GAT_srv_rm_service+0x20>
100579be:	780a      	ldrb	r2, [r1, #0]
100579c0:	2a00      	cmp	r2, #0
100579c2:	d002      	beq.n	100579ca <GAT_srv_rm_service+0x26>
100579c4:	bd10      	pop	{r4, pc}
100579c6:	200c      	movs	r0, #12
100579c8:	bd10      	pop	{r4, pc}
100579ca:	4608      	mov	r0, r1
100579cc:	f00b fd28 	bl	10063420 <GAT_att_db_get_last_group_handle>
100579d0:	4601      	mov	r1, r0
100579d2:	4620      	mov	r0, r4
100579d4:	f00b fd64 	bl	100634a0 <GAT_att_db_rm_att_range>
100579d8:	4806      	ldr	r0, [pc, #24]	@ (100579f4 <__arm_cp.3_0>)
100579da:	6800      	ldr	r0, [r0, #0]
100579dc:	215c      	movs	r1, #92	@ 0x5c
100579de:	5c42      	ldrb	r2, [r0, r1]
100579e0:	2302      	movs	r3, #2
100579e2:	4313      	orrs	r3, r2
100579e4:	5443      	strb	r3, [r0, r1]
100579e6:	200a      	movs	r0, #10
100579e8:	f009 fbec 	bl	100611c4 <tsk_notify_idx>
100579ec:	f7f8 fd6d 	bl	100504ca <BLE_STACK_ProcessRequest>
100579f0:	2000      	movs	r0, #0
100579f2:	bd10      	pop	{r4, pc}

100579f4 <__arm_cp.3_0>:
100579f4:	20002420 	.word	0x20002420

100579f8 <GAT_srv_check_group_size>:
100579f8:	b5b0      	push	{r4, r5, r7, lr}
100579fa:	460d      	mov	r5, r1
100579fc:	4604      	mov	r4, r0
100579fe:	f7ff fa81 	bl	10056f04 <GAT_srv_get_att_group_end_handle>
10057a02:	6861      	ldr	r1, [r4, #4]
10057a04:	8ac9      	ldrh	r1, [r1, #22]
10057a06:	2900      	cmp	r1, #0
10057a08:	d008      	beq.n	10057a1c <GAT_srv_check_group_size+0x24>
10057a0a:	43c0      	mvns	r0, r0
10057a0c:	1808      	adds	r0, r1, r0
10057a0e:	8861      	ldrh	r1, [r4, #2]
10057a10:	1840      	adds	r0, r0, r1
10057a12:	b280      	uxth	r0, r0
10057a14:	42a8      	cmp	r0, r5
10057a16:	d306      	bcc.n	10057a26 <GAT_srv_check_group_size+0x2e>
10057a18:	2000      	movs	r0, #0
10057a1a:	bdb0      	pop	{r4, r5, r7, pc}
10057a1c:	2000      	movs	r0, #0
10057a1e:	f00b fd81 	bl	10063524 <GAT_att_db_find_last_attr_of_type>
10057a22:	42a0      	cmp	r0, r4
10057a24:	d0f8      	beq.n	10057a18 <GAT_srv_check_group_size+0x20>
10057a26:	200c      	movs	r0, #12
10057a28:	bdb0      	pop	{r4, r5, r7, pc}
	...

10057a2c <GAT_srv_add_char_descriptor>:
10057a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057a2e:	460e      	mov	r6, r1
10057a30:	4604      	mov	r4, r0
10057a32:	f7ff ff17 	bl	10057864 <GAT_srv_db_update_allowed>
10057a36:	2800      	cmp	r0, #0
10057a38:	d075      	beq.n	10057b26 <GAT_srv_add_char_descriptor+0xfa>
10057a3a:	2512      	movs	r5, #18
10057a3c:	2c00      	cmp	r4, #0
10057a3e:	d073      	beq.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057a40:	7d20      	ldrb	r0, [r4, #20]
10057a42:	2880      	cmp	r0, #128	@ 0x80
10057a44:	d001      	beq.n	10057a4a <GAT_srv_add_char_descriptor+0x1e>
10057a46:	2810      	cmp	r0, #16
10057a48:	d16e      	bne.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057a4a:	2810      	cmp	r0, #16
10057a4c:	d108      	bne.n	10057a60 <GAT_srv_add_char_descriptor+0x34>
10057a4e:	8a21      	ldrh	r1, [r4, #16]
10057a50:	2229      	movs	r2, #41	@ 0x29
10057a52:	0212      	lsls	r2, r2, #8
10057a54:	1c92      	adds	r2, r2, #2
10057a56:	4291      	cmp	r1, r2
10057a58:	d102      	bne.n	10057a60 <GAT_srv_add_char_descriptor+0x34>
10057a5a:	69a1      	ldr	r1, [r4, #24]
10057a5c:	2900      	cmp	r1, #0
10057a5e:	d063      	beq.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057a60:	78a1      	ldrb	r1, [r4, #2]
10057a62:	2224      	movs	r2, #36	@ 0x24
10057a64:	4211      	tst	r1, r2
10057a66:	d003      	beq.n	10057a70 <GAT_srv_add_char_descriptor+0x44>
10057a68:	7862      	ldrb	r2, [r4, #1]
10057a6a:	1fd2      	subs	r2, r2, #7
10057a6c:	2a09      	cmp	r2, #9
10057a6e:	d85b      	bhi.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057a70:	2810      	cmp	r0, #16
10057a72:	d115      	bne.n	10057aa0 <GAT_srv_add_char_descriptor+0x74>
10057a74:	8a20      	ldrh	r0, [r4, #16]
10057a76:	4a2f      	ldr	r2, [pc, #188]	@ (10057b34 <__arm_cp.7_0>)
10057a78:	1882      	adds	r2, r0, r2
10057a7a:	2a05      	cmp	r2, #5
10057a7c:	d810      	bhi.n	10057aa0 <GAT_srv_add_char_descriptor+0x74>
10057a7e:	2301      	movs	r3, #1
10057a80:	4093      	lsls	r3, r2
10057a82:	2231      	movs	r2, #49	@ 0x31
10057a84:	4213      	tst	r3, r2
10057a86:	d00b      	beq.n	10057aa0 <GAT_srv_add_char_descriptor+0x74>
10057a88:	7822      	ldrb	r2, [r4, #0]
10057a8a:	2a01      	cmp	r2, #1
10057a8c:	d14c      	bne.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057a8e:	2900      	cmp	r1, #0
10057a90:	d14a      	bne.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057a92:	2129      	movs	r1, #41	@ 0x29
10057a94:	0209      	lsls	r1, r1, #8
10057a96:	4288      	cmp	r0, r1
10057a98:	d102      	bne.n	10057aa0 <GAT_srv_add_char_descriptor+0x74>
10057a9a:	69a0      	ldr	r0, [r4, #24]
10057a9c:	2800      	cmp	r0, #0
10057a9e:	d043      	beq.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057aa0:	4630      	mov	r0, r6
10057aa2:	f00b fc1f 	bl	100632e4 <GAT_att_db_find_by_handle>
10057aa6:	2800      	cmp	r0, #0
10057aa8:	d03e      	beq.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057aaa:	4607      	mov	r7, r0
10057aac:	7800      	ldrb	r0, [r0, #0]
10057aae:	2802      	cmp	r0, #2
10057ab0:	d13a      	bne.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057ab2:	2500      	movs	r5, #0
10057ab4:	4628      	mov	r0, r5
10057ab6:	4631      	mov	r1, r6
10057ab8:	f00b fd4a 	bl	10063550 <GAT_att_db_reverse_find_attr_of_type>
10057abc:	2800      	cmp	r0, #0
10057abe:	d035      	beq.n	10057b2c <GAT_srv_add_char_descriptor+0x100>
10057ac0:	462e      	mov	r6, r5
10057ac2:	2101      	movs	r1, #1
10057ac4:	f7ff ff98 	bl	100579f8 <GAT_srv_check_group_size>
10057ac8:	4605      	mov	r5, r0
10057aca:	2800      	cmp	r0, #0
10057acc:	d12c      	bne.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057ace:	4638      	mov	r0, r7
10057ad0:	f7ff fa18 	bl	10056f04 <GAT_srv_get_att_group_end_handle>
10057ad4:	4605      	mov	r5, r0
10057ad6:	f00b fc05 	bl	100632e4 <GAT_att_db_find_by_handle>
10057ada:	4601      	mov	r1, r0
10057adc:	1c6d      	adds	r5, r5, #1
10057ade:	b2aa      	uxth	r2, r5
10057ae0:	2004      	movs	r0, #4
10057ae2:	4623      	mov	r3, r4
10057ae4:	f00b fbaa 	bl	1006323c <GAT_att_db_insert>
10057ae8:	4285      	cmp	r5, r0
10057aea:	d121      	bne.n	10057b30 <GAT_srv_add_char_descriptor+0x104>
10057aec:	7d20      	ldrb	r0, [r4, #20]
10057aee:	2810      	cmp	r0, #16
10057af0:	d10b      	bne.n	10057b0a <GAT_srv_add_char_descriptor+0xde>
10057af2:	8a20      	ldrh	r0, [r4, #16]
10057af4:	2129      	movs	r1, #41	@ 0x29
10057af6:	0209      	lsls	r1, r1, #8
10057af8:	1c89      	adds	r1, r1, #2
10057afa:	4288      	cmp	r0, r1
10057afc:	d105      	bne.n	10057b0a <GAT_srv_add_char_descriptor+0xde>
10057afe:	69a0      	ldr	r0, [r4, #24]
10057b00:	8882      	ldrh	r2, [r0, #4]
10057b02:	6880      	ldr	r0, [r0, #8]
10057b04:	2100      	movs	r1, #0
10057b06:	f7f9 fad7 	bl	100510b8 <BLEPLAT_MemSet>
10057b0a:	480b      	ldr	r0, [pc, #44]	@ (10057b38 <__arm_cp.7_1>)
10057b0c:	6800      	ldr	r0, [r0, #0]
10057b0e:	215c      	movs	r1, #92	@ 0x5c
10057b10:	5c42      	ldrb	r2, [r0, r1]
10057b12:	2302      	movs	r3, #2
10057b14:	4313      	orrs	r3, r2
10057b16:	5443      	strb	r3, [r0, r1]
10057b18:	200a      	movs	r0, #10
10057b1a:	f009 fb53 	bl	100611c4 <tsk_notify_idx>
10057b1e:	f7f8 fcd4 	bl	100504ca <BLE_STACK_ProcessRequest>
10057b22:	4635      	mov	r5, r6
10057b24:	e000      	b.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057b26:	250c      	movs	r5, #12
10057b28:	4628      	mov	r0, r5
10057b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057b2c:	2586      	movs	r5, #134	@ 0x86
10057b2e:	e7fb      	b.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>
10057b30:	2587      	movs	r5, #135	@ 0x87
10057b32:	e7f9      	b.n	10057b28 <GAT_srv_add_char_descriptor+0xfc>

10057b34 <__arm_cp.7_0>:
10057b34:	ffffd700 	.word	0xffffd700

10057b38 <__arm_cp.7_1>:
10057b38:	20002420 	.word	0x20002420

10057b3c <GAT_srv_rm_characteristic>:
10057b3c:	b510      	push	{r4, lr}
10057b3e:	4604      	mov	r4, r0
10057b40:	f7ff fe90 	bl	10057864 <GAT_srv_db_update_allowed>
10057b44:	2800      	cmp	r0, #0
10057b46:	d01e      	beq.n	10057b86 <GAT_srv_rm_characteristic+0x4a>
10057b48:	4620      	mov	r0, r4
10057b4a:	f00b fbcb 	bl	100632e4 <GAT_att_db_find_by_handle>
10057b4e:	4601      	mov	r1, r0
10057b50:	2012      	movs	r0, #18
10057b52:	2900      	cmp	r1, #0
10057b54:	d016      	beq.n	10057b84 <GAT_srv_rm_characteristic+0x48>
10057b56:	780a      	ldrb	r2, [r1, #0]
10057b58:	2a02      	cmp	r2, #2
10057b5a:	d113      	bne.n	10057b84 <GAT_srv_rm_characteristic+0x48>
10057b5c:	4608      	mov	r0, r1
10057b5e:	f00b fc5f 	bl	10063420 <GAT_att_db_get_last_group_handle>
10057b62:	4601      	mov	r1, r0
10057b64:	4620      	mov	r0, r4
10057b66:	f00b fc9b 	bl	100634a0 <GAT_att_db_rm_att_range>
10057b6a:	4808      	ldr	r0, [pc, #32]	@ (10057b8c <__arm_cp.8_0>)
10057b6c:	6800      	ldr	r0, [r0, #0]
10057b6e:	215c      	movs	r1, #92	@ 0x5c
10057b70:	5c42      	ldrb	r2, [r0, r1]
10057b72:	2302      	movs	r3, #2
10057b74:	4313      	orrs	r3, r2
10057b76:	5443      	strb	r3, [r0, r1]
10057b78:	200a      	movs	r0, #10
10057b7a:	f009 fb23 	bl	100611c4 <tsk_notify_idx>
10057b7e:	f7f8 fca4 	bl	100504ca <BLE_STACK_ProcessRequest>
10057b82:	2000      	movs	r0, #0
10057b84:	bd10      	pop	{r4, pc}
10057b86:	200c      	movs	r0, #12
10057b88:	bd10      	pop	{r4, pc}
10057b8a:	46c0      	nop			@ (mov r8, r8)

10057b8c <__arm_cp.8_0>:
10057b8c:	20002420 	.word	0x20002420

10057b90 <GAT_srv_resp>:
10057b90:	b51c      	push	{r2, r3, r4, lr}
10057b92:	9c05      	ldr	r4, [sp, #20]
10057b94:	9401      	str	r4, [sp, #4]
10057b96:	9c04      	ldr	r4, [sp, #16]
10057b98:	9400      	str	r4, [sp, #0]
10057b9a:	f7fe f893 	bl	10055cc4 <GAT_att_srv_resp>
10057b9e:	bd1c      	pop	{r2, r3, r4, pc}

10057ba0 <GAT_srv_get_service_handle>:
10057ba0:	b580      	push	{r7, lr}
10057ba2:	4603      	mov	r3, r0
10057ba4:	2001      	movs	r0, #1
10057ba6:	4902      	ldr	r1, [pc, #8]	@ (10057bb0 <__arm_cp.14_0>)
10057ba8:	2200      	movs	r2, #0
10057baa:	f7ff fd41 	bl	10057630 <GAT_srv_get_attribute_handle>
10057bae:	bd80      	pop	{r7, pc}

10057bb0 <__arm_cp.14_0>:
10057bb0:	0000ffff 	.word	0x0000ffff

10057bb4 <GAT_srv_get_char_decl_handle>:
10057bb4:	b580      	push	{r7, lr}
10057bb6:	4603      	mov	r3, r0
10057bb8:	2001      	movs	r0, #1
10057bba:	4902      	ldr	r1, [pc, #8]	@ (10057bc4 <__arm_cp.16_0>)
10057bbc:	2202      	movs	r2, #2
10057bbe:	f7ff fd37 	bl	10057630 <GAT_srv_get_attribute_handle>
10057bc2:	bd80      	pop	{r7, pc}

10057bc4 <__arm_cp.16_0>:
10057bc4:	0000ffff 	.word	0x0000ffff

10057bc8 <hci_rx_acl_data>:
10057bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10057bca:	b085      	sub	sp, #20
10057bcc:	4604      	mov	r4, r0
10057bce:	7887      	ldrb	r7, [r0, #2]
10057bd0:	1e78      	subs	r0, r7, #1
10057bd2:	2103      	movs	r1, #3
10057bd4:	9104      	str	r1, [sp, #16]
10057bd6:	4308      	orrs	r0, r1
10057bd8:	3009      	adds	r0, #9
10057bda:	0880      	lsrs	r0, r0, #2
10057bdc:	b283      	uxth	r3, r0
10057bde:	7a20      	ldrb	r0, [r4, #8]
10057be0:	9003      	str	r0, [sp, #12]
10057be2:	8820      	ldrh	r0, [r4, #0]
10057be4:	9002      	str	r0, [sp, #8]
10057be6:	4811      	ldr	r0, [pc, #68]	@ (10057c2c <__arm_cp.2_0>)
10057be8:	6800      	ldr	r0, [r0, #0]
10057bea:	6980      	ldr	r0, [r0, #24]
10057bec:	2502      	movs	r5, #2
10057bee:	223e      	movs	r2, #62	@ 0x3e
10057bf0:	4629      	mov	r1, r5
10057bf2:	f7fb ff9d 	bl	10053b30 <aci_event_fifo_push_header>
10057bf6:	2800      	cmp	r0, #0
10057bf8:	d014      	beq.n	10057c24 <hci_rx_acl_data+0x5c>
10057bfa:	4606      	mov	r6, r0
10057bfc:	9700      	str	r7, [sp, #0]
10057bfe:	9401      	str	r4, [sp, #4]
10057c00:	9804      	ldr	r0, [sp, #16]
10057c02:	9a03      	ldr	r2, [sp, #12]
10057c04:	4002      	ands	r2, r0
10057c06:	1d30      	adds	r0, r6, #4
10057c08:	2700      	movs	r7, #0
10057c0a:	9902      	ldr	r1, [sp, #8]
10057c0c:	463b      	mov	r3, r7
10057c0e:	f7fc fcf6 	bl	100545fe <hci_rx_acl_data_event_copy>
10057c12:	7135      	strb	r5, [r6, #4]
10057c14:	4628      	mov	r0, r5
10057c16:	4631      	mov	r1, r6
10057c18:	f7fc f827 	bl	10053c6a <aci_event_fifo_push>
10057c1c:	4620      	mov	r0, r4
10057c1e:	f7fb fdd3 	bl	100537c8 <ACL_pkt_release>
10057c22:	e000      	b.n	10057c26 <hci_rx_acl_data+0x5e>
10057c24:	2707      	movs	r7, #7
10057c26:	4638      	mov	r0, r7
10057c28:	b005      	add	sp, #20
10057c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057c2c <__arm_cp.2_0>:
10057c2c:	20002418 	.word	0x20002418

10057c30 <hci_tx_acl_data_done>:
10057c30:	b5b0      	push	{r4, r5, r7, lr}
10057c32:	4604      	mov	r4, r0
10057c34:	8801      	ldrh	r1, [r0, #0]
10057c36:	2002      	movs	r0, #2
10057c38:	f00a fe38 	bl	100628ac <hci_number_of_completed_packets_event_push_noinline>
10057c3c:	4605      	mov	r5, r0
10057c3e:	2800      	cmp	r0, #0
10057c40:	d102      	bne.n	10057c48 <hci_tx_acl_data_done+0x18>
10057c42:	4620      	mov	r0, r4
10057c44:	f7fb fdc0 	bl	100537c8 <ACL_pkt_release>
10057c48:	4628      	mov	r0, r5
10057c4a:	bdb0      	pop	{r4, r5, r7, pc}

10057c4c <hci_le_set_advertising_parameters>:
10057c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10057c4e:	b089      	sub	sp, #36	@ 0x24
10057c50:	461d      	mov	r5, r3
10057c52:	4616      	mov	r6, r2
10057c54:	460f      	mov	r7, r1
10057c56:	9004      	str	r0, [sp, #16]
10057c58:	2002      	movs	r0, #2
10057c5a:	2401      	movs	r4, #1
10057c5c:	4621      	mov	r1, r4
10057c5e:	f000 f8d9 	bl	10057e14 <hci_get_set_legacy_ext_flag>
10057c62:	2800      	cmp	r0, #0
10057c64:	d150      	bne.n	10057d08 <hci_le_set_advertising_parameters+0xbc>
10057c66:	9703      	str	r7, [sp, #12]
10057c68:	2012      	movs	r0, #18
10057c6a:	2e04      	cmp	r6, #4
10057c6c:	d84c      	bhi.n	10057d08 <hci_le_set_advertising_parameters+0xbc>
10057c6e:	9002      	str	r0, [sp, #8]
10057c70:	f7f5 fcb0 	bl	1004d5d4 <conn_supp_csr_ucfg>
10057c74:	2e01      	cmp	r6, #1
10057c76:	d803      	bhi.n	10057c80 <hci_le_set_advertising_parameters+0x34>
10057c78:	2800      	cmp	r0, #0
10057c7a:	d101      	bne.n	10057c80 <hci_le_set_advertising_parameters+0x34>
10057c7c:	2011      	movs	r0, #17
10057c7e:	e043      	b.n	10057d08 <hci_le_set_advertising_parameters+0xbc>
10057c80:	9811      	ldr	r0, [sp, #68]	@ 0x44
10057c82:	9000      	str	r0, [sp, #0]
10057c84:	9810      	ldr	r0, [sp, #64]	@ 0x40
10057c86:	9001      	str	r0, [sp, #4]
10057c88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10057c8a:	980e      	ldr	r0, [sp, #56]	@ 0x38
10057c8c:	af05      	add	r7, sp, #20
10057c8e:	7238      	strb	r0, [r7, #8]
10057c90:	71fd      	strb	r5, [r7, #7]
10057c92:	713e      	strb	r6, [r7, #4]
10057c94:	9803      	ldr	r0, [sp, #12]
10057c96:	8078      	strh	r0, [r7, #2]
10057c98:	9804      	ldr	r0, [sp, #16]
10057c9a:	8038      	strh	r0, [r7, #0]
10057c9c:	4638      	mov	r0, r7
10057c9e:	3009      	adds	r0, #9
10057ca0:	2206      	movs	r2, #6
10057ca2:	f7f9 f9f9 	bl	10051098 <BLEPLAT_MemCpy>
10057ca6:	9900      	ldr	r1, [sp, #0]
10057ca8:	71b9      	strb	r1, [r7, #6]
10057caa:	9801      	ldr	r0, [sp, #4]
10057cac:	7178      	strb	r0, [r7, #5]
10057cae:	7938      	ldrb	r0, [r7, #4]
10057cb0:	2804      	cmp	r0, #4
10057cb2:	d001      	beq.n	10057cb8 <hci_le_set_advertising_parameters+0x6c>
10057cb4:	2801      	cmp	r0, #1
10057cb6:	d104      	bne.n	10057cc2 <hci_le_set_advertising_parameters+0x76>
10057cb8:	a905      	add	r1, sp, #20
10057cba:	7a09      	ldrb	r1, [r1, #8]
10057cbc:	2902      	cmp	r1, #2
10057cbe:	d302      	bcc.n	10057cc6 <hci_le_set_advertising_parameters+0x7a>
10057cc0:	e021      	b.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057cc2:	2903      	cmp	r1, #3
10057cc4:	d81f      	bhi.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057cc6:	2801      	cmp	r0, #1
10057cc8:	d10e      	bne.n	10057ce8 <hci_le_set_advertising_parameters+0x9c>
10057cca:	f000 f966 	bl	10057f9a <hci_le_check_own_address_type_max_value_ucfg_weak>
10057cce:	a905      	add	r1, sp, #20
10057cd0:	79c9      	ldrb	r1, [r1, #7]
10057cd2:	4281      	cmp	r1, r0
10057cd4:	d817      	bhi.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057cd6:	a805      	add	r0, sp, #20
10057cd8:	7940      	ldrb	r0, [r0, #5]
10057cda:	0740      	lsls	r0, r0, #29
10057cdc:	9802      	ldr	r0, [sp, #8]
10057cde:	d013      	beq.n	10057d08 <hci_le_set_advertising_parameters+0xbc>
10057ce0:	a805      	add	r0, sp, #20
10057ce2:	f005 fde1 	bl	1005d8a8 <LL_LE_Set_Advertising_Parameters>
10057ce6:	e00f      	b.n	10057d08 <hci_le_set_advertising_parameters+0xbc>
10057ce8:	a805      	add	r0, sp, #20
10057cea:	8800      	ldrh	r0, [r0, #0]
10057cec:	2820      	cmp	r0, #32
10057cee:	d30a      	bcc.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057cf0:	03a1      	lsls	r1, r4, #14
10057cf2:	4288      	cmp	r0, r1
10057cf4:	d807      	bhi.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057cf6:	aa05      	add	r2, sp, #20
10057cf8:	8852      	ldrh	r2, [r2, #2]
10057cfa:	2a20      	cmp	r2, #32
10057cfc:	d303      	bcc.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057cfe:	428a      	cmp	r2, r1
10057d00:	d801      	bhi.n	10057d06 <hci_le_set_advertising_parameters+0xba>
10057d02:	4290      	cmp	r0, r2
10057d04:	d9e1      	bls.n	10057cca <hci_le_set_advertising_parameters+0x7e>
10057d06:	9802      	ldr	r0, [sp, #8]
10057d08:	b009      	add	sp, #36	@ 0x24
10057d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057d0c <hci_le_set_advertising_enable>:
10057d0c:	b510      	push	{r4, lr}
10057d0e:	4604      	mov	r4, r0
10057d10:	2002      	movs	r0, #2
10057d12:	2101      	movs	r1, #1
10057d14:	f000 f87e 	bl	10057e14 <hci_get_set_legacy_ext_flag>
10057d18:	2800      	cmp	r0, #0
10057d1a:	d000      	beq.n	10057d1e <hci_le_set_advertising_enable+0x12>
10057d1c:	bd10      	pop	{r4, pc}
10057d1e:	2c01      	cmp	r4, #1
10057d20:	d803      	bhi.n	10057d2a <hci_le_set_advertising_enable+0x1e>
10057d22:	4620      	mov	r0, r4
10057d24:	f005 fe44 	bl	1005d9b0 <LL_LE_Set_Advertise_Enable>
10057d28:	bd10      	pop	{r4, pc}
10057d2a:	2012      	movs	r0, #18
10057d2c:	bd10      	pop	{r4, pc}

10057d2e <chc_csr_ucfg_weak>:
10057d2e:	2000      	movs	r0, #0
10057d30:	4770      	bx	lr
	...

10057d34 <HCI_Init>:
10057d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057d36:	4917      	ldr	r1, [pc, #92]	@ (10057d94 <__arm_cp.0_0>)
10057d38:	6808      	ldr	r0, [r1, #0]
10057d3a:	460d      	mov	r5, r1
10057d3c:	2124      	movs	r1, #36	@ 0x24
10057d3e:	2400      	movs	r4, #0
10057d40:	5444      	strb	r4, [r0, r1]
10057d42:	3025      	adds	r0, #37	@ 0x25
10057d44:	2211      	movs	r2, #17
10057d46:	4f14      	ldr	r7, [pc, #80]	@ (10057d98 <__arm_cp.0_1>)
10057d48:	4621      	mov	r1, r4
10057d4a:	47b8      	blx	r7
10057d4c:	6828      	ldr	r0, [r5, #0]
10057d4e:	3036      	adds	r0, #54	@ 0x36
10057d50:	26ff      	movs	r6, #255	@ 0xff
10057d52:	2205      	movs	r2, #5
10057d54:	4631      	mov	r1, r6
10057d56:	47b8      	blx	r7
10057d58:	6829      	ldr	r1, [r5, #0]
10057d5a:	203b      	movs	r0, #59	@ 0x3b
10057d5c:	231f      	movs	r3, #31
10057d5e:	540b      	strb	r3, [r1, r0]
10057d60:	2201      	movs	r2, #1
10057d62:	0355      	lsls	r5, r2, #13
10057d64:	4608      	mov	r0, r1
10057d66:	303b      	adds	r0, #59	@ 0x3b
10057d68:	5285      	strh	r5, [r0, r2]
10057d6a:	72c3      	strb	r3, [r0, #11]
10057d6c:	3147      	adds	r1, #71	@ 0x47
10057d6e:	2207      	movs	r2, #7
10057d70:	4608      	mov	r0, r1
10057d72:	4621      	mov	r1, r4
10057d74:	47b8      	blx	r7
10057d76:	4d07      	ldr	r5, [pc, #28]	@ (10057d94 <__arm_cp.0_0>)
10057d78:	6828      	ldr	r0, [r5, #0]
10057d7a:	304e      	adds	r0, #78	@ 0x4e
10057d7c:	2208      	movs	r2, #8
10057d7e:	4631      	mov	r1, r6
10057d80:	47b8      	blx	r7
10057d82:	4806      	ldr	r0, [pc, #24]	@ (10057d9c <__arm_cp.0_2>)
10057d84:	6800      	ldr	r0, [r0, #0]
10057d86:	2135      	movs	r1, #53	@ 0x35
10057d88:	5444      	strb	r4, [r0, r1]
10057d8a:	6828      	ldr	r0, [r5, #0]
10057d8c:	4904      	ldr	r1, [pc, #16]	@ (10057da0 <__arm_cp.0_3>)
10057d8e:	6201      	str	r1, [r0, #32]
10057d90:	65c4      	str	r4, [r0, #92]	@ 0x5c
10057d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057d94 <__arm_cp.0_0>:
10057d94:	20002468 	.word	0x20002468

10057d98 <__arm_cp.0_1>:
10057d98:	100510b9 	.word	0x100510b9

10057d9c <__arm_cp.0_2>:
10057d9c:	20002414 	.word	0x20002414

10057da0 <__arm_cp.0_3>:
10057da0:	fffffdbe 	.word	0xfffffdbe

10057da4 <Controller_Process_Q>:
10057da4:	b570      	push	{r4, r5, r6, lr}
10057da6:	2500      	movs	r5, #0
10057da8:	4e07      	ldr	r6, [pc, #28]	@ (10057dc8 <__arm_cp.2_0>)
10057daa:	7af0      	ldrb	r0, [r6, #11]
10057dac:	4285      	cmp	r5, r0
10057dae:	d20a      	bcs.n	10057dc6 <Controller_Process_Q+0x22>
10057db0:	b2ec      	uxtb	r4, r5
10057db2:	4620      	mov	r0, r4
10057db4:	f002 fcc6 	bl	1005a744 <LL_cpe_engine>
10057db8:	2800      	cmp	r0, #0
10057dba:	d002      	beq.n	10057dc2 <Controller_Process_Q+0x1e>
10057dbc:	4620      	mov	r0, r4
10057dbe:	f002 fcc1 	bl	1005a744 <LL_cpe_engine>
10057dc2:	1c6d      	adds	r5, r5, #1
10057dc4:	e7f1      	b.n	10057daa <Controller_Process_Q+0x6>
10057dc6:	bd70      	pop	{r4, r5, r6, pc}

10057dc8 <__arm_cp.2_0>:
10057dc8:	2000247c 	.word	0x2000247c

10057dcc <hci_le_set_random_address>:
10057dcc:	b580      	push	{r7, lr}
10057dce:	f005 ffff 	bl	1005ddd0 <LL_Set_Advertising_Set_Random_Address>
10057dd2:	bd80      	pop	{r7, pc}

10057dd4 <hci_set_event_mask>:
10057dd4:	b510      	push	{r4, lr}
10057dd6:	2136      	movs	r1, #54	@ 0x36
10057dd8:	4a05      	ldr	r2, [pc, #20]	@ (10057df0 <__arm_cp.14_0>)
10057dda:	293e      	cmp	r1, #62	@ 0x3e
10057ddc:	d006      	beq.n	10057dec <hci_set_event_mask+0x18>
10057dde:	1843      	adds	r3, r0, r1
10057de0:	3b36      	subs	r3, #54	@ 0x36
10057de2:	781b      	ldrb	r3, [r3, #0]
10057de4:	6814      	ldr	r4, [r2, #0]
10057de6:	5463      	strb	r3, [r4, r1]
10057de8:	1c49      	adds	r1, r1, #1
10057dea:	e7f6      	b.n	10057dda <hci_set_event_mask+0x6>
10057dec:	2000      	movs	r0, #0
10057dee:	bd10      	pop	{r4, pc}

10057df0 <__arm_cp.14_0>:
10057df0:	20002468 	.word	0x20002468

10057df4 <hci_le_set_event_mask>:
10057df4:	b510      	push	{r4, lr}
10057df6:	2146      	movs	r1, #70	@ 0x46
10057df8:	4a05      	ldr	r2, [pc, #20]	@ (10057e10 <__arm_cp.16_0>)
10057dfa:	294e      	cmp	r1, #78	@ 0x4e
10057dfc:	d006      	beq.n	10057e0c <hci_le_set_event_mask+0x18>
10057dfe:	1843      	adds	r3, r0, r1
10057e00:	3b46      	subs	r3, #70	@ 0x46
10057e02:	781b      	ldrb	r3, [r3, #0]
10057e04:	6814      	ldr	r4, [r2, #0]
10057e06:	5463      	strb	r3, [r4, r1]
10057e08:	1c49      	adds	r1, r1, #1
10057e0a:	e7f6      	b.n	10057dfa <hci_le_set_event_mask+0x6>
10057e0c:	2000      	movs	r0, #0
10057e0e:	bd10      	pop	{r4, pc}

10057e10 <__arm_cp.16_0>:
10057e10:	20002468 	.word	0x20002468

10057e14 <hci_get_set_legacy_ext_flag>:
10057e14:	4a05      	ldr	r2, [pc, #20]	@ (10057e2c <__arm_cp.18_0>)
10057e16:	6812      	ldr	r2, [r2, #0]
10057e18:	2335      	movs	r3, #53	@ 0x35
10057e1a:	5cd3      	ldrb	r3, [r2, r3]
10057e1c:	4203      	tst	r3, r0
10057e1e:	d001      	beq.n	10057e24 <hci_get_set_legacy_ext_flag+0x10>
10057e20:	200c      	movs	r0, #12
10057e22:	4770      	bx	lr
10057e24:	3235      	adds	r2, #53	@ 0x35
10057e26:	7011      	strb	r1, [r2, #0]
10057e28:	2000      	movs	r0, #0
10057e2a:	4770      	bx	lr

10057e2c <__arm_cp.18_0>:
10057e2c:	20002414 	.word	0x20002414

10057e30 <hci_check_legacy_ext_flag>:
10057e30:	4903      	ldr	r1, [pc, #12]	@ (10057e40 <__arm_cp.25_0>)
10057e32:	6809      	ldr	r1, [r1, #0]
10057e34:	2235      	movs	r2, #53	@ 0x35
10057e36:	5c89      	ldrb	r1, [r1, r2]
10057e38:	4008      	ands	r0, r1
10057e3a:	1e41      	subs	r1, r0, #1
10057e3c:	4188      	sbcs	r0, r1
10057e3e:	4770      	bx	lr

10057e40 <__arm_cp.25_0>:
10057e40:	20002414 	.word	0x20002414

10057e44 <LLC_offline_control_procedures_processing>:
10057e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057e46:	2400      	movs	r4, #0
10057e48:	4620      	mov	r0, r4
10057e4a:	f000 fd97 	bl	1005897c <llc_conn_get_cntxt_per_p>
10057e4e:	4605      	mov	r5, r0
10057e50:	2201      	movs	r2, #1
10057e52:	4b30      	ldr	r3, [pc, #192]	@ (10057f14 <__arm_cp.27_0>)
10057e54:	4627      	mov	r7, r4
10057e56:	9200      	str	r2, [sp, #0]
10057e58:	6818      	ldr	r0, [r3, #0]
10057e5a:	2134      	movs	r1, #52	@ 0x34
10057e5c:	5c40      	ldrb	r0, [r0, r1]
10057e5e:	4284      	cmp	r4, r0
10057e60:	d250      	bcs.n	10057f04 <LLC_offline_control_procedures_processing+0xc0>
10057e62:	202c      	movs	r0, #44	@ 0x2c
10057e64:	5c28      	ldrb	r0, [r5, r0]
10057e66:	21fe      	movs	r1, #254	@ 0xfe
10057e68:	4001      	ands	r1, r0
10057e6a:	2902      	cmp	r1, #2
10057e6c:	d13e      	bne.n	10057eec <LLC_offline_control_procedures_processing+0xa8>
10057e6e:	208c      	movs	r0, #140	@ 0x8c
10057e70:	582e      	ldr	r6, [r5, r0]
10057e72:	07f0      	lsls	r0, r6, #31
10057e74:	d00d      	beq.n	10057e92 <LLC_offline_control_procedures_processing+0x4e>
10057e76:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
10057e78:	2000      	movs	r0, #0
10057e7a:	f004 fb93 	bl	1005c5a4 <LL_Read_Remote_Used_Features>
10057e7e:	283a      	cmp	r0, #58	@ 0x3a
10057e80:	9a00      	ldr	r2, [sp, #0]
10057e82:	4610      	mov	r0, r2
10057e84:	d030      	beq.n	10057ee8 <LLC_offline_control_procedures_processing+0xa4>
10057e86:	4628      	mov	r0, r5
10057e88:	308c      	adds	r0, #140	@ 0x8c
10057e8a:	6801      	ldr	r1, [r0, #0]
10057e8c:	2201      	movs	r2, #1
10057e8e:	4391      	bics	r1, r2
10057e90:	6001      	str	r1, [r0, #0]
10057e92:	4628      	mov	r0, r5
10057e94:	f002 fb7e 	bl	1005a594 <llc_subrate_offline_processing_ucfg_weak>
10057e98:	2800      	cmp	r0, #0
10057e9a:	9a00      	ldr	r2, [sp, #0]
10057e9c:	4610      	mov	r0, r2
10057e9e:	d123      	bne.n	10057ee8 <LLC_offline_control_procedures_processing+0xa4>
10057ea0:	4628      	mov	r0, r5
10057ea2:	4631      	mov	r1, r6
10057ea4:	f006 fd04 	bl	1005e8b0 <Data_Len_Update_Offline_Processing_ucfg_weak>
10057ea8:	9a00      	ldr	r2, [sp, #0]
10057eaa:	2800      	cmp	r0, #0
10057eac:	4610      	mov	r0, r2
10057eae:	d11b      	bne.n	10057ee8 <LLC_offline_control_procedures_processing+0xa4>
10057eb0:	b2e6      	uxtb	r6, r4
10057eb2:	4630      	mov	r0, r6
10057eb4:	f003 fc0e 	bl	1005b6d4 <LLC_channel_map_update_offline_processing_ucfg_weak>
10057eb8:	9a00      	ldr	r2, [sp, #0]
10057eba:	2800      	cmp	r0, #0
10057ebc:	4610      	mov	r0, r2
10057ebe:	d113      	bne.n	10057ee8 <LLC_offline_control_procedures_processing+0xa4>
10057ec0:	4630      	mov	r0, r6
10057ec2:	f003 fc0b 	bl	1005b6dc <LLC_chc_reporting_offline_processing_ucfg_weak>
10057ec6:	9a00      	ldr	r2, [sp, #0]
10057ec8:	2800      	cmp	r0, #0
10057eca:	4610      	mov	r0, r2
10057ecc:	d10c      	bne.n	10057ee8 <LLC_offline_control_procedures_processing+0xa4>
10057ece:	4628      	mov	r0, r5
10057ed0:	f003 fe45 	bl	1005bb5e <LLC_cte_request_procedure_ucfg_weak>
10057ed4:	9a00      	ldr	r2, [sp, #0]
10057ed6:	2800      	cmp	r0, #0
10057ed8:	4610      	mov	r0, r2
10057eda:	d105      	bne.n	10057ee8 <LLC_offline_control_procedures_processing+0xa4>
10057edc:	4630      	mov	r0, r6
10057ede:	f004 fd68 	bl	1005c9b2 <LLC_pcl_offline_processing_ucfg_weak>
10057ee2:	9a00      	ldr	r2, [sp, #0]
10057ee4:	1e41      	subs	r1, r0, #1
10057ee6:	4188      	sbcs	r0, r1
10057ee8:	4b0a      	ldr	r3, [pc, #40]	@ (10057f14 <__arm_cp.27_0>)
10057eea:	e000      	b.n	10057eee <LLC_offline_control_procedures_processing+0xaa>
10057eec:	2000      	movs	r0, #0
10057eee:	1e41      	subs	r1, r0, #1
10057ef0:	4188      	sbcs	r0, r1
10057ef2:	0639      	lsls	r1, r7, #24
10057ef4:	4617      	mov	r7, r2
10057ef6:	d100      	bne.n	10057efa <LLC_offline_control_procedures_processing+0xb6>
10057ef8:	4607      	mov	r7, r0
10057efa:	204d      	movs	r0, #77	@ 0x4d
10057efc:	0080      	lsls	r0, r0, #2
10057efe:	182d      	adds	r5, r5, r0
10057f00:	1c64      	adds	r4, r4, #1
10057f02:	e7a9      	b.n	10057e58 <LLC_offline_control_procedures_processing+0x14>
10057f04:	0638      	lsls	r0, r7, #24
10057f06:	d003      	beq.n	10057f10 <LLC_offline_control_procedures_processing+0xcc>
10057f08:	2011      	movs	r0, #17
10057f0a:	2101      	movs	r1, #1
10057f0c:	f009 f96c 	bl	100611e8 <tsk_wait_resource_idx>
10057f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057f12:	46c0      	nop			@ (mov r8, r8)

10057f14 <__arm_cp.27_0>:
10057f14:	20002414 	.word	0x20002414

10057f18 <cte_csr_ucfg_weak>:
10057f18:	2000      	movs	r0, #0
10057f1a:	4770      	bx	lr

10057f1c <hci_le_encrypt>:
10057f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10057f1e:	b08f      	sub	sp, #60	@ 0x3c
10057f20:	9202      	str	r2, [sp, #8]
10057f22:	4607      	mov	r7, r0
10057f24:	a807      	add	r0, sp, #28
10057f26:	9001      	str	r0, [sp, #4]
10057f28:	2510      	movs	r5, #16
10057f2a:	4e0c      	ldr	r6, [pc, #48]	@ (10057f5c <__arm_cp.0_0>)
10057f2c:	462a      	mov	r2, r5
10057f2e:	47b0      	blx	r6
10057f30:	ac0b      	add	r4, sp, #44	@ 0x2c
10057f32:	4620      	mov	r0, r4
10057f34:	4639      	mov	r1, r7
10057f36:	462a      	mov	r2, r5
10057f38:	47b0      	blx	r6
10057f3a:	af03      	add	r7, sp, #12
10057f3c:	2600      	movs	r6, #0
10057f3e:	9801      	ldr	r0, [sp, #4]
10057f40:	4621      	mov	r1, r4
10057f42:	463a      	mov	r2, r7
10057f44:	4633      	mov	r3, r6
10057f46:	f009 fc53 	bl	100617f0 <BLEPLAT_aes128_encrypt>
10057f4a:	9802      	ldr	r0, [sp, #8]
10057f4c:	4639      	mov	r1, r7
10057f4e:	462a      	mov	r2, r5
10057f50:	4b02      	ldr	r3, [pc, #8]	@ (10057f5c <__arm_cp.0_0>)
10057f52:	4798      	blx	r3
10057f54:	4630      	mov	r0, r6
10057f56:	b00f      	add	sp, #60	@ 0x3c
10057f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057f5a:	46c0      	nop			@ (mov r8, r8)

10057f5c <__arm_cp.0_0>:
10057f5c:	10051099 	.word	0x10051099

10057f60 <hci_le_long_term_key_request_reply_api>:
10057f60:	b5b0      	push	{r4, r5, r7, lr}
10057f62:	460c      	mov	r4, r1
10057f64:	4605      	mov	r5, r0
10057f66:	f000 ff83 	bl	10058e70 <llc_conn_get_conn_idx>
10057f6a:	28ff      	cmp	r0, #255	@ 0xff
10057f6c:	d005      	beq.n	10057f7a <hci_le_long_term_key_request_reply_api+0x1a>
10057f6e:	2000      	movs	r0, #0
10057f70:	4629      	mov	r1, r5
10057f72:	4622      	mov	r2, r4
10057f74:	f004 f9c3 	bl	1005c2fe <LL_Get_LTK>
10057f78:	bdb0      	pop	{r4, r5, r7, pc}
10057f7a:	2002      	movs	r0, #2
10057f7c:	bdb0      	pop	{r4, r5, r7, pc}

10057f7e <hci_le_long_term_key_request_negative_reply_api>:
10057f7e:	b510      	push	{r4, lr}
10057f80:	4604      	mov	r4, r0
10057f82:	f000 ff75 	bl	10058e70 <llc_conn_get_conn_idx>
10057f86:	28ff      	cmp	r0, #255	@ 0xff
10057f88:	d005      	beq.n	10057f96 <hci_le_long_term_key_request_negative_reply_api+0x18>
10057f8a:	2081      	movs	r0, #129	@ 0x81
10057f8c:	2200      	movs	r2, #0
10057f8e:	4621      	mov	r1, r4
10057f90:	f004 f9b5 	bl	1005c2fe <LL_Get_LTK>
10057f94:	bd10      	pop	{r4, pc}
10057f96:	2002      	movs	r0, #2
10057f98:	bd10      	pop	{r4, pc}

10057f9a <hci_le_check_own_address_type_max_value_ucfg_weak>:
10057f9a:	2001      	movs	r0, #1
10057f9c:	4770      	bx	lr

10057f9e <hci_le_clear_filter_accept_list>:
10057f9e:	b580      	push	{r7, lr}
10057fa0:	f002 fa02 	bl	1005a3a8 <llc_wl_clear_filter_accept_list>
10057fa4:	bd80      	pop	{r7, pc}

10057fa6 <hci_le_add_device_to_filter_accept_list>:
10057fa6:	b5e0      	push	{r5, r6, r7, lr}
10057fa8:	2802      	cmp	r0, #2
10057faa:	d301      	bcc.n	10057fb0 <hci_le_add_device_to_filter_accept_list+0xa>
10057fac:	28ff      	cmp	r0, #255	@ 0xff
10057fae:	d10d      	bne.n	10057fcc <hci_le_add_device_to_filter_accept_list+0x26>
10057fb0:	2200      	movs	r2, #0
10057fb2:	9200      	str	r2, [sp, #0]
10057fb4:	466b      	mov	r3, sp
10057fb6:	7018      	strb	r0, [r3, #0]
10057fb8:	9201      	str	r2, [sp, #4]
10057fba:	1c58      	adds	r0, r3, #1
10057fbc:	2206      	movs	r2, #6
10057fbe:	f7f9 f86b 	bl	10051098 <BLEPLAT_MemCpy>
10057fc2:	9901      	ldr	r1, [sp, #4]
10057fc4:	9800      	ldr	r0, [sp, #0]
10057fc6:	f002 fa09 	bl	1005a3dc <llc_wl_add_device_to_filter_accept_list>
10057fca:	bd8c      	pop	{r2, r3, r7, pc}
10057fcc:	2012      	movs	r0, #18
10057fce:	bd8c      	pop	{r2, r3, r7, pc}

10057fd0 <data_length_extension_csr_ucfg_weak>:
10057fd0:	2000      	movs	r0, #0
10057fd2:	4770      	bx	lr

10057fd4 <pcl_csr_ucfg_weak>:
10057fd4:	2000      	movs	r0, #0
10057fd6:	4770      	bx	lr

10057fd8 <phy_upd_csr>:
10057fd8:	2001      	movs	r0, #1
10057fda:	4770      	bx	lr

10057fdc <scan_csr_ucfg_weak>:
10057fdc:	2000      	movs	r0, #0
10057fde:	4770      	bx	lr

10057fe0 <conn_supp_csr>:
10057fe0:	2001      	movs	r0, #1
10057fe2:	4770      	bx	lr

10057fe4 <subrate_csr_ucfg_weak>:
10057fe4:	2000      	movs	r0, #0
10057fe6:	4770      	bx	lr

10057fe8 <L2C_build_connect_update_request>:
10057fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
10057fea:	b087      	sub	sp, #28
10057fec:	8901      	ldrh	r1, [r0, #8]
10057fee:	9104      	str	r1, [sp, #16]
10057ff0:	88c1      	ldrh	r1, [r0, #6]
10057ff2:	9105      	str	r1, [sp, #20]
10057ff4:	8884      	ldrh	r4, [r0, #4]
10057ff6:	8846      	ldrh	r6, [r0, #2]
10057ff8:	8807      	ldrh	r7, [r0, #0]
10057ffa:	2000      	movs	r0, #0
10057ffc:	9006      	str	r0, [sp, #24]
10057ffe:	a906      	add	r1, sp, #24
10058000:	4638      	mov	r0, r7
10058002:	f000 f89f 	bl	10058144 <l2c_get_check_link_status_on_request_sending>
10058006:	4605      	mov	r5, r0
10058008:	2800      	cmp	r0, #0
1005800a:	d15a      	bne.n	100580c2 <L2C_build_connect_update_request+0xda>
1005800c:	9603      	str	r6, [sp, #12]
1005800e:	9402      	str	r4, [sp, #8]
10058010:	9806      	ldr	r0, [sp, #24]
10058012:	7880      	ldrb	r0, [r0, #2]
10058014:	07c0      	lsls	r0, r0, #31
10058016:	d151      	bne.n	100580bc <L2C_build_connect_update_request+0xd4>
10058018:	2400      	movs	r4, #0
1005801a:	2210      	movs	r2, #16
1005801c:	4620      	mov	r0, r4
1005801e:	4639      	mov	r1, r7
10058020:	f7fb fbb0 	bl	10053784 <ACL_pkt_get>
10058024:	2800      	cmp	r0, #0
10058026:	d04b      	beq.n	100580c0 <L2C_build_connect_update_request+0xd8>
10058028:	4607      	mov	r7, r0
1005802a:	482a      	ldr	r0, [pc, #168]	@ (100580d4 <__arm_cp.0_0>)
1005802c:	9a03      	ldr	r2, [sp, #12]
1005802e:	1f91      	subs	r1, r2, #6
10058030:	b289      	uxth	r1, r1
10058032:	2512      	movs	r5, #18
10058034:	4281      	cmp	r1, r0
10058036:	d23d      	bcs.n	100580b4 <L2C_build_connect_update_request+0xcc>
10058038:	9e02      	ldr	r6, [sp, #8]
1005803a:	2e06      	cmp	r6, #6
1005803c:	d33a      	bcc.n	100580b4 <L2C_build_connect_update_request+0xcc>
1005803e:	1d80      	adds	r0, r0, #6
10058040:	4286      	cmp	r6, r0
10058042:	d237      	bcs.n	100580b4 <L2C_build_connect_update_request+0xcc>
10058044:	42b2      	cmp	r2, r6
10058046:	d835      	bhi.n	100580b4 <L2C_build_connect_update_request+0xcc>
10058048:	9a05      	ldr	r2, [sp, #20]
1005804a:	0891      	lsrs	r1, r2, #2
1005804c:	297c      	cmp	r1, #124	@ 0x7c
1005804e:	d831      	bhi.n	100580b4 <L2C_build_connect_update_request+0xcc>
10058050:	1c51      	adds	r1, r2, #1
10058052:	4371      	muls	r1, r6
10058054:	9b04      	ldr	r3, [sp, #16]
10058056:	009a      	lsls	r2, r3, #2
10058058:	4291      	cmp	r1, r2
1005805a:	d82b      	bhi.n	100580b4 <L2C_build_connect_update_request+0xcc>
1005805c:	2b0a      	cmp	r3, #10
1005805e:	d329      	bcc.n	100580b4 <L2C_build_connect_update_request+0xcc>
10058060:	4283      	cmp	r3, r0
10058062:	d227      	bcs.n	100580b4 <L2C_build_connect_update_request+0xcc>
10058064:	9401      	str	r4, [sp, #4]
10058066:	6878      	ldr	r0, [r7, #4]
10058068:	2112      	movs	r1, #18
1005806a:	7201      	strb	r1, [r0, #8]
1005806c:	6878      	ldr	r0, [r7, #4]
1005806e:	9906      	ldr	r1, [sp, #24]
10058070:	7909      	ldrb	r1, [r1, #4]
10058072:	7241      	strb	r1, [r0, #9]
10058074:	2106      	movs	r1, #6
10058076:	2508      	movs	r5, #8
10058078:	4c17      	ldr	r4, [pc, #92]	@ (100580d8 <__arm_cp.0_1>)
1005807a:	4638      	mov	r0, r7
1005807c:	462a      	mov	r2, r5
1005807e:	47a0      	blx	r4
10058080:	4638      	mov	r0, r7
10058082:	4629      	mov	r1, r5
10058084:	9a03      	ldr	r2, [sp, #12]
10058086:	47a0      	blx	r4
10058088:	210a      	movs	r1, #10
1005808a:	4638      	mov	r0, r7
1005808c:	4632      	mov	r2, r6
1005808e:	4625      	mov	r5, r4
10058090:	47a0      	blx	r4
10058092:	240c      	movs	r4, #12
10058094:	4638      	mov	r0, r7
10058096:	4621      	mov	r1, r4
10058098:	9a05      	ldr	r2, [sp, #20]
1005809a:	47a8      	blx	r5
1005809c:	210e      	movs	r1, #14
1005809e:	4638      	mov	r0, r7
100580a0:	9a04      	ldr	r2, [sp, #16]
100580a2:	47a8      	blx	r5
100580a4:	807c      	strh	r4, [r7, #2]
100580a6:	2005      	movs	r0, #5
100580a8:	4639      	mov	r1, r7
100580aa:	f000 f9cf 	bl	1005844c <L2C_send_frame>
100580ae:	2800      	cmp	r0, #0
100580b0:	d00a      	beq.n	100580c8 <L2C_build_connect_update_request+0xe0>
100580b2:	2581      	movs	r5, #129	@ 0x81
100580b4:	4638      	mov	r0, r7
100580b6:	f7fb fb87 	bl	100537c8 <ACL_pkt_release>
100580ba:	e002      	b.n	100580c2 <L2C_build_connect_update_request+0xda>
100580bc:	250c      	movs	r5, #12
100580be:	e000      	b.n	100580c2 <L2C_build_connect_update_request+0xda>
100580c0:	2588      	movs	r5, #136	@ 0x88
100580c2:	4628      	mov	r0, r5
100580c4:	b007      	add	sp, #28
100580c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100580c8:	9906      	ldr	r1, [sp, #24]
100580ca:	2012      	movs	r0, #18
100580cc:	f000 f84f 	bl	1005816e <l2c_set_link_status_after_request_enqueued>
100580d0:	9d01      	ldr	r5, [sp, #4]
100580d2:	e7f6      	b.n	100580c2 <L2C_build_connect_update_request+0xda>

100580d4 <__arm_cp.0_0>:
100580d4:	00000c7b 	.word	0x00000c7b

100580d8 <__arm_cp.0_1>:
100580d8:	10053833 	.word	0x10053833

100580dc <l2c_get_link_control_block_ref>:
100580dc:	b570      	push	{r4, r5, r6, lr}
100580de:	490b      	ldr	r1, [pc, #44]	@ (1005810c <__arm_cp.0_0>)
100580e0:	7ac9      	ldrb	r1, [r1, #11]
100580e2:	2214      	movs	r2, #20
100580e4:	434a      	muls	r2, r1
100580e6:	3214      	adds	r2, #20
100580e8:	4909      	ldr	r1, [pc, #36]	@ (10058110 <__arm_cp.0_1>)
100580ea:	680b      	ldr	r3, [r1, #0]
100580ec:	2100      	movs	r1, #0
100580ee:	460d      	mov	r5, r1
100580f0:	460c      	mov	r4, r1
100580f2:	3414      	adds	r4, #20
100580f4:	42a2      	cmp	r2, r4
100580f6:	d006      	beq.n	10058106 <l2c_get_link_control_block_ref+0x2a>
100580f8:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
100580fa:	5b75      	ldrh	r5, [r6, r5]
100580fc:	4285      	cmp	r5, r0
100580fe:	4625      	mov	r5, r4
10058100:	d1f7      	bne.n	100580f2 <l2c_get_link_control_block_ref+0x16>
10058102:	1931      	adds	r1, r6, r4
10058104:	3914      	subs	r1, #20
10058106:	4608      	mov	r0, r1
10058108:	bd70      	pop	{r4, r5, r6, pc}
1005810a:	46c0      	nop			@ (mov r8, r8)

1005810c <__arm_cp.0_0>:
1005810c:	2000247c 	.word	0x2000247c

10058110 <__arm_cp.0_1>:
10058110:	20002460 	.word	0x20002460

10058114 <l2c_get_link_control_block_index>:
10058114:	b5b0      	push	{r4, r5, r7, lr}
10058116:	4909      	ldr	r1, [pc, #36]	@ (1005813c <__arm_cp.1_0>)
10058118:	7aca      	ldrb	r2, [r1, #11]
1005811a:	4909      	ldr	r1, [pc, #36]	@ (10058140 <__arm_cp.1_1>)
1005811c:	680b      	ldr	r3, [r1, #0]
1005811e:	2400      	movs	r4, #0
10058120:	4621      	mov	r1, r4
10058122:	428a      	cmp	r2, r1
10058124:	d006      	beq.n	10058134 <l2c_get_link_control_block_index+0x20>
10058126:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10058128:	5b2d      	ldrh	r5, [r5, r4]
1005812a:	4285      	cmp	r5, r0
1005812c:	d003      	beq.n	10058136 <l2c_get_link_control_block_index+0x22>
1005812e:	3414      	adds	r4, #20
10058130:	1c49      	adds	r1, r1, #1
10058132:	e7f6      	b.n	10058122 <l2c_get_link_control_block_index+0xe>
10058134:	4611      	mov	r1, r2
10058136:	b2c8      	uxtb	r0, r1
10058138:	bdb0      	pop	{r4, r5, r7, pc}
1005813a:	46c0      	nop			@ (mov r8, r8)

1005813c <__arm_cp.1_0>:
1005813c:	2000247c 	.word	0x2000247c

10058140 <__arm_cp.1_1>:
10058140:	20002460 	.word	0x20002460

10058144 <l2c_get_check_link_status_on_request_sending>:
10058144:	b5b0      	push	{r4, r5, r7, lr}
10058146:	460c      	mov	r4, r1
10058148:	4605      	mov	r5, r0
1005814a:	f7ff ffc7 	bl	100580dc <l2c_get_link_control_block_ref>
1005814e:	4601      	mov	r1, r0
10058150:	6020      	str	r0, [r4, #0]
10058152:	2002      	movs	r0, #2
10058154:	2d00      	cmp	r5, #0
10058156:	d009      	beq.n	1005816c <l2c_get_check_link_status_on_request_sending+0x28>
10058158:	2900      	cmp	r1, #0
1005815a:	d007      	beq.n	1005816c <l2c_get_check_link_status_on_request_sending+0x28>
1005815c:	7908      	ldrb	r0, [r1, #4]
1005815e:	2800      	cmp	r0, #0
10058160:	d003      	beq.n	1005816a <l2c_get_check_link_status_on_request_sending+0x26>
10058162:	7889      	ldrb	r1, [r1, #2]
10058164:	2006      	movs	r0, #6
10058166:	4008      	ands	r0, r1
10058168:	d000      	beq.n	1005816c <l2c_get_check_link_status_on_request_sending+0x28>
1005816a:	200c      	movs	r0, #12
1005816c:	bdb0      	pop	{r4, r5, r7, pc}

1005816e <l2c_set_link_status_after_request_enqueued>:
1005816e:	7188      	strb	r0, [r1, #6]
10058170:	7908      	ldrb	r0, [r1, #4]
10058172:	71c8      	strb	r0, [r1, #7]
10058174:	7888      	ldrb	r0, [r1, #2]
10058176:	2206      	movs	r2, #6
10058178:	4302      	orrs	r2, r0
1005817a:	708a      	strb	r2, [r1, #2]
1005817c:	4770      	bx	lr

1005817e <l2c_post_process_incoming_request_packet>:
1005817e:	7190      	strb	r0, [r2, #6]
10058180:	7151      	strb	r1, [r2, #5]
10058182:	7890      	ldrb	r0, [r2, #2]
10058184:	2104      	movs	r1, #4
10058186:	4301      	orrs	r1, r0
10058188:	7091      	strb	r1, [r2, #2]
1005818a:	4770      	bx	lr

1005818c <l2c_pre_process_incoming_response_packet>:
1005818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005818e:	4604      	mov	r4, r0
10058190:	2014      	movs	r0, #20
10058192:	4360      	muls	r0, r4
10058194:	4b14      	ldr	r3, [pc, #80]	@ (100581e8 <__arm_cp.7_0>)
10058196:	681b      	ldr	r3, [r3, #0]
10058198:	6add      	ldr	r5, [r3, #44]	@ 0x2c
1005819a:	182d      	adds	r5, r5, r0
1005819c:	78a8      	ldrb	r0, [r5, #2]
1005819e:	0746      	lsls	r6, r0, #29
100581a0:	2081      	movs	r0, #129	@ 0x81
100581a2:	2e00      	cmp	r6, #0
100581a4:	d51f      	bpl.n	100581e6 <l2c_pre_process_incoming_response_packet+0x5a>
100581a6:	79ae      	ldrb	r6, [r5, #6]
100581a8:	1c76      	adds	r6, r6, #1
100581aa:	428e      	cmp	r6, r1
100581ac:	d001      	beq.n	100581b2 <l2c_pre_process_incoming_response_packet+0x26>
100581ae:	2901      	cmp	r1, #1
100581b0:	d119      	bne.n	100581e6 <l2c_pre_process_incoming_response_packet+0x5a>
100581b2:	79e9      	ldrb	r1, [r5, #7]
100581b4:	4291      	cmp	r1, r2
100581b6:	d116      	bne.n	100581e6 <l2c_pre_process_incoming_response_packet+0x5a>
100581b8:	1cae      	adds	r6, r5, #2
100581ba:	1daf      	adds	r7, r5, #6
100581bc:	1de8      	adds	r0, r5, #7
100581be:	9000      	str	r0, [sp, #0]
100581c0:	4618      	mov	r0, r3
100581c2:	4621      	mov	r1, r4
100581c4:	f009 f871 	bl	100612aa <CST_stop>
100581c8:	2000      	movs	r0, #0
100581ca:	7038      	strb	r0, [r7, #0]
100581cc:	9900      	ldr	r1, [sp, #0]
100581ce:	7008      	strb	r0, [r1, #0]
100581d0:	7831      	ldrb	r1, [r6, #0]
100581d2:	22fb      	movs	r2, #251	@ 0xfb
100581d4:	400a      	ands	r2, r1
100581d6:	7032      	strb	r2, [r6, #0]
100581d8:	7929      	ldrb	r1, [r5, #4]
100581da:	1c4a      	adds	r2, r1, #1
100581dc:	b2d1      	uxtb	r1, r2
100581de:	4291      	cmp	r1, r2
100581e0:	d000      	beq.n	100581e4 <l2c_pre_process_incoming_response_packet+0x58>
100581e2:	2101      	movs	r1, #1
100581e4:	7129      	strb	r1, [r5, #4]
100581e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100581e8 <__arm_cp.7_0>:
100581e8:	20002460 	.word	0x20002460

100581ec <l2c_release_unexpected_acl_packet>:
100581ec:	b580      	push	{r7, lr}
100581ee:	4608      	mov	r0, r1
100581f0:	f7fb faea 	bl	100537c8 <ACL_pkt_release>
100581f4:	bd80      	pop	{r7, pc}

100581f6 <L2C_get_cid_from_basic_packet_header>:
100581f6:	b580      	push	{r7, lr}
100581f8:	2102      	movs	r1, #2
100581fa:	f7fb fb0a 	bl	10053812 <ACL_pkt_read_16b>
100581fe:	bd80      	pop	{r7, pc}

10058200 <L2C_build_command_reject_pdu>:
10058200:	b5f0      	push	{r4, r5, r6, r7, lr}
10058202:	b085      	sub	sp, #20
10058204:	461e      	mov	r6, r3
10058206:	9204      	str	r2, [sp, #16]
10058208:	460d      	mov	r5, r1
1005820a:	4607      	mov	r7, r0
1005820c:	f7ff ff66 	bl	100580dc <l2c_get_link_control_block_ref>
10058210:	2800      	cmp	r0, #0
10058212:	d00f      	beq.n	10058234 <L2C_build_command_reject_pdu+0x34>
10058214:	4604      	mov	r4, r0
10058216:	9603      	str	r6, [sp, #12]
10058218:	7940      	ldrb	r0, [r0, #5]
1005821a:	2612      	movs	r6, #18
1005821c:	42a8      	cmp	r0, r5
1005821e:	d10a      	bne.n	10058236 <L2C_build_command_reject_pdu+0x36>
10058220:	9904      	ldr	r1, [sp, #16]
10058222:	2902      	cmp	r1, #2
10058224:	d807      	bhi.n	10058236 <L2C_build_command_reject_pdu+0x36>
10058226:	78a0      	ldrb	r0, [r4, #2]
10058228:	0780      	lsls	r0, r0, #30
1005822a:	d407      	bmi.n	1005823c <L2C_build_command_reject_pdu+0x3c>
1005822c:	2901      	cmp	r1, #1
1005822e:	d007      	beq.n	10058240 <L2C_build_command_reject_pdu+0x40>
10058230:	2004      	movs	r0, #4
10058232:	e006      	b.n	10058242 <L2C_build_command_reject_pdu+0x42>
10058234:	2602      	movs	r6, #2
10058236:	4630      	mov	r0, r6
10058238:	b005      	add	sp, #20
1005823a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005823c:	260c      	movs	r6, #12
1005823e:	e7fa      	b.n	10058236 <L2C_build_command_reject_pdu+0x36>
10058240:	2002      	movs	r0, #2
10058242:	2900      	cmp	r1, #0
10058244:	d100      	bne.n	10058248 <L2C_build_command_reject_pdu+0x48>
10058246:	4608      	mov	r0, r1
10058248:	9002      	str	r0, [sp, #8]
1005824a:	1d82      	adds	r2, r0, #6
1005824c:	2600      	movs	r6, #0
1005824e:	4630      	mov	r0, r6
10058250:	4639      	mov	r1, r7
10058252:	9201      	str	r2, [sp, #4]
10058254:	f7fb fa96 	bl	10053784 <ACL_pkt_get>
10058258:	2800      	cmp	r0, #0
1005825a:	d027      	beq.n	100582ac <L2C_build_command_reject_pdu+0xac>
1005825c:	4607      	mov	r7, r0
1005825e:	6840      	ldr	r0, [r0, #4]
10058260:	2101      	movs	r1, #1
10058262:	7201      	strb	r1, [r0, #8]
10058264:	6878      	ldr	r0, [r7, #4]
10058266:	7245      	strb	r5, [r0, #9]
10058268:	9802      	ldr	r0, [sp, #8]
1005826a:	1c80      	adds	r0, r0, #2
1005826c:	b282      	uxth	r2, r0
1005826e:	2106      	movs	r1, #6
10058270:	4638      	mov	r0, r7
10058272:	f7fb fade 	bl	10053832 <ACL_pkt_write_16b>
10058276:	2108      	movs	r1, #8
10058278:	4638      	mov	r0, r7
1005827a:	9d04      	ldr	r5, [sp, #16]
1005827c:	462a      	mov	r2, r5
1005827e:	f7fb fad8 	bl	10053832 <ACL_pkt_write_16b>
10058282:	2d00      	cmp	r5, #0
10058284:	d005      	beq.n	10058292 <L2C_build_command_reject_pdu+0x92>
10058286:	210a      	movs	r1, #10
10058288:	4638      	mov	r0, r7
1005828a:	9a02      	ldr	r2, [sp, #8]
1005828c:	9b03      	ldr	r3, [sp, #12]
1005828e:	f7fb fad9 	bl	10053844 <ACL_pkt_write>
10058292:	9801      	ldr	r0, [sp, #4]
10058294:	8078      	strh	r0, [r7, #2]
10058296:	2005      	movs	r0, #5
10058298:	4639      	mov	r1, r7
1005829a:	f000 f8d7 	bl	1005844c <L2C_send_frame>
1005829e:	2800      	cmp	r0, #0
100582a0:	d006      	beq.n	100582b0 <L2C_build_command_reject_pdu+0xb0>
100582a2:	4638      	mov	r0, r7
100582a4:	f7fb fa90 	bl	100537c8 <ACL_pkt_release>
100582a8:	2681      	movs	r6, #129	@ 0x81
100582aa:	e7c4      	b.n	10058236 <L2C_build_command_reject_pdu+0x36>
100582ac:	2688      	movs	r6, #136	@ 0x88
100582ae:	e7c2      	b.n	10058236 <L2C_build_command_reject_pdu+0x36>
100582b0:	71a6      	strb	r6, [r4, #6]
100582b2:	78a0      	ldrb	r0, [r4, #2]
100582b4:	21fb      	movs	r1, #251	@ 0xfb
100582b6:	4001      	ands	r1, r0
100582b8:	70a1      	strb	r1, [r4, #2]
100582ba:	e7bc      	b.n	10058236 <L2C_build_command_reject_pdu+0x36>

100582bc <l2c_cos_channel_descriptor_reset>:
100582bc:	b570      	push	{r4, r5, r6, lr}
100582be:	4604      	mov	r4, r0
100582c0:	2022      	movs	r0, #34	@ 0x22
100582c2:	4910      	ldr	r1, [pc, #64]	@ (10058304 <__arm_cp.4_0>)
100582c4:	5c08      	ldrb	r0, [r1, r0]
100582c6:	42a0      	cmp	r0, r4
100582c8:	d91b      	bls.n	10058302 <l2c_cos_channel_descriptor_reset+0x46>
100582ca:	4d0f      	ldr	r5, [pc, #60]	@ (10058308 <__arm_cp.4_1>)
100582cc:	6829      	ldr	r1, [r5, #0]
100582ce:	2030      	movs	r0, #48	@ 0x30
100582d0:	5c0a      	ldrb	r2, [r1, r0]
100582d2:	1c52      	adds	r2, r2, #1
100582d4:	540a      	strb	r2, [r1, r0]
100582d6:	2234      	movs	r2, #52	@ 0x34
100582d8:	4354      	muls	r4, r2
100582da:	3130      	adds	r1, #48	@ 0x30
100582dc:	6848      	ldr	r0, [r1, #4]
100582de:	1900      	adds	r0, r0, r4
100582e0:	7883      	ldrb	r3, [r0, #2]
100582e2:	071b      	lsls	r3, r3, #28
100582e4:	d505      	bpl.n	100582f2 <l2c_cos_channel_descriptor_reset+0x36>
100582e6:	78c3      	ldrb	r3, [r0, #3]
100582e8:	2b11      	cmp	r3, #17
100582ea:	d302      	bcc.n	100582f2 <l2c_cos_channel_descriptor_reset+0x36>
100582ec:	784b      	ldrb	r3, [r1, #1]
100582ee:	1e5b      	subs	r3, r3, #1
100582f0:	704b      	strb	r3, [r1, #1]
100582f2:	8946      	ldrh	r6, [r0, #10]
100582f4:	2100      	movs	r1, #0
100582f6:	f7f8 fedf 	bl	100510b8 <BLEPLAT_MemSet>
100582fa:	6828      	ldr	r0, [r5, #0]
100582fc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
100582fe:	1900      	adds	r0, r0, r4
10058300:	8146      	strh	r6, [r0, #10]
10058302:	bd70      	pop	{r4, r5, r6, pc}

10058304 <__arm_cp.4_0>:
10058304:	2000247c 	.word	0x2000247c

10058308 <__arm_cp.4_1>:
10058308:	20002460 	.word	0x20002460

1005830c <L2C_cos_channel_descriptors_reset_pending>:
1005830c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005830e:	460c      	mov	r4, r1
10058310:	4605      	mov	r5, r0
10058312:	2022      	movs	r0, #34	@ 0x22
10058314:	4912      	ldr	r1, [pc, #72]	@ (10058360 <__arm_cp.5_0>)
10058316:	9002      	str	r0, [sp, #8]
10058318:	5c08      	ldrb	r0, [r1, r0]
1005831a:	2700      	movs	r7, #0
1005831c:	2603      	movs	r6, #3
1005831e:	4b11      	ldr	r3, [pc, #68]	@ (10058364 <__arm_cp.5_1>)
10058320:	9501      	str	r5, [sp, #4]
10058322:	b2c1      	uxtb	r1, r0
10058324:	428f      	cmp	r7, r1
10058326:	d219      	bcs.n	1005835c <L2C_cos_channel_descriptors_reset_pending+0x50>
10058328:	6819      	ldr	r1, [r3, #0]
1005832a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005832c:	198a      	adds	r2, r1, r6
1005832e:	1ed2      	subs	r2, r2, #3
10058330:	8812      	ldrh	r2, [r2, #0]
10058332:	42aa      	cmp	r2, r5
10058334:	d10f      	bne.n	10058356 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10058336:	2cff      	cmp	r4, #255	@ 0xff
10058338:	d002      	beq.n	10058340 <L2C_cos_channel_descriptors_reset_pending+0x34>
1005833a:	5d89      	ldrb	r1, [r1, r6]
1005833c:	42a1      	cmp	r1, r4
1005833e:	d10a      	bne.n	10058356 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10058340:	b2f8      	uxtb	r0, r7
10058342:	4625      	mov	r5, r4
10058344:	461c      	mov	r4, r3
10058346:	f7ff ffb9 	bl	100582bc <l2c_cos_channel_descriptor_reset>
1005834a:	4623      	mov	r3, r4
1005834c:	462c      	mov	r4, r5
1005834e:	9d01      	ldr	r5, [sp, #4]
10058350:	9802      	ldr	r0, [sp, #8]
10058352:	4903      	ldr	r1, [pc, #12]	@ (10058360 <__arm_cp.5_0>)
10058354:	5c08      	ldrb	r0, [r1, r0]
10058356:	3634      	adds	r6, #52	@ 0x34
10058358:	1c7f      	adds	r7, r7, #1
1005835a:	e7e2      	b.n	10058322 <L2C_cos_channel_descriptors_reset_pending+0x16>
1005835c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005835e:	46c0      	nop			@ (mov r8, r8)

10058360 <__arm_cp.5_0>:
10058360:	2000247c 	.word	0x2000247c

10058364 <__arm_cp.5_1>:
10058364:	20002460 	.word	0x20002460

10058368 <l2c_cos_csr_ucfg_weak>:
10058368:	2000      	movs	r0, #0
1005836a:	4770      	bx	lr

1005836c <L2C_cos_cfc_init_ucfg_weak>:
1005836c:	2000      	movs	r0, #0
1005836e:	4770      	bx	lr

10058370 <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
10058370:	4770      	bx	lr

10058372 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
10058372:	4770      	bx	lr

10058374 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10058374:	2000      	movs	r0, #0
10058376:	4770      	bx	lr

10058378 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10058378:	4770      	bx	lr

1005837a <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
1005837a:	4770      	bx	lr

1005837c <l2cap_timers_callback_wrapper>:
1005837c:	b580      	push	{r7, lr}
1005837e:	6940      	ldr	r0, [r0, #20]
10058380:	4901      	ldr	r1, [pc, #4]	@ (10058388 <__arm_cp.0_0>)
10058382:	f009 f856 	bl	10061432 <cst_sharedCallback>
10058386:	bd80      	pop	{r7, pc}

10058388 <__arm_cp.0_0>:
10058388:	1005838d 	.word	0x1005838d

1005838c <l2cap_timers_callback>:
1005838c:	b580      	push	{r7, lr}
1005838e:	4903      	ldr	r1, [pc, #12]	@ (1005839c <__arm_cp.1_0>)
10058390:	7ac9      	ldrb	r1, [r1, #11]
10058392:	4281      	cmp	r1, r0
10058394:	d301      	bcc.n	1005839a <l2cap_timers_callback+0xe>
10058396:	f000 fa77 	bl	10058888 <L2C_timeout_handler_signalling>
1005839a:	bd80      	pop	{r7, pc}

1005839c <__arm_cp.1_0>:
1005839c:	2000247c 	.word	0x2000247c

100583a0 <L2C_init>:
100583a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100583a2:	4605      	mov	r5, r0
100583a4:	2001      	movs	r0, #1
100583a6:	2168      	movs	r1, #104	@ 0x68
100583a8:	f007 f936 	bl	1005f618 <csmem_mem_0_assign>
100583ac:	4f23      	ldr	r7, [pc, #140]	@ (1005843c <__arm_cp.3_0>)
100583ae:	6038      	str	r0, [r7, #0]
100583b0:	4e23      	ldr	r6, [pc, #140]	@ (10058440 <__arm_cp.3_1>)
100583b2:	7af0      	ldrb	r0, [r6, #11]
100583b4:	2414      	movs	r4, #20
100583b6:	4621      	mov	r1, r4
100583b8:	f007 f92e 	bl	1005f618 <csmem_mem_0_assign>
100583bc:	4601      	mov	r1, r0
100583be:	6838      	ldr	r0, [r7, #0]
100583c0:	62c1      	str	r1, [r0, #44]	@ 0x2c
100583c2:	2d01      	cmp	r5, #1
100583c4:	d110      	bne.n	100583e8 <L2C_init+0x48>
100583c6:	305c      	adds	r0, #92	@ 0x5c
100583c8:	f009 f8ee 	bl	100615a8 <ACL_list_init>
100583cc:	2522      	movs	r5, #34	@ 0x22
100583ce:	5d70      	ldrb	r0, [r6, r5]
100583d0:	2134      	movs	r1, #52	@ 0x34
100583d2:	f007 f921 	bl	1005f618 <csmem_mem_0_assign>
100583d6:	6839      	ldr	r1, [r7, #0]
100583d8:	6348      	str	r0, [r1, #52]	@ 0x34
100583da:	5d70      	ldrb	r0, [r6, r5]
100583dc:	0040      	lsls	r0, r0, #1
100583de:	2110      	movs	r1, #16
100583e0:	f007 f91a 	bl	1005f618 <csmem_mem_0_assign>
100583e4:	6839      	ldr	r1, [r7, #0]
100583e6:	6488      	str	r0, [r1, #72]	@ 0x48
100583e8:	7af0      	ldrb	r0, [r6, #11]
100583ea:	1c41      	adds	r1, r0, #1
100583ec:	4d15      	ldr	r5, [pc, #84]	@ (10058444 <__arm_cp.3_2>)
100583ee:	2201      	movs	r2, #1
100583f0:	4628      	mov	r0, r5
100583f2:	f007 f8ff 	bl	1005f5f4 <csmem_mem_assign>
100583f6:	6839      	ldr	r1, [r7, #0]
100583f8:	6208      	str	r0, [r1, #32]
100583fa:	7af1      	ldrb	r1, [r6, #11]
100583fc:	2202      	movs	r2, #2
100583fe:	4628      	mov	r0, r5
10058400:	f007 f8f8 	bl	1005f5f4 <csmem_mem_assign>
10058404:	683d      	ldr	r5, [r7, #0]
10058406:	6268      	str	r0, [r5, #36]	@ 0x24
10058408:	7af1      	ldrb	r1, [r6, #11]
1005840a:	4a0f      	ldr	r2, [pc, #60]	@ (10058448 <__arm_cp.3_3>)
1005840c:	2307      	movs	r3, #7
1005840e:	4628      	mov	r0, r5
10058410:	f008 ff36 	bl	10061280 <CST_init>
10058414:	6838      	ldr	r0, [r7, #0]
10058416:	2117      	movs	r1, #23
10058418:	8501      	strh	r1, [r0, #40]	@ 0x28
1005841a:	8c31      	ldrh	r1, [r6, #32]
1005841c:	2917      	cmp	r1, #23
1005841e:	d201      	bcs.n	10058424 <L2C_init+0x84>
10058420:	2086      	movs	r0, #134	@ 0x86
10058422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10058424:	8541      	strh	r1, [r0, #42]	@ 0x2a
10058426:	7af1      	ldrb	r1, [r6, #11]
10058428:	434c      	muls	r4, r1
1005842a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005842c:	2100      	movs	r1, #0
1005842e:	4622      	mov	r2, r4
10058430:	f7f8 fe42 	bl	100510b8 <BLEPLAT_MemSet>
10058434:	f7ff ff9a 	bl	1005836c <L2C_cos_cfc_init_ucfg_weak>
10058438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005843a:	46c0      	nop			@ (mov r8, r8)

1005843c <__arm_cp.3_0>:
1005843c:	20002460 	.word	0x20002460

10058440 <__arm_cp.3_1>:
10058440:	2000247c 	.word	0x2000247c

10058444 <__arm_cp.3_2>:
10058444:	20002478 	.word	0x20002478

10058448 <__arm_cp.3_3>:
10058448:	1005837d 	.word	0x1005837d

1005844c <L2C_send_frame>:
1005844c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005844e:	460c      	mov	r4, r1
10058450:	1f01      	subs	r1, r0, #4
10058452:	4606      	mov	r6, r0
10058454:	2902      	cmp	r1, #2
10058456:	d821      	bhi.n	1005849c <L2C_send_frame+0x50>
10058458:	8862      	ldrh	r2, [r4, #2]
1005845a:	2500      	movs	r5, #0
1005845c:	4620      	mov	r0, r4
1005845e:	4629      	mov	r1, r5
10058460:	f7fb f9e7 	bl	10053832 <ACL_pkt_write_16b>
10058464:	2702      	movs	r7, #2
10058466:	4620      	mov	r0, r4
10058468:	4639      	mov	r1, r7
1005846a:	4632      	mov	r2, r6
1005846c:	f7fb f9e1 	bl	10053832 <ACL_pkt_write_16b>
10058470:	8225      	strh	r5, [r4, #16]
10058472:	81e5      	strh	r5, [r4, #14]
10058474:	7325      	strb	r5, [r4, #12]
10058476:	6860      	ldr	r0, [r4, #4]
10058478:	6160      	str	r0, [r4, #20]
1005847a:	61a0      	str	r0, [r4, #24]
1005847c:	8860      	ldrh	r0, [r4, #2]
1005847e:	1d00      	adds	r0, r0, #4
10058480:	8060      	strh	r0, [r4, #2]
10058482:	7a20      	ldrb	r0, [r4, #8]
10058484:	4338      	orrs	r0, r7
10058486:	7220      	strb	r0, [r4, #8]
10058488:	4620      	mov	r0, r4
1005848a:	f7fb f909 	bl	100536a0 <Acl_Transmit_Data>
1005848e:	2800      	cmp	r0, #0
10058490:	d014      	beq.n	100584bc <L2C_send_frame+0x70>
10058492:	8860      	ldrh	r0, [r4, #2]
10058494:	1f00      	subs	r0, r0, #4
10058496:	8060      	strh	r0, [r4, #2]
10058498:	2581      	movs	r5, #129	@ 0x81
1005849a:	e00f      	b.n	100584bc <L2C_send_frame+0x70>
1005849c:	25a0      	movs	r5, #160	@ 0xa0
1005849e:	283f      	cmp	r0, #63	@ 0x3f
100584a0:	d00c      	beq.n	100584bc <L2C_send_frame+0x70>
100584a2:	3820      	subs	r0, #32
100584a4:	285f      	cmp	r0, #95	@ 0x5f
100584a6:	d809      	bhi.n	100584bc <L2C_send_frame+0x70>
100584a8:	a801      	add	r0, sp, #4
100584aa:	8086      	strh	r6, [r0, #4]
100584ac:	2122      	movs	r1, #34	@ 0x22
100584ae:	4a04      	ldr	r2, [pc, #16]	@ (100584c0 <__arm_cp.4_0>)
100584b0:	5c51      	ldrb	r1, [r2, r1]
100584b2:	7181      	strb	r1, [r0, #6]
100584b4:	9401      	str	r4, [sp, #4]
100584b6:	f7ff ff5d 	bl	10058374 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
100584ba:	4605      	mov	r5, r0
100584bc:	4628      	mov	r0, r5
100584be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100584c0 <__arm_cp.4_0>:
100584c0:	2000247c 	.word	0x2000247c

100584c4 <L2C_receive_data>:
100584c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100584c6:	b0c3      	sub	sp, #268	@ 0x10c
100584c8:	4604      	mov	r4, r0
100584ca:	8800      	ldrh	r0, [r0, #0]
100584cc:	f7ff fe06 	bl	100580dc <l2c_get_link_control_block_ref>
100584d0:	2800      	cmp	r0, #0
100584d2:	d07c      	beq.n	100585ce <L2C_receive_data+0x10a>
100584d4:	4605      	mov	r5, r0
100584d6:	7a20      	ldrb	r0, [r4, #8]
100584d8:	2703      	movs	r7, #3
100584da:	4007      	ands	r7, r0
100584dc:	6928      	ldr	r0, [r5, #16]
100584de:	462a      	mov	r2, r5
100584e0:	320c      	adds	r2, #12
100584e2:	2f02      	cmp	r7, #2
100584e4:	9203      	str	r2, [sp, #12]
100584e6:	d108      	bne.n	100584fa <L2C_receive_data+0x36>
100584e8:	2800      	cmp	r0, #0
100584ea:	d02f      	beq.n	1005854c <L2C_receive_data+0x88>
100584ec:	8811      	ldrh	r1, [r2, #0]
100584ee:	2684      	movs	r6, #132	@ 0x84
100584f0:	2904      	cmp	r1, #4
100584f2:	d354      	bcc.n	1005859e <L2C_receive_data+0xda>
100584f4:	2101      	movs	r1, #1
100584f6:	9102      	str	r1, [sp, #8]
100584f8:	e031      	b.n	1005855e <L2C_receive_data+0x9a>
100584fa:	2800      	cmp	r0, #0
100584fc:	d04a      	beq.n	10058594 <L2C_receive_data+0xd0>
100584fe:	8866      	ldrh	r6, [r4, #2]
10058500:	2e00      	cmp	r6, #0
10058502:	d026      	beq.n	10058552 <L2C_receive_data+0x8e>
10058504:	2100      	movs	r1, #0
10058506:	9101      	str	r1, [sp, #4]
10058508:	a804      	add	r0, sp, #16
1005850a:	9002      	str	r0, [sp, #8]
1005850c:	4620      	mov	r0, r4
1005850e:	4632      	mov	r2, r6
10058510:	9b02      	ldr	r3, [sp, #8]
10058512:	f7fb f975 	bl	10053800 <ACL_pkt_read>
10058516:	6928      	ldr	r0, [r5, #16]
10058518:	6840      	ldr	r0, [r0, #4]
1005851a:	9000      	str	r0, [sp, #0]
1005851c:	4620      	mov	r0, r4
1005851e:	f7fb f99a 	bl	10053856 <ACL_pkt_extract_pdu>
10058522:	4601      	mov	r1, r0
10058524:	9800      	ldr	r0, [sp, #0]
10058526:	f007 fa0a 	bl	1005f93e <Mem_Buff_append>
1005852a:	89a9      	ldrh	r1, [r5, #12]
1005852c:	6928      	ldr	r0, [r5, #16]
1005852e:	4632      	mov	r2, r6
10058530:	9b02      	ldr	r3, [sp, #8]
10058532:	f7fb f987 	bl	10053844 <ACL_pkt_write>
10058536:	89a8      	ldrh	r0, [r5, #12]
10058538:	1980      	adds	r0, r0, r6
1005853a:	81a8      	strh	r0, [r5, #12]
1005853c:	b281      	uxth	r1, r0
1005853e:	6928      	ldr	r0, [r5, #16]
10058540:	f7fb f94b 	bl	100537da <ACL_pkt_resize>
10058544:	9a03      	ldr	r2, [sp, #12]
10058546:	9801      	ldr	r0, [sp, #4]
10058548:	8060      	strh	r0, [r4, #2]
1005854a:	e002      	b.n	10058552 <L2C_receive_data+0x8e>
1005854c:	612c      	str	r4, [r5, #16]
1005854e:	8860      	ldrh	r0, [r4, #2]
10058550:	81a8      	strh	r0, [r5, #12]
10058552:	8810      	ldrh	r0, [r2, #0]
10058554:	2804      	cmp	r0, #4
10058556:	d31b      	bcc.n	10058590 <L2C_receive_data+0xcc>
10058558:	6928      	ldr	r0, [r5, #16]
1005855a:	2600      	movs	r6, #0
1005855c:	9602      	str	r6, [sp, #8]
1005855e:	2100      	movs	r1, #0
10058560:	9101      	str	r1, [sp, #4]
10058562:	f7fb f956 	bl	10053812 <ACL_pkt_read_16b>
10058566:	1d00      	adds	r0, r0, #4
10058568:	b281      	uxth	r1, r0
1005856a:	89aa      	ldrh	r2, [r5, #12]
1005856c:	428a      	cmp	r2, r1
1005856e:	d816      	bhi.n	1005859e <L2C_receive_data+0xda>
10058570:	d112      	bne.n	10058598 <L2C_receive_data+0xd4>
10058572:	6929      	ldr	r1, [r5, #16]
10058574:	8048      	strh	r0, [r1, #2]
10058576:	2001      	movs	r0, #1
10058578:	f000 f832 	bl	100585e0 <L2C_mux_acl_packet>
1005857c:	2800      	cmp	r0, #0
1005857e:	d02d      	beq.n	100585dc <L2C_receive_data+0x118>
10058580:	6928      	ldr	r0, [r5, #16]
10058582:	2684      	movs	r6, #132	@ 0x84
10058584:	42a0      	cmp	r0, r4
10058586:	d126      	bne.n	100585d6 <L2C_receive_data+0x112>
10058588:	9801      	ldr	r0, [sp, #4]
1005858a:	81a8      	strh	r0, [r5, #12]
1005858c:	6128      	str	r0, [r5, #16]
1005858e:	e022      	b.n	100585d6 <L2C_receive_data+0x112>
10058590:	2600      	movs	r6, #0
10058592:	e018      	b.n	100585c6 <L2C_receive_data+0x102>
10058594:	2600      	movs	r6, #0
10058596:	e002      	b.n	1005859e <L2C_receive_data+0xda>
10058598:	9802      	ldr	r0, [sp, #8]
1005859a:	2800      	cmp	r0, #0
1005859c:	d013      	beq.n	100585c6 <L2C_receive_data+0x102>
1005859e:	78a8      	ldrb	r0, [r5, #2]
100585a0:	2110      	movs	r1, #16
100585a2:	4301      	orrs	r1, r0
100585a4:	70a9      	strb	r1, [r5, #2]
100585a6:	2042      	movs	r0, #66	@ 0x42
100585a8:	2101      	movs	r1, #1
100585aa:	2202      	movs	r2, #2
100585ac:	462b      	mov	r3, r5
100585ae:	f00a f9ff 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
100585b2:	6928      	ldr	r0, [r5, #16]
100585b4:	2800      	cmp	r0, #0
100585b6:	d006      	beq.n	100585c6 <L2C_receive_data+0x102>
100585b8:	f7fb f906 	bl	100537c8 <ACL_pkt_release>
100585bc:	2000      	movs	r0, #0
100585be:	6128      	str	r0, [r5, #16]
100585c0:	9903      	ldr	r1, [sp, #12]
100585c2:	2000      	movs	r0, #0
100585c4:	8008      	strh	r0, [r1, #0]
100585c6:	2e00      	cmp	r6, #0
100585c8:	d105      	bne.n	100585d6 <L2C_receive_data+0x112>
100585ca:	2f01      	cmp	r7, #1
100585cc:	d103      	bne.n	100585d6 <L2C_receive_data+0x112>
100585ce:	4620      	mov	r0, r4
100585d0:	f7fb f8fa 	bl	100537c8 <ACL_pkt_release>
100585d4:	2600      	movs	r6, #0
100585d6:	4630      	mov	r0, r6
100585d8:	b043      	add	sp, #268	@ 0x10c
100585da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100585dc:	9801      	ldr	r0, [sp, #4]
100585de:	e7ee      	b.n	100585be <L2C_receive_data+0xfa>

100585e0 <L2C_mux_acl_packet>:
100585e0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100585e2:	460c      	mov	r4, r1
100585e4:	4605      	mov	r5, r0
100585e6:	8848      	ldrh	r0, [r1, #2]
100585e8:	1f00      	subs	r0, r0, #4
100585ea:	8048      	strh	r0, [r1, #2]
100585ec:	4608      	mov	r0, r1
100585ee:	f7ff fe02 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
100585f2:	1f01      	subs	r1, r0, #4
100585f4:	2902      	cmp	r1, #2
100585f6:	d80c      	bhi.n	10058612 <L2C_mux_acl_packet+0x32>
100585f8:	2806      	cmp	r0, #6
100585fa:	d01a      	beq.n	10058632 <L2C_mux_acl_packet+0x52>
100585fc:	2805      	cmp	r0, #5
100585fe:	d01d      	beq.n	1005863c <L2C_mux_acl_packet+0x5c>
10058600:	2804      	cmp	r0, #4
10058602:	d111      	bne.n	10058628 <L2C_mux_acl_packet+0x48>
10058604:	2004      	movs	r0, #4
10058606:	81a0      	strh	r0, [r4, #12]
10058608:	4628      	mov	r0, r5
1005860a:	4621      	mov	r1, r4
1005860c:	f7fc ff2c 	bl	10055468 <GAT_att_cmn_rcv>
10058610:	e018      	b.n	10058644 <L2C_mux_acl_packet+0x64>
10058612:	283f      	cmp	r0, #63	@ 0x3f
10058614:	d008      	beq.n	10058628 <L2C_mux_acl_packet+0x48>
10058616:	3820      	subs	r0, #32
10058618:	285f      	cmp	r0, #95	@ 0x5f
1005861a:	d805      	bhi.n	10058628 <L2C_mux_acl_packet+0x48>
1005861c:	4668      	mov	r0, sp
1005861e:	7005      	strb	r5, [r0, #0]
10058620:	9401      	str	r4, [sp, #4]
10058622:	f00b fb8b 	bl	10063d3c <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10058626:	e00d      	b.n	10058644 <L2C_mux_acl_packet+0x64>
10058628:	4628      	mov	r0, r5
1005862a:	4621      	mov	r1, r4
1005862c:	f7ff fdde 	bl	100581ec <l2c_release_unexpected_acl_packet>
10058630:	e00e      	b.n	10058650 <L2C_mux_acl_packet+0x70>
10058632:	4628      	mov	r0, r5
10058634:	4621      	mov	r1, r4
10058636:	f008 fb8d 	bl	10060d54 <smp_sap_l2c_acl_data_hndl>
1005863a:	e003      	b.n	10058644 <L2C_mux_acl_packet+0x64>
1005863c:	4628      	mov	r0, r5
1005863e:	4621      	mov	r1, r4
10058640:	f000 f808 	bl	10058654 <L2C_acl_cframe_signaling_hndl>
10058644:	2800      	cmp	r0, #0
10058646:	d003      	beq.n	10058650 <L2C_mux_acl_packet+0x70>
10058648:	8861      	ldrh	r1, [r4, #2]
1005864a:	1d09      	adds	r1, r1, #4
1005864c:	8061      	strh	r1, [r4, #2]
1005864e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10058650:	2000      	movs	r0, #0
10058652:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10058654 <L2C_acl_cframe_signaling_hndl>:
10058654:	b5f0      	push	{r4, r5, r6, r7, lr}
10058656:	b085      	sub	sp, #20
10058658:	460c      	mov	r4, r1
1005865a:	4606      	mov	r6, r0
1005865c:	880f      	ldrh	r7, [r1, #0]
1005865e:	4638      	mov	r0, r7
10058660:	f7ff fd58 	bl	10058114 <l2c_get_link_control_block_index>
10058664:	4605      	mov	r5, r0
10058666:	4880      	ldr	r0, [pc, #512]	@ (10058868 <__arm_cp.7_0>)
10058668:	7ac1      	ldrb	r1, [r0, #11]
1005866a:	428d      	cmp	r5, r1
1005866c:	d206      	bcs.n	1005867c <L2C_acl_cframe_signaling_hndl+0x28>
1005866e:	2014      	movs	r0, #20
10058670:	4368      	muls	r0, r5
10058672:	4a7e      	ldr	r2, [pc, #504]	@ (1005886c <__arm_cp.7_1>)
10058674:	6812      	ldr	r2, [r2, #0]
10058676:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10058678:	1810      	adds	r0, r2, r0
1005867a:	9002      	str	r0, [sp, #8]
1005867c:	6862      	ldr	r2, [r4, #4]
1005867e:	7a10      	ldrb	r0, [r2, #8]
10058680:	2300      	movs	r3, #0
10058682:	2e01      	cmp	r6, #1
10058684:	d01c      	beq.n	100586c0 <L2C_acl_cframe_signaling_hndl+0x6c>
10058686:	2e00      	cmp	r6, #0
10058688:	d13c      	bne.n	10058704 <L2C_acl_cframe_signaling_hndl+0xb0>
1005868a:	461e      	mov	r6, r3
1005868c:	428d      	cmp	r5, r1
1005868e:	d212      	bcs.n	100586b6 <L2C_acl_cframe_signaling_hndl+0x62>
10058690:	2819      	cmp	r0, #25
10058692:	d80b      	bhi.n	100586ac <L2C_acl_cframe_signaling_hndl+0x58>
10058694:	2101      	movs	r1, #1
10058696:	4081      	lsls	r1, r0
10058698:	4879      	ldr	r0, [pc, #484]	@ (10058880 <__arm_cp.7_6>)
1005869a:	4201      	tst	r1, r0
1005869c:	d006      	beq.n	100586ac <L2C_acl_cframe_signaling_hndl+0x58>
1005869e:	4873      	ldr	r0, [pc, #460]	@ (1005886c <__arm_cp.7_1>)
100586a0:	6800      	ldr	r0, [r0, #0]
100586a2:	2201      	movs	r2, #1
100586a4:	4b77      	ldr	r3, [pc, #476]	@ (10058884 <__arm_cp.7_7>)
100586a6:	4629      	mov	r1, r5
100586a8:	f008 fe35 	bl	10061316 <CST_start>
100586ac:	9a02      	ldr	r2, [sp, #8]
100586ae:	7890      	ldrb	r0, [r2, #2]
100586b0:	21fd      	movs	r1, #253	@ 0xfd
100586b2:	4001      	ands	r1, r0
100586b4:	7091      	strb	r1, [r2, #2]
100586b6:	4620      	mov	r0, r4
100586b8:	f7fb f886 	bl	100537c8 <ACL_pkt_release>
100586bc:	4630      	mov	r0, r6
100586be:	e0d0      	b.n	10058862 <L2C_acl_cframe_signaling_hndl+0x20e>
100586c0:	428d      	cmp	r5, r1
100586c2:	d300      	bcc.n	100586c6 <L2C_acl_cframe_signaling_hndl+0x72>
100586c4:	e0c8      	b.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
100586c6:	7a56      	ldrb	r6, [r2, #9]
100586c8:	2813      	cmp	r0, #19
100586ca:	d81d      	bhi.n	10058708 <L2C_acl_cframe_signaling_hndl+0xb4>
100586cc:	2101      	movs	r1, #1
100586ce:	9100      	str	r1, [sp, #0]
100586d0:	4081      	lsls	r1, r0
100586d2:	4a67      	ldr	r2, [pc, #412]	@ (10058870 <__arm_cp.7_2>)
100586d4:	4211      	tst	r1, r2
100586d6:	d017      	beq.n	10058708 <L2C_acl_cframe_signaling_hndl+0xb4>
100586d8:	2801      	cmp	r0, #1
100586da:	d021      	beq.n	10058720 <L2C_acl_cframe_signaling_hndl+0xcc>
100586dc:	2114      	movs	r1, #20
100586de:	4a63      	ldr	r2, [pc, #396]	@ (1005886c <__arm_cp.7_1>)
100586e0:	6812      	ldr	r2, [r2, #0]
100586e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
100586e4:	2813      	cmp	r0, #19
100586e6:	d03e      	beq.n	10058766 <L2C_acl_cframe_signaling_hndl+0x112>
100586e8:	2812      	cmp	r0, #18
100586ea:	d000      	beq.n	100586ee <L2C_acl_cframe_signaling_hndl+0x9a>
100586ec:	e0b4      	b.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
100586ee:	9301      	str	r3, [sp, #4]
100586f0:	4608      	mov	r0, r1
100586f2:	4368      	muls	r0, r5
100586f4:	1810      	adds	r0, r2, r0
100586f6:	7883      	ldrb	r3, [r0, #2]
100586f8:	07df      	lsls	r7, r3, #31
100586fa:	d166      	bne.n	100587ca <L2C_acl_cframe_signaling_hndl+0x176>
100586fc:	7146      	strb	r6, [r0, #5]
100586fe:	8820      	ldrh	r0, [r4, #0]
10058700:	2200      	movs	r2, #0
10058702:	e09d      	b.n	10058840 <L2C_acl_cframe_signaling_hndl+0x1ec>
10058704:	4618      	mov	r0, r3
10058706:	e0ac      	b.n	10058862 <L2C_acl_cframe_signaling_hndl+0x20e>
10058708:	9301      	str	r3, [sp, #4]
1005870a:	f00b fb15 	bl	10063d38 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
1005870e:	2800      	cmp	r0, #0
10058710:	d100      	bne.n	10058714 <L2C_acl_cframe_signaling_hndl+0xc0>
10058712:	e091      	b.n	10058838 <L2C_acl_cframe_signaling_hndl+0x1e4>
10058714:	a803      	add	r0, sp, #12
10058716:	7105      	strb	r5, [r0, #4]
10058718:	9403      	str	r4, [sp, #12]
1005871a:	f00b fb0b 	bl	10063d34 <L2C_cos_process_cfc_mode_command_ucfg_weak>
1005871e:	e093      	b.n	10058848 <L2C_acl_cframe_signaling_hndl+0x1f4>
10058720:	2701      	movs	r7, #1
10058722:	4628      	mov	r0, r5
10058724:	4639      	mov	r1, r7
10058726:	4632      	mov	r2, r6
10058728:	9301      	str	r3, [sp, #4]
1005872a:	f7ff fd2f 	bl	1005818c <l2c_pre_process_incoming_response_packet>
1005872e:	9b01      	ldr	r3, [sp, #4]
10058730:	2800      	cmp	r0, #0
10058732:	d000      	beq.n	10058736 <L2C_acl_cframe_signaling_hndl+0xe2>
10058734:	e090      	b.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
10058736:	8826      	ldrh	r6, [r4, #0]
10058738:	484e      	ldr	r0, [pc, #312]	@ (10058874 <__arm_cp.7_3>)
1005873a:	6800      	ldr	r0, [r0, #0]
1005873c:	6980      	ldr	r0, [r0, #24]
1005873e:	2142      	movs	r1, #66	@ 0x42
10058740:	2252      	movs	r2, #82	@ 0x52
10058742:	2303      	movs	r3, #3
10058744:	f7fb f9f4 	bl	10053b30 <aci_event_fifo_push_header>
10058748:	9b01      	ldr	r3, [sp, #4]
1005874a:	2800      	cmp	r0, #0
1005874c:	d100      	bne.n	10058750 <L2C_acl_cframe_signaling_hndl+0xfc>
1005874e:	e083      	b.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
10058750:	4605      	mov	r5, r0
10058752:	4631      	mov	r1, r6
10058754:	1d06      	adds	r6, r0, #4
10058756:	4630      	mov	r0, r6
10058758:	4622      	mov	r2, r4
1005875a:	f7fb fd79 	bl	10054250 <aci_l2cap_command_reject_event_copy>
1005875e:	02f8      	lsls	r0, r7, #11
10058760:	300a      	adds	r0, #10
10058762:	2108      	movs	r1, #8
10058764:	e058      	b.n	10058818 <L2C_acl_cframe_signaling_hndl+0x1c4>
10058766:	4369      	muls	r1, r5
10058768:	1850      	adds	r0, r2, r1
1005876a:	7880      	ldrb	r0, [r0, #2]
1005876c:	07c0      	lsls	r0, r0, #31
1005876e:	d173      	bne.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
10058770:	2113      	movs	r1, #19
10058772:	4628      	mov	r0, r5
10058774:	4632      	mov	r2, r6
10058776:	9301      	str	r3, [sp, #4]
10058778:	f7ff fd08 	bl	1005818c <l2c_pre_process_incoming_response_packet>
1005877c:	9b01      	ldr	r3, [sp, #4]
1005877e:	2800      	cmp	r0, #0
10058780:	d16a      	bne.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
10058782:	2108      	movs	r1, #8
10058784:	4620      	mov	r0, r4
10058786:	f7fb f844 	bl	10053812 <ACL_pkt_read_16b>
1005878a:	9b01      	ldr	r3, [sp, #4]
1005878c:	4606      	mov	r6, r0
1005878e:	483a      	ldr	r0, [pc, #232]	@ (10058878 <__arm_cp.7_4>)
10058790:	6800      	ldr	r0, [r0, #0]
10058792:	214f      	movs	r1, #79	@ 0x4f
10058794:	5c40      	ldrb	r0, [r0, r1]
10058796:	0780      	lsls	r0, r0, #30
10058798:	d55e      	bpl.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
1005879a:	8827      	ldrh	r7, [r4, #0]
1005879c:	4835      	ldr	r0, [pc, #212]	@ (10058874 <__arm_cp.7_3>)
1005879e:	6800      	ldr	r0, [r0, #0]
100587a0:	6980      	ldr	r0, [r0, #24]
100587a2:	2142      	movs	r1, #66	@ 0x42
100587a4:	224c      	movs	r2, #76	@ 0x4c
100587a6:	2303      	movs	r3, #3
100587a8:	f7fb f9c2 	bl	10053b30 <aci_event_fifo_push_header>
100587ac:	9b01      	ldr	r3, [sp, #4]
100587ae:	2800      	cmp	r0, #0
100587b0:	d052      	beq.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
100587b2:	4605      	mov	r5, r0
100587b4:	7306      	strb	r6, [r0, #12]
100587b6:	7287      	strb	r7, [r0, #10]
100587b8:	0a30      	lsrs	r0, r6, #8
100587ba:	7368      	strb	r0, [r5, #13]
100587bc:	0a38      	lsrs	r0, r7, #8
100587be:	72e8      	strb	r0, [r5, #11]
100587c0:	1d2e      	adds	r6, r5, #4
100587c2:	9800      	ldr	r0, [sp, #0]
100587c4:	02c0      	lsls	r0, r0, #11
100587c6:	2106      	movs	r1, #6
100587c8:	e026      	b.n	10058818 <L2C_acl_cframe_signaling_hndl+0x1c4>
100587ca:	0758      	lsls	r0, r3, #29
100587cc:	9b01      	ldr	r3, [sp, #4]
100587ce:	d443      	bmi.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
100587d0:	4369      	muls	r1, r5
100587d2:	1852      	adds	r2, r2, r1
100587d4:	2012      	movs	r0, #18
100587d6:	4631      	mov	r1, r6
100587d8:	f7ff fcd1 	bl	1005817e <l2c_post_process_incoming_request_packet>
100587dc:	9b01      	ldr	r3, [sp, #4]
100587de:	4826      	ldr	r0, [pc, #152]	@ (10058878 <__arm_cp.7_4>)
100587e0:	6800      	ldr	r0, [r0, #0]
100587e2:	214f      	movs	r1, #79	@ 0x4f
100587e4:	5c40      	ldrb	r0, [r0, r1]
100587e6:	07c0      	lsls	r0, r0, #31
100587e8:	d036      	beq.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
100587ea:	8827      	ldrh	r7, [r4, #0]
100587ec:	4821      	ldr	r0, [pc, #132]	@ (10058874 <__arm_cp.7_3>)
100587ee:	6800      	ldr	r0, [r0, #0]
100587f0:	6980      	ldr	r0, [r0, #24]
100587f2:	2142      	movs	r1, #66	@ 0x42
100587f4:	224d      	movs	r2, #77	@ 0x4d
100587f6:	2305      	movs	r3, #5
100587f8:	f7fb f99a 	bl	10053b30 <aci_event_fifo_push_header>
100587fc:	9b01      	ldr	r3, [sp, #4]
100587fe:	2800      	cmp	r0, #0
10058800:	d02a      	beq.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
10058802:	4605      	mov	r5, r0
10058804:	1d06      	adds	r6, r0, #4
10058806:	4630      	mov	r0, r6
10058808:	4639      	mov	r1, r7
1005880a:	4622      	mov	r2, r4
1005880c:	f7fb fcd8 	bl	100541c0 <aci_l2cap_connection_update_req_event_copy>
10058810:	9800      	ldr	r0, [sp, #0]
10058812:	02c0      	lsls	r0, r0, #11
10058814:	1c80      	adds	r0, r0, #2
10058816:	210f      	movs	r1, #15
10058818:	22ff      	movs	r2, #255	@ 0xff
1005881a:	7072      	strb	r2, [r6, #1]
1005881c:	2282      	movs	r2, #130	@ 0x82
1005881e:	7032      	strb	r2, [r6, #0]
10058820:	0a02      	lsrs	r2, r0, #8
10058822:	726a      	strb	r2, [r5, #9]
10058824:	7228      	strb	r0, [r5, #8]
10058826:	2000      	movs	r0, #0
10058828:	71e8      	strb	r0, [r5, #7]
1005882a:	71a9      	strb	r1, [r5, #6]
1005882c:	2042      	movs	r0, #66	@ 0x42
1005882e:	4629      	mov	r1, r5
10058830:	f7fb fa1b 	bl	10053c6a <aci_event_fifo_push>
10058834:	9b01      	ldr	r3, [sp, #4]
10058836:	e00f      	b.n	10058858 <L2C_acl_cframe_signaling_hndl+0x204>
10058838:	9802      	ldr	r0, [sp, #8]
1005883a:	7146      	strb	r6, [r0, #5]
1005883c:	2200      	movs	r2, #0
1005883e:	4638      	mov	r0, r7
10058840:	4631      	mov	r1, r6
10058842:	4613      	mov	r3, r2
10058844:	f7ff fcdc 	bl	10058200 <L2C_build_command_reject_pdu>
10058848:	9b01      	ldr	r3, [sp, #4]
1005884a:	2812      	cmp	r0, #18
1005884c:	d809      	bhi.n	10058862 <L2C_acl_cframe_signaling_hndl+0x20e>
1005884e:	2101      	movs	r1, #1
10058850:	4081      	lsls	r1, r0
10058852:	4a0a      	ldr	r2, [pc, #40]	@ (1005887c <__arm_cp.7_5>)
10058854:	4211      	tst	r1, r2
10058856:	d004      	beq.n	10058862 <L2C_acl_cframe_signaling_hndl+0x20e>
10058858:	4620      	mov	r0, r4
1005885a:	461c      	mov	r4, r3
1005885c:	f7fa ffb4 	bl	100537c8 <ACL_pkt_release>
10058860:	4620      	mov	r0, r4
10058862:	b005      	add	sp, #20
10058864:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058866:	46c0      	nop			@ (mov r8, r8)

10058868 <__arm_cp.7_0>:
10058868:	2000247c 	.word	0x2000247c

1005886c <__arm_cp.7_1>:
1005886c:	20002460 	.word	0x20002460

10058870 <__arm_cp.7_2>:
10058870:	000c0002 	.word	0x000c0002

10058874 <__arm_cp.7_3>:
10058874:	20002418 	.word	0x20002418

10058878 <__arm_cp.7_4>:
10058878:	20002468 	.word	0x20002468

1005887c <__arm_cp.7_5>:
1005887c:	00040005 	.word	0x00040005

10058880 <__arm_cp.7_6>:
10058880:	02940040 	.word	0x02940040

10058884 <__arm_cp.7_7>:
10058884:	00007530 	.word	0x00007530

10058888 <L2C_timeout_handler_signalling>:
10058888:	b570      	push	{r4, r5, r6, lr}
1005888a:	2414      	movs	r4, #20
1005888c:	4344      	muls	r4, r0
1005888e:	4d14      	ldr	r5, [pc, #80]	@ (100588e0 <__arm_cp.8_0>)
10058890:	4814      	ldr	r0, [pc, #80]	@ (100588e4 <__arm_cp.8_1>)
10058892:	6800      	ldr	r0, [r0, #0]
10058894:	214f      	movs	r1, #79	@ 0x4f
10058896:	5c40      	ldrb	r0, [r0, r1]
10058898:	0700      	lsls	r0, r0, #28
1005889a:	d513      	bpl.n	100588c4 <L2C_timeout_handler_signalling+0x3c>
1005889c:	6828      	ldr	r0, [r5, #0]
1005889e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100588a0:	5b06      	ldrh	r6, [r0, r4]
100588a2:	4811      	ldr	r0, [pc, #68]	@ (100588e8 <__arm_cp.8_2>)
100588a4:	6800      	ldr	r0, [r0, #0]
100588a6:	6980      	ldr	r0, [r0, #24]
100588a8:	2206      	movs	r2, #6
100588aa:	2102      	movs	r1, #2
100588ac:	460b      	mov	r3, r1
100588ae:	f7fb f93f 	bl	10053b30 <aci_event_fifo_push_header>
100588b2:	2800      	cmp	r0, #0
100588b4:	d006      	beq.n	100588c4 <L2C_timeout_handler_signalling+0x3c>
100588b6:	4601      	mov	r1, r0
100588b8:	480c      	ldr	r0, [pc, #48]	@ (100588ec <__arm_cp.8_3>)
100588ba:	6048      	str	r0, [r1, #4]
100588bc:	810e      	strh	r6, [r1, #8]
100588be:	2002      	movs	r0, #2
100588c0:	f7fb f9d3 	bl	10053c6a <aci_event_fifo_push>
100588c4:	6828      	ldr	r0, [r5, #0]
100588c6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100588c8:	1901      	adds	r1, r0, r4
100588ca:	2200      	movs	r2, #0
100588cc:	718a      	strb	r2, [r1, #6]
100588ce:	788a      	ldrb	r2, [r1, #2]
100588d0:	23f9      	movs	r3, #249	@ 0xf9
100588d2:	4013      	ands	r3, r2
100588d4:	708b      	strb	r3, [r1, #2]
100588d6:	5b00      	ldrh	r0, [r0, r4]
100588d8:	21ff      	movs	r1, #255	@ 0xff
100588da:	f7ff fd17 	bl	1005830c <L2C_cos_channel_descriptors_reset_pending>
100588de:	bd70      	pop	{r4, r5, r6, pc}

100588e0 <__arm_cp.8_0>:
100588e0:	20002460 	.word	0x20002460

100588e4 <__arm_cp.8_1>:
100588e4:	20002468 	.word	0x20002468

100588e8 <__arm_cp.8_2>:
100588e8:	20002418 	.word	0x20002418

100588ec <__arm_cp.8_3>:
100588ec:	10062979 	.word	0x10062979

100588f0 <l2c_sap_hci_le_connection_complete_evt_hndl>:
100588f0:	b5b0      	push	{r4, r5, r7, lr}
100588f2:	460c      	mov	r4, r1
100588f4:	4605      	mov	r5, r0
100588f6:	2000      	movs	r0, #0
100588f8:	f7ff fbf0 	bl	100580dc <l2c_get_link_control_block_ref>
100588fc:	2800      	cmp	r0, #0
100588fe:	d005      	beq.n	1005890c <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
10058900:	2101      	movs	r1, #1
10058902:	8081      	strh	r1, [r0, #4]
10058904:	8005      	strh	r5, [r0, #0]
10058906:	4261      	negs	r1, r4
10058908:	4161      	adcs	r1, r4
1005890a:	7081      	strb	r1, [r0, #2]
1005890c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10058910 <l2c_sap_hci_disconnection_complete_evt_hndl>:
10058910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058912:	4604      	mov	r4, r0
10058914:	f7ff fbfe 	bl	10058114 <l2c_get_link_control_block_index>
10058918:	4605      	mov	r5, r0
1005891a:	4810      	ldr	r0, [pc, #64]	@ (1005895c <__arm_cp.1_0>)
1005891c:	7ac0      	ldrb	r0, [r0, #11]
1005891e:	4285      	cmp	r5, r0
10058920:	d21b      	bcs.n	1005895a <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
10058922:	4e0f      	ldr	r6, [pc, #60]	@ (10058960 <__arm_cp.1_1>)
10058924:	6830      	ldr	r0, [r6, #0]
10058926:	4629      	mov	r1, r5
10058928:	f008 fcbf 	bl	100612aa <CST_stop>
1005892c:	2714      	movs	r7, #20
1005892e:	436f      	muls	r7, r5
10058930:	6830      	ldr	r0, [r6, #0]
10058932:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058934:	2500      	movs	r5, #0
10058936:	53c5      	strh	r5, [r0, r7]
10058938:	19c0      	adds	r0, r0, r7
1005893a:	6900      	ldr	r0, [r0, #16]
1005893c:	2800      	cmp	r0, #0
1005893e:	d009      	beq.n	10058954 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
10058940:	f7fa ff42 	bl	100537c8 <ACL_pkt_release>
10058944:	6830      	ldr	r0, [r6, #0]
10058946:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058948:	19c0      	adds	r0, r0, r7
1005894a:	6105      	str	r5, [r0, #16]
1005894c:	6830      	ldr	r0, [r6, #0]
1005894e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058950:	19c0      	adds	r0, r0, r7
10058952:	8185      	strh	r5, [r0, #12]
10058954:	4620      	mov	r0, r4
10058956:	f7ff fd0c 	bl	10058372 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
1005895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005895c <__arm_cp.1_0>:
1005895c:	2000247c 	.word	0x2000247c

10058960 <__arm_cp.1_1>:
10058960:	20002460 	.word	0x20002460

10058964 <llc_cig_cmn_start_cis_ucfg_weak>:
10058964:	4770      	bx	lr

10058966 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
10058966:	4770      	bx	lr

10058968 <llc_conn_get_cntxt_p>:
10058968:	4803      	ldr	r0, [pc, #12]	@ (10058978 <__arm_cp.0_0>)
1005896a:	6800      	ldr	r0, [r0, #0]
1005896c:	219c      	movs	r1, #156	@ 0x9c
1005896e:	5840      	ldr	r0, [r0, r1]
10058970:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058972:	6800      	ldr	r0, [r0, #0]
10058974:	4770      	bx	lr
10058976:	46c0      	nop			@ (mov r8, r8)

10058978 <__arm_cp.0_0>:
10058978:	20002468 	.word	0x20002468

1005897c <llc_conn_get_cntxt_per_p>:
1005897c:	214d      	movs	r1, #77	@ 0x4d
1005897e:	0089      	lsls	r1, r1, #2
10058980:	4341      	muls	r1, r0
10058982:	4804      	ldr	r0, [pc, #16]	@ (10058994 <__arm_cp.1_0>)
10058984:	6800      	ldr	r0, [r0, #0]
10058986:	229c      	movs	r2, #156	@ 0x9c
10058988:	5880      	ldr	r0, [r0, r2]
1005898a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005898c:	6840      	ldr	r0, [r0, #4]
1005898e:	1840      	adds	r0, r0, r1
10058990:	4770      	bx	lr
10058992:	46c0      	nop			@ (mov r8, r8)

10058994 <__arm_cp.1_0>:
10058994:	20002468 	.word	0x20002468

10058998 <llc_conn_get_cntxt_per_p_from_handle>:
10058998:	b510      	push	{r4, lr}
1005899a:	4601      	mov	r1, r0
1005899c:	2000      	movs	r0, #0
1005899e:	4a0d      	ldr	r2, [pc, #52]	@ (100589d4 <__arm_cp.2_0>)
100589a0:	4291      	cmp	r1, r2
100589a2:	d015      	beq.n	100589d0 <llc_conn_get_cntxt_per_p_from_handle+0x38>
100589a4:	4a0c      	ldr	r2, [pc, #48]	@ (100589d8 <__arm_cp.2_1>)
100589a6:	6812      	ldr	r2, [r2, #0]
100589a8:	2334      	movs	r3, #52	@ 0x34
100589aa:	5cd2      	ldrb	r2, [r2, r3]
100589ac:	1c52      	adds	r2, r2, #1
100589ae:	4b0b      	ldr	r3, [pc, #44]	@ (100589dc <__arm_cp.2_2>)
100589b0:	681b      	ldr	r3, [r3, #0]
100589b2:	249c      	movs	r4, #156	@ 0x9c
100589b4:	591b      	ldr	r3, [r3, r4]
100589b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100589b8:	685b      	ldr	r3, [r3, #4]
100589ba:	1e52      	subs	r2, r2, #1
100589bc:	d008      	beq.n	100589d0 <llc_conn_get_cntxt_per_p_from_handle+0x38>
100589be:	244d      	movs	r4, #77	@ 0x4d
100589c0:	00a4      	lsls	r4, r4, #2
100589c2:	191c      	adds	r4, r3, r4
100589c4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
100589c6:	428b      	cmp	r3, r1
100589c8:	4623      	mov	r3, r4
100589ca:	d1f6      	bne.n	100589ba <llc_conn_get_cntxt_per_p_from_handle+0x22>
100589cc:	4804      	ldr	r0, [pc, #16]	@ (100589e0 <__arm_cp.2_3>)
100589ce:	1820      	adds	r0, r4, r0
100589d0:	bd10      	pop	{r4, pc}
100589d2:	46c0      	nop			@ (mov r8, r8)

100589d4 <__arm_cp.2_0>:
100589d4:	0000ffff 	.word	0x0000ffff

100589d8 <__arm_cp.2_1>:
100589d8:	20002414 	.word	0x20002414

100589dc <__arm_cp.2_2>:
100589dc:	20002468 	.word	0x20002468

100589e0 <__arm_cp.2_3>:
100589e0:	fffffecc 	.word	0xfffffecc

100589e4 <llc_conn_get_phy_upd_cntxt_per_p>:
100589e4:	b510      	push	{r4, lr}
100589e6:	4604      	mov	r4, r0
100589e8:	f7f4 fdec 	bl	1004d5c4 <phy_upd_csr_ucfg>
100589ec:	2801      	cmp	r0, #1
100589ee:	d109      	bne.n	10058a04 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
100589f0:	200e      	movs	r0, #14
100589f2:	4360      	muls	r0, r4
100589f4:	4904      	ldr	r1, [pc, #16]	@ (10058a08 <__arm_cp.7_0>)
100589f6:	6809      	ldr	r1, [r1, #0]
100589f8:	229c      	movs	r2, #156	@ 0x9c
100589fa:	5889      	ldr	r1, [r1, r2]
100589fc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100589fe:	6949      	ldr	r1, [r1, #20]
10058a00:	1808      	adds	r0, r1, r0
10058a02:	bd10      	pop	{r4, pc}
10058a04:	2000      	movs	r0, #0
10058a06:	bd10      	pop	{r4, pc}

10058a08 <__arm_cp.7_0>:
10058a08:	20002468 	.word	0x20002468

10058a0c <llc_conn_init>:
10058a0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058a0e:	4c3e      	ldr	r4, [pc, #248]	@ (10058b08 <__arm_cp.8_0>)
10058a10:	6820      	ldr	r0, [r4, #0]
10058a12:	259c      	movs	r5, #156	@ 0x9c
10058a14:	5940      	ldr	r0, [r0, r5]
10058a16:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058a18:	6803      	ldr	r3, [r0, #0]
10058a1a:	2136      	movs	r1, #54	@ 0x36
10058a1c:	2600      	movs	r6, #0
10058a1e:	545e      	strb	r6, [r3, r1]
10058a20:	493a      	ldr	r1, [pc, #232]	@ (10058b0c <__arm_cp.8_1>)
10058a22:	6949      	ldr	r1, [r1, #20]
10058a24:	0c0a      	lsrs	r2, r1, #16
10058a26:	2a19      	cmp	r2, #25
10058a28:	d301      	bcc.n	10058a2e <llc_conn_init+0x22>
10058a2a:	2119      	movs	r1, #25
10058a2c:	0409      	lsls	r1, r1, #16
10058a2e:	6059      	str	r1, [r3, #4]
10058a30:	6019      	str	r1, [r3, #0]
10058a32:	6900      	ldr	r0, [r0, #16]
10058a34:	9302      	str	r3, [sp, #8]
10058a36:	6098      	str	r0, [r3, #8]
10058a38:	f000 fad0 	bl	10058fdc <llc_conn_list_reset>
10058a3c:	6820      	ldr	r0, [r4, #0]
10058a3e:	5940      	ldr	r0, [r0, r5]
10058a40:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058a42:	6807      	ldr	r7, [r0, #0]
10058a44:	f7ff fac4 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10058a48:	2801      	cmp	r0, #1
10058a4a:	d001      	beq.n	10058a50 <llc_conn_init+0x44>
10058a4c:	201b      	movs	r0, #27
10058a4e:	e000      	b.n	10058a52 <llc_conn_init+0x46>
10058a50:	20fb      	movs	r0, #251	@ 0xfb
10058a52:	82b8      	strh	r0, [r7, #20]
10058a54:	f7ff fabc 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10058a58:	4604      	mov	r4, r0
10058a5a:	2029      	movs	r0, #41	@ 0x29
10058a5c:	00c0      	lsls	r0, r0, #3
10058a5e:	9000      	str	r0, [sp, #0]
10058a60:	20a9      	movs	r0, #169	@ 0xa9
10058a62:	0105      	lsls	r5, r0, #4
10058a64:	f7f4 fdae 	bl	1004d5c4 <phy_upd_csr_ucfg>
10058a68:	2c01      	cmp	r4, #1
10058a6a:	9501      	str	r5, [sp, #4]
10058a6c:	d107      	bne.n	10058a7e <llc_conn_init+0x72>
10058a6e:	2801      	cmp	r0, #1
10058a70:	4d27      	ldr	r5, [pc, #156]	@ (10058b10 <__arm_cp.8_2>)
10058a72:	9c00      	ldr	r4, [sp, #0]
10058a74:	d00c      	beq.n	10058a90 <llc_conn_init+0x84>
10058a76:	4d27      	ldr	r5, [pc, #156]	@ (10058b14 <__arm_cp.8_3>)
10058a78:	f7ff fa4e 	bl	10057f18 <cte_csr_ucfg_weak>
10058a7c:	e005      	b.n	10058a8a <llc_conn_init+0x7e>
10058a7e:	2801      	cmp	r0, #1
10058a80:	9c00      	ldr	r4, [sp, #0]
10058a82:	d005      	beq.n	10058a90 <llc_conn_init+0x84>
10058a84:	f7ff fa48 	bl	10057f18 <cte_csr_ucfg_weak>
10058a88:	4625      	mov	r5, r4
10058a8a:	2801      	cmp	r0, #1
10058a8c:	d100      	bne.n	10058a90 <llc_conn_init+0x84>
10058a8e:	3508      	adds	r5, #8
10058a90:	82fd      	strh	r5, [r7, #22]
10058a92:	f7ff fa9d 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10058a96:	2801      	cmp	r0, #1
10058a98:	d001      	beq.n	10058a9e <llc_conn_init+0x92>
10058a9a:	201b      	movs	r0, #27
10058a9c:	e000      	b.n	10058aa0 <llc_conn_init+0x94>
10058a9e:	20fb      	movs	r0, #251	@ 0xfb
10058aa0:	8338      	strh	r0, [r7, #24]
10058aa2:	f7ff fa95 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10058aa6:	4605      	mov	r5, r0
10058aa8:	f7f4 fd8c 	bl	1004d5c4 <phy_upd_csr_ucfg>
10058aac:	2d01      	cmp	r5, #1
10058aae:	d107      	bne.n	10058ac0 <llc_conn_init+0xb4>
10058ab0:	2801      	cmp	r0, #1
10058ab2:	9d01      	ldr	r5, [sp, #4]
10058ab4:	4916      	ldr	r1, [pc, #88]	@ (10058b10 <__arm_cp.8_2>)
10058ab6:	d00d      	beq.n	10058ad4 <llc_conn_init+0xc8>
10058ab8:	f7ff fa2e 	bl	10057f18 <cte_csr_ucfg_weak>
10058abc:	4915      	ldr	r1, [pc, #84]	@ (10058b14 <__arm_cp.8_3>)
10058abe:	e006      	b.n	10058ace <llc_conn_init+0xc2>
10058ac0:	2801      	cmp	r0, #1
10058ac2:	9d01      	ldr	r5, [sp, #4]
10058ac4:	4629      	mov	r1, r5
10058ac6:	d005      	beq.n	10058ad4 <llc_conn_init+0xc8>
10058ac8:	f7ff fa26 	bl	10057f18 <cte_csr_ucfg_weak>
10058acc:	4621      	mov	r1, r4
10058ace:	2801      	cmp	r0, #1
10058ad0:	d100      	bne.n	10058ad4 <llc_conn_init+0xc8>
10058ad2:	3108      	adds	r1, #8
10058ad4:	83fc      	strh	r4, [r7, #30]
10058ad6:	201b      	movs	r0, #27
10058ad8:	83b8      	strh	r0, [r7, #28]
10058ada:	827d      	strh	r5, [r7, #18]
10058adc:	823c      	strh	r4, [r7, #16]
10058ade:	81fc      	strh	r4, [r7, #14]
10058ae0:	81b8      	strh	r0, [r7, #12]
10058ae2:	8379      	strh	r1, [r7, #26]
10058ae4:	f7f4 fead 	bl	1004d842 <LL_phy_update_init_ucfg>
10058ae8:	9802      	ldr	r0, [sp, #8]
10058aea:	f001 fd33 	bl	1005a554 <llc_subrate_init_acceptable>
10058aee:	4c0a      	ldr	r4, [pc, #40]	@ (10058b18 <__arm_cp.8_4>)
10058af0:	6820      	ldr	r0, [r4, #0]
10058af2:	2134      	movs	r1, #52	@ 0x34
10058af4:	5c41      	ldrb	r1, [r0, r1]
10058af6:	b2f0      	uxtb	r0, r6
10058af8:	4288      	cmp	r0, r1
10058afa:	d203      	bcs.n	10058b04 <llc_conn_init+0xf8>
10058afc:	f000 f80e 	bl	10058b1c <llc_conn_per_init>
10058b00:	1c76      	adds	r6, r6, #1
10058b02:	e7f5      	b.n	10058af0 <llc_conn_init+0xe4>
10058b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058b06:	46c0      	nop			@ (mov r8, r8)

10058b08 <__arm_cp.8_0>:
10058b08:	20002468 	.word	0x20002468

10058b0c <__arm_cp.8_1>:
10058b0c:	2000247c 	.word	0x2000247c

10058b10 <__arm_cp.8_2>:
10058b10:	00004290 	.word	0x00004290

10058b14 <__arm_cp.8_3>:
10058b14:	00000848 	.word	0x00000848

10058b18 <__arm_cp.8_4>:
10058b18:	20002414 	.word	0x20002414

10058b1c <llc_conn_per_init>:
10058b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058b1e:	4605      	mov	r5, r0
10058b20:	204d      	movs	r0, #77	@ 0x4d
10058b22:	0080      	lsls	r0, r0, #2
10058b24:	4368      	muls	r0, r5
10058b26:	492d      	ldr	r1, [pc, #180]	@ (10058bdc <__arm_cp.9_0>)
10058b28:	6809      	ldr	r1, [r1, #0]
10058b2a:	279c      	movs	r7, #156	@ 0x9c
10058b2c:	59c9      	ldr	r1, [r1, r7]
10058b2e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058b30:	6849      	ldr	r1, [r1, #4]
10058b32:	180c      	adds	r4, r1, r0
10058b34:	f001 fc9a 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10058b38:	4606      	mov	r6, r0
10058b3a:	f001 fc8d 	bl	1005a458 <cis_csr_ucfg_weak>
10058b3e:	4330      	orrs	r0, r6
10058b40:	b2c0      	uxtb	r0, r0
10058b42:	f006 f8a3 	bl	1005ec8c <LL_get_control_pdu_size>
10058b46:	2200      	movs	r2, #0
10058b48:	51e2      	str	r2, [r4, r7]
10058b4a:	212e      	movs	r1, #46	@ 0x2e
10058b4c:	231f      	movs	r3, #31
10058b4e:	5463      	strb	r3, [r4, r1]
10058b50:	85a2      	strh	r2, [r4, #44]	@ 0x2c
10058b52:	0880      	lsrs	r0, r0, #2
10058b54:	4368      	muls	r0, r5
10058b56:	0080      	lsls	r0, r0, #2
10058b58:	4920      	ldr	r1, [pc, #128]	@ (10058bdc <__arm_cp.9_0>)
10058b5a:	6809      	ldr	r1, [r1, #0]
10058b5c:	460b      	mov	r3, r1
10058b5e:	3394      	adds	r3, #148	@ 0x94
10058b60:	685b      	ldr	r3, [r3, #4]
10058b62:	181b      	adds	r3, r3, r0
10058b64:	2690      	movs	r6, #144	@ 0x90
10058b66:	51a3      	str	r3, [r4, r6]
10058b68:	238c      	movs	r3, #140	@ 0x8c
10058b6a:	50e2      	str	r2, [r4, r3]
10058b6c:	2388      	movs	r3, #136	@ 0x88
10058b6e:	50e2      	str	r2, [r4, r3]
10058b70:	2330      	movs	r3, #48	@ 0x30
10058b72:	54e5      	strb	r5, [r4, r3]
10058b74:	239a      	movs	r3, #154	@ 0x9a
10058b76:	52e2      	strh	r2, [r4, r3]
10058b78:	23ff      	movs	r3, #255	@ 0xff
10058b7a:	461d      	mov	r5, r3
10058b7c:	3508      	adds	r5, #8
10058b7e:	5562      	strb	r2, [r4, r5]
10058b80:	2241      	movs	r2, #65	@ 0x41
10058b82:	54a3      	strb	r3, [r4, r2]
10058b84:	222f      	movs	r2, #47	@ 0x2f
10058b86:	2307      	movs	r3, #7
10058b88:	54a3      	strb	r3, [r4, r2]
10058b8a:	227d      	movs	r2, #125	@ 0x7d
10058b8c:	0452      	lsls	r2, r2, #17
10058b8e:	66e2      	str	r2, [r4, #108]	@ 0x6c
10058b90:	6722      	str	r2, [r4, #112]	@ 0x70
10058b92:	2201      	movs	r2, #1
10058b94:	8522      	strh	r2, [r4, #40]	@ 0x28
10058b96:	4a12      	ldr	r2, [pc, #72]	@ (10058be0 <__arm_cp.9_1>)
10058b98:	8762      	strh	r2, [r4, #58]	@ 0x3a
10058b9a:	2219      	movs	r2, #25
10058b9c:	0412      	lsls	r2, r2, #16
10058b9e:	65a2      	str	r2, [r4, #88]	@ 0x58
10058ba0:	65e2      	str	r2, [r4, #92]	@ 0x5c
10058ba2:	6622      	str	r2, [r4, #96]	@ 0x60
10058ba4:	4622      	mov	r2, r4
10058ba6:	32b4      	adds	r2, #180	@ 0xb4
10058ba8:	2394      	movs	r3, #148	@ 0x94
10058baa:	58c9      	ldr	r1, [r1, r3]
10058bac:	231b      	movs	r3, #27
10058bae:	8053      	strh	r3, [r2, #2]
10058bb0:	1808      	adds	r0, r1, r0
10058bb2:	4621      	mov	r1, r4
10058bb4:	3190      	adds	r1, #144	@ 0x90
10058bb6:	6048      	str	r0, [r1, #4]
10058bb8:	20b4      	movs	r0, #180	@ 0xb4
10058bba:	5223      	strh	r3, [r4, r0]
10058bbc:	4809      	ldr	r0, [pc, #36]	@ (10058be4 <__arm_cp.9_2>)
10058bbe:	490a      	ldr	r1, [pc, #40]	@ (10058be8 <__arm_cp.9_3>)
10058bc0:	6050      	str	r0, [r2, #4]
10058bc2:	6091      	str	r1, [r2, #8]
10058bc4:	2029      	movs	r0, #41	@ 0x29
10058bc6:	00c0      	lsls	r0, r0, #3
10058bc8:	8190      	strh	r0, [r2, #12]
10058bca:	4620      	mov	r0, r4
10058bcc:	f001 fcd7 	bl	1005a57e <llc_subrate_reset_params>
10058bd0:	3480      	adds	r4, #128	@ 0x80
10058bd2:	4620      	mov	r0, r4
10058bd4:	f008 fce8 	bl	100615a8 <ACL_list_init>
10058bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10058bda:	46c0      	nop			@ (mov r8, r8)

10058bdc <__arm_cp.9_0>:
10058bdc:	20002468 	.word	0x20002468

10058be0 <__arm_cp.9_1>:
10058be0:	0000ffff 	.word	0x0000ffff

10058be4 <__arm_cp.9_2>:
10058be4:	0148001b 	.word	0x0148001b

10058be8 <__arm_cp.9_3>:
10058be8:	001b0148 	.word	0x001b0148

10058bec <llc_conn_mem_allocate>:
10058bec:	b5f0      	push	{r4, r5, r6, r7, lr}
10058bee:	b085      	sub	sp, #20
10058bf0:	2b01      	cmp	r3, #1
10058bf2:	d000      	beq.n	10058bf6 <llc_conn_mem_allocate+0xa>
10058bf4:	e082      	b.n	10058cfc <llc_conn_mem_allocate+0x110>
10058bf6:	ab02      	add	r3, sp, #8
10058bf8:	c307      	stmia	r3!, {r0, r1, r2}
10058bfa:	4841      	ldr	r0, [pc, #260]	@ (10058d00 <__arm_cp.10_0>)
10058bfc:	7fc1      	ldrb	r1, [r0, #31]
10058bfe:	9101      	str	r1, [sp, #4]
10058c00:	7ac4      	ldrb	r4, [r0, #11]
10058c02:	9400      	str	r4, [sp, #0]
10058c04:	2601      	movs	r6, #1
10058c06:	2124      	movs	r1, #36	@ 0x24
10058c08:	4a3e      	ldr	r2, [pc, #248]	@ (10058d04 <__arm_cp.10_1>)
10058c0a:	4630      	mov	r0, r6
10058c0c:	4790      	blx	r2
10058c0e:	493e      	ldr	r1, [pc, #248]	@ (10058d08 <__arm_cp.10_2>)
10058c10:	6809      	ldr	r1, [r1, #0]
10058c12:	279c      	movs	r7, #156	@ 0x9c
10058c14:	59c9      	ldr	r1, [r1, r7]
10058c16:	63c8      	str	r0, [r1, #60]	@ 0x3c
10058c18:	2538      	movs	r5, #56	@ 0x38
10058c1a:	4630      	mov	r0, r6
10058c1c:	4629      	mov	r1, r5
10058c1e:	4a39      	ldr	r2, [pc, #228]	@ (10058d04 <__arm_cp.10_1>)
10058c20:	4790      	blx	r2
10058c22:	4939      	ldr	r1, [pc, #228]	@ (10058d08 <__arm_cp.10_2>)
10058c24:	6809      	ldr	r1, [r1, #0]
10058c26:	59c9      	ldr	r1, [r1, r7]
10058c28:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058c2a:	6008      	str	r0, [r1, #0]
10058c2c:	204d      	movs	r0, #77	@ 0x4d
10058c2e:	0081      	lsls	r1, r0, #2
10058c30:	4620      	mov	r0, r4
10058c32:	4c34      	ldr	r4, [pc, #208]	@ (10058d04 <__arm_cp.10_1>)
10058c34:	47a0      	blx	r4
10058c36:	4934      	ldr	r1, [pc, #208]	@ (10058d08 <__arm_cp.10_2>)
10058c38:	6809      	ldr	r1, [r1, #0]
10058c3a:	59c9      	ldr	r1, [r1, r7]
10058c3c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058c3e:	6048      	str	r0, [r1, #4]
10058c40:	9801      	ldr	r0, [sp, #4]
10058c42:	4086      	lsls	r6, r0
10058c44:	b2f0      	uxtb	r0, r6
10058c46:	2108      	movs	r1, #8
10058c48:	47a0      	blx	r4
10058c4a:	492f      	ldr	r1, [pc, #188]	@ (10058d08 <__arm_cp.10_2>)
10058c4c:	6809      	ldr	r1, [r1, #0]
10058c4e:	59c9      	ldr	r1, [r1, r7]
10058c50:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058c52:	6809      	ldr	r1, [r1, #0]
10058c54:	2228      	movs	r2, #40	@ 0x28
10058c56:	2300      	movs	r3, #0
10058c58:	548b      	strb	r3, [r1, r2]
10058c5a:	6248      	str	r0, [r1, #36]	@ 0x24
10058c5c:	3128      	adds	r1, #40	@ 0x28
10058c5e:	704e      	strb	r6, [r1, #1]
10058c60:	9c00      	ldr	r4, [sp, #0]
10058c62:	2013      	movs	r0, #19
10058c64:	2104      	movs	r1, #4
10058c66:	4e27      	ldr	r6, [pc, #156]	@ (10058d04 <__arm_cp.10_1>)
10058c68:	47b0      	blx	r6
10058c6a:	4927      	ldr	r1, [pc, #156]	@ (10058d08 <__arm_cp.10_2>)
10058c6c:	6809      	ldr	r1, [r1, #0]
10058c6e:	59c9      	ldr	r1, [r1, r7]
10058c70:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058c72:	6108      	str	r0, [r1, #16]
10058c74:	4620      	mov	r0, r4
10058c76:	4629      	mov	r1, r5
10058c78:	47b0      	blx	r6
10058c7a:	4633      	mov	r3, r6
10058c7c:	4a22      	ldr	r2, [pc, #136]	@ (10058d08 <__arm_cp.10_2>)
10058c7e:	6811      	ldr	r1, [r2, #0]
10058c80:	59c9      	ldr	r1, [r1, r7]
10058c82:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058c84:	6088      	str	r0, [r1, #8]
10058c86:	4626      	mov	r6, r4
10058c88:	4620      	mov	r0, r4
10058c8a:	4629      	mov	r1, r5
10058c8c:	4615      	mov	r5, r2
10058c8e:	4798      	blx	r3
10058c90:	6829      	ldr	r1, [r5, #0]
10058c92:	59c9      	ldr	r1, [r1, r7]
10058c94:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058c96:	60c8      	str	r0, [r1, #12]
10058c98:	9802      	ldr	r0, [sp, #8]
10058c9a:	2801      	cmp	r0, #1
10058c9c:	d107      	bne.n	10058cae <llc_conn_mem_allocate+0xc2>
10058c9e:	210e      	movs	r1, #14
10058ca0:	4630      	mov	r0, r6
10058ca2:	f006 fcb9 	bl	1005f618 <csmem_mem_0_assign>
10058ca6:	6829      	ldr	r1, [r5, #0]
10058ca8:	59c9      	ldr	r1, [r1, r7]
10058caa:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058cac:	6148      	str	r0, [r1, #20]
10058cae:	9803      	ldr	r0, [sp, #12]
10058cb0:	2801      	cmp	r0, #1
10058cb2:	d107      	bne.n	10058cc4 <llc_conn_mem_allocate+0xd8>
10058cb4:	2108      	movs	r1, #8
10058cb6:	4630      	mov	r0, r6
10058cb8:	f006 fcae 	bl	1005f618 <csmem_mem_0_assign>
10058cbc:	6829      	ldr	r1, [r5, #0]
10058cbe:	59c9      	ldr	r1, [r1, r7]
10058cc0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058cc2:	6188      	str	r0, [r1, #24]
10058cc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10058cc6:	9804      	ldr	r0, [sp, #16]
10058cc8:	2801      	cmp	r0, #1
10058cca:	d10d      	bne.n	10058ce8 <llc_conn_mem_allocate+0xfc>
10058ccc:	2120      	movs	r1, #32
10058cce:	4630      	mov	r0, r6
10058cd0:	f006 fca2 	bl	1005f618 <csmem_mem_0_assign>
10058cd4:	6829      	ldr	r1, [r5, #0]
10058cd6:	59c9      	ldr	r1, [r1, r7]
10058cd8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058cda:	61c8      	str	r0, [r1, #28]
10058cdc:	2001      	movs	r0, #1
10058cde:	2111      	movs	r1, #17
10058ce0:	f006 fc9a 	bl	1005f618 <csmem_mem_0_assign>
10058ce4:	6829      	ldr	r1, [r5, #0]
10058ce6:	6648      	str	r0, [r1, #100]	@ 0x64
10058ce8:	2c01      	cmp	r4, #1
10058cea:	d107      	bne.n	10058cfc <llc_conn_mem_allocate+0x110>
10058cec:	211c      	movs	r1, #28
10058cee:	4630      	mov	r0, r6
10058cf0:	f006 fc92 	bl	1005f618 <csmem_mem_0_assign>
10058cf4:	6829      	ldr	r1, [r5, #0]
10058cf6:	59c9      	ldr	r1, [r1, r7]
10058cf8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058cfa:	6208      	str	r0, [r1, #32]
10058cfc:	b005      	add	sp, #20
10058cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058d00 <__arm_cp.10_0>:
10058d00:	2000247c 	.word	0x2000247c

10058d04 <__arm_cp.10_1>:
10058d04:	1005f619 	.word	0x1005f619

10058d08 <__arm_cp.10_2>:
10058d08:	20002468 	.word	0x20002468

10058d0c <llc_conn_clr_instant_reached_passed>:
10058d0c:	219a      	movs	r1, #154	@ 0x9a
10058d0e:	5a42      	ldrh	r2, [r0, r1]
10058d10:	2304      	movs	r3, #4
10058d12:	439a      	bics	r2, r3
10058d14:	5242      	strh	r2, [r0, r1]
10058d16:	5a42      	ldrh	r2, [r0, r1]
10058d18:	2302      	movs	r3, #2
10058d1a:	439a      	bics	r2, r3
10058d1c:	5242      	strh	r2, [r0, r1]
10058d1e:	4770      	bx	lr

10058d20 <llc_conn_clr_rx_acl_blocked>:
10058d20:	2194      	movs	r1, #148	@ 0x94
10058d22:	5840      	ldr	r0, [r0, r1]
10058d24:	8801      	ldrh	r1, [r0, #0]
10058d26:	4a02      	ldr	r2, [pc, #8]	@ (10058d30 <__arm_cp.5_0>)
10058d28:	400a      	ands	r2, r1
10058d2a:	8002      	strh	r2, [r0, #0]
10058d2c:	4770      	bx	lr
10058d2e:	46c0      	nop			@ (mov r8, r8)

10058d30 <__arm_cp.5_0>:
10058d30:	0000feff 	.word	0x0000feff

10058d34 <llc_conn_clr_rx_ctrl_pdu_full>:
10058d34:	2190      	movs	r1, #144	@ 0x90
10058d36:	5840      	ldr	r0, [r0, r1]
10058d38:	8801      	ldrh	r1, [r0, #0]
10058d3a:	2201      	movs	r2, #1
10058d3c:	4391      	bics	r1, r2
10058d3e:	8001      	strh	r1, [r0, #0]
10058d40:	4770      	bx	lr

10058d42 <llc_conn_clr_tx_acl_blocked>:
10058d42:	2194      	movs	r1, #148	@ 0x94
10058d44:	5840      	ldr	r0, [r0, r1]
10058d46:	8801      	ldrh	r1, [r0, #0]
10058d48:	2280      	movs	r2, #128	@ 0x80
10058d4a:	4391      	bics	r1, r2
10058d4c:	8001      	strh	r1, [r0, #0]
10058d4e:	4770      	bx	lr

10058d50 <llc_conn_copy_tx_data_packet>:
10058d50:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058d52:	460c      	mov	r4, r1
10058d54:	2188      	movs	r1, #136	@ 0x88
10058d56:	5c41      	ldrb	r1, [r0, r1]
10058d58:	0649      	lsls	r1, r1, #25
10058d5a:	d40c      	bmi.n	10058d76 <llc_conn_copy_tx_data_packet+0x26>
10058d5c:	3088      	adds	r0, #136	@ 0x88
10058d5e:	8a21      	ldrh	r1, [r4, #16]
10058d60:	8862      	ldrh	r2, [r4, #2]
10058d62:	1a52      	subs	r2, r2, r1
10058d64:	b293      	uxth	r3, r2
10058d66:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
10058d68:	42ab      	cmp	r3, r5
10058d6a:	d909      	bls.n	10058d80 <llc_conn_copy_tx_data_packet+0x30>
10058d6c:	7a20      	ldrb	r0, [r4, #8]
10058d6e:	22f7      	movs	r2, #247	@ 0xf7
10058d70:	4002      	ands	r2, r0
10058d72:	7222      	strb	r2, [r4, #8]
10058d74:	e001      	b.n	10058d7a <llc_conn_copy_tx_data_packet+0x2a>
10058d76:	8a21      	ldrh	r1, [r4, #16]
10058d78:	7b25      	ldrb	r5, [r4, #12]
10058d7a:	2010      	movs	r0, #16
10058d7c:	9001      	str	r0, [sp, #4]
10058d7e:	e005      	b.n	10058d8c <llc_conn_copy_tx_data_packet+0x3c>
10058d80:	69e0      	ldr	r0, [r4, #28]
10058d82:	1e43      	subs	r3, r0, #1
10058d84:	4198      	sbcs	r0, r3
10058d86:	0100      	lsls	r0, r0, #4
10058d88:	9001      	str	r0, [sp, #4]
10058d8a:	4615      	mov	r5, r2
10058d8c:	2900      	cmp	r1, #0
10058d8e:	d102      	bne.n	10058d96 <llc_conn_copy_tx_data_packet+0x46>
10058d90:	7a20      	ldrb	r0, [r4, #8]
10058d92:	0780      	lsls	r0, r0, #30
10058d94:	d401      	bmi.n	10058d9a <llc_conn_copy_tx_data_packet+0x4a>
10058d96:	2001      	movs	r0, #1
10058d98:	e000      	b.n	10058d9c <llc_conn_copy_tx_data_packet+0x4c>
10058d9a:	2002      	movs	r0, #2
10058d9c:	9002      	str	r0, [sp, #8]
10058d9e:	480e      	ldr	r0, [pc, #56]	@ (10058dd8 <__arm_cp.8_0>)
10058da0:	6800      	ldr	r0, [r0, #0]
10058da2:	278c      	movs	r7, #140	@ 0x8c
10058da4:	59c0      	ldr	r0, [r0, r7]
10058da6:	1d00      	adds	r0, r0, #4
10058da8:	89e2      	ldrh	r2, [r4, #14]
10058daa:	1851      	adds	r1, r2, r1
10058dac:	261f      	movs	r6, #31
10058dae:	400e      	ands	r6, r1
10058db0:	19a9      	adds	r1, r5, r6
10058db2:	b28a      	uxth	r2, r1
10058db4:	69a1      	ldr	r1, [r4, #24]
10058db6:	f006 fd90 	bl	1005f8da <Mem_Buff_block_copy>
10058dba:	6160      	str	r0, [r4, #20]
10058dbc:	7325      	strb	r5, [r4, #12]
10058dbe:	4b06      	ldr	r3, [pc, #24]	@ (10058dd8 <__arm_cp.8_0>)
10058dc0:	6818      	ldr	r0, [r3, #0]
10058dc2:	59c0      	ldr	r0, [r0, r7]
10058dc4:	1830      	adds	r0, r6, r0
10058dc6:	9901      	ldr	r1, [sp, #4]
10058dc8:	9a02      	ldr	r2, [sp, #8]
10058dca:	4311      	orrs	r1, r2
10058dcc:	7081      	strb	r1, [r0, #2]
10058dce:	6818      	ldr	r0, [r3, #0]
10058dd0:	59c0      	ldr	r0, [r0, r7]
10058dd2:	1830      	adds	r0, r6, r0
10058dd4:	70c5      	strb	r5, [r0, #3]
10058dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10058dd8 <__arm_cp.8_0>:
10058dd8:	20002468 	.word	0x20002468

10058ddc <llc_conn_enhanced_get_latency>:
10058ddc:	b570      	push	{r4, r5, r6, lr}
10058dde:	4605      	mov	r5, r0
10058de0:	202c      	movs	r0, #44	@ 0x2c
10058de2:	5c28      	ldrb	r0, [r5, r0]
10058de4:	2401      	movs	r4, #1
10058de6:	2803      	cmp	r0, #3
10058de8:	d13f      	bne.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058dea:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058dec:	2800      	cmp	r0, #0
10058dee:	d03c      	beq.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058df0:	4628      	mov	r0, r5
10058df2:	f7f9 fab6 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
10058df6:	4629      	mov	r1, r5
10058df8:	3128      	adds	r1, #40	@ 0x28
10058dfa:	4288      	cmp	r0, r1
10058dfc:	d135      	bne.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058dfe:	462e      	mov	r6, r5
10058e00:	362c      	adds	r6, #44	@ 0x2c
10058e02:	205c      	movs	r0, #92	@ 0x5c
10058e04:	5c30      	ldrb	r0, [r6, r0]
10058e06:	0600      	lsls	r0, r0, #24
10058e08:	0f80      	lsrs	r0, r0, #30
10058e0a:	d12e      	bne.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e0c:	20ff      	movs	r0, #255	@ 0xff
10058e0e:	3008      	adds	r0, #8
10058e10:	1828      	adds	r0, r5, r0
10058e12:	7800      	ldrb	r0, [r0, #0]
10058e14:	0780      	lsls	r0, r0, #30
10058e16:	d428      	bmi.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e18:	208f      	movs	r0, #143	@ 0x8f
10058e1a:	0040      	lsls	r0, r0, #1
10058e1c:	1828      	adds	r0, r5, r0
10058e1e:	8800      	ldrh	r0, [r0, #0]
10058e20:	2800      	cmp	r0, #0
10058e22:	d122      	bne.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e24:	7930      	ldrb	r0, [r6, #4]
10058e26:	2401      	movs	r4, #1
10058e28:	4621      	mov	r1, r4
10058e2a:	f001 fbfc 	bl	1005a626 <LL_cpe_get_active_status>
10058e2e:	2800      	cmp	r0, #0
10058e30:	d105      	bne.n	10058e3e <llc_conn_enhanced_get_latency+0x62>
10058e32:	7930      	ldrb	r0, [r6, #4]
10058e34:	2100      	movs	r1, #0
10058e36:	f001 fbf6 	bl	1005a626 <LL_cpe_get_active_status>
10058e3a:	2800      	cmp	r0, #0
10058e3c:	d013      	beq.n	10058e66 <llc_conn_enhanced_get_latency+0x8a>
10058e3e:	4628      	mov	r0, r5
10058e40:	3098      	adds	r0, #152	@ 0x98
10058e42:	8841      	ldrh	r1, [r0, #2]
10058e44:	07c9      	lsls	r1, r1, #31
10058e46:	d010      	beq.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e48:	8af1      	ldrh	r1, [r6, #22]
10058e4a:	8800      	ldrh	r0, [r0, #0]
10058e4c:	1a40      	subs	r0, r0, r1
10058e4e:	b281      	uxth	r1, r0
10058e50:	2902      	cmp	r1, #2
10058e52:	d30a      	bcc.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e54:	1e44      	subs	r4, r0, #1
10058e56:	b2a1      	uxth	r1, r4
10058e58:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058e5a:	1c40      	adds	r0, r0, #1
10058e5c:	b282      	uxth	r2, r0
10058e5e:	4291      	cmp	r1, r2
10058e60:	d303      	bcc.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e62:	4604      	mov	r4, r0
10058e64:	e001      	b.n	10058e6a <llc_conn_enhanced_get_latency+0x8e>
10058e66:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058e68:	1c44      	adds	r4, r0, #1
10058e6a:	b2a0      	uxth	r0, r4
10058e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

10058e70 <llc_conn_get_conn_idx>:
10058e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058e72:	4604      	mov	r4, r0
10058e74:	25ff      	movs	r5, #255	@ 0xff
10058e76:	480a      	ldr	r0, [pc, #40]	@ (10058ea0 <__arm_cp.13_0>)
10058e78:	4284      	cmp	r4, r0
10058e7a:	d00f      	beq.n	10058e9c <llc_conn_get_conn_idx+0x2c>
10058e7c:	2600      	movs	r6, #0
10058e7e:	4f09      	ldr	r7, [pc, #36]	@ (10058ea4 <__arm_cp.13_1>)
10058e80:	6838      	ldr	r0, [r7, #0]
10058e82:	2134      	movs	r1, #52	@ 0x34
10058e84:	5c41      	ldrb	r1, [r0, r1]
10058e86:	b2f0      	uxtb	r0, r6
10058e88:	4288      	cmp	r0, r1
10058e8a:	d207      	bcs.n	10058e9c <llc_conn_get_conn_idx+0x2c>
10058e8c:	f7ff fd76 	bl	1005897c <llc_conn_get_cntxt_per_p>
10058e90:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
10058e92:	42a0      	cmp	r0, r4
10058e94:	d001      	beq.n	10058e9a <llc_conn_get_conn_idx+0x2a>
10058e96:	1c76      	adds	r6, r6, #1
10058e98:	e7f2      	b.n	10058e80 <llc_conn_get_conn_idx+0x10>
10058e9a:	4635      	mov	r5, r6
10058e9c:	b2e8      	uxtb	r0, r5
10058e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10058ea0 <__arm_cp.13_0>:
10058ea0:	0000ffff 	.word	0x0000ffff

10058ea4 <__arm_cp.13_1>:
10058ea4:	20002414 	.word	0x20002414

10058ea8 <llc_conn_get_ctrl_pdu_data_p>:
10058ea8:	0089      	lsls	r1, r1, #2
10058eaa:	1840      	adds	r0, r0, r1
10058eac:	2190      	movs	r1, #144	@ 0x90
10058eae:	5840      	ldr	r0, [r0, r1]
10058eb0:	1c80      	adds	r0, r0, #2
10058eb2:	4770      	bx	lr

10058eb4 <llc_conn_get_enc_on>:
10058eb4:	2900      	cmp	r1, #0
10058eb6:	d001      	beq.n	10058ebc <llc_conn_get_enc_on+0x8>
10058eb8:	2102      	movs	r1, #2
10058eba:	e000      	b.n	10058ebe <llc_conn_get_enc_on+0xa>
10058ebc:	2103      	movs	r1, #3
10058ebe:	2288      	movs	r2, #136	@ 0x88
10058ec0:	5882      	ldr	r2, [r0, r2]
10058ec2:	40ca      	lsrs	r2, r1
10058ec4:	2001      	movs	r0, #1
10058ec6:	4010      	ands	r0, r2
10058ec8:	4770      	bx	lr

10058eca <llc_conn_get_instant_passed>:
10058eca:	219a      	movs	r1, #154	@ 0x9a
10058ecc:	5a40      	ldrh	r0, [r0, r1]
10058ece:	0740      	lsls	r0, r0, #29
10058ed0:	0fc0      	lsrs	r0, r0, #31
10058ed2:	4770      	bx	lr

10058ed4 <llc_conn_get_instant_reached>:
10058ed4:	219a      	movs	r1, #154	@ 0x9a
10058ed6:	5a40      	ldrh	r0, [r0, r1]
10058ed8:	0780      	lsls	r0, r0, #30
10058eda:	0fc0      	lsrs	r0, r0, #31
10058edc:	4770      	bx	lr

10058ede <llc_conn_get_rx_ctrl_pdu_full>:
10058ede:	2190      	movs	r1, #144	@ 0x90
10058ee0:	5840      	ldr	r0, [r0, r1]
10058ee2:	8801      	ldrh	r1, [r0, #0]
10058ee4:	2001      	movs	r0, #1
10058ee6:	4008      	ands	r0, r1
10058ee8:	4770      	bx	lr

10058eea <llc_conn_get_rx_acl_blocked>:
10058eea:	2194      	movs	r1, #148	@ 0x94
10058eec:	5840      	ldr	r0, [r0, r1]
10058eee:	8800      	ldrh	r0, [r0, #0]
10058ef0:	05c0      	lsls	r0, r0, #23
10058ef2:	0fc0      	lsrs	r0, r0, #31
10058ef4:	4770      	bx	lr

10058ef6 <llc_conn_get_tx_acl_blocked>:
10058ef6:	2194      	movs	r1, #148	@ 0x94
10058ef8:	5840      	ldr	r0, [r0, r1]
10058efa:	8800      	ldrh	r0, [r0, #0]
10058efc:	b2c0      	uxtb	r0, r0
10058efe:	09c0      	lsrs	r0, r0, #7
10058f00:	4770      	bx	lr

10058f02 <llc_conn_get_tx_ctrl_pdu_state>:
10058f02:	2194      	movs	r1, #148	@ 0x94
10058f04:	5840      	ldr	r0, [r0, r1]
10058f06:	8801      	ldrh	r1, [r0, #0]
10058f08:	2003      	movs	r0, #3
10058f0a:	4008      	ands	r0, r1
10058f0c:	4770      	bx	lr
	...

10058f10 <llc_conn_guard_time_for_close_conn_event>:
10058f10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058f12:	4607      	mov	r7, r0
10058f14:	2441      	movs	r4, #65	@ 0x41
10058f16:	5d00      	ldrb	r0, [r0, r4]
10058f18:	f7f9 fcb0 	bl	1005287c <BLEPLAT_CNTR_SmGetTxPhy>
10058f1c:	4605      	mov	r5, r0
10058f1e:	5d38      	ldrb	r0, [r7, r4]
10058f20:	f7f9 fc9b 	bl	1005285a <BLEPLAT_CNTR_SmGetRxPhy>
10058f24:	23b6      	movs	r3, #182	@ 0xb6
10058f26:	1e6c      	subs	r4, r5, #1
10058f28:	b2e1      	uxtb	r1, r4
10058f2a:	9702      	str	r7, [sp, #8]
10058f2c:	37b6      	adds	r7, #182	@ 0xb6
10058f2e:	2570      	movs	r5, #112	@ 0x70
10058f30:	2603      	movs	r6, #3
10058f32:	2905      	cmp	r1, #5
10058f34:	4632      	mov	r2, r6
10058f36:	9501      	str	r5, [sp, #4]
10058f38:	4629      	mov	r1, r5
10058f3a:	d805      	bhi.n	10058f48 <llc_conn_guard_time_for_close_conn_event+0x38>
10058f3c:	b261      	sxtb	r1, r4
10058f3e:	008a      	lsls	r2, r1, #2
10058f40:	4919      	ldr	r1, [pc, #100]	@ (10058fa8 <__arm_cp.22_0>)
10058f42:	5889      	ldr	r1, [r1, r2]
10058f44:	4c19      	ldr	r4, [pc, #100]	@ (10058fac <__arm_cp.22_1>)
10058f46:	58a2      	ldr	r2, [r4, r2]
10058f48:	9c02      	ldr	r4, [sp, #8]
10058f4a:	5ae3      	ldrh	r3, [r4, r3]
10058f4c:	887c      	ldrh	r4, [r7, #2]
10058f4e:	1e40      	subs	r0, r0, #1
10058f50:	b2c5      	uxtb	r5, r0
10058f52:	2d05      	cmp	r5, #5
10058f54:	d806      	bhi.n	10058f64 <llc_conn_guard_time_for_close_conn_event+0x54>
10058f56:	b240      	sxtb	r0, r0
10058f58:	0080      	lsls	r0, r0, #2
10058f5a:	4d13      	ldr	r5, [pc, #76]	@ (10058fa8 <__arm_cp.22_0>)
10058f5c:	582d      	ldr	r5, [r5, r0]
10058f5e:	9501      	str	r5, [sp, #4]
10058f60:	4d12      	ldr	r5, [pc, #72]	@ (10058fac <__arm_cp.22_1>)
10058f62:	582e      	ldr	r6, [r5, r0]
10058f64:	4093      	lsls	r3, r2
10058f66:	1858      	adds	r0, r3, r1
10058f68:	0200      	lsls	r0, r0, #8
10058f6a:	2147      	movs	r1, #71	@ 0x47
10058f6c:	00cd      	lsls	r5, r1, #3
10058f6e:	1940      	adds	r0, r0, r5
10058f70:	490f      	ldr	r1, [pc, #60]	@ (10058fb0 <__arm_cp.22_2>)
10058f72:	f7e7 f965 	bl	10040240 <__udivsi3>
10058f76:	9000      	str	r0, [sp, #0]
10058f78:	40b4      	lsls	r4, r6
10058f7a:	9801      	ldr	r0, [sp, #4]
10058f7c:	1820      	adds	r0, r4, r0
10058f7e:	0200      	lsls	r0, r0, #8
10058f80:	1940      	adds	r0, r0, r5
10058f82:	490b      	ldr	r1, [pc, #44]	@ (10058fb0 <__arm_cp.22_2>)
10058f84:	f7e7 f95c 	bl	10040240 <__udivsi3>
10058f88:	4606      	mov	r6, r0
10058f8a:	88fc      	ldrh	r4, [r7, #6]
10058f8c:	f005 fec2 	bl	1005ed14 <LL_sched_engine_return_actual_scheduler_margin>
10058f90:	9900      	ldr	r1, [sp, #0]
10058f92:	1808      	adds	r0, r1, r0
10058f94:	b2b1      	uxth	r1, r6
10058f96:	428c      	cmp	r4, r1
10058f98:	d800      	bhi.n	10058f9c <llc_conn_guard_time_for_close_conn_event+0x8c>
10058f9a:	4621      	mov	r1, r4
10058f9c:	1840      	adds	r0, r0, r1
10058f9e:	30cd      	adds	r0, #205	@ 0xcd
10058fa0:	9902      	ldr	r1, [sp, #8]
10058fa2:	6748      	str	r0, [r1, #116]	@ 0x74
10058fa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058fa6:	46c0      	nop			@ (mov r8, r8)

10058fa8 <__arm_cp.22_0>:
10058fa8:	1006815c 	.word	0x1006815c

10058fac <__arm_cp.22_1>:
10058fac:	10068144 	.word	0x10068144

10058fb0 <__arm_cp.22_2>:
10058fb0:	00000271 	.word	0x00000271

10058fb4 <llc_conn_list_add_address>:
10058fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058fb6:	460a      	mov	r2, r1
10058fb8:	4601      	mov	r1, r0
10058fba:	4807      	ldr	r0, [pc, #28]	@ (10058fd8 <__arm_cp.23_0>)
10058fbc:	6800      	ldr	r0, [r0, #0]
10058fbe:	239c      	movs	r3, #156	@ 0x9c
10058fc0:	58c0      	ldr	r0, [r0, r3]
10058fc2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058fc4:	6800      	ldr	r0, [r0, #0]
10058fc6:	ab02      	add	r3, sp, #8
10058fc8:	9301      	str	r3, [sp, #4]
10058fca:	ab03      	add	r3, sp, #12
10058fcc:	9300      	str	r3, [sp, #0]
10058fce:	3024      	adds	r0, #36	@ 0x24
10058fd0:	2301      	movs	r3, #1
10058fd2:	f008 fb8b 	bl	100616ec <addr8_list_add>
10058fd6:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

10058fd8 <__arm_cp.23_0>:
10058fd8:	20002468 	.word	0x20002468

10058fdc <llc_conn_list_reset>:
10058fdc:	b580      	push	{r7, lr}
10058fde:	4805      	ldr	r0, [pc, #20]	@ (10058ff4 <__arm_cp.24_0>)
10058fe0:	6800      	ldr	r0, [r0, #0]
10058fe2:	219c      	movs	r1, #156	@ 0x9c
10058fe4:	5840      	ldr	r0, [r0, r1]
10058fe6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058fe8:	6800      	ldr	r0, [r0, #0]
10058fea:	3024      	adds	r0, #36	@ 0x24
10058fec:	f008 fbfd 	bl	100617ea <addr8_list_clear>
10058ff0:	bd80      	pop	{r7, pc}
10058ff2:	46c0      	nop			@ (mov r8, r8)

10058ff4 <__arm_cp.24_0>:
10058ff4:	20002468 	.word	0x20002468

10058ff8 <llc_conn_list_remove_address>:
10058ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058ffa:	460a      	mov	r2, r1
10058ffc:	4601      	mov	r1, r0
10058ffe:	4807      	ldr	r0, [pc, #28]	@ (1005901c <__arm_cp.25_0>)
10059000:	6800      	ldr	r0, [r0, #0]
10059002:	239c      	movs	r3, #156	@ 0x9c
10059004:	58c0      	ldr	r0, [r0, r3]
10059006:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059008:	6800      	ldr	r0, [r0, #0]
1005900a:	ab02      	add	r3, sp, #8
1005900c:	9301      	str	r3, [sp, #4]
1005900e:	ab03      	add	r3, sp, #12
10059010:	9300      	str	r3, [sp, #0]
10059012:	3024      	adds	r0, #36	@ 0x24
10059014:	2301      	movs	r3, #1
10059016:	f008 fbac 	bl	10061772 <addr8_list_remove_by_addr>
1005901a:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005901c <__arm_cp.25_0>:
1005901c:	20002468 	.word	0x20002468

10059020 <llc_conn_list_search_address>:
10059020:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10059022:	460c      	mov	r4, r1
10059024:	4605      	mov	r5, r0
10059026:	f7ff fc9f 	bl	10058968 <llc_conn_get_cntxt_p>
1005902a:	2136      	movs	r1, #54	@ 0x36
1005902c:	5c40      	ldrb	r0, [r0, r1]
1005902e:	2800      	cmp	r0, #0
10059030:	d001      	beq.n	10059036 <llc_conn_list_search_address+0x16>
10059032:	2000      	movs	r0, #0
10059034:	e011      	b.n	1005905a <llc_conn_list_search_address+0x3a>
10059036:	480a      	ldr	r0, [pc, #40]	@ (10059060 <__arm_cp.26_0>)
10059038:	6800      	ldr	r0, [r0, #0]
1005903a:	219c      	movs	r1, #156	@ 0x9c
1005903c:	5840      	ldr	r0, [r0, r1]
1005903e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059040:	6801      	ldr	r1, [r0, #0]
10059042:	6a48      	ldr	r0, [r1, #36]	@ 0x24
10059044:	6a89      	ldr	r1, [r1, #40]	@ 0x28
10059046:	aa03      	add	r2, sp, #12
10059048:	2301      	movs	r3, #1
1005904a:	9300      	str	r3, [sp, #0]
1005904c:	9201      	str	r2, [sp, #4]
1005904e:	22fe      	movs	r2, #254	@ 0xfe
10059050:	4395      	bics	r5, r2
10059052:	462a      	mov	r2, r5
10059054:	4623      	mov	r3, r4
10059056:	f008 fae5 	bl	10061624 <addr8_list_search>
1005905a:	b004      	add	sp, #16
1005905c:	bdb0      	pop	{r4, r5, r7, pc}
1005905e:	46c0      	nop			@ (mov r8, r8)

10059060 <__arm_cp.26_0>:
10059060:	20002468 	.word	0x20002468

10059064 <llc_conn_push_adv_set_terminated_event>:
10059064:	b570      	push	{r4, r5, r6, lr}
10059066:	460d      	mov	r5, r1
10059068:	4604      	mov	r4, r0
1005906a:	481a      	ldr	r0, [pc, #104]	@ (100590d4 <__arm_cp.27_0>)
1005906c:	6800      	ldr	r0, [r0, #0]
1005906e:	212c      	movs	r1, #44	@ 0x2c
10059070:	5c40      	ldrb	r0, [r0, r1]
10059072:	07c0      	lsls	r0, r0, #31
10059074:	0ec1      	lsrs	r1, r0, #27
10059076:	d101      	bne.n	1005907c <llc_conn_push_adv_set_terminated_event+0x18>
10059078:	2211      	movs	r2, #17
1005907a:	e00a      	b.n	10059092 <llc_conn_push_adv_set_terminated_event+0x2e>
1005907c:	4816      	ldr	r0, [pc, #88]	@ (100590d8 <__arm_cp.27_1>)
1005907e:	6800      	ldr	r0, [r0, #0]
10059080:	223d      	movs	r2, #61	@ 0x3d
10059082:	5c82      	ldrb	r2, [r0, r2]
10059084:	0692      	lsls	r2, r2, #26
10059086:	d524      	bpl.n	100590d2 <llc_conn_push_adv_set_terminated_event+0x6e>
10059088:	303d      	adds	r0, #61	@ 0x3d
1005908a:	7ac0      	ldrb	r0, [r0, #11]
1005908c:	0780      	lsls	r0, r0, #30
1005908e:	d520      	bpl.n	100590d2 <llc_conn_push_adv_set_terminated_event+0x6e>
10059090:	221f      	movs	r2, #31
10059092:	204e      	movs	r0, #78	@ 0x4e
10059094:	43c0      	mvns	r0, r0
10059096:	4041      	eors	r1, r0
10059098:	4810      	ldr	r0, [pc, #64]	@ (100590dc <__arm_cp.27_2>)
1005909a:	6800      	ldr	r0, [r0, #0]
1005909c:	6940      	ldr	r0, [r0, #20]
1005909e:	b2ce      	uxtb	r6, r1
100590a0:	2303      	movs	r3, #3
100590a2:	4631      	mov	r1, r6
100590a4:	f7fa fd44 	bl	10053b30 <aci_event_fifo_push_header>
100590a8:	2800      	cmp	r0, #0
100590aa:	d012      	beq.n	100590d2 <llc_conn_push_adv_set_terminated_event+0x6e>
100590ac:	4601      	mov	r1, r0
100590ae:	7284      	strb	r4, [r0, #10]
100590b0:	2000      	movs	r0, #0
100590b2:	7308      	strb	r0, [r1, #12]
100590b4:	724d      	strb	r5, [r1, #9]
100590b6:	7208      	strb	r0, [r1, #8]
100590b8:	2012      	movs	r0, #18
100590ba:	71c8      	strb	r0, [r1, #7]
100590bc:	2006      	movs	r0, #6
100590be:	7188      	strb	r0, [r1, #6]
100590c0:	203e      	movs	r0, #62	@ 0x3e
100590c2:	7148      	strb	r0, [r1, #5]
100590c4:	2004      	movs	r0, #4
100590c6:	7108      	strb	r0, [r1, #4]
100590c8:	0a20      	lsrs	r0, r4, #8
100590ca:	72c8      	strb	r0, [r1, #11]
100590cc:	4630      	mov	r0, r6
100590ce:	f7fa fdcc 	bl	10053c6a <aci_event_fifo_push>
100590d2:	bd70      	pop	{r4, r5, r6, pc}

100590d4 <__arm_cp.27_0>:
100590d4:	20002414 	.word	0x20002414

100590d8 <__arm_cp.27_1>:
100590d8:	20002468 	.word	0x20002468

100590dc <__arm_cp.27_2>:
100590dc:	20002418 	.word	0x20002418

100590e0 <llc_conn_push_connection_complete_event>:
100590e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100590e2:	b08d      	sub	sp, #52	@ 0x34
100590e4:	4604      	mov	r4, r0
100590e6:	4895      	ldr	r0, [pc, #596]	@ (1005933c <__arm_cp.28_0>)
100590e8:	6800      	ldr	r0, [r0, #0]
100590ea:	212c      	movs	r1, #44	@ 0x2c
100590ec:	5c40      	ldrb	r0, [r0, r1]
100590ee:	07c0      	lsls	r0, r0, #31
100590f0:	0ec5      	lsrs	r5, r0, #27
100590f2:	206f      	movs	r0, #111	@ 0x6f
100590f4:	43c6      	mvns	r6, r0
100590f6:	406e      	eors	r6, r5
100590f8:	f001 f9ba 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100590fc:	4990      	ldr	r1, [pc, #576]	@ (10059340 <__arm_cp.28_1>)
100590fe:	6809      	ldr	r1, [r1, #0]
10059100:	223d      	movs	r2, #61	@ 0x3d
10059102:	5c8b      	ldrb	r3, [r1, r2]
10059104:	2220      	movs	r2, #32
10059106:	4013      	ands	r3, r2
10059108:	313d      	adds	r1, #61	@ 0x3d
1005910a:	2800      	cmp	r0, #0
1005910c:	d066      	beq.n	100591dc <llc_conn_push_connection_complete_event+0xfc>
1005910e:	2b00      	cmp	r3, #0
10059110:	d100      	bne.n	10059114 <llc_conn_push_connection_complete_event+0x34>
10059112:	e110      	b.n	10059336 <llc_conn_push_connection_complete_event+0x256>
10059114:	7b88      	ldrb	r0, [r1, #14]
10059116:	07c0      	lsls	r0, r0, #31
10059118:	d063      	beq.n	100591e2 <llc_conn_push_connection_complete_event+0x102>
1005911a:	2d00      	cmp	r5, #0
1005911c:	d100      	bne.n	10059120 <llc_conn_push_connection_complete_event+0x40>
1005911e:	2212      	movs	r2, #18
10059120:	8aa0      	ldrh	r0, [r4, #20]
10059122:	900c      	str	r0, [sp, #48]	@ 0x30
10059124:	7da7      	ldrb	r7, [r4, #22]
10059126:	7de0      	ldrb	r0, [r4, #23]
10059128:	9008      	str	r0, [sp, #32]
1005912a:	8a60      	ldrh	r0, [r4, #18]
1005912c:	900b      	str	r0, [sp, #44]	@ 0x2c
1005912e:	8a20      	ldrh	r0, [r4, #16]
10059130:	9009      	str	r0, [sp, #36]	@ 0x24
10059132:	89a0      	ldrh	r0, [r4, #12]
10059134:	900a      	str	r0, [sp, #40]	@ 0x28
10059136:	6820      	ldr	r0, [r4, #0]
10059138:	9005      	str	r0, [sp, #20]
1005913a:	6860      	ldr	r0, [r4, #4]
1005913c:	9007      	str	r0, [sp, #28]
1005913e:	68a0      	ldr	r0, [r4, #8]
10059140:	9006      	str	r0, [sp, #24]
10059142:	7e20      	ldrb	r0, [r4, #24]
10059144:	9003      	str	r0, [sp, #12]
10059146:	7e60      	ldrb	r0, [r4, #25]
10059148:	9004      	str	r0, [sp, #16]
1005914a:	89e5      	ldrh	r5, [r4, #14]
1005914c:	7ea0      	ldrb	r0, [r4, #26]
1005914e:	9002      	str	r0, [sp, #8]
10059150:	487c      	ldr	r0, [pc, #496]	@ (10059344 <__arm_cp.28_2>)
10059152:	6800      	ldr	r0, [r0, #0]
10059154:	6900      	ldr	r0, [r0, #16]
10059156:	b2f1      	uxtb	r1, r6
10059158:	230a      	movs	r3, #10
1005915a:	f7fa fce9 	bl	10053b30 <aci_event_fifo_push_header>
1005915e:	2800      	cmp	r0, #0
10059160:	d100      	bne.n	10059164 <llc_conn_push_connection_complete_event+0x84>
10059162:	e0e8      	b.n	10059336 <llc_conn_push_connection_complete_event+0x256>
10059164:	4604      	mov	r4, r0
10059166:	9701      	str	r7, [sp, #4]
10059168:	4607      	mov	r7, r0
1005916a:	371f      	adds	r7, #31
1005916c:	7245      	strb	r5, [r0, #9]
1005916e:	9803      	ldr	r0, [sp, #12]
10059170:	7320      	strb	r0, [r4, #12]
10059172:	9804      	ldr	r0, [sp, #16]
10059174:	72e0      	strb	r0, [r4, #11]
10059176:	9802      	ldr	r0, [sp, #8]
10059178:	7220      	strb	r0, [r4, #8]
1005917a:	0a28      	lsrs	r0, r5, #8
1005917c:	72a0      	strb	r0, [r4, #10]
1005917e:	4620      	mov	r0, r4
10059180:	300d      	adds	r0, #13
10059182:	2506      	movs	r5, #6
10059184:	9905      	ldr	r1, [sp, #20]
10059186:	462a      	mov	r2, r5
10059188:	4b6f      	ldr	r3, [pc, #444]	@ (10059348 <__arm_cp.28_3>)
1005918a:	4798      	blx	r3
1005918c:	4620      	mov	r0, r4
1005918e:	3013      	adds	r0, #19
10059190:	9906      	ldr	r1, [sp, #24]
10059192:	462a      	mov	r2, r5
10059194:	4b6c      	ldr	r3, [pc, #432]	@ (10059348 <__arm_cp.28_3>)
10059196:	4798      	blx	r3
10059198:	4b6b      	ldr	r3, [pc, #428]	@ (10059348 <__arm_cp.28_3>)
1005919a:	4620      	mov	r0, r4
1005919c:	3019      	adds	r0, #25
1005919e:	9907      	ldr	r1, [sp, #28]
100591a0:	462a      	mov	r2, r5
100591a2:	4798      	blx	r3
100591a4:	2021      	movs	r0, #33	@ 0x21
100591a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
100591a8:	5421      	strb	r1, [r4, r0]
100591aa:	2025      	movs	r0, #37	@ 0x25
100591ac:	9a08      	ldr	r2, [sp, #32]
100591ae:	5422      	strb	r2, [r4, r0]
100591b0:	4620      	mov	r0, r4
100591b2:	3021      	adds	r0, #33	@ 0x21
100591b4:	0a09      	lsrs	r1, r1, #8
100591b6:	7041      	strb	r1, [r0, #1]
100591b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
100591ba:	0a08      	lsrs	r0, r1, #8
100591bc:	7078      	strb	r0, [r7, #1]
100591be:	7039      	strb	r1, [r7, #0]
100591c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100591c2:	0a08      	lsrs	r0, r1, #8
100591c4:	7178      	strb	r0, [r7, #5]
100591c6:	7139      	strb	r1, [r7, #4]
100591c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
100591ca:	0a08      	lsrs	r0, r1, #8
100591cc:	7278      	strb	r0, [r7, #9]
100591ce:	7239      	strb	r1, [r7, #8]
100591d0:	9801      	ldr	r0, [sp, #4]
100591d2:	71f8      	strb	r0, [r7, #7]
100591d4:	1d20      	adds	r0, r4, #4
100591d6:	2129      	movs	r1, #41	@ 0x29
100591d8:	2222      	movs	r2, #34	@ 0x22
100591da:	e0a2      	b.n	10059322 <llc_conn_push_connection_complete_event+0x242>
100591dc:	2b00      	cmp	r3, #0
100591de:	d100      	bne.n	100591e2 <llc_conn_push_connection_complete_event+0x102>
100591e0:	e0a9      	b.n	10059336 <llc_conn_push_connection_complete_event+0x256>
100591e2:	7a88      	ldrb	r0, [r1, #10]
100591e4:	0780      	lsls	r0, r0, #30
100591e6:	d445      	bmi.n	10059274 <llc_conn_push_connection_complete_event+0x194>
100591e8:	7a48      	ldrb	r0, [r1, #9]
100591ea:	07c0      	lsls	r0, r0, #31
100591ec:	d100      	bne.n	100591f0 <llc_conn_push_connection_complete_event+0x110>
100591ee:	e0a2      	b.n	10059336 <llc_conn_push_connection_complete_event+0x256>
100591f0:	2008      	movs	r0, #8
100591f2:	4305      	orrs	r5, r0
100591f4:	7de0      	ldrb	r0, [r4, #23]
100591f6:	900c      	str	r0, [sp, #48]	@ 0x30
100591f8:	8a60      	ldrh	r0, [r4, #18]
100591fa:	900b      	str	r0, [sp, #44]	@ 0x2c
100591fc:	8a20      	ldrh	r0, [r4, #16]
100591fe:	9009      	str	r0, [sp, #36]	@ 0x24
10059200:	89a0      	ldrh	r0, [r4, #12]
10059202:	900a      	str	r0, [sp, #40]	@ 0x28
10059204:	6820      	ldr	r0, [r4, #0]
10059206:	9008      	str	r0, [sp, #32]
10059208:	7e20      	ldrb	r0, [r4, #24]
1005920a:	9006      	str	r0, [sp, #24]
1005920c:	7e60      	ldrb	r0, [r4, #25]
1005920e:	9007      	str	r0, [sp, #28]
10059210:	89e7      	ldrh	r7, [r4, #14]
10059212:	7ea0      	ldrb	r0, [r4, #26]
10059214:	9005      	str	r0, [sp, #20]
10059216:	484b      	ldr	r0, [pc, #300]	@ (10059344 <__arm_cp.28_2>)
10059218:	6800      	ldr	r0, [r0, #0]
1005921a:	6900      	ldr	r0, [r0, #16]
1005921c:	b2f1      	uxtb	r1, r6
1005921e:	2306      	movs	r3, #6
10059220:	462a      	mov	r2, r5
10059222:	f7fa fc85 	bl	10053b30 <aci_event_fifo_push_header>
10059226:	2800      	cmp	r0, #0
10059228:	d100      	bne.n	1005922c <llc_conn_push_connection_complete_event+0x14c>
1005922a:	e084      	b.n	10059336 <llc_conn_push_connection_complete_event+0x256>
1005922c:	4604      	mov	r4, r0
1005922e:	4605      	mov	r5, r0
10059230:	3513      	adds	r5, #19
10059232:	7247      	strb	r7, [r0, #9]
10059234:	9806      	ldr	r0, [sp, #24]
10059236:	7320      	strb	r0, [r4, #12]
10059238:	9807      	ldr	r0, [sp, #28]
1005923a:	72e0      	strb	r0, [r4, #11]
1005923c:	9805      	ldr	r0, [sp, #20]
1005923e:	7220      	strb	r0, [r4, #8]
10059240:	0a38      	lsrs	r0, r7, #8
10059242:	72a0      	strb	r0, [r4, #10]
10059244:	4620      	mov	r0, r4
10059246:	300d      	adds	r0, #13
10059248:	2206      	movs	r2, #6
1005924a:	9908      	ldr	r1, [sp, #32]
1005924c:	f7f7 ff24 	bl	10051098 <BLEPLAT_MemCpy>
10059250:	9909      	ldr	r1, [sp, #36]	@ 0x24
10059252:	0a08      	lsrs	r0, r1, #8
10059254:	75a0      	strb	r0, [r4, #22]
10059256:	7561      	strb	r1, [r4, #21]
10059258:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005925a:	0a08      	lsrs	r0, r1, #8
1005925c:	7068      	strb	r0, [r5, #1]
1005925e:	7029      	strb	r1, [r5, #0]
10059260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10059262:	0a08      	lsrs	r0, r1, #8
10059264:	7168      	strb	r0, [r5, #5]
10059266:	7129      	strb	r1, [r5, #4]
10059268:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005926a:	7660      	strb	r0, [r4, #25]
1005926c:	1d20      	adds	r0, r4, #4
1005926e:	2101      	movs	r1, #1
10059270:	2213      	movs	r2, #19
10059272:	e056      	b.n	10059322 <llc_conn_push_connection_complete_event+0x242>
10059274:	2d00      	cmp	r5, #0
10059276:	d001      	beq.n	1005927c <llc_conn_push_connection_complete_event+0x19c>
10059278:	221c      	movs	r2, #28
1005927a:	e000      	b.n	1005927e <llc_conn_push_connection_complete_event+0x19e>
1005927c:	220d      	movs	r2, #13
1005927e:	7de0      	ldrb	r0, [r4, #23]
10059280:	900a      	str	r0, [sp, #40]	@ 0x28
10059282:	8a67      	ldrh	r7, [r4, #18]
10059284:	8a20      	ldrh	r0, [r4, #16]
10059286:	900b      	str	r0, [sp, #44]	@ 0x2c
10059288:	89a0      	ldrh	r0, [r4, #12]
1005928a:	900c      	str	r0, [sp, #48]	@ 0x30
1005928c:	6820      	ldr	r0, [r4, #0]
1005928e:	9007      	str	r0, [sp, #28]
10059290:	6860      	ldr	r0, [r4, #4]
10059292:	9009      	str	r0, [sp, #36]	@ 0x24
10059294:	68a0      	ldr	r0, [r4, #8]
10059296:	9008      	str	r0, [sp, #32]
10059298:	7e20      	ldrb	r0, [r4, #24]
1005929a:	9005      	str	r0, [sp, #20]
1005929c:	7e60      	ldrb	r0, [r4, #25]
1005929e:	9006      	str	r0, [sp, #24]
100592a0:	89e5      	ldrh	r5, [r4, #14]
100592a2:	7ea0      	ldrb	r0, [r4, #26]
100592a4:	9004      	str	r0, [sp, #16]
100592a6:	4827      	ldr	r0, [pc, #156]	@ (10059344 <__arm_cp.28_2>)
100592a8:	6800      	ldr	r0, [r0, #0]
100592aa:	6900      	ldr	r0, [r0, #16]
100592ac:	b2f1      	uxtb	r1, r6
100592ae:	2309      	movs	r3, #9
100592b0:	f7fa fc3e 	bl	10053b30 <aci_event_fifo_push_header>
100592b4:	2800      	cmp	r0, #0
100592b6:	d03e      	beq.n	10059336 <llc_conn_push_connection_complete_event+0x256>
100592b8:	4604      	mov	r4, r0
100592ba:	9703      	str	r7, [sp, #12]
100592bc:	4607      	mov	r7, r0
100592be:	371f      	adds	r7, #31
100592c0:	7245      	strb	r5, [r0, #9]
100592c2:	9805      	ldr	r0, [sp, #20]
100592c4:	7320      	strb	r0, [r4, #12]
100592c6:	9806      	ldr	r0, [sp, #24]
100592c8:	72e0      	strb	r0, [r4, #11]
100592ca:	9804      	ldr	r0, [sp, #16]
100592cc:	7220      	strb	r0, [r4, #8]
100592ce:	0a28      	lsrs	r0, r5, #8
100592d0:	72a0      	strb	r0, [r4, #10]
100592d2:	4620      	mov	r0, r4
100592d4:	300d      	adds	r0, #13
100592d6:	2506      	movs	r5, #6
100592d8:	9907      	ldr	r1, [sp, #28]
100592da:	462a      	mov	r2, r5
100592dc:	4b1a      	ldr	r3, [pc, #104]	@ (10059348 <__arm_cp.28_3>)
100592de:	4798      	blx	r3
100592e0:	4620      	mov	r0, r4
100592e2:	3013      	adds	r0, #19
100592e4:	9908      	ldr	r1, [sp, #32]
100592e6:	462a      	mov	r2, r5
100592e8:	4b17      	ldr	r3, [pc, #92]	@ (10059348 <__arm_cp.28_3>)
100592ea:	4798      	blx	r3
100592ec:	4b16      	ldr	r3, [pc, #88]	@ (10059348 <__arm_cp.28_3>)
100592ee:	4620      	mov	r0, r4
100592f0:	3019      	adds	r0, #25
100592f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
100592f4:	462a      	mov	r2, r5
100592f6:	4798      	blx	r3
100592f8:	2021      	movs	r0, #33	@ 0x21
100592fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100592fc:	5422      	strb	r2, [r4, r0]
100592fe:	2025      	movs	r0, #37	@ 0x25
10059300:	990a      	ldr	r1, [sp, #40]	@ 0x28
10059302:	5421      	strb	r1, [r4, r0]
10059304:	1d20      	adds	r0, r4, #4
10059306:	4621      	mov	r1, r4
10059308:	3121      	adds	r1, #33	@ 0x21
1005930a:	0a12      	lsrs	r2, r2, #8
1005930c:	704a      	strb	r2, [r1, #1]
1005930e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10059310:	0a11      	lsrs	r1, r2, #8
10059312:	7079      	strb	r1, [r7, #1]
10059314:	703a      	strb	r2, [r7, #0]
10059316:	9a03      	ldr	r2, [sp, #12]
10059318:	0a11      	lsrs	r1, r2, #8
1005931a:	7179      	strb	r1, [r7, #5]
1005931c:	713a      	strb	r2, [r7, #4]
1005931e:	210a      	movs	r1, #10
10059320:	221f      	movs	r2, #31
10059322:	2304      	movs	r3, #4
10059324:	7123      	strb	r3, [r4, #4]
10059326:	233e      	movs	r3, #62	@ 0x3e
10059328:	7043      	strb	r3, [r0, #1]
1005932a:	71e1      	strb	r1, [r4, #7]
1005932c:	71a2      	strb	r2, [r4, #6]
1005932e:	b2f0      	uxtb	r0, r6
10059330:	4621      	mov	r1, r4
10059332:	f7fa fc9a 	bl	10053c6a <aci_event_fifo_push>
10059336:	b00d      	add	sp, #52	@ 0x34
10059338:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005933a:	46c0      	nop			@ (mov r8, r8)

1005933c <__arm_cp.28_0>:
1005933c:	20002414 	.word	0x20002414

10059340 <__arm_cp.28_1>:
10059340:	20002468 	.word	0x20002468

10059344 <__arm_cp.28_2>:
10059344:	20002418 	.word	0x20002418

10059348 <__arm_cp.28_3>:
10059348:	10051099 	.word	0x10051099

1005934c <llc_conn_push_csa_event>:
1005934c:	b5b0      	push	{r4, r5, r7, lr}
1005934e:	460d      	mov	r5, r1
10059350:	4604      	mov	r4, r0
10059352:	4812      	ldr	r0, [pc, #72]	@ (1005939c <__arm_cp.29_0>)
10059354:	6800      	ldr	r0, [r0, #0]
10059356:	213d      	movs	r1, #61	@ 0x3d
10059358:	5c41      	ldrb	r1, [r0, r1]
1005935a:	0689      	lsls	r1, r1, #26
1005935c:	d51c      	bpl.n	10059398 <llc_conn_push_csa_event+0x4c>
1005935e:	303d      	adds	r0, #61	@ 0x3d
10059360:	7ac0      	ldrb	r0, [r0, #11]
10059362:	0700      	lsls	r0, r0, #28
10059364:	d518      	bpl.n	10059398 <llc_conn_push_csa_event+0x4c>
10059366:	480e      	ldr	r0, [pc, #56]	@ (100593a0 <__arm_cp.29_1>)
10059368:	6800      	ldr	r0, [r0, #0]
1005936a:	6940      	ldr	r0, [r0, #20]
1005936c:	21a1      	movs	r1, #161	@ 0xa1
1005936e:	222c      	movs	r2, #44	@ 0x2c
10059370:	2302      	movs	r3, #2
10059372:	f7fa fbdd 	bl	10053b30 <aci_event_fifo_push_header>
10059376:	2800      	cmp	r0, #0
10059378:	d00e      	beq.n	10059398 <llc_conn_push_csa_event+0x4c>
1005937a:	4601      	mov	r1, r0
1005937c:	7204      	strb	r4, [r0, #8]
1005937e:	7285      	strb	r5, [r0, #10]
10059380:	2014      	movs	r0, #20
10059382:	71c8      	strb	r0, [r1, #7]
10059384:	2004      	movs	r0, #4
10059386:	7188      	strb	r0, [r1, #6]
10059388:	223e      	movs	r2, #62	@ 0x3e
1005938a:	714a      	strb	r2, [r1, #5]
1005938c:	7108      	strb	r0, [r1, #4]
1005938e:	0a20      	lsrs	r0, r4, #8
10059390:	7248      	strb	r0, [r1, #9]
10059392:	20a1      	movs	r0, #161	@ 0xa1
10059394:	f7fa fc69 	bl	10053c6a <aci_event_fifo_push>
10059398:	bdb0      	pop	{r4, r5, r7, pc}
1005939a:	46c0      	nop			@ (mov r8, r8)

1005939c <__arm_cp.29_0>:
1005939c:	20002468 	.word	0x20002468

100593a0 <__arm_cp.29_1>:
100593a0:	20002418 	.word	0x20002418

100593a4 <llc_conn_set_chmap_params>:
100593a4:	2398      	movs	r3, #152	@ 0x98
100593a6:	52c2      	strh	r2, [r0, r3]
100593a8:	3098      	adds	r0, #152	@ 0x98
100593aa:	6341      	str	r1, [r0, #52]	@ 0x34
100593ac:	8841      	ldrh	r1, [r0, #2]
100593ae:	2220      	movs	r2, #32
100593b0:	430a      	orrs	r2, r1
100593b2:	8042      	strh	r2, [r0, #2]
100593b4:	4770      	bx	lr

100593b6 <llc_conn_set_conn_update_params>:
100593b6:	2398      	movs	r3, #152	@ 0x98
100593b8:	52c2      	strh	r2, [r0, r3]
100593ba:	3098      	adds	r0, #152	@ 0x98
100593bc:	6301      	str	r1, [r0, #48]	@ 0x30
100593be:	8841      	ldrh	r1, [r0, #2]
100593c0:	2208      	movs	r2, #8
100593c2:	430a      	orrs	r2, r1
100593c4:	8042      	strh	r2, [r0, #2]
100593c6:	4770      	bx	lr

100593c8 <llc_conn_set_rx_acl_blocked>:
100593c8:	2194      	movs	r1, #148	@ 0x94
100593ca:	5840      	ldr	r0, [r0, r1]
100593cc:	8801      	ldrh	r1, [r0, #0]
100593ce:	2201      	movs	r2, #1
100593d0:	0212      	lsls	r2, r2, #8
100593d2:	430a      	orrs	r2, r1
100593d4:	8002      	strh	r2, [r0, #0]
100593d6:	4770      	bx	lr

100593d8 <llc_conn_set_start_enc>:
100593d8:	2294      	movs	r2, #148	@ 0x94
100593da:	5880      	ldr	r0, [r0, r2]
100593dc:	2900      	cmp	r1, #0
100593de:	d007      	beq.n	100593f0 <llc_conn_set_start_enc+0x18>
100593e0:	2901      	cmp	r1, #1
100593e2:	d003      	beq.n	100593ec <llc_conn_set_start_enc+0x14>
100593e4:	8801      	ldrh	r1, [r0, #0]
100593e6:	2210      	movs	r2, #16
100593e8:	430a      	orrs	r2, r1
100593ea:	8002      	strh	r2, [r0, #0]
100593ec:	2108      	movs	r1, #8
100593ee:	e000      	b.n	100593f2 <llc_conn_set_start_enc+0x1a>
100593f0:	2110      	movs	r1, #16
100593f2:	8802      	ldrh	r2, [r0, #0]
100593f4:	430a      	orrs	r2, r1
100593f6:	8002      	strh	r2, [r0, #0]
100593f8:	4770      	bx	lr

100593fa <llc_conn_set_stop_enc>:
100593fa:	2294      	movs	r2, #148	@ 0x94
100593fc:	5880      	ldr	r0, [r0, r2]
100593fe:	2900      	cmp	r1, #0
10059400:	d007      	beq.n	10059412 <llc_conn_set_stop_enc+0x18>
10059402:	2901      	cmp	r1, #1
10059404:	d003      	beq.n	1005940e <llc_conn_set_stop_enc+0x14>
10059406:	8801      	ldrh	r1, [r0, #0]
10059408:	2240      	movs	r2, #64	@ 0x40
1005940a:	430a      	orrs	r2, r1
1005940c:	8002      	strh	r2, [r0, #0]
1005940e:	2120      	movs	r1, #32
10059410:	e000      	b.n	10059414 <llc_conn_set_stop_enc+0x1a>
10059412:	2140      	movs	r1, #64	@ 0x40
10059414:	8802      	ldrh	r2, [r0, #0]
10059416:	430a      	orrs	r2, r1
10059418:	8002      	strh	r2, [r0, #0]
1005941a:	4770      	bx	lr

1005941c <llc_conn_set_tx_acl_blocked>:
1005941c:	2194      	movs	r1, #148	@ 0x94
1005941e:	5840      	ldr	r0, [r0, r1]
10059420:	8801      	ldrh	r1, [r0, #0]
10059422:	2280      	movs	r2, #128	@ 0x80
10059424:	430a      	orrs	r2, r1
10059426:	8002      	strh	r2, [r0, #0]
10059428:	4770      	bx	lr

1005942a <llc_conn_set_tx_ctrl_pdu_has_instant>:
1005942a:	2194      	movs	r1, #148	@ 0x94
1005942c:	5840      	ldr	r0, [r0, r1]
1005942e:	8801      	ldrh	r1, [r0, #0]
10059430:	2204      	movs	r2, #4
10059432:	430a      	orrs	r2, r1
10059434:	8002      	strh	r2, [r0, #0]
10059436:	4770      	bx	lr

10059438 <llc_conn_set_tx_ctrl_pdu_state>:
10059438:	b580      	push	{r7, lr}
1005943a:	2294      	movs	r2, #148	@ 0x94
1005943c:	5880      	ldr	r0, [r0, r2]
1005943e:	8802      	ldrh	r2, [r0, #0]
10059440:	2303      	movs	r3, #3
10059442:	439a      	bics	r2, r3
10059444:	8002      	strh	r2, [r0, #0]
10059446:	4019      	ands	r1, r3
10059448:	8802      	ldrh	r2, [r0, #0]
1005944a:	430a      	orrs	r2, r1
1005944c:	8002      	strh	r2, [r0, #0]
1005944e:	2015      	movs	r0, #21
10059450:	f007 feb8 	bl	100611c4 <tsk_notify_idx>
10059454:	f7f7 f839 	bl	100504ca <BLE_STACK_ProcessRequest>
10059458:	bd80      	pop	{r7, pc}

1005945a <llc_conn_calc_skip_ucfg_weak>:
1005945a:	4610      	mov	r0, r2
1005945c:	4770      	bx	lr

1005945e <llc_conn_multi_link_connection>:
1005945e:	b5b0      	push	{r4, r5, r7, lr}
10059460:	4604      	mov	r4, r0
10059462:	2536      	movs	r5, #54	@ 0x36
10059464:	f7ff fa80 	bl	10058968 <llc_conn_get_cntxt_p>
10059468:	5544      	strb	r4, [r0, r5]
1005946a:	2000      	movs	r0, #0
1005946c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10059470 <llc_conn_check_connect_request_params>:
10059470:	b5f0      	push	{r4, r5, r6, r7, lr}
10059472:	b087      	sub	sp, #28
10059474:	4604      	mov	r4, r0
10059476:	7e00      	ldrb	r0, [r0, #24]
10059478:	7e61      	ldrb	r1, [r4, #25]
1005947a:	0209      	lsls	r1, r1, #8
1005947c:	180e      	adds	r6, r1, r0
1005947e:	1e72      	subs	r2, r6, #1
10059480:	2a08      	cmp	r2, #8
10059482:	d300      	bcc.n	10059486 <llc_conn_check_connect_request_params+0x16>
10059484:	2208      	movs	r2, #8
10059486:	7ea0      	ldrb	r0, [r4, #26]
10059488:	9004      	str	r0, [sp, #16]
1005948a:	7ee0      	ldrb	r0, [r4, #27]
1005948c:	9003      	str	r0, [sp, #12]
1005948e:	7d60      	ldrb	r0, [r4, #21]
10059490:	2101      	movs	r1, #1
10059492:	4f27      	ldr	r7, [pc, #156]	@ (10059530 <__arm_cp.1_0>)
10059494:	9101      	str	r1, [sp, #4]
10059496:	47b8      	blx	r7
10059498:	4605      	mov	r5, r0
1005949a:	7da0      	ldrb	r0, [r4, #22]
1005949c:	7de1      	ldrb	r1, [r4, #23]
1005949e:	0209      	lsls	r1, r1, #8
100594a0:	1808      	adds	r0, r1, r0
100594a2:	2100      	movs	r1, #0
100594a4:	9106      	str	r1, [sp, #24]
100594a6:	4632      	mov	r2, r6
100594a8:	47b8      	blx	r7
100594aa:	4633      	mov	r3, r6
100594ac:	9602      	str	r6, [sp, #8]
100594ae:	4606      	mov	r6, r0
100594b0:	432e      	orrs	r6, r5
100594b2:	2019      	movs	r0, #25
100594b4:	01c2      	lsls	r2, r0, #7
100594b6:	2106      	movs	r1, #6
100594b8:	4618      	mov	r0, r3
100594ba:	9205      	str	r2, [sp, #20]
100594bc:	47b8      	blx	r7
100594be:	463b      	mov	r3, r7
100594c0:	4605      	mov	r5, r0
100594c2:	4335      	orrs	r5, r6
100594c4:	9803      	ldr	r0, [sp, #12]
100594c6:	0200      	lsls	r0, r0, #8
100594c8:	9904      	ldr	r1, [sp, #16]
100594ca:	1847      	adds	r7, r0, r1
100594cc:	22ff      	movs	r2, #255	@ 0xff
100594ce:	32f4      	adds	r2, #244	@ 0xf4
100594d0:	4638      	mov	r0, r7
100594d2:	9906      	ldr	r1, [sp, #24]
100594d4:	4798      	blx	r3
100594d6:	4606      	mov	r6, r0
100594d8:	432e      	orrs	r6, r5
100594da:	1c78      	adds	r0, r7, #1
100594dc:	9902      	ldr	r1, [sp, #8]
100594de:	4348      	muls	r0, r1
100594e0:	0880      	lsrs	r0, r0, #2
100594e2:	b281      	uxth	r1, r0
100594e4:	290a      	cmp	r1, #10
100594e6:	d800      	bhi.n	100594ea <llc_conn_check_connect_request_params+0x7a>
100594e8:	210a      	movs	r1, #10
100594ea:	7f20      	ldrb	r0, [r4, #28]
100594ec:	7f62      	ldrb	r2, [r4, #29]
100594ee:	0212      	lsls	r2, r2, #8
100594f0:	1810      	adds	r0, r2, r0
100594f2:	9a05      	ldr	r2, [sp, #20]
100594f4:	4d0e      	ldr	r5, [pc, #56]	@ (10059530 <__arm_cp.1_0>)
100594f6:	47a8      	blx	r5
100594f8:	4306      	orrs	r6, r0
100594fa:	2023      	movs	r0, #35	@ 0x23
100594fc:	5c21      	ldrb	r1, [r4, r0]
100594fe:	201f      	movs	r0, #31
10059500:	4008      	ands	r0, r1
10059502:	2105      	movs	r1, #5
10059504:	2210      	movs	r2, #16
10059506:	47a8      	blx	r5
10059508:	4330      	orrs	r0, r6
1005950a:	d001      	beq.n	10059510 <llc_conn_check_connect_request_params+0xa0>
1005950c:	9806      	ldr	r0, [sp, #24]
1005950e:	e00c      	b.n	1005952a <llc_conn_check_connect_request_params+0xba>
10059510:	4620      	mov	r0, r4
10059512:	3022      	adds	r0, #34	@ 0x22
10059514:	7800      	ldrb	r0, [r0, #0]
10059516:	06c0      	lsls	r0, r0, #27
10059518:	d106      	bne.n	10059528 <llc_conn_check_connect_request_params+0xb8>
1005951a:	201e      	movs	r0, #30
1005951c:	2822      	cmp	r0, #34	@ 0x22
1005951e:	d0f5      	beq.n	1005950c <llc_conn_check_connect_request_params+0x9c>
10059520:	5c21      	ldrb	r1, [r4, r0]
10059522:	1c40      	adds	r0, r0, #1
10059524:	2900      	cmp	r1, #0
10059526:	d0f9      	beq.n	1005951c <llc_conn_check_connect_request_params+0xac>
10059528:	9801      	ldr	r0, [sp, #4]
1005952a:	b007      	add	sp, #28
1005952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005952e:	46c0      	nop			@ (mov r8, r8)

10059530 <__arm_cp.1_0>:
10059530:	1005e8a1 	.word	0x1005e8a1

10059534 <llc_conn_check_ctrl_proc_rsp_timer>:
10059534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059536:	460d      	mov	r5, r1
10059538:	4604      	mov	r4, r0
1005953a:	2030      	movs	r0, #48	@ 0x30
1005953c:	5c20      	ldrb	r0, [r4, r0]
1005953e:	2101      	movs	r1, #1
10059540:	f001 f871 	bl	1005a626 <LL_cpe_get_active_status>
10059544:	4627      	mov	r7, r4
10059546:	3730      	adds	r7, #48	@ 0x30
10059548:	2801      	cmp	r0, #1
1005954a:	d10e      	bne.n	1005956a <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005954c:	7838      	ldrb	r0, [r7, #0]
1005954e:	2101      	movs	r1, #1
10059550:	f001 fe8a 	bl	1005b268 <LL_cpe_conn_exception_opcode_from_sm>
10059554:	2800      	cmp	r0, #0
10059556:	d108      	bne.n	1005956a <llc_conn_check_ctrl_proc_rsp_timer+0x36>
10059558:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1005955a:	1e41      	subs	r1, r0, #1
1005955c:	d41d      	bmi.n	1005959a <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005955e:	217d      	movs	r1, #125	@ 0x7d
10059560:	0449      	lsls	r1, r1, #17
10059562:	4288      	cmp	r0, r1
10059564:	d800      	bhi.n	10059568 <llc_conn_check_ctrl_proc_rsp_timer+0x34>
10059566:	1b41      	subs	r1, r0, r5
10059568:	6721      	str	r1, [r4, #112]	@ 0x70
1005956a:	7838      	ldrb	r0, [r7, #0]
1005956c:	2600      	movs	r6, #0
1005956e:	4631      	mov	r1, r6
10059570:	f001 f859 	bl	1005a626 <LL_cpe_get_active_status>
10059574:	2801      	cmp	r0, #1
10059576:	d111      	bne.n	1005959c <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10059578:	7838      	ldrb	r0, [r7, #0]
1005957a:	2600      	movs	r6, #0
1005957c:	4631      	mov	r1, r6
1005957e:	f001 fe73 	bl	1005b268 <LL_cpe_conn_exception_opcode_from_sm>
10059582:	2800      	cmp	r0, #0
10059584:	d10a      	bne.n	1005959c <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10059586:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10059588:	1e41      	subs	r1, r0, #1
1005958a:	d406      	bmi.n	1005959a <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005958c:	217d      	movs	r1, #125	@ 0x7d
1005958e:	0449      	lsls	r1, r1, #17
10059590:	4288      	cmp	r0, r1
10059592:	d800      	bhi.n	10059596 <llc_conn_check_ctrl_proc_rsp_timer+0x62>
10059594:	1b41      	subs	r1, r0, r5
10059596:	66e1      	str	r1, [r4, #108]	@ 0x6c
10059598:	e000      	b.n	1005959c <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005959a:	2622      	movs	r6, #34	@ 0x22
1005959c:	4630      	mov	r0, r6
1005959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100595a0 <llc_conn_check_instant_and_set_params>:
100595a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100595a2:	4604      	mov	r4, r0
100595a4:	209a      	movs	r0, #154	@ 0x9a
100595a6:	5a20      	ldrh	r0, [r4, r0]
100595a8:	07c2      	lsls	r2, r0, #31
100595aa:	4625      	mov	r5, r4
100595ac:	352c      	adds	r5, #44	@ 0x2c
100595ae:	2a00      	cmp	r2, #0
100595b0:	d100      	bne.n	100595b4 <llc_conn_check_instant_and_set_params+0x14>
100595b2:	e081      	b.n	100596b8 <llc_conn_check_instant_and_set_params+0x118>
100595b4:	4626      	mov	r6, r4
100595b6:	3698      	adds	r6, #152	@ 0x98
100595b8:	8832      	ldrh	r2, [r6, #0]
100595ba:	1a51      	subs	r1, r2, r1
100595bc:	040b      	lsls	r3, r1, #16
100595be:	d004      	beq.n	100595ca <llc_conn_check_instant_and_set_params+0x2a>
100595c0:	b208      	sxth	r0, r1
100595c2:	2800      	cmp	r0, #0
100595c4:	d578      	bpl.n	100596b8 <llc_conn_check_instant_and_set_params+0x118>
100595c6:	2028      	movs	r0, #40	@ 0x28
100595c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100595ca:	0541      	lsls	r1, r0, #21
100595cc:	d40f      	bmi.n	100595ee <llc_conn_check_instant_and_set_params+0x4e>
100595ce:	0701      	lsls	r1, r0, #28
100595d0:	d416      	bmi.n	10059600 <llc_conn_check_instant_and_set_params+0x60>
100595d2:	0680      	lsls	r0, r0, #26
100595d4:	d438      	bmi.n	10059648 <llc_conn_check_instant_and_set_params+0xa8>
100595d6:	7928      	ldrb	r0, [r5, #4]
100595d8:	f7f4 f923 	bl	1004d822 <LL_phy_upd_pending_ucfg>
100595dc:	2800      	cmp	r0, #0
100595de:	d060      	beq.n	100596a2 <llc_conn_check_instant_and_set_params+0x102>
100595e0:	7928      	ldrb	r0, [r5, #4]
100595e2:	2101      	movs	r1, #1
100595e4:	2200      	movs	r2, #0
100595e6:	4613      	mov	r3, r2
100595e8:	f003 f9e2 	bl	1005c9b0 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
100595ec:	e059      	b.n	100596a2 <llc_conn_check_instant_and_set_params+0x102>
100595ee:	7928      	ldrb	r0, [r5, #4]
100595f0:	4611      	mov	r1, r2
100595f2:	f7ff f9b7 	bl	10058964 <llc_cig_cmn_start_cis_ucfg_weak>
100595f6:	8870      	ldrh	r0, [r6, #2]
100595f8:	4932      	ldr	r1, [pc, #200]	@ (100596c4 <__arm_cp.3_0>)
100595fa:	4001      	ands	r1, r0
100595fc:	8071      	strh	r1, [r6, #2]
100595fe:	e050      	b.n	100596a2 <llc_conn_check_instant_and_set_params+0x102>
10059600:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059602:	6b37      	ldr	r7, [r6, #48]	@ 0x30
10059604:	6879      	ldr	r1, [r7, #4]
10059606:	1840      	adds	r0, r0, r1
10059608:	6460      	str	r0, [r4, #68]	@ 0x44
1005960a:	68b9      	ldr	r1, [r7, #8]
1005960c:	683a      	ldr	r2, [r7, #0]
1005960e:	7828      	ldrb	r0, [r5, #0]
10059610:	2802      	cmp	r0, #2
10059612:	9102      	str	r1, [sp, #8]
10059614:	9201      	str	r2, [sp, #4]
10059616:	d129      	bne.n	1005966c <llc_conn_check_instant_and_set_params+0xcc>
10059618:	7d68      	ldrb	r0, [r5, #21]
1005961a:	f7f9 f92f 	bl	1005287c <BLEPLAT_CNTR_SmGetTxPhy>
1005961e:	2804      	cmp	r0, #4
10059620:	d001      	beq.n	10059626 <llc_conn_check_instant_and_set_params+0x86>
10059622:	2806      	cmp	r0, #6
10059624:	d100      	bne.n	10059628 <llc_conn_check_instant_and_set_params+0x88>
10059626:	2002      	movs	r0, #2
10059628:	9b02      	ldr	r3, [sp, #8]
1005962a:	6979      	ldr	r1, [r7, #20]
1005962c:	4299      	cmp	r1, r3
1005962e:	460a      	mov	r2, r1
10059630:	d300      	bcc.n	10059634 <llc_conn_check_instant_and_set_params+0x94>
10059632:	461a      	mov	r2, r3
10059634:	6522      	str	r2, [r4, #80]	@ 0x50
10059636:	0080      	lsls	r0, r0, #2
10059638:	1820      	adds	r0, r4, r0
1005963a:	6581      	str	r1, [r0, #88]	@ 0x58
1005963c:	9801      	ldr	r0, [sp, #4]
1005963e:	0840      	lsrs	r0, r0, #1
10059640:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10059642:	1808      	adds	r0, r1, r0
10059644:	6460      	str	r0, [r4, #68]	@ 0x44
10059646:	e01b      	b.n	10059680 <llc_conn_check_instant_and_set_params+0xe0>
10059648:	2083      	movs	r0, #131	@ 0x83
1005964a:	0040      	lsls	r0, r0, #1
1005964c:	1827      	adds	r7, r4, r0
1005964e:	6b71      	ldr	r1, [r6, #52]	@ 0x34
10059650:	7d68      	ldrb	r0, [r5, #21]
10059652:	f7f9 f969 	bl	10052928 <BLEPLAT_CNTR_SmSetChannelMap>
10059656:	7838      	ldrb	r0, [r7, #0]
10059658:	2801      	cmp	r0, #1
1005965a:	d104      	bne.n	10059666 <llc_conn_check_instant_and_set_params+0xc6>
1005965c:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005965e:	34e0      	adds	r4, #224	@ 0xe0
10059660:	4620      	mov	r0, r4
10059662:	f000 fdcf 	bl	1005a204 <llc_mngm_csa2_update_remapping_table>
10059666:	8870      	ldrh	r0, [r6, #2]
10059668:	2120      	movs	r1, #32
1005966a:	e018      	b.n	1005969e <llc_conn_check_instant_and_set_params+0xfe>
1005966c:	f7ff f97c 	bl	10058968 <llc_conn_get_cntxt_p>
10059670:	9b02      	ldr	r3, [sp, #8]
10059672:	9901      	ldr	r1, [sp, #4]
10059674:	6361      	str	r1, [r4, #52]	@ 0x34
10059676:	6840      	ldr	r0, [r0, #4]
10059678:	4298      	cmp	r0, r3
1005967a:	d300      	bcc.n	1005967e <llc_conn_check_instant_and_set_params+0xde>
1005967c:	4618      	mov	r0, r3
1005967e:	6520      	str	r0, [r4, #80]	@ 0x50
10059680:	68f8      	ldr	r0, [r7, #12]
10059682:	8720      	strh	r0, [r4, #56]	@ 0x38
10059684:	6938      	ldr	r0, [r7, #16]
10059686:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
10059688:	180a      	adds	r2, r1, r0
1005968a:	6662      	str	r2, [r4, #100]	@ 0x64
1005968c:	66a0      	str	r0, [r4, #104]	@ 0x68
1005968e:	4299      	cmp	r1, r3
10059690:	d003      	beq.n	1005969a <llc_conn_check_instant_and_set_params+0xfa>
10059692:	64e3      	str	r3, [r4, #76]	@ 0x4c
10059694:	4620      	mov	r0, r4
10059696:	f000 ff72 	bl	1005a57e <llc_subrate_reset_params>
1005969a:	8870      	ldrh	r0, [r6, #2]
1005969c:	2108      	movs	r1, #8
1005969e:	4388      	bics	r0, r1
100596a0:	8070      	strh	r0, [r6, #2]
100596a2:	8870      	ldrh	r0, [r6, #2]
100596a4:	2102      	movs	r1, #2
100596a6:	4301      	orrs	r1, r0
100596a8:	2001      	movs	r0, #1
100596aa:	4381      	bics	r1, r0
100596ac:	8071      	strh	r1, [r6, #2]
100596ae:	2015      	movs	r0, #21
100596b0:	f007 fd88 	bl	100611c4 <tsk_notify_idx>
100596b4:	f7f6 ff09 	bl	100504ca <BLE_STACK_ProcessRequest>
100596b8:	7928      	ldrb	r0, [r5, #4]
100596ba:	f7f4 f8da 	bl	1004d872 <LL_phy_upd_evt_pending_check_isr_ucfg>
100596be:	2000      	movs	r0, #0
100596c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100596c2:	46c0      	nop			@ (mov r8, r8)

100596c4 <__arm_cp.3_0>:
100596c4:	0000fbff 	.word	0x0000fbff

100596c8 <llc_conn_check_supervision_timer>:
100596c8:	6e42      	ldr	r2, [r0, #100]	@ 0x64
100596ca:	1a51      	subs	r1, r2, r1
100596cc:	6641      	str	r1, [r0, #100]	@ 0x64
100596ce:	1e49      	subs	r1, r1, #1
100596d0:	d401      	bmi.n	100596d6 <llc_conn_check_supervision_timer+0xe>
100596d2:	2000      	movs	r0, #0
100596d4:	4770      	bx	lr
100596d6:	2188      	movs	r1, #136	@ 0x88
100596d8:	5c40      	ldrb	r0, [r0, r1]
100596da:	0680      	lsls	r0, r0, #26
100596dc:	d501      	bpl.n	100596e2 <llc_conn_check_supervision_timer+0x1a>
100596de:	2008      	movs	r0, #8
100596e0:	4770      	bx	lr
100596e2:	203e      	movs	r0, #62	@ 0x3e
100596e4:	4770      	bx	lr

100596e6 <llc_conn_release_conn_idx>:
100596e6:	b580      	push	{r7, lr}
100596e8:	f7ff f948 	bl	1005897c <llc_conn_get_cntxt_per_p>
100596ec:	212c      	movs	r1, #44	@ 0x2c
100596ee:	2200      	movs	r2, #0
100596f0:	5442      	strb	r2, [r0, r1]
100596f2:	bd80      	pop	{r7, pc}

100596f4 <llc_conn_disconnect_link>:
100596f4:	b5b0      	push	{r4, r5, r7, lr}
100596f6:	460c      	mov	r4, r1
100596f8:	4601      	mov	r1, r0
100596fa:	0a02      	lsrs	r2, r0, #8
100596fc:	2012      	movs	r0, #18
100596fe:	2a0e      	cmp	r2, #14
10059700:	d81c      	bhi.n	1005973c <llc_conn_disconnect_link+0x48>
10059702:	2c1a      	cmp	r4, #26
10059704:	d81a      	bhi.n	1005973c <llc_conn_disconnect_link+0x48>
10059706:	2201      	movs	r2, #1
10059708:	40a2      	lsls	r2, r4
1005970a:	4b0d      	ldr	r3, [pc, #52]	@ (10059740 <__arm_cp.9_0>)
1005970c:	421a      	tst	r2, r3
1005970e:	d015      	beq.n	1005973c <llc_conn_disconnect_link+0x48>
10059710:	4608      	mov	r0, r1
10059712:	f7ff f941 	bl	10058998 <llc_conn_get_cntxt_per_p_from_handle>
10059716:	2800      	cmp	r0, #0
10059718:	d008      	beq.n	1005972c <llc_conn_disconnect_link+0x38>
1005971a:	4605      	mov	r5, r0
1005971c:	2030      	movs	r0, #48	@ 0x30
1005971e:	5c28      	ldrb	r0, [r5, r0]
10059720:	f001 fd9b 	bl	1005b25a <LL_cpe_get_tx_terminate_in_progress>
10059724:	2801      	cmp	r0, #1
10059726:	d103      	bne.n	10059730 <llc_conn_disconnect_link+0x3c>
10059728:	203a      	movs	r0, #58	@ 0x3a
1005972a:	bdb0      	pop	{r4, r5, r7, pc}
1005972c:	2002      	movs	r0, #2
1005972e:	bdb0      	pop	{r4, r5, r7, pc}
10059730:	3530      	adds	r5, #48	@ 0x30
10059732:	7828      	ldrb	r0, [r5, #0]
10059734:	4621      	mov	r1, r4
10059736:	f001 fd83 	bl	1005b240 <LL_cpe_set_disconnect>
1005973a:	2000      	movs	r0, #0
1005973c:	bdb0      	pop	{r4, r5, r7, pc}
1005973e:	46c0      	nop			@ (mov r8, r8)

10059740 <__arm_cp.9_0>:
10059740:	04080020 	.word	0x04080020

10059744 <llc_conn_disconnect_link_from_cpf>:
10059744:	b510      	push	{r4, lr}
10059746:	4604      	mov	r4, r0
10059748:	202d      	movs	r0, #45	@ 0x2d
1005974a:	5421      	strb	r1, [r4, r0]
1005974c:	342d      	adds	r4, #45	@ 0x2d
1005974e:	7d20      	ldrb	r0, [r4, #20]
10059750:	f005 fd72 	bl	1005f238 <LL_sched_delete_taskslot>
10059754:	7d20      	ldrb	r0, [r4, #20]
10059756:	f005 fdc1 	bl	1005f2dc <LL_sched_check_and_wait_sched>
1005975a:	bd10      	pop	{r4, pc}

1005975c <llc_conn_go_to_connect>:
1005975c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005975e:	b0ad      	sub	sp, #180	@ 0xb4
10059760:	4605      	mov	r5, r0
10059762:	7ac0      	ldrb	r0, [r0, #11]
10059764:	f7ff f90a 	bl	1005897c <llc_conn_get_cntxt_per_p>
10059768:	4606      	mov	r6, r0
1005976a:	f7ff f8fd 	bl	10058968 <llc_conn_get_cntxt_p>
1005976e:	901f      	str	r0, [sp, #124]	@ 0x7c
10059770:	682c      	ldr	r4, [r5, #0]
10059772:	2022      	movs	r0, #34	@ 0x22
10059774:	5c21      	ldrb	r1, [r4, r0]
10059776:	221f      	movs	r2, #31
10059778:	9217      	str	r2, [sp, #92]	@ 0x5c
1005977a:	4011      	ands	r1, r2
1005977c:	5421      	strb	r1, [r4, r0]
1005977e:	7d60      	ldrb	r0, [r4, #21]
10059780:	9010      	str	r0, [sp, #64]	@ 0x40
10059782:	7ba0      	ldrb	r0, [r4, #14]
10059784:	9020      	str	r0, [sp, #128]	@ 0x80
10059786:	7be0      	ldrb	r0, [r4, #15]
10059788:	900c      	str	r0, [sp, #48]	@ 0x30
1005978a:	7c20      	ldrb	r0, [r4, #16]
1005978c:	9018      	str	r0, [sp, #96]	@ 0x60
1005978e:	7c60      	ldrb	r0, [r4, #17]
10059790:	901a      	str	r0, [sp, #104]	@ 0x68
10059792:	7ca0      	ldrb	r0, [r4, #18]
10059794:	901c      	str	r0, [sp, #112]	@ 0x70
10059796:	7ce0      	ldrb	r0, [r4, #19]
10059798:	9013      	str	r0, [sp, #76]	@ 0x4c
1005979a:	7d20      	ldrb	r0, [r4, #20]
1005979c:	9016      	str	r0, [sp, #88]	@ 0x58
1005979e:	7da0      	ldrb	r0, [r4, #22]
100597a0:	9008      	str	r0, [sp, #32]
100597a2:	7de0      	ldrb	r0, [r4, #23]
100597a4:	900e      	str	r0, [sp, #56]	@ 0x38
100597a6:	7e20      	ldrb	r0, [r4, #24]
100597a8:	9015      	str	r0, [sp, #84]	@ 0x54
100597aa:	7e60      	ldrb	r0, [r4, #25]
100597ac:	9009      	str	r0, [sp, #36]	@ 0x24
100597ae:	7ea0      	ldrb	r0, [r4, #26]
100597b0:	9011      	str	r0, [sp, #68]	@ 0x44
100597b2:	7ee0      	ldrb	r0, [r4, #27]
100597b4:	900a      	str	r0, [sp, #40]	@ 0x28
100597b6:	7f20      	ldrb	r0, [r4, #28]
100597b8:	9014      	str	r0, [sp, #80]	@ 0x50
100597ba:	7f60      	ldrb	r0, [r4, #29]
100597bc:	900f      	str	r0, [sp, #60]	@ 0x3c
100597be:	7820      	ldrb	r0, [r4, #0]
100597c0:	901d      	str	r0, [sp, #116]	@ 0x74
100597c2:	4620      	mov	r0, r4
100597c4:	3022      	adds	r0, #34	@ 0x22
100597c6:	7840      	ldrb	r0, [r0, #1]
100597c8:	9019      	str	r0, [sp, #100]	@ 0x64
100597ca:	7ba8      	ldrb	r0, [r5, #14]
100597cc:	f7f9 f856 	bl	1005287c <BLEPLAT_CNTR_SmGetTxPhy>
100597d0:	9022      	str	r0, [sp, #136]	@ 0x88
100597d2:	f004 ff77 	bl	1005e6c4 <llc_get_channel_sel_algo2_enabled>
100597d6:	900b      	str	r0, [sp, #44]	@ 0x2c
100597d8:	2094      	movs	r0, #148	@ 0x94
100597da:	5830      	ldr	r0, [r6, r0]
100597dc:	2300      	movs	r3, #0
100597de:	6003      	str	r3, [r0, #0]
100597e0:	2090      	movs	r0, #144	@ 0x90
100597e2:	5830      	ldr	r0, [r6, r0]
100597e4:	6003      	str	r3, [r0, #0]
100597e6:	20a8      	movs	r0, #168	@ 0xa8
100597e8:	5233      	strh	r3, [r6, r0]
100597ea:	2042      	movs	r0, #66	@ 0x42
100597ec:	5233      	strh	r3, [r6, r0]
100597ee:	202d      	movs	r0, #45	@ 0x2d
100597f0:	5433      	strb	r3, [r6, r0]
100597f2:	2045      	movs	r0, #69	@ 0x45
100597f4:	0080      	lsls	r0, r0, #2
100597f6:	5033      	str	r3, [r6, r0]
100597f8:	2111      	movs	r1, #17
100597fa:	0109      	lsls	r1, r1, #4
100597fc:	5473      	strb	r3, [r6, r1]
100597fe:	2121      	movs	r1, #33	@ 0x21
10059800:	00c9      	lsls	r1, r1, #3
10059802:	227f      	movs	r2, #127	@ 0x7f
10059804:	5472      	strb	r2, [r6, r1]
10059806:	212f      	movs	r1, #47	@ 0x2f
10059808:	2207      	movs	r2, #7
1005980a:	5472      	strb	r2, [r6, r1]
1005980c:	2188      	movs	r1, #136	@ 0x88
1005980e:	5073      	str	r3, [r6, r1]
10059810:	218c      	movs	r1, #140	@ 0x8c
10059812:	5073      	str	r3, [r6, r1]
10059814:	4631      	mov	r1, r6
10059816:	31a8      	adds	r1, #168	@ 0xa8
10059818:	810b      	strh	r3, [r1, #8]
1005981a:	9121      	str	r1, [sp, #132]	@ 0x84
1005981c:	728b      	strb	r3, [r1, #10]
1005981e:	1830      	adds	r0, r6, r0
10059820:	931e      	str	r3, [sp, #120]	@ 0x78
10059822:	900d      	str	r0, [sp, #52]	@ 0x34
10059824:	6043      	str	r3, [r0, #4]
10059826:	2701      	movs	r7, #1
10059828:	8537      	strh	r7, [r6, #40]	@ 0x28
1005982a:	9523      	str	r5, [sp, #140]	@ 0x8c
1005982c:	7ba8      	ldrb	r0, [r5, #14]
1005982e:	2141      	movs	r1, #65	@ 0x41
10059830:	5470      	strb	r0, [r6, r1]
10059832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10059834:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10059836:	4002      	ands	r2, r0
10059838:	7ae8      	ldrb	r0, [r5, #11]
1005983a:	2131      	movs	r1, #49	@ 0x31
1005983c:	921b      	str	r2, [sp, #108]	@ 0x6c
1005983e:	5472      	strb	r2, [r6, r1]
10059840:	2130      	movs	r1, #48	@ 0x30
10059842:	9112      	str	r1, [sp, #72]	@ 0x48
10059844:	5470      	strb	r0, [r6, r1]
10059846:	9809      	ldr	r0, [sp, #36]	@ 0x24
10059848:	0200      	lsls	r0, r0, #8
1005984a:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005984c:	1840      	adds	r0, r0, r1
1005984e:	9015      	str	r0, [sp, #84]	@ 0x54
10059850:	b280      	uxth	r0, r0
10059852:	0241      	lsls	r1, r0, #9
10059854:	64f1      	str	r1, [r6, #76]	@ 0x4c
10059856:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10059858:	0209      	lsls	r1, r1, #8
1005985a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005985c:	1889      	adds	r1, r1, r2
1005985e:	9114      	str	r1, [sp, #80]	@ 0x50
10059860:	b289      	uxth	r1, r1
10059862:	0309      	lsls	r1, r1, #12
10059864:	2203      	movs	r2, #3
10059866:	920f      	str	r2, [sp, #60]	@ 0x3c
10059868:	0292      	lsls	r2, r2, #10
1005986a:	4342      	muls	r2, r0
1005986c:	6672      	str	r2, [r6, #100]	@ 0x64
1005986e:	66b1      	str	r1, [r6, #104]	@ 0x68
10059870:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10059872:	0200      	lsls	r0, r0, #8
10059874:	991c      	ldr	r1, [sp, #112]	@ 0x70
10059876:	1840      	adds	r0, r0, r1
10059878:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005987a:	0409      	lsls	r1, r1, #16
1005987c:	1840      	adds	r0, r0, r1
1005987e:	9016      	str	r0, [sp, #88]	@ 0x58
10059880:	6570      	str	r0, [r6, #84]	@ 0x54
10059882:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059884:	0200      	lsls	r0, r0, #8
10059886:	9911      	ldr	r1, [sp, #68]	@ 0x44
10059888:	1840      	adds	r0, r0, r1
1005988a:	9011      	str	r0, [sp, #68]	@ 0x44
1005988c:	8730      	strh	r0, [r6, #56]	@ 0x38
1005988e:	25ff      	movs	r5, #255	@ 0xff
10059890:	950a      	str	r5, [sp, #40]	@ 0x28
10059892:	3512      	adds	r5, #18
10059894:	f005 fa08 	bl	1005eca8 <llc_get_next_free_conn_handle>
10059898:	971c      	str	r7, [sp, #112]	@ 0x70
1005989a:	5577      	strb	r7, [r6, r5]
1005989c:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005989e:	8770      	strh	r0, [r6, #58]	@ 0x3a
100598a0:	207d      	movs	r0, #125	@ 0x7d
100598a2:	0440      	lsls	r0, r0, #17
100598a4:	66f0      	str	r0, [r6, #108]	@ 0x6c
100598a6:	6730      	str	r0, [r6, #112]	@ 0x70
100598a8:	2083      	movs	r0, #131	@ 0x83
100598aa:	0040      	lsls	r0, r0, #1
100598ac:	1833      	adds	r3, r6, r0
100598ae:	980c      	ldr	r0, [sp, #48]	@ 0x30
100598b0:	0200      	lsls	r0, r0, #8
100598b2:	9920      	ldr	r1, [sp, #128]	@ 0x80
100598b4:	1840      	adds	r0, r0, r1
100598b6:	9918      	ldr	r1, [sp, #96]	@ 0x60
100598b8:	0409      	lsls	r1, r1, #16
100598ba:	1840      	adds	r0, r0, r1
100598bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
100598be:	0609      	lsls	r1, r1, #24
100598c0:	1840      	adds	r0, r0, r1
100598c2:	901a      	str	r0, [sp, #104]	@ 0x68
100598c4:	4632      	mov	r2, r6
100598c6:	322c      	adds	r2, #44	@ 0x2c
100598c8:	341e      	adds	r4, #30
100598ca:	9418      	str	r4, [sp, #96]	@ 0x60
100598cc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100598ce:	2801      	cmp	r0, #1
100598d0:	9220      	str	r2, [sp, #128]	@ 0x80
100598d2:	9313      	str	r3, [sp, #76]	@ 0x4c
100598d4:	d106      	bne.n	100598e4 <llc_conn_go_to_connect+0x188>
100598d6:	7c38      	ldrb	r0, [r7, #16]
100598d8:	2801      	cmp	r0, #1
100598da:	d103      	bne.n	100598e4 <llc_conn_go_to_connect+0x188>
100598dc:	2020      	movs	r0, #32
100598de:	991d      	ldr	r1, [sp, #116]	@ 0x74
100598e0:	4008      	ands	r0, r1
100598e2:	d104      	bne.n	100598ee <llc_conn_go_to_connect+0x192>
100598e4:	7b38      	ldrb	r0, [r7, #12]
100598e6:	21fe      	movs	r1, #254	@ 0xfe
100598e8:	4001      	ands	r1, r0
100598ea:	2902      	cmp	r1, #2
100598ec:	d11b      	bne.n	10059926 <llc_conn_go_to_connect+0x1ca>
100598ee:	2001      	movs	r0, #1
100598f0:	7018      	strb	r0, [r3, #0]
100598f2:	7bb8      	ldrb	r0, [r7, #14]
100598f4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
100598f6:	4621      	mov	r1, r4
100598f8:	f7f9 f816 	bl	10052928 <BLEPLAT_CNTR_SmSetChannelMap>
100598fc:	4635      	mov	r5, r6
100598fe:	35e0      	adds	r5, #224	@ 0xe0
10059900:	4628      	mov	r0, r5
10059902:	4621      	mov	r1, r4
10059904:	f000 fc7e 	bl	1005a204 <llc_mngm_csa2_update_remapping_table>
10059908:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005990a:	7d40      	ldrb	r0, [r0, #21]
1005990c:	2200      	movs	r2, #0
1005990e:	9200      	str	r2, [sp, #0]
10059910:	991a      	ldr	r1, [sp, #104]	@ 0x68
10059912:	9101      	str	r1, [sp, #4]
10059914:	9202      	str	r2, [sp, #8]
10059916:	4629      	mov	r1, r5
10059918:	921b      	str	r2, [sp, #108]	@ 0x6c
1005991a:	4613      	mov	r3, r2
1005991c:	f000 fc8d 	bl	1005a23a <llc_mngm_csa2_select_channel_for_task>
10059920:	9a20      	ldr	r2, [sp, #128]	@ 0x80
10059922:	901e      	str	r0, [sp, #120]	@ 0x78
10059924:	e001      	b.n	1005992a <llc_conn_go_to_connect+0x1ce>
10059926:	981e      	ldr	r0, [sp, #120]	@ 0x78
10059928:	7018      	strb	r0, [r3, #0]
1005992a:	209f      	movs	r0, #159	@ 0x9f
1005992c:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005992e:	7788      	strb	r0, [r1, #30]
10059930:	48f8      	ldr	r0, [pc, #992]	@ (10059d14 <__arm_cp.11_0>)
10059932:	8388      	strh	r0, [r1, #28]
10059934:	48f8      	ldr	r0, [pc, #992]	@ (10059d18 <__arm_cp.11_1>)
10059936:	8348      	strh	r0, [r1, #26]
10059938:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005993a:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005993c:	4388      	bics	r0, r1
1005993e:	6610      	str	r0, [r2, #96]	@ 0x60
10059940:	7af8      	ldrb	r0, [r7, #11]
10059942:	f7f3 ff86 	bl	1004d852 <LL_phy_update_init_per_st_data_ucfg>
10059946:	2029      	movs	r0, #41	@ 0x29
10059948:	00c5      	lsls	r5, r0, #3
1005994a:	20a9      	movs	r0, #169	@ 0xa9
1005994c:	0107      	lsls	r7, r0, #4
1005994e:	f7fe fb3f 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10059952:	2801      	cmp	r0, #1
10059954:	d118      	bne.n	10059988 <llc_conn_go_to_connect+0x22c>
10059956:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10059958:	8980      	ldrh	r0, [r0, #12]
1005995a:	281b      	cmp	r0, #27
1005995c:	d10f      	bne.n	1005997e <llc_conn_go_to_connect+0x222>
1005995e:	9822      	ldr	r0, [sp, #136]	@ 0x88
10059960:	2804      	cmp	r0, #4
10059962:	d108      	bne.n	10059976 <llc_conn_go_to_connect+0x21a>
10059964:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10059966:	8a40      	ldrh	r0, [r0, #18]
10059968:	42b8      	cmp	r0, r7
1005996a:	d108      	bne.n	1005997e <llc_conn_go_to_connect+0x222>
1005996c:	201b      	movs	r0, #27
1005996e:	9921      	ldr	r1, [sp, #132]	@ 0x84
10059970:	8208      	strh	r0, [r1, #16]
10059972:	8188      	strh	r0, [r1, #12]
10059974:	e010      	b.n	10059998 <llc_conn_go_to_connect+0x23c>
10059976:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10059978:	8a00      	ldrh	r0, [r0, #16]
1005997a:	42a8      	cmp	r0, r5
1005997c:	d004      	beq.n	10059988 <llc_conn_go_to_connect+0x22c>
1005997e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
10059980:	6e10      	ldr	r0, [r2, #96]	@ 0x60
10059982:	2104      	movs	r1, #4
10059984:	4301      	orrs	r1, r0
10059986:	6611      	str	r1, [r2, #96]	@ 0x60
10059988:	201b      	movs	r0, #27
1005998a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005998c:	8208      	strh	r0, [r1, #16]
1005998e:	8188      	strh	r0, [r1, #12]
10059990:	9822      	ldr	r0, [sp, #136]	@ 0x88
10059992:	2804      	cmp	r0, #4
10059994:	d000      	beq.n	10059998 <llc_conn_go_to_connect+0x23c>
10059996:	462f      	mov	r7, r5
10059998:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005999a:	0200      	lsls	r0, r0, #8
1005999c:	900e      	str	r0, [sp, #56]	@ 0x38
1005999e:	9921      	ldr	r1, [sp, #132]	@ 0x84
100599a0:	828f      	strh	r7, [r1, #20]
100599a2:	824f      	strh	r7, [r1, #18]
100599a4:	830f      	strh	r7, [r1, #24]
100599a6:	201b      	movs	r0, #27
100599a8:	82c8      	strh	r0, [r1, #22]
100599aa:	81c8      	strh	r0, [r1, #14]
100599ac:	83cf      	strh	r7, [r1, #30]
100599ae:	838f      	strh	r7, [r1, #28]
100599b0:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
100599b2:	8b68      	ldrh	r0, [r5, #26]
100599b4:	8348      	strh	r0, [r1, #26]
100599b6:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
100599b8:	7af8      	ldrb	r0, [r7, #11]
100599ba:	f002 f8cf 	bl	1005bb5c <llc_conn_init_cte_ctxt_ucfg_weak>
100599be:	7af8      	ldrb	r0, [r7, #11]
100599c0:	f002 ffe4 	bl	1005c98c <llc_conn_init_pcl_ctxt_ucfg_weak>
100599c4:	7af8      	ldrb	r0, [r7, #11]
100599c6:	f001 fe87 	bl	1005b6d8 <LLC_conn_init_chc_ctxt_ucfg_weak>
100599ca:	4628      	mov	r0, r5
100599cc:	4631      	mov	r1, r6
100599ce:	f000 fdcb 	bl	1005a568 <llc_subrate_init_acceptable_per>
100599d2:	7af8      	ldrb	r0, [r7, #11]
100599d4:	f002 ffde 	bl	1005c994 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
100599d8:	7af8      	ldrb	r0, [r7, #11]
100599da:	f000 fd4b 	bl	1005a474 <llc_past_init_ucfg_weak>
100599de:	4630      	mov	r0, r6
100599e0:	f002 fe44 	bl	1005c66c <LLC_init_le_ping_params>
100599e4:	7af8      	ldrb	r0, [r7, #11]
100599e6:	f001 fc5b 	bl	1005b2a0 <llc_cpe_init_sm_ctxt>
100599ea:	9822      	ldr	r0, [sp, #136]	@ 0x88
100599ec:	f7f9 f937 	bl	10052c5e <BLEPLAT_CNTR_DemodDelaySt>
100599f0:	7b39      	ldrb	r1, [r7, #12]
100599f2:	4aca      	ldr	r2, [pc, #808]	@ (10059d1c <__arm_cp.11_2>)
100599f4:	6812      	ldr	r2, [r2, #0]
100599f6:	6817      	ldr	r7, [r2, #0]
100599f8:	2903      	cmp	r1, #3
100599fa:	d004      	beq.n	10059a06 <llc_conn_go_to_connect+0x2aa>
100599fc:	2902      	cmp	r1, #2
100599fe:	d10b      	bne.n	10059a18 <llc_conn_go_to_connect+0x2bc>
10059a00:	1a38      	subs	r0, r7, r0
10059a02:	383e      	subs	r0, #62	@ 0x3e
10059a04:	e012      	b.n	10059a2c <llc_conn_go_to_connect+0x2d0>
10059a06:	210e      	movs	r1, #14
10059a08:	9d22      	ldr	r5, [sp, #136]	@ 0x88
10059a0a:	4628      	mov	r0, r5
10059a0c:	f004 ff26 	bl	1005e85c <LL_link_calc_packetlength>
10059a10:	1a38      	subs	r0, r7, r0
10059a12:	383e      	subs	r0, #62	@ 0x3e
10059a14:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10059a16:	e00b      	b.n	10059a30 <llc_conn_go_to_connect+0x2d4>
10059a18:	9923      	ldr	r1, [sp, #140]	@ 0x8c
10059a1a:	7b49      	ldrb	r1, [r1, #13]
10059a1c:	1a38      	subs	r0, r7, r0
10059a1e:	2900      	cmp	r1, #0
10059a20:	d001      	beq.n	10059a26 <llc_conn_go_to_connect+0x2ca>
10059a22:	3090      	adds	r0, #144	@ 0x90
10059a24:	e002      	b.n	10059a2c <llc_conn_go_to_connect+0x2d0>
10059a26:	2181      	movs	r1, #129	@ 0x81
10059a28:	0049      	lsls	r1, r1, #1
10059a2a:	1840      	adds	r0, r0, r1
10059a2c:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10059a2e:	9d22      	ldr	r5, [sp, #136]	@ 0x88
10059a30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10059a32:	9908      	ldr	r1, [sp, #32]
10059a34:	065a      	lsls	r2, r3, #25
10059a36:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10059a38:	1861      	adds	r1, r4, r1
10059a3a:	2d04      	cmp	r5, #4
10059a3c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
10059a3e:	d007      	beq.n	10059a50 <llc_conn_go_to_connect+0x2f4>
10059a40:	7b3d      	ldrb	r5, [r7, #12]
10059a42:	23fe      	movs	r3, #254	@ 0xfe
10059a44:	402b      	ands	r3, r5
10059a46:	2b02      	cmp	r3, #2
10059a48:	d100      	bne.n	10059a4c <llc_conn_go_to_connect+0x2f0>
10059a4a:	931c      	str	r3, [sp, #112]	@ 0x70
10059a4c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10059a4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10059a50:	09db      	lsrs	r3, r3, #7
10059a52:	930e      	str	r3, [sp, #56]	@ 0x38
10059a54:	0fd2      	lsrs	r2, r2, #31
10059a56:	920f      	str	r2, [sp, #60]	@ 0x3c
10059a58:	1861      	adds	r1, r4, r1
10059a5a:	024d      	lsls	r5, r1, #9
10059a5c:	1829      	adds	r1, r5, r0
10059a5e:	683c      	ldr	r4, [r7, #0]
10059a60:	7b78      	ldrb	r0, [r7, #13]
10059a62:	2800      	cmp	r0, #0
10059a64:	d02a      	beq.n	10059abc <llc_conn_go_to_connect+0x360>
10059a66:	911d      	str	r1, [sp, #116]	@ 0x74
10059a68:	9819      	ldr	r0, [sp, #100]	@ 0x64
10059a6a:	0947      	lsrs	r7, r0, #5
10059a6c:	f004 ff12 	bl	1005e894 <LL_link_get_own_sca_ppm>
10059a70:	9019      	str	r0, [sp, #100]	@ 0x64
10059a72:	971c      	str	r7, [sp, #112]	@ 0x70
10059a74:	4638      	mov	r0, r7
10059a76:	f000 fd8f 	bl	1005a598 <llc_convert_sca_to_ppm>
10059a7a:	2103      	movs	r1, #3
10059a7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
10059a7e:	7011      	strb	r1, [r2, #0]
10059a80:	9910      	ldr	r1, [sp, #64]	@ 0x40
10059a82:	0249      	lsls	r1, r1, #9
10059a84:	6371      	str	r1, [r6, #52]	@ 0x34
10059a86:	9919      	ldr	r1, [sp, #100]	@ 0x64
10059a88:	1840      	adds	r0, r0, r1
10059a8a:	8570      	strh	r0, [r6, #42]	@ 0x2a
10059a8c:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
10059a8e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
10059a90:	6852      	ldr	r2, [r2, #4]
10059a92:	4291      	cmp	r1, r2
10059a94:	d300      	bcc.n	10059a98 <llc_conn_go_to_connect+0x33c>
10059a96:	4611      	mov	r1, r2
10059a98:	6531      	str	r1, [r6, #80]	@ 0x50
10059a9a:	b280      	uxth	r0, r0
10059a9c:	4629      	mov	r1, r5
10059a9e:	f004 fed3 	bl	1005e848 <LL_link_calculate_window_widening_from_ppm>
10059aa2:	300d      	adds	r0, #13
10059aa4:	0041      	lsls	r1, r0, #1
10059aa6:	6b72      	ldr	r2, [r6, #52]	@ 0x34
10059aa8:	188a      	adds	r2, r1, r2
10059aaa:	1ca4      	adds	r4, r4, #2
10059aac:	941f      	str	r4, [sp, #124]	@ 0x7c
10059aae:	2102      	movs	r1, #2
10059ab0:	9110      	str	r1, [sp, #64]	@ 0x40
10059ab2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
10059ab4:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10059ab6:	4b99      	ldr	r3, [pc, #612]	@ (10059d1c <__arm_cp.11_2>)
10059ab8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
10059aba:	e01b      	b.n	10059af4 <llc_conn_go_to_connect+0x398>
10059abc:	460d      	mov	r5, r1
10059abe:	2102      	movs	r1, #2
10059ac0:	9820      	ldr	r0, [sp, #128]	@ 0x80
10059ac2:	7001      	strb	r1, [r0, #0]
10059ac4:	2000      	movs	r0, #0
10059ac6:	8570      	strh	r0, [r6, #42]	@ 0x2a
10059ac8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
10059aca:	2a04      	cmp	r2, #4
10059acc:	d000      	beq.n	10059ad0 <llc_conn_go_to_connect+0x374>
10059ace:	4611      	mov	r1, r2
10059ad0:	0089      	lsls	r1, r1, #2
10059ad2:	1871      	adds	r1, r6, r1
10059ad4:	6d89      	ldr	r1, [r1, #88]	@ 0x58
10059ad6:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
10059ad8:	428a      	cmp	r2, r1
10059ada:	4b90      	ldr	r3, [pc, #576]	@ (10059d1c <__arm_cp.11_2>)
10059adc:	d300      	bcc.n	10059ae0 <llc_conn_go_to_connect+0x384>
10059ade:	460a      	mov	r2, r1
10059ae0:	6532      	str	r2, [r6, #80]	@ 0x50
10059ae2:	9910      	ldr	r1, [sp, #64]	@ 0x40
10059ae4:	0209      	lsls	r1, r1, #8
10059ae6:	186d      	adds	r5, r5, r1
10059ae8:	3408      	adds	r4, #8
10059aea:	941f      	str	r4, [sp, #124]	@ 0x7c
10059aec:	2185      	movs	r1, #133	@ 0x85
10059aee:	9110      	str	r1, [sp, #64]	@ 0x40
10059af0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10059af2:	901c      	str	r0, [sp, #112]	@ 0x70
10059af4:	6475      	str	r5, [r6, #68]	@ 0x44
10059af6:	64b0      	str	r0, [r6, #72]	@ 0x48
10059af8:	a824      	add	r0, sp, #144	@ 0x90
10059afa:	2100      	movs	r1, #0
10059afc:	8081      	strh	r1, [r0, #4]
10059afe:	911d      	str	r1, [sp, #116]	@ 0x74
10059b00:	9124      	str	r1, [sp, #144]	@ 0x90
10059b02:	6818      	ldr	r0, [r3, #0]
10059b04:	213d      	movs	r1, #61	@ 0x3d
10059b06:	5c41      	ldrb	r1, [r0, r1]
10059b08:	0689      	lsls	r1, r1, #26
10059b0a:	9219      	str	r2, [sp, #100]	@ 0x64
10059b0c:	d506      	bpl.n	10059b1c <llc_conn_go_to_connect+0x3c0>
10059b0e:	303d      	adds	r0, #61	@ 0x3d
10059b10:	7b81      	ldrb	r1, [r0, #14]
10059b12:	07c9      	lsls	r1, r1, #31
10059b14:	d105      	bne.n	10059b22 <llc_conn_go_to_connect+0x3c6>
10059b16:	7a80      	ldrb	r0, [r0, #10]
10059b18:	0780      	lsls	r0, r0, #30
10059b1a:	d402      	bmi.n	10059b22 <llc_conn_go_to_connect+0x3c6>
10059b1c:	4627      	mov	r7, r4
10059b1e:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
10059b20:	e036      	b.n	10059b90 <llc_conn_go_to_connect+0x434>
10059b22:	6878      	ldr	r0, [r7, #4]
10059b24:	6801      	ldr	r1, [r0, #0]
10059b26:	23fe      	movs	r3, #254	@ 0xfe
10059b28:	400b      	ands	r3, r1
10059b2a:	aa24      	add	r2, sp, #144	@ 0x90
10059b2c:	2b02      	cmp	r3, #2
10059b2e:	d000      	beq.n	10059b32 <llc_conn_go_to_connect+0x3d6>
10059b30:	921f      	str	r2, [sp, #124]	@ 0x7c
10059b32:	b2cd      	uxtb	r5, r1
10059b34:	7b79      	ldrb	r1, [r7, #13]
10059b36:	2900      	cmp	r1, #0
10059b38:	d00c      	beq.n	10059b54 <llc_conn_go_to_connect+0x3f8>
10059b3a:	a924      	add	r1, sp, #144	@ 0x90
10059b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10059b3e:	2a00      	cmp	r2, #0
10059b40:	d016      	beq.n	10059b70 <llc_conn_go_to_connect+0x414>
10059b42:	6839      	ldr	r1, [r7, #0]
10059b44:	7b4a      	ldrb	r2, [r1, #13]
10059b46:	23c0      	movs	r3, #192	@ 0xc0
10059b48:	4013      	ands	r3, r2
10059b4a:	aa24      	add	r2, sp, #144	@ 0x90
10059b4c:	2b40      	cmp	r3, #64	@ 0x40
10059b4e:	d00e      	beq.n	10059b6e <llc_conn_go_to_connect+0x412>
10059b50:	4611      	mov	r1, r2
10059b52:	e00d      	b.n	10059b70 <llc_conn_go_to_connect+0x414>
10059b54:	a924      	add	r1, sp, #144	@ 0x90
10059b56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10059b58:	2a00      	cmp	r2, #0
10059b5a:	d009      	beq.n	10059b70 <llc_conn_go_to_connect+0x414>
10059b5c:	683a      	ldr	r2, [r7, #0]
10059b5e:	79d1      	ldrb	r1, [r2, #7]
10059b60:	23c0      	movs	r3, #192	@ 0xc0
10059b62:	400b      	ands	r3, r1
10059b64:	a924      	add	r1, sp, #144	@ 0x90
10059b66:	2b40      	cmp	r3, #64	@ 0x40
10059b68:	d102      	bne.n	10059b70 <llc_conn_go_to_connect+0x414>
10059b6a:	1c91      	adds	r1, r2, #2
10059b6c:	e000      	b.n	10059b70 <llc_conn_go_to_connect+0x414>
10059b6e:	3108      	adds	r1, #8
10059b70:	7aba      	ldrb	r2, [r7, #10]
10059b72:	ab26      	add	r3, sp, #152	@ 0x98
10059b74:	759a      	strb	r2, [r3, #22]
10059b76:	893a      	ldrh	r2, [r7, #8]
10059b78:	829a      	strh	r2, [r3, #20]
10059b7a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
10059b7c:	9227      	str	r2, [sp, #156]	@ 0x9c
10059b7e:	9128      	str	r1, [sp, #160]	@ 0xa0
10059b80:	2dfe      	cmp	r5, #254	@ 0xfe
10059b82:	d003      	beq.n	10059b8c <llc_conn_go_to_connect+0x430>
10059b84:	2103      	movs	r1, #3
10059b86:	400d      	ands	r5, r1
10059b88:	462f      	mov	r7, r5
10059b8a:	e000      	b.n	10059b8e <llc_conn_go_to_connect+0x432>
10059b8c:	2701      	movs	r7, #1
10059b8e:	1c44      	adds	r4, r0, #1
10059b90:	9921      	ldr	r1, [sp, #132]	@ 0x84
10059b92:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
10059b94:	630d      	str	r5, [r1, #48]	@ 0x30
10059b96:	2001      	movs	r0, #1
10059b98:	4038      	ands	r0, r7
10059b9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10059b9c:	5488      	strb	r0, [r1, r2]
10059b9e:	634d      	str	r5, [r1, #52]	@ 0x34
10059ba0:	4608      	mov	r0, r1
10059ba2:	3030      	adds	r0, #48	@ 0x30
10059ba4:	1c40      	adds	r0, r0, #1
10059ba6:	2206      	movs	r2, #6
10059ba8:	4621      	mov	r1, r4
10059baa:	f7f7 fa75 	bl	10051098 <BLEPLAT_MemCpy>
10059bae:	a826      	add	r0, sp, #152	@ 0x98
10059bb0:	7685      	strb	r5, [r0, #26]
10059bb2:	7607      	strb	r7, [r0, #24]
10059bb4:	991c      	ldr	r1, [sp, #112]	@ 0x70
10059bb6:	75c1      	strb	r1, [r0, #23]
10059bb8:	9914      	ldr	r1, [sp, #80]	@ 0x50
10059bba:	8241      	strh	r1, [r0, #18]
10059bbc:	9911      	ldr	r1, [sp, #68]	@ 0x44
10059bbe:	8201      	strh	r1, [r0, #16]
10059bc0:	9915      	ldr	r1, [sp, #84]	@ 0x54
10059bc2:	8181      	strh	r1, [r0, #12]
10059bc4:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
10059bc6:	81c1      	strh	r1, [r0, #14]
10059bc8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10059bca:	7b79      	ldrb	r1, [r7, #13]
10059bcc:	7641      	strb	r1, [r0, #25]
10059bce:	9426      	str	r4, [sp, #152]	@ 0x98
10059bd0:	f7ff fa86 	bl	100590e0 <llc_conn_push_connection_complete_event>
10059bd4:	7bf8      	ldrb	r0, [r7, #15]
10059bd6:	2800      	cmp	r0, #0
10059bd8:	d003      	beq.n	10059be2 <llc_conn_go_to_connect+0x486>
10059bda:	7ab9      	ldrb	r1, [r7, #10]
10059bdc:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
10059bde:	f7ff fa41 	bl	10059064 <llc_conn_push_adv_set_terminated_event>
10059be2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10059be4:	7801      	ldrb	r1, [r0, #0]
10059be6:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
10059be8:	f7ff fbb0 	bl	1005934c <llc_conn_push_csa_event>
10059bec:	9921      	ldr	r1, [sp, #132]	@ 0x84
10059bee:	6b08      	ldr	r0, [r1, #48]	@ 0x30
10059bf0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
10059bf2:	f7ff f9df 	bl	10058fb4 <llc_conn_list_add_address>
10059bf6:	7b7c      	ldrb	r4, [r7, #13]
10059bf8:	7bbf      	ldrb	r7, [r7, #14]
10059bfa:	4638      	mov	r0, r7
10059bfc:	f7f8 fe4f 	bl	1005289e <BLEPLAT_CNTR_SmGetTxPwr>
10059c00:	9021      	str	r0, [sp, #132]	@ 0x84
10059c02:	4638      	mov	r0, r7
10059c04:	f7f8 fe60 	bl	100528c8 <BLEPLAT_CNTR_SmInitTo0>
10059c08:	4638      	mov	r0, r7
10059c0a:	9d22      	ldr	r5, [sp, #136]	@ 0x88
10059c0c:	4629      	mov	r1, r5
10059c0e:	f7f8 ffd8 	bl	10052bc2 <BLEPLAT_CNTR_SmSetTxPhy>
10059c12:	4638      	mov	r0, r7
10059c14:	4629      	mov	r1, r5
10059c16:	f7f8 ff68 	bl	10052aea <BLEPLAT_CNTR_SmSetRxPhy>
10059c1a:	4638      	mov	r0, r7
10059c1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
10059c1e:	f7f8 fe83 	bl	10052928 <BLEPLAT_CNTR_SmSetChannelMap>
10059c22:	4638      	mov	r0, r7
10059c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
10059c26:	f7f8 fe6d 	bl	10052904 <BLEPLAT_CNTR_SmSetAccessAddr>
10059c2a:	4638      	mov	r0, r7
10059c2c:	991e      	ldr	r1, [sp, #120]	@ 0x78
10059c2e:	f7f8 fff2 	bl	10052c16 <BLEPLAT_CNTR_SmSetUnmappedChan>
10059c32:	4638      	mov	r0, r7
10059c34:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10059c36:	f7f8 fecf 	bl	100529d8 <BLEPLAT_CNTR_SmSetHopIncr>
10059c3a:	4638      	mov	r0, r7
10059c3c:	9916      	ldr	r1, [sp, #88]	@ 0x58
10059c3e:	f7f8 fea4 	bl	1005298a <BLEPLAT_CNTR_SmSetCrcInit>
10059c42:	4638      	mov	r0, r7
10059c44:	4631      	mov	r1, r6
10059c46:	f7f8 ffaa 	bl	10052b9e <BLEPLAT_CNTR_SmSetTxPacketPtr>
10059c4a:	4635      	mov	r5, r6
10059c4c:	3514      	adds	r5, #20
10059c4e:	4638      	mov	r0, r7
10059c50:	4629      	mov	r1, r5
10059c52:	f7f8 ff38 	bl	10052ac6 <BLEPLAT_CNTR_SmSetRxPacketPtr>
10059c56:	4638      	mov	r0, r7
10059c58:	9921      	ldr	r1, [sp, #132]	@ 0x84
10059c5a:	f7f8 ffc7 	bl	10052bec <BLEPLAT_CNTR_SmSetTxPwr>
10059c5e:	f7fe f95b 	bl	10057f18 <cte_csr_ucfg_weak>
10059c62:	2800      	cmp	r0, #0
10059c64:	d102      	bne.n	10059c6c <llc_conn_go_to_connect+0x510>
10059c66:	4638      	mov	r0, r7
10059c68:	f7f8 fcd2 	bl	10052610 <BLEPLAT_CNTR_SmCteOff>
10059c6c:	4638      	mov	r0, r7
10059c6e:	2c00      	cmp	r4, #0
10059c70:	d002      	beq.n	10059c78 <llc_conn_go_to_connect+0x51c>
10059c72:	f7f8 ff19 	bl	10052aa8 <BLEPLAT_CNTR_SmSetRxMode>
10059c76:	e001      	b.n	10059c7c <llc_conn_go_to_connect+0x520>
10059c78:	f7f8 ff82 	bl	10052b80 <BLEPLAT_CNTR_SmSetTxMode>
10059c7c:	4634      	mov	r4, r6
10059c7e:	3428      	adds	r4, #40	@ 0x28
10059c80:	f7fe f9a6 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10059c84:	2801      	cmp	r0, #1
10059c86:	d101      	bne.n	10059c8c <llc_conn_go_to_connect+0x530>
10059c88:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059c8a:	e00c      	b.n	10059ca6 <llc_conn_go_to_connect+0x54a>
10059c8c:	f000 fbee 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10059c90:	2801      	cmp	r0, #1
10059c92:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059c94:	d007      	beq.n	10059ca6 <llc_conn_go_to_connect+0x54a>
10059c96:	f000 fbdf 	bl	1005a458 <cis_csr_ucfg_weak>
10059c9a:	2801      	cmp	r0, #1
10059c9c:	d001      	beq.n	10059ca2 <llc_conn_go_to_connect+0x546>
10059c9e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10059ca0:	e001      	b.n	10059ca6 <llc_conn_go_to_connect+0x54a>
10059ca2:	981d      	ldr	r0, [sp, #116]	@ 0x74
10059ca4:	43c0      	mvns	r0, r0
10059ca6:	b2c1      	uxtb	r1, r0
10059ca8:	4638      	mov	r0, r7
10059caa:	f7f8 fe80 	bl	100529ae <BLEPLAT_CNTR_SmSetDataLength>
10059cae:	4630      	mov	r0, r6
10059cb0:	4621      	mov	r1, r4
10059cb2:	463a      	mov	r2, r7
10059cb4:	f000 fa3c 	bl	1005a130 <llc_conn_set_blue_packets>
10059cb8:	2100      	movs	r1, #0
10059cba:	4628      	mov	r0, r5
10059cbc:	463a      	mov	r2, r7
10059cbe:	f000 fa37 	bl	1005a130 <llc_conn_set_blue_packets>
10059cc2:	4630      	mov	r0, r6
10059cc4:	f7f8 fc83 	bl	100525ce <BLEPLAT_CNTR_PacketSetTxReady>
10059cc8:	4628      	mov	r0, r5
10059cca:	f7f8 fc3e 	bl	1005254a <BLEPLAT_CNTR_PacketSetRxReady>
10059cce:	9823      	ldr	r0, [sp, #140]	@ 0x8c
10059cd0:	7b81      	ldrb	r1, [r0, #14]
10059cd2:	9122      	str	r1, [sp, #136]	@ 0x88
10059cd4:	7c40      	ldrb	r0, [r0, #17]
10059cd6:	4634      	mov	r4, r6
10059cd8:	3444      	adds	r4, #68	@ 0x44
10059cda:	cc1c      	ldmia	r4, {r2, r3, r4}
10059cdc:	9920      	ldr	r1, [sp, #128]	@ 0x80
10059cde:	788d      	ldrb	r5, [r1, #2]
10059ce0:	78cf      	ldrb	r7, [r1, #3]
10059ce2:	490f      	ldr	r1, [pc, #60]	@ (10059d20 <__arm_cp.11_3>)
10059ce4:	9107      	str	r1, [sp, #28]
10059ce6:	490f      	ldr	r1, [pc, #60]	@ (10059d24 <__arm_cp.11_4>)
10059ce8:	9106      	str	r1, [sp, #24]
10059cea:	490f      	ldr	r1, [pc, #60]	@ (10059d28 <__arm_cp.11_5>)
10059cec:	9105      	str	r1, [sp, #20]
10059cee:	490f      	ldr	r1, [pc, #60]	@ (10059d2c <__arm_cp.11_6>)
10059cf0:	9104      	str	r1, [sp, #16]
10059cf2:	9703      	str	r7, [sp, #12]
10059cf4:	9502      	str	r5, [sp, #8]
10059cf6:	1ad1      	subs	r1, r2, r3
10059cf8:	9101      	str	r1, [sp, #4]
10059cfa:	9400      	str	r4, [sp, #0]
10059cfc:	2800      	cmp	r0, #0
10059cfe:	d001      	beq.n	10059d04 <llc_conn_go_to_connect+0x5a8>
10059d00:	4c0c      	ldr	r4, [pc, #48]	@ (10059d34 <__arm_cp.11_8>)
10059d02:	e000      	b.n	10059d06 <llc_conn_go_to_connect+0x5aa>
10059d04:	4c0a      	ldr	r4, [pc, #40]	@ (10059d30 <__arm_cp.11_7>)
10059d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
10059d08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10059d0a:	9822      	ldr	r0, [sp, #136]	@ 0x88
10059d0c:	4631      	mov	r1, r6
10059d0e:	47a0      	blx	r4
10059d10:	b02d      	add	sp, #180	@ 0xb4
10059d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

10059d14 <__arm_cp.11_0>:
10059d14:	000004ff 	.word	0x000004ff

10059d18 <__arm_cp.11_1>:
10059d18:	0000f7fb 	.word	0x0000f7fb

10059d1c <__arm_cp.11_2>:
10059d1c:	20002468 	.word	0x20002468

10059d20 <__arm_cp.11_3>:
10059d20:	10063d53 	.word	0x10063d53

10059d24 <__arm_cp.11_4>:
10059d24:	10063ee1 	.word	0x10063ee1

10059d28 <__arm_cp.11_5>:
10059d28:	10063d8b 	.word	0x10063d8b

10059d2c <__arm_cp.11_6>:
10059d2c:	10063e15 	.word	0x10063e15

10059d30 <__arm_cp.11_7>:
10059d30:	1005f201 	.word	0x1005f201

10059d34 <__arm_cp.11_8>:
10059d34:	1005ed9d 	.word	0x1005ed9d

10059d38 <llc_conn_peripheral_roll_back_params>:
10059d38:	b5f0      	push	{r4, r5, r6, r7, lr}
10059d3a:	b089      	sub	sp, #36	@ 0x24
10059d3c:	4604      	mov	r4, r0
10059d3e:	2091      	movs	r0, #145	@ 0x91
10059d40:	0040      	lsls	r0, r0, #1
10059d42:	5a25      	ldrh	r5, [r4, r0]
10059d44:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
10059d46:	26ff      	movs	r6, #255	@ 0xff
10059d48:	3608      	adds	r6, #8
10059d4a:	f7f7 fa70 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
10059d4e:	5da1      	ldrb	r1, [r4, r6]
10059d50:	22fe      	movs	r2, #254	@ 0xfe
10059d52:	400a      	ands	r2, r1
10059d54:	55a2      	strb	r2, [r4, r6]
10059d56:	2135      	movs	r1, #53	@ 0x35
10059d58:	0109      	lsls	r1, r1, #4
10059d5a:	1846      	adds	r6, r0, r1
10059d5c:	437d      	muls	r5, r7
10059d5e:	0068      	lsls	r0, r5, #1
10059d60:	1830      	adds	r0, r6, r0
10059d62:	f3ef 8110 	mrs	r1, PRIMASK
10059d66:	b672      	cpsid	i
10059d68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10059d6a:	43c9      	mvns	r1, r1
10059d6c:	1840      	adds	r0, r0, r1
10059d6e:	d400      	bmi.n	10059d72 <llc_conn_peripheral_roll_back_params+0x3a>
10059d70:	e089      	b.n	10059e86 <llc_conn_peripheral_roll_back_params+0x14e>
10059d72:	2083      	movs	r0, #131	@ 0x83
10059d74:	0040      	lsls	r0, r0, #1
10059d76:	1820      	adds	r0, r4, r0
10059d78:	9008      	str	r0, [sp, #32]
10059d7a:	4630      	mov	r0, r6
10059d7c:	f005 f84a 	bl	1005ee14 <LL_sched_is_scheduler_call_pending>
10059d80:	2800      	cmp	r0, #0
10059d82:	d004      	beq.n	10059d8e <llc_conn_peripheral_roll_back_params+0x56>
10059d84:	4941      	ldr	r1, [pc, #260]	@ (10059e8c <__arm_cp.14_0>)
10059d86:	6809      	ldr	r1, [r1, #0]
10059d88:	7bc9      	ldrb	r1, [r1, #15]
10059d8a:	2903      	cmp	r1, #3
10059d8c:	d171      	bne.n	10059e72 <llc_conn_peripheral_roll_back_params+0x13a>
10059d8e:	9706      	str	r7, [sp, #24]
10059d90:	9004      	str	r0, [sp, #16]
10059d92:	4620      	mov	r0, r4
10059d94:	3031      	adds	r0, #49	@ 0x31
10059d96:	9007      	str	r0, [sp, #28]
10059d98:	4620      	mov	r0, r4
10059d9a:	3042      	adds	r0, #66	@ 0x42
10059d9c:	9005      	str	r0, [sp, #20]
10059d9e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059da0:	1b80      	subs	r0, r0, r6
10059da2:	2700      	movs	r7, #0
10059da4:	2108      	movs	r1, #8
10059da6:	b24a      	sxtb	r2, r1
10059da8:	2a00      	cmp	r2, #0
10059daa:	d40c      	bmi.n	10059dc6 <llc_conn_peripheral_roll_back_params+0x8e>
10059dac:	b2cb      	uxtb	r3, r1
10059dae:	462a      	mov	r2, r5
10059db0:	409a      	lsls	r2, r3
10059db2:	4290      	cmp	r0, r2
10059db4:	d302      	bcc.n	10059dbc <llc_conn_peripheral_roll_back_params+0x84>
10059db6:	2601      	movs	r6, #1
10059db8:	409e      	lsls	r6, r3
10059dba:	19bf      	adds	r7, r7, r6
10059dbc:	1a82      	subs	r2, r0, r2
10059dbe:	d300      	bcc.n	10059dc2 <llc_conn_peripheral_roll_back_params+0x8a>
10059dc0:	4610      	mov	r0, r2
10059dc2:	1e49      	subs	r1, r1, #1
10059dc4:	e7ef      	b.n	10059da6 <llc_conn_peripheral_roll_back_params+0x6e>
10059dc6:	9908      	ldr	r1, [sp, #32]
10059dc8:	8b88      	ldrh	r0, [r1, #28]
10059dca:	4347      	muls	r7, r0
10059dcc:	9a05      	ldr	r2, [sp, #20]
10059dce:	8810      	ldrh	r0, [r2, #0]
10059dd0:	1bc0      	subs	r0, r0, r7
10059dd2:	8010      	strh	r0, [r2, #0]
10059dd4:	b2be      	uxth	r6, r7
10059dd6:	9d07      	ldr	r5, [sp, #28]
10059dd8:	7c28      	ldrb	r0, [r5, #16]
10059dda:	7809      	ldrb	r1, [r1, #0]
10059ddc:	2901      	cmp	r1, #1
10059dde:	d10f      	bne.n	10059e00 <llc_conn_peripheral_roll_back_params+0xc8>
10059de0:	4617      	mov	r7, r2
10059de2:	f7f8 fc66 	bl	100526b2 <BLEPLAT_CNTR_SmGetAccessAddr>
10059de6:	883f      	ldrh	r7, [r7, #0]
10059de8:	7c2a      	ldrb	r2, [r5, #16]
10059dea:	2300      	movs	r3, #0
10059dec:	9300      	str	r3, [sp, #0]
10059dee:	9001      	str	r0, [sp, #4]
10059df0:	9302      	str	r3, [sp, #8]
10059df2:	4621      	mov	r1, r4
10059df4:	31e0      	adds	r1, #224	@ 0xe0
10059df6:	4610      	mov	r0, r2
10059df8:	463a      	mov	r2, r7
10059dfa:	f000 fa1e 	bl	1005a23a <llc_mngm_csa2_select_channel_for_task>
10059dfe:	e010      	b.n	10059e22 <llc_conn_peripheral_roll_back_params+0xea>
10059e00:	f7f8 fcce 	bl	100527a0 <BLEPLAT_CNTR_SmGetHopIncr>
10059e04:	2125      	movs	r1, #37	@ 0x25
10059e06:	1a08      	subs	r0, r1, r0
10059e08:	9008      	str	r0, [sp, #32]
10059e0a:	4347      	muls	r7, r0
10059e0c:	7828      	ldrb	r0, [r5, #0]
10059e0e:	1838      	adds	r0, r7, r0
10059e10:	b280      	uxth	r0, r0
10059e12:	f000 f9e7 	bl	1005a1e4 <llc_mngm_mod_37>
10059e16:	7028      	strb	r0, [r5, #0]
10059e18:	9908      	ldr	r1, [sp, #32]
10059e1a:	1808      	adds	r0, r1, r0
10059e1c:	b280      	uxth	r0, r0
10059e1e:	f000 f9e1 	bl	1005a1e4 <llc_mngm_mod_37>
10059e22:	4601      	mov	r1, r0
10059e24:	462f      	mov	r7, r5
10059e26:	7c28      	ldrb	r0, [r5, #16]
10059e28:	f7f8 fef5 	bl	10052c16 <BLEPLAT_CNTR_SmSetUnmappedChan>
10059e2c:	9806      	ldr	r0, [sp, #24]
10059e2e:	4346      	muls	r6, r0
10059e30:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059e32:	1b80      	subs	r0, r0, r6
10059e34:	6460      	str	r0, [r4, #68]	@ 0x44
10059e36:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
10059e38:	4631      	mov	r1, r6
10059e3a:	f004 fd05 	bl	1005e848 <LL_link_calculate_window_widening_from_ppm>
10059e3e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
10059e40:	4282      	cmp	r2, r0
10059e42:	d904      	bls.n	10059e4e <llc_conn_peripheral_roll_back_params+0x116>
10059e44:	1a12      	subs	r2, r2, r0
10059e46:	2a0d      	cmp	r2, #13
10059e48:	d800      	bhi.n	10059e4c <llc_conn_peripheral_roll_back_params+0x114>
10059e4a:	220d      	movs	r2, #13
10059e4c:	64a2      	str	r2, [r4, #72]	@ 0x48
10059e4e:	9d04      	ldr	r5, [sp, #16]
10059e50:	6e60      	ldr	r0, [r4, #100]	@ 0x64
10059e52:	1980      	adds	r0, r0, r6
10059e54:	6660      	str	r0, [r4, #100]	@ 0x64
10059e56:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10059e58:	0051      	lsls	r1, r2, #1
10059e5a:	1809      	adds	r1, r1, r0
10059e5c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059e5e:	1a82      	subs	r2, r0, r2
10059e60:	7c38      	ldrb	r0, [r7, #16]
10059e62:	f004 ff7f 	bl	1005ed64 <LL_sched_set_taskslot_length_anchor>
10059e66:	2d00      	cmp	r5, #0
10059e68:	d10d      	bne.n	10059e86 <llc_conn_peripheral_roll_back_params+0x14e>
10059e6a:	7c38      	ldrb	r0, [r7, #16]
10059e6c:	f004 fff4 	bl	1005ee58 <LL_sched_engine>
10059e70:	e009      	b.n	10059e86 <llc_conn_peripheral_roll_back_params+0x14e>
10059e72:	9a08      	ldr	r2, [sp, #32]
10059e74:	7850      	ldrb	r0, [r2, #1]
10059e76:	2101      	movs	r1, #1
10059e78:	4301      	orrs	r1, r0
10059e7a:	7051      	strb	r1, [r2, #1]
10059e7c:	2013      	movs	r0, #19
10059e7e:	f007 f9a1 	bl	100611c4 <tsk_notify_idx>
10059e82:	f7f6 fb22 	bl	100504ca <BLE_STACK_ProcessRequest>
10059e86:	b662      	cpsie	i
10059e88:	b009      	add	sp, #36	@ 0x24
10059e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10059e8c <__arm_cp.14_0>:
10059e8c:	2000246c 	.word	0x2000246c

10059e90 <llc_conn_reserve_conn_idx>:
10059e90:	b510      	push	{r4, lr}
10059e92:	2400      	movs	r4, #0
10059e94:	4620      	mov	r0, r4
10059e96:	f7fe fd71 	bl	1005897c <llc_conn_get_cntxt_per_p>
10059e9a:	490a      	ldr	r1, [pc, #40]	@ (10059ec4 <__arm_cp.15_0>)
10059e9c:	6809      	ldr	r1, [r1, #0]
10059e9e:	2234      	movs	r2, #52	@ 0x34
10059ea0:	5c89      	ldrb	r1, [r1, r2]
10059ea2:	302c      	adds	r0, #44	@ 0x2c
10059ea4:	42a1      	cmp	r1, r4
10059ea6:	d007      	beq.n	10059eb8 <llc_conn_reserve_conn_idx+0x28>
10059ea8:	7802      	ldrb	r2, [r0, #0]
10059eaa:	2a00      	cmp	r2, #0
10059eac:	d006      	beq.n	10059ebc <llc_conn_reserve_conn_idx+0x2c>
10059eae:	224d      	movs	r2, #77	@ 0x4d
10059eb0:	0092      	lsls	r2, r2, #2
10059eb2:	1880      	adds	r0, r0, r2
10059eb4:	1c64      	adds	r4, r4, #1
10059eb6:	e7f5      	b.n	10059ea4 <llc_conn_reserve_conn_idx+0x14>
10059eb8:	24ff      	movs	r4, #255	@ 0xff
10059eba:	e001      	b.n	10059ec0 <llc_conn_reserve_conn_idx+0x30>
10059ebc:	2101      	movs	r1, #1
10059ebe:	7001      	strb	r1, [r0, #0]
10059ec0:	b2e0      	uxtb	r0, r4
10059ec2:	bd10      	pop	{r4, pc}

10059ec4 <__arm_cp.15_0>:
10059ec4:	20002414 	.word	0x20002414

10059ec8 <llc_conn_send_acl_data>:
10059ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059eca:	4606      	mov	r6, r0
10059ecc:	8800      	ldrh	r0, [r0, #0]
10059ece:	f7fe fd63 	bl	10058998 <llc_conn_get_cntxt_per_p_from_handle>
10059ed2:	2800      	cmp	r0, #0
10059ed4:	d012      	beq.n	10059efc <llc_conn_send_acl_data+0x34>
10059ed6:	4604      	mov	r4, r0
10059ed8:	4607      	mov	r7, r0
10059eda:	372c      	adds	r7, #44	@ 0x2c
10059edc:	f3ef 8010 	mrs	r0, PRIMASK
10059ee0:	b672      	cpsid	i
10059ee2:	463d      	mov	r5, r7
10059ee4:	3554      	adds	r5, #84	@ 0x54
10059ee6:	4628      	mov	r0, r5
10059ee8:	4631      	mov	r1, r6
10059eea:	f007 fb61 	bl	100615b0 <ACL_list_insert_tail>
10059eee:	7838      	ldrb	r0, [r7, #0]
10059ef0:	2803      	cmp	r0, #3
10059ef2:	d105      	bne.n	10059f00 <llc_conn_send_acl_data+0x38>
10059ef4:	4620      	mov	r0, r4
10059ef6:	f7ff ff1f 	bl	10059d38 <llc_conn_peripheral_roll_back_params>
10059efa:	e01a      	b.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059efc:	2002      	movs	r0, #2
10059efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059f00:	7d78      	ldrb	r0, [r7, #21]
10059f02:	4e28      	ldr	r6, [pc, #160]	@ (10059fa4 <__arm_cp.16_0>)
10059f04:	6831      	ldr	r1, [r6, #0]
10059f06:	7b49      	ldrb	r1, [r1, #13]
10059f08:	4288      	cmp	r0, r1
10059f0a:	d112      	bne.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f0c:	f7f7 f98f 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
10059f10:	6831      	ldr	r1, [r6, #0]
10059f12:	6809      	ldr	r1, [r1, #0]
10059f14:	43c9      	mvns	r1, r1
10059f16:	1840      	adds	r0, r0, r1
10059f18:	2101      	movs	r1, #1
10059f1a:	0289      	lsls	r1, r1, #10
10059f1c:	1840      	adds	r0, r0, r1
10059f1e:	d508      	bpl.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f20:	205c      	movs	r0, #92	@ 0x5c
10059f22:	5c38      	ldrb	r0, [r7, r0]
10059f24:	0640      	lsls	r0, r0, #25
10059f26:	d404      	bmi.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f28:	4620      	mov	r0, r4
10059f2a:	f7fe ffe4 	bl	10058ef6 <llc_conn_get_tx_acl_blocked>
10059f2e:	2800      	cmp	r0, #0
10059f30:	d002      	beq.n	10059f38 <llc_conn_send_acl_data+0x70>
10059f32:	b662      	cpsie	i
10059f34:	2084      	movs	r0, #132	@ 0x84
10059f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059f38:	4620      	mov	r0, r4
10059f3a:	f7f8 fa12 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
10059f3e:	4606      	mov	r6, r0
10059f40:	4620      	mov	r0, r4
10059f42:	3028      	adds	r0, #40	@ 0x28
10059f44:	4286      	cmp	r6, r0
10059f46:	d00a      	beq.n	10059f5e <llc_conn_send_acl_data+0x96>
10059f48:	2101      	movs	r1, #1
10059f4a:	4620      	mov	r0, r4
10059f4c:	f7fe ffac 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
10059f50:	4286      	cmp	r6, r0
10059f52:	d0ee      	beq.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f54:	7830      	ldrb	r0, [r6, #0]
10059f56:	2110      	movs	r1, #16
10059f58:	4301      	orrs	r1, r0
10059f5a:	7031      	strb	r1, [r6, #0]
10059f5c:	e7e9      	b.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f5e:	4812      	ldr	r0, [pc, #72]	@ (10059fa8 <__arm_cp.16_1>)
10059f60:	6800      	ldr	r0, [r0, #0]
10059f62:	218c      	movs	r1, #140	@ 0x8c
10059f64:	5840      	ldr	r0, [r0, r1]
10059f66:	682e      	ldr	r6, [r5, #0]
10059f68:	8a31      	ldrh	r1, [r6, #16]
10059f6a:	89f2      	ldrh	r2, [r6, #14]
10059f6c:	1851      	adds	r1, r2, r1
10059f6e:	221f      	movs	r2, #31
10059f70:	400a      	ands	r2, r1
10059f72:	1817      	adds	r7, r2, r0
10059f74:	1cbd      	adds	r5, r7, #2
10059f76:	4620      	mov	r0, r4
10059f78:	4629      	mov	r1, r5
10059f7a:	f7f8 fa34 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
10059f7e:	4620      	mov	r0, r4
10059f80:	4631      	mov	r1, r6
10059f82:	f7fe fee5 	bl	10058d50 <llc_conn_copy_tx_data_packet>
10059f86:	67e6      	str	r6, [r4, #124]	@ 0x7c
10059f88:	78f8      	ldrb	r0, [r7, #3]
10059f8a:	2800      	cmp	r0, #0
10059f8c:	d0d1      	beq.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f8e:	2101      	movs	r1, #1
10059f90:	4620      	mov	r0, r4
10059f92:	f7fe ff8f 	bl	10058eb4 <llc_conn_get_enc_on>
10059f96:	2801      	cmp	r0, #1
10059f98:	d1cb      	bne.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059f9a:	7868      	ldrb	r0, [r5, #1]
10059f9c:	1d00      	adds	r0, r0, #4
10059f9e:	7068      	strb	r0, [r5, #1]
10059fa0:	e7c7      	b.n	10059f32 <llc_conn_send_acl_data+0x6a>
10059fa2:	46c0      	nop			@ (mov r8, r8)

10059fa4 <__arm_cp.16_0>:
10059fa4:	2000246c 	.word	0x2000246c

10059fa8 <__arm_cp.16_1>:
10059fa8:	20002468 	.word	0x20002468

10059fac <llc_conn_set_taskslot_params>:
10059fac:	b5f0      	push	{r4, r5, r6, r7, lr}
10059fae:	b085      	sub	sp, #20
10059fb0:	460f      	mov	r7, r1
10059fb2:	4604      	mov	r4, r0
10059fb4:	2041      	movs	r0, #65	@ 0x41
10059fb6:	5c20      	ldrb	r0, [r4, r0]
10059fb8:	2183      	movs	r1, #131	@ 0x83
10059fba:	0049      	lsls	r1, r1, #1
10059fbc:	5c61      	ldrb	r1, [r4, r1]
10059fbe:	4625      	mov	r5, r4
10059fc0:	352c      	adds	r5, #44	@ 0x2c
10059fc2:	2901      	cmp	r1, #1
10059fc4:	d10d      	bne.n	10059fe2 <llc_conn_set_taskslot_params+0x36>
10059fc6:	f7f8 fb74 	bl	100526b2 <BLEPLAT_CNTR_SmGetAccessAddr>
10059fca:	8aea      	ldrh	r2, [r5, #22]
10059fcc:	7d6e      	ldrb	r6, [r5, #21]
10059fce:	2300      	movs	r3, #0
10059fd0:	9300      	str	r3, [sp, #0]
10059fd2:	9001      	str	r0, [sp, #4]
10059fd4:	9302      	str	r3, [sp, #8]
10059fd6:	4621      	mov	r1, r4
10059fd8:	31e0      	adds	r1, #224	@ 0xe0
10059fda:	4630      	mov	r0, r6
10059fdc:	f000 f92d 	bl	1005a23a <llc_mngm_csa2_select_channel_for_task>
10059fe0:	e010      	b.n	1005a004 <llc_conn_set_taskslot_params+0x58>
10059fe2:	4616      	mov	r6, r2
10059fe4:	f7f8 fbdc 	bl	100527a0 <BLEPLAT_CNTR_SmGetHopIncr>
10059fe8:	9704      	str	r7, [sp, #16]
10059fea:	4607      	mov	r7, r0
10059fec:	4346      	muls	r6, r0
10059fee:	7968      	ldrb	r0, [r5, #5]
10059ff0:	1836      	adds	r6, r6, r0
10059ff2:	b2b0      	uxth	r0, r6
10059ff4:	f000 f8f6 	bl	1005a1e4 <llc_mngm_mod_37>
10059ff8:	7168      	strb	r0, [r5, #5]
10059ffa:	1bf0      	subs	r0, r6, r7
10059ffc:	9f04      	ldr	r7, [sp, #16]
10059ffe:	b280      	uxth	r0, r0
1005a000:	f000 f8f0 	bl	1005a1e4 <llc_mngm_mod_37>
1005a004:	4601      	mov	r1, r0
1005a006:	7d68      	ldrb	r0, [r5, #21]
1005a008:	f7f8 fe05 	bl	10052c16 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005a00c:	7828      	ldrb	r0, [r5, #0]
1005a00e:	2802      	cmp	r0, #2
1005a010:	d10c      	bne.n	1005a02c <llc_conn_set_taskslot_params+0x80>
1005a012:	4620      	mov	r0, r4
1005a014:	f7f8 fa8c 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005a018:	4620      	mov	r0, r4
1005a01a:	f7f8 f9f3 	bl	10052404 <BLEPLAT_CNTR_PacketSetIncChan>
1005a01e:	7d68      	ldrb	r0, [r5, #21]
1005a020:	f7f8 fdae 	bl	10052b80 <BLEPLAT_CNTR_SmSetTxMode>
1005a024:	6c62      	ldr	r2, [r4, #68]	@ 0x44
1005a026:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1005a028:	7d68      	ldrb	r0, [r5, #21]
1005a02a:	e02d      	b.n	1005a088 <llc_conn_set_taskslot_params+0xdc>
1005a02c:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
1005a02e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005a030:	4639      	mov	r1, r7
1005a032:	f004 fc09 	bl	1005e848 <LL_link_calculate_window_widening_from_ppm>
1005a036:	1980      	adds	r0, r0, r6
1005a038:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005a03a:	2900      	cmp	r1, #0
1005a03c:	d100      	bne.n	1005a040 <llc_conn_set_taskslot_params+0x94>
1005a03e:	300d      	adds	r0, #13
1005a040:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005a042:	0849      	lsrs	r1, r1, #1
1005a044:	393e      	subs	r1, #62	@ 0x3e
1005a046:	4288      	cmp	r0, r1
1005a048:	d901      	bls.n	1005a04e <llc_conn_set_taskslot_params+0xa2>
1005a04a:	2008      	movs	r0, #8
1005a04c:	e022      	b.n	1005a094 <llc_conn_set_taskslot_params+0xe8>
1005a04e:	64a0      	str	r0, [r4, #72]	@ 0x48
1005a050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1005a052:	0040      	lsls	r0, r0, #1
1005a054:	2900      	cmp	r1, #0
1005a056:	d001      	beq.n	1005a05c <llc_conn_set_taskslot_params+0xb0>
1005a058:	180f      	adds	r7, r1, r0
1005a05a:	e005      	b.n	1005a068 <llc_conn_set_taskslot_params+0xbc>
1005a05c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005a05e:	1808      	adds	r0, r1, r0
1005a060:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1005a062:	42b8      	cmp	r0, r7
1005a064:	d800      	bhi.n	1005a068 <llc_conn_set_taskslot_params+0xbc>
1005a066:	4607      	mov	r7, r0
1005a068:	4626      	mov	r6, r4
1005a06a:	3614      	adds	r6, #20
1005a06c:	4630      	mov	r0, r6
1005a06e:	f7f8 fa5f 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005a072:	4630      	mov	r0, r6
1005a074:	f7f8 f9c6 	bl	10052404 <BLEPLAT_CNTR_PacketSetIncChan>
1005a078:	7d68      	ldrb	r0, [r5, #21]
1005a07a:	f7f8 fd15 	bl	10052aa8 <BLEPLAT_CNTR_SmSetRxMode>
1005a07e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005a080:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005a082:	1a42      	subs	r2, r0, r1
1005a084:	7d68      	ldrb	r0, [r5, #21]
1005a086:	4639      	mov	r1, r7
1005a088:	f004 fe6c 	bl	1005ed64 <LL_sched_set_taskslot_length_anchor>
1005a08c:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
1005a08e:	1c40      	adds	r0, r0, #1
1005a090:	8660      	strh	r0, [r4, #50]	@ 0x32
1005a092:	2000      	movs	r0, #0
1005a094:	b005      	add	sp, #20
1005a096:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005a098 <llc_conn_update_receive_window>:
1005a098:	b570      	push	{r4, r5, r6, lr}
1005a09a:	4604      	mov	r4, r0
1005a09c:	4606      	mov	r6, r0
1005a09e:	362c      	adds	r6, #44	@ 0x2c
1005a0a0:	4605      	mov	r5, r0
1005a0a2:	35d0      	adds	r5, #208	@ 0xd0
1005a0a4:	f7f3 fa8e 	bl	1004d5c4 <phy_upd_csr_ucfg>
1005a0a8:	2801      	cmp	r0, #1
1005a0aa:	d10b      	bne.n	1005a0c4 <llc_conn_update_receive_window+0x2c>
1005a0ac:	7930      	ldrb	r0, [r6, #4]
1005a0ae:	210e      	movs	r1, #14
1005a0b0:	4341      	muls	r1, r0
1005a0b2:	480e      	ldr	r0, [pc, #56]	@ (1005a0ec <__arm_cp.18_0>)
1005a0b4:	6800      	ldr	r0, [r0, #0]
1005a0b6:	229c      	movs	r2, #156	@ 0x9c
1005a0b8:	5880      	ldr	r0, [r0, r2]
1005a0ba:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a0bc:	6940      	ldr	r0, [r0, #20]
1005a0be:	1840      	adds	r0, r0, r1
1005a0c0:	79c0      	ldrb	r0, [r0, #7]
1005a0c2:	e000      	b.n	1005a0c6 <llc_conn_update_receive_window+0x2e>
1005a0c4:	2001      	movs	r0, #1
1005a0c6:	f7f8 fdca 	bl	10052c5e <BLEPLAT_CNTR_DemodDelaySt>
1005a0ca:	4909      	ldr	r1, [pc, #36]	@ (1005a0f0 <__arm_cp.18_1>)
1005a0cc:	4348      	muls	r0, r1
1005a0ce:	0a00      	lsrs	r0, r0, #8
1005a0d0:	3010      	adds	r0, #16
1005a0d2:	6028      	str	r0, [r5, #0]
1005a0d4:	7832      	ldrb	r2, [r6, #0]
1005a0d6:	2a03      	cmp	r2, #3
1005a0d8:	d107      	bne.n	1005a0ea <llc_conn_update_receive_window+0x52>
1005a0da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1005a0dc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005a0de:	005b      	lsls	r3, r3, #1
1005a0e0:	189a      	adds	r2, r3, r2
1005a0e2:	4351      	muls	r1, r2
1005a0e4:	0a09      	lsrs	r1, r1, #8
1005a0e6:	1808      	adds	r0, r1, r0
1005a0e8:	6028      	str	r0, [r5, #0]
1005a0ea:	bd70      	pop	{r4, r5, r6, pc}

1005a0ec <__arm_cp.18_0>:
1005a0ec:	20002468 	.word	0x20002468

1005a0f0 <__arm_cp.18_1>:
1005a0f0:	00000271 	.word	0x00000271

1005a0f4 <llc_conn_peripheral_roll_back_params_tsk>:
1005a0f4:	b570      	push	{r4, r5, r6, lr}
1005a0f6:	2400      	movs	r4, #0
1005a0f8:	4620      	mov	r0, r4
1005a0fa:	f7fe fc3f 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a0fe:	4605      	mov	r5, r0
1005a100:	4e0a      	ldr	r6, [pc, #40]	@ (1005a12c <__arm_cp.20_0>)
1005a102:	6830      	ldr	r0, [r6, #0]
1005a104:	2134      	movs	r1, #52	@ 0x34
1005a106:	5c41      	ldrb	r1, [r0, r1]
1005a108:	428c      	cmp	r4, r1
1005a10a:	d20d      	bcs.n	1005a128 <llc_conn_peripheral_roll_back_params_tsk+0x34>
1005a10c:	21ff      	movs	r1, #255	@ 0xff
1005a10e:	3108      	adds	r1, #8
1005a110:	5c69      	ldrb	r1, [r5, r1]
1005a112:	07c9      	lsls	r1, r1, #31
1005a114:	d003      	beq.n	1005a11e <llc_conn_peripheral_roll_back_params_tsk+0x2a>
1005a116:	4628      	mov	r0, r5
1005a118:	f7ff fe0e 	bl	10059d38 <llc_conn_peripheral_roll_back_params>
1005a11c:	6830      	ldr	r0, [r6, #0]
1005a11e:	214d      	movs	r1, #77	@ 0x4d
1005a120:	0089      	lsls	r1, r1, #2
1005a122:	186d      	adds	r5, r5, r1
1005a124:	1c64      	adds	r4, r4, #1
1005a126:	e7ed      	b.n	1005a104 <llc_conn_peripheral_roll_back_params_tsk+0x10>
1005a128:	bd70      	pop	{r4, r5, r6, pc}
1005a12a:	46c0      	nop			@ (mov r8, r8)

1005a12c <__arm_cp.20_0>:
1005a12c:	20002414 	.word	0x20002414

1005a130 <llc_conn_set_blue_packets>:
1005a130:	b570      	push	{r4, r5, r6, lr}
1005a132:	4616      	mov	r6, r2
1005a134:	460d      	mov	r5, r1
1005a136:	4604      	mov	r4, r0
1005a138:	f7f8 f920 	bl	1005237c <BLEPLAT_CNTR_PacketInitTo0>
1005a13c:	4620      	mov	r0, r4
1005a13e:	f7f8 f938 	bl	100523b2 <BLEPLAT_CNTR_PacketSetCrcinitSel>
1005a142:	4620      	mov	r0, r4
1005a144:	f7f8 f976 	bl	10052434 <BLEPLAT_CNTR_PacketSetIntDone>
1005a148:	4620      	mov	r0, r4
1005a14a:	4621      	mov	r1, r4
1005a14c:	f7f8 f9b0 	bl	100524b0 <BLEPLAT_CNTR_PacketSetNextPtr>
1005a150:	4620      	mov	r0, r4
1005a152:	f7f8 f9e1 	bl	10052518 <BLEPLAT_CNTR_PacketSetNsEn>
1005a156:	4620      	mov	r0, r4
1005a158:	4631      	mov	r1, r6
1005a15a:	f7f8 f9c5 	bl	100524e8 <BLEPLAT_CNTR_PacketSetNextSlot>
1005a15e:	4620      	mov	r0, r4
1005a160:	f7f8 fa0f 	bl	10052582 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005a164:	4620      	mov	r0, r4
1005a166:	f7f8 f9e3 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005a16a:	4620      	mov	r0, r4
1005a16c:	f7f8 f94a 	bl	10052404 <BLEPLAT_CNTR_PacketSetIncChan>
1005a170:	4620      	mov	r0, r4
1005a172:	f7f8 f990 	bl	10052496 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005a176:	2d00      	cmp	r5, #0
1005a178:	d00d      	beq.n	1005a196 <llc_conn_set_blue_packets+0x66>
1005a17a:	2094      	movs	r0, #148	@ 0x94
1005a17c:	2100      	movs	r1, #0
1005a17e:	460a      	mov	r2, r1
1005a180:	f7f7 ff8a 	bl	10052098 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005a184:	4601      	mov	r1, r0
1005a186:	4620      	mov	r0, r4
1005a188:	f7f8 f9ec 	bl	10052564 <BLEPLAT_CNTR_PacketSetTimeout>
1005a18c:	4620      	mov	r0, r4
1005a18e:	4629      	mov	r1, r5
1005a190:	f7f8 f929 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
1005a194:	bd70      	pop	{r4, r5, r6, pc}
1005a196:	4812      	ldr	r0, [pc, #72]	@ (1005a1e0 <__arm_cp.21_0>)
1005a198:	6800      	ldr	r0, [r0, #0]
1005a19a:	2190      	movs	r1, #144	@ 0x90
1005a19c:	5845      	ldr	r5, [r0, r1]
1005a19e:	2096      	movs	r0, #150	@ 0x96
1005a1a0:	2101      	movs	r1, #1
1005a1a2:	2200      	movs	r2, #0
1005a1a4:	f7f7 ff78 	bl	10052098 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005a1a8:	4601      	mov	r1, r0
1005a1aa:	4620      	mov	r0, r4
1005a1ac:	f7f8 f9da 	bl	10052564 <BLEPLAT_CNTR_PacketSetTimeout>
1005a1b0:	4620      	mov	r0, r4
1005a1b2:	f7f8 f94b 	bl	1005244c <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005a1b6:	4620      	mov	r0, r4
1005a1b8:	f7f8 f960 	bl	1005247c <BLEPLAT_CNTR_PacketSetIntTxOk>
1005a1bc:	4620      	mov	r0, r4
1005a1be:	f7f8 f951 	bl	10052464 <BLEPLAT_CNTR_PacketSetIntTimeout>
1005a1c2:	4620      	mov	r0, r4
1005a1c4:	f7f8 f92a 	bl	1005241c <BLEPLAT_CNTR_PacketSetIntCrcErr>
1005a1c8:	1ca9      	adds	r1, r5, #2
1005a1ca:	4620      	mov	r0, r4
1005a1cc:	f7f8 f90b 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
1005a1d0:	4620      	mov	r0, r4
1005a1d2:	f7f8 f994 	bl	100524fe <BLEPLAT_CNTR_PacketSetNextTxMode>
1005a1d6:	4620      	mov	r0, r4
1005a1d8:	f7f8 f9ec 	bl	100525b4 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005a1dc:	bd70      	pop	{r4, r5, r6, pc}
1005a1de:	46c0      	nop			@ (mov r8, r8)

1005a1e0 <__arm_cp.21_0>:
1005a1e0:	20002468 	.word	0x20002468

1005a1e4 <llc_mngm_mod_37>:
1005a1e4:	4906      	ldr	r1, [pc, #24]	@ (1005a200 <__arm_cp.0_0>)
1005a1e6:	4341      	muls	r1, r0
1005a1e8:	0c09      	lsrs	r1, r1, #16
1005a1ea:	2224      	movs	r2, #36	@ 0x24
1005a1ec:	43d2      	mvns	r2, r2
1005a1ee:	434a      	muls	r2, r1
1005a1f0:	1810      	adds	r0, r2, r0
1005a1f2:	b281      	uxth	r1, r0
1005a1f4:	2924      	cmp	r1, #36	@ 0x24
1005a1f6:	d900      	bls.n	1005a1fa <llc_mngm_mod_37+0x16>
1005a1f8:	3825      	subs	r0, #37	@ 0x25
1005a1fa:	b2c0      	uxtb	r0, r0
1005a1fc:	4770      	bx	lr
1005a1fe:	46c0      	nop			@ (mov r8, r8)

1005a200 <__arm_cp.0_0>:
1005a200:	000006eb 	.word	0x000006eb

1005a204 <llc_mngm_csa2_update_remapping_table>:
1005a204:	b570      	push	{r4, r5, r6, lr}
1005a206:	460d      	mov	r5, r1
1005a208:	4604      	mov	r4, r0
1005a20a:	1c40      	adds	r0, r0, #1
1005a20c:	2600      	movs	r6, #0
1005a20e:	2225      	movs	r2, #37	@ 0x25
1005a210:	4631      	mov	r1, r6
1005a212:	f7f6 ff51 	bl	100510b8 <BLEPLAT_MemSet>
1005a216:	4630      	mov	r0, r6
1005a218:	2e25      	cmp	r6, #37	@ 0x25
1005a21a:	d20c      	bcs.n	1005a236 <llc_mngm_csa2_update_remapping_table+0x32>
1005a21c:	2107      	movs	r1, #7
1005a21e:	4031      	ands	r1, r6
1005a220:	08f2      	lsrs	r2, r6, #3
1005a222:	5caa      	ldrb	r2, [r5, r2]
1005a224:	40ca      	lsrs	r2, r1
1005a226:	07d1      	lsls	r1, r2, #31
1005a228:	d003      	beq.n	1005a232 <llc_mngm_csa2_update_remapping_table+0x2e>
1005a22a:	b2c1      	uxtb	r1, r0
1005a22c:	1861      	adds	r1, r4, r1
1005a22e:	704e      	strb	r6, [r1, #1]
1005a230:	1c40      	adds	r0, r0, #1
1005a232:	1c76      	adds	r6, r6, #1
1005a234:	e7f0      	b.n	1005a218 <llc_mngm_csa2_update_remapping_table+0x14>
1005a236:	7020      	strb	r0, [r4, #0]
1005a238:	bd70      	pop	{r4, r5, r6, pc}

1005a23a <llc_mngm_csa2_select_channel_for_task>:
1005a23a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a23c:	b08b      	sub	sp, #44	@ 0x2c
1005a23e:	9305      	str	r3, [sp, #20]
1005a240:	4617      	mov	r7, r2
1005a242:	460d      	mov	r5, r1
1005a244:	a909      	add	r1, sp, #36	@ 0x24
1005a246:	f7f8 fa44 	bl	100526d2 <BLEPLAT_CNTR_SmGetChannelMap>
1005a24a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005a24c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005a24e:	9006      	str	r0, [sp, #24]
1005a250:	2800      	cmp	r0, #0
1005a252:	d018      	beq.n	1005a286 <llc_mngm_csa2_select_channel_for_task+0x4c>
1005a254:	9504      	str	r5, [sp, #16]
1005a256:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005a258:	2500      	movs	r5, #0
1005a25a:	9806      	ldr	r0, [sp, #24]
1005a25c:	42a8      	cmp	r0, r5
1005a25e:	d010      	beq.n	1005a282 <llc_mngm_csa2_select_channel_for_task+0x48>
1005a260:	9804      	ldr	r0, [sp, #16]
1005a262:	9003      	str	r0, [sp, #12]
1005a264:	a809      	add	r0, sp, #36	@ 0x24
1005a266:	9002      	str	r0, [sp, #8]
1005a268:	a808      	add	r0, sp, #32
1005a26a:	9001      	str	r0, [sp, #4]
1005a26c:	a807      	add	r0, sp, #28
1005a26e:	9000      	str	r0, [sp, #0]
1005a270:	b2eb      	uxtb	r3, r5
1005a272:	4620      	mov	r0, r4
1005a274:	4639      	mov	r1, r7
1005a276:	9a05      	ldr	r2, [sp, #20]
1005a278:	f000 f812 	bl	1005a2a0 <llc_mngm_csa2_select_channel>
1005a27c:	5570      	strb	r0, [r6, r5]
1005a27e:	1c6d      	adds	r5, r5, #1
1005a280:	e7eb      	b.n	1005a25a <llc_mngm_csa2_select_channel_for_task+0x20>
1005a282:	7830      	ldrb	r0, [r6, #0]
1005a284:	e00a      	b.n	1005a29c <llc_mngm_csa2_select_channel_for_task+0x62>
1005a286:	9503      	str	r5, [sp, #12]
1005a288:	a809      	add	r0, sp, #36	@ 0x24
1005a28a:	9002      	str	r0, [sp, #8]
1005a28c:	2200      	movs	r2, #0
1005a28e:	9201      	str	r2, [sp, #4]
1005a290:	9200      	str	r2, [sp, #0]
1005a292:	4620      	mov	r0, r4
1005a294:	4639      	mov	r1, r7
1005a296:	4613      	mov	r3, r2
1005a298:	f000 f802 	bl	1005a2a0 <llc_mngm_csa2_select_channel>
1005a29c:	b00b      	add	sp, #44	@ 0x2c
1005a29e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005a2a0 <llc_mngm_csa2_select_channel>:
1005a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a2a2:	b089      	sub	sp, #36	@ 0x24
1005a2a4:	4615      	mov	r5, r2
1005a2a6:	aa08      	add	r2, sp, #32
1005a2a8:	2600      	movs	r6, #0
1005a2aa:	7016      	strb	r6, [r2, #0]
1005a2ac:	2d00      	cmp	r5, #0
1005a2ae:	9306      	str	r3, [sp, #24]
1005a2b0:	461a      	mov	r2, r3
1005a2b2:	d100      	bne.n	1005a2b6 <llc_mngm_csa2_select_channel+0x16>
1005a2b4:	462a      	mov	r2, r5
1005a2b6:	0c07      	lsrs	r7, r0, #16
1005a2b8:	4047      	eors	r7, r0
1005a2ba:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005a2bc:	9007      	str	r0, [sp, #28]
1005a2be:	2d00      	cmp	r5, #0
1005a2c0:	d104      	bne.n	1005a2cc <llc_mngm_csa2_select_channel+0x2c>
1005a2c2:	2300      	movs	r3, #0
1005a2c4:	9806      	ldr	r0, [sp, #24]
1005a2c6:	2801      	cmp	r0, #1
1005a2c8:	461c      	mov	r4, r3
1005a2ca:	d838      	bhi.n	1005a33e <llc_mngm_csa2_select_channel+0x9e>
1005a2cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005a2ce:	9005      	str	r0, [sp, #20]
1005a2d0:	4079      	eors	r1, r7
1005a2d2:	4051      	eors	r1, r2
1005a2d4:	460c      	mov	r4, r1
1005a2d6:	2e02      	cmp	r6, #2
1005a2d8:	d807      	bhi.n	1005a2ea <llc_mngm_csa2_select_channel+0x4a>
1005a2da:	b2a0      	uxth	r0, r4
1005a2dc:	f000 f842 	bl	1005a364 <llc_mngm_csa2_permutation>
1005a2e0:	2111      	movs	r1, #17
1005a2e2:	4341      	muls	r1, r0
1005a2e4:	19cc      	adds	r4, r1, r7
1005a2e6:	1c76      	adds	r6, r6, #1
1005a2e8:	e7f5      	b.n	1005a2d6 <llc_mngm_csa2_select_channel+0x36>
1005a2ea:	4620      	mov	r0, r4
1005a2ec:	4078      	eors	r0, r7
1005a2ee:	b286      	uxth	r6, r0
1005a2f0:	4630      	mov	r0, r6
1005a2f2:	f7ff ff77 	bl	1005a1e4 <llc_mngm_mod_37>
1005a2f6:	2824      	cmp	r0, #36	@ 0x24
1005a2f8:	d815      	bhi.n	1005a326 <llc_mngm_csa2_select_channel+0x86>
1005a2fa:	08c1      	lsrs	r1, r0, #3
1005a2fc:	9a05      	ldr	r2, [sp, #20]
1005a2fe:	5c52      	ldrb	r2, [r2, r1]
1005a300:	00c9      	lsls	r1, r1, #3
1005a302:	1a41      	subs	r1, r0, r1
1005a304:	b2c9      	uxtb	r1, r1
1005a306:	40ca      	lsrs	r2, r1
1005a308:	07d1      	lsls	r1, r2, #31
1005a30a:	d00c      	beq.n	1005a326 <llc_mngm_csa2_select_channel+0x86>
1005a30c:	a908      	add	r1, sp, #32
1005a30e:	7008      	strb	r0, [r1, #0]
1005a310:	9a07      	ldr	r2, [sp, #28]
1005a312:	1c51      	adds	r1, r2, #1
1005a314:	7812      	ldrb	r2, [r2, #0]
1005a316:	2300      	movs	r3, #0
1005a318:	429a      	cmp	r2, r3
1005a31a:	d00d      	beq.n	1005a338 <llc_mngm_csa2_select_channel+0x98>
1005a31c:	5cce      	ldrb	r6, [r1, r3]
1005a31e:	4286      	cmp	r6, r0
1005a320:	d00b      	beq.n	1005a33a <llc_mngm_csa2_select_channel+0x9a>
1005a322:	1c5b      	adds	r3, r3, #1
1005a324:	e7f8      	b.n	1005a318 <llc_mngm_csa2_select_channel+0x78>
1005a326:	9907      	ldr	r1, [sp, #28]
1005a328:	7808      	ldrb	r0, [r1, #0]
1005a32a:	4346      	muls	r6, r0
1005a32c:	0c33      	lsrs	r3, r6, #16
1005a32e:	18c8      	adds	r0, r1, r3
1005a330:	7840      	ldrb	r0, [r0, #1]
1005a332:	a908      	add	r1, sp, #32
1005a334:	7008      	strb	r0, [r1, #0]
1005a336:	e000      	b.n	1005a33a <llc_mngm_csa2_select_channel+0x9a>
1005a338:	2325      	movs	r3, #37	@ 0x25
1005a33a:	2d00      	cmp	r5, #0
1005a33c:	d10e      	bne.n	1005a35c <llc_mngm_csa2_select_channel+0xbc>
1005a33e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005a340:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005a342:	ad08      	add	r5, sp, #32
1005a344:	b2ba      	uxth	r2, r7
1005a346:	9000      	str	r0, [sp, #0]
1005a348:	9201      	str	r2, [sp, #4]
1005a34a:	9807      	ldr	r0, [sp, #28]
1005a34c:	9002      	str	r0, [sp, #8]
1005a34e:	9503      	str	r5, [sp, #12]
1005a350:	b2a2      	uxth	r2, r4
1005a352:	b2db      	uxtb	r3, r3
1005a354:	9806      	ldr	r0, [sp, #24]
1005a356:	f000 f803 	bl	1005a360 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005a35a:	7828      	ldrb	r0, [r5, #0]
1005a35c:	b009      	add	sp, #36	@ 0x24
1005a35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005a360 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
1005a360:	4770      	bx	lr
	...

1005a364 <llc_mngm_csa2_permutation>:
1005a364:	0041      	lsls	r1, r0, #1
1005a366:	4a0a      	ldr	r2, [pc, #40]	@ (1005a390 <__arm_cp.7_0>)
1005a368:	400a      	ands	r2, r1
1005a36a:	0840      	lsrs	r0, r0, #1
1005a36c:	4909      	ldr	r1, [pc, #36]	@ (1005a394 <__arm_cp.7_1>)
1005a36e:	4001      	ands	r1, r0
1005a370:	1888      	adds	r0, r1, r2
1005a372:	0081      	lsls	r1, r0, #2
1005a374:	4a08      	ldr	r2, [pc, #32]	@ (1005a398 <__arm_cp.7_2>)
1005a376:	400a      	ands	r2, r1
1005a378:	0880      	lsrs	r0, r0, #2
1005a37a:	4908      	ldr	r1, [pc, #32]	@ (1005a39c <__arm_cp.7_3>)
1005a37c:	4001      	ands	r1, r0
1005a37e:	1888      	adds	r0, r1, r2
1005a380:	0101      	lsls	r1, r0, #4
1005a382:	4a07      	ldr	r2, [pc, #28]	@ (1005a3a0 <__arm_cp.7_4>)
1005a384:	400a      	ands	r2, r1
1005a386:	0900      	lsrs	r0, r0, #4
1005a388:	4906      	ldr	r1, [pc, #24]	@ (1005a3a4 <__arm_cp.7_5>)
1005a38a:	4001      	ands	r1, r0
1005a38c:	1888      	adds	r0, r1, r2
1005a38e:	4770      	bx	lr

1005a390 <__arm_cp.7_0>:
1005a390:	0001aaaa 	.word	0x0001aaaa

1005a394 <__arm_cp.7_1>:
1005a394:	00005555 	.word	0x00005555

1005a398 <__arm_cp.7_2>:
1005a398:	0007cccc 	.word	0x0007cccc

1005a39c <__arm_cp.7_3>:
1005a39c:	00003333 	.word	0x00003333

1005a3a0 <__arm_cp.7_4>:
1005a3a0:	0000f0f0 	.word	0x0000f0f0

1005a3a4 <__arm_cp.7_5>:
1005a3a4:	00000f0f 	.word	0x00000f0f

1005a3a8 <llc_wl_clear_filter_accept_list>:
1005a3a8:	b5b0      	push	{r4, r5, r7, lr}
1005a3aa:	2401      	movs	r4, #1
1005a3ac:	4620      	mov	r0, r4
1005a3ae:	f003 f9f7 	bl	1005d7a0 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005a3b2:	4605      	mov	r5, r0
1005a3b4:	4620      	mov	r0, r4
1005a3b6:	f000 f8b4 	bl	1005a522 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005a3ba:	4328      	orrs	r0, r5
1005a3bc:	d10a      	bne.n	1005a3d4 <llc_wl_clear_filter_accept_list+0x2c>
1005a3be:	4806      	ldr	r0, [pc, #24]	@ (1005a3d8 <__arm_cp.1_0>)
1005a3c0:	6800      	ldr	r0, [r0, #0]
1005a3c2:	219c      	movs	r1, #156	@ 0x9c
1005a3c4:	5840      	ldr	r0, [r0, r1]
1005a3c6:	300c      	adds	r0, #12
1005a3c8:	f007 fa0f 	bl	100617ea <addr8_list_clear>
1005a3cc:	f000 f85a 	bl	1005a484 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
1005a3d0:	2000      	movs	r0, #0
1005a3d2:	bdb0      	pop	{r4, r5, r7, pc}
1005a3d4:	200c      	movs	r0, #12
1005a3d6:	bdb0      	pop	{r4, r5, r7, pc}

1005a3d8 <__arm_cp.1_0>:
1005a3d8:	20002468 	.word	0x20002468

1005a3dc <llc_wl_add_device_to_filter_accept_list>:
1005a3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a3de:	b087      	sub	sp, #28
1005a3e0:	460c      	mov	r4, r1
1005a3e2:	4605      	mov	r5, r0
1005a3e4:	9106      	str	r1, [sp, #24]
1005a3e6:	9005      	str	r0, [sp, #20]
1005a3e8:	2601      	movs	r6, #1
1005a3ea:	4630      	mov	r0, r6
1005a3ec:	f003 f9d8 	bl	1005d7a0 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005a3f0:	4607      	mov	r7, r0
1005a3f2:	4630      	mov	r0, r6
1005a3f4:	f000 f895 	bl	1005a522 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005a3f8:	4338      	orrs	r0, r7
1005a3fa:	d11d      	bne.n	1005a438 <llc_wl_add_device_to_filter_accept_list+0x5c>
1005a3fc:	b2e8      	uxtb	r0, r5
1005a3fe:	28ff      	cmp	r0, #255	@ 0xff
1005a400:	d105      	bne.n	1005a40e <llc_wl_add_device_to_filter_accept_list+0x32>
1005a402:	9005      	str	r0, [sp, #20]
1005a404:	21ff      	movs	r1, #255	@ 0xff
1005a406:	0609      	lsls	r1, r1, #24
1005a408:	400c      	ands	r4, r1
1005a40a:	9406      	str	r4, [sp, #24]
1005a40c:	4605      	mov	r5, r0
1005a40e:	4810      	ldr	r0, [pc, #64]	@ (1005a450 <__arm_cp.2_0>)
1005a410:	6800      	ldr	r0, [r0, #0]
1005a412:	219c      	movs	r1, #156	@ 0x9c
1005a414:	5840      	ldr	r0, [r0, r1]
1005a416:	a903      	add	r1, sp, #12
1005a418:	9101      	str	r1, [sp, #4]
1005a41a:	a904      	add	r1, sp, #16
1005a41c:	9100      	str	r1, [sp, #0]
1005a41e:	300c      	adds	r0, #12
1005a420:	2301      	movs	r3, #1
1005a422:	4629      	mov	r1, r5
1005a424:	4622      	mov	r2, r4
1005a426:	f007 f961 	bl	100616ec <addr8_list_add>
1005a42a:	2800      	cmp	r0, #0
1005a42c:	d006      	beq.n	1005a43c <llc_wl_add_device_to_filter_accept_list+0x60>
1005a42e:	a805      	add	r0, sp, #20
1005a430:	2101      	movs	r1, #1
1005a432:	f000 f826 	bl	1005a482 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
1005a436:	e005      	b.n	1005a444 <llc_wl_add_device_to_filter_accept_list+0x68>
1005a438:	200c      	movs	r0, #12
1005a43a:	e006      	b.n	1005a44a <llc_wl_add_device_to_filter_accept_list+0x6e>
1005a43c:	a803      	add	r0, sp, #12
1005a43e:	7800      	ldrb	r0, [r0, #0]
1005a440:	2800      	cmp	r0, #0
1005a442:	d001      	beq.n	1005a448 <llc_wl_add_device_to_filter_accept_list+0x6c>
1005a444:	2000      	movs	r0, #0
1005a446:	e000      	b.n	1005a44a <llc_wl_add_device_to_filter_accept_list+0x6e>
1005a448:	2007      	movs	r0, #7
1005a44a:	b007      	add	sp, #28
1005a44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a44e:	46c0      	nop			@ (mov r8, r8)

1005a450 <__arm_cp.2_0>:
1005a450:	20002468 	.word	0x20002468

1005a454 <bis_csr_ucfg_weak>:
1005a454:	2000      	movs	r0, #0
1005a456:	4770      	bx	lr

1005a458 <cis_csr_ucfg_weak>:
1005a458:	2000      	movs	r0, #0
1005a45a:	4770      	bx	lr

1005a45c <llc_isoal_mem_alloc_ucfg_weak>:
1005a45c:	4770      	bx	lr

1005a45e <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1005a45e:	2000      	movs	r0, #0
1005a460:	4770      	bx	lr

1005a462 <iso_terminate_event_int_cb_ucfg_weak>:
1005a462:	2000      	movs	r0, #0
1005a464:	4770      	bx	lr

1005a466 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1005a466:	2000      	movs	r0, #0
1005a468:	4770      	bx	lr

1005a46a <llc_iso_cmn_mem_alloc_ucfg_weak>:
1005a46a:	4770      	bx	lr

1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1005a46c:	2000      	movs	r0, #0
1005a46e:	4770      	bx	lr

1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1005a470:	2000      	movs	r0, #0
1005a472:	4770      	bx	lr

1005a474 <llc_past_init_ucfg_weak>:
1005a474:	4770      	bx	lr

1005a476 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1005a476:	4770      	bx	lr

1005a478 <llc_priv_init_ucfg_weak>:
1005a478:	4770      	bx	lr

1005a47a <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1005a47a:	4770      	bx	lr

1005a47c <llc_priv_offline_rpa_resolution_ucfg_weak>:
1005a47c:	4770      	bx	lr

1005a47e <llc_priv_controller_privacy_csr_ucfg_weak>:
1005a47e:	2000      	movs	r0, #0
1005a480:	4770      	bx	lr

1005a482 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
1005a482:	4770      	bx	lr

1005a484 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
1005a484:	4770      	bx	lr

1005a486 <llc_priv_start_privacy_timer_ucfg_weak>:
1005a486:	4770      	bx	lr

1005a488 <llc_priv_stop_privacy_timer_ucfg_weak>:
1005a488:	4770      	bx	lr

1005a48a <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1005a48a:	4770      	bx	lr

1005a48c <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
1005a48c:	4770      	bx	lr
	...

1005a490 <llc_pscan_get_cntxt_per_p>:
1005a490:	218c      	movs	r1, #140	@ 0x8c
1005a492:	4341      	muls	r1, r0
1005a494:	4804      	ldr	r0, [pc, #16]	@ (1005a4a8 <__arm_cp.1_0>)
1005a496:	6800      	ldr	r0, [r0, #0]
1005a498:	229c      	movs	r2, #156	@ 0x9c
1005a49a:	5880      	ldr	r0, [r0, r2]
1005a49c:	6840      	ldr	r0, [r0, #4]
1005a49e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1005a4a0:	6800      	ldr	r0, [r0, #0]
1005a4a2:	6800      	ldr	r0, [r0, #0]
1005a4a4:	1840      	adds	r0, r0, r1
1005a4a6:	4770      	bx	lr

1005a4a8 <__arm_cp.1_0>:
1005a4a8:	20002468 	.word	0x20002468

1005a4ac <llc_pscan_init_ucfg_weak>:
1005a4ac:	4770      	bx	lr

1005a4ae <llc_pscan_mem_allocate_ucfg_weak>:
1005a4ae:	4770      	bx	lr

1005a4b0 <llc_pscan_wr_init_ucfg_weak>:
1005a4b0:	4770      	bx	lr
	...

1005a4b4 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1005a4b4:	b510      	push	{r4, lr}
1005a4b6:	2801      	cmp	r0, #1
1005a4b8:	d110      	bne.n	1005a4dc <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005a4ba:	2901      	cmp	r1, #1
1005a4bc:	d10e      	bne.n	1005a4dc <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005a4be:	2a01      	cmp	r2, #1
1005a4c0:	d10c      	bne.n	1005a4dc <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005a4c2:	2400      	movs	r4, #0
1005a4c4:	4620      	mov	r0, r4
1005a4c6:	f7ff ffe3 	bl	1005a490 <llc_pscan_get_cntxt_per_p>
1005a4ca:	3014      	adds	r0, #20
1005a4cc:	4904      	ldr	r1, [pc, #16]	@ (1005a4e0 <__arm_cp.5_0>)
1005a4ce:	7f89      	ldrb	r1, [r1, #30]
1005a4d0:	2900      	cmp	r1, #0
1005a4d2:	d003      	beq.n	1005a4dc <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005a4d4:	6004      	str	r4, [r0, #0]
1005a4d6:	308c      	adds	r0, #140	@ 0x8c
1005a4d8:	1e49      	subs	r1, r1, #1
1005a4da:	e7f9      	b.n	1005a4d0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1005a4dc:	bd10      	pop	{r4, pc}
1005a4de:	46c0      	nop			@ (mov r8, r8)

1005a4e0 <__arm_cp.5_0>:
1005a4e0:	2000247c 	.word	0x2000247c

1005a4e4 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
1005a4e4:	2000      	movs	r0, #0
1005a4e6:	4770      	bx	lr

1005a4e8 <llc_scan_get_cntxt_p>:
1005a4e8:	4802      	ldr	r0, [pc, #8]	@ (1005a4f4 <__arm_cp.0_0>)
1005a4ea:	6800      	ldr	r0, [r0, #0]
1005a4ec:	219c      	movs	r1, #156	@ 0x9c
1005a4ee:	5840      	ldr	r0, [r0, r1]
1005a4f0:	6840      	ldr	r0, [r0, #4]
1005a4f2:	4770      	bx	lr

1005a4f4 <__arm_cp.0_0>:
1005a4f4:	20002468 	.word	0x20002468

1005a4f8 <llc_scan_init_ucfg_weak>:
1005a4f8:	4770      	bx	lr

1005a4fa <llc_scan_mem_allocate_ucfg_weak>:
1005a4fa:	4770      	bx	lr

1005a4fc <llc_scan_set_scan_channel_bitmap>:
1005a4fc:	b510      	push	{r4, lr}
1005a4fe:	4604      	mov	r4, r0
1005a500:	f7fd fd6c 	bl	10057fdc <scan_csr_ucfg_weak>
1005a504:	2801      	cmp	r0, #1
1005a506:	d108      	bne.n	1005a51a <llc_scan_set_scan_channel_bitmap+0x1e>
1005a508:	1e60      	subs	r0, r4, #1
1005a50a:	2806      	cmp	r0, #6
1005a50c:	d807      	bhi.n	1005a51e <llc_scan_set_scan_channel_bitmap+0x22>
1005a50e:	f7ff ffeb 	bl	1005a4e8 <llc_scan_get_cntxt_p>
1005a512:	21ef      	movs	r1, #239	@ 0xef
1005a514:	5444      	strb	r4, [r0, r1]
1005a516:	2000      	movs	r0, #0
1005a518:	bd10      	pop	{r4, pc}
1005a51a:	2011      	movs	r0, #17
1005a51c:	bd10      	pop	{r4, pc}
1005a51e:	2012      	movs	r0, #18
1005a520:	bd10      	pop	{r4, pc}

1005a522 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
1005a522:	b5b0      	push	{r4, r5, r7, lr}
1005a524:	4605      	mov	r5, r0
1005a526:	2400      	movs	r4, #0
1005a528:	f7fd fd58 	bl	10057fdc <scan_csr_ucfg_weak>
1005a52c:	2801      	cmp	r0, #1
1005a52e:	d10d      	bne.n	1005a54c <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005a530:	f7ff ffda 	bl	1005a4e8 <llc_scan_get_cntxt_p>
1005a534:	21eb      	movs	r1, #235	@ 0xeb
1005a536:	5c41      	ldrb	r1, [r0, r1]
1005a538:	07c9      	lsls	r1, r1, #31
1005a53a:	d007      	beq.n	1005a54c <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005a53c:	2d00      	cmp	r5, #0
1005a53e:	d004      	beq.n	1005a54a <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
1005a540:	30ea      	adds	r0, #234	@ 0xea
1005a542:	7800      	ldrb	r0, [r0, #0]
1005a544:	2401      	movs	r4, #1
1005a546:	4004      	ands	r4, r0
1005a548:	e000      	b.n	1005a54c <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005a54a:	2401      	movs	r4, #1
1005a54c:	4620      	mov	r0, r4
1005a54e:	bdb0      	pop	{r4, r5, r7, pc}

1005a550 <llc_scan_stop_ucfg_weak>:
1005a550:	2000      	movs	r0, #0
1005a552:	4770      	bx	lr

1005a554 <llc_subrate_init_acceptable>:
1005a554:	2100      	movs	r1, #0
1005a556:	4a03      	ldr	r2, [pc, #12]	@ (1005a564 <__arm_cp.4_0>)
1005a558:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005a55a:	6302      	str	r2, [r0, #48]	@ 0x30
1005a55c:	2119      	movs	r1, #25
1005a55e:	01c9      	lsls	r1, r1, #7
1005a560:	8681      	strh	r1, [r0, #52]	@ 0x34
1005a562:	4770      	bx	lr

1005a564 <__arm_cp.4_0>:
1005a564:	00010001 	.word	0x00010001

1005a568 <llc_subrate_init_acceptable_per>:
1005a568:	b580      	push	{r7, lr}
1005a56a:	4603      	mov	r3, r0
1005a56c:	2049      	movs	r0, #73	@ 0x49
1005a56e:	0080      	lsls	r0, r0, #2
1005a570:	1808      	adds	r0, r1, r0
1005a572:	332c      	adds	r3, #44	@ 0x2c
1005a574:	220a      	movs	r2, #10
1005a576:	4619      	mov	r1, r3
1005a578:	f7f6 fd8e 	bl	10051098 <BLEPLAT_MemCpy>
1005a57c:	bd80      	pop	{r7, pc}

1005a57e <llc_subrate_reset_params>:
1005a57e:	2147      	movs	r1, #71	@ 0x47
1005a580:	0089      	lsls	r1, r1, #2
1005a582:	2200      	movs	r2, #0
1005a584:	5042      	str	r2, [r0, r1]
1005a586:	1840      	adds	r0, r0, r1
1005a588:	2101      	movs	r1, #1
1005a58a:	0409      	lsls	r1, r1, #16
1005a58c:	6041      	str	r1, [r0, #4]
1005a58e:	4770      	bx	lr

1005a590 <llc_subrate_new_sr_base_event_ucfg_weak>:
1005a590:	4770      	bx	lr

1005a592 <llc_subrate_update_cont_counter_ucfg_weak>:
1005a592:	4770      	bx	lr

1005a594 <llc_subrate_offline_processing_ucfg_weak>:
1005a594:	2000      	movs	r0, #0
1005a596:	4770      	bx	lr

1005a598 <llc_convert_sca_to_ppm>:
1005a598:	0740      	lsls	r0, r0, #29
1005a59a:	0f00      	lsrs	r0, r0, #28
1005a59c:	4901      	ldr	r1, [pc, #4]	@ (1005a5a4 <__arm_cp.1_0>)
1005a59e:	5a08      	ldrh	r0, [r1, r0]
1005a5a0:	4770      	bx	lr
1005a5a2:	46c0      	nop			@ (mov r8, r8)

1005a5a4 <__arm_cp.1_0>:
1005a5a4:	10068174 	.word	0x10068174

1005a5a8 <llc_convert_hci_phy_enum_to_hw_phy>:
1005a5a8:	1e80      	subs	r0, r0, #2
1005a5aa:	b2c0      	uxtb	r0, r0
1005a5ac:	2803      	cmp	r0, #3
1005a5ae:	d301      	bcc.n	1005a5b4 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1005a5b0:	2000      	movs	r0, #0
1005a5b2:	e002      	b.n	1005a5ba <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1005a5b4:	00c1      	lsls	r1, r0, #3
1005a5b6:	4802      	ldr	r0, [pc, #8]	@ (1005a5c0 <__arm_cp.4_0>)
1005a5b8:	40c8      	lsrs	r0, r1
1005a5ba:	b2c0      	uxtb	r0, r0
1005a5bc:	4770      	bx	lr
1005a5be:	46c0      	nop			@ (mov r8, r8)

1005a5c0 <__arm_cp.4_0>:
1005a5c0:	00060401 	.word	0x00060401

1005a5c4 <ll_cpe_get_cpid_from_opcode>:
1005a5c4:	282a      	cmp	r0, #42	@ 0x2a
1005a5c6:	d804      	bhi.n	1005a5d2 <ll_cpe_get_cpid_from_opcode+0xe>
1005a5c8:	2103      	movs	r1, #3
1005a5ca:	4341      	muls	r1, r0
1005a5cc:	4802      	ldr	r0, [pc, #8]	@ (1005a5d8 <__arm_cp.0_0>)
1005a5ce:	5c40      	ldrb	r0, [r0, r1]
1005a5d0:	4770      	bx	lr
1005a5d2:	2016      	movs	r0, #22
1005a5d4:	4770      	bx	lr
1005a5d6:	46c0      	nop			@ (mov r8, r8)

1005a5d8 <__arm_cp.0_0>:
1005a5d8:	10068184 	.word	0x10068184

1005a5dc <ll_cpe_set_unknown_rsp_pending>:
1005a5dc:	b5b0      	push	{r4, r5, r7, lr}
1005a5de:	4604      	mov	r4, r0
1005a5e0:	f7fe f9cc 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a5e4:	2100      	movs	r1, #0
1005a5e6:	f7fe fc5f 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005a5ea:	4605      	mov	r5, r0
1005a5ec:	4620      	mov	r0, r4
1005a5ee:	f000 f80d 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005a5f2:	8801      	ldrh	r1, [r0, #0]
1005a5f4:	4a04      	ldr	r2, [pc, #16]	@ (1005a608 <__arm_cp.1_0>)
1005a5f6:	400a      	ands	r2, r1
1005a5f8:	8869      	ldrh	r1, [r5, #2]
1005a5fa:	0609      	lsls	r1, r1, #24
1005a5fc:	0cc9      	lsrs	r1, r1, #19
1005a5fe:	1889      	adds	r1, r1, r2
1005a600:	3110      	adds	r1, #16
1005a602:	8001      	strh	r1, [r0, #0]
1005a604:	bdb0      	pop	{r4, r5, r7, pc}
1005a606:	46c0      	nop			@ (mov r8, r8)

1005a608 <__arm_cp.1_0>:
1005a608:	0000e00f 	.word	0x0000e00f

1005a60c <LL_cpe_get_ctrl_flds_common_p>:
1005a60c:	b580      	push	{r7, lr}
1005a60e:	f7fe f9b5 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a612:	30b0      	adds	r0, #176	@ 0xb0
1005a614:	bd80      	pop	{r7, pc}

1005a616 <LL_cpe_register_cpf>:
1005a616:	b5b0      	push	{r4, r5, r7, lr}
1005a618:	460c      	mov	r4, r1
1005a61a:	0085      	lsls	r5, r0, #2
1005a61c:	f7fe f9a4 	bl	10058968 <llc_conn_get_cntxt_p>
1005a620:	6880      	ldr	r0, [r0, #8]
1005a622:	5144      	str	r4, [r0, r5]
1005a624:	bdb0      	pop	{r4, r5, r7, pc}

1005a626 <LL_cpe_get_active_status>:
1005a626:	b580      	push	{r7, lr}
1005a628:	f000 f804 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a62c:	7801      	ldrb	r1, [r0, #0]
1005a62e:	2001      	movs	r0, #1
1005a630:	4008      	ands	r0, r1
1005a632:	bd80      	pop	{r7, pc}

1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>:
1005a634:	b510      	push	{r4, lr}
1005a636:	460c      	mov	r4, r1
1005a638:	f7fe f9a0 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a63c:	1900      	adds	r0, r0, r4
1005a63e:	30a8      	adds	r0, #168	@ 0xa8
1005a640:	bd10      	pop	{r4, pc}

1005a642 <LL_cpe_set_active>:
1005a642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a644:	461c      	mov	r4, r3
1005a646:	4615      	mov	r5, r2
1005a648:	460e      	mov	r6, r1
1005a64a:	4607      	mov	r7, r0
1005a64c:	f7fe f996 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a650:	1980      	adds	r0, r0, r6
1005a652:	21ac      	movs	r1, #172	@ 0xac
1005a654:	5445      	strb	r5, [r0, r1]
1005a656:	4638      	mov	r0, r7
1005a658:	4631      	mov	r1, r6
1005a65a:	f7ff ffeb 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a65e:	7801      	ldrb	r1, [r0, #0]
1005a660:	22de      	movs	r2, #222	@ 0xde
1005a662:	400a      	ands	r2, r1
1005a664:	07e1      	lsls	r1, r4, #31
1005a666:	0e89      	lsrs	r1, r1, #26
1005a668:	1889      	adds	r1, r1, r2
1005a66a:	1c49      	adds	r1, r1, #1
1005a66c:	7001      	strb	r1, [r0, #0]
1005a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a670 <LL_cpe_clr_active>:
1005a670:	b570      	push	{r4, r5, r6, lr}
1005a672:	4616      	mov	r6, r2
1005a674:	460d      	mov	r5, r1
1005a676:	4604      	mov	r4, r0
1005a678:	f000 f814 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005a67c:	42b0      	cmp	r0, r6
1005a67e:	d110      	bne.n	1005a6a2 <LL_cpe_clr_active+0x32>
1005a680:	4620      	mov	r0, r4
1005a682:	4629      	mov	r1, r5
1005a684:	f7ff ffd6 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a688:	2100      	movs	r1, #0
1005a68a:	7001      	strb	r1, [r0, #0]
1005a68c:	2d01      	cmp	r5, #1
1005a68e:	d001      	beq.n	1005a694 <LL_cpe_clr_active+0x24>
1005a690:	256c      	movs	r5, #108	@ 0x6c
1005a692:	e000      	b.n	1005a696 <LL_cpe_clr_active+0x26>
1005a694:	2570      	movs	r5, #112	@ 0x70
1005a696:	4620      	mov	r0, r4
1005a698:	f7fe f970 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a69c:	217d      	movs	r1, #125	@ 0x7d
1005a69e:	0449      	lsls	r1, r1, #17
1005a6a0:	5141      	str	r1, [r0, r5]
1005a6a2:	bd70      	pop	{r4, r5, r6, pc}

1005a6a4 <ll_cpe_get_cpid_from_sm>:
1005a6a4:	b510      	push	{r4, lr}
1005a6a6:	460c      	mov	r4, r1
1005a6a8:	f7fe f968 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a6ac:	1900      	adds	r0, r0, r4
1005a6ae:	21ac      	movs	r1, #172	@ 0xac
1005a6b0:	5c40      	ldrb	r0, [r0, r1]
1005a6b2:	bd10      	pop	{r4, pc}

1005a6b4 <LL_cpe_set_blocked>:
1005a6b4:	b510      	push	{r4, lr}
1005a6b6:	4614      	mov	r4, r2
1005a6b8:	f7ff ffbc 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a6bc:	2c02      	cmp	r4, #2
1005a6be:	d805      	bhi.n	1005a6cc <LL_cpe_set_blocked+0x18>
1005a6c0:	00e1      	lsls	r1, r4, #3
1005a6c2:	4a03      	ldr	r2, [pc, #12]	@ (1005a6d0 <__arm_cp.9_0>)
1005a6c4:	40ca      	lsrs	r2, r1
1005a6c6:	7801      	ldrb	r1, [r0, #0]
1005a6c8:	4311      	orrs	r1, r2
1005a6ca:	7001      	strb	r1, [r0, #0]
1005a6cc:	bd10      	pop	{r4, pc}
1005a6ce:	46c0      	nop			@ (mov r8, r8)

1005a6d0 <__arm_cp.9_0>:
1005a6d0:	00080402 	.word	0x00080402

1005a6d4 <LL_cpe_set_prepare_tx_pdu>:
1005a6d4:	b580      	push	{r7, lr}
1005a6d6:	f7ff ffad 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a6da:	7801      	ldrb	r1, [r0, #0]
1005a6dc:	2210      	movs	r2, #16
1005a6de:	430a      	orrs	r2, r1
1005a6e0:	7002      	strb	r2, [r0, #0]
1005a6e2:	2015      	movs	r0, #21
1005a6e4:	f006 fd6e 	bl	100611c4 <tsk_notify_idx>
1005a6e8:	f7f5 feef 	bl	100504ca <BLE_STACK_ProcessRequest>
1005a6ec:	bd80      	pop	{r7, pc}

1005a6ee <LL_cpe_get_cntxt>:
1005a6ee:	b510      	push	{r4, lr}
1005a6f0:	460c      	mov	r4, r1
1005a6f2:	f7fe f943 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a6f6:	00a1      	lsls	r1, r4, #2
1005a6f8:	1840      	adds	r0, r0, r1
1005a6fa:	21a0      	movs	r1, #160	@ 0xa0
1005a6fc:	5840      	ldr	r0, [r0, r1]
1005a6fe:	bd10      	pop	{r4, pc}

1005a700 <LL_cpe_set_tx_with_instant>:
1005a700:	b5b0      	push	{r4, r5, r7, lr}
1005a702:	4604      	mov	r4, r0
1005a704:	f7ff ff96 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a708:	4605      	mov	r5, r0
1005a70a:	4620      	mov	r0, r4
1005a70c:	f7fe f936 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a710:	7829      	ldrb	r1, [r5, #0]
1005a712:	2240      	movs	r2, #64	@ 0x40
1005a714:	430a      	orrs	r2, r1
1005a716:	702a      	strb	r2, [r5, #0]
1005a718:	f7fe fe87 	bl	1005942a <llc_conn_set_tx_ctrl_pdu_has_instant>
1005a71c:	bdb0      	pop	{r4, r5, r7, pc}

1005a71e <LL_cpe_set_rx_with_instant>:
1005a71e:	b5b0      	push	{r4, r5, r7, lr}
1005a720:	4604      	mov	r4, r0
1005a722:	f7ff ff87 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a726:	4605      	mov	r5, r0
1005a728:	4620      	mov	r0, r4
1005a72a:	f7fe f927 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a72e:	7829      	ldrb	r1, [r5, #0]
1005a730:	2240      	movs	r2, #64	@ 0x40
1005a732:	430a      	orrs	r2, r1
1005a734:	702a      	strb	r2, [r5, #0]
1005a736:	219a      	movs	r1, #154	@ 0x9a
1005a738:	5a42      	ldrh	r2, [r0, r1]
1005a73a:	2301      	movs	r3, #1
1005a73c:	4313      	orrs	r3, r2
1005a73e:	5243      	strh	r3, [r0, r1]
1005a740:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005a744 <LL_cpe_engine>:
1005a744:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a746:	b08d      	sub	sp, #52	@ 0x34
1005a748:	4604      	mov	r4, r0
1005a74a:	a80c      	add	r0, sp, #48	@ 0x30
1005a74c:	2700      	movs	r7, #0
1005a74e:	8007      	strh	r7, [r0, #0]
1005a750:	4620      	mov	r0, r4
1005a752:	f7fe f913 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a756:	21ff      	movs	r1, #255	@ 0xff
1005a758:	3112      	adds	r1, #18
1005a75a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a75c:	5c40      	ldrb	r0, [r0, r1]
1005a75e:	2800      	cmp	r0, #0
1005a760:	9406      	str	r4, [sp, #24]
1005a762:	d100      	bne.n	1005a766 <LL_cpe_engine+0x22>
1005a764:	e083      	b.n	1005a86e <LL_cpe_engine+0x12a>
1005a766:	4620      	mov	r0, r4
1005a768:	f000 fbc2 	bl	1005aef0 <ll_cpe_set_active>
1005a76c:	4620      	mov	r0, r4
1005a76e:	f7ff ff4d 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005a772:	4606      	mov	r6, r0
1005a774:	4620      	mov	r0, r4
1005a776:	f7fe f901 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a77a:	4604      	mov	r4, r0
1005a77c:	8835      	ldrh	r5, [r6, #0]
1005a77e:	f7fe fbc0 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
1005a782:	0729      	lsls	r1, r5, #28
1005a784:	d509      	bpl.n	1005a79a <LL_cpe_engine+0x56>
1005a786:	2803      	cmp	r0, #3
1005a788:	d107      	bne.n	1005a79a <LL_cpe_engine+0x56>
1005a78a:	2100      	movs	r1, #0
1005a78c:	4620      	mov	r0, r4
1005a78e:	f7fe fe53 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
1005a792:	8830      	ldrh	r0, [r6, #0]
1005a794:	2108      	movs	r1, #8
1005a796:	4388      	bics	r0, r1
1005a798:	8030      	strh	r0, [r6, #0]
1005a79a:	9806      	ldr	r0, [sp, #24]
1005a79c:	f000 fbb0 	bl	1005af00 <ll_cpe_check_rx_pdu_can_be_processed>
1005a7a0:	2800      	cmp	r0, #0
1005a7a2:	d100      	bne.n	1005a7a6 <LL_cpe_engine+0x62>
1005a7a4:	e12e      	b.n	1005aa04 <LL_cpe_engine+0x2c0>
1005a7a6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a7a8:	4606      	mov	r6, r0
1005a7aa:	362c      	adds	r6, #44	@ 0x2c
1005a7ac:	4639      	mov	r1, r7
1005a7ae:	f7fe fb7b 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005a7b2:	7885      	ldrb	r5, [r0, #2]
1005a7b4:	9005      	str	r0, [sp, #20]
1005a7b6:	7840      	ldrb	r0, [r0, #1]
1005a7b8:	9008      	str	r0, [sp, #32]
1005a7ba:	2101      	movs	r1, #1
1005a7bc:	9c06      	ldr	r4, [sp, #24]
1005a7be:	4620      	mov	r0, r4
1005a7c0:	9104      	str	r1, [sp, #16]
1005a7c2:	463a      	mov	r2, r7
1005a7c4:	f000 fbad 	bl	1005af22 <ll_cpe_get_blocked_status>
1005a7c8:	9009      	str	r0, [sp, #36]	@ 0x24
1005a7ca:	4620      	mov	r0, r4
1005a7cc:	4639      	mov	r1, r7
1005a7ce:	463a      	mov	r2, r7
1005a7d0:	f000 fba7 	bl	1005af22 <ll_cpe_get_blocked_status>
1005a7d4:	4603      	mov	r3, r0
1005a7d6:	9607      	str	r6, [sp, #28]
1005a7d8:	7830      	ldrb	r0, [r6, #0]
1005a7da:	1e84      	subs	r4, r0, #2
1005a7dc:	1e61      	subs	r1, r4, #1
1005a7de:	4620      	mov	r0, r4
1005a7e0:	4188      	sbcs	r0, r1
1005a7e2:	950a      	str	r5, [sp, #40]	@ 0x28
1005a7e4:	2d2a      	cmp	r5, #42	@ 0x2a
1005a7e6:	d900      	bls.n	1005a7ea <LL_cpe_engine+0xa6>
1005a7e8:	e068      	b.n	1005a8bc <LL_cpe_engine+0x178>
1005a7ea:	2103      	movs	r1, #3
1005a7ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005a7ee:	4351      	muls	r1, r2
1005a7f0:	4aa1      	ldr	r2, [pc, #644]	@ (1005aa78 <__arm_cp.14_7>)
1005a7f2:	1851      	adds	r1, r2, r1
1005a7f4:	7849      	ldrb	r1, [r1, #1]
1005a7f6:	9a08      	ldr	r2, [sp, #32]
1005a7f8:	4291      	cmp	r1, r2
1005a7fa:	d000      	beq.n	1005a7fe <LL_cpe_engine+0xba>
1005a7fc:	e05e      	b.n	1005a8bc <LL_cpe_engine+0x178>
1005a7fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a800:	292a      	cmp	r1, #42	@ 0x2a
1005a802:	d900      	bls.n	1005a806 <LL_cpe_engine+0xc2>
1005a804:	e05a      	b.n	1005a8bc <LL_cpe_engine+0x178>
1005a806:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a808:	0049      	lsls	r1, r1, #1
1005a80a:	46c0      	nop			@ (mov r8, r8)
1005a80c:	4479      	add	r1, pc
1005a80e:	8889      	ldrh	r1, [r1, #4]
1005a810:	0049      	lsls	r1, r1, #1
1005a812:	448f      	add	pc, r1
1005a814:	00540054 	.word	0x00540054
1005a818:	0054002a 	.word	0x0054002a
1005a81c:	030e030e 	.word	0x030e030e
1005a820:	002a002a 	.word	0x002a002a
1005a824:	002a0054 	.word	0x002a0054
1005a828:	002a0054 	.word	0x002a0054
1005a82c:	002a002a 	.word	0x002a002a
1005a830:	0053030e 	.word	0x0053030e
1005a834:	002a0053 	.word	0x002a0053
1005a838:	002a002a 	.word	0x002a002a
1005a83c:	03150315 	.word	0x03150315
1005a840:	03600321 	.word	0x03600321
1005a844:	00530325 	.word	0x00530325
1005a848:	03190319 	.word	0x03190319
1005a84c:	002a0329 	.word	0x002a0329
1005a850:	031d002a 	.word	0x031d002a
1005a854:	031d032d 	.word	0x031d032d
1005a858:	03110333 	.word	0x03110333
1005a85c:	03110311 	.word	0x03110311
1005a860:	033d0337 	.word	0x033d0337
1005a864:	034c0341 	.word	0x034c0341
1005a868:	0352      	.short	0x0352
1005a86a:	9804      	ldr	r0, [sp, #16]
1005a86c:	e027      	b.n	1005a8be <LL_cpe_engine+0x17a>
1005a86e:	4620      	mov	r0, r4
1005a870:	f7fe f884 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005a874:	4605      	mov	r5, r0
1005a876:	202d      	movs	r0, #45	@ 0x2d
1005a878:	5c28      	ldrb	r0, [r5, r0]
1005a87a:	2800      	cmp	r0, #0
1005a87c:	d100      	bne.n	1005a880 <LL_cpe_engine+0x13c>
1005a87e:	e09b      	b.n	1005a9b8 <LL_cpe_engine+0x274>
1005a880:	900a      	str	r0, [sp, #40]	@ 0x28
1005a882:	462f      	mov	r7, r5
1005a884:	372c      	adds	r7, #44	@ 0x2c
1005a886:	462e      	mov	r6, r5
1005a888:	36d8      	adds	r6, #216	@ 0xd8
1005a88a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1005a88c:	463c      	mov	r4, r7
1005a88e:	3454      	adds	r4, #84	@ 0x54
1005a890:	7d79      	ldrb	r1, [r7, #21]
1005a892:	910b      	str	r1, [sp, #44]	@ 0x2c
1005a894:	2800      	cmp	r0, #0
1005a896:	d001      	beq.n	1005a89c <LL_cpe_engine+0x158>
1005a898:	f7f8 fee2 	bl	10053660 <Acl_Tx_Cmpl_Pkt_Handler>
1005a89c:	4620      	mov	r0, r4
1005a89e:	f006 fe83 	bl	100615a8 <ACL_list_init>
1005a8a2:	ce03      	ldmia	r6!, {r0, r1}
1005a8a4:	f7fe fba8 	bl	10058ff8 <llc_conn_list_remove_address>
1005a8a8:	4874      	ldr	r0, [pc, #464]	@ (1005aa7c <__arm_cp.14_8>)
1005a8aa:	6800      	ldr	r0, [r0, #0]
1005a8ac:	212c      	movs	r1, #44	@ 0x2c
1005a8ae:	5c40      	ldrb	r0, [r0, r1]
1005a8b0:	07c0      	lsls	r0, r0, #31
1005a8b2:	0ec1      	lsrs	r1, r0, #27
1005a8b4:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
1005a8b6:	d148      	bne.n	1005a94a <LL_cpe_engine+0x206>
1005a8b8:	2205      	movs	r2, #5
1005a8ba:	e04d      	b.n	1005a958 <LL_cpe_engine+0x214>
1005a8bc:	4638      	mov	r0, r7
1005a8be:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a8c0:	4319      	orrs	r1, r3
1005a8c2:	d000      	beq.n	1005a8c6 <LL_cpe_engine+0x182>
1005a8c4:	e09e      	b.n	1005aa04 <LL_cpe_engine+0x2c0>
1005a8c6:	2800      	cmp	r0, #0
1005a8c8:	d07d      	beq.n	1005a9c6 <LL_cpe_engine+0x282>
1005a8ca:	9805      	ldr	r0, [sp, #20]
1005a8cc:	78c6      	ldrb	r6, [r0, #3]
1005a8ce:	2401      	movs	r4, #1
1005a8d0:	9f06      	ldr	r7, [sp, #24]
1005a8d2:	4638      	mov	r0, r7
1005a8d4:	4621      	mov	r1, r4
1005a8d6:	f000 fb3d 	bl	1005af54 <ll_cpe_get_expected_opcode>
1005a8da:	9005      	str	r0, [sp, #20]
1005a8dc:	4638      	mov	r0, r7
1005a8de:	4621      	mov	r1, r4
1005a8e0:	f000 fb40 	bl	1005af64 <ll_cpe_get_state>
1005a8e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005a8e6:	9004      	str	r0, [sp, #16]
1005a8e8:	4628      	mov	r0, r5
1005a8ea:	9603      	str	r6, [sp, #12]
1005a8ec:	4631      	mov	r1, r6
1005a8ee:	463a      	mov	r2, r7
1005a8f0:	9409      	str	r4, [sp, #36]	@ 0x24
1005a8f2:	4623      	mov	r3, r4
1005a8f4:	f000 fb3e 	bl	1005af74 <LL_cpe_rxctrlpdu_checkreject>
1005a8f8:	1e41      	subs	r1, r0, #1
1005a8fa:	4188      	sbcs	r0, r1
1005a8fc:	9905      	ldr	r1, [sp, #20]
1005a8fe:	1b49      	subs	r1, r1, r5
1005a900:	424a      	negs	r2, r1
1005a902:	414a      	adcs	r2, r1
1005a904:	4302      	orrs	r2, r0
1005a906:	9804      	ldr	r0, [sp, #16]
1005a908:	1f00      	subs	r0, r0, #4
1005a90a:	4245      	negs	r5, r0
1005a90c:	4145      	adcs	r5, r0
1005a90e:	4015      	ands	r5, r2
1005a910:	2400      	movs	r4, #0
1005a912:	4638      	mov	r0, r7
1005a914:	4621      	mov	r1, r4
1005a916:	f000 fb1d 	bl	1005af54 <ll_cpe_get_expected_opcode>
1005a91a:	4606      	mov	r6, r0
1005a91c:	9807      	ldr	r0, [sp, #28]
1005a91e:	7800      	ldrb	r0, [r0, #0]
1005a920:	9007      	str	r0, [sp, #28]
1005a922:	4638      	mov	r0, r7
1005a924:	4621      	mov	r1, r4
1005a926:	f000 fb1d 	bl	1005af64 <ll_cpe_get_state>
1005a92a:	4607      	mov	r7, r0
1005a92c:	2801      	cmp	r0, #1
1005a92e:	d14e      	bne.n	1005a9ce <LL_cpe_engine+0x28a>
1005a930:	9807      	ldr	r0, [sp, #28]
1005a932:	1e81      	subs	r1, r0, #2
1005a934:	1e48      	subs	r0, r1, #1
1005a936:	4181      	sbcs	r1, r0
1005a938:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a93a:	4604      	mov	r4, r0
1005a93c:	9a08      	ldr	r2, [sp, #32]
1005a93e:	f000 fb41 	bl	1005afc4 <valid_first_opcode>
1005a942:	2800      	cmp	r0, #0
1005a944:	d044      	beq.n	1005a9d0 <LL_cpe_engine+0x28c>
1005a946:	2501      	movs	r5, #1
1005a948:	e042      	b.n	1005a9d0 <LL_cpe_engine+0x28c>
1005a94a:	484d      	ldr	r0, [pc, #308]	@ (1005aa80 <__arm_cp.14_9>)
1005a94c:	6800      	ldr	r0, [r0, #0]
1005a94e:	2236      	movs	r2, #54	@ 0x36
1005a950:	5c80      	ldrb	r0, [r0, r2]
1005a952:	06c0      	lsls	r0, r0, #27
1005a954:	d51d      	bpl.n	1005a992 <LL_cpe_engine+0x24e>
1005a956:	2215      	movs	r2, #21
1005a958:	206f      	movs	r0, #111	@ 0x6f
1005a95a:	43c0      	mvns	r0, r0
1005a95c:	4041      	eors	r1, r0
1005a95e:	4849      	ldr	r0, [pc, #292]	@ (1005aa84 <__arm_cp.14_10>)
1005a960:	6800      	ldr	r0, [r0, #0]
1005a962:	6900      	ldr	r0, [r0, #16]
1005a964:	b2ce      	uxtb	r6, r1
1005a966:	2302      	movs	r3, #2
1005a968:	4631      	mov	r1, r6
1005a96a:	f7f9 f8e1 	bl	10053b30 <aci_event_fifo_push_header>
1005a96e:	2800      	cmp	r0, #0
1005a970:	d00f      	beq.n	1005a992 <LL_cpe_engine+0x24e>
1005a972:	4601      	mov	r1, r0
1005a974:	7204      	strb	r4, [r0, #8]
1005a976:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a978:	7288      	strb	r0, [r1, #10]
1005a97a:	2000      	movs	r0, #0
1005a97c:	71c8      	strb	r0, [r1, #7]
1005a97e:	2004      	movs	r0, #4
1005a980:	7188      	strb	r0, [r1, #6]
1005a982:	2205      	movs	r2, #5
1005a984:	714a      	strb	r2, [r1, #5]
1005a986:	7108      	strb	r0, [r1, #4]
1005a988:	0a20      	lsrs	r0, r4, #8
1005a98a:	7248      	strb	r0, [r1, #9]
1005a98c:	4630      	mov	r0, r6
1005a98e:	f7f9 f96c 	bl	10053c6a <aci_event_fifo_push>
1005a992:	4628      	mov	r0, r5
1005a994:	f001 ffa4 	bl	1005c8e0 <LLC_authenticated_payload_timeout_reset>
1005a998:	9c06      	ldr	r4, [sp, #24]
1005a99a:	4620      	mov	r0, r4
1005a99c:	f000 fc18 	bl	1005b1d0 <ll_cpe_reset_state_machines>
1005a9a0:	4620      	mov	r0, r4
1005a9a2:	f7fe f8bb 	bl	10058b1c <llc_conn_per_init>
1005a9a6:	4620      	mov	r0, r4
1005a9a8:	f7ff fd9c 	bl	1005a4e4 <llc_pscan_wr_check_pawr_active_ucfg_weak>
1005a9ac:	2800      	cmp	r0, #0
1005a9ae:	d003      	beq.n	1005a9b8 <LL_cpe_engine+0x274>
1005a9b0:	2001      	movs	r0, #1
1005a9b2:	7038      	strb	r0, [r7, #0]
1005a9b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a9b6:	7578      	strb	r0, [r7, #21]
1005a9b8:	a80c      	add	r0, sp, #48	@ 0x30
1005a9ba:	7841      	ldrb	r1, [r0, #1]
1005a9bc:	2902      	cmp	r1, #2
1005a9be:	d000      	beq.n	1005a9c2 <LL_cpe_engine+0x27e>
1005a9c0:	e232      	b.n	1005ae28 <__arm_cp.14_10+0x3a4>
1005a9c2:	2001      	movs	r0, #1
1005a9c4:	e233      	b.n	1005ae2e <__arm_cp.14_10+0x3aa>
1005a9c6:	9806      	ldr	r0, [sp, #24]
1005a9c8:	f7ff fe08 	bl	1005a5dc <ll_cpe_set_unknown_rsp_pending>
1005a9cc:	e017      	b.n	1005a9fe <LL_cpe_engine+0x2ba>
1005a9ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005a9d0:	9903      	ldr	r1, [sp, #12]
1005a9d2:	2204      	movs	r2, #4
1005a9d4:	407a      	eors	r2, r7
1005a9d6:	4620      	mov	r0, r4
1005a9d8:	4066      	eors	r6, r4
1005a9da:	4316      	orrs	r6, r2
1005a9dc:	4274      	negs	r4, r6
1005a9de:	4174      	adcs	r4, r6
1005a9e0:	2f04      	cmp	r7, #4
1005a9e2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005a9e4:	d000      	beq.n	1005a9e8 <LL_cpe_engine+0x2a4>
1005a9e6:	4626      	mov	r6, r4
1005a9e8:	2300      	movs	r3, #0
1005a9ea:	9a06      	ldr	r2, [sp, #24]
1005a9ec:	f000 fac2 	bl	1005af74 <LL_cpe_rxctrlpdu_checkreject>
1005a9f0:	2800      	cmp	r0, #0
1005a9f2:	d100      	bne.n	1005a9f6 <LL_cpe_engine+0x2b2>
1005a9f4:	4626      	mov	r6, r4
1005a9f6:	2e01      	cmp	r6, #1
1005a9f8:	d004      	beq.n	1005aa04 <LL_cpe_engine+0x2c0>
1005a9fa:	2d00      	cmp	r5, #0
1005a9fc:	d102      	bne.n	1005aa04 <LL_cpe_engine+0x2c0>
1005a9fe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005aa00:	f7fe f998 	bl	10058d34 <llc_conn_clr_rx_ctrl_pdu_full>
1005aa04:	2000      	movs	r0, #0
1005aa06:	9005      	str	r0, [sp, #20]
1005aa08:	43c0      	mvns	r0, r0
1005aa0a:	9f06      	ldr	r7, [sp, #24]
1005aa0c:	2801      	cmp	r0, #1
1005aa0e:	d100      	bne.n	1005aa12 <LL_cpe_engine+0x2ce>
1005aa10:	e1ff      	b.n	1005ae12 <__arm_cp.14_10+0x38e>
1005aa12:	900a      	str	r0, [sp, #40]	@ 0x28
1005aa14:	1c40      	adds	r0, r0, #1
1005aa16:	900b      	str	r0, [sp, #44]	@ 0x2c
1005aa18:	4638      	mov	r0, r7
1005aa1a:	f000 fc5a 	bl	1005b2d2 <ll_cpe_get_active>
1005aa1e:	2800      	cmp	r0, #0
1005aa20:	d017      	beq.n	1005aa52 <LL_cpe_engine+0x30e>
1005aa22:	4638      	mov	r0, r7
1005aa24:	f7ff fdf2 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005aa28:	4605      	mov	r5, r0
1005aa2a:	8800      	ldrh	r0, [r0, #0]
1005aa2c:	0780      	lsls	r0, r0, #30
1005aa2e:	d500      	bpl.n	1005aa32 <LL_cpe_engine+0x2ee>
1005aa30:	e1ed      	b.n	1005ae0e <__arm_cp.14_10+0x38a>
1005aa32:	4638      	mov	r0, r7
1005aa34:	f7fd ffa2 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005aa38:	24b2      	movs	r4, #178	@ 0xb2
1005aa3a:	5d06      	ldrb	r6, [r0, r4]
1005aa3c:	2e00      	cmp	r6, #0
1005aa3e:	d008      	beq.n	1005aa52 <LL_cpe_engine+0x30e>
1005aa40:	4638      	mov	r0, r7
1005aa42:	f7fd ff9b 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005aa46:	9009      	str	r0, [sp, #36]	@ 0x24
1005aa48:	f7fe fa5b 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
1005aa4c:	2800      	cmp	r0, #0
1005aa4e:	d100      	bne.n	1005aa52 <LL_cpe_engine+0x30e>
1005aa50:	e0e1      	b.n	1005ac16 <__arm_cp.14_10+0x192>
1005aa52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005aa54:	b2c6      	uxtb	r6, r0
1005aa56:	4638      	mov	r0, r7
1005aa58:	4631      	mov	r1, r6
1005aa5a:	f000 fa83 	bl	1005af64 <ll_cpe_get_state>
1005aa5e:	4605      	mov	r5, r0
1005aa60:	2805      	cmp	r0, #5
1005aa62:	9608      	str	r6, [sp, #32]
1005aa64:	9009      	str	r0, [sp, #36]	@ 0x24
1005aa66:	d816      	bhi.n	1005aa96 <__arm_cp.14_10+0x12>
1005aa68:	447d      	add	r5, pc
1005aa6a:	792d      	ldrb	r5, [r5, #4]
1005aa6c:	006d      	lsls	r5, r5, #1
1005aa6e:	44af      	add	pc, r5
1005aa70:	6544140b 	.word	0x6544140b
1005aa74:	46c0b799 	.word	0x46c0b799

1005aa78 <__arm_cp.14_7>:
1005aa78:	10068184 	.word	0x10068184

1005aa7c <__arm_cp.14_8>:
1005aa7c:	20002414 	.word	0x20002414

1005aa80 <__arm_cp.14_9>:
1005aa80:	20002468 	.word	0x20002468

1005aa84 <__arm_cp.14_10>:
1005aa84:	20002418 	.word	0x20002418
1005aa88:	4638      	mov	r0, r7
1005aa8a:	f000 fc22 	bl	1005b2d2 <ll_cpe_get_active>
1005aa8e:	4604      	mov	r4, r0
1005aa90:	1e40      	subs	r0, r0, #1
1005aa92:	4184      	sbcs	r4, r0
1005aa94:	e180      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005aa96:	462c      	mov	r4, r5
1005aa98:	e17e      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005aa9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005aa9c:	2800      	cmp	r0, #0
1005aa9e:	d100      	bne.n	1005aaa2 <__arm_cp.14_10+0x1e>
1005aaa0:	e0df      	b.n	1005ac62 <__arm_cp.14_10+0x1de>
1005aaa2:	4638      	mov	r0, r7
1005aaa4:	f000 fa2c 	bl	1005af00 <ll_cpe_check_rx_pdu_can_be_processed>
1005aaa8:	2800      	cmp	r0, #0
1005aaaa:	d100      	bne.n	1005aaae <__arm_cp.14_10+0x2a>
1005aaac:	e0d7      	b.n	1005ac5e <__arm_cp.14_10+0x1da>
1005aaae:	2501      	movs	r5, #1
1005aab0:	4638      	mov	r0, r7
1005aab2:	4629      	mov	r1, r5
1005aab4:	f000 fa56 	bl	1005af64 <ll_cpe_get_state>
1005aab8:	4604      	mov	r4, r0
1005aaba:	4638      	mov	r0, r7
1005aabc:	f000 fc10 	bl	1005b2e0 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005aac0:	2c04      	cmp	r4, #4
1005aac2:	d103      	bne.n	1005aacc <__arm_cp.14_10+0x48>
1005aac4:	462c      	mov	r4, r5
1005aac6:	2800      	cmp	r0, #0
1005aac8:	d100      	bne.n	1005aacc <__arm_cp.14_10+0x48>
1005aaca:	e165      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005aacc:	2100      	movs	r1, #0
1005aace:	2401      	movs	r4, #1
1005aad0:	4638      	mov	r0, r7
1005aad2:	4622      	mov	r2, r4
1005aad4:	f000 fc0c 	bl	1005b2f0 <ll_cpe_process_rx_pdu>
1005aad8:	2800      	cmp	r0, #0
1005aada:	d100      	bne.n	1005aade <__arm_cp.14_10+0x5a>
1005aadc:	e153      	b.n	1005ad86 <__arm_cp.14_10+0x302>
1005aade:	2100      	movs	r1, #0
1005aae0:	4638      	mov	r0, r7
1005aae2:	f7ff fda0 	bl	1005a626 <LL_cpe_get_active_status>
1005aae6:	2800      	cmp	r0, #0
1005aae8:	d100      	bne.n	1005aaec <__arm_cp.14_10+0x68>
1005aaea:	e152      	b.n	1005ad92 <__arm_cp.14_10+0x30e>
1005aaec:	2100      	movs	r1, #0
1005aaee:	4638      	mov	r0, r7
1005aaf0:	f000 fcf4 	bl	1005b4dc <ll_cpe_get_instant_active>
1005aaf4:	2800      	cmp	r0, #0
1005aaf6:	d171      	bne.n	1005abdc <__arm_cp.14_10+0x158>
1005aaf8:	e143      	b.n	1005ad82 <__arm_cp.14_10+0x2fe>
1005aafa:	4638      	mov	r0, r7
1005aafc:	f7fd ff3e 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ab00:	4604      	mov	r4, r0
1005ab02:	4638      	mov	r0, r7
1005ab04:	4631      	mov	r1, r6
1005ab06:	f7ff fd95 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005ab0a:	7800      	ldrb	r0, [r0, #0]
1005ab0c:	06c7      	lsls	r7, r0, #27
1005ab0e:	9407      	str	r4, [sp, #28]
1005ab10:	4620      	mov	r0, r4
1005ab12:	f7fe f9f6 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
1005ab16:	2402      	movs	r4, #2
1005ab18:	2f00      	cmp	r7, #0
1005ab1a:	d400      	bmi.n	1005ab1e <__arm_cp.14_10+0x9a>
1005ab1c:	e09d      	b.n	1005ac5a <__arm_cp.14_10+0x1d6>
1005ab1e:	2800      	cmp	r0, #0
1005ab20:	d000      	beq.n	1005ab24 <__arm_cp.14_10+0xa0>
1005ab22:	e09a      	b.n	1005ac5a <__arm_cp.14_10+0x1d6>
1005ab24:	2701      	movs	r7, #1
1005ab26:	9d06      	ldr	r5, [sp, #24]
1005ab28:	4628      	mov	r0, r5
1005ab2a:	4631      	mov	r1, r6
1005ab2c:	463a      	mov	r2, r7
1005ab2e:	f000 f9f8 	bl	1005af22 <ll_cpe_get_blocked_status>
1005ab32:	2800      	cmp	r0, #0
1005ab34:	d100      	bne.n	1005ab38 <__arm_cp.14_10+0xb4>
1005ab36:	e0b6      	b.n	1005aca6 <__arm_cp.14_10+0x222>
1005ab38:	462f      	mov	r7, r5
1005ab3a:	e12d      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ab3c:	4638      	mov	r0, r7
1005ab3e:	f7fd ff1d 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ab42:	4605      	mov	r5, r0
1005ab44:	f7fe f9dd 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
1005ab48:	2803      	cmp	r0, #3
1005ab4a:	d000      	beq.n	1005ab4e <__arm_cp.14_10+0xca>
1005ab4c:	e0ed      	b.n	1005ad2a <__arm_cp.14_10+0x2a6>
1005ab4e:	4638      	mov	r0, r7
1005ab50:	4631      	mov	r1, r6
1005ab52:	f7ff fda7 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005ab56:	f000 fcff 	bl	1005b558 <LL_cpe_get_cpf>
1005ab5a:	4604      	mov	r4, r0
1005ab5c:	2600      	movs	r6, #0
1005ab5e:	4638      	mov	r0, r7
1005ab60:	9908      	ldr	r1, [sp, #32]
1005ab62:	4632      	mov	r2, r6
1005ab64:	4633      	mov	r3, r6
1005ab66:	47a0      	blx	r4
1005ab68:	4602      	mov	r2, r0
1005ab6a:	4638      	mov	r0, r7
1005ab6c:	9908      	ldr	r1, [sp, #32]
1005ab6e:	f000 fd00 	bl	1005b572 <ll_cpe_set_expected_opcode>
1005ab72:	4628      	mov	r0, r5
1005ab74:	4631      	mov	r1, r6
1005ab76:	9c08      	ldr	r4, [sp, #32]
1005ab78:	f7fe fc5e 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
1005ab7c:	4638      	mov	r0, r7
1005ab7e:	4621      	mov	r1, r4
1005ab80:	f7ff fd51 	bl	1005a626 <LL_cpe_get_active_status>
1005ab84:	2800      	cmp	r0, #0
1005ab86:	d06a      	beq.n	1005ac5e <__arm_cp.14_10+0x1da>
1005ab88:	4638      	mov	r0, r7
1005ab8a:	4621      	mov	r1, r4
1005ab8c:	f000 fca6 	bl	1005b4dc <ll_cpe_get_instant_active>
1005ab90:	2800      	cmp	r0, #0
1005ab92:	d160      	bne.n	1005ac56 <__arm_cp.14_10+0x1d2>
1005ab94:	4638      	mov	r0, r7
1005ab96:	4621      	mov	r1, r4
1005ab98:	f000 f9dc 	bl	1005af54 <ll_cpe_get_expected_opcode>
1005ab9c:	28ff      	cmp	r0, #255	@ 0xff
1005ab9e:	d068      	beq.n	1005ac72 <__arm_cp.14_10+0x1ee>
1005aba0:	2404      	movs	r4, #4
1005aba2:	e0f9      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005aba4:	4638      	mov	r0, r7
1005aba6:	f000 f9ab 	bl	1005af00 <ll_cpe_check_rx_pdu_can_be_processed>
1005abaa:	2404      	movs	r4, #4
1005abac:	2800      	cmp	r0, #0
1005abae:	d100      	bne.n	1005abb2 <__arm_cp.14_10+0x12e>
1005abb0:	e0f2      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005abb2:	2203      	movs	r2, #3
1005abb4:	4638      	mov	r0, r7
1005abb6:	4631      	mov	r1, r6
1005abb8:	f000 fb9a 	bl	1005b2f0 <ll_cpe_process_rx_pdu>
1005abbc:	2800      	cmp	r0, #0
1005abbe:	d05a      	beq.n	1005ac76 <__arm_cp.14_10+0x1f2>
1005abc0:	4638      	mov	r0, r7
1005abc2:	4631      	mov	r1, r6
1005abc4:	f7ff fd2f 	bl	1005a626 <LL_cpe_get_active_status>
1005abc8:	2800      	cmp	r0, #0
1005abca:	d100      	bne.n	1005abce <__arm_cp.14_10+0x14a>
1005abcc:	e0bb      	b.n	1005ad46 <__arm_cp.14_10+0x2c2>
1005abce:	4638      	mov	r0, r7
1005abd0:	4631      	mov	r1, r6
1005abd2:	f000 fc83 	bl	1005b4dc <ll_cpe_get_instant_active>
1005abd6:	2800      	cmp	r0, #0
1005abd8:	d100      	bne.n	1005abdc <__arm_cp.14_10+0x158>
1005abda:	e0b6      	b.n	1005ad4a <__arm_cp.14_10+0x2c6>
1005abdc:	2405      	movs	r4, #5
1005abde:	e0d8      	b.n	1005ad92 <__arm_cp.14_10+0x30e>
1005abe0:	4638      	mov	r0, r7
1005abe2:	f7fd fecb 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005abe6:	4604      	mov	r4, r0
1005abe8:	f7fe f974 	bl	10058ed4 <llc_conn_get_instant_reached>
1005abec:	2801      	cmp	r0, #1
1005abee:	d132      	bne.n	1005ac56 <__arm_cp.14_10+0x1d2>
1005abf0:	4638      	mov	r0, r7
1005abf2:	4631      	mov	r1, r6
1005abf4:	f7ff fd56 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005abf8:	f000 fcae 	bl	1005b558 <LL_cpe_get_cpf>
1005abfc:	2800      	cmp	r0, #0
1005abfe:	9407      	str	r4, [sp, #28]
1005ac00:	d100      	bne.n	1005ac04 <__arm_cp.14_10+0x180>
1005ac02:	e094      	b.n	1005ad2e <__arm_cp.14_10+0x2aa>
1005ac04:	4605      	mov	r5, r0
1005ac06:	4620      	mov	r0, r4
1005ac08:	f7fe f95f 	bl	10058eca <llc_conn_get_instant_passed>
1005ac0c:	2801      	cmp	r0, #1
1005ac0e:	d100      	bne.n	1005ac12 <__arm_cp.14_10+0x18e>
1005ac10:	e08f      	b.n	1005ad32 <__arm_cp.14_10+0x2ae>
1005ac12:	2207      	movs	r2, #7
1005ac14:	e08e      	b.n	1005ad34 <__arm_cp.14_10+0x2b0>
1005ac16:	2101      	movs	r1, #1
1005ac18:	910a      	str	r1, [sp, #40]	@ 0x28
1005ac1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ac1c:	f7fe f944 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005ac20:	49b2      	ldr	r1, [pc, #712]	@ (1005aeec <__arm_cp.14_1>)
1005ac22:	8001      	strh	r1, [r0, #0]
1005ac24:	0671      	lsls	r1, r6, #25
1005ac26:	0c49      	lsrs	r1, r1, #17
1005ac28:	1c89      	adds	r1, r1, #2
1005ac2a:	8041      	strh	r1, [r0, #2]
1005ac2c:	8828      	ldrh	r0, [r5, #0]
1005ac2e:	2102      	movs	r1, #2
1005ac30:	4301      	orrs	r1, r0
1005ac32:	8029      	strh	r1, [r5, #0]
1005ac34:	4638      	mov	r0, r7
1005ac36:	f7fd fea1 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ac3a:	9d05      	ldr	r5, [sp, #20]
1005ac3c:	5505      	strb	r5, [r0, r4]
1005ac3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ac40:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005ac42:	4621      	mov	r1, r4
1005ac44:	f7fe fbf8 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
1005ac48:	2204      	movs	r2, #4
1005ac4a:	4638      	mov	r0, r7
1005ac4c:	4621      	mov	r1, r4
1005ac4e:	462b      	mov	r3, r5
1005ac50:	f7ff fcf7 	bl	1005a642 <LL_cpe_set_active>
1005ac54:	e0db      	b.n	1005ae0e <__arm_cp.14_10+0x38a>
1005ac56:	2405      	movs	r4, #5
1005ac58:	e09e      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ac5a:	9f06      	ldr	r7, [sp, #24]
1005ac5c:	e09c      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ac5e:	2401      	movs	r4, #1
1005ac60:	e09a      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ac62:	2401      	movs	r4, #1
1005ac64:	4638      	mov	r0, r7
1005ac66:	4621      	mov	r1, r4
1005ac68:	f7ff fcdd 	bl	1005a626 <LL_cpe_get_active_status>
1005ac6c:	2800      	cmp	r0, #0
1005ac6e:	d100      	bne.n	1005ac72 <__arm_cp.14_10+0x1ee>
1005ac70:	e092      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ac72:	2402      	movs	r4, #2
1005ac74:	e090      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ac76:	4626      	mov	r6, r4
1005ac78:	4638      	mov	r0, r7
1005ac7a:	f000 fb31 	bl	1005b2e0 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005ac7e:	4604      	mov	r4, r0
1005ac80:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ac82:	4241      	negs	r1, r0
1005ac84:	4141      	adcs	r1, r0
1005ac86:	4638      	mov	r0, r7
1005ac88:	f000 f96c 	bl	1005af64 <ll_cpe_get_state>
1005ac8c:	2c00      	cmp	r4, #0
1005ac8e:	d064      	beq.n	1005ad5a <__arm_cp.14_10+0x2d6>
1005ac90:	4638      	mov	r0, r7
1005ac92:	f7fd fe73 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ac96:	2100      	movs	r1, #0
1005ac98:	f7fe f906 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005ac9c:	4638      	mov	r0, r7
1005ac9e:	f000 fc24 	bl	1005b4ea <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005aca2:	4634      	mov	r4, r6
1005aca4:	e078      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005aca6:	9704      	str	r7, [sp, #16]
1005aca8:	22ff      	movs	r2, #255	@ 0xff
1005acaa:	4628      	mov	r0, r5
1005acac:	4631      	mov	r1, r6
1005acae:	f000 fc24 	bl	1005b4fa <ll_cpe_check_instant_blocked>
1005acb2:	2800      	cmp	r0, #0
1005acb4:	462f      	mov	r7, r5
1005acb6:	d16f      	bne.n	1005ad98 <__arm_cp.14_10+0x314>
1005acb8:	4638      	mov	r0, r7
1005acba:	4631      	mov	r1, r6
1005acbc:	f7ff fcf2 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005acc0:	f000 fc4a 	bl	1005b558 <LL_cpe_get_cpf>
1005acc4:	4604      	mov	r4, r0
1005acc6:	9807      	ldr	r0, [sp, #28]
1005acc8:	9d04      	ldr	r5, [sp, #16]
1005acca:	4629      	mov	r1, r5
1005accc:	f7fe f8ec 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005acd0:	4603      	mov	r3, r0
1005acd2:	2206      	movs	r2, #6
1005acd4:	4638      	mov	r0, r7
1005acd6:	4631      	mov	r1, r6
1005acd8:	9303      	str	r3, [sp, #12]
1005acda:	47a0      	blx	r4
1005acdc:	4638      	mov	r0, r7
1005acde:	4631      	mov	r1, r6
1005ace0:	f7ff fca1 	bl	1005a626 <LL_cpe_get_active_status>
1005ace4:	2800      	cmp	r0, #0
1005ace6:	462c      	mov	r4, r5
1005ace8:	d056      	beq.n	1005ad98 <__arm_cp.14_10+0x314>
1005acea:	4638      	mov	r0, r7
1005acec:	4631      	mov	r1, r6
1005acee:	f7ff fca1 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005acf2:	7801      	ldrb	r1, [r0, #0]
1005acf4:	22ef      	movs	r2, #239	@ 0xef
1005acf6:	400a      	ands	r2, r1
1005acf8:	7002      	strb	r2, [r0, #0]
1005acfa:	22ff      	movs	r2, #255	@ 0xff
1005acfc:	4638      	mov	r0, r7
1005acfe:	4631      	mov	r1, r6
1005ad00:	f000 fc37 	bl	1005b572 <ll_cpe_set_expected_opcode>
1005ad04:	2401      	movs	r4, #1
1005ad06:	9807      	ldr	r0, [sp, #28]
1005ad08:	4621      	mov	r1, r4
1005ad0a:	f7fe fb95 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
1005ad0e:	9a03      	ldr	r2, [sp, #12]
1005ad10:	7850      	ldrb	r0, [r2, #1]
1005ad12:	2108      	movs	r1, #8
1005ad14:	1c80      	adds	r0, r0, #2
1005ad16:	b2c0      	uxtb	r0, r0
1005ad18:	9100      	str	r1, [sp, #0]
1005ad1a:	9001      	str	r0, [sp, #4]
1005ad1c:	9202      	str	r2, [sp, #8]
1005ad1e:	2000      	movs	r0, #0
1005ad20:	4621      	mov	r1, r4
1005ad22:	4622      	mov	r2, r4
1005ad24:	4623      	mov	r3, r4
1005ad26:	f7f8 fefe 	bl	10053b26 <log_notify_stu_ucfg_weak>
1005ad2a:	2403      	movs	r4, #3
1005ad2c:	e034      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ad2e:	2405      	movs	r4, #5
1005ad30:	e005      	b.n	1005ad3e <__arm_cp.14_10+0x2ba>
1005ad32:	2208      	movs	r2, #8
1005ad34:	2300      	movs	r3, #0
1005ad36:	4638      	mov	r0, r7
1005ad38:	4631      	mov	r1, r6
1005ad3a:	47a8      	blx	r5
1005ad3c:	2401      	movs	r4, #1
1005ad3e:	9807      	ldr	r0, [sp, #28]
1005ad40:	f7fd ffe4 	bl	10058d0c <llc_conn_clr_instant_reached_passed>
1005ad44:	e028      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ad46:	2401      	movs	r4, #1
1005ad48:	e023      	b.n	1005ad92 <__arm_cp.14_10+0x30e>
1005ad4a:	4638      	mov	r0, r7
1005ad4c:	4631      	mov	r1, r6
1005ad4e:	f000 f901 	bl	1005af54 <ll_cpe_get_expected_opcode>
1005ad52:	28ff      	cmp	r0, #255	@ 0xff
1005ad54:	d015      	beq.n	1005ad82 <__arm_cp.14_10+0x2fe>
1005ad56:	2404      	movs	r4, #4
1005ad58:	e01b      	b.n	1005ad92 <__arm_cp.14_10+0x30e>
1005ad5a:	2804      	cmp	r0, #4
1005ad5c:	d004      	beq.n	1005ad68 <__arm_cp.14_10+0x2e4>
1005ad5e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005ad60:	2900      	cmp	r1, #0
1005ad62:	d095      	beq.n	1005ac90 <__arm_cp.14_10+0x20c>
1005ad64:	2801      	cmp	r0, #1
1005ad66:	d193      	bne.n	1005ac90 <__arm_cp.14_10+0x20c>
1005ad68:	4638      	mov	r0, r7
1005ad6a:	f7ff fc4f 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005ad6e:	8801      	ldrh	r1, [r0, #0]
1005ad70:	2404      	movs	r4, #4
1005ad72:	4321      	orrs	r1, r4
1005ad74:	8001      	strh	r1, [r0, #0]
1005ad76:	2015      	movs	r0, #21
1005ad78:	f006 fa24 	bl	100611c4 <tsk_notify_idx>
1005ad7c:	f7f5 fba5 	bl	100504ca <BLE_STACK_ProcessRequest>
1005ad80:	e00a      	b.n	1005ad98 <__arm_cp.14_10+0x314>
1005ad82:	2402      	movs	r4, #2
1005ad84:	e005      	b.n	1005ad92 <__arm_cp.14_10+0x30e>
1005ad86:	4638      	mov	r0, r7
1005ad88:	f7fd fdf8 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ad8c:	2100      	movs	r1, #0
1005ad8e:	f7fe f88b 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005ad92:	4638      	mov	r0, r7
1005ad94:	f000 fba9 	bl	1005b4ea <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005ad98:	4638      	mov	r0, r7
1005ad9a:	f7ff fc37 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005ad9e:	4606      	mov	r6, r0
1005ada0:	8800      	ldrh	r0, [r0, #0]
1005ada2:	06c0      	lsls	r0, r0, #27
1005ada4:	d527      	bpl.n	1005adf6 <__arm_cp.14_10+0x372>
1005ada6:	4638      	mov	r0, r7
1005ada8:	f7fd fde8 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005adac:	4605      	mov	r5, r0
1005adae:	f7fe f8a8 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
1005adb2:	9407      	str	r4, [sp, #28]
1005adb4:	4604      	mov	r4, r0
1005adb6:	2100      	movs	r1, #0
1005adb8:	2201      	movs	r2, #1
1005adba:	4638      	mov	r0, r7
1005adbc:	f000 f8b1 	bl	1005af22 <ll_cpe_get_blocked_status>
1005adc0:	4320      	orrs	r0, r4
1005adc2:	9c07      	ldr	r4, [sp, #28]
1005adc4:	d117      	bne.n	1005adf6 <__arm_cp.14_10+0x372>
1005adc6:	8837      	ldrh	r7, [r6, #0]
1005adc8:	2401      	movs	r4, #1
1005adca:	4628      	mov	r0, r5
1005adcc:	4621      	mov	r1, r4
1005adce:	f7fe f86b 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005add2:	4946      	ldr	r1, [pc, #280]	@ (1005aeec <__arm_cp.14_1>)
1005add4:	8001      	strh	r1, [r0, #0]
1005add6:	0979      	lsrs	r1, r7, #5
1005add8:	9f06      	ldr	r7, [sp, #24]
1005adda:	0209      	lsls	r1, r1, #8
1005addc:	1dc9      	adds	r1, r1, #7
1005adde:	8041      	strh	r1, [r0, #2]
1005ade0:	8830      	ldrh	r0, [r6, #0]
1005ade2:	2108      	movs	r1, #8
1005ade4:	4301      	orrs	r1, r0
1005ade6:	2010      	movs	r0, #16
1005ade8:	4381      	bics	r1, r0
1005adea:	8031      	strh	r1, [r6, #0]
1005adec:	4628      	mov	r0, r5
1005adee:	4621      	mov	r1, r4
1005adf0:	9c07      	ldr	r4, [sp, #28]
1005adf2:	f7fe fb21 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
1005adf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005adf8:	42a0      	cmp	r0, r4
1005adfa:	d004      	beq.n	1005ae06 <__arm_cp.14_10+0x382>
1005adfc:	4638      	mov	r0, r7
1005adfe:	9908      	ldr	r1, [sp, #32]
1005ae00:	4622      	mov	r2, r4
1005ae02:	f000 fa5d 	bl	1005b2c0 <ll_cpe_set_state>
1005ae06:	a80c      	add	r0, sp, #48	@ 0x30
1005ae08:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ae0a:	1840      	adds	r0, r0, r1
1005ae0c:	7044      	strb	r4, [r0, #1]
1005ae0e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ae10:	e5fc      	b.n	1005aa0c <LL_cpe_engine+0x2c8>
1005ae12:	a80c      	add	r0, sp, #48	@ 0x30
1005ae14:	7802      	ldrb	r2, [r0, #0]
1005ae16:	2001      	movs	r0, #1
1005ae18:	2a02      	cmp	r2, #2
1005ae1a:	d008      	beq.n	1005ae2e <__arm_cp.14_10+0x3aa>
1005ae1c:	a90c      	add	r1, sp, #48	@ 0x30
1005ae1e:	7849      	ldrb	r1, [r1, #1]
1005ae20:	2902      	cmp	r1, #2
1005ae22:	d004      	beq.n	1005ae2e <__arm_cp.14_10+0x3aa>
1005ae24:	2a03      	cmp	r2, #3
1005ae26:	d002      	beq.n	1005ae2e <__arm_cp.14_10+0x3aa>
1005ae28:	1ec9      	subs	r1, r1, #3
1005ae2a:	4248      	negs	r0, r1
1005ae2c:	4148      	adcs	r0, r1
1005ae2e:	b00d      	add	sp, #52	@ 0x34
1005ae30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ae32:	4260      	negs	r0, r4
1005ae34:	4160      	adcs	r0, r4
1005ae36:	e542      	b.n	1005a8be <LL_cpe_engine+0x17a>
1005ae38:	461c      	mov	r4, r3
1005ae3a:	f7fd f8cb 	bl	10057fd4 <pcl_csr_ucfg_weak>
1005ae3e:	e046      	b.n	1005aece <__arm_cp.14_10+0x44a>
1005ae40:	461c      	mov	r4, r3
1005ae42:	f7fd f8c5 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
1005ae46:	e042      	b.n	1005aece <__arm_cp.14_10+0x44a>
1005ae48:	461c      	mov	r4, r3
1005ae4a:	f7fd f865 	bl	10057f18 <cte_csr_ucfg_weak>
1005ae4e:	e03e      	b.n	1005aece <__arm_cp.14_10+0x44a>
1005ae50:	461d      	mov	r5, r3
1005ae52:	f7ff fb01 	bl	1005a458 <cis_csr_ucfg_weak>
1005ae56:	e022      	b.n	1005ae9e <__arm_cp.14_10+0x41a>
1005ae58:	461c      	mov	r4, r3
1005ae5a:	f7f2 fbb3 	bl	1004d5c4 <phy_upd_csr_ucfg>
1005ae5e:	e036      	b.n	1005aece <__arm_cp.14_10+0x44a>
1005ae60:	461d      	mov	r5, r3
1005ae62:	f7f2 fbaf 	bl	1004d5c4 <phy_upd_csr_ucfg>
1005ae66:	e01a      	b.n	1005ae9e <__arm_cp.14_10+0x41a>
1005ae68:	461c      	mov	r4, r3
1005ae6a:	f7ff faff 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005ae6e:	e027      	b.n	1005aec0 <__arm_cp.14_10+0x43c>
1005ae70:	4265      	negs	r5, r4
1005ae72:	4165      	adcs	r5, r4
1005ae74:	461c      	mov	r4, r3
1005ae76:	f7ff faef 	bl	1005a458 <cis_csr_ucfg_weak>
1005ae7a:	e031      	b.n	1005aee0 <__arm_cp.14_10+0x45c>
1005ae7c:	461c      	mov	r4, r3
1005ae7e:	f7ff faeb 	bl	1005a458 <cis_csr_ucfg_weak>
1005ae82:	e024      	b.n	1005aece <__arm_cp.14_10+0x44a>
1005ae84:	4265      	negs	r5, r4
1005ae86:	4165      	adcs	r5, r4
1005ae88:	461c      	mov	r4, r3
1005ae8a:	f7fd f8ab 	bl	10057fe4 <subrate_csr_ucfg_weak>
1005ae8e:	e027      	b.n	1005aee0 <__arm_cp.14_10+0x45c>
1005ae90:	461d      	mov	r5, r3
1005ae92:	f7fd f8a7 	bl	10057fe4 <subrate_csr_ucfg_weak>
1005ae96:	e002      	b.n	1005ae9e <__arm_cp.14_10+0x41a>
1005ae98:	461d      	mov	r5, r3
1005ae9a:	f7fc ff48 	bl	10057d2e <chc_csr_ucfg_weak>
1005ae9e:	462b      	mov	r3, r5
1005aea0:	1e41      	subs	r1, r0, #1
1005aea2:	4188      	sbcs	r0, r1
1005aea4:	1e61      	subs	r1, r4, #1
1005aea6:	418c      	sbcs	r4, r1
1005aea8:	4004      	ands	r4, r0
1005aeaa:	4620      	mov	r0, r4
1005aeac:	e507      	b.n	1005a8be <LL_cpe_engine+0x17a>
1005aeae:	4265      	negs	r5, r4
1005aeb0:	4165      	adcs	r5, r4
1005aeb2:	461c      	mov	r4, r3
1005aeb4:	f7fc ff3b 	bl	10057d2e <chc_csr_ucfg_weak>
1005aeb8:	e012      	b.n	1005aee0 <__arm_cp.14_10+0x45c>
1005aeba:	461c      	mov	r4, r3
1005aebc:	f7ff fad8 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005aec0:	4623      	mov	r3, r4
1005aec2:	2800      	cmp	r0, #0
1005aec4:	4638      	mov	r0, r7
1005aec6:	d100      	bne.n	1005aeca <__arm_cp.14_10+0x446>
1005aec8:	e4f9      	b.n	1005a8be <LL_cpe_engine+0x17a>
1005aeca:	f7fd f887 	bl	10057fdc <scan_csr_ucfg_weak>
1005aece:	4623      	mov	r3, r4
1005aed0:	1e41      	subs	r1, r0, #1
1005aed2:	4188      	sbcs	r0, r1
1005aed4:	e4f3      	b.n	1005a8be <LL_cpe_engine+0x17a>
1005aed6:	4265      	negs	r5, r4
1005aed8:	4165      	adcs	r5, r4
1005aeda:	461c      	mov	r4, r3
1005aedc:	f7f2 fb72 	bl	1004d5c4 <phy_upd_csr_ucfg>
1005aee0:	4623      	mov	r3, r4
1005aee2:	1e41      	subs	r1, r0, #1
1005aee4:	4188      	sbcs	r0, r1
1005aee6:	4028      	ands	r0, r5
1005aee8:	e4e9      	b.n	1005a8be <LL_cpe_engine+0x17a>
1005aeea:	46c0      	nop			@ (mov r8, r8)

1005aeec <__arm_cp.14_1>:
1005aeec:	00000203 	.word	0x00000203

1005aef0 <ll_cpe_set_active>:
1005aef0:	b580      	push	{r7, lr}
1005aef2:	f7ff fb8b 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005aef6:	8801      	ldrh	r1, [r0, #0]
1005aef8:	2201      	movs	r2, #1
1005aefa:	430a      	orrs	r2, r1
1005aefc:	8002      	strh	r2, [r0, #0]
1005aefe:	bd80      	pop	{r7, pc}

1005af00 <ll_cpe_check_rx_pdu_can_be_processed>:
1005af00:	b510      	push	{r4, lr}
1005af02:	f7fd fd3b 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005af06:	4604      	mov	r4, r0
1005af08:	f7fd ffe9 	bl	10058ede <llc_conn_get_rx_ctrl_pdu_full>
1005af0c:	2800      	cmp	r0, #0
1005af0e:	d006      	beq.n	1005af1e <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
1005af10:	4620      	mov	r0, r4
1005af12:	f7fd fff6 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
1005af16:	1ec0      	subs	r0, r0, #3
1005af18:	1e41      	subs	r1, r0, #1
1005af1a:	4188      	sbcs	r0, r1
1005af1c:	bd10      	pop	{r4, pc}
1005af1e:	2000      	movs	r0, #0
1005af20:	bd10      	pop	{r4, pc}

1005af22 <ll_cpe_get_blocked_status>:
1005af22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005af24:	4614      	mov	r4, r2
1005af26:	4607      	mov	r7, r0
1005af28:	424e      	negs	r6, r1
1005af2a:	414e      	adcs	r6, r1
1005af2c:	4631      	mov	r1, r6
1005af2e:	f7ff fb7a 	bl	1005a626 <LL_cpe_get_active_status>
1005af32:	2500      	movs	r5, #0
1005af34:	2800      	cmp	r0, #0
1005af36:	d00b      	beq.n	1005af50 <ll_cpe_get_blocked_status+0x2e>
1005af38:	4638      	mov	r0, r7
1005af3a:	4631      	mov	r1, r6
1005af3c:	f7ff fb7a 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005af40:	2c02      	cmp	r4, #2
1005af42:	d805      	bhi.n	1005af50 <ll_cpe_get_blocked_status+0x2e>
1005af44:	7800      	ldrb	r0, [r0, #0]
1005af46:	1c61      	adds	r1, r4, #1
1005af48:	b2c9      	uxtb	r1, r1
1005af4a:	40c8      	lsrs	r0, r1
1005af4c:	2501      	movs	r5, #1
1005af4e:	4005      	ands	r5, r0
1005af50:	4628      	mov	r0, r5
1005af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005af54 <ll_cpe_get_expected_opcode>:
1005af54:	b510      	push	{r4, lr}
1005af56:	460c      	mov	r4, r1
1005af58:	f7fd fd10 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005af5c:	1900      	adds	r0, r0, r4
1005af5e:	21ae      	movs	r1, #174	@ 0xae
1005af60:	5c40      	ldrb	r0, [r0, r1]
1005af62:	bd10      	pop	{r4, pc}

1005af64 <ll_cpe_get_state>:
1005af64:	b510      	push	{r4, lr}
1005af66:	460c      	mov	r4, r1
1005af68:	f7fd fd08 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005af6c:	1900      	adds	r0, r0, r4
1005af6e:	21aa      	movs	r1, #170	@ 0xaa
1005af70:	5c40      	ldrb	r0, [r0, r1]
1005af72:	bd10      	pop	{r4, pc}

1005af74 <LL_cpe_rxctrlpdu_checkreject>:
1005af74:	b5b0      	push	{r4, r5, r7, lr}
1005af76:	460c      	mov	r4, r1
1005af78:	4605      	mov	r5, r0
1005af7a:	4610      	mov	r0, r2
1005af7c:	4619      	mov	r1, r3
1005af7e:	f7ff fb91 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005af82:	4601      	mov	r1, r0
1005af84:	2001      	movs	r0, #1
1005af86:	2d0d      	cmp	r5, #13
1005af88:	d102      	bne.n	1005af90 <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005af8a:	2901      	cmp	r1, #1
1005af8c:	d100      	bne.n	1005af90 <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005af8e:	bdb0      	pop	{r4, r5, r7, pc}
1005af90:	2200      	movs	r2, #0
1005af92:	2d11      	cmp	r5, #17
1005af94:	d001      	beq.n	1005af9a <LL_cpe_rxctrlpdu_checkreject+0x26>
1005af96:	2d07      	cmp	r5, #7
1005af98:	d110      	bne.n	1005afbc <LL_cpe_rxctrlpdu_checkreject+0x48>
1005af9a:	2c2a      	cmp	r4, #42	@ 0x2a
1005af9c:	d804      	bhi.n	1005afa8 <LL_cpe_rxctrlpdu_checkreject+0x34>
1005af9e:	2303      	movs	r3, #3
1005afa0:	4363      	muls	r3, r4
1005afa2:	4d07      	ldr	r5, [pc, #28]	@ (1005afc0 <__arm_cp.20_0>)
1005afa4:	5ceb      	ldrb	r3, [r5, r3]
1005afa6:	e000      	b.n	1005afaa <LL_cpe_rxctrlpdu_checkreject+0x36>
1005afa8:	2316      	movs	r3, #22
1005afaa:	4299      	cmp	r1, r3
1005afac:	d106      	bne.n	1005afbc <LL_cpe_rxctrlpdu_checkreject+0x48>
1005afae:	2103      	movs	r1, #3
1005afb0:	4361      	muls	r1, r4
1005afb2:	4b03      	ldr	r3, [pc, #12]	@ (1005afc0 <__arm_cp.20_0>)
1005afb4:	1859      	adds	r1, r3, r1
1005afb6:	7889      	ldrb	r1, [r1, #2]
1005afb8:	2900      	cmp	r1, #0
1005afba:	d1e8      	bne.n	1005af8e <LL_cpe_rxctrlpdu_checkreject+0x1a>
1005afbc:	4610      	mov	r0, r2
1005afbe:	bdb0      	pop	{r4, r5, r7, pc}

1005afc0 <__arm_cp.20_0>:
1005afc0:	10068184 	.word	0x10068184

1005afc4 <valid_first_opcode>:
1005afc4:	b5b0      	push	{r4, r5, r7, lr}
1005afc6:	2300      	movs	r3, #0
1005afc8:	282a      	cmp	r0, #42	@ 0x2a
1005afca:	d863      	bhi.n	1005b094 <valid_first_opcode+0xd0>
1005afcc:	2403      	movs	r4, #3
1005afce:	4344      	muls	r4, r0
1005afd0:	4d34      	ldr	r5, [pc, #208]	@ (1005b0a4 <__arm_cp.21_0>)
1005afd2:	192c      	adds	r4, r5, r4
1005afd4:	7864      	ldrb	r4, [r4, #1]
1005afd6:	4294      	cmp	r4, r2
1005afd8:	d15c      	bne.n	1005b094 <valid_first_opcode+0xd0>
1005afda:	282a      	cmp	r0, #42	@ 0x2a
1005afdc:	d85a      	bhi.n	1005b094 <valid_first_opcode+0xd0>
1005afde:	0080      	lsls	r0, r0, #2
1005afe0:	a201      	add	r2, pc, #4	@ (adr r2, 1005afe8 <valid_first_opcode+0x24>)
1005afe2:	5810      	ldr	r0, [r2, r0]
1005afe4:	4687      	mov	pc, r0
1005afe6:	46c0      	nop			@ (mov r8, r8)
1005afe8:	1005b097 	.word	0x1005b097
1005afec:	1005b097 	.word	0x1005b097
1005aff0:	1005b095 	.word	0x1005b095
1005aff4:	1005b097 	.word	0x1005b097
1005aff8:	1005b095 	.word	0x1005b095
1005affc:	1005b095 	.word	0x1005b095
1005b000:	1005b095 	.word	0x1005b095
1005b004:	1005b095 	.word	0x1005b095
1005b008:	1005b097 	.word	0x1005b097
1005b00c:	1005b095 	.word	0x1005b095
1005b010:	1005b097 	.word	0x1005b097
1005b014:	1005b095 	.word	0x1005b095
1005b018:	1005b09b 	.word	0x1005b09b
1005b01c:	1005b095 	.word	0x1005b095
1005b020:	1005b09f 	.word	0x1005b09f
1005b024:	1005b095 	.word	0x1005b095
1005b028:	1005b095 	.word	0x1005b095
1005b02c:	1005b095 	.word	0x1005b095
1005b030:	1005b09b 	.word	0x1005b09b
1005b034:	1005b095 	.word	0x1005b095
1005b038:	1005b09b 	.word	0x1005b09b
1005b03c:	1005b095 	.word	0x1005b095
1005b040:	1005b09b 	.word	0x1005b09b
1005b044:	1005b095 	.word	0x1005b095
1005b048:	1005b095 	.word	0x1005b095
1005b04c:	1005b095 	.word	0x1005b095
1005b050:	1005b09b 	.word	0x1005b09b
1005b054:	1005b095 	.word	0x1005b095
1005b058:	1005b09b 	.word	0x1005b09b
1005b05c:	1005b09b 	.word	0x1005b09b
1005b060:	1005b095 	.word	0x1005b095
1005b064:	1005b097 	.word	0x1005b097
1005b068:	1005b095 	.word	0x1005b095
1005b06c:	1005b095 	.word	0x1005b095
1005b070:	1005b09b 	.word	0x1005b09b
1005b074:	1005b09b 	.word	0x1005b09b
1005b078:	1005b095 	.word	0x1005b095
1005b07c:	1005b09b 	.word	0x1005b09b
1005b080:	1005b09b 	.word	0x1005b09b
1005b084:	1005b09b 	.word	0x1005b09b
1005b088:	1005b09b 	.word	0x1005b09b
1005b08c:	1005b09b 	.word	0x1005b09b
1005b090:	1005b09b 	.word	0x1005b09b
1005b094:	4619      	mov	r1, r3
1005b096:	4608      	mov	r0, r1
1005b098:	bdb0      	pop	{r4, r5, r7, pc}
1005b09a:	2101      	movs	r1, #1
1005b09c:	e7fb      	b.n	1005b096 <valid_first_opcode+0xd2>
1005b09e:	4248      	negs	r0, r1
1005b0a0:	4141      	adcs	r1, r0
1005b0a2:	e7f8      	b.n	1005b096 <valid_first_opcode+0xd2>

1005b0a4 <__arm_cp.21_0>:
1005b0a4:	10068184 	.word	0x10068184

1005b0a8 <LL_cpe_init_phy_update>:
1005b0a8:	b580      	push	{r7, lr}
1005b0aa:	2007      	movs	r0, #7
1005b0ac:	4901      	ldr	r1, [pc, #4]	@ (1005b0b4 <__arm_cp.23_0>)
1005b0ae:	f7ff fab2 	bl	1005a616 <LL_cpe_register_cpf>
1005b0b2:	bd80      	pop	{r7, pc}

1005b0b4 <__arm_cp.23_0>:
1005b0b4:	1005cac1 	.word	0x1005cac1

1005b0b8 <LL_cpe_init_conn_update>:
1005b0b8:	b580      	push	{r7, lr}
1005b0ba:	2000      	movs	r0, #0
1005b0bc:	4901      	ldr	r1, [pc, #4]	@ (1005b0c4 <__arm_cp.28_0>)
1005b0be:	f7ff faaa 	bl	1005a616 <LL_cpe_register_cpf>
1005b0c2:	bd80      	pop	{r7, pc}

1005b0c4 <__arm_cp.28_0>:
1005b0c4:	1005b6e5 	.word	0x1005b6e5

1005b0c8 <LL_cpe_init_chmap_update>:
1005b0c8:	b580      	push	{r7, lr}
1005b0ca:	2002      	movs	r0, #2
1005b0cc:	4901      	ldr	r1, [pc, #4]	@ (1005b0d4 <__arm_cp.29_0>)
1005b0ce:	f7ff faa2 	bl	1005a616 <LL_cpe_register_cpf>
1005b0d2:	bd80      	pop	{r7, pc}

1005b0d4 <__arm_cp.29_0>:
1005b0d4:	1005b5d5 	.word	0x1005b5d5

1005b0d8 <LL_cpe_init_length_update_ucfg_weak>:
1005b0d8:	b580      	push	{r7, lr}
1005b0da:	2006      	movs	r0, #6
1005b0dc:	2100      	movs	r1, #0
1005b0de:	f7ff fa9a 	bl	1005a616 <LL_cpe_register_cpf>
1005b0e2:	bd80      	pop	{r7, pc}

1005b0e4 <LL_cpe_init_cte_ucfg_weak>:
1005b0e4:	b580      	push	{r7, lr}
1005b0e6:	200a      	movs	r0, #10
1005b0e8:	2100      	movs	r1, #0
1005b0ea:	f7ff fa94 	bl	1005a616 <LL_cpe_register_cpf>
1005b0ee:	bd80      	pop	{r7, pc}

1005b0f0 <LL_cpe_init_past_ucfg_weak>:
1005b0f0:	b580      	push	{r7, lr}
1005b0f2:	2009      	movs	r0, #9
1005b0f4:	2100      	movs	r1, #0
1005b0f6:	f7ff fa8e 	bl	1005a616 <LL_cpe_register_cpf>
1005b0fa:	bd80      	pop	{r7, pc}

1005b0fc <LL_cpe_init_pcl_ucfg_weak>:
1005b0fc:	b580      	push	{r7, lr}
1005b0fe:	200b      	movs	r0, #11
1005b100:	2100      	movs	r1, #0
1005b102:	f7ff fa88 	bl	1005a616 <LL_cpe_register_cpf>
1005b106:	bd80      	pop	{r7, pc}

1005b108 <LL_cpe_init_chc_enable_ucfg_weak>:
1005b108:	b580      	push	{r7, lr}
1005b10a:	200c      	movs	r0, #12
1005b10c:	2100      	movs	r1, #0
1005b10e:	f7ff fa82 	bl	1005a616 <LL_cpe_register_cpf>
1005b112:	bd80      	pop	{r7, pc}

1005b114 <LL_cpe_init_chc_reporting_ucfg_weak>:
1005b114:	b580      	push	{r7, lr}
1005b116:	200d      	movs	r0, #13
1005b118:	2100      	movs	r1, #0
1005b11a:	f7ff fa7c 	bl	1005a616 <LL_cpe_register_cpf>
1005b11e:	bd80      	pop	{r7, pc}

1005b120 <LL_cpe_init_subrate_ucfg_weak>:
1005b120:	b580      	push	{r7, lr}
1005b122:	2011      	movs	r0, #17
1005b124:	2100      	movs	r1, #0
1005b126:	f7ff fa76 	bl	1005a616 <LL_cpe_register_cpf>
1005b12a:	bd80      	pop	{r7, pc}

1005b12c <LL_cpe_init_sca_upd_ucfg_weak>:
1005b12c:	b580      	push	{r7, lr}
1005b12e:	2012      	movs	r0, #18
1005b130:	2100      	movs	r1, #0
1005b132:	f7ff fa70 	bl	1005a616 <LL_cpe_register_cpf>
1005b136:	bd80      	pop	{r7, pc}

1005b138 <LL_cpe_init_cis_ucfg_weak>:
1005b138:	b510      	push	{r4, lr}
1005b13a:	200e      	movs	r0, #14
1005b13c:	2400      	movs	r4, #0
1005b13e:	4621      	mov	r1, r4
1005b140:	f7ff fa69 	bl	1005a616 <LL_cpe_register_cpf>
1005b144:	2010      	movs	r0, #16
1005b146:	4621      	mov	r1, r4
1005b148:	f7ff fa65 	bl	1005a616 <LL_cpe_register_cpf>
1005b14c:	bd10      	pop	{r4, pc}
	...

1005b150 <LL_cpe_init>:
1005b150:	b5b0      	push	{r4, r5, r7, lr}
1005b152:	2001      	movs	r0, #1
1005b154:	4918      	ldr	r1, [pc, #96]	@ (1005b1b8 <__arm_cp.47_0>)
1005b156:	4c19      	ldr	r4, [pc, #100]	@ (1005b1bc <__arm_cp.47_1>)
1005b158:	47a0      	blx	r4
1005b15a:	2003      	movs	r0, #3
1005b15c:	4918      	ldr	r1, [pc, #96]	@ (1005b1c0 <__arm_cp.47_2>)
1005b15e:	47a0      	blx	r4
1005b160:	2005      	movs	r0, #5
1005b162:	4918      	ldr	r1, [pc, #96]	@ (1005b1c4 <__arm_cp.47_3>)
1005b164:	47a0      	blx	r4
1005b166:	2008      	movs	r0, #8
1005b168:	4917      	ldr	r1, [pc, #92]	@ (1005b1c8 <__arm_cp.47_4>)
1005b16a:	47a0      	blx	r4
1005b16c:	f7f2 fb1d 	bl	1004d7aa <LL_cpe_init_conn_update_ucfg>
1005b170:	f7f2 fb22 	bl	1004d7b8 <LL_cpe_init_chmap_update_ucfg>
1005b174:	f7ff ffb0 	bl	1005b0d8 <LL_cpe_init_length_update_ucfg_weak>
1005b178:	f7f2 fb10 	bl	1004d79c <LL_cpe_init_phy_update_ucfg>
1005b17c:	f7ff ffb8 	bl	1005b0f0 <LL_cpe_init_past_ucfg_weak>
1005b180:	f7ff ffb0 	bl	1005b0e4 <LL_cpe_init_cte_ucfg_weak>
1005b184:	f7ff ffba 	bl	1005b0fc <LL_cpe_init_pcl_ucfg_weak>
1005b188:	f7ff ffbe 	bl	1005b108 <LL_cpe_init_chc_enable_ucfg_weak>
1005b18c:	f7ff ffc2 	bl	1005b114 <LL_cpe_init_chc_reporting_ucfg_weak>
1005b190:	f7ff ffd2 	bl	1005b138 <LL_cpe_init_cis_ucfg_weak>
1005b194:	f7ff ffc4 	bl	1005b120 <LL_cpe_init_subrate_ucfg_weak>
1005b198:	f7ff ffc8 	bl	1005b12c <LL_cpe_init_sca_upd_ucfg_weak>
1005b19c:	2400      	movs	r4, #0
1005b19e:	4d0b      	ldr	r5, [pc, #44]	@ (1005b1cc <__arm_cp.47_5>)
1005b1a0:	6828      	ldr	r0, [r5, #0]
1005b1a2:	2134      	movs	r1, #52	@ 0x34
1005b1a4:	5c41      	ldrb	r1, [r0, r1]
1005b1a6:	b2e0      	uxtb	r0, r4
1005b1a8:	4288      	cmp	r0, r1
1005b1aa:	d203      	bcs.n	1005b1b4 <LL_cpe_init+0x64>
1005b1ac:	f000 f810 	bl	1005b1d0 <ll_cpe_reset_state_machines>
1005b1b0:	1c64      	adds	r4, r4, #1
1005b1b2:	e7f5      	b.n	1005b1a0 <LL_cpe_init+0x50>
1005b1b4:	bdb0      	pop	{r4, r5, r7, pc}
1005b1b6:	46c0      	nop			@ (mov r8, r8)

1005b1b8 <__arm_cp.47_0>:
1005b1b8:	1005bb69 	.word	0x1005bb69

1005b1bc <__arm_cp.47_1>:
1005b1bc:	1005a617 	.word	0x1005a617

1005b1c0 <__arm_cp.47_2>:
1005b1c0:	1005c355 	.word	0x1005c355

1005b1c4 <__arm_cp.47_3>:
1005b1c4:	1005d389 	.word	0x1005d389

1005b1c8 <__arm_cp.47_4>:
1005b1c8:	1005c915 	.word	0x1005c915

1005b1cc <__arm_cp.47_5>:
1005b1cc:	20002414 	.word	0x20002414

1005b1d0 <ll_cpe_reset_state_machines>:
1005b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b1d2:	2638      	movs	r6, #56	@ 0x38
1005b1d4:	4346      	muls	r6, r0
1005b1d6:	9000      	str	r0, [sp, #0]
1005b1d8:	f7fd fbd0 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b1dc:	4605      	mov	r5, r0
1005b1de:	4816      	ldr	r0, [pc, #88]	@ (1005b238 <__arm_cp.48_0>)
1005b1e0:	6800      	ldr	r0, [r0, #0]
1005b1e2:	219c      	movs	r1, #156	@ 0x9c
1005b1e4:	5842      	ldr	r2, [r0, r1]
1005b1e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005b1e8:	6892      	ldr	r2, [r2, #8]
1005b1ea:	1992      	adds	r2, r2, r6
1005b1ec:	23a0      	movs	r3, #160	@ 0xa0
1005b1ee:	50ea      	str	r2, [r5, r3]
1005b1f0:	5840      	ldr	r0, [r0, r1]
1005b1f2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b1f4:	68c0      	ldr	r0, [r0, #12]
1005b1f6:	1980      	adds	r0, r0, r6
1005b1f8:	462e      	mov	r6, r5
1005b1fa:	36a0      	adds	r6, #160	@ 0xa0
1005b1fc:	6070      	str	r0, [r6, #4]
1005b1fe:	27ae      	movs	r7, #174	@ 0xae
1005b200:	2fb0      	cmp	r7, #176	@ 0xb0
1005b202:	d00f      	beq.n	1005b224 <ll_cpe_reset_state_machines+0x54>
1005b204:	4638      	mov	r0, r7
1005b206:	38ae      	subs	r0, #174	@ 0xae
1005b208:	19e9      	adds	r1, r5, r7
1005b20a:	1f09      	subs	r1, r1, #4
1005b20c:	2400      	movs	r4, #0
1005b20e:	700c      	strb	r4, [r1, #0]
1005b210:	b2c1      	uxtb	r1, r0
1005b212:	9800      	ldr	r0, [sp, #0]
1005b214:	f7ff fa0e 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005b218:	7004      	strb	r4, [r0, #0]
1005b21a:	20ff      	movs	r0, #255	@ 0xff
1005b21c:	55e8      	strb	r0, [r5, r7]
1005b21e:	74f4      	strb	r4, [r6, #19]
1005b220:	1c7f      	adds	r7, r7, #1
1005b222:	e7ed      	b.n	1005b200 <ll_cpe_reset_state_machines+0x30>
1005b224:	2400      	movs	r4, #0
1005b226:	74b4      	strb	r4, [r6, #18]
1005b228:	9800      	ldr	r0, [sp, #0]
1005b22a:	f7ff f9ef 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005b22e:	8004      	strh	r4, [r0, #0]
1005b230:	4802      	ldr	r0, [pc, #8]	@ (1005b23c <__arm_cp.48_1>)
1005b232:	8768      	strh	r0, [r5, #58]	@ 0x3a
1005b234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b236:	46c0      	nop			@ (mov r8, r8)

1005b238 <__arm_cp.48_0>:
1005b238:	20002468 	.word	0x20002468

1005b23c <__arm_cp.48_1>:
1005b23c:	0000ffff 	.word	0x0000ffff

1005b240 <LL_cpe_set_disconnect>:
1005b240:	b510      	push	{r4, lr}
1005b242:	2480      	movs	r4, #128	@ 0x80
1005b244:	430c      	orrs	r4, r1
1005b246:	f7fd fb99 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b24a:	21b2      	movs	r1, #178	@ 0xb2
1005b24c:	5444      	strb	r4, [r0, r1]
1005b24e:	2015      	movs	r0, #21
1005b250:	f005 ffb8 	bl	100611c4 <tsk_notify_idx>
1005b254:	f7f5 f939 	bl	100504ca <BLE_STACK_ProcessRequest>
1005b258:	bd10      	pop	{r4, pc}

1005b25a <LL_cpe_get_tx_terminate_in_progress>:
1005b25a:	b580      	push	{r7, lr}
1005b25c:	f7ff f9d6 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005b260:	7800      	ldrb	r0, [r0, #0]
1005b262:	0780      	lsls	r0, r0, #30
1005b264:	0fc0      	lsrs	r0, r0, #31
1005b266:	bd80      	pop	{r7, pc}

1005b268 <LL_cpe_conn_exception_opcode_from_sm>:
1005b268:	b580      	push	{r7, lr}
1005b26a:	f7ff fa1b 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005b26e:	21fd      	movs	r1, #253	@ 0xfd
1005b270:	4008      	ands	r0, r1
1005b272:	4241      	negs	r1, r0
1005b274:	4148      	adcs	r0, r1
1005b276:	bd80      	pop	{r7, pc}

1005b278 <LL_cpe_conn_get_proc_id_from_sm>:
1005b278:	b580      	push	{r7, lr}
1005b27a:	f7ff fa13 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005b27e:	bd80      	pop	{r7, pc}

1005b280 <llc_cpe_calc_instant>:
1005b280:	b580      	push	{r7, lr}
1005b282:	f7fd fb7b 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b286:	2142      	movs	r1, #66	@ 0x42
1005b288:	5a41      	ldrh	r1, [r0, r1]
1005b28a:	2291      	movs	r2, #145	@ 0x91
1005b28c:	0052      	lsls	r2, r2, #1
1005b28e:	5a82      	ldrh	r2, [r0, r2]
1005b290:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005b292:	1c40      	adds	r0, r0, #1
1005b294:	4350      	muls	r0, r2
1005b296:	2206      	movs	r2, #6
1005b298:	4342      	muls	r2, r0
1005b29a:	1850      	adds	r0, r2, r1
1005b29c:	b280      	uxth	r0, r0
1005b29e:	bd80      	pop	{r7, pc}

1005b2a0 <llc_cpe_init_sm_ctxt>:
1005b2a0:	b5b0      	push	{r4, r5, r7, lr}
1005b2a2:	4604      	mov	r4, r0
1005b2a4:	f7ff fe24 	bl	1005aef0 <ll_cpe_set_active>
1005b2a8:	4620      	mov	r0, r4
1005b2aa:	f7fd fb67 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b2ae:	21aa      	movs	r1, #170	@ 0xaa
1005b2b0:	2501      	movs	r5, #1
1005b2b2:	5445      	strb	r5, [r0, r1]
1005b2b4:	4620      	mov	r0, r4
1005b2b6:	f7fd fb61 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b2ba:	21ab      	movs	r1, #171	@ 0xab
1005b2bc:	5445      	strb	r5, [r0, r1]
1005b2be:	bdb0      	pop	{r4, r5, r7, pc}

1005b2c0 <ll_cpe_set_state>:
1005b2c0:	b5b0      	push	{r4, r5, r7, lr}
1005b2c2:	4614      	mov	r4, r2
1005b2c4:	460d      	mov	r5, r1
1005b2c6:	f7fd fb59 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b2ca:	1940      	adds	r0, r0, r5
1005b2cc:	21aa      	movs	r1, #170	@ 0xaa
1005b2ce:	5444      	strb	r4, [r0, r1]
1005b2d0:	bdb0      	pop	{r4, r5, r7, pc}

1005b2d2 <ll_cpe_get_active>:
1005b2d2:	b580      	push	{r7, lr}
1005b2d4:	f7ff f99a 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005b2d8:	8801      	ldrh	r1, [r0, #0]
1005b2da:	2001      	movs	r0, #1
1005b2dc:	4008      	ands	r0, r1
1005b2de:	bd80      	pop	{r7, pc}

1005b2e0 <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
1005b2e0:	b580      	push	{r7, lr}
1005b2e2:	f7ff f993 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005b2e6:	7800      	ldrb	r0, [r0, #0]
1005b2e8:	0740      	lsls	r0, r0, #29
1005b2ea:	0fc0      	lsrs	r0, r0, #31
1005b2ec:	bd80      	pop	{r7, pc}
	...

1005b2f0 <ll_cpe_process_rx_pdu>:
1005b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b2f2:	b08f      	sub	sp, #60	@ 0x3c
1005b2f4:	9206      	str	r2, [sp, #24]
1005b2f6:	460d      	mov	r5, r1
1005b2f8:	4606      	mov	r6, r0
1005b2fa:	f7fd fb3f 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b2fe:	212c      	movs	r1, #44	@ 0x2c
1005b300:	5c41      	ldrb	r1, [r0, r1]
1005b302:	1ec9      	subs	r1, r1, #3
1005b304:	424a      	negs	r2, r1
1005b306:	414a      	adcs	r2, r1
1005b308:	9205      	str	r2, [sp, #20]
1005b30a:	2400      	movs	r4, #0
1005b30c:	900a      	str	r0, [sp, #40]	@ 0x28
1005b30e:	4621      	mov	r1, r4
1005b310:	f7fd fdca 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1005b314:	7841      	ldrb	r1, [r0, #1]
1005b316:	9104      	str	r1, [sp, #16]
1005b318:	9009      	str	r0, [sp, #36]	@ 0x24
1005b31a:	8847      	ldrh	r7, [r0, #2]
1005b31c:	4630      	mov	r0, r6
1005b31e:	4629      	mov	r1, r5
1005b320:	f7ff fe18 	bl	1005af54 <ll_cpe_get_expected_opcode>
1005b324:	9003      	str	r0, [sp, #12]
1005b326:	4630      	mov	r0, r6
1005b328:	4629      	mov	r1, r5
1005b32a:	9407      	str	r4, [sp, #28]
1005b32c:	4622      	mov	r2, r4
1005b32e:	f7ff fdf8 	bl	1005af22 <ll_cpe_get_blocked_status>
1005b332:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b334:	b2fa      	uxtb	r2, r7
1005b336:	4630      	mov	r0, r6
1005b338:	4629      	mov	r1, r5
1005b33a:	920e      	str	r2, [sp, #56]	@ 0x38
1005b33c:	f000 f8dd 	bl	1005b4fa <ll_cpe_check_instant_blocked>
1005b340:	900c      	str	r0, [sp, #48]	@ 0x30
1005b342:	426c      	negs	r4, r5
1005b344:	9508      	str	r5, [sp, #32]
1005b346:	416c      	adcs	r4, r5
1005b348:	4630      	mov	r0, r6
1005b34a:	4621      	mov	r1, r4
1005b34c:	f7ff fe0a 	bl	1005af64 <ll_cpe_get_state>
1005b350:	4605      	mov	r5, r0
1005b352:	960d      	str	r6, [sp, #52]	@ 0x34
1005b354:	4630      	mov	r0, r6
1005b356:	4621      	mov	r1, r4
1005b358:	f7ff fdfc 	bl	1005af54 <ll_cpe_get_expected_opcode>
1005b35c:	463a      	mov	r2, r7
1005b35e:	1ff9      	subs	r1, r7, #7
1005b360:	b2cb      	uxtb	r3, r1
1005b362:	2b0b      	cmp	r3, #11
1005b364:	d302      	bcc.n	1005b36c <ll_cpe_process_rx_pdu+0x7c>
1005b366:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005b368:	9f07      	ldr	r7, [sp, #28]
1005b36a:	e001      	b.n	1005b370 <ll_cpe_process_rx_pdu+0x80>
1005b36c:	2701      	movs	r7, #1
1005b36e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005b370:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005b372:	2e01      	cmp	r6, #1
1005b374:	d103      	bne.n	1005b37e <ll_cpe_process_rx_pdu+0x8e>
1005b376:	2d04      	cmp	r5, #4
1005b378:	d147      	bne.n	1005b40a <ll_cpe_process_rx_pdu+0x11a>
1005b37a:	4288      	cmp	r0, r1
1005b37c:	d145      	bne.n	1005b40a <ll_cpe_process_rx_pdu+0x11a>
1005b37e:	4955      	ldr	r1, [pc, #340]	@ (1005b4d4 <__arm_cp.58_0>)
1005b380:	40d9      	lsrs	r1, r3
1005b382:	400f      	ands	r7, r1
1005b384:	0a16      	lsrs	r6, r2, #8
1005b386:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005b388:	2901      	cmp	r1, #1
1005b38a:	d11d      	bne.n	1005b3c8 <ll_cpe_process_rx_pdu+0xd8>
1005b38c:	900c      	str	r0, [sp, #48]	@ 0x30
1005b38e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005b390:	4631      	mov	r1, r6
1005b392:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005b394:	4632      	mov	r2, r6
1005b396:	4623      	mov	r3, r4
1005b398:	f7ff fdec 	bl	1005af74 <LL_cpe_rxctrlpdu_checkreject>
1005b39c:	2d04      	cmp	r5, #4
1005b39e:	d10c      	bne.n	1005b3ba <ll_cpe_process_rx_pdu+0xca>
1005b3a0:	2101      	movs	r1, #1
1005b3a2:	404f      	eors	r7, r1
1005b3a4:	d101      	bne.n	1005b3aa <ll_cpe_process_rx_pdu+0xba>
1005b3a6:	2800      	cmp	r0, #0
1005b3a8:	d007      	beq.n	1005b3ba <ll_cpe_process_rx_pdu+0xca>
1005b3aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005b3ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005b3ae:	1a40      	subs	r0, r0, r1
1005b3b0:	1e41      	subs	r1, r0, #1
1005b3b2:	4188      	sbcs	r0, r1
1005b3b4:	4007      	ands	r7, r0
1005b3b6:	2f01      	cmp	r7, #1
1005b3b8:	d16e      	bne.n	1005b498 <ll_cpe_process_rx_pdu+0x1a8>
1005b3ba:	4630      	mov	r0, r6
1005b3bc:	4621      	mov	r1, r4
1005b3be:	f7ff f971 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005b3c2:	4605      	mov	r5, r0
1005b3c4:	2605      	movs	r6, #5
1005b3c6:	e026      	b.n	1005b416 <ll_cpe_process_rx_pdu+0x126>
1005b3c8:	2400      	movs	r4, #0
1005b3ca:	9806      	ldr	r0, [sp, #24]
1005b3cc:	2803      	cmp	r0, #3
1005b3ce:	d049      	beq.n	1005b464 <ll_cpe_process_rx_pdu+0x174>
1005b3d0:	2801      	cmp	r0, #1
1005b3d2:	d144      	bne.n	1005b45e <ll_cpe_process_rx_pdu+0x16e>
1005b3d4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005b3d6:	4630      	mov	r0, r6
1005b3d8:	9905      	ldr	r1, [sp, #20]
1005b3da:	9a04      	ldr	r2, [sp, #16]
1005b3dc:	f7ff fdf2 	bl	1005afc4 <valid_first_opcode>
1005b3e0:	2801      	cmp	r0, #1
1005b3e2:	d13c      	bne.n	1005b45e <ll_cpe_process_rx_pdu+0x16e>
1005b3e4:	2401      	movs	r4, #1
1005b3e6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005b3e8:	4628      	mov	r0, r5
1005b3ea:	4621      	mov	r1, r4
1005b3ec:	f7ff f91b 	bl	1005a626 <LL_cpe_get_active_status>
1005b3f0:	4607      	mov	r7, r0
1005b3f2:	4628      	mov	r0, r5
1005b3f4:	4621      	mov	r1, r4
1005b3f6:	f000 f897 	bl	1005b528 <ll_cpe_get_instant_supported>
1005b3fa:	4605      	mov	r5, r0
1005b3fc:	4630      	mov	r0, r6
1005b3fe:	f000 f89b 	bl	1005b538 <LL_cpe_is_opcode_supporting_instant>
1005b402:	2801      	cmp	r0, #1
1005b404:	d04a      	beq.n	1005b49c <ll_cpe_process_rx_pdu+0x1ac>
1005b406:	4622      	mov	r2, r4
1005b408:	e049      	b.n	1005b49e <ll_cpe_process_rx_pdu+0x1ae>
1005b40a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005b40c:	4621      	mov	r1, r4
1005b40e:	f7ff f949 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005b412:	4605      	mov	r5, r0
1005b414:	2604      	movs	r6, #4
1005b416:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b418:	7878      	ldrb	r0, [r7, #1]
1005b41a:	2110      	movs	r1, #16
1005b41c:	1c80      	adds	r0, r0, #2
1005b41e:	b2c0      	uxtb	r0, r0
1005b420:	9100      	str	r1, [sp, #0]
1005b422:	9001      	str	r0, [sp, #4]
1005b424:	9702      	str	r7, [sp, #8]
1005b426:	2401      	movs	r4, #1
1005b428:	2000      	movs	r0, #0
1005b42a:	4621      	mov	r1, r4
1005b42c:	4622      	mov	r2, r4
1005b42e:	4603      	mov	r3, r0
1005b430:	f7f8 fb79 	bl	10053b26 <log_notify_stu_ucfg_weak>
1005b434:	4628      	mov	r0, r5
1005b436:	f000 f88f 	bl	1005b558 <LL_cpe_get_cpf>
1005b43a:	2800      	cmp	r0, #0
1005b43c:	d00c      	beq.n	1005b458 <ll_cpe_process_rx_pdu+0x168>
1005b43e:	4605      	mov	r5, r0
1005b440:	4632      	mov	r2, r6
1005b442:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005b444:	4630      	mov	r0, r6
1005b446:	463b      	mov	r3, r7
1005b448:	9f08      	ldr	r7, [sp, #32]
1005b44a:	4639      	mov	r1, r7
1005b44c:	47a8      	blx	r5
1005b44e:	4602      	mov	r2, r0
1005b450:	4630      	mov	r0, r6
1005b452:	4639      	mov	r1, r7
1005b454:	f000 f88d 	bl	1005b572 <ll_cpe_set_expected_opcode>
1005b458:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b45a:	f7fd fc6b 	bl	10058d34 <llc_conn_clr_rx_ctrl_pdu_full>
1005b45e:	4620      	mov	r0, r4
1005b460:	b00f      	add	sp, #60	@ 0x3c
1005b462:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b464:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005b466:	9d08      	ldr	r5, [sp, #32]
1005b468:	4629      	mov	r1, r5
1005b46a:	f7ff f91b 	bl	1005a6a4 <ll_cpe_get_cpid_from_sm>
1005b46e:	900c      	str	r0, [sp, #48]	@ 0x30
1005b470:	2f00      	cmp	r7, #0
1005b472:	d009      	beq.n	1005b488 <ll_cpe_process_rx_pdu+0x198>
1005b474:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005b476:	4631      	mov	r1, r6
1005b478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005b47a:	462b      	mov	r3, r5
1005b47c:	f7ff fd7a 	bl	1005af74 <LL_cpe_rxctrlpdu_checkreject>
1005b480:	4604      	mov	r4, r0
1005b482:	2801      	cmp	r0, #1
1005b484:	d004      	beq.n	1005b490 <ll_cpe_process_rx_pdu+0x1a0>
1005b486:	e7ea      	b.n	1005b45e <ll_cpe_process_rx_pdu+0x16e>
1005b488:	9803      	ldr	r0, [sp, #12]
1005b48a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005b48c:	4288      	cmp	r0, r1
1005b48e:	d113      	bne.n	1005b4b8 <ll_cpe_process_rx_pdu+0x1c8>
1005b490:	2603      	movs	r6, #3
1005b492:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b494:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005b496:	e7bf      	b.n	1005b418 <ll_cpe_process_rx_pdu+0x128>
1005b498:	2400      	movs	r4, #0
1005b49a:	e7e0      	b.n	1005b45e <ll_cpe_process_rx_pdu+0x16e>
1005b49c:	2202      	movs	r2, #2
1005b49e:	4067      	eors	r7, r4
1005b4a0:	4065      	eors	r5, r4
1005b4a2:	433d      	orrs	r5, r7
1005b4a4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b4a6:	d000      	beq.n	1005b4aa <ll_cpe_process_rx_pdu+0x1ba>
1005b4a8:	4622      	mov	r2, r4
1005b4aa:	2e2a      	cmp	r6, #42	@ 0x2a
1005b4ac:	d80e      	bhi.n	1005b4cc <ll_cpe_process_rx_pdu+0x1dc>
1005b4ae:	2003      	movs	r0, #3
1005b4b0:	4370      	muls	r0, r6
1005b4b2:	4909      	ldr	r1, [pc, #36]	@ (1005b4d8 <__arm_cp.58_1>)
1005b4b4:	5c0d      	ldrb	r5, [r1, r0]
1005b4b6:	e00a      	b.n	1005b4ce <ll_cpe_process_rx_pdu+0x1de>
1005b4b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b4ba:	f7fd fd16 	bl	10058eea <llc_conn_get_rx_acl_blocked>
1005b4be:	2801      	cmp	r0, #1
1005b4c0:	d1cd      	bne.n	1005b45e <ll_cpe_process_rx_pdu+0x16e>
1005b4c2:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005b4c4:	2801      	cmp	r0, #1
1005b4c6:	d1ca      	bne.n	1005b45e <ll_cpe_process_rx_pdu+0x16e>
1005b4c8:	2501      	movs	r5, #1
1005b4ca:	e77b      	b.n	1005b3c4 <ll_cpe_process_rx_pdu+0xd4>
1005b4cc:	2516      	movs	r5, #22
1005b4ce:	4616      	mov	r6, r2
1005b4d0:	e7a2      	b.n	1005b418 <ll_cpe_process_rx_pdu+0x128>
1005b4d2:	46c0      	nop			@ (mov r8, r8)

1005b4d4 <__arm_cp.58_0>:
1005b4d4:	00000441 	.word	0x00000441

1005b4d8 <__arm_cp.58_1>:
1005b4d8:	10068184 	.word	0x10068184

1005b4dc <ll_cpe_get_instant_active>:
1005b4dc:	b580      	push	{r7, lr}
1005b4de:	f7ff f8a9 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005b4e2:	7800      	ldrb	r0, [r0, #0]
1005b4e4:	0640      	lsls	r0, r0, #25
1005b4e6:	0fc0      	lsrs	r0, r0, #31
1005b4e8:	bd80      	pop	{r7, pc}

1005b4ea <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
1005b4ea:	b580      	push	{r7, lr}
1005b4ec:	f7ff f88e 	bl	1005a60c <LL_cpe_get_ctrl_flds_common_p>
1005b4f0:	8801      	ldrh	r1, [r0, #0]
1005b4f2:	2204      	movs	r2, #4
1005b4f4:	4391      	bics	r1, r2
1005b4f6:	8001      	strh	r1, [r0, #0]
1005b4f8:	bd80      	pop	{r7, pc}

1005b4fa <ll_cpe_check_instant_blocked>:
1005b4fa:	b5b0      	push	{r4, r5, r7, lr}
1005b4fc:	460c      	mov	r4, r1
1005b4fe:	4605      	mov	r5, r0
1005b500:	2aff      	cmp	r2, #255	@ 0xff
1005b502:	d003      	beq.n	1005b50c <ll_cpe_check_instant_blocked+0x12>
1005b504:	4610      	mov	r0, r2
1005b506:	f000 f817 	bl	1005b538 <LL_cpe_is_opcode_supporting_instant>
1005b50a:	e003      	b.n	1005b514 <ll_cpe_check_instant_blocked+0x1a>
1005b50c:	4628      	mov	r0, r5
1005b50e:	4621      	mov	r1, r4
1005b510:	f000 f80a 	bl	1005b528 <ll_cpe_get_instant_supported>
1005b514:	2800      	cmp	r0, #0
1005b516:	d005      	beq.n	1005b524 <ll_cpe_check_instant_blocked+0x2a>
1005b518:	2202      	movs	r2, #2
1005b51a:	4628      	mov	r0, r5
1005b51c:	4621      	mov	r1, r4
1005b51e:	f7ff fd00 	bl	1005af22 <ll_cpe_get_blocked_status>
1005b522:	bdb0      	pop	{r4, r5, r7, pc}
1005b524:	2000      	movs	r0, #0
1005b526:	bdb0      	pop	{r4, r5, r7, pc}

1005b528 <ll_cpe_get_instant_supported>:
1005b528:	b580      	push	{r7, lr}
1005b52a:	f7ff f883 	bl	1005a634 <ll_cpe_get_ctrl_flds_per_sm_p>
1005b52e:	7800      	ldrb	r0, [r0, #0]
1005b530:	0680      	lsls	r0, r0, #26
1005b532:	0fc0      	lsrs	r0, r0, #31
1005b534:	bd80      	pop	{r7, pc}
	...

1005b538 <LL_cpe_is_opcode_supporting_instant>:
1005b538:	b510      	push	{r4, lr}
1005b53a:	4601      	mov	r1, r0
1005b53c:	2000      	movs	r0, #0
1005b53e:	a205      	add	r2, pc, #20	@ (adr r2, 1005b554 <LL_cpe_is_opcode_supporting_instant+0x1c>)
1005b540:	4603      	mov	r3, r0
1005b542:	2b04      	cmp	r3, #4
1005b544:	d004      	beq.n	1005b550 <LL_cpe_is_opcode_supporting_instant+0x18>
1005b546:	5cd4      	ldrb	r4, [r2, r3]
1005b548:	1c5b      	adds	r3, r3, #1
1005b54a:	428c      	cmp	r4, r1
1005b54c:	d1f9      	bne.n	1005b542 <LL_cpe_is_opcode_supporting_instant+0xa>
1005b54e:	2001      	movs	r0, #1
1005b550:	bd10      	pop	{r4, pc}
1005b552:	46c0      	nop			@ (mov r8, r8)
1005b554:	1f160001 	.word	0x1f160001

1005b558 <LL_cpe_get_cpf>:
1005b558:	b510      	push	{r4, lr}
1005b55a:	4601      	mov	r1, r0
1005b55c:	3914      	subs	r1, #20
1005b55e:	2903      	cmp	r1, #3
1005b560:	d201      	bcs.n	1005b566 <LL_cpe_get_cpf+0xe>
1005b562:	2000      	movs	r0, #0
1005b564:	bd10      	pop	{r4, pc}
1005b566:	0084      	lsls	r4, r0, #2
1005b568:	f7fd f9fe 	bl	10058968 <llc_conn_get_cntxt_p>
1005b56c:	6880      	ldr	r0, [r0, #8]
1005b56e:	5900      	ldr	r0, [r0, r4]
1005b570:	bd10      	pop	{r4, pc}

1005b572 <ll_cpe_set_expected_opcode>:
1005b572:	b5b0      	push	{r4, r5, r7, lr}
1005b574:	4614      	mov	r4, r2
1005b576:	460d      	mov	r5, r1
1005b578:	f7fd fa00 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b57c:	1940      	adds	r0, r0, r5
1005b57e:	21ae      	movs	r1, #174	@ 0xae
1005b580:	5444      	strb	r4, [r0, r1]
1005b582:	bdb0      	pop	{r4, r5, r7, pc}

1005b584 <LL_channel_map_update_param_check>:
1005b584:	b5b0      	push	{r4, r5, r7, lr}
1005b586:	4601      	mov	r1, r0
1005b588:	7900      	ldrb	r0, [r0, #4]
1005b58a:	281f      	cmp	r0, #31
1005b58c:	d811      	bhi.n	1005b5b2 <LL_channel_map_update_param_check+0x2e>
1005b58e:	2000      	movs	r0, #0
1005b590:	4602      	mov	r2, r0
1005b592:	4603      	mov	r3, r0
1005b594:	2a25      	cmp	r2, #37	@ 0x25
1005b596:	d00f      	beq.n	1005b5b8 <LL_channel_map_update_param_check+0x34>
1005b598:	2407      	movs	r4, #7
1005b59a:	4014      	ands	r4, r2
1005b59c:	08d5      	lsrs	r5, r2, #3
1005b59e:	5d4d      	ldrb	r5, [r1, r5]
1005b5a0:	40e5      	lsrs	r5, r4
1005b5a2:	07ec      	lsls	r4, r5, #31
1005b5a4:	d003      	beq.n	1005b5ae <LL_channel_map_update_param_check+0x2a>
1005b5a6:	1c5b      	adds	r3, r3, #1
1005b5a8:	b2dc      	uxtb	r4, r3
1005b5aa:	2c02      	cmp	r4, #2
1005b5ac:	d003      	beq.n	1005b5b6 <LL_channel_map_update_param_check+0x32>
1005b5ae:	1c52      	adds	r2, r2, #1
1005b5b0:	e7f0      	b.n	1005b594 <LL_channel_map_update_param_check+0x10>
1005b5b2:	2000      	movs	r0, #0
1005b5b4:	bdb0      	pop	{r4, r5, r7, pc}
1005b5b6:	2001      	movs	r0, #1
1005b5b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005b5bc <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005b5bc:	b580      	push	{r7, lr}
1005b5be:	4904      	ldr	r1, [pc, #16]	@ (1005b5d0 <__arm_cp.1_0>)
1005b5c0:	6809      	ldr	r1, [r1, #0]
1005b5c2:	229c      	movs	r2, #156	@ 0x9c
1005b5c4:	5889      	ldr	r1, [r1, r2]
1005b5c6:	3148      	adds	r1, #72	@ 0x48
1005b5c8:	2205      	movs	r2, #5
1005b5ca:	f7f5 fd65 	bl	10051098 <BLEPLAT_MemCpy>
1005b5ce:	bd80      	pop	{r7, pc}

1005b5d0 <__arm_cp.1_0>:
1005b5d0:	20002468 	.word	0x20002468

1005b5d4 <LL_channel_map_update>:
1005b5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b5d6:	b085      	sub	sp, #20
1005b5d8:	461e      	mov	r6, r3
1005b5da:	4617      	mov	r7, r2
1005b5dc:	4605      	mov	r5, r0
1005b5de:	9103      	str	r1, [sp, #12]
1005b5e0:	f7ff f885 	bl	1005a6ee <LL_cpe_get_cntxt>
1005b5e4:	4604      	mov	r4, r0
1005b5e6:	4628      	mov	r0, r5
1005b5e8:	f7fd f9c8 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b5ec:	4602      	mov	r2, r0
1005b5ee:	1e78      	subs	r0, r7, #1
1005b5f0:	2806      	cmp	r0, #6
1005b5f2:	d86c      	bhi.n	1005b6ce <LL_channel_map_update+0xfa>
1005b5f4:	4478      	add	r0, pc
1005b5f6:	7900      	ldrb	r0, [r0, #4]
1005b5f8:	0040      	lsls	r0, r0, #1
1005b5fa:	4487      	add	pc, r0
1005b5fc:	30680303 	.word	0x30680303
1005b600:	005a3568 	.word	0x005a3568
1005b604:	202c      	movs	r0, #44	@ 0x2c
1005b606:	5c10      	ldrb	r0, [r2, r0]
1005b608:	2803      	cmp	r0, #3
1005b60a:	d160      	bne.n	1005b6ce <LL_channel_map_update+0xfa>
1005b60c:	9202      	str	r2, [sp, #8]
1005b60e:	1cf0      	adds	r0, r6, #3
1005b610:	4607      	mov	r7, r0
1005b612:	f7ff ffb7 	bl	1005b584 <LL_channel_map_update_param_check>
1005b616:	2801      	cmp	r0, #1
1005b618:	d151      	bne.n	1005b6be <LL_channel_map_update+0xea>
1005b61a:	7a30      	ldrb	r0, [r6, #8]
1005b61c:	9001      	str	r0, [sp, #4]
1005b61e:	7a76      	ldrb	r6, [r6, #9]
1005b620:	2205      	movs	r2, #5
1005b622:	4638      	mov	r0, r7
1005b624:	4621      	mov	r1, r4
1005b626:	f005 ff55 	bl	100614d4 <char_copy>
1005b62a:	0230      	lsls	r0, r6, #8
1005b62c:	9901      	ldr	r1, [sp, #4]
1005b62e:	1840      	adds	r0, r0, r1
1005b630:	b282      	uxth	r2, r0
1005b632:	9802      	ldr	r0, [sp, #8]
1005b634:	4621      	mov	r1, r4
1005b636:	f7fd feb5 	bl	100593a4 <llc_conn_set_chmap_params>
1005b63a:	2600      	movs	r6, #0
1005b63c:	2702      	movs	r7, #2
1005b63e:	4628      	mov	r0, r5
1005b640:	4631      	mov	r1, r6
1005b642:	463a      	mov	r2, r7
1005b644:	f7ff f836 	bl	1005a6b4 <LL_cpe_set_blocked>
1005b648:	2301      	movs	r3, #1
1005b64a:	4628      	mov	r0, r5
1005b64c:	4631      	mov	r1, r6
1005b64e:	463a      	mov	r2, r7
1005b650:	f7fe fff7 	bl	1005a642 <LL_cpe_set_active>
1005b654:	4628      	mov	r0, r5
1005b656:	9903      	ldr	r1, [sp, #12]
1005b658:	f7ff f861 	bl	1005a71e <LL_cpe_set_rx_with_instant>
1005b65c:	e037      	b.n	1005b6ce <LL_channel_map_update+0xfa>
1005b65e:	78b0      	ldrb	r0, [r6, #2]
1005b660:	2801      	cmp	r0, #1
1005b662:	d030      	beq.n	1005b6c6 <LL_channel_map_update+0xf2>
1005b664:	212a      	movs	r1, #42	@ 0x2a
1005b666:	e02f      	b.n	1005b6c8 <LL_channel_map_update+0xf4>
1005b668:	4628      	mov	r0, r5
1005b66a:	9202      	str	r2, [sp, #8]
1005b66c:	f7ff fe08 	bl	1005b280 <llc_cpe_calc_instant>
1005b670:	af04      	add	r7, sp, #16
1005b672:	8038      	strh	r0, [r7, #0]
1005b674:	4620      	mov	r0, r4
1005b676:	4629      	mov	r1, r5
1005b678:	f7ff ffa0 	bl	1005b5bc <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005b67c:	2001      	movs	r0, #1
1005b67e:	70b0      	strb	r0, [r6, #2]
1005b680:	2008      	movs	r0, #8
1005b682:	7070      	strb	r0, [r6, #1]
1005b684:	2003      	movs	r0, #3
1005b686:	7030      	strb	r0, [r6, #0]
1005b688:	1cf1      	adds	r1, r6, #3
1005b68a:	2205      	movs	r2, #5
1005b68c:	4620      	mov	r0, r4
1005b68e:	f005 ff21 	bl	100614d4 <char_copy>
1005b692:	3608      	adds	r6, #8
1005b694:	2202      	movs	r2, #2
1005b696:	4638      	mov	r0, r7
1005b698:	4631      	mov	r1, r6
1005b69a:	f005 ff1b 	bl	100614d4 <char_copy>
1005b69e:	883a      	ldrh	r2, [r7, #0]
1005b6a0:	9802      	ldr	r0, [sp, #8]
1005b6a2:	4621      	mov	r1, r4
1005b6a4:	f7fd fe7e 	bl	100593a4 <llc_conn_set_chmap_params>
1005b6a8:	4628      	mov	r0, r5
1005b6aa:	9903      	ldr	r1, [sp, #12]
1005b6ac:	f7ff f828 	bl	1005a700 <LL_cpe_set_tx_with_instant>
1005b6b0:	e00d      	b.n	1005b6ce <LL_channel_map_update+0xfa>
1005b6b2:	2202      	movs	r2, #2
1005b6b4:	4628      	mov	r0, r5
1005b6b6:	9903      	ldr	r1, [sp, #12]
1005b6b8:	f7fe ffda 	bl	1005a670 <LL_cpe_clr_active>
1005b6bc:	e007      	b.n	1005b6ce <LL_channel_map_update+0xfa>
1005b6be:	4628      	mov	r0, r5
1005b6c0:	f7fe ff8c 	bl	1005a5dc <ll_cpe_set_unknown_rsp_pending>
1005b6c4:	e003      	b.n	1005b6ce <LL_channel_map_update+0xfa>
1005b6c6:	2123      	movs	r1, #35	@ 0x23
1005b6c8:	4610      	mov	r0, r2
1005b6ca:	f7fe f83b 	bl	10059744 <llc_conn_disconnect_link_from_cpf>
1005b6ce:	20ff      	movs	r0, #255	@ 0xff
1005b6d0:	b005      	add	sp, #20
1005b6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b6d4 <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005b6d4:	2000      	movs	r0, #0
1005b6d6:	4770      	bx	lr

1005b6d8 <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005b6d8:	4770      	bx	lr

1005b6da <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005b6da:	4770      	bx	lr

1005b6dc <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005b6dc:	2000      	movs	r0, #0
1005b6de:	4770      	bx	lr

1005b6e0 <LL_cpf_cis_processing_ucfg_weak>:
1005b6e0:	4770      	bx	lr
	...

1005b6e4 <LL_cpf_conn_upd>:
1005b6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b6e6:	b091      	sub	sp, #68	@ 0x44
1005b6e8:	461e      	mov	r6, r3
1005b6ea:	4614      	mov	r4, r2
1005b6ec:	4605      	mov	r5, r0
1005b6ee:	910c      	str	r1, [sp, #48]	@ 0x30
1005b6f0:	f7fe fffd 	bl	1005a6ee <LL_cpe_get_cntxt>
1005b6f4:	4607      	mov	r7, r0
1005b6f6:	4628      	mov	r0, r5
1005b6f8:	f7fd f940 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b6fc:	4603      	mov	r3, r0
1005b6fe:	1e60      	subs	r0, r4, #1
1005b700:	2807      	cmp	r0, #7
1005b702:	d900      	bls.n	1005b706 <LL_cpf_conn_upd+0x22>
1005b704:	e0ce      	b.n	1005b8a4 <LL_cpf_conn_upd+0x1c0>
1005b706:	46c0      	nop			@ (mov r8, r8)
1005b708:	4478      	add	r0, pc
1005b70a:	7900      	ldrb	r0, [r0, #4]
1005b70c:	0040      	lsls	r0, r0, #1
1005b70e:	4487      	add	pc, r0
1005b710:	22c90303 	.word	0x22c90303
1005b714:	c47c2fc9 	.word	0xc47c2fc9
1005b718:	4618      	mov	r0, r3
1005b71a:	302c      	adds	r0, #44	@ 0x2c
1005b71c:	7800      	ldrb	r0, [r0, #0]
1005b71e:	2803      	cmp	r0, #3
1005b720:	d000      	beq.n	1005b724 <LL_cpf_conn_upd+0x40>
1005b722:	e0bf      	b.n	1005b8a4 <LL_cpf_conn_upd+0x1c0>
1005b724:	2091      	movs	r0, #145	@ 0x91
1005b726:	0040      	lsls	r0, r0, #1
1005b728:	930b      	str	r3, [sp, #44]	@ 0x2c
1005b72a:	1819      	adds	r1, r3, r0
1005b72c:	8973      	ldrh	r3, [r6, #10]
1005b72e:	8932      	ldrh	r2, [r6, #8]
1005b730:	88f0      	ldrh	r0, [r6, #6]
1005b732:	880c      	ldrh	r4, [r1, #0]
1005b734:	2100      	movs	r1, #0
1005b736:	9100      	str	r1, [sp, #0]
1005b738:	9101      	str	r1, [sp, #4]
1005b73a:	9402      	str	r4, [sp, #8]
1005b73c:	900a      	str	r0, [sp, #40]	@ 0x28
1005b73e:	4601      	mov	r1, r0
1005b740:	9209      	str	r2, [sp, #36]	@ 0x24
1005b742:	461c      	mov	r4, r3
1005b744:	f000 f906 	bl	1005b954 <llc_conn_upd_params_check>
1005b748:	2800      	cmp	r0, #0
1005b74a:	d100      	bne.n	1005b74e <LL_cpf_conn_upd+0x6a>
1005b74c:	e0ad      	b.n	1005b8aa <LL_cpf_conn_upd+0x1c6>
1005b74e:	4628      	mov	r0, r5
1005b750:	f7fe ff44 	bl	1005a5dc <ll_cpe_set_unknown_rsp_pending>
1005b754:	e0a6      	b.n	1005b8a4 <LL_cpf_conn_upd+0x1c0>
1005b756:	78b0      	ldrb	r0, [r6, #2]
1005b758:	2123      	movs	r1, #35	@ 0x23
1005b75a:	280f      	cmp	r0, #15
1005b75c:	460a      	mov	r2, r1
1005b75e:	d000      	beq.n	1005b762 <LL_cpf_conn_upd+0x7e>
1005b760:	222a      	movs	r2, #42	@ 0x2a
1005b762:	2800      	cmp	r0, #0
1005b764:	d000      	beq.n	1005b768 <LL_cpf_conn_upd+0x84>
1005b766:	4611      	mov	r1, r2
1005b768:	4618      	mov	r0, r3
1005b76a:	f7fd ffeb 	bl	10059744 <llc_conn_disconnect_link_from_cpf>
1005b76e:	e099      	b.n	1005b8a4 <LL_cpf_conn_upd+0x1c0>
1005b770:	930b      	str	r3, [sp, #44]	@ 0x2c
1005b772:	1cb0      	adds	r0, r6, #2
1005b774:	9008      	str	r0, [sp, #32]
1005b776:	f7fd f8f7 	bl	10058968 <llc_conn_get_cntxt_p>
1005b77a:	9009      	str	r0, [sp, #36]	@ 0x24
1005b77c:	4628      	mov	r0, r5
1005b77e:	f7ff fd7f 	bl	1005b280 <llc_cpe_calc_instant>
1005b782:	4604      	mov	r4, r0
1005b784:	2028      	movs	r0, #40	@ 0x28
1005b786:	2101      	movs	r1, #1
1005b788:	9107      	str	r1, [sp, #28]
1005b78a:	5439      	strb	r1, [r7, r0]
1005b78c:	8b38      	ldrh	r0, [r7, #24]
1005b78e:	8b79      	ldrh	r1, [r7, #26]
1005b790:	1808      	adds	r0, r1, r0
1005b792:	0840      	lsrs	r0, r0, #1
1005b794:	9010      	str	r0, [sp, #64]	@ 0x40
1005b796:	8bb8      	ldrh	r0, [r7, #28]
1005b798:	9006      	str	r0, [sp, #24]
1005b79a:	8bf8      	ldrh	r0, [r7, #30]
1005b79c:	9005      	str	r0, [sp, #20]
1005b79e:	a80d      	add	r0, sp, #52	@ 0x34
1005b7a0:	7105      	strb	r5, [r0, #4]
1005b7a2:	a910      	add	r1, sp, #64	@ 0x40
1005b7a4:	910f      	str	r1, [sp, #60]	@ 0x3c
1005b7a6:	970d      	str	r7, [sp, #52]	@ 0x34
1005b7a8:	f7f2 f814 	bl	1004d7d4 <LL_conn_upd_max_tx_time_coded_ucfg>
1005b7ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b7ae:	8338      	strh	r0, [r7, #24]
1005b7b0:	940a      	str	r4, [sp, #40]	@ 0x28
1005b7b2:	0421      	lsls	r1, r4, #16
1005b7b4:	9a05      	ldr	r2, [sp, #20]
1005b7b6:	1889      	adds	r1, r1, r2
1005b7b8:	9104      	str	r1, [sp, #16]
1005b7ba:	9c06      	ldr	r4, [sp, #24]
1005b7bc:	0423      	lsls	r3, r4, #16
1005b7be:	4303      	orrs	r3, r0
1005b7c0:	9808      	ldr	r0, [sp, #32]
1005b7c2:	4962      	ldr	r1, [pc, #392]	@ (1005b94c <__arm_cp.0_2>)
1005b7c4:	c00a      	stmia	r0!, {r1, r3}
1005b7c6:	9904      	ldr	r1, [sp, #16]
1005b7c8:	6001      	str	r1, [r0, #0]
1005b7ca:	4861      	ldr	r0, [pc, #388]	@ (1005b950 <__arm_cp.0_3>)
1005b7cc:	8030      	strh	r0, [r6, #0]
1005b7ce:	2003      	movs	r0, #3
1005b7d0:	0240      	lsls	r0, r0, #9
1005b7d2:	0311      	lsls	r1, r2, #12
1005b7d4:	60fc      	str	r4, [r7, #12]
1005b7d6:	6139      	str	r1, [r7, #16]
1005b7d8:	9907      	ldr	r1, [sp, #28]
1005b7da:	0249      	lsls	r1, r1, #9
1005b7dc:	c703      	stmia	r7!, {r0, r1}
1005b7de:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b7e0:	6800      	ldr	r0, [r0, #0]
1005b7e2:	8b79      	ldrh	r1, [r7, #26]
1005b7e4:	0209      	lsls	r1, r1, #8
1005b7e6:	3f08      	subs	r7, #8
1005b7e8:	4288      	cmp	r0, r1
1005b7ea:	d300      	bcc.n	1005b7ee <LL_cpf_conn_upd+0x10a>
1005b7ec:	4608      	mov	r0, r1
1005b7ee:	6178      	str	r0, [r7, #20]
1005b7f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b7f2:	0240      	lsls	r0, r0, #9
1005b7f4:	60b8      	str	r0, [r7, #8]
1005b7f6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005b7f8:	4639      	mov	r1, r7
1005b7fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005b7fc:	f7fd fddb 	bl	100593b6 <llc_conn_set_conn_update_params>
1005b800:	4628      	mov	r0, r5
1005b802:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b804:	f7fe ff7c 	bl	1005a700 <LL_cpe_set_tx_with_instant>
1005b808:	e04c      	b.n	1005b8a4 <LL_cpf_conn_upd+0x1c0>
1005b80a:	2028      	movs	r0, #40	@ 0x28
1005b80c:	5c38      	ldrb	r0, [r7, r0]
1005b80e:	2801      	cmp	r0, #1
1005b810:	d143      	bne.n	1005b89a <LL_cpf_conn_upd+0x1b6>
1005b812:	461c      	mov	r4, r3
1005b814:	a80d      	add	r0, sp, #52	@ 0x34
1005b816:	7105      	strb	r5, [r0, #4]
1005b818:	970d      	str	r7, [sp, #52]	@ 0x34
1005b81a:	f7f1 ffe7 	bl	1004d7ec <LL_conn_upd_data_length_change_event_ucfg>
1005b81e:	4849      	ldr	r0, [pc, #292]	@ (1005b944 <__arm_cp.0_0>)
1005b820:	6800      	ldr	r0, [r0, #0]
1005b822:	213d      	movs	r1, #61	@ 0x3d
1005b824:	5c41      	ldrb	r1, [r0, r1]
1005b826:	0689      	lsls	r1, r1, #26
1005b828:	d532      	bpl.n	1005b890 <LL_cpf_conn_upd+0x1ac>
1005b82a:	303d      	adds	r0, #61	@ 0x3d
1005b82c:	7a40      	ldrb	r0, [r0, #9]
1005b82e:	0740      	lsls	r0, r0, #29
1005b830:	d52e      	bpl.n	1005b890 <LL_cpf_conn_upd+0x1ac>
1005b832:	8bf8      	ldrh	r0, [r7, #30]
1005b834:	900a      	str	r0, [sp, #40]	@ 0x28
1005b836:	8bb8      	ldrh	r0, [r7, #28]
1005b838:	9009      	str	r0, [sp, #36]	@ 0x24
1005b83a:	8b3f      	ldrh	r7, [r7, #24]
1005b83c:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
1005b83e:	4842      	ldr	r0, [pc, #264]	@ (1005b948 <__arm_cp.0_1>)
1005b840:	6800      	ldr	r0, [r0, #0]
1005b842:	6900      	ldr	r0, [r0, #16]
1005b844:	2180      	movs	r1, #128	@ 0x80
1005b846:	2224      	movs	r2, #36	@ 0x24
1005b848:	2604      	movs	r6, #4
1005b84a:	4633      	mov	r3, r6
1005b84c:	f7f8 f970 	bl	10053b30 <aci_event_fifo_push_header>
1005b850:	2800      	cmp	r0, #0
1005b852:	d01d      	beq.n	1005b890 <LL_cpf_conn_upd+0x1ac>
1005b854:	4601      	mov	r1, r0
1005b856:	300b      	adds	r0, #11
1005b858:	724c      	strb	r4, [r1, #9]
1005b85a:	7007      	strb	r7, [r0, #0]
1005b85c:	970b      	str	r7, [sp, #44]	@ 0x2c
1005b85e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b860:	734f      	strb	r7, [r1, #13]
1005b862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005b864:	7103      	strb	r3, [r0, #4]
1005b866:	2200      	movs	r2, #0
1005b868:	720a      	strb	r2, [r1, #8]
1005b86a:	2203      	movs	r2, #3
1005b86c:	71ca      	strb	r2, [r1, #7]
1005b86e:	220a      	movs	r2, #10
1005b870:	718a      	strb	r2, [r1, #6]
1005b872:	223e      	movs	r2, #62	@ 0x3e
1005b874:	714a      	strb	r2, [r1, #5]
1005b876:	710e      	strb	r6, [r1, #4]
1005b878:	0a22      	lsrs	r2, r4, #8
1005b87a:	728a      	strb	r2, [r1, #10]
1005b87c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005b87e:	0a12      	lsrs	r2, r2, #8
1005b880:	7042      	strb	r2, [r0, #1]
1005b882:	0a3a      	lsrs	r2, r7, #8
1005b884:	738a      	strb	r2, [r1, #14]
1005b886:	0a1a      	lsrs	r2, r3, #8
1005b888:	7142      	strb	r2, [r0, #5]
1005b88a:	2080      	movs	r0, #128	@ 0x80
1005b88c:	f7f8 f9ed 	bl	10053c6a <aci_event_fifo_push>
1005b890:	2100      	movs	r1, #0
1005b892:	4628      	mov	r0, r5
1005b894:	460a      	mov	r2, r1
1005b896:	f000 fec0 	bl	1005c61a <LLC_update_le_ping_params>
1005b89a:	2200      	movs	r2, #0
1005b89c:	4628      	mov	r0, r5
1005b89e:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b8a0:	f7fe fee6 	bl	1005a670 <LL_cpe_clr_active>
1005b8a4:	20ff      	movs	r0, #255	@ 0xff
1005b8a6:	b011      	add	sp, #68	@ 0x44
1005b8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b8aa:	78f0      	ldrb	r0, [r6, #3]
1005b8ac:	2800      	cmp	r0, #0
1005b8ae:	d100      	bne.n	1005b8b2 <LL_cpf_conn_upd+0x1ce>
1005b8b0:	e74d      	b.n	1005b74e <LL_cpf_conn_upd+0x6a>
1005b8b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005b8b4:	1e49      	subs	r1, r1, #1
1005b8b6:	2908      	cmp	r1, #8
1005b8b8:	d300      	bcc.n	1005b8bc <LL_cpf_conn_upd+0x1d8>
1005b8ba:	2108      	movs	r1, #8
1005b8bc:	4281      	cmp	r1, r0
1005b8be:	d200      	bcs.n	1005b8c2 <LL_cpf_conn_upd+0x1de>
1005b8c0:	e745      	b.n	1005b74e <LL_cpf_conn_upd+0x6a>
1005b8c2:	88b2      	ldrh	r2, [r6, #4]
1005b8c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005b8c6:	428a      	cmp	r2, r1
1005b8c8:	d900      	bls.n	1005b8cc <LL_cpf_conn_upd+0x1e8>
1005b8ca:	e740      	b.n	1005b74e <LL_cpf_conn_upd+0x6a>
1005b8cc:	83fc      	strh	r4, [r7, #30]
1005b8ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b8d0:	83b9      	strh	r1, [r7, #28]
1005b8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005b8d4:	833b      	strh	r3, [r7, #24]
1005b8d6:	837b      	strh	r3, [r7, #26]
1005b8d8:	0324      	lsls	r4, r4, #12
1005b8da:	025b      	lsls	r3, r3, #9
1005b8dc:	0252      	lsls	r2, r2, #9
1005b8de:	0240      	lsls	r0, r0, #9
1005b8e0:	c70d      	stmia	r7!, {r0, r2, r3}
1005b8e2:	6039      	str	r1, [r7, #0]
1005b8e4:	607c      	str	r4, [r7, #4]
1005b8e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005b8e8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005b8ea:	2001      	movs	r0, #1
1005b8ec:	3f0c      	subs	r7, #12
1005b8ee:	429a      	cmp	r2, r3
1005b8f0:	d107      	bne.n	1005b902 <LL_cpf_conn_upd+0x21e>
1005b8f2:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005b8f4:	4294      	cmp	r4, r2
1005b8f6:	d104      	bne.n	1005b902 <LL_cpf_conn_upd+0x21e>
1005b8f8:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005b8fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b8fc:	1a08      	subs	r0, r1, r0
1005b8fe:	1e41      	subs	r1, r0, #1
1005b900:	4188      	sbcs	r0, r1
1005b902:	2128      	movs	r1, #40	@ 0x28
1005b904:	5478      	strb	r0, [r7, r1]
1005b906:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b908:	9010      	str	r0, [sp, #64]	@ 0x40
1005b90a:	a80d      	add	r0, sp, #52	@ 0x34
1005b90c:	7105      	strb	r5, [r0, #4]
1005b90e:	a910      	add	r1, sp, #64	@ 0x40
1005b910:	910f      	str	r1, [sp, #60]	@ 0x3c
1005b912:	970d      	str	r7, [sp, #52]	@ 0x34
1005b914:	f7f1 ff5e 	bl	1004d7d4 <LL_conn_upd_max_tx_time_coded_ucfg>
1005b918:	2202      	movs	r2, #2
1005b91a:	4628      	mov	r0, r5
1005b91c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005b91e:	4621      	mov	r1, r4
1005b920:	f7fe fec8 	bl	1005a6b4 <LL_cpe_set_blocked>
1005b924:	2200      	movs	r2, #0
1005b926:	2301      	movs	r3, #1
1005b928:	4628      	mov	r0, r5
1005b92a:	4621      	mov	r1, r4
1005b92c:	f7fe fe89 	bl	1005a642 <LL_cpe_set_active>
1005b930:	89b2      	ldrh	r2, [r6, #12]
1005b932:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005b934:	4639      	mov	r1, r7
1005b936:	f7fd fd3e 	bl	100593b6 <llc_conn_set_conn_update_params>
1005b93a:	4628      	mov	r0, r5
1005b93c:	4621      	mov	r1, r4
1005b93e:	f7fe feee 	bl	1005a71e <LL_cpe_set_rx_with_instant>
1005b942:	e7af      	b.n	1005b8a4 <LL_cpf_conn_upd+0x1c0>

1005b944 <__arm_cp.0_0>:
1005b944:	20002468 	.word	0x20002468

1005b948 <__arm_cp.0_1>:
1005b948:	20002418 	.word	0x20002418

1005b94c <__arm_cp.0_2>:
1005b94c:	00010300 	.word	0x00010300

1005b950 <__arm_cp.0_3>:
1005b950:	00000c03 	.word	0x00000c03

1005b954 <llc_conn_upd_params_check>:
1005b954:	b570      	push	{r4, r5, r6, lr}
1005b956:	4604      	mov	r4, r0
1005b958:	2012      	movs	r0, #18
1005b95a:	2c06      	cmp	r4, #6
1005b95c:	d31c      	bcc.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b95e:	2519      	movs	r5, #25
1005b960:	01ed      	lsls	r5, r5, #7
1005b962:	42ac      	cmp	r4, r5
1005b964:	d818      	bhi.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b966:	2906      	cmp	r1, #6
1005b968:	d316      	bcc.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b96a:	42a9      	cmp	r1, r5
1005b96c:	d814      	bhi.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b96e:	42a1      	cmp	r1, r4
1005b970:	d312      	bcc.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b972:	0894      	lsrs	r4, r2, #2
1005b974:	2c7c      	cmp	r4, #124	@ 0x7c
1005b976:	d80f      	bhi.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b978:	9c05      	ldr	r4, [sp, #20]
1005b97a:	9e04      	ldr	r6, [sp, #16]
1005b97c:	42b4      	cmp	r4, r6
1005b97e:	d30b      	bcc.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b980:	2b0a      	cmp	r3, #10
1005b982:	d309      	bcc.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b984:	42ab      	cmp	r3, r5
1005b986:	d807      	bhi.n	1005b998 <llc_conn_upd_params_check+0x44>
1005b988:	9806      	ldr	r0, [sp, #24]
1005b98a:	1c52      	adds	r2, r2, #1
1005b98c:	434a      	muls	r2, r1
1005b98e:	4342      	muls	r2, r0
1005b990:	0890      	lsrs	r0, r2, #2
1005b992:	4283      	cmp	r3, r0
1005b994:	d801      	bhi.n	1005b99a <llc_conn_upd_params_check+0x46>
1005b996:	2012      	movs	r0, #18
1005b998:	bd70      	pop	{r4, r5, r6, pc}
1005b99a:	2000      	movs	r0, #0
1005b99c:	bd70      	pop	{r4, r5, r6, pc}
	...

1005b9a0 <LL_conn_upd_max_tx_time_coded>:
1005b9a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b9a2:	4606      	mov	r6, r0
1005b9a4:	6887      	ldr	r7, [r0, #8]
1005b9a6:	7904      	ldrb	r4, [r0, #4]
1005b9a8:	4620      	mov	r0, r4
1005b9aa:	f7fc ffe7 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005b9ae:	4605      	mov	r5, r0
1005b9b0:	4620      	mov	r0, r4
1005b9b2:	f7fd f817 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005b9b6:	2800      	cmp	r0, #0
1005b9b8:	d044      	beq.n	1005ba44 <LL_conn_upd_max_tx_time_coded+0xa4>
1005b9ba:	7980      	ldrb	r0, [r0, #6]
1005b9bc:	2804      	cmp	r0, #4
1005b9be:	d141      	bne.n	1005ba44 <LL_conn_upd_max_tx_time_coded+0xa4>
1005b9c0:	0278      	lsls	r0, r7, #9
1005b9c2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005b9c4:	4281      	cmp	r1, r0
1005b9c6:	d03d      	beq.n	1005ba44 <LL_conn_upd_max_tx_time_coded+0xa4>
1005b9c8:	4628      	mov	r0, r5
1005b9ca:	302c      	adds	r0, #44	@ 0x2c
1005b9cc:	9502      	str	r5, [sp, #8]
1005b9ce:	35b6      	adds	r5, #182	@ 0xb6
1005b9d0:	6839      	ldr	r1, [r7, #0]
1005b9d2:	223d      	movs	r2, #61	@ 0x3d
1005b9d4:	0112      	lsls	r2, r2, #4
1005b9d6:	886b      	ldrh	r3, [r5, #2]
1005b9d8:	019b      	lsls	r3, r3, #6
1005b9da:	189a      	adds	r2, r3, r2
1005b9dc:	88eb      	ldrh	r3, [r5, #6]
1005b9de:	429a      	cmp	r2, r3
1005b9e0:	d800      	bhi.n	1005b9e4 <LL_conn_upd_max_tx_time_coded+0x44>
1005b9e2:	4613      	mov	r3, r2
1005b9e4:	4a18      	ldr	r2, [pc, #96]	@ (1005ba48 <__arm_cp.3_0>)
1005b9e6:	434a      	muls	r2, r1
1005b9e8:	4611      	mov	r1, r2
1005b9ea:	6836      	ldr	r6, [r6, #0]
1005b9ec:	7800      	ldrb	r0, [r0, #0]
1005b9ee:	2802      	cmp	r0, #2
1005b9f0:	d10b      	bne.n	1005ba0a <LL_conn_upd_max_tx_time_coded+0x6a>
1005b9f2:	4816      	ldr	r0, [pc, #88]	@ (1005ba4c <__arm_cp.3_1>)
1005b9f4:	1818      	adds	r0, r3, r0
1005b9f6:	4281      	cmp	r1, r0
1005b9f8:	d207      	bcs.n	1005ba0a <LL_conn_upd_max_tx_time_coded+0x6a>
1005b9fa:	9101      	str	r1, [sp, #4]
1005b9fc:	4912      	ldr	r1, [pc, #72]	@ (1005ba48 <__arm_cp.3_0>)
1005b9fe:	9300      	str	r3, [sp, #0]
1005ba00:	f7e4 fc1e 	bl	10040240 <__udivsi3>
1005ba04:	9b00      	ldr	r3, [sp, #0]
1005ba06:	9901      	ldr	r1, [sp, #4]
1005ba08:	6038      	str	r0, [r7, #0]
1005ba0a:	8828      	ldrh	r0, [r5, #0]
1005ba0c:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005ba0e:	204b      	movs	r0, #75	@ 0x4b
1005ba10:	0080      	lsls	r0, r0, #2
1005ba12:	1818      	adds	r0, r3, r0
1005ba14:	1a09      	subs	r1, r1, r0
1005ba16:	d200      	bcs.n	1005ba1a <LL_conn_upd_max_tx_time_coded+0x7a>
1005ba18:	2100      	movs	r1, #0
1005ba1a:	8968      	ldrh	r0, [r5, #10]
1005ba1c:	8a2a      	ldrh	r2, [r5, #16]
1005ba1e:	4290      	cmp	r0, r2
1005ba20:	d300      	bcc.n	1005ba24 <LL_conn_upd_max_tx_time_coded+0x84>
1005ba22:	4610      	mov	r0, r2
1005ba24:	4281      	cmp	r1, r0
1005ba26:	9b02      	ldr	r3, [sp, #8]
1005ba28:	d800      	bhi.n	1005ba2c <LL_conn_upd_max_tx_time_coded+0x8c>
1005ba2a:	4608      	mov	r0, r1
1005ba2c:	b282      	uxth	r2, r0
1005ba2e:	21a9      	movs	r1, #169	@ 0xa9
1005ba30:	0109      	lsls	r1, r1, #4
1005ba32:	428a      	cmp	r2, r1
1005ba34:	d800      	bhi.n	1005ba38 <LL_conn_upd_max_tx_time_coded+0x98>
1005ba36:	4608      	mov	r0, r1
1005ba38:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005ba3a:	2101      	movs	r1, #1
1005ba3c:	4620      	mov	r0, r4
1005ba3e:	4632      	mov	r2, r6
1005ba40:	f000 f806 	bl	1005ba50 <LL_adjust_max_tx_data_frag_coded>
1005ba44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ba46:	46c0      	nop			@ (mov r8, r8)

1005ba48 <__arm_cp.3_0>:
1005ba48:	000004e2 	.word	0x000004e2

1005ba4c <__arm_cp.3_1>:
1005ba4c:	00000bbc 	.word	0x00000bbc

1005ba50 <LL_adjust_max_tx_data_frag_coded>:
1005ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ba52:	461c      	mov	r4, r3
1005ba54:	4615      	mov	r5, r2
1005ba56:	460e      	mov	r6, r1
1005ba58:	461f      	mov	r7, r3
1005ba5a:	37b4      	adds	r7, #180	@ 0xb4
1005ba5c:	f7fc ffc2 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005ba60:	2800      	cmp	r0, #0
1005ba62:	d002      	beq.n	1005ba6a <LL_adjust_max_tx_data_frag_coded+0x1a>
1005ba64:	8800      	ldrh	r0, [r0, #0]
1005ba66:	2802      	cmp	r0, #2
1005ba68:	d001      	beq.n	1005ba6e <LL_adjust_max_tx_data_frag_coded+0x1e>
1005ba6a:	2001      	movs	r0, #1
1005ba6c:	e000      	b.n	1005ba70 <LL_adjust_max_tx_data_frag_coded+0x20>
1005ba6e:	2003      	movs	r0, #3
1005ba70:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005ba72:	4a0b      	ldr	r2, [pc, #44]	@ (1005baa0 <__arm_cp.4_0>)
1005ba74:	1889      	adds	r1, r1, r2
1005ba76:	40c1      	lsrs	r1, r0
1005ba78:	480a      	ldr	r0, [pc, #40]	@ (1005baa4 <__arm_cp.4_1>)
1005ba7a:	1808      	adds	r0, r1, r0
1005ba7c:	08c0      	lsrs	r0, r0, #3
1005ba7e:	b281      	uxth	r1, r0
1005ba80:	8838      	ldrh	r0, [r7, #0]
1005ba82:	4288      	cmp	r0, r1
1005ba84:	d300      	bcc.n	1005ba88 <LL_adjust_max_tx_data_frag_coded+0x38>
1005ba86:	4608      	mov	r0, r1
1005ba88:	2e00      	cmp	r6, #0
1005ba8a:	d002      	beq.n	1005ba92 <LL_adjust_max_tx_data_frag_coded+0x42>
1005ba8c:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005ba8e:	4281      	cmp	r1, r0
1005ba90:	d300      	bcc.n	1005ba94 <LL_adjust_max_tx_data_frag_coded+0x44>
1005ba92:	4601      	mov	r1, r0
1005ba94:	8079      	strh	r1, [r7, #2]
1005ba96:	4620      	mov	r0, r4
1005ba98:	f7fd fa3a 	bl	10058f10 <llc_conn_guard_time_for_close_conn_event>
1005ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ba9e:	46c0      	nop			@ (mov r8, r8)

1005baa0 <__arm_cp.4_0>:
1005baa0:	fffffe88 	.word	0xfffffe88

1005baa4 <__arm_cp.4_1>:
1005baa4:	0007ffb5 	.word	0x0007ffb5

1005baa8 <LL_conn_upd_data_length_change_event>:
1005baa8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005baaa:	6805      	ldr	r5, [r0, #0]
1005baac:	7906      	ldrb	r6, [r0, #4]
1005baae:	4630      	mov	r0, r6
1005bab0:	f7fc ff64 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005bab4:	4607      	mov	r7, r0
1005bab6:	4630      	mov	r0, r6
1005bab8:	f7fc ff94 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005babc:	2800      	cmp	r0, #0
1005babe:	d047      	beq.n	1005bb50 <LL_conn_upd_data_length_change_event+0xa8>
1005bac0:	7980      	ldrb	r0, [r0, #6]
1005bac2:	2804      	cmp	r0, #4
1005bac4:	d144      	bne.n	1005bb50 <LL_conn_upd_data_length_change_event+0xa8>
1005bac6:	463c      	mov	r4, r7
1005bac8:	34b4      	adds	r4, #180	@ 0xb4
1005baca:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005bacc:	88e1      	ldrh	r1, [r4, #6]
1005bace:	4281      	cmp	r1, r0
1005bad0:	d03e      	beq.n	1005bb50 <LL_conn_upd_data_length_change_event+0xa8>
1005bad2:	80e0      	strh	r0, [r4, #6]
1005bad4:	2100      	movs	r1, #0
1005bad6:	4630      	mov	r0, r6
1005bad8:	462a      	mov	r2, r5
1005bada:	463b      	mov	r3, r7
1005badc:	f7ff ffb8 	bl	1005ba50 <LL_adjust_max_tx_data_frag_coded>
1005bae0:	481c      	ldr	r0, [pc, #112]	@ (1005bb54 <__arm_cp.6_0>)
1005bae2:	6800      	ldr	r0, [r0, #0]
1005bae4:	213d      	movs	r1, #61	@ 0x3d
1005bae6:	5c41      	ldrb	r1, [r0, r1]
1005bae8:	0689      	lsls	r1, r1, #26
1005baea:	d531      	bpl.n	1005bb50 <LL_conn_upd_data_length_change_event+0xa8>
1005baec:	303d      	adds	r0, #61	@ 0x3d
1005baee:	7a40      	ldrb	r0, [r0, #9]
1005baf0:	0640      	lsls	r0, r0, #25
1005baf2:	d52d      	bpl.n	1005bb50 <LL_conn_upd_data_length_change_event+0xa8>
1005baf4:	8926      	ldrh	r6, [r4, #8]
1005baf6:	88a5      	ldrh	r5, [r4, #4]
1005baf8:	88e0      	ldrh	r0, [r4, #6]
1005bafa:	9001      	str	r0, [sp, #4]
1005bafc:	8820      	ldrh	r0, [r4, #0]
1005bafe:	9002      	str	r0, [sp, #8]
1005bb00:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005bb02:	4815      	ldr	r0, [pc, #84]	@ (1005bb58 <__arm_cp.6_1>)
1005bb04:	6800      	ldr	r0, [r0, #0]
1005bb06:	6900      	ldr	r0, [r0, #16]
1005bb08:	2180      	movs	r1, #128	@ 0x80
1005bb0a:	2226      	movs	r2, #38	@ 0x26
1005bb0c:	2404      	movs	r4, #4
1005bb0e:	4623      	mov	r3, r4
1005bb10:	f7f8 f80e 	bl	10053b30 <aci_event_fifo_push_header>
1005bb14:	2800      	cmp	r0, #0
1005bb16:	d01b      	beq.n	1005bb50 <LL_conn_upd_data_length_change_event+0xa8>
1005bb18:	4601      	mov	r1, r0
1005bb1a:	7406      	strb	r6, [r0, #16]
1005bb1c:	7385      	strb	r5, [r0, #14]
1005bb1e:	9b01      	ldr	r3, [sp, #4]
1005bb20:	7303      	strb	r3, [r0, #12]
1005bb22:	9a02      	ldr	r2, [sp, #8]
1005bb24:	7282      	strb	r2, [r0, #10]
1005bb26:	7207      	strb	r7, [r0, #8]
1005bb28:	2007      	movs	r0, #7
1005bb2a:	71c8      	strb	r0, [r1, #7]
1005bb2c:	200b      	movs	r0, #11
1005bb2e:	7188      	strb	r0, [r1, #6]
1005bb30:	203e      	movs	r0, #62	@ 0x3e
1005bb32:	7148      	strb	r0, [r1, #5]
1005bb34:	710c      	strb	r4, [r1, #4]
1005bb36:	0a30      	lsrs	r0, r6, #8
1005bb38:	7448      	strb	r0, [r1, #17]
1005bb3a:	0a28      	lsrs	r0, r5, #8
1005bb3c:	73c8      	strb	r0, [r1, #15]
1005bb3e:	0a18      	lsrs	r0, r3, #8
1005bb40:	7348      	strb	r0, [r1, #13]
1005bb42:	0a10      	lsrs	r0, r2, #8
1005bb44:	72c8      	strb	r0, [r1, #11]
1005bb46:	0a38      	lsrs	r0, r7, #8
1005bb48:	7248      	strb	r0, [r1, #9]
1005bb4a:	2080      	movs	r0, #128	@ 0x80
1005bb4c:	f7f8 f88d 	bl	10053c6a <aci_event_fifo_push>
1005bb50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005bb52:	46c0      	nop			@ (mov r8, r8)

1005bb54 <__arm_cp.6_0>:
1005bb54:	20002468 	.word	0x20002468

1005bb58 <__arm_cp.6_1>:
1005bb58:	20002418 	.word	0x20002418

1005bb5c <llc_conn_init_cte_ctxt_ucfg_weak>:
1005bb5c:	4770      	bx	lr

1005bb5e <LLC_cte_request_procedure_ucfg_weak>:
1005bb5e:	2000      	movs	r0, #0
1005bb60:	4770      	bx	lr

1005bb62 <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005bb62:	4770      	bx	lr

1005bb64 <LLC_connection_cte_response_disable_ucfg_weak>:
1005bb64:	4770      	bx	lr

1005bb66 <llc_cte_process_rx_cte_ucfg_weak>:
1005bb66:	4770      	bx	lr

1005bb68 <LL_encryption>:
1005bb68:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bb6a:	b08d      	sub	sp, #52	@ 0x34
1005bb6c:	9309      	str	r3, [sp, #36]	@ 0x24
1005bb6e:	4617      	mov	r7, r2
1005bb70:	460d      	mov	r5, r1
1005bb72:	4606      	mov	r6, r0
1005bb74:	f7fe fdbb 	bl	1005a6ee <LL_cpe_get_cntxt>
1005bb78:	4604      	mov	r4, r0
1005bb7a:	9608      	str	r6, [sp, #32]
1005bb7c:	4630      	mov	r0, r6
1005bb7e:	f7fc fefd 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005bb82:	4603      	mov	r3, r0
1005bb84:	2f05      	cmp	r7, #5
1005bb86:	d107      	bne.n	1005bb98 <LL_encryption+0x30>
1005bb88:	213d      	movs	r1, #61	@ 0x3d
1005bb8a:	4618      	mov	r0, r3
1005bb8c:	f7fd fdda 	bl	10059744 <llc_conn_disconnect_link_from_cpf>
1005bb90:	27ff      	movs	r7, #255	@ 0xff
1005bb92:	4638      	mov	r0, r7
1005bb94:	b00d      	add	sp, #52	@ 0x34
1005bb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005bb98:	9407      	str	r4, [sp, #28]
1005bb9a:	4622      	mov	r2, r4
1005bb9c:	3228      	adds	r2, #40	@ 0x28
1005bb9e:	461e      	mov	r6, r3
1005bba0:	362c      	adds	r6, #44	@ 0x2c
1005bba2:	7830      	ldrb	r0, [r6, #0]
1005bba4:	2802      	cmp	r0, #2
1005bba6:	d129      	bne.n	1005bbfc <LL_encryption+0x94>
1005bba8:	7810      	ldrb	r0, [r2, #0]
1005bbaa:	1e40      	subs	r0, r0, #1
1005bbac:	27ff      	movs	r7, #255	@ 0xff
1005bbae:	280b      	cmp	r0, #11
1005bbb0:	d8ef      	bhi.n	1005bb92 <LL_encryption+0x2a>
1005bbb2:	0040      	lsls	r0, r0, #1
1005bbb4:	4478      	add	r0, pc
1005bbb6:	8880      	ldrh	r0, [r0, #4]
1005bbb8:	0040      	lsls	r0, r0, #1
1005bbba:	4487      	add	pc, r0
1005bbbc:	00a4000b 	.word	0x00a4000b
1005bbc0:	00c200a7 	.word	0x00c200a7
1005bbc4:	00d000cc 	.word	0x00d000cc
1005bbc8:	01370133 	.word	0x01370133
1005bbcc:	016f015f 	.word	0x016f015f
1005bbd0:	0181017e 	.word	0x0181017e
1005bbd4:	200a      	movs	r0, #10
1005bbd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005bbd8:	7088      	strb	r0, [r1, #2]
1005bbda:	27ff      	movs	r7, #255	@ 0xff
1005bbdc:	4638      	mov	r0, r7
1005bbde:	3004      	adds	r0, #4
1005bbe0:	8008      	strh	r0, [r1, #0]
1005bbe2:	2101      	movs	r1, #1
1005bbe4:	9808      	ldr	r0, [sp, #32]
1005bbe6:	4615      	mov	r5, r2
1005bbe8:	460a      	mov	r2, r1
1005bbea:	461c      	mov	r4, r3
1005bbec:	f7fe fd62 	bl	1005a6b4 <LL_cpe_set_blocked>
1005bbf0:	4620      	mov	r0, r4
1005bbf2:	f7fd fc13 	bl	1005941c <llc_conn_set_tx_acl_blocked>
1005bbf6:	2002      	movs	r0, #2
1005bbf8:	7028      	strb	r0, [r5, #0]
1005bbfa:	e7ca      	b.n	1005bb92 <LL_encryption+0x2a>
1005bbfc:	2f01      	cmp	r7, #1
1005bbfe:	d12e      	bne.n	1005bc5e <LL_encryption+0xf6>
1005bc00:	2000      	movs	r0, #0
1005bc02:	7050      	strb	r0, [r2, #1]
1005bc04:	9206      	str	r2, [sp, #24]
1005bc06:	2500      	movs	r5, #0
1005bc08:	461e      	mov	r6, r3
1005bc0a:	4618      	mov	r0, r3
1005bc0c:	4629      	mov	r1, r5
1005bc0e:	f7fd f951 	bl	10058eb4 <llc_conn_get_enc_on>
1005bc12:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005bc14:	7889      	ldrb	r1, [r1, #2]
1005bc16:	2903      	cmp	r1, #3
1005bc18:	d157      	bne.n	1005bcca <LL_encryption+0x162>
1005bc1a:	2800      	cmp	r0, #0
1005bc1c:	4633      	mov	r3, r6
1005bc1e:	9f07      	ldr	r7, [sp, #28]
1005bc20:	d1b2      	bne.n	1005bb88 <LL_encryption+0x20>
1005bc22:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005bc24:	1ce0      	adds	r0, r4, #3
1005bc26:	4639      	mov	r1, r7
1005bc28:	3130      	adds	r1, #48	@ 0x30
1005bc2a:	2208      	movs	r2, #8
1005bc2c:	9205      	str	r2, [sp, #20]
1005bc2e:	4b19      	ldr	r3, [pc, #100]	@ (1005bc94 <LL_encryption+0x12c>)
1005bc30:	4798      	blx	r3
1005bc32:	4620      	mov	r0, r4
1005bc34:	300b      	adds	r0, #11
1005bc36:	4639      	mov	r1, r7
1005bc38:	312e      	adds	r1, #46	@ 0x2e
1005bc3a:	2202      	movs	r2, #2
1005bc3c:	4b15      	ldr	r3, [pc, #84]	@ (1005bc94 <LL_encryption+0x12c>)
1005bc3e:	4798      	blx	r3
1005bc40:	4620      	mov	r0, r4
1005bc42:	300d      	adds	r0, #13
1005bc44:	4639      	mov	r1, r7
1005bc46:	9a05      	ldr	r2, [sp, #20]
1005bc48:	4b12      	ldr	r3, [pc, #72]	@ (1005bc94 <LL_encryption+0x12c>)
1005bc4a:	4798      	blx	r3
1005bc4c:	3415      	adds	r4, #21
1005bc4e:	3720      	adds	r7, #32
1005bc50:	2204      	movs	r2, #4
1005bc52:	4620      	mov	r0, r4
1005bc54:	4639      	mov	r1, r7
1005bc56:	4b0f      	ldr	r3, [pc, #60]	@ (1005bc94 <LL_encryption+0x12c>)
1005bc58:	4798      	blx	r3
1005bc5a:	2005      	movs	r0, #5
1005bc5c:	e03b      	b.n	1005bcd6 <LL_encryption+0x16e>
1005bc5e:	7850      	ldrb	r0, [r2, #1]
1005bc60:	27ff      	movs	r7, #255	@ 0xff
1005bc62:	280d      	cmp	r0, #13
1005bc64:	d895      	bhi.n	1005bb92 <LL_encryption+0x2a>
1005bc66:	9705      	str	r7, [sp, #20]
1005bc68:	2111      	movs	r1, #17
1005bc6a:	0109      	lsls	r1, r1, #4
1005bc6c:	185f      	adds	r7, r3, r1
1005bc6e:	0040      	lsls	r0, r0, #1
1005bc70:	4478      	add	r0, pc
1005bc72:	8880      	ldrh	r0, [r0, #4]
1005bc74:	0040      	lsls	r0, r0, #1
1005bc76:	4487      	add	pc, r0
1005bc78:	0010000f 	.word	0x0010000f
1005bc7c:	016d0165 	.word	0x016d0165
1005bc80:	019b0176 	.word	0x019b0176
1005bc84:	022001d6 	.word	0x022001d6
1005bc88:	024001e9 	.word	0x024001e9
1005bc8c:	01fe01ed 	.word	0x01fe01ed
1005bc90:	02340214 	.word	0x02340214
1005bc94:	100614d5 	.word	0x100614d5
1005bc98:	e7b4      	b.n	1005bc04 <LL_encryption+0x9c>
1005bc9a:	200b      	movs	r0, #11
1005bc9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005bc9e:	7088      	strb	r0, [r1, #2]
1005bca0:	2002      	movs	r0, #2
1005bca2:	7050      	strb	r0, [r2, #1]
1005bca4:	27ff      	movs	r7, #255	@ 0xff
1005bca6:	4638      	mov	r0, r7
1005bca8:	3004      	adds	r0, #4
1005bcaa:	8008      	strh	r0, [r1, #0]
1005bcac:	2400      	movs	r4, #0
1005bcae:	2201      	movs	r2, #1
1005bcb0:	9808      	ldr	r0, [sp, #32]
1005bcb2:	4621      	mov	r1, r4
1005bcb4:	461d      	mov	r5, r3
1005bcb6:	f7fe fcfd 	bl	1005a6b4 <LL_cpe_set_blocked>
1005bcba:	4628      	mov	r0, r5
1005bcbc:	f7fd fbae 	bl	1005941c <llc_conn_set_tx_acl_blocked>
1005bcc0:	4628      	mov	r0, r5
1005bcc2:	4621      	mov	r1, r4
1005bcc4:	f7fd fb99 	bl	100593fa <llc_conn_set_stop_enc>
1005bcc8:	e763      	b.n	1005bb92 <LL_encryption+0x2a>
1005bcca:	2801      	cmp	r0, #1
1005bccc:	4633      	mov	r3, r6
1005bcce:	d000      	beq.n	1005bcd2 <LL_encryption+0x16a>
1005bcd0:	e75a      	b.n	1005bb88 <LL_encryption+0x20>
1005bcd2:	2501      	movs	r5, #1
1005bcd4:	4628      	mov	r0, r5
1005bcd6:	9f06      	ldr	r7, [sp, #24]
1005bcd8:	7078      	strb	r0, [r7, #1]
1005bcda:	713d      	strb	r5, [r7, #4]
1005bcdc:	2400      	movs	r4, #0
1005bcde:	9d08      	ldr	r5, [sp, #32]
1005bce0:	4628      	mov	r0, r5
1005bce2:	4621      	mov	r1, r4
1005bce4:	4622      	mov	r2, r4
1005bce6:	f7fe fce5 	bl	1005a6b4 <LL_cpe_set_blocked>
1005bcea:	4630      	mov	r0, r6
1005bcec:	f7fd fb6c 	bl	100593c8 <llc_conn_set_rx_acl_blocked>
1005bcf0:	4628      	mov	r0, r5
1005bcf2:	4621      	mov	r1, r4
1005bcf4:	f7fe fcee 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005bcf8:	2201      	movs	r2, #1
1005bcfa:	4628      	mov	r0, r5
1005bcfc:	4621      	mov	r1, r4
1005bcfe:	4623      	mov	r3, r4
1005bd00:	f7fe fc9f 	bl	1005a642 <LL_cpe_set_active>
1005bd04:	e744      	b.n	1005bb90 <LL_encryption+0x28>
1005bd06:	2003      	movs	r0, #3
1005bd08:	7010      	strb	r0, [r2, #0]
1005bd0a:	e121      	b.n	1005bf50 <LL_encryption+0x3e8>
1005bd0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005bd0e:	7880      	ldrb	r0, [r0, #2]
1005bd10:	280b      	cmp	r0, #11
1005bd12:	d000      	beq.n	1005bd16 <LL_encryption+0x1ae>
1005bd14:	e738      	b.n	1005bb88 <LL_encryption+0x20>
1005bd16:	2004      	movs	r0, #4
1005bd18:	7010      	strb	r0, [r2, #0]
1005bd1a:	2102      	movs	r1, #2
1005bd1c:	4618      	mov	r0, r3
1005bd1e:	461d      	mov	r5, r3
1005bd20:	f7fd fb6b 	bl	100593fa <llc_conn_set_stop_enc>
1005bd24:	2401      	movs	r4, #1
1005bd26:	9e08      	ldr	r6, [sp, #32]
1005bd28:	4630      	mov	r0, r6
1005bd2a:	4621      	mov	r1, r4
1005bd2c:	f7fe fcd2 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005bd30:	2200      	movs	r2, #0
1005bd32:	4630      	mov	r0, r6
1005bd34:	4621      	mov	r1, r4
1005bd36:	f7fe fcbd 	bl	1005a6b4 <LL_cpe_set_blocked>
1005bd3a:	4628      	mov	r0, r5
1005bd3c:	f7fd fb44 	bl	100593c8 <llc_conn_set_rx_acl_blocked>
1005bd40:	e727      	b.n	1005bb92 <LL_encryption+0x2a>
1005bd42:	200b      	movs	r0, #11
1005bd44:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005bd46:	7088      	strb	r0, [r1, #2]
1005bd48:	2005      	movs	r0, #5
1005bd4a:	7010      	strb	r0, [r2, #0]
1005bd4c:	27ff      	movs	r7, #255	@ 0xff
1005bd4e:	4638      	mov	r0, r7
1005bd50:	3004      	adds	r0, #4
1005bd52:	8008      	strh	r0, [r1, #0]
1005bd54:	e71d      	b.n	1005bb92 <LL_encryption+0x2a>
1005bd56:	2006      	movs	r0, #6
1005bd58:	7010      	strb	r0, [r2, #0]
1005bd5a:	2101      	movs	r1, #1
1005bd5c:	e1d6      	b.n	1005c10c <LL_encryption+0x5a4>
1005bd5e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005bd60:	1ca0      	adds	r0, r4, #2
1005bd62:	9001      	str	r0, [sp, #4]
1005bd64:	9705      	str	r7, [sp, #20]
1005bd66:	2700      	movs	r7, #0
1005bd68:	4dfd      	ldr	r5, [pc, #1012]	@ (1005c160 <LL_encryption+0x5f8>)
1005bd6a:	4638      	mov	r0, r7
1005bd6c:	9304      	str	r3, [sp, #16]
1005bd6e:	4616      	mov	r6, r2
1005bd70:	47a8      	blx	r5
1005bd72:	9002      	str	r0, [sp, #8]
1005bd74:	900b      	str	r0, [sp, #44]	@ 0x2c
1005bd76:	4638      	mov	r0, r7
1005bd78:	47a8      	blx	r5
1005bd7a:	900c      	str	r0, [sp, #48]	@ 0x30
1005bd7c:	4638      	mov	r0, r7
1005bd7e:	9f05      	ldr	r7, [sp, #20]
1005bd80:	47a8      	blx	r5
1005bd82:	9003      	str	r0, [sp, #12]
1005bd84:	49fc      	ldr	r1, [pc, #1008]	@ (1005c178 <__arm_cp.0_10>)
1005bd86:	8021      	strh	r1, [r4, #0]
1005bd88:	900a      	str	r0, [sp, #40]	@ 0x28
1005bd8a:	4635      	mov	r5, r6
1005bd8c:	7a30      	ldrb	r0, [r6, #8]
1005bd8e:	0200      	lsls	r0, r0, #8
1005bd90:	7a71      	ldrb	r1, [r6, #9]
1005bd92:	0409      	lsls	r1, r1, #16
1005bd94:	1840      	adds	r0, r0, r1
1005bd96:	7ab1      	ldrb	r1, [r6, #10]
1005bd98:	9606      	str	r6, [sp, #24]
1005bd9a:	0609      	lsls	r1, r1, #24
1005bd9c:	1840      	adds	r0, r0, r1
1005bd9e:	1cc0      	adds	r0, r0, #3
1005bda0:	9c01      	ldr	r4, [sp, #4]
1005bda2:	6020      	str	r0, [r4, #0]
1005bda4:	9e07      	ldr	r6, [sp, #28]
1005bda6:	4630      	mov	r0, r6
1005bda8:	3033      	adds	r0, #51	@ 0x33
1005bdaa:	f000 fa25 	bl	1005c1f8 <le4ByteToInt32>
1005bdae:	6060      	str	r0, [r4, #4]
1005bdb0:	9802      	ldr	r0, [sp, #8]
1005bdb2:	0600      	lsls	r0, r0, #24
1005bdb4:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005bdb6:	0209      	lsls	r1, r1, #8
1005bdb8:	1808      	adds	r0, r1, r0
1005bdba:	7be9      	ldrb	r1, [r5, #15]
1005bdbc:	1840      	adds	r0, r0, r1
1005bdbe:	60a0      	str	r0, [r4, #8]
1005bdc0:	4625      	mov	r5, r4
1005bdc2:	ac0b      	add	r4, sp, #44	@ 0x2c
1005bdc4:	1c60      	adds	r0, r4, #1
1005bdc6:	f000 fa17 	bl	1005c1f8 <le4ByteToInt32>
1005bdca:	60e8      	str	r0, [r5, #12]
1005bdcc:	9803      	ldr	r0, [sp, #12]
1005bdce:	0600      	lsls	r0, r0, #24
1005bdd0:	7961      	ldrb	r1, [r4, #5]
1005bdd2:	1840      	adds	r0, r0, r1
1005bdd4:	79a1      	ldrb	r1, [r4, #6]
1005bdd6:	0209      	lsls	r1, r1, #8
1005bdd8:	1840      	adds	r0, r0, r1
1005bdda:	79e1      	ldrb	r1, [r4, #7]
1005bddc:	0409      	lsls	r1, r1, #16
1005bdde:	1840      	adds	r0, r0, r1
1005bde0:	6128      	str	r0, [r5, #16]
1005bde2:	462a      	mov	r2, r5
1005bde4:	ad0a      	add	r5, sp, #40	@ 0x28
1005bde6:	7868      	ldrb	r0, [r5, #1]
1005bde8:	78a9      	ldrb	r1, [r5, #2]
1005bdea:	0209      	lsls	r1, r1, #8
1005bdec:	1808      	adds	r0, r1, r0
1005bdee:	78e9      	ldrb	r1, [r5, #3]
1005bdf0:	0409      	lsls	r1, r1, #16
1005bdf2:	1840      	adds	r0, r0, r1
1005bdf4:	6150      	str	r0, [r2, #20]
1005bdf6:	2208      	movs	r2, #8
1005bdf8:	4620      	mov	r0, r4
1005bdfa:	4631      	mov	r1, r6
1005bdfc:	f005 fb6a 	bl	100614d4 <char_copy>
1005be00:	3620      	adds	r6, #32
1005be02:	2204      	movs	r2, #4
1005be04:	4628      	mov	r0, r5
1005be06:	4631      	mov	r1, r6
1005be08:	f005 fb64 	bl	100614d4 <char_copy>
1005be0c:	2007      	movs	r0, #7
1005be0e:	9906      	ldr	r1, [sp, #24]
1005be10:	7008      	strb	r0, [r1, #0]
1005be12:	2101      	movs	r1, #1
1005be14:	9808      	ldr	r0, [sp, #32]
1005be16:	460a      	mov	r2, r1
1005be18:	f7fe fc4c 	bl	1005a6b4 <LL_cpe_set_blocked>
1005be1c:	9804      	ldr	r0, [sp, #16]
1005be1e:	f7fd fafd 	bl	1005941c <llc_conn_set_tx_acl_blocked>
1005be22:	e6b6      	b.n	1005bb92 <LL_encryption+0x2a>
1005be24:	2008      	movs	r0, #8
1005be26:	7010      	strb	r0, [r2, #0]
1005be28:	2704      	movs	r7, #4
1005be2a:	e6b2      	b.n	1005bb92 <LL_encryption+0x2a>
1005be2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005be2e:	7880      	ldrb	r0, [r0, #2]
1005be30:	2811      	cmp	r0, #17
1005be32:	d061      	beq.n	1005bef8 <LL_encryption+0x390>
1005be34:	2807      	cmp	r0, #7
1005be36:	d05f      	beq.n	1005bef8 <LL_encryption+0x390>
1005be38:	280d      	cmp	r0, #13
1005be3a:	d05d      	beq.n	1005bef8 <LL_encryption+0x390>
1005be3c:	2804      	cmp	r0, #4
1005be3e:	9c07      	ldr	r4, [sp, #28]
1005be40:	d000      	beq.n	1005be44 <LL_encryption+0x2dc>
1005be42:	e6a1      	b.n	1005bb88 <LL_encryption+0x20>
1005be44:	2009      	movs	r0, #9
1005be46:	7010      	strb	r0, [r2, #0]
1005be48:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005be4a:	1cf8      	adds	r0, r7, #3
1005be4c:	4621      	mov	r1, r4
1005be4e:	3108      	adds	r1, #8
1005be50:	2208      	movs	r2, #8
1005be52:	461d      	mov	r5, r3
1005be54:	f005 fb3e 	bl	100614d4 <char_copy>
1005be58:	370b      	adds	r7, #11
1005be5a:	4621      	mov	r1, r4
1005be5c:	3124      	adds	r1, #36	@ 0x24
1005be5e:	2204      	movs	r2, #4
1005be60:	4638      	mov	r0, r7
1005be62:	f005 fb37 	bl	100614d4 <char_copy>
1005be66:	6734      	str	r4, [r6, #112]	@ 0x70
1005be68:	2101      	movs	r1, #1
1005be6a:	2200      	movs	r2, #0
1005be6c:	9808      	ldr	r0, [sp, #32]
1005be6e:	f7fe fc21 	bl	1005a6b4 <LL_cpe_set_blocked>
1005be72:	4628      	mov	r0, r5
1005be74:	f7fd faa8 	bl	100593c8 <llc_conn_set_rx_acl_blocked>
1005be78:	2705      	movs	r7, #5
1005be7a:	e68a      	b.n	1005bb92 <LL_encryption+0x2a>
1005be7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005be7e:	7880      	ldrb	r0, [r0, #2]
1005be80:	2811      	cmp	r0, #17
1005be82:	d046      	beq.n	1005bf12 <LL_encryption+0x3aa>
1005be84:	280d      	cmp	r0, #13
1005be86:	d044      	beq.n	1005bf12 <LL_encryption+0x3aa>
1005be88:	2805      	cmp	r0, #5
1005be8a:	d000      	beq.n	1005be8e <LL_encryption+0x326>
1005be8c:	e67c      	b.n	1005bb88 <LL_encryption+0x20>
1005be8e:	4614      	mov	r4, r2
1005be90:	2101      	movs	r1, #1
1005be92:	9808      	ldr	r0, [sp, #32]
1005be94:	f7fe fc1e 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005be98:	200a      	movs	r0, #10
1005be9a:	e00c      	b.n	1005beb6 <LL_encryption+0x34e>
1005be9c:	2006      	movs	r0, #6
1005be9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005bea0:	7088      	strb	r0, [r1, #2]
1005bea2:	27ff      	movs	r7, #255	@ 0xff
1005bea4:	4638      	mov	r0, r7
1005bea6:	3004      	adds	r0, #4
1005bea8:	8008      	strh	r0, [r1, #0]
1005beaa:	2102      	movs	r1, #2
1005beac:	4618      	mov	r0, r3
1005beae:	4614      	mov	r4, r2
1005beb0:	f7fd fa92 	bl	100593d8 <llc_conn_set_start_enc>
1005beb4:	200b      	movs	r0, #11
1005beb6:	7020      	strb	r0, [r4, #0]
1005beb8:	e66b      	b.n	1005bb92 <LL_encryption+0x2a>
1005beba:	200c      	movs	r0, #12
1005bebc:	7010      	strb	r0, [r2, #0]
1005bebe:	e0c7      	b.n	1005c050 <LL_encryption+0x4e8>
1005bec0:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005bec2:	7880      	ldrb	r0, [r0, #2]
1005bec4:	2806      	cmp	r0, #6
1005bec6:	d000      	beq.n	1005beca <LL_encryption+0x362>
1005bec8:	e65e      	b.n	1005bb88 <LL_encryption+0x20>
1005beca:	2000      	movs	r0, #0
1005becc:	4615      	mov	r5, r2
1005bece:	7010      	strb	r0, [r2, #0]
1005bed0:	48c4      	ldr	r0, [pc, #784]	@ (1005c1e4 <__arm_cp.0_0>)
1005bed2:	6800      	ldr	r0, [r0, #0]
1005bed4:	212c      	movs	r1, #44	@ 0x2c
1005bed6:	5c40      	ldrb	r0, [r0, r1]
1005bed8:	07c0      	lsls	r0, r0, #31
1005beda:	0ec1      	lsrs	r1, r0, #27
1005bedc:	206f      	movs	r0, #111	@ 0x6f
1005bede:	43c0      	mvns	r0, r0
1005bee0:	4048      	eors	r0, r1
1005bee2:	461c      	mov	r4, r3
1005bee4:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005bee6:	7929      	ldrb	r1, [r5, #4]
1005bee8:	b2c0      	uxtb	r0, r0
1005beea:	2901      	cmp	r1, #1
1005beec:	d000      	beq.n	1005bef0 <LL_encryption+0x388>
1005beee:	e111      	b.n	1005c114 <LL_encryption+0x5ac>
1005bef0:	4611      	mov	r1, r2
1005bef2:	f000 f9bf 	bl	1005c274 <hci_encryption_key_refresh_complete_event_push>
1005bef6:	e111      	b.n	1005c11c <LL_encryption+0x5b4>
1005bef8:	48ba      	ldr	r0, [pc, #744]	@ (1005c1e4 <__arm_cp.0_0>)
1005befa:	6800      	ldr	r0, [r0, #0]
1005befc:	212c      	movs	r1, #44	@ 0x2c
1005befe:	5c40      	ldrb	r0, [r0, r1]
1005bf00:	0100      	lsls	r0, r0, #4
1005bf02:	43c0      	mvns	r0, r0
1005bf04:	2180      	movs	r1, #128	@ 0x80
1005bf06:	4301      	orrs	r1, r0
1005bf08:	2090      	movs	r0, #144	@ 0x90
1005bf0a:	4008      	ands	r0, r1
1005bf0c:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005bf0e:	211a      	movs	r1, #26
1005bf10:	e00b      	b.n	1005bf2a <LL_encryption+0x3c2>
1005bf12:	48b4      	ldr	r0, [pc, #720]	@ (1005c1e4 <__arm_cp.0_0>)
1005bf14:	6800      	ldr	r0, [r0, #0]
1005bf16:	212c      	movs	r1, #44	@ 0x2c
1005bf18:	5c40      	ldrb	r0, [r0, r1]
1005bf1a:	0100      	lsls	r0, r0, #4
1005bf1c:	43c0      	mvns	r0, r0
1005bf1e:	2180      	movs	r1, #128	@ 0x80
1005bf20:	4301      	orrs	r1, r0
1005bf22:	2090      	movs	r0, #144	@ 0x90
1005bf24:	4008      	ands	r0, r1
1005bf26:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005bf28:	2106      	movs	r1, #6
1005bf2a:	461c      	mov	r4, r3
1005bf2c:	2300      	movs	r3, #0
1005bf2e:	f000 f96f 	bl	1005c210 <hci_encryption_change_event_push>
1005bf32:	4620      	mov	r0, r4
1005bf34:	f7fc ff05 	bl	10058d42 <llc_conn_clr_tx_acl_blocked>
1005bf38:	4620      	mov	r0, r4
1005bf3a:	f7fc fef1 	bl	10058d20 <llc_conn_clr_rx_acl_blocked>
1005bf3e:	2101      	movs	r1, #1
1005bf40:	9808      	ldr	r0, [sp, #32]
1005bf42:	e0f4      	b.n	1005c12e <LL_encryption+0x5c6>
1005bf44:	2003      	movs	r0, #3
1005bf46:	7050      	strb	r0, [r2, #1]
1005bf48:	2101      	movs	r1, #1
1005bf4a:	4618      	mov	r0, r3
1005bf4c:	f7fd fa55 	bl	100593fa <llc_conn_set_stop_enc>
1005bf50:	270b      	movs	r7, #11
1005bf52:	e61e      	b.n	1005bb92 <LL_encryption+0x2a>
1005bf54:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005bf56:	7880      	ldrb	r0, [r0, #2]
1005bf58:	280b      	cmp	r0, #11
1005bf5a:	d000      	beq.n	1005bf5e <LL_encryption+0x3f6>
1005bf5c:	e614      	b.n	1005bb88 <LL_encryption+0x20>
1005bf5e:	2004      	movs	r0, #4
1005bf60:	7050      	strb	r0, [r2, #1]
1005bf62:	2703      	movs	r7, #3
1005bf64:	e615      	b.n	1005bb92 <LL_encryption+0x2a>
1005bf66:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005bf68:	7880      	ldrb	r0, [r0, #2]
1005bf6a:	2803      	cmp	r0, #3
1005bf6c:	9f05      	ldr	r7, [sp, #20]
1005bf6e:	9e07      	ldr	r6, [sp, #28]
1005bf70:	d000      	beq.n	1005bf74 <LL_encryption+0x40c>
1005bf72:	e609      	b.n	1005bb88 <LL_encryption+0x20>
1005bf74:	2005      	movs	r0, #5
1005bf76:	7050      	strb	r0, [r2, #1]
1005bf78:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005bf7a:	1ce0      	adds	r0, r4, #3
1005bf7c:	4631      	mov	r1, r6
1005bf7e:	3130      	adds	r1, #48	@ 0x30
1005bf80:	2508      	movs	r5, #8
1005bf82:	462a      	mov	r2, r5
1005bf84:	4b9b      	ldr	r3, [pc, #620]	@ (1005c1f4 <__arm_cp.0_4>)
1005bf86:	4798      	blx	r3
1005bf88:	4620      	mov	r0, r4
1005bf8a:	300b      	adds	r0, #11
1005bf8c:	4631      	mov	r1, r6
1005bf8e:	312e      	adds	r1, #46	@ 0x2e
1005bf90:	2202      	movs	r2, #2
1005bf92:	4b98      	ldr	r3, [pc, #608]	@ (1005c1f4 <__arm_cp.0_4>)
1005bf94:	4798      	blx	r3
1005bf96:	4620      	mov	r0, r4
1005bf98:	300d      	adds	r0, #13
1005bf9a:	4631      	mov	r1, r6
1005bf9c:	462a      	mov	r2, r5
1005bf9e:	4d95      	ldr	r5, [pc, #596]	@ (1005c1f4 <__arm_cp.0_4>)
1005bfa0:	47a8      	blx	r5
1005bfa2:	3415      	adds	r4, #21
1005bfa4:	3620      	adds	r6, #32
1005bfa6:	2204      	movs	r2, #4
1005bfa8:	4620      	mov	r0, r4
1005bfaa:	4631      	mov	r1, r6
1005bfac:	47a8      	blx	r5
1005bfae:	e0ac      	b.n	1005c10a <LL_encryption+0x5a2>
1005bfb0:	2400      	movs	r4, #0
1005bfb2:	9403      	str	r4, [sp, #12]
1005bfb4:	4d8e      	ldr	r5, [pc, #568]	@ (1005c1f0 <__arm_cp.0_3>)
1005bfb6:	4620      	mov	r0, r4
1005bfb8:	9304      	str	r3, [sp, #16]
1005bfba:	9206      	str	r2, [sp, #24]
1005bfbc:	47a8      	blx	r5
1005bfbe:	900b      	str	r0, [sp, #44]	@ 0x2c
1005bfc0:	4620      	mov	r0, r4
1005bfc2:	47a8      	blx	r5
1005bfc4:	900c      	str	r0, [sp, #48]	@ 0x30
1005bfc6:	4620      	mov	r0, r4
1005bfc8:	47a8      	blx	r5
1005bfca:	2604      	movs	r6, #4
1005bfcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005bfce:	70a6      	strb	r6, [r4, #2]
1005bfd0:	210d      	movs	r1, #13
1005bfd2:	7061      	strb	r1, [r4, #1]
1005bfd4:	2103      	movs	r1, #3
1005bfd6:	7021      	strb	r1, [r4, #0]
1005bfd8:	900a      	str	r0, [sp, #40]	@ 0x28
1005bfda:	1ce1      	adds	r1, r4, #3
1005bfdc:	ad0b      	add	r5, sp, #44	@ 0x2c
1005bfde:	2208      	movs	r2, #8
1005bfe0:	9202      	str	r2, [sp, #8]
1005bfe2:	4b84      	ldr	r3, [pc, #528]	@ (1005c1f4 <__arm_cp.0_4>)
1005bfe4:	4628      	mov	r0, r5
1005bfe6:	4798      	blx	r3
1005bfe8:	340b      	adds	r4, #11
1005bfea:	af0a      	add	r7, sp, #40	@ 0x28
1005bfec:	4638      	mov	r0, r7
1005bfee:	4621      	mov	r1, r4
1005bff0:	4632      	mov	r2, r6
1005bff2:	4b80      	ldr	r3, [pc, #512]	@ (1005c1f4 <__arm_cp.0_4>)
1005bff4:	4798      	blx	r3
1005bff6:	9c07      	ldr	r4, [sp, #28]
1005bff8:	4621      	mov	r1, r4
1005bffa:	3108      	adds	r1, #8
1005bffc:	4628      	mov	r0, r5
1005bffe:	9a02      	ldr	r2, [sp, #8]
1005c000:	4d7c      	ldr	r5, [pc, #496]	@ (1005c1f4 <__arm_cp.0_4>)
1005c002:	47a8      	blx	r5
1005c004:	3424      	adds	r4, #36	@ 0x24
1005c006:	4638      	mov	r0, r7
1005c008:	4621      	mov	r1, r4
1005c00a:	4632      	mov	r2, r6
1005c00c:	47a8      	blx	r5
1005c00e:	2006      	movs	r0, #6
1005c010:	9906      	ldr	r1, [sp, #24]
1005c012:	7048      	strb	r0, [r1, #1]
1005c014:	2201      	movs	r2, #1
1005c016:	9808      	ldr	r0, [sp, #32]
1005c018:	9903      	ldr	r1, [sp, #12]
1005c01a:	f7fe fb4b 	bl	1005a6b4 <LL_cpe_set_blocked>
1005c01e:	9804      	ldr	r0, [sp, #16]
1005c020:	f7fd f9fc 	bl	1005941c <llc_conn_set_tx_acl_blocked>
1005c024:	e0db      	b.n	1005c1de <__arm_cp.0_10+0x66>
1005c026:	4870      	ldr	r0, [pc, #448]	@ (1005c1e8 <__arm_cp.0_1>)
1005c028:	6800      	ldr	r0, [r0, #0]
1005c02a:	213d      	movs	r1, #61	@ 0x3d
1005c02c:	5c41      	ldrb	r1, [r0, r1]
1005c02e:	0689      	lsls	r1, r1, #26
1005c030:	d504      	bpl.n	1005c03c <LL_encryption+0x4d4>
1005c032:	303d      	adds	r0, #61	@ 0x3d
1005c034:	7a40      	ldrb	r0, [r0, #9]
1005c036:	06c0      	lsls	r0, r0, #27
1005c038:	d500      	bpl.n	1005c03c <LL_encryption+0x4d4>
1005c03a:	e093      	b.n	1005c164 <LL_encryption+0x5fc>
1005c03c:	2100      	movs	r1, #0
1005c03e:	9808      	ldr	r0, [sp, #32]
1005c040:	4614      	mov	r4, r2
1005c042:	f7fe fb47 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c046:	4620      	mov	r0, r4
1005c048:	270d      	movs	r7, #13
1005c04a:	e0c7      	b.n	1005c1dc <__arm_cp.0_10+0x64>
1005c04c:	2009      	movs	r0, #9
1005c04e:	7050      	strb	r0, [r2, #1]
1005c050:	2706      	movs	r7, #6
1005c052:	e59e      	b.n	1005bb92 <LL_encryption+0x2a>
1005c054:	2006      	movs	r0, #6
1005c056:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005c058:	7088      	strb	r0, [r1, #2]
1005c05a:	200b      	movs	r0, #11
1005c05c:	7050      	strb	r0, [r2, #1]
1005c05e:	25ff      	movs	r5, #255	@ 0xff
1005c060:	4628      	mov	r0, r5
1005c062:	3004      	adds	r0, #4
1005c064:	8008      	strh	r0, [r1, #0]
1005c066:	2401      	movs	r4, #1
1005c068:	4618      	mov	r0, r3
1005c06a:	4621      	mov	r1, r4
1005c06c:	f7fd f9b4 	bl	100593d8 <llc_conn_set_start_enc>
1005c070:	703c      	strb	r4, [r7, #0]
1005c072:	462f      	mov	r7, r5
1005c074:	e58d      	b.n	1005bb92 <LL_encryption+0x2a>
1005c076:	2400      	movs	r4, #0
1005c078:	7054      	strb	r4, [r2, #1]
1005c07a:	485a      	ldr	r0, [pc, #360]	@ (1005c1e4 <__arm_cp.0_0>)
1005c07c:	6800      	ldr	r0, [r0, #0]
1005c07e:	212c      	movs	r1, #44	@ 0x2c
1005c080:	5c40      	ldrb	r0, [r0, r1]
1005c082:	07c0      	lsls	r0, r0, #31
1005c084:	0ec1      	lsrs	r1, r0, #27
1005c086:	206f      	movs	r0, #111	@ 0x6f
1005c088:	43c0      	mvns	r0, r0
1005c08a:	4048      	eors	r0, r1
1005c08c:	4611      	mov	r1, r2
1005c08e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005c090:	7909      	ldrb	r1, [r1, #4]
1005c092:	b2c0      	uxtb	r0, r0
1005c094:	2901      	cmp	r1, #1
1005c096:	d14e      	bne.n	1005c136 <LL_encryption+0x5ce>
1005c098:	4611      	mov	r1, r2
1005c09a:	461e      	mov	r6, r3
1005c09c:	f000 f8ea 	bl	1005c274 <hci_encryption_key_refresh_complete_event_push>
1005c0a0:	e04e      	b.n	1005c140 <LL_encryption+0x5d8>
1005c0a2:	4618      	mov	r0, r3
1005c0a4:	4615      	mov	r5, r2
1005c0a6:	f7fc fe4c 	bl	10058d42 <llc_conn_clr_tx_acl_blocked>
1005c0aa:	2400      	movs	r4, #0
1005c0ac:	2201      	movs	r2, #1
1005c0ae:	9808      	ldr	r0, [sp, #32]
1005c0b0:	4621      	mov	r1, r4
1005c0b2:	f7fe fadd 	bl	1005a670 <LL_cpe_clr_active>
1005c0b6:	706c      	strb	r4, [r5, #1]
1005c0b8:	e091      	b.n	1005c1de <__arm_cp.0_10+0x66>
1005c0ba:	78d0      	ldrb	r0, [r2, #3]
1005c0bc:	2801      	cmp	r0, #1
1005c0be:	d110      	bne.n	1005c0e2 <LL_encryption+0x57a>
1005c0c0:	2005      	movs	r0, #5
1005c0c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005c0c4:	7088      	strb	r0, [r1, #2]
1005c0c6:	9807      	ldr	r0, [sp, #28]
1005c0c8:	6730      	str	r0, [r6, #112]	@ 0x70
1005c0ca:	27ff      	movs	r7, #255	@ 0xff
1005c0cc:	4638      	mov	r0, r7
1005c0ce:	3004      	adds	r0, #4
1005c0d0:	8008      	strh	r0, [r1, #0]
1005c0d2:	2100      	movs	r1, #0
1005c0d4:	4618      	mov	r0, r3
1005c0d6:	4614      	mov	r4, r2
1005c0d8:	f7fd f97e 	bl	100593d8 <llc_conn_set_start_enc>
1005c0dc:	2008      	movs	r0, #8
1005c0de:	7060      	strb	r0, [r4, #1]
1005c0e0:	e557      	b.n	1005bb92 <LL_encryption+0x2a>
1005c0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c0e4:	4619      	mov	r1, r3
1005c0e6:	461c      	mov	r4, r3
1005c0e8:	4615      	mov	r5, r2
1005c0ea:	f000 f8f5 	bl	1005c2d8 <llc_enc_prepare_reject>
1005c0ee:	200c      	movs	r0, #12
1005c0f0:	7068      	strb	r0, [r5, #1]
1005c0f2:	4620      	mov	r0, r4
1005c0f4:	f7fc fe14 	bl	10058d20 <llc_conn_clr_rx_acl_blocked>
1005c0f8:	e071      	b.n	1005c1de <__arm_cp.0_10+0x66>
1005c0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c0fc:	7880      	ldrb	r0, [r0, #2]
1005c0fe:	2806      	cmp	r0, #6
1005c100:	9f05      	ldr	r7, [sp, #20]
1005c102:	d000      	beq.n	1005c106 <LL_encryption+0x59e>
1005c104:	e540      	b.n	1005bb88 <LL_encryption+0x20>
1005c106:	200a      	movs	r0, #10
1005c108:	7050      	strb	r0, [r2, #1]
1005c10a:	2100      	movs	r1, #0
1005c10c:	9808      	ldr	r0, [sp, #32]
1005c10e:	f7fe fae1 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c112:	e53e      	b.n	1005bb92 <LL_encryption+0x2a>
1005c114:	2100      	movs	r1, #0
1005c116:	2301      	movs	r3, #1
1005c118:	f000 f87a 	bl	1005c210 <hci_encryption_change_event_push>
1005c11c:	9d08      	ldr	r5, [sp, #32]
1005c11e:	4620      	mov	r0, r4
1005c120:	f7fc fe0f 	bl	10058d42 <llc_conn_clr_tx_acl_blocked>
1005c124:	4620      	mov	r0, r4
1005c126:	f7fc fdfb 	bl	10058d20 <llc_conn_clr_rx_acl_blocked>
1005c12a:	2101      	movs	r1, #1
1005c12c:	4628      	mov	r0, r5
1005c12e:	460a      	mov	r2, r1
1005c130:	f7fe fa9e 	bl	1005a670 <LL_cpe_clr_active>
1005c134:	e52d      	b.n	1005bb92 <LL_encryption+0x2a>
1005c136:	2100      	movs	r1, #0
1005c138:	461e      	mov	r6, r3
1005c13a:	2301      	movs	r3, #1
1005c13c:	f000 f868 	bl	1005c210 <hci_encryption_change_event_push>
1005c140:	4630      	mov	r0, r6
1005c142:	9e08      	ldr	r6, [sp, #32]
1005c144:	703c      	strb	r4, [r7, #0]
1005c146:	4604      	mov	r4, r0
1005c148:	f7fc fdfb 	bl	10058d42 <llc_conn_clr_tx_acl_blocked>
1005c14c:	4620      	mov	r0, r4
1005c14e:	f7fc fde7 	bl	10058d20 <llc_conn_clr_rx_acl_blocked>
1005c152:	2201      	movs	r2, #1
1005c154:	4630      	mov	r0, r6
1005c156:	4629      	mov	r1, r5
1005c158:	f7fe fa8a 	bl	1005a670 <LL_cpe_clr_active>
1005c15c:	e03f      	b.n	1005c1de <__arm_cp.0_10+0x66>
1005c15e:	46c0      	nop			@ (mov r8, r8)
1005c160:	10061807 	.word	0x10061807
1005c164:	481f      	ldr	r0, [pc, #124]	@ (1005c1e4 <__arm_cp.0_0>)
1005c166:	6800      	ldr	r0, [r0, #0]
1005c168:	212c      	movs	r1, #44	@ 0x2c
1005c16a:	5c40      	ldrb	r0, [r0, r1]
1005c16c:	07c0      	lsls	r0, r0, #31
1005c16e:	0ec0      	lsrs	r0, r0, #27
1005c170:	9206      	str	r2, [sp, #24]
1005c172:	d003      	beq.n	1005c17c <__arm_cp.0_10+0x4>
1005c174:	2219      	movs	r2, #25
1005c176:	e002      	b.n	1005c17e <__arm_cp.0_10+0x6>

1005c178 <__arm_cp.0_10>:
1005c178:	00001703 	.word	0x00001703
1005c17c:	220a      	movs	r2, #10
1005c17e:	9d07      	ldr	r5, [sp, #28]
1005c180:	216f      	movs	r1, #111	@ 0x6f
1005c182:	43c9      	mvns	r1, r1
1005c184:	4048      	eors	r0, r1
1005c186:	b2c1      	uxtb	r1, r0
1005c188:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005c18a:	9007      	str	r0, [sp, #28]
1005c18c:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005c18e:	4817      	ldr	r0, [pc, #92]	@ (1005c1ec <__arm_cp.0_2>)
1005c190:	6800      	ldr	r0, [r0, #0]
1005c192:	6900      	ldr	r0, [r0, #16]
1005c194:	2304      	movs	r3, #4
1005c196:	9109      	str	r1, [sp, #36]	@ 0x24
1005c198:	9308      	str	r3, [sp, #32]
1005c19a:	f7f7 fcc9 	bl	10053b30 <aci_event_fifo_push_header>
1005c19e:	2707      	movs	r7, #7
1005c1a0:	2800      	cmp	r0, #0
1005c1a2:	d01a      	beq.n	1005c1da <__arm_cp.0_10+0x62>
1005c1a4:	4606      	mov	r6, r0
1005c1a6:	7204      	strb	r4, [r0, #8]
1005c1a8:	0a20      	lsrs	r0, r4, #8
1005c1aa:	7270      	strb	r0, [r6, #9]
1005c1ac:	4630      	mov	r0, r6
1005c1ae:	300a      	adds	r0, #10
1005c1b0:	3530      	adds	r5, #48	@ 0x30
1005c1b2:	2208      	movs	r2, #8
1005c1b4:	4629      	mov	r1, r5
1005c1b6:	f7f4 ff6f 	bl	10051098 <BLEPLAT_MemCpy>
1005c1ba:	9907      	ldr	r1, [sp, #28]
1005c1bc:	0a08      	lsrs	r0, r1, #8
1005c1be:	74f0      	strb	r0, [r6, #19]
1005c1c0:	74b1      	strb	r1, [r6, #18]
1005c1c2:	2005      	movs	r0, #5
1005c1c4:	71f0      	strb	r0, [r6, #7]
1005c1c6:	200d      	movs	r0, #13
1005c1c8:	71b0      	strb	r0, [r6, #6]
1005c1ca:	203e      	movs	r0, #62	@ 0x3e
1005c1cc:	7170      	strb	r0, [r6, #5]
1005c1ce:	9808      	ldr	r0, [sp, #32]
1005c1d0:	7130      	strb	r0, [r6, #4]
1005c1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c1d4:	4631      	mov	r1, r6
1005c1d6:	f7f7 fd48 	bl	10053c6a <aci_event_fifo_push>
1005c1da:	9806      	ldr	r0, [sp, #24]
1005c1dc:	7047      	strb	r7, [r0, #1]
1005c1de:	9f05      	ldr	r7, [sp, #20]
1005c1e0:	e4d7      	b.n	1005bb92 <LL_encryption+0x2a>
1005c1e2:	46c0      	nop			@ (mov r8, r8)

1005c1e4 <__arm_cp.0_0>:
1005c1e4:	20002414 	.word	0x20002414

1005c1e8 <__arm_cp.0_1>:
1005c1e8:	20002468 	.word	0x20002468

1005c1ec <__arm_cp.0_2>:
1005c1ec:	20002418 	.word	0x20002418

1005c1f0 <__arm_cp.0_3>:
1005c1f0:	10061807 	.word	0x10061807

1005c1f4 <__arm_cp.0_4>:
1005c1f4:	100614d5 	.word	0x100614d5

1005c1f8 <le4ByteToInt32>:
1005c1f8:	7801      	ldrb	r1, [r0, #0]
1005c1fa:	7842      	ldrb	r2, [r0, #1]
1005c1fc:	0212      	lsls	r2, r2, #8
1005c1fe:	1851      	adds	r1, r2, r1
1005c200:	7882      	ldrb	r2, [r0, #2]
1005c202:	0412      	lsls	r2, r2, #16
1005c204:	1889      	adds	r1, r1, r2
1005c206:	78c0      	ldrb	r0, [r0, #3]
1005c208:	0600      	lsls	r0, r0, #24
1005c20a:	1808      	adds	r0, r1, r0
1005c20c:	4770      	bx	lr
	...

1005c210 <hci_encryption_change_event_push>:
1005c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c212:	461e      	mov	r6, r3
1005c214:	4615      	mov	r5, r2
1005c216:	460f      	mov	r7, r1
1005c218:	4604      	mov	r4, r0
1005c21a:	06c0      	lsls	r0, r0, #27
1005c21c:	d406      	bmi.n	1005c22c <hci_encryption_change_event_push+0x1c>
1005c21e:	4813      	ldr	r0, [pc, #76]	@ (1005c26c <__arm_cp.2_0>)
1005c220:	6800      	ldr	r0, [r0, #0]
1005c222:	2136      	movs	r1, #54	@ 0x36
1005c224:	5640      	ldrsb	r0, [r0, r1]
1005c226:	2800      	cmp	r0, #0
1005c228:	d404      	bmi.n	1005c234 <hci_encryption_change_event_push+0x24>
1005c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c22c:	20bf      	movs	r0, #191	@ 0xbf
1005c22e:	4004      	ands	r4, r0
1005c230:	2206      	movs	r2, #6
1005c232:	e000      	b.n	1005c236 <hci_encryption_change_event_push+0x26>
1005c234:	2216      	movs	r2, #22
1005c236:	480e      	ldr	r0, [pc, #56]	@ (1005c270 <__arm_cp.2_1>)
1005c238:	6800      	ldr	r0, [r0, #0]
1005c23a:	0761      	lsls	r1, r4, #29
1005c23c:	0ec9      	lsrs	r1, r1, #27
1005c23e:	1840      	adds	r0, r0, r1
1005c240:	6900      	ldr	r0, [r0, #16]
1005c242:	2302      	movs	r3, #2
1005c244:	4621      	mov	r1, r4
1005c246:	f7f7 fc73 	bl	10053b30 <aci_event_fifo_push_header>
1005c24a:	2800      	cmp	r0, #0
1005c24c:	d0ed      	beq.n	1005c22a <hci_encryption_change_event_push+0x1a>
1005c24e:	4601      	mov	r1, r0
1005c250:	7205      	strb	r5, [r0, #8]
1005c252:	7286      	strb	r6, [r0, #10]
1005c254:	71c7      	strb	r7, [r0, #7]
1005c256:	2004      	movs	r0, #4
1005c258:	7188      	strb	r0, [r1, #6]
1005c25a:	2208      	movs	r2, #8
1005c25c:	714a      	strb	r2, [r1, #5]
1005c25e:	7108      	strb	r0, [r1, #4]
1005c260:	0a28      	lsrs	r0, r5, #8
1005c262:	7248      	strb	r0, [r1, #9]
1005c264:	4620      	mov	r0, r4
1005c266:	f7f7 fd00 	bl	10053c6a <aci_event_fifo_push>
1005c26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c26c <__arm_cp.2_0>:
1005c26c:	20002468 	.word	0x20002468

1005c270 <__arm_cp.2_1>:
1005c270:	20002418 	.word	0x20002418

1005c274 <hci_encryption_key_refresh_complete_event_push>:
1005c274:	b5b0      	push	{r4, r5, r7, lr}
1005c276:	460d      	mov	r5, r1
1005c278:	4604      	mov	r4, r0
1005c27a:	06c0      	lsls	r0, r0, #27
1005c27c:	d406      	bmi.n	1005c28c <hci_encryption_key_refresh_complete_event_push+0x18>
1005c27e:	4814      	ldr	r0, [pc, #80]	@ (1005c2d0 <__arm_cp.3_0>)
1005c280:	6800      	ldr	r0, [r0, #0]
1005c282:	213b      	movs	r1, #59	@ 0x3b
1005c284:	5640      	ldrsb	r0, [r0, r1]
1005c286:	2800      	cmp	r0, #0
1005c288:	d404      	bmi.n	1005c294 <hci_encryption_key_refresh_complete_event_push+0x20>
1005c28a:	bdb0      	pop	{r4, r5, r7, pc}
1005c28c:	20bf      	movs	r0, #191	@ 0xbf
1005c28e:	4004      	ands	r4, r0
1005c290:	2207      	movs	r2, #7
1005c292:	e000      	b.n	1005c296 <hci_encryption_key_refresh_complete_event_push+0x22>
1005c294:	2217      	movs	r2, #23
1005c296:	480f      	ldr	r0, [pc, #60]	@ (1005c2d4 <__arm_cp.3_1>)
1005c298:	6800      	ldr	r0, [r0, #0]
1005c29a:	0761      	lsls	r1, r4, #29
1005c29c:	0ec9      	lsrs	r1, r1, #27
1005c29e:	1840      	adds	r0, r0, r1
1005c2a0:	6900      	ldr	r0, [r0, #16]
1005c2a2:	2302      	movs	r3, #2
1005c2a4:	4621      	mov	r1, r4
1005c2a6:	f7f7 fc43 	bl	10053b30 <aci_event_fifo_push_header>
1005c2aa:	2800      	cmp	r0, #0
1005c2ac:	d0ed      	beq.n	1005c28a <hci_encryption_key_refresh_complete_event_push+0x16>
1005c2ae:	4601      	mov	r1, r0
1005c2b0:	7205      	strb	r5, [r0, #8]
1005c2b2:	2000      	movs	r0, #0
1005c2b4:	71c8      	strb	r0, [r1, #7]
1005c2b6:	2003      	movs	r0, #3
1005c2b8:	7188      	strb	r0, [r1, #6]
1005c2ba:	2030      	movs	r0, #48	@ 0x30
1005c2bc:	7148      	strb	r0, [r1, #5]
1005c2be:	2004      	movs	r0, #4
1005c2c0:	7108      	strb	r0, [r1, #4]
1005c2c2:	0a28      	lsrs	r0, r5, #8
1005c2c4:	7248      	strb	r0, [r1, #9]
1005c2c6:	4620      	mov	r0, r4
1005c2c8:	f7f7 fccf 	bl	10053c6a <aci_event_fifo_push>
1005c2cc:	bdb0      	pop	{r4, r5, r7, pc}
1005c2ce:	46c0      	nop			@ (mov r8, r8)

1005c2d0 <__arm_cp.3_0>:
1005c2d0:	20002468 	.word	0x20002468

1005c2d4 <__arm_cp.3_1>:
1005c2d4:	20002418 	.word	0x20002418

1005c2d8 <llc_enc_prepare_reject>:
1005c2d8:	2203      	movs	r2, #3
1005c2da:	7002      	strb	r2, [r0, #0]
1005c2dc:	2397      	movs	r3, #151	@ 0x97
1005c2de:	005b      	lsls	r3, r3, #1
1005c2e0:	5cc9      	ldrb	r1, [r1, r3]
1005c2e2:	0749      	lsls	r1, r1, #29
1005c2e4:	d403      	bmi.n	1005c2ee <llc_enc_prepare_reject+0x16>
1005c2e6:	2306      	movs	r3, #6
1005c2e8:	210d      	movs	r1, #13
1005c2ea:	2202      	movs	r2, #2
1005c2ec:	e003      	b.n	1005c2f6 <llc_enc_prepare_reject+0x1e>
1005c2ee:	2106      	movs	r1, #6
1005c2f0:	7101      	strb	r1, [r0, #4]
1005c2f2:	2111      	movs	r1, #17
1005c2f4:	4613      	mov	r3, r2
1005c2f6:	70c3      	strb	r3, [r0, #3]
1005c2f8:	7081      	strb	r1, [r0, #2]
1005c2fa:	7042      	strb	r2, [r0, #1]
1005c2fc:	4770      	bx	lr

1005c2fe <LL_Get_LTK>:
1005c2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c300:	4614      	mov	r4, r2
1005c302:	4606      	mov	r6, r0
1005c304:	4608      	mov	r0, r1
1005c306:	f7fc fb47 	bl	10058998 <llc_conn_get_cntxt_per_p_from_handle>
1005c30a:	2130      	movs	r1, #48	@ 0x30
1005c30c:	5641      	ldrsb	r1, [r0, r1]
1005c30e:	2900      	cmp	r1, #0
1005c310:	d405      	bmi.n	1005c31e <LL_Get_LTK+0x20>
1005c312:	302c      	adds	r0, #44	@ 0x2c
1005c314:	7800      	ldrb	r0, [r0, #0]
1005c316:	2802      	cmp	r0, #2
1005c318:	d103      	bne.n	1005c322 <LL_Get_LTK+0x24>
1005c31a:	2512      	movs	r5, #18
1005c31c:	e018      	b.n	1005c350 <LL_Get_LTK+0x52>
1005c31e:	2502      	movs	r5, #2
1005c320:	e016      	b.n	1005c350 <LL_Get_LTK+0x52>
1005c322:	b2cf      	uxtb	r7, r1
1005c324:	2500      	movs	r5, #0
1005c326:	4638      	mov	r0, r7
1005c328:	4629      	mov	r1, r5
1005c32a:	f7fe f9d3 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c32e:	4638      	mov	r0, r7
1005c330:	4629      	mov	r1, r5
1005c332:	f7fe f9dc 	bl	1005a6ee <LL_cpe_get_cntxt>
1005c336:	4601      	mov	r1, r0
1005c338:	302b      	adds	r0, #43	@ 0x2b
1005c33a:	2e00      	cmp	r6, #0
1005c33c:	d001      	beq.n	1005c342 <LL_Get_LTK+0x44>
1005c33e:	7005      	strb	r5, [r0, #0]
1005c340:	e006      	b.n	1005c350 <LL_Get_LTK+0x52>
1005c342:	2201      	movs	r2, #1
1005c344:	7002      	strb	r2, [r0, #0]
1005c346:	3110      	adds	r1, #16
1005c348:	2210      	movs	r2, #16
1005c34a:	4620      	mov	r0, r4
1005c34c:	f005 f8c2 	bl	100614d4 <char_copy>
1005c350:	4628      	mov	r0, r5
1005c352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c354 <LL_feature_exchange>:
1005c354:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c356:	b085      	sub	sp, #20
1005c358:	461c      	mov	r4, r3
1005c35a:	4615      	mov	r5, r2
1005c35c:	460e      	mov	r6, r1
1005c35e:	4607      	mov	r7, r0
1005c360:	f7fe f9c5 	bl	1005a6ee <LL_cpe_get_cntxt>
1005c364:	9003      	str	r0, [sp, #12]
1005c366:	9702      	str	r7, [sp, #8]
1005c368:	4638      	mov	r0, r7
1005c36a:	f7fc fb07 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005c36e:	4607      	mov	r7, r0
1005c370:	20ff      	movs	r0, #255	@ 0xff
1005c372:	2d06      	cmp	r5, #6
1005c374:	d900      	bls.n	1005c378 <LL_feature_exchange+0x24>
1005c376:	e099      	b.n	1005c4ac <LL_feature_exchange+0x158>
1005c378:	9604      	str	r6, [sp, #16]
1005c37a:	2197      	movs	r1, #151	@ 0x97
1005c37c:	0049      	lsls	r1, r1, #1
1005c37e:	187b      	adds	r3, r7, r1
1005c380:	463e      	mov	r6, r7
1005c382:	362c      	adds	r6, #44	@ 0x2c
1005c384:	447d      	add	r5, pc
1005c386:	792d      	ldrb	r5, [r5, #4]
1005c388:	006d      	lsls	r5, r5, #1
1005c38a:	44af      	add	pc, r5
1005c38c:	298f0803 	.word	0x298f0803
1005c390:	004a8f8f 	.word	0x004a8f8f
1005c394:	9904      	ldr	r1, [sp, #16]
1005c396:	2901      	cmp	r1, #1
1005c398:	d160      	bne.n	1005c45c <LL_feature_exchange+0x108>
1005c39a:	2009      	movs	r0, #9
1005c39c:	e086      	b.n	1005c4ac <LL_feature_exchange+0x158>
1005c39e:	78a1      	ldrb	r1, [r4, #2]
1005c3a0:	290e      	cmp	r1, #14
1005c3a2:	d002      	beq.n	1005c3aa <LL_feature_exchange+0x56>
1005c3a4:	2908      	cmp	r1, #8
1005c3a6:	d000      	beq.n	1005c3aa <LL_feature_exchange+0x56>
1005c3a8:	e080      	b.n	1005c4ac <LL_feature_exchange+0x158>
1005c3aa:	1ce4      	adds	r4, r4, #3
1005c3ac:	9903      	ldr	r1, [sp, #12]
1005c3ae:	3108      	adds	r1, #8
1005c3b0:	4605      	mov	r5, r0
1005c3b2:	2208      	movs	r2, #8
1005c3b4:	4620      	mov	r0, r4
1005c3b6:	461e      	mov	r6, r3
1005c3b8:	f005 f88c 	bl	100614d4 <char_copy>
1005c3bc:	2205      	movs	r2, #5
1005c3be:	4630      	mov	r0, r6
1005c3c0:	4621      	mov	r1, r4
1005c3c2:	f7f4 fe69 	bl	10051098 <BLEPLAT_MemCpy>
1005c3c6:	9e02      	ldr	r6, [sp, #8]
1005c3c8:	4630      	mov	r0, r6
1005c3ca:	9c04      	ldr	r4, [sp, #16]
1005c3cc:	4621      	mov	r1, r4
1005c3ce:	f7fe f981 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c3d2:	2203      	movs	r2, #3
1005c3d4:	2300      	movs	r3, #0
1005c3d6:	4630      	mov	r0, r6
1005c3d8:	4621      	mov	r1, r4
1005c3da:	f7fe f932 	bl	1005a642 <LL_cpe_set_active>
1005c3de:	e01e      	b.n	1005c41e <LL_feature_exchange+0xca>
1005c3e0:	78a1      	ldrb	r1, [r4, #2]
1005c3e2:	2907      	cmp	r1, #7
1005c3e4:	d046      	beq.n	1005c474 <LL_feature_exchange+0x120>
1005c3e6:	2909      	cmp	r1, #9
1005c3e8:	d160      	bne.n	1005c4ac <LL_feature_exchange+0x158>
1005c3ea:	4605      	mov	r5, r0
1005c3ec:	1ce4      	adds	r4, r4, #3
1005c3ee:	2205      	movs	r2, #5
1005c3f0:	4618      	mov	r0, r3
1005c3f2:	4621      	mov	r1, r4
1005c3f4:	f7f4 fe50 	bl	10051098 <BLEPLAT_MemCpy>
1005c3f8:	9803      	ldr	r0, [sp, #12]
1005c3fa:	7c40      	ldrb	r0, [r0, #17]
1005c3fc:	2800      	cmp	r0, #0
1005c3fe:	d005      	beq.n	1005c40c <LL_feature_exchange+0xb8>
1005c400:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005c402:	2080      	movs	r0, #128	@ 0x80
1005c404:	2100      	movs	r1, #0
1005c406:	4623      	mov	r3, r4
1005c408:	f006 fa74 	bl	100628f4 <hci_le_read_remote_features_complete_event_push_noinline>
1005c40c:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005c40e:	2110      	movs	r1, #16
1005c410:	4301      	orrs	r1, r0
1005c412:	6631      	str	r1, [r6, #96]	@ 0x60
1005c414:	2203      	movs	r2, #3
1005c416:	9802      	ldr	r0, [sp, #8]
1005c418:	9904      	ldr	r1, [sp, #16]
1005c41a:	f7fe f929 	bl	1005a670 <LL_cpe_clr_active>
1005c41e:	4628      	mov	r0, r5
1005c420:	e044      	b.n	1005c4ac <LL_feature_exchange+0x158>
1005c422:	9002      	str	r0, [sp, #8]
1005c424:	2009      	movs	r0, #9
1005c426:	9001      	str	r0, [sp, #4]
1005c428:	7060      	strb	r0, [r4, #1]
1005c42a:	2003      	movs	r0, #3
1005c42c:	7020      	strb	r0, [r4, #0]
1005c42e:	1ce7      	adds	r7, r4, #3
1005c430:	4638      	mov	r0, r7
1005c432:	f000 f83d 	bl	1005c4b0 <LL_Get_Supported_Features>
1005c436:	79a0      	ldrb	r0, [r4, #6]
1005c438:	21f7      	movs	r1, #247	@ 0xf7
1005c43a:	4001      	ands	r1, r0
1005c43c:	71a1      	strb	r1, [r4, #6]
1005c43e:	2508      	movs	r5, #8
1005c440:	4638      	mov	r0, r7
1005c442:	9f03      	ldr	r7, [sp, #12]
1005c444:	4639      	mov	r1, r7
1005c446:	462a      	mov	r2, r5
1005c448:	f005 f844 	bl	100614d4 <char_copy>
1005c44c:	9804      	ldr	r0, [sp, #16]
1005c44e:	2801      	cmp	r0, #1
1005c450:	d108      	bne.n	1005c464 <LL_feature_exchange+0x110>
1005c452:	7830      	ldrb	r0, [r6, #0]
1005c454:	2802      	cmp	r0, #2
1005c456:	d126      	bne.n	1005c4a6 <LL_feature_exchange+0x152>
1005c458:	70a5      	strb	r5, [r4, #2]
1005c45a:	e026      	b.n	1005c4aa <LL_feature_exchange+0x156>
1005c45c:	4604      	mov	r4, r0
1005c45e:	2203      	movs	r2, #3
1005c460:	9802      	ldr	r0, [sp, #8]
1005c462:	e01c      	b.n	1005c49e <LL_feature_exchange+0x14a>
1005c464:	9801      	ldr	r0, [sp, #4]
1005c466:	70a0      	strb	r0, [r4, #2]
1005c468:	78e0      	ldrb	r0, [r4, #3]
1005c46a:	7a39      	ldrb	r1, [r7, #8]
1005c46c:	4001      	ands	r1, r0
1005c46e:	70e1      	strb	r1, [r4, #3]
1005c470:	7439      	strb	r1, [r7, #16]
1005c472:	e01a      	b.n	1005c4aa <LL_feature_exchange+0x156>
1005c474:	7831      	ldrb	r1, [r6, #0]
1005c476:	2903      	cmp	r1, #3
1005c478:	d118      	bne.n	1005c4ac <LL_feature_exchange+0x158>
1005c47a:	4604      	mov	r4, r0
1005c47c:	7818      	ldrb	r0, [r3, #0]
1005c47e:	21f7      	movs	r1, #247	@ 0xf7
1005c480:	4001      	ands	r1, r0
1005c482:	7019      	strb	r1, [r3, #0]
1005c484:	9b03      	ldr	r3, [sp, #12]
1005c486:	7c58      	ldrb	r0, [r3, #17]
1005c488:	2800      	cmp	r0, #0
1005c48a:	d005      	beq.n	1005c498 <LL_feature_exchange+0x144>
1005c48c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005c48e:	3308      	adds	r3, #8
1005c490:	2080      	movs	r0, #128	@ 0x80
1005c492:	211a      	movs	r1, #26
1005c494:	f006 fa2e 	bl	100628f4 <hci_le_read_remote_features_complete_event_push_noinline>
1005c498:	2203      	movs	r2, #3
1005c49a:	9802      	ldr	r0, [sp, #8]
1005c49c:	9904      	ldr	r1, [sp, #16]
1005c49e:	f7fe f8e7 	bl	1005a670 <LL_cpe_clr_active>
1005c4a2:	4620      	mov	r0, r4
1005c4a4:	e002      	b.n	1005c4ac <LL_feature_exchange+0x158>
1005c4a6:	200e      	movs	r0, #14
1005c4a8:	70a0      	strb	r0, [r4, #2]
1005c4aa:	9802      	ldr	r0, [sp, #8]
1005c4ac:	b005      	add	sp, #20
1005c4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c4b0 <LL_Get_Supported_Features>:
1005c4b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c4b2:	9000      	str	r0, [sp, #0]
1005c4b4:	f7fb fd8c 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
1005c4b8:	4605      	mov	r5, r0
1005c4ba:	f7fd ffe0 	bl	1005a47e <llc_priv_controller_privacy_csr_ucfg_weak>
1005c4be:	b2c0      	uxtb	r0, r0
1005c4c0:	21c0      	movs	r1, #192	@ 0xc0
1005c4c2:	4341      	muls	r1, r0
1005c4c4:	0628      	lsls	r0, r5, #24
1005c4c6:	0cc5      	lsrs	r5, r0, #19
1005c4c8:	430d      	orrs	r5, r1
1005c4ca:	2009      	movs	r0, #9
1005c4cc:	0206      	lsls	r6, r0, #8
1005c4ce:	f7f1 f879 	bl	1004d5c4 <phy_upd_csr_ucfg>
1005c4d2:	b2c7      	uxtb	r7, r0
1005c4d4:	4377      	muls	r7, r6
1005c4d6:	432f      	orrs	r7, r5
1005c4d8:	f002 f906 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005c4dc:	0305      	lsls	r5, r0, #12
1005c4de:	433d      	orrs	r5, r7
1005c4e0:	4e2c      	ldr	r6, [pc, #176]	@ (1005c594 <__arm_cp.1_0>)
1005c4e2:	47b0      	blx	r6
1005c4e4:	b2c0      	uxtb	r0, r0
1005c4e6:	4f2c      	ldr	r7, [pc, #176]	@ (1005c598 <__arm_cp.1_1>)
1005c4e8:	4347      	muls	r7, r0
1005c4ea:	432f      	orrs	r7, r5
1005c4ec:	200d      	movs	r0, #13
1005c4ee:	0685      	lsls	r5, r0, #26
1005c4f0:	f7fd ffb2 	bl	1005a458 <cis_csr_ucfg_weak>
1005c4f4:	b2c4      	uxtb	r4, r0
1005c4f6:	436c      	muls	r4, r5
1005c4f8:	433c      	orrs	r4, r7
1005c4fa:	2073      	movs	r0, #115	@ 0x73
1005c4fc:	0445      	lsls	r5, r0, #17
1005c4fe:	f7fb fd0b 	bl	10057f18 <cte_csr_ucfg_weak>
1005c502:	b2c7      	uxtb	r7, r0
1005c504:	436f      	muls	r7, r5
1005c506:	4327      	orrs	r7, r4
1005c508:	f7fb fd06 	bl	10057f18 <cte_csr_ucfg_weak>
1005c50c:	4605      	mov	r5, r0
1005c50e:	47b0      	blx	r6
1005c510:	4028      	ands	r0, r5
1005c512:	b2c0      	uxtb	r0, r0
1005c514:	2503      	movs	r5, #3
1005c516:	04ec      	lsls	r4, r5, #19
1005c518:	4344      	muls	r4, r0
1005c51a:	433c      	orrs	r4, r7
1005c51c:	f7fd ff9a 	bl	1005a454 <bis_csr_ucfg_weak>
1005c520:	0780      	lsls	r0, r0, #30
1005c522:	4247      	negs	r7, r0
1005c524:	4327      	orrs	r7, r4
1005c526:	f002 f8cd 	bl	1005e6c4 <llc_get_channel_sel_algo2_enabled>
1005c52a:	0380      	lsls	r0, r0, #14
1005c52c:	4338      	orrs	r0, r7
1005c52e:	491b      	ldr	r1, [pc, #108]	@ (1005c59c <__arm_cp.1_2>)
1005c530:	4301      	orrs	r1, r0
1005c532:	9101      	str	r1, [sp, #4]
1005c534:	f7fb fd4e 	bl	10057fd4 <pcl_csr_ucfg_weak>
1005c538:	b2c0      	uxtb	r0, r0
1005c53a:	240e      	movs	r4, #14
1005c53c:	4344      	muls	r4, r0
1005c53e:	f7fb fbf6 	bl	10057d2e <chc_csr_ucfg_weak>
1005c542:	0600      	lsls	r0, r0, #24
1005c544:	0c47      	lsrs	r7, r0, #17
1005c546:	4327      	orrs	r7, r4
1005c548:	47b0      	blx	r6
1005c54a:	21f9      	movs	r1, #249	@ 0xf9
1005c54c:	0109      	lsls	r1, r1, #4
1005c54e:	0104      	lsls	r4, r0, #4
1005c550:	400c      	ands	r4, r1
1005c552:	433c      	orrs	r4, r7
1005c554:	022e      	lsls	r6, r5, #8
1005c556:	f002 f8c7 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005c55a:	4605      	mov	r5, r0
1005c55c:	4375      	muls	r5, r6
1005c55e:	4325      	orrs	r5, r4
1005c560:	2001      	movs	r0, #1
1005c562:	02c4      	lsls	r4, r0, #11
1005c564:	f7fb fd3a 	bl	10057fdc <scan_csr_ucfg_weak>
1005c568:	0600      	lsls	r0, r0, #24
1005c56a:	0b00      	lsrs	r0, r0, #12
1005c56c:	1904      	adds	r4, r0, r4
1005c56e:	f7fd ff7f 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005c572:	b2c0      	uxtb	r0, r0
1005c574:	4360      	muls	r0, r4
1005c576:	4328      	orrs	r0, r5
1005c578:	2161      	movs	r1, #97	@ 0x61
1005c57a:	4301      	orrs	r1, r0
1005c57c:	4808      	ldr	r0, [pc, #32]	@ (1005c5a0 <__arm_cp.1_3>)
1005c57e:	6800      	ldr	r0, [r0, #0]
1005c580:	6a00      	ldr	r0, [r0, #32]
1005c582:	4008      	ands	r0, r1
1005c584:	9002      	str	r0, [sp, #8]
1005c586:	a901      	add	r1, sp, #4
1005c588:	2208      	movs	r2, #8
1005c58a:	9800      	ldr	r0, [sp, #0]
1005c58c:	f7f4 fd84 	bl	10051098 <BLEPLAT_MemCpy>
1005c590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c592:	46c0      	nop			@ (mov r8, r8)

1005c594 <__arm_cp.1_0>:
1005c594:	1005a46d 	.word	0x1005a46d

1005c598 <__arm_cp.1_1>:
1005c598:	03002000 	.word	0x03002000

1005c59c <__arm_cp.1_2>:
1005c59c:	0800001d 	.word	0x0800001d

1005c5a0 <__arm_cp.1_3>:
1005c5a0:	20002468 	.word	0x20002468

1005c5a4 <LL_Read_Remote_Used_Features>:
1005c5a4:	b570      	push	{r4, r5, r6, lr}
1005c5a6:	4604      	mov	r4, r0
1005c5a8:	4608      	mov	r0, r1
1005c5aa:	f7fc f9f5 	bl	10058998 <llc_conn_get_cntxt_per_p_from_handle>
1005c5ae:	2800      	cmp	r0, #0
1005c5b0:	d01c      	beq.n	1005c5ec <LL_Read_Remote_Used_Features+0x48>
1005c5b2:	4606      	mov	r6, r0
1005c5b4:	362c      	adds	r6, #44	@ 0x2c
1005c5b6:	7831      	ldrb	r1, [r6, #0]
1005c5b8:	2903      	cmp	r1, #3
1005c5ba:	d107      	bne.n	1005c5cc <LL_Read_Remote_Used_Features+0x28>
1005c5bc:	2197      	movs	r1, #151	@ 0x97
1005c5be:	0049      	lsls	r1, r1, #1
1005c5c0:	1840      	adds	r0, r0, r1
1005c5c2:	7800      	ldrb	r0, [r0, #0]
1005c5c4:	0700      	lsls	r0, r0, #28
1005c5c6:	d401      	bmi.n	1005c5cc <LL_Read_Remote_Used_Features+0x28>
1005c5c8:	241a      	movs	r4, #26
1005c5ca:	e024      	b.n	1005c616 <LL_Read_Remote_Used_Features+0x72>
1005c5cc:	7930      	ldrb	r0, [r6, #4]
1005c5ce:	2101      	movs	r1, #1
1005c5d0:	f7fe f829 	bl	1005a626 <LL_cpe_get_active_status>
1005c5d4:	2800      	cmp	r0, #0
1005c5d6:	d00d      	beq.n	1005c5f4 <LL_Read_Remote_Used_Features+0x50>
1005c5d8:	2c00      	cmp	r4, #0
1005c5da:	d109      	bne.n	1005c5f0 <LL_Read_Remote_Used_Features+0x4c>
1005c5dc:	7930      	ldrb	r0, [r6, #4]
1005c5de:	2101      	movs	r1, #1
1005c5e0:	f7fe fe4a 	bl	1005b278 <LL_cpe_conn_get_proc_id_from_sm>
1005c5e4:	2803      	cmp	r0, #3
1005c5e6:	d103      	bne.n	1005c5f0 <LL_Read_Remote_Used_Features+0x4c>
1005c5e8:	2400      	movs	r4, #0
1005c5ea:	e014      	b.n	1005c616 <LL_Read_Remote_Used_Features+0x72>
1005c5ec:	2402      	movs	r4, #2
1005c5ee:	e012      	b.n	1005c616 <LL_Read_Remote_Used_Features+0x72>
1005c5f0:	243a      	movs	r4, #58	@ 0x3a
1005c5f2:	e010      	b.n	1005c616 <LL_Read_Remote_Used_Features+0x72>
1005c5f4:	7930      	ldrb	r0, [r6, #4]
1005c5f6:	2501      	movs	r5, #1
1005c5f8:	4629      	mov	r1, r5
1005c5fa:	f7fe f878 	bl	1005a6ee <LL_cpe_get_cntxt>
1005c5fe:	7444      	strb	r4, [r0, #17]
1005c600:	7930      	ldrb	r0, [r6, #4]
1005c602:	4629      	mov	r1, r5
1005c604:	f7fe f866 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c608:	7930      	ldrb	r0, [r6, #4]
1005c60a:	2203      	movs	r2, #3
1005c60c:	2400      	movs	r4, #0
1005c60e:	4629      	mov	r1, r5
1005c610:	4623      	mov	r3, r4
1005c612:	f7fe f816 	bl	1005a642 <LL_cpe_set_active>
1005c616:	4620      	mov	r0, r4
1005c618:	bd70      	pop	{r4, r5, r6, pc}

1005c61a <LLC_update_le_ping_params>:
1005c61a:	b5b0      	push	{r4, r5, r7, lr}
1005c61c:	4615      	mov	r5, r2
1005c61e:	460c      	mov	r4, r1
1005c620:	f7fc f9ac 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005c624:	2185      	movs	r1, #133	@ 0x85
1005c626:	0049      	lsls	r1, r1, #1
1005c628:	5a43      	ldrh	r3, [r0, r1]
1005c62a:	2d00      	cmp	r5, #0
1005c62c:	461a      	mov	r2, r3
1005c62e:	d000      	beq.n	1005c632 <LLC_update_le_ping_params+0x18>
1005c630:	4622      	mov	r2, r4
1005c632:	1841      	adds	r1, r0, r1
1005c634:	8b0c      	ldrh	r4, [r1, #24]
1005c636:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005c638:	4365      	muls	r5, r4
1005c63a:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005c63c:	300a      	adds	r0, #10
1005c63e:	4368      	muls	r0, r5
1005c640:	0b00      	lsrs	r0, r0, #12
1005c642:	b284      	uxth	r4, r0
1005c644:	1d64      	adds	r4, r4, #5
1005c646:	4294      	cmp	r4, r2
1005c648:	d300      	bcc.n	1005c64c <LLC_update_le_ping_params+0x32>
1005c64a:	4622      	mov	r2, r4
1005c64c:	b294      	uxth	r4, r2
1005c64e:	42a3      	cmp	r3, r4
1005c650:	d00b      	beq.n	1005c66a <LLC_update_le_ping_params+0x50>
1005c652:	8048      	strh	r0, [r1, #2]
1005c654:	800a      	strh	r2, [r1, #0]
1005c656:	7908      	ldrb	r0, [r1, #4]
1005c658:	2801      	cmp	r0, #1
1005c65a:	d006      	beq.n	1005c66a <LLC_update_le_ping_params+0x50>
1005c65c:	2002      	movs	r0, #2
1005c65e:	7108      	strb	r0, [r1, #4]
1005c660:	2012      	movs	r0, #18
1005c662:	f004 fdaf 	bl	100611c4 <tsk_notify_idx>
1005c666:	f7f3 ff30 	bl	100504ca <BLE_STACK_ProcessRequest>
1005c66a:	bdb0      	pop	{r4, r5, r7, pc}

1005c66c <LLC_init_le_ping_params>:
1005c66c:	b5b0      	push	{r4, r5, r7, lr}
1005c66e:	2185      	movs	r1, #133	@ 0x85
1005c670:	004a      	lsls	r2, r1, #1
1005c672:	1881      	adds	r1, r0, r2
1005c674:	8b0b      	ldrh	r3, [r1, #24]
1005c676:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005c678:	435c      	muls	r4, r3
1005c67a:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005c67c:	330a      	adds	r3, #10
1005c67e:	4363      	muls	r3, r4
1005c680:	0b1b      	lsrs	r3, r3, #12
1005c682:	b29c      	uxth	r4, r3
1005c684:	4d07      	ldr	r5, [pc, #28]	@ (1005c6a4 <__arm_cp.3_0>)
1005c686:	42ac      	cmp	r4, r5
1005c688:	d800      	bhi.n	1005c68c <LLC_init_le_ping_params+0x20>
1005c68a:	462c      	mov	r4, r5
1005c68c:	1d64      	adds	r4, r4, #5
1005c68e:	5284      	strh	r4, [r0, r2]
1005c690:	2001      	movs	r0, #1
1005c692:	7108      	strb	r0, [r1, #4]
1005c694:	804b      	strh	r3, [r1, #2]
1005c696:	2012      	movs	r0, #18
1005c698:	f004 fd94 	bl	100611c4 <tsk_notify_idx>
1005c69c:	f7f3 ff15 	bl	100504ca <BLE_STACK_ProcessRequest>
1005c6a0:	bdb0      	pop	{r4, r5, r7, pc}
1005c6a2:	46c0      	nop			@ (mov r8, r8)

1005c6a4 <__arm_cp.3_0>:
1005c6a4:	00000bb3 	.word	0x00000bb3

1005c6a8 <LLC_authenticated_payload_timeout_processing>:
1005c6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c6aa:	b089      	sub	sp, #36	@ 0x24
1005c6ac:	2400      	movs	r4, #0
1005c6ae:	4620      	mov	r0, r4
1005c6b0:	f7fc f964 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005c6b4:	9000      	str	r0, [sp, #0]
1005c6b6:	2001      	movs	r0, #1
1005c6b8:	9008      	str	r0, [sp, #32]
1005c6ba:	4843      	ldr	r0, [pc, #268]	@ (1005c7c8 <__arm_cp.5_0>)
1005c6bc:	6800      	ldr	r0, [r0, #0]
1005c6be:	2134      	movs	r1, #52	@ 0x34
1005c6c0:	5c40      	ldrb	r0, [r0, r1]
1005c6c2:	4284      	cmp	r4, r0
1005c6c4:	d300      	bcc.n	1005c6c8 <LLC_authenticated_payload_timeout_processing+0x20>
1005c6c6:	e07d      	b.n	1005c7c4 <LLC_authenticated_payload_timeout_processing+0x11c>
1005c6c8:	204d      	movs	r0, #77	@ 0x4d
1005c6ca:	0080      	lsls	r0, r0, #2
1005c6cc:	9405      	str	r4, [sp, #20]
1005c6ce:	4360      	muls	r0, r4
1005c6d0:	9900      	ldr	r1, [sp, #0]
1005c6d2:	180c      	adds	r4, r1, r0
1005c6d4:	202c      	movs	r0, #44	@ 0x2c
1005c6d6:	5c20      	ldrb	r0, [r4, r0]
1005c6d8:	21fe      	movs	r1, #254	@ 0xfe
1005c6da:	4001      	ands	r1, r0
1005c6dc:	2902      	cmp	r1, #2
1005c6de:	d16e      	bne.n	1005c7be <LLC_authenticated_payload_timeout_processing+0x116>
1005c6e0:	2101      	movs	r1, #1
1005c6e2:	9e00      	ldr	r6, [sp, #0]
1005c6e4:	4630      	mov	r0, r6
1005c6e6:	9107      	str	r1, [sp, #28]
1005c6e8:	f7fc fbe4 	bl	10058eb4 <llc_conn_get_enc_on>
1005c6ec:	4605      	mov	r5, r0
1005c6ee:	2100      	movs	r1, #0
1005c6f0:	4630      	mov	r0, r6
1005c6f2:	9101      	str	r1, [sp, #4]
1005c6f4:	f7fc fbde 	bl	10058eb4 <llc_conn_get_enc_on>
1005c6f8:	1e41      	subs	r1, r0, #1
1005c6fa:	4188      	sbcs	r0, r1
1005c6fc:	2d00      	cmp	r5, #0
1005c6fe:	9908      	ldr	r1, [sp, #32]
1005c700:	9104      	str	r1, [sp, #16]
1005c702:	d100      	bne.n	1005c706 <LLC_authenticated_payload_timeout_processing+0x5e>
1005c704:	9004      	str	r0, [sp, #16]
1005c706:	2043      	movs	r0, #67	@ 0x43
1005c708:	0080      	lsls	r0, r0, #2
1005c70a:	1820      	adds	r0, r4, r0
1005c70c:	9003      	str	r0, [sp, #12]
1005c70e:	2085      	movs	r0, #133	@ 0x85
1005c710:	0040      	lsls	r0, r0, #1
1005c712:	1820      	adds	r0, r4, r0
1005c714:	9002      	str	r0, [sp, #8]
1005c716:	2087      	movs	r0, #135	@ 0x87
1005c718:	0040      	lsls	r0, r0, #1
1005c71a:	1823      	adds	r3, r4, r0
1005c71c:	9f08      	ldr	r7, [sp, #32]
1005c71e:	9306      	str	r3, [sp, #24]
1005c720:	781c      	ldrb	r4, [r3, #0]
1005c722:	26f0      	movs	r6, #240	@ 0xf0
1005c724:	4026      	ands	r6, r4
1005c726:	250f      	movs	r5, #15
1005c728:	4025      	ands	r5, r4
1005c72a:	2d03      	cmp	r5, #3
1005c72c:	d01f      	beq.n	1005c76e <LLC_authenticated_payload_timeout_processing+0xc6>
1005c72e:	2d02      	cmp	r5, #2
1005c730:	d00b      	beq.n	1005c74a <LLC_authenticated_payload_timeout_processing+0xa2>
1005c732:	2d01      	cmp	r5, #1
1005c734:	d12b      	bne.n	1005c78e <LLC_authenticated_payload_timeout_processing+0xe6>
1005c736:	9804      	ldr	r0, [sp, #16]
1005c738:	2800      	cmp	r0, #0
1005c73a:	d02c      	beq.n	1005c796 <LLC_authenticated_payload_timeout_processing+0xee>
1005c73c:	2012      	movs	r0, #18
1005c73e:	2101      	movs	r1, #1
1005c740:	f004 fd52 	bl	100611e8 <tsk_wait_resource_idx>
1005c744:	9b06      	ldr	r3, [sp, #24]
1005c746:	2502      	movs	r5, #2
1005c748:	e025      	b.n	1005c796 <LLC_authenticated_payload_timeout_processing+0xee>
1005c74a:	9803      	ldr	r0, [sp, #12]
1005c74c:	8800      	ldrh	r0, [r0, #0]
1005c74e:	9902      	ldr	r1, [sp, #8]
1005c750:	8809      	ldrh	r1, [r1, #0]
1005c752:	1a08      	subs	r0, r1, r0
1005c754:	230a      	movs	r3, #10
1005c756:	4343      	muls	r3, r0
1005c758:	481c      	ldr	r0, [pc, #112]	@ (1005c7cc <__arm_cp.5_1>)
1005c75a:	6800      	ldr	r0, [r0, #0]
1005c75c:	9905      	ldr	r1, [sp, #20]
1005c75e:	b2c9      	uxtb	r1, r1
1005c760:	30b0      	adds	r0, #176	@ 0xb0
1005c762:	2201      	movs	r2, #1
1005c764:	f004 fdd7 	bl	10061316 <CST_start>
1005c768:	9b06      	ldr	r3, [sp, #24]
1005c76a:	2503      	movs	r5, #3
1005c76c:	e013      	b.n	1005c796 <LLC_authenticated_payload_timeout_processing+0xee>
1005c76e:	06a0      	lsls	r0, r4, #26
1005c770:	d511      	bpl.n	1005c796 <LLC_authenticated_payload_timeout_processing+0xee>
1005c772:	9804      	ldr	r0, [sp, #16]
1005c774:	2800      	cmp	r0, #0
1005c776:	d00c      	beq.n	1005c792 <LLC_authenticated_payload_timeout_processing+0xea>
1005c778:	9805      	ldr	r0, [sp, #20]
1005c77a:	b2c0      	uxtb	r0, r0
1005c77c:	f000 f828 	bl	1005c7d0 <LLC_authenticated_payload_timeout_start_le_ping>
1005c780:	2800      	cmp	r0, #0
1005c782:	d001      	beq.n	1005c788 <LLC_authenticated_payload_timeout_processing+0xe0>
1005c784:	26d0      	movs	r6, #208	@ 0xd0
1005c786:	4026      	ands	r6, r4
1005c788:	9808      	ldr	r0, [sp, #32]
1005c78a:	9b06      	ldr	r3, [sp, #24]
1005c78c:	e004      	b.n	1005c798 <LLC_authenticated_payload_timeout_processing+0xf0>
1005c78e:	9801      	ldr	r0, [sp, #4]
1005c790:	e002      	b.n	1005c798 <LLC_authenticated_payload_timeout_processing+0xf0>
1005c792:	26d0      	movs	r6, #208	@ 0xd0
1005c794:	4026      	ands	r6, r4
1005c796:	9808      	ldr	r0, [sp, #32]
1005c798:	f3ef 8110 	mrs	r1, PRIMASK
1005c79c:	b672      	cpsid	i
1005c79e:	7819      	ldrb	r1, [r3, #0]
1005c7a0:	428c      	cmp	r4, r1
1005c7a2:	d103      	bne.n	1005c7ac <LLC_authenticated_payload_timeout_processing+0x104>
1005c7a4:	432e      	orrs	r6, r5
1005c7a6:	701e      	strb	r6, [r3, #0]
1005c7a8:	2100      	movs	r1, #0
1005c7aa:	e002      	b.n	1005c7b2 <LLC_authenticated_payload_timeout_processing+0x10a>
1005c7ac:	9907      	ldr	r1, [sp, #28]
1005c7ae:	400f      	ands	r7, r1
1005c7b0:	4639      	mov	r1, r7
1005c7b2:	1e4a      	subs	r2, r1, #1
1005c7b4:	4191      	sbcs	r1, r2
1005c7b6:	b662      	cpsie	i
1005c7b8:	2700      	movs	r7, #0
1005c7ba:	4208      	tst	r0, r1
1005c7bc:	d1b0      	bne.n	1005c720 <LLC_authenticated_payload_timeout_processing+0x78>
1005c7be:	9c05      	ldr	r4, [sp, #20]
1005c7c0:	1c64      	adds	r4, r4, #1
1005c7c2:	e77a      	b.n	1005c6ba <LLC_authenticated_payload_timeout_processing+0x12>
1005c7c4:	b009      	add	sp, #36	@ 0x24
1005c7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c7c8 <__arm_cp.5_0>:
1005c7c8:	20002414 	.word	0x20002414

1005c7cc <__arm_cp.5_1>:
1005c7cc:	20002468 	.word	0x20002468

1005c7d0 <LLC_authenticated_payload_timeout_start_le_ping>:
1005c7d0:	b570      	push	{r4, r5, r6, lr}
1005c7d2:	4605      	mov	r5, r0
1005c7d4:	2101      	movs	r1, #1
1005c7d6:	f7fd ff26 	bl	1005a626 <LL_cpe_get_active_status>
1005c7da:	4604      	mov	r4, r0
1005c7dc:	2801      	cmp	r0, #1
1005c7de:	d104      	bne.n	1005c7ea <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005c7e0:	2012      	movs	r0, #18
1005c7e2:	2101      	movs	r1, #1
1005c7e4:	f004 fd00 	bl	100611e8 <tsk_wait_resource_idx>
1005c7e8:	e00a      	b.n	1005c800 <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005c7ea:	2601      	movs	r6, #1
1005c7ec:	4628      	mov	r0, r5
1005c7ee:	4631      	mov	r1, r6
1005c7f0:	f7fd ff70 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c7f4:	2208      	movs	r2, #8
1005c7f6:	2300      	movs	r3, #0
1005c7f8:	4628      	mov	r0, r5
1005c7fa:	4631      	mov	r1, r6
1005c7fc:	f7fd ff21 	bl	1005a642 <LL_cpe_set_active>
1005c800:	4260      	negs	r0, r4
1005c802:	4160      	adcs	r0, r4
1005c804:	bd70      	pop	{r4, r5, r6, pc}
	...

1005c808 <LLC_authenticated_payload_timeout_cb>:
1005c808:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c80a:	4604      	mov	r4, r0
1005c80c:	f7fc f8b6 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005c810:	4605      	mov	r5, r0
1005c812:	202c      	movs	r0, #44	@ 0x2c
1005c814:	5c28      	ldrb	r0, [r5, r0]
1005c816:	21fe      	movs	r1, #254	@ 0xfe
1005c818:	4001      	ands	r1, r0
1005c81a:	2902      	cmp	r1, #2
1005c81c:	d15b      	bne.n	1005c8d6 <LLC_authenticated_payload_timeout_cb+0xce>
1005c81e:	9402      	str	r4, [sp, #8]
1005c820:	2085      	movs	r0, #133	@ 0x85
1005c822:	0040      	lsls	r0, r0, #1
1005c824:	182f      	adds	r7, r5, r0
1005c826:	793a      	ldrb	r2, [r7, #4]
1005c828:	06d0      	lsls	r0, r2, #27
1005c82a:	d419      	bmi.n	1005c860 <LLC_authenticated_payload_timeout_cb+0x58>
1005c82c:	24f0      	movs	r4, #240	@ 0xf0
1005c82e:	9201      	str	r2, [sp, #4]
1005c830:	4014      	ands	r4, r2
1005c832:	2101      	movs	r1, #1
1005c834:	4628      	mov	r0, r5
1005c836:	f7fc fb3d 	bl	10058eb4 <llc_conn_get_enc_on>
1005c83a:	4606      	mov	r6, r0
1005c83c:	2100      	movs	r1, #0
1005c83e:	4628      	mov	r0, r5
1005c840:	f7fc fb38 	bl	10058eb4 <llc_conn_get_enc_on>
1005c844:	4330      	orrs	r0, r6
1005c846:	d006      	beq.n	1005c856 <LLC_authenticated_payload_timeout_cb+0x4e>
1005c848:	9802      	ldr	r0, [sp, #8]
1005c84a:	f7ff ffc1 	bl	1005c7d0 <LLC_authenticated_payload_timeout_start_le_ping>
1005c84e:	2801      	cmp	r0, #1
1005c850:	d001      	beq.n	1005c856 <LLC_authenticated_payload_timeout_cb+0x4e>
1005c852:	2020      	movs	r0, #32
1005c854:	4304      	orrs	r4, r0
1005c856:	9a01      	ldr	r2, [sp, #4]
1005c858:	2610      	movs	r6, #16
1005c85a:	4326      	orrs	r6, r4
1005c85c:	8878      	ldrh	r0, [r7, #2]
1005c85e:	e027      	b.n	1005c8b0 <LLC_authenticated_payload_timeout_cb+0xa8>
1005c860:	26c0      	movs	r6, #192	@ 0xc0
1005c862:	481d      	ldr	r0, [pc, #116]	@ (1005c8d8 <__arm_cp.7_0>)
1005c864:	6800      	ldr	r0, [r0, #0]
1005c866:	2140      	movs	r1, #64	@ 0x40
1005c868:	5640      	ldrsb	r0, [r0, r1]
1005c86a:	2800      	cmp	r0, #0
1005c86c:	d51c      	bpl.n	1005c8a8 <LLC_authenticated_payload_timeout_cb+0xa0>
1005c86e:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005c870:	9001      	str	r0, [sp, #4]
1005c872:	481a      	ldr	r0, [pc, #104]	@ (1005c8dc <__arm_cp.7_1>)
1005c874:	6800      	ldr	r0, [r0, #0]
1005c876:	6980      	ldr	r0, [r0, #24]
1005c878:	2142      	movs	r1, #66	@ 0x42
1005c87a:	4614      	mov	r4, r2
1005c87c:	2223      	movs	r2, #35	@ 0x23
1005c87e:	2502      	movs	r5, #2
1005c880:	462b      	mov	r3, r5
1005c882:	f7f7 f955 	bl	10053b30 <aci_event_fifo_push_header>
1005c886:	4622      	mov	r2, r4
1005c888:	2800      	cmp	r0, #0
1005c88a:	d00d      	beq.n	1005c8a8 <LLC_authenticated_payload_timeout_cb+0xa0>
1005c88c:	4601      	mov	r1, r0
1005c88e:	9a01      	ldr	r2, [sp, #4]
1005c890:	71c2      	strb	r2, [r0, #7]
1005c892:	7185      	strb	r5, [r0, #6]
1005c894:	2057      	movs	r0, #87	@ 0x57
1005c896:	7148      	strb	r0, [r1, #5]
1005c898:	2004      	movs	r0, #4
1005c89a:	7108      	strb	r0, [r1, #4]
1005c89c:	0a10      	lsrs	r0, r2, #8
1005c89e:	7208      	strb	r0, [r1, #8]
1005c8a0:	2042      	movs	r0, #66	@ 0x42
1005c8a2:	f7f7 f9e2 	bl	10053c6a <aci_event_fifo_push>
1005c8a6:	4622      	mov	r2, r4
1005c8a8:	4016      	ands	r6, r2
1005c8aa:	8878      	ldrh	r0, [r7, #2]
1005c8ac:	8839      	ldrh	r1, [r7, #0]
1005c8ae:	1a08      	subs	r0, r1, r0
1005c8b0:	230a      	movs	r3, #10
1005c8b2:	4343      	muls	r3, r0
1005c8b4:	f3ef 8010 	mrs	r0, PRIMASK
1005c8b8:	b672      	cpsid	i
1005c8ba:	7938      	ldrb	r0, [r7, #4]
1005c8bc:	4282      	cmp	r2, r0
1005c8be:	9902      	ldr	r1, [sp, #8]
1005c8c0:	d102      	bne.n	1005c8c8 <LLC_authenticated_payload_timeout_cb+0xc0>
1005c8c2:	2003      	movs	r0, #3
1005c8c4:	4306      	orrs	r6, r0
1005c8c6:	713e      	strb	r6, [r7, #4]
1005c8c8:	b662      	cpsie	i
1005c8ca:	4803      	ldr	r0, [pc, #12]	@ (1005c8d8 <__arm_cp.7_0>)
1005c8cc:	6800      	ldr	r0, [r0, #0]
1005c8ce:	30b0      	adds	r0, #176	@ 0xb0
1005c8d0:	2201      	movs	r2, #1
1005c8d2:	f004 fd20 	bl	10061316 <CST_start>
1005c8d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005c8d8 <__arm_cp.7_0>:
1005c8d8:	20002468 	.word	0x20002468

1005c8dc <__arm_cp.7_1>:
1005c8dc:	20002418 	.word	0x20002418

1005c8e0 <LLC_authenticated_payload_timeout_reset>:
1005c8e0:	b510      	push	{r4, lr}
1005c8e2:	4604      	mov	r4, r0
1005c8e4:	2087      	movs	r0, #135	@ 0x87
1005c8e6:	0040      	lsls	r0, r0, #1
1005c8e8:	5c20      	ldrb	r0, [r4, r0]
1005c8ea:	2801      	cmp	r0, #1
1005c8ec:	d00e      	beq.n	1005c90c <LLC_authenticated_payload_timeout_reset+0x2c>
1005c8ee:	4620      	mov	r0, r4
1005c8f0:	3030      	adds	r0, #48	@ 0x30
1005c8f2:	7801      	ldrb	r1, [r0, #0]
1005c8f4:	4806      	ldr	r0, [pc, #24]	@ (1005c910 <__arm_cp.8_0>)
1005c8f6:	6800      	ldr	r0, [r0, #0]
1005c8f8:	30b0      	adds	r0, #176	@ 0xb0
1005c8fa:	f004 fcd6 	bl	100612aa <CST_stop>
1005c8fe:	2085      	movs	r0, #133	@ 0x85
1005c900:	0040      	lsls	r0, r0, #1
1005c902:	2100      	movs	r1, #0
1005c904:	5221      	strh	r1, [r4, r0]
1005c906:	1820      	adds	r0, r4, r0
1005c908:	8041      	strh	r1, [r0, #2]
1005c90a:	7101      	strb	r1, [r0, #4]
1005c90c:	bd10      	pop	{r4, pc}
1005c90e:	46c0      	nop			@ (mov r8, r8)

1005c910 <__arm_cp.8_0>:
1005c910:	20002468 	.word	0x20002468

1005c914 <LLC_le_ping>:
1005c914:	b570      	push	{r4, r5, r6, lr}
1005c916:	24ff      	movs	r4, #255	@ 0xff
1005c918:	2a06      	cmp	r2, #6
1005c91a:	d835      	bhi.n	1005c988 <LLC_le_ping+0x74>
1005c91c:	4605      	mov	r5, r0
1005c91e:	0090      	lsls	r0, r2, #2
1005c920:	a201      	add	r2, pc, #4	@ (adr r2, 1005c928 <LLC_le_ping+0x14>)
1005c922:	5810      	ldr	r0, [r2, r0]
1005c924:	4687      	mov	pc, r0
1005c926:	46c0      	nop			@ (mov r8, r8)
1005c928:	1005c945 	.word	0x1005c945
1005c92c:	1005c94d 	.word	0x1005c94d
1005c930:	1005c989 	.word	0x1005c989
1005c934:	1005c965 	.word	0x1005c965
1005c938:	1005c989 	.word	0x1005c989
1005c93c:	1005c989 	.word	0x1005c989
1005c940:	1005c969 	.word	0x1005c969
1005c944:	2901      	cmp	r1, #1
1005c946:	d117      	bne.n	1005c978 <LLC_le_ping+0x64>
1005c948:	2413      	movs	r4, #19
1005c94a:	e01d      	b.n	1005c988 <LLC_le_ping+0x74>
1005c94c:	2600      	movs	r6, #0
1005c94e:	4628      	mov	r0, r5
1005c950:	4631      	mov	r1, r6
1005c952:	f7fd febf 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005c956:	2208      	movs	r2, #8
1005c958:	4628      	mov	r0, r5
1005c95a:	4631      	mov	r1, r6
1005c95c:	4633      	mov	r3, r6
1005c95e:	f7fd fe70 	bl	1005a642 <LL_cpe_set_active>
1005c962:	e011      	b.n	1005c988 <LLC_le_ping+0x74>
1005c964:	2101      	movs	r1, #1
1005c966:	e008      	b.n	1005c97a <LLC_le_ping+0x66>
1005c968:	2001      	movs	r0, #1
1005c96a:	7058      	strb	r0, [r3, #1]
1005c96c:	2003      	movs	r0, #3
1005c96e:	7018      	strb	r0, [r3, #0]
1005c970:	2901      	cmp	r1, #1
1005c972:	d007      	beq.n	1005c984 <LLC_le_ping+0x70>
1005c974:	2013      	movs	r0, #19
1005c976:	e006      	b.n	1005c986 <LLC_le_ping+0x72>
1005c978:	2100      	movs	r1, #0
1005c97a:	2208      	movs	r2, #8
1005c97c:	4628      	mov	r0, r5
1005c97e:	f7fd fe77 	bl	1005a670 <LL_cpe_clr_active>
1005c982:	e001      	b.n	1005c988 <LLC_le_ping+0x74>
1005c984:	2012      	movs	r0, #18
1005c986:	7098      	strb	r0, [r3, #2]
1005c988:	4620      	mov	r0, r4
1005c98a:	bd70      	pop	{r4, r5, r6, pc}

1005c98c <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005c98c:	4770      	bx	lr

1005c98e <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005c98e:	4770      	bx	lr

1005c990 <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005c990:	4770      	bx	lr

1005c992 <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005c992:	4770      	bx	lr

1005c994 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005c994:	b580      	push	{r7, lr}
1005c996:	f7fb fff1 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005c99a:	2141      	movs	r1, #65	@ 0x41
1005c99c:	5c40      	ldrb	r0, [r0, r1]
1005c99e:	4903      	ldr	r1, [pc, #12]	@ (1005c9ac <__arm_cp.22_0>)
1005c9a0:	6809      	ldr	r1, [r1, #0]
1005c9a2:	7a49      	ldrb	r1, [r1, #9]
1005c9a4:	f7f6 f922 	bl	10052bec <BLEPLAT_CNTR_SmSetTxPwr>
1005c9a8:	bd80      	pop	{r7, pc}
1005c9aa:	46c0      	nop			@ (mov r8, r8)

1005c9ac <__arm_cp.22_0>:
1005c9ac:	20002468 	.word	0x20002468

1005c9b0 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005c9b0:	4770      	bx	lr

1005c9b2 <LLC_pcl_offline_processing_ucfg_weak>:
1005c9b2:	2000      	movs	r0, #0
1005c9b4:	4770      	bx	lr
	...

1005c9b8 <LL_phy_update_init>:
1005c9b8:	b580      	push	{r7, lr}
1005c9ba:	f7fb ffd5 	bl	10058968 <llc_conn_get_cntxt_p>
1005c9be:	4902      	ldr	r1, [pc, #8]	@ (1005c9c8 <__arm_cp.3_0>)
1005c9c0:	6201      	str	r1, [r0, #32]
1005c9c2:	2000      	movs	r0, #0
1005c9c4:	bd80      	pop	{r7, pc}
1005c9c6:	46c0      	nop			@ (mov r8, r8)

1005c9c8 <__arm_cp.3_0>:
1005c9c8:	07070002 	.word	0x07070002

1005c9cc <LL_phy_update_init_per_st_data>:
1005c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c9ce:	4605      	mov	r5, r0
1005c9d0:	f7fc f808 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c9d4:	2800      	cmp	r0, #0
1005c9d6:	d027      	beq.n	1005ca28 <LL_phy_update_init_per_st_data+0x5c>
1005c9d8:	4604      	mov	r4, r0
1005c9da:	f7fb ffc5 	bl	10058968 <llc_conn_get_cntxt_p>
1005c9de:	4606      	mov	r6, r0
1005c9e0:	4628      	mov	r0, r5
1005c9e2:	f7fb ffcb 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005c9e6:	4605      	mov	r5, r0
1005c9e8:	2100      	movs	r1, #0
1005c9ea:	220e      	movs	r2, #14
1005c9ec:	4620      	mov	r0, r4
1005c9ee:	f7f4 fb63 	bl	100510b8 <BLEPLAT_MemSet>
1005c9f2:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005c9f4:	8060      	strh	r0, [r4, #2]
1005c9f6:	8c30      	ldrh	r0, [r6, #32]
1005c9f8:	8020      	strh	r0, [r4, #0]
1005c9fa:	2741      	movs	r7, #65	@ 0x41
1005c9fc:	9500      	str	r5, [sp, #0]
1005c9fe:	5de8      	ldrb	r0, [r5, r7]
1005ca00:	f7f5 ff3c 	bl	1005287c <BLEPLAT_CNTR_SmGetTxPhy>
1005ca04:	2501      	movs	r5, #1
1005ca06:	2804      	cmp	r0, #4
1005ca08:	d101      	bne.n	1005ca0e <LL_phy_update_init_per_st_data+0x42>
1005ca0a:	4606      	mov	r6, r0
1005ca0c:	e001      	b.n	1005ca12 <LL_phy_update_init_per_st_data+0x46>
1005ca0e:	462e      	mov	r6, r5
1005ca10:	4086      	lsls	r6, r0
1005ca12:	9800      	ldr	r0, [sp, #0]
1005ca14:	5dc0      	ldrb	r0, [r0, r7]
1005ca16:	f7f5 ff20 	bl	1005285a <BLEPLAT_CNTR_SmGetRxPhy>
1005ca1a:	71a6      	strb	r6, [r4, #6]
1005ca1c:	2804      	cmp	r0, #4
1005ca1e:	d101      	bne.n	1005ca24 <LL_phy_update_init_per_st_data+0x58>
1005ca20:	4605      	mov	r5, r0
1005ca22:	e000      	b.n	1005ca26 <LL_phy_update_init_per_st_data+0x5a>
1005ca24:	4085      	lsls	r5, r0
1005ca26:	71e5      	strb	r5, [r4, #7]
1005ca28:	2000      	movs	r0, #0
1005ca2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ca2c <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005ca2c:	6800      	ldr	r0, [r0, #0]
1005ca2e:	21a9      	movs	r1, #169	@ 0xa9
1005ca30:	0109      	lsls	r1, r1, #4
1005ca32:	8181      	strh	r1, [r0, #12]
1005ca34:	2229      	movs	r2, #41	@ 0x29
1005ca36:	00d2      	lsls	r2, r2, #3
1005ca38:	80c2      	strh	r2, [r0, #6]
1005ca3a:	8141      	strh	r1, [r0, #10]
1005ca3c:	8101      	strh	r1, [r0, #8]
1005ca3e:	8082      	strh	r2, [r0, #4]
1005ca40:	4770      	bx	lr

1005ca42 <LL_phy_upd_pending>:
1005ca42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ca44:	4605      	mov	r5, r0
1005ca46:	f7fb ff99 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ca4a:	4604      	mov	r4, r0
1005ca4c:	4628      	mov	r0, r5
1005ca4e:	f7fb ffc9 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005ca52:	219a      	movs	r1, #154	@ 0x9a
1005ca54:	5a66      	ldrh	r6, [r4, r1]
1005ca56:	b271      	sxtb	r1, r6
1005ca58:	2900      	cmp	r1, #0
1005ca5a:	d52e      	bpl.n	1005caba <LL_phy_upd_pending+0x78>
1005ca5c:	4627      	mov	r7, r4
1005ca5e:	372c      	adds	r7, #44	@ 0x2c
1005ca60:	7839      	ldrb	r1, [r7, #0]
1005ca62:	2902      	cmp	r1, #2
1005ca64:	d106      	bne.n	1005ca74 <LL_phy_upd_pending+0x32>
1005ca66:	7a01      	ldrb	r1, [r0, #8]
1005ca68:	2900      	cmp	r1, #0
1005ca6a:	d100      	bne.n	1005ca6e <LL_phy_upd_pending+0x2c>
1005ca6c:	7981      	ldrb	r1, [r0, #6]
1005ca6e:	7181      	strb	r1, [r0, #6]
1005ca70:	7a45      	ldrb	r5, [r0, #9]
1005ca72:	e005      	b.n	1005ca80 <LL_phy_upd_pending+0x3e>
1005ca74:	7a41      	ldrb	r1, [r0, #9]
1005ca76:	2900      	cmp	r1, #0
1005ca78:	d100      	bne.n	1005ca7c <LL_phy_upd_pending+0x3a>
1005ca7a:	7981      	ldrb	r1, [r0, #6]
1005ca7c:	7181      	strb	r1, [r0, #6]
1005ca7e:	7a05      	ldrb	r5, [r0, #8]
1005ca80:	2d00      	cmp	r5, #0
1005ca82:	d100      	bne.n	1005ca86 <LL_phy_upd_pending+0x44>
1005ca84:	79c5      	ldrb	r5, [r0, #7]
1005ca86:	71c5      	strb	r5, [r0, #7]
1005ca88:	2904      	cmp	r1, #4
1005ca8a:	d104      	bne.n	1005ca96 <LL_phy_upd_pending+0x54>
1005ca8c:	8800      	ldrh	r0, [r0, #0]
1005ca8e:	2801      	cmp	r0, #1
1005ca90:	d003      	beq.n	1005ca9a <LL_phy_upd_pending+0x58>
1005ca92:	2104      	movs	r1, #4
1005ca94:	e002      	b.n	1005ca9c <LL_phy_upd_pending+0x5a>
1005ca96:	0849      	lsrs	r1, r1, #1
1005ca98:	e000      	b.n	1005ca9c <LL_phy_upd_pending+0x5a>
1005ca9a:	2106      	movs	r1, #6
1005ca9c:	349a      	adds	r4, #154	@ 0x9a
1005ca9e:	7d78      	ldrb	r0, [r7, #21]
1005caa0:	f7f6 f88f 	bl	10052bc2 <BLEPLAT_CNTR_SmSetTxPhy>
1005caa4:	2d04      	cmp	r5, #4
1005caa6:	d000      	beq.n	1005caaa <LL_phy_upd_pending+0x68>
1005caa8:	086d      	lsrs	r5, r5, #1
1005caaa:	7d78      	ldrb	r0, [r7, #21]
1005caac:	4629      	mov	r1, r5
1005caae:	f7f6 f81c 	bl	10052aea <BLEPLAT_CNTR_SmSetRxPhy>
1005cab2:	8820      	ldrh	r0, [r4, #0]
1005cab4:	2180      	movs	r1, #128	@ 0x80
1005cab6:	4388      	bics	r0, r1
1005cab8:	8020      	strh	r0, [r4, #0]
1005caba:	b2f0      	uxtb	r0, r6
1005cabc:	09c0      	lsrs	r0, r0, #7
1005cabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005cac0 <LL_phy_update>:
1005cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cac2:	b087      	sub	sp, #28
1005cac4:	461e      	mov	r6, r3
1005cac6:	4617      	mov	r7, r2
1005cac8:	460d      	mov	r5, r1
1005caca:	4604      	mov	r4, r0
1005cacc:	f7fd fe0f 	bl	1005a6ee <LL_cpe_get_cntxt>
1005cad0:	9003      	str	r0, [sp, #12]
1005cad2:	9404      	str	r4, [sp, #16]
1005cad4:	4620      	mov	r0, r4
1005cad6:	f7fb ff51 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005cada:	23ff      	movs	r3, #255	@ 0xff
1005cadc:	2f07      	cmp	r7, #7
1005cade:	d900      	bls.n	1005cae2 <LL_phy_update+0x22>
1005cae0:	e18d      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cae2:	9502      	str	r5, [sp, #8]
1005cae4:	4605      	mov	r5, r0
1005cae6:	352c      	adds	r5, #44	@ 0x2c
1005cae8:	4604      	mov	r4, r0
1005caea:	3498      	adds	r4, #152	@ 0x98
1005caec:	007f      	lsls	r7, r7, #1
1005caee:	46c0      	nop			@ (mov r8, r8)
1005caf0:	447f      	add	r7, pc
1005caf2:	88bf      	ldrh	r7, [r7, #4]
1005caf4:	007f      	lsls	r7, r7, #1
1005caf6:	44bf      	add	pc, r7
1005caf8:	001c0007 	.word	0x001c0007
1005cafc:	004d0041 	.word	0x004d0041
1005cb00:	01820067 	.word	0x01820067
1005cb04:	006e0026 	.word	0x006e0026
1005cb08:	7828      	ldrb	r0, [r5, #0]
1005cb0a:	9902      	ldr	r1, [sp, #8]
1005cb0c:	2901      	cmp	r1, #1
1005cb0e:	d000      	beq.n	1005cb12 <LL_phy_update+0x52>
1005cb10:	e0b5      	b.n	1005cc7e <LL_phy_update+0x1be>
1005cb12:	2802      	cmp	r0, #2
1005cb14:	d000      	beq.n	1005cb18 <LL_phy_update+0x58>
1005cb16:	e103      	b.n	1005cd20 <LL_phy_update+0x260>
1005cb18:	9e03      	ldr	r6, [sp, #12]
1005cb1a:	7c30      	ldrb	r0, [r6, #16]
1005cb1c:	2803      	cmp	r0, #3
1005cb1e:	d100      	bne.n	1005cb22 <LL_phy_update+0x62>
1005cb20:	e158      	b.n	1005cdd4 <LL_phy_update+0x314>
1005cb22:	2801      	cmp	r0, #1
1005cb24:	d000      	beq.n	1005cb28 <LL_phy_update+0x68>
1005cb26:	e16a      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cb28:	2002      	movs	r0, #2
1005cb2a:	9903      	ldr	r1, [sp, #12]
1005cb2c:	7408      	strb	r0, [r1, #16]
1005cb2e:	2317      	movs	r3, #23
1005cb30:	e165      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cb32:	78f0      	ldrb	r0, [r6, #3]
1005cb34:	a905      	add	r1, sp, #20
1005cb36:	7088      	strb	r0, [r1, #2]
1005cb38:	7930      	ldrb	r0, [r6, #4]
1005cb3a:	70c8      	strb	r0, [r1, #3]
1005cb3c:	9804      	ldr	r0, [sp, #16]
1005cb3e:	461c      	mov	r4, r3
1005cb40:	f000 fac8 	bl	1005d0d4 <LL_process_phy_req_rcpt>
1005cb44:	e15a      	b.n	1005cdfc <LL_phy_update+0x33c>
1005cb46:	7828      	ldrb	r0, [r5, #0]
1005cb48:	9902      	ldr	r1, [sp, #8]
1005cb4a:	2901      	cmp	r1, #1
1005cb4c:	d171      	bne.n	1005cc32 <LL_phy_update+0x172>
1005cb4e:	2802      	cmp	r0, #2
1005cb50:	9903      	ldr	r1, [sp, #12]
1005cb52:	d000      	beq.n	1005cb56 <LL_phy_update+0x96>
1005cb54:	e0ce      	b.n	1005ccf4 <LL_phy_update+0x234>
1005cb56:	7c08      	ldrb	r0, [r1, #16]
1005cb58:	2802      	cmp	r0, #2
1005cb5a:	d100      	bne.n	1005cb5e <LL_phy_update+0x9e>
1005cb5c:	e152      	b.n	1005ce04 <LL_phy_update+0x344>
1005cb5e:	2800      	cmp	r0, #0
1005cb60:	d000      	beq.n	1005cb64 <LL_phy_update+0xa4>
1005cb62:	e14c      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cb64:	2016      	movs	r0, #22
1005cb66:	70b0      	strb	r0, [r6, #2]
1005cb68:	2003      	movs	r0, #3
1005cb6a:	7070      	strb	r0, [r6, #1]
1005cb6c:	7030      	strb	r0, [r6, #0]
1005cb6e:	7cc8      	ldrb	r0, [r1, #19]
1005cb70:	70f0      	strb	r0, [r6, #3]
1005cb72:	7d08      	ldrb	r0, [r1, #20]
1005cb74:	7130      	strb	r0, [r6, #4]
1005cb76:	2001      	movs	r0, #1
1005cb78:	7408      	strb	r0, [r1, #16]
1005cb7a:	e140      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cb7c:	78f1      	ldrb	r1, [r6, #3]
1005cb7e:	a805      	add	r0, sp, #20
1005cb80:	7081      	strb	r1, [r0, #2]
1005cb82:	7931      	ldrb	r1, [r6, #4]
1005cb84:	70c1      	strb	r1, [r0, #3]
1005cb86:	7d65      	ldrb	r5, [r4, #21]
1005cb88:	461e      	mov	r6, r3
1005cb8a:	2d07      	cmp	r5, #7
1005cb8c:	d100      	bne.n	1005cb90 <LL_phy_update+0xd0>
1005cb8e:	e090      	b.n	1005ccb2 <LL_phy_update+0x1f2>
1005cb90:	2102      	movs	r1, #2
1005cb92:	e08f      	b.n	1005ccb4 <LL_phy_update+0x1f4>
1005cb94:	78b0      	ldrb	r0, [r6, #2]
1005cb96:	2807      	cmp	r0, #7
1005cb98:	d100      	bne.n	1005cb9c <LL_phy_update+0xdc>
1005cb9a:	e0d2      	b.n	1005cd42 <LL_phy_update+0x282>
1005cb9c:	2811      	cmp	r0, #17
1005cb9e:	9f04      	ldr	r7, [sp, #16]
1005cba0:	d100      	bne.n	1005cba4 <LL_phy_update+0xe4>
1005cba2:	e0e7      	b.n	1005cd74 <LL_phy_update+0x2b4>
1005cba4:	2818      	cmp	r0, #24
1005cba6:	d100      	bne.n	1005cbaa <LL_phy_update+0xea>
1005cba8:	e0fa      	b.n	1005cda0 <LL_phy_update+0x2e0>
1005cbaa:	2817      	cmp	r0, #23
1005cbac:	d000      	beq.n	1005cbb0 <LL_phy_update+0xf0>
1005cbae:	e126      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cbb0:	a905      	add	r1, sp, #20
1005cbb2:	2000      	movs	r0, #0
1005cbb4:	7108      	strb	r0, [r1, #4]
1005cbb6:	78f0      	ldrb	r0, [r6, #3]
1005cbb8:	7088      	strb	r0, [r1, #2]
1005cbba:	7930      	ldrb	r0, [r6, #4]
1005cbbc:	70c8      	strb	r0, [r1, #3]
1005cbbe:	4638      	mov	r0, r7
1005cbc0:	461c      	mov	r4, r3
1005cbc2:	f000 f9cf 	bl	1005cf64 <LL_compute_phy_upd_ind>
1005cbc6:	e119      	b.n	1005cdfc <LL_phy_update+0x33c>
1005cbc8:	78b1      	ldrb	r1, [r6, #2]
1005cbca:	461c      	mov	r4, r3
1005cbcc:	2916      	cmp	r1, #22
1005cbce:	d100      	bne.n	1005cbd2 <LL_phy_update+0x112>
1005cbd0:	e085      	b.n	1005ccde <LL_phy_update+0x21e>
1005cbd2:	212a      	movs	r1, #42	@ 0x2a
1005cbd4:	e084      	b.n	1005cce0 <LL_phy_update+0x220>
1005cbd6:	9301      	str	r3, [sp, #4]
1005cbd8:	9f04      	ldr	r7, [sp, #16]
1005cbda:	4638      	mov	r0, r7
1005cbdc:	9e03      	ldr	r6, [sp, #12]
1005cbde:	4631      	mov	r1, r6
1005cbe0:	f000 f9a3 	bl	1005cf2a <LL_reset_max_tx_data_frag>
1005cbe4:	7d69      	ldrb	r1, [r5, #21]
1005cbe6:	4638      	mov	r0, r7
1005cbe8:	f7fe ffbc 	bl	1005bb64 <LLC_connection_cte_response_disable_ucfg_weak>
1005cbec:	8871      	ldrh	r1, [r6, #2]
1005cbee:	8830      	ldrh	r0, [r6, #0]
1005cbf0:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005cbf2:	4290      	cmp	r0, r2
1005cbf4:	d102      	bne.n	1005cbfc <LL_phy_update+0x13c>
1005cbf6:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005cbf8:	4291      	cmp	r1, r2
1005cbfa:	d00a      	beq.n	1005cc12 <LL_phy_update+0x152>
1005cbfc:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005cbfe:	8460      	strh	r0, [r4, #34]	@ 0x22
1005cc00:	f3ef 8010 	mrs	r0, PRIMASK
1005cc04:	b672      	cpsid	i
1005cc06:	2001      	movs	r0, #1
1005cc08:	0240      	lsls	r0, r0, #9
1005cc0a:	8861      	ldrh	r1, [r4, #2]
1005cc0c:	4301      	orrs	r1, r0
1005cc0e:	8061      	strh	r1, [r4, #2]
1005cc10:	b662      	cpsie	i
1005cc12:	f3ef 8010 	mrs	r0, PRIMASK
1005cc16:	b672      	cpsid	i
1005cc18:	2001      	movs	r0, #1
1005cc1a:	0200      	lsls	r0, r0, #8
1005cc1c:	8861      	ldrh	r1, [r4, #2]
1005cc1e:	4301      	orrs	r1, r0
1005cc20:	8061      	strh	r1, [r4, #2]
1005cc22:	b662      	cpsie	i
1005cc24:	2207      	movs	r2, #7
1005cc26:	4638      	mov	r0, r7
1005cc28:	9902      	ldr	r1, [sp, #8]
1005cc2a:	f7fd fd21 	bl	1005a670 <LL_cpe_clr_active>
1005cc2e:	9b01      	ldr	r3, [sp, #4]
1005cc30:	e0e5      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cc32:	2802      	cmp	r0, #2
1005cc34:	9903      	ldr	r1, [sp, #12]
1005cc36:	d166      	bne.n	1005cd06 <LL_phy_update+0x246>
1005cc38:	7c08      	ldrb	r0, [r1, #16]
1005cc3a:	2805      	cmp	r0, #5
1005cc3c:	d100      	bne.n	1005cc40 <LL_phy_update+0x180>
1005cc3e:	e100      	b.n	1005ce42 <LL_phy_update+0x382>
1005cc40:	2800      	cmp	r0, #0
1005cc42:	d000      	beq.n	1005cc46 <LL_phy_update+0x186>
1005cc44:	e0db      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cc46:	9301      	str	r3, [sp, #4]
1005cc48:	9f04      	ldr	r7, [sp, #16]
1005cc4a:	4638      	mov	r0, r7
1005cc4c:	f7fb feca 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005cc50:	2118      	movs	r1, #24
1005cc52:	70b1      	strb	r1, [r6, #2]
1005cc54:	2105      	movs	r1, #5
1005cc56:	7071      	strb	r1, [r6, #1]
1005cc58:	2503      	movs	r5, #3
1005cc5a:	7035      	strb	r5, [r6, #0]
1005cc5c:	7a01      	ldrb	r1, [r0, #8]
1005cc5e:	70f1      	strb	r1, [r6, #3]
1005cc60:	7a40      	ldrb	r0, [r0, #9]
1005cc62:	7130      	strb	r0, [r6, #4]
1005cc64:	1d71      	adds	r1, r6, #5
1005cc66:	2202      	movs	r2, #2
1005cc68:	4620      	mov	r0, r4
1005cc6a:	f004 fc33 	bl	100614d4 <char_copy>
1005cc6e:	9803      	ldr	r0, [sp, #12]
1005cc70:	7405      	strb	r5, [r0, #16]
1005cc72:	8820      	ldrh	r0, [r4, #0]
1005cc74:	2800      	cmp	r0, #0
1005cc76:	d0da      	beq.n	1005cc2e <LL_phy_update+0x16e>
1005cc78:	4638      	mov	r0, r7
1005cc7a:	9902      	ldr	r1, [sp, #8]
1005cc7c:	e0de      	b.n	1005ce3c <LL_phy_update+0x37c>
1005cc7e:	2802      	cmp	r0, #2
1005cc80:	d14a      	bne.n	1005cd18 <LL_phy_update+0x258>
1005cc82:	9e03      	ldr	r6, [sp, #12]
1005cc84:	7c30      	ldrb	r0, [r6, #16]
1005cc86:	2803      	cmp	r0, #3
1005cc88:	d000      	beq.n	1005cc8c <LL_phy_update+0x1cc>
1005cc8a:	e09f      	b.n	1005cdcc <LL_phy_update+0x30c>
1005cc8c:	461c      	mov	r4, r3
1005cc8e:	7c70      	ldrb	r0, [r6, #17]
1005cc90:	a905      	add	r1, sp, #20
1005cc92:	7108      	strb	r0, [r1, #4]
1005cc94:	9d04      	ldr	r5, [sp, #16]
1005cc96:	4628      	mov	r0, r5
1005cc98:	4632      	mov	r2, r6
1005cc9a:	f000 f8f0 	bl	1005ce7e <LL_process_phy_upd_ind>
1005cc9e:	2800      	cmp	r0, #0
1005cca0:	d100      	bne.n	1005cca4 <LL_phy_update+0x1e4>
1005cca2:	e0ab      	b.n	1005cdfc <LL_phy_update+0x33c>
1005cca4:	4628      	mov	r0, r5
1005cca6:	4631      	mov	r1, r6
1005cca8:	f000 f93f 	bl	1005cf2a <LL_reset_max_tx_data_frag>
1005ccac:	2207      	movs	r2, #7
1005ccae:	4628      	mov	r0, r5
1005ccb0:	e074      	b.n	1005cd9c <LL_phy_update+0x2dc>
1005ccb2:	2101      	movs	r1, #1
1005ccb4:	9f04      	ldr	r7, [sp, #16]
1005ccb6:	7181      	strb	r1, [r0, #6]
1005ccb8:	2100      	movs	r1, #0
1005ccba:	4638      	mov	r0, r7
1005ccbc:	f7fd fd17 	bl	1005a6ee <LL_cpe_get_cntxt>
1005ccc0:	4604      	mov	r4, r0
1005ccc2:	4638      	mov	r0, r7
1005ccc4:	f7fb fe5a 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ccc8:	212c      	movs	r1, #44	@ 0x2c
1005ccca:	5c40      	ldrb	r0, [r0, r1]
1005cccc:	2802      	cmp	r0, #2
1005ccce:	d10a      	bne.n	1005cce6 <LL_phy_update+0x226>
1005ccd0:	20ff      	movs	r0, #255	@ 0xff
1005ccd2:	3006      	adds	r0, #6
1005ccd4:	8220      	strh	r0, [r4, #16]
1005ccd6:	2d07      	cmp	r5, #7
1005ccd8:	d024      	beq.n	1005cd24 <LL_phy_update+0x264>
1005ccda:	202a      	movs	r0, #42	@ 0x2a
1005ccdc:	e023      	b.n	1005cd26 <LL_phy_update+0x266>
1005ccde:	2123      	movs	r1, #35	@ 0x23
1005cce0:	f7fc fd30 	bl	10059744 <llc_conn_disconnect_link_from_cpf>
1005cce4:	e08a      	b.n	1005cdfc <LL_phy_update+0x33c>
1005cce6:	2d07      	cmp	r5, #7
1005cce8:	d129      	bne.n	1005cd3e <LL_phy_update+0x27e>
1005ccea:	a905      	add	r1, sp, #20
1005ccec:	4638      	mov	r0, r7
1005ccee:	f000 f9f1 	bl	1005d0d4 <LL_process_phy_req_rcpt>
1005ccf2:	e024      	b.n	1005cd3e <LL_phy_update+0x27e>
1005ccf4:	2016      	movs	r0, #22
1005ccf6:	70b0      	strb	r0, [r6, #2]
1005ccf8:	2003      	movs	r0, #3
1005ccfa:	7070      	strb	r0, [r6, #1]
1005ccfc:	7030      	strb	r0, [r6, #0]
1005ccfe:	7cc8      	ldrb	r0, [r1, #19]
1005cd00:	70f0      	strb	r0, [r6, #3]
1005cd02:	7d08      	ldrb	r0, [r1, #20]
1005cd04:	e0a5      	b.n	1005ce52 <LL_phy_update+0x392>
1005cd06:	2017      	movs	r0, #23
1005cd08:	70b0      	strb	r0, [r6, #2]
1005cd0a:	2003      	movs	r0, #3
1005cd0c:	7070      	strb	r0, [r6, #1]
1005cd0e:	7030      	strb	r0, [r6, #0]
1005cd10:	7d48      	ldrb	r0, [r1, #21]
1005cd12:	70f0      	strb	r0, [r6, #3]
1005cd14:	7d88      	ldrb	r0, [r1, #22]
1005cd16:	e09c      	b.n	1005ce52 <LL_phy_update+0x392>
1005cd18:	2202      	movs	r2, #2
1005cd1a:	9804      	ldr	r0, [sp, #16]
1005cd1c:	f7fd fcca 	bl	1005a6b4 <LL_cpe_set_blocked>
1005cd20:	2318      	movs	r3, #24
1005cd22:	e06c      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cd24:	2023      	movs	r0, #35	@ 0x23
1005cd26:	74a0      	strb	r0, [r4, #18]
1005cd28:	2400      	movs	r4, #0
1005cd2a:	4638      	mov	r0, r7
1005cd2c:	4621      	mov	r1, r4
1005cd2e:	f7fd fcd1 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005cd32:	2207      	movs	r2, #7
1005cd34:	2301      	movs	r3, #1
1005cd36:	4638      	mov	r0, r7
1005cd38:	4621      	mov	r1, r4
1005cd3a:	f7fd fc82 	bl	1005a642 <LL_cpe_set_active>
1005cd3e:	4633      	mov	r3, r6
1005cd40:	e05d      	b.n	1005cdfe <LL_phy_update+0x33e>
1005cd42:	461c      	mov	r4, r3
1005cd44:	a905      	add	r1, sp, #20
1005cd46:	2007      	movs	r0, #7
1005cd48:	7088      	strb	r0, [r1, #2]
1005cd4a:	2000      	movs	r0, #0
1005cd4c:	7048      	strb	r0, [r1, #1]
1005cd4e:	78f0      	ldrb	r0, [r6, #3]
1005cd50:	7008      	strb	r0, [r1, #0]
1005cd52:	9f03      	ldr	r7, [sp, #12]
1005cd54:	7c78      	ldrb	r0, [r7, #17]
1005cd56:	70c8      	strb	r0, [r1, #3]
1005cd58:	9e04      	ldr	r6, [sp, #16]
1005cd5a:	4630      	mov	r0, r6
1005cd5c:	f000 f992 	bl	1005d084 <LL_process_unknown_rsp_reject_ind_rcpt>
1005cd60:	7828      	ldrb	r0, [r5, #0]
1005cd62:	2803      	cmp	r0, #3
1005cd64:	d103      	bne.n	1005cd6e <LL_phy_update+0x2ae>
1005cd66:	4630      	mov	r0, r6
1005cd68:	4639      	mov	r1, r7
1005cd6a:	f000 f8de 	bl	1005cf2a <LL_reset_max_tx_data_frag>
1005cd6e:	2207      	movs	r2, #7
1005cd70:	4630      	mov	r0, r6
1005cd72:	e013      	b.n	1005cd9c <LL_phy_update+0x2dc>
1005cd74:	a905      	add	r1, sp, #20
1005cd76:	2011      	movs	r0, #17
1005cd78:	7088      	strb	r0, [r1, #2]
1005cd7a:	78f0      	ldrb	r0, [r6, #3]
1005cd7c:	7008      	strb	r0, [r1, #0]
1005cd7e:	7930      	ldrb	r0, [r6, #4]
1005cd80:	7048      	strb	r0, [r1, #1]
1005cd82:	9d03      	ldr	r5, [sp, #12]
1005cd84:	7c68      	ldrb	r0, [r5, #17]
1005cd86:	70c8      	strb	r0, [r1, #3]
1005cd88:	4638      	mov	r0, r7
1005cd8a:	461c      	mov	r4, r3
1005cd8c:	f000 f97a 	bl	1005d084 <LL_process_unknown_rsp_reject_ind_rcpt>
1005cd90:	4638      	mov	r0, r7
1005cd92:	4629      	mov	r1, r5
1005cd94:	f000 f8c9 	bl	1005cf2a <LL_reset_max_tx_data_frag>
1005cd98:	2207      	movs	r2, #7
1005cd9a:	4638      	mov	r0, r7
1005cd9c:	9902      	ldr	r1, [sp, #8]
1005cd9e:	e02b      	b.n	1005cdf8 <LL_phy_update+0x338>
1005cda0:	9301      	str	r3, [sp, #4]
1005cda2:	1cf0      	adds	r0, r6, #3
1005cda4:	ae05      	add	r6, sp, #20
1005cda6:	2205      	movs	r2, #5
1005cda8:	4631      	mov	r1, r6
1005cdaa:	f004 fb93 	bl	100614d4 <char_copy>
1005cdae:	9d03      	ldr	r5, [sp, #12]
1005cdb0:	7c68      	ldrb	r0, [r5, #17]
1005cdb2:	7130      	strb	r0, [r6, #4]
1005cdb4:	4638      	mov	r0, r7
1005cdb6:	4631      	mov	r1, r6
1005cdb8:	462a      	mov	r2, r5
1005cdba:	f000 f860 	bl	1005ce7e <LL_process_phy_upd_ind>
1005cdbe:	2800      	cmp	r0, #0
1005cdc0:	d049      	beq.n	1005ce56 <LL_phy_update+0x396>
1005cdc2:	4638      	mov	r0, r7
1005cdc4:	4629      	mov	r1, r5
1005cdc6:	f000 f8b0 	bl	1005cf2a <LL_reset_max_tx_data_frag>
1005cdca:	e72b      	b.n	1005cc24 <LL_phy_update+0x164>
1005cdcc:	2207      	movs	r2, #7
1005cdce:	9804      	ldr	r0, [sp, #16]
1005cdd0:	461c      	mov	r4, r3
1005cdd2:	e011      	b.n	1005cdf8 <LL_phy_update+0x338>
1005cdd4:	461c      	mov	r4, r3
1005cdd6:	7c70      	ldrb	r0, [r6, #17]
1005cdd8:	a905      	add	r1, sp, #20
1005cdda:	7108      	strb	r0, [r1, #4]
1005cddc:	9d04      	ldr	r5, [sp, #16]
1005cdde:	4628      	mov	r0, r5
1005cde0:	4632      	mov	r2, r6
1005cde2:	f000 f84c 	bl	1005ce7e <LL_process_phy_upd_ind>
1005cde6:	2800      	cmp	r0, #0
1005cde8:	d046      	beq.n	1005ce78 <LL_phy_update+0x3b8>
1005cdea:	4628      	mov	r0, r5
1005cdec:	4631      	mov	r1, r6
1005cdee:	f000 f89c 	bl	1005cf2a <LL_reset_max_tx_data_frag>
1005cdf2:	2101      	movs	r1, #1
1005cdf4:	2207      	movs	r2, #7
1005cdf6:	4628      	mov	r0, r5
1005cdf8:	f7fd fc3a 	bl	1005a670 <LL_cpe_clr_active>
1005cdfc:	4623      	mov	r3, r4
1005cdfe:	4618      	mov	r0, r3
1005ce00:	b007      	add	sp, #28
1005ce02:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ce04:	9301      	str	r3, [sp, #4]
1005ce06:	9f04      	ldr	r7, [sp, #16]
1005ce08:	4638      	mov	r0, r7
1005ce0a:	f7fb fdeb 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005ce0e:	2118      	movs	r1, #24
1005ce10:	70b1      	strb	r1, [r6, #2]
1005ce12:	2105      	movs	r1, #5
1005ce14:	7071      	strb	r1, [r6, #1]
1005ce16:	2503      	movs	r5, #3
1005ce18:	7035      	strb	r5, [r6, #0]
1005ce1a:	7a01      	ldrb	r1, [r0, #8]
1005ce1c:	70f1      	strb	r1, [r6, #3]
1005ce1e:	7a40      	ldrb	r0, [r0, #9]
1005ce20:	7130      	strb	r0, [r6, #4]
1005ce22:	1d71      	adds	r1, r6, #5
1005ce24:	2202      	movs	r2, #2
1005ce26:	4620      	mov	r0, r4
1005ce28:	f004 fb54 	bl	100614d4 <char_copy>
1005ce2c:	9803      	ldr	r0, [sp, #12]
1005ce2e:	7405      	strb	r5, [r0, #16]
1005ce30:	8820      	ldrh	r0, [r4, #0]
1005ce32:	2800      	cmp	r0, #0
1005ce34:	d100      	bne.n	1005ce38 <LL_phy_update+0x378>
1005ce36:	e6fa      	b.n	1005cc2e <LL_phy_update+0x16e>
1005ce38:	2101      	movs	r1, #1
1005ce3a:	4638      	mov	r0, r7
1005ce3c:	f7fd fc60 	bl	1005a700 <LL_cpe_set_tx_with_instant>
1005ce40:	e015      	b.n	1005ce6e <LL_phy_update+0x3ae>
1005ce42:	2016      	movs	r0, #22
1005ce44:	70f0      	strb	r0, [r6, #3]
1005ce46:	2011      	movs	r0, #17
1005ce48:	70b0      	strb	r0, [r6, #2]
1005ce4a:	2003      	movs	r0, #3
1005ce4c:	7070      	strb	r0, [r6, #1]
1005ce4e:	7030      	strb	r0, [r6, #0]
1005ce50:	7c88      	ldrb	r0, [r1, #18]
1005ce52:	7130      	strb	r0, [r6, #4]
1005ce54:	e7d3      	b.n	1005cdfe <LL_phy_update+0x33e>
1005ce56:	9d02      	ldr	r5, [sp, #8]
1005ce58:	2d01      	cmp	r5, #1
1005ce5a:	d104      	bne.n	1005ce66 <LL_phy_update+0x3a6>
1005ce5c:	2101      	movs	r1, #1
1005ce5e:	2202      	movs	r2, #2
1005ce60:	4638      	mov	r0, r7
1005ce62:	f7fd fc27 	bl	1005a6b4 <LL_cpe_set_blocked>
1005ce66:	4638      	mov	r0, r7
1005ce68:	4629      	mov	r1, r5
1005ce6a:	f7fd fc58 	bl	1005a71e <LL_cpe_set_rx_with_instant>
1005ce6e:	8860      	ldrh	r0, [r4, #2]
1005ce70:	2180      	movs	r1, #128	@ 0x80
1005ce72:	4301      	orrs	r1, r0
1005ce74:	8061      	strh	r1, [r4, #2]
1005ce76:	e6da      	b.n	1005cc2e <LL_phy_update+0x16e>
1005ce78:	2004      	movs	r0, #4
1005ce7a:	7430      	strb	r0, [r6, #16]
1005ce7c:	e7be      	b.n	1005cdfc <LL_phy_update+0x33c>

1005ce7e <LL_process_phy_upd_ind>:
1005ce7e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ce80:	9201      	str	r2, [sp, #4]
1005ce82:	460c      	mov	r4, r1
1005ce84:	4606      	mov	r6, r0
1005ce86:	f7fb fd79 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ce8a:	4607      	mov	r7, r0
1005ce8c:	4630      	mov	r0, r6
1005ce8e:	f7fb fda9 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005ce92:	4605      	mov	r5, r0
1005ce94:	202c      	movs	r0, #44	@ 0x2c
1005ce96:	9702      	str	r7, [sp, #8]
1005ce98:	5c39      	ldrb	r1, [r7, r0]
1005ce9a:	2903      	cmp	r1, #3
1005ce9c:	d111      	bne.n	1005cec2 <LL_process_phy_upd_ind+0x44>
1005ce9e:	7827      	ldrb	r7, [r4, #0]
1005cea0:	2001      	movs	r0, #1
1005cea2:	2f04      	cmp	r7, #4
1005cea4:	d82e      	bhi.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005cea6:	2f03      	cmp	r7, #3
1005cea8:	d02c      	beq.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005ceaa:	7862      	ldrb	r2, [r4, #1]
1005ceac:	2a04      	cmp	r2, #4
1005ceae:	d829      	bhi.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005ceb0:	2a03      	cmp	r2, #3
1005ceb2:	d027      	beq.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005ceb4:	9b02      	ldr	r3, [sp, #8]
1005ceb6:	3398      	adds	r3, #152	@ 0x98
1005ceb8:	726a      	strb	r2, [r5, #9]
1005ceba:	722f      	strb	r7, [r5, #8]
1005cebc:	8862      	ldrh	r2, [r4, #2]
1005cebe:	801a      	strh	r2, [r3, #0]
1005cec0:	e000      	b.n	1005cec4 <LL_process_phy_upd_ind+0x46>
1005cec2:	7a2f      	ldrb	r7, [r5, #8]
1005cec4:	2f00      	cmp	r7, #0
1005cec6:	d102      	bne.n	1005cece <LL_process_phy_upd_ind+0x50>
1005cec8:	7a6a      	ldrb	r2, [r5, #9]
1005ceca:	2a00      	cmp	r2, #0
1005cecc:	d016      	beq.n	1005cefc <LL_process_phy_upd_ind+0x7e>
1005cece:	2000      	movs	r0, #0
1005ced0:	2903      	cmp	r1, #3
1005ced2:	d117      	bne.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005ced4:	7a69      	ldrb	r1, [r5, #9]
1005ced6:	2900      	cmp	r1, #0
1005ced8:	d014      	beq.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005ceda:	79ea      	ldrb	r2, [r5, #7]
1005cedc:	9b01      	ldr	r3, [sp, #4]
1005cede:	9300      	str	r3, [sp, #0]
1005cee0:	403a      	ands	r2, r7
1005cee2:	0752      	lsls	r2, r2, #29
1005cee4:	0fd2      	lsrs	r2, r2, #31
1005cee6:	4604      	mov	r4, r0
1005cee8:	2301      	movs	r3, #1
1005ceea:	4630      	mov	r0, r6
1005ceec:	f000 fa04 	bl	1005d2f8 <LL_adjust_max_tx_data_frag>
1005cef0:	7a69      	ldrb	r1, [r5, #9]
1005cef2:	4630      	mov	r0, r6
1005cef4:	f7fe fe35 	bl	1005bb62 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005cef8:	4620      	mov	r0, r4
1005cefa:	e003      	b.n	1005cf04 <LL_process_phy_upd_ind+0x86>
1005cefc:	7921      	ldrb	r1, [r4, #4]
1005cefe:	2001      	movs	r0, #1
1005cf00:	2900      	cmp	r1, #0
1005cf02:	d000      	beq.n	1005cf06 <LL_process_phy_upd_ind+0x88>
1005cf04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005cf06:	4604      	mov	r4, r0
1005cf08:	79e9      	ldrb	r1, [r5, #7]
1005cf0a:	2003      	movs	r0, #3
1005cf0c:	074a      	lsls	r2, r1, #29
1005cf0e:	d500      	bpl.n	1005cf12 <LL_process_phy_upd_ind+0x94>
1005cf10:	4601      	mov	r1, r0
1005cf12:	9a02      	ldr	r2, [sp, #8]
1005cf14:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005cf16:	79ab      	ldrb	r3, [r5, #6]
1005cf18:	9100      	str	r1, [sp, #0]
1005cf1a:	0759      	lsls	r1, r3, #29
1005cf1c:	d500      	bpl.n	1005cf20 <LL_process_phy_upd_ind+0xa2>
1005cf1e:	4603      	mov	r3, r0
1005cf20:	2080      	movs	r0, #128	@ 0x80
1005cf22:	2100      	movs	r1, #0
1005cf24:	f000 f9b2 	bl	1005d28c <hci_le_phy_update_complete_event_push>
1005cf28:	e7e6      	b.n	1005cef8 <LL_process_phy_upd_ind+0x7a>

1005cf2a <LL_reset_max_tx_data_frag>:
1005cf2a:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005cf2c:	460d      	mov	r5, r1
1005cf2e:	4604      	mov	r4, r0
1005cf30:	f7fb fd58 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005cf34:	2800      	cmp	r0, #0
1005cf36:	d007      	beq.n	1005cf48 <LL_reset_max_tx_data_frag+0x1e>
1005cf38:	7981      	ldrb	r1, [r0, #6]
1005cf3a:	79c0      	ldrb	r0, [r0, #7]
1005cf3c:	2804      	cmp	r0, #4
1005cf3e:	d107      	bne.n	1005cf50 <LL_reset_max_tx_data_frag+0x26>
1005cf40:	4628      	mov	r0, r5
1005cf42:	300c      	adds	r0, #12
1005cf44:	2201      	movs	r2, #1
1005cf46:	e005      	b.n	1005cf54 <LL_reset_max_tx_data_frag+0x2a>
1005cf48:	1da8      	adds	r0, r5, #6
1005cf4a:	2200      	movs	r2, #0
1005cf4c:	2101      	movs	r1, #1
1005cf4e:	e001      	b.n	1005cf54 <LL_reset_max_tx_data_frag+0x2a>
1005cf50:	1da8      	adds	r0, r5, #6
1005cf52:	2200      	movs	r2, #0
1005cf54:	8800      	ldrh	r0, [r0, #0]
1005cf56:	8068      	strh	r0, [r5, #2]
1005cf58:	9500      	str	r5, [sp, #0]
1005cf5a:	2300      	movs	r3, #0
1005cf5c:	4620      	mov	r0, r4
1005cf5e:	f000 f9cb 	bl	1005d2f8 <LL_adjust_max_tx_data_frag>
1005cf62:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005cf64 <LL_compute_phy_upd_ind>:
1005cf64:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005cf66:	460d      	mov	r5, r1
1005cf68:	4604      	mov	r4, r0
1005cf6a:	f7fb fd3b 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005cf6e:	4606      	mov	r6, r0
1005cf70:	7928      	ldrb	r0, [r5, #4]
1005cf72:	2801      	cmp	r0, #1
1005cf74:	9002      	str	r0, [sp, #8]
1005cf76:	d114      	bne.n	1005cfa2 <LL_compute_phy_upd_ind+0x3e>
1005cf78:	2500      	movs	r5, #0
1005cf7a:	4620      	mov	r0, r4
1005cf7c:	4629      	mov	r1, r5
1005cf7e:	f7fd fbb6 	bl	1005a6ee <LL_cpe_get_cntxt>
1005cf82:	4607      	mov	r7, r0
1005cf84:	7d02      	ldrb	r2, [r0, #20]
1005cf86:	7cc3      	ldrb	r3, [r0, #19]
1005cf88:	4293      	cmp	r3, r2
1005cf8a:	9501      	str	r5, [sp, #4]
1005cf8c:	d105      	bne.n	1005cf9a <LL_compute_phy_upd_ind+0x36>
1005cf8e:	2b03      	cmp	r3, #3
1005cf90:	d302      	bcc.n	1005cf98 <LL_compute_phy_upd_ind+0x34>
1005cf92:	2b04      	cmp	r3, #4
1005cf94:	9d01      	ldr	r5, [sp, #4]
1005cf96:	d100      	bne.n	1005cf9a <LL_compute_phy_upd_ind+0x36>
1005cf98:	2501      	movs	r5, #1
1005cf9a:	78f0      	ldrb	r0, [r6, #3]
1005cf9c:	4018      	ands	r0, r3
1005cf9e:	78b3      	ldrb	r3, [r6, #2]
1005cfa0:	e014      	b.n	1005cfcc <LL_compute_phy_upd_ind+0x68>
1005cfa2:	2101      	movs	r1, #1
1005cfa4:	4620      	mov	r0, r4
1005cfa6:	9101      	str	r1, [sp, #4]
1005cfa8:	f7fd fba1 	bl	1005a6ee <LL_cpe_get_cntxt>
1005cfac:	4607      	mov	r7, r0
1005cfae:	78ab      	ldrb	r3, [r5, #2]
1005cfb0:	7543      	strb	r3, [r0, #21]
1005cfb2:	78ea      	ldrb	r2, [r5, #3]
1005cfb4:	7582      	strb	r2, [r0, #22]
1005cfb6:	2500      	movs	r5, #0
1005cfb8:	4293      	cmp	r3, r2
1005cfba:	d104      	bne.n	1005cfc6 <LL_compute_phy_upd_ind+0x62>
1005cfbc:	2b03      	cmp	r3, #3
1005cfbe:	d301      	bcc.n	1005cfc4 <LL_compute_phy_upd_ind+0x60>
1005cfc0:	2b04      	cmp	r3, #4
1005cfc2:	d100      	bne.n	1005cfc6 <LL_compute_phy_upd_ind+0x62>
1005cfc4:	2501      	movs	r5, #1
1005cfc6:	7d38      	ldrb	r0, [r7, #20]
1005cfc8:	4018      	ands	r0, r3
1005cfca:	7cfb      	ldrb	r3, [r7, #19]
1005cfcc:	4013      	ands	r3, r2
1005cfce:	2d00      	cmp	r5, #0
1005cfd0:	d002      	beq.n	1005cfd8 <LL_compute_phy_upd_ind+0x74>
1005cfd2:	4283      	cmp	r3, r0
1005cfd4:	4603      	mov	r3, r0
1005cfd6:	d107      	bne.n	1005cfe8 <LL_compute_phy_upd_ind+0x84>
1005cfd8:	2100      	movs	r1, #0
1005cfda:	2b00      	cmp	r3, #0
1005cfdc:	460a      	mov	r2, r1
1005cfde:	d00a      	beq.n	1005cff6 <LL_compute_phy_upd_ind+0x92>
1005cfe0:	07da      	lsls	r2, r3, #31
1005cfe2:	d004      	beq.n	1005cfee <LL_compute_phy_upd_ind+0x8a>
1005cfe4:	2201      	movs	r2, #1
1005cfe6:	e003      	b.n	1005cff0 <LL_compute_phy_upd_ind+0x8c>
1005cfe8:	2200      	movs	r2, #0
1005cfea:	4611      	mov	r1, r2
1005cfec:	e00d      	b.n	1005d00a <LL_compute_phy_upd_ind+0xa6>
1005cfee:	2204      	movs	r2, #4
1005cff0:	079b      	lsls	r3, r3, #30
1005cff2:	d500      	bpl.n	1005cff6 <LL_compute_phy_upd_ind+0x92>
1005cff4:	2202      	movs	r2, #2
1005cff6:	2800      	cmp	r0, #0
1005cff8:	d007      	beq.n	1005d00a <LL_compute_phy_upd_ind+0xa6>
1005cffa:	07c1      	lsls	r1, r0, #31
1005cffc:	d001      	beq.n	1005d002 <LL_compute_phy_upd_ind+0x9e>
1005cffe:	2101      	movs	r1, #1
1005d000:	e000      	b.n	1005d004 <LL_compute_phy_upd_ind+0xa0>
1005d002:	2104      	movs	r1, #4
1005d004:	0780      	lsls	r0, r0, #30
1005d006:	d500      	bpl.n	1005d00a <LL_compute_phy_upd_ind+0xa6>
1005d008:	2102      	movs	r1, #2
1005d00a:	79b3      	ldrb	r3, [r6, #6]
1005d00c:	2000      	movs	r0, #0
1005d00e:	429a      	cmp	r2, r3
1005d010:	4603      	mov	r3, r0
1005d012:	d000      	beq.n	1005d016 <LL_compute_phy_upd_ind+0xb2>
1005d014:	4613      	mov	r3, r2
1005d016:	7233      	strb	r3, [r6, #8]
1005d018:	79f2      	ldrb	r2, [r6, #7]
1005d01a:	4291      	cmp	r1, r2
1005d01c:	d000      	beq.n	1005d020 <LL_compute_phy_upd_ind+0xbc>
1005d01e:	4608      	mov	r0, r1
1005d020:	7270      	strb	r0, [r6, #9]
1005d022:	4620      	mov	r0, r4
1005d024:	f7fb fcaa 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d028:	4605      	mov	r5, r0
1005d02a:	7a70      	ldrb	r0, [r6, #9]
1005d02c:	2800      	cmp	r0, #0
1005d02e:	d102      	bne.n	1005d036 <LL_compute_phy_upd_ind+0xd2>
1005d030:	7a30      	ldrb	r0, [r6, #8]
1005d032:	2800      	cmp	r0, #0
1005d034:	d015      	beq.n	1005d062 <LL_compute_phy_upd_ind+0xfe>
1005d036:	4620      	mov	r0, r4
1005d038:	f7fe f922 	bl	1005b280 <llc_cpe_calc_instant>
1005d03c:	2198      	movs	r1, #152	@ 0x98
1005d03e:	5268      	strh	r0, [r5, r1]
1005d040:	7a31      	ldrb	r1, [r6, #8]
1005d042:	2900      	cmp	r1, #0
1005d044:	d010      	beq.n	1005d068 <LL_compute_phy_upd_ind+0x104>
1005d046:	79f0      	ldrb	r0, [r6, #7]
1005d048:	9700      	str	r7, [sp, #0]
1005d04a:	4008      	ands	r0, r1
1005d04c:	0740      	lsls	r0, r0, #29
1005d04e:	0fc2      	lsrs	r2, r0, #31
1005d050:	2301      	movs	r3, #1
1005d052:	4620      	mov	r0, r4
1005d054:	f000 f950 	bl	1005d2f8 <LL_adjust_max_tx_data_frag>
1005d058:	7a31      	ldrb	r1, [r6, #8]
1005d05a:	4620      	mov	r0, r4
1005d05c:	f7fe fd81 	bl	1005bb62 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005d060:	e002      	b.n	1005d068 <LL_compute_phy_upd_ind+0x104>
1005d062:	2098      	movs	r0, #152	@ 0x98
1005d064:	2100      	movs	r1, #0
1005d066:	5229      	strh	r1, [r5, r0]
1005d068:	9802      	ldr	r0, [sp, #8]
1005d06a:	2801      	cmp	r0, #1
1005d06c:	d009      	beq.n	1005d082 <LL_compute_phy_upd_ind+0x11e>
1005d06e:	4620      	mov	r0, r4
1005d070:	9d01      	ldr	r5, [sp, #4]
1005d072:	4629      	mov	r1, r5
1005d074:	f7fd fb2e 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005d078:	2202      	movs	r2, #2
1005d07a:	4620      	mov	r0, r4
1005d07c:	4629      	mov	r1, r5
1005d07e:	f7fd fb19 	bl	1005a6b4 <LL_cpe_set_blocked>
1005d082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005d084 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005d084:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005d086:	460d      	mov	r5, r1
1005d088:	4606      	mov	r6, r0
1005d08a:	f7fb fcab 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005d08e:	4604      	mov	r4, r0
1005d090:	4630      	mov	r0, r6
1005d092:	f7fb fc73 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d096:	78a9      	ldrb	r1, [r5, #2]
1005d098:	2907      	cmp	r1, #7
1005d09a:	d107      	bne.n	1005d0ac <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005d09c:	21ff      	movs	r1, #255	@ 0xff
1005d09e:	3130      	adds	r1, #48	@ 0x30
1005d0a0:	5c42      	ldrb	r2, [r0, r1]
1005d0a2:	23f6      	movs	r3, #246	@ 0xf6
1005d0a4:	4013      	ands	r3, r2
1005d0a6:	5443      	strb	r3, [r0, r1]
1005d0a8:	211a      	movs	r1, #26
1005d0aa:	e000      	b.n	1005d0ae <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005d0ac:	7869      	ldrb	r1, [r5, #1]
1005d0ae:	78ea      	ldrb	r2, [r5, #3]
1005d0b0:	2a00      	cmp	r2, #0
1005d0b2:	d000      	beq.n	1005d0b6 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005d0b4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005d0b6:	79e6      	ldrb	r6, [r4, #7]
1005d0b8:	2503      	movs	r5, #3
1005d0ba:	0772      	lsls	r2, r6, #29
1005d0bc:	d500      	bpl.n	1005d0c0 <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005d0be:	462e      	mov	r6, r5
1005d0c0:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005d0c2:	79a3      	ldrb	r3, [r4, #6]
1005d0c4:	9600      	str	r6, [sp, #0]
1005d0c6:	0758      	lsls	r0, r3, #29
1005d0c8:	d500      	bpl.n	1005d0cc <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005d0ca:	462b      	mov	r3, r5
1005d0cc:	2080      	movs	r0, #128	@ 0x80
1005d0ce:	f000 f8dd 	bl	1005d28c <hci_le_phy_update_complete_event_push>
1005d0d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005d0d4 <LL_process_phy_req_rcpt>:
1005d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d0d6:	b085      	sub	sp, #20
1005d0d8:	460f      	mov	r7, r1
1005d0da:	4604      	mov	r4, r0
1005d0dc:	f7fb fc4e 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d0e0:	4605      	mov	r5, r0
1005d0e2:	2100      	movs	r1, #0
1005d0e4:	4620      	mov	r0, r4
1005d0e6:	9102      	str	r1, [sp, #8]
1005d0e8:	f7fd fb01 	bl	1005a6ee <LL_cpe_get_cntxt>
1005d0ec:	4606      	mov	r6, r0
1005d0ee:	2001      	movs	r0, #1
1005d0f0:	9001      	str	r0, [sp, #4]
1005d0f2:	7470      	strb	r0, [r6, #17]
1005d0f4:	78b8      	ldrb	r0, [r7, #2]
1005d0f6:	74f0      	strb	r0, [r6, #19]
1005d0f8:	78f8      	ldrb	r0, [r7, #3]
1005d0fa:	7530      	strb	r0, [r6, #20]
1005d0fc:	20b6      	movs	r0, #182	@ 0xb6
1005d0fe:	5a28      	ldrh	r0, [r5, r0]
1005d100:	81f0      	strh	r0, [r6, #14]
1005d102:	a803      	add	r0, sp, #12
1005d104:	7104      	strb	r4, [r0, #4]
1005d106:	9603      	str	r6, [sp, #12]
1005d108:	f7ff fc90 	bl	1005ca2c <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005d10c:	202c      	movs	r0, #44	@ 0x2c
1005d10e:	5c28      	ldrb	r0, [r5, r0]
1005d110:	352c      	adds	r5, #44	@ 0x2c
1005d112:	2802      	cmp	r0, #2
1005d114:	d108      	bne.n	1005d128 <LL_process_phy_req_rcpt+0x54>
1005d116:	7c70      	ldrb	r0, [r6, #17]
1005d118:	7138      	strb	r0, [r7, #4]
1005d11a:	4620      	mov	r0, r4
1005d11c:	4639      	mov	r1, r7
1005d11e:	f7ff ff21 	bl	1005cf64 <LL_compute_phy_upd_ind>
1005d122:	9802      	ldr	r0, [sp, #8]
1005d124:	7430      	strb	r0, [r6, #16]
1005d126:	e025      	b.n	1005d174 <LL_process_phy_req_rcpt+0xa0>
1005d128:	4620      	mov	r0, r4
1005d12a:	f7fb fc5b 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005d12e:	7881      	ldrb	r1, [r0, #2]
1005d130:	7571      	strb	r1, [r6, #21]
1005d132:	78c7      	ldrb	r7, [r0, #3]
1005d134:	75b7      	strb	r7, [r6, #22]
1005d136:	7d33      	ldrb	r3, [r6, #20]
1005d138:	400b      	ands	r3, r1
1005d13a:	b2db      	uxtb	r3, r3
1005d13c:	2b00      	cmp	r3, #0
1005d13e:	d019      	beq.n	1005d174 <LL_process_phy_req_rcpt+0xa0>
1005d140:	7981      	ldrb	r1, [r0, #6]
1005d142:	428b      	cmp	r3, r1
1005d144:	d016      	beq.n	1005d174 <LL_process_phy_req_rcpt+0xa0>
1005d146:	07d9      	lsls	r1, r3, #31
1005d148:	d002      	beq.n	1005d150 <LL_process_phy_req_rcpt+0x7c>
1005d14a:	9a01      	ldr	r2, [sp, #4]
1005d14c:	4611      	mov	r1, r2
1005d14e:	e001      	b.n	1005d154 <LL_process_phy_req_rcpt+0x80>
1005d150:	2102      	movs	r1, #2
1005d152:	9a01      	ldr	r2, [sp, #4]
1005d154:	075b      	lsls	r3, r3, #29
1005d156:	d500      	bpl.n	1005d15a <LL_process_phy_req_rcpt+0x86>
1005d158:	2104      	movs	r1, #4
1005d15a:	7cf3      	ldrb	r3, [r6, #19]
1005d15c:	401f      	ands	r7, r3
1005d15e:	077b      	lsls	r3, r7, #29
1005d160:	d403      	bmi.n	1005d16a <LL_process_phy_req_rcpt+0x96>
1005d162:	79c0      	ldrb	r0, [r0, #7]
1005d164:	1f00      	subs	r0, r0, #4
1005d166:	4242      	negs	r2, r0
1005d168:	4142      	adcs	r2, r0
1005d16a:	9600      	str	r6, [sp, #0]
1005d16c:	2301      	movs	r3, #1
1005d16e:	4620      	mov	r0, r4
1005d170:	f000 f8c2 	bl	1005d2f8 <LL_adjust_max_tx_data_frag>
1005d174:	2600      	movs	r6, #0
1005d176:	4620      	mov	r0, r4
1005d178:	4631      	mov	r1, r6
1005d17a:	f7fd faab 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005d17e:	2207      	movs	r2, #7
1005d180:	2301      	movs	r3, #1
1005d182:	4620      	mov	r0, r4
1005d184:	4631      	mov	r1, r6
1005d186:	f7fd fa5c 	bl	1005a642 <LL_cpe_set_active>
1005d18a:	7828      	ldrb	r0, [r5, #0]
1005d18c:	2802      	cmp	r0, #2
1005d18e:	d104      	bne.n	1005d19a <LL_process_phy_req_rcpt+0xc6>
1005d190:	2100      	movs	r1, #0
1005d192:	2202      	movs	r2, #2
1005d194:	4620      	mov	r0, r4
1005d196:	f7fd fa8d 	bl	1005a6b4 <LL_cpe_set_blocked>
1005d19a:	b005      	add	sp, #20
1005d19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005d1a0 <LL_phy_upd_evt_pending_check_isr>:
1005d1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d1a2:	b087      	sub	sp, #28
1005d1a4:	4605      	mov	r5, r0
1005d1a6:	f7fb fbe9 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d1aa:	4604      	mov	r4, r0
1005d1ac:	4628      	mov	r0, r5
1005d1ae:	f7fb fc19 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005d1b2:	4605      	mov	r5, r0
1005d1b4:	209a      	movs	r0, #154	@ 0x9a
1005d1b6:	5a26      	ldrh	r6, [r4, r0]
1005d1b8:	05b0      	lsls	r0, r6, #22
1005d1ba:	4627      	mov	r7, r4
1005d1bc:	379a      	adds	r7, #154	@ 0x9a
1005d1be:	2800      	cmp	r0, #0
1005d1c0:	d545      	bpl.n	1005d24e <LL_phy_upd_evt_pending_check_isr+0xae>
1005d1c2:	482e      	ldr	r0, [pc, #184]	@ (1005d27c <__arm_cp.15_0>)
1005d1c4:	6800      	ldr	r0, [r0, #0]
1005d1c6:	213d      	movs	r1, #61	@ 0x3d
1005d1c8:	5c41      	ldrb	r1, [r0, r1]
1005d1ca:	0689      	lsls	r1, r1, #26
1005d1cc:	d53b      	bpl.n	1005d246 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005d1ce:	303d      	adds	r0, #61	@ 0x3d
1005d1d0:	7a40      	ldrb	r0, [r0, #9]
1005d1d2:	0640      	lsls	r0, r0, #25
1005d1d4:	d537      	bpl.n	1005d246 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005d1d6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005d1d8:	9002      	str	r0, [sp, #8]
1005d1da:	8bf8      	ldrh	r0, [r7, #30]
1005d1dc:	9003      	str	r0, [sp, #12]
1005d1de:	8c38      	ldrh	r0, [r7, #32]
1005d1e0:	9004      	str	r0, [sp, #16]
1005d1e2:	8b78      	ldrh	r0, [r7, #26]
1005d1e4:	9005      	str	r0, [sp, #20]
1005d1e6:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005d1e8:	9006      	str	r0, [sp, #24]
1005d1ea:	4825      	ldr	r0, [pc, #148]	@ (1005d280 <__arm_cp.15_1>)
1005d1ec:	6800      	ldr	r0, [r0, #0]
1005d1ee:	6900      	ldr	r0, [r0, #16]
1005d1f0:	2180      	movs	r1, #128	@ 0x80
1005d1f2:	2226      	movs	r2, #38	@ 0x26
1005d1f4:	2304      	movs	r3, #4
1005d1f6:	9301      	str	r3, [sp, #4]
1005d1f8:	f7f6 fc9a 	bl	10053b30 <aci_event_fifo_push_header>
1005d1fc:	2800      	cmp	r0, #0
1005d1fe:	d022      	beq.n	1005d246 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005d200:	4601      	mov	r1, r0
1005d202:	9a02      	ldr	r2, [sp, #8]
1005d204:	7402      	strb	r2, [r0, #16]
1005d206:	9b03      	ldr	r3, [sp, #12]
1005d208:	7383      	strb	r3, [r0, #14]
1005d20a:	9804      	ldr	r0, [sp, #16]
1005d20c:	7308      	strb	r0, [r1, #12]
1005d20e:	9805      	ldr	r0, [sp, #20]
1005d210:	7288      	strb	r0, [r1, #10]
1005d212:	9806      	ldr	r0, [sp, #24]
1005d214:	7208      	strb	r0, [r1, #8]
1005d216:	2007      	movs	r0, #7
1005d218:	71c8      	strb	r0, [r1, #7]
1005d21a:	200b      	movs	r0, #11
1005d21c:	7188      	strb	r0, [r1, #6]
1005d21e:	203e      	movs	r0, #62	@ 0x3e
1005d220:	7148      	strb	r0, [r1, #5]
1005d222:	9801      	ldr	r0, [sp, #4]
1005d224:	7108      	strb	r0, [r1, #4]
1005d226:	0a10      	lsrs	r0, r2, #8
1005d228:	7448      	strb	r0, [r1, #17]
1005d22a:	0a18      	lsrs	r0, r3, #8
1005d22c:	73c8      	strb	r0, [r1, #15]
1005d22e:	9804      	ldr	r0, [sp, #16]
1005d230:	0a00      	lsrs	r0, r0, #8
1005d232:	7348      	strb	r0, [r1, #13]
1005d234:	9805      	ldr	r0, [sp, #20]
1005d236:	0a00      	lsrs	r0, r0, #8
1005d238:	72c8      	strb	r0, [r1, #11]
1005d23a:	9806      	ldr	r0, [sp, #24]
1005d23c:	0a00      	lsrs	r0, r0, #8
1005d23e:	7248      	strb	r0, [r1, #9]
1005d240:	2080      	movs	r0, #128	@ 0x80
1005d242:	f7f6 fd12 	bl	10053c6a <aci_event_fifo_push>
1005d246:	8838      	ldrh	r0, [r7, #0]
1005d248:	490e      	ldr	r1, [pc, #56]	@ (1005d284 <__arm_cp.15_2>)
1005d24a:	4001      	ands	r1, r0
1005d24c:	8039      	strh	r1, [r7, #0]
1005d24e:	05f0      	lsls	r0, r6, #23
1005d250:	d512      	bpl.n	1005d278 <LL_phy_upd_evt_pending_check_isr+0xd8>
1005d252:	79e9      	ldrb	r1, [r5, #7]
1005d254:	2003      	movs	r0, #3
1005d256:	074a      	lsls	r2, r1, #29
1005d258:	d500      	bpl.n	1005d25c <LL_phy_upd_evt_pending_check_isr+0xbc>
1005d25a:	4601      	mov	r1, r0
1005d25c:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005d25e:	79ab      	ldrb	r3, [r5, #6]
1005d260:	9100      	str	r1, [sp, #0]
1005d262:	0759      	lsls	r1, r3, #29
1005d264:	d500      	bpl.n	1005d268 <LL_phy_upd_evt_pending_check_isr+0xc8>
1005d266:	4603      	mov	r3, r0
1005d268:	2080      	movs	r0, #128	@ 0x80
1005d26a:	2100      	movs	r1, #0
1005d26c:	f000 f80e 	bl	1005d28c <hci_le_phy_update_complete_event_push>
1005d270:	8838      	ldrh	r0, [r7, #0]
1005d272:	4905      	ldr	r1, [pc, #20]	@ (1005d288 <__arm_cp.15_3>)
1005d274:	4001      	ands	r1, r0
1005d276:	8039      	strh	r1, [r7, #0]
1005d278:	b007      	add	sp, #28
1005d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d27c <__arm_cp.15_0>:
1005d27c:	20002468 	.word	0x20002468

1005d280 <__arm_cp.15_1>:
1005d280:	20002418 	.word	0x20002418

1005d284 <__arm_cp.15_2>:
1005d284:	0000fdff 	.word	0x0000fdff

1005d288 <__arm_cp.15_3>:
1005d288:	0000feff 	.word	0x0000feff

1005d28c <hci_le_phy_update_complete_event_push>:
1005d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d28e:	4604      	mov	r4, r0
1005d290:	06c0      	lsls	r0, r0, #27
1005d292:	d42c      	bmi.n	1005d2ee <hci_le_phy_update_complete_event_push+0x62>
1005d294:	460f      	mov	r7, r1
1005d296:	4816      	ldr	r0, [pc, #88]	@ (1005d2f0 <__arm_cp.16_0>)
1005d298:	6800      	ldr	r0, [r0, #0]
1005d29a:	213d      	movs	r1, #61	@ 0x3d
1005d29c:	5c41      	ldrb	r1, [r0, r1]
1005d29e:	0689      	lsls	r1, r1, #26
1005d2a0:	d525      	bpl.n	1005d2ee <hci_le_phy_update_complete_event_push+0x62>
1005d2a2:	303d      	adds	r0, #61	@ 0x3d
1005d2a4:	7a80      	ldrb	r0, [r0, #10]
1005d2a6:	0700      	lsls	r0, r0, #28
1005d2a8:	d521      	bpl.n	1005d2ee <hci_le_phy_update_complete_event_push+0x62>
1005d2aa:	461e      	mov	r6, r3
1005d2ac:	4615      	mov	r5, r2
1005d2ae:	4811      	ldr	r0, [pc, #68]	@ (1005d2f4 <__arm_cp.16_1>)
1005d2b0:	6800      	ldr	r0, [r0, #0]
1005d2b2:	0761      	lsls	r1, r4, #29
1005d2b4:	0ec9      	lsrs	r1, r1, #27
1005d2b6:	1840      	adds	r0, r0, r1
1005d2b8:	6900      	ldr	r0, [r0, #16]
1005d2ba:	2227      	movs	r2, #39	@ 0x27
1005d2bc:	2303      	movs	r3, #3
1005d2be:	4621      	mov	r1, r4
1005d2c0:	f7f6 fc36 	bl	10053b30 <aci_event_fifo_push_header>
1005d2c4:	2800      	cmp	r0, #0
1005d2c6:	d012      	beq.n	1005d2ee <hci_le_phy_update_complete_event_push+0x62>
1005d2c8:	4601      	mov	r1, r0
1005d2ca:	9806      	ldr	r0, [sp, #24]
1005d2cc:	724d      	strb	r5, [r1, #9]
1005d2ce:	7308      	strb	r0, [r1, #12]
1005d2d0:	72ce      	strb	r6, [r1, #11]
1005d2d2:	720f      	strb	r7, [r1, #8]
1005d2d4:	200c      	movs	r0, #12
1005d2d6:	71c8      	strb	r0, [r1, #7]
1005d2d8:	2006      	movs	r0, #6
1005d2da:	7188      	strb	r0, [r1, #6]
1005d2dc:	203e      	movs	r0, #62	@ 0x3e
1005d2de:	7148      	strb	r0, [r1, #5]
1005d2e0:	2004      	movs	r0, #4
1005d2e2:	7108      	strb	r0, [r1, #4]
1005d2e4:	0a28      	lsrs	r0, r5, #8
1005d2e6:	7288      	strb	r0, [r1, #10]
1005d2e8:	4620      	mov	r0, r4
1005d2ea:	f7f6 fcbe 	bl	10053c6a <aci_event_fifo_push>
1005d2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d2f0 <__arm_cp.16_0>:
1005d2f0:	20002468 	.word	0x20002468

1005d2f4 <__arm_cp.16_1>:
1005d2f4:	20002418 	.word	0x20002418

1005d2f8 <LL_adjust_max_tx_data_frag>:
1005d2f8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d2fa:	9302      	str	r3, [sp, #8]
1005d2fc:	9201      	str	r2, [sp, #4]
1005d2fe:	460e      	mov	r6, r1
1005d300:	4605      	mov	r5, r0
1005d302:	f7fb fb3b 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d306:	4604      	mov	r4, r0
1005d308:	4607      	mov	r7, r0
1005d30a:	34b4      	adds	r4, #180	@ 0xb4
1005d30c:	4628      	mov	r0, r5
1005d30e:	f7fb fb69 	bl	100589e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005d312:	9908      	ldr	r1, [sp, #32]
1005d314:	2e04      	cmp	r6, #4
1005d316:	d106      	bne.n	1005d326 <LL_adjust_max_tx_data_frag+0x2e>
1005d318:	2800      	cmp	r0, #0
1005d31a:	d004      	beq.n	1005d326 <LL_adjust_max_tx_data_frag+0x2e>
1005d31c:	9a01      	ldr	r2, [sp, #4]
1005d31e:	2a00      	cmp	r2, #0
1005d320:	d00c      	beq.n	1005d33c <LL_adjust_max_tx_data_frag+0x44>
1005d322:	220a      	movs	r2, #10
1005d324:	e00b      	b.n	1005d33e <LL_adjust_max_tx_data_frag+0x46>
1005d326:	8888      	ldrh	r0, [r1, #4]
1005d328:	8008      	strh	r0, [r1, #0]
1005d32a:	2e01      	cmp	r6, #1
1005d32c:	d102      	bne.n	1005d334 <LL_adjust_max_tx_data_frag+0x3c>
1005d32e:	08c0      	lsrs	r0, r0, #3
1005d330:	380e      	subs	r0, #14
1005d332:	e001      	b.n	1005d338 <LL_adjust_max_tx_data_frag+0x40>
1005d334:	0880      	lsrs	r0, r0, #2
1005d336:	380f      	subs	r0, #15
1005d338:	9e02      	ldr	r6, [sp, #8]
1005d33a:	e00f      	b.n	1005d35c <LL_adjust_max_tx_data_frag+0x64>
1005d33c:	2208      	movs	r2, #8
1005d33e:	9e02      	ldr	r6, [sp, #8]
1005d340:	5a8a      	ldrh	r2, [r1, r2]
1005d342:	800a      	strh	r2, [r1, #0]
1005d344:	8800      	ldrh	r0, [r0, #0]
1005d346:	2802      	cmp	r0, #2
1005d348:	d001      	beq.n	1005d34e <LL_adjust_max_tx_data_frag+0x56>
1005d34a:	2001      	movs	r0, #1
1005d34c:	e000      	b.n	1005d350 <LL_adjust_max_tx_data_frag+0x58>
1005d34e:	2003      	movs	r0, #3
1005d350:	4b0b      	ldr	r3, [pc, #44]	@ (1005d380 <__arm_cp.20_0>)
1005d352:	18d2      	adds	r2, r2, r3
1005d354:	40c2      	lsrs	r2, r0
1005d356:	480b      	ldr	r0, [pc, #44]	@ (1005d384 <__arm_cp.20_1>)
1005d358:	1810      	adds	r0, r2, r0
1005d35a:	08c0      	lsrs	r0, r0, #3
1005d35c:	b283      	uxth	r3, r0
1005d35e:	8822      	ldrh	r2, [r4, #0]
1005d360:	429a      	cmp	r2, r3
1005d362:	d300      	bcc.n	1005d366 <LL_adjust_max_tx_data_frag+0x6e>
1005d364:	4602      	mov	r2, r0
1005d366:	2e00      	cmp	r6, #0
1005d368:	d003      	beq.n	1005d372 <LL_adjust_max_tx_data_frag+0x7a>
1005d36a:	b293      	uxth	r3, r2
1005d36c:	89c8      	ldrh	r0, [r1, #14]
1005d36e:	4298      	cmp	r0, r3
1005d370:	d300      	bcc.n	1005d374 <LL_adjust_max_tx_data_frag+0x7c>
1005d372:	4610      	mov	r0, r2
1005d374:	8060      	strh	r0, [r4, #2]
1005d376:	4638      	mov	r0, r7
1005d378:	f7fb fdca 	bl	10058f10 <llc_conn_guard_time_for_close_conn_event>
1005d37c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d37e:	46c0      	nop			@ (mov r8, r8)

1005d380 <__arm_cp.20_0>:
1005d380:	fffffe88 	.word	0xfffffe88

1005d384 <__arm_cp.20_1>:
1005d384:	0007ffb5 	.word	0x0007ffb5

1005d388 <LL_version_exchange>:
1005d388:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d38a:	b087      	sub	sp, #28
1005d38c:	461f      	mov	r7, r3
1005d38e:	4616      	mov	r6, r2
1005d390:	460c      	mov	r4, r1
1005d392:	4605      	mov	r5, r0
1005d394:	f7fd f9ab 	bl	1005a6ee <LL_cpe_get_cntxt>
1005d398:	9004      	str	r0, [sp, #16]
1005d39a:	4628      	mov	r0, r5
1005d39c:	f7fb faee 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d3a0:	22ff      	movs	r2, #255	@ 0xff
1005d3a2:	2e06      	cmp	r6, #6
1005d3a4:	d900      	bls.n	1005d3a8 <LL_version_exchange+0x20>
1005d3a6:	e0b2      	b.n	1005d50e <LL_version_exchange+0x186>
1005d3a8:	4603      	mov	r3, r0
1005d3aa:	46c0      	nop			@ (mov r8, r8)
1005d3ac:	447e      	add	r6, pc
1005d3ae:	7936      	ldrb	r6, [r6, #4]
1005d3b0:	0076      	lsls	r6, r6, #1
1005d3b2:	44b7      	add	pc, r6
1005d3b4:	3aac0e03 	.word	0x3aac0e03
1005d3b8:	0053acac 	.word	0x0053acac
1005d3bc:	2c01      	cmp	r4, #1
1005d3be:	d15c      	bne.n	1005d47a <LL_version_exchange+0xf2>
1005d3c0:	208c      	movs	r0, #140	@ 0x8c
1005d3c2:	5818      	ldr	r0, [r3, r0]
1005d3c4:	0601      	lsls	r1, r0, #24
1005d3c6:	338c      	adds	r3, #140	@ 0x8c
1005d3c8:	2900      	cmp	r1, #0
1005d3ca:	9904      	ldr	r1, [sp, #16]
1005d3cc:	d460      	bmi.n	1005d490 <LL_version_exchange+0x108>
1005d3ce:	220c      	movs	r2, #12
1005d3d0:	e06c      	b.n	1005d4ac <LL_version_exchange+0x124>
1005d3d2:	9302      	str	r3, [sp, #8]
1005d3d4:	9203      	str	r2, [sp, #12]
1005d3d6:	4628      	mov	r0, r5
1005d3d8:	f000 f8d4 	bl	1005d584 <LL_conn_get_version_exchange_cached>
1005d3dc:	2800      	cmp	r0, #0
1005d3de:	d000      	beq.n	1005d3e2 <LL_version_exchange+0x5a>
1005d3e0:	e094      	b.n	1005d50c <LL_version_exchange+0x184>
1005d3e2:	1cf8      	adds	r0, r7, #3
1005d3e4:	2205      	movs	r2, #5
1005d3e6:	9201      	str	r2, [sp, #4]
1005d3e8:	9e04      	ldr	r6, [sp, #16]
1005d3ea:	4631      	mov	r1, r6
1005d3ec:	f004 f872 	bl	100614d4 <char_copy>
1005d3f0:	9f02      	ldr	r7, [sp, #8]
1005d3f2:	4639      	mov	r1, r7
1005d3f4:	313c      	adds	r1, #60	@ 0x3c
1005d3f6:	4630      	mov	r0, r6
1005d3f8:	9a01      	ldr	r2, [sp, #4]
1005d3fa:	f004 f86b 	bl	100614d4 <char_copy>
1005d3fe:	208c      	movs	r0, #140	@ 0x8c
1005d400:	5838      	ldr	r0, [r7, r0]
1005d402:	0642      	lsls	r2, r0, #25
1005d404:	4639      	mov	r1, r7
1005d406:	318c      	adds	r1, #140	@ 0x8c
1005d408:	2a00      	cmp	r2, #0
1005d40a:	d46e      	bmi.n	1005d4ea <LL_version_exchange+0x162>
1005d40c:	2201      	movs	r2, #1
1005d40e:	0212      	lsls	r2, r2, #8
1005d410:	4310      	orrs	r0, r2
1005d412:	6008      	str	r0, [r1, #0]
1005d414:	4628      	mov	r0, r5
1005d416:	4621      	mov	r1, r4
1005d418:	f7fd f95c 	bl	1005a6d4 <LL_cpe_set_prepare_tx_pdu>
1005d41c:	2205      	movs	r2, #5
1005d41e:	2300      	movs	r3, #0
1005d420:	4628      	mov	r0, r5
1005d422:	4621      	mov	r1, r4
1005d424:	f7fd f90d 	bl	1005a642 <LL_cpe_set_active>
1005d428:	e070      	b.n	1005d50c <LL_version_exchange+0x184>
1005d42a:	78b8      	ldrb	r0, [r7, #2]
1005d42c:	280c      	cmp	r0, #12
1005d42e:	d16e      	bne.n	1005d50e <LL_version_exchange+0x186>
1005d430:	1cf8      	adds	r0, r7, #3
1005d432:	2605      	movs	r6, #5
1005d434:	9f04      	ldr	r7, [sp, #16]
1005d436:	4639      	mov	r1, r7
1005d438:	9203      	str	r2, [sp, #12]
1005d43a:	4632      	mov	r2, r6
1005d43c:	9302      	str	r3, [sp, #8]
1005d43e:	f004 f849 	bl	100614d4 <char_copy>
1005d442:	4628      	mov	r0, r5
1005d444:	4621      	mov	r1, r4
1005d446:	4632      	mov	r2, r6
1005d448:	f7fd f912 	bl	1005a670 <LL_cpe_clr_active>
1005d44c:	9802      	ldr	r0, [sp, #8]
1005d44e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005d450:	4639      	mov	r1, r7
1005d452:	f000 f86f 	bl	1005d534 <hci_read_remote_version_information_complete_event_push>
1005d456:	4628      	mov	r0, r5
1005d458:	4639      	mov	r1, r7
1005d45a:	e055      	b.n	1005d508 <LL_version_exchange+0x180>
1005d45c:	4616      	mov	r6, r2
1005d45e:	a806      	add	r0, sp, #24
1005d460:	2130      	movs	r1, #48	@ 0x30
1005d462:	8001      	strh	r1, [r0, #0]
1005d464:	2c01      	cmp	r4, #1
1005d466:	d12a      	bne.n	1005d4be <LL_version_exchange+0x136>
1005d468:	208c      	movs	r0, #140	@ 0x8c
1005d46a:	5818      	ldr	r0, [r3, r0]
1005d46c:	05c1      	lsls	r1, r0, #23
1005d46e:	d421      	bmi.n	1005d4b4 <LL_version_exchange+0x12c>
1005d470:	338c      	adds	r3, #140	@ 0x8c
1005d472:	2140      	movs	r1, #64	@ 0x40
1005d474:	4308      	orrs	r0, r1
1005d476:	6018      	str	r0, [r3, #0]
1005d478:	e021      	b.n	1005d4be <LL_version_exchange+0x136>
1005d47a:	4616      	mov	r6, r2
1005d47c:	2205      	movs	r2, #5
1005d47e:	4628      	mov	r0, r5
1005d480:	4621      	mov	r1, r4
1005d482:	f7fd f8f5 	bl	1005a670 <LL_cpe_clr_active>
1005d486:	4628      	mov	r0, r5
1005d488:	9904      	ldr	r1, [sp, #16]
1005d48a:	f000 f843 	bl	1005d514 <LL_conn_version_exchange_set_cached>
1005d48e:	e02a      	b.n	1005d4e6 <LL_version_exchange+0x15e>
1005d490:	4628      	mov	r0, r5
1005d492:	461c      	mov	r4, r3
1005d494:	f000 f83e 	bl	1005d514 <LL_conn_version_exchange_set_cached>
1005d498:	2101      	movs	r1, #1
1005d49a:	2205      	movs	r2, #5
1005d49c:	4628      	mov	r0, r5
1005d49e:	f7fd f8e7 	bl	1005a670 <LL_cpe_clr_active>
1005d4a2:	4623      	mov	r3, r4
1005d4a4:	6820      	ldr	r0, [r4, #0]
1005d4a6:	2180      	movs	r1, #128	@ 0x80
1005d4a8:	4388      	bics	r0, r1
1005d4aa:	22ff      	movs	r2, #255	@ 0xff
1005d4ac:	2140      	movs	r1, #64	@ 0x40
1005d4ae:	4388      	bics	r0, r1
1005d4b0:	6018      	str	r0, [r3, #0]
1005d4b2:	e02c      	b.n	1005d50e <LL_version_exchange+0x186>
1005d4b4:	2101      	movs	r1, #1
1005d4b6:	2205      	movs	r2, #5
1005d4b8:	4628      	mov	r0, r5
1005d4ba:	f7fd f8d9 	bl	1005a670 <LL_cpe_clr_active>
1005d4be:	200d      	movs	r0, #13
1005d4c0:	70f8      	strb	r0, [r7, #3]
1005d4c2:	200c      	movs	r0, #12
1005d4c4:	70b8      	strb	r0, [r7, #2]
1005d4c6:	2006      	movs	r0, #6
1005d4c8:	7078      	strb	r0, [r7, #1]
1005d4ca:	2503      	movs	r5, #3
1005d4cc:	703d      	strb	r5, [r7, #0]
1005d4ce:	1d39      	adds	r1, r7, #4
1005d4d0:	a806      	add	r0, sp, #24
1005d4d2:	2402      	movs	r4, #2
1005d4d4:	4622      	mov	r2, r4
1005d4d6:	f003 fffd 	bl	100614d4 <char_copy>
1005d4da:	a805      	add	r0, sp, #20
1005d4dc:	8005      	strh	r5, [r0, #0]
1005d4de:	1db9      	adds	r1, r7, #6
1005d4e0:	4622      	mov	r2, r4
1005d4e2:	f003 fff7 	bl	100614d4 <char_copy>
1005d4e6:	4632      	mov	r2, r6
1005d4e8:	e011      	b.n	1005d50e <LL_version_exchange+0x186>
1005d4ea:	2280      	movs	r2, #128	@ 0x80
1005d4ec:	4310      	orrs	r0, r2
1005d4ee:	6008      	str	r0, [r1, #0]
1005d4f0:	2205      	movs	r2, #5
1005d4f2:	4628      	mov	r0, r5
1005d4f4:	4621      	mov	r1, r4
1005d4f6:	463c      	mov	r4, r7
1005d4f8:	f7fd f8ba 	bl	1005a670 <LL_cpe_clr_active>
1005d4fc:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005d4fe:	4631      	mov	r1, r6
1005d500:	f000 f818 	bl	1005d534 <hci_read_remote_version_information_complete_event_push>
1005d504:	4628      	mov	r0, r5
1005d506:	4631      	mov	r1, r6
1005d508:	f000 f804 	bl	1005d514 <LL_conn_version_exchange_set_cached>
1005d50c:	9a03      	ldr	r2, [sp, #12]
1005d50e:	4610      	mov	r0, r2
1005d510:	b007      	add	sp, #28
1005d512:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d514 <LL_conn_version_exchange_set_cached>:
1005d514:	b510      	push	{r4, lr}
1005d516:	460c      	mov	r4, r1
1005d518:	f7fb fa30 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d51c:	4601      	mov	r1, r0
1005d51e:	208c      	movs	r0, #140	@ 0x8c
1005d520:	580a      	ldr	r2, [r1, r0]
1005d522:	2308      	movs	r3, #8
1005d524:	4313      	orrs	r3, r2
1005d526:	500b      	str	r3, [r1, r0]
1005d528:	313c      	adds	r1, #60	@ 0x3c
1005d52a:	2205      	movs	r2, #5
1005d52c:	4620      	mov	r0, r4
1005d52e:	f003 ffd1 	bl	100614d4 <char_copy>
1005d532:	bd10      	pop	{r4, pc}

1005d534 <hci_read_remote_version_information_complete_event_push>:
1005d534:	b570      	push	{r4, r5, r6, lr}
1005d536:	460c      	mov	r4, r1
1005d538:	4605      	mov	r5, r0
1005d53a:	4810      	ldr	r0, [pc, #64]	@ (1005d57c <__arm_cp.2_0>)
1005d53c:	6800      	ldr	r0, [r0, #0]
1005d53e:	2137      	movs	r1, #55	@ 0x37
1005d540:	5c40      	ldrb	r0, [r0, r1]
1005d542:	0700      	lsls	r0, r0, #28
1005d544:	d519      	bpl.n	1005d57a <hci_read_remote_version_information_complete_event_push+0x46>
1005d546:	480e      	ldr	r0, [pc, #56]	@ (1005d580 <__arm_cp.2_1>)
1005d548:	6800      	ldr	r0, [r0, #0]
1005d54a:	6980      	ldr	r0, [r0, #24]
1005d54c:	2102      	movs	r1, #2
1005d54e:	2221      	movs	r2, #33	@ 0x21
1005d550:	2303      	movs	r3, #3
1005d552:	f7f6 faed 	bl	10053b30 <aci_event_fifo_push_header>
1005d556:	2800      	cmp	r0, #0
1005d558:	d00f      	beq.n	1005d57a <hci_read_remote_version_information_complete_event_push+0x46>
1005d55a:	4606      	mov	r6, r0
1005d55c:	1d00      	adds	r0, r0, #4
1005d55e:	4629      	mov	r1, r5
1005d560:	4622      	mov	r2, r4
1005d562:	f7f6 fe07 	bl	10054174 <hci_read_remote_version_information_complete_event_copy>
1005d566:	2008      	movs	r0, #8
1005d568:	71b0      	strb	r0, [r6, #6]
1005d56a:	200c      	movs	r0, #12
1005d56c:	7170      	strb	r0, [r6, #5]
1005d56e:	2004      	movs	r0, #4
1005d570:	7130      	strb	r0, [r6, #4]
1005d572:	2002      	movs	r0, #2
1005d574:	4631      	mov	r1, r6
1005d576:	f7f6 fb78 	bl	10053c6a <aci_event_fifo_push>
1005d57a:	bd70      	pop	{r4, r5, r6, pc}

1005d57c <__arm_cp.2_0>:
1005d57c:	20002468 	.word	0x20002468

1005d580 <__arm_cp.2_1>:
1005d580:	20002418 	.word	0x20002418

1005d584 <LL_conn_get_version_exchange_cached>:
1005d584:	b580      	push	{r7, lr}
1005d586:	f7fb f9f9 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005d58a:	218c      	movs	r1, #140	@ 0x8c
1005d58c:	5840      	ldr	r0, [r0, r1]
1005d58e:	0700      	lsls	r0, r0, #28
1005d590:	0fc0      	lsrs	r0, r0, #31
1005d592:	bd80      	pop	{r7, pc}

1005d594 <llc_cte_get_ctxt>:
1005d594:	4802      	ldr	r0, [pc, #8]	@ (1005d5a0 <__arm_cp.2_0>)
1005d596:	6800      	ldr	r0, [r0, #0]
1005d598:	219c      	movs	r1, #156	@ 0x9c
1005d59a:	5840      	ldr	r0, [r0, r1]
1005d59c:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005d59e:	4770      	bx	lr

1005d5a0 <__arm_cp.2_0>:
1005d5a0:	20002468 	.word	0x20002468

1005d5a4 <llc_cte_init_ucfg_weak>:
1005d5a4:	4770      	bx	lr

1005d5a6 <llc_cte_mem_allocate_ucfg_weak>:
1005d5a6:	4770      	bx	lr

1005d5a8 <llc_cte_timer_error_ucfg_weak>:
1005d5a8:	4770      	bx	lr

1005d5aa <llc_cte_timer_stop_ucfg_weak>:
1005d5aa:	2000      	movs	r0, #0
1005d5ac:	4770      	bx	lr
	...

1005d5b0 <LL_dtm_init>:
1005d5b0:	b5b0      	push	{r4, r5, r7, lr}
1005d5b2:	480e      	ldr	r0, [pc, #56]	@ (1005d5ec <__arm_cp.0_0>)
1005d5b4:	6800      	ldr	r0, [r0, #0]
1005d5b6:	21ac      	movs	r1, #172	@ 0xac
1005d5b8:	5844      	ldr	r4, [r0, r1]
1005d5ba:	20ff      	movs	r0, #255	@ 0xff
1005d5bc:	77a0      	strb	r0, [r4, #30]
1005d5be:	2500      	movs	r5, #0
1005d5c0:	77e5      	strb	r5, [r4, #31]
1005d5c2:	f7fa fca9 	bl	10057f18 <cte_csr_ucfg_weak>
1005d5c6:	2801      	cmp	r0, #1
1005d5c8:	d10f      	bne.n	1005d5ea <LL_dtm_init+0x3a>
1005d5ca:	f7ff ffe3 	bl	1005d594 <llc_cte_get_ctxt>
1005d5ce:	2224      	movs	r2, #36	@ 0x24
1005d5d0:	4907      	ldr	r1, [pc, #28]	@ (1005d5f0 <__arm_cp.0_1>)
1005d5d2:	5c8a      	ldrb	r2, [r1, r2]
1005d5d4:	2a00      	cmp	r2, #0
1005d5d6:	462a      	mov	r2, r5
1005d5d8:	d000      	beq.n	1005d5dc <LL_dtm_init+0x2c>
1005d5da:	6802      	ldr	r2, [r0, #0]
1005d5dc:	62a2      	str	r2, [r4, #40]	@ 0x28
1005d5de:	2223      	movs	r2, #35	@ 0x23
1005d5e0:	5c89      	ldrb	r1, [r1, r2]
1005d5e2:	2900      	cmp	r1, #0
1005d5e4:	d000      	beq.n	1005d5e8 <LL_dtm_init+0x38>
1005d5e6:	6845      	ldr	r5, [r0, #4]
1005d5e8:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005d5ea:	bdb0      	pop	{r4, r5, r7, pc}

1005d5ec <__arm_cp.0_0>:
1005d5ec:	20002468 	.word	0x20002468

1005d5f0 <__arm_cp.0_1>:
1005d5f0:	2000247c 	.word	0x2000247c

1005d5f4 <LL_eadv_switchbackupdata_data_struc>:
1005d5f4:	b510      	push	{r4, lr}
1005d5f6:	7c01      	ldrb	r1, [r0, #16]
1005d5f8:	2902      	cmp	r1, #2
1005d5fa:	d109      	bne.n	1005d610 <LL_eadv_switchbackupdata_data_struc+0x1c>
1005d5fc:	2401      	movs	r4, #1
1005d5fe:	7404      	strb	r4, [r0, #16]
1005d600:	6801      	ldr	r1, [r0, #0]
1005d602:	6882      	ldr	r2, [r0, #8]
1005d604:	68c3      	ldr	r3, [r0, #12]
1005d606:	c00c      	stmia	r0!, {r2, r3}
1005d608:	20a1      	movs	r0, #161	@ 0xa1
1005d60a:	f005 fa0b 	bl	10062a24 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005d60e:	e000      	b.n	1005d612 <LL_eadv_switchbackupdata_data_struc+0x1e>
1005d610:	2400      	movs	r4, #0
1005d612:	4620      	mov	r0, r4
1005d614:	bd10      	pop	{r4, pc}

1005d616 <LL_eadv_Blue_Tx>:
1005d616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d618:	461e      	mov	r6, r3
1005d61a:	4617      	mov	r7, r2
1005d61c:	460d      	mov	r5, r1
1005d61e:	4604      	mov	r4, r0
1005d620:	f7f4 feac 	bl	1005237c <BLEPLAT_CNTR_PacketInitTo0>
1005d624:	4620      	mov	r0, r4
1005d626:	f7f4 feb7 	bl	10052398 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005d62a:	4620      	mov	r0, r4
1005d62c:	f7f4 ff33 	bl	10052496 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005d630:	4620      	mov	r0, r4
1005d632:	4621      	mov	r1, r4
1005d634:	f7f4 ff3c 	bl	100524b0 <BLEPLAT_CNTR_PacketSetNextPtr>
1005d638:	4620      	mov	r0, r4
1005d63a:	4639      	mov	r1, r7
1005d63c:	f7f4 fed3 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
1005d640:	4620      	mov	r0, r4
1005d642:	4631      	mov	r1, r6
1005d644:	f7f4 ff8e 	bl	10052564 <BLEPLAT_CNTR_PacketSetTimeout>
1005d648:	9f06      	ldr	r7, [sp, #24]
1005d64a:	2e00      	cmp	r6, #0
1005d64c:	d002      	beq.n	1005d654 <LL_eadv_Blue_Tx+0x3e>
1005d64e:	4620      	mov	r0, r4
1005d650:	f7f4 ff97 	bl	10052582 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005d654:	4620      	mov	r0, r4
1005d656:	f7f4 fe6b 	bl	10052330 <BLEPLAT_CNTR_PacketClrIncChan>
1005d65a:	4620      	mov	r0, r4
1005d65c:	f7f4 feea 	bl	10052434 <BLEPLAT_CNTR_PacketSetIntDone>
1005d660:	4620      	mov	r0, r4
1005d662:	f7f4 ffb4 	bl	100525ce <BLEPLAT_CNTR_PacketSetTxReady>
1005d666:	4620      	mov	r0, r4
1005d668:	2f81      	cmp	r7, #129	@ 0x81
1005d66a:	d109      	bne.n	1005d680 <LL_eadv_Blue_Tx+0x6a>
1005d66c:	4629      	mov	r1, r5
1005d66e:	f7f4 ff3b 	bl	100524e8 <BLEPLAT_CNTR_PacketSetNextSlot>
1005d672:	4620      	mov	r0, r4
1005d674:	f7f4 ff5c 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005d678:	4620      	mov	r0, r4
1005d67a:	f7f4 ff8e 	bl	1005259a <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005d67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d680:	f7f4 ff98 	bl	100525b4 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005d684:	4620      	mov	r0, r4
1005d686:	f7f4 ff22 	bl	100524ce <BLEPLAT_CNTR_PacketSetNextRxMode>
1005d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d68c <LL_eadv_Blue_Rx>:
1005d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d68e:	461e      	mov	r6, r3
1005d690:	4617      	mov	r7, r2
1005d692:	460d      	mov	r5, r1
1005d694:	4604      	mov	r4, r0
1005d696:	f7f4 fe71 	bl	1005237c <BLEPLAT_CNTR_PacketInitTo0>
1005d69a:	4620      	mov	r0, r4
1005d69c:	f7f4 fe7c 	bl	10052398 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005d6a0:	4620      	mov	r0, r4
1005d6a2:	f7f4 fef8 	bl	10052496 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005d6a6:	4620      	mov	r0, r4
1005d6a8:	4621      	mov	r1, r4
1005d6aa:	f7f4 ff01 	bl	100524b0 <BLEPLAT_CNTR_PacketSetNextPtr>
1005d6ae:	4620      	mov	r0, r4
1005d6b0:	4639      	mov	r1, r7
1005d6b2:	f7f4 fe98 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
1005d6b6:	4620      	mov	r0, r4
1005d6b8:	4631      	mov	r1, r6
1005d6ba:	f7f4 ff53 	bl	10052564 <BLEPLAT_CNTR_PacketSetTimeout>
1005d6be:	9f07      	ldr	r7, [sp, #28]
1005d6c0:	2e00      	cmp	r6, #0
1005d6c2:	d002      	beq.n	1005d6ca <LL_eadv_Blue_Rx+0x3e>
1005d6c4:	4620      	mov	r0, r4
1005d6c6:	f7f4 ff5c 	bl	10052582 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005d6ca:	4620      	mov	r0, r4
1005d6cc:	f7f4 ff17 	bl	100524fe <BLEPLAT_CNTR_PacketSetNextTxMode>
1005d6d0:	4620      	mov	r0, r4
1005d6d2:	f7f4 fe2d 	bl	10052330 <BLEPLAT_CNTR_PacketClrIncChan>
1005d6d6:	4620      	mov	r0, r4
1005d6d8:	f7f4 feac 	bl	10052434 <BLEPLAT_CNTR_PacketSetIntDone>
1005d6dc:	4620      	mov	r0, r4
1005d6de:	f7f4 ff69 	bl	100525b4 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005d6e2:	4620      	mov	r0, r4
1005d6e4:	f7f4 feb2 	bl	1005244c <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005d6e8:	4620      	mov	r0, r4
1005d6ea:	f7f4 ff2e 	bl	1005254a <BLEPLAT_CNTR_PacketSetRxReady>
1005d6ee:	2f81      	cmp	r7, #129	@ 0x81
1005d6f0:	d107      	bne.n	1005d702 <LL_eadv_Blue_Rx+0x76>
1005d6f2:	4620      	mov	r0, r4
1005d6f4:	4629      	mov	r1, r5
1005d6f6:	f7f4 fef7 	bl	100524e8 <BLEPLAT_CNTR_PacketSetNextSlot>
1005d6fa:	4620      	mov	r0, r4
1005d6fc:	f7f4 fe24 	bl	10052348 <BLEPLAT_CNTR_PacketClrPllTrig>
1005d700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d702:	4620      	mov	r0, r4
1005d704:	f7f4 ff14 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005d708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005d70c <LL_eadv_BLUE_SM>:
1005d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d70e:	461d      	mov	r5, r3
1005d710:	4616      	mov	r6, r2
1005d712:	460f      	mov	r7, r1
1005d714:	4604      	mov	r4, r0
1005d716:	f7f5 f8d7 	bl	100528c8 <BLEPLAT_CNTR_SmInitTo0>
1005d71a:	4911      	ldr	r1, [pc, #68]	@ (1005d760 <__arm_cp.10_0>)
1005d71c:	4620      	mov	r0, r4
1005d71e:	f7f5 f8f1 	bl	10052904 <BLEPLAT_CNTR_SmSetAccessAddr>
1005d722:	4910      	ldr	r1, [pc, #64]	@ (1005d764 <__arm_cp.10_1>)
1005d724:	4620      	mov	r0, r4
1005d726:	f7f5 f930 	bl	1005298a <BLEPLAT_CNTR_SmSetCrcInit>
1005d72a:	4620      	mov	r0, r4
1005d72c:	4639      	mov	r1, r7
1005d72e:	f7f5 fa5d 	bl	10052bec <BLEPLAT_CNTR_SmSetTxPwr>
1005d732:	4620      	mov	r0, r4
1005d734:	4631      	mov	r1, r6
1005d736:	f7f5 fa32 	bl	10052b9e <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005d73a:	4620      	mov	r0, r4
1005d73c:	4629      	mov	r1, r5
1005d73e:	f7f5 f9c2 	bl	10052ac6 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005d742:	9806      	ldr	r0, [sp, #24]
1005d744:	2881      	cmp	r0, #129	@ 0x81
1005d746:	d103      	bne.n	1005d750 <LL_eadv_BLUE_SM+0x44>
1005d748:	4620      	mov	r0, r4
1005d74a:	f7f5 fa19 	bl	10052b80 <BLEPLAT_CNTR_SmSetTxMode>
1005d74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d750:	4620      	mov	r0, r4
1005d752:	f7f5 f9a9 	bl	10052aa8 <BLEPLAT_CNTR_SmSetRxMode>
1005d756:	2101      	movs	r1, #1
1005d758:	4620      	mov	r0, r4
1005d75a:	f7f5 f93d 	bl	100529d8 <BLEPLAT_CNTR_SmSetHopIncr>
1005d75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d760 <__arm_cp.10_0>:
1005d760:	8e89bed6 	.word	0x8e89bed6

1005d764 <__arm_cp.10_1>:
1005d764:	00555555 	.word	0x00555555

1005d768 <llc_get_advertising_set_index>:
1005d768:	b570      	push	{r4, r5, r6, lr}
1005d76a:	4604      	mov	r4, r0
1005d76c:	f001 fa94 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005d770:	214d      	movs	r1, #77	@ 0x4d
1005d772:	5c41      	ldrb	r1, [r0, r1]
1005d774:	4d09      	ldr	r5, [pc, #36]	@ (1005d79c <__arm_cp.12_0>)
1005d776:	2200      	movs	r2, #0
1005d778:	23be      	movs	r3, #190	@ 0xbe
1005d77a:	4291      	cmp	r1, r2
1005d77c:	d00b      	beq.n	1005d796 <llc_get_advertising_set_index+0x2e>
1005d77e:	6806      	ldr	r6, [r0, #0]
1005d780:	5af6      	ldrh	r6, [r6, r3]
1005d782:	42a6      	cmp	r6, r4
1005d784:	4616      	mov	r6, r2
1005d786:	d000      	beq.n	1005d78a <llc_get_advertising_set_index+0x22>
1005d788:	462e      	mov	r6, r5
1005d78a:	2501      	movs	r5, #1
1005d78c:	022d      	lsls	r5, r5, #8
1005d78e:	195b      	adds	r3, r3, r5
1005d790:	1c52      	adds	r2, r2, #1
1005d792:	4635      	mov	r5, r6
1005d794:	e7f1      	b.n	1005d77a <llc_get_advertising_set_index+0x12>
1005d796:	b2a8      	uxth	r0, r5
1005d798:	bd70      	pop	{r4, r5, r6, pc}
1005d79a:	46c0      	nop			@ (mov r8, r8)

1005d79c <__arm_cp.12_0>:
1005d79c:	0000ffff 	.word	0x0000ffff

1005d7a0 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d7a2:	4604      	mov	r4, r0
1005d7a4:	f001 fa78 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005d7a8:	4601      	mov	r1, r0
1005d7aa:	204d      	movs	r0, #77	@ 0x4d
1005d7ac:	5c08      	ldrb	r0, [r1, r0]
1005d7ae:	0202      	lsls	r2, r0, #8
1005d7b0:	2000      	movs	r0, #0
1005d7b2:	4b0d      	ldr	r3, [pc, #52]	@ (1005d7e8 <__arm_cp.17_0>)
1005d7b4:	4605      	mov	r5, r0
1005d7b6:	42aa      	cmp	r2, r5
1005d7b8:	d013      	beq.n	1005d7e2 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005d7ba:	680e      	ldr	r6, [r1, #0]
1005d7bc:	1976      	adds	r6, r6, r5
1005d7be:	27be      	movs	r7, #190	@ 0xbe
1005d7c0:	5bf7      	ldrh	r7, [r6, r7]
1005d7c2:	429f      	cmp	r7, r3
1005d7c4:	d003      	beq.n	1005d7ce <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005d7c6:	27ce      	movs	r7, #206	@ 0xce
1005d7c8:	5df7      	ldrb	r7, [r6, r7]
1005d7ca:	2f01      	cmp	r7, #1
1005d7cc:	d003      	beq.n	1005d7d6 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005d7ce:	2601      	movs	r6, #1
1005d7d0:	0236      	lsls	r6, r6, #8
1005d7d2:	19ad      	adds	r5, r5, r6
1005d7d4:	e7ef      	b.n	1005d7b6 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005d7d6:	2c00      	cmp	r4, #0
1005d7d8:	d004      	beq.n	1005d7e4 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005d7da:	20c3      	movs	r0, #195	@ 0xc3
1005d7dc:	5c30      	ldrb	r0, [r6, r0]
1005d7de:	1e41      	subs	r1, r0, #1
1005d7e0:	4188      	sbcs	r0, r1
1005d7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d7e4:	2001      	movs	r0, #1
1005d7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d7e8 <__arm_cp.17_0>:
1005d7e8:	0000ffff 	.word	0x0000ffff

1005d7ec <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005d7ec:	b5b0      	push	{r4, r5, r7, lr}
1005d7ee:	4604      	mov	r4, r0
1005d7f0:	20d6      	movs	r0, #214	@ 0xd6
1005d7f2:	5c20      	ldrb	r0, [r4, r0]
1005d7f4:	0780      	lsls	r0, r0, #30
1005d7f6:	d401      	bmi.n	1005d7fc <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005d7f8:	2000      	movs	r0, #0
1005d7fa:	bdb0      	pop	{r4, r5, r7, pc}
1005d7fc:	4625      	mov	r5, r4
1005d7fe:	3584      	adds	r5, #132	@ 0x84
1005d800:	4628      	mov	r0, r5
1005d802:	f7fc fe42 	bl	1005a48a <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005d806:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005d808:	4628      	mov	r0, r5
1005d80a:	f7fc fe36 	bl	1005a47a <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005d80e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005d810:	3008      	adds	r0, #8
1005d812:	2100      	movs	r1, #0
1005d814:	f7fc fe2f 	bl	1005a476 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005d818:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005d81a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005d81c:	6761      	str	r1, [r4, #116]	@ 0x74
1005d81e:	67a0      	str	r0, [r4, #120]	@ 0x78
1005d820:	2001      	movs	r0, #1
1005d822:	bdb0      	pop	{r4, r5, r7, pc}

1005d824 <EADV_init>:
1005d824:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d826:	b085      	sub	sp, #20
1005d828:	9204      	str	r2, [sp, #16]
1005d82a:	460e      	mov	r6, r1
1005d82c:	4605      	mov	r5, r0
1005d82e:	244d      	movs	r4, #77	@ 0x4d
1005d830:	f001 fa32 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005d834:	5505      	strb	r5, [r0, r4]
1005d836:	6006      	str	r6, [r0, #0]
1005d838:	9003      	str	r0, [sp, #12]
1005d83a:	304d      	adds	r0, #77	@ 0x4d
1005d83c:	2101      	movs	r1, #1
1005d83e:	9002      	str	r0, [sp, #8]
1005d840:	7041      	strb	r1, [r0, #1]
1005d842:	9101      	str	r1, [sp, #4]
1005d844:	04cb      	lsls	r3, r1, #19
1005d846:	2600      	movs	r6, #0
1005d848:	277c      	movs	r7, #124	@ 0x7c
1005d84a:	9a04      	ldr	r2, [sp, #16]
1005d84c:	b2e8      	uxtb	r0, r5
1005d84e:	4286      	cmp	r6, r0
1005d850:	d226      	bcs.n	1005d8a0 <EADV_init+0x7c>
1005d852:	9803      	ldr	r0, [sp, #12]
1005d854:	6800      	ldr	r0, [r0, #0]
1005d856:	51c3      	str	r3, [r0, r7]
1005d858:	19c5      	adds	r5, r0, r7
1005d85a:	2054      	movs	r0, #84	@ 0x54
1005d85c:	4911      	ldr	r1, [pc, #68]	@ (1005d8a4 <__arm_cp.19_0>)
1005d85e:	5229      	strh	r1, [r5, r0]
1005d860:	2452      	movs	r4, #82	@ 0x52
1005d862:	2000      	movs	r0, #0
1005d864:	5328      	strh	r0, [r5, r4]
1005d866:	2442      	movs	r4, #66	@ 0x42
1005d868:	5329      	strh	r1, [r5, r4]
1005d86a:	245e      	movs	r4, #94	@ 0x5e
1005d86c:	5528      	strb	r0, [r5, r4]
1005d86e:	245c      	movs	r4, #92	@ 0x5c
1005d870:	21ff      	movs	r1, #255	@ 0xff
1005d872:	5529      	strb	r1, [r5, r4]
1005d874:	215a      	movs	r1, #90	@ 0x5a
1005d876:	5468      	strb	r0, [r5, r1]
1005d878:	2146      	movs	r1, #70	@ 0x46
1005d87a:	2407      	movs	r4, #7
1005d87c:	526c      	strh	r4, [r5, r1]
1005d87e:	6128      	str	r0, [r5, #16]
1005d880:	6168      	str	r0, [r5, #20]
1005d882:	606b      	str	r3, [r5, #4]
1005d884:	9904      	ldr	r1, [sp, #16]
1005d886:	2900      	cmp	r1, #0
1005d888:	d002      	beq.n	1005d890 <EADV_init+0x6c>
1005d88a:	6550      	str	r0, [r2, #84]	@ 0x54
1005d88c:	3d2c      	subs	r5, #44	@ 0x2c
1005d88e:	602a      	str	r2, [r5, #0]
1005d890:	9801      	ldr	r0, [sp, #4]
1005d892:	0200      	lsls	r0, r0, #8
1005d894:	183f      	adds	r7, r7, r0
1005d896:	325c      	adds	r2, #92	@ 0x5c
1005d898:	9802      	ldr	r0, [sp, #8]
1005d89a:	7805      	ldrb	r5, [r0, #0]
1005d89c:	1c76      	adds	r6, r6, #1
1005d89e:	e7d5      	b.n	1005d84c <EADV_init+0x28>
1005d8a0:	b005      	add	sp, #20
1005d8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d8a4 <__arm_cp.19_0>:
1005d8a4:	0000ffff 	.word	0x0000ffff

1005d8a8 <LL_LE_Set_Advertising_Parameters>:
1005d8a8:	b570      	push	{r4, r5, r6, lr}
1005d8aa:	4604      	mov	r4, r0
1005d8ac:	f001 f9f4 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005d8b0:	4605      	mov	r5, r0
1005d8b2:	4e30      	ldr	r6, [pc, #192]	@ (1005d974 <__arm_cp.20_0>)
1005d8b4:	4630      	mov	r0, r6
1005d8b6:	f7ff ff57 	bl	1005d768 <llc_get_advertising_set_index>
1005d8ba:	492f      	ldr	r1, [pc, #188]	@ (1005d978 <__arm_cp.20_1>)
1005d8bc:	4288      	cmp	r0, r1
1005d8be:	d112      	bne.n	1005d8e6 <LL_LE_Set_Advertising_Parameters+0x3e>
1005d8c0:	f000 f860 	bl	1005d984 <LL_Context_ReturnFree>
1005d8c4:	28ff      	cmp	r0, #255	@ 0xff
1005d8c6:	d034      	beq.n	1005d932 <LL_LE_Set_Advertising_Parameters+0x8a>
1005d8c8:	0200      	lsls	r0, r0, #8
1005d8ca:	6829      	ldr	r1, [r5, #0]
1005d8cc:	1808      	adds	r0, r1, r0
1005d8ce:	21be      	movs	r1, #190	@ 0xbe
1005d8d0:	5246      	strh	r6, [r0, r1]
1005d8d2:	214c      	movs	r1, #76	@ 0x4c
1005d8d4:	2200      	movs	r2, #0
1005d8d6:	5442      	strb	r2, [r0, r1]
1005d8d8:	2138      	movs	r1, #56	@ 0x38
1005d8da:	5442      	strb	r2, [r0, r1]
1005d8dc:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005d8de:	6402      	str	r2, [r0, #64]	@ 0x40
1005d8e0:	6282      	str	r2, [r0, #40]	@ 0x28
1005d8e2:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005d8e4:	e008      	b.n	1005d8f8 <LL_LE_Set_Advertising_Parameters+0x50>
1005d8e6:	0200      	lsls	r0, r0, #8
1005d8e8:	6829      	ldr	r1, [r5, #0]
1005d8ea:	1808      	adds	r0, r1, r0
1005d8ec:	21ce      	movs	r1, #206	@ 0xce
1005d8ee:	5c41      	ldrb	r1, [r0, r1]
1005d8f0:	2901      	cmp	r1, #1
1005d8f2:	d101      	bne.n	1005d8f8 <LL_LE_Set_Advertising_Parameters+0x50>
1005d8f4:	250c      	movs	r5, #12
1005d8f6:	e03a      	b.n	1005d96e <LL_LE_Set_Advertising_Parameters+0xc6>
1005d8f8:	7961      	ldrb	r1, [r4, #5]
1005d8fa:	22c2      	movs	r2, #194	@ 0xc2
1005d8fc:	5481      	strb	r1, [r0, r2]
1005d8fe:	4606      	mov	r6, r0
1005d900:	36c2      	adds	r6, #194	@ 0xc2
1005d902:	2500      	movs	r5, #0
1005d904:	72f5      	strb	r5, [r6, #11]
1005d906:	2101      	movs	r1, #1
1005d908:	70f1      	strb	r1, [r6, #3]
1005d90a:	79a1      	ldrb	r1, [r4, #6]
1005d90c:	7071      	strb	r1, [r6, #1]
1005d90e:	8821      	ldrh	r1, [r4, #0]
1005d910:	0209      	lsls	r1, r1, #8
1005d912:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005d914:	4601      	mov	r1, r0
1005d916:	3184      	adds	r1, #132	@ 0x84
1005d918:	7922      	ldrb	r2, [r4, #4]
1005d91a:	2a04      	cmp	r2, #4
1005d91c:	d815      	bhi.n	1005d94a <LL_LE_Set_Advertising_Parameters+0xa2>
1005d91e:	46c0      	nop			@ (mov r8, r8)
1005d920:	447a      	add	r2, pc
1005d922:	7912      	ldrb	r2, [r2, #4]
1005d924:	0052      	lsls	r2, r2, #1
1005d926:	4497      	add	pc, r2
1005d928:	0c0a0602 	.word	0x0c0a0602
1005d92c:	000e      	.short	0x000e
1005d92e:	20f3      	movs	r0, #243	@ 0xf3
1005d930:	e00a      	b.n	1005d948 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d932:	2507      	movs	r5, #7
1005d934:	e01b      	b.n	1005d96e <LL_LE_Set_Advertising_Parameters+0xc6>
1005d936:	4a11      	ldr	r2, [pc, #68]	@ (1005d97c <__arm_cp.20_2>)
1005d938:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005d93a:	20fd      	movs	r0, #253	@ 0xfd
1005d93c:	e004      	b.n	1005d948 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d93e:	20f2      	movs	r0, #242	@ 0xf2
1005d940:	e002      	b.n	1005d948 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d942:	20f0      	movs	r0, #240	@ 0xf0
1005d944:	e000      	b.n	1005d948 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d946:	20f5      	movs	r0, #245	@ 0xf5
1005d948:	8688      	strh	r0, [r1, #52]	@ 0x34
1005d94a:	7a20      	ldrb	r0, [r4, #8]
1005d94c:	79e2      	ldrb	r2, [r4, #7]
1005d94e:	600d      	str	r5, [r1, #0]
1005d950:	604d      	str	r5, [r1, #4]
1005d952:	7532      	strb	r2, [r6, #20]
1005d954:	7570      	strb	r0, [r6, #21]
1005d956:	7a20      	ldrb	r0, [r4, #8]
1005d958:	7008      	strb	r0, [r1, #0]
1005d95a:	1c48      	adds	r0, r1, #1
1005d95c:	3409      	adds	r4, #9
1005d95e:	2206      	movs	r2, #6
1005d960:	4621      	mov	r1, r4
1005d962:	f7f3 fb99 	bl	10051098 <BLEPLAT_MemCpy>
1005d966:	4806      	ldr	r0, [pc, #24]	@ (1005d980 <__arm_cp.20_3>)
1005d968:	6800      	ldr	r0, [r0, #0]
1005d96a:	7a40      	ldrb	r0, [r0, #9]
1005d96c:	70b0      	strb	r0, [r6, #2]
1005d96e:	4628      	mov	r0, r5
1005d970:	bd70      	pop	{r4, r5, r6, pc}
1005d972:	46c0      	nop			@ (mov r8, r8)

1005d974 <__arm_cp.20_0>:
1005d974:	0000fffc 	.word	0x0000fffc

1005d978 <__arm_cp.20_1>:
1005d978:	0000ffff 	.word	0x0000ffff

1005d97c <__arm_cp.20_2>:
1005d97c:	000005dc 	.word	0x000005dc

1005d980 <__arm_cp.20_3>:
1005d980:	20002468 	.word	0x20002468

1005d984 <LL_Context_ReturnFree>:
1005d984:	b510      	push	{r4, lr}
1005d986:	f001 f987 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005d98a:	214d      	movs	r1, #77	@ 0x4d
1005d98c:	5c42      	ldrb	r2, [r0, r1]
1005d98e:	2100      	movs	r1, #0
1005d990:	23be      	movs	r3, #190	@ 0xbe
1005d992:	428a      	cmp	r2, r1
1005d994:	d008      	beq.n	1005d9a8 <LL_Context_ReturnFree+0x24>
1005d996:	6804      	ldr	r4, [r0, #0]
1005d998:	5ae4      	ldrh	r4, [r4, r3]
1005d99a:	0b24      	lsrs	r4, r4, #12
1005d99c:	d105      	bne.n	1005d9aa <LL_Context_ReturnFree+0x26>
1005d99e:	2401      	movs	r4, #1
1005d9a0:	0224      	lsls	r4, r4, #8
1005d9a2:	191b      	adds	r3, r3, r4
1005d9a4:	1c49      	adds	r1, r1, #1
1005d9a6:	e7f4      	b.n	1005d992 <LL_Context_ReturnFree+0xe>
1005d9a8:	21ff      	movs	r1, #255	@ 0xff
1005d9aa:	b2c8      	uxtb	r0, r1
1005d9ac:	bd10      	pop	{r4, pc}
	...

1005d9b0 <LL_LE_Set_Advertise_Enable>:
1005d9b0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005d9b2:	4604      	mov	r4, r0
1005d9b4:	f000 f816 	bl	1005d9e4 <LL_LE_Set_Advertising_Parameters_Default>
1005d9b8:	2300      	movs	r3, #0
1005d9ba:	9300      	str	r3, [sp, #0]
1005d9bc:	2101      	movs	r1, #1
1005d9be:	4d07      	ldr	r5, [pc, #28]	@ (1005d9dc <__arm_cp.22_0>)
1005d9c0:	4620      	mov	r0, r4
1005d9c2:	462a      	mov	r2, r5
1005d9c4:	f000 f82c 	bl	1005da20 <LL_Set_Extented_Advertising_Enable>
1005d9c8:	4604      	mov	r4, r0
1005d9ca:	4805      	ldr	r0, [pc, #20]	@ (1005d9e0 <__arm_cp.22_1>)
1005d9cc:	6801      	ldr	r1, [r0, #0]
1005d9ce:	3156      	adds	r1, #86	@ 0x56
1005d9d0:	4628      	mov	r0, r5
1005d9d2:	f000 f98f 	bl	1005dcf4 <LL_Set_Extented_Advertising_Set_Random_Address>
1005d9d6:	4620      	mov	r0, r4
1005d9d8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005d9da:	46c0      	nop			@ (mov r8, r8)

1005d9dc <__arm_cp.22_0>:
1005d9dc:	0000fffc 	.word	0x0000fffc

1005d9e0 <__arm_cp.22_1>:
1005d9e0:	20002468 	.word	0x20002468

1005d9e4 <LL_LE_Set_Advertising_Parameters_Default>:
1005d9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005d9e6:	480c      	ldr	r0, [pc, #48]	@ (1005da18 <__arm_cp.23_0>)
1005d9e8:	f7ff febe 	bl	1005d768 <llc_get_advertising_set_index>
1005d9ec:	490b      	ldr	r1, [pc, #44]	@ (1005da1c <__arm_cp.23_1>)
1005d9ee:	4288      	cmp	r0, r1
1005d9f0:	d110      	bne.n	1005da14 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005d9f2:	466c      	mov	r4, sp
1005d9f4:	2100      	movs	r1, #0
1005d9f6:	7221      	strb	r1, [r4, #8]
1005d9f8:	2001      	movs	r0, #1
1005d9fa:	02c0      	lsls	r0, r0, #11
1005d9fc:	8020      	strh	r0, [r4, #0]
1005d9fe:	2007      	movs	r0, #7
1005da00:	0200      	lsls	r0, r0, #8
1005da02:	9001      	str	r0, [sp, #4]
1005da04:	4620      	mov	r0, r4
1005da06:	3009      	adds	r0, #9
1005da08:	2206      	movs	r2, #6
1005da0a:	f7f3 fb55 	bl	100510b8 <BLEPLAT_MemSet>
1005da0e:	4620      	mov	r0, r4
1005da10:	f7ff ff4a 	bl	1005d8a8 <LL_LE_Set_Advertising_Parameters>
1005da14:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005da16:	46c0      	nop			@ (mov r8, r8)

1005da18 <__arm_cp.23_0>:
1005da18:	0000fffc 	.word	0x0000fffc

1005da1c <__arm_cp.23_1>:
1005da1c:	0000ffff 	.word	0x0000ffff

1005da20 <LL_Set_Extented_Advertising_Enable>:
1005da20:	b5f0      	push	{r4, r5, r6, r7, lr}
1005da22:	b08f      	sub	sp, #60	@ 0x3c
1005da24:	930e      	str	r3, [sp, #56]	@ 0x38
1005da26:	4617      	mov	r7, r2
1005da28:	460d      	mov	r5, r1
1005da2a:	4606      	mov	r6, r0
1005da2c:	4305      	orrs	r5, r0
1005da2e:	f001 f933 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005da32:	4604      	mov	r4, r0
1005da34:	2d00      	cmp	r5, #0
1005da36:	d007      	beq.n	1005da48 <LL_Set_Extented_Advertising_Enable+0x28>
1005da38:	4638      	mov	r0, r7
1005da3a:	f7ff fe95 	bl	1005d768 <llc_get_advertising_set_index>
1005da3e:	49a7      	ldr	r1, [pc, #668]	@ (1005dcdc <__arm_cp.24_1>)
1005da40:	4288      	cmp	r0, r1
1005da42:	d118      	bne.n	1005da76 <LL_Set_Extented_Advertising_Enable+0x56>
1005da44:	2042      	movs	r0, #66	@ 0x42
1005da46:	e04a      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005da48:	4625      	mov	r5, r4
1005da4a:	354d      	adds	r5, #77	@ 0x4d
1005da4c:	2600      	movs	r6, #0
1005da4e:	4637      	mov	r7, r6
1005da50:	960e      	str	r6, [sp, #56]	@ 0x38
1005da52:	7828      	ldrb	r0, [r5, #0]
1005da54:	4286      	cmp	r6, r0
1005da56:	d20c      	bcs.n	1005da72 <LL_Set_Extented_Advertising_Enable+0x52>
1005da58:	6820      	ldr	r0, [r4, #0]
1005da5a:	19c0      	adds	r0, r0, r7
1005da5c:	21ce      	movs	r1, #206	@ 0xce
1005da5e:	5c41      	ldrb	r1, [r0, r1]
1005da60:	2901      	cmp	r1, #1
1005da62:	d101      	bne.n	1005da68 <LL_Set_Extented_Advertising_Enable+0x48>
1005da64:	f000 f992 	bl	1005dd8c <EADV_stop>
1005da68:	2001      	movs	r0, #1
1005da6a:	0200      	lsls	r0, r0, #8
1005da6c:	183f      	adds	r7, r7, r0
1005da6e:	1c76      	adds	r6, r6, #1
1005da70:	e7ef      	b.n	1005da52 <LL_Set_Extented_Advertising_Enable+0x32>
1005da72:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005da74:	e033      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005da76:	0201      	lsls	r1, r0, #8
1005da78:	6822      	ldr	r2, [r4, #0]
1005da7a:	1854      	adds	r4, r2, r1
1005da7c:	21ce      	movs	r1, #206	@ 0xce
1005da7e:	5c61      	ldrb	r1, [r4, r1]
1005da80:	2e01      	cmp	r6, #1
1005da82:	d124      	bne.n	1005dace <LL_Set_Extented_Advertising_Enable+0xae>
1005da84:	0200      	lsls	r0, r0, #8
1005da86:	1815      	adds	r5, r2, r0
1005da88:	20d6      	movs	r0, #214	@ 0xd6
1005da8a:	5c28      	ldrb	r0, [r5, r0]
1005da8c:	2701      	movs	r7, #1
1005da8e:	4038      	ands	r0, r7
1005da90:	2900      	cmp	r1, #0
1005da92:	d026      	beq.n	1005dae2 <LL_Set_Extented_Advertising_Enable+0xc2>
1005da94:	2800      	cmp	r0, #0
1005da96:	d00a      	beq.n	1005daae <LL_Set_Extented_Advertising_Enable+0x8e>
1005da98:	208c      	movs	r0, #140	@ 0x8c
1005da9a:	5828      	ldr	r0, [r5, r0]
1005da9c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005da9e:	462a      	mov	r2, r5
1005daa0:	328c      	adds	r2, #140	@ 0x8c
1005daa2:	6852      	ldr	r2, [r2, #4]
1005daa4:	c105      	stmia	r1!, {r0, r2}
1005daa6:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005daa8:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005daaa:	6769      	str	r1, [r5, #116]	@ 0x74
1005daac:	67a8      	str	r0, [r5, #120]	@ 0x78
1005daae:	2094      	movs	r0, #148	@ 0x94
1005dab0:	5828      	ldr	r0, [r5, r0]
1005dab2:	2600      	movs	r6, #0
1005dab4:	2800      	cmp	r0, #0
1005dab6:	d008      	beq.n	1005daca <LL_Set_Extented_Advertising_Enable+0xaa>
1005dab8:	3594      	adds	r5, #148	@ 0x94
1005daba:	207d      	movs	r0, #125	@ 0x7d
1005dabc:	0144      	lsls	r4, r0, #5
1005dabe:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005dac0:	4344      	muls	r4, r0
1005dac2:	f7f3 fbb4 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005dac6:	1820      	adds	r0, r4, r0
1005dac8:	6028      	str	r0, [r5, #0]
1005daca:	4630      	mov	r0, r6
1005dacc:	e007      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005dace:	2000      	movs	r0, #0
1005dad0:	2901      	cmp	r1, #1
1005dad2:	d104      	bne.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005dad4:	4605      	mov	r5, r0
1005dad6:	4620      	mov	r0, r4
1005dad8:	f000 f958 	bl	1005dd8c <EADV_stop>
1005dadc:	4628      	mov	r0, r5
1005dade:	b00f      	add	sp, #60	@ 0x3c
1005dae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005dae2:	2800      	cmp	r0, #0
1005dae4:	d007      	beq.n	1005daf6 <LL_Set_Extented_Advertising_Enable+0xd6>
1005dae6:	208c      	movs	r0, #140	@ 0x8c
1005dae8:	5828      	ldr	r0, [r5, r0]
1005daea:	2800      	cmp	r0, #0
1005daec:	d103      	bne.n	1005daf6 <LL_Set_Extented_Advertising_Enable+0xd6>
1005daee:	2090      	movs	r0, #144	@ 0x90
1005daf0:	5828      	ldr	r0, [r5, r0]
1005daf2:	2800      	cmp	r0, #0
1005daf4:	d006      	beq.n	1005db04 <LL_Set_Extented_Advertising_Enable+0xe4>
1005daf6:	20b8      	movs	r0, #184	@ 0xb8
1005daf8:	5a28      	ldrh	r0, [r5, r0]
1005dafa:	07c1      	lsls	r1, r0, #31
1005dafc:	d004      	beq.n	1005db08 <LL_Set_Extented_Advertising_Enable+0xe8>
1005dafe:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005db00:	29f5      	cmp	r1, #245	@ 0xf5
1005db02:	d901      	bls.n	1005db08 <LL_Set_Extented_Advertising_Enable+0xe8>
1005db04:	2012      	movs	r0, #18
1005db06:	e7ea      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005db08:	2312      	movs	r3, #18
1005db0a:	4601      	mov	r1, r0
1005db0c:	461a      	mov	r2, r3
1005db0e:	4019      	ands	r1, r3
1005db10:	2902      	cmp	r1, #2
1005db12:	d103      	bne.n	1005db1c <LL_Set_Extented_Advertising_Enable+0xfc>
1005db14:	2142      	movs	r1, #66	@ 0x42
1005db16:	5a69      	ldrh	r1, [r5, r1]
1005db18:	2900      	cmp	r1, #0
1005db1a:	d040      	beq.n	1005db9e <LL_Set_Extented_Advertising_Enable+0x17e>
1005db1c:	0700      	lsls	r0, r0, #28
1005db1e:	d50f      	bpl.n	1005db40 <LL_Set_Extented_Advertising_Enable+0x120>
1005db20:	486d      	ldr	r0, [pc, #436]	@ (1005dcd8 <__arm_cp.24_0>)
1005db22:	21be      	movs	r1, #190	@ 0xbe
1005db24:	5a69      	ldrh	r1, [r5, r1]
1005db26:	4281      	cmp	r1, r0
1005db28:	d001      	beq.n	1005db2e <LL_Set_Extented_Advertising_Enable+0x10e>
1005db2a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005db2c:	e000      	b.n	1005db30 <LL_Set_Extented_Advertising_Enable+0x110>
1005db2e:	2080      	movs	r0, #128	@ 0x80
1005db30:	2880      	cmp	r0, #128	@ 0x80
1005db32:	d901      	bls.n	1005db38 <LL_Set_Extented_Advertising_Enable+0x118>
1005db34:	4610      	mov	r0, r2
1005db36:	e7d2      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005db38:	900e      	str	r0, [sp, #56]	@ 0x38
1005db3a:	2800      	cmp	r0, #0
1005db3c:	4610      	mov	r0, r2
1005db3e:	d0ce      	beq.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005db40:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005db42:	21ba      	movs	r1, #186	@ 0xba
1005db44:	5268      	strh	r0, [r5, r1]
1005db46:	267d      	movs	r6, #125	@ 0x7d
1005db48:	0171      	lsls	r1, r6, #5
1005db4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005db4c:	4351      	muls	r1, r2
1005db4e:	2294      	movs	r2, #148	@ 0x94
1005db50:	50a9      	str	r1, [r5, r2]
1005db52:	2800      	cmp	r0, #0
1005db54:	d001      	beq.n	1005db5a <LL_Set_Extented_Advertising_Enable+0x13a>
1005db56:	21cf      	movs	r1, #207	@ 0xcf
1005db58:	546f      	strb	r7, [r5, r1]
1005db5a:	21bc      	movs	r1, #188	@ 0xbc
1005db5c:	5268      	strh	r0, [r5, r1]
1005db5e:	4620      	mov	r0, r4
1005db60:	f7ef fea6 	bl	1004d8b0 <EADV_start_request_radio_tasks_ucfg>
1005db64:	2800      	cmp	r0, #0
1005db66:	d1ba      	bne.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005db68:	4629      	mov	r1, r5
1005db6a:	31d6      	adds	r1, #214	@ 0xd6
1005db6c:	4628      	mov	r0, r5
1005db6e:	3064      	adds	r0, #100	@ 0x64
1005db70:	462a      	mov	r2, r5
1005db72:	3254      	adds	r2, #84	@ 0x54
1005db74:	676a      	str	r2, [r5, #116]	@ 0x74
1005db76:	67a8      	str	r0, [r5, #120]	@ 0x78
1005db78:	462b      	mov	r3, r5
1005db7a:	3378      	adds	r3, #120	@ 0x78
1005db7c:	7809      	ldrb	r1, [r1, #0]
1005db7e:	07c9      	lsls	r1, r1, #31
1005db80:	930d      	str	r3, [sp, #52]	@ 0x34
1005db82:	d10e      	bne.n	1005dba2 <LL_Set_Extented_Advertising_Enable+0x182>
1005db84:	2100      	movs	r1, #0
1005db86:	6001      	str	r1, [r0, #0]
1005db88:	66a9      	str	r1, [r5, #104]	@ 0x68
1005db8a:	4855      	ldr	r0, [pc, #340]	@ (1005dce0 <__arm_cp.24_2>)
1005db8c:	6801      	ldr	r1, [r0, #0]
1005db8e:	4620      	mov	r0, r4
1005db90:	3065      	adds	r0, #101	@ 0x65
1005db92:	2206      	movs	r2, #6
1005db94:	f7f3 fa80 	bl	10051098 <BLEPLAT_MemCpy>
1005db98:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005db9a:	6800      	ldr	r0, [r0, #0]
1005db9c:	e008      	b.n	1005dbb0 <LL_Set_Extented_Advertising_Enable+0x190>
1005db9e:	200c      	movs	r0, #12
1005dba0:	e79d      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005dba2:	218c      	movs	r1, #140	@ 0x8c
1005dba4:	5869      	ldr	r1, [r5, r1]
1005dba6:	462a      	mov	r2, r5
1005dba8:	328c      	adds	r2, #140	@ 0x8c
1005dbaa:	6852      	ldr	r2, [r2, #4]
1005dbac:	c006      	stmia	r0!, {r1, r2}
1005dbae:	3808      	subs	r0, #8
1005dbb0:	4629      	mov	r1, r5
1005dbb2:	3194      	adds	r1, #148	@ 0x94
1005dbb4:	910e      	str	r1, [sp, #56]	@ 0x38
1005dbb6:	2184      	movs	r1, #132	@ 0x84
1005dbb8:	5869      	ldr	r1, [r5, r1]
1005dbba:	462a      	mov	r2, r5
1005dbbc:	3284      	adds	r2, #132	@ 0x84
1005dbbe:	6852      	ldr	r2, [r2, #4]
1005dbc0:	6081      	str	r1, [r0, #8]
1005dbc2:	60c2      	str	r2, [r0, #12]
1005dbc4:	4620      	mov	r0, r4
1005dbc6:	f7ff fe11 	bl	1005d7ec <llc_eadv_generate_new_rpa_for_one_adv_set>
1005dbca:	2800      	cmp	r0, #0
1005dbcc:	960c      	str	r6, [sp, #48]	@ 0x30
1005dbce:	d002      	beq.n	1005dbd6 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005dbd0:	f7fc fc59 	bl	1005a486 <llc_priv_start_privacy_timer_ucfg_weak>
1005dbd4:	e006      	b.n	1005dbe4 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005dbd6:	4628      	mov	r0, r5
1005dbd8:	3074      	adds	r0, #116	@ 0x74
1005dbda:	6801      	ldr	r1, [r0, #0]
1005dbdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005dbde:	681a      	ldr	r2, [r3, #0]
1005dbe0:	6002      	str	r2, [r0, #0]
1005dbe2:	6019      	str	r1, [r3, #0]
1005dbe4:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005dbe6:	4626      	mov	r6, r4
1005dbe8:	36ce      	adds	r6, #206	@ 0xce
1005dbea:	4628      	mov	r0, r5
1005dbec:	30b8      	adds	r0, #184	@ 0xb8
1005dbee:	900d      	str	r0, [sp, #52]	@ 0x34
1005dbf0:	6808      	ldr	r0, [r1, #0]
1005dbf2:	2800      	cmp	r0, #0
1005dbf4:	d005      	beq.n	1005dc02 <LL_Set_Extented_Advertising_Enable+0x1e2>
1005dbf6:	f7f3 fb1a 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005dbfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005dbfc:	6811      	ldr	r1, [r2, #0]
1005dbfe:	1808      	adds	r0, r1, r0
1005dc00:	6010      	str	r0, [r2, #0]
1005dc02:	7037      	strb	r7, [r6, #0]
1005dc04:	20c4      	movs	r0, #196	@ 0xc4
1005dc06:	5c29      	ldrb	r1, [r5, r0]
1005dc08:	27d0      	movs	r7, #208	@ 0xd0
1005dc0a:	5de8      	ldrb	r0, [r5, r7]
1005dc0c:	2281      	movs	r2, #129	@ 0x81
1005dc0e:	920e      	str	r2, [sp, #56]	@ 0x38
1005dc10:	9200      	str	r2, [sp, #0]
1005dc12:	462e      	mov	r6, r5
1005dc14:	3614      	adds	r6, #20
1005dc16:	4622      	mov	r2, r4
1005dc18:	4633      	mov	r3, r6
1005dc1a:	f7ff fd77 	bl	1005d70c <LL_eadv_BLUE_SM>
1005dc1e:	5de8      	ldrb	r0, [r5, r7]
1005dc20:	2125      	movs	r1, #37	@ 0x25
1005dc22:	f7f4 fec4 	bl	100529ae <BLEPLAT_CNTR_SmSetDataLength>
1005dc26:	462f      	mov	r7, r5
1005dc28:	37d0      	adds	r7, #208	@ 0xd0
1005dc2a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005dc2c:	8800      	ldrh	r0, [r0, #0]
1005dc2e:	06c0      	lsls	r0, r0, #27
1005dc30:	d403      	bmi.n	1005dc3a <LL_Set_Extented_Advertising_Enable+0x21a>
1005dc32:	4620      	mov	r0, r4
1005dc34:	f000 fd57 	bl	1005e6e6 <LL_eadv_start_extended_ucfg_weak>
1005dc38:	e042      	b.n	1005dcc0 <LL_Set_Extented_Advertising_Enable+0x2a0>
1005dc3a:	f7f3 faf8 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005dc3e:	219c      	movs	r1, #156	@ 0x9c
1005dc40:	910b      	str	r1, [sp, #44]	@ 0x2c
1005dc42:	5068      	str	r0, [r5, r1]
1005dc44:	f001 f812 	bl	1005ec6c <LL_get_tx_common_buffer_p>
1005dc48:	9009      	str	r0, [sp, #36]	@ 0x24
1005dc4a:	f001 f817 	bl	1005ec7c <LL_get_rx_common_buffer_p>
1005dc4e:	900a      	str	r0, [sp, #40]	@ 0x28
1005dc50:	7838      	ldrb	r0, [r7, #0]
1005dc52:	9008      	str	r0, [sp, #32]
1005dc54:	2094      	movs	r0, #148	@ 0x94
1005dc56:	2100      	movs	r1, #0
1005dc58:	910d      	str	r1, [sp, #52]	@ 0x34
1005dc5a:	460a      	mov	r2, r1
1005dc5c:	f7f4 fa1c 	bl	10052098 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005dc60:	4603      	mov	r3, r0
1005dc62:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005dc64:	9000      	str	r0, [sp, #0]
1005dc66:	4620      	mov	r0, r4
1005dc68:	9908      	ldr	r1, [sp, #32]
1005dc6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005dc6c:	f7ff fcd3 	bl	1005d616 <LL_eadv_Blue_Tx>
1005dc70:	7838      	ldrb	r0, [r7, #0]
1005dc72:	9009      	str	r0, [sp, #36]	@ 0x24
1005dc74:	2096      	movs	r0, #150	@ 0x96
1005dc76:	2101      	movs	r1, #1
1005dc78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005dc7a:	f7f4 fa0d 	bl	10052098 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005dc7e:	4603      	mov	r3, r0
1005dc80:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005dc82:	9000      	str	r0, [sp, #0]
1005dc84:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005dc86:	9001      	str	r0, [sp, #4]
1005dc88:	4630      	mov	r0, r6
1005dc8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005dc8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005dc8e:	f7ff fcfd 	bl	1005d68c <LL_eadv_Blue_Rx>
1005dc92:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005dc94:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005dc96:	582a      	ldr	r2, [r5, r0]
1005dc98:	7838      	ldrb	r0, [r7, #0]
1005dc9a:	4b12      	ldr	r3, [pc, #72]	@ (1005dce4 <__arm_cp.24_3>)
1005dc9c:	9307      	str	r3, [sp, #28]
1005dc9e:	4b12      	ldr	r3, [pc, #72]	@ (1005dce8 <__arm_cp.24_4>)
1005dca0:	9306      	str	r3, [sp, #24]
1005dca2:	4b12      	ldr	r3, [pc, #72]	@ (1005dcec <__arm_cp.24_5>)
1005dca4:	9305      	str	r3, [sp, #20]
1005dca6:	4b12      	ldr	r3, [pc, #72]	@ (1005dcf0 <__arm_cp.24_6>)
1005dca8:	9304      	str	r3, [sp, #16]
1005dcaa:	2314      	movs	r3, #20
1005dcac:	9303      	str	r3, [sp, #12]
1005dcae:	231f      	movs	r3, #31
1005dcb0:	ae00      	add	r6, sp, #0
1005dcb2:	c60e      	stmia	r6!, {r1, r2, r3}
1005dcb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005dcb6:	00cb      	lsls	r3, r1, #3
1005dcb8:	4621      	mov	r1, r4
1005dcba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005dcbc:	f001 f86e 	bl	1005ed9c <LL_sched_enable_taskslot>
1005dcc0:	249c      	movs	r4, #156	@ 0x9c
1005dcc2:	5929      	ldr	r1, [r5, r4]
1005dcc4:	7838      	ldrb	r0, [r7, #0]
1005dcc6:	f001 f845 	bl	1005ed54 <LL_sched_set_anchor>
1005dcca:	5928      	ldr	r0, [r5, r4]
1005dccc:	7839      	ldrb	r1, [r7, #0]
1005dcce:	f001 faf5 	bl	1005f2bc <LL_sched_check_and_call_sched>
1005dcd2:	2000      	movs	r0, #0
1005dcd4:	e703      	b.n	1005dade <LL_Set_Extented_Advertising_Enable+0xbe>
1005dcd6:	46c0      	nop			@ (mov r8, r8)

1005dcd8 <__arm_cp.24_0>:
1005dcd8:	0000fffc 	.word	0x0000fffc

1005dcdc <__arm_cp.24_1>:
1005dcdc:	0000ffff 	.word	0x0000ffff

1005dce0 <__arm_cp.24_2>:
1005dce0:	20002414 	.word	0x20002414

1005dce4 <__arm_cp.24_3>:
1005dce4:	1005df29 	.word	0x1005df29

1005dce8 <__arm_cp.24_4>:
1005dce8:	1005e3b1 	.word	0x1005e3b1

1005dcec <__arm_cp.24_5>:
1005dcec:	1005e221 	.word	0x1005e221

1005dcf0 <__arm_cp.24_6>:
1005dcf0:	1005df31 	.word	0x1005df31

1005dcf4 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005dcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dcf6:	460c      	mov	r4, r1
1005dcf8:	4606      	mov	r6, r0
1005dcfa:	f7ff fd35 	bl	1005d768 <llc_get_advertising_set_index>
1005dcfe:	4605      	mov	r5, r0
1005dd00:	4818      	ldr	r0, [pc, #96]	@ (1005dd64 <__arm_cp.25_0>)
1005dd02:	4285      	cmp	r5, r0
1005dd04:	d02b      	beq.n	1005dd5e <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005dd06:	9400      	str	r4, [sp, #0]
1005dd08:	022c      	lsls	r4, r5, #8
1005dd0a:	f000 ffc5 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005dd0e:	6807      	ldr	r7, [r0, #0]
1005dd10:	1938      	adds	r0, r7, r4
1005dd12:	21be      	movs	r1, #190	@ 0xbe
1005dd14:	5246      	strh	r6, [r0, r1]
1005dd16:	21b8      	movs	r1, #184	@ 0xb8
1005dd18:	5c40      	ldrb	r0, [r0, r1]
1005dd1a:	07c0      	lsls	r0, r0, #31
1005dd1c:	d007      	beq.n	1005dd2e <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005dd1e:	0228      	lsls	r0, r5, #8
1005dd20:	1838      	adds	r0, r7, r0
1005dd22:	21ce      	movs	r1, #206	@ 0xce
1005dd24:	5c40      	ldrb	r0, [r0, r1]
1005dd26:	2801      	cmp	r0, #1
1005dd28:	d101      	bne.n	1005dd2e <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005dd2a:	250c      	movs	r5, #12
1005dd2c:	e018      	b.n	1005dd60 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005dd2e:	480e      	ldr	r0, [pc, #56]	@ (1005dd68 <__arm_cp.25_1>)
1005dd30:	6800      	ldr	r0, [r0, #0]
1005dd32:	3056      	adds	r0, #86	@ 0x56
1005dd34:	2606      	movs	r6, #6
1005dd36:	9c00      	ldr	r4, [sp, #0]
1005dd38:	4621      	mov	r1, r4
1005dd3a:	4632      	mov	r2, r6
1005dd3c:	f7f3 f9ac 	bl	10051098 <BLEPLAT_MemCpy>
1005dd40:	0228      	lsls	r0, r5, #8
1005dd42:	1838      	adds	r0, r7, r0
1005dd44:	218c      	movs	r1, #140	@ 0x8c
1005dd46:	2201      	movs	r2, #1
1005dd48:	5042      	str	r2, [r0, r1]
1005dd4a:	4601      	mov	r1, r0
1005dd4c:	318c      	adds	r1, #140	@ 0x8c
1005dd4e:	2500      	movs	r5, #0
1005dd50:	604d      	str	r5, [r1, #4]
1005dd52:	308d      	adds	r0, #141	@ 0x8d
1005dd54:	4621      	mov	r1, r4
1005dd56:	4632      	mov	r2, r6
1005dd58:	f7f3 f99e 	bl	10051098 <BLEPLAT_MemCpy>
1005dd5c:	e000      	b.n	1005dd60 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005dd5e:	2512      	movs	r5, #18
1005dd60:	4628      	mov	r0, r5
1005dd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005dd64 <__arm_cp.25_0>:
1005dd64:	0000ffff 	.word	0x0000ffff

1005dd68 <__arm_cp.25_1>:
1005dd68:	20002468 	.word	0x20002468

1005dd6c <LL_eadv_update_did>:
1005dd6c:	b510      	push	{r4, lr}
1005dd6e:	4604      	mov	r4, r0
1005dd70:	2000      	movs	r0, #0
1005dd72:	f003 fd41 	bl	100617f8 <Hal_Get_Random_Number>
1005dd76:	4904      	ldr	r1, [pc, #16]	@ (1005dd88 <__arm_cp.27_0>)
1005dd78:	4001      	ands	r1, r0
1005dd7a:	8820      	ldrh	r0, [r4, #0]
1005dd7c:	1a40      	subs	r0, r0, r1
1005dd7e:	4242      	negs	r2, r0
1005dd80:	4142      	adcs	r2, r0
1005dd82:	404a      	eors	r2, r1
1005dd84:	8022      	strh	r2, [r4, #0]
1005dd86:	bd10      	pop	{r4, pc}

1005dd88 <__arm_cp.27_0>:
1005dd88:	00000fff 	.word	0x00000fff

1005dd8c <EADV_stop>:
1005dd8c:	b5b0      	push	{r4, r5, r7, lr}
1005dd8e:	4604      	mov	r4, r0
1005dd90:	f3ef 8010 	mrs	r0, PRIMASK
1005dd94:	b672      	cpsid	i
1005dd96:	4625      	mov	r5, r4
1005dd98:	35ce      	adds	r5, #206	@ 0xce
1005dd9a:	78a8      	ldrb	r0, [r5, #2]
1005dd9c:	f000 ffec 	bl	1005ed78 <LL_sched_set_cancel_request>
1005dda0:	20d1      	movs	r0, #209	@ 0xd1
1005dda2:	5c20      	ldrb	r0, [r4, r0]
1005dda4:	f000 ffe8 	bl	1005ed78 <LL_sched_set_cancel_request>
1005dda8:	b662      	cpsie	i
1005ddaa:	78a8      	ldrb	r0, [r5, #2]
1005ddac:	f001 fa96 	bl	1005f2dc <LL_sched_check_and_wait_sched>
1005ddb0:	20ce      	movs	r0, #206	@ 0xce
1005ddb2:	2100      	movs	r1, #0
1005ddb4:	5221      	strh	r1, [r4, r0]
1005ddb6:	7aa8      	ldrb	r0, [r5, #10]
1005ddb8:	28ff      	cmp	r0, #255	@ 0xff
1005ddba:	d001      	beq.n	1005ddc0 <EADV_stop+0x34>
1005ddbc:	f7fb fc93 	bl	100596e6 <llc_conn_release_conn_idx>
1005ddc0:	20ff      	movs	r0, #255	@ 0xff
1005ddc2:	72a8      	strb	r0, [r5, #10]
1005ddc4:	7a28      	ldrb	r0, [r5, #8]
1005ddc6:	0780      	lsls	r0, r0, #30
1005ddc8:	d501      	bpl.n	1005ddce <EADV_stop+0x42>
1005ddca:	f7fc fb5d 	bl	1005a488 <llc_priv_stop_privacy_timer_ucfg_weak>
1005ddce:	bdb0      	pop	{r4, r5, r7, pc}

1005ddd0 <LL_Set_Advertising_Set_Random_Address>:
1005ddd0:	b510      	push	{r4, lr}
1005ddd2:	4604      	mov	r4, r0
1005ddd4:	f7fa f902 	bl	10057fdc <scan_csr_ucfg_weak>
1005ddd8:	2801      	cmp	r0, #1
1005ddda:	d105      	bne.n	1005dde8 <LL_Set_Advertising_Set_Random_Address+0x18>
1005dddc:	f7fc fb84 	bl	1005a4e8 <llc_scan_get_cntxt_p>
1005dde0:	21eb      	movs	r1, #235	@ 0xeb
1005dde2:	5c40      	ldrb	r0, [r0, r1]
1005dde4:	07c0      	lsls	r0, r0, #31
1005dde6:	d106      	bne.n	1005ddf6 <LL_Set_Advertising_Set_Random_Address+0x26>
1005dde8:	f7ff fdfc 	bl	1005d9e4 <LL_LE_Set_Advertising_Parameters_Default>
1005ddec:	4803      	ldr	r0, [pc, #12]	@ (1005ddfc <__arm_cp.29_0>)
1005ddee:	4621      	mov	r1, r4
1005ddf0:	f7ff ff80 	bl	1005dcf4 <LL_Set_Extented_Advertising_Set_Random_Address>
1005ddf4:	bd10      	pop	{r4, pc}
1005ddf6:	200c      	movs	r0, #12
1005ddf8:	bd10      	pop	{r4, pc}
1005ddfa:	46c0      	nop			@ (mov r8, r8)

1005ddfc <__arm_cp.29_0>:
1005ddfc:	0000fffc 	.word	0x0000fffc

1005de00 <ll_set_advertising_data_ptr>:
1005de00:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005de02:	9302      	str	r3, [sp, #8]
1005de04:	4614      	mov	r4, r2
1005de06:	460f      	mov	r7, r1
1005de08:	4605      	mov	r5, r0
1005de0a:	f000 ff45 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005de0e:	4606      	mov	r6, r0
1005de10:	4830      	ldr	r0, [pc, #192]	@ (1005ded4 <__arm_cp.33_0>)
1005de12:	4285      	cmp	r5, r0
1005de14:	d101      	bne.n	1005de1a <ll_set_advertising_data_ptr+0x1a>
1005de16:	201f      	movs	r0, #31
1005de18:	e007      	b.n	1005de2a <ll_set_advertising_data_ptr+0x2a>
1005de1a:	2001      	movs	r0, #1
1005de1c:	2102      	movs	r1, #2
1005de1e:	f7f9 fff9 	bl	10057e14 <hci_get_set_legacy_ext_flag>
1005de22:	2800      	cmp	r0, #0
1005de24:	d000      	beq.n	1005de28 <ll_set_advertising_data_ptr+0x28>
1005de26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005de28:	482b      	ldr	r0, [pc, #172]	@ (1005ded8 <__arm_cp.33_1>)
1005de2a:	2112      	movs	r1, #18
1005de2c:	42a0      	cmp	r0, r4
1005de2e:	d201      	bcs.n	1005de34 <ll_set_advertising_data_ptr+0x34>
1005de30:	4608      	mov	r0, r1
1005de32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005de34:	9101      	str	r1, [sp, #4]
1005de36:	4628      	mov	r0, r5
1005de38:	f7ff fc96 	bl	1005d768 <llc_get_advertising_set_index>
1005de3c:	0200      	lsls	r0, r0, #8
1005de3e:	6831      	ldr	r1, [r6, #0]
1005de40:	180e      	adds	r6, r1, r0
1005de42:	4620      	mov	r0, r4
1005de44:	4631      	mov	r1, r6
1005de46:	f000 fc4c 	bl	1005e6e2 <llc_eadv_max_supported_data_check_ucfg_weak>
1005de4a:	2800      	cmp	r0, #0
1005de4c:	d1eb      	bne.n	1005de26 <ll_set_advertising_data_ptr+0x26>
1005de4e:	20ce      	movs	r0, #206	@ 0xce
1005de50:	5c31      	ldrb	r1, [r6, r0]
1005de52:	2038      	movs	r0, #56	@ 0x38
1005de54:	5c30      	ldrb	r0, [r6, r0]
1005de56:	2f04      	cmp	r7, #4
1005de58:	d112      	bne.n	1005de80 <ll_set_advertising_data_ptr+0x80>
1005de5a:	2900      	cmp	r1, #0
1005de5c:	d038      	beq.n	1005ded0 <ll_set_advertising_data_ptr+0xd0>
1005de5e:	2800      	cmp	r0, #0
1005de60:	9a01      	ldr	r2, [sp, #4]
1005de62:	d01b      	beq.n	1005de9c <ll_set_advertising_data_ptr+0x9c>
1005de64:	481b      	ldr	r0, [pc, #108]	@ (1005ded4 <__arm_cp.33_0>)
1005de66:	4285      	cmp	r5, r0
1005de68:	d118      	bne.n	1005de9c <ll_set_advertising_data_ptr+0x9c>
1005de6a:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
1005de6c:	2800      	cmp	r0, #0
1005de6e:	d015      	beq.n	1005de9c <ll_set_advertising_data_ptr+0x9c>
1005de70:	20b8      	movs	r0, #184	@ 0xb8
1005de72:	5a30      	ldrh	r0, [r6, r0]
1005de74:	2110      	movs	r1, #16
1005de76:	4001      	ands	r1, r0
1005de78:	4321      	orrs	r1, r4
1005de7a:	4610      	mov	r0, r2
1005de7c:	d1d3      	bne.n	1005de26 <ll_set_advertising_data_ptr+0x26>
1005de7e:	e00f      	b.n	1005dea0 <ll_set_advertising_data_ptr+0xa0>
1005de80:	4635      	mov	r5, r6
1005de82:	3538      	adds	r5, #56	@ 0x38
1005de84:	2900      	cmp	r1, #0
1005de86:	d011      	beq.n	1005deac <ll_set_advertising_data_ptr+0xac>
1005de88:	2f03      	cmp	r7, #3
1005de8a:	d109      	bne.n	1005dea0 <ll_set_advertising_data_ptr+0xa0>
1005de8c:	2002      	movs	r0, #2
1005de8e:	7028      	strb	r0, [r5, #0]
1005de90:	86f4      	strh	r4, [r6, #54]	@ 0x36
1005de92:	2000      	movs	r0, #0
1005de94:	86b0      	strh	r0, [r6, #52]	@ 0x34
1005de96:	9902      	ldr	r1, [sp, #8]
1005de98:	6331      	str	r1, [r6, #48]	@ 0x30
1005de9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005de9c:	4610      	mov	r0, r2
1005de9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005dea0:	36b6      	adds	r6, #182	@ 0xb6
1005dea2:	4630      	mov	r0, r6
1005dea4:	f7ff ff62 	bl	1005dd6c <LL_eadv_update_did>
1005dea8:	2000      	movs	r0, #0
1005deaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005deac:	4637      	mov	r7, r6
1005deae:	3728      	adds	r7, #40	@ 0x28
1005deb0:	2800      	cmp	r0, #0
1005deb2:	9a02      	ldr	r2, [sp, #8]
1005deb4:	d005      	beq.n	1005dec2 <ll_set_advertising_data_ptr+0xc2>
1005deb6:	6839      	ldr	r1, [r7, #0]
1005deb8:	20a1      	movs	r0, #161	@ 0xa1
1005deba:	9a02      	ldr	r2, [sp, #8]
1005debc:	f004 fdb2 	bl	10062a24 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005dec0:	9a02      	ldr	r2, [sp, #8]
1005dec2:	603a      	str	r2, [r7, #0]
1005dec4:	2001      	movs	r0, #1
1005dec6:	7028      	strb	r0, [r5, #0]
1005dec8:	85f4      	strh	r4, [r6, #46]	@ 0x2e
1005deca:	2000      	movs	r0, #0
1005decc:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1005dece:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ded0:	9801      	ldr	r0, [sp, #4]
1005ded2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005ded4 <__arm_cp.33_0>:
1005ded4:	0000fffc 	.word	0x0000fffc

1005ded8 <__arm_cp.33_1>:
1005ded8:	00000672 	.word	0x00000672

1005dedc <ll_set_legacy_advertising_data_ptr>:
1005dedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dede:	460c      	mov	r4, r1
1005dee0:	4605      	mov	r5, r0
1005dee2:	f000 fed9 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005dee6:	4607      	mov	r7, r0
1005dee8:	f7ff fd7c 	bl	1005d9e4 <LL_LE_Set_Advertising_Parameters_Default>
1005deec:	4e0c      	ldr	r6, [pc, #48]	@ (1005df20 <__arm_cp.36_0>)
1005deee:	4630      	mov	r0, r6
1005def0:	f7ff fc3a 	bl	1005d768 <llc_get_advertising_set_index>
1005def4:	490b      	ldr	r1, [pc, #44]	@ (1005df24 <__arm_cp.36_1>)
1005def6:	4288      	cmp	r0, r1
1005def8:	d108      	bne.n	1005df0c <ll_set_legacy_advertising_data_ptr+0x30>
1005defa:	f7ff fd43 	bl	1005d984 <LL_Context_ReturnFree>
1005defe:	28ff      	cmp	r0, #255	@ 0xff
1005df00:	d00b      	beq.n	1005df1a <ll_set_legacy_advertising_data_ptr+0x3e>
1005df02:	0200      	lsls	r0, r0, #8
1005df04:	6839      	ldr	r1, [r7, #0]
1005df06:	1808      	adds	r0, r1, r0
1005df08:	21be      	movs	r1, #190	@ 0xbe
1005df0a:	5246      	strh	r6, [r0, r1]
1005df0c:	2103      	movs	r1, #3
1005df0e:	4630      	mov	r0, r6
1005df10:	462a      	mov	r2, r5
1005df12:	4623      	mov	r3, r4
1005df14:	f7ff ff74 	bl	1005de00 <ll_set_advertising_data_ptr>
1005df18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005df1a:	2001      	movs	r0, #1
1005df1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005df1e:	46c0      	nop			@ (mov r8, r8)

1005df20 <__arm_cp.36_0>:
1005df20:	0000fffc 	.word	0x0000fffc

1005df24 <__arm_cp.36_1>:
1005df24:	0000ffff 	.word	0x0000ffff

1005df28 <ADV_cancelslot>:
1005df28:	21d0      	movs	r1, #208	@ 0xd0
1005df2a:	22ff      	movs	r2, #255	@ 0xff
1005df2c:	5442      	strb	r2, [r0, r1]
1005df2e:	4770      	bx	lr

1005df30 <ADV_skiproutine>:
1005df30:	b5f0      	push	{r4, r5, r6, r7, lr}
1005df32:	b08f      	sub	sp, #60	@ 0x3c
1005df34:	4607      	mov	r7, r0
1005df36:	20d0      	movs	r0, #208	@ 0xd0
1005df38:	5c38      	ldrb	r0, [r7, r0]
1005df3a:	232c      	movs	r3, #44	@ 0x2c
1005df3c:	4358      	muls	r0, r3
1005df3e:	4a68      	ldr	r2, [pc, #416]	@ (1005e0e0 <__arm_cp.40_0>)
1005df40:	6812      	ldr	r2, [r2, #0]
1005df42:	1810      	adds	r0, r2, r0
1005df44:	7d80      	ldrb	r0, [r0, #22]
1005df46:	463c      	mov	r4, r7
1005df48:	3494      	adds	r4, #148	@ 0x94
1005df4a:	463a      	mov	r2, r7
1005df4c:	32b4      	adds	r2, #180	@ 0xb4
1005df4e:	9205      	str	r2, [sp, #20]
1005df50:	463e      	mov	r6, r7
1005df52:	36d6      	adds	r6, #214	@ 0xd6
1005df54:	2814      	cmp	r0, #20
1005df56:	9604      	str	r6, [sp, #16]
1005df58:	9302      	str	r3, [sp, #8]
1005df5a:	d10a      	bne.n	1005df72 <ADV_skiproutine+0x42>
1005df5c:	f7f3 f967 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005df60:	4605      	mov	r5, r0
1005df62:	f000 fed7 	bl	1005ed14 <LL_sched_engine_return_actual_scheduler_margin>
1005df66:	9b05      	ldr	r3, [sp, #20]
1005df68:	1828      	adds	r0, r5, r0
1005df6a:	3032      	adds	r0, #50	@ 0x32
1005df6c:	60a0      	str	r0, [r4, #8]
1005df6e:	2501      	movs	r5, #1
1005df70:	e01b      	b.n	1005dfaa <ADV_skiproutine+0x7a>
1005df72:	68a2      	ldr	r2, [r4, #8]
1005df74:	1856      	adds	r6, r2, r1
1005df76:	2500      	movs	r5, #0
1005df78:	4630      	mov	r0, r6
1005df7a:	4611      	mov	r1, r2
1005df7c:	f000 fec6 	bl	1005ed0c <LL_sched_time_t1_ge_t2>
1005df80:	2800      	cmp	r0, #0
1005df82:	d005      	beq.n	1005df90 <ADV_skiproutine+0x60>
1005df84:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005df86:	68a1      	ldr	r1, [r4, #8]
1005df88:	180a      	adds	r2, r1, r0
1005df8a:	60a2      	str	r2, [r4, #8]
1005df8c:	1c6d      	adds	r5, r5, #1
1005df8e:	e7f3      	b.n	1005df78 <ADV_skiproutine+0x48>
1005df90:	9b05      	ldr	r3, [sp, #20]
1005df92:	8898      	ldrh	r0, [r3, #4]
1005df94:	0700      	lsls	r0, r0, #28
1005df96:	d408      	bmi.n	1005dfaa <ADV_skiproutine+0x7a>
1005df98:	2001      	movs	r0, #1
1005df9a:	f003 fc34 	bl	10061806 <Hal_Get_Random_Number32>
1005df9e:	9b05      	ldr	r3, [sp, #20]
1005dfa0:	4950      	ldr	r1, [pc, #320]	@ (1005e0e4 <__arm_cp.40_1>)
1005dfa2:	4001      	ands	r1, r0
1005dfa4:	68a0      	ldr	r0, [r4, #8]
1005dfa6:	1840      	adds	r0, r0, r1
1005dfa8:	60a0      	str	r0, [r4, #8]
1005dfaa:	8898      	ldrh	r0, [r3, #4]
1005dfac:	2103      	movs	r1, #3
1005dfae:	4001      	ands	r1, r0
1005dfb0:	1e48      	subs	r0, r1, #1
1005dfb2:	4181      	sbcs	r1, r0
1005dfb4:	0048      	lsls	r0, r1, #1
1005dfb6:	8018      	strh	r0, [r3, #0]
1005dfb8:	7b98      	ldrb	r0, [r3, #14]
1005dfba:	2201      	movs	r2, #1
1005dfbc:	4601      	mov	r1, r0
1005dfbe:	9201      	str	r2, [sp, #4]
1005dfc0:	4011      	ands	r1, r2
1005dfc2:	0782      	lsls	r2, r0, #30
1005dfc4:	0fd2      	lsrs	r2, r2, #31
1005dfc6:	1889      	adds	r1, r1, r2
1005dfc8:	0740      	lsls	r0, r0, #29
1005dfca:	0fc0      	lsrs	r0, r0, #31
1005dfcc:	1808      	adds	r0, r1, r0
1005dfce:	1e40      	subs	r0, r0, #1
1005dfd0:	7798      	strb	r0, [r3, #30]
1005dfd2:	4638      	mov	r0, r7
1005dfd4:	461e      	mov	r6, r3
1005dfd6:	f000 f88b 	bl	1005e0f0 <UTIL_u8GetNextAdvChannel>
1005dfda:	4601      	mov	r1, r0
1005dfdc:	7f30      	ldrb	r0, [r6, #28]
1005dfde:	f7f4 fd10 	bl	10052a02 <BLEPLAT_CNTR_SmSetRemapChan>
1005dfe2:	7f30      	ldrb	r0, [r6, #28]
1005dfe4:	f7f4 fdcc 	bl	10052b80 <BLEPLAT_CNTR_SmSetTxMode>
1005dfe8:	2000      	movs	r0, #0
1005dfea:	9003      	str	r0, [sp, #12]
1005dfec:	9904      	ldr	r1, [sp, #16]
1005dfee:	7148      	strb	r0, [r1, #5]
1005dff0:	4638      	mov	r0, r7
1005dff2:	3028      	adds	r0, #40	@ 0x28
1005dff4:	f7ff fafe 	bl	1005d5f4 <LL_eadv_switchbackupdata_data_struc>
1005dff8:	4606      	mov	r6, r0
1005dffa:	4638      	mov	r0, r7
1005dffc:	303c      	adds	r0, #60	@ 0x3c
1005dffe:	f7ff faf9 	bl	1005d5f4 <LL_eadv_switchbackupdata_data_struc>
1005e002:	2e00      	cmp	r6, #0
1005e004:	9e04      	ldr	r6, [sp, #16]
1005e006:	d002      	beq.n	1005e00e <ADV_skiproutine+0xde>
1005e008:	7931      	ldrb	r1, [r6, #4]
1005e00a:	07c9      	lsls	r1, r1, #31
1005e00c:	d104      	bne.n	1005e018 <ADV_skiproutine+0xe8>
1005e00e:	2800      	cmp	r0, #0
1005e010:	d005      	beq.n	1005e01e <ADV_skiproutine+0xee>
1005e012:	7930      	ldrb	r0, [r6, #4]
1005e014:	0780      	lsls	r0, r0, #30
1005e016:	d502      	bpl.n	1005e01e <ADV_skiproutine+0xee>
1005e018:	4638      	mov	r0, r7
1005e01a:	f7ff fbe7 	bl	1005d7ec <llc_eadv_generate_new_rpa_for_one_adv_set>
1005e01e:	68a1      	ldr	r1, [r4, #8]
1005e020:	6820      	ldr	r0, [r4, #0]
1005e022:	9b05      	ldr	r3, [sp, #20]
1005e024:	88da      	ldrh	r2, [r3, #6]
1005e026:	2a00      	cmp	r2, #0
1005e028:	d102      	bne.n	1005e030 <ADV_skiproutine+0x100>
1005e02a:	7eda      	ldrb	r2, [r3, #27]
1005e02c:	2a01      	cmp	r2, #1
1005e02e:	d003      	beq.n	1005e038 <ADV_skiproutine+0x108>
1005e030:	4288      	cmp	r0, r1
1005e032:	da4c      	bge.n	1005e0ce <ADV_skiproutine+0x19e>
1005e034:	2800      	cmp	r0, #0
1005e036:	d04a      	beq.n	1005e0ce <ADV_skiproutine+0x19e>
1005e038:	7e98      	ldrb	r0, [r3, #26]
1005e03a:	2800      	cmp	r0, #0
1005e03c:	d047      	beq.n	1005e0ce <ADV_skiproutine+0x19e>
1005e03e:	8898      	ldrh	r0, [r3, #4]
1005e040:	0700      	lsls	r0, r0, #28
1005e042:	d520      	bpl.n	1005e086 <ADV_skiproutine+0x156>
1005e044:	a80d      	add	r0, sp, #52	@ 0x34
1005e046:	9000      	str	r0, [sp, #0]
1005e048:	9903      	ldr	r1, [sp, #12]
1005e04a:	8081      	strh	r1, [r0, #4]
1005e04c:	910d      	str	r1, [sp, #52]	@ 0x34
1005e04e:	a806      	add	r0, sp, #24
1005e050:	9a01      	ldr	r2, [sp, #4]
1005e052:	7642      	strb	r2, [r0, #25]
1005e054:	223c      	movs	r2, #60	@ 0x3c
1005e056:	7682      	strb	r2, [r0, #26]
1005e058:	22ff      	movs	r2, #255	@ 0xff
1005e05a:	7582      	strb	r2, [r0, #22]
1005e05c:	81c1      	strh	r1, [r0, #14]
1005e05e:	4a22      	ldr	r2, [pc, #136]	@ (1005e0e8 <__arm_cp.40_2>)
1005e060:	8282      	strh	r2, [r0, #20]
1005e062:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005e064:	7a13      	ldrb	r3, [r2, #8]
1005e066:	7603      	strb	r3, [r0, #24]
1005e068:	8181      	strh	r1, [r0, #12]
1005e06a:	75c1      	strb	r1, [r0, #23]
1005e06c:	9b00      	ldr	r3, [sp, #0]
1005e06e:	9307      	str	r3, [sp, #28]
1005e070:	3209      	adds	r2, #9
1005e072:	9206      	str	r2, [sp, #24]
1005e074:	910a      	str	r1, [sp, #40]	@ 0x28
1005e076:	9308      	str	r3, [sp, #32]
1005e078:	f7fb f832 	bl	100590e0 <llc_conn_push_connection_complete_event>
1005e07c:	7830      	ldrb	r0, [r6, #0]
1005e07e:	0780      	lsls	r0, r0, #30
1005e080:	d501      	bpl.n	1005e086 <ADV_skiproutine+0x156>
1005e082:	f7fc fa01 	bl	1005a488 <llc_priv_stop_privacy_timer_ucfg_weak>
1005e086:	2002      	movs	r0, #2
1005e088:	f7f9 fed2 	bl	10057e30 <hci_check_legacy_ext_flag>
1005e08c:	2801      	cmp	r0, #1
1005e08e:	d119      	bne.n	1005e0c4 <ADV_skiproutine+0x194>
1005e090:	9b05      	ldr	r3, [sp, #20]
1005e092:	88da      	ldrh	r2, [r3, #6]
1005e094:	2a00      	cmp	r2, #0
1005e096:	d001      	beq.n	1005e09c <ADV_skiproutine+0x16c>
1005e098:	203c      	movs	r0, #60	@ 0x3c
1005e09a:	e000      	b.n	1005e09e <ADV_skiproutine+0x16e>
1005e09c:	2043      	movs	r0, #67	@ 0x43
1005e09e:	9001      	str	r0, [sp, #4]
1005e0a0:	4812      	ldr	r0, [pc, #72]	@ (1005e0ec <__arm_cp.40_3>)
1005e0a2:	6800      	ldr	r0, [r0, #0]
1005e0a4:	9902      	ldr	r1, [sp, #8]
1005e0a6:	5c40      	ldrb	r0, [r0, r1]
1005e0a8:	0100      	lsls	r0, r0, #4
1005e0aa:	43c0      	mvns	r0, r0
1005e0ac:	4619      	mov	r1, r3
1005e0ae:	23a1      	movs	r3, #161	@ 0xa1
1005e0b0:	4303      	orrs	r3, r0
1005e0b2:	20b1      	movs	r0, #177	@ 0xb1
1005e0b4:	4018      	ands	r0, r3
1005e0b6:	7a0b      	ldrb	r3, [r1, #8]
1005e0b8:	1a9a      	subs	r2, r3, r2
1005e0ba:	b2d3      	uxtb	r3, r2
1005e0bc:	7a8a      	ldrb	r2, [r1, #10]
1005e0be:	9901      	ldr	r1, [sp, #4]
1005e0c0:	f000 f85e 	bl	1005e180 <hci_le_advertising_set_terminated_event_push>
1005e0c4:	4638      	mov	r0, r7
1005e0c6:	f000 f895 	bl	1005e1f4 <EADV_stop_isr>
1005e0ca:	68a1      	ldr	r1, [r4, #8]
1005e0cc:	9b05      	ldr	r3, [sp, #20]
1005e0ce:	7f18      	ldrb	r0, [r3, #28]
1005e0d0:	f000 fe40 	bl	1005ed54 <LL_sched_set_anchor>
1005e0d4:	9803      	ldr	r0, [sp, #12]
1005e0d6:	7170      	strb	r0, [r6, #5]
1005e0d8:	4628      	mov	r0, r5
1005e0da:	b00f      	add	sp, #60	@ 0x3c
1005e0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e0de:	46c0      	nop			@ (mov r8, r8)

1005e0e0 <__arm_cp.40_0>:
1005e0e0:	20002470 	.word	0x20002470

1005e0e4 <__arm_cp.40_1>:
1005e0e4:	00000fff 	.word	0x00000fff

1005e0e8 <__arm_cp.40_2>:
1005e0e8:	0000ffff 	.word	0x0000ffff

1005e0ec <__arm_cp.40_3>:
1005e0ec:	20002414 	.word	0x20002414

1005e0f0 <UTIL_u8GetNextAdvChannel>:
1005e0f0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e0f2:	4604      	mov	r4, r0
1005e0f4:	20c2      	movs	r0, #194	@ 0xc2
1005e0f6:	5c27      	ldrb	r7, [r4, r0]
1005e0f8:	2501      	movs	r5, #1
1005e0fa:	403d      	ands	r5, r7
1005e0fc:	07ba      	lsls	r2, r7, #30
1005e0fe:	0fd0      	lsrs	r0, r2, #31
1005e100:	1828      	adds	r0, r5, r0
1005e102:	0779      	lsls	r1, r7, #29
1005e104:	0fc9      	lsrs	r1, r1, #31
1005e106:	1840      	adds	r0, r0, r1
1005e108:	1e40      	subs	r0, r0, #1
1005e10a:	b2c0      	uxtb	r0, r0
1005e10c:	34c2      	adds	r4, #194	@ 0xc2
1005e10e:	7c26      	ldrb	r6, [r4, #16]
1005e110:	42b0      	cmp	r0, r6
1005e112:	d10f      	bne.n	1005e134 <UTIL_u8GetNextAdvChannel+0x44>
1005e114:	9201      	str	r2, [sp, #4]
1005e116:	2001      	movs	r0, #1
1005e118:	9002      	str	r0, [sp, #8]
1005e11a:	f003 fb6d 	bl	100617f8 <Hal_Get_Random_Number>
1005e11e:	2e01      	cmp	r6, #1
1005e120:	d00a      	beq.n	1005e138 <UTIL_u8GetNextAdvChannel+0x48>
1005e122:	2e02      	cmp	r6, #2
1005e124:	d10e      	bne.n	1005e144 <UTIL_u8GetNextAdvChannel+0x54>
1005e126:	b2c0      	uxtb	r0, r0
1005e128:	2106      	movs	r1, #6
1005e12a:	f7e2 f90f 	bl	1004034c <__aeabi_uidivmod>
1005e12e:	a012      	add	r0, pc, #72	@ (adr r0, 1005e178 <UTIL_u8GetNextAdvChannel+0x88>)
1005e130:	5c40      	ldrb	r0, [r0, r1]
1005e132:	e012      	b.n	1005e15a <UTIL_u8GetNextAdvChannel+0x6a>
1005e134:	7c60      	ldrb	r0, [r4, #17]
1005e136:	e011      	b.n	1005e15c <UTIL_u8GetNextAdvChannel+0x6c>
1005e138:	9902      	ldr	r1, [sp, #8]
1005e13a:	4008      	ands	r0, r1
1005e13c:	2d00      	cmp	r5, #0
1005e13e:	d104      	bne.n	1005e14a <UTIL_u8GetNextAdvChannel+0x5a>
1005e140:	a10c      	add	r1, pc, #48	@ (adr r1, 1005e174 <UTIL_u8GetNextAdvChannel+0x84>)
1005e142:	e008      	b.n	1005e156 <UTIL_u8GetNextAdvChannel+0x66>
1005e144:	08b8      	lsrs	r0, r7, #2
1005e146:	1a38      	subs	r0, r7, r0
1005e148:	e007      	b.n	1005e15a <UTIL_u8GetNextAdvChannel+0x6a>
1005e14a:	9901      	ldr	r1, [sp, #4]
1005e14c:	2900      	cmp	r1, #0
1005e14e:	d401      	bmi.n	1005e154 <UTIL_u8GetNextAdvChannel+0x64>
1005e150:	a107      	add	r1, pc, #28	@ (adr r1, 1005e170 <UTIL_u8GetNextAdvChannel+0x80>)
1005e152:	e000      	b.n	1005e156 <UTIL_u8GetNextAdvChannel+0x66>
1005e154:	a105      	add	r1, pc, #20	@ (adr r1, 1005e16c <UTIL_u8GetNextAdvChannel+0x7c>)
1005e156:	1808      	adds	r0, r1, r0
1005e158:	7800      	ldrb	r0, [r0, #0]
1005e15a:	7460      	strb	r0, [r4, #17]
1005e15c:	0071      	lsls	r1, r6, #1
1005e15e:	b2c2      	uxtb	r2, r0
1005e160:	40ca      	lsrs	r2, r1
1005e162:	2003      	movs	r0, #3
1005e164:	4010      	ands	r0, r2
1005e166:	3024      	adds	r0, #36	@ 0x24
1005e168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e16a:	46c0      	nop			@ (mov r8, r8)
1005e16c:	00000906 	.word	0x00000906
1005e170:	00000d07 	.word	0x00000d07
1005e174:	00000e0b 	.word	0x00000e0b
1005e178:	2d271e1b 	.word	0x2d271e1b
1005e17c:	00003936 	.word	0x00003936

1005e180 <hci_le_advertising_set_terminated_event_push>:
1005e180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e182:	461f      	mov	r7, r3
1005e184:	4616      	mov	r6, r2
1005e186:	460d      	mov	r5, r1
1005e188:	4604      	mov	r4, r0
1005e18a:	06c0      	lsls	r0, r0, #27
1005e18c:	d40b      	bmi.n	1005e1a6 <hci_le_advertising_set_terminated_event_push+0x26>
1005e18e:	4817      	ldr	r0, [pc, #92]	@ (1005e1ec <__arm_cp.42_0>)
1005e190:	6800      	ldr	r0, [r0, #0]
1005e192:	213d      	movs	r1, #61	@ 0x3d
1005e194:	5c41      	ldrb	r1, [r0, r1]
1005e196:	0689      	lsls	r1, r1, #26
1005e198:	d527      	bpl.n	1005e1ea <hci_le_advertising_set_terminated_event_push+0x6a>
1005e19a:	303d      	adds	r0, #61	@ 0x3d
1005e19c:	7ac0      	ldrb	r0, [r0, #11]
1005e19e:	0780      	lsls	r0, r0, #30
1005e1a0:	d523      	bpl.n	1005e1ea <hci_le_advertising_set_terminated_event_push+0x6a>
1005e1a2:	221f      	movs	r2, #31
1005e1a4:	e002      	b.n	1005e1ac <hci_le_advertising_set_terminated_event_push+0x2c>
1005e1a6:	20bf      	movs	r0, #191	@ 0xbf
1005e1a8:	4004      	ands	r4, r0
1005e1aa:	2211      	movs	r2, #17
1005e1ac:	4810      	ldr	r0, [pc, #64]	@ (1005e1f0 <__arm_cp.42_1>)
1005e1ae:	6800      	ldr	r0, [r0, #0]
1005e1b0:	0761      	lsls	r1, r4, #29
1005e1b2:	0ec9      	lsrs	r1, r1, #27
1005e1b4:	1840      	adds	r0, r0, r1
1005e1b6:	6900      	ldr	r0, [r0, #16]
1005e1b8:	2303      	movs	r3, #3
1005e1ba:	4621      	mov	r1, r4
1005e1bc:	f7f5 fcb8 	bl	10053b30 <aci_event_fifo_push_header>
1005e1c0:	2800      	cmp	r0, #0
1005e1c2:	d012      	beq.n	1005e1ea <hci_le_advertising_set_terminated_event_push+0x6a>
1005e1c4:	4601      	mov	r1, r0
1005e1c6:	200f      	movs	r0, #15
1005e1c8:	72c8      	strb	r0, [r1, #11]
1005e1ca:	20ff      	movs	r0, #255	@ 0xff
1005e1cc:	7288      	strb	r0, [r1, #10]
1005e1ce:	730f      	strb	r7, [r1, #12]
1005e1d0:	724e      	strb	r6, [r1, #9]
1005e1d2:	720d      	strb	r5, [r1, #8]
1005e1d4:	2012      	movs	r0, #18
1005e1d6:	71c8      	strb	r0, [r1, #7]
1005e1d8:	2006      	movs	r0, #6
1005e1da:	7188      	strb	r0, [r1, #6]
1005e1dc:	203e      	movs	r0, #62	@ 0x3e
1005e1de:	7148      	strb	r0, [r1, #5]
1005e1e0:	2004      	movs	r0, #4
1005e1e2:	7108      	strb	r0, [r1, #4]
1005e1e4:	4620      	mov	r0, r4
1005e1e6:	f7f5 fd40 	bl	10053c6a <aci_event_fifo_push>
1005e1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e1ec <__arm_cp.42_0>:
1005e1ec:	20002468 	.word	0x20002468

1005e1f0 <__arm_cp.42_1>:
1005e1f0:	20002418 	.word	0x20002418

1005e1f4 <EADV_stop_isr>:
1005e1f4:	b5b0      	push	{r4, r5, r7, lr}
1005e1f6:	4604      	mov	r4, r0
1005e1f8:	20d1      	movs	r0, #209	@ 0xd1
1005e1fa:	5c20      	ldrb	r0, [r4, r0]
1005e1fc:	f000 fdbc 	bl	1005ed78 <LL_sched_set_cancel_request>
1005e200:	4625      	mov	r5, r4
1005e202:	35ce      	adds	r5, #206	@ 0xce
1005e204:	78a8      	ldrb	r0, [r5, #2]
1005e206:	f000 fdb7 	bl	1005ed78 <LL_sched_set_cancel_request>
1005e20a:	20ce      	movs	r0, #206	@ 0xce
1005e20c:	2100      	movs	r1, #0
1005e20e:	5221      	strh	r1, [r4, r0]
1005e210:	7aa8      	ldrb	r0, [r5, #10]
1005e212:	28ff      	cmp	r0, #255	@ 0xff
1005e214:	d001      	beq.n	1005e21a <EADV_stop_isr+0x26>
1005e216:	f7fb fa66 	bl	100596e6 <llc_conn_release_conn_idx>
1005e21a:	20ff      	movs	r0, #255	@ 0xff
1005e21c:	72a8      	strb	r0, [r5, #10]
1005e21e:	bdb0      	pop	{r4, r5, r7, pc}

1005e220 <ADV_createslot>:
1005e220:	b570      	push	{r4, r5, r6, lr}
1005e222:	4604      	mov	r4, r0
1005e224:	20c5      	movs	r0, #197	@ 0xc5
1005e226:	5c20      	ldrb	r0, [r4, r0]
1005e228:	f7fc f9be 	bl	1005a5a8 <llc_convert_hci_phy_enum_to_hw_phy>
1005e22c:	4605      	mov	r5, r0
1005e22e:	4626      	mov	r6, r4
1005e230:	36c5      	adds	r6, #197	@ 0xc5
1005e232:	7af0      	ldrb	r0, [r6, #11]
1005e234:	4629      	mov	r1, r5
1005e236:	f7f4 fcc4 	bl	10052bc2 <BLEPLAT_CNTR_SmSetTxPhy>
1005e23a:	7af0      	ldrb	r0, [r6, #11]
1005e23c:	4629      	mov	r1, r5
1005e23e:	f7f4 fc54 	bl	10052aea <BLEPLAT_CNTR_SmSetRxPhy>
1005e242:	f7f3 ffa0 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
1005e246:	f000 fd11 	bl	1005ec6c <LL_get_tx_common_buffer_p>
1005e24a:	4602      	mov	r2, r0
1005e24c:	7db0      	ldrb	r0, [r6, #22]
1005e24e:	4621      	mov	r1, r4
1005e250:	f000 f801 	bl	1005e256 <EADV_vPrepareAdvOrRspLegacyPacket>
1005e254:	bd70      	pop	{r4, r5, r6, pc}

1005e256 <EADV_vPrepareAdvOrRspLegacyPacket>:
1005e256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e258:	4614      	mov	r4, r2
1005e25a:	460d      	mov	r5, r1
1005e25c:	4606      	mov	r6, r0
1005e25e:	460f      	mov	r7, r1
1005e260:	37b8      	adds	r7, #184	@ 0xb8
1005e262:	2004      	movs	r0, #4
1005e264:	2e00      	cmp	r6, #0
1005e266:	4601      	mov	r1, r0
1005e268:	d10d      	bne.n	1005e286 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005e26a:	8839      	ldrh	r1, [r7, #0]
1005e26c:	074a      	lsls	r2, r1, #29
1005e26e:	d407      	bmi.n	1005e280 <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005e270:	2203      	movs	r2, #3
1005e272:	4011      	ands	r1, r2
1005e274:	424a      	negs	r2, r1
1005e276:	414a      	adcs	r2, r1
1005e278:	2902      	cmp	r1, #2
1005e27a:	d003      	beq.n	1005e284 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005e27c:	0051      	lsls	r1, r2, #1
1005e27e:	e002      	b.n	1005e286 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005e280:	2101      	movs	r1, #1
1005e282:	e000      	b.n	1005e286 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005e284:	2106      	movs	r1, #6
1005e286:	7021      	strb	r1, [r4, #0]
1005e288:	2e00      	cmp	r6, #0
1005e28a:	d107      	bne.n	1005e29c <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005e28c:	8839      	ldrh	r1, [r7, #0]
1005e28e:	4001      	ands	r1, r0
1005e290:	d104      	bne.n	1005e29c <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005e292:	202e      	movs	r0, #46	@ 0x2e
1005e294:	5c28      	ldrb	r0, [r5, r0]
1005e296:	1d80      	adds	r0, r0, #6
1005e298:	7060      	strb	r0, [r4, #1]
1005e29a:	e00f      	b.n	1005e2bc <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005e29c:	2e00      	cmp	r6, #0
1005e29e:	d004      	beq.n	1005e2aa <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005e2a0:	4628      	mov	r0, r5
1005e2a2:	3042      	adds	r0, #66	@ 0x42
1005e2a4:	7800      	ldrb	r0, [r0, #0]
1005e2a6:	1d80      	adds	r0, r0, #6
1005e2a8:	e000      	b.n	1005e2ac <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005e2aa:	200c      	movs	r0, #12
1005e2ac:	7060      	strb	r0, [r4, #1]
1005e2ae:	4620      	mov	r0, r4
1005e2b0:	3008      	adds	r0, #8
1005e2b2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e2b4:	3109      	adds	r1, #9
1005e2b6:	2206      	movs	r2, #6
1005e2b8:	f7f2 feee 	bl	10051098 <BLEPLAT_MemCpy>
1005e2bc:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e2be:	1ca0      	adds	r0, r4, #2
1005e2c0:	1c49      	adds	r1, r1, #1
1005e2c2:	2206      	movs	r2, #6
1005e2c4:	f7f2 fee8 	bl	10051098 <BLEPLAT_MemCpy>
1005e2c8:	7820      	ldrb	r0, [r4, #0]
1005e2ca:	212f      	movs	r1, #47	@ 0x2f
1005e2cc:	4001      	ands	r1, r0
1005e2ce:	7021      	strb	r1, [r4, #0]
1005e2d0:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005e2d2:	7800      	ldrb	r0, [r0, #0]
1005e2d4:	07c0      	lsls	r0, r0, #31
1005e2d6:	0e40      	lsrs	r0, r0, #25
1005e2d8:	1840      	adds	r0, r0, r1
1005e2da:	7020      	strb	r0, [r4, #0]
1005e2dc:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e2de:	7a09      	ldrb	r1, [r1, #8]
1005e2e0:	01c9      	lsls	r1, r1, #7
1005e2e2:	1808      	adds	r0, r1, r0
1005e2e4:	7020      	strb	r0, [r4, #0]
1005e2e6:	f000 f9ed 	bl	1005e6c4 <llc_get_channel_sel_algo2_enabled>
1005e2ea:	7821      	ldrb	r1, [r4, #0]
1005e2ec:	0140      	lsls	r0, r0, #5
1005e2ee:	4308      	orrs	r0, r1
1005e2f0:	7020      	strb	r0, [r4, #0]
1005e2f2:	4271      	negs	r1, r6
1005e2f4:	4171      	adcs	r1, r6
1005e2f6:	8838      	ldrh	r0, [r7, #0]
1005e2f8:	2204      	movs	r2, #4
1005e2fa:	4002      	ands	r2, r0
1005e2fc:	0890      	lsrs	r0, r2, #2
1005e2fe:	4008      	ands	r0, r1
1005e300:	d101      	bne.n	1005e306 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005e302:	2708      	movs	r7, #8
1005e304:	e000      	b.n	1005e308 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005e306:	270e      	movs	r7, #14
1005e308:	2800      	cmp	r0, #0
1005e30a:	d001      	beq.n	1005e310 <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005e30c:	200c      	movs	r0, #12
1005e30e:	e011      	b.n	1005e334 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005e310:	2e00      	cmp	r6, #0
1005e312:	d001      	beq.n	1005e318 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005e314:	203c      	movs	r0, #60	@ 0x3c
1005e316:	e000      	b.n	1005e31a <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005e318:	2028      	movs	r0, #40	@ 0x28
1005e31a:	5829      	ldr	r1, [r5, r0]
1005e31c:	2e00      	cmp	r6, #0
1005e31e:	d001      	beq.n	1005e324 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005e320:	2042      	movs	r0, #66	@ 0x42
1005e322:	e000      	b.n	1005e326 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005e324:	202e      	movs	r0, #46	@ 0x2e
1005e326:	5a2d      	ldrh	r5, [r5, r0]
1005e328:	19e0      	adds	r0, r4, r7
1005e32a:	462a      	mov	r2, r5
1005e32c:	f7f2 feb4 	bl	10051098 <BLEPLAT_MemCpy>
1005e330:	1978      	adds	r0, r7, r5
1005e332:	1e80      	subs	r0, r0, #2
1005e334:	7060      	strb	r0, [r4, #1]
1005e336:	2000      	movs	r0, #0
1005e338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005e33c <ADV_ISR_connect_request_received>:
1005e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e33e:	b085      	sub	sp, #20
1005e340:	4616      	mov	r6, r2
1005e342:	460d      	mov	r5, r1
1005e344:	4604      	mov	r4, r0
1005e346:	f7f3 ffff 	bl	10052348 <BLEPLAT_CNTR_PacketClrPllTrig>
1005e34a:	f7f2 ffb1 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1005e34e:	2003      	movs	r0, #3
1005e350:	43c0      	mvns	r0, r0
1005e352:	1cc1      	adds	r1, r0, #3
1005e354:	4668      	mov	r0, sp
1005e356:	8101      	strh	r1, [r0, #8]
1005e358:	2101      	movs	r1, #1
1005e35a:	8201      	strh	r1, [r0, #16]
1005e35c:	7341      	strb	r1, [r0, #13]
1005e35e:	21be      	movs	r1, #190	@ 0xbe
1005e360:	5a61      	ldrh	r1, [r4, r1]
1005e362:	7281      	strb	r1, [r0, #10]
1005e364:	4627      	mov	r7, r4
1005e366:	37be      	adds	r7, #190	@ 0xbe
1005e368:	7eba      	ldrb	r2, [r7, #26]
1005e36a:	72c2      	strb	r2, [r0, #11]
1005e36c:	7cba      	ldrb	r2, [r7, #18]
1005e36e:	7382      	strb	r2, [r0, #14]
1005e370:	4a0e      	ldr	r2, [pc, #56]	@ (1005e3ac <__arm_cp.47_0>)
1005e372:	1a89      	subs	r1, r1, r2
1005e374:	1e4a      	subs	r2, r1, #1
1005e376:	4191      	sbcs	r1, r2
1005e378:	73c1      	strb	r1, [r0, #15]
1005e37a:	7301      	strb	r1, [r0, #12]
1005e37c:	9601      	str	r6, [sp, #4]
1005e37e:	9500      	str	r5, [sp, #0]
1005e380:	f7fb f9ec 	bl	1005975c <llc_conn_go_to_connect>
1005e384:	4620      	mov	r0, r4
1005e386:	3028      	adds	r0, #40	@ 0x28
1005e388:	f7ff f934 	bl	1005d5f4 <LL_eadv_switchbackupdata_data_struc>
1005e38c:	343c      	adds	r4, #60	@ 0x3c
1005e38e:	4620      	mov	r0, r4
1005e390:	f7ff f930 	bl	1005d5f4 <LL_eadv_switchbackupdata_data_struc>
1005e394:	2000      	movs	r0, #0
1005e396:	7438      	strb	r0, [r7, #16]
1005e398:	7cb8      	ldrb	r0, [r7, #18]
1005e39a:	f000 fd5d 	bl	1005ee58 <LL_sched_engine>
1005e39e:	7e38      	ldrb	r0, [r7, #24]
1005e3a0:	0780      	lsls	r0, r0, #30
1005e3a2:	d501      	bpl.n	1005e3a8 <ADV_ISR_connect_request_received+0x6c>
1005e3a4:	f7fc f870 	bl	1005a488 <llc_priv_stop_privacy_timer_ucfg_weak>
1005e3a8:	b005      	add	sp, #20
1005e3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e3ac <__arm_cp.47_0>:
1005e3ac:	0000fffc 	.word	0x0000fffc

1005e3b0 <ADV_ISR>:
1005e3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e3b2:	b08d      	sub	sp, #52	@ 0x34
1005e3b4:	4605      	mov	r5, r0
1005e3b6:	f000 fc61 	bl	1005ec7c <LL_get_rx_common_buffer_p>
1005e3ba:	9006      	str	r0, [sp, #24]
1005e3bc:	4c87      	ldr	r4, [pc, #540]	@ (1005e5dc <__arm_cp.48_0>)
1005e3be:	6820      	ldr	r0, [r4, #0]
1005e3c0:	f7f3 ff7b 	bl	100522ba <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005e3c4:	4606      	mov	r6, r0
1005e3c6:	6820      	ldr	r0, [r4, #0]
1005e3c8:	f7f3 ff8e 	bl	100522e8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005e3cc:	4607      	mov	r7, r0
1005e3ce:	20d0      	movs	r0, #208	@ 0xd0
1005e3d0:	5c28      	ldrb	r0, [r5, r0]
1005e3d2:	212c      	movs	r1, #44	@ 0x2c
1005e3d4:	4341      	muls	r1, r0
1005e3d6:	4a82      	ldr	r2, [pc, #520]	@ (1005e5e0 <__arm_cp.48_1>)
1005e3d8:	6812      	ldr	r2, [r2, #0]
1005e3da:	1851      	adds	r1, r2, r1
1005e3dc:	7d89      	ldrb	r1, [r1, #22]
1005e3de:	2914      	cmp	r1, #20
1005e3e0:	d103      	bne.n	1005e3ea <ADV_ISR+0x3a>
1005e3e2:	210a      	movs	r1, #10
1005e3e4:	2203      	movs	r2, #3
1005e3e6:	f000 fefd 	bl	1005f1e4 <LL_sched_set_priority>
1005e3ea:	462c      	mov	r4, r5
1005e3ec:	34b4      	adds	r4, #180	@ 0xb4
1005e3ee:	4628      	mov	r0, r5
1005e3f0:	30db      	adds	r0, #219	@ 0xdb
1005e3f2:	9004      	str	r0, [sp, #16]
1005e3f4:	2e00      	cmp	r6, #0
1005e3f6:	d038      	beq.n	1005e46a <ADV_ISR+0xba>
1005e3f8:	9505      	str	r5, [sp, #20]
1005e3fa:	2700      	movs	r7, #0
1005e3fc:	970c      	str	r7, [sp, #48]	@ 0x30
1005e3fe:	970b      	str	r7, [sp, #44]	@ 0x2c
1005e400:	9d06      	ldr	r5, [sp, #24]
1005e402:	7828      	ldrb	r0, [r5, #0]
1005e404:	09c0      	lsrs	r0, r0, #7
1005e406:	a90b      	add	r1, sp, #44	@ 0x2c
1005e408:	7008      	strb	r0, [r1, #0]
1005e40a:	4876      	ldr	r0, [pc, #472]	@ (1005e5e4 <__arm_cp.48_2>)
1005e40c:	6800      	ldr	r0, [r0, #0]
1005e40e:	22d8      	movs	r2, #216	@ 0xd8
1005e410:	5c80      	ldrb	r0, [r0, r2]
1005e412:	9003      	str	r0, [sp, #12]
1005e414:	1c48      	adds	r0, r1, #1
1005e416:	4629      	mov	r1, r5
1005e418:	3108      	adds	r1, #8
1005e41a:	2606      	movs	r6, #6
1005e41c:	4632      	mov	r2, r6
1005e41e:	f7f2 fe3b 	bl	10051098 <BLEPLAT_MemCpy>
1005e422:	970a      	str	r7, [sp, #40]	@ 0x28
1005e424:	9709      	str	r7, [sp, #36]	@ 0x24
1005e426:	7828      	ldrb	r0, [r5, #0]
1005e428:	0640      	lsls	r0, r0, #25
1005e42a:	0fc0      	lsrs	r0, r0, #31
1005e42c:	a909      	add	r1, sp, #36	@ 0x24
1005e42e:	7008      	strb	r0, [r1, #0]
1005e430:	1c48      	adds	r0, r1, #1
1005e432:	1ca9      	adds	r1, r5, #2
1005e434:	4632      	mov	r2, r6
1005e436:	f7f2 fe2f 	bl	10051098 <BLEPLAT_MemCpy>
1005e43a:	7828      	ldrb	r0, [r5, #0]
1005e43c:	260f      	movs	r6, #15
1005e43e:	4006      	ands	r6, r0
1005e440:	2e05      	cmp	r6, #5
1005e442:	d101      	bne.n	1005e448 <ADV_ISR+0x98>
1005e444:	f7f2 ff34 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1005e448:	7be3      	ldrb	r3, [r4, #15]
1005e44a:	7922      	ldrb	r2, [r4, #4]
1005e44c:	9702      	str	r7, [sp, #8]
1005e44e:	ad07      	add	r5, sp, #28
1005e450:	9501      	str	r5, [sp, #4]
1005e452:	9805      	ldr	r0, [sp, #20]
1005e454:	3084      	adds	r0, #132	@ 0x84
1005e456:	9000      	str	r0, [sp, #0]
1005e458:	a809      	add	r0, sp, #36	@ 0x24
1005e45a:	4631      	mov	r1, r6
1005e45c:	f006 faee 	bl	10064a3c <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005e460:	0841      	lsrs	r1, r0, #1
1005e462:	297e      	cmp	r1, #126	@ 0x7e
1005e464:	d807      	bhi.n	1005e476 <ADV_ISR+0xc6>
1005e466:	4601      	mov	r1, r0
1005e468:	e006      	b.n	1005e478 <ADV_ISR+0xc8>
1005e46a:	2601      	movs	r6, #1
1005e46c:	2f00      	cmp	r7, #0
1005e46e:	d154      	bne.n	1005e51a <ADV_ISR+0x16a>
1005e470:	2700      	movs	r7, #0
1005e472:	8027      	strh	r7, [r4, #0]
1005e474:	e056      	b.n	1005e524 <ADV_ISR+0x174>
1005e476:	2101      	movs	r1, #1
1005e478:	7029      	strb	r1, [r5, #0]
1005e47a:	9d05      	ldr	r5, [sp, #20]
1005e47c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e47e:	680a      	ldr	r2, [r1, #0]
1005e480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005e482:	429a      	cmp	r2, r3
1005e484:	d12d      	bne.n	1005e4e2 <ADV_ISR+0x132>
1005e486:	6849      	ldr	r1, [r1, #4]
1005e488:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005e48a:	4291      	cmp	r1, r2
1005e48c:	d129      	bne.n	1005e4e2 <ADV_ISR+0x132>
1005e48e:	4607      	mov	r7, r0
1005e490:	3fff      	subs	r7, #255	@ 0xff
1005e492:	1e79      	subs	r1, r7, #1
1005e494:	418f      	sbcs	r7, r1
1005e496:	2e03      	cmp	r6, #3
1005e498:	d123      	bne.n	1005e4e2 <ADV_ISR+0x132>
1005e49a:	28ff      	cmp	r0, #255	@ 0xff
1005e49c:	d021      	beq.n	1005e4e2 <ADV_ISR+0x132>
1005e49e:	88a0      	ldrh	r0, [r4, #4]
1005e4a0:	2701      	movs	r7, #1
1005e4a2:	0780      	lsls	r0, r0, #30
1005e4a4:	d51d      	bpl.n	1005e4e2 <ADV_ISR+0x132>
1005e4a6:	9803      	ldr	r0, [sp, #12]
1005e4a8:	2801      	cmp	r0, #1
1005e4aa:	d11a      	bne.n	1005e4e2 <ADV_ISR+0x132>
1005e4ac:	4628      	mov	r0, r5
1005e4ae:	f7f3 ff4b 	bl	10052348 <BLEPLAT_CNTR_PacketClrPllTrig>
1005e4b2:	7e60      	ldrb	r0, [r4, #25]
1005e4b4:	2801      	cmp	r0, #1
1005e4b6:	d109      	bne.n	1005e4cc <ADV_ISR+0x11c>
1005e4b8:	8960      	ldrh	r0, [r4, #10]
1005e4ba:	494b      	ldr	r1, [pc, #300]	@ (1005e5e8 <__arm_cp.48_3>)
1005e4bc:	4288      	cmp	r0, r1
1005e4be:	d005      	beq.n	1005e4cc <ADV_ISR+0x11c>
1005e4c0:	aa07      	add	r2, sp, #28
1005e4c2:	7811      	ldrb	r1, [r2, #0]
1005e4c4:	b2c0      	uxtb	r0, r0
1005e4c6:	1c52      	adds	r2, r2, #1
1005e4c8:	f000 f892 	bl	1005e5f0 <hci_le_scan_request_received_event_push>
1005e4cc:	7f20      	ldrb	r0, [r4, #28]
1005e4ce:	f7f4 fb57 	bl	10052b80 <BLEPLAT_CNTR_SmSetTxMode>
1005e4d2:	2001      	movs	r0, #1
1005e4d4:	9904      	ldr	r1, [sp, #16]
1005e4d6:	7008      	strb	r0, [r1, #0]
1005e4d8:	4628      	mov	r0, r5
1005e4da:	f7ff fea1 	bl	1005e220 <ADV_createslot>
1005e4de:	2600      	movs	r6, #0
1005e4e0:	e020      	b.n	1005e524 <ADV_ISR+0x174>
1005e4e2:	88a0      	ldrh	r0, [r4, #4]
1005e4e4:	07c0      	lsls	r0, r0, #31
1005e4e6:	d01a      	beq.n	1005e51e <ADV_ISR+0x16e>
1005e4e8:	2e05      	cmp	r6, #5
1005e4ea:	d118      	bne.n	1005e51e <ADV_ISR+0x16e>
1005e4ec:	9806      	ldr	r0, [sp, #24]
1005e4ee:	f7fa ffbf 	bl	10059470 <llc_conn_check_connect_request_params>
1005e4f2:	2801      	cmp	r0, #1
1005e4f4:	d113      	bne.n	1005e51e <ADV_ISR+0x16e>
1005e4f6:	9908      	ldr	r1, [sp, #32]
1005e4f8:	9807      	ldr	r0, [sp, #28]
1005e4fa:	f7fa fd91 	bl	10059020 <llc_conn_list_search_address>
1005e4fe:	4241      	negs	r1, r0
1005e500:	4141      	adcs	r1, r0
1005e502:	4039      	ands	r1, r7
1005e504:	2901      	cmp	r1, #1
1005e506:	d10a      	bne.n	1005e51e <ADV_ISR+0x16e>
1005e508:	9803      	ldr	r0, [sp, #12]
1005e50a:	2801      	cmp	r0, #1
1005e50c:	d107      	bne.n	1005e51e <ADV_ISR+0x16e>
1005e50e:	aa07      	add	r2, sp, #28
1005e510:	4628      	mov	r0, r5
1005e512:	9906      	ldr	r1, [sp, #24]
1005e514:	f7ef f9bc 	bl	1004d890 <ADV_ISR_connect_request_received_ucfg>
1005e518:	2601      	movs	r6, #1
1005e51a:	2700      	movs	r7, #0
1005e51c:	e002      	b.n	1005e524 <ADV_ISR+0x174>
1005e51e:	2700      	movs	r7, #0
1005e520:	8027      	strh	r7, [r4, #0]
1005e522:	2601      	movs	r6, #1
1005e524:	8821      	ldrh	r1, [r4, #0]
1005e526:	7fa0      	ldrb	r0, [r4, #30]
1005e528:	2800      	cmp	r0, #0
1005e52a:	d022      	beq.n	1005e572 <ADV_ISR+0x1c2>
1005e52c:	2900      	cmp	r1, #0
1005e52e:	d122      	bne.n	1005e576 <ADV_ISR+0x1c6>
1005e530:	1e40      	subs	r0, r0, #1
1005e532:	77a0      	strb	r0, [r4, #30]
1005e534:	88a0      	ldrh	r0, [r4, #4]
1005e536:	2103      	movs	r1, #3
1005e538:	4001      	ands	r1, r0
1005e53a:	1e48      	subs	r0, r1, #1
1005e53c:	4181      	sbcs	r1, r0
1005e53e:	0048      	lsls	r0, r1, #1
1005e540:	8020      	strh	r0, [r4, #0]
1005e542:	4628      	mov	r0, r5
1005e544:	f7ff fdd4 	bl	1005e0f0 <UTIL_u8GetNextAdvChannel>
1005e548:	4601      	mov	r1, r0
1005e54a:	7f20      	ldrb	r0, [r4, #28]
1005e54c:	f7f4 fa59 	bl	10052a02 <BLEPLAT_CNTR_SmSetRemapChan>
1005e550:	7f20      	ldrb	r0, [r4, #28]
1005e552:	f7f4 fb15 	bl	10052b80 <BLEPLAT_CNTR_SmSetTxMode>
1005e556:	4628      	mov	r0, r5
1005e558:	f7f3 ffea 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005e55c:	f7f2 fea8 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1005e560:	2000      	movs	r0, #0
1005e562:	9904      	ldr	r1, [sp, #16]
1005e564:	7008      	strb	r0, [r1, #0]
1005e566:	4628      	mov	r0, r5
1005e568:	f7ff fe5a 	bl	1005e220 <ADV_createslot>
1005e56c:	f7f2 feb8 	bl	100512e0 <BLEPLAT_SetRadioCloseTimeout>
1005e570:	e02a      	b.n	1005e5c8 <ADV_ISR+0x218>
1005e572:	2900      	cmp	r1, #0
1005e574:	d019      	beq.n	1005e5aa <ADV_ISR+0x1fa>
1005e576:	4819      	ldr	r0, [pc, #100]	@ (1005e5dc <__arm_cp.48_0>)
1005e578:	6800      	ldr	r0, [r0, #0]
1005e57a:	f7f3 feb5 	bl	100522e8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005e57e:	2800      	cmp	r0, #0
1005e580:	d022      	beq.n	1005e5c8 <ADV_ISR+0x218>
1005e582:	4628      	mov	r0, r5
1005e584:	f7f3 ffd4 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005e588:	7c60      	ldrb	r0, [r4, #17]
1005e58a:	2801      	cmp	r0, #1
1005e58c:	d001      	beq.n	1005e592 <ADV_ISR+0x1e2>
1005e58e:	4917      	ldr	r1, [pc, #92]	@ (1005e5ec <__arm_cp.48_4>)
1005e590:	e000      	b.n	1005e594 <ADV_ISR+0x1e4>
1005e592:	2146      	movs	r1, #70	@ 0x46
1005e594:	3514      	adds	r5, #20
1005e596:	4628      	mov	r0, r5
1005e598:	f7f4 f82b 	bl	100525f2 <BLEPLAT_CNTR_SetRcvLen>
1005e59c:	8820      	ldrh	r0, [r4, #0]
1005e59e:	1e40      	subs	r0, r0, #1
1005e5a0:	8020      	strh	r0, [r4, #0]
1005e5a2:	f7f3 fdf0 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
1005e5a6:	2600      	movs	r6, #0
1005e5a8:	e00e      	b.n	1005e5c8 <ADV_ISR+0x218>
1005e5aa:	f7f2 fe81 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1005e5ae:	4628      	mov	r0, r5
1005e5b0:	f7f3 ffbe 	bl	10052530 <BLEPLAT_CNTR_PacketSetPllTrig>
1005e5b4:	88e0      	ldrh	r0, [r4, #6]
1005e5b6:	1e40      	subs	r0, r0, #1
1005e5b8:	80e0      	strh	r0, [r4, #6]
1005e5ba:	2100      	movs	r1, #0
1005e5bc:	4628      	mov	r0, r5
1005e5be:	f7ff fcb7 	bl	1005df30 <ADV_skiproutine>
1005e5c2:	7f20      	ldrb	r0, [r4, #28]
1005e5c4:	f000 fc48 	bl	1005ee58 <LL_sched_engine>
1005e5c8:	2f00      	cmp	r7, #0
1005e5ca:	d002      	beq.n	1005e5d2 <ADV_ISR+0x222>
1005e5cc:	8820      	ldrh	r0, [r4, #0]
1005e5ce:	1e40      	subs	r0, r0, #1
1005e5d0:	8020      	strh	r0, [r4, #0]
1005e5d2:	f7f5 faa9 	bl	10053b28 <log_notify_us_flush_ucfg_weak>
1005e5d6:	4630      	mov	r0, r6
1005e5d8:	b00d      	add	sp, #52	@ 0x34
1005e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e5dc <__arm_cp.48_0>:
1005e5dc:	20002464 	.word	0x20002464

1005e5e0 <__arm_cp.48_1>:
1005e5e0:	20002470 	.word	0x20002470

1005e5e4 <__arm_cp.48_2>:
1005e5e4:	20002468 	.word	0x20002468

1005e5e8 <__arm_cp.48_3>:
1005e5e8:	0000fffc 	.word	0x0000fffc

1005e5ec <__arm_cp.48_4>:
1005e5ec:	000002ee 	.word	0x000002ee

1005e5f0 <hci_le_scan_request_received_event_push>:
1005e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e5f2:	460e      	mov	r6, r1
1005e5f4:	4605      	mov	r5, r0
1005e5f6:	4815      	ldr	r0, [pc, #84]	@ (1005e64c <__arm_cp.49_0>)
1005e5f8:	6800      	ldr	r0, [r0, #0]
1005e5fa:	213d      	movs	r1, #61	@ 0x3d
1005e5fc:	5c41      	ldrb	r1, [r0, r1]
1005e5fe:	0689      	lsls	r1, r1, #26
1005e600:	d522      	bpl.n	1005e648 <hci_le_scan_request_received_event_push+0x58>
1005e602:	303d      	adds	r0, #61	@ 0x3d
1005e604:	7ac0      	ldrb	r0, [r0, #11]
1005e606:	0740      	lsls	r0, r0, #29
1005e608:	d51e      	bpl.n	1005e648 <hci_le_scan_request_received_event_push+0x58>
1005e60a:	4614      	mov	r4, r2
1005e60c:	4810      	ldr	r0, [pc, #64]	@ (1005e650 <__arm_cp.49_1>)
1005e60e:	6800      	ldr	r0, [r0, #0]
1005e610:	6940      	ldr	r0, [r0, #20]
1005e612:	21a1      	movs	r1, #161	@ 0xa1
1005e614:	222b      	movs	r2, #43	@ 0x2b
1005e616:	2303      	movs	r3, #3
1005e618:	f7f5 fa8a 	bl	10053b30 <aci_event_fifo_push_header>
1005e61c:	2800      	cmp	r0, #0
1005e61e:	d013      	beq.n	1005e648 <hci_le_scan_request_received_event_push+0x58>
1005e620:	4607      	mov	r7, r0
1005e622:	7246      	strb	r6, [r0, #9]
1005e624:	7205      	strb	r5, [r0, #8]
1005e626:	300a      	adds	r0, #10
1005e628:	2206      	movs	r2, #6
1005e62a:	4621      	mov	r1, r4
1005e62c:	f7f2 fd34 	bl	10051098 <BLEPLAT_MemCpy>
1005e630:	2013      	movs	r0, #19
1005e632:	71f8      	strb	r0, [r7, #7]
1005e634:	2009      	movs	r0, #9
1005e636:	71b8      	strb	r0, [r7, #6]
1005e638:	203e      	movs	r0, #62	@ 0x3e
1005e63a:	7178      	strb	r0, [r7, #5]
1005e63c:	2004      	movs	r0, #4
1005e63e:	7138      	strb	r0, [r7, #4]
1005e640:	20a1      	movs	r0, #161	@ 0xa1
1005e642:	4639      	mov	r1, r7
1005e644:	f7f5 fb11 	bl	10053c6a <aci_event_fifo_push>
1005e648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005e64a:	46c0      	nop			@ (mov r8, r8)

1005e64c <__arm_cp.49_0>:
1005e64c:	20002468 	.word	0x20002468

1005e650 <__arm_cp.49_1>:
1005e650:	20002418 	.word	0x20002418

1005e654 <EADV_start_request_radio_tasks>:
1005e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e656:	4604      	mov	r4, r0
1005e658:	20d8      	movs	r0, #216	@ 0xd8
1005e65a:	21ff      	movs	r1, #255	@ 0xff
1005e65c:	5421      	strb	r1, [r4, r0]
1005e65e:	20b8      	movs	r0, #184	@ 0xb8
1005e660:	5a25      	ldrh	r5, [r4, r0]
1005e662:	2701      	movs	r7, #1
1005e664:	402f      	ands	r7, r5
1005e666:	4626      	mov	r6, r4
1005e668:	36d8      	adds	r6, #216	@ 0xd8
1005e66a:	2f00      	cmp	r7, #0
1005e66c:	d004      	beq.n	1005e678 <EADV_start_request_radio_tasks+0x24>
1005e66e:	f7fb fc0f 	bl	10059e90 <llc_conn_reserve_conn_idx>
1005e672:	7030      	strb	r0, [r6, #0]
1005e674:	28ff      	cmp	r0, #255	@ 0xff
1005e676:	d022      	beq.n	1005e6be <EADV_start_request_radio_tasks+0x6a>
1005e678:	34b8      	adds	r4, #184	@ 0xb8
1005e67a:	f000 fdf1 	bl	1005f260 <LL_sched_reserve_taskslot>
1005e67e:	7620      	strb	r0, [r4, #24]
1005e680:	28ff      	cmp	r0, #255	@ 0xff
1005e682:	d013      	beq.n	1005e6ac <EADV_start_request_radio_tasks+0x58>
1005e684:	2100      	movs	r1, #0
1005e686:	06e8      	lsls	r0, r5, #27
1005e688:	d41a      	bmi.n	1005e6c0 <EADV_start_request_radio_tasks+0x6c>
1005e68a:	460d      	mov	r5, r1
1005e68c:	f000 fde8 	bl	1005f260 <LL_sched_reserve_taskslot>
1005e690:	4629      	mov	r1, r5
1005e692:	7660      	strb	r0, [r4, #25]
1005e694:	28ff      	cmp	r0, #255	@ 0xff
1005e696:	d113      	bne.n	1005e6c0 <EADV_start_request_radio_tasks+0x6c>
1005e698:	2f00      	cmp	r7, #0
1005e69a:	d002      	beq.n	1005e6a2 <EADV_start_request_radio_tasks+0x4e>
1005e69c:	7830      	ldrb	r0, [r6, #0]
1005e69e:	f7fb f822 	bl	100596e6 <llc_conn_release_conn_idx>
1005e6a2:	7e20      	ldrb	r0, [r4, #24]
1005e6a4:	f000 fdfe 	bl	1005f2a4 <LL_sched_release_taskslot>
1005e6a8:	2107      	movs	r1, #7
1005e6aa:	e009      	b.n	1005e6c0 <EADV_start_request_radio_tasks+0x6c>
1005e6ac:	2107      	movs	r1, #7
1005e6ae:	2f00      	cmp	r7, #0
1005e6b0:	d006      	beq.n	1005e6c0 <EADV_start_request_radio_tasks+0x6c>
1005e6b2:	7830      	ldrb	r0, [r6, #0]
1005e6b4:	460c      	mov	r4, r1
1005e6b6:	f7fb f816 	bl	100596e6 <llc_conn_release_conn_idx>
1005e6ba:	4621      	mov	r1, r4
1005e6bc:	e000      	b.n	1005e6c0 <EADV_start_request_radio_tasks+0x6c>
1005e6be:	210c      	movs	r1, #12
1005e6c0:	4608      	mov	r0, r1
1005e6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e6c4 <llc_get_channel_sel_algo2_enabled>:
1005e6c4:	b580      	push	{r7, lr}
1005e6c6:	f000 fae7 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005e6ca:	214e      	movs	r1, #78	@ 0x4e
1005e6cc:	5c40      	ldrb	r0, [r0, r1]
1005e6ce:	bd80      	pop	{r7, pc}

1005e6d0 <LL_force_chsel_1>:
1005e6d0:	b510      	push	{r4, lr}
1005e6d2:	4244      	negs	r4, r0
1005e6d4:	4144      	adcs	r4, r0
1005e6d6:	f000 fadf 	bl	1005ec98 <llc_get_linkms_cntxt_p>
1005e6da:	214e      	movs	r1, #78	@ 0x4e
1005e6dc:	5444      	strb	r4, [r0, r1]
1005e6de:	2000      	movs	r0, #0
1005e6e0:	bd10      	pop	{r4, pc}

1005e6e2 <llc_eadv_max_supported_data_check_ucfg_weak>:
1005e6e2:	2000      	movs	r0, #0
1005e6e4:	4770      	bx	lr

1005e6e6 <LL_eadv_start_extended_ucfg_weak>:
1005e6e6:	4770      	bx	lr

1005e6e8 <ext_adv_scan_enabled_ucfg_weak>:
1005e6e8:	2000      	movs	r0, #0
1005e6ea:	4770      	bx	lr

1005e6ec <BLE_STACK_EndOfRadioActivityCb>:
1005e6ec:	4770      	bx	lr
	...

1005e6f0 <BLE_STACK_RadioHandler>:
1005e6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e6f2:	b083      	sub	sp, #12
1005e6f4:	4604      	mov	r4, r0
1005e6f6:	484c      	ldr	r0, [pc, #304]	@ (1005e828 <__arm_cp.1_0>)
1005e6f8:	6004      	str	r4, [r0, #0]
1005e6fa:	4620      	mov	r0, r4
1005e6fc:	f7f3 fdb9 	bl	10052272 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1005e700:	4605      	mov	r5, r0
1005e702:	4620      	mov	r0, r4
1005e704:	f7f3 fd85 	bl	10052212 <BLEPLAT_CNTR_IntGetIntStatusDone>
1005e708:	4606      	mov	r6, r0
1005e70a:	4668      	mov	r0, sp
1005e70c:	f7f2 fdd9 	bl	100512c2 <BLEPLAT_GetAnchorPoint>
1005e710:	9900      	ldr	r1, [sp, #0]
1005e712:	1a09      	subs	r1, r1, r0
1005e714:	0b4b      	lsrs	r3, r1, #13
1005e716:	4945      	ldr	r1, [pc, #276]	@ (1005e82c <__arm_cp.1_1>)
1005e718:	680a      	ldr	r2, [r1, #0]
1005e71a:	4611      	mov	r1, r2
1005e71c:	31d8      	adds	r1, #216	@ 0xd8
1005e71e:	2b00      	cmp	r3, #0
1005e720:	d102      	bne.n	1005e728 <BLE_STACK_RadioHandler+0x38>
1005e722:	6010      	str	r0, [r2, #0]
1005e724:	2001      	movs	r0, #1
1005e726:	e000      	b.n	1005e72a <BLE_STACK_RadioHandler+0x3a>
1005e728:	2000      	movs	r0, #0
1005e72a:	7008      	strb	r0, [r1, #0]
1005e72c:	4840      	ldr	r0, [pc, #256]	@ (1005e830 <__arm_cp.1_2>)
1005e72e:	6800      	ldr	r0, [r0, #0]
1005e730:	7b44      	ldrb	r4, [r0, #13]
1005e732:	2100      	movs	r1, #0
1005e734:	2cff      	cmp	r4, #255	@ 0xff
1005e736:	d00a      	beq.n	1005e74e <BLE_STACK_RadioHandler+0x5e>
1005e738:	202c      	movs	r0, #44	@ 0x2c
1005e73a:	4360      	muls	r0, r4
1005e73c:	4a3d      	ldr	r2, [pc, #244]	@ (1005e834 <__arm_cp.1_3>)
1005e73e:	6812      	ldr	r2, [r2, #0]
1005e740:	1810      	adds	r0, r2, r0
1005e742:	7c82      	ldrb	r2, [r0, #18]
1005e744:	2a00      	cmp	r2, #0
1005e746:	d002      	beq.n	1005e74e <BLE_STACK_RadioHandler+0x5e>
1005e748:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1005e74a:	68c0      	ldr	r0, [r0, #12]
1005e74c:	e7ff      	b.n	1005e74e <BLE_STACK_RadioHandler+0x5e>
1005e74e:	2701      	movs	r7, #1
1005e750:	2e00      	cmp	r6, #0
1005e752:	d003      	beq.n	1005e75c <BLE_STACK_RadioHandler+0x6c>
1005e754:	2d00      	cmp	r5, #0
1005e756:	d101      	bne.n	1005e75c <BLE_STACK_RadioHandler+0x6c>
1005e758:	2900      	cmp	r1, #0
1005e75a:	e011      	b.n	1005e780 <BLE_STACK_RadioHandler+0x90>
1005e75c:	2d00      	cmp	r5, #0
1005e75e:	d015      	beq.n	1005e78c <BLE_STACK_RadioHandler+0x9c>
1005e760:	4a35      	ldr	r2, [pc, #212]	@ (1005e838 <__arm_cp.1_4>)
1005e762:	1a8b      	subs	r3, r1, r2
1005e764:	425a      	negs	r2, r3
1005e766:	415a      	adcs	r2, r3
1005e768:	4b34      	ldr	r3, [pc, #208]	@ (1005e83c <__arm_cp.1_5>)
1005e76a:	1acd      	subs	r5, r1, r3
1005e76c:	426b      	negs	r3, r5
1005e76e:	416b      	adcs	r3, r5
1005e770:	4d33      	ldr	r5, [pc, #204]	@ (1005e840 <__arm_cp.1_6>)
1005e772:	1b4e      	subs	r6, r1, r5
1005e774:	4275      	negs	r5, r6
1005e776:	4175      	adcs	r5, r6
1005e778:	2900      	cmp	r1, #0
1005e77a:	d007      	beq.n	1005e78c <BLE_STACK_RadioHandler+0x9c>
1005e77c:	4313      	orrs	r3, r2
1005e77e:	431d      	orrs	r5, r3
1005e780:	4e2a      	ldr	r6, [pc, #168]	@ (1005e82c <__arm_cp.1_1>)
1005e782:	4d29      	ldr	r5, [pc, #164]	@ (1005e828 <__arm_cp.1_0>)
1005e784:	d004      	beq.n	1005e790 <BLE_STACK_RadioHandler+0xa0>
1005e786:	4788      	blx	r1
1005e788:	2700      	movs	r7, #0
1005e78a:	e001      	b.n	1005e790 <BLE_STACK_RadioHandler+0xa0>
1005e78c:	4e27      	ldr	r6, [pc, #156]	@ (1005e82c <__arm_cp.1_1>)
1005e78e:	4d26      	ldr	r5, [pc, #152]	@ (1005e828 <__arm_cp.1_0>)
1005e790:	6828      	ldr	r0, [r5, #0]
1005e792:	f7f3 fd62 	bl	1005225a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1005e796:	2800      	cmp	r0, #0
1005e798:	d001      	beq.n	1005e79e <BLE_STACK_RadioHandler+0xae>
1005e79a:	2504      	movs	r5, #4
1005e79c:	e020      	b.n	1005e7e0 <BLE_STACK_RadioHandler+0xf0>
1005e79e:	6828      	ldr	r0, [r5, #0]
1005e7a0:	f7f3 fd16 	bl	100521d0 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1005e7a4:	2800      	cmp	r0, #0
1005e7a6:	d001      	beq.n	1005e7ac <BLE_STACK_RadioHandler+0xbc>
1005e7a8:	2501      	movs	r5, #1
1005e7aa:	e019      	b.n	1005e7e0 <BLE_STACK_RadioHandler+0xf0>
1005e7ac:	6828      	ldr	r0, [r5, #0]
1005e7ae:	f7f3 fd1b 	bl	100521e8 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1005e7b2:	2800      	cmp	r0, #0
1005e7b4:	d001      	beq.n	1005e7ba <BLE_STACK_RadioHandler+0xca>
1005e7b6:	2502      	movs	r5, #2
1005e7b8:	e012      	b.n	1005e7e0 <BLE_STACK_RadioHandler+0xf0>
1005e7ba:	6828      	ldr	r0, [r5, #0]
1005e7bc:	f7f3 fd65 	bl	1005228a <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1005e7c0:	4629      	mov	r1, r5
1005e7c2:	2505      	movs	r5, #5
1005e7c4:	2800      	cmp	r0, #0
1005e7c6:	d10b      	bne.n	1005e7e0 <BLE_STACK_RadioHandler+0xf0>
1005e7c8:	6808      	ldr	r0, [r1, #0]
1005e7ca:	f7f3 fd6a 	bl	100522a2 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1005e7ce:	2800      	cmp	r0, #0
1005e7d0:	d106      	bne.n	1005e7e0 <BLE_STACK_RadioHandler+0xf0>
1005e7d2:	4815      	ldr	r0, [pc, #84]	@ (1005e828 <__arm_cp.1_0>)
1005e7d4:	6800      	ldr	r0, [r0, #0]
1005e7d6:	f7f3 fced 	bl	100521b4 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1005e7da:	2800      	cmp	r0, #0
1005e7dc:	d020      	beq.n	1005e820 <BLE_STACK_RadioHandler+0x130>
1005e7de:	2500      	movs	r5, #0
1005e7e0:	2001      	movs	r0, #1
1005e7e2:	40a8      	lsls	r0, r5
1005e7e4:	4917      	ldr	r1, [pc, #92]	@ (1005e844 <__arm_cp.1_7>)
1005e7e6:	6809      	ldr	r1, [r1, #0]
1005e7e8:	680a      	ldr	r2, [r1, #0]
1005e7ea:	4302      	orrs	r2, r0
1005e7ec:	600a      	str	r2, [r1, #0]
1005e7ee:	2000      	movs	r0, #0
1005e7f0:	f002 fce8 	bl	100611c4 <tsk_notify_idx>
1005e7f4:	f7f1 fe69 	bl	100504ca <BLE_STACK_ProcessRequest>
1005e7f8:	f7f2 fd5a 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1005e7fc:	4620      	mov	r0, r4
1005e7fe:	f000 fb2b 	bl	1005ee58 <LL_sched_engine>
1005e802:	6834      	ldr	r4, [r6, #0]
1005e804:	7d60      	ldrb	r0, [r4, #21]
1005e806:	2801      	cmp	r0, #1
1005e808:	d108      	bne.n	1005e81c <BLE_STACK_RadioHandler+0x12c>
1005e80a:	7c21      	ldrb	r1, [r4, #16]
1005e80c:	200f      	movs	r0, #15
1005e80e:	4008      	ands	r0, r1
1005e810:	68e2      	ldr	r2, [r4, #12]
1005e812:	0909      	lsrs	r1, r1, #4
1005e814:	f7ff ff6a 	bl	1005e6ec <BLE_STACK_EndOfRadioActivityCb>
1005e818:	2000      	movs	r0, #0
1005e81a:	7560      	strb	r0, [r4, #21]
1005e81c:	b003      	add	sp, #12
1005e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e820:	2f00      	cmp	r7, #0
1005e822:	d1e9      	bne.n	1005e7f8 <BLE_STACK_RadioHandler+0x108>
1005e824:	e7ed      	b.n	1005e802 <BLE_STACK_RadioHandler+0x112>
1005e826:	46c0      	nop			@ (mov r8, r8)

1005e828 <__arm_cp.1_0>:
1005e828:	20002464 	.word	0x20002464

1005e82c <__arm_cp.1_1>:
1005e82c:	20002468 	.word	0x20002468

1005e830 <__arm_cp.1_2>:
1005e830:	2000246c 	.word	0x2000246c

1005e834 <__arm_cp.1_3>:
1005e834:	20002470 	.word	0x20002470

1005e838 <__arm_cp.1_4>:
1005e838:	10064b59 	.word	0x10064b59

1005e83c <__arm_cp.1_5>:
1005e83c:	10064b55 	.word	0x10064b55

1005e840 <__arm_cp.1_6>:
1005e840:	10064b5d 	.word	0x10064b5d

1005e844 <__arm_cp.1_7>:
1005e844:	20002418 	.word	0x20002418

1005e848 <LL_link_calculate_window_widening_from_ppm>:
1005e848:	22ff      	movs	r2, #255	@ 0xff
1005e84a:	320e      	adds	r2, #14
1005e84c:	4342      	muls	r2, r0
1005e84e:	0a10      	lsrs	r0, r2, #8
1005e850:	0889      	lsrs	r1, r1, #2
1005e852:	4341      	muls	r1, r0
1005e854:	0c88      	lsrs	r0, r1, #18
1005e856:	1c40      	adds	r0, r0, #1
1005e858:	4770      	bx	lr
	...

1005e85c <LL_link_calc_packetlength>:
1005e85c:	2804      	cmp	r0, #4
1005e85e:	d005      	beq.n	1005e86c <LL_link_calc_packetlength+0x10>
1005e860:	2801      	cmp	r0, #1
1005e862:	d106      	bne.n	1005e872 <LL_link_calc_packetlength+0x16>
1005e864:	20ff      	movs	r0, #255	@ 0xff
1005e866:	30a4      	adds	r0, #164	@ 0xa4
1005e868:	4a07      	ldr	r2, [pc, #28]	@ (1005e888 <__arm_cp.7_2>)
1005e86a:	e004      	b.n	1005e876 <LL_link_calc_packetlength+0x1a>
1005e86c:	4a04      	ldr	r2, [pc, #16]	@ (1005e880 <__arm_cp.7_0>)
1005e86e:	4805      	ldr	r0, [pc, #20]	@ (1005e884 <__arm_cp.7_1>)
1005e870:	e001      	b.n	1005e876 <LL_link_calc_packetlength+0x1a>
1005e872:	4a06      	ldr	r2, [pc, #24]	@ (1005e88c <__arm_cp.7_3>)
1005e874:	4806      	ldr	r0, [pc, #24]	@ (1005e890 <__arm_cp.7_4>)
1005e876:	4341      	muls	r1, r0
1005e878:	1888      	adds	r0, r1, r2
1005e87a:	0a00      	lsrs	r0, r0, #8
1005e87c:	4770      	bx	lr
1005e87e:	46c0      	nop			@ (mov r8, r8)

1005e880 <__arm_cp.7_0>:
1005e880:	000126e9 	.word	0x000126e9

1005e884 <__arm_cp.7_1>:
1005e884:	00001a38 	.word	0x00001a38

1005e888 <__arm_cp.7_2>:
1005e888:	00001206 	.word	0x00001206

1005e88c <__arm_cp.7_3>:
1005e88c:	000020c6 	.word	0x000020c6

1005e890 <__arm_cp.7_4>:
1005e890:	00000347 	.word	0x00000347

1005e894 <LL_link_get_own_sca_ppm>:
1005e894:	4801      	ldr	r0, [pc, #4]	@ (1005e89c <__arm_cp.8_0>)
1005e896:	6800      	ldr	r0, [r0, #0]
1005e898:	8b00      	ldrh	r0, [r0, #24]
1005e89a:	4770      	bx	lr

1005e89c <__arm_cp.8_0>:
1005e89c:	20002468 	.word	0x20002468

1005e8a0 <LL_link_is_arg_in_range>:
1005e8a0:	4290      	cmp	r0, r2
1005e8a2:	d801      	bhi.n	1005e8a8 <LL_link_is_arg_in_range+0x8>
1005e8a4:	4288      	cmp	r0, r1
1005e8a6:	d201      	bcs.n	1005e8ac <LL_link_is_arg_in_range+0xc>
1005e8a8:	2012      	movs	r0, #18
1005e8aa:	4770      	bx	lr
1005e8ac:	2000      	movs	r0, #0
1005e8ae:	4770      	bx	lr

1005e8b0 <Data_Len_Update_Offline_Processing_ucfg_weak>:
1005e8b0:	2000      	movs	r0, #0
1005e8b2:	4770      	bx	lr

1005e8b4 <ll_write_supported_data_ucfg_weak>:
1005e8b4:	2012      	movs	r0, #18
1005e8b6:	4770      	bx	lr

1005e8b8 <llc_timers_callback_wrapper>:
1005e8b8:	b580      	push	{r7, lr}
1005e8ba:	6940      	ldr	r0, [r0, #20]
1005e8bc:	4901      	ldr	r1, [pc, #4]	@ (1005e8c4 <__arm_cp.4_0>)
1005e8be:	f002 fdb8 	bl	10061432 <cst_sharedCallback>
1005e8c2:	bd80      	pop	{r7, pc}

1005e8c4 <__arm_cp.4_0>:
1005e8c4:	1005e8c9 	.word	0x1005e8c9

1005e8c8 <llc_timers_callback>:
1005e8c8:	b580      	push	{r7, lr}
1005e8ca:	4903      	ldr	r1, [pc, #12]	@ (1005e8d8 <__arm_cp.5_0>)
1005e8cc:	7ac9      	ldrb	r1, [r1, #11]
1005e8ce:	4281      	cmp	r1, r0
1005e8d0:	d901      	bls.n	1005e8d6 <llc_timers_callback+0xe>
1005e8d2:	f7fd ff99 	bl	1005c808 <LLC_authenticated_payload_timeout_cb>
1005e8d6:	bd80      	pop	{r7, pc}

1005e8d8 <__arm_cp.5_0>:
1005e8d8:	2000247c 	.word	0x2000247c

1005e8dc <LL_init_ucfg_weak>:
1005e8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e8de:	b091      	sub	sp, #68	@ 0x44
1005e8e0:	9306      	str	r3, [sp, #24]
1005e8e2:	4614      	mov	r4, r2
1005e8e4:	910d      	str	r1, [sp, #52]	@ 0x34
1005e8e6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005e8e8:	48b8      	ldr	r0, [pc, #736]	@ (1005ebcc <__arm_cp.6_0>)
1005e8ea:	7ac1      	ldrb	r1, [r0, #11]
1005e8ec:	910c      	str	r1, [sp, #48]	@ 0x30
1005e8ee:	7f01      	ldrb	r1, [r0, #28]
1005e8f0:	9109      	str	r1, [sp, #36]	@ 0x24
1005e8f2:	7ec1      	ldrb	r1, [r0, #27]
1005e8f4:	910a      	str	r1, [sp, #40]	@ 0x28
1005e8f6:	7e81      	ldrb	r1, [r0, #26]
1005e8f8:	9108      	str	r1, [sp, #32]
1005e8fa:	7fc7      	ldrb	r7, [r0, #31]
1005e8fc:	2501      	movs	r5, #1
1005e8fe:	21e8      	movs	r1, #232	@ 0xe8
1005e900:	4628      	mov	r0, r5
1005e902:	f000 fe89 	bl	1005f618 <csmem_mem_0_assign>
1005e906:	4eb2      	ldr	r6, [pc, #712]	@ (1005ebd0 <__arm_cp.6_1>)
1005e908:	6030      	str	r0, [r6, #0]
1005e90a:	2158      	movs	r1, #88	@ 0x58
1005e90c:	4628      	mov	r0, r5
1005e90e:	f000 fe83 	bl	1005f618 <csmem_mem_0_assign>
1005e912:	6831      	ldr	r1, [r6, #0]
1005e914:	229c      	movs	r2, #156	@ 0x9c
1005e916:	9207      	str	r2, [sp, #28]
1005e918:	5088      	str	r0, [r1, r2]
1005e91a:	4638      	mov	r0, r7
1005e91c:	f006 f8b6 	bl	10064a8c <llc_wl_mem_allocate>
1005e920:	2107      	movs	r1, #7
1005e922:	4039      	ands	r1, r7
1005e924:	9806      	ldr	r0, [sp, #24]
1005e926:	f006 f8c5 	bl	10064ab4 <llc_priv_mem_allocate>
1005e92a:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005e92c:	9000      	str	r0, [sp, #0]
1005e92e:	ab19      	add	r3, sp, #100	@ 0x64
1005e930:	cb0e      	ldmia	r3, {r1, r2, r3}
1005e932:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e934:	9106      	str	r1, [sp, #24]
1005e936:	930d      	str	r3, [sp, #52]	@ 0x34
1005e938:	f7fa f958 	bl	10058bec <llc_conn_mem_allocate>
1005e93c:	2c01      	cmp	r4, #1
1005e93e:	d000      	beq.n	1005e942 <LL_init_ucfg_weak+0x66>
1005e940:	9508      	str	r5, [sp, #32]
1005e942:	2000      	movs	r0, #0
1005e944:	2c01      	cmp	r4, #1
1005e946:	d000      	beq.n	1005e94a <LL_init_ucfg_weak+0x6e>
1005e948:	900a      	str	r0, [sp, #40]	@ 0x28
1005e94a:	2c01      	cmp	r4, #1
1005e94c:	4fa0      	ldr	r7, [pc, #640]	@ (1005ebd0 <__arm_cp.6_1>)
1005e94e:	d000      	beq.n	1005e952 <LL_init_ucfg_weak+0x76>
1005e950:	9009      	str	r0, [sp, #36]	@ 0x24
1005e952:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1005e954:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e956:	2801      	cmp	r0, #1
1005e958:	9205      	str	r2, [sp, #20]
1005e95a:	d118      	bne.n	1005e98e <LL_init_ucfg_weak+0xb2>
1005e95c:	2029      	movs	r0, #41	@ 0x29
1005e95e:	499b      	ldr	r1, [pc, #620]	@ (1005ebcc <__arm_cp.6_0>)
1005e960:	5c08      	ldrb	r0, [r1, r0]
1005e962:	1e41      	subs	r1, r0, #1
1005e964:	4188      	sbcs	r0, r1
1005e966:	4310      	orrs	r0, r2
1005e968:	d001      	beq.n	1005e96e <LL_init_ucfg_weak+0x92>
1005e96a:	2530      	movs	r5, #48	@ 0x30
1005e96c:	e000      	b.n	1005e970 <LL_init_ucfg_weak+0x94>
1005e96e:	2520      	movs	r5, #32
1005e970:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005e972:	4630      	mov	r0, r6
1005e974:	4629      	mov	r1, r5
1005e976:	f000 fe4f 	bl	1005f618 <csmem_mem_0_assign>
1005e97a:	6839      	ldr	r1, [r7, #0]
1005e97c:	2294      	movs	r2, #148	@ 0x94
1005e97e:	5088      	str	r0, [r1, r2]
1005e980:	4630      	mov	r0, r6
1005e982:	4629      	mov	r1, r5
1005e984:	f000 fe48 	bl	1005f618 <csmem_mem_0_assign>
1005e988:	6839      	ldr	r1, [r7, #0]
1005e98a:	2298      	movs	r2, #152	@ 0x98
1005e98c:	5088      	str	r0, [r1, r2]
1005e98e:	262c      	movs	r6, #44	@ 0x2c
1005e990:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005e992:	4631      	mov	r1, r6
1005e994:	f000 fe40 	bl	1005f618 <csmem_mem_0_assign>
1005e998:	6839      	ldr	r1, [r7, #0]
1005e99a:	22a4      	movs	r2, #164	@ 0xa4
1005e99c:	5088      	str	r0, [r1, r2]
1005e99e:	2041      	movs	r0, #65	@ 0x41
1005e9a0:	0082      	lsls	r2, r0, #2
1005e9a2:	2c01      	cmp	r4, #1
1005e9a4:	9402      	str	r4, [sp, #8]
1005e9a6:	d10a      	bne.n	1005e9be <LL_init_ucfg_weak+0xe2>
1005e9a8:	4611      	mov	r1, r2
1005e9aa:	3120      	adds	r1, #32
1005e9ac:	2001      	movs	r0, #1
1005e9ae:	4614      	mov	r4, r2
1005e9b0:	f000 fe32 	bl	1005f618 <csmem_mem_0_assign>
1005e9b4:	6839      	ldr	r1, [r7, #0]
1005e9b6:	228c      	movs	r2, #140	@ 0x8c
1005e9b8:	5088      	str	r0, [r1, r2]
1005e9ba:	4621      	mov	r1, r4
1005e9bc:	e038      	b.n	1005ea30 <LL_init_ucfg_weak+0x154>
1005e9be:	2125      	movs	r1, #37	@ 0x25
1005e9c0:	4882      	ldr	r0, [pc, #520]	@ (1005ebcc <__arm_cp.6_0>)
1005e9c2:	910c      	str	r1, [sp, #48]	@ 0x30
1005e9c4:	5c41      	ldrb	r1, [r0, r1]
1005e9c6:	4610      	mov	r0, r2
1005e9c8:	3020      	adds	r0, #32
1005e9ca:	2900      	cmp	r1, #0
1005e9cc:	9201      	str	r2, [sp, #4]
1005e9ce:	d001      	beq.n	1005e9d4 <LL_init_ucfg_weak+0xf8>
1005e9d0:	4601      	mov	r1, r0
1005e9d2:	e000      	b.n	1005e9d6 <LL_init_ucfg_weak+0xfa>
1005e9d4:	2144      	movs	r1, #68	@ 0x44
1005e9d6:	2726      	movs	r7, #38	@ 0x26
1005e9d8:	4a7c      	ldr	r2, [pc, #496]	@ (1005ebcc <__arm_cp.6_0>)
1005e9da:	5dd2      	ldrb	r2, [r2, r7]
1005e9dc:	2a00      	cmp	r2, #0
1005e9de:	d000      	beq.n	1005e9e2 <LL_init_ucfg_weak+0x106>
1005e9e0:	4601      	mov	r1, r0
1005e9e2:	2529      	movs	r5, #41	@ 0x29
1005e9e4:	4a79      	ldr	r2, [pc, #484]	@ (1005ebcc <__arm_cp.6_0>)
1005e9e6:	5d52      	ldrb	r2, [r2, r5]
1005e9e8:	2a00      	cmp	r2, #0
1005e9ea:	d000      	beq.n	1005e9ee <LL_init_ucfg_weak+0x112>
1005e9ec:	4601      	mov	r1, r0
1005e9ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005e9f0:	2a01      	cmp	r2, #1
1005e9f2:	d100      	bne.n	1005e9f6 <LL_init_ucfg_weak+0x11a>
1005e9f4:	4601      	mov	r1, r0
1005e9f6:	2001      	movs	r0, #1
1005e9f8:	f000 fe0e 	bl	1005f618 <csmem_mem_0_assign>
1005e9fc:	4974      	ldr	r1, [pc, #464]	@ (1005ebd0 <__arm_cp.6_1>)
1005e9fe:	6809      	ldr	r1, [r1, #0]
1005ea00:	228c      	movs	r2, #140	@ 0x8c
1005ea02:	5088      	str	r0, [r1, r2]
1005ea04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ea06:	2801      	cmp	r0, #1
1005ea08:	9c01      	ldr	r4, [sp, #4]
1005ea0a:	4621      	mov	r1, r4
1005ea0c:	d010      	beq.n	1005ea30 <LL_init_ucfg_weak+0x154>
1005ea0e:	486f      	ldr	r0, [pc, #444]	@ (1005ebcc <__arm_cp.6_0>)
1005ea10:	5d40      	ldrb	r0, [r0, r5]
1005ea12:	2800      	cmp	r0, #0
1005ea14:	4621      	mov	r1, r4
1005ea16:	d10b      	bne.n	1005ea30 <LL_init_ucfg_weak+0x154>
1005ea18:	486c      	ldr	r0, [pc, #432]	@ (1005ebcc <__arm_cp.6_0>)
1005ea1a:	5dc0      	ldrb	r0, [r0, r7]
1005ea1c:	2800      	cmp	r0, #0
1005ea1e:	4621      	mov	r1, r4
1005ea20:	d106      	bne.n	1005ea30 <LL_init_ucfg_weak+0x154>
1005ea22:	486a      	ldr	r0, [pc, #424]	@ (1005ebcc <__arm_cp.6_0>)
1005ea24:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005ea26:	5c40      	ldrb	r0, [r0, r1]
1005ea28:	2800      	cmp	r0, #0
1005ea2a:	d000      	beq.n	1005ea2e <LL_init_ucfg_weak+0x152>
1005ea2c:	4626      	mov	r6, r4
1005ea2e:	4631      	mov	r1, r6
1005ea30:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005ea32:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ea34:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005ea36:	9003      	str	r0, [sp, #12]
1005ea38:	2601      	movs	r6, #1
1005ea3a:	4d66      	ldr	r5, [pc, #408]	@ (1005ebd4 <__arm_cp.6_2>)
1005ea3c:	4630      	mov	r0, r6
1005ea3e:	47a8      	blx	r5
1005ea40:	4f63      	ldr	r7, [pc, #396]	@ (1005ebd0 <__arm_cp.6_1>)
1005ea42:	6839      	ldr	r1, [r7, #0]
1005ea44:	2290      	movs	r2, #144	@ 0x90
1005ea46:	5088      	str	r0, [r1, r2]
1005ea48:	2110      	movs	r1, #16
1005ea4a:	4630      	mov	r0, r6
1005ea4c:	47a8      	blx	r5
1005ea4e:	6839      	ldr	r1, [r7, #0]
1005ea50:	22a0      	movs	r2, #160	@ 0xa0
1005ea52:	9204      	str	r2, [sp, #16]
1005ea54:	5088      	str	r0, [r1, r2]
1005ea56:	2104      	movs	r1, #4
1005ea58:	4630      	mov	r0, r6
1005ea5a:	47a8      	blx	r5
1005ea5c:	6839      	ldr	r1, [r7, #0]
1005ea5e:	22a8      	movs	r2, #168	@ 0xa8
1005ea60:	5088      	str	r0, [r1, r2]
1005ea62:	2134      	movs	r1, #52	@ 0x34
1005ea64:	960c      	str	r6, [sp, #48]	@ 0x30
1005ea66:	4630      	mov	r0, r6
1005ea68:	47a8      	blx	r5
1005ea6a:	6839      	ldr	r1, [r7, #0]
1005ea6c:	22ac      	movs	r2, #172	@ 0xac
1005ea6e:	5088      	str	r0, [r1, r2]
1005ea70:	9808      	ldr	r0, [sp, #32]
1005ea72:	b2c7      	uxtb	r7, r0
1005ea74:	1f21      	subs	r1, r4, #4
1005ea76:	4638      	mov	r0, r7
1005ea78:	47a8      	blx	r5
1005ea7a:	4605      	mov	r5, r0
1005ea7c:	9c02      	ldr	r4, [sp, #8]
1005ea7e:	2c01      	cmp	r4, #1
1005ea80:	d105      	bne.n	1005ea8e <LL_init_ucfg_weak+0x1b2>
1005ea82:	215c      	movs	r1, #92	@ 0x5c
1005ea84:	4638      	mov	r0, r7
1005ea86:	f000 fdc7 	bl	1005f618 <csmem_mem_0_assign>
1005ea8a:	4602      	mov	r2, r0
1005ea8c:	e000      	b.n	1005ea90 <LL_init_ucfg_weak+0x1b4>
1005ea8e:	2200      	movs	r2, #0
1005ea90:	4638      	mov	r0, r7
1005ea92:	4629      	mov	r1, r5
1005ea94:	f7fe fec6 	bl	1005d824 <EADV_init>
1005ea98:	ab10      	add	r3, sp, #64	@ 0x40
1005ea9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ea9c:	70d8      	strb	r0, [r3, #3]
1005ea9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005eaa0:	7098      	strb	r0, [r3, #2]
1005eaa2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005eaa4:	705e      	strb	r6, [r3, #1]
1005eaa6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005eaa8:	7018      	strb	r0, [r3, #0]
1005eaaa:	4620      	mov	r0, r4
1005eaac:	9d05      	ldr	r5, [sp, #20]
1005eaae:	4629      	mov	r1, r5
1005eab0:	463a      	mov	r2, r7
1005eab2:	f005 fffb 	bl	10064aac <llc_padv_mem_allocate_ucfg_weak>
1005eab6:	9f03      	ldr	r7, [sp, #12]
1005eab8:	4638      	mov	r0, r7
1005eaba:	4621      	mov	r1, r4
1005eabc:	f7fb fd1d 	bl	1005a4fa <llc_scan_mem_allocate_ucfg_weak>
1005eac0:	4638      	mov	r0, r7
1005eac2:	4621      	mov	r1, r4
1005eac4:	462a      	mov	r2, r5
1005eac6:	f7fb fcf2 	bl	1005a4ae <llc_pscan_mem_allocate_ucfg_weak>
1005eaca:	4638      	mov	r0, r7
1005eacc:	4621      	mov	r1, r4
1005eace:	462a      	mov	r2, r5
1005ead0:	4633      	mov	r3, r6
1005ead2:	f005 ffed 	bl	10064ab0 <llc_past_mem_allocate_ucfg_weak>
1005ead6:	9600      	str	r6, [sp, #0]
1005ead8:	463e      	mov	r6, r7
1005eada:	4638      	mov	r0, r7
1005eadc:	4621      	mov	r1, r4
1005eade:	462a      	mov	r2, r5
1005eae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005eae2:	f7fb fce7 	bl	1005a4b4 <llc_pscan_wr_mem_allocate_ucfg_weak>
1005eae6:	f7fb fcc0 	bl	1005a46a <llc_iso_cmn_mem_alloc_ucfg_weak>
1005eaea:	2c01      	cmp	r4, #1
1005eaec:	d107      	bne.n	1005eafe <LL_init_ucfg_weak+0x222>
1005eaee:	2d01      	cmp	r5, #1
1005eaf0:	d105      	bne.n	1005eafe <LL_init_ucfg_weak+0x222>
1005eaf2:	f005 f92b 	bl	10063d4c <llc_big_brc_mem_alloc_ucfg_weak>
1005eaf6:	2e01      	cmp	r6, #1
1005eaf8:	d101      	bne.n	1005eafe <LL_init_ucfg_weak+0x222>
1005eafa:	f005 f928 	bl	10063d4e <llc_big_sync_mem_alloc_ucfg_weak>
1005eafe:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005eb00:	2801      	cmp	r0, #1
1005eb02:	4f33      	ldr	r7, [pc, #204]	@ (1005ebd0 <__arm_cp.6_1>)
1005eb04:	d101      	bne.n	1005eb0a <LL_init_ucfg_weak+0x22e>
1005eb06:	f005 f923 	bl	10063d50 <llc_cig_cmn_mem_alloc_ucfg_weak>
1005eb0a:	f7fb fca7 	bl	1005a45c <llc_isoal_mem_alloc_ucfg_weak>
1005eb0e:	9806      	ldr	r0, [sp, #24]
1005eb10:	4631      	mov	r1, r6
1005eb12:	4622      	mov	r2, r4
1005eb14:	462b      	mov	r3, r5
1005eb16:	f7fe fd46 	bl	1005d5a6 <llc_cte_mem_allocate_ucfg_weak>
1005eb1a:	4e2c      	ldr	r6, [pc, #176]	@ (1005ebcc <__arm_cp.6_0>)
1005eb1c:	7af0      	ldrb	r0, [r6, #11]
1005eb1e:	1c41      	adds	r1, r0, #1
1005eb20:	4d2d      	ldr	r5, [pc, #180]	@ (1005ebd8 <__arm_cp.6_3>)
1005eb22:	4628      	mov	r0, r5
1005eb24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005eb26:	f000 fd65 	bl	1005f5f4 <csmem_mem_assign>
1005eb2a:	6839      	ldr	r1, [r7, #0]
1005eb2c:	22d0      	movs	r2, #208	@ 0xd0
1005eb2e:	5088      	str	r0, [r1, r2]
1005eb30:	7af1      	ldrb	r1, [r6, #11]
1005eb32:	2202      	movs	r2, #2
1005eb34:	4628      	mov	r0, r5
1005eb36:	f000 fd5d 	bl	1005f5f4 <csmem_mem_assign>
1005eb3a:	6839      	ldr	r1, [r7, #0]
1005eb3c:	460a      	mov	r2, r1
1005eb3e:	32a0      	adds	r2, #160	@ 0xa0
1005eb40:	6350      	str	r0, [r2, #52]	@ 0x34
1005eb42:	9804      	ldr	r0, [sp, #16]
1005eb44:	5808      	ldr	r0, [r1, r0]
1005eb46:	6078      	str	r0, [r7, #4]
1005eb48:	6850      	ldr	r0, [r2, #4]
1005eb4a:	60b8      	str	r0, [r7, #8]
1005eb4c:	4620      	mov	r0, r4
1005eb4e:	f7fb fcd3 	bl	1005a4f8 <llc_scan_init_ucfg_weak>
1005eb52:	f7fb fcab 	bl	1005a4ac <llc_pscan_init_ucfg_weak>
1005eb56:	f000 f8e3 	bl	1005ed20 <LL_sched_init>
1005eb5a:	f7fe fd29 	bl	1005d5b0 <LL_dtm_init>
1005eb5e:	f005 ffa6 	bl	10064aae <llc_padv_init_ucfg_weak>
1005eb62:	f7fe fd1f 	bl	1005d5a4 <llc_cte_init_ucfg_weak>
1005eb66:	f7f9 f8e5 	bl	10057d34 <HCI_Init>
1005eb6a:	f7f2 fb41 	bl	100511f0 <BLEPLAT_GetDefaultPALevel>
1005eb6e:	6839      	ldr	r1, [r7, #0]
1005eb70:	2400      	movs	r4, #0
1005eb72:	728c      	strb	r4, [r1, #10]
1005eb74:	7248      	strb	r0, [r1, #9]
1005eb76:	4620      	mov	r0, r4
1005eb78:	f7f2 fb42 	bl	10051200 <BLEPLAT_SetHighPower>
1005eb7c:	f7f4 fcbe 	bl	100534fc <ble_HAL_Init>
1005eb80:	6838      	ldr	r0, [r7, #0]
1005eb82:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1005eb84:	f7fd ff03 	bl	1005c98e <LLC_pcl_hal_cntxt_init_ucfg_weak>
1005eb88:	6838      	ldr	r0, [r7, #0]
1005eb8a:	9d07      	ldr	r5, [sp, #28]
1005eb8c:	5940      	ldr	r0, [r0, r5]
1005eb8e:	300c      	adds	r0, #12
1005eb90:	f002 fe2b 	bl	100617ea <addr8_list_clear>
1005eb94:	463e      	mov	r6, r7
1005eb96:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1005eb98:	4638      	mov	r0, r7
1005eb9a:	f7fb fc6d 	bl	1005a478 <llc_priv_init_ucfg_weak>
1005eb9e:	6830      	ldr	r0, [r6, #0]
1005eba0:	5941      	ldr	r1, [r0, r5]
1005eba2:	2240      	movs	r2, #64	@ 0x40
1005eba4:	548c      	strb	r4, [r1, r2]
1005eba6:	4a09      	ldr	r2, [pc, #36]	@ (1005ebcc <__arm_cp.6_0>)
1005eba8:	8b12      	ldrh	r2, [r2, #24]
1005ebaa:	8302      	strh	r2, [r0, #24]
1005ebac:	201f      	movs	r0, #31
1005ebae:	900f      	str	r0, [sp, #60]	@ 0x3c
1005ebb0:	43e0      	mvns	r0, r4
1005ebb2:	900e      	str	r0, [sp, #56]	@ 0x38
1005ebb4:	3148      	adds	r1, #72	@ 0x48
1005ebb6:	a80e      	add	r0, sp, #56	@ 0x38
1005ebb8:	2205      	movs	r2, #5
1005ebba:	f002 fc8b 	bl	100614d4 <char_copy>
1005ebbe:	6830      	ldr	r0, [r6, #0]
1005ebc0:	5940      	ldr	r0, [r0, r5]
1005ebc2:	02f9      	lsls	r1, r7, #11
1005ebc4:	2254      	movs	r2, #84	@ 0x54
1005ebc6:	5281      	strh	r1, [r0, r2]
1005ebc8:	b011      	add	sp, #68	@ 0x44
1005ebca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ebcc <__arm_cp.6_0>:
1005ebcc:	2000247c 	.word	0x2000247c

1005ebd0 <__arm_cp.6_1>:
1005ebd0:	20002468 	.word	0x20002468

1005ebd4 <__arm_cp.6_2>:
1005ebd4:	1005f619 	.word	0x1005f619

1005ebd8 <__arm_cp.6_3>:
1005ebd8:	20002478 	.word	0x20002478

1005ebdc <LL_init>:
1005ebdc:	b5b0      	push	{r4, r5, r7, lr}
1005ebde:	b088      	sub	sp, #32
1005ebe0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
1005ebe2:	9406      	str	r4, [sp, #24]
1005ebe4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005ebe6:	9405      	str	r4, [sp, #20]
1005ebe8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
1005ebea:	9504      	str	r5, [sp, #16]
1005ebec:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005ebee:	9503      	str	r5, [sp, #12]
1005ebf0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005ebf2:	9502      	str	r5, [sp, #8]
1005ebf4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005ebf6:	9501      	str	r5, [sp, #4]
1005ebf8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005ebfa:	9500      	str	r5, [sp, #0]
1005ebfc:	f7ff fe6e 	bl	1005e8dc <LL_init_ucfg_weak>
1005ec00:	2c01      	cmp	r4, #1
1005ec02:	d112      	bne.n	1005ec2a <LL_init+0x4e>
1005ec04:	f7fb fc54 	bl	1005a4b0 <llc_pscan_wr_init_ucfg_weak>
1005ec08:	f7f9 ff00 	bl	10058a0c <llc_conn_init>
1005ec0c:	f7ee fddb 	bl	1004d7c6 <LL_cpe_init_ucfg>
1005ec10:	4807      	ldr	r0, [pc, #28]	@ (1005ec30 <__arm_cp.7_0>)
1005ec12:	7ac1      	ldrb	r1, [r0, #11]
1005ec14:	4807      	ldr	r0, [pc, #28]	@ (1005ec34 <__arm_cp.7_1>)
1005ec16:	6800      	ldr	r0, [r0, #0]
1005ec18:	30b0      	adds	r0, #176	@ 0xb0
1005ec1a:	4a07      	ldr	r2, [pc, #28]	@ (1005ec38 <__arm_cp.7_2>)
1005ec1c:	2305      	movs	r3, #5
1005ec1e:	f002 fb2f 	bl	10061280 <CST_init>
1005ec22:	f7f4 fcd9 	bl	100535d8 <Acl_Init>
1005ec26:	f7fc fd58 	bl	1005b6da <LLC_chc_ll_cntxt_init_ucfg_weak>
1005ec2a:	b008      	add	sp, #32
1005ec2c:	bdb0      	pop	{r4, r5, r7, pc}
1005ec2e:	46c0      	nop			@ (mov r8, r8)

1005ec30 <__arm_cp.7_0>:
1005ec30:	2000247c 	.word	0x2000247c

1005ec34 <__arm_cp.7_1>:
1005ec34:	20002468 	.word	0x20002468

1005ec38 <__arm_cp.7_2>:
1005ec38:	1005e8b9 	.word	0x1005e8b9

1005ec3c <Is_Address_Initialized>:
1005ec3c:	2100      	movs	r1, #0
1005ec3e:	460a      	mov	r2, r1
1005ec40:	2906      	cmp	r1, #6
1005ec42:	d005      	beq.n	1005ec50 <Is_Address_Initialized+0x14>
1005ec44:	5c43      	ldrb	r3, [r0, r1]
1005ec46:	2b00      	cmp	r3, #0
1005ec48:	d000      	beq.n	1005ec4c <Is_Address_Initialized+0x10>
1005ec4a:	2201      	movs	r2, #1
1005ec4c:	1c49      	adds	r1, r1, #1
1005ec4e:	e7f7      	b.n	1005ec40 <Is_Address_Initialized+0x4>
1005ec50:	b2d0      	uxtb	r0, r2
1005ec52:	4770      	bx	lr

1005ec54 <get_rf_rx_path_compensation_db>:
1005ec54:	4804      	ldr	r0, [pc, #16]	@ (1005ec68 <__arm_cp.10_0>)
1005ec56:	6800      	ldr	r0, [r0, #0]
1005ec58:	215e      	movs	r1, #94	@ 0x5e
1005ec5a:	5e40      	ldrsh	r0, [r0, r1]
1005ec5c:	210d      	movs	r1, #13
1005ec5e:	4341      	muls	r1, r0
1005ec60:	3140      	adds	r1, #64	@ 0x40
1005ec62:	11c8      	asrs	r0, r1, #7
1005ec64:	4770      	bx	lr
1005ec66:	46c0      	nop			@ (mov r8, r8)

1005ec68 <__arm_cp.10_0>:
1005ec68:	20002468 	.word	0x20002468

1005ec6c <LL_get_tx_common_buffer_p>:
1005ec6c:	4802      	ldr	r0, [pc, #8]	@ (1005ec78 <__arm_cp.11_0>)
1005ec6e:	6800      	ldr	r0, [r0, #0]
1005ec70:	218c      	movs	r1, #140	@ 0x8c
1005ec72:	5840      	ldr	r0, [r0, r1]
1005ec74:	4770      	bx	lr
1005ec76:	46c0      	nop			@ (mov r8, r8)

1005ec78 <__arm_cp.11_0>:
1005ec78:	20002468 	.word	0x20002468

1005ec7c <LL_get_rx_common_buffer_p>:
1005ec7c:	4802      	ldr	r0, [pc, #8]	@ (1005ec88 <__arm_cp.12_0>)
1005ec7e:	6800      	ldr	r0, [r0, #0]
1005ec80:	2190      	movs	r1, #144	@ 0x90
1005ec82:	5840      	ldr	r0, [r0, r1]
1005ec84:	4770      	bx	lr
1005ec86:	46c0      	nop			@ (mov r8, r8)

1005ec88 <__arm_cp.12_0>:
1005ec88:	20002468 	.word	0x20002468

1005ec8c <LL_get_control_pdu_size>:
1005ec8c:	2800      	cmp	r0, #0
1005ec8e:	d001      	beq.n	1005ec94 <LL_get_control_pdu_size+0x8>
1005ec90:	2030      	movs	r0, #48	@ 0x30
1005ec92:	4770      	bx	lr
1005ec94:	2020      	movs	r0, #32
1005ec96:	4770      	bx	lr

1005ec98 <llc_get_linkms_cntxt_p>:
1005ec98:	4802      	ldr	r0, [pc, #8]	@ (1005eca4 <__arm_cp.15_0>)
1005ec9a:	6800      	ldr	r0, [r0, #0]
1005ec9c:	219c      	movs	r1, #156	@ 0x9c
1005ec9e:	5840      	ldr	r0, [r0, r1]
1005eca0:	4770      	bx	lr
1005eca2:	46c0      	nop			@ (mov r8, r8)

1005eca4 <__arm_cp.15_0>:
1005eca4:	20002468 	.word	0x20002468

1005eca8 <llc_get_next_free_conn_handle>:
1005eca8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ecaa:	4815      	ldr	r0, [pc, #84]	@ (1005ed00 <__arm_cp.16_0>)
1005ecac:	6800      	ldr	r0, [r0, #0]
1005ecae:	219c      	movs	r1, #156	@ 0x9c
1005ecb0:	9102      	str	r1, [sp, #8]
1005ecb2:	5841      	ldr	r1, [r0, r1]
1005ecb4:	2054      	movs	r0, #84	@ 0x54
1005ecb6:	9001      	str	r0, [sp, #4]
1005ecb8:	5a08      	ldrh	r0, [r1, r0]
1005ecba:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
1005ecbc:	4c12      	ldr	r4, [pc, #72]	@ (1005ed08 <__arm_cp.16_2>)
1005ecbe:	1c45      	adds	r5, r0, #1
1005ecc0:	b2a9      	uxth	r1, r5
1005ecc2:	0a09      	lsrs	r1, r1, #8
1005ecc4:	290e      	cmp	r1, #14
1005ecc6:	d901      	bls.n	1005eccc <llc_get_next_free_conn_handle+0x24>
1005ecc8:	490e      	ldr	r1, [pc, #56]	@ (1005ed04 <__arm_cp.16_1>)
1005ecca:	1845      	adds	r5, r0, r1
1005eccc:	2f00      	cmp	r7, #0
1005ecce:	d00f      	beq.n	1005ecf0 <llc_get_next_free_conn_handle+0x48>
1005ecd0:	2600      	movs	r6, #0
1005ecd2:	6820      	ldr	r0, [r4, #0]
1005ecd4:	2134      	movs	r1, #52	@ 0x34
1005ecd6:	5c41      	ldrb	r1, [r0, r1]
1005ecd8:	b2f0      	uxtb	r0, r6
1005ecda:	4288      	cmp	r0, r1
1005ecdc:	d208      	bcs.n	1005ecf0 <llc_get_next_free_conn_handle+0x48>
1005ecde:	f7f9 fe4d 	bl	1005897c <llc_conn_get_cntxt_per_p>
1005ece2:	1c76      	adds	r6, r6, #1
1005ece4:	b2a9      	uxth	r1, r5
1005ece6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005ece8:	4281      	cmp	r1, r0
1005ecea:	d1f2      	bne.n	1005ecd2 <llc_get_next_free_conn_handle+0x2a>
1005ecec:	4628      	mov	r0, r5
1005ecee:	e7e6      	b.n	1005ecbe <llc_get_next_free_conn_handle+0x16>
1005ecf0:	4803      	ldr	r0, [pc, #12]	@ (1005ed00 <__arm_cp.16_0>)
1005ecf2:	6800      	ldr	r0, [r0, #0]
1005ecf4:	9902      	ldr	r1, [sp, #8]
1005ecf6:	5840      	ldr	r0, [r0, r1]
1005ecf8:	9901      	ldr	r1, [sp, #4]
1005ecfa:	5245      	strh	r5, [r0, r1]
1005ecfc:	b2a8      	uxth	r0, r5
1005ecfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005ed00 <__arm_cp.16_0>:
1005ed00:	20002468 	.word	0x20002468

1005ed04 <__arm_cp.16_1>:
1005ed04:	fffff102 	.word	0xfffff102

1005ed08 <__arm_cp.16_2>:
1005ed08:	20002414 	.word	0x20002414

1005ed0c <LL_sched_time_t1_ge_t2>:
1005ed0c:	43c0      	mvns	r0, r0
1005ed0e:	1840      	adds	r0, r0, r1
1005ed10:	0fc0      	lsrs	r0, r0, #31
1005ed12:	4770      	bx	lr

1005ed14 <LL_sched_engine_return_actual_scheduler_margin>:
1005ed14:	4801      	ldr	r0, [pc, #4]	@ (1005ed1c <__arm_cp.2_0>)
1005ed16:	6800      	ldr	r0, [r0, #0]
1005ed18:	6880      	ldr	r0, [r0, #8]
1005ed1a:	4770      	bx	lr

1005ed1c <__arm_cp.2_0>:
1005ed1c:	2000246c 	.word	0x2000246c

1005ed20 <LL_sched_init>:
1005ed20:	4809      	ldr	r0, [pc, #36]	@ (1005ed48 <__arm_cp.4_0>)
1005ed22:	7ac0      	ldrb	r0, [r0, #11]
1005ed24:	4909      	ldr	r1, [pc, #36]	@ (1005ed4c <__arm_cp.4_1>)
1005ed26:	6809      	ldr	r1, [r1, #0]
1005ed28:	3112      	adds	r1, #18
1005ed2a:	2800      	cmp	r0, #0
1005ed2c:	d004      	beq.n	1005ed38 <LL_sched_init+0x18>
1005ed2e:	2200      	movs	r2, #0
1005ed30:	800a      	strh	r2, [r1, #0]
1005ed32:	312c      	adds	r1, #44	@ 0x2c
1005ed34:	1e40      	subs	r0, r0, #1
1005ed36:	e7f8      	b.n	1005ed2a <LL_sched_init+0xa>
1005ed38:	4805      	ldr	r0, [pc, #20]	@ (1005ed50 <__arm_cp.4_2>)
1005ed3a:	6800      	ldr	r0, [r0, #0]
1005ed3c:	2100      	movs	r1, #0
1005ed3e:	73c1      	strb	r1, [r0, #15]
1005ed40:	21ff      	movs	r1, #255	@ 0xff
1005ed42:	0209      	lsls	r1, r1, #8
1005ed44:	8181      	strh	r1, [r0, #12]
1005ed46:	4770      	bx	lr

1005ed48 <__arm_cp.4_0>:
1005ed48:	2000247c 	.word	0x2000247c

1005ed4c <__arm_cp.4_1>:
1005ed4c:	20002470 	.word	0x20002470

1005ed50 <__arm_cp.4_2>:
1005ed50:	2000246c 	.word	0x2000246c

1005ed54 <LL_sched_set_anchor>:
1005ed54:	222c      	movs	r2, #44	@ 0x2c
1005ed56:	4342      	muls	r2, r0
1005ed58:	4801      	ldr	r0, [pc, #4]	@ (1005ed60 <__arm_cp.5_0>)
1005ed5a:	6800      	ldr	r0, [r0, #0]
1005ed5c:	5081      	str	r1, [r0, r2]
1005ed5e:	4770      	bx	lr

1005ed60 <__arm_cp.5_0>:
1005ed60:	20002470 	.word	0x20002470

1005ed64 <LL_sched_set_taskslot_length_anchor>:
1005ed64:	232c      	movs	r3, #44	@ 0x2c
1005ed66:	4343      	muls	r3, r0
1005ed68:	4802      	ldr	r0, [pc, #8]	@ (1005ed74 <__arm_cp.6_0>)
1005ed6a:	6800      	ldr	r0, [r0, #0]
1005ed6c:	50c2      	str	r2, [r0, r3]
1005ed6e:	18c0      	adds	r0, r0, r3
1005ed70:	6041      	str	r1, [r0, #4]
1005ed72:	4770      	bx	lr

1005ed74 <__arm_cp.6_0>:
1005ed74:	20002470 	.word	0x20002470

1005ed78 <LL_sched_set_cancel_request>:
1005ed78:	28ff      	cmp	r0, #255	@ 0xff
1005ed7a:	d00b      	beq.n	1005ed94 <LL_sched_set_cancel_request+0x1c>
1005ed7c:	212c      	movs	r1, #44	@ 0x2c
1005ed7e:	4341      	muls	r1, r0
1005ed80:	4805      	ldr	r0, [pc, #20]	@ (1005ed98 <__arm_cp.9_0>)
1005ed82:	6800      	ldr	r0, [r0, #0]
1005ed84:	1840      	adds	r0, r0, r1
1005ed86:	7c81      	ldrb	r1, [r0, #18]
1005ed88:	2908      	cmp	r1, #8
1005ed8a:	d001      	beq.n	1005ed90 <LL_sched_set_cancel_request+0x18>
1005ed8c:	2110      	movs	r1, #16
1005ed8e:	e000      	b.n	1005ed92 <LL_sched_set_cancel_request+0x1a>
1005ed90:	2120      	movs	r1, #32
1005ed92:	7481      	strb	r1, [r0, #18]
1005ed94:	4770      	bx	lr
1005ed96:	46c0      	nop			@ (mov r8, r8)

1005ed98 <__arm_cp.9_0>:
1005ed98:	20002470 	.word	0x20002470

1005ed9c <LL_sched_enable_taskslot>:
1005ed9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ed9e:	b088      	sub	sp, #32
1005eda0:	9307      	str	r3, [sp, #28]
1005eda2:	272c      	movs	r7, #44	@ 0x2c
1005eda4:	4347      	muls	r7, r0
1005eda6:	481a      	ldr	r0, [pc, #104]	@ (1005ee10 <__arm_cp.10_0>)
1005eda8:	6806      	ldr	r6, [r0, #0]
1005edaa:	19f0      	adds	r0, r6, r7
1005edac:	7c84      	ldrb	r4, [r0, #18]
1005edae:	2c01      	cmp	r4, #1
1005edb0:	d12b      	bne.n	1005ee0a <LL_sched_enable_taskslot+0x6e>
1005edb2:	4603      	mov	r3, r0
1005edb4:	3312      	adds	r3, #18
1005edb6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1005edb8:	9506      	str	r5, [sp, #24]
1005edba:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1005edbc:	9505      	str	r5, [sp, #20]
1005edbe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005edc0:	9503      	str	r5, [sp, #12]
1005edc2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1005edc4:	9502      	str	r5, [sp, #8]
1005edc6:	9104      	str	r1, [sp, #16]
1005edc8:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005edca:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005edcc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005edce:	9400      	str	r4, [sp, #0]
1005edd0:	9201      	str	r2, [sp, #4]
1005edd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005edd4:	9c07      	ldr	r4, [sp, #28]
1005edd6:	6044      	str	r4, [r0, #4]
1005edd8:	6082      	str	r2, [r0, #8]
1005edda:	9a00      	ldr	r2, [sp, #0]
1005eddc:	51f2      	str	r2, [r6, r7]
1005edde:	221f      	movs	r2, #31
1005ede0:	4015      	ands	r5, r2
1005ede2:	7545      	strb	r5, [r0, #21]
1005ede4:	4011      	ands	r1, r2
1005ede6:	7581      	strb	r1, [r0, #22]
1005ede8:	2101      	movs	r1, #1
1005edea:	7501      	strb	r1, [r0, #20]
1005edec:	9a01      	ldr	r2, [sp, #4]
1005edee:	74c2      	strb	r2, [r0, #19]
1005edf0:	8201      	strh	r1, [r0, #16]
1005edf2:	9902      	ldr	r1, [sp, #8]
1005edf4:	61c1      	str	r1, [r0, #28]
1005edf6:	9903      	ldr	r1, [sp, #12]
1005edf8:	6201      	str	r1, [r0, #32]
1005edfa:	9905      	ldr	r1, [sp, #20]
1005edfc:	6241      	str	r1, [r0, #36]	@ 0x24
1005edfe:	9906      	ldr	r1, [sp, #24]
1005ee00:	6281      	str	r1, [r0, #40]	@ 0x28
1005ee02:	9904      	ldr	r1, [sp, #16]
1005ee04:	60c1      	str	r1, [r0, #12]
1005ee06:	2002      	movs	r0, #2
1005ee08:	7018      	strb	r0, [r3, #0]
1005ee0a:	b008      	add	sp, #32
1005ee0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ee0e:	46c0      	nop			@ (mov r8, r8)

1005ee10 <__arm_cp.10_0>:
1005ee10:	20002470 	.word	0x20002470

1005ee14 <LL_sched_is_scheduler_call_pending>:
1005ee14:	b580      	push	{r7, lr}
1005ee16:	490a      	ldr	r1, [pc, #40]	@ (1005ee40 <__arm_cp.11_0>)
1005ee18:	6809      	ldr	r1, [r1, #0]
1005ee1a:	7b0a      	ldrb	r2, [r1, #12]
1005ee1c:	2a01      	cmp	r2, #1
1005ee1e:	d106      	bne.n	1005ee2e <LL_sched_is_scheduler_call_pending+0x1a>
1005ee20:	7bca      	ldrb	r2, [r1, #15]
1005ee22:	2a03      	cmp	r2, #3
1005ee24:	d105      	bne.n	1005ee32 <LL_sched_is_scheduler_call_pending+0x1e>
1005ee26:	2000      	movs	r0, #0
1005ee28:	f7fb fb92 	bl	1005a550 <llc_scan_stop_ucfg_weak>
1005ee2c:	bd80      	pop	{r7, pc}
1005ee2e:	2000      	movs	r0, #0
1005ee30:	bd80      	pop	{r7, pc}
1005ee32:	6809      	ldr	r1, [r1, #0]
1005ee34:	1a08      	subs	r0, r1, r0
1005ee36:	4903      	ldr	r1, [pc, #12]	@ (1005ee44 <__arm_cp.11_1>)
1005ee38:	1840      	adds	r0, r0, r1
1005ee3a:	0fc0      	lsrs	r0, r0, #31
1005ee3c:	bd80      	pop	{r7, pc}
1005ee3e:	46c0      	nop			@ (mov r8, r8)

1005ee40 <__arm_cp.11_0>:
1005ee40:	2000246c 	.word	0x2000246c

1005ee44 <__arm_cp.11_1>:
1005ee44:	fffffe0b 	.word	0xfffffe0b

1005ee48 <LL_sched_anchorstretch>:
1005ee48:	4902      	ldr	r1, [pc, #8]	@ (1005ee54 <__arm_cp.12_0>)
1005ee4a:	6809      	ldr	r1, [r1, #0]
1005ee4c:	684a      	ldr	r2, [r1, #4]
1005ee4e:	6002      	str	r2, [r0, #0]
1005ee50:	7b88      	ldrb	r0, [r1, #14]
1005ee52:	4770      	bx	lr

1005ee54 <__arm_cp.12_0>:
1005ee54:	2000246c 	.word	0x2000246c

1005ee58 <LL_sched_engine>:
1005ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ee5a:	b0b3      	sub	sp, #204	@ 0xcc
1005ee5c:	4607      	mov	r7, r0
1005ee5e:	48dc      	ldr	r0, [pc, #880]	@ (1005f1d0 <__arm_cp.13_0>)
1005ee60:	6800      	ldr	r0, [r0, #0]
1005ee62:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ee64:	2001      	movs	r0, #1
1005ee66:	9001      	str	r0, [sp, #4]
1005ee68:	9009      	str	r0, [sp, #36]	@ 0x24
1005ee6a:	2100      	movs	r1, #0
1005ee6c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ee6e:	7381      	strb	r1, [r0, #14]
1005ee70:	48d8      	ldr	r0, [pc, #864]	@ (1005f1d4 <__arm_cp.13_1>)
1005ee72:	6803      	ldr	r3, [r0, #0]
1005ee74:	910a      	str	r1, [sp, #40]	@ 0x28
1005ee76:	7219      	strb	r1, [r3, #8]
1005ee78:	20ff      	movs	r0, #255	@ 0xff
1005ee7a:	9008      	str	r0, [sp, #32]
1005ee7c:	3002      	adds	r0, #2
1005ee7e:	8298      	strh	r0, [r3, #20]
1005ee80:	7c18      	ldrb	r0, [r3, #16]
1005ee82:	21f0      	movs	r1, #240	@ 0xf0
1005ee84:	4001      	ands	r1, r0
1005ee86:	090a      	lsrs	r2, r1, #4
1005ee88:	1888      	adds	r0, r1, r2
1005ee8a:	7418      	strb	r0, [r3, #16]
1005ee8c:	8a59      	ldrh	r1, [r3, #18]
1005ee8e:	40d1      	lsrs	r1, r2
1005ee90:	07c9      	lsls	r1, r1, #31
1005ee92:	49d1      	ldr	r1, [pc, #836]	@ (1005f1d8 <__arm_cp.13_2>)
1005ee94:	6809      	ldr	r1, [r1, #0]
1005ee96:	9107      	str	r1, [sp, #28]
1005ee98:	9305      	str	r3, [sp, #20]
1005ee9a:	d006      	beq.n	1005eeaa <LL_sched_engine+0x52>
1005ee9c:	2000      	movs	r0, #0
1005ee9e:	f002 f991 	bl	100611c4 <tsk_notify_idx>
1005eea2:	f7f1 fb12 	bl	100504ca <BLE_STACK_ProcessRequest>
1005eea6:	9b05      	ldr	r3, [sp, #20]
1005eea8:	7c18      	ldrb	r0, [r3, #16]
1005eeaa:	210f      	movs	r1, #15
1005eeac:	9102      	str	r1, [sp, #8]
1005eeae:	4008      	ands	r0, r1
1005eeb0:	7418      	strb	r0, [r3, #16]
1005eeb2:	2196      	movs	r1, #150	@ 0x96
1005eeb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005eeb6:	4341      	muls	r1, r0
1005eeb8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005eeba:	9112      	str	r1, [sp, #72]	@ 0x48
1005eebc:	6081      	str	r1, [r0, #8]
1005eebe:	2001      	movs	r0, #1
1005eec0:	9004      	str	r0, [sp, #16]
1005eec2:	43c0      	mvns	r0, r0
1005eec4:	b279      	sxtb	r1, r7
1005eec6:	4281      	cmp	r1, r0
1005eec8:	dc10      	bgt.n	1005eeec <LL_sched_engine+0x94>
1005eeca:	207f      	movs	r0, #127	@ 0x7f
1005eecc:	4007      	ands	r7, r0
1005eece:	252c      	movs	r5, #44	@ 0x2c
1005eed0:	437d      	muls	r5, r7
1005eed2:	9c07      	ldr	r4, [sp, #28]
1005eed4:	1960      	adds	r0, r4, r5
1005eed6:	900a      	str	r0, [sp, #40]	@ 0x28
1005eed8:	5966      	ldr	r6, [r4, r5]
1005eeda:	f7f2 f9a8 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005eede:	1a30      	subs	r0, r6, r0
1005eee0:	49be      	ldr	r1, [pc, #760]	@ (1005f1dc <__arm_cp.13_3>)
1005eee2:	1840      	adds	r0, r0, r1
1005eee4:	d500      	bpl.n	1005eee8 <LL_sched_engine+0x90>
1005eee6:	e0ef      	b.n	1005f0c8 <LL_sched_engine+0x270>
1005eee8:	4638      	mov	r0, r7
1005eeea:	e004      	b.n	1005eef6 <LL_sched_engine+0x9e>
1005eeec:	b2f8      	uxtb	r0, r7
1005eeee:	28ff      	cmp	r0, #255	@ 0xff
1005eef0:	d00e      	beq.n	1005ef10 <LL_sched_engine+0xb8>
1005eef2:	2100      	movs	r1, #0
1005eef4:	910a      	str	r1, [sp, #40]	@ 0x28
1005eef6:	212c      	movs	r1, #44	@ 0x2c
1005eef8:	4341      	muls	r1, r0
1005eefa:	9807      	ldr	r0, [sp, #28]
1005eefc:	1840      	adds	r0, r0, r1
1005eefe:	2101      	movs	r1, #1
1005ef00:	7501      	strb	r1, [r0, #20]
1005ef02:	7c81      	ldrb	r1, [r0, #18]
1005ef04:	2908      	cmp	r1, #8
1005ef06:	d102      	bne.n	1005ef0e <LL_sched_engine+0xb6>
1005ef08:	3012      	adds	r0, #18
1005ef0a:	2104      	movs	r1, #4
1005ef0c:	7001      	strb	r1, [r0, #0]
1005ef0e:	9708      	str	r7, [sp, #32]
1005ef10:	f7f2 f98d 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005ef14:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005ef16:	180c      	adds	r4, r1, r0
1005ef18:	48af      	ldr	r0, [pc, #700]	@ (1005f1d8 <__arm_cp.13_2>)
1005ef1a:	6807      	ldr	r7, [r0, #0]
1005ef1c:	3728      	adds	r7, #40	@ 0x28
1005ef1e:	2500      	movs	r5, #0
1005ef20:	4628      	mov	r0, r5
1005ef22:	49af      	ldr	r1, [pc, #700]	@ (1005f1e0 <__arm_cp.13_4>)
1005ef24:	7aca      	ldrb	r2, [r1, #11]
1005ef26:	4295      	cmp	r5, r2
1005ef28:	d23a      	bcs.n	1005efa0 <LL_sched_engine+0x148>
1005ef2a:	463e      	mov	r6, r7
1005ef2c:	3e16      	subs	r6, #22
1005ef2e:	7831      	ldrb	r1, [r6, #0]
1005ef30:	070a      	lsls	r2, r1, #28
1005ef32:	0f52      	lsrs	r2, r2, #29
1005ef34:	d01e      	beq.n	1005ef74 <LL_sched_engine+0x11c>
1005ef36:	2104      	movs	r1, #4
1005ef38:	7031      	strb	r1, [r6, #0]
1005ef3a:	4639      	mov	r1, r7
1005ef3c:	3928      	subs	r1, #40	@ 0x28
1005ef3e:	6809      	ldr	r1, [r1, #0]
1005ef40:	43ca      	mvns	r2, r1
1005ef42:	18a2      	adds	r2, r4, r2
1005ef44:	d429      	bmi.n	1005ef9a <LL_sched_engine+0x142>
1005ef46:	1a61      	subs	r1, r4, r1
1005ef48:	4638      	mov	r0, r7
1005ef4a:	381c      	subs	r0, #28
1005ef4c:	6800      	ldr	r0, [r0, #0]
1005ef4e:	463a      	mov	r2, r7
1005ef50:	3a0c      	subs	r2, #12
1005ef52:	6812      	ldr	r2, [r2, #0]
1005ef54:	4790      	blx	r2
1005ef56:	4639      	mov	r1, r7
1005ef58:	3918      	subs	r1, #24
1005ef5a:	880a      	ldrh	r2, [r1, #0]
1005ef5c:	1812      	adds	r2, r2, r0
1005ef5e:	800a      	strh	r2, [r1, #0]
1005ef60:	4639      	mov	r1, r7
1005ef62:	3914      	subs	r1, #20
1005ef64:	780a      	ldrb	r2, [r1, #0]
1005ef66:	1880      	adds	r0, r0, r2
1005ef68:	287f      	cmp	r0, #127	@ 0x7f
1005ef6a:	d300      	bcc.n	1005ef6e <LL_sched_engine+0x116>
1005ef6c:	207f      	movs	r0, #127	@ 0x7f
1005ef6e:	7008      	strb	r0, [r1, #0]
1005ef70:	7831      	ldrb	r1, [r6, #0]
1005ef72:	2001      	movs	r0, #1
1005ef74:	0689      	lsls	r1, r1, #26
1005ef76:	0f89      	lsrs	r1, r1, #30
1005ef78:	d00f      	beq.n	1005ef9a <LL_sched_engine+0x142>
1005ef7a:	6839      	ldr	r1, [r7, #0]
1005ef7c:	2900      	cmp	r1, #0
1005ef7e:	d006      	beq.n	1005ef8e <LL_sched_engine+0x136>
1005ef80:	4638      	mov	r0, r7
1005ef82:	381c      	subs	r0, #28
1005ef84:	6800      	ldr	r0, [r0, #0]
1005ef86:	4788      	blx	r1
1005ef88:	7830      	ldrb	r0, [r6, #0]
1005ef8a:	2801      	cmp	r0, #1
1005ef8c:	d004      	beq.n	1005ef98 <LL_sched_engine+0x140>
1005ef8e:	2000      	movs	r0, #0
1005ef90:	7030      	strb	r0, [r6, #0]
1005ef92:	4639      	mov	r1, r7
1005ef94:	3915      	subs	r1, #21
1005ef96:	7008      	strb	r0, [r1, #0]
1005ef98:	2001      	movs	r0, #1
1005ef9a:	372c      	adds	r7, #44	@ 0x2c
1005ef9c:	1c6d      	adds	r5, r5, #1
1005ef9e:	e7c0      	b.n	1005ef22 <LL_sched_engine+0xca>
1005efa0:	2800      	cmp	r0, #0
1005efa2:	d1b5      	bne.n	1005ef10 <LL_sched_engine+0xb8>
1005efa4:	488c      	ldr	r0, [pc, #560]	@ (1005f1d8 <__arm_cp.13_2>)
1005efa6:	6800      	ldr	r0, [r0, #0]
1005efa8:	4603      	mov	r3, r0
1005efaa:	3312      	adds	r3, #18
1005efac:	2400      	movs	r4, #0
1005efae:	4621      	mov	r1, r4
1005efb0:	42a2      	cmp	r2, r4
1005efb2:	d009      	beq.n	1005efc8 <LL_sched_engine+0x170>
1005efb4:	781d      	ldrb	r5, [r3, #0]
1005efb6:	2d04      	cmp	r5, #4
1005efb8:	d103      	bne.n	1005efc2 <LL_sched_engine+0x16a>
1005efba:	b2cd      	uxtb	r5, r1
1005efbc:	ae13      	add	r6, sp, #76	@ 0x4c
1005efbe:	5574      	strb	r4, [r6, r5]
1005efc0:	1c49      	adds	r1, r1, #1
1005efc2:	332c      	adds	r3, #44	@ 0x2c
1005efc4:	1c64      	adds	r4, r4, #1
1005efc6:	e7f3      	b.n	1005efb0 <LL_sched_engine+0x158>
1005efc8:	060a      	lsls	r2, r1, #24
1005efca:	d074      	beq.n	1005f0b6 <LL_sched_engine+0x25e>
1005efcc:	b2ca      	uxtb	r2, r1
1005efce:	920e      	str	r2, [sp, #56]	@ 0x38
1005efd0:	2200      	movs	r2, #0
1005efd2:	9206      	str	r2, [sp, #24]
1005efd4:	460c      	mov	r4, r1
1005efd6:	9203      	str	r2, [sp, #12]
1005efd8:	4616      	mov	r6, r2
1005efda:	910d      	str	r1, [sp, #52]	@ 0x34
1005efdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005efde:	4296      	cmp	r6, r2
1005efe0:	d06e      	beq.n	1005f0c0 <LL_sched_engine+0x268>
1005efe2:	9612      	str	r6, [sp, #72]	@ 0x48
1005efe4:	9410      	str	r4, [sp, #64]	@ 0x40
1005efe6:	b2e3      	uxtb	r3, r4
1005efe8:	2700      	movs	r7, #0
1005efea:	462c      	mov	r4, r5
1005efec:	463e      	mov	r6, r7
1005efee:	42bb      	cmp	r3, r7
1005eff0:	d00d      	beq.n	1005f00e <LL_sched_engine+0x1b6>
1005eff2:	aa13      	add	r2, sp, #76	@ 0x4c
1005eff4:	5dd2      	ldrb	r2, [r2, r7]
1005eff6:	252c      	movs	r5, #44	@ 0x2c
1005eff8:	4355      	muls	r5, r2
1005effa:	5945      	ldr	r5, [r0, r5]
1005effc:	2f00      	cmp	r7, #0
1005effe:	d002      	beq.n	1005f006 <LL_sched_engine+0x1ae>
1005f000:	43f2      	mvns	r2, r6
1005f002:	18aa      	adds	r2, r5, r2
1005f004:	d501      	bpl.n	1005f00a <LL_sched_engine+0x1b2>
1005f006:	463c      	mov	r4, r7
1005f008:	462e      	mov	r6, r5
1005f00a:	1c7f      	adds	r7, r7, #1
1005f00c:	e7ef      	b.n	1005efee <LL_sched_engine+0x196>
1005f00e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005f010:	1b4a      	subs	r2, r1, r5
1005f012:	b2d2      	uxtb	r2, r2
1005f014:	1e51      	subs	r1, r2, #1
1005f016:	aa13      	add	r2, sp, #76	@ 0x4c
1005f018:	5c53      	ldrb	r3, [r2, r1]
1005f01a:	b2e4      	uxtb	r4, r4
1005f01c:	5d17      	ldrb	r7, [r2, r4]
1005f01e:	5457      	strb	r7, [r2, r1]
1005f020:	5513      	strb	r3, [r2, r4]
1005f022:	910f      	str	r1, [sp, #60]	@ 0x3c
1005f024:	b2cb      	uxtb	r3, r1
1005f026:	5cd3      	ldrb	r3, [r2, r3]
1005f028:	2d00      	cmp	r5, #0
1005f02a:	d02e      	beq.n	1005f08a <LL_sched_engine+0x232>
1005f02c:	461d      	mov	r5, r3
1005f02e:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005f030:	b2ca      	uxtb	r2, r1
1005f032:	ac13      	add	r4, sp, #76	@ 0x4c
1005f034:	5ca4      	ldrb	r4, [r4, r2]
1005f036:	272c      	movs	r7, #44	@ 0x2c
1005f038:	437c      	muls	r4, r7
1005f03a:	5902      	ldr	r2, [r0, r4]
1005f03c:	1b91      	subs	r1, r2, r6
1005f03e:	1904      	adds	r4, r0, r4
1005f040:	6863      	ldr	r3, [r4, #4]
1005f042:	18c9      	adds	r1, r1, r3
1005f044:	3195      	adds	r1, #149	@ 0x95
1005f046:	d44a      	bmi.n	1005f0de <LL_sched_engine+0x286>
1005f048:	43d1      	mvns	r1, r2
1005f04a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005f04c:	1851      	adds	r1, r2, r1
1005f04e:	d449      	bmi.n	1005f0e4 <LL_sched_engine+0x28c>
1005f050:	436f      	muls	r7, r5
1005f052:	19c1      	adds	r1, r0, r7
1005f054:	7d8a      	ldrb	r2, [r1, #22]
1005f056:	7d0b      	ldrb	r3, [r1, #20]
1005f058:	4093      	lsls	r3, r2
1005f05a:	7d49      	ldrb	r1, [r1, #21]
1005f05c:	2601      	movs	r6, #1
1005f05e:	4632      	mov	r2, r6
1005f060:	408a      	lsls	r2, r1
1005f062:	429a      	cmp	r2, r3
1005f064:	d800      	bhi.n	1005f068 <LL_sched_engine+0x210>
1005f066:	4613      	mov	r3, r2
1005f068:	7da1      	ldrb	r1, [r4, #22]
1005f06a:	7d27      	ldrb	r7, [r4, #20]
1005f06c:	408f      	lsls	r7, r1
1005f06e:	7d61      	ldrb	r1, [r4, #21]
1005f070:	408e      	lsls	r6, r1
1005f072:	42be      	cmp	r6, r7
1005f074:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005f076:	d800      	bhi.n	1005f07a <LL_sched_engine+0x222>
1005f078:	4637      	mov	r7, r6
1005f07a:	429f      	cmp	r7, r3
1005f07c:	462b      	mov	r3, r5
1005f07e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005f080:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005f082:	d300      	bcc.n	1005f086 <LL_sched_engine+0x22e>
1005f084:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1005f086:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005f088:	e011      	b.n	1005f0ae <LL_sched_engine+0x256>
1005f08a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005f08c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f08e:	2a01      	cmp	r2, #1
1005f090:	d101      	bne.n	1005f096 <LL_sched_engine+0x23e>
1005f092:	2202      	movs	r2, #2
1005f094:	9206      	str	r2, [sp, #24]
1005f096:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005f098:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005f09a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005f09c:	222c      	movs	r2, #44	@ 0x2c
1005f09e:	435a      	muls	r2, r3
1005f0a0:	5883      	ldr	r3, [r0, r2]
1005f0a2:	1882      	adds	r2, r0, r2
1005f0a4:	6852      	ldr	r2, [r2, #4]
1005f0a6:	189a      	adds	r2, r3, r2
1005f0a8:	3296      	adds	r2, #150	@ 0x96
1005f0aa:	920c      	str	r2, [sp, #48]	@ 0x30
1005f0ac:	462b      	mov	r3, r5
1005f0ae:	1e64      	subs	r4, r4, #1
1005f0b0:	1c76      	adds	r6, r6, #1
1005f0b2:	9311      	str	r3, [sp, #68]	@ 0x44
1005f0b4:	e792      	b.n	1005efdc <LL_sched_engine+0x184>
1005f0b6:	2000      	movs	r0, #0
1005f0b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f0ba:	6048      	str	r0, [r1, #4]
1005f0bc:	7388      	strb	r0, [r1, #14]
1005f0be:	e02d      	b.n	1005f11c <LL_sched_engine+0x2c4>
1005f0c0:	9a03      	ldr	r2, [sp, #12]
1005f0c2:	4616      	mov	r6, r2
1005f0c4:	9b06      	ldr	r3, [sp, #24]
1005f0c6:	e013      	b.n	1005f0f0 <LL_sched_engine+0x298>
1005f0c8:	1960      	adds	r0, r4, r5
1005f0ca:	7c80      	ldrb	r0, [r0, #18]
1005f0cc:	2810      	cmp	r0, #16
1005f0ce:	d100      	bne.n	1005f0d2 <LL_sched_engine+0x27a>
1005f0d0:	e70a      	b.n	1005eee8 <LL_sched_engine+0x90>
1005f0d2:	2820      	cmp	r0, #32
1005f0d4:	d100      	bne.n	1005f0d8 <LL_sched_engine+0x280>
1005f0d6:	e707      	b.n	1005eee8 <LL_sched_engine+0x90>
1005f0d8:	2400      	movs	r4, #0
1005f0da:	463d      	mov	r5, r7
1005f0dc:	e021      	b.n	1005f122 <LL_sched_engine+0x2ca>
1005f0de:	3e96      	subs	r6, #150	@ 0x96
1005f0e0:	9b04      	ldr	r3, [sp, #16]
1005f0e2:	e004      	b.n	1005f0ee <LL_sched_engine+0x296>
1005f0e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f0e6:	1e40      	subs	r0, r0, #1
1005f0e8:	9011      	str	r0, [sp, #68]	@ 0x44
1005f0ea:	2600      	movs	r6, #0
1005f0ec:	4633      	mov	r3, r6
1005f0ee:	9a03      	ldr	r2, [sp, #12]
1005f0f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005f0f2:	b2c0      	uxtb	r0, r0
1005f0f4:	a913      	add	r1, sp, #76	@ 0x4c
1005f0f6:	5c0d      	ldrb	r5, [r1, r0]
1005f0f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005f0fa:	6042      	str	r2, [r0, #4]
1005f0fc:	7383      	strb	r3, [r0, #14]
1005f0fe:	2dff      	cmp	r5, #255	@ 0xff
1005f100:	d00c      	beq.n	1005f11c <LL_sched_engine+0x2c4>
1005f102:	202c      	movs	r0, #44	@ 0x2c
1005f104:	4368      	muls	r0, r5
1005f106:	9907      	ldr	r1, [sp, #28]
1005f108:	1809      	adds	r1, r1, r0
1005f10a:	b2d8      	uxtb	r0, r3
1005f10c:	2801      	cmp	r0, #1
1005f10e:	910a      	str	r1, [sp, #40]	@ 0x28
1005f110:	d105      	bne.n	1005f11e <LL_sched_engine+0x2c6>
1005f112:	6808      	ldr	r0, [r1, #0]
1005f114:	1a30      	subs	r0, r6, r0
1005f116:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f118:	6048      	str	r0, [r1, #4]
1005f11a:	e000      	b.n	1005f11e <LL_sched_engine+0x2c6>
1005f11c:	25ff      	movs	r5, #255	@ 0xff
1005f11e:	9c01      	ldr	r4, [sp, #4]
1005f120:	9f08      	ldr	r7, [sp, #32]
1005f122:	f7f3 f821 	bl	10052168 <BLEPLAT_CNTR_ClearSemareq>
1005f126:	482a      	ldr	r0, [pc, #168]	@ (1005f1d0 <__arm_cp.13_0>)
1005f128:	6800      	ldr	r0, [r0, #0]
1005f12a:	2dff      	cmp	r5, #255	@ 0xff
1005f12c:	d02f      	beq.n	1005f18e <LL_sched_engine+0x336>
1005f12e:	9711      	str	r7, [sp, #68]	@ 0x44
1005f130:	9412      	str	r4, [sp, #72]	@ 0x48
1005f132:	4604      	mov	r4, r0
1005f134:	2008      	movs	r0, #8
1005f136:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1005f138:	74b8      	strb	r0, [r7, #18]
1005f13a:	f7fe fa36 	bl	1005d5aa <llc_cte_timer_stop_ucfg_weak>
1005f13e:	7365      	strb	r5, [r4, #13]
1005f140:	6a3a      	ldr	r2, [r7, #32]
1005f142:	68f8      	ldr	r0, [r7, #12]
1005f144:	6879      	ldr	r1, [r7, #4]
1005f146:	4790      	blx	r2
1005f148:	683e      	ldr	r6, [r7, #0]
1005f14a:	940b      	str	r4, [sp, #44]	@ 0x2c
1005f14c:	6026      	str	r6, [r4, #0]
1005f14e:	4628      	mov	r0, r5
1005f150:	f7f3 f820 	bl	10052194 <BLEPLAT_CNTR_GlobWriteSlot>
1005f154:	f7f3 f817 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
1005f158:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005f15a:	2800      	cmp	r0, #0
1005f15c:	d023      	beq.n	1005f1a6 <LL_sched_engine+0x34e>
1005f15e:	7cf8      	ldrb	r0, [r7, #19]
1005f160:	09c1      	lsrs	r1, r0, #7
1005f162:	2201      	movs	r2, #1
1005f164:	4630      	mov	r0, r6
1005f166:	f7f2 f889 	bl	1005127c <BLEPLAT_SetRadioTimerValue>
1005f16a:	2800      	cmp	r0, #0
1005f16c:	d01d      	beq.n	1005f1aa <LL_sched_engine+0x352>
1005f16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005f170:	0040      	lsls	r0, r0, #1
1005f172:	9009      	str	r0, [sp, #36]	@ 0x24
1005f174:	2810      	cmp	r0, #16
1005f176:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1005f178:	d200      	bcs.n	1005f17c <LL_sched_engine+0x324>
1005f17a:	e676      	b.n	1005ee6a <LL_sched_engine+0x12>
1005f17c:	f7fe fa14 	bl	1005d5a8 <llc_cte_timer_error_ucfg_weak>
1005f180:	20a1      	movs	r0, #161	@ 0xa1
1005f182:	2106      	movs	r1, #6
1005f184:	2200      	movs	r2, #0
1005f186:	4613      	mov	r3, r2
1005f188:	f003 fc12 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
1005f18c:	e009      	b.n	1005f1a2 <LL_sched_engine+0x34a>
1005f18e:	4604      	mov	r4, r0
1005f190:	f7f2 f88e 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1005f194:	f7f2 fff0 	bl	10052178 <BLEPLAT_CNTR_GlobDisableBlue>
1005f198:	2000      	movs	r0, #0
1005f19a:	73e0      	strb	r0, [r4, #15]
1005f19c:	20ff      	movs	r0, #255	@ 0xff
1005f19e:	0200      	lsls	r0, r0, #8
1005f1a0:	81a0      	strh	r0, [r4, #12]
1005f1a2:	9904      	ldr	r1, [sp, #16]
1005f1a4:	e00f      	b.n	1005f1c6 <LL_sched_engine+0x36e>
1005f1a6:	f7f2 f89b 	bl	100512e0 <BLEPLAT_SetRadioCloseTimeout>
1005f1aa:	9b04      	ldr	r3, [sp, #16]
1005f1ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f1ae:	730b      	strb	r3, [r1, #12]
1005f1b0:	7cf8      	ldrb	r0, [r7, #19]
1005f1b2:	73c8      	strb	r0, [r1, #15]
1005f1b4:	9a05      	ldr	r2, [sp, #20]
1005f1b6:	60d6      	str	r6, [r2, #12]
1005f1b8:	7c11      	ldrb	r1, [r2, #16]
1005f1ba:	9c02      	ldr	r4, [sp, #8]
1005f1bc:	4021      	ands	r1, r4
1005f1be:	0100      	lsls	r0, r0, #4
1005f1c0:	1808      	adds	r0, r1, r0
1005f1c2:	4619      	mov	r1, r3
1005f1c4:	7410      	strb	r0, [r2, #16]
1005f1c6:	4803      	ldr	r0, [pc, #12]	@ (1005f1d4 <__arm_cp.13_1>)
1005f1c8:	6800      	ldr	r0, [r0, #0]
1005f1ca:	7201      	strb	r1, [r0, #8]
1005f1cc:	b033      	add	sp, #204	@ 0xcc
1005f1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f1d0 <__arm_cp.13_0>:
1005f1d0:	2000246c 	.word	0x2000246c

1005f1d4 <__arm_cp.13_1>:
1005f1d4:	20002468 	.word	0x20002468

1005f1d8 <__arm_cp.13_2>:
1005f1d8:	20002470 	.word	0x20002470

1005f1dc <__arm_cp.13_3>:
1005f1dc:	fffffed4 	.word	0xfffffed4

1005f1e0 <__arm_cp.13_4>:
1005f1e0:	2000247c 	.word	0x2000247c

1005f1e4 <LL_sched_set_priority>:
1005f1e4:	b510      	push	{r4, lr}
1005f1e6:	231f      	movs	r3, #31
1005f1e8:	401a      	ands	r2, r3
1005f1ea:	242c      	movs	r4, #44	@ 0x2c
1005f1ec:	4344      	muls	r4, r0
1005f1ee:	4803      	ldr	r0, [pc, #12]	@ (1005f1fc <__arm_cp.14_0>)
1005f1f0:	6800      	ldr	r0, [r0, #0]
1005f1f2:	1900      	adds	r0, r0, r4
1005f1f4:	7582      	strb	r2, [r0, #22]
1005f1f6:	4019      	ands	r1, r3
1005f1f8:	7541      	strb	r1, [r0, #21]
1005f1fa:	bd10      	pop	{r4, pc}

1005f1fc <__arm_cp.14_0>:
1005f1fc:	20002470 	.word	0x20002470

1005f200 <LL_sched_set_params>:
1005f200:	b5b0      	push	{r4, r5, r7, lr}
1005f202:	242c      	movs	r4, #44	@ 0x2c
1005f204:	4344      	muls	r4, r0
1005f206:	480b      	ldr	r0, [pc, #44]	@ (1005f234 <__arm_cp.15_0>)
1005f208:	6800      	ldr	r0, [r0, #0]
1005f20a:	9d05      	ldr	r5, [sp, #20]
1005f20c:	5105      	str	r5, [r0, r4]
1005f20e:	1900      	adds	r0, r0, r4
1005f210:	9c04      	ldr	r4, [sp, #16]
1005f212:	6084      	str	r4, [r0, #8]
1005f214:	60c1      	str	r1, [r0, #12]
1005f216:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f218:	6281      	str	r1, [r0, #40]	@ 0x28
1005f21a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005f21c:	6241      	str	r1, [r0, #36]	@ 0x24
1005f21e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005f220:	6201      	str	r1, [r0, #32]
1005f222:	9908      	ldr	r1, [sp, #32]
1005f224:	61c1      	str	r1, [r0, #28]
1005f226:	9907      	ldr	r1, [sp, #28]
1005f228:	7581      	strb	r1, [r0, #22]
1005f22a:	9906      	ldr	r1, [sp, #24]
1005f22c:	7541      	strb	r1, [r0, #21]
1005f22e:	74c2      	strb	r2, [r0, #19]
1005f230:	6043      	str	r3, [r0, #4]
1005f232:	bdb0      	pop	{r4, r5, r7, pc}

1005f234 <__arm_cp.15_0>:
1005f234:	20002470 	.word	0x20002470

1005f238 <LL_sched_delete_taskslot>:
1005f238:	212c      	movs	r1, #44	@ 0x2c
1005f23a:	4341      	muls	r1, r0
1005f23c:	4802      	ldr	r0, [pc, #8]	@ (1005f248 <__arm_cp.19_0>)
1005f23e:	6800      	ldr	r0, [r0, #0]
1005f240:	1840      	adds	r0, r0, r1
1005f242:	2110      	movs	r1, #16
1005f244:	8241      	strh	r1, [r0, #18]
1005f246:	4770      	bx	lr

1005f248 <__arm_cp.19_0>:
1005f248:	20002470 	.word	0x20002470

1005f24c <LL_sched_set_per_state>:
1005f24c:	222c      	movs	r2, #44	@ 0x2c
1005f24e:	4342      	muls	r2, r0
1005f250:	4802      	ldr	r0, [pc, #8]	@ (1005f25c <__arm_cp.21_0>)
1005f252:	6800      	ldr	r0, [r0, #0]
1005f254:	1880      	adds	r0, r0, r2
1005f256:	7481      	strb	r1, [r0, #18]
1005f258:	4770      	bx	lr
1005f25a:	46c0      	nop			@ (mov r8, r8)

1005f25c <__arm_cp.21_0>:
1005f25c:	20002470 	.word	0x20002470

1005f260 <LL_sched_reserve_taskslot>:
1005f260:	b510      	push	{r4, lr}
1005f262:	480e      	ldr	r0, [pc, #56]	@ (1005f29c <__arm_cp.22_0>)
1005f264:	6801      	ldr	r1, [r0, #0]
1005f266:	3128      	adds	r1, #40	@ 0x28
1005f268:	2000      	movs	r0, #0
1005f26a:	4a0d      	ldr	r2, [pc, #52]	@ (1005f2a0 <__arm_cp.22_1>)
1005f26c:	7ad3      	ldrb	r3, [r2, #11]
1005f26e:	4298      	cmp	r0, r3
1005f270:	d20b      	bcs.n	1005f28a <LL_sched_reserve_taskslot+0x2a>
1005f272:	f3ef 8310 	mrs	r3, PRIMASK
1005f276:	b672      	cpsid	i
1005f278:	460b      	mov	r3, r1
1005f27a:	3b16      	subs	r3, #22
1005f27c:	781c      	ldrb	r4, [r3, #0]
1005f27e:	2c00      	cmp	r4, #0
1005f280:	d005      	beq.n	1005f28e <LL_sched_reserve_taskslot+0x2e>
1005f282:	b662      	cpsie	i
1005f284:	312c      	adds	r1, #44	@ 0x2c
1005f286:	1c40      	adds	r0, r0, #1
1005f288:	e7f0      	b.n	1005f26c <LL_sched_reserve_taskslot+0xc>
1005f28a:	20ff      	movs	r0, #255	@ 0xff
1005f28c:	e004      	b.n	1005f298 <LL_sched_reserve_taskslot+0x38>
1005f28e:	2200      	movs	r2, #0
1005f290:	600a      	str	r2, [r1, #0]
1005f292:	2101      	movs	r1, #1
1005f294:	7019      	strb	r1, [r3, #0]
1005f296:	b662      	cpsie	i
1005f298:	b2c0      	uxtb	r0, r0
1005f29a:	bd10      	pop	{r4, pc}

1005f29c <__arm_cp.22_0>:
1005f29c:	20002470 	.word	0x20002470

1005f2a0 <__arm_cp.22_1>:
1005f2a0:	2000247c 	.word	0x2000247c

1005f2a4 <LL_sched_release_taskslot>:
1005f2a4:	28ff      	cmp	r0, #255	@ 0xff
1005f2a6:	d006      	beq.n	1005f2b6 <LL_sched_release_taskslot+0x12>
1005f2a8:	212c      	movs	r1, #44	@ 0x2c
1005f2aa:	4341      	muls	r1, r0
1005f2ac:	4802      	ldr	r0, [pc, #8]	@ (1005f2b8 <__arm_cp.23_0>)
1005f2ae:	6800      	ldr	r0, [r0, #0]
1005f2b0:	1840      	adds	r0, r0, r1
1005f2b2:	2100      	movs	r1, #0
1005f2b4:	8241      	strh	r1, [r0, #18]
1005f2b6:	4770      	bx	lr

1005f2b8 <__arm_cp.23_0>:
1005f2b8:	20002470 	.word	0x20002470

1005f2bc <LL_sched_check_and_call_sched>:
1005f2bc:	b510      	push	{r4, lr}
1005f2be:	460c      	mov	r4, r1
1005f2c0:	f3ef 8110 	mrs	r1, PRIMASK
1005f2c4:	b672      	cpsid	i
1005f2c6:	f7ff fda5 	bl	1005ee14 <LL_sched_is_scheduler_call_pending>
1005f2ca:	b662      	cpsie	i
1005f2cc:	2800      	cmp	r0, #0
1005f2ce:	d000      	beq.n	1005f2d2 <LL_sched_check_and_call_sched+0x16>
1005f2d0:	bd10      	pop	{r4, pc}
1005f2d2:	4620      	mov	r0, r4
1005f2d4:	f7ff fdc0 	bl	1005ee58 <LL_sched_engine>
1005f2d8:	bd10      	pop	{r4, pc}
	...

1005f2dc <LL_sched_check_and_wait_sched>:
1005f2dc:	b5b0      	push	{r4, r5, r7, lr}
1005f2de:	4604      	mov	r4, r0
1005f2e0:	4813      	ldr	r0, [pc, #76]	@ (1005f330 <__arm_cp.25_0>)
1005f2e2:	7ac0      	ldrb	r0, [r0, #11]
1005f2e4:	42a0      	cmp	r0, r4
1005f2e6:	d922      	bls.n	1005f32e <LL_sched_check_and_wait_sched+0x52>
1005f2e8:	f3ef 8010 	mrs	r0, PRIMASK
1005f2ec:	b672      	cpsid	i
1005f2ee:	25ff      	movs	r5, #255	@ 0xff
1005f2f0:	35ec      	adds	r5, #236	@ 0xec
1005f2f2:	f7f1 ff9c 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
1005f2f6:	1940      	adds	r0, r0, r5
1005f2f8:	f7ff fd8c 	bl	1005ee14 <LL_sched_is_scheduler_call_pending>
1005f2fc:	4a0d      	ldr	r2, [pc, #52]	@ (1005f334 <__arm_cp.25_1>)
1005f2fe:	6813      	ldr	r3, [r2, #0]
1005f300:	2100      	movs	r1, #0
1005f302:	7219      	strb	r1, [r3, #8]
1005f304:	b662      	cpsie	i
1005f306:	2801      	cmp	r0, #1
1005f308:	d10c      	bne.n	1005f324 <LL_sched_check_and_wait_sched+0x48>
1005f30a:	6810      	ldr	r0, [r2, #0]
1005f30c:	6041      	str	r1, [r0, #4]
1005f30e:	4a0a      	ldr	r2, [pc, #40]	@ (1005f338 <__arm_cp.25_2>)
1005f310:	6843      	ldr	r3, [r0, #4]
1005f312:	4293      	cmp	r3, r2
1005f314:	d80b      	bhi.n	1005f32e <LL_sched_check_and_wait_sched+0x52>
1005f316:	7a03      	ldrb	r3, [r0, #8]
1005f318:	2b00      	cmp	r3, #0
1005f31a:	d107      	bne.n	1005f32c <LL_sched_check_and_wait_sched+0x50>
1005f31c:	6843      	ldr	r3, [r0, #4]
1005f31e:	1c5b      	adds	r3, r3, #1
1005f320:	6043      	str	r3, [r0, #4]
1005f322:	e7f5      	b.n	1005f310 <LL_sched_check_and_wait_sched+0x34>
1005f324:	4620      	mov	r0, r4
1005f326:	f7ff fd97 	bl	1005ee58 <LL_sched_engine>
1005f32a:	bdb0      	pop	{r4, r5, r7, pc}
1005f32c:	7201      	strb	r1, [r0, #8]
1005f32e:	bdb0      	pop	{r4, r5, r7, pc}

1005f330 <__arm_cp.25_0>:
1005f330:	2000247c 	.word	0x2000247c

1005f334 <__arm_cp.25_1>:
1005f334:	20002468 	.word	0x20002468

1005f338 <__arm_cp.25_2>:
1005f338:	0004e1ff 	.word	0x0004e1ff

1005f33c <MBM_init>:
1005f33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f33e:	4c18      	ldr	r4, [pc, #96]	@ (1005f3a0 <__arm_cp.1_0>)
1005f340:	2501      	movs	r5, #1
1005f342:	2204      	movs	r2, #4
1005f344:	4e17      	ldr	r6, [pc, #92]	@ (1005f3a4 <__arm_cp.1_1>)
1005f346:	4620      	mov	r0, r4
1005f348:	4629      	mov	r1, r5
1005f34a:	47b0      	blx	r6
1005f34c:	4f16      	ldr	r7, [pc, #88]	@ (1005f3a8 <__arm_cp.1_2>)
1005f34e:	6038      	str	r0, [r7, #0]
1005f350:	2210      	movs	r2, #16
1005f352:	4620      	mov	r0, r4
1005f354:	4629      	mov	r1, r5
1005f356:	47b0      	blx	r6
1005f358:	6839      	ldr	r1, [r7, #0]
1005f35a:	6008      	str	r0, [r1, #0]
1005f35c:	220c      	movs	r2, #12
1005f35e:	4620      	mov	r0, r4
1005f360:	4629      	mov	r1, r5
1005f362:	47b0      	blx	r6
1005f364:	6839      	ldr	r1, [r7, #0]
1005f366:	6809      	ldr	r1, [r1, #0]
1005f368:	60c8      	str	r0, [r1, #12]
1005f36a:	4d10      	ldr	r5, [pc, #64]	@ (1005f3ac <__arm_cp.1_3>)
1005f36c:	89e9      	ldrh	r1, [r5, #14]
1005f36e:	2224      	movs	r2, #36	@ 0x24
1005f370:	4620      	mov	r0, r4
1005f372:	47b0      	blx	r6
1005f374:	4601      	mov	r1, r0
1005f376:	6838      	ldr	r0, [r7, #0]
1005f378:	6802      	ldr	r2, [r0, #0]
1005f37a:	68d0      	ldr	r0, [r2, #12]
1005f37c:	6081      	str	r1, [r0, #8]
1005f37e:	2100      	movs	r1, #0
1005f380:	2908      	cmp	r1, #8
1005f382:	d003      	beq.n	1005f38c <MBM_init+0x50>
1005f384:	2300      	movs	r3, #0
1005f386:	5253      	strh	r3, [r2, r1]
1005f388:	1c89      	adds	r1, r1, #2
1005f38a:	e7f9      	b.n	1005f380 <MBM_init+0x44>
1005f38c:	89e9      	ldrh	r1, [r5, #14]
1005f38e:	80d1      	strh	r1, [r2, #6]
1005f390:	2100      	movs	r1, #0
1005f392:	8111      	strh	r1, [r2, #8]
1005f394:	89e9      	ldrh	r1, [r5, #14]
1005f396:	8041      	strh	r1, [r0, #2]
1005f398:	f000 f948 	bl	1005f62c <Mem_Buff_init>
1005f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f39e:	46c0      	nop			@ (mov r8, r8)

1005f3a0 <__arm_cp.1_0>:
1005f3a0:	20002478 	.word	0x20002478

1005f3a4 <__arm_cp.1_1>:
1005f3a4:	1005f5f5 	.word	0x1005f5f5

1005f3a8 <__arm_cp.1_2>:
1005f3a8:	20002474 	.word	0x20002474

1005f3ac <__arm_cp.1_3>:
1005f3ac:	2000247c 	.word	0x2000247c

1005f3b0 <MBM_get>:
1005f3b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f3b2:	4a1a      	ldr	r2, [pc, #104]	@ (1005f41c <__arm_cp.2_0>)
1005f3b4:	6812      	ldr	r2, [r2, #0]
1005f3b6:	6813      	ldr	r3, [r2, #0]
1005f3b8:	f3ef 8210 	mrs	r2, PRIMASK
1005f3bc:	b672      	cpsid	i
1005f3be:	2206      	movs	r2, #6
1005f3c0:	5e9c      	ldrsh	r4, [r3, r2]
1005f3c2:	17e2      	asrs	r2, r4, #31
1005f3c4:	4627      	mov	r7, r4
1005f3c6:	4397      	bics	r7, r2
1005f3c8:	0040      	lsls	r0, r0, #1
1005f3ca:	9000      	str	r0, [sp, #0]
1005f3cc:	5e18      	ldrsh	r0, [r3, r0]
1005f3ce:	4a14      	ldr	r2, [pc, #80]	@ (1005f420 <__arm_cp.2_1>)
1005f3d0:	9102      	str	r1, [sp, #8]
1005f3d2:	1889      	adds	r1, r1, r2
1005f3d4:	0949      	lsrs	r1, r1, #5
1005f3d6:	1c4d      	adds	r5, r1, #1
1005f3d8:	2801      	cmp	r0, #1
1005f3da:	9501      	str	r5, [sp, #4]
1005f3dc:	db05      	blt.n	1005f3ea <MBM_get+0x3a>
1005f3de:	1b42      	subs	r2, r0, r5
1005f3e0:	4256      	negs	r6, r2
1005f3e2:	b212      	sxth	r2, r2
1005f3e4:	13d5      	asrs	r5, r2, #15
1005f3e6:	4035      	ands	r5, r6
1005f3e8:	183f      	adds	r7, r7, r0
1005f3ea:	68d8      	ldr	r0, [r3, #12]
1005f3ec:	2200      	movs	r2, #0
1005f3ee:	5e86      	ldrsh	r6, [r0, r2]
1005f3f0:	b209      	sxth	r1, r1
1005f3f2:	428e      	cmp	r6, r1
1005f3f4:	dd0e      	ble.n	1005f414 <MBM_get+0x64>
1005f3f6:	b23e      	sxth	r6, r7
1005f3f8:	428e      	cmp	r6, r1
1005f3fa:	dd0b      	ble.n	1005f414 <MBM_get+0x64>
1005f3fc:	9900      	ldr	r1, [sp, #0]
1005f3fe:	1859      	adds	r1, r3, r1
1005f400:	1b62      	subs	r2, r4, r5
1005f402:	80da      	strh	r2, [r3, #6]
1005f404:	880a      	ldrh	r2, [r1, #0]
1005f406:	9b01      	ldr	r3, [sp, #4]
1005f408:	1ad2      	subs	r2, r2, r3
1005f40a:	800a      	strh	r2, [r1, #0]
1005f40c:	9902      	ldr	r1, [sp, #8]
1005f40e:	f000 f943 	bl	1005f698 <Mem_Buff_get>
1005f412:	4602      	mov	r2, r0
1005f414:	b662      	cpsie	i
1005f416:	4610      	mov	r0, r2
1005f418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f41a:	46c0      	nop			@ (mov r8, r8)

1005f41c <__arm_cp.2_0>:
1005f41c:	20002474 	.word	0x20002474

1005f420 <__arm_cp.2_1>:
1005f420:	001fffff 	.word	0x001fffff

1005f424 <MBM_release>:
1005f424:	b5b0      	push	{r4, r5, r7, lr}
1005f426:	460d      	mov	r5, r1
1005f428:	4604      	mov	r4, r0
1005f42a:	f000 f95b 	bl	1005f6e4 <Mem_Buff_get_chain_count>
1005f42e:	4601      	mov	r1, r0
1005f430:	4628      	mov	r0, r5
1005f432:	f000 f80b 	bl	1005f44c <MBM_release_balance>
1005f436:	4804      	ldr	r0, [pc, #16]	@ (1005f448 <__arm_cp.3_0>)
1005f438:	6800      	ldr	r0, [r0, #0]
1005f43a:	6800      	ldr	r0, [r0, #0]
1005f43c:	68c0      	ldr	r0, [r0, #12]
1005f43e:	4621      	mov	r1, r4
1005f440:	f000 f90f 	bl	1005f662 <Mem_Buff_release>
1005f444:	bdb0      	pop	{r4, r5, r7, pc}
1005f446:	46c0      	nop			@ (mov r8, r8)

1005f448 <__arm_cp.3_0>:
1005f448:	20002474 	.word	0x20002474

1005f44c <MBM_release_balance>:
1005f44c:	b510      	push	{r4, lr}
1005f44e:	4a0b      	ldr	r2, [pc, #44]	@ (1005f47c <__arm_cp.4_0>)
1005f450:	6812      	ldr	r2, [r2, #0]
1005f452:	6812      	ldr	r2, [r2, #0]
1005f454:	f3ef 8310 	mrs	r3, PRIMASK
1005f458:	b672      	cpsid	i
1005f45a:	0043      	lsls	r3, r0, #1
1005f45c:	5ed0      	ldrsh	r0, [r2, r3]
1005f45e:	1844      	adds	r4, r0, r1
1005f460:	52d4      	strh	r4, [r2, r3]
1005f462:	b20b      	sxth	r3, r1
1005f464:	18c3      	adds	r3, r0, r3
1005f466:	2b01      	cmp	r3, #1
1005f468:	db02      	blt.n	1005f470 <MBM_release_balance+0x24>
1005f46a:	4243      	negs	r3, r0
1005f46c:	0bc1      	lsrs	r1, r0, #15
1005f46e:	4019      	ands	r1, r3
1005f470:	88d0      	ldrh	r0, [r2, #6]
1005f472:	1808      	adds	r0, r1, r0
1005f474:	80d0      	strh	r0, [r2, #6]
1005f476:	b662      	cpsie	i
1005f478:	bd10      	pop	{r4, pc}
1005f47a:	46c0      	nop			@ (mov r8, r8)

1005f47c <__arm_cp.4_0>:
1005f47c:	20002474 	.word	0x20002474

1005f480 <MBM_get_available_mem_buffers>:
1005f480:	4908      	ldr	r1, [pc, #32]	@ (1005f4a4 <__arm_cp.5_0>)
1005f482:	6809      	ldr	r1, [r1, #0]
1005f484:	680a      	ldr	r2, [r1, #0]
1005f486:	f3ef 8110 	mrs	r1, PRIMASK
1005f48a:	b672      	cpsid	i
1005f48c:	2106      	movs	r1, #6
1005f48e:	5e51      	ldrsh	r1, [r2, r1]
1005f490:	17cb      	asrs	r3, r1, #31
1005f492:	4399      	bics	r1, r3
1005f494:	0040      	lsls	r0, r0, #1
1005f496:	5e10      	ldrsh	r0, [r2, r0]
1005f498:	2800      	cmp	r0, #0
1005f49a:	dd00      	ble.n	1005f49e <MBM_get_available_mem_buffers+0x1e>
1005f49c:	1809      	adds	r1, r1, r0
1005f49e:	b288      	uxth	r0, r1
1005f4a0:	b662      	cpsie	i
1005f4a2:	4770      	bx	lr

1005f4a4 <__arm_cp.5_0>:
1005f4a4:	20002474 	.word	0x20002474

1005f4a8 <MBM_resize>:
1005f4a8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f4aa:	2481      	movs	r4, #129	@ 0x81
1005f4ac:	2800      	cmp	r0, #0
1005f4ae:	d032      	beq.n	1005f516 <MBM_resize+0x6e>
1005f4b0:	4606      	mov	r6, r0
1005f4b2:	9102      	str	r1, [sp, #8]
1005f4b4:	9401      	str	r4, [sp, #4]
1005f4b6:	4819      	ldr	r0, [pc, #100]	@ (1005f51c <__arm_cp.6_0>)
1005f4b8:	6800      	ldr	r0, [r0, #0]
1005f4ba:	6800      	ldr	r0, [r0, #0]
1005f4bc:	9000      	str	r0, [sp, #0]
1005f4be:	1e50      	subs	r0, r2, #1
1005f4c0:	211f      	movs	r1, #31
1005f4c2:	4301      	orrs	r1, r0
1005f4c4:	1c4c      	adds	r4, r1, #1
1005f4c6:	b2a7      	uxth	r7, r4
1005f4c8:	4630      	mov	r0, r6
1005f4ca:	f000 f913 	bl	1005f6f4 <Mem_Buff_get_chain_size>
1005f4ce:	4605      	mov	r5, r0
1005f4d0:	4287      	cmp	r7, r0
1005f4d2:	d90c      	bls.n	1005f4ee <MBM_resize+0x46>
1005f4d4:	1b60      	subs	r0, r4, r5
1005f4d6:	b281      	uxth	r1, r0
1005f4d8:	9802      	ldr	r0, [sp, #8]
1005f4da:	f7ff ff69 	bl	1005f3b0 <MBM_get>
1005f4de:	2800      	cmp	r0, #0
1005f4e0:	9c01      	ldr	r4, [sp, #4]
1005f4e2:	d018      	beq.n	1005f516 <MBM_resize+0x6e>
1005f4e4:	4601      	mov	r1, r0
1005f4e6:	4630      	mov	r0, r6
1005f4e8:	f000 fa29 	bl	1005f93e <Mem_Buff_append>
1005f4ec:	e012      	b.n	1005f514 <MBM_resize+0x6c>
1005f4ee:	42af      	cmp	r7, r5
1005f4f0:	d210      	bcs.n	1005f514 <MBM_resize+0x6c>
1005f4f2:	9800      	ldr	r0, [sp, #0]
1005f4f4:	68c0      	ldr	r0, [r0, #12]
1005f4f6:	4631      	mov	r1, r6
1005f4f8:	463a      	mov	r2, r7
1005f4fa:	f000 f907 	bl	1005f70c <Mem_Buff_resize>
1005f4fe:	4604      	mov	r4, r0
1005f500:	1e78      	subs	r0, r7, #1
1005f502:	0940      	lsrs	r0, r0, #5
1005f504:	1e69      	subs	r1, r5, #1
1005f506:	0949      	lsrs	r1, r1, #5
1005f508:	1a08      	subs	r0, r1, r0
1005f50a:	b281      	uxth	r1, r0
1005f50c:	9802      	ldr	r0, [sp, #8]
1005f50e:	f7ff ff9d 	bl	1005f44c <MBM_release_balance>
1005f512:	e000      	b.n	1005f516 <MBM_resize+0x6e>
1005f514:	2400      	movs	r4, #0
1005f516:	4620      	mov	r0, r4
1005f518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f51a:	46c0      	nop			@ (mov r8, r8)

1005f51c <__arm_cp.6_0>:
1005f51c:	20002474 	.word	0x20002474

1005f520 <MBM_reserve>:
1005f520:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f522:	460c      	mov	r4, r1
1005f524:	4601      	mov	r1, r0
1005f526:	481c      	ldr	r0, [pc, #112]	@ (1005f598 <__arm_cp.7_0>)
1005f528:	6800      	ldr	r0, [r0, #0]
1005f52a:	6805      	ldr	r5, [r0, #0]
1005f52c:	8928      	ldrh	r0, [r5, #8]
1005f52e:	68ea      	ldr	r2, [r5, #12]
1005f530:	8852      	ldrh	r2, [r2, #2]
1005f532:	1a13      	subs	r3, r2, r0
1005f534:	42a3      	cmp	r3, r4
1005f536:	da26      	bge.n	1005f586 <MBM_reserve+0x66>
1005f538:	1aa1      	subs	r1, r4, r2
1005f53a:	1808      	adds	r0, r1, r0
1005f53c:	a901      	add	r1, sp, #4
1005f53e:	8008      	strh	r0, [r1, #0]
1005f540:	4816      	ldr	r0, [pc, #88]	@ (1005f59c <__arm_cp.7_1>)
1005f542:	6800      	ldr	r0, [r0, #0]
1005f544:	6980      	ldr	r0, [r0, #24]
1005f546:	2142      	movs	r1, #66	@ 0x42
1005f548:	2240      	movs	r2, #64	@ 0x40
1005f54a:	2303      	movs	r3, #3
1005f54c:	f7f4 faf0 	bl	10053b30 <aci_event_fifo_push_header>
1005f550:	2800      	cmp	r0, #0
1005f552:	d017      	beq.n	1005f584 <MBM_reserve+0x64>
1005f554:	4604      	mov	r4, r0
1005f556:	2202      	movs	r2, #2
1005f558:	72c2      	strb	r2, [r0, #11]
1005f55a:	2009      	movs	r0, #9
1005f55c:	72a0      	strb	r0, [r4, #10]
1005f55e:	4620      	mov	r0, r4
1005f560:	300c      	adds	r0, #12
1005f562:	a901      	add	r1, sp, #4
1005f564:	f7f1 fd98 	bl	10051098 <BLEPLAT_MemCpy>
1005f568:	2000      	movs	r0, #0
1005f56a:	7260      	strb	r0, [r4, #9]
1005f56c:	2106      	movs	r1, #6
1005f56e:	7221      	strb	r1, [r4, #8]
1005f570:	71e0      	strb	r0, [r4, #7]
1005f572:	71a1      	strb	r1, [r4, #6]
1005f574:	20ff      	movs	r0, #255	@ 0xff
1005f576:	7160      	strb	r0, [r4, #5]
1005f578:	2082      	movs	r0, #130	@ 0x82
1005f57a:	7120      	strb	r0, [r4, #4]
1005f57c:	2042      	movs	r0, #66	@ 0x42
1005f57e:	4621      	mov	r1, r4
1005f580:	f7f4 fb73 	bl	10053c6a <aci_event_fifo_push>
1005f584:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f586:	2003      	movs	r0, #3
1005f588:	4622      	mov	r2, r4
1005f58a:	f000 f809 	bl	1005f5a0 <MBM_move_class>
1005f58e:	8928      	ldrh	r0, [r5, #8]
1005f590:	1900      	adds	r0, r0, r4
1005f592:	8128      	strh	r0, [r5, #8]
1005f594:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f596:	46c0      	nop			@ (mov r8, r8)

1005f598 <__arm_cp.7_0>:
1005f598:	20002474 	.word	0x20002474

1005f59c <__arm_cp.7_1>:
1005f59c:	20002418 	.word	0x20002418

1005f5a0 <MBM_move_class>:
1005f5a0:	b510      	push	{r4, lr}
1005f5a2:	4b08      	ldr	r3, [pc, #32]	@ (1005f5c4 <__arm_cp.8_0>)
1005f5a4:	681b      	ldr	r3, [r3, #0]
1005f5a6:	681b      	ldr	r3, [r3, #0]
1005f5a8:	f3ef 8410 	mrs	r4, PRIMASK
1005f5ac:	b672      	cpsid	i
1005f5ae:	0040      	lsls	r0, r0, #1
1005f5b0:	5a1c      	ldrh	r4, [r3, r0]
1005f5b2:	1aa4      	subs	r4, r4, r2
1005f5b4:	521c      	strh	r4, [r3, r0]
1005f5b6:	0048      	lsls	r0, r1, #1
1005f5b8:	5a19      	ldrh	r1, [r3, r0]
1005f5ba:	1889      	adds	r1, r1, r2
1005f5bc:	5219      	strh	r1, [r3, r0]
1005f5be:	b662      	cpsie	i
1005f5c0:	bd10      	pop	{r4, pc}
1005f5c2:	46c0      	nop			@ (mov r8, r8)

1005f5c4 <__arm_cp.8_0>:
1005f5c4:	20002474 	.word	0x20002474

1005f5c8 <MBM_unreserve>:
1005f5c8:	b5b0      	push	{r4, r5, r7, lr}
1005f5ca:	460c      	mov	r4, r1
1005f5cc:	4905      	ldr	r1, [pc, #20]	@ (1005f5e4 <__arm_cp.9_0>)
1005f5ce:	6809      	ldr	r1, [r1, #0]
1005f5d0:	680d      	ldr	r5, [r1, #0]
1005f5d2:	2103      	movs	r1, #3
1005f5d4:	4622      	mov	r2, r4
1005f5d6:	f7ff ffe3 	bl	1005f5a0 <MBM_move_class>
1005f5da:	8928      	ldrh	r0, [r5, #8]
1005f5dc:	1b00      	subs	r0, r0, r4
1005f5de:	8128      	strh	r0, [r5, #8]
1005f5e0:	bdb0      	pop	{r4, r5, r7, pc}
1005f5e2:	46c0      	nop			@ (mov r8, r8)

1005f5e4 <__arm_cp.9_0>:
1005f5e4:	20002474 	.word	0x20002474

1005f5e8 <csmem_init>:
1005f5e8:	4801      	ldr	r0, [pc, #4]	@ (1005f5f0 <__arm_cp.0_0>)
1005f5ea:	6841      	ldr	r1, [r0, #4]
1005f5ec:	6001      	str	r1, [r0, #0]
1005f5ee:	4770      	bx	lr

1005f5f0 <__arm_cp.0_0>:
1005f5f0:	20002478 	.word	0x20002478

1005f5f4 <csmem_mem_assign>:
1005f5f4:	b570      	push	{r4, r5, r6, lr}
1005f5f6:	4614      	mov	r4, r2
1005f5f8:	4605      	mov	r5, r0
1005f5fa:	434c      	muls	r4, r1
1005f5fc:	6800      	ldr	r0, [r0, #0]
1005f5fe:	1e40      	subs	r0, r0, #1
1005f600:	2103      	movs	r1, #3
1005f602:	4301      	orrs	r1, r0
1005f604:	1c4e      	adds	r6, r1, #1
1005f606:	2100      	movs	r1, #0
1005f608:	4630      	mov	r0, r6
1005f60a:	4622      	mov	r2, r4
1005f60c:	f7f1 fd54 	bl	100510b8 <BLEPLAT_MemSet>
1005f610:	1930      	adds	r0, r6, r4
1005f612:	6028      	str	r0, [r5, #0]
1005f614:	4630      	mov	r0, r6
1005f616:	bd70      	pop	{r4, r5, r6, pc}

1005f618 <csmem_mem_0_assign>:
1005f618:	b580      	push	{r7, lr}
1005f61a:	460a      	mov	r2, r1
1005f61c:	4601      	mov	r1, r0
1005f61e:	4802      	ldr	r0, [pc, #8]	@ (1005f628 <__arm_cp.3_0>)
1005f620:	f7ff ffe8 	bl	1005f5f4 <csmem_mem_assign>
1005f624:	bd80      	pop	{r7, pc}
1005f626:	46c0      	nop			@ (mov r8, r8)

1005f628 <__arm_cp.3_0>:
1005f628:	20002478 	.word	0x20002478

1005f62c <Mem_Buff_init>:
1005f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f62e:	b081      	sub	sp, #4
1005f630:	4605      	mov	r5, r0
1005f632:	8840      	ldrh	r0, [r0, #2]
1005f634:	2486      	movs	r4, #134	@ 0x86
1005f636:	2800      	cmp	r0, #0
1005f638:	d010      	beq.n	1005f65c <Mem_Buff_init+0x30>
1005f63a:	68ae      	ldr	r6, [r5, #8]
1005f63c:	2e00      	cmp	r6, #0
1005f63e:	d00d      	beq.n	1005f65c <Mem_Buff_init+0x30>
1005f640:	2400      	movs	r4, #0
1005f642:	606c      	str	r4, [r5, #4]
1005f644:	802c      	strh	r4, [r5, #0]
1005f646:	4627      	mov	r7, r4
1005f648:	6034      	str	r4, [r6, #0]
1005f64a:	4628      	mov	r0, r5
1005f64c:	4631      	mov	r1, r6
1005f64e:	f000 f808 	bl	1005f662 <Mem_Buff_release>
1005f652:	3624      	adds	r6, #36	@ 0x24
1005f654:	1c7f      	adds	r7, r7, #1
1005f656:	8868      	ldrh	r0, [r5, #2]
1005f658:	4287      	cmp	r7, r0
1005f65a:	d3f5      	bcc.n	1005f648 <Mem_Buff_init+0x1c>
1005f65c:	4620      	mov	r0, r4
1005f65e:	b001      	add	sp, #4
1005f660:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f662 <Mem_Buff_release>:
1005f662:	b510      	push	{r4, lr}
1005f664:	2900      	cmp	r1, #0
1005f666:	d015      	beq.n	1005f694 <Mem_Buff_release+0x32>
1005f668:	2200      	movs	r2, #0
1005f66a:	460c      	mov	r4, r1
1005f66c:	4623      	mov	r3, r4
1005f66e:	1c52      	adds	r2, r2, #1
1005f670:	6824      	ldr	r4, [r4, #0]
1005f672:	2c00      	cmp	r4, #0
1005f674:	d1fa      	bne.n	1005f66c <Mem_Buff_release+0xa>
1005f676:	f3ef 8410 	mrs	r4, PRIMASK
1005f67a:	b672      	cpsid	i
1005f67c:	6844      	ldr	r4, [r0, #4]
1005f67e:	6041      	str	r1, [r0, #4]
1005f680:	601c      	str	r4, [r3, #0]
1005f682:	8801      	ldrh	r1, [r0, #0]
1005f684:	1889      	adds	r1, r1, r2
1005f686:	8001      	strh	r1, [r0, #0]
1005f688:	b662      	cpsie	i
1005f68a:	2000      	movs	r0, #0
1005f68c:	f001 fdc2 	bl	10061214 <tsk_signal_resource_idx>
1005f690:	f7f0 ff1b 	bl	100504ca <BLE_STACK_ProcessRequest>
1005f694:	bd10      	pop	{r4, pc}
	...

1005f698 <Mem_Buff_get>:
1005f698:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f69a:	4a11      	ldr	r2, [pc, #68]	@ (1005f6e0 <__arm_cp.2_0>)
1005f69c:	1889      	adds	r1, r1, r2
1005f69e:	0949      	lsrs	r1, r1, #5
1005f6a0:	1c4a      	adds	r2, r1, #1
1005f6a2:	b294      	uxth	r4, r2
1005f6a4:	f3ef 8110 	mrs	r1, PRIMASK
1005f6a8:	b672      	cpsid	i
1005f6aa:	2100      	movs	r1, #0
1005f6ac:	2c00      	cmp	r4, #0
1005f6ae:	d013      	beq.n	1005f6d8 <Mem_Buff_get+0x40>
1005f6b0:	8803      	ldrh	r3, [r0, #0]
1005f6b2:	429c      	cmp	r4, r3
1005f6b4:	d810      	bhi.n	1005f6d8 <Mem_Buff_get+0x40>
1005f6b6:	1e64      	subs	r4, r4, #1
1005f6b8:	6841      	ldr	r1, [r0, #4]
1005f6ba:	460d      	mov	r5, r1
1005f6bc:	d006      	beq.n	1005f6cc <Mem_Buff_get+0x34>
1005f6be:	2600      	movs	r6, #0
1005f6c0:	460d      	mov	r5, r1
1005f6c2:	682d      	ldr	r5, [r5, #0]
1005f6c4:	1c76      	adds	r6, r6, #1
1005f6c6:	b2b7      	uxth	r7, r6
1005f6c8:	42bc      	cmp	r4, r7
1005f6ca:	d8fa      	bhi.n	1005f6c2 <Mem_Buff_get+0x2a>
1005f6cc:	682c      	ldr	r4, [r5, #0]
1005f6ce:	6044      	str	r4, [r0, #4]
1005f6d0:	2400      	movs	r4, #0
1005f6d2:	602c      	str	r4, [r5, #0]
1005f6d4:	1a9a      	subs	r2, r3, r2
1005f6d6:	8002      	strh	r2, [r0, #0]
1005f6d8:	b662      	cpsie	i
1005f6da:	4608      	mov	r0, r1
1005f6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f6de:	46c0      	nop			@ (mov r8, r8)

1005f6e0 <__arm_cp.2_0>:
1005f6e0:	001fffff 	.word	0x001fffff

1005f6e4 <Mem_Buff_get_chain_count>:
1005f6e4:	2100      	movs	r1, #0
1005f6e6:	2800      	cmp	r0, #0
1005f6e8:	d002      	beq.n	1005f6f0 <Mem_Buff_get_chain_count+0xc>
1005f6ea:	6800      	ldr	r0, [r0, #0]
1005f6ec:	1c49      	adds	r1, r1, #1
1005f6ee:	e7fa      	b.n	1005f6e6 <Mem_Buff_get_chain_count+0x2>
1005f6f0:	b288      	uxth	r0, r1
1005f6f2:	4770      	bx	lr

1005f6f4 <Mem_Buff_get_chain_size>:
1005f6f4:	2800      	cmp	r0, #0
1005f6f6:	d006      	beq.n	1005f706 <Mem_Buff_get_chain_size+0x12>
1005f6f8:	2100      	movs	r1, #0
1005f6fa:	6800      	ldr	r0, [r0, #0]
1005f6fc:	1c49      	adds	r1, r1, #1
1005f6fe:	2800      	cmp	r0, #0
1005f700:	d1fb      	bne.n	1005f6fa <Mem_Buff_get_chain_size+0x6>
1005f702:	0148      	lsls	r0, r1, #5
1005f704:	e000      	b.n	1005f708 <Mem_Buff_get_chain_size+0x14>
1005f706:	2000      	movs	r0, #0
1005f708:	b280      	uxth	r0, r0
1005f70a:	4770      	bx	lr

1005f70c <Mem_Buff_resize>:
1005f70c:	b570      	push	{r4, r5, r6, lr}
1005f70e:	2400      	movs	r4, #0
1005f710:	2900      	cmp	r1, #0
1005f712:	d00a      	beq.n	1005f72a <Mem_Buff_resize+0x1e>
1005f714:	2600      	movs	r6, #0
1005f716:	460d      	mov	r5, r1
1005f718:	6809      	ldr	r1, [r1, #0]
1005f71a:	4633      	mov	r3, r6
1005f71c:	3320      	adds	r3, #32
1005f71e:	b29e      	uxth	r6, r3
1005f720:	4296      	cmp	r6, r2
1005f722:	d20e      	bcs.n	1005f742 <Mem_Buff_resize+0x36>
1005f724:	2900      	cmp	r1, #0
1005f726:	d1f6      	bne.n	1005f716 <Mem_Buff_resize+0xa>
1005f728:	e001      	b.n	1005f72e <Mem_Buff_resize+0x22>
1005f72a:	4623      	mov	r3, r4
1005f72c:	4625      	mov	r5, r4
1005f72e:	1ad1      	subs	r1, r2, r3
1005f730:	b289      	uxth	r1, r1
1005f732:	f7ff ffb1 	bl	1005f698 <Mem_Buff_get>
1005f736:	6028      	str	r0, [r5, #0]
1005f738:	2800      	cmp	r0, #0
1005f73a:	d10a      	bne.n	1005f752 <Mem_Buff_resize+0x46>
1005f73c:	2079      	movs	r0, #121	@ 0x79
1005f73e:	43c4      	mvns	r4, r0
1005f740:	e007      	b.n	1005f752 <Mem_Buff_resize+0x46>
1005f742:	2900      	cmp	r1, #0
1005f744:	d004      	beq.n	1005f750 <Mem_Buff_resize+0x44>
1005f746:	f7ff ff8c 	bl	1005f662 <Mem_Buff_release>
1005f74a:	2400      	movs	r4, #0
1005f74c:	602c      	str	r4, [r5, #0]
1005f74e:	e000      	b.n	1005f752 <Mem_Buff_resize+0x46>
1005f750:	2400      	movs	r4, #0
1005f752:	b2e0      	uxtb	r0, r4
1005f754:	bd70      	pop	{r4, r5, r6, pc}

1005f756 <Mem_Buff_get_buff_off>:
1005f756:	2900      	cmp	r1, #0
1005f758:	d008      	beq.n	1005f76c <Mem_Buff_get_buff_off+0x16>
1005f75a:	2800      	cmp	r0, #0
1005f75c:	d009      	beq.n	1005f772 <Mem_Buff_get_buff_off+0x1c>
1005f75e:	b28b      	uxth	r3, r1
1005f760:	2b20      	cmp	r3, #32
1005f762:	d304      	bcc.n	1005f76e <Mem_Buff_get_buff_off+0x18>
1005f764:	6800      	ldr	r0, [r0, #0]
1005f766:	3920      	subs	r1, #32
1005f768:	040b      	lsls	r3, r1, #16
1005f76a:	d1f6      	bne.n	1005f75a <Mem_Buff_get_buff_off+0x4>
1005f76c:	2100      	movs	r1, #0
1005f76e:	8011      	strh	r1, [r2, #0]
1005f770:	4770      	bx	lr
1005f772:	2000      	movs	r0, #0
1005f774:	4770      	bx	lr

1005f776 <Mem_Buff_write>:
1005f776:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f778:	b081      	sub	sp, #4
1005f77a:	4606      	mov	r6, r0
1005f77c:	0950      	lsrs	r0, r2, #5
1005f77e:	0604      	lsls	r4, r0, #24
1005f780:	d004      	beq.n	1005f78c <Mem_Buff_write+0x16>
1005f782:	2e00      	cmp	r6, #0
1005f784:	d02d      	beq.n	1005f7e2 <Mem_Buff_write+0x6c>
1005f786:	6836      	ldr	r6, [r6, #0]
1005f788:	1e40      	subs	r0, r0, #1
1005f78a:	e7f8      	b.n	1005f77e <Mem_Buff_write+0x8>
1005f78c:	461c      	mov	r4, r3
1005f78e:	1e5b      	subs	r3, r3, #1
1005f790:	4620      	mov	r0, r4
1005f792:	4198      	sbcs	r0, r3
1005f794:	2c00      	cmp	r4, #0
1005f796:	d01f      	beq.n	1005f7d8 <Mem_Buff_write+0x62>
1005f798:	2e00      	cmp	r6, #0
1005f79a:	d01d      	beq.n	1005f7d8 <Mem_Buff_write+0x62>
1005f79c:	201f      	movs	r0, #31
1005f79e:	4002      	ands	r2, r0
1005f7a0:	2020      	movs	r0, #32
1005f7a2:	1a85      	subs	r5, r0, r2
1005f7a4:	b2a8      	uxth	r0, r5
1005f7a6:	b2a3      	uxth	r3, r4
1005f7a8:	4298      	cmp	r0, r3
1005f7aa:	d300      	bcc.n	1005f7ae <Mem_Buff_write+0x38>
1005f7ac:	4625      	mov	r5, r4
1005f7ae:	9500      	str	r5, [sp, #0]
1005f7b0:	b2af      	uxth	r7, r5
1005f7b2:	18b0      	adds	r0, r6, r2
1005f7b4:	1d00      	adds	r0, r0, #4
1005f7b6:	463a      	mov	r2, r7
1005f7b8:	460d      	mov	r5, r1
1005f7ba:	f7f1 fc6d 	bl	10051098 <BLEPLAT_MemCpy>
1005f7be:	9800      	ldr	r0, [sp, #0]
1005f7c0:	1a24      	subs	r4, r4, r0
1005f7c2:	b2a1      	uxth	r1, r4
1005f7c4:	1e4a      	subs	r2, r1, #1
1005f7c6:	4608      	mov	r0, r1
1005f7c8:	4190      	sbcs	r0, r2
1005f7ca:	2900      	cmp	r1, #0
1005f7cc:	d004      	beq.n	1005f7d8 <Mem_Buff_write+0x62>
1005f7ce:	19e9      	adds	r1, r5, r7
1005f7d0:	6836      	ldr	r6, [r6, #0]
1005f7d2:	2200      	movs	r2, #0
1005f7d4:	2e00      	cmp	r6, #0
1005f7d6:	d1e3      	bne.n	1005f7a0 <Mem_Buff_write+0x2a>
1005f7d8:	2800      	cmp	r0, #0
1005f7da:	d003      	beq.n	1005f7e4 <Mem_Buff_write+0x6e>
1005f7dc:	207e      	movs	r0, #126	@ 0x7e
1005f7de:	43c0      	mvns	r0, r0
1005f7e0:	e000      	b.n	1005f7e4 <Mem_Buff_write+0x6e>
1005f7e2:	2081      	movs	r0, #129	@ 0x81
1005f7e4:	b2c0      	uxtb	r0, r0
1005f7e6:	b001      	add	sp, #4
1005f7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f7ea <Mem_Buff_read>:
1005f7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f7ec:	b081      	sub	sp, #4
1005f7ee:	460d      	mov	r5, r1
1005f7f0:	4606      	mov	r6, r0
1005f7f2:	2a00      	cmp	r2, #0
1005f7f4:	d008      	beq.n	1005f808 <Mem_Buff_read+0x1e>
1005f7f6:	2e00      	cmp	r6, #0
1005f7f8:	d02a      	beq.n	1005f850 <Mem_Buff_read+0x66>
1005f7fa:	b290      	uxth	r0, r2
1005f7fc:	2820      	cmp	r0, #32
1005f7fe:	d306      	bcc.n	1005f80e <Mem_Buff_read+0x24>
1005f800:	6836      	ldr	r6, [r6, #0]
1005f802:	3a20      	subs	r2, #32
1005f804:	0410      	lsls	r0, r2, #16
1005f806:	d1f6      	bne.n	1005f7f6 <Mem_Buff_read+0xc>
1005f808:	2e00      	cmp	r6, #0
1005f80a:	d021      	beq.n	1005f850 <Mem_Buff_read+0x66>
1005f80c:	2200      	movs	r2, #0
1005f80e:	2b00      	cmp	r3, #0
1005f810:	d020      	beq.n	1005f854 <Mem_Buff_read+0x6a>
1005f812:	2020      	movs	r0, #32
1005f814:	1a84      	subs	r4, r0, r2
1005f816:	b2a0      	uxth	r0, r4
1005f818:	b299      	uxth	r1, r3
1005f81a:	4288      	cmp	r0, r1
1005f81c:	d300      	bcc.n	1005f820 <Mem_Buff_read+0x36>
1005f81e:	461c      	mov	r4, r3
1005f820:	b2a7      	uxth	r7, r4
1005f822:	b290      	uxth	r0, r2
1005f824:	1830      	adds	r0, r6, r0
1005f826:	1d01      	adds	r1, r0, #4
1005f828:	4628      	mov	r0, r5
1005f82a:	463a      	mov	r2, r7
1005f82c:	9300      	str	r3, [sp, #0]
1005f82e:	f7f1 fc33 	bl	10051098 <BLEPLAT_MemCpy>
1005f832:	9b00      	ldr	r3, [sp, #0]
1005f834:	1b1b      	subs	r3, r3, r4
1005f836:	0418      	lsls	r0, r3, #16
1005f838:	d004      	beq.n	1005f844 <Mem_Buff_read+0x5a>
1005f83a:	19ed      	adds	r5, r5, r7
1005f83c:	6836      	ldr	r6, [r6, #0]
1005f83e:	2200      	movs	r2, #0
1005f840:	2e00      	cmp	r6, #0
1005f842:	d1e6      	bne.n	1005f812 <Mem_Buff_read+0x28>
1005f844:	b298      	uxth	r0, r3
1005f846:	2800      	cmp	r0, #0
1005f848:	d005      	beq.n	1005f856 <Mem_Buff_read+0x6c>
1005f84a:	207e      	movs	r0, #126	@ 0x7e
1005f84c:	43c0      	mvns	r0, r0
1005f84e:	e002      	b.n	1005f856 <Mem_Buff_read+0x6c>
1005f850:	2081      	movs	r0, #129	@ 0x81
1005f852:	e000      	b.n	1005f856 <Mem_Buff_read+0x6c>
1005f854:	2000      	movs	r0, #0
1005f856:	b2c0      	uxtb	r0, r0
1005f858:	b001      	add	sp, #4
1005f85a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f85c <Mem_Buff_cmp>:
1005f85c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f85e:	b083      	sub	sp, #12
1005f860:	9102      	str	r1, [sp, #8]
1005f862:	4606      	mov	r6, r0
1005f864:	2a00      	cmp	r2, #0
1005f866:	d008      	beq.n	1005f87a <Mem_Buff_cmp+0x1e>
1005f868:	2e00      	cmp	r6, #0
1005f86a:	d033      	beq.n	1005f8d4 <Mem_Buff_cmp+0x78>
1005f86c:	b290      	uxth	r0, r2
1005f86e:	2820      	cmp	r0, #32
1005f870:	d306      	bcc.n	1005f880 <Mem_Buff_cmp+0x24>
1005f872:	6836      	ldr	r6, [r6, #0]
1005f874:	3a20      	subs	r2, #32
1005f876:	0410      	lsls	r0, r2, #16
1005f878:	d1f6      	bne.n	1005f868 <Mem_Buff_cmp+0xc>
1005f87a:	2e00      	cmp	r6, #0
1005f87c:	d02a      	beq.n	1005f8d4 <Mem_Buff_cmp+0x78>
1005f87e:	2200      	movs	r2, #0
1005f880:	2b00      	cmp	r3, #0
1005f882:	9301      	str	r3, [sp, #4]
1005f884:	d020      	beq.n	1005f8c8 <Mem_Buff_cmp+0x6c>
1005f886:	2700      	movs	r7, #0
1005f888:	461d      	mov	r5, r3
1005f88a:	b290      	uxth	r0, r2
1005f88c:	281f      	cmp	r0, #31
1005f88e:	d814      	bhi.n	1005f8ba <Mem_Buff_cmp+0x5e>
1005f890:	2120      	movs	r1, #32
1005f892:	1a8c      	subs	r4, r1, r2
1005f894:	b2a1      	uxth	r1, r4
1005f896:	b2aa      	uxth	r2, r5
1005f898:	4291      	cmp	r1, r2
1005f89a:	d300      	bcc.n	1005f89e <Mem_Buff_cmp+0x42>
1005f89c:	462c      	mov	r4, r5
1005f89e:	b2a2      	uxth	r2, r4
1005f8a0:	b2b9      	uxth	r1, r7
1005f8a2:	9b02      	ldr	r3, [sp, #8]
1005f8a4:	1859      	adds	r1, r3, r1
1005f8a6:	1830      	adds	r0, r6, r0
1005f8a8:	1d00      	adds	r0, r0, #4
1005f8aa:	f7f1 fc15 	bl	100510d8 <BLEPLAT_MemCmp>
1005f8ae:	2800      	cmp	r0, #0
1005f8b0:	d10f      	bne.n	1005f8d2 <Mem_Buff_cmp+0x76>
1005f8b2:	1b2d      	subs	r5, r5, r4
1005f8b4:	19e7      	adds	r7, r4, r7
1005f8b6:	2200      	movs	r2, #0
1005f8b8:	e000      	b.n	1005f8bc <Mem_Buff_cmp+0x60>
1005f8ba:	3a20      	subs	r2, #32
1005f8bc:	0428      	lsls	r0, r5, #16
1005f8be:	d004      	beq.n	1005f8ca <Mem_Buff_cmp+0x6e>
1005f8c0:	6836      	ldr	r6, [r6, #0]
1005f8c2:	2e00      	cmp	r6, #0
1005f8c4:	d1e1      	bne.n	1005f88a <Mem_Buff_cmp+0x2e>
1005f8c6:	e000      	b.n	1005f8ca <Mem_Buff_cmp+0x6e>
1005f8c8:	2700      	movs	r7, #0
1005f8ca:	b2b8      	uxth	r0, r7
1005f8cc:	9b01      	ldr	r3, [sp, #4]
1005f8ce:	1a1b      	subs	r3, r3, r0
1005f8d0:	e000      	b.n	1005f8d4 <Mem_Buff_cmp+0x78>
1005f8d2:	4603      	mov	r3, r0
1005f8d4:	4618      	mov	r0, r3
1005f8d6:	b003      	add	sp, #12
1005f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f8da <Mem_Buff_block_copy>:
1005f8da:	b510      	push	{r4, lr}
1005f8dc:	1e52      	subs	r2, r2, #1
1005f8de:	231f      	movs	r3, #31
1005f8e0:	4313      	orrs	r3, r2
1005f8e2:	b29a      	uxth	r2, r3
1005f8e4:	1c53      	adds	r3, r2, #1
1005f8e6:	b29a      	uxth	r2, r3
1005f8e8:	429a      	cmp	r2, r3
1005f8ea:	d001      	beq.n	1005f8f0 <Mem_Buff_block_copy+0x16>
1005f8ec:	2200      	movs	r2, #0
1005f8ee:	e00d      	b.n	1005f90c <Mem_Buff_block_copy+0x32>
1005f8f0:	0953      	lsrs	r3, r2, #5
1005f8f2:	460a      	mov	r2, r1
1005f8f4:	2100      	movs	r1, #0
1005f8f6:	1854      	adds	r4, r2, r1
1005f8f8:	6864      	ldr	r4, [r4, #4]
1005f8fa:	5044      	str	r4, [r0, r1]
1005f8fc:	1d09      	adds	r1, r1, #4
1005f8fe:	2920      	cmp	r1, #32
1005f900:	d1f9      	bne.n	1005f8f6 <Mem_Buff_block_copy+0x1c>
1005f902:	6811      	ldr	r1, [r2, #0]
1005f904:	3020      	adds	r0, #32
1005f906:	1e5b      	subs	r3, r3, #1
1005f908:	041c      	lsls	r4, r3, #16
1005f90a:	d1f2      	bne.n	1005f8f2 <Mem_Buff_block_copy+0x18>
1005f90c:	4610      	mov	r0, r2
1005f90e:	bd10      	pop	{r4, pc}

1005f910 <Mem_Buff_block_write>:
1005f910:	b5b0      	push	{r4, r5, r7, lr}
1005f912:	1e52      	subs	r2, r2, #1
1005f914:	231f      	movs	r3, #31
1005f916:	4313      	orrs	r3, r2
1005f918:	b29a      	uxth	r2, r3
1005f91a:	1c53      	adds	r3, r2, #1
1005f91c:	b29a      	uxth	r2, r3
1005f91e:	429a      	cmp	r2, r3
1005f920:	d10c      	bne.n	1005f93c <Mem_Buff_block_write+0x2c>
1005f922:	0952      	lsrs	r2, r2, #5
1005f924:	1d03      	adds	r3, r0, #4
1005f926:	2400      	movs	r4, #0
1005f928:	590d      	ldr	r5, [r1, r4]
1005f92a:	511d      	str	r5, [r3, r4]
1005f92c:	1d24      	adds	r4, r4, #4
1005f92e:	2c20      	cmp	r4, #32
1005f930:	d1fa      	bne.n	1005f928 <Mem_Buff_block_write+0x18>
1005f932:	6800      	ldr	r0, [r0, #0]
1005f934:	3120      	adds	r1, #32
1005f936:	1e52      	subs	r2, r2, #1
1005f938:	0413      	lsls	r3, r2, #16
1005f93a:	d1f3      	bne.n	1005f924 <Mem_Buff_block_write+0x14>
1005f93c:	bdb0      	pop	{r4, r5, r7, pc}

1005f93e <Mem_Buff_append>:
1005f93e:	4602      	mov	r2, r0
1005f940:	6800      	ldr	r0, [r0, #0]
1005f942:	2800      	cmp	r0, #0
1005f944:	d1fb      	bne.n	1005f93e <Mem_Buff_append>
1005f946:	6011      	str	r1, [r2, #0]
1005f948:	4770      	bx	lr
	...

1005f94c <BlueNRG_Stack_Initialize_RAM_check>:
1005f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f94e:	b097      	sub	sp, #92	@ 0x5c
1005f950:	4ce5      	ldr	r4, [pc, #916]	@ (1005fce8 <__arm_cp.0_4>)
1005f952:	2067      	movs	r0, #103	@ 0x67
1005f954:	43c5      	mvns	r5, r0
1005f956:	f7ed fe3d 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005f95a:	4ee4      	ldr	r6, [pc, #912]	@ (1005fcec <__arm_cp.0_5>)
1005f95c:	2801      	cmp	r0, #1
1005f95e:	d002      	beq.n	1005f966 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1005f960:	7af0      	ldrb	r0, [r6, #11]
1005f962:	2800      	cmp	r0, #0
1005f964:	d010      	beq.n	1005f988 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1005f966:	4627      	mov	r7, r4
1005f968:	462c      	mov	r4, r5
1005f96a:	3438      	adds	r4, #56	@ 0x38
1005f96c:	f7ed fe32 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005f970:	7af1      	ldrb	r1, [r6, #11]
1005f972:	4361      	muls	r1, r4
1005f974:	4378      	muls	r0, r7
1005f976:	1838      	adds	r0, r7, r0
1005f978:	1844      	adds	r4, r0, r1
1005f97a:	f7ed fe2b 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005f97e:	7af1      	ldrb	r1, [r6, #11]
1005f980:	4341      	muls	r1, r0
1005f982:	48db      	ldr	r0, [pc, #876]	@ (1005fcf0 <__arm_cp.0_6>)
1005f984:	4348      	muls	r0, r1
1005f986:	1824      	adds	r4, r4, r0
1005f988:	342e      	adds	r4, #46	@ 0x2e
1005f98a:	f7ed fe23 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005f98e:	2801      	cmp	r0, #1
1005f990:	d10e      	bne.n	1005f9b0 <BlueNRG_Stack_Initialize_RAM_check+0x64>
1005f992:	4628      	mov	r0, r5
1005f994:	3060      	adds	r0, #96	@ 0x60
1005f996:	8931      	ldrh	r1, [r6, #8]
1005f998:	4341      	muls	r1, r0
1005f99a:	4628      	mov	r0, r5
1005f99c:	3044      	adds	r0, #68	@ 0x44
1005f99e:	7ab2      	ldrb	r2, [r6, #10]
1005f9a0:	4342      	muls	r2, r0
1005f9a2:	1850      	adds	r0, r2, r1
1005f9a4:	4629      	mov	r1, r5
1005f9a6:	3148      	adds	r1, #72	@ 0x48
1005f9a8:	7b32      	ldrb	r2, [r6, #12]
1005f9aa:	434a      	muls	r2, r1
1005f9ac:	1880      	adds	r0, r0, r2
1005f9ae:	e000      	b.n	1005f9b2 <BlueNRG_Stack_Initialize_RAM_check+0x66>
1005f9b0:	2000      	movs	r0, #0
1005f9b2:	9003      	str	r0, [sp, #12]
1005f9b4:	89f0      	ldrh	r0, [r6, #14]
1005f9b6:	900a      	str	r0, [sp, #40]	@ 0x28
1005f9b8:	f7f8 fb0a 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
1005f9bc:	2801      	cmp	r0, #1
1005f9be:	d001      	beq.n	1005f9c4 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1005f9c0:	f7fe fe92 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005f9c4:	f7ed fdfe 	bl	1004d5c4 <phy_upd_csr_ucfg>
1005f9c8:	2801      	cmp	r0, #1
1005f9ca:	9411      	str	r4, [sp, #68]	@ 0x44
1005f9cc:	d109      	bne.n	1005f9e2 <BlueNRG_Stack_Initialize_RAM_check+0x96>
1005f9ce:	462c      	mov	r4, r5
1005f9d0:	3438      	adds	r4, #56	@ 0x38
1005f9d2:	f7ed fdff 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005f9d6:	4360      	muls	r0, r4
1005f9d8:	7af1      	ldrb	r1, [r6, #11]
1005f9da:	4341      	muls	r1, r0
1005f9dc:	3908      	subs	r1, #8
1005f9de:	9109      	str	r1, [sp, #36]	@ 0x24
1005f9e0:	e001      	b.n	1005f9e6 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1005f9e2:	2000      	movs	r0, #0
1005f9e4:	9009      	str	r0, [sp, #36]	@ 0x24
1005f9e6:	48f2      	ldr	r0, [pc, #968]	@ (1005fdb0 <__arm_cp.0_3>)
1005f9e8:	304c      	adds	r0, #76	@ 0x4c
1005f9ea:	9013      	str	r0, [sp, #76]	@ 0x4c
1005f9ec:	f7fe fe7c 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005f9f0:	2801      	cmp	r0, #1
1005f9f2:	d015      	beq.n	1005fa20 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f9f4:	f7f8 faec 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
1005f9f8:	2801      	cmp	r0, #1
1005f9fa:	d011      	beq.n	1005fa20 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f9fc:	2029      	movs	r0, #41	@ 0x29
1005f9fe:	5c30      	ldrb	r0, [r6, r0]
1005fa00:	2800      	cmp	r0, #0
1005fa02:	d10d      	bne.n	1005fa20 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005fa04:	2025      	movs	r0, #37	@ 0x25
1005fa06:	5c30      	ldrb	r0, [r6, r0]
1005fa08:	2800      	cmp	r0, #0
1005fa0a:	d109      	bne.n	1005fa20 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005fa0c:	2026      	movs	r0, #38	@ 0x26
1005fa0e:	5c30      	ldrb	r0, [r6, r0]
1005fa10:	2800      	cmp	r0, #0
1005fa12:	d002      	beq.n	1005fa1a <BlueNRG_Stack_Initialize_RAM_check+0xce>
1005fa14:	48e6      	ldr	r0, [pc, #920]	@ (1005fdb0 <__arm_cp.0_3>)
1005fa16:	304c      	adds	r0, #76	@ 0x4c
1005fa18:	e001      	b.n	1005fa1e <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1005fa1a:	4628      	mov	r0, r5
1005fa1c:	3024      	adds	r0, #36	@ 0x24
1005fa1e:	9013      	str	r0, [sp, #76]	@ 0x4c
1005fa20:	48e3      	ldr	r0, [pc, #908]	@ (1005fdb0 <__arm_cp.0_3>)
1005fa22:	306c      	adds	r0, #108	@ 0x6c
1005fa24:	9012      	str	r0, [sp, #72]	@ 0x48
1005fa26:	f7fe fe5f 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005fa2a:	2801      	cmp	r0, #1
1005fa2c:	d015      	beq.n	1005fa5a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005fa2e:	f7f8 facf 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
1005fa32:	2801      	cmp	r0, #1
1005fa34:	d011      	beq.n	1005fa5a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005fa36:	2029      	movs	r0, #41	@ 0x29
1005fa38:	5c30      	ldrb	r0, [r6, r0]
1005fa3a:	2800      	cmp	r0, #0
1005fa3c:	d10d      	bne.n	1005fa5a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005fa3e:	2025      	movs	r0, #37	@ 0x25
1005fa40:	5c30      	ldrb	r0, [r6, r0]
1005fa42:	2800      	cmp	r0, #0
1005fa44:	d109      	bne.n	1005fa5a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005fa46:	2026      	movs	r0, #38	@ 0x26
1005fa48:	5c30      	ldrb	r0, [r6, r0]
1005fa4a:	2800      	cmp	r0, #0
1005fa4c:	d002      	beq.n	1005fa54 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1005fa4e:	48d8      	ldr	r0, [pc, #864]	@ (1005fdb0 <__arm_cp.0_3>)
1005fa50:	306c      	adds	r0, #108	@ 0x6c
1005fa52:	e001      	b.n	1005fa58 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1005fa54:	4628      	mov	r0, r5
1005fa56:	303c      	adds	r0, #60	@ 0x3c
1005fa58:	9012      	str	r0, [sp, #72]	@ 0x48
1005fa5a:	f7fe fe45 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005fa5e:	9010      	str	r0, [sp, #64]	@ 0x40
1005fa60:	7eb0      	ldrb	r0, [r6, #26]
1005fa62:	9000      	str	r0, [sp, #0]
1005fa64:	7ff0      	ldrb	r0, [r6, #31]
1005fa66:	900f      	str	r0, [sp, #60]	@ 0x3c
1005fa68:	f7ed fdb4 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fa6c:	9007      	str	r0, [sp, #28]
1005fa6e:	7ff0      	ldrb	r0, [r6, #31]
1005fa70:	9001      	str	r0, [sp, #4]
1005fa72:	f7fa fd04 	bl	1005a47e <llc_priv_controller_privacy_csr_ucfg_weak>
1005fa76:	9008      	str	r0, [sp, #32]
1005fa78:	7ff0      	ldrb	r0, [r6, #31]
1005fa7a:	9002      	str	r0, [sp, #8]
1005fa7c:	f001 f965 	bl	10060d4a <secure_connections_csr_ucfg_weak>
1005fa80:	2700      	movs	r7, #0
1005fa82:	f7f8 faab 	bl	10057fdc <scan_csr_ucfg_weak>
1005fa86:	2801      	cmp	r0, #1
1005fa88:	4638      	mov	r0, r7
1005fa8a:	9515      	str	r5, [sp, #84]	@ 0x54
1005fa8c:	9716      	str	r7, [sp, #88]	@ 0x58
1005fa8e:	d14f      	bne.n	1005fb30 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1005fa90:	7f70      	ldrb	r0, [r6, #29]
1005fa92:	280a      	cmp	r0, #10
1005fa94:	d300      	bcc.n	1005fa98 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1005fa96:	200a      	movs	r0, #10
1005fa98:	462c      	mov	r4, r5
1005fa9a:	3438      	adds	r4, #56	@ 0x38
1005fa9c:	4344      	muls	r4, r0
1005fa9e:	3cc0      	subs	r4, #192	@ 0xc0
1005faa0:	2500      	movs	r5, #0
1005faa2:	f7fa fce3 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005faa6:	2801      	cmp	r0, #1
1005faa8:	462f      	mov	r7, r5
1005faaa:	d120      	bne.n	1005faee <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1005faac:	f7ed fd92 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fab0:	2801      	cmp	r0, #1
1005fab2:	950e      	str	r5, [sp, #56]	@ 0x38
1005fab4:	d003      	beq.n	1005fabe <BlueNRG_Stack_Initialize_RAM_check+0x172>
1005fab6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005fab8:	4618      	mov	r0, r3
1005faba:	3054      	adds	r0, #84	@ 0x54
1005fabc:	e002      	b.n	1005fac4 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1005fabe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005fac0:	4618      	mov	r0, r3
1005fac2:	3048      	adds	r0, #72	@ 0x48
1005fac4:	49ba      	ldr	r1, [pc, #744]	@ (1005fdb0 <__arm_cp.0_3>)
1005fac6:	31e4      	adds	r1, #228	@ 0xe4
1005fac8:	7fb2      	ldrb	r2, [r6, #30]
1005faca:	434a      	muls	r2, r1
1005facc:	1810      	adds	r0, r2, r0
1005face:	4635      	mov	r5, r6
1005fad0:	461e      	mov	r6, r3
1005fad2:	3660      	adds	r6, #96	@ 0x60
1005fad4:	7fe9      	ldrb	r1, [r5, #31]
1005fad6:	4632      	mov	r2, r6
1005fad8:	408a      	lsls	r2, r1
1005fada:	1887      	adds	r7, r0, r2
1005fadc:	f7ed fd7a 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fae0:	2801      	cmp	r0, #1
1005fae2:	d102      	bne.n	1005faea <BlueNRG_Stack_Initialize_RAM_check+0x19e>
1005fae4:	7ae8      	ldrb	r0, [r5, #11]
1005fae6:	4346      	muls	r6, r0
1005fae8:	19bf      	adds	r7, r7, r6
1005faea:	462e      	mov	r6, r5
1005faec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005faee:	19e0      	adds	r0, r4, r7
1005faf0:	9014      	str	r0, [sp, #80]	@ 0x50
1005faf2:	f7fa fcbd 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005faf6:	4607      	mov	r7, r0
1005faf8:	f7fa fcb8 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005fafc:	4604      	mov	r4, r0
1005fafe:	403c      	ands	r4, r7
1005fb00:	f7ed fd68 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fb04:	4020      	ands	r0, r4
1005fb06:	2801      	cmp	r0, #1
1005fb08:	d108      	bne.n	1005fb1c <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1005fb0a:	7ef0      	ldrb	r0, [r6, #27]
1005fb0c:	1e40      	subs	r0, r0, #1
1005fb0e:	2103      	movs	r1, #3
1005fb10:	4301      	orrs	r1, r0
1005fb12:	7fb0      	ldrb	r0, [r6, #30]
1005fb14:	22b0      	movs	r2, #176	@ 0xb0
1005fb16:	4342      	muls	r2, r0
1005fb18:	43d0      	mvns	r0, r2
1005fb1a:	1a45      	subs	r5, r0, r1
1005fb1c:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005fb1e:	1944      	adds	r4, r0, r5
1005fb20:	f7fe fde2 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005fb24:	4360      	muls	r0, r4
1005fb26:	49a2      	ldr	r1, [pc, #648]	@ (1005fdb0 <__arm_cp.0_3>)
1005fb28:	1808      	adds	r0, r1, r0
1005fb2a:	302c      	adds	r0, #44	@ 0x2c
1005fb2c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005fb2e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005fb30:	9006      	str	r0, [sp, #24]
1005fb32:	f7ed fd4f 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fb36:	2801      	cmp	r0, #1
1005fb38:	4639      	mov	r1, r7
1005fb3a:	d109      	bne.n	1005fb50 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005fb3c:	f7f8 fc14 	bl	10058368 <l2c_cos_csr_ucfg_weak>
1005fb40:	2801      	cmp	r0, #1
1005fb42:	4639      	mov	r1, r7
1005fb44:	d104      	bne.n	1005fb50 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005fb46:	2022      	movs	r0, #34	@ 0x22
1005fb48:	5c30      	ldrb	r0, [r6, r0]
1005fb4a:	4629      	mov	r1, r5
1005fb4c:	3114      	adds	r1, #20
1005fb4e:	4341      	muls	r1, r0
1005fb50:	9105      	str	r1, [sp, #20]
1005fb52:	f7fa fc8b 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005fb56:	2801      	cmp	r0, #1
1005fb58:	4638      	mov	r0, r7
1005fb5a:	d121      	bne.n	1005fba0 <BlueNRG_Stack_Initialize_RAM_check+0x254>
1005fb5c:	4894      	ldr	r0, [pc, #592]	@ (1005fdb0 <__arm_cp.0_3>)
1005fb5e:	30d4      	adds	r0, #212	@ 0xd4
1005fb60:	7eb1      	ldrb	r1, [r6, #26]
1005fb62:	4341      	muls	r1, r0
1005fb64:	4628      	mov	r0, r5
1005fb66:	3048      	adds	r0, #72	@ 0x48
1005fb68:	7af2      	ldrb	r2, [r6, #11]
1005fb6a:	4342      	muls	r2, r0
1005fb6c:	1854      	adds	r4, r2, r1
1005fb6e:	2700      	movs	r7, #0
1005fb70:	f7fa fc7e 	bl	1005a470 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005fb74:	2801      	cmp	r0, #1
1005fb76:	d110      	bne.n	1005fb9a <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005fb78:	f7ed fd2c 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fb7c:	2801      	cmp	r0, #1
1005fb7e:	d10c      	bne.n	1005fb9a <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005fb80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005fb82:	4610      	mov	r0, r2
1005fb84:	3058      	adds	r0, #88	@ 0x58
1005fb86:	7f31      	ldrb	r1, [r6, #28]
1005fb88:	4341      	muls	r1, r0
1005fb8a:	4610      	mov	r0, r2
1005fb8c:	3060      	adds	r0, #96	@ 0x60
1005fb8e:	7ef2      	ldrb	r2, [r6, #27]
1005fb90:	4342      	muls	r2, r0
1005fb92:	1850      	adds	r0, r2, r1
1005fb94:	3884      	subs	r0, #132	@ 0x84
1005fb96:	7eb7      	ldrb	r7, [r6, #26]
1005fb98:	4347      	muls	r7, r0
1005fb9a:	19e0      	adds	r0, r4, r7
1005fb9c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005fb9e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005fba0:	900e      	str	r0, [sp, #56]	@ 0x38
1005fba2:	f7f8 f9b9 	bl	10057f18 <cte_csr_ucfg_weak>
1005fba6:	2801      	cmp	r0, #1
1005fba8:	4638      	mov	r0, r7
1005fbaa:	d133      	bne.n	1005fc14 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1005fbac:	f7ed fd12 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fbb0:	2801      	cmp	r0, #1
1005fbb2:	d002      	beq.n	1005fbba <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1005fbb4:	462f      	mov	r7, r5
1005fbb6:	375c      	adds	r7, #92	@ 0x5c
1005fbb8:	e004      	b.n	1005fbc4 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1005fbba:	4628      	mov	r0, r5
1005fbbc:	3060      	adds	r0, #96	@ 0x60
1005fbbe:	7af7      	ldrb	r7, [r6, #11]
1005fbc0:	4347      	muls	r7, r0
1005fbc2:	3f0c      	subs	r7, #12
1005fbc4:	2523      	movs	r5, #35	@ 0x23
1005fbc6:	5d70      	ldrb	r0, [r6, r5]
1005fbc8:	2400      	movs	r4, #0
1005fbca:	2800      	cmp	r0, #0
1005fbcc:	4620      	mov	r0, r4
1005fbce:	d005      	beq.n	1005fbdc <BlueNRG_Stack_Initialize_RAM_check+0x290>
1005fbd0:	f7ed fd00 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fbd4:	5d70      	ldrb	r0, [r6, r5]
1005fbd6:	4240      	negs	r0, r0
1005fbd8:	2103      	movs	r1, #3
1005fbda:	4388      	bics	r0, r1
1005fbdc:	19c0      	adds	r0, r0, r7
1005fbde:	2724      	movs	r7, #36	@ 0x24
1005fbe0:	5df1      	ldrb	r1, [r6, r7]
1005fbe2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005fbe4:	3264      	adds	r2, #100	@ 0x64
1005fbe6:	434a      	muls	r2, r1
1005fbe8:	1885      	adds	r5, r0, r2
1005fbea:	f7f8 f9f7 	bl	10057fdc <scan_csr_ucfg_weak>
1005fbee:	2801      	cmp	r0, #1
1005fbf0:	d10d      	bne.n	1005fc0e <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fbf2:	f7fe fd79 	bl	1005e6e8 <ext_adv_scan_enabled_ucfg_weak>
1005fbf6:	2801      	cmp	r0, #1
1005fbf8:	d109      	bne.n	1005fc0e <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fbfa:	f7fa fc37 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005fbfe:	2801      	cmp	r0, #1
1005fc00:	d105      	bne.n	1005fc0e <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fc02:	5df4      	ldrb	r4, [r6, r7]
1005fc04:	2c00      	cmp	r4, #0
1005fc06:	9815      	ldr	r0, [sp, #84]	@ 0x54
1005fc08:	d001      	beq.n	1005fc0e <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fc0a:	4604      	mov	r4, r0
1005fc0c:	3450      	adds	r4, #80	@ 0x50
1005fc0e:	1928      	adds	r0, r5, r4
1005fc10:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005fc12:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005fc14:	900d      	str	r0, [sp, #52]	@ 0x34
1005fc16:	f7ed fcdd 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fc1a:	2801      	cmp	r0, #1
1005fc1c:	4639      	mov	r1, r7
1005fc1e:	d109      	bne.n	1005fc34 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005fc20:	f7f8 f9d8 	bl	10057fd4 <pcl_csr_ucfg_weak>
1005fc24:	2801      	cmp	r0, #1
1005fc26:	4639      	mov	r1, r7
1005fc28:	d104      	bne.n	1005fc34 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005fc2a:	4628      	mov	r0, r5
1005fc2c:	3048      	adds	r0, #72	@ 0x48
1005fc2e:	7af1      	ldrb	r1, [r6, #11]
1005fc30:	4341      	muls	r1, r0
1005fc32:	3914      	subs	r1, #20
1005fc34:	910c      	str	r1, [sp, #48]	@ 0x30
1005fc36:	f7ed fccd 	bl	1004d5d4 <conn_supp_csr_ucfg>
1005fc3a:	2801      	cmp	r0, #1
1005fc3c:	463a      	mov	r2, r7
1005fc3e:	d108      	bne.n	1005fc52 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005fc40:	f7f8 f875 	bl	10057d2e <chc_csr_ucfg_weak>
1005fc44:	2801      	cmp	r0, #1
1005fc46:	463a      	mov	r2, r7
1005fc48:	d103      	bne.n	1005fc52 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005fc4a:	4628      	mov	r0, r5
1005fc4c:	304c      	adds	r0, #76	@ 0x4c
1005fc4e:	7af2      	ldrb	r2, [r6, #11]
1005fc50:	4342      	muls	r2, r0
1005fc52:	2026      	movs	r0, #38	@ 0x26
1005fc54:	5c31      	ldrb	r1, [r6, r0]
1005fc56:	2025      	movs	r0, #37	@ 0x25
1005fc58:	5c34      	ldrb	r4, [r6, r0]
1005fc5a:	1863      	adds	r3, r4, r1
1005fc5c:	2029      	movs	r0, #41	@ 0x29
1005fc5e:	5c30      	ldrb	r0, [r6, r0]
1005fc60:	9304      	str	r3, [sp, #16]
1005fc62:	2b00      	cmp	r3, #0
1005fc64:	9014      	str	r0, [sp, #80]	@ 0x50
1005fc66:	d010      	beq.n	1005fc8a <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1005fc68:	2028      	movs	r0, #40	@ 0x28
1005fc6a:	5c33      	ldrb	r3, [r6, r0]
1005fc6c:	4628      	mov	r0, r5
1005fc6e:	3060      	adds	r0, #96	@ 0x60
1005fc70:	4358      	muls	r0, r3
1005fc72:	38f8      	subs	r0, #248	@ 0xf8
1005fc74:	4348      	muls	r0, r1
1005fc76:	2327      	movs	r3, #39	@ 0x27
1005fc78:	5cf3      	ldrb	r3, [r6, r3]
1005fc7a:	3554      	adds	r5, #84	@ 0x54
1005fc7c:	435d      	muls	r5, r3
1005fc7e:	4b4c      	ldr	r3, [pc, #304]	@ (1005fdb0 <__arm_cp.0_3>)
1005fc80:	195b      	adds	r3, r3, r5
1005fc82:	3348      	adds	r3, #72	@ 0x48
1005fc84:	4363      	muls	r3, r4
1005fc86:	181f      	adds	r7, r3, r0
1005fc88:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005fc8a:	2800      	cmp	r0, #0
1005fc8c:	9716      	str	r7, [sp, #88]	@ 0x58
1005fc8e:	920b      	str	r2, [sp, #44]	@ 0x2c
1005fc90:	d00d      	beq.n	1005fcae <BlueNRG_Stack_Initialize_RAM_check+0x362>
1005fc92:	4602      	mov	r2, r0
1005fc94:	202a      	movs	r0, #42	@ 0x2a
1005fc96:	5c30      	ldrb	r0, [r6, r0]
1005fc98:	4d45      	ldr	r5, [pc, #276]	@ (1005fdb0 <__arm_cp.0_3>)
1005fc9a:	462b      	mov	r3, r5
1005fc9c:	33b0      	adds	r3, #176	@ 0xb0
1005fc9e:	4343      	muls	r3, r0
1005fca0:	4637      	mov	r7, r6
1005fca2:	462e      	mov	r6, r5
1005fca4:	36c8      	adds	r6, #200	@ 0xc8
1005fca6:	4356      	muls	r6, r2
1005fca8:	18f3      	adds	r3, r6, r3
1005fcaa:	3b48      	subs	r3, #72	@ 0x48
1005fcac:	e003      	b.n	1005fcb6 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1005fcae:	202a      	movs	r0, #42	@ 0x2a
1005fcb0:	5c30      	ldrb	r0, [r6, r0]
1005fcb2:	2300      	movs	r3, #0
1005fcb4:	4637      	mov	r7, r6
1005fcb6:	2628      	movs	r6, #40	@ 0x28
1005fcb8:	5dbe      	ldrb	r6, [r7, r6]
1005fcba:	4371      	muls	r1, r6
1005fcbc:	1809      	adds	r1, r1, r0
1005fcbe:	2627      	movs	r6, #39	@ 0x27
1005fcc0:	463d      	mov	r5, r7
1005fcc2:	5dbe      	ldrb	r6, [r7, r6]
1005fcc4:	4374      	muls	r4, r6
1005fcc6:	1824      	adds	r4, r4, r0
1005fcc8:	1860      	adds	r0, r4, r1
1005fcca:	d013      	beq.n	1005fcf4 <__arm_cp.0_6+0x4>
1005fccc:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005fcce:	463e      	mov	r6, r7
1005fcd0:	364c      	adds	r6, #76	@ 0x4c
1005fcd2:	4366      	muls	r6, r4
1005fcd4:	463c      	mov	r4, r7
1005fcd6:	3434      	adds	r4, #52	@ 0x34
1005fcd8:	434c      	muls	r4, r1
1005fcda:	19a1      	adds	r1, r4, r6
1005fcdc:	463c      	mov	r4, r7
1005fcde:	345c      	adds	r4, #92	@ 0x5c
1005fce0:	4344      	muls	r4, r0
1005fce2:	190c      	adds	r4, r1, r4
1005fce4:	3c14      	subs	r4, #20
1005fce6:	e007      	b.n	1005fcf8 <__arm_cp.0_6+0x8>

1005fce8 <__arm_cp.0_4>:
1005fce8:	fffffc00 	.word	0xfffffc00

1005fcec <__arm_cp.0_5>:
1005fcec:	2000247c 	.word	0x2000247c

1005fcf0 <__arm_cp.0_6>:
1005fcf0:	fffffd70 	.word	0xfffffd70
1005fcf4:	2400      	movs	r4, #0
1005fcf6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005fcf8:	9903      	ldr	r1, [sp, #12]
1005fcfa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005fcfc:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005fcfe:	1808      	adds	r0, r1, r0
1005fd00:	4639      	mov	r1, r7
1005fd02:	3144      	adds	r1, #68	@ 0x44
1005fd04:	4371      	muls	r1, r6
1005fd06:	1840      	adds	r0, r0, r1
1005fd08:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005fd0a:	1840      	adds	r0, r0, r1
1005fd0c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1005fd0e:	1840      	adds	r0, r0, r1
1005fd10:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005fd12:	1841      	adds	r1, r0, r1
1005fd14:	4638      	mov	r0, r7
1005fd16:	3060      	adds	r0, #96	@ 0x60
1005fd18:	4606      	mov	r6, r0
1005fd1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005fd1c:	4096      	lsls	r6, r2
1005fd1e:	1989      	adds	r1, r1, r6
1005fd20:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005fd22:	2a01      	cmp	r2, #1
1005fd24:	d106      	bne.n	1005fd34 <__arm_cp.0_6+0x44>
1005fd26:	4e22      	ldr	r6, [pc, #136]	@ (1005fdb0 <__arm_cp.0_3>)
1005fd28:	9a00      	ldr	r2, [sp, #0]
1005fd2a:	4356      	muls	r6, r2
1005fd2c:	1871      	adds	r1, r6, r1
1005fd2e:	2645      	movs	r6, #69	@ 0x45
1005fd30:	00b6      	lsls	r6, r6, #2
1005fd32:	1989      	adds	r1, r1, r6
1005fd34:	462e      	mov	r6, r5
1005fd36:	9d07      	ldr	r5, [sp, #28]
1005fd38:	9a05      	ldr	r2, [sp, #20]
1005fd3a:	2d01      	cmp	r5, #1
1005fd3c:	d102      	bne.n	1005fd44 <__arm_cp.0_6+0x54>
1005fd3e:	9d01      	ldr	r5, [sp, #4]
1005fd40:	40a8      	lsls	r0, r5
1005fd42:	1809      	adds	r1, r1, r0
1005fd44:	9808      	ldr	r0, [sp, #32]
1005fd46:	2801      	cmp	r0, #1
1005fd48:	d105      	bne.n	1005fd56 <__arm_cp.0_6+0x66>
1005fd4a:	4638      	mov	r0, r7
1005fd4c:	3018      	adds	r0, #24
1005fd4e:	9d02      	ldr	r5, [sp, #8]
1005fd50:	40a8      	lsls	r0, r5
1005fd52:	1841      	adds	r1, r0, r1
1005fd54:	3970      	subs	r1, #112	@ 0x70
1005fd56:	9806      	ldr	r0, [sp, #24]
1005fd58:	9d04      	ldr	r5, [sp, #16]
1005fd5a:	1808      	adds	r0, r1, r0
1005fd5c:	1880      	adds	r0, r0, r2
1005fd5e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005fd60:	1840      	adds	r0, r0, r1
1005fd62:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005fd64:	1840      	adds	r0, r0, r1
1005fd66:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005fd68:	1840      	adds	r0, r0, r1
1005fd6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005fd6c:	1840      	adds	r0, r0, r1
1005fd6e:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005fd70:	42cd      	cmn	r5, r1
1005fd72:	d001      	beq.n	1005fd78 <__arm_cp.0_6+0x88>
1005fd74:	1838      	adds	r0, r7, r0
1005fd76:	3058      	adds	r0, #88	@ 0x58
1005fd78:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005fd7a:	1840      	adds	r0, r0, r1
1005fd7c:	18c0      	adds	r0, r0, r3
1005fd7e:	1904      	adds	r4, r0, r4
1005fd80:	f7f3 fed3 	bl	10053b2a <log_csr_ucfg_weak>
1005fd84:	2801      	cmp	r0, #1
1005fd86:	d100      	bne.n	1005fd8a <__arm_cp.0_6+0x9a>
1005fd88:	19e4      	adds	r4, r4, r7
1005fd8a:	6870      	ldr	r0, [r6, #4]
1005fd8c:	1820      	adds	r0, r4, r0
1005fd8e:	2103      	movs	r1, #3
1005fd90:	43c9      	mvns	r1, r1
1005fd92:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1005fd94:	1cd2      	adds	r2, r2, #3
1005fd96:	400a      	ands	r2, r1
1005fd98:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1005fd9a:	1cdb      	adds	r3, r3, #3
1005fd9c:	400b      	ands	r3, r1
1005fd9e:	189a      	adds	r2, r3, r2
1005fda0:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1005fda2:	1cdb      	adds	r3, r3, #3
1005fda4:	400b      	ands	r3, r1
1005fda6:	18d1      	adds	r1, r2, r3
1005fda8:	1a40      	subs	r0, r0, r1
1005fdaa:	b017      	add	sp, #92	@ 0x5c
1005fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fdae:	46c0      	nop			@ (mov r8, r8)

1005fdb0 <__arm_cp.0_3>:
1005fdb0:	fffffe90 	.word	0xfffffe90

1005fdb4 <sdb_sap_get_security_records_count>:
1005fdb4:	b580      	push	{r7, lr}
1005fdb6:	f001 f996 	bl	100610e6 <nvm_sec_db_get_record_count>
1005fdba:	bd80      	pop	{r7, pc}

1005fdbc <sdb_sap_add_security_record>:
1005fdbc:	b5b0      	push	{r4, r5, r7, lr}
1005fdbe:	b094      	sub	sp, #80	@ 0x50
1005fdc0:	4604      	mov	r4, r0
1005fdc2:	7841      	ldrb	r1, [r0, #1]
1005fdc4:	2501      	movs	r5, #1
1005fdc6:	4029      	ands	r1, r5
1005fdc8:	303e      	adds	r0, #62	@ 0x3e
1005fdca:	466a      	mov	r2, sp
1005fdcc:	f000 f819 	bl	1005fe02 <sdb_sap_read_security_record>
1005fdd0:	2800      	cmp	r0, #0
1005fdd2:	d10c      	bne.n	1005fdee <sdb_sap_add_security_record+0x32>
1005fdd4:	4669      	mov	r1, sp
1005fdd6:	2250      	movs	r2, #80	@ 0x50
1005fdd8:	4620      	mov	r0, r4
1005fdda:	f7f1 f97d 	bl	100510d8 <BLEPLAT_MemCmp>
1005fdde:	2800      	cmp	r0, #0
1005fde0:	d008      	beq.n	1005fdf4 <sdb_sap_add_security_record+0x38>
1005fde2:	4669      	mov	r1, sp
1005fde4:	7848      	ldrb	r0, [r1, #1]
1005fde6:	4028      	ands	r0, r5
1005fde8:	313e      	adds	r1, #62	@ 0x3e
1005fdea:	f000 f83b 	bl	1005fe64 <sdb_remove_security_record_by_address>
1005fdee:	7860      	ldrb	r0, [r4, #1]
1005fdf0:	2810      	cmp	r0, #16
1005fdf2:	d201      	bcs.n	1005fdf8 <sdb_sap_add_security_record+0x3c>
1005fdf4:	2000      	movs	r0, #0
1005fdf6:	e002      	b.n	1005fdfe <sdb_sap_add_security_record+0x42>
1005fdf8:	4620      	mov	r0, r4
1005fdfa:	f001 f969 	bl	100610d0 <nvm_sec_db_add_record>
1005fdfe:	b014      	add	sp, #80	@ 0x50
1005fe00:	bdb0      	pop	{r4, r5, r7, pc}

1005fe02 <sdb_sap_read_security_record>:
1005fe02:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005fe04:	4614      	mov	r4, r2
1005fe06:	4606      	mov	r6, r0
1005fe08:	2501      	movs	r5, #1
1005fe0a:	9102      	str	r1, [sp, #8]
1005fe0c:	2901      	cmp	r1, #1
1005fe0e:	d105      	bne.n	1005fe1c <sdb_sap_read_security_record+0x1a>
1005fe10:	7970      	ldrb	r0, [r6, #5]
1005fe12:	21c0      	movs	r1, #192	@ 0xc0
1005fe14:	4001      	ands	r1, r0
1005fe16:	2940      	cmp	r1, #64	@ 0x40
1005fe18:	d100      	bne.n	1005fe1c <sdb_sap_read_security_record+0x1a>
1005fe1a:	2500      	movs	r5, #0
1005fe1c:	f001 f940 	bl	100610a0 <nvm_sec_db_read_init>
1005fe20:	4620      	mov	r0, r4
1005fe22:	303e      	adds	r0, #62	@ 0x3e
1005fe24:	9001      	str	r0, [sp, #4]
1005fe26:	4627      	mov	r7, r4
1005fe28:	371e      	adds	r7, #30
1005fe2a:	4620      	mov	r0, r4
1005fe2c:	f001 f93e 	bl	100610ac <nvm_sec_db_read_next_record>
1005fe30:	2800      	cmp	r0, #0
1005fe32:	d115      	bne.n	1005fe60 <sdb_sap_read_security_record+0x5e>
1005fe34:	2d00      	cmp	r5, #0
1005fe36:	d00b      	beq.n	1005fe50 <sdb_sap_read_security_record+0x4e>
1005fe38:	7860      	ldrb	r0, [r4, #1]
1005fe3a:	2101      	movs	r1, #1
1005fe3c:	4001      	ands	r1, r0
1005fe3e:	9802      	ldr	r0, [sp, #8]
1005fe40:	4281      	cmp	r1, r0
1005fe42:	d1f2      	bne.n	1005fe2a <sdb_sap_read_security_record+0x28>
1005fe44:	2206      	movs	r2, #6
1005fe46:	9801      	ldr	r0, [sp, #4]
1005fe48:	4631      	mov	r1, r6
1005fe4a:	f7f1 f945 	bl	100510d8 <BLEPLAT_MemCmp>
1005fe4e:	e003      	b.n	1005fe58 <sdb_sap_read_security_record+0x56>
1005fe50:	4630      	mov	r0, r6
1005fe52:	4639      	mov	r1, r7
1005fe54:	f000 f980 	bl	10060158 <smp_sap_crt_resolve_rpa>
1005fe58:	2800      	cmp	r0, #0
1005fe5a:	d1e6      	bne.n	1005fe2a <sdb_sap_read_security_record+0x28>
1005fe5c:	2000      	movs	r0, #0
1005fe5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005fe60:	20b3      	movs	r0, #179	@ 0xb3
1005fe62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005fe64 <sdb_remove_security_record_by_address>:
1005fe64:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fe66:	b095      	sub	sp, #84	@ 0x54
1005fe68:	460c      	mov	r4, r1
1005fe6a:	4605      	mov	r5, r0
1005fe6c:	f001 f918 	bl	100610a0 <nvm_sec_db_read_init>
1005fe70:	ae01      	add	r6, sp, #4
1005fe72:	363e      	adds	r6, #62	@ 0x3e
1005fe74:	27b3      	movs	r7, #179	@ 0xb3
1005fe76:	a801      	add	r0, sp, #4
1005fe78:	f001 f918 	bl	100610ac <nvm_sec_db_read_next_record>
1005fe7c:	2800      	cmp	r0, #0
1005fe7e:	d110      	bne.n	1005fea2 <sdb_remove_security_record_by_address+0x3e>
1005fe80:	2206      	movs	r2, #6
1005fe82:	4630      	mov	r0, r6
1005fe84:	4621      	mov	r1, r4
1005fe86:	f7f1 f927 	bl	100510d8 <BLEPLAT_MemCmp>
1005fe8a:	a901      	add	r1, sp, #4
1005fe8c:	7849      	ldrb	r1, [r1, #1]
1005fe8e:	2201      	movs	r2, #1
1005fe90:	400a      	ands	r2, r1
1005fe92:	42aa      	cmp	r2, r5
1005fe94:	d1ef      	bne.n	1005fe76 <sdb_remove_security_record_by_address+0x12>
1005fe96:	2800      	cmp	r0, #0
1005fe98:	d1ed      	bne.n	1005fe76 <sdb_remove_security_record_by_address+0x12>
1005fe9a:	f001 f937 	bl	1006110c <nvm_discard_current_record>
1005fe9e:	2700      	movs	r7, #0
1005fea0:	e7e9      	b.n	1005fe76 <sdb_remove_security_record_by_address+0x12>
1005fea2:	b2f8      	uxtb	r0, r7
1005fea4:	b015      	add	sp, #84	@ 0x54
1005fea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fea8 <sdb_sap_read_security_record_sequential>:
1005fea8:	b5b0      	push	{r4, r5, r7, lr}
1005feaa:	4604      	mov	r4, r0
1005feac:	4d07      	ldr	r5, [pc, #28]	@ (1005fecc <__arm_cp.5_0>)
1005feae:	7828      	ldrb	r0, [r5, #0]
1005feb0:	2800      	cmp	r0, #0
1005feb2:	d103      	bne.n	1005febc <sdb_sap_read_security_record_sequential+0x14>
1005feb4:	f001 f8f4 	bl	100610a0 <nvm_sec_db_read_init>
1005feb8:	2001      	movs	r0, #1
1005feba:	7028      	strb	r0, [r5, #0]
1005febc:	4620      	mov	r0, r4
1005febe:	f001 f8f5 	bl	100610ac <nvm_sec_db_read_next_record>
1005fec2:	2800      	cmp	r0, #0
1005fec4:	d001      	beq.n	1005feca <sdb_sap_read_security_record_sequential+0x22>
1005fec6:	2100      	movs	r1, #0
1005fec8:	7029      	strb	r1, [r5, #0]
1005feca:	bdb0      	pop	{r4, r5, r7, pc}

1005fecc <__arm_cp.5_0>:
1005fecc:	200024b0 	.word	0x200024b0

1005fed0 <sdb_sap_del_bonded_device>:
1005fed0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005fed2:	460d      	mov	r5, r1
1005fed4:	4604      	mov	r4, r0
1005fed6:	aa01      	add	r2, sp, #4
1005fed8:	4608      	mov	r0, r1
1005feda:	4621      	mov	r1, r4
1005fedc:	f000 f87f 	bl	1005ffde <sdb_gatt_search_record>
1005fee0:	2800      	cmp	r0, #0
1005fee2:	d101      	bne.n	1005fee8 <sdb_sap_del_bonded_device+0x18>
1005fee4:	f001 f912 	bl	1006110c <nvm_discard_current_record>
1005fee8:	4628      	mov	r0, r5
1005feea:	4621      	mov	r1, r4
1005feec:	f7ff ffba 	bl	1005fe64 <sdb_remove_security_record_by_address>
1005fef0:	b004      	add	sp, #16
1005fef2:	bdb0      	pop	{r4, r5, r7, pc}

1005fef4 <sdb_sap_read_security_record_matching>:
1005fef4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005fef6:	4614      	mov	r4, r2
1005fef8:	9101      	str	r1, [sp, #4]
1005fefa:	4606      	mov	r6, r0
1005fefc:	f001 f8d0 	bl	100610a0 <nvm_sec_db_read_init>
1005ff00:	4627      	mov	r7, r4
1005ff02:	3744      	adds	r7, #68	@ 0x44
1005ff04:	4620      	mov	r0, r4
1005ff06:	f001 f8d1 	bl	100610ac <nvm_sec_db_read_next_record>
1005ff0a:	2800      	cmp	r0, #0
1005ff0c:	d111      	bne.n	1005ff32 <sdb_sap_read_security_record_matching+0x3e>
1005ff0e:	7860      	ldrb	r0, [r4, #1]
1005ff10:	06c0      	lsls	r0, r0, #27
1005ff12:	d5f7      	bpl.n	1005ff04 <sdb_sap_read_security_record_matching+0x10>
1005ff14:	ad02      	add	r5, sp, #8
1005ff16:	4638      	mov	r0, r7
1005ff18:	9901      	ldr	r1, [sp, #4]
1005ff1a:	462a      	mov	r2, r5
1005ff1c:	f000 f87a 	bl	10060014 <smp_sap_crt_generate_ediv>
1005ff20:	2202      	movs	r2, #2
1005ff22:	4628      	mov	r0, r5
1005ff24:	4631      	mov	r1, r6
1005ff26:	f7f1 f8d7 	bl	100510d8 <BLEPLAT_MemCmp>
1005ff2a:	2800      	cmp	r0, #0
1005ff2c:	d1ea      	bne.n	1005ff04 <sdb_sap_read_security_record_matching+0x10>
1005ff2e:	2000      	movs	r0, #0
1005ff30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ff32:	2081      	movs	r0, #129	@ 0x81
1005ff34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005ff36 <SDB_sap_write_peer_bonded_gatt_client_data>:
1005ff36:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ff38:	b085      	sub	sp, #20
1005ff3a:	461e      	mov	r6, r3
1005ff3c:	4617      	mov	r7, r2
1005ff3e:	460d      	mov	r5, r1
1005ff40:	4604      	mov	r4, r0
1005ff42:	aa02      	add	r2, sp, #8
1005ff44:	4608      	mov	r0, r1
1005ff46:	4621      	mov	r1, r4
1005ff48:	f000 f849 	bl	1005ffde <sdb_gatt_search_record>
1005ff4c:	2800      	cmp	r0, #0
1005ff4e:	d10b      	bne.n	1005ff68 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
1005ff50:	9804      	ldr	r0, [sp, #16]
1005ff52:	42b8      	cmp	r0, r7
1005ff54:	d106      	bne.n	1005ff64 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
1005ff56:	b2ba      	uxth	r2, r7
1005ff58:	200c      	movs	r0, #12
1005ff5a:	4631      	mov	r1, r6
1005ff5c:	f7f1 f84c 	bl	10050ff8 <BLEPLAT_NvmCompare>
1005ff60:	2800      	cmp	r0, #0
1005ff62:	d016      	beq.n	1005ff92 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005ff64:	f001 f8d2 	bl	1006110c <nvm_discard_current_record>
1005ff68:	9601      	str	r6, [sp, #4]
1005ff6a:	ae02      	add	r6, sp, #8
1005ff6c:	7035      	strb	r5, [r6, #0]
1005ff6e:	1c70      	adds	r0, r6, #1
1005ff70:	2206      	movs	r2, #6
1005ff72:	4621      	mov	r1, r4
1005ff74:	f7f1 f890 	bl	10051098 <BLEPLAT_MemCpy>
1005ff78:	9704      	str	r7, [sp, #16]
1005ff7a:	4630      	mov	r0, r6
1005ff7c:	9901      	ldr	r1, [sp, #4]
1005ff7e:	f001 f882 	bl	10061086 <nvm_gatt_db_update_record>
1005ff82:	2800      	cmp	r0, #0
1005ff84:	d005      	beq.n	1005ff92 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005ff86:	4606      	mov	r6, r0
1005ff88:	4628      	mov	r0, r5
1005ff8a:	4621      	mov	r1, r4
1005ff8c:	f7ff ff6a 	bl	1005fe64 <sdb_remove_security_record_by_address>
1005ff90:	e000      	b.n	1005ff94 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
1005ff92:	2600      	movs	r6, #0
1005ff94:	4630      	mov	r0, r6
1005ff96:	b005      	add	sp, #20
1005ff98:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ff9a <SDB_sap_read_peer_bonded_gatt_client_data>:
1005ff9a:	b5b0      	push	{r4, r5, r7, lr}
1005ff9c:	b098      	sub	sp, #96	@ 0x60
1005ff9e:	461c      	mov	r4, r3
1005ffa0:	4615      	mov	r5, r2
1005ffa2:	aa01      	add	r2, sp, #4
1005ffa4:	f7ff ff2d 	bl	1005fe02 <sdb_sap_read_security_record>
1005ffa8:	2800      	cmp	r0, #0
1005ffaa:	d116      	bne.n	1005ffda <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005ffac:	a901      	add	r1, sp, #4
1005ffae:	784a      	ldrb	r2, [r1, #1]
1005ffb0:	2001      	movs	r0, #1
1005ffb2:	4010      	ands	r0, r2
1005ffb4:	313e      	adds	r1, #62	@ 0x3e
1005ffb6:	aa15      	add	r2, sp, #84	@ 0x54
1005ffb8:	f000 f811 	bl	1005ffde <sdb_gatt_search_record>
1005ffbc:	2800      	cmp	r0, #0
1005ffbe:	d001      	beq.n	1005ffc4 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
1005ffc0:	20b3      	movs	r0, #179	@ 0xb3
1005ffc2:	e00a      	b.n	1005ffda <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005ffc4:	6829      	ldr	r1, [r5, #0]
1005ffc6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005ffc8:	4288      	cmp	r0, r1
1005ffca:	d901      	bls.n	1005ffd0 <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
1005ffcc:	2087      	movs	r0, #135	@ 0x87
1005ffce:	e004      	b.n	1005ffda <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005ffd0:	6028      	str	r0, [r5, #0]
1005ffd2:	b281      	uxth	r1, r0
1005ffd4:	4620      	mov	r0, r4
1005ffd6:	f001 f84b 	bl	10061070 <nvm_gatt_db_read_full_current_record>
1005ffda:	b018      	add	sp, #96	@ 0x60
1005ffdc:	bdb0      	pop	{r4, r5, r7, pc}

1005ffde <sdb_gatt_search_record>:
1005ffde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ffe0:	4614      	mov	r4, r2
1005ffe2:	460d      	mov	r5, r1
1005ffe4:	4606      	mov	r6, r0
1005ffe6:	f001 f81d 	bl	10061024 <nvm_gatt_db_read_init>
1005ffea:	1c67      	adds	r7, r4, #1
1005ffec:	4620      	mov	r0, r4
1005ffee:	f001 f81f 	bl	10061030 <nvm_gatt_db_read_next_record>
1005fff2:	2800      	cmp	r0, #0
1005fff4:	d10b      	bne.n	1006000e <sdb_gatt_search_record+0x30>
1005fff6:	2206      	movs	r2, #6
1005fff8:	4628      	mov	r0, r5
1005fffa:	4639      	mov	r1, r7
1005fffc:	f7f1 f86c 	bl	100510d8 <BLEPLAT_MemCmp>
10060000:	2800      	cmp	r0, #0
10060002:	d1f3      	bne.n	1005ffec <sdb_gatt_search_record+0xe>
10060004:	7820      	ldrb	r0, [r4, #0]
10060006:	42b0      	cmp	r0, r6
10060008:	d1f0      	bne.n	1005ffec <sdb_gatt_search_record+0xe>
1006000a:	2000      	movs	r0, #0
1006000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006000e:	20b3      	movs	r0, #179	@ 0xb3
10060010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10060014 <smp_sap_crt_generate_ediv>:
10060014:	b5f0      	push	{r4, r5, r6, r7, lr}
10060016:	b091      	sub	sp, #68	@ 0x44
10060018:	9201      	str	r2, [sp, #4]
1006001a:	9100      	str	r1, [sp, #0]
1006001c:	4605      	mov	r5, r0
1006001e:	a908      	add	r1, sp, #32
10060020:	2003      	movs	r0, #3
10060022:	8008      	strh	r0, [r1, #0]
10060024:	aa07      	add	r2, sp, #28
10060026:	2400      	movs	r4, #0
10060028:	8014      	strh	r4, [r2, #0]
1006002a:	4814      	ldr	r0, [pc, #80]	@ (1006007c <__arm_cp.0_0>)
1006002c:	6800      	ldr	r0, [r0, #0]
1006002e:	3018      	adds	r0, #24
10060030:	af03      	add	r7, sp, #12
10060032:	463b      	mov	r3, r7
10060034:	f000 f824 	bl	10060080 <smp_crt_diversify>
10060038:	ae0d      	add	r6, sp, #52	@ 0x34
1006003a:	2210      	movs	r2, #16
1006003c:	4630      	mov	r0, r6
1006003e:	4621      	mov	r1, r4
10060040:	f7f1 f83a 	bl	100510b8 <BLEPLAT_MemSet>
10060044:	2208      	movs	r2, #8
10060046:	4630      	mov	r0, r6
10060048:	9900      	ldr	r1, [sp, #0]
1006004a:	f7f1 f825 	bl	10051098 <BLEPLAT_MemCpy>
1006004e:	ac09      	add	r4, sp, #36	@ 0x24
10060050:	4638      	mov	r0, r7
10060052:	4631      	mov	r1, r6
10060054:	4622      	mov	r2, r4
10060056:	f7f7 ff61 	bl	10057f1c <hci_le_encrypt>
1006005a:	ae02      	add	r6, sp, #8
1006005c:	2202      	movs	r2, #2
1006005e:	4630      	mov	r0, r6
10060060:	4621      	mov	r1, r4
10060062:	f7f1 f819 	bl	10051098 <BLEPLAT_MemCpy>
10060066:	7828      	ldrb	r0, [r5, #0]
10060068:	9902      	ldr	r1, [sp, #8]
1006006a:	4041      	eors	r1, r0
1006006c:	9a01      	ldr	r2, [sp, #4]
1006006e:	7011      	strb	r1, [r2, #0]
10060070:	7870      	ldrb	r0, [r6, #1]
10060072:	7869      	ldrb	r1, [r5, #1]
10060074:	4041      	eors	r1, r0
10060076:	7051      	strb	r1, [r2, #1]
10060078:	b011      	add	sp, #68	@ 0x44
1006007a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006007c <__arm_cp.0_0>:
1006007c:	20002414 	.word	0x20002414

10060080 <smp_crt_diversify>:
10060080:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10060082:	780d      	ldrb	r5, [r1, #0]
10060084:	466c      	mov	r4, sp
10060086:	7025      	strb	r5, [r4, #0]
10060088:	7849      	ldrb	r1, [r1, #1]
1006008a:	7061      	strb	r1, [r4, #1]
1006008c:	7811      	ldrb	r1, [r2, #0]
1006008e:	70a1      	strb	r1, [r4, #2]
10060090:	7851      	ldrb	r1, [r2, #1]
10060092:	70e1      	strb	r1, [r4, #3]
10060094:	2100      	movs	r1, #0
10060096:	9103      	str	r1, [sp, #12]
10060098:	9102      	str	r1, [sp, #8]
1006009a:	9101      	str	r1, [sp, #4]
1006009c:	4621      	mov	r1, r4
1006009e:	461a      	mov	r2, r3
100600a0:	f7f7 ff3c 	bl	10057f1c <hci_le_encrypt>
100600a4:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

100600a8 <smp_sap_crt_generate_local_irk>:
100600a8:	b5e0      	push	{r5, r6, r7, lr}
100600aa:	4603      	mov	r3, r0
100600ac:	a901      	add	r1, sp, #4
100600ae:	2001      	movs	r0, #1
100600b0:	8008      	strh	r0, [r1, #0]
100600b2:	466a      	mov	r2, sp
100600b4:	2000      	movs	r0, #0
100600b6:	8010      	strh	r0, [r2, #0]
100600b8:	4802      	ldr	r0, [pc, #8]	@ (100600c4 <__arm_cp.2_0>)
100600ba:	6800      	ldr	r0, [r0, #0]
100600bc:	3018      	adds	r0, #24
100600be:	f7ff ffdf 	bl	10060080 <smp_crt_diversify>
100600c2:	bd8c      	pop	{r2, r3, r7, pc}

100600c4 <__arm_cp.2_0>:
100600c4:	20002414 	.word	0x20002414

100600c8 <smp_sap_crt_generate_rpa>:
100600c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100600ca:	b087      	sub	sp, #28
100600cc:	9000      	str	r0, [sp, #0]
100600ce:	ae03      	add	r6, sp, #12
100600d0:	4630      	mov	r0, r6
100600d2:	f7ff ffe9 	bl	100600a8 <smp_sap_crt_generate_local_irk>
100600d6:	2700      	movs	r7, #0
100600d8:	4638      	mov	r0, r7
100600da:	f001 fb8d 	bl	100617f8 <Hal_Get_Random_Number>
100600de:	0a01      	lsrs	r1, r0, #8
100600e0:	ad02      	add	r5, sp, #8
100600e2:	7069      	strb	r1, [r5, #1]
100600e4:	243f      	movs	r4, #63	@ 0x3f
100600e6:	4004      	ands	r4, r0
100600e8:	3440      	adds	r4, #64	@ 0x40
100600ea:	4638      	mov	r0, r7
100600ec:	f001 fb84 	bl	100617f8 <Hal_Get_Random_Number>
100600f0:	70ac      	strb	r4, [r5, #2]
100600f2:	7028      	strb	r0, [r5, #0]
100600f4:	af01      	add	r7, sp, #4
100600f6:	4630      	mov	r0, r6
100600f8:	4629      	mov	r1, r5
100600fa:	463a      	mov	r2, r7
100600fc:	f000 f80e 	bl	1006011c <smp_crt_calculate_hash>
10060100:	2603      	movs	r6, #3
10060102:	9c00      	ldr	r4, [sp, #0]
10060104:	4620      	mov	r0, r4
10060106:	4639      	mov	r1, r7
10060108:	4632      	mov	r2, r6
1006010a:	f7f0 ffc5 	bl	10051098 <BLEPLAT_MemCpy>
1006010e:	1ce0      	adds	r0, r4, #3
10060110:	4629      	mov	r1, r5
10060112:	4632      	mov	r2, r6
10060114:	f7f0 ffc0 	bl	10051098 <BLEPLAT_MemCpy>
10060118:	b007      	add	sp, #28
1006011a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006011c <smp_crt_calculate_hash>:
1006011c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006011e:	b089      	sub	sp, #36	@ 0x24
10060120:	9200      	str	r2, [sp, #0]
10060122:	460f      	mov	r7, r1
10060124:	4605      	mov	r5, r0
10060126:	ae05      	add	r6, sp, #20
10060128:	2100      	movs	r1, #0
1006012a:	2210      	movs	r2, #16
1006012c:	4630      	mov	r0, r6
1006012e:	f7f0 ffc3 	bl	100510b8 <BLEPLAT_MemSet>
10060132:	2403      	movs	r4, #3
10060134:	4630      	mov	r0, r6
10060136:	4639      	mov	r1, r7
10060138:	4622      	mov	r2, r4
1006013a:	f7f0 ffad 	bl	10051098 <BLEPLAT_MemCpy>
1006013e:	af01      	add	r7, sp, #4
10060140:	4628      	mov	r0, r5
10060142:	4631      	mov	r1, r6
10060144:	463a      	mov	r2, r7
10060146:	f7f7 fee9 	bl	10057f1c <hci_le_encrypt>
1006014a:	9800      	ldr	r0, [sp, #0]
1006014c:	4639      	mov	r1, r7
1006014e:	4622      	mov	r2, r4
10060150:	f7f0 ffa2 	bl	10051098 <BLEPLAT_MemCpy>
10060154:	b009      	add	sp, #36	@ 0x24
10060156:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060158 <smp_sap_crt_resolve_rpa>:
10060158:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006015a:	460a      	mov	r2, r1
1006015c:	4604      	mov	r4, r0
1006015e:	1cc1      	adds	r1, r0, #3
10060160:	ad01      	add	r5, sp, #4
10060162:	4610      	mov	r0, r2
10060164:	462a      	mov	r2, r5
10060166:	f7ff ffd9 	bl	1006011c <smp_crt_calculate_hash>
1006016a:	2203      	movs	r2, #3
1006016c:	4628      	mov	r0, r5
1006016e:	4621      	mov	r1, r4
10060170:	f7f0 ffb2 	bl	100510d8 <BLEPLAT_MemCmp>
10060174:	2800      	cmp	r0, #0
10060176:	d000      	beq.n	1006017a <smp_sap_crt_resolve_rpa+0x22>
10060178:	2081      	movs	r0, #129	@ 0x81
1006017a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006017c <smp_crt_s1_generate_stk>:
1006017c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006017e:	b085      	sub	sp, #20
10060180:	9300      	str	r3, [sp, #0]
10060182:	4617      	mov	r7, r2
10060184:	4605      	mov	r5, r0
10060186:	ae01      	add	r6, sp, #4
10060188:	4630      	mov	r0, r6
1006018a:	3008      	adds	r0, #8
1006018c:	2408      	movs	r4, #8
1006018e:	4622      	mov	r2, r4
10060190:	f7f0 ff82 	bl	10051098 <BLEPLAT_MemCpy>
10060194:	4630      	mov	r0, r6
10060196:	4639      	mov	r1, r7
10060198:	4622      	mov	r2, r4
1006019a:	f7f0 ff7d 	bl	10051098 <BLEPLAT_MemCpy>
1006019e:	4628      	mov	r0, r5
100601a0:	4631      	mov	r1, r6
100601a2:	9a00      	ldr	r2, [sp, #0]
100601a4:	f7f7 feba 	bl	10057f1c <hci_le_encrypt>
100601a8:	b005      	add	sp, #20
100601aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100601ac <smp_crt_generate_csrk>:
100601ac:	b5e0      	push	{r5, r6, r7, lr}
100601ae:	460b      	mov	r3, r1
100601b0:	4601      	mov	r1, r0
100601b2:	aa01      	add	r2, sp, #4
100601b4:	2001      	movs	r0, #1
100601b6:	8010      	strh	r0, [r2, #0]
100601b8:	4802      	ldr	r0, [pc, #8]	@ (100601c4 <__arm_cp.7_0>)
100601ba:	6800      	ldr	r0, [r0, #0]
100601bc:	3008      	adds	r0, #8
100601be:	f7ff ff5f 	bl	10060080 <smp_crt_diversify>
100601c2:	bd8c      	pop	{r2, r3, r7, pc}

100601c4 <__arm_cp.7_0>:
100601c4:	20002414 	.word	0x20002414

100601c8 <smp_crt_generate_cmac_tag>:
100601c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100601ca:	b095      	sub	sp, #84	@ 0x54
100601cc:	9301      	str	r3, [sp, #4]
100601ce:	4617      	mov	r7, r2
100601d0:	9103      	str	r1, [sp, #12]
100601d2:	2500      	movs	r5, #0
100601d4:	9514      	str	r5, [sp, #80]	@ 0x50
100601d6:	9513      	str	r5, [sp, #76]	@ 0x4c
100601d8:	9512      	str	r5, [sp, #72]	@ 0x48
100601da:	9511      	str	r5, [sp, #68]	@ 0x44
100601dc:	a911      	add	r1, sp, #68	@ 0x44
100601de:	ac0d      	add	r4, sp, #52	@ 0x34
100601e0:	9004      	str	r0, [sp, #16]
100601e2:	4622      	mov	r2, r4
100601e4:	f7f7 fe9a 	bl	10057f1c <hci_le_encrypt>
100601e8:	200f      	movs	r0, #15
100601ea:	9002      	str	r0, [sp, #8]
100601ec:	5626      	ldrsb	r6, [r4, r0]
100601ee:	a909      	add	r1, sp, #36	@ 0x24
100601f0:	4620      	mov	r0, r4
100601f2:	f000 f885 	bl	10060300 <smp_crt_left_shift>
100601f6:	2e00      	cmp	r6, #0
100601f8:	d467      	bmi.n	100602ca <smp_crt_generate_cmac_tag+0x102>
100601fa:	a809      	add	r0, sp, #36	@ 0x24
100601fc:	9902      	ldr	r1, [sp, #8]
100601fe:	5644      	ldrsb	r4, [r0, r1]
10060200:	a905      	add	r1, sp, #20
10060202:	f000 f87d 	bl	10060300 <smp_crt_left_shift>
10060206:	2c00      	cmp	r4, #0
10060208:	d46c      	bmi.n	100602e4 <smp_crt_generate_cmac_tag+0x11c>
1006020a:	a811      	add	r0, sp, #68	@ 0x44
1006020c:	2400      	movs	r4, #0
1006020e:	2210      	movs	r2, #16
10060210:	4621      	mov	r1, r4
10060212:	f7f0 ff51 	bl	100510b8 <BLEPLAT_MemSet>
10060216:	b2fd      	uxtb	r5, r7
10060218:	2d11      	cmp	r5, #17
1006021a:	d321      	bcc.n	10060260 <smp_crt_generate_cmac_tag+0x98>
1006021c:	1d20      	adds	r0, r4, #4
1006021e:	b281      	uxth	r1, r0
10060220:	2210      	movs	r2, #16
10060222:	ab0d      	add	r3, sp, #52	@ 0x34
10060224:	9803      	ldr	r0, [sp, #12]
10060226:	f7f3 faeb 	bl	10053800 <ACL_pkt_read>
1006022a:	2000      	movs	r0, #0
1006022c:	2810      	cmp	r0, #16
1006022e:	d007      	beq.n	10060240 <smp_crt_generate_cmac_tag+0x78>
10060230:	a90d      	add	r1, sp, #52	@ 0x34
10060232:	5c09      	ldrb	r1, [r1, r0]
10060234:	aa11      	add	r2, sp, #68	@ 0x44
10060236:	5c13      	ldrb	r3, [r2, r0]
10060238:	404b      	eors	r3, r1
1006023a:	5413      	strb	r3, [r2, r0]
1006023c:	1c40      	adds	r0, r0, #1
1006023e:	e7f5      	b.n	1006022c <smp_crt_generate_cmac_tag+0x64>
10060240:	ad11      	add	r5, sp, #68	@ 0x44
10060242:	ae0d      	add	r6, sp, #52	@ 0x34
10060244:	9804      	ldr	r0, [sp, #16]
10060246:	4629      	mov	r1, r5
10060248:	4632      	mov	r2, r6
1006024a:	f7f7 fe67 	bl	10057f1c <hci_le_encrypt>
1006024e:	2210      	movs	r2, #16
10060250:	4628      	mov	r0, r5
10060252:	4631      	mov	r1, r6
10060254:	f7f0 ff20 	bl	10051098 <BLEPLAT_MemCpy>
10060258:	3f10      	subs	r7, #16
1006025a:	3410      	adds	r4, #16
1006025c:	b2a4      	uxth	r4, r4
1006025e:	e7da      	b.n	10060216 <smp_crt_generate_cmac_tag+0x4e>
10060260:	2d10      	cmp	r5, #16
10060262:	d108      	bne.n	10060276 <smp_crt_generate_cmac_tag+0xae>
10060264:	1d20      	adds	r0, r4, #4
10060266:	b281      	uxth	r1, r0
10060268:	2210      	movs	r2, #16
1006026a:	ab0d      	add	r3, sp, #52	@ 0x34
1006026c:	9803      	ldr	r0, [sp, #12]
1006026e:	f7f3 fac7 	bl	10053800 <ACL_pkt_read>
10060272:	a809      	add	r0, sp, #36	@ 0x24
10060274:	e014      	b.n	100602a0 <smp_crt_generate_cmac_tag+0xd8>
10060276:	a80d      	add	r0, sp, #52	@ 0x34
10060278:	2100      	movs	r1, #0
1006027a:	2210      	movs	r2, #16
1006027c:	f7f0 ff1c 	bl	100510b8 <BLEPLAT_MemSet>
10060280:	0638      	lsls	r0, r7, #24
10060282:	d008      	beq.n	10060296 <smp_crt_generate_cmac_tag+0xce>
10060284:	a80d      	add	r0, sp, #52	@ 0x34
10060286:	1b43      	subs	r3, r0, r5
10060288:	3310      	adds	r3, #16
1006028a:	1d20      	adds	r0, r4, #4
1006028c:	b281      	uxth	r1, r0
1006028e:	9803      	ldr	r0, [sp, #12]
10060290:	462a      	mov	r2, r5
10060292:	f7f3 fab5 	bl	10053800 <ACL_pkt_read>
10060296:	a80d      	add	r0, sp, #52	@ 0x34
10060298:	1b40      	subs	r0, r0, r5
1006029a:	2180      	movs	r1, #128	@ 0x80
1006029c:	73c1      	strb	r1, [r0, #15]
1006029e:	a805      	add	r0, sp, #20
100602a0:	9a01      	ldr	r2, [sp, #4]
100602a2:	2100      	movs	r1, #0
100602a4:	2910      	cmp	r1, #16
100602a6:	d009      	beq.n	100602bc <smp_crt_generate_cmac_tag+0xf4>
100602a8:	ab0d      	add	r3, sp, #52	@ 0x34
100602aa:	5c5c      	ldrb	r4, [r3, r1]
100602ac:	5c43      	ldrb	r3, [r0, r1]
100602ae:	4063      	eors	r3, r4
100602b0:	ad11      	add	r5, sp, #68	@ 0x44
100602b2:	5c6c      	ldrb	r4, [r5, r1]
100602b4:	405c      	eors	r4, r3
100602b6:	546c      	strb	r4, [r5, r1]
100602b8:	1c49      	adds	r1, r1, #1
100602ba:	e7f3      	b.n	100602a4 <smp_crt_generate_cmac_tag+0xdc>
100602bc:	a911      	add	r1, sp, #68	@ 0x44
100602be:	9804      	ldr	r0, [sp, #16]
100602c0:	f7f7 fe2c 	bl	10057f1c <hci_le_encrypt>
100602c4:	2000      	movs	r0, #0
100602c6:	b015      	add	sp, #84	@ 0x54
100602c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100602ca:	a811      	add	r0, sp, #68	@ 0x44
100602cc:	2187      	movs	r1, #135	@ 0x87
100602ce:	7001      	strb	r1, [r0, #0]
100602d0:	2d0f      	cmp	r5, #15
100602d2:	d092      	beq.n	100601fa <smp_crt_generate_cmac_tag+0x32>
100602d4:	a809      	add	r0, sp, #36	@ 0x24
100602d6:	5d41      	ldrb	r1, [r0, r5]
100602d8:	aa11      	add	r2, sp, #68	@ 0x44
100602da:	5d52      	ldrb	r2, [r2, r5]
100602dc:	404a      	eors	r2, r1
100602de:	5542      	strb	r2, [r0, r5]
100602e0:	1c6d      	adds	r5, r5, #1
100602e2:	e7f5      	b.n	100602d0 <smp_crt_generate_cmac_tag+0x108>
100602e4:	a811      	add	r0, sp, #68	@ 0x44
100602e6:	2187      	movs	r1, #135	@ 0x87
100602e8:	7001      	strb	r1, [r0, #0]
100602ea:	2000      	movs	r0, #0
100602ec:	280f      	cmp	r0, #15
100602ee:	d08c      	beq.n	1006020a <smp_crt_generate_cmac_tag+0x42>
100602f0:	a905      	add	r1, sp, #20
100602f2:	5c0a      	ldrb	r2, [r1, r0]
100602f4:	ab11      	add	r3, sp, #68	@ 0x44
100602f6:	5c1b      	ldrb	r3, [r3, r0]
100602f8:	4053      	eors	r3, r2
100602fa:	540b      	strb	r3, [r1, r0]
100602fc:	1c40      	adds	r0, r0, #1
100602fe:	e7f5      	b.n	100602ec <smp_crt_generate_cmac_tag+0x124>

10060300 <smp_crt_left_shift>:
10060300:	b510      	push	{r4, lr}
10060302:	7802      	ldrb	r2, [r0, #0]
10060304:	0052      	lsls	r2, r2, #1
10060306:	700a      	strb	r2, [r1, #0]
10060308:	1c49      	adds	r1, r1, #1
1006030a:	2200      	movs	r2, #0
1006030c:	2a0f      	cmp	r2, #15
1006030e:	d00b      	beq.n	10060328 <smp_crt_left_shift+0x28>
10060310:	1883      	adds	r3, r0, r2
10060312:	785b      	ldrb	r3, [r3, #1]
10060314:	005b      	lsls	r3, r3, #1
10060316:	548b      	strb	r3, [r1, r2]
10060318:	5684      	ldrsb	r4, [r0, r2]
1006031a:	2c00      	cmp	r4, #0
1006031c:	d502      	bpl.n	10060324 <smp_crt_left_shift+0x24>
1006031e:	2401      	movs	r4, #1
10060320:	4323      	orrs	r3, r4
10060322:	548b      	strb	r3, [r1, r2]
10060324:	1c52      	adds	r2, r2, #1
10060326:	e7f1      	b.n	1006030c <smp_crt_left_shift+0xc>
10060328:	bd10      	pop	{r4, pc}

1006032a <smp_debug_trudy__set_config>:
1006032a:	200c      	movs	r0, #12
1006032c:	4770      	bx	lr
	...

10060330 <smp_fsm_process_actions_wrt_state_tsk>:
10060330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060332:	2700      	movs	r7, #0
10060334:	4b6b      	ldr	r3, [pc, #428]	@ (100604e4 <__arm_cp.0_0>)
10060336:	4a6c      	ldr	r2, [pc, #432]	@ (100604e8 <__arm_cp.0_1>)
10060338:	463d      	mov	r5, r7
1006033a:	6818      	ldr	r0, [r3, #0]
1006033c:	2134      	movs	r1, #52	@ 0x34
1006033e:	5c40      	ldrb	r0, [r0, r1]
10060340:	4285      	cmp	r5, r0
10060342:	d300      	bcc.n	10060346 <smp_fsm_process_actions_wrt_state_tsk+0x16>
10060344:	e0cd      	b.n	100604e2 <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
10060346:	6810      	ldr	r0, [r2, #0]
10060348:	21a4      	movs	r1, #164	@ 0xa4
1006034a:	5840      	ldr	r0, [r0, r1]
1006034c:	2800      	cmp	r0, #0
1006034e:	d100      	bne.n	10060352 <smp_fsm_process_actions_wrt_state_tsk+0x22>
10060350:	e0b2      	b.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10060352:	19c4      	adds	r4, r0, r7
10060354:	8920      	ldrh	r0, [r4, #8]
10060356:	2800      	cmp	r0, #0
10060358:	d100      	bne.n	1006035c <smp_fsm_process_actions_wrt_state_tsk+0x2c>
1006035a:	e0ad      	b.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006035c:	7aa0      	ldrb	r0, [r4, #10]
1006035e:	4601      	mov	r1, r0
10060360:	39d1      	subs	r1, #209	@ 0xd1
10060362:	2905      	cmp	r1, #5
10060364:	d35d      	bcc.n	10060422 <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10060366:	2800      	cmp	r0, #0
10060368:	d100      	bne.n	1006036c <smp_fsm_process_actions_wrt_state_tsk+0x3c>
1006036a:	e0a5      	b.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006036c:	28fe      	cmp	r0, #254	@ 0xfe
1006036e:	d100      	bne.n	10060372 <smp_fsm_process_actions_wrt_state_tsk+0x42>
10060370:	e08a      	b.n	10060488 <smp_fsm_process_actions_wrt_state_tsk+0x158>
10060372:	28a2      	cmp	r0, #162	@ 0xa2
10060374:	d059      	beq.n	1006042a <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10060376:	28aa      	cmp	r0, #170	@ 0xaa
10060378:	d100      	bne.n	1006037c <smp_fsm_process_actions_wrt_state_tsk+0x4c>
1006037a:	e081      	b.n	10060480 <smp_fsm_process_actions_wrt_state_tsk+0x150>
1006037c:	28b2      	cmp	r0, #178	@ 0xb2
1006037e:	d054      	beq.n	1006042a <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10060380:	28b4      	cmp	r0, #180	@ 0xb4
10060382:	d100      	bne.n	10060386 <smp_fsm_process_actions_wrt_state_tsk+0x56>
10060384:	e08a      	b.n	1006049c <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10060386:	28ba      	cmp	r0, #186	@ 0xba
10060388:	d07a      	beq.n	10060480 <smp_fsm_process_actions_wrt_state_tsk+0x150>
1006038a:	28bf      	cmp	r0, #191	@ 0xbf
1006038c:	d100      	bne.n	10060390 <smp_fsm_process_actions_wrt_state_tsk+0x60>
1006038e:	e089      	b.n	100604a4 <smp_fsm_process_actions_wrt_state_tsk+0x174>
10060390:	28f0      	cmp	r0, #240	@ 0xf0
10060392:	d100      	bne.n	10060396 <smp_fsm_process_actions_wrt_state_tsk+0x66>
10060394:	e08b      	b.n	100604ae <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10060396:	2810      	cmp	r0, #16
10060398:	d000      	beq.n	1006039c <smp_fsm_process_actions_wrt_state_tsk+0x6c>
1006039a:	e090      	b.n	100604be <smp_fsm_process_actions_wrt_state_tsk+0x18e>
1006039c:	2101      	movs	r1, #1
1006039e:	4620      	mov	r0, r4
100603a0:	f004 fcb8 	bl	10064d14 <smp_dep_sdb_find_bonding_record_by_conn_addr>
100603a4:	2800      	cmp	r0, #0
100603a6:	d100      	bne.n	100603aa <smp_fsm_process_actions_wrt_state_tsk+0x7a>
100603a8:	e096      	b.n	100604d8 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
100603aa:	2600      	movs	r6, #0
100603ac:	72a6      	strb	r6, [r4, #10]
100603ae:	f7f4 fc5b 	bl	10054c68 <GapIsPrivacySupported>
100603b2:	2800      	cmp	r0, #0
100603b4:	4b4b      	ldr	r3, [pc, #300]	@ (100604e4 <__arm_cp.0_0>)
100603b6:	4a4c      	ldr	r2, [pc, #304]	@ (100604e8 <__arm_cp.0_1>)
100603b8:	d07e      	beq.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100603ba:	2060      	movs	r0, #96	@ 0x60
100603bc:	5c20      	ldrb	r0, [r4, r0]
100603be:	07c0      	lsls	r0, r0, #31
100603c0:	d07a      	beq.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100603c2:	f004 fc18 	bl	10064bf6 <smp_dep_sdb_get_bonding_records_count>
100603c6:	4a48      	ldr	r2, [pc, #288]	@ (100604e8 <__arm_cp.0_1>)
100603c8:	4b46      	ldr	r3, [pc, #280]	@ (100604e4 <__arm_cp.0_0>)
100603ca:	2800      	cmp	r0, #0
100603cc:	d074      	beq.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100603ce:	79e0      	ldrb	r0, [r4, #7]
100603d0:	21c0      	movs	r1, #192	@ 0xc0
100603d2:	4001      	ands	r1, r0
100603d4:	2940      	cmp	r1, #64	@ 0x40
100603d6:	d16f      	bne.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100603d8:	4844      	ldr	r0, [pc, #272]	@ (100604ec <__arm_cp.0_2>)
100603da:	6800      	ldr	r0, [r0, #0]
100603dc:	214f      	movs	r1, #79	@ 0x4f
100603de:	5c40      	ldrb	r0, [r0, r1]
100603e0:	0700      	lsls	r0, r0, #28
100603e2:	d569      	bpl.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100603e4:	8924      	ldrh	r4, [r4, #8]
100603e6:	4842      	ldr	r0, [pc, #264]	@ (100604f0 <__arm_cp.0_3>)
100603e8:	6800      	ldr	r0, [r0, #0]
100603ea:	6980      	ldr	r0, [r0, #24]
100603ec:	2248      	movs	r2, #72	@ 0x48
100603ee:	2102      	movs	r1, #2
100603f0:	460b      	mov	r3, r1
100603f2:	f7f3 fb9d 	bl	10053b30 <aci_event_fifo_push_header>
100603f6:	4a3c      	ldr	r2, [pc, #240]	@ (100604e8 <__arm_cp.0_1>)
100603f8:	4b3a      	ldr	r3, [pc, #232]	@ (100604e4 <__arm_cp.0_0>)
100603fa:	2800      	cmp	r0, #0
100603fc:	d05c      	beq.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100603fe:	4601      	mov	r1, r0
10060400:	2004      	movs	r0, #4
10060402:	7248      	strb	r0, [r1, #9]
10060404:	2208      	movs	r2, #8
10060406:	720a      	strb	r2, [r1, #8]
10060408:	71ce      	strb	r6, [r1, #7]
1006040a:	7188      	strb	r0, [r1, #6]
1006040c:	728c      	strb	r4, [r1, #10]
1006040e:	20ff      	movs	r0, #255	@ 0xff
10060410:	7148      	strb	r0, [r1, #5]
10060412:	2082      	movs	r0, #130	@ 0x82
10060414:	7108      	strb	r0, [r1, #4]
10060416:	0a20      	lsrs	r0, r4, #8
10060418:	72c8      	strb	r0, [r1, #11]
1006041a:	2002      	movs	r0, #2
1006041c:	f7f3 fc25 	bl	10053c6a <aci_event_fifo_push>
10060420:	e048      	b.n	100604b4 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10060422:	4620      	mov	r0, r4
10060424:	f005 fa2c 	bl	10065880 <smp_pp3_keys_distribution_send>
10060428:	e044      	b.n	100604b4 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1006042a:	7de0      	ldrb	r0, [r4, #23]
1006042c:	2601      	movs	r6, #1
1006042e:	0700      	lsls	r0, r0, #28
10060430:	4630      	mov	r0, r6
10060432:	d513      	bpl.n	1006045c <smp_fsm_process_actions_wrt_state_tsk+0x12c>
10060434:	4620      	mov	r0, r4
10060436:	f005 fd28 	bl	10065e8a <smp_scp_public_key_prepare_and_exchange_ucfg_weak>
1006043a:	2800      	cmp	r0, #0
1006043c:	d006      	beq.n	1006044c <smp_fsm_process_actions_wrt_state_tsk+0x11c>
1006043e:	2812      	cmp	r0, #18
10060440:	d004      	beq.n	1006044c <smp_fsm_process_actions_wrt_state_tsk+0x11c>
10060442:	200e      	movs	r0, #14
10060444:	f000 febe 	bl	100611c4 <tsk_notify_idx>
10060448:	f7f0 f83f 	bl	100504ca <BLE_STACK_ProcessRequest>
1006044c:	7de0      	ldrb	r0, [r4, #23]
1006044e:	2160      	movs	r1, #96	@ 0x60
10060450:	4001      	ands	r1, r0
10060452:	3960      	subs	r1, #96	@ 0x60
10060454:	4248      	negs	r0, r1
10060456:	4148      	adcs	r0, r1
10060458:	4b22      	ldr	r3, [pc, #136]	@ (100604e4 <__arm_cp.0_0>)
1006045a:	4a23      	ldr	r2, [pc, #140]	@ (100604e8 <__arm_cp.0_1>)
1006045c:	7ce1      	ldrb	r1, [r4, #19]
1006045e:	2902      	cmp	r1, #2
10060460:	d104      	bne.n	1006046c <smp_fsm_process_actions_wrt_state_tsk+0x13c>
10060462:	7be1      	ldrb	r1, [r4, #15]
10060464:	2210      	movs	r2, #16
10060466:	400a      	ands	r2, r1
10060468:	0916      	lsrs	r6, r2, #4
1006046a:	4a1f      	ldr	r2, [pc, #124]	@ (100604e8 <__arm_cp.0_1>)
1006046c:	2800      	cmp	r0, #0
1006046e:	d023      	beq.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10060470:	2e00      	cmp	r6, #0
10060472:	d021      	beq.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10060474:	2060      	movs	r0, #96	@ 0x60
10060476:	5c20      	ldrb	r0, [r4, r0]
10060478:	07c0      	lsls	r0, r0, #31
1006047a:	d024      	beq.n	100604c6 <smp_fsm_process_actions_wrt_state_tsk+0x196>
1006047c:	204b      	movs	r0, #75	@ 0x4b
1006047e:	e023      	b.n	100604c8 <smp_fsm_process_actions_wrt_state_tsk+0x198>
10060480:	4620      	mov	r0, r4
10060482:	f000 f837 	bl	100604f4 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>
10060486:	e015      	b.n	100604b4 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10060488:	2060      	movs	r0, #96	@ 0x60
1006048a:	5620      	ldrsb	r0, [r4, r0]
1006048c:	2800      	cmp	r0, #0
1006048e:	d513      	bpl.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10060490:	2100      	movs	r1, #0
10060492:	2270      	movs	r2, #112	@ 0x70
10060494:	4620      	mov	r0, r4
10060496:	f7f0 fe0f 	bl	100510b8 <BLEPLAT_MemSet>
1006049a:	e00b      	b.n	100604b4 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1006049c:	4620      	mov	r0, r4
1006049e:	f005 f859 	bl	10065554 <smp_pp2_per_auth_stage_1_start>
100604a2:	e007      	b.n	100604b4 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100604a4:	2100      	movs	r1, #0
100604a6:	4620      	mov	r0, r4
100604a8:	f005 f9a1 	bl	100657ee <smp_pp3_keys_distribution_start>
100604ac:	e002      	b.n	100604b4 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100604ae:	4620      	mov	r0, r4
100604b0:	f004 fcb2 	bl	10064e18 <smp_pp3_pairing_completed_successful>
100604b4:	4a0c      	ldr	r2, [pc, #48]	@ (100604e8 <__arm_cp.0_1>)
100604b6:	4b0b      	ldr	r3, [pc, #44]	@ (100604e4 <__arm_cp.0_0>)
100604b8:	3770      	adds	r7, #112	@ 0x70
100604ba:	1c6d      	adds	r5, r5, #1
100604bc:	e73d      	b.n	1006033a <smp_fsm_process_actions_wrt_state_tsk+0xa>
100604be:	4620      	mov	r0, r4
100604c0:	f000 f819 	bl	100604f6 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
100604c4:	e00a      	b.n	100604dc <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
100604c6:	205b      	movs	r0, #91	@ 0x5b
100604c8:	43c0      	mvns	r0, r0
100604ca:	72a0      	strb	r0, [r4, #10]
100604cc:	200e      	movs	r0, #14
100604ce:	f000 fe79 	bl	100611c4 <tsk_notify_idx>
100604d2:	f7ef fffa 	bl	100504ca <BLE_STACK_ProcessRequest>
100604d6:	e001      	b.n	100604dc <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
100604d8:	20f1      	movs	r0, #241	@ 0xf1
100604da:	72a0      	strb	r0, [r4, #10]
100604dc:	4b01      	ldr	r3, [pc, #4]	@ (100604e4 <__arm_cp.0_0>)
100604de:	4a02      	ldr	r2, [pc, #8]	@ (100604e8 <__arm_cp.0_1>)
100604e0:	e7ea      	b.n	100604b8 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100604e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100604e4 <__arm_cp.0_0>:
100604e4:	20002414 	.word	0x20002414

100604e8 <__arm_cp.0_1>:
100604e8:	200024b4 	.word	0x200024b4

100604ec <__arm_cp.0_2>:
100604ec:	20002468 	.word	0x20002468

100604f0 <__arm_cp.0_3>:
100604f0:	20002418 	.word	0x20002418

100604f4 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>:
100604f4:	4770      	bx	lr

100604f6 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
100604f6:	4770      	bx	lr

100604f8 <smp_rxp_process_rxed_packets_tsk>:
100604f8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100604fa:	4f60      	ldr	r7, [pc, #384]	@ (1006067c <__arm_cp.0_0>)
100604fc:	4c60      	ldr	r4, [pc, #384]	@ (10060680 <__arm_cp.0_1>)
100604fe:	6838      	ldr	r0, [r7, #0]
10060500:	6801      	ldr	r1, [r0, #0]
10060502:	2900      	cmp	r1, #0
10060504:	d100      	bne.n	10060508 <smp_rxp_process_rxed_packets_tsk+0x10>
10060506:	e0b8      	b.n	1006067a <smp_rxp_process_rxed_packets_tsk+0x182>
10060508:	f001 f878 	bl	100615fc <ACL_list_remove_head>
1006050c:	4605      	mov	r5, r0
1006050e:	8800      	ldrh	r0, [r0, #0]
10060510:	f005 fc4c 	bl	10065dac <smp_get_remote_device_list_item>
10060514:	2800      	cmp	r0, #0
10060516:	d0f2      	beq.n	100604fe <smp_rxp_process_rxed_packets_tsk+0x6>
10060518:	4606      	mov	r6, r0
1006051a:	6838      	ldr	r0, [r7, #0]
1006051c:	21b0      	movs	r1, #176	@ 0xb0
1006051e:	5c40      	ldrb	r0, [r0, r1]
10060520:	2800      	cmp	r0, #0
10060522:	d00e      	beq.n	10060542 <smp_rxp_process_rxed_packets_tsk+0x4a>
10060524:	2108      	movs	r1, #8
10060526:	2200      	movs	r2, #0
10060528:	2301      	movs	r3, #1
1006052a:	4630      	mov	r0, r6
1006052c:	f004 fd2c 	bl	10064f88 <smp_pp3_pairing_failed_send>
10060530:	2800      	cmp	r0, #0
10060532:	d00e      	beq.n	10060552 <smp_rxp_process_rxed_packets_tsk+0x5a>
10060534:	28fd      	cmp	r0, #253	@ 0xfd
10060536:	d000      	beq.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
10060538:	e096      	b.n	10060668 <smp_rxp_process_rxed_packets_tsk+0x170>
1006053a:	4628      	mov	r0, r5
1006053c:	f7f3 f944 	bl	100537c8 <ACL_pkt_release>
10060540:	e7dd      	b.n	100604fe <smp_rxp_process_rxed_packets_tsk+0x6>
10060542:	6868      	ldr	r0, [r5, #4]
10060544:	7a00      	ldrb	r0, [r0, #8]
10060546:	2805      	cmp	r0, #5
10060548:	d10c      	bne.n	10060564 <smp_rxp_process_rxed_packets_tsk+0x6c>
1006054a:	4628      	mov	r0, r5
1006054c:	4631      	mov	r1, r6
1006054e:	f004 fcef 	bl	10064f30 <smp_pp3_pairing_failed_receive>
10060552:	4628      	mov	r0, r5
10060554:	f7f3 f938 	bl	100537c8 <ACL_pkt_release>
10060558:	200e      	movs	r0, #14
1006055a:	f000 fe33 	bl	100611c4 <tsk_notify_idx>
1006055e:	f7ef ffb4 	bl	100504ca <BLE_STACK_ProcessRequest>
10060562:	e7cc      	b.n	100604fe <smp_rxp_process_rxed_packets_tsk+0x6>
10060564:	7ab1      	ldrb	r1, [r6, #10]
10060566:	29f1      	cmp	r1, #241	@ 0xf1
10060568:	d001      	beq.n	1006056e <smp_rxp_process_rxed_packets_tsk+0x76>
1006056a:	2900      	cmp	r1, #0
1006056c:	d10a      	bne.n	10060584 <smp_rxp_process_rxed_packets_tsk+0x8c>
1006056e:	2160      	movs	r1, #96	@ 0x60
10060570:	5c72      	ldrb	r2, [r6, r1]
10060572:	2101      	movs	r1, #1
10060574:	4011      	ands	r1, r2
10060576:	d101      	bne.n	1006057c <smp_rxp_process_rxed_packets_tsk+0x84>
10060578:	280b      	cmp	r0, #11
1006057a:	d1de      	bne.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
1006057c:	2900      	cmp	r1, #0
1006057e:	d001      	beq.n	10060584 <smp_rxp_process_rxed_packets_tsk+0x8c>
10060580:	2801      	cmp	r0, #1
10060582:	d1da      	bne.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
10060584:	7df0      	ldrb	r0, [r6, #23]
10060586:	0700      	lsls	r0, r0, #28
10060588:	d506      	bpl.n	10060598 <smp_rxp_process_rxed_packets_tsk+0xa0>
1006058a:	9602      	str	r6, [sp, #8]
1006058c:	9501      	str	r5, [sp, #4]
1006058e:	a801      	add	r0, sp, #4
10060590:	f000 f894 	bl	100606bc <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>
10060594:	28fc      	cmp	r0, #252	@ 0xfc
10060596:	d1cb      	bne.n	10060530 <smp_rxp_process_rxed_packets_tsk+0x38>
10060598:	2060      	movs	r0, #96	@ 0x60
1006059a:	5c30      	ldrb	r0, [r6, r0]
1006059c:	07c0      	lsls	r0, r0, #31
1006059e:	d107      	bne.n	100605b0 <smp_rxp_process_rxed_packets_tsk+0xb8>
100605a0:	9602      	str	r6, [sp, #8]
100605a2:	9501      	str	r5, [sp, #4]
100605a4:	a801      	add	r0, sp, #4
100605a6:	f000 f88b 	bl	100606c0 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
100605aa:	28fc      	cmp	r0, #252	@ 0xfc
100605ac:	d1c0      	bne.n	10060530 <smp_rxp_process_rxed_packets_tsk+0x38>
100605ae:	e022      	b.n	100605f6 <smp_rxp_process_rxed_packets_tsk+0xfe>
100605b0:	6868      	ldr	r0, [r5, #4]
100605b2:	7a00      	ldrb	r0, [r0, #8]
100605b4:	2804      	cmp	r0, #4
100605b6:	d031      	beq.n	1006061c <smp_rxp_process_rxed_packets_tsk+0x124>
100605b8:	2803      	cmp	r0, #3
100605ba:	d037      	beq.n	1006062c <smp_rxp_process_rxed_packets_tsk+0x134>
100605bc:	2801      	cmp	r0, #1
100605be:	d11a      	bne.n	100605f6 <smp_rxp_process_rxed_packets_tsk+0xfe>
100605c0:	7ab0      	ldrb	r0, [r6, #10]
100605c2:	2800      	cmp	r0, #0
100605c4:	d003      	beq.n	100605ce <smp_rxp_process_rxed_packets_tsk+0xd6>
100605c6:	28fb      	cmp	r0, #251	@ 0xfb
100605c8:	d047      	beq.n	1006065a <smp_rxp_process_rxed_packets_tsk+0x162>
100605ca:	28f1      	cmp	r0, #241	@ 0xf1
100605cc:	d1b5      	bne.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
100605ce:	8930      	ldrh	r0, [r6, #8]
100605d0:	f005 fbcc 	bl	10065d6c <smp_get_remote_device_list_index>
100605d4:	4602      	mov	r2, r0
100605d6:	2000      	movs	r0, #0
100605d8:	4601      	mov	r1, r0
100605da:	4623      	mov	r3, r4
100605dc:	f000 f88e 	bl	100606fc <smp_timer_reset>
100605e0:	7e30      	ldrb	r0, [r6, #24]
100605e2:	0781      	lsls	r1, r0, #30
100605e4:	d502      	bpl.n	100605ec <smp_rxp_process_rxed_packets_tsk+0xf4>
100605e6:	2103      	movs	r1, #3
100605e8:	4308      	orrs	r0, r1
100605ea:	7630      	strb	r0, [r6, #24]
100605ec:	4628      	mov	r0, r5
100605ee:	4631      	mov	r1, r6
100605f0:	f004 fe9e 	bl	10065330 <smp_pp1_per_rxp_pairing_request>
100605f4:	e7d9      	b.n	100605aa <smp_rxp_process_rxed_packets_tsk+0xb2>
100605f6:	4628      	mov	r0, r5
100605f8:	4631      	mov	r1, r6
100605fa:	f005 fa0f 	bl	10065a1c <smp_pp3_keys_distribution_receive>
100605fe:	28fc      	cmp	r0, #252	@ 0xfc
10060600:	d003      	beq.n	1006060a <smp_rxp_process_rxed_packets_tsk+0x112>
10060602:	2886      	cmp	r0, #134	@ 0x86
10060604:	d099      	beq.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
10060606:	2884      	cmp	r0, #132	@ 0x84
10060608:	d192      	bne.n	10060530 <smp_rxp_process_rxed_packets_tsk+0x38>
1006060a:	7df0      	ldrb	r0, [r6, #23]
1006060c:	0700      	lsls	r0, r0, #28
1006060e:	d594      	bpl.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
10060610:	9602      	str	r6, [sp, #8]
10060612:	9501      	str	r5, [sp, #4]
10060614:	a801      	add	r0, sp, #4
10060616:	f000 f84f 	bl	100606b8 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>
1006061a:	e789      	b.n	10060530 <smp_rxp_process_rxed_packets_tsk+0x38>
1006061c:	7ab0      	ldrb	r0, [r6, #10]
1006061e:	28b6      	cmp	r0, #182	@ 0xb6
10060620:	d18b      	bne.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
10060622:	4628      	mov	r0, r5
10060624:	4631      	mov	r1, r6
10060626:	f005 f84d 	bl	100656c4 <smp_pp2_per_rx_process_pairing_random>
1006062a:	e7be      	b.n	100605aa <smp_rxp_process_rxed_packets_tsk+0xb2>
1006062c:	7ab0      	ldrb	r0, [r6, #10]
1006062e:	28b2      	cmp	r0, #178	@ 0xb2
10060630:	d009      	beq.n	10060646 <smp_rxp_process_rxed_packets_tsk+0x14e>
10060632:	28b4      	cmp	r0, #180	@ 0xb4
10060634:	d007      	beq.n	10060646 <smp_rxp_process_rxed_packets_tsk+0x14e>
10060636:	28b5      	cmp	r0, #181	@ 0xb5
10060638:	d000      	beq.n	1006063c <smp_rxp_process_rxed_packets_tsk+0x144>
1006063a:	e77e      	b.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
1006063c:	4628      	mov	r0, r5
1006063e:	4631      	mov	r1, r6
10060640:	f004 ff4a 	bl	100654d8 <smp_pp2_per_rx_process_pairing_confirm>
10060644:	e7b1      	b.n	100605aa <smp_rxp_process_rxed_packets_tsk+0xb2>
10060646:	7cf0      	ldrb	r0, [r6, #19]
10060648:	2802      	cmp	r0, #2
1006064a:	d000      	beq.n	1006064e <smp_rxp_process_rxed_packets_tsk+0x156>
1006064c:	e775      	b.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
1006064e:	6838      	ldr	r0, [r7, #0]
10060650:	2140      	movs	r1, #64	@ 0x40
10060652:	5c41      	ldrb	r1, [r0, r1]
10060654:	2903      	cmp	r1, #3
10060656:	d108      	bne.n	1006066a <smp_rxp_process_rxed_packets_tsk+0x172>
10060658:	e76f      	b.n	1006053a <smp_rxp_process_rxed_packets_tsk+0x42>
1006065a:	2109      	movs	r1, #9
1006065c:	2200      	movs	r2, #0
1006065e:	2301      	movs	r3, #1
10060660:	4630      	mov	r0, r6
10060662:	f004 fc91 	bl	10064f88 <smp_pp3_pairing_failed_send>
10060666:	e7a0      	b.n	100605aa <smp_rxp_process_rxed_packets_tsk+0xb2>
10060668:	6838      	ldr	r0, [r7, #0]
1006066a:	4629      	mov	r1, r5
1006066c:	f000 ffa7 	bl	100615be <ACL_list_insert_head>
10060670:	200f      	movs	r0, #15
10060672:	f000 fda7 	bl	100611c4 <tsk_notify_idx>
10060676:	f7ef ff28 	bl	100504ca <BLE_STACK_ProcessRequest>
1006067a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1006067c <__arm_cp.0_0>:
1006067c:	200024b4 	.word	0x200024b4

10060680 <__arm_cp.0_1>:
10060680:	00007530 	.word	0x00007530

10060684 <smp_rxp_flush_packet_queues>:
10060684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060686:	4d0a      	ldr	r5, [pc, #40]	@ (100606b0 <__arm_cp.4_0>)
10060688:	4005      	ands	r5, r0
1006068a:	4e0a      	ldr	r6, [pc, #40]	@ (100606b4 <__arm_cp.4_1>)
1006068c:	6830      	ldr	r0, [r6, #0]
1006068e:	6807      	ldr	r7, [r0, #0]
10060690:	2f00      	cmp	r7, #0
10060692:	d00c      	beq.n	100606ae <smp_rxp_flush_packet_queues+0x2a>
10060694:	463c      	mov	r4, r7
10060696:	69ff      	ldr	r7, [r7, #28]
10060698:	8820      	ldrh	r0, [r4, #0]
1006069a:	42a8      	cmp	r0, r5
1006069c:	d1f8      	bne.n	10060690 <smp_rxp_flush_packet_queues+0xc>
1006069e:	6830      	ldr	r0, [r6, #0]
100606a0:	4621      	mov	r1, r4
100606a2:	f000 ff95 	bl	100615d0 <ACL_list_remove>
100606a6:	4620      	mov	r0, r4
100606a8:	f7f3 f88e 	bl	100537c8 <ACL_pkt_release>
100606ac:	e7f0      	b.n	10060690 <smp_rxp_flush_packet_queues+0xc>
100606ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100606b0 <__arm_cp.4_0>:
100606b0:	00000fff 	.word	0x00000fff

100606b4 <__arm_cp.4_1>:
100606b4:	200024b4 	.word	0x200024b4

100606b8 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>:
100606b8:	201f      	movs	r0, #31
100606ba:	4770      	bx	lr

100606bc <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>:
100606bc:	201f      	movs	r0, #31
100606be:	4770      	bx	lr

100606c0 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
100606c0:	201f      	movs	r0, #31
100606c2:	4770      	bx	lr

100606c4 <smp_timer_init>:
100606c4:	b580      	push	{r7, lr}
100606c6:	4806      	ldr	r0, [pc, #24]	@ (100606e0 <__arm_cp.0_0>)
100606c8:	7ac1      	ldrb	r1, [r0, #11]
100606ca:	4806      	ldr	r0, [pc, #24]	@ (100606e4 <__arm_cp.0_1>)
100606cc:	6800      	ldr	r0, [r0, #0]
100606ce:	3008      	adds	r0, #8
100606d0:	1cc9      	adds	r1, r1, #3
100606d2:	b2c9      	uxtb	r1, r1
100606d4:	4a04      	ldr	r2, [pc, #16]	@ (100606e8 <__arm_cp.0_2>)
100606d6:	2307      	movs	r3, #7
100606d8:	f000 fdd2 	bl	10061280 <CST_init>
100606dc:	bd80      	pop	{r7, pc}
100606de:	46c0      	nop			@ (mov r8, r8)

100606e0 <__arm_cp.0_0>:
100606e0:	2000247c 	.word	0x2000247c

100606e4 <__arm_cp.0_1>:
100606e4:	200024b4 	.word	0x200024b4

100606e8 <__arm_cp.0_2>:
100606e8:	100606ed 	.word	0x100606ed

100606ec <smp_timers_cb_wrapper>:
100606ec:	b580      	push	{r7, lr}
100606ee:	6940      	ldr	r0, [r0, #20]
100606f0:	4901      	ldr	r1, [pc, #4]	@ (100606f8 <__arm_cp.1_0>)
100606f2:	f000 fe9e 	bl	10061432 <cst_sharedCallback>
100606f6:	bd80      	pop	{r7, pc}

100606f8 <__arm_cp.1_0>:
100606f8:	10060795 	.word	0x10060795

100606fc <smp_timer_reset>:
100606fc:	b510      	push	{r4, lr}
100606fe:	2900      	cmp	r1, #0
10060700:	d006      	beq.n	10060710 <smp_timer_reset+0x14>
10060702:	2486      	movs	r4, #134	@ 0x86
10060704:	2901      	cmp	r1, #1
10060706:	d11b      	bne.n	10060740 <smp_timer_reset+0x44>
10060708:	2a02      	cmp	r2, #2
1006070a:	d819      	bhi.n	10060740 <smp_timer_reset+0x44>
1006070c:	2100      	movs	r1, #0
1006070e:	e000      	b.n	10060712 <smp_timer_reset+0x16>
10060710:	2103      	movs	r1, #3
10060712:	2801      	cmp	r0, #1
10060714:	d00a      	beq.n	1006072c <smp_timer_reset+0x30>
10060716:	2800      	cmp	r0, #0
10060718:	d111      	bne.n	1006073e <smp_timer_reset+0x42>
1006071a:	1888      	adds	r0, r1, r2
1006071c:	b2c1      	uxtb	r1, r0
1006071e:	4809      	ldr	r0, [pc, #36]	@ (10060744 <__arm_cp.2_0>)
10060720:	6800      	ldr	r0, [r0, #0]
10060722:	3008      	adds	r0, #8
10060724:	2201      	movs	r2, #1
10060726:	f000 fdf6 	bl	10061316 <CST_start>
1006072a:	e006      	b.n	1006073a <smp_timer_reset+0x3e>
1006072c:	1888      	adds	r0, r1, r2
1006072e:	b2c1      	uxtb	r1, r0
10060730:	4804      	ldr	r0, [pc, #16]	@ (10060744 <__arm_cp.2_0>)
10060732:	6800      	ldr	r0, [r0, #0]
10060734:	3008      	adds	r0, #8
10060736:	f000 fdb8 	bl	100612aa <CST_stop>
1006073a:	4604      	mov	r4, r0
1006073c:	e000      	b.n	10060740 <smp_timer_reset+0x44>
1006073e:	2400      	movs	r4, #0
10060740:	4620      	mov	r0, r4
10060742:	bd10      	pop	{r4, pc}

10060744 <__arm_cp.2_0>:
10060744:	200024b4 	.word	0x200024b4

10060748 <smp_timers_protocol_timeout_cb>:
10060748:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006074a:	4605      	mov	r5, r0
1006074c:	2070      	movs	r0, #112	@ 0x70
1006074e:	9002      	str	r0, [sp, #8]
10060750:	4345      	muls	r5, r0
10060752:	480f      	ldr	r0, [pc, #60]	@ (10060790 <__arm_cp.3_0>)
10060754:	6800      	ldr	r0, [r0, #0]
10060756:	21a4      	movs	r1, #164	@ 0xa4
10060758:	9101      	str	r1, [sp, #4]
1006075a:	5840      	ldr	r0, [r0, r1]
1006075c:	1947      	adds	r7, r0, r5
1006075e:	8939      	ldrh	r1, [r7, #8]
10060760:	2002      	movs	r0, #2
10060762:	2401      	movs	r4, #1
10060764:	2600      	movs	r6, #0
10060766:	4622      	mov	r2, r4
10060768:	4633      	mov	r3, r6
1006076a:	f002 f995 	bl	10062a98 <aci_gap_pairing_complete_event_push_noinline>
1006076e:	4638      	mov	r0, r7
10060770:	4621      	mov	r1, r4
10060772:	f004 fbb9 	bl	10064ee8 <smp_pp3_pairing_completed_update_stats>
10060776:	8938      	ldrh	r0, [r7, #8]
10060778:	f7ff ff84 	bl	10060684 <smp_rxp_flush_packet_queues>
1006077c:	4804      	ldr	r0, [pc, #16]	@ (10060790 <__arm_cp.3_0>)
1006077e:	6800      	ldr	r0, [r0, #0]
10060780:	9901      	ldr	r1, [sp, #4]
10060782:	5840      	ldr	r0, [r0, r1]
10060784:	1940      	adds	r0, r0, r5
10060786:	4631      	mov	r1, r6
10060788:	9a02      	ldr	r2, [sp, #8]
1006078a:	f7f0 fc95 	bl	100510b8 <BLEPLAT_MemSet>
1006078e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10060790 <__arm_cp.3_0>:
10060790:	200024b4 	.word	0x200024b4

10060794 <smp_timers_cb>:
10060794:	b580      	push	{r7, lr}
10060796:	2802      	cmp	r0, #2
10060798:	d802      	bhi.n	100607a0 <smp_timers_cb+0xc>
1006079a:	f005 fa57 	bl	10065c4c <smp_cmn_repeated_attacks_timer_cb>
1006079e:	bd80      	pop	{r7, pc}
100607a0:	4904      	ldr	r1, [pc, #16]	@ (100607b4 <__arm_cp.4_0>)
100607a2:	7ac9      	ldrb	r1, [r1, #11]
100607a4:	1cc9      	adds	r1, r1, #3
100607a6:	4281      	cmp	r1, r0
100607a8:	d903      	bls.n	100607b2 <smp_timers_cb+0x1e>
100607aa:	1ec0      	subs	r0, r0, #3
100607ac:	b2c0      	uxtb	r0, r0
100607ae:	f7ff ffcb 	bl	10060748 <smp_timers_protocol_timeout_cb>
100607b2:	bd80      	pop	{r7, pc}

100607b4 <__arm_cp.4_0>:
100607b4:	2000247c 	.word	0x2000247c

100607b8 <smp_init>:
100607b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100607ba:	2029      	movs	r0, #41	@ 0x29
100607bc:	00c1      	lsls	r1, r0, #3
100607be:	2401      	movs	r4, #1
100607c0:	4d20      	ldr	r5, [pc, #128]	@ (10060844 <__arm_cp.0_0>)
100607c2:	4620      	mov	r0, r4
100607c4:	47a8      	blx	r5
100607c6:	4e20      	ldr	r6, [pc, #128]	@ (10060848 <__arm_cp.0_1>)
100607c8:	6030      	str	r0, [r6, #0]
100607ca:	4f20      	ldr	r7, [pc, #128]	@ (1006084c <__arm_cp.0_2>)
100607cc:	7af8      	ldrb	r0, [r7, #11]
100607ce:	2170      	movs	r1, #112	@ 0x70
100607d0:	47a8      	blx	r5
100607d2:	6831      	ldr	r1, [r6, #0]
100607d4:	22a4      	movs	r2, #164	@ 0xa4
100607d6:	5088      	str	r0, [r1, r2]
100607d8:	f005 f9c0 	bl	10065b5c <smp_cmn_rejectlist_init>
100607dc:	2128      	movs	r1, #40	@ 0x28
100607de:	4620      	mov	r0, r4
100607e0:	47a8      	blx	r5
100607e2:	6831      	ldr	r1, [r6, #0]
100607e4:	22ac      	movs	r2, #172	@ 0xac
100607e6:	5088      	str	r0, [r1, r2]
100607e8:	7af8      	ldrb	r0, [r7, #11]
100607ea:	1cc0      	adds	r0, r0, #3
100607ec:	b2c0      	uxtb	r0, r0
100607ee:	1c41      	adds	r1, r0, #1
100607f0:	4d17      	ldr	r5, [pc, #92]	@ (10060850 <__arm_cp.0_3>)
100607f2:	4628      	mov	r0, r5
100607f4:	4622      	mov	r2, r4
100607f6:	f7fe fefd 	bl	1005f5f4 <csmem_mem_assign>
100607fa:	6831      	ldr	r1, [r6, #0]
100607fc:	6288      	str	r0, [r1, #40]	@ 0x28
100607fe:	7af8      	ldrb	r0, [r7, #11]
10060800:	1cc0      	adds	r0, r0, #3
10060802:	b2c1      	uxtb	r1, r0
10060804:	2202      	movs	r2, #2
10060806:	4628      	mov	r0, r5
10060808:	f7fe fef4 	bl	1005f5f4 <csmem_mem_assign>
1006080c:	6831      	ldr	r1, [r6, #0]
1006080e:	62c8      	str	r0, [r1, #44]	@ 0x2c
10060810:	4608      	mov	r0, r1
10060812:	f000 fec9 	bl	100615a8 <ACL_list_init>
10060816:	f7ff ff55 	bl	100606c4 <smp_timer_init>
1006081a:	6830      	ldr	r0, [r6, #0]
1006081c:	2142      	movs	r1, #66	@ 0x42
1006081e:	2500      	movs	r5, #0
10060820:	5245      	strh	r5, [r0, r1]
10060822:	2140      	movs	r1, #64	@ 0x40
10060824:	2203      	movs	r2, #3
10060826:	5442      	strb	r2, [r0, r1]
10060828:	490a      	ldr	r1, [pc, #40]	@ (10060854 <__arm_cp.0_4>)
1006082a:	6304      	str	r4, [r0, #48]	@ 0x30
1006082c:	6341      	str	r1, [r0, #52]	@ 0x34
1006082e:	6385      	str	r5, [r0, #56]	@ 0x38
10060830:	3044      	adds	r0, #68	@ 0x44
10060832:	2110      	movs	r1, #16
10060834:	462a      	mov	r2, r5
10060836:	f000 ffec 	bl	10061812 <HAL_Generate_Random_Bytes_To>
1006083a:	4628      	mov	r0, r5
1006083c:	f005 fb22 	bl	10065e84 <smp_scp_init_ucfg_weak>
10060840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060842:	46c0      	nop			@ (mov r8, r8)

10060844 <__arm_cp.0_0>:
10060844:	1005f619 	.word	0x1005f619

10060848 <__arm_cp.0_1>:
10060848:	200024b4 	.word	0x200024b4

1006084c <__arm_cp.0_2>:
1006084c:	2000247c 	.word	0x2000247c

10060850 <__arm_cp.0_3>:
10060850:	20002478 	.word	0x20002478

10060854 <__arm_cp.0_4>:
10060854:	07071007 	.word	0x07071007

10060858 <smp_sap_aci_set_io_capabilities>:
10060858:	b510      	push	{r4, lr}
1006085a:	4604      	mov	r4, r0
1006085c:	f000 f80c 	bl	10060878 <smp_check_is_any_pairing_ongoing>
10060860:	2800      	cmp	r0, #0
10060862:	d001      	beq.n	10060868 <smp_sap_aci_set_io_capabilities+0x10>
10060864:	200c      	movs	r0, #12
10060866:	bd10      	pop	{r4, pc}
10060868:	4802      	ldr	r0, [pc, #8]	@ (10060874 <__arm_cp.2_0>)
1006086a:	6800      	ldr	r0, [r0, #0]
1006086c:	2140      	movs	r1, #64	@ 0x40
1006086e:	5444      	strb	r4, [r0, r1]
10060870:	2000      	movs	r0, #0
10060872:	bd10      	pop	{r4, pc}

10060874 <__arm_cp.2_0>:
10060874:	200024b4 	.word	0x200024b4

10060878 <smp_check_is_any_pairing_ongoing>:
10060878:	b570      	push	{r4, r5, r6, lr}
1006087a:	4810      	ldr	r0, [pc, #64]	@ (100608bc <__arm_cp.3_0>)
1006087c:	6800      	ldr	r0, [r0, #0]
1006087e:	2134      	movs	r1, #52	@ 0x34
10060880:	5c40      	ldrb	r0, [r0, r1]
10060882:	2170      	movs	r1, #112	@ 0x70
10060884:	4341      	muls	r1, r0
10060886:	480e      	ldr	r0, [pc, #56]	@ (100608c0 <__arm_cp.3_1>)
10060888:	6802      	ldr	r2, [r0, #0]
1006088a:	32a4      	adds	r2, #164	@ 0xa4
1006088c:	2000      	movs	r0, #0
1006088e:	4603      	mov	r3, r0
10060890:	4299      	cmp	r1, r3
10060892:	d012      	beq.n	100608ba <smp_check_is_any_pairing_ongoing+0x42>
10060894:	6814      	ldr	r4, [r2, #0]
10060896:	18e5      	adds	r5, r4, r3
10060898:	7aac      	ldrb	r4, [r5, #10]
1006089a:	2660      	movs	r6, #96	@ 0x60
1006089c:	5dad      	ldrb	r5, [r5, r6]
1006089e:	07ed      	lsls	r5, r5, #31
100608a0:	d104      	bne.n	100608ac <smp_check_is_any_pairing_ongoing+0x34>
100608a2:	3460      	adds	r4, #96	@ 0x60
100608a4:	b2e4      	uxtb	r4, r4
100608a6:	2c51      	cmp	r4, #81	@ 0x51
100608a8:	d204      	bcs.n	100608b4 <smp_check_is_any_pairing_ongoing+0x3c>
100608aa:	e005      	b.n	100608b8 <smp_check_is_any_pairing_ongoing+0x40>
100608ac:	3450      	adds	r4, #80	@ 0x50
100608ae:	b2e4      	uxtb	r4, r4
100608b0:	2c41      	cmp	r4, #65	@ 0x41
100608b2:	d301      	bcc.n	100608b8 <smp_check_is_any_pairing_ongoing+0x40>
100608b4:	3370      	adds	r3, #112	@ 0x70
100608b6:	e7eb      	b.n	10060890 <smp_check_is_any_pairing_ongoing+0x18>
100608b8:	2001      	movs	r0, #1
100608ba:	bd70      	pop	{r4, r5, r6, pc}

100608bc <__arm_cp.3_0>:
100608bc:	20002414 	.word	0x20002414

100608c0 <__arm_cp.3_1>:
100608c0:	200024b4 	.word	0x200024b4

100608c4 <smp_sap_aci_set_authentication_req>:
100608c4:	b510      	push	{r4, lr}
100608c6:	4604      	mov	r4, r0
100608c8:	f7ff ffd6 	bl	10060878 <smp_check_is_any_pairing_ongoing>
100608cc:	7861      	ldrb	r1, [r4, #1]
100608ce:	2901      	cmp	r1, #1
100608d0:	d103      	bne.n	100608da <smp_sap_aci_set_authentication_req+0x16>
100608d2:	2800      	cmp	r0, #0
100608d4:	d105      	bne.n	100608e2 <smp_sap_aci_set_authentication_req+0x1e>
100608d6:	4602      	mov	r2, r0
100608d8:	e004      	b.n	100608e4 <smp_sap_aci_set_authentication_req+0x20>
100608da:	2800      	cmp	r0, #0
100608dc:	d00f      	beq.n	100608fe <smp_sap_aci_set_authentication_req+0x3a>
100608de:	220c      	movs	r2, #12
100608e0:	e016      	b.n	10060910 <smp_sap_aci_set_authentication_req+0x4c>
100608e2:	220c      	movs	r2, #12
100608e4:	490b      	ldr	r1, [pc, #44]	@ (10060914 <__arm_cp.4_0>)
100608e6:	6809      	ldr	r1, [r1, #0]
100608e8:	2340      	movs	r3, #64	@ 0x40
100608ea:	5ccb      	ldrb	r3, [r1, r3]
100608ec:	2b03      	cmp	r3, #3
100608ee:	d101      	bne.n	100608f4 <smp_sap_aci_set_authentication_req+0x30>
100608f0:	226e      	movs	r2, #110	@ 0x6e
100608f2:	43d2      	mvns	r2, r2
100608f4:	2b03      	cmp	r3, #3
100608f6:	d00b      	beq.n	10060910 <smp_sap_aci_set_authentication_req+0x4c>
100608f8:	2800      	cmp	r0, #0
100608fa:	d002      	beq.n	10060902 <smp_sap_aci_set_authentication_req+0x3e>
100608fc:	e008      	b.n	10060910 <smp_sap_aci_set_authentication_req+0x4c>
100608fe:	4805      	ldr	r0, [pc, #20]	@ (10060914 <__arm_cp.4_0>)
10060900:	6801      	ldr	r1, [r0, #0]
10060902:	3130      	adds	r1, #48	@ 0x30
10060904:	2210      	movs	r2, #16
10060906:	4608      	mov	r0, r1
10060908:	4621      	mov	r1, r4
1006090a:	f7f0 fbc5 	bl	10051098 <BLEPLAT_MemCpy>
1006090e:	2200      	movs	r2, #0
10060910:	b2d0      	uxtb	r0, r2
10060912:	bd10      	pop	{r4, pc}

10060914 <__arm_cp.4_0>:
10060914:	200024b4 	.word	0x200024b4

10060918 <smp_sap_aci_passkey_response>:
10060918:	b510      	push	{r4, lr}
1006091a:	460c      	mov	r4, r1
1006091c:	f005 fa46 	bl	10065dac <smp_get_remote_device_list_item>
10060920:	2800      	cmp	r0, #0
10060922:	d010      	beq.n	10060946 <smp_sap_aci_passkey_response+0x2e>
10060924:	7cc1      	ldrb	r1, [r0, #19]
10060926:	2902      	cmp	r1, #2
10060928:	d10f      	bne.n	1006094a <smp_sap_aci_passkey_response+0x32>
1006092a:	4909      	ldr	r1, [pc, #36]	@ (10060950 <__arm_cp.5_0>)
1006092c:	6809      	ldr	r1, [r1, #0]
1006092e:	638c      	str	r4, [r1, #56]	@ 0x38
10060930:	7bc1      	ldrb	r1, [r0, #15]
10060932:	2210      	movs	r2, #16
10060934:	430a      	orrs	r2, r1
10060936:	73c2      	strb	r2, [r0, #15]
10060938:	200e      	movs	r0, #14
1006093a:	f000 fc43 	bl	100611c4 <tsk_notify_idx>
1006093e:	f7ef fdc4 	bl	100504ca <BLE_STACK_ProcessRequest>
10060942:	2000      	movs	r0, #0
10060944:	bd10      	pop	{r4, pc}
10060946:	2002      	movs	r0, #2
10060948:	bd10      	pop	{r4, pc}
1006094a:	200c      	movs	r0, #12
1006094c:	bd10      	pop	{r4, pc}
1006094e:	46c0      	nop			@ (mov r8, r8)

10060950 <__arm_cp.5_0>:
10060950:	200024b4 	.word	0x200024b4

10060954 <smp_sap_hci_le_connection_complete_evt_hndl>:
10060954:	b5f0      	push	{r4, r5, r6, r7, lr}
10060956:	b089      	sub	sp, #36	@ 0x24
10060958:	9304      	str	r3, [sp, #16]
1006095a:	4615      	mov	r5, r2
1006095c:	9105      	str	r1, [sp, #20]
1006095e:	4607      	mov	r7, r0
10060960:	ae06      	add	r6, sp, #24
10060962:	ac08      	add	r4, sp, #32
10060964:	4630      	mov	r0, r6
10060966:	4621      	mov	r1, r4
10060968:	f7f4 fa28 	bl	10054dbc <GAP_get_current_address>
1006096c:	7822      	ldrb	r2, [r4, #0]
1006096e:	2000      	movs	r0, #0
10060970:	9500      	str	r5, [sp, #0]
10060972:	9904      	ldr	r1, [sp, #16]
10060974:	9101      	str	r1, [sp, #4]
10060976:	9002      	str	r0, [sp, #8]
10060978:	4638      	mov	r0, r7
1006097a:	9905      	ldr	r1, [sp, #20]
1006097c:	4633      	mov	r3, r6
1006097e:	f000 f803 	bl	10060988 <smp_connection_complete_handler>
10060982:	b009      	add	sp, #36	@ 0x24
10060984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10060988 <smp_connection_complete_handler>:
10060988:	b5f0      	push	{r4, r5, r6, r7, lr}
1006098a:	b087      	sub	sp, #28
1006098c:	9302      	str	r3, [sp, #8]
1006098e:	9200      	str	r2, [sp, #0]
10060990:	9101      	str	r1, [sp, #4]
10060992:	493a      	ldr	r1, [pc, #232]	@ (10060a7c <__arm_cp.1_0>)
10060994:	6809      	ldr	r1, [r1, #0]
10060996:	2334      	movs	r3, #52	@ 0x34
10060998:	5cca      	ldrb	r2, [r1, r3]
1006099a:	2770      	movs	r7, #112	@ 0x70
1006099c:	4357      	muls	r7, r2
1006099e:	2500      	movs	r5, #0
100609a0:	43ec      	mvns	r4, r5
100609a2:	4b37      	ldr	r3, [pc, #220]	@ (10060a80 <__arm_cp.1_1>)
100609a4:	681e      	ldr	r6, [r3, #0]
100609a6:	36a4      	adds	r6, #164	@ 0xa4
100609a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
100609aa:	9106      	str	r1, [sp, #24]
100609ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
100609ae:	9103      	str	r1, [sp, #12]
100609b0:	990d      	ldr	r1, [sp, #52]	@ 0x34
100609b2:	9105      	str	r1, [sp, #20]
100609b4:	9404      	str	r4, [sp, #16]
100609b6:	42af      	cmp	r7, r5
100609b8:	d05e      	beq.n	10060a78 <smp_connection_complete_handler+0xf0>
100609ba:	6833      	ldr	r3, [r6, #0]
100609bc:	1959      	adds	r1, r3, r5
100609be:	8909      	ldrh	r1, [r1, #8]
100609c0:	3570      	adds	r5, #112	@ 0x70
100609c2:	1c64      	adds	r4, r4, #1
100609c4:	2900      	cmp	r1, #0
100609c6:	d1f6      	bne.n	100609b6 <smp_connection_complete_handler+0x2e>
100609c8:	4294      	cmp	r4, r2
100609ca:	d255      	bcs.n	10060a78 <smp_connection_complete_handler+0xf0>
100609cc:	195f      	adds	r7, r3, r5
100609ce:	4639      	mov	r1, r7
100609d0:	3968      	subs	r1, #104	@ 0x68
100609d2:	8008      	strh	r0, [r1, #0]
100609d4:	4638      	mov	r0, r7
100609d6:	3870      	subs	r0, #112	@ 0x70
100609d8:	2105      	movs	r1, #5
100609da:	7001      	strb	r1, [r0, #0]
100609dc:	4638      	mov	r0, r7
100609de:	380f      	subs	r0, #15
100609e0:	9900      	ldr	r1, [sp, #0]
100609e2:	7001      	strb	r1, [r0, #0]
100609e4:	4638      	mov	r0, r7
100609e6:	3810      	subs	r0, #16
100609e8:	9000      	str	r0, [sp, #0]
100609ea:	9901      	ldr	r1, [sp, #4]
100609ec:	7001      	strb	r1, [r0, #0]
100609ee:	4638      	mov	r0, r7
100609f0:	380e      	subs	r0, #14
100609f2:	2206      	movs	r2, #6
100609f4:	4b23      	ldr	r3, [pc, #140]	@ (10060a84 <__arm_cp.1_2>)
100609f6:	9902      	ldr	r1, [sp, #8]
100609f8:	4616      	mov	r6, r2
100609fa:	4798      	blx	r3
100609fc:	20fe      	movs	r0, #254	@ 0xfe
100609fe:	9a06      	ldr	r2, [sp, #24]
10060a00:	4010      	ands	r0, r2
10060a02:	2101      	movs	r1, #1
10060a04:	400a      	ands	r2, r1
10060a06:	2802      	cmp	r0, #2
10060a08:	d000      	beq.n	10060a0c <smp_connection_complete_handler+0x84>
10060a0a:	4611      	mov	r1, r2
10060a0c:	9206      	str	r2, [sp, #24]
10060a0e:	463c      	mov	r4, r7
10060a10:	3c6f      	subs	r4, #111	@ 0x6f
10060a12:	7021      	strb	r1, [r4, #0]
10060a14:	2802      	cmp	r0, #2
10060a16:	9805      	ldr	r0, [sp, #20]
10060a18:	9903      	ldr	r1, [sp, #12]
10060a1a:	d000      	beq.n	10060a1e <smp_connection_complete_handler+0x96>
10060a1c:	4601      	mov	r1, r0
10060a1e:	463d      	mov	r5, r7
10060a20:	3d6e      	subs	r5, #110	@ 0x6e
10060a22:	4628      	mov	r0, r5
10060a24:	4632      	mov	r2, r6
10060a26:	4b17      	ldr	r3, [pc, #92]	@ (10060a84 <__arm_cp.1_2>)
10060a28:	4798      	blx	r3
10060a2a:	4638      	mov	r0, r7
10060a2c:	3817      	subs	r0, #23
10060a2e:	9906      	ldr	r1, [sp, #24]
10060a30:	7001      	strb	r1, [r0, #0]
10060a32:	4638      	mov	r0, r7
10060a34:	3816      	subs	r0, #22
10060a36:	9905      	ldr	r1, [sp, #20]
10060a38:	4632      	mov	r2, r6
10060a3a:	4b12      	ldr	r3, [pc, #72]	@ (10060a84 <__arm_cp.1_2>)
10060a3c:	4798      	blx	r3
10060a3e:	4638      	mov	r0, r7
10060a40:	3858      	subs	r0, #88	@ 0x58
10060a42:	2100      	movs	r1, #0
10060a44:	2204      	movs	r2, #4
10060a46:	f7f0 fb37 	bl	100510b8 <BLEPLAT_MemSet>
10060a4a:	1f38      	subs	r0, r7, #4
10060a4c:	3f66      	subs	r7, #102	@ 0x66
10060a4e:	2110      	movs	r1, #16
10060a50:	7039      	strb	r1, [r7, #0]
10060a52:	9904      	ldr	r1, [sp, #16]
10060a54:	6001      	str	r1, [r0, #0]
10060a56:	7820      	ldrb	r0, [r4, #0]
10060a58:	4629      	mov	r1, r5
10060a5a:	f005 f967 	bl	10065d2c <smp_cmn_is_peer_rejectlisted>
10060a5e:	2800      	cmp	r0, #0
10060a60:	d005      	beq.n	10060a6e <smp_connection_complete_handler+0xe6>
10060a62:	9800      	ldr	r0, [sp, #0]
10060a64:	7800      	ldrb	r0, [r0, #0]
10060a66:	07c0      	lsls	r0, r0, #31
10060a68:	d001      	beq.n	10060a6e <smp_connection_complete_handler+0xe6>
10060a6a:	20fb      	movs	r0, #251	@ 0xfb
10060a6c:	7038      	strb	r0, [r7, #0]
10060a6e:	200e      	movs	r0, #14
10060a70:	f000 fba8 	bl	100611c4 <tsk_notify_idx>
10060a74:	f7ef fd29 	bl	100504ca <BLE_STACK_ProcessRequest>
10060a78:	b007      	add	sp, #28
10060a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060a7c <__arm_cp.1_0>:
10060a7c:	20002414 	.word	0x20002414

10060a80 <__arm_cp.1_1>:
10060a80:	200024b4 	.word	0x200024b4

10060a84 <__arm_cp.1_2>:
10060a84:	10051099 	.word	0x10051099

10060a88 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
10060a88:	b5f0      	push	{r4, r5, r6, r7, lr}
10060a8a:	b089      	sub	sp, #36	@ 0x24
10060a8c:	9304      	str	r3, [sp, #16]
10060a8e:	4617      	mov	r7, r2
10060a90:	9105      	str	r1, [sp, #20]
10060a92:	4606      	mov	r6, r0
10060a94:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10060a96:	4620      	mov	r0, r4
10060a98:	f7fe f8d0 	bl	1005ec3c <Is_Address_Initialized>
10060a9c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060a9e:	2800      	cmp	r0, #0
10060aa0:	d008      	beq.n	10060ab4 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
10060aa2:	a807      	add	r0, sp, #28
10060aa4:	2206      	movs	r2, #6
10060aa6:	4621      	mov	r1, r4
10060aa8:	f7f0 faf6 	bl	10051098 <BLEPLAT_MemCpy>
10060aac:	a806      	add	r0, sp, #24
10060aae:	2201      	movs	r2, #1
10060ab0:	7002      	strb	r2, [r0, #0]
10060ab2:	e005      	b.n	10060ac0 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
10060ab4:	a807      	add	r0, sp, #28
10060ab6:	ac06      	add	r4, sp, #24
10060ab8:	4621      	mov	r1, r4
10060aba:	f7f4 f97f 	bl	10054dbc <GAP_get_current_address>
10060abe:	7822      	ldrb	r2, [r4, #0]
10060ac0:	9700      	str	r7, [sp, #0]
10060ac2:	9804      	ldr	r0, [sp, #16]
10060ac4:	9001      	str	r0, [sp, #4]
10060ac6:	9502      	str	r5, [sp, #8]
10060ac8:	ab07      	add	r3, sp, #28
10060aca:	4630      	mov	r0, r6
10060acc:	9905      	ldr	r1, [sp, #20]
10060ace:	f7ff ff5b 	bl	10060988 <smp_connection_complete_handler>
10060ad2:	b009      	add	sp, #36	@ 0x24
10060ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10060ad8 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
10060ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
10060ada:	b089      	sub	sp, #36	@ 0x24
10060adc:	4615      	mov	r5, r2
10060ade:	460e      	mov	r6, r1
10060ae0:	f005 f964 	bl	10065dac <smp_get_remote_device_list_item>
10060ae4:	2800      	cmp	r0, #0
10060ae6:	d070      	beq.n	10060bca <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10060ae8:	4604      	mov	r4, r0
10060aea:	7a80      	ldrb	r0, [r0, #10]
10060aec:	28bc      	cmp	r0, #188	@ 0xbc
10060aee:	d106      	bne.n	10060afe <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
10060af0:	8927      	ldrh	r7, [r4, #8]
10060af2:	a808      	add	r0, sp, #32
10060af4:	2100      	movs	r1, #0
10060af6:	8001      	strh	r1, [r0, #0]
10060af8:	4626      	mov	r6, r4
10060afa:	3628      	adds	r6, #40	@ 0x28
10060afc:	e056      	b.n	10060bac <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
10060afe:	4627      	mov	r7, r4
10060b00:	3730      	adds	r7, #48	@ 0x30
10060b02:	7de1      	ldrb	r1, [r4, #23]
10060b04:	0709      	lsls	r1, r1, #28
10060b06:	d409      	bmi.n	10060b1c <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
10060b08:	4620      	mov	r0, r4
10060b0a:	3028      	adds	r0, #40	@ 0x28
10060b0c:	2208      	movs	r2, #8
10060b0e:	4631      	mov	r1, r6
10060b10:	f7f0 fac2 	bl	10051098 <BLEPLAT_MemCpy>
10060b14:	703d      	strb	r5, [r7, #0]
10060b16:	0a28      	lsrs	r0, r5, #8
10060b18:	7078      	strb	r0, [r7, #1]
10060b1a:	7aa0      	ldrb	r0, [r4, #10]
10060b1c:	8921      	ldrh	r1, [r4, #8]
10060b1e:	9102      	str	r1, [sp, #8]
10060b20:	a908      	add	r1, sp, #32
10060b22:	2200      	movs	r2, #0
10060b24:	800a      	strh	r2, [r1, #0]
10060b26:	4626      	mov	r6, r4
10060b28:	3628      	adds	r6, #40	@ 0x28
10060b2a:	28bc      	cmp	r0, #188	@ 0xbc
10060b2c:	d03d      	beq.n	10060baa <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10060b2e:	4625      	mov	r5, r4
10060b30:	351c      	adds	r5, #28
10060b32:	28f1      	cmp	r0, #241	@ 0xf1
10060b34:	d10f      	bne.n	10060b56 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
10060b36:	7de0      	ldrb	r0, [r4, #23]
10060b38:	0700      	lsls	r0, r0, #28
10060b3a:	d436      	bmi.n	10060baa <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10060b3c:	aa07      	add	r2, sp, #28
10060b3e:	9201      	str	r2, [sp, #4]
10060b40:	4628      	mov	r0, r5
10060b42:	4631      	mov	r1, r6
10060b44:	f7ff fa66 	bl	10060014 <smp_sap_crt_generate_ediv>
10060b48:	2202      	movs	r2, #2
10060b4a:	9801      	ldr	r0, [sp, #4]
10060b4c:	4639      	mov	r1, r7
10060b4e:	f7f0 fac3 	bl	100510d8 <BLEPLAT_MemCmp>
10060b52:	2800      	cmp	r0, #0
10060b54:	d021      	beq.n	10060b9a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10060b56:	4638      	mov	r0, r7
10060b58:	4631      	mov	r1, r6
10060b5a:	4622      	mov	r2, r4
10060b5c:	f004 f949 	bl	10064df2 <smp_dep_sdb_find_matching_ltk_read_record>
10060b60:	2800      	cmp	r0, #0
10060b62:	d01a      	beq.n	10060b9a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10060b64:	9d02      	ldr	r5, [sp, #8]
10060b66:	4628      	mov	r0, r5
10060b68:	f7f7 fa09 	bl	10057f7e <hci_le_long_term_key_request_negative_reply_api>
10060b6c:	7e20      	ldrb	r0, [r4, #24]
10060b6e:	0780      	lsls	r0, r0, #30
10060b70:	d00c      	beq.n	10060b8c <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
10060b72:	4628      	mov	r0, r5
10060b74:	f005 f8fa 	bl	10065d6c <smp_get_remote_device_list_index>
10060b78:	4602      	mov	r2, r0
10060b7a:	2001      	movs	r0, #1
10060b7c:	2100      	movs	r1, #0
10060b7e:	4b15      	ldr	r3, [pc, #84]	@ (10060bd4 <__arm_cp.3_1>)
10060b80:	f7ff fdbc 	bl	100606fc <smp_timer_reset>
10060b84:	7e20      	ldrb	r0, [r4, #24]
10060b86:	21fc      	movs	r1, #252	@ 0xfc
10060b88:	4001      	ands	r1, r0
10060b8a:	7621      	strb	r1, [r4, #24]
10060b8c:	2002      	movs	r0, #2
10060b8e:	2203      	movs	r2, #3
10060b90:	2300      	movs	r3, #0
10060b92:	4629      	mov	r1, r5
10060b94:	f001 ff80 	bl	10062a98 <aci_gap_pairing_complete_event_push_noinline>
10060b98:	e017      	b.n	10060bca <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10060b9a:	480d      	ldr	r0, [pc, #52]	@ (10060bd0 <__arm_cp.3_0>)
10060b9c:	6800      	ldr	r0, [r0, #0]
10060b9e:	3008      	adds	r0, #8
10060ba0:	aa08      	add	r2, sp, #32
10060ba2:	4629      	mov	r1, r5
10060ba4:	4633      	mov	r3, r6
10060ba6:	f7ff fa6b 	bl	10060080 <smp_crt_diversify>
10060baa:	9f02      	ldr	r7, [sp, #8]
10060bac:	ad03      	add	r5, sp, #12
10060bae:	2100      	movs	r1, #0
10060bb0:	2210      	movs	r2, #16
10060bb2:	4628      	mov	r0, r5
10060bb4:	f7f0 fa80 	bl	100510b8 <BLEPLAT_MemSet>
10060bb8:	7c22      	ldrb	r2, [r4, #16]
10060bba:	4628      	mov	r0, r5
10060bbc:	4631      	mov	r1, r6
10060bbe:	f7f0 fa6b 	bl	10051098 <BLEPLAT_MemCpy>
10060bc2:	4638      	mov	r0, r7
10060bc4:	4629      	mov	r1, r5
10060bc6:	f7f7 f9cb 	bl	10057f60 <hci_le_long_term_key_request_reply_api>
10060bca:	b009      	add	sp, #36	@ 0x24
10060bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060bce:	46c0      	nop			@ (mov r8, r8)

10060bd0 <__arm_cp.3_0>:
10060bd0:	20002414 	.word	0x20002414

10060bd4 <__arm_cp.3_1>:
10060bd4:	00007530 	.word	0x00007530

10060bd8 <smp_sap_hci_encryption_change_evt_hndl>:
10060bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060bda:	460e      	mov	r6, r1
10060bdc:	4605      	mov	r5, r0
10060bde:	4610      	mov	r0, r2
10060be0:	f005 f8e4 	bl	10065dac <smp_get_remote_device_list_item>
10060be4:	2800      	cmp	r0, #0
10060be6:	d056      	beq.n	10060c96 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10060be8:	4604      	mov	r4, r0
10060bea:	4607      	mov	r7, r0
10060bec:	2e00      	cmp	r6, #0
10060bee:	d00b      	beq.n	10060c08 <smp_sap_hci_encryption_change_evt_hndl+0x30>
10060bf0:	2000      	movs	r0, #0
10060bf2:	72b8      	strb	r0, [r7, #10]
10060bf4:	3408      	adds	r4, #8
10060bf6:	2201      	movs	r2, #1
10060bf8:	2d06      	cmp	r5, #6
10060bfa:	d132      	bne.n	10060c62 <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10060bfc:	8939      	ldrh	r1, [r7, #8]
10060bfe:	4615      	mov	r5, r2
10060c00:	2e06      	cmp	r6, #6
10060c02:	d00e      	beq.n	10060c22 <smp_sap_hci_encryption_change_evt_hndl+0x4a>
10060c04:	2205      	movs	r2, #5
10060c06:	e00d      	b.n	10060c24 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
10060c08:	7af9      	ldrb	r1, [r7, #11]
10060c0a:	2001      	movs	r0, #1
10060c0c:	4308      	orrs	r0, r1
10060c0e:	72f8      	strb	r0, [r7, #11]
10060c10:	7cf9      	ldrb	r1, [r7, #19]
10060c12:	1e89      	subs	r1, r1, #2
10060c14:	2902      	cmp	r1, #2
10060c16:	d810      	bhi.n	10060c3a <smp_sap_hci_encryption_change_evt_hndl+0x62>
10060c18:	7df9      	ldrb	r1, [r7, #23]
10060c1a:	0709      	lsls	r1, r1, #28
10060c1c:	d508      	bpl.n	10060c30 <smp_sap_hci_encryption_change_evt_hndl+0x58>
10060c1e:	2104      	movs	r1, #4
10060c20:	e007      	b.n	10060c32 <smp_sap_hci_encryption_change_evt_hndl+0x5a>
10060c22:	2204      	movs	r2, #4
10060c24:	2002      	movs	r0, #2
10060c26:	2300      	movs	r3, #0
10060c28:	f001 ff36 	bl	10062a98 <aci_gap_pairing_complete_event_push_noinline>
10060c2c:	462a      	mov	r2, r5
10060c2e:	e018      	b.n	10060c62 <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10060c30:	2102      	movs	r1, #2
10060c32:	22f9      	movs	r2, #249	@ 0xf9
10060c34:	4010      	ands	r0, r2
10060c36:	1840      	adds	r0, r0, r1
10060c38:	72f8      	strb	r0, [r7, #11]
10060c3a:	7ab8      	ldrb	r0, [r7, #10]
10060c3c:	28ad      	cmp	r0, #173	@ 0xad
10060c3e:	d005      	beq.n	10060c4c <smp_sap_hci_encryption_change_evt_hndl+0x74>
10060c40:	28ae      	cmp	r0, #174	@ 0xae
10060c42:	d005      	beq.n	10060c50 <smp_sap_hci_encryption_change_evt_hndl+0x78>
10060c44:	28bc      	cmp	r0, #188	@ 0xbc
10060c46:	d127      	bne.n	10060c98 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
10060c48:	20bf      	movs	r0, #191	@ 0xbf
10060c4a:	e002      	b.n	10060c52 <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10060c4c:	20af      	movs	r0, #175	@ 0xaf
10060c4e:	e000      	b.n	10060c52 <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10060c50:	20f0      	movs	r0, #240	@ 0xf0
10060c52:	72b8      	strb	r0, [r7, #10]
10060c54:	3408      	adds	r4, #8
10060c56:	200e      	movs	r0, #14
10060c58:	f000 fab4 	bl	100611c4 <tsk_notify_idx>
10060c5c:	f7ef fc35 	bl	100504ca <BLE_STACK_ProcessRequest>
10060c60:	2200      	movs	r2, #0
10060c62:	2060      	movs	r0, #96	@ 0x60
10060c64:	5c38      	ldrb	r0, [r7, r0]
10060c66:	07c0      	lsls	r0, r0, #31
10060c68:	d10b      	bne.n	10060c82 <smp_sap_hci_encryption_change_evt_hndl+0xaa>
10060c6a:	7eb8      	ldrb	r0, [r7, #26]
10060c6c:	06c1      	lsls	r1, r0, #27
10060c6e:	d505      	bpl.n	10060c7c <smp_sap_hci_encryption_change_evt_hndl+0xa4>
10060c70:	21ef      	movs	r1, #239	@ 0xef
10060c72:	4001      	ands	r1, r0
10060c74:	76b9      	strb	r1, [r7, #26]
10060c76:	b241      	sxtb	r1, r0
10060c78:	2900      	cmp	r1, #0
10060c7a:	d418      	bmi.n	10060cae <smp_sap_hci_encryption_change_evt_hndl+0xd6>
10060c7c:	2a00      	cmp	r2, #0
10060c7e:	d119      	bne.n	10060cb4 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10060c80:	e009      	b.n	10060c96 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10060c82:	7e38      	ldrb	r0, [r7, #24]
10060c84:	21fc      	movs	r1, #252	@ 0xfc
10060c86:	4001      	ands	r1, r0
10060c88:	7639      	strb	r1, [r7, #24]
10060c8a:	2103      	movs	r1, #3
10060c8c:	4001      	ands	r1, r0
10060c8e:	1e48      	subs	r0, r1, #1
10060c90:	4181      	sbcs	r1, r0
10060c92:	430a      	orrs	r2, r1
10060c94:	d10e      	bne.n	10060cb4 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10060c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060c98:	2d06      	cmp	r5, #6
10060c9a:	d1db      	bne.n	10060c54 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10060c9c:	28f1      	cmp	r0, #241	@ 0xf1
10060c9e:	d1d9      	bne.n	10060c54 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10060ca0:	8939      	ldrh	r1, [r7, #8]
10060ca2:	2002      	movs	r0, #2
10060ca4:	2200      	movs	r2, #0
10060ca6:	4613      	mov	r3, r2
10060ca8:	f001 fef6 	bl	10062a98 <aci_gap_pairing_complete_event_push_noinline>
10060cac:	e7d2      	b.n	10060c54 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10060cae:	216f      	movs	r1, #111	@ 0x6f
10060cb0:	4008      	ands	r0, r1
10060cb2:	76b8      	strb	r0, [r7, #26]
10060cb4:	8820      	ldrh	r0, [r4, #0]
10060cb6:	f005 f859 	bl	10065d6c <smp_get_remote_device_list_index>
10060cba:	4602      	mov	r2, r0
10060cbc:	2001      	movs	r0, #1
10060cbe:	2100      	movs	r1, #0
10060cc0:	4b01      	ldr	r3, [pc, #4]	@ (10060cc8 <__arm_cp.4_0>)
10060cc2:	f7ff fd1b 	bl	100606fc <smp_timer_reset>
10060cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060cc8 <__arm_cp.4_0>:
10060cc8:	00007530 	.word	0x00007530

10060ccc <smp_sap_hci_disconnection_complete_evt_hndl>:
10060ccc:	b510      	push	{r4, lr}
10060cce:	f005 f86d 	bl	10065dac <smp_get_remote_device_list_item>
10060cd2:	2800      	cmp	r0, #0
10060cd4:	d025      	beq.n	10060d22 <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
10060cd6:	4604      	mov	r4, r0
10060cd8:	8900      	ldrh	r0, [r0, #8]
10060cda:	f005 f847 	bl	10065d6c <smp_get_remote_device_list_index>
10060cde:	4602      	mov	r2, r0
10060ce0:	2001      	movs	r0, #1
10060ce2:	2100      	movs	r1, #0
10060ce4:	4b0f      	ldr	r3, [pc, #60]	@ (10060d24 <__arm_cp.5_0>)
10060ce6:	f7ff fd09 	bl	100606fc <smp_timer_reset>
10060cea:	8920      	ldrh	r0, [r4, #8]
10060cec:	f7ff fcca 	bl	10060684 <smp_rxp_flush_packet_queues>
10060cf0:	2060      	movs	r0, #96	@ 0x60
10060cf2:	5c20      	ldrb	r0, [r4, r0]
10060cf4:	07c0      	lsls	r0, r0, #31
10060cf6:	7aa0      	ldrb	r0, [r4, #10]
10060cf8:	d104      	bne.n	10060d04 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
10060cfa:	3060      	adds	r0, #96	@ 0x60
10060cfc:	b2c0      	uxtb	r0, r0
10060cfe:	2851      	cmp	r0, #81	@ 0x51
10060d00:	d304      	bcc.n	10060d0c <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
10060d02:	e007      	b.n	10060d14 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10060d04:	3050      	adds	r0, #80	@ 0x50
10060d06:	b2c0      	uxtb	r0, r0
10060d08:	2840      	cmp	r0, #64	@ 0x40
10060d0a:	d803      	bhi.n	10060d14 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10060d0c:	2102      	movs	r1, #2
10060d0e:	4620      	mov	r0, r4
10060d10:	f004 f8ea 	bl	10064ee8 <smp_pp3_pairing_completed_update_stats>
10060d14:	20fe      	movs	r0, #254	@ 0xfe
10060d16:	72a0      	strb	r0, [r4, #10]
10060d18:	200e      	movs	r0, #14
10060d1a:	f000 fa53 	bl	100611c4 <tsk_notify_idx>
10060d1e:	f7ef fbd4 	bl	100504ca <BLE_STACK_ProcessRequest>
10060d22:	bd10      	pop	{r4, pc}

10060d24 <__arm_cp.5_0>:
10060d24:	00007530 	.word	0x00007530

10060d28 <smp_sap_scp_force_debug_key_usage>:
10060d28:	b5b0      	push	{r4, r5, r7, lr}
10060d2a:	4605      	mov	r5, r0
10060d2c:	2400      	movs	r4, #0
10060d2e:	4620      	mov	r0, r4
10060d30:	f005 f888 	bl	10065e44 <smp_scp_is_another_sc_pairing_ongoing>
10060d34:	2800      	cmp	r0, #0
10060d36:	d001      	beq.n	10060d3c <smp_sap_scp_force_debug_key_usage+0x14>
10060d38:	240c      	movs	r4, #12
10060d3a:	e004      	b.n	10060d46 <smp_sap_scp_force_debug_key_usage+0x1e>
10060d3c:	2d01      	cmp	r5, #1
10060d3e:	d102      	bne.n	10060d46 <smp_sap_scp_force_debug_key_usage+0x1e>
10060d40:	2001      	movs	r0, #1
10060d42:	f005 f89f 	bl	10065e84 <smp_scp_init_ucfg_weak>
10060d46:	4620      	mov	r0, r4
10060d48:	bdb0      	pop	{r4, r5, r7, pc}

10060d4a <secure_connections_csr_ucfg_weak>:
10060d4a:	2000      	movs	r0, #0
10060d4c:	4770      	bx	lr

10060d4e <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>:
10060d4e:	4770      	bx	lr

10060d50 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>:
10060d50:	4770      	bx	lr
	...

10060d54 <smp_sap_l2c_acl_data_hndl>:
10060d54:	b5b0      	push	{r4, r5, r7, lr}
10060d56:	460c      	mov	r4, r1
10060d58:	4605      	mov	r5, r0
10060d5a:	8808      	ldrh	r0, [r1, #0]
10060d5c:	f005 f826 	bl	10065dac <smp_get_remote_device_list_item>
10060d60:	2800      	cmp	r0, #0
10060d62:	d025      	beq.n	10060db0 <smp_sap_l2c_acl_data_hndl+0x5c>
10060d64:	2d00      	cmp	r5, #0
10060d66:	d00f      	beq.n	10060d88 <smp_sap_l2c_acl_data_hndl+0x34>
10060d68:	2d01      	cmp	r5, #1
10060d6a:	d121      	bne.n	10060db0 <smp_sap_l2c_acl_data_hndl+0x5c>
10060d6c:	8860      	ldrh	r0, [r4, #2]
10060d6e:	2841      	cmp	r0, #65	@ 0x41
10060d70:	d81e      	bhi.n	10060db0 <smp_sap_l2c_acl_data_hndl+0x5c>
10060d72:	4812      	ldr	r0, [pc, #72]	@ (10060dbc <__arm_cp.0_0>)
10060d74:	6800      	ldr	r0, [r0, #0]
10060d76:	4621      	mov	r1, r4
10060d78:	f000 fc1a 	bl	100615b0 <ACL_list_insert_tail>
10060d7c:	200f      	movs	r0, #15
10060d7e:	f000 fa21 	bl	100611c4 <tsk_notify_idx>
10060d82:	f7ef fba2 	bl	100504ca <BLE_STACK_ProcessRequest>
10060d86:	e016      	b.n	10060db6 <smp_sap_l2c_acl_data_hndl+0x62>
10060d88:	6861      	ldr	r1, [r4, #4]
10060d8a:	7a09      	ldrb	r1, [r1, #8]
10060d8c:	290b      	cmp	r1, #11
10060d8e:	d109      	bne.n	10060da4 <smp_sap_l2c_acl_data_hndl+0x50>
10060d90:	7e01      	ldrb	r1, [r0, #24]
10060d92:	2203      	movs	r2, #3
10060d94:	400a      	ands	r2, r1
10060d96:	2a01      	cmp	r2, #1
10060d98:	d10a      	bne.n	10060db0 <smp_sap_l2c_acl_data_hndl+0x5c>
10060d9a:	22fc      	movs	r2, #252	@ 0xfc
10060d9c:	4011      	ands	r1, r2
10060d9e:	1c89      	adds	r1, r1, #2
10060da0:	7601      	strb	r1, [r0, #24]
10060da2:	e005      	b.n	10060db0 <smp_sap_l2c_acl_data_hndl+0x5c>
10060da4:	1f8a      	subs	r2, r1, #6
10060da6:	b2d2      	uxtb	r2, r2
10060da8:	2a04      	cmp	r2, #4
10060daa:	d801      	bhi.n	10060db0 <smp_sap_l2c_acl_data_hndl+0x5c>
10060dac:	f004 fe0c 	bl	100659c8 <smp_pp3_keys_distribution_signaling_ack>
10060db0:	4620      	mov	r0, r4
10060db2:	f7f2 fd09 	bl	100537c8 <ACL_pkt_release>
10060db6:	2000      	movs	r0, #0
10060db8:	bdb0      	pop	{r4, r5, r7, pc}
10060dba:	46c0      	nop			@ (mov r8, r8)

10060dbc <__arm_cp.0_0>:
10060dbc:	200024b4 	.word	0x200024b4

10060dc0 <smp_get_sec_level_for_mode1>:
10060dc0:	b510      	push	{r4, lr}
10060dc2:	7ac3      	ldrb	r3, [r0, #11]
10060dc4:	075c      	lsls	r4, r3, #29
10060dc6:	0fa2      	lsrs	r2, r4, #30
10060dc8:	d009      	beq.n	10060dde <smp_get_sec_level_for_mode1+0x1e>
10060dca:	2201      	movs	r2, #1
10060dcc:	4013      	ands	r3, r2
10060dce:	425a      	negs	r2, r3
10060dd0:	415a      	adcs	r2, r3
10060dd2:	7c03      	ldrb	r3, [r0, #16]
10060dd4:	2003      	movs	r0, #3
10060dd6:	2b10      	cmp	r3, #16
10060dd8:	d009      	beq.n	10060dee <smp_get_sec_level_for_mode1+0x2e>
10060dda:	4603      	mov	r3, r0
10060ddc:	e008      	b.n	10060df0 <smp_get_sec_level_for_mode1+0x30>
10060dde:	07da      	lsls	r2, r3, #31
10060de0:	d10a      	bne.n	10060df8 <smp_get_sec_level_for_mode1+0x38>
10060de2:	7a80      	ldrb	r0, [r0, #10]
10060de4:	2201      	movs	r2, #1
10060de6:	28f1      	cmp	r0, #241	@ 0xf1
10060de8:	d009      	beq.n	10060dfe <smp_get_sec_level_for_mode1+0x3e>
10060dea:	4613      	mov	r3, r2
10060dec:	e008      	b.n	10060e00 <smp_get_sec_level_for_mode1+0x40>
10060dee:	2304      	movs	r3, #4
10060df0:	2c00      	cmp	r4, #0
10060df2:	d405      	bmi.n	10060e00 <smp_get_sec_level_for_mode1+0x40>
10060df4:	4603      	mov	r3, r0
10060df6:	e003      	b.n	10060e00 <smp_get_sec_level_for_mode1+0x40>
10060df8:	2302      	movs	r3, #2
10060dfa:	2200      	movs	r2, #0
10060dfc:	e000      	b.n	10060e00 <smp_get_sec_level_for_mode1+0x40>
10060dfe:	2302      	movs	r3, #2
10060e00:	2a00      	cmp	r2, #0
10060e02:	d101      	bne.n	10060e08 <smp_get_sec_level_for_mode1+0x48>
10060e04:	4618      	mov	r0, r3
10060e06:	e000      	b.n	10060e0a <smp_get_sec_level_for_mode1+0x4a>
10060e08:	2001      	movs	r0, #1
10060e0a:	2900      	cmp	r1, #0
10060e0c:	d000      	beq.n	10060e10 <smp_get_sec_level_for_mode1+0x50>
10060e0e:	4618      	mov	r0, r3
10060e10:	bd10      	pop	{r4, pc}

10060e12 <smp_sap_get_security_level>:
10060e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060e14:	461c      	mov	r4, r3
10060e16:	4616      	mov	r6, r2
10060e18:	460d      	mov	r5, r1
10060e1a:	2100      	movs	r1, #0
10060e1c:	7029      	strb	r1, [r5, #0]
10060e1e:	7011      	strb	r1, [r2, #0]
10060e20:	7019      	strb	r1, [r3, #0]
10060e22:	f004 ffc3 	bl	10065dac <smp_get_remote_device_list_item>
10060e26:	2800      	cmp	r0, #0
10060e28:	d017      	beq.n	10060e5a <smp_sap_get_security_level+0x48>
10060e2a:	4607      	mov	r7, r0
10060e2c:	2101      	movs	r1, #1
10060e2e:	7029      	strb	r1, [r5, #0]
10060e30:	7a80      	ldrb	r0, [r0, #10]
10060e32:	28f1      	cmp	r0, #241	@ 0xf1
10060e34:	d110      	bne.n	10060e58 <smp_sap_get_security_level+0x46>
10060e36:	9100      	str	r1, [sp, #0]
10060e38:	2100      	movs	r1, #0
10060e3a:	4638      	mov	r0, r7
10060e3c:	f7ff ffc0 	bl	10060dc0 <smp_get_sec_level_for_mode1>
10060e40:	7030      	strb	r0, [r6, #0]
10060e42:	2801      	cmp	r0, #1
10060e44:	d109      	bne.n	10060e5a <smp_sap_get_security_level+0x48>
10060e46:	2002      	movs	r0, #2
10060e48:	7028      	strb	r0, [r5, #0]
10060e4a:	7af9      	ldrb	r1, [r7, #11]
10060e4c:	0749      	lsls	r1, r1, #29
10060e4e:	0f89      	lsrs	r1, r1, #30
10060e50:	d100      	bne.n	10060e54 <smp_sap_get_security_level+0x42>
10060e52:	9800      	ldr	r0, [sp, #0]
10060e54:	7020      	strb	r0, [r4, #0]
10060e56:	e000      	b.n	10060e5a <smp_sap_get_security_level+0x48>
10060e58:	7031      	strb	r1, [r6, #0]
10060e5a:	2000      	movs	r0, #0
10060e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060e5e <smp_sap_get_remote_address_check_addr_type>:
10060e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060e60:	461c      	mov	r4, r3
10060e62:	4615      	mov	r5, r2
10060e64:	460f      	mov	r7, r1
10060e66:	f004 ffa1 	bl	10065dac <smp_get_remote_device_list_item>
10060e6a:	2800      	cmp	r0, #0
10060e6c:	d016      	beq.n	10060e9c <smp_sap_get_remote_address_check_addr_type+0x3e>
10060e6e:	4606      	mov	r6, r0
10060e70:	1c81      	adds	r1, r0, #2
10060e72:	2206      	movs	r2, #6
10060e74:	4628      	mov	r0, r5
10060e76:	f7f0 f90f 	bl	10051098 <BLEPLAT_MemCpy>
10060e7a:	7870      	ldrb	r0, [r6, #1]
10060e7c:	4669      	mov	r1, sp
10060e7e:	7008      	strb	r0, [r1, #0]
10060e80:	2f00      	cmp	r7, #0
10060e82:	d01f      	beq.n	10060ec4 <smp_sap_get_remote_address_check_addr_type+0x66>
10060e84:	2800      	cmp	r0, #0
10060e86:	d01d      	beq.n	10060ec4 <smp_sap_get_remote_address_check_addr_type+0x66>
10060e88:	2801      	cmp	r0, #1
10060e8a:	d109      	bne.n	10060ea0 <smp_sap_get_remote_address_check_addr_type+0x42>
10060e8c:	79f1      	ldrb	r1, [r6, #7]
10060e8e:	098a      	lsrs	r2, r1, #6
10060e90:	2001      	movs	r0, #1
10060e92:	2a02      	cmp	r2, #2
10060e94:	d816      	bhi.n	10060ec4 <smp_sap_get_remote_address_check_addr_type+0x66>
10060e96:	2940      	cmp	r1, #64	@ 0x40
10060e98:	d203      	bcs.n	10060ea2 <smp_sap_get_remote_address_check_addr_type+0x44>
10060e9a:	e013      	b.n	10060ec4 <smp_sap_get_remote_address_check_addr_type+0x66>
10060e9c:	2002      	movs	r0, #2
10060e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060ea0:	79f1      	ldrb	r1, [r6, #7]
10060ea2:	20c0      	movs	r0, #192	@ 0xc0
10060ea4:	4008      	ands	r0, r1
10060ea6:	2840      	cmp	r0, #64	@ 0x40
10060ea8:	d108      	bne.n	10060ebc <smp_sap_get_remote_address_check_addr_type+0x5e>
10060eaa:	4669      	mov	r1, sp
10060eac:	4630      	mov	r0, r6
10060eae:	462a      	mov	r2, r5
10060eb0:	f003 ff88 	bl	10064dc4 <smp_dep_sdb_find_bonding_record_read_address>
10060eb4:	2800      	cmp	r0, #0
10060eb6:	d003      	beq.n	10060ec0 <smp_sap_get_remote_address_check_addr_type+0x62>
10060eb8:	2081      	movs	r0, #129	@ 0x81
10060eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060ebc:	2086      	movs	r0, #134	@ 0x86
10060ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060ec0:	4668      	mov	r0, sp
10060ec2:	7800      	ldrb	r0, [r0, #0]
10060ec4:	7020      	strb	r0, [r4, #0]
10060ec6:	2000      	movs	r0, #0
10060ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060eca <smp_sap_check_is_peer_device_bonded>:
10060eca:	b5b0      	push	{r4, r5, r7, lr}
10060ecc:	f004 ff6e 	bl	10065dac <smp_get_remote_device_list_item>
10060ed0:	2800      	cmp	r0, #0
10060ed2:	d011      	beq.n	10060ef8 <smp_sap_check_is_peer_device_bonded+0x2e>
10060ed4:	4604      	mov	r4, r0
10060ed6:	2500      	movs	r5, #0
10060ed8:	4629      	mov	r1, r5
10060eda:	f003 ff1b 	bl	10064d14 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10060ede:	2800      	cmp	r0, #0
10060ee0:	d00b      	beq.n	10060efa <smp_sap_check_is_peer_device_bonded+0x30>
10060ee2:	7aa1      	ldrb	r1, [r4, #10]
10060ee4:	29f1      	cmp	r1, #241	@ 0xf1
10060ee6:	d105      	bne.n	10060ef4 <smp_sap_check_is_peer_device_bonded+0x2a>
10060ee8:	7ba1      	ldrb	r1, [r4, #14]
10060eea:	07ca      	lsls	r2, r1, #31
10060eec:	d002      	beq.n	10060ef4 <smp_sap_check_is_peer_device_bonded+0x2a>
10060eee:	0789      	lsls	r1, r1, #30
10060ef0:	d500      	bpl.n	10060ef4 <smp_sap_check_is_peer_device_bonded+0x2a>
10060ef2:	2000      	movs	r0, #0
10060ef4:	4605      	mov	r5, r0
10060ef6:	e000      	b.n	10060efa <smp_sap_check_is_peer_device_bonded+0x30>
10060ef8:	2502      	movs	r5, #2
10060efa:	4628      	mov	r0, r5
10060efc:	bdb0      	pop	{r4, r5, r7, pc}

10060efe <smp_sap_check_encryption_key_size>:
10060efe:	b510      	push	{r4, lr}
10060f00:	460c      	mov	r4, r1
10060f02:	f004 ff53 	bl	10065dac <smp_get_remote_device_list_item>
10060f06:	2800      	cmp	r0, #0
10060f08:	d005      	beq.n	10060f16 <smp_sap_check_encryption_key_size+0x18>
10060f0a:	7a81      	ldrb	r1, [r0, #10]
10060f0c:	29f1      	cmp	r1, #241	@ 0xf1
10060f0e:	d102      	bne.n	10060f16 <smp_sap_check_encryption_key_size+0x18>
10060f10:	7c00      	ldrb	r0, [r0, #16]
10060f12:	42a0      	cmp	r0, r4
10060f14:	d201      	bcs.n	10060f1a <smp_sap_check_encryption_key_size+0x1c>
10060f16:	20b6      	movs	r0, #182	@ 0xb6
10060f18:	bd10      	pop	{r4, pc}
10060f1a:	2000      	movs	r0, #0
10060f1c:	bd10      	pop	{r4, pc}

10060f1e <smp_sap_forget_device_upon_disconnection>:
10060f1e:	b580      	push	{r7, lr}
10060f20:	f004 ff44 	bl	10065dac <smp_get_remote_device_list_item>
10060f24:	2800      	cmp	r0, #0
10060f26:	d006      	beq.n	10060f36 <smp_sap_forget_device_upon_disconnection+0x18>
10060f28:	2160      	movs	r1, #96	@ 0x60
10060f2a:	5c42      	ldrb	r2, [r0, r1]
10060f2c:	2380      	movs	r3, #128	@ 0x80
10060f2e:	4313      	orrs	r3, r2
10060f30:	5443      	strb	r3, [r0, r1]
10060f32:	2000      	movs	r0, #0
10060f34:	bd80      	pop	{r7, pc}
10060f36:	2081      	movs	r0, #129	@ 0x81
10060f38:	bd80      	pop	{r7, pc}

10060f3a <smp_sap_sm2_packet_data_signing_compute>:
10060f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
10060f3c:	b089      	sub	sp, #36	@ 0x24
10060f3e:	460e      	mov	r6, r1
10060f40:	f004 ff34 	bl	10065dac <smp_get_remote_device_list_item>
10060f44:	2800      	cmp	r0, #0
10060f46:	d025      	beq.n	10060f94 <smp_sap_sm2_packet_data_signing_compute+0x5a>
10060f48:	4605      	mov	r5, r0
10060f4a:	301c      	adds	r0, #28
10060f4c:	a905      	add	r1, sp, #20
10060f4e:	9100      	str	r1, [sp, #0]
10060f50:	f7ff f92c 	bl	100601ac <smp_crt_generate_csrk>
10060f54:	8874      	ldrh	r4, [r6, #2]
10060f56:	462b      	mov	r3, r5
10060f58:	3368      	adds	r3, #104	@ 0x68
10060f5a:	1d27      	adds	r7, r4, #4
10060f5c:	b2b9      	uxth	r1, r7
10060f5e:	2204      	movs	r2, #4
10060f60:	4630      	mov	r0, r6
10060f62:	f7f2 fc6f 	bl	10053844 <ACL_pkt_write>
10060f66:	b2fa      	uxtb	r2, r7
10060f68:	af01      	add	r7, sp, #4
10060f6a:	9800      	ldr	r0, [sp, #0]
10060f6c:	4631      	mov	r1, r6
10060f6e:	463b      	mov	r3, r7
10060f70:	f7ff f92a 	bl	100601c8 <smp_crt_generate_cmac_tag>
10060f74:	3708      	adds	r7, #8
10060f76:	4620      	mov	r0, r4
10060f78:	3008      	adds	r0, #8
10060f7a:	b281      	uxth	r1, r0
10060f7c:	2208      	movs	r2, #8
10060f7e:	4630      	mov	r0, r6
10060f80:	463b      	mov	r3, r7
10060f82:	f7f2 fc5f 	bl	10053844 <ACL_pkt_write>
10060f86:	340c      	adds	r4, #12
10060f88:	8074      	strh	r4, [r6, #2]
10060f8a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
10060f8c:	1c40      	adds	r0, r0, #1
10060f8e:	66a8      	str	r0, [r5, #104]	@ 0x68
10060f90:	2000      	movs	r0, #0
10060f92:	e000      	b.n	10060f96 <smp_sap_sm2_packet_data_signing_compute+0x5c>
10060f94:	2002      	movs	r0, #2
10060f96:	b009      	add	sp, #36	@ 0x24
10060f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060f9a <smp_sap_sm2_packet_data_signing_validate>:
10060f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
10060f9c:	b08d      	sub	sp, #52	@ 0x34
10060f9e:	460d      	mov	r5, r1
10060fa0:	884f      	ldrh	r7, [r1, #2]
10060fa2:	f004 ff03 	bl	10065dac <smp_get_remote_device_list_item>
10060fa6:	2800      	cmp	r0, #0
10060fa8:	d005      	beq.n	10060fb6 <smp_sap_sm2_packet_data_signing_validate+0x1c>
10060faa:	4604      	mov	r4, r0
10060fac:	7c40      	ldrb	r0, [r0, #17]
10060fae:	0640      	lsls	r0, r0, #25
10060fb0:	d403      	bmi.n	10060fba <smp_sap_sm2_packet_data_signing_validate+0x20>
10060fb2:	20b1      	movs	r0, #177	@ 0xb1
10060fb4:	e034      	b.n	10061020 <smp_sap_sm2_packet_data_signing_validate+0x86>
10060fb6:	2002      	movs	r0, #2
10060fb8:	e032      	b.n	10061020 <smp_sap_sm2_packet_data_signing_validate+0x86>
10060fba:	4621      	mov	r1, r4
10060fbc:	3148      	adds	r1, #72	@ 0x48
10060fbe:	a805      	add	r0, sp, #20
10060fc0:	2210      	movs	r2, #16
10060fc2:	f7f0 f869 	bl	10051098 <BLEPLAT_MemCpy>
10060fc6:	3f08      	subs	r7, #8
10060fc8:	b2b9      	uxth	r1, r7
10060fca:	220c      	movs	r2, #12
10060fcc:	ae02      	add	r6, sp, #8
10060fce:	4628      	mov	r0, r5
10060fd0:	4633      	mov	r3, r6
10060fd2:	f7f2 fc15 	bl	10053800 <ACL_pkt_read>
10060fd6:	7830      	ldrb	r0, [r6, #0]
10060fd8:	7871      	ldrb	r1, [r6, #1]
10060fda:	0209      	lsls	r1, r1, #8
10060fdc:	1808      	adds	r0, r1, r0
10060fde:	78b1      	ldrb	r1, [r6, #2]
10060fe0:	0409      	lsls	r1, r1, #16
10060fe2:	1840      	adds	r0, r0, r1
10060fe4:	78f1      	ldrb	r1, [r6, #3]
10060fe6:	0609      	lsls	r1, r1, #24
10060fe8:	1841      	adds	r1, r0, r1
10060fea:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10060fec:	4281      	cmp	r1, r0
10060fee:	d801      	bhi.n	10060ff4 <smp_sap_sm2_packet_data_signing_validate+0x5a>
10060ff0:	1c40      	adds	r0, r0, #1
10060ff2:	d110      	bne.n	10061016 <smp_sap_sm2_packet_data_signing_validate+0x7c>
10060ff4:	9101      	str	r1, [sp, #4]
10060ff6:	b2fa      	uxtb	r2, r7
10060ff8:	a805      	add	r0, sp, #20
10060ffa:	ae09      	add	r6, sp, #36	@ 0x24
10060ffc:	4629      	mov	r1, r5
10060ffe:	4633      	mov	r3, r6
10061000:	f7ff f8e2 	bl	100601c8 <smp_crt_generate_cmac_tag>
10061004:	a802      	add	r0, sp, #8
10061006:	1d00      	adds	r0, r0, #4
10061008:	3608      	adds	r6, #8
1006100a:	2208      	movs	r2, #8
1006100c:	4631      	mov	r1, r6
1006100e:	f7f0 f863 	bl	100510d8 <BLEPLAT_MemCmp>
10061012:	2800      	cmp	r0, #0
10061014:	d001      	beq.n	1006101a <smp_sap_sm2_packet_data_signing_validate+0x80>
10061016:	2005      	movs	r0, #5
10061018:	e002      	b.n	10061020 <smp_sap_sm2_packet_data_signing_validate+0x86>
1006101a:	9801      	ldr	r0, [sp, #4]
1006101c:	66e0      	str	r0, [r4, #108]	@ 0x6c
1006101e:	2000      	movs	r0, #0
10061020:	b00d      	add	sp, #52	@ 0x34
10061022:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061024 <nvm_gatt_db_read_init>:
10061024:	4801      	ldr	r0, [pc, #4]	@ (1006102c <__arm_cp.0_0>)
10061026:	2100      	movs	r1, #0
10061028:	7001      	strb	r1, [r0, #0]
1006102a:	4770      	bx	lr

1006102c <__arm_cp.0_0>:
1006102c:	200024b8 	.word	0x200024b8

10061030 <nvm_gatt_db_read_next_record>:
10061030:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10061032:	4603      	mov	r3, r0
10061034:	4d06      	ldr	r5, [pc, #24]	@ (10061050 <__arm_cp.1_0>)
10061036:	7828      	ldrb	r0, [r5, #0]
10061038:	210c      	movs	r1, #12
1006103a:	9100      	str	r1, [sp, #0]
1006103c:	2401      	movs	r4, #1
1006103e:	2200      	movs	r2, #0
10061040:	4621      	mov	r1, r4
10061042:	f7ef ff61 	bl	10050f08 <BLEPLAT_NvmGet>
10061046:	702c      	strb	r4, [r5, #0]
10061048:	f000 f804 	bl	10061054 <nvm_convert_bleplat_to_blestack_status>
1006104c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1006104e:	46c0      	nop			@ (mov r8, r8)

10061050 <__arm_cp.1_0>:
10061050:	200024b8 	.word	0x200024b8

10061054 <nvm_convert_bleplat_to_blestack_status>:
10061054:	1cc0      	adds	r0, r0, #3
10061056:	b2c0      	uxtb	r0, r0
10061058:	2804      	cmp	r0, #4
1006105a:	d302      	bcc.n	10061062 <nvm_convert_bleplat_to_blestack_status+0xe>
1006105c:	207e      	movs	r0, #126	@ 0x7e
1006105e:	43c0      	mvns	r0, r0
10061060:	e002      	b.n	10061068 <nvm_convert_bleplat_to_blestack_status+0x14>
10061062:	00c1      	lsls	r1, r0, #3
10061064:	4801      	ldr	r0, [pc, #4]	@ (1006106c <__arm_cp.2_0>)
10061066:	40c8      	lsrs	r0, r1
10061068:	b2c0      	uxtb	r0, r0
1006106a:	4770      	bx	lr

1006106c <__arm_cp.2_0>:
1006106c:	00b4b7b3 	.word	0x00b4b7b3

10061070 <nvm_gatt_db_read_full_current_record>:
10061070:	b5e0      	push	{r5, r6, r7, lr}
10061072:	4603      	mov	r3, r0
10061074:	9100      	str	r1, [sp, #0]
10061076:	2002      	movs	r0, #2
10061078:	2101      	movs	r1, #1
1006107a:	220c      	movs	r2, #12
1006107c:	f7ef ff44 	bl	10050f08 <BLEPLAT_NvmGet>
10061080:	f7ff ffe8 	bl	10061054 <nvm_convert_bleplat_to_blestack_status>
10061084:	bd8c      	pop	{r2, r3, r7, pc}

10061086 <nvm_gatt_db_update_record>:
10061086:	b5e0      	push	{r5, r6, r7, lr}
10061088:	460b      	mov	r3, r1
1006108a:	4601      	mov	r1, r0
1006108c:	8900      	ldrh	r0, [r0, #8]
1006108e:	9000      	str	r0, [sp, #0]
10061090:	2001      	movs	r0, #1
10061092:	220c      	movs	r2, #12
10061094:	f7ef feea 	bl	10050e6c <BLEPLAT_NvmAdd>
10061098:	f7ff ffdc 	bl	10061054 <nvm_convert_bleplat_to_blestack_status>
1006109c:	bd8c      	pop	{r2, r3, r7, pc}
	...

100610a0 <nvm_sec_db_read_init>:
100610a0:	4801      	ldr	r0, [pc, #4]	@ (100610a8 <__arm_cp.5_0>)
100610a2:	2100      	movs	r1, #0
100610a4:	7001      	strb	r1, [r0, #0]
100610a6:	4770      	bx	lr

100610a8 <__arm_cp.5_0>:
100610a8:	200024b9 	.word	0x200024b9

100610ac <nvm_sec_db_read_next_record>:
100610ac:	b51c      	push	{r2, r3, r4, lr}
100610ae:	4603      	mov	r3, r0
100610b0:	4c06      	ldr	r4, [pc, #24]	@ (100610cc <__arm_cp.6_0>)
100610b2:	7820      	ldrb	r0, [r4, #0]
100610b4:	2150      	movs	r1, #80	@ 0x50
100610b6:	9100      	str	r1, [sp, #0]
100610b8:	2100      	movs	r1, #0
100610ba:	460a      	mov	r2, r1
100610bc:	f7ef ff24 	bl	10050f08 <BLEPLAT_NvmGet>
100610c0:	2101      	movs	r1, #1
100610c2:	7021      	strb	r1, [r4, #0]
100610c4:	f7ff ffc6 	bl	10061054 <nvm_convert_bleplat_to_blestack_status>
100610c8:	bd1c      	pop	{r2, r3, r4, pc}
100610ca:	46c0      	nop			@ (mov r8, r8)

100610cc <__arm_cp.6_0>:
100610cc:	200024b9 	.word	0x200024b9

100610d0 <nvm_sec_db_add_record>:
100610d0:	b5e0      	push	{r5, r6, r7, lr}
100610d2:	4601      	mov	r1, r0
100610d4:	2000      	movs	r0, #0
100610d6:	9000      	str	r0, [sp, #0]
100610d8:	2250      	movs	r2, #80	@ 0x50
100610da:	4603      	mov	r3, r0
100610dc:	f7ef fec6 	bl	10050e6c <BLEPLAT_NvmAdd>
100610e0:	f7ff ffb8 	bl	10061054 <nvm_convert_bleplat_to_blestack_status>
100610e4:	bd8c      	pop	{r2, r3, r7, pc}

100610e6 <nvm_sec_db_get_record_count>:
100610e6:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100610e8:	2400      	movs	r4, #0
100610ea:	4621      	mov	r1, r4
100610ec:	4620      	mov	r0, r4
100610ee:	460d      	mov	r5, r1
100610f0:	9400      	str	r4, [sp, #0]
100610f2:	b2c0      	uxtb	r0, r0
100610f4:	4621      	mov	r1, r4
100610f6:	4622      	mov	r2, r4
100610f8:	4623      	mov	r3, r4
100610fa:	f7ef ff05 	bl	10050f08 <BLEPLAT_NvmGet>
100610fe:	1cc2      	adds	r2, r0, #3
10061100:	1c69      	adds	r1, r5, #1
10061102:	2001      	movs	r0, #1
10061104:	2a00      	cmp	r2, #0
10061106:	d1f2      	bne.n	100610ee <nvm_sec_db_get_record_count+0x8>
10061108:	b2e8      	uxtb	r0, r5
1006110a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006110c <nvm_discard_current_record>:
1006110c:	b580      	push	{r7, lr}
1006110e:	2002      	movs	r0, #2
10061110:	f7ef ff9c 	bl	1005104c <BLEPLAT_NvmDiscard>
10061114:	bd80      	pop	{r7, pc}

10061116 <nvm_dev_id_data_get_record>:
10061116:	b5e0      	push	{r5, r6, r7, lr}
10061118:	4603      	mov	r3, r0
1006111a:	2026      	movs	r0, #38	@ 0x26
1006111c:	9000      	str	r0, [sp, #0]
1006111e:	2102      	movs	r1, #2
10061120:	2000      	movs	r0, #0
10061122:	4602      	mov	r2, r0
10061124:	f7ef fef0 	bl	10050f08 <BLEPLAT_NvmGet>
10061128:	2800      	cmp	r0, #0
1006112a:	d000      	beq.n	1006112e <nvm_dev_id_data_get_record+0x18>
1006112c:	2081      	movs	r0, #129	@ 0x81
1006112e:	bd8c      	pop	{r2, r3, r7, pc}

10061130 <nvm_dev_id_data_add_record>:
10061130:	b5e0      	push	{r5, r6, r7, lr}
10061132:	4601      	mov	r1, r0
10061134:	2300      	movs	r3, #0
10061136:	9300      	str	r3, [sp, #0]
10061138:	2002      	movs	r0, #2
1006113a:	2226      	movs	r2, #38	@ 0x26
1006113c:	f7ef fe96 	bl	10050e6c <BLEPLAT_NvmAdd>
10061140:	2800      	cmp	r0, #0
10061142:	d000      	beq.n	10061146 <nvm_dev_id_data_add_record+0x16>
10061144:	2081      	movs	r0, #129	@ 0x81
10061146:	bd8c      	pop	{r2, r3, r7, pc}

10061148 <tsk_init>:
10061148:	4803      	ldr	r0, [pc, #12]	@ (10061158 <__arm_cp.0_0>)
1006114a:	6800      	ldr	r0, [r0, #0]
1006114c:	2100      	movs	r1, #0
1006114e:	6081      	str	r1, [r0, #8]
10061150:	60c1      	str	r1, [r0, #12]
10061152:	6101      	str	r1, [r0, #16]
10061154:	6001      	str	r1, [r0, #0]
10061156:	4770      	bx	lr

10061158 <__arm_cp.0_0>:
10061158:	200024bc 	.word	0x200024bc

1006115c <tsk_scheduler>:
1006115c:	b570      	push	{r4, r5, r6, lr}
1006115e:	4d17      	ldr	r5, [pc, #92]	@ (100611bc <__arm_cp.1_0>)
10061160:	6828      	ldr	r0, [r5, #0]
10061162:	f3ef 8110 	mrs	r1, PRIMASK
10061166:	b672      	cpsid	i
10061168:	6801      	ldr	r1, [r0, #0]
1006116a:	2600      	movs	r6, #0
1006116c:	6006      	str	r6, [r0, #0]
1006116e:	6842      	ldr	r2, [r0, #4]
10061170:	430a      	orrs	r2, r1
10061172:	6042      	str	r2, [r0, #4]
10061174:	b662      	cpsie	i
10061176:	682c      	ldr	r4, [r5, #0]
10061178:	3410      	adds	r4, #16
1006117a:	6820      	ldr	r0, [r4, #0]
1006117c:	2800      	cmp	r0, #0
1006117e:	d00f      	beq.n	100611a0 <tsk_scheduler+0x44>
10061180:	4620      	mov	r0, r4
10061182:	f000 f85b 	bl	1006123c <lsbit>
10061186:	0080      	lsls	r0, r0, #2
10061188:	6829      	ldr	r1, [r5, #0]
1006118a:	1808      	adds	r0, r1, r0
1006118c:	f3ef 8210 	mrs	r2, PRIMASK
10061190:	b672      	cpsid	i
10061192:	6882      	ldr	r2, [r0, #8]
10061194:	6086      	str	r6, [r0, #8]
10061196:	6848      	ldr	r0, [r1, #4]
10061198:	4310      	orrs	r0, r2
1006119a:	6048      	str	r0, [r1, #4]
1006119c:	b662      	cpsie	i
1006119e:	e7ec      	b.n	1006117a <tsk_scheduler+0x1e>
100611a0:	6828      	ldr	r0, [r5, #0]
100611a2:	1d04      	adds	r4, r0, #4
100611a4:	4d06      	ldr	r5, [pc, #24]	@ (100611c0 <__arm_cp.1_1>)
100611a6:	6820      	ldr	r0, [r4, #0]
100611a8:	2800      	cmp	r0, #0
100611aa:	d006      	beq.n	100611ba <tsk_scheduler+0x5e>
100611ac:	4620      	mov	r0, r4
100611ae:	f000 f845 	bl	1006123c <lsbit>
100611b2:	0081      	lsls	r1, r0, #2
100611b4:	5869      	ldr	r1, [r5, r1]
100611b6:	4788      	blx	r1
100611b8:	e7f5      	b.n	100611a6 <tsk_scheduler+0x4a>
100611ba:	bd70      	pop	{r4, r5, r6, pc}

100611bc <__arm_cp.1_0>:
100611bc:	200024bc 	.word	0x200024bc

100611c0 <__arm_cp.1_1>:
100611c0:	10068208 	.word	0x10068208

100611c4 <tsk_notify_idx>:
100611c4:	211f      	movs	r1, #31
100611c6:	4001      	ands	r1, r0
100611c8:	2201      	movs	r2, #1
100611ca:	408a      	lsls	r2, r1
100611cc:	f3ef 8110 	mrs	r1, PRIMASK
100611d0:	b672      	cpsid	i
100611d2:	4904      	ldr	r1, [pc, #16]	@ (100611e4 <__arm_cp.3_0>)
100611d4:	6809      	ldr	r1, [r1, #0]
100611d6:	0940      	lsrs	r0, r0, #5
100611d8:	0080      	lsls	r0, r0, #2
100611da:	580b      	ldr	r3, [r1, r0]
100611dc:	4313      	orrs	r3, r2
100611de:	500b      	str	r3, [r1, r0]
100611e0:	b662      	cpsie	i
100611e2:	4770      	bx	lr

100611e4 <__arm_cp.3_0>:
100611e4:	200024bc 	.word	0x200024bc

100611e8 <tsk_wait_resource_idx>:
100611e8:	221f      	movs	r2, #31
100611ea:	4002      	ands	r2, r0
100611ec:	2301      	movs	r3, #1
100611ee:	4093      	lsls	r3, r2
100611f0:	f3ef 8210 	mrs	r2, PRIMASK
100611f4:	b672      	cpsid	i
100611f6:	0089      	lsls	r1, r1, #2
100611f8:	4a05      	ldr	r2, [pc, #20]	@ (10061210 <__arm_cp.4_0>)
100611fa:	6812      	ldr	r2, [r2, #0]
100611fc:	1851      	adds	r1, r2, r1
100611fe:	0940      	lsrs	r0, r0, #5
10061200:	0080      	lsls	r0, r0, #2
10061202:	1808      	adds	r0, r1, r0
10061204:	6881      	ldr	r1, [r0, #8]
10061206:	4319      	orrs	r1, r3
10061208:	6081      	str	r1, [r0, #8]
1006120a:	b662      	cpsie	i
1006120c:	4770      	bx	lr
1006120e:	46c0      	nop			@ (mov r8, r8)

10061210 <__arm_cp.4_0>:
10061210:	200024bc 	.word	0x200024bc

10061214 <tsk_signal_resource_idx>:
10061214:	211f      	movs	r1, #31
10061216:	4001      	ands	r1, r0
10061218:	2201      	movs	r2, #1
1006121a:	408a      	lsls	r2, r1
1006121c:	f3ef 8110 	mrs	r1, PRIMASK
10061220:	b672      	cpsid	i
10061222:	4905      	ldr	r1, [pc, #20]	@ (10061238 <__arm_cp.5_0>)
10061224:	6809      	ldr	r1, [r1, #0]
10061226:	0940      	lsrs	r0, r0, #5
10061228:	0080      	lsls	r0, r0, #2
1006122a:	1808      	adds	r0, r1, r0
1006122c:	6901      	ldr	r1, [r0, #16]
1006122e:	4311      	orrs	r1, r2
10061230:	6101      	str	r1, [r0, #16]
10061232:	b662      	cpsie	i
10061234:	4770      	bx	lr
10061236:	46c0      	nop			@ (mov r8, r8)

10061238 <__arm_cp.5_0>:
10061238:	200024bc 	.word	0x200024bc

1006123c <lsbit>:
1006123c:	f3ef 8110 	mrs	r1, PRIMASK
10061240:	b672      	cpsid	i
10061242:	6801      	ldr	r1, [r0, #0]
10061244:	424a      	negs	r2, r1
10061246:	400a      	ands	r2, r1
10061248:	4051      	eors	r1, r2
1006124a:	6001      	str	r1, [r0, #0]
1006124c:	4803      	ldr	r0, [pc, #12]	@ (1006125c <__arm_cp.7_0>)
1006124e:	4350      	muls	r0, r2
10061250:	0ec0      	lsrs	r0, r0, #27
10061252:	a103      	add	r1, pc, #12	@ (adr r1, 10061260 <__arm_cp.7_0+0x4>)
10061254:	5c08      	ldrb	r0, [r1, r0]
10061256:	b662      	cpsie	i
10061258:	4770      	bx	lr
1006125a:	46c0      	nop			@ (mov r8, r8)

1006125c <__arm_cp.7_0>:
1006125c:	04653adf 	.word	0x04653adf
10061260:	06020100 	.word	0x06020100
10061264:	10070b03 	.word	0x10070b03
10061268:	150c0e04 	.word	0x150c0e04
1006126c:	1a111708 	.word	0x1a111708
10061270:	0f0a051f 	.word	0x0f0a051f
10061274:	1916140d 	.word	0x1916140d
10061278:	1813091e 	.word	0x1813091e
1006127c:	1b1c121d 	.word	0x1b1c121d

10061280 <CST_init>:
10061280:	b510      	push	{r4, lr}
10061282:	2412      	movs	r4, #18
10061284:	2800      	cmp	r0, #0
10061286:	d00e      	beq.n	100612a6 <CST_init+0x26>
10061288:	2a00      	cmp	r2, #0
1006128a:	d00c      	beq.n	100612a6 <CST_init+0x26>
1006128c:	2b0b      	cmp	r3, #11
1006128e:	d80a      	bhi.n	100612a6 <CST_init+0x26>
10061290:	7041      	strb	r1, [r0, #1]
10061292:	7003      	strb	r3, [r0, #0]
10061294:	6a03      	ldr	r3, [r0, #32]
10061296:	5459      	strb	r1, [r3, r1]
10061298:	1e49      	subs	r1, r1, #1
1006129a:	1c4b      	adds	r3, r1, #1
1006129c:	d3fa      	bcc.n	10061294 <CST_init+0x14>
1006129e:	6102      	str	r2, [r0, #16]
100612a0:	2400      	movs	r4, #0
100612a2:	7504      	strb	r4, [r0, #20]
100612a4:	61c0      	str	r0, [r0, #28]
100612a6:	4620      	mov	r0, r4
100612a8:	bd10      	pop	{r4, pc}

100612aa <CST_stop>:
100612aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100612ac:	4605      	mov	r5, r0
100612ae:	2012      	movs	r0, #18
100612b0:	2d00      	cmp	r5, #0
100612b2:	d01b      	beq.n	100612ec <CST_stop+0x42>
100612b4:	460c      	mov	r4, r1
100612b6:	786a      	ldrb	r2, [r5, #1]
100612b8:	428a      	cmp	r2, r1
100612ba:	d917      	bls.n	100612ec <CST_stop+0x42>
100612bc:	6a2b      	ldr	r3, [r5, #32]
100612be:	5d19      	ldrb	r1, [r3, r4]
100612c0:	42a1      	cmp	r1, r4
100612c2:	d101      	bne.n	100612c8 <CST_stop+0x1e>
100612c4:	2000      	movs	r0, #0
100612c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100612c8:	4617      	mov	r7, r2
100612ca:	463e      	mov	r6, r7
100612cc:	5ddf      	ldrb	r7, [r3, r7]
100612ce:	4297      	cmp	r7, r2
100612d0:	d001      	beq.n	100612d6 <CST_stop+0x2c>
100612d2:	42a7      	cmp	r7, r4
100612d4:	d1f9      	bne.n	100612ca <CST_stop+0x20>
100612d6:	2000      	movs	r0, #0
100612d8:	4297      	cmp	r7, r2
100612da:	d005      	beq.n	100612e8 <CST_stop+0x3e>
100612dc:	5599      	strb	r1, [r3, r6]
100612de:	4296      	cmp	r6, r2
100612e0:	d102      	bne.n	100612e8 <CST_stop+0x3e>
100612e2:	4628      	mov	r0, r5
100612e4:	f000 f803 	bl	100612ee <Timer_TryStartFirstActive>
100612e8:	6a29      	ldr	r1, [r5, #32]
100612ea:	550c      	strb	r4, [r1, r4]
100612ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100612ee <Timer_TryStartFirstActive>:
100612ee:	b510      	push	{r4, lr}
100612f0:	7842      	ldrb	r2, [r0, #1]
100612f2:	428a      	cmp	r2, r1
100612f4:	d107      	bne.n	10061306 <Timer_TryStartFirstActive+0x18>
100612f6:	7d01      	ldrb	r1, [r0, #20]
100612f8:	2400      	movs	r4, #0
100612fa:	2900      	cmp	r1, #0
100612fc:	d009      	beq.n	10061312 <Timer_TryStartFirstActive+0x24>
100612fe:	3008      	adds	r0, #8
10061300:	f7ef ffb0 	bl	10051264 <BLEPLAT_StopTimer>
10061304:	e005      	b.n	10061312 <Timer_TryStartFirstActive+0x24>
10061306:	0049      	lsls	r1, r1, #1
10061308:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1006130a:	5e51      	ldrsh	r1, [r2, r1]
1006130c:	f000 f86a 	bl	100613e4 <Timer_StartFirstActive_sysT>
10061310:	4604      	mov	r4, r0
10061312:	4620      	mov	r0, r4
10061314:	bd10      	pop	{r4, pc}

10061316 <CST_start>:
10061316:	b5f0      	push	{r4, r5, r6, r7, lr}
10061318:	b085      	sub	sp, #20
1006131a:	2612      	movs	r6, #18
1006131c:	2800      	cmp	r0, #0
1006131e:	d05e      	beq.n	100613de <CST_start+0xc8>
10061320:	461f      	mov	r7, r3
10061322:	460d      	mov	r5, r1
10061324:	4604      	mov	r4, r0
10061326:	7843      	ldrb	r3, [r0, #1]
10061328:	428b      	cmp	r3, r1
1006132a:	d958      	bls.n	100613de <CST_start+0xc8>
1006132c:	7820      	ldrb	r0, [r4, #0]
1006132e:	2105      	movs	r1, #5
10061330:	0309      	lsls	r1, r1, #12
10061332:	4081      	lsls	r1, r0
10061334:	428f      	cmp	r7, r1
10061336:	d852      	bhi.n	100613de <CST_start+0xc8>
10061338:	9204      	str	r2, [sp, #16]
1006133a:	9302      	str	r3, [sp, #8]
1006133c:	f7ef ff77 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
10061340:	4602      	mov	r2, r0
10061342:	7823      	ldrb	r3, [r4, #0]
10061344:	6a20      	ldr	r0, [r4, #32]
10061346:	5d40      	ldrb	r0, [r0, r5]
10061348:	42a8      	cmp	r0, r5
1006134a:	d00c      	beq.n	10061366 <CST_start+0x50>
1006134c:	9804      	ldr	r0, [sp, #16]
1006134e:	2800      	cmp	r0, #0
10061350:	d045      	beq.n	100613de <CST_start+0xc8>
10061352:	4620      	mov	r0, r4
10061354:	9103      	str	r1, [sp, #12]
10061356:	4629      	mov	r1, r5
10061358:	9304      	str	r3, [sp, #16]
1006135a:	4616      	mov	r6, r2
1006135c:	f7ff ffa5 	bl	100612aa <CST_stop>
10061360:	9903      	ldr	r1, [sp, #12]
10061362:	4632      	mov	r2, r6
10061364:	9b04      	ldr	r3, [sp, #16]
10061366:	2033      	movs	r0, #51	@ 0x33
10061368:	4378      	muls	r0, r7
1006136a:	460e      	mov	r6, r1
1006136c:	0a01      	lsrs	r1, r0, #8
1006136e:	1808      	adds	r0, r1, r0
10061370:	0c01      	lsrs	r1, r0, #16
10061372:	1808      	adds	r0, r1, r0
10061374:	0771      	lsls	r1, r6, #29
10061376:	08d2      	lsrs	r2, r2, #3
10061378:	1851      	adds	r1, r2, r1
1006137a:	1842      	adds	r2, r0, r1
1006137c:	1d58      	adds	r0, r3, #5
1006137e:	b2c0      	uxtb	r0, r0
10061380:	40c2      	lsrs	r2, r0
10061382:	9501      	str	r5, [sp, #4]
10061384:	0068      	lsls	r0, r5, #1
10061386:	6a61      	ldr	r1, [r4, #36]	@ 0x24
10061388:	9204      	str	r2, [sp, #16]
1006138a:	520a      	strh	r2, [r1, r0]
1006138c:	f7ef ff4f 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
10061390:	08c0      	lsrs	r0, r0, #3
10061392:	9003      	str	r0, [sp, #12]
10061394:	7862      	ldrb	r2, [r4, #1]
10061396:	6a20      	ldr	r0, [r4, #32]
10061398:	4617      	mov	r7, r2
1006139a:	463b      	mov	r3, r7
1006139c:	5dc7      	ldrb	r7, [r0, r7]
1006139e:	4297      	cmp	r7, r2
100613a0:	d00d      	beq.n	100613be <CST_start+0xa8>
100613a2:	007d      	lsls	r5, r7, #1
100613a4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
100613a6:	5b75      	ldrh	r5, [r6, r5]
100613a8:	7826      	ldrb	r6, [r4, #0]
100613aa:	1d76      	adds	r6, r6, #5
100613ac:	9903      	ldr	r1, [sp, #12]
100613ae:	40f1      	lsrs	r1, r6
100613b0:	1a6d      	subs	r5, r5, r1
100613b2:	b22d      	sxth	r5, r5
100613b4:	9e04      	ldr	r6, [sp, #16]
100613b6:	1a71      	subs	r1, r6, r1
100613b8:	b209      	sxth	r1, r1
100613ba:	428d      	cmp	r5, r1
100613bc:	dded      	ble.n	1006139a <CST_start+0x84>
100613be:	5cc1      	ldrb	r1, [r0, r3]
100613c0:	9a01      	ldr	r2, [sp, #4]
100613c2:	5481      	strb	r1, [r0, r2]
100613c4:	6a20      	ldr	r0, [r4, #32]
100613c6:	54c2      	strb	r2, [r0, r3]
100613c8:	9802      	ldr	r0, [sp, #8]
100613ca:	4283      	cmp	r3, r0
100613cc:	d106      	bne.n	100613dc <CST_start+0xc6>
100613ce:	9804      	ldr	r0, [sp, #16]
100613d0:	b201      	sxth	r1, r0
100613d2:	4620      	mov	r0, r4
100613d4:	f000 f806 	bl	100613e4 <Timer_StartFirstActive_sysT>
100613d8:	4606      	mov	r6, r0
100613da:	e000      	b.n	100613de <CST_start+0xc8>
100613dc:	2600      	movs	r6, #0
100613de:	4630      	mov	r0, r6
100613e0:	b005      	add	sp, #20
100613e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100613e4 <Timer_StartFirstActive_sysT>:
100613e4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100613e6:	9101      	str	r1, [sp, #4]
100613e8:	4604      	mov	r4, r0
100613ea:	4607      	mov	r7, r0
100613ec:	3708      	adds	r7, #8
100613ee:	f7ef ff1e 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
100613f2:	9002      	str	r0, [sp, #8]
100613f4:	460d      	mov	r5, r1
100613f6:	7826      	ldrb	r6, [r4, #0]
100613f8:	7d20      	ldrb	r0, [r4, #20]
100613fa:	2800      	cmp	r0, #0
100613fc:	d004      	beq.n	10061408 <Timer_StartFirstActive_sysT+0x24>
100613fe:	4638      	mov	r0, r7
10061400:	f7ef ff30 	bl	10051264 <BLEPLAT_StopTimer>
10061404:	7822      	ldrb	r2, [r4, #0]
10061406:	e000      	b.n	1006140a <Timer_StartFirstActive_sysT+0x26>
10061408:	4632      	mov	r2, r6
1006140a:	1d70      	adds	r0, r6, #5
1006140c:	9c02      	ldr	r4, [sp, #8]
1006140e:	08e1      	lsrs	r1, r4, #3
10061410:	40c1      	lsrs	r1, r0
10061412:	9801      	ldr	r0, [sp, #4]
10061414:	1a40      	subs	r0, r0, r1
10061416:	b200      	sxth	r0, r0
10061418:	1e40      	subs	r0, r0, #1
1006141a:	17c1      	asrs	r1, r0, #31
1006141c:	3208      	adds	r2, #8
1006141e:	f7df f885 	bl	1004052c <__aeabi_llsl>
10061422:	1902      	adds	r2, r0, r4
10061424:	414d      	adcs	r5, r1
10061426:	4638      	mov	r0, r7
10061428:	462b      	mov	r3, r5
1006142a:	f7ef ff0a 	bl	10051242 <BLEPLAT_StartTimer>
1006142e:	b2c0      	uxtb	r0, r0
10061430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061432 <cst_sharedCallback>:
10061432:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061434:	9102      	str	r1, [sp, #8]
10061436:	4605      	mov	r5, r0
10061438:	7847      	ldrb	r7, [r0, #1]
1006143a:	6a00      	ldr	r0, [r0, #32]
1006143c:	5dc4      	ldrb	r4, [r0, r7]
1006143e:	f7ef fef6 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
10061442:	08c0      	lsrs	r0, r0, #3
10061444:	9001      	str	r0, [sp, #4]
10061446:	4620      	mov	r0, r4
10061448:	b2c2      	uxtb	r2, r0
1006144a:	42ba      	cmp	r2, r7
1006144c:	d00d      	beq.n	1006146a <cst_sharedCallback+0x38>
1006144e:	0053      	lsls	r3, r2, #1
10061450:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
10061452:	5af3      	ldrh	r3, [r6, r3]
10061454:	782e      	ldrb	r6, [r5, #0]
10061456:	1d76      	adds	r6, r6, #5
10061458:	9901      	ldr	r1, [sp, #4]
1006145a:	40f1      	lsrs	r1, r6
1006145c:	1a59      	subs	r1, r3, r1
1006145e:	b209      	sxth	r1, r1
10061460:	2901      	cmp	r1, #1
10061462:	dc03      	bgt.n	1006146c <cst_sharedCallback+0x3a>
10061464:	6a28      	ldr	r0, [r5, #32]
10061466:	5c80      	ldrb	r0, [r0, r2]
10061468:	e7ee      	b.n	10061448 <cst_sharedCallback+0x16>
1006146a:	4638      	mov	r0, r7
1006146c:	6a29      	ldr	r1, [r5, #32]
1006146e:	55c8      	strb	r0, [r1, r7]
10061470:	b2c6      	uxtb	r6, r0
10061472:	4628      	mov	r0, r5
10061474:	4631      	mov	r1, r6
10061476:	f7ff ff3a 	bl	100612ee <Timer_TryStartFirstActive>
1006147a:	b2e0      	uxtb	r0, r4
1006147c:	42b0      	cmp	r0, r6
1006147e:	d006      	beq.n	1006148e <cst_sharedCallback+0x5c>
10061480:	6a29      	ldr	r1, [r5, #32]
10061482:	5c0f      	ldrb	r7, [r1, r0]
10061484:	540c      	strb	r4, [r1, r0]
10061486:	9902      	ldr	r1, [sp, #8]
10061488:	4788      	blx	r1
1006148a:	463c      	mov	r4, r7
1006148c:	e7f5      	b.n	1006147a <cst_sharedCallback+0x48>
1006148e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061490 <copy_swap_buffer>:
10061490:	b5f0      	push	{r4, r5, r6, r7, lr}
10061492:	2a00      	cmp	r2, #0
10061494:	d00b      	beq.n	100614ae <copy_swap_buffer+0x1e>
10061496:	2400      	movs	r4, #0
10061498:	43e5      	mvns	r5, r4
1006149a:	2b00      	cmp	r3, #0
1006149c:	4626      	mov	r6, r4
1006149e:	d000      	beq.n	100614a2 <copy_swap_buffer+0x12>
100614a0:	1956      	adds	r6, r2, r5
100614a2:	5d0f      	ldrb	r7, [r1, r4]
100614a4:	5587      	strb	r7, [r0, r6]
100614a6:	1e6d      	subs	r5, r5, #1
100614a8:	1c64      	adds	r4, r4, #1
100614aa:	42a2      	cmp	r2, r4
100614ac:	d1f5      	bne.n	1006149a <copy_swap_buffer+0xa>
100614ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

100614b0 <is_Buffer_All_Set_To>:
100614b0:	b570      	push	{r4, r5, r6, lr}
100614b2:	4603      	mov	r3, r0
100614b4:	2001      	movs	r0, #1
100614b6:	2900      	cmp	r1, #0
100614b8:	d009      	beq.n	100614ce <is_Buffer_All_Set_To+0x1e>
100614ba:	2400      	movs	r4, #0
100614bc:	4626      	mov	r6, r4
100614be:	4625      	mov	r5, r4
100614c0:	5d96      	ldrb	r6, [r2, r6]
100614c2:	429e      	cmp	r6, r3
100614c4:	d104      	bne.n	100614d0 <is_Buffer_All_Set_To+0x20>
100614c6:	1c6d      	adds	r5, r5, #1
100614c8:	b2ee      	uxtb	r6, r5
100614ca:	428e      	cmp	r6, r1
100614cc:	d3f8      	bcc.n	100614c0 <is_Buffer_All_Set_To+0x10>
100614ce:	bd70      	pop	{r4, r5, r6, pc}
100614d0:	4620      	mov	r0, r4
100614d2:	bd70      	pop	{r4, r5, r6, pc}

100614d4 <char_copy>:
100614d4:	2a00      	cmp	r2, #0
100614d6:	d005      	beq.n	100614e4 <char_copy+0x10>
100614d8:	7803      	ldrb	r3, [r0, #0]
100614da:	700b      	strb	r3, [r1, #0]
100614dc:	1e52      	subs	r2, r2, #1
100614de:	1c49      	adds	r1, r1, #1
100614e0:	1c40      	adds	r0, r0, #1
100614e2:	e7f7      	b.n	100614d4 <char_copy>
100614e4:	4770      	bx	lr

100614e6 <UUID_cmp>:
100614e6:	b580      	push	{r7, lr}
100614e8:	7c02      	ldrb	r2, [r0, #16]
100614ea:	7c0b      	ldrb	r3, [r1, #16]
100614ec:	429a      	cmp	r2, r3
100614ee:	d106      	bne.n	100614fe <UUID_cmp+0x18>
100614f0:	2a20      	cmp	r2, #32
100614f2:	d007      	beq.n	10061504 <UUID_cmp+0x1e>
100614f4:	2a10      	cmp	r2, #16
100614f6:	d109      	bne.n	1006150c <UUID_cmp+0x26>
100614f8:	8989      	ldrh	r1, [r1, #12]
100614fa:	8980      	ldrh	r0, [r0, #12]
100614fc:	e008      	b.n	10061510 <UUID_cmp+0x2a>
100614fe:	2000      	movs	r0, #0
10061500:	43c0      	mvns	r0, r0
10061502:	bd80      	pop	{r7, pc}
10061504:	2210      	movs	r2, #16
10061506:	f7ef fde7 	bl	100510d8 <BLEPLAT_MemCmp>
1006150a:	bd80      	pop	{r7, pc}
1006150c:	68c9      	ldr	r1, [r1, #12]
1006150e:	68c0      	ldr	r0, [r0, #12]
10061510:	1a40      	subs	r0, r0, r1
10061512:	bd80      	pop	{r7, pc}

10061514 <UUID_cmp_128bits>:
10061514:	b570      	push	{r4, r5, r6, lr}
10061516:	b08a      	sub	sp, #40	@ 0x28
10061518:	460c      	mov	r4, r1
1006151a:	4601      	mov	r1, r0
1006151c:	ad05      	add	r5, sp, #20
1006151e:	2614      	movs	r6, #20
10061520:	4628      	mov	r0, r5
10061522:	4632      	mov	r2, r6
10061524:	f7ef fdb8 	bl	10051098 <BLEPLAT_MemCpy>
10061528:	4668      	mov	r0, sp
1006152a:	4621      	mov	r1, r4
1006152c:	4632      	mov	r2, r6
1006152e:	f7ef fdb3 	bl	10051098 <BLEPLAT_MemCpy>
10061532:	7c28      	ldrb	r0, [r5, #16]
10061534:	2880      	cmp	r0, #128	@ 0x80
10061536:	d007      	beq.n	10061548 <UUID_cmp_128bits+0x34>
10061538:	ac05      	add	r4, sp, #20
1006153a:	490d      	ldr	r1, [pc, #52]	@ (10061570 <__arm_cp.1_0>)
1006153c:	220c      	movs	r2, #12
1006153e:	4620      	mov	r0, r4
10061540:	f7ef fdaa 	bl	10051098 <BLEPLAT_MemCpy>
10061544:	2000      	movs	r0, #0
10061546:	81e0      	strh	r0, [r4, #14]
10061548:	4668      	mov	r0, sp
1006154a:	7c00      	ldrb	r0, [r0, #16]
1006154c:	2880      	cmp	r0, #128	@ 0x80
1006154e:	d007      	beq.n	10061560 <UUID_cmp_128bits+0x4c>
10061550:	466c      	mov	r4, sp
10061552:	4907      	ldr	r1, [pc, #28]	@ (10061570 <__arm_cp.1_0>)
10061554:	220c      	movs	r2, #12
10061556:	4620      	mov	r0, r4
10061558:	f7ef fd9e 	bl	10051098 <BLEPLAT_MemCpy>
1006155c:	2000      	movs	r0, #0
1006155e:	81e0      	strh	r0, [r4, #14]
10061560:	a805      	add	r0, sp, #20
10061562:	4669      	mov	r1, sp
10061564:	2210      	movs	r2, #16
10061566:	f7ef fdb7 	bl	100510d8 <BLEPLAT_MemCmp>
1006156a:	b00a      	add	sp, #40	@ 0x28
1006156c:	bd70      	pop	{r4, r5, r6, pc}
1006156e:	46c0      	nop			@ (mov r8, r8)

10061570 <__arm_cp.1_0>:
10061570:	10068260 	.word	0x10068260

10061574 <UUID_write_to_flat>:
10061574:	b510      	push	{r4, lr}
10061576:	460a      	mov	r2, r1
10061578:	4601      	mov	r1, r0
1006157a:	7c00      	ldrb	r0, [r0, #16]
1006157c:	2820      	cmp	r0, #32
1006157e:	d004      	beq.n	1006158a <UUID_write_to_flat+0x16>
10061580:	2810      	cmp	r0, #16
10061582:	d105      	bne.n	10061590 <UUID_write_to_flat+0x1c>
10061584:	310c      	adds	r1, #12
10061586:	2402      	movs	r4, #2
10061588:	e003      	b.n	10061592 <UUID_write_to_flat+0x1e>
1006158a:	310c      	adds	r1, #12
1006158c:	2404      	movs	r4, #4
1006158e:	e000      	b.n	10061592 <UUID_write_to_flat+0x1e>
10061590:	2410      	movs	r4, #16
10061592:	4610      	mov	r0, r2
10061594:	4622      	mov	r2, r4
10061596:	f7ef fd7f 	bl	10051098 <BLEPLAT_MemCpy>
1006159a:	4620      	mov	r0, r4
1006159c:	bd10      	pop	{r4, pc}

1006159e <UUID_get_value_p>:
1006159e:	7c01      	ldrb	r1, [r0, #16]
100615a0:	2980      	cmp	r1, #128	@ 0x80
100615a2:	d000      	beq.n	100615a6 <UUID_get_value_p+0x8>
100615a4:	300c      	adds	r0, #12
100615a6:	4770      	bx	lr

100615a8 <ACL_list_init>:
100615a8:	2100      	movs	r1, #0
100615aa:	6001      	str	r1, [r0, #0]
100615ac:	6040      	str	r0, [r0, #4]
100615ae:	4770      	bx	lr

100615b0 <ACL_list_insert_tail>:
100615b0:	2200      	movs	r2, #0
100615b2:	61ca      	str	r2, [r1, #28]
100615b4:	6842      	ldr	r2, [r0, #4]
100615b6:	6011      	str	r1, [r2, #0]
100615b8:	311c      	adds	r1, #28
100615ba:	6041      	str	r1, [r0, #4]
100615bc:	4770      	bx	lr

100615be <ACL_list_insert_head>:
100615be:	6802      	ldr	r2, [r0, #0]
100615c0:	61ca      	str	r2, [r1, #28]
100615c2:	2a00      	cmp	r2, #0
100615c4:	d102      	bne.n	100615cc <ACL_list_insert_head+0xe>
100615c6:	460a      	mov	r2, r1
100615c8:	321c      	adds	r2, #28
100615ca:	6042      	str	r2, [r0, #4]
100615cc:	6001      	str	r1, [r0, #0]
100615ce:	4770      	bx	lr

100615d0 <ACL_list_remove>:
100615d0:	6803      	ldr	r3, [r0, #0]
100615d2:	428b      	cmp	r3, r1
100615d4:	d009      	beq.n	100615ea <ACL_list_remove+0x1a>
100615d6:	461a      	mov	r2, r3
100615d8:	69db      	ldr	r3, [r3, #28]
100615da:	428b      	cmp	r3, r1
100615dc:	d1fb      	bne.n	100615d6 <ACL_list_remove+0x6>
100615de:	69cb      	ldr	r3, [r1, #28]
100615e0:	61d3      	str	r3, [r2, #28]
100615e2:	2b00      	cmp	r3, #0
100615e4:	d107      	bne.n	100615f6 <ACL_list_remove+0x26>
100615e6:	321c      	adds	r2, #28
100615e8:	e004      	b.n	100615f4 <ACL_list_remove+0x24>
100615ea:	69ca      	ldr	r2, [r1, #28]
100615ec:	6002      	str	r2, [r0, #0]
100615ee:	2a00      	cmp	r2, #0
100615f0:	d101      	bne.n	100615f6 <ACL_list_remove+0x26>
100615f2:	4602      	mov	r2, r0
100615f4:	6042      	str	r2, [r0, #4]
100615f6:	2000      	movs	r0, #0
100615f8:	61c8      	str	r0, [r1, #28]
100615fa:	4770      	bx	lr

100615fc <ACL_list_remove_head>:
100615fc:	4601      	mov	r1, r0
100615fe:	6800      	ldr	r0, [r0, #0]
10061600:	69c2      	ldr	r2, [r0, #28]
10061602:	600a      	str	r2, [r1, #0]
10061604:	2a00      	cmp	r2, #0
10061606:	d100      	bne.n	1006160a <ACL_list_remove_head+0xe>
10061608:	6049      	str	r1, [r1, #4]
1006160a:	2100      	movs	r1, #0
1006160c:	61c1      	str	r1, [r0, #28]
1006160e:	4770      	bx	lr

10061610 <ACL_list_get_pckt_count>:
10061610:	2100      	movs	r1, #0
10061612:	6800      	ldr	r0, [r0, #0]
10061614:	2800      	cmp	r0, #0
10061616:	d002      	beq.n	1006161e <ACL_list_get_pckt_count+0xe>
10061618:	301c      	adds	r0, #28
1006161a:	1c49      	adds	r1, r1, #1
1006161c:	e7f9      	b.n	10061612 <ACL_list_get_pckt_count+0x2>
1006161e:	b288      	uxth	r0, r1
10061620:	4770      	bx	lr
	...

10061624 <addr8_list_search>:
10061624:	b5f0      	push	{r4, r5, r6, r7, lr}
10061626:	b087      	sub	sp, #28
10061628:	4604      	mov	r4, r0
1006162a:	0608      	lsls	r0, r1, #24
1006162c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1006162e:	d052      	beq.n	100616d6 <addr8_list_search+0xb2>
10061630:	9501      	str	r5, [sp, #4]
10061632:	20ff      	movs	r0, #255	@ 0xff
10061634:	4615      	mov	r5, r2
10061636:	4385      	bics	r5, r0
10061638:	2601      	movs	r6, #1
1006163a:	9305      	str	r3, [sp, #20]
1006163c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1006163e:	461f      	mov	r7, r3
10061640:	9600      	str	r6, [sp, #0]
10061642:	4037      	ands	r7, r6
10061644:	9703      	str	r7, [sp, #12]
10061646:	427e      	negs	r6, r7
10061648:	4016      	ands	r6, r2
1006164a:	b2f2      	uxtb	r2, r6
1006164c:	1952      	adds	r2, r2, r5
1006164e:	9206      	str	r2, [sp, #24]
10061650:	4d25      	ldr	r5, [pc, #148]	@ (100616e8 <__arm_cp.0_0>)
10061652:	9f05      	ldr	r7, [sp, #20]
10061654:	463a      	mov	r2, r7
10061656:	402a      	ands	r2, r5
10061658:	461e      	mov	r6, r3
1006165a:	079d      	lsls	r5, r3, #30
1006165c:	17ed      	asrs	r5, r5, #31
1006165e:	403d      	ands	r5, r7
10061660:	9004      	str	r0, [sp, #16]
10061662:	0603      	lsls	r3, r0, #24
10061664:	402b      	ands	r3, r5
10061666:	189b      	adds	r3, r3, r2
10061668:	2002      	movs	r0, #2
1006166a:	4030      	ands	r0, r6
1006166c:	9002      	str	r0, [sp, #8]
1006166e:	1e48      	subs	r0, r1, #1
10061670:	9005      	str	r0, [sp, #20]
10061672:	b2c8      	uxtb	r0, r1
10061674:	0841      	lsrs	r1, r0, #1
10061676:	2600      	movs	r6, #0
10061678:	b2c8      	uxtb	r0, r1
1006167a:	00c2      	lsls	r2, r0, #3
1006167c:	18a0      	adds	r0, r4, r2
1006167e:	6845      	ldr	r5, [r0, #4]
10061680:	9802      	ldr	r0, [sp, #8]
10061682:	2800      	cmp	r0, #0
10061684:	d101      	bne.n	1006168a <addr8_list_search+0x66>
10061686:	4818      	ldr	r0, [pc, #96]	@ (100616e8 <__arm_cp.0_0>)
10061688:	4005      	ands	r5, r0
1006168a:	58a0      	ldr	r0, [r4, r2]
1006168c:	4602      	mov	r2, r0
1006168e:	9f04      	ldr	r7, [sp, #16]
10061690:	43ba      	bics	r2, r7
10061692:	9f03      	ldr	r7, [sp, #12]
10061694:	2f00      	cmp	r7, #0
10061696:	d101      	bne.n	1006169c <addr8_list_search+0x78>
10061698:	4638      	mov	r0, r7
1006169a:	e000      	b.n	1006169e <addr8_list_search+0x7a>
1006169c:	b2c0      	uxtb	r0, r0
1006169e:	1882      	adds	r2, r0, r2
100616a0:	9806      	ldr	r0, [sp, #24]
100616a2:	4290      	cmp	r0, r2
100616a4:	d101      	bne.n	100616aa <addr8_list_search+0x86>
100616a6:	42ab      	cmp	r3, r5
100616a8:	d018      	beq.n	100616dc <addr8_list_search+0xb8>
100616aa:	42ab      	cmp	r3, r5
100616ac:	d803      	bhi.n	100616b6 <addr8_list_search+0x92>
100616ae:	d104      	bne.n	100616ba <addr8_list_search+0x96>
100616b0:	9806      	ldr	r0, [sp, #24]
100616b2:	4290      	cmp	r0, r2
100616b4:	d901      	bls.n	100616ba <addr8_list_search+0x96>
100616b6:	1c4e      	adds	r6, r1, #1
100616b8:	e001      	b.n	100616be <addr8_list_search+0x9a>
100616ba:	1e48      	subs	r0, r1, #1
100616bc:	9005      	str	r0, [sp, #20]
100616be:	9805      	ldr	r0, [sp, #20]
100616c0:	1b80      	subs	r0, r0, r6
100616c2:	b2c0      	uxtb	r0, r0
100616c4:	1c40      	adds	r0, r0, #1
100616c6:	b2c2      	uxtb	r2, r0
100616c8:	0851      	lsrs	r1, r2, #1
100616ca:	1989      	adds	r1, r1, r6
100616cc:	4282      	cmp	r2, r0
100616ce:	d0d3      	beq.n	10061678 <addr8_list_search+0x54>
100616d0:	2000      	movs	r0, #0
100616d2:	9d01      	ldr	r5, [sp, #4]
100616d4:	e004      	b.n	100616e0 <addr8_list_search+0xbc>
100616d6:	2100      	movs	r1, #0
100616d8:	4608      	mov	r0, r1
100616da:	e001      	b.n	100616e0 <addr8_list_search+0xbc>
100616dc:	9d01      	ldr	r5, [sp, #4]
100616de:	9800      	ldr	r0, [sp, #0]
100616e0:	7029      	strb	r1, [r5, #0]
100616e2:	b007      	add	sp, #28
100616e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100616e6:	46c0      	nop			@ (mov r8, r8)

100616e8 <__arm_cp.0_0>:
100616e8:	00ffffff 	.word	0x00ffffff

100616ec <addr8_list_add>:
100616ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100616ee:	b089      	sub	sp, #36	@ 0x24
100616f0:	4615      	mov	r5, r2
100616f2:	460f      	mov	r7, r1
100616f4:	4604      	mov	r4, r0
100616f6:	7906      	ldrb	r6, [r0, #4]
100616f8:	6800      	ldr	r0, [r0, #0]
100616fa:	6861      	ldr	r1, [r4, #4]
100616fc:	aa08      	add	r2, sp, #32
100616fe:	9300      	str	r3, [sp, #0]
10061700:	9201      	str	r2, [sp, #4]
10061702:	463a      	mov	r2, r7
10061704:	462b      	mov	r3, r5
10061706:	f7ff ff8d 	bl	10061624 <addr8_list_search>
1006170a:	2100      	movs	r1, #0
1006170c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1006170e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10061710:	2800      	cmp	r0, #0
10061712:	9207      	str	r2, [sp, #28]
10061714:	d126      	bne.n	10061764 <addr8_list_add+0x78>
10061716:	9706      	str	r7, [sp, #24]
10061718:	7967      	ldrb	r7, [r4, #5]
1006171a:	42be      	cmp	r6, r7
1006171c:	d222      	bcs.n	10061764 <addr8_list_add+0x78>
1006171e:	9302      	str	r3, [sp, #8]
10061720:	9003      	str	r0, [sp, #12]
10061722:	9504      	str	r5, [sp, #16]
10061724:	a908      	add	r1, sp, #32
10061726:	7808      	ldrb	r0, [r1, #0]
10061728:	9605      	str	r6, [sp, #20]
1006172a:	4286      	cmp	r6, r0
1006172c:	d00d      	beq.n	1006174a <addr8_list_add+0x5e>
1006172e:	9f05      	ldr	r7, [sp, #20]
10061730:	6822      	ldr	r2, [r4, #0]
10061732:	b2fd      	uxtb	r5, r7
10061734:	00ed      	lsls	r5, r5, #3
10061736:	1956      	adds	r6, r2, r5
10061738:	4633      	mov	r3, r6
1006173a:	3b08      	subs	r3, #8
1006173c:	cb0a      	ldmia	r3, {r1, r3}
1006173e:	5151      	str	r1, [r2, r5]
10061740:	6073      	str	r3, [r6, #4]
10061742:	1e7f      	subs	r7, r7, #1
10061744:	b2f9      	uxtb	r1, r7
10061746:	4281      	cmp	r1, r0
10061748:	d1f2      	bne.n	10061730 <addr8_list_add+0x44>
1006174a:	6821      	ldr	r1, [r4, #0]
1006174c:	00c0      	lsls	r0, r0, #3
1006174e:	9a06      	ldr	r2, [sp, #24]
10061750:	500a      	str	r2, [r1, r0]
10061752:	1808      	adds	r0, r1, r0
10061754:	9904      	ldr	r1, [sp, #16]
10061756:	6041      	str	r1, [r0, #4]
10061758:	9805      	ldr	r0, [sp, #20]
1006175a:	1c40      	adds	r0, r0, #1
1006175c:	7120      	strb	r0, [r4, #4]
1006175e:	2101      	movs	r1, #1
10061760:	9803      	ldr	r0, [sp, #12]
10061762:	9b02      	ldr	r3, [sp, #8]
10061764:	9a08      	ldr	r2, [sp, #32]
10061766:	9c07      	ldr	r4, [sp, #28]
10061768:	7022      	strb	r2, [r4, #0]
1006176a:	7018      	strb	r0, [r3, #0]
1006176c:	4608      	mov	r0, r1
1006176e:	b009      	add	sp, #36	@ 0x24
10061770:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061772 <addr8_list_remove_by_addr>:
10061772:	b5f0      	push	{r4, r5, r6, r7, lr}
10061774:	b087      	sub	sp, #28
10061776:	460f      	mov	r7, r1
10061778:	4601      	mov	r1, r0
1006177a:	7900      	ldrb	r0, [r0, #4]
1006177c:	2600      	movs	r6, #0
1006177e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10061780:	2800      	cmp	r0, #0
10061782:	d02f      	beq.n	100617e4 <addr8_list_remove_by_addr+0x72>
10061784:	9003      	str	r0, [sp, #12]
10061786:	6808      	ldr	r0, [r1, #0]
10061788:	9104      	str	r1, [sp, #16]
1006178a:	6849      	ldr	r1, [r1, #4]
1006178c:	9205      	str	r2, [sp, #20]
1006178e:	ad06      	add	r5, sp, #24
10061790:	9300      	str	r3, [sp, #0]
10061792:	9501      	str	r5, [sp, #4]
10061794:	463a      	mov	r2, r7
10061796:	9b05      	ldr	r3, [sp, #20]
10061798:	f7ff ff44 	bl	10061624 <addr8_list_search>
1006179c:	2800      	cmp	r0, #0
1006179e:	d021      	beq.n	100617e4 <addr8_list_remove_by_addr+0x72>
100617a0:	9002      	str	r0, [sp, #8]
100617a2:	9405      	str	r4, [sp, #20]
100617a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100617a6:	9c04      	ldr	r4, [sp, #16]
100617a8:	6823      	ldr	r3, [r4, #0]
100617aa:	a906      	add	r1, sp, #24
100617ac:	7809      	ldrb	r1, [r1, #0]
100617ae:	00cd      	lsls	r5, r1, #3
100617b0:	195b      	adds	r3, r3, r5
100617b2:	79db      	ldrb	r3, [r3, #7]
100617b4:	7013      	strb	r3, [r2, #0]
100617b6:	9803      	ldr	r0, [sp, #12]
100617b8:	1e40      	subs	r0, r0, #1
100617ba:	9003      	str	r0, [sp, #12]
100617bc:	b2c0      	uxtb	r0, r0
100617be:	4281      	cmp	r1, r0
100617c0:	4623      	mov	r3, r4
100617c2:	d00b      	beq.n	100617dc <addr8_list_remove_by_addr+0x6a>
100617c4:	681d      	ldr	r5, [r3, #0]
100617c6:	b2ce      	uxtb	r6, r1
100617c8:	00f6      	lsls	r6, r6, #3
100617ca:	19af      	adds	r7, r5, r6
100617cc:	68ba      	ldr	r2, [r7, #8]
100617ce:	68fc      	ldr	r4, [r7, #12]
100617d0:	51aa      	str	r2, [r5, r6]
100617d2:	607c      	str	r4, [r7, #4]
100617d4:	1c49      	adds	r1, r1, #1
100617d6:	b2ca      	uxtb	r2, r1
100617d8:	4282      	cmp	r2, r0
100617da:	d1f3      	bne.n	100617c4 <addr8_list_remove_by_addr+0x52>
100617dc:	9803      	ldr	r0, [sp, #12]
100617de:	7118      	strb	r0, [r3, #4]
100617e0:	9e02      	ldr	r6, [sp, #8]
100617e2:	9c05      	ldr	r4, [sp, #20]
100617e4:	7026      	strb	r6, [r4, #0]
100617e6:	b007      	add	sp, #28
100617e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

100617ea <addr8_list_clear>:
100617ea:	2100      	movs	r1, #0
100617ec:	7101      	strb	r1, [r0, #4]
100617ee:	4770      	bx	lr

100617f0 <BLEPLAT_aes128_encrypt>:
100617f0:	b580      	push	{r7, lr}
100617f2:	f7ef fc9e 	bl	10051132 <BLEPLAT_AesEcbEncrypt>
100617f6:	bd80      	pop	{r7, pc}

100617f8 <Hal_Get_Random_Number>:
100617f8:	b51c      	push	{r2, r3, r4, lr}
100617fa:	ac01      	add	r4, sp, #4
100617fc:	4620      	mov	r0, r4
100617fe:	f7ef fcd7 	bl	100511b0 <BLEPLAT_RngGetRandom16>
10061802:	8820      	ldrh	r0, [r4, #0]
10061804:	bd1c      	pop	{r2, r3, r4, pc}

10061806 <Hal_Get_Random_Number32>:
10061806:	b5e0      	push	{r5, r6, r7, lr}
10061808:	a801      	add	r0, sp, #4
1006180a:	f7ef fcdd 	bl	100511c8 <BLEPLAT_RngGetRandom32>
1006180e:	9801      	ldr	r0, [sp, #4]
10061810:	bd8c      	pop	{r2, r3, r7, pc}

10061812 <HAL_Generate_Random_Bytes_To>:
10061812:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10061814:	460c      	mov	r4, r1
10061816:	4605      	mov	r5, r0
10061818:	2000      	movs	r0, #0
1006181a:	b2c6      	uxtb	r6, r0
1006181c:	42a6      	cmp	r6, r4
1006181e:	d20e      	bcs.n	1006183e <HAL_Generate_Random_Bytes_To+0x2c>
10061820:	2000      	movs	r0, #0
10061822:	f7ff ffe9 	bl	100617f8 <Hal_Get_Random_Number>
10061826:	55a8      	strb	r0, [r5, r6]
10061828:	a901      	add	r1, sp, #4
1006182a:	7008      	strb	r0, [r1, #0]
1006182c:	0a00      	lsrs	r0, r0, #8
1006182e:	4669      	mov	r1, sp
10061830:	7008      	strb	r0, [r1, #0]
10061832:	1c71      	adds	r1, r6, #1
10061834:	42a1      	cmp	r1, r4
10061836:	d200      	bcs.n	1006183a <HAL_Generate_Random_Bytes_To+0x28>
10061838:	5468      	strb	r0, [r5, r1]
1006183a:	1cb0      	adds	r0, r6, #2
1006183c:	e7ed      	b.n	1006181a <HAL_Generate_Random_Bytes_To+0x8>
1006183e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10061840 <IDD_Initialize_Device_IDs>:
10061840:	b5f0      	push	{r4, r5, r6, r7, lr}
10061842:	b095      	sub	sp, #84	@ 0x54
10061844:	4839      	ldr	r0, [pc, #228]	@ (1006192c <__arm_cp.0_0>)
10061846:	6800      	ldr	r0, [r0, #0]
10061848:	9000      	str	r0, [sp, #0]
1006184a:	a80b      	add	r0, sp, #44	@ 0x2c
1006184c:	f7ff fc63 	bl	10061116 <nvm_dev_id_data_get_record>
10061850:	2800      	cmp	r0, #0
10061852:	d031      	beq.n	100618b8 <IDD_Initialize_Device_IDs+0x78>
10061854:	af01      	add	r7, sp, #4
10061856:	2406      	movs	r4, #6
10061858:	2500      	movs	r5, #0
1006185a:	4b35      	ldr	r3, [pc, #212]	@ (10061930 <__arm_cp.0_1>)
1006185c:	4638      	mov	r0, r7
1006185e:	4621      	mov	r1, r4
10061860:	462a      	mov	r2, r5
10061862:	4798      	blx	r3
10061864:	7978      	ldrb	r0, [r7, #5]
10061866:	21c0      	movs	r1, #192	@ 0xc0
10061868:	4301      	orrs	r1, r0
1006186a:	7179      	strb	r1, [r7, #5]
1006186c:	ae0b      	add	r6, sp, #44	@ 0x2c
1006186e:	4630      	mov	r0, r6
10061870:	3020      	adds	r0, #32
10061872:	4b30      	ldr	r3, [pc, #192]	@ (10061934 <__arm_cp.0_2>)
10061874:	4639      	mov	r1, r7
10061876:	4622      	mov	r2, r4
10061878:	4798      	blx	r3
1006187a:	ac07      	add	r4, sp, #28
1006187c:	2710      	movs	r7, #16
1006187e:	4620      	mov	r0, r4
10061880:	4639      	mov	r1, r7
10061882:	462a      	mov	r2, r5
10061884:	4b2a      	ldr	r3, [pc, #168]	@ (10061930 <__arm_cp.0_1>)
10061886:	4798      	blx	r3
10061888:	4630      	mov	r0, r6
1006188a:	4621      	mov	r1, r4
1006188c:	463a      	mov	r2, r7
1006188e:	4b29      	ldr	r3, [pc, #164]	@ (10061934 <__arm_cp.0_2>)
10061890:	4798      	blx	r3
10061892:	ac03      	add	r4, sp, #12
10061894:	4620      	mov	r0, r4
10061896:	4639      	mov	r1, r7
10061898:	462a      	mov	r2, r5
1006189a:	4b25      	ldr	r3, [pc, #148]	@ (10061930 <__arm_cp.0_1>)
1006189c:	4798      	blx	r3
1006189e:	4630      	mov	r0, r6
100618a0:	3010      	adds	r0, #16
100618a2:	4621      	mov	r1, r4
100618a4:	463a      	mov	r2, r7
100618a6:	4b23      	ldr	r3, [pc, #140]	@ (10061934 <__arm_cp.0_2>)
100618a8:	4798      	blx	r3
100618aa:	4630      	mov	r0, r6
100618ac:	f7ff fc40 	bl	10061130 <nvm_dev_id_data_add_record>
100618b0:	2800      	cmp	r0, #0
100618b2:	d103      	bne.n	100618bc <IDD_Initialize_Device_IDs+0x7c>
100618b4:	4605      	mov	r5, r0
100618b6:	e003      	b.n	100618c0 <IDD_Initialize_Device_IDs+0x80>
100618b8:	2500      	movs	r5, #0
100618ba:	e001      	b.n	100618c0 <IDD_Initialize_Device_IDs+0x80>
100618bc:	200e      	movs	r0, #14
100618be:	43c5      	mvns	r5, r0
100618c0:	4c1d      	ldr	r4, [pc, #116]	@ (10061938 <__arm_cp.0_3>)
100618c2:	6822      	ldr	r2, [r4, #0]
100618c4:	322e      	adds	r2, #46	@ 0x2e
100618c6:	2600      	movs	r6, #0
100618c8:	2706      	movs	r7, #6
100618ca:	4630      	mov	r0, r6
100618cc:	4639      	mov	r1, r7
100618ce:	f7ff fdef 	bl	100614b0 <is_Buffer_All_Set_To>
100618d2:	a90b      	add	r1, sp, #44	@ 0x2c
100618d4:	2800      	cmp	r0, #0
100618d6:	d001      	beq.n	100618dc <IDD_Initialize_Device_IDs+0x9c>
100618d8:	3120      	adds	r1, #32
100618da:	e001      	b.n	100618e0 <IDD_Initialize_Device_IDs+0xa0>
100618dc:	6821      	ldr	r1, [r4, #0]
100618de:	312e      	adds	r1, #46	@ 0x2e
100618e0:	9800      	ldr	r0, [sp, #0]
100618e2:	3060      	adds	r0, #96	@ 0x60
100618e4:	463a      	mov	r2, r7
100618e6:	f7ef fbd7 	bl	10051098 <BLEPLAT_MemCpy>
100618ea:	6822      	ldr	r2, [r4, #0]
100618ec:	3208      	adds	r2, #8
100618ee:	2110      	movs	r1, #16
100618f0:	4630      	mov	r0, r6
100618f2:	f7ff fddd 	bl	100614b0 <is_Buffer_All_Set_To>
100618f6:	2800      	cmp	r0, #0
100618f8:	d005      	beq.n	10061906 <IDD_Initialize_Device_IDs+0xc6>
100618fa:	6820      	ldr	r0, [r4, #0]
100618fc:	3008      	adds	r0, #8
100618fe:	a90b      	add	r1, sp, #44	@ 0x2c
10061900:	2210      	movs	r2, #16
10061902:	f7ef fbc9 	bl	10051098 <BLEPLAT_MemCpy>
10061906:	6822      	ldr	r2, [r4, #0]
10061908:	3218      	adds	r2, #24
1006190a:	2000      	movs	r0, #0
1006190c:	2110      	movs	r1, #16
1006190e:	f7ff fdcf 	bl	100614b0 <is_Buffer_All_Set_To>
10061912:	2800      	cmp	r0, #0
10061914:	d006      	beq.n	10061924 <IDD_Initialize_Device_IDs+0xe4>
10061916:	a90b      	add	r1, sp, #44	@ 0x2c
10061918:	3110      	adds	r1, #16
1006191a:	6820      	ldr	r0, [r4, #0]
1006191c:	3018      	adds	r0, #24
1006191e:	2210      	movs	r2, #16
10061920:	f7ef fbba 	bl	10051098 <BLEPLAT_MemCpy>
10061924:	b2e8      	uxtb	r0, r5
10061926:	b015      	add	sp, #84	@ 0x54
10061928:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006192a:	46c0      	nop			@ (mov r8, r8)

1006192c <__arm_cp.0_0>:
1006192c:	2000241c 	.word	0x2000241c

10061930 <__arm_cp.0_1>:
10061930:	10061813 	.word	0x10061813

10061934 <__arm_cp.0_2>:
10061934:	10051099 	.word	0x10051099

10061938 <__arm_cp.0_3>:
10061938:	20002414 	.word	0x20002414

1006193c <aci_gatt_clt_notification_event_notify>:
1006193c:	b5b0      	push	{r4, r5, r7, lr}
1006193e:	b0ff      	sub	sp, #508	@ 0x1fc
10061940:	b083      	sub	sp, #12
10061942:	461c      	mov	r4, r3
10061944:	466d      	mov	r5, sp
10061946:	732b      	strb	r3, [r5, #12]
10061948:	72aa      	strb	r2, [r5, #10]
1006194a:	7229      	strb	r1, [r5, #8]
1006194c:	71a8      	strb	r0, [r5, #6]
1006194e:	0a1b      	lsrs	r3, r3, #8
10061950:	736b      	strb	r3, [r5, #13]
10061952:	0a12      	lsrs	r2, r2, #8
10061954:	72ea      	strb	r2, [r5, #11]
10061956:	0a09      	lsrs	r1, r1, #8
10061958:	7269      	strb	r1, [r5, #9]
1006195a:	0a00      	lsrs	r0, r0, #8
1006195c:	71e8      	strb	r0, [r5, #7]
1006195e:	4628      	mov	r0, r5
10061960:	300e      	adds	r0, #14
10061962:	9986      	ldr	r1, [sp, #536]	@ 0x218
10061964:	4622      	mov	r2, r4
10061966:	f7ef fb97 	bl	10051098 <BLEPLAT_MemCpy>
1006196a:	4620      	mov	r0, r4
1006196c:	300a      	adds	r0, #10
1006196e:	70a8      	strb	r0, [r5, #2]
10061970:	0a00      	lsrs	r0, r0, #8
10061972:	70e8      	strb	r0, [r5, #3]
10061974:	200f      	movs	r0, #15
10061976:	7128      	strb	r0, [r5, #4]
10061978:	20ff      	movs	r0, #255	@ 0xff
1006197a:	7068      	strb	r0, [r5, #1]
1006197c:	2082      	movs	r0, #130	@ 0x82
1006197e:	7028      	strb	r0, [r5, #0]
10061980:	200c      	movs	r0, #12
10061982:	7168      	strb	r0, [r5, #5]
10061984:	340e      	adds	r4, #14
10061986:	b2a1      	uxth	r1, r4
10061988:	4628      	mov	r0, r5
1006198a:	f7eb fd53 	bl	1004d434 <BLE_STACK_Event>
1006198e:	b07f      	add	sp, #508	@ 0x1fc
10061990:	b003      	add	sp, #12
10061992:	bdb0      	pop	{r4, r5, r7, pc}

10061994 <aci_gatt_clt_indication_event_cb>:
10061994:	b5b0      	push	{r4, r5, r7, lr}
10061996:	b0ff      	sub	sp, #508	@ 0x1fc
10061998:	b083      	sub	sp, #12
1006199a:	460c      	mov	r4, r1
1006199c:	4605      	mov	r5, r0
1006199e:	688b      	ldr	r3, [r1, #8]
100619a0:	88ca      	ldrh	r2, [r1, #6]
100619a2:	8889      	ldrh	r1, [r1, #4]
100619a4:	4668      	mov	r0, sp
100619a6:	1d80      	adds	r0, r0, #6
100619a8:	f7f2 fd57 	bl	1005445a <aci_gatt_clt_indication_event_copy>
100619ac:	0728      	lsls	r0, r5, #28
100619ae:	d502      	bpl.n	100619b6 <aci_gatt_clt_indication_event_cb+0x22>
100619b0:	68a0      	ldr	r0, [r4, #8]
100619b2:	f7f1 ff09 	bl	100537c8 <ACL_pkt_release>
100619b6:	9903      	ldr	r1, [sp, #12]
100619b8:	460a      	mov	r2, r1
100619ba:	320a      	adds	r2, #10
100619bc:	4668      	mov	r0, sp
100619be:	7082      	strb	r2, [r0, #2]
100619c0:	0a12      	lsrs	r2, r2, #8
100619c2:	70c2      	strb	r2, [r0, #3]
100619c4:	220e      	movs	r2, #14
100619c6:	7102      	strb	r2, [r0, #4]
100619c8:	4a05      	ldr	r2, [pc, #20]	@ (100619e0 <__arm_cp.1_0>)
100619ca:	8002      	strh	r2, [r0, #0]
100619cc:	220c      	movs	r2, #12
100619ce:	7142      	strb	r2, [r0, #5]
100619d0:	310e      	adds	r1, #14
100619d2:	b289      	uxth	r1, r1
100619d4:	f7eb fd2e 	bl	1004d434 <BLE_STACK_Event>
100619d8:	b07f      	add	sp, #508	@ 0x1fc
100619da:	b003      	add	sp, #12
100619dc:	bdb0      	pop	{r4, r5, r7, pc}
100619de:	46c0      	nop			@ (mov r8, r8)

100619e0 <__arm_cp.1_0>:
100619e0:	0000ff82 	.word	0x0000ff82

100619e4 <aci_gatt_clt_notification_event_cb>:
100619e4:	b5b0      	push	{r4, r5, r7, lr}
100619e6:	b0ff      	sub	sp, #508	@ 0x1fc
100619e8:	b085      	sub	sp, #20
100619ea:	460c      	mov	r4, r1
100619ec:	4605      	mov	r5, r0
100619ee:	688b      	ldr	r3, [r1, #8]
100619f0:	88ca      	ldrh	r2, [r1, #6]
100619f2:	8889      	ldrh	r1, [r1, #4]
100619f4:	a802      	add	r0, sp, #8
100619f6:	1d80      	adds	r0, r0, #6
100619f8:	f7f2 fd54 	bl	100544a4 <aci_gatt_clt_notification_event_copy>
100619fc:	0728      	lsls	r0, r5, #28
100619fe:	d502      	bpl.n	10061a06 <aci_gatt_clt_notification_event_cb+0x22>
10061a00:	68a0      	ldr	r0, [r4, #8]
10061a02:	f7f1 fee1 	bl	100537c8 <ACL_pkt_release>
10061a06:	ac02      	add	r4, sp, #8
10061a08:	89a3      	ldrh	r3, [r4, #12]
10061a0a:	8962      	ldrh	r2, [r4, #10]
10061a0c:	8921      	ldrh	r1, [r4, #8]
10061a0e:	88e0      	ldrh	r0, [r4, #6]
10061a10:	340e      	adds	r4, #14
10061a12:	9400      	str	r4, [sp, #0]
10061a14:	f7ff ff92 	bl	1006193c <aci_gatt_clt_notification_event_notify>
10061a18:	b07f      	add	sp, #508	@ 0x1fc
10061a1a:	b005      	add	sp, #20
10061a1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10061a20 <aci_gatt_srv_write_event_cb>:
10061a20:	b5f0      	push	{r4, r5, r6, r7, lr}
10061a22:	b0ff      	sub	sp, #508	@ 0x1fc
10061a24:	b086      	sub	sp, #24
10061a26:	460c      	mov	r4, r1
10061a28:	4605      	mov	r5, r0
10061a2a:	7a0b      	ldrb	r3, [r1, #8]
10061a2c:	88ca      	ldrh	r2, [r1, #6]
10061a2e:	8889      	ldrh	r1, [r1, #4]
10061a30:	8960      	ldrh	r0, [r4, #10]
10061a32:	89a6      	ldrh	r6, [r4, #12]
10061a34:	6927      	ldr	r7, [r4, #16]
10061a36:	9000      	str	r0, [sp, #0]
10061a38:	9601      	str	r6, [sp, #4]
10061a3a:	9702      	str	r7, [sp, #8]
10061a3c:	a803      	add	r0, sp, #12
10061a3e:	1d80      	adds	r0, r0, #6
10061a40:	f7f2 fd79 	bl	10054536 <aci_gatt_srv_write_event_copy>
10061a44:	0728      	lsls	r0, r5, #28
10061a46:	d502      	bpl.n	10061a4e <aci_gatt_srv_write_event_cb+0x2e>
10061a48:	6920      	ldr	r0, [r4, #16]
10061a4a:	f7f1 febd 	bl	100537c8 <ACL_pkt_release>
10061a4e:	a803      	add	r0, sp, #12
10061a50:	7b41      	ldrb	r1, [r0, #13]
10061a52:	7b82      	ldrb	r2, [r0, #14]
10061a54:	0212      	lsls	r2, r2, #8
10061a56:	1851      	adds	r1, r2, r1
10061a58:	460a      	mov	r2, r1
10061a5a:	320b      	adds	r2, #11
10061a5c:	7082      	strb	r2, [r0, #2]
10061a5e:	0a12      	lsrs	r2, r2, #8
10061a60:	70c2      	strb	r2, [r0, #3]
10061a62:	221a      	movs	r2, #26
10061a64:	7102      	strb	r2, [r0, #4]
10061a66:	4a05      	ldr	r2, [pc, #20]	@ (10061a7c <__arm_cp.3_0>)
10061a68:	8002      	strh	r2, [r0, #0]
10061a6a:	220c      	movs	r2, #12
10061a6c:	7142      	strb	r2, [r0, #5]
10061a6e:	310f      	adds	r1, #15
10061a70:	b289      	uxth	r1, r1
10061a72:	f7eb fcdf 	bl	1004d434 <BLE_STACK_Event>
10061a76:	b07f      	add	sp, #508	@ 0x1fc
10061a78:	b006      	add	sp, #24
10061a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061a7c <__arm_cp.3_0>:
10061a7c:	0000ff82 	.word	0x0000ff82

10061a80 <aci_gatt_clt_multi_notification_int_event_cb>:
10061a80:	b5f0      	push	{r4, r5, r6, r7, lr}
10061a82:	b0ff      	sub	sp, #508	@ 0x1fc
10061a84:	b08c      	sub	sp, #48	@ 0x30
10061a86:	460c      	mov	r4, r1
10061a88:	4605      	mov	r5, r0
10061a8a:	688b      	ldr	r3, [r1, #8]
10061a8c:	88ca      	ldrh	r2, [r1, #6]
10061a8e:	8889      	ldrh	r1, [r1, #4]
10061a90:	a807      	add	r0, sp, #28
10061a92:	1d80      	adds	r0, r0, #6
10061a94:	f7f2 fd87 	bl	100545a6 <aci_gatt_clt_multi_notification_int_event_copy>
10061a98:	0728      	lsls	r0, r5, #28
10061a9a:	d502      	bpl.n	10061aa2 <aci_gatt_clt_multi_notification_int_event_cb+0x22>
10061a9c:	68a0      	ldr	r0, [r4, #8]
10061a9e:	f7f1 fe93 	bl	100537c8 <ACL_pkt_release>
10061aa2:	a807      	add	r0, sp, #28
10061aa4:	8941      	ldrh	r1, [r0, #10]
10061aa6:	9105      	str	r1, [sp, #20]
10061aa8:	8901      	ldrh	r1, [r0, #8]
10061aaa:	9103      	str	r1, [sp, #12]
10061aac:	88c1      	ldrh	r1, [r0, #6]
10061aae:	9102      	str	r1, [sp, #8]
10061ab0:	300c      	adds	r0, #12
10061ab2:	9004      	str	r0, [sp, #16]
10061ab4:	2500      	movs	r5, #0
10061ab6:	9e04      	ldr	r6, [sp, #16]
10061ab8:	b2a8      	uxth	r0, r5
10061aba:	9905      	ldr	r1, [sp, #20]
10061abc:	4288      	cmp	r0, r1
10061abe:	d21c      	bcs.n	10061afa <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
10061ac0:	1831      	adds	r1, r6, r0
10061ac2:	a88a      	add	r0, sp, #552	@ 0x228
10061ac4:	9006      	str	r0, [sp, #24]
10061ac6:	2402      	movs	r4, #2
10061ac8:	4622      	mov	r2, r4
10061aca:	f7ef fae5 	bl	10051098 <BLEPLAT_MemCpy>
10061ace:	1ca8      	adds	r0, r5, #2
10061ad0:	b280      	uxth	r0, r0
10061ad2:	1831      	adds	r1, r6, r0
10061ad4:	af89      	add	r7, sp, #548	@ 0x224
10061ad6:	4638      	mov	r0, r7
10061ad8:	4622      	mov	r2, r4
10061ada:	f7ef fadd 	bl	10051098 <BLEPLAT_MemCpy>
10061ade:	1d28      	adds	r0, r5, #4
10061ae0:	b284      	uxth	r4, r0
10061ae2:	1930      	adds	r0, r6, r4
10061ae4:	883b      	ldrh	r3, [r7, #0]
10061ae6:	9906      	ldr	r1, [sp, #24]
10061ae8:	880a      	ldrh	r2, [r1, #0]
10061aea:	9000      	str	r0, [sp, #0]
10061aec:	9802      	ldr	r0, [sp, #8]
10061aee:	9903      	ldr	r1, [sp, #12]
10061af0:	f7ff ff24 	bl	1006193c <aci_gatt_clt_notification_event_notify>
10061af4:	8838      	ldrh	r0, [r7, #0]
10061af6:	1825      	adds	r5, r4, r0
10061af8:	e7de      	b.n	10061ab8 <aci_gatt_clt_multi_notification_int_event_cb+0x38>
10061afa:	b07f      	add	sp, #508	@ 0x1fc
10061afc:	b00c      	add	sp, #48	@ 0x30
10061afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061b00 <aci_att_clt_find_info_resp_event_cb>:
10061b00:	b5b0      	push	{r4, r5, r7, lr}
10061b02:	b0ff      	sub	sp, #508	@ 0x1fc
10061b04:	b083      	sub	sp, #12
10061b06:	460c      	mov	r4, r1
10061b08:	4605      	mov	r5, r0
10061b0a:	688b      	ldr	r3, [r1, #8]
10061b0c:	88ca      	ldrh	r2, [r1, #6]
10061b0e:	8889      	ldrh	r1, [r1, #4]
10061b10:	4668      	mov	r0, sp
10061b12:	1d80      	adds	r0, r0, #6
10061b14:	f7f2 fbc0 	bl	10054298 <aci_att_clt_find_info_resp_event_copy>
10061b18:	0728      	lsls	r0, r5, #28
10061b1a:	d502      	bpl.n	10061b22 <aci_att_clt_find_info_resp_event_cb+0x22>
10061b1c:	68a0      	ldr	r0, [r4, #8]
10061b1e:	f7f1 fe53 	bl	100537c8 <ACL_pkt_release>
10061b22:	4668      	mov	r0, sp
10061b24:	7ac1      	ldrb	r1, [r0, #11]
10061b26:	9a03      	ldr	r2, [sp, #12]
10061b28:	0212      	lsls	r2, r2, #8
10061b2a:	1851      	adds	r1, r2, r1
10061b2c:	460a      	mov	r2, r1
10061b2e:	3209      	adds	r2, #9
10061b30:	7082      	strb	r2, [r0, #2]
10061b32:	0a12      	lsrs	r2, r2, #8
10061b34:	70c2      	strb	r2, [r0, #3]
10061b36:	2204      	movs	r2, #4
10061b38:	7102      	strb	r2, [r0, #4]
10061b3a:	4a05      	ldr	r2, [pc, #20]	@ (10061b50 <__arm_cp.5_0>)
10061b3c:	8002      	strh	r2, [r0, #0]
10061b3e:	220c      	movs	r2, #12
10061b40:	7142      	strb	r2, [r0, #5]
10061b42:	310d      	adds	r1, #13
10061b44:	b289      	uxth	r1, r1
10061b46:	f7eb fc75 	bl	1004d434 <BLE_STACK_Event>
10061b4a:	b07f      	add	sp, #508	@ 0x1fc
10061b4c:	b003      	add	sp, #12
10061b4e:	bdb0      	pop	{r4, r5, r7, pc}

10061b50 <__arm_cp.5_0>:
10061b50:	0000ff82 	.word	0x0000ff82

10061b54 <aci_att_clt_find_by_type_value_resp_event_cb>:
10061b54:	b5b0      	push	{r4, r5, r7, lr}
10061b56:	b0ff      	sub	sp, #508	@ 0x1fc
10061b58:	b083      	sub	sp, #12
10061b5a:	460c      	mov	r4, r1
10061b5c:	4605      	mov	r5, r0
10061b5e:	688b      	ldr	r3, [r1, #8]
10061b60:	88ca      	ldrh	r2, [r1, #6]
10061b62:	8889      	ldrh	r1, [r1, #4]
10061b64:	4668      	mov	r0, sp
10061b66:	1d80      	adds	r0, r0, #6
10061b68:	f7f2 fbb4 	bl	100542d4 <aci_att_clt_find_by_type_value_resp_event_copy>
10061b6c:	0728      	lsls	r0, r5, #28
10061b6e:	d502      	bpl.n	10061b76 <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
10061b70:	68a0      	ldr	r0, [r4, #8]
10061b72:	f7f1 fe29 	bl	100537c8 <ACL_pkt_release>
10061b76:	4668      	mov	r0, sp
10061b78:	7a81      	ldrb	r1, [r0, #10]
10061b7a:	0089      	lsls	r1, r1, #2
10061b7c:	1dca      	adds	r2, r1, #7
10061b7e:	7082      	strb	r2, [r0, #2]
10061b80:	0a12      	lsrs	r2, r2, #8
10061b82:	70c2      	strb	r2, [r0, #3]
10061b84:	2205      	movs	r2, #5
10061b86:	7102      	strb	r2, [r0, #4]
10061b88:	4a04      	ldr	r2, [pc, #16]	@ (10061b9c <__arm_cp.6_0>)
10061b8a:	8002      	strh	r2, [r0, #0]
10061b8c:	220c      	movs	r2, #12
10061b8e:	7142      	strb	r2, [r0, #5]
10061b90:	310b      	adds	r1, #11
10061b92:	f7eb fc4f 	bl	1004d434 <BLE_STACK_Event>
10061b96:	b07f      	add	sp, #508	@ 0x1fc
10061b98:	b003      	add	sp, #12
10061b9a:	bdb0      	pop	{r4, r5, r7, pc}

10061b9c <__arm_cp.6_0>:
10061b9c:	0000ff82 	.word	0x0000ff82

10061ba0 <aci_att_clt_read_by_type_resp_event_cb>:
10061ba0:	b5b0      	push	{r4, r5, r7, lr}
10061ba2:	b0ff      	sub	sp, #508	@ 0x1fc
10061ba4:	b083      	sub	sp, #12
10061ba6:	460c      	mov	r4, r1
10061ba8:	4605      	mov	r5, r0
10061baa:	688b      	ldr	r3, [r1, #8]
10061bac:	88ca      	ldrh	r2, [r1, #6]
10061bae:	8889      	ldrh	r1, [r1, #4]
10061bb0:	4668      	mov	r0, sp
10061bb2:	1d80      	adds	r0, r0, #6
10061bb4:	f7f2 fba3 	bl	100542fe <aci_att_clt_read_by_type_resp_event_copy>
10061bb8:	0728      	lsls	r0, r5, #28
10061bba:	d502      	bpl.n	10061bc2 <aci_att_clt_read_by_type_resp_event_cb+0x22>
10061bbc:	68a0      	ldr	r0, [r4, #8]
10061bbe:	f7f1 fe03 	bl	100537c8 <ACL_pkt_release>
10061bc2:	4668      	mov	r0, sp
10061bc4:	7ac1      	ldrb	r1, [r0, #11]
10061bc6:	9a03      	ldr	r2, [sp, #12]
10061bc8:	0212      	lsls	r2, r2, #8
10061bca:	1851      	adds	r1, r2, r1
10061bcc:	460a      	mov	r2, r1
10061bce:	3209      	adds	r2, #9
10061bd0:	7082      	strb	r2, [r0, #2]
10061bd2:	0a12      	lsrs	r2, r2, #8
10061bd4:	70c2      	strb	r2, [r0, #3]
10061bd6:	2206      	movs	r2, #6
10061bd8:	7102      	strb	r2, [r0, #4]
10061bda:	4a05      	ldr	r2, [pc, #20]	@ (10061bf0 <__arm_cp.7_0>)
10061bdc:	8002      	strh	r2, [r0, #0]
10061bde:	220c      	movs	r2, #12
10061be0:	7142      	strb	r2, [r0, #5]
10061be2:	310d      	adds	r1, #13
10061be4:	b289      	uxth	r1, r1
10061be6:	f7eb fc25 	bl	1004d434 <BLE_STACK_Event>
10061bea:	b07f      	add	sp, #508	@ 0x1fc
10061bec:	b003      	add	sp, #12
10061bee:	bdb0      	pop	{r4, r5, r7, pc}

10061bf0 <__arm_cp.7_0>:
10061bf0:	0000ff82 	.word	0x0000ff82

10061bf4 <aci_att_clt_read_resp_event_cb>:
10061bf4:	b5b0      	push	{r4, r5, r7, lr}
10061bf6:	b0ff      	sub	sp, #508	@ 0x1fc
10061bf8:	b083      	sub	sp, #12
10061bfa:	460c      	mov	r4, r1
10061bfc:	4605      	mov	r5, r0
10061bfe:	688b      	ldr	r3, [r1, #8]
10061c00:	88ca      	ldrh	r2, [r1, #6]
10061c02:	8889      	ldrh	r1, [r1, #4]
10061c04:	4668      	mov	r0, sp
10061c06:	1d80      	adds	r0, r0, #6
10061c08:	f7f2 fb97 	bl	1005433a <aci_att_clt_read_resp_event_copy>
10061c0c:	0728      	lsls	r0, r5, #28
10061c0e:	d502      	bpl.n	10061c16 <aci_att_clt_read_resp_event_cb+0x22>
10061c10:	68a0      	ldr	r0, [r4, #8]
10061c12:	f7f1 fdd9 	bl	100537c8 <ACL_pkt_release>
10061c16:	4668      	mov	r0, sp
10061c18:	8941      	ldrh	r1, [r0, #10]
10061c1a:	460a      	mov	r2, r1
10061c1c:	3208      	adds	r2, #8
10061c1e:	7082      	strb	r2, [r0, #2]
10061c20:	0a12      	lsrs	r2, r2, #8
10061c22:	70c2      	strb	r2, [r0, #3]
10061c24:	2207      	movs	r2, #7
10061c26:	7102      	strb	r2, [r0, #4]
10061c28:	4a05      	ldr	r2, [pc, #20]	@ (10061c40 <__arm_cp.8_0>)
10061c2a:	8002      	strh	r2, [r0, #0]
10061c2c:	220c      	movs	r2, #12
10061c2e:	7142      	strb	r2, [r0, #5]
10061c30:	310c      	adds	r1, #12
10061c32:	b289      	uxth	r1, r1
10061c34:	f7eb fbfe 	bl	1004d434 <BLE_STACK_Event>
10061c38:	b07f      	add	sp, #508	@ 0x1fc
10061c3a:	b003      	add	sp, #12
10061c3c:	bdb0      	pop	{r4, r5, r7, pc}
10061c3e:	46c0      	nop			@ (mov r8, r8)

10061c40 <__arm_cp.8_0>:
10061c40:	0000ff82 	.word	0x0000ff82

10061c44 <aci_att_clt_read_blob_resp_event_cb>:
10061c44:	b5b0      	push	{r4, r5, r7, lr}
10061c46:	b0ff      	sub	sp, #508	@ 0x1fc
10061c48:	b083      	sub	sp, #12
10061c4a:	460c      	mov	r4, r1
10061c4c:	4605      	mov	r5, r0
10061c4e:	688b      	ldr	r3, [r1, #8]
10061c50:	88ca      	ldrh	r2, [r1, #6]
10061c52:	8889      	ldrh	r1, [r1, #4]
10061c54:	4668      	mov	r0, sp
10061c56:	1d80      	adds	r0, r0, #6
10061c58:	f7f2 fb85 	bl	10054366 <aci_att_clt_read_blob_resp_event_copy>
10061c5c:	0728      	lsls	r0, r5, #28
10061c5e:	d502      	bpl.n	10061c66 <aci_att_clt_read_blob_resp_event_cb+0x22>
10061c60:	68a0      	ldr	r0, [r4, #8]
10061c62:	f7f1 fdb1 	bl	100537c8 <ACL_pkt_release>
10061c66:	4668      	mov	r0, sp
10061c68:	8941      	ldrh	r1, [r0, #10]
10061c6a:	460a      	mov	r2, r1
10061c6c:	3208      	adds	r2, #8
10061c6e:	7082      	strb	r2, [r0, #2]
10061c70:	0a12      	lsrs	r2, r2, #8
10061c72:	70c2      	strb	r2, [r0, #3]
10061c74:	2208      	movs	r2, #8
10061c76:	7102      	strb	r2, [r0, #4]
10061c78:	4a05      	ldr	r2, [pc, #20]	@ (10061c90 <__arm_cp.9_0>)
10061c7a:	8002      	strh	r2, [r0, #0]
10061c7c:	220c      	movs	r2, #12
10061c7e:	7142      	strb	r2, [r0, #5]
10061c80:	310c      	adds	r1, #12
10061c82:	b289      	uxth	r1, r1
10061c84:	f7eb fbd6 	bl	1004d434 <BLE_STACK_Event>
10061c88:	b07f      	add	sp, #508	@ 0x1fc
10061c8a:	b003      	add	sp, #12
10061c8c:	bdb0      	pop	{r4, r5, r7, pc}
10061c8e:	46c0      	nop			@ (mov r8, r8)

10061c90 <__arm_cp.9_0>:
10061c90:	0000ff82 	.word	0x0000ff82

10061c94 <aci_att_clt_read_multiple_resp_event_cb>:
10061c94:	b5b0      	push	{r4, r5, r7, lr}
10061c96:	b0ff      	sub	sp, #508	@ 0x1fc
10061c98:	b083      	sub	sp, #12
10061c9a:	460c      	mov	r4, r1
10061c9c:	4605      	mov	r5, r0
10061c9e:	688b      	ldr	r3, [r1, #8]
10061ca0:	88ca      	ldrh	r2, [r1, #6]
10061ca2:	8889      	ldrh	r1, [r1, #4]
10061ca4:	4668      	mov	r0, sp
10061ca6:	1d80      	adds	r0, r0, #6
10061ca8:	f7f2 fb73 	bl	10054392 <aci_att_clt_read_multiple_resp_event_copy>
10061cac:	0728      	lsls	r0, r5, #28
10061cae:	d502      	bpl.n	10061cb6 <aci_att_clt_read_multiple_resp_event_cb+0x22>
10061cb0:	68a0      	ldr	r0, [r4, #8]
10061cb2:	f7f1 fd89 	bl	100537c8 <ACL_pkt_release>
10061cb6:	4668      	mov	r0, sp
10061cb8:	8941      	ldrh	r1, [r0, #10]
10061cba:	460a      	mov	r2, r1
10061cbc:	3208      	adds	r2, #8
10061cbe:	7082      	strb	r2, [r0, #2]
10061cc0:	0a12      	lsrs	r2, r2, #8
10061cc2:	70c2      	strb	r2, [r0, #3]
10061cc4:	2209      	movs	r2, #9
10061cc6:	7102      	strb	r2, [r0, #4]
10061cc8:	4a05      	ldr	r2, [pc, #20]	@ (10061ce0 <__arm_cp.10_0>)
10061cca:	8002      	strh	r2, [r0, #0]
10061ccc:	220c      	movs	r2, #12
10061cce:	7142      	strb	r2, [r0, #5]
10061cd0:	310c      	adds	r1, #12
10061cd2:	b289      	uxth	r1, r1
10061cd4:	f7eb fbae 	bl	1004d434 <BLE_STACK_Event>
10061cd8:	b07f      	add	sp, #508	@ 0x1fc
10061cda:	b003      	add	sp, #12
10061cdc:	bdb0      	pop	{r4, r5, r7, pc}
10061cde:	46c0      	nop			@ (mov r8, r8)

10061ce0 <__arm_cp.10_0>:
10061ce0:	0000ff82 	.word	0x0000ff82

10061ce4 <aci_att_clt_read_by_group_type_resp_event_cb>:
10061ce4:	b5b0      	push	{r4, r5, r7, lr}
10061ce6:	b0ff      	sub	sp, #508	@ 0x1fc
10061ce8:	b083      	sub	sp, #12
10061cea:	460c      	mov	r4, r1
10061cec:	4605      	mov	r5, r0
10061cee:	688b      	ldr	r3, [r1, #8]
10061cf0:	88ca      	ldrh	r2, [r1, #6]
10061cf2:	8889      	ldrh	r1, [r1, #4]
10061cf4:	4668      	mov	r0, sp
10061cf6:	1d80      	adds	r0, r0, #6
10061cf8:	f7f2 fb61 	bl	100543be <aci_att_clt_read_by_group_type_resp_event_copy>
10061cfc:	0728      	lsls	r0, r5, #28
10061cfe:	d502      	bpl.n	10061d06 <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
10061d00:	68a0      	ldr	r0, [r4, #8]
10061d02:	f7f1 fd61 	bl	100537c8 <ACL_pkt_release>
10061d06:	4668      	mov	r0, sp
10061d08:	7ac1      	ldrb	r1, [r0, #11]
10061d0a:	9a03      	ldr	r2, [sp, #12]
10061d0c:	0212      	lsls	r2, r2, #8
10061d0e:	1851      	adds	r1, r2, r1
10061d10:	460a      	mov	r2, r1
10061d12:	3209      	adds	r2, #9
10061d14:	7082      	strb	r2, [r0, #2]
10061d16:	0a12      	lsrs	r2, r2, #8
10061d18:	70c2      	strb	r2, [r0, #3]
10061d1a:	220a      	movs	r2, #10
10061d1c:	7102      	strb	r2, [r0, #4]
10061d1e:	4a05      	ldr	r2, [pc, #20]	@ (10061d34 <__arm_cp.11_0>)
10061d20:	8002      	strh	r2, [r0, #0]
10061d22:	220c      	movs	r2, #12
10061d24:	7142      	strb	r2, [r0, #5]
10061d26:	310d      	adds	r1, #13
10061d28:	b289      	uxth	r1, r1
10061d2a:	f7eb fb83 	bl	1004d434 <BLE_STACK_Event>
10061d2e:	b07f      	add	sp, #508	@ 0x1fc
10061d30:	b003      	add	sp, #12
10061d32:	bdb0      	pop	{r4, r5, r7, pc}

10061d34 <__arm_cp.11_0>:
10061d34:	0000ff82 	.word	0x0000ff82

10061d38 <aci_att_clt_prepare_write_resp_event_cb>:
10061d38:	b5b0      	push	{r4, r5, r7, lr}
10061d3a:	b0ff      	sub	sp, #508	@ 0x1fc
10061d3c:	b083      	sub	sp, #12
10061d3e:	460c      	mov	r4, r1
10061d40:	4605      	mov	r5, r0
10061d42:	688b      	ldr	r3, [r1, #8]
10061d44:	88ca      	ldrh	r2, [r1, #6]
10061d46:	8889      	ldrh	r1, [r1, #4]
10061d48:	4668      	mov	r0, sp
10061d4a:	1d80      	adds	r0, r0, #6
10061d4c:	f7f2 fb55 	bl	100543fa <aci_att_clt_prepare_write_resp_event_copy>
10061d50:	0728      	lsls	r0, r5, #28
10061d52:	d502      	bpl.n	10061d5a <aci_att_clt_prepare_write_resp_event_cb+0x22>
10061d54:	68a0      	ldr	r0, [r4, #8]
10061d56:	f7f1 fd37 	bl	100537c8 <ACL_pkt_release>
10061d5a:	4668      	mov	r0, sp
10061d5c:	89c1      	ldrh	r1, [r0, #14]
10061d5e:	460a      	mov	r2, r1
10061d60:	320c      	adds	r2, #12
10061d62:	7082      	strb	r2, [r0, #2]
10061d64:	0a12      	lsrs	r2, r2, #8
10061d66:	70c2      	strb	r2, [r0, #3]
10061d68:	220c      	movs	r2, #12
10061d6a:	7102      	strb	r2, [r0, #4]
10061d6c:	4b04      	ldr	r3, [pc, #16]	@ (10061d80 <__arm_cp.12_0>)
10061d6e:	8003      	strh	r3, [r0, #0]
10061d70:	7142      	strb	r2, [r0, #5]
10061d72:	3110      	adds	r1, #16
10061d74:	b289      	uxth	r1, r1
10061d76:	f7eb fb5d 	bl	1004d434 <BLE_STACK_Event>
10061d7a:	b07f      	add	sp, #508	@ 0x1fc
10061d7c:	b003      	add	sp, #12
10061d7e:	bdb0      	pop	{r4, r5, r7, pc}

10061d80 <__arm_cp.12_0>:
10061d80:	0000ff82 	.word	0x0000ff82

10061d84 <aci_att_srv_prepare_write_req_event_cb>:
10061d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10061d86:	b0ff      	sub	sp, #508	@ 0x1fc
10061d88:	b086      	sub	sp, #24
10061d8a:	460c      	mov	r4, r1
10061d8c:	4605      	mov	r5, r0
10061d8e:	890b      	ldrh	r3, [r1, #8]
10061d90:	88ca      	ldrh	r2, [r1, #6]
10061d92:	8889      	ldrh	r1, [r1, #4]
10061d94:	8960      	ldrh	r0, [r4, #10]
10061d96:	89a6      	ldrh	r6, [r4, #12]
10061d98:	6927      	ldr	r7, [r4, #16]
10061d9a:	9000      	str	r0, [sp, #0]
10061d9c:	9601      	str	r6, [sp, #4]
10061d9e:	9702      	str	r7, [sp, #8]
10061da0:	a803      	add	r0, sp, #12
10061da2:	1d80      	adds	r0, r0, #6
10061da4:	f7f2 fbe2 	bl	1005456c <aci_att_srv_prepare_write_req_event_copy>
10061da8:	0728      	lsls	r0, r5, #28
10061daa:	d502      	bpl.n	10061db2 <aci_att_srv_prepare_write_req_event_cb+0x2e>
10061dac:	6920      	ldr	r0, [r4, #16]
10061dae:	f7f1 fd0b 	bl	100537c8 <ACL_pkt_release>
10061db2:	a803      	add	r0, sp, #12
10061db4:	89c1      	ldrh	r1, [r0, #14]
10061db6:	460a      	mov	r2, r1
10061db8:	320c      	adds	r2, #12
10061dba:	7082      	strb	r2, [r0, #2]
10061dbc:	0a12      	lsrs	r2, r2, #8
10061dbe:	70c2      	strb	r2, [r0, #3]
10061dc0:	221b      	movs	r2, #27
10061dc2:	7102      	strb	r2, [r0, #4]
10061dc4:	4a05      	ldr	r2, [pc, #20]	@ (10061ddc <__arm_cp.13_0>)
10061dc6:	8002      	strh	r2, [r0, #0]
10061dc8:	220c      	movs	r2, #12
10061dca:	7142      	strb	r2, [r0, #5]
10061dcc:	3110      	adds	r1, #16
10061dce:	b289      	uxth	r1, r1
10061dd0:	f7eb fb30 	bl	1004d434 <BLE_STACK_Event>
10061dd4:	b07f      	add	sp, #508	@ 0x1fc
10061dd6:	b006      	add	sp, #24
10061dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061dda:	46c0      	nop			@ (mov r8, r8)

10061ddc <__arm_cp.13_0>:
10061ddc:	0000ff82 	.word	0x0000ff82

10061de0 <aci_att_clt_read_multiple_var_len_resp_event_cb>:
10061de0:	b5b0      	push	{r4, r5, r7, lr}
10061de2:	b0ff      	sub	sp, #508	@ 0x1fc
10061de4:	b083      	sub	sp, #12
10061de6:	460c      	mov	r4, r1
10061de8:	4605      	mov	r5, r0
10061dea:	688b      	ldr	r3, [r1, #8]
10061dec:	88ca      	ldrh	r2, [r1, #6]
10061dee:	8889      	ldrh	r1, [r1, #4]
10061df0:	4668      	mov	r0, sp
10061df2:	1d80      	adds	r0, r0, #6
10061df4:	f7f2 fbed 	bl	100545d2 <aci_att_clt_read_multiple_var_len_resp_event_copy>
10061df8:	0728      	lsls	r0, r5, #28
10061dfa:	d502      	bpl.n	10061e02 <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
10061dfc:	68a0      	ldr	r0, [r4, #8]
10061dfe:	f7f1 fce3 	bl	100537c8 <ACL_pkt_release>
10061e02:	4668      	mov	r0, sp
10061e04:	8941      	ldrh	r1, [r0, #10]
10061e06:	460a      	mov	r2, r1
10061e08:	3208      	adds	r2, #8
10061e0a:	7082      	strb	r2, [r0, #2]
10061e0c:	0a12      	lsrs	r2, r2, #8
10061e0e:	70c2      	strb	r2, [r0, #3]
10061e10:	221e      	movs	r2, #30
10061e12:	7102      	strb	r2, [r0, #4]
10061e14:	4a05      	ldr	r2, [pc, #20]	@ (10061e2c <__arm_cp.14_0>)
10061e16:	8002      	strh	r2, [r0, #0]
10061e18:	220c      	movs	r2, #12
10061e1a:	7142      	strb	r2, [r0, #5]
10061e1c:	310c      	adds	r1, #12
10061e1e:	b289      	uxth	r1, r1
10061e20:	f7eb fb08 	bl	1004d434 <BLE_STACK_Event>
10061e24:	b07f      	add	sp, #508	@ 0x1fc
10061e26:	b003      	add	sp, #12
10061e28:	bdb0      	pop	{r4, r5, r7, pc}
10061e2a:	46c0      	nop			@ (mov r8, r8)

10061e2c <__arm_cp.14_0>:
10061e2c:	0000ff82 	.word	0x0000ff82

10061e30 <aci_gatt_srv_attribute_modified_event_push_noinline>:
10061e30:	b5f0      	push	{r4, r5, r6, r7, lr}
10061e32:	b085      	sub	sp, #20
10061e34:	4605      	mov	r5, r0
10061e36:	06c0      	lsls	r0, r0, #27
10061e38:	d445      	bmi.n	10061ec6 <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
10061e3a:	4826      	ldr	r0, [pc, #152]	@ (10061ed4 <__arm_cp.15_0>)
10061e3c:	6800      	ldr	r0, [r0, #0]
10061e3e:	2450      	movs	r4, #80	@ 0x50
10061e40:	5d00      	ldrb	r0, [r0, r4]
10061e42:	2400      	movs	r4, #0
10061e44:	07c0      	lsls	r0, r0, #31
10061e46:	d03f      	beq.n	10061ec8 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10061e48:	9302      	str	r3, [sp, #8]
10061e4a:	9203      	str	r2, [sp, #12]
10061e4c:	9104      	str	r1, [sp, #16]
10061e4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10061e50:	4821      	ldr	r0, [pc, #132]	@ (10061ed8 <__arm_cp.15_1>)
10061e52:	6800      	ldr	r0, [r0, #0]
10061e54:	0769      	lsls	r1, r5, #29
10061e56:	0ec9      	lsrs	r1, r1, #27
10061e58:	1840      	adds	r0, r0, r1
10061e5a:	6900      	ldr	r0, [r0, #16]
10061e5c:	1e71      	subs	r1, r6, #1
10061e5e:	2203      	movs	r2, #3
10061e60:	430a      	orrs	r2, r1
10061e62:	3211      	adds	r2, #17
10061e64:	0891      	lsrs	r1, r2, #2
10061e66:	b28b      	uxth	r3, r1
10061e68:	2256      	movs	r2, #86	@ 0x56
10061e6a:	4629      	mov	r1, r5
10061e6c:	f7f1 fe60 	bl	10053b30 <aci_event_fifo_push_header>
10061e70:	2800      	cmp	r0, #0
10061e72:	d02c      	beq.n	10061ece <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10061e74:	4607      	mov	r7, r0
10061e76:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10061e78:	9001      	str	r0, [sp, #4]
10061e7a:	743e      	strb	r6, [r7, #16]
10061e7c:	9902      	ldr	r1, [sp, #8]
10061e7e:	73b9      	strb	r1, [r7, #14]
10061e80:	9b03      	ldr	r3, [sp, #12]
10061e82:	733b      	strb	r3, [r7, #12]
10061e84:	9a04      	ldr	r2, [sp, #16]
10061e86:	72ba      	strb	r2, [r7, #10]
10061e88:	0a30      	lsrs	r0, r6, #8
10061e8a:	7478      	strb	r0, [r7, #17]
10061e8c:	0a08      	lsrs	r0, r1, #8
10061e8e:	73f8      	strb	r0, [r7, #15]
10061e90:	0a18      	lsrs	r0, r3, #8
10061e92:	7378      	strb	r0, [r7, #13]
10061e94:	0a10      	lsrs	r0, r2, #8
10061e96:	72f8      	strb	r0, [r7, #11]
10061e98:	4638      	mov	r0, r7
10061e9a:	3012      	adds	r0, #18
10061e9c:	9901      	ldr	r1, [sp, #4]
10061e9e:	4632      	mov	r2, r6
10061ea0:	f7ef f8fa 	bl	10051098 <BLEPLAT_MemCpy>
10061ea4:	200c      	movs	r0, #12
10061ea6:	7278      	strb	r0, [r7, #9]
10061ea8:	2001      	movs	r0, #1
10061eaa:	7238      	strb	r0, [r7, #8]
10061eac:	360a      	adds	r6, #10
10061eae:	0a30      	lsrs	r0, r6, #8
10061eb0:	71f8      	strb	r0, [r7, #7]
10061eb2:	71be      	strb	r6, [r7, #6]
10061eb4:	20ff      	movs	r0, #255	@ 0xff
10061eb6:	7178      	strb	r0, [r7, #5]
10061eb8:	2082      	movs	r0, #130	@ 0x82
10061eba:	7138      	strb	r0, [r7, #4]
10061ebc:	4628      	mov	r0, r5
10061ebe:	4639      	mov	r1, r7
10061ec0:	f7f1 fed3 	bl	10053c6a <aci_event_fifo_push>
10061ec4:	e000      	b.n	10061ec8 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10061ec6:	2486      	movs	r4, #134	@ 0x86
10061ec8:	4620      	mov	r0, r4
10061eca:	b005      	add	sp, #20
10061ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061ece:	2407      	movs	r4, #7
10061ed0:	e7fa      	b.n	10061ec8 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10061ed2:	46c0      	nop			@ (mov r8, r8)

10061ed4 <__arm_cp.15_0>:
10061ed4:	20002468 	.word	0x20002468

10061ed8 <__arm_cp.15_1>:
10061ed8:	20002418 	.word	0x20002418

10061edc <aci_gatt_proc_timeout_event_push_noinline>:
10061edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061ede:	4604      	mov	r4, r0
10061ee0:	06c0      	lsls	r0, r0, #27
10061ee2:	d408      	bmi.n	10061ef6 <aci_gatt_proc_timeout_event_push_noinline+0x1a>
10061ee4:	460d      	mov	r5, r1
10061ee6:	4819      	ldr	r0, [pc, #100]	@ (10061f4c <__arm_cp.16_0>)
10061ee8:	6800      	ldr	r0, [r0, #0]
10061eea:	2150      	movs	r1, #80	@ 0x50
10061eec:	5c40      	ldrb	r0, [r0, r1]
10061eee:	0780      	lsls	r0, r0, #30
10061ef0:	d403      	bmi.n	10061efa <aci_gatt_proc_timeout_event_push_noinline+0x1e>
10061ef2:	2700      	movs	r7, #0
10061ef4:	e027      	b.n	10061f46 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10061ef6:	2786      	movs	r7, #134	@ 0x86
10061ef8:	e025      	b.n	10061f46 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10061efa:	4616      	mov	r6, r2
10061efc:	4814      	ldr	r0, [pc, #80]	@ (10061f50 <__arm_cp.16_1>)
10061efe:	6800      	ldr	r0, [r0, #0]
10061f00:	0761      	lsls	r1, r4, #29
10061f02:	0ec9      	lsrs	r1, r1, #27
10061f04:	1840      	adds	r0, r0, r1
10061f06:	6900      	ldr	r0, [r0, #16]
10061f08:	2257      	movs	r2, #87	@ 0x57
10061f0a:	2303      	movs	r3, #3
10061f0c:	4621      	mov	r1, r4
10061f0e:	f7f1 fe0f 	bl	10053b30 <aci_event_fifo_push_header>
10061f12:	2800      	cmp	r0, #0
10061f14:	d016      	beq.n	10061f44 <aci_gatt_proc_timeout_event_push_noinline+0x68>
10061f16:	4601      	mov	r1, r0
10061f18:	7306      	strb	r6, [r0, #12]
10061f1a:	7285      	strb	r5, [r0, #10]
10061f1c:	200c      	movs	r0, #12
10061f1e:	7248      	strb	r0, [r1, #9]
10061f20:	2002      	movs	r0, #2
10061f22:	7208      	strb	r0, [r1, #8]
10061f24:	2700      	movs	r7, #0
10061f26:	71cf      	strb	r7, [r1, #7]
10061f28:	2006      	movs	r0, #6
10061f2a:	7188      	strb	r0, [r1, #6]
10061f2c:	20ff      	movs	r0, #255	@ 0xff
10061f2e:	7148      	strb	r0, [r1, #5]
10061f30:	2082      	movs	r0, #130	@ 0x82
10061f32:	7108      	strb	r0, [r1, #4]
10061f34:	0a30      	lsrs	r0, r6, #8
10061f36:	7348      	strb	r0, [r1, #13]
10061f38:	0a28      	lsrs	r0, r5, #8
10061f3a:	72c8      	strb	r0, [r1, #11]
10061f3c:	4620      	mov	r0, r4
10061f3e:	f7f1 fe94 	bl	10053c6a <aci_event_fifo_push>
10061f42:	e000      	b.n	10061f46 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10061f44:	2707      	movs	r7, #7
10061f46:	4638      	mov	r0, r7
10061f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061f4a:	46c0      	nop			@ (mov r8, r8)

10061f4c <__arm_cp.16_0>:
10061f4c:	20002468 	.word	0x20002468

10061f50 <__arm_cp.16_1>:
10061f50:	20002418 	.word	0x20002418

10061f54 <aci_gatt_clt_indication_event_push_noinline>:
10061f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061f56:	4605      	mov	r5, r0
10061f58:	06c0      	lsls	r0, r0, #27
10061f5a:	d421      	bmi.n	10061fa0 <aci_gatt_clt_indication_event_push_noinline+0x4c>
10061f5c:	460e      	mov	r6, r1
10061f5e:	4813      	ldr	r0, [pc, #76]	@ (10061fac <__arm_cp.17_0>)
10061f60:	6800      	ldr	r0, [r0, #0]
10061f62:	2151      	movs	r1, #81	@ 0x51
10061f64:	5c40      	ldrb	r0, [r0, r1]
10061f66:	2400      	movs	r4, #0
10061f68:	0680      	lsls	r0, r0, #26
10061f6a:	d51a      	bpl.n	10061fa2 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10061f6c:	4617      	mov	r7, r2
10061f6e:	9300      	str	r3, [sp, #0]
10061f70:	480f      	ldr	r0, [pc, #60]	@ (10061fb0 <__arm_cp.17_1>)
10061f72:	6800      	ldr	r0, [r0, #0]
10061f74:	0769      	lsls	r1, r5, #29
10061f76:	0ec9      	lsrs	r1, r1, #27
10061f78:	1840      	adds	r0, r0, r1
10061f7a:	6900      	ldr	r0, [r0, #16]
10061f7c:	220f      	movs	r2, #15
10061f7e:	2303      	movs	r3, #3
10061f80:	4629      	mov	r1, r5
10061f82:	f7f1 fdd5 	bl	10053b30 <aci_event_fifo_push_header>
10061f86:	2800      	cmp	r0, #0
10061f88:	d00d      	beq.n	10061fa6 <aci_gatt_clt_indication_event_push_noinline+0x52>
10061f8a:	4601      	mov	r1, r0
10061f8c:	9800      	ldr	r0, [sp, #0]
10061f8e:	60c8      	str	r0, [r1, #12]
10061f90:	814f      	strh	r7, [r1, #10]
10061f92:	810e      	strh	r6, [r1, #8]
10061f94:	4807      	ldr	r0, [pc, #28]	@ (10061fb4 <__arm_cp.17_2>)
10061f96:	6048      	str	r0, [r1, #4]
10061f98:	4628      	mov	r0, r5
10061f9a:	f7f1 fe66 	bl	10053c6a <aci_event_fifo_push>
10061f9e:	e000      	b.n	10061fa2 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10061fa0:	2486      	movs	r4, #134	@ 0x86
10061fa2:	4620      	mov	r0, r4
10061fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061fa6:	2407      	movs	r4, #7
10061fa8:	e7fb      	b.n	10061fa2 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10061faa:	46c0      	nop			@ (mov r8, r8)

10061fac <__arm_cp.17_0>:
10061fac:	20002468 	.word	0x20002468

10061fb0 <__arm_cp.17_1>:
10061fb0:	20002418 	.word	0x20002418

10061fb4 <__arm_cp.17_2>:
10061fb4:	10061995 	.word	0x10061995

10061fb8 <aci_gatt_clt_notification_event_push_noinline>:
10061fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061fba:	4605      	mov	r5, r0
10061fbc:	06c0      	lsls	r0, r0, #27
10061fbe:	d421      	bmi.n	10062004 <aci_gatt_clt_notification_event_push_noinline+0x4c>
10061fc0:	460e      	mov	r6, r1
10061fc2:	4813      	ldr	r0, [pc, #76]	@ (10062010 <__arm_cp.18_0>)
10061fc4:	6800      	ldr	r0, [r0, #0]
10061fc6:	2151      	movs	r1, #81	@ 0x51
10061fc8:	5c40      	ldrb	r0, [r0, r1]
10061fca:	2400      	movs	r4, #0
10061fcc:	0640      	lsls	r0, r0, #25
10061fce:	d51a      	bpl.n	10062006 <aci_gatt_clt_notification_event_push_noinline+0x4e>
10061fd0:	4617      	mov	r7, r2
10061fd2:	9300      	str	r3, [sp, #0]
10061fd4:	480f      	ldr	r0, [pc, #60]	@ (10062014 <__arm_cp.18_1>)
10061fd6:	6800      	ldr	r0, [r0, #0]
10061fd8:	0769      	lsls	r1, r5, #29
10061fda:	0ec9      	lsrs	r1, r1, #27
10061fdc:	1840      	adds	r0, r0, r1
10061fde:	6900      	ldr	r0, [r0, #16]
10061fe0:	2210      	movs	r2, #16
10061fe2:	2303      	movs	r3, #3
10061fe4:	4629      	mov	r1, r5
10061fe6:	f7f1 fda3 	bl	10053b30 <aci_event_fifo_push_header>
10061fea:	2800      	cmp	r0, #0
10061fec:	d00d      	beq.n	1006200a <aci_gatt_clt_notification_event_push_noinline+0x52>
10061fee:	4601      	mov	r1, r0
10061ff0:	9800      	ldr	r0, [sp, #0]
10061ff2:	60c8      	str	r0, [r1, #12]
10061ff4:	814f      	strh	r7, [r1, #10]
10061ff6:	810e      	strh	r6, [r1, #8]
10061ff8:	4807      	ldr	r0, [pc, #28]	@ (10062018 <__arm_cp.18_2>)
10061ffa:	6048      	str	r0, [r1, #4]
10061ffc:	4628      	mov	r0, r5
10061ffe:	f7f1 fe34 	bl	10053c6a <aci_event_fifo_push>
10062002:	e000      	b.n	10062006 <aci_gatt_clt_notification_event_push_noinline+0x4e>
10062004:	2486      	movs	r4, #134	@ 0x86
10062006:	4620      	mov	r0, r4
10062008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006200a:	2407      	movs	r4, #7
1006200c:	e7fb      	b.n	10062006 <aci_gatt_clt_notification_event_push_noinline+0x4e>
1006200e:	46c0      	nop			@ (mov r8, r8)

10062010 <__arm_cp.18_0>:
10062010:	20002468 	.word	0x20002468

10062014 <__arm_cp.18_1>:
10062014:	20002418 	.word	0x20002418

10062018 <__arm_cp.18_2>:
10062018:	100619e5 	.word	0x100619e5

1006201c <aci_gatt_clt_error_resp_event_push_noinline>:
1006201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006201e:	4604      	mov	r4, r0
10062020:	06c0      	lsls	r0, r0, #27
10062022:	d408      	bmi.n	10062036 <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
10062024:	460d      	mov	r5, r1
10062026:	481e      	ldr	r0, [pc, #120]	@ (100620a0 <__arm_cp.20_0>)
10062028:	6800      	ldr	r0, [r0, #0]
1006202a:	2151      	movs	r1, #81	@ 0x51
1006202c:	5640      	ldrsb	r0, [r0, r1]
1006202e:	2800      	cmp	r0, #0
10062030:	d404      	bmi.n	1006203c <aci_gatt_clt_error_resp_event_push_noinline+0x20>
10062032:	2700      	movs	r7, #0
10062034:	e000      	b.n	10062038 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10062036:	2786      	movs	r7, #134	@ 0x86
10062038:	4638      	mov	r0, r7
1006203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006203c:	461f      	mov	r7, r3
1006203e:	4616      	mov	r6, r2
10062040:	4818      	ldr	r0, [pc, #96]	@ (100620a4 <__arm_cp.20_1>)
10062042:	6800      	ldr	r0, [r0, #0]
10062044:	0761      	lsls	r1, r4, #29
10062046:	0ec9      	lsrs	r1, r1, #27
10062048:	1840      	adds	r0, r0, r1
1006204a:	6900      	ldr	r0, [r0, #16]
1006204c:	225b      	movs	r2, #91	@ 0x5b
1006204e:	2304      	movs	r3, #4
10062050:	4621      	mov	r1, r4
10062052:	f7f1 fd6d 	bl	10053b30 <aci_event_fifo_push_header>
10062056:	2800      	cmp	r0, #0
10062058:	d020      	beq.n	1006209c <aci_gatt_clt_error_resp_event_push_noinline+0x80>
1006205a:	4601      	mov	r1, r0
1006205c:	9a07      	ldr	r2, [sp, #28]
1006205e:	9806      	ldr	r0, [sp, #24]
10062060:	9000      	str	r0, [sp, #0]
10062062:	73c8      	strb	r0, [r1, #15]
10062064:	730e      	strb	r6, [r1, #12]
10062066:	728d      	strb	r5, [r1, #10]
10062068:	230c      	movs	r3, #12
1006206a:	724b      	strb	r3, [r1, #9]
1006206c:	2311      	movs	r3, #17
1006206e:	720b      	strb	r3, [r1, #8]
10062070:	4638      	mov	r0, r7
10062072:	2700      	movs	r7, #0
10062074:	71cf      	strb	r7, [r1, #7]
10062076:	230a      	movs	r3, #10
10062078:	718b      	strb	r3, [r1, #6]
1006207a:	744a      	strb	r2, [r1, #17]
1006207c:	7388      	strb	r0, [r1, #14]
1006207e:	22ff      	movs	r2, #255	@ 0xff
10062080:	714a      	strb	r2, [r1, #5]
10062082:	2282      	movs	r2, #130	@ 0x82
10062084:	710a      	strb	r2, [r1, #4]
10062086:	9800      	ldr	r0, [sp, #0]
10062088:	0a00      	lsrs	r0, r0, #8
1006208a:	7408      	strb	r0, [r1, #16]
1006208c:	0a30      	lsrs	r0, r6, #8
1006208e:	7348      	strb	r0, [r1, #13]
10062090:	0a28      	lsrs	r0, r5, #8
10062092:	72c8      	strb	r0, [r1, #11]
10062094:	4620      	mov	r0, r4
10062096:	f7f1 fde8 	bl	10053c6a <aci_event_fifo_push>
1006209a:	e7cd      	b.n	10062038 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
1006209c:	2707      	movs	r7, #7
1006209e:	e7cb      	b.n	10062038 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

100620a0 <__arm_cp.20_0>:
100620a0:	20002468 	.word	0x20002468

100620a4 <__arm_cp.20_1>:
100620a4:	20002418 	.word	0x20002418

100620a8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
100620a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100620aa:	b087      	sub	sp, #28
100620ac:	4605      	mov	r5, r0
100620ae:	06c0      	lsls	r0, r0, #27
100620b0:	d443      	bmi.n	1006213a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
100620b2:	460e      	mov	r6, r1
100620b4:	4824      	ldr	r0, [pc, #144]	@ (10062148 <__arm_cp.21_0>)
100620b6:	6800      	ldr	r0, [r0, #0]
100620b8:	2152      	movs	r1, #82	@ 0x52
100620ba:	5c40      	ldrb	r0, [r0, r1]
100620bc:	2400      	movs	r4, #0
100620be:	0780      	lsls	r0, r0, #30
100620c0:	d53c      	bpl.n	1006213c <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100620c2:	9204      	str	r2, [sp, #16]
100620c4:	9305      	str	r3, [sp, #20]
100620c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100620c8:	4820      	ldr	r0, [pc, #128]	@ (1006214c <__arm_cp.21_1>)
100620ca:	6800      	ldr	r0, [r0, #0]
100620cc:	0769      	lsls	r1, r5, #29
100620ce:	0ec9      	lsrs	r1, r1, #27
100620d0:	1840      	adds	r0, r0, r1
100620d2:	6900      	ldr	r0, [r0, #16]
100620d4:	491e      	ldr	r1, [pc, #120]	@ (10062150 <__arm_cp.21_2>)
100620d6:	9206      	str	r2, [sp, #24]
100620d8:	1851      	adds	r1, r2, r1
100620da:	2203      	movs	r2, #3
100620dc:	430a      	orrs	r2, r1
100620de:	3211      	adds	r2, #17
100620e0:	0891      	lsrs	r1, r2, #2
100620e2:	b28b      	uxth	r3, r1
100620e4:	225c      	movs	r2, #92	@ 0x5c
100620e6:	4629      	mov	r1, r5
100620e8:	f7f1 fd22 	bl	10053b30 <aci_event_fifo_push_header>
100620ec:	2800      	cmp	r0, #0
100620ee:	d028      	beq.n	10062142 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
100620f0:	4607      	mov	r7, r0
100620f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
100620f4:	9806      	ldr	r0, [sp, #24]
100620f6:	9000      	str	r0, [sp, #0]
100620f8:	9103      	str	r1, [sp, #12]
100620fa:	9101      	str	r1, [sp, #4]
100620fc:	1d38      	adds	r0, r7, #4
100620fe:	4631      	mov	r1, r6
10062100:	9a04      	ldr	r2, [sp, #16]
10062102:	9b05      	ldr	r3, [sp, #20]
10062104:	f7f2 f9f3 	bl	100544ee <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
10062108:	0728      	lsls	r0, r5, #28
1006210a:	d504      	bpl.n	10062116 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
1006210c:	9803      	ldr	r0, [sp, #12]
1006210e:	f7f1 fb5b 	bl	100537c8 <ACL_pkt_release>
10062112:	20f7      	movs	r0, #247	@ 0xf7
10062114:	4005      	ands	r5, r0
10062116:	200c      	movs	r0, #12
10062118:	7278      	strb	r0, [r7, #9]
1006211a:	2012      	movs	r0, #18
1006211c:	7238      	strb	r0, [r7, #8]
1006211e:	20ff      	movs	r0, #255	@ 0xff
10062120:	7178      	strb	r0, [r7, #5]
10062122:	2082      	movs	r0, #130	@ 0x82
10062124:	7138      	strb	r0, [r7, #4]
10062126:	9806      	ldr	r0, [sp, #24]
10062128:	1dc0      	adds	r0, r0, #7
1006212a:	71b8      	strb	r0, [r7, #6]
1006212c:	0a00      	lsrs	r0, r0, #8
1006212e:	71f8      	strb	r0, [r7, #7]
10062130:	4628      	mov	r0, r5
10062132:	4639      	mov	r1, r7
10062134:	f7f1 fd99 	bl	10053c6a <aci_event_fifo_push>
10062138:	e000      	b.n	1006213c <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006213a:	2486      	movs	r4, #134	@ 0x86
1006213c:	4620      	mov	r0, r4
1006213e:	b007      	add	sp, #28
10062140:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062142:	2407      	movs	r4, #7
10062144:	e7fa      	b.n	1006213c <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10062146:	46c0      	nop			@ (mov r8, r8)

10062148 <__arm_cp.21_0>:
10062148:	20002468 	.word	0x20002468

1006214c <__arm_cp.21_1>:
1006214c:	20002418 	.word	0x20002418

10062150 <__arm_cp.21_2>:
10062150:	0003fffd 	.word	0x0003fffd

10062154 <aci_gatt_tx_pool_available_event_push_noinline>:
10062154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062156:	4604      	mov	r4, r0
10062158:	06c0      	lsls	r0, r0, #27
1006215a:	d425      	bmi.n	100621a8 <aci_gatt_tx_pool_available_event_push_noinline+0x54>
1006215c:	4616      	mov	r6, r2
1006215e:	460d      	mov	r5, r1
10062160:	4814      	ldr	r0, [pc, #80]	@ (100621b4 <__arm_cp.22_0>)
10062162:	6800      	ldr	r0, [r0, #0]
10062164:	0761      	lsls	r1, r4, #29
10062166:	0ec9      	lsrs	r1, r1, #27
10062168:	1840      	adds	r0, r0, r1
1006216a:	6900      	ldr	r0, [r0, #16]
1006216c:	225d      	movs	r2, #93	@ 0x5d
1006216e:	2303      	movs	r3, #3
10062170:	4621      	mov	r1, r4
10062172:	f7f1 fcdd 	bl	10053b30 <aci_event_fifo_push_header>
10062176:	2800      	cmp	r0, #0
10062178:	d018      	beq.n	100621ac <aci_gatt_tx_pool_available_event_push_noinline+0x58>
1006217a:	4601      	mov	r1, r0
1006217c:	7306      	strb	r6, [r0, #12]
1006217e:	7285      	strb	r5, [r0, #10]
10062180:	200c      	movs	r0, #12
10062182:	7248      	strb	r0, [r1, #9]
10062184:	2016      	movs	r0, #22
10062186:	7208      	strb	r0, [r1, #8]
10062188:	2700      	movs	r7, #0
1006218a:	71cf      	strb	r7, [r1, #7]
1006218c:	2006      	movs	r0, #6
1006218e:	7188      	strb	r0, [r1, #6]
10062190:	20ff      	movs	r0, #255	@ 0xff
10062192:	7148      	strb	r0, [r1, #5]
10062194:	2082      	movs	r0, #130	@ 0x82
10062196:	7108      	strb	r0, [r1, #4]
10062198:	0a30      	lsrs	r0, r6, #8
1006219a:	7348      	strb	r0, [r1, #13]
1006219c:	0a28      	lsrs	r0, r5, #8
1006219e:	72c8      	strb	r0, [r1, #11]
100621a0:	4620      	mov	r0, r4
100621a2:	f7f1 fd62 	bl	10053c6a <aci_event_fifo_push>
100621a6:	e002      	b.n	100621ae <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
100621a8:	2786      	movs	r7, #134	@ 0x86
100621aa:	e000      	b.n	100621ae <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
100621ac:	2707      	movs	r7, #7
100621ae:	4638      	mov	r0, r7
100621b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100621b2:	46c0      	nop			@ (mov r8, r8)

100621b4 <__arm_cp.22_0>:
100621b4:	20002418 	.word	0x20002418

100621b8 <aci_gatt_srv_confirmation_event_push_noinline>:
100621b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100621ba:	4604      	mov	r4, r0
100621bc:	06c0      	lsls	r0, r0, #27
100621be:	d425      	bmi.n	1006220c <aci_gatt_srv_confirmation_event_push_noinline+0x54>
100621c0:	4616      	mov	r6, r2
100621c2:	460d      	mov	r5, r1
100621c4:	4814      	ldr	r0, [pc, #80]	@ (10062218 <__arm_cp.23_0>)
100621c6:	6800      	ldr	r0, [r0, #0]
100621c8:	0761      	lsls	r1, r4, #29
100621ca:	0ec9      	lsrs	r1, r1, #27
100621cc:	1840      	adds	r0, r0, r1
100621ce:	6900      	ldr	r0, [r0, #16]
100621d0:	225e      	movs	r2, #94	@ 0x5e
100621d2:	2303      	movs	r3, #3
100621d4:	4621      	mov	r1, r4
100621d6:	f7f1 fcab 	bl	10053b30 <aci_event_fifo_push_header>
100621da:	2800      	cmp	r0, #0
100621dc:	d018      	beq.n	10062210 <aci_gatt_srv_confirmation_event_push_noinline+0x58>
100621de:	4601      	mov	r1, r0
100621e0:	7306      	strb	r6, [r0, #12]
100621e2:	7285      	strb	r5, [r0, #10]
100621e4:	200c      	movs	r0, #12
100621e6:	7248      	strb	r0, [r1, #9]
100621e8:	2017      	movs	r0, #23
100621ea:	7208      	strb	r0, [r1, #8]
100621ec:	2700      	movs	r7, #0
100621ee:	71cf      	strb	r7, [r1, #7]
100621f0:	2006      	movs	r0, #6
100621f2:	7188      	strb	r0, [r1, #6]
100621f4:	20ff      	movs	r0, #255	@ 0xff
100621f6:	7148      	strb	r0, [r1, #5]
100621f8:	2082      	movs	r0, #130	@ 0x82
100621fa:	7108      	strb	r0, [r1, #4]
100621fc:	0a30      	lsrs	r0, r6, #8
100621fe:	7348      	strb	r0, [r1, #13]
10062200:	0a28      	lsrs	r0, r5, #8
10062202:	72c8      	strb	r0, [r1, #11]
10062204:	4620      	mov	r0, r4
10062206:	f7f1 fd30 	bl	10053c6a <aci_event_fifo_push>
1006220a:	e002      	b.n	10062212 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
1006220c:	2786      	movs	r7, #134	@ 0x86
1006220e:	e000      	b.n	10062212 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10062210:	2707      	movs	r7, #7
10062212:	4638      	mov	r0, r7
10062214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062216:	46c0      	nop			@ (mov r8, r8)

10062218 <__arm_cp.23_0>:
10062218:	20002418 	.word	0x20002418

1006221c <aci_gatt_srv_read_event_push_noinline>:
1006221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006221e:	4604      	mov	r4, r0
10062220:	06c0      	lsls	r0, r0, #27
10062222:	d42e      	bmi.n	10062282 <aci_gatt_srv_read_event_push_noinline+0x66>
10062224:	461f      	mov	r7, r3
10062226:	4616      	mov	r6, r2
10062228:	460d      	mov	r5, r1
1006222a:	4818      	ldr	r0, [pc, #96]	@ (1006228c <__arm_cp.24_0>)
1006222c:	6800      	ldr	r0, [r0, #0]
1006222e:	0761      	lsls	r1, r4, #29
10062230:	0ec9      	lsrs	r1, r1, #27
10062232:	1840      	adds	r0, r0, r1
10062234:	6900      	ldr	r0, [r0, #16]
10062236:	225f      	movs	r2, #95	@ 0x5f
10062238:	2304      	movs	r3, #4
1006223a:	4621      	mov	r1, r4
1006223c:	f7f1 fc78 	bl	10053b30 <aci_event_fifo_push_header>
10062240:	2800      	cmp	r0, #0
10062242:	d020      	beq.n	10062286 <aci_gatt_srv_read_event_push_noinline+0x6a>
10062244:	4601      	mov	r1, r0
10062246:	9806      	ldr	r0, [sp, #24]
10062248:	7408      	strb	r0, [r1, #16]
1006224a:	738f      	strb	r7, [r1, #14]
1006224c:	730e      	strb	r6, [r1, #12]
1006224e:	728d      	strb	r5, [r1, #10]
10062250:	220c      	movs	r2, #12
10062252:	724a      	strb	r2, [r1, #9]
10062254:	2219      	movs	r2, #25
10062256:	720a      	strb	r2, [r1, #8]
10062258:	462b      	mov	r3, r5
1006225a:	2500      	movs	r5, #0
1006225c:	71cd      	strb	r5, [r1, #7]
1006225e:	220a      	movs	r2, #10
10062260:	718a      	strb	r2, [r1, #6]
10062262:	22ff      	movs	r2, #255	@ 0xff
10062264:	714a      	strb	r2, [r1, #5]
10062266:	2282      	movs	r2, #130	@ 0x82
10062268:	710a      	strb	r2, [r1, #4]
1006226a:	0a00      	lsrs	r0, r0, #8
1006226c:	7448      	strb	r0, [r1, #17]
1006226e:	0a38      	lsrs	r0, r7, #8
10062270:	73c8      	strb	r0, [r1, #15]
10062272:	0a30      	lsrs	r0, r6, #8
10062274:	7348      	strb	r0, [r1, #13]
10062276:	0a18      	lsrs	r0, r3, #8
10062278:	72c8      	strb	r0, [r1, #11]
1006227a:	4620      	mov	r0, r4
1006227c:	f7f1 fcf5 	bl	10053c6a <aci_event_fifo_push>
10062280:	e002      	b.n	10062288 <aci_gatt_srv_read_event_push_noinline+0x6c>
10062282:	2586      	movs	r5, #134	@ 0x86
10062284:	e000      	b.n	10062288 <aci_gatt_srv_read_event_push_noinline+0x6c>
10062286:	2507      	movs	r5, #7
10062288:	4628      	mov	r0, r5
1006228a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006228c <__arm_cp.24_0>:
1006228c:	20002418 	.word	0x20002418

10062290 <aci_gatt_srv_write_event_push_noinline>:
10062290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062292:	4604      	mov	r4, r0
10062294:	06c0      	lsls	r0, r0, #27
10062296:	d420      	bmi.n	100622da <aci_gatt_srv_write_event_push_noinline+0x4a>
10062298:	461f      	mov	r7, r3
1006229a:	4616      	mov	r6, r2
1006229c:	460d      	mov	r5, r1
1006229e:	4811      	ldr	r0, [pc, #68]	@ (100622e4 <__arm_cp.25_0>)
100622a0:	6800      	ldr	r0, [r0, #0]
100622a2:	0761      	lsls	r1, r4, #29
100622a4:	0ec9      	lsrs	r1, r1, #27
100622a6:	1840      	adds	r0, r0, r1
100622a8:	6900      	ldr	r0, [r0, #16]
100622aa:	2211      	movs	r2, #17
100622ac:	2305      	movs	r3, #5
100622ae:	4621      	mov	r1, r4
100622b0:	f7f1 fc3e 	bl	10053b30 <aci_event_fifo_push_header>
100622b4:	2800      	cmp	r0, #0
100622b6:	d012      	beq.n	100622de <aci_gatt_srv_write_event_push_noinline+0x4e>
100622b8:	4601      	mov	r1, r0
100622ba:	9808      	ldr	r0, [sp, #32]
100622bc:	9a07      	ldr	r2, [sp, #28]
100622be:	9b06      	ldr	r3, [sp, #24]
100622c0:	6148      	str	r0, [r1, #20]
100622c2:	820a      	strh	r2, [r1, #16]
100622c4:	81cb      	strh	r3, [r1, #14]
100622c6:	730f      	strb	r7, [r1, #12]
100622c8:	814e      	strh	r6, [r1, #10]
100622ca:	810d      	strh	r5, [r1, #8]
100622cc:	4806      	ldr	r0, [pc, #24]	@ (100622e8 <__arm_cp.25_1>)
100622ce:	6048      	str	r0, [r1, #4]
100622d0:	4620      	mov	r0, r4
100622d2:	f7f1 fcca 	bl	10053c6a <aci_event_fifo_push>
100622d6:	2000      	movs	r0, #0
100622d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100622da:	2086      	movs	r0, #134	@ 0x86
100622dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100622de:	2007      	movs	r0, #7
100622e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100622e2:	46c0      	nop			@ (mov r8, r8)

100622e4 <__arm_cp.25_0>:
100622e4:	20002418 	.word	0x20002418

100622e8 <__arm_cp.25_1>:
100622e8:	10061a21 	.word	0x10061a21

100622ec <aci_gatt_clt_multi_notification_int_event_push_noinline>:
100622ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100622ee:	4605      	mov	r5, r0
100622f0:	06c0      	lsls	r0, r0, #27
100622f2:	d421      	bmi.n	10062338 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
100622f4:	460e      	mov	r6, r1
100622f6:	4813      	ldr	r0, [pc, #76]	@ (10062344 <__arm_cp.26_0>)
100622f8:	6800      	ldr	r0, [r0, #0]
100622fa:	2152      	movs	r1, #82	@ 0x52
100622fc:	5c40      	ldrb	r0, [r0, r1]
100622fe:	2400      	movs	r4, #0
10062300:	0700      	lsls	r0, r0, #28
10062302:	d51a      	bpl.n	1006233a <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10062304:	4617      	mov	r7, r2
10062306:	9300      	str	r3, [sp, #0]
10062308:	480f      	ldr	r0, [pc, #60]	@ (10062348 <__arm_cp.26_1>)
1006230a:	6800      	ldr	r0, [r0, #0]
1006230c:	0769      	lsls	r1, r5, #29
1006230e:	0ec9      	lsrs	r1, r1, #27
10062310:	1840      	adds	r0, r0, r1
10062312:	6900      	ldr	r0, [r0, #16]
10062314:	2214      	movs	r2, #20
10062316:	2303      	movs	r3, #3
10062318:	4629      	mov	r1, r5
1006231a:	f7f1 fc09 	bl	10053b30 <aci_event_fifo_push_header>
1006231e:	2800      	cmp	r0, #0
10062320:	d00d      	beq.n	1006233e <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
10062322:	4601      	mov	r1, r0
10062324:	9800      	ldr	r0, [sp, #0]
10062326:	60c8      	str	r0, [r1, #12]
10062328:	814f      	strh	r7, [r1, #10]
1006232a:	810e      	strh	r6, [r1, #8]
1006232c:	4807      	ldr	r0, [pc, #28]	@ (1006234c <__arm_cp.26_2>)
1006232e:	6048      	str	r0, [r1, #4]
10062330:	4628      	mov	r0, r5
10062332:	f7f1 fc9a 	bl	10053c6a <aci_event_fifo_push>
10062336:	e000      	b.n	1006233a <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10062338:	2486      	movs	r4, #134	@ 0x86
1006233a:	4620      	mov	r0, r4
1006233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006233e:	2407      	movs	r4, #7
10062340:	e7fb      	b.n	1006233a <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10062342:	46c0      	nop			@ (mov r8, r8)

10062344 <__arm_cp.26_0>:
10062344:	20002468 	.word	0x20002468

10062348 <__arm_cp.26_1>:
10062348:	20002418 	.word	0x20002418

1006234c <__arm_cp.26_2>:
1006234c:	10061a81 	.word	0x10061a81

10062350 <aci_att_exchange_mtu_resp_event_push_noinline>:
10062350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062352:	4604      	mov	r4, r0
10062354:	06c0      	lsls	r0, r0, #27
10062356:	d408      	bmi.n	1006236a <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
10062358:	460d      	mov	r5, r1
1006235a:	4819      	ldr	r0, [pc, #100]	@ (100623c0 <__arm_cp.27_0>)
1006235c:	6800      	ldr	r0, [r0, #0]
1006235e:	2150      	movs	r1, #80	@ 0x50
10062360:	5c40      	ldrb	r0, [r0, r1]
10062362:	0740      	lsls	r0, r0, #29
10062364:	d403      	bmi.n	1006236e <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
10062366:	2700      	movs	r7, #0
10062368:	e027      	b.n	100623ba <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
1006236a:	2786      	movs	r7, #134	@ 0x86
1006236c:	e025      	b.n	100623ba <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
1006236e:	4616      	mov	r6, r2
10062370:	4814      	ldr	r0, [pc, #80]	@ (100623c4 <__arm_cp.27_1>)
10062372:	6800      	ldr	r0, [r0, #0]
10062374:	0761      	lsls	r1, r4, #29
10062376:	0ec9      	lsrs	r1, r1, #27
10062378:	1840      	adds	r0, r0, r1
1006237a:	6900      	ldr	r0, [r0, #16]
1006237c:	2258      	movs	r2, #88	@ 0x58
1006237e:	2703      	movs	r7, #3
10062380:	4621      	mov	r1, r4
10062382:	463b      	mov	r3, r7
10062384:	f7f1 fbd4 	bl	10053b30 <aci_event_fifo_push_header>
10062388:	2800      	cmp	r0, #0
1006238a:	d015      	beq.n	100623b8 <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
1006238c:	4601      	mov	r1, r0
1006238e:	7306      	strb	r6, [r0, #12]
10062390:	7285      	strb	r5, [r0, #10]
10062392:	200c      	movs	r0, #12
10062394:	7248      	strb	r0, [r1, #9]
10062396:	720f      	strb	r7, [r1, #8]
10062398:	2700      	movs	r7, #0
1006239a:	71cf      	strb	r7, [r1, #7]
1006239c:	2006      	movs	r0, #6
1006239e:	7188      	strb	r0, [r1, #6]
100623a0:	20ff      	movs	r0, #255	@ 0xff
100623a2:	7148      	strb	r0, [r1, #5]
100623a4:	2082      	movs	r0, #130	@ 0x82
100623a6:	7108      	strb	r0, [r1, #4]
100623a8:	0a30      	lsrs	r0, r6, #8
100623aa:	7348      	strb	r0, [r1, #13]
100623ac:	0a28      	lsrs	r0, r5, #8
100623ae:	72c8      	strb	r0, [r1, #11]
100623b0:	4620      	mov	r0, r4
100623b2:	f7f1 fc5a 	bl	10053c6a <aci_event_fifo_push>
100623b6:	e000      	b.n	100623ba <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
100623b8:	2707      	movs	r7, #7
100623ba:	4638      	mov	r0, r7
100623bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100623be:	46c0      	nop			@ (mov r8, r8)

100623c0 <__arm_cp.27_0>:
100623c0:	20002468 	.word	0x20002468

100623c4 <__arm_cp.27_1>:
100623c4:	20002418 	.word	0x20002418

100623c8 <aci_att_clt_find_info_resp_event_push_noinline>:
100623c8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100623ca:	4604      	mov	r4, r0
100623cc:	06c0      	lsls	r0, r0, #27
100623ce:	d424      	bmi.n	1006241a <aci_att_clt_find_info_resp_event_push_noinline+0x52>
100623d0:	4616      	mov	r6, r2
100623d2:	4813      	ldr	r0, [pc, #76]	@ (10062420 <__arm_cp.28_0>)
100623d4:	6800      	ldr	r0, [r0, #0]
100623d6:	2250      	movs	r2, #80	@ 0x50
100623d8:	5c80      	ldrb	r0, [r0, r2]
100623da:	2500      	movs	r5, #0
100623dc:	0700      	lsls	r0, r0, #28
100623de:	d51d      	bpl.n	1006241c <aci_att_clt_find_info_resp_event_push_noinline+0x54>
100623e0:	461f      	mov	r7, r3
100623e2:	9101      	str	r1, [sp, #4]
100623e4:	9502      	str	r5, [sp, #8]
100623e6:	480f      	ldr	r0, [pc, #60]	@ (10062424 <__arm_cp.28_1>)
100623e8:	6800      	ldr	r0, [r0, #0]
100623ea:	0761      	lsls	r1, r4, #29
100623ec:	0ec9      	lsrs	r1, r1, #27
100623ee:	1840      	adds	r0, r0, r1
100623f0:	6900      	ldr	r0, [r0, #16]
100623f2:	2507      	movs	r5, #7
100623f4:	2303      	movs	r3, #3
100623f6:	4621      	mov	r1, r4
100623f8:	462a      	mov	r2, r5
100623fa:	f7f1 fb99 	bl	10053b30 <aci_event_fifo_push_header>
100623fe:	2800      	cmp	r0, #0
10062400:	d00c      	beq.n	1006241c <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10062402:	4601      	mov	r1, r0
10062404:	60c7      	str	r7, [r0, #12]
10062406:	8146      	strh	r6, [r0, #10]
10062408:	9801      	ldr	r0, [sp, #4]
1006240a:	8108      	strh	r0, [r1, #8]
1006240c:	4806      	ldr	r0, [pc, #24]	@ (10062428 <__arm_cp.28_2>)
1006240e:	6048      	str	r0, [r1, #4]
10062410:	4620      	mov	r0, r4
10062412:	f7f1 fc2a 	bl	10053c6a <aci_event_fifo_push>
10062416:	9d02      	ldr	r5, [sp, #8]
10062418:	e000      	b.n	1006241c <aci_att_clt_find_info_resp_event_push_noinline+0x54>
1006241a:	2586      	movs	r5, #134	@ 0x86
1006241c:	4628      	mov	r0, r5
1006241e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062420 <__arm_cp.28_0>:
10062420:	20002468 	.word	0x20002468

10062424 <__arm_cp.28_1>:
10062424:	20002418 	.word	0x20002418

10062428 <__arm_cp.28_2>:
10062428:	10061b01 	.word	0x10061b01

1006242c <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
1006242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006242e:	4605      	mov	r5, r0
10062430:	06c0      	lsls	r0, r0, #27
10062432:	d421      	bmi.n	10062478 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
10062434:	460e      	mov	r6, r1
10062436:	4813      	ldr	r0, [pc, #76]	@ (10062484 <__arm_cp.29_0>)
10062438:	6800      	ldr	r0, [r0, #0]
1006243a:	2150      	movs	r1, #80	@ 0x50
1006243c:	5c40      	ldrb	r0, [r0, r1]
1006243e:	2400      	movs	r4, #0
10062440:	06c0      	lsls	r0, r0, #27
10062442:	d51a      	bpl.n	1006247a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10062444:	4617      	mov	r7, r2
10062446:	9300      	str	r3, [sp, #0]
10062448:	480f      	ldr	r0, [pc, #60]	@ (10062488 <__arm_cp.29_1>)
1006244a:	6800      	ldr	r0, [r0, #0]
1006244c:	0769      	lsls	r1, r5, #29
1006244e:	0ec9      	lsrs	r1, r1, #27
10062450:	1840      	adds	r0, r0, r1
10062452:	6900      	ldr	r0, [r0, #16]
10062454:	2208      	movs	r2, #8
10062456:	2303      	movs	r3, #3
10062458:	4629      	mov	r1, r5
1006245a:	f7f1 fb69 	bl	10053b30 <aci_event_fifo_push_header>
1006245e:	2800      	cmp	r0, #0
10062460:	d00d      	beq.n	1006247e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
10062462:	4601      	mov	r1, r0
10062464:	9800      	ldr	r0, [sp, #0]
10062466:	60c8      	str	r0, [r1, #12]
10062468:	814f      	strh	r7, [r1, #10]
1006246a:	810e      	strh	r6, [r1, #8]
1006246c:	4807      	ldr	r0, [pc, #28]	@ (1006248c <__arm_cp.29_2>)
1006246e:	6048      	str	r0, [r1, #4]
10062470:	4628      	mov	r0, r5
10062472:	f7f1 fbfa 	bl	10053c6a <aci_event_fifo_push>
10062476:	e000      	b.n	1006247a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10062478:	2486      	movs	r4, #134	@ 0x86
1006247a:	4620      	mov	r0, r4
1006247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006247e:	2407      	movs	r4, #7
10062480:	e7fb      	b.n	1006247a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10062482:	46c0      	nop			@ (mov r8, r8)

10062484 <__arm_cp.29_0>:
10062484:	20002468 	.word	0x20002468

10062488 <__arm_cp.29_1>:
10062488:	20002418 	.word	0x20002418

1006248c <__arm_cp.29_2>:
1006248c:	10061b55 	.word	0x10061b55

10062490 <aci_att_clt_read_by_type_resp_event_push_noinline>:
10062490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062492:	4605      	mov	r5, r0
10062494:	06c0      	lsls	r0, r0, #27
10062496:	d421      	bmi.n	100624dc <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
10062498:	460e      	mov	r6, r1
1006249a:	4813      	ldr	r0, [pc, #76]	@ (100624e8 <__arm_cp.30_0>)
1006249c:	6800      	ldr	r0, [r0, #0]
1006249e:	2150      	movs	r1, #80	@ 0x50
100624a0:	5c40      	ldrb	r0, [r0, r1]
100624a2:	2400      	movs	r4, #0
100624a4:	0680      	lsls	r0, r0, #26
100624a6:	d51a      	bpl.n	100624de <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
100624a8:	4617      	mov	r7, r2
100624aa:	9300      	str	r3, [sp, #0]
100624ac:	480f      	ldr	r0, [pc, #60]	@ (100624ec <__arm_cp.30_1>)
100624ae:	6800      	ldr	r0, [r0, #0]
100624b0:	0769      	lsls	r1, r5, #29
100624b2:	0ec9      	lsrs	r1, r1, #27
100624b4:	1840      	adds	r0, r0, r1
100624b6:	6900      	ldr	r0, [r0, #16]
100624b8:	2209      	movs	r2, #9
100624ba:	2303      	movs	r3, #3
100624bc:	4629      	mov	r1, r5
100624be:	f7f1 fb37 	bl	10053b30 <aci_event_fifo_push_header>
100624c2:	2800      	cmp	r0, #0
100624c4:	d00d      	beq.n	100624e2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
100624c6:	4601      	mov	r1, r0
100624c8:	9800      	ldr	r0, [sp, #0]
100624ca:	60c8      	str	r0, [r1, #12]
100624cc:	814f      	strh	r7, [r1, #10]
100624ce:	810e      	strh	r6, [r1, #8]
100624d0:	4807      	ldr	r0, [pc, #28]	@ (100624f0 <__arm_cp.30_2>)
100624d2:	6048      	str	r0, [r1, #4]
100624d4:	4628      	mov	r0, r5
100624d6:	f7f1 fbc8 	bl	10053c6a <aci_event_fifo_push>
100624da:	e000      	b.n	100624de <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
100624dc:	2486      	movs	r4, #134	@ 0x86
100624de:	4620      	mov	r0, r4
100624e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100624e2:	2407      	movs	r4, #7
100624e4:	e7fb      	b.n	100624de <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
100624e6:	46c0      	nop			@ (mov r8, r8)

100624e8 <__arm_cp.30_0>:
100624e8:	20002468 	.word	0x20002468

100624ec <__arm_cp.30_1>:
100624ec:	20002418 	.word	0x20002418

100624f0 <__arm_cp.30_2>:
100624f0:	10061ba1 	.word	0x10061ba1

100624f4 <aci_att_clt_read_resp_event_push_noinline>:
100624f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100624f6:	4605      	mov	r5, r0
100624f8:	06c0      	lsls	r0, r0, #27
100624fa:	d421      	bmi.n	10062540 <aci_att_clt_read_resp_event_push_noinline+0x4c>
100624fc:	460e      	mov	r6, r1
100624fe:	4813      	ldr	r0, [pc, #76]	@ (1006254c <__arm_cp.31_0>)
10062500:	6800      	ldr	r0, [r0, #0]
10062502:	2150      	movs	r1, #80	@ 0x50
10062504:	5c40      	ldrb	r0, [r0, r1]
10062506:	2400      	movs	r4, #0
10062508:	0640      	lsls	r0, r0, #25
1006250a:	d51a      	bpl.n	10062542 <aci_att_clt_read_resp_event_push_noinline+0x4e>
1006250c:	4617      	mov	r7, r2
1006250e:	9300      	str	r3, [sp, #0]
10062510:	480f      	ldr	r0, [pc, #60]	@ (10062550 <__arm_cp.31_1>)
10062512:	6800      	ldr	r0, [r0, #0]
10062514:	0769      	lsls	r1, r5, #29
10062516:	0ec9      	lsrs	r1, r1, #27
10062518:	1840      	adds	r0, r0, r1
1006251a:	6900      	ldr	r0, [r0, #16]
1006251c:	220a      	movs	r2, #10
1006251e:	2303      	movs	r3, #3
10062520:	4629      	mov	r1, r5
10062522:	f7f1 fb05 	bl	10053b30 <aci_event_fifo_push_header>
10062526:	2800      	cmp	r0, #0
10062528:	d00d      	beq.n	10062546 <aci_att_clt_read_resp_event_push_noinline+0x52>
1006252a:	4601      	mov	r1, r0
1006252c:	9800      	ldr	r0, [sp, #0]
1006252e:	60c8      	str	r0, [r1, #12]
10062530:	814f      	strh	r7, [r1, #10]
10062532:	810e      	strh	r6, [r1, #8]
10062534:	4807      	ldr	r0, [pc, #28]	@ (10062554 <__arm_cp.31_2>)
10062536:	6048      	str	r0, [r1, #4]
10062538:	4628      	mov	r0, r5
1006253a:	f7f1 fb96 	bl	10053c6a <aci_event_fifo_push>
1006253e:	e000      	b.n	10062542 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10062540:	2486      	movs	r4, #134	@ 0x86
10062542:	4620      	mov	r0, r4
10062544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062546:	2407      	movs	r4, #7
10062548:	e7fb      	b.n	10062542 <aci_att_clt_read_resp_event_push_noinline+0x4e>
1006254a:	46c0      	nop			@ (mov r8, r8)

1006254c <__arm_cp.31_0>:
1006254c:	20002468 	.word	0x20002468

10062550 <__arm_cp.31_1>:
10062550:	20002418 	.word	0x20002418

10062554 <__arm_cp.31_2>:
10062554:	10061bf5 	.word	0x10061bf5

10062558 <aci_att_clt_read_blob_resp_event_push_noinline>:
10062558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006255a:	4605      	mov	r5, r0
1006255c:	06c0      	lsls	r0, r0, #27
1006255e:	d421      	bmi.n	100625a4 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
10062560:	460e      	mov	r6, r1
10062562:	4813      	ldr	r0, [pc, #76]	@ (100625b0 <__arm_cp.32_0>)
10062564:	6800      	ldr	r0, [r0, #0]
10062566:	2150      	movs	r1, #80	@ 0x50
10062568:	5640      	ldrsb	r0, [r0, r1]
1006256a:	2400      	movs	r4, #0
1006256c:	2800      	cmp	r0, #0
1006256e:	d51a      	bpl.n	100625a6 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10062570:	4617      	mov	r7, r2
10062572:	9300      	str	r3, [sp, #0]
10062574:	480f      	ldr	r0, [pc, #60]	@ (100625b4 <__arm_cp.32_1>)
10062576:	6800      	ldr	r0, [r0, #0]
10062578:	0769      	lsls	r1, r5, #29
1006257a:	0ec9      	lsrs	r1, r1, #27
1006257c:	1840      	adds	r0, r0, r1
1006257e:	6900      	ldr	r0, [r0, #16]
10062580:	220b      	movs	r2, #11
10062582:	2303      	movs	r3, #3
10062584:	4629      	mov	r1, r5
10062586:	f7f1 fad3 	bl	10053b30 <aci_event_fifo_push_header>
1006258a:	2800      	cmp	r0, #0
1006258c:	d00d      	beq.n	100625aa <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
1006258e:	4601      	mov	r1, r0
10062590:	9800      	ldr	r0, [sp, #0]
10062592:	60c8      	str	r0, [r1, #12]
10062594:	814f      	strh	r7, [r1, #10]
10062596:	810e      	strh	r6, [r1, #8]
10062598:	4807      	ldr	r0, [pc, #28]	@ (100625b8 <__arm_cp.32_2>)
1006259a:	6048      	str	r0, [r1, #4]
1006259c:	4628      	mov	r0, r5
1006259e:	f7f1 fb64 	bl	10053c6a <aci_event_fifo_push>
100625a2:	e000      	b.n	100625a6 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
100625a4:	2486      	movs	r4, #134	@ 0x86
100625a6:	4620      	mov	r0, r4
100625a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100625aa:	2407      	movs	r4, #7
100625ac:	e7fb      	b.n	100625a6 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
100625ae:	46c0      	nop			@ (mov r8, r8)

100625b0 <__arm_cp.32_0>:
100625b0:	20002468 	.word	0x20002468

100625b4 <__arm_cp.32_1>:
100625b4:	20002418 	.word	0x20002418

100625b8 <__arm_cp.32_2>:
100625b8:	10061c45 	.word	0x10061c45

100625bc <aci_att_clt_read_multiple_resp_event_push_noinline>:
100625bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100625be:	4605      	mov	r5, r0
100625c0:	06c0      	lsls	r0, r0, #27
100625c2:	d421      	bmi.n	10062608 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
100625c4:	460e      	mov	r6, r1
100625c6:	4813      	ldr	r0, [pc, #76]	@ (10062614 <__arm_cp.33_0>)
100625c8:	6800      	ldr	r0, [r0, #0]
100625ca:	2151      	movs	r1, #81	@ 0x51
100625cc:	5c40      	ldrb	r0, [r0, r1]
100625ce:	2400      	movs	r4, #0
100625d0:	07c0      	lsls	r0, r0, #31
100625d2:	d01a      	beq.n	1006260a <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
100625d4:	4617      	mov	r7, r2
100625d6:	9300      	str	r3, [sp, #0]
100625d8:	480f      	ldr	r0, [pc, #60]	@ (10062618 <__arm_cp.33_1>)
100625da:	6800      	ldr	r0, [r0, #0]
100625dc:	0769      	lsls	r1, r5, #29
100625de:	0ec9      	lsrs	r1, r1, #27
100625e0:	1840      	adds	r0, r0, r1
100625e2:	6900      	ldr	r0, [r0, #16]
100625e4:	220c      	movs	r2, #12
100625e6:	2303      	movs	r3, #3
100625e8:	4629      	mov	r1, r5
100625ea:	f7f1 faa1 	bl	10053b30 <aci_event_fifo_push_header>
100625ee:	2800      	cmp	r0, #0
100625f0:	d00d      	beq.n	1006260e <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
100625f2:	4601      	mov	r1, r0
100625f4:	9800      	ldr	r0, [sp, #0]
100625f6:	60c8      	str	r0, [r1, #12]
100625f8:	814f      	strh	r7, [r1, #10]
100625fa:	810e      	strh	r6, [r1, #8]
100625fc:	4807      	ldr	r0, [pc, #28]	@ (1006261c <__arm_cp.33_2>)
100625fe:	6048      	str	r0, [r1, #4]
10062600:	4628      	mov	r0, r5
10062602:	f7f1 fb32 	bl	10053c6a <aci_event_fifo_push>
10062606:	e000      	b.n	1006260a <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10062608:	2486      	movs	r4, #134	@ 0x86
1006260a:	4620      	mov	r0, r4
1006260c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006260e:	2407      	movs	r4, #7
10062610:	e7fb      	b.n	1006260a <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10062612:	46c0      	nop			@ (mov r8, r8)

10062614 <__arm_cp.33_0>:
10062614:	20002468 	.word	0x20002468

10062618 <__arm_cp.33_1>:
10062618:	20002418 	.word	0x20002418

1006261c <__arm_cp.33_2>:
1006261c:	10061c95 	.word	0x10061c95

10062620 <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10062620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062622:	4605      	mov	r5, r0
10062624:	06c0      	lsls	r0, r0, #27
10062626:	d421      	bmi.n	1006266c <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
10062628:	460e      	mov	r6, r1
1006262a:	4813      	ldr	r0, [pc, #76]	@ (10062678 <__arm_cp.34_0>)
1006262c:	6800      	ldr	r0, [r0, #0]
1006262e:	2151      	movs	r1, #81	@ 0x51
10062630:	5c40      	ldrb	r0, [r0, r1]
10062632:	2400      	movs	r4, #0
10062634:	0780      	lsls	r0, r0, #30
10062636:	d51a      	bpl.n	1006266e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10062638:	4617      	mov	r7, r2
1006263a:	9300      	str	r3, [sp, #0]
1006263c:	480f      	ldr	r0, [pc, #60]	@ (1006267c <__arm_cp.34_1>)
1006263e:	6800      	ldr	r0, [r0, #0]
10062640:	0769      	lsls	r1, r5, #29
10062642:	0ec9      	lsrs	r1, r1, #27
10062644:	1840      	adds	r0, r0, r1
10062646:	6900      	ldr	r0, [r0, #16]
10062648:	220d      	movs	r2, #13
1006264a:	2303      	movs	r3, #3
1006264c:	4629      	mov	r1, r5
1006264e:	f7f1 fa6f 	bl	10053b30 <aci_event_fifo_push_header>
10062652:	2800      	cmp	r0, #0
10062654:	d00d      	beq.n	10062672 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
10062656:	4601      	mov	r1, r0
10062658:	9800      	ldr	r0, [sp, #0]
1006265a:	60c8      	str	r0, [r1, #12]
1006265c:	814f      	strh	r7, [r1, #10]
1006265e:	810e      	strh	r6, [r1, #8]
10062660:	4807      	ldr	r0, [pc, #28]	@ (10062680 <__arm_cp.34_2>)
10062662:	6048      	str	r0, [r1, #4]
10062664:	4628      	mov	r0, r5
10062666:	f7f1 fb00 	bl	10053c6a <aci_event_fifo_push>
1006266a:	e000      	b.n	1006266e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
1006266c:	2486      	movs	r4, #134	@ 0x86
1006266e:	4620      	mov	r0, r4
10062670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062672:	2407      	movs	r4, #7
10062674:	e7fb      	b.n	1006266e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10062676:	46c0      	nop			@ (mov r8, r8)

10062678 <__arm_cp.34_0>:
10062678:	20002468 	.word	0x20002468

1006267c <__arm_cp.34_1>:
1006267c:	20002418 	.word	0x20002418

10062680 <__arm_cp.34_2>:
10062680:	10061ce5 	.word	0x10061ce5

10062684 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10062684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062686:	4605      	mov	r5, r0
10062688:	06c0      	lsls	r0, r0, #27
1006268a:	d421      	bmi.n	100626d0 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
1006268c:	460e      	mov	r6, r1
1006268e:	4813      	ldr	r0, [pc, #76]	@ (100626dc <__arm_cp.35_0>)
10062690:	6800      	ldr	r0, [r0, #0]
10062692:	2151      	movs	r1, #81	@ 0x51
10062694:	5c40      	ldrb	r0, [r0, r1]
10062696:	2400      	movs	r4, #0
10062698:	0700      	lsls	r0, r0, #28
1006269a:	d51a      	bpl.n	100626d2 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
1006269c:	4617      	mov	r7, r2
1006269e:	9300      	str	r3, [sp, #0]
100626a0:	480f      	ldr	r0, [pc, #60]	@ (100626e0 <__arm_cp.35_1>)
100626a2:	6800      	ldr	r0, [r0, #0]
100626a4:	0769      	lsls	r1, r5, #29
100626a6:	0ec9      	lsrs	r1, r1, #27
100626a8:	1840      	adds	r0, r0, r1
100626aa:	6900      	ldr	r0, [r0, #16]
100626ac:	220e      	movs	r2, #14
100626ae:	2303      	movs	r3, #3
100626b0:	4629      	mov	r1, r5
100626b2:	f7f1 fa3d 	bl	10053b30 <aci_event_fifo_push_header>
100626b6:	2800      	cmp	r0, #0
100626b8:	d00d      	beq.n	100626d6 <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
100626ba:	4601      	mov	r1, r0
100626bc:	9800      	ldr	r0, [sp, #0]
100626be:	60c8      	str	r0, [r1, #12]
100626c0:	814f      	strh	r7, [r1, #10]
100626c2:	810e      	strh	r6, [r1, #8]
100626c4:	4807      	ldr	r0, [pc, #28]	@ (100626e4 <__arm_cp.35_2>)
100626c6:	6048      	str	r0, [r1, #4]
100626c8:	4628      	mov	r0, r5
100626ca:	f7f1 face 	bl	10053c6a <aci_event_fifo_push>
100626ce:	e000      	b.n	100626d2 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
100626d0:	2486      	movs	r4, #134	@ 0x86
100626d2:	4620      	mov	r0, r4
100626d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100626d6:	2407      	movs	r4, #7
100626d8:	e7fb      	b.n	100626d2 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
100626da:	46c0      	nop			@ (mov r8, r8)

100626dc <__arm_cp.35_0>:
100626dc:	20002468 	.word	0x20002468

100626e0 <__arm_cp.35_1>:
100626e0:	20002418 	.word	0x20002418

100626e4 <__arm_cp.35_2>:
100626e4:	10061d39 	.word	0x10061d39

100626e8 <aci_att_clt_exec_write_resp_event_push_noinline>:
100626e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100626ea:	4604      	mov	r4, r0
100626ec:	06c0      	lsls	r0, r0, #27
100626ee:	d408      	bmi.n	10062702 <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
100626f0:	460d      	mov	r5, r1
100626f2:	4819      	ldr	r0, [pc, #100]	@ (10062758 <__arm_cp.36_0>)
100626f4:	6800      	ldr	r0, [r0, #0]
100626f6:	2151      	movs	r1, #81	@ 0x51
100626f8:	5c40      	ldrb	r0, [r0, r1]
100626fa:	06c0      	lsls	r0, r0, #27
100626fc:	d403      	bmi.n	10062706 <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
100626fe:	2700      	movs	r7, #0
10062700:	e027      	b.n	10062752 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10062702:	2786      	movs	r7, #134	@ 0x86
10062704:	e025      	b.n	10062752 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10062706:	4616      	mov	r6, r2
10062708:	4814      	ldr	r0, [pc, #80]	@ (1006275c <__arm_cp.36_1>)
1006270a:	6800      	ldr	r0, [r0, #0]
1006270c:	0761      	lsls	r1, r4, #29
1006270e:	0ec9      	lsrs	r1, r1, #27
10062710:	1840      	adds	r0, r0, r1
10062712:	6900      	ldr	r0, [r0, #16]
10062714:	2259      	movs	r2, #89	@ 0x59
10062716:	2303      	movs	r3, #3
10062718:	4621      	mov	r1, r4
1006271a:	f7f1 fa09 	bl	10053b30 <aci_event_fifo_push_header>
1006271e:	2800      	cmp	r0, #0
10062720:	d016      	beq.n	10062750 <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
10062722:	4601      	mov	r1, r0
10062724:	7306      	strb	r6, [r0, #12]
10062726:	7285      	strb	r5, [r0, #10]
10062728:	200c      	movs	r0, #12
1006272a:	7248      	strb	r0, [r1, #9]
1006272c:	200d      	movs	r0, #13
1006272e:	7208      	strb	r0, [r1, #8]
10062730:	2700      	movs	r7, #0
10062732:	71cf      	strb	r7, [r1, #7]
10062734:	2006      	movs	r0, #6
10062736:	7188      	strb	r0, [r1, #6]
10062738:	20ff      	movs	r0, #255	@ 0xff
1006273a:	7148      	strb	r0, [r1, #5]
1006273c:	2082      	movs	r0, #130	@ 0x82
1006273e:	7108      	strb	r0, [r1, #4]
10062740:	0a30      	lsrs	r0, r6, #8
10062742:	7348      	strb	r0, [r1, #13]
10062744:	0a28      	lsrs	r0, r5, #8
10062746:	72c8      	strb	r0, [r1, #11]
10062748:	4620      	mov	r0, r4
1006274a:	f7f1 fa8e 	bl	10053c6a <aci_event_fifo_push>
1006274e:	e000      	b.n	10062752 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10062750:	2707      	movs	r7, #7
10062752:	4638      	mov	r0, r7
10062754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062756:	46c0      	nop			@ (mov r8, r8)

10062758 <__arm_cp.36_0>:
10062758:	20002468 	.word	0x20002468

1006275c <__arm_cp.36_1>:
1006275c:	20002418 	.word	0x20002418

10062760 <aci_att_srv_prepare_write_req_event_push_noinline>:
10062760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062762:	4604      	mov	r4, r0
10062764:	06c0      	lsls	r0, r0, #27
10062766:	d420      	bmi.n	100627aa <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10062768:	461f      	mov	r7, r3
1006276a:	4616      	mov	r6, r2
1006276c:	460d      	mov	r5, r1
1006276e:	4811      	ldr	r0, [pc, #68]	@ (100627b4 <__arm_cp.37_0>)
10062770:	6800      	ldr	r0, [r0, #0]
10062772:	0761      	lsls	r1, r4, #29
10062774:	0ec9      	lsrs	r1, r1, #27
10062776:	1840      	adds	r0, r0, r1
10062778:	6900      	ldr	r0, [r0, #16]
1006277a:	2212      	movs	r2, #18
1006277c:	2305      	movs	r3, #5
1006277e:	4621      	mov	r1, r4
10062780:	f7f1 f9d6 	bl	10053b30 <aci_event_fifo_push_header>
10062784:	2800      	cmp	r0, #0
10062786:	d012      	beq.n	100627ae <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10062788:	4601      	mov	r1, r0
1006278a:	9808      	ldr	r0, [sp, #32]
1006278c:	9a07      	ldr	r2, [sp, #28]
1006278e:	9b06      	ldr	r3, [sp, #24]
10062790:	6148      	str	r0, [r1, #20]
10062792:	820a      	strh	r2, [r1, #16]
10062794:	81cb      	strh	r3, [r1, #14]
10062796:	818f      	strh	r7, [r1, #12]
10062798:	814e      	strh	r6, [r1, #10]
1006279a:	810d      	strh	r5, [r1, #8]
1006279c:	4806      	ldr	r0, [pc, #24]	@ (100627b8 <__arm_cp.37_1>)
1006279e:	6048      	str	r0, [r1, #4]
100627a0:	4620      	mov	r0, r4
100627a2:	f7f1 fa62 	bl	10053c6a <aci_event_fifo_push>
100627a6:	2000      	movs	r0, #0
100627a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100627aa:	2086      	movs	r0, #134	@ 0x86
100627ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100627ae:	2007      	movs	r0, #7
100627b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100627b2:	46c0      	nop			@ (mov r8, r8)

100627b4 <__arm_cp.37_0>:
100627b4:	20002418 	.word	0x20002418

100627b8 <__arm_cp.37_1>:
100627b8:	10061d85 	.word	0x10061d85

100627bc <aci_att_srv_exec_write_req_event_push_noinline>:
100627bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100627be:	4604      	mov	r4, r0
100627c0:	06c0      	lsls	r0, r0, #27
100627c2:	d428      	bmi.n	10062816 <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
100627c4:	461f      	mov	r7, r3
100627c6:	4616      	mov	r6, r2
100627c8:	460d      	mov	r5, r1
100627ca:	4815      	ldr	r0, [pc, #84]	@ (10062820 <__arm_cp.38_0>)
100627cc:	6800      	ldr	r0, [r0, #0]
100627ce:	0761      	lsls	r1, r4, #29
100627d0:	0ec9      	lsrs	r1, r1, #27
100627d2:	1840      	adds	r0, r0, r1
100627d4:	6900      	ldr	r0, [r0, #16]
100627d6:	2260      	movs	r2, #96	@ 0x60
100627d8:	2303      	movs	r3, #3
100627da:	4621      	mov	r1, r4
100627dc:	f7f1 f9a8 	bl	10053b30 <aci_event_fifo_push_header>
100627e0:	2800      	cmp	r0, #0
100627e2:	d01a      	beq.n	1006281a <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
100627e4:	4601      	mov	r1, r0
100627e6:	7306      	strb	r6, [r0, #12]
100627e8:	7285      	strb	r5, [r0, #10]
100627ea:	200c      	movs	r0, #12
100627ec:	7248      	strb	r0, [r1, #9]
100627ee:	201c      	movs	r0, #28
100627f0:	7208      	strb	r0, [r1, #8]
100627f2:	463a      	mov	r2, r7
100627f4:	2700      	movs	r7, #0
100627f6:	71cf      	strb	r7, [r1, #7]
100627f8:	2007      	movs	r0, #7
100627fa:	7188      	strb	r0, [r1, #6]
100627fc:	738a      	strb	r2, [r1, #14]
100627fe:	20ff      	movs	r0, #255	@ 0xff
10062800:	7148      	strb	r0, [r1, #5]
10062802:	2082      	movs	r0, #130	@ 0x82
10062804:	7108      	strb	r0, [r1, #4]
10062806:	0a30      	lsrs	r0, r6, #8
10062808:	7348      	strb	r0, [r1, #13]
1006280a:	0a28      	lsrs	r0, r5, #8
1006280c:	72c8      	strb	r0, [r1, #11]
1006280e:	4620      	mov	r0, r4
10062810:	f7f1 fa2b 	bl	10053c6a <aci_event_fifo_push>
10062814:	e002      	b.n	1006281c <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10062816:	2786      	movs	r7, #134	@ 0x86
10062818:	e000      	b.n	1006281c <aci_att_srv_exec_write_req_event_push_noinline+0x60>
1006281a:	2707      	movs	r7, #7
1006281c:	4638      	mov	r0, r7
1006281e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062820 <__arm_cp.38_0>:
10062820:	20002418 	.word	0x20002418

10062824 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10062824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062826:	4605      	mov	r5, r0
10062828:	06c0      	lsls	r0, r0, #27
1006282a:	d421      	bmi.n	10062870 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
1006282c:	460e      	mov	r6, r1
1006282e:	4813      	ldr	r0, [pc, #76]	@ (1006287c <__arm_cp.39_0>)
10062830:	6800      	ldr	r0, [r0, #0]
10062832:	2152      	movs	r1, #82	@ 0x52
10062834:	5c40      	ldrb	r0, [r0, r1]
10062836:	2400      	movs	r4, #0
10062838:	0740      	lsls	r0, r0, #29
1006283a:	d51a      	bpl.n	10062872 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
1006283c:	4617      	mov	r7, r2
1006283e:	9300      	str	r3, [sp, #0]
10062840:	480f      	ldr	r0, [pc, #60]	@ (10062880 <__arm_cp.39_1>)
10062842:	6800      	ldr	r0, [r0, #0]
10062844:	0769      	lsls	r1, r5, #29
10062846:	0ec9      	lsrs	r1, r1, #27
10062848:	1840      	adds	r0, r0, r1
1006284a:	6900      	ldr	r0, [r0, #16]
1006284c:	2213      	movs	r2, #19
1006284e:	2303      	movs	r3, #3
10062850:	4629      	mov	r1, r5
10062852:	f7f1 f96d 	bl	10053b30 <aci_event_fifo_push_header>
10062856:	2800      	cmp	r0, #0
10062858:	d00d      	beq.n	10062876 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
1006285a:	4601      	mov	r1, r0
1006285c:	9800      	ldr	r0, [sp, #0]
1006285e:	60c8      	str	r0, [r1, #12]
10062860:	814f      	strh	r7, [r1, #10]
10062862:	810e      	strh	r6, [r1, #8]
10062864:	4807      	ldr	r0, [pc, #28]	@ (10062884 <__arm_cp.39_2>)
10062866:	6048      	str	r0, [r1, #4]
10062868:	4628      	mov	r0, r5
1006286a:	f7f1 f9fe 	bl	10053c6a <aci_event_fifo_push>
1006286e:	e000      	b.n	10062872 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10062870:	2486      	movs	r4, #134	@ 0x86
10062872:	4620      	mov	r0, r4
10062874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062876:	2407      	movs	r4, #7
10062878:	e7fb      	b.n	10062872 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
1006287a:	46c0      	nop			@ (mov r8, r8)

1006287c <__arm_cp.39_0>:
1006287c:	20002468 	.word	0x20002468

10062880 <__arm_cp.39_1>:
10062880:	20002418 	.word	0x20002418

10062884 <__arm_cp.39_2>:
10062884:	10061de1 	.word	0x10061de1

10062888 <hci_number_of_completed_packets_event_cb>:
10062888:	b51c      	push	{r2, r3, r4, lr}
1006288a:	8889      	ldrh	r1, [r1, #4]
1006288c:	466c      	mov	r4, sp
1006288e:	1ce0      	adds	r0, r4, #3
10062890:	f7f1 fc80 	bl	10054194 <hci_number_of_completed_packets_event_copy>
10062894:	2005      	movs	r0, #5
10062896:	70a0      	strb	r0, [r4, #2]
10062898:	2013      	movs	r0, #19
1006289a:	7060      	strb	r0, [r4, #1]
1006289c:	2004      	movs	r0, #4
1006289e:	7020      	strb	r0, [r4, #0]
100628a0:	2108      	movs	r1, #8
100628a2:	4620      	mov	r0, r4
100628a4:	f7ea fdc6 	bl	1004d434 <BLE_STACK_Event>
100628a8:	bd1c      	pop	{r2, r3, r4, pc}
	...

100628ac <hci_number_of_completed_packets_event_push_noinline>:
100628ac:	b5b0      	push	{r4, r5, r7, lr}
100628ae:	4604      	mov	r4, r0
100628b0:	06c0      	lsls	r0, r0, #27
100628b2:	d416      	bmi.n	100628e2 <hci_number_of_completed_packets_event_push_noinline+0x36>
100628b4:	460d      	mov	r5, r1
100628b6:	480d      	ldr	r0, [pc, #52]	@ (100628ec <__arm_cp.22_0>)
100628b8:	6800      	ldr	r0, [r0, #0]
100628ba:	0761      	lsls	r1, r4, #29
100628bc:	0ec9      	lsrs	r1, r1, #27
100628be:	1840      	adds	r0, r0, r1
100628c0:	6900      	ldr	r0, [r0, #16]
100628c2:	2202      	movs	r2, #2
100628c4:	4621      	mov	r1, r4
100628c6:	4613      	mov	r3, r2
100628c8:	f7f1 f932 	bl	10053b30 <aci_event_fifo_push_header>
100628cc:	2800      	cmp	r0, #0
100628ce:	d00a      	beq.n	100628e6 <hci_number_of_completed_packets_event_push_noinline+0x3a>
100628d0:	4601      	mov	r1, r0
100628d2:	4807      	ldr	r0, [pc, #28]	@ (100628f0 <__arm_cp.22_1>)
100628d4:	6048      	str	r0, [r1, #4]
100628d6:	810d      	strh	r5, [r1, #8]
100628d8:	4620      	mov	r0, r4
100628da:	f7f1 f9c6 	bl	10053c6a <aci_event_fifo_push>
100628de:	2000      	movs	r0, #0
100628e0:	bdb0      	pop	{r4, r5, r7, pc}
100628e2:	2086      	movs	r0, #134	@ 0x86
100628e4:	bdb0      	pop	{r4, r5, r7, pc}
100628e6:	2007      	movs	r0, #7
100628e8:	bdb0      	pop	{r4, r5, r7, pc}
100628ea:	46c0      	nop			@ (mov r8, r8)

100628ec <__arm_cp.22_0>:
100628ec:	20002418 	.word	0x20002418

100628f0 <__arm_cp.22_1>:
100628f0:	10062889 	.word	0x10062889

100628f4 <hci_le_read_remote_features_complete_event_push_noinline>:
100628f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100628f6:	4605      	mov	r5, r0
100628f8:	06c0      	lsls	r0, r0, #27
100628fa:	d433      	bmi.n	10062964 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
100628fc:	4617      	mov	r7, r2
100628fe:	481c      	ldr	r0, [pc, #112]	@ (10062970 <__arm_cp.26_0>)
10062900:	6800      	ldr	r0, [r0, #0]
10062902:	223d      	movs	r2, #61	@ 0x3d
10062904:	5c82      	ldrb	r2, [r0, r2]
10062906:	2400      	movs	r4, #0
10062908:	0692      	lsls	r2, r2, #26
1006290a:	d52c      	bpl.n	10062966 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
1006290c:	303d      	adds	r0, #61	@ 0x3d
1006290e:	7a40      	ldrb	r0, [r0, #9]
10062910:	0700      	lsls	r0, r0, #28
10062912:	d528      	bpl.n	10062966 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10062914:	9101      	str	r1, [sp, #4]
10062916:	9302      	str	r3, [sp, #8]
10062918:	4816      	ldr	r0, [pc, #88]	@ (10062974 <__arm_cp.26_1>)
1006291a:	6800      	ldr	r0, [r0, #0]
1006291c:	0769      	lsls	r1, r5, #29
1006291e:	0ec9      	lsrs	r1, r1, #27
10062920:	1840      	adds	r0, r0, r1
10062922:	6900      	ldr	r0, [r0, #16]
10062924:	2225      	movs	r2, #37	@ 0x25
10062926:	2304      	movs	r3, #4
10062928:	4629      	mov	r1, r5
1006292a:	9300      	str	r3, [sp, #0]
1006292c:	f7f1 f900 	bl	10053b30 <aci_event_fifo_push_header>
10062930:	2800      	cmp	r0, #0
10062932:	d01a      	beq.n	1006296a <hci_le_read_remote_features_complete_event_push_noinline+0x76>
10062934:	4606      	mov	r6, r0
10062936:	7247      	strb	r7, [r0, #9]
10062938:	9801      	ldr	r0, [sp, #4]
1006293a:	7230      	strb	r0, [r6, #8]
1006293c:	0a38      	lsrs	r0, r7, #8
1006293e:	72b0      	strb	r0, [r6, #10]
10062940:	4630      	mov	r0, r6
10062942:	300b      	adds	r0, #11
10062944:	2208      	movs	r2, #8
10062946:	9902      	ldr	r1, [sp, #8]
10062948:	f7ee fba6 	bl	10051098 <BLEPLAT_MemCpy>
1006294c:	9900      	ldr	r1, [sp, #0]
1006294e:	71f1      	strb	r1, [r6, #7]
10062950:	200c      	movs	r0, #12
10062952:	71b0      	strb	r0, [r6, #6]
10062954:	203e      	movs	r0, #62	@ 0x3e
10062956:	7170      	strb	r0, [r6, #5]
10062958:	7131      	strb	r1, [r6, #4]
1006295a:	4628      	mov	r0, r5
1006295c:	4631      	mov	r1, r6
1006295e:	f7f1 f984 	bl	10053c6a <aci_event_fifo_push>
10062962:	e000      	b.n	10062966 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10062964:	2486      	movs	r4, #134	@ 0x86
10062966:	4620      	mov	r0, r4
10062968:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006296a:	2407      	movs	r4, #7
1006296c:	e7fb      	b.n	10062966 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
1006296e:	46c0      	nop			@ (mov r8, r8)

10062970 <__arm_cp.26_0>:
10062970:	20002468 	.word	0x20002468

10062974 <__arm_cp.26_1>:
10062974:	20002418 	.word	0x20002418

10062978 <aci_l2cap_proc_timeout_event_cb>:
10062978:	b510      	push	{r4, lr}
1006297a:	b0ff      	sub	sp, #508	@ 0x1fc
1006297c:	b083      	sub	sp, #12
1006297e:	8889      	ldrh	r1, [r1, #4]
10062980:	466c      	mov	r4, sp
10062982:	1da0      	adds	r0, r4, #6
10062984:	f7f1 fe52 	bl	1005462c <aci_l2cap_proc_timeout_event_copy>
10062988:	7a21      	ldrb	r1, [r4, #8]
1006298a:	1d48      	adds	r0, r1, #5
1006298c:	70a0      	strb	r0, [r4, #2]
1006298e:	0a00      	lsrs	r0, r0, #8
10062990:	70e0      	strb	r0, [r4, #3]
10062992:	2001      	movs	r0, #1
10062994:	7120      	strb	r0, [r4, #4]
10062996:	20ff      	movs	r0, #255	@ 0xff
10062998:	7060      	strb	r0, [r4, #1]
1006299a:	2082      	movs	r0, #130	@ 0x82
1006299c:	7020      	strb	r0, [r4, #0]
1006299e:	2008      	movs	r0, #8
100629a0:	7160      	strb	r0, [r4, #5]
100629a2:	3109      	adds	r1, #9
100629a4:	4620      	mov	r0, r4
100629a6:	f7ea fd45 	bl	1004d434 <BLE_STACK_Event>
100629aa:	b07f      	add	sp, #508	@ 0x1fc
100629ac:	b003      	add	sp, #12
100629ae:	bd10      	pop	{r4, pc}

100629b0 <aci_hal_fw_error_event_push_noinline>:
100629b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100629b2:	4604      	mov	r4, r0
100629b4:	06c0      	lsls	r0, r0, #27
100629b6:	d42d      	bmi.n	10062a14 <aci_hal_fw_error_event_push_noinline+0x64>
100629b8:	4615      	mov	r5, r2
100629ba:	460f      	mov	r7, r1
100629bc:	9300      	str	r3, [sp, #0]
100629be:	4818      	ldr	r0, [pc, #96]	@ (10062a20 <__arm_cp.0_0>)
100629c0:	6800      	ldr	r0, [r0, #0]
100629c2:	0761      	lsls	r1, r4, #29
100629c4:	0ec9      	lsrs	r1, r1, #27
100629c6:	1840      	adds	r0, r0, r1
100629c8:	6900      	ldr	r0, [r0, #16]
100629ca:	1e51      	subs	r1, r2, #1
100629cc:	2203      	movs	r2, #3
100629ce:	430a      	orrs	r2, r1
100629d0:	3209      	adds	r2, #9
100629d2:	0891      	lsrs	r1, r2, #2
100629d4:	b28b      	uxth	r3, r1
100629d6:	2240      	movs	r2, #64	@ 0x40
100629d8:	4621      	mov	r1, r4
100629da:	f7f1 f8a9 	bl	10053b30 <aci_event_fifo_push_header>
100629de:	2800      	cmp	r0, #0
100629e0:	d01a      	beq.n	10062a18 <aci_hal_fw_error_event_push_noinline+0x68>
100629e2:	4606      	mov	r6, r0
100629e4:	72c5      	strb	r5, [r0, #11]
100629e6:	7287      	strb	r7, [r0, #10]
100629e8:	300c      	adds	r0, #12
100629ea:	9900      	ldr	r1, [sp, #0]
100629ec:	462a      	mov	r2, r5
100629ee:	f7ee fb53 	bl	10051098 <BLEPLAT_MemCpy>
100629f2:	2700      	movs	r7, #0
100629f4:	7277      	strb	r7, [r6, #9]
100629f6:	2006      	movs	r0, #6
100629f8:	7230      	strb	r0, [r6, #8]
100629fa:	1d28      	adds	r0, r5, #4
100629fc:	0a01      	lsrs	r1, r0, #8
100629fe:	71f1      	strb	r1, [r6, #7]
10062a00:	71b0      	strb	r0, [r6, #6]
10062a02:	20ff      	movs	r0, #255	@ 0xff
10062a04:	7170      	strb	r0, [r6, #5]
10062a06:	2082      	movs	r0, #130	@ 0x82
10062a08:	7130      	strb	r0, [r6, #4]
10062a0a:	4620      	mov	r0, r4
10062a0c:	4631      	mov	r1, r6
10062a0e:	f7f1 f92c 	bl	10053c6a <aci_event_fifo_push>
10062a12:	e002      	b.n	10062a1a <aci_hal_fw_error_event_push_noinline+0x6a>
10062a14:	2786      	movs	r7, #134	@ 0x86
10062a16:	e000      	b.n	10062a1a <aci_hal_fw_error_event_push_noinline+0x6a>
10062a18:	2707      	movs	r7, #7
10062a1a:	4638      	mov	r0, r7
10062a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062a1e:	46c0      	nop			@ (mov r8, r8)

10062a20 <__arm_cp.0_0>:
10062a20:	20002418 	.word	0x20002418

10062a24 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
10062a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062a26:	4604      	mov	r4, r0
10062a28:	06c0      	lsls	r0, r0, #27
10062a2a:	d42d      	bmi.n	10062a88 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
10062a2c:	4616      	mov	r6, r2
10062a2e:	460d      	mov	r5, r1
10062a30:	4818      	ldr	r0, [pc, #96]	@ (10062a94 <__arm_cp.1_0>)
10062a32:	6800      	ldr	r0, [r0, #0]
10062a34:	0761      	lsls	r1, r4, #29
10062a36:	0ec9      	lsrs	r1, r1, #27
10062a38:	1840      	adds	r0, r0, r1
10062a3a:	6900      	ldr	r0, [r0, #16]
10062a3c:	2241      	movs	r2, #65	@ 0x41
10062a3e:	2304      	movs	r3, #4
10062a40:	4621      	mov	r1, r4
10062a42:	f7f1 f875 	bl	10053b30 <aci_event_fifo_push_header>
10062a46:	2800      	cmp	r0, #0
10062a48:	d020      	beq.n	10062a8c <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
10062a4a:	4601      	mov	r1, r0
10062a4c:	300a      	adds	r0, #10
10062a4e:	7106      	strb	r6, [r0, #4]
10062a50:	7005      	strb	r5, [r0, #0]
10062a52:	2700      	movs	r7, #0
10062a54:	724f      	strb	r7, [r1, #9]
10062a56:	2210      	movs	r2, #16
10062a58:	720a      	strb	r2, [r1, #8]
10062a5a:	71cf      	strb	r7, [r1, #7]
10062a5c:	220a      	movs	r2, #10
10062a5e:	718a      	strb	r2, [r1, #6]
10062a60:	22ff      	movs	r2, #255	@ 0xff
10062a62:	714a      	strb	r2, [r1, #5]
10062a64:	2282      	movs	r2, #130	@ 0x82
10062a66:	710a      	strb	r2, [r1, #4]
10062a68:	0e32      	lsrs	r2, r6, #24
10062a6a:	71c2      	strb	r2, [r0, #7]
10062a6c:	0c32      	lsrs	r2, r6, #16
10062a6e:	7182      	strb	r2, [r0, #6]
10062a70:	0a32      	lsrs	r2, r6, #8
10062a72:	7142      	strb	r2, [r0, #5]
10062a74:	0e2a      	lsrs	r2, r5, #24
10062a76:	70c2      	strb	r2, [r0, #3]
10062a78:	0c2a      	lsrs	r2, r5, #16
10062a7a:	7082      	strb	r2, [r0, #2]
10062a7c:	0a2a      	lsrs	r2, r5, #8
10062a7e:	7042      	strb	r2, [r0, #1]
10062a80:	4620      	mov	r0, r4
10062a82:	f7f1 f8f2 	bl	10053c6a <aci_event_fifo_push>
10062a86:	e002      	b.n	10062a8e <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10062a88:	2786      	movs	r7, #134	@ 0x86
10062a8a:	e000      	b.n	10062a8e <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10062a8c:	2707      	movs	r7, #7
10062a8e:	4638      	mov	r0, r7
10062a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062a92:	46c0      	nop			@ (mov r8, r8)

10062a94 <__arm_cp.1_0>:
10062a94:	20002418 	.word	0x20002418

10062a98 <aci_gap_pairing_complete_event_push_noinline>:
10062a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062a9a:	4604      	mov	r4, r0
10062a9c:	06c0      	lsls	r0, r0, #27
10062a9e:	d408      	bmi.n	10062ab2 <aci_gap_pairing_complete_event_push_noinline+0x1a>
10062aa0:	460d      	mov	r5, r1
10062aa2:	4819      	ldr	r0, [pc, #100]	@ (10062b08 <__arm_cp.1_0>)
10062aa4:	6800      	ldr	r0, [r0, #0]
10062aa6:	214e      	movs	r1, #78	@ 0x4e
10062aa8:	5c40      	ldrb	r0, [r0, r1]
10062aaa:	0780      	lsls	r0, r0, #30
10062aac:	d403      	bmi.n	10062ab6 <aci_gap_pairing_complete_event_push_noinline+0x1e>
10062aae:	2600      	movs	r6, #0
10062ab0:	e028      	b.n	10062b04 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10062ab2:	2686      	movs	r6, #134	@ 0x86
10062ab4:	e026      	b.n	10062b04 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10062ab6:	461f      	mov	r7, r3
10062ab8:	4616      	mov	r6, r2
10062aba:	4814      	ldr	r0, [pc, #80]	@ (10062b0c <__arm_cp.1_1>)
10062abc:	6800      	ldr	r0, [r0, #0]
10062abe:	0761      	lsls	r1, r4, #29
10062ac0:	0ec9      	lsrs	r1, r1, #27
10062ac2:	1840      	adds	r0, r0, r1
10062ac4:	6900      	ldr	r0, [r0, #16]
10062ac6:	2245      	movs	r2, #69	@ 0x45
10062ac8:	2303      	movs	r3, #3
10062aca:	4621      	mov	r1, r4
10062acc:	f7f1 f830 	bl	10053b30 <aci_event_fifo_push_header>
10062ad0:	2800      	cmp	r0, #0
10062ad2:	d016      	beq.n	10062b02 <aci_gap_pairing_complete_event_push_noinline+0x6a>
10062ad4:	4601      	mov	r1, r0
10062ad6:	7285      	strb	r5, [r0, #10]
10062ad8:	2004      	movs	r0, #4
10062ada:	7248      	strb	r0, [r1, #9]
10062adc:	2001      	movs	r0, #1
10062ade:	7208      	strb	r0, [r1, #8]
10062ae0:	4632      	mov	r2, r6
10062ae2:	2600      	movs	r6, #0
10062ae4:	71ce      	strb	r6, [r1, #7]
10062ae6:	2006      	movs	r0, #6
10062ae8:	7188      	strb	r0, [r1, #6]
10062aea:	734f      	strb	r7, [r1, #13]
10062aec:	730a      	strb	r2, [r1, #12]
10062aee:	20ff      	movs	r0, #255	@ 0xff
10062af0:	7148      	strb	r0, [r1, #5]
10062af2:	2082      	movs	r0, #130	@ 0x82
10062af4:	7108      	strb	r0, [r1, #4]
10062af6:	0a28      	lsrs	r0, r5, #8
10062af8:	72c8      	strb	r0, [r1, #11]
10062afa:	4620      	mov	r0, r4
10062afc:	f7f1 f8b5 	bl	10053c6a <aci_event_fifo_push>
10062b00:	e000      	b.n	10062b04 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10062b02:	2607      	movs	r6, #7
10062b04:	4630      	mov	r0, r6
10062b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062b08 <__arm_cp.1_0>:
10062b08:	20002468 	.word	0x20002468

10062b0c <__arm_cp.1_1>:
10062b0c:	20002418 	.word	0x20002418

10062b10 <GAT_att_clt_init>:
10062b10:	b580      	push	{r7, lr}
10062b12:	f000 fd35 	bl	10063580 <GAT_clt_init>
10062b16:	bd80      	pop	{r7, pc}

10062b18 <GAT_att_clt_rcv>:
10062b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062b1a:	4604      	mov	r4, r0
10062b1c:	8805      	ldrh	r5, [r0, #0]
10062b1e:	f7f5 fb6a 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10062b22:	4601      	mov	r1, r0
10062b24:	4628      	mov	r0, r5
10062b26:	f7f2 fcd9 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10062b2a:	4605      	mov	r5, r0
10062b2c:	4620      	mov	r0, r4
10062b2e:	f000 f8d7 	bl	10062ce0 <GAT_att_cmn_get_opcode>
10062b32:	281d      	cmp	r0, #29
10062b34:	d003      	beq.n	10062b3e <GAT_att_clt_rcv+0x26>
10062b36:	2823      	cmp	r0, #35	@ 0x23
10062b38:	d001      	beq.n	10062b3e <GAT_att_clt_rcv+0x26>
10062b3a:	281b      	cmp	r0, #27
10062b3c:	d10e      	bne.n	10062b5c <GAT_att_clt_rcv+0x44>
10062b3e:	8861      	ldrh	r1, [r4, #2]
10062b40:	88ea      	ldrh	r2, [r5, #6]
10062b42:	4291      	cmp	r1, r2
10062b44:	d805      	bhi.n	10062b52 <GAT_att_clt_rcv+0x3a>
10062b46:	2903      	cmp	r1, #3
10062b48:	d303      	bcc.n	10062b52 <GAT_att_clt_rcv+0x3a>
10062b4a:	2823      	cmp	r0, #35	@ 0x23
10062b4c:	d167      	bne.n	10062c1e <GAT_att_clt_rcv+0x106>
10062b4e:	2904      	cmp	r1, #4
10062b50:	d865      	bhi.n	10062c1e <GAT_att_clt_rcv+0x106>
10062b52:	4620      	mov	r0, r4
10062b54:	f7f0 fe38 	bl	100537c8 <ACL_pkt_release>
10062b58:	2000      	movs	r0, #0
10062b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062b5c:	4620      	mov	r0, r4
10062b5e:	f000 f8bf 	bl	10062ce0 <GAT_att_cmn_get_opcode>
10062b62:	88a9      	ldrh	r1, [r5, #4]
10062b64:	06ca      	lsls	r2, r1, #27
10062b66:	d56e      	bpl.n	10062c46 <GAT_att_clt_rcv+0x12e>
10062b68:	2801      	cmp	r0, #1
10062b6a:	d002      	beq.n	10062b72 <GAT_att_clt_rcv+0x5a>
10062b6c:	78aa      	ldrb	r2, [r5, #2]
10062b6e:	4290      	cmp	r0, r2
10062b70:	d169      	bne.n	10062c46 <GAT_att_clt_rcv+0x12e>
10062b72:	2010      	movs	r0, #16
10062b74:	4381      	bics	r1, r0
10062b76:	80a9      	strh	r1, [r5, #4]
10062b78:	896a      	ldrh	r2, [r5, #10]
10062b7a:	8929      	ldrh	r1, [r5, #8]
10062b7c:	2603      	movs	r6, #3
10062b7e:	4630      	mov	r0, r6
10062b80:	f7f2 fd1e 	bl	100555c0 <GAT_att_cmn_stop_timer>
10062b84:	8861      	ldrh	r1, [r4, #2]
10062b86:	88e8      	ldrh	r0, [r5, #6]
10062b88:	9100      	str	r1, [sp, #0]
10062b8a:	4281      	cmp	r1, r0
10062b8c:	d900      	bls.n	10062b90 <GAT_att_clt_rcv+0x78>
10062b8e:	e09a      	b.n	10062cc6 <GAT_att_clt_rcv+0x1ae>
10062b90:	4620      	mov	r0, r4
10062b92:	f000 f8a5 	bl	10062ce0 <GAT_att_cmn_get_opcode>
10062b96:	1e42      	subs	r2, r0, #1
10062b98:	2101      	movs	r1, #1
10062b9a:	41ca      	rors	r2, r1
10062b9c:	2300      	movs	r3, #0
10062b9e:	2a10      	cmp	r2, #16
10062ba0:	d900      	bls.n	10062ba4 <GAT_att_clt_rcv+0x8c>
10062ba2:	e088      	b.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062ba4:	0092      	lsls	r2, r2, #2
10062ba6:	461f      	mov	r7, r3
10062ba8:	a301      	add	r3, pc, #4	@ (adr r3, 10062bb0 <GAT_att_clt_rcv+0x98>)
10062baa:	589a      	ldr	r2, [r3, r2]
10062bac:	463b      	mov	r3, r7
10062bae:	4697      	mov	pc, r2
10062bb0:	10062c67 	.word	0x10062c67
10062bb4:	10062c6b 	.word	0x10062c6b
10062bb8:	10062c77 	.word	0x10062c77
10062bbc:	10062c95 	.word	0x10062c95
10062bc0:	10062bf5 	.word	0x10062bf5
10062bc4:	10062cbd 	.word	0x10062cbd
10062bc8:	10062cbd 	.word	0x10062cbd
10062bcc:	10062cbd 	.word	0x10062cbd
10062bd0:	10062bf5 	.word	0x10062bf5
10062bd4:	10062c63 	.word	0x10062c63
10062bd8:	10062cb7 	.word	0x10062cb7
10062bdc:	10062c6f 	.word	0x10062c6f
10062be0:	10062c63 	.word	0x10062c63
10062be4:	10062cb7 	.word	0x10062cb7
10062be8:	10062cb7 	.word	0x10062cb7
10062bec:	10062cb7 	.word	0x10062cb7
10062bf0:	10062cbd 	.word	0x10062cbd
10062bf4:	2809      	cmp	r0, #9
10062bf6:	d102      	bne.n	10062bfe <GAT_att_clt_rcv+0xe6>
10062bf8:	9900      	ldr	r1, [sp, #0]
10062bfa:	2904      	cmp	r1, #4
10062bfc:	d35b      	bcc.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062bfe:	2811      	cmp	r0, #17
10062c00:	d102      	bne.n	10062c08 <GAT_att_clt_rcv+0xf0>
10062c02:	9800      	ldr	r0, [sp, #0]
10062c04:	2806      	cmp	r0, #6
10062c06:	d356      	bcc.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c08:	89a0      	ldrh	r0, [r4, #12]
10062c0a:	1c40      	adds	r0, r0, #1
10062c0c:	b281      	uxth	r1, r0
10062c0e:	4620      	mov	r0, r4
10062c10:	f000 fa47 	bl	100630a2 <ACL_pkt_read_8b>
10062c14:	463b      	mov	r3, r7
10062c16:	2800      	cmp	r0, #0
10062c18:	d04d      	beq.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c1a:	4601      	mov	r1, r0
10062c1c:	e043      	b.n	10062ca6 <GAT_att_clt_rcv+0x18e>
10062c1e:	281d      	cmp	r0, #29
10062c20:	d10d      	bne.n	10062c3e <GAT_att_clt_rcv+0x126>
10062c22:	88a8      	ldrh	r0, [r5, #4]
10062c24:	0680      	lsls	r0, r0, #26
10062c26:	d412      	bmi.n	10062c4e <GAT_att_clt_rcv+0x136>
10062c28:	896a      	ldrh	r2, [r5, #10]
10062c2a:	8929      	ldrh	r1, [r5, #8]
10062c2c:	2002      	movs	r0, #2
10062c2e:	f7f2 fd11 	bl	10055654 <GAT_att_cmn_start_timer>
10062c32:	2800      	cmp	r0, #0
10062c34:	d14c      	bne.n	10062cd0 <GAT_att_clt_rcv+0x1b8>
10062c36:	88a8      	ldrh	r0, [r5, #4]
10062c38:	2120      	movs	r1, #32
10062c3a:	4301      	orrs	r1, r0
10062c3c:	80a9      	strh	r1, [r5, #4]
10062c3e:	4620      	mov	r0, r4
10062c40:	f000 ffb7 	bl	10063bb2 <GAT_clt_rcv_srv_initiated>
10062c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062c46:	4620      	mov	r0, r4
10062c48:	f000 fab7 	bl	100631ba <GAT_att_clt_unexpect_rx>
10062c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062c4e:	3508      	adds	r5, #8
10062c50:	2042      	movs	r0, #66	@ 0x42
10062c52:	2103      	movs	r1, #3
10062c54:	2202      	movs	r2, #2
10062c56:	462b      	mov	r3, r5
10062c58:	f7ff feaa 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
10062c5c:	2800      	cmp	r0, #0
10062c5e:	d137      	bne.n	10062cd0 <GAT_att_clt_rcv+0x1b8>
10062c60:	e777      	b.n	10062b52 <GAT_att_clt_rcv+0x3a>
10062c62:	460b      	mov	r3, r1
10062c64:	e027      	b.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c66:	2305      	movs	r3, #5
10062c68:	e025      	b.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c6a:	4633      	mov	r3, r6
10062c6c:	e023      	b.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c6e:	9b00      	ldr	r3, [sp, #0]
10062c70:	2b04      	cmp	r3, #4
10062c72:	d91f      	bls.n	10062cb4 <GAT_att_clt_rcv+0x19c>
10062c74:	e01f      	b.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c76:	9800      	ldr	r0, [sp, #0]
10062c78:	2806      	cmp	r0, #6
10062c7a:	d31c      	bcc.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c7c:	89a0      	ldrh	r0, [r4, #12]
10062c7e:	1c40      	adds	r0, r0, #1
10062c80:	b281      	uxth	r1, r0
10062c82:	4620      	mov	r0, r4
10062c84:	f000 fa0d 	bl	100630a2 <ACL_pkt_read_8b>
10062c88:	2801      	cmp	r0, #1
10062c8a:	d00b      	beq.n	10062ca4 <GAT_att_clt_rcv+0x18c>
10062c8c:	2802      	cmp	r0, #2
10062c8e:	d11a      	bne.n	10062cc6 <GAT_att_clt_rcv+0x1ae>
10062c90:	2112      	movs	r1, #18
10062c92:	e008      	b.n	10062ca6 <GAT_att_clt_rcv+0x18e>
10062c94:	9800      	ldr	r0, [sp, #0]
10062c96:	2802      	cmp	r0, #2
10062c98:	d30d      	bcc.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062c9a:	9b00      	ldr	r3, [sp, #0]
10062c9c:	1e58      	subs	r0, r3, #1
10062c9e:	0780      	lsls	r0, r0, #30
10062ca0:	d108      	bne.n	10062cb4 <GAT_att_clt_rcv+0x19c>
10062ca2:	e008      	b.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062ca4:	2104      	movs	r1, #4
10062ca6:	9e00      	ldr	r6, [sp, #0]
10062ca8:	1eb0      	subs	r0, r6, #2
10062caa:	f7dd fb4f 	bl	1004034c <__aeabi_uidivmod>
10062cae:	2900      	cmp	r1, #0
10062cb0:	4633      	mov	r3, r6
10062cb2:	d000      	beq.n	10062cb6 <GAT_att_clt_rcv+0x19e>
10062cb4:	2300      	movs	r3, #0
10062cb6:	9800      	ldr	r0, [sp, #0]
10062cb8:	4298      	cmp	r0, r3
10062cba:	d104      	bne.n	10062cc6 <GAT_att_clt_rcv+0x1ae>
10062cbc:	4807      	ldr	r0, [pc, #28]	@ (10062cdc <__arm_cp.1_0>)
10062cbe:	6801      	ldr	r1, [r0, #0]
10062cc0:	4620      	mov	r0, r4
10062cc2:	4788      	blx	r1
10062cc4:	e002      	b.n	10062ccc <GAT_att_clt_rcv+0x1b4>
10062cc6:	4620      	mov	r0, r4
10062cc8:	f000 ff5e 	bl	10063b88 <GAT_clt_rcv_corrupted>
10062ccc:	2884      	cmp	r0, #132	@ 0x84
10062cce:	d101      	bne.n	10062cd4 <GAT_att_clt_rcv+0x1bc>
10062cd0:	2084      	movs	r0, #132	@ 0x84
10062cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062cd4:	2000      	movs	r0, #0
10062cd6:	70a8      	strb	r0, [r5, #2]
10062cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062cda:	46c0      	nop			@ (mov r8, r8)

10062cdc <__arm_cp.1_0>:
10062cdc:	200028a4 	.word	0x200028a4

10062ce0 <GAT_att_cmn_get_opcode>:
10062ce0:	b580      	push	{r7, lr}
10062ce2:	8981      	ldrh	r1, [r0, #12]
10062ce4:	f000 f9dd 	bl	100630a2 <ACL_pkt_read_8b>
10062ce8:	bd80      	pop	{r7, pc}

10062cea <GAT_att_clt_connection>:
10062cea:	b580      	push	{r7, lr}
10062cec:	f000 fc70 	bl	100635d0 <GAT_clt_connection>
10062cf0:	bd80      	pop	{r7, pc}

10062cf2 <GAT_att_clt_bearer_close>:
10062cf2:	b580      	push	{r7, lr}
10062cf4:	f000 fc6e 	bl	100635d4 <GAT_clt_bearer_close>
10062cf8:	bd80      	pop	{r7, pc}
	...

10062cfc <GAT_att_clt_tx>:
10062cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062cfe:	4605      	mov	r5, r0
10062d00:	8881      	ldrh	r1, [r0, #4]
10062d02:	8840      	ldrh	r0, [r0, #2]
10062d04:	f7f2 fbea 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10062d08:	2800      	cmp	r0, #0
10062d0a:	d008      	beq.n	10062d1e <GAT_att_clt_tx+0x22>
10062d0c:	4604      	mov	r4, r0
10062d0e:	7829      	ldrb	r1, [r5, #0]
10062d10:	291e      	cmp	r1, #30
10062d12:	d106      	bne.n	10062d22 <GAT_att_clt_tx+0x26>
10062d14:	88a0      	ldrh	r0, [r4, #4]
10062d16:	0680      	lsls	r0, r0, #26
10062d18:	d439      	bmi.n	10062d8e <GAT_att_clt_tx+0x92>
10062d1a:	260c      	movs	r6, #12
10062d1c:	e193      	b.n	10063046 <GAT_att_clt_tx+0x34a>
10062d1e:	2612      	movs	r6, #18
10062d20:	e191      	b.n	10063046 <GAT_att_clt_tx+0x34a>
10062d22:	0648      	lsls	r0, r1, #25
10062d24:	d406      	bmi.n	10062d34 <GAT_att_clt_tx+0x38>
10062d26:	48ca      	ldr	r0, [pc, #808]	@ (10063050 <__arm_cp.5_0>)
10062d28:	4aca      	ldr	r2, [pc, #808]	@ (10063054 <__arm_cp.5_1>)
10062d2a:	6002      	str	r2, [r0, #0]
10062d2c:	88a0      	ldrh	r0, [r4, #4]
10062d2e:	06c0      	lsls	r0, r0, #27
10062d30:	d500      	bpl.n	10062d34 <GAT_att_clt_tx+0x38>
10062d32:	e16d      	b.n	10063010 <GAT_att_clt_tx+0x314>
10062d34:	88e0      	ldrh	r0, [r4, #6]
10062d36:	1e8a      	subs	r2, r1, #2
10062d38:	2686      	movs	r6, #134	@ 0x86
10062d3a:	2a1e      	cmp	r2, #30
10062d3c:	d900      	bls.n	10062d40 <GAT_att_clt_tx+0x44>
10062d3e:	e091      	b.n	10062e64 <GAT_att_clt_tx+0x168>
10062d40:	2703      	movs	r7, #3
10062d42:	0052      	lsls	r2, r2, #1
10062d44:	447a      	add	r2, pc
10062d46:	8892      	ldrh	r2, [r2, #4]
10062d48:	0052      	lsls	r2, r2, #1
10062d4a:	4497      	add	pc, r2
10062d4c:	017c0022 	.word	0x017c0022
10062d50:	017c001e 	.word	0x017c001e
10062d54:	017c009f 	.word	0x017c009f
10062d58:	017c00a2 	.word	0x017c00a2
10062d5c:	017c0022 	.word	0x017c0022
10062d60:	017c001e 	.word	0x017c001e
10062d64:	017c0094 	.word	0x017c0094
10062d68:	017c012d 	.word	0x017c012d
10062d6c:	017c0090 	.word	0x017c0090
10062d70:	017c017c 	.word	0x017c017c
10062d74:	017c00a9 	.word	0x017c00a9
10062d78:	017c00ac 	.word	0x017c00ac
10062d7c:	017c017c 	.word	0x017c017c
10062d80:	017c017c 	.word	0x017c017c
10062d84:	017c0021 	.word	0x017c0021
10062d88:	0094      	.short	0x0094
10062d8a:	2705      	movs	r7, #5
10062d8c:	e001      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062d8e:	88e0      	ldrh	r0, [r4, #6]
10062d90:	2701      	movs	r7, #1
10062d92:	b2b9      	uxth	r1, r7
10062d94:	4281      	cmp	r1, r0
10062d96:	d300      	bcc.n	10062d9a <GAT_att_clt_tx+0x9e>
10062d98:	4607      	mov	r7, r0
10062d9a:	9700      	str	r7, [sp, #0]
10062d9c:	b2bf      	uxth	r7, r7
10062d9e:	4620      	mov	r0, r4
10062da0:	4639      	mov	r1, r7
10062da2:	f7f2 fc99 	bl	100556d8 <GAT_att_cmn_get_pckt>
10062da6:	2800      	cmp	r0, #0
10062da8:	d02f      	beq.n	10062e0a <GAT_att_clt_tx+0x10e>
10062daa:	4606      	mov	r6, r0
10062dac:	782a      	ldrb	r2, [r5, #0]
10062dae:	8981      	ldrh	r1, [r0, #12]
10062db0:	f000 f954 	bl	1006305c <ACL_pkt_write_8b>
10062db4:	7828      	ldrb	r0, [r5, #0]
10062db6:	1e81      	subs	r1, r0, #2
10062db8:	2916      	cmp	r1, #22
10062dba:	d82d      	bhi.n	10062e18 <GAT_att_clt_tx+0x11c>
10062dbc:	0049      	lsls	r1, r1, #1
10062dbe:	46c0      	nop			@ (mov r8, r8)
10062dc0:	4479      	add	r1, pc
10062dc2:	8889      	ldrh	r1, [r1, #4]
10062dc4:	0049      	lsls	r1, r1, #1
10062dc6:	448f      	add	pc, r1
10062dc8:	010d0016 	.word	0x010d0016
10062dcc:	010d0070 	.word	0x010d0070
10062dd0:	010d0077 	.word	0x010d0077
10062dd4:	010d0093 	.word	0x010d0093
10062dd8:	010d00a1 	.word	0x010d00a1
10062ddc:	010d00aa 	.word	0x010d00aa
10062de0:	010d00ba 	.word	0x010d00ba
10062de4:	010d00c0 	.word	0x010d00c0
10062de8:	010d002f 	.word	0x010d002f
10062dec:	010d010d 	.word	0x010d010d
10062df0:	010d00ce 	.word	0x010d00ce
10062df4:	00e6      	.short	0x00e6
10062df6:	4898      	ldr	r0, [pc, #608]	@ (10063058 <__arm_cp.5_2>)
10062df8:	8a02      	ldrh	r2, [r0, #16]
10062dfa:	89b0      	ldrh	r0, [r6, #12]
10062dfc:	1c40      	adds	r0, r0, #1
10062dfe:	b281      	uxth	r1, r0
10062e00:	4630      	mov	r0, r6
10062e02:	f7f0 fd16 	bl	10053832 <ACL_pkt_write_16b>
10062e06:	2003      	movs	r0, #3
10062e08:	e0eb      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062e0a:	2008      	movs	r0, #8
10062e0c:	f7fe f9da 	bl	100611c4 <tsk_notify_idx>
10062e10:	f7ed fb5b 	bl	100504ca <BLE_STACK_ProcessRequest>
10062e14:	2688      	movs	r6, #136	@ 0x88
10062e16:	e116      	b.n	10063046 <GAT_att_clt_tx+0x34a>
10062e18:	2820      	cmp	r0, #32
10062e1a:	d100      	bne.n	10062e1e <GAT_att_clt_tx+0x122>
10062e1c:	e0ca      	b.n	10062fb4 <GAT_att_clt_tx+0x2b8>
10062e1e:	2852      	cmp	r0, #82	@ 0x52
10062e20:	d002      	beq.n	10062e28 <GAT_att_clt_tx+0x12c>
10062e22:	28d2      	cmp	r0, #210	@ 0xd2
10062e24:	d000      	beq.n	10062e28 <GAT_att_clt_tx+0x12c>
10062e26:	e0dd      	b.n	10062fe4 <GAT_att_clt_tx+0x2e8>
10062e28:	892a      	ldrh	r2, [r5, #8]
10062e2a:	89b0      	ldrh	r0, [r6, #12]
10062e2c:	1c40      	adds	r0, r0, #1
10062e2e:	b281      	uxth	r1, r0
10062e30:	4630      	mov	r0, r6
10062e32:	f7f0 fcfe 	bl	10053832 <ACL_pkt_write_16b>
10062e36:	68eb      	ldr	r3, [r5, #12]
10062e38:	896a      	ldrh	r2, [r5, #10]
10062e3a:	89b0      	ldrh	r0, [r6, #12]
10062e3c:	1cc0      	adds	r0, r0, #3
10062e3e:	b281      	uxth	r1, r0
10062e40:	4630      	mov	r0, r6
10062e42:	f7f0 fcff 	bl	10053844 <ACL_pkt_write>
10062e46:	7828      	ldrb	r0, [r5, #0]
10062e48:	2812      	cmp	r0, #18
10062e4a:	d100      	bne.n	10062e4e <GAT_att_clt_tx+0x152>
10062e4c:	e0b8      	b.n	10062fc0 <GAT_att_clt_tx+0x2c4>
10062e4e:	28d2      	cmp	r0, #210	@ 0xd2
10062e50:	d000      	beq.n	10062e54 <GAT_att_clt_tx+0x158>
10062e52:	e0c7      	b.n	10062fe4 <GAT_att_clt_tx+0x2e8>
10062e54:	9800      	ldr	r0, [sp, #0]
10062e56:	380c      	subs	r0, #12
10062e58:	8070      	strh	r0, [r6, #2]
10062e5a:	8920      	ldrh	r0, [r4, #8]
10062e5c:	4631      	mov	r1, r6
10062e5e:	f7fe f86c 	bl	10060f3a <smp_sap_sm2_packet_data_signing_compute>
10062e62:	e0bf      	b.n	10062fe4 <GAT_att_clt_tx+0x2e8>
10062e64:	2952      	cmp	r1, #82	@ 0x52
10062e66:	d002      	beq.n	10062e6e <GAT_att_clt_tx+0x172>
10062e68:	29d2      	cmp	r1, #210	@ 0xd2
10062e6a:	d000      	beq.n	10062e6e <GAT_att_clt_tx+0x172>
10062e6c:	e0eb      	b.n	10063046 <GAT_att_clt_tx+0x34a>
10062e6e:	29d2      	cmp	r1, #210	@ 0xd2
10062e70:	d008      	beq.n	10062e84 <GAT_att_clt_tx+0x188>
10062e72:	2103      	movs	r1, #3
10062e74:	e007      	b.n	10062e86 <GAT_att_clt_tx+0x18a>
10062e76:	7a29      	ldrb	r1, [r5, #8]
10062e78:	0049      	lsls	r1, r1, #1
10062e7a:	1c4f      	adds	r7, r1, #1
10062e7c:	4287      	cmp	r7, r0
10062e7e:	d800      	bhi.n	10062e82 <GAT_att_clt_tx+0x186>
10062e80:	e787      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062e82:	e0e0      	b.n	10063046 <GAT_att_clt_tx+0x34a>
10062e84:	210f      	movs	r1, #15
10062e86:	896a      	ldrh	r2, [r5, #10]
10062e88:	1857      	adds	r7, r2, r1
10062e8a:	e782      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062e8c:	89e9      	ldrh	r1, [r5, #14]
10062e8e:	1dcf      	adds	r7, r1, #7
10062e90:	e77f      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062e92:	68e9      	ldr	r1, [r5, #12]
10062e94:	7c09      	ldrb	r1, [r1, #16]
10062e96:	2980      	cmp	r1, #128	@ 0x80
10062e98:	d000      	beq.n	10062e9c <GAT_att_clt_tx+0x1a0>
10062e9a:	e089      	b.n	10062fb0 <GAT_att_clt_tx+0x2b4>
10062e9c:	2715      	movs	r7, #21
10062e9e:	e778      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062ea0:	89a9      	ldrh	r1, [r5, #12]
10062ea2:	1d4f      	adds	r7, r1, #5
10062ea4:	e775      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062ea6:	2702      	movs	r7, #2
10062ea8:	e773      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062eaa:	896a      	ldrh	r2, [r5, #10]
10062eac:	8929      	ldrh	r1, [r5, #8]
10062eae:	4630      	mov	r0, r6
10062eb0:	f000 f9a2 	bl	100631f8 <GAT_att_clt_fill_handle_range>
10062eb4:	2005      	movs	r0, #5
10062eb6:	e094      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062eb8:	896a      	ldrh	r2, [r5, #10]
10062eba:	8929      	ldrh	r1, [r5, #8]
10062ebc:	4630      	mov	r0, r6
10062ebe:	f000 f99b 	bl	100631f8 <GAT_att_clt_fill_handle_range>
10062ec2:	89aa      	ldrh	r2, [r5, #12]
10062ec4:	89b0      	ldrh	r0, [r6, #12]
10062ec6:	1d40      	adds	r0, r0, #5
10062ec8:	b281      	uxth	r1, r0
10062eca:	4630      	mov	r0, r6
10062ecc:	f7f0 fcb1 	bl	10053832 <ACL_pkt_write_16b>
10062ed0:	89e8      	ldrh	r0, [r5, #14]
10062ed2:	1dc0      	adds	r0, r0, #7
10062ed4:	42b8      	cmp	r0, r7
10062ed6:	d800      	bhi.n	10062eda <GAT_att_clt_tx+0x1de>
10062ed8:	4607      	mov	r7, r0
10062eda:	1ff8      	subs	r0, r7, #7
10062edc:	b282      	uxth	r2, r0
10062ede:	692b      	ldr	r3, [r5, #16]
10062ee0:	89b0      	ldrh	r0, [r6, #12]
10062ee2:	1dc0      	adds	r0, r0, #7
10062ee4:	b281      	uxth	r1, r0
10062ee6:	4630      	mov	r0, r6
10062ee8:	f7f0 fcac 	bl	10053844 <ACL_pkt_write>
10062eec:	2007      	movs	r0, #7
10062eee:	e078      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062ef0:	896a      	ldrh	r2, [r5, #10]
10062ef2:	8929      	ldrh	r1, [r5, #8]
10062ef4:	4630      	mov	r0, r6
10062ef6:	f000 f97f 	bl	100631f8 <GAT_att_clt_fill_handle_range>
10062efa:	89b0      	ldrh	r0, [r6, #12]
10062efc:	1d40      	adds	r0, r0, #5
10062efe:	68eb      	ldr	r3, [r5, #12]
10062f00:	7c19      	ldrb	r1, [r3, #16]
10062f02:	2980      	cmp	r1, #128	@ 0x80
10062f04:	d15e      	bne.n	10062fc4 <GAT_att_clt_tx+0x2c8>
10062f06:	b281      	uxth	r1, r0
10062f08:	2210      	movs	r2, #16
10062f0a:	e05e      	b.n	10062fca <GAT_att_clt_tx+0x2ce>
10062f0c:	892a      	ldrh	r2, [r5, #8]
10062f0e:	89b0      	ldrh	r0, [r6, #12]
10062f10:	1c40      	adds	r0, r0, #1
10062f12:	b281      	uxth	r1, r0
10062f14:	4630      	mov	r0, r6
10062f16:	f7f0 fc8c 	bl	10053832 <ACL_pkt_write_16b>
10062f1a:	200b      	movs	r0, #11
10062f1c:	e061      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062f1e:	892a      	ldrh	r2, [r5, #8]
10062f20:	89b0      	ldrh	r0, [r6, #12]
10062f22:	1c40      	adds	r0, r0, #1
10062f24:	b281      	uxth	r1, r0
10062f26:	4630      	mov	r0, r6
10062f28:	f7f0 fc83 	bl	10053832 <ACL_pkt_write_16b>
10062f2c:	896a      	ldrh	r2, [r5, #10]
10062f2e:	89b0      	ldrh	r0, [r6, #12]
10062f30:	1cc0      	adds	r0, r0, #3
10062f32:	b281      	uxth	r1, r0
10062f34:	4630      	mov	r0, r6
10062f36:	f7f0 fc7c 	bl	10053832 <ACL_pkt_write_16b>
10062f3a:	200d      	movs	r0, #13
10062f3c:	e051      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062f3e:	4628      	mov	r0, r5
10062f40:	4631      	mov	r1, r6
10062f42:	f000 f94d 	bl	100631e0 <GAT_att_clt_fill_read_multi_req>
10062f46:	200f      	movs	r0, #15
10062f48:	e04b      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062f4a:	896a      	ldrh	r2, [r5, #10]
10062f4c:	8929      	ldrh	r1, [r5, #8]
10062f4e:	4630      	mov	r0, r6
10062f50:	f000 f952 	bl	100631f8 <GAT_att_clt_fill_handle_range>
10062f54:	89b0      	ldrh	r0, [r6, #12]
10062f56:	1d40      	adds	r0, r0, #5
10062f58:	68eb      	ldr	r3, [r5, #12]
10062f5a:	7c19      	ldrb	r1, [r3, #16]
10062f5c:	2980      	cmp	r1, #128	@ 0x80
10062f5e:	d139      	bne.n	10062fd4 <GAT_att_clt_tx+0x2d8>
10062f60:	b281      	uxth	r1, r0
10062f62:	2210      	movs	r2, #16
10062f64:	e039      	b.n	10062fda <GAT_att_clt_tx+0x2de>
10062f66:	892a      	ldrh	r2, [r5, #8]
10062f68:	89b0      	ldrh	r0, [r6, #12]
10062f6a:	1c40      	adds	r0, r0, #1
10062f6c:	b281      	uxth	r1, r0
10062f6e:	4630      	mov	r0, r6
10062f70:	f7f0 fc5f 	bl	10053832 <ACL_pkt_write_16b>
10062f74:	896a      	ldrh	r2, [r5, #10]
10062f76:	89b0      	ldrh	r0, [r6, #12]
10062f78:	1cc0      	adds	r0, r0, #3
10062f7a:	b281      	uxth	r1, r0
10062f7c:	4630      	mov	r0, r6
10062f7e:	f7f0 fc58 	bl	10053832 <ACL_pkt_write_16b>
10062f82:	692b      	ldr	r3, [r5, #16]
10062f84:	89aa      	ldrh	r2, [r5, #12]
10062f86:	89b0      	ldrh	r0, [r6, #12]
10062f88:	1d40      	adds	r0, r0, #5
10062f8a:	b281      	uxth	r1, r0
10062f8c:	4630      	mov	r0, r6
10062f8e:	f7f0 fc59 	bl	10053844 <ACL_pkt_write>
10062f92:	2017      	movs	r0, #23
10062f94:	e025      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062f96:	7a2a      	ldrb	r2, [r5, #8]
10062f98:	89b0      	ldrh	r0, [r6, #12]
10062f9a:	1c40      	adds	r0, r0, #1
10062f9c:	b281      	uxth	r1, r0
10062f9e:	4630      	mov	r0, r6
10062fa0:	f000 f85c 	bl	1006305c <ACL_pkt_write_8b>
10062fa4:	2019      	movs	r0, #25
10062fa6:	e01c      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062fa8:	68e9      	ldr	r1, [r5, #12]
10062faa:	7c09      	ldrb	r1, [r1, #16]
10062fac:	2980      	cmp	r1, #128	@ 0x80
10062fae:	d04c      	beq.n	1006304a <GAT_att_clt_tx+0x34e>
10062fb0:	2707      	movs	r7, #7
10062fb2:	e6ee      	b.n	10062d92 <GAT_att_clt_tx+0x96>
10062fb4:	4628      	mov	r0, r5
10062fb6:	4631      	mov	r1, r6
10062fb8:	f000 f912 	bl	100631e0 <GAT_att_clt_fill_read_multi_req>
10062fbc:	2021      	movs	r0, #33	@ 0x21
10062fbe:	e010      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062fc0:	2013      	movs	r0, #19
10062fc2:	e00e      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062fc4:	b281      	uxth	r1, r0
10062fc6:	330c      	adds	r3, #12
10062fc8:	2202      	movs	r2, #2
10062fca:	4630      	mov	r0, r6
10062fcc:	f7f0 fc3a 	bl	10053844 <ACL_pkt_write>
10062fd0:	2009      	movs	r0, #9
10062fd2:	e006      	b.n	10062fe2 <GAT_att_clt_tx+0x2e6>
10062fd4:	b281      	uxth	r1, r0
10062fd6:	330c      	adds	r3, #12
10062fd8:	2202      	movs	r2, #2
10062fda:	4630      	mov	r0, r6
10062fdc:	f7f0 fc32 	bl	10053844 <ACL_pkt_write>
10062fe0:	2011      	movs	r0, #17
10062fe2:	70a0      	strb	r0, [r4, #2]
10062fe4:	9800      	ldr	r0, [sp, #0]
10062fe6:	8070      	strh	r0, [r6, #2]
10062fe8:	782a      	ldrb	r2, [r5, #0]
10062fea:	89b1      	ldrh	r1, [r6, #12]
10062fec:	4630      	mov	r0, r6
10062fee:	f000 f835 	bl	1006305c <ACL_pkt_write_8b>
10062ff2:	7828      	ldrb	r0, [r5, #0]
10062ff4:	0641      	lsls	r1, r0, #25
10062ff6:	d411      	bmi.n	1006301c <GAT_att_clt_tx+0x320>
10062ff8:	281e      	cmp	r0, #30
10062ffa:	d00f      	beq.n	1006301c <GAT_att_clt_tx+0x320>
10062ffc:	8962      	ldrh	r2, [r4, #10]
10062ffe:	8921      	ldrh	r1, [r4, #8]
10063000:	2003      	movs	r0, #3
10063002:	f7f2 fb27 	bl	10055654 <GAT_att_cmn_start_timer>
10063006:	2800      	cmp	r0, #0
10063008:	d004      	beq.n	10063014 <GAT_att_clt_tx+0x318>
1006300a:	4630      	mov	r0, r6
1006300c:	f7f0 fbdc 	bl	100537c8 <ACL_pkt_release>
10063010:	2684      	movs	r6, #132	@ 0x84
10063012:	e018      	b.n	10063046 <GAT_att_clt_tx+0x34a>
10063014:	88a0      	ldrh	r0, [r4, #4]
10063016:	2110      	movs	r1, #16
10063018:	4301      	orrs	r1, r0
1006301a:	80a1      	strh	r1, [r4, #4]
1006301c:	8960      	ldrh	r0, [r4, #10]
1006301e:	4631      	mov	r1, r6
10063020:	f7f2 fade 	bl	100555e0 <GAT_att_cmn_send>
10063024:	2800      	cmp	r0, #0
10063026:	d001      	beq.n	1006302c <GAT_att_clt_tx+0x330>
10063028:	2681      	movs	r6, #129	@ 0x81
1006302a:	e00c      	b.n	10063046 <GAT_att_clt_tx+0x34a>
1006302c:	7828      	ldrb	r0, [r5, #0]
1006302e:	2600      	movs	r6, #0
10063030:	281e      	cmp	r0, #30
10063032:	d108      	bne.n	10063046 <GAT_att_clt_tx+0x34a>
10063034:	8962      	ldrh	r2, [r4, #10]
10063036:	8921      	ldrh	r1, [r4, #8]
10063038:	2002      	movs	r0, #2
1006303a:	f7f2 fac1 	bl	100555c0 <GAT_att_cmn_stop_timer>
1006303e:	88a0      	ldrh	r0, [r4, #4]
10063040:	2120      	movs	r1, #32
10063042:	4388      	bics	r0, r1
10063044:	80a0      	strh	r0, [r4, #4]
10063046:	4630      	mov	r0, r6
10063048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006304a:	2711      	movs	r7, #17
1006304c:	e6a1      	b.n	10062d92 <GAT_att_clt_tx+0x96>
1006304e:	46c0      	nop			@ (mov r8, r8)

10063050 <__arm_cp.5_0>:
10063050:	200028a4 	.word	0x200028a4

10063054 <__arm_cp.5_1>:
10063054:	10063655 	.word	0x10063655

10063058 <__arm_cp.5_2>:
10063058:	2000247c 	.word	0x2000247c

1006305c <ACL_pkt_write_8b>:
1006305c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006305e:	4614      	mov	r4, r2
10063060:	6840      	ldr	r0, [r0, #4]
10063062:	2920      	cmp	r1, #32
10063064:	d304      	bcc.n	10063070 <ACL_pkt_write_8b+0x14>
10063066:	ad01      	add	r5, sp, #4
10063068:	462a      	mov	r2, r5
1006306a:	f7fc fb74 	bl	1005f756 <Mem_Buff_get_buff_off>
1006306e:	8829      	ldrh	r1, [r5, #0]
10063070:	1840      	adds	r0, r0, r1
10063072:	7104      	strb	r4, [r0, #4]
10063074:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10063076 <GAT_att_clt_read_grp_type_get_last_attr_h>:
10063076:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063078:	4604      	mov	r4, r0
1006307a:	8980      	ldrh	r0, [r0, #12]
1006307c:	1c40      	adds	r0, r0, #1
1006307e:	b281      	uxth	r1, r0
10063080:	4620      	mov	r0, r4
10063082:	f000 f80e 	bl	100630a2 <ACL_pkt_read_8b>
10063086:	8861      	ldrh	r1, [r4, #2]
10063088:	1a08      	subs	r0, r1, r0
1006308a:	89a1      	ldrh	r1, [r4, #12]
1006308c:	1840      	adds	r0, r0, r1
1006308e:	1c80      	adds	r0, r0, #2
10063090:	b281      	uxth	r1, r0
10063092:	2202      	movs	r2, #2
10063094:	ad01      	add	r5, sp, #4
10063096:	4620      	mov	r0, r4
10063098:	462b      	mov	r3, r5
1006309a:	f7f0 fbb1 	bl	10053800 <ACL_pkt_read>
1006309e:	8828      	ldrh	r0, [r5, #0]
100630a0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100630a2 <ACL_pkt_read_8b>:
100630a2:	b51c      	push	{r2, r3, r4, lr}
100630a4:	291f      	cmp	r1, #31
100630a6:	d803      	bhi.n	100630b0 <ACL_pkt_read_8b+0xe>
100630a8:	aa01      	add	r2, sp, #4
100630aa:	8011      	strh	r1, [r2, #0]
100630ac:	6840      	ldr	r0, [r0, #4]
100630ae:	e005      	b.n	100630bc <ACL_pkt_read_8b+0x1a>
100630b0:	6840      	ldr	r0, [r0, #4]
100630b2:	ac01      	add	r4, sp, #4
100630b4:	4622      	mov	r2, r4
100630b6:	f7fc fb4e 	bl	1005f756 <Mem_Buff_get_buff_off>
100630ba:	8821      	ldrh	r1, [r4, #0]
100630bc:	1840      	adds	r0, r0, r1
100630be:	7900      	ldrb	r0, [r0, #4]
100630c0:	bd1c      	pop	{r2, r3, r4, pc}

100630c2 <GAT_att_clt_find_type_val_get_last_attr_h>:
100630c2:	b51c      	push	{r2, r3, r4, lr}
100630c4:	8981      	ldrh	r1, [r0, #12]
100630c6:	8842      	ldrh	r2, [r0, #2]
100630c8:	1851      	adds	r1, r2, r1
100630ca:	1e89      	subs	r1, r1, #2
100630cc:	b289      	uxth	r1, r1
100630ce:	2202      	movs	r2, #2
100630d0:	ac01      	add	r4, sp, #4
100630d2:	4623      	mov	r3, r4
100630d4:	f7f0 fb94 	bl	10053800 <ACL_pkt_read>
100630d8:	8820      	ldrh	r0, [r4, #0]
100630da:	bd1c      	pop	{r2, r3, r4, pc}

100630dc <GAT_att_clt_parse_error_resp>:
100630dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100630de:	460e      	mov	r6, r1
100630e0:	8841      	ldrh	r1, [r0, #2]
100630e2:	2905      	cmp	r1, #5
100630e4:	d112      	bne.n	1006310c <GAT_att_clt_parse_error_resp+0x30>
100630e6:	461c      	mov	r4, r3
100630e8:	4615      	mov	r5, r2
100630ea:	8981      	ldrh	r1, [r0, #12]
100630ec:	2205      	movs	r2, #5
100630ee:	af01      	add	r7, sp, #4
100630f0:	463b      	mov	r3, r7
100630f2:	f7f0 fb85 	bl	10053800 <ACL_pkt_read>
100630f6:	7878      	ldrb	r0, [r7, #1]
100630f8:	7030      	strb	r0, [r6, #0]
100630fa:	78b8      	ldrb	r0, [r7, #2]
100630fc:	78f9      	ldrb	r1, [r7, #3]
100630fe:	0209      	lsls	r1, r1, #8
10063100:	1808      	adds	r0, r1, r0
10063102:	8028      	strh	r0, [r5, #0]
10063104:	9802      	ldr	r0, [sp, #8]
10063106:	7020      	strb	r0, [r4, #0]
10063108:	2000      	movs	r0, #0
1006310a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006310c:	2086      	movs	r0, #134	@ 0x86
1006310e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10063110 <GAT_att_clt_read_type_get_last_attr_h>:
10063110:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063112:	4604      	mov	r4, r0
10063114:	8980      	ldrh	r0, [r0, #12]
10063116:	1c40      	adds	r0, r0, #1
10063118:	b281      	uxth	r1, r0
1006311a:	4620      	mov	r0, r4
1006311c:	f7ff ffc1 	bl	100630a2 <ACL_pkt_read_8b>
10063120:	8861      	ldrh	r1, [r4, #2]
10063122:	1a08      	subs	r0, r1, r0
10063124:	89a1      	ldrh	r1, [r4, #12]
10063126:	1840      	adds	r0, r0, r1
10063128:	b281      	uxth	r1, r0
1006312a:	2202      	movs	r2, #2
1006312c:	ad01      	add	r5, sp, #4
1006312e:	4620      	mov	r0, r4
10063130:	462b      	mov	r3, r5
10063132:	f7f0 fb65 	bl	10053800 <ACL_pkt_read>
10063136:	8828      	ldrh	r0, [r5, #0]
10063138:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006313a <GAT_att_clt_read_type_get_data>:
1006313a:	b570      	push	{r4, r5, r6, lr}
1006313c:	4614      	mov	r4, r2
1006313e:	460e      	mov	r6, r1
10063140:	4605      	mov	r5, r0
10063142:	8980      	ldrh	r0, [r0, #12]
10063144:	1c40      	adds	r0, r0, #1
10063146:	b281      	uxth	r1, r0
10063148:	4628      	mov	r0, r5
1006314a:	f7ff ffaa 	bl	100630a2 <ACL_pkt_read_8b>
1006314e:	4602      	mov	r2, r0
10063150:	4346      	muls	r6, r0
10063152:	1cb0      	adds	r0, r6, #2
10063154:	8869      	ldrh	r1, [r5, #2]
10063156:	4288      	cmp	r0, r1
10063158:	d208      	bcs.n	1006316c <GAT_att_clt_read_type_get_data+0x32>
1006315a:	89a9      	ldrh	r1, [r5, #12]
1006315c:	1808      	adds	r0, r1, r0
1006315e:	b281      	uxth	r1, r0
10063160:	4628      	mov	r0, r5
10063162:	4623      	mov	r3, r4
10063164:	f7f0 fb4c 	bl	10053800 <ACL_pkt_read>
10063168:	2000      	movs	r0, #0
1006316a:	bd70      	pop	{r4, r5, r6, pc}
1006316c:	2086      	movs	r0, #134	@ 0x86
1006316e:	bd70      	pop	{r4, r5, r6, pc}

10063170 <GAT_att_clt_find_info_get_last_attr_h>:
10063170:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063172:	4604      	mov	r4, r0
10063174:	8980      	ldrh	r0, [r0, #12]
10063176:	1c40      	adds	r0, r0, #1
10063178:	b281      	uxth	r1, r0
1006317a:	4620      	mov	r0, r4
1006317c:	f7ff ff91 	bl	100630a2 <ACL_pkt_read_8b>
10063180:	2111      	movs	r1, #17
10063182:	43c9      	mvns	r1, r1
10063184:	2801      	cmp	r0, #1
10063186:	d100      	bne.n	1006318a <GAT_att_clt_find_info_get_last_attr_h+0x1a>
10063188:	310e      	adds	r1, #14
1006318a:	8860      	ldrh	r0, [r4, #2]
1006318c:	1840      	adds	r0, r0, r1
1006318e:	89a1      	ldrh	r1, [r4, #12]
10063190:	1808      	adds	r0, r1, r0
10063192:	b281      	uxth	r1, r0
10063194:	2202      	movs	r2, #2
10063196:	ad01      	add	r5, sp, #4
10063198:	4620      	mov	r0, r4
1006319a:	462b      	mov	r3, r5
1006319c:	f7f0 fb30 	bl	10053800 <ACL_pkt_read>
100631a0:	8828      	ldrh	r0, [r5, #0]
100631a2:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100631a4 <GAT_att_clt_prep_wr_cmp_data>:
100631a4:	b580      	push	{r7, lr}
100631a6:	460b      	mov	r3, r1
100631a8:	8842      	ldrh	r2, [r0, #2]
100631aa:	8981      	ldrh	r1, [r0, #12]
100631ac:	1d49      	adds	r1, r1, #5
100631ae:	b289      	uxth	r1, r1
100631b0:	1f52      	subs	r2, r2, #5
100631b2:	b292      	uxth	r2, r2
100631b4:	f7f0 fb1b 	bl	100537ee <ACL_pkt_cmp>
100631b8:	bd80      	pop	{r7, pc}

100631ba <GAT_att_clt_unexpect_rx>:
100631ba:	b51c      	push	{r2, r3, r4, lr}
100631bc:	4604      	mov	r4, r0
100631be:	8800      	ldrh	r0, [r0, #0]
100631c0:	ab01      	add	r3, sp, #4
100631c2:	8018      	strh	r0, [r3, #0]
100631c4:	2042      	movs	r0, #66	@ 0x42
100631c6:	2102      	movs	r1, #2
100631c8:	460a      	mov	r2, r1
100631ca:	f7ff fbf1 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
100631ce:	2800      	cmp	r0, #0
100631d0:	d001      	beq.n	100631d6 <GAT_att_clt_unexpect_rx+0x1c>
100631d2:	2084      	movs	r0, #132	@ 0x84
100631d4:	bd1c      	pop	{r2, r3, r4, pc}
100631d6:	4620      	mov	r0, r4
100631d8:	f7f0 faf6 	bl	100537c8 <ACL_pkt_release>
100631dc:	2000      	movs	r0, #0
100631de:	bd1c      	pop	{r2, r3, r4, pc}

100631e0 <GAT_att_clt_fill_read_multi_req>:
100631e0:	b510      	push	{r4, lr}
100631e2:	460c      	mov	r4, r1
100631e4:	68c3      	ldr	r3, [r0, #12]
100631e6:	8989      	ldrh	r1, [r1, #12]
100631e8:	7a00      	ldrb	r0, [r0, #8]
100631ea:	0042      	lsls	r2, r0, #1
100631ec:	1c48      	adds	r0, r1, #1
100631ee:	b281      	uxth	r1, r0
100631f0:	4620      	mov	r0, r4
100631f2:	f7f0 fb27 	bl	10053844 <ACL_pkt_write>
100631f6:	bd10      	pop	{r4, pc}

100631f8 <GAT_att_clt_fill_handle_range>:
100631f8:	b5b0      	push	{r4, r5, r7, lr}
100631fa:	4614      	mov	r4, r2
100631fc:	460a      	mov	r2, r1
100631fe:	4605      	mov	r5, r0
10063200:	8980      	ldrh	r0, [r0, #12]
10063202:	1c40      	adds	r0, r0, #1
10063204:	b281      	uxth	r1, r0
10063206:	4628      	mov	r0, r5
10063208:	f7f0 fb13 	bl	10053832 <ACL_pkt_write_16b>
1006320c:	89a8      	ldrh	r0, [r5, #12]
1006320e:	1cc0      	adds	r0, r0, #3
10063210:	b281      	uxth	r1, r0
10063212:	4628      	mov	r0, r5
10063214:	4622      	mov	r2, r4
10063216:	f7f0 fb0c 	bl	10053832 <ACL_pkt_write_16b>
1006321a:	bdb0      	pop	{r4, r5, r7, pc}

1006321c <GAT_att_db_init>:
1006321c:	b510      	push	{r4, lr}
1006321e:	4604      	mov	r4, r0
10063220:	2108      	movs	r1, #8
10063222:	f7fc f9f9 	bl	1005f618 <csmem_mem_0_assign>
10063226:	4904      	ldr	r1, [pc, #16]	@ (10063238 <__arm_cp.0_0>)
10063228:	6809      	ldr	r1, [r1, #0]
1006322a:	2260      	movs	r2, #96	@ 0x60
1006322c:	2300      	movs	r3, #0
1006322e:	528b      	strh	r3, [r1, r2]
10063230:	6648      	str	r0, [r1, #100]	@ 0x64
10063232:	3160      	adds	r1, #96	@ 0x60
10063234:	804c      	strh	r4, [r1, #2]
10063236:	bd10      	pop	{r4, pc}

10063238 <__arm_cp.0_0>:
10063238:	20002420 	.word	0x20002420

1006323c <GAT_att_db_insert>:
1006323c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006323e:	b085      	sub	sp, #20
10063240:	4617      	mov	r7, r2
10063242:	9004      	str	r0, [sp, #16]
10063244:	4d1c      	ldr	r5, [pc, #112]	@ (100632b8 <__arm_cp.1_0>)
10063246:	6828      	ldr	r0, [r5, #0]
10063248:	2460      	movs	r4, #96	@ 0x60
1006324a:	5b06      	ldrh	r6, [r0, r4]
1006324c:	4602      	mov	r2, r0
1006324e:	3260      	adds	r2, #96	@ 0x60
10063250:	8852      	ldrh	r2, [r2, #2]
10063252:	4296      	cmp	r6, r2
10063254:	d217      	bcs.n	10063286 <GAT_att_db_insert+0x4a>
10063256:	9402      	str	r4, [sp, #8]
10063258:	9303      	str	r3, [sp, #12]
1006325a:	2900      	cmp	r1, #0
1006325c:	d017      	beq.n	1006328e <GAT_att_db_insert+0x52>
1006325e:	9701      	str	r7, [sp, #4]
10063260:	4608      	mov	r0, r1
10063262:	f000 f82b 	bl	100632bc <GAT_att_db_get_att_idx>
10063266:	1c44      	adds	r4, r0, #1
10063268:	6828      	ldr	r0, [r5, #0]
1006326a:	b2b1      	uxth	r1, r6
1006326c:	b2a2      	uxth	r2, r4
1006326e:	4291      	cmp	r1, r2
10063270:	d30b      	bcc.n	1006328a <GAT_att_db_insert+0x4e>
10063272:	00c9      	lsls	r1, r1, #3
10063274:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10063276:	1840      	adds	r0, r0, r1
10063278:	4601      	mov	r1, r0
1006327a:	3908      	subs	r1, #8
1006327c:	2208      	movs	r2, #8
1006327e:	f7ed ff0b 	bl	10051098 <BLEPLAT_MemCpy>
10063282:	1e76      	subs	r6, r6, #1
10063284:	e7f0      	b.n	10063268 <GAT_att_db_insert+0x2c>
10063286:	2700      	movs	r7, #0
10063288:	e012      	b.n	100632b0 <GAT_att_db_insert+0x74>
1006328a:	9f01      	ldr	r7, [sp, #4]
1006328c:	e000      	b.n	10063290 <GAT_att_db_insert+0x54>
1006328e:	4634      	mov	r4, r6
10063290:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10063292:	b2a1      	uxth	r1, r4
10063294:	00c9      	lsls	r1, r1, #3
10063296:	9a04      	ldr	r2, [sp, #16]
10063298:	5442      	strb	r2, [r0, r1]
1006329a:	1840      	adds	r0, r0, r1
1006329c:	9a03      	ldr	r2, [sp, #12]
1006329e:	6042      	str	r2, [r0, #4]
100632a0:	6828      	ldr	r0, [r5, #0]
100632a2:	9b02      	ldr	r3, [sp, #8]
100632a4:	5ac2      	ldrh	r2, [r0, r3]
100632a6:	1c52      	adds	r2, r2, #1
100632a8:	52c2      	strh	r2, [r0, r3]
100632aa:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100632ac:	1840      	adds	r0, r0, r1
100632ae:	8047      	strh	r7, [r0, #2]
100632b0:	4638      	mov	r0, r7
100632b2:	b005      	add	sp, #20
100632b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100632b6:	46c0      	nop			@ (mov r8, r8)

100632b8 <__arm_cp.1_0>:
100632b8:	20002420 	.word	0x20002420

100632bc <GAT_att_db_get_att_idx>:
100632bc:	4908      	ldr	r1, [pc, #32]	@ (100632e0 <__arm_cp.2_0>)
100632be:	680a      	ldr	r2, [r1, #0]
100632c0:	6e51      	ldr	r1, [r2, #100]	@ 0x64
100632c2:	2362      	movs	r3, #98	@ 0x62
100632c4:	5ad2      	ldrh	r2, [r2, r3]
100632c6:	00d2      	lsls	r2, r2, #3
100632c8:	1852      	adds	r2, r2, r1
100632ca:	3a08      	subs	r2, #8
100632cc:	4282      	cmp	r2, r0
100632ce:	d302      	bcc.n	100632d6 <GAT_att_db_get_att_idx+0x1a>
100632d0:	1a40      	subs	r0, r0, r1
100632d2:	08c0      	lsrs	r0, r0, #3
100632d4:	e001      	b.n	100632da <GAT_att_db_get_att_idx+0x1e>
100632d6:	2000      	movs	r0, #0
100632d8:	43c0      	mvns	r0, r0
100632da:	b280      	uxth	r0, r0
100632dc:	4770      	bx	lr
100632de:	46c0      	nop			@ (mov r8, r8)

100632e0 <__arm_cp.2_0>:
100632e0:	20002420 	.word	0x20002420

100632e4 <GAT_att_db_find_by_handle>:
100632e4:	b580      	push	{r7, lr}
100632e6:	f000 f80f 	bl	10063308 <GAT_att_db_find_attr_idx_with_handle>
100632ea:	4905      	ldr	r1, [pc, #20]	@ (10063300 <__arm_cp.3_0>)
100632ec:	4288      	cmp	r0, r1
100632ee:	d005      	beq.n	100632fc <GAT_att_db_find_by_handle+0x18>
100632f0:	00c0      	lsls	r0, r0, #3
100632f2:	4904      	ldr	r1, [pc, #16]	@ (10063304 <__arm_cp.3_1>)
100632f4:	6809      	ldr	r1, [r1, #0]
100632f6:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100632f8:	1808      	adds	r0, r1, r0
100632fa:	bd80      	pop	{r7, pc}
100632fc:	2000      	movs	r0, #0
100632fe:	bd80      	pop	{r7, pc}

10063300 <__arm_cp.3_0>:
10063300:	0000ffff 	.word	0x0000ffff

10063304 <__arm_cp.3_1>:
10063304:	20002420 	.word	0x20002420

10063308 <GAT_att_db_find_attr_idx_with_handle>:
10063308:	b510      	push	{r4, lr}
1006330a:	4604      	mov	r4, r0
1006330c:	f000 f824 	bl	10063358 <GAT_att_db_find_attr_idx_from_handle>
10063310:	4906      	ldr	r1, [pc, #24]	@ (1006332c <__arm_cp.4_0>)
10063312:	4288      	cmp	r0, r1
10063314:	d007      	beq.n	10063326 <GAT_att_db_find_attr_idx_with_handle+0x1e>
10063316:	00c2      	lsls	r2, r0, #3
10063318:	4b05      	ldr	r3, [pc, #20]	@ (10063330 <__arm_cp.4_1>)
1006331a:	681b      	ldr	r3, [r3, #0]
1006331c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1006331e:	189a      	adds	r2, r3, r2
10063320:	8852      	ldrh	r2, [r2, #2]
10063322:	42a2      	cmp	r2, r4
10063324:	d000      	beq.n	10063328 <GAT_att_db_find_attr_idx_with_handle+0x20>
10063326:	4608      	mov	r0, r1
10063328:	bd10      	pop	{r4, pc}
1006332a:	46c0      	nop			@ (mov r8, r8)

1006332c <__arm_cp.4_0>:
1006332c:	0000ffff 	.word	0x0000ffff

10063330 <__arm_cp.4_1>:
10063330:	20002420 	.word	0x20002420

10063334 <GAT_att_db_find_from_handle>:
10063334:	b580      	push	{r7, lr}
10063336:	f000 f80f 	bl	10063358 <GAT_att_db_find_attr_idx_from_handle>
1006333a:	4905      	ldr	r1, [pc, #20]	@ (10063350 <__arm_cp.5_0>)
1006333c:	4288      	cmp	r0, r1
1006333e:	d005      	beq.n	1006334c <GAT_att_db_find_from_handle+0x18>
10063340:	00c0      	lsls	r0, r0, #3
10063342:	4904      	ldr	r1, [pc, #16]	@ (10063354 <__arm_cp.5_1>)
10063344:	6809      	ldr	r1, [r1, #0]
10063346:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10063348:	1808      	adds	r0, r1, r0
1006334a:	bd80      	pop	{r7, pc}
1006334c:	2000      	movs	r0, #0
1006334e:	bd80      	pop	{r7, pc}

10063350 <__arm_cp.5_0>:
10063350:	0000ffff 	.word	0x0000ffff

10063354 <__arm_cp.5_1>:
10063354:	20002420 	.word	0x20002420

10063358 <GAT_att_db_find_attr_idx_from_handle>:
10063358:	b570      	push	{r4, r5, r6, lr}
1006335a:	4909      	ldr	r1, [pc, #36]	@ (10063380 <__arm_cp.6_0>)
1006335c:	680a      	ldr	r2, [r1, #0]
1006335e:	2160      	movs	r1, #96	@ 0x60
10063360:	5a53      	ldrh	r3, [r2, r1]
10063362:	2100      	movs	r1, #0
10063364:	2502      	movs	r5, #2
10063366:	4c07      	ldr	r4, [pc, #28]	@ (10063384 <__arm_cp.6_1>)
10063368:	428b      	cmp	r3, r1
1006336a:	d006      	beq.n	1006337a <GAT_att_db_find_attr_idx_from_handle+0x22>
1006336c:	6e56      	ldr	r6, [r2, #100]	@ 0x64
1006336e:	5b76      	ldrh	r6, [r6, r5]
10063370:	4286      	cmp	r6, r0
10063372:	d203      	bcs.n	1006337c <GAT_att_db_find_attr_idx_from_handle+0x24>
10063374:	3508      	adds	r5, #8
10063376:	1c49      	adds	r1, r1, #1
10063378:	e7f6      	b.n	10063368 <GAT_att_db_find_attr_idx_from_handle+0x10>
1006337a:	4621      	mov	r1, r4
1006337c:	b288      	uxth	r0, r1
1006337e:	bd70      	pop	{r4, r5, r6, pc}

10063380 <__arm_cp.6_0>:
10063380:	20002420 	.word	0x20002420

10063384 <__arm_cp.6_1>:
10063384:	0000ffff 	.word	0x0000ffff

10063388 <GAT_att_db_find_by_def>:
10063388:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006338a:	9302      	str	r3, [sp, #8]
1006338c:	4615      	mov	r5, r2
1006338e:	2200      	movs	r2, #0
10063390:	4288      	cmp	r0, r1
10063392:	d823      	bhi.n	100633dc <GAT_att_db_find_by_def+0x54>
10063394:	460c      	mov	r4, r1
10063396:	4916      	ldr	r1, [pc, #88]	@ (100633f0 <__arm_cp.8_0>)
10063398:	680f      	ldr	r7, [r1, #0]
1006339a:	2160      	movs	r1, #96	@ 0x60
1006339c:	5a79      	ldrh	r1, [r7, r1]
1006339e:	2900      	cmp	r1, #0
100633a0:	d01c      	beq.n	100633dc <GAT_att_db_find_by_def+0x54>
100633a2:	9200      	str	r2, [sp, #0]
100633a4:	9101      	str	r1, [sp, #4]
100633a6:	f7ff ffd7 	bl	10063358 <GAT_att_db_find_attr_idx_from_handle>
100633aa:	4606      	mov	r6, r0
100633ac:	4620      	mov	r0, r4
100633ae:	f7ff ffd3 	bl	10063358 <GAT_att_db_find_attr_idx_from_handle>
100633b2:	9901      	ldr	r1, [sp, #4]
100633b4:	1e49      	subs	r1, r1, #1
100633b6:	4281      	cmp	r1, r0
100633b8:	d300      	bcc.n	100633bc <GAT_att_db_find_by_def+0x34>
100633ba:	4601      	mov	r1, r0
100633bc:	b289      	uxth	r1, r1
100633be:	b2b2      	uxth	r2, r6
100633c0:	428a      	cmp	r2, r1
100633c2:	d80d      	bhi.n	100633e0 <GAT_att_db_find_by_def+0x58>
100633c4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
100633c6:	00d3      	lsls	r3, r2, #3
100633c8:	5cc4      	ldrb	r4, [r0, r3]
100633ca:	42ac      	cmp	r4, r5
100633cc:	d104      	bne.n	100633d8 <GAT_att_db_find_by_def+0x50>
100633ce:	18c0      	adds	r0, r0, r3
100633d0:	6843      	ldr	r3, [r0, #4]
100633d2:	9c02      	ldr	r4, [sp, #8]
100633d4:	42a3      	cmp	r3, r4
100633d6:	d005      	beq.n	100633e4 <GAT_att_db_find_by_def+0x5c>
100633d8:	1c76      	adds	r6, r6, #1
100633da:	e7f0      	b.n	100633be <GAT_att_db_find_by_def+0x36>
100633dc:	4610      	mov	r0, r2
100633de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100633e0:	9800      	ldr	r0, [sp, #0]
100633e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100633e4:	4903      	ldr	r1, [pc, #12]	@ (100633f4 <__arm_cp.8_1>)
100633e6:	428a      	cmp	r2, r1
100633e8:	d100      	bne.n	100633ec <GAT_att_db_find_by_def+0x64>
100633ea:	2000      	movs	r0, #0
100633ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100633ee:	46c0      	nop			@ (mov r8, r8)

100633f0 <__arm_cp.8_0>:
100633f0:	20002420 	.word	0x20002420

100633f4 <__arm_cp.8_1>:
100633f4:	0000ffff 	.word	0x0000ffff

100633f8 <GAT_att_db_get_next>:
100633f8:	b580      	push	{r7, lr}
100633fa:	f7ff ff5f 	bl	100632bc <GAT_att_db_get_att_idx>
100633fe:	4907      	ldr	r1, [pc, #28]	@ (1006341c <__arm_cp.10_0>)
10063400:	6809      	ldr	r1, [r1, #0]
10063402:	2260      	movs	r2, #96	@ 0x60
10063404:	5a8a      	ldrh	r2, [r1, r2]
10063406:	1c40      	adds	r0, r0, #1
10063408:	b280      	uxth	r0, r0
1006340a:	4290      	cmp	r0, r2
1006340c:	d203      	bcs.n	10063416 <GAT_att_db_get_next+0x1e>
1006340e:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10063410:	00c0      	lsls	r0, r0, #3
10063412:	1808      	adds	r0, r1, r0
10063414:	bd80      	pop	{r7, pc}
10063416:	2000      	movs	r0, #0
10063418:	bd80      	pop	{r7, pc}
1006341a:	46c0      	nop			@ (mov r8, r8)

1006341c <__arm_cp.10_0>:
1006341c:	20002420 	.word	0x20002420

10063420 <GAT_att_db_get_last_group_handle>:
10063420:	b580      	push	{r7, lr}
10063422:	f000 f803 	bl	1006342c <GAT_att_db_get_last_group_attribute>
10063426:	8840      	ldrh	r0, [r0, #2]
10063428:	bd80      	pop	{r7, pc}
	...

1006342c <GAT_att_db_get_last_group_attribute>:
1006342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006342e:	7804      	ldrb	r4, [r0, #0]
10063430:	2502      	movs	r5, #2
10063432:	4621      	mov	r1, r4
10063434:	4329      	orrs	r1, r5
10063436:	2902      	cmp	r1, #2
10063438:	d11e      	bne.n	10063478 <GAT_att_db_get_last_group_attribute+0x4c>
1006343a:	f7ff ff3f 	bl	100632bc <GAT_att_db_get_att_idx>
1006343e:	490f      	ldr	r1, [pc, #60]	@ (1006347c <__arm_cp.12_0>)
10063440:	6809      	ldr	r1, [r1, #0]
10063442:	2260      	movs	r2, #96	@ 0x60
10063444:	5a8b      	ldrh	r3, [r1, r2]
10063446:	1c40      	adds	r0, r0, #1
10063448:	b282      	uxth	r2, r0
1006344a:	429a      	cmp	r2, r3
1006344c:	d210      	bcs.n	10063470 <GAT_att_db_get_last_group_attribute+0x44>
1006344e:	2c00      	cmp	r4, #0
10063450:	d008      	beq.n	10063464 <GAT_att_db_get_last_group_attribute+0x38>
10063452:	2c02      	cmp	r4, #2
10063454:	d1f7      	bne.n	10063446 <GAT_att_db_get_last_group_attribute+0x1a>
10063456:	00d7      	lsls	r7, r2, #3
10063458:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
1006345a:	5df7      	ldrb	r7, [r6, r7]
1006345c:	432f      	orrs	r7, r5
1006345e:	2f02      	cmp	r7, #2
10063460:	d1f1      	bne.n	10063446 <GAT_att_db_get_last_group_attribute+0x1a>
10063462:	e006      	b.n	10063472 <GAT_att_db_get_last_group_attribute+0x46>
10063464:	00d7      	lsls	r7, r2, #3
10063466:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10063468:	5df7      	ldrb	r7, [r6, r7]
1006346a:	2f00      	cmp	r7, #0
1006346c:	d1eb      	bne.n	10063446 <GAT_att_db_get_last_group_attribute+0x1a>
1006346e:	e000      	b.n	10063472 <GAT_att_db_get_last_group_attribute+0x46>
10063470:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10063472:	00d0      	lsls	r0, r2, #3
10063474:	1980      	adds	r0, r0, r6
10063476:	3808      	subs	r0, #8
10063478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006347a:	46c0      	nop			@ (mov r8, r8)

1006347c <__arm_cp.12_0>:
1006347c:	20002420 	.word	0x20002420

10063480 <GAT_att_db_get_last_handle>:
10063480:	4806      	ldr	r0, [pc, #24]	@ (1006349c <__arm_cp.14_0>)
10063482:	6800      	ldr	r0, [r0, #0]
10063484:	2160      	movs	r1, #96	@ 0x60
10063486:	5a41      	ldrh	r1, [r0, r1]
10063488:	2900      	cmp	r1, #0
1006348a:	d005      	beq.n	10063498 <GAT_att_db_get_last_handle+0x18>
1006348c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1006348e:	00c9      	lsls	r1, r1, #3
10063490:	1808      	adds	r0, r1, r0
10063492:	1f80      	subs	r0, r0, #6
10063494:	8800      	ldrh	r0, [r0, #0]
10063496:	4770      	bx	lr
10063498:	2000      	movs	r0, #0
1006349a:	4770      	bx	lr

1006349c <__arm_cp.14_0>:
1006349c:	20002420 	.word	0x20002420

100634a0 <GAT_att_db_rm_att_range>:
100634a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100634a2:	460d      	mov	r5, r1
100634a4:	4604      	mov	r4, r0
100634a6:	f7ff ffeb 	bl	10063480 <GAT_att_db_get_last_handle>
100634aa:	2800      	cmp	r0, #0
100634ac:	d034      	beq.n	10063518 <GAT_att_db_rm_att_range+0x78>
100634ae:	42ac      	cmp	r4, r5
100634b0:	d832      	bhi.n	10063518 <GAT_att_db_rm_att_range+0x78>
100634b2:	4606      	mov	r6, r0
100634b4:	42a0      	cmp	r0, r4
100634b6:	d32f      	bcc.n	10063518 <GAT_att_db_rm_att_range+0x78>
100634b8:	4620      	mov	r0, r4
100634ba:	f7ff ff25 	bl	10063308 <GAT_att_db_find_attr_idx_with_handle>
100634be:	4604      	mov	r4, r0
100634c0:	4816      	ldr	r0, [pc, #88]	@ (1006351c <__arm_cp.16_0>)
100634c2:	4284      	cmp	r4, r0
100634c4:	d028      	beq.n	10063518 <GAT_att_db_rm_att_range+0x78>
100634c6:	42ae      	cmp	r6, r5
100634c8:	d300      	bcc.n	100634cc <GAT_att_db_rm_att_range+0x2c>
100634ca:	462e      	mov	r6, r5
100634cc:	4630      	mov	r0, r6
100634ce:	f7ff ff1b 	bl	10063308 <GAT_att_db_find_attr_idx_with_handle>
100634d2:	4913      	ldr	r1, [pc, #76]	@ (10063520 <__arm_cp.16_1>)
100634d4:	680f      	ldr	r7, [r1, #0]
100634d6:	2660      	movs	r6, #96	@ 0x60
100634d8:	5bb9      	ldrh	r1, [r7, r6]
100634da:	1e4a      	subs	r2, r1, #1
100634dc:	4282      	cmp	r2, r0
100634de:	d917      	bls.n	10063510 <GAT_att_db_rm_att_range+0x70>
100634e0:	9001      	str	r0, [sp, #4]
100634e2:	4605      	mov	r5, r0
100634e4:	9402      	str	r4, [sp, #8]
100634e6:	b28b      	uxth	r3, r1
100634e8:	1c6d      	adds	r5, r5, #1
100634ea:	b2aa      	uxth	r2, r5
100634ec:	429a      	cmp	r2, r3
100634ee:	d20d      	bcs.n	1006350c <GAT_att_db_rm_att_range+0x6c>
100634f0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
100634f2:	b2a0      	uxth	r0, r4
100634f4:	00c0      	lsls	r0, r0, #3
100634f6:	1808      	adds	r0, r1, r0
100634f8:	00d2      	lsls	r2, r2, #3
100634fa:	1889      	adds	r1, r1, r2
100634fc:	2208      	movs	r2, #8
100634fe:	f7ed fdcb 	bl	10051098 <BLEPLAT_MemCpy>
10063502:	4807      	ldr	r0, [pc, #28]	@ (10063520 <__arm_cp.16_1>)
10063504:	6807      	ldr	r7, [r0, #0]
10063506:	5bb9      	ldrh	r1, [r7, r6]
10063508:	1c64      	adds	r4, r4, #1
1006350a:	e7ec      	b.n	100634e6 <GAT_att_db_rm_att_range+0x46>
1006350c:	9c02      	ldr	r4, [sp, #8]
1006350e:	9801      	ldr	r0, [sp, #4]
10063510:	43c2      	mvns	r2, r0
10063512:	18a2      	adds	r2, r4, r2
10063514:	1851      	adds	r1, r2, r1
10063516:	53b9      	strh	r1, [r7, r6]
10063518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006351a:	46c0      	nop			@ (mov r8, r8)

1006351c <__arm_cp.16_0>:
1006351c:	0000ffff 	.word	0x0000ffff

10063520 <__arm_cp.16_1>:
10063520:	20002420 	.word	0x20002420

10063524 <GAT_att_db_find_last_attr_of_type>:
10063524:	b510      	push	{r4, lr}
10063526:	4909      	ldr	r1, [pc, #36]	@ (1006354c <__arm_cp.17_0>)
10063528:	680a      	ldr	r2, [r1, #0]
1006352a:	2160      	movs	r1, #96	@ 0x60
1006352c:	5a53      	ldrh	r3, [r2, r1]
1006352e:	0419      	lsls	r1, r3, #16
10063530:	d009      	beq.n	10063546 <GAT_att_db_find_last_attr_of_type+0x22>
10063532:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10063534:	b29c      	uxth	r4, r3
10063536:	00e4      	lsls	r4, r4, #3
10063538:	1861      	adds	r1, r4, r1
1006353a:	3908      	subs	r1, #8
1006353c:	780c      	ldrb	r4, [r1, #0]
1006353e:	1e5b      	subs	r3, r3, #1
10063540:	4284      	cmp	r4, r0
10063542:	d1f4      	bne.n	1006352e <GAT_att_db_find_last_attr_of_type+0xa>
10063544:	e000      	b.n	10063548 <GAT_att_db_find_last_attr_of_type+0x24>
10063546:	2100      	movs	r1, #0
10063548:	4608      	mov	r0, r1
1006354a:	bd10      	pop	{r4, pc}

1006354c <__arm_cp.17_0>:
1006354c:	20002420 	.word	0x20002420

10063550 <GAT_att_db_reverse_find_attr_of_type>:
10063550:	b510      	push	{r4, lr}
10063552:	4604      	mov	r4, r0
10063554:	4608      	mov	r0, r1
10063556:	f7ff feff 	bl	10063358 <GAT_att_db_find_attr_idx_from_handle>
1006355a:	4908      	ldr	r1, [pc, #32]	@ (1006357c <__arm_cp.18_0>)
1006355c:	6809      	ldr	r1, [r1, #0]
1006355e:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10063560:	b282      	uxth	r2, r0
10063562:	00d2      	lsls	r2, r2, #3
10063564:	5c8b      	ldrb	r3, [r1, r2]
10063566:	42a3      	cmp	r3, r4
10063568:	d005      	beq.n	10063576 <GAT_att_db_reverse_find_attr_of_type+0x26>
1006356a:	1e42      	subs	r2, r0, #1
1006356c:	0400      	lsls	r0, r0, #16
1006356e:	4610      	mov	r0, r2
10063570:	d1f6      	bne.n	10063560 <GAT_att_db_reverse_find_attr_of_type+0x10>
10063572:	2000      	movs	r0, #0
10063574:	bd10      	pop	{r4, pc}
10063576:	1888      	adds	r0, r1, r2
10063578:	bd10      	pop	{r4, pc}
1006357a:	46c0      	nop			@ (mov r8, r8)

1006357c <__arm_cp.18_0>:
1006357c:	20002420 	.word	0x20002420

10063580 <GAT_clt_init>:
10063580:	b570      	push	{r4, r5, r6, lr}
10063582:	4c11      	ldr	r4, [pc, #68]	@ (100635c8 <__arm_cp.0_0>)
10063584:	7aa0      	ldrb	r0, [r4, #10]
10063586:	2124      	movs	r1, #36	@ 0x24
10063588:	f7fc f846 	bl	1005f618 <csmem_mem_0_assign>
1006358c:	490f      	ldr	r1, [pc, #60]	@ (100635cc <__arm_cp.0_1>)
1006358e:	680b      	ldr	r3, [r1, #0]
10063590:	2200      	movs	r2, #0
10063592:	461d      	mov	r5, r3
10063594:	3550      	adds	r5, #80	@ 0x50
10063596:	461e      	mov	r6, r3
10063598:	3648      	adds	r6, #72	@ 0x48
1006359a:	649a      	str	r2, [r3, #72]	@ 0x48
1006359c:	64de      	str	r6, [r3, #76]	@ 0x4c
1006359e:	651a      	str	r2, [r3, #80]	@ 0x50
100635a0:	655d      	str	r5, [r3, #84]	@ 0x54
100635a2:	7aa4      	ldrb	r4, [r4, #10]
100635a4:	2c00      	cmp	r4, #0
100635a6:	d00c      	beq.n	100635c2 <GAT_clt_init+0x42>
100635a8:	6202      	str	r2, [r0, #32]
100635aa:	680b      	ldr	r3, [r1, #0]
100635ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100635ae:	6018      	str	r0, [r3, #0]
100635b0:	2301      	movs	r3, #1
100635b2:	7003      	strb	r3, [r0, #0]
100635b4:	4605      	mov	r5, r0
100635b6:	3520      	adds	r5, #32
100635b8:	680b      	ldr	r3, [r1, #0]
100635ba:	655d      	str	r5, [r3, #84]	@ 0x54
100635bc:	3024      	adds	r0, #36	@ 0x24
100635be:	1e64      	subs	r4, r4, #1
100635c0:	e7f0      	b.n	100635a4 <GAT_clt_init+0x24>
100635c2:	659a      	str	r2, [r3, #88]	@ 0x58
100635c4:	bd70      	pop	{r4, r5, r6, pc}
100635c6:	46c0      	nop			@ (mov r8, r8)

100635c8 <__arm_cp.0_0>:
100635c8:	2000247c 	.word	0x2000247c

100635cc <__arm_cp.0_1>:
100635cc:	20002420 	.word	0x20002420

100635d0 <GAT_clt_connection>:
100635d0:	4770      	bx	lr
	...

100635d4 <GAT_clt_bearer_close>:
100635d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100635d6:	460d      	mov	r5, r1
100635d8:	4604      	mov	r4, r0
100635da:	4e19      	ldr	r6, [pc, #100]	@ (10063640 <__arm_cp.2_0>)
100635dc:	6837      	ldr	r7, [r6, #0]
100635de:	3748      	adds	r7, #72	@ 0x48
100635e0:	683f      	ldr	r7, [r7, #0]
100635e2:	2f00      	cmp	r7, #0
100635e4:	d010      	beq.n	10063608 <GAT_clt_bearer_close+0x34>
100635e6:	8878      	ldrh	r0, [r7, #2]
100635e8:	42a0      	cmp	r0, r4
100635ea:	d10b      	bne.n	10063604 <GAT_clt_bearer_close+0x30>
100635ec:	88b8      	ldrh	r0, [r7, #4]
100635ee:	42a8      	cmp	r0, r5
100635f0:	d108      	bne.n	10063604 <GAT_clt_bearer_close+0x30>
100635f2:	7838      	ldrb	r0, [r7, #0]
100635f4:	2118      	movs	r1, #24
100635f6:	4301      	orrs	r1, r0
100635f8:	7039      	strb	r1, [r7, #0]
100635fa:	200c      	movs	r0, #12
100635fc:	f7fd fde2 	bl	100611c4 <tsk_notify_idx>
10063600:	f7ec ff63 	bl	100504ca <BLE_STACK_ProcessRequest>
10063604:	3720      	adds	r7, #32
10063606:	e7eb      	b.n	100635e0 <GAT_clt_bearer_close+0xc>
10063608:	2d04      	cmp	r5, #4
1006360a:	d117      	bne.n	1006363c <GAT_clt_bearer_close+0x68>
1006360c:	6830      	ldr	r0, [r6, #0]
1006360e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10063610:	460b      	mov	r3, r1
10063612:	2b00      	cmp	r3, #0
10063614:	d00b      	beq.n	1006362e <GAT_clt_bearer_close+0x5a>
10063616:	461a      	mov	r2, r3
10063618:	689d      	ldr	r5, [r3, #8]
1006361a:	2300      	movs	r3, #0
1006361c:	2d00      	cmp	r5, #0
1006361e:	d0f8      	beq.n	10063612 <GAT_clt_bearer_close+0x3e>
10063620:	88ab      	ldrh	r3, [r5, #4]
10063622:	42a3      	cmp	r3, r4
10063624:	462b      	mov	r3, r5
10063626:	d1f4      	bne.n	10063612 <GAT_clt_bearer_close+0x3e>
10063628:	68ab      	ldr	r3, [r5, #8]
1006362a:	6093      	str	r3, [r2, #8]
1006362c:	e7f1      	b.n	10063612 <GAT_clt_bearer_close+0x3e>
1006362e:	2900      	cmp	r1, #0
10063630:	d004      	beq.n	1006363c <GAT_clt_bearer_close+0x68>
10063632:	888a      	ldrh	r2, [r1, #4]
10063634:	42a2      	cmp	r2, r4
10063636:	d101      	bne.n	1006363c <GAT_clt_bearer_close+0x68>
10063638:	6889      	ldr	r1, [r1, #8]
1006363a:	6581      	str	r1, [r0, #88]	@ 0x58
1006363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006363e:	46c0      	nop			@ (mov r8, r8)

10063640 <__arm_cp.2_0>:
10063640:	20002420 	.word	0x20002420

10063644 <GAT_clt_proc_exec_tsk>:
10063644:	b580      	push	{r7, lr}
10063646:	4802      	ldr	r0, [pc, #8]	@ (10063650 <__arm_cp.3_0>)
10063648:	6800      	ldr	r0, [r0, #0]
1006364a:	4780      	blx	r0
1006364c:	bd80      	pop	{r7, pc}
1006364e:	46c0      	nop			@ (mov r8, r8)

10063650 <__arm_cp.3_0>:
10063650:	200028a8 	.word	0x200028a8

10063654 <GAT_clt_rcv>:
10063654:	b5f0      	push	{r4, r5, r6, r7, lr}
10063656:	b095      	sub	sp, #84	@ 0x54
10063658:	4605      	mov	r5, r0
1006365a:	8804      	ldrh	r4, [r0, #0]
1006365c:	f7f4 fdcb 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10063660:	4601      	mov	r1, r0
10063662:	4620      	mov	r0, r4
10063664:	f000 fa6e 	bl	10063b44 <GAT_clt_get_proc_per_channel>
10063668:	2686      	movs	r6, #134	@ 0x86
1006366a:	2800      	cmp	r0, #0
1006366c:	d100      	bne.n	10063670 <GAT_clt_rcv+0x1c>
1006366e:	e208      	b.n	10063a82 <GAT_clt_rcv+0x42e>
10063670:	4604      	mov	r4, r0
10063672:	882f      	ldrh	r7, [r5, #0]
10063674:	4628      	mov	r0, r5
10063676:	f7f4 fdbe 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
1006367a:	4601      	mov	r1, r0
1006367c:	4638      	mov	r0, r7
1006367e:	f7f1 ff2d 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10063682:	9008      	str	r0, [sp, #32]
10063684:	7820      	ldrb	r0, [r4, #0]
10063686:	21fb      	movs	r1, #251	@ 0xfb
10063688:	4001      	ands	r1, r0
1006368a:	7021      	strb	r1, [r4, #0]
1006368c:	270c      	movs	r7, #12
1006368e:	4638      	mov	r0, r7
10063690:	f7fd fd98 	bl	100611c4 <tsk_notify_idx>
10063694:	f7ec ff19 	bl	100504ca <BLE_STACK_ProcessRequest>
10063698:	4628      	mov	r0, r5
1006369a:	f000 fa65 	bl	10063b68 <GAT_att_cmn_get_opcode>
1006369e:	2801      	cmp	r0, #1
100636a0:	d107      	bne.n	100636b2 <GAT_clt_rcv+0x5e>
100636a2:	8860      	ldrh	r0, [r4, #2]
100636a4:	f7f1 f804 	bl	100546b0 <GAP_started_gatt_proc>
100636a8:	2800      	cmp	r0, #0
100636aa:	d060      	beq.n	1006376e <GAT_clt_rcv+0x11a>
100636ac:	4620      	mov	r0, r4
100636ae:	f000 fa60 	bl	10063b72 <GAT_clt_stop_proc>
100636b2:	7820      	ldrb	r0, [r4, #0]
100636b4:	2200      	movs	r2, #0
100636b6:	0701      	lsls	r1, r0, #28
100636b8:	d457      	bmi.n	1006376a <GAT_clt_rcv+0x116>
100636ba:	79a3      	ldrb	r3, [r4, #6]
100636bc:	1e59      	subs	r1, r3, #1
100636be:	2911      	cmp	r1, #17
100636c0:	d900      	bls.n	100636c4 <GAT_clt_rcv+0x70>
100636c2:	e1de      	b.n	10063a82 <GAT_clt_rcv+0x42e>
100636c4:	9207      	str	r2, [sp, #28]
100636c6:	0049      	lsls	r1, r1, #1
100636c8:	4479      	add	r1, pc
100636ca:	8889      	ldrh	r1, [r1, #4]
100636cc:	0049      	lsls	r1, r1, #1
100636ce:	448f      	add	pc, r1
100636d0:	010200c5 	.word	0x010200c5
100636d4:	0099010f 	.word	0x0099010f
100636d8:	011f0099 	.word	0x011f0099
100636dc:	01750164 	.word	0x01750164
100636e0:	01b9017c 	.word	0x01b9017c
100636e4:	00a600a6 	.word	0x00a600a6
100636e8:	001100b8 	.word	0x001100b8
100636ec:	001100b0 	.word	0x001100b0
100636f0:	00b00011 	.word	0x00b00011
100636f4:	06c0      	lsls	r0, r0, #27
100636f6:	d500      	bpl.n	100636fa <GAT_clt_rcv+0xa6>
100636f8:	e0a7      	b.n	1006384a <GAT_clt_rcv+0x1f6>
100636fa:	88a2      	ldrh	r2, [r4, #4]
100636fc:	8861      	ldrh	r1, [r4, #2]
100636fe:	200a      	movs	r0, #10
10063700:	462b      	mov	r3, r5
10063702:	f7fe ffbf 	bl	10062684 <aci_att_clt_prepare_write_resp_event_push_noinline>
10063706:	2800      	cmp	r0, #0
10063708:	d000      	beq.n	1006370c <GAT_clt_rcv+0xb8>
1006370a:	e1b4      	b.n	10063a76 <GAT_clt_rcv+0x422>
1006370c:	79a0      	ldrb	r0, [r4, #6]
1006370e:	2811      	cmp	r0, #17
10063710:	d100      	bne.n	10063714 <GAT_clt_rcv+0xc0>
10063712:	e1b2      	b.n	10063a7a <GAT_clt_rcv+0x426>
10063714:	7a63      	ldrb	r3, [r4, #9]
10063716:	6921      	ldr	r1, [r4, #16]
10063718:	9108      	str	r1, [sp, #32]
1006371a:	2810      	cmp	r0, #16
1006371c:	d000      	beq.n	10063720 <GAT_clt_rcv+0xcc>
1006371e:	e1d0      	b.n	10063ac2 <GAT_clt_rcv+0x46e>
10063720:	9306      	str	r3, [sp, #24]
10063722:	89a8      	ldrh	r0, [r5, #12]
10063724:	1c40      	adds	r0, r0, #1
10063726:	b281      	uxth	r1, r0
10063728:	4628      	mov	r0, r5
1006372a:	f7f0 f872 	bl	10053812 <ACL_pkt_read_16b>
1006372e:	9005      	str	r0, [sp, #20]
10063730:	89a8      	ldrh	r0, [r5, #12]
10063732:	1cc0      	adds	r0, r0, #3
10063734:	b281      	uxth	r1, r0
10063736:	4628      	mov	r0, r5
10063738:	f7f0 f86b 	bl	10053812 <ACL_pkt_read_16b>
1006373c:	2600      	movs	r6, #0
1006373e:	89a2      	ldrh	r2, [r4, #12]
10063740:	8869      	ldrh	r1, [r5, #2]
10063742:	1f49      	subs	r1, r1, #5
10063744:	4291      	cmp	r1, r2
10063746:	9004      	str	r0, [sp, #16]
10063748:	d000      	beq.n	1006374c <GAT_clt_rcv+0xf8>
1006374a:	e1cf      	b.n	10063aec <GAT_clt_rcv+0x498>
1006374c:	4638      	mov	r0, r7
1006374e:	9906      	ldr	r1, [sp, #24]
10063750:	4348      	muls	r0, r1
10063752:	9a08      	ldr	r2, [sp, #32]
10063754:	1810      	adds	r0, r2, r0
10063756:	6880      	ldr	r0, [r0, #8]
10063758:	8961      	ldrh	r1, [r4, #10]
1006375a:	1841      	adds	r1, r0, r1
1006375c:	4628      	mov	r0, r5
1006375e:	4615      	mov	r5, r2
10063760:	f7ff fd20 	bl	100631a4 <GAT_att_clt_prep_wr_cmp_data>
10063764:	9b06      	ldr	r3, [sp, #24]
10063766:	9003      	str	r0, [sp, #12]
10063768:	e1c4      	b.n	10063af4 <GAT_clt_rcv+0x4a0>
1006376a:	4616      	mov	r6, r2
1006376c:	e189      	b.n	10063a82 <GAT_clt_rcv+0x42e>
1006376e:	a909      	add	r1, sp, #36	@ 0x24
10063770:	aa0f      	add	r2, sp, #60	@ 0x3c
10063772:	ab0e      	add	r3, sp, #56	@ 0x38
10063774:	4628      	mov	r0, r5
10063776:	f7ff fcb1 	bl	100630dc <GAT_att_clt_parse_error_resp>
1006377a:	2800      	cmp	r0, #0
1006377c:	d02b      	beq.n	100637d6 <GAT_clt_rcv+0x182>
1006377e:	4628      	mov	r0, r5
10063780:	f7f0 f822 	bl	100537c8 <ACL_pkt_release>
10063784:	a80e      	add	r0, sp, #56	@ 0x38
10063786:	7800      	ldrb	r0, [r0, #0]
10063788:	2812      	cmp	r0, #18
1006378a:	d108      	bne.n	1006379e <GAT_clt_rcv+0x14a>
1006378c:	8860      	ldrh	r0, [r4, #2]
1006378e:	2104      	movs	r1, #4
10063790:	f7f1 fea4 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10063794:	8881      	ldrh	r1, [r0, #4]
10063796:	2201      	movs	r2, #1
10063798:	0252      	lsls	r2, r2, #9
1006379a:	430a      	orrs	r2, r1
1006379c:	8082      	strh	r2, [r0, #4]
1006379e:	79a0      	ldrb	r0, [r4, #6]
100637a0:	2801      	cmp	r0, #1
100637a2:	d104      	bne.n	100637ae <GAT_clt_rcv+0x15a>
100637a4:	9b08      	ldr	r3, [sp, #32]
100637a6:	8899      	ldrh	r1, [r3, #4]
100637a8:	2204      	movs	r2, #4
100637aa:	4391      	bics	r1, r2
100637ac:	8099      	strh	r1, [r3, #4]
100637ae:	a90e      	add	r1, sp, #56	@ 0x38
100637b0:	7809      	ldrb	r1, [r1, #0]
100637b2:	290a      	cmp	r1, #10
100637b4:	d008      	beq.n	100637c8 <GAT_clt_rcv+0x174>
100637b6:	2907      	cmp	r1, #7
100637b8:	d102      	bne.n	100637c0 <GAT_clt_rcv+0x16c>
100637ba:	280a      	cmp	r0, #10
100637bc:	d100      	bne.n	100637c0 <GAT_clt_rcv+0x16c>
100637be:	e775      	b.n	100636ac <GAT_clt_rcv+0x58>
100637c0:	7821      	ldrb	r1, [r4, #0]
100637c2:	2210      	movs	r2, #16
100637c4:	430a      	orrs	r2, r1
100637c6:	7022      	strb	r2, [r4, #0]
100637c8:	280e      	cmp	r0, #14
100637ca:	d100      	bne.n	100637ce <GAT_clt_rcv+0x17a>
100637cc:	e771      	b.n	100636b2 <GAT_clt_rcv+0x5e>
100637ce:	2810      	cmp	r0, #16
100637d0:	d100      	bne.n	100637d4 <GAT_clt_rcv+0x180>
100637d2:	e76e      	b.n	100636b2 <GAT_clt_rcv+0x5e>
100637d4:	e76a      	b.n	100636ac <GAT_clt_rcv+0x58>
100637d6:	a809      	add	r0, sp, #36	@ 0x24
100637d8:	7800      	ldrb	r0, [r0, #0]
100637da:	9007      	str	r0, [sp, #28]
100637dc:	88a3      	ldrh	r3, [r4, #4]
100637de:	8862      	ldrh	r2, [r4, #2]
100637e0:	a80f      	add	r0, sp, #60	@ 0x3c
100637e2:	8800      	ldrh	r0, [r0, #0]
100637e4:	4621      	mov	r1, r4
100637e6:	ac0e      	add	r4, sp, #56	@ 0x38
100637e8:	7824      	ldrb	r4, [r4, #0]
100637ea:	9000      	str	r0, [sp, #0]
100637ec:	9401      	str	r4, [sp, #4]
100637ee:	460c      	mov	r4, r1
100637f0:	2002      	movs	r0, #2
100637f2:	4611      	mov	r1, r2
100637f4:	461a      	mov	r2, r3
100637f6:	9b07      	ldr	r3, [sp, #28]
100637f8:	f7fe fc10 	bl	1006201c <aci_gatt_clt_error_resp_event_push_noinline>
100637fc:	2800      	cmp	r0, #0
100637fe:	d0be      	beq.n	1006377e <GAT_clt_rcv+0x12a>
10063800:	4606      	mov	r6, r0
10063802:	e13e      	b.n	10063a82 <GAT_clt_rcv+0x42e>
10063804:	88a2      	ldrh	r2, [r4, #4]
10063806:	8861      	ldrh	r1, [r4, #2]
10063808:	200a      	movs	r0, #10
1006380a:	462b      	mov	r3, r5
1006380c:	f7fe fe40 	bl	10062490 <aci_att_clt_read_by_type_resp_event_push_noinline>
10063810:	2800      	cmp	r0, #0
10063812:	d000      	beq.n	10063816 <GAT_clt_rcv+0x1c2>
10063814:	e12f      	b.n	10063a76 <GAT_clt_rcv+0x422>
10063816:	4628      	mov	r0, r5
10063818:	f7ff fc7a 	bl	10063110 <GAT_att_clt_read_type_get_last_attr_h>
1006381c:	e0c8      	b.n	100639b0 <GAT_clt_rcv+0x35c>
1006381e:	88a2      	ldrh	r2, [r4, #4]
10063820:	8861      	ldrh	r1, [r4, #2]
10063822:	200a      	movs	r0, #10
10063824:	2b0b      	cmp	r3, #11
10063826:	d000      	beq.n	1006382a <GAT_clt_rcv+0x1d6>
10063828:	e120      	b.n	10063a6c <GAT_clt_rcv+0x418>
1006382a:	462b      	mov	r3, r5
1006382c:	f7fe fec6 	bl	100625bc <aci_att_clt_read_multiple_resp_event_push_noinline>
10063830:	e11f      	b.n	10063a72 <GAT_clt_rcv+0x41e>
10063832:	88a2      	ldrh	r2, [r4, #4]
10063834:	8861      	ldrh	r1, [r4, #2]
10063836:	2002      	movs	r0, #2
10063838:	f7fe ff56 	bl	100626e8 <aci_att_clt_exec_write_resp_event_push_noinline>
1006383c:	2800      	cmp	r0, #0
1006383e:	d000      	beq.n	10063842 <GAT_clt_rcv+0x1ee>
10063840:	e119      	b.n	10063a76 <GAT_clt_rcv+0x422>
10063842:	4628      	mov	r0, r5
10063844:	f7ef ffc0 	bl	100537c8 <ACL_pkt_release>
10063848:	e117      	b.n	10063a7a <GAT_clt_rcv+0x426>
1006384a:	8960      	ldrh	r0, [r4, #10]
1006384c:	2800      	cmp	r0, #0
1006384e:	d100      	bne.n	10063852 <GAT_clt_rcv+0x1fe>
10063850:	e113      	b.n	10063a7a <GAT_clt_rcv+0x426>
10063852:	2600      	movs	r6, #0
10063854:	7226      	strb	r6, [r4, #8]
10063856:	200f      	movs	r0, #15
10063858:	71a0      	strb	r0, [r4, #6]
1006385a:	e112      	b.n	10063a82 <GAT_clt_rcv+0x42e>
1006385c:	89a8      	ldrh	r0, [r5, #12]
1006385e:	1c40      	adds	r0, r0, #1
10063860:	b281      	uxth	r1, r0
10063862:	4628      	mov	r0, r5
10063864:	f7ef ffd5 	bl	10053812 <ACL_pkt_read_16b>
10063868:	4606      	mov	r6, r0
1006386a:	2817      	cmp	r0, #23
1006386c:	d800      	bhi.n	10063870 <GAT_clt_rcv+0x21c>
1006386e:	2617      	movs	r6, #23
10063870:	48b3      	ldr	r0, [pc, #716]	@ (10063b40 <__arm_cp.4_3>)
10063872:	8a00      	ldrh	r0, [r0, #16]
10063874:	4286      	cmp	r6, r0
10063876:	9f08      	ldr	r7, [sp, #32]
10063878:	d300      	bcc.n	1006387c <GAT_clt_rcv+0x228>
1006387a:	4606      	mov	r6, r0
1006387c:	88b8      	ldrh	r0, [r7, #4]
1006387e:	0700      	lsls	r0, r0, #28
10063880:	d514      	bpl.n	100638ac <GAT_clt_rcv+0x258>
10063882:	88f8      	ldrh	r0, [r7, #6]
10063884:	42b0      	cmp	r0, r6
10063886:	d011      	beq.n	100638ac <GAT_clt_rcv+0x258>
10063888:	463b      	mov	r3, r7
1006388a:	3308      	adds	r3, #8
1006388c:	2042      	movs	r0, #66	@ 0x42
1006388e:	2103      	movs	r1, #3
10063890:	2202      	movs	r2, #2
10063892:	f7ff f88d 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
10063896:	2800      	cmp	r0, #0
10063898:	d000      	beq.n	1006389c <GAT_clt_rcv+0x248>
1006389a:	e0ec      	b.n	10063a76 <GAT_clt_rcv+0x422>
1006389c:	7820      	ldrb	r0, [r4, #0]
1006389e:	2110      	movs	r1, #16
100638a0:	4301      	orrs	r1, r0
100638a2:	7021      	strb	r1, [r4, #0]
100638a4:	88b8      	ldrh	r0, [r7, #4]
100638a6:	2108      	movs	r1, #8
100638a8:	4388      	bics	r0, r1
100638aa:	80b8      	strh	r0, [r7, #4]
100638ac:	7820      	ldrb	r0, [r4, #0]
100638ae:	06c0      	lsls	r0, r0, #27
100638b0:	d500      	bpl.n	100638b4 <GAT_clt_rcv+0x260>
100638b2:	88fe      	ldrh	r6, [r7, #6]
100638b4:	8861      	ldrh	r1, [r4, #2]
100638b6:	2002      	movs	r0, #2
100638b8:	4632      	mov	r2, r6
100638ba:	f7fe fd49 	bl	10062350 <aci_att_exchange_mtu_resp_event_push_noinline>
100638be:	2800      	cmp	r0, #0
100638c0:	d000      	beq.n	100638c4 <GAT_clt_rcv+0x270>
100638c2:	e0d8      	b.n	10063a76 <GAT_clt_rcv+0x422>
100638c4:	80fe      	strh	r6, [r7, #6]
100638c6:	88b8      	ldrh	r0, [r7, #4]
100638c8:	2108      	movs	r1, #8
100638ca:	4301      	orrs	r1, r0
100638cc:	2004      	movs	r0, #4
100638ce:	4381      	bics	r1, r0
100638d0:	80b9      	strh	r1, [r7, #4]
100638d2:	4620      	mov	r0, r4
100638d4:	e0dc      	b.n	10063a90 <GAT_clt_rcv+0x43c>
100638d6:	88a2      	ldrh	r2, [r4, #4]
100638d8:	8861      	ldrh	r1, [r4, #2]
100638da:	200a      	movs	r0, #10
100638dc:	462b      	mov	r3, r5
100638de:	f7fe fe9f 	bl	10062620 <aci_att_clt_read_by_group_type_resp_event_push_noinline>
100638e2:	2800      	cmp	r0, #0
100638e4:	d000      	beq.n	100638e8 <GAT_clt_rcv+0x294>
100638e6:	e0c6      	b.n	10063a76 <GAT_clt_rcv+0x422>
100638e8:	4628      	mov	r0, r5
100638ea:	f7ff fbc4 	bl	10063076 <GAT_att_clt_read_grp_type_get_last_attr_h>
100638ee:	e00b      	b.n	10063908 <GAT_clt_rcv+0x2b4>
100638f0:	88a2      	ldrh	r2, [r4, #4]
100638f2:	8861      	ldrh	r1, [r4, #2]
100638f4:	200a      	movs	r0, #10
100638f6:	462b      	mov	r3, r5
100638f8:	f7fe fd98 	bl	1006242c <aci_att_clt_find_by_type_value_resp_event_push_noinline>
100638fc:	2800      	cmp	r0, #0
100638fe:	d000      	beq.n	10063902 <GAT_clt_rcv+0x2ae>
10063900:	e0b9      	b.n	10063a76 <GAT_clt_rcv+0x422>
10063902:	4628      	mov	r0, r5
10063904:	f7ff fbdd 	bl	100630c2 <GAT_att_clt_find_type_val_get_last_attr_h>
10063908:	498c      	ldr	r1, [pc, #560]	@ (10063b3c <__arm_cp.4_2>)
1006390a:	4288      	cmp	r0, r1
1006390c:	d153      	bne.n	100639b6 <GAT_clt_rcv+0x362>
1006390e:	e0b4      	b.n	10063a7a <GAT_clt_rcv+0x426>
10063910:	4628      	mov	r0, r5
10063912:	f000 fa08 	bl	10063d26 <GAT_att_clt_read_type_get_len>
10063916:	9008      	str	r0, [sp, #32]
10063918:	8960      	ldrh	r0, [r4, #10]
1006391a:	a90e      	add	r1, sp, #56	@ 0x38
1006391c:	8008      	strh	r0, [r1, #0]
1006391e:	4620      	mov	r0, r4
10063920:	300c      	adds	r0, #12
10063922:	9007      	str	r0, [sp, #28]
10063924:	a809      	add	r0, sp, #36	@ 0x24
10063926:	300c      	adds	r0, #12
10063928:	9005      	str	r0, [sp, #20]
1006392a:	a80f      	add	r0, sp, #60	@ 0x3c
1006392c:	1d40      	adds	r0, r0, #5
1006392e:	9006      	str	r0, [sp, #24]
10063930:	2600      	movs	r6, #0
10063932:	b2f7      	uxtb	r7, r6
10063934:	aa0f      	add	r2, sp, #60	@ 0x3c
10063936:	4628      	mov	r0, r5
10063938:	4639      	mov	r1, r7
1006393a:	f7ff fbfe 	bl	1006313a <GAT_att_clt_read_type_get_data>
1006393e:	2800      	cmp	r0, #0
10063940:	d000      	beq.n	10063944 <GAT_clt_rcv+0x2f0>
10063942:	e0a1      	b.n	10063a88 <GAT_clt_rcv+0x434>
10063944:	9808      	ldr	r0, [sp, #32]
10063946:	2807      	cmp	r0, #7
10063948:	d105      	bne.n	10063956 <GAT_clt_rcv+0x302>
1006394a:	a809      	add	r0, sp, #36	@ 0x24
1006394c:	2110      	movs	r1, #16
1006394e:	7401      	strb	r1, [r0, #16]
10063950:	2202      	movs	r2, #2
10063952:	9805      	ldr	r0, [sp, #20]
10063954:	e003      	b.n	1006395e <GAT_clt_rcv+0x30a>
10063956:	a809      	add	r0, sp, #36	@ 0x24
10063958:	2180      	movs	r1, #128	@ 0x80
1006395a:	7401      	strb	r1, [r0, #16]
1006395c:	2210      	movs	r2, #16
1006395e:	9906      	ldr	r1, [sp, #24]
10063960:	f7ed fb9a 	bl	10051098 <BLEPLAT_MemCpy>
10063964:	a80e      	add	r0, sp, #56	@ 0x38
10063966:	a90f      	add	r1, sp, #60	@ 0x3c
10063968:	2202      	movs	r2, #2
1006396a:	f7ed fb95 	bl	10051098 <BLEPLAT_MemCpy>
1006396e:	a809      	add	r0, sp, #36	@ 0x24
10063970:	9907      	ldr	r1, [sp, #28]
10063972:	f7fd fdcf 	bl	10061514 <UUID_cmp_128bits>
10063976:	2800      	cmp	r0, #0
10063978:	d10d      	bne.n	10063996 <GAT_clt_rcv+0x342>
1006397a:	88a2      	ldrh	r2, [r4, #4]
1006397c:	8861      	ldrh	r1, [r4, #2]
1006397e:	9808      	ldr	r0, [sp, #32]
10063980:	9000      	str	r0, [sp, #0]
10063982:	9501      	str	r5, [sp, #4]
10063984:	4347      	muls	r7, r0
10063986:	1cb8      	adds	r0, r7, #2
10063988:	b283      	uxth	r3, r0
1006398a:	2002      	movs	r0, #2
1006398c:	f7fe fb8c 	bl	100620a8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10063990:	2800      	cmp	r0, #0
10063992:	d000      	beq.n	10063996 <GAT_clt_rcv+0x342>
10063994:	e082      	b.n	10063a9c <GAT_clt_rcv+0x448>
10063996:	1c76      	adds	r6, r6, #1
10063998:	e7cb      	b.n	10063932 <GAT_clt_rcv+0x2de>
1006399a:	88a2      	ldrh	r2, [r4, #4]
1006399c:	8861      	ldrh	r1, [r4, #2]
1006399e:	200a      	movs	r0, #10
100639a0:	462b      	mov	r3, r5
100639a2:	f7fe fd11 	bl	100623c8 <aci_att_clt_find_info_resp_event_push_noinline>
100639a6:	2800      	cmp	r0, #0
100639a8:	d165      	bne.n	10063a76 <GAT_clt_rcv+0x422>
100639aa:	4628      	mov	r0, r5
100639ac:	f7ff fbe0 	bl	10063170 <GAT_att_clt_find_info_get_last_attr_h>
100639b0:	8961      	ldrh	r1, [r4, #10]
100639b2:	4288      	cmp	r0, r1
100639b4:	d261      	bcs.n	10063a7a <GAT_clt_rcv+0x426>
100639b6:	1c40      	adds	r0, r0, #1
100639b8:	8120      	strh	r0, [r4, #8]
100639ba:	e061      	b.n	10063a80 <GAT_clt_rcv+0x42c>
100639bc:	88a2      	ldrh	r2, [r4, #4]
100639be:	8861      	ldrh	r1, [r4, #2]
100639c0:	200a      	movs	r0, #10
100639c2:	462b      	mov	r3, r5
100639c4:	f7fe fd96 	bl	100624f4 <aci_att_clt_read_resp_event_push_noinline>
100639c8:	e053      	b.n	10063a72 <GAT_clt_rcv+0x41e>
100639ca:	4628      	mov	r0, r5
100639cc:	f000 f9ab 	bl	10063d26 <GAT_att_clt_read_type_get_len>
100639d0:	4606      	mov	r6, r0
100639d2:	9406      	str	r4, [sp, #24]
100639d4:	8860      	ldrh	r0, [r4, #2]
100639d6:	f7f0 fe6b 	bl	100546b0 <GAP_started_gatt_proc>
100639da:	9008      	str	r0, [sp, #32]
100639dc:	2402      	movs	r4, #2
100639de:	8868      	ldrh	r0, [r5, #2]
100639e0:	b2a3      	uxth	r3, r4
100639e2:	4283      	cmp	r3, r0
100639e4:	d253      	bcs.n	10063a8e <GAT_clt_rcv+0x43a>
100639e6:	9808      	ldr	r0, [sp, #32]
100639e8:	2801      	cmp	r0, #1
100639ea:	d10e      	bne.n	10063a0a <GAT_clt_rcv+0x3b6>
100639ec:	89a8      	ldrh	r0, [r5, #12]
100639ee:	1900      	adds	r0, r0, r4
100639f0:	b281      	uxth	r1, r0
100639f2:	af0f      	add	r7, sp, #60	@ 0x3c
100639f4:	4628      	mov	r0, r5
100639f6:	4632      	mov	r2, r6
100639f8:	463b      	mov	r3, r7
100639fa:	f7ef ff01 	bl	10053800 <ACL_pkt_read>
100639fe:	205c      	movs	r0, #92	@ 0x5c
10063a00:	4631      	mov	r1, r6
10063a02:	463a      	mov	r2, r7
10063a04:	f7f0 fff0 	bl	100549e8 <GAP_internal_evt_handler>
10063a08:	e01a      	b.n	10063a40 <GAT_clt_rcv+0x3ec>
10063a0a:	9f06      	ldr	r7, [sp, #24]
10063a0c:	88ba      	ldrh	r2, [r7, #4]
10063a0e:	8879      	ldrh	r1, [r7, #2]
10063a10:	9600      	str	r6, [sp, #0]
10063a12:	9501      	str	r5, [sp, #4]
10063a14:	2002      	movs	r0, #2
10063a16:	f7fe fb47 	bl	100620a8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10063a1a:	2800      	cmp	r0, #0
10063a1c:	d12b      	bne.n	10063a76 <GAT_clt_rcv+0x422>
10063a1e:	7f38      	ldrb	r0, [r7, #28]
10063a20:	2810      	cmp	r0, #16
10063a22:	d10d      	bne.n	10063a40 <GAT_clt_rcv+0x3ec>
10063a24:	9806      	ldr	r0, [sp, #24]
10063a26:	8b00      	ldrh	r0, [r0, #24]
10063a28:	4942      	ldr	r1, [pc, #264]	@ (10063b34 <__arm_cp.4_0>)
10063a2a:	4288      	cmp	r0, r1
10063a2c:	d108      	bne.n	10063a40 <GAT_clt_rcv+0x3ec>
10063a2e:	9806      	ldr	r0, [sp, #24]
10063a30:	8840      	ldrh	r0, [r0, #2]
10063a32:	2104      	movs	r1, #4
10063a34:	f7f1 fd52 	bl	100554dc <GAT_att_cmn_get_channel_descr_p>
10063a38:	8881      	ldrh	r1, [r0, #4]
10063a3a:	4a3f      	ldr	r2, [pc, #252]	@ (10063b38 <__arm_cp.4_1>)
10063a3c:	4011      	ands	r1, r2
10063a3e:	8081      	strh	r1, [r0, #4]
10063a40:	19a4      	adds	r4, r4, r6
10063a42:	e7cc      	b.n	100639de <GAT_clt_rcv+0x38a>
10063a44:	88a2      	ldrh	r2, [r4, #4]
10063a46:	8861      	ldrh	r1, [r4, #2]
10063a48:	200a      	movs	r0, #10
10063a4a:	462b      	mov	r3, r5
10063a4c:	f7fe fd84 	bl	10062558 <aci_att_clt_read_blob_resp_event_push_noinline>
10063a50:	2800      	cmp	r0, #0
10063a52:	d110      	bne.n	10063a76 <GAT_clt_rcv+0x422>
10063a54:	9808      	ldr	r0, [sp, #32]
10063a56:	88c0      	ldrh	r0, [r0, #6]
10063a58:	1e41      	subs	r1, r0, #1
10063a5a:	8868      	ldrh	r0, [r5, #2]
10063a5c:	1e40      	subs	r0, r0, #1
10063a5e:	b282      	uxth	r2, r0
10063a60:	4291      	cmp	r1, r2
10063a62:	d80a      	bhi.n	10063a7a <GAT_clt_rcv+0x426>
10063a64:	8961      	ldrh	r1, [r4, #10]
10063a66:	1808      	adds	r0, r1, r0
10063a68:	8160      	strh	r0, [r4, #10]
10063a6a:	e009      	b.n	10063a80 <GAT_clt_rcv+0x42c>
10063a6c:	462b      	mov	r3, r5
10063a6e:	f7fe fed9 	bl	10062824 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
10063a72:	2800      	cmp	r0, #0
10063a74:	d001      	beq.n	10063a7a <GAT_clt_rcv+0x426>
10063a76:	2684      	movs	r6, #132	@ 0x84
10063a78:	e003      	b.n	10063a82 <GAT_clt_rcv+0x42e>
10063a7a:	4620      	mov	r0, r4
10063a7c:	f000 f879 	bl	10063b72 <GAT_clt_stop_proc>
10063a80:	9e07      	ldr	r6, [sp, #28]
10063a82:	4630      	mov	r0, r6
10063a84:	b015      	add	sp, #84	@ 0x54
10063a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063a88:	a80e      	add	r0, sp, #56	@ 0x38
10063a8a:	8800      	ldrh	r0, [r0, #0]
10063a8c:	e00a      	b.n	10063aa4 <GAT_clt_rcv+0x450>
10063a8e:	9806      	ldr	r0, [sp, #24]
10063a90:	f000 f86f 	bl	10063b72 <GAT_clt_stop_proc>
10063a94:	4628      	mov	r0, r5
10063a96:	f7ef fe97 	bl	100537c8 <ACL_pkt_release>
10063a9a:	e7f1      	b.n	10063a80 <GAT_clt_rcv+0x42c>
10063a9c:	980e      	ldr	r0, [sp, #56]	@ 0x38
10063a9e:	1e40      	subs	r0, r0, #1
10063aa0:	a90e      	add	r1, sp, #56	@ 0x38
10063aa2:	8008      	strh	r0, [r1, #0]
10063aa4:	8961      	ldrh	r1, [r4, #10]
10063aa6:	b282      	uxth	r2, r0
10063aa8:	428a      	cmp	r2, r1
10063aaa:	d202      	bcs.n	10063ab2 <GAT_clt_rcv+0x45e>
10063aac:	1c40      	adds	r0, r0, #1
10063aae:	8120      	strh	r0, [r4, #8]
10063ab0:	e002      	b.n	10063ab8 <GAT_clt_rcv+0x464>
10063ab2:	4620      	mov	r0, r4
10063ab4:	f000 f85d 	bl	10063b72 <GAT_clt_stop_proc>
10063ab8:	4628      	mov	r0, r5
10063aba:	f7ef fe85 	bl	100537c8 <ACL_pkt_release>
10063abe:	2600      	movs	r6, #0
10063ac0:	e7df      	b.n	10063a82 <GAT_clt_rcv+0x42e>
10063ac2:	8961      	ldrh	r1, [r4, #10]
10063ac4:	9a08      	ldr	r2, [sp, #32]
10063ac6:	89a0      	ldrh	r0, [r4, #12]
10063ac8:	1840      	adds	r0, r0, r1
10063aca:	8160      	strh	r0, [r4, #10]
10063acc:	b280      	uxth	r0, r0
10063ace:	435f      	muls	r7, r3
10063ad0:	19d1      	adds	r1, r2, r7
10063ad2:	8889      	ldrh	r1, [r1, #4]
10063ad4:	4288      	cmp	r0, r1
10063ad6:	d1d3      	bne.n	10063a80 <GAT_clt_rcv+0x42c>
10063ad8:	7a20      	ldrb	r0, [r4, #8]
10063ada:	1e40      	subs	r0, r0, #1
10063adc:	4298      	cmp	r0, r3
10063ade:	d924      	bls.n	10063b2a <GAT_clt_rcv+0x4d6>
10063ae0:	2600      	movs	r6, #0
10063ae2:	8166      	strh	r6, [r4, #10]
10063ae4:	7a60      	ldrb	r0, [r4, #9]
10063ae6:	1c40      	adds	r0, r0, #1
10063ae8:	7260      	strb	r0, [r4, #9]
10063aea:	e7ca      	b.n	10063a82 <GAT_clt_rcv+0x42e>
10063aec:	43f0      	mvns	r0, r6
10063aee:	9003      	str	r0, [sp, #12]
10063af0:	9b06      	ldr	r3, [sp, #24]
10063af2:	9d08      	ldr	r5, [sp, #32]
10063af4:	4639      	mov	r1, r7
10063af6:	4359      	muls	r1, r3
10063af8:	5a6a      	ldrh	r2, [r5, r1]
10063afa:	4628      	mov	r0, r5
10063afc:	9d05      	ldr	r5, [sp, #20]
10063afe:	4295      	cmp	r5, r2
10063b00:	d10b      	bne.n	10063b1a <GAT_clt_rcv+0x4c6>
10063b02:	4602      	mov	r2, r0
10063b04:	1841      	adds	r1, r0, r1
10063b06:	884a      	ldrh	r2, [r1, #2]
10063b08:	8961      	ldrh	r1, [r4, #10]
10063b0a:	188a      	adds	r2, r1, r2
10063b0c:	9d04      	ldr	r5, [sp, #16]
10063b0e:	42aa      	cmp	r2, r5
10063b10:	d103      	bne.n	10063b1a <GAT_clt_rcv+0x4c6>
10063b12:	4602      	mov	r2, r0
10063b14:	9803      	ldr	r0, [sp, #12]
10063b16:	2800      	cmp	r0, #0
10063b18:	d0d5      	beq.n	10063ac6 <GAT_clt_rcv+0x472>
10063b1a:	7226      	strb	r6, [r4, #8]
10063b1c:	200f      	movs	r0, #15
10063b1e:	71a0      	strb	r0, [r4, #6]
10063b20:	7820      	ldrb	r0, [r4, #0]
10063b22:	2110      	movs	r1, #16
10063b24:	4301      	orrs	r1, r0
10063b26:	7021      	strb	r1, [r4, #0]
10063b28:	e7ab      	b.n	10063a82 <GAT_clt_rcv+0x42e>
10063b2a:	2001      	movs	r0, #1
10063b2c:	7220      	strb	r0, [r4, #8]
10063b2e:	200f      	movs	r0, #15
10063b30:	71a0      	strb	r0, [r4, #6]
10063b32:	e7a5      	b.n	10063a80 <GAT_clt_rcv+0x42c>

10063b34 <__arm_cp.4_0>:
10063b34:	00002b2a 	.word	0x00002b2a

10063b38 <__arm_cp.4_1>:
10063b38:	0000fdff 	.word	0x0000fdff

10063b3c <__arm_cp.4_2>:
10063b3c:	0000ffff 	.word	0x0000ffff

10063b40 <__arm_cp.4_3>:
10063b40:	2000247c 	.word	0x2000247c

10063b44 <GAT_clt_get_proc_per_channel>:
10063b44:	4a07      	ldr	r2, [pc, #28]	@ (10063b64 <__arm_cp.5_0>)
10063b46:	6812      	ldr	r2, [r2, #0]
10063b48:	3248      	adds	r2, #72	@ 0x48
10063b4a:	6812      	ldr	r2, [r2, #0]
10063b4c:	2a00      	cmp	r2, #0
10063b4e:	d007      	beq.n	10063b60 <GAT_clt_get_proc_per_channel+0x1c>
10063b50:	8853      	ldrh	r3, [r2, #2]
10063b52:	4283      	cmp	r3, r0
10063b54:	d102      	bne.n	10063b5c <GAT_clt_get_proc_per_channel+0x18>
10063b56:	8893      	ldrh	r3, [r2, #4]
10063b58:	428b      	cmp	r3, r1
10063b5a:	d001      	beq.n	10063b60 <GAT_clt_get_proc_per_channel+0x1c>
10063b5c:	3220      	adds	r2, #32
10063b5e:	e7f4      	b.n	10063b4a <GAT_clt_get_proc_per_channel+0x6>
10063b60:	4610      	mov	r0, r2
10063b62:	4770      	bx	lr

10063b64 <__arm_cp.5_0>:
10063b64:	20002420 	.word	0x20002420

10063b68 <GAT_att_cmn_get_opcode>:
10063b68:	b580      	push	{r7, lr}
10063b6a:	8981      	ldrh	r1, [r0, #12]
10063b6c:	f000 f8cb 	bl	10063d06 <ACL_pkt_read_8b>
10063b70:	bd80      	pop	{r7, pc}

10063b72 <GAT_clt_stop_proc>:
10063b72:	b580      	push	{r7, lr}
10063b74:	7801      	ldrb	r1, [r0, #0]
10063b76:	2208      	movs	r2, #8
10063b78:	430a      	orrs	r2, r1
10063b7a:	7002      	strb	r2, [r0, #0]
10063b7c:	200c      	movs	r0, #12
10063b7e:	f7fd fb21 	bl	100611c4 <tsk_notify_idx>
10063b82:	f7ec fca2 	bl	100504ca <BLE_STACK_ProcessRequest>
10063b86:	bd80      	pop	{r7, pc}

10063b88 <GAT_clt_rcv_corrupted>:
10063b88:	b510      	push	{r4, lr}
10063b8a:	8804      	ldrh	r4, [r0, #0]
10063b8c:	f7f4 fb33 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10063b90:	4601      	mov	r1, r0
10063b92:	4620      	mov	r0, r4
10063b94:	f7ff ffd6 	bl	10063b44 <GAT_clt_get_proc_per_channel>
10063b98:	2800      	cmp	r0, #0
10063b9a:	d008      	beq.n	10063bae <GAT_clt_rcv_corrupted+0x26>
10063b9c:	7801      	ldrb	r1, [r0, #0]
10063b9e:	2218      	movs	r2, #24
10063ba0:	430a      	orrs	r2, r1
10063ba2:	7002      	strb	r2, [r0, #0]
10063ba4:	200c      	movs	r0, #12
10063ba6:	f7fd fb0d 	bl	100611c4 <tsk_notify_idx>
10063baa:	f7ec fc8e 	bl	100504ca <BLE_STACK_ProcessRequest>
10063bae:	2000      	movs	r0, #0
10063bb0:	bd10      	pop	{r4, pc}

10063bb2 <GAT_clt_rcv_srv_initiated>:
10063bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
10063bb4:	b085      	sub	sp, #20
10063bb6:	4604      	mov	r4, r0
10063bb8:	8805      	ldrh	r5, [r0, #0]
10063bba:	8980      	ldrh	r0, [r0, #12]
10063bbc:	1c46      	adds	r6, r0, #1
10063bbe:	4620      	mov	r0, r4
10063bc0:	f7ff ffd2 	bl	10063b68 <GAT_att_cmn_get_opcode>
10063bc4:	2823      	cmp	r0, #35	@ 0x23
10063bc6:	d010      	beq.n	10063bea <GAT_clt_rcv_srv_initiated+0x38>
10063bc8:	b2b1      	uxth	r1, r6
10063bca:	281b      	cmp	r0, #27
10063bcc:	d122      	bne.n	10063c14 <GAT_clt_rcv_srv_initiated+0x62>
10063bce:	4620      	mov	r0, r4
10063bd0:	f7ef fe1f 	bl	10053812 <ACL_pkt_read_16b>
10063bd4:	4601      	mov	r1, r0
10063bd6:	4628      	mov	r0, r5
10063bd8:	f000 f85c 	bl	10063c94 <GAT_clt_check_security>
10063bdc:	2800      	cmp	r0, #0
10063bde:	d03d      	beq.n	10063c5c <GAT_clt_rcv_srv_initiated+0xaa>
10063be0:	4620      	mov	r0, r4
10063be2:	f7ef fdf1 	bl	100537c8 <ACL_pkt_release>
10063be6:	2500      	movs	r5, #0
10063be8:	e050      	b.n	10063c8c <GAT_clt_rcv_srv_initiated+0xda>
10063bea:	8867      	ldrh	r7, [r4, #2]
10063bec:	b2b1      	uxth	r1, r6
10063bee:	4620      	mov	r0, r4
10063bf0:	42b9      	cmp	r1, r7
10063bf2:	d22a      	bcs.n	10063c4a <GAT_clt_rcv_srv_initiated+0x98>
10063bf4:	f7ef fe0d 	bl	10053812 <ACL_pkt_read_16b>
10063bf8:	4601      	mov	r1, r0
10063bfa:	4628      	mov	r0, r5
10063bfc:	f000 f84a 	bl	10063c94 <GAT_clt_check_security>
10063c00:	2800      	cmp	r0, #0
10063c02:	d1ed      	bne.n	10063be0 <GAT_clt_rcv_srv_initiated+0x2e>
10063c04:	1cb0      	adds	r0, r6, #2
10063c06:	b281      	uxth	r1, r0
10063c08:	4620      	mov	r0, r4
10063c0a:	f7ef fe02 	bl	10053812 <ACL_pkt_read_16b>
10063c0e:	1830      	adds	r0, r6, r0
10063c10:	1d06      	adds	r6, r0, #4
10063c12:	e7eb      	b.n	10063bec <GAT_clt_rcv_srv_initiated+0x3a>
10063c14:	4620      	mov	r0, r4
10063c16:	f7ef fdfc 	bl	10053812 <ACL_pkt_read_16b>
10063c1a:	4601      	mov	r1, r0
10063c1c:	4628      	mov	r0, r5
10063c1e:	f000 f839 	bl	10063c94 <GAT_clt_check_security>
10063c22:	2800      	cmp	r0, #0
10063c24:	d024      	beq.n	10063c70 <GAT_clt_rcv_srv_initiated+0xbe>
10063c26:	466e      	mov	r6, sp
10063c28:	8075      	strh	r5, [r6, #2]
10063c2a:	4620      	mov	r0, r4
10063c2c:	f7f4 fae3 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10063c30:	80b0      	strh	r0, [r6, #4]
10063c32:	201e      	movs	r0, #30
10063c34:	7030      	strb	r0, [r6, #0]
10063c36:	4630      	mov	r0, r6
10063c38:	f7ff f860 	bl	10062cfc <GAT_att_clt_tx>
10063c3c:	4605      	mov	r5, r0
10063c3e:	2800      	cmp	r0, #0
10063c40:	d120      	bne.n	10063c84 <GAT_clt_rcv_srv_initiated+0xd2>
10063c42:	4620      	mov	r0, r4
10063c44:	f7ef fdc0 	bl	100537c8 <ACL_pkt_release>
10063c48:	e01c      	b.n	10063c84 <GAT_clt_rcv_srv_initiated+0xd2>
10063c4a:	f7f4 fad4 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10063c4e:	4602      	mov	r2, r0
10063c50:	200a      	movs	r0, #10
10063c52:	4629      	mov	r1, r5
10063c54:	4623      	mov	r3, r4
10063c56:	f7fe fb49 	bl	100622ec <aci_gatt_clt_multi_notification_int_event_push_noinline>
10063c5a:	e012      	b.n	10063c82 <GAT_clt_rcv_srv_initiated+0xd0>
10063c5c:	4620      	mov	r0, r4
10063c5e:	f7f4 faca 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10063c62:	4602      	mov	r2, r0
10063c64:	200a      	movs	r0, #10
10063c66:	4629      	mov	r1, r5
10063c68:	4623      	mov	r3, r4
10063c6a:	f7fe f9a5 	bl	10061fb8 <aci_gatt_clt_notification_event_push_noinline>
10063c6e:	e008      	b.n	10063c82 <GAT_clt_rcv_srv_initiated+0xd0>
10063c70:	4620      	mov	r0, r4
10063c72:	f7f4 fac0 	bl	100581f6 <L2C_get_cid_from_basic_packet_header>
10063c76:	4602      	mov	r2, r0
10063c78:	200a      	movs	r0, #10
10063c7a:	4629      	mov	r1, r5
10063c7c:	4623      	mov	r3, r4
10063c7e:	f7fe f969 	bl	10061f54 <aci_gatt_clt_indication_event_push_noinline>
10063c82:	4605      	mov	r5, r0
10063c84:	2d00      	cmp	r5, #0
10063c86:	d001      	beq.n	10063c8c <GAT_clt_rcv_srv_initiated+0xda>
10063c88:	207b      	movs	r0, #123	@ 0x7b
10063c8a:	43c5      	mvns	r5, r0
10063c8c:	b2e8      	uxtb	r0, r5
10063c8e:	b005      	add	sp, #20
10063c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10063c94 <GAT_clt_check_security>:
10063c94:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10063c96:	4604      	mov	r4, r0
10063c98:	f000 f822 	bl	10063ce0 <GAT_clt_find_sec_level_entry_p>
10063c9c:	4605      	mov	r5, r0
10063c9e:	2800      	cmp	r0, #0
10063ca0:	d106      	bne.n	10063cb0 <GAT_clt_check_security+0x1c>
10063ca2:	480e      	ldr	r0, [pc, #56]	@ (10063cdc <__arm_cp.13_0>)
10063ca4:	4601      	mov	r1, r0
10063ca6:	f000 f81b 	bl	10063ce0 <GAT_clt_find_sec_level_entry_p>
10063caa:	4605      	mov	r5, r0
10063cac:	2800      	cmp	r0, #0
10063cae:	d002      	beq.n	10063cb6 <GAT_clt_check_security+0x22>
10063cb0:	7828      	ldrb	r0, [r5, #0]
10063cb2:	2802      	cmp	r0, #2
10063cb4:	d201      	bcs.n	10063cba <GAT_clt_check_security+0x26>
10063cb6:	2000      	movs	r0, #0
10063cb8:	e00d      	b.n	10063cd6 <GAT_clt_check_security+0x42>
10063cba:	a903      	add	r1, sp, #12
10063cbc:	aa02      	add	r2, sp, #8
10063cbe:	ab01      	add	r3, sp, #4
10063cc0:	4620      	mov	r0, r4
10063cc2:	f7fd f8a6 	bl	10060e12 <smp_sap_get_security_level>
10063cc6:	2800      	cmp	r0, #0
10063cc8:	d104      	bne.n	10063cd4 <GAT_clt_check_security+0x40>
10063cca:	7828      	ldrb	r0, [r5, #0]
10063ccc:	a902      	add	r1, sp, #8
10063cce:	7809      	ldrb	r1, [r1, #0]
10063cd0:	4281      	cmp	r1, r0
10063cd2:	d2f0      	bcs.n	10063cb6 <GAT_clt_check_security+0x22>
10063cd4:	20c0      	movs	r0, #192	@ 0xc0
10063cd6:	b004      	add	sp, #16
10063cd8:	bdb0      	pop	{r4, r5, r7, pc}
10063cda:	46c0      	nop			@ (mov r8, r8)

10063cdc <__arm_cp.13_0>:
10063cdc:	0000ffff 	.word	0x0000ffff

10063ce0 <GAT_clt_find_sec_level_entry_p>:
10063ce0:	4a07      	ldr	r2, [pc, #28]	@ (10063d00 <__arm_cp.15_0>)
10063ce2:	6812      	ldr	r2, [r2, #0]
10063ce4:	3258      	adds	r2, #88	@ 0x58
10063ce6:	6812      	ldr	r2, [r2, #0]
10063ce8:	2a00      	cmp	r2, #0
10063cea:	d007      	beq.n	10063cfc <GAT_clt_find_sec_level_entry_p+0x1c>
10063cec:	8893      	ldrh	r3, [r2, #4]
10063cee:	4283      	cmp	r3, r0
10063cf0:	d102      	bne.n	10063cf8 <GAT_clt_find_sec_level_entry_p+0x18>
10063cf2:	8853      	ldrh	r3, [r2, #2]
10063cf4:	428b      	cmp	r3, r1
10063cf6:	d001      	beq.n	10063cfc <GAT_clt_find_sec_level_entry_p+0x1c>
10063cf8:	3208      	adds	r2, #8
10063cfa:	e7f4      	b.n	10063ce6 <GAT_clt_find_sec_level_entry_p+0x6>
10063cfc:	4610      	mov	r0, r2
10063cfe:	4770      	bx	lr

10063d00 <__arm_cp.15_0>:
10063d00:	20002420 	.word	0x20002420

10063d04 <GAT_clt_exec_empty>:
10063d04:	4770      	bx	lr

10063d06 <ACL_pkt_read_8b>:
10063d06:	b51c      	push	{r2, r3, r4, lr}
10063d08:	291f      	cmp	r1, #31
10063d0a:	d803      	bhi.n	10063d14 <ACL_pkt_read_8b+0xe>
10063d0c:	aa01      	add	r2, sp, #4
10063d0e:	8011      	strh	r1, [r2, #0]
10063d10:	6840      	ldr	r0, [r0, #4]
10063d12:	e005      	b.n	10063d20 <ACL_pkt_read_8b+0x1a>
10063d14:	6840      	ldr	r0, [r0, #4]
10063d16:	ac01      	add	r4, sp, #4
10063d18:	4622      	mov	r2, r4
10063d1a:	f7fb fd1c 	bl	1005f756 <Mem_Buff_get_buff_off>
10063d1e:	8821      	ldrh	r1, [r4, #0]
10063d20:	1840      	adds	r0, r0, r1
10063d22:	7900      	ldrb	r0, [r0, #4]
10063d24:	bd1c      	pop	{r2, r3, r4, pc}

10063d26 <GAT_att_clt_read_type_get_len>:
10063d26:	b580      	push	{r7, lr}
10063d28:	8981      	ldrh	r1, [r0, #12]
10063d2a:	1c49      	adds	r1, r1, #1
10063d2c:	b289      	uxth	r1, r1
10063d2e:	f7ff ffea 	bl	10063d06 <ACL_pkt_read_8b>
10063d32:	bd80      	pop	{r7, pc}

10063d34 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
10063d34:	2000      	movs	r0, #0
10063d36:	4770      	bx	lr

10063d38 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
10063d38:	2000      	movs	r0, #0
10063d3a:	4770      	bx	lr

10063d3c <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
10063d3c:	b580      	push	{r7, lr}
10063d3e:	6841      	ldr	r1, [r0, #4]
10063d40:	7800      	ldrb	r0, [r0, #0]
10063d42:	f7f4 fa53 	bl	100581ec <l2c_release_unexpected_acl_packet>
10063d46:	2000      	movs	r0, #0
10063d48:	bd80      	pop	{r7, pc}

10063d4a <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
10063d4a:	4770      	bx	lr

10063d4c <llc_big_brc_mem_alloc_ucfg_weak>:
10063d4c:	4770      	bx	lr

10063d4e <llc_big_sync_mem_alloc_ucfg_weak>:
10063d4e:	4770      	bx	lr

10063d50 <llc_cig_cmn_mem_alloc_ucfg_weak>:
10063d50:	4770      	bx	lr

10063d52 <llc_conn_cancel_slot>:
10063d52:	b570      	push	{r4, r5, r6, lr}
10063d54:	4604      	mov	r4, r0
10063d56:	2030      	movs	r0, #48	@ 0x30
10063d58:	5c25      	ldrb	r5, [r4, r0]
10063d5a:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
10063d5c:	f7f4 fe03 	bl	10058966 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
10063d60:	20ff      	movs	r0, #255	@ 0xff
10063d62:	3012      	adds	r0, #18
10063d64:	1826      	adds	r6, r4, r0
10063d66:	4628      	mov	r0, r5
10063d68:	f7f6 fbbc 	bl	1005a4e4 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10063d6c:	2800      	cmp	r0, #0
10063d6e:	d004      	beq.n	10063d7a <llc_conn_cancel_slot+0x28>
10063d70:	3430      	adds	r4, #48	@ 0x30
10063d72:	7c60      	ldrb	r0, [r4, #17]
10063d74:	2101      	movs	r1, #1
10063d76:	f7fb fa69 	bl	1005f24c <LL_sched_set_per_state>
10063d7a:	2000      	movs	r0, #0
10063d7c:	7030      	strb	r0, [r6, #0]
10063d7e:	2015      	movs	r0, #21
10063d80:	f7fd fa20 	bl	100611c4 <tsk_notify_idx>
10063d84:	f7ec fba1 	bl	100504ca <BLE_STACK_ProcessRequest>
10063d88:	bd70      	pop	{r4, r5, r6, pc}

10063d8a <llc_conn_program_slot>:
10063d8a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10063d8c:	4604      	mov	r4, r0
10063d8e:	f7ee fae8 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
10063d92:	4605      	mov	r5, r0
10063d94:	2101      	movs	r1, #1
10063d96:	4620      	mov	r0, r4
10063d98:	f7f5 f886 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
10063d9c:	4626      	mov	r6, r4
10063d9e:	362c      	adds	r6, #44	@ 0x2c
10063da0:	4621      	mov	r1, r4
10063da2:	3128      	adds	r1, #40	@ 0x28
10063da4:	428d      	cmp	r5, r1
10063da6:	d010      	beq.n	10063dca <llc_conn_program_slot+0x40>
10063da8:	4285      	cmp	r5, r0
10063daa:	d00e      	beq.n	10063dca <llc_conn_program_slot+0x40>
10063dac:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
10063dae:	4620      	mov	r0, r4
10063db0:	f7f4 ffce 	bl	10058d50 <llc_conn_copy_tx_data_packet>
10063db4:	2101      	movs	r1, #1
10063db6:	4620      	mov	r0, r4
10063db8:	f7f5 f87c 	bl	10058eb4 <llc_conn_get_enc_on>
10063dbc:	2801      	cmp	r0, #1
10063dbe:	d104      	bne.n	10063dca <llc_conn_program_slot+0x40>
10063dc0:	7868      	ldrb	r0, [r5, #1]
10063dc2:	2800      	cmp	r0, #0
10063dc4:	d001      	beq.n	10063dca <llc_conn_program_slot+0x40>
10063dc6:	1d00      	adds	r0, r0, #4
10063dc8:	7068      	strb	r0, [r5, #1]
10063dca:	4625      	mov	r5, r4
10063dcc:	35d0      	adds	r5, #208	@ 0xd0
10063dce:	7830      	ldrb	r0, [r6, #0]
10063dd0:	2803      	cmp	r0, #3
10063dd2:	d113      	bne.n	10063dfc <llc_conn_program_slot+0x72>
10063dd4:	a801      	add	r0, sp, #4
10063dd6:	f7fb f837 	bl	1005ee48 <LL_sched_anchorstretch>
10063dda:	2801      	cmp	r0, #1
10063ddc:	d006      	beq.n	10063dec <llc_conn_program_slot+0x62>
10063dde:	2800      	cmp	r0, #0
10063de0:	d10a      	bne.n	10063df8 <llc_conn_program_slot+0x6e>
10063de2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10063de4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10063de6:	0049      	lsls	r1, r1, #1
10063de8:	1808      	adds	r0, r1, r0
10063dea:	e006      	b.n	10063dfa <llc_conn_program_slot+0x70>
10063dec:	6d21      	ldr	r1, [r4, #80]	@ 0x50
10063dee:	9801      	ldr	r0, [sp, #4]
10063df0:	4288      	cmp	r0, r1
10063df2:	d302      	bcc.n	10063dfa <llc_conn_program_slot+0x70>
10063df4:	4608      	mov	r0, r1
10063df6:	e000      	b.n	10063dfa <llc_conn_program_slot+0x70>
10063df8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
10063dfa:	6068      	str	r0, [r5, #4]
10063dfc:	4620      	mov	r0, r4
10063dfe:	f7f5 f887 	bl	10058f10 <llc_conn_guard_time_for_close_conn_event>
10063e02:	4620      	mov	r0, r4
10063e04:	f7f6 f948 	bl	1005a098 <llc_conn_update_receive_window>
10063e08:	6829      	ldr	r1, [r5, #0]
10063e0a:	3414      	adds	r4, #20
10063e0c:	4620      	mov	r0, r4
10063e0e:	f7ee fbf0 	bl	100525f2 <BLEPLAT_CNTR_SetRcvLen>
10063e12:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10063e14 <llc_conn_skip_slot>:
10063e14:	b5f0      	push	{r4, r5, r6, r7, lr}
10063e16:	b089      	sub	sp, #36	@ 0x24
10063e18:	2242      	movs	r2, #66	@ 0x42
10063e1a:	5a85      	ldrh	r5, [r0, r2]
10063e1c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
10063e1e:	9201      	str	r2, [sp, #4]
10063e20:	1851      	adds	r1, r2, r1
10063e22:	9106      	str	r1, [sp, #24]
10063e24:	2191      	movs	r1, #145	@ 0x91
10063e26:	0049      	lsls	r1, r1, #1
10063e28:	1841      	adds	r1, r0, r1
10063e2a:	9102      	str	r1, [sp, #8]
10063e2c:	4601      	mov	r1, r0
10063e2e:	3142      	adds	r1, #66	@ 0x42
10063e30:	9105      	str	r1, [sp, #20]
10063e32:	4601      	mov	r1, r0
10063e34:	312d      	adds	r1, #45	@ 0x2d
10063e36:	9103      	str	r1, [sp, #12]
10063e38:	9007      	str	r0, [sp, #28]
10063e3a:	309a      	adds	r0, #154	@ 0x9a
10063e3c:	9004      	str	r0, [sp, #16]
10063e3e:	2000      	movs	r0, #0
10063e40:	9008      	str	r0, [sp, #32]
10063e42:	b2a9      	uxth	r1, r5
10063e44:	2201      	movs	r2, #1
10063e46:	9e07      	ldr	r6, [sp, #28]
10063e48:	4630      	mov	r0, r6
10063e4a:	f7f5 fb06 	bl	1005945a <llc_conn_calc_skip_ucfg_weak>
10063e4e:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
10063e50:	4341      	muls	r1, r0
10063e52:	6c72      	ldr	r2, [r6, #68]	@ 0x44
10063e54:	1854      	adds	r4, r2, r1
10063e56:	6474      	str	r4, [r6, #68]	@ 0x44
10063e58:	9908      	ldr	r1, [sp, #32]
10063e5a:	1841      	adds	r1, r0, r1
10063e5c:	9108      	str	r1, [sp, #32]
10063e5e:	182d      	adds	r5, r5, r0
10063e60:	b2af      	uxth	r7, r5
10063e62:	4630      	mov	r0, r6
10063e64:	4639      	mov	r1, r7
10063e66:	f7f5 fb9b 	bl	100595a0 <llc_conn_check_instant_and_set_params>
10063e6a:	4606      	mov	r6, r0
10063e6c:	2800      	cmp	r0, #0
10063e6e:	d102      	bne.n	10063e76 <llc_conn_skip_slot+0x62>
10063e70:	9806      	ldr	r0, [sp, #24]
10063e72:	1a20      	subs	r0, r4, r0
10063e74:	d4e5      	bmi.n	10063e42 <llc_conn_skip_slot+0x2e>
10063e76:	9c05      	ldr	r4, [sp, #20]
10063e78:	8820      	ldrh	r0, [r4, #0]
10063e7a:	42b8      	cmp	r0, r7
10063e7c:	d907      	bls.n	10063e8e <llc_conn_skip_slot+0x7a>
10063e7e:	2009      	movs	r0, #9
10063e80:	0140      	lsls	r0, r0, #5
10063e82:	9907      	ldr	r1, [sp, #28]
10063e84:	1809      	adds	r1, r1, r0
10063e86:	9802      	ldr	r0, [sp, #8]
10063e88:	8800      	ldrh	r0, [r0, #0]
10063e8a:	f7f6 fb81 	bl	1005a590 <llc_subrate_new_sr_base_event_ucfg_weak>
10063e8e:	8025      	strh	r5, [r4, #0]
10063e90:	2e00      	cmp	r6, #0
10063e92:	9d08      	ldr	r5, [sp, #32]
10063e94:	d118      	bne.n	10063ec8 <llc_conn_skip_slot+0xb4>
10063e96:	9807      	ldr	r0, [sp, #28]
10063e98:	6c41      	ldr	r1, [r0, #68]	@ 0x44
10063e9a:	9a01      	ldr	r2, [sp, #4]
10063e9c:	1a8f      	subs	r7, r1, r2
10063e9e:	4639      	mov	r1, r7
10063ea0:	f7f5 fc12 	bl	100596c8 <llc_conn_check_supervision_timer>
10063ea4:	4606      	mov	r6, r0
10063ea6:	2800      	cmp	r0, #0
10063ea8:	d10e      	bne.n	10063ec8 <llc_conn_skip_slot+0xb4>
10063eaa:	9807      	ldr	r0, [sp, #28]
10063eac:	4639      	mov	r1, r7
10063eae:	f7f5 fb41 	bl	10059534 <llc_conn_check_ctrl_proc_rsp_timer>
10063eb2:	4606      	mov	r6, r0
10063eb4:	2800      	cmp	r0, #0
10063eb6:	d107      	bne.n	10063ec8 <llc_conn_skip_slot+0xb4>
10063eb8:	9807      	ldr	r0, [sp, #28]
10063eba:	4639      	mov	r1, r7
10063ebc:	462a      	mov	r2, r5
10063ebe:	f7f6 f875 	bl	10059fac <llc_conn_set_taskslot_params>
10063ec2:	4606      	mov	r6, r0
10063ec4:	2800      	cmp	r0, #0
10063ec6:	d007      	beq.n	10063ed8 <llc_conn_skip_slot+0xc4>
10063ec8:	9c03      	ldr	r4, [sp, #12]
10063eca:	7d20      	ldrb	r0, [r4, #20]
10063ecc:	f7fb f9b4 	bl	1005f238 <LL_sched_delete_taskslot>
10063ed0:	7026      	strb	r6, [r4, #0]
10063ed2:	2000      	movs	r0, #0
10063ed4:	9904      	ldr	r1, [sp, #16]
10063ed6:	8008      	strh	r0, [r1, #0]
10063ed8:	4628      	mov	r0, r5
10063eda:	b009      	add	sp, #36	@ 0x24
10063edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10063ee0 <llc_conn_isr>:
10063ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
10063ee2:	b099      	sub	sp, #100	@ 0x64
10063ee4:	4607      	mov	r7, r0
10063ee6:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
10063ee8:	1c40      	adds	r0, r0, #1
10063eea:	8678      	strh	r0, [r7, #50]	@ 0x32
10063eec:	2041      	movs	r0, #65	@ 0x41
10063eee:	5c3d      	ldrb	r5, [r7, r0]
10063ef0:	202d      	movs	r0, #45	@ 0x2d
10063ef2:	5c38      	ldrb	r0, [r7, r0]
10063ef4:	2800      	cmp	r0, #0
10063ef6:	d008      	beq.n	10063f0a <llc_conn_isr+0x2a>
10063ef8:	f7ed f9da 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10063efc:	4628      	mov	r0, r5
10063efe:	f7fb f99b 	bl	1005f238 <LL_sched_delete_taskslot>
10063f02:	4628      	mov	r0, r5
10063f04:	f7fa ffa8 	bl	1005ee58 <LL_sched_engine>
10063f08:	e2a5      	b.n	10064456 <__arm_cp.0_5+0x182>
10063f0a:	2021      	movs	r0, #33	@ 0x21
10063f0c:	00c0      	lsls	r0, r0, #3
10063f0e:	183e      	adds	r6, r7, r0
10063f10:	4638      	mov	r0, r7
10063f12:	302c      	adds	r0, #44	@ 0x2c
10063f14:	900d      	str	r0, [sp, #52]	@ 0x34
10063f16:	463c      	mov	r4, r7
10063f18:	3480      	adds	r4, #128	@ 0x80
10063f1a:	4638      	mov	r0, r7
10063f1c:	30d0      	adds	r0, #208	@ 0xd0
10063f1e:	9007      	str	r0, [sp, #28]
10063f20:	48ea      	ldr	r0, [pc, #936]	@ (100642cc <__arm_cp.0_3>)
10063f22:	6800      	ldr	r0, [r0, #0]
10063f24:	f7ee f9e0 	bl	100522e8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
10063f28:	9009      	str	r0, [sp, #36]	@ 0x24
10063f2a:	2800      	cmp	r0, #0
10063f2c:	940b      	str	r4, [sp, #44]	@ 0x2c
10063f2e:	960a      	str	r6, [sp, #40]	@ 0x28
10063f30:	9508      	str	r5, [sp, #32]
10063f32:	d040      	beq.n	10063fb6 <llc_conn_isr+0xd6>
10063f34:	463e      	mov	r6, r7
10063f36:	3614      	adds	r6, #20
10063f38:	4630      	mov	r0, r6
10063f3a:	f7ee fa05 	bl	10052348 <BLEPLAT_CNTR_PacketClrPllTrig>
10063f3e:	4630      	mov	r0, r6
10063f40:	f7ee f9f6 	bl	10052330 <BLEPLAT_CNTR_PacketClrIncChan>
10063f44:	4620      	mov	r0, r4
10063f46:	3008      	adds	r0, #8
10063f48:	900c      	str	r0, [sp, #48]	@ 0x30
10063f4a:	7a20      	ldrb	r0, [r4, #8]
10063f4c:	0780      	lsls	r0, r0, #30
10063f4e:	d445      	bmi.n	10063fdc <llc_conn_isr+0xfc>
10063f50:	4638      	mov	r0, r7
10063f52:	f7ee fa06 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
10063f56:	4605      	mov	r5, r0
10063f58:	463c      	mov	r4, r7
10063f5a:	3428      	adds	r4, #40	@ 0x28
10063f5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
10063f5e:	7800      	ldrb	r0, [r0, #0]
10063f60:	2100      	movs	r1, #0
10063f62:	9106      	str	r1, [sp, #24]
10063f64:	2803      	cmp	r0, #3
10063f66:	d000      	beq.n	10063f6a <llc_conn_isr+0x8a>
10063f68:	e0a6      	b.n	100640b8 <llc_conn_isr+0x1d8>
10063f6a:	4630      	mov	r0, r6
10063f6c:	f7ee f9f9 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
10063f70:	4603      	mov	r3, r0
10063f72:	42a5      	cmp	r5, r4
10063f74:	d015      	beq.n	10063fa2 <llc_conn_isr+0xc2>
10063f76:	7829      	ldrb	r1, [r5, #0]
10063f78:	2003      	movs	r0, #3
10063f7a:	460a      	mov	r2, r1
10063f7c:	4002      	ands	r2, r0
10063f7e:	2a03      	cmp	r2, #3
10063f80:	d10a      	bne.n	10063f98 <llc_conn_isr+0xb8>
10063f82:	0689      	lsls	r1, r1, #26
10063f84:	d400      	bmi.n	10063f88 <llc_conn_isr+0xa8>
10063f86:	2002      	movs	r0, #2
10063f88:	5c28      	ldrb	r0, [r5, r0]
10063f8a:	2806      	cmp	r0, #6
10063f8c:	d104      	bne.n	10063f98 <llc_conn_isr+0xb8>
10063f8e:	4638      	mov	r0, r7
10063f90:	9305      	str	r3, [sp, #20]
10063f92:	f7f4 fec5 	bl	10058d20 <llc_conn_clr_rx_acl_blocked>
10063f96:	9b05      	ldr	r3, [sp, #20]
10063f98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10063f9a:	6810      	ldr	r0, [r2, #0]
10063f9c:	2140      	movs	r1, #64	@ 0x40
10063f9e:	4301      	orrs	r1, r0
10063fa0:	6011      	str	r1, [r2, #0]
10063fa2:	7818      	ldrb	r0, [r3, #0]
10063fa4:	7829      	ldrb	r1, [r5, #0]
10063fa6:	4301      	orrs	r1, r0
10063fa8:	06c8      	lsls	r0, r1, #27
10063faa:	d474      	bmi.n	10064096 <llc_conn_isr+0x1b6>
10063fac:	980c      	ldr	r0, [sp, #48]	@ 0x30
10063fae:	7800      	ldrb	r0, [r0, #0]
10063fb0:	06c0      	lsls	r0, r0, #27
10063fb2:	d57d      	bpl.n	100640b0 <llc_conn_isr+0x1d0>
10063fb4:	e080      	b.n	100640b8 <llc_conn_isr+0x1d8>
10063fb6:	4638      	mov	r0, r7
10063fb8:	f7ee f9c6 	bl	10052348 <BLEPLAT_CNTR_PacketClrPllTrig>
10063fbc:	4638      	mov	r0, r7
10063fbe:	f7ee f9b7 	bl	10052330 <BLEPLAT_CNTR_PacketClrIncChan>
10063fc2:	a80e      	add	r0, sp, #56	@ 0x38
10063fc4:	2600      	movs	r6, #0
10063fc6:	7786      	strb	r6, [r0, #30]
10063fc8:	7606      	strb	r6, [r0, #24]
10063fca:	7746      	strb	r6, [r0, #29]
10063fcc:	4cbf      	ldr	r4, [pc, #764]	@ (100642cc <__arm_cp.0_3>)
10063fce:	6820      	ldr	r0, [r4, #0]
10063fd0:	f7ee f97e 	bl	100522d0 <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10063fd4:	2800      	cmp	r0, #0
10063fd6:	d010      	beq.n	10063ffa <llc_conn_isr+0x11a>
10063fd8:	2501      	movs	r5, #1
10063fda:	e014      	b.n	10064006 <llc_conn_isr+0x126>
10063fdc:	463d      	mov	r5, r7
10063fde:	35a8      	adds	r5, #168	@ 0xa8
10063fe0:	f7ed f966 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10063fe4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10063fe6:	7d70      	ldrb	r0, [r6, #21]
10063fe8:	f7fb f926 	bl	1005f238 <LL_sched_delete_taskslot>
10063fec:	2000      	movs	r0, #0
10063fee:	8028      	strh	r0, [r5, #0]
10063ff0:	2113      	movs	r1, #19
10063ff2:	7071      	strb	r1, [r6, #1]
10063ff4:	8360      	strh	r0, [r4, #26]
10063ff6:	4634      	mov	r4, r6
10063ff8:	e1e5      	b.n	100643c6 <__arm_cp.0_5+0xf2>
10063ffa:	6820      	ldr	r0, [r4, #0]
10063ffc:	f7ee f921 	bl	10052242 <BLEPLAT_CNTR_IntGetIntStatusLenErr>
10064000:	4605      	mov	r5, r0
10064002:	1e40      	subs	r0, r0, #1
10064004:	4185      	sbcs	r5, r0
10064006:	a80e      	add	r0, sp, #56	@ 0x38
10064008:	76c5      	strb	r5, [r0, #27]
1006400a:	6820      	ldr	r0, [r4, #0]
1006400c:	f7ee f977 	bl	100522fe <BLEPLAT_CNTR_IntGetIntStatusTxOk>
10064010:	9006      	str	r0, [sp, #24]
10064012:	900f      	str	r0, [sp, #60]	@ 0x3c
10064014:	2d00      	cmp	r5, #0
10064016:	d01f      	beq.n	10064058 <llc_conn_isr+0x178>
10064018:	f7ed f94a 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
1006401c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1006401e:	68e8      	ldr	r0, [r5, #12]
10064020:	2800      	cmp	r0, #0
10064022:	d002      	beq.n	1006402a <llc_conn_isr+0x14a>
10064024:	88c1      	ldrh	r1, [r0, #6]
10064026:	1c49      	adds	r1, r1, #1
10064028:	80c1      	strh	r1, [r0, #6]
1006402a:	6928      	ldr	r0, [r5, #16]
1006402c:	2800      	cmp	r0, #0
1006402e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10064030:	9e06      	ldr	r6, [sp, #24]
10064032:	d00a      	beq.n	1006404a <llc_conn_isr+0x16a>
10064034:	980d      	ldr	r0, [sp, #52]	@ 0x34
10064036:	7d40      	ldrb	r0, [r0, #21]
10064038:	f7ee fbd4 	bl	100527e4 <BLEPLAT_CNTR_SmGetRemapChan>
1006403c:	0040      	lsls	r0, r0, #1
1006403e:	6929      	ldr	r1, [r5, #16]
10064040:	1808      	adds	r0, r1, r0
10064042:	2194      	movs	r1, #148	@ 0x94
10064044:	5a42      	ldrh	r2, [r0, r1]
10064046:	1c52      	adds	r2, r2, #1
10064048:	5242      	strh	r2, [r0, r1]
1006404a:	a80e      	add	r0, sp, #56	@ 0x38
1006404c:	2501      	movs	r5, #1
1006404e:	7605      	strb	r5, [r0, #24]
10064050:	68a0      	ldr	r0, [r4, #8]
10064052:	3408      	adds	r4, #8
10064054:	2300      	movs	r3, #0
10064056:	e0b9      	b.n	100641cc <llc_conn_isr+0x2ec>
10064058:	6820      	ldr	r0, [r4, #0]
1006405a:	f7ee f92e 	bl	100522ba <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1006405e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10064060:	7a11      	ldrb	r1, [r2, #8]
10064062:	094b      	lsrs	r3, r1, #5
10064064:	2501      	movs	r5, #1
10064066:	4629      	mov	r1, r5
10064068:	4399      	bics	r1, r3
1006406a:	ab0e      	add	r3, sp, #56	@ 0x38
1006406c:	7699      	strb	r1, [r3, #26]
1006406e:	9005      	str	r0, [sp, #20]
10064070:	900e      	str	r0, [sp, #56]	@ 0x38
10064072:	6820      	ldr	r0, [r4, #0]
10064074:	4614      	mov	r4, r2
10064076:	3408      	adds	r4, #8
10064078:	f7ee f8bf 	bl	100521fa <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
1006407c:	2800      	cmp	r0, #0
1006407e:	d06e      	beq.n	1006415e <llc_conn_isr+0x27e>
10064080:	7820      	ldrb	r0, [r4, #0]
10064082:	06c0      	lsls	r0, r0, #27
10064084:	9704      	str	r7, [sp, #16]
10064086:	d479      	bmi.n	1006417c <llc_conn_isr+0x29c>
10064088:	f7ee f87d 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
1006408c:	6820      	ldr	r0, [r4, #0]
1006408e:	2110      	movs	r1, #16
10064090:	4301      	orrs	r1, r0
10064092:	6021      	str	r1, [r4, #0]
10064094:	e076      	b.n	10064184 <llc_conn_isr+0x2a4>
10064096:	9807      	ldr	r0, [sp, #28]
10064098:	6840      	ldr	r0, [r0, #4]
1006409a:	9005      	str	r0, [sp, #20]
1006409c:	f7ed f8c7 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
100640a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
100640a2:	1a08      	subs	r0, r1, r0
100640a4:	9905      	ldr	r1, [sp, #20]
100640a6:	1840      	adds	r0, r0, r1
100640a8:	d402      	bmi.n	100640b0 <llc_conn_isr+0x1d0>
100640aa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
100640ac:	4288      	cmp	r0, r1
100640ae:	d203      	bcs.n	100640b8 <llc_conn_isr+0x1d8>
100640b0:	f7ed f8fe 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
100640b4:	2001      	movs	r0, #1
100640b6:	9006      	str	r0, [sp, #24]
100640b8:	4638      	mov	r0, r7
100640ba:	f7f4 ff22 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
100640be:	2802      	cmp	r0, #2
100640c0:	d13d      	bne.n	1006413e <llc_conn_isr+0x25e>
100640c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100640c4:	6940      	ldr	r0, [r0, #20]
100640c6:	6800      	ldr	r0, [r0, #0]
100640c8:	06c1      	lsls	r1, r0, #27
100640ca:	d415      	bmi.n	100640f8 <llc_conn_isr+0x218>
100640cc:	0640      	lsls	r0, r0, #25
100640ce:	d536      	bpl.n	1006413e <llc_conn_isr+0x25e>
100640d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100640d2:	7d40      	ldrb	r0, [r0, #21]
100640d4:	f7ee fac5 	bl	10052662 <BLEPLAT_CNTR_SmEncOff>
100640d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100640da:	6958      	ldr	r0, [r3, #20]
100640dc:	6801      	ldr	r1, [r0, #0]
100640de:	2240      	movs	r2, #64	@ 0x40
100640e0:	4391      	bics	r1, r2
100640e2:	6001      	str	r1, [r0, #0]
100640e4:	6898      	ldr	r0, [r3, #8]
100640e6:	2108      	movs	r1, #8
100640e8:	4388      	bics	r0, r1
100640ea:	6098      	str	r0, [r3, #8]
100640ec:	2012      	movs	r0, #18
100640ee:	f7fd f869 	bl	100611c4 <tsk_notify_idx>
100640f2:	f7ec f9ea 	bl	100504ca <BLE_STACK_ProcessRequest>
100640f6:	e022      	b.n	1006413e <llc_conn_isr+0x25e>
100640f8:	9505      	str	r5, [sp, #20]
100640fa:	2000      	movs	r0, #0
100640fc:	900f      	str	r0, [sp, #60]	@ 0x3c
100640fe:	900e      	str	r0, [sp, #56]	@ 0x38
10064100:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10064102:	7d68      	ldrb	r0, [r5, #21]
10064104:	f7ee fac1 	bl	1005268a <BLEPLAT_CNTR_SmEncOn>
10064108:	7d68      	ldrb	r0, [r5, #21]
1006410a:	a90e      	add	r1, sp, #56	@ 0x38
1006410c:	f7ee fc8e 	bl	10052a2c <BLEPLAT_CNTR_SmSetRxCount>
10064110:	7828      	ldrb	r0, [r5, #0]
10064112:	2803      	cmp	r0, #3
10064114:	d103      	bne.n	1006411e <llc_conn_isr+0x23e>
10064116:	980d      	ldr	r0, [sp, #52]	@ 0x34
10064118:	7d40      	ldrb	r0, [r0, #21]
1006411a:	f7ee fcaa 	bl	10052a72 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
1006411e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10064120:	6958      	ldr	r0, [r3, #20]
10064122:	6801      	ldr	r1, [r0, #0]
10064124:	2210      	movs	r2, #16
10064126:	4391      	bics	r1, r2
10064128:	6001      	str	r1, [r0, #0]
1006412a:	6898      	ldr	r0, [r3, #8]
1006412c:	2108      	movs	r1, #8
1006412e:	4301      	orrs	r1, r0
10064130:	6099      	str	r1, [r3, #8]
10064132:	2012      	movs	r0, #18
10064134:	f7fd f846 	bl	100611c4 <tsk_notify_idx>
10064138:	f7ec f9c7 	bl	100504ca <BLE_STACK_ProcessRequest>
1006413c:	9d05      	ldr	r5, [sp, #20]
1006413e:	42a5      	cmp	r5, r4
10064140:	990a      	ldr	r1, [sp, #40]	@ 0x28
10064142:	d001      	beq.n	10064148 <llc_conn_isr+0x268>
10064144:	8a88      	ldrh	r0, [r1, #20]
10064146:	82c8      	strh	r0, [r1, #22]
10064148:	9806      	ldr	r0, [sp, #24]
1006414a:	2800      	cmp	r0, #0
1006414c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006414e:	d000      	beq.n	10064152 <llc_conn_isr+0x272>
10064150:	e136      	b.n	100643c0 <__arm_cp.0_5+0xec>
10064152:	9807      	ldr	r0, [sp, #28]
10064154:	6801      	ldr	r1, [r0, #0]
10064156:	4630      	mov	r0, r6
10064158:	f7ee fa4b 	bl	100525f2 <BLEPLAT_CNTR_SetRcvLen>
1006415c:	e135      	b.n	100643ca <__arm_cp.0_5+0xf6>
1006415e:	485b      	ldr	r0, [pc, #364]	@ (100642cc <__arm_cp.0_3>)
10064160:	6800      	ldr	r0, [r0, #0]
10064162:	f7ee f862 	bl	1005222a <BLEPLAT_CNTR_IntGetIntStatusEncErr>
10064166:	2800      	cmp	r0, #0
10064168:	d026      	beq.n	100641b8 <llc_conn_isr+0x2d8>
1006416a:	9805      	ldr	r0, [sp, #20]
1006416c:	2800      	cmp	r0, #0
1006416e:	d023      	beq.n	100641b8 <llc_conn_isr+0x2d8>
10064170:	f7ed f89e 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10064174:	a80e      	add	r0, sp, #56	@ 0x38
10064176:	233d      	movs	r3, #61	@ 0x3d
10064178:	7783      	strb	r3, [r0, #30]
1006417a:	e023      	b.n	100641c4 <llc_conn_isr+0x2e4>
1006417c:	f7ed f898 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10064180:	a80e      	add	r0, sp, #56	@ 0x38
10064182:	7605      	strb	r5, [r0, #24]
10064184:	4637      	mov	r7, r6
10064186:	980a      	ldr	r0, [sp, #40]	@ 0x28
10064188:	68c0      	ldr	r0, [r0, #12]
1006418a:	2800      	cmp	r0, #0
1006418c:	d002      	beq.n	10064194 <llc_conn_isr+0x2b4>
1006418e:	8841      	ldrh	r1, [r0, #2]
10064190:	1c49      	adds	r1, r1, #1
10064192:	8041      	strh	r1, [r0, #2]
10064194:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10064196:	6930      	ldr	r0, [r6, #16]
10064198:	2800      	cmp	r0, #0
1006419a:	d00a      	beq.n	100641b2 <llc_conn_isr+0x2d2>
1006419c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006419e:	7d40      	ldrb	r0, [r0, #21]
100641a0:	f7ee fb20 	bl	100527e4 <BLEPLAT_CNTR_SmGetRemapChan>
100641a4:	0040      	lsls	r0, r0, #1
100641a6:	6931      	ldr	r1, [r6, #16]
100641a8:	1808      	adds	r0, r1, r0
100641aa:	214a      	movs	r1, #74	@ 0x4a
100641ac:	5a42      	ldrh	r2, [r0, r1]
100641ae:	1c52      	adds	r2, r2, #1
100641b0:	5242      	strh	r2, [r0, r1]
100641b2:	463b      	mov	r3, r7
100641b4:	9f04      	ldr	r7, [sp, #16]
100641b6:	e005      	b.n	100641c4 <llc_conn_isr+0x2e4>
100641b8:	6820      	ldr	r0, [r4, #0]
100641ba:	2110      	movs	r1, #16
100641bc:	4388      	bics	r0, r1
100641be:	6020      	str	r0, [r4, #0]
100641c0:	2300      	movs	r3, #0
100641c2:	461d      	mov	r5, r3
100641c4:	9e06      	ldr	r6, [sp, #24]
100641c6:	6821      	ldr	r1, [r4, #0]
100641c8:	2020      	movs	r0, #32
100641ca:	4308      	orrs	r0, r1
100641cc:	4271      	negs	r1, r6
100641ce:	4171      	adcs	r1, r6
100641d0:	0189      	lsls	r1, r1, #6
100641d2:	2240      	movs	r2, #64	@ 0x40
100641d4:	4390      	bics	r0, r2
100641d6:	1840      	adds	r0, r0, r1
100641d8:	940c      	str	r4, [sp, #48]	@ 0x30
100641da:	6020      	str	r0, [r4, #0]
100641dc:	2d00      	cmp	r5, #0
100641de:	d025      	beq.n	1006422c <llc_conn_isr+0x34c>
100641e0:	a80e      	add	r0, sp, #56	@ 0x38
100641e2:	7f80      	ldrb	r0, [r0, #30]
100641e4:	2800      	cmp	r0, #0
100641e6:	d169      	bne.n	100642bc <llc_conn_isr+0x3dc>
100641e8:	a80e      	add	r0, sp, #56	@ 0x38
100641ea:	7ec0      	ldrb	r0, [r0, #27]
100641ec:	2800      	cmp	r0, #0
100641ee:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100641f0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100641f2:	d000      	beq.n	100641f6 <llc_conn_isr+0x316>
100641f4:	e0dc      	b.n	100643b0 <__arm_cp.0_5+0xdc>
100641f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100641f8:	2800      	cmp	r0, #0
100641fa:	d100      	bne.n	100641fe <llc_conn_isr+0x31e>
100641fc:	e0b6      	b.n	1006436c <__arm_cp.0_5+0x98>
100641fe:	4e34      	ldr	r6, [pc, #208]	@ (100642d0 <__arm_cp.0_3+0x4>)
10064200:	6830      	ldr	r0, [r6, #0]
10064202:	21d8      	movs	r1, #216	@ 0xd8
10064204:	5c41      	ldrb	r1, [r0, r1]
10064206:	2901      	cmp	r1, #1
10064208:	d14b      	bne.n	100642a2 <llc_conn_isr+0x3c2>
1006420a:	6805      	ldr	r5, [r0, #0]
1006420c:	f7e9 f9da 	bl	1004d5c4 <phy_upd_csr_ucfg>
10064210:	2801      	cmp	r0, #1
10064212:	d000      	beq.n	10064216 <llc_conn_isr+0x336>
10064214:	e094      	b.n	10064340 <__arm_cp.0_5+0x6c>
10064216:	7920      	ldrb	r0, [r4, #4]
10064218:	210e      	movs	r1, #14
1006421a:	4341      	muls	r1, r0
1006421c:	6830      	ldr	r0, [r6, #0]
1006421e:	229c      	movs	r2, #156	@ 0x9c
10064220:	5880      	ldr	r0, [r0, r2]
10064222:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10064224:	6940      	ldr	r0, [r0, #20]
10064226:	1840      	adds	r0, r0, r1
10064228:	79c0      	ldrb	r0, [r0, #7]
1006422a:	e08a      	b.n	10064342 <__arm_cp.0_5+0x6e>
1006422c:	461c      	mov	r4, r3
1006422e:	9202      	str	r2, [sp, #8]
10064230:	4638      	mov	r0, r7
10064232:	3014      	adds	r0, #20
10064234:	f7ee f895 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
10064238:	4605      	mov	r5, r0
1006423a:	9011      	str	r0, [sp, #68]	@ 0x44
1006423c:	7801      	ldrb	r1, [r0, #0]
1006423e:	2003      	movs	r0, #3
10064240:	4001      	ands	r1, r0
10064242:	ae0e      	add	r6, sp, #56	@ 0x38
10064244:	9103      	str	r1, [sp, #12]
10064246:	7571      	strb	r1, [r6, #21]
10064248:	7829      	ldrb	r1, [r5, #0]
1006424a:	0689      	lsls	r1, r1, #26
1006424c:	d400      	bmi.n	10064250 <llc_conn_isr+0x370>
1006424e:	2002      	movs	r0, #2
10064250:	5c28      	ldrb	r0, [r5, r0]
10064252:	75f0      	strb	r0, [r6, #23]
10064254:	f7f6 f9b6 	bl	1005a5c4 <ll_cpe_get_cpid_from_opcode>
10064258:	7530      	strb	r0, [r6, #20]
1006425a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
1006425c:	6679      	str	r1, [r7, #100]	@ 0x64
1006425e:	2301      	movs	r3, #1
10064260:	9906      	ldr	r1, [sp, #24]
10064262:	2900      	cmp	r1, #0
10064264:	d009      	beq.n	1006427a <llc_conn_isr+0x39a>
10064266:	990c      	ldr	r1, [sp, #48]	@ 0x30
10064268:	6809      	ldr	r1, [r1, #0]
1006426a:	4019      	ands	r1, r3
1006426c:	d005      	beq.n	1006427a <llc_conn_isr+0x39a>
1006426e:	2616      	movs	r6, #22
10064270:	f7ed f81e 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10064274:	a80e      	add	r0, sp, #56	@ 0x38
10064276:	7786      	strb	r6, [r0, #30]
10064278:	e020      	b.n	100642bc <llc_conn_isr+0x3dc>
1006427a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006427c:	6949      	ldr	r1, [r1, #20]
1006427e:	7849      	ldrb	r1, [r1, #1]
10064280:	07c9      	lsls	r1, r1, #31
10064282:	9a05      	ldr	r2, [sp, #20]
10064284:	d018      	beq.n	100642b8 <llc_conn_isr+0x3d8>
10064286:	2a00      	cmp	r2, #0
10064288:	d016      	beq.n	100642b8 <llc_conn_isr+0x3d8>
1006428a:	9903      	ldr	r1, [sp, #12]
1006428c:	2903      	cmp	r1, #3
1006428e:	d10e      	bne.n	100642ae <llc_conn_isr+0x3ce>
10064290:	263d      	movs	r6, #61	@ 0x3d
10064292:	2814      	cmp	r0, #20
10064294:	d8ec      	bhi.n	10064270 <llc_conn_isr+0x390>
10064296:	4619      	mov	r1, r3
10064298:	4081      	lsls	r1, r0
1006429a:	480e      	ldr	r0, [pc, #56]	@ (100642d4 <__arm_cp.0_5>)
1006429c:	4201      	tst	r1, r0
1006429e:	d10b      	bne.n	100642b8 <llc_conn_isr+0x3d8>
100642a0:	e7e6      	b.n	10064270 <llc_conn_isr+0x390>
100642a2:	f7ed f805 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
100642a6:	a80e      	add	r0, sp, #56	@ 0x38
100642a8:	2101      	movs	r1, #1
100642aa:	7601      	strb	r1, [r0, #24]
100642ac:	e05d      	b.n	1006436a <__arm_cp.0_5+0x96>
100642ae:	7868      	ldrb	r0, [r5, #1]
100642b0:	2800      	cmp	r0, #0
100642b2:	d001      	beq.n	100642b8 <llc_conn_isr+0x3d8>
100642b4:	263d      	movs	r6, #61	@ 0x3d
100642b6:	e7db      	b.n	10064270 <llc_conn_isr+0x390>
100642b8:	2c00      	cmp	r4, #0
100642ba:	d00d      	beq.n	100642d8 <__arm_cp.0_5+0x4>
100642bc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100642be:	7d60      	ldrb	r0, [r4, #21]
100642c0:	f7fa ffba 	bl	1005f238 <LL_sched_delete_taskslot>
100642c4:	a80e      	add	r0, sp, #56	@ 0x38
100642c6:	7f80      	ldrb	r0, [r0, #30]
100642c8:	7060      	strb	r0, [r4, #1]
100642ca:	e07c      	b.n	100643c6 <__arm_cp.0_5+0xf2>

100642cc <__arm_cp.0_3>:
100642cc:	20002464 	.word	0x20002464
100642d0:	20002468 	.word	0x20002468

100642d4 <__arm_cp.0_5>:
100642d4:	00100012 	.word	0x00100012
100642d8:	9301      	str	r3, [sp, #4]
100642da:	4638      	mov	r0, r7
100642dc:	4614      	mov	r4, r2
100642de:	f7ee f840 	bl	10052362 <BLEPLAT_CNTR_PacketGetDataPtr>
100642e2:	4606      	mov	r6, r0
100642e4:	a80e      	add	r0, sp, #56	@ 0x38
100642e6:	2100      	movs	r1, #0
100642e8:	7701      	strb	r1, [r0, #28]
100642ea:	7641      	strb	r1, [r0, #25]
100642ec:	9612      	str	r6, [sp, #72]	@ 0x48
100642ee:	9106      	str	r1, [sp, #24]
100642f0:	9110      	str	r1, [sp, #64]	@ 0x40
100642f2:	2c00      	cmp	r4, #0
100642f4:	980d      	ldr	r0, [sp, #52]	@ 0x34
100642f6:	d100      	bne.n	100642fa <__arm_cp.0_5+0x26>
100642f8:	e147      	b.n	1006458a <__arm_cp.0_5+0x2b6>
100642fa:	7800      	ldrb	r0, [r0, #0]
100642fc:	2802      	cmp	r0, #2
100642fe:	d113      	bne.n	10064328 <__arm_cp.0_5+0x54>
10064300:	7828      	ldrb	r0, [r5, #0]
10064302:	7831      	ldrb	r1, [r6, #0]
10064304:	4301      	orrs	r1, r0
10064306:	06c8      	lsls	r0, r1, #27
10064308:	d509      	bpl.n	1006431e <__arm_cp.0_5+0x4a>
1006430a:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
1006430c:	f7ec ff8f 	bl	1005122e <BLEPLAT_GetCurrentSysTime>
10064310:	6c79      	ldr	r1, [r7, #68]	@ 0x44
10064312:	1a08      	subs	r0, r1, r0
10064314:	1900      	adds	r0, r0, r4
10064316:	d402      	bmi.n	1006431e <__arm_cp.0_5+0x4a>
10064318:	6f79      	ldr	r1, [r7, #116]	@ 0x74
1006431a:	4288      	cmp	r0, r1
1006431c:	d204      	bcs.n	10064328 <__arm_cp.0_5+0x54>
1006431e:	f7ec ffc7 	bl	100512b0 <BLEPLAT_ClearRadioTimerValue>
10064322:	a80e      	add	r0, sp, #56	@ 0x38
10064324:	2101      	movs	r1, #1
10064326:	7601      	strb	r1, [r0, #24]
10064328:	786c      	ldrb	r4, [r5, #1]
1006432a:	2c00      	cmp	r4, #0
1006432c:	d100      	bne.n	10064330 <__arm_cp.0_5+0x5c>
1006432e:	e12c      	b.n	1006458a <__arm_cp.0_5+0x2b6>
10064330:	980c      	ldr	r0, [sp, #48]	@ 0x30
10064332:	6800      	ldr	r0, [r0, #0]
10064334:	2608      	movs	r6, #8
10064336:	4006      	ands	r6, r0
10064338:	d000      	beq.n	1006433c <__arm_cp.0_5+0x68>
1006433a:	e095      	b.n	10064468 <__arm_cp.0_5+0x194>
1006433c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1006433e:	e0aa      	b.n	10064496 <__arm_cp.0_5+0x1c2>
10064340:	2001      	movs	r0, #1
10064342:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
10064344:	f7ee fc8b 	bl	10052c5e <BLEPLAT_CNTR_DemodDelaySt>
10064348:	1a28      	subs	r0, r5, r0
1006434a:	6478      	str	r0, [r7, #68]	@ 0x44
1006434c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1006434e:	1b89      	subs	r1, r1, r6
10064350:	1808      	adds	r0, r1, r0
10064352:	9a07      	ldr	r2, [sp, #28]
10064354:	6851      	ldr	r1, [r2, #4]
10064356:	4281      	cmp	r1, r0
10064358:	d901      	bls.n	1006435e <__arm_cp.0_5+0x8a>
1006435a:	1a08      	subs	r0, r1, r0
1006435c:	6050      	str	r0, [r2, #4]
1006435e:	2000      	movs	r0, #0
10064360:	64b8      	str	r0, [r7, #72]	@ 0x48
10064362:	6378      	str	r0, [r7, #52]	@ 0x34
10064364:	4638      	mov	r0, r7
10064366:	f7f5 fe97 	bl	1005a098 <llc_conn_update_receive_window>
1006436a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1006436c:	a80e      	add	r0, sp, #56	@ 0x38
1006436e:	7e80      	ldrb	r0, [r0, #26]
10064370:	2801      	cmp	r0, #1
10064372:	d102      	bne.n	1006437a <__arm_cp.0_5+0xa6>
10064374:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10064376:	6678      	str	r0, [r7, #100]	@ 0x64
10064378:	e004      	b.n	10064384 <__arm_cp.0_5+0xb0>
1006437a:	2011      	movs	r0, #17
1006437c:	f7fc ff22 	bl	100611c4 <tsk_notify_idx>
10064380:	f7ec f8a3 	bl	100504ca <BLE_STACK_ProcessRequest>
10064384:	980a      	ldr	r0, [sp, #40]	@ 0x28
10064386:	68c0      	ldr	r0, [r0, #12]
10064388:	2800      	cmp	r0, #0
1006438a:	d002      	beq.n	10064392 <__arm_cp.0_5+0xbe>
1006438c:	8801      	ldrh	r1, [r0, #0]
1006438e:	1c49      	adds	r1, r1, #1
10064390:	8001      	strh	r1, [r0, #0]
10064392:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10064394:	6930      	ldr	r0, [r6, #16]
10064396:	2800      	cmp	r0, #0
10064398:	d007      	beq.n	100643aa <__arm_cp.0_5+0xd6>
1006439a:	7d60      	ldrb	r0, [r4, #21]
1006439c:	f7ee fa22 	bl	100527e4 <BLEPLAT_CNTR_SmGetRemapChan>
100643a0:	0040      	lsls	r0, r0, #1
100643a2:	6931      	ldr	r1, [r6, #16]
100643a4:	5a0a      	ldrh	r2, [r1, r0]
100643a6:	1c52      	adds	r2, r2, #1
100643a8:	520a      	strh	r2, [r1, r0]
100643aa:	7920      	ldrb	r0, [r4, #4]
100643ac:	f7f8 faf0 	bl	1005c990 <LLC_pcl_incr_rx_packets_ucfg_weak>
100643b0:	a80e      	add	r0, sp, #56	@ 0x38
100643b2:	7e00      	ldrb	r0, [r0, #24]
100643b4:	2801      	cmp	r0, #1
100643b6:	d108      	bne.n	100643ca <__arm_cp.0_5+0xf6>
100643b8:	6828      	ldr	r0, [r5, #0]
100643ba:	2110      	movs	r1, #16
100643bc:	4388      	bics	r0, r1
100643be:	6028      	str	r0, [r5, #0]
100643c0:	4638      	mov	r0, r7
100643c2:	f000 fa82 	bl	100648ca <llc_conn_close_event>
100643c6:	2601      	movs	r6, #1
100643c8:	e000      	b.n	100643cc <__arm_cp.0_5+0xf8>
100643ca:	2600      	movs	r6, #0
100643cc:	7d65      	ldrb	r5, [r4, #21]
100643ce:	4628      	mov	r0, r5
100643d0:	f7ee f9f7 	bl	100527c2 <BLEPLAT_CNTR_SmGetMode>
100643d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
100643d6:	6809      	ldr	r1, [r1, #0]
100643d8:	2800      	cmp	r0, #0
100643da:	d005      	beq.n	100643e8 <__arm_cp.0_5+0x114>
100643dc:	0748      	lsls	r0, r1, #29
100643de:	d405      	bmi.n	100643ec <__arm_cp.0_5+0x118>
100643e0:	4628      	mov	r0, r5
100643e2:	f7ee f93e 	bl	10052662 <BLEPLAT_CNTR_SmEncOff>
100643e6:	e004      	b.n	100643f2 <__arm_cp.0_5+0x11e>
100643e8:	0708      	lsls	r0, r1, #28
100643ea:	d5f9      	bpl.n	100643e0 <__arm_cp.0_5+0x10c>
100643ec:	4628      	mov	r0, r5
100643ee:	f7ee f94c 	bl	1005268a <BLEPLAT_CNTR_SmEncOn>
100643f2:	2e00      	cmp	r6, #0
100643f4:	d01d      	beq.n	10064432 <__arm_cp.0_5+0x15e>
100643f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100643f8:	69e5      	ldr	r5, [r4, #28]
100643fa:	2d00      	cmp	r5, #0
100643fc:	d015      	beq.n	1006442a <__arm_cp.0_5+0x156>
100643fe:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10064400:	7d70      	ldrb	r0, [r6, #21]
10064402:	f7ee f9b9 	bl	10052778 <BLEPLAT_CNTR_SmGetEncKeyPtr>
10064406:	4602      	mov	r2, r0
10064408:	4629      	mov	r1, r5
1006440a:	3110      	adds	r1, #16
1006440c:	2301      	movs	r3, #1
1006440e:	4628      	mov	r0, r5
10064410:	f7fd f9ee 	bl	100617f0 <BLEPLAT_aes128_encrypt>
10064414:	7d70      	ldrb	r0, [r6, #21]
10064416:	f7ee f99b 	bl	10052750 <BLEPLAT_CNTR_SmGetEncIvPtr>
1006441a:	4601      	mov	r1, r0
1006441c:	3520      	adds	r5, #32
1006441e:	2208      	movs	r2, #8
10064420:	4628      	mov	r0, r5
10064422:	f7fd f857 	bl	100614d4 <char_copy>
10064426:	2000      	movs	r0, #0
10064428:	61e0      	str	r0, [r4, #28]
1006442a:	9808      	ldr	r0, [sp, #32]
1006442c:	f7fa fd14 	bl	1005ee58 <LL_sched_engine>
10064430:	e001      	b.n	10064436 <__arm_cp.0_5+0x162>
10064432:	f7ed fea8 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
10064436:	9809      	ldr	r0, [sp, #36]	@ 0x24
10064438:	2800      	cmp	r0, #0
1006443a:	d10c      	bne.n	10064456 <__arm_cp.0_5+0x182>
1006443c:	f7ec feef 	bl	1005121e <BLEPLAT_CalculateRSSI>
10064440:	287f      	cmp	r0, #127	@ 0x7f
10064442:	d005      	beq.n	10064450 <__arm_cp.0_5+0x17c>
10064444:	4605      	mov	r5, r0
10064446:	f7fa fc05 	bl	1005ec54 <get_rf_rx_path_compensation_db>
1006444a:	1828      	adds	r0, r5, r0
1006444c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1006444e:	7008      	strb	r0, [r1, #0]
10064450:	4638      	mov	r0, r7
10064452:	f7f8 fa9e 	bl	1005c992 <LLC_pcl_update_avg_rssi_ucfg_weak>
10064456:	2401      	movs	r4, #1
10064458:	4620      	mov	r0, r4
1006445a:	f7fc fedb 	bl	10061214 <tsk_signal_resource_idx>
1006445e:	f7ec f834 	bl	100504ca <BLE_STACK_ProcessRequest>
10064462:	4620      	mov	r0, r4
10064464:	b019      	add	sp, #100	@ 0x64
10064466:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064468:	f7f3 fdb2 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
1006446c:	2801      	cmp	r0, #1
1006446e:	d001      	beq.n	10064474 <__arm_cp.0_5+0x1a0>
10064470:	201c      	movs	r0, #28
10064472:	e000      	b.n	10064476 <__arm_cp.0_5+0x1a2>
10064474:	20fc      	movs	r0, #252	@ 0xfc
10064476:	4220      	tst	r0, r4
10064478:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1006447a:	d00c      	beq.n	10064496 <__arm_cp.0_5+0x1c2>
1006447c:	7868      	ldrb	r0, [r5, #1]
1006447e:	1f00      	subs	r0, r0, #4
10064480:	7068      	strb	r0, [r5, #1]
10064482:	2002      	movs	r0, #2
10064484:	71a0      	strb	r0, [r4, #6]
10064486:	2012      	movs	r0, #18
10064488:	f7fc fe9c 	bl	100611c4 <tsk_notify_idx>
1006448c:	f7ec f81d 	bl	100504ca <BLE_STACK_ProcessRequest>
10064490:	a80e      	add	r0, sp, #56	@ 0x38
10064492:	7d40      	ldrb	r0, [r0, #21]
10064494:	9003      	str	r0, [sp, #12]
10064496:	9803      	ldr	r0, [sp, #12]
10064498:	2803      	cmp	r0, #3
1006449a:	d110      	bne.n	100644be <__arm_cp.0_5+0x1ea>
1006449c:	a80e      	add	r0, sp, #56	@ 0x38
1006449e:	7dc5      	ldrb	r5, [r0, #23]
100644a0:	2d02      	cmp	r5, #2
100644a2:	d117      	bne.n	100644d4 <__arm_cp.0_5+0x200>
100644a4:	9811      	ldr	r0, [sp, #68]	@ 0x44
100644a6:	7840      	ldrb	r0, [r0, #1]
100644a8:	2802      	cmp	r0, #2
100644aa:	d113      	bne.n	100644d4 <__arm_cp.0_5+0x200>
100644ac:	a80e      	add	r0, sp, #56	@ 0x38
100644ae:	2101      	movs	r1, #1
100644b0:	7701      	strb	r1, [r0, #28]
100644b2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100644b4:	6828      	ldr	r0, [r5, #0]
100644b6:	2102      	movs	r1, #2
100644b8:	4301      	orrs	r1, r0
100644ba:	6029      	str	r1, [r5, #0]
100644bc:	e042      	b.n	10064544 <__arm_cp.0_5+0x270>
100644be:	980d      	ldr	r0, [sp, #52]	@ 0x34
100644c0:	7800      	ldrb	r0, [r0, #0]
100644c2:	2803      	cmp	r0, #3
100644c4:	d117      	bne.n	100644f6 <__arm_cp.0_5+0x222>
100644c6:	7a20      	ldrb	r0, [r4, #8]
100644c8:	2800      	cmp	r0, #0
100644ca:	d014      	beq.n	100644f6 <__arm_cp.0_5+0x222>
100644cc:	2002      	movs	r0, #2
100644ce:	9910      	ldr	r1, [sp, #64]	@ 0x40
100644d0:	4301      	orrs	r1, r0
100644d2:	e04a      	b.n	1006456a <__arm_cp.0_5+0x296>
100644d4:	4638      	mov	r0, r7
100644d6:	f7f4 fd02 	bl	10058ede <llc_conn_get_rx_ctrl_pdu_full>
100644da:	2800      	cmp	r0, #0
100644dc:	d021      	beq.n	10064522 <__arm_cp.0_5+0x24e>
100644de:	980d      	ldr	r0, [sp, #52]	@ 0x34
100644e0:	7d40      	ldrb	r0, [r0, #21]
100644e2:	f7ee fbad 	bl	10052c40 <BLEPLAT_CNTR_SmToggleNesn>
100644e6:	2e00      	cmp	r6, #0
100644e8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100644ea:	d02b      	beq.n	10064544 <__arm_cp.0_5+0x270>
100644ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
100644ee:	7d40      	ldrb	r0, [r0, #21]
100644f0:	f000 fa61 	bl	100649b6 <llc_conn_decrement_enc_count_rx>
100644f4:	e026      	b.n	10064544 <__arm_cp.0_5+0x270>
100644f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
100644f8:	7846      	ldrb	r6, [r0, #1]
100644fa:	f7f3 fd69 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
100644fe:	2801      	cmp	r0, #1
10064500:	d001      	beq.n	10064506 <__arm_cp.0_5+0x232>
10064502:	251f      	movs	r5, #31
10064504:	e001      	b.n	1006450a <__arm_cp.0_5+0x236>
10064506:	9806      	ldr	r0, [sp, #24]
10064508:	43c5      	mvns	r5, r0
1006450a:	4035      	ands	r5, r6
1006450c:	0628      	lsls	r0, r5, #24
1006450e:	d01e      	beq.n	1006454e <__arm_cp.0_5+0x27a>
10064510:	9806      	ldr	r0, [sp, #24]
10064512:	67b8      	str	r0, [r7, #120]	@ 0x78
10064514:	f7ef f86c 	bl	100535f0 <isr_Acl_Data_Indication_Queue_Full>
10064518:	2800      	cmp	r0, #0
1006451a:	d01b      	beq.n	10064554 <__arm_cp.0_5+0x280>
1006451c:	2002      	movs	r0, #2
1006451e:	9010      	str	r0, [sp, #64]	@ 0x40
10064520:	e026      	b.n	10064570 <__arm_cp.0_5+0x29c>
10064522:	980d      	ldr	r0, [sp, #52]	@ 0x34
10064524:	7800      	ldrb	r0, [r0, #0]
10064526:	2803      	cmp	r0, #3
10064528:	d108      	bne.n	1006453c <__arm_cp.0_5+0x268>
1006452a:	2d27      	cmp	r5, #39	@ 0x27
1006452c:	d106      	bne.n	1006453c <__arm_cp.0_5+0x268>
1006452e:	9811      	ldr	r0, [sp, #68]	@ 0x44
10064530:	7840      	ldrb	r0, [r0, #1]
10064532:	280b      	cmp	r0, #11
10064534:	d102      	bne.n	1006453c <__arm_cp.0_5+0x268>
10064536:	a80e      	add	r0, sp, #56	@ 0x38
10064538:	2101      	movs	r1, #1
1006453a:	7741      	strb	r1, [r0, #29]
1006453c:	a80e      	add	r0, sp, #56	@ 0x38
1006453e:	2101      	movs	r1, #1
10064540:	7641      	strb	r1, [r0, #25]
10064542:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10064544:	6828      	ldr	r0, [r5, #0]
10064546:	2180      	movs	r1, #128	@ 0x80
10064548:	4301      	orrs	r1, r0
1006454a:	6029      	str	r1, [r5, #0]
1006454c:	e014      	b.n	10064578 <__arm_cp.0_5+0x2a4>
1006454e:	9806      	ldr	r0, [sp, #24]
10064550:	9010      	str	r0, [sp, #64]	@ 0x40
10064552:	e011      	b.n	10064578 <__arm_cp.0_5+0x2a4>
10064554:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
10064556:	b2ea      	uxtb	r2, r5
10064558:	9801      	ldr	r0, [sp, #4]
1006455a:	f7ef f913 	bl	10053784 <ACL_pkt_get>
1006455e:	67b8      	str	r0, [r7, #120]	@ 0x78
10064560:	2800      	cmp	r0, #0
10064562:	d001      	beq.n	10064568 <__arm_cp.0_5+0x294>
10064564:	9901      	ldr	r1, [sp, #4]
10064566:	e000      	b.n	1006456a <__arm_cp.0_5+0x296>
10064568:	2102      	movs	r1, #2
1006456a:	9110      	str	r1, [sp, #64]	@ 0x40
1006456c:	0788      	lsls	r0, r1, #30
1006456e:	d503      	bpl.n	10064578 <__arm_cp.0_5+0x2a4>
10064570:	980d      	ldr	r0, [sp, #52]	@ 0x34
10064572:	7d40      	ldrb	r0, [r0, #21]
10064574:	f7ee fb64 	bl	10052c40 <BLEPLAT_CNTR_SmToggleNesn>
10064578:	9811      	ldr	r0, [sp, #68]	@ 0x44
1006457a:	7800      	ldrb	r0, [r0, #0]
1006457c:	8aa1      	ldrh	r1, [r4, #20]
1006457e:	82e1      	strh	r1, [r4, #22]
10064580:	2120      	movs	r1, #32
10064582:	4001      	ands	r1, r0
10064584:	a80e      	add	r0, sp, #56	@ 0x38
10064586:	7581      	strb	r1, [r0, #22]
10064588:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1006458a:	2101      	movs	r1, #1
1006458c:	4638      	mov	r0, r7
1006458e:	9105      	str	r1, [sp, #20]
10064590:	f7f4 fc8a 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
10064594:	4605      	mov	r5, r0
10064596:	463b      	mov	r3, r7
10064598:	3328      	adds	r3, #40	@ 0x28
1006459a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006459c:	6801      	ldr	r1, [r0, #0]
1006459e:	2900      	cmp	r1, #0
100645a0:	d011      	beq.n	100645c6 <__arm_cp.0_5+0x2f2>
100645a2:	7a08      	ldrb	r0, [r1, #8]
100645a4:	0700      	lsls	r0, r0, #28
100645a6:	d50e      	bpl.n	100645c6 <__arm_cp.0_5+0x2f2>
100645a8:	69c8      	ldr	r0, [r1, #28]
100645aa:	2800      	cmp	r0, #0
100645ac:	d00b      	beq.n	100645c6 <__arm_cp.0_5+0x2f2>
100645ae:	42ae      	cmp	r6, r5
100645b0:	d009      	beq.n	100645c6 <__arm_cp.0_5+0x2f2>
100645b2:	429e      	cmp	r6, r3
100645b4:	d007      	beq.n	100645c6 <__arm_cp.0_5+0x2f2>
100645b6:	460c      	mov	r4, r1
100645b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
100645ba:	6808      	ldr	r0, [r1, #0]
100645bc:	9a02      	ldr	r2, [sp, #8]
100645be:	4390      	bics	r0, r2
100645c0:	6008      	str	r0, [r1, #0]
100645c2:	4621      	mov	r1, r4
100645c4:	e003      	b.n	100645ce <__arm_cp.0_5+0x2fa>
100645c6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100645c8:	2800      	cmp	r0, #0
100645ca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100645cc:	d017      	beq.n	100645fe <__arm_cp.0_5+0x32a>
100645ce:	42ae      	cmp	r6, r5
100645d0:	9303      	str	r3, [sp, #12]
100645d2:	d018      	beq.n	10064606 <__arm_cp.0_5+0x332>
100645d4:	429e      	cmp	r6, r3
100645d6:	d025      	beq.n	10064624 <__arm_cp.0_5+0x350>
100645d8:	6948      	ldr	r0, [r1, #20]
100645da:	6188      	str	r0, [r1, #24]
100645dc:	460e      	mov	r6, r1
100645de:	7b09      	ldrb	r1, [r1, #12]
100645e0:	9d06      	ldr	r5, [sp, #24]
100645e2:	7335      	strb	r5, [r6, #12]
100645e4:	8a32      	ldrh	r2, [r6, #16]
100645e6:	1851      	adds	r1, r2, r1
100645e8:	8231      	strh	r1, [r6, #16]
100645ea:	b28a      	uxth	r2, r1
100645ec:	8873      	ldrh	r3, [r6, #2]
100645ee:	429a      	cmp	r2, r3
100645f0:	d21a      	bcs.n	10064628 <__arm_cp.0_5+0x354>
100645f2:	89f2      	ldrh	r2, [r6, #14]
100645f4:	1851      	adds	r1, r2, r1
100645f6:	06c9      	lsls	r1, r1, #27
100645f8:	d019      	beq.n	1006462e <__arm_cp.0_5+0x35a>
100645fa:	4634      	mov	r4, r6
100645fc:	e01a      	b.n	10064634 <__arm_cp.0_5+0x360>
100645fe:	f7ed fdc2 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
10064602:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10064604:	e0e3      	b.n	100647ce <__arm_cp.0_5+0x4fa>
10064606:	460c      	mov	r4, r1
10064608:	2103      	movs	r1, #3
1006460a:	4638      	mov	r0, r7
1006460c:	f7f4 ff14 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
10064610:	4638      	mov	r0, r7
10064612:	f7ed fe80 	bl	10052316 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
10064616:	78a8      	ldrb	r0, [r5, #2]
10064618:	2827      	cmp	r0, #39	@ 0x27
1006461a:	d10e      	bne.n	1006463a <__arm_cp.0_5+0x366>
1006461c:	a80e      	add	r0, sp, #56	@ 0x38
1006461e:	2101      	movs	r1, #1
10064620:	7741      	strb	r1, [r0, #29]
10064622:	e00a      	b.n	1006463a <__arm_cp.0_5+0x366>
10064624:	460c      	mov	r4, r1
10064626:	e008      	b.n	1006463a <__arm_cp.0_5+0x366>
10064628:	69f4      	ldr	r4, [r6, #28]
1006462a:	2504      	movs	r5, #4
1006462c:	e002      	b.n	10064634 <__arm_cp.0_5+0x360>
1006462e:	6800      	ldr	r0, [r0, #0]
10064630:	4634      	mov	r4, r6
10064632:	61b0      	str	r0, [r6, #24]
10064634:	9810      	ldr	r0, [sp, #64]	@ 0x40
10064636:	4328      	orrs	r0, r5
10064638:	9010      	str	r0, [sp, #64]	@ 0x40
1006463a:	4638      	mov	r0, r7
1006463c:	f7f4 fc5b 	bl	10058ef6 <llc_conn_get_tx_acl_blocked>
10064640:	4605      	mov	r5, r0
10064642:	4638      	mov	r0, r7
10064644:	f7f4 fc5d 	bl	10058f02 <llc_conn_get_tx_ctrl_pdu_state>
10064648:	a90e      	add	r1, sp, #56	@ 0x38
1006464a:	7f0e      	ldrb	r6, [r1, #28]
1006464c:	2e00      	cmp	r6, #0
1006464e:	d124      	bne.n	1006469a <__arm_cp.0_5+0x3c6>
10064650:	2801      	cmp	r0, #1
10064652:	d122      	bne.n	1006469a <__arm_cp.0_5+0x3c6>
10064654:	2101      	movs	r1, #1
10064656:	4638      	mov	r0, r7
10064658:	9106      	str	r1, [sp, #24]
1006465a:	f7f4 fc25 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
1006465e:	4606      	mov	r6, r0
10064660:	4638      	mov	r0, r7
10064662:	4631      	mov	r1, r6
10064664:	f7ed febf 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
10064668:	4632      	mov	r2, r6
1006466a:	7830      	ldrb	r0, [r6, #0]
1006466c:	0680      	lsls	r0, r0, #26
1006466e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10064670:	d421      	bmi.n	100646b6 <__arm_cp.0_5+0x3e2>
10064672:	7890      	ldrb	r0, [r2, #2]
10064674:	2827      	cmp	r0, #39	@ 0x27
10064676:	d04c      	beq.n	10064712 <__arm_cp.0_5+0x43e>
10064678:	4615      	mov	r5, r2
1006467a:	2802      	cmp	r0, #2
1006467c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006467e:	d152      	bne.n	10064726 <__arm_cp.0_5+0x452>
10064680:	990c      	ldr	r1, [sp, #48]	@ 0x30
10064682:	6808      	ldr	r0, [r1, #0]
10064684:	9a06      	ldr	r2, [sp, #24]
10064686:	4310      	orrs	r0, r2
10064688:	6008      	str	r0, [r1, #0]
1006468a:	7d60      	ldrb	r0, [r4, #21]
1006468c:	211f      	movs	r1, #31
1006468e:	460a      	mov	r2, r1
10064690:	f7fa fda8 	bl	1005f1e4 <LL_sched_set_priority>
10064694:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10064696:	6738      	str	r0, [r7, #112]	@ 0x70
10064698:	e045      	b.n	10064726 <__arm_cp.0_5+0x452>
1006469a:	f7ee ffb7 	bl	1005360c <isr_Acl_Data_TX_Cmpl_Queue_Full>
1006469e:	2800      	cmp	r0, #0
100646a0:	d018      	beq.n	100646d4 <__arm_cp.0_5+0x400>
100646a2:	f7ed fd70 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
100646a6:	980e      	ldr	r0, [sp, #56]	@ 0x38
100646a8:	2800      	cmp	r0, #0
100646aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100646ac:	d009      	beq.n	100646c2 <__arm_cp.0_5+0x3ee>
100646ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100646b0:	9903      	ldr	r1, [sp, #12]
100646b2:	9805      	ldr	r0, [sp, #20]
100646b4:	e008      	b.n	100646c8 <__arm_cp.0_5+0x3f4>
100646b6:	4615      	mov	r5, r2
100646b8:	4638      	mov	r0, r7
100646ba:	f7ed fe87 	bl	100523cc <BLEPLAT_CNTR_PacketSetCteSamplingEn>
100646be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100646c0:	e031      	b.n	10064726 <__arm_cp.0_5+0x452>
100646c2:	2011      	movs	r0, #17
100646c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100646c6:	9903      	ldr	r1, [sp, #12]
100646c8:	8538      	strh	r0, [r7, #40]	@ 0x28
100646ca:	4638      	mov	r0, r7
100646cc:	460d      	mov	r5, r1
100646ce:	f7ed fe8a 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
100646d2:	e071      	b.n	100647b8 <__arm_cp.0_5+0x4e4>
100646d4:	2c00      	cmp	r4, #0
100646d6:	d0e4      	beq.n	100646a2 <__arm_cp.0_5+0x3ce>
100646d8:	2d01      	cmp	r5, #1
100646da:	d0e2      	beq.n	100646a2 <__arm_cp.0_5+0x3ce>
100646dc:	2e01      	cmp	r6, #1
100646de:	d0e0      	beq.n	100646a2 <__arm_cp.0_5+0x3ce>
100646e0:	f7ed fd51 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
100646e4:	4877      	ldr	r0, [pc, #476]	@ (100648c4 <__arm_cp.0_2>)
100646e6:	6800      	ldr	r0, [r0, #0]
100646e8:	218c      	movs	r1, #140	@ 0x8c
100646ea:	5840      	ldr	r0, [r0, r1]
100646ec:	8a21      	ldrh	r1, [r4, #16]
100646ee:	89e2      	ldrh	r2, [r4, #14]
100646f0:	1851      	adds	r1, r2, r1
100646f2:	221f      	movs	r2, #31
100646f4:	400a      	ands	r2, r1
100646f6:	1810      	adds	r0, r2, r0
100646f8:	1c81      	adds	r1, r0, #2
100646fa:	4638      	mov	r0, r7
100646fc:	460d      	mov	r5, r1
100646fe:	f7ed fe72 	bl	100523e6 <BLEPLAT_CNTR_PacketSetDataPtr>
10064702:	4638      	mov	r0, r7
10064704:	4621      	mov	r1, r4
10064706:	f7f4 fb23 	bl	10058d50 <llc_conn_copy_tx_data_packet>
1006470a:	67fc      	str	r4, [r7, #124]	@ 0x7c
1006470c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1006470e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10064710:	e052      	b.n	100647b8 <__arm_cp.0_5+0x4e4>
10064712:	990d      	ldr	r1, [sp, #52]	@ 0x34
10064714:	7d88      	ldrb	r0, [r1, #22]
10064716:	7150      	strb	r0, [r2, #5]
10064718:	7dc8      	ldrb	r0, [r1, #23]
1006471a:	4615      	mov	r5, r2
1006471c:	7190      	strb	r0, [r2, #6]
1006471e:	2000      	movs	r0, #0
10064720:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10064722:	8290      	strh	r0, [r2, #20]
10064724:	460c      	mov	r4, r1
10064726:	6970      	ldr	r0, [r6, #20]
10064728:	6800      	ldr	r0, [r0, #0]
1006472a:	0701      	lsls	r1, r0, #28
1006472c:	d415      	bmi.n	1006475a <__arm_cp.0_5+0x486>
1006472e:	0680      	lsls	r0, r0, #26
10064730:	d510      	bpl.n	10064754 <__arm_cp.0_5+0x480>
10064732:	7d60      	ldrb	r0, [r4, #21]
10064734:	f7ed ff95 	bl	10052662 <BLEPLAT_CNTR_SmEncOff>
10064738:	6970      	ldr	r0, [r6, #20]
1006473a:	6801      	ldr	r1, [r0, #0]
1006473c:	2220      	movs	r2, #32
1006473e:	4391      	bics	r1, r2
10064740:	6001      	str	r1, [r0, #0]
10064742:	68b0      	ldr	r0, [r6, #8]
10064744:	2104      	movs	r1, #4
10064746:	4388      	bics	r0, r1
10064748:	60b0      	str	r0, [r6, #8]
1006474a:	2012      	movs	r0, #18
1006474c:	f7fc fd3a 	bl	100611c4 <tsk_notify_idx>
10064750:	f7eb febb 	bl	100504ca <BLE_STACK_ProcessRequest>
10064754:	f7ed fd17 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
10064758:	e01f      	b.n	1006479a <__arm_cp.0_5+0x4c6>
1006475a:	2000      	movs	r0, #0
1006475c:	9017      	str	r0, [sp, #92]	@ 0x5c
1006475e:	9016      	str	r0, [sp, #88]	@ 0x58
10064760:	7d60      	ldrb	r0, [r4, #21]
10064762:	f7ed ff92 	bl	1005268a <BLEPLAT_CNTR_SmEncOn>
10064766:	7d60      	ldrb	r0, [r4, #21]
10064768:	a916      	add	r1, sp, #88	@ 0x58
1006476a:	f7ee f9d3 	bl	10052b14 <BLEPLAT_CNTR_SmSetTxCount>
1006476e:	7820      	ldrb	r0, [r4, #0]
10064770:	2802      	cmp	r0, #2
10064772:	d102      	bne.n	1006477a <__arm_cp.0_5+0x4a6>
10064774:	7d60      	ldrb	r0, [r4, #21]
10064776:	f7ee f9e9 	bl	10052b4c <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
1006477a:	f7ed fd04 	bl	10052186 <BLEPLAT_CNTR_GlobEnableBlue>
1006477e:	6970      	ldr	r0, [r6, #20]
10064780:	6801      	ldr	r1, [r0, #0]
10064782:	2208      	movs	r2, #8
10064784:	4391      	bics	r1, r2
10064786:	6001      	str	r1, [r0, #0]
10064788:	68b0      	ldr	r0, [r6, #8]
1006478a:	2104      	movs	r1, #4
1006478c:	4301      	orrs	r1, r0
1006478e:	60b1      	str	r1, [r6, #8]
10064790:	2012      	movs	r0, #18
10064792:	f7fc fd17 	bl	100611c4 <tsk_notify_idx>
10064796:	f7eb fe98 	bl	100504ca <BLE_STACK_ProcessRequest>
1006479a:	2102      	movs	r1, #2
1006479c:	4638      	mov	r0, r7
1006479e:	f7f4 fe4b 	bl	10059438 <llc_conn_set_tx_ctrl_pdu_state>
100647a2:	6970      	ldr	r0, [r6, #20]
100647a4:	6801      	ldr	r1, [r0, #0]
100647a6:	074a      	lsls	r2, r1, #29
100647a8:	d506      	bpl.n	100647b8 <__arm_cp.0_5+0x4e4>
100647aa:	2204      	movs	r2, #4
100647ac:	4391      	bics	r1, r2
100647ae:	6001      	str	r1, [r0, #0]
100647b0:	8b70      	ldrh	r0, [r6, #26]
100647b2:	9906      	ldr	r1, [sp, #24]
100647b4:	4308      	orrs	r0, r1
100647b6:	8370      	strh	r0, [r6, #26]
100647b8:	2101      	movs	r1, #1
100647ba:	4638      	mov	r0, r7
100647bc:	f7f4 fb7a 	bl	10058eb4 <llc_conn_get_enc_on>
100647c0:	2801      	cmp	r0, #1
100647c2:	d104      	bne.n	100647ce <__arm_cp.0_5+0x4fa>
100647c4:	7868      	ldrb	r0, [r5, #1]
100647c6:	2800      	cmp	r0, #0
100647c8:	d001      	beq.n	100647ce <__arm_cp.0_5+0x4fa>
100647ca:	1d00      	adds	r0, r0, #4
100647cc:	7068      	strb	r0, [r5, #1]
100647ce:	9810      	ldr	r0, [sp, #64]	@ 0x40
100647d0:	0781      	lsls	r1, r0, #30
100647d2:	d507      	bpl.n	100647e4 <__arm_cp.0_5+0x510>
100647d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
100647d6:	7809      	ldrb	r1, [r1, #0]
100647d8:	0709      	lsls	r1, r1, #28
100647da:	d503      	bpl.n	100647e4 <__arm_cp.0_5+0x510>
100647dc:	7d60      	ldrb	r0, [r4, #21]
100647de:	f000 f8ea 	bl	100649b6 <llc_conn_decrement_enc_count_rx>
100647e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
100647e4:	0741      	lsls	r1, r0, #29
100647e6:	d505      	bpl.n	100647f4 <__arm_cp.0_5+0x520>
100647e8:	4630      	mov	r0, r6
100647ea:	f7fc ff07 	bl	100615fc <ACL_list_remove_head>
100647ee:	f7ee ff37 	bl	10053660 <Acl_Tx_Cmpl_Pkt_Handler>
100647f2:	9810      	ldr	r0, [sp, #64]	@ 0x40
100647f4:	07c0      	lsls	r0, r0, #31
100647f6:	d01e      	beq.n	10064836 <__arm_cp.0_5+0x562>
100647f8:	9811      	ldr	r0, [sp, #68]	@ 0x44
100647fa:	7844      	ldrb	r4, [r0, #1]
100647fc:	2600      	movs	r6, #0
100647fe:	f7f3 fbe7 	bl	10057fd0 <data_length_extension_csr_ucfg_weak>
10064802:	2801      	cmp	r0, #1
10064804:	d001      	beq.n	1006480a <__arm_cp.0_5+0x536>
10064806:	251f      	movs	r5, #31
10064808:	e000      	b.n	1006480c <__arm_cp.0_5+0x538>
1006480a:	43f5      	mvns	r5, r6
1006480c:	4025      	ands	r5, r4
1006480e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10064810:	6840      	ldr	r0, [r0, #4]
10064812:	9911      	ldr	r1, [sp, #68]	@ 0x44
10064814:	1c89      	adds	r1, r1, #2
10064816:	462a      	mov	r2, r5
10064818:	f7fb f87a 	bl	1005f910 <Mem_Buff_block_write>
1006481c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
1006481e:	61c6      	str	r6, [r0, #28]
10064820:	8045      	strh	r5, [r0, #2]
10064822:	9911      	ldr	r1, [sp, #68]	@ 0x44
10064824:	7809      	ldrb	r1, [r1, #0]
10064826:	2203      	movs	r2, #3
10064828:	400a      	ands	r2, r1
1006482a:	7a01      	ldrb	r1, [r0, #8]
1006482c:	4311      	orrs	r1, r2
1006482e:	7201      	strb	r1, [r0, #8]
10064830:	f7ee fefa 	bl	10053628 <Acl_Rcv_Pkt_Handler>
10064834:	67be      	str	r6, [r7, #120]	@ 0x78
10064836:	a80e      	add	r0, sp, #56	@ 0x38
10064838:	7e40      	ldrb	r0, [r0, #25]
1006483a:	2801      	cmp	r0, #1
1006483c:	d131      	bne.n	100648a2 <__arm_cp.0_5+0x5ce>
1006483e:	2100      	movs	r1, #0
10064840:	4638      	mov	r0, r7
10064842:	f7f4 fb31 	bl	10058ea8 <llc_conn_get_ctrl_pdu_data_p>
10064846:	4605      	mov	r5, r0
10064848:	9811      	ldr	r0, [sp, #68]	@ 0x44
1006484a:	7801      	ldrb	r1, [r0, #0]
1006484c:	7840      	ldrb	r0, [r0, #1]
1006484e:	0200      	lsls	r0, r0, #8
10064850:	1840      	adds	r0, r0, r1
10064852:	8028      	strh	r0, [r5, #0]
10064854:	f7f5 fe0a 	bl	1005a46c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10064858:	4606      	mov	r6, r0
1006485a:	f7f5 fdfd 	bl	1005a458 <cis_csr_ucfg_weak>
1006485e:	4330      	orrs	r0, r6
10064860:	b2c0      	uxtb	r0, r0
10064862:	f7fa fa13 	bl	1005ec8c <LL_get_control_pdu_size>
10064866:	a90e      	add	r1, sp, #56	@ 0x38
10064868:	7d89      	ldrb	r1, [r1, #22]
1006486a:	2920      	cmp	r1, #32
1006486c:	d001      	beq.n	10064872 <__arm_cp.0_5+0x59e>
1006486e:	2102      	movs	r1, #2
10064870:	e000      	b.n	10064874 <__arm_cp.0_5+0x5a0>
10064872:	2103      	movs	r1, #3
10064874:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10064876:	1851      	adds	r1, r2, r1
10064878:	1f00      	subs	r0, r0, #4
1006487a:	b2c3      	uxtb	r3, r0
1006487c:	7852      	ldrb	r2, [r2, #1]
1006487e:	429a      	cmp	r2, r3
10064880:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10064882:	d300      	bcc.n	10064886 <__arm_cp.0_5+0x5b2>
10064884:	4602      	mov	r2, r0
10064886:	b2d2      	uxtb	r2, r2
10064888:	1ca8      	adds	r0, r5, #2
1006488a:	f7ec fc05 	bl	10051098 <BLEPLAT_MemCpy>
1006488e:	6920      	ldr	r0, [r4, #16]
10064890:	6801      	ldr	r1, [r0, #0]
10064892:	2201      	movs	r2, #1
10064894:	430a      	orrs	r2, r1
10064896:	6002      	str	r2, [r0, #0]
10064898:	2015      	movs	r0, #21
1006489a:	f7fc fc93 	bl	100611c4 <tsk_notify_idx>
1006489e:	f7eb fe14 	bl	100504ca <BLE_STACK_ProcessRequest>
100648a2:	ad0e      	add	r5, sp, #56	@ 0x38
100648a4:	4638      	mov	r0, r7
100648a6:	4629      	mov	r1, r5
100648a8:	f000 f80e 	bl	100648c8 <llc_conn_check_subrate_and_set_params_ucfg_weak>
100648ac:	7da8      	ldrb	r0, [r5, #22]
100648ae:	2820      	cmp	r0, #32
100648b0:	d000      	beq.n	100648b4 <__arm_cp.0_5+0x5e0>
100648b2:	e495      	b.n	100641e0 <llc_conn_isr+0x300>
100648b4:	9811      	ldr	r0, [sp, #68]	@ 0x44
100648b6:	7880      	ldrb	r0, [r0, #2]
100648b8:	0981      	lsrs	r1, r0, #6
100648ba:	4638      	mov	r0, r7
100648bc:	f7f7 f953 	bl	1005bb66 <llc_cte_process_rx_cte_ucfg_weak>
100648c0:	e48e      	b.n	100641e0 <llc_conn_isr+0x300>
100648c2:	46c0      	nop			@ (mov r8, r8)

100648c4 <__arm_cp.0_2>:
100648c4:	20002468 	.word	0x20002468

100648c8 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
100648c8:	4770      	bx	lr

100648ca <llc_conn_close_event>:
100648ca:	b5f0      	push	{r4, r5, r6, r7, lr}
100648cc:	b085      	sub	sp, #20
100648ce:	4605      	mov	r5, r0
100648d0:	2045      	movs	r0, #69	@ 0x45
100648d2:	0080      	lsls	r0, r0, #2
100648d4:	9003      	str	r0, [sp, #12]
100648d6:	5828      	ldr	r0, [r5, r0]
100648d8:	462e      	mov	r6, r5
100648da:	3642      	adds	r6, #66	@ 0x42
100648dc:	2800      	cmp	r0, #0
100648de:	d002      	beq.n	100648e6 <llc_conn_close_event+0x1c>
100648e0:	8881      	ldrh	r1, [r0, #4]
100648e2:	1c49      	adds	r1, r1, #1
100648e4:	8081      	strh	r1, [r0, #4]
100648e6:	462c      	mov	r4, r5
100648e8:	3480      	adds	r4, #128	@ 0x80
100648ea:	4628      	mov	r0, r5
100648ec:	f7f5 fe51 	bl	1005a592 <llc_subrate_update_cont_counter_ucfg_weak>
100648f0:	6c68      	ldr	r0, [r5, #68]	@ 0x44
100648f2:	9002      	str	r0, [sp, #8]
100648f4:	8837      	ldrh	r7, [r6, #0]
100648f6:	4628      	mov	r0, r5
100648f8:	f7f4 fa70 	bl	10058ddc <llc_conn_enhanced_get_latency>
100648fc:	4602      	mov	r2, r0
100648fe:	4628      	mov	r0, r5
10064900:	4639      	mov	r1, r7
10064902:	f7f4 fdaa 	bl	1005945a <llc_conn_calc_skip_ucfg_weak>
10064906:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
10064908:	4342      	muls	r2, r0
1006490a:	6c69      	ldr	r1, [r5, #68]	@ 0x44
1006490c:	1889      	adds	r1, r1, r2
1006490e:	6469      	str	r1, [r5, #68]	@ 0x44
10064910:	9001      	str	r0, [sp, #4]
10064912:	1838      	adds	r0, r7, r0
10064914:	9004      	str	r0, [sp, #16]
10064916:	b287      	uxth	r7, r0
10064918:	8830      	ldrh	r0, [r6, #0]
1006491a:	42b8      	cmp	r0, r7
1006491c:	d907      	bls.n	1006492e <llc_conn_close_event+0x64>
1006491e:	9803      	ldr	r0, [sp, #12]
10064920:	1828      	adds	r0, r5, r0
10064922:	2109      	movs	r1, #9
10064924:	0149      	lsls	r1, r1, #5
10064926:	1869      	adds	r1, r5, r1
10064928:	89c0      	ldrh	r0, [r0, #14]
1006492a:	f7f5 fe31 	bl	1005a590 <llc_subrate_new_sr_base_event_ucfg_weak>
1006492e:	68a0      	ldr	r0, [r4, #8]
10064930:	2180      	movs	r1, #128	@ 0x80
10064932:	4388      	bics	r0, r1
10064934:	60a0      	str	r0, [r4, #8]
10064936:	4628      	mov	r0, r5
10064938:	4639      	mov	r1, r7
1006493a:	f7f4 fe31 	bl	100595a0 <llc_conn_check_instant_and_set_params>
1006493e:	4607      	mov	r7, r0
10064940:	9804      	ldr	r0, [sp, #16]
10064942:	8030      	strh	r0, [r6, #0]
10064944:	2f00      	cmp	r7, #0
10064946:	d118      	bne.n	1006497a <llc_conn_close_event+0xb0>
10064948:	6c68      	ldr	r0, [r5, #68]	@ 0x44
1006494a:	9902      	ldr	r1, [sp, #8]
1006494c:	1a46      	subs	r6, r0, r1
1006494e:	4628      	mov	r0, r5
10064950:	4631      	mov	r1, r6
10064952:	f7f4 feb9 	bl	100596c8 <llc_conn_check_supervision_timer>
10064956:	4607      	mov	r7, r0
10064958:	2800      	cmp	r0, #0
1006495a:	d10e      	bne.n	1006497a <llc_conn_close_event+0xb0>
1006495c:	4628      	mov	r0, r5
1006495e:	4631      	mov	r1, r6
10064960:	f7f4 fde8 	bl	10059534 <llc_conn_check_ctrl_proc_rsp_timer>
10064964:	4607      	mov	r7, r0
10064966:	2800      	cmp	r0, #0
10064968:	d107      	bne.n	1006497a <llc_conn_close_event+0xb0>
1006496a:	4628      	mov	r0, r5
1006496c:	4631      	mov	r1, r6
1006496e:	9a01      	ldr	r2, [sp, #4]
10064970:	f7f5 fb1c 	bl	10059fac <llc_conn_set_taskslot_params>
10064974:	4607      	mov	r7, r0
10064976:	2800      	cmp	r0, #0
10064978:	d006      	beq.n	10064988 <llc_conn_close_event+0xbe>
1006497a:	352d      	adds	r5, #45	@ 0x2d
1006497c:	7d28      	ldrb	r0, [r5, #20]
1006497e:	f7fa fc5b 	bl	1005f238 <LL_sched_delete_taskslot>
10064982:	702f      	strb	r7, [r5, #0]
10064984:	2000      	movs	r0, #0
10064986:	8360      	strh	r0, [r4, #26]
10064988:	6820      	ldr	r0, [r4, #0]
1006498a:	2800      	cmp	r0, #0
1006498c:	d001      	beq.n	10064992 <llc_conn_close_event+0xc8>
1006498e:	69c6      	ldr	r6, [r0, #28]
10064990:	e00d      	b.n	100649ae <llc_conn_close_event+0xe4>
10064992:	2600      	movs	r6, #0
10064994:	e00b      	b.n	100649ae <llc_conn_close_event+0xe4>
10064996:	4635      	mov	r5, r6
10064998:	69f6      	ldr	r6, [r6, #28]
1006499a:	7a28      	ldrb	r0, [r5, #8]
1006499c:	0700      	lsls	r0, r0, #28
1006499e:	d506      	bpl.n	100649ae <llc_conn_close_event+0xe4>
100649a0:	4620      	mov	r0, r4
100649a2:	4629      	mov	r1, r5
100649a4:	f7fc fe14 	bl	100615d0 <ACL_list_remove>
100649a8:	4628      	mov	r0, r5
100649aa:	f7ee ff0d 	bl	100537c8 <ACL_pkt_release>
100649ae:	2e00      	cmp	r6, #0
100649b0:	d1f1      	bne.n	10064996 <llc_conn_close_event+0xcc>
100649b2:	b005      	add	sp, #20
100649b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

100649b6 <llc_conn_decrement_enc_count_rx>:
100649b6:	b51c      	push	{r2, r3, r4, lr}
100649b8:	4604      	mov	r4, r0
100649ba:	4669      	mov	r1, sp
100649bc:	f7ed ff23 	bl	10052806 <BLEPLAT_CNTR_SmGetRxCount>
100649c0:	9800      	ldr	r0, [sp, #0]
100649c2:	1e41      	subs	r1, r0, #1
100649c4:	9100      	str	r1, [sp, #0]
100649c6:	2800      	cmp	r0, #0
100649c8:	d102      	bne.n	100649d0 <llc_conn_decrement_enc_count_rx+0x1a>
100649ca:	9801      	ldr	r0, [sp, #4]
100649cc:	1e40      	subs	r0, r0, #1
100649ce:	9001      	str	r0, [sp, #4]
100649d0:	4669      	mov	r1, sp
100649d2:	4620      	mov	r0, r4
100649d4:	f7ee f82a 	bl	10052a2c <BLEPLAT_CNTR_SmSetRxCount>
100649d8:	bd1c      	pop	{r2, r3, r4, pc}
	...

100649dc <llc_check_sreq_or_creq_tx_addr_res_off>:
100649dc:	b570      	push	{r4, r5, r6, lr}
100649de:	b084      	sub	sp, #16
100649e0:	4615      	mov	r5, r2
100649e2:	460a      	mov	r2, r1
100649e4:	4604      	mov	r4, r0
100649e6:	2b00      	cmp	r3, #0
100649e8:	d007      	beq.n	100649fa <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
100649ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
100649ec:	4282      	cmp	r2, r0
100649ee:	d11f      	bne.n	10064a30 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100649f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100649f2:	4068      	eors	r0, r5
100649f4:	0200      	lsls	r0, r0, #8
100649f6:	d11b      	bne.n	10064a30 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100649f8:	e01b      	b.n	10064a32 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100649fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
100649fc:	9908      	ldr	r1, [sp, #32]
100649fe:	2301      	movs	r3, #1
10064a00:	2900      	cmp	r1, #0
10064a02:	d002      	beq.n	10064a0a <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
10064a04:	4606      	mov	r6, r0
10064a06:	401e      	ands	r6, r3
10064a08:	d104      	bne.n	10064a14 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
10064a0a:	2900      	cmp	r1, #0
10064a0c:	d111      	bne.n	10064a32 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10064a0e:	2102      	movs	r1, #2
10064a10:	4008      	ands	r0, r1
10064a12:	d00e      	beq.n	10064a32 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10064a14:	4808      	ldr	r0, [pc, #32]	@ (10064a38 <__arm_cp.1_0>)
10064a16:	6800      	ldr	r0, [r0, #0]
10064a18:	219c      	movs	r1, #156	@ 0x9c
10064a1a:	5841      	ldr	r1, [r0, r1]
10064a1c:	68c8      	ldr	r0, [r1, #12]
10064a1e:	6909      	ldr	r1, [r1, #16]
10064a20:	ae03      	add	r6, sp, #12
10064a22:	9300      	str	r3, [sp, #0]
10064a24:	9601      	str	r6, [sp, #4]
10064a26:	462b      	mov	r3, r5
10064a28:	f7fc fdfc 	bl	10061624 <addr8_list_search>
10064a2c:	2800      	cmp	r0, #0
10064a2e:	d100      	bne.n	10064a32 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10064a30:	24ff      	movs	r4, #255	@ 0xff
10064a32:	4620      	mov	r0, r4
10064a34:	b004      	add	sp, #16
10064a36:	bd70      	pop	{r4, r5, r6, pc}

10064a38 <__arm_cp.1_0>:
10064a38:	20002468 	.word	0x20002468

10064a3c <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
10064a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10064a3e:	b087      	sub	sp, #28
10064a40:	1ecd      	subs	r5, r1, #3
10064a42:	21ff      	movs	r1, #255	@ 0xff
10064a44:	24fd      	movs	r4, #253	@ 0xfd
10064a46:	4225      	tst	r5, r4
10064a48:	d11c      	bne.n	10064a84 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
10064a4a:	2a00      	cmp	r2, #0
10064a4c:	d01a      	beq.n	10064a84 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
10064a4e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10064a50:	990c      	ldr	r1, [sp, #48]	@ 0x30
10064a52:	680c      	ldr	r4, [r1, #0]
10064a54:	9405      	str	r4, [sp, #20]
10064a56:	9306      	str	r3, [sp, #24]
10064a58:	684b      	ldr	r3, [r1, #4]
10064a5a:	c882      	ldmia	r0!, {r1, r7}
10064a5c:	20ff      	movs	r0, #255	@ 0xff
10064a5e:	0600      	lsls	r0, r0, #24
10064a60:	463c      	mov	r4, r7
10064a62:	4384      	bics	r4, r0
10064a64:	c612      	stmia	r6!, {r1, r4}
10064a66:	9303      	str	r3, [sp, #12]
10064a68:	9805      	ldr	r0, [sp, #20]
10064a6a:	9002      	str	r0, [sp, #8]
10064a6c:	9806      	ldr	r0, [sp, #24]
10064a6e:	9001      	str	r0, [sp, #4]
10064a70:	4268      	negs	r0, r5
10064a72:	4168      	adcs	r0, r5
10064a74:	9000      	str	r0, [sp, #0]
10064a76:	b2c8      	uxtb	r0, r1
10064a78:	0752      	lsls	r2, r2, #29
10064a7a:	0fd3      	lsrs	r3, r2, #31
10064a7c:	463a      	mov	r2, r7
10064a7e:	f7ff ffad 	bl	100649dc <llc_check_sreq_or_creq_tx_addr_res_off>
10064a82:	4601      	mov	r1, r0
10064a84:	4608      	mov	r0, r1
10064a86:	b007      	add	sp, #28
10064a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10064a8c <llc_wl_mem_allocate>:
10064a8c:	b510      	push	{r4, lr}
10064a8e:	2401      	movs	r4, #1
10064a90:	4084      	lsls	r4, r0
10064a92:	2108      	movs	r1, #8
10064a94:	4620      	mov	r0, r4
10064a96:	f7fa fdbf 	bl	1005f618 <csmem_mem_0_assign>
10064a9a:	4903      	ldr	r1, [pc, #12]	@ (10064aa8 <__arm_cp.0_0>)
10064a9c:	6809      	ldr	r1, [r1, #0]
10064a9e:	229c      	movs	r2, #156	@ 0x9c
10064aa0:	5889      	ldr	r1, [r1, r2]
10064aa2:	744c      	strb	r4, [r1, #17]
10064aa4:	60c8      	str	r0, [r1, #12]
10064aa6:	bd10      	pop	{r4, pc}

10064aa8 <__arm_cp.0_0>:
10064aa8:	20002468 	.word	0x20002468

10064aac <llc_padv_mem_allocate_ucfg_weak>:
10064aac:	4770      	bx	lr

10064aae <llc_padv_init_ucfg_weak>:
10064aae:	4770      	bx	lr

10064ab0 <llc_past_mem_allocate_ucfg_weak>:
10064ab0:	4770      	bx	lr
	...

10064ab4 <llc_priv_mem_allocate>:
10064ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064ab6:	2800      	cmp	r0, #0
10064ab8:	d046      	beq.n	10064b48 <llc_priv_mem_allocate+0x94>
10064aba:	460e      	mov	r6, r1
10064abc:	2501      	movs	r5, #1
10064abe:	2168      	movs	r1, #104	@ 0x68
10064ac0:	4628      	mov	r0, r5
10064ac2:	f7fa fda9 	bl	1005f618 <csmem_mem_0_assign>
10064ac6:	4f21      	ldr	r7, [pc, #132]	@ (10064b4c <__arm_cp.0_0>)
10064ac8:	6839      	ldr	r1, [r7, #0]
10064aca:	249c      	movs	r4, #156	@ 0x9c
10064acc:	5909      	ldr	r1, [r1, r4]
10064ace:	6088      	str	r0, [r1, #8]
10064ad0:	40b5      	lsls	r5, r6
10064ad2:	b2ee      	uxtb	r6, r5
10064ad4:	2108      	movs	r1, #8
10064ad6:	4630      	mov	r0, r6
10064ad8:	f7fa fd9e 	bl	1005f618 <csmem_mem_0_assign>
10064adc:	6839      	ldr	r1, [r7, #0]
10064ade:	5909      	ldr	r1, [r1, r4]
10064ae0:	6889      	ldr	r1, [r1, #8]
10064ae2:	724d      	strb	r5, [r1, #9]
10064ae4:	6048      	str	r0, [r1, #4]
10064ae6:	9600      	str	r6, [sp, #0]
10064ae8:	0075      	lsls	r5, r6, #1
10064aea:	2611      	movs	r6, #17
10064aec:	2e21      	cmp	r6, #33	@ 0x21
10064aee:	d00f      	beq.n	10064b10 <llc_priv_mem_allocate+0x5c>
10064af0:	2108      	movs	r1, #8
10064af2:	4628      	mov	r0, r5
10064af4:	f7fa fd90 	bl	1005f618 <csmem_mem_0_assign>
10064af8:	6839      	ldr	r1, [r7, #0]
10064afa:	5909      	ldr	r1, [r1, r4]
10064afc:	6889      	ldr	r1, [r1, #8]
10064afe:	1989      	adds	r1, r1, r6
10064b00:	1f49      	subs	r1, r1, #5
10064b02:	6008      	str	r0, [r1, #0]
10064b04:	6838      	ldr	r0, [r7, #0]
10064b06:	5900      	ldr	r0, [r0, r4]
10064b08:	6880      	ldr	r0, [r0, #8]
10064b0a:	5585      	strb	r5, [r0, r6]
10064b0c:	3608      	adds	r6, #8
10064b0e:	e7ed      	b.n	10064aec <llc_priv_mem_allocate+0x38>
10064b10:	2128      	movs	r1, #40	@ 0x28
10064b12:	9800      	ldr	r0, [sp, #0]
10064b14:	f7fa fd80 	bl	1005f618 <csmem_mem_0_assign>
10064b18:	6839      	ldr	r1, [r7, #0]
10064b1a:	5909      	ldr	r1, [r1, r4]
10064b1c:	6889      	ldr	r1, [r1, #8]
10064b1e:	6008      	str	r0, [r1, #0]
10064b20:	480b      	ldr	r0, [pc, #44]	@ (10064b50 <__arm_cp.0_1>)
10064b22:	2502      	movs	r5, #2
10064b24:	2601      	movs	r6, #1
10064b26:	4629      	mov	r1, r5
10064b28:	4632      	mov	r2, r6
10064b2a:	f7fa fd63 	bl	1005f5f4 <csmem_mem_assign>
10064b2e:	6839      	ldr	r1, [r7, #0]
10064b30:	5909      	ldr	r1, [r1, r4]
10064b32:	6889      	ldr	r1, [r1, #8]
10064b34:	6488      	str	r0, [r1, #72]	@ 0x48
10064b36:	4806      	ldr	r0, [pc, #24]	@ (10064b50 <__arm_cp.0_1>)
10064b38:	4631      	mov	r1, r6
10064b3a:	462a      	mov	r2, r5
10064b3c:	f7fa fd5a 	bl	1005f5f4 <csmem_mem_assign>
10064b40:	6839      	ldr	r1, [r7, #0]
10064b42:	5909      	ldr	r1, [r1, r4]
10064b44:	6889      	ldr	r1, [r1, #8]
10064b46:	64c8      	str	r0, [r1, #76]	@ 0x4c
10064b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064b4a:	46c0      	nop			@ (mov r8, r8)

10064b4c <__arm_cp.0_0>:
10064b4c:	20002468 	.word	0x20002468

10064b50 <__arm_cp.0_1>:
10064b50:	20002478 	.word	0x20002478

10064b54 <llc_pscan_isr_ucfg_weak>:
10064b54:	2000      	movs	r0, #0
10064b56:	4770      	bx	lr

10064b58 <llc_scan_isr_uncoded_ucfg_weak>:
10064b58:	2000      	movs	r0, #0
10064b5a:	4770      	bx	lr

10064b5c <llc_scan_isr_coded_ucfg_weak>:
10064b5c:	2000      	movs	r0, #0
10064b5e:	4770      	bx	lr

10064b60 <smp_dep_gap_get_local_identity_address>:
10064b60:	b580      	push	{r7, lr}
10064b62:	4a0a      	ldr	r2, [pc, #40]	@ (10064b8c <__arm_cp.0_0>)
10064b64:	6812      	ldr	r2, [r2, #0]
10064b66:	233d      	movs	r3, #61	@ 0x3d
10064b68:	5cd2      	ldrb	r2, [r2, r3]
10064b6a:	7002      	strb	r2, [r0, #0]
10064b6c:	2a01      	cmp	r2, #1
10064b6e:	d005      	beq.n	10064b7c <smp_dep_gap_get_local_identity_address+0x1c>
10064b70:	2a00      	cmp	r2, #0
10064b72:	d108      	bne.n	10064b86 <smp_dep_gap_get_local_identity_address+0x26>
10064b74:	4608      	mov	r0, r1
10064b76:	f7f0 f94f 	bl	10054e18 <GAP_get_public_address>
10064b7a:	e002      	b.n	10064b82 <smp_dep_gap_get_local_identity_address+0x22>
10064b7c:	4608      	mov	r0, r1
10064b7e:	f7f0 f955 	bl	10054e2c <GAP_get_static_random_address>
10064b82:	2000      	movs	r0, #0
10064b84:	bd80      	pop	{r7, pc}
10064b86:	2086      	movs	r0, #134	@ 0x86
10064b88:	bd80      	pop	{r7, pc}
10064b8a:	46c0      	nop			@ (mov r8, r8)

10064b8c <__arm_cp.0_0>:
10064b8c:	200024b4 	.word	0x200024b4

10064b90 <smp_dep_l2c_send_acl_packet>:
10064b90:	b570      	push	{r4, r5, r6, lr}
10064b92:	460d      	mov	r5, r1
10064b94:	4606      	mov	r6, r0
10064b96:	2006      	movs	r0, #6
10064b98:	f7f3 fc58 	bl	1005844c <L2C_send_frame>
10064b9c:	4604      	mov	r4, r0
10064b9e:	2800      	cmp	r0, #0
10064ba0:	d003      	beq.n	10064baa <smp_dep_l2c_send_acl_packet+0x1a>
10064ba2:	4628      	mov	r0, r5
10064ba4:	f7ee fe10 	bl	100537c8 <ACL_pkt_release>
10064ba8:	e008      	b.n	10064bbc <smp_dep_l2c_send_acl_packet+0x2c>
10064baa:	8930      	ldrh	r0, [r6, #8]
10064bac:	f001 f8de 	bl	10065d6c <smp_get_remote_device_list_index>
10064bb0:	4602      	mov	r2, r0
10064bb2:	2000      	movs	r0, #0
10064bb4:	4b02      	ldr	r3, [pc, #8]	@ (10064bc0 <__arm_cp.0_0>)
10064bb6:	4601      	mov	r1, r0
10064bb8:	f7fb fda0 	bl	100606fc <smp_timer_reset>
10064bbc:	4620      	mov	r0, r4
10064bbe:	bd70      	pop	{r4, r5, r6, pc}

10064bc0 <__arm_cp.0_0>:
10064bc0:	00007530 	.word	0x00007530

10064bc4 <smp_dep_l2c_send_acl_short_pdu>:
10064bc4:	b5b0      	push	{r4, r5, r7, lr}
10064bc6:	461c      	mov	r4, r3
10064bc8:	4615      	mov	r5, r2
10064bca:	2900      	cmp	r1, #0
10064bcc:	d107      	bne.n	10064bde <smp_dep_l2c_send_acl_short_pdu+0x1a>
10064bce:	8901      	ldrh	r1, [r0, #8]
10064bd0:	2000      	movs	r0, #0
10064bd2:	2206      	movs	r2, #6
10064bd4:	f7ee fdd6 	bl	10053784 <ACL_pkt_get>
10064bd8:	4601      	mov	r1, r0
10064bda:	2800      	cmp	r0, #0
10064bdc:	d009      	beq.n	10064bf2 <smp_dep_l2c_send_acl_short_pdu+0x2e>
10064bde:	2002      	movs	r0, #2
10064be0:	8048      	strh	r0, [r1, #2]
10064be2:	6848      	ldr	r0, [r1, #4]
10064be4:	7205      	strb	r5, [r0, #8]
10064be6:	6848      	ldr	r0, [r1, #4]
10064be8:	7244      	strb	r4, [r0, #9]
10064bea:	2006      	movs	r0, #6
10064bec:	f7f3 fc2e 	bl	1005844c <L2C_send_frame>
10064bf0:	bdb0      	pop	{r4, r5, r7, pc}
10064bf2:	2088      	movs	r0, #136	@ 0x88
10064bf4:	bdb0      	pop	{r4, r5, r7, pc}

10064bf6 <smp_dep_sdb_get_bonding_records_count>:
10064bf6:	b580      	push	{r7, lr}
10064bf8:	f7fb f8dc 	bl	1005fdb4 <sdb_sap_get_security_records_count>
10064bfc:	bd80      	pop	{r7, pc}

10064bfe <smp_dep_sdb_add_bonding_record>:
10064bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
10064c00:	b097      	sub	sp, #92	@ 0x5c
10064c02:	4604      	mov	r4, r0
10064c04:	ae03      	add	r6, sp, #12
10064c06:	2100      	movs	r1, #0
10064c08:	2250      	movs	r2, #80	@ 0x50
10064c0a:	4630      	mov	r0, r6
10064c0c:	f7ec fa54 	bl	100510b8 <BLEPLAT_MemSet>
10064c10:	2059      	movs	r0, #89	@ 0x59
10064c12:	5c20      	ldrb	r0, [r4, r0]
10064c14:	7871      	ldrb	r1, [r6, #1]
10064c16:	4301      	orrs	r1, r0
10064c18:	7071      	strb	r1, [r6, #1]
10064c1a:	4630      	mov	r0, r6
10064c1c:	303e      	adds	r0, #62	@ 0x3e
10064c1e:	4621      	mov	r1, r4
10064c20:	315a      	adds	r1, #90	@ 0x5a
10064c22:	2506      	movs	r5, #6
10064c24:	462a      	mov	r2, r5
10064c26:	f7ec fa37 	bl	10051098 <BLEPLAT_MemCpy>
10064c2a:	7c20      	ldrb	r0, [r4, #16]
10064c2c:	70f0      	strb	r0, [r6, #3]
10064c2e:	7de0      	ldrb	r0, [r4, #23]
10064c30:	0701      	lsls	r1, r0, #28
10064c32:	d416      	bmi.n	10064c62 <smp_dep_sdb_add_bonding_record+0x64>
10064c34:	2011      	movs	r0, #17
10064c36:	5620      	ldrsb	r0, [r4, r0]
10064c38:	2800      	cmp	r0, #0
10064c3a:	d504      	bpl.n	10064c46 <smp_dep_sdb_add_bonding_record+0x48>
10064c3c:	a803      	add	r0, sp, #12
10064c3e:	7841      	ldrb	r1, [r0, #1]
10064c40:	2280      	movs	r2, #128	@ 0x80
10064c42:	430a      	orrs	r2, r1
10064c44:	7042      	strb	r2, [r0, #1]
10064c46:	ae03      	add	r6, sp, #12
10064c48:	1d30      	adds	r0, r6, #4
10064c4a:	4621      	mov	r1, r4
10064c4c:	311e      	adds	r1, #30
10064c4e:	2202      	movs	r2, #2
10064c50:	f7ec fa22 	bl	10051098 <BLEPLAT_MemCpy>
10064c54:	1db0      	adds	r0, r6, #6
10064c56:	4621      	mov	r1, r4
10064c58:	3120      	adds	r1, #32
10064c5a:	2208      	movs	r2, #8
10064c5c:	f7ec fa1c 	bl	10051098 <BLEPLAT_MemCpy>
10064c60:	e003      	b.n	10064c6a <smp_dep_sdb_add_bonding_record+0x6c>
10064c62:	21fe      	movs	r1, #254	@ 0xfe
10064c64:	4008      	ands	r0, r1
10064c66:	a903      	add	r1, sp, #12
10064c68:	7088      	strb	r0, [r1, #2]
10064c6a:	a803      	add	r0, sp, #12
10064c6c:	300e      	adds	r0, #14
10064c6e:	4621      	mov	r1, r4
10064c70:	3128      	adds	r1, #40	@ 0x28
10064c72:	2610      	movs	r6, #16
10064c74:	4632      	mov	r2, r6
10064c76:	f7ec fa0f 	bl	10051098 <BLEPLAT_MemCpy>
10064c7a:	7c60      	ldrb	r0, [r4, #17]
10064c7c:	0681      	lsls	r1, r0, #26
10064c7e:	d50c      	bpl.n	10064c9a <smp_dep_sdb_add_bonding_record+0x9c>
10064c80:	af03      	add	r7, sp, #12
10064c82:	4638      	mov	r0, r7
10064c84:	301e      	adds	r0, #30
10064c86:	4621      	mov	r1, r4
10064c88:	3138      	adds	r1, #56	@ 0x38
10064c8a:	2210      	movs	r2, #16
10064c8c:	f7ec fa04 	bl	10051098 <BLEPLAT_MemCpy>
10064c90:	7878      	ldrb	r0, [r7, #1]
10064c92:	2120      	movs	r1, #32
10064c94:	4301      	orrs	r1, r0
10064c96:	7079      	strb	r1, [r7, #1]
10064c98:	7c60      	ldrb	r0, [r4, #17]
10064c9a:	0640      	lsls	r0, r0, #25
10064c9c:	d50b      	bpl.n	10064cb6 <smp_dep_sdb_add_bonding_record+0xb8>
10064c9e:	af03      	add	r7, sp, #12
10064ca0:	4638      	mov	r0, r7
10064ca2:	302e      	adds	r0, #46	@ 0x2e
10064ca4:	4621      	mov	r1, r4
10064ca6:	3148      	adds	r1, #72	@ 0x48
10064ca8:	2210      	movs	r2, #16
10064caa:	f7ec f9f5 	bl	10051098 <BLEPLAT_MemCpy>
10064cae:	7878      	ldrb	r0, [r7, #1]
10064cb0:	2140      	movs	r1, #64	@ 0x40
10064cb2:	4301      	orrs	r1, r0
10064cb4:	7079      	strb	r1, [r7, #1]
10064cb6:	7ca0      	ldrb	r0, [r4, #18]
10064cb8:	2105      	movs	r1, #5
10064cba:	4208      	tst	r0, r1
10064cbc:	d00a      	beq.n	10064cd4 <smp_dep_sdb_add_bonding_record+0xd6>
10064cbe:	af03      	add	r7, sp, #12
10064cc0:	4638      	mov	r0, r7
10064cc2:	3044      	adds	r0, #68	@ 0x44
10064cc4:	4621      	mov	r1, r4
10064cc6:	311c      	adds	r1, #28
10064cc8:	2202      	movs	r2, #2
10064cca:	f7ec f9e5 	bl	10051098 <BLEPLAT_MemCpy>
10064cce:	7878      	ldrb	r0, [r7, #1]
10064cd0:	4330      	orrs	r0, r6
10064cd2:	e001      	b.n	10064cd8 <smp_dep_sdb_add_bonding_record+0xda>
10064cd4:	a803      	add	r0, sp, #12
10064cd6:	7840      	ldrb	r0, [r0, #1]
10064cd8:	7ae1      	ldrb	r1, [r4, #11]
10064cda:	4029      	ands	r1, r5
10064cdc:	4301      	orrs	r1, r0
10064cde:	a803      	add	r0, sp, #12
10064ce0:	7041      	strb	r1, [r0, #1]
10064ce2:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
10064ce4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
10064ce6:	9115      	str	r1, [sp, #84]	@ 0x54
10064ce8:	9216      	str	r2, [sp, #88]	@ 0x58
10064cea:	f7fb f867 	bl	1005fdbc <sdb_sap_add_security_record>
10064cee:	4605      	mov	r5, r0
10064cf0:	2800      	cmp	r0, #0
10064cf2:	d00c      	beq.n	10064d0e <smp_dep_sdb_add_bonding_record+0x110>
10064cf4:	1ca1      	adds	r1, r4, #2
10064cf6:	ac01      	add	r4, sp, #4
10064cf8:	2206      	movs	r2, #6
10064cfa:	4620      	mov	r0, r4
10064cfc:	f7ec f9cc 	bl	10051098 <BLEPLAT_MemCpy>
10064d00:	71a5      	strb	r5, [r4, #6]
10064d02:	2042      	movs	r0, #66	@ 0x42
10064d04:	2105      	movs	r1, #5
10064d06:	2207      	movs	r2, #7
10064d08:	4623      	mov	r3, r4
10064d0a:	f7fd fe51 	bl	100629b0 <aci_hal_fw_error_event_push_noinline>
10064d0e:	4628      	mov	r0, r5
10064d10:	b017      	add	sp, #92	@ 0x5c
10064d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

10064d14 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
10064d14:	b570      	push	{r4, r5, r6, lr}
10064d16:	b094      	sub	sp, #80	@ 0x50
10064d18:	460e      	mov	r6, r1
10064d1a:	4604      	mov	r4, r0
10064d1c:	7841      	ldrb	r1, [r0, #1]
10064d1e:	1c80      	adds	r0, r0, #2
10064d20:	466a      	mov	r2, sp
10064d22:	f7fb f86e 	bl	1005fe02 <sdb_sap_read_security_record>
10064d26:	4605      	mov	r5, r0
10064d28:	2e00      	cmp	r6, #0
10064d2a:	d005      	beq.n	10064d38 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
10064d2c:	2d00      	cmp	r5, #0
10064d2e:	d103      	bne.n	10064d38 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
10064d30:	4668      	mov	r0, sp
10064d32:	4621      	mov	r1, r4
10064d34:	f000 f804 	bl	10064d40 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
10064d38:	4628      	mov	r0, r5
10064d3a:	b014      	add	sp, #80	@ 0x50
10064d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

10064d40 <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
10064d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064d42:	460c      	mov	r4, r1
10064d44:	4605      	mov	r5, r0
10064d46:	2001      	movs	r0, #1
10064d48:	7388      	strb	r0, [r1, #14]
10064d4a:	78e8      	ldrb	r0, [r5, #3]
10064d4c:	7408      	strb	r0, [r1, #16]
10064d4e:	4608      	mov	r0, r1
10064d50:	301c      	adds	r0, #28
10064d52:	4629      	mov	r1, r5
10064d54:	3144      	adds	r1, #68	@ 0x44
10064d56:	2602      	movs	r6, #2
10064d58:	4f19      	ldr	r7, [pc, #100]	@ (10064dc0 <__arm_cp.3_0>)
10064d5a:	4632      	mov	r2, r6
10064d5c:	47b8      	blx	r7
10064d5e:	4620      	mov	r0, r4
10064d60:	301e      	adds	r0, #30
10064d62:	1d29      	adds	r1, r5, #4
10064d64:	4632      	mov	r2, r6
10064d66:	47b8      	blx	r7
10064d68:	4620      	mov	r0, r4
10064d6a:	3020      	adds	r0, #32
10064d6c:	1da9      	adds	r1, r5, #6
10064d6e:	2208      	movs	r2, #8
10064d70:	47b8      	blx	r7
10064d72:	4620      	mov	r0, r4
10064d74:	3028      	adds	r0, #40	@ 0x28
10064d76:	4629      	mov	r1, r5
10064d78:	310e      	adds	r1, #14
10064d7a:	2610      	movs	r6, #16
10064d7c:	4632      	mov	r2, r6
10064d7e:	47b8      	blx	r7
10064d80:	4620      	mov	r0, r4
10064d82:	3038      	adds	r0, #56	@ 0x38
10064d84:	4629      	mov	r1, r5
10064d86:	311e      	adds	r1, #30
10064d88:	4632      	mov	r2, r6
10064d8a:	47b8      	blx	r7
10064d8c:	4620      	mov	r0, r4
10064d8e:	3048      	adds	r0, #72	@ 0x48
10064d90:	4629      	mov	r1, r5
10064d92:	312e      	adds	r1, #46	@ 0x2e
10064d94:	4632      	mov	r2, r6
10064d96:	47b8      	blx	r7
10064d98:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10064d9a:	66a0      	str	r0, [r4, #104]	@ 0x68
10064d9c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
10064d9e:	66e0      	str	r0, [r4, #108]	@ 0x6c
10064da0:	7868      	ldrb	r0, [r5, #1]
10064da2:	2106      	movs	r1, #6
10064da4:	4001      	ands	r1, r0
10064da6:	72e1      	strb	r1, [r4, #11]
10064da8:	21e0      	movs	r1, #224	@ 0xe0
10064daa:	4001      	ands	r1, r0
10064dac:	7c60      	ldrb	r0, [r4, #17]
10064dae:	4308      	orrs	r0, r1
10064db0:	7460      	strb	r0, [r4, #17]
10064db2:	78a8      	ldrb	r0, [r5, #2]
10064db4:	0701      	lsls	r1, r0, #28
10064db6:	d502      	bpl.n	10064dbe <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10064db8:	21fe      	movs	r1, #254	@ 0xfe
10064dba:	4008      	ands	r0, r1
10064dbc:	75e0      	strb	r0, [r4, #23]
10064dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064dc0 <__arm_cp.3_0>:
10064dc0:	10051099 	.word	0x10051099

10064dc4 <smp_dep_sdb_find_bonding_record_read_address>:
10064dc4:	b570      	push	{r4, r5, r6, lr}
10064dc6:	b094      	sub	sp, #80	@ 0x50
10064dc8:	4614      	mov	r4, r2
10064dca:	460e      	mov	r6, r1
10064dcc:	7841      	ldrb	r1, [r0, #1]
10064dce:	1c80      	adds	r0, r0, #2
10064dd0:	466a      	mov	r2, sp
10064dd2:	f7fb f816 	bl	1005fe02 <sdb_sap_read_security_record>
10064dd6:	4605      	mov	r5, r0
10064dd8:	2800      	cmp	r0, #0
10064dda:	d107      	bne.n	10064dec <smp_dep_sdb_find_bonding_record_read_address+0x28>
10064ddc:	2000      	movs	r0, #0
10064dde:	7030      	strb	r0, [r6, #0]
10064de0:	4669      	mov	r1, sp
10064de2:	313e      	adds	r1, #62	@ 0x3e
10064de4:	2206      	movs	r2, #6
10064de6:	4620      	mov	r0, r4
10064de8:	f7ec f956 	bl	10051098 <BLEPLAT_MemCpy>
10064dec:	4628      	mov	r0, r5
10064dee:	b014      	add	sp, #80	@ 0x50
10064df0:	bd70      	pop	{r4, r5, r6, pc}

10064df2 <smp_dep_sdb_find_matching_ltk_read_record>:
10064df2:	b5b0      	push	{r4, r5, r7, lr}
10064df4:	b094      	sub	sp, #80	@ 0x50
10064df6:	4614      	mov	r4, r2
10064df8:	466a      	mov	r2, sp
10064dfa:	f7fb f87b 	bl	1005fef4 <sdb_sap_read_security_record_matching>
10064dfe:	4605      	mov	r5, r0
10064e00:	2800      	cmp	r0, #0
10064e02:	d103      	bne.n	10064e0c <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
10064e04:	4668      	mov	r0, sp
10064e06:	4621      	mov	r1, r4
10064e08:	f7ff ff9a 	bl	10064d40 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
10064e0c:	4628      	mov	r0, r5
10064e0e:	b014      	add	sp, #80	@ 0x50
10064e10:	bdb0      	pop	{r4, r5, r7, pc}

10064e12 <smp_start_encryption_ucfg_weak>:
10064e12:	201f      	movs	r0, #31
10064e14:	4770      	bx	lr
	...

10064e18 <smp_pp3_pairing_completed_successful>:
10064e18:	b570      	push	{r4, r5, r6, lr}
10064e1a:	4604      	mov	r4, r0
10064e1c:	7b80      	ldrb	r0, [r0, #14]
10064e1e:	2103      	movs	r1, #3
10064e20:	4001      	ands	r1, r0
10064e22:	8925      	ldrh	r5, [r4, #8]
10064e24:	2903      	cmp	r1, #3
10064e26:	d10a      	bne.n	10064e3e <smp_pp3_pairing_completed_successful+0x26>
10064e28:	4620      	mov	r0, r4
10064e2a:	f7ff fee8 	bl	10064bfe <smp_dep_sdb_add_bonding_record>
10064e2e:	2800      	cmp	r0, #0
10064e30:	d005      	beq.n	10064e3e <smp_pp3_pairing_completed_successful+0x26>
10064e32:	2108      	movs	r1, #8
10064e34:	2200      	movs	r2, #0
10064e36:	4620      	mov	r0, r4
10064e38:	f000 f826 	bl	10064e88 <smp_pp3_pairing_process_abort>
10064e3c:	bd70      	pop	{r4, r5, r6, pc}
10064e3e:	4628      	mov	r0, r5
10064e40:	f000 ff94 	bl	10065d6c <smp_get_remote_device_list_index>
10064e44:	4602      	mov	r2, r0
10064e46:	2001      	movs	r0, #1
10064e48:	2100      	movs	r1, #0
10064e4a:	4b0e      	ldr	r3, [pc, #56]	@ (10064e84 <__arm_cp.0_0>)
10064e4c:	f7fb fc56 	bl	100606fc <smp_timer_reset>
10064e50:	7ce0      	ldrb	r0, [r4, #19]
10064e52:	2803      	cmp	r0, #3
10064e54:	d102      	bne.n	10064e5c <smp_pp3_pairing_completed_successful+0x44>
10064e56:	2000      	movs	r0, #0
10064e58:	f000 ffe6 	bl	10065e28 <smp_oob_clear_remote_data_entry>
10064e5c:	4620      	mov	r0, r4
10064e5e:	3018      	adds	r0, #24
10064e60:	2600      	movs	r6, #0
10064e62:	2204      	movs	r2, #4
10064e64:	4631      	mov	r1, r6
10064e66:	f7ec f927 	bl	100510b8 <BLEPLAT_MemSet>
10064e6a:	4620      	mov	r0, r4
10064e6c:	4631      	mov	r1, r6
10064e6e:	f000 f83b 	bl	10064ee8 <smp_pp3_pairing_completed_update_stats>
10064e72:	20f1      	movs	r0, #241	@ 0xf1
10064e74:	72a0      	strb	r0, [r4, #10]
10064e76:	2002      	movs	r0, #2
10064e78:	4629      	mov	r1, r5
10064e7a:	4632      	mov	r2, r6
10064e7c:	4633      	mov	r3, r6
10064e7e:	f7fd fe0b 	bl	10062a98 <aci_gap_pairing_complete_event_push_noinline>
10064e82:	bd70      	pop	{r4, r5, r6, pc}

10064e84 <__arm_cp.0_0>:
10064e84:	00007530 	.word	0x00007530

10064e88 <smp_pp3_pairing_process_abort>:
10064e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064e8a:	4616      	mov	r6, r2
10064e8c:	460c      	mov	r4, r1
10064e8e:	4605      	mov	r5, r0
10064e90:	8900      	ldrh	r0, [r0, #8]
10064e92:	f000 ff6b 	bl	10065d6c <smp_get_remote_device_list_index>
10064e96:	4602      	mov	r2, r0
10064e98:	2001      	movs	r0, #1
10064e9a:	2700      	movs	r7, #0
10064e9c:	4b11      	ldr	r3, [pc, #68]	@ (10064ee4 <__arm_cp.1_0>)
10064e9e:	4639      	mov	r1, r7
10064ea0:	f7fb fc2c 	bl	100606fc <smp_timer_reset>
10064ea4:	8928      	ldrh	r0, [r5, #8]
10064ea6:	f7fb fbed 	bl	10060684 <smp_rxp_flush_packet_queues>
10064eaa:	2102      	movs	r1, #2
10064eac:	4628      	mov	r0, r5
10064eae:	f000 f81b 	bl	10064ee8 <smp_pp3_pairing_completed_update_stats>
10064eb2:	4628      	mov	r0, r5
10064eb4:	3018      	adds	r0, #24
10064eb6:	2204      	movs	r2, #4
10064eb8:	4639      	mov	r1, r7
10064eba:	f7ec f8fd 	bl	100510b8 <BLEPLAT_MemSet>
10064ebe:	7be8      	ldrb	r0, [r5, #15]
10064ec0:	212f      	movs	r1, #47	@ 0x2f
10064ec2:	4001      	ands	r1, r0
10064ec4:	73e9      	strb	r1, [r5, #15]
10064ec6:	2e00      	cmp	r6, #0
10064ec8:	d004      	beq.n	10064ed4 <smp_pp3_pairing_process_abort+0x4c>
10064eca:	7868      	ldrb	r0, [r5, #1]
10064ecc:	1ca9      	adds	r1, r5, #2
10064ece:	f000 fe51 	bl	10065b74 <smp_cmn_repeated_attacks_protection_start>
10064ed2:	27fb      	movs	r7, #251	@ 0xfb
10064ed4:	72af      	strb	r7, [r5, #10]
10064ed6:	8929      	ldrh	r1, [r5, #8]
10064ed8:	2002      	movs	r0, #2
10064eda:	4602      	mov	r2, r0
10064edc:	4623      	mov	r3, r4
10064ede:	f7fd fddb 	bl	10062a98 <aci_gap_pairing_complete_event_push_noinline>
10064ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064ee4 <__arm_cp.1_0>:
10064ee4:	00007530 	.word	0x00007530

10064ee8 <smp_pp3_pairing_completed_update_stats>:
10064ee8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064eea:	2260      	movs	r2, #96	@ 0x60
10064eec:	5c82      	ldrb	r2, [r0, r2]
10064eee:	07d2      	lsls	r2, r2, #31
10064ef0:	7a82      	ldrb	r2, [r0, #10]
10064ef2:	d104      	bne.n	10064efe <smp_pp3_pairing_completed_update_stats+0x16>
10064ef4:	3260      	adds	r2, #96	@ 0x60
10064ef6:	b2d2      	uxtb	r2, r2
10064ef8:	2a51      	cmp	r2, #81	@ 0x51
10064efa:	d304      	bcc.n	10064f06 <smp_pp3_pairing_completed_update_stats+0x1e>
10064efc:	e00f      	b.n	10064f1e <smp_pp3_pairing_completed_update_stats+0x36>
10064efe:	3250      	adds	r2, #80	@ 0x50
10064f00:	b2d2      	uxtb	r2, r2
10064f02:	2a40      	cmp	r2, #64	@ 0x40
10064f04:	d80b      	bhi.n	10064f1e <smp_pp3_pairing_completed_update_stats+0x36>
10064f06:	4a09      	ldr	r2, [pc, #36]	@ (10064f2c <__arm_cp.2_0>)
10064f08:	6812      	ldr	r2, [r2, #0]
10064f0a:	23b1      	movs	r3, #177	@ 0xb1
10064f0c:	5cd3      	ldrb	r3, [r2, r3]
10064f0e:	2b00      	cmp	r3, #0
10064f10:	d005      	beq.n	10064f1e <smp_pp3_pairing_completed_update_stats+0x36>
10064f12:	32b1      	adds	r2, #177	@ 0xb1
10064f14:	7d04      	ldrb	r4, [r0, #20]
10064f16:	2501      	movs	r5, #1
10064f18:	40a5      	lsls	r5, r4
10064f1a:	43ab      	bics	r3, r5
10064f1c:	7013      	strb	r3, [r2, #0]
10064f1e:	466a      	mov	r2, sp
10064f20:	7111      	strb	r1, [r2, #4]
10064f22:	9000      	str	r0, [sp, #0]
10064f24:	4610      	mov	r0, r2
10064f26:	f000 ffb2 	bl	10065e8e <smp_scp_stats_update_on_pairing_complete_ucfg_weak>
10064f2a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064f2c <__arm_cp.2_0>:
10064f2c:	200024b4 	.word	0x200024b4

10064f30 <smp_pp3_pairing_failed_receive>:
10064f30:	b5b0      	push	{r4, r5, r7, lr}
10064f32:	460c      	mov	r4, r1
10064f34:	2160      	movs	r1, #96	@ 0x60
10064f36:	5c61      	ldrb	r1, [r4, r1]
10064f38:	2201      	movs	r2, #1
10064f3a:	400a      	ands	r2, r1
10064f3c:	7aa3      	ldrb	r3, [r4, #10]
10064f3e:	6840      	ldr	r0, [r0, #4]
10064f40:	7a41      	ldrb	r1, [r0, #9]
10064f42:	d102      	bne.n	10064f4a <smp_pp3_pairing_failed_receive+0x1a>
10064f44:	2b9f      	cmp	r3, #159	@ 0x9f
10064f46:	d802      	bhi.n	10064f4e <smp_pp3_pairing_failed_receive+0x1e>
10064f48:	bdb0      	pop	{r4, r5, r7, pc}
10064f4a:	2bb0      	cmp	r3, #176	@ 0xb0
10064f4c:	d314      	bcc.n	10064f78 <smp_pp3_pairing_failed_receive+0x48>
10064f4e:	2bf0      	cmp	r3, #240	@ 0xf0
10064f50:	d915      	bls.n	10064f7e <smp_pp3_pairing_failed_receive+0x4e>
10064f52:	2bf1      	cmp	r3, #241	@ 0xf1
10064f54:	d10e      	bne.n	10064f74 <smp_pp3_pairing_failed_receive+0x44>
10064f56:	290f      	cmp	r1, #15
10064f58:	d10c      	bne.n	10064f74 <smp_pp3_pairing_failed_receive+0x44>
10064f5a:	4625      	mov	r5, r4
10064f5c:	3559      	adds	r5, #89	@ 0x59
10064f5e:	210f      	movs	r1, #15
10064f60:	2201      	movs	r2, #1
10064f62:	4620      	mov	r0, r4
10064f64:	f7ff ff90 	bl	10064e88 <smp_pp3_pairing_process_abort>
10064f68:	7829      	ldrb	r1, [r5, #0]
10064f6a:	345a      	adds	r4, #90	@ 0x5a
10064f6c:	4620      	mov	r0, r4
10064f6e:	f7fa ffaf 	bl	1005fed0 <sdb_sap_del_bonded_device>
10064f72:	bdb0      	pop	{r4, r5, r7, pc}
10064f74:	2a00      	cmp	r2, #0
10064f76:	d0e7      	beq.n	10064f48 <smp_pp3_pairing_failed_receive+0x18>
10064f78:	7e20      	ldrb	r0, [r4, #24]
10064f7a:	0780      	lsls	r0, r0, #30
10064f7c:	d0e4      	beq.n	10064f48 <smp_pp3_pairing_failed_receive+0x18>
10064f7e:	2201      	movs	r2, #1
10064f80:	4620      	mov	r0, r4
10064f82:	f7ff ff81 	bl	10064e88 <smp_pp3_pairing_process_abort>
10064f86:	bdb0      	pop	{r4, r5, r7, pc}

10064f88 <smp_pp3_pairing_failed_send>:
10064f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064f8a:	461f      	mov	r7, r3
10064f8c:	4613      	mov	r3, r2
10064f8e:	460c      	mov	r4, r1
10064f90:	4605      	mov	r5, r0
10064f92:	2205      	movs	r2, #5
10064f94:	4619      	mov	r1, r3
10064f96:	4623      	mov	r3, r4
10064f98:	f7ff fe14 	bl	10064bc4 <smp_dep_l2c_send_acl_short_pdu>
10064f9c:	4606      	mov	r6, r0
10064f9e:	2f00      	cmp	r7, #0
10064fa0:	d101      	bne.n	10064fa6 <smp_pp3_pairing_failed_send+0x1e>
10064fa2:	2e88      	cmp	r6, #136	@ 0x88
10064fa4:	d004      	beq.n	10064fb0 <smp_pp3_pairing_failed_send+0x28>
10064fa6:	2201      	movs	r2, #1
10064fa8:	4628      	mov	r0, r5
10064faa:	4621      	mov	r1, r4
10064fac:	f7ff ff6c 	bl	10064e88 <smp_pp3_pairing_process_abort>
10064fb0:	4630      	mov	r0, r6
10064fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064fb4 <smp_pp1_get_next_free_pairing_idx>:
10064fb4:	b510      	push	{r4, lr}
10064fb6:	490b      	ldr	r1, [pc, #44]	@ (10064fe4 <__arm_cp.0_0>)
10064fb8:	680a      	ldr	r2, [r1, #0]
10064fba:	21b1      	movs	r1, #177	@ 0xb1
10064fbc:	5c53      	ldrb	r3, [r2, r1]
10064fbe:	32b1      	adds	r2, #177	@ 0xb1
10064fc0:	2100      	movs	r1, #0
10064fc2:	2903      	cmp	r1, #3
10064fc4:	d005      	beq.n	10064fd2 <smp_pp1_get_next_free_pairing_idx+0x1e>
10064fc6:	2401      	movs	r4, #1
10064fc8:	408c      	lsls	r4, r1
10064fca:	421c      	tst	r4, r3
10064fcc:	d003      	beq.n	10064fd6 <smp_pp1_get_next_free_pairing_idx+0x22>
10064fce:	1c49      	adds	r1, r1, #1
10064fd0:	e7f7      	b.n	10064fc2 <smp_pp1_get_next_free_pairing_idx+0xe>
10064fd2:	2103      	movs	r1, #3
10064fd4:	e003      	b.n	10064fde <smp_pp1_get_next_free_pairing_idx+0x2a>
10064fd6:	2800      	cmp	r0, #0
10064fd8:	d001      	beq.n	10064fde <smp_pp1_get_next_free_pairing_idx+0x2a>
10064fda:	4323      	orrs	r3, r4
10064fdc:	7013      	strb	r3, [r2, #0]
10064fde:	b2c8      	uxtb	r0, r1
10064fe0:	bd10      	pop	{r4, pc}
10064fe2:	46c0      	nop			@ (mov r8, r8)

10064fe4 <__arm_cp.0_0>:
10064fe4:	200024b4 	.word	0x200024b4

10064fe8 <smp_pp1_get_pairing_pdu_offset>:
10064fe8:	0100      	lsls	r0, r0, #4
10064fea:	2900      	cmp	r1, #0
10064fec:	d000      	beq.n	10064ff0 <smp_pp1_get_pairing_pdu_offset+0x8>
10064fee:	3008      	adds	r0, #8
10064ff0:	b2c0      	uxtb	r0, r0
10064ff2:	4770      	bx	lr

10064ff4 <smp_pp1_reqrsp_pdu_params_check>:
10064ff4:	b51c      	push	{r2, r3, r4, lr}
10064ff6:	2104      	movs	r1, #4
10064ff8:	2207      	movs	r2, #7
10064ffa:	466c      	mov	r4, sp
10064ffc:	4623      	mov	r3, r4
10064ffe:	f7ee fbff 	bl	10053800 <ACL_pkt_read>
10065002:	7862      	ldrb	r2, [r4, #1]
10065004:	210a      	movs	r1, #10
10065006:	2a04      	cmp	r2, #4
10065008:	d813      	bhi.n	10065032 <smp_pp1_reqrsp_pdu_params_check+0x3e>
1006500a:	466a      	mov	r2, sp
1006500c:	7892      	ldrb	r2, [r2, #2]
1006500e:	2a01      	cmp	r2, #1
10065010:	d80f      	bhi.n	10065032 <smp_pp1_reqrsp_pdu_params_check+0x3e>
10065012:	466a      	mov	r2, sp
10065014:	78d2      	ldrb	r2, [r2, #3]
10065016:	0792      	lsls	r2, r2, #30
10065018:	d40b      	bmi.n	10065032 <smp_pp1_reqrsp_pdu_params_check+0x3e>
1006501a:	4907      	ldr	r1, [pc, #28]	@ (10065038 <__arm_cp.2_0>)
1006501c:	6809      	ldr	r1, [r1, #0]
1006501e:	2234      	movs	r2, #52	@ 0x34
10065020:	5c8a      	ldrb	r2, [r1, r2]
10065022:	4669      	mov	r1, sp
10065024:	7909      	ldrb	r1, [r1, #4]
10065026:	4291      	cmp	r1, r2
10065028:	d302      	bcc.n	10065030 <smp_pp1_reqrsp_pdu_params_check+0x3c>
1006502a:	2911      	cmp	r1, #17
1006502c:	4601      	mov	r1, r0
1006502e:	d300      	bcc.n	10065032 <smp_pp1_reqrsp_pdu_params_check+0x3e>
10065030:	2106      	movs	r1, #6
10065032:	4608      	mov	r0, r1
10065034:	bd1c      	pop	{r2, r3, r4, pc}
10065036:	46c0      	nop			@ (mov r8, r8)

10065038 <__arm_cp.2_0>:
10065038:	200024b4 	.word	0x200024b4

1006503c <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
1006503c:	b580      	push	{r7, lr}
1006503e:	7d12      	ldrb	r2, [r2, #20]
10065040:	0112      	lsls	r2, r2, #4
10065042:	2900      	cmp	r1, #0
10065044:	d000      	beq.n	10065048 <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
10065046:	3208      	adds	r2, #8
10065048:	b2d1      	uxtb	r1, r2
1006504a:	4a04      	ldr	r2, [pc, #16]	@ (1006505c <__arm_cp.3_0>)
1006504c:	6812      	ldr	r2, [r2, #0]
1006504e:	1853      	adds	r3, r2, r1
10065050:	33b4      	adds	r3, #180	@ 0xb4
10065052:	2104      	movs	r1, #4
10065054:	2207      	movs	r2, #7
10065056:	f7ee fbd3 	bl	10053800 <ACL_pkt_read>
1006505a:	bd80      	pop	{r7, pc}

1006505c <__arm_cp.3_0>:
1006505c:	200024b4 	.word	0x200024b4

10065060 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
10065060:	b5f0      	push	{r4, r5, r6, r7, lr}
10065062:	4924      	ldr	r1, [pc, #144]	@ (100650f4 <__arm_cp.4_0>)
10065064:	6809      	ldr	r1, [r1, #0]
10065066:	7d02      	ldrb	r2, [r0, #20]
10065068:	0112      	lsls	r2, r2, #4
1006506a:	3208      	adds	r2, #8
1006506c:	b2d2      	uxtb	r2, r2
1006506e:	188b      	adds	r3, r1, r2
10065070:	24b5      	movs	r4, #181	@ 0xb5
10065072:	5d1c      	ldrb	r4, [r3, r4]
10065074:	7304      	strb	r4, [r0, #12]
10065076:	24b6      	movs	r4, #182	@ 0xb6
10065078:	5d1b      	ldrb	r3, [r3, r4]
1006507a:	2b01      	cmp	r3, #1
1006507c:	d103      	bne.n	10065086 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
1006507e:	7b43      	ldrb	r3, [r0, #13]
10065080:	2402      	movs	r4, #2
10065082:	431c      	orrs	r4, r3
10065084:	7344      	strb	r4, [r0, #13]
10065086:	460b      	mov	r3, r1
10065088:	3336      	adds	r3, #54	@ 0x36
1006508a:	2503      	movs	r5, #3
1006508c:	4315      	orrs	r5, r2
1006508e:	460c      	mov	r4, r1
10065090:	34b4      	adds	r4, #180	@ 0xb4
10065092:	5d65      	ldrb	r5, [r4, r5]
10065094:	2601      	movs	r6, #1
10065096:	402e      	ands	r6, r5
10065098:	7b87      	ldrb	r7, [r0, #14]
1006509a:	4337      	orrs	r7, r6
1006509c:	7387      	strb	r7, [r0, #14]
1006509e:	2604      	movs	r6, #4
100650a0:	4035      	ands	r5, r6
100650a2:	7bc7      	ldrb	r7, [r0, #15]
100650a4:	432f      	orrs	r7, r5
100650a6:	73c7      	strb	r7, [r0, #15]
100650a8:	4316      	orrs	r6, r2
100650aa:	5da5      	ldrb	r5, [r4, r6]
100650ac:	7405      	strb	r5, [r0, #16]
100650ae:	2505      	movs	r5, #5
100650b0:	4315      	orrs	r5, r2
100650b2:	5d64      	ldrb	r4, [r4, r5]
100650b4:	2560      	movs	r5, #96	@ 0x60
100650b6:	5d45      	ldrb	r5, [r0, r5]
100650b8:	07ed      	lsls	r5, r5, #31
100650ba:	d10e      	bne.n	100650da <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
100650bc:	781d      	ldrb	r5, [r3, #0]
100650be:	402c      	ands	r4, r5
100650c0:	2507      	movs	r5, #7
100650c2:	402c      	ands	r4, r5
100650c4:	7484      	strb	r4, [r0, #18]
100650c6:	2406      	movs	r4, #6
100650c8:	4322      	orrs	r2, r4
100650ca:	1889      	adds	r1, r1, r2
100650cc:	22b4      	movs	r2, #180	@ 0xb4
100650ce:	5c89      	ldrb	r1, [r1, r2]
100650d0:	785a      	ldrb	r2, [r3, #1]
100650d2:	400a      	ands	r2, r1
100650d4:	402a      	ands	r2, r5
100650d6:	7442      	strb	r2, [r0, #17]
100650d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100650da:	785d      	ldrb	r5, [r3, #1]
100650dc:	4025      	ands	r5, r4
100650de:	7445      	strb	r5, [r0, #17]
100650e0:	2406      	movs	r4, #6
100650e2:	4322      	orrs	r2, r4
100650e4:	1889      	adds	r1, r1, r2
100650e6:	22b4      	movs	r2, #180	@ 0xb4
100650e8:	5c89      	ldrb	r1, [r1, r2]
100650ea:	781a      	ldrb	r2, [r3, #0]
100650ec:	400a      	ands	r2, r1
100650ee:	7482      	strb	r2, [r0, #18]
100650f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100650f2:	46c0      	nop			@ (mov r8, r8)

100650f4 <__arm_cp.4_0>:
100650f4:	200024b4 	.word	0x200024b4

100650f8 <smp_pp1_key_generation_method_selection>:
100650f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100650fa:	7b01      	ldrb	r1, [r0, #12]
100650fc:	7b42      	ldrb	r2, [r0, #13]
100650fe:	07d3      	lsls	r3, r2, #31
10065100:	d001      	beq.n	10065106 <smp_pp1_key_generation_method_selection+0xe>
10065102:	0793      	lsls	r3, r2, #30
10065104:	d405      	bmi.n	10065112 <smp_pp1_key_generation_method_selection+0x1a>
10065106:	7dc3      	ldrb	r3, [r0, #23]
10065108:	2408      	movs	r4, #8
1006510a:	401c      	ands	r4, r3
1006510c:	d003      	beq.n	10065116 <smp_pp1_key_generation_method_selection+0x1e>
1006510e:	0792      	lsls	r2, r2, #30
10065110:	d001      	beq.n	10065116 <smp_pp1_key_generation_method_selection+0x1e>
10065112:	2203      	movs	r2, #3
10065114:	e019      	b.n	1006514a <smp_pp1_key_generation_method_selection+0x52>
10065116:	7bc3      	ldrb	r3, [r0, #15]
10065118:	2205      	movs	r2, #5
1006511a:	4213      	tst	r3, r2
1006511c:	d014      	beq.n	10065148 <smp_pp1_key_generation_method_selection+0x50>
1006511e:	4b42      	ldr	r3, [pc, #264]	@ (10065228 <__arm_cp.5_0>)
10065120:	681b      	ldr	r3, [r3, #0]
10065122:	2540      	movs	r5, #64	@ 0x40
10065124:	5d5d      	ldrb	r5, [r3, r5]
10065126:	434a      	muls	r2, r1
10065128:	4b40      	ldr	r3, [pc, #256]	@ (1006522c <__arm_cp.5_1>)
1006512a:	189a      	adds	r2, r3, r2
1006512c:	5d52      	ldrb	r2, [r2, r5]
1006512e:	74c2      	strb	r2, [r0, #19]
10065130:	4603      	mov	r3, r0
10065132:	3313      	adds	r3, #19
10065134:	2a00      	cmp	r2, #0
10065136:	d10b      	bne.n	10065150 <smp_pp1_key_generation_method_selection+0x58>
10065138:	2c00      	cmp	r4, #0
1006513a:	d13d      	bne.n	100651b8 <smp_pp1_key_generation_method_selection+0xc0>
1006513c:	2901      	cmp	r1, #1
1006513e:	d16f      	bne.n	10065220 <smp_pp1_key_generation_method_selection+0x128>
10065140:	2d01      	cmp	r5, #1
10065142:	d16d      	bne.n	10065220 <smp_pp1_key_generation_method_selection+0x128>
10065144:	2201      	movs	r2, #1
10065146:	e06c      	b.n	10065222 <smp_pp1_key_generation_method_selection+0x12a>
10065148:	2201      	movs	r2, #1
1006514a:	74c2      	strb	r2, [r0, #19]
1006514c:	4603      	mov	r3, r0
1006514e:	3313      	adds	r3, #19
10065150:	2460      	movs	r4, #96	@ 0x60
10065152:	5d05      	ldrb	r5, [r0, r4]
10065154:	2601      	movs	r6, #1
10065156:	4035      	ands	r5, r6
10065158:	d103      	bne.n	10065162 <smp_pp1_key_generation_method_selection+0x6a>
1006515a:	241a      	movs	r4, #26
1006515c:	5704      	ldrsb	r4, [r0, r4]
1006515e:	2c00      	cmp	r4, #0
10065160:	d426      	bmi.n	100651b0 <smp_pp1_key_generation_method_selection+0xb8>
10065162:	4604      	mov	r4, r0
10065164:	340f      	adds	r4, #15
10065166:	7824      	ldrb	r4, [r4, #0]
10065168:	07e4      	lsls	r4, r4, #31
1006516a:	d004      	beq.n	10065176 <smp_pp1_key_generation_method_selection+0x7e>
1006516c:	2a01      	cmp	r2, #1
1006516e:	d102      	bne.n	10065176 <smp_pp1_key_generation_method_selection+0x7e>
10065170:	2403      	movs	r4, #3
10065172:	701c      	strb	r4, [r3, #0]
10065174:	e052      	b.n	1006521c <smp_pp1_key_generation_method_selection+0x124>
10065176:	7dc3      	ldrb	r3, [r0, #23]
10065178:	071b      	lsls	r3, r3, #28
1006517a:	d503      	bpl.n	10065184 <smp_pp1_key_generation_method_selection+0x8c>
1006517c:	2a02      	cmp	r2, #2
1006517e:	d101      	bne.n	10065184 <smp_pp1_key_generation_method_selection+0x8c>
10065180:	2300      	movs	r3, #0
10065182:	76c3      	strb	r3, [r0, #27]
10065184:	2a02      	cmp	r2, #2
10065186:	d111      	bne.n	100651ac <smp_pp1_key_generation_method_selection+0xb4>
10065188:	7bc2      	ldrb	r2, [r0, #15]
1006518a:	23ef      	movs	r3, #239	@ 0xef
1006518c:	4013      	ands	r3, r2
1006518e:	73c3      	strb	r3, [r0, #15]
10065190:	4a25      	ldr	r2, [pc, #148]	@ (10065228 <__arm_cp.5_0>)
10065192:	6812      	ldr	r2, [r2, #0]
10065194:	2340      	movs	r3, #64	@ 0x40
10065196:	5cd2      	ldrb	r2, [r2, r3]
10065198:	2400      	movs	r4, #0
1006519a:	2a02      	cmp	r2, #2
1006519c:	4627      	mov	r7, r4
1006519e:	d318      	bcc.n	100651d2 <smp_pp1_key_generation_method_selection+0xda>
100651a0:	2a04      	cmp	r2, #4
100651a2:	d00b      	beq.n	100651bc <smp_pp1_key_generation_method_selection+0xc4>
100651a4:	2a02      	cmp	r2, #2
100651a6:	d113      	bne.n	100651d0 <smp_pp1_key_generation_method_selection+0xd8>
100651a8:	4637      	mov	r7, r6
100651aa:	e012      	b.n	100651d2 <smp_pp1_key_generation_method_selection+0xda>
100651ac:	2400      	movs	r4, #0
100651ae:	e035      	b.n	1006521c <smp_pp1_key_generation_method_selection+0x124>
100651b0:	4c1d      	ldr	r4, [pc, #116]	@ (10065228 <__arm_cp.5_0>)
100651b2:	6824      	ldr	r4, [r4, #0]
100651b4:	3431      	adds	r4, #49	@ 0x31
100651b6:	e7d6      	b.n	10065166 <smp_pp1_key_generation_method_selection+0x6e>
100651b8:	2204      	movs	r2, #4
100651ba:	e032      	b.n	10065222 <smp_pp1_key_generation_method_selection+0x12a>
100651bc:	2902      	cmp	r1, #2
100651be:	4637      	mov	r7, r6
100651c0:	d307      	bcc.n	100651d2 <smp_pp1_key_generation_method_selection+0xda>
100651c2:	2904      	cmp	r1, #4
100651c4:	462f      	mov	r7, r5
100651c6:	d004      	beq.n	100651d2 <smp_pp1_key_generation_method_selection+0xda>
100651c8:	2902      	cmp	r1, #2
100651ca:	d101      	bne.n	100651d0 <smp_pp1_key_generation_method_selection+0xd8>
100651cc:	4627      	mov	r7, r4
100651ce:	e000      	b.n	100651d2 <smp_pp1_key_generation_method_selection+0xda>
100651d0:	27ff      	movs	r7, #255	@ 0xff
100651d2:	4917      	ldr	r1, [pc, #92]	@ (10065230 <__arm_cp.5_2>)
100651d4:	6809      	ldr	r1, [r1, #0]
100651d6:	224e      	movs	r2, #78	@ 0x4e
100651d8:	5c89      	ldrb	r1, [r1, r2]
100651da:	0749      	lsls	r1, r1, #29
100651dc:	d51e      	bpl.n	1006521c <smp_pp1_key_generation_method_selection+0x124>
100651de:	8906      	ldrh	r6, [r0, #8]
100651e0:	4814      	ldr	r0, [pc, #80]	@ (10065234 <__arm_cp.5_3>)
100651e2:	6800      	ldr	r0, [r0, #0]
100651e4:	6980      	ldr	r0, [r0, #24]
100651e6:	2502      	movs	r5, #2
100651e8:	2246      	movs	r2, #70	@ 0x46
100651ea:	2303      	movs	r3, #3
100651ec:	4629      	mov	r1, r5
100651ee:	f7ee fc9f 	bl	10053b30 <aci_event_fifo_push_header>
100651f2:	2800      	cmp	r0, #0
100651f4:	d012      	beq.n	1006521c <smp_pp1_key_generation_method_selection+0x124>
100651f6:	4601      	mov	r1, r0
100651f8:	7286      	strb	r6, [r0, #10]
100651fa:	2004      	movs	r0, #4
100651fc:	7248      	strb	r0, [r1, #9]
100651fe:	720d      	strb	r5, [r1, #8]
10065200:	2400      	movs	r4, #0
10065202:	71cc      	strb	r4, [r1, #7]
10065204:	2005      	movs	r0, #5
10065206:	7188      	strb	r0, [r1, #6]
10065208:	730f      	strb	r7, [r1, #12]
1006520a:	20ff      	movs	r0, #255	@ 0xff
1006520c:	7148      	strb	r0, [r1, #5]
1006520e:	2082      	movs	r0, #130	@ 0x82
10065210:	7108      	strb	r0, [r1, #4]
10065212:	0a30      	lsrs	r0, r6, #8
10065214:	72c8      	strb	r0, [r1, #11]
10065216:	4628      	mov	r0, r5
10065218:	f7ee fd27 	bl	10053c6a <aci_event_fifo_push>
1006521c:	4620      	mov	r0, r4
1006521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065220:	2202      	movs	r2, #2
10065222:	701a      	strb	r2, [r3, #0]
10065224:	e794      	b.n	10065150 <smp_pp1_key_generation_method_selection+0x58>
10065226:	46c0      	nop			@ (mov r8, r8)

10065228 <__arm_cp.5_0>:
10065228:	200024b4 	.word	0x200024b4

1006522c <__arm_cp.5_1>:
1006522c:	1006826c 	.word	0x1006826c

10065230 <__arm_cp.5_2>:
10065230:	20002468 	.word	0x20002468

10065234 <__arm_cp.5_3>:
10065234:	20002418 	.word	0x20002418

10065238 <smp_pp1_auth_req_field_generate_from_device_config>:
10065238:	490b      	ldr	r1, [pc, #44]	@ (10065268 <__arm_cp.6_0>)
1006523a:	6809      	ldr	r1, [r1, #0]
1006523c:	2230      	movs	r2, #48	@ 0x30
1006523e:	5c8a      	ldrb	r2, [r1, r2]
10065240:	2301      	movs	r3, #1
10065242:	4013      	ands	r3, r2
10065244:	3130      	adds	r1, #48	@ 0x30
10065246:	784a      	ldrb	r2, [r1, #1]
10065248:	07d2      	lsls	r2, r2, #31
1006524a:	0f52      	lsrs	r2, r2, #29
1006524c:	18d2      	adds	r2, r2, r3
1006524e:	78cb      	ldrb	r3, [r1, #3]
10065250:	07db      	lsls	r3, r3, #31
10065252:	0edb      	lsrs	r3, r3, #27
10065254:	18d2      	adds	r2, r2, r3
10065256:	7889      	ldrb	r1, [r1, #2]
10065258:	084b      	lsrs	r3, r1, #1
1006525a:	430b      	orrs	r3, r1
1006525c:	07d9      	lsls	r1, r3, #31
1006525e:	0f09      	lsrs	r1, r1, #28
10065260:	1851      	adds	r1, r2, r1
10065262:	7001      	strb	r1, [r0, #0]
10065264:	4770      	bx	lr
10065266:	46c0      	nop			@ (mov r8, r8)

10065268 <__arm_cp.6_0>:
10065268:	200024b4 	.word	0x200024b4

1006526c <smp_pp1_hndl_pairing_response_mode_through_event>:
1006526c:	b570      	push	{r4, r5, r6, lr}
1006526e:	4605      	mov	r5, r0
10065270:	8900      	ldrh	r0, [r0, #8]
10065272:	f7fb fe2a 	bl	10060eca <smp_sap_check_is_peer_device_bonded>
10065276:	4246      	negs	r6, r0
10065278:	4146      	adcs	r6, r0
1006527a:	491b      	ldr	r1, [pc, #108]	@ (100652e8 <__arm_cp.8_0>)
1006527c:	6809      	ldr	r1, [r1, #0]
1006527e:	223c      	movs	r2, #60	@ 0x3c
10065280:	5c89      	ldrb	r1, [r1, r2]
10065282:	2902      	cmp	r1, #2
10065284:	d004      	beq.n	10065290 <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
10065286:	2400      	movs	r4, #0
10065288:	2901      	cmp	r1, #1
1006528a:	d12a      	bne.n	100652e2 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
1006528c:	2800      	cmp	r0, #0
1006528e:	d128      	bne.n	100652e2 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10065290:	2008      	movs	r0, #8
10065292:	4301      	orrs	r1, r0
10065294:	75a9      	strb	r1, [r5, #22]
10065296:	4815      	ldr	r0, [pc, #84]	@ (100652ec <__arm_cp.8_1>)
10065298:	6800      	ldr	r0, [r0, #0]
1006529a:	214e      	movs	r1, #78	@ 0x4e
1006529c:	5c40      	ldrb	r0, [r0, r1]
1006529e:	2401      	movs	r4, #1
100652a0:	0780      	lsls	r0, r0, #30
100652a2:	d51e      	bpl.n	100652e2 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100652a4:	892d      	ldrh	r5, [r5, #8]
100652a6:	4812      	ldr	r0, [pc, #72]	@ (100652f0 <__arm_cp.8_2>)
100652a8:	6800      	ldr	r0, [r0, #0]
100652aa:	6980      	ldr	r0, [r0, #24]
100652ac:	2102      	movs	r1, #2
100652ae:	224b      	movs	r2, #75	@ 0x4b
100652b0:	2303      	movs	r3, #3
100652b2:	f7ee fc3d 	bl	10053b30 <aci_event_fifo_push_header>
100652b6:	2800      	cmp	r0, #0
100652b8:	d013      	beq.n	100652e2 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100652ba:	4601      	mov	r1, r0
100652bc:	7285      	strb	r5, [r0, #10]
100652be:	2004      	movs	r0, #4
100652c0:	7248      	strb	r0, [r1, #9]
100652c2:	200b      	movs	r0, #11
100652c4:	7208      	strb	r0, [r1, #8]
100652c6:	2000      	movs	r0, #0
100652c8:	71c8      	strb	r0, [r1, #7]
100652ca:	2005      	movs	r0, #5
100652cc:	7188      	strb	r0, [r1, #6]
100652ce:	730e      	strb	r6, [r1, #12]
100652d0:	20ff      	movs	r0, #255	@ 0xff
100652d2:	7148      	strb	r0, [r1, #5]
100652d4:	2082      	movs	r0, #130	@ 0x82
100652d6:	7108      	strb	r0, [r1, #4]
100652d8:	0a28      	lsrs	r0, r5, #8
100652da:	72c8      	strb	r0, [r1, #11]
100652dc:	2002      	movs	r0, #2
100652de:	f7ee fcc4 	bl	10053c6a <aci_event_fifo_push>
100652e2:	4620      	mov	r0, r4
100652e4:	bd70      	pop	{r4, r5, r6, pc}
100652e6:	46c0      	nop			@ (mov r8, r8)

100652e8 <__arm_cp.8_0>:
100652e8:	200024b4 	.word	0x200024b4

100652ec <__arm_cp.8_1>:
100652ec:	20002468 	.word	0x20002468

100652f0 <__arm_cp.8_2>:
100652f0:	20002418 	.word	0x20002418

100652f4 <smp_pp1_pairing_packet_build>:
100652f4:	b510      	push	{r4, lr}
100652f6:	2407      	movs	r4, #7
100652f8:	8044      	strh	r4, [r0, #2]
100652fa:	6844      	ldr	r4, [r0, #4]
100652fc:	7221      	strb	r1, [r4, #8]
100652fe:	490b      	ldr	r1, [pc, #44]	@ (1006532c <__arm_cp.9_0>)
10065300:	6809      	ldr	r1, [r1, #0]
10065302:	2440      	movs	r4, #64	@ 0x40
10065304:	5d09      	ldrb	r1, [r1, r4]
10065306:	6844      	ldr	r4, [r0, #4]
10065308:	7261      	strb	r1, [r4, #9]
1006530a:	2101      	movs	r1, #1
1006530c:	4011      	ands	r1, r2
1006530e:	6842      	ldr	r2, [r0, #4]
10065310:	7291      	strb	r1, [r2, #10]
10065312:	6841      	ldr	r1, [r0, #4]
10065314:	72cb      	strb	r3, [r1, #11]
10065316:	6841      	ldr	r1, [r0, #4]
10065318:	9a02      	ldr	r2, [sp, #8]
1006531a:	730a      	strb	r2, [r1, #12]
1006531c:	6841      	ldr	r1, [r0, #4]
1006531e:	9a03      	ldr	r2, [sp, #12]
10065320:	734a      	strb	r2, [r1, #13]
10065322:	6840      	ldr	r0, [r0, #4]
10065324:	9904      	ldr	r1, [sp, #16]
10065326:	7381      	strb	r1, [r0, #14]
10065328:	bd10      	pop	{r4, pc}
1006532a:	46c0      	nop			@ (mov r8, r8)

1006532c <__arm_cp.9_0>:
1006532c:	200024b4 	.word	0x200024b4

10065330 <smp_pp1_per_rxp_pairing_request>:
10065330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065332:	460c      	mov	r4, r1
10065334:	4607      	mov	r7, r0
10065336:	2501      	movs	r5, #1
10065338:	4628      	mov	r0, r5
1006533a:	f7ff fe3b 	bl	10064fb4 <smp_pp1_get_next_free_pairing_idx>
1006533e:	2802      	cmp	r0, #2
10065340:	d901      	bls.n	10065346 <smp_pp1_per_rxp_pairing_request+0x16>
10065342:	2038      	movs	r0, #56	@ 0x38
10065344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065346:	4606      	mov	r6, r0
10065348:	4638      	mov	r0, r7
1006534a:	f7ff fe53 	bl	10064ff4 <smp_pp1_reqrsp_pdu_params_check>
1006534e:	2800      	cmp	r0, #0
10065350:	d010      	beq.n	10065374 <smp_pp1_per_rxp_pairing_request+0x44>
10065352:	4601      	mov	r1, r0
10065354:	4810      	ldr	r0, [pc, #64]	@ (10065398 <__arm_cp.1_0>)
10065356:	6800      	ldr	r0, [r0, #0]
10065358:	22b1      	movs	r2, #177	@ 0xb1
1006535a:	5c82      	ldrb	r2, [r0, r2]
1006535c:	2a00      	cmp	r2, #0
1006535e:	d003      	beq.n	10065368 <smp_pp1_per_rxp_pairing_request+0x38>
10065360:	30b1      	adds	r0, #177	@ 0xb1
10065362:	40b5      	lsls	r5, r6
10065364:	43aa      	bics	r2, r5
10065366:	7002      	strb	r2, [r0, #0]
10065368:	2200      	movs	r2, #0
1006536a:	2301      	movs	r3, #1
1006536c:	4620      	mov	r0, r4
1006536e:	f7ff fe0b 	bl	10064f88 <smp_pp3_pairing_failed_send>
10065372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065374:	7526      	strb	r6, [r4, #20]
10065376:	2101      	movs	r1, #1
10065378:	4638      	mov	r0, r7
1006537a:	4622      	mov	r2, r4
1006537c:	f7ff fe5e 	bl	1006503c <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10065380:	4620      	mov	r0, r4
10065382:	f7ff ff73 	bl	1006526c <smp_pp1_hndl_pairing_response_mode_through_event>
10065386:	2800      	cmp	r0, #0
10065388:	d001      	beq.n	1006538e <smp_pp1_per_rxp_pairing_request+0x5e>
1006538a:	2000      	movs	r0, #0
1006538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006538e:	4620      	mov	r0, r4
10065390:	f000 f804 	bl	1006539c <smp_pp1_per_send_pairing_response>
10065394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065396:	46c0      	nop			@ (mov r8, r8)

10065398 <__arm_cp.1_0>:
10065398:	200024b4 	.word	0x200024b4

1006539c <smp_pp1_per_send_pairing_response>:
1006539c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006539e:	b087      	sub	sp, #28
100653a0:	4604      	mov	r4, r0
100653a2:	a806      	add	r0, sp, #24
100653a4:	2600      	movs	r6, #0
100653a6:	7006      	strb	r6, [r0, #0]
100653a8:	8921      	ldrh	r1, [r4, #8]
100653aa:	220b      	movs	r2, #11
100653ac:	4630      	mov	r0, r6
100653ae:	f7ee f9e9 	bl	10053784 <ACL_pkt_get>
100653b2:	2800      	cmp	r0, #0
100653b4:	d01b      	beq.n	100653ee <smp_pp1_per_send_pairing_response+0x52>
100653b6:	9005      	str	r0, [sp, #20]
100653b8:	20b0      	movs	r0, #176	@ 0xb0
100653ba:	72a0      	strb	r0, [r4, #10]
100653bc:	75e6      	strb	r6, [r4, #23]
100653be:	7be0      	ldrb	r0, [r4, #15]
100653c0:	212f      	movs	r1, #47	@ 0x2f
100653c2:	4001      	ands	r1, r0
100653c4:	73e1      	strb	r1, [r4, #15]
100653c6:	4f43      	ldr	r7, [pc, #268]	@ (100654d4 <__arm_cp.2_0>)
100653c8:	683d      	ldr	r5, [r7, #0]
100653ca:	7d20      	ldrb	r0, [r4, #20]
100653cc:	2101      	movs	r1, #1
100653ce:	9104      	str	r1, [sp, #16]
100653d0:	f7ff fe0a 	bl	10064fe8 <smp_pp1_get_pairing_pdu_offset>
100653d4:	1940      	adds	r0, r0, r5
100653d6:	21b7      	movs	r1, #183	@ 0xb7
100653d8:	5c45      	ldrb	r5, [r0, r1]
100653da:	6838      	ldr	r0, [r7, #0]
100653dc:	2132      	movs	r1, #50	@ 0x32
100653de:	5c40      	ldrb	r0, [r0, r1]
100653e0:	2802      	cmp	r0, #2
100653e2:	d106      	bne.n	100653f2 <smp_pp1_per_send_pairing_response+0x56>
100653e4:	2008      	movs	r0, #8
100653e6:	4028      	ands	r0, r5
100653e8:	d103      	bne.n	100653f2 <smp_pp1_per_send_pairing_response+0x56>
100653ea:	2103      	movs	r1, #3
100653ec:	e051      	b.n	10065492 <smp_pp1_per_send_pairing_response+0xf6>
100653ee:	2688      	movs	r6, #136	@ 0x88
100653f0:	e061      	b.n	100654b6 <smp_pp1_per_send_pairing_response+0x11a>
100653f2:	7e20      	ldrb	r0, [r4, #24]
100653f4:	07c0      	lsls	r0, r0, #31
100653f6:	d105      	bne.n	10065404 <smp_pp1_per_send_pairing_response+0x68>
100653f8:	af06      	add	r7, sp, #24
100653fa:	4638      	mov	r0, r7
100653fc:	f7ff ff1c 	bl	10065238 <smp_pp1_auth_req_field_generate_from_device_config>
10065400:	7838      	ldrb	r0, [r7, #0]
10065402:	e002      	b.n	1006540a <smp_pp1_per_send_pairing_response+0x6e>
10065404:	7d60      	ldrb	r0, [r4, #21]
10065406:	a906      	add	r1, sp, #24
10065408:	7008      	strb	r0, [r1, #0]
1006540a:	4005      	ands	r5, r0
1006540c:	2018      	movs	r0, #24
1006540e:	4028      	ands	r0, r5
10065410:	7de1      	ldrb	r1, [r4, #23]
10065412:	4301      	orrs	r1, r0
10065414:	75e1      	strb	r1, [r4, #23]
10065416:	0708      	lsls	r0, r1, #28
10065418:	d401      	bmi.n	1006541e <smp_pp1_per_send_pairing_response+0x82>
1006541a:	27b4      	movs	r7, #180	@ 0xb4
1006541c:	e006      	b.n	1006542c <smp_pp1_per_send_pairing_response+0x90>
1006541e:	4620      	mov	r0, r4
10065420:	f000 fd31 	bl	10065e86 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>
10065424:	4601      	mov	r1, r0
10065426:	2800      	cmp	r0, #0
10065428:	d133      	bne.n	10065492 <smp_pp1_per_send_pairing_response+0xf6>
1006542a:	27b2      	movs	r7, #178	@ 0xb2
1006542c:	4620      	mov	r0, r4
1006542e:	f000 fcdf 	bl	10065df0 <smp_oob_check_is_remote_data_present>
10065432:	9806      	ldr	r0, [sp, #24]
10065434:	0741      	lsls	r1, r0, #29
10065436:	0fc9      	lsrs	r1, r1, #31
10065438:	73e1      	strb	r1, [r4, #15]
1006543a:	07c0      	lsls	r0, r0, #31
1006543c:	0f80      	lsrs	r0, r0, #30
1006543e:	73a0      	strb	r0, [r4, #14]
10065440:	4620      	mov	r0, r4
10065442:	f7ff fe0d 	bl	10065060 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
10065446:	4620      	mov	r0, r4
10065448:	f7ff fe56 	bl	100650f8 <smp_pp1_key_generation_method_selection>
1006544c:	4601      	mov	r1, r0
1006544e:	2800      	cmp	r0, #0
10065450:	d11f      	bne.n	10065492 <smp_pp1_per_send_pairing_response+0xf6>
10065452:	7ce0      	ldrb	r0, [r4, #19]
10065454:	2802      	cmp	r0, #2
10065456:	d104      	bne.n	10065462 <smp_pp1_per_send_pairing_response+0xc6>
10065458:	7be0      	ldrb	r0, [r4, #15]
1006545a:	06c0      	lsls	r0, r0, #27
1006545c:	d401      	bmi.n	10065462 <smp_pp1_per_send_pairing_response+0xc6>
1006545e:	204d      	movs	r0, #77	@ 0x4d
10065460:	43c7      	mvns	r7, r0
10065462:	481c      	ldr	r0, [pc, #112]	@ (100654d4 <__arm_cp.2_0>)
10065464:	6800      	ldr	r0, [r0, #0]
10065466:	2135      	movs	r1, #53	@ 0x35
10065468:	5c40      	ldrb	r0, [r0, r1]
1006546a:	a906      	add	r1, sp, #24
1006546c:	780b      	ldrb	r3, [r1, #0]
1006546e:	7b62      	ldrb	r2, [r4, #13]
10065470:	7c61      	ldrb	r1, [r4, #17]
10065472:	7ca5      	ldrb	r5, [r4, #18]
10065474:	9000      	str	r0, [sp, #0]
10065476:	9101      	str	r1, [sp, #4]
10065478:	9502      	str	r5, [sp, #8]
1006547a:	2102      	movs	r1, #2
1006547c:	9d05      	ldr	r5, [sp, #20]
1006547e:	4628      	mov	r0, r5
10065480:	f7ff ff38 	bl	100652f4 <smp_pp1_pairing_packet_build>
10065484:	4620      	mov	r0, r4
10065486:	4629      	mov	r1, r5
10065488:	f7ff fb82 	bl	10064b90 <smp_dep_l2c_send_acl_packet>
1006548c:	4601      	mov	r1, r0
1006548e:	2800      	cmp	r0, #0
10065490:	d014      	beq.n	100654bc <smp_pp1_per_send_pairing_response+0x120>
10065492:	4810      	ldr	r0, [pc, #64]	@ (100654d4 <__arm_cp.2_0>)
10065494:	6800      	ldr	r0, [r0, #0]
10065496:	22b1      	movs	r2, #177	@ 0xb1
10065498:	5c82      	ldrb	r2, [r0, r2]
1006549a:	2a00      	cmp	r2, #0
1006549c:	d005      	beq.n	100654aa <smp_pp1_per_send_pairing_response+0x10e>
1006549e:	30b1      	adds	r0, #177	@ 0xb1
100654a0:	7d23      	ldrb	r3, [r4, #20]
100654a2:	9d04      	ldr	r5, [sp, #16]
100654a4:	409d      	lsls	r5, r3
100654a6:	43aa      	bics	r2, r5
100654a8:	7002      	strb	r2, [r0, #0]
100654aa:	2301      	movs	r3, #1
100654ac:	4620      	mov	r0, r4
100654ae:	9a05      	ldr	r2, [sp, #20]
100654b0:	f7ff fd6a 	bl	10064f88 <smp_pp3_pairing_failed_send>
100654b4:	4606      	mov	r6, r0
100654b6:	4630      	mov	r0, r6
100654b8:	b007      	add	sp, #28
100654ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100654bc:	7ae0      	ldrb	r0, [r4, #11]
100654be:	21f8      	movs	r1, #248	@ 0xf8
100654c0:	4001      	ands	r1, r0
100654c2:	72e1      	strb	r1, [r4, #11]
100654c4:	9805      	ldr	r0, [sp, #20]
100654c6:	4631      	mov	r1, r6
100654c8:	4622      	mov	r2, r4
100654ca:	f7ff fdb7 	bl	1006503c <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
100654ce:	72a7      	strb	r7, [r4, #10]
100654d0:	e7f1      	b.n	100654b6 <smp_pp1_per_send_pairing_response+0x11a>
100654d2:	46c0      	nop			@ (mov r8, r8)

100654d4 <__arm_cp.2_0>:
100654d4:	200024b4 	.word	0x200024b4

100654d8 <smp_pp2_per_rx_process_pairing_confirm>:
100654d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100654da:	b089      	sub	sp, #36	@ 0x24
100654dc:	460c      	mov	r4, r1
100654de:	4607      	mov	r7, r0
100654e0:	8909      	ldrh	r1, [r1, #8]
100654e2:	2500      	movs	r5, #0
100654e4:	2215      	movs	r2, #21
100654e6:	4628      	mov	r0, r5
100654e8:	f7ee f94c 	bl	10053784 <ACL_pkt_get>
100654ec:	2800      	cmp	r0, #0
100654ee:	d013      	beq.n	10065518 <smp_pp2_per_rx_process_pairing_confirm+0x40>
100654f0:	4606      	mov	r6, r0
100654f2:	2f00      	cmp	r7, #0
100654f4:	d006      	beq.n	10065504 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
100654f6:	4623      	mov	r3, r4
100654f8:	3328      	adds	r3, #40	@ 0x28
100654fa:	2105      	movs	r1, #5
100654fc:	2210      	movs	r2, #16
100654fe:	4638      	mov	r0, r7
10065500:	f7ee f97e 	bl	10053800 <ACL_pkt_read>
10065504:	7de0      	ldrb	r0, [r4, #23]
10065506:	0700      	lsls	r0, r0, #28
10065508:	d408      	bmi.n	1006551c <smp_pp2_per_rx_process_pairing_confirm+0x44>
1006550a:	4621      	mov	r1, r4
1006550c:	3148      	adds	r1, #72	@ 0x48
1006550e:	aa05      	add	r2, sp, #20
10065510:	4620      	mov	r0, r4
10065512:	f000 f831 	bl	10065578 <smp_pp2_per_lep_confirm_value_compute>
10065516:	e007      	b.n	10065528 <smp_pp2_per_rx_process_pairing_confirm+0x50>
10065518:	2088      	movs	r0, #136	@ 0x88
1006551a:	e019      	b.n	10065550 <smp_pp2_per_rx_process_pairing_confirm+0x78>
1006551c:	a805      	add	r0, sp, #20
1006551e:	9002      	str	r0, [sp, #8]
10065520:	9401      	str	r4, [sp, #4]
10065522:	a801      	add	r0, sp, #4
10065524:	f000 f961 	bl	100657ea <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>
10065528:	2011      	movs	r0, #17
1006552a:	8070      	strh	r0, [r6, #2]
1006552c:	6870      	ldr	r0, [r6, #4]
1006552e:	2103      	movs	r1, #3
10065530:	7201      	strb	r1, [r0, #8]
10065532:	2105      	movs	r1, #5
10065534:	2210      	movs	r2, #16
10065536:	ab05      	add	r3, sp, #20
10065538:	4630      	mov	r0, r6
1006553a:	f7ee f983 	bl	10053844 <ACL_pkt_write>
1006553e:	4620      	mov	r0, r4
10065540:	4631      	mov	r1, r6
10065542:	f7ff fb25 	bl	10064b90 <smp_dep_l2c_send_acl_packet>
10065546:	2800      	cmp	r0, #0
10065548:	d102      	bne.n	10065550 <smp_pp2_per_rx_process_pairing_confirm+0x78>
1006554a:	20b6      	movs	r0, #182	@ 0xb6
1006554c:	72a0      	strb	r0, [r4, #10]
1006554e:	4628      	mov	r0, r5
10065550:	b009      	add	sp, #36	@ 0x24
10065552:	bdf0      	pop	{r4, r5, r6, r7, pc}

10065554 <smp_pp2_per_auth_stage_1_start>:
10065554:	b510      	push	{r4, lr}
10065556:	4604      	mov	r4, r0
10065558:	3048      	adds	r0, #72	@ 0x48
1006555a:	2110      	movs	r1, #16
1006555c:	2200      	movs	r2, #0
1006555e:	f7fc f958 	bl	10061812 <HAL_Generate_Random_Bytes_To>
10065562:	7de0      	ldrb	r0, [r4, #23]
10065564:	0700      	lsls	r0, r0, #28
10065566:	d402      	bmi.n	1006556e <smp_pp2_per_auth_stage_1_start+0x1a>
10065568:	20b5      	movs	r0, #181	@ 0xb5
1006556a:	72a0      	strb	r0, [r4, #10]
1006556c:	bd10      	pop	{r4, pc}
1006556e:	4620      	mov	r0, r4
10065570:	f000 f93a 	bl	100657e8 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>
10065574:	bd10      	pop	{r4, pc}
	...

10065578 <smp_pp2_per_lep_confirm_value_compute>:
10065578:	b5f0      	push	{r4, r5, r6, r7, lr}
1006557a:	b09b      	sub	sp, #108	@ 0x6c
1006557c:	4614      	mov	r4, r2
1006557e:	9106      	str	r1, [sp, #24]
10065580:	4607      	mov	r7, r0
10065582:	ae0f      	add	r6, sp, #60	@ 0x3c
10065584:	2500      	movs	r5, #0
10065586:	222e      	movs	r2, #46	@ 0x2e
10065588:	4630      	mov	r0, r6
1006558a:	4629      	mov	r1, r5
1006558c:	f7eb fd94 	bl	100510b8 <BLEPLAT_MemSet>
10065590:	4630      	mov	r0, r6
10065592:	3010      	adds	r0, #16
10065594:	2210      	movs	r2, #16
10065596:	9906      	ldr	r1, [sp, #24]
10065598:	f7eb fd7e 	bl	10051098 <BLEPLAT_MemCpy>
1006559c:	3620      	adds	r6, #32
1006559e:	7cf8      	ldrb	r0, [r7, #19]
100655a0:	2803      	cmp	r0, #3
100655a2:	d00d      	beq.n	100655c0 <smp_pp2_per_lep_confirm_value_compute+0x48>
100655a4:	2802      	cmp	r0, #2
100655a6:	d112      	bne.n	100655ce <smp_pp2_per_lep_confirm_value_compute+0x56>
100655a8:	4844      	ldr	r0, [pc, #272]	@ (100656bc <__arm_cp.16_0>)
100655aa:	6800      	ldr	r0, [r0, #0]
100655ac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
100655ae:	a90f      	add	r1, sp, #60	@ 0x3c
100655b0:	7008      	strb	r0, [r1, #0]
100655b2:	0a02      	lsrs	r2, r0, #8
100655b4:	704a      	strb	r2, [r1, #1]
100655b6:	0c02      	lsrs	r2, r0, #16
100655b8:	708a      	strb	r2, [r1, #2]
100655ba:	0e00      	lsrs	r0, r0, #24
100655bc:	70c8      	strb	r0, [r1, #3]
100655be:	e006      	b.n	100655ce <smp_pp2_per_lep_confirm_value_compute+0x56>
100655c0:	483e      	ldr	r0, [pc, #248]	@ (100656bc <__arm_cp.16_0>)
100655c2:	6801      	ldr	r1, [r0, #0]
100655c4:	3144      	adds	r1, #68	@ 0x44
100655c6:	a80f      	add	r0, sp, #60	@ 0x3c
100655c8:	2210      	movs	r2, #16
100655ca:	f7eb fd65 	bl	10051098 <BLEPLAT_MemCpy>
100655ce:	7d38      	ldrb	r0, [r7, #20]
100655d0:	2101      	movs	r1, #1
100655d2:	9105      	str	r1, [sp, #20]
100655d4:	f7ff fd08 	bl	10064fe8 <smp_pp1_get_pairing_pdu_offset>
100655d8:	9002      	str	r0, [sp, #8]
100655da:	7d38      	ldrb	r0, [r7, #20]
100655dc:	4629      	mov	r1, r5
100655de:	f7ff fd03 	bl	10064fe8 <smp_pp1_get_pairing_pdu_offset>
100655e2:	9001      	str	r0, [sp, #4]
100655e4:	2061      	movs	r0, #97	@ 0x61
100655e6:	5c38      	ldrb	r0, [r7, r0]
100655e8:	71f0      	strb	r0, [r6, #7]
100655ea:	9606      	str	r6, [sp, #24]
100655ec:	ae0f      	add	r6, sp, #60	@ 0x3c
100655ee:	4630      	mov	r0, r6
100655f0:	3028      	adds	r0, #40	@ 0x28
100655f2:	4639      	mov	r1, r7
100655f4:	3162      	adds	r1, #98	@ 0x62
100655f6:	2206      	movs	r2, #6
100655f8:	9200      	str	r2, [sp, #0]
100655fa:	4b31      	ldr	r3, [pc, #196]	@ (100656c0 <__arm_cp.16_1>)
100655fc:	9004      	str	r0, [sp, #16]
100655fe:	4798      	blx	r3
10065600:	7878      	ldrb	r0, [r7, #1]
10065602:	9906      	ldr	r1, [sp, #24]
10065604:	7008      	strb	r0, [r1, #0]
10065606:	4630      	mov	r0, r6
10065608:	3021      	adds	r0, #33	@ 0x21
1006560a:	1cb9      	adds	r1, r7, #2
1006560c:	9003      	str	r0, [sp, #12]
1006560e:	9a00      	ldr	r2, [sp, #0]
10065610:	4b2b      	ldr	r3, [pc, #172]	@ (100656c0 <__arm_cp.16_1>)
10065612:	4798      	blx	r3
10065614:	4829      	ldr	r0, [pc, #164]	@ (100656bc <__arm_cp.16_0>)
10065616:	6800      	ldr	r0, [r0, #0]
10065618:	9901      	ldr	r1, [sp, #4]
1006561a:	1841      	adds	r1, r0, r1
1006561c:	31b4      	adds	r1, #180	@ 0xb4
1006561e:	af0b      	add	r7, sp, #44	@ 0x2c
10065620:	4638      	mov	r0, r7
10065622:	3009      	adds	r0, #9
10065624:	2207      	movs	r2, #7
10065626:	9201      	str	r2, [sp, #4]
10065628:	4b25      	ldr	r3, [pc, #148]	@ (100656c0 <__arm_cp.16_1>)
1006562a:	4798      	blx	r3
1006562c:	4823      	ldr	r0, [pc, #140]	@ (100656bc <__arm_cp.16_0>)
1006562e:	6800      	ldr	r0, [r0, #0]
10065630:	9902      	ldr	r1, [sp, #8]
10065632:	1841      	adds	r1, r0, r1
10065634:	31b4      	adds	r1, #180	@ 0xb4
10065636:	1cb8      	adds	r0, r7, #2
10065638:	9a01      	ldr	r2, [sp, #4]
1006563a:	4b21      	ldr	r3, [pc, #132]	@ (100656c0 <__arm_cp.16_1>)
1006563c:	4798      	blx	r3
1006563e:	1c78      	adds	r0, r7, #1
10065640:	9906      	ldr	r1, [sp, #24]
10065642:	1dc9      	adds	r1, r1, #7
10065644:	9a05      	ldr	r2, [sp, #20]
10065646:	4b1e      	ldr	r3, [pc, #120]	@ (100656c0 <__arm_cp.16_1>)
10065648:	4798      	blx	r3
1006564a:	4b1d      	ldr	r3, [pc, #116]	@ (100656c0 <__arm_cp.16_1>)
1006564c:	4638      	mov	r0, r7
1006564e:	9906      	ldr	r1, [sp, #24]
10065650:	9a05      	ldr	r2, [sp, #20]
10065652:	4798      	blx	r3
10065654:	3610      	adds	r6, #16
10065656:	2d10      	cmp	r5, #16
10065658:	d007      	beq.n	1006566a <smp_pp2_per_lep_confirm_value_compute+0xf2>
1006565a:	5d70      	ldrb	r0, [r6, r5]
1006565c:	a90b      	add	r1, sp, #44	@ 0x2c
1006565e:	5d49      	ldrb	r1, [r1, r5]
10065660:	4041      	eors	r1, r0
10065662:	a807      	add	r0, sp, #28
10065664:	5541      	strb	r1, [r0, r5]
10065666:	1c6d      	adds	r5, r5, #1
10065668:	e7f5      	b.n	10065656 <smp_pp2_per_lep_confirm_value_compute+0xde>
1006566a:	a80f      	add	r0, sp, #60	@ 0x3c
1006566c:	a907      	add	r1, sp, #28
1006566e:	4622      	mov	r2, r4
10065670:	f7f2 fc54 	bl	10057f1c <hci_le_encrypt>
10065674:	ae0b      	add	r6, sp, #44	@ 0x2c
10065676:	2500      	movs	r5, #0
10065678:	2210      	movs	r2, #16
1006567a:	4630      	mov	r0, r6
1006567c:	4629      	mov	r1, r5
1006567e:	f7eb fd1b 	bl	100510b8 <BLEPLAT_MemSet>
10065682:	2706      	movs	r7, #6
10065684:	4630      	mov	r0, r6
10065686:	9904      	ldr	r1, [sp, #16]
10065688:	463a      	mov	r2, r7
1006568a:	f7eb fd05 	bl	10051098 <BLEPLAT_MemCpy>
1006568e:	1db0      	adds	r0, r6, #6
10065690:	9903      	ldr	r1, [sp, #12]
10065692:	463a      	mov	r2, r7
10065694:	f7eb fd00 	bl	10051098 <BLEPLAT_MemCpy>
10065698:	2d10      	cmp	r5, #16
1006569a:	d007      	beq.n	100656ac <smp_pp2_per_lep_confirm_value_compute+0x134>
1006569c:	5d60      	ldrb	r0, [r4, r5]
1006569e:	a90b      	add	r1, sp, #44	@ 0x2c
100656a0:	5d49      	ldrb	r1, [r1, r5]
100656a2:	4041      	eors	r1, r0
100656a4:	a807      	add	r0, sp, #28
100656a6:	5541      	strb	r1, [r0, r5]
100656a8:	1c6d      	adds	r5, r5, #1
100656aa:	e7f5      	b.n	10065698 <smp_pp2_per_lep_confirm_value_compute+0x120>
100656ac:	a80f      	add	r0, sp, #60	@ 0x3c
100656ae:	a907      	add	r1, sp, #28
100656b0:	4622      	mov	r2, r4
100656b2:	f7f2 fc33 	bl	10057f1c <hci_le_encrypt>
100656b6:	b01b      	add	sp, #108	@ 0x6c
100656b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100656ba:	46c0      	nop			@ (mov r8, r8)

100656bc <__arm_cp.16_0>:
100656bc:	200024b4 	.word	0x200024b4

100656c0 <__arm_cp.16_1>:
100656c0:	10051099 	.word	0x10051099

100656c4 <smp_pp2_per_rx_process_pairing_random>:
100656c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100656c6:	b08b      	sub	sp, #44	@ 0x2c
100656c8:	460d      	mov	r5, r1
100656ca:	4606      	mov	r6, r0
100656cc:	2400      	movs	r4, #0
100656ce:	9402      	str	r4, [sp, #8]
100656d0:	8909      	ldrh	r1, [r1, #8]
100656d2:	2215      	movs	r2, #21
100656d4:	4620      	mov	r0, r4
100656d6:	f7ee f855 	bl	10053784 <ACL_pkt_get>
100656da:	2800      	cmp	r0, #0
100656dc:	d020      	beq.n	10065720 <smp_pp2_per_rx_process_pairing_random+0x5c>
100656de:	4607      	mov	r7, r0
100656e0:	462b      	mov	r3, r5
100656e2:	3338      	adds	r3, #56	@ 0x38
100656e4:	2105      	movs	r1, #5
100656e6:	2210      	movs	r2, #16
100656e8:	4630      	mov	r0, r6
100656ea:	461e      	mov	r6, r3
100656ec:	f7ee f888 	bl	10053800 <ACL_pkt_read>
100656f0:	7de8      	ldrb	r0, [r5, #23]
100656f2:	0700      	lsls	r0, r0, #28
100656f4:	d416      	bmi.n	10065724 <smp_pp2_per_rx_process_pairing_random+0x60>
100656f6:	9400      	str	r4, [sp, #0]
100656f8:	4634      	mov	r4, r6
100656fa:	ae03      	add	r6, sp, #12
100656fc:	4628      	mov	r0, r5
100656fe:	4621      	mov	r1, r4
10065700:	4632      	mov	r2, r6
10065702:	f7ff ff39 	bl	10065578 <smp_pp2_per_lep_confirm_value_compute>
10065706:	4629      	mov	r1, r5
10065708:	3128      	adds	r1, #40	@ 0x28
1006570a:	2210      	movs	r2, #16
1006570c:	4630      	mov	r0, r6
1006570e:	4626      	mov	r6, r4
10065710:	9c00      	ldr	r4, [sp, #0]
10065712:	f7eb fce1 	bl	100510d8 <BLEPLAT_MemCmp>
10065716:	a901      	add	r1, sp, #4
10065718:	22bc      	movs	r2, #188	@ 0xbc
1006571a:	700a      	strb	r2, [r1, #0]
1006571c:	9002      	str	r0, [sp, #8]
1006571e:	e00c      	b.n	1006573a <smp_pp2_per_rx_process_pairing_random+0x76>
10065720:	2488      	movs	r4, #136	@ 0x88
10065722:	e05b      	b.n	100657dc <smp_pp2_per_rx_process_pairing_random+0x118>
10065724:	a801      	add	r0, sp, #4
10065726:	900a      	str	r0, [sp, #40]	@ 0x28
10065728:	a802      	add	r0, sp, #8
1006572a:	9009      	str	r0, [sp, #36]	@ 0x24
1006572c:	a803      	add	r0, sp, #12
1006572e:	9008      	str	r0, [sp, #32]
10065730:	9507      	str	r5, [sp, #28]
10065732:	a807      	add	r0, sp, #28
10065734:	f000 f85a 	bl	100657ec <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>
10065738:	9802      	ldr	r0, [sp, #8]
1006573a:	2800      	cmp	r0, #0
1006573c:	d006      	beq.n	1006574c <smp_pp2_per_rx_process_pairing_random+0x88>
1006573e:	2104      	movs	r1, #4
10065740:	2301      	movs	r3, #1
10065742:	4628      	mov	r0, r5
10065744:	463a      	mov	r2, r7
10065746:	f7ff fc1f 	bl	10064f88 <smp_pp3_pairing_failed_send>
1006574a:	e01b      	b.n	10065784 <smp_pp2_per_rx_process_pairing_random+0xc0>
1006574c:	2011      	movs	r0, #17
1006574e:	8078      	strh	r0, [r7, #2]
10065750:	6878      	ldr	r0, [r7, #4]
10065752:	2104      	movs	r1, #4
10065754:	7201      	strb	r1, [r0, #8]
10065756:	462b      	mov	r3, r5
10065758:	3348      	adds	r3, #72	@ 0x48
1006575a:	2105      	movs	r1, #5
1006575c:	2210      	movs	r2, #16
1006575e:	4638      	mov	r0, r7
10065760:	f7ee f870 	bl	10053844 <ACL_pkt_write>
10065764:	4628      	mov	r0, r5
10065766:	4639      	mov	r1, r7
10065768:	f7ff fa12 	bl	10064b90 <smp_dep_l2c_send_acl_packet>
1006576c:	2800      	cmp	r0, #0
1006576e:	d109      	bne.n	10065784 <smp_pp2_per_rx_process_pairing_random+0xc0>
10065770:	9801      	ldr	r0, [sp, #4]
10065772:	72a8      	strb	r0, [r5, #10]
10065774:	481b      	ldr	r0, [pc, #108]	@ (100657e4 <__arm_cp.17_0>)
10065776:	6800      	ldr	r0, [r0, #0]
10065778:	2135      	movs	r1, #53	@ 0x35
1006577a:	5c40      	ldrb	r0, [r0, r1]
1006577c:	7c29      	ldrb	r1, [r5, #16]
1006577e:	4281      	cmp	r1, r0
10065780:	d900      	bls.n	10065784 <smp_pp2_per_rx_process_pairing_random+0xc0>
10065782:	7428      	strb	r0, [r5, #16]
10065784:	9802      	ldr	r0, [sp, #8]
10065786:	2800      	cmp	r0, #0
10065788:	d128      	bne.n	100657dc <smp_pp2_per_rx_process_pairing_random+0x118>
1006578a:	7de8      	ldrb	r0, [r5, #23]
1006578c:	0700      	lsls	r0, r0, #28
1006578e:	d425      	bmi.n	100657dc <smp_pp2_per_rx_process_pairing_random+0x118>
10065790:	a807      	add	r0, sp, #28
10065792:	2400      	movs	r4, #0
10065794:	2210      	movs	r2, #16
10065796:	4621      	mov	r1, r4
10065798:	f7eb fc8e 	bl	100510b8 <BLEPLAT_MemSet>
1006579c:	7ce8      	ldrb	r0, [r5, #19]
1006579e:	2803      	cmp	r0, #3
100657a0:	d00d      	beq.n	100657be <smp_pp2_per_rx_process_pairing_random+0xfa>
100657a2:	2802      	cmp	r0, #2
100657a4:	d112      	bne.n	100657cc <smp_pp2_per_rx_process_pairing_random+0x108>
100657a6:	480f      	ldr	r0, [pc, #60]	@ (100657e4 <__arm_cp.17_0>)
100657a8:	6800      	ldr	r0, [r0, #0]
100657aa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
100657ac:	a907      	add	r1, sp, #28
100657ae:	7008      	strb	r0, [r1, #0]
100657b0:	0a02      	lsrs	r2, r0, #8
100657b2:	704a      	strb	r2, [r1, #1]
100657b4:	0c02      	lsrs	r2, r0, #16
100657b6:	708a      	strb	r2, [r1, #2]
100657b8:	0e00      	lsrs	r0, r0, #24
100657ba:	70c8      	strb	r0, [r1, #3]
100657bc:	e006      	b.n	100657cc <smp_pp2_per_rx_process_pairing_random+0x108>
100657be:	4809      	ldr	r0, [pc, #36]	@ (100657e4 <__arm_cp.17_0>)
100657c0:	6801      	ldr	r1, [r0, #0]
100657c2:	3144      	adds	r1, #68	@ 0x44
100657c4:	a807      	add	r0, sp, #28
100657c6:	2210      	movs	r2, #16
100657c8:	f7eb fc66 	bl	10051098 <BLEPLAT_MemCpy>
100657cc:	4629      	mov	r1, r5
100657ce:	3148      	adds	r1, #72	@ 0x48
100657d0:	3528      	adds	r5, #40	@ 0x28
100657d2:	a807      	add	r0, sp, #28
100657d4:	4632      	mov	r2, r6
100657d6:	462b      	mov	r3, r5
100657d8:	f7fa fcd0 	bl	1006017c <smp_crt_s1_generate_stk>
100657dc:	4620      	mov	r0, r4
100657de:	b00b      	add	sp, #44	@ 0x2c
100657e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100657e2:	46c0      	nop			@ (mov r8, r8)

100657e4 <__arm_cp.17_0>:
100657e4:	200024b4 	.word	0x200024b4

100657e8 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>:
100657e8:	4770      	bx	lr

100657ea <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>:
100657ea:	4770      	bx	lr

100657ec <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>:
100657ec:	4770      	bx	lr

100657ee <smp_pp3_keys_distribution_start>:
100657ee:	b580      	push	{r7, lr}
100657f0:	2901      	cmp	r1, #1
100657f2:	d111      	bne.n	10065818 <smp_pp3_keys_distribution_start+0x2a>
100657f4:	7c42      	ldrb	r2, [r0, #17]
100657f6:	0753      	lsls	r3, r2, #29
100657f8:	d005      	beq.n	10065806 <smp_pp3_keys_distribution_start+0x18>
100657fa:	7dc3      	ldrb	r3, [r0, #23]
100657fc:	071b      	lsls	r3, r3, #28
100657fe:	d51d      	bpl.n	1006583c <smp_pp3_keys_distribution_start+0x4e>
10065800:	2306      	movs	r3, #6
10065802:	401a      	ands	r2, r3
10065804:	d11a      	bne.n	1006583c <smp_pp3_keys_distribution_start+0x4e>
10065806:	2260      	movs	r2, #96	@ 0x60
10065808:	5c83      	ldrb	r3, [r0, r2]
1006580a:	2201      	movs	r2, #1
1006580c:	401a      	ands	r2, r3
1006580e:	2900      	cmp	r1, #0
10065810:	d006      	beq.n	10065820 <smp_pp3_keys_distribution_start+0x32>
10065812:	2a00      	cmp	r2, #0
10065814:	d119      	bne.n	1006584a <smp_pp3_keys_distribution_start+0x5c>
10065816:	e003      	b.n	10065820 <smp_pp3_keys_distribution_start+0x32>
10065818:	2900      	cmp	r1, #0
1006581a:	d000      	beq.n	1006581e <smp_pp3_keys_distribution_start+0x30>
1006581c:	bd80      	pop	{r7, pc}
1006581e:	2200      	movs	r2, #0
10065820:	7c81      	ldrb	r1, [r0, #18]
10065822:	07cb      	lsls	r3, r1, #31
10065824:	d004      	beq.n	10065830 <smp_pp3_keys_distribution_start+0x42>
10065826:	7dc3      	ldrb	r3, [r0, #23]
10065828:	071b      	lsls	r3, r3, #28
1006582a:	d401      	bmi.n	10065830 <smp_pp3_keys_distribution_start+0x42>
1006582c:	21d1      	movs	r1, #209	@ 0xd1
1006582e:	e009      	b.n	10065844 <smp_pp3_keys_distribution_start+0x56>
10065830:	078b      	lsls	r3, r1, #30
10065832:	d406      	bmi.n	10065842 <smp_pp3_keys_distribution_start+0x54>
10065834:	0749      	lsls	r1, r1, #29
10065836:	d508      	bpl.n	1006584a <smp_pp3_keys_distribution_start+0x5c>
10065838:	21d5      	movs	r1, #213	@ 0xd5
1006583a:	e003      	b.n	10065844 <smp_pp3_keys_distribution_start+0x56>
1006583c:	21d0      	movs	r1, #208	@ 0xd0
1006583e:	7281      	strb	r1, [r0, #10]
10065840:	bd80      	pop	{r7, pc}
10065842:	21d3      	movs	r1, #211	@ 0xd3
10065844:	7281      	strb	r1, [r0, #10]
10065846:	2a00      	cmp	r2, #0
10065848:	d002      	beq.n	10065850 <smp_pp3_keys_distribution_start+0x62>
1006584a:	f000 f804 	bl	10065856 <smp_pp3_keys_distribution_completed>
1006584e:	bd80      	pop	{r7, pc}
10065850:	f000 f816 	bl	10065880 <smp_pp3_keys_distribution_send>
10065854:	bd80      	pop	{r7, pc}

10065856 <smp_pp3_keys_distribution_completed>:
10065856:	b580      	push	{r7, lr}
10065858:	2160      	movs	r1, #96	@ 0x60
1006585a:	5c41      	ldrb	r1, [r0, r1]
1006585c:	07c9      	lsls	r1, r1, #31
1006585e:	d106      	bne.n	1006586e <smp_pp3_keys_distribution_completed+0x18>
10065860:	2111      	movs	r1, #17
10065862:	5641      	ldrsb	r1, [r0, r1]
10065864:	2900      	cmp	r1, #0
10065866:	d502      	bpl.n	1006586e <smp_pp3_keys_distribution_completed+0x18>
10065868:	7e81      	ldrb	r1, [r0, #26]
1006586a:	068a      	lsls	r2, r1, #26
1006586c:	d402      	bmi.n	10065874 <smp_pp3_keys_distribution_completed+0x1e>
1006586e:	f7ff fad3 	bl	10064e18 <smp_pp3_pairing_completed_successful>
10065872:	bd80      	pop	{r7, pc}
10065874:	2204      	movs	r2, #4
10065876:	4311      	orrs	r1, r2
10065878:	7681      	strb	r1, [r0, #26]
1006587a:	f7ff faca 	bl	10064e12 <smp_start_encryption_ucfg_weak>
1006587e:	bd80      	pop	{r7, pc}

10065880 <smp_pp3_keys_distribution_send>:
10065880:	b5f0      	push	{r4, r5, r6, r7, lr}
10065882:	b089      	sub	sp, #36	@ 0x24
10065884:	4604      	mov	r4, r0
10065886:	a808      	add	r0, sp, #32
10065888:	2600      	movs	r6, #0
1006588a:	8006      	strh	r6, [r0, #0]
1006588c:	8921      	ldrh	r1, [r4, #8]
1006588e:	2215      	movs	r2, #21
10065890:	4630      	mov	r0, r6
10065892:	f7ed ff77 	bl	10053784 <ACL_pkt_get>
10065896:	2800      	cmp	r0, #0
10065898:	d02d      	beq.n	100658f6 <smp_pp3_keys_distribution_send+0x76>
1006589a:	4605      	mov	r5, r0
1006589c:	2060      	movs	r0, #96	@ 0x60
1006589e:	5c20      	ldrb	r0, [r4, r0]
100658a0:	06c0      	lsls	r0, r0, #27
100658a2:	d40b      	bmi.n	100658bc <smp_pp3_keys_distribution_send+0x3c>
100658a4:	4627      	mov	r7, r4
100658a6:	3760      	adds	r7, #96	@ 0x60
100658a8:	4620      	mov	r0, r4
100658aa:	301c      	adds	r0, #28
100658ac:	2102      	movs	r1, #2
100658ae:	2200      	movs	r2, #0
100658b0:	f7fb ffaf 	bl	10061812 <HAL_Generate_Random_Bytes_To>
100658b4:	7838      	ldrb	r0, [r7, #0]
100658b6:	2110      	movs	r1, #16
100658b8:	4301      	orrs	r1, r0
100658ba:	7039      	strb	r1, [r7, #0]
100658bc:	7aa0      	ldrb	r0, [r4, #10]
100658be:	38d1      	subs	r0, #209	@ 0xd1
100658c0:	2804      	cmp	r0, #4
100658c2:	d875      	bhi.n	100659b0 <smp_pp3_keys_distribution_send+0x130>
100658c4:	4478      	add	r0, pc
100658c6:	7900      	ldrb	r0, [r0, #4]
100658c8:	0040      	lsls	r0, r0, #1
100658ca:	4487      	add	pc, r0
100658cc:	4e381902 	.word	0x4e381902
100658d0:	0060      	.short	0x0060
100658d2:	483c      	ldr	r0, [pc, #240]	@ (100659c4 <__arm_cp.2_0>)
100658d4:	6800      	ldr	r0, [r0, #0]
100658d6:	4621      	mov	r1, r4
100658d8:	311c      	adds	r1, #28
100658da:	3008      	adds	r0, #8
100658dc:	aa08      	add	r2, sp, #32
100658de:	ae04      	add	r6, sp, #16
100658e0:	4633      	mov	r3, r6
100658e2:	f7fa fbcd 	bl	10060080 <smp_crt_diversify>
100658e6:	6868      	ldr	r0, [r5, #4]
100658e8:	2106      	movs	r1, #6
100658ea:	7201      	strb	r1, [r0, #8]
100658ec:	2011      	movs	r0, #17
100658ee:	8068      	strh	r0, [r5, #2]
100658f0:	7c22      	ldrb	r2, [r4, #16]
100658f2:	2105      	movs	r1, #5
100658f4:	e058      	b.n	100659a8 <smp_pp3_keys_distribution_send+0x128>
100658f6:	200e      	movs	r0, #14
100658f8:	2100      	movs	r1, #0
100658fa:	f7fb fc75 	bl	100611e8 <tsk_wait_resource_idx>
100658fe:	e05f      	b.n	100659c0 <smp_pp3_keys_distribution_send+0x140>
10065900:	ae04      	add	r6, sp, #16
10065902:	2108      	movs	r1, #8
10065904:	9102      	str	r1, [sp, #8]
10065906:	2200      	movs	r2, #0
10065908:	4630      	mov	r0, r6
1006590a:	9601      	str	r6, [sp, #4]
1006590c:	f7fb ff81 	bl	10061812 <HAL_Generate_Random_Bytes_To>
10065910:	4620      	mov	r0, r4
10065912:	301c      	adds	r0, #28
10065914:	af08      	add	r7, sp, #32
10065916:	4631      	mov	r1, r6
10065918:	463a      	mov	r2, r7
1006591a:	f7fa fb7b 	bl	10060014 <smp_sap_crt_generate_ediv>
1006591e:	200b      	movs	r0, #11
10065920:	8068      	strh	r0, [r5, #2]
10065922:	6868      	ldr	r0, [r5, #4]
10065924:	2607      	movs	r6, #7
10065926:	7206      	strb	r6, [r0, #8]
10065928:	2105      	movs	r1, #5
1006592a:	2202      	movs	r2, #2
1006592c:	4628      	mov	r0, r5
1006592e:	463b      	mov	r3, r7
10065930:	f7ed ff88 	bl	10053844 <ACL_pkt_write>
10065934:	4628      	mov	r0, r5
10065936:	4631      	mov	r1, r6
10065938:	9a02      	ldr	r2, [sp, #8]
1006593a:	9b01      	ldr	r3, [sp, #4]
1006593c:	e036      	b.n	100659ac <smp_pp3_keys_distribution_send+0x12c>
1006593e:	2011      	movs	r0, #17
10065940:	8068      	strh	r0, [r5, #2]
10065942:	6868      	ldr	r0, [r5, #4]
10065944:	2108      	movs	r1, #8
10065946:	7201      	strb	r1, [r0, #8]
10065948:	a804      	add	r0, sp, #16
1006594a:	2100      	movs	r1, #0
1006594c:	2210      	movs	r2, #16
1006594e:	f7eb fbb3 	bl	100510b8 <BLEPLAT_MemSet>
10065952:	f7ef f989 	bl	10054c68 <GapIsPrivacySupported>
10065956:	2800      	cmp	r0, #0
10065958:	d002      	beq.n	10065960 <smp_pp3_keys_distribution_send+0xe0>
1006595a:	a804      	add	r0, sp, #16
1006595c:	f7fa fba4 	bl	100600a8 <smp_sap_crt_generate_local_irk>
10065960:	2105      	movs	r1, #5
10065962:	2210      	movs	r2, #16
10065964:	ab04      	add	r3, sp, #16
10065966:	4628      	mov	r0, r5
10065968:	e020      	b.n	100659ac <smp_pp3_keys_distribution_send+0x12c>
1006596a:	a803      	add	r0, sp, #12
1006596c:	7006      	strb	r6, [r0, #0]
1006596e:	ae04      	add	r6, sp, #16
10065970:	4631      	mov	r1, r6
10065972:	f7ff f8f5 	bl	10064b60 <smp_dep_gap_get_local_identity_address>
10065976:	2008      	movs	r0, #8
10065978:	8068      	strh	r0, [r5, #2]
1006597a:	6868      	ldr	r0, [r5, #4]
1006597c:	2109      	movs	r1, #9
1006597e:	7201      	strb	r1, [r0, #8]
10065980:	6868      	ldr	r0, [r5, #4]
10065982:	9903      	ldr	r1, [sp, #12]
10065984:	7241      	strb	r1, [r0, #9]
10065986:	2106      	movs	r1, #6
10065988:	4628      	mov	r0, r5
1006598a:	460a      	mov	r2, r1
1006598c:	e00d      	b.n	100659aa <smp_pp3_keys_distribution_send+0x12a>
1006598e:	2011      	movs	r0, #17
10065990:	8068      	strh	r0, [r5, #2]
10065992:	6868      	ldr	r0, [r5, #4]
10065994:	210a      	movs	r1, #10
10065996:	7201      	strb	r1, [r0, #8]
10065998:	4620      	mov	r0, r4
1006599a:	301c      	adds	r0, #28
1006599c:	ae04      	add	r6, sp, #16
1006599e:	4631      	mov	r1, r6
100659a0:	f7fa fc04 	bl	100601ac <smp_crt_generate_csrk>
100659a4:	2105      	movs	r1, #5
100659a6:	2210      	movs	r2, #16
100659a8:	4628      	mov	r0, r5
100659aa:	4633      	mov	r3, r6
100659ac:	f7ed ff4a 	bl	10053844 <ACL_pkt_write>
100659b0:	4620      	mov	r0, r4
100659b2:	4629      	mov	r1, r5
100659b4:	f7ff f8ec 	bl	10064b90 <smp_dep_l2c_send_acl_packet>
100659b8:	2800      	cmp	r0, #0
100659ba:	d101      	bne.n	100659c0 <smp_pp3_keys_distribution_send+0x140>
100659bc:	20dd      	movs	r0, #221	@ 0xdd
100659be:	72a0      	strb	r0, [r4, #10]
100659c0:	b009      	add	sp, #36	@ 0x24
100659c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100659c4 <__arm_cp.2_0>:
100659c4:	20002414 	.word	0x20002414

100659c8 <smp_pp3_keys_distribution_signaling_ack>:
100659c8:	b580      	push	{r7, lr}
100659ca:	7a82      	ldrb	r2, [r0, #10]
100659cc:	2add      	cmp	r2, #221	@ 0xdd
100659ce:	d123      	bne.n	10065a18 <smp_pp3_keys_distribution_signaling_ack+0x50>
100659d0:	1f8a      	subs	r2, r1, #6
100659d2:	2a04      	cmp	r2, #4
100659d4:	d81e      	bhi.n	10065a14 <smp_pp3_keys_distribution_signaling_ack+0x4c>
100659d6:	21d2      	movs	r1, #210	@ 0xd2
100659d8:	447a      	add	r2, pc
100659da:	7912      	ldrb	r2, [r2, #4]
100659dc:	0052      	lsls	r2, r2, #1
100659de:	4497      	add	pc, r2
100659e0:	07110218 	.word	0x07110218
100659e4:	000a      	.short	0x000a
100659e6:	7c81      	ldrb	r1, [r0, #18]
100659e8:	078a      	lsls	r2, r1, #30
100659ea:	d502      	bpl.n	100659f2 <smp_pp3_keys_distribution_signaling_ack+0x2a>
100659ec:	21d3      	movs	r1, #211	@ 0xd3
100659ee:	e010      	b.n	10065a12 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100659f0:	7c81      	ldrb	r1, [r0, #18]
100659f2:	0749      	lsls	r1, r1, #29
100659f4:	d40c      	bmi.n	10065a10 <smp_pp3_keys_distribution_signaling_ack+0x48>
100659f6:	2160      	movs	r1, #96	@ 0x60
100659f8:	5c41      	ldrb	r1, [r0, r1]
100659fa:	07c9      	lsls	r1, r1, #31
100659fc:	d104      	bne.n	10065a08 <smp_pp3_keys_distribution_signaling_ack+0x40>
100659fe:	f7ff ff2a 	bl	10065856 <smp_pp3_keys_distribution_completed>
10065a02:	bd80      	pop	{r7, pc}
10065a04:	21d4      	movs	r1, #212	@ 0xd4
10065a06:	e004      	b.n	10065a12 <smp_pp3_keys_distribution_signaling_ack+0x4a>
10065a08:	2101      	movs	r1, #1
10065a0a:	f7ff fef0 	bl	100657ee <smp_pp3_keys_distribution_start>
10065a0e:	bd80      	pop	{r7, pc}
10065a10:	21d5      	movs	r1, #213	@ 0xd5
10065a12:	7281      	strb	r1, [r0, #10]
10065a14:	f7ff ff34 	bl	10065880 <smp_pp3_keys_distribution_send>
10065a18:	bd80      	pop	{r7, pc}
	...

10065a1c <smp_pp3_keys_distribution_receive>:
10065a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10065a1e:	b085      	sub	sp, #20
10065a20:	4607      	mov	r7, r0
10065a22:	6840      	ldr	r0, [r0, #4]
10065a24:	7a05      	ldrb	r5, [r0, #8]
10065a26:	1fa8      	subs	r0, r5, #6
10065a28:	2804      	cmp	r0, #4
10065a2a:	d823      	bhi.n	10065a74 <smp_pp3_keys_distribution_receive+0x58>
10065a2c:	460c      	mov	r4, r1
10065a2e:	7a88      	ldrb	r0, [r1, #10]
10065a30:	2686      	movs	r6, #134	@ 0x86
10065a32:	28d0      	cmp	r0, #208	@ 0xd0
10065a34:	d11f      	bne.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065a36:	4620      	mov	r0, r4
10065a38:	3059      	adds	r0, #89	@ 0x59
10065a3a:	9001      	str	r0, [sp, #4]
10065a3c:	8920      	ldrh	r0, [r4, #8]
10065a3e:	f000 f995 	bl	10065d6c <smp_get_remote_device_list_index>
10065a42:	4602      	mov	r2, r0
10065a44:	2000      	movs	r0, #0
10065a46:	4b44      	ldr	r3, [pc, #272]	@ (10065b58 <__arm_cp.4_0>)
10065a48:	9002      	str	r0, [sp, #8]
10065a4a:	4601      	mov	r1, r0
10065a4c:	f7fa fe56 	bl	100606fc <smp_timer_reset>
10065a50:	2d06      	cmp	r5, #6
10065a52:	d005      	beq.n	10065a60 <smp_pp3_keys_distribution_receive+0x44>
10065a54:	2d09      	cmp	r5, #9
10065a56:	d011      	beq.n	10065a7c <smp_pp3_keys_distribution_receive+0x60>
10065a58:	2d08      	cmp	r5, #8
10065a5a:	d034      	beq.n	10065ac6 <smp_pp3_keys_distribution_receive+0xaa>
10065a5c:	2d07      	cmp	r5, #7
10065a5e:	d13d      	bne.n	10065adc <smp_pp3_keys_distribution_receive+0xc0>
10065a60:	7de0      	ldrb	r0, [r4, #23]
10065a62:	0700      	lsls	r0, r0, #28
10065a64:	d407      	bmi.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065a66:	7c60      	ldrb	r0, [r4, #17]
10065a68:	07c0      	lsls	r0, r0, #31
10065a6a:	d004      	beq.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065a6c:	2d06      	cmp	r5, #6
10065a6e:	d144      	bne.n	10065afa <smp_pp3_keys_distribution_receive+0xde>
10065a70:	3428      	adds	r4, #40	@ 0x28
10065a72:	e02c      	b.n	10065ace <smp_pp3_keys_distribution_receive+0xb2>
10065a74:	2684      	movs	r6, #132	@ 0x84
10065a76:	4630      	mov	r0, r6
10065a78:	b005      	add	sp, #20
10065a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065a7c:	7c60      	ldrb	r0, [r4, #17]
10065a7e:	0780      	lsls	r0, r0, #30
10065a80:	d5f9      	bpl.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065a82:	ab03      	add	r3, sp, #12
10065a84:	2600      	movs	r6, #0
10065a86:	809e      	strh	r6, [r3, #4]
10065a88:	9603      	str	r6, [sp, #12]
10065a8a:	2106      	movs	r1, #6
10065a8c:	4638      	mov	r0, r7
10065a8e:	460a      	mov	r2, r1
10065a90:	f7ed fead 	bl	100537ee <ACL_pkt_cmp>
10065a94:	2800      	cmp	r0, #0
10065a96:	d045      	beq.n	10065b24 <smp_pp3_keys_distribution_receive+0x108>
10065a98:	6878      	ldr	r0, [r7, #4]
10065a9a:	7a40      	ldrb	r0, [r0, #9]
10065a9c:	9d01      	ldr	r5, [sp, #4]
10065a9e:	7028      	strb	r0, [r5, #0]
10065aa0:	4623      	mov	r3, r4
10065aa2:	335a      	adds	r3, #90	@ 0x5a
10065aa4:	2106      	movs	r1, #6
10065aa6:	4638      	mov	r0, r7
10065aa8:	460a      	mov	r2, r1
10065aaa:	f7ed fea9 	bl	10053800 <ACL_pkt_read>
10065aae:	7828      	ldrb	r0, [r5, #0]
10065ab0:	2801      	cmp	r0, #1
10065ab2:	d103      	bne.n	10065abc <smp_pp3_keys_distribution_receive+0xa0>
10065ab4:	79a8      	ldrb	r0, [r5, #6]
10065ab6:	0980      	lsrs	r0, r0, #6
10065ab8:	2803      	cmp	r0, #3
10065aba:	d345      	bcc.n	10065b48 <smp_pp3_keys_distribution_receive+0x12c>
10065abc:	7c61      	ldrb	r1, [r4, #17]
10065abe:	2020      	movs	r0, #32
10065ac0:	4308      	orrs	r0, r1
10065ac2:	7460      	strb	r0, [r4, #17]
10065ac4:	e02f      	b.n	10065b26 <smp_pp3_keys_distribution_receive+0x10a>
10065ac6:	7c60      	ldrb	r0, [r4, #17]
10065ac8:	0780      	lsls	r0, r0, #30
10065aca:	d5d4      	bpl.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065acc:	3438      	adds	r4, #56	@ 0x38
10065ace:	2105      	movs	r1, #5
10065ad0:	2210      	movs	r2, #16
10065ad2:	4638      	mov	r0, r7
10065ad4:	4623      	mov	r3, r4
10065ad6:	f7ed fe93 	bl	10053800 <ACL_pkt_read>
10065ada:	e033      	b.n	10065b44 <smp_pp3_keys_distribution_receive+0x128>
10065adc:	7c60      	ldrb	r0, [r4, #17]
10065ade:	0740      	lsls	r0, r0, #29
10065ae0:	d5c9      	bpl.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065ae2:	4623      	mov	r3, r4
10065ae4:	3348      	adds	r3, #72	@ 0x48
10065ae6:	2105      	movs	r1, #5
10065ae8:	2210      	movs	r2, #16
10065aea:	4638      	mov	r0, r7
10065aec:	f7ed fe88 	bl	10053800 <ACL_pkt_read>
10065af0:	7c60      	ldrb	r0, [r4, #17]
10065af2:	2140      	movs	r1, #64	@ 0x40
10065af4:	4301      	orrs	r1, r0
10065af6:	7461      	strb	r1, [r4, #17]
10065af8:	e017      	b.n	10065b2a <smp_pp3_keys_distribution_receive+0x10e>
10065afa:	6878      	ldr	r0, [r7, #4]
10065afc:	7a40      	ldrb	r0, [r0, #9]
10065afe:	77a0      	strb	r0, [r4, #30]
10065b00:	6878      	ldr	r0, [r7, #4]
10065b02:	7a80      	ldrb	r0, [r0, #10]
10065b04:	77e0      	strb	r0, [r4, #31]
10065b06:	4623      	mov	r3, r4
10065b08:	3320      	adds	r3, #32
10065b0a:	2107      	movs	r1, #7
10065b0c:	2208      	movs	r2, #8
10065b0e:	4638      	mov	r0, r7
10065b10:	f7ed fe76 	bl	10053800 <ACL_pkt_read>
10065b14:	7c60      	ldrb	r0, [r4, #17]
10065b16:	2180      	movs	r1, #128	@ 0x80
10065b18:	4301      	orrs	r1, r0
10065b1a:	7461      	strb	r1, [r4, #17]
10065b1c:	0740      	lsls	r0, r0, #29
10065b1e:	0f80      	lsrs	r0, r0, #30
10065b20:	d110      	bne.n	10065b44 <smp_pp3_keys_distribution_receive+0x128>
10065b22:	e002      	b.n	10065b2a <smp_pp3_keys_distribution_receive+0x10e>
10065b24:	7c60      	ldrb	r0, [r4, #17]
10065b26:	0740      	lsls	r0, r0, #29
10065b28:	d4a5      	bmi.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065b2a:	9801      	ldr	r0, [sp, #4]
10065b2c:	79c0      	ldrb	r0, [r0, #7]
10065b2e:	07c0      	lsls	r0, r0, #31
10065b30:	d105      	bne.n	10065b3e <smp_pp3_keys_distribution_receive+0x122>
10065b32:	2600      	movs	r6, #0
10065b34:	4620      	mov	r0, r4
10065b36:	4631      	mov	r1, r6
10065b38:	f7ff fe59 	bl	100657ee <smp_pp3_keys_distribution_start>
10065b3c:	e79b      	b.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065b3e:	4620      	mov	r0, r4
10065b40:	f7ff f96a 	bl	10064e18 <smp_pp3_pairing_completed_successful>
10065b44:	9e02      	ldr	r6, [sp, #8]
10065b46:	e796      	b.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>
10065b48:	2108      	movs	r1, #8
10065b4a:	2200      	movs	r2, #0
10065b4c:	2301      	movs	r3, #1
10065b4e:	4620      	mov	r0, r4
10065b50:	f7ff fa1a 	bl	10064f88 <smp_pp3_pairing_failed_send>
10065b54:	4606      	mov	r6, r0
10065b56:	e78e      	b.n	10065a76 <smp_pp3_keys_distribution_receive+0x5a>

10065b58 <__arm_cp.4_0>:
10065b58:	00007530 	.word	0x00007530

10065b5c <smp_cmn_rejectlist_init>:
10065b5c:	b580      	push	{r7, lr}
10065b5e:	2003      	movs	r0, #3
10065b60:	2108      	movs	r1, #8
10065b62:	f7f9 fd59 	bl	1005f618 <csmem_mem_0_assign>
10065b66:	4902      	ldr	r1, [pc, #8]	@ (10065b70 <__arm_cp.0_0>)
10065b68:	6809      	ldr	r1, [r1, #0]
10065b6a:	22a8      	movs	r2, #168	@ 0xa8
10065b6c:	5088      	str	r0, [r1, r2]
10065b6e:	bd80      	pop	{r7, pc}

10065b70 <__arm_cp.0_0>:
10065b70:	200024b4 	.word	0x200024b4

10065b74 <smp_cmn_repeated_attacks_protection_start>:
10065b74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10065b76:	9101      	str	r1, [sp, #4]
10065b78:	2003      	movs	r0, #3
10065b7a:	9002      	str	r0, [sp, #8]
10065b7c:	2700      	movs	r7, #0
10065b7e:	4a30      	ldr	r2, [pc, #192]	@ (10065c40 <__arm_cp.1_0>)
10065b80:	463d      	mov	r5, r7
10065b82:	4616      	mov	r6, r2
10065b84:	6810      	ldr	r0, [r2, #0]
10065b86:	24a8      	movs	r4, #168	@ 0xa8
10065b88:	5900      	ldr	r0, [r0, r4]
10065b8a:	19c0      	adds	r0, r0, r7
10065b8c:	1c80      	adds	r0, r0, #2
10065b8e:	2206      	movs	r2, #6
10065b90:	9901      	ldr	r1, [sp, #4]
10065b92:	f7eb faa1 	bl	100510d8 <BLEPLAT_MemCmp>
10065b96:	2800      	cmp	r0, #0
10065b98:	d031      	beq.n	10065bfe <smp_cmn_repeated_attacks_protection_start+0x8a>
10065b9a:	9802      	ldr	r0, [sp, #8]
10065b9c:	2803      	cmp	r0, #3
10065b9e:	4632      	mov	r2, r6
10065ba0:	d109      	bne.n	10065bb6 <smp_cmn_repeated_attacks_protection_start+0x42>
10065ba2:	6810      	ldr	r0, [r2, #0]
10065ba4:	5900      	ldr	r0, [r0, r4]
10065ba6:	5dc0      	ldrb	r0, [r0, r7]
10065ba8:	0680      	lsls	r0, r0, #26
10065baa:	0f80      	lsrs	r0, r0, #30
10065bac:	d001      	beq.n	10065bb2 <smp_cmn_repeated_attacks_protection_start+0x3e>
10065bae:	2003      	movs	r0, #3
10065bb0:	e000      	b.n	10065bb4 <smp_cmn_repeated_attacks_protection_start+0x40>
10065bb2:	b2e8      	uxtb	r0, r5
10065bb4:	9002      	str	r0, [sp, #8]
10065bb6:	3708      	adds	r7, #8
10065bb8:	1c6d      	adds	r5, r5, #1
10065bba:	2d03      	cmp	r5, #3
10065bbc:	d1e1      	bne.n	10065b82 <smp_cmn_repeated_attacks_protection_start+0xe>
10065bbe:	6810      	ldr	r0, [r2, #0]
10065bc0:	2541      	movs	r5, #65	@ 0x41
10065bc2:	5d41      	ldrb	r1, [r0, r5]
10065bc4:	30a8      	adds	r0, #168	@ 0xa8
10065bc6:	2902      	cmp	r1, #2
10065bc8:	d836      	bhi.n	10065c38 <smp_cmn_repeated_attacks_protection_start+0xc4>
10065bca:	9902      	ldr	r1, [sp, #8]
10065bcc:	00cf      	lsls	r7, r1, #3
10065bce:	6800      	ldr	r0, [r0, #0]
10065bd0:	19c0      	adds	r0, r0, r7
10065bd2:	1c80      	adds	r0, r0, #2
10065bd4:	4616      	mov	r6, r2
10065bd6:	2206      	movs	r2, #6
10065bd8:	9901      	ldr	r1, [sp, #4]
10065bda:	f7eb fa5d 	bl	10051098 <BLEPLAT_MemCpy>
10065bde:	6830      	ldr	r0, [r6, #0]
10065be0:	5900      	ldr	r0, [r0, r4]
10065be2:	2110      	movs	r1, #16
10065be4:	55c1      	strb	r1, [r0, r7]
10065be6:	9802      	ldr	r0, [sp, #8]
10065be8:	b2c2      	uxtb	r2, r0
10065bea:	2000      	movs	r0, #0
10065bec:	2101      	movs	r1, #1
10065bee:	4b15      	ldr	r3, [pc, #84]	@ (10065c44 <__arm_cp.1_1>)
10065bf0:	f7fa fd84 	bl	100606fc <smp_timer_reset>
10065bf4:	6830      	ldr	r0, [r6, #0]
10065bf6:	5d41      	ldrb	r1, [r0, r5]
10065bf8:	1c49      	adds	r1, r1, #1
10065bfa:	5541      	strb	r1, [r0, r5]
10065bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065bfe:	6830      	ldr	r0, [r6, #0]
10065c00:	5900      	ldr	r0, [r0, r4]
10065c02:	5dc3      	ldrb	r3, [r0, r7]
10065c04:	21cf      	movs	r1, #207	@ 0xcf
10065c06:	4019      	ands	r1, r3
10065c08:	3110      	adds	r1, #16
10065c0a:	2203      	movs	r2, #3
10065c0c:	401a      	ands	r2, r3
10065c0e:	1c53      	adds	r3, r2, #1
10065c10:	2a03      	cmp	r2, #3
10065c12:	d002      	beq.n	10065c1a <smp_cmn_repeated_attacks_protection_start+0xa6>
10065c14:	24dc      	movs	r4, #220	@ 0xdc
10065c16:	4021      	ands	r1, r4
10065c18:	4319      	orrs	r1, r3
10065c1a:	55c1      	strb	r1, [r0, r7]
10065c1c:	2a03      	cmp	r2, #3
10065c1e:	d100      	bne.n	10065c22 <smp_cmn_repeated_attacks_protection_start+0xae>
10065c20:	4613      	mov	r3, r2
10065c22:	a009      	add	r0, pc, #36	@ (adr r0, 10065c48 <__arm_cp.1_1+0x4>)
10065c24:	5cc0      	ldrb	r0, [r0, r3]
10065c26:	217d      	movs	r1, #125	@ 0x7d
10065c28:	00cb      	lsls	r3, r1, #3
10065c2a:	4343      	muls	r3, r0
10065c2c:	b2ea      	uxtb	r2, r5
10065c2e:	2000      	movs	r0, #0
10065c30:	2101      	movs	r1, #1
10065c32:	f7fa fd63 	bl	100606fc <smp_timer_reset>
10065c36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065c38:	2101      	movs	r1, #1
10065c3a:	7201      	strb	r1, [r0, #8]
10065c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065c3e:	46c0      	nop			@ (mov r8, r8)

10065c40 <__arm_cp.1_0>:
10065c40:	200024b4 	.word	0x200024b4

10065c44 <__arm_cp.1_1>:
10065c44:	00000bb8 	.word	0x00000bb8
10065c48:	140a0503 	.word	0x140a0503

10065c4c <smp_cmn_repeated_attacks_timer_cb>:
10065c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065c4e:	4e29      	ldr	r6, [pc, #164]	@ (10065cf4 <__arm_cp.2_0>)
10065c50:	6831      	ldr	r1, [r6, #0]
10065c52:	25a8      	movs	r5, #168	@ 0xa8
10065c54:	5949      	ldr	r1, [r1, r5]
10065c56:	00c4      	lsls	r4, r0, #3
10065c58:	5d0a      	ldrb	r2, [r1, r4]
10065c5a:	06d3      	lsls	r3, r2, #27
10065c5c:	d40e      	bmi.n	10065c7c <smp_cmn_repeated_attacks_timer_cb+0x30>
10065c5e:	0693      	lsls	r3, r2, #26
10065c60:	d546      	bpl.n	10065cf0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10065c62:	1909      	adds	r1, r1, r4
10065c64:	0793      	lsls	r3, r2, #30
10065c66:	d035      	beq.n	10065cd4 <smp_cmn_repeated_attacks_timer_cb+0x88>
10065c68:	23fc      	movs	r3, #252	@ 0xfc
10065c6a:	4013      	ands	r3, r2
10065c6c:	1e52      	subs	r2, r2, #1
10065c6e:	2403      	movs	r4, #3
10065c70:	4014      	ands	r4, r2
10065c72:	18e2      	adds	r2, r4, r3
10065c74:	700a      	strb	r2, [r1, #0]
10065c76:	f000 f841 	bl	10065cfc <smp_cmn_rejectlist_start_probation_timer2>
10065c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065c7c:	f000 f83e 	bl	10065cfc <smp_cmn_rejectlist_start_probation_timer2>
10065c80:	6830      	ldr	r0, [r6, #0]
10065c82:	5940      	ldr	r0, [r0, r5]
10065c84:	1900      	adds	r0, r0, r4
10065c86:	1c84      	adds	r4, r0, #2
10065c88:	2065      	movs	r0, #101	@ 0x65
10065c8a:	43c6      	mvns	r6, r0
10065c8c:	4637      	mov	r7, r6
10065c8e:	3765      	adds	r7, #101	@ 0x65
10065c90:	4819      	ldr	r0, [pc, #100]	@ (10065cf8 <__arm_cp.2_1>)
10065c92:	6800      	ldr	r0, [r0, #0]
10065c94:	2134      	movs	r1, #52	@ 0x34
10065c96:	5c40      	ldrb	r0, [r0, r1]
10065c98:	1c7f      	adds	r7, r7, #1
10065c9a:	4287      	cmp	r7, r0
10065c9c:	d228      	bcs.n	10065cf0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10065c9e:	4815      	ldr	r0, [pc, #84]	@ (10065cf4 <__arm_cp.2_0>)
10065ca0:	6800      	ldr	r0, [r0, #0]
10065ca2:	25a4      	movs	r5, #164	@ 0xa4
10065ca4:	5940      	ldr	r0, [r0, r5]
10065ca6:	1980      	adds	r0, r0, r6
10065ca8:	3670      	adds	r6, #112	@ 0x70
10065caa:	3068      	adds	r0, #104	@ 0x68
10065cac:	2206      	movs	r2, #6
10065cae:	4621      	mov	r1, r4
10065cb0:	f7eb fa12 	bl	100510d8 <BLEPLAT_MemCmp>
10065cb4:	2800      	cmp	r0, #0
10065cb6:	d1eb      	bne.n	10065c90 <smp_cmn_repeated_attacks_timer_cb+0x44>
10065cb8:	480e      	ldr	r0, [pc, #56]	@ (10065cf4 <__arm_cp.2_0>)
10065cba:	6800      	ldr	r0, [r0, #0]
10065cbc:	5940      	ldr	r0, [r0, r5]
10065cbe:	5d81      	ldrb	r1, [r0, r6]
10065cc0:	29fb      	cmp	r1, #251	@ 0xfb
10065cc2:	d115      	bne.n	10065cf0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10065cc4:	2110      	movs	r1, #16
10065cc6:	5581      	strb	r1, [r0, r6]
10065cc8:	200e      	movs	r0, #14
10065cca:	f7fb fa7b 	bl	100611c4 <tsk_notify_idx>
10065cce:	f7ea fbfc 	bl	100504ca <BLE_STACK_ProcessRequest>
10065cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065cd4:	4635      	mov	r5, r6
10065cd6:	2400      	movs	r4, #0
10065cd8:	2208      	movs	r2, #8
10065cda:	4608      	mov	r0, r1
10065cdc:	4621      	mov	r1, r4
10065cde:	f7eb f9eb 	bl	100510b8 <BLEPLAT_MemSet>
10065ce2:	6830      	ldr	r0, [r6, #0]
10065ce4:	21b0      	movs	r1, #176	@ 0xb0
10065ce6:	5444      	strb	r4, [r0, r1]
10065ce8:	2141      	movs	r1, #65	@ 0x41
10065cea:	5c42      	ldrb	r2, [r0, r1]
10065cec:	1e52      	subs	r2, r2, #1
10065cee:	5442      	strb	r2, [r0, r1]
10065cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065cf2:	46c0      	nop			@ (mov r8, r8)

10065cf4 <__arm_cp.2_0>:
10065cf4:	200024b4 	.word	0x200024b4

10065cf8 <__arm_cp.2_1>:
10065cf8:	20002414 	.word	0x20002414

10065cfc <smp_cmn_rejectlist_start_probation_timer2>:
10065cfc:	b510      	push	{r4, lr}
10065cfe:	4604      	mov	r4, r0
10065d00:	2000      	movs	r0, #0
10065d02:	2101      	movs	r1, #1
10065d04:	4b07      	ldr	r3, [pc, #28]	@ (10065d24 <__arm_cp.3_0>)
10065d06:	4622      	mov	r2, r4
10065d08:	f7fa fcf8 	bl	100606fc <smp_timer_reset>
10065d0c:	4806      	ldr	r0, [pc, #24]	@ (10065d28 <__arm_cp.3_1>)
10065d0e:	6800      	ldr	r0, [r0, #0]
10065d10:	21a8      	movs	r1, #168	@ 0xa8
10065d12:	5840      	ldr	r0, [r0, r1]
10065d14:	00e1      	lsls	r1, r4, #3
10065d16:	5c42      	ldrb	r2, [r0, r1]
10065d18:	23cf      	movs	r3, #207	@ 0xcf
10065d1a:	4013      	ands	r3, r2
10065d1c:	3320      	adds	r3, #32
10065d1e:	5443      	strb	r3, [r0, r1]
10065d20:	bd10      	pop	{r4, pc}
10065d22:	46c0      	nop			@ (mov r8, r8)

10065d24 <__arm_cp.3_0>:
10065d24:	00004e20 	.word	0x00004e20

10065d28 <__arm_cp.3_1>:
10065d28:	200024b4 	.word	0x200024b4

10065d2c <smp_cmn_is_peer_rejectlisted>:
10065d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065d2e:	460c      	mov	r4, r1
10065d30:	2007      	movs	r0, #7
10065d32:	43c0      	mvns	r0, r0
10065d34:	4e0c      	ldr	r6, [pc, #48]	@ (10065d68 <__arm_cp.4_0>)
10065d36:	4605      	mov	r5, r0
10065d38:	3508      	adds	r5, #8
10065d3a:	2d18      	cmp	r5, #24
10065d3c:	d010      	beq.n	10065d60 <smp_cmn_is_peer_rejectlisted+0x34>
10065d3e:	6831      	ldr	r1, [r6, #0]
10065d40:	27a8      	movs	r7, #168	@ 0xa8
10065d42:	59c9      	ldr	r1, [r1, r7]
10065d44:	1808      	adds	r0, r1, r0
10065d46:	300a      	adds	r0, #10
10065d48:	2206      	movs	r2, #6
10065d4a:	4621      	mov	r1, r4
10065d4c:	f7eb f9c4 	bl	100510d8 <BLEPLAT_MemCmp>
10065d50:	2800      	cmp	r0, #0
10065d52:	4628      	mov	r0, r5
10065d54:	d1f0      	bne.n	10065d38 <smp_cmn_is_peer_rejectlisted+0xc>
10065d56:	6830      	ldr	r0, [r6, #0]
10065d58:	59c0      	ldr	r0, [r0, r7]
10065d5a:	5d40      	ldrb	r0, [r0, r5]
10065d5c:	06c0      	lsls	r0, r0, #27
10065d5e:	d401      	bmi.n	10065d64 <smp_cmn_is_peer_rejectlisted+0x38>
10065d60:	2000      	movs	r0, #0
10065d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065d64:	2001      	movs	r0, #1
10065d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10065d68 <__arm_cp.4_0>:
10065d68:	200024b4 	.word	0x200024b4

10065d6c <smp_get_remote_device_list_index>:
10065d6c:	b5b0      	push	{r4, r5, r7, lr}
10065d6e:	490d      	ldr	r1, [pc, #52]	@ (10065da4 <__arm_cp.0_0>)
10065d70:	6809      	ldr	r1, [r1, #0]
10065d72:	2234      	movs	r2, #52	@ 0x34
10065d74:	5c89      	ldrb	r1, [r1, r2]
10065d76:	2800      	cmp	r0, #0
10065d78:	d011      	beq.n	10065d9e <smp_get_remote_device_list_index+0x32>
10065d7a:	4a0b      	ldr	r2, [pc, #44]	@ (10065da8 <__arm_cp.0_1>)
10065d7c:	6812      	ldr	r2, [r2, #0]
10065d7e:	32a4      	adds	r2, #164	@ 0xa4
10065d80:	2300      	movs	r3, #0
10065d82:	b2dc      	uxtb	r4, r3
10065d84:	428c      	cmp	r4, r1
10065d86:	d20a      	bcs.n	10065d9e <smp_get_remote_device_list_index+0x32>
10065d88:	2570      	movs	r5, #112	@ 0x70
10065d8a:	4365      	muls	r5, r4
10065d8c:	6814      	ldr	r4, [r2, #0]
10065d8e:	1964      	adds	r4, r4, r5
10065d90:	8924      	ldrh	r4, [r4, #8]
10065d92:	4044      	eors	r4, r0
10065d94:	0524      	lsls	r4, r4, #20
10065d96:	d001      	beq.n	10065d9c <smp_get_remote_device_list_index+0x30>
10065d98:	1c5b      	adds	r3, r3, #1
10065d9a:	e7f2      	b.n	10065d82 <smp_get_remote_device_list_index+0x16>
10065d9c:	4619      	mov	r1, r3
10065d9e:	b2c8      	uxtb	r0, r1
10065da0:	bdb0      	pop	{r4, r5, r7, pc}
10065da2:	46c0      	nop			@ (mov r8, r8)

10065da4 <__arm_cp.0_0>:
10065da4:	20002414 	.word	0x20002414

10065da8 <__arm_cp.0_1>:
10065da8:	200024b4 	.word	0x200024b4

10065dac <smp_get_remote_device_list_item>:
10065dac:	b5f0      	push	{r4, r5, r6, r7, lr}
10065dae:	4601      	mov	r1, r0
10065db0:	2000      	movs	r0, #0
10065db2:	2900      	cmp	r1, #0
10065db4:	d017      	beq.n	10065de6 <smp_get_remote_device_list_item+0x3a>
10065db6:	4a0c      	ldr	r2, [pc, #48]	@ (10065de8 <__arm_cp.1_0>)
10065db8:	6812      	ldr	r2, [r2, #0]
10065dba:	2334      	movs	r3, #52	@ 0x34
10065dbc:	5cd3      	ldrb	r3, [r2, r3]
10065dbe:	2270      	movs	r2, #112	@ 0x70
10065dc0:	435a      	muls	r2, r3
10065dc2:	236f      	movs	r3, #111	@ 0x6f
10065dc4:	43dd      	mvns	r5, r3
10065dc6:	4b09      	ldr	r3, [pc, #36]	@ (10065dec <__arm_cp.1_1>)
10065dc8:	681b      	ldr	r3, [r3, #0]
10065dca:	33a4      	adds	r3, #164	@ 0xa4
10065dcc:	462c      	mov	r4, r5
10065dce:	3470      	adds	r4, #112	@ 0x70
10065dd0:	42a2      	cmp	r2, r4
10065dd2:	d008      	beq.n	10065de6 <smp_get_remote_device_list_item+0x3a>
10065dd4:	681e      	ldr	r6, [r3, #0]
10065dd6:	1975      	adds	r5, r6, r5
10065dd8:	2778      	movs	r7, #120	@ 0x78
10065dda:	5bed      	ldrh	r5, [r5, r7]
10065ddc:	404d      	eors	r5, r1
10065dde:	052d      	lsls	r5, r5, #20
10065de0:	4625      	mov	r5, r4
10065de2:	d1f4      	bne.n	10065dce <smp_get_remote_device_list_item+0x22>
10065de4:	1930      	adds	r0, r6, r4
10065de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10065de8 <__arm_cp.1_0>:
10065de8:	20002414 	.word	0x20002414

10065dec <__arm_cp.1_1>:
10065dec:	200024b4 	.word	0x200024b4

10065df0 <smp_oob_check_is_remote_data_present>:
10065df0:	b5b0      	push	{r4, r5, r7, lr}
10065df2:	4604      	mov	r4, r0
10065df4:	480b      	ldr	r0, [pc, #44]	@ (10065e24 <__arm_cp.2_0>)
10065df6:	6800      	ldr	r0, [r0, #0]
10065df8:	21ac      	movs	r1, #172	@ 0xac
10065dfa:	5840      	ldr	r0, [r0, r1]
10065dfc:	7845      	ldrb	r5, [r0, #1]
10065dfe:	1c80      	adds	r0, r0, #2
10065e00:	1ca1      	adds	r1, r4, #2
10065e02:	2206      	movs	r2, #6
10065e04:	f7eb f968 	bl	100510d8 <BLEPLAT_MemCmp>
10065e08:	4601      	mov	r1, r0
10065e0a:	2000      	movs	r0, #0
10065e0c:	2900      	cmp	r1, #0
10065e0e:	d000      	beq.n	10065e12 <smp_oob_check_is_remote_data_present+0x22>
10065e10:	bdb0      	pop	{r4, r5, r7, pc}
10065e12:	7861      	ldrb	r1, [r4, #1]
10065e14:	428d      	cmp	r5, r1
10065e16:	d1fb      	bne.n	10065e10 <smp_oob_check_is_remote_data_present+0x20>
10065e18:	7b61      	ldrb	r1, [r4, #13]
10065e1a:	2001      	movs	r0, #1
10065e1c:	4301      	orrs	r1, r0
10065e1e:	7361      	strb	r1, [r4, #13]
10065e20:	bdb0      	pop	{r4, r5, r7, pc}
10065e22:	46c0      	nop			@ (mov r8, r8)

10065e24 <__arm_cp.2_0>:
10065e24:	200024b4 	.word	0x200024b4

10065e28 <smp_oob_clear_remote_data_entry>:
10065e28:	b580      	push	{r7, lr}
10065e2a:	2228      	movs	r2, #40	@ 0x28
10065e2c:	4350      	muls	r0, r2
10065e2e:	4904      	ldr	r1, [pc, #16]	@ (10065e40 <__arm_cp.4_0>)
10065e30:	6809      	ldr	r1, [r1, #0]
10065e32:	23ac      	movs	r3, #172	@ 0xac
10065e34:	58c9      	ldr	r1, [r1, r3]
10065e36:	1808      	adds	r0, r1, r0
10065e38:	2100      	movs	r1, #0
10065e3a:	f7eb f93d 	bl	100510b8 <BLEPLAT_MemSet>
10065e3e:	bd80      	pop	{r7, pc}

10065e40 <__arm_cp.4_0>:
10065e40:	200024b4 	.word	0x200024b4

10065e44 <smp_scp_is_another_sc_pairing_ongoing>:
10065e44:	b570      	push	{r4, r5, r6, lr}
10065e46:	490d      	ldr	r1, [pc, #52]	@ (10065e7c <__arm_cp.1_0>)
10065e48:	6809      	ldr	r1, [r1, #0]
10065e4a:	2234      	movs	r2, #52	@ 0x34
10065e4c:	5c89      	ldrb	r1, [r1, r2]
10065e4e:	2270      	movs	r2, #112	@ 0x70
10065e50:	434a      	muls	r2, r1
10065e52:	490b      	ldr	r1, [pc, #44]	@ (10065e80 <__arm_cp.1_1>)
10065e54:	680b      	ldr	r3, [r1, #0]
10065e56:	33a4      	adds	r3, #164	@ 0xa4
10065e58:	2100      	movs	r1, #0
10065e5a:	460c      	mov	r4, r1
10065e5c:	42a2      	cmp	r2, r4
10065e5e:	d00a      	beq.n	10065e76 <smp_scp_is_another_sc_pairing_ongoing+0x32>
10065e60:	681d      	ldr	r5, [r3, #0]
10065e62:	192d      	adds	r5, r5, r4
10065e64:	7dee      	ldrb	r6, [r5, #23]
10065e66:	07f6      	lsls	r6, r6, #31
10065e68:	d002      	beq.n	10065e70 <smp_scp_is_another_sc_pairing_ongoing+0x2c>
10065e6a:	892d      	ldrh	r5, [r5, #8]
10065e6c:	4285      	cmp	r5, r0
10065e6e:	d101      	bne.n	10065e74 <smp_scp_is_another_sc_pairing_ongoing+0x30>
10065e70:	3470      	adds	r4, #112	@ 0x70
10065e72:	e7f3      	b.n	10065e5c <smp_scp_is_another_sc_pairing_ongoing+0x18>
10065e74:	2101      	movs	r1, #1
10065e76:	4608      	mov	r0, r1
10065e78:	bd70      	pop	{r4, r5, r6, pc}
10065e7a:	46c0      	nop			@ (mov r8, r8)

10065e7c <__arm_cp.1_0>:
10065e7c:	20002414 	.word	0x20002414

10065e80 <__arm_cp.1_1>:
10065e80:	200024b4 	.word	0x200024b4

10065e84 <smp_scp_init_ucfg_weak>:
10065e84:	4770      	bx	lr

10065e86 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>:
10065e86:	201f      	movs	r0, #31
10065e88:	4770      	bx	lr

10065e8a <smp_scp_public_key_prepare_and_exchange_ucfg_weak>:
10065e8a:	201f      	movs	r0, #31
10065e8c:	4770      	bx	lr

10065e8e <smp_scp_stats_update_on_pairing_complete_ucfg_weak>:
10065e8e:	4770      	bx	lr

10065e90 <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
10065e90:	4770      	bx	lr
	...

10065e94 <malloc>:
10065e94:	b510      	push	{r4, lr}
10065e96:	4b03      	ldr	r3, [pc, #12]	@ (10065ea4 <malloc+0x10>)
10065e98:	0001      	movs	r1, r0
10065e9a:	6818      	ldr	r0, [r3, #0]
10065e9c:	f000 f830 	bl	10065f00 <_malloc_r>
10065ea0:	bd10      	pop	{r4, pc}
10065ea2:	46c0      	nop			@ (mov r8, r8)
10065ea4:	200028b8 	.word	0x200028b8

10065ea8 <free>:
10065ea8:	b510      	push	{r4, lr}
10065eaa:	4b03      	ldr	r3, [pc, #12]	@ (10065eb8 <free+0x10>)
10065eac:	0001      	movs	r1, r0
10065eae:	6818      	ldr	r0, [r3, #0]
10065eb0:	f000 fb74 	bl	1006659c <_free_r>
10065eb4:	bd10      	pop	{r4, pc}
10065eb6:	46c0      	nop			@ (mov r8, r8)
10065eb8:	200028b8 	.word	0x200028b8

10065ebc <sbrk_aligned>:
10065ebc:	b570      	push	{r4, r5, r6, lr}
10065ebe:	4e0f      	ldr	r6, [pc, #60]	@ (10065efc <sbrk_aligned+0x40>)
10065ec0:	000d      	movs	r5, r1
10065ec2:	6831      	ldr	r1, [r6, #0]
10065ec4:	0004      	movs	r4, r0
10065ec6:	2900      	cmp	r1, #0
10065ec8:	d102      	bne.n	10065ed0 <sbrk_aligned+0x14>
10065eca:	f000 fb2b 	bl	10066524 <_sbrk_r>
10065ece:	6030      	str	r0, [r6, #0]
10065ed0:	0029      	movs	r1, r5
10065ed2:	0020      	movs	r0, r4
10065ed4:	f000 fb26 	bl	10066524 <_sbrk_r>
10065ed8:	1c43      	adds	r3, r0, #1
10065eda:	d103      	bne.n	10065ee4 <sbrk_aligned+0x28>
10065edc:	2501      	movs	r5, #1
10065ede:	426d      	negs	r5, r5
10065ee0:	0028      	movs	r0, r5
10065ee2:	bd70      	pop	{r4, r5, r6, pc}
10065ee4:	2303      	movs	r3, #3
10065ee6:	1cc5      	adds	r5, r0, #3
10065ee8:	439d      	bics	r5, r3
10065eea:	42a8      	cmp	r0, r5
10065eec:	d0f8      	beq.n	10065ee0 <sbrk_aligned+0x24>
10065eee:	1a29      	subs	r1, r5, r0
10065ef0:	0020      	movs	r0, r4
10065ef2:	f000 fb17 	bl	10066524 <_sbrk_r>
10065ef6:	3001      	adds	r0, #1
10065ef8:	d1f2      	bne.n	10065ee0 <sbrk_aligned+0x24>
10065efa:	e7ef      	b.n	10065edc <sbrk_aligned+0x20>
10065efc:	200024c0 	.word	0x200024c0

10065f00 <_malloc_r>:
10065f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10065f02:	2203      	movs	r2, #3
10065f04:	1ccb      	adds	r3, r1, #3
10065f06:	4393      	bics	r3, r2
10065f08:	3308      	adds	r3, #8
10065f0a:	0005      	movs	r5, r0
10065f0c:	001f      	movs	r7, r3
10065f0e:	2b0c      	cmp	r3, #12
10065f10:	d234      	bcs.n	10065f7c <_malloc_r+0x7c>
10065f12:	270c      	movs	r7, #12
10065f14:	42b9      	cmp	r1, r7
10065f16:	d833      	bhi.n	10065f80 <_malloc_r+0x80>
10065f18:	0028      	movs	r0, r5
10065f1a:	f000 f871 	bl	10066000 <__malloc_lock>
10065f1e:	4e37      	ldr	r6, [pc, #220]	@ (10065ffc <_malloc_r+0xfc>)
10065f20:	6833      	ldr	r3, [r6, #0]
10065f22:	001c      	movs	r4, r3
10065f24:	2c00      	cmp	r4, #0
10065f26:	d12f      	bne.n	10065f88 <_malloc_r+0x88>
10065f28:	0039      	movs	r1, r7
10065f2a:	0028      	movs	r0, r5
10065f2c:	f7ff ffc6 	bl	10065ebc <sbrk_aligned>
10065f30:	0004      	movs	r4, r0
10065f32:	1c43      	adds	r3, r0, #1
10065f34:	d15f      	bne.n	10065ff6 <_malloc_r+0xf6>
10065f36:	6834      	ldr	r4, [r6, #0]
10065f38:	9400      	str	r4, [sp, #0]
10065f3a:	9b00      	ldr	r3, [sp, #0]
10065f3c:	2b00      	cmp	r3, #0
10065f3e:	d14a      	bne.n	10065fd6 <_malloc_r+0xd6>
10065f40:	2c00      	cmp	r4, #0
10065f42:	d052      	beq.n	10065fea <_malloc_r+0xea>
10065f44:	6823      	ldr	r3, [r4, #0]
10065f46:	0028      	movs	r0, r5
10065f48:	18e3      	adds	r3, r4, r3
10065f4a:	9900      	ldr	r1, [sp, #0]
10065f4c:	9301      	str	r3, [sp, #4]
10065f4e:	f000 fae9 	bl	10066524 <_sbrk_r>
10065f52:	9b01      	ldr	r3, [sp, #4]
10065f54:	4283      	cmp	r3, r0
10065f56:	d148      	bne.n	10065fea <_malloc_r+0xea>
10065f58:	6823      	ldr	r3, [r4, #0]
10065f5a:	0028      	movs	r0, r5
10065f5c:	1aff      	subs	r7, r7, r3
10065f5e:	0039      	movs	r1, r7
10065f60:	f7ff ffac 	bl	10065ebc <sbrk_aligned>
10065f64:	3001      	adds	r0, #1
10065f66:	d040      	beq.n	10065fea <_malloc_r+0xea>
10065f68:	6823      	ldr	r3, [r4, #0]
10065f6a:	19db      	adds	r3, r3, r7
10065f6c:	6023      	str	r3, [r4, #0]
10065f6e:	6833      	ldr	r3, [r6, #0]
10065f70:	685a      	ldr	r2, [r3, #4]
10065f72:	2a00      	cmp	r2, #0
10065f74:	d133      	bne.n	10065fde <_malloc_r+0xde>
10065f76:	9b00      	ldr	r3, [sp, #0]
10065f78:	6033      	str	r3, [r6, #0]
10065f7a:	e019      	b.n	10065fb0 <_malloc_r+0xb0>
10065f7c:	2b00      	cmp	r3, #0
10065f7e:	dac9      	bge.n	10065f14 <_malloc_r+0x14>
10065f80:	230c      	movs	r3, #12
10065f82:	602b      	str	r3, [r5, #0]
10065f84:	2000      	movs	r0, #0
10065f86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065f88:	6821      	ldr	r1, [r4, #0]
10065f8a:	1bc9      	subs	r1, r1, r7
10065f8c:	d420      	bmi.n	10065fd0 <_malloc_r+0xd0>
10065f8e:	290b      	cmp	r1, #11
10065f90:	d90a      	bls.n	10065fa8 <_malloc_r+0xa8>
10065f92:	19e2      	adds	r2, r4, r7
10065f94:	6027      	str	r7, [r4, #0]
10065f96:	42a3      	cmp	r3, r4
10065f98:	d104      	bne.n	10065fa4 <_malloc_r+0xa4>
10065f9a:	6032      	str	r2, [r6, #0]
10065f9c:	6863      	ldr	r3, [r4, #4]
10065f9e:	6011      	str	r1, [r2, #0]
10065fa0:	6053      	str	r3, [r2, #4]
10065fa2:	e005      	b.n	10065fb0 <_malloc_r+0xb0>
10065fa4:	605a      	str	r2, [r3, #4]
10065fa6:	e7f9      	b.n	10065f9c <_malloc_r+0x9c>
10065fa8:	6862      	ldr	r2, [r4, #4]
10065faa:	42a3      	cmp	r3, r4
10065fac:	d10e      	bne.n	10065fcc <_malloc_r+0xcc>
10065fae:	6032      	str	r2, [r6, #0]
10065fb0:	0028      	movs	r0, r5
10065fb2:	f000 f82d 	bl	10066010 <__malloc_unlock>
10065fb6:	0020      	movs	r0, r4
10065fb8:	2207      	movs	r2, #7
10065fba:	300b      	adds	r0, #11
10065fbc:	1d23      	adds	r3, r4, #4
10065fbe:	4390      	bics	r0, r2
10065fc0:	1ac2      	subs	r2, r0, r3
10065fc2:	4298      	cmp	r0, r3
10065fc4:	d0df      	beq.n	10065f86 <_malloc_r+0x86>
10065fc6:	1a1b      	subs	r3, r3, r0
10065fc8:	50a3      	str	r3, [r4, r2]
10065fca:	e7dc      	b.n	10065f86 <_malloc_r+0x86>
10065fcc:	605a      	str	r2, [r3, #4]
10065fce:	e7ef      	b.n	10065fb0 <_malloc_r+0xb0>
10065fd0:	0023      	movs	r3, r4
10065fd2:	6864      	ldr	r4, [r4, #4]
10065fd4:	e7a6      	b.n	10065f24 <_malloc_r+0x24>
10065fd6:	9c00      	ldr	r4, [sp, #0]
10065fd8:	6863      	ldr	r3, [r4, #4]
10065fda:	9300      	str	r3, [sp, #0]
10065fdc:	e7ad      	b.n	10065f3a <_malloc_r+0x3a>
10065fde:	001a      	movs	r2, r3
10065fe0:	685b      	ldr	r3, [r3, #4]
10065fe2:	42a3      	cmp	r3, r4
10065fe4:	d1fb      	bne.n	10065fde <_malloc_r+0xde>
10065fe6:	2300      	movs	r3, #0
10065fe8:	e7da      	b.n	10065fa0 <_malloc_r+0xa0>
10065fea:	230c      	movs	r3, #12
10065fec:	0028      	movs	r0, r5
10065fee:	602b      	str	r3, [r5, #0]
10065ff0:	f000 f80e 	bl	10066010 <__malloc_unlock>
10065ff4:	e7c6      	b.n	10065f84 <_malloc_r+0x84>
10065ff6:	6007      	str	r7, [r0, #0]
10065ff8:	e7da      	b.n	10065fb0 <_malloc_r+0xb0>
10065ffa:	46c0      	nop			@ (mov r8, r8)
10065ffc:	200024c4 	.word	0x200024c4

10066000 <__malloc_lock>:
10066000:	b510      	push	{r4, lr}
10066002:	4802      	ldr	r0, [pc, #8]	@ (1006600c <__malloc_lock+0xc>)
10066004:	f000 fabb 	bl	1006657e <__retarget_lock_acquire_recursive>
10066008:	bd10      	pop	{r4, pc}
1006600a:	46c0      	nop			@ (mov r8, r8)
1006600c:	20002608 	.word	0x20002608

10066010 <__malloc_unlock>:
10066010:	b510      	push	{r4, lr}
10066012:	4802      	ldr	r0, [pc, #8]	@ (1006601c <__malloc_unlock+0xc>)
10066014:	f000 fab4 	bl	10066580 <__retarget_lock_release_recursive>
10066018:	bd10      	pop	{r4, pc}
1006601a:	46c0      	nop			@ (mov r8, r8)
1006601c:	20002608 	.word	0x20002608

10066020 <std>:
10066020:	2300      	movs	r3, #0
10066022:	b510      	push	{r4, lr}
10066024:	0004      	movs	r4, r0
10066026:	6003      	str	r3, [r0, #0]
10066028:	6043      	str	r3, [r0, #4]
1006602a:	6083      	str	r3, [r0, #8]
1006602c:	8181      	strh	r1, [r0, #12]
1006602e:	6643      	str	r3, [r0, #100]	@ 0x64
10066030:	81c2      	strh	r2, [r0, #14]
10066032:	6103      	str	r3, [r0, #16]
10066034:	6143      	str	r3, [r0, #20]
10066036:	6183      	str	r3, [r0, #24]
10066038:	0019      	movs	r1, r3
1006603a:	2208      	movs	r2, #8
1006603c:	305c      	adds	r0, #92	@ 0x5c
1006603e:	f000 fa2f 	bl	100664a0 <memset>
10066042:	4b0b      	ldr	r3, [pc, #44]	@ (10066070 <std+0x50>)
10066044:	6224      	str	r4, [r4, #32]
10066046:	6263      	str	r3, [r4, #36]	@ 0x24
10066048:	4b0a      	ldr	r3, [pc, #40]	@ (10066074 <std+0x54>)
1006604a:	62a3      	str	r3, [r4, #40]	@ 0x28
1006604c:	4b0a      	ldr	r3, [pc, #40]	@ (10066078 <std+0x58>)
1006604e:	62e3      	str	r3, [r4, #44]	@ 0x2c
10066050:	4b0a      	ldr	r3, [pc, #40]	@ (1006607c <std+0x5c>)
10066052:	6323      	str	r3, [r4, #48]	@ 0x30
10066054:	4b0a      	ldr	r3, [pc, #40]	@ (10066080 <std+0x60>)
10066056:	429c      	cmp	r4, r3
10066058:	d005      	beq.n	10066066 <std+0x46>
1006605a:	4b0a      	ldr	r3, [pc, #40]	@ (10066084 <std+0x64>)
1006605c:	429c      	cmp	r4, r3
1006605e:	d002      	beq.n	10066066 <std+0x46>
10066060:	4b09      	ldr	r3, [pc, #36]	@ (10066088 <std+0x68>)
10066062:	429c      	cmp	r4, r3
10066064:	d103      	bne.n	1006606e <std+0x4e>
10066066:	0020      	movs	r0, r4
10066068:	3058      	adds	r0, #88	@ 0x58
1006606a:	f000 fa87 	bl	1006657c <__retarget_lock_init_recursive>
1006606e:	bd10      	pop	{r4, pc}
10066070:	100662ad 	.word	0x100662ad
10066074:	100662d5 	.word	0x100662d5
10066078:	1006630d 	.word	0x1006630d
1006607c:	10066339 	.word	0x10066339
10066080:	200024c8 	.word	0x200024c8
10066084:	20002530 	.word	0x20002530
10066088:	20002598 	.word	0x20002598

1006608c <stdio_exit_handler>:
1006608c:	b510      	push	{r4, lr}
1006608e:	4a03      	ldr	r2, [pc, #12]	@ (1006609c <stdio_exit_handler+0x10>)
10066090:	4903      	ldr	r1, [pc, #12]	@ (100660a0 <stdio_exit_handler+0x14>)
10066092:	4804      	ldr	r0, [pc, #16]	@ (100660a4 <stdio_exit_handler+0x18>)
10066094:	f000 f86c 	bl	10066170 <_fwalk_sglue>
10066098:	bd10      	pop	{r4, pc}
1006609a:	46c0      	nop			@ (mov r8, r8)
1006609c:	200028ac 	.word	0x200028ac
100660a0:	10066cf1 	.word	0x10066cf1
100660a4:	200028bc 	.word	0x200028bc

100660a8 <cleanup_stdio>:
100660a8:	6841      	ldr	r1, [r0, #4]
100660aa:	4b0b      	ldr	r3, [pc, #44]	@ (100660d8 <cleanup_stdio+0x30>)
100660ac:	b510      	push	{r4, lr}
100660ae:	0004      	movs	r4, r0
100660b0:	4299      	cmp	r1, r3
100660b2:	d001      	beq.n	100660b8 <cleanup_stdio+0x10>
100660b4:	f000 fe1c 	bl	10066cf0 <_fflush_r>
100660b8:	68a1      	ldr	r1, [r4, #8]
100660ba:	4b08      	ldr	r3, [pc, #32]	@ (100660dc <cleanup_stdio+0x34>)
100660bc:	4299      	cmp	r1, r3
100660be:	d002      	beq.n	100660c6 <cleanup_stdio+0x1e>
100660c0:	0020      	movs	r0, r4
100660c2:	f000 fe15 	bl	10066cf0 <_fflush_r>
100660c6:	68e1      	ldr	r1, [r4, #12]
100660c8:	4b05      	ldr	r3, [pc, #20]	@ (100660e0 <cleanup_stdio+0x38>)
100660ca:	4299      	cmp	r1, r3
100660cc:	d002      	beq.n	100660d4 <cleanup_stdio+0x2c>
100660ce:	0020      	movs	r0, r4
100660d0:	f000 fe0e 	bl	10066cf0 <_fflush_r>
100660d4:	bd10      	pop	{r4, pc}
100660d6:	46c0      	nop			@ (mov r8, r8)
100660d8:	200024c8 	.word	0x200024c8
100660dc:	20002530 	.word	0x20002530
100660e0:	20002598 	.word	0x20002598

100660e4 <global_stdio_init.part.0>:
100660e4:	b510      	push	{r4, lr}
100660e6:	4b09      	ldr	r3, [pc, #36]	@ (1006610c <global_stdio_init.part.0+0x28>)
100660e8:	4a09      	ldr	r2, [pc, #36]	@ (10066110 <global_stdio_init.part.0+0x2c>)
100660ea:	2104      	movs	r1, #4
100660ec:	601a      	str	r2, [r3, #0]
100660ee:	4809      	ldr	r0, [pc, #36]	@ (10066114 <global_stdio_init.part.0+0x30>)
100660f0:	2200      	movs	r2, #0
100660f2:	f7ff ff95 	bl	10066020 <std>
100660f6:	2201      	movs	r2, #1
100660f8:	2109      	movs	r1, #9
100660fa:	4807      	ldr	r0, [pc, #28]	@ (10066118 <global_stdio_init.part.0+0x34>)
100660fc:	f7ff ff90 	bl	10066020 <std>
10066100:	2202      	movs	r2, #2
10066102:	2112      	movs	r1, #18
10066104:	4805      	ldr	r0, [pc, #20]	@ (1006611c <global_stdio_init.part.0+0x38>)
10066106:	f7ff ff8b 	bl	10066020 <std>
1006610a:	bd10      	pop	{r4, pc}
1006610c:	20002600 	.word	0x20002600
10066110:	1006608d 	.word	0x1006608d
10066114:	200024c8 	.word	0x200024c8
10066118:	20002530 	.word	0x20002530
1006611c:	20002598 	.word	0x20002598

10066120 <__sfp_lock_acquire>:
10066120:	b510      	push	{r4, lr}
10066122:	4802      	ldr	r0, [pc, #8]	@ (1006612c <__sfp_lock_acquire+0xc>)
10066124:	f000 fa2b 	bl	1006657e <__retarget_lock_acquire_recursive>
10066128:	bd10      	pop	{r4, pc}
1006612a:	46c0      	nop			@ (mov r8, r8)
1006612c:	20002609 	.word	0x20002609

10066130 <__sfp_lock_release>:
10066130:	b510      	push	{r4, lr}
10066132:	4802      	ldr	r0, [pc, #8]	@ (1006613c <__sfp_lock_release+0xc>)
10066134:	f000 fa24 	bl	10066580 <__retarget_lock_release_recursive>
10066138:	bd10      	pop	{r4, pc}
1006613a:	46c0      	nop			@ (mov r8, r8)
1006613c:	20002609 	.word	0x20002609

10066140 <__sinit>:
10066140:	b510      	push	{r4, lr}
10066142:	0004      	movs	r4, r0
10066144:	f7ff ffec 	bl	10066120 <__sfp_lock_acquire>
10066148:	6a23      	ldr	r3, [r4, #32]
1006614a:	2b00      	cmp	r3, #0
1006614c:	d002      	beq.n	10066154 <__sinit+0x14>
1006614e:	f7ff ffef 	bl	10066130 <__sfp_lock_release>
10066152:	bd10      	pop	{r4, pc}
10066154:	4b04      	ldr	r3, [pc, #16]	@ (10066168 <__sinit+0x28>)
10066156:	6223      	str	r3, [r4, #32]
10066158:	4b04      	ldr	r3, [pc, #16]	@ (1006616c <__sinit+0x2c>)
1006615a:	681b      	ldr	r3, [r3, #0]
1006615c:	2b00      	cmp	r3, #0
1006615e:	d1f6      	bne.n	1006614e <__sinit+0xe>
10066160:	f7ff ffc0 	bl	100660e4 <global_stdio_init.part.0>
10066164:	e7f3      	b.n	1006614e <__sinit+0xe>
10066166:	46c0      	nop			@ (mov r8, r8)
10066168:	100660a9 	.word	0x100660a9
1006616c:	20002600 	.word	0x20002600

10066170 <_fwalk_sglue>:
10066170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10066172:	0014      	movs	r4, r2
10066174:	2600      	movs	r6, #0
10066176:	9000      	str	r0, [sp, #0]
10066178:	9101      	str	r1, [sp, #4]
1006617a:	68a5      	ldr	r5, [r4, #8]
1006617c:	6867      	ldr	r7, [r4, #4]
1006617e:	3f01      	subs	r7, #1
10066180:	d504      	bpl.n	1006618c <_fwalk_sglue+0x1c>
10066182:	6824      	ldr	r4, [r4, #0]
10066184:	2c00      	cmp	r4, #0
10066186:	d1f8      	bne.n	1006617a <_fwalk_sglue+0xa>
10066188:	0030      	movs	r0, r6
1006618a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006618c:	89ab      	ldrh	r3, [r5, #12]
1006618e:	2b01      	cmp	r3, #1
10066190:	d908      	bls.n	100661a4 <_fwalk_sglue+0x34>
10066192:	220e      	movs	r2, #14
10066194:	5eab      	ldrsh	r3, [r5, r2]
10066196:	3301      	adds	r3, #1
10066198:	d004      	beq.n	100661a4 <_fwalk_sglue+0x34>
1006619a:	0029      	movs	r1, r5
1006619c:	9800      	ldr	r0, [sp, #0]
1006619e:	9b01      	ldr	r3, [sp, #4]
100661a0:	4798      	blx	r3
100661a2:	4306      	orrs	r6, r0
100661a4:	3568      	adds	r5, #104	@ 0x68
100661a6:	e7ea      	b.n	1006617e <_fwalk_sglue+0xe>

100661a8 <_puts_r>:
100661a8:	6a03      	ldr	r3, [r0, #32]
100661aa:	b570      	push	{r4, r5, r6, lr}
100661ac:	0005      	movs	r5, r0
100661ae:	000e      	movs	r6, r1
100661b0:	6884      	ldr	r4, [r0, #8]
100661b2:	2b00      	cmp	r3, #0
100661b4:	d101      	bne.n	100661ba <_puts_r+0x12>
100661b6:	f7ff ffc3 	bl	10066140 <__sinit>
100661ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100661bc:	07db      	lsls	r3, r3, #31
100661be:	d405      	bmi.n	100661cc <_puts_r+0x24>
100661c0:	89a3      	ldrh	r3, [r4, #12]
100661c2:	059b      	lsls	r3, r3, #22
100661c4:	d402      	bmi.n	100661cc <_puts_r+0x24>
100661c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100661c8:	f000 f9d9 	bl	1006657e <__retarget_lock_acquire_recursive>
100661cc:	89a3      	ldrh	r3, [r4, #12]
100661ce:	071b      	lsls	r3, r3, #28
100661d0:	d502      	bpl.n	100661d8 <_puts_r+0x30>
100661d2:	6923      	ldr	r3, [r4, #16]
100661d4:	2b00      	cmp	r3, #0
100661d6:	d11f      	bne.n	10066218 <_puts_r+0x70>
100661d8:	0021      	movs	r1, r4
100661da:	0028      	movs	r0, r5
100661dc:	f000 f8f4 	bl	100663c8 <__swsetup_r>
100661e0:	2800      	cmp	r0, #0
100661e2:	d019      	beq.n	10066218 <_puts_r+0x70>
100661e4:	2501      	movs	r5, #1
100661e6:	426d      	negs	r5, r5
100661e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100661ea:	07db      	lsls	r3, r3, #31
100661ec:	d405      	bmi.n	100661fa <_puts_r+0x52>
100661ee:	89a3      	ldrh	r3, [r4, #12]
100661f0:	059b      	lsls	r3, r3, #22
100661f2:	d402      	bmi.n	100661fa <_puts_r+0x52>
100661f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100661f6:	f000 f9c3 	bl	10066580 <__retarget_lock_release_recursive>
100661fa:	0028      	movs	r0, r5
100661fc:	bd70      	pop	{r4, r5, r6, pc}
100661fe:	3601      	adds	r6, #1
10066200:	60a3      	str	r3, [r4, #8]
10066202:	2b00      	cmp	r3, #0
10066204:	da04      	bge.n	10066210 <_puts_r+0x68>
10066206:	69a2      	ldr	r2, [r4, #24]
10066208:	429a      	cmp	r2, r3
1006620a:	dc16      	bgt.n	1006623a <_puts_r+0x92>
1006620c:	290a      	cmp	r1, #10
1006620e:	d014      	beq.n	1006623a <_puts_r+0x92>
10066210:	6823      	ldr	r3, [r4, #0]
10066212:	1c5a      	adds	r2, r3, #1
10066214:	6022      	str	r2, [r4, #0]
10066216:	7019      	strb	r1, [r3, #0]
10066218:	68a3      	ldr	r3, [r4, #8]
1006621a:	7831      	ldrb	r1, [r6, #0]
1006621c:	3b01      	subs	r3, #1
1006621e:	2900      	cmp	r1, #0
10066220:	d1ed      	bne.n	100661fe <_puts_r+0x56>
10066222:	60a3      	str	r3, [r4, #8]
10066224:	2b00      	cmp	r3, #0
10066226:	da0f      	bge.n	10066248 <_puts_r+0xa0>
10066228:	0022      	movs	r2, r4
1006622a:	0028      	movs	r0, r5
1006622c:	310a      	adds	r1, #10
1006622e:	f000 f889 	bl	10066344 <__swbuf_r>
10066232:	3001      	adds	r0, #1
10066234:	d0d6      	beq.n	100661e4 <_puts_r+0x3c>
10066236:	250a      	movs	r5, #10
10066238:	e7d6      	b.n	100661e8 <_puts_r+0x40>
1006623a:	0022      	movs	r2, r4
1006623c:	0028      	movs	r0, r5
1006623e:	f000 f881 	bl	10066344 <__swbuf_r>
10066242:	3001      	adds	r0, #1
10066244:	d1e8      	bne.n	10066218 <_puts_r+0x70>
10066246:	e7cd      	b.n	100661e4 <_puts_r+0x3c>
10066248:	6823      	ldr	r3, [r4, #0]
1006624a:	1c5a      	adds	r2, r3, #1
1006624c:	6022      	str	r2, [r4, #0]
1006624e:	220a      	movs	r2, #10
10066250:	701a      	strb	r2, [r3, #0]
10066252:	e7f0      	b.n	10066236 <_puts_r+0x8e>

10066254 <puts>:
10066254:	b510      	push	{r4, lr}
10066256:	4b03      	ldr	r3, [pc, #12]	@ (10066264 <puts+0x10>)
10066258:	0001      	movs	r1, r0
1006625a:	6818      	ldr	r0, [r3, #0]
1006625c:	f7ff ffa4 	bl	100661a8 <_puts_r>
10066260:	bd10      	pop	{r4, pc}
10066262:	46c0      	nop			@ (mov r8, r8)
10066264:	200028b8 	.word	0x200028b8

10066268 <siprintf>:
10066268:	b40e      	push	{r1, r2, r3}
1006626a:	b510      	push	{r4, lr}
1006626c:	2400      	movs	r4, #0
1006626e:	490c      	ldr	r1, [pc, #48]	@ (100662a0 <siprintf+0x38>)
10066270:	b09d      	sub	sp, #116	@ 0x74
10066272:	ab1f      	add	r3, sp, #124	@ 0x7c
10066274:	9002      	str	r0, [sp, #8]
10066276:	9006      	str	r0, [sp, #24]
10066278:	9107      	str	r1, [sp, #28]
1006627a:	9104      	str	r1, [sp, #16]
1006627c:	4809      	ldr	r0, [pc, #36]	@ (100662a4 <siprintf+0x3c>)
1006627e:	490a      	ldr	r1, [pc, #40]	@ (100662a8 <siprintf+0x40>)
10066280:	cb04      	ldmia	r3!, {r2}
10066282:	9105      	str	r1, [sp, #20]
10066284:	6800      	ldr	r0, [r0, #0]
10066286:	a902      	add	r1, sp, #8
10066288:	9301      	str	r3, [sp, #4]
1006628a:	941b      	str	r4, [sp, #108]	@ 0x6c
1006628c:	f000 fa30 	bl	100666f0 <_svfiprintf_r>
10066290:	9b02      	ldr	r3, [sp, #8]
10066292:	701c      	strb	r4, [r3, #0]
10066294:	b01d      	add	sp, #116	@ 0x74
10066296:	bc10      	pop	{r4}
10066298:	bc08      	pop	{r3}
1006629a:	b003      	add	sp, #12
1006629c:	4718      	bx	r3
1006629e:	46c0      	nop			@ (mov r8, r8)
100662a0:	7fffffff 	.word	0x7fffffff
100662a4:	200028b8 	.word	0x200028b8
100662a8:	ffff0208 	.word	0xffff0208

100662ac <__sread>:
100662ac:	b570      	push	{r4, r5, r6, lr}
100662ae:	000c      	movs	r4, r1
100662b0:	250e      	movs	r5, #14
100662b2:	5f49      	ldrsh	r1, [r1, r5]
100662b4:	f000 f922 	bl	100664fc <_read_r>
100662b8:	2800      	cmp	r0, #0
100662ba:	db03      	blt.n	100662c4 <__sread+0x18>
100662bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
100662be:	181b      	adds	r3, r3, r0
100662c0:	6563      	str	r3, [r4, #84]	@ 0x54
100662c2:	bd70      	pop	{r4, r5, r6, pc}
100662c4:	89a3      	ldrh	r3, [r4, #12]
100662c6:	4a02      	ldr	r2, [pc, #8]	@ (100662d0 <__sread+0x24>)
100662c8:	4013      	ands	r3, r2
100662ca:	81a3      	strh	r3, [r4, #12]
100662cc:	e7f9      	b.n	100662c2 <__sread+0x16>
100662ce:	46c0      	nop			@ (mov r8, r8)
100662d0:	ffffefff 	.word	0xffffefff

100662d4 <__swrite>:
100662d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100662d6:	001f      	movs	r7, r3
100662d8:	898b      	ldrh	r3, [r1, #12]
100662da:	0005      	movs	r5, r0
100662dc:	000c      	movs	r4, r1
100662de:	0016      	movs	r6, r2
100662e0:	05db      	lsls	r3, r3, #23
100662e2:	d505      	bpl.n	100662f0 <__swrite+0x1c>
100662e4:	230e      	movs	r3, #14
100662e6:	5ec9      	ldrsh	r1, [r1, r3]
100662e8:	2200      	movs	r2, #0
100662ea:	2302      	movs	r3, #2
100662ec:	f000 f8f2 	bl	100664d4 <_lseek_r>
100662f0:	89a3      	ldrh	r3, [r4, #12]
100662f2:	4a05      	ldr	r2, [pc, #20]	@ (10066308 <__swrite+0x34>)
100662f4:	0028      	movs	r0, r5
100662f6:	4013      	ands	r3, r2
100662f8:	81a3      	strh	r3, [r4, #12]
100662fa:	0032      	movs	r2, r6
100662fc:	230e      	movs	r3, #14
100662fe:	5ee1      	ldrsh	r1, [r4, r3]
10066300:	003b      	movs	r3, r7
10066302:	f000 f921 	bl	10066548 <_write_r>
10066306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066308:	ffffefff 	.word	0xffffefff

1006630c <__sseek>:
1006630c:	b570      	push	{r4, r5, r6, lr}
1006630e:	000c      	movs	r4, r1
10066310:	250e      	movs	r5, #14
10066312:	5f49      	ldrsh	r1, [r1, r5]
10066314:	f000 f8de 	bl	100664d4 <_lseek_r>
10066318:	89a3      	ldrh	r3, [r4, #12]
1006631a:	1c42      	adds	r2, r0, #1
1006631c:	d103      	bne.n	10066326 <__sseek+0x1a>
1006631e:	4a05      	ldr	r2, [pc, #20]	@ (10066334 <__sseek+0x28>)
10066320:	4013      	ands	r3, r2
10066322:	81a3      	strh	r3, [r4, #12]
10066324:	bd70      	pop	{r4, r5, r6, pc}
10066326:	2280      	movs	r2, #128	@ 0x80
10066328:	0152      	lsls	r2, r2, #5
1006632a:	4313      	orrs	r3, r2
1006632c:	81a3      	strh	r3, [r4, #12]
1006632e:	6560      	str	r0, [r4, #84]	@ 0x54
10066330:	e7f8      	b.n	10066324 <__sseek+0x18>
10066332:	46c0      	nop			@ (mov r8, r8)
10066334:	ffffefff 	.word	0xffffefff

10066338 <__sclose>:
10066338:	b510      	push	{r4, lr}
1006633a:	230e      	movs	r3, #14
1006633c:	5ec9      	ldrsh	r1, [r1, r3]
1006633e:	f000 f8b7 	bl	100664b0 <_close_r>
10066342:	bd10      	pop	{r4, pc}

10066344 <__swbuf_r>:
10066344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066346:	0006      	movs	r6, r0
10066348:	000d      	movs	r5, r1
1006634a:	0014      	movs	r4, r2
1006634c:	2800      	cmp	r0, #0
1006634e:	d004      	beq.n	1006635a <__swbuf_r+0x16>
10066350:	6a03      	ldr	r3, [r0, #32]
10066352:	2b00      	cmp	r3, #0
10066354:	d101      	bne.n	1006635a <__swbuf_r+0x16>
10066356:	f7ff fef3 	bl	10066140 <__sinit>
1006635a:	69a3      	ldr	r3, [r4, #24]
1006635c:	60a3      	str	r3, [r4, #8]
1006635e:	89a3      	ldrh	r3, [r4, #12]
10066360:	071b      	lsls	r3, r3, #28
10066362:	d502      	bpl.n	1006636a <__swbuf_r+0x26>
10066364:	6923      	ldr	r3, [r4, #16]
10066366:	2b00      	cmp	r3, #0
10066368:	d109      	bne.n	1006637e <__swbuf_r+0x3a>
1006636a:	0021      	movs	r1, r4
1006636c:	0030      	movs	r0, r6
1006636e:	f000 f82b 	bl	100663c8 <__swsetup_r>
10066372:	2800      	cmp	r0, #0
10066374:	d003      	beq.n	1006637e <__swbuf_r+0x3a>
10066376:	2501      	movs	r5, #1
10066378:	426d      	negs	r5, r5
1006637a:	0028      	movs	r0, r5
1006637c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006637e:	6923      	ldr	r3, [r4, #16]
10066380:	6820      	ldr	r0, [r4, #0]
10066382:	b2ef      	uxtb	r7, r5
10066384:	1ac0      	subs	r0, r0, r3
10066386:	6963      	ldr	r3, [r4, #20]
10066388:	b2ed      	uxtb	r5, r5
1006638a:	4283      	cmp	r3, r0
1006638c:	dc05      	bgt.n	1006639a <__swbuf_r+0x56>
1006638e:	0021      	movs	r1, r4
10066390:	0030      	movs	r0, r6
10066392:	f000 fcad 	bl	10066cf0 <_fflush_r>
10066396:	2800      	cmp	r0, #0
10066398:	d1ed      	bne.n	10066376 <__swbuf_r+0x32>
1006639a:	68a3      	ldr	r3, [r4, #8]
1006639c:	3001      	adds	r0, #1
1006639e:	3b01      	subs	r3, #1
100663a0:	60a3      	str	r3, [r4, #8]
100663a2:	6823      	ldr	r3, [r4, #0]
100663a4:	1c5a      	adds	r2, r3, #1
100663a6:	6022      	str	r2, [r4, #0]
100663a8:	701f      	strb	r7, [r3, #0]
100663aa:	6963      	ldr	r3, [r4, #20]
100663ac:	4283      	cmp	r3, r0
100663ae:	d004      	beq.n	100663ba <__swbuf_r+0x76>
100663b0:	89a3      	ldrh	r3, [r4, #12]
100663b2:	07db      	lsls	r3, r3, #31
100663b4:	d5e1      	bpl.n	1006637a <__swbuf_r+0x36>
100663b6:	2d0a      	cmp	r5, #10
100663b8:	d1df      	bne.n	1006637a <__swbuf_r+0x36>
100663ba:	0021      	movs	r1, r4
100663bc:	0030      	movs	r0, r6
100663be:	f000 fc97 	bl	10066cf0 <_fflush_r>
100663c2:	2800      	cmp	r0, #0
100663c4:	d0d9      	beq.n	1006637a <__swbuf_r+0x36>
100663c6:	e7d6      	b.n	10066376 <__swbuf_r+0x32>

100663c8 <__swsetup_r>:
100663c8:	4b2d      	ldr	r3, [pc, #180]	@ (10066480 <__swsetup_r+0xb8>)
100663ca:	b570      	push	{r4, r5, r6, lr}
100663cc:	0005      	movs	r5, r0
100663ce:	6818      	ldr	r0, [r3, #0]
100663d0:	000c      	movs	r4, r1
100663d2:	2800      	cmp	r0, #0
100663d4:	d004      	beq.n	100663e0 <__swsetup_r+0x18>
100663d6:	6a03      	ldr	r3, [r0, #32]
100663d8:	2b00      	cmp	r3, #0
100663da:	d101      	bne.n	100663e0 <__swsetup_r+0x18>
100663dc:	f7ff feb0 	bl	10066140 <__sinit>
100663e0:	220c      	movs	r2, #12
100663e2:	5ea3      	ldrsh	r3, [r4, r2]
100663e4:	071a      	lsls	r2, r3, #28
100663e6:	d423      	bmi.n	10066430 <__swsetup_r+0x68>
100663e8:	06da      	lsls	r2, r3, #27
100663ea:	d407      	bmi.n	100663fc <__swsetup_r+0x34>
100663ec:	2209      	movs	r2, #9
100663ee:	602a      	str	r2, [r5, #0]
100663f0:	2240      	movs	r2, #64	@ 0x40
100663f2:	2001      	movs	r0, #1
100663f4:	4313      	orrs	r3, r2
100663f6:	81a3      	strh	r3, [r4, #12]
100663f8:	4240      	negs	r0, r0
100663fa:	e03a      	b.n	10066472 <__swsetup_r+0xaa>
100663fc:	075b      	lsls	r3, r3, #29
100663fe:	d513      	bpl.n	10066428 <__swsetup_r+0x60>
10066400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10066402:	2900      	cmp	r1, #0
10066404:	d008      	beq.n	10066418 <__swsetup_r+0x50>
10066406:	0023      	movs	r3, r4
10066408:	3344      	adds	r3, #68	@ 0x44
1006640a:	4299      	cmp	r1, r3
1006640c:	d002      	beq.n	10066414 <__swsetup_r+0x4c>
1006640e:	0028      	movs	r0, r5
10066410:	f000 f8c4 	bl	1006659c <_free_r>
10066414:	2300      	movs	r3, #0
10066416:	6363      	str	r3, [r4, #52]	@ 0x34
10066418:	2224      	movs	r2, #36	@ 0x24
1006641a:	89a3      	ldrh	r3, [r4, #12]
1006641c:	4393      	bics	r3, r2
1006641e:	81a3      	strh	r3, [r4, #12]
10066420:	2300      	movs	r3, #0
10066422:	6063      	str	r3, [r4, #4]
10066424:	6923      	ldr	r3, [r4, #16]
10066426:	6023      	str	r3, [r4, #0]
10066428:	2308      	movs	r3, #8
1006642a:	89a2      	ldrh	r2, [r4, #12]
1006642c:	4313      	orrs	r3, r2
1006642e:	81a3      	strh	r3, [r4, #12]
10066430:	6923      	ldr	r3, [r4, #16]
10066432:	2b00      	cmp	r3, #0
10066434:	d10b      	bne.n	1006644e <__swsetup_r+0x86>
10066436:	21a0      	movs	r1, #160	@ 0xa0
10066438:	2280      	movs	r2, #128	@ 0x80
1006643a:	89a3      	ldrh	r3, [r4, #12]
1006643c:	0089      	lsls	r1, r1, #2
1006643e:	0092      	lsls	r2, r2, #2
10066440:	400b      	ands	r3, r1
10066442:	4293      	cmp	r3, r2
10066444:	d003      	beq.n	1006644e <__swsetup_r+0x86>
10066446:	0021      	movs	r1, r4
10066448:	0028      	movs	r0, r5
1006644a:	f000 fca7 	bl	10066d9c <__smakebuf_r>
1006644e:	220c      	movs	r2, #12
10066450:	5ea3      	ldrsh	r3, [r4, r2]
10066452:	2101      	movs	r1, #1
10066454:	001a      	movs	r2, r3
10066456:	400a      	ands	r2, r1
10066458:	420b      	tst	r3, r1
1006645a:	d00b      	beq.n	10066474 <__swsetup_r+0xac>
1006645c:	2200      	movs	r2, #0
1006645e:	60a2      	str	r2, [r4, #8]
10066460:	6962      	ldr	r2, [r4, #20]
10066462:	4252      	negs	r2, r2
10066464:	61a2      	str	r2, [r4, #24]
10066466:	2000      	movs	r0, #0
10066468:	6922      	ldr	r2, [r4, #16]
1006646a:	4282      	cmp	r2, r0
1006646c:	d101      	bne.n	10066472 <__swsetup_r+0xaa>
1006646e:	061a      	lsls	r2, r3, #24
10066470:	d4be      	bmi.n	100663f0 <__swsetup_r+0x28>
10066472:	bd70      	pop	{r4, r5, r6, pc}
10066474:	0799      	lsls	r1, r3, #30
10066476:	d400      	bmi.n	1006647a <__swsetup_r+0xb2>
10066478:	6962      	ldr	r2, [r4, #20]
1006647a:	60a2      	str	r2, [r4, #8]
1006647c:	e7f3      	b.n	10066466 <__swsetup_r+0x9e>
1006647e:	46c0      	nop			@ (mov r8, r8)
10066480:	200028b8 	.word	0x200028b8

10066484 <memcmp>:
10066484:	b530      	push	{r4, r5, lr}
10066486:	2400      	movs	r4, #0
10066488:	3901      	subs	r1, #1
1006648a:	42a2      	cmp	r2, r4
1006648c:	d101      	bne.n	10066492 <memcmp+0xe>
1006648e:	2000      	movs	r0, #0
10066490:	e005      	b.n	1006649e <memcmp+0x1a>
10066492:	5d03      	ldrb	r3, [r0, r4]
10066494:	3401      	adds	r4, #1
10066496:	5d0d      	ldrb	r5, [r1, r4]
10066498:	42ab      	cmp	r3, r5
1006649a:	d0f6      	beq.n	1006648a <memcmp+0x6>
1006649c:	1b58      	subs	r0, r3, r5
1006649e:	bd30      	pop	{r4, r5, pc}

100664a0 <memset>:
100664a0:	0003      	movs	r3, r0
100664a2:	1882      	adds	r2, r0, r2
100664a4:	4293      	cmp	r3, r2
100664a6:	d100      	bne.n	100664aa <memset+0xa>
100664a8:	4770      	bx	lr
100664aa:	7019      	strb	r1, [r3, #0]
100664ac:	3301      	adds	r3, #1
100664ae:	e7f9      	b.n	100664a4 <memset+0x4>

100664b0 <_close_r>:
100664b0:	2300      	movs	r3, #0
100664b2:	b570      	push	{r4, r5, r6, lr}
100664b4:	4d06      	ldr	r5, [pc, #24]	@ (100664d0 <_close_r+0x20>)
100664b6:	0004      	movs	r4, r0
100664b8:	0008      	movs	r0, r1
100664ba:	602b      	str	r3, [r5, #0]
100664bc:	f7df fbd1 	bl	10045c62 <_close>
100664c0:	1c43      	adds	r3, r0, #1
100664c2:	d103      	bne.n	100664cc <_close_r+0x1c>
100664c4:	682b      	ldr	r3, [r5, #0]
100664c6:	2b00      	cmp	r3, #0
100664c8:	d000      	beq.n	100664cc <_close_r+0x1c>
100664ca:	6023      	str	r3, [r4, #0]
100664cc:	bd70      	pop	{r4, r5, r6, pc}
100664ce:	46c0      	nop			@ (mov r8, r8)
100664d0:	20002604 	.word	0x20002604

100664d4 <_lseek_r>:
100664d4:	b570      	push	{r4, r5, r6, lr}
100664d6:	0004      	movs	r4, r0
100664d8:	0008      	movs	r0, r1
100664da:	0011      	movs	r1, r2
100664dc:	001a      	movs	r2, r3
100664de:	2300      	movs	r3, #0
100664e0:	4d05      	ldr	r5, [pc, #20]	@ (100664f8 <_lseek_r+0x24>)
100664e2:	602b      	str	r3, [r5, #0]
100664e4:	f7df fbde 	bl	10045ca4 <_lseek>
100664e8:	1c43      	adds	r3, r0, #1
100664ea:	d103      	bne.n	100664f4 <_lseek_r+0x20>
100664ec:	682b      	ldr	r3, [r5, #0]
100664ee:	2b00      	cmp	r3, #0
100664f0:	d000      	beq.n	100664f4 <_lseek_r+0x20>
100664f2:	6023      	str	r3, [r4, #0]
100664f4:	bd70      	pop	{r4, r5, r6, pc}
100664f6:	46c0      	nop			@ (mov r8, r8)
100664f8:	20002604 	.word	0x20002604

100664fc <_read_r>:
100664fc:	b570      	push	{r4, r5, r6, lr}
100664fe:	0004      	movs	r4, r0
10066500:	0008      	movs	r0, r1
10066502:	0011      	movs	r1, r2
10066504:	001a      	movs	r2, r3
10066506:	2300      	movs	r3, #0
10066508:	4d05      	ldr	r5, [pc, #20]	@ (10066520 <_read_r+0x24>)
1006650a:	602b      	str	r3, [r5, #0]
1006650c:	f7df fb70 	bl	10045bf0 <_read>
10066510:	1c43      	adds	r3, r0, #1
10066512:	d103      	bne.n	1006651c <_read_r+0x20>
10066514:	682b      	ldr	r3, [r5, #0]
10066516:	2b00      	cmp	r3, #0
10066518:	d000      	beq.n	1006651c <_read_r+0x20>
1006651a:	6023      	str	r3, [r4, #0]
1006651c:	bd70      	pop	{r4, r5, r6, pc}
1006651e:	46c0      	nop			@ (mov r8, r8)
10066520:	20002604 	.word	0x20002604

10066524 <_sbrk_r>:
10066524:	2300      	movs	r3, #0
10066526:	b570      	push	{r4, r5, r6, lr}
10066528:	4d06      	ldr	r5, [pc, #24]	@ (10066544 <_sbrk_r+0x20>)
1006652a:	0004      	movs	r4, r0
1006652c:	0008      	movs	r0, r1
1006652e:	602b      	str	r3, [r5, #0]
10066530:	f7df fbc4 	bl	10045cbc <_sbrk>
10066534:	1c43      	adds	r3, r0, #1
10066536:	d103      	bne.n	10066540 <_sbrk_r+0x1c>
10066538:	682b      	ldr	r3, [r5, #0]
1006653a:	2b00      	cmp	r3, #0
1006653c:	d000      	beq.n	10066540 <_sbrk_r+0x1c>
1006653e:	6023      	str	r3, [r4, #0]
10066540:	bd70      	pop	{r4, r5, r6, pc}
10066542:	46c0      	nop			@ (mov r8, r8)
10066544:	20002604 	.word	0x20002604

10066548 <_write_r>:
10066548:	b570      	push	{r4, r5, r6, lr}
1006654a:	0004      	movs	r4, r0
1006654c:	0008      	movs	r0, r1
1006654e:	0011      	movs	r1, r2
10066550:	001a      	movs	r2, r3
10066552:	2300      	movs	r3, #0
10066554:	4d05      	ldr	r5, [pc, #20]	@ (1006656c <_write_r+0x24>)
10066556:	602b      	str	r3, [r5, #0]
10066558:	f7df fb67 	bl	10045c2a <_write>
1006655c:	1c43      	adds	r3, r0, #1
1006655e:	d103      	bne.n	10066568 <_write_r+0x20>
10066560:	682b      	ldr	r3, [r5, #0]
10066562:	2b00      	cmp	r3, #0
10066564:	d000      	beq.n	10066568 <_write_r+0x20>
10066566:	6023      	str	r3, [r4, #0]
10066568:	bd70      	pop	{r4, r5, r6, pc}
1006656a:	46c0      	nop			@ (mov r8, r8)
1006656c:	20002604 	.word	0x20002604

10066570 <__errno>:
10066570:	4b01      	ldr	r3, [pc, #4]	@ (10066578 <__errno+0x8>)
10066572:	6818      	ldr	r0, [r3, #0]
10066574:	4770      	bx	lr
10066576:	46c0      	nop			@ (mov r8, r8)
10066578:	200028b8 	.word	0x200028b8

1006657c <__retarget_lock_init_recursive>:
1006657c:	4770      	bx	lr

1006657e <__retarget_lock_acquire_recursive>:
1006657e:	4770      	bx	lr

10066580 <__retarget_lock_release_recursive>:
10066580:	4770      	bx	lr

10066582 <__aeabi_memcpy>:
10066582:	b510      	push	{r4, lr}
10066584:	f000 f801 	bl	1006658a <memcpy>
10066588:	bd10      	pop	{r4, pc}

1006658a <memcpy>:
1006658a:	2300      	movs	r3, #0
1006658c:	b510      	push	{r4, lr}
1006658e:	429a      	cmp	r2, r3
10066590:	d100      	bne.n	10066594 <memcpy+0xa>
10066592:	bd10      	pop	{r4, pc}
10066594:	5ccc      	ldrb	r4, [r1, r3]
10066596:	54c4      	strb	r4, [r0, r3]
10066598:	3301      	adds	r3, #1
1006659a:	e7f8      	b.n	1006658e <memcpy+0x4>

1006659c <_free_r>:
1006659c:	b570      	push	{r4, r5, r6, lr}
1006659e:	0005      	movs	r5, r0
100665a0:	1e0c      	subs	r4, r1, #0
100665a2:	d010      	beq.n	100665c6 <_free_r+0x2a>
100665a4:	3c04      	subs	r4, #4
100665a6:	6823      	ldr	r3, [r4, #0]
100665a8:	2b00      	cmp	r3, #0
100665aa:	da00      	bge.n	100665ae <_free_r+0x12>
100665ac:	18e4      	adds	r4, r4, r3
100665ae:	0028      	movs	r0, r5
100665b0:	f7ff fd26 	bl	10066000 <__malloc_lock>
100665b4:	4a1d      	ldr	r2, [pc, #116]	@ (1006662c <_free_r+0x90>)
100665b6:	6813      	ldr	r3, [r2, #0]
100665b8:	2b00      	cmp	r3, #0
100665ba:	d105      	bne.n	100665c8 <_free_r+0x2c>
100665bc:	6063      	str	r3, [r4, #4]
100665be:	6014      	str	r4, [r2, #0]
100665c0:	0028      	movs	r0, r5
100665c2:	f7ff fd25 	bl	10066010 <__malloc_unlock>
100665c6:	bd70      	pop	{r4, r5, r6, pc}
100665c8:	42a3      	cmp	r3, r4
100665ca:	d908      	bls.n	100665de <_free_r+0x42>
100665cc:	6820      	ldr	r0, [r4, #0]
100665ce:	1821      	adds	r1, r4, r0
100665d0:	428b      	cmp	r3, r1
100665d2:	d1f3      	bne.n	100665bc <_free_r+0x20>
100665d4:	6819      	ldr	r1, [r3, #0]
100665d6:	685b      	ldr	r3, [r3, #4]
100665d8:	1809      	adds	r1, r1, r0
100665da:	6021      	str	r1, [r4, #0]
100665dc:	e7ee      	b.n	100665bc <_free_r+0x20>
100665de:	001a      	movs	r2, r3
100665e0:	685b      	ldr	r3, [r3, #4]
100665e2:	2b00      	cmp	r3, #0
100665e4:	d001      	beq.n	100665ea <_free_r+0x4e>
100665e6:	42a3      	cmp	r3, r4
100665e8:	d9f9      	bls.n	100665de <_free_r+0x42>
100665ea:	6811      	ldr	r1, [r2, #0]
100665ec:	1850      	adds	r0, r2, r1
100665ee:	42a0      	cmp	r0, r4
100665f0:	d10b      	bne.n	1006660a <_free_r+0x6e>
100665f2:	6820      	ldr	r0, [r4, #0]
100665f4:	1809      	adds	r1, r1, r0
100665f6:	1850      	adds	r0, r2, r1
100665f8:	6011      	str	r1, [r2, #0]
100665fa:	4283      	cmp	r3, r0
100665fc:	d1e0      	bne.n	100665c0 <_free_r+0x24>
100665fe:	6818      	ldr	r0, [r3, #0]
10066600:	685b      	ldr	r3, [r3, #4]
10066602:	1841      	adds	r1, r0, r1
10066604:	6011      	str	r1, [r2, #0]
10066606:	6053      	str	r3, [r2, #4]
10066608:	e7da      	b.n	100665c0 <_free_r+0x24>
1006660a:	42a0      	cmp	r0, r4
1006660c:	d902      	bls.n	10066614 <_free_r+0x78>
1006660e:	230c      	movs	r3, #12
10066610:	602b      	str	r3, [r5, #0]
10066612:	e7d5      	b.n	100665c0 <_free_r+0x24>
10066614:	6820      	ldr	r0, [r4, #0]
10066616:	1821      	adds	r1, r4, r0
10066618:	428b      	cmp	r3, r1
1006661a:	d103      	bne.n	10066624 <_free_r+0x88>
1006661c:	6819      	ldr	r1, [r3, #0]
1006661e:	685b      	ldr	r3, [r3, #4]
10066620:	1809      	adds	r1, r1, r0
10066622:	6021      	str	r1, [r4, #0]
10066624:	6063      	str	r3, [r4, #4]
10066626:	6054      	str	r4, [r2, #4]
10066628:	e7ca      	b.n	100665c0 <_free_r+0x24>
1006662a:	46c0      	nop			@ (mov r8, r8)
1006662c:	200024c4 	.word	0x200024c4

10066630 <__ssputs_r>:
10066630:	b5f0      	push	{r4, r5, r6, r7, lr}
10066632:	688e      	ldr	r6, [r1, #8]
10066634:	b085      	sub	sp, #20
10066636:	001f      	movs	r7, r3
10066638:	000c      	movs	r4, r1
1006663a:	680b      	ldr	r3, [r1, #0]
1006663c:	9002      	str	r0, [sp, #8]
1006663e:	9203      	str	r2, [sp, #12]
10066640:	42be      	cmp	r6, r7
10066642:	d830      	bhi.n	100666a6 <__ssputs_r+0x76>
10066644:	210c      	movs	r1, #12
10066646:	5e62      	ldrsh	r2, [r4, r1]
10066648:	2190      	movs	r1, #144	@ 0x90
1006664a:	00c9      	lsls	r1, r1, #3
1006664c:	420a      	tst	r2, r1
1006664e:	d028      	beq.n	100666a2 <__ssputs_r+0x72>
10066650:	2003      	movs	r0, #3
10066652:	6921      	ldr	r1, [r4, #16]
10066654:	1a5b      	subs	r3, r3, r1
10066656:	9301      	str	r3, [sp, #4]
10066658:	6963      	ldr	r3, [r4, #20]
1006665a:	4343      	muls	r3, r0
1006665c:	9801      	ldr	r0, [sp, #4]
1006665e:	0fdd      	lsrs	r5, r3, #31
10066660:	18ed      	adds	r5, r5, r3
10066662:	1c7b      	adds	r3, r7, #1
10066664:	181b      	adds	r3, r3, r0
10066666:	106d      	asrs	r5, r5, #1
10066668:	42ab      	cmp	r3, r5
1006666a:	d900      	bls.n	1006666e <__ssputs_r+0x3e>
1006666c:	001d      	movs	r5, r3
1006666e:	0552      	lsls	r2, r2, #21
10066670:	d528      	bpl.n	100666c4 <__ssputs_r+0x94>
10066672:	0029      	movs	r1, r5
10066674:	9802      	ldr	r0, [sp, #8]
10066676:	f7ff fc43 	bl	10065f00 <_malloc_r>
1006667a:	1e06      	subs	r6, r0, #0
1006667c:	d02c      	beq.n	100666d8 <__ssputs_r+0xa8>
1006667e:	9a01      	ldr	r2, [sp, #4]
10066680:	6921      	ldr	r1, [r4, #16]
10066682:	f7ff ff82 	bl	1006658a <memcpy>
10066686:	89a2      	ldrh	r2, [r4, #12]
10066688:	4b18      	ldr	r3, [pc, #96]	@ (100666ec <__ssputs_r+0xbc>)
1006668a:	401a      	ands	r2, r3
1006668c:	2380      	movs	r3, #128	@ 0x80
1006668e:	4313      	orrs	r3, r2
10066690:	81a3      	strh	r3, [r4, #12]
10066692:	9b01      	ldr	r3, [sp, #4]
10066694:	6126      	str	r6, [r4, #16]
10066696:	18f6      	adds	r6, r6, r3
10066698:	6026      	str	r6, [r4, #0]
1006669a:	003e      	movs	r6, r7
1006669c:	6165      	str	r5, [r4, #20]
1006669e:	1aed      	subs	r5, r5, r3
100666a0:	60a5      	str	r5, [r4, #8]
100666a2:	42be      	cmp	r6, r7
100666a4:	d900      	bls.n	100666a8 <__ssputs_r+0x78>
100666a6:	003e      	movs	r6, r7
100666a8:	0032      	movs	r2, r6
100666aa:	9903      	ldr	r1, [sp, #12]
100666ac:	6820      	ldr	r0, [r4, #0]
100666ae:	f000 fbb6 	bl	10066e1e <memmove>
100666b2:	2000      	movs	r0, #0
100666b4:	68a3      	ldr	r3, [r4, #8]
100666b6:	1b9b      	subs	r3, r3, r6
100666b8:	60a3      	str	r3, [r4, #8]
100666ba:	6823      	ldr	r3, [r4, #0]
100666bc:	199b      	adds	r3, r3, r6
100666be:	6023      	str	r3, [r4, #0]
100666c0:	b005      	add	sp, #20
100666c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100666c4:	002a      	movs	r2, r5
100666c6:	9802      	ldr	r0, [sp, #8]
100666c8:	f000 fbeb 	bl	10066ea2 <_realloc_r>
100666cc:	1e06      	subs	r6, r0, #0
100666ce:	d1e0      	bne.n	10066692 <__ssputs_r+0x62>
100666d0:	6921      	ldr	r1, [r4, #16]
100666d2:	9802      	ldr	r0, [sp, #8]
100666d4:	f7ff ff62 	bl	1006659c <_free_r>
100666d8:	230c      	movs	r3, #12
100666da:	2001      	movs	r0, #1
100666dc:	9a02      	ldr	r2, [sp, #8]
100666de:	4240      	negs	r0, r0
100666e0:	6013      	str	r3, [r2, #0]
100666e2:	89a2      	ldrh	r2, [r4, #12]
100666e4:	3334      	adds	r3, #52	@ 0x34
100666e6:	4313      	orrs	r3, r2
100666e8:	81a3      	strh	r3, [r4, #12]
100666ea:	e7e9      	b.n	100666c0 <__ssputs_r+0x90>
100666ec:	fffffb7f 	.word	0xfffffb7f

100666f0 <_svfiprintf_r>:
100666f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100666f2:	b0a1      	sub	sp, #132	@ 0x84
100666f4:	9003      	str	r0, [sp, #12]
100666f6:	001d      	movs	r5, r3
100666f8:	898b      	ldrh	r3, [r1, #12]
100666fa:	000f      	movs	r7, r1
100666fc:	0016      	movs	r6, r2
100666fe:	061b      	lsls	r3, r3, #24
10066700:	d511      	bpl.n	10066726 <_svfiprintf_r+0x36>
10066702:	690b      	ldr	r3, [r1, #16]
10066704:	2b00      	cmp	r3, #0
10066706:	d10e      	bne.n	10066726 <_svfiprintf_r+0x36>
10066708:	2140      	movs	r1, #64	@ 0x40
1006670a:	f7ff fbf9 	bl	10065f00 <_malloc_r>
1006670e:	6038      	str	r0, [r7, #0]
10066710:	6138      	str	r0, [r7, #16]
10066712:	2800      	cmp	r0, #0
10066714:	d105      	bne.n	10066722 <_svfiprintf_r+0x32>
10066716:	230c      	movs	r3, #12
10066718:	9a03      	ldr	r2, [sp, #12]
1006671a:	6013      	str	r3, [r2, #0]
1006671c:	2001      	movs	r0, #1
1006671e:	4240      	negs	r0, r0
10066720:	e0cf      	b.n	100668c2 <_svfiprintf_r+0x1d2>
10066722:	2340      	movs	r3, #64	@ 0x40
10066724:	617b      	str	r3, [r7, #20]
10066726:	2300      	movs	r3, #0
10066728:	ac08      	add	r4, sp, #32
1006672a:	6163      	str	r3, [r4, #20]
1006672c:	3320      	adds	r3, #32
1006672e:	7663      	strb	r3, [r4, #25]
10066730:	3310      	adds	r3, #16
10066732:	76a3      	strb	r3, [r4, #26]
10066734:	9507      	str	r5, [sp, #28]
10066736:	0035      	movs	r5, r6
10066738:	782b      	ldrb	r3, [r5, #0]
1006673a:	2b00      	cmp	r3, #0
1006673c:	d001      	beq.n	10066742 <_svfiprintf_r+0x52>
1006673e:	2b25      	cmp	r3, #37	@ 0x25
10066740:	d148      	bne.n	100667d4 <_svfiprintf_r+0xe4>
10066742:	1bab      	subs	r3, r5, r6
10066744:	9305      	str	r3, [sp, #20]
10066746:	42b5      	cmp	r5, r6
10066748:	d00b      	beq.n	10066762 <_svfiprintf_r+0x72>
1006674a:	0032      	movs	r2, r6
1006674c:	0039      	movs	r1, r7
1006674e:	9803      	ldr	r0, [sp, #12]
10066750:	f7ff ff6e 	bl	10066630 <__ssputs_r>
10066754:	3001      	adds	r0, #1
10066756:	d100      	bne.n	1006675a <_svfiprintf_r+0x6a>
10066758:	e0ae      	b.n	100668b8 <_svfiprintf_r+0x1c8>
1006675a:	6963      	ldr	r3, [r4, #20]
1006675c:	9a05      	ldr	r2, [sp, #20]
1006675e:	189b      	adds	r3, r3, r2
10066760:	6163      	str	r3, [r4, #20]
10066762:	782b      	ldrb	r3, [r5, #0]
10066764:	2b00      	cmp	r3, #0
10066766:	d100      	bne.n	1006676a <_svfiprintf_r+0x7a>
10066768:	e0a6      	b.n	100668b8 <_svfiprintf_r+0x1c8>
1006676a:	2201      	movs	r2, #1
1006676c:	2300      	movs	r3, #0
1006676e:	4252      	negs	r2, r2
10066770:	6062      	str	r2, [r4, #4]
10066772:	a904      	add	r1, sp, #16
10066774:	3254      	adds	r2, #84	@ 0x54
10066776:	1852      	adds	r2, r2, r1
10066778:	1c6e      	adds	r6, r5, #1
1006677a:	6023      	str	r3, [r4, #0]
1006677c:	60e3      	str	r3, [r4, #12]
1006677e:	60a3      	str	r3, [r4, #8]
10066780:	7013      	strb	r3, [r2, #0]
10066782:	65a3      	str	r3, [r4, #88]	@ 0x58
10066784:	4b54      	ldr	r3, [pc, #336]	@ (100668d8 <_svfiprintf_r+0x1e8>)
10066786:	2205      	movs	r2, #5
10066788:	0018      	movs	r0, r3
1006678a:	7831      	ldrb	r1, [r6, #0]
1006678c:	9305      	str	r3, [sp, #20]
1006678e:	f000 fb7d 	bl	10066e8c <memchr>
10066792:	1c75      	adds	r5, r6, #1
10066794:	2800      	cmp	r0, #0
10066796:	d11f      	bne.n	100667d8 <_svfiprintf_r+0xe8>
10066798:	6822      	ldr	r2, [r4, #0]
1006679a:	06d3      	lsls	r3, r2, #27
1006679c:	d504      	bpl.n	100667a8 <_svfiprintf_r+0xb8>
1006679e:	2353      	movs	r3, #83	@ 0x53
100667a0:	a904      	add	r1, sp, #16
100667a2:	185b      	adds	r3, r3, r1
100667a4:	2120      	movs	r1, #32
100667a6:	7019      	strb	r1, [r3, #0]
100667a8:	0713      	lsls	r3, r2, #28
100667aa:	d504      	bpl.n	100667b6 <_svfiprintf_r+0xc6>
100667ac:	2353      	movs	r3, #83	@ 0x53
100667ae:	a904      	add	r1, sp, #16
100667b0:	185b      	adds	r3, r3, r1
100667b2:	212b      	movs	r1, #43	@ 0x2b
100667b4:	7019      	strb	r1, [r3, #0]
100667b6:	7833      	ldrb	r3, [r6, #0]
100667b8:	2b2a      	cmp	r3, #42	@ 0x2a
100667ba:	d016      	beq.n	100667ea <_svfiprintf_r+0xfa>
100667bc:	0035      	movs	r5, r6
100667be:	2100      	movs	r1, #0
100667c0:	200a      	movs	r0, #10
100667c2:	68e3      	ldr	r3, [r4, #12]
100667c4:	782a      	ldrb	r2, [r5, #0]
100667c6:	1c6e      	adds	r6, r5, #1
100667c8:	3a30      	subs	r2, #48	@ 0x30
100667ca:	2a09      	cmp	r2, #9
100667cc:	d950      	bls.n	10066870 <_svfiprintf_r+0x180>
100667ce:	2900      	cmp	r1, #0
100667d0:	d111      	bne.n	100667f6 <_svfiprintf_r+0x106>
100667d2:	e017      	b.n	10066804 <_svfiprintf_r+0x114>
100667d4:	3501      	adds	r5, #1
100667d6:	e7af      	b.n	10066738 <_svfiprintf_r+0x48>
100667d8:	9b05      	ldr	r3, [sp, #20]
100667da:	6822      	ldr	r2, [r4, #0]
100667dc:	1ac0      	subs	r0, r0, r3
100667de:	2301      	movs	r3, #1
100667e0:	4083      	lsls	r3, r0
100667e2:	4313      	orrs	r3, r2
100667e4:	002e      	movs	r6, r5
100667e6:	6023      	str	r3, [r4, #0]
100667e8:	e7cc      	b.n	10066784 <_svfiprintf_r+0x94>
100667ea:	9b07      	ldr	r3, [sp, #28]
100667ec:	1d19      	adds	r1, r3, #4
100667ee:	681b      	ldr	r3, [r3, #0]
100667f0:	9107      	str	r1, [sp, #28]
100667f2:	2b00      	cmp	r3, #0
100667f4:	db01      	blt.n	100667fa <_svfiprintf_r+0x10a>
100667f6:	930b      	str	r3, [sp, #44]	@ 0x2c
100667f8:	e004      	b.n	10066804 <_svfiprintf_r+0x114>
100667fa:	425b      	negs	r3, r3
100667fc:	60e3      	str	r3, [r4, #12]
100667fe:	2302      	movs	r3, #2
10066800:	4313      	orrs	r3, r2
10066802:	6023      	str	r3, [r4, #0]
10066804:	782b      	ldrb	r3, [r5, #0]
10066806:	2b2e      	cmp	r3, #46	@ 0x2e
10066808:	d10c      	bne.n	10066824 <_svfiprintf_r+0x134>
1006680a:	786b      	ldrb	r3, [r5, #1]
1006680c:	2b2a      	cmp	r3, #42	@ 0x2a
1006680e:	d134      	bne.n	1006687a <_svfiprintf_r+0x18a>
10066810:	9b07      	ldr	r3, [sp, #28]
10066812:	3502      	adds	r5, #2
10066814:	1d1a      	adds	r2, r3, #4
10066816:	681b      	ldr	r3, [r3, #0]
10066818:	9207      	str	r2, [sp, #28]
1006681a:	2b00      	cmp	r3, #0
1006681c:	da01      	bge.n	10066822 <_svfiprintf_r+0x132>
1006681e:	2301      	movs	r3, #1
10066820:	425b      	negs	r3, r3
10066822:	9309      	str	r3, [sp, #36]	@ 0x24
10066824:	4e2d      	ldr	r6, [pc, #180]	@ (100668dc <_svfiprintf_r+0x1ec>)
10066826:	2203      	movs	r2, #3
10066828:	0030      	movs	r0, r6
1006682a:	7829      	ldrb	r1, [r5, #0]
1006682c:	f000 fb2e 	bl	10066e8c <memchr>
10066830:	2800      	cmp	r0, #0
10066832:	d006      	beq.n	10066842 <_svfiprintf_r+0x152>
10066834:	2340      	movs	r3, #64	@ 0x40
10066836:	1b80      	subs	r0, r0, r6
10066838:	4083      	lsls	r3, r0
1006683a:	6822      	ldr	r2, [r4, #0]
1006683c:	3501      	adds	r5, #1
1006683e:	4313      	orrs	r3, r2
10066840:	6023      	str	r3, [r4, #0]
10066842:	7829      	ldrb	r1, [r5, #0]
10066844:	2206      	movs	r2, #6
10066846:	4826      	ldr	r0, [pc, #152]	@ (100668e0 <_svfiprintf_r+0x1f0>)
10066848:	1c6e      	adds	r6, r5, #1
1006684a:	7621      	strb	r1, [r4, #24]
1006684c:	f000 fb1e 	bl	10066e8c <memchr>
10066850:	2800      	cmp	r0, #0
10066852:	d038      	beq.n	100668c6 <_svfiprintf_r+0x1d6>
10066854:	4b23      	ldr	r3, [pc, #140]	@ (100668e4 <_svfiprintf_r+0x1f4>)
10066856:	2b00      	cmp	r3, #0
10066858:	d122      	bne.n	100668a0 <_svfiprintf_r+0x1b0>
1006685a:	2207      	movs	r2, #7
1006685c:	9b07      	ldr	r3, [sp, #28]
1006685e:	3307      	adds	r3, #7
10066860:	4393      	bics	r3, r2
10066862:	3308      	adds	r3, #8
10066864:	9307      	str	r3, [sp, #28]
10066866:	6963      	ldr	r3, [r4, #20]
10066868:	9a04      	ldr	r2, [sp, #16]
1006686a:	189b      	adds	r3, r3, r2
1006686c:	6163      	str	r3, [r4, #20]
1006686e:	e762      	b.n	10066736 <_svfiprintf_r+0x46>
10066870:	4343      	muls	r3, r0
10066872:	0035      	movs	r5, r6
10066874:	2101      	movs	r1, #1
10066876:	189b      	adds	r3, r3, r2
10066878:	e7a4      	b.n	100667c4 <_svfiprintf_r+0xd4>
1006687a:	2300      	movs	r3, #0
1006687c:	200a      	movs	r0, #10
1006687e:	0019      	movs	r1, r3
10066880:	3501      	adds	r5, #1
10066882:	6063      	str	r3, [r4, #4]
10066884:	782a      	ldrb	r2, [r5, #0]
10066886:	1c6e      	adds	r6, r5, #1
10066888:	3a30      	subs	r2, #48	@ 0x30
1006688a:	2a09      	cmp	r2, #9
1006688c:	d903      	bls.n	10066896 <_svfiprintf_r+0x1a6>
1006688e:	2b00      	cmp	r3, #0
10066890:	d0c8      	beq.n	10066824 <_svfiprintf_r+0x134>
10066892:	9109      	str	r1, [sp, #36]	@ 0x24
10066894:	e7c6      	b.n	10066824 <_svfiprintf_r+0x134>
10066896:	4341      	muls	r1, r0
10066898:	0035      	movs	r5, r6
1006689a:	2301      	movs	r3, #1
1006689c:	1889      	adds	r1, r1, r2
1006689e:	e7f1      	b.n	10066884 <_svfiprintf_r+0x194>
100668a0:	aa07      	add	r2, sp, #28
100668a2:	9200      	str	r2, [sp, #0]
100668a4:	0021      	movs	r1, r4
100668a6:	003a      	movs	r2, r7
100668a8:	4b0f      	ldr	r3, [pc, #60]	@ (100668e8 <_svfiprintf_r+0x1f8>)
100668aa:	9803      	ldr	r0, [sp, #12]
100668ac:	e000      	b.n	100668b0 <_svfiprintf_r+0x1c0>
100668ae:	bf00      	nop
100668b0:	9004      	str	r0, [sp, #16]
100668b2:	9b04      	ldr	r3, [sp, #16]
100668b4:	3301      	adds	r3, #1
100668b6:	d1d6      	bne.n	10066866 <_svfiprintf_r+0x176>
100668b8:	89bb      	ldrh	r3, [r7, #12]
100668ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
100668bc:	065b      	lsls	r3, r3, #25
100668be:	d500      	bpl.n	100668c2 <_svfiprintf_r+0x1d2>
100668c0:	e72c      	b.n	1006671c <_svfiprintf_r+0x2c>
100668c2:	b021      	add	sp, #132	@ 0x84
100668c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100668c6:	aa07      	add	r2, sp, #28
100668c8:	9200      	str	r2, [sp, #0]
100668ca:	0021      	movs	r1, r4
100668cc:	003a      	movs	r2, r7
100668ce:	4b06      	ldr	r3, [pc, #24]	@ (100668e8 <_svfiprintf_r+0x1f8>)
100668d0:	9803      	ldr	r0, [sp, #12]
100668d2:	f000 f87b 	bl	100669cc <_printf_i>
100668d6:	e7eb      	b.n	100668b0 <_svfiprintf_r+0x1c0>
100668d8:	10068285 	.word	0x10068285
100668dc:	1006828b 	.word	0x1006828b
100668e0:	1006828f 	.word	0x1006828f
100668e4:	00000000 	.word	0x00000000
100668e8:	10066631 	.word	0x10066631

100668ec <_printf_common>:
100668ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100668ee:	0016      	movs	r6, r2
100668f0:	9301      	str	r3, [sp, #4]
100668f2:	688a      	ldr	r2, [r1, #8]
100668f4:	690b      	ldr	r3, [r1, #16]
100668f6:	000c      	movs	r4, r1
100668f8:	9000      	str	r0, [sp, #0]
100668fa:	4293      	cmp	r3, r2
100668fc:	da00      	bge.n	10066900 <_printf_common+0x14>
100668fe:	0013      	movs	r3, r2
10066900:	0022      	movs	r2, r4
10066902:	6033      	str	r3, [r6, #0]
10066904:	3243      	adds	r2, #67	@ 0x43
10066906:	7812      	ldrb	r2, [r2, #0]
10066908:	2a00      	cmp	r2, #0
1006690a:	d001      	beq.n	10066910 <_printf_common+0x24>
1006690c:	3301      	adds	r3, #1
1006690e:	6033      	str	r3, [r6, #0]
10066910:	6823      	ldr	r3, [r4, #0]
10066912:	069b      	lsls	r3, r3, #26
10066914:	d502      	bpl.n	1006691c <_printf_common+0x30>
10066916:	6833      	ldr	r3, [r6, #0]
10066918:	3302      	adds	r3, #2
1006691a:	6033      	str	r3, [r6, #0]
1006691c:	6822      	ldr	r2, [r4, #0]
1006691e:	2306      	movs	r3, #6
10066920:	0015      	movs	r5, r2
10066922:	401d      	ands	r5, r3
10066924:	421a      	tst	r2, r3
10066926:	d027      	beq.n	10066978 <_printf_common+0x8c>
10066928:	0023      	movs	r3, r4
1006692a:	3343      	adds	r3, #67	@ 0x43
1006692c:	781b      	ldrb	r3, [r3, #0]
1006692e:	1e5a      	subs	r2, r3, #1
10066930:	4193      	sbcs	r3, r2
10066932:	6822      	ldr	r2, [r4, #0]
10066934:	0692      	lsls	r2, r2, #26
10066936:	d430      	bmi.n	1006699a <_printf_common+0xae>
10066938:	0022      	movs	r2, r4
1006693a:	9901      	ldr	r1, [sp, #4]
1006693c:	9800      	ldr	r0, [sp, #0]
1006693e:	9d08      	ldr	r5, [sp, #32]
10066940:	3243      	adds	r2, #67	@ 0x43
10066942:	47a8      	blx	r5
10066944:	3001      	adds	r0, #1
10066946:	d025      	beq.n	10066994 <_printf_common+0xa8>
10066948:	2206      	movs	r2, #6
1006694a:	6823      	ldr	r3, [r4, #0]
1006694c:	2500      	movs	r5, #0
1006694e:	4013      	ands	r3, r2
10066950:	2b04      	cmp	r3, #4
10066952:	d105      	bne.n	10066960 <_printf_common+0x74>
10066954:	6833      	ldr	r3, [r6, #0]
10066956:	68e5      	ldr	r5, [r4, #12]
10066958:	1aed      	subs	r5, r5, r3
1006695a:	43eb      	mvns	r3, r5
1006695c:	17db      	asrs	r3, r3, #31
1006695e:	401d      	ands	r5, r3
10066960:	68a3      	ldr	r3, [r4, #8]
10066962:	6922      	ldr	r2, [r4, #16]
10066964:	4293      	cmp	r3, r2
10066966:	dd01      	ble.n	1006696c <_printf_common+0x80>
10066968:	1a9b      	subs	r3, r3, r2
1006696a:	18ed      	adds	r5, r5, r3
1006696c:	2600      	movs	r6, #0
1006696e:	42b5      	cmp	r5, r6
10066970:	d120      	bne.n	100669b4 <_printf_common+0xc8>
10066972:	2000      	movs	r0, #0
10066974:	e010      	b.n	10066998 <_printf_common+0xac>
10066976:	3501      	adds	r5, #1
10066978:	68e3      	ldr	r3, [r4, #12]
1006697a:	6832      	ldr	r2, [r6, #0]
1006697c:	1a9b      	subs	r3, r3, r2
1006697e:	42ab      	cmp	r3, r5
10066980:	ddd2      	ble.n	10066928 <_printf_common+0x3c>
10066982:	0022      	movs	r2, r4
10066984:	2301      	movs	r3, #1
10066986:	9901      	ldr	r1, [sp, #4]
10066988:	9800      	ldr	r0, [sp, #0]
1006698a:	9f08      	ldr	r7, [sp, #32]
1006698c:	3219      	adds	r2, #25
1006698e:	47b8      	blx	r7
10066990:	3001      	adds	r0, #1
10066992:	d1f0      	bne.n	10066976 <_printf_common+0x8a>
10066994:	2001      	movs	r0, #1
10066996:	4240      	negs	r0, r0
10066998:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006699a:	2030      	movs	r0, #48	@ 0x30
1006699c:	18e1      	adds	r1, r4, r3
1006699e:	3143      	adds	r1, #67	@ 0x43
100669a0:	7008      	strb	r0, [r1, #0]
100669a2:	0021      	movs	r1, r4
100669a4:	1c5a      	adds	r2, r3, #1
100669a6:	3145      	adds	r1, #69	@ 0x45
100669a8:	7809      	ldrb	r1, [r1, #0]
100669aa:	18a2      	adds	r2, r4, r2
100669ac:	3243      	adds	r2, #67	@ 0x43
100669ae:	3302      	adds	r3, #2
100669b0:	7011      	strb	r1, [r2, #0]
100669b2:	e7c1      	b.n	10066938 <_printf_common+0x4c>
100669b4:	0022      	movs	r2, r4
100669b6:	2301      	movs	r3, #1
100669b8:	9901      	ldr	r1, [sp, #4]
100669ba:	9800      	ldr	r0, [sp, #0]
100669bc:	9f08      	ldr	r7, [sp, #32]
100669be:	321a      	adds	r2, #26
100669c0:	47b8      	blx	r7
100669c2:	3001      	adds	r0, #1
100669c4:	d0e6      	beq.n	10066994 <_printf_common+0xa8>
100669c6:	3601      	adds	r6, #1
100669c8:	e7d1      	b.n	1006696e <_printf_common+0x82>
	...

100669cc <_printf_i>:
100669cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100669ce:	b08b      	sub	sp, #44	@ 0x2c
100669d0:	9206      	str	r2, [sp, #24]
100669d2:	000a      	movs	r2, r1
100669d4:	3243      	adds	r2, #67	@ 0x43
100669d6:	9307      	str	r3, [sp, #28]
100669d8:	9005      	str	r0, [sp, #20]
100669da:	9203      	str	r2, [sp, #12]
100669dc:	7e0a      	ldrb	r2, [r1, #24]
100669de:	000c      	movs	r4, r1
100669e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100669e2:	2a78      	cmp	r2, #120	@ 0x78
100669e4:	d809      	bhi.n	100669fa <_printf_i+0x2e>
100669e6:	2a62      	cmp	r2, #98	@ 0x62
100669e8:	d80b      	bhi.n	10066a02 <_printf_i+0x36>
100669ea:	2a00      	cmp	r2, #0
100669ec:	d100      	bne.n	100669f0 <_printf_i+0x24>
100669ee:	e0ba      	b.n	10066b66 <_printf_i+0x19a>
100669f0:	497a      	ldr	r1, [pc, #488]	@ (10066bdc <_printf_i+0x210>)
100669f2:	9104      	str	r1, [sp, #16]
100669f4:	2a58      	cmp	r2, #88	@ 0x58
100669f6:	d100      	bne.n	100669fa <_printf_i+0x2e>
100669f8:	e08e      	b.n	10066b18 <_printf_i+0x14c>
100669fa:	0025      	movs	r5, r4
100669fc:	3542      	adds	r5, #66	@ 0x42
100669fe:	702a      	strb	r2, [r5, #0]
10066a00:	e022      	b.n	10066a48 <_printf_i+0x7c>
10066a02:	0010      	movs	r0, r2
10066a04:	3863      	subs	r0, #99	@ 0x63
10066a06:	2815      	cmp	r0, #21
10066a08:	d8f7      	bhi.n	100669fa <_printf_i+0x2e>
10066a0a:	f7d9 fc0f 	bl	1004022c <__gnu_thumb1_case_shi>
10066a0e:	0016      	.short	0x0016
10066a10:	fff6001f 	.word	0xfff6001f
10066a14:	fff6fff6 	.word	0xfff6fff6
10066a18:	001ffff6 	.word	0x001ffff6
10066a1c:	fff6fff6 	.word	0xfff6fff6
10066a20:	fff6fff6 	.word	0xfff6fff6
10066a24:	0036009f 	.word	0x0036009f
10066a28:	fff6007e 	.word	0xfff6007e
10066a2c:	00b0fff6 	.word	0x00b0fff6
10066a30:	0036fff6 	.word	0x0036fff6
10066a34:	fff6fff6 	.word	0xfff6fff6
10066a38:	0082      	.short	0x0082
10066a3a:	0025      	movs	r5, r4
10066a3c:	681a      	ldr	r2, [r3, #0]
10066a3e:	3542      	adds	r5, #66	@ 0x42
10066a40:	1d11      	adds	r1, r2, #4
10066a42:	6019      	str	r1, [r3, #0]
10066a44:	6813      	ldr	r3, [r2, #0]
10066a46:	702b      	strb	r3, [r5, #0]
10066a48:	2301      	movs	r3, #1
10066a4a:	e09e      	b.n	10066b8a <_printf_i+0x1be>
10066a4c:	6818      	ldr	r0, [r3, #0]
10066a4e:	6809      	ldr	r1, [r1, #0]
10066a50:	1d02      	adds	r2, r0, #4
10066a52:	060d      	lsls	r5, r1, #24
10066a54:	d50b      	bpl.n	10066a6e <_printf_i+0xa2>
10066a56:	6806      	ldr	r6, [r0, #0]
10066a58:	601a      	str	r2, [r3, #0]
10066a5a:	2e00      	cmp	r6, #0
10066a5c:	da03      	bge.n	10066a66 <_printf_i+0x9a>
10066a5e:	232d      	movs	r3, #45	@ 0x2d
10066a60:	9a03      	ldr	r2, [sp, #12]
10066a62:	4276      	negs	r6, r6
10066a64:	7013      	strb	r3, [r2, #0]
10066a66:	4b5d      	ldr	r3, [pc, #372]	@ (10066bdc <_printf_i+0x210>)
10066a68:	270a      	movs	r7, #10
10066a6a:	9304      	str	r3, [sp, #16]
10066a6c:	e018      	b.n	10066aa0 <_printf_i+0xd4>
10066a6e:	6806      	ldr	r6, [r0, #0]
10066a70:	601a      	str	r2, [r3, #0]
10066a72:	0649      	lsls	r1, r1, #25
10066a74:	d5f1      	bpl.n	10066a5a <_printf_i+0x8e>
10066a76:	b236      	sxth	r6, r6
10066a78:	e7ef      	b.n	10066a5a <_printf_i+0x8e>
10066a7a:	6808      	ldr	r0, [r1, #0]
10066a7c:	6819      	ldr	r1, [r3, #0]
10066a7e:	c940      	ldmia	r1!, {r6}
10066a80:	0605      	lsls	r5, r0, #24
10066a82:	d402      	bmi.n	10066a8a <_printf_i+0xbe>
10066a84:	0640      	lsls	r0, r0, #25
10066a86:	d500      	bpl.n	10066a8a <_printf_i+0xbe>
10066a88:	b2b6      	uxth	r6, r6
10066a8a:	6019      	str	r1, [r3, #0]
10066a8c:	4b53      	ldr	r3, [pc, #332]	@ (10066bdc <_printf_i+0x210>)
10066a8e:	270a      	movs	r7, #10
10066a90:	9304      	str	r3, [sp, #16]
10066a92:	2a6f      	cmp	r2, #111	@ 0x6f
10066a94:	d100      	bne.n	10066a98 <_printf_i+0xcc>
10066a96:	3f02      	subs	r7, #2
10066a98:	0023      	movs	r3, r4
10066a9a:	2200      	movs	r2, #0
10066a9c:	3343      	adds	r3, #67	@ 0x43
10066a9e:	701a      	strb	r2, [r3, #0]
10066aa0:	6863      	ldr	r3, [r4, #4]
10066aa2:	60a3      	str	r3, [r4, #8]
10066aa4:	2b00      	cmp	r3, #0
10066aa6:	db06      	blt.n	10066ab6 <_printf_i+0xea>
10066aa8:	2104      	movs	r1, #4
10066aaa:	6822      	ldr	r2, [r4, #0]
10066aac:	9d03      	ldr	r5, [sp, #12]
10066aae:	438a      	bics	r2, r1
10066ab0:	6022      	str	r2, [r4, #0]
10066ab2:	4333      	orrs	r3, r6
10066ab4:	d00c      	beq.n	10066ad0 <_printf_i+0x104>
10066ab6:	9d03      	ldr	r5, [sp, #12]
10066ab8:	0030      	movs	r0, r6
10066aba:	0039      	movs	r1, r7
10066abc:	f7d9 fc46 	bl	1004034c <__aeabi_uidivmod>
10066ac0:	9b04      	ldr	r3, [sp, #16]
10066ac2:	3d01      	subs	r5, #1
10066ac4:	5c5b      	ldrb	r3, [r3, r1]
10066ac6:	702b      	strb	r3, [r5, #0]
10066ac8:	0033      	movs	r3, r6
10066aca:	0006      	movs	r6, r0
10066acc:	429f      	cmp	r7, r3
10066ace:	d9f3      	bls.n	10066ab8 <_printf_i+0xec>
10066ad0:	2f08      	cmp	r7, #8
10066ad2:	d109      	bne.n	10066ae8 <_printf_i+0x11c>
10066ad4:	6823      	ldr	r3, [r4, #0]
10066ad6:	07db      	lsls	r3, r3, #31
10066ad8:	d506      	bpl.n	10066ae8 <_printf_i+0x11c>
10066ada:	6862      	ldr	r2, [r4, #4]
10066adc:	6923      	ldr	r3, [r4, #16]
10066ade:	429a      	cmp	r2, r3
10066ae0:	dc02      	bgt.n	10066ae8 <_printf_i+0x11c>
10066ae2:	2330      	movs	r3, #48	@ 0x30
10066ae4:	3d01      	subs	r5, #1
10066ae6:	702b      	strb	r3, [r5, #0]
10066ae8:	9b03      	ldr	r3, [sp, #12]
10066aea:	1b5b      	subs	r3, r3, r5
10066aec:	6123      	str	r3, [r4, #16]
10066aee:	9b07      	ldr	r3, [sp, #28]
10066af0:	0021      	movs	r1, r4
10066af2:	9300      	str	r3, [sp, #0]
10066af4:	9805      	ldr	r0, [sp, #20]
10066af6:	9b06      	ldr	r3, [sp, #24]
10066af8:	aa09      	add	r2, sp, #36	@ 0x24
10066afa:	f7ff fef7 	bl	100668ec <_printf_common>
10066afe:	3001      	adds	r0, #1
10066b00:	d148      	bne.n	10066b94 <_printf_i+0x1c8>
10066b02:	2001      	movs	r0, #1
10066b04:	4240      	negs	r0, r0
10066b06:	b00b      	add	sp, #44	@ 0x2c
10066b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066b0a:	2220      	movs	r2, #32
10066b0c:	6809      	ldr	r1, [r1, #0]
10066b0e:	430a      	orrs	r2, r1
10066b10:	6022      	str	r2, [r4, #0]
10066b12:	2278      	movs	r2, #120	@ 0x78
10066b14:	4932      	ldr	r1, [pc, #200]	@ (10066be0 <_printf_i+0x214>)
10066b16:	9104      	str	r1, [sp, #16]
10066b18:	0021      	movs	r1, r4
10066b1a:	3145      	adds	r1, #69	@ 0x45
10066b1c:	700a      	strb	r2, [r1, #0]
10066b1e:	6819      	ldr	r1, [r3, #0]
10066b20:	6822      	ldr	r2, [r4, #0]
10066b22:	c940      	ldmia	r1!, {r6}
10066b24:	0610      	lsls	r0, r2, #24
10066b26:	d402      	bmi.n	10066b2e <_printf_i+0x162>
10066b28:	0650      	lsls	r0, r2, #25
10066b2a:	d500      	bpl.n	10066b2e <_printf_i+0x162>
10066b2c:	b2b6      	uxth	r6, r6
10066b2e:	6019      	str	r1, [r3, #0]
10066b30:	07d3      	lsls	r3, r2, #31
10066b32:	d502      	bpl.n	10066b3a <_printf_i+0x16e>
10066b34:	2320      	movs	r3, #32
10066b36:	4313      	orrs	r3, r2
10066b38:	6023      	str	r3, [r4, #0]
10066b3a:	2e00      	cmp	r6, #0
10066b3c:	d001      	beq.n	10066b42 <_printf_i+0x176>
10066b3e:	2710      	movs	r7, #16
10066b40:	e7aa      	b.n	10066a98 <_printf_i+0xcc>
10066b42:	2220      	movs	r2, #32
10066b44:	6823      	ldr	r3, [r4, #0]
10066b46:	4393      	bics	r3, r2
10066b48:	6023      	str	r3, [r4, #0]
10066b4a:	e7f8      	b.n	10066b3e <_printf_i+0x172>
10066b4c:	681a      	ldr	r2, [r3, #0]
10066b4e:	680d      	ldr	r5, [r1, #0]
10066b50:	1d10      	adds	r0, r2, #4
10066b52:	6949      	ldr	r1, [r1, #20]
10066b54:	6018      	str	r0, [r3, #0]
10066b56:	6813      	ldr	r3, [r2, #0]
10066b58:	062e      	lsls	r6, r5, #24
10066b5a:	d501      	bpl.n	10066b60 <_printf_i+0x194>
10066b5c:	6019      	str	r1, [r3, #0]
10066b5e:	e002      	b.n	10066b66 <_printf_i+0x19a>
10066b60:	066d      	lsls	r5, r5, #25
10066b62:	d5fb      	bpl.n	10066b5c <_printf_i+0x190>
10066b64:	8019      	strh	r1, [r3, #0]
10066b66:	2300      	movs	r3, #0
10066b68:	9d03      	ldr	r5, [sp, #12]
10066b6a:	6123      	str	r3, [r4, #16]
10066b6c:	e7bf      	b.n	10066aee <_printf_i+0x122>
10066b6e:	681a      	ldr	r2, [r3, #0]
10066b70:	1d11      	adds	r1, r2, #4
10066b72:	6019      	str	r1, [r3, #0]
10066b74:	6815      	ldr	r5, [r2, #0]
10066b76:	2100      	movs	r1, #0
10066b78:	0028      	movs	r0, r5
10066b7a:	6862      	ldr	r2, [r4, #4]
10066b7c:	f000 f986 	bl	10066e8c <memchr>
10066b80:	2800      	cmp	r0, #0
10066b82:	d001      	beq.n	10066b88 <_printf_i+0x1bc>
10066b84:	1b40      	subs	r0, r0, r5
10066b86:	6060      	str	r0, [r4, #4]
10066b88:	6863      	ldr	r3, [r4, #4]
10066b8a:	6123      	str	r3, [r4, #16]
10066b8c:	2300      	movs	r3, #0
10066b8e:	9a03      	ldr	r2, [sp, #12]
10066b90:	7013      	strb	r3, [r2, #0]
10066b92:	e7ac      	b.n	10066aee <_printf_i+0x122>
10066b94:	002a      	movs	r2, r5
10066b96:	6923      	ldr	r3, [r4, #16]
10066b98:	9906      	ldr	r1, [sp, #24]
10066b9a:	9805      	ldr	r0, [sp, #20]
10066b9c:	9d07      	ldr	r5, [sp, #28]
10066b9e:	47a8      	blx	r5
10066ba0:	3001      	adds	r0, #1
10066ba2:	d0ae      	beq.n	10066b02 <_printf_i+0x136>
10066ba4:	6823      	ldr	r3, [r4, #0]
10066ba6:	079b      	lsls	r3, r3, #30
10066ba8:	d415      	bmi.n	10066bd6 <_printf_i+0x20a>
10066baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10066bac:	68e0      	ldr	r0, [r4, #12]
10066bae:	4298      	cmp	r0, r3
10066bb0:	daa9      	bge.n	10066b06 <_printf_i+0x13a>
10066bb2:	0018      	movs	r0, r3
10066bb4:	e7a7      	b.n	10066b06 <_printf_i+0x13a>
10066bb6:	0022      	movs	r2, r4
10066bb8:	2301      	movs	r3, #1
10066bba:	9906      	ldr	r1, [sp, #24]
10066bbc:	9805      	ldr	r0, [sp, #20]
10066bbe:	9e07      	ldr	r6, [sp, #28]
10066bc0:	3219      	adds	r2, #25
10066bc2:	47b0      	blx	r6
10066bc4:	3001      	adds	r0, #1
10066bc6:	d09c      	beq.n	10066b02 <_printf_i+0x136>
10066bc8:	3501      	adds	r5, #1
10066bca:	68e3      	ldr	r3, [r4, #12]
10066bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10066bce:	1a9b      	subs	r3, r3, r2
10066bd0:	42ab      	cmp	r3, r5
10066bd2:	dcf0      	bgt.n	10066bb6 <_printf_i+0x1ea>
10066bd4:	e7e9      	b.n	10066baa <_printf_i+0x1de>
10066bd6:	2500      	movs	r5, #0
10066bd8:	e7f7      	b.n	10066bca <_printf_i+0x1fe>
10066bda:	46c0      	nop			@ (mov r8, r8)
10066bdc:	10068296 	.word	0x10068296
10066be0:	100682a7 	.word	0x100682a7

10066be4 <__sflush_r>:
10066be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10066be6:	220c      	movs	r2, #12
10066be8:	5e8b      	ldrsh	r3, [r1, r2]
10066bea:	0005      	movs	r5, r0
10066bec:	000c      	movs	r4, r1
10066bee:	071a      	lsls	r2, r3, #28
10066bf0:	d456      	bmi.n	10066ca0 <__sflush_r+0xbc>
10066bf2:	684a      	ldr	r2, [r1, #4]
10066bf4:	2a00      	cmp	r2, #0
10066bf6:	dc02      	bgt.n	10066bfe <__sflush_r+0x1a>
10066bf8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
10066bfa:	2a00      	cmp	r2, #0
10066bfc:	dd4e      	ble.n	10066c9c <__sflush_r+0xb8>
10066bfe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10066c00:	2f00      	cmp	r7, #0
10066c02:	d04b      	beq.n	10066c9c <__sflush_r+0xb8>
10066c04:	2200      	movs	r2, #0
10066c06:	2080      	movs	r0, #128	@ 0x80
10066c08:	682e      	ldr	r6, [r5, #0]
10066c0a:	602a      	str	r2, [r5, #0]
10066c0c:	001a      	movs	r2, r3
10066c0e:	0140      	lsls	r0, r0, #5
10066c10:	6a21      	ldr	r1, [r4, #32]
10066c12:	4002      	ands	r2, r0
10066c14:	4203      	tst	r3, r0
10066c16:	d033      	beq.n	10066c80 <__sflush_r+0x9c>
10066c18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
10066c1a:	89a3      	ldrh	r3, [r4, #12]
10066c1c:	075b      	lsls	r3, r3, #29
10066c1e:	d506      	bpl.n	10066c2e <__sflush_r+0x4a>
10066c20:	6863      	ldr	r3, [r4, #4]
10066c22:	1ad2      	subs	r2, r2, r3
10066c24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10066c26:	2b00      	cmp	r3, #0
10066c28:	d001      	beq.n	10066c2e <__sflush_r+0x4a>
10066c2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10066c2c:	1ad2      	subs	r2, r2, r3
10066c2e:	2300      	movs	r3, #0
10066c30:	0028      	movs	r0, r5
10066c32:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10066c34:	6a21      	ldr	r1, [r4, #32]
10066c36:	47b8      	blx	r7
10066c38:	89a2      	ldrh	r2, [r4, #12]
10066c3a:	1c43      	adds	r3, r0, #1
10066c3c:	d106      	bne.n	10066c4c <__sflush_r+0x68>
10066c3e:	6829      	ldr	r1, [r5, #0]
10066c40:	291d      	cmp	r1, #29
10066c42:	d846      	bhi.n	10066cd2 <__sflush_r+0xee>
10066c44:	4b29      	ldr	r3, [pc, #164]	@ (10066cec <__sflush_r+0x108>)
10066c46:	40cb      	lsrs	r3, r1
10066c48:	07db      	lsls	r3, r3, #31
10066c4a:	d542      	bpl.n	10066cd2 <__sflush_r+0xee>
10066c4c:	2300      	movs	r3, #0
10066c4e:	6063      	str	r3, [r4, #4]
10066c50:	6923      	ldr	r3, [r4, #16]
10066c52:	6023      	str	r3, [r4, #0]
10066c54:	04d2      	lsls	r2, r2, #19
10066c56:	d505      	bpl.n	10066c64 <__sflush_r+0x80>
10066c58:	1c43      	adds	r3, r0, #1
10066c5a:	d102      	bne.n	10066c62 <__sflush_r+0x7e>
10066c5c:	682b      	ldr	r3, [r5, #0]
10066c5e:	2b00      	cmp	r3, #0
10066c60:	d100      	bne.n	10066c64 <__sflush_r+0x80>
10066c62:	6560      	str	r0, [r4, #84]	@ 0x54
10066c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10066c66:	602e      	str	r6, [r5, #0]
10066c68:	2900      	cmp	r1, #0
10066c6a:	d017      	beq.n	10066c9c <__sflush_r+0xb8>
10066c6c:	0023      	movs	r3, r4
10066c6e:	3344      	adds	r3, #68	@ 0x44
10066c70:	4299      	cmp	r1, r3
10066c72:	d002      	beq.n	10066c7a <__sflush_r+0x96>
10066c74:	0028      	movs	r0, r5
10066c76:	f7ff fc91 	bl	1006659c <_free_r>
10066c7a:	2300      	movs	r3, #0
10066c7c:	6363      	str	r3, [r4, #52]	@ 0x34
10066c7e:	e00d      	b.n	10066c9c <__sflush_r+0xb8>
10066c80:	2301      	movs	r3, #1
10066c82:	0028      	movs	r0, r5
10066c84:	47b8      	blx	r7
10066c86:	0002      	movs	r2, r0
10066c88:	1c43      	adds	r3, r0, #1
10066c8a:	d1c6      	bne.n	10066c1a <__sflush_r+0x36>
10066c8c:	682b      	ldr	r3, [r5, #0]
10066c8e:	2b00      	cmp	r3, #0
10066c90:	d0c3      	beq.n	10066c1a <__sflush_r+0x36>
10066c92:	2b1d      	cmp	r3, #29
10066c94:	d001      	beq.n	10066c9a <__sflush_r+0xb6>
10066c96:	2b16      	cmp	r3, #22
10066c98:	d11a      	bne.n	10066cd0 <__sflush_r+0xec>
10066c9a:	602e      	str	r6, [r5, #0]
10066c9c:	2000      	movs	r0, #0
10066c9e:	e01e      	b.n	10066cde <__sflush_r+0xfa>
10066ca0:	690e      	ldr	r6, [r1, #16]
10066ca2:	2e00      	cmp	r6, #0
10066ca4:	d0fa      	beq.n	10066c9c <__sflush_r+0xb8>
10066ca6:	680f      	ldr	r7, [r1, #0]
10066ca8:	600e      	str	r6, [r1, #0]
10066caa:	1bba      	subs	r2, r7, r6
10066cac:	9201      	str	r2, [sp, #4]
10066cae:	2200      	movs	r2, #0
10066cb0:	079b      	lsls	r3, r3, #30
10066cb2:	d100      	bne.n	10066cb6 <__sflush_r+0xd2>
10066cb4:	694a      	ldr	r2, [r1, #20]
10066cb6:	60a2      	str	r2, [r4, #8]
10066cb8:	9b01      	ldr	r3, [sp, #4]
10066cba:	2b00      	cmp	r3, #0
10066cbc:	ddee      	ble.n	10066c9c <__sflush_r+0xb8>
10066cbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
10066cc0:	0032      	movs	r2, r6
10066cc2:	001f      	movs	r7, r3
10066cc4:	0028      	movs	r0, r5
10066cc6:	9b01      	ldr	r3, [sp, #4]
10066cc8:	6a21      	ldr	r1, [r4, #32]
10066cca:	47b8      	blx	r7
10066ccc:	2800      	cmp	r0, #0
10066cce:	dc07      	bgt.n	10066ce0 <__sflush_r+0xfc>
10066cd0:	89a2      	ldrh	r2, [r4, #12]
10066cd2:	2340      	movs	r3, #64	@ 0x40
10066cd4:	2001      	movs	r0, #1
10066cd6:	4313      	orrs	r3, r2
10066cd8:	b21b      	sxth	r3, r3
10066cda:	81a3      	strh	r3, [r4, #12]
10066cdc:	4240      	negs	r0, r0
10066cde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066ce0:	9b01      	ldr	r3, [sp, #4]
10066ce2:	1836      	adds	r6, r6, r0
10066ce4:	1a1b      	subs	r3, r3, r0
10066ce6:	9301      	str	r3, [sp, #4]
10066ce8:	e7e6      	b.n	10066cb8 <__sflush_r+0xd4>
10066cea:	46c0      	nop			@ (mov r8, r8)
10066cec:	20400001 	.word	0x20400001

10066cf0 <_fflush_r>:
10066cf0:	690b      	ldr	r3, [r1, #16]
10066cf2:	b570      	push	{r4, r5, r6, lr}
10066cf4:	0005      	movs	r5, r0
10066cf6:	000c      	movs	r4, r1
10066cf8:	2b00      	cmp	r3, #0
10066cfa:	d102      	bne.n	10066d02 <_fflush_r+0x12>
10066cfc:	2500      	movs	r5, #0
10066cfe:	0028      	movs	r0, r5
10066d00:	bd70      	pop	{r4, r5, r6, pc}
10066d02:	2800      	cmp	r0, #0
10066d04:	d004      	beq.n	10066d10 <_fflush_r+0x20>
10066d06:	6a03      	ldr	r3, [r0, #32]
10066d08:	2b00      	cmp	r3, #0
10066d0a:	d101      	bne.n	10066d10 <_fflush_r+0x20>
10066d0c:	f7ff fa18 	bl	10066140 <__sinit>
10066d10:	220c      	movs	r2, #12
10066d12:	5ea3      	ldrsh	r3, [r4, r2]
10066d14:	2b00      	cmp	r3, #0
10066d16:	d0f1      	beq.n	10066cfc <_fflush_r+0xc>
10066d18:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10066d1a:	07d2      	lsls	r2, r2, #31
10066d1c:	d404      	bmi.n	10066d28 <_fflush_r+0x38>
10066d1e:	059b      	lsls	r3, r3, #22
10066d20:	d402      	bmi.n	10066d28 <_fflush_r+0x38>
10066d22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10066d24:	f7ff fc2b 	bl	1006657e <__retarget_lock_acquire_recursive>
10066d28:	0028      	movs	r0, r5
10066d2a:	0021      	movs	r1, r4
10066d2c:	f7ff ff5a 	bl	10066be4 <__sflush_r>
10066d30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10066d32:	0005      	movs	r5, r0
10066d34:	07db      	lsls	r3, r3, #31
10066d36:	d4e2      	bmi.n	10066cfe <_fflush_r+0xe>
10066d38:	89a3      	ldrh	r3, [r4, #12]
10066d3a:	059b      	lsls	r3, r3, #22
10066d3c:	d4df      	bmi.n	10066cfe <_fflush_r+0xe>
10066d3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10066d40:	f7ff fc1e 	bl	10066580 <__retarget_lock_release_recursive>
10066d44:	e7db      	b.n	10066cfe <_fflush_r+0xe>
	...

10066d48 <__swhatbuf_r>:
10066d48:	b570      	push	{r4, r5, r6, lr}
10066d4a:	000e      	movs	r6, r1
10066d4c:	001d      	movs	r5, r3
10066d4e:	230e      	movs	r3, #14
10066d50:	5ec9      	ldrsh	r1, [r1, r3]
10066d52:	0014      	movs	r4, r2
10066d54:	b096      	sub	sp, #88	@ 0x58
10066d56:	2900      	cmp	r1, #0
10066d58:	da0c      	bge.n	10066d74 <__swhatbuf_r+0x2c>
10066d5a:	89b2      	ldrh	r2, [r6, #12]
10066d5c:	2380      	movs	r3, #128	@ 0x80
10066d5e:	0011      	movs	r1, r2
10066d60:	4019      	ands	r1, r3
10066d62:	421a      	tst	r2, r3
10066d64:	d114      	bne.n	10066d90 <__swhatbuf_r+0x48>
10066d66:	2380      	movs	r3, #128	@ 0x80
10066d68:	00db      	lsls	r3, r3, #3
10066d6a:	2000      	movs	r0, #0
10066d6c:	6029      	str	r1, [r5, #0]
10066d6e:	6023      	str	r3, [r4, #0]
10066d70:	b016      	add	sp, #88	@ 0x58
10066d72:	bd70      	pop	{r4, r5, r6, pc}
10066d74:	466a      	mov	r2, sp
10066d76:	f000 f865 	bl	10066e44 <_fstat_r>
10066d7a:	2800      	cmp	r0, #0
10066d7c:	dbed      	blt.n	10066d5a <__swhatbuf_r+0x12>
10066d7e:	23f0      	movs	r3, #240	@ 0xf0
10066d80:	9901      	ldr	r1, [sp, #4]
10066d82:	021b      	lsls	r3, r3, #8
10066d84:	4019      	ands	r1, r3
10066d86:	4b04      	ldr	r3, [pc, #16]	@ (10066d98 <__swhatbuf_r+0x50>)
10066d88:	18c9      	adds	r1, r1, r3
10066d8a:	424b      	negs	r3, r1
10066d8c:	4159      	adcs	r1, r3
10066d8e:	e7ea      	b.n	10066d66 <__swhatbuf_r+0x1e>
10066d90:	2100      	movs	r1, #0
10066d92:	2340      	movs	r3, #64	@ 0x40
10066d94:	e7e9      	b.n	10066d6a <__swhatbuf_r+0x22>
10066d96:	46c0      	nop			@ (mov r8, r8)
10066d98:	ffffe000 	.word	0xffffe000

10066d9c <__smakebuf_r>:
10066d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10066d9e:	2602      	movs	r6, #2
10066da0:	898b      	ldrh	r3, [r1, #12]
10066da2:	0005      	movs	r5, r0
10066da4:	000c      	movs	r4, r1
10066da6:	b085      	sub	sp, #20
10066da8:	4233      	tst	r3, r6
10066daa:	d007      	beq.n	10066dbc <__smakebuf_r+0x20>
10066dac:	0023      	movs	r3, r4
10066dae:	3347      	adds	r3, #71	@ 0x47
10066db0:	6023      	str	r3, [r4, #0]
10066db2:	6123      	str	r3, [r4, #16]
10066db4:	2301      	movs	r3, #1
10066db6:	6163      	str	r3, [r4, #20]
10066db8:	b005      	add	sp, #20
10066dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066dbc:	ab03      	add	r3, sp, #12
10066dbe:	aa02      	add	r2, sp, #8
10066dc0:	f7ff ffc2 	bl	10066d48 <__swhatbuf_r>
10066dc4:	9f02      	ldr	r7, [sp, #8]
10066dc6:	9001      	str	r0, [sp, #4]
10066dc8:	0039      	movs	r1, r7
10066dca:	0028      	movs	r0, r5
10066dcc:	f7ff f898 	bl	10065f00 <_malloc_r>
10066dd0:	2800      	cmp	r0, #0
10066dd2:	d108      	bne.n	10066de6 <__smakebuf_r+0x4a>
10066dd4:	220c      	movs	r2, #12
10066dd6:	5ea3      	ldrsh	r3, [r4, r2]
10066dd8:	059a      	lsls	r2, r3, #22
10066dda:	d4ed      	bmi.n	10066db8 <__smakebuf_r+0x1c>
10066ddc:	2203      	movs	r2, #3
10066dde:	4393      	bics	r3, r2
10066de0:	431e      	orrs	r6, r3
10066de2:	81a6      	strh	r6, [r4, #12]
10066de4:	e7e2      	b.n	10066dac <__smakebuf_r+0x10>
10066de6:	2380      	movs	r3, #128	@ 0x80
10066de8:	89a2      	ldrh	r2, [r4, #12]
10066dea:	6020      	str	r0, [r4, #0]
10066dec:	4313      	orrs	r3, r2
10066dee:	81a3      	strh	r3, [r4, #12]
10066df0:	9b03      	ldr	r3, [sp, #12]
10066df2:	6120      	str	r0, [r4, #16]
10066df4:	6167      	str	r7, [r4, #20]
10066df6:	2b00      	cmp	r3, #0
10066df8:	d00c      	beq.n	10066e14 <__smakebuf_r+0x78>
10066dfa:	0028      	movs	r0, r5
10066dfc:	230e      	movs	r3, #14
10066dfe:	5ee1      	ldrsh	r1, [r4, r3]
10066e00:	f000 f832 	bl	10066e68 <_isatty_r>
10066e04:	2800      	cmp	r0, #0
10066e06:	d005      	beq.n	10066e14 <__smakebuf_r+0x78>
10066e08:	2303      	movs	r3, #3
10066e0a:	89a2      	ldrh	r2, [r4, #12]
10066e0c:	439a      	bics	r2, r3
10066e0e:	3b02      	subs	r3, #2
10066e10:	4313      	orrs	r3, r2
10066e12:	81a3      	strh	r3, [r4, #12]
10066e14:	89a3      	ldrh	r3, [r4, #12]
10066e16:	9a01      	ldr	r2, [sp, #4]
10066e18:	4313      	orrs	r3, r2
10066e1a:	81a3      	strh	r3, [r4, #12]
10066e1c:	e7cc      	b.n	10066db8 <__smakebuf_r+0x1c>

10066e1e <memmove>:
10066e1e:	b510      	push	{r4, lr}
10066e20:	4288      	cmp	r0, r1
10066e22:	d902      	bls.n	10066e2a <memmove+0xc>
10066e24:	188b      	adds	r3, r1, r2
10066e26:	4298      	cmp	r0, r3
10066e28:	d308      	bcc.n	10066e3c <memmove+0x1e>
10066e2a:	2300      	movs	r3, #0
10066e2c:	429a      	cmp	r2, r3
10066e2e:	d007      	beq.n	10066e40 <memmove+0x22>
10066e30:	5ccc      	ldrb	r4, [r1, r3]
10066e32:	54c4      	strb	r4, [r0, r3]
10066e34:	3301      	adds	r3, #1
10066e36:	e7f9      	b.n	10066e2c <memmove+0xe>
10066e38:	5c8b      	ldrb	r3, [r1, r2]
10066e3a:	5483      	strb	r3, [r0, r2]
10066e3c:	3a01      	subs	r2, #1
10066e3e:	d2fb      	bcs.n	10066e38 <memmove+0x1a>
10066e40:	bd10      	pop	{r4, pc}
	...

10066e44 <_fstat_r>:
10066e44:	2300      	movs	r3, #0
10066e46:	b570      	push	{r4, r5, r6, lr}
10066e48:	4d06      	ldr	r5, [pc, #24]	@ (10066e64 <_fstat_r+0x20>)
10066e4a:	0004      	movs	r4, r0
10066e4c:	0008      	movs	r0, r1
10066e4e:	0011      	movs	r1, r2
10066e50:	602b      	str	r3, [r5, #0]
10066e52:	f7de ff10 	bl	10045c76 <_fstat>
10066e56:	1c43      	adds	r3, r0, #1
10066e58:	d103      	bne.n	10066e62 <_fstat_r+0x1e>
10066e5a:	682b      	ldr	r3, [r5, #0]
10066e5c:	2b00      	cmp	r3, #0
10066e5e:	d000      	beq.n	10066e62 <_fstat_r+0x1e>
10066e60:	6023      	str	r3, [r4, #0]
10066e62:	bd70      	pop	{r4, r5, r6, pc}
10066e64:	20002604 	.word	0x20002604

10066e68 <_isatty_r>:
10066e68:	2300      	movs	r3, #0
10066e6a:	b570      	push	{r4, r5, r6, lr}
10066e6c:	4d06      	ldr	r5, [pc, #24]	@ (10066e88 <_isatty_r+0x20>)
10066e6e:	0004      	movs	r4, r0
10066e70:	0008      	movs	r0, r1
10066e72:	602b      	str	r3, [r5, #0]
10066e74:	f7de ff0d 	bl	10045c92 <_isatty>
10066e78:	1c43      	adds	r3, r0, #1
10066e7a:	d103      	bne.n	10066e84 <_isatty_r+0x1c>
10066e7c:	682b      	ldr	r3, [r5, #0]
10066e7e:	2b00      	cmp	r3, #0
10066e80:	d000      	beq.n	10066e84 <_isatty_r+0x1c>
10066e82:	6023      	str	r3, [r4, #0]
10066e84:	bd70      	pop	{r4, r5, r6, pc}
10066e86:	46c0      	nop			@ (mov r8, r8)
10066e88:	20002604 	.word	0x20002604

10066e8c <memchr>:
10066e8c:	b2c9      	uxtb	r1, r1
10066e8e:	1882      	adds	r2, r0, r2
10066e90:	4290      	cmp	r0, r2
10066e92:	d101      	bne.n	10066e98 <memchr+0xc>
10066e94:	2000      	movs	r0, #0
10066e96:	4770      	bx	lr
10066e98:	7803      	ldrb	r3, [r0, #0]
10066e9a:	428b      	cmp	r3, r1
10066e9c:	d0fb      	beq.n	10066e96 <memchr+0xa>
10066e9e:	3001      	adds	r0, #1
10066ea0:	e7f6      	b.n	10066e90 <memchr+0x4>

10066ea2 <_realloc_r>:
10066ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10066ea4:	0006      	movs	r6, r0
10066ea6:	000c      	movs	r4, r1
10066ea8:	0015      	movs	r5, r2
10066eaa:	2900      	cmp	r1, #0
10066eac:	d105      	bne.n	10066eba <_realloc_r+0x18>
10066eae:	0011      	movs	r1, r2
10066eb0:	f7ff f826 	bl	10065f00 <_malloc_r>
10066eb4:	0004      	movs	r4, r0
10066eb6:	0020      	movs	r0, r4
10066eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066eba:	2a00      	cmp	r2, #0
10066ebc:	d103      	bne.n	10066ec6 <_realloc_r+0x24>
10066ebe:	f7ff fb6d 	bl	1006659c <_free_r>
10066ec2:	002c      	movs	r4, r5
10066ec4:	e7f7      	b.n	10066eb6 <_realloc_r+0x14>
10066ec6:	f000 f81c 	bl	10066f02 <_malloc_usable_size_r>
10066eca:	0007      	movs	r7, r0
10066ecc:	4285      	cmp	r5, r0
10066ece:	d802      	bhi.n	10066ed6 <_realloc_r+0x34>
10066ed0:	0843      	lsrs	r3, r0, #1
10066ed2:	42ab      	cmp	r3, r5
10066ed4:	d3ef      	bcc.n	10066eb6 <_realloc_r+0x14>
10066ed6:	0029      	movs	r1, r5
10066ed8:	0030      	movs	r0, r6
10066eda:	f7ff f811 	bl	10065f00 <_malloc_r>
10066ede:	9001      	str	r0, [sp, #4]
10066ee0:	2800      	cmp	r0, #0
10066ee2:	d101      	bne.n	10066ee8 <_realloc_r+0x46>
10066ee4:	9c01      	ldr	r4, [sp, #4]
10066ee6:	e7e6      	b.n	10066eb6 <_realloc_r+0x14>
10066ee8:	002a      	movs	r2, r5
10066eea:	42bd      	cmp	r5, r7
10066eec:	d900      	bls.n	10066ef0 <_realloc_r+0x4e>
10066eee:	003a      	movs	r2, r7
10066ef0:	0021      	movs	r1, r4
10066ef2:	9801      	ldr	r0, [sp, #4]
10066ef4:	f7ff fb49 	bl	1006658a <memcpy>
10066ef8:	0021      	movs	r1, r4
10066efa:	0030      	movs	r0, r6
10066efc:	f7ff fb4e 	bl	1006659c <_free_r>
10066f00:	e7f0      	b.n	10066ee4 <_realloc_r+0x42>

10066f02 <_malloc_usable_size_r>:
10066f02:	1f0b      	subs	r3, r1, #4
10066f04:	681b      	ldr	r3, [r3, #0]
10066f06:	1f18      	subs	r0, r3, #4
10066f08:	2b00      	cmp	r3, #0
10066f0a:	da01      	bge.n	10066f10 <_malloc_usable_size_r+0xe>
10066f0c:	580b      	ldr	r3, [r1, r0]
10066f0e:	18c0      	adds	r0, r0, r3
10066f10:	4770      	bx	lr
	...

10066f14 <AES_CMAC_Encrypt_Append>:
10066f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10066f16:	2500      	movs	r5, #0
10066f18:	b08a      	sub	sp, #40	@ 0x28
10066f1a:	460e      	mov	r6, r1
10066f1c:	4604      	mov	r4, r0
10066f1e:	2800      	cmp	r0, #0
10066f20:	d004      	beq.n	10066f2c <AES_CMAC_Encrypt_Append+0x18>
10066f22:	2e00      	cmp	r6, #0
10066f24:	d106      	bne.n	10066f34 <AES_CMAC_Encrypt_Append+0x20>
10066f26:	980c      	ldr	r0, [sp, #48]	@ 0x30
10066f28:	2800      	cmp	r0, #0
10066f2a:	dd03      	ble.n	10066f34 <AES_CMAC_Encrypt_Append+0x20>
10066f2c:	2061      	movs	r0, #97	@ 0x61
10066f2e:	0140      	lsls	r0, r0, #5
10066f30:	b00d      	add	sp, #52	@ 0x34
10066f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066f34:	980c      	ldr	r0, [sp, #48]	@ 0x30
10066f36:	2800      	cmp	r0, #0
10066f38:	db04      	blt.n	10066f44 <AES_CMAC_Encrypt_Append+0x30>
10066f3a:	2810      	cmp	r0, #16
10066f3c:	da04      	bge.n	10066f48 <AES_CMAC_Encrypt_Append+0x34>
10066f3e:	7920      	ldrb	r0, [r4, #4]
10066f40:	0680      	lsls	r0, r0, #26
10066f42:	d401      	bmi.n	10066f48 <AES_CMAC_Encrypt_Append+0x34>
10066f44:	488c      	ldr	r0, [pc, #560]	@ (10067178 <AES_CMAC_Encrypt_Append+0x264>)
10066f46:	e7f3      	b.n	10066f30 <AES_CMAC_Encrypt_Append+0x1c>
10066f48:	7920      	ldrb	r0, [r4, #4]
10066f4a:	0741      	lsls	r1, r0, #29
10066f4c:	d401      	bmi.n	10066f52 <AES_CMAC_Encrypt_Append+0x3e>
10066f4e:	0781      	lsls	r1, r0, #30
10066f50:	d502      	bpl.n	10066f58 <AES_CMAC_Encrypt_Append+0x44>
10066f52:	4889      	ldr	r0, [pc, #548]	@ (10067178 <AES_CMAC_Encrypt_Append+0x264>)
10066f54:	1c40      	adds	r0, r0, #1
10066f56:	e7eb      	b.n	10066f30 <AES_CMAC_Encrypt_Append+0x1c>
10066f58:	2140      	movs	r1, #64	@ 0x40
10066f5a:	4308      	orrs	r0, r1
10066f5c:	7120      	strb	r0, [r4, #4]
10066f5e:	4620      	mov	r0, r4
10066f60:	3014      	adds	r0, #20
10066f62:	9008      	str	r0, [sp, #32]
10066f64:	e01c      	b.n	10066fa0 <AES_CMAC_Encrypt_Append+0x8c>
10066f66:	2000      	movs	r0, #0
10066f68:	0081      	lsls	r1, r0, #2
10066f6a:	194a      	adds	r2, r1, r5
10066f6c:	1992      	adds	r2, r2, r6
10066f6e:	7853      	ldrb	r3, [r2, #1]
10066f70:	7817      	ldrb	r7, [r2, #0]
10066f72:	021b      	lsls	r3, r3, #8
10066f74:	433b      	orrs	r3, r7
10066f76:	7897      	ldrb	r7, [r2, #2]
10066f78:	ba5b      	rev16	r3, r3
10066f7a:	041b      	lsls	r3, r3, #16
10066f7c:	023f      	lsls	r7, r7, #8
10066f7e:	78d2      	ldrb	r2, [r2, #3]
10066f80:	433b      	orrs	r3, r7
10066f82:	4313      	orrs	r3, r2
10066f84:	190a      	adds	r2, r1, r4
10066f86:	6952      	ldr	r2, [r2, #20]
10066f88:	1c40      	adds	r0, r0, #1
10066f8a:	4053      	eors	r3, r2
10066f8c:	aa04      	add	r2, sp, #16
10066f8e:	5053      	str	r3, [r2, r1]
10066f90:	2804      	cmp	r0, #4
10066f92:	dbe9      	blt.n	10066f68 <AES_CMAC_Encrypt_Append+0x54>
10066f94:	68a2      	ldr	r2, [r4, #8]
10066f96:	a804      	add	r0, sp, #16
10066f98:	9908      	ldr	r1, [sp, #32]
10066f9a:	f7e6 fe3d 	bl	1004dc18 <AES_128_HW_enc>
10066f9e:	9d00      	ldr	r5, [sp, #0]
10066fa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066fa2:	4628      	mov	r0, r5
10066fa4:	3010      	adds	r0, #16
10066fa6:	9000      	str	r0, [sp, #0]
10066fa8:	4288      	cmp	r0, r1
10066faa:	dbdc      	blt.n	10066f66 <AES_CMAC_Encrypt_Append+0x52>
10066fac:	7920      	ldrb	r0, [r4, #4]
10066fae:	0680      	lsls	r0, r0, #26
10066fb0:	d41e      	bmi.n	10066ff0 <AES_CMAC_Encrypt_Append+0xdc>
10066fb2:	2900      	cmp	r1, #0
10066fb4:	dd1c      	ble.n	10066ff0 <AES_CMAC_Encrypt_Append+0xdc>
10066fb6:	2000      	movs	r0, #0
10066fb8:	0081      	lsls	r1, r0, #2
10066fba:	194a      	adds	r2, r1, r5
10066fbc:	1992      	adds	r2, r2, r6
10066fbe:	7853      	ldrb	r3, [r2, #1]
10066fc0:	7817      	ldrb	r7, [r2, #0]
10066fc2:	021b      	lsls	r3, r3, #8
10066fc4:	433b      	orrs	r3, r7
10066fc6:	7897      	ldrb	r7, [r2, #2]
10066fc8:	ba5b      	rev16	r3, r3
10066fca:	041b      	lsls	r3, r3, #16
10066fcc:	023f      	lsls	r7, r7, #8
10066fce:	78d2      	ldrb	r2, [r2, #3]
10066fd0:	433b      	orrs	r3, r7
10066fd2:	4313      	orrs	r3, r2
10066fd4:	190a      	adds	r2, r1, r4
10066fd6:	6952      	ldr	r2, [r2, #20]
10066fd8:	1c40      	adds	r0, r0, #1
10066fda:	4053      	eors	r3, r2
10066fdc:	aa04      	add	r2, sp, #16
10066fde:	5053      	str	r3, [r2, r1]
10066fe0:	2804      	cmp	r0, #4
10066fe2:	dbe9      	blt.n	10066fb8 <AES_CMAC_Encrypt_Append+0xa4>
10066fe4:	68a2      	ldr	r2, [r4, #8]
10066fe6:	a804      	add	r0, sp, #16
10066fe8:	9908      	ldr	r1, [sp, #32]
10066fea:	f7e6 fe15 	bl	1004dc18 <AES_128_HW_enc>
10066fee:	e0c0      	b.n	10067172 <AES_CMAC_Encrypt_Append+0x25e>
10066ff0:	2000      	movs	r0, #0
10066ff2:	9000      	str	r0, [sp, #0]
10066ff4:	9001      	str	r0, [sp, #4]
10066ff6:	9002      	str	r0, [sp, #8]
10066ff8:	9003      	str	r0, [sp, #12]
10066ffa:	4669      	mov	r1, sp
10066ffc:	4608      	mov	r0, r1
10066ffe:	68a2      	ldr	r2, [r4, #8]
10067000:	f7e6 fe0a 	bl	1004dc18 <AES_128_HW_enc>
10067004:	9900      	ldr	r1, [sp, #0]
10067006:	2287      	movs	r2, #135	@ 0x87
10067008:	0fc8      	lsrs	r0, r1, #31
1006700a:	4350      	muls	r0, r2
1006700c:	9a01      	ldr	r2, [sp, #4]
1006700e:	0049      	lsls	r1, r1, #1
10067010:	0fd2      	lsrs	r2, r2, #31
10067012:	4311      	orrs	r1, r2
10067014:	9100      	str	r1, [sp, #0]
10067016:	9901      	ldr	r1, [sp, #4]
10067018:	9a02      	ldr	r2, [sp, #8]
1006701a:	0049      	lsls	r1, r1, #1
1006701c:	0fd2      	lsrs	r2, r2, #31
1006701e:	4311      	orrs	r1, r2
10067020:	9101      	str	r1, [sp, #4]
10067022:	9902      	ldr	r1, [sp, #8]
10067024:	9a03      	ldr	r2, [sp, #12]
10067026:	0049      	lsls	r1, r1, #1
10067028:	0fd2      	lsrs	r2, r2, #31
1006702a:	4311      	orrs	r1, r2
1006702c:	9102      	str	r1, [sp, #8]
1006702e:	9903      	ldr	r1, [sp, #12]
10067030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10067032:	0049      	lsls	r1, r1, #1
10067034:	4041      	eors	r1, r0
10067036:	4628      	mov	r0, r5
10067038:	3010      	adds	r0, #16
1006703a:	9103      	str	r1, [sp, #12]
1006703c:	4290      	cmp	r0, r2
1006703e:	d11a      	bne.n	10067076 <AES_CMAC_Encrypt_Append+0x162>
10067040:	2000      	movs	r0, #0
10067042:	0081      	lsls	r1, r0, #2
10067044:	194a      	adds	r2, r1, r5
10067046:	1993      	adds	r3, r2, r6
10067048:	785a      	ldrb	r2, [r3, #1]
1006704a:	781f      	ldrb	r7, [r3, #0]
1006704c:	0212      	lsls	r2, r2, #8
1006704e:	433a      	orrs	r2, r7
10067050:	789f      	ldrb	r7, [r3, #2]
10067052:	ba52      	rev16	r2, r2
10067054:	0412      	lsls	r2, r2, #16
10067056:	023f      	lsls	r7, r7, #8
10067058:	433a      	orrs	r2, r7
1006705a:	78db      	ldrb	r3, [r3, #3]
1006705c:	466f      	mov	r7, sp
1006705e:	431a      	orrs	r2, r3
10067060:	190b      	adds	r3, r1, r4
10067062:	695b      	ldr	r3, [r3, #20]
10067064:	587f      	ldr	r7, [r7, r1]
10067066:	1c40      	adds	r0, r0, #1
10067068:	407b      	eors	r3, r7
1006706a:	405a      	eors	r2, r3
1006706c:	ab04      	add	r3, sp, #16
1006706e:	505a      	str	r2, [r3, r1]
10067070:	2804      	cmp	r0, #4
10067072:	dbe6      	blt.n	10067042 <AES_CMAC_Encrypt_Append+0x12e>
10067074:	e074      	b.n	10067160 <AES_CMAC_Encrypt_Append+0x24c>
10067076:	9a00      	ldr	r2, [sp, #0]
10067078:	2387      	movs	r3, #135	@ 0x87
1006707a:	0fd0      	lsrs	r0, r2, #31
1006707c:	4358      	muls	r0, r3
1006707e:	9b01      	ldr	r3, [sp, #4]
10067080:	0052      	lsls	r2, r2, #1
10067082:	0fdb      	lsrs	r3, r3, #31
10067084:	431a      	orrs	r2, r3
10067086:	9200      	str	r2, [sp, #0]
10067088:	9a01      	ldr	r2, [sp, #4]
1006708a:	9b02      	ldr	r3, [sp, #8]
1006708c:	0052      	lsls	r2, r2, #1
1006708e:	0fdb      	lsrs	r3, r3, #31
10067090:	431a      	orrs	r2, r3
10067092:	9201      	str	r2, [sp, #4]
10067094:	9a02      	ldr	r2, [sp, #8]
10067096:	0fcb      	lsrs	r3, r1, #31
10067098:	0052      	lsls	r2, r2, #1
1006709a:	431a      	orrs	r2, r3
1006709c:	9202      	str	r2, [sp, #8]
1006709e:	004a      	lsls	r2, r1, #1
100670a0:	4042      	eors	r2, r0
100670a2:	9203      	str	r2, [sp, #12]
100670a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100670a6:	2000      	movs	r0, #0
100670a8:	1b53      	subs	r3, r2, r5
100670aa:	17da      	asrs	r2, r3, #31
100670ac:	469c      	mov	ip, r3
100670ae:	0f92      	lsrs	r2, r2, #30
100670b0:	4462      	add	r2, ip
100670b2:	1092      	asrs	r2, r2, #2
100670b4:	4696      	mov	lr, r2
100670b6:	e016      	b.n	100670e6 <AES_CMAC_Encrypt_Append+0x1d2>
100670b8:	0081      	lsls	r1, r0, #2
100670ba:	194a      	adds	r2, r1, r5
100670bc:	1993      	adds	r3, r2, r6
100670be:	785a      	ldrb	r2, [r3, #1]
100670c0:	781f      	ldrb	r7, [r3, #0]
100670c2:	0212      	lsls	r2, r2, #8
100670c4:	433a      	orrs	r2, r7
100670c6:	789f      	ldrb	r7, [r3, #2]
100670c8:	ba52      	rev16	r2, r2
100670ca:	0412      	lsls	r2, r2, #16
100670cc:	023f      	lsls	r7, r7, #8
100670ce:	433a      	orrs	r2, r7
100670d0:	78db      	ldrb	r3, [r3, #3]
100670d2:	466f      	mov	r7, sp
100670d4:	431a      	orrs	r2, r3
100670d6:	190b      	adds	r3, r1, r4
100670d8:	695b      	ldr	r3, [r3, #20]
100670da:	587f      	ldr	r7, [r7, r1]
100670dc:	407b      	eors	r3, r7
100670de:	405a      	eors	r2, r3
100670e0:	ab04      	add	r3, sp, #16
100670e2:	505a      	str	r2, [r3, r1]
100670e4:	1c40      	adds	r0, r0, #1
100670e6:	4586      	cmp	lr, r0
100670e8:	dce6      	bgt.n	100670b8 <AES_CMAC_Encrypt_Append+0x1a4>
100670ea:	0081      	lsls	r1, r0, #2
100670ec:	190a      	adds	r2, r1, r4
100670ee:	466b      	mov	r3, sp
100670f0:	6952      	ldr	r2, [r2, #20]
100670f2:	585b      	ldr	r3, [r3, r1]
100670f4:	4667      	mov	r7, ip
100670f6:	405a      	eors	r2, r3
100670f8:	ab04      	add	r3, sp, #16
100670fa:	505a      	str	r2, [r3, r1]
100670fc:	1a7f      	subs	r7, r7, r1
100670fe:	2200      	movs	r2, #0
10067100:	194b      	adds	r3, r1, r5
10067102:	46bc      	mov	ip, r7
10067104:	469e      	mov	lr, r3
10067106:	e00b      	b.n	10067120 <AES_CMAC_Encrypt_Append+0x20c>
10067108:	4673      	mov	r3, lr
1006710a:	189b      	adds	r3, r3, r2
1006710c:	5cf3      	ldrb	r3, [r6, r3]
1006710e:	00d7      	lsls	r7, r2, #3
10067110:	2518      	movs	r5, #24
10067112:	1bed      	subs	r5, r5, r7
10067114:	40ab      	lsls	r3, r5
10067116:	ad04      	add	r5, sp, #16
10067118:	586f      	ldr	r7, [r5, r1]
1006711a:	407b      	eors	r3, r7
1006711c:	506b      	str	r3, [r5, r1]
1006711e:	1c52      	adds	r2, r2, #1
10067120:	4594      	cmp	ip, r2
10067122:	dcf1      	bgt.n	10067108 <AES_CMAC_Encrypt_Append+0x1f4>
10067124:	2a00      	cmp	r2, #0
10067126:	d009      	beq.n	1006713c <AES_CMAC_Encrypt_Append+0x228>
10067128:	00d6      	lsls	r6, r2, #3
1006712a:	2218      	movs	r2, #24
1006712c:	ab04      	add	r3, sp, #16
1006712e:	1b96      	subs	r6, r2, r6
10067130:	585d      	ldr	r5, [r3, r1]
10067132:	2280      	movs	r2, #128	@ 0x80
10067134:	40b2      	lsls	r2, r6
10067136:	4055      	eors	r5, r2
10067138:	505d      	str	r5, [r3, r1]
1006713a:	e005      	b.n	10067148 <AES_CMAC_Encrypt_Append+0x234>
1006713c:	aa04      	add	r2, sp, #16
1006713e:	5853      	ldr	r3, [r2, r1]
10067140:	2501      	movs	r5, #1
10067142:	07ed      	lsls	r5, r5, #31
10067144:	406b      	eors	r3, r5
10067146:	5053      	str	r3, [r2, r1]
10067148:	ab04      	add	r3, sp, #16
1006714a:	466a      	mov	r2, sp
1006714c:	e005      	b.n	1006715a <AES_CMAC_Encrypt_Append+0x246>
1006714e:	0081      	lsls	r1, r0, #2
10067150:	190d      	adds	r5, r1, r4
10067152:	696d      	ldr	r5, [r5, #20]
10067154:	5856      	ldr	r6, [r2, r1]
10067156:	4075      	eors	r5, r6
10067158:	505d      	str	r5, [r3, r1]
1006715a:	1c40      	adds	r0, r0, #1
1006715c:	2804      	cmp	r0, #4
1006715e:	dbf6      	blt.n	1006714e <AES_CMAC_Encrypt_Append+0x23a>
10067160:	68a2      	ldr	r2, [r4, #8]
10067162:	4618      	mov	r0, r3
10067164:	9908      	ldr	r1, [sp, #32]
10067166:	f7e6 fd57 	bl	1004dc18 <AES_128_HW_enc>
1006716a:	7920      	ldrb	r0, [r4, #4]
1006716c:	2104      	movs	r1, #4
1006716e:	4308      	orrs	r0, r1
10067170:	7120      	strb	r0, [r4, #4]
10067172:	2000      	movs	r0, #0
10067174:	e6dc      	b.n	10066f30 <AES_CMAC_Encrypt_Append+0x1c>
10067176:	0000      	.short	0x0000
10067178:	00000c1d 	.word	0x00000c1d

1006717c <AES_CMAC_Encrypt_Finish>:
1006717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006717e:	4616      	mov	r6, r2
10067180:	460f      	mov	r7, r1
10067182:	0004      	movs	r4, r0
10067184:	d009      	beq.n	1006719a <AES_CMAC_Encrypt_Finish+0x1e>
10067186:	2e00      	cmp	r6, #0
10067188:	d007      	beq.n	1006719a <AES_CMAC_Encrypt_Finish+0x1e>
1006718a:	4625      	mov	r5, r4
1006718c:	3580      	adds	r5, #128	@ 0x80
1006718e:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
10067190:	1e40      	subs	r0, r0, #1
10067192:	2810      	cmp	r0, #16
10067194:	d304      	bcc.n	100671a0 <AES_CMAC_Encrypt_Finish+0x24>
10067196:	4813      	ldr	r0, [pc, #76]	@ (100671e4 <AES_CMAC_Encrypt_Finish+0x68>)
10067198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006719a:	2061      	movs	r0, #97	@ 0x61
1006719c:	0140      	lsls	r0, r0, #5
1006719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100671a0:	7920      	ldrb	r0, [r4, #4]
100671a2:	0640      	lsls	r0, r0, #25
100671a4:	d404      	bmi.n	100671b0 <AES_CMAC_Encrypt_Finish+0x34>
100671a6:	2200      	movs	r2, #0
100671a8:	4611      	mov	r1, r2
100671aa:	4620      	mov	r0, r4
100671ac:	f7ff feb2 	bl	10066f14 <AES_CMAC_Encrypt_Append>
100671b0:	7920      	ldrb	r0, [r4, #4]
100671b2:	2102      	movs	r1, #2
100671b4:	4308      	orrs	r0, r1
100671b6:	7120      	strb	r0, [r4, #4]
100671b8:	2000      	movs	r0, #0
100671ba:	2118      	movs	r1, #24
100671bc:	e00c      	b.n	100671d8 <AES_CMAC_Encrypt_Finish+0x5c>
100671be:	17c2      	asrs	r2, r0, #31
100671c0:	0f92      	lsrs	r2, r2, #30
100671c2:	1812      	adds	r2, r2, r0
100671c4:	0892      	lsrs	r2, r2, #2
100671c6:	0092      	lsls	r2, r2, #2
100671c8:	1912      	adds	r2, r2, r4
100671ca:	0783      	lsls	r3, r0, #30
100671cc:	6952      	ldr	r2, [r2, #20]
100671ce:	0edb      	lsrs	r3, r3, #27
100671d0:	1acb      	subs	r3, r1, r3
100671d2:	40da      	lsrs	r2, r3
100671d4:	543a      	strb	r2, [r7, r0]
100671d6:	1c40      	adds	r0, r0, #1
100671d8:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
100671da:	4282      	cmp	r2, r0
100671dc:	dcef      	bgt.n	100671be <AES_CMAC_Encrypt_Finish+0x42>
100671de:	2000      	movs	r0, #0
100671e0:	6032      	str	r2, [r6, #0]
100671e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100671e4:	00000c1f 	.word	0x00000c1f

100671e8 <AES_CMAC_Encrypt_Init>:
100671e8:	b510      	push	{r4, lr}
100671ea:	0004      	movs	r4, r0
100671ec:	d007      	beq.n	100671fe <AES_CMAC_Encrypt_Init+0x16>
100671ee:	2302      	movs	r3, #2
100671f0:	2200      	movs	r2, #0
100671f2:	68a1      	ldr	r1, [r4, #8]
100671f4:	f000 f81a 	bl	1006722c <AESstdInitEnc>
100671f8:	0001      	movs	r1, r0
100671fa:	d003      	beq.n	10067204 <AES_CMAC_Encrypt_Init+0x1c>
100671fc:	e00c      	b.n	10067218 <AES_CMAC_Encrypt_Init+0x30>
100671fe:	2061      	movs	r0, #97	@ 0x61
10067200:	0140      	lsls	r0, r0, #5
10067202:	bd10      	pop	{r4, pc}
10067204:	2000      	movs	r0, #0
10067206:	2210      	movs	r2, #16
10067208:	6122      	str	r2, [r4, #16]
1006720a:	4602      	mov	r2, r0
1006720c:	0083      	lsls	r3, r0, #2
1006720e:	191b      	adds	r3, r3, r4
10067210:	1c40      	adds	r0, r0, #1
10067212:	615a      	str	r2, [r3, #20]
10067214:	2804      	cmp	r0, #4
10067216:	dbf9      	blt.n	1006720c <AES_CMAC_Encrypt_Init+0x24>
10067218:	6a60      	ldr	r0, [r4, #36]	@ 0x24
1006721a:	2810      	cmp	r0, #16
1006721c:	d001      	beq.n	10067222 <AES_CMAC_Encrypt_Init+0x3a>
1006721e:	4802      	ldr	r0, [pc, #8]	@ (10067228 <AES_CMAC_Encrypt_Init+0x40>)
10067220:	bd10      	pop	{r4, pc}
10067222:	4608      	mov	r0, r1
10067224:	bd10      	pop	{r4, pc}
10067226:	0000      	.short	0x0000
10067228:	00000c1d 	.word	0x00000c1d

1006722c <AESstdInitEnc>:
1006722c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006722e:	2800      	cmp	r0, #0
10067230:	d007      	beq.n	10067242 <AESstdInitEnc+0x16>
10067232:	2900      	cmp	r1, #0
10067234:	d005      	beq.n	10067242 <AESstdInitEnc+0x16>
10067236:	075b      	lsls	r3, r3, #29
10067238:	0f9c      	lsrs	r4, r3, #30
1006723a:	2a00      	cmp	r2, #0
1006723c:	d104      	bne.n	10067248 <AESstdInitEnc+0x1c>
1006723e:	2c01      	cmp	r4, #1
10067240:	d002      	beq.n	10067248 <AESstdInitEnc+0x1c>
10067242:	2061      	movs	r0, #97	@ 0x61
10067244:	0140      	lsls	r0, r0, #5
10067246:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067248:	6a43      	ldr	r3, [r0, #36]	@ 0x24
1006724a:	2b10      	cmp	r3, #16
1006724c:	d003      	beq.n	10067256 <AESstdInitEnc+0x2a>
1006724e:	2b18      	cmp	r3, #24
10067250:	d001      	beq.n	10067256 <AESstdInitEnc+0x2a>
10067252:	2b20      	cmp	r3, #32
10067254:	d105      	bne.n	10067262 <AESstdInitEnc+0x36>
10067256:	2c01      	cmp	r4, #1
10067258:	d005      	beq.n	10067266 <AESstdInitEnc+0x3a>
1006725a:	6905      	ldr	r5, [r0, #16]
1006725c:	1e6d      	subs	r5, r5, #1
1006725e:	2d10      	cmp	r5, #16
10067260:	d301      	bcc.n	10067266 <AESstdInitEnc+0x3a>
10067262:	481a      	ldr	r0, [pc, #104]	@ (100672cc <AESstdInitEnc+0xa0>)
10067264:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067266:	2b10      	cmp	r3, #16
10067268:	d002      	beq.n	10067270 <AESstdInitEnc+0x44>
1006726a:	4818      	ldr	r0, [pc, #96]	@ (100672cc <AESstdInitEnc+0xa0>)
1006726c:	1e80      	subs	r0, r0, #2
1006726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067270:	60c2      	str	r2, [r0, #12]
10067272:	7903      	ldrb	r3, [r0, #4]
10067274:	25f9      	movs	r5, #249	@ 0xf9
10067276:	402b      	ands	r3, r5
10067278:	7103      	strb	r3, [r0, #4]
1006727a:	2c01      	cmp	r4, #1
1006727c:	d020      	beq.n	100672c0 <AESstdInitEnc+0x94>
1006727e:	2300      	movs	r3, #0
10067280:	461c      	mov	r4, r3
10067282:	009d      	lsls	r5, r3, #2
10067284:	182d      	adds	r5, r5, r0
10067286:	1c5b      	adds	r3, r3, #1
10067288:	616c      	str	r4, [r5, #20]
1006728a:	2b04      	cmp	r3, #4
1006728c:	dbf9      	blt.n	10067282 <AESstdInitEnc+0x56>
1006728e:	2300      	movs	r3, #0
10067290:	e013      	b.n	100672ba <AESstdInitEnc+0x8e>
10067292:	17dc      	asrs	r4, r3, #31
10067294:	0fa4      	lsrs	r4, r4, #30
10067296:	18e4      	adds	r4, r4, r3
10067298:	08a4      	lsrs	r4, r4, #2
1006729a:	00a4      	lsls	r4, r4, #2
1006729c:	1825      	adds	r5, r4, r0
1006729e:	462e      	mov	r6, r5
100672a0:	3614      	adds	r6, #20
100672a2:	46b4      	mov	ip, r6
100672a4:	1b1c      	subs	r4, r3, r4
100672a6:	5cd6      	ldrb	r6, [r2, r3]
100672a8:	00e4      	lsls	r4, r4, #3
100672aa:	2718      	movs	r7, #24
100672ac:	696d      	ldr	r5, [r5, #20]
100672ae:	1b3c      	subs	r4, r7, r4
100672b0:	40a6      	lsls	r6, r4
100672b2:	4335      	orrs	r5, r6
100672b4:	4666      	mov	r6, ip
100672b6:	1c5b      	adds	r3, r3, #1
100672b8:	6035      	str	r5, [r6, #0]
100672ba:	6904      	ldr	r4, [r0, #16]
100672bc:	429c      	cmp	r4, r3
100672be:	dce8      	bgt.n	10067292 <AESstdInitEnc+0x66>
100672c0:	7902      	ldrb	r2, [r0, #4]
100672c2:	07d2      	lsls	r2, r2, #31
100672c4:	d100      	bne.n	100672c8 <AESstdInitEnc+0x9c>
100672c6:	6081      	str	r1, [r0, #8]
100672c8:	2000      	movs	r0, #0
100672ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100672cc:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

100672d0 <_init>:
100672d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100672d2:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

100672d4 <_fini>:
100672d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100672d6:	46c0      	nop			@ (mov r8, r8)
