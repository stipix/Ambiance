
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10045510  10045510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10045514  10045514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000ac  10045518  10045518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  100455c4  100455c4  000065c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000044  20000368  100455cc  00007368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00008004  2**2
                  ALLOC
  8 .bss.blueRAM  000000d4  200000c0  200000c0  00008004  2**2
                  ALLOC
  9 .bss          000001d4  20000194  20000194  00008004  2**2
                  ALLOC
 10 .noinit       00000000  200003ac  10045610  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  10045610  10045610  000073ac  2**0
                  CONTENTS
 12 .heap         00000000  200003ac  200003ac  000073ac  2**0
                  CONTENTS
 13 .stack        00000c00  20005400  20005400  00007400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  000073ac  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  000073ac  2**0
                  CONTENTS, READONLY
 16 .debug_info   00018bef  00000000  00000000  000073d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00003688  00000000  00000000  0001ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001808  00000000  00000000  00023650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001299  00000000  00000000  00024e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00003c5b  00000000  00000000  000260f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001b483  00000000  00000000  00029d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000b0fa6  00000000  00000000  000451cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  000f6175  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00005794  00000000  00000000  000f61b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000009f  00000000  00000000  000fb94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <__udivsi3>:
10040104:	2200      	movs	r2, #0
10040106:	0843      	lsrs	r3, r0, #1
10040108:	428b      	cmp	r3, r1
1004010a:	d374      	bcc.n	100401f6 <__udivsi3+0xf2>
1004010c:	0903      	lsrs	r3, r0, #4
1004010e:	428b      	cmp	r3, r1
10040110:	d35f      	bcc.n	100401d2 <__udivsi3+0xce>
10040112:	0a03      	lsrs	r3, r0, #8
10040114:	428b      	cmp	r3, r1
10040116:	d344      	bcc.n	100401a2 <__udivsi3+0x9e>
10040118:	0b03      	lsrs	r3, r0, #12
1004011a:	428b      	cmp	r3, r1
1004011c:	d328      	bcc.n	10040170 <__udivsi3+0x6c>
1004011e:	0c03      	lsrs	r3, r0, #16
10040120:	428b      	cmp	r3, r1
10040122:	d30d      	bcc.n	10040140 <__udivsi3+0x3c>
10040124:	22ff      	movs	r2, #255	@ 0xff
10040126:	0209      	lsls	r1, r1, #8
10040128:	ba12      	rev	r2, r2
1004012a:	0c03      	lsrs	r3, r0, #16
1004012c:	428b      	cmp	r3, r1
1004012e:	d302      	bcc.n	10040136 <__udivsi3+0x32>
10040130:	1212      	asrs	r2, r2, #8
10040132:	0209      	lsls	r1, r1, #8
10040134:	d065      	beq.n	10040202 <__udivsi3+0xfe>
10040136:	0b03      	lsrs	r3, r0, #12
10040138:	428b      	cmp	r3, r1
1004013a:	d319      	bcc.n	10040170 <__udivsi3+0x6c>
1004013c:	e000      	b.n	10040140 <__udivsi3+0x3c>
1004013e:	0a09      	lsrs	r1, r1, #8
10040140:	0bc3      	lsrs	r3, r0, #15
10040142:	428b      	cmp	r3, r1
10040144:	d301      	bcc.n	1004014a <__udivsi3+0x46>
10040146:	03cb      	lsls	r3, r1, #15
10040148:	1ac0      	subs	r0, r0, r3
1004014a:	4152      	adcs	r2, r2
1004014c:	0b83      	lsrs	r3, r0, #14
1004014e:	428b      	cmp	r3, r1
10040150:	d301      	bcc.n	10040156 <__udivsi3+0x52>
10040152:	038b      	lsls	r3, r1, #14
10040154:	1ac0      	subs	r0, r0, r3
10040156:	4152      	adcs	r2, r2
10040158:	0b43      	lsrs	r3, r0, #13
1004015a:	428b      	cmp	r3, r1
1004015c:	d301      	bcc.n	10040162 <__udivsi3+0x5e>
1004015e:	034b      	lsls	r3, r1, #13
10040160:	1ac0      	subs	r0, r0, r3
10040162:	4152      	adcs	r2, r2
10040164:	0b03      	lsrs	r3, r0, #12
10040166:	428b      	cmp	r3, r1
10040168:	d301      	bcc.n	1004016e <__udivsi3+0x6a>
1004016a:	030b      	lsls	r3, r1, #12
1004016c:	1ac0      	subs	r0, r0, r3
1004016e:	4152      	adcs	r2, r2
10040170:	0ac3      	lsrs	r3, r0, #11
10040172:	428b      	cmp	r3, r1
10040174:	d301      	bcc.n	1004017a <__udivsi3+0x76>
10040176:	02cb      	lsls	r3, r1, #11
10040178:	1ac0      	subs	r0, r0, r3
1004017a:	4152      	adcs	r2, r2
1004017c:	0a83      	lsrs	r3, r0, #10
1004017e:	428b      	cmp	r3, r1
10040180:	d301      	bcc.n	10040186 <__udivsi3+0x82>
10040182:	028b      	lsls	r3, r1, #10
10040184:	1ac0      	subs	r0, r0, r3
10040186:	4152      	adcs	r2, r2
10040188:	0a43      	lsrs	r3, r0, #9
1004018a:	428b      	cmp	r3, r1
1004018c:	d301      	bcc.n	10040192 <__udivsi3+0x8e>
1004018e:	024b      	lsls	r3, r1, #9
10040190:	1ac0      	subs	r0, r0, r3
10040192:	4152      	adcs	r2, r2
10040194:	0a03      	lsrs	r3, r0, #8
10040196:	428b      	cmp	r3, r1
10040198:	d301      	bcc.n	1004019e <__udivsi3+0x9a>
1004019a:	020b      	lsls	r3, r1, #8
1004019c:	1ac0      	subs	r0, r0, r3
1004019e:	4152      	adcs	r2, r2
100401a0:	d2cd      	bcs.n	1004013e <__udivsi3+0x3a>
100401a2:	09c3      	lsrs	r3, r0, #7
100401a4:	428b      	cmp	r3, r1
100401a6:	d301      	bcc.n	100401ac <__udivsi3+0xa8>
100401a8:	01cb      	lsls	r3, r1, #7
100401aa:	1ac0      	subs	r0, r0, r3
100401ac:	4152      	adcs	r2, r2
100401ae:	0983      	lsrs	r3, r0, #6
100401b0:	428b      	cmp	r3, r1
100401b2:	d301      	bcc.n	100401b8 <__udivsi3+0xb4>
100401b4:	018b      	lsls	r3, r1, #6
100401b6:	1ac0      	subs	r0, r0, r3
100401b8:	4152      	adcs	r2, r2
100401ba:	0943      	lsrs	r3, r0, #5
100401bc:	428b      	cmp	r3, r1
100401be:	d301      	bcc.n	100401c4 <__udivsi3+0xc0>
100401c0:	014b      	lsls	r3, r1, #5
100401c2:	1ac0      	subs	r0, r0, r3
100401c4:	4152      	adcs	r2, r2
100401c6:	0903      	lsrs	r3, r0, #4
100401c8:	428b      	cmp	r3, r1
100401ca:	d301      	bcc.n	100401d0 <__udivsi3+0xcc>
100401cc:	010b      	lsls	r3, r1, #4
100401ce:	1ac0      	subs	r0, r0, r3
100401d0:	4152      	adcs	r2, r2
100401d2:	08c3      	lsrs	r3, r0, #3
100401d4:	428b      	cmp	r3, r1
100401d6:	d301      	bcc.n	100401dc <__udivsi3+0xd8>
100401d8:	00cb      	lsls	r3, r1, #3
100401da:	1ac0      	subs	r0, r0, r3
100401dc:	4152      	adcs	r2, r2
100401de:	0883      	lsrs	r3, r0, #2
100401e0:	428b      	cmp	r3, r1
100401e2:	d301      	bcc.n	100401e8 <__udivsi3+0xe4>
100401e4:	008b      	lsls	r3, r1, #2
100401e6:	1ac0      	subs	r0, r0, r3
100401e8:	4152      	adcs	r2, r2
100401ea:	0843      	lsrs	r3, r0, #1
100401ec:	428b      	cmp	r3, r1
100401ee:	d301      	bcc.n	100401f4 <__udivsi3+0xf0>
100401f0:	004b      	lsls	r3, r1, #1
100401f2:	1ac0      	subs	r0, r0, r3
100401f4:	4152      	adcs	r2, r2
100401f6:	1a41      	subs	r1, r0, r1
100401f8:	d200      	bcs.n	100401fc <__udivsi3+0xf8>
100401fa:	4601      	mov	r1, r0
100401fc:	4152      	adcs	r2, r2
100401fe:	4610      	mov	r0, r2
10040200:	4770      	bx	lr
10040202:	e7ff      	b.n	10040204 <__udivsi3+0x100>
10040204:	b501      	push	{r0, lr}
10040206:	2000      	movs	r0, #0
10040208:	f000 f8f0 	bl	100403ec <__aeabi_idiv0>
1004020c:	bd02      	pop	{r1, pc}
1004020e:	46c0      	nop			@ (mov r8, r8)

10040210 <__aeabi_uidivmod>:
10040210:	2900      	cmp	r1, #0
10040212:	d0f7      	beq.n	10040204 <__udivsi3+0x100>
10040214:	e776      	b.n	10040104 <__udivsi3>
10040216:	4770      	bx	lr

10040218 <__divsi3>:
10040218:	4603      	mov	r3, r0
1004021a:	430b      	orrs	r3, r1
1004021c:	d47f      	bmi.n	1004031e <__divsi3+0x106>
1004021e:	2200      	movs	r2, #0
10040220:	0843      	lsrs	r3, r0, #1
10040222:	428b      	cmp	r3, r1
10040224:	d374      	bcc.n	10040310 <__divsi3+0xf8>
10040226:	0903      	lsrs	r3, r0, #4
10040228:	428b      	cmp	r3, r1
1004022a:	d35f      	bcc.n	100402ec <__divsi3+0xd4>
1004022c:	0a03      	lsrs	r3, r0, #8
1004022e:	428b      	cmp	r3, r1
10040230:	d344      	bcc.n	100402bc <__divsi3+0xa4>
10040232:	0b03      	lsrs	r3, r0, #12
10040234:	428b      	cmp	r3, r1
10040236:	d328      	bcc.n	1004028a <__divsi3+0x72>
10040238:	0c03      	lsrs	r3, r0, #16
1004023a:	428b      	cmp	r3, r1
1004023c:	d30d      	bcc.n	1004025a <__divsi3+0x42>
1004023e:	22ff      	movs	r2, #255	@ 0xff
10040240:	0209      	lsls	r1, r1, #8
10040242:	ba12      	rev	r2, r2
10040244:	0c03      	lsrs	r3, r0, #16
10040246:	428b      	cmp	r3, r1
10040248:	d302      	bcc.n	10040250 <__divsi3+0x38>
1004024a:	1212      	asrs	r2, r2, #8
1004024c:	0209      	lsls	r1, r1, #8
1004024e:	d065      	beq.n	1004031c <__divsi3+0x104>
10040250:	0b03      	lsrs	r3, r0, #12
10040252:	428b      	cmp	r3, r1
10040254:	d319      	bcc.n	1004028a <__divsi3+0x72>
10040256:	e000      	b.n	1004025a <__divsi3+0x42>
10040258:	0a09      	lsrs	r1, r1, #8
1004025a:	0bc3      	lsrs	r3, r0, #15
1004025c:	428b      	cmp	r3, r1
1004025e:	d301      	bcc.n	10040264 <__divsi3+0x4c>
10040260:	03cb      	lsls	r3, r1, #15
10040262:	1ac0      	subs	r0, r0, r3
10040264:	4152      	adcs	r2, r2
10040266:	0b83      	lsrs	r3, r0, #14
10040268:	428b      	cmp	r3, r1
1004026a:	d301      	bcc.n	10040270 <__divsi3+0x58>
1004026c:	038b      	lsls	r3, r1, #14
1004026e:	1ac0      	subs	r0, r0, r3
10040270:	4152      	adcs	r2, r2
10040272:	0b43      	lsrs	r3, r0, #13
10040274:	428b      	cmp	r3, r1
10040276:	d301      	bcc.n	1004027c <__divsi3+0x64>
10040278:	034b      	lsls	r3, r1, #13
1004027a:	1ac0      	subs	r0, r0, r3
1004027c:	4152      	adcs	r2, r2
1004027e:	0b03      	lsrs	r3, r0, #12
10040280:	428b      	cmp	r3, r1
10040282:	d301      	bcc.n	10040288 <__divsi3+0x70>
10040284:	030b      	lsls	r3, r1, #12
10040286:	1ac0      	subs	r0, r0, r3
10040288:	4152      	adcs	r2, r2
1004028a:	0ac3      	lsrs	r3, r0, #11
1004028c:	428b      	cmp	r3, r1
1004028e:	d301      	bcc.n	10040294 <__divsi3+0x7c>
10040290:	02cb      	lsls	r3, r1, #11
10040292:	1ac0      	subs	r0, r0, r3
10040294:	4152      	adcs	r2, r2
10040296:	0a83      	lsrs	r3, r0, #10
10040298:	428b      	cmp	r3, r1
1004029a:	d301      	bcc.n	100402a0 <__divsi3+0x88>
1004029c:	028b      	lsls	r3, r1, #10
1004029e:	1ac0      	subs	r0, r0, r3
100402a0:	4152      	adcs	r2, r2
100402a2:	0a43      	lsrs	r3, r0, #9
100402a4:	428b      	cmp	r3, r1
100402a6:	d301      	bcc.n	100402ac <__divsi3+0x94>
100402a8:	024b      	lsls	r3, r1, #9
100402aa:	1ac0      	subs	r0, r0, r3
100402ac:	4152      	adcs	r2, r2
100402ae:	0a03      	lsrs	r3, r0, #8
100402b0:	428b      	cmp	r3, r1
100402b2:	d301      	bcc.n	100402b8 <__divsi3+0xa0>
100402b4:	020b      	lsls	r3, r1, #8
100402b6:	1ac0      	subs	r0, r0, r3
100402b8:	4152      	adcs	r2, r2
100402ba:	d2cd      	bcs.n	10040258 <__divsi3+0x40>
100402bc:	09c3      	lsrs	r3, r0, #7
100402be:	428b      	cmp	r3, r1
100402c0:	d301      	bcc.n	100402c6 <__divsi3+0xae>
100402c2:	01cb      	lsls	r3, r1, #7
100402c4:	1ac0      	subs	r0, r0, r3
100402c6:	4152      	adcs	r2, r2
100402c8:	0983      	lsrs	r3, r0, #6
100402ca:	428b      	cmp	r3, r1
100402cc:	d301      	bcc.n	100402d2 <__divsi3+0xba>
100402ce:	018b      	lsls	r3, r1, #6
100402d0:	1ac0      	subs	r0, r0, r3
100402d2:	4152      	adcs	r2, r2
100402d4:	0943      	lsrs	r3, r0, #5
100402d6:	428b      	cmp	r3, r1
100402d8:	d301      	bcc.n	100402de <__divsi3+0xc6>
100402da:	014b      	lsls	r3, r1, #5
100402dc:	1ac0      	subs	r0, r0, r3
100402de:	4152      	adcs	r2, r2
100402e0:	0903      	lsrs	r3, r0, #4
100402e2:	428b      	cmp	r3, r1
100402e4:	d301      	bcc.n	100402ea <__divsi3+0xd2>
100402e6:	010b      	lsls	r3, r1, #4
100402e8:	1ac0      	subs	r0, r0, r3
100402ea:	4152      	adcs	r2, r2
100402ec:	08c3      	lsrs	r3, r0, #3
100402ee:	428b      	cmp	r3, r1
100402f0:	d301      	bcc.n	100402f6 <__divsi3+0xde>
100402f2:	00cb      	lsls	r3, r1, #3
100402f4:	1ac0      	subs	r0, r0, r3
100402f6:	4152      	adcs	r2, r2
100402f8:	0883      	lsrs	r3, r0, #2
100402fa:	428b      	cmp	r3, r1
100402fc:	d301      	bcc.n	10040302 <__divsi3+0xea>
100402fe:	008b      	lsls	r3, r1, #2
10040300:	1ac0      	subs	r0, r0, r3
10040302:	4152      	adcs	r2, r2
10040304:	0843      	lsrs	r3, r0, #1
10040306:	428b      	cmp	r3, r1
10040308:	d301      	bcc.n	1004030e <__divsi3+0xf6>
1004030a:	004b      	lsls	r3, r1, #1
1004030c:	1ac0      	subs	r0, r0, r3
1004030e:	4152      	adcs	r2, r2
10040310:	1a41      	subs	r1, r0, r1
10040312:	d200      	bcs.n	10040316 <__divsi3+0xfe>
10040314:	4601      	mov	r1, r0
10040316:	4152      	adcs	r2, r2
10040318:	4610      	mov	r0, r2
1004031a:	4770      	bx	lr
1004031c:	e05d      	b.n	100403da <__divsi3+0x1c2>
1004031e:	0fca      	lsrs	r2, r1, #31
10040320:	d000      	beq.n	10040324 <__divsi3+0x10c>
10040322:	4249      	negs	r1, r1
10040324:	1003      	asrs	r3, r0, #32
10040326:	d300      	bcc.n	1004032a <__divsi3+0x112>
10040328:	4240      	negs	r0, r0
1004032a:	4053      	eors	r3, r2
1004032c:	2200      	movs	r2, #0
1004032e:	469c      	mov	ip, r3
10040330:	0903      	lsrs	r3, r0, #4
10040332:	428b      	cmp	r3, r1
10040334:	d32d      	bcc.n	10040392 <__divsi3+0x17a>
10040336:	0a03      	lsrs	r3, r0, #8
10040338:	428b      	cmp	r3, r1
1004033a:	d312      	bcc.n	10040362 <__divsi3+0x14a>
1004033c:	22fc      	movs	r2, #252	@ 0xfc
1004033e:	0189      	lsls	r1, r1, #6
10040340:	ba12      	rev	r2, r2
10040342:	0a03      	lsrs	r3, r0, #8
10040344:	428b      	cmp	r3, r1
10040346:	d30c      	bcc.n	10040362 <__divsi3+0x14a>
10040348:	0189      	lsls	r1, r1, #6
1004034a:	1192      	asrs	r2, r2, #6
1004034c:	428b      	cmp	r3, r1
1004034e:	d308      	bcc.n	10040362 <__divsi3+0x14a>
10040350:	0189      	lsls	r1, r1, #6
10040352:	1192      	asrs	r2, r2, #6
10040354:	428b      	cmp	r3, r1
10040356:	d304      	bcc.n	10040362 <__divsi3+0x14a>
10040358:	0189      	lsls	r1, r1, #6
1004035a:	d03a      	beq.n	100403d2 <__divsi3+0x1ba>
1004035c:	1192      	asrs	r2, r2, #6
1004035e:	e000      	b.n	10040362 <__divsi3+0x14a>
10040360:	0989      	lsrs	r1, r1, #6
10040362:	09c3      	lsrs	r3, r0, #7
10040364:	428b      	cmp	r3, r1
10040366:	d301      	bcc.n	1004036c <__divsi3+0x154>
10040368:	01cb      	lsls	r3, r1, #7
1004036a:	1ac0      	subs	r0, r0, r3
1004036c:	4152      	adcs	r2, r2
1004036e:	0983      	lsrs	r3, r0, #6
10040370:	428b      	cmp	r3, r1
10040372:	d301      	bcc.n	10040378 <__divsi3+0x160>
10040374:	018b      	lsls	r3, r1, #6
10040376:	1ac0      	subs	r0, r0, r3
10040378:	4152      	adcs	r2, r2
1004037a:	0943      	lsrs	r3, r0, #5
1004037c:	428b      	cmp	r3, r1
1004037e:	d301      	bcc.n	10040384 <__divsi3+0x16c>
10040380:	014b      	lsls	r3, r1, #5
10040382:	1ac0      	subs	r0, r0, r3
10040384:	4152      	adcs	r2, r2
10040386:	0903      	lsrs	r3, r0, #4
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x178>
1004038c:	010b      	lsls	r3, r1, #4
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	08c3      	lsrs	r3, r0, #3
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x184>
10040398:	00cb      	lsls	r3, r1, #3
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0883      	lsrs	r3, r0, #2
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x190>
100403a4:	008b      	lsls	r3, r1, #2
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	d2d9      	bcs.n	10040360 <__divsi3+0x148>
100403ac:	0843      	lsrs	r3, r0, #1
100403ae:	428b      	cmp	r3, r1
100403b0:	d301      	bcc.n	100403b6 <__divsi3+0x19e>
100403b2:	004b      	lsls	r3, r1, #1
100403b4:	1ac0      	subs	r0, r0, r3
100403b6:	4152      	adcs	r2, r2
100403b8:	1a41      	subs	r1, r0, r1
100403ba:	d200      	bcs.n	100403be <__divsi3+0x1a6>
100403bc:	4601      	mov	r1, r0
100403be:	4663      	mov	r3, ip
100403c0:	4152      	adcs	r2, r2
100403c2:	105b      	asrs	r3, r3, #1
100403c4:	4610      	mov	r0, r2
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x1b4>
100403c8:	4240      	negs	r0, r0
100403ca:	2b00      	cmp	r3, #0
100403cc:	d500      	bpl.n	100403d0 <__divsi3+0x1b8>
100403ce:	4249      	negs	r1, r1
100403d0:	4770      	bx	lr
100403d2:	4663      	mov	r3, ip
100403d4:	105b      	asrs	r3, r3, #1
100403d6:	d300      	bcc.n	100403da <__divsi3+0x1c2>
100403d8:	4240      	negs	r0, r0
100403da:	b501      	push	{r0, lr}
100403dc:	2000      	movs	r0, #0
100403de:	f000 f805 	bl	100403ec <__aeabi_idiv0>
100403e2:	bd02      	pop	{r1, pc}

100403e4 <__aeabi_idivmod>:
100403e4:	2900      	cmp	r1, #0
100403e6:	d0f8      	beq.n	100403da <__divsi3+0x1c2>
100403e8:	e716      	b.n	10040218 <__divsi3>
100403ea:	4770      	bx	lr

100403ec <__aeabi_idiv0>:
100403ec:	4770      	bx	lr
100403ee:	46c0      	nop			@ (mov r8, r8)

100403f0 <__aeabi_uldivmod>:
100403f0:	2b00      	cmp	r3, #0
100403f2:	d111      	bne.n	10040418 <__aeabi_uldivmod+0x28>
100403f4:	2a00      	cmp	r2, #0
100403f6:	d10f      	bne.n	10040418 <__aeabi_uldivmod+0x28>
100403f8:	2900      	cmp	r1, #0
100403fa:	d100      	bne.n	100403fe <__aeabi_uldivmod+0xe>
100403fc:	2800      	cmp	r0, #0
100403fe:	d002      	beq.n	10040406 <__aeabi_uldivmod+0x16>
10040400:	2100      	movs	r1, #0
10040402:	43c9      	mvns	r1, r1
10040404:	0008      	movs	r0, r1
10040406:	b407      	push	{r0, r1, r2}
10040408:	4802      	ldr	r0, [pc, #8]	@ (10040414 <__aeabi_uldivmod+0x24>)
1004040a:	a102      	add	r1, pc, #8	@ (adr r1, 10040414 <__aeabi_uldivmod+0x24>)
1004040c:	1840      	adds	r0, r0, r1
1004040e:	9002      	str	r0, [sp, #8]
10040410:	bd03      	pop	{r0, r1, pc}
10040412:	46c0      	nop			@ (mov r8, r8)
10040414:	ffffffd9 	.word	0xffffffd9
10040418:	b403      	push	{r0, r1}
1004041a:	4668      	mov	r0, sp
1004041c:	b501      	push	{r0, lr}
1004041e:	9802      	ldr	r0, [sp, #8]
10040420:	f000 f806 	bl	10040430 <__udivmoddi4>
10040424:	9b01      	ldr	r3, [sp, #4]
10040426:	469e      	mov	lr, r3
10040428:	b002      	add	sp, #8
1004042a:	bc0c      	pop	{r2, r3}
1004042c:	4770      	bx	lr
1004042e:	46c0      	nop			@ (mov r8, r8)

10040430 <__udivmoddi4>:
10040430:	b5f0      	push	{r4, r5, r6, r7, lr}
10040432:	4657      	mov	r7, sl
10040434:	464e      	mov	r6, r9
10040436:	4645      	mov	r5, r8
10040438:	46de      	mov	lr, fp
1004043a:	b5e0      	push	{r5, r6, r7, lr}
1004043c:	0004      	movs	r4, r0
1004043e:	000d      	movs	r5, r1
10040440:	4692      	mov	sl, r2
10040442:	4699      	mov	r9, r3
10040444:	b083      	sub	sp, #12
10040446:	428b      	cmp	r3, r1
10040448:	d830      	bhi.n	100404ac <__udivmoddi4+0x7c>
1004044a:	d02d      	beq.n	100404a8 <__udivmoddi4+0x78>
1004044c:	4649      	mov	r1, r9
1004044e:	4650      	mov	r0, sl
10040450:	f000 f8ba 	bl	100405c8 <__clzdi2>
10040454:	0029      	movs	r1, r5
10040456:	0006      	movs	r6, r0
10040458:	0020      	movs	r0, r4
1004045a:	f000 f8b5 	bl	100405c8 <__clzdi2>
1004045e:	1a33      	subs	r3, r6, r0
10040460:	4698      	mov	r8, r3
10040462:	3b20      	subs	r3, #32
10040464:	d434      	bmi.n	100404d0 <__udivmoddi4+0xa0>
10040466:	469b      	mov	fp, r3
10040468:	4653      	mov	r3, sl
1004046a:	465a      	mov	r2, fp
1004046c:	4093      	lsls	r3, r2
1004046e:	4642      	mov	r2, r8
10040470:	001f      	movs	r7, r3
10040472:	4653      	mov	r3, sl
10040474:	4093      	lsls	r3, r2
10040476:	001e      	movs	r6, r3
10040478:	42af      	cmp	r7, r5
1004047a:	d83b      	bhi.n	100404f4 <__udivmoddi4+0xc4>
1004047c:	42af      	cmp	r7, r5
1004047e:	d100      	bne.n	10040482 <__udivmoddi4+0x52>
10040480:	e079      	b.n	10040576 <__udivmoddi4+0x146>
10040482:	465b      	mov	r3, fp
10040484:	1ba4      	subs	r4, r4, r6
10040486:	41bd      	sbcs	r5, r7
10040488:	2b00      	cmp	r3, #0
1004048a:	da00      	bge.n	1004048e <__udivmoddi4+0x5e>
1004048c:	e076      	b.n	1004057c <__udivmoddi4+0x14c>
1004048e:	2200      	movs	r2, #0
10040490:	2300      	movs	r3, #0
10040492:	9200      	str	r2, [sp, #0]
10040494:	9301      	str	r3, [sp, #4]
10040496:	2301      	movs	r3, #1
10040498:	465a      	mov	r2, fp
1004049a:	4093      	lsls	r3, r2
1004049c:	9301      	str	r3, [sp, #4]
1004049e:	2301      	movs	r3, #1
100404a0:	4642      	mov	r2, r8
100404a2:	4093      	lsls	r3, r2
100404a4:	9300      	str	r3, [sp, #0]
100404a6:	e029      	b.n	100404fc <__udivmoddi4+0xcc>
100404a8:	4282      	cmp	r2, r0
100404aa:	d9cf      	bls.n	1004044c <__udivmoddi4+0x1c>
100404ac:	2200      	movs	r2, #0
100404ae:	2300      	movs	r3, #0
100404b0:	9200      	str	r2, [sp, #0]
100404b2:	9301      	str	r3, [sp, #4]
100404b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100404b6:	2b00      	cmp	r3, #0
100404b8:	d001      	beq.n	100404be <__udivmoddi4+0x8e>
100404ba:	601c      	str	r4, [r3, #0]
100404bc:	605d      	str	r5, [r3, #4]
100404be:	9800      	ldr	r0, [sp, #0]
100404c0:	9901      	ldr	r1, [sp, #4]
100404c2:	b003      	add	sp, #12
100404c4:	bcf0      	pop	{r4, r5, r6, r7}
100404c6:	46bb      	mov	fp, r7
100404c8:	46b2      	mov	sl, r6
100404ca:	46a9      	mov	r9, r5
100404cc:	46a0      	mov	r8, r4
100404ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100404d0:	4642      	mov	r2, r8
100404d2:	469b      	mov	fp, r3
100404d4:	2320      	movs	r3, #32
100404d6:	1a9b      	subs	r3, r3, r2
100404d8:	4652      	mov	r2, sl
100404da:	40da      	lsrs	r2, r3
100404dc:	4641      	mov	r1, r8
100404de:	0013      	movs	r3, r2
100404e0:	464a      	mov	r2, r9
100404e2:	408a      	lsls	r2, r1
100404e4:	0017      	movs	r7, r2
100404e6:	4642      	mov	r2, r8
100404e8:	431f      	orrs	r7, r3
100404ea:	4653      	mov	r3, sl
100404ec:	4093      	lsls	r3, r2
100404ee:	001e      	movs	r6, r3
100404f0:	42af      	cmp	r7, r5
100404f2:	d9c3      	bls.n	1004047c <__udivmoddi4+0x4c>
100404f4:	2200      	movs	r2, #0
100404f6:	2300      	movs	r3, #0
100404f8:	9200      	str	r2, [sp, #0]
100404fa:	9301      	str	r3, [sp, #4]
100404fc:	4643      	mov	r3, r8
100404fe:	2b00      	cmp	r3, #0
10040500:	d0d8      	beq.n	100404b4 <__udivmoddi4+0x84>
10040502:	07fb      	lsls	r3, r7, #31
10040504:	0872      	lsrs	r2, r6, #1
10040506:	431a      	orrs	r2, r3
10040508:	4646      	mov	r6, r8
1004050a:	087b      	lsrs	r3, r7, #1
1004050c:	e00e      	b.n	1004052c <__udivmoddi4+0xfc>
1004050e:	42ab      	cmp	r3, r5
10040510:	d101      	bne.n	10040516 <__udivmoddi4+0xe6>
10040512:	42a2      	cmp	r2, r4
10040514:	d80c      	bhi.n	10040530 <__udivmoddi4+0x100>
10040516:	1aa4      	subs	r4, r4, r2
10040518:	419d      	sbcs	r5, r3
1004051a:	2001      	movs	r0, #1
1004051c:	1924      	adds	r4, r4, r4
1004051e:	416d      	adcs	r5, r5
10040520:	2100      	movs	r1, #0
10040522:	3e01      	subs	r6, #1
10040524:	1824      	adds	r4, r4, r0
10040526:	414d      	adcs	r5, r1
10040528:	2e00      	cmp	r6, #0
1004052a:	d006      	beq.n	1004053a <__udivmoddi4+0x10a>
1004052c:	42ab      	cmp	r3, r5
1004052e:	d9ee      	bls.n	1004050e <__udivmoddi4+0xde>
10040530:	3e01      	subs	r6, #1
10040532:	1924      	adds	r4, r4, r4
10040534:	416d      	adcs	r5, r5
10040536:	2e00      	cmp	r6, #0
10040538:	d1f8      	bne.n	1004052c <__udivmoddi4+0xfc>
1004053a:	9800      	ldr	r0, [sp, #0]
1004053c:	9901      	ldr	r1, [sp, #4]
1004053e:	465b      	mov	r3, fp
10040540:	1900      	adds	r0, r0, r4
10040542:	4169      	adcs	r1, r5
10040544:	2b00      	cmp	r3, #0
10040546:	db24      	blt.n	10040592 <__udivmoddi4+0x162>
10040548:	002b      	movs	r3, r5
1004054a:	465a      	mov	r2, fp
1004054c:	4644      	mov	r4, r8
1004054e:	40d3      	lsrs	r3, r2
10040550:	002a      	movs	r2, r5
10040552:	40e2      	lsrs	r2, r4
10040554:	001c      	movs	r4, r3
10040556:	465b      	mov	r3, fp
10040558:	0015      	movs	r5, r2
1004055a:	2b00      	cmp	r3, #0
1004055c:	db2a      	blt.n	100405b4 <__udivmoddi4+0x184>
1004055e:	0026      	movs	r6, r4
10040560:	409e      	lsls	r6, r3
10040562:	0033      	movs	r3, r6
10040564:	0026      	movs	r6, r4
10040566:	4647      	mov	r7, r8
10040568:	40be      	lsls	r6, r7
1004056a:	0032      	movs	r2, r6
1004056c:	1a80      	subs	r0, r0, r2
1004056e:	4199      	sbcs	r1, r3
10040570:	9000      	str	r0, [sp, #0]
10040572:	9101      	str	r1, [sp, #4]
10040574:	e79e      	b.n	100404b4 <__udivmoddi4+0x84>
10040576:	42a3      	cmp	r3, r4
10040578:	d8bc      	bhi.n	100404f4 <__udivmoddi4+0xc4>
1004057a:	e782      	b.n	10040482 <__udivmoddi4+0x52>
1004057c:	4642      	mov	r2, r8
1004057e:	2320      	movs	r3, #32
10040580:	2100      	movs	r1, #0
10040582:	1a9b      	subs	r3, r3, r2
10040584:	2200      	movs	r2, #0
10040586:	9100      	str	r1, [sp, #0]
10040588:	9201      	str	r2, [sp, #4]
1004058a:	2201      	movs	r2, #1
1004058c:	40da      	lsrs	r2, r3
1004058e:	9201      	str	r2, [sp, #4]
10040590:	e785      	b.n	1004049e <__udivmoddi4+0x6e>
10040592:	4642      	mov	r2, r8
10040594:	2320      	movs	r3, #32
10040596:	1a9b      	subs	r3, r3, r2
10040598:	002a      	movs	r2, r5
1004059a:	4646      	mov	r6, r8
1004059c:	409a      	lsls	r2, r3
1004059e:	0023      	movs	r3, r4
100405a0:	40f3      	lsrs	r3, r6
100405a2:	4644      	mov	r4, r8
100405a4:	4313      	orrs	r3, r2
100405a6:	002a      	movs	r2, r5
100405a8:	40e2      	lsrs	r2, r4
100405aa:	001c      	movs	r4, r3
100405ac:	465b      	mov	r3, fp
100405ae:	0015      	movs	r5, r2
100405b0:	2b00      	cmp	r3, #0
100405b2:	dad4      	bge.n	1004055e <__udivmoddi4+0x12e>
100405b4:	4642      	mov	r2, r8
100405b6:	002f      	movs	r7, r5
100405b8:	2320      	movs	r3, #32
100405ba:	0026      	movs	r6, r4
100405bc:	4097      	lsls	r7, r2
100405be:	1a9b      	subs	r3, r3, r2
100405c0:	40de      	lsrs	r6, r3
100405c2:	003b      	movs	r3, r7
100405c4:	4333      	orrs	r3, r6
100405c6:	e7cd      	b.n	10040564 <__udivmoddi4+0x134>

100405c8 <__clzdi2>:
100405c8:	b510      	push	{r4, lr}
100405ca:	2900      	cmp	r1, #0
100405cc:	d103      	bne.n	100405d6 <__clzdi2+0xe>
100405ce:	f000 f807 	bl	100405e0 <__clzsi2>
100405d2:	3020      	adds	r0, #32
100405d4:	e002      	b.n	100405dc <__clzdi2+0x14>
100405d6:	0008      	movs	r0, r1
100405d8:	f000 f802 	bl	100405e0 <__clzsi2>
100405dc:	bd10      	pop	{r4, pc}
100405de:	46c0      	nop			@ (mov r8, r8)

100405e0 <__clzsi2>:
100405e0:	211c      	movs	r1, #28
100405e2:	2301      	movs	r3, #1
100405e4:	041b      	lsls	r3, r3, #16
100405e6:	4298      	cmp	r0, r3
100405e8:	d301      	bcc.n	100405ee <__clzsi2+0xe>
100405ea:	0c00      	lsrs	r0, r0, #16
100405ec:	3910      	subs	r1, #16
100405ee:	0a1b      	lsrs	r3, r3, #8
100405f0:	4298      	cmp	r0, r3
100405f2:	d301      	bcc.n	100405f8 <__clzsi2+0x18>
100405f4:	0a00      	lsrs	r0, r0, #8
100405f6:	3908      	subs	r1, #8
100405f8:	091b      	lsrs	r3, r3, #4
100405fa:	4298      	cmp	r0, r3
100405fc:	d301      	bcc.n	10040602 <__clzsi2+0x22>
100405fe:	0900      	lsrs	r0, r0, #4
10040600:	3904      	subs	r1, #4
10040602:	a202      	add	r2, pc, #8	@ (adr r2, 1004060c <__clzsi2+0x2c>)
10040604:	5c10      	ldrb	r0, [r2, r0]
10040606:	1840      	adds	r0, r0, r1
10040608:	4770      	bx	lr
1004060a:	46c0      	nop			@ (mov r8, r8)
1004060c:	02020304 	.word	0x02020304
10040610:	01010101 	.word	0x01010101
	...

1004061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
1004061c:	b590      	push	{r4, r7, lr}
1004061e:	b089      	sub	sp, #36	@ 0x24
10040620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040622:	2408      	movs	r4, #8
10040624:	193b      	adds	r3, r7, r4
10040626:	0018      	movs	r0, r3
10040628:	2318      	movs	r3, #24
1004062a:	001a      	movs	r2, r3
1004062c:	2100      	movs	r1, #0
1004062e:	f004 ff67 	bl	10045500 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040632:	003b      	movs	r3, r7
10040634:	0018      	movs	r0, r3
10040636:	2308      	movs	r3, #8
10040638:	001a      	movs	r2, r3
1004063a:	2100      	movs	r1, #0
1004063c:	f004 ff60 	bl	10045500 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10040640:	193b      	adds	r3, r7, r4
10040642:	2205      	movs	r2, #5
10040644:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10040646:	193b      	adds	r3, r7, r4
10040648:	2280      	movs	r2, #128	@ 0x80
1004064a:	0252      	lsls	r2, r2, #9
1004064c:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
1004064e:	193b      	adds	r3, r7, r4
10040650:	2204      	movs	r2, #4
10040652:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040654:	193b      	adds	r3, r7, r4
10040656:	0018      	movs	r0, r3
10040658:	f003 f9ea 	bl	10043a30 <HAL_RCC_OscConfig>
1004065c:	1e03      	subs	r3, r0, #0
1004065e:	d001      	beq.n	10040664 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
10040660:	2300      	movs	r3, #0
10040662:	e00f      	b.n	10040684 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040664:	003b      	movs	r3, r7
10040666:	2200      	movs	r2, #0
10040668:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
1004066a:	003b      	movs	r3, r7
1004066c:	2200      	movs	r2, #0
1004066e:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10040670:	003b      	movs	r3, r7
10040672:	2110      	movs	r1, #16
10040674:	0018      	movs	r0, r3
10040676:	f003 fb25 	bl	10043cc4 <HAL_RCC_ClockConfig>
1004067a:	1e03      	subs	r3, r0, #0
1004067c:	d001      	beq.n	10040682 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
1004067e:	2300      	movs	r3, #0
10040680:	e000      	b.n	10040684 <SystemClock_Config+0x68>
	}
	return INIT_OK;
10040682:	2301      	movs	r3, #1
}
10040684:	0018      	movs	r0, r3
10040686:	46bd      	mov	sp, r7
10040688:	b009      	add	sp, #36	@ 0x24
1004068a:	bd90      	pop	{r4, r7, pc}

1004068c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
1004068c:	b580      	push	{r7, lr}
1004068e:	b086      	sub	sp, #24
10040690:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040692:	003b      	movs	r3, r7
10040694:	0018      	movs	r0, r3
10040696:	2318      	movs	r3, #24
10040698:	001a      	movs	r2, r3
1004069a:	2100      	movs	r1, #0
1004069c:	f004 ff30 	bl	10045500 <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100406a0:	003b      	movs	r3, r7
100406a2:	2202      	movs	r2, #2
100406a4:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100406a6:	003b      	movs	r3, r7
100406a8:	2280      	movs	r2, #128	@ 0x80
100406aa:	0152      	lsls	r2, r2, #5
100406ac:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100406ae:	003b      	movs	r3, r7
100406b0:	0018      	movs	r0, r3
100406b2:	f003 fc9d 	bl	10043ff0 <HAL_RCCEx_PeriphCLKConfig>
100406b6:	1e03      	subs	r3, r0, #0
100406b8:	d001      	beq.n	100406be <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
100406ba:	2300      	movs	r3, #0
100406bc:	e000      	b.n	100406c0 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
100406be:	2301      	movs	r3, #1
}
100406c0:	0018      	movs	r0, r3
100406c2:	46bd      	mov	sp, r7
100406c4:	b006      	add	sp, #24
100406c6:	bd80      	pop	{r7, pc}

100406c8 <BOARD_Init>:


//Initializes the board
int BOARD_Init(void){
100406c8:	b580      	push	{r7, lr}
100406ca:	b082      	sub	sp, #8
100406cc:	af00      	add	r7, sp, #0
	int errorFlag = INIT_OK;
100406ce:	2301      	movs	r3, #1
100406d0:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
100406d2:	f7ff ffdb 	bl	1004068c <PeriphCommonClock_Config>
100406d6:	1e03      	subs	r3, r0, #0
100406d8:	d101      	bne.n	100406de <BOARD_Init+0x16>
		errorFlag = INIT_ERROR;
100406da:	2300      	movs	r3, #0
100406dc:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
100406de:	f7ff ff9d 	bl	1004061c <SystemClock_Config>
100406e2:	1e03      	subs	r3, r0, #0
100406e4:	d101      	bne.n	100406ea <BOARD_Init+0x22>
		errorFlag = INIT_ERROR;
100406e6:	2300      	movs	r3, #0
100406e8:	607b      	str	r3, [r7, #4]
	}
	return errorFlag;
100406ea:	687b      	ldr	r3, [r7, #4]
}
100406ec:	0018      	movs	r0, r3
100406ee:	46bd      	mov	sp, r7
100406f0:	b002      	add	sp, #8
100406f2:	bd80      	pop	{r7, pc}

100406f4 <BOARD_CrashHandler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void BOARD_CrashHandler(void)
{
100406f4:	b580      	push	{r7, lr}
100406f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100406f8:	b672      	cpsid	i
}
100406fa:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
100406fc:	46c0      	nop			@ (mov r8, r8)
100406fe:	e7fd      	b.n	100406fc <BOARD_CrashHandler+0x8>

10040700 <Error_Handler>:

  }
}

void Error_Handler(void)
{
10040700:	b580      	push	{r7, lr}
10040702:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10040704:	b672      	cpsid	i
}
10040706:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10040708:	46c0      	nop			@ (mov r8, r8)
1004070a:	e7fd      	b.n	10040708 <Error_Handler+0x8>

1004070c <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
1004070c:	b580      	push	{r7, lr}
1004070e:	b084      	sub	sp, #16
10040710:	af00      	add	r7, sp, #0
10040712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040714:	4b07      	ldr	r3, [pc, #28]	@ (10040734 <LL_AHB1_GRP1_EnableClock+0x28>)
10040716:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040718:	4b06      	ldr	r3, [pc, #24]	@ (10040734 <LL_AHB1_GRP1_EnableClock+0x28>)
1004071a:	687a      	ldr	r2, [r7, #4]
1004071c:	430a      	orrs	r2, r1
1004071e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040720:	4b04      	ldr	r3, [pc, #16]	@ (10040734 <LL_AHB1_GRP1_EnableClock+0x28>)
10040722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040724:	687a      	ldr	r2, [r7, #4]
10040726:	4013      	ands	r3, r2
10040728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004072a:	68fb      	ldr	r3, [r7, #12]
}
1004072c:	46c0      	nop			@ (mov r8, r8)
1004072e:	46bd      	mov	sp, r7
10040730:	b004      	add	sp, #16
10040732:	bd80      	pop	{r7, pc}
10040734:	48400000 	.word	0x48400000

10040738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10040738:	b580      	push	{r7, lr}
1004073a:	b086      	sub	sp, #24
1004073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004073e:	1d3b      	adds	r3, r7, #4
10040740:	0018      	movs	r0, r3
10040742:	2314      	movs	r3, #20
10040744:	001a      	movs	r2, r3
10040746:	2100      	movs	r1, #0
10040748:	f004 feda 	bl	10045500 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
1004074c:	2008      	movs	r0, #8
1004074e:	f7ff ffdd 	bl	1004070c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
10040752:	2004      	movs	r0, #4
10040754:	f7ff ffda 	bl	1004070c <LL_AHB1_GRP1_EnableClock>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
10040758:	1d3b      	adds	r3, r7, #4
1004075a:	22f0      	movs	r2, #240	@ 0xf0
1004075c:	0112      	lsls	r2, r2, #4
1004075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10040760:	1d3b      	adds	r3, r7, #4
10040762:	2200      	movs	r2, #0
10040764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10040766:	1d3b      	adds	r3, r7, #4
10040768:	2200      	movs	r2, #0
1004076a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004076c:	1d3a      	adds	r2, r7, #4
1004076e:	2390      	movs	r3, #144	@ 0x90
10040770:	05db      	lsls	r3, r3, #23
10040772:	0011      	movs	r1, r2
10040774:	0018      	movs	r0, r3
10040776:	f000 fff3 	bl	10041760 <HAL_GPIO_Init>

  //Configure GPIO pins : PB15 PB13
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
1004077a:	1d3b      	adds	r3, r7, #4
1004077c:	22a0      	movs	r2, #160	@ 0xa0
1004077e:	0212      	lsls	r2, r2, #8
10040780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10040782:	1d3b      	adds	r3, r7, #4
10040784:	2200      	movs	r2, #0
10040786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10040788:	1d3b      	adds	r3, r7, #4
1004078a:	2200      	movs	r2, #0
1004078c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
1004078e:	1d3b      	adds	r3, r7, #4
10040790:	4a04      	ldr	r2, [pc, #16]	@ (100407a4 <MX_GPIO_Init+0x6c>)
10040792:	0019      	movs	r1, r3
10040794:	0010      	movs	r0, r2
10040796:	f000 ffe3 	bl	10041760 <HAL_GPIO_Init>



}
1004079a:	46c0      	nop			@ (mov r8, r8)
1004079c:	46bd      	mov	sp, r7
1004079e:	b006      	add	sp, #24
100407a0:	bd80      	pop	{r7, pc}
100407a2:	46c0      	nop			@ (mov r8, r8)
100407a4:	48100000 	.word	0x48100000

100407a8 <GPIO_Init>:

int GPIO_Init(){
100407a8:	b580      	push	{r7, lr}
100407aa:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
100407ac:	f7ff ffc4 	bl	10040738 <MX_GPIO_Init>
	return INIT_OK;
100407b0:	2301      	movs	r3, #1
}
100407b2:	0018      	movs	r0, r3
100407b4:	46bd      	mov	sp, r7
100407b6:	bd80      	pop	{r7, pc}

100407b8 <GPIO_ReadButtons>:
//			(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) << 1) &
//			(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) << 0));
//}

//For use before receiving buttons
uint8_t GPIO_ReadButtons(void){
100407b8:	b5b0      	push	{r4, r5, r7, lr}
100407ba:	af00      	add	r7, sp, #0
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
100407bc:	2390      	movs	r3, #144	@ 0x90
100407be:	05db      	lsls	r3, r3, #23
100407c0:	2101      	movs	r1, #1
100407c2:	0018      	movs	r0, r3
100407c4:	f001 f975 	bl	10041ab2 <HAL_GPIO_ReadPin>
100407c8:	1e03      	subs	r3, r0, #0
100407ca:	d101      	bne.n	100407d0 <GPIO_ReadButtons+0x18>
100407cc:	2404      	movs	r4, #4
100407ce:	e000      	b.n	100407d2 <GPIO_ReadButtons+0x1a>
100407d0:	2400      	movs	r4, #0
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
100407d2:	4b0f      	ldr	r3, [pc, #60]	@ (10040810 <GPIO_ReadButtons+0x58>)
100407d4:	2120      	movs	r1, #32
100407d6:	0018      	movs	r0, r3
100407d8:	f001 f96b 	bl	10041ab2 <HAL_GPIO_ReadPin>
100407dc:	1e03      	subs	r3, r0, #0
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
100407de:	d101      	bne.n	100407e4 <GPIO_ReadButtons+0x2c>
100407e0:	2302      	movs	r3, #2
100407e2:	e000      	b.n	100407e6 <GPIO_ReadButtons+0x2e>
100407e4:	2300      	movs	r3, #0
100407e6:	4323      	orrs	r3, r4
100407e8:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) << 0));
100407ea:	2380      	movs	r3, #128	@ 0x80
100407ec:	01db      	lsls	r3, r3, #7
100407ee:	4a08      	ldr	r2, [pc, #32]	@ (10040810 <GPIO_ReadButtons+0x58>)
100407f0:	0019      	movs	r1, r3
100407f2:	0010      	movs	r0, r2
100407f4:	f001 f95d 	bl	10041ab2 <HAL_GPIO_ReadPin>
100407f8:	0003      	movs	r3, r0
100407fa:	425a      	negs	r2, r3
100407fc:	4153      	adcs	r3, r2
100407fe:	b2db      	uxtb	r3, r3
10040800:	b25b      	sxtb	r3, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
10040802:	4323      	orrs	r3, r4
10040804:	b25b      	sxtb	r3, r3
10040806:	b2db      	uxtb	r3, r3
}
10040808:	0018      	movs	r0, r3
1004080a:	46bd      	mov	sp, r7
1004080c:	bdb0      	pop	{r4, r5, r7, pc}
1004080e:	46c0      	nop			@ (mov r8, r8)
10040810:	48100000 	.word	0x48100000

10040814 <GPIO_Event_Init>:

uint8_t GPIO_Event_Init(void){
10040814:	b580      	push	{r7, lr}
10040816:	af00      	add	r7, sp, #0
	buttons = 0;
10040818:	4b0f      	ldr	r3, [pc, #60]	@ (10040858 <GPIO_Event_Init+0x44>)
1004081a:	2200      	movs	r2, #0
1004081c:	701a      	strb	r2, [r3, #0]
	//Initialize dev board leds, for debug purposes
	BSP_LED_Init(LED_BLUE);
1004081e:	2000      	movs	r0, #0
10040820:	f000 fc7a 	bl	10041118 <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
10040824:	2001      	movs	r0, #1
10040826:	f000 fc77 	bl	10041118 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
1004082a:	2002      	movs	r0, #2
1004082c:	f000 fc74 	bl	10041118 <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(B1, BUTTON_MODE_GPIO);
10040830:	2100      	movs	r1, #0
10040832:	2000      	movs	r0, #0
10040834:	f000 fd02 	bl	1004123c <BSP_PB_Init>
	BSP_PB_Init(B2, BUTTON_MODE_GPIO);
10040838:	2100      	movs	r1, #0
1004083a:	2001      	movs	r0, #1
1004083c:	f000 fcfe 	bl	1004123c <BSP_PB_Init>
	BSP_PB_Init(B3, BUTTON_MODE_GPIO);
10040840:	2100      	movs	r1, #0
10040842:	2002      	movs	r0, #2
10040844:	f000 fcfa 	bl	1004123c <BSP_PB_Init>
	return GPIO_Init();
10040848:	f7ff ffae 	bl	100407a8 <GPIO_Init>
1004084c:	0003      	movs	r3, r0
1004084e:	b2db      	uxtb	r3, r3

}
10040850:	0018      	movs	r0, r3
10040852:	46bd      	mov	sp, r7
10040854:	bd80      	pop	{r7, pc}
10040856:	46c0      	nop			@ (mov r8, r8)
10040858:	20000194 	.word	0x20000194

1004085c <GPIO_Event_Updater>:

Event_t GPIO_Event_Updater(void){
1004085c:	b5b0      	push	{r4, r5, r7, lr}
1004085e:	b084      	sub	sp, #16
10040860:	af00      	add	r7, sp, #0
	Event_t update = {0, 0};
10040862:	1d3b      	adds	r3, r7, #4
10040864:	2200      	movs	r2, #0
10040866:	801a      	strh	r2, [r3, #0]
10040868:	1d3b      	adds	r3, r7, #4
1004086a:	2200      	movs	r2, #0
1004086c:	709a      	strb	r2, [r3, #2]
	uint8_t newButtons = GPIO_ReadButtons();
1004086e:	250f      	movs	r5, #15
10040870:	197c      	adds	r4, r7, r5
10040872:	f7ff ffa1 	bl	100407b8 <GPIO_ReadButtons>
10040876:	0003      	movs	r3, r0
10040878:	7023      	strb	r3, [r4, #0]
	if(newButtons != buttons){
1004087a:	4b16      	ldr	r3, [pc, #88]	@ (100408d4 <GPIO_Event_Updater+0x78>)
1004087c:	781b      	ldrb	r3, [r3, #0]
1004087e:	0029      	movs	r1, r5
10040880:	187a      	adds	r2, r7, r1
10040882:	7812      	ldrb	r2, [r2, #0]
10040884:	429a      	cmp	r2, r3
10040886:	d00f      	beq.n	100408a8 <GPIO_Event_Updater+0x4c>
		update.data = (uint16_t)(buttons ^ newButtons);
10040888:	4b12      	ldr	r3, [pc, #72]	@ (100408d4 <GPIO_Event_Updater+0x78>)
1004088a:	781a      	ldrb	r2, [r3, #0]
1004088c:	187b      	adds	r3, r7, r1
1004088e:	781b      	ldrb	r3, [r3, #0]
10040890:	4053      	eors	r3, r2
10040892:	b2db      	uxtb	r3, r3
10040894:	001a      	movs	r2, r3
10040896:	1d3b      	adds	r3, r7, #4
10040898:	801a      	strh	r2, [r3, #0]
		update.status = EVENT_BUTTONS;
1004089a:	1d3b      	adds	r3, r7, #4
1004089c:	2201      	movs	r2, #1
1004089e:	709a      	strb	r2, [r3, #2]
		buttons = newButtons;
100408a0:	4b0c      	ldr	r3, [pc, #48]	@ (100408d4 <GPIO_Event_Updater+0x78>)
100408a2:	187a      	adds	r2, r7, r1
100408a4:	7812      	ldrb	r2, [r2, #0]
100408a6:	701a      	strb	r2, [r3, #0]
	}
	return update;
100408a8:	2108      	movs	r1, #8
100408aa:	187b      	adds	r3, r7, r1
100408ac:	1d3a      	adds	r2, r7, #4
100408ae:	6812      	ldr	r2, [r2, #0]
100408b0:	601a      	str	r2, [r3, #0]
100408b2:	187a      	adds	r2, r7, r1
100408b4:	2300      	movs	r3, #0
100408b6:	8811      	ldrh	r1, [r2, #0]
100408b8:	0409      	lsls	r1, r1, #16
100408ba:	0c09      	lsrs	r1, r1, #16
100408bc:	0c1b      	lsrs	r3, r3, #16
100408be:	041b      	lsls	r3, r3, #16
100408c0:	430b      	orrs	r3, r1
100408c2:	8852      	ldrh	r2, [r2, #2]
100408c4:	0412      	lsls	r2, r2, #16
100408c6:	041b      	lsls	r3, r3, #16
100408c8:	0c1b      	lsrs	r3, r3, #16
100408ca:	4313      	orrs	r3, r2
}
100408cc:	0018      	movs	r0, r3
100408ce:	46bd      	mov	sp, r7
100408d0:	b004      	add	sp, #16
100408d2:	bdb0      	pop	{r4, r5, r7, pc}
100408d4:	20000194 	.word	0x20000194

100408d8 <GPIO_Event_Handler>:

uint8_t GPIO_Event_Handler(Event_t event){
100408d8:	b580      	push	{r7, lr}
100408da:	b082      	sub	sp, #8
100408dc:	af00      	add	r7, sp, #0
100408de:	1d3b      	adds	r3, r7, #4
100408e0:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_BUTTONS){
100408e2:	1d3b      	adds	r3, r7, #4
100408e4:	789b      	ldrb	r3, [r3, #2]
100408e6:	2b01      	cmp	r3, #1
100408e8:	d11e      	bne.n	10040928 <GPIO_Event_Handler+0x50>
		if((event.data>>0)&0x01){
100408ea:	1d3b      	adds	r3, r7, #4
100408ec:	881b      	ldrh	r3, [r3, #0]
100408ee:	001a      	movs	r2, r3
100408f0:	2301      	movs	r3, #1
100408f2:	4013      	ands	r3, r2
100408f4:	d002      	beq.n	100408fc <GPIO_Event_Handler+0x24>
			BSP_LED_Toggle(LED_BLUE);
100408f6:	2000      	movs	r0, #0
100408f8:	f000 fc84 	bl	10041204 <BSP_LED_Toggle>
		}
		if((event.data>>1)&0x01){
100408fc:	1d3b      	adds	r3, r7, #4
100408fe:	881b      	ldrh	r3, [r3, #0]
10040900:	085b      	lsrs	r3, r3, #1
10040902:	b29b      	uxth	r3, r3
10040904:	001a      	movs	r2, r3
10040906:	2301      	movs	r3, #1
10040908:	4013      	ands	r3, r2
1004090a:	d002      	beq.n	10040912 <GPIO_Event_Handler+0x3a>
			BSP_LED_Toggle(LED_GREEN);
1004090c:	2001      	movs	r0, #1
1004090e:	f000 fc79 	bl	10041204 <BSP_LED_Toggle>
		}
		if((event.data>>2)&0x01){
10040912:	1d3b      	adds	r3, r7, #4
10040914:	881b      	ldrh	r3, [r3, #0]
10040916:	089b      	lsrs	r3, r3, #2
10040918:	b29b      	uxth	r3, r3
1004091a:	001a      	movs	r2, r3
1004091c:	2301      	movs	r3, #1
1004091e:	4013      	ands	r3, r2
10040920:	d002      	beq.n	10040928 <GPIO_Event_Handler+0x50>
			BSP_LED_Toggle(LED_RED);
10040922:	2002      	movs	r0, #2
10040924:	f000 fc6e 	bl	10041204 <BSP_LED_Toggle>
		}
	}
	return 1;
10040928:	2301      	movs	r3, #1
}
1004092a:	0018      	movs	r0, r3
1004092c:	46bd      	mov	sp, r7
1004092e:	b002      	add	sp, #8
10040930:	bd80      	pop	{r7, pc}
	...

10040934 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static int MX_LPUART1_UART_Init(void)
{
10040934:	b580      	push	{r7, lr}
10040936:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
10040938:	4b1e      	ldr	r3, [pc, #120]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
1004093a:	4a1f      	ldr	r2, [pc, #124]	@ (100409b8 <MX_LPUART1_UART_Init+0x84>)
1004093c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
1004093e:	4b1d      	ldr	r3, [pc, #116]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040940:	2296      	movs	r2, #150	@ 0x96
10040942:	0192      	lsls	r2, r2, #6
10040944:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
10040946:	4b1b      	ldr	r3, [pc, #108]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040948:	2200      	movs	r2, #0
1004094a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
1004094c:	4b19      	ldr	r3, [pc, #100]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
1004094e:	2200      	movs	r2, #0
10040950:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
10040952:	4b18      	ldr	r3, [pc, #96]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040954:	2200      	movs	r2, #0
10040956:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
10040958:	4b16      	ldr	r3, [pc, #88]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
1004095a:	220c      	movs	r2, #12
1004095c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1004095e:	4b15      	ldr	r3, [pc, #84]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040960:	2200      	movs	r2, #0
10040962:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10040964:	4b13      	ldr	r3, [pc, #76]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040966:	2200      	movs	r2, #0
10040968:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1004096a:	4b12      	ldr	r3, [pc, #72]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
1004096c:	2200      	movs	r2, #0
1004096e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10040970:	4b10      	ldr	r3, [pc, #64]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040972:	2200      	movs	r2, #0
10040974:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10040976:	4b0f      	ldr	r3, [pc, #60]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040978:	0018      	movs	r0, r3
1004097a:	f003 fd37 	bl	100443ec <HAL_UART_Init>
1004097e:	1e03      	subs	r3, r0, #0
10040980:	d001      	beq.n	10040986 <MX_LPUART1_UART_Init+0x52>
  {
    return INIT_ERROR;
10040982:	2300      	movs	r3, #0
10040984:	e012      	b.n	100409ac <MX_LPUART1_UART_Init+0x78>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10040986:	4b0b      	ldr	r3, [pc, #44]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
10040988:	2100      	movs	r1, #0
1004098a:	0018      	movs	r0, r3
1004098c:	f004 fcd9 	bl	10045342 <HAL_UARTEx_SetTxFifoThreshold>
10040990:	1e03      	subs	r3, r0, #0
10040992:	d001      	beq.n	10040998 <MX_LPUART1_UART_Init+0x64>
  {
	  return INIT_ERROR;
10040994:	2300      	movs	r3, #0
10040996:	e009      	b.n	100409ac <MX_LPUART1_UART_Init+0x78>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10040998:	4b06      	ldr	r3, [pc, #24]	@ (100409b4 <MX_LPUART1_UART_Init+0x80>)
1004099a:	2100      	movs	r1, #0
1004099c:	0018      	movs	r0, r3
1004099e:	f004 fd0f 	bl	100453c0 <HAL_UARTEx_SetRxFifoThreshold>
100409a2:	1e03      	subs	r3, r0, #0
100409a4:	d001      	beq.n	100409aa <MX_LPUART1_UART_Init+0x76>
  {
	  return INIT_ERROR;
100409a6:	2300      	movs	r3, #0
100409a8:	e000      	b.n	100409ac <MX_LPUART1_UART_Init+0x78>
  }
  return INIT_OK;
100409aa:	2301      	movs	r3, #1

}
100409ac:	0018      	movs	r0, r3
100409ae:	46bd      	mov	sp, r7
100409b0:	bd80      	pop	{r7, pc}
100409b2:	46c0      	nop			@ (mov r8, r8)
100409b4:	20000228 	.word	0x20000228
100409b8:	41005000 	.word	0x41005000

100409bc <UART_Init>:

int UART_Init(void){
100409bc:	b580      	push	{r7, lr}
100409be:	af00      	add	r7, sp, #0
	return MX_LPUART1_UART_Init();
100409c0:	f7ff ffb8 	bl	10040934 <MX_LPUART1_UART_Init>
100409c4:	0003      	movs	r3, r0
}
100409c6:	0018      	movs	r0, r3
100409c8:	46bd      	mov	sp, r7
100409ca:	bd80      	pop	{r7, pc}

100409cc <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
100409cc:	b5b0      	push	{r4, r5, r7, lr}
100409ce:	b084      	sub	sp, #16
100409d0:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------

	//Reset of all peripherals, Initializes the Flash interface and the Systick.
	HAL_Init();
100409d2:	f000 fccf 	bl	10041374 <HAL_Init>

	// Configure the system clock
	if( BOARD_Init() != INIT_OK){
100409d6:	f7ff fe77 	bl	100406c8 <BOARD_Init>
100409da:	0003      	movs	r3, r0
100409dc:	2b01      	cmp	r3, #1
100409de:	d001      	beq.n	100409e4 <main+0x18>
		BOARD_CrashHandler();
100409e0:	f7ff fe88 	bl	100406f4 <BOARD_CrashHandler>
	}

	// Initialize all configured peripherals
	if(UART_Init() != INIT_OK){
100409e4:	f7ff ffea 	bl	100409bc <UART_Init>
100409e8:	0003      	movs	r3, r0
100409ea:	2b01      	cmp	r3, #1
100409ec:	d001      	beq.n	100409f2 <main+0x26>
		BOARD_CrashHandler();
100409ee:	f7ff fe81 	bl	100406f4 <BOARD_CrashHandler>
	}
	//uint8_t updateFlags[EVENTLISTSIZE];
	Event_t updates[EVENTLISTSIZE];
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
100409f2:	2300      	movs	r3, #0
100409f4:	60fb      	str	r3, [r7, #12]
100409f6:	e007      	b.n	10040a08 <main+0x3c>
		if ((*InitList[i])() == EVENT_ERROR){
100409f8:	4b1c      	ldr	r3, [pc, #112]	@ (10040a6c <main+0xa0>)
100409fa:	68fa      	ldr	r2, [r7, #12]
100409fc:	0092      	lsls	r2, r2, #2
100409fe:	58d3      	ldr	r3, [r2, r3]
10040a00:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10040a02:	68fb      	ldr	r3, [r7, #12]
10040a04:	3301      	adds	r3, #1
10040a06:	60fb      	str	r3, [r7, #12]
10040a08:	68fb      	ldr	r3, [r7, #12]
10040a0a:	2b00      	cmp	r3, #0
10040a0c:	ddf4      	ble.n	100409f8 <main+0x2c>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10040a0e:	2300      	movs	r3, #0
10040a10:	60bb      	str	r3, [r7, #8]
10040a12:	e00c      	b.n	10040a2e <main+0x62>
			updates[i] = (*UpdateList[i])();
10040a14:	4b16      	ldr	r3, [pc, #88]	@ (10040a70 <main+0xa4>)
10040a16:	68ba      	ldr	r2, [r7, #8]
10040a18:	0092      	lsls	r2, r2, #2
10040a1a:	58d3      	ldr	r3, [r2, r3]
10040a1c:	003c      	movs	r4, r7
10040a1e:	68ba      	ldr	r2, [r7, #8]
10040a20:	0095      	lsls	r5, r2, #2
10040a22:	4798      	blx	r3
10040a24:	0003      	movs	r3, r0
10040a26:	512b      	str	r3, [r5, r4]
		for(int i = 0; i < EVENTLISTSIZE; i++){
10040a28:	68bb      	ldr	r3, [r7, #8]
10040a2a:	3301      	adds	r3, #1
10040a2c:	60bb      	str	r3, [r7, #8]
10040a2e:	68bb      	ldr	r3, [r7, #8]
10040a30:	2b00      	cmp	r3, #0
10040a32:	ddef      	ble.n	10040a14 <main+0x48>
			if (updates[i].status == EVENT_ERROR){
				return 0;//We've crashed
			}
		}
		//run all module event handlers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10040a34:	2300      	movs	r3, #0
10040a36:	607b      	str	r3, [r7, #4]
10040a38:	e013      	b.n	10040a62 <main+0x96>
			if(updates[i].status != EVENT_NONE){
10040a3a:	003a      	movs	r2, r7
10040a3c:	687b      	ldr	r3, [r7, #4]
10040a3e:	009b      	lsls	r3, r3, #2
10040a40:	18d3      	adds	r3, r2, r3
10040a42:	3302      	adds	r3, #2
10040a44:	781b      	ldrb	r3, [r3, #0]
10040a46:	2b00      	cmp	r3, #0
10040a48:	d008      	beq.n	10040a5c <main+0x90>
				if ((*HandlerList[i])(updates[i]) == EVENT_ERROR){
10040a4a:	4b0a      	ldr	r3, [pc, #40]	@ (10040a74 <main+0xa8>)
10040a4c:	687a      	ldr	r2, [r7, #4]
10040a4e:	0092      	lsls	r2, r2, #2
10040a50:	58d3      	ldr	r3, [r2, r3]
10040a52:	003a      	movs	r2, r7
10040a54:	6879      	ldr	r1, [r7, #4]
10040a56:	0089      	lsls	r1, r1, #2
10040a58:	5888      	ldr	r0, [r1, r2]
10040a5a:	4798      	blx	r3
		for(int i = 0; i < EVENTLISTSIZE; i++){
10040a5c:	687b      	ldr	r3, [r7, #4]
10040a5e:	3301      	adds	r3, #1
10040a60:	607b      	str	r3, [r7, #4]
10040a62:	687b      	ldr	r3, [r7, #4]
10040a64:	2b00      	cmp	r3, #0
10040a66:	dde8      	ble.n	10040a3a <main+0x6e>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10040a68:	e7d1      	b.n	10040a0e <main+0x42>
10040a6a:	46c0      	nop			@ (mov r8, r8)
10040a6c:	20000368 	.word	0x20000368
10040a70:	2000036c 	.word	0x2000036c
10040a74:	20000370 	.word	0x20000370

10040a78 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10040a78:	b580      	push	{r7, lr}
10040a7a:	b082      	sub	sp, #8
10040a7c:	af00      	add	r7, sp, #0
10040a7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040a80:	4b08      	ldr	r3, [pc, #32]	@ (10040aa4 <LL_PWR_SetNoPullB+0x2c>)
10040a82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040a84:	687b      	ldr	r3, [r7, #4]
10040a86:	43d9      	mvns	r1, r3
10040a88:	4b06      	ldr	r3, [pc, #24]	@ (10040aa4 <LL_PWR_SetNoPullB+0x2c>)
10040a8a:	400a      	ands	r2, r1
10040a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10040a8e:	4b05      	ldr	r3, [pc, #20]	@ (10040aa4 <LL_PWR_SetNoPullB+0x2c>)
10040a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040a92:	687b      	ldr	r3, [r7, #4]
10040a94:	43d9      	mvns	r1, r3
10040a96:	4b03      	ldr	r3, [pc, #12]	@ (10040aa4 <LL_PWR_SetNoPullB+0x2c>)
10040a98:	400a      	ands	r2, r1
10040a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10040a9c:	46c0      	nop			@ (mov r8, r8)
10040a9e:	46bd      	mov	sp, r7
10040aa0:	b002      	add	sp, #8
10040aa2:	bd80      	pop	{r7, pc}
10040aa4:	48500000 	.word	0x48500000

10040aa8 <LL_AHB1_GRP1_EnableClock>:
{
10040aa8:	b580      	push	{r7, lr}
10040aaa:	b084      	sub	sp, #16
10040aac:	af00      	add	r7, sp, #0
10040aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10040ab0:	4b07      	ldr	r3, [pc, #28]	@ (10040ad0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040ab2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040ab4:	4b06      	ldr	r3, [pc, #24]	@ (10040ad0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040ab6:	687a      	ldr	r2, [r7, #4]
10040ab8:	430a      	orrs	r2, r1
10040aba:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040abc:	4b04      	ldr	r3, [pc, #16]	@ (10040ad0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040ac0:	687a      	ldr	r2, [r7, #4]
10040ac2:	4013      	ands	r3, r2
10040ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040ac6:	68fb      	ldr	r3, [r7, #12]
}
10040ac8:	46c0      	nop			@ (mov r8, r8)
10040aca:	46bd      	mov	sp, r7
10040acc:	b004      	add	sp, #16
10040ace:	bd80      	pop	{r7, pc}
10040ad0:	48400000 	.word	0x48400000

10040ad4 <LL_APB0_GRP1_EnableClock>:
  * @retval None
  * @note   LL_APB0_GRP1_PERIPH_TIM1 is valid only for STM32WB06 and STM32WB07
  * @note   LL_APB0_GRP1_PERIPH_TIM2, LL_APB0_GRP1_PERIPH_TIM16 and LL_APB0_GRP1_PERIPH_TIM17 are valid for STM32WB05 and STM32WB09
  */
__STATIC_INLINE void LL_APB0_GRP1_EnableClock(uint32_t Periphs)
{
10040ad4:	b580      	push	{r7, lr}
10040ad6:	b084      	sub	sp, #16
10040ad8:	af00      	add	r7, sp, #0
10040ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB0ENR, Periphs);
10040adc:	4b07      	ldr	r3, [pc, #28]	@ (10040afc <LL_APB0_GRP1_EnableClock+0x28>)
10040ade:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040ae0:	4b06      	ldr	r3, [pc, #24]	@ (10040afc <LL_APB0_GRP1_EnableClock+0x28>)
10040ae2:	687a      	ldr	r2, [r7, #4]
10040ae4:	430a      	orrs	r2, r1
10040ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10040ae8:	4b04      	ldr	r3, [pc, #16]	@ (10040afc <LL_APB0_GRP1_EnableClock+0x28>)
10040aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040aec:	687a      	ldr	r2, [r7, #4]
10040aee:	4013      	ands	r3, r2
10040af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040af2:	68fb      	ldr	r3, [r7, #12]
}
10040af4:	46c0      	nop			@ (mov r8, r8)
10040af6:	46bd      	mov	sp, r7
10040af8:	b004      	add	sp, #16
10040afa:	bd80      	pop	{r7, pc}
10040afc:	48400000 	.word	0x48400000

10040b00 <LL_APB1_GRP1_EnableClock>:
  * @arg LL_APB1_GRP1_PERIPH_I2C2
  * @retval None
  * @note   LL_APB1_GRP1_PERIPH_SPI1, LL_APB1_GRP1_PERIPH_SPI2 and LL_APB1_GRP1_PERIPH_I2C2 are valid for STM32WB06 and STM32WB07
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
10040b00:	b580      	push	{r7, lr}
10040b02:	b084      	sub	sp, #16
10040b04:	af00      	add	r7, sp, #0
10040b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
10040b08:	4b07      	ldr	r3, [pc, #28]	@ (10040b28 <LL_APB1_GRP1_EnableClock+0x28>)
10040b0a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10040b0c:	4b06      	ldr	r3, [pc, #24]	@ (10040b28 <LL_APB1_GRP1_EnableClock+0x28>)
10040b0e:	687a      	ldr	r2, [r7, #4]
10040b10:	430a      	orrs	r2, r1
10040b12:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10040b14:	4b04      	ldr	r3, [pc, #16]	@ (10040b28 <LL_APB1_GRP1_EnableClock+0x28>)
10040b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10040b18:	687a      	ldr	r2, [r7, #4]
10040b1a:	4013      	ands	r3, r2
10040b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040b1e:	68fb      	ldr	r3, [r7, #12]
}
10040b20:	46c0      	nop			@ (mov r8, r8)
10040b22:	46bd      	mov	sp, r7
10040b24:	b004      	add	sp, #16
10040b26:	bd80      	pop	{r7, pc}
10040b28:	48400000 	.word	0x48400000

10040b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10040b2c:	b580      	push	{r7, lr}
10040b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10040b30:	2380      	movs	r3, #128	@ 0x80
10040b32:	005b      	lsls	r3, r3, #1
10040b34:	0018      	movs	r0, r3
10040b36:	f7ff ffcd 	bl	10040ad4 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
10040b3a:	46c0      	nop			@ (mov r8, r8)
10040b3c:	46bd      	mov	sp, r7
10040b3e:	bd80      	pop	{r7, pc}

10040b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10040b40:	b590      	push	{r4, r7, lr}
10040b42:	b08f      	sub	sp, #60	@ 0x3c
10040b44:	af00      	add	r7, sp, #0
10040b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10040b48:	2324      	movs	r3, #36	@ 0x24
10040b4a:	18fb      	adds	r3, r7, r3
10040b4c:	0018      	movs	r0, r3
10040b4e:	2314      	movs	r3, #20
10040b50:	001a      	movs	r2, r3
10040b52:	2100      	movs	r1, #0
10040b54:	f004 fcd4 	bl	10045500 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040b58:	240c      	movs	r4, #12
10040b5a:	193b      	adds	r3, r7, r4
10040b5c:	0018      	movs	r0, r3
10040b5e:	2318      	movs	r3, #24
10040b60:	001a      	movs	r2, r3
10040b62:	2100      	movs	r1, #0
10040b64:	f004 fccc 	bl	10045500 <memset>
  if(huart->Instance==LPUART1)
10040b68:	687b      	ldr	r3, [r7, #4]
10040b6a:	681b      	ldr	r3, [r3, #0]
10040b6c:	4a29      	ldr	r2, [pc, #164]	@ (10040c14 <HAL_UART_MspInit+0xd4>)
10040b6e:	4293      	cmp	r3, r2
10040b70:	d14c      	bne.n	10040c0c <HAL_UART_MspInit+0xcc>
//
  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
10040b72:	193b      	adds	r3, r7, r4
10040b74:	2210      	movs	r2, #16
10040b76:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10040b78:	193b      	adds	r3, r7, r4
10040b7a:	2200      	movs	r2, #0
10040b7c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040b7e:	193b      	adds	r3, r7, r4
10040b80:	0018      	movs	r0, r3
10040b82:	f003 fa35 	bl	10043ff0 <HAL_RCCEx_PeriphCLKConfig>
10040b86:	1e03      	subs	r3, r0, #0
10040b88:	d001      	beq.n	10040b8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
10040b8a:	f7ff fdb9 	bl	10040700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10040b8e:	2380      	movs	r3, #128	@ 0x80
10040b90:	005b      	lsls	r3, r3, #1
10040b92:	0018      	movs	r0, r3
10040b94:	f7ff ffb4 	bl	10040b00 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10040b98:	2008      	movs	r0, #8
10040b9a:	f7ff ff85 	bl	10040aa8 <LL_AHB1_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB3     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
10040b9e:	2424      	movs	r4, #36	@ 0x24
10040ba0:	193b      	adds	r3, r7, r4
10040ba2:	2208      	movs	r2, #8
10040ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10040ba6:	193b      	adds	r3, r7, r4
10040ba8:	2202      	movs	r2, #2
10040baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10040bac:	193b      	adds	r3, r7, r4
10040bae:	2200      	movs	r2, #0
10040bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10040bb2:	193b      	adds	r3, r7, r4
10040bb4:	2200      	movs	r2, #0
10040bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
10040bb8:	193b      	adds	r3, r7, r4
10040bba:	2201      	movs	r2, #1
10040bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10040bbe:	193b      	adds	r3, r7, r4
10040bc0:	4a15      	ldr	r2, [pc, #84]	@ (10040c18 <HAL_UART_MspInit+0xd8>)
10040bc2:	0019      	movs	r1, r3
10040bc4:	0010      	movs	r0, r2
10040bc6:	f000 fdcb 	bl	10041760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10040bca:	0021      	movs	r1, r4
10040bcc:	187b      	adds	r3, r7, r1
10040bce:	2280      	movs	r2, #128	@ 0x80
10040bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10040bd2:	187b      	adds	r3, r7, r1
10040bd4:	2202      	movs	r2, #2
10040bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10040bd8:	187b      	adds	r3, r7, r1
10040bda:	2200      	movs	r2, #0
10040bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10040bde:	187b      	adds	r3, r7, r1
10040be0:	2200      	movs	r2, #0
10040be2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
10040be4:	187b      	adds	r3, r7, r1
10040be6:	2203      	movs	r2, #3
10040be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10040bea:	187b      	adds	r3, r7, r1
10040bec:	4a0a      	ldr	r2, [pc, #40]	@ (10040c18 <HAL_UART_MspInit+0xd8>)
10040bee:	0019      	movs	r1, r3
10040bf0:	0010      	movs	r0, r2
10040bf2:	f000 fdb5 	bl	10041760 <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_3|LL_PWR_GPIO_BIT_7);
10040bf6:	2088      	movs	r0, #136	@ 0x88
10040bf8:	f7ff ff3e 	bl	10040a78 <LL_PWR_SetNoPullB>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
10040bfc:	2200      	movs	r2, #0
10040bfe:	2101      	movs	r1, #1
10040c00:	2009      	movs	r0, #9
10040c02:	f000 fce9 	bl	100415d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10040c06:	2009      	movs	r0, #9
10040c08:	f000 fcfb 	bl	10041602 <HAL_NVIC_EnableIRQ>
//
  /* USER CODE END LPUART1_MspInit 1 */

  }

}
10040c0c:	46c0      	nop			@ (mov r8, r8)
10040c0e:	46bd      	mov	sp, r7
10040c10:	b00f      	add	sp, #60	@ 0x3c
10040c12:	bd90      	pop	{r4, r7, pc}
10040c14:	41005000 	.word	0x41005000
10040c18:	48100000 	.word	0x48100000

10040c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10040c1c:	b580      	push	{r7, lr}
10040c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10040c20:	46c0      	nop			@ (mov r8, r8)
10040c22:	e7fd      	b.n	10040c20 <NMI_Handler+0x4>

10040c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10040c24:	b580      	push	{r7, lr}
10040c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10040c28:	46c0      	nop			@ (mov r8, r8)
10040c2a:	e7fd      	b.n	10040c28 <HardFault_Handler+0x4>

10040c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10040c2c:	b580      	push	{r7, lr}
10040c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10040c30:	46c0      	nop			@ (mov r8, r8)
10040c32:	46bd      	mov	sp, r7
10040c34:	bd80      	pop	{r7, pc}

10040c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10040c36:	b580      	push	{r7, lr}
10040c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10040c3a:	46c0      	nop			@ (mov r8, r8)
10040c3c:	46bd      	mov	sp, r7
10040c3e:	bd80      	pop	{r7, pc}

10040c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10040c40:	b580      	push	{r7, lr}
10040c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10040c44:	f000 fbf6 	bl	10041434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10040c48:	46c0      	nop			@ (mov r8, r8)
10040c4a:	46bd      	mov	sp, r7
10040c4c:	bd80      	pop	{r7, pc}
	...

10040c50 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 Event and Error Interrupt.
  */
void I2C1_IRQHandler(void)
{
10040c50:	b580      	push	{r7, lr}
10040c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10040c54:	4b09      	ldr	r3, [pc, #36]	@ (10040c7c <I2C1_IRQHandler+0x2c>)
10040c56:	681b      	ldr	r3, [r3, #0]
10040c58:	699a      	ldr	r2, [r3, #24]
10040c5a:	23e0      	movs	r3, #224	@ 0xe0
10040c5c:	00db      	lsls	r3, r3, #3
10040c5e:	4013      	ands	r3, r2
10040c60:	d004      	beq.n	10040c6c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
10040c62:	4b06      	ldr	r3, [pc, #24]	@ (10040c7c <I2C1_IRQHandler+0x2c>)
10040c64:	0018      	movs	r0, r3
10040c66:	f000 ff93 	bl	10041b90 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
10040c6a:	e003      	b.n	10040c74 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
10040c6c:	4b03      	ldr	r3, [pc, #12]	@ (10040c7c <I2C1_IRQHandler+0x2c>)
10040c6e:	0018      	movs	r0, r3
10040c70:	f000 ff74 	bl	10041b5c <HAL_I2C_EV_IRQHandler>
}
10040c74:	46c0      	nop			@ (mov r8, r8)
10040c76:	46bd      	mov	sp, r7
10040c78:	bd80      	pop	{r7, pc}
10040c7a:	46c0      	nop			@ (mov r8, r8)
10040c7c:	20000198 	.word	0x20000198

10040c80 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10040c80:	b580      	push	{r7, lr}
10040c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
10040c84:	4b03      	ldr	r3, [pc, #12]	@ (10040c94 <LPUART1_IRQHandler+0x14>)
10040c86:	0018      	movs	r0, r3
10040c88:	f003 fc06 	bl	10044498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10040c8c:	46c0      	nop			@ (mov r8, r8)
10040c8e:	46bd      	mov	sp, r7
10040c90:	bd80      	pop	{r7, pc}
10040c92:	46c0      	nop			@ (mov r8, r8)
10040c94:	20000228 	.word	0x20000228

10040c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
10040c98:	b580      	push	{r7, lr}
10040c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
10040c9c:	4b03      	ldr	r3, [pc, #12]	@ (10040cac <TIM2_IRQHandler+0x14>)
10040c9e:	0018      	movs	r0, r3
10040ca0:	f003 fa7e 	bl	100441a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
10040ca4:	46c0      	nop			@ (mov r8, r8)
10040ca6:	46bd      	mov	sp, r7
10040ca8:	bd80      	pop	{r7, pc}
10040caa:	46c0      	nop			@ (mov r8, r8)
10040cac:	200001ec 	.word	0x200001ec

10040cb0 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10040cb0:	b580      	push	{r7, lr}
10040cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10040cb4:	f002 fcc7 	bl	10043646 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10040cb8:	46c0      	nop			@ (mov r8, r8)
10040cba:	46bd      	mov	sp, r7
10040cbc:	bd80      	pop	{r7, pc}

10040cbe <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10040cbe:	b580      	push	{r7, lr}
10040cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
10040cc2:	f002 fcc9 	bl	10043658 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10040cc6:	46c0      	nop			@ (mov r8, r8)
10040cc8:	46bd      	mov	sp, r7
10040cca:	bd80      	pop	{r7, pc}

10040ccc <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10040ccc:	b580      	push	{r7, lr}
10040cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10040cd0:	f001 ff45 	bl	10042b5e <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10040cd4:	46c0      	nop			@ (mov r8, r8)
10040cd6:	46bd      	mov	sp, r7
10040cd8:	bd80      	pop	{r7, pc}

10040cda <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10040cda:	b580      	push	{r7, lr}
10040cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10040cde:	f001 ff65 	bl	10042bac <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
10040ce2:	46c0      	nop			@ (mov r8, r8)
10040ce4:	46bd      	mov	sp, r7
10040ce6:	bd80      	pop	{r7, pc}

10040ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10040ce8:	b590      	push	{r4, r7, lr}
10040cea:	b083      	sub	sp, #12
10040cec:	af00      	add	r7, sp, #0
10040cee:	0002      	movs	r2, r0
10040cf0:	6039      	str	r1, [r7, #0]
10040cf2:	1dfb      	adds	r3, r7, #7
10040cf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10040cf6:	1dfb      	adds	r3, r7, #7
10040cf8:	781b      	ldrb	r3, [r3, #0]
10040cfa:	2b7f      	cmp	r3, #127	@ 0x7f
10040cfc:	d828      	bhi.n	10040d50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040cfe:	4a2f      	ldr	r2, [pc, #188]	@ (10040dbc <__NVIC_SetPriority+0xd4>)
10040d00:	1dfb      	adds	r3, r7, #7
10040d02:	781b      	ldrb	r3, [r3, #0]
10040d04:	b25b      	sxtb	r3, r3
10040d06:	089b      	lsrs	r3, r3, #2
10040d08:	33c0      	adds	r3, #192	@ 0xc0
10040d0a:	009b      	lsls	r3, r3, #2
10040d0c:	589b      	ldr	r3, [r3, r2]
10040d0e:	1dfa      	adds	r2, r7, #7
10040d10:	7812      	ldrb	r2, [r2, #0]
10040d12:	0011      	movs	r1, r2
10040d14:	2203      	movs	r2, #3
10040d16:	400a      	ands	r2, r1
10040d18:	00d2      	lsls	r2, r2, #3
10040d1a:	21ff      	movs	r1, #255	@ 0xff
10040d1c:	4091      	lsls	r1, r2
10040d1e:	000a      	movs	r2, r1
10040d20:	43d2      	mvns	r2, r2
10040d22:	401a      	ands	r2, r3
10040d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040d26:	683b      	ldr	r3, [r7, #0]
10040d28:	019b      	lsls	r3, r3, #6
10040d2a:	22ff      	movs	r2, #255	@ 0xff
10040d2c:	401a      	ands	r2, r3
10040d2e:	1dfb      	adds	r3, r7, #7
10040d30:	781b      	ldrb	r3, [r3, #0]
10040d32:	0018      	movs	r0, r3
10040d34:	2303      	movs	r3, #3
10040d36:	4003      	ands	r3, r0
10040d38:	00db      	lsls	r3, r3, #3
10040d3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040d3c:	481f      	ldr	r0, [pc, #124]	@ (10040dbc <__NVIC_SetPriority+0xd4>)
10040d3e:	1dfb      	adds	r3, r7, #7
10040d40:	781b      	ldrb	r3, [r3, #0]
10040d42:	b25b      	sxtb	r3, r3
10040d44:	089b      	lsrs	r3, r3, #2
10040d46:	430a      	orrs	r2, r1
10040d48:	33c0      	adds	r3, #192	@ 0xc0
10040d4a:	009b      	lsls	r3, r3, #2
10040d4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10040d4e:	e031      	b.n	10040db4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040d50:	4a1b      	ldr	r2, [pc, #108]	@ (10040dc0 <__NVIC_SetPriority+0xd8>)
10040d52:	1dfb      	adds	r3, r7, #7
10040d54:	781b      	ldrb	r3, [r3, #0]
10040d56:	0019      	movs	r1, r3
10040d58:	230f      	movs	r3, #15
10040d5a:	400b      	ands	r3, r1
10040d5c:	3b08      	subs	r3, #8
10040d5e:	089b      	lsrs	r3, r3, #2
10040d60:	3306      	adds	r3, #6
10040d62:	009b      	lsls	r3, r3, #2
10040d64:	18d3      	adds	r3, r2, r3
10040d66:	3304      	adds	r3, #4
10040d68:	681b      	ldr	r3, [r3, #0]
10040d6a:	1dfa      	adds	r2, r7, #7
10040d6c:	7812      	ldrb	r2, [r2, #0]
10040d6e:	0011      	movs	r1, r2
10040d70:	2203      	movs	r2, #3
10040d72:	400a      	ands	r2, r1
10040d74:	00d2      	lsls	r2, r2, #3
10040d76:	21ff      	movs	r1, #255	@ 0xff
10040d78:	4091      	lsls	r1, r2
10040d7a:	000a      	movs	r2, r1
10040d7c:	43d2      	mvns	r2, r2
10040d7e:	401a      	ands	r2, r3
10040d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040d82:	683b      	ldr	r3, [r7, #0]
10040d84:	019b      	lsls	r3, r3, #6
10040d86:	22ff      	movs	r2, #255	@ 0xff
10040d88:	401a      	ands	r2, r3
10040d8a:	1dfb      	adds	r3, r7, #7
10040d8c:	781b      	ldrb	r3, [r3, #0]
10040d8e:	0018      	movs	r0, r3
10040d90:	2303      	movs	r3, #3
10040d92:	4003      	ands	r3, r0
10040d94:	00db      	lsls	r3, r3, #3
10040d96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040d98:	4809      	ldr	r0, [pc, #36]	@ (10040dc0 <__NVIC_SetPriority+0xd8>)
10040d9a:	1dfb      	adds	r3, r7, #7
10040d9c:	781b      	ldrb	r3, [r3, #0]
10040d9e:	001c      	movs	r4, r3
10040da0:	230f      	movs	r3, #15
10040da2:	4023      	ands	r3, r4
10040da4:	3b08      	subs	r3, #8
10040da6:	089b      	lsrs	r3, r3, #2
10040da8:	430a      	orrs	r2, r1
10040daa:	3306      	adds	r3, #6
10040dac:	009b      	lsls	r3, r3, #2
10040dae:	18c3      	adds	r3, r0, r3
10040db0:	3304      	adds	r3, #4
10040db2:	601a      	str	r2, [r3, #0]
}
10040db4:	46c0      	nop			@ (mov r8, r8)
10040db6:	46bd      	mov	sp, r7
10040db8:	b003      	add	sp, #12
10040dba:	bd90      	pop	{r4, r7, pc}
10040dbc:	e000e100 	.word	0xe000e100
10040dc0:	e000ed00 	.word	0xe000ed00

10040dc4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10040dc4:	b580      	push	{r7, lr}
10040dc6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10040dc8:	f3bf 8f4f 	dsb	sy
}
10040dcc:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10040dce:	4b04      	ldr	r3, [pc, #16]	@ (10040de0 <__NVIC_SystemReset+0x1c>)
10040dd0:	4a04      	ldr	r2, [pc, #16]	@ (10040de4 <__NVIC_SystemReset+0x20>)
10040dd2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10040dd4:	f3bf 8f4f 	dsb	sy
}
10040dd8:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10040dda:	46c0      	nop			@ (mov r8, r8)
10040ddc:	e7fd      	b.n	10040dda <__NVIC_SystemReset+0x16>
10040dde:	46c0      	nop			@ (mov r8, r8)
10040de0:	e000ed00 	.word	0xe000ed00
10040de4:	05fa0004 	.word	0x05fa0004

10040de8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10040de8:	b590      	push	{r4, r7, lr}
10040dea:	b087      	sub	sp, #28
10040dec:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10040dee:	4a5e      	ldr	r2, [pc, #376]	@ (10040f68 <SystemInit+0x180>)
10040df0:	2394      	movs	r3, #148	@ 0x94
10040df2:	58d3      	ldr	r3, [r2, r3]
10040df4:	2b00      	cmp	r3, #0
10040df6:	d10e      	bne.n	10040e16 <SystemInit+0x2e>
10040df8:	4b5c      	ldr	r3, [pc, #368]	@ (10040f6c <SystemInit+0x184>)
10040dfa:	691b      	ldr	r3, [r3, #16]
10040dfc:	2b00      	cmp	r3, #0
10040dfe:	d103      	bne.n	10040e08 <SystemInit+0x20>
10040e00:	4b5a      	ldr	r3, [pc, #360]	@ (10040f6c <SystemInit+0x184>)
10040e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10040e04:	2b00      	cmp	r3, #0
10040e06:	d006      	beq.n	10040e16 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10040e08:	4b59      	ldr	r3, [pc, #356]	@ (10040f70 <SystemInit+0x188>)
10040e0a:	2201      	movs	r2, #1
10040e0c:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10040e0e:	f000 f8f5 	bl	10040ffc <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10040e12:	f7ff ffd7 	bl	10040dc4 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10040e16:	4b57      	ldr	r3, [pc, #348]	@ (10040f74 <SystemInit+0x18c>)
10040e18:	4a57      	ldr	r2, [pc, #348]	@ (10040f78 <SystemInit+0x190>)
10040e1a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10040e1c:	4b55      	ldr	r3, [pc, #340]	@ (10040f74 <SystemInit+0x18c>)
10040e1e:	689a      	ldr	r2, [r3, #8]
10040e20:	4b53      	ldr	r3, [pc, #332]	@ (10040f70 <SystemInit+0x188>)
10040e22:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10040e24:	4b51      	ldr	r3, [pc, #324]	@ (10040f6c <SystemInit+0x184>)
10040e26:	685a      	ldr	r2, [r3, #4]
10040e28:	4b50      	ldr	r3, [pc, #320]	@ (10040f6c <SystemInit+0x184>)
10040e2a:	2120      	movs	r1, #32
10040e2c:	430a      	orrs	r2, r1
10040e2e:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10040e30:	4b4e      	ldr	r3, [pc, #312]	@ (10040f6c <SystemInit+0x184>)
10040e32:	685a      	ldr	r2, [r3, #4]
10040e34:	4b4d      	ldr	r3, [pc, #308]	@ (10040f6c <SystemInit+0x184>)
10040e36:	4951      	ldr	r1, [pc, #324]	@ (10040f7c <SystemInit+0x194>)
10040e38:	400a      	ands	r2, r1
10040e3a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10040e3c:	46c0      	nop			@ (mov r8, r8)
10040e3e:	4b4b      	ldr	r3, [pc, #300]	@ (10040f6c <SystemInit+0x184>)
10040e40:	695b      	ldr	r3, [r3, #20]
10040e42:	2204      	movs	r2, #4
10040e44:	4013      	ands	r3, r2
10040e46:	2b04      	cmp	r3, #4
10040e48:	d1f9      	bne.n	10040e3e <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10040e4a:	4b48      	ldr	r3, [pc, #288]	@ (10040f6c <SystemInit+0x184>)
10040e4c:	69db      	ldr	r3, [r3, #28]
10040e4e:	2230      	movs	r2, #48	@ 0x30
10040e50:	4393      	bics	r3, r2
10040e52:	001a      	movs	r2, r3
10040e54:	4b45      	ldr	r3, [pc, #276]	@ (10040f6c <SystemInit+0x184>)
10040e56:	2120      	movs	r1, #32
10040e58:	430a      	orrs	r2, r1
10040e5a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10040e5c:	4b43      	ldr	r3, [pc, #268]	@ (10040f6c <SystemInit+0x184>)
10040e5e:	69da      	ldr	r2, [r3, #28]
10040e60:	4b42      	ldr	r3, [pc, #264]	@ (10040f6c <SystemInit+0x184>)
10040e62:	4947      	ldr	r1, [pc, #284]	@ (10040f80 <SystemInit+0x198>)
10040e64:	400a      	ands	r2, r1
10040e66:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10040e68:	4b40      	ldr	r3, [pc, #256]	@ (10040f6c <SystemInit+0x184>)
10040e6a:	69da      	ldr	r2, [r3, #28]
10040e6c:	4b3f      	ldr	r3, [pc, #252]	@ (10040f6c <SystemInit+0x184>)
10040e6e:	2180      	movs	r1, #128	@ 0x80
10040e70:	0049      	lsls	r1, r1, #1
10040e72:	430a      	orrs	r2, r1
10040e74:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10040e76:	4b43      	ldr	r3, [pc, #268]	@ (10040f84 <SystemInit+0x19c>)
10040e78:	681b      	ldr	r3, [r3, #0]
10040e7a:	4a43      	ldr	r2, [pc, #268]	@ (10040f88 <SystemInit+0x1a0>)
10040e7c:	4293      	cmp	r3, r2
10040e7e:	d055      	beq.n	10040f2c <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10040e80:	231f      	movs	r3, #31
10040e82:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10040e84:	2308      	movs	r3, #8
10040e86:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10040e88:	230a      	movs	r3, #10
10040e8a:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10040e8c:	2303      	movs	r3, #3
10040e8e:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10040e90:	4b35      	ldr	r3, [pc, #212]	@ (10040f68 <SystemInit+0x180>)
10040e92:	68db      	ldr	r3, [r3, #12]
10040e94:	221e      	movs	r2, #30
10040e96:	4393      	bics	r3, r2
10040e98:	0019      	movs	r1, r3
10040e9a:	68fb      	ldr	r3, [r7, #12]
10040e9c:	005a      	lsls	r2, r3, #1
10040e9e:	4b32      	ldr	r3, [pc, #200]	@ (10040f68 <SystemInit+0x180>)
10040ea0:	430a      	orrs	r2, r1
10040ea2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10040ea4:	4b30      	ldr	r3, [pc, #192]	@ (10040f68 <SystemInit+0x180>)
10040ea6:	68da      	ldr	r2, [r3, #12]
10040ea8:	4b2f      	ldr	r3, [pc, #188]	@ (10040f68 <SystemInit+0x180>)
10040eaa:	2101      	movs	r1, #1
10040eac:	430a      	orrs	r2, r1
10040eae:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10040eb0:	4b2d      	ldr	r3, [pc, #180]	@ (10040f68 <SystemInit+0x180>)
10040eb2:	68db      	ldr	r3, [r3, #12]
10040eb4:	4a35      	ldr	r2, [pc, #212]	@ (10040f8c <SystemInit+0x1a4>)
10040eb6:	4013      	ands	r3, r2
10040eb8:	0019      	movs	r1, r3
10040eba:	693b      	ldr	r3, [r7, #16]
10040ebc:	061a      	lsls	r2, r3, #24
10040ebe:	4b2a      	ldr	r3, [pc, #168]	@ (10040f68 <SystemInit+0x180>)
10040ec0:	430a      	orrs	r2, r1
10040ec2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10040ec4:	4b28      	ldr	r3, [pc, #160]	@ (10040f68 <SystemInit+0x180>)
10040ec6:	68da      	ldr	r2, [r3, #12]
10040ec8:	4b27      	ldr	r3, [pc, #156]	@ (10040f68 <SystemInit+0x180>)
10040eca:	2180      	movs	r1, #128	@ 0x80
10040ecc:	0409      	lsls	r1, r1, #16
10040ece:	430a      	orrs	r2, r1
10040ed0:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10040ed2:	4a26      	ldr	r2, [pc, #152]	@ (10040f6c <SystemInit+0x184>)
10040ed4:	2394      	movs	r3, #148	@ 0x94
10040ed6:	58d3      	ldr	r3, [r2, r3]
10040ed8:	4a2d      	ldr	r2, [pc, #180]	@ (10040f90 <SystemInit+0x1a8>)
10040eda:	401a      	ands	r2, r3
10040edc:	68bb      	ldr	r3, [r7, #8]
10040ede:	0199      	lsls	r1, r3, #6
10040ee0:	23f0      	movs	r3, #240	@ 0xf0
10040ee2:	009b      	lsls	r3, r3, #2
10040ee4:	400b      	ands	r3, r1
10040ee6:	4921      	ldr	r1, [pc, #132]	@ (10040f6c <SystemInit+0x184>)
10040ee8:	4313      	orrs	r3, r2
10040eea:	2294      	movs	r2, #148	@ 0x94
10040eec:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10040eee:	4a1f      	ldr	r2, [pc, #124]	@ (10040f6c <SystemInit+0x184>)
10040ef0:	2394      	movs	r3, #148	@ 0x94
10040ef2:	58d3      	ldr	r3, [r2, r3]
10040ef4:	491d      	ldr	r1, [pc, #116]	@ (10040f6c <SystemInit+0x184>)
10040ef6:	2220      	movs	r2, #32
10040ef8:	4313      	orrs	r3, r2
10040efa:	2294      	movs	r2, #148	@ 0x94
10040efc:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10040efe:	4a1b      	ldr	r2, [pc, #108]	@ (10040f6c <SystemInit+0x184>)
10040f00:	2394      	movs	r3, #148	@ 0x94
10040f02:	58d3      	ldr	r3, [r2, r3]
10040f04:	4a23      	ldr	r2, [pc, #140]	@ (10040f94 <SystemInit+0x1ac>)
10040f06:	401a      	ands	r2, r3
10040f08:	687b      	ldr	r3, [r7, #4]
10040f0a:	02d9      	lsls	r1, r3, #11
10040f0c:	23e0      	movs	r3, #224	@ 0xe0
10040f0e:	019b      	lsls	r3, r3, #6
10040f10:	400b      	ands	r3, r1
10040f12:	4916      	ldr	r1, [pc, #88]	@ (10040f6c <SystemInit+0x184>)
10040f14:	4313      	orrs	r3, r2
10040f16:	2294      	movs	r2, #148	@ 0x94
10040f18:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10040f1a:	4a14      	ldr	r2, [pc, #80]	@ (10040f6c <SystemInit+0x184>)
10040f1c:	2394      	movs	r3, #148	@ 0x94
10040f1e:	58d3      	ldr	r3, [r2, r3]
10040f20:	4912      	ldr	r1, [pc, #72]	@ (10040f6c <SystemInit+0x184>)
10040f22:	2280      	movs	r2, #128	@ 0x80
10040f24:	00d2      	lsls	r2, r2, #3
10040f26:	4313      	orrs	r3, r2
10040f28:	2294      	movs	r2, #148	@ 0x94
10040f2a:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10040f2c:	2317      	movs	r3, #23
10040f2e:	18fb      	adds	r3, r7, r3
10040f30:	2200      	movs	r2, #0
10040f32:	701a      	strb	r2, [r3, #0]
10040f34:	e00d      	b.n	10040f52 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10040f36:	2417      	movs	r4, #23
10040f38:	193b      	adds	r3, r7, r4
10040f3a:	781b      	ldrb	r3, [r3, #0]
10040f3c:	b25b      	sxtb	r3, r3
10040f3e:	2103      	movs	r1, #3
10040f40:	0018      	movs	r0, r3
10040f42:	f7ff fed1 	bl	10040ce8 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10040f46:	0021      	movs	r1, r4
10040f48:	187b      	adds	r3, r7, r1
10040f4a:	781a      	ldrb	r2, [r3, #0]
10040f4c:	187b      	adds	r3, r7, r1
10040f4e:	3201      	adds	r2, #1
10040f50:	701a      	strb	r2, [r3, #0]
10040f52:	2317      	movs	r3, #23
10040f54:	18fb      	adds	r3, r7, r3
10040f56:	781b      	ldrb	r3, [r3, #0]
10040f58:	2b1f      	cmp	r3, #31
10040f5a:	d9ec      	bls.n	10040f36 <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
10040f5c:	b662      	cpsie	i
}
10040f5e:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10040f60:	46c0      	nop			@ (mov r8, r8)
10040f62:	46bd      	mov	sp, r7
10040f64:	b007      	add	sp, #28
10040f66:	bd90      	pop	{r4, r7, pc}
10040f68:	48400000 	.word	0x48400000
10040f6c:	48500000 	.word	0x48500000
10040f70:	20000004 	.word	0x20000004
10040f74:	e000ed00 	.word	0xe000ed00
10040f78:	10040000 	.word	0x10040000
10040f7c:	fffffeff 	.word	0xfffffeff
10040f80:	fffffbff 	.word	0xfffffbff
10040f84:	10001ef8 	.word	0x10001ef8
10040f88:	fcbceccc 	.word	0xfcbceccc
10040f8c:	c0ffffff 	.word	0xc0ffffff
10040f90:	fffffc3f 	.word	0xfffffc3f
10040f94:	ffffc7ff 	.word	0xffffc7ff

10040f98 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10040f98:	b580      	push	{r7, lr}
10040f9a:	b082      	sub	sp, #8
10040f9c:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10040f9e:	4b13      	ldr	r3, [pc, #76]	@ (10040fec <SystemCoreClockUpdate+0x54>)
10040fa0:	689b      	ldr	r3, [r3, #8]
10040fa2:	085b      	lsrs	r3, r3, #1
10040fa4:	b2da      	uxtb	r2, r3
10040fa6:	1dfb      	adds	r3, r7, #7
10040fa8:	2101      	movs	r1, #1
10040faa:	400a      	ands	r2, r1
10040fac:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10040fae:	4b0f      	ldr	r3, [pc, #60]	@ (10040fec <SystemCoreClockUpdate+0x54>)
10040fb0:	689b      	ldr	r3, [r3, #8]
10040fb2:	0a1b      	lsrs	r3, r3, #8
10040fb4:	b2da      	uxtb	r2, r3
10040fb6:	1dbb      	adds	r3, r7, #6
10040fb8:	2107      	movs	r1, #7
10040fba:	400a      	ands	r2, r1
10040fbc:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10040fbe:	1dfb      	adds	r3, r7, #7
10040fc0:	781b      	ldrb	r3, [r3, #0]
10040fc2:	2b00      	cmp	r3, #0
10040fc4:	d007      	beq.n	10040fd6 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10040fc6:	1dbb      	adds	r3, r7, #6
10040fc8:	781b      	ldrb	r3, [r3, #0]
10040fca:	3b01      	subs	r3, #1
10040fcc:	4a08      	ldr	r2, [pc, #32]	@ (10040ff0 <SystemCoreClockUpdate+0x58>)
10040fce:	40da      	lsrs	r2, r3
10040fd0:	4b08      	ldr	r3, [pc, #32]	@ (10040ff4 <SystemCoreClockUpdate+0x5c>)
10040fd2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10040fd4:	e005      	b.n	10040fe2 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10040fd6:	1dbb      	adds	r3, r7, #6
10040fd8:	781b      	ldrb	r3, [r3, #0]
10040fda:	4a07      	ldr	r2, [pc, #28]	@ (10040ff8 <SystemCoreClockUpdate+0x60>)
10040fdc:	40da      	lsrs	r2, r3
10040fde:	4b05      	ldr	r3, [pc, #20]	@ (10040ff4 <SystemCoreClockUpdate+0x5c>)
10040fe0:	601a      	str	r2, [r3, #0]
}
10040fe2:	46c0      	nop			@ (mov r8, r8)
10040fe4:	46bd      	mov	sp, r7
10040fe6:	b002      	add	sp, #8
10040fe8:	bd80      	pop	{r7, pc}
10040fea:	46c0      	nop			@ (mov r8, r8)
10040fec:	48400000 	.word	0x48400000
10040ff0:	01e84800 	.word	0x01e84800
10040ff4:	20000374 	.word	0x20000374
10040ff8:	03d09000 	.word	0x03d09000

10040ffc <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10040ffc:	b580      	push	{r7, lr}
10040ffe:	af00      	add	r7, sp, #0
}
10041000:	46c0      	nop			@ (mov r8, r8)
10041002:	46bd      	mov	sp, r7
10041004:	bd80      	pop	{r7, pc}
	...

10041008 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10041008:	4810      	ldr	r0, [pc, #64]	@ (1004104c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
1004100a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
1004100c:	f7ff feec 	bl	10040de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10041010:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10041012:	e003      	b.n	1004101c <LoopCopyDataInit>

10041014 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10041014:	4b0e      	ldr	r3, [pc, #56]	@ (10041050 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10041016:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10041018:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1004101a:	3104      	adds	r1, #4

1004101c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
1004101c:	480d      	ldr	r0, [pc, #52]	@ (10041054 <LoopForever+0xa>)
  ldr  r3, =_edata
1004101e:	4b0e      	ldr	r3, [pc, #56]	@ (10041058 <LoopForever+0xe>)
  adds  r2, r0, r1
10041020:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10041022:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10041024:	d3f6      	bcc.n	10041014 <CopyDataInit>
  ldr  r2, =_sbss
10041026:	4a0d      	ldr	r2, [pc, #52]	@ (1004105c <LoopForever+0x12>)
  b  LoopFillZerobss
10041028:	e002      	b.n	10041030 <LoopFillZerobss>

1004102a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
1004102a:	2300      	movs	r3, #0
  str  r3, [r2]
1004102c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
1004102e:	3204      	adds	r2, #4

10041030 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10041030:	4b0b      	ldr	r3, [pc, #44]	@ (10041060 <LoopForever+0x16>)
  cmp  r2, r3
10041032:	429a      	cmp	r2, r3
  bcc  FillZerobss
10041034:	d3f9      	bcc.n	1004102a <FillZerobss>
  ldr  r2, =_sbssblue
10041036:	4a0b      	ldr	r2, [pc, #44]	@ (10041064 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10041038:	e002      	b.n	10041040 <LoopFillZeroBlueRam>

1004103a <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
1004103a:	2300      	movs	r3, #0
  str  r3, [r2]
1004103c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
1004103e:	3204      	adds	r2, #4

10041040 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10041040:	4b09      	ldr	r3, [pc, #36]	@ (10041068 <LoopForever+0x1e>)
  cmp  r2, r3
10041042:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10041044:	d3f9      	bcc.n	1004103a <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10041046:	f7ff fcc1 	bl	100409cc <main>

1004104a <LoopForever>:

LoopForever:
    b LoopForever
1004104a:	e7fe      	b.n	1004104a <LoopForever>
   ldr   r0, =_estack
1004104c:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10041050:	100455cc 	.word	0x100455cc
  ldr  r0, =_sdata
10041054:	20000368 	.word	0x20000368
  ldr  r3, =_edata
10041058:	200003ac 	.word	0x200003ac
  ldr  r2, =_sbss
1004105c:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10041060:	20000368 	.word	0x20000368
  ldr  r2, =_sbssblue
10041064:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10041068:	20000194 	.word	0x20000194

1004106c <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
1004106c:	e7fe      	b.n	1004106c <ADC_IRQHandler>
	...

10041070 <LL_PWR_IsEnabledPUPDCfg>:
{
10041070:	b580      	push	{r7, lr}
10041072:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10041074:	4b05      	ldr	r3, [pc, #20]	@ (1004108c <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10041076:	681b      	ldr	r3, [r3, #0]
10041078:	2210      	movs	r2, #16
1004107a:	4013      	ands	r3, r2
1004107c:	2b10      	cmp	r3, #16
1004107e:	d101      	bne.n	10041084 <LL_PWR_IsEnabledPUPDCfg+0x14>
10041080:	2301      	movs	r3, #1
10041082:	e000      	b.n	10041086 <LL_PWR_IsEnabledPUPDCfg+0x16>
10041084:	2300      	movs	r3, #0
}
10041086:	0018      	movs	r0, r3
10041088:	46bd      	mov	sp, r7
1004108a:	bd80      	pop	{r7, pc}
1004108c:	48500000 	.word	0x48500000

10041090 <LL_PWR_EnableGPIOPullUp>:
{
10041090:	b580      	push	{r7, lr}
10041092:	b082      	sub	sp, #8
10041094:	af00      	add	r7, sp, #0
10041096:	6078      	str	r0, [r7, #4]
10041098:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
1004109a:	687b      	ldr	r3, [r7, #4]
1004109c:	3304      	adds	r3, #4
1004109e:	681a      	ldr	r2, [r3, #0]
100410a0:	683b      	ldr	r3, [r7, #0]
100410a2:	43d9      	mvns	r1, r3
100410a4:	687b      	ldr	r3, [r7, #4]
100410a6:	3304      	adds	r3, #4
100410a8:	400a      	ands	r2, r1
100410aa:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100410ac:	687b      	ldr	r3, [r7, #4]
100410ae:	6819      	ldr	r1, [r3, #0]
100410b0:	687b      	ldr	r3, [r7, #4]
100410b2:	683a      	ldr	r2, [r7, #0]
100410b4:	430a      	orrs	r2, r1
100410b6:	601a      	str	r2, [r3, #0]
}
100410b8:	46c0      	nop			@ (mov r8, r8)
100410ba:	46bd      	mov	sp, r7
100410bc:	b002      	add	sp, #8
100410be:	bd80      	pop	{r7, pc}

100410c0 <LL_AHB1_GRP1_EnableClock>:
{
100410c0:	b580      	push	{r7, lr}
100410c2:	b084      	sub	sp, #16
100410c4:	af00      	add	r7, sp, #0
100410c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100410c8:	4b07      	ldr	r3, [pc, #28]	@ (100410e8 <LL_AHB1_GRP1_EnableClock+0x28>)
100410ca:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100410cc:	4b06      	ldr	r3, [pc, #24]	@ (100410e8 <LL_AHB1_GRP1_EnableClock+0x28>)
100410ce:	687a      	ldr	r2, [r7, #4]
100410d0:	430a      	orrs	r2, r1
100410d2:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100410d4:	4b04      	ldr	r3, [pc, #16]	@ (100410e8 <LL_AHB1_GRP1_EnableClock+0x28>)
100410d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100410d8:	687a      	ldr	r2, [r7, #4]
100410da:	4013      	ands	r3, r2
100410dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100410de:	68fb      	ldr	r3, [r7, #12]
}
100410e0:	46c0      	nop			@ (mov r8, r8)
100410e2:	46bd      	mov	sp, r7
100410e4:	b004      	add	sp, #16
100410e6:	bd80      	pop	{r7, pc}
100410e8:	48400000 	.word	0x48400000

100410ec <LL_APB0_GRP1_EnableClock>:
{
100410ec:	b580      	push	{r7, lr}
100410ee:	b084      	sub	sp, #16
100410f0:	af00      	add	r7, sp, #0
100410f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
100410f4:	4b07      	ldr	r3, [pc, #28]	@ (10041114 <LL_APB0_GRP1_EnableClock+0x28>)
100410f6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100410f8:	4b06      	ldr	r3, [pc, #24]	@ (10041114 <LL_APB0_GRP1_EnableClock+0x28>)
100410fa:	687a      	ldr	r2, [r7, #4]
100410fc:	430a      	orrs	r2, r1
100410fe:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10041100:	4b04      	ldr	r3, [pc, #16]	@ (10041114 <LL_APB0_GRP1_EnableClock+0x28>)
10041102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10041104:	687a      	ldr	r2, [r7, #4]
10041106:	4013      	ands	r3, r2
10041108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004110a:	68fb      	ldr	r3, [r7, #12]
}
1004110c:	46c0      	nop			@ (mov r8, r8)
1004110e:	46bd      	mov	sp, r7
10041110:	b004      	add	sp, #16
10041112:	bd80      	pop	{r7, pc}
10041114:	48400000 	.word	0x48400000

10041118 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10041118:	b590      	push	{r4, r7, lr}
1004111a:	b089      	sub	sp, #36	@ 0x24
1004111c:	af00      	add	r7, sp, #0
1004111e:	0002      	movs	r2, r0
10041120:	1dfb      	adds	r3, r7, #7
10041122:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10041124:	1dfb      	adds	r3, r7, #7
10041126:	781b      	ldrb	r3, [r3, #0]
10041128:	2b00      	cmp	r3, #0
1004112a:	d103      	bne.n	10041134 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
1004112c:	2008      	movs	r0, #8
1004112e:	f7ff ffc7 	bl	100410c0 <LL_AHB1_GRP1_EnableClock>
10041132:	e00a      	b.n	1004114a <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10041134:	1dfb      	adds	r3, r7, #7
10041136:	781b      	ldrb	r3, [r3, #0]
10041138:	2b01      	cmp	r3, #1
1004113a:	d103      	bne.n	10041144 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
1004113c:	2008      	movs	r0, #8
1004113e:	f7ff ffbf 	bl	100410c0 <LL_AHB1_GRP1_EnableClock>
10041142:	e002      	b.n	1004114a <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10041144:	2008      	movs	r0, #8
10041146:	f7ff ffbb 	bl	100410c0 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
1004114a:	1dfb      	adds	r3, r7, #7
1004114c:	781a      	ldrb	r2, [r3, #0]
1004114e:	4b28      	ldr	r3, [pc, #160]	@ (100411f0 <BSP_LED_Init+0xd8>)
10041150:	0052      	lsls	r2, r2, #1
10041152:	5ad3      	ldrh	r3, [r2, r3]
10041154:	001a      	movs	r2, r3
10041156:	240c      	movs	r4, #12
10041158:	193b      	adds	r3, r7, r4
1004115a:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
1004115c:	193b      	adds	r3, r7, r4
1004115e:	2201      	movs	r2, #1
10041160:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10041162:	193b      	adds	r3, r7, r4
10041164:	2201      	movs	r2, #1
10041166:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10041168:	193b      	adds	r3, r7, r4
1004116a:	2202      	movs	r2, #2
1004116c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
1004116e:	1dfb      	adds	r3, r7, #7
10041170:	781a      	ldrb	r2, [r3, #0]
10041172:	4b20      	ldr	r3, [pc, #128]	@ (100411f4 <BSP_LED_Init+0xdc>)
10041174:	0092      	lsls	r2, r2, #2
10041176:	58d3      	ldr	r3, [r2, r3]
10041178:	193a      	adds	r2, r7, r4
1004117a:	0011      	movs	r1, r2
1004117c:	0018      	movs	r0, r3
1004117e:	f000 faef 	bl	10041760 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10041182:	f7ff ff75 	bl	10041070 <LL_PWR_IsEnabledPUPDCfg>
10041186:	1e03      	subs	r3, r0, #0
10041188:	d01f      	beq.n	100411ca <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
1004118a:	1dfb      	adds	r3, r7, #7
1004118c:	781a      	ldrb	r2, [r3, #0]
1004118e:	4b19      	ldr	r3, [pc, #100]	@ (100411f4 <BSP_LED_Init+0xdc>)
10041190:	0092      	lsls	r2, r2, #2
10041192:	58d2      	ldr	r2, [r2, r3]
10041194:	2390      	movs	r3, #144	@ 0x90
10041196:	05db      	lsls	r3, r3, #23
10041198:	429a      	cmp	r2, r3
1004119a:	d106      	bne.n	100411aa <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004119c:	193b      	adds	r3, r7, r4
1004119e:	681b      	ldr	r3, [r3, #0]
100411a0:	4a15      	ldr	r2, [pc, #84]	@ (100411f8 <BSP_LED_Init+0xe0>)
100411a2:	0019      	movs	r1, r3
100411a4:	0010      	movs	r0, r2
100411a6:	f7ff ff73 	bl	10041090 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
100411aa:	1dfb      	adds	r3, r7, #7
100411ac:	781a      	ldrb	r2, [r3, #0]
100411ae:	4b11      	ldr	r3, [pc, #68]	@ (100411f4 <BSP_LED_Init+0xdc>)
100411b0:	0092      	lsls	r2, r2, #2
100411b2:	58d3      	ldr	r3, [r2, r3]
100411b4:	4a11      	ldr	r2, [pc, #68]	@ (100411fc <BSP_LED_Init+0xe4>)
100411b6:	4293      	cmp	r3, r2
100411b8:	d107      	bne.n	100411ca <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
100411ba:	230c      	movs	r3, #12
100411bc:	18fb      	adds	r3, r7, r3
100411be:	681b      	ldr	r3, [r3, #0]
100411c0:	4a0f      	ldr	r2, [pc, #60]	@ (10041200 <BSP_LED_Init+0xe8>)
100411c2:	0019      	movs	r1, r3
100411c4:	0010      	movs	r0, r2
100411c6:	f7ff ff63 	bl	10041090 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100411ca:	1dfb      	adds	r3, r7, #7
100411cc:	781a      	ldrb	r2, [r3, #0]
100411ce:	4b09      	ldr	r3, [pc, #36]	@ (100411f4 <BSP_LED_Init+0xdc>)
100411d0:	0092      	lsls	r2, r2, #2
100411d2:	58d0      	ldr	r0, [r2, r3]
100411d4:	1dfb      	adds	r3, r7, #7
100411d6:	781a      	ldrb	r2, [r3, #0]
100411d8:	4b05      	ldr	r3, [pc, #20]	@ (100411f0 <BSP_LED_Init+0xd8>)
100411da:	0052      	lsls	r2, r2, #1
100411dc:	5ad3      	ldrh	r3, [r2, r3]
100411de:	2201      	movs	r2, #1
100411e0:	0019      	movs	r1, r3
100411e2:	f000 fc83 	bl	10041aec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
100411e6:	2300      	movs	r3, #0
}
100411e8:	0018      	movs	r0, r3
100411ea:	46bd      	mov	sp, r7
100411ec:	b009      	add	sp, #36	@ 0x24
100411ee:	bd90      	pop	{r4, r7, pc}
100411f0:	20000378 	.word	0x20000378
100411f4:	20000380 	.word	0x20000380
100411f8:	48500020 	.word	0x48500020
100411fc:	48100000 	.word	0x48100000
10041200:	48500028 	.word	0x48500028

10041204 <BSP_LED_Toggle>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10041204:	b580      	push	{r7, lr}
10041206:	b082      	sub	sp, #8
10041208:	af00      	add	r7, sp, #0
1004120a:	0002      	movs	r2, r0
1004120c:	1dfb      	adds	r3, r7, #7
1004120e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10041210:	1dfb      	adds	r3, r7, #7
10041212:	781a      	ldrb	r2, [r3, #0]
10041214:	4b07      	ldr	r3, [pc, #28]	@ (10041234 <BSP_LED_Toggle+0x30>)
10041216:	0092      	lsls	r2, r2, #2
10041218:	58d0      	ldr	r0, [r2, r3]
1004121a:	1dfb      	adds	r3, r7, #7
1004121c:	781a      	ldrb	r2, [r3, #0]
1004121e:	4b06      	ldr	r3, [pc, #24]	@ (10041238 <BSP_LED_Toggle+0x34>)
10041220:	0052      	lsls	r2, r2, #1
10041222:	5ad3      	ldrh	r3, [r2, r3]
10041224:	0019      	movs	r1, r3
10041226:	f000 fc7e 	bl	10041b26 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
1004122a:	2300      	movs	r3, #0
}
1004122c:	0018      	movs	r0, r3
1004122e:	46bd      	mov	sp, r7
10041230:	b002      	add	sp, #8
10041232:	bd80      	pop	{r7, pc}
10041234:	20000380 	.word	0x20000380
10041238:	20000378 	.word	0x20000378

1004123c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
1004123c:	b580      	push	{r7, lr}
1004123e:	b088      	sub	sp, #32
10041240:	af00      	add	r7, sp, #0
10041242:	0002      	movs	r2, r0
10041244:	1dfb      	adds	r3, r7, #7
10041246:	701a      	strb	r2, [r3, #0]
10041248:	1dbb      	adds	r3, r7, #6
1004124a:	1c0a      	adds	r2, r1, #0
1004124c:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
1004124e:	2300      	movs	r3, #0
10041250:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
10041252:	1dfb      	adds	r3, r7, #7
10041254:	781b      	ldrb	r3, [r3, #0]
10041256:	2b00      	cmp	r3, #0
10041258:	d103      	bne.n	10041262 <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
1004125a:	2004      	movs	r0, #4
1004125c:	f7ff ff30 	bl	100410c0 <LL_AHB1_GRP1_EnableClock>
10041260:	e00a      	b.n	10041278 <BSP_PB_Init+0x3c>
  }
  else if (Button == B2)
10041262:	1dfb      	adds	r3, r7, #7
10041264:	781b      	ldrb	r3, [r3, #0]
10041266:	2b01      	cmp	r3, #1
10041268:	d103      	bne.n	10041272 <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
1004126a:	2008      	movs	r0, #8
1004126c:	f7ff ff28 	bl	100410c0 <LL_AHB1_GRP1_EnableClock>
10041270:	e002      	b.n	10041278 <BSP_PB_Init+0x3c>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
10041272:	2008      	movs	r0, #8
10041274:	f7ff ff24 	bl	100410c0 <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
10041278:	1dfb      	adds	r3, r7, #7
1004127a:	781a      	ldrb	r2, [r3, #0]
1004127c:	4b37      	ldr	r3, [pc, #220]	@ (1004135c <BSP_PB_Init+0x120>)
1004127e:	0052      	lsls	r2, r2, #1
10041280:	5ad3      	ldrh	r3, [r2, r3]
10041282:	001a      	movs	r2, r3
10041284:	2108      	movs	r1, #8
10041286:	187b      	adds	r3, r7, r1
10041288:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004128a:	187b      	adds	r3, r7, r1
1004128c:	2201      	movs	r2, #1
1004128e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10041290:	187b      	adds	r3, r7, r1
10041292:	2202      	movs	r2, #2
10041294:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
10041296:	1dbb      	adds	r3, r7, #6
10041298:	781b      	ldrb	r3, [r3, #0]
1004129a:	2b00      	cmp	r3, #0
1004129c:	d10c      	bne.n	100412b8 <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
1004129e:	187b      	adds	r3, r7, r1
100412a0:	2200      	movs	r2, #0
100412a2:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
100412a4:	1dfb      	adds	r3, r7, #7
100412a6:	781a      	ldrb	r2, [r3, #0]
100412a8:	4b2d      	ldr	r3, [pc, #180]	@ (10041360 <BSP_PB_Init+0x124>)
100412aa:	0092      	lsls	r2, r2, #2
100412ac:	58d3      	ldr	r3, [r2, r3]
100412ae:	187a      	adds	r2, r7, r1
100412b0:	0011      	movs	r1, r2
100412b2:	0018      	movs	r0, r3
100412b4:	f000 fa54 	bl	10041760 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
100412b8:	1dbb      	adds	r3, r7, #6
100412ba:	781b      	ldrb	r3, [r3, #0]
100412bc:	2b01      	cmp	r3, #1
100412be:	d123      	bne.n	10041308 <BSP_PB_Init+0xcc>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
100412c0:	2380      	movs	r3, #128	@ 0x80
100412c2:	005b      	lsls	r3, r3, #1
100412c4:	0018      	movs	r0, r3
100412c6:	f7ff ff11 	bl	100410ec <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
100412ca:	2108      	movs	r1, #8
100412cc:	187b      	adds	r3, r7, r1
100412ce:	2280      	movs	r2, #128	@ 0x80
100412d0:	0252      	lsls	r2, r2, #9
100412d2:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
100412d4:	1dfb      	adds	r3, r7, #7
100412d6:	781a      	ldrb	r2, [r3, #0]
100412d8:	4b21      	ldr	r3, [pc, #132]	@ (10041360 <BSP_PB_Init+0x124>)
100412da:	0092      	lsls	r2, r2, #2
100412dc:	58d3      	ldr	r3, [r2, r3]
100412de:	187a      	adds	r2, r7, r1
100412e0:	0011      	movs	r1, r2
100412e2:	0018      	movs	r0, r3
100412e4:	f000 fa3c 	bl	10041760 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
100412e8:	1dfb      	adds	r3, r7, #7
100412ea:	781b      	ldrb	r3, [r3, #0]
100412ec:	4a1d      	ldr	r2, [pc, #116]	@ (10041364 <BSP_PB_Init+0x128>)
100412ee:	56d3      	ldrsb	r3, [r2, r3]
100412f0:	2200      	movs	r2, #0
100412f2:	2103      	movs	r1, #3
100412f4:	0018      	movs	r0, r3
100412f6:	f000 f96f 	bl	100415d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
100412fa:	1dfb      	adds	r3, r7, #7
100412fc:	781b      	ldrb	r3, [r3, #0]
100412fe:	4a19      	ldr	r2, [pc, #100]	@ (10041364 <BSP_PB_Init+0x128>)
10041300:	56d3      	ldrsb	r3, [r2, r3]
10041302:	0018      	movs	r0, r3
10041304:	f000 f97d 	bl	10041602 <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10041308:	f7ff feb2 	bl	10041070 <LL_PWR_IsEnabledPUPDCfg>
1004130c:	1e03      	subs	r3, r0, #0
1004130e:	d020      	beq.n	10041352 <BSP_PB_Init+0x116>
  {
    if (BUTTON_PORT[Button] == GPIOA)
10041310:	1dfb      	adds	r3, r7, #7
10041312:	781a      	ldrb	r2, [r3, #0]
10041314:	4b12      	ldr	r3, [pc, #72]	@ (10041360 <BSP_PB_Init+0x124>)
10041316:	0092      	lsls	r2, r2, #2
10041318:	58d2      	ldr	r2, [r2, r3]
1004131a:	2390      	movs	r3, #144	@ 0x90
1004131c:	05db      	lsls	r3, r3, #23
1004131e:	429a      	cmp	r2, r3
10041320:	d107      	bne.n	10041332 <BSP_PB_Init+0xf6>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10041322:	2308      	movs	r3, #8
10041324:	18fb      	adds	r3, r7, r3
10041326:	681b      	ldr	r3, [r3, #0]
10041328:	4a0f      	ldr	r2, [pc, #60]	@ (10041368 <BSP_PB_Init+0x12c>)
1004132a:	0019      	movs	r1, r3
1004132c:	0010      	movs	r0, r2
1004132e:	f7ff feaf 	bl	10041090 <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
10041332:	1dfb      	adds	r3, r7, #7
10041334:	781a      	ldrb	r2, [r3, #0]
10041336:	4b0a      	ldr	r3, [pc, #40]	@ (10041360 <BSP_PB_Init+0x124>)
10041338:	0092      	lsls	r2, r2, #2
1004133a:	58d3      	ldr	r3, [r2, r3]
1004133c:	4a0b      	ldr	r2, [pc, #44]	@ (1004136c <BSP_PB_Init+0x130>)
1004133e:	4293      	cmp	r3, r2
10041340:	d107      	bne.n	10041352 <BSP_PB_Init+0x116>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10041342:	2308      	movs	r3, #8
10041344:	18fb      	adds	r3, r7, r3
10041346:	681b      	ldr	r3, [r3, #0]
10041348:	4a09      	ldr	r2, [pc, #36]	@ (10041370 <BSP_PB_Init+0x134>)
1004134a:	0019      	movs	r1, r3
1004134c:	0010      	movs	r0, r2
1004134e:	f7ff fe9f 	bl	10041090 <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
10041352:	69fb      	ldr	r3, [r7, #28]
}
10041354:	0018      	movs	r0, r3
10041356:	46bd      	mov	sp, r7
10041358:	b008      	add	sp, #32
1004135a:	bd80      	pop	{r7, pc}
1004135c:	2000038c 	.word	0x2000038c
10041360:	20000394 	.word	0x20000394
10041364:	200003a0 	.word	0x200003a0
10041368:	48500020 	.word	0x48500020
1004136c:	48100000 	.word	0x48100000
10041370:	48500028 	.word	0x48500028

10041374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10041374:	b580      	push	{r7, lr}
10041376:	b082      	sub	sp, #8
10041378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
1004137a:	1dfb      	adds	r3, r7, #7
1004137c:	2200      	movs	r2, #0
1004137e:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10041380:	2003      	movs	r0, #3
10041382:	f000 f80f 	bl	100413a4 <HAL_InitTick>
10041386:	1e03      	subs	r3, r0, #0
10041388:	d003      	beq.n	10041392 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
1004138a:	1dfb      	adds	r3, r7, #7
1004138c:	2201      	movs	r2, #1
1004138e:	701a      	strb	r2, [r3, #0]
10041390:	e001      	b.n	10041396 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10041392:	f7ff fbcb 	bl	10040b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
10041396:	1dfb      	adds	r3, r7, #7
10041398:	781b      	ldrb	r3, [r3, #0]
}
1004139a:	0018      	movs	r0, r3
1004139c:	46bd      	mov	sp, r7
1004139e:	b002      	add	sp, #8
100413a0:	bd80      	pop	{r7, pc}
	...

100413a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100413a4:	b590      	push	{r4, r7, lr}
100413a6:	b085      	sub	sp, #20
100413a8:	af00      	add	r7, sp, #0
100413aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100413ac:	230f      	movs	r3, #15
100413ae:	18fb      	adds	r3, r7, r3
100413b0:	2200      	movs	r2, #0
100413b2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100413b4:	4b1d      	ldr	r3, [pc, #116]	@ (1004142c <HAL_InitTick+0x88>)
100413b6:	781b      	ldrb	r3, [r3, #0]
100413b8:	2b00      	cmp	r3, #0
100413ba:	d02c      	beq.n	10041416 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100413bc:	f002 fd2e 	bl	10043e1c <HAL_RCC_GetSysClockFreq>
100413c0:	0004      	movs	r4, r0
100413c2:	4b1a      	ldr	r3, [pc, #104]	@ (1004142c <HAL_InitTick+0x88>)
100413c4:	781b      	ldrb	r3, [r3, #0]
100413c6:	0019      	movs	r1, r3
100413c8:	23fa      	movs	r3, #250	@ 0xfa
100413ca:	0098      	lsls	r0, r3, #2
100413cc:	f7fe fe9a 	bl	10040104 <__udivsi3>
100413d0:	0003      	movs	r3, r0
100413d2:	0019      	movs	r1, r3
100413d4:	0020      	movs	r0, r4
100413d6:	f7fe fe95 	bl	10040104 <__udivsi3>
100413da:	0003      	movs	r3, r0
100413dc:	0018      	movs	r0, r3
100413de:	f000 f920 	bl	10041622 <HAL_SYSTICK_Config>
100413e2:	1e03      	subs	r3, r0, #0
100413e4:	d112      	bne.n	1004140c <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100413e6:	687b      	ldr	r3, [r7, #4]
100413e8:	2b03      	cmp	r3, #3
100413ea:	d80a      	bhi.n	10041402 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
100413ec:	6879      	ldr	r1, [r7, #4]
100413ee:	2301      	movs	r3, #1
100413f0:	425b      	negs	r3, r3
100413f2:	2200      	movs	r2, #0
100413f4:	0018      	movs	r0, r3
100413f6:	f000 f8ef 	bl	100415d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
100413fa:	4b0d      	ldr	r3, [pc, #52]	@ (10041430 <HAL_InitTick+0x8c>)
100413fc:	687a      	ldr	r2, [r7, #4]
100413fe:	601a      	str	r2, [r3, #0]
10041400:	e00d      	b.n	1004141e <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10041402:	230f      	movs	r3, #15
10041404:	18fb      	adds	r3, r7, r3
10041406:	2201      	movs	r2, #1
10041408:	701a      	strb	r2, [r3, #0]
1004140a:	e008      	b.n	1004141e <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
1004140c:	230f      	movs	r3, #15
1004140e:	18fb      	adds	r3, r7, r3
10041410:	2201      	movs	r2, #1
10041412:	701a      	strb	r2, [r3, #0]
10041414:	e003      	b.n	1004141e <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10041416:	230f      	movs	r3, #15
10041418:	18fb      	adds	r3, r7, r3
1004141a:	2201      	movs	r2, #1
1004141c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
1004141e:	230f      	movs	r3, #15
10041420:	18fb      	adds	r3, r7, r3
10041422:	781b      	ldrb	r3, [r3, #0]
}
10041424:	0018      	movs	r0, r3
10041426:	46bd      	mov	sp, r7
10041428:	b005      	add	sp, #20
1004142a:	bd90      	pop	{r4, r7, pc}
1004142c:	200003a8 	.word	0x200003a8
10041430:	200003a4 	.word	0x200003a4

10041434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10041434:	b580      	push	{r7, lr}
10041436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10041438:	4b05      	ldr	r3, [pc, #20]	@ (10041450 <HAL_IncTick+0x1c>)
1004143a:	781b      	ldrb	r3, [r3, #0]
1004143c:	001a      	movs	r2, r3
1004143e:	4b05      	ldr	r3, [pc, #20]	@ (10041454 <HAL_IncTick+0x20>)
10041440:	681b      	ldr	r3, [r3, #0]
10041442:	18d2      	adds	r2, r2, r3
10041444:	4b03      	ldr	r3, [pc, #12]	@ (10041454 <HAL_IncTick+0x20>)
10041446:	601a      	str	r2, [r3, #0]
}
10041448:	46c0      	nop			@ (mov r8, r8)
1004144a:	46bd      	mov	sp, r7
1004144c:	bd80      	pop	{r7, pc}
1004144e:	46c0      	nop			@ (mov r8, r8)
10041450:	200003a8 	.word	0x200003a8
10041454:	200002bc 	.word	0x200002bc

10041458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10041458:	b580      	push	{r7, lr}
1004145a:	af00      	add	r7, sp, #0
  return uwTick;
1004145c:	4b02      	ldr	r3, [pc, #8]	@ (10041468 <HAL_GetTick+0x10>)
1004145e:	681b      	ldr	r3, [r3, #0]
}
10041460:	0018      	movs	r0, r3
10041462:	46bd      	mov	sp, r7
10041464:	bd80      	pop	{r7, pc}
10041466:	46c0      	nop			@ (mov r8, r8)
10041468:	200002bc 	.word	0x200002bc

1004146c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
1004146c:	b580      	push	{r7, lr}
1004146e:	af00      	add	r7, sp, #0
  return uwTickPrio;
10041470:	4b02      	ldr	r3, [pc, #8]	@ (1004147c <HAL_GetTickPrio+0x10>)
10041472:	681b      	ldr	r3, [r3, #0]
}
10041474:	0018      	movs	r0, r3
10041476:	46bd      	mov	sp, r7
10041478:	bd80      	pop	{r7, pc}
1004147a:	46c0      	nop			@ (mov r8, r8)
1004147c:	200003a4 	.word	0x200003a4

10041480 <__NVIC_EnableIRQ>:
{
10041480:	b580      	push	{r7, lr}
10041482:	b082      	sub	sp, #8
10041484:	af00      	add	r7, sp, #0
10041486:	0002      	movs	r2, r0
10041488:	1dfb      	adds	r3, r7, #7
1004148a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004148c:	1dfb      	adds	r3, r7, #7
1004148e:	781b      	ldrb	r3, [r3, #0]
10041490:	2b7f      	cmp	r3, #127	@ 0x7f
10041492:	d809      	bhi.n	100414a8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10041494:	1dfb      	adds	r3, r7, #7
10041496:	781b      	ldrb	r3, [r3, #0]
10041498:	001a      	movs	r2, r3
1004149a:	231f      	movs	r3, #31
1004149c:	401a      	ands	r2, r3
1004149e:	4b04      	ldr	r3, [pc, #16]	@ (100414b0 <__NVIC_EnableIRQ+0x30>)
100414a0:	2101      	movs	r1, #1
100414a2:	4091      	lsls	r1, r2
100414a4:	000a      	movs	r2, r1
100414a6:	601a      	str	r2, [r3, #0]
}
100414a8:	46c0      	nop			@ (mov r8, r8)
100414aa:	46bd      	mov	sp, r7
100414ac:	b002      	add	sp, #8
100414ae:	bd80      	pop	{r7, pc}
100414b0:	e000e100 	.word	0xe000e100

100414b4 <__NVIC_SetPriority>:
{
100414b4:	b590      	push	{r4, r7, lr}
100414b6:	b083      	sub	sp, #12
100414b8:	af00      	add	r7, sp, #0
100414ba:	0002      	movs	r2, r0
100414bc:	6039      	str	r1, [r7, #0]
100414be:	1dfb      	adds	r3, r7, #7
100414c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100414c2:	1dfb      	adds	r3, r7, #7
100414c4:	781b      	ldrb	r3, [r3, #0]
100414c6:	2b7f      	cmp	r3, #127	@ 0x7f
100414c8:	d828      	bhi.n	1004151c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100414ca:	4a2f      	ldr	r2, [pc, #188]	@ (10041588 <__NVIC_SetPriority+0xd4>)
100414cc:	1dfb      	adds	r3, r7, #7
100414ce:	781b      	ldrb	r3, [r3, #0]
100414d0:	b25b      	sxtb	r3, r3
100414d2:	089b      	lsrs	r3, r3, #2
100414d4:	33c0      	adds	r3, #192	@ 0xc0
100414d6:	009b      	lsls	r3, r3, #2
100414d8:	589b      	ldr	r3, [r3, r2]
100414da:	1dfa      	adds	r2, r7, #7
100414dc:	7812      	ldrb	r2, [r2, #0]
100414de:	0011      	movs	r1, r2
100414e0:	2203      	movs	r2, #3
100414e2:	400a      	ands	r2, r1
100414e4:	00d2      	lsls	r2, r2, #3
100414e6:	21ff      	movs	r1, #255	@ 0xff
100414e8:	4091      	lsls	r1, r2
100414ea:	000a      	movs	r2, r1
100414ec:	43d2      	mvns	r2, r2
100414ee:	401a      	ands	r2, r3
100414f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100414f2:	683b      	ldr	r3, [r7, #0]
100414f4:	019b      	lsls	r3, r3, #6
100414f6:	22ff      	movs	r2, #255	@ 0xff
100414f8:	401a      	ands	r2, r3
100414fa:	1dfb      	adds	r3, r7, #7
100414fc:	781b      	ldrb	r3, [r3, #0]
100414fe:	0018      	movs	r0, r3
10041500:	2303      	movs	r3, #3
10041502:	4003      	ands	r3, r0
10041504:	00db      	lsls	r3, r3, #3
10041506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041508:	481f      	ldr	r0, [pc, #124]	@ (10041588 <__NVIC_SetPriority+0xd4>)
1004150a:	1dfb      	adds	r3, r7, #7
1004150c:	781b      	ldrb	r3, [r3, #0]
1004150e:	b25b      	sxtb	r3, r3
10041510:	089b      	lsrs	r3, r3, #2
10041512:	430a      	orrs	r2, r1
10041514:	33c0      	adds	r3, #192	@ 0xc0
10041516:	009b      	lsls	r3, r3, #2
10041518:	501a      	str	r2, [r3, r0]
}
1004151a:	e031      	b.n	10041580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004151c:	4a1b      	ldr	r2, [pc, #108]	@ (1004158c <__NVIC_SetPriority+0xd8>)
1004151e:	1dfb      	adds	r3, r7, #7
10041520:	781b      	ldrb	r3, [r3, #0]
10041522:	0019      	movs	r1, r3
10041524:	230f      	movs	r3, #15
10041526:	400b      	ands	r3, r1
10041528:	3b08      	subs	r3, #8
1004152a:	089b      	lsrs	r3, r3, #2
1004152c:	3306      	adds	r3, #6
1004152e:	009b      	lsls	r3, r3, #2
10041530:	18d3      	adds	r3, r2, r3
10041532:	3304      	adds	r3, #4
10041534:	681b      	ldr	r3, [r3, #0]
10041536:	1dfa      	adds	r2, r7, #7
10041538:	7812      	ldrb	r2, [r2, #0]
1004153a:	0011      	movs	r1, r2
1004153c:	2203      	movs	r2, #3
1004153e:	400a      	ands	r2, r1
10041540:	00d2      	lsls	r2, r2, #3
10041542:	21ff      	movs	r1, #255	@ 0xff
10041544:	4091      	lsls	r1, r2
10041546:	000a      	movs	r2, r1
10041548:	43d2      	mvns	r2, r2
1004154a:	401a      	ands	r2, r3
1004154c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004154e:	683b      	ldr	r3, [r7, #0]
10041550:	019b      	lsls	r3, r3, #6
10041552:	22ff      	movs	r2, #255	@ 0xff
10041554:	401a      	ands	r2, r3
10041556:	1dfb      	adds	r3, r7, #7
10041558:	781b      	ldrb	r3, [r3, #0]
1004155a:	0018      	movs	r0, r3
1004155c:	2303      	movs	r3, #3
1004155e:	4003      	ands	r3, r0
10041560:	00db      	lsls	r3, r3, #3
10041562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041564:	4809      	ldr	r0, [pc, #36]	@ (1004158c <__NVIC_SetPriority+0xd8>)
10041566:	1dfb      	adds	r3, r7, #7
10041568:	781b      	ldrb	r3, [r3, #0]
1004156a:	001c      	movs	r4, r3
1004156c:	230f      	movs	r3, #15
1004156e:	4023      	ands	r3, r4
10041570:	3b08      	subs	r3, #8
10041572:	089b      	lsrs	r3, r3, #2
10041574:	430a      	orrs	r2, r1
10041576:	3306      	adds	r3, #6
10041578:	009b      	lsls	r3, r3, #2
1004157a:	18c3      	adds	r3, r0, r3
1004157c:	3304      	adds	r3, #4
1004157e:	601a      	str	r2, [r3, #0]
}
10041580:	46c0      	nop			@ (mov r8, r8)
10041582:	46bd      	mov	sp, r7
10041584:	b003      	add	sp, #12
10041586:	bd90      	pop	{r4, r7, pc}
10041588:	e000e100 	.word	0xe000e100
1004158c:	e000ed00 	.word	0xe000ed00

10041590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10041590:	b580      	push	{r7, lr}
10041592:	b082      	sub	sp, #8
10041594:	af00      	add	r7, sp, #0
10041596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10041598:	687b      	ldr	r3, [r7, #4]
1004159a:	1e5a      	subs	r2, r3, #1
1004159c:	2380      	movs	r3, #128	@ 0x80
1004159e:	045b      	lsls	r3, r3, #17
100415a0:	429a      	cmp	r2, r3
100415a2:	d301      	bcc.n	100415a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
100415a4:	2301      	movs	r3, #1
100415a6:	e010      	b.n	100415ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100415a8:	4b0a      	ldr	r3, [pc, #40]	@ (100415d4 <SysTick_Config+0x44>)
100415aa:	687a      	ldr	r2, [r7, #4]
100415ac:	3a01      	subs	r2, #1
100415ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100415b0:	2301      	movs	r3, #1
100415b2:	425b      	negs	r3, r3
100415b4:	2103      	movs	r1, #3
100415b6:	0018      	movs	r0, r3
100415b8:	f7ff ff7c 	bl	100414b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100415bc:	4b05      	ldr	r3, [pc, #20]	@ (100415d4 <SysTick_Config+0x44>)
100415be:	2200      	movs	r2, #0
100415c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100415c2:	4b04      	ldr	r3, [pc, #16]	@ (100415d4 <SysTick_Config+0x44>)
100415c4:	2207      	movs	r2, #7
100415c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100415c8:	2300      	movs	r3, #0
}
100415ca:	0018      	movs	r0, r3
100415cc:	46bd      	mov	sp, r7
100415ce:	b002      	add	sp, #8
100415d0:	bd80      	pop	{r7, pc}
100415d2:	46c0      	nop			@ (mov r8, r8)
100415d4:	e000e010 	.word	0xe000e010

100415d8 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100415d8:	b580      	push	{r7, lr}
100415da:	b084      	sub	sp, #16
100415dc:	af00      	add	r7, sp, #0
100415de:	60b9      	str	r1, [r7, #8]
100415e0:	607a      	str	r2, [r7, #4]
100415e2:	210f      	movs	r1, #15
100415e4:	187b      	adds	r3, r7, r1
100415e6:	1c02      	adds	r2, r0, #0
100415e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
100415ea:	68ba      	ldr	r2, [r7, #8]
100415ec:	187b      	adds	r3, r7, r1
100415ee:	781b      	ldrb	r3, [r3, #0]
100415f0:	b25b      	sxtb	r3, r3
100415f2:	0011      	movs	r1, r2
100415f4:	0018      	movs	r0, r3
100415f6:	f7ff ff5d 	bl	100414b4 <__NVIC_SetPriority>
}
100415fa:	46c0      	nop			@ (mov r8, r8)
100415fc:	46bd      	mov	sp, r7
100415fe:	b004      	add	sp, #16
10041600:	bd80      	pop	{r7, pc}

10041602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10041602:	b580      	push	{r7, lr}
10041604:	b082      	sub	sp, #8
10041606:	af00      	add	r7, sp, #0
10041608:	0002      	movs	r2, r0
1004160a:	1dfb      	adds	r3, r7, #7
1004160c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004160e:	1dfb      	adds	r3, r7, #7
10041610:	781b      	ldrb	r3, [r3, #0]
10041612:	b25b      	sxtb	r3, r3
10041614:	0018      	movs	r0, r3
10041616:	f7ff ff33 	bl	10041480 <__NVIC_EnableIRQ>
}
1004161a:	46c0      	nop			@ (mov r8, r8)
1004161c:	46bd      	mov	sp, r7
1004161e:	b002      	add	sp, #8
10041620:	bd80      	pop	{r7, pc}

10041622 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10041622:	b580      	push	{r7, lr}
10041624:	b082      	sub	sp, #8
10041626:	af00      	add	r7, sp, #0
10041628:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1004162a:	687b      	ldr	r3, [r7, #4]
1004162c:	0018      	movs	r0, r3
1004162e:	f7ff ffaf 	bl	10041590 <SysTick_Config>
10041632:	0003      	movs	r3, r0
}
10041634:	0018      	movs	r0, r3
10041636:	46bd      	mov	sp, r7
10041638:	b002      	add	sp, #8
1004163a:	bd80      	pop	{r7, pc}

1004163c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
1004163c:	b580      	push	{r7, lr}
1004163e:	b082      	sub	sp, #8
10041640:	af00      	add	r7, sp, #0
10041642:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
10041644:	687b      	ldr	r3, [r7, #4]
10041646:	2b00      	cmp	r3, #0
10041648:	d101      	bne.n	1004164e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
1004164a:	2301      	movs	r3, #1
1004164c:	e031      	b.n	100416b2 <HAL_DMA_Abort+0x76>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
1004164e:	687b      	ldr	r3, [r7, #4]
10041650:	2225      	movs	r2, #37	@ 0x25
10041652:	5c9b      	ldrb	r3, [r3, r2]
10041654:	b2db      	uxtb	r3, r3
10041656:	2b02      	cmp	r3, #2
10041658:	d008      	beq.n	1004166c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
1004165a:	687b      	ldr	r3, [r7, #4]
1004165c:	2204      	movs	r2, #4
1004165e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10041660:	687b      	ldr	r3, [r7, #4]
10041662:	2224      	movs	r2, #36	@ 0x24
10041664:	2100      	movs	r1, #0
10041666:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
10041668:	2301      	movs	r3, #1
1004166a:	e022      	b.n	100416b2 <HAL_DMA_Abort+0x76>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
1004166c:	687b      	ldr	r3, [r7, #4]
1004166e:	681b      	ldr	r3, [r3, #0]
10041670:	681a      	ldr	r2, [r3, #0]
10041672:	687b      	ldr	r3, [r7, #4]
10041674:	681b      	ldr	r3, [r3, #0]
10041676:	210e      	movs	r1, #14
10041678:	438a      	bics	r2, r1
1004167a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
1004167c:	687b      	ldr	r3, [r7, #4]
1004167e:	681b      	ldr	r3, [r3, #0]
10041680:	681a      	ldr	r2, [r3, #0]
10041682:	687b      	ldr	r3, [r7, #4]
10041684:	681b      	ldr	r3, [r3, #0]
10041686:	2101      	movs	r1, #1
10041688:	438a      	bics	r2, r1
1004168a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
1004168c:	687b      	ldr	r3, [r7, #4]
1004168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041690:	223c      	movs	r2, #60	@ 0x3c
10041692:	401a      	ands	r2, r3
10041694:	687b      	ldr	r3, [r7, #4]
10041696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10041698:	2101      	movs	r1, #1
1004169a:	4091      	lsls	r1, r2
1004169c:	000a      	movs	r2, r1
1004169e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
100416a0:	687b      	ldr	r3, [r7, #4]
100416a2:	2225      	movs	r2, #37	@ 0x25
100416a4:	2101      	movs	r1, #1
100416a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
100416a8:	687b      	ldr	r3, [r7, #4]
100416aa:	2224      	movs	r2, #36	@ 0x24
100416ac:	2100      	movs	r1, #0
100416ae:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
100416b0:	2300      	movs	r3, #0
}
100416b2:	0018      	movs	r0, r3
100416b4:	46bd      	mov	sp, r7
100416b6:	b002      	add	sp, #8
100416b8:	bd80      	pop	{r7, pc}

100416ba <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
100416ba:	b580      	push	{r7, lr}
100416bc:	b084      	sub	sp, #16
100416be:	af00      	add	r7, sp, #0
100416c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
100416c2:	210f      	movs	r1, #15
100416c4:	187b      	adds	r3, r7, r1
100416c6:	2200      	movs	r2, #0
100416c8:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
100416ca:	687b      	ldr	r3, [r7, #4]
100416cc:	2225      	movs	r2, #37	@ 0x25
100416ce:	5c9b      	ldrb	r3, [r3, r2]
100416d0:	b2db      	uxtb	r3, r3
100416d2:	2b02      	cmp	r3, #2
100416d4:	d006      	beq.n	100416e4 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
100416d6:	687b      	ldr	r3, [r7, #4]
100416d8:	2204      	movs	r2, #4
100416da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
100416dc:	187b      	adds	r3, r7, r1
100416de:	2201      	movs	r2, #1
100416e0:	701a      	strb	r2, [r3, #0]
100416e2:	e02a      	b.n	1004173a <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
100416e4:	687b      	ldr	r3, [r7, #4]
100416e6:	681b      	ldr	r3, [r3, #0]
100416e8:	681a      	ldr	r2, [r3, #0]
100416ea:	687b      	ldr	r3, [r7, #4]
100416ec:	681b      	ldr	r3, [r3, #0]
100416ee:	210e      	movs	r1, #14
100416f0:	438a      	bics	r2, r1
100416f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
100416f4:	687b      	ldr	r3, [r7, #4]
100416f6:	681b      	ldr	r3, [r3, #0]
100416f8:	681a      	ldr	r2, [r3, #0]
100416fa:	687b      	ldr	r3, [r7, #4]
100416fc:	681b      	ldr	r3, [r3, #0]
100416fe:	2101      	movs	r1, #1
10041700:	438a      	bics	r2, r1
10041702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10041704:	687b      	ldr	r3, [r7, #4]
10041706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041708:	223c      	movs	r2, #60	@ 0x3c
1004170a:	401a      	ands	r2, r3
1004170c:	687b      	ldr	r3, [r7, #4]
1004170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10041710:	2101      	movs	r1, #1
10041712:	4091      	lsls	r1, r2
10041714:	000a      	movs	r2, r1
10041716:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10041718:	687b      	ldr	r3, [r7, #4]
1004171a:	2225      	movs	r2, #37	@ 0x25
1004171c:	2101      	movs	r1, #1
1004171e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10041720:	687b      	ldr	r3, [r7, #4]
10041722:	2224      	movs	r2, #36	@ 0x24
10041724:	2100      	movs	r1, #0
10041726:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
10041728:	687b      	ldr	r3, [r7, #4]
1004172a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004172c:	2b00      	cmp	r3, #0
1004172e:	d004      	beq.n	1004173a <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
10041730:	687b      	ldr	r3, [r7, #4]
10041732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10041734:	687a      	ldr	r2, [r7, #4]
10041736:	0010      	movs	r0, r2
10041738:	4798      	blx	r3
    }
  }
  return status;
1004173a:	230f      	movs	r3, #15
1004173c:	18fb      	adds	r3, r7, r3
1004173e:	781b      	ldrb	r3, [r3, #0]
}
10041740:	0018      	movs	r0, r3
10041742:	46bd      	mov	sp, r7
10041744:	b004      	add	sp, #16
10041746:	bd80      	pop	{r7, pc}

10041748 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
10041748:	b580      	push	{r7, lr}
1004174a:	b082      	sub	sp, #8
1004174c:	af00      	add	r7, sp, #0
1004174e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
10041750:	687b      	ldr	r3, [r7, #4]
10041752:	2225      	movs	r2, #37	@ 0x25
10041754:	5c9b      	ldrb	r3, [r3, r2]
10041756:	b2db      	uxtb	r3, r3
}
10041758:	0018      	movs	r0, r3
1004175a:	46bd      	mov	sp, r7
1004175c:	b002      	add	sp, #8
1004175e:	bd80      	pop	{r7, pc}

10041760 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10041760:	b580      	push	{r7, lr}
10041762:	b086      	sub	sp, #24
10041764:	af00      	add	r7, sp, #0
10041766:	6078      	str	r0, [r7, #4]
10041768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004176a:	2300      	movs	r3, #0
1004176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004176e:	e194      	b.n	10041a9a <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10041770:	683b      	ldr	r3, [r7, #0]
10041772:	681b      	ldr	r3, [r3, #0]
10041774:	2101      	movs	r1, #1
10041776:	697a      	ldr	r2, [r7, #20]
10041778:	4091      	lsls	r1, r2
1004177a:	000a      	movs	r2, r1
1004177c:	4013      	ands	r3, r2
1004177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10041780:	68fb      	ldr	r3, [r7, #12]
10041782:	2b00      	cmp	r3, #0
10041784:	d100      	bne.n	10041788 <HAL_GPIO_Init+0x28>
10041786:	e185      	b.n	10041a94 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10041788:	683b      	ldr	r3, [r7, #0]
1004178a:	685b      	ldr	r3, [r3, #4]
1004178c:	2203      	movs	r2, #3
1004178e:	4013      	ands	r3, r2
10041790:	2b01      	cmp	r3, #1
10041792:	d005      	beq.n	100417a0 <HAL_GPIO_Init+0x40>
10041794:	683b      	ldr	r3, [r7, #0]
10041796:	685b      	ldr	r3, [r3, #4]
10041798:	2203      	movs	r2, #3
1004179a:	4013      	ands	r3, r2
1004179c:	2b02      	cmp	r3, #2
1004179e:	d130      	bne.n	10041802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
100417a0:	687b      	ldr	r3, [r7, #4]
100417a2:	689b      	ldr	r3, [r3, #8]
100417a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
100417a6:	697b      	ldr	r3, [r7, #20]
100417a8:	005b      	lsls	r3, r3, #1
100417aa:	2203      	movs	r2, #3
100417ac:	409a      	lsls	r2, r3
100417ae:	0013      	movs	r3, r2
100417b0:	43da      	mvns	r2, r3
100417b2:	693b      	ldr	r3, [r7, #16]
100417b4:	4013      	ands	r3, r2
100417b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
100417b8:	683b      	ldr	r3, [r7, #0]
100417ba:	68da      	ldr	r2, [r3, #12]
100417bc:	697b      	ldr	r3, [r7, #20]
100417be:	005b      	lsls	r3, r3, #1
100417c0:	409a      	lsls	r2, r3
100417c2:	0013      	movs	r3, r2
100417c4:	693a      	ldr	r2, [r7, #16]
100417c6:	4313      	orrs	r3, r2
100417c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
100417ca:	687b      	ldr	r3, [r7, #4]
100417cc:	693a      	ldr	r2, [r7, #16]
100417ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100417d0:	687b      	ldr	r3, [r7, #4]
100417d2:	685b      	ldr	r3, [r3, #4]
100417d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100417d6:	2201      	movs	r2, #1
100417d8:	697b      	ldr	r3, [r7, #20]
100417da:	409a      	lsls	r2, r3
100417dc:	0013      	movs	r3, r2
100417de:	43da      	mvns	r2, r3
100417e0:	693b      	ldr	r3, [r7, #16]
100417e2:	4013      	ands	r3, r2
100417e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
100417e6:	683b      	ldr	r3, [r7, #0]
100417e8:	685b      	ldr	r3, [r3, #4]
100417ea:	091b      	lsrs	r3, r3, #4
100417ec:	2201      	movs	r2, #1
100417ee:	401a      	ands	r2, r3
100417f0:	697b      	ldr	r3, [r7, #20]
100417f2:	409a      	lsls	r2, r3
100417f4:	0013      	movs	r3, r2
100417f6:	693a      	ldr	r2, [r7, #16]
100417f8:	4313      	orrs	r3, r2
100417fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
100417fc:	687b      	ldr	r3, [r7, #4]
100417fe:	693a      	ldr	r2, [r7, #16]
10041800:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10041802:	683b      	ldr	r3, [r7, #0]
10041804:	685b      	ldr	r3, [r3, #4]
10041806:	2203      	movs	r2, #3
10041808:	4013      	ands	r3, r2
1004180a:	2b03      	cmp	r3, #3
1004180c:	d017      	beq.n	1004183e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004180e:	687b      	ldr	r3, [r7, #4]
10041810:	68db      	ldr	r3, [r3, #12]
10041812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10041814:	697b      	ldr	r3, [r7, #20]
10041816:	005b      	lsls	r3, r3, #1
10041818:	2203      	movs	r2, #3
1004181a:	409a      	lsls	r2, r3
1004181c:	0013      	movs	r3, r2
1004181e:	43da      	mvns	r2, r3
10041820:	693b      	ldr	r3, [r7, #16]
10041822:	4013      	ands	r3, r2
10041824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10041826:	683b      	ldr	r3, [r7, #0]
10041828:	689a      	ldr	r2, [r3, #8]
1004182a:	697b      	ldr	r3, [r7, #20]
1004182c:	005b      	lsls	r3, r3, #1
1004182e:	409a      	lsls	r2, r3
10041830:	0013      	movs	r3, r2
10041832:	693a      	ldr	r2, [r7, #16]
10041834:	4313      	orrs	r3, r2
10041836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10041838:	687b      	ldr	r3, [r7, #4]
1004183a:	693a      	ldr	r2, [r7, #16]
1004183c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004183e:	683b      	ldr	r3, [r7, #0]
10041840:	685b      	ldr	r3, [r3, #4]
10041842:	2203      	movs	r2, #3
10041844:	4013      	ands	r3, r2
10041846:	2b02      	cmp	r3, #2
10041848:	d123      	bne.n	10041892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
1004184a:	697b      	ldr	r3, [r7, #20]
1004184c:	08da      	lsrs	r2, r3, #3
1004184e:	687b      	ldr	r3, [r7, #4]
10041850:	3208      	adds	r2, #8
10041852:	0092      	lsls	r2, r2, #2
10041854:	58d3      	ldr	r3, [r2, r3]
10041856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10041858:	697b      	ldr	r3, [r7, #20]
1004185a:	2207      	movs	r2, #7
1004185c:	4013      	ands	r3, r2
1004185e:	009b      	lsls	r3, r3, #2
10041860:	220f      	movs	r2, #15
10041862:	409a      	lsls	r2, r3
10041864:	0013      	movs	r3, r2
10041866:	43da      	mvns	r2, r3
10041868:	693b      	ldr	r3, [r7, #16]
1004186a:	4013      	ands	r3, r2
1004186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
1004186e:	683b      	ldr	r3, [r7, #0]
10041870:	691a      	ldr	r2, [r3, #16]
10041872:	697b      	ldr	r3, [r7, #20]
10041874:	2107      	movs	r1, #7
10041876:	400b      	ands	r3, r1
10041878:	009b      	lsls	r3, r3, #2
1004187a:	409a      	lsls	r2, r3
1004187c:	0013      	movs	r3, r2
1004187e:	693a      	ldr	r2, [r7, #16]
10041880:	4313      	orrs	r3, r2
10041882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10041884:	697b      	ldr	r3, [r7, #20]
10041886:	08da      	lsrs	r2, r3, #3
10041888:	687b      	ldr	r3, [r7, #4]
1004188a:	3208      	adds	r2, #8
1004188c:	0092      	lsls	r2, r2, #2
1004188e:	6939      	ldr	r1, [r7, #16]
10041890:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10041892:	687b      	ldr	r3, [r7, #4]
10041894:	681b      	ldr	r3, [r3, #0]
10041896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10041898:	697b      	ldr	r3, [r7, #20]
1004189a:	005b      	lsls	r3, r3, #1
1004189c:	2203      	movs	r2, #3
1004189e:	409a      	lsls	r2, r3
100418a0:	0013      	movs	r3, r2
100418a2:	43da      	mvns	r2, r3
100418a4:	693b      	ldr	r3, [r7, #16]
100418a6:	4013      	ands	r3, r2
100418a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
100418aa:	683b      	ldr	r3, [r7, #0]
100418ac:	685b      	ldr	r3, [r3, #4]
100418ae:	2203      	movs	r2, #3
100418b0:	401a      	ands	r2, r3
100418b2:	697b      	ldr	r3, [r7, #20]
100418b4:	005b      	lsls	r3, r3, #1
100418b6:	409a      	lsls	r2, r3
100418b8:	0013      	movs	r3, r2
100418ba:	693a      	ldr	r2, [r7, #16]
100418bc:	4313      	orrs	r3, r2
100418be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
100418c0:	687b      	ldr	r3, [r7, #4]
100418c2:	693a      	ldr	r2, [r7, #16]
100418c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
100418c6:	683b      	ldr	r3, [r7, #0]
100418c8:	685a      	ldr	r2, [r3, #4]
100418ca:	23c0      	movs	r3, #192	@ 0xc0
100418cc:	029b      	lsls	r3, r3, #10
100418ce:	4013      	ands	r3, r2
100418d0:	d100      	bne.n	100418d4 <HAL_GPIO_Init+0x174>
100418d2:	e0df      	b.n	10041a94 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
100418d4:	683b      	ldr	r3, [r7, #0]
100418d6:	685a      	ldr	r2, [r3, #4]
100418d8:	2380      	movs	r3, #128	@ 0x80
100418da:	02db      	lsls	r3, r3, #11
100418dc:	4013      	ands	r3, r2
100418de:	d031      	beq.n	10041944 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
100418e0:	2380      	movs	r3, #128	@ 0x80
100418e2:	05db      	lsls	r3, r3, #23
100418e4:	68db      	ldr	r3, [r3, #12]
100418e6:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
100418e8:	687a      	ldr	r2, [r7, #4]
100418ea:	2390      	movs	r3, #144	@ 0x90
100418ec:	05db      	lsls	r3, r3, #23
100418ee:	429a      	cmp	r2, r3
100418f0:	d111      	bne.n	10041916 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
100418f2:	2201      	movs	r2, #1
100418f4:	697b      	ldr	r3, [r7, #20]
100418f6:	409a      	lsls	r2, r3
100418f8:	0013      	movs	r3, r2
100418fa:	43db      	mvns	r3, r3
100418fc:	001a      	movs	r2, r3
100418fe:	693b      	ldr	r3, [r7, #16]
10041900:	4013      	ands	r3, r2
10041902:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10041904:	2201      	movs	r2, #1
10041906:	697b      	ldr	r3, [r7, #20]
10041908:	409a      	lsls	r2, r3
1004190a:	0013      	movs	r3, r2
1004190c:	001a      	movs	r2, r3
1004190e:	693b      	ldr	r3, [r7, #16]
10041910:	4313      	orrs	r3, r2
10041912:	613b      	str	r3, [r7, #16]
10041914:	e012      	b.n	1004193c <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10041916:	2201      	movs	r2, #1
10041918:	697b      	ldr	r3, [r7, #20]
1004191a:	409a      	lsls	r2, r3
1004191c:	0013      	movs	r3, r2
1004191e:	041b      	lsls	r3, r3, #16
10041920:	43db      	mvns	r3, r3
10041922:	001a      	movs	r2, r3
10041924:	693b      	ldr	r3, [r7, #16]
10041926:	4013      	ands	r3, r2
10041928:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004192a:	2201      	movs	r2, #1
1004192c:	697b      	ldr	r3, [r7, #20]
1004192e:	409a      	lsls	r2, r3
10041930:	0013      	movs	r3, r2
10041932:	041b      	lsls	r3, r3, #16
10041934:	001a      	movs	r2, r3
10041936:	693b      	ldr	r3, [r7, #16]
10041938:	4313      	orrs	r3, r2
1004193a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
1004193c:	2380      	movs	r3, #128	@ 0x80
1004193e:	05db      	lsls	r3, r3, #23
10041940:	693a      	ldr	r2, [r7, #16]
10041942:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10041944:	683b      	ldr	r3, [r7, #0]
10041946:	685a      	ldr	r2, [r3, #4]
10041948:	2380      	movs	r3, #128	@ 0x80
1004194a:	035b      	lsls	r3, r3, #13
1004194c:	4013      	ands	r3, r2
1004194e:	d031      	beq.n	100419b4 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
10041950:	2380      	movs	r3, #128	@ 0x80
10041952:	05db      	lsls	r3, r3, #23
10041954:	691b      	ldr	r3, [r3, #16]
10041956:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10041958:	687a      	ldr	r2, [r7, #4]
1004195a:	2390      	movs	r3, #144	@ 0x90
1004195c:	05db      	lsls	r3, r3, #23
1004195e:	429a      	cmp	r2, r3
10041960:	d111      	bne.n	10041986 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
10041962:	2201      	movs	r2, #1
10041964:	697b      	ldr	r3, [r7, #20]
10041966:	409a      	lsls	r2, r3
10041968:	0013      	movs	r3, r2
1004196a:	43db      	mvns	r3, r3
1004196c:	001a      	movs	r2, r3
1004196e:	693b      	ldr	r3, [r7, #16]
10041970:	4013      	ands	r3, r2
10041972:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10041974:	2201      	movs	r2, #1
10041976:	697b      	ldr	r3, [r7, #20]
10041978:	409a      	lsls	r2, r3
1004197a:	0013      	movs	r3, r2
1004197c:	001a      	movs	r2, r3
1004197e:	693b      	ldr	r3, [r7, #16]
10041980:	4313      	orrs	r3, r2
10041982:	613b      	str	r3, [r7, #16]
10041984:	e012      	b.n	100419ac <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10041986:	2201      	movs	r2, #1
10041988:	697b      	ldr	r3, [r7, #20]
1004198a:	409a      	lsls	r2, r3
1004198c:	0013      	movs	r3, r2
1004198e:	041b      	lsls	r3, r3, #16
10041990:	43db      	mvns	r3, r3
10041992:	001a      	movs	r2, r3
10041994:	693b      	ldr	r3, [r7, #16]
10041996:	4013      	ands	r3, r2
10041998:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004199a:	2201      	movs	r2, #1
1004199c:	697b      	ldr	r3, [r7, #20]
1004199e:	409a      	lsls	r2, r3
100419a0:	0013      	movs	r3, r2
100419a2:	041b      	lsls	r3, r3, #16
100419a4:	001a      	movs	r2, r3
100419a6:	693b      	ldr	r3, [r7, #16]
100419a8:	4313      	orrs	r3, r2
100419aa:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
100419ac:	2380      	movs	r3, #128	@ 0x80
100419ae:	05db      	lsls	r3, r3, #23
100419b0:	693a      	ldr	r2, [r7, #16]
100419b2:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
100419b4:	683b      	ldr	r3, [r7, #0]
100419b6:	685a      	ldr	r2, [r3, #4]
100419b8:	2380      	movs	r3, #128	@ 0x80
100419ba:	03db      	lsls	r3, r3, #15
100419bc:	4013      	ands	r3, r2
100419be:	d031      	beq.n	10041a24 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
100419c0:	2380      	movs	r3, #128	@ 0x80
100419c2:	05db      	lsls	r3, r3, #23
100419c4:	695b      	ldr	r3, [r3, #20]
100419c6:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100419c8:	687a      	ldr	r2, [r7, #4]
100419ca:	2390      	movs	r3, #144	@ 0x90
100419cc:	05db      	lsls	r3, r3, #23
100419ce:	429a      	cmp	r2, r3
100419d0:	d111      	bne.n	100419f6 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
100419d2:	2201      	movs	r2, #1
100419d4:	697b      	ldr	r3, [r7, #20]
100419d6:	409a      	lsls	r2, r3
100419d8:	0013      	movs	r3, r2
100419da:	43db      	mvns	r3, r3
100419dc:	001a      	movs	r2, r3
100419de:	693b      	ldr	r3, [r7, #16]
100419e0:	4013      	ands	r3, r2
100419e2:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100419e4:	2201      	movs	r2, #1
100419e6:	697b      	ldr	r3, [r7, #20]
100419e8:	409a      	lsls	r2, r3
100419ea:	0013      	movs	r3, r2
100419ec:	001a      	movs	r2, r3
100419ee:	693b      	ldr	r3, [r7, #16]
100419f0:	4313      	orrs	r3, r2
100419f2:	613b      	str	r3, [r7, #16]
100419f4:	e012      	b.n	10041a1c <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100419f6:	2201      	movs	r2, #1
100419f8:	697b      	ldr	r3, [r7, #20]
100419fa:	409a      	lsls	r2, r3
100419fc:	0013      	movs	r3, r2
100419fe:	041b      	lsls	r3, r3, #16
10041a00:	43db      	mvns	r3, r3
10041a02:	001a      	movs	r2, r3
10041a04:	693b      	ldr	r3, [r7, #16]
10041a06:	4013      	ands	r3, r2
10041a08:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10041a0a:	2201      	movs	r2, #1
10041a0c:	697b      	ldr	r3, [r7, #20]
10041a0e:	409a      	lsls	r2, r3
10041a10:	0013      	movs	r3, r2
10041a12:	041b      	lsls	r3, r3, #16
10041a14:	001a      	movs	r2, r3
10041a16:	693b      	ldr	r3, [r7, #16]
10041a18:	4313      	orrs	r3, r2
10041a1a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10041a1c:	2380      	movs	r3, #128	@ 0x80
10041a1e:	05db      	lsls	r3, r3, #23
10041a20:	693a      	ldr	r2, [r7, #16]
10041a22:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10041a24:	683b      	ldr	r3, [r7, #0]
10041a26:	685a      	ldr	r2, [r3, #4]
10041a28:	2380      	movs	r3, #128	@ 0x80
10041a2a:	025b      	lsls	r3, r3, #9
10041a2c:	4013      	ands	r3, r2
10041a2e:	d031      	beq.n	10041a94 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10041a30:	2380      	movs	r3, #128	@ 0x80
10041a32:	05db      	lsls	r3, r3, #23
10041a34:	699b      	ldr	r3, [r3, #24]
10041a36:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10041a38:	687a      	ldr	r2, [r7, #4]
10041a3a:	2390      	movs	r3, #144	@ 0x90
10041a3c:	05db      	lsls	r3, r3, #23
10041a3e:	429a      	cmp	r2, r3
10041a40:	d111      	bne.n	10041a66 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
10041a42:	2201      	movs	r2, #1
10041a44:	697b      	ldr	r3, [r7, #20]
10041a46:	409a      	lsls	r2, r3
10041a48:	0013      	movs	r3, r2
10041a4a:	43db      	mvns	r3, r3
10041a4c:	001a      	movs	r2, r3
10041a4e:	693b      	ldr	r3, [r7, #16]
10041a50:	4013      	ands	r3, r2
10041a52:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10041a54:	2201      	movs	r2, #1
10041a56:	697b      	ldr	r3, [r7, #20]
10041a58:	409a      	lsls	r2, r3
10041a5a:	0013      	movs	r3, r2
10041a5c:	001a      	movs	r2, r3
10041a5e:	693b      	ldr	r3, [r7, #16]
10041a60:	4313      	orrs	r3, r2
10041a62:	613b      	str	r3, [r7, #16]
10041a64:	e012      	b.n	10041a8c <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10041a66:	2201      	movs	r2, #1
10041a68:	697b      	ldr	r3, [r7, #20]
10041a6a:	409a      	lsls	r2, r3
10041a6c:	0013      	movs	r3, r2
10041a6e:	041b      	lsls	r3, r3, #16
10041a70:	43db      	mvns	r3, r3
10041a72:	001a      	movs	r2, r3
10041a74:	693b      	ldr	r3, [r7, #16]
10041a76:	4013      	ands	r3, r2
10041a78:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10041a7a:	2201      	movs	r2, #1
10041a7c:	697b      	ldr	r3, [r7, #20]
10041a7e:	409a      	lsls	r2, r3
10041a80:	0013      	movs	r3, r2
10041a82:	041b      	lsls	r3, r3, #16
10041a84:	001a      	movs	r2, r3
10041a86:	693b      	ldr	r3, [r7, #16]
10041a88:	4313      	orrs	r3, r2
10041a8a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10041a8c:	2380      	movs	r3, #128	@ 0x80
10041a8e:	05db      	lsls	r3, r3, #23
10041a90:	693a      	ldr	r2, [r7, #16]
10041a92:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10041a94:	697b      	ldr	r3, [r7, #20]
10041a96:	3301      	adds	r3, #1
10041a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10041a9a:	683b      	ldr	r3, [r7, #0]
10041a9c:	681a      	ldr	r2, [r3, #0]
10041a9e:	697b      	ldr	r3, [r7, #20]
10041aa0:	40da      	lsrs	r2, r3
10041aa2:	1e13      	subs	r3, r2, #0
10041aa4:	d000      	beq.n	10041aa8 <HAL_GPIO_Init+0x348>
10041aa6:	e663      	b.n	10041770 <HAL_GPIO_Init+0x10>
  }
}
10041aa8:	46c0      	nop			@ (mov r8, r8)
10041aaa:	46c0      	nop			@ (mov r8, r8)
10041aac:	46bd      	mov	sp, r7
10041aae:	b006      	add	sp, #24
10041ab0:	bd80      	pop	{r7, pc}

10041ab2 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10041ab2:	b580      	push	{r7, lr}
10041ab4:	b084      	sub	sp, #16
10041ab6:	af00      	add	r7, sp, #0
10041ab8:	6078      	str	r0, [r7, #4]
10041aba:	000a      	movs	r2, r1
10041abc:	1cbb      	adds	r3, r7, #2
10041abe:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10041ac0:	687b      	ldr	r3, [r7, #4]
10041ac2:	691b      	ldr	r3, [r3, #16]
10041ac4:	1cba      	adds	r2, r7, #2
10041ac6:	8812      	ldrh	r2, [r2, #0]
10041ac8:	4013      	ands	r3, r2
10041aca:	d004      	beq.n	10041ad6 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10041acc:	230f      	movs	r3, #15
10041ace:	18fb      	adds	r3, r7, r3
10041ad0:	2201      	movs	r2, #1
10041ad2:	701a      	strb	r2, [r3, #0]
10041ad4:	e003      	b.n	10041ade <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
10041ad6:	230f      	movs	r3, #15
10041ad8:	18fb      	adds	r3, r7, r3
10041ada:	2200      	movs	r2, #0
10041adc:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10041ade:	230f      	movs	r3, #15
10041ae0:	18fb      	adds	r3, r7, r3
10041ae2:	781b      	ldrb	r3, [r3, #0]
}
10041ae4:	0018      	movs	r0, r3
10041ae6:	46bd      	mov	sp, r7
10041ae8:	b004      	add	sp, #16
10041aea:	bd80      	pop	{r7, pc}

10041aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10041aec:	b580      	push	{r7, lr}
10041aee:	b082      	sub	sp, #8
10041af0:	af00      	add	r7, sp, #0
10041af2:	6078      	str	r0, [r7, #4]
10041af4:	0008      	movs	r0, r1
10041af6:	0011      	movs	r1, r2
10041af8:	1cbb      	adds	r3, r7, #2
10041afa:	1c02      	adds	r2, r0, #0
10041afc:	801a      	strh	r2, [r3, #0]
10041afe:	1c7b      	adds	r3, r7, #1
10041b00:	1c0a      	adds	r2, r1, #0
10041b02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10041b04:	1c7b      	adds	r3, r7, #1
10041b06:	781b      	ldrb	r3, [r3, #0]
10041b08:	2b00      	cmp	r3, #0
10041b0a:	d004      	beq.n	10041b16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10041b0c:	1cbb      	adds	r3, r7, #2
10041b0e:	881a      	ldrh	r2, [r3, #0]
10041b10:	687b      	ldr	r3, [r7, #4]
10041b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10041b14:	e003      	b.n	10041b1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10041b16:	1cbb      	adds	r3, r7, #2
10041b18:	881a      	ldrh	r2, [r3, #0]
10041b1a:	687b      	ldr	r3, [r7, #4]
10041b1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
10041b1e:	46c0      	nop			@ (mov r8, r8)
10041b20:	46bd      	mov	sp, r7
10041b22:	b002      	add	sp, #8
10041b24:	bd80      	pop	{r7, pc}

10041b26 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral for STM32WB0x family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10041b26:	b580      	push	{r7, lr}
10041b28:	b084      	sub	sp, #16
10041b2a:	af00      	add	r7, sp, #0
10041b2c:	6078      	str	r0, [r7, #4]
10041b2e:	000a      	movs	r2, r1
10041b30:	1cbb      	adds	r3, r7, #2
10041b32:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
10041b34:	687b      	ldr	r3, [r7, #4]
10041b36:	695b      	ldr	r3, [r3, #20]
10041b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
10041b3a:	1cbb      	adds	r3, r7, #2
10041b3c:	881b      	ldrh	r3, [r3, #0]
10041b3e:	68fa      	ldr	r2, [r7, #12]
10041b40:	4013      	ands	r3, r2
10041b42:	041a      	lsls	r2, r3, #16
10041b44:	68fb      	ldr	r3, [r7, #12]
10041b46:	43db      	mvns	r3, r3
10041b48:	1cb9      	adds	r1, r7, #2
10041b4a:	8809      	ldrh	r1, [r1, #0]
10041b4c:	400b      	ands	r3, r1
10041b4e:	431a      	orrs	r2, r3
10041b50:	687b      	ldr	r3, [r7, #4]
10041b52:	619a      	str	r2, [r3, #24]
}
10041b54:	46c0      	nop			@ (mov r8, r8)
10041b56:	46bd      	mov	sp, r7
10041b58:	b004      	add	sp, #16
10041b5a:	bd80      	pop	{r7, pc}

10041b5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
10041b5c:	b580      	push	{r7, lr}
10041b5e:	b084      	sub	sp, #16
10041b60:	af00      	add	r7, sp, #0
10041b62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10041b64:	687b      	ldr	r3, [r7, #4]
10041b66:	681b      	ldr	r3, [r3, #0]
10041b68:	699b      	ldr	r3, [r3, #24]
10041b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10041b6c:	687b      	ldr	r3, [r7, #4]
10041b6e:	681b      	ldr	r3, [r3, #0]
10041b70:	681b      	ldr	r3, [r3, #0]
10041b72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10041b74:	687b      	ldr	r3, [r7, #4]
10041b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10041b78:	2b00      	cmp	r3, #0
10041b7a:	d005      	beq.n	10041b88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
10041b7c:	687b      	ldr	r3, [r7, #4]
10041b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10041b80:	68ba      	ldr	r2, [r7, #8]
10041b82:	68f9      	ldr	r1, [r7, #12]
10041b84:	6878      	ldr	r0, [r7, #4]
10041b86:	4798      	blx	r3
  }
}
10041b88:	46c0      	nop			@ (mov r8, r8)
10041b8a:	46bd      	mov	sp, r7
10041b8c:	b004      	add	sp, #16
10041b8e:	bd80      	pop	{r7, pc}

10041b90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
10041b90:	b580      	push	{r7, lr}
10041b92:	b086      	sub	sp, #24
10041b94:	af00      	add	r7, sp, #0
10041b96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10041b98:	687b      	ldr	r3, [r7, #4]
10041b9a:	681b      	ldr	r3, [r3, #0]
10041b9c:	699b      	ldr	r3, [r3, #24]
10041b9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10041ba0:	687b      	ldr	r3, [r7, #4]
10041ba2:	681b      	ldr	r3, [r3, #0]
10041ba4:	681b      	ldr	r3, [r3, #0]
10041ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10041ba8:	697a      	ldr	r2, [r7, #20]
10041baa:	2380      	movs	r3, #128	@ 0x80
10041bac:	005b      	lsls	r3, r3, #1
10041bae:	4013      	ands	r3, r2
10041bb0:	d00e      	beq.n	10041bd0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10041bb2:	693b      	ldr	r3, [r7, #16]
10041bb4:	2280      	movs	r2, #128	@ 0x80
10041bb6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10041bb8:	d00a      	beq.n	10041bd0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10041bba:	687b      	ldr	r3, [r7, #4]
10041bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041bbe:	2201      	movs	r2, #1
10041bc0:	431a      	orrs	r2, r3
10041bc2:	687b      	ldr	r3, [r7, #4]
10041bc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10041bc6:	687b      	ldr	r3, [r7, #4]
10041bc8:	681b      	ldr	r3, [r3, #0]
10041bca:	2280      	movs	r2, #128	@ 0x80
10041bcc:	0052      	lsls	r2, r2, #1
10041bce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10041bd0:	697a      	ldr	r2, [r7, #20]
10041bd2:	2380      	movs	r3, #128	@ 0x80
10041bd4:	00db      	lsls	r3, r3, #3
10041bd6:	4013      	ands	r3, r2
10041bd8:	d00e      	beq.n	10041bf8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10041bda:	693b      	ldr	r3, [r7, #16]
10041bdc:	2280      	movs	r2, #128	@ 0x80
10041bde:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10041be0:	d00a      	beq.n	10041bf8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10041be2:	687b      	ldr	r3, [r7, #4]
10041be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041be6:	2208      	movs	r2, #8
10041be8:	431a      	orrs	r2, r3
10041bea:	687b      	ldr	r3, [r7, #4]
10041bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10041bee:	687b      	ldr	r3, [r7, #4]
10041bf0:	681b      	ldr	r3, [r3, #0]
10041bf2:	2280      	movs	r2, #128	@ 0x80
10041bf4:	00d2      	lsls	r2, r2, #3
10041bf6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10041bf8:	697a      	ldr	r2, [r7, #20]
10041bfa:	2380      	movs	r3, #128	@ 0x80
10041bfc:	009b      	lsls	r3, r3, #2
10041bfe:	4013      	ands	r3, r2
10041c00:	d00e      	beq.n	10041c20 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10041c02:	693b      	ldr	r3, [r7, #16]
10041c04:	2280      	movs	r2, #128	@ 0x80
10041c06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10041c08:	d00a      	beq.n	10041c20 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10041c0a:	687b      	ldr	r3, [r7, #4]
10041c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041c0e:	2202      	movs	r2, #2
10041c10:	431a      	orrs	r2, r3
10041c12:	687b      	ldr	r3, [r7, #4]
10041c14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10041c16:	687b      	ldr	r3, [r7, #4]
10041c18:	681b      	ldr	r3, [r3, #0]
10041c1a:	2280      	movs	r2, #128	@ 0x80
10041c1c:	0092      	lsls	r2, r2, #2
10041c1e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10041c20:	687b      	ldr	r3, [r7, #4]
10041c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041c24:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10041c26:	68fb      	ldr	r3, [r7, #12]
10041c28:	220b      	movs	r2, #11
10041c2a:	4013      	ands	r3, r2
10041c2c:	d005      	beq.n	10041c3a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
10041c2e:	68fa      	ldr	r2, [r7, #12]
10041c30:	687b      	ldr	r3, [r7, #4]
10041c32:	0011      	movs	r1, r2
10041c34:	0018      	movs	r0, r3
10041c36:	f000 fc25 	bl	10042484 <I2C_ITError>
  }
}
10041c3a:	46c0      	nop			@ (mov r8, r8)
10041c3c:	46bd      	mov	sp, r7
10041c3e:	b006      	add	sp, #24
10041c40:	bd80      	pop	{r7, pc}

10041c42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10041c42:	b580      	push	{r7, lr}
10041c44:	b082      	sub	sp, #8
10041c46:	af00      	add	r7, sp, #0
10041c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
10041c4a:	46c0      	nop			@ (mov r8, r8)
10041c4c:	46bd      	mov	sp, r7
10041c4e:	b002      	add	sp, #8
10041c50:	bd80      	pop	{r7, pc}

10041c52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10041c52:	b580      	push	{r7, lr}
10041c54:	b082      	sub	sp, #8
10041c56:	af00      	add	r7, sp, #0
10041c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
10041c5a:	46c0      	nop			@ (mov r8, r8)
10041c5c:	46bd      	mov	sp, r7
10041c5e:	b002      	add	sp, #8
10041c60:	bd80      	pop	{r7, pc}

10041c62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10041c62:	b580      	push	{r7, lr}
10041c64:	b082      	sub	sp, #8
10041c66:	af00      	add	r7, sp, #0
10041c68:	6078      	str	r0, [r7, #4]
10041c6a:	0008      	movs	r0, r1
10041c6c:	0011      	movs	r1, r2
10041c6e:	1cfb      	adds	r3, r7, #3
10041c70:	1c02      	adds	r2, r0, #0
10041c72:	701a      	strb	r2, [r3, #0]
10041c74:	003b      	movs	r3, r7
10041c76:	1c0a      	adds	r2, r1, #0
10041c78:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
10041c7a:	46c0      	nop			@ (mov r8, r8)
10041c7c:	46bd      	mov	sp, r7
10041c7e:	b002      	add	sp, #8
10041c80:	bd80      	pop	{r7, pc}

10041c82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10041c82:	b580      	push	{r7, lr}
10041c84:	b082      	sub	sp, #8
10041c86:	af00      	add	r7, sp, #0
10041c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10041c8a:	46c0      	nop			@ (mov r8, r8)
10041c8c:	46bd      	mov	sp, r7
10041c8e:	b002      	add	sp, #8
10041c90:	bd80      	pop	{r7, pc}

10041c92 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
10041c92:	b580      	push	{r7, lr}
10041c94:	b082      	sub	sp, #8
10041c96:	af00      	add	r7, sp, #0
10041c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
10041c9a:	46c0      	nop			@ (mov r8, r8)
10041c9c:	46bd      	mov	sp, r7
10041c9e:	b002      	add	sp, #8
10041ca0:	bd80      	pop	{r7, pc}

10041ca2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10041ca2:	b580      	push	{r7, lr}
10041ca4:	b082      	sub	sp, #8
10041ca6:	af00      	add	r7, sp, #0
10041ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10041caa:	46c0      	nop			@ (mov r8, r8)
10041cac:	46bd      	mov	sp, r7
10041cae:	b002      	add	sp, #8
10041cb0:	bd80      	pop	{r7, pc}
	...

10041cb4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10041cb4:	b580      	push	{r7, lr}
10041cb6:	b086      	sub	sp, #24
10041cb8:	af00      	add	r7, sp, #0
10041cba:	60f8      	str	r0, [r7, #12]
10041cbc:	60b9      	str	r1, [r7, #8]
10041cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10041cc0:	68fb      	ldr	r3, [r7, #12]
10041cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10041cc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10041cc6:	68bb      	ldr	r3, [r7, #8]
10041cc8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
10041cca:	68fb      	ldr	r3, [r7, #12]
10041ccc:	2240      	movs	r2, #64	@ 0x40
10041cce:	5c9b      	ldrb	r3, [r3, r2]
10041cd0:	2b01      	cmp	r3, #1
10041cd2:	d101      	bne.n	10041cd8 <I2C_Slave_ISR_IT+0x24>
10041cd4:	2302      	movs	r3, #2
10041cd6:	e0e7      	b.n	10041ea8 <I2C_Slave_ISR_IT+0x1f4>
10041cd8:	68fb      	ldr	r3, [r7, #12]
10041cda:	2240      	movs	r2, #64	@ 0x40
10041cdc:	2101      	movs	r1, #1
10041cde:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10041ce0:	693b      	ldr	r3, [r7, #16]
10041ce2:	2220      	movs	r2, #32
10041ce4:	4013      	ands	r3, r2
10041ce6:	d00a      	beq.n	10041cfe <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10041ce8:	687b      	ldr	r3, [r7, #4]
10041cea:	2220      	movs	r2, #32
10041cec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10041cee:	d006      	beq.n	10041cfe <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10041cf0:	693a      	ldr	r2, [r7, #16]
10041cf2:	68fb      	ldr	r3, [r7, #12]
10041cf4:	0011      	movs	r1, r2
10041cf6:	0018      	movs	r0, r3
10041cf8:	f000 f9e4 	bl	100420c4 <I2C_ITSlaveCplt>
10041cfc:	e0cf      	b.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10041cfe:	693b      	ldr	r3, [r7, #16]
10041d00:	2210      	movs	r2, #16
10041d02:	4013      	ands	r3, r2
10041d04:	d052      	beq.n	10041dac <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10041d06:	687b      	ldr	r3, [r7, #4]
10041d08:	2210      	movs	r2, #16
10041d0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10041d0c:	d04e      	beq.n	10041dac <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10041d0e:	68fb      	ldr	r3, [r7, #12]
10041d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041d12:	b29b      	uxth	r3, r3
10041d14:	2b00      	cmp	r3, #0
10041d16:	d12d      	bne.n	10041d74 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10041d18:	68fb      	ldr	r3, [r7, #12]
10041d1a:	2241      	movs	r2, #65	@ 0x41
10041d1c:	5c9b      	ldrb	r3, [r3, r2]
10041d1e:	b2db      	uxtb	r3, r3
10041d20:	2b28      	cmp	r3, #40	@ 0x28
10041d22:	d10b      	bne.n	10041d3c <I2C_Slave_ISR_IT+0x88>
10041d24:	697a      	ldr	r2, [r7, #20]
10041d26:	2380      	movs	r3, #128	@ 0x80
10041d28:	049b      	lsls	r3, r3, #18
10041d2a:	429a      	cmp	r2, r3
10041d2c:	d106      	bne.n	10041d3c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10041d2e:	693a      	ldr	r2, [r7, #16]
10041d30:	68fb      	ldr	r3, [r7, #12]
10041d32:	0011      	movs	r1, r2
10041d34:	0018      	movs	r0, r3
10041d36:	f000 fb4d 	bl	100423d4 <I2C_ITListenCplt>
10041d3a:	e036      	b.n	10041daa <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10041d3c:	68fb      	ldr	r3, [r7, #12]
10041d3e:	2241      	movs	r2, #65	@ 0x41
10041d40:	5c9b      	ldrb	r3, [r3, r2]
10041d42:	b2db      	uxtb	r3, r3
10041d44:	2b29      	cmp	r3, #41	@ 0x29
10041d46:	d110      	bne.n	10041d6a <I2C_Slave_ISR_IT+0xb6>
10041d48:	697b      	ldr	r3, [r7, #20]
10041d4a:	4a59      	ldr	r2, [pc, #356]	@ (10041eb0 <I2C_Slave_ISR_IT+0x1fc>)
10041d4c:	4293      	cmp	r3, r2
10041d4e:	d00c      	beq.n	10041d6a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10041d50:	68fb      	ldr	r3, [r7, #12]
10041d52:	681b      	ldr	r3, [r3, #0]
10041d54:	2210      	movs	r2, #16
10041d56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10041d58:	68fb      	ldr	r3, [r7, #12]
10041d5a:	0018      	movs	r0, r3
10041d5c:	f000 fcbd 	bl	100426da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10041d60:	68fb      	ldr	r3, [r7, #12]
10041d62:	0018      	movs	r0, r3
10041d64:	f000 f94a 	bl	10041ffc <I2C_ITSlaveSeqCplt>
10041d68:	e01f      	b.n	10041daa <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10041d6a:	68fb      	ldr	r3, [r7, #12]
10041d6c:	681b      	ldr	r3, [r3, #0]
10041d6e:	2210      	movs	r2, #16
10041d70:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10041d72:	e091      	b.n	10041e98 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10041d74:	68fb      	ldr	r3, [r7, #12]
10041d76:	681b      	ldr	r3, [r3, #0]
10041d78:	2210      	movs	r2, #16
10041d7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10041d7c:	68fb      	ldr	r3, [r7, #12]
10041d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041d80:	2204      	movs	r2, #4
10041d82:	431a      	orrs	r2, r3
10041d84:	68fb      	ldr	r3, [r7, #12]
10041d86:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10041d88:	697b      	ldr	r3, [r7, #20]
10041d8a:	2b00      	cmp	r3, #0
10041d8c:	d005      	beq.n	10041d9a <I2C_Slave_ISR_IT+0xe6>
10041d8e:	697a      	ldr	r2, [r7, #20]
10041d90:	2380      	movs	r3, #128	@ 0x80
10041d92:	045b      	lsls	r3, r3, #17
10041d94:	429a      	cmp	r2, r3
10041d96:	d000      	beq.n	10041d9a <I2C_Slave_ISR_IT+0xe6>
10041d98:	e07e      	b.n	10041e98 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10041d9a:	68fb      	ldr	r3, [r7, #12]
10041d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10041d9e:	68fb      	ldr	r3, [r7, #12]
10041da0:	0011      	movs	r1, r2
10041da2:	0018      	movs	r0, r3
10041da4:	f000 fb6e 	bl	10042484 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10041da8:	e076      	b.n	10041e98 <I2C_Slave_ISR_IT+0x1e4>
10041daa:	e075      	b.n	10041e98 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10041dac:	693b      	ldr	r3, [r7, #16]
10041dae:	2204      	movs	r2, #4
10041db0:	4013      	ands	r3, r2
10041db2:	d02f      	beq.n	10041e14 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10041db4:	687b      	ldr	r3, [r7, #4]
10041db6:	2204      	movs	r2, #4
10041db8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10041dba:	d02b      	beq.n	10041e14 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
10041dbc:	68fb      	ldr	r3, [r7, #12]
10041dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041dc0:	b29b      	uxth	r3, r3
10041dc2:	2b00      	cmp	r3, #0
10041dc4:	d018      	beq.n	10041df8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10041dc6:	68fb      	ldr	r3, [r7, #12]
10041dc8:	681b      	ldr	r3, [r3, #0]
10041dca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10041dcc:	68fb      	ldr	r3, [r7, #12]
10041dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041dd0:	b2d2      	uxtb	r2, r2
10041dd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10041dd4:	68fb      	ldr	r3, [r7, #12]
10041dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041dd8:	1c5a      	adds	r2, r3, #1
10041dda:	68fb      	ldr	r3, [r7, #12]
10041ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10041dde:	68fb      	ldr	r3, [r7, #12]
10041de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041de2:	3b01      	subs	r3, #1
10041de4:	b29a      	uxth	r2, r3
10041de6:	68fb      	ldr	r3, [r7, #12]
10041de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10041dea:	68fb      	ldr	r3, [r7, #12]
10041dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041dee:	b29b      	uxth	r3, r3
10041df0:	3b01      	subs	r3, #1
10041df2:	b29a      	uxth	r2, r3
10041df4:	68fb      	ldr	r3, [r7, #12]
10041df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10041df8:	68fb      	ldr	r3, [r7, #12]
10041dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041dfc:	b29b      	uxth	r3, r3
10041dfe:	2b00      	cmp	r3, #0
10041e00:	d14c      	bne.n	10041e9c <I2C_Slave_ISR_IT+0x1e8>
10041e02:	697b      	ldr	r3, [r7, #20]
10041e04:	4a2a      	ldr	r2, [pc, #168]	@ (10041eb0 <I2C_Slave_ISR_IT+0x1fc>)
10041e06:	4293      	cmp	r3, r2
10041e08:	d048      	beq.n	10041e9c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10041e0a:	68fb      	ldr	r3, [r7, #12]
10041e0c:	0018      	movs	r0, r3
10041e0e:	f000 f8f5 	bl	10041ffc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10041e12:	e043      	b.n	10041e9c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10041e14:	693b      	ldr	r3, [r7, #16]
10041e16:	2208      	movs	r2, #8
10041e18:	4013      	ands	r3, r2
10041e1a:	d00a      	beq.n	10041e32 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10041e1c:	687b      	ldr	r3, [r7, #4]
10041e1e:	2208      	movs	r2, #8
10041e20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10041e22:	d006      	beq.n	10041e32 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10041e24:	693a      	ldr	r2, [r7, #16]
10041e26:	68fb      	ldr	r3, [r7, #12]
10041e28:	0011      	movs	r1, r2
10041e2a:	0018      	movs	r0, r3
10041e2c:	f000 f842 	bl	10041eb4 <I2C_ITAddrCplt>
10041e30:	e035      	b.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10041e32:	693b      	ldr	r3, [r7, #16]
10041e34:	2202      	movs	r2, #2
10041e36:	4013      	ands	r3, r2
10041e38:	d031      	beq.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10041e3a:	687b      	ldr	r3, [r7, #4]
10041e3c:	2202      	movs	r2, #2
10041e3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10041e40:	d02d      	beq.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10041e42:	68fb      	ldr	r3, [r7, #12]
10041e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041e46:	b29b      	uxth	r3, r3
10041e48:	2b00      	cmp	r3, #0
10041e4a:	d018      	beq.n	10041e7e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10041e4c:	68fb      	ldr	r3, [r7, #12]
10041e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041e50:	781a      	ldrb	r2, [r3, #0]
10041e52:	68fb      	ldr	r3, [r7, #12]
10041e54:	681b      	ldr	r3, [r3, #0]
10041e56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10041e58:	68fb      	ldr	r3, [r7, #12]
10041e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041e5c:	1c5a      	adds	r2, r3, #1
10041e5e:	68fb      	ldr	r3, [r7, #12]
10041e60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10041e62:	68fb      	ldr	r3, [r7, #12]
10041e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041e66:	b29b      	uxth	r3, r3
10041e68:	3b01      	subs	r3, #1
10041e6a:	b29a      	uxth	r2, r3
10041e6c:	68fb      	ldr	r3, [r7, #12]
10041e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10041e70:	68fb      	ldr	r3, [r7, #12]
10041e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041e74:	3b01      	subs	r3, #1
10041e76:	b29a      	uxth	r2, r3
10041e78:	68fb      	ldr	r3, [r7, #12]
10041e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
10041e7c:	e00f      	b.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10041e7e:	697a      	ldr	r2, [r7, #20]
10041e80:	2380      	movs	r3, #128	@ 0x80
10041e82:	045b      	lsls	r3, r3, #17
10041e84:	429a      	cmp	r2, r3
10041e86:	d002      	beq.n	10041e8e <I2C_Slave_ISR_IT+0x1da>
10041e88:	697b      	ldr	r3, [r7, #20]
10041e8a:	2b00      	cmp	r3, #0
10041e8c:	d107      	bne.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10041e8e:	68fb      	ldr	r3, [r7, #12]
10041e90:	0018      	movs	r0, r3
10041e92:	f000 f8b3 	bl	10041ffc <I2C_ITSlaveSeqCplt>
10041e96:	e002      	b.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
10041e98:	46c0      	nop			@ (mov r8, r8)
10041e9a:	e000      	b.n	10041e9e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
10041e9c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10041e9e:	68fb      	ldr	r3, [r7, #12]
10041ea0:	2240      	movs	r2, #64	@ 0x40
10041ea2:	2100      	movs	r1, #0
10041ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10041ea6:	2300      	movs	r3, #0
}
10041ea8:	0018      	movs	r0, r3
10041eaa:	46bd      	mov	sp, r7
10041eac:	b006      	add	sp, #24
10041eae:	bd80      	pop	{r7, pc}
10041eb0:	ffff0000 	.word	0xffff0000

10041eb4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10041eb4:	b5b0      	push	{r4, r5, r7, lr}
10041eb6:	b084      	sub	sp, #16
10041eb8:	af00      	add	r7, sp, #0
10041eba:	6078      	str	r0, [r7, #4]
10041ebc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10041ebe:	687b      	ldr	r3, [r7, #4]
10041ec0:	2241      	movs	r2, #65	@ 0x41
10041ec2:	5c9b      	ldrb	r3, [r3, r2]
10041ec4:	b2db      	uxtb	r3, r3
10041ec6:	001a      	movs	r2, r3
10041ec8:	2328      	movs	r3, #40	@ 0x28
10041eca:	4013      	ands	r3, r2
10041ecc:	2b28      	cmp	r3, #40	@ 0x28
10041ece:	d000      	beq.n	10041ed2 <I2C_ITAddrCplt+0x1e>
10041ed0:	e088      	b.n	10041fe4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10041ed2:	687b      	ldr	r3, [r7, #4]
10041ed4:	681b      	ldr	r3, [r3, #0]
10041ed6:	699b      	ldr	r3, [r3, #24]
10041ed8:	0c1b      	lsrs	r3, r3, #16
10041eda:	b2da      	uxtb	r2, r3
10041edc:	250f      	movs	r5, #15
10041ede:	197b      	adds	r3, r7, r5
10041ee0:	2101      	movs	r1, #1
10041ee2:	400a      	ands	r2, r1
10041ee4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10041ee6:	687b      	ldr	r3, [r7, #4]
10041ee8:	681b      	ldr	r3, [r3, #0]
10041eea:	699b      	ldr	r3, [r3, #24]
10041eec:	0c1b      	lsrs	r3, r3, #16
10041eee:	b29a      	uxth	r2, r3
10041ef0:	200c      	movs	r0, #12
10041ef2:	183b      	adds	r3, r7, r0
10041ef4:	21fe      	movs	r1, #254	@ 0xfe
10041ef6:	400a      	ands	r2, r1
10041ef8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10041efa:	687b      	ldr	r3, [r7, #4]
10041efc:	681b      	ldr	r3, [r3, #0]
10041efe:	689b      	ldr	r3, [r3, #8]
10041f00:	b29a      	uxth	r2, r3
10041f02:	240a      	movs	r4, #10
10041f04:	193b      	adds	r3, r7, r4
10041f06:	0592      	lsls	r2, r2, #22
10041f08:	0d92      	lsrs	r2, r2, #22
10041f0a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10041f0c:	687b      	ldr	r3, [r7, #4]
10041f0e:	681b      	ldr	r3, [r3, #0]
10041f10:	68db      	ldr	r3, [r3, #12]
10041f12:	b29a      	uxth	r2, r3
10041f14:	2308      	movs	r3, #8
10041f16:	18fb      	adds	r3, r7, r3
10041f18:	21fe      	movs	r1, #254	@ 0xfe
10041f1a:	400a      	ands	r2, r1
10041f1c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10041f1e:	687b      	ldr	r3, [r7, #4]
10041f20:	68db      	ldr	r3, [r3, #12]
10041f22:	2b02      	cmp	r3, #2
10041f24:	d148      	bne.n	10041fb8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
10041f26:	0021      	movs	r1, r4
10041f28:	187b      	adds	r3, r7, r1
10041f2a:	881b      	ldrh	r3, [r3, #0]
10041f2c:	09db      	lsrs	r3, r3, #7
10041f2e:	b29a      	uxth	r2, r3
10041f30:	183b      	adds	r3, r7, r0
10041f32:	881b      	ldrh	r3, [r3, #0]
10041f34:	4053      	eors	r3, r2
10041f36:	b29b      	uxth	r3, r3
10041f38:	001a      	movs	r2, r3
10041f3a:	2306      	movs	r3, #6
10041f3c:	4013      	ands	r3, r2
10041f3e:	d120      	bne.n	10041f82 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
10041f40:	183b      	adds	r3, r7, r0
10041f42:	187a      	adds	r2, r7, r1
10041f44:	8812      	ldrh	r2, [r2, #0]
10041f46:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
10041f48:	687b      	ldr	r3, [r7, #4]
10041f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10041f4c:	1c5a      	adds	r2, r3, #1
10041f4e:	687b      	ldr	r3, [r7, #4]
10041f50:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10041f52:	687b      	ldr	r3, [r7, #4]
10041f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10041f56:	2b02      	cmp	r3, #2
10041f58:	d14c      	bne.n	10041ff4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
10041f5a:	687b      	ldr	r3, [r7, #4]
10041f5c:	2200      	movs	r2, #0
10041f5e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10041f60:	687b      	ldr	r3, [r7, #4]
10041f62:	681b      	ldr	r3, [r3, #0]
10041f64:	2208      	movs	r2, #8
10041f66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10041f68:	687b      	ldr	r3, [r7, #4]
10041f6a:	2240      	movs	r2, #64	@ 0x40
10041f6c:	2100      	movs	r1, #0
10041f6e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10041f70:	183b      	adds	r3, r7, r0
10041f72:	881a      	ldrh	r2, [r3, #0]
10041f74:	197b      	adds	r3, r7, r5
10041f76:	7819      	ldrb	r1, [r3, #0]
10041f78:	687b      	ldr	r3, [r7, #4]
10041f7a:	0018      	movs	r0, r3
10041f7c:	f7ff fe71 	bl	10041c62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10041f80:	e038      	b.n	10041ff4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10041f82:	240c      	movs	r4, #12
10041f84:	193b      	adds	r3, r7, r4
10041f86:	2208      	movs	r2, #8
10041f88:	18ba      	adds	r2, r7, r2
10041f8a:	8812      	ldrh	r2, [r2, #0]
10041f8c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10041f8e:	2380      	movs	r3, #128	@ 0x80
10041f90:	021a      	lsls	r2, r3, #8
10041f92:	687b      	ldr	r3, [r7, #4]
10041f94:	0011      	movs	r1, r2
10041f96:	0018      	movs	r0, r3
10041f98:	f000 fbe0 	bl	1004275c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10041f9c:	687b      	ldr	r3, [r7, #4]
10041f9e:	2240      	movs	r2, #64	@ 0x40
10041fa0:	2100      	movs	r1, #0
10041fa2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10041fa4:	193b      	adds	r3, r7, r4
10041fa6:	881a      	ldrh	r2, [r3, #0]
10041fa8:	230f      	movs	r3, #15
10041faa:	18fb      	adds	r3, r7, r3
10041fac:	7819      	ldrb	r1, [r3, #0]
10041fae:	687b      	ldr	r3, [r7, #4]
10041fb0:	0018      	movs	r0, r3
10041fb2:	f7ff fe56 	bl	10041c62 <HAL_I2C_AddrCallback>
}
10041fb6:	e01d      	b.n	10041ff4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10041fb8:	2380      	movs	r3, #128	@ 0x80
10041fba:	021a      	lsls	r2, r3, #8
10041fbc:	687b      	ldr	r3, [r7, #4]
10041fbe:	0011      	movs	r1, r2
10041fc0:	0018      	movs	r0, r3
10041fc2:	f000 fbcb 	bl	1004275c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
10041fc6:	687b      	ldr	r3, [r7, #4]
10041fc8:	2240      	movs	r2, #64	@ 0x40
10041fca:	2100      	movs	r1, #0
10041fcc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10041fce:	230c      	movs	r3, #12
10041fd0:	18fb      	adds	r3, r7, r3
10041fd2:	881a      	ldrh	r2, [r3, #0]
10041fd4:	230f      	movs	r3, #15
10041fd6:	18fb      	adds	r3, r7, r3
10041fd8:	7819      	ldrb	r1, [r3, #0]
10041fda:	687b      	ldr	r3, [r7, #4]
10041fdc:	0018      	movs	r0, r3
10041fde:	f7ff fe40 	bl	10041c62 <HAL_I2C_AddrCallback>
}
10041fe2:	e007      	b.n	10041ff4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10041fe4:	687b      	ldr	r3, [r7, #4]
10041fe6:	681b      	ldr	r3, [r3, #0]
10041fe8:	2208      	movs	r2, #8
10041fea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10041fec:	687b      	ldr	r3, [r7, #4]
10041fee:	2240      	movs	r2, #64	@ 0x40
10041ff0:	2100      	movs	r1, #0
10041ff2:	5499      	strb	r1, [r3, r2]
}
10041ff4:	46c0      	nop			@ (mov r8, r8)
10041ff6:	46bd      	mov	sp, r7
10041ff8:	b004      	add	sp, #16
10041ffa:	bdb0      	pop	{r4, r5, r7, pc}

10041ffc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10041ffc:	b580      	push	{r7, lr}
10041ffe:	b084      	sub	sp, #16
10042000:	af00      	add	r7, sp, #0
10042002:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10042004:	687b      	ldr	r3, [r7, #4]
10042006:	681b      	ldr	r3, [r3, #0]
10042008:	681b      	ldr	r3, [r3, #0]
1004200a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004200c:	687b      	ldr	r3, [r7, #4]
1004200e:	2242      	movs	r2, #66	@ 0x42
10042010:	2100      	movs	r1, #0
10042012:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10042014:	68fa      	ldr	r2, [r7, #12]
10042016:	2380      	movs	r3, #128	@ 0x80
10042018:	01db      	lsls	r3, r3, #7
1004201a:	4013      	ands	r3, r2
1004201c:	d008      	beq.n	10042030 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004201e:	687b      	ldr	r3, [r7, #4]
10042020:	681b      	ldr	r3, [r3, #0]
10042022:	681a      	ldr	r2, [r3, #0]
10042024:	687b      	ldr	r3, [r7, #4]
10042026:	681b      	ldr	r3, [r3, #0]
10042028:	4924      	ldr	r1, [pc, #144]	@ (100420bc <I2C_ITSlaveSeqCplt+0xc0>)
1004202a:	400a      	ands	r2, r1
1004202c:	601a      	str	r2, [r3, #0]
1004202e:	e00c      	b.n	1004204a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10042030:	68fa      	ldr	r2, [r7, #12]
10042032:	2380      	movs	r3, #128	@ 0x80
10042034:	021b      	lsls	r3, r3, #8
10042036:	4013      	ands	r3, r2
10042038:	d007      	beq.n	1004204a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004203a:	687b      	ldr	r3, [r7, #4]
1004203c:	681b      	ldr	r3, [r3, #0]
1004203e:	681a      	ldr	r2, [r3, #0]
10042040:	687b      	ldr	r3, [r7, #4]
10042042:	681b      	ldr	r3, [r3, #0]
10042044:	491e      	ldr	r1, [pc, #120]	@ (100420c0 <I2C_ITSlaveSeqCplt+0xc4>)
10042046:	400a      	ands	r2, r1
10042048:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
1004204a:	687b      	ldr	r3, [r7, #4]
1004204c:	2241      	movs	r2, #65	@ 0x41
1004204e:	5c9b      	ldrb	r3, [r3, r2]
10042050:	b2db      	uxtb	r3, r3
10042052:	2b29      	cmp	r3, #41	@ 0x29
10042054:	d114      	bne.n	10042080 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10042056:	687b      	ldr	r3, [r7, #4]
10042058:	2241      	movs	r2, #65	@ 0x41
1004205a:	2128      	movs	r1, #40	@ 0x28
1004205c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1004205e:	687b      	ldr	r3, [r7, #4]
10042060:	2221      	movs	r2, #33	@ 0x21
10042062:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10042064:	687b      	ldr	r3, [r7, #4]
10042066:	2101      	movs	r1, #1
10042068:	0018      	movs	r0, r3
1004206a:	f000 fb77 	bl	1004275c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004206e:	687b      	ldr	r3, [r7, #4]
10042070:	2240      	movs	r2, #64	@ 0x40
10042072:	2100      	movs	r1, #0
10042074:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10042076:	687b      	ldr	r3, [r7, #4]
10042078:	0018      	movs	r0, r3
1004207a:	f7ff fde2 	bl	10041c42 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004207e:	e019      	b.n	100420b4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10042080:	687b      	ldr	r3, [r7, #4]
10042082:	2241      	movs	r2, #65	@ 0x41
10042084:	5c9b      	ldrb	r3, [r3, r2]
10042086:	b2db      	uxtb	r3, r3
10042088:	2b2a      	cmp	r3, #42	@ 0x2a
1004208a:	d113      	bne.n	100420b4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004208c:	687b      	ldr	r3, [r7, #4]
1004208e:	2241      	movs	r2, #65	@ 0x41
10042090:	2128      	movs	r1, #40	@ 0x28
10042092:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10042094:	687b      	ldr	r3, [r7, #4]
10042096:	2222      	movs	r2, #34	@ 0x22
10042098:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004209a:	687b      	ldr	r3, [r7, #4]
1004209c:	2102      	movs	r1, #2
1004209e:	0018      	movs	r0, r3
100420a0:	f000 fb5c 	bl	1004275c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
100420a4:	687b      	ldr	r3, [r7, #4]
100420a6:	2240      	movs	r2, #64	@ 0x40
100420a8:	2100      	movs	r1, #0
100420aa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
100420ac:	687b      	ldr	r3, [r7, #4]
100420ae:	0018      	movs	r0, r3
100420b0:	f7ff fdcf 	bl	10041c52 <HAL_I2C_SlaveRxCpltCallback>
}
100420b4:	46c0      	nop			@ (mov r8, r8)
100420b6:	46bd      	mov	sp, r7
100420b8:	b004      	add	sp, #16
100420ba:	bd80      	pop	{r7, pc}
100420bc:	ffffbfff 	.word	0xffffbfff
100420c0:	ffff7fff 	.word	0xffff7fff

100420c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100420c4:	b580      	push	{r7, lr}
100420c6:	b086      	sub	sp, #24
100420c8:	af00      	add	r7, sp, #0
100420ca:	6078      	str	r0, [r7, #4]
100420cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
100420ce:	687b      	ldr	r3, [r7, #4]
100420d0:	681b      	ldr	r3, [r3, #0]
100420d2:	681b      	ldr	r3, [r3, #0]
100420d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
100420d6:	683b      	ldr	r3, [r7, #0]
100420d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
100420da:	687b      	ldr	r3, [r7, #4]
100420dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100420de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
100420e0:	200b      	movs	r0, #11
100420e2:	183b      	adds	r3, r7, r0
100420e4:	687a      	ldr	r2, [r7, #4]
100420e6:	2141      	movs	r1, #65	@ 0x41
100420e8:	5c52      	ldrb	r2, [r2, r1]
100420ea:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100420ec:	687b      	ldr	r3, [r7, #4]
100420ee:	681b      	ldr	r3, [r3, #0]
100420f0:	2220      	movs	r2, #32
100420f2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
100420f4:	183b      	adds	r3, r7, r0
100420f6:	781b      	ldrb	r3, [r3, #0]
100420f8:	2b21      	cmp	r3, #33	@ 0x21
100420fa:	d003      	beq.n	10042104 <I2C_ITSlaveCplt+0x40>
100420fc:	183b      	adds	r3, r7, r0
100420fe:	781b      	ldrb	r3, [r3, #0]
10042100:	2b29      	cmp	r3, #41	@ 0x29
10042102:	d109      	bne.n	10042118 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10042104:	4aac      	ldr	r2, [pc, #688]	@ (100423b8 <I2C_ITSlaveCplt+0x2f4>)
10042106:	687b      	ldr	r3, [r7, #4]
10042108:	0011      	movs	r1, r2
1004210a:	0018      	movs	r0, r3
1004210c:	f000 fb26 	bl	1004275c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10042110:	687b      	ldr	r3, [r7, #4]
10042112:	2221      	movs	r2, #33	@ 0x21
10042114:	631a      	str	r2, [r3, #48]	@ 0x30
10042116:	e020      	b.n	1004215a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10042118:	220b      	movs	r2, #11
1004211a:	18bb      	adds	r3, r7, r2
1004211c:	781b      	ldrb	r3, [r3, #0]
1004211e:	2b22      	cmp	r3, #34	@ 0x22
10042120:	d003      	beq.n	1004212a <I2C_ITSlaveCplt+0x66>
10042122:	18bb      	adds	r3, r7, r2
10042124:	781b      	ldrb	r3, [r3, #0]
10042126:	2b2a      	cmp	r3, #42	@ 0x2a
10042128:	d109      	bne.n	1004213e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
1004212a:	4aa4      	ldr	r2, [pc, #656]	@ (100423bc <I2C_ITSlaveCplt+0x2f8>)
1004212c:	687b      	ldr	r3, [r7, #4]
1004212e:	0011      	movs	r1, r2
10042130:	0018      	movs	r0, r3
10042132:	f000 fb13 	bl	1004275c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10042136:	687b      	ldr	r3, [r7, #4]
10042138:	2222      	movs	r2, #34	@ 0x22
1004213a:	631a      	str	r2, [r3, #48]	@ 0x30
1004213c:	e00d      	b.n	1004215a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
1004213e:	230b      	movs	r3, #11
10042140:	18fb      	adds	r3, r7, r3
10042142:	781b      	ldrb	r3, [r3, #0]
10042144:	2b28      	cmp	r3, #40	@ 0x28
10042146:	d108      	bne.n	1004215a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10042148:	4a9d      	ldr	r2, [pc, #628]	@ (100423c0 <I2C_ITSlaveCplt+0x2fc>)
1004214a:	687b      	ldr	r3, [r7, #4]
1004214c:	0011      	movs	r1, r2
1004214e:	0018      	movs	r0, r3
10042150:	f000 fb04 	bl	1004275c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
10042154:	687b      	ldr	r3, [r7, #4]
10042156:	2200      	movs	r2, #0
10042158:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
1004215a:	687b      	ldr	r3, [r7, #4]
1004215c:	681b      	ldr	r3, [r3, #0]
1004215e:	685a      	ldr	r2, [r3, #4]
10042160:	687b      	ldr	r3, [r7, #4]
10042162:	681b      	ldr	r3, [r3, #0]
10042164:	2180      	movs	r1, #128	@ 0x80
10042166:	0209      	lsls	r1, r1, #8
10042168:	430a      	orrs	r2, r1
1004216a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
1004216c:	687b      	ldr	r3, [r7, #4]
1004216e:	681b      	ldr	r3, [r3, #0]
10042170:	685a      	ldr	r2, [r3, #4]
10042172:	687b      	ldr	r3, [r7, #4]
10042174:	681b      	ldr	r3, [r3, #0]
10042176:	4993      	ldr	r1, [pc, #588]	@ (100423c4 <I2C_ITSlaveCplt+0x300>)
10042178:	400a      	ands	r2, r1
1004217a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
1004217c:	687b      	ldr	r3, [r7, #4]
1004217e:	0018      	movs	r0, r3
10042180:	f000 faab 	bl	100426da <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10042184:	693a      	ldr	r2, [r7, #16]
10042186:	2380      	movs	r3, #128	@ 0x80
10042188:	01db      	lsls	r3, r3, #7
1004218a:	4013      	ands	r3, r2
1004218c:	d013      	beq.n	100421b6 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004218e:	687b      	ldr	r3, [r7, #4]
10042190:	681b      	ldr	r3, [r3, #0]
10042192:	681a      	ldr	r2, [r3, #0]
10042194:	687b      	ldr	r3, [r7, #4]
10042196:	681b      	ldr	r3, [r3, #0]
10042198:	498b      	ldr	r1, [pc, #556]	@ (100423c8 <I2C_ITSlaveCplt+0x304>)
1004219a:	400a      	ands	r2, r1
1004219c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
1004219e:	687b      	ldr	r3, [r7, #4]
100421a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100421a2:	2b00      	cmp	r3, #0
100421a4:	d01f      	beq.n	100421e6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
100421a6:	687b      	ldr	r3, [r7, #4]
100421a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100421aa:	681b      	ldr	r3, [r3, #0]
100421ac:	685b      	ldr	r3, [r3, #4]
100421ae:	b29a      	uxth	r2, r3
100421b0:	687b      	ldr	r3, [r7, #4]
100421b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
100421b4:	e017      	b.n	100421e6 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
100421b6:	693a      	ldr	r2, [r7, #16]
100421b8:	2380      	movs	r3, #128	@ 0x80
100421ba:	021b      	lsls	r3, r3, #8
100421bc:	4013      	ands	r3, r2
100421be:	d012      	beq.n	100421e6 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100421c0:	687b      	ldr	r3, [r7, #4]
100421c2:	681b      	ldr	r3, [r3, #0]
100421c4:	681a      	ldr	r2, [r3, #0]
100421c6:	687b      	ldr	r3, [r7, #4]
100421c8:	681b      	ldr	r3, [r3, #0]
100421ca:	4980      	ldr	r1, [pc, #512]	@ (100423cc <I2C_ITSlaveCplt+0x308>)
100421cc:	400a      	ands	r2, r1
100421ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
100421d0:	687b      	ldr	r3, [r7, #4]
100421d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100421d4:	2b00      	cmp	r3, #0
100421d6:	d006      	beq.n	100421e6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
100421d8:	687b      	ldr	r3, [r7, #4]
100421da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100421dc:	681b      	ldr	r3, [r3, #0]
100421de:	685b      	ldr	r3, [r3, #4]
100421e0:	b29a      	uxth	r2, r3
100421e2:	687b      	ldr	r3, [r7, #4]
100421e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
100421e6:	697b      	ldr	r3, [r7, #20]
100421e8:	2204      	movs	r2, #4
100421ea:	4013      	ands	r3, r2
100421ec:	d020      	beq.n	10042230 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
100421ee:	697b      	ldr	r3, [r7, #20]
100421f0:	2204      	movs	r2, #4
100421f2:	4393      	bics	r3, r2
100421f4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100421f6:	687b      	ldr	r3, [r7, #4]
100421f8:	681b      	ldr	r3, [r3, #0]
100421fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100421fc:	687b      	ldr	r3, [r7, #4]
100421fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042200:	b2d2      	uxtb	r2, r2
10042202:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10042204:	687b      	ldr	r3, [r7, #4]
10042206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042208:	1c5a      	adds	r2, r3, #1
1004220a:	687b      	ldr	r3, [r7, #4]
1004220c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
1004220e:	687b      	ldr	r3, [r7, #4]
10042210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10042212:	2b00      	cmp	r3, #0
10042214:	d00c      	beq.n	10042230 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
10042216:	687b      	ldr	r3, [r7, #4]
10042218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004221a:	3b01      	subs	r3, #1
1004221c:	b29a      	uxth	r2, r3
1004221e:	687b      	ldr	r3, [r7, #4]
10042220:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10042222:	687b      	ldr	r3, [r7, #4]
10042224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042226:	b29b      	uxth	r3, r3
10042228:	3b01      	subs	r3, #1
1004222a:	b29a      	uxth	r2, r3
1004222c:	687b      	ldr	r3, [r7, #4]
1004222e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10042230:	687b      	ldr	r3, [r7, #4]
10042232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042234:	b29b      	uxth	r3, r3
10042236:	2b00      	cmp	r3, #0
10042238:	d005      	beq.n	10042246 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004223a:	687b      	ldr	r3, [r7, #4]
1004223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004223e:	2204      	movs	r2, #4
10042240:	431a      	orrs	r2, r3
10042242:	687b      	ldr	r3, [r7, #4]
10042244:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10042246:	697b      	ldr	r3, [r7, #20]
10042248:	2210      	movs	r2, #16
1004224a:	4013      	ands	r3, r2
1004224c:	d04f      	beq.n	100422ee <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
1004224e:	693b      	ldr	r3, [r7, #16]
10042250:	2210      	movs	r2, #16
10042252:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10042254:	d04b      	beq.n	100422ee <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10042256:	687b      	ldr	r3, [r7, #4]
10042258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004225a:	b29b      	uxth	r3, r3
1004225c:	2b00      	cmp	r3, #0
1004225e:	d12d      	bne.n	100422bc <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10042260:	687b      	ldr	r3, [r7, #4]
10042262:	2241      	movs	r2, #65	@ 0x41
10042264:	5c9b      	ldrb	r3, [r3, r2]
10042266:	b2db      	uxtb	r3, r3
10042268:	2b28      	cmp	r3, #40	@ 0x28
1004226a:	d10b      	bne.n	10042284 <I2C_ITSlaveCplt+0x1c0>
1004226c:	68fa      	ldr	r2, [r7, #12]
1004226e:	2380      	movs	r3, #128	@ 0x80
10042270:	049b      	lsls	r3, r3, #18
10042272:	429a      	cmp	r2, r3
10042274:	d106      	bne.n	10042284 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10042276:	697a      	ldr	r2, [r7, #20]
10042278:	687b      	ldr	r3, [r7, #4]
1004227a:	0011      	movs	r1, r2
1004227c:	0018      	movs	r0, r3
1004227e:	f000 f8a9 	bl	100423d4 <I2C_ITListenCplt>
10042282:	e034      	b.n	100422ee <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10042284:	687b      	ldr	r3, [r7, #4]
10042286:	2241      	movs	r2, #65	@ 0x41
10042288:	5c9b      	ldrb	r3, [r3, r2]
1004228a:	b2db      	uxtb	r3, r3
1004228c:	2b29      	cmp	r3, #41	@ 0x29
1004228e:	d110      	bne.n	100422b2 <I2C_ITSlaveCplt+0x1ee>
10042290:	68fb      	ldr	r3, [r7, #12]
10042292:	4a4f      	ldr	r2, [pc, #316]	@ (100423d0 <I2C_ITSlaveCplt+0x30c>)
10042294:	4293      	cmp	r3, r2
10042296:	d00c      	beq.n	100422b2 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10042298:	687b      	ldr	r3, [r7, #4]
1004229a:	681b      	ldr	r3, [r3, #0]
1004229c:	2210      	movs	r2, #16
1004229e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
100422a0:	687b      	ldr	r3, [r7, #4]
100422a2:	0018      	movs	r0, r3
100422a4:	f000 fa19 	bl	100426da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
100422a8:	687b      	ldr	r3, [r7, #4]
100422aa:	0018      	movs	r0, r3
100422ac:	f7ff fea6 	bl	10041ffc <I2C_ITSlaveSeqCplt>
100422b0:	e01d      	b.n	100422ee <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100422b2:	687b      	ldr	r3, [r7, #4]
100422b4:	681b      	ldr	r3, [r3, #0]
100422b6:	2210      	movs	r2, #16
100422b8:	61da      	str	r2, [r3, #28]
100422ba:	e018      	b.n	100422ee <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100422bc:	687b      	ldr	r3, [r7, #4]
100422be:	681b      	ldr	r3, [r3, #0]
100422c0:	2210      	movs	r2, #16
100422c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100422c4:	687b      	ldr	r3, [r7, #4]
100422c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100422c8:	2204      	movs	r2, #4
100422ca:	431a      	orrs	r2, r3
100422cc:	687b      	ldr	r3, [r7, #4]
100422ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100422d0:	68fb      	ldr	r3, [r7, #12]
100422d2:	2b00      	cmp	r3, #0
100422d4:	d004      	beq.n	100422e0 <I2C_ITSlaveCplt+0x21c>
100422d6:	68fa      	ldr	r2, [r7, #12]
100422d8:	2380      	movs	r3, #128	@ 0x80
100422da:	045b      	lsls	r3, r3, #17
100422dc:	429a      	cmp	r2, r3
100422de:	d106      	bne.n	100422ee <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
100422e0:	687b      	ldr	r3, [r7, #4]
100422e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100422e4:	687b      	ldr	r3, [r7, #4]
100422e6:	0011      	movs	r1, r2
100422e8:	0018      	movs	r0, r3
100422ea:	f000 f8cb 	bl	10042484 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
100422ee:	687b      	ldr	r3, [r7, #4]
100422f0:	2242      	movs	r2, #66	@ 0x42
100422f2:	2100      	movs	r1, #0
100422f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
100422f6:	687b      	ldr	r3, [r7, #4]
100422f8:	2200      	movs	r2, #0
100422fa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
100422fc:	687b      	ldr	r3, [r7, #4]
100422fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042300:	2b00      	cmp	r3, #0
10042302:	d013      	beq.n	1004232c <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10042304:	687b      	ldr	r3, [r7, #4]
10042306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10042308:	687b      	ldr	r3, [r7, #4]
1004230a:	0011      	movs	r1, r2
1004230c:	0018      	movs	r0, r3
1004230e:	f000 f8b9 	bl	10042484 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10042312:	687b      	ldr	r3, [r7, #4]
10042314:	2241      	movs	r2, #65	@ 0x41
10042316:	5c9b      	ldrb	r3, [r3, r2]
10042318:	b2db      	uxtb	r3, r3
1004231a:	2b28      	cmp	r3, #40	@ 0x28
1004231c:	d147      	bne.n	100423ae <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
1004231e:	697a      	ldr	r2, [r7, #20]
10042320:	687b      	ldr	r3, [r7, #4]
10042322:	0011      	movs	r1, r2
10042324:	0018      	movs	r0, r3
10042326:	f000 f855 	bl	100423d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004232a:	e040      	b.n	100423ae <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
1004232c:	687b      	ldr	r3, [r7, #4]
1004232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10042330:	4a27      	ldr	r2, [pc, #156]	@ (100423d0 <I2C_ITSlaveCplt+0x30c>)
10042332:	4293      	cmp	r3, r2
10042334:	d016      	beq.n	10042364 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
10042336:	687b      	ldr	r3, [r7, #4]
10042338:	0018      	movs	r0, r3
1004233a:	f7ff fe5f 	bl	10041ffc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004233e:	687b      	ldr	r3, [r7, #4]
10042340:	4a23      	ldr	r2, [pc, #140]	@ (100423d0 <I2C_ITSlaveCplt+0x30c>)
10042342:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10042344:	687b      	ldr	r3, [r7, #4]
10042346:	2241      	movs	r2, #65	@ 0x41
10042348:	2120      	movs	r1, #32
1004234a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004234c:	687b      	ldr	r3, [r7, #4]
1004234e:	2200      	movs	r2, #0
10042350:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10042352:	687b      	ldr	r3, [r7, #4]
10042354:	2240      	movs	r2, #64	@ 0x40
10042356:	2100      	movs	r1, #0
10042358:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
1004235a:	687b      	ldr	r3, [r7, #4]
1004235c:	0018      	movs	r0, r3
1004235e:	f7ff fc90 	bl	10041c82 <HAL_I2C_ListenCpltCallback>
}
10042362:	e024      	b.n	100423ae <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10042364:	687b      	ldr	r3, [r7, #4]
10042366:	2241      	movs	r2, #65	@ 0x41
10042368:	5c9b      	ldrb	r3, [r3, r2]
1004236a:	b2db      	uxtb	r3, r3
1004236c:	2b22      	cmp	r3, #34	@ 0x22
1004236e:	d10f      	bne.n	10042390 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
10042370:	687b      	ldr	r3, [r7, #4]
10042372:	2241      	movs	r2, #65	@ 0x41
10042374:	2120      	movs	r1, #32
10042376:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10042378:	687b      	ldr	r3, [r7, #4]
1004237a:	2200      	movs	r2, #0
1004237c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004237e:	687b      	ldr	r3, [r7, #4]
10042380:	2240      	movs	r2, #64	@ 0x40
10042382:	2100      	movs	r1, #0
10042384:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10042386:	687b      	ldr	r3, [r7, #4]
10042388:	0018      	movs	r0, r3
1004238a:	f7ff fc62 	bl	10041c52 <HAL_I2C_SlaveRxCpltCallback>
}
1004238e:	e00e      	b.n	100423ae <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
10042390:	687b      	ldr	r3, [r7, #4]
10042392:	2241      	movs	r2, #65	@ 0x41
10042394:	2120      	movs	r1, #32
10042396:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10042398:	687b      	ldr	r3, [r7, #4]
1004239a:	2200      	movs	r2, #0
1004239c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004239e:	687b      	ldr	r3, [r7, #4]
100423a0:	2240      	movs	r2, #64	@ 0x40
100423a2:	2100      	movs	r1, #0
100423a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
100423a6:	687b      	ldr	r3, [r7, #4]
100423a8:	0018      	movs	r0, r3
100423aa:	f7ff fc4a 	bl	10041c42 <HAL_I2C_SlaveTxCpltCallback>
}
100423ae:	46c0      	nop			@ (mov r8, r8)
100423b0:	46bd      	mov	sp, r7
100423b2:	b006      	add	sp, #24
100423b4:	bd80      	pop	{r7, pc}
100423b6:	46c0      	nop			@ (mov r8, r8)
100423b8:	00008001 	.word	0x00008001
100423bc:	00008002 	.word	0x00008002
100423c0:	00008003 	.word	0x00008003
100423c4:	fe00e800 	.word	0xfe00e800
100423c8:	ffffbfff 	.word	0xffffbfff
100423cc:	ffff7fff 	.word	0xffff7fff
100423d0:	ffff0000 	.word	0xffff0000

100423d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100423d4:	b580      	push	{r7, lr}
100423d6:	b082      	sub	sp, #8
100423d8:	af00      	add	r7, sp, #0
100423da:	6078      	str	r0, [r7, #4]
100423dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100423de:	687b      	ldr	r3, [r7, #4]
100423e0:	4a26      	ldr	r2, [pc, #152]	@ (1004247c <I2C_ITListenCplt+0xa8>)
100423e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
100423e4:	687b      	ldr	r3, [r7, #4]
100423e6:	2200      	movs	r2, #0
100423e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
100423ea:	687b      	ldr	r3, [r7, #4]
100423ec:	2241      	movs	r2, #65	@ 0x41
100423ee:	2120      	movs	r1, #32
100423f0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
100423f2:	687b      	ldr	r3, [r7, #4]
100423f4:	2242      	movs	r2, #66	@ 0x42
100423f6:	2100      	movs	r1, #0
100423f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
100423fa:	687b      	ldr	r3, [r7, #4]
100423fc:	2200      	movs	r2, #0
100423fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
10042400:	683b      	ldr	r3, [r7, #0]
10042402:	2204      	movs	r2, #4
10042404:	4013      	ands	r3, r2
10042406:	d022      	beq.n	1004244e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10042408:	687b      	ldr	r3, [r7, #4]
1004240a:	681b      	ldr	r3, [r3, #0]
1004240c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004240e:	687b      	ldr	r3, [r7, #4]
10042410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042412:	b2d2      	uxtb	r2, r2
10042414:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10042416:	687b      	ldr	r3, [r7, #4]
10042418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004241a:	1c5a      	adds	r2, r3, #1
1004241c:	687b      	ldr	r3, [r7, #4]
1004241e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10042420:	687b      	ldr	r3, [r7, #4]
10042422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10042424:	2b00      	cmp	r3, #0
10042426:	d012      	beq.n	1004244e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
10042428:	687b      	ldr	r3, [r7, #4]
1004242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004242c:	3b01      	subs	r3, #1
1004242e:	b29a      	uxth	r2, r3
10042430:	687b      	ldr	r3, [r7, #4]
10042432:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10042434:	687b      	ldr	r3, [r7, #4]
10042436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042438:	b29b      	uxth	r3, r3
1004243a:	3b01      	subs	r3, #1
1004243c:	b29a      	uxth	r2, r3
1004243e:	687b      	ldr	r3, [r7, #4]
10042440:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10042442:	687b      	ldr	r3, [r7, #4]
10042444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042446:	2204      	movs	r2, #4
10042448:	431a      	orrs	r2, r3
1004244a:	687b      	ldr	r3, [r7, #4]
1004244c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004244e:	4a0c      	ldr	r2, [pc, #48]	@ (10042480 <I2C_ITListenCplt+0xac>)
10042450:	687b      	ldr	r3, [r7, #4]
10042452:	0011      	movs	r1, r2
10042454:	0018      	movs	r0, r3
10042456:	f000 f981 	bl	1004275c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004245a:	687b      	ldr	r3, [r7, #4]
1004245c:	681b      	ldr	r3, [r3, #0]
1004245e:	2210      	movs	r2, #16
10042460:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10042462:	687b      	ldr	r3, [r7, #4]
10042464:	2240      	movs	r2, #64	@ 0x40
10042466:	2100      	movs	r1, #0
10042468:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
1004246a:	687b      	ldr	r3, [r7, #4]
1004246c:	0018      	movs	r0, r3
1004246e:	f7ff fc08 	bl	10041c82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10042472:	46c0      	nop			@ (mov r8, r8)
10042474:	46bd      	mov	sp, r7
10042476:	b002      	add	sp, #8
10042478:	bd80      	pop	{r7, pc}
1004247a:	46c0      	nop			@ (mov r8, r8)
1004247c:	ffff0000 	.word	0xffff0000
10042480:	00008003 	.word	0x00008003

10042484 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10042484:	b580      	push	{r7, lr}
10042486:	b084      	sub	sp, #16
10042488:	af00      	add	r7, sp, #0
1004248a:	6078      	str	r0, [r7, #4]
1004248c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
1004248e:	200f      	movs	r0, #15
10042490:	183b      	adds	r3, r7, r0
10042492:	687a      	ldr	r2, [r7, #4]
10042494:	2141      	movs	r1, #65	@ 0x41
10042496:	5c52      	ldrb	r2, [r2, r1]
10042498:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
1004249a:	687b      	ldr	r3, [r7, #4]
1004249c:	2242      	movs	r2, #66	@ 0x42
1004249e:	2100      	movs	r1, #0
100424a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
100424a2:	687b      	ldr	r3, [r7, #4]
100424a4:	4a72      	ldr	r2, [pc, #456]	@ (10042670 <I2C_ITError+0x1ec>)
100424a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
100424a8:	687b      	ldr	r3, [r7, #4]
100424aa:	2200      	movs	r2, #0
100424ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
100424ae:	687b      	ldr	r3, [r7, #4]
100424b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100424b2:	683b      	ldr	r3, [r7, #0]
100424b4:	431a      	orrs	r2, r3
100424b6:	687b      	ldr	r3, [r7, #4]
100424b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
100424ba:	183b      	adds	r3, r7, r0
100424bc:	781b      	ldrb	r3, [r3, #0]
100424be:	2b28      	cmp	r3, #40	@ 0x28
100424c0:	d007      	beq.n	100424d2 <I2C_ITError+0x4e>
100424c2:	183b      	adds	r3, r7, r0
100424c4:	781b      	ldrb	r3, [r3, #0]
100424c6:	2b29      	cmp	r3, #41	@ 0x29
100424c8:	d003      	beq.n	100424d2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
100424ca:	183b      	adds	r3, r7, r0
100424cc:	781b      	ldrb	r3, [r3, #0]
100424ce:	2b2a      	cmp	r3, #42	@ 0x2a
100424d0:	d10c      	bne.n	100424ec <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100424d2:	687b      	ldr	r3, [r7, #4]
100424d4:	2103      	movs	r1, #3
100424d6:	0018      	movs	r0, r3
100424d8:	f000 f940 	bl	1004275c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100424dc:	687b      	ldr	r3, [r7, #4]
100424de:	2241      	movs	r2, #65	@ 0x41
100424e0:	2128      	movs	r1, #40	@ 0x28
100424e2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
100424e4:	687b      	ldr	r3, [r7, #4]
100424e6:	4a63      	ldr	r2, [pc, #396]	@ (10042674 <I2C_ITError+0x1f0>)
100424e8:	635a      	str	r2, [r3, #52]	@ 0x34
100424ea:	e032      	b.n	10042552 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100424ec:	4a62      	ldr	r2, [pc, #392]	@ (10042678 <I2C_ITError+0x1f4>)
100424ee:	687b      	ldr	r3, [r7, #4]
100424f0:	0011      	movs	r1, r2
100424f2:	0018      	movs	r0, r3
100424f4:	f000 f932 	bl	1004275c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
100424f8:	687b      	ldr	r3, [r7, #4]
100424fa:	0018      	movs	r0, r3
100424fc:	f000 f8ed 	bl	100426da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
10042500:	687b      	ldr	r3, [r7, #4]
10042502:	2241      	movs	r2, #65	@ 0x41
10042504:	5c9b      	ldrb	r3, [r3, r2]
10042506:	b2db      	uxtb	r3, r3
10042508:	2b60      	cmp	r3, #96	@ 0x60
1004250a:	d01f      	beq.n	1004254c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
1004250c:	687b      	ldr	r3, [r7, #4]
1004250e:	2241      	movs	r2, #65	@ 0x41
10042510:	2120      	movs	r1, #32
10042512:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
10042514:	687b      	ldr	r3, [r7, #4]
10042516:	681b      	ldr	r3, [r3, #0]
10042518:	699b      	ldr	r3, [r3, #24]
1004251a:	2220      	movs	r2, #32
1004251c:	4013      	ands	r3, r2
1004251e:	2b20      	cmp	r3, #32
10042520:	d114      	bne.n	1004254c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
10042522:	687b      	ldr	r3, [r7, #4]
10042524:	681b      	ldr	r3, [r3, #0]
10042526:	699b      	ldr	r3, [r3, #24]
10042528:	2210      	movs	r2, #16
1004252a:	4013      	ands	r3, r2
1004252c:	2b10      	cmp	r3, #16
1004252e:	d109      	bne.n	10042544 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10042530:	687b      	ldr	r3, [r7, #4]
10042532:	681b      	ldr	r3, [r3, #0]
10042534:	2210      	movs	r2, #16
10042536:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10042538:	687b      	ldr	r3, [r7, #4]
1004253a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004253c:	2204      	movs	r2, #4
1004253e:	431a      	orrs	r2, r3
10042540:	687b      	ldr	r3, [r7, #4]
10042542:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10042544:	687b      	ldr	r3, [r7, #4]
10042546:	681b      	ldr	r3, [r3, #0]
10042548:	2220      	movs	r2, #32
1004254a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
1004254c:	687b      	ldr	r3, [r7, #4]
1004254e:	2200      	movs	r2, #0
10042550:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
10042552:	687b      	ldr	r3, [r7, #4]
10042554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10042556:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
10042558:	687b      	ldr	r3, [r7, #4]
1004255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004255c:	2b00      	cmp	r3, #0
1004255e:	d03b      	beq.n	100425d8 <I2C_ITError+0x154>
10042560:	68bb      	ldr	r3, [r7, #8]
10042562:	2b11      	cmp	r3, #17
10042564:	d002      	beq.n	1004256c <I2C_ITError+0xe8>
10042566:	68bb      	ldr	r3, [r7, #8]
10042568:	2b21      	cmp	r3, #33	@ 0x21
1004256a:	d135      	bne.n	100425d8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
1004256c:	687b      	ldr	r3, [r7, #4]
1004256e:	681b      	ldr	r3, [r3, #0]
10042570:	681a      	ldr	r2, [r3, #0]
10042572:	2380      	movs	r3, #128	@ 0x80
10042574:	01db      	lsls	r3, r3, #7
10042576:	401a      	ands	r2, r3
10042578:	2380      	movs	r3, #128	@ 0x80
1004257a:	01db      	lsls	r3, r3, #7
1004257c:	429a      	cmp	r2, r3
1004257e:	d107      	bne.n	10042590 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10042580:	687b      	ldr	r3, [r7, #4]
10042582:	681b      	ldr	r3, [r3, #0]
10042584:	681a      	ldr	r2, [r3, #0]
10042586:	687b      	ldr	r3, [r7, #4]
10042588:	681b      	ldr	r3, [r3, #0]
1004258a:	493c      	ldr	r1, [pc, #240]	@ (1004267c <I2C_ITError+0x1f8>)
1004258c:	400a      	ands	r2, r1
1004258e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10042590:	687b      	ldr	r3, [r7, #4]
10042592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10042594:	0018      	movs	r0, r3
10042596:	f7ff f8d7 	bl	10041748 <HAL_DMA_GetState>
1004259a:	0003      	movs	r3, r0
1004259c:	2b01      	cmp	r3, #1
1004259e:	d016      	beq.n	100425ce <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
100425a0:	687b      	ldr	r3, [r7, #4]
100425a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100425a4:	4a36      	ldr	r2, [pc, #216]	@ (10042680 <I2C_ITError+0x1fc>)
100425a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
100425a8:	687b      	ldr	r3, [r7, #4]
100425aa:	2240      	movs	r2, #64	@ 0x40
100425ac:	2100      	movs	r1, #0
100425ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
100425b0:	687b      	ldr	r3, [r7, #4]
100425b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100425b4:	0018      	movs	r0, r3
100425b6:	f7ff f880 	bl	100416ba <HAL_DMA_Abort_IT>
100425ba:	1e03      	subs	r3, r0, #0
100425bc:	d051      	beq.n	10042662 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
100425be:	687b      	ldr	r3, [r7, #4]
100425c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100425c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100425c4:	687b      	ldr	r3, [r7, #4]
100425c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100425c8:	0018      	movs	r0, r3
100425ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100425cc:	e049      	b.n	10042662 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
100425ce:	687b      	ldr	r3, [r7, #4]
100425d0:	0018      	movs	r0, r3
100425d2:	f000 f859 	bl	10042688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100425d6:	e044      	b.n	10042662 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
100425d8:	687b      	ldr	r3, [r7, #4]
100425da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100425dc:	2b00      	cmp	r3, #0
100425de:	d03b      	beq.n	10042658 <I2C_ITError+0x1d4>
100425e0:	68bb      	ldr	r3, [r7, #8]
100425e2:	2b12      	cmp	r3, #18
100425e4:	d002      	beq.n	100425ec <I2C_ITError+0x168>
100425e6:	68bb      	ldr	r3, [r7, #8]
100425e8:	2b22      	cmp	r3, #34	@ 0x22
100425ea:	d135      	bne.n	10042658 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
100425ec:	687b      	ldr	r3, [r7, #4]
100425ee:	681b      	ldr	r3, [r3, #0]
100425f0:	681a      	ldr	r2, [r3, #0]
100425f2:	2380      	movs	r3, #128	@ 0x80
100425f4:	021b      	lsls	r3, r3, #8
100425f6:	401a      	ands	r2, r3
100425f8:	2380      	movs	r3, #128	@ 0x80
100425fa:	021b      	lsls	r3, r3, #8
100425fc:	429a      	cmp	r2, r3
100425fe:	d107      	bne.n	10042610 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10042600:	687b      	ldr	r3, [r7, #4]
10042602:	681b      	ldr	r3, [r3, #0]
10042604:	681a      	ldr	r2, [r3, #0]
10042606:	687b      	ldr	r3, [r7, #4]
10042608:	681b      	ldr	r3, [r3, #0]
1004260a:	491e      	ldr	r1, [pc, #120]	@ (10042684 <I2C_ITError+0x200>)
1004260c:	400a      	ands	r2, r1
1004260e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10042610:	687b      	ldr	r3, [r7, #4]
10042612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042614:	0018      	movs	r0, r3
10042616:	f7ff f897 	bl	10041748 <HAL_DMA_GetState>
1004261a:	0003      	movs	r3, r0
1004261c:	2b01      	cmp	r3, #1
1004261e:	d016      	beq.n	1004264e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
10042620:	687b      	ldr	r3, [r7, #4]
10042622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042624:	4a16      	ldr	r2, [pc, #88]	@ (10042680 <I2C_ITError+0x1fc>)
10042626:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10042628:	687b      	ldr	r3, [r7, #4]
1004262a:	2240      	movs	r2, #64	@ 0x40
1004262c:	2100      	movs	r1, #0
1004262e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10042630:	687b      	ldr	r3, [r7, #4]
10042632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042634:	0018      	movs	r0, r3
10042636:	f7ff f840 	bl	100416ba <HAL_DMA_Abort_IT>
1004263a:	1e03      	subs	r3, r0, #0
1004263c:	d013      	beq.n	10042666 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
1004263e:	687b      	ldr	r3, [r7, #4]
10042640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10042644:	687b      	ldr	r3, [r7, #4]
10042646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042648:	0018      	movs	r0, r3
1004264a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004264c:	e00b      	b.n	10042666 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004264e:	687b      	ldr	r3, [r7, #4]
10042650:	0018      	movs	r0, r3
10042652:	f000 f819 	bl	10042688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10042656:	e006      	b.n	10042666 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
10042658:	687b      	ldr	r3, [r7, #4]
1004265a:	0018      	movs	r0, r3
1004265c:	f000 f814 	bl	10042688 <I2C_TreatErrorCallback>
  }
}
10042660:	e002      	b.n	10042668 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10042662:	46c0      	nop			@ (mov r8, r8)
10042664:	e000      	b.n	10042668 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10042666:	46c0      	nop			@ (mov r8, r8)
}
10042668:	46c0      	nop			@ (mov r8, r8)
1004266a:	46bd      	mov	sp, r7
1004266c:	b004      	add	sp, #16
1004266e:	bd80      	pop	{r7, pc}
10042670:	ffff0000 	.word	0xffff0000
10042674:	10041cb5 	.word	0x10041cb5
10042678:	00008003 	.word	0x00008003
1004267c:	ffffbfff 	.word	0xffffbfff
10042680:	1004271f 	.word	0x1004271f
10042684:	ffff7fff 	.word	0xffff7fff

10042688 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
10042688:	b580      	push	{r7, lr}
1004268a:	b082      	sub	sp, #8
1004268c:	af00      	add	r7, sp, #0
1004268e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
10042690:	687b      	ldr	r3, [r7, #4]
10042692:	2241      	movs	r2, #65	@ 0x41
10042694:	5c9b      	ldrb	r3, [r3, r2]
10042696:	b2db      	uxtb	r3, r3
10042698:	2b60      	cmp	r3, #96	@ 0x60
1004269a:	d10f      	bne.n	100426bc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
1004269c:	687b      	ldr	r3, [r7, #4]
1004269e:	2241      	movs	r2, #65	@ 0x41
100426a0:	2120      	movs	r1, #32
100426a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
100426a4:	687b      	ldr	r3, [r7, #4]
100426a6:	2200      	movs	r2, #0
100426a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100426aa:	687b      	ldr	r3, [r7, #4]
100426ac:	2240      	movs	r2, #64	@ 0x40
100426ae:	2100      	movs	r1, #0
100426b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
100426b2:	687b      	ldr	r3, [r7, #4]
100426b4:	0018      	movs	r0, r3
100426b6:	f7ff faf4 	bl	10041ca2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
100426ba:	e00a      	b.n	100426d2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
100426bc:	687b      	ldr	r3, [r7, #4]
100426be:	2200      	movs	r2, #0
100426c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
100426c2:	687b      	ldr	r3, [r7, #4]
100426c4:	2240      	movs	r2, #64	@ 0x40
100426c6:	2100      	movs	r1, #0
100426c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
100426ca:	687b      	ldr	r3, [r7, #4]
100426cc:	0018      	movs	r0, r3
100426ce:	f7ff fae0 	bl	10041c92 <HAL_I2C_ErrorCallback>
}
100426d2:	46c0      	nop			@ (mov r8, r8)
100426d4:	46bd      	mov	sp, r7
100426d6:	b002      	add	sp, #8
100426d8:	bd80      	pop	{r7, pc}

100426da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
100426da:	b580      	push	{r7, lr}
100426dc:	b082      	sub	sp, #8
100426de:	af00      	add	r7, sp, #0
100426e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
100426e2:	687b      	ldr	r3, [r7, #4]
100426e4:	681b      	ldr	r3, [r3, #0]
100426e6:	699b      	ldr	r3, [r3, #24]
100426e8:	2202      	movs	r2, #2
100426ea:	4013      	ands	r3, r2
100426ec:	2b02      	cmp	r3, #2
100426ee:	d103      	bne.n	100426f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
100426f0:	687b      	ldr	r3, [r7, #4]
100426f2:	681b      	ldr	r3, [r3, #0]
100426f4:	2200      	movs	r2, #0
100426f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
100426f8:	687b      	ldr	r3, [r7, #4]
100426fa:	681b      	ldr	r3, [r3, #0]
100426fc:	699b      	ldr	r3, [r3, #24]
100426fe:	2201      	movs	r2, #1
10042700:	4013      	ands	r3, r2
10042702:	2b01      	cmp	r3, #1
10042704:	d007      	beq.n	10042716 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10042706:	687b      	ldr	r3, [r7, #4]
10042708:	681b      	ldr	r3, [r3, #0]
1004270a:	699a      	ldr	r2, [r3, #24]
1004270c:	687b      	ldr	r3, [r7, #4]
1004270e:	681b      	ldr	r3, [r3, #0]
10042710:	2101      	movs	r1, #1
10042712:	430a      	orrs	r2, r1
10042714:	619a      	str	r2, [r3, #24]
  }
}
10042716:	46c0      	nop			@ (mov r8, r8)
10042718:	46bd      	mov	sp, r7
1004271a:	b002      	add	sp, #8
1004271c:	bd80      	pop	{r7, pc}

1004271e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
1004271e:	b580      	push	{r7, lr}
10042720:	b084      	sub	sp, #16
10042722:	af00      	add	r7, sp, #0
10042724:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
10042726:	687b      	ldr	r3, [r7, #4]
10042728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004272a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
1004272c:	68fb      	ldr	r3, [r7, #12]
1004272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10042730:	2b00      	cmp	r3, #0
10042732:	d003      	beq.n	1004273c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10042734:	68fb      	ldr	r3, [r7, #12]
10042736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10042738:	2200      	movs	r2, #0
1004273a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
1004273c:	68fb      	ldr	r3, [r7, #12]
1004273e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042740:	2b00      	cmp	r3, #0
10042742:	d003      	beq.n	1004274c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10042744:	68fb      	ldr	r3, [r7, #12]
10042746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10042748:	2200      	movs	r2, #0
1004274a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
1004274c:	68fb      	ldr	r3, [r7, #12]
1004274e:	0018      	movs	r0, r3
10042750:	f7ff ff9a 	bl	10042688 <I2C_TreatErrorCallback>
}
10042754:	46c0      	nop			@ (mov r8, r8)
10042756:	46bd      	mov	sp, r7
10042758:	b004      	add	sp, #16
1004275a:	bd80      	pop	{r7, pc}

1004275c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004275c:	b580      	push	{r7, lr}
1004275e:	b084      	sub	sp, #16
10042760:	af00      	add	r7, sp, #0
10042762:	6078      	str	r0, [r7, #4]
10042764:	000a      	movs	r2, r1
10042766:	1cbb      	adds	r3, r7, #2
10042768:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004276a:	2300      	movs	r3, #0
1004276c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004276e:	1cbb      	adds	r3, r7, #2
10042770:	881b      	ldrh	r3, [r3, #0]
10042772:	2201      	movs	r2, #1
10042774:	4013      	ands	r3, r2
10042776:	d010      	beq.n	1004279a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
10042778:	68fb      	ldr	r3, [r7, #12]
1004277a:	2242      	movs	r2, #66	@ 0x42
1004277c:	4313      	orrs	r3, r2
1004277e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10042780:	687b      	ldr	r3, [r7, #4]
10042782:	2241      	movs	r2, #65	@ 0x41
10042784:	5c9b      	ldrb	r3, [r3, r2]
10042786:	b2db      	uxtb	r3, r3
10042788:	001a      	movs	r2, r3
1004278a:	2328      	movs	r3, #40	@ 0x28
1004278c:	4013      	ands	r3, r2
1004278e:	2b28      	cmp	r3, #40	@ 0x28
10042790:	d003      	beq.n	1004279a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10042792:	68fb      	ldr	r3, [r7, #12]
10042794:	22b0      	movs	r2, #176	@ 0xb0
10042796:	4313      	orrs	r3, r2
10042798:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004279a:	1cbb      	adds	r3, r7, #2
1004279c:	881b      	ldrh	r3, [r3, #0]
1004279e:	2202      	movs	r2, #2
100427a0:	4013      	ands	r3, r2
100427a2:	d010      	beq.n	100427c6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
100427a4:	68fb      	ldr	r3, [r7, #12]
100427a6:	2244      	movs	r2, #68	@ 0x44
100427a8:	4313      	orrs	r3, r2
100427aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100427ac:	687b      	ldr	r3, [r7, #4]
100427ae:	2241      	movs	r2, #65	@ 0x41
100427b0:	5c9b      	ldrb	r3, [r3, r2]
100427b2:	b2db      	uxtb	r3, r3
100427b4:	001a      	movs	r2, r3
100427b6:	2328      	movs	r3, #40	@ 0x28
100427b8:	4013      	ands	r3, r2
100427ba:	2b28      	cmp	r3, #40	@ 0x28
100427bc:	d003      	beq.n	100427c6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100427be:	68fb      	ldr	r3, [r7, #12]
100427c0:	22b0      	movs	r2, #176	@ 0xb0
100427c2:	4313      	orrs	r3, r2
100427c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
100427c6:	1cbb      	adds	r3, r7, #2
100427c8:	2200      	movs	r2, #0
100427ca:	5e9b      	ldrsh	r3, [r3, r2]
100427cc:	2b00      	cmp	r3, #0
100427ce:	da03      	bge.n	100427d8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100427d0:	68fb      	ldr	r3, [r7, #12]
100427d2:	22b8      	movs	r2, #184	@ 0xb8
100427d4:	4313      	orrs	r3, r2
100427d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
100427d8:	1cbb      	adds	r3, r7, #2
100427da:	881b      	ldrh	r3, [r3, #0]
100427dc:	2b10      	cmp	r3, #16
100427de:	d103      	bne.n	100427e8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
100427e0:	68fb      	ldr	r3, [r7, #12]
100427e2:	2290      	movs	r2, #144	@ 0x90
100427e4:	4313      	orrs	r3, r2
100427e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
100427e8:	1cbb      	adds	r3, r7, #2
100427ea:	881b      	ldrh	r3, [r3, #0]
100427ec:	2b20      	cmp	r3, #32
100427ee:	d103      	bne.n	100427f8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
100427f0:	68fb      	ldr	r3, [r7, #12]
100427f2:	2220      	movs	r2, #32
100427f4:	4313      	orrs	r3, r2
100427f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
100427f8:	1cbb      	adds	r3, r7, #2
100427fa:	881b      	ldrh	r3, [r3, #0]
100427fc:	2b40      	cmp	r3, #64	@ 0x40
100427fe:	d103      	bne.n	10042808 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
10042800:	68fb      	ldr	r3, [r7, #12]
10042802:	2240      	movs	r2, #64	@ 0x40
10042804:	4313      	orrs	r3, r2
10042806:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
10042808:	687b      	ldr	r3, [r7, #4]
1004280a:	681b      	ldr	r3, [r3, #0]
1004280c:	681a      	ldr	r2, [r3, #0]
1004280e:	68fb      	ldr	r3, [r7, #12]
10042810:	43d9      	mvns	r1, r3
10042812:	687b      	ldr	r3, [r7, #4]
10042814:	681b      	ldr	r3, [r3, #0]
10042816:	400a      	ands	r2, r1
10042818:	601a      	str	r2, [r3, #0]
}
1004281a:	46c0      	nop			@ (mov r8, r8)
1004281c:	46bd      	mov	sp, r7
1004281e:	b004      	add	sp, #16
10042820:	bd80      	pop	{r7, pc}

10042822 <LL_RADIO_TIMER_DisableTimer1>:
  * @rmtoll TIMEOUTDESTREG   DESTINATION   LL_RADIO_TIMER_DisableTimer1
  * @param  BLUEx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableTimer1(BLUE_TypeDef *BLUEx)
{
10042822:	b580      	push	{r7, lr}
10042824:	b082      	sub	sp, #8
10042826:	af00      	add	r7, sp, #0
10042828:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004282a:	687b      	ldr	r3, [r7, #4]
1004282c:	68db      	ldr	r3, [r3, #12]
1004282e:	2203      	movs	r2, #3
10042830:	4393      	bics	r3, r2
10042832:	001a      	movs	r2, r3
10042834:	687b      	ldr	r3, [r7, #4]
10042836:	60da      	str	r2, [r3, #12]
}
10042838:	46c0      	nop			@ (mov r8, r8)
1004283a:	46bd      	mov	sp, r7
1004283c:	b002      	add	sp, #8
1004283e:	bd80      	pop	{r7, pc}

10042840 <LL_RADIO_TIMER_DisableTimer2>:
  * @rmtoll TIMEOUTDESTREG   DESTINATION   LL_RADIO_TIMER_DisableTimer2
  * @param  BLUEx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableTimer2(BLUE_TypeDef *BLUEx)
{
10042840:	b580      	push	{r7, lr}
10042842:	b082      	sub	sp, #8
10042844:	af00      	add	r7, sp, #0
10042846:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10042848:	687b      	ldr	r3, [r7, #4]
1004284a:	68db      	ldr	r3, [r3, #12]
1004284c:	2203      	movs	r2, #3
1004284e:	4393      	bics	r3, r2
10042850:	001a      	movs	r2, r3
10042852:	687b      	ldr	r3, [r7, #4]
10042854:	60da      	str	r2, [r3, #12]
}
10042856:	46c0      	nop			@ (mov r8, r8)
10042858:	46bd      	mov	sp, r7
1004285a:	b002      	add	sp, #8
1004285c:	bd80      	pop	{r7, pc}
	...

10042860 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    BLE_WAKEUP_EN   LL_RADIO_TIMER_DisableBLEWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10042860:	b580      	push	{r7, lr}
10042862:	b082      	sub	sp, #8
10042864:	af00      	add	r7, sp, #0
10042866:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10042868:	687b      	ldr	r3, [r7, #4]
1004286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004286c:	4a03      	ldr	r2, [pc, #12]	@ (1004287c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004286e:	401a      	ands	r2, r3
10042870:	687b      	ldr	r3, [r7, #4]
10042872:	629a      	str	r2, [r3, #40]	@ 0x28
}
10042874:	46c0      	nop			@ (mov r8, r8)
10042876:	46bd      	mov	sp, r7
10042878:	b002      	add	sp, #8
1004287a:	bd80      	pop	{r7, pc}
1004287c:	bfffffff 	.word	0xbfffffff

10042880 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10042880:	b580      	push	{r7, lr}
10042882:	b086      	sub	sp, #24
10042884:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
10042886:	4a24      	ldr	r2, [pc, #144]	@ (10042918 <HAL_RADIO_ReadRSSI+0x98>)
10042888:	23a9      	movs	r3, #169	@ 0xa9
1004288a:	009b      	lsls	r3, r3, #2
1004288c:	58d3      	ldr	r3, [r2, r3]
1004288e:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10042890:	4a21      	ldr	r2, [pc, #132]	@ (10042918 <HAL_RADIO_ReadRSSI+0x98>)
10042892:	23aa      	movs	r3, #170	@ 0xaa
10042894:	009b      	lsls	r3, r3, #2
10042896:	58d3      	ldr	r3, [r2, r3]
10042898:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004289a:	68bb      	ldr	r3, [r7, #8]
1004289c:	021b      	lsls	r3, r3, #8
1004289e:	041b      	lsls	r3, r3, #16
100428a0:	0c1a      	lsrs	r2, r3, #16
100428a2:	68fb      	ldr	r3, [r7, #12]
100428a4:	21ff      	movs	r1, #255	@ 0xff
100428a6:	400b      	ands	r3, r1
100428a8:	4313      	orrs	r3, r2
100428aa:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
100428ac:	4a1a      	ldr	r2, [pc, #104]	@ (10042918 <HAL_RADIO_ReadRSSI+0x98>)
100428ae:	23ab      	movs	r3, #171	@ 0xab
100428b0:	009b      	lsls	r3, r3, #2
100428b2:	58d3      	ldr	r3, [r2, r3]
100428b4:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
100428b6:	693b      	ldr	r3, [r7, #16]
100428b8:	2b00      	cmp	r3, #0
100428ba:	d002      	beq.n	100428c2 <HAL_RADIO_ReadRSSI+0x42>
100428bc:	687b      	ldr	r3, [r7, #4]
100428be:	2b0b      	cmp	r3, #11
100428c0:	d902      	bls.n	100428c8 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
100428c2:	237f      	movs	r3, #127	@ 0x7f
100428c4:	617b      	str	r3, [r7, #20]
100428c6:	e020      	b.n	1004290a <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
100428c8:	687a      	ldr	r2, [r7, #4]
100428ca:	0013      	movs	r3, r2
100428cc:	005b      	lsls	r3, r3, #1
100428ce:	189b      	adds	r3, r3, r2
100428d0:	005b      	lsls	r3, r3, #1
100428d2:	3b77      	subs	r3, #119	@ 0x77
100428d4:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
100428d6:	e005      	b.n	100428e4 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
100428d8:	697b      	ldr	r3, [r7, #20]
100428da:	3306      	adds	r3, #6
100428dc:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
100428de:	693b      	ldr	r3, [r7, #16]
100428e0:	085b      	lsrs	r3, r3, #1
100428e2:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
100428e4:	693b      	ldr	r3, [r7, #16]
100428e6:	2b1e      	cmp	r3, #30
100428e8:	d8f6      	bhi.n	100428d8 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
100428ea:	693a      	ldr	r2, [r7, #16]
100428ec:	0013      	movs	r3, r2
100428ee:	005b      	lsls	r3, r3, #1
100428f0:	189b      	adds	r3, r3, r2
100428f2:	009b      	lsls	r3, r3, #2
100428f4:	189b      	adds	r3, r3, r2
100428f6:	015b      	lsls	r3, r3, #5
100428f8:	189b      	adds	r3, r3, r2
100428fa:	4a08      	ldr	r2, [pc, #32]	@ (1004291c <HAL_RADIO_ReadRSSI+0x9c>)
100428fc:	4694      	mov	ip, r2
100428fe:	4463      	add	r3, ip
10042900:	0a9b      	lsrs	r3, r3, #10
10042902:	001a      	movs	r2, r3
10042904:	697b      	ldr	r3, [r7, #20]
10042906:	189b      	adds	r3, r3, r2
10042908:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004290a:	697b      	ldr	r3, [r7, #20]
1004290c:	b25b      	sxtb	r3, r3
}
1004290e:	0018      	movs	r0, r3
10042910:	46bd      	mov	sp, r7
10042912:	b006      	add	sp, #24
10042914:	bd80      	pop	{r7, pc}
10042916:	46c0      	nop			@ (mov r8, r8)
10042918:	60001400 	.word	0x60001400
1004291c:	000046a0 	.word	0x000046a0

10042920 <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
10042920:	b590      	push	{r4, r7, lr}
10042922:	b089      	sub	sp, #36	@ 0x24
10042924:	af00      	add	r7, sp, #0
10042926:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
10042928:	687a      	ldr	r2, [r7, #4]
1004292a:	2380      	movs	r3, #128	@ 0x80
1004292c:	049b      	lsls	r3, r3, #18
1004292e:	4013      	ands	r3, r2
10042930:	d100      	bne.n	10042934 <HAL_RADIO_ActionPacketIsr+0x14>
10042932:	e0fb      	b.n	10042b2c <HAL_RADIO_ActionPacketIsr+0x20c>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10042934:	23c0      	movs	r3, #192	@ 0xc0
10042936:	05db      	lsls	r3, r3, #23
10042938:	69db      	ldr	r3, [r3, #28]
1004293a:	2240      	movs	r2, #64	@ 0x40
1004293c:	4013      	ands	r3, r2
1004293e:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
10042940:	4b7c      	ldr	r3, [pc, #496]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042942:	689b      	ldr	r3, [r3, #8]
10042944:	687a      	ldr	r2, [r7, #4]
10042946:	430a      	orrs	r2, r1
10042948:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
1004294a:	4b7a      	ldr	r3, [pc, #488]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
1004294c:	689b      	ldr	r3, [r3, #8]
1004294e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10042950:	4b78      	ldr	r3, [pc, #480]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042952:	689b      	ldr	r3, [r3, #8]
10042954:	0018      	movs	r0, r3
10042956:	4790      	blx	r2
10042958:	0003      	movs	r3, r0
1004295a:	2b01      	cmp	r3, #1
1004295c:	d104      	bne.n	10042968 <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
1004295e:	4b75      	ldr	r3, [pc, #468]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042960:	689b      	ldr	r3, [r3, #8]
10042962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042964:	61fb      	str	r3, [r7, #28]
10042966:	e003      	b.n	10042970 <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
10042968:	4b72      	ldr	r3, [pc, #456]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
1004296a:	689b      	ldr	r3, [r3, #8]
1004296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004296e:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
10042970:	69fb      	ldr	r3, [r7, #28]
10042972:	2b00      	cmp	r3, #0
10042974:	d116      	bne.n	100429a4 <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
10042976:	23c0      	movs	r3, #192	@ 0xc0
10042978:	05db      	lsls	r3, r3, #23
1004297a:	0018      	movs	r0, r3
1004297c:	f7ff ff51 	bl	10042822 <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
10042980:	23c0      	movs	r3, #192	@ 0xc0
10042982:	05db      	lsls	r3, r3, #23
10042984:	0018      	movs	r0, r3
10042986:	f7ff ff5b 	bl	10042840 <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004298a:	4b6b      	ldr	r3, [pc, #428]	@ (10042b38 <HAL_RADIO_ActionPacketIsr+0x218>)
1004298c:	0018      	movs	r0, r3
1004298e:	f7ff ff67 	bl	10042860 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
10042992:	4b6a      	ldr	r3, [pc, #424]	@ (10042b3c <HAL_RADIO_ActionPacketIsr+0x21c>)
10042994:	791b      	ldrb	r3, [r3, #4]
10042996:	b2db      	uxtb	r3, r3
10042998:	4a68      	ldr	r2, [pc, #416]	@ (10042b3c <HAL_RADIO_ActionPacketIsr+0x21c>)
1004299a:	217f      	movs	r1, #127	@ 0x7f
1004299c:	400b      	ands	r3, r1
1004299e:	b2db      	uxtb	r3, r3
100429a0:	7113      	strb	r3, [r2, #4]
100429a2:	e08f      	b.n	10042ac4 <HAL_RADIO_ActionPacketIsr+0x1a4>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
100429a4:	69fb      	ldr	r3, [r7, #28]
100429a6:	781b      	ldrb	r3, [r3, #0]
100429a8:	4964      	ldr	r1, [pc, #400]	@ (10042b3c <HAL_RADIO_ActionPacketIsr+0x21c>)
100429aa:	2280      	movs	r2, #128	@ 0x80
100429ac:	4252      	negs	r2, r2
100429ae:	4313      	orrs	r3, r2
100429b0:	b2db      	uxtb	r3, r3
100429b2:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
100429b4:	69fb      	ldr	r3, [r7, #28]
100429b6:	3318      	adds	r3, #24
100429b8:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
100429ba:	69fb      	ldr	r3, [r7, #28]
100429bc:	781b      	ldrb	r3, [r3, #0]
100429be:	001a      	movs	r2, r3
100429c0:	235c      	movs	r3, #92	@ 0x5c
100429c2:	4353      	muls	r3, r2
100429c4:	4a5e      	ldr	r2, [pc, #376]	@ (10042b40 <HAL_RADIO_ActionPacketIsr+0x220>)
100429c6:	4694      	mov	ip, r2
100429c8:	4463      	add	r3, ip
100429ca:	781b      	ldrb	r3, [r3, #0]
100429cc:	b2db      	uxtb	r3, r3
100429ce:	b25b      	sxtb	r3, r3
100429d0:	227f      	movs	r2, #127	@ 0x7f
100429d2:	4013      	ands	r3, r2
100429d4:	b25a      	sxtb	r2, r3
100429d6:	69fb      	ldr	r3, [r7, #28]
100429d8:	2138      	movs	r1, #56	@ 0x38
100429da:	5c5b      	ldrb	r3, [r3, r1]
100429dc:	b25b      	sxtb	r3, r3
100429de:	4313      	orrs	r3, r2
100429e0:	b25a      	sxtb	r2, r3
100429e2:	69fb      	ldr	r3, [r7, #28]
100429e4:	781b      	ldrb	r3, [r3, #0]
100429e6:	0019      	movs	r1, r3
100429e8:	235c      	movs	r3, #92	@ 0x5c
100429ea:	434b      	muls	r3, r1
100429ec:	4954      	ldr	r1, [pc, #336]	@ (10042b40 <HAL_RADIO_ActionPacketIsr+0x220>)
100429ee:	468c      	mov	ip, r1
100429f0:	4463      	add	r3, ip
100429f2:	b2d2      	uxtb	r2, r2
100429f4:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
100429f6:	69fb      	ldr	r3, [r7, #28]
100429f8:	781b      	ldrb	r3, [r3, #0]
100429fa:	001a      	movs	r2, r3
100429fc:	235c      	movs	r3, #92	@ 0x5c
100429fe:	4353      	muls	r3, r2
10042a00:	4a4f      	ldr	r2, [pc, #316]	@ (10042b40 <HAL_RADIO_ActionPacketIsr+0x220>)
10042a02:	4694      	mov	ip, r2
10042a04:	4463      	add	r3, ip
10042a06:	69ba      	ldr	r2, [r7, #24]
10042a08:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
10042a0a:	69fb      	ldr	r3, [r7, #28]
10042a0c:	781b      	ldrb	r3, [r3, #0]
10042a0e:	001a      	movs	r2, r3
10042a10:	235c      	movs	r3, #92	@ 0x5c
10042a12:	4353      	muls	r3, r2
10042a14:	4a4a      	ldr	r2, [pc, #296]	@ (10042b40 <HAL_RADIO_ActionPacketIsr+0x220>)
10042a16:	4694      	mov	ip, r2
10042a18:	4463      	add	r3, ip
10042a1a:	69ba      	ldr	r2, [r7, #24]
10042a1c:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
10042a1e:	69fb      	ldr	r3, [r7, #28]
10042a20:	781b      	ldrb	r3, [r3, #0]
10042a22:	001a      	movs	r2, r3
10042a24:	235c      	movs	r3, #92	@ 0x5c
10042a26:	4353      	muls	r3, r2
10042a28:	4a45      	ldr	r2, [pc, #276]	@ (10042b40 <HAL_RADIO_ActionPacketIsr+0x220>)
10042a2a:	4694      	mov	ip, r2
10042a2c:	4463      	add	r3, ip
10042a2e:	69fa      	ldr	r2, [r7, #28]
10042a30:	7891      	ldrb	r1, [r2, #2]
10042a32:	222b      	movs	r2, #43	@ 0x2b
10042a34:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
10042a36:	69fb      	ldr	r3, [r7, #28]
10042a38:	785b      	ldrb	r3, [r3, #1]
10042a3a:	001a      	movs	r2, r3
10042a3c:	2304      	movs	r3, #4
10042a3e:	4013      	ands	r3, r2
10042a40:	d040      	beq.n	10042ac4 <HAL_RADIO_ActionPacketIsr+0x1a4>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
10042a42:	23c0      	movs	r3, #192	@ 0xc0
10042a44:	05db      	lsls	r3, r3, #23
10042a46:	0018      	movs	r0, r3
10042a48:	f7ff feeb 	bl	10042822 <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
10042a4c:	23c0      	movs	r3, #192	@ 0xc0
10042a4e:	05db      	lsls	r3, r3, #23
10042a50:	0018      	movs	r0, r3
10042a52:	f7ff fef5 	bl	10042840 <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
10042a56:	69fb      	ldr	r3, [r7, #28]
10042a58:	785b      	ldrb	r3, [r3, #1]
10042a5a:	001a      	movs	r2, r3
10042a5c:	2320      	movs	r3, #32
10042a5e:	4013      	ands	r3, r2
10042a60:	d01e      	beq.n	10042aa0 <HAL_RADIO_ActionPacketIsr+0x180>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
10042a62:	f000 fa2b 	bl	10042ebc <HAL_RADIO_TIMER_GetCurrentSysTime>
10042a66:	0002      	movs	r2, r0
10042a68:	000b      	movs	r3, r1
10042a6a:	0014      	movs	r4, r2
10042a6c:	69fb      	ldr	r3, [r7, #28]
10042a6e:	685b      	ldr	r3, [r3, #4]
10042a70:	0018      	movs	r0, r3
10042a72:	f000 fa15 	bl	10042ea0 <HAL_RADIO_TIMER_UsToSystime>
10042a76:	0003      	movs	r3, r0
10042a78:	18e3      	adds	r3, r4, r3
10042a7a:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10042a7c:	69fb      	ldr	r3, [r7, #28]
10042a7e:	2238      	movs	r2, #56	@ 0x38
10042a80:	5c9b      	ldrb	r3, [r3, r2]
10042a82:	3b80      	subs	r3, #128	@ 0x80
10042a84:	425a      	negs	r2, r3
10042a86:	4153      	adcs	r3, r2
10042a88:	b2db      	uxtb	r3, r3
10042a8a:	0019      	movs	r1, r3
10042a8c:	69fb      	ldr	r3, [r7, #28]
10042a8e:	785b      	ldrb	r3, [r3, #1]
10042a90:	2201      	movs	r2, #1
10042a92:	4013      	ands	r3, r2
10042a94:	b2da      	uxtb	r2, r3
10042a96:	697b      	ldr	r3, [r7, #20]
10042a98:	0018      	movs	r0, r3
10042a9a:	f000 f99f 	bl	10042ddc <HAL_RADIO_TIMER_SetRadioTimerValue>
10042a9e:	e011      	b.n	10042ac4 <HAL_RADIO_ActionPacketIsr+0x1a4>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10042aa0:	69fb      	ldr	r3, [r7, #28]
10042aa2:	6858      	ldr	r0, [r3, #4]
10042aa4:	69fb      	ldr	r3, [r7, #28]
10042aa6:	2238      	movs	r2, #56	@ 0x38
10042aa8:	5c9b      	ldrb	r3, [r3, r2]
10042aaa:	3b80      	subs	r3, #128	@ 0x80
10042aac:	425a      	negs	r2, r3
10042aae:	4153      	adcs	r3, r2
10042ab0:	b2db      	uxtb	r3, r3
10042ab2:	0019      	movs	r1, r3
10042ab4:	69fb      	ldr	r3, [r7, #28]
10042ab6:	785b      	ldrb	r3, [r3, #1]
10042ab8:	2201      	movs	r2, #1
10042aba:	4013      	ands	r3, r2
10042abc:	b2db      	uxtb	r3, r3
10042abe:	001a      	movs	r2, r3
10042ac0:	f000 f98c 	bl	10042ddc <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
10042ac4:	687b      	ldr	r3, [r7, #4]
10042ac6:	2b00      	cmp	r3, #0
10042ac8:	db04      	blt.n	10042ad4 <HAL_RADIO_ActionPacketIsr+0x1b4>
10042aca:	687a      	ldr	r2, [r7, #4]
10042acc:	2380      	movs	r3, #128	@ 0x80
10042ace:	05db      	lsls	r3, r3, #23
10042ad0:	4013      	ands	r3, r2
10042ad2:	d012      	beq.n	10042afa <HAL_RADIO_ActionPacketIsr+0x1da>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10042ad4:	f7ff fed4 	bl	10042880 <HAL_RADIO_ReadRSSI>
10042ad8:	0003      	movs	r3, r0
10042ada:	001a      	movs	r2, r3
10042adc:	4b15      	ldr	r3, [pc, #84]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042ade:	689b      	ldr	r3, [r3, #8]
10042ae0:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
10042ae2:	2308      	movs	r3, #8
10042ae4:	18fb      	adds	r3, r7, r3
10042ae6:	0018      	movs	r0, r3
10042ae8:	f000 f964 	bl	10042db4 <HAL_RADIO_TIMER_GetAnchorPoint>
10042aec:	0002      	movs	r2, r0
10042aee:	000b      	movs	r3, r1
10042af0:	4910      	ldr	r1, [pc, #64]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042af2:	6889      	ldr	r1, [r1, #8]
10042af4:	0013      	movs	r3, r2
10042af6:	610b      	str	r3, [r1, #16]
    {
10042af8:	e00b      	b.n	10042b12 <HAL_RADIO_ActionPacketIsr+0x1f2>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
10042afa:	687a      	ldr	r2, [r7, #4]
10042afc:	2380      	movs	r3, #128	@ 0x80
10042afe:	04db      	lsls	r3, r3, #19
10042b00:	4013      	ands	r3, r2
10042b02:	d006      	beq.n	10042b12 <HAL_RADIO_ActionPacketIsr+0x1f2>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10042b04:	f7ff febc 	bl	10042880 <HAL_RADIO_ReadRSSI>
10042b08:	0003      	movs	r3, r0
10042b0a:	001a      	movs	r2, r3
10042b0c:	4b09      	ldr	r3, [pc, #36]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042b0e:	689b      	ldr	r3, [r3, #8]
10042b10:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
10042b12:	4b08      	ldr	r3, [pc, #32]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042b14:	689b      	ldr	r3, [r3, #8]
10042b16:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
10042b18:	4b06      	ldr	r3, [pc, #24]	@ (10042b34 <HAL_RADIO_ActionPacketIsr+0x214>)
10042b1a:	69fa      	ldr	r2, [r7, #28]
10042b1c:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
10042b1e:	693b      	ldr	r3, [r7, #16]
10042b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10042b22:	69f9      	ldr	r1, [r7, #28]
10042b24:	693a      	ldr	r2, [r7, #16]
10042b26:	0010      	movs	r0, r2
10042b28:	4798      	blx	r3
  }

  return ;
10042b2a:	46c0      	nop			@ (mov r8, r8)
10042b2c:	46c0      	nop			@ (mov r8, r8)
}
10042b2e:	46bd      	mov	sp, r7
10042b30:	b009      	add	sp, #36	@ 0x24
10042b32:	bd90      	pop	{r4, r7, pc}
10042b34:	200002c0 	.word	0x200002c0
10042b38:	60001800 	.word	0x60001800
10042b3c:	200000c0 	.word	0x200000c0
10042b40:	200000dc 	.word	0x200000dc

10042b44 <HAL_RADIO_TxRxCallback>:
}

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10042b44:	b580      	push	{r7, lr}
10042b46:	b082      	sub	sp, #8
10042b48:	af00      	add	r7, sp, #0
10042b4a:	6078      	str	r0, [r7, #4]
}
10042b4c:	46c0      	nop			@ (mov r8, r8)
10042b4e:	46bd      	mov	sp, r7
10042b50:	b002      	add	sp, #8
10042b52:	bd80      	pop	{r7, pc}

10042b54 <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
10042b54:	b580      	push	{r7, lr}
10042b56:	af00      	add	r7, sp, #0
}
10042b58:	46c0      	nop			@ (mov r8, r8)
10042b5a:	46bd      	mov	sp, r7
10042b5c:	bd80      	pop	{r7, pc}

10042b5e <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
10042b5e:	b580      	push	{r7, lr}
10042b60:	b082      	sub	sp, #8
10042b62:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
10042b64:	23c0      	movs	r3, #192	@ 0xc0
10042b66:	05db      	lsls	r3, r3, #23
10042b68:	69db      	ldr	r3, [r3, #28]
10042b6a:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10042b6c:	23c0      	movs	r3, #192	@ 0xc0
10042b6e:	05db      	lsls	r3, r3, #23
10042b70:	685b      	ldr	r3, [r3, #4]
10042b72:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10042b74:	23c0      	movs	r3, #192	@ 0xc0
10042b76:	05db      	lsls	r3, r3, #23
10042b78:	683a      	ldr	r2, [r7, #0]
10042b7a:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10042b7c:	f000 f984 	bl	10042e88 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
10042b80:	687a      	ldr	r2, [r7, #4]
10042b82:	683b      	ldr	r3, [r7, #0]
10042b84:	4313      	orrs	r3, r2
10042b86:	0018      	movs	r0, r3
10042b88:	f7ff feca 	bl	10042920 <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10042b8c:	687a      	ldr	r2, [r7, #4]
10042b8e:	683b      	ldr	r3, [r7, #0]
10042b90:	4313      	orrs	r3, r2
10042b92:	0018      	movs	r0, r3
10042b94:	f7ff ffd6 	bl	10042b44 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10042b98:	f000 f970 	bl	10042e7c <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10042b9c:	23c0      	movs	r3, #192	@ 0xc0
10042b9e:	05db      	lsls	r3, r3, #23
10042ba0:	685b      	ldr	r3, [r3, #4]
10042ba2:	603b      	str	r3, [r7, #0]
}
10042ba4:	46c0      	nop			@ (mov r8, r8)
10042ba6:	46bd      	mov	sp, r7
10042ba8:	b002      	add	sp, #8
10042baa:	bd80      	pop	{r7, pc}

10042bac <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10042bac:	b580      	push	{r7, lr}
10042bae:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10042bb0:	f7ff ffd0 	bl	10042b54 <HAL_RADIO_TxRxSeqCallback>
}
10042bb4:	46c0      	nop			@ (mov r8, r8)
10042bb6:	46bd      	mov	sp, r7
10042bb8:	bd80      	pop	{r7, pc}

10042bba <LL_RADIO_TIMER_EnableTimer1>:
{
10042bba:	b580      	push	{r7, lr}
10042bbc:	b082      	sub	sp, #8
10042bbe:	af00      	add	r7, sp, #0
10042bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10042bc2:	687b      	ldr	r3, [r7, #4]
10042bc4:	68db      	ldr	r3, [r3, #12]
10042bc6:	2203      	movs	r2, #3
10042bc8:	4393      	bics	r3, r2
10042bca:	2202      	movs	r2, #2
10042bcc:	431a      	orrs	r2, r3
10042bce:	687b      	ldr	r3, [r7, #4]
10042bd0:	60da      	str	r2, [r3, #12]
}
10042bd2:	46c0      	nop			@ (mov r8, r8)
10042bd4:	46bd      	mov	sp, r7
10042bd6:	b002      	add	sp, #8
10042bd8:	bd80      	pop	{r7, pc}

10042bda <LL_RADIO_TIMER_DisableTimer1>:
{
10042bda:	b580      	push	{r7, lr}
10042bdc:	b082      	sub	sp, #8
10042bde:	af00      	add	r7, sp, #0
10042be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10042be2:	687b      	ldr	r3, [r7, #4]
10042be4:	68db      	ldr	r3, [r3, #12]
10042be6:	2203      	movs	r2, #3
10042be8:	4393      	bics	r3, r2
10042bea:	001a      	movs	r2, r3
10042bec:	687b      	ldr	r3, [r7, #4]
10042bee:	60da      	str	r2, [r3, #12]
}
10042bf0:	46c0      	nop			@ (mov r8, r8)
10042bf2:	46bd      	mov	sp, r7
10042bf4:	b002      	add	sp, #8
10042bf6:	bd80      	pop	{r7, pc}

10042bf8 <LL_RADIO_TIMER_DisableTimer2>:
{
10042bf8:	b580      	push	{r7, lr}
10042bfa:	b082      	sub	sp, #8
10042bfc:	af00      	add	r7, sp, #0
10042bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10042c00:	687b      	ldr	r3, [r7, #4]
10042c02:	68db      	ldr	r3, [r3, #12]
10042c04:	2203      	movs	r2, #3
10042c06:	4393      	bics	r3, r2
10042c08:	001a      	movs	r2, r3
10042c0a:	687b      	ldr	r3, [r7, #4]
10042c0c:	60da      	str	r2, [r3, #12]
}
10042c0e:	46c0      	nop			@ (mov r8, r8)
10042c10:	46bd      	mov	sp, r7
10042c12:	b002      	add	sp, #8
10042c14:	bd80      	pop	{r7, pc}

10042c16 <LL_RADIO_TIMER_SetTimeout>:
{
10042c16:	b580      	push	{r7, lr}
10042c18:	b082      	sub	sp, #8
10042c1a:	af00      	add	r7, sp, #0
10042c1c:	6078      	str	r0, [r7, #4]
10042c1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10042c20:	687b      	ldr	r3, [r7, #4]
10042c22:	683a      	ldr	r2, [r7, #0]
10042c24:	611a      	str	r2, [r3, #16]
}
10042c26:	46c0      	nop			@ (mov r8, r8)
10042c28:	46bd      	mov	sp, r7
10042c2a:	b002      	add	sp, #8
10042c2c:	bd80      	pop	{r7, pc}

10042c2e <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10042c2e:	b580      	push	{r7, lr}
10042c30:	b082      	sub	sp, #8
10042c32:	af00      	add	r7, sp, #0
10042c34:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10042c36:	687b      	ldr	r3, [r7, #4]
10042c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042c3a:	2280      	movs	r2, #128	@ 0x80
10042c3c:	05d2      	lsls	r2, r2, #23
10042c3e:	431a      	orrs	r2, r3
10042c40:	687b      	ldr	r3, [r7, #4]
10042c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
10042c44:	46c0      	nop			@ (mov r8, r8)
10042c46:	46bd      	mov	sp, r7
10042c48:	b002      	add	sp, #8
10042c4a:	bd80      	pop	{r7, pc}

10042c4c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10042c4c:	b580      	push	{r7, lr}
10042c4e:	b082      	sub	sp, #8
10042c50:	af00      	add	r7, sp, #0
10042c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10042c54:	687b      	ldr	r3, [r7, #4]
10042c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042c58:	4a03      	ldr	r2, [pc, #12]	@ (10042c68 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10042c5a:	401a      	ands	r2, r3
10042c5c:	687b      	ldr	r3, [r7, #4]
10042c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10042c60:	46c0      	nop			@ (mov r8, r8)
10042c62:	46bd      	mov	sp, r7
10042c64:	b002      	add	sp, #8
10042c66:	bd80      	pop	{r7, pc}
10042c68:	bfffffff 	.word	0xbfffffff

10042c6c <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
  * @rmtoll CM0_SLEEP_REQUEST_MODE    CPU_WAKEUP_EN   LL_RADIO_TIMER_EnableCPUWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10042c6c:	b580      	push	{r7, lr}
10042c6e:	b082      	sub	sp, #8
10042c70:	af00      	add	r7, sp, #0
10042c72:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10042c74:	687b      	ldr	r3, [r7, #4]
10042c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10042c78:	2280      	movs	r2, #128	@ 0x80
10042c7a:	05d2      	lsls	r2, r2, #23
10042c7c:	431a      	orrs	r2, r3
10042c7e:	687b      	ldr	r3, [r7, #4]
10042c80:	631a      	str	r2, [r3, #48]	@ 0x30
}
10042c82:	46c0      	nop			@ (mov r8, r8)
10042c84:	46bd      	mov	sp, r7
10042c86:	b002      	add	sp, #8
10042c88:	bd80      	pop	{r7, pc}
	...

10042c8c <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
  * @rmtoll CM0_SLEEP_REQUEST_MODE    CPU_WAKEUP_EN   LL_RADIO_TIMER_DisableCPUWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10042c8c:	b580      	push	{r7, lr}
10042c8e:	b082      	sub	sp, #8
10042c90:	af00      	add	r7, sp, #0
10042c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10042c94:	687b      	ldr	r3, [r7, #4]
10042c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10042c98:	4a03      	ldr	r2, [pc, #12]	@ (10042ca8 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10042c9a:	401a      	ands	r2, r3
10042c9c:	687b      	ldr	r3, [r7, #4]
10042c9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
10042ca0:	46c0      	nop			@ (mov r8, r8)
10042ca2:	46bd      	mov	sp, r7
10042ca4:	b002      	add	sp, #8
10042ca6:	bd80      	pop	{r7, pc}
10042ca8:	bfffffff 	.word	0xbfffffff

10042cac <LL_RADIO_TIMER_SetBLEWakeupTime>:
  * @param  WAKEUPx Radio Timer instance
  * @param  Time in 16 x slow clock period
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP_TypeDef *WAKEUPx, uint32_t Time)
{
10042cac:	b580      	push	{r7, lr}
10042cae:	b082      	sub	sp, #8
10042cb0:	af00      	add	r7, sp, #0
10042cb2:	6078      	str	r0, [r7, #4]
10042cb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10042cb6:	687b      	ldr	r3, [r7, #4]
10042cb8:	683a      	ldr	r2, [r7, #0]
10042cba:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042cbc:	46c0      	nop			@ (mov r8, r8)
10042cbe:	46bd      	mov	sp, r7
10042cc0:	b002      	add	sp, #8
10042cc2:	bd80      	pop	{r7, pc}

10042cc4 <LL_RADIO_TIMER_SetCPUWakeupTime>:
  * @param  WAKEUPx Radio Timer instance
  * @param  Time in slow clock period
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP_TypeDef *WAKEUPx, uint32_t Time)
{
10042cc4:	b580      	push	{r7, lr}
10042cc6:	b082      	sub	sp, #8
10042cc8:	af00      	add	r7, sp, #0
10042cca:	6078      	str	r0, [r7, #4]
10042ccc:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10042cce:	687b      	ldr	r3, [r7, #4]
10042cd0:	683a      	ldr	r2, [r7, #0]
10042cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042cd4:	46c0      	nop			@ (mov r8, r8)
10042cd6:	46bd      	mov	sp, r7
10042cd8:	b002      	add	sp, #8
10042cda:	bd80      	pop	{r7, pc}

10042cdc <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10042cdc:	b580      	push	{r7, lr}
10042cde:	b082      	sub	sp, #8
10042ce0:	af00      	add	r7, sp, #0
10042ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10042ce4:	687b      	ldr	r3, [r7, #4]
10042ce6:	691b      	ldr	r3, [r3, #16]
}
10042ce8:	0018      	movs	r0, r3
10042cea:	46bd      	mov	sp, r7
10042cec:	b002      	add	sp, #8
10042cee:	bd80      	pop	{r7, pc}

10042cf0 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
10042cf0:	b580      	push	{r7, lr}
10042cf2:	b082      	sub	sp, #8
10042cf4:	af00      	add	r7, sp, #0
10042cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10042cf8:	687b      	ldr	r3, [r7, #4]
10042cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042cfc:	2280      	movs	r2, #128	@ 0x80
10042cfe:	0592      	lsls	r2, r2, #22
10042d00:	431a      	orrs	r2, r3
10042d02:	687b      	ldr	r3, [r7, #4]
10042d04:	629a      	str	r2, [r3, #40]	@ 0x28
}
10042d06:	46c0      	nop			@ (mov r8, r8)
10042d08:	46bd      	mov	sp, r7
10042d0a:	b002      	add	sp, #8
10042d0c:	bd80      	pop	{r7, pc}
	...

10042d10 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10042d10:	b580      	push	{r7, lr}
10042d12:	b082      	sub	sp, #8
10042d14:	af00      	add	r7, sp, #0
10042d16:	6078      	str	r0, [r7, #4]
10042d18:	000a      	movs	r2, r1
10042d1a:	1cfb      	adds	r3, r7, #3
10042d1c:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
10042d1e:	4b08      	ldr	r3, [pc, #32]	@ (10042d40 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10042d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042d22:	2207      	movs	r2, #7
10042d24:	4393      	bics	r3, r2
10042d26:	0019      	movs	r1, r3
10042d28:	1cfb      	adds	r3, r7, #3
10042d2a:	781b      	ldrb	r3, [r3, #0]
10042d2c:	2207      	movs	r2, #7
10042d2e:	401a      	ands	r2, r3
10042d30:	4b03      	ldr	r3, [pc, #12]	@ (10042d40 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10042d32:	430a      	orrs	r2, r1
10042d34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
10042d36:	46c0      	nop			@ (mov r8, r8)
10042d38:	46bd      	mov	sp, r7
10042d3a:	b002      	add	sp, #8
10042d3c:	bd80      	pop	{r7, pc}
10042d3e:	46c0      	nop			@ (mov r8, r8)
10042d40:	60001800 	.word	0x60001800

10042d44 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10042d44:	b580      	push	{r7, lr}
10042d46:	b082      	sub	sp, #8
10042d48:	af00      	add	r7, sp, #0
10042d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
10042d4c:	687b      	ldr	r3, [r7, #4]
10042d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10042d50:	2201      	movs	r2, #1
10042d52:	431a      	orrs	r2, r3
10042d54:	687b      	ldr	r3, [r7, #4]
10042d56:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10042d58:	46c0      	nop			@ (mov r8, r8)
10042d5a:	46bd      	mov	sp, r7
10042d5c:	b002      	add	sp, #8
10042d5e:	bd80      	pop	{r7, pc}

10042d60 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10042d60:	b580      	push	{r7, lr}
10042d62:	b082      	sub	sp, #8
10042d64:	af00      	add	r7, sp, #0
10042d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10042d68:	687b      	ldr	r3, [r7, #4]
10042d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10042d6c:	2201      	movs	r2, #1
10042d6e:	4013      	ands	r3, r2
10042d70:	2b01      	cmp	r3, #1
10042d72:	d101      	bne.n	10042d78 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10042d74:	2301      	movs	r3, #1
10042d76:	e000      	b.n	10042d7a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
10042d78:	2300      	movs	r3, #0
}
10042d7a:	0018      	movs	r0, r3
10042d7c:	46bd      	mov	sp, r7
10042d7e:	b002      	add	sp, #8
10042d80:	bd80      	pop	{r7, pc}

10042d82 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10042d82:	b580      	push	{r7, lr}
10042d84:	b082      	sub	sp, #8
10042d86:	af00      	add	r7, sp, #0
10042d88:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10042d8a:	687b      	ldr	r3, [r7, #4]
10042d8c:	2200      	movs	r2, #0
10042d8e:	609a      	str	r2, [r3, #8]
}
10042d90:	46c0      	nop			@ (mov r8, r8)
10042d92:	46bd      	mov	sp, r7
10042d94:	b002      	add	sp, #8
10042d96:	bd80      	pop	{r7, pc}

10042d98 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10042d98:	b580      	push	{r7, lr}
10042d9a:	b082      	sub	sp, #8
10042d9c:	af00      	add	r7, sp, #0
10042d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10042da0:	687b      	ldr	r3, [r7, #4]
10042da2:	691b      	ldr	r3, [r3, #16]
10042da4:	2201      	movs	r2, #1
10042da6:	431a      	orrs	r2, r3
10042da8:	687b      	ldr	r3, [r7, #4]
10042daa:	611a      	str	r2, [r3, #16]
}
10042dac:	46c0      	nop			@ (mov r8, r8)
10042dae:	46bd      	mov	sp, r7
10042db0:	b002      	add	sp, #8
10042db2:	bd80      	pop	{r7, pc}

10042db4 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10042db4:	b580      	push	{r7, lr}
10042db6:	b082      	sub	sp, #8
10042db8:	af00      	add	r7, sp, #0
10042dba:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10042dbc:	23c0      	movs	r3, #192	@ 0xc0
10042dbe:	05db      	lsls	r3, r3, #23
10042dc0:	695b      	ldr	r3, [r3, #20]
10042dc2:	687a      	ldr	r2, [r7, #4]
10042dc4:	0011      	movs	r1, r2
10042dc6:	0018      	movs	r0, r3
10042dc8:	f000 fc08 	bl	100435dc <TIMER_GetPastSysTime>
10042dcc:	0002      	movs	r2, r0
10042dce:	000b      	movs	r3, r1
}
10042dd0:	0010      	movs	r0, r2
10042dd2:	0019      	movs	r1, r3
10042dd4:	46bd      	mov	sp, r7
10042dd6:	b002      	add	sp, #8
10042dd8:	bd80      	pop	{r7, pc}
	...

10042ddc <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10042ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10042dde:	b085      	sub	sp, #20
10042de0:	af00      	add	r7, sp, #0
10042de2:	6078      	str	r0, [r7, #4]
10042de4:	0008      	movs	r0, r1
10042de6:	0011      	movs	r1, r2
10042de8:	1cfb      	adds	r3, r7, #3
10042dea:	1c02      	adds	r2, r0, #0
10042dec:	701a      	strb	r2, [r3, #0]
10042dee:	1cbb      	adds	r3, r7, #2
10042df0:	1c0a      	adds	r2, r1, #0
10042df2:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10042df4:	260f      	movs	r6, #15
10042df6:	19bb      	adds	r3, r7, r6
10042df8:	2200      	movs	r2, #0
10042dfa:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10042dfc:	1cfb      	adds	r3, r7, #3
10042dfe:	781b      	ldrb	r3, [r3, #0]
10042e00:	1e5a      	subs	r2, r3, #1
10042e02:	4193      	sbcs	r3, r2
10042e04:	b2d9      	uxtb	r1, r3
10042e06:	4b1b      	ldr	r3, [pc, #108]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e08:	2264      	movs	r2, #100	@ 0x64
10042e0a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10042e0c:	1cbb      	adds	r3, r7, #2
10042e0e:	781b      	ldrb	r3, [r3, #0]
10042e10:	1e5a      	subs	r2, r3, #1
10042e12:	4193      	sbcs	r3, r2
10042e14:	b2d9      	uxtb	r1, r3
10042e16:	4b17      	ldr	r3, [pc, #92]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e18:	2260      	movs	r2, #96	@ 0x60
10042e1a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10042e1c:	4b15      	ldr	r3, [pc, #84]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10042e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10042e22:	4914      	ldr	r1, [pc, #80]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e24:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10042e26:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10042e28:	6879      	ldr	r1, [r7, #4]
10042e2a:	1a09      	subs	r1, r1, r0
10042e2c:	000c      	movs	r4, r1
10042e2e:	2100      	movs	r1, #0
10042e30:	000d      	movs	r5, r1
10042e32:	1912      	adds	r2, r2, r4
10042e34:	416b      	adcs	r3, r5
10042e36:	490f      	ldr	r1, [pc, #60]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e38:	658a      	str	r2, [r1, #88]	@ 0x58
10042e3a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10042e3c:	4b0d      	ldr	r3, [pc, #52]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e3e:	2261      	movs	r2, #97	@ 0x61
10042e40:	2100      	movs	r1, #0
10042e42:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10042e44:	4b0b      	ldr	r3, [pc, #44]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e46:	2263      	movs	r2, #99	@ 0x63
10042e48:	2100      	movs	r1, #0
10042e4a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10042e4c:	4b09      	ldr	r3, [pc, #36]	@ (10042e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10042e4e:	2262      	movs	r2, #98	@ 0x62
10042e50:	2101      	movs	r1, #1
10042e52:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10042e54:	19ba      	adds	r2, r7, r6
10042e56:	4b08      	ldr	r3, [pc, #32]	@ (10042e78 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
10042e58:	0011      	movs	r1, r2
10042e5a:	0018      	movs	r0, r3
10042e5c:	f000 fa4c 	bl	100432f8 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10042e60:	2001      	movs	r0, #1
10042e62:	f000 f9f1 	bl	10043248 <_virtualTimeBaseEnable>

  return retVal;
10042e66:	19bb      	adds	r3, r7, r6
10042e68:	781b      	ldrb	r3, [r3, #0]
}
10042e6a:	0018      	movs	r0, r3
10042e6c:	46bd      	mov	sp, r7
10042e6e:	b005      	add	sp, #20
10042e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042e72:	46c0      	nop			@ (mov r8, r8)
10042e74:	200002d0 	.word	0x200002d0
10042e78:	20000328 	.word	0x20000328

10042e7c <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10042e7c:	b580      	push	{r7, lr}
10042e7e:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10042e80:	46c0      	nop			@ (mov r8, r8)
10042e82:	46bd      	mov	sp, r7
10042e84:	bd80      	pop	{r7, pc}
	...

10042e88 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10042e88:	b580      	push	{r7, lr}
10042e8a:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10042e8c:	4b03      	ldr	r3, [pc, #12]	@ (10042e9c <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10042e8e:	2263      	movs	r2, #99	@ 0x63
10042e90:	2100      	movs	r1, #0
10042e92:	5499      	strb	r1, [r3, r2]
}
10042e94:	46c0      	nop			@ (mov r8, r8)
10042e96:	46bd      	mov	sp, r7
10042e98:	bd80      	pop	{r7, pc}
10042e9a:	46c0      	nop			@ (mov r8, r8)
10042e9c:	200002d0 	.word	0x200002d0

10042ea0 <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10042ea0:	b580      	push	{r7, lr}
10042ea2:	b082      	sub	sp, #8
10042ea4:	af00      	add	r7, sp, #0
10042ea6:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10042ea8:	687b      	ldr	r3, [r7, #4]
10042eaa:	0018      	movs	r0, r3
10042eac:	f000 f8b2 	bl	10043014 <_us_to_systime>
10042eb0:	0003      	movs	r3, r0
}
10042eb2:	0018      	movs	r0, r3
10042eb4:	46bd      	mov	sp, r7
10042eb6:	b002      	add	sp, #8
10042eb8:	bd80      	pop	{r7, pc}
	...

10042ebc <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10042ebc:	b580      	push	{r7, lr}
10042ebe:	b082      	sub	sp, #8
10042ec0:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10042ec2:	1d3a      	adds	r2, r7, #4
10042ec4:	4b05      	ldr	r3, [pc, #20]	@ (10042edc <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10042ec6:	0011      	movs	r1, r2
10042ec8:	0018      	movs	r0, r3
10042eca:	f000 f8cd 	bl	10043068 <_get_system_time_and_machine>
10042ece:	0002      	movs	r2, r0
10042ed0:	000b      	movs	r3, r1
}
10042ed2:	0010      	movs	r0, r2
10042ed4:	0019      	movs	r1, r3
10042ed6:	46bd      	mov	sp, r7
10042ed8:	b002      	add	sp, #8
10042eda:	bd80      	pop	{r7, pc}
10042edc:	200002d0 	.word	0x200002d0

10042ee0 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10042ee0:	b590      	push	{r4, r7, lr}
10042ee2:	b089      	sub	sp, #36	@ 0x24
10042ee4:	af00      	add	r7, sp, #0
10042ee6:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10042ee8:	4b28      	ldr	r3, [pc, #160]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042eea:	228c      	movs	r2, #140	@ 0x8c
10042eec:	589b      	ldr	r3, [r3, r2]
10042eee:	687a      	ldr	r2, [r7, #4]
10042ef0:	0011      	movs	r1, r2
10042ef2:	0018      	movs	r0, r3
10042ef4:	f000 f9d4 	bl	100432a0 <_remove_timer_in_queue>
10042ef8:	0003      	movs	r3, r0
10042efa:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10042efc:	210f      	movs	r1, #15
10042efe:	187b      	adds	r3, r7, r1
10042f00:	2200      	movs	r2, #0
10042f02:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10042f04:	687b      	ldr	r3, [r7, #4]
10042f06:	2200      	movs	r2, #0
10042f08:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10042f0a:	4b20      	ldr	r3, [pc, #128]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f0c:	228c      	movs	r2, #140	@ 0x8c
10042f0e:	589b      	ldr	r3, [r3, r2]
10042f10:	69fa      	ldr	r2, [r7, #28]
10042f12:	429a      	cmp	r2, r3
10042f14:	d031      	beq.n	10042f7a <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10042f16:	000c      	movs	r4, r1
10042f18:	187a      	adds	r2, r7, r1
10042f1a:	69fb      	ldr	r3, [r7, #28]
10042f1c:	0011      	movs	r1, r2
10042f1e:	0018      	movs	r0, r3
10042f20:	f000 f90a 	bl	10043138 <_update_user_timeout>
10042f24:	0002      	movs	r2, r0
10042f26:	4b19      	ldr	r3, [pc, #100]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f28:	218c      	movs	r1, #140	@ 0x8c
10042f2a:	505a      	str	r2, [r3, r1]
    if (expired)
10042f2c:	193b      	adds	r3, r7, r4
10042f2e:	781b      	ldrb	r3, [r3, #0]
10042f30:	2b00      	cmp	r3, #0
10042f32:	d026      	beq.n	10042f82 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10042f34:	f3ef 8310 	mrs	r3, PRIMASK
10042f38:	617b      	str	r3, [r7, #20]
  return(result);
10042f3a:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10042f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10042f3e:	b672      	cpsid	i
}
10042f40:	46c0      	nop			@ (mov r8, r8)
10042f42:	4b12      	ldr	r3, [pc, #72]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f44:	2291      	movs	r2, #145	@ 0x91
10042f46:	5c9b      	ldrb	r3, [r3, r2]
10042f48:	3301      	adds	r3, #1
10042f4a:	4a10      	ldr	r2, [pc, #64]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f4c:	2192      	movs	r1, #146	@ 0x92
10042f4e:	5c52      	ldrb	r2, [r2, r1]
10042f50:	4293      	cmp	r3, r2
10042f52:	d103      	bne.n	10042f5c <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10042f54:	4b0d      	ldr	r3, [pc, #52]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f56:	2291      	movs	r2, #145	@ 0x91
10042f58:	5c9b      	ldrb	r3, [r3, r2]
10042f5a:	e004      	b.n	10042f66 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10042f5c:	4b0b      	ldr	r3, [pc, #44]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f5e:	2291      	movs	r2, #145	@ 0x91
10042f60:	5c9b      	ldrb	r3, [r3, r2]
10042f62:	3301      	adds	r3, #1
10042f64:	b2db      	uxtb	r3, r3
10042f66:	4a09      	ldr	r2, [pc, #36]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f68:	2191      	movs	r1, #145	@ 0x91
10042f6a:	5453      	strb	r3, [r2, r1]
10042f6c:	69bb      	ldr	r3, [r7, #24]
10042f6e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042f70:	693b      	ldr	r3, [r7, #16]
10042f72:	f383 8810 	msr	PRIMASK, r3
}
10042f76:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10042f78:	e003      	b.n	10042f82 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10042f7a:	4b04      	ldr	r3, [pc, #16]	@ (10042f8c <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10042f7c:	218c      	movs	r1, #140	@ 0x8c
10042f7e:	69fa      	ldr	r2, [r7, #28]
10042f80:	505a      	str	r2, [r3, r1]
}
10042f82:	46c0      	nop			@ (mov r8, r8)
10042f84:	46bd      	mov	sp, r7
10042f86:	b009      	add	sp, #36	@ 0x24
10042f88:	bd90      	pop	{r4, r7, pc}
10042f8a:	46c0      	nop			@ (mov r8, r8)
10042f8c:	200002d0 	.word	0x200002d0

10042f90 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10042f90:	b580      	push	{r7, lr}
10042f92:	b082      	sub	sp, #8
10042f94:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10042f96:	2300      	movs	r3, #0
10042f98:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10042f9a:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10042f9c:	4b13      	ldr	r3, [pc, #76]	@ (10042fec <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10042f9e:	0018      	movs	r0, r3
10042fa0:	f7ff fe74 	bl	10042c8c <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10042fa4:	4b12      	ldr	r3, [pc, #72]	@ (10042ff0 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10042fa6:	2291      	movs	r2, #145	@ 0x91
10042fa8:	5c9b      	ldrb	r3, [r3, r2]
10042faa:	3301      	adds	r3, #1
10042fac:	4a10      	ldr	r2, [pc, #64]	@ (10042ff0 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10042fae:	2192      	movs	r1, #146	@ 0x92
10042fb0:	5c52      	ldrb	r2, [r2, r1]
10042fb2:	4293      	cmp	r3, r2
10042fb4:	d103      	bne.n	10042fbe <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
10042fb6:	4b0e      	ldr	r3, [pc, #56]	@ (10042ff0 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10042fb8:	2291      	movs	r2, #145	@ 0x91
10042fba:	5c9b      	ldrb	r3, [r3, r2]
10042fbc:	e004      	b.n	10042fc8 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
10042fbe:	4b0c      	ldr	r3, [pc, #48]	@ (10042ff0 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10042fc0:	2291      	movs	r2, #145	@ 0x91
10042fc2:	5c9b      	ldrb	r3, [r3, r2]
10042fc4:	3301      	adds	r3, #1
10042fc6:	b2db      	uxtb	r3, r3
10042fc8:	4a09      	ldr	r2, [pc, #36]	@ (10042ff0 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10042fca:	2191      	movs	r1, #145	@ 0x91
10042fcc:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10042fce:	4b07      	ldr	r3, [pc, #28]	@ (10042fec <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10042fd0:	0018      	movs	r0, r3
10042fd2:	f7ff feb7 	bl	10042d44 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10042fd6:	4b05      	ldr	r3, [pc, #20]	@ (10042fec <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10042fd8:	0018      	movs	r0, r3
10042fda:	f7ff fec1 	bl	10042d60 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10042fde:	0003      	movs	r3, r0
10042fe0:	607b      	str	r3, [r7, #4]
}
10042fe2:	46c0      	nop			@ (mov r8, r8)
10042fe4:	46bd      	mov	sp, r7
10042fe6:	b002      	add	sp, #8
10042fe8:	bd80      	pop	{r7, pc}
10042fea:	46c0      	nop			@ (mov r8, r8)
10042fec:	60001800 	.word	0x60001800
10042ff0:	200002d0 	.word	0x200002d0

10042ff4 <_timer_start_calibration>:
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;

}

static void _timer_start_calibration(void)
{
10042ff4:	b580      	push	{r7, lr}
10042ff6:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10042ff8:	4b05      	ldr	r3, [pc, #20]	@ (10043010 <_timer_start_calibration+0x1c>)
10042ffa:	0018      	movs	r0, r3
10042ffc:	f7ff fecc 	bl	10042d98 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10043000:	4b03      	ldr	r3, [pc, #12]	@ (10043010 <_timer_start_calibration+0x1c>)
10043002:	0018      	movs	r0, r3
10043004:	f7ff febd 	bl	10042d82 <LL_RADIO_TIMER_StartLSICalibration>
}
10043008:	46c0      	nop			@ (mov r8, r8)
1004300a:	46bd      	mov	sp, r7
1004300c:	bd80      	pop	{r7, pc}
1004300e:	46c0      	nop			@ (mov r8, r8)
10043010:	60001000 	.word	0x60001000

10043014 <_us_to_systime>:
  }

}

static uint32_t _us_to_systime(uint32_t time)
{
10043014:	b580      	push	{r7, lr}
10043016:	b084      	sub	sp, #16
10043018:	af00      	add	r7, sp, #0
1004301a:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004301c:	687b      	ldr	r3, [r7, #4]
1004301e:	2268      	movs	r2, #104	@ 0x68
10043020:	4353      	muls	r3, r2
10043022:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10043024:	687b      	ldr	r3, [r7, #4]
10043026:	22db      	movs	r2, #219	@ 0xdb
10043028:	4353      	muls	r3, r2
1004302a:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004302c:	68fb      	ldr	r3, [r7, #12]
1004302e:	0a1a      	lsrs	r2, r3, #8
10043030:	68bb      	ldr	r3, [r7, #8]
10043032:	0c1b      	lsrs	r3, r3, #16
10043034:	18d3      	adds	r3, r2, r3
}
10043036:	0018      	movs	r0, r3
10043038:	46bd      	mov	sp, r7
1004303a:	b004      	add	sp, #16
1004303c:	bd80      	pop	{r7, pc}
	...

10043040 <_calibration_callback>:
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
}

static void _calibration_callback(void *handle)
{
10043040:	b580      	push	{r7, lr}
10043042:	b082      	sub	sp, #8
10043044:	af00      	add	r7, sp, #0
10043046:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10043048:	4b06      	ldr	r3, [pc, #24]	@ (10043064 <_calibration_callback+0x24>)
1004304a:	781b      	ldrb	r3, [r3, #0]
1004304c:	2b00      	cmp	r3, #0
1004304e:	d001      	beq.n	10043054 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
10043050:	f7ff ffd0 	bl	10042ff4 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
10043054:	4b03      	ldr	r3, [pc, #12]	@ (10043064 <_calibration_callback+0x24>)
10043056:	2201      	movs	r2, #1
10043058:	721a      	strb	r2, [r3, #8]
}
1004305a:	46c0      	nop			@ (mov r8, r8)
1004305c:	46bd      	mov	sp, r7
1004305e:	b002      	add	sp, #8
10043060:	bd80      	pop	{r7, pc}
10043062:	46c0      	nop			@ (mov r8, r8)
10043064:	200002d0 	.word	0x200002d0

10043068 <_get_system_time_and_machine>:
  }
  return expired;
}

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10043068:	b5b0      	push	{r4, r5, r7, lr}
1004306a:	b08a      	sub	sp, #40	@ 0x28
1004306c:	af00      	add	r7, sp, #0
1004306e:	60f8      	str	r0, [r7, #12]
10043070:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10043072:	f3ef 8310 	mrs	r3, PRIMASK
10043076:	617b      	str	r3, [r7, #20]
  return(result);
10043078:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004307a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004307c:	b672      	cpsid	i
}
1004307e:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
10043080:	68fb      	ldr	r3, [r7, #12]
10043082:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10043084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10043086:	623a      	str	r2, [r7, #32]
10043088:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004308a:	4b29      	ldr	r3, [pc, #164]	@ (10043130 <_get_system_time_and_machine+0xc8>)
1004308c:	0018      	movs	r0, r3
1004308e:	f7ff fe25 	bl	10042cdc <LL_RADIO_TIMER_GetAbsoluteTime>
10043092:	0002      	movs	r2, r0
10043094:	68bb      	ldr	r3, [r7, #8]
10043096:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
10043098:	68bb      	ldr	r3, [r7, #8]
1004309a:	681a      	ldr	r2, [r3, #0]
1004309c:	68fb      	ldr	r3, [r7, #12]
1004309e:	2180      	movs	r1, #128	@ 0x80
100430a0:	585b      	ldr	r3, [r3, r1]
100430a2:	1ad3      	subs	r3, r2, r3
100430a4:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100430a6:	68fb      	ldr	r3, [r7, #12]
100430a8:	69db      	ldr	r3, [r3, #28]
100430aa:	0019      	movs	r1, r3
100430ac:	4a21      	ldr	r2, [pc, #132]	@ (10043134 <_get_system_time_and_machine+0xcc>)
100430ae:	69bb      	ldr	r3, [r7, #24]
100430b0:	0018      	movs	r0, r3
100430b2:	f7fd f805 	bl	100400c0 <blue_unit_conversion>
100430b6:	0003      	movs	r3, r0
100430b8:	603b      	str	r3, [r7, #0]
100430ba:	2300      	movs	r3, #0
100430bc:	607b      	str	r3, [r7, #4]
100430be:	6a3a      	ldr	r2, [r7, #32]
100430c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100430c2:	6838      	ldr	r0, [r7, #0]
100430c4:	6879      	ldr	r1, [r7, #4]
100430c6:	1812      	adds	r2, r2, r0
100430c8:	414b      	adcs	r3, r1
100430ca:	623a      	str	r2, [r7, #32]
100430cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
100430ce:	68fb      	ldr	r3, [r7, #12]
100430d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
100430d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100430d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100430d6:	4299      	cmp	r1, r3
100430d8:	d305      	bcc.n	100430e6 <_get_system_time_and_machine+0x7e>
100430da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100430dc:	4299      	cmp	r1, r3
100430de:	d115      	bne.n	1004310c <_get_system_time_and_machine+0xa4>
100430e0:	6a39      	ldr	r1, [r7, #32]
100430e2:	4291      	cmp	r1, r2
100430e4:	d212      	bcs.n	1004310c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
100430e6:	68fb      	ldr	r3, [r7, #12]
100430e8:	69db      	ldr	r3, [r3, #28]
100430ea:	0019      	movs	r1, r3
100430ec:	4a11      	ldr	r2, [pc, #68]	@ (10043134 <_get_system_time_and_machine+0xcc>)
100430ee:	2301      	movs	r3, #1
100430f0:	425b      	negs	r3, r3
100430f2:	0018      	movs	r0, r3
100430f4:	f7fc ffe4 	bl	100400c0 <blue_unit_conversion>
100430f8:	0003      	movs	r3, r0
100430fa:	001c      	movs	r4, r3
100430fc:	2300      	movs	r3, #0
100430fe:	001d      	movs	r5, r3
10043100:	6a3a      	ldr	r2, [r7, #32]
10043102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043104:	1912      	adds	r2, r2, r4
10043106:	416b      	adcs	r3, r5
10043108:	623a      	str	r2, [r7, #32]
1004310a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004310c:	68f9      	ldr	r1, [r7, #12]
1004310e:	6a3a      	ldr	r2, [r7, #32]
10043110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043112:	678a      	str	r2, [r1, #120]	@ 0x78
10043114:	67cb      	str	r3, [r1, #124]	@ 0x7c
10043116:	69fb      	ldr	r3, [r7, #28]
10043118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004311a:	693b      	ldr	r3, [r7, #16]
1004311c:	f383 8810 	msr	PRIMASK, r3
}
10043120:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10043122:	6a3a      	ldr	r2, [r7, #32]
10043124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10043126:	0010      	movs	r0, r2
10043128:	0019      	movs	r1, r3
1004312a:	46bd      	mov	sp, r7
1004312c:	b00a      	add	sp, #40	@ 0x28
1004312e:	bdb0      	pop	{r4, r5, r7, pc}
10043130:	60001800 	.word	0x60001800
10043134:	00000635 	.word	0x00000635

10043138 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10043138:	b5b0      	push	{r4, r5, r7, lr}
1004313a:	b08a      	sub	sp, #40	@ 0x28
1004313c:	af00      	add	r7, sp, #0
1004313e:	6078      	str	r0, [r7, #4]
10043140:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
10043142:	687b      	ldr	r3, [r7, #4]
10043144:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
10043146:	687b      	ldr	r3, [r7, #4]
10043148:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004314a:	683b      	ldr	r3, [r7, #0]
1004314c:	2200      	movs	r2, #0
1004314e:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10043150:	e033      	b.n	100431ba <_update_user_timeout+0x82>
  {
    if (curr->active)
10043152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043154:	7b1b      	ldrb	r3, [r3, #12]
10043156:	2b00      	cmp	r3, #0
10043158:	d02c      	beq.n	100431b4 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004315a:	f3ef 8310 	mrs	r3, PRIMASK
1004315e:	60fb      	str	r3, [r7, #12]
  return(result);
10043160:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
10043162:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10043164:	b672      	cpsid	i
}
10043166:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10043168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004316a:	681c      	ldr	r4, [r3, #0]
1004316c:	685d      	ldr	r5, [r3, #4]
1004316e:	f7ff fea5 	bl	10042ebc <HAL_RADIO_TIMER_GetCurrentSysTime>
10043172:	0002      	movs	r2, r0
10043174:	000b      	movs	r3, r1
10043176:	1aa4      	subs	r4, r4, r2
10043178:	419d      	sbcs	r5, r3
1004317a:	0022      	movs	r2, r4
1004317c:	002b      	movs	r3, r5
1004317e:	613a      	str	r2, [r7, #16]
10043180:	617b      	str	r3, [r7, #20]
      if (delay > 0)
10043182:	697b      	ldr	r3, [r7, #20]
10043184:	2b00      	cmp	r3, #0
10043186:	dc05      	bgt.n	10043194 <_update_user_timeout+0x5c>
10043188:	697b      	ldr	r3, [r7, #20]
1004318a:	2b00      	cmp	r3, #0
1004318c:	d108      	bne.n	100431a0 <_update_user_timeout+0x68>
1004318e:	693b      	ldr	r3, [r7, #16]
10043190:	2b00      	cmp	r3, #0
10043192:	d005      	beq.n	100431a0 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
10043194:	693b      	ldr	r3, [r7, #16]
10043196:	2101      	movs	r1, #1
10043198:	0018      	movs	r0, r3
1004319a:	f000 f81d 	bl	100431d8 <VTIMER_SetWakeupTime>
1004319e:	e002      	b.n	100431a6 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
100431a0:	683b      	ldr	r3, [r7, #0]
100431a2:	2201      	movs	r2, #1
100431a4:	701a      	strb	r2, [r3, #0]
100431a6:	69fb      	ldr	r3, [r7, #28]
100431a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100431aa:	68bb      	ldr	r3, [r7, #8]
100431ac:	f383 8810 	msr	PRIMASK, r3
}
100431b0:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100431b2:	e005      	b.n	100431c0 <_update_user_timeout+0x88>
    }
    curr = curr->next;
100431b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100431b6:	691b      	ldr	r3, [r3, #16]
100431b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
100431ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100431bc:	2b00      	cmp	r3, #0
100431be:	d1c8      	bne.n	10043152 <_update_user_timeout+0x1a>
  }
  if (*expired)
100431c0:	683b      	ldr	r3, [r7, #0]
100431c2:	781b      	ldrb	r3, [r3, #0]
100431c4:	2b00      	cmp	r3, #0
100431c6:	d001      	beq.n	100431cc <_update_user_timeout+0x94>
  {
    return rootOrig;
100431c8:	6a3b      	ldr	r3, [r7, #32]
100431ca:	e000      	b.n	100431ce <_update_user_timeout+0x96>
  }

  return curr;
100431cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
100431ce:	0018      	movs	r0, r3
100431d0:	46bd      	mov	sp, r7
100431d2:	b00a      	add	sp, #40	@ 0x28
100431d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

100431d8 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
100431d8:	b580      	push	{r7, lr}
100431da:	b084      	sub	sp, #16
100431dc:	af00      	add	r7, sp, #0
100431de:	6078      	str	r0, [r7, #4]
100431e0:	000a      	movs	r2, r1
100431e2:	1cfb      	adds	r3, r7, #3
100431e4:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
100431e6:	4b15      	ldr	r3, [pc, #84]	@ (1004323c <VTIMER_SetWakeupTime+0x64>)
100431e8:	699b      	ldr	r3, [r3, #24]
100431ea:	0019      	movs	r1, r3
100431ec:	4a14      	ldr	r2, [pc, #80]	@ (10043240 <VTIMER_SetWakeupTime+0x68>)
100431ee:	687b      	ldr	r3, [r7, #4]
100431f0:	0018      	movs	r0, r3
100431f2:	f7fc ff65 	bl	100400c0 <blue_unit_conversion>
100431f6:	0003      	movs	r3, r0
100431f8:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
100431fa:	687b      	ldr	r3, [r7, #4]
100431fc:	2b20      	cmp	r3, #32
100431fe:	d200      	bcs.n	10043202 <VTIMER_SetWakeupTime+0x2a>
10043200:	2320      	movs	r3, #32
10043202:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10043204:	4b0f      	ldr	r3, [pc, #60]	@ (10043244 <VTIMER_SetWakeupTime+0x6c>)
10043206:	0018      	movs	r0, r3
10043208:	f7ff fd68 	bl	10042cdc <LL_RADIO_TIMER_GetAbsoluteTime>
1004320c:	0003      	movs	r3, r0
1004320e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10043210:	687a      	ldr	r2, [r7, #4]
10043212:	68fb      	ldr	r3, [r7, #12]
10043214:	18d3      	adds	r3, r2, r3
10043216:	3308      	adds	r3, #8
10043218:	4a0a      	ldr	r2, [pc, #40]	@ (10043244 <VTIMER_SetWakeupTime+0x6c>)
1004321a:	0019      	movs	r1, r3
1004321c:	0010      	movs	r0, r2
1004321e:	f7ff fd51 	bl	10042cc4 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10043222:	4b08      	ldr	r3, [pc, #32]	@ (10043244 <VTIMER_SetWakeupTime+0x6c>)
10043224:	0018      	movs	r0, r3
10043226:	f7ff fd63 	bl	10042cf0 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004322a:	4b06      	ldr	r3, [pc, #24]	@ (10043244 <VTIMER_SetWakeupTime+0x6c>)
1004322c:	0018      	movs	r0, r3
1004322e:	f7ff fd1d 	bl	10042c6c <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
10043232:	68fb      	ldr	r3, [r7, #12]
}
10043234:	0018      	movs	r0, r3
10043236:	46bd      	mov	sp, r7
10043238:	b004      	add	sp, #16
1004323a:	bd80      	pop	{r7, pc}
1004323c:	200002d0 	.word	0x200002d0
10043240:	00000326 	.word	0x00000326
10043244:	60001800 	.word	0x60001800

10043248 <_virtualTimeBaseEnable>:

  return returnValue;
}

static void _virtualTimeBaseEnable(FunctionalState state)
{
10043248:	b580      	push	{r7, lr}
1004324a:	b082      	sub	sp, #8
1004324c:	af00      	add	r7, sp, #0
1004324e:	0002      	movs	r2, r0
10043250:	1dfb      	adds	r3, r7, #7
10043252:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
10043254:	1dfb      	adds	r3, r7, #7
10043256:	781b      	ldrb	r3, [r3, #0]
10043258:	2b00      	cmp	r3, #0
1004325a:	d010      	beq.n	1004327e <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004325c:	4b0e      	ldr	r3, [pc, #56]	@ (10043298 <_virtualTimeBaseEnable+0x50>)
1004325e:	2290      	movs	r2, #144	@ 0x90
10043260:	5c9b      	ldrb	r3, [r3, r2]
10043262:	2201      	movs	r2, #1
10043264:	4053      	eors	r3, r2
10043266:	b2db      	uxtb	r3, r3
10043268:	2b00      	cmp	r3, #0
1004326a:	d010      	beq.n	1004328e <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004326c:	4b0b      	ldr	r3, [pc, #44]	@ (1004329c <_virtualTimeBaseEnable+0x54>)
1004326e:	0018      	movs	r0, r3
10043270:	f7ff fee6 	bl	10043040 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
10043274:	4b08      	ldr	r3, [pc, #32]	@ (10043298 <_virtualTimeBaseEnable+0x50>)
10043276:	2290      	movs	r2, #144	@ 0x90
10043278:	2101      	movs	r1, #1
1004327a:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004327c:	e007      	b.n	1004328e <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004327e:	4b07      	ldr	r3, [pc, #28]	@ (1004329c <_virtualTimeBaseEnable+0x54>)
10043280:	0018      	movs	r0, r3
10043282:	f7ff fe2d 	bl	10042ee0 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
10043286:	4b04      	ldr	r3, [pc, #16]	@ (10043298 <_virtualTimeBaseEnable+0x50>)
10043288:	2290      	movs	r2, #144	@ 0x90
1004328a:	2100      	movs	r1, #0
1004328c:	5499      	strb	r1, [r3, r2]
}
1004328e:	46c0      	nop			@ (mov r8, r8)
10043290:	46bd      	mov	sp, r7
10043292:	b002      	add	sp, #8
10043294:	bd80      	pop	{r7, pc}
10043296:	46c0      	nop			@ (mov r8, r8)
10043298:	200002d0 	.word	0x200002d0
1004329c:	20000310 	.word	0x20000310

100432a0 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
100432a0:	b580      	push	{r7, lr}
100432a2:	b086      	sub	sp, #24
100432a4:	af00      	add	r7, sp, #0
100432a6:	6078      	str	r0, [r7, #4]
100432a8:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
100432aa:	687b      	ldr	r3, [r7, #4]
100432ac:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
100432ae:	2300      	movs	r3, #0
100432b0:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
100432b2:	687b      	ldr	r3, [r7, #4]
100432b4:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
100432b6:	e004      	b.n	100432c2 <_remove_timer_in_queue+0x22>
  {
    prev = current;
100432b8:	697b      	ldr	r3, [r7, #20]
100432ba:	613b      	str	r3, [r7, #16]
    current = current->next;
100432bc:	697b      	ldr	r3, [r7, #20]
100432be:	691b      	ldr	r3, [r3, #16]
100432c0:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
100432c2:	697b      	ldr	r3, [r7, #20]
100432c4:	2b00      	cmp	r3, #0
100432c6:	d003      	beq.n	100432d0 <_remove_timer_in_queue+0x30>
100432c8:	697a      	ldr	r2, [r7, #20]
100432ca:	683b      	ldr	r3, [r7, #0]
100432cc:	429a      	cmp	r2, r3
100432ce:	d1f3      	bne.n	100432b8 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
100432d0:	697b      	ldr	r3, [r7, #20]
100432d2:	2b00      	cmp	r3, #0
100432d4:	d00b      	beq.n	100432ee <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
100432d6:	697a      	ldr	r2, [r7, #20]
100432d8:	687b      	ldr	r3, [r7, #4]
100432da:	429a      	cmp	r2, r3
100432dc:	d103      	bne.n	100432e6 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
100432de:	697b      	ldr	r3, [r7, #20]
100432e0:	691b      	ldr	r3, [r3, #16]
100432e2:	60fb      	str	r3, [r7, #12]
100432e4:	e003      	b.n	100432ee <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
100432e6:	697b      	ldr	r3, [r7, #20]
100432e8:	691a      	ldr	r2, [r3, #16]
100432ea:	693b      	ldr	r3, [r7, #16]
100432ec:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100432ee:	68fb      	ldr	r3, [r7, #12]
}
100432f0:	0018      	movs	r0, r3
100432f2:	46bd      	mov	sp, r7
100432f4:	b006      	add	sp, #24
100432f6:	bd80      	pop	{r7, pc}

100432f8 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
100432f8:	b5b0      	push	{r4, r5, r7, lr}
100432fa:	b08a      	sub	sp, #40	@ 0x28
100432fc:	af00      	add	r7, sp, #0
100432fe:	6078      	str	r0, [r7, #4]
10043300:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10043302:	683b      	ldr	r3, [r7, #0]
10043304:	2200      	movs	r2, #0
10043306:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
10043308:	687b      	ldr	r3, [r7, #4]
1004330a:	7a9b      	ldrb	r3, [r3, #10]
1004330c:	2b00      	cmp	r3, #0
1004330e:	d100      	bne.n	10043312 <_check_radio_activity+0x1a>
10043310:	e070      	b.n	100433f4 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10043312:	4b3a      	ldr	r3, [pc, #232]	@ (100433fc <_check_radio_activity+0x104>)
10043314:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10043316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
10043318:	4938      	ldr	r1, [pc, #224]	@ (100433fc <_check_radio_activity+0x104>)
1004331a:	6849      	ldr	r1, [r1, #4]
1004331c:	000c      	movs	r4, r1
1004331e:	2100      	movs	r1, #0
10043320:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10043322:	1912      	adds	r2, r2, r4
10043324:	416b      	adcs	r3, r5
10043326:	623a      	str	r2, [r7, #32]
10043328:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004332a:	f3ef 8310 	mrs	r3, PRIMASK
1004332e:	60fb      	str	r3, [r7, #12]
  return(result);
10043330:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10043332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10043334:	b672      	cpsid	i
}
10043336:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
10043338:	f7ff fdc0 	bl	10042ebc <HAL_RADIO_TIMER_GetCurrentSysTime>
1004333c:	0002      	movs	r2, r0
1004333e:	000b      	movs	r3, r1
10043340:	613a      	str	r2, [r7, #16]
10043342:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10043344:	687b      	ldr	r3, [r7, #4]
10043346:	681a      	ldr	r2, [r3, #0]
10043348:	685b      	ldr	r3, [r3, #4]
1004334a:	6a38      	ldr	r0, [r7, #32]
1004334c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004334e:	24c8      	movs	r4, #200	@ 0xc8
10043350:	02a4      	lsls	r4, r4, #10
10043352:	2500      	movs	r5, #0
10043354:	1900      	adds	r0, r0, r4
10043356:	4169      	adcs	r1, r5
10043358:	4299      	cmp	r1, r3
1004335a:	d812      	bhi.n	10043382 <_check_radio_activity+0x8a>
1004335c:	d101      	bne.n	10043362 <_check_radio_activity+0x6a>
1004335e:	4290      	cmp	r0, r2
10043360:	d80f      	bhi.n	10043382 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
10043362:	6a3a      	ldr	r2, [r7, #32]
10043364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043366:	20b9      	movs	r0, #185	@ 0xb9
10043368:	0040      	lsls	r0, r0, #1
1004336a:	2100      	movs	r1, #0
1004336c:	1812      	adds	r2, r2, r0
1004336e:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10043370:	6979      	ldr	r1, [r7, #20]
10043372:	4299      	cmp	r1, r3
10043374:	d805      	bhi.n	10043382 <_check_radio_activity+0x8a>
10043376:	6979      	ldr	r1, [r7, #20]
10043378:	4299      	cmp	r1, r3
1004337a:	d135      	bne.n	100433e8 <_check_radio_activity+0xf0>
1004337c:	6939      	ldr	r1, [r7, #16]
1004337e:	4291      	cmp	r1, r2
10043380:	d932      	bls.n	100433e8 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10043382:	687b      	ldr	r3, [r7, #4]
10043384:	681a      	ldr	r2, [r3, #0]
10043386:	685b      	ldr	r3, [r3, #4]
10043388:	204c      	movs	r0, #76	@ 0x4c
1004338a:	4240      	negs	r0, r0
1004338c:	17c1      	asrs	r1, r0, #31
1004338e:	1880      	adds	r0, r0, r2
10043390:	4159      	adcs	r1, r3
10043392:	693a      	ldr	r2, [r7, #16]
10043394:	697b      	ldr	r3, [r7, #20]
10043396:	240a      	movs	r4, #10
10043398:	2500      	movs	r5, #0
1004339a:	1912      	adds	r2, r2, r4
1004339c:	416b      	adcs	r3, r5
1004339e:	4299      	cmp	r1, r3
100433a0:	d802      	bhi.n	100433a8 <_check_radio_activity+0xb0>
100433a2:	d11a      	bne.n	100433da <_check_radio_activity+0xe2>
100433a4:	4290      	cmp	r0, r2
100433a6:	d918      	bls.n	100433da <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
100433a8:	687b      	ldr	r3, [r7, #4]
100433aa:	681a      	ldr	r2, [r3, #0]
100433ac:	685b      	ldr	r3, [r3, #4]
100433ae:	0010      	movs	r0, r2
100433b0:	687b      	ldr	r3, [r7, #4]
100433b2:	7b19      	ldrb	r1, [r3, #12]
100433b4:	687b      	ldr	r3, [r7, #4]
100433b6:	7a1b      	ldrb	r3, [r3, #8]
100433b8:	001a      	movs	r2, r3
100433ba:	f000 f821 	bl	10043400 <TIMER_SetRadioTimerValue>
100433be:	0003      	movs	r3, r0
100433c0:	001a      	movs	r2, r3
100433c2:	683b      	ldr	r3, [r7, #0]
100433c4:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
100433c6:	687b      	ldr	r3, [r7, #4]
100433c8:	2200      	movs	r2, #0
100433ca:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
100433cc:	687b      	ldr	r3, [r7, #4]
100433ce:	2201      	movs	r2, #1
100433d0:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
100433d2:	687b      	ldr	r3, [r7, #4]
100433d4:	2201      	movs	r2, #1
100433d6:	72da      	strb	r2, [r3, #11]
100433d8:	e006      	b.n	100433e8 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
100433da:	4b08      	ldr	r3, [pc, #32]	@ (100433fc <_check_radio_activity+0x104>)
100433dc:	2262      	movs	r2, #98	@ 0x62
100433de:	2100      	movs	r1, #0
100433e0:	5499      	strb	r1, [r3, r2]
        *expired = 1;
100433e2:	683b      	ldr	r3, [r7, #0]
100433e4:	2201      	movs	r2, #1
100433e6:	701a      	strb	r2, [r3, #0]
100433e8:	69fb      	ldr	r3, [r7, #28]
100433ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100433ec:	68bb      	ldr	r3, [r7, #8]
100433ee:	f383 8810 	msr	PRIMASK, r3
}
100433f2:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
100433f4:	46c0      	nop			@ (mov r8, r8)
100433f6:	46bd      	mov	sp, r7
100433f8:	b00a      	add	sp, #40	@ 0x28
100433fa:	bdb0      	pop	{r4, r5, r7, pc}
100433fc:	200002d0 	.word	0x200002d0

10043400 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10043400:	b580      	push	{r7, lr}
10043402:	b08a      	sub	sp, #40	@ 0x28
10043404:	af00      	add	r7, sp, #0
10043406:	6078      	str	r0, [r7, #4]
10043408:	0008      	movs	r0, r1
1004340a:	0011      	movs	r1, r2
1004340c:	1cfb      	adds	r3, r7, #3
1004340e:	1c02      	adds	r2, r0, #0
10043410:	701a      	strb	r2, [r3, #0]
10043412:	1cbb      	adds	r3, r7, #2
10043414:	1c0a      	adds	r2, r1, #0
10043416:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10043418:	1cfb      	adds	r3, r7, #3
1004341a:	781b      	ldrb	r3, [r3, #0]
1004341c:	2b00      	cmp	r3, #0
1004341e:	d015      	beq.n	1004344c <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10043420:	1cbb      	adds	r3, r7, #2
10043422:	781b      	ldrb	r3, [r3, #0]
10043424:	2b00      	cmp	r3, #0
10043426:	d008      	beq.n	1004343a <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10043428:	4b67      	ldr	r3, [pc, #412]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
1004342a:	2238      	movs	r2, #56	@ 0x38
1004342c:	5c9b      	ldrb	r3, [r3, r2]
1004342e:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10043430:	4b65      	ldr	r3, [pc, #404]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043432:	223c      	movs	r2, #60	@ 0x3c
10043434:	5c9b      	ldrb	r3, [r3, r2]
10043436:	61fb      	str	r3, [r7, #28]
10043438:	e01d      	b.n	10043476 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004343a:	4b63      	ldr	r3, [pc, #396]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
1004343c:	2239      	movs	r2, #57	@ 0x39
1004343e:	5c9b      	ldrb	r3, [r3, r2]
10043440:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10043442:	4b61      	ldr	r3, [pc, #388]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043444:	223c      	movs	r2, #60	@ 0x3c
10043446:	5c9b      	ldrb	r3, [r3, r2]
10043448:	61fb      	str	r3, [r7, #28]
1004344a:	e014      	b.n	10043476 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004344c:	1cbb      	adds	r3, r7, #2
1004344e:	781b      	ldrb	r3, [r3, #0]
10043450:	2b00      	cmp	r3, #0
10043452:	d008      	beq.n	10043466 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10043454:	4b5c      	ldr	r3, [pc, #368]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043456:	223a      	movs	r2, #58	@ 0x3a
10043458:	5c9b      	ldrb	r3, [r3, r2]
1004345a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004345c:	4b5a      	ldr	r3, [pc, #360]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
1004345e:	223c      	movs	r2, #60	@ 0x3c
10043460:	5c9b      	ldrb	r3, [r3, r2]
10043462:	61fb      	str	r3, [r7, #28]
10043464:	e007      	b.n	10043476 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10043466:	4b58      	ldr	r3, [pc, #352]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043468:	223b      	movs	r2, #59	@ 0x3b
1004346a:	5c9b      	ldrb	r3, [r3, r2]
1004346c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004346e:	4b56      	ldr	r3, [pc, #344]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043470:	223c      	movs	r2, #60	@ 0x3c
10043472:	5c9b      	ldrb	r3, [r3, r2]
10043474:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10043476:	230c      	movs	r3, #12
10043478:	18fa      	adds	r2, r7, r3
1004347a:	4b53      	ldr	r3, [pc, #332]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
1004347c:	0011      	movs	r1, r2
1004347e:	0018      	movs	r0, r3
10043480:	f7ff fdf2 	bl	10043068 <_get_system_time_and_machine>
10043484:	0002      	movs	r2, r0
10043486:	000b      	movs	r3, r1
10043488:	687b      	ldr	r3, [r7, #4]
1004348a:	1a9b      	subs	r3, r3, r2
1004348c:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004348e:	4b4e      	ldr	r3, [pc, #312]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043490:	699b      	ldr	r3, [r3, #24]
10043492:	0019      	movs	r1, r3
10043494:	4a4d      	ldr	r2, [pc, #308]	@ (100435cc <TIMER_SetRadioTimerValue+0x1cc>)
10043496:	697b      	ldr	r3, [r7, #20]
10043498:	0018      	movs	r0, r3
1004349a:	f7fc fe11 	bl	100400c0 <blue_unit_conversion>
1004349e:	0003      	movs	r3, r0
100434a0:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
100434a2:	4b49      	ldr	r3, [pc, #292]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
100434a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
100434a6:	69fb      	ldr	r3, [r7, #28]
100434a8:	18d3      	adds	r3, r2, r3
100434aa:	33c8      	adds	r3, #200	@ 0xc8
100434ac:	697a      	ldr	r2, [r7, #20]
100434ae:	429a      	cmp	r2, r3
100434b0:	d92f      	bls.n	10043512 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
100434b2:	4b47      	ldr	r3, [pc, #284]	@ (100435d0 <TIMER_SetRadioTimerValue+0x1d0>)
100434b4:	795b      	ldrb	r3, [r3, #5]
100434b6:	b2db      	uxtb	r3, r3
100434b8:	001a      	movs	r2, r3
100434ba:	693b      	ldr	r3, [r7, #16]
100434bc:	1a9a      	subs	r2, r3, r2
100434be:	6a3b      	ldr	r3, [r7, #32]
100434c0:	1ad3      	subs	r3, r2, r3
100434c2:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
100434c4:	68fa      	ldr	r2, [r7, #12]
100434c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100434c8:	18d3      	adds	r3, r2, r3
100434ca:	4a42      	ldr	r2, [pc, #264]	@ (100435d4 <TIMER_SetRadioTimerValue+0x1d4>)
100434cc:	0019      	movs	r1, r3
100434ce:	0010      	movs	r0, r2
100434d0:	f7ff fbec 	bl	10042cac <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
100434d4:	4b3f      	ldr	r3, [pc, #252]	@ (100435d4 <TIMER_SetRadioTimerValue+0x1d4>)
100434d6:	2100      	movs	r1, #0
100434d8:	0018      	movs	r0, r3
100434da:	f7ff fc19 	bl	10042d10 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
100434de:	23c0      	movs	r3, #192	@ 0xc0
100434e0:	05db      	lsls	r3, r3, #23
100434e2:	0018      	movs	r0, r3
100434e4:	f7ff fb79 	bl	10042bda <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
100434e8:	23c0      	movs	r3, #192	@ 0xc0
100434ea:	05db      	lsls	r3, r3, #23
100434ec:	0018      	movs	r0, r3
100434ee:	f7ff fb83 	bl	10042bf8 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
100434f2:	4b38      	ldr	r3, [pc, #224]	@ (100435d4 <TIMER_SetRadioTimerValue+0x1d4>)
100434f4:	0018      	movs	r0, r3
100434f6:	f7ff fb9a 	bl	10042c2e <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
100434fa:	4b36      	ldr	r3, [pc, #216]	@ (100435d4 <TIMER_SetRadioTimerValue+0x1d4>)
100434fc:	0018      	movs	r0, r3
100434fe:	f7ff fbf7 	bl	10042cf0 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10043502:	4b33      	ldr	r3, [pc, #204]	@ (100435d0 <TIMER_SetRadioTimerValue+0x1d0>)
10043504:	795b      	ldrb	r3, [r3, #5]
10043506:	b2db      	uxtb	r3, r3
10043508:	001a      	movs	r2, r3
1004350a:	6a3b      	ldr	r3, [r7, #32]
1004350c:	189b      	adds	r3, r3, r2
1004350e:	623b      	str	r3, [r7, #32]
10043510:	e021      	b.n	10043556 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10043512:	4b2d      	ldr	r3, [pc, #180]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043514:	223d      	movs	r2, #61	@ 0x3d
10043516:	5c9b      	ldrb	r3, [r3, r2]
10043518:	001a      	movs	r2, r3
1004351a:	693b      	ldr	r3, [r7, #16]
1004351c:	1a9a      	subs	r2, r3, r2
1004351e:	6a3b      	ldr	r3, [r7, #32]
10043520:	1ad3      	subs	r3, r2, r3
10043522:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10043524:	68fa      	ldr	r2, [r7, #12]
10043526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043528:	18d2      	adds	r2, r2, r3
1004352a:	23c0      	movs	r3, #192	@ 0xc0
1004352c:	05db      	lsls	r3, r3, #23
1004352e:	0011      	movs	r1, r2
10043530:	0018      	movs	r0, r3
10043532:	f7ff fb70 	bl	10042c16 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10043536:	4b27      	ldr	r3, [pc, #156]	@ (100435d4 <TIMER_SetRadioTimerValue+0x1d4>)
10043538:	0018      	movs	r0, r3
1004353a:	f7ff fb87 	bl	10042c4c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004353e:	23c0      	movs	r3, #192	@ 0xc0
10043540:	05db      	lsls	r3, r3, #23
10043542:	0018      	movs	r0, r3
10043544:	f7ff fb39 	bl	10042bba <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10043548:	4b1f      	ldr	r3, [pc, #124]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
1004354a:	223d      	movs	r2, #61	@ 0x3d
1004354c:	5c9b      	ldrb	r3, [r3, r2]
1004354e:	001a      	movs	r2, r3
10043550:	6a3b      	ldr	r3, [r7, #32]
10043552:	189b      	adds	r3, r3, r2
10043554:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10043556:	68fa      	ldr	r2, [r7, #12]
10043558:	693b      	ldr	r3, [r7, #16]
1004355a:	18d2      	adds	r2, r2, r3
1004355c:	4b1a      	ldr	r3, [pc, #104]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
1004355e:	2188      	movs	r1, #136	@ 0x88
10043560:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10043562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043564:	6a3b      	ldr	r3, [r7, #32]
10043566:	18d2      	adds	r2, r2, r3
10043568:	6a3b      	ldr	r3, [r7, #32]
1004356a:	3305      	adds	r3, #5
1004356c:	429a      	cmp	r2, r3
1004356e:	d212      	bcs.n	10043596 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10043570:	23c0      	movs	r3, #192	@ 0xc0
10043572:	05db      	lsls	r3, r3, #23
10043574:	0018      	movs	r0, r3
10043576:	f7ff fb30 	bl	10042bda <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004357a:	23c0      	movs	r3, #192	@ 0xc0
1004357c:	05db      	lsls	r3, r3, #23
1004357e:	0018      	movs	r0, r3
10043580:	f7ff fb3a 	bl	10042bf8 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10043584:	4b13      	ldr	r3, [pc, #76]	@ (100435d4 <TIMER_SetRadioTimerValue+0x1d4>)
10043586:	0018      	movs	r0, r3
10043588:	f7ff fb60 	bl	10042c4c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004358c:	231b      	movs	r3, #27
1004358e:	18fb      	adds	r3, r7, r3
10043590:	2201      	movs	r2, #1
10043592:	701a      	strb	r2, [r3, #0]
10043594:	e010      	b.n	100435b8 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10043596:	4b0c      	ldr	r3, [pc, #48]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
10043598:	69db      	ldr	r3, [r3, #28]
1004359a:	0019      	movs	r1, r3
1004359c:	4a0e      	ldr	r2, [pc, #56]	@ (100435d8 <TIMER_SetRadioTimerValue+0x1d8>)
1004359e:	6a3b      	ldr	r3, [r7, #32]
100435a0:	0018      	movs	r0, r3
100435a2:	f7fc fd8d 	bl	100400c0 <blue_unit_conversion>
100435a6:	0003      	movs	r3, r0
100435a8:	b2d9      	uxtb	r1, r3
100435aa:	4b07      	ldr	r3, [pc, #28]	@ (100435c8 <TIMER_SetRadioTimerValue+0x1c8>)
100435ac:	2284      	movs	r2, #132	@ 0x84
100435ae:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
100435b0:	231b      	movs	r3, #27
100435b2:	18fb      	adds	r3, r7, r3
100435b4:	2200      	movs	r2, #0
100435b6:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
100435b8:	231b      	movs	r3, #27
100435ba:	18fb      	adds	r3, r7, r3
100435bc:	781b      	ldrb	r3, [r3, #0]
}
100435be:	0018      	movs	r0, r3
100435c0:	46bd      	mov	sp, r7
100435c2:	b00a      	add	sp, #40	@ 0x28
100435c4:	bd80      	pop	{r7, pc}
100435c6:	46c0      	nop			@ (mov r8, r8)
100435c8:	200002d0 	.word	0x200002d0
100435cc:	00000326 	.word	0x00000326
100435d0:	200000c0 	.word	0x200000c0
100435d4:	60001800 	.word	0x60001800
100435d8:	00000635 	.word	0x00000635

100435dc <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
100435dc:	b5b0      	push	{r4, r5, r7, lr}
100435de:	b084      	sub	sp, #16
100435e0:	af00      	add	r7, sp, #0
100435e2:	6078      	str	r0, [r7, #4]
100435e4:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
100435e6:	2308      	movs	r3, #8
100435e8:	18fa      	adds	r2, r7, r3
100435ea:	4b12      	ldr	r3, [pc, #72]	@ (10043634 <TIMER_GetPastSysTime+0x58>)
100435ec:	0011      	movs	r1, r2
100435ee:	0018      	movs	r0, r3
100435f0:	f7ff fd3a 	bl	10043068 <_get_system_time_and_machine>
100435f4:	0002      	movs	r2, r0
100435f6:	000b      	movs	r3, r1
100435f8:	6839      	ldr	r1, [r7, #0]
100435fa:	600a      	str	r2, [r1, #0]
100435fc:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
100435fe:	68ba      	ldr	r2, [r7, #8]
10043600:	687b      	ldr	r3, [r7, #4]
10043602:	1ad0      	subs	r0, r2, r3
10043604:	4b0b      	ldr	r3, [pc, #44]	@ (10043634 <TIMER_GetPastSysTime+0x58>)
10043606:	69db      	ldr	r3, [r3, #28]
10043608:	0019      	movs	r1, r3
1004360a:	4b0b      	ldr	r3, [pc, #44]	@ (10043638 <TIMER_GetPastSysTime+0x5c>)
1004360c:	001a      	movs	r2, r3
1004360e:	f7fc fd57 	bl	100400c0 <blue_unit_conversion>
10043612:	0003      	movs	r3, r0
10043614:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10043616:	683b      	ldr	r3, [r7, #0]
10043618:	681a      	ldr	r2, [r3, #0]
1004361a:	685b      	ldr	r3, [r3, #4]
1004361c:	68f9      	ldr	r1, [r7, #12]
1004361e:	000c      	movs	r4, r1
10043620:	2100      	movs	r1, #0
10043622:	000d      	movs	r5, r1
10043624:	1b12      	subs	r2, r2, r4
10043626:	41ab      	sbcs	r3, r5
}
10043628:	0010      	movs	r0, r2
1004362a:	0019      	movs	r1, r3
1004362c:	46bd      	mov	sp, r7
1004362e:	b004      	add	sp, #16
10043630:	bdb0      	pop	{r4, r5, r7, pc}
10043632:	46c0      	nop			@ (mov r8, r8)
10043634:	200002d0 	.word	0x200002d0
10043638:	00000635 	.word	0x00000635

1004363c <HAL_RADIO_TIMER_CpuWakeUpCallback>:
    return 0;
  }
}

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
1004363c:	b580      	push	{r7, lr}
1004363e:	af00      	add	r7, sp, #0
}
10043640:	46c0      	nop			@ (mov r8, r8)
10043642:	46bd      	mov	sp, r7
10043644:	bd80      	pop	{r7, pc}

10043646 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10043646:	b580      	push	{r7, lr}
10043648:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004364a:	f7ff fca1 	bl	10042f90 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004364e:	f7ff fff5 	bl	1004363c <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10043652:	46c0      	nop			@ (mov r8, r8)
10043654:	46bd      	mov	sp, r7
10043656:	bd80      	pop	{r7, pc}

10043658 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10043658:	b580      	push	{r7, lr}
1004365a:	b082      	sub	sp, #8
1004365c:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004365e:	2300      	movs	r3, #0
10043660:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10043662:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10043664:	23c0      	movs	r3, #192	@ 0xc0
10043666:	05db      	lsls	r3, r3, #23
10043668:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004366a:	23c0      	movs	r3, #192	@ 0xc0
1004366c:	05db      	lsls	r3, r3, #23
1004366e:	2101      	movs	r1, #1
10043670:	430a      	orrs	r2, r1
10043672:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10043674:	23c0      	movs	r3, #192	@ 0xc0
10043676:	05db      	lsls	r3, r3, #23
10043678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004367a:	607b      	str	r3, [r7, #4]
}
1004367c:	46c0      	nop			@ (mov r8, r8)
1004367e:	46bd      	mov	sp, r7
10043680:	b002      	add	sp, #8
10043682:	bd80      	pop	{r7, pc}

10043684 <LL_PWR_SetNoPullB>:
{
10043684:	b580      	push	{r7, lr}
10043686:	b082      	sub	sp, #8
10043688:	af00      	add	r7, sp, #0
1004368a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004368c:	4b08      	ldr	r3, [pc, #32]	@ (100436b0 <LL_PWR_SetNoPullB+0x2c>)
1004368e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10043690:	687b      	ldr	r3, [r7, #4]
10043692:	43d9      	mvns	r1, r3
10043694:	4b06      	ldr	r3, [pc, #24]	@ (100436b0 <LL_PWR_SetNoPullB+0x2c>)
10043696:	400a      	ands	r2, r1
10043698:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004369a:	4b05      	ldr	r3, [pc, #20]	@ (100436b0 <LL_PWR_SetNoPullB+0x2c>)
1004369c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004369e:	687b      	ldr	r3, [r7, #4]
100436a0:	43d9      	mvns	r1, r3
100436a2:	4b03      	ldr	r3, [pc, #12]	@ (100436b0 <LL_PWR_SetNoPullB+0x2c>)
100436a4:	400a      	ands	r2, r1
100436a6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100436a8:	46c0      	nop			@ (mov r8, r8)
100436aa:	46bd      	mov	sp, r7
100436ac:	b002      	add	sp, #8
100436ae:	bd80      	pop	{r7, pc}
100436b0:	48500000 	.word	0x48500000

100436b4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
100436b4:	b580      	push	{r7, lr}
100436b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
100436b8:	4b04      	ldr	r3, [pc, #16]	@ (100436cc <LL_RCC_HSE_Enable+0x18>)
100436ba:	681a      	ldr	r2, [r3, #0]
100436bc:	4b03      	ldr	r3, [pc, #12]	@ (100436cc <LL_RCC_HSE_Enable+0x18>)
100436be:	2180      	movs	r1, #128	@ 0x80
100436c0:	0249      	lsls	r1, r1, #9
100436c2:	430a      	orrs	r2, r1
100436c4:	601a      	str	r2, [r3, #0]
}
100436c6:	46c0      	nop			@ (mov r8, r8)
100436c8:	46bd      	mov	sp, r7
100436ca:	bd80      	pop	{r7, pc}
100436cc:	48400000 	.word	0x48400000

100436d0 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
100436d0:	b580      	push	{r7, lr}
100436d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
100436d4:	4b04      	ldr	r3, [pc, #16]	@ (100436e8 <LL_RCC_HSE_Disable+0x18>)
100436d6:	681a      	ldr	r2, [r3, #0]
100436d8:	4b03      	ldr	r3, [pc, #12]	@ (100436e8 <LL_RCC_HSE_Disable+0x18>)
100436da:	4904      	ldr	r1, [pc, #16]	@ (100436ec <LL_RCC_HSE_Disable+0x1c>)
100436dc:	400a      	ands	r2, r1
100436de:	601a      	str	r2, [r3, #0]
}
100436e0:	46c0      	nop			@ (mov r8, r8)
100436e2:	46bd      	mov	sp, r7
100436e4:	bd80      	pop	{r7, pc}
100436e6:	46c0      	nop			@ (mov r8, r8)
100436e8:	48400000 	.word	0x48400000
100436ec:	fffeffff 	.word	0xfffeffff

100436f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
100436f0:	b580      	push	{r7, lr}
100436f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
100436f4:	4b07      	ldr	r3, [pc, #28]	@ (10043714 <LL_RCC_HSE_IsReady+0x24>)
100436f6:	681a      	ldr	r2, [r3, #0]
100436f8:	2380      	movs	r3, #128	@ 0x80
100436fa:	029b      	lsls	r3, r3, #10
100436fc:	401a      	ands	r2, r3
100436fe:	2380      	movs	r3, #128	@ 0x80
10043700:	029b      	lsls	r3, r3, #10
10043702:	429a      	cmp	r2, r3
10043704:	d101      	bne.n	1004370a <LL_RCC_HSE_IsReady+0x1a>
10043706:	2301      	movs	r3, #1
10043708:	e000      	b.n	1004370c <LL_RCC_HSE_IsReady+0x1c>
1004370a:	2300      	movs	r3, #0
}
1004370c:	0018      	movs	r0, r3
1004370e:	46bd      	mov	sp, r7
10043710:	bd80      	pop	{r7, pc}
10043712:	46c0      	nop			@ (mov r8, r8)
10043714:	48400000 	.word	0x48400000

10043718 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10043718:	b580      	push	{r7, lr}
1004371a:	b082      	sub	sp, #8
1004371c:	af00      	add	r7, sp, #0
1004371e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10043720:	4a0b      	ldr	r2, [pc, #44]	@ (10043750 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10043722:	2398      	movs	r3, #152	@ 0x98
10043724:	58d3      	ldr	r3, [r2, r3]
10043726:	4a0b      	ldr	r2, [pc, #44]	@ (10043754 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10043728:	401a      	ands	r2, r3
1004372a:	687b      	ldr	r3, [r7, #4]
1004372c:	021b      	lsls	r3, r3, #8
1004372e:	4908      	ldr	r1, [pc, #32]	@ (10043750 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10043730:	4313      	orrs	r3, r2
10043732:	2298      	movs	r2, #152	@ 0x98
10043734:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10043736:	4a06      	ldr	r2, [pc, #24]	@ (10043750 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10043738:	2398      	movs	r3, #152	@ 0x98
1004373a:	58d3      	ldr	r3, [r2, r3]
1004373c:	4904      	ldr	r1, [pc, #16]	@ (10043750 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004373e:	2280      	movs	r2, #128	@ 0x80
10043740:	4313      	orrs	r3, r2
10043742:	2298      	movs	r2, #152	@ 0x98
10043744:	508b      	str	r3, [r1, r2]
}
10043746:	46c0      	nop			@ (mov r8, r8)
10043748:	46bd      	mov	sp, r7
1004374a:	b002      	add	sp, #8
1004374c:	bd80      	pop	{r7, pc}
1004374e:	46c0      	nop			@ (mov r8, r8)
10043750:	48400000 	.word	0x48400000
10043754:	ffffc0ff 	.word	0xffffc0ff

10043758 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
10043758:	b580      	push	{r7, lr}
1004375a:	b082      	sub	sp, #8
1004375c:	af00      	add	r7, sp, #0
1004375e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10043760:	4a07      	ldr	r2, [pc, #28]	@ (10043780 <LL_RCC_HSE_SetCurrentControl+0x28>)
10043762:	2398      	movs	r3, #152	@ 0x98
10043764:	58d3      	ldr	r3, [r2, r3]
10043766:	2270      	movs	r2, #112	@ 0x70
10043768:	4393      	bics	r3, r2
1004376a:	001a      	movs	r2, r3
1004376c:	4904      	ldr	r1, [pc, #16]	@ (10043780 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004376e:	687b      	ldr	r3, [r7, #4]
10043770:	4313      	orrs	r3, r2
10043772:	2298      	movs	r2, #152	@ 0x98
10043774:	508b      	str	r3, [r1, r2]
}
10043776:	46c0      	nop			@ (mov r8, r8)
10043778:	46bd      	mov	sp, r7
1004377a:	b002      	add	sp, #8
1004377c:	bd80      	pop	{r7, pc}
1004377e:	46c0      	nop			@ (mov r8, r8)
10043780:	48400000 	.word	0x48400000

10043784 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10043784:	b580      	push	{r7, lr}
10043786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10043788:	4b07      	ldr	r3, [pc, #28]	@ (100437a8 <LL_RCC_HSI_Enable+0x24>)
1004378a:	689a      	ldr	r2, [r3, #8]
1004378c:	4b06      	ldr	r3, [pc, #24]	@ (100437a8 <LL_RCC_HSI_Enable+0x24>)
1004378e:	2104      	movs	r1, #4
10043790:	438a      	bics	r2, r1
10043792:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10043794:	4b04      	ldr	r3, [pc, #16]	@ (100437a8 <LL_RCC_HSI_Enable+0x24>)
10043796:	689a      	ldr	r2, [r3, #8]
10043798:	4b03      	ldr	r3, [pc, #12]	@ (100437a8 <LL_RCC_HSI_Enable+0x24>)
1004379a:	2102      	movs	r1, #2
1004379c:	438a      	bics	r2, r1
1004379e:	609a      	str	r2, [r3, #8]
}
100437a0:	46c0      	nop			@ (mov r8, r8)
100437a2:	46bd      	mov	sp, r7
100437a4:	bd80      	pop	{r7, pc}
100437a6:	46c0      	nop			@ (mov r8, r8)
100437a8:	48400000 	.word	0x48400000

100437ac <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
100437ac:	b580      	push	{r7, lr}
100437ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100437b0:	4b07      	ldr	r3, [pc, #28]	@ (100437d0 <LL_RCC_HSI_Disable+0x24>)
100437b2:	689a      	ldr	r2, [r3, #8]
100437b4:	4b06      	ldr	r3, [pc, #24]	@ (100437d0 <LL_RCC_HSI_Disable+0x24>)
100437b6:	2102      	movs	r1, #2
100437b8:	430a      	orrs	r2, r1
100437ba:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100437bc:	4b04      	ldr	r3, [pc, #16]	@ (100437d0 <LL_RCC_HSI_Disable+0x24>)
100437be:	689a      	ldr	r2, [r3, #8]
100437c0:	4b03      	ldr	r3, [pc, #12]	@ (100437d0 <LL_RCC_HSI_Disable+0x24>)
100437c2:	2104      	movs	r1, #4
100437c4:	430a      	orrs	r2, r1
100437c6:	609a      	str	r2, [r3, #8]
}
100437c8:	46c0      	nop			@ (mov r8, r8)
100437ca:	46bd      	mov	sp, r7
100437cc:	bd80      	pop	{r7, pc}
100437ce:	46c0      	nop			@ (mov r8, r8)
100437d0:	48400000 	.word	0x48400000

100437d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
100437d4:	b580      	push	{r7, lr}
100437d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
100437d8:	4b07      	ldr	r3, [pc, #28]	@ (100437f8 <LL_RCC_HSI_IsReady+0x24>)
100437da:	681a      	ldr	r2, [r3, #0]
100437dc:	2380      	movs	r3, #128	@ 0x80
100437de:	00db      	lsls	r3, r3, #3
100437e0:	401a      	ands	r2, r3
100437e2:	2380      	movs	r3, #128	@ 0x80
100437e4:	00db      	lsls	r3, r3, #3
100437e6:	429a      	cmp	r2, r3
100437e8:	d101      	bne.n	100437ee <LL_RCC_HSI_IsReady+0x1a>
100437ea:	2301      	movs	r3, #1
100437ec:	e000      	b.n	100437f0 <LL_RCC_HSI_IsReady+0x1c>
100437ee:	2300      	movs	r3, #0
}
100437f0:	0018      	movs	r0, r3
100437f2:	46bd      	mov	sp, r7
100437f4:	bd80      	pop	{r7, pc}
100437f6:	46c0      	nop			@ (mov r8, r8)
100437f8:	48400000 	.word	0x48400000

100437fc <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
100437fc:	b580      	push	{r7, lr}
100437fe:	b082      	sub	sp, #8
10043800:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10043802:	46c0      	nop			@ (mov r8, r8)
10043804:	4b0f      	ldr	r3, [pc, #60]	@ (10043844 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10043806:	681a      	ldr	r2, [r3, #0]
10043808:	2380      	movs	r3, #128	@ 0x80
1004380a:	029b      	lsls	r3, r3, #10
1004380c:	4013      	ands	r3, r2
1004380e:	d0f9      	beq.n	10043804 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10043810:	4b0c      	ldr	r3, [pc, #48]	@ (10043844 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10043812:	689a      	ldr	r2, [r3, #8]
10043814:	4b0b      	ldr	r3, [pc, #44]	@ (10043844 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10043816:	2102      	movs	r1, #2
10043818:	430a      	orrs	r2, r1
1004381a:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004381c:	2300      	movs	r3, #0
1004381e:	607b      	str	r3, [r7, #4]
10043820:	e003      	b.n	1004382a <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10043822:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10043824:	687b      	ldr	r3, [r7, #4]
10043826:	3301      	adds	r3, #1
10043828:	607b      	str	r3, [r7, #4]
1004382a:	687b      	ldr	r3, [r7, #4]
1004382c:	2b05      	cmp	r3, #5
1004382e:	ddf8      	ble.n	10043822 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10043830:	4b04      	ldr	r3, [pc, #16]	@ (10043844 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10043832:	689a      	ldr	r2, [r3, #8]
10043834:	4b03      	ldr	r3, [pc, #12]	@ (10043844 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10043836:	2104      	movs	r1, #4
10043838:	430a      	orrs	r2, r1
1004383a:	609a      	str	r2, [r3, #8]
}
1004383c:	46c0      	nop			@ (mov r8, r8)
1004383e:	46bd      	mov	sp, r7
10043840:	b002      	add	sp, #8
10043842:	bd80      	pop	{r7, pc}
10043844:	48400000 	.word	0x48400000

10043848 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
10043848:	b580      	push	{r7, lr}
1004384a:	b082      	sub	sp, #8
1004384c:	af00      	add	r7, sp, #0
1004384e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10043850:	4b06      	ldr	r3, [pc, #24]	@ (1004386c <LL_RCC_LSCO_SetSource+0x24>)
10043852:	689b      	ldr	r3, [r3, #8]
10043854:	4a06      	ldr	r2, [pc, #24]	@ (10043870 <LL_RCC_LSCO_SetSource+0x28>)
10043856:	4013      	ands	r3, r2
10043858:	0019      	movs	r1, r3
1004385a:	4b04      	ldr	r3, [pc, #16]	@ (1004386c <LL_RCC_LSCO_SetSource+0x24>)
1004385c:	687a      	ldr	r2, [r7, #4]
1004385e:	430a      	orrs	r2, r1
10043860:	609a      	str	r2, [r3, #8]
}
10043862:	46c0      	nop			@ (mov r8, r8)
10043864:	46bd      	mov	sp, r7
10043866:	b002      	add	sp, #8
10043868:	bd80      	pop	{r7, pc}
1004386a:	46c0      	nop			@ (mov r8, r8)
1004386c:	48400000 	.word	0x48400000
10043870:	fffe7fff 	.word	0xfffe7fff

10043874 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10043874:	b580      	push	{r7, lr}
10043876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10043878:	4b04      	ldr	r3, [pc, #16]	@ (1004388c <LL_RCC_LSE_Enable+0x18>)
1004387a:	681a      	ldr	r2, [r3, #0]
1004387c:	4b03      	ldr	r3, [pc, #12]	@ (1004388c <LL_RCC_LSE_Enable+0x18>)
1004387e:	2110      	movs	r1, #16
10043880:	430a      	orrs	r2, r1
10043882:	601a      	str	r2, [r3, #0]
}
10043884:	46c0      	nop			@ (mov r8, r8)
10043886:	46bd      	mov	sp, r7
10043888:	bd80      	pop	{r7, pc}
1004388a:	46c0      	nop			@ (mov r8, r8)
1004388c:	48400000 	.word	0x48400000

10043890 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10043890:	b580      	push	{r7, lr}
10043892:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10043894:	4b04      	ldr	r3, [pc, #16]	@ (100438a8 <LL_RCC_LSE_Disable+0x18>)
10043896:	681a      	ldr	r2, [r3, #0]
10043898:	4b03      	ldr	r3, [pc, #12]	@ (100438a8 <LL_RCC_LSE_Disable+0x18>)
1004389a:	2110      	movs	r1, #16
1004389c:	438a      	bics	r2, r1
1004389e:	601a      	str	r2, [r3, #0]
}
100438a0:	46c0      	nop			@ (mov r8, r8)
100438a2:	46bd      	mov	sp, r7
100438a4:	bd80      	pop	{r7, pc}
100438a6:	46c0      	nop			@ (mov r8, r8)
100438a8:	48400000 	.word	0x48400000

100438ac <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
100438ac:	b580      	push	{r7, lr}
100438ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
100438b0:	4b05      	ldr	r3, [pc, #20]	@ (100438c8 <LL_RCC_LSE_IsReady+0x1c>)
100438b2:	681b      	ldr	r3, [r3, #0]
100438b4:	2220      	movs	r2, #32
100438b6:	4013      	ands	r3, r2
100438b8:	2b20      	cmp	r3, #32
100438ba:	d101      	bne.n	100438c0 <LL_RCC_LSE_IsReady+0x14>
100438bc:	2301      	movs	r3, #1
100438be:	e000      	b.n	100438c2 <LL_RCC_LSE_IsReady+0x16>
100438c0:	2300      	movs	r3, #0
}
100438c2:	0018      	movs	r0, r3
100438c4:	46bd      	mov	sp, r7
100438c6:	bd80      	pop	{r7, pc}
100438c8:	48400000 	.word	0x48400000

100438cc <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
100438cc:	b580      	push	{r7, lr}
100438ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
100438d0:	4b04      	ldr	r3, [pc, #16]	@ (100438e4 <LL_RCC_LSE_EnableBypass+0x18>)
100438d2:	681a      	ldr	r2, [r3, #0]
100438d4:	4b03      	ldr	r3, [pc, #12]	@ (100438e4 <LL_RCC_LSE_EnableBypass+0x18>)
100438d6:	2140      	movs	r1, #64	@ 0x40
100438d8:	430a      	orrs	r2, r1
100438da:	601a      	str	r2, [r3, #0]
}
100438dc:	46c0      	nop			@ (mov r8, r8)
100438de:	46bd      	mov	sp, r7
100438e0:	bd80      	pop	{r7, pc}
100438e2:	46c0      	nop			@ (mov r8, r8)
100438e4:	48400000 	.word	0x48400000

100438e8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
100438e8:	b580      	push	{r7, lr}
100438ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
100438ec:	4b04      	ldr	r3, [pc, #16]	@ (10043900 <LL_RCC_LSE_DisableBypass+0x18>)
100438ee:	681a      	ldr	r2, [r3, #0]
100438f0:	4b03      	ldr	r3, [pc, #12]	@ (10043900 <LL_RCC_LSE_DisableBypass+0x18>)
100438f2:	2140      	movs	r1, #64	@ 0x40
100438f4:	438a      	bics	r2, r1
100438f6:	601a      	str	r2, [r3, #0]
}
100438f8:	46c0      	nop			@ (mov r8, r8)
100438fa:	46bd      	mov	sp, r7
100438fc:	bd80      	pop	{r7, pc}
100438fe:	46c0      	nop			@ (mov r8, r8)
10043900:	48400000 	.word	0x48400000

10043904 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10043904:	b580      	push	{r7, lr}
10043906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10043908:	4b05      	ldr	r3, [pc, #20]	@ (10043920 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004390a:	681b      	ldr	r3, [r3, #0]
1004390c:	2240      	movs	r2, #64	@ 0x40
1004390e:	4013      	ands	r3, r2
10043910:	2b40      	cmp	r3, #64	@ 0x40
10043912:	d101      	bne.n	10043918 <LL_RCC_LSE_IsBypassEnabled+0x14>
10043914:	2301      	movs	r3, #1
10043916:	e000      	b.n	1004391a <LL_RCC_LSE_IsBypassEnabled+0x16>
10043918:	2300      	movs	r3, #0
}
1004391a:	0018      	movs	r0, r3
1004391c:	46bd      	mov	sp, r7
1004391e:	bd80      	pop	{r7, pc}
10043920:	48400000 	.word	0x48400000

10043924 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10043924:	b580      	push	{r7, lr}
10043926:	b082      	sub	sp, #8
10043928:	af00      	add	r7, sp, #0
1004392a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004392c:	4b06      	ldr	r3, [pc, #24]	@ (10043948 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004392e:	68db      	ldr	r3, [r3, #12]
10043930:	2260      	movs	r2, #96	@ 0x60
10043932:	4393      	bics	r3, r2
10043934:	0019      	movs	r1, r3
10043936:	4b04      	ldr	r3, [pc, #16]	@ (10043948 <LL_RCC_LSE_SetDriveCapability+0x24>)
10043938:	687a      	ldr	r2, [r7, #4]
1004393a:	430a      	orrs	r2, r1
1004393c:	60da      	str	r2, [r3, #12]
}
1004393e:	46c0      	nop			@ (mov r8, r8)
10043940:	46bd      	mov	sp, r7
10043942:	b002      	add	sp, #8
10043944:	bd80      	pop	{r7, pc}
10043946:	46c0      	nop			@ (mov r8, r8)
10043948:	48400000 	.word	0x48400000

1004394c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004394c:	b580      	push	{r7, lr}
1004394e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10043950:	4b04      	ldr	r3, [pc, #16]	@ (10043964 <LL_RCC_LSI_Enable+0x18>)
10043952:	681a      	ldr	r2, [r3, #0]
10043954:	4b03      	ldr	r3, [pc, #12]	@ (10043964 <LL_RCC_LSI_Enable+0x18>)
10043956:	2104      	movs	r1, #4
10043958:	430a      	orrs	r2, r1
1004395a:	601a      	str	r2, [r3, #0]
}
1004395c:	46c0      	nop			@ (mov r8, r8)
1004395e:	46bd      	mov	sp, r7
10043960:	bd80      	pop	{r7, pc}
10043962:	46c0      	nop			@ (mov r8, r8)
10043964:	48400000 	.word	0x48400000

10043968 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
10043968:	b580      	push	{r7, lr}
1004396a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004396c:	4b04      	ldr	r3, [pc, #16]	@ (10043980 <LL_RCC_LSI_Disable+0x18>)
1004396e:	681a      	ldr	r2, [r3, #0]
10043970:	4b03      	ldr	r3, [pc, #12]	@ (10043980 <LL_RCC_LSI_Disable+0x18>)
10043972:	2104      	movs	r1, #4
10043974:	438a      	bics	r2, r1
10043976:	601a      	str	r2, [r3, #0]
}
10043978:	46c0      	nop			@ (mov r8, r8)
1004397a:	46bd      	mov	sp, r7
1004397c:	bd80      	pop	{r7, pc}
1004397e:	46c0      	nop			@ (mov r8, r8)
10043980:	48400000 	.word	0x48400000

10043984 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10043984:	b580      	push	{r7, lr}
10043986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10043988:	4b05      	ldr	r3, [pc, #20]	@ (100439a0 <LL_RCC_LSI_IsReady+0x1c>)
1004398a:	681b      	ldr	r3, [r3, #0]
1004398c:	2208      	movs	r2, #8
1004398e:	4013      	ands	r3, r2
10043990:	2b08      	cmp	r3, #8
10043992:	d101      	bne.n	10043998 <LL_RCC_LSI_IsReady+0x14>
10043994:	2301      	movs	r3, #1
10043996:	e000      	b.n	1004399a <LL_RCC_LSI_IsReady+0x16>
10043998:	2300      	movs	r3, #0
}
1004399a:	0018      	movs	r0, r3
1004399c:	46bd      	mov	sp, r7
1004399e:	bd80      	pop	{r7, pc}
100439a0:	48400000 	.word	0x48400000

100439a4 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
100439a4:	b580      	push	{r7, lr}
100439a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
100439a8:	4b04      	ldr	r3, [pc, #16]	@ (100439bc <LL_RCC_RC64MPLL_Enable+0x18>)
100439aa:	681a      	ldr	r2, [r3, #0]
100439ac:	4b03      	ldr	r3, [pc, #12]	@ (100439bc <LL_RCC_RC64MPLL_Enable+0x18>)
100439ae:	2180      	movs	r1, #128	@ 0x80
100439b0:	0189      	lsls	r1, r1, #6
100439b2:	430a      	orrs	r2, r1
100439b4:	601a      	str	r2, [r3, #0]
}
100439b6:	46c0      	nop			@ (mov r8, r8)
100439b8:	46bd      	mov	sp, r7
100439ba:	bd80      	pop	{r7, pc}
100439bc:	48400000 	.word	0x48400000

100439c0 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100439c0:	b580      	push	{r7, lr}
100439c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100439c4:	4b04      	ldr	r3, [pc, #16]	@ (100439d8 <LL_RCC_RC64MPLL_Disable+0x18>)
100439c6:	681a      	ldr	r2, [r3, #0]
100439c8:	4b03      	ldr	r3, [pc, #12]	@ (100439d8 <LL_RCC_RC64MPLL_Disable+0x18>)
100439ca:	4904      	ldr	r1, [pc, #16]	@ (100439dc <LL_RCC_RC64MPLL_Disable+0x1c>)
100439cc:	400a      	ands	r2, r1
100439ce:	601a      	str	r2, [r3, #0]
}
100439d0:	46c0      	nop			@ (mov r8, r8)
100439d2:	46bd      	mov	sp, r7
100439d4:	bd80      	pop	{r7, pc}
100439d6:	46c0      	nop			@ (mov r8, r8)
100439d8:	48400000 	.word	0x48400000
100439dc:	ffffdfff 	.word	0xffffdfff

100439e0 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
100439e0:	b580      	push	{r7, lr}
100439e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100439e4:	4b07      	ldr	r3, [pc, #28]	@ (10043a04 <LL_RCC_RC64MPLL_IsReady+0x24>)
100439e6:	681a      	ldr	r2, [r3, #0]
100439e8:	2380      	movs	r3, #128	@ 0x80
100439ea:	01db      	lsls	r3, r3, #7
100439ec:	401a      	ands	r2, r3
100439ee:	2380      	movs	r3, #128	@ 0x80
100439f0:	01db      	lsls	r3, r3, #7
100439f2:	429a      	cmp	r2, r3
100439f4:	d101      	bne.n	100439fa <LL_RCC_RC64MPLL_IsReady+0x1a>
100439f6:	2301      	movs	r3, #1
100439f8:	e000      	b.n	100439fc <LL_RCC_RC64MPLL_IsReady+0x1c>
100439fa:	2300      	movs	r3, #0
}
100439fc:	0018      	movs	r0, r3
100439fe:	46bd      	mov	sp, r7
10043a00:	bd80      	pop	{r7, pc}
10043a02:	46c0      	nop			@ (mov r8, r8)
10043a04:	48400000 	.word	0x48400000

10043a08 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10043a08:	b580      	push	{r7, lr}
10043a0a:	b082      	sub	sp, #8
10043a0c:	af00      	add	r7, sp, #0
10043a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10043a10:	4b06      	ldr	r3, [pc, #24]	@ (10043a2c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10043a12:	689b      	ldr	r3, [r3, #8]
10043a14:	22e0      	movs	r2, #224	@ 0xe0
10043a16:	4393      	bics	r3, r2
10043a18:	0019      	movs	r1, r3
10043a1a:	4b04      	ldr	r3, [pc, #16]	@ (10043a2c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10043a1c:	687a      	ldr	r2, [r7, #4]
10043a1e:	430a      	orrs	r2, r1
10043a20:	609a      	str	r2, [r3, #8]
}
10043a22:	46c0      	nop			@ (mov r8, r8)
10043a24:	46bd      	mov	sp, r7
10043a26:	b002      	add	sp, #8
10043a28:	bd80      	pop	{r7, pc}
10043a2a:	46c0      	nop			@ (mov r8, r8)
10043a2c:	48400000 	.word	0x48400000

10043a30 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10043a30:	b580      	push	{r7, lr}
10043a32:	b084      	sub	sp, #16
10043a34:	af00      	add	r7, sp, #0
10043a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10043a38:	687b      	ldr	r3, [r7, #4]
10043a3a:	2b00      	cmp	r3, #0
10043a3c:	d101      	bne.n	10043a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10043a3e:	2301      	movs	r3, #1
10043a40:	e13c      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10043a42:	687b      	ldr	r3, [r7, #4]
10043a44:	681b      	ldr	r3, [r3, #0]
10043a46:	2210      	movs	r2, #16
10043a48:	4013      	ands	r3, r2
10043a4a:	d033      	beq.n	10043ab4 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10043a4c:	687b      	ldr	r3, [r7, #4]
10043a4e:	689b      	ldr	r3, [r3, #8]
10043a50:	2b00      	cmp	r3, #0
10043a52:	d102      	bne.n	10043a5a <HAL_RCC_OscConfig+0x2a>
10043a54:	f7ff fe96 	bl	10043784 <LL_RCC_HSI_Enable>
10043a58:	e001      	b.n	10043a5e <HAL_RCC_OscConfig+0x2e>
10043a5a:	f7ff fea7 	bl	100437ac <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10043a5e:	687b      	ldr	r3, [r7, #4]
10043a60:	689b      	ldr	r3, [r3, #8]
10043a62:	2b04      	cmp	r3, #4
10043a64:	d113      	bne.n	10043a8e <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043a66:	f7fd fcf7 	bl	10041458 <HAL_GetTick>
10043a6a:	0003      	movs	r3, r0
10043a6c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10043a6e:	e008      	b.n	10043a82 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10043a70:	f7fd fcf2 	bl	10041458 <HAL_GetTick>
10043a74:	0002      	movs	r2, r0
10043a76:	68fb      	ldr	r3, [r7, #12]
10043a78:	1ad3      	subs	r3, r2, r3
10043a7a:	2b64      	cmp	r3, #100	@ 0x64
10043a7c:	d901      	bls.n	10043a82 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10043a7e:	2303      	movs	r3, #3
10043a80:	e11c      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10043a82:	f7ff fea7 	bl	100437d4 <LL_RCC_HSI_IsReady>
10043a86:	0003      	movs	r3, r0
10043a88:	2b01      	cmp	r3, #1
10043a8a:	d0f1      	beq.n	10043a70 <HAL_RCC_OscConfig+0x40>
10043a8c:	e012      	b.n	10043ab4 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043a8e:	f7fd fce3 	bl	10041458 <HAL_GetTick>
10043a92:	0003      	movs	r3, r0
10043a94:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10043a96:	e008      	b.n	10043aaa <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10043a98:	f7fd fcde 	bl	10041458 <HAL_GetTick>
10043a9c:	0002      	movs	r2, r0
10043a9e:	68fb      	ldr	r3, [r7, #12]
10043aa0:	1ad3      	subs	r3, r2, r3
10043aa2:	2b64      	cmp	r3, #100	@ 0x64
10043aa4:	d901      	bls.n	10043aaa <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10043aa6:	2303      	movs	r3, #3
10043aa8:	e108      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
10043aaa:	f7ff fe93 	bl	100437d4 <LL_RCC_HSI_IsReady>
10043aae:	0003      	movs	r3, r0
10043ab0:	2b01      	cmp	r3, #1
10043ab2:	d1f1      	bne.n	10043a98 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10043ab4:	687b      	ldr	r3, [r7, #4]
10043ab6:	681b      	ldr	r3, [r3, #0]
10043ab8:	2201      	movs	r2, #1
10043aba:	4013      	ands	r3, r2
10043abc:	d039      	beq.n	10043b32 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
10043abe:	2020      	movs	r0, #32
10043ac0:	f7ff fe2a 	bl	10043718 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10043ac4:	2030      	movs	r0, #48	@ 0x30
10043ac6:	f7ff fe47 	bl	10043758 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10043aca:	687b      	ldr	r3, [r7, #4]
10043acc:	685a      	ldr	r2, [r3, #4]
10043ace:	2380      	movs	r3, #128	@ 0x80
10043ad0:	025b      	lsls	r3, r3, #9
10043ad2:	429a      	cmp	r2, r3
10043ad4:	d102      	bne.n	10043adc <HAL_RCC_OscConfig+0xac>
10043ad6:	f7ff fded 	bl	100436b4 <LL_RCC_HSE_Enable>
10043ada:	e001      	b.n	10043ae0 <HAL_RCC_OscConfig+0xb0>
10043adc:	f7ff fdf8 	bl	100436d0 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
10043ae0:	687b      	ldr	r3, [r7, #4]
10043ae2:	685b      	ldr	r3, [r3, #4]
10043ae4:	2b00      	cmp	r3, #0
10043ae6:	d012      	beq.n	10043b0e <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043ae8:	f7fd fcb6 	bl	10041458 <HAL_GetTick>
10043aec:	0003      	movs	r3, r0
10043aee:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
10043af0:	e008      	b.n	10043b04 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10043af2:	f7fd fcb1 	bl	10041458 <HAL_GetTick>
10043af6:	0002      	movs	r2, r0
10043af8:	68fb      	ldr	r3, [r7, #12]
10043afa:	1ad3      	subs	r3, r2, r3
10043afc:	2b64      	cmp	r3, #100	@ 0x64
10043afe:	d901      	bls.n	10043b04 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
10043b00:	2303      	movs	r3, #3
10043b02:	e0db      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
10043b04:	f7ff fdf4 	bl	100436f0 <LL_RCC_HSE_IsReady>
10043b08:	1e03      	subs	r3, r0, #0
10043b0a:	d0f2      	beq.n	10043af2 <HAL_RCC_OscConfig+0xc2>
10043b0c:	e011      	b.n	10043b32 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043b0e:	f7fd fca3 	bl	10041458 <HAL_GetTick>
10043b12:	0003      	movs	r3, r0
10043b14:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
10043b16:	e008      	b.n	10043b2a <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10043b18:	f7fd fc9e 	bl	10041458 <HAL_GetTick>
10043b1c:	0002      	movs	r2, r0
10043b1e:	68fb      	ldr	r3, [r7, #12]
10043b20:	1ad3      	subs	r3, r2, r3
10043b22:	2b64      	cmp	r3, #100	@ 0x64
10043b24:	d901      	bls.n	10043b2a <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
10043b26:	2303      	movs	r3, #3
10043b28:	e0c8      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
10043b2a:	f7ff fde1 	bl	100436f0 <LL_RCC_HSE_IsReady>
10043b2e:	1e03      	subs	r3, r0, #0
10043b30:	d1f2      	bne.n	10043b18 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10043b32:	687b      	ldr	r3, [r7, #4]
10043b34:	681b      	ldr	r3, [r3, #0]
10043b36:	2204      	movs	r2, #4
10043b38:	4013      	ands	r3, r2
10043b3a:	d03a      	beq.n	10043bb2 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10043b3c:	687b      	ldr	r3, [r7, #4]
10043b3e:	691b      	ldr	r3, [r3, #16]
10043b40:	2b00      	cmp	r3, #0
10043b42:	d022      	beq.n	10043b8a <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10043b44:	f7ff ff10 	bl	10043968 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10043b48:	46c0      	nop			@ (mov r8, r8)
10043b4a:	f7ff ff1b 	bl	10043984 <LL_RCC_LSI_IsReady>
10043b4e:	1e03      	subs	r3, r0, #0
10043b50:	d1fb      	bne.n	10043b4a <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10043b52:	f7ff fe9d 	bl	10043890 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
10043b56:	2380      	movs	r3, #128	@ 0x80
10043b58:	025b      	lsls	r3, r3, #9
10043b5a:	0018      	movs	r0, r3
10043b5c:	f7ff fe74 	bl	10043848 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10043b60:	f7ff fef4 	bl	1004394c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043b64:	f7fd fc78 	bl	10041458 <HAL_GetTick>
10043b68:	0003      	movs	r3, r0
10043b6a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10043b6c:	e008      	b.n	10043b80 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10043b6e:	f7fd fc73 	bl	10041458 <HAL_GetTick>
10043b72:	0002      	movs	r2, r0
10043b74:	68fb      	ldr	r3, [r7, #12]
10043b76:	1ad3      	subs	r3, r2, r3
10043b78:	2b02      	cmp	r3, #2
10043b7a:	d901      	bls.n	10043b80 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10043b7c:	2303      	movs	r3, #3
10043b7e:	e09d      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10043b80:	f7ff ff00 	bl	10043984 <LL_RCC_LSI_IsReady>
10043b84:	1e03      	subs	r3, r0, #0
10043b86:	d0f2      	beq.n	10043b6e <HAL_RCC_OscConfig+0x13e>
10043b88:	e013      	b.n	10043bb2 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10043b8a:	f7ff feed 	bl	10043968 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043b8e:	f7fd fc63 	bl	10041458 <HAL_GetTick>
10043b92:	0003      	movs	r3, r0
10043b94:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10043b96:	e008      	b.n	10043baa <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10043b98:	f7fd fc5e 	bl	10041458 <HAL_GetTick>
10043b9c:	0002      	movs	r2, r0
10043b9e:	68fb      	ldr	r3, [r7, #12]
10043ba0:	1ad3      	subs	r3, r2, r3
10043ba2:	2b02      	cmp	r3, #2
10043ba4:	d901      	bls.n	10043baa <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10043ba6:	2303      	movs	r3, #3
10043ba8:	e088      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10043baa:	f7ff feeb 	bl	10043984 <LL_RCC_LSI_IsReady>
10043bae:	1e03      	subs	r3, r0, #0
10043bb0:	d1f2      	bne.n	10043b98 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10043bb2:	687b      	ldr	r3, [r7, #4]
10043bb4:	681b      	ldr	r3, [r3, #0]
10043bb6:	2202      	movs	r2, #2
10043bb8:	4013      	ands	r3, r2
10043bba:	d047      	beq.n	10043c4c <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10043bbc:	f7ff fed4 	bl	10043968 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10043bc0:	f7ff fe66 	bl	10043890 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10043bc4:	46c0      	nop			@ (mov r8, r8)
10043bc6:	f7ff fe71 	bl	100438ac <LL_RCC_LSE_IsReady>
10043bca:	1e03      	subs	r3, r0, #0
10043bcc:	d1fb      	bne.n	10043bc6 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
10043bce:	23c0      	movs	r3, #192	@ 0xc0
10043bd0:	019b      	lsls	r3, r3, #6
10043bd2:	0018      	movs	r0, r3
10043bd4:	f7ff fd56 	bl	10043684 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10043bd8:	2380      	movs	r3, #128	@ 0x80
10043bda:	021b      	lsls	r3, r3, #8
10043bdc:	0018      	movs	r0, r3
10043bde:	f7ff fe33 	bl	10043848 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
10043be2:	2020      	movs	r0, #32
10043be4:	f7ff fe9e 	bl	10043924 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10043be8:	687b      	ldr	r3, [r7, #4]
10043bea:	68db      	ldr	r3, [r3, #12]
10043bec:	2b10      	cmp	r3, #16
10043bee:	d102      	bne.n	10043bf6 <HAL_RCC_OscConfig+0x1c6>
10043bf0:	f7ff fe40 	bl	10043874 <LL_RCC_LSE_Enable>
10043bf4:	e001      	b.n	10043bfa <HAL_RCC_OscConfig+0x1ca>
10043bf6:	f7ff fe4b 	bl	10043890 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
10043bfa:	687b      	ldr	r3, [r7, #4]
10043bfc:	68db      	ldr	r3, [r3, #12]
10043bfe:	2b00      	cmp	r3, #0
10043c00:	d012      	beq.n	10043c28 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043c02:	f7fd fc29 	bl	10041458 <HAL_GetTick>
10043c06:	0003      	movs	r3, r0
10043c08:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10043c0a:	e008      	b.n	10043c1e <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10043c0c:	f7fd fc24 	bl	10041458 <HAL_GetTick>
10043c10:	0002      	movs	r2, r0
10043c12:	68fb      	ldr	r3, [r7, #12]
10043c14:	1ad3      	subs	r3, r2, r3
10043c16:	2b64      	cmp	r3, #100	@ 0x64
10043c18:	d901      	bls.n	10043c1e <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
10043c1a:	2303      	movs	r3, #3
10043c1c:	e04e      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10043c1e:	f7ff fe45 	bl	100438ac <LL_RCC_LSE_IsReady>
10043c22:	1e03      	subs	r3, r0, #0
10043c24:	d0f2      	beq.n	10043c0c <HAL_RCC_OscConfig+0x1dc>
10043c26:	e011      	b.n	10043c4c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043c28:	f7fd fc16 	bl	10041458 <HAL_GetTick>
10043c2c:	0003      	movs	r3, r0
10043c2e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10043c30:	e008      	b.n	10043c44 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10043c32:	f7fd fc11 	bl	10041458 <HAL_GetTick>
10043c36:	0002      	movs	r2, r0
10043c38:	68fb      	ldr	r3, [r7, #12]
10043c3a:	1ad3      	subs	r3, r2, r3
10043c3c:	2b64      	cmp	r3, #100	@ 0x64
10043c3e:	d901      	bls.n	10043c44 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10043c40:	2303      	movs	r3, #3
10043c42:	e03b      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10043c44:	f7ff fe32 	bl	100438ac <LL_RCC_LSE_IsReady>
10043c48:	1e03      	subs	r3, r0, #0
10043c4a:	d1f2      	bne.n	10043c32 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10043c4c:	687b      	ldr	r3, [r7, #4]
10043c4e:	681b      	ldr	r3, [r3, #0]
10043c50:	2208      	movs	r2, #8
10043c52:	4013      	ands	r3, r2
10043c54:	d031      	beq.n	10043cba <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
10043c56:	687b      	ldr	r3, [r7, #4]
10043c58:	695b      	ldr	r3, [r3, #20]
10043c5a:	2b40      	cmp	r3, #64	@ 0x40
10043c5c:	d102      	bne.n	10043c64 <HAL_RCC_OscConfig+0x234>
10043c5e:	f7ff fe35 	bl	100438cc <LL_RCC_LSE_EnableBypass>
10043c62:	e001      	b.n	10043c68 <HAL_RCC_OscConfig+0x238>
10043c64:	f7ff fe40 	bl	100438e8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10043c68:	687b      	ldr	r3, [r7, #4]
10043c6a:	695b      	ldr	r3, [r3, #20]
10043c6c:	2b00      	cmp	r3, #0
10043c6e:	d012      	beq.n	10043c96 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043c70:	f7fd fbf2 	bl	10041458 <HAL_GetTick>
10043c74:	0003      	movs	r3, r0
10043c76:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10043c78:	e008      	b.n	10043c8c <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10043c7a:	f7fd fbed 	bl	10041458 <HAL_GetTick>
10043c7e:	0002      	movs	r2, r0
10043c80:	68fb      	ldr	r3, [r7, #12]
10043c82:	1ad3      	subs	r3, r2, r3
10043c84:	2b64      	cmp	r3, #100	@ 0x64
10043c86:	d901      	bls.n	10043c8c <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10043c88:	2303      	movs	r3, #3
10043c8a:	e017      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10043c8c:	f7ff fe3a 	bl	10043904 <LL_RCC_LSE_IsBypassEnabled>
10043c90:	1e03      	subs	r3, r0, #0
10043c92:	d0f2      	beq.n	10043c7a <HAL_RCC_OscConfig+0x24a>
10043c94:	e011      	b.n	10043cba <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10043c96:	f7fd fbdf 	bl	10041458 <HAL_GetTick>
10043c9a:	0003      	movs	r3, r0
10043c9c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10043c9e:	e008      	b.n	10043cb2 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10043ca0:	f7fd fbda 	bl	10041458 <HAL_GetTick>
10043ca4:	0002      	movs	r2, r0
10043ca6:	68fb      	ldr	r3, [r7, #12]
10043ca8:	1ad3      	subs	r3, r2, r3
10043caa:	2b64      	cmp	r3, #100	@ 0x64
10043cac:	d901      	bls.n	10043cb2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
10043cae:	2303      	movs	r3, #3
10043cb0:	e004      	b.n	10043cbc <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10043cb2:	f7ff fe27 	bl	10043904 <LL_RCC_LSE_IsBypassEnabled>
10043cb6:	1e03      	subs	r3, r0, #0
10043cb8:	d1f2      	bne.n	10043ca0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
10043cba:	2300      	movs	r3, #0
}
10043cbc:	0018      	movs	r0, r3
10043cbe:	46bd      	mov	sp, r7
10043cc0:	b004      	add	sp, #16
10043cc2:	bd80      	pop	{r7, pc}

10043cc4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10043cc4:	b580      	push	{r7, lr}
10043cc6:	b084      	sub	sp, #16
10043cc8:	af00      	add	r7, sp, #0
10043cca:	6078      	str	r0, [r7, #4]
10043ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10043cce:	687b      	ldr	r3, [r7, #4]
10043cd0:	2b00      	cmp	r3, #0
10043cd2:	d101      	bne.n	10043cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10043cd4:	2301      	movs	r3, #1
10043cd6:	e098      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10043cd8:	4b4e      	ldr	r3, [pc, #312]	@ (10043e14 <HAL_RCC_ClockConfig+0x150>)
10043cda:	685b      	ldr	r3, [r3, #4]
10043cdc:	2230      	movs	r2, #48	@ 0x30
10043cde:	4393      	bics	r3, r2
10043ce0:	0019      	movs	r1, r3
10043ce2:	4b4c      	ldr	r3, [pc, #304]	@ (10043e14 <HAL_RCC_ClockConfig+0x150>)
10043ce4:	683a      	ldr	r2, [r7, #0]
10043ce6:	430a      	orrs	r2, r1
10043ce8:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10043cea:	687b      	ldr	r3, [r7, #4]
10043cec:	681b      	ldr	r3, [r3, #0]
10043cee:	2b02      	cmp	r3, #2
10043cf0:	d10e      	bne.n	10043d10 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10043cf2:	f7ff fd47 	bl	10043784 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10043cf6:	f7ff fd6d 	bl	100437d4 <LL_RCC_HSI_IsReady>
10043cfa:	1e03      	subs	r3, r0, #0
10043cfc:	d101      	bne.n	10043d02 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10043cfe:	2301      	movs	r3, #1
10043d00:	e083      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10043d02:	f7ff fe5d 	bl	100439c0 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10043d06:	687b      	ldr	r3, [r7, #4]
10043d08:	685b      	ldr	r3, [r3, #4]
10043d0a:	0018      	movs	r0, r3
10043d0c:	f7ff fe7c 	bl	10043a08 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10043d10:	687b      	ldr	r3, [r7, #4]
10043d12:	681b      	ldr	r3, [r3, #0]
10043d14:	2b00      	cmp	r3, #0
10043d16:	d124      	bne.n	10043d62 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10043d18:	f7ff fd5c 	bl	100437d4 <LL_RCC_HSI_IsReady>
10043d1c:	1e03      	subs	r3, r0, #0
10043d1e:	d101      	bne.n	10043d24 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10043d20:	2301      	movs	r3, #1
10043d22:	e072      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10043d24:	f7ff fce4 	bl	100436f0 <LL_RCC_HSE_IsReady>
10043d28:	1e03      	subs	r3, r0, #0
10043d2a:	d101      	bne.n	10043d30 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10043d2c:	2301      	movs	r3, #1
10043d2e:	e06c      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10043d30:	f7ff fe38 	bl	100439a4 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10043d34:	f7fd fb90 	bl	10041458 <HAL_GetTick>
10043d38:	0003      	movs	r3, r0
10043d3a:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10043d3c:	e008      	b.n	10043d50 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10043d3e:	f7fd fb8b 	bl	10041458 <HAL_GetTick>
10043d42:	0002      	movs	r2, r0
10043d44:	68fb      	ldr	r3, [r7, #12]
10043d46:	1ad3      	subs	r3, r2, r3
10043d48:	2b02      	cmp	r3, #2
10043d4a:	d901      	bls.n	10043d50 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10043d4c:	2303      	movs	r3, #3
10043d4e:	e05c      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10043d50:	f7ff fe46 	bl	100439e0 <LL_RCC_RC64MPLL_IsReady>
10043d54:	1e03      	subs	r3, r0, #0
10043d56:	d0f2      	beq.n	10043d3e <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10043d58:	687b      	ldr	r3, [r7, #4]
10043d5a:	685b      	ldr	r3, [r3, #4]
10043d5c:	0018      	movs	r0, r3
10043d5e:	f7ff fe53 	bl	10043a08 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10043d62:	687b      	ldr	r3, [r7, #4]
10043d64:	681b      	ldr	r3, [r3, #0]
10043d66:	2b01      	cmp	r3, #1
10043d68:	d117      	bne.n	10043d9a <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10043d6a:	f7ff fd47 	bl	100437fc <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10043d6e:	f7ff fd31 	bl	100437d4 <LL_RCC_HSI_IsReady>
10043d72:	1e03      	subs	r3, r0, #0
10043d74:	d001      	beq.n	10043d7a <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10043d76:	2301      	movs	r3, #1
10043d78:	e047      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10043d7a:	f7ff fcb9 	bl	100436f0 <LL_RCC_HSE_IsReady>
10043d7e:	1e03      	subs	r3, r0, #0
10043d80:	d101      	bne.n	10043d86 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10043d82:	2301      	movs	r3, #1
10043d84:	e041      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10043d86:	4b24      	ldr	r3, [pc, #144]	@ (10043e18 <HAL_RCC_ClockConfig+0x154>)
10043d88:	689b      	ldr	r3, [r3, #8]
10043d8a:	22e0      	movs	r2, #224	@ 0xe0
10043d8c:	4393      	bics	r3, r2
10043d8e:	0019      	movs	r1, r3
10043d90:	687b      	ldr	r3, [r7, #4]
10043d92:	685a      	ldr	r2, [r3, #4]
10043d94:	4b20      	ldr	r3, [pc, #128]	@ (10043e18 <HAL_RCC_ClockConfig+0x154>)
10043d96:	430a      	orrs	r2, r1
10043d98:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10043d9a:	4b1e      	ldr	r3, [pc, #120]	@ (10043e14 <HAL_RCC_ClockConfig+0x150>)
10043d9c:	685b      	ldr	r3, [r3, #4]
10043d9e:	2230      	movs	r2, #48	@ 0x30
10043da0:	4013      	ands	r3, r2
10043da2:	683a      	ldr	r2, [r7, #0]
10043da4:	429a      	cmp	r2, r3
10043da6:	d01d      	beq.n	10043de4 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10043da8:	4b1a      	ldr	r3, [pc, #104]	@ (10043e14 <HAL_RCC_ClockConfig+0x150>)
10043daa:	685b      	ldr	r3, [r3, #4]
10043dac:	2230      	movs	r2, #48	@ 0x30
10043dae:	4393      	bics	r3, r2
10043db0:	0019      	movs	r1, r3
10043db2:	4b18      	ldr	r3, [pc, #96]	@ (10043e14 <HAL_RCC_ClockConfig+0x150>)
10043db4:	683a      	ldr	r2, [r7, #0]
10043db6:	430a      	orrs	r2, r1
10043db8:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10043dba:	f7fd fb4d 	bl	10041458 <HAL_GetTick>
10043dbe:	0003      	movs	r3, r0
10043dc0:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10043dc2:	e008      	b.n	10043dd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10043dc4:	f7fd fb48 	bl	10041458 <HAL_GetTick>
10043dc8:	0002      	movs	r2, r0
10043dca:	68fb      	ldr	r3, [r7, #12]
10043dcc:	1ad3      	subs	r3, r2, r3
10043dce:	2b02      	cmp	r3, #2
10043dd0:	d901      	bls.n	10043dd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10043dd2:	2303      	movs	r3, #3
10043dd4:	e019      	b.n	10043e0a <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10043dd6:	4b0f      	ldr	r3, [pc, #60]	@ (10043e14 <HAL_RCC_ClockConfig+0x150>)
10043dd8:	685b      	ldr	r3, [r3, #4]
10043dda:	2230      	movs	r2, #48	@ 0x30
10043ddc:	4013      	ands	r3, r2
10043dde:	683a      	ldr	r2, [r7, #0]
10043de0:	429a      	cmp	r2, r3
10043de2:	d1ef      	bne.n	10043dc4 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10043de4:	2300      	movs	r3, #0
10043de6:	60bb      	str	r3, [r7, #8]
10043de8:	e003      	b.n	10043df2 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10043dea:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10043dec:	68bb      	ldr	r3, [r7, #8]
10043dee:	3301      	adds	r3, #1
10043df0:	60bb      	str	r3, [r7, #8]
10043df2:	68bb      	ldr	r3, [r7, #8]
10043df4:	2b05      	cmp	r3, #5
10043df6:	ddf8      	ble.n	10043dea <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10043df8:	f7fd f8ce 	bl	10040f98 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10043dfc:	f7fd fb36 	bl	1004146c <HAL_GetTickPrio>
10043e00:	0003      	movs	r3, r0
10043e02:	0018      	movs	r0, r3
10043e04:	f7fd face 	bl	100413a4 <HAL_InitTick>
10043e08:	0003      	movs	r3, r0
}
10043e0a:	0018      	movs	r0, r3
10043e0c:	46bd      	mov	sp, r7
10043e0e:	b004      	add	sp, #16
10043e10:	bd80      	pop	{r7, pc}
10043e12:	46c0      	nop			@ (mov r8, r8)
10043e14:	40001000 	.word	0x40001000
10043e18:	48400000 	.word	0x48400000

10043e1c <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10043e1c:	b580      	push	{r7, lr}
10043e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10043e20:	4b02      	ldr	r3, [pc, #8]	@ (10043e2c <HAL_RCC_GetSysClockFreq+0x10>)
10043e22:	681b      	ldr	r3, [r3, #0]
}
10043e24:	0018      	movs	r0, r3
10043e26:	46bd      	mov	sp, r7
10043e28:	bd80      	pop	{r7, pc}
10043e2a:	46c0      	nop			@ (mov r8, r8)
10043e2c:	20000374 	.word	0x20000374

10043e30 <LL_RCC_HSE_IsReady>:
{
10043e30:	b580      	push	{r7, lr}
10043e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10043e34:	4b07      	ldr	r3, [pc, #28]	@ (10043e54 <LL_RCC_HSE_IsReady+0x24>)
10043e36:	681a      	ldr	r2, [r3, #0]
10043e38:	2380      	movs	r3, #128	@ 0x80
10043e3a:	029b      	lsls	r3, r3, #10
10043e3c:	401a      	ands	r2, r3
10043e3e:	2380      	movs	r3, #128	@ 0x80
10043e40:	029b      	lsls	r3, r3, #10
10043e42:	429a      	cmp	r2, r3
10043e44:	d101      	bne.n	10043e4a <LL_RCC_HSE_IsReady+0x1a>
10043e46:	2301      	movs	r3, #1
10043e48:	e000      	b.n	10043e4c <LL_RCC_HSE_IsReady+0x1c>
10043e4a:	2300      	movs	r3, #0
}
10043e4c:	0018      	movs	r0, r3
10043e4e:	46bd      	mov	sp, r7
10043e50:	bd80      	pop	{r7, pc}
10043e52:	46c0      	nop			@ (mov r8, r8)
10043e54:	48400000 	.word	0x48400000

10043e58 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10043e58:	b580      	push	{r7, lr}
10043e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10043e5c:	4b05      	ldr	r3, [pc, #20]	@ (10043e74 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10043e5e:	689b      	ldr	r3, [r3, #8]
10043e60:	2208      	movs	r2, #8
10043e62:	4013      	ands	r3, r2
10043e64:	2b08      	cmp	r3, #8
10043e66:	d101      	bne.n	10043e6c <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10043e68:	2301      	movs	r3, #1
10043e6a:	e000      	b.n	10043e6e <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10043e6c:	2300      	movs	r3, #0
}
10043e6e:	0018      	movs	r0, r3
10043e70:	46bd      	mov	sp, r7
10043e72:	bd80      	pop	{r7, pc}
10043e74:	48400000 	.word	0x48400000

10043e78 <LL_RCC_LSCO_SetSource>:
{
10043e78:	b580      	push	{r7, lr}
10043e7a:	b082      	sub	sp, #8
10043e7c:	af00      	add	r7, sp, #0
10043e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10043e80:	4b06      	ldr	r3, [pc, #24]	@ (10043e9c <LL_RCC_LSCO_SetSource+0x24>)
10043e82:	689b      	ldr	r3, [r3, #8]
10043e84:	4a06      	ldr	r2, [pc, #24]	@ (10043ea0 <LL_RCC_LSCO_SetSource+0x28>)
10043e86:	4013      	ands	r3, r2
10043e88:	0019      	movs	r1, r3
10043e8a:	4b04      	ldr	r3, [pc, #16]	@ (10043e9c <LL_RCC_LSCO_SetSource+0x24>)
10043e8c:	687a      	ldr	r2, [r7, #4]
10043e8e:	430a      	orrs	r2, r1
10043e90:	609a      	str	r2, [r3, #8]
}
10043e92:	46c0      	nop			@ (mov r8, r8)
10043e94:	46bd      	mov	sp, r7
10043e96:	b002      	add	sp, #8
10043e98:	bd80      	pop	{r7, pc}
10043e9a:	46c0      	nop			@ (mov r8, r8)
10043e9c:	48400000 	.word	0x48400000
10043ea0:	fffe7fff 	.word	0xfffe7fff

10043ea4 <LL_RCC_LSCO_GetSource>:
{
10043ea4:	b580      	push	{r7, lr}
10043ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10043ea8:	4b03      	ldr	r3, [pc, #12]	@ (10043eb8 <LL_RCC_LSCO_GetSource+0x14>)
10043eaa:	689a      	ldr	r2, [r3, #8]
10043eac:	23c0      	movs	r3, #192	@ 0xc0
10043eae:	025b      	lsls	r3, r3, #9
10043eb0:	4013      	ands	r3, r2
}
10043eb2:	0018      	movs	r0, r3
10043eb4:	46bd      	mov	sp, r7
10043eb6:	bd80      	pop	{r7, pc}
10043eb8:	48400000 	.word	0x48400000

10043ebc <LL_RCC_SetRFClock>:
{
10043ebc:	b580      	push	{r7, lr}
10043ebe:	b082      	sub	sp, #8
10043ec0:	af00      	add	r7, sp, #0
10043ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10043ec4:	4b06      	ldr	r3, [pc, #24]	@ (10043ee0 <LL_RCC_SetRFClock+0x24>)
10043ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043ec8:	2204      	movs	r2, #4
10043eca:	4393      	bics	r3, r2
10043ecc:	0019      	movs	r1, r3
10043ece:	4b04      	ldr	r3, [pc, #16]	@ (10043ee0 <LL_RCC_SetRFClock+0x24>)
10043ed0:	687a      	ldr	r2, [r7, #4]
10043ed2:	430a      	orrs	r2, r1
10043ed4:	661a      	str	r2, [r3, #96]	@ 0x60
}
10043ed6:	46c0      	nop			@ (mov r8, r8)
10043ed8:	46bd      	mov	sp, r7
10043eda:	b002      	add	sp, #8
10043edc:	bd80      	pop	{r7, pc}
10043ede:	46c0      	nop			@ (mov r8, r8)
10043ee0:	48400000 	.word	0x48400000

10043ee4 <LL_RCC_GetRFClock>:
{
10043ee4:	b580      	push	{r7, lr}
10043ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10043ee8:	4b03      	ldr	r3, [pc, #12]	@ (10043ef8 <LL_RCC_GetRFClock+0x14>)
10043eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043eec:	2204      	movs	r2, #4
10043eee:	4013      	ands	r3, r2
}
10043ef0:	0018      	movs	r0, r3
10043ef2:	46bd      	mov	sp, r7
10043ef4:	bd80      	pop	{r7, pc}
10043ef6:	46c0      	nop			@ (mov r8, r8)
10043ef8:	48400000 	.word	0x48400000

10043efc <LL_RCC_SetSMPSPrescaler>:
{
10043efc:	b580      	push	{r7, lr}
10043efe:	b082      	sub	sp, #8
10043f00:	af00      	add	r7, sp, #0
10043f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10043f04:	4b06      	ldr	r3, [pc, #24]	@ (10043f20 <LL_RCC_SetSMPSPrescaler+0x24>)
10043f06:	689b      	ldr	r3, [r3, #8]
10043f08:	4a06      	ldr	r2, [pc, #24]	@ (10043f24 <LL_RCC_SetSMPSPrescaler+0x28>)
10043f0a:	4013      	ands	r3, r2
10043f0c:	0019      	movs	r1, r3
10043f0e:	4b04      	ldr	r3, [pc, #16]	@ (10043f20 <LL_RCC_SetSMPSPrescaler+0x24>)
10043f10:	687a      	ldr	r2, [r7, #4]
10043f12:	430a      	orrs	r2, r1
10043f14:	609a      	str	r2, [r3, #8]
}
10043f16:	46c0      	nop			@ (mov r8, r8)
10043f18:	46bd      	mov	sp, r7
10043f1a:	b002      	add	sp, #8
10043f1c:	bd80      	pop	{r7, pc}
10043f1e:	46c0      	nop			@ (mov r8, r8)
10043f20:	48400000 	.word	0x48400000
10043f24:	ffffefff 	.word	0xffffefff

10043f28 <LL_RCC_GetSMPSPrescaler>:
{
10043f28:	b580      	push	{r7, lr}
10043f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10043f2c:	4b03      	ldr	r3, [pc, #12]	@ (10043f3c <LL_RCC_GetSMPSPrescaler+0x14>)
10043f2e:	689a      	ldr	r2, [r3, #8]
10043f30:	2380      	movs	r3, #128	@ 0x80
10043f32:	015b      	lsls	r3, r3, #5
10043f34:	4013      	ands	r3, r2
}
10043f36:	0018      	movs	r0, r3
10043f38:	46bd      	mov	sp, r7
10043f3a:	bd80      	pop	{r7, pc}
10043f3c:	48400000 	.word	0x48400000

10043f40 <LL_RCC_SetLPUARTClockSource>:
{
10043f40:	b580      	push	{r7, lr}
10043f42:	b082      	sub	sp, #8
10043f44:	af00      	add	r7, sp, #0
10043f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10043f48:	4b06      	ldr	r3, [pc, #24]	@ (10043f64 <LL_RCC_SetLPUARTClockSource+0x24>)
10043f4a:	689b      	ldr	r3, [r3, #8]
10043f4c:	4a06      	ldr	r2, [pc, #24]	@ (10043f68 <LL_RCC_SetLPUARTClockSource+0x28>)
10043f4e:	4013      	ands	r3, r2
10043f50:	0019      	movs	r1, r3
10043f52:	4b04      	ldr	r3, [pc, #16]	@ (10043f64 <LL_RCC_SetLPUARTClockSource+0x24>)
10043f54:	687a      	ldr	r2, [r7, #4]
10043f56:	430a      	orrs	r2, r1
10043f58:	609a      	str	r2, [r3, #8]
}
10043f5a:	46c0      	nop			@ (mov r8, r8)
10043f5c:	46bd      	mov	sp, r7
10043f5e:	b002      	add	sp, #8
10043f60:	bd80      	pop	{r7, pc}
10043f62:	46c0      	nop			@ (mov r8, r8)
10043f64:	48400000 	.word	0x48400000
10043f68:	ffffdfff 	.word	0xffffdfff

10043f6c <LL_RCC_GetLPUARTClockSource>:
{
10043f6c:	b580      	push	{r7, lr}
10043f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10043f70:	4b03      	ldr	r3, [pc, #12]	@ (10043f80 <LL_RCC_GetLPUARTClockSource+0x14>)
10043f72:	689a      	ldr	r2, [r3, #8]
10043f74:	2380      	movs	r3, #128	@ 0x80
10043f76:	019b      	lsls	r3, r3, #6
10043f78:	4013      	ands	r3, r2
}
10043f7a:	0018      	movs	r0, r3
10043f7c:	46bd      	mov	sp, r7
10043f7e:	bd80      	pop	{r7, pc}
10043f80:	48400000 	.word	0x48400000

10043f84 <LL_RCC_SetSPI3I2SClockSource>:
{
10043f84:	b580      	push	{r7, lr}
10043f86:	b082      	sub	sp, #8
10043f88:	af00      	add	r7, sp, #0
10043f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10043f8c:	4b06      	ldr	r3, [pc, #24]	@ (10043fa8 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10043f8e:	689b      	ldr	r3, [r3, #8]
10043f90:	4a06      	ldr	r2, [pc, #24]	@ (10043fac <LL_RCC_SetSPI3I2SClockSource+0x28>)
10043f92:	4013      	ands	r3, r2
10043f94:	0019      	movs	r1, r3
10043f96:	4b04      	ldr	r3, [pc, #16]	@ (10043fa8 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10043f98:	687a      	ldr	r2, [r7, #4]
10043f9a:	430a      	orrs	r2, r1
10043f9c:	609a      	str	r2, [r3, #8]
}
10043f9e:	46c0      	nop			@ (mov r8, r8)
10043fa0:	46bd      	mov	sp, r7
10043fa2:	b002      	add	sp, #8
10043fa4:	bd80      	pop	{r7, pc}
10043fa6:	46c0      	nop			@ (mov r8, r8)
10043fa8:	48400000 	.word	0x48400000
10043fac:	ff3fffff 	.word	0xff3fffff

10043fb0 <LL_RCC_GetSPI3I2SClockSource>:
{
10043fb0:	b580      	push	{r7, lr}
10043fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10043fb4:	4b03      	ldr	r3, [pc, #12]	@ (10043fc4 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10043fb6:	689a      	ldr	r2, [r3, #8]
10043fb8:	23c0      	movs	r3, #192	@ 0xc0
10043fba:	041b      	lsls	r3, r3, #16
10043fbc:	4013      	ands	r3, r2
}
10043fbe:	0018      	movs	r0, r3
10043fc0:	46bd      	mov	sp, r7
10043fc2:	bd80      	pop	{r7, pc}
10043fc4:	48400000 	.word	0x48400000

10043fc8 <LL_RCC_RC64MPLL_IsReady>:
{
10043fc8:	b580      	push	{r7, lr}
10043fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10043fcc:	4b07      	ldr	r3, [pc, #28]	@ (10043fec <LL_RCC_RC64MPLL_IsReady+0x24>)
10043fce:	681a      	ldr	r2, [r3, #0]
10043fd0:	2380      	movs	r3, #128	@ 0x80
10043fd2:	01db      	lsls	r3, r3, #7
10043fd4:	401a      	ands	r2, r3
10043fd6:	2380      	movs	r3, #128	@ 0x80
10043fd8:	01db      	lsls	r3, r3, #7
10043fda:	429a      	cmp	r2, r3
10043fdc:	d101      	bne.n	10043fe2 <LL_RCC_RC64MPLL_IsReady+0x1a>
10043fde:	2301      	movs	r3, #1
10043fe0:	e000      	b.n	10043fe4 <LL_RCC_RC64MPLL_IsReady+0x1c>
10043fe2:	2300      	movs	r3, #0
}
10043fe4:	0018      	movs	r0, r3
10043fe6:	46bd      	mov	sp, r7
10043fe8:	bd80      	pop	{r7, pc}
10043fea:	46c0      	nop			@ (mov r8, r8)
10043fec:	48400000 	.word	0x48400000

10043ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10043ff0:	b580      	push	{r7, lr}
10043ff2:	b082      	sub	sp, #8
10043ff4:	af00      	add	r7, sp, #0
10043ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10043ff8:	687b      	ldr	r3, [r7, #4]
10043ffa:	681b      	ldr	r3, [r3, #0]
10043ffc:	2201      	movs	r2, #1
10043ffe:	4013      	ands	r3, r2
10044000:	d004      	beq.n	1004400c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10044002:	687b      	ldr	r3, [r7, #4]
10044004:	691b      	ldr	r3, [r3, #16]
10044006:	0018      	movs	r0, r3
10044008:	f7ff ff58 	bl	10043ebc <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004400c:	687b      	ldr	r3, [r7, #4]
1004400e:	681b      	ldr	r3, [r3, #0]
10044010:	2202      	movs	r2, #2
10044012:	4013      	ands	r3, r2
10044014:	d004      	beq.n	10044020 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10044016:	687b      	ldr	r3, [r7, #4]
10044018:	695b      	ldr	r3, [r3, #20]
1004401a:	0018      	movs	r0, r3
1004401c:	f7ff ff6e 	bl	10043efc <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10044020:	687b      	ldr	r3, [r7, #4]
10044022:	681b      	ldr	r3, [r3, #0]
10044024:	2208      	movs	r2, #8
10044026:	4013      	ands	r3, r2
10044028:	d004      	beq.n	10044034 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004402a:	687b      	ldr	r3, [r7, #4]
1004402c:	685b      	ldr	r3, [r3, #4]
1004402e:	0018      	movs	r0, r3
10044030:	f7ff ffa8 	bl	10043f84 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10044034:	687b      	ldr	r3, [r7, #4]
10044036:	681b      	ldr	r3, [r3, #0]
10044038:	2210      	movs	r2, #16
1004403a:	4013      	ands	r3, r2
1004403c:	d004      	beq.n	10044048 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004403e:	687b      	ldr	r3, [r7, #4]
10044040:	68db      	ldr	r3, [r3, #12]
10044042:	0018      	movs	r0, r3
10044044:	f7ff ff7c 	bl	10043f40 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10044048:	687b      	ldr	r3, [r7, #4]
1004404a:	689b      	ldr	r3, [r3, #8]
1004404c:	2220      	movs	r2, #32
1004404e:	4013      	ands	r3, r2
10044050:	d004      	beq.n	1004405c <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10044052:	687b      	ldr	r3, [r7, #4]
10044054:	689b      	ldr	r3, [r3, #8]
10044056:	0018      	movs	r0, r3
10044058:	f7ff ff0e 	bl	10043e78 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004405c:	2300      	movs	r3, #0
}
1004405e:	0018      	movs	r0, r3
10044060:	46bd      	mov	sp, r7
10044062:	b002      	add	sp, #8
10044064:	bd80      	pop	{r7, pc}
	...

10044068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10044068:	b580      	push	{r7, lr}
1004406a:	b084      	sub	sp, #16
1004406c:	af00      	add	r7, sp, #0
1004406e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10044070:	2300      	movs	r3, #0
10044072:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
10044074:	687b      	ldr	r3, [r7, #4]
10044076:	2b20      	cmp	r3, #32
10044078:	d900      	bls.n	1004407c <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004407a:	e07b      	b.n	10044174 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004407c:	687b      	ldr	r3, [r7, #4]
1004407e:	009a      	lsls	r2, r3, #2
10044080:	4b40      	ldr	r3, [pc, #256]	@ (10044184 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
10044082:	18d3      	adds	r3, r2, r3
10044084:	681b      	ldr	r3, [r3, #0]
10044086:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10044088:	f7ff ff2c 	bl	10043ee4 <LL_RCC_GetRFClock>
1004408c:	1e03      	subs	r3, r0, #0
1004408e:	d002      	beq.n	10044096 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10044090:	2b04      	cmp	r3, #4
10044092:	d003      	beq.n	1004409c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
10044094:	e071      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
10044096:	4b3c      	ldr	r3, [pc, #240]	@ (10044188 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10044098:	60fb      	str	r3, [r7, #12]
          break;
1004409a:	e002      	b.n	100440a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004409c:	4b3b      	ldr	r3, [pc, #236]	@ (1004418c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004409e:	60fb      	str	r3, [r7, #12]
          break;
100440a0:	46c0      	nop			@ (mov r8, r8)
      break;
100440a2:	e06a      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
100440a4:	f7ff ff40 	bl	10043f28 <LL_RCC_GetSMPSPrescaler>
100440a8:	1e03      	subs	r3, r0, #0
100440aa:	d004      	beq.n	100440b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
100440ac:	2280      	movs	r2, #128	@ 0x80
100440ae:	0152      	lsls	r2, r2, #5
100440b0:	4293      	cmp	r3, r2
100440b2:	d003      	beq.n	100440bc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
100440b4:	e061      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
100440b6:	4b36      	ldr	r3, [pc, #216]	@ (10044190 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
100440b8:	60fb      	str	r3, [r7, #12]
          break;
100440ba:	e002      	b.n	100440c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
100440bc:	4b35      	ldr	r3, [pc, #212]	@ (10044194 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
100440be:	60fb      	str	r3, [r7, #12]
          break;
100440c0:	46c0      	nop			@ (mov r8, r8)
      break;
100440c2:	e05a      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
100440c4:	f7ff fec8 	bl	10043e58 <LL_RCC_DIRECT_HSE_IsEnabled>
100440c8:	1e03      	subs	r3, r0, #0
100440ca:	d005      	beq.n	100440d8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
100440cc:	f7ff feb0 	bl	10043e30 <LL_RCC_HSE_IsReady>
100440d0:	1e03      	subs	r3, r0, #0
100440d2:	d107      	bne.n	100440e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
100440d4:	2300      	movs	r3, #0
100440d6:	e051      	b.n	1004417c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
100440d8:	f7ff ff76 	bl	10043fc8 <LL_RCC_RC64MPLL_IsReady>
100440dc:	1e03      	subs	r3, r0, #0
100440de:	d101      	bne.n	100440e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
100440e0:	2300      	movs	r3, #0
100440e2:	e04b      	b.n	1004417c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
100440e4:	f7ff ff64 	bl	10043fb0 <LL_RCC_GetSPI3I2SClockSource>
100440e8:	0003      	movs	r3, r0
100440ea:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
100440ec:	68bb      	ldr	r3, [r7, #8]
100440ee:	2b00      	cmp	r3, #0
100440f0:	d101      	bne.n	100440f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
100440f2:	4b26      	ldr	r3, [pc, #152]	@ (1004418c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
100440f4:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
100440f6:	68ba      	ldr	r2, [r7, #8]
100440f8:	2380      	movs	r3, #128	@ 0x80
100440fa:	03db      	lsls	r3, r3, #15
100440fc:	429a      	cmp	r2, r3
100440fe:	d101      	bne.n	10044104 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10044100:	4b21      	ldr	r3, [pc, #132]	@ (10044188 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10044102:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10044104:	68ba      	ldr	r2, [r7, #8]
10044106:	2380      	movs	r3, #128	@ 0x80
10044108:	041b      	lsls	r3, r3, #16
1004410a:	429a      	cmp	r2, r3
1004410c:	d134      	bne.n	10044178 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004410e:	4b22      	ldr	r3, [pc, #136]	@ (10044198 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10044110:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10044112:	e031      	b.n	10044178 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10044114:	f7ff ff2a 	bl	10043f6c <LL_RCC_GetLPUARTClockSource>
10044118:	0002      	movs	r2, r0
1004411a:	2380      	movs	r3, #128	@ 0x80
1004411c:	019b      	lsls	r3, r3, #6
1004411e:	429a      	cmp	r2, r3
10044120:	d103      	bne.n	1004412a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10044122:	2380      	movs	r3, #128	@ 0x80
10044124:	021b      	lsls	r3, r3, #8
10044126:	60fb      	str	r3, [r7, #12]
          break;
10044128:	e002      	b.n	10044130 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004412a:	4b18      	ldr	r3, [pc, #96]	@ (1004418c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004412c:	60fb      	str	r3, [r7, #12]
          break;
1004412e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10044130:	e023      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10044132:	f7ff feb7 	bl	10043ea4 <LL_RCC_LSCO_GetSource>
10044136:	0003      	movs	r3, r0
10044138:	22c0      	movs	r2, #192	@ 0xc0
1004413a:	0252      	lsls	r2, r2, #9
1004413c:	4293      	cmp	r3, r2
1004413e:	d014      	beq.n	1004416a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10044140:	22c0      	movs	r2, #192	@ 0xc0
10044142:	0252      	lsls	r2, r2, #9
10044144:	4293      	cmp	r3, r2
10044146:	d813      	bhi.n	10044170 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10044148:	2280      	movs	r2, #128	@ 0x80
1004414a:	0212      	lsls	r2, r2, #8
1004414c:	4293      	cmp	r3, r2
1004414e:	d004      	beq.n	1004415a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10044150:	2280      	movs	r2, #128	@ 0x80
10044152:	0252      	lsls	r2, r2, #9
10044154:	4293      	cmp	r3, r2
10044156:	d004      	beq.n	10044162 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10044158:	e00a      	b.n	10044170 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004415a:	2380      	movs	r3, #128	@ 0x80
1004415c:	021b      	lsls	r3, r3, #8
1004415e:	60fb      	str	r3, [r7, #12]
          break;
10044160:	e007      	b.n	10044172 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10044162:	23fa      	movs	r3, #250	@ 0xfa
10044164:	01db      	lsls	r3, r3, #7
10044166:	60fb      	str	r3, [r7, #12]
          break;
10044168:	e003      	b.n	10044172 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004416a:	4b0c      	ldr	r3, [pc, #48]	@ (1004419c <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004416c:	60fb      	str	r3, [r7, #12]
          break;
1004416e:	e000      	b.n	10044172 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10044170:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10044172:	e002      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
10044174:	46c0      	nop			@ (mov r8, r8)
10044176:	e000      	b.n	1004417a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
10044178:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004417a:	68fb      	ldr	r3, [r7, #12]
}
1004417c:	0018      	movs	r0, r3
1004417e:	46bd      	mov	sp, r7
10044180:	b004      	add	sp, #16
10044182:	bd80      	pop	{r7, pc}
10044184:	10045518 	.word	0x10045518
10044188:	01e84800 	.word	0x01e84800
1004418c:	00f42400 	.word	0x00f42400
10044190:	007a1200 	.word	0x007a1200
10044194:	003d0900 	.word	0x003d0900
10044198:	03d09000 	.word	0x03d09000
1004419c:	00007a12 	.word	0x00007a12

100441a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
100441a0:	b580      	push	{r7, lr}
100441a2:	b084      	sub	sp, #16
100441a4:	af00      	add	r7, sp, #0
100441a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
100441a8:	687b      	ldr	r3, [r7, #4]
100441aa:	681b      	ldr	r3, [r3, #0]
100441ac:	68db      	ldr	r3, [r3, #12]
100441ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
100441b0:	687b      	ldr	r3, [r7, #4]
100441b2:	681b      	ldr	r3, [r3, #0]
100441b4:	691b      	ldr	r3, [r3, #16]
100441b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
100441b8:	68bb      	ldr	r3, [r7, #8]
100441ba:	2202      	movs	r2, #2
100441bc:	4013      	ands	r3, r2
100441be:	d021      	beq.n	10044204 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
100441c0:	68fb      	ldr	r3, [r7, #12]
100441c2:	2202      	movs	r2, #2
100441c4:	4013      	ands	r3, r2
100441c6:	d01d      	beq.n	10044204 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
100441c8:	687b      	ldr	r3, [r7, #4]
100441ca:	681b      	ldr	r3, [r3, #0]
100441cc:	2203      	movs	r2, #3
100441ce:	4252      	negs	r2, r2
100441d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
100441d2:	687b      	ldr	r3, [r7, #4]
100441d4:	2201      	movs	r2, #1
100441d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
100441d8:	687b      	ldr	r3, [r7, #4]
100441da:	681b      	ldr	r3, [r3, #0]
100441dc:	699b      	ldr	r3, [r3, #24]
100441de:	2203      	movs	r2, #3
100441e0:	4013      	ands	r3, r2
100441e2:	d004      	beq.n	100441ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
100441e4:	687b      	ldr	r3, [r7, #4]
100441e6:	0018      	movs	r0, r3
100441e8:	f000 f8d8 	bl	1004439c <HAL_TIM_IC_CaptureCallback>
100441ec:	e007      	b.n	100441fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
100441ee:	687b      	ldr	r3, [r7, #4]
100441f0:	0018      	movs	r0, r3
100441f2:	f000 f8cb 	bl	1004438c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
100441f6:	687b      	ldr	r3, [r7, #4]
100441f8:	0018      	movs	r0, r3
100441fa:	f000 f8d7 	bl	100443ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100441fe:	687b      	ldr	r3, [r7, #4]
10044200:	2200      	movs	r2, #0
10044202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
10044204:	68bb      	ldr	r3, [r7, #8]
10044206:	2204      	movs	r2, #4
10044208:	4013      	ands	r3, r2
1004420a:	d022      	beq.n	10044252 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004420c:	68fb      	ldr	r3, [r7, #12]
1004420e:	2204      	movs	r2, #4
10044210:	4013      	ands	r3, r2
10044212:	d01e      	beq.n	10044252 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
10044214:	687b      	ldr	r3, [r7, #4]
10044216:	681b      	ldr	r3, [r3, #0]
10044218:	2205      	movs	r2, #5
1004421a:	4252      	negs	r2, r2
1004421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004421e:	687b      	ldr	r3, [r7, #4]
10044220:	2202      	movs	r2, #2
10044222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
10044224:	687b      	ldr	r3, [r7, #4]
10044226:	681b      	ldr	r3, [r3, #0]
10044228:	699a      	ldr	r2, [r3, #24]
1004422a:	23c0      	movs	r3, #192	@ 0xc0
1004422c:	009b      	lsls	r3, r3, #2
1004422e:	4013      	ands	r3, r2
10044230:	d004      	beq.n	1004423c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
10044232:	687b      	ldr	r3, [r7, #4]
10044234:	0018      	movs	r0, r3
10044236:	f000 f8b1 	bl	1004439c <HAL_TIM_IC_CaptureCallback>
1004423a:	e007      	b.n	1004424c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004423c:	687b      	ldr	r3, [r7, #4]
1004423e:	0018      	movs	r0, r3
10044240:	f000 f8a4 	bl	1004438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10044244:	687b      	ldr	r3, [r7, #4]
10044246:	0018      	movs	r0, r3
10044248:	f000 f8b0 	bl	100443ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004424c:	687b      	ldr	r3, [r7, #4]
1004424e:	2200      	movs	r2, #0
10044250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
10044252:	68bb      	ldr	r3, [r7, #8]
10044254:	2208      	movs	r2, #8
10044256:	4013      	ands	r3, r2
10044258:	d021      	beq.n	1004429e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004425a:	68fb      	ldr	r3, [r7, #12]
1004425c:	2208      	movs	r2, #8
1004425e:	4013      	ands	r3, r2
10044260:	d01d      	beq.n	1004429e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
10044262:	687b      	ldr	r3, [r7, #4]
10044264:	681b      	ldr	r3, [r3, #0]
10044266:	2209      	movs	r2, #9
10044268:	4252      	negs	r2, r2
1004426a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004426c:	687b      	ldr	r3, [r7, #4]
1004426e:	2204      	movs	r2, #4
10044270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
10044272:	687b      	ldr	r3, [r7, #4]
10044274:	681b      	ldr	r3, [r3, #0]
10044276:	69db      	ldr	r3, [r3, #28]
10044278:	2203      	movs	r2, #3
1004427a:	4013      	ands	r3, r2
1004427c:	d004      	beq.n	10044288 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004427e:	687b      	ldr	r3, [r7, #4]
10044280:	0018      	movs	r0, r3
10044282:	f000 f88b 	bl	1004439c <HAL_TIM_IC_CaptureCallback>
10044286:	e007      	b.n	10044298 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
10044288:	687b      	ldr	r3, [r7, #4]
1004428a:	0018      	movs	r0, r3
1004428c:	f000 f87e 	bl	1004438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10044290:	687b      	ldr	r3, [r7, #4]
10044292:	0018      	movs	r0, r3
10044294:	f000 f88a 	bl	100443ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10044298:	687b      	ldr	r3, [r7, #4]
1004429a:	2200      	movs	r2, #0
1004429c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004429e:	68bb      	ldr	r3, [r7, #8]
100442a0:	2210      	movs	r2, #16
100442a2:	4013      	ands	r3, r2
100442a4:	d022      	beq.n	100442ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
100442a6:	68fb      	ldr	r3, [r7, #12]
100442a8:	2210      	movs	r2, #16
100442aa:	4013      	ands	r3, r2
100442ac:	d01e      	beq.n	100442ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
100442ae:	687b      	ldr	r3, [r7, #4]
100442b0:	681b      	ldr	r3, [r3, #0]
100442b2:	2211      	movs	r2, #17
100442b4:	4252      	negs	r2, r2
100442b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
100442b8:	687b      	ldr	r3, [r7, #4]
100442ba:	2208      	movs	r2, #8
100442bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
100442be:	687b      	ldr	r3, [r7, #4]
100442c0:	681b      	ldr	r3, [r3, #0]
100442c2:	69da      	ldr	r2, [r3, #28]
100442c4:	23c0      	movs	r3, #192	@ 0xc0
100442c6:	009b      	lsls	r3, r3, #2
100442c8:	4013      	ands	r3, r2
100442ca:	d004      	beq.n	100442d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
100442cc:	687b      	ldr	r3, [r7, #4]
100442ce:	0018      	movs	r0, r3
100442d0:	f000 f864 	bl	1004439c <HAL_TIM_IC_CaptureCallback>
100442d4:	e007      	b.n	100442e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
100442d6:	687b      	ldr	r3, [r7, #4]
100442d8:	0018      	movs	r0, r3
100442da:	f000 f857 	bl	1004438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
100442de:	687b      	ldr	r3, [r7, #4]
100442e0:	0018      	movs	r0, r3
100442e2:	f000 f863 	bl	100443ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100442e6:	687b      	ldr	r3, [r7, #4]
100442e8:	2200      	movs	r2, #0
100442ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
100442ec:	68bb      	ldr	r3, [r7, #8]
100442ee:	2201      	movs	r2, #1
100442f0:	4013      	ands	r3, r2
100442f2:	d00c      	beq.n	1004430e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
100442f4:	68fb      	ldr	r3, [r7, #12]
100442f6:	2201      	movs	r2, #1
100442f8:	4013      	ands	r3, r2
100442fa:	d008      	beq.n	1004430e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
100442fc:	687b      	ldr	r3, [r7, #4]
100442fe:	681b      	ldr	r3, [r3, #0]
10044300:	2202      	movs	r2, #2
10044302:	4252      	negs	r2, r2
10044304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
10044306:	687b      	ldr	r3, [r7, #4]
10044308:	0018      	movs	r0, r3
1004430a:	f000 f837 	bl	1004437c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004430e:	68bb      	ldr	r3, [r7, #8]
10044310:	2280      	movs	r2, #128	@ 0x80
10044312:	4013      	ands	r3, r2
10044314:	d00c      	beq.n	10044330 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
10044316:	68fb      	ldr	r3, [r7, #12]
10044318:	2280      	movs	r2, #128	@ 0x80
1004431a:	4013      	ands	r3, r2
1004431c:	d008      	beq.n	10044330 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004431e:	687b      	ldr	r3, [r7, #4]
10044320:	681b      	ldr	r3, [r3, #0]
10044322:	2281      	movs	r2, #129	@ 0x81
10044324:	4252      	negs	r2, r2
10044326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
10044328:	687b      	ldr	r3, [r7, #4]
1004432a:	0018      	movs	r0, r3
1004432c:	f000 f856 	bl	100443dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
10044330:	68bb      	ldr	r3, [r7, #8]
10044332:	2240      	movs	r2, #64	@ 0x40
10044334:	4013      	ands	r3, r2
10044336:	d00c      	beq.n	10044352 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
10044338:	68fb      	ldr	r3, [r7, #12]
1004433a:	2240      	movs	r2, #64	@ 0x40
1004433c:	4013      	ands	r3, r2
1004433e:	d008      	beq.n	10044352 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
10044340:	687b      	ldr	r3, [r7, #4]
10044342:	681b      	ldr	r3, [r3, #0]
10044344:	2241      	movs	r2, #65	@ 0x41
10044346:	4252      	negs	r2, r2
10044348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004434a:	687b      	ldr	r3, [r7, #4]
1004434c:	0018      	movs	r0, r3
1004434e:	f000 f835 	bl	100443bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
10044352:	68bb      	ldr	r3, [r7, #8]
10044354:	2220      	movs	r2, #32
10044356:	4013      	ands	r3, r2
10044358:	d00c      	beq.n	10044374 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004435a:	68fb      	ldr	r3, [r7, #12]
1004435c:	2220      	movs	r2, #32
1004435e:	4013      	ands	r3, r2
10044360:	d008      	beq.n	10044374 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
10044362:	687b      	ldr	r3, [r7, #4]
10044364:	681b      	ldr	r3, [r3, #0]
10044366:	2221      	movs	r2, #33	@ 0x21
10044368:	4252      	negs	r2, r2
1004436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004436c:	687b      	ldr	r3, [r7, #4]
1004436e:	0018      	movs	r0, r3
10044370:	f000 f82c 	bl	100443cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
10044374:	46c0      	nop			@ (mov r8, r8)
10044376:	46bd      	mov	sp, r7
10044378:	b004      	add	sp, #16
1004437a:	bd80      	pop	{r7, pc}

1004437c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004437c:	b580      	push	{r7, lr}
1004437e:	b082      	sub	sp, #8
10044380:	af00      	add	r7, sp, #0
10044382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
10044384:	46c0      	nop			@ (mov r8, r8)
10044386:	46bd      	mov	sp, r7
10044388:	b002      	add	sp, #8
1004438a:	bd80      	pop	{r7, pc}

1004438c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004438c:	b580      	push	{r7, lr}
1004438e:	b082      	sub	sp, #8
10044390:	af00      	add	r7, sp, #0
10044392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
10044394:	46c0      	nop			@ (mov r8, r8)
10044396:	46bd      	mov	sp, r7
10044398:	b002      	add	sp, #8
1004439a:	bd80      	pop	{r7, pc}

1004439c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004439c:	b580      	push	{r7, lr}
1004439e:	b082      	sub	sp, #8
100443a0:	af00      	add	r7, sp, #0
100443a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
100443a4:	46c0      	nop			@ (mov r8, r8)
100443a6:	46bd      	mov	sp, r7
100443a8:	b002      	add	sp, #8
100443aa:	bd80      	pop	{r7, pc}

100443ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
100443ac:	b580      	push	{r7, lr}
100443ae:	b082      	sub	sp, #8
100443b0:	af00      	add	r7, sp, #0
100443b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
100443b4:	46c0      	nop			@ (mov r8, r8)
100443b6:	46bd      	mov	sp, r7
100443b8:	b002      	add	sp, #8
100443ba:	bd80      	pop	{r7, pc}

100443bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
100443bc:	b580      	push	{r7, lr}
100443be:	b082      	sub	sp, #8
100443c0:	af00      	add	r7, sp, #0
100443c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
100443c4:	46c0      	nop			@ (mov r8, r8)
100443c6:	46bd      	mov	sp, r7
100443c8:	b002      	add	sp, #8
100443ca:	bd80      	pop	{r7, pc}

100443cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
100443cc:	b580      	push	{r7, lr}
100443ce:	b082      	sub	sp, #8
100443d0:	af00      	add	r7, sp, #0
100443d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
100443d4:	46c0      	nop			@ (mov r8, r8)
100443d6:	46bd      	mov	sp, r7
100443d8:	b002      	add	sp, #8
100443da:	bd80      	pop	{r7, pc}

100443dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
100443dc:	b580      	push	{r7, lr}
100443de:	b082      	sub	sp, #8
100443e0:	af00      	add	r7, sp, #0
100443e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
100443e4:	46c0      	nop			@ (mov r8, r8)
100443e6:	46bd      	mov	sp, r7
100443e8:	b002      	add	sp, #8
100443ea:	bd80      	pop	{r7, pc}

100443ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100443ec:	b580      	push	{r7, lr}
100443ee:	b082      	sub	sp, #8
100443f0:	af00      	add	r7, sp, #0
100443f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100443f4:	687b      	ldr	r3, [r7, #4]
100443f6:	2b00      	cmp	r3, #0
100443f8:	d101      	bne.n	100443fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100443fa:	2301      	movs	r3, #1
100443fc:	e046      	b.n	1004448c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100443fe:	687b      	ldr	r3, [r7, #4]
10044400:	2288      	movs	r2, #136	@ 0x88
10044402:	589b      	ldr	r3, [r3, r2]
10044404:	2b00      	cmp	r3, #0
10044406:	d107      	bne.n	10044418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10044408:	687b      	ldr	r3, [r7, #4]
1004440a:	2284      	movs	r2, #132	@ 0x84
1004440c:	2100      	movs	r1, #0
1004440e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10044410:	687b      	ldr	r3, [r7, #4]
10044412:	0018      	movs	r0, r3
10044414:	f7fc fb94 	bl	10040b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10044418:	687b      	ldr	r3, [r7, #4]
1004441a:	2288      	movs	r2, #136	@ 0x88
1004441c:	2124      	movs	r1, #36	@ 0x24
1004441e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10044420:	687b      	ldr	r3, [r7, #4]
10044422:	681b      	ldr	r3, [r3, #0]
10044424:	681a      	ldr	r2, [r3, #0]
10044426:	687b      	ldr	r3, [r7, #4]
10044428:	681b      	ldr	r3, [r3, #0]
1004442a:	2101      	movs	r1, #1
1004442c:	438a      	bics	r2, r1
1004442e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10044430:	687b      	ldr	r3, [r7, #4]
10044432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044434:	2b00      	cmp	r3, #0
10044436:	d003      	beq.n	10044440 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10044438:	687b      	ldr	r3, [r7, #4]
1004443a:	0018      	movs	r0, r3
1004443c:	f000 fcf6 	bl	10044e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10044440:	687b      	ldr	r3, [r7, #4]
10044442:	0018      	movs	r0, r3
10044444:	f000 fb8a 	bl	10044b5c <UART_SetConfig>
10044448:	0003      	movs	r3, r0
1004444a:	2b01      	cmp	r3, #1
1004444c:	d101      	bne.n	10044452 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
1004444e:	2301      	movs	r3, #1
10044450:	e01c      	b.n	1004448c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10044452:	687b      	ldr	r3, [r7, #4]
10044454:	681b      	ldr	r3, [r3, #0]
10044456:	685a      	ldr	r2, [r3, #4]
10044458:	687b      	ldr	r3, [r7, #4]
1004445a:	681b      	ldr	r3, [r3, #0]
1004445c:	490d      	ldr	r1, [pc, #52]	@ (10044494 <HAL_UART_Init+0xa8>)
1004445e:	400a      	ands	r2, r1
10044460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10044462:	687b      	ldr	r3, [r7, #4]
10044464:	681b      	ldr	r3, [r3, #0]
10044466:	689a      	ldr	r2, [r3, #8]
10044468:	687b      	ldr	r3, [r7, #4]
1004446a:	681b      	ldr	r3, [r3, #0]
1004446c:	212a      	movs	r1, #42	@ 0x2a
1004446e:	438a      	bics	r2, r1
10044470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10044472:	687b      	ldr	r3, [r7, #4]
10044474:	681b      	ldr	r3, [r3, #0]
10044476:	681a      	ldr	r2, [r3, #0]
10044478:	687b      	ldr	r3, [r7, #4]
1004447a:	681b      	ldr	r3, [r3, #0]
1004447c:	2101      	movs	r1, #1
1004447e:	430a      	orrs	r2, r1
10044480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10044482:	687b      	ldr	r3, [r7, #4]
10044484:	0018      	movs	r0, r3
10044486:	f000 fd85 	bl	10044f94 <UART_CheckIdleState>
1004448a:	0003      	movs	r3, r0
}
1004448c:	0018      	movs	r0, r3
1004448e:	46bd      	mov	sp, r7
10044490:	b002      	add	sp, #8
10044492:	bd80      	pop	{r7, pc}
10044494:	ffffb7ff 	.word	0xffffb7ff

10044498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
10044498:	b5b0      	push	{r4, r5, r7, lr}
1004449a:	b0aa      	sub	sp, #168	@ 0xa8
1004449c:	af00      	add	r7, sp, #0
1004449e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
100444a0:	687b      	ldr	r3, [r7, #4]
100444a2:	681b      	ldr	r3, [r3, #0]
100444a4:	69db      	ldr	r3, [r3, #28]
100444a6:	22a4      	movs	r2, #164	@ 0xa4
100444a8:	18b9      	adds	r1, r7, r2
100444aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
100444ac:	687b      	ldr	r3, [r7, #4]
100444ae:	681b      	ldr	r3, [r3, #0]
100444b0:	681b      	ldr	r3, [r3, #0]
100444b2:	20a0      	movs	r0, #160	@ 0xa0
100444b4:	1839      	adds	r1, r7, r0
100444b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
100444b8:	687b      	ldr	r3, [r7, #4]
100444ba:	681b      	ldr	r3, [r3, #0]
100444bc:	689b      	ldr	r3, [r3, #8]
100444be:	249c      	movs	r4, #156	@ 0x9c
100444c0:	1939      	adds	r1, r7, r4
100444c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
100444c4:	0011      	movs	r1, r2
100444c6:	18bb      	adds	r3, r7, r2
100444c8:	681b      	ldr	r3, [r3, #0]
100444ca:	4aa2      	ldr	r2, [pc, #648]	@ (10044754 <HAL_UART_IRQHandler+0x2bc>)
100444cc:	4013      	ands	r3, r2
100444ce:	2298      	movs	r2, #152	@ 0x98
100444d0:	18bd      	adds	r5, r7, r2
100444d2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
100444d4:	18bb      	adds	r3, r7, r2
100444d6:	681b      	ldr	r3, [r3, #0]
100444d8:	2b00      	cmp	r3, #0
100444da:	d11a      	bne.n	10044512 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
100444dc:	187b      	adds	r3, r7, r1
100444de:	681b      	ldr	r3, [r3, #0]
100444e0:	2220      	movs	r2, #32
100444e2:	4013      	ands	r3, r2
100444e4:	d015      	beq.n	10044512 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
100444e6:	183b      	adds	r3, r7, r0
100444e8:	681b      	ldr	r3, [r3, #0]
100444ea:	2220      	movs	r2, #32
100444ec:	4013      	ands	r3, r2
100444ee:	d105      	bne.n	100444fc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
100444f0:	193b      	adds	r3, r7, r4
100444f2:	681a      	ldr	r2, [r3, #0]
100444f4:	2380      	movs	r3, #128	@ 0x80
100444f6:	055b      	lsls	r3, r3, #21
100444f8:	4013      	ands	r3, r2
100444fa:	d00a      	beq.n	10044512 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
100444fc:	687b      	ldr	r3, [r7, #4]
100444fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10044500:	2b00      	cmp	r3, #0
10044502:	d100      	bne.n	10044506 <HAL_UART_IRQHandler+0x6e>
10044504:	e2fb      	b.n	10044afe <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
10044506:	687b      	ldr	r3, [r7, #4]
10044508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004450a:	687a      	ldr	r2, [r7, #4]
1004450c:	0010      	movs	r0, r2
1004450e:	4798      	blx	r3
      }
      return;
10044510:	e2f5      	b.n	10044afe <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
10044512:	2398      	movs	r3, #152	@ 0x98
10044514:	18fb      	adds	r3, r7, r3
10044516:	681b      	ldr	r3, [r3, #0]
10044518:	2b00      	cmp	r3, #0
1004451a:	d100      	bne.n	1004451e <HAL_UART_IRQHandler+0x86>
1004451c:	e122      	b.n	10044764 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004451e:	239c      	movs	r3, #156	@ 0x9c
10044520:	18fb      	adds	r3, r7, r3
10044522:	681b      	ldr	r3, [r3, #0]
10044524:	4a8c      	ldr	r2, [pc, #560]	@ (10044758 <HAL_UART_IRQHandler+0x2c0>)
10044526:	4013      	ands	r3, r2
10044528:	d106      	bne.n	10044538 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
1004452a:	23a0      	movs	r3, #160	@ 0xa0
1004452c:	18fb      	adds	r3, r7, r3
1004452e:	681b      	ldr	r3, [r3, #0]
10044530:	4a8a      	ldr	r2, [pc, #552]	@ (1004475c <HAL_UART_IRQHandler+0x2c4>)
10044532:	4013      	ands	r3, r2
10044534:	d100      	bne.n	10044538 <HAL_UART_IRQHandler+0xa0>
10044536:	e115      	b.n	10044764 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
10044538:	23a4      	movs	r3, #164	@ 0xa4
1004453a:	18fb      	adds	r3, r7, r3
1004453c:	681b      	ldr	r3, [r3, #0]
1004453e:	2201      	movs	r2, #1
10044540:	4013      	ands	r3, r2
10044542:	d012      	beq.n	1004456a <HAL_UART_IRQHandler+0xd2>
10044544:	23a0      	movs	r3, #160	@ 0xa0
10044546:	18fb      	adds	r3, r7, r3
10044548:	681a      	ldr	r2, [r3, #0]
1004454a:	2380      	movs	r3, #128	@ 0x80
1004454c:	005b      	lsls	r3, r3, #1
1004454e:	4013      	ands	r3, r2
10044550:	d00b      	beq.n	1004456a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
10044552:	687b      	ldr	r3, [r7, #4]
10044554:	681b      	ldr	r3, [r3, #0]
10044556:	2201      	movs	r2, #1
10044558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
1004455a:	687b      	ldr	r3, [r7, #4]
1004455c:	2290      	movs	r2, #144	@ 0x90
1004455e:	589b      	ldr	r3, [r3, r2]
10044560:	2201      	movs	r2, #1
10044562:	431a      	orrs	r2, r3
10044564:	687b      	ldr	r3, [r7, #4]
10044566:	2190      	movs	r1, #144	@ 0x90
10044568:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004456a:	23a4      	movs	r3, #164	@ 0xa4
1004456c:	18fb      	adds	r3, r7, r3
1004456e:	681b      	ldr	r3, [r3, #0]
10044570:	2202      	movs	r2, #2
10044572:	4013      	ands	r3, r2
10044574:	d011      	beq.n	1004459a <HAL_UART_IRQHandler+0x102>
10044576:	239c      	movs	r3, #156	@ 0x9c
10044578:	18fb      	adds	r3, r7, r3
1004457a:	681b      	ldr	r3, [r3, #0]
1004457c:	2201      	movs	r2, #1
1004457e:	4013      	ands	r3, r2
10044580:	d00b      	beq.n	1004459a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
10044582:	687b      	ldr	r3, [r7, #4]
10044584:	681b      	ldr	r3, [r3, #0]
10044586:	2202      	movs	r2, #2
10044588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
1004458a:	687b      	ldr	r3, [r7, #4]
1004458c:	2290      	movs	r2, #144	@ 0x90
1004458e:	589b      	ldr	r3, [r3, r2]
10044590:	2204      	movs	r2, #4
10044592:	431a      	orrs	r2, r3
10044594:	687b      	ldr	r3, [r7, #4]
10044596:	2190      	movs	r1, #144	@ 0x90
10044598:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004459a:	23a4      	movs	r3, #164	@ 0xa4
1004459c:	18fb      	adds	r3, r7, r3
1004459e:	681b      	ldr	r3, [r3, #0]
100445a0:	2204      	movs	r2, #4
100445a2:	4013      	ands	r3, r2
100445a4:	d011      	beq.n	100445ca <HAL_UART_IRQHandler+0x132>
100445a6:	239c      	movs	r3, #156	@ 0x9c
100445a8:	18fb      	adds	r3, r7, r3
100445aa:	681b      	ldr	r3, [r3, #0]
100445ac:	2201      	movs	r2, #1
100445ae:	4013      	ands	r3, r2
100445b0:	d00b      	beq.n	100445ca <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
100445b2:	687b      	ldr	r3, [r7, #4]
100445b4:	681b      	ldr	r3, [r3, #0]
100445b6:	2204      	movs	r2, #4
100445b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
100445ba:	687b      	ldr	r3, [r7, #4]
100445bc:	2290      	movs	r2, #144	@ 0x90
100445be:	589b      	ldr	r3, [r3, r2]
100445c0:	2202      	movs	r2, #2
100445c2:	431a      	orrs	r2, r3
100445c4:	687b      	ldr	r3, [r7, #4]
100445c6:	2190      	movs	r1, #144	@ 0x90
100445c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
100445ca:	23a4      	movs	r3, #164	@ 0xa4
100445cc:	18fb      	adds	r3, r7, r3
100445ce:	681b      	ldr	r3, [r3, #0]
100445d0:	2208      	movs	r2, #8
100445d2:	4013      	ands	r3, r2
100445d4:	d017      	beq.n	10044606 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100445d6:	23a0      	movs	r3, #160	@ 0xa0
100445d8:	18fb      	adds	r3, r7, r3
100445da:	681b      	ldr	r3, [r3, #0]
100445dc:	2220      	movs	r2, #32
100445de:	4013      	ands	r3, r2
100445e0:	d105      	bne.n	100445ee <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
100445e2:	239c      	movs	r3, #156	@ 0x9c
100445e4:	18fb      	adds	r3, r7, r3
100445e6:	681b      	ldr	r3, [r3, #0]
100445e8:	4a5b      	ldr	r2, [pc, #364]	@ (10044758 <HAL_UART_IRQHandler+0x2c0>)
100445ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100445ec:	d00b      	beq.n	10044606 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
100445ee:	687b      	ldr	r3, [r7, #4]
100445f0:	681b      	ldr	r3, [r3, #0]
100445f2:	2208      	movs	r2, #8
100445f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
100445f6:	687b      	ldr	r3, [r7, #4]
100445f8:	2290      	movs	r2, #144	@ 0x90
100445fa:	589b      	ldr	r3, [r3, r2]
100445fc:	2208      	movs	r2, #8
100445fe:	431a      	orrs	r2, r3
10044600:	687b      	ldr	r3, [r7, #4]
10044602:	2190      	movs	r1, #144	@ 0x90
10044604:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
10044606:	23a4      	movs	r3, #164	@ 0xa4
10044608:	18fb      	adds	r3, r7, r3
1004460a:	681a      	ldr	r2, [r3, #0]
1004460c:	2380      	movs	r3, #128	@ 0x80
1004460e:	011b      	lsls	r3, r3, #4
10044610:	4013      	ands	r3, r2
10044612:	d013      	beq.n	1004463c <HAL_UART_IRQHandler+0x1a4>
10044614:	23a0      	movs	r3, #160	@ 0xa0
10044616:	18fb      	adds	r3, r7, r3
10044618:	681a      	ldr	r2, [r3, #0]
1004461a:	2380      	movs	r3, #128	@ 0x80
1004461c:	04db      	lsls	r3, r3, #19
1004461e:	4013      	ands	r3, r2
10044620:	d00c      	beq.n	1004463c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10044622:	687b      	ldr	r3, [r7, #4]
10044624:	681b      	ldr	r3, [r3, #0]
10044626:	2280      	movs	r2, #128	@ 0x80
10044628:	0112      	lsls	r2, r2, #4
1004462a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
1004462c:	687b      	ldr	r3, [r7, #4]
1004462e:	2290      	movs	r2, #144	@ 0x90
10044630:	589b      	ldr	r3, [r3, r2]
10044632:	2220      	movs	r2, #32
10044634:	431a      	orrs	r2, r3
10044636:	687b      	ldr	r3, [r7, #4]
10044638:	2190      	movs	r1, #144	@ 0x90
1004463a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
1004463c:	687b      	ldr	r3, [r7, #4]
1004463e:	2290      	movs	r2, #144	@ 0x90
10044640:	589b      	ldr	r3, [r3, r2]
10044642:	2b00      	cmp	r3, #0
10044644:	d100      	bne.n	10044648 <HAL_UART_IRQHandler+0x1b0>
10044646:	e25c      	b.n	10044b02 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
10044648:	23a4      	movs	r3, #164	@ 0xa4
1004464a:	18fb      	adds	r3, r7, r3
1004464c:	681b      	ldr	r3, [r3, #0]
1004464e:	2220      	movs	r2, #32
10044650:	4013      	ands	r3, r2
10044652:	d015      	beq.n	10044680 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
10044654:	23a0      	movs	r3, #160	@ 0xa0
10044656:	18fb      	adds	r3, r7, r3
10044658:	681b      	ldr	r3, [r3, #0]
1004465a:	2220      	movs	r2, #32
1004465c:	4013      	ands	r3, r2
1004465e:	d106      	bne.n	1004466e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
10044660:	239c      	movs	r3, #156	@ 0x9c
10044662:	18fb      	adds	r3, r7, r3
10044664:	681a      	ldr	r2, [r3, #0]
10044666:	2380      	movs	r3, #128	@ 0x80
10044668:	055b      	lsls	r3, r3, #21
1004466a:	4013      	ands	r3, r2
1004466c:	d008      	beq.n	10044680 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
1004466e:	687b      	ldr	r3, [r7, #4]
10044670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10044672:	2b00      	cmp	r3, #0
10044674:	d004      	beq.n	10044680 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
10044676:	687b      	ldr	r3, [r7, #4]
10044678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004467a:	687a      	ldr	r2, [r7, #4]
1004467c:	0010      	movs	r0, r2
1004467e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
10044680:	687b      	ldr	r3, [r7, #4]
10044682:	2290      	movs	r2, #144	@ 0x90
10044684:	589b      	ldr	r3, [r3, r2]
10044686:	2194      	movs	r1, #148	@ 0x94
10044688:	187a      	adds	r2, r7, r1
1004468a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
1004468c:	687b      	ldr	r3, [r7, #4]
1004468e:	681b      	ldr	r3, [r3, #0]
10044690:	689b      	ldr	r3, [r3, #8]
10044692:	2240      	movs	r2, #64	@ 0x40
10044694:	4013      	ands	r3, r2
10044696:	2b40      	cmp	r3, #64	@ 0x40
10044698:	d004      	beq.n	100446a4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
1004469a:	187b      	adds	r3, r7, r1
1004469c:	681b      	ldr	r3, [r3, #0]
1004469e:	2228      	movs	r2, #40	@ 0x28
100446a0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
100446a2:	d04c      	beq.n	1004473e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
100446a4:	687b      	ldr	r3, [r7, #4]
100446a6:	0018      	movs	r0, r3
100446a8:	f000 fd8e 	bl	100451c8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
100446ac:	687b      	ldr	r3, [r7, #4]
100446ae:	681b      	ldr	r3, [r3, #0]
100446b0:	689b      	ldr	r3, [r3, #8]
100446b2:	2240      	movs	r2, #64	@ 0x40
100446b4:	4013      	ands	r3, r2
100446b6:	2b40      	cmp	r3, #64	@ 0x40
100446b8:	d13c      	bne.n	10044734 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100446ba:	f3ef 8310 	mrs	r3, PRIMASK
100446be:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
100446c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
100446c2:	2090      	movs	r0, #144	@ 0x90
100446c4:	183a      	adds	r2, r7, r0
100446c6:	6013      	str	r3, [r2, #0]
100446c8:	2301      	movs	r3, #1
100446ca:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100446cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100446ce:	f383 8810 	msr	PRIMASK, r3
}
100446d2:	46c0      	nop			@ (mov r8, r8)
100446d4:	687b      	ldr	r3, [r7, #4]
100446d6:	681b      	ldr	r3, [r3, #0]
100446d8:	689a      	ldr	r2, [r3, #8]
100446da:	687b      	ldr	r3, [r7, #4]
100446dc:	681b      	ldr	r3, [r3, #0]
100446de:	2140      	movs	r1, #64	@ 0x40
100446e0:	438a      	bics	r2, r1
100446e2:	609a      	str	r2, [r3, #8]
100446e4:	183b      	adds	r3, r7, r0
100446e6:	681b      	ldr	r3, [r3, #0]
100446e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100446ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
100446ec:	f383 8810 	msr	PRIMASK, r3
}
100446f0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
100446f2:	687b      	ldr	r3, [r7, #4]
100446f4:	2280      	movs	r2, #128	@ 0x80
100446f6:	589b      	ldr	r3, [r3, r2]
100446f8:	2b00      	cmp	r3, #0
100446fa:	d016      	beq.n	1004472a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
100446fc:	687b      	ldr	r3, [r7, #4]
100446fe:	2280      	movs	r2, #128	@ 0x80
10044700:	589b      	ldr	r3, [r3, r2]
10044702:	4a17      	ldr	r2, [pc, #92]	@ (10044760 <HAL_UART_IRQHandler+0x2c8>)
10044704:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
10044706:	687b      	ldr	r3, [r7, #4]
10044708:	2280      	movs	r2, #128	@ 0x80
1004470a:	589b      	ldr	r3, [r3, r2]
1004470c:	0018      	movs	r0, r3
1004470e:	f7fc ffd4 	bl	100416ba <HAL_DMA_Abort_IT>
10044712:	1e03      	subs	r3, r0, #0
10044714:	d01c      	beq.n	10044750 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
10044716:	687b      	ldr	r3, [r7, #4]
10044718:	2280      	movs	r2, #128	@ 0x80
1004471a:	589b      	ldr	r3, [r3, r2]
1004471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004471e:	687a      	ldr	r2, [r7, #4]
10044720:	2180      	movs	r1, #128	@ 0x80
10044722:	5852      	ldr	r2, [r2, r1]
10044724:	0010      	movs	r0, r2
10044726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10044728:	e012      	b.n	10044750 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
1004472a:	687b      	ldr	r3, [r7, #4]
1004472c:	0018      	movs	r0, r3
1004472e:	f000 fa01 	bl	10044b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10044732:	e00d      	b.n	10044750 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
10044734:	687b      	ldr	r3, [r7, #4]
10044736:	0018      	movs	r0, r3
10044738:	f000 f9fc 	bl	10044b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004473c:	e008      	b.n	10044750 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
1004473e:	687b      	ldr	r3, [r7, #4]
10044740:	0018      	movs	r0, r3
10044742:	f000 f9f7 	bl	10044b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
10044746:	687b      	ldr	r3, [r7, #4]
10044748:	2290      	movs	r2, #144	@ 0x90
1004474a:	2100      	movs	r1, #0
1004474c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
1004474e:	e1d8      	b.n	10044b02 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10044750:	46c0      	nop			@ (mov r8, r8)
    return;
10044752:	e1d6      	b.n	10044b02 <HAL_UART_IRQHandler+0x66a>
10044754:	0000080f 	.word	0x0000080f
10044758:	10000001 	.word	0x10000001
1004475c:	04000120 	.word	0x04000120
10044760:	10045295 	.word	0x10045295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10044764:	687b      	ldr	r3, [r7, #4]
10044766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10044768:	2b01      	cmp	r3, #1
1004476a:	d000      	beq.n	1004476e <HAL_UART_IRQHandler+0x2d6>
1004476c:	e15d      	b.n	10044a2a <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
1004476e:	23a4      	movs	r3, #164	@ 0xa4
10044770:	18fb      	adds	r3, r7, r3
10044772:	681b      	ldr	r3, [r3, #0]
10044774:	2210      	movs	r2, #16
10044776:	4013      	ands	r3, r2
10044778:	d100      	bne.n	1004477c <HAL_UART_IRQHandler+0x2e4>
1004477a:	e156      	b.n	10044a2a <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
1004477c:	23a0      	movs	r3, #160	@ 0xa0
1004477e:	18fb      	adds	r3, r7, r3
10044780:	681b      	ldr	r3, [r3, #0]
10044782:	2210      	movs	r2, #16
10044784:	4013      	ands	r3, r2
10044786:	d100      	bne.n	1004478a <HAL_UART_IRQHandler+0x2f2>
10044788:	e14f      	b.n	10044a2a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
1004478a:	687b      	ldr	r3, [r7, #4]
1004478c:	681b      	ldr	r3, [r3, #0]
1004478e:	2210      	movs	r2, #16
10044790:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10044792:	687b      	ldr	r3, [r7, #4]
10044794:	681b      	ldr	r3, [r3, #0]
10044796:	689b      	ldr	r3, [r3, #8]
10044798:	2240      	movs	r2, #64	@ 0x40
1004479a:	4013      	ands	r3, r2
1004479c:	2b40      	cmp	r3, #64	@ 0x40
1004479e:	d000      	beq.n	100447a2 <HAL_UART_IRQHandler+0x30a>
100447a0:	e0c3      	b.n	1004492a <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
100447a2:	687b      	ldr	r3, [r7, #4]
100447a4:	2280      	movs	r2, #128	@ 0x80
100447a6:	589b      	ldr	r3, [r3, r2]
100447a8:	681b      	ldr	r3, [r3, #0]
100447aa:	685a      	ldr	r2, [r3, #4]
100447ac:	217e      	movs	r1, #126	@ 0x7e
100447ae:	187b      	adds	r3, r7, r1
100447b0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
100447b2:	187b      	adds	r3, r7, r1
100447b4:	881b      	ldrh	r3, [r3, #0]
100447b6:	2b00      	cmp	r3, #0
100447b8:	d100      	bne.n	100447bc <HAL_UART_IRQHandler+0x324>
100447ba:	e097      	b.n	100448ec <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
100447bc:	687b      	ldr	r3, [r7, #4]
100447be:	225c      	movs	r2, #92	@ 0x5c
100447c0:	5a9b      	ldrh	r3, [r3, r2]
100447c2:	187a      	adds	r2, r7, r1
100447c4:	8812      	ldrh	r2, [r2, #0]
100447c6:	429a      	cmp	r2, r3
100447c8:	d300      	bcc.n	100447cc <HAL_UART_IRQHandler+0x334>
100447ca:	e08f      	b.n	100448ec <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
100447cc:	687b      	ldr	r3, [r7, #4]
100447ce:	187a      	adds	r2, r7, r1
100447d0:	215e      	movs	r1, #94	@ 0x5e
100447d2:	8812      	ldrh	r2, [r2, #0]
100447d4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
100447d6:	687b      	ldr	r3, [r7, #4]
100447d8:	2280      	movs	r2, #128	@ 0x80
100447da:	589b      	ldr	r3, [r3, r2]
100447dc:	681b      	ldr	r3, [r3, #0]
100447de:	681b      	ldr	r3, [r3, #0]
100447e0:	2220      	movs	r2, #32
100447e2:	4013      	ands	r3, r2
100447e4:	d170      	bne.n	100448c8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100447e6:	f3ef 8310 	mrs	r3, PRIMASK
100447ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
100447ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
100447ee:	67bb      	str	r3, [r7, #120]	@ 0x78
100447f0:	2301      	movs	r3, #1
100447f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100447f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447f6:	f383 8810 	msr	PRIMASK, r3
}
100447fa:	46c0      	nop			@ (mov r8, r8)
100447fc:	687b      	ldr	r3, [r7, #4]
100447fe:	681b      	ldr	r3, [r3, #0]
10044800:	681a      	ldr	r2, [r3, #0]
10044802:	687b      	ldr	r3, [r7, #4]
10044804:	681b      	ldr	r3, [r3, #0]
10044806:	49c4      	ldr	r1, [pc, #784]	@ (10044b18 <HAL_UART_IRQHandler+0x680>)
10044808:	400a      	ands	r2, r1
1004480a:	601a      	str	r2, [r3, #0]
1004480c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
1004480e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044812:	f383 8810 	msr	PRIMASK, r3
}
10044816:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10044818:	f3ef 8310 	mrs	r3, PRIMASK
1004481c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
1004481e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10044820:	677b      	str	r3, [r7, #116]	@ 0x74
10044822:	2301      	movs	r3, #1
10044824:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10044828:	f383 8810 	msr	PRIMASK, r3
}
1004482c:	46c0      	nop			@ (mov r8, r8)
1004482e:	687b      	ldr	r3, [r7, #4]
10044830:	681b      	ldr	r3, [r3, #0]
10044832:	689a      	ldr	r2, [r3, #8]
10044834:	687b      	ldr	r3, [r7, #4]
10044836:	681b      	ldr	r3, [r3, #0]
10044838:	2101      	movs	r1, #1
1004483a:	438a      	bics	r2, r1
1004483c:	609a      	str	r2, [r3, #8]
1004483e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10044840:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044844:	f383 8810 	msr	PRIMASK, r3
}
10044848:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004484a:	f3ef 8310 	mrs	r3, PRIMASK
1004484e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
10044850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
10044852:	673b      	str	r3, [r7, #112]	@ 0x70
10044854:	2301      	movs	r3, #1
10044856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004485a:	f383 8810 	msr	PRIMASK, r3
}
1004485e:	46c0      	nop			@ (mov r8, r8)
10044860:	687b      	ldr	r3, [r7, #4]
10044862:	681b      	ldr	r3, [r3, #0]
10044864:	689a      	ldr	r2, [r3, #8]
10044866:	687b      	ldr	r3, [r7, #4]
10044868:	681b      	ldr	r3, [r3, #0]
1004486a:	2140      	movs	r1, #64	@ 0x40
1004486c:	438a      	bics	r2, r1
1004486e:	609a      	str	r2, [r3, #8]
10044870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10044872:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10044876:	f383 8810 	msr	PRIMASK, r3
}
1004487a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
1004487c:	687b      	ldr	r3, [r7, #4]
1004487e:	228c      	movs	r2, #140	@ 0x8c
10044880:	2120      	movs	r1, #32
10044882:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10044884:	687b      	ldr	r3, [r7, #4]
10044886:	2200      	movs	r2, #0
10044888:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004488a:	f3ef 8310 	mrs	r3, PRIMASK
1004488e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
10044890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10044892:	66fb      	str	r3, [r7, #108]	@ 0x6c
10044894:	2301      	movs	r3, #1
10044896:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044898:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
1004489a:	f383 8810 	msr	PRIMASK, r3
}
1004489e:	46c0      	nop			@ (mov r8, r8)
100448a0:	687b      	ldr	r3, [r7, #4]
100448a2:	681b      	ldr	r3, [r3, #0]
100448a4:	681a      	ldr	r2, [r3, #0]
100448a6:	687b      	ldr	r3, [r7, #4]
100448a8:	681b      	ldr	r3, [r3, #0]
100448aa:	2110      	movs	r1, #16
100448ac:	438a      	bics	r2, r1
100448ae:	601a      	str	r2, [r3, #0]
100448b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
100448b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100448b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
100448b6:	f383 8810 	msr	PRIMASK, r3
}
100448ba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
100448bc:	687b      	ldr	r3, [r7, #4]
100448be:	2280      	movs	r2, #128	@ 0x80
100448c0:	589b      	ldr	r3, [r3, r2]
100448c2:	0018      	movs	r0, r3
100448c4:	f7fc feba 	bl	1004163c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
100448c8:	687b      	ldr	r3, [r7, #4]
100448ca:	2202      	movs	r2, #2
100448cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
100448ce:	687b      	ldr	r3, [r7, #4]
100448d0:	225c      	movs	r2, #92	@ 0x5c
100448d2:	5a9a      	ldrh	r2, [r3, r2]
100448d4:	687b      	ldr	r3, [r7, #4]
100448d6:	215e      	movs	r1, #94	@ 0x5e
100448d8:	5a5b      	ldrh	r3, [r3, r1]
100448da:	b29b      	uxth	r3, r3
100448dc:	1ad3      	subs	r3, r2, r3
100448de:	b29a      	uxth	r2, r3
100448e0:	687b      	ldr	r3, [r7, #4]
100448e2:	0011      	movs	r1, r2
100448e4:	0018      	movs	r0, r3
100448e6:	f000 f92d 	bl	10044b44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
100448ea:	e10c      	b.n	10044b06 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
100448ec:	687b      	ldr	r3, [r7, #4]
100448ee:	225c      	movs	r2, #92	@ 0x5c
100448f0:	5a9b      	ldrh	r3, [r3, r2]
100448f2:	227e      	movs	r2, #126	@ 0x7e
100448f4:	18ba      	adds	r2, r7, r2
100448f6:	8812      	ldrh	r2, [r2, #0]
100448f8:	429a      	cmp	r2, r3
100448fa:	d000      	beq.n	100448fe <HAL_UART_IRQHandler+0x466>
100448fc:	e103      	b.n	10044b06 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
100448fe:	687b      	ldr	r3, [r7, #4]
10044900:	2280      	movs	r2, #128	@ 0x80
10044902:	589b      	ldr	r3, [r3, r2]
10044904:	681b      	ldr	r3, [r3, #0]
10044906:	681b      	ldr	r3, [r3, #0]
10044908:	2220      	movs	r2, #32
1004490a:	4013      	ands	r3, r2
1004490c:	2b20      	cmp	r3, #32
1004490e:	d000      	beq.n	10044912 <HAL_UART_IRQHandler+0x47a>
10044910:	e0f9      	b.n	10044b06 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10044912:	687b      	ldr	r3, [r7, #4]
10044914:	2202      	movs	r2, #2
10044916:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
10044918:	687b      	ldr	r3, [r7, #4]
1004491a:	225c      	movs	r2, #92	@ 0x5c
1004491c:	5a9a      	ldrh	r2, [r3, r2]
1004491e:	687b      	ldr	r3, [r7, #4]
10044920:	0011      	movs	r1, r2
10044922:	0018      	movs	r0, r3
10044924:	f000 f90e 	bl	10044b44 <HAL_UARTEx_RxEventCallback>
      return;
10044928:	e0ed      	b.n	10044b06 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
1004492a:	687b      	ldr	r3, [r7, #4]
1004492c:	225c      	movs	r2, #92	@ 0x5c
1004492e:	5a99      	ldrh	r1, [r3, r2]
10044930:	687b      	ldr	r3, [r7, #4]
10044932:	225e      	movs	r2, #94	@ 0x5e
10044934:	5a9b      	ldrh	r3, [r3, r2]
10044936:	b29a      	uxth	r2, r3
10044938:	208e      	movs	r0, #142	@ 0x8e
1004493a:	183b      	adds	r3, r7, r0
1004493c:	1a8a      	subs	r2, r1, r2
1004493e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
10044940:	687b      	ldr	r3, [r7, #4]
10044942:	225e      	movs	r2, #94	@ 0x5e
10044944:	5a9b      	ldrh	r3, [r3, r2]
10044946:	b29b      	uxth	r3, r3
10044948:	2b00      	cmp	r3, #0
1004494a:	d100      	bne.n	1004494e <HAL_UART_IRQHandler+0x4b6>
1004494c:	e0dd      	b.n	10044b0a <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
1004494e:	183b      	adds	r3, r7, r0
10044950:	881b      	ldrh	r3, [r3, #0]
10044952:	2b00      	cmp	r3, #0
10044954:	d100      	bne.n	10044958 <HAL_UART_IRQHandler+0x4c0>
10044956:	e0d8      	b.n	10044b0a <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10044958:	f3ef 8310 	mrs	r3, PRIMASK
1004495c:	60fb      	str	r3, [r7, #12]
  return(result);
1004495e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10044960:	2488      	movs	r4, #136	@ 0x88
10044962:	193a      	adds	r2, r7, r4
10044964:	6013      	str	r3, [r2, #0]
10044966:	2301      	movs	r3, #1
10044968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004496a:	693b      	ldr	r3, [r7, #16]
1004496c:	f383 8810 	msr	PRIMASK, r3
}
10044970:	46c0      	nop			@ (mov r8, r8)
10044972:	687b      	ldr	r3, [r7, #4]
10044974:	681b      	ldr	r3, [r3, #0]
10044976:	681a      	ldr	r2, [r3, #0]
10044978:	687b      	ldr	r3, [r7, #4]
1004497a:	681b      	ldr	r3, [r3, #0]
1004497c:	4967      	ldr	r1, [pc, #412]	@ (10044b1c <HAL_UART_IRQHandler+0x684>)
1004497e:	400a      	ands	r2, r1
10044980:	601a      	str	r2, [r3, #0]
10044982:	193b      	adds	r3, r7, r4
10044984:	681b      	ldr	r3, [r3, #0]
10044986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044988:	697b      	ldr	r3, [r7, #20]
1004498a:	f383 8810 	msr	PRIMASK, r3
}
1004498e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10044990:	f3ef 8310 	mrs	r3, PRIMASK
10044994:	61bb      	str	r3, [r7, #24]
  return(result);
10044996:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10044998:	2484      	movs	r4, #132	@ 0x84
1004499a:	193a      	adds	r2, r7, r4
1004499c:	6013      	str	r3, [r2, #0]
1004499e:	2301      	movs	r3, #1
100449a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100449a2:	69fb      	ldr	r3, [r7, #28]
100449a4:	f383 8810 	msr	PRIMASK, r3
}
100449a8:	46c0      	nop			@ (mov r8, r8)
100449aa:	687b      	ldr	r3, [r7, #4]
100449ac:	681b      	ldr	r3, [r3, #0]
100449ae:	689a      	ldr	r2, [r3, #8]
100449b0:	687b      	ldr	r3, [r7, #4]
100449b2:	681b      	ldr	r3, [r3, #0]
100449b4:	495a      	ldr	r1, [pc, #360]	@ (10044b20 <HAL_UART_IRQHandler+0x688>)
100449b6:	400a      	ands	r2, r1
100449b8:	609a      	str	r2, [r3, #8]
100449ba:	193b      	adds	r3, r7, r4
100449bc:	681b      	ldr	r3, [r3, #0]
100449be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100449c0:	6a3b      	ldr	r3, [r7, #32]
100449c2:	f383 8810 	msr	PRIMASK, r3
}
100449c6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
100449c8:	687b      	ldr	r3, [r7, #4]
100449ca:	228c      	movs	r2, #140	@ 0x8c
100449cc:	2120      	movs	r1, #32
100449ce:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100449d0:	687b      	ldr	r3, [r7, #4]
100449d2:	2200      	movs	r2, #0
100449d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
100449d6:	687b      	ldr	r3, [r7, #4]
100449d8:	2200      	movs	r2, #0
100449da:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100449dc:	f3ef 8310 	mrs	r3, PRIMASK
100449e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
100449e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
100449e4:	2480      	movs	r4, #128	@ 0x80
100449e6:	193a      	adds	r2, r7, r4
100449e8:	6013      	str	r3, [r2, #0]
100449ea:	2301      	movs	r3, #1
100449ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100449ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100449f0:	f383 8810 	msr	PRIMASK, r3
}
100449f4:	46c0      	nop			@ (mov r8, r8)
100449f6:	687b      	ldr	r3, [r7, #4]
100449f8:	681b      	ldr	r3, [r3, #0]
100449fa:	681a      	ldr	r2, [r3, #0]
100449fc:	687b      	ldr	r3, [r7, #4]
100449fe:	681b      	ldr	r3, [r3, #0]
10044a00:	2110      	movs	r1, #16
10044a02:	438a      	bics	r2, r1
10044a04:	601a      	str	r2, [r3, #0]
10044a06:	193b      	adds	r3, r7, r4
10044a08:	681b      	ldr	r3, [r3, #0]
10044a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044a0e:	f383 8810 	msr	PRIMASK, r3
}
10044a12:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10044a14:	687b      	ldr	r3, [r7, #4]
10044a16:	2202      	movs	r2, #2
10044a18:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
10044a1a:	183b      	adds	r3, r7, r0
10044a1c:	881a      	ldrh	r2, [r3, #0]
10044a1e:	687b      	ldr	r3, [r7, #4]
10044a20:	0011      	movs	r1, r2
10044a22:	0018      	movs	r0, r3
10044a24:	f000 f88e 	bl	10044b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
10044a28:	e06f      	b.n	10044b0a <HAL_UART_IRQHandler+0x672>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
10044a2a:	23a4      	movs	r3, #164	@ 0xa4
10044a2c:	18fb      	adds	r3, r7, r3
10044a2e:	681a      	ldr	r2, [r3, #0]
10044a30:	2380      	movs	r3, #128	@ 0x80
10044a32:	035b      	lsls	r3, r3, #13
10044a34:	4013      	ands	r3, r2
10044a36:	d010      	beq.n	10044a5a <HAL_UART_IRQHandler+0x5c2>
10044a38:	239c      	movs	r3, #156	@ 0x9c
10044a3a:	18fb      	adds	r3, r7, r3
10044a3c:	681a      	ldr	r2, [r3, #0]
10044a3e:	2380      	movs	r3, #128	@ 0x80
10044a40:	03db      	lsls	r3, r3, #15
10044a42:	4013      	ands	r3, r2
10044a44:	d009      	beq.n	10044a5a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
10044a46:	687b      	ldr	r3, [r7, #4]
10044a48:	681b      	ldr	r3, [r3, #0]
10044a4a:	2280      	movs	r2, #128	@ 0x80
10044a4c:	0352      	lsls	r2, r2, #13
10044a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
10044a50:	687b      	ldr	r3, [r7, #4]
10044a52:	0018      	movs	r0, r3
10044a54:	f000 fc5d 	bl	10045312 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10044a58:	e05a      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
10044a5a:	23a4      	movs	r3, #164	@ 0xa4
10044a5c:	18fb      	adds	r3, r7, r3
10044a5e:	681b      	ldr	r3, [r3, #0]
10044a60:	2280      	movs	r2, #128	@ 0x80
10044a62:	4013      	ands	r3, r2
10044a64:	d016      	beq.n	10044a94 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
10044a66:	23a0      	movs	r3, #160	@ 0xa0
10044a68:	18fb      	adds	r3, r7, r3
10044a6a:	681b      	ldr	r3, [r3, #0]
10044a6c:	2280      	movs	r2, #128	@ 0x80
10044a6e:	4013      	ands	r3, r2
10044a70:	d106      	bne.n	10044a80 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
10044a72:	239c      	movs	r3, #156	@ 0x9c
10044a74:	18fb      	adds	r3, r7, r3
10044a76:	681a      	ldr	r2, [r3, #0]
10044a78:	2380      	movs	r3, #128	@ 0x80
10044a7a:	041b      	lsls	r3, r3, #16
10044a7c:	4013      	ands	r3, r2
10044a7e:	d009      	beq.n	10044a94 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
10044a80:	687b      	ldr	r3, [r7, #4]
10044a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10044a84:	2b00      	cmp	r3, #0
10044a86:	d042      	beq.n	10044b0e <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
10044a88:	687b      	ldr	r3, [r7, #4]
10044a8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10044a8c:	687a      	ldr	r2, [r7, #4]
10044a8e:	0010      	movs	r0, r2
10044a90:	4798      	blx	r3
    }
    return;
10044a92:	e03c      	b.n	10044b0e <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
10044a94:	23a4      	movs	r3, #164	@ 0xa4
10044a96:	18fb      	adds	r3, r7, r3
10044a98:	681b      	ldr	r3, [r3, #0]
10044a9a:	2240      	movs	r2, #64	@ 0x40
10044a9c:	4013      	ands	r3, r2
10044a9e:	d00a      	beq.n	10044ab6 <HAL_UART_IRQHandler+0x61e>
10044aa0:	23a0      	movs	r3, #160	@ 0xa0
10044aa2:	18fb      	adds	r3, r7, r3
10044aa4:	681b      	ldr	r3, [r3, #0]
10044aa6:	2240      	movs	r2, #64	@ 0x40
10044aa8:	4013      	ands	r3, r2
10044aaa:	d004      	beq.n	10044ab6 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
10044aac:	687b      	ldr	r3, [r7, #4]
10044aae:	0018      	movs	r0, r3
10044ab0:	f000 fc03 	bl	100452ba <UART_EndTransmit_IT>
    return;
10044ab4:	e02c      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
10044ab6:	23a4      	movs	r3, #164	@ 0xa4
10044ab8:	18fb      	adds	r3, r7, r3
10044aba:	681a      	ldr	r2, [r3, #0]
10044abc:	2380      	movs	r3, #128	@ 0x80
10044abe:	041b      	lsls	r3, r3, #16
10044ac0:	4013      	ands	r3, r2
10044ac2:	d00b      	beq.n	10044adc <HAL_UART_IRQHandler+0x644>
10044ac4:	23a0      	movs	r3, #160	@ 0xa0
10044ac6:	18fb      	adds	r3, r7, r3
10044ac8:	681a      	ldr	r2, [r3, #0]
10044aca:	2380      	movs	r3, #128	@ 0x80
10044acc:	05db      	lsls	r3, r3, #23
10044ace:	4013      	ands	r3, r2
10044ad0:	d004      	beq.n	10044adc <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
10044ad2:	687b      	ldr	r3, [r7, #4]
10044ad4:	0018      	movs	r0, r3
10044ad6:	f000 fc2c 	bl	10045332 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10044ada:	e019      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
10044adc:	23a4      	movs	r3, #164	@ 0xa4
10044ade:	18fb      	adds	r3, r7, r3
10044ae0:	681a      	ldr	r2, [r3, #0]
10044ae2:	2380      	movs	r3, #128	@ 0x80
10044ae4:	045b      	lsls	r3, r3, #17
10044ae6:	4013      	ands	r3, r2
10044ae8:	d012      	beq.n	10044b10 <HAL_UART_IRQHandler+0x678>
10044aea:	23a0      	movs	r3, #160	@ 0xa0
10044aec:	18fb      	adds	r3, r7, r3
10044aee:	681b      	ldr	r3, [r3, #0]
10044af0:	2b00      	cmp	r3, #0
10044af2:	da0d      	bge.n	10044b10 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
10044af4:	687b      	ldr	r3, [r7, #4]
10044af6:	0018      	movs	r0, r3
10044af8:	f000 fc13 	bl	10045322 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10044afc:	e008      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
      return;
10044afe:	46c0      	nop			@ (mov r8, r8)
10044b00:	e006      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
    return;
10044b02:	46c0      	nop			@ (mov r8, r8)
10044b04:	e004      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
      return;
10044b06:	46c0      	nop			@ (mov r8, r8)
10044b08:	e002      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
      return;
10044b0a:	46c0      	nop			@ (mov r8, r8)
10044b0c:	e000      	b.n	10044b10 <HAL_UART_IRQHandler+0x678>
    return;
10044b0e:	46c0      	nop			@ (mov r8, r8)
  }
}
10044b10:	46bd      	mov	sp, r7
10044b12:	b02a      	add	sp, #168	@ 0xa8
10044b14:	bdb0      	pop	{r4, r5, r7, pc}
10044b16:	46c0      	nop			@ (mov r8, r8)
10044b18:	fffffeff 	.word	0xfffffeff
10044b1c:	fffffedf 	.word	0xfffffedf
10044b20:	effffffe 	.word	0xeffffffe

10044b24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
10044b24:	b580      	push	{r7, lr}
10044b26:	b082      	sub	sp, #8
10044b28:	af00      	add	r7, sp, #0
10044b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
10044b2c:	46c0      	nop			@ (mov r8, r8)
10044b2e:	46bd      	mov	sp, r7
10044b30:	b002      	add	sp, #8
10044b32:	bd80      	pop	{r7, pc}

10044b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
10044b34:	b580      	push	{r7, lr}
10044b36:	b082      	sub	sp, #8
10044b38:	af00      	add	r7, sp, #0
10044b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
10044b3c:	46c0      	nop			@ (mov r8, r8)
10044b3e:	46bd      	mov	sp, r7
10044b40:	b002      	add	sp, #8
10044b42:	bd80      	pop	{r7, pc}

10044b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
10044b44:	b580      	push	{r7, lr}
10044b46:	b082      	sub	sp, #8
10044b48:	af00      	add	r7, sp, #0
10044b4a:	6078      	str	r0, [r7, #4]
10044b4c:	000a      	movs	r2, r1
10044b4e:	1cbb      	adds	r3, r7, #2
10044b50:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
10044b52:	46c0      	nop			@ (mov r8, r8)
10044b54:	46bd      	mov	sp, r7
10044b56:	b002      	add	sp, #8
10044b58:	bd80      	pop	{r7, pc}
	...

10044b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10044b5c:	b5b0      	push	{r4, r5, r7, lr}
10044b5e:	b090      	sub	sp, #64	@ 0x40
10044b60:	af00      	add	r7, sp, #0
10044b62:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10044b64:	231b      	movs	r3, #27
10044b66:	2220      	movs	r2, #32
10044b68:	189b      	adds	r3, r3, r2
10044b6a:	19db      	adds	r3, r3, r7
10044b6c:	2200      	movs	r2, #0
10044b6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10044b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044b72:	689a      	ldr	r2, [r3, #8]
10044b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044b76:	691b      	ldr	r3, [r3, #16]
10044b78:	431a      	orrs	r2, r3
10044b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044b7c:	695b      	ldr	r3, [r3, #20]
10044b7e:	431a      	orrs	r2, r3
10044b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044b82:	69db      	ldr	r3, [r3, #28]
10044b84:	4313      	orrs	r3, r2
10044b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10044b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044b8a:	681b      	ldr	r3, [r3, #0]
10044b8c:	681b      	ldr	r3, [r3, #0]
10044b8e:	4aa1      	ldr	r2, [pc, #644]	@ (10044e14 <UART_SetConfig+0x2b8>)
10044b90:	4013      	ands	r3, r2
10044b92:	0019      	movs	r1, r3
10044b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044b96:	681a      	ldr	r2, [r3, #0]
10044b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044b9a:	430b      	orrs	r3, r1
10044b9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10044b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044ba0:	681b      	ldr	r3, [r3, #0]
10044ba2:	685b      	ldr	r3, [r3, #4]
10044ba4:	4a9c      	ldr	r2, [pc, #624]	@ (10044e18 <UART_SetConfig+0x2bc>)
10044ba6:	4013      	ands	r3, r2
10044ba8:	0018      	movs	r0, r3
10044baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bac:	68d9      	ldr	r1, [r3, #12]
10044bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bb0:	681a      	ldr	r2, [r3, #0]
10044bb2:	0003      	movs	r3, r0
10044bb4:	430b      	orrs	r3, r1
10044bb6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10044bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bba:	699b      	ldr	r3, [r3, #24]
10044bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10044bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bc0:	681b      	ldr	r3, [r3, #0]
10044bc2:	4a96      	ldr	r2, [pc, #600]	@ (10044e1c <UART_SetConfig+0x2c0>)
10044bc4:	4293      	cmp	r3, r2
10044bc6:	d004      	beq.n	10044bd2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10044bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bca:	6a1b      	ldr	r3, [r3, #32]
10044bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10044bce:	4313      	orrs	r3, r2
10044bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10044bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bd4:	681b      	ldr	r3, [r3, #0]
10044bd6:	689b      	ldr	r3, [r3, #8]
10044bd8:	4a91      	ldr	r2, [pc, #580]	@ (10044e20 <UART_SetConfig+0x2c4>)
10044bda:	4013      	ands	r3, r2
10044bdc:	0019      	movs	r1, r3
10044bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044be0:	681a      	ldr	r2, [r3, #0]
10044be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044be4:	430b      	orrs	r3, r1
10044be6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10044be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bea:	681b      	ldr	r3, [r3, #0]
10044bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10044bee:	220f      	movs	r2, #15
10044bf0:	4393      	bics	r3, r2
10044bf2:	0018      	movs	r0, r3
10044bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bf6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10044bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044bfa:	681a      	ldr	r2, [r3, #0]
10044bfc:	0003      	movs	r3, r0
10044bfe:	430b      	orrs	r3, r1
10044c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10044c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044c04:	681b      	ldr	r3, [r3, #0]
10044c06:	4a85      	ldr	r2, [pc, #532]	@ (10044e1c <UART_SetConfig+0x2c0>)
10044c08:	4293      	cmp	r3, r2
10044c0a:	d16d      	bne.n	10044ce8 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10044c0c:	2010      	movs	r0, #16
10044c0e:	f7ff fa2b 	bl	10044068 <HAL_RCCEx_GetPeriphCLKFreq>
10044c12:	0003      	movs	r3, r0
10044c14:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10044c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044c18:	2b00      	cmp	r3, #0
10044c1a:	d100      	bne.n	10044c1e <UART_SetConfig+0xc2>
10044c1c:	e0e3      	b.n	10044de6 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10044c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10044c22:	4b80      	ldr	r3, [pc, #512]	@ (10044e24 <UART_SetConfig+0x2c8>)
10044c24:	0052      	lsls	r2, r2, #1
10044c26:	5ad3      	ldrh	r3, [r2, r3]
10044c28:	0019      	movs	r1, r3
10044c2a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10044c2c:	f7fb fa6a 	bl	10040104 <__udivsi3>
10044c30:	0003      	movs	r3, r0
10044c32:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10044c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044c36:	685a      	ldr	r2, [r3, #4]
10044c38:	0013      	movs	r3, r2
10044c3a:	005b      	lsls	r3, r3, #1
10044c3c:	189b      	adds	r3, r3, r2
10044c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044c40:	429a      	cmp	r2, r3
10044c42:	d305      	bcc.n	10044c50 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10044c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044c46:	685b      	ldr	r3, [r3, #4]
10044c48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10044c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044c4c:	429a      	cmp	r2, r3
10044c4e:	d906      	bls.n	10044c5e <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10044c50:	231b      	movs	r3, #27
10044c52:	2220      	movs	r2, #32
10044c54:	189b      	adds	r3, r3, r2
10044c56:	19db      	adds	r3, r3, r7
10044c58:	2201      	movs	r2, #1
10044c5a:	701a      	strb	r2, [r3, #0]
10044c5c:	e0c3      	b.n	10044de6 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10044c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044c60:	61bb      	str	r3, [r7, #24]
10044c62:	2300      	movs	r3, #0
10044c64:	61fb      	str	r3, [r7, #28]
10044c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10044c6a:	4b6e      	ldr	r3, [pc, #440]	@ (10044e24 <UART_SetConfig+0x2c8>)
10044c6c:	0052      	lsls	r2, r2, #1
10044c6e:	5ad3      	ldrh	r3, [r2, r3]
10044c70:	613b      	str	r3, [r7, #16]
10044c72:	2300      	movs	r3, #0
10044c74:	617b      	str	r3, [r7, #20]
10044c76:	693a      	ldr	r2, [r7, #16]
10044c78:	697b      	ldr	r3, [r7, #20]
10044c7a:	69b8      	ldr	r0, [r7, #24]
10044c7c:	69f9      	ldr	r1, [r7, #28]
10044c7e:	f7fb fbb7 	bl	100403f0 <__aeabi_uldivmod>
10044c82:	0002      	movs	r2, r0
10044c84:	000b      	movs	r3, r1
10044c86:	0e11      	lsrs	r1, r2, #24
10044c88:	021d      	lsls	r5, r3, #8
10044c8a:	430d      	orrs	r5, r1
10044c8c:	0214      	lsls	r4, r2, #8
10044c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044c90:	685b      	ldr	r3, [r3, #4]
10044c92:	085b      	lsrs	r3, r3, #1
10044c94:	60bb      	str	r3, [r7, #8]
10044c96:	2300      	movs	r3, #0
10044c98:	60fb      	str	r3, [r7, #12]
10044c9a:	68b8      	ldr	r0, [r7, #8]
10044c9c:	68f9      	ldr	r1, [r7, #12]
10044c9e:	1900      	adds	r0, r0, r4
10044ca0:	4169      	adcs	r1, r5
10044ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044ca4:	685b      	ldr	r3, [r3, #4]
10044ca6:	603b      	str	r3, [r7, #0]
10044ca8:	2300      	movs	r3, #0
10044caa:	607b      	str	r3, [r7, #4]
10044cac:	683a      	ldr	r2, [r7, #0]
10044cae:	687b      	ldr	r3, [r7, #4]
10044cb0:	f7fb fb9e 	bl	100403f0 <__aeabi_uldivmod>
10044cb4:	0002      	movs	r2, r0
10044cb6:	000b      	movs	r3, r1
10044cb8:	0013      	movs	r3, r2
10044cba:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10044cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044cbe:	23c0      	movs	r3, #192	@ 0xc0
10044cc0:	009b      	lsls	r3, r3, #2
10044cc2:	429a      	cmp	r2, r3
10044cc4:	d309      	bcc.n	10044cda <UART_SetConfig+0x17e>
10044cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044cc8:	2380      	movs	r3, #128	@ 0x80
10044cca:	035b      	lsls	r3, r3, #13
10044ccc:	429a      	cmp	r2, r3
10044cce:	d204      	bcs.n	10044cda <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10044cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044cd2:	681b      	ldr	r3, [r3, #0]
10044cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044cd6:	60da      	str	r2, [r3, #12]
10044cd8:	e085      	b.n	10044de6 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10044cda:	231b      	movs	r3, #27
10044cdc:	2220      	movs	r2, #32
10044cde:	189b      	adds	r3, r3, r2
10044ce0:	19db      	adds	r3, r3, r7
10044ce2:	2201      	movs	r2, #1
10044ce4:	701a      	strb	r2, [r3, #0]
10044ce6:	e07e      	b.n	10044de6 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10044ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044cea:	69da      	ldr	r2, [r3, #28]
10044cec:	2380      	movs	r3, #128	@ 0x80
10044cee:	021b      	lsls	r3, r3, #8
10044cf0:	429a      	cmp	r2, r3
10044cf2:	d148      	bne.n	10044d86 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10044cf4:	4b4c      	ldr	r3, [pc, #304]	@ (10044e28 <UART_SetConfig+0x2cc>)
10044cf6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10044cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044cfa:	2b00      	cmp	r3, #0
10044cfc:	d100      	bne.n	10044d00 <UART_SetConfig+0x1a4>
10044cfe:	e072      	b.n	10044de6 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10044d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10044d04:	4b47      	ldr	r3, [pc, #284]	@ (10044e24 <UART_SetConfig+0x2c8>)
10044d06:	0052      	lsls	r2, r2, #1
10044d08:	5ad3      	ldrh	r3, [r2, r3]
10044d0a:	0019      	movs	r1, r3
10044d0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10044d0e:	f7fb f9f9 	bl	10040104 <__udivsi3>
10044d12:	0003      	movs	r3, r0
10044d14:	005a      	lsls	r2, r3, #1
10044d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044d18:	685b      	ldr	r3, [r3, #4]
10044d1a:	085b      	lsrs	r3, r3, #1
10044d1c:	18d2      	adds	r2, r2, r3
10044d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044d20:	685b      	ldr	r3, [r3, #4]
10044d22:	0019      	movs	r1, r3
10044d24:	0010      	movs	r0, r2
10044d26:	f7fb f9ed 	bl	10040104 <__udivsi3>
10044d2a:	0003      	movs	r3, r0
10044d2c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10044d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044d30:	2b0f      	cmp	r3, #15
10044d32:	d921      	bls.n	10044d78 <UART_SetConfig+0x21c>
10044d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044d36:	2380      	movs	r3, #128	@ 0x80
10044d38:	025b      	lsls	r3, r3, #9
10044d3a:	429a      	cmp	r2, r3
10044d3c:	d21c      	bcs.n	10044d78 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10044d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044d40:	b29a      	uxth	r2, r3
10044d42:	200e      	movs	r0, #14
10044d44:	2420      	movs	r4, #32
10044d46:	1903      	adds	r3, r0, r4
10044d48:	19db      	adds	r3, r3, r7
10044d4a:	210f      	movs	r1, #15
10044d4c:	438a      	bics	r2, r1
10044d4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10044d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044d52:	085b      	lsrs	r3, r3, #1
10044d54:	b29b      	uxth	r3, r3
10044d56:	2207      	movs	r2, #7
10044d58:	4013      	ands	r3, r2
10044d5a:	b299      	uxth	r1, r3
10044d5c:	1903      	adds	r3, r0, r4
10044d5e:	19db      	adds	r3, r3, r7
10044d60:	1902      	adds	r2, r0, r4
10044d62:	19d2      	adds	r2, r2, r7
10044d64:	8812      	ldrh	r2, [r2, #0]
10044d66:	430a      	orrs	r2, r1
10044d68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10044d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044d6c:	681b      	ldr	r3, [r3, #0]
10044d6e:	1902      	adds	r2, r0, r4
10044d70:	19d2      	adds	r2, r2, r7
10044d72:	8812      	ldrh	r2, [r2, #0]
10044d74:	60da      	str	r2, [r3, #12]
10044d76:	e036      	b.n	10044de6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10044d78:	231b      	movs	r3, #27
10044d7a:	2220      	movs	r2, #32
10044d7c:	189b      	adds	r3, r3, r2
10044d7e:	19db      	adds	r3, r3, r7
10044d80:	2201      	movs	r2, #1
10044d82:	701a      	strb	r2, [r3, #0]
10044d84:	e02f      	b.n	10044de6 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10044d86:	4b28      	ldr	r3, [pc, #160]	@ (10044e28 <UART_SetConfig+0x2cc>)
10044d88:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10044d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044d8c:	2b00      	cmp	r3, #0
10044d8e:	d02a      	beq.n	10044de6 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10044d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10044d94:	4b23      	ldr	r3, [pc, #140]	@ (10044e24 <UART_SetConfig+0x2c8>)
10044d96:	0052      	lsls	r2, r2, #1
10044d98:	5ad3      	ldrh	r3, [r2, r3]
10044d9a:	0019      	movs	r1, r3
10044d9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10044d9e:	f7fb f9b1 	bl	10040104 <__udivsi3>
10044da2:	0003      	movs	r3, r0
10044da4:	001a      	movs	r2, r3
10044da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044da8:	685b      	ldr	r3, [r3, #4]
10044daa:	085b      	lsrs	r3, r3, #1
10044dac:	18d2      	adds	r2, r2, r3
10044dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044db0:	685b      	ldr	r3, [r3, #4]
10044db2:	0019      	movs	r1, r3
10044db4:	0010      	movs	r0, r2
10044db6:	f7fb f9a5 	bl	10040104 <__udivsi3>
10044dba:	0003      	movs	r3, r0
10044dbc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10044dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044dc0:	2b0f      	cmp	r3, #15
10044dc2:	d90a      	bls.n	10044dda <UART_SetConfig+0x27e>
10044dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044dc6:	2380      	movs	r3, #128	@ 0x80
10044dc8:	025b      	lsls	r3, r3, #9
10044dca:	429a      	cmp	r2, r3
10044dcc:	d205      	bcs.n	10044dda <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10044dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044dd0:	b29a      	uxth	r2, r3
10044dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044dd4:	681b      	ldr	r3, [r3, #0]
10044dd6:	60da      	str	r2, [r3, #12]
10044dd8:	e005      	b.n	10044de6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10044dda:	231b      	movs	r3, #27
10044ddc:	2220      	movs	r2, #32
10044dde:	189b      	adds	r3, r3, r2
10044de0:	19db      	adds	r3, r3, r7
10044de2:	2201      	movs	r2, #1
10044de4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10044de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044de8:	226a      	movs	r2, #106	@ 0x6a
10044dea:	2101      	movs	r1, #1
10044dec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10044dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044df0:	2268      	movs	r2, #104	@ 0x68
10044df2:	2101      	movs	r1, #1
10044df4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10044df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044df8:	2200      	movs	r2, #0
10044dfa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10044dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044dfe:	2200      	movs	r2, #0
10044e00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10044e02:	231b      	movs	r3, #27
10044e04:	2220      	movs	r2, #32
10044e06:	189b      	adds	r3, r3, r2
10044e08:	19db      	adds	r3, r3, r7
10044e0a:	781b      	ldrb	r3, [r3, #0]
}
10044e0c:	0018      	movs	r0, r3
10044e0e:	46bd      	mov	sp, r7
10044e10:	b010      	add	sp, #64	@ 0x40
10044e12:	bdb0      	pop	{r4, r5, r7, pc}
10044e14:	cfff69f3 	.word	0xcfff69f3
10044e18:	ffffcfff 	.word	0xffffcfff
10044e1c:	41005000 	.word	0x41005000
10044e20:	11fff4ff 	.word	0x11fff4ff
10044e24:	1004559c 	.word	0x1004559c
10044e28:	00f42400 	.word	0x00f42400

10044e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10044e2c:	b580      	push	{r7, lr}
10044e2e:	b082      	sub	sp, #8
10044e30:	af00      	add	r7, sp, #0
10044e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10044e34:	687b      	ldr	r3, [r7, #4]
10044e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044e38:	2208      	movs	r2, #8
10044e3a:	4013      	ands	r3, r2
10044e3c:	d00b      	beq.n	10044e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10044e3e:	687b      	ldr	r3, [r7, #4]
10044e40:	681b      	ldr	r3, [r3, #0]
10044e42:	685b      	ldr	r3, [r3, #4]
10044e44:	4a4a      	ldr	r2, [pc, #296]	@ (10044f70 <UART_AdvFeatureConfig+0x144>)
10044e46:	4013      	ands	r3, r2
10044e48:	0019      	movs	r1, r3
10044e4a:	687b      	ldr	r3, [r7, #4]
10044e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10044e4e:	687b      	ldr	r3, [r7, #4]
10044e50:	681b      	ldr	r3, [r3, #0]
10044e52:	430a      	orrs	r2, r1
10044e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10044e56:	687b      	ldr	r3, [r7, #4]
10044e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044e5a:	2201      	movs	r2, #1
10044e5c:	4013      	ands	r3, r2
10044e5e:	d00b      	beq.n	10044e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10044e60:	687b      	ldr	r3, [r7, #4]
10044e62:	681b      	ldr	r3, [r3, #0]
10044e64:	685b      	ldr	r3, [r3, #4]
10044e66:	4a43      	ldr	r2, [pc, #268]	@ (10044f74 <UART_AdvFeatureConfig+0x148>)
10044e68:	4013      	ands	r3, r2
10044e6a:	0019      	movs	r1, r3
10044e6c:	687b      	ldr	r3, [r7, #4]
10044e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10044e70:	687b      	ldr	r3, [r7, #4]
10044e72:	681b      	ldr	r3, [r3, #0]
10044e74:	430a      	orrs	r2, r1
10044e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10044e78:	687b      	ldr	r3, [r7, #4]
10044e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044e7c:	2202      	movs	r2, #2
10044e7e:	4013      	ands	r3, r2
10044e80:	d00b      	beq.n	10044e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10044e82:	687b      	ldr	r3, [r7, #4]
10044e84:	681b      	ldr	r3, [r3, #0]
10044e86:	685b      	ldr	r3, [r3, #4]
10044e88:	4a3b      	ldr	r2, [pc, #236]	@ (10044f78 <UART_AdvFeatureConfig+0x14c>)
10044e8a:	4013      	ands	r3, r2
10044e8c:	0019      	movs	r1, r3
10044e8e:	687b      	ldr	r3, [r7, #4]
10044e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10044e92:	687b      	ldr	r3, [r7, #4]
10044e94:	681b      	ldr	r3, [r3, #0]
10044e96:	430a      	orrs	r2, r1
10044e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10044e9a:	687b      	ldr	r3, [r7, #4]
10044e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044e9e:	2204      	movs	r2, #4
10044ea0:	4013      	ands	r3, r2
10044ea2:	d00b      	beq.n	10044ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10044ea4:	687b      	ldr	r3, [r7, #4]
10044ea6:	681b      	ldr	r3, [r3, #0]
10044ea8:	685b      	ldr	r3, [r3, #4]
10044eaa:	4a34      	ldr	r2, [pc, #208]	@ (10044f7c <UART_AdvFeatureConfig+0x150>)
10044eac:	4013      	ands	r3, r2
10044eae:	0019      	movs	r1, r3
10044eb0:	687b      	ldr	r3, [r7, #4]
10044eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10044eb4:	687b      	ldr	r3, [r7, #4]
10044eb6:	681b      	ldr	r3, [r3, #0]
10044eb8:	430a      	orrs	r2, r1
10044eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10044ebc:	687b      	ldr	r3, [r7, #4]
10044ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044ec0:	2210      	movs	r2, #16
10044ec2:	4013      	ands	r3, r2
10044ec4:	d00b      	beq.n	10044ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10044ec6:	687b      	ldr	r3, [r7, #4]
10044ec8:	681b      	ldr	r3, [r3, #0]
10044eca:	689b      	ldr	r3, [r3, #8]
10044ecc:	4a2c      	ldr	r2, [pc, #176]	@ (10044f80 <UART_AdvFeatureConfig+0x154>)
10044ece:	4013      	ands	r3, r2
10044ed0:	0019      	movs	r1, r3
10044ed2:	687b      	ldr	r3, [r7, #4]
10044ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10044ed6:	687b      	ldr	r3, [r7, #4]
10044ed8:	681b      	ldr	r3, [r3, #0]
10044eda:	430a      	orrs	r2, r1
10044edc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10044ede:	687b      	ldr	r3, [r7, #4]
10044ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044ee2:	2220      	movs	r2, #32
10044ee4:	4013      	ands	r3, r2
10044ee6:	d00b      	beq.n	10044f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10044ee8:	687b      	ldr	r3, [r7, #4]
10044eea:	681b      	ldr	r3, [r3, #0]
10044eec:	689b      	ldr	r3, [r3, #8]
10044eee:	4a25      	ldr	r2, [pc, #148]	@ (10044f84 <UART_AdvFeatureConfig+0x158>)
10044ef0:	4013      	ands	r3, r2
10044ef2:	0019      	movs	r1, r3
10044ef4:	687b      	ldr	r3, [r7, #4]
10044ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10044ef8:	687b      	ldr	r3, [r7, #4]
10044efa:	681b      	ldr	r3, [r3, #0]
10044efc:	430a      	orrs	r2, r1
10044efe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10044f00:	687b      	ldr	r3, [r7, #4]
10044f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044f04:	2240      	movs	r2, #64	@ 0x40
10044f06:	4013      	ands	r3, r2
10044f08:	d01d      	beq.n	10044f46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10044f0a:	687b      	ldr	r3, [r7, #4]
10044f0c:	681b      	ldr	r3, [r3, #0]
10044f0e:	685b      	ldr	r3, [r3, #4]
10044f10:	4a1d      	ldr	r2, [pc, #116]	@ (10044f88 <UART_AdvFeatureConfig+0x15c>)
10044f12:	4013      	ands	r3, r2
10044f14:	0019      	movs	r1, r3
10044f16:	687b      	ldr	r3, [r7, #4]
10044f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10044f1a:	687b      	ldr	r3, [r7, #4]
10044f1c:	681b      	ldr	r3, [r3, #0]
10044f1e:	430a      	orrs	r2, r1
10044f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10044f22:	687b      	ldr	r3, [r7, #4]
10044f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10044f26:	2380      	movs	r3, #128	@ 0x80
10044f28:	035b      	lsls	r3, r3, #13
10044f2a:	429a      	cmp	r2, r3
10044f2c:	d10b      	bne.n	10044f46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10044f2e:	687b      	ldr	r3, [r7, #4]
10044f30:	681b      	ldr	r3, [r3, #0]
10044f32:	685b      	ldr	r3, [r3, #4]
10044f34:	4a15      	ldr	r2, [pc, #84]	@ (10044f8c <UART_AdvFeatureConfig+0x160>)
10044f36:	4013      	ands	r3, r2
10044f38:	0019      	movs	r1, r3
10044f3a:	687b      	ldr	r3, [r7, #4]
10044f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10044f3e:	687b      	ldr	r3, [r7, #4]
10044f40:	681b      	ldr	r3, [r3, #0]
10044f42:	430a      	orrs	r2, r1
10044f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10044f46:	687b      	ldr	r3, [r7, #4]
10044f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044f4a:	2280      	movs	r2, #128	@ 0x80
10044f4c:	4013      	ands	r3, r2
10044f4e:	d00b      	beq.n	10044f68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10044f50:	687b      	ldr	r3, [r7, #4]
10044f52:	681b      	ldr	r3, [r3, #0]
10044f54:	685b      	ldr	r3, [r3, #4]
10044f56:	4a0e      	ldr	r2, [pc, #56]	@ (10044f90 <UART_AdvFeatureConfig+0x164>)
10044f58:	4013      	ands	r3, r2
10044f5a:	0019      	movs	r1, r3
10044f5c:	687b      	ldr	r3, [r7, #4]
10044f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10044f60:	687b      	ldr	r3, [r7, #4]
10044f62:	681b      	ldr	r3, [r3, #0]
10044f64:	430a      	orrs	r2, r1
10044f66:	605a      	str	r2, [r3, #4]
  }
}
10044f68:	46c0      	nop			@ (mov r8, r8)
10044f6a:	46bd      	mov	sp, r7
10044f6c:	b002      	add	sp, #8
10044f6e:	bd80      	pop	{r7, pc}
10044f70:	ffff7fff 	.word	0xffff7fff
10044f74:	fffdffff 	.word	0xfffdffff
10044f78:	fffeffff 	.word	0xfffeffff
10044f7c:	fffbffff 	.word	0xfffbffff
10044f80:	ffffefff 	.word	0xffffefff
10044f84:	ffffdfff 	.word	0xffffdfff
10044f88:	ffefffff 	.word	0xffefffff
10044f8c:	ff9fffff 	.word	0xff9fffff
10044f90:	fff7ffff 	.word	0xfff7ffff

10044f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10044f94:	b580      	push	{r7, lr}
10044f96:	b092      	sub	sp, #72	@ 0x48
10044f98:	af02      	add	r7, sp, #8
10044f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10044f9c:	687b      	ldr	r3, [r7, #4]
10044f9e:	2290      	movs	r2, #144	@ 0x90
10044fa0:	2100      	movs	r1, #0
10044fa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10044fa4:	f7fc fa58 	bl	10041458 <HAL_GetTick>
10044fa8:	0003      	movs	r3, r0
10044faa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10044fac:	687b      	ldr	r3, [r7, #4]
10044fae:	681b      	ldr	r3, [r3, #0]
10044fb0:	681b      	ldr	r3, [r3, #0]
10044fb2:	2208      	movs	r2, #8
10044fb4:	4013      	ands	r3, r2
10044fb6:	2b08      	cmp	r3, #8
10044fb8:	d12d      	bne.n	10045016 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10044fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044fbc:	2280      	movs	r2, #128	@ 0x80
10044fbe:	0391      	lsls	r1, r2, #14
10044fc0:	6878      	ldr	r0, [r7, #4]
10044fc2:	4a47      	ldr	r2, [pc, #284]	@ (100450e0 <UART_CheckIdleState+0x14c>)
10044fc4:	9200      	str	r2, [sp, #0]
10044fc6:	2200      	movs	r2, #0
10044fc8:	f000 f88e 	bl	100450e8 <UART_WaitOnFlagUntilTimeout>
10044fcc:	1e03      	subs	r3, r0, #0
10044fce:	d022      	beq.n	10045016 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10044fd0:	f3ef 8310 	mrs	r3, PRIMASK
10044fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10044fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10044fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
10044fda:	2301      	movs	r3, #1
10044fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10044fe0:	f383 8810 	msr	PRIMASK, r3
}
10044fe4:	46c0      	nop			@ (mov r8, r8)
10044fe6:	687b      	ldr	r3, [r7, #4]
10044fe8:	681b      	ldr	r3, [r3, #0]
10044fea:	681a      	ldr	r2, [r3, #0]
10044fec:	687b      	ldr	r3, [r7, #4]
10044fee:	681b      	ldr	r3, [r3, #0]
10044ff0:	2180      	movs	r1, #128	@ 0x80
10044ff2:	438a      	bics	r2, r1
10044ff4:	601a      	str	r2, [r3, #0]
10044ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044ffc:	f383 8810 	msr	PRIMASK, r3
}
10045000:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10045002:	687b      	ldr	r3, [r7, #4]
10045004:	2288      	movs	r2, #136	@ 0x88
10045006:	2120      	movs	r1, #32
10045008:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004500a:	687b      	ldr	r3, [r7, #4]
1004500c:	2284      	movs	r2, #132	@ 0x84
1004500e:	2100      	movs	r1, #0
10045010:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10045012:	2303      	movs	r3, #3
10045014:	e060      	b.n	100450d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10045016:	687b      	ldr	r3, [r7, #4]
10045018:	681b      	ldr	r3, [r3, #0]
1004501a:	681b      	ldr	r3, [r3, #0]
1004501c:	2204      	movs	r2, #4
1004501e:	4013      	ands	r3, r2
10045020:	2b04      	cmp	r3, #4
10045022:	d146      	bne.n	100450b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10045024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10045026:	2280      	movs	r2, #128	@ 0x80
10045028:	03d1      	lsls	r1, r2, #15
1004502a:	6878      	ldr	r0, [r7, #4]
1004502c:	4a2c      	ldr	r2, [pc, #176]	@ (100450e0 <UART_CheckIdleState+0x14c>)
1004502e:	9200      	str	r2, [sp, #0]
10045030:	2200      	movs	r2, #0
10045032:	f000 f859 	bl	100450e8 <UART_WaitOnFlagUntilTimeout>
10045036:	1e03      	subs	r3, r0, #0
10045038:	d03b      	beq.n	100450b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004503a:	f3ef 8310 	mrs	r3, PRIMASK
1004503e:	60fb      	str	r3, [r7, #12]
  return(result);
10045040:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10045042:	637b      	str	r3, [r7, #52]	@ 0x34
10045044:	2301      	movs	r3, #1
10045046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045048:	693b      	ldr	r3, [r7, #16]
1004504a:	f383 8810 	msr	PRIMASK, r3
}
1004504e:	46c0      	nop			@ (mov r8, r8)
10045050:	687b      	ldr	r3, [r7, #4]
10045052:	681b      	ldr	r3, [r3, #0]
10045054:	681a      	ldr	r2, [r3, #0]
10045056:	687b      	ldr	r3, [r7, #4]
10045058:	681b      	ldr	r3, [r3, #0]
1004505a:	4922      	ldr	r1, [pc, #136]	@ (100450e4 <UART_CheckIdleState+0x150>)
1004505c:	400a      	ands	r2, r1
1004505e:	601a      	str	r2, [r3, #0]
10045060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045064:	697b      	ldr	r3, [r7, #20]
10045066:	f383 8810 	msr	PRIMASK, r3
}
1004506a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004506c:	f3ef 8310 	mrs	r3, PRIMASK
10045070:	61bb      	str	r3, [r7, #24]
  return(result);
10045072:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10045074:	633b      	str	r3, [r7, #48]	@ 0x30
10045076:	2301      	movs	r3, #1
10045078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004507a:	69fb      	ldr	r3, [r7, #28]
1004507c:	f383 8810 	msr	PRIMASK, r3
}
10045080:	46c0      	nop			@ (mov r8, r8)
10045082:	687b      	ldr	r3, [r7, #4]
10045084:	681b      	ldr	r3, [r3, #0]
10045086:	689a      	ldr	r2, [r3, #8]
10045088:	687b      	ldr	r3, [r7, #4]
1004508a:	681b      	ldr	r3, [r3, #0]
1004508c:	2101      	movs	r1, #1
1004508e:	438a      	bics	r2, r1
10045090:	609a      	str	r2, [r3, #8]
10045092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045094:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045096:	6a3b      	ldr	r3, [r7, #32]
10045098:	f383 8810 	msr	PRIMASK, r3
}
1004509c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004509e:	687b      	ldr	r3, [r7, #4]
100450a0:	228c      	movs	r2, #140	@ 0x8c
100450a2:	2120      	movs	r1, #32
100450a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
100450a6:	687b      	ldr	r3, [r7, #4]
100450a8:	2284      	movs	r2, #132	@ 0x84
100450aa:	2100      	movs	r1, #0
100450ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
100450ae:	2303      	movs	r3, #3
100450b0:	e012      	b.n	100450d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
100450b2:	687b      	ldr	r3, [r7, #4]
100450b4:	2288      	movs	r2, #136	@ 0x88
100450b6:	2120      	movs	r1, #32
100450b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
100450ba:	687b      	ldr	r3, [r7, #4]
100450bc:	228c      	movs	r2, #140	@ 0x8c
100450be:	2120      	movs	r1, #32
100450c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100450c2:	687b      	ldr	r3, [r7, #4]
100450c4:	2200      	movs	r2, #0
100450c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
100450c8:	687b      	ldr	r3, [r7, #4]
100450ca:	2200      	movs	r2, #0
100450cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
100450ce:	687b      	ldr	r3, [r7, #4]
100450d0:	2284      	movs	r2, #132	@ 0x84
100450d2:	2100      	movs	r1, #0
100450d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100450d6:	2300      	movs	r3, #0
}
100450d8:	0018      	movs	r0, r3
100450da:	46bd      	mov	sp, r7
100450dc:	b010      	add	sp, #64	@ 0x40
100450de:	bd80      	pop	{r7, pc}
100450e0:	01ffffff 	.word	0x01ffffff
100450e4:	fffffedf 	.word	0xfffffedf

100450e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
100450e8:	b580      	push	{r7, lr}
100450ea:	b084      	sub	sp, #16
100450ec:	af00      	add	r7, sp, #0
100450ee:	60f8      	str	r0, [r7, #12]
100450f0:	60b9      	str	r1, [r7, #8]
100450f2:	603b      	str	r3, [r7, #0]
100450f4:	1dfb      	adds	r3, r7, #7
100450f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100450f8:	e051      	b.n	1004519e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100450fa:	69bb      	ldr	r3, [r7, #24]
100450fc:	3301      	adds	r3, #1
100450fe:	d04e      	beq.n	1004519e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10045100:	f7fc f9aa 	bl	10041458 <HAL_GetTick>
10045104:	0002      	movs	r2, r0
10045106:	683b      	ldr	r3, [r7, #0]
10045108:	1ad3      	subs	r3, r2, r3
1004510a:	69ba      	ldr	r2, [r7, #24]
1004510c:	429a      	cmp	r2, r3
1004510e:	d302      	bcc.n	10045116 <UART_WaitOnFlagUntilTimeout+0x2e>
10045110:	69bb      	ldr	r3, [r7, #24]
10045112:	2b00      	cmp	r3, #0
10045114:	d101      	bne.n	1004511a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10045116:	2303      	movs	r3, #3
10045118:	e051      	b.n	100451be <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004511a:	68fb      	ldr	r3, [r7, #12]
1004511c:	681b      	ldr	r3, [r3, #0]
1004511e:	681b      	ldr	r3, [r3, #0]
10045120:	2204      	movs	r2, #4
10045122:	4013      	ands	r3, r2
10045124:	d03b      	beq.n	1004519e <UART_WaitOnFlagUntilTimeout+0xb6>
10045126:	68bb      	ldr	r3, [r7, #8]
10045128:	2b80      	cmp	r3, #128	@ 0x80
1004512a:	d038      	beq.n	1004519e <UART_WaitOnFlagUntilTimeout+0xb6>
1004512c:	68bb      	ldr	r3, [r7, #8]
1004512e:	2b40      	cmp	r3, #64	@ 0x40
10045130:	d035      	beq.n	1004519e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10045132:	68fb      	ldr	r3, [r7, #12]
10045134:	681b      	ldr	r3, [r3, #0]
10045136:	69db      	ldr	r3, [r3, #28]
10045138:	2208      	movs	r2, #8
1004513a:	4013      	ands	r3, r2
1004513c:	2b08      	cmp	r3, #8
1004513e:	d111      	bne.n	10045164 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10045140:	68fb      	ldr	r3, [r7, #12]
10045142:	681b      	ldr	r3, [r3, #0]
10045144:	2208      	movs	r2, #8
10045146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10045148:	68fb      	ldr	r3, [r7, #12]
1004514a:	0018      	movs	r0, r3
1004514c:	f000 f83c 	bl	100451c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10045150:	68fb      	ldr	r3, [r7, #12]
10045152:	2290      	movs	r2, #144	@ 0x90
10045154:	2108      	movs	r1, #8
10045156:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10045158:	68fb      	ldr	r3, [r7, #12]
1004515a:	2284      	movs	r2, #132	@ 0x84
1004515c:	2100      	movs	r1, #0
1004515e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10045160:	2301      	movs	r3, #1
10045162:	e02c      	b.n	100451be <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10045164:	68fb      	ldr	r3, [r7, #12]
10045166:	681b      	ldr	r3, [r3, #0]
10045168:	69da      	ldr	r2, [r3, #28]
1004516a:	2380      	movs	r3, #128	@ 0x80
1004516c:	011b      	lsls	r3, r3, #4
1004516e:	401a      	ands	r2, r3
10045170:	2380      	movs	r3, #128	@ 0x80
10045172:	011b      	lsls	r3, r3, #4
10045174:	429a      	cmp	r2, r3
10045176:	d112      	bne.n	1004519e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10045178:	68fb      	ldr	r3, [r7, #12]
1004517a:	681b      	ldr	r3, [r3, #0]
1004517c:	2280      	movs	r2, #128	@ 0x80
1004517e:	0112      	lsls	r2, r2, #4
10045180:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10045182:	68fb      	ldr	r3, [r7, #12]
10045184:	0018      	movs	r0, r3
10045186:	f000 f81f 	bl	100451c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004518a:	68fb      	ldr	r3, [r7, #12]
1004518c:	2290      	movs	r2, #144	@ 0x90
1004518e:	2120      	movs	r1, #32
10045190:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10045192:	68fb      	ldr	r3, [r7, #12]
10045194:	2284      	movs	r2, #132	@ 0x84
10045196:	2100      	movs	r1, #0
10045198:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004519a:	2303      	movs	r3, #3
1004519c:	e00f      	b.n	100451be <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004519e:	68fb      	ldr	r3, [r7, #12]
100451a0:	681b      	ldr	r3, [r3, #0]
100451a2:	69db      	ldr	r3, [r3, #28]
100451a4:	68ba      	ldr	r2, [r7, #8]
100451a6:	4013      	ands	r3, r2
100451a8:	68ba      	ldr	r2, [r7, #8]
100451aa:	1ad3      	subs	r3, r2, r3
100451ac:	425a      	negs	r2, r3
100451ae:	4153      	adcs	r3, r2
100451b0:	b2db      	uxtb	r3, r3
100451b2:	001a      	movs	r2, r3
100451b4:	1dfb      	adds	r3, r7, #7
100451b6:	781b      	ldrb	r3, [r3, #0]
100451b8:	429a      	cmp	r2, r3
100451ba:	d09e      	beq.n	100450fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
100451bc:	2300      	movs	r3, #0
}
100451be:	0018      	movs	r0, r3
100451c0:	46bd      	mov	sp, r7
100451c2:	b004      	add	sp, #16
100451c4:	bd80      	pop	{r7, pc}
	...

100451c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
100451c8:	b580      	push	{r7, lr}
100451ca:	b08e      	sub	sp, #56	@ 0x38
100451cc:	af00      	add	r7, sp, #0
100451ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100451d0:	f3ef 8310 	mrs	r3, PRIMASK
100451d4:	617b      	str	r3, [r7, #20]
  return(result);
100451d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100451d8:	637b      	str	r3, [r7, #52]	@ 0x34
100451da:	2301      	movs	r3, #1
100451dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100451de:	69bb      	ldr	r3, [r7, #24]
100451e0:	f383 8810 	msr	PRIMASK, r3
}
100451e4:	46c0      	nop			@ (mov r8, r8)
100451e6:	687b      	ldr	r3, [r7, #4]
100451e8:	681b      	ldr	r3, [r3, #0]
100451ea:	681a      	ldr	r2, [r3, #0]
100451ec:	687b      	ldr	r3, [r7, #4]
100451ee:	681b      	ldr	r3, [r3, #0]
100451f0:	4926      	ldr	r1, [pc, #152]	@ (1004528c <UART_EndRxTransfer+0xc4>)
100451f2:	400a      	ands	r2, r1
100451f4:	601a      	str	r2, [r3, #0]
100451f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100451f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100451fa:	69fb      	ldr	r3, [r7, #28]
100451fc:	f383 8810 	msr	PRIMASK, r3
}
10045200:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10045202:	f3ef 8310 	mrs	r3, PRIMASK
10045206:	623b      	str	r3, [r7, #32]
  return(result);
10045208:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004520a:	633b      	str	r3, [r7, #48]	@ 0x30
1004520c:	2301      	movs	r3, #1
1004520e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045212:	f383 8810 	msr	PRIMASK, r3
}
10045216:	46c0      	nop			@ (mov r8, r8)
10045218:	687b      	ldr	r3, [r7, #4]
1004521a:	681b      	ldr	r3, [r3, #0]
1004521c:	689a      	ldr	r2, [r3, #8]
1004521e:	687b      	ldr	r3, [r7, #4]
10045220:	681b      	ldr	r3, [r3, #0]
10045222:	491b      	ldr	r1, [pc, #108]	@ (10045290 <UART_EndRxTransfer+0xc8>)
10045224:	400a      	ands	r2, r1
10045226:	609a      	str	r2, [r3, #8]
10045228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004522a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004522e:	f383 8810 	msr	PRIMASK, r3
}
10045232:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10045234:	687b      	ldr	r3, [r7, #4]
10045236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10045238:	2b01      	cmp	r3, #1
1004523a:	d118      	bne.n	1004526e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004523c:	f3ef 8310 	mrs	r3, PRIMASK
10045240:	60bb      	str	r3, [r7, #8]
  return(result);
10045242:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10045244:	62fb      	str	r3, [r7, #44]	@ 0x2c
10045246:	2301      	movs	r3, #1
10045248:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004524a:	68fb      	ldr	r3, [r7, #12]
1004524c:	f383 8810 	msr	PRIMASK, r3
}
10045250:	46c0      	nop			@ (mov r8, r8)
10045252:	687b      	ldr	r3, [r7, #4]
10045254:	681b      	ldr	r3, [r3, #0]
10045256:	681a      	ldr	r2, [r3, #0]
10045258:	687b      	ldr	r3, [r7, #4]
1004525a:	681b      	ldr	r3, [r3, #0]
1004525c:	2110      	movs	r1, #16
1004525e:	438a      	bics	r2, r1
10045260:	601a      	str	r2, [r3, #0]
10045262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045266:	693b      	ldr	r3, [r7, #16]
10045268:	f383 8810 	msr	PRIMASK, r3
}
1004526c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004526e:	687b      	ldr	r3, [r7, #4]
10045270:	228c      	movs	r2, #140	@ 0x8c
10045272:	2120      	movs	r1, #32
10045274:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10045276:	687b      	ldr	r3, [r7, #4]
10045278:	2200      	movs	r2, #0
1004527a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004527c:	687b      	ldr	r3, [r7, #4]
1004527e:	2200      	movs	r2, #0
10045280:	675a      	str	r2, [r3, #116]	@ 0x74
}
10045282:	46c0      	nop			@ (mov r8, r8)
10045284:	46bd      	mov	sp, r7
10045286:	b00e      	add	sp, #56	@ 0x38
10045288:	bd80      	pop	{r7, pc}
1004528a:	46c0      	nop			@ (mov r8, r8)
1004528c:	fffffedf 	.word	0xfffffedf
10045290:	effffffe 	.word	0xeffffffe

10045294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
10045294:	b580      	push	{r7, lr}
10045296:	b084      	sub	sp, #16
10045298:	af00      	add	r7, sp, #0
1004529a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
1004529c:	687b      	ldr	r3, [r7, #4]
1004529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100452a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
100452a2:	68fb      	ldr	r3, [r7, #12]
100452a4:	225e      	movs	r2, #94	@ 0x5e
100452a6:	2100      	movs	r1, #0
100452a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
100452aa:	68fb      	ldr	r3, [r7, #12]
100452ac:	0018      	movs	r0, r3
100452ae:	f7ff fc41 	bl	10044b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
100452b2:	46c0      	nop			@ (mov r8, r8)
100452b4:	46bd      	mov	sp, r7
100452b6:	b004      	add	sp, #16
100452b8:	bd80      	pop	{r7, pc}

100452ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
100452ba:	b580      	push	{r7, lr}
100452bc:	b086      	sub	sp, #24
100452be:	af00      	add	r7, sp, #0
100452c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100452c2:	f3ef 8310 	mrs	r3, PRIMASK
100452c6:	60bb      	str	r3, [r7, #8]
  return(result);
100452c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
100452ca:	617b      	str	r3, [r7, #20]
100452cc:	2301      	movs	r3, #1
100452ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100452d0:	68fb      	ldr	r3, [r7, #12]
100452d2:	f383 8810 	msr	PRIMASK, r3
}
100452d6:	46c0      	nop			@ (mov r8, r8)
100452d8:	687b      	ldr	r3, [r7, #4]
100452da:	681b      	ldr	r3, [r3, #0]
100452dc:	681a      	ldr	r2, [r3, #0]
100452de:	687b      	ldr	r3, [r7, #4]
100452e0:	681b      	ldr	r3, [r3, #0]
100452e2:	2140      	movs	r1, #64	@ 0x40
100452e4:	438a      	bics	r2, r1
100452e6:	601a      	str	r2, [r3, #0]
100452e8:	697b      	ldr	r3, [r7, #20]
100452ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100452ec:	693b      	ldr	r3, [r7, #16]
100452ee:	f383 8810 	msr	PRIMASK, r3
}
100452f2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
100452f4:	687b      	ldr	r3, [r7, #4]
100452f6:	2288      	movs	r2, #136	@ 0x88
100452f8:	2120      	movs	r1, #32
100452fa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
100452fc:	687b      	ldr	r3, [r7, #4]
100452fe:	2200      	movs	r2, #0
10045300:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
10045302:	687b      	ldr	r3, [r7, #4]
10045304:	0018      	movs	r0, r3
10045306:	f7ff fc0d 	bl	10044b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1004530a:	46c0      	nop			@ (mov r8, r8)
1004530c:	46bd      	mov	sp, r7
1004530e:	b006      	add	sp, #24
10045310:	bd80      	pop	{r7, pc}

10045312 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
10045312:	b580      	push	{r7, lr}
10045314:	b082      	sub	sp, #8
10045316:	af00      	add	r7, sp, #0
10045318:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004531a:	46c0      	nop			@ (mov r8, r8)
1004531c:	46bd      	mov	sp, r7
1004531e:	b002      	add	sp, #8
10045320:	bd80      	pop	{r7, pc}

10045322 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
10045322:	b580      	push	{r7, lr}
10045324:	b082      	sub	sp, #8
10045326:	af00      	add	r7, sp, #0
10045328:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004532a:	46c0      	nop			@ (mov r8, r8)
1004532c:	46bd      	mov	sp, r7
1004532e:	b002      	add	sp, #8
10045330:	bd80      	pop	{r7, pc}

10045332 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
10045332:	b580      	push	{r7, lr}
10045334:	b082      	sub	sp, #8
10045336:	af00      	add	r7, sp, #0
10045338:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004533a:	46c0      	nop			@ (mov r8, r8)
1004533c:	46bd      	mov	sp, r7
1004533e:	b002      	add	sp, #8
10045340:	bd80      	pop	{r7, pc}

10045342 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10045342:	b580      	push	{r7, lr}
10045344:	b084      	sub	sp, #16
10045346:	af00      	add	r7, sp, #0
10045348:	6078      	str	r0, [r7, #4]
1004534a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004534c:	687b      	ldr	r3, [r7, #4]
1004534e:	2284      	movs	r2, #132	@ 0x84
10045350:	5c9b      	ldrb	r3, [r3, r2]
10045352:	2b01      	cmp	r3, #1
10045354:	d101      	bne.n	1004535a <HAL_UARTEx_SetTxFifoThreshold+0x18>
10045356:	2302      	movs	r3, #2
10045358:	e02e      	b.n	100453b8 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004535a:	687b      	ldr	r3, [r7, #4]
1004535c:	2284      	movs	r2, #132	@ 0x84
1004535e:	2101      	movs	r1, #1
10045360:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10045362:	687b      	ldr	r3, [r7, #4]
10045364:	2288      	movs	r2, #136	@ 0x88
10045366:	2124      	movs	r1, #36	@ 0x24
10045368:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004536a:	687b      	ldr	r3, [r7, #4]
1004536c:	681b      	ldr	r3, [r3, #0]
1004536e:	681b      	ldr	r3, [r3, #0]
10045370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10045372:	687b      	ldr	r3, [r7, #4]
10045374:	681b      	ldr	r3, [r3, #0]
10045376:	681a      	ldr	r2, [r3, #0]
10045378:	687b      	ldr	r3, [r7, #4]
1004537a:	681b      	ldr	r3, [r3, #0]
1004537c:	2101      	movs	r1, #1
1004537e:	438a      	bics	r2, r1
10045380:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10045382:	687b      	ldr	r3, [r7, #4]
10045384:	681b      	ldr	r3, [r3, #0]
10045386:	689b      	ldr	r3, [r3, #8]
10045388:	00db      	lsls	r3, r3, #3
1004538a:	08d9      	lsrs	r1, r3, #3
1004538c:	687b      	ldr	r3, [r7, #4]
1004538e:	681b      	ldr	r3, [r3, #0]
10045390:	683a      	ldr	r2, [r7, #0]
10045392:	430a      	orrs	r2, r1
10045394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10045396:	687b      	ldr	r3, [r7, #4]
10045398:	0018      	movs	r0, r3
1004539a:	f000 f853 	bl	10045444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004539e:	687b      	ldr	r3, [r7, #4]
100453a0:	681b      	ldr	r3, [r3, #0]
100453a2:	68fa      	ldr	r2, [r7, #12]
100453a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100453a6:	687b      	ldr	r3, [r7, #4]
100453a8:	2288      	movs	r2, #136	@ 0x88
100453aa:	2120      	movs	r1, #32
100453ac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100453ae:	687b      	ldr	r3, [r7, #4]
100453b0:	2284      	movs	r2, #132	@ 0x84
100453b2:	2100      	movs	r1, #0
100453b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100453b6:	2300      	movs	r3, #0
}
100453b8:	0018      	movs	r0, r3
100453ba:	46bd      	mov	sp, r7
100453bc:	b004      	add	sp, #16
100453be:	bd80      	pop	{r7, pc}

100453c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100453c0:	b580      	push	{r7, lr}
100453c2:	b084      	sub	sp, #16
100453c4:	af00      	add	r7, sp, #0
100453c6:	6078      	str	r0, [r7, #4]
100453c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100453ca:	687b      	ldr	r3, [r7, #4]
100453cc:	2284      	movs	r2, #132	@ 0x84
100453ce:	5c9b      	ldrb	r3, [r3, r2]
100453d0:	2b01      	cmp	r3, #1
100453d2:	d101      	bne.n	100453d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
100453d4:	2302      	movs	r3, #2
100453d6:	e02f      	b.n	10045438 <HAL_UARTEx_SetRxFifoThreshold+0x78>
100453d8:	687b      	ldr	r3, [r7, #4]
100453da:	2284      	movs	r2, #132	@ 0x84
100453dc:	2101      	movs	r1, #1
100453de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100453e0:	687b      	ldr	r3, [r7, #4]
100453e2:	2288      	movs	r2, #136	@ 0x88
100453e4:	2124      	movs	r1, #36	@ 0x24
100453e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100453e8:	687b      	ldr	r3, [r7, #4]
100453ea:	681b      	ldr	r3, [r3, #0]
100453ec:	681b      	ldr	r3, [r3, #0]
100453ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
100453f0:	687b      	ldr	r3, [r7, #4]
100453f2:	681b      	ldr	r3, [r3, #0]
100453f4:	681a      	ldr	r2, [r3, #0]
100453f6:	687b      	ldr	r3, [r7, #4]
100453f8:	681b      	ldr	r3, [r3, #0]
100453fa:	2101      	movs	r1, #1
100453fc:	438a      	bics	r2, r1
100453fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10045400:	687b      	ldr	r3, [r7, #4]
10045402:	681b      	ldr	r3, [r3, #0]
10045404:	689b      	ldr	r3, [r3, #8]
10045406:	4a0e      	ldr	r2, [pc, #56]	@ (10045440 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10045408:	4013      	ands	r3, r2
1004540a:	0019      	movs	r1, r3
1004540c:	687b      	ldr	r3, [r7, #4]
1004540e:	681b      	ldr	r3, [r3, #0]
10045410:	683a      	ldr	r2, [r7, #0]
10045412:	430a      	orrs	r2, r1
10045414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10045416:	687b      	ldr	r3, [r7, #4]
10045418:	0018      	movs	r0, r3
1004541a:	f000 f813 	bl	10045444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004541e:	687b      	ldr	r3, [r7, #4]
10045420:	681b      	ldr	r3, [r3, #0]
10045422:	68fa      	ldr	r2, [r7, #12]
10045424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10045426:	687b      	ldr	r3, [r7, #4]
10045428:	2288      	movs	r2, #136	@ 0x88
1004542a:	2120      	movs	r1, #32
1004542c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004542e:	687b      	ldr	r3, [r7, #4]
10045430:	2284      	movs	r2, #132	@ 0x84
10045432:	2100      	movs	r1, #0
10045434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045436:	2300      	movs	r3, #0
}
10045438:	0018      	movs	r0, r3
1004543a:	46bd      	mov	sp, r7
1004543c:	b004      	add	sp, #16
1004543e:	bd80      	pop	{r7, pc}
10045440:	f1ffffff 	.word	0xf1ffffff

10045444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10045444:	b5f0      	push	{r4, r5, r6, r7, lr}
10045446:	b085      	sub	sp, #20
10045448:	af00      	add	r7, sp, #0
1004544a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004544c:	687b      	ldr	r3, [r7, #4]
1004544e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10045450:	2b00      	cmp	r3, #0
10045452:	d108      	bne.n	10045466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
10045454:	687b      	ldr	r3, [r7, #4]
10045456:	226a      	movs	r2, #106	@ 0x6a
10045458:	2101      	movs	r1, #1
1004545a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004545c:	687b      	ldr	r3, [r7, #4]
1004545e:	2268      	movs	r2, #104	@ 0x68
10045460:	2101      	movs	r1, #1
10045462:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10045464:	e043      	b.n	100454ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
10045466:	260f      	movs	r6, #15
10045468:	19bb      	adds	r3, r7, r6
1004546a:	2208      	movs	r2, #8
1004546c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004546e:	200e      	movs	r0, #14
10045470:	183b      	adds	r3, r7, r0
10045472:	2208      	movs	r2, #8
10045474:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10045476:	687b      	ldr	r3, [r7, #4]
10045478:	681b      	ldr	r3, [r3, #0]
1004547a:	689b      	ldr	r3, [r3, #8]
1004547c:	0e5b      	lsrs	r3, r3, #25
1004547e:	b2da      	uxtb	r2, r3
10045480:	240d      	movs	r4, #13
10045482:	193b      	adds	r3, r7, r4
10045484:	2107      	movs	r1, #7
10045486:	400a      	ands	r2, r1
10045488:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004548a:	687b      	ldr	r3, [r7, #4]
1004548c:	681b      	ldr	r3, [r3, #0]
1004548e:	689b      	ldr	r3, [r3, #8]
10045490:	0f5b      	lsrs	r3, r3, #29
10045492:	b2da      	uxtb	r2, r3
10045494:	250c      	movs	r5, #12
10045496:	197b      	adds	r3, r7, r5
10045498:	2107      	movs	r1, #7
1004549a:	400a      	ands	r2, r1
1004549c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004549e:	183b      	adds	r3, r7, r0
100454a0:	781b      	ldrb	r3, [r3, #0]
100454a2:	197a      	adds	r2, r7, r5
100454a4:	7812      	ldrb	r2, [r2, #0]
100454a6:	4914      	ldr	r1, [pc, #80]	@ (100454f8 <UARTEx_SetNbDataToProcess+0xb4>)
100454a8:	5c8a      	ldrb	r2, [r1, r2]
100454aa:	435a      	muls	r2, r3
100454ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
100454ae:	197b      	adds	r3, r7, r5
100454b0:	781b      	ldrb	r3, [r3, #0]
100454b2:	4a12      	ldr	r2, [pc, #72]	@ (100454fc <UARTEx_SetNbDataToProcess+0xb8>)
100454b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100454b6:	0019      	movs	r1, r3
100454b8:	f7fa feae 	bl	10040218 <__divsi3>
100454bc:	0003      	movs	r3, r0
100454be:	b299      	uxth	r1, r3
100454c0:	687b      	ldr	r3, [r7, #4]
100454c2:	226a      	movs	r2, #106	@ 0x6a
100454c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100454c6:	19bb      	adds	r3, r7, r6
100454c8:	781b      	ldrb	r3, [r3, #0]
100454ca:	193a      	adds	r2, r7, r4
100454cc:	7812      	ldrb	r2, [r2, #0]
100454ce:	490a      	ldr	r1, [pc, #40]	@ (100454f8 <UARTEx_SetNbDataToProcess+0xb4>)
100454d0:	5c8a      	ldrb	r2, [r1, r2]
100454d2:	435a      	muls	r2, r3
100454d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
100454d6:	193b      	adds	r3, r7, r4
100454d8:	781b      	ldrb	r3, [r3, #0]
100454da:	4a08      	ldr	r2, [pc, #32]	@ (100454fc <UARTEx_SetNbDataToProcess+0xb8>)
100454dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100454de:	0019      	movs	r1, r3
100454e0:	f7fa fe9a 	bl	10040218 <__divsi3>
100454e4:	0003      	movs	r3, r0
100454e6:	b299      	uxth	r1, r3
100454e8:	687b      	ldr	r3, [r7, #4]
100454ea:	2268      	movs	r2, #104	@ 0x68
100454ec:	5299      	strh	r1, [r3, r2]
}
100454ee:	46c0      	nop			@ (mov r8, r8)
100454f0:	46bd      	mov	sp, r7
100454f2:	b005      	add	sp, #20
100454f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100454f6:	46c0      	nop			@ (mov r8, r8)
100454f8:	100455b4 	.word	0x100455b4
100454fc:	100455bc 	.word	0x100455bc

10045500 <memset>:
10045500:	0003      	movs	r3, r0
10045502:	1882      	adds	r2, r0, r2
10045504:	4293      	cmp	r3, r2
10045506:	d100      	bne.n	1004550a <memset+0xa>
10045508:	4770      	bx	lr
1004550a:	7019      	strb	r1, [r3, #0]
1004550c:	3301      	adds	r3, #1
1004550e:	e7f9      	b.n	10045504 <memset+0x4>

Disassembly of section .init:

10045510 <_init>:
10045510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10045512:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10045514 <_fini>:
10045514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10045516:	46c0      	nop			@ (mov r8, r8)
