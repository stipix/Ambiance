
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004a464  1004a464  0000b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004a468  1004a468  0000b468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000002ac  1004a46c  1004a46c  0000b46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004a718  1004a718  0000b718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000bc  20000d38  1004a720  0000bd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0000c004  2**2
                  ALLOC
  8 .bss.blueRAM  000000d4  200000c0  200000c0  0000c004  2**2
                  ALLOC
  9 .bss          00000ba4  20000194  20000194  0000c004  2**2
                  ALLOC
 10 .noinit       00000000  20000df4  1004a7dc  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  1004a7dc  1004a7dc  0000bdf4  2**0
                  CONTENTS
 12 .heap         00000000  20000df4  20000df4  0000bdf4  2**0
                  CONTENTS
 13 .stack        00000c00  20005400  20005400  0000c400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  0000bdf4  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  0000bdf4  2**0
                  CONTENTS, READONLY
 16 .debug_info   0001cb00  00000000  00000000  0000be1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000475c  00000000  00000000  0002891c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001c30  00000000  00000000  0002d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000015ca  00000000  00000000  0002eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00006c45  00000000  00000000  00030272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00024175  00000000  00000000  00036eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000b8cb0  00000000  00000000  0005b02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  00113cdc  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00006bfc  00000000  00000000  00113d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000009f  00000000  00000000  0011a91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <strlen>:
10040104:	2300      	movs	r3, #0
10040106:	5cc2      	ldrb	r2, [r0, r3]
10040108:	3301      	adds	r3, #1
1004010a:	2a00      	cmp	r2, #0
1004010c:	d1fb      	bne.n	10040106 <strlen+0x2>
1004010e:	1e58      	subs	r0, r3, #1
10040110:	4770      	bx	lr
	...

10040114 <__gnu_thumb1_case_shi>:
10040114:	b403      	push	{r0, r1}
10040116:	4671      	mov	r1, lr
10040118:	0849      	lsrs	r1, r1, #1
1004011a:	0040      	lsls	r0, r0, #1
1004011c:	0049      	lsls	r1, r1, #1
1004011e:	5e09      	ldrsh	r1, [r1, r0]
10040120:	0049      	lsls	r1, r1, #1
10040122:	448e      	add	lr, r1
10040124:	bc03      	pop	{r0, r1}
10040126:	4770      	bx	lr

10040128 <__udivsi3>:
10040128:	2200      	movs	r2, #0
1004012a:	0843      	lsrs	r3, r0, #1
1004012c:	428b      	cmp	r3, r1
1004012e:	d374      	bcc.n	1004021a <__udivsi3+0xf2>
10040130:	0903      	lsrs	r3, r0, #4
10040132:	428b      	cmp	r3, r1
10040134:	d35f      	bcc.n	100401f6 <__udivsi3+0xce>
10040136:	0a03      	lsrs	r3, r0, #8
10040138:	428b      	cmp	r3, r1
1004013a:	d344      	bcc.n	100401c6 <__udivsi3+0x9e>
1004013c:	0b03      	lsrs	r3, r0, #12
1004013e:	428b      	cmp	r3, r1
10040140:	d328      	bcc.n	10040194 <__udivsi3+0x6c>
10040142:	0c03      	lsrs	r3, r0, #16
10040144:	428b      	cmp	r3, r1
10040146:	d30d      	bcc.n	10040164 <__udivsi3+0x3c>
10040148:	22ff      	movs	r2, #255	@ 0xff
1004014a:	0209      	lsls	r1, r1, #8
1004014c:	ba12      	rev	r2, r2
1004014e:	0c03      	lsrs	r3, r0, #16
10040150:	428b      	cmp	r3, r1
10040152:	d302      	bcc.n	1004015a <__udivsi3+0x32>
10040154:	1212      	asrs	r2, r2, #8
10040156:	0209      	lsls	r1, r1, #8
10040158:	d065      	beq.n	10040226 <__udivsi3+0xfe>
1004015a:	0b03      	lsrs	r3, r0, #12
1004015c:	428b      	cmp	r3, r1
1004015e:	d319      	bcc.n	10040194 <__udivsi3+0x6c>
10040160:	e000      	b.n	10040164 <__udivsi3+0x3c>
10040162:	0a09      	lsrs	r1, r1, #8
10040164:	0bc3      	lsrs	r3, r0, #15
10040166:	428b      	cmp	r3, r1
10040168:	d301      	bcc.n	1004016e <__udivsi3+0x46>
1004016a:	03cb      	lsls	r3, r1, #15
1004016c:	1ac0      	subs	r0, r0, r3
1004016e:	4152      	adcs	r2, r2
10040170:	0b83      	lsrs	r3, r0, #14
10040172:	428b      	cmp	r3, r1
10040174:	d301      	bcc.n	1004017a <__udivsi3+0x52>
10040176:	038b      	lsls	r3, r1, #14
10040178:	1ac0      	subs	r0, r0, r3
1004017a:	4152      	adcs	r2, r2
1004017c:	0b43      	lsrs	r3, r0, #13
1004017e:	428b      	cmp	r3, r1
10040180:	d301      	bcc.n	10040186 <__udivsi3+0x5e>
10040182:	034b      	lsls	r3, r1, #13
10040184:	1ac0      	subs	r0, r0, r3
10040186:	4152      	adcs	r2, r2
10040188:	0b03      	lsrs	r3, r0, #12
1004018a:	428b      	cmp	r3, r1
1004018c:	d301      	bcc.n	10040192 <__udivsi3+0x6a>
1004018e:	030b      	lsls	r3, r1, #12
10040190:	1ac0      	subs	r0, r0, r3
10040192:	4152      	adcs	r2, r2
10040194:	0ac3      	lsrs	r3, r0, #11
10040196:	428b      	cmp	r3, r1
10040198:	d301      	bcc.n	1004019e <__udivsi3+0x76>
1004019a:	02cb      	lsls	r3, r1, #11
1004019c:	1ac0      	subs	r0, r0, r3
1004019e:	4152      	adcs	r2, r2
100401a0:	0a83      	lsrs	r3, r0, #10
100401a2:	428b      	cmp	r3, r1
100401a4:	d301      	bcc.n	100401aa <__udivsi3+0x82>
100401a6:	028b      	lsls	r3, r1, #10
100401a8:	1ac0      	subs	r0, r0, r3
100401aa:	4152      	adcs	r2, r2
100401ac:	0a43      	lsrs	r3, r0, #9
100401ae:	428b      	cmp	r3, r1
100401b0:	d301      	bcc.n	100401b6 <__udivsi3+0x8e>
100401b2:	024b      	lsls	r3, r1, #9
100401b4:	1ac0      	subs	r0, r0, r3
100401b6:	4152      	adcs	r2, r2
100401b8:	0a03      	lsrs	r3, r0, #8
100401ba:	428b      	cmp	r3, r1
100401bc:	d301      	bcc.n	100401c2 <__udivsi3+0x9a>
100401be:	020b      	lsls	r3, r1, #8
100401c0:	1ac0      	subs	r0, r0, r3
100401c2:	4152      	adcs	r2, r2
100401c4:	d2cd      	bcs.n	10040162 <__udivsi3+0x3a>
100401c6:	09c3      	lsrs	r3, r0, #7
100401c8:	428b      	cmp	r3, r1
100401ca:	d301      	bcc.n	100401d0 <__udivsi3+0xa8>
100401cc:	01cb      	lsls	r3, r1, #7
100401ce:	1ac0      	subs	r0, r0, r3
100401d0:	4152      	adcs	r2, r2
100401d2:	0983      	lsrs	r3, r0, #6
100401d4:	428b      	cmp	r3, r1
100401d6:	d301      	bcc.n	100401dc <__udivsi3+0xb4>
100401d8:	018b      	lsls	r3, r1, #6
100401da:	1ac0      	subs	r0, r0, r3
100401dc:	4152      	adcs	r2, r2
100401de:	0943      	lsrs	r3, r0, #5
100401e0:	428b      	cmp	r3, r1
100401e2:	d301      	bcc.n	100401e8 <__udivsi3+0xc0>
100401e4:	014b      	lsls	r3, r1, #5
100401e6:	1ac0      	subs	r0, r0, r3
100401e8:	4152      	adcs	r2, r2
100401ea:	0903      	lsrs	r3, r0, #4
100401ec:	428b      	cmp	r3, r1
100401ee:	d301      	bcc.n	100401f4 <__udivsi3+0xcc>
100401f0:	010b      	lsls	r3, r1, #4
100401f2:	1ac0      	subs	r0, r0, r3
100401f4:	4152      	adcs	r2, r2
100401f6:	08c3      	lsrs	r3, r0, #3
100401f8:	428b      	cmp	r3, r1
100401fa:	d301      	bcc.n	10040200 <__udivsi3+0xd8>
100401fc:	00cb      	lsls	r3, r1, #3
100401fe:	1ac0      	subs	r0, r0, r3
10040200:	4152      	adcs	r2, r2
10040202:	0883      	lsrs	r3, r0, #2
10040204:	428b      	cmp	r3, r1
10040206:	d301      	bcc.n	1004020c <__udivsi3+0xe4>
10040208:	008b      	lsls	r3, r1, #2
1004020a:	1ac0      	subs	r0, r0, r3
1004020c:	4152      	adcs	r2, r2
1004020e:	0843      	lsrs	r3, r0, #1
10040210:	428b      	cmp	r3, r1
10040212:	d301      	bcc.n	10040218 <__udivsi3+0xf0>
10040214:	004b      	lsls	r3, r1, #1
10040216:	1ac0      	subs	r0, r0, r3
10040218:	4152      	adcs	r2, r2
1004021a:	1a41      	subs	r1, r0, r1
1004021c:	d200      	bcs.n	10040220 <__udivsi3+0xf8>
1004021e:	4601      	mov	r1, r0
10040220:	4152      	adcs	r2, r2
10040222:	4610      	mov	r0, r2
10040224:	4770      	bx	lr
10040226:	e7ff      	b.n	10040228 <__udivsi3+0x100>
10040228:	b501      	push	{r0, lr}
1004022a:	2000      	movs	r0, #0
1004022c:	f000 f8f0 	bl	10040410 <__aeabi_idiv0>
10040230:	bd02      	pop	{r1, pc}
10040232:	46c0      	nop			@ (mov r8, r8)

10040234 <__aeabi_uidivmod>:
10040234:	2900      	cmp	r1, #0
10040236:	d0f7      	beq.n	10040228 <__udivsi3+0x100>
10040238:	e776      	b.n	10040128 <__udivsi3>
1004023a:	4770      	bx	lr

1004023c <__divsi3>:
1004023c:	4603      	mov	r3, r0
1004023e:	430b      	orrs	r3, r1
10040240:	d47f      	bmi.n	10040342 <__divsi3+0x106>
10040242:	2200      	movs	r2, #0
10040244:	0843      	lsrs	r3, r0, #1
10040246:	428b      	cmp	r3, r1
10040248:	d374      	bcc.n	10040334 <__divsi3+0xf8>
1004024a:	0903      	lsrs	r3, r0, #4
1004024c:	428b      	cmp	r3, r1
1004024e:	d35f      	bcc.n	10040310 <__divsi3+0xd4>
10040250:	0a03      	lsrs	r3, r0, #8
10040252:	428b      	cmp	r3, r1
10040254:	d344      	bcc.n	100402e0 <__divsi3+0xa4>
10040256:	0b03      	lsrs	r3, r0, #12
10040258:	428b      	cmp	r3, r1
1004025a:	d328      	bcc.n	100402ae <__divsi3+0x72>
1004025c:	0c03      	lsrs	r3, r0, #16
1004025e:	428b      	cmp	r3, r1
10040260:	d30d      	bcc.n	1004027e <__divsi3+0x42>
10040262:	22ff      	movs	r2, #255	@ 0xff
10040264:	0209      	lsls	r1, r1, #8
10040266:	ba12      	rev	r2, r2
10040268:	0c03      	lsrs	r3, r0, #16
1004026a:	428b      	cmp	r3, r1
1004026c:	d302      	bcc.n	10040274 <__divsi3+0x38>
1004026e:	1212      	asrs	r2, r2, #8
10040270:	0209      	lsls	r1, r1, #8
10040272:	d065      	beq.n	10040340 <__divsi3+0x104>
10040274:	0b03      	lsrs	r3, r0, #12
10040276:	428b      	cmp	r3, r1
10040278:	d319      	bcc.n	100402ae <__divsi3+0x72>
1004027a:	e000      	b.n	1004027e <__divsi3+0x42>
1004027c:	0a09      	lsrs	r1, r1, #8
1004027e:	0bc3      	lsrs	r3, r0, #15
10040280:	428b      	cmp	r3, r1
10040282:	d301      	bcc.n	10040288 <__divsi3+0x4c>
10040284:	03cb      	lsls	r3, r1, #15
10040286:	1ac0      	subs	r0, r0, r3
10040288:	4152      	adcs	r2, r2
1004028a:	0b83      	lsrs	r3, r0, #14
1004028c:	428b      	cmp	r3, r1
1004028e:	d301      	bcc.n	10040294 <__divsi3+0x58>
10040290:	038b      	lsls	r3, r1, #14
10040292:	1ac0      	subs	r0, r0, r3
10040294:	4152      	adcs	r2, r2
10040296:	0b43      	lsrs	r3, r0, #13
10040298:	428b      	cmp	r3, r1
1004029a:	d301      	bcc.n	100402a0 <__divsi3+0x64>
1004029c:	034b      	lsls	r3, r1, #13
1004029e:	1ac0      	subs	r0, r0, r3
100402a0:	4152      	adcs	r2, r2
100402a2:	0b03      	lsrs	r3, r0, #12
100402a4:	428b      	cmp	r3, r1
100402a6:	d301      	bcc.n	100402ac <__divsi3+0x70>
100402a8:	030b      	lsls	r3, r1, #12
100402aa:	1ac0      	subs	r0, r0, r3
100402ac:	4152      	adcs	r2, r2
100402ae:	0ac3      	lsrs	r3, r0, #11
100402b0:	428b      	cmp	r3, r1
100402b2:	d301      	bcc.n	100402b8 <__divsi3+0x7c>
100402b4:	02cb      	lsls	r3, r1, #11
100402b6:	1ac0      	subs	r0, r0, r3
100402b8:	4152      	adcs	r2, r2
100402ba:	0a83      	lsrs	r3, r0, #10
100402bc:	428b      	cmp	r3, r1
100402be:	d301      	bcc.n	100402c4 <__divsi3+0x88>
100402c0:	028b      	lsls	r3, r1, #10
100402c2:	1ac0      	subs	r0, r0, r3
100402c4:	4152      	adcs	r2, r2
100402c6:	0a43      	lsrs	r3, r0, #9
100402c8:	428b      	cmp	r3, r1
100402ca:	d301      	bcc.n	100402d0 <__divsi3+0x94>
100402cc:	024b      	lsls	r3, r1, #9
100402ce:	1ac0      	subs	r0, r0, r3
100402d0:	4152      	adcs	r2, r2
100402d2:	0a03      	lsrs	r3, r0, #8
100402d4:	428b      	cmp	r3, r1
100402d6:	d301      	bcc.n	100402dc <__divsi3+0xa0>
100402d8:	020b      	lsls	r3, r1, #8
100402da:	1ac0      	subs	r0, r0, r3
100402dc:	4152      	adcs	r2, r2
100402de:	d2cd      	bcs.n	1004027c <__divsi3+0x40>
100402e0:	09c3      	lsrs	r3, r0, #7
100402e2:	428b      	cmp	r3, r1
100402e4:	d301      	bcc.n	100402ea <__divsi3+0xae>
100402e6:	01cb      	lsls	r3, r1, #7
100402e8:	1ac0      	subs	r0, r0, r3
100402ea:	4152      	adcs	r2, r2
100402ec:	0983      	lsrs	r3, r0, #6
100402ee:	428b      	cmp	r3, r1
100402f0:	d301      	bcc.n	100402f6 <__divsi3+0xba>
100402f2:	018b      	lsls	r3, r1, #6
100402f4:	1ac0      	subs	r0, r0, r3
100402f6:	4152      	adcs	r2, r2
100402f8:	0943      	lsrs	r3, r0, #5
100402fa:	428b      	cmp	r3, r1
100402fc:	d301      	bcc.n	10040302 <__divsi3+0xc6>
100402fe:	014b      	lsls	r3, r1, #5
10040300:	1ac0      	subs	r0, r0, r3
10040302:	4152      	adcs	r2, r2
10040304:	0903      	lsrs	r3, r0, #4
10040306:	428b      	cmp	r3, r1
10040308:	d301      	bcc.n	1004030e <__divsi3+0xd2>
1004030a:	010b      	lsls	r3, r1, #4
1004030c:	1ac0      	subs	r0, r0, r3
1004030e:	4152      	adcs	r2, r2
10040310:	08c3      	lsrs	r3, r0, #3
10040312:	428b      	cmp	r3, r1
10040314:	d301      	bcc.n	1004031a <__divsi3+0xde>
10040316:	00cb      	lsls	r3, r1, #3
10040318:	1ac0      	subs	r0, r0, r3
1004031a:	4152      	adcs	r2, r2
1004031c:	0883      	lsrs	r3, r0, #2
1004031e:	428b      	cmp	r3, r1
10040320:	d301      	bcc.n	10040326 <__divsi3+0xea>
10040322:	008b      	lsls	r3, r1, #2
10040324:	1ac0      	subs	r0, r0, r3
10040326:	4152      	adcs	r2, r2
10040328:	0843      	lsrs	r3, r0, #1
1004032a:	428b      	cmp	r3, r1
1004032c:	d301      	bcc.n	10040332 <__divsi3+0xf6>
1004032e:	004b      	lsls	r3, r1, #1
10040330:	1ac0      	subs	r0, r0, r3
10040332:	4152      	adcs	r2, r2
10040334:	1a41      	subs	r1, r0, r1
10040336:	d200      	bcs.n	1004033a <__divsi3+0xfe>
10040338:	4601      	mov	r1, r0
1004033a:	4152      	adcs	r2, r2
1004033c:	4610      	mov	r0, r2
1004033e:	4770      	bx	lr
10040340:	e05d      	b.n	100403fe <__divsi3+0x1c2>
10040342:	0fca      	lsrs	r2, r1, #31
10040344:	d000      	beq.n	10040348 <__divsi3+0x10c>
10040346:	4249      	negs	r1, r1
10040348:	1003      	asrs	r3, r0, #32
1004034a:	d300      	bcc.n	1004034e <__divsi3+0x112>
1004034c:	4240      	negs	r0, r0
1004034e:	4053      	eors	r3, r2
10040350:	2200      	movs	r2, #0
10040352:	469c      	mov	ip, r3
10040354:	0903      	lsrs	r3, r0, #4
10040356:	428b      	cmp	r3, r1
10040358:	d32d      	bcc.n	100403b6 <__divsi3+0x17a>
1004035a:	0a03      	lsrs	r3, r0, #8
1004035c:	428b      	cmp	r3, r1
1004035e:	d312      	bcc.n	10040386 <__divsi3+0x14a>
10040360:	22fc      	movs	r2, #252	@ 0xfc
10040362:	0189      	lsls	r1, r1, #6
10040364:	ba12      	rev	r2, r2
10040366:	0a03      	lsrs	r3, r0, #8
10040368:	428b      	cmp	r3, r1
1004036a:	d30c      	bcc.n	10040386 <__divsi3+0x14a>
1004036c:	0189      	lsls	r1, r1, #6
1004036e:	1192      	asrs	r2, r2, #6
10040370:	428b      	cmp	r3, r1
10040372:	d308      	bcc.n	10040386 <__divsi3+0x14a>
10040374:	0189      	lsls	r1, r1, #6
10040376:	1192      	asrs	r2, r2, #6
10040378:	428b      	cmp	r3, r1
1004037a:	d304      	bcc.n	10040386 <__divsi3+0x14a>
1004037c:	0189      	lsls	r1, r1, #6
1004037e:	d03a      	beq.n	100403f6 <__divsi3+0x1ba>
10040380:	1192      	asrs	r2, r2, #6
10040382:	e000      	b.n	10040386 <__divsi3+0x14a>
10040384:	0989      	lsrs	r1, r1, #6
10040386:	09c3      	lsrs	r3, r0, #7
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x154>
1004038c:	01cb      	lsls	r3, r1, #7
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	0983      	lsrs	r3, r0, #6
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x160>
10040398:	018b      	lsls	r3, r1, #6
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0943      	lsrs	r3, r0, #5
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x16c>
100403a4:	014b      	lsls	r3, r1, #5
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	0903      	lsrs	r3, r0, #4
100403ac:	428b      	cmp	r3, r1
100403ae:	d301      	bcc.n	100403b4 <__divsi3+0x178>
100403b0:	010b      	lsls	r3, r1, #4
100403b2:	1ac0      	subs	r0, r0, r3
100403b4:	4152      	adcs	r2, r2
100403b6:	08c3      	lsrs	r3, r0, #3
100403b8:	428b      	cmp	r3, r1
100403ba:	d301      	bcc.n	100403c0 <__divsi3+0x184>
100403bc:	00cb      	lsls	r3, r1, #3
100403be:	1ac0      	subs	r0, r0, r3
100403c0:	4152      	adcs	r2, r2
100403c2:	0883      	lsrs	r3, r0, #2
100403c4:	428b      	cmp	r3, r1
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x190>
100403c8:	008b      	lsls	r3, r1, #2
100403ca:	1ac0      	subs	r0, r0, r3
100403cc:	4152      	adcs	r2, r2
100403ce:	d2d9      	bcs.n	10040384 <__divsi3+0x148>
100403d0:	0843      	lsrs	r3, r0, #1
100403d2:	428b      	cmp	r3, r1
100403d4:	d301      	bcc.n	100403da <__divsi3+0x19e>
100403d6:	004b      	lsls	r3, r1, #1
100403d8:	1ac0      	subs	r0, r0, r3
100403da:	4152      	adcs	r2, r2
100403dc:	1a41      	subs	r1, r0, r1
100403de:	d200      	bcs.n	100403e2 <__divsi3+0x1a6>
100403e0:	4601      	mov	r1, r0
100403e2:	4663      	mov	r3, ip
100403e4:	4152      	adcs	r2, r2
100403e6:	105b      	asrs	r3, r3, #1
100403e8:	4610      	mov	r0, r2
100403ea:	d301      	bcc.n	100403f0 <__divsi3+0x1b4>
100403ec:	4240      	negs	r0, r0
100403ee:	2b00      	cmp	r3, #0
100403f0:	d500      	bpl.n	100403f4 <__divsi3+0x1b8>
100403f2:	4249      	negs	r1, r1
100403f4:	4770      	bx	lr
100403f6:	4663      	mov	r3, ip
100403f8:	105b      	asrs	r3, r3, #1
100403fa:	d300      	bcc.n	100403fe <__divsi3+0x1c2>
100403fc:	4240      	negs	r0, r0
100403fe:	b501      	push	{r0, lr}
10040400:	2000      	movs	r0, #0
10040402:	f000 f805 	bl	10040410 <__aeabi_idiv0>
10040406:	bd02      	pop	{r1, pc}

10040408 <__aeabi_idivmod>:
10040408:	2900      	cmp	r1, #0
1004040a:	d0f8      	beq.n	100403fe <__divsi3+0x1c2>
1004040c:	e716      	b.n	1004023c <__divsi3>
1004040e:	4770      	bx	lr

10040410 <__aeabi_idiv0>:
10040410:	4770      	bx	lr
10040412:	46c0      	nop			@ (mov r8, r8)

10040414 <__aeabi_cfrcmple>:
10040414:	4684      	mov	ip, r0
10040416:	0008      	movs	r0, r1
10040418:	4661      	mov	r1, ip
1004041a:	e7ff      	b.n	1004041c <__aeabi_cfcmpeq>

1004041c <__aeabi_cfcmpeq>:
1004041c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004041e:	f000 f9af 	bl	10040780 <__lesf2>
10040422:	2800      	cmp	r0, #0
10040424:	d401      	bmi.n	1004042a <__aeabi_cfcmpeq+0xe>
10040426:	2100      	movs	r1, #0
10040428:	42c8      	cmn	r0, r1
1004042a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1004042c <__aeabi_fcmpeq>:
1004042c:	b510      	push	{r4, lr}
1004042e:	f000 f92f 	bl	10040690 <__eqsf2>
10040432:	4240      	negs	r0, r0
10040434:	3001      	adds	r0, #1
10040436:	bd10      	pop	{r4, pc}

10040438 <__aeabi_fcmplt>:
10040438:	b510      	push	{r4, lr}
1004043a:	f000 f9a1 	bl	10040780 <__lesf2>
1004043e:	2800      	cmp	r0, #0
10040440:	db01      	blt.n	10040446 <__aeabi_fcmplt+0xe>
10040442:	2000      	movs	r0, #0
10040444:	bd10      	pop	{r4, pc}
10040446:	2001      	movs	r0, #1
10040448:	bd10      	pop	{r4, pc}
1004044a:	46c0      	nop			@ (mov r8, r8)

1004044c <__aeabi_fcmple>:
1004044c:	b510      	push	{r4, lr}
1004044e:	f000 f997 	bl	10040780 <__lesf2>
10040452:	2800      	cmp	r0, #0
10040454:	dd01      	ble.n	1004045a <__aeabi_fcmple+0xe>
10040456:	2000      	movs	r0, #0
10040458:	bd10      	pop	{r4, pc}
1004045a:	2001      	movs	r0, #1
1004045c:	bd10      	pop	{r4, pc}
1004045e:	46c0      	nop			@ (mov r8, r8)

10040460 <__aeabi_fcmpgt>:
10040460:	b510      	push	{r4, lr}
10040462:	f000 f93d 	bl	100406e0 <__gesf2>
10040466:	2800      	cmp	r0, #0
10040468:	dc01      	bgt.n	1004046e <__aeabi_fcmpgt+0xe>
1004046a:	2000      	movs	r0, #0
1004046c:	bd10      	pop	{r4, pc}
1004046e:	2001      	movs	r0, #1
10040470:	bd10      	pop	{r4, pc}
10040472:	46c0      	nop			@ (mov r8, r8)

10040474 <__aeabi_fcmpge>:
10040474:	b510      	push	{r4, lr}
10040476:	f000 f933 	bl	100406e0 <__gesf2>
1004047a:	2800      	cmp	r0, #0
1004047c:	da01      	bge.n	10040482 <__aeabi_fcmpge+0xe>
1004047e:	2000      	movs	r0, #0
10040480:	bd10      	pop	{r4, pc}
10040482:	2001      	movs	r0, #1
10040484:	bd10      	pop	{r4, pc}
10040486:	46c0      	nop			@ (mov r8, r8)

10040488 <__aeabi_uldivmod>:
10040488:	2b00      	cmp	r3, #0
1004048a:	d111      	bne.n	100404b0 <__aeabi_uldivmod+0x28>
1004048c:	2a00      	cmp	r2, #0
1004048e:	d10f      	bne.n	100404b0 <__aeabi_uldivmod+0x28>
10040490:	2900      	cmp	r1, #0
10040492:	d100      	bne.n	10040496 <__aeabi_uldivmod+0xe>
10040494:	2800      	cmp	r0, #0
10040496:	d002      	beq.n	1004049e <__aeabi_uldivmod+0x16>
10040498:	2100      	movs	r1, #0
1004049a:	43c9      	mvns	r1, r1
1004049c:	0008      	movs	r0, r1
1004049e:	b407      	push	{r0, r1, r2}
100404a0:	4802      	ldr	r0, [pc, #8]	@ (100404ac <__aeabi_uldivmod+0x24>)
100404a2:	a102      	add	r1, pc, #8	@ (adr r1, 100404ac <__aeabi_uldivmod+0x24>)
100404a4:	1840      	adds	r0, r0, r1
100404a6:	9002      	str	r0, [sp, #8]
100404a8:	bd03      	pop	{r0, r1, pc}
100404aa:	46c0      	nop			@ (mov r8, r8)
100404ac:	ffffff65 	.word	0xffffff65
100404b0:	b403      	push	{r0, r1}
100404b2:	4668      	mov	r0, sp
100404b4:	b501      	push	{r0, lr}
100404b6:	9802      	ldr	r0, [sp, #8]
100404b8:	f000 f81e 	bl	100404f8 <__udivmoddi4>
100404bc:	9b01      	ldr	r3, [sp, #4]
100404be:	469e      	mov	lr, r3
100404c0:	b002      	add	sp, #8
100404c2:	bc0c      	pop	{r2, r3}
100404c4:	4770      	bx	lr
100404c6:	46c0      	nop			@ (mov r8, r8)

100404c8 <__aeabi_f2uiz>:
100404c8:	219e      	movs	r1, #158	@ 0x9e
100404ca:	b510      	push	{r4, lr}
100404cc:	05c9      	lsls	r1, r1, #23
100404ce:	1c04      	adds	r4, r0, #0
100404d0:	f7ff ffd0 	bl	10040474 <__aeabi_fcmpge>
100404d4:	2800      	cmp	r0, #0
100404d6:	d103      	bne.n	100404e0 <__aeabi_f2uiz+0x18>
100404d8:	1c20      	adds	r0, r4, #0
100404da:	f000 fc81 	bl	10040de0 <__aeabi_f2iz>
100404de:	bd10      	pop	{r4, pc}
100404e0:	219e      	movs	r1, #158	@ 0x9e
100404e2:	1c20      	adds	r0, r4, #0
100404e4:	05c9      	lsls	r1, r1, #23
100404e6:	f000 fad7 	bl	10040a98 <__aeabi_fsub>
100404ea:	f000 fc79 	bl	10040de0 <__aeabi_f2iz>
100404ee:	2380      	movs	r3, #128	@ 0x80
100404f0:	061b      	lsls	r3, r3, #24
100404f2:	469c      	mov	ip, r3
100404f4:	4460      	add	r0, ip
100404f6:	e7f2      	b.n	100404de <__aeabi_f2uiz+0x16>

100404f8 <__udivmoddi4>:
100404f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100404fa:	4657      	mov	r7, sl
100404fc:	464e      	mov	r6, r9
100404fe:	4645      	mov	r5, r8
10040500:	46de      	mov	lr, fp
10040502:	b5e0      	push	{r5, r6, r7, lr}
10040504:	0004      	movs	r4, r0
10040506:	000d      	movs	r5, r1
10040508:	4692      	mov	sl, r2
1004050a:	4699      	mov	r9, r3
1004050c:	b083      	sub	sp, #12
1004050e:	428b      	cmp	r3, r1
10040510:	d830      	bhi.n	10040574 <__udivmoddi4+0x7c>
10040512:	d02d      	beq.n	10040570 <__udivmoddi4+0x78>
10040514:	4649      	mov	r1, r9
10040516:	4650      	mov	r0, sl
10040518:	f000 fd2e 	bl	10040f78 <__clzdi2>
1004051c:	0029      	movs	r1, r5
1004051e:	0006      	movs	r6, r0
10040520:	0020      	movs	r0, r4
10040522:	f000 fd29 	bl	10040f78 <__clzdi2>
10040526:	1a33      	subs	r3, r6, r0
10040528:	4698      	mov	r8, r3
1004052a:	3b20      	subs	r3, #32
1004052c:	d434      	bmi.n	10040598 <__udivmoddi4+0xa0>
1004052e:	469b      	mov	fp, r3
10040530:	4653      	mov	r3, sl
10040532:	465a      	mov	r2, fp
10040534:	4093      	lsls	r3, r2
10040536:	4642      	mov	r2, r8
10040538:	001f      	movs	r7, r3
1004053a:	4653      	mov	r3, sl
1004053c:	4093      	lsls	r3, r2
1004053e:	001e      	movs	r6, r3
10040540:	42af      	cmp	r7, r5
10040542:	d83b      	bhi.n	100405bc <__udivmoddi4+0xc4>
10040544:	42af      	cmp	r7, r5
10040546:	d100      	bne.n	1004054a <__udivmoddi4+0x52>
10040548:	e079      	b.n	1004063e <__udivmoddi4+0x146>
1004054a:	465b      	mov	r3, fp
1004054c:	1ba4      	subs	r4, r4, r6
1004054e:	41bd      	sbcs	r5, r7
10040550:	2b00      	cmp	r3, #0
10040552:	da00      	bge.n	10040556 <__udivmoddi4+0x5e>
10040554:	e076      	b.n	10040644 <__udivmoddi4+0x14c>
10040556:	2200      	movs	r2, #0
10040558:	2300      	movs	r3, #0
1004055a:	9200      	str	r2, [sp, #0]
1004055c:	9301      	str	r3, [sp, #4]
1004055e:	2301      	movs	r3, #1
10040560:	465a      	mov	r2, fp
10040562:	4093      	lsls	r3, r2
10040564:	9301      	str	r3, [sp, #4]
10040566:	2301      	movs	r3, #1
10040568:	4642      	mov	r2, r8
1004056a:	4093      	lsls	r3, r2
1004056c:	9300      	str	r3, [sp, #0]
1004056e:	e029      	b.n	100405c4 <__udivmoddi4+0xcc>
10040570:	4282      	cmp	r2, r0
10040572:	d9cf      	bls.n	10040514 <__udivmoddi4+0x1c>
10040574:	2200      	movs	r2, #0
10040576:	2300      	movs	r3, #0
10040578:	9200      	str	r2, [sp, #0]
1004057a:	9301      	str	r3, [sp, #4]
1004057c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004057e:	2b00      	cmp	r3, #0
10040580:	d001      	beq.n	10040586 <__udivmoddi4+0x8e>
10040582:	601c      	str	r4, [r3, #0]
10040584:	605d      	str	r5, [r3, #4]
10040586:	9800      	ldr	r0, [sp, #0]
10040588:	9901      	ldr	r1, [sp, #4]
1004058a:	b003      	add	sp, #12
1004058c:	bcf0      	pop	{r4, r5, r6, r7}
1004058e:	46bb      	mov	fp, r7
10040590:	46b2      	mov	sl, r6
10040592:	46a9      	mov	r9, r5
10040594:	46a0      	mov	r8, r4
10040596:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040598:	4642      	mov	r2, r8
1004059a:	469b      	mov	fp, r3
1004059c:	2320      	movs	r3, #32
1004059e:	1a9b      	subs	r3, r3, r2
100405a0:	4652      	mov	r2, sl
100405a2:	40da      	lsrs	r2, r3
100405a4:	4641      	mov	r1, r8
100405a6:	0013      	movs	r3, r2
100405a8:	464a      	mov	r2, r9
100405aa:	408a      	lsls	r2, r1
100405ac:	0017      	movs	r7, r2
100405ae:	4642      	mov	r2, r8
100405b0:	431f      	orrs	r7, r3
100405b2:	4653      	mov	r3, sl
100405b4:	4093      	lsls	r3, r2
100405b6:	001e      	movs	r6, r3
100405b8:	42af      	cmp	r7, r5
100405ba:	d9c3      	bls.n	10040544 <__udivmoddi4+0x4c>
100405bc:	2200      	movs	r2, #0
100405be:	2300      	movs	r3, #0
100405c0:	9200      	str	r2, [sp, #0]
100405c2:	9301      	str	r3, [sp, #4]
100405c4:	4643      	mov	r3, r8
100405c6:	2b00      	cmp	r3, #0
100405c8:	d0d8      	beq.n	1004057c <__udivmoddi4+0x84>
100405ca:	07fb      	lsls	r3, r7, #31
100405cc:	0872      	lsrs	r2, r6, #1
100405ce:	431a      	orrs	r2, r3
100405d0:	4646      	mov	r6, r8
100405d2:	087b      	lsrs	r3, r7, #1
100405d4:	e00e      	b.n	100405f4 <__udivmoddi4+0xfc>
100405d6:	42ab      	cmp	r3, r5
100405d8:	d101      	bne.n	100405de <__udivmoddi4+0xe6>
100405da:	42a2      	cmp	r2, r4
100405dc:	d80c      	bhi.n	100405f8 <__udivmoddi4+0x100>
100405de:	1aa4      	subs	r4, r4, r2
100405e0:	419d      	sbcs	r5, r3
100405e2:	2001      	movs	r0, #1
100405e4:	1924      	adds	r4, r4, r4
100405e6:	416d      	adcs	r5, r5
100405e8:	2100      	movs	r1, #0
100405ea:	3e01      	subs	r6, #1
100405ec:	1824      	adds	r4, r4, r0
100405ee:	414d      	adcs	r5, r1
100405f0:	2e00      	cmp	r6, #0
100405f2:	d006      	beq.n	10040602 <__udivmoddi4+0x10a>
100405f4:	42ab      	cmp	r3, r5
100405f6:	d9ee      	bls.n	100405d6 <__udivmoddi4+0xde>
100405f8:	3e01      	subs	r6, #1
100405fa:	1924      	adds	r4, r4, r4
100405fc:	416d      	adcs	r5, r5
100405fe:	2e00      	cmp	r6, #0
10040600:	d1f8      	bne.n	100405f4 <__udivmoddi4+0xfc>
10040602:	9800      	ldr	r0, [sp, #0]
10040604:	9901      	ldr	r1, [sp, #4]
10040606:	465b      	mov	r3, fp
10040608:	1900      	adds	r0, r0, r4
1004060a:	4169      	adcs	r1, r5
1004060c:	2b00      	cmp	r3, #0
1004060e:	db24      	blt.n	1004065a <__udivmoddi4+0x162>
10040610:	002b      	movs	r3, r5
10040612:	465a      	mov	r2, fp
10040614:	4644      	mov	r4, r8
10040616:	40d3      	lsrs	r3, r2
10040618:	002a      	movs	r2, r5
1004061a:	40e2      	lsrs	r2, r4
1004061c:	001c      	movs	r4, r3
1004061e:	465b      	mov	r3, fp
10040620:	0015      	movs	r5, r2
10040622:	2b00      	cmp	r3, #0
10040624:	db2a      	blt.n	1004067c <__udivmoddi4+0x184>
10040626:	0026      	movs	r6, r4
10040628:	409e      	lsls	r6, r3
1004062a:	0033      	movs	r3, r6
1004062c:	0026      	movs	r6, r4
1004062e:	4647      	mov	r7, r8
10040630:	40be      	lsls	r6, r7
10040632:	0032      	movs	r2, r6
10040634:	1a80      	subs	r0, r0, r2
10040636:	4199      	sbcs	r1, r3
10040638:	9000      	str	r0, [sp, #0]
1004063a:	9101      	str	r1, [sp, #4]
1004063c:	e79e      	b.n	1004057c <__udivmoddi4+0x84>
1004063e:	42a3      	cmp	r3, r4
10040640:	d8bc      	bhi.n	100405bc <__udivmoddi4+0xc4>
10040642:	e782      	b.n	1004054a <__udivmoddi4+0x52>
10040644:	4642      	mov	r2, r8
10040646:	2320      	movs	r3, #32
10040648:	2100      	movs	r1, #0
1004064a:	1a9b      	subs	r3, r3, r2
1004064c:	2200      	movs	r2, #0
1004064e:	9100      	str	r1, [sp, #0]
10040650:	9201      	str	r2, [sp, #4]
10040652:	2201      	movs	r2, #1
10040654:	40da      	lsrs	r2, r3
10040656:	9201      	str	r2, [sp, #4]
10040658:	e785      	b.n	10040566 <__udivmoddi4+0x6e>
1004065a:	4642      	mov	r2, r8
1004065c:	2320      	movs	r3, #32
1004065e:	1a9b      	subs	r3, r3, r2
10040660:	002a      	movs	r2, r5
10040662:	4646      	mov	r6, r8
10040664:	409a      	lsls	r2, r3
10040666:	0023      	movs	r3, r4
10040668:	40f3      	lsrs	r3, r6
1004066a:	4644      	mov	r4, r8
1004066c:	4313      	orrs	r3, r2
1004066e:	002a      	movs	r2, r5
10040670:	40e2      	lsrs	r2, r4
10040672:	001c      	movs	r4, r3
10040674:	465b      	mov	r3, fp
10040676:	0015      	movs	r5, r2
10040678:	2b00      	cmp	r3, #0
1004067a:	dad4      	bge.n	10040626 <__udivmoddi4+0x12e>
1004067c:	4642      	mov	r2, r8
1004067e:	002f      	movs	r7, r5
10040680:	2320      	movs	r3, #32
10040682:	0026      	movs	r6, r4
10040684:	4097      	lsls	r7, r2
10040686:	1a9b      	subs	r3, r3, r2
10040688:	40de      	lsrs	r6, r3
1004068a:	003b      	movs	r3, r7
1004068c:	4333      	orrs	r3, r6
1004068e:	e7cd      	b.n	1004062c <__udivmoddi4+0x134>

10040690 <__eqsf2>:
10040690:	b570      	push	{r4, r5, r6, lr}
10040692:	0042      	lsls	r2, r0, #1
10040694:	024e      	lsls	r6, r1, #9
10040696:	004c      	lsls	r4, r1, #1
10040698:	0245      	lsls	r5, r0, #9
1004069a:	0a6d      	lsrs	r5, r5, #9
1004069c:	0e12      	lsrs	r2, r2, #24
1004069e:	0fc3      	lsrs	r3, r0, #31
100406a0:	0a76      	lsrs	r6, r6, #9
100406a2:	0e24      	lsrs	r4, r4, #24
100406a4:	0fc9      	lsrs	r1, r1, #31
100406a6:	2aff      	cmp	r2, #255	@ 0xff
100406a8:	d010      	beq.n	100406cc <__eqsf2+0x3c>
100406aa:	2cff      	cmp	r4, #255	@ 0xff
100406ac:	d00c      	beq.n	100406c8 <__eqsf2+0x38>
100406ae:	2001      	movs	r0, #1
100406b0:	42a2      	cmp	r2, r4
100406b2:	d10a      	bne.n	100406ca <__eqsf2+0x3a>
100406b4:	42b5      	cmp	r5, r6
100406b6:	d108      	bne.n	100406ca <__eqsf2+0x3a>
100406b8:	428b      	cmp	r3, r1
100406ba:	d00f      	beq.n	100406dc <__eqsf2+0x4c>
100406bc:	2a00      	cmp	r2, #0
100406be:	d104      	bne.n	100406ca <__eqsf2+0x3a>
100406c0:	0028      	movs	r0, r5
100406c2:	1e43      	subs	r3, r0, #1
100406c4:	4198      	sbcs	r0, r3
100406c6:	e000      	b.n	100406ca <__eqsf2+0x3a>
100406c8:	2001      	movs	r0, #1
100406ca:	bd70      	pop	{r4, r5, r6, pc}
100406cc:	2001      	movs	r0, #1
100406ce:	2cff      	cmp	r4, #255	@ 0xff
100406d0:	d1fb      	bne.n	100406ca <__eqsf2+0x3a>
100406d2:	4335      	orrs	r5, r6
100406d4:	d1f9      	bne.n	100406ca <__eqsf2+0x3a>
100406d6:	404b      	eors	r3, r1
100406d8:	0018      	movs	r0, r3
100406da:	e7f6      	b.n	100406ca <__eqsf2+0x3a>
100406dc:	2000      	movs	r0, #0
100406de:	e7f4      	b.n	100406ca <__eqsf2+0x3a>

100406e0 <__gesf2>:
100406e0:	b530      	push	{r4, r5, lr}
100406e2:	0042      	lsls	r2, r0, #1
100406e4:	0244      	lsls	r4, r0, #9
100406e6:	024d      	lsls	r5, r1, #9
100406e8:	0fc3      	lsrs	r3, r0, #31
100406ea:	0048      	lsls	r0, r1, #1
100406ec:	0a64      	lsrs	r4, r4, #9
100406ee:	0e12      	lsrs	r2, r2, #24
100406f0:	0a6d      	lsrs	r5, r5, #9
100406f2:	0e00      	lsrs	r0, r0, #24
100406f4:	0fc9      	lsrs	r1, r1, #31
100406f6:	2aff      	cmp	r2, #255	@ 0xff
100406f8:	d019      	beq.n	1004072e <__gesf2+0x4e>
100406fa:	28ff      	cmp	r0, #255	@ 0xff
100406fc:	d00b      	beq.n	10040716 <__gesf2+0x36>
100406fe:	2a00      	cmp	r2, #0
10040700:	d11e      	bne.n	10040740 <__gesf2+0x60>
10040702:	2800      	cmp	r0, #0
10040704:	d10b      	bne.n	1004071e <__gesf2+0x3e>
10040706:	2d00      	cmp	r5, #0
10040708:	d027      	beq.n	1004075a <__gesf2+0x7a>
1004070a:	2c00      	cmp	r4, #0
1004070c:	d134      	bne.n	10040778 <__gesf2+0x98>
1004070e:	2900      	cmp	r1, #0
10040710:	d02f      	beq.n	10040772 <__gesf2+0x92>
10040712:	0008      	movs	r0, r1
10040714:	bd30      	pop	{r4, r5, pc}
10040716:	2d00      	cmp	r5, #0
10040718:	d128      	bne.n	1004076c <__gesf2+0x8c>
1004071a:	2a00      	cmp	r2, #0
1004071c:	d101      	bne.n	10040722 <__gesf2+0x42>
1004071e:	2c00      	cmp	r4, #0
10040720:	d0f5      	beq.n	1004070e <__gesf2+0x2e>
10040722:	428b      	cmp	r3, r1
10040724:	d107      	bne.n	10040736 <__gesf2+0x56>
10040726:	2b00      	cmp	r3, #0
10040728:	d023      	beq.n	10040772 <__gesf2+0x92>
1004072a:	0018      	movs	r0, r3
1004072c:	e7f2      	b.n	10040714 <__gesf2+0x34>
1004072e:	2c00      	cmp	r4, #0
10040730:	d11c      	bne.n	1004076c <__gesf2+0x8c>
10040732:	28ff      	cmp	r0, #255	@ 0xff
10040734:	d014      	beq.n	10040760 <__gesf2+0x80>
10040736:	1e58      	subs	r0, r3, #1
10040738:	2302      	movs	r3, #2
1004073a:	4018      	ands	r0, r3
1004073c:	3801      	subs	r0, #1
1004073e:	e7e9      	b.n	10040714 <__gesf2+0x34>
10040740:	2800      	cmp	r0, #0
10040742:	d0f8      	beq.n	10040736 <__gesf2+0x56>
10040744:	428b      	cmp	r3, r1
10040746:	d1f6      	bne.n	10040736 <__gesf2+0x56>
10040748:	4282      	cmp	r2, r0
1004074a:	dcf4      	bgt.n	10040736 <__gesf2+0x56>
1004074c:	dbeb      	blt.n	10040726 <__gesf2+0x46>
1004074e:	42ac      	cmp	r4, r5
10040750:	d8f1      	bhi.n	10040736 <__gesf2+0x56>
10040752:	2000      	movs	r0, #0
10040754:	42ac      	cmp	r4, r5
10040756:	d2dd      	bcs.n	10040714 <__gesf2+0x34>
10040758:	e7e5      	b.n	10040726 <__gesf2+0x46>
1004075a:	2c00      	cmp	r4, #0
1004075c:	d0da      	beq.n	10040714 <__gesf2+0x34>
1004075e:	e7ea      	b.n	10040736 <__gesf2+0x56>
10040760:	2d00      	cmp	r5, #0
10040762:	d103      	bne.n	1004076c <__gesf2+0x8c>
10040764:	428b      	cmp	r3, r1
10040766:	d1e6      	bne.n	10040736 <__gesf2+0x56>
10040768:	2000      	movs	r0, #0
1004076a:	e7d3      	b.n	10040714 <__gesf2+0x34>
1004076c:	2002      	movs	r0, #2
1004076e:	4240      	negs	r0, r0
10040770:	e7d0      	b.n	10040714 <__gesf2+0x34>
10040772:	2001      	movs	r0, #1
10040774:	4240      	negs	r0, r0
10040776:	e7cd      	b.n	10040714 <__gesf2+0x34>
10040778:	428b      	cmp	r3, r1
1004077a:	d0e8      	beq.n	1004074e <__gesf2+0x6e>
1004077c:	e7db      	b.n	10040736 <__gesf2+0x56>
1004077e:	46c0      	nop			@ (mov r8, r8)

10040780 <__lesf2>:
10040780:	b530      	push	{r4, r5, lr}
10040782:	0042      	lsls	r2, r0, #1
10040784:	0244      	lsls	r4, r0, #9
10040786:	024d      	lsls	r5, r1, #9
10040788:	0fc3      	lsrs	r3, r0, #31
1004078a:	0048      	lsls	r0, r1, #1
1004078c:	0a64      	lsrs	r4, r4, #9
1004078e:	0e12      	lsrs	r2, r2, #24
10040790:	0a6d      	lsrs	r5, r5, #9
10040792:	0e00      	lsrs	r0, r0, #24
10040794:	0fc9      	lsrs	r1, r1, #31
10040796:	2aff      	cmp	r2, #255	@ 0xff
10040798:	d01a      	beq.n	100407d0 <__lesf2+0x50>
1004079a:	28ff      	cmp	r0, #255	@ 0xff
1004079c:	d00e      	beq.n	100407bc <__lesf2+0x3c>
1004079e:	2a00      	cmp	r2, #0
100407a0:	d11e      	bne.n	100407e0 <__lesf2+0x60>
100407a2:	2800      	cmp	r0, #0
100407a4:	d10e      	bne.n	100407c4 <__lesf2+0x44>
100407a6:	2d00      	cmp	r5, #0
100407a8:	d02a      	beq.n	10040800 <__lesf2+0x80>
100407aa:	2c00      	cmp	r4, #0
100407ac:	d00c      	beq.n	100407c8 <__lesf2+0x48>
100407ae:	428b      	cmp	r3, r1
100407b0:	d01d      	beq.n	100407ee <__lesf2+0x6e>
100407b2:	1e58      	subs	r0, r3, #1
100407b4:	2302      	movs	r3, #2
100407b6:	4018      	ands	r0, r3
100407b8:	3801      	subs	r0, #1
100407ba:	e010      	b.n	100407de <__lesf2+0x5e>
100407bc:	2d00      	cmp	r5, #0
100407be:	d10d      	bne.n	100407dc <__lesf2+0x5c>
100407c0:	2a00      	cmp	r2, #0
100407c2:	d120      	bne.n	10040806 <__lesf2+0x86>
100407c4:	2c00      	cmp	r4, #0
100407c6:	d11e      	bne.n	10040806 <__lesf2+0x86>
100407c8:	2900      	cmp	r1, #0
100407ca:	d023      	beq.n	10040814 <__lesf2+0x94>
100407cc:	0008      	movs	r0, r1
100407ce:	e006      	b.n	100407de <__lesf2+0x5e>
100407d0:	2c00      	cmp	r4, #0
100407d2:	d103      	bne.n	100407dc <__lesf2+0x5c>
100407d4:	28ff      	cmp	r0, #255	@ 0xff
100407d6:	d1ec      	bne.n	100407b2 <__lesf2+0x32>
100407d8:	2d00      	cmp	r5, #0
100407da:	d017      	beq.n	1004080c <__lesf2+0x8c>
100407dc:	2002      	movs	r0, #2
100407de:	bd30      	pop	{r4, r5, pc}
100407e0:	2800      	cmp	r0, #0
100407e2:	d0e6      	beq.n	100407b2 <__lesf2+0x32>
100407e4:	428b      	cmp	r3, r1
100407e6:	d1e4      	bne.n	100407b2 <__lesf2+0x32>
100407e8:	4282      	cmp	r2, r0
100407ea:	dce2      	bgt.n	100407b2 <__lesf2+0x32>
100407ec:	db04      	blt.n	100407f8 <__lesf2+0x78>
100407ee:	42ac      	cmp	r4, r5
100407f0:	d8df      	bhi.n	100407b2 <__lesf2+0x32>
100407f2:	2000      	movs	r0, #0
100407f4:	42ac      	cmp	r4, r5
100407f6:	d2f2      	bcs.n	100407de <__lesf2+0x5e>
100407f8:	2b00      	cmp	r3, #0
100407fa:	d00b      	beq.n	10040814 <__lesf2+0x94>
100407fc:	0018      	movs	r0, r3
100407fe:	e7ee      	b.n	100407de <__lesf2+0x5e>
10040800:	2c00      	cmp	r4, #0
10040802:	d0ec      	beq.n	100407de <__lesf2+0x5e>
10040804:	e7d5      	b.n	100407b2 <__lesf2+0x32>
10040806:	428b      	cmp	r3, r1
10040808:	d1d3      	bne.n	100407b2 <__lesf2+0x32>
1004080a:	e7f5      	b.n	100407f8 <__lesf2+0x78>
1004080c:	2000      	movs	r0, #0
1004080e:	428b      	cmp	r3, r1
10040810:	d0e5      	beq.n	100407de <__lesf2+0x5e>
10040812:	e7ce      	b.n	100407b2 <__lesf2+0x32>
10040814:	2001      	movs	r0, #1
10040816:	4240      	negs	r0, r0
10040818:	e7e1      	b.n	100407de <__lesf2+0x5e>
1004081a:	46c0      	nop			@ (mov r8, r8)

1004081c <__aeabi_fmul>:
1004081c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004081e:	464f      	mov	r7, r9
10040820:	4646      	mov	r6, r8
10040822:	46d6      	mov	lr, sl
10040824:	0243      	lsls	r3, r0, #9
10040826:	0a5b      	lsrs	r3, r3, #9
10040828:	0045      	lsls	r5, r0, #1
1004082a:	b5c0      	push	{r6, r7, lr}
1004082c:	4699      	mov	r9, r3
1004082e:	1c0f      	adds	r7, r1, #0
10040830:	0e2d      	lsrs	r5, r5, #24
10040832:	0fc6      	lsrs	r6, r0, #31
10040834:	2d00      	cmp	r5, #0
10040836:	d100      	bne.n	1004083a <__aeabi_fmul+0x1e>
10040838:	e088      	b.n	1004094c <__aeabi_fmul+0x130>
1004083a:	2dff      	cmp	r5, #255	@ 0xff
1004083c:	d100      	bne.n	10040840 <__aeabi_fmul+0x24>
1004083e:	e08d      	b.n	1004095c <__aeabi_fmul+0x140>
10040840:	2280      	movs	r2, #128	@ 0x80
10040842:	00db      	lsls	r3, r3, #3
10040844:	04d2      	lsls	r2, r2, #19
10040846:	431a      	orrs	r2, r3
10040848:	2300      	movs	r3, #0
1004084a:	4691      	mov	r9, r2
1004084c:	4698      	mov	r8, r3
1004084e:	469a      	mov	sl, r3
10040850:	3d7f      	subs	r5, #127	@ 0x7f
10040852:	027c      	lsls	r4, r7, #9
10040854:	007b      	lsls	r3, r7, #1
10040856:	0a64      	lsrs	r4, r4, #9
10040858:	0e1b      	lsrs	r3, r3, #24
1004085a:	0fff      	lsrs	r7, r7, #31
1004085c:	2b00      	cmp	r3, #0
1004085e:	d068      	beq.n	10040932 <__aeabi_fmul+0x116>
10040860:	2bff      	cmp	r3, #255	@ 0xff
10040862:	d021      	beq.n	100408a8 <__aeabi_fmul+0x8c>
10040864:	2280      	movs	r2, #128	@ 0x80
10040866:	00e4      	lsls	r4, r4, #3
10040868:	04d2      	lsls	r2, r2, #19
1004086a:	4314      	orrs	r4, r2
1004086c:	4642      	mov	r2, r8
1004086e:	3b7f      	subs	r3, #127	@ 0x7f
10040870:	195b      	adds	r3, r3, r5
10040872:	2100      	movs	r1, #0
10040874:	1c5d      	adds	r5, r3, #1
10040876:	2a0a      	cmp	r2, #10
10040878:	dc2e      	bgt.n	100408d8 <__aeabi_fmul+0xbc>
1004087a:	407e      	eors	r6, r7
1004087c:	4642      	mov	r2, r8
1004087e:	2a02      	cmp	r2, #2
10040880:	dc23      	bgt.n	100408ca <__aeabi_fmul+0xae>
10040882:	3a01      	subs	r2, #1
10040884:	2a01      	cmp	r2, #1
10040886:	d900      	bls.n	1004088a <__aeabi_fmul+0x6e>
10040888:	e0bd      	b.n	10040a06 <__aeabi_fmul+0x1ea>
1004088a:	2902      	cmp	r1, #2
1004088c:	d06e      	beq.n	1004096c <__aeabi_fmul+0x150>
1004088e:	2901      	cmp	r1, #1
10040890:	d12c      	bne.n	100408ec <__aeabi_fmul+0xd0>
10040892:	2000      	movs	r0, #0
10040894:	2200      	movs	r2, #0
10040896:	05c0      	lsls	r0, r0, #23
10040898:	07f6      	lsls	r6, r6, #31
1004089a:	4310      	orrs	r0, r2
1004089c:	4330      	orrs	r0, r6
1004089e:	bce0      	pop	{r5, r6, r7}
100408a0:	46ba      	mov	sl, r7
100408a2:	46b1      	mov	r9, r6
100408a4:	46a8      	mov	r8, r5
100408a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100408a8:	002b      	movs	r3, r5
100408aa:	33ff      	adds	r3, #255	@ 0xff
100408ac:	2c00      	cmp	r4, #0
100408ae:	d065      	beq.n	1004097c <__aeabi_fmul+0x160>
100408b0:	2203      	movs	r2, #3
100408b2:	4641      	mov	r1, r8
100408b4:	4311      	orrs	r1, r2
100408b6:	0032      	movs	r2, r6
100408b8:	3501      	adds	r5, #1
100408ba:	4688      	mov	r8, r1
100408bc:	407a      	eors	r2, r7
100408be:	35ff      	adds	r5, #255	@ 0xff
100408c0:	290a      	cmp	r1, #10
100408c2:	dd00      	ble.n	100408c6 <__aeabi_fmul+0xaa>
100408c4:	e0d8      	b.n	10040a78 <__aeabi_fmul+0x25c>
100408c6:	0016      	movs	r6, r2
100408c8:	2103      	movs	r1, #3
100408ca:	4640      	mov	r0, r8
100408cc:	2201      	movs	r2, #1
100408ce:	4082      	lsls	r2, r0
100408d0:	20a6      	movs	r0, #166	@ 0xa6
100408d2:	00c0      	lsls	r0, r0, #3
100408d4:	4202      	tst	r2, r0
100408d6:	d020      	beq.n	1004091a <__aeabi_fmul+0xfe>
100408d8:	4653      	mov	r3, sl
100408da:	2b02      	cmp	r3, #2
100408dc:	d046      	beq.n	1004096c <__aeabi_fmul+0x150>
100408de:	2b03      	cmp	r3, #3
100408e0:	d100      	bne.n	100408e4 <__aeabi_fmul+0xc8>
100408e2:	e0bb      	b.n	10040a5c <__aeabi_fmul+0x240>
100408e4:	4651      	mov	r1, sl
100408e6:	464c      	mov	r4, r9
100408e8:	2901      	cmp	r1, #1
100408ea:	d0d2      	beq.n	10040892 <__aeabi_fmul+0x76>
100408ec:	002b      	movs	r3, r5
100408ee:	337f      	adds	r3, #127	@ 0x7f
100408f0:	2b00      	cmp	r3, #0
100408f2:	dd70      	ble.n	100409d6 <__aeabi_fmul+0x1ba>
100408f4:	0762      	lsls	r2, r4, #29
100408f6:	d004      	beq.n	10040902 <__aeabi_fmul+0xe6>
100408f8:	220f      	movs	r2, #15
100408fa:	4022      	ands	r2, r4
100408fc:	2a04      	cmp	r2, #4
100408fe:	d000      	beq.n	10040902 <__aeabi_fmul+0xe6>
10040900:	3404      	adds	r4, #4
10040902:	0122      	lsls	r2, r4, #4
10040904:	d503      	bpl.n	1004090e <__aeabi_fmul+0xf2>
10040906:	4b63      	ldr	r3, [pc, #396]	@ (10040a94 <__aeabi_fmul+0x278>)
10040908:	401c      	ands	r4, r3
1004090a:	002b      	movs	r3, r5
1004090c:	3380      	adds	r3, #128	@ 0x80
1004090e:	2bfe      	cmp	r3, #254	@ 0xfe
10040910:	dc2c      	bgt.n	1004096c <__aeabi_fmul+0x150>
10040912:	01a2      	lsls	r2, r4, #6
10040914:	0a52      	lsrs	r2, r2, #9
10040916:	b2d8      	uxtb	r0, r3
10040918:	e7bd      	b.n	10040896 <__aeabi_fmul+0x7a>
1004091a:	2090      	movs	r0, #144	@ 0x90
1004091c:	0080      	lsls	r0, r0, #2
1004091e:	4202      	tst	r2, r0
10040920:	d127      	bne.n	10040972 <__aeabi_fmul+0x156>
10040922:	38b9      	subs	r0, #185	@ 0xb9
10040924:	38ff      	subs	r0, #255	@ 0xff
10040926:	4210      	tst	r0, r2
10040928:	d06d      	beq.n	10040a06 <__aeabi_fmul+0x1ea>
1004092a:	003e      	movs	r6, r7
1004092c:	46a1      	mov	r9, r4
1004092e:	468a      	mov	sl, r1
10040930:	e7d2      	b.n	100408d8 <__aeabi_fmul+0xbc>
10040932:	2c00      	cmp	r4, #0
10040934:	d141      	bne.n	100409ba <__aeabi_fmul+0x19e>
10040936:	2301      	movs	r3, #1
10040938:	4642      	mov	r2, r8
1004093a:	431a      	orrs	r2, r3
1004093c:	4690      	mov	r8, r2
1004093e:	002b      	movs	r3, r5
10040940:	4642      	mov	r2, r8
10040942:	2101      	movs	r1, #1
10040944:	1c5d      	adds	r5, r3, #1
10040946:	2a0a      	cmp	r2, #10
10040948:	dd97      	ble.n	1004087a <__aeabi_fmul+0x5e>
1004094a:	e7c5      	b.n	100408d8 <__aeabi_fmul+0xbc>
1004094c:	2b00      	cmp	r3, #0
1004094e:	d126      	bne.n	1004099e <__aeabi_fmul+0x182>
10040950:	2304      	movs	r3, #4
10040952:	4698      	mov	r8, r3
10040954:	3b03      	subs	r3, #3
10040956:	2500      	movs	r5, #0
10040958:	469a      	mov	sl, r3
1004095a:	e77a      	b.n	10040852 <__aeabi_fmul+0x36>
1004095c:	2b00      	cmp	r3, #0
1004095e:	d118      	bne.n	10040992 <__aeabi_fmul+0x176>
10040960:	2308      	movs	r3, #8
10040962:	4698      	mov	r8, r3
10040964:	3b06      	subs	r3, #6
10040966:	25ff      	movs	r5, #255	@ 0xff
10040968:	469a      	mov	sl, r3
1004096a:	e772      	b.n	10040852 <__aeabi_fmul+0x36>
1004096c:	20ff      	movs	r0, #255	@ 0xff
1004096e:	2200      	movs	r2, #0
10040970:	e791      	b.n	10040896 <__aeabi_fmul+0x7a>
10040972:	2280      	movs	r2, #128	@ 0x80
10040974:	2600      	movs	r6, #0
10040976:	20ff      	movs	r0, #255	@ 0xff
10040978:	03d2      	lsls	r2, r2, #15
1004097a:	e78c      	b.n	10040896 <__aeabi_fmul+0x7a>
1004097c:	4641      	mov	r1, r8
1004097e:	2202      	movs	r2, #2
10040980:	3501      	adds	r5, #1
10040982:	4311      	orrs	r1, r2
10040984:	4688      	mov	r8, r1
10040986:	35ff      	adds	r5, #255	@ 0xff
10040988:	290a      	cmp	r1, #10
1004098a:	dca5      	bgt.n	100408d8 <__aeabi_fmul+0xbc>
1004098c:	2102      	movs	r1, #2
1004098e:	407e      	eors	r6, r7
10040990:	e774      	b.n	1004087c <__aeabi_fmul+0x60>
10040992:	230c      	movs	r3, #12
10040994:	4698      	mov	r8, r3
10040996:	3b09      	subs	r3, #9
10040998:	25ff      	movs	r5, #255	@ 0xff
1004099a:	469a      	mov	sl, r3
1004099c:	e759      	b.n	10040852 <__aeabi_fmul+0x36>
1004099e:	0018      	movs	r0, r3
100409a0:	f000 facc 	bl	10040f3c <__clzsi2>
100409a4:	464a      	mov	r2, r9
100409a6:	1f43      	subs	r3, r0, #5
100409a8:	2576      	movs	r5, #118	@ 0x76
100409aa:	409a      	lsls	r2, r3
100409ac:	2300      	movs	r3, #0
100409ae:	426d      	negs	r5, r5
100409b0:	4691      	mov	r9, r2
100409b2:	4698      	mov	r8, r3
100409b4:	469a      	mov	sl, r3
100409b6:	1a2d      	subs	r5, r5, r0
100409b8:	e74b      	b.n	10040852 <__aeabi_fmul+0x36>
100409ba:	0020      	movs	r0, r4
100409bc:	f000 fabe 	bl	10040f3c <__clzsi2>
100409c0:	4642      	mov	r2, r8
100409c2:	1f43      	subs	r3, r0, #5
100409c4:	409c      	lsls	r4, r3
100409c6:	1a2b      	subs	r3, r5, r0
100409c8:	3b76      	subs	r3, #118	@ 0x76
100409ca:	2100      	movs	r1, #0
100409cc:	1c5d      	adds	r5, r3, #1
100409ce:	2a0a      	cmp	r2, #10
100409d0:	dc00      	bgt.n	100409d4 <__aeabi_fmul+0x1b8>
100409d2:	e752      	b.n	1004087a <__aeabi_fmul+0x5e>
100409d4:	e780      	b.n	100408d8 <__aeabi_fmul+0xbc>
100409d6:	2201      	movs	r2, #1
100409d8:	1ad3      	subs	r3, r2, r3
100409da:	2b1b      	cmp	r3, #27
100409dc:	dd00      	ble.n	100409e0 <__aeabi_fmul+0x1c4>
100409de:	e758      	b.n	10040892 <__aeabi_fmul+0x76>
100409e0:	359e      	adds	r5, #158	@ 0x9e
100409e2:	0022      	movs	r2, r4
100409e4:	40ac      	lsls	r4, r5
100409e6:	40da      	lsrs	r2, r3
100409e8:	1e63      	subs	r3, r4, #1
100409ea:	419c      	sbcs	r4, r3
100409ec:	4322      	orrs	r2, r4
100409ee:	0753      	lsls	r3, r2, #29
100409f0:	d004      	beq.n	100409fc <__aeabi_fmul+0x1e0>
100409f2:	230f      	movs	r3, #15
100409f4:	4013      	ands	r3, r2
100409f6:	2b04      	cmp	r3, #4
100409f8:	d000      	beq.n	100409fc <__aeabi_fmul+0x1e0>
100409fa:	3204      	adds	r2, #4
100409fc:	0153      	lsls	r3, r2, #5
100409fe:	d537      	bpl.n	10040a70 <__aeabi_fmul+0x254>
10040a00:	2001      	movs	r0, #1
10040a02:	2200      	movs	r2, #0
10040a04:	e747      	b.n	10040896 <__aeabi_fmul+0x7a>
10040a06:	0c21      	lsrs	r1, r4, #16
10040a08:	464a      	mov	r2, r9
10040a0a:	0424      	lsls	r4, r4, #16
10040a0c:	0c24      	lsrs	r4, r4, #16
10040a0e:	0027      	movs	r7, r4
10040a10:	0c10      	lsrs	r0, r2, #16
10040a12:	0412      	lsls	r2, r2, #16
10040a14:	0c12      	lsrs	r2, r2, #16
10040a16:	4344      	muls	r4, r0
10040a18:	4357      	muls	r7, r2
10040a1a:	4348      	muls	r0, r1
10040a1c:	4351      	muls	r1, r2
10040a1e:	0c3a      	lsrs	r2, r7, #16
10040a20:	1909      	adds	r1, r1, r4
10040a22:	1852      	adds	r2, r2, r1
10040a24:	4294      	cmp	r4, r2
10040a26:	d903      	bls.n	10040a30 <__aeabi_fmul+0x214>
10040a28:	2180      	movs	r1, #128	@ 0x80
10040a2a:	0249      	lsls	r1, r1, #9
10040a2c:	468c      	mov	ip, r1
10040a2e:	4460      	add	r0, ip
10040a30:	043f      	lsls	r7, r7, #16
10040a32:	0411      	lsls	r1, r2, #16
10040a34:	0c3f      	lsrs	r7, r7, #16
10040a36:	19c9      	adds	r1, r1, r7
10040a38:	018c      	lsls	r4, r1, #6
10040a3a:	1e67      	subs	r7, r4, #1
10040a3c:	41bc      	sbcs	r4, r7
10040a3e:	0c12      	lsrs	r2, r2, #16
10040a40:	0e89      	lsrs	r1, r1, #26
10040a42:	1812      	adds	r2, r2, r0
10040a44:	430c      	orrs	r4, r1
10040a46:	0192      	lsls	r2, r2, #6
10040a48:	4314      	orrs	r4, r2
10040a4a:	0112      	lsls	r2, r2, #4
10040a4c:	d50e      	bpl.n	10040a6c <__aeabi_fmul+0x250>
10040a4e:	2301      	movs	r3, #1
10040a50:	0862      	lsrs	r2, r4, #1
10040a52:	401c      	ands	r4, r3
10040a54:	4314      	orrs	r4, r2
10040a56:	e749      	b.n	100408ec <__aeabi_fmul+0xd0>
10040a58:	003e      	movs	r6, r7
10040a5a:	46a1      	mov	r9, r4
10040a5c:	2280      	movs	r2, #128	@ 0x80
10040a5e:	464b      	mov	r3, r9
10040a60:	03d2      	lsls	r2, r2, #15
10040a62:	431a      	orrs	r2, r3
10040a64:	0252      	lsls	r2, r2, #9
10040a66:	20ff      	movs	r0, #255	@ 0xff
10040a68:	0a52      	lsrs	r2, r2, #9
10040a6a:	e714      	b.n	10040896 <__aeabi_fmul+0x7a>
10040a6c:	001d      	movs	r5, r3
10040a6e:	e73d      	b.n	100408ec <__aeabi_fmul+0xd0>
10040a70:	0192      	lsls	r2, r2, #6
10040a72:	2000      	movs	r0, #0
10040a74:	0a52      	lsrs	r2, r2, #9
10040a76:	e70e      	b.n	10040896 <__aeabi_fmul+0x7a>
10040a78:	290f      	cmp	r1, #15
10040a7a:	d1ed      	bne.n	10040a58 <__aeabi_fmul+0x23c>
10040a7c:	2280      	movs	r2, #128	@ 0x80
10040a7e:	464b      	mov	r3, r9
10040a80:	03d2      	lsls	r2, r2, #15
10040a82:	4213      	tst	r3, r2
10040a84:	d0ea      	beq.n	10040a5c <__aeabi_fmul+0x240>
10040a86:	4214      	tst	r4, r2
10040a88:	d1e8      	bne.n	10040a5c <__aeabi_fmul+0x240>
10040a8a:	003e      	movs	r6, r7
10040a8c:	20ff      	movs	r0, #255	@ 0xff
10040a8e:	4322      	orrs	r2, r4
10040a90:	e701      	b.n	10040896 <__aeabi_fmul+0x7a>
10040a92:	46c0      	nop			@ (mov r8, r8)
10040a94:	f7ffffff 	.word	0xf7ffffff

10040a98 <__aeabi_fsub>:
10040a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10040a9a:	4647      	mov	r7, r8
10040a9c:	46ce      	mov	lr, r9
10040a9e:	024e      	lsls	r6, r1, #9
10040aa0:	0243      	lsls	r3, r0, #9
10040aa2:	0045      	lsls	r5, r0, #1
10040aa4:	0a72      	lsrs	r2, r6, #9
10040aa6:	0fc4      	lsrs	r4, r0, #31
10040aa8:	0048      	lsls	r0, r1, #1
10040aaa:	b580      	push	{r7, lr}
10040aac:	4694      	mov	ip, r2
10040aae:	0a5f      	lsrs	r7, r3, #9
10040ab0:	0e2d      	lsrs	r5, r5, #24
10040ab2:	099b      	lsrs	r3, r3, #6
10040ab4:	0e00      	lsrs	r0, r0, #24
10040ab6:	0fc9      	lsrs	r1, r1, #31
10040ab8:	09b6      	lsrs	r6, r6, #6
10040aba:	28ff      	cmp	r0, #255	@ 0xff
10040abc:	d024      	beq.n	10040b08 <__aeabi_fsub+0x70>
10040abe:	2201      	movs	r2, #1
10040ac0:	4051      	eors	r1, r2
10040ac2:	1a2a      	subs	r2, r5, r0
10040ac4:	428c      	cmp	r4, r1
10040ac6:	d00f      	beq.n	10040ae8 <__aeabi_fsub+0x50>
10040ac8:	2a00      	cmp	r2, #0
10040aca:	dc00      	bgt.n	10040ace <__aeabi_fsub+0x36>
10040acc:	e16a      	b.n	10040da4 <__aeabi_fsub+0x30c>
10040ace:	2800      	cmp	r0, #0
10040ad0:	d135      	bne.n	10040b3e <__aeabi_fsub+0xa6>
10040ad2:	2e00      	cmp	r6, #0
10040ad4:	d100      	bne.n	10040ad8 <__aeabi_fsub+0x40>
10040ad6:	e0a2      	b.n	10040c1e <__aeabi_fsub+0x186>
10040ad8:	1e51      	subs	r1, r2, #1
10040ada:	2a01      	cmp	r2, #1
10040adc:	d100      	bne.n	10040ae0 <__aeabi_fsub+0x48>
10040ade:	e124      	b.n	10040d2a <__aeabi_fsub+0x292>
10040ae0:	2aff      	cmp	r2, #255	@ 0xff
10040ae2:	d021      	beq.n	10040b28 <__aeabi_fsub+0x90>
10040ae4:	000a      	movs	r2, r1
10040ae6:	e02f      	b.n	10040b48 <__aeabi_fsub+0xb0>
10040ae8:	2a00      	cmp	r2, #0
10040aea:	dc00      	bgt.n	10040aee <__aeabi_fsub+0x56>
10040aec:	e167      	b.n	10040dbe <__aeabi_fsub+0x326>
10040aee:	2800      	cmp	r0, #0
10040af0:	d05e      	beq.n	10040bb0 <__aeabi_fsub+0x118>
10040af2:	2dff      	cmp	r5, #255	@ 0xff
10040af4:	d018      	beq.n	10040b28 <__aeabi_fsub+0x90>
10040af6:	2180      	movs	r1, #128	@ 0x80
10040af8:	04c9      	lsls	r1, r1, #19
10040afa:	430e      	orrs	r6, r1
10040afc:	2a1b      	cmp	r2, #27
10040afe:	dc00      	bgt.n	10040b02 <__aeabi_fsub+0x6a>
10040b00:	e076      	b.n	10040bf0 <__aeabi_fsub+0x158>
10040b02:	002a      	movs	r2, r5
10040b04:	3301      	adds	r3, #1
10040b06:	e032      	b.n	10040b6e <__aeabi_fsub+0xd6>
10040b08:	002a      	movs	r2, r5
10040b0a:	3aff      	subs	r2, #255	@ 0xff
10040b0c:	4691      	mov	r9, r2
10040b0e:	2e00      	cmp	r6, #0
10040b10:	d042      	beq.n	10040b98 <__aeabi_fsub+0x100>
10040b12:	428c      	cmp	r4, r1
10040b14:	d055      	beq.n	10040bc2 <__aeabi_fsub+0x12a>
10040b16:	464a      	mov	r2, r9
10040b18:	2a00      	cmp	r2, #0
10040b1a:	d100      	bne.n	10040b1e <__aeabi_fsub+0x86>
10040b1c:	e09c      	b.n	10040c58 <__aeabi_fsub+0x1c0>
10040b1e:	2d00      	cmp	r5, #0
10040b20:	d100      	bne.n	10040b24 <__aeabi_fsub+0x8c>
10040b22:	e077      	b.n	10040c14 <__aeabi_fsub+0x17c>
10040b24:	000c      	movs	r4, r1
10040b26:	0033      	movs	r3, r6
10040b28:	08db      	lsrs	r3, r3, #3
10040b2a:	2b00      	cmp	r3, #0
10040b2c:	d100      	bne.n	10040b30 <__aeabi_fsub+0x98>
10040b2e:	e06e      	b.n	10040c0e <__aeabi_fsub+0x176>
10040b30:	2280      	movs	r2, #128	@ 0x80
10040b32:	03d2      	lsls	r2, r2, #15
10040b34:	4313      	orrs	r3, r2
10040b36:	025b      	lsls	r3, r3, #9
10040b38:	20ff      	movs	r0, #255	@ 0xff
10040b3a:	0a5b      	lsrs	r3, r3, #9
10040b3c:	e024      	b.n	10040b88 <__aeabi_fsub+0xf0>
10040b3e:	2dff      	cmp	r5, #255	@ 0xff
10040b40:	d0f2      	beq.n	10040b28 <__aeabi_fsub+0x90>
10040b42:	2180      	movs	r1, #128	@ 0x80
10040b44:	04c9      	lsls	r1, r1, #19
10040b46:	430e      	orrs	r6, r1
10040b48:	2101      	movs	r1, #1
10040b4a:	2a1b      	cmp	r2, #27
10040b4c:	dc08      	bgt.n	10040b60 <__aeabi_fsub+0xc8>
10040b4e:	0031      	movs	r1, r6
10040b50:	2020      	movs	r0, #32
10040b52:	40d1      	lsrs	r1, r2
10040b54:	1a82      	subs	r2, r0, r2
10040b56:	4096      	lsls	r6, r2
10040b58:	0032      	movs	r2, r6
10040b5a:	1e50      	subs	r0, r2, #1
10040b5c:	4182      	sbcs	r2, r0
10040b5e:	4311      	orrs	r1, r2
10040b60:	1a5b      	subs	r3, r3, r1
10040b62:	015a      	lsls	r2, r3, #5
10040b64:	d460      	bmi.n	10040c28 <__aeabi_fsub+0x190>
10040b66:	2107      	movs	r1, #7
10040b68:	002a      	movs	r2, r5
10040b6a:	4019      	ands	r1, r3
10040b6c:	d057      	beq.n	10040c1e <__aeabi_fsub+0x186>
10040b6e:	210f      	movs	r1, #15
10040b70:	4019      	ands	r1, r3
10040b72:	2904      	cmp	r1, #4
10040b74:	d000      	beq.n	10040b78 <__aeabi_fsub+0xe0>
10040b76:	3304      	adds	r3, #4
10040b78:	0159      	lsls	r1, r3, #5
10040b7a:	d550      	bpl.n	10040c1e <__aeabi_fsub+0x186>
10040b7c:	1c50      	adds	r0, r2, #1
10040b7e:	2afe      	cmp	r2, #254	@ 0xfe
10040b80:	d045      	beq.n	10040c0e <__aeabi_fsub+0x176>
10040b82:	019b      	lsls	r3, r3, #6
10040b84:	b2c0      	uxtb	r0, r0
10040b86:	0a5b      	lsrs	r3, r3, #9
10040b88:	05c0      	lsls	r0, r0, #23
10040b8a:	4318      	orrs	r0, r3
10040b8c:	07e4      	lsls	r4, r4, #31
10040b8e:	4320      	orrs	r0, r4
10040b90:	bcc0      	pop	{r6, r7}
10040b92:	46b9      	mov	r9, r7
10040b94:	46b0      	mov	r8, r6
10040b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10040b98:	2201      	movs	r2, #1
10040b9a:	4051      	eors	r1, r2
10040b9c:	428c      	cmp	r4, r1
10040b9e:	d1ba      	bne.n	10040b16 <__aeabi_fsub+0x7e>
10040ba0:	464a      	mov	r2, r9
10040ba2:	2a00      	cmp	r2, #0
10040ba4:	d010      	beq.n	10040bc8 <__aeabi_fsub+0x130>
10040ba6:	2d00      	cmp	r5, #0
10040ba8:	d100      	bne.n	10040bac <__aeabi_fsub+0x114>
10040baa:	e098      	b.n	10040cde <__aeabi_fsub+0x246>
10040bac:	2300      	movs	r3, #0
10040bae:	e7bb      	b.n	10040b28 <__aeabi_fsub+0x90>
10040bb0:	2e00      	cmp	r6, #0
10040bb2:	d034      	beq.n	10040c1e <__aeabi_fsub+0x186>
10040bb4:	1e51      	subs	r1, r2, #1
10040bb6:	2a01      	cmp	r2, #1
10040bb8:	d06e      	beq.n	10040c98 <__aeabi_fsub+0x200>
10040bba:	2aff      	cmp	r2, #255	@ 0xff
10040bbc:	d0b4      	beq.n	10040b28 <__aeabi_fsub+0x90>
10040bbe:	000a      	movs	r2, r1
10040bc0:	e79c      	b.n	10040afc <__aeabi_fsub+0x64>
10040bc2:	2a00      	cmp	r2, #0
10040bc4:	d000      	beq.n	10040bc8 <__aeabi_fsub+0x130>
10040bc6:	e088      	b.n	10040cda <__aeabi_fsub+0x242>
10040bc8:	20fe      	movs	r0, #254	@ 0xfe
10040bca:	1c6a      	adds	r2, r5, #1
10040bcc:	4210      	tst	r0, r2
10040bce:	d000      	beq.n	10040bd2 <__aeabi_fsub+0x13a>
10040bd0:	e092      	b.n	10040cf8 <__aeabi_fsub+0x260>
10040bd2:	2d00      	cmp	r5, #0
10040bd4:	d000      	beq.n	10040bd8 <__aeabi_fsub+0x140>
10040bd6:	e0a4      	b.n	10040d22 <__aeabi_fsub+0x28a>
10040bd8:	2b00      	cmp	r3, #0
10040bda:	d100      	bne.n	10040bde <__aeabi_fsub+0x146>
10040bdc:	e0cb      	b.n	10040d76 <__aeabi_fsub+0x2de>
10040bde:	2e00      	cmp	r6, #0
10040be0:	d000      	beq.n	10040be4 <__aeabi_fsub+0x14c>
10040be2:	e0ca      	b.n	10040d7a <__aeabi_fsub+0x2e2>
10040be4:	2200      	movs	r2, #0
10040be6:	08db      	lsrs	r3, r3, #3
10040be8:	025b      	lsls	r3, r3, #9
10040bea:	0a5b      	lsrs	r3, r3, #9
10040bec:	b2d0      	uxtb	r0, r2
10040bee:	e7cb      	b.n	10040b88 <__aeabi_fsub+0xf0>
10040bf0:	0031      	movs	r1, r6
10040bf2:	2020      	movs	r0, #32
10040bf4:	40d1      	lsrs	r1, r2
10040bf6:	1a82      	subs	r2, r0, r2
10040bf8:	4096      	lsls	r6, r2
10040bfa:	0032      	movs	r2, r6
10040bfc:	1e50      	subs	r0, r2, #1
10040bfe:	4182      	sbcs	r2, r0
10040c00:	430a      	orrs	r2, r1
10040c02:	189b      	adds	r3, r3, r2
10040c04:	015a      	lsls	r2, r3, #5
10040c06:	d5ae      	bpl.n	10040b66 <__aeabi_fsub+0xce>
10040c08:	1c6a      	adds	r2, r5, #1
10040c0a:	2dfe      	cmp	r5, #254	@ 0xfe
10040c0c:	d14a      	bne.n	10040ca4 <__aeabi_fsub+0x20c>
10040c0e:	20ff      	movs	r0, #255	@ 0xff
10040c10:	2300      	movs	r3, #0
10040c12:	e7b9      	b.n	10040b88 <__aeabi_fsub+0xf0>
10040c14:	22ff      	movs	r2, #255	@ 0xff
10040c16:	2b00      	cmp	r3, #0
10040c18:	d14b      	bne.n	10040cb2 <__aeabi_fsub+0x21a>
10040c1a:	000c      	movs	r4, r1
10040c1c:	0033      	movs	r3, r6
10040c1e:	08db      	lsrs	r3, r3, #3
10040c20:	2aff      	cmp	r2, #255	@ 0xff
10040c22:	d100      	bne.n	10040c26 <__aeabi_fsub+0x18e>
10040c24:	e781      	b.n	10040b2a <__aeabi_fsub+0x92>
10040c26:	e7df      	b.n	10040be8 <__aeabi_fsub+0x150>
10040c28:	019f      	lsls	r7, r3, #6
10040c2a:	09bf      	lsrs	r7, r7, #6
10040c2c:	0038      	movs	r0, r7
10040c2e:	f000 f985 	bl	10040f3c <__clzsi2>
10040c32:	3805      	subs	r0, #5
10040c34:	4087      	lsls	r7, r0
10040c36:	4285      	cmp	r5, r0
10040c38:	dc21      	bgt.n	10040c7e <__aeabi_fsub+0x1e6>
10040c3a:	003b      	movs	r3, r7
10040c3c:	2120      	movs	r1, #32
10040c3e:	1b42      	subs	r2, r0, r5
10040c40:	3201      	adds	r2, #1
10040c42:	40d3      	lsrs	r3, r2
10040c44:	1a8a      	subs	r2, r1, r2
10040c46:	4097      	lsls	r7, r2
10040c48:	1e7a      	subs	r2, r7, #1
10040c4a:	4197      	sbcs	r7, r2
10040c4c:	2200      	movs	r2, #0
10040c4e:	433b      	orrs	r3, r7
10040c50:	0759      	lsls	r1, r3, #29
10040c52:	d000      	beq.n	10040c56 <__aeabi_fsub+0x1be>
10040c54:	e78b      	b.n	10040b6e <__aeabi_fsub+0xd6>
10040c56:	e78f      	b.n	10040b78 <__aeabi_fsub+0xe0>
10040c58:	20fe      	movs	r0, #254	@ 0xfe
10040c5a:	1c6a      	adds	r2, r5, #1
10040c5c:	4210      	tst	r0, r2
10040c5e:	d112      	bne.n	10040c86 <__aeabi_fsub+0x1ee>
10040c60:	2d00      	cmp	r5, #0
10040c62:	d152      	bne.n	10040d0a <__aeabi_fsub+0x272>
10040c64:	2b00      	cmp	r3, #0
10040c66:	d07c      	beq.n	10040d62 <__aeabi_fsub+0x2ca>
10040c68:	2e00      	cmp	r6, #0
10040c6a:	d0bb      	beq.n	10040be4 <__aeabi_fsub+0x14c>
10040c6c:	1b9a      	subs	r2, r3, r6
10040c6e:	0150      	lsls	r0, r2, #5
10040c70:	d400      	bmi.n	10040c74 <__aeabi_fsub+0x1dc>
10040c72:	e08b      	b.n	10040d8c <__aeabi_fsub+0x2f4>
10040c74:	2401      	movs	r4, #1
10040c76:	2200      	movs	r2, #0
10040c78:	1af3      	subs	r3, r6, r3
10040c7a:	400c      	ands	r4, r1
10040c7c:	e7e8      	b.n	10040c50 <__aeabi_fsub+0x1b8>
10040c7e:	4b56      	ldr	r3, [pc, #344]	@ (10040dd8 <__aeabi_fsub+0x340>)
10040c80:	1a2a      	subs	r2, r5, r0
10040c82:	403b      	ands	r3, r7
10040c84:	e7e4      	b.n	10040c50 <__aeabi_fsub+0x1b8>
10040c86:	1b9f      	subs	r7, r3, r6
10040c88:	017a      	lsls	r2, r7, #5
10040c8a:	d446      	bmi.n	10040d1a <__aeabi_fsub+0x282>
10040c8c:	2f00      	cmp	r7, #0
10040c8e:	d1cd      	bne.n	10040c2c <__aeabi_fsub+0x194>
10040c90:	2400      	movs	r4, #0
10040c92:	2000      	movs	r0, #0
10040c94:	2300      	movs	r3, #0
10040c96:	e777      	b.n	10040b88 <__aeabi_fsub+0xf0>
10040c98:	199b      	adds	r3, r3, r6
10040c9a:	2501      	movs	r5, #1
10040c9c:	3201      	adds	r2, #1
10040c9e:	0159      	lsls	r1, r3, #5
10040ca0:	d400      	bmi.n	10040ca4 <__aeabi_fsub+0x20c>
10040ca2:	e760      	b.n	10040b66 <__aeabi_fsub+0xce>
10040ca4:	2101      	movs	r1, #1
10040ca6:	484d      	ldr	r0, [pc, #308]	@ (10040ddc <__aeabi_fsub+0x344>)
10040ca8:	4019      	ands	r1, r3
10040caa:	085b      	lsrs	r3, r3, #1
10040cac:	4003      	ands	r3, r0
10040cae:	430b      	orrs	r3, r1
10040cb0:	e7ce      	b.n	10040c50 <__aeabi_fsub+0x1b8>
10040cb2:	1e57      	subs	r7, r2, #1
10040cb4:	2a01      	cmp	r2, #1
10040cb6:	d05a      	beq.n	10040d6e <__aeabi_fsub+0x2d6>
10040cb8:	000c      	movs	r4, r1
10040cba:	2aff      	cmp	r2, #255	@ 0xff
10040cbc:	d033      	beq.n	10040d26 <__aeabi_fsub+0x28e>
10040cbe:	2201      	movs	r2, #1
10040cc0:	2f1b      	cmp	r7, #27
10040cc2:	dc07      	bgt.n	10040cd4 <__aeabi_fsub+0x23c>
10040cc4:	2120      	movs	r1, #32
10040cc6:	1bc9      	subs	r1, r1, r7
10040cc8:	001a      	movs	r2, r3
10040cca:	408b      	lsls	r3, r1
10040ccc:	40fa      	lsrs	r2, r7
10040cce:	1e59      	subs	r1, r3, #1
10040cd0:	418b      	sbcs	r3, r1
10040cd2:	431a      	orrs	r2, r3
10040cd4:	0005      	movs	r5, r0
10040cd6:	1ab3      	subs	r3, r6, r2
10040cd8:	e743      	b.n	10040b62 <__aeabi_fsub+0xca>
10040cda:	2d00      	cmp	r5, #0
10040cdc:	d123      	bne.n	10040d26 <__aeabi_fsub+0x28e>
10040cde:	22ff      	movs	r2, #255	@ 0xff
10040ce0:	2b00      	cmp	r3, #0
10040ce2:	d09b      	beq.n	10040c1c <__aeabi_fsub+0x184>
10040ce4:	1e51      	subs	r1, r2, #1
10040ce6:	2a01      	cmp	r2, #1
10040ce8:	d0d6      	beq.n	10040c98 <__aeabi_fsub+0x200>
10040cea:	2aff      	cmp	r2, #255	@ 0xff
10040cec:	d01b      	beq.n	10040d26 <__aeabi_fsub+0x28e>
10040cee:	291b      	cmp	r1, #27
10040cf0:	dd2c      	ble.n	10040d4c <__aeabi_fsub+0x2b4>
10040cf2:	0002      	movs	r2, r0
10040cf4:	1c73      	adds	r3, r6, #1
10040cf6:	e73a      	b.n	10040b6e <__aeabi_fsub+0xd6>
10040cf8:	2aff      	cmp	r2, #255	@ 0xff
10040cfa:	d088      	beq.n	10040c0e <__aeabi_fsub+0x176>
10040cfc:	199b      	adds	r3, r3, r6
10040cfe:	085b      	lsrs	r3, r3, #1
10040d00:	0759      	lsls	r1, r3, #29
10040d02:	d000      	beq.n	10040d06 <__aeabi_fsub+0x26e>
10040d04:	e733      	b.n	10040b6e <__aeabi_fsub+0xd6>
10040d06:	08db      	lsrs	r3, r3, #3
10040d08:	e76e      	b.n	10040be8 <__aeabi_fsub+0x150>
10040d0a:	2b00      	cmp	r3, #0
10040d0c:	d110      	bne.n	10040d30 <__aeabi_fsub+0x298>
10040d0e:	2e00      	cmp	r6, #0
10040d10:	d043      	beq.n	10040d9a <__aeabi_fsub+0x302>
10040d12:	2401      	movs	r4, #1
10040d14:	0033      	movs	r3, r6
10040d16:	400c      	ands	r4, r1
10040d18:	e706      	b.n	10040b28 <__aeabi_fsub+0x90>
10040d1a:	2401      	movs	r4, #1
10040d1c:	1af7      	subs	r7, r6, r3
10040d1e:	400c      	ands	r4, r1
10040d20:	e784      	b.n	10040c2c <__aeabi_fsub+0x194>
10040d22:	2b00      	cmp	r3, #0
10040d24:	d104      	bne.n	10040d30 <__aeabi_fsub+0x298>
10040d26:	0033      	movs	r3, r6
10040d28:	e6fe      	b.n	10040b28 <__aeabi_fsub+0x90>
10040d2a:	2501      	movs	r5, #1
10040d2c:	1b9b      	subs	r3, r3, r6
10040d2e:	e718      	b.n	10040b62 <__aeabi_fsub+0xca>
10040d30:	2e00      	cmp	r6, #0
10040d32:	d100      	bne.n	10040d36 <__aeabi_fsub+0x29e>
10040d34:	e6f8      	b.n	10040b28 <__aeabi_fsub+0x90>
10040d36:	2280      	movs	r2, #128	@ 0x80
10040d38:	03d2      	lsls	r2, r2, #15
10040d3a:	4297      	cmp	r7, r2
10040d3c:	d304      	bcc.n	10040d48 <__aeabi_fsub+0x2b0>
10040d3e:	4594      	cmp	ip, r2
10040d40:	d202      	bcs.n	10040d48 <__aeabi_fsub+0x2b0>
10040d42:	2401      	movs	r4, #1
10040d44:	0033      	movs	r3, r6
10040d46:	400c      	ands	r4, r1
10040d48:	08db      	lsrs	r3, r3, #3
10040d4a:	e6f1      	b.n	10040b30 <__aeabi_fsub+0x98>
10040d4c:	001a      	movs	r2, r3
10040d4e:	2520      	movs	r5, #32
10040d50:	40ca      	lsrs	r2, r1
10040d52:	1a69      	subs	r1, r5, r1
10040d54:	408b      	lsls	r3, r1
10040d56:	1e59      	subs	r1, r3, #1
10040d58:	418b      	sbcs	r3, r1
10040d5a:	4313      	orrs	r3, r2
10040d5c:	0005      	movs	r5, r0
10040d5e:	199b      	adds	r3, r3, r6
10040d60:	e750      	b.n	10040c04 <__aeabi_fsub+0x16c>
10040d62:	2e00      	cmp	r6, #0
10040d64:	d094      	beq.n	10040c90 <__aeabi_fsub+0x1f8>
10040d66:	2401      	movs	r4, #1
10040d68:	0033      	movs	r3, r6
10040d6a:	400c      	ands	r4, r1
10040d6c:	e73a      	b.n	10040be4 <__aeabi_fsub+0x14c>
10040d6e:	000c      	movs	r4, r1
10040d70:	2501      	movs	r5, #1
10040d72:	1af3      	subs	r3, r6, r3
10040d74:	e6f5      	b.n	10040b62 <__aeabi_fsub+0xca>
10040d76:	0033      	movs	r3, r6
10040d78:	e734      	b.n	10040be4 <__aeabi_fsub+0x14c>
10040d7a:	199b      	adds	r3, r3, r6
10040d7c:	2200      	movs	r2, #0
10040d7e:	0159      	lsls	r1, r3, #5
10040d80:	d5c1      	bpl.n	10040d06 <__aeabi_fsub+0x26e>
10040d82:	4a15      	ldr	r2, [pc, #84]	@ (10040dd8 <__aeabi_fsub+0x340>)
10040d84:	4013      	ands	r3, r2
10040d86:	08db      	lsrs	r3, r3, #3
10040d88:	2201      	movs	r2, #1
10040d8a:	e72d      	b.n	10040be8 <__aeabi_fsub+0x150>
10040d8c:	2a00      	cmp	r2, #0
10040d8e:	d100      	bne.n	10040d92 <__aeabi_fsub+0x2fa>
10040d90:	e77e      	b.n	10040c90 <__aeabi_fsub+0x1f8>
10040d92:	0013      	movs	r3, r2
10040d94:	2200      	movs	r2, #0
10040d96:	08db      	lsrs	r3, r3, #3
10040d98:	e726      	b.n	10040be8 <__aeabi_fsub+0x150>
10040d9a:	2380      	movs	r3, #128	@ 0x80
10040d9c:	2400      	movs	r4, #0
10040d9e:	20ff      	movs	r0, #255	@ 0xff
10040da0:	03db      	lsls	r3, r3, #15
10040da2:	e6f1      	b.n	10040b88 <__aeabi_fsub+0xf0>
10040da4:	2a00      	cmp	r2, #0
10040da6:	d100      	bne.n	10040daa <__aeabi_fsub+0x312>
10040da8:	e756      	b.n	10040c58 <__aeabi_fsub+0x1c0>
10040daa:	1b47      	subs	r7, r0, r5
10040dac:	003a      	movs	r2, r7
10040dae:	2d00      	cmp	r5, #0
10040db0:	d100      	bne.n	10040db4 <__aeabi_fsub+0x31c>
10040db2:	e730      	b.n	10040c16 <__aeabi_fsub+0x17e>
10040db4:	2280      	movs	r2, #128	@ 0x80
10040db6:	04d2      	lsls	r2, r2, #19
10040db8:	000c      	movs	r4, r1
10040dba:	4313      	orrs	r3, r2
10040dbc:	e77f      	b.n	10040cbe <__aeabi_fsub+0x226>
10040dbe:	2a00      	cmp	r2, #0
10040dc0:	d100      	bne.n	10040dc4 <__aeabi_fsub+0x32c>
10040dc2:	e701      	b.n	10040bc8 <__aeabi_fsub+0x130>
10040dc4:	1b41      	subs	r1, r0, r5
10040dc6:	2d00      	cmp	r5, #0
10040dc8:	d101      	bne.n	10040dce <__aeabi_fsub+0x336>
10040dca:	000a      	movs	r2, r1
10040dcc:	e788      	b.n	10040ce0 <__aeabi_fsub+0x248>
10040dce:	2280      	movs	r2, #128	@ 0x80
10040dd0:	04d2      	lsls	r2, r2, #19
10040dd2:	4313      	orrs	r3, r2
10040dd4:	e78b      	b.n	10040cee <__aeabi_fsub+0x256>
10040dd6:	46c0      	nop			@ (mov r8, r8)
10040dd8:	fbffffff 	.word	0xfbffffff
10040ddc:	7dffffff 	.word	0x7dffffff

10040de0 <__aeabi_f2iz>:
10040de0:	0241      	lsls	r1, r0, #9
10040de2:	0042      	lsls	r2, r0, #1
10040de4:	0fc3      	lsrs	r3, r0, #31
10040de6:	0a49      	lsrs	r1, r1, #9
10040de8:	2000      	movs	r0, #0
10040dea:	0e12      	lsrs	r2, r2, #24
10040dec:	2a7e      	cmp	r2, #126	@ 0x7e
10040dee:	dd03      	ble.n	10040df8 <__aeabi_f2iz+0x18>
10040df0:	2a9d      	cmp	r2, #157	@ 0x9d
10040df2:	dd02      	ble.n	10040dfa <__aeabi_f2iz+0x1a>
10040df4:	4a09      	ldr	r2, [pc, #36]	@ (10040e1c <__aeabi_f2iz+0x3c>)
10040df6:	1898      	adds	r0, r3, r2
10040df8:	4770      	bx	lr
10040dfa:	2080      	movs	r0, #128	@ 0x80
10040dfc:	0400      	lsls	r0, r0, #16
10040dfe:	4301      	orrs	r1, r0
10040e00:	2a95      	cmp	r2, #149	@ 0x95
10040e02:	dc07      	bgt.n	10040e14 <__aeabi_f2iz+0x34>
10040e04:	2096      	movs	r0, #150	@ 0x96
10040e06:	1a82      	subs	r2, r0, r2
10040e08:	40d1      	lsrs	r1, r2
10040e0a:	4248      	negs	r0, r1
10040e0c:	2b00      	cmp	r3, #0
10040e0e:	d1f3      	bne.n	10040df8 <__aeabi_f2iz+0x18>
10040e10:	0008      	movs	r0, r1
10040e12:	e7f1      	b.n	10040df8 <__aeabi_f2iz+0x18>
10040e14:	3a96      	subs	r2, #150	@ 0x96
10040e16:	4091      	lsls	r1, r2
10040e18:	e7f7      	b.n	10040e0a <__aeabi_f2iz+0x2a>
10040e1a:	46c0      	nop			@ (mov r8, r8)
10040e1c:	7fffffff 	.word	0x7fffffff

10040e20 <__aeabi_i2f>:
10040e20:	b570      	push	{r4, r5, r6, lr}
10040e22:	2800      	cmp	r0, #0
10040e24:	d013      	beq.n	10040e4e <__aeabi_i2f+0x2e>
10040e26:	17c3      	asrs	r3, r0, #31
10040e28:	18c5      	adds	r5, r0, r3
10040e2a:	405d      	eors	r5, r3
10040e2c:	0fc4      	lsrs	r4, r0, #31
10040e2e:	0028      	movs	r0, r5
10040e30:	f000 f884 	bl	10040f3c <__clzsi2>
10040e34:	239e      	movs	r3, #158	@ 0x9e
10040e36:	0001      	movs	r1, r0
10040e38:	1a1b      	subs	r3, r3, r0
10040e3a:	2b96      	cmp	r3, #150	@ 0x96
10040e3c:	dc0f      	bgt.n	10040e5e <__aeabi_i2f+0x3e>
10040e3e:	2808      	cmp	r0, #8
10040e40:	d034      	beq.n	10040eac <__aeabi_i2f+0x8c>
10040e42:	3908      	subs	r1, #8
10040e44:	408d      	lsls	r5, r1
10040e46:	026d      	lsls	r5, r5, #9
10040e48:	0a6d      	lsrs	r5, r5, #9
10040e4a:	b2d8      	uxtb	r0, r3
10040e4c:	e002      	b.n	10040e54 <__aeabi_i2f+0x34>
10040e4e:	2400      	movs	r4, #0
10040e50:	2000      	movs	r0, #0
10040e52:	2500      	movs	r5, #0
10040e54:	05c0      	lsls	r0, r0, #23
10040e56:	4328      	orrs	r0, r5
10040e58:	07e4      	lsls	r4, r4, #31
10040e5a:	4320      	orrs	r0, r4
10040e5c:	bd70      	pop	{r4, r5, r6, pc}
10040e5e:	2b99      	cmp	r3, #153	@ 0x99
10040e60:	dc16      	bgt.n	10040e90 <__aeabi_i2f+0x70>
10040e62:	1f42      	subs	r2, r0, #5
10040e64:	2805      	cmp	r0, #5
10040e66:	d000      	beq.n	10040e6a <__aeabi_i2f+0x4a>
10040e68:	4095      	lsls	r5, r2
10040e6a:	002a      	movs	r2, r5
10040e6c:	4811      	ldr	r0, [pc, #68]	@ (10040eb4 <__aeabi_i2f+0x94>)
10040e6e:	4002      	ands	r2, r0
10040e70:	076e      	lsls	r6, r5, #29
10040e72:	d009      	beq.n	10040e88 <__aeabi_i2f+0x68>
10040e74:	260f      	movs	r6, #15
10040e76:	4035      	ands	r5, r6
10040e78:	2d04      	cmp	r5, #4
10040e7a:	d005      	beq.n	10040e88 <__aeabi_i2f+0x68>
10040e7c:	3204      	adds	r2, #4
10040e7e:	0155      	lsls	r5, r2, #5
10040e80:	d502      	bpl.n	10040e88 <__aeabi_i2f+0x68>
10040e82:	239f      	movs	r3, #159	@ 0x9f
10040e84:	4002      	ands	r2, r0
10040e86:	1a5b      	subs	r3, r3, r1
10040e88:	0192      	lsls	r2, r2, #6
10040e8a:	0a55      	lsrs	r5, r2, #9
10040e8c:	b2d8      	uxtb	r0, r3
10040e8e:	e7e1      	b.n	10040e54 <__aeabi_i2f+0x34>
10040e90:	2205      	movs	r2, #5
10040e92:	1a12      	subs	r2, r2, r0
10040e94:	0028      	movs	r0, r5
10040e96:	40d0      	lsrs	r0, r2
10040e98:	0002      	movs	r2, r0
10040e9a:	0008      	movs	r0, r1
10040e9c:	301b      	adds	r0, #27
10040e9e:	4085      	lsls	r5, r0
10040ea0:	0028      	movs	r0, r5
10040ea2:	1e45      	subs	r5, r0, #1
10040ea4:	41a8      	sbcs	r0, r5
10040ea6:	4302      	orrs	r2, r0
10040ea8:	0015      	movs	r5, r2
10040eaa:	e7de      	b.n	10040e6a <__aeabi_i2f+0x4a>
10040eac:	026d      	lsls	r5, r5, #9
10040eae:	2096      	movs	r0, #150	@ 0x96
10040eb0:	0a6d      	lsrs	r5, r5, #9
10040eb2:	e7cf      	b.n	10040e54 <__aeabi_i2f+0x34>
10040eb4:	fbffffff 	.word	0xfbffffff

10040eb8 <__aeabi_ui2f>:
10040eb8:	b570      	push	{r4, r5, r6, lr}
10040eba:	1e04      	subs	r4, r0, #0
10040ebc:	d00e      	beq.n	10040edc <__aeabi_ui2f+0x24>
10040ebe:	f000 f83d 	bl	10040f3c <__clzsi2>
10040ec2:	239e      	movs	r3, #158	@ 0x9e
10040ec4:	0001      	movs	r1, r0
10040ec6:	1a1b      	subs	r3, r3, r0
10040ec8:	2b96      	cmp	r3, #150	@ 0x96
10040eca:	dc0c      	bgt.n	10040ee6 <__aeabi_ui2f+0x2e>
10040ecc:	2808      	cmp	r0, #8
10040ece:	d02f      	beq.n	10040f30 <__aeabi_ui2f+0x78>
10040ed0:	3908      	subs	r1, #8
10040ed2:	408c      	lsls	r4, r1
10040ed4:	0264      	lsls	r4, r4, #9
10040ed6:	0a64      	lsrs	r4, r4, #9
10040ed8:	b2d8      	uxtb	r0, r3
10040eda:	e001      	b.n	10040ee0 <__aeabi_ui2f+0x28>
10040edc:	2000      	movs	r0, #0
10040ede:	2400      	movs	r4, #0
10040ee0:	05c0      	lsls	r0, r0, #23
10040ee2:	4320      	orrs	r0, r4
10040ee4:	bd70      	pop	{r4, r5, r6, pc}
10040ee6:	2b99      	cmp	r3, #153	@ 0x99
10040ee8:	dc16      	bgt.n	10040f18 <__aeabi_ui2f+0x60>
10040eea:	1f42      	subs	r2, r0, #5
10040eec:	2805      	cmp	r0, #5
10040eee:	d000      	beq.n	10040ef2 <__aeabi_ui2f+0x3a>
10040ef0:	4094      	lsls	r4, r2
10040ef2:	0022      	movs	r2, r4
10040ef4:	4810      	ldr	r0, [pc, #64]	@ (10040f38 <__aeabi_ui2f+0x80>)
10040ef6:	4002      	ands	r2, r0
10040ef8:	0765      	lsls	r5, r4, #29
10040efa:	d009      	beq.n	10040f10 <__aeabi_ui2f+0x58>
10040efc:	250f      	movs	r5, #15
10040efe:	402c      	ands	r4, r5
10040f00:	2c04      	cmp	r4, #4
10040f02:	d005      	beq.n	10040f10 <__aeabi_ui2f+0x58>
10040f04:	3204      	adds	r2, #4
10040f06:	0154      	lsls	r4, r2, #5
10040f08:	d502      	bpl.n	10040f10 <__aeabi_ui2f+0x58>
10040f0a:	239f      	movs	r3, #159	@ 0x9f
10040f0c:	4002      	ands	r2, r0
10040f0e:	1a5b      	subs	r3, r3, r1
10040f10:	0192      	lsls	r2, r2, #6
10040f12:	0a54      	lsrs	r4, r2, #9
10040f14:	b2d8      	uxtb	r0, r3
10040f16:	e7e3      	b.n	10040ee0 <__aeabi_ui2f+0x28>
10040f18:	0002      	movs	r2, r0
10040f1a:	0020      	movs	r0, r4
10040f1c:	321b      	adds	r2, #27
10040f1e:	4090      	lsls	r0, r2
10040f20:	0002      	movs	r2, r0
10040f22:	1e50      	subs	r0, r2, #1
10040f24:	4182      	sbcs	r2, r0
10040f26:	2005      	movs	r0, #5
10040f28:	1a40      	subs	r0, r0, r1
10040f2a:	40c4      	lsrs	r4, r0
10040f2c:	4314      	orrs	r4, r2
10040f2e:	e7e0      	b.n	10040ef2 <__aeabi_ui2f+0x3a>
10040f30:	0264      	lsls	r4, r4, #9
10040f32:	2096      	movs	r0, #150	@ 0x96
10040f34:	0a64      	lsrs	r4, r4, #9
10040f36:	e7d3      	b.n	10040ee0 <__aeabi_ui2f+0x28>
10040f38:	fbffffff 	.word	0xfbffffff

10040f3c <__clzsi2>:
10040f3c:	211c      	movs	r1, #28
10040f3e:	2301      	movs	r3, #1
10040f40:	041b      	lsls	r3, r3, #16
10040f42:	4298      	cmp	r0, r3
10040f44:	d301      	bcc.n	10040f4a <__clzsi2+0xe>
10040f46:	0c00      	lsrs	r0, r0, #16
10040f48:	3910      	subs	r1, #16
10040f4a:	0a1b      	lsrs	r3, r3, #8
10040f4c:	4298      	cmp	r0, r3
10040f4e:	d301      	bcc.n	10040f54 <__clzsi2+0x18>
10040f50:	0a00      	lsrs	r0, r0, #8
10040f52:	3908      	subs	r1, #8
10040f54:	091b      	lsrs	r3, r3, #4
10040f56:	4298      	cmp	r0, r3
10040f58:	d301      	bcc.n	10040f5e <__clzsi2+0x22>
10040f5a:	0900      	lsrs	r0, r0, #4
10040f5c:	3904      	subs	r1, #4
10040f5e:	a202      	add	r2, pc, #8	@ (adr r2, 10040f68 <__clzsi2+0x2c>)
10040f60:	5c10      	ldrb	r0, [r2, r0]
10040f62:	1840      	adds	r0, r0, r1
10040f64:	4770      	bx	lr
10040f66:	46c0      	nop			@ (mov r8, r8)
10040f68:	02020304 	.word	0x02020304
10040f6c:	01010101 	.word	0x01010101
	...

10040f78 <__clzdi2>:
10040f78:	b510      	push	{r4, lr}
10040f7a:	2900      	cmp	r1, #0
10040f7c:	d103      	bne.n	10040f86 <__clzdi2+0xe>
10040f7e:	f7ff ffdd 	bl	10040f3c <__clzsi2>
10040f82:	3020      	adds	r0, #32
10040f84:	e002      	b.n	10040f8c <__clzdi2+0x14>
10040f86:	0008      	movs	r0, r1
10040f88:	f7ff ffd8 	bl	10040f3c <__clzsi2>
10040f8c:	bd10      	pop	{r4, pc}
10040f8e:	46c0      	nop			@ (mov r8, r8)

10040f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
10040f90:	b590      	push	{r4, r7, lr}
10040f92:	b089      	sub	sp, #36	@ 0x24
10040f94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040f96:	2408      	movs	r4, #8
10040f98:	193b      	adds	r3, r7, r4
10040f9a:	0018      	movs	r0, r3
10040f9c:	2318      	movs	r3, #24
10040f9e:	001a      	movs	r2, r3
10040fa0:	2100      	movs	r1, #0
10040fa2:	f008 feb7 	bl	10049d14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040fa6:	003b      	movs	r3, r7
10040fa8:	0018      	movs	r0, r3
10040faa:	2308      	movs	r3, #8
10040fac:	001a      	movs	r2, r3
10040fae:	2100      	movs	r1, #0
10040fb0:	f008 feb0 	bl	10049d14 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10040fb4:	193b      	adds	r3, r7, r4
10040fb6:	2205      	movs	r2, #5
10040fb8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10040fba:	193b      	adds	r3, r7, r4
10040fbc:	2280      	movs	r2, #128	@ 0x80
10040fbe:	0252      	lsls	r2, r2, #9
10040fc0:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10040fc2:	193b      	adds	r3, r7, r4
10040fc4:	2204      	movs	r2, #4
10040fc6:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040fc8:	193b      	adds	r3, r7, r4
10040fca:	0018      	movs	r0, r3
10040fcc:	f006 fbf6 	bl	100477bc <HAL_RCC_OscConfig>
10040fd0:	1e03      	subs	r3, r0, #0
10040fd2:	d001      	beq.n	10040fd8 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
10040fd4:	2300      	movs	r3, #0
10040fd6:	e00f      	b.n	10040ff8 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040fd8:	003b      	movs	r3, r7
10040fda:	2200      	movs	r2, #0
10040fdc:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
10040fde:	003b      	movs	r3, r7
10040fe0:	2200      	movs	r2, #0
10040fe2:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10040fe4:	003b      	movs	r3, r7
10040fe6:	2110      	movs	r1, #16
10040fe8:	0018      	movs	r0, r3
10040fea:	f006 fd31 	bl	10047a50 <HAL_RCC_ClockConfig>
10040fee:	1e03      	subs	r3, r0, #0
10040ff0:	d001      	beq.n	10040ff6 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
10040ff2:	2300      	movs	r3, #0
10040ff4:	e000      	b.n	10040ff8 <SystemClock_Config+0x68>
	}
	return INIT_OK;
10040ff6:	2301      	movs	r3, #1
}
10040ff8:	0018      	movs	r0, r3
10040ffa:	46bd      	mov	sp, r7
10040ffc:	b009      	add	sp, #36	@ 0x24
10040ffe:	bd90      	pop	{r4, r7, pc}

10041000 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
10041000:	b580      	push	{r7, lr}
10041002:	b086      	sub	sp, #24
10041004:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10041006:	003b      	movs	r3, r7
10041008:	0018      	movs	r0, r3
1004100a:	2318      	movs	r3, #24
1004100c:	001a      	movs	r2, r3
1004100e:	2100      	movs	r1, #0
10041010:	f008 fe80 	bl	10049d14 <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10041014:	003b      	movs	r3, r7
10041016:	2202      	movs	r2, #2
10041018:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
1004101a:	003b      	movs	r3, r7
1004101c:	2280      	movs	r2, #128	@ 0x80
1004101e:	0152      	lsls	r2, r2, #5
10041020:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10041022:	003b      	movs	r3, r7
10041024:	0018      	movs	r0, r3
10041026:	f006 fea9 	bl	10047d7c <HAL_RCCEx_PeriphCLKConfig>
1004102a:	1e03      	subs	r3, r0, #0
1004102c:	d001      	beq.n	10041032 <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
1004102e:	2300      	movs	r3, #0
10041030:	e000      	b.n	10041034 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
10041032:	2301      	movs	r3, #1
}
10041034:	0018      	movs	r0, r3
10041036:	46bd      	mov	sp, r7
10041038:	b006      	add	sp, #24
1004103a:	bd80      	pop	{r7, pc}

1004103c <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
1004103c:	b580      	push	{r7, lr}
1004103e:	b082      	sub	sp, #8
10041040:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10041042:	4b0d      	ldr	r3, [pc, #52]	@ (10041078 <BOARD_Init+0x3c>)
10041044:	781b      	ldrb	r3, [r3, #0]
10041046:	2b00      	cmp	r3, #0
10041048:	d001      	beq.n	1004104e <BOARD_Init+0x12>
1004104a:	2301      	movs	r3, #1
1004104c:	e010      	b.n	10041070 <BOARD_Init+0x34>
	HAL_Init();
1004104e:	f002 ffc3 	bl	10043fd8 <HAL_Init>
	int errorFlag = INIT_OK;
10041052:	2301      	movs	r3, #1
10041054:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10041056:	f7ff ffd3 	bl	10041000 <PeriphCommonClock_Config>
1004105a:	1e03      	subs	r3, r0, #0
1004105c:	d101      	bne.n	10041062 <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
1004105e:	2300      	movs	r3, #0
10041060:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
10041062:	f7ff ff95 	bl	10040f90 <SystemClock_Config>
10041066:	1e03      	subs	r3, r0, #0
10041068:	d101      	bne.n	1004106e <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
1004106a:	2300      	movs	r3, #0
1004106c:	607b      	str	r3, [r7, #4]
	}
	return errorFlag;
1004106e:	687b      	ldr	r3, [r7, #4]
}
10041070:	0018      	movs	r0, r3
10041072:	46bd      	mov	sp, r7
10041074:	b002      	add	sp, #8
10041076:	bd80      	pop	{r7, pc}
10041078:	20000194 	.word	0x20000194

1004107c <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
1004107c:	b580      	push	{r7, lr}
1004107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10041080:	b672      	cpsid	i
}
10041082:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10041084:	46c0      	nop			@ (mov r8, r8)
10041086:	e7fd      	b.n	10041084 <BOARD_CrashHandler+0x8>

10041088 <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
10041088:	b580      	push	{r7, lr}
1004108a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
1004108c:	b672      	cpsid	i
}
1004108e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10041090:	46c0      	nop			@ (mov r8, r8)
10041092:	e7fd      	b.n	10041090 <Error_Handler+0x8>

10041094 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
10041094:	b580      	push	{r7, lr}
10041096:	b084      	sub	sp, #16
10041098:	af00      	add	r7, sp, #0
1004109a:	6078      	str	r0, [r7, #4]
	commSM = init;
1004109c:	4b0b      	ldr	r3, [pc, #44]	@ (100410cc <COMM_Event_Init+0x38>)
1004109e:	2200      	movs	r2, #0
100410a0:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
100410a2:	4b0b      	ldr	r3, [pc, #44]	@ (100410d0 <COMM_Event_Init+0x3c>)
100410a4:	687a      	ldr	r2, [r7, #4]
100410a6:	601a      	str	r2, [r3, #0]
	UART_Init();
100410a8:	f001 ffcc 	bl	10043044 <UART_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
100410ac:	210c      	movs	r1, #12
100410ae:	187b      	adds	r3, r7, r1
100410b0:	2201      	movs	r2, #1
100410b2:	701a      	strb	r2, [r3, #0]
100410b4:	187b      	adds	r3, r7, r1
100410b6:	2200      	movs	r2, #0
100410b8:	805a      	strh	r2, [r3, #2]
100410ba:	187b      	adds	r3, r7, r1
100410bc:	6818      	ldr	r0, [r3, #0]
100410be:	f000 f809 	bl	100410d4 <COMM_Event_Post>
	return INIT_OK;
100410c2:	2301      	movs	r3, #1
}
100410c4:	0018      	movs	r0, r3
100410c6:	46bd      	mov	sp, r7
100410c8:	b004      	add	sp, #16
100410ca:	bd80      	pop	{r7, pc}
100410cc:	20000195 	.word	0x20000195
100410d0:	20000198 	.word	0x20000198

100410d4 <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
100410d4:	b580      	push	{r7, lr}
100410d6:	b082      	sub	sp, #8
100410d8:	af00      	add	r7, sp, #0
100410da:	1d3b      	adds	r3, r7, #4
100410dc:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
100410de:	4b05      	ldr	r3, [pc, #20]	@ (100410f4 <COMM_Event_Post+0x20>)
100410e0:	681a      	ldr	r2, [r3, #0]
100410e2:	1d3b      	adds	r3, r7, #4
100410e4:	6819      	ldr	r1, [r3, #0]
100410e6:	0010      	movs	r0, r2
100410e8:	f000 fbff 	bl	100418ea <FIFO_Enqueue>
}
100410ec:	46c0      	nop			@ (mov r8, r8)
100410ee:	46bd      	mov	sp, r7
100410f0:	b002      	add	sp, #8
100410f2:	bd80      	pop	{r7, pc}
100410f4:	20000198 	.word	0x20000198

100410f8 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
100410f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100410fa:	b087      	sub	sp, #28
100410fc:	af00      	add	r7, sp, #0
	uint8_t event = 0;
100410fe:	2317      	movs	r3, #23
10041100:	18fb      	adds	r3, r7, r3
10041102:	2200      	movs	r2, #0
10041104:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
10041106:	250c      	movs	r5, #12
10041108:	197b      	adds	r3, r7, r5
1004110a:	2200      	movs	r2, #0
1004110c:	701a      	strb	r2, [r3, #0]
1004110e:	197b      	adds	r3, r7, r5
10041110:	2200      	movs	r2, #0
10041112:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
10041114:	2616      	movs	r6, #22
10041116:	19bc      	adds	r4, r7, r6
10041118:	f002 f84a 	bl	100431b0 <USART_ReadRx>
1004111c:	0003      	movs	r3, r0
1004111e:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
10041120:	0031      	movs	r1, r6
10041122:	187b      	adds	r3, r7, r1
10041124:	781b      	ldrb	r3, [r3, #0]
10041126:	2b25      	cmp	r3, #37	@ 0x25
10041128:	d00b      	beq.n	10041142 <COMM_Event_Updater+0x4a>
    	event = 1;
1004112a:	2317      	movs	r3, #23
1004112c:	18fb      	adds	r3, r7, r3
1004112e:	2201      	movs	r2, #1
10041130:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
10041132:	197b      	adds	r3, r7, r5
10041134:	2206      	movs	r2, #6
10041136:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
10041138:	187b      	adds	r3, r7, r1
1004113a:	781b      	ldrb	r3, [r3, #0]
1004113c:	b29a      	uxth	r2, r3
1004113e:	197b      	adds	r3, r7, r5
10041140:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
10041142:	4b1c      	ldr	r3, [pc, #112]	@ (100411b4 <COMM_Event_Updater+0xbc>)
10041144:	781b      	ldrb	r3, [r3, #0]
10041146:	2b01      	cmp	r3, #1
10041148:	d110      	bne.n	1004116c <COMM_Event_Updater+0x74>
    	if(USART_TxEmpty()){
1004114a:	f002 f8c3 	bl	100432d4 <USART_TxEmpty>
1004114e:	1e03      	subs	r3, r0, #0
10041150:	d00c      	beq.n	1004116c <COMM_Event_Updater+0x74>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
10041152:	4b19      	ldr	r3, [pc, #100]	@ (100411b8 <COMM_Event_Updater+0xc0>)
10041154:	681a      	ldr	r2, [r3, #0]
10041156:	1d3b      	adds	r3, r7, #4
10041158:	2107      	movs	r1, #7
1004115a:	7019      	strb	r1, [r3, #0]
1004115c:	1d3b      	adds	r3, r7, #4
1004115e:	2100      	movs	r1, #0
10041160:	8059      	strh	r1, [r3, #2]
10041162:	1d3b      	adds	r3, r7, #4
10041164:	6819      	ldr	r1, [r3, #0]
10041166:	0010      	movs	r0, r2
10041168:	f000 fbbf 	bl	100418ea <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
1004116c:	2317      	movs	r3, #23
1004116e:	18fb      	adds	r3, r7, r3
10041170:	781b      	ldrb	r3, [r3, #0]
10041172:	2b00      	cmp	r3, #0
10041174:	d007      	beq.n	10041186 <COMM_Event_Updater+0x8e>
10041176:	4b10      	ldr	r3, [pc, #64]	@ (100411b8 <COMM_Event_Updater+0xc0>)
10041178:	681a      	ldr	r2, [r3, #0]
1004117a:	230c      	movs	r3, #12
1004117c:	18fb      	adds	r3, r7, r3
1004117e:	6819      	ldr	r1, [r3, #0]
10041180:	0010      	movs	r0, r2
10041182:	f000 fbb2 	bl	100418ea <FIFO_Enqueue>
    return out;
10041186:	2110      	movs	r1, #16
10041188:	187b      	adds	r3, r7, r1
1004118a:	220c      	movs	r2, #12
1004118c:	18ba      	adds	r2, r7, r2
1004118e:	6812      	ldr	r2, [r2, #0]
10041190:	601a      	str	r2, [r3, #0]
10041192:	187a      	adds	r2, r7, r1
10041194:	2300      	movs	r3, #0
10041196:	8811      	ldrh	r1, [r2, #0]
10041198:	0409      	lsls	r1, r1, #16
1004119a:	0c09      	lsrs	r1, r1, #16
1004119c:	0c1b      	lsrs	r3, r3, #16
1004119e:	041b      	lsls	r3, r3, #16
100411a0:	430b      	orrs	r3, r1
100411a2:	8852      	ldrh	r2, [r2, #2]
100411a4:	0412      	lsls	r2, r2, #16
100411a6:	041b      	lsls	r3, r3, #16
100411a8:	0c1b      	lsrs	r3, r3, #16
100411aa:	4313      	orrs	r3, r2
}
100411ac:	0018      	movs	r0, r3
100411ae:	46bd      	mov	sp, r7
100411b0:	b007      	add	sp, #28
100411b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100411b4:	2000019c 	.word	0x2000019c
100411b8:	20000198 	.word	0x20000198

100411bc <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
100411bc:	b5b0      	push	{r4, r5, r7, lr}
100411be:	b09e      	sub	sp, #120	@ 0x78
100411c0:	af00      	add	r7, sp, #0
100411c2:	1d3b      	adds	r3, r7, #4
100411c4:	6018      	str	r0, [r3, #0]
	bool transition = 0;
100411c6:	2377      	movs	r3, #119	@ 0x77
100411c8:	18fb      	adds	r3, r7, r3
100411ca:	2200      	movs	r2, #0
100411cc:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
100411ce:	2376      	movs	r3, #118	@ 0x76
100411d0:	18fb      	adds	r3, r7, r3
100411d2:	4adb      	ldr	r2, [pc, #876]	@ (10041540 <COMM_Event_Handler+0x384>)
100411d4:	7812      	ldrb	r2, [r2, #0]
100411d6:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
100411d8:	4bd9      	ldr	r3, [pc, #868]	@ (10041540 <COMM_Event_Handler+0x384>)
100411da:	781b      	ldrb	r3, [r3, #0]
100411dc:	2b0f      	cmp	r3, #15
100411de:	d900      	bls.n	100411e2 <COMM_Event_Handler+0x26>
100411e0:	e2ee      	b.n	100417c0 <COMM_Event_Handler+0x604>
100411e2:	009a      	lsls	r2, r3, #2
100411e4:	4bd7      	ldr	r3, [pc, #860]	@ (10041544 <COMM_Event_Handler+0x388>)
100411e6:	18d3      	adds	r3, r2, r3
100411e8:	681b      	ldr	r3, [r3, #0]
100411ea:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
100411ec:	1d3b      	adds	r3, r7, #4
100411ee:	781b      	ldrb	r3, [r3, #0]
100411f0:	b25b      	sxtb	r3, r3
100411f2:	2b01      	cmp	r3, #1
100411f4:	d000      	beq.n	100411f8 <COMM_Event_Handler+0x3c>
100411f6:	e2e5      	b.n	100417c4 <COMM_Event_Handler+0x608>
			next = idle;
100411f8:	2376      	movs	r3, #118	@ 0x76
100411fa:	18fb      	adds	r3, r7, r3
100411fc:	2201      	movs	r2, #1
100411fe:	701a      	strb	r2, [r3, #0]
			transition = true;
10041200:	2377      	movs	r3, #119	@ 0x77
10041202:	18fb      	adds	r3, r7, r3
10041204:	2201      	movs	r2, #1
10041206:	701a      	strb	r2, [r3, #0]
		}
		break;
10041208:	e2dc      	b.n	100417c4 <COMM_Event_Handler+0x608>
	case idle:
		if(event.status == EVENT_ENTRY){
1004120a:	1d3b      	adds	r3, r7, #4
1004120c:	781b      	ldrb	r3, [r3, #0]
1004120e:	b25b      	sxtb	r3, r3
10041210:	2b02      	cmp	r3, #2
10041212:	d105      	bne.n	10041220 <COMM_Event_Handler+0x64>
			sendinglogs = 0;
10041214:	4bcc      	ldr	r3, [pc, #816]	@ (10041548 <COMM_Event_Handler+0x38c>)
10041216:	2200      	movs	r2, #0
10041218:	701a      	strb	r2, [r3, #0]
			BSP_LED_Toggle(LED_BLUE);
1004121a:	2000      	movs	r0, #0
1004121c:	f002 fd6c 	bl	10043cf8 <BSP_LED_Toggle>
		}
		if(event.status == EVENT_USART){
10041220:	1d3b      	adds	r3, r7, #4
10041222:	781b      	ldrb	r3, [r3, #0]
10041224:	b25b      	sxtb	r3, r3
10041226:	2b06      	cmp	r3, #6
10041228:	d000      	beq.n	1004122c <COMM_Event_Handler+0x70>
1004122a:	e2cd      	b.n	100417c8 <COMM_Event_Handler+0x60c>
			switch (event.data){
1004122c:	1d3b      	adds	r3, r7, #4
1004122e:	885b      	ldrh	r3, [r3, #2]
10041230:	2b05      	cmp	r3, #5
10041232:	d845      	bhi.n	100412c0 <COMM_Event_Handler+0x104>
10041234:	009a      	lsls	r2, r3, #2
10041236:	4bc5      	ldr	r3, [pc, #788]	@ (1004154c <COMM_Event_Handler+0x390>)
10041238:	18d3      	adds	r3, r2, r3
1004123a:	681b      	ldr	r3, [r3, #0]
1004123c:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control");
1004123e:	4bc4      	ldr	r3, [pc, #784]	@ (10041550 <COMM_Event_Handler+0x394>)
10041240:	0018      	movs	r0, r3
10041242:	f000 fb17 	bl	10041874 <discountprintf>
				next = volumecontrol;
10041246:	2376      	movs	r3, #118	@ 0x76
10041248:	18fb      	adds	r3, r7, r3
1004124a:	2202      	movs	r2, #2
1004124c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004124e:	2377      	movs	r3, #119	@ 0x77
10041250:	18fb      	adds	r3, r7, r3
10041252:	2201      	movs	r2, #1
10041254:	701a      	strb	r2, [r3, #0]
				break;
10041256:	e034      	b.n	100412c2 <COMM_Event_Handler+0x106>
			case FOLDERCONTROL:
				discountprintf("received folder control");
10041258:	4bbe      	ldr	r3, [pc, #760]	@ (10041554 <COMM_Event_Handler+0x398>)
1004125a:	0018      	movs	r0, r3
1004125c:	f000 fb0a 	bl	10041874 <discountprintf>
				next = foldercontrol;
10041260:	2376      	movs	r3, #118	@ 0x76
10041262:	18fb      	adds	r3, r7, r3
10041264:	2203      	movs	r2, #3
10041266:	701a      	strb	r2, [r3, #0]
				transition = true;
10041268:	2377      	movs	r3, #119	@ 0x77
1004126a:	18fb      	adds	r3, r7, r3
1004126c:	2201      	movs	r2, #1
1004126e:	701a      	strb	r2, [r3, #0]
				break;
10041270:	e027      	b.n	100412c2 <COMM_Event_Handler+0x106>
			case LOGSREQUEST:
				discountprintf("received logs request");
10041272:	4bb9      	ldr	r3, [pc, #740]	@ (10041558 <COMM_Event_Handler+0x39c>)
10041274:	0018      	movs	r0, r3
10041276:	f000 fafd 	bl	10041874 <discountprintf>
				next = logsrequest;
1004127a:	2376      	movs	r3, #118	@ 0x76
1004127c:	18fb      	adds	r3, r7, r3
1004127e:	2205      	movs	r2, #5
10041280:	701a      	strb	r2, [r3, #0]
				transition = true;
10041282:	2377      	movs	r3, #119	@ 0x77
10041284:	18fb      	adds	r3, r7, r3
10041286:	2201      	movs	r2, #1
10041288:	701a      	strb	r2, [r3, #0]
				break;
1004128a:	e01a      	b.n	100412c2 <COMM_Event_Handler+0x106>
			case DCCONTROL:
				discountprintf("received DC control");
1004128c:	4bb3      	ldr	r3, [pc, #716]	@ (1004155c <COMM_Event_Handler+0x3a0>)
1004128e:	0018      	movs	r0, r3
10041290:	f000 faf0 	bl	10041874 <discountprintf>
				next = dccontrol;
10041294:	2376      	movs	r3, #118	@ 0x76
10041296:	18fb      	adds	r3, r7, r3
10041298:	2207      	movs	r2, #7
1004129a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004129c:	2377      	movs	r3, #119	@ 0x77
1004129e:	18fb      	adds	r3, r7, r3
100412a0:	2201      	movs	r2, #1
100412a2:	701a      	strb	r2, [r3, #0]
				break;
100412a4:	e00d      	b.n	100412c2 <COMM_Event_Handler+0x106>
			case SCHEDULECONTROL:
				discountprintf("received schedule control");
100412a6:	4bae      	ldr	r3, [pc, #696]	@ (10041560 <COMM_Event_Handler+0x3a4>)
100412a8:	0018      	movs	r0, r3
100412aa:	f000 fae3 	bl	10041874 <discountprintf>
				next = schedulecontrol;
100412ae:	2376      	movs	r3, #118	@ 0x76
100412b0:	18fb      	adds	r3, r7, r3
100412b2:	2208      	movs	r2, #8
100412b4:	701a      	strb	r2, [r3, #0]
				transition = true;
100412b6:	2377      	movs	r3, #119	@ 0x77
100412b8:	18fb      	adds	r3, r7, r3
100412ba:	2201      	movs	r2, #1
100412bc:	701a      	strb	r2, [r3, #0]
				break;
100412be:	e000      	b.n	100412c2 <COMM_Event_Handler+0x106>
			default:
				break;
100412c0:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
100412c2:	e281      	b.n	100417c8 <COMM_Event_Handler+0x60c>
	case volumecontrol:
		if(event.status == EVENT_USART){
100412c4:	1d3b      	adds	r3, r7, #4
100412c6:	781b      	ldrb	r3, [r3, #0]
100412c8:	b25b      	sxtb	r3, r3
100412ca:	2b06      	cmp	r3, #6
100412cc:	d000      	beq.n	100412d0 <COMM_Event_Handler+0x114>
100412ce:	e27d      	b.n	100417cc <COMM_Event_Handler+0x610>
			//FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle());
			discountprintf("Storing volume");
100412d0:	4ba4      	ldr	r3, [pc, #656]	@ (10041564 <COMM_Event_Handler+0x3a8>)
100412d2:	0018      	movs	r0, r3
100412d4:	f000 face 	bl	10041874 <discountprintf>
			next = idle;
100412d8:	2376      	movs	r3, #118	@ 0x76
100412da:	18fb      	adds	r3, r7, r3
100412dc:	2201      	movs	r2, #1
100412de:	701a      	strb	r2, [r3, #0]
			transition = true;
100412e0:	2377      	movs	r3, #119	@ 0x77
100412e2:	18fb      	adds	r3, r7, r3
100412e4:	2201      	movs	r2, #1
100412e6:	701a      	strb	r2, [r3, #0]
		}
		break;
100412e8:	e270      	b.n	100417cc <COMM_Event_Handler+0x610>
	case foldercontrol:
		if(event.status == EVENT_USART){
100412ea:	1d3b      	adds	r3, r7, #4
100412ec:	781b      	ldrb	r3, [r3, #0]
100412ee:	b25b      	sxtb	r3, r3
100412f0:	2b06      	cmp	r3, #6
100412f2:	d000      	beq.n	100412f6 <COMM_Event_Handler+0x13a>
100412f4:	e26c      	b.n	100417d0 <COMM_Event_Handler+0x614>
			folder = event.data;
100412f6:	1d3b      	adds	r3, r7, #4
100412f8:	885b      	ldrh	r3, [r3, #2]
100412fa:	b2da      	uxtb	r2, r3
100412fc:	4b9a      	ldr	r3, [pc, #616]	@ (10041568 <COMM_Event_Handler+0x3ac>)
100412fe:	701a      	strb	r2, [r3, #0]
			discountprintf("Sending folder selector\n");
10041300:	4b9a      	ldr	r3, [pc, #616]	@ (1004156c <COMM_Event_Handler+0x3b0>)
10041302:	0018      	movs	r0, r3
10041304:	f000 fab6 	bl	10041874 <discountprintf>
			next = folderselected;
10041308:	2376      	movs	r3, #118	@ 0x76
1004130a:	18fb      	adds	r3, r7, r3
1004130c:	2204      	movs	r2, #4
1004130e:	701a      	strb	r2, [r3, #0]
			transition = true;
10041310:	2377      	movs	r3, #119	@ 0x77
10041312:	18fb      	adds	r3, r7, r3
10041314:	2201      	movs	r2, #1
10041316:	701a      	strb	r2, [r3, #0]
		}
		break;
10041318:	e25a      	b.n	100417d0 <COMM_Event_Handler+0x614>
	case folderselected:
		if(event.status == EVENT_USART){
1004131a:	1d3b      	adds	r3, r7, #4
1004131c:	781b      	ldrb	r3, [r3, #0]
1004131e:	b25b      	sxtb	r3, r3
10041320:	2b06      	cmp	r3, #6
10041322:	d000      	beq.n	10041326 <COMM_Event_Handler+0x16a>
10041324:	e256      	b.n	100417d4 <COMM_Event_Handler+0x618>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
10041326:	2130      	movs	r1, #48	@ 0x30
10041328:	187b      	adds	r3, r7, r1
1004132a:	220b      	movs	r2, #11
1004132c:	701a      	strb	r2, [r3, #0]
1004132e:	4b8e      	ldr	r3, [pc, #568]	@ (10041568 <COMM_Event_Handler+0x3ac>)
10041330:	781b      	ldrb	r3, [r3, #0]
10041332:	021b      	lsls	r3, r3, #8
10041334:	b29a      	uxth	r2, r3
10041336:	1d3b      	adds	r3, r7, #4
10041338:	885b      	ldrh	r3, [r3, #2]
1004133a:	18d3      	adds	r3, r2, r3
1004133c:	b29a      	uxth	r2, r3
1004133e:	187b      	adds	r3, r7, r1
10041340:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
10041342:	187b      	adds	r3, r7, r1
10041344:	6818      	ldr	r0, [r3, #0]
10041346:	f001 f90f 	bl	10042568 <MP3_Event_Post>
			discountprintf("Sending track selector\n");
1004134a:	4b89      	ldr	r3, [pc, #548]	@ (10041570 <COMM_Event_Handler+0x3b4>)
1004134c:	0018      	movs	r0, r3
1004134e:	f000 fa91 	bl	10041874 <discountprintf>
			next = idle;
10041352:	2376      	movs	r3, #118	@ 0x76
10041354:	18fb      	adds	r3, r7, r3
10041356:	2201      	movs	r2, #1
10041358:	701a      	strb	r2, [r3, #0]
			transition = true;
1004135a:	2377      	movs	r3, #119	@ 0x77
1004135c:	18fb      	adds	r3, r7, r3
1004135e:	2201      	movs	r2, #1
10041360:	701a      	strb	r2, [r3, #0]
		}
		break;
10041362:	e237      	b.n	100417d4 <COMM_Event_Handler+0x618>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
10041364:	1d3b      	adds	r3, r7, #4
10041366:	781b      	ldrb	r3, [r3, #0]
10041368:	b25b      	sxtb	r3, r3
1004136a:	2b02      	cmp	r3, #2
1004136c:	d000      	beq.n	10041370 <COMM_Event_Handler+0x1b4>
1004136e:	e233      	b.n	100417d8 <COMM_Event_Handler+0x61c>
			sendinglogs = 1;
10041370:	4b75      	ldr	r3, [pc, #468]	@ (10041548 <COMM_Event_Handler+0x38c>)
10041372:	2201      	movs	r2, #1
10041374:	701a      	strb	r2, [r3, #0]
			sent = 0;
10041376:	4b7f      	ldr	r3, [pc, #508]	@ (10041574 <COMM_Event_Handler+0x3b8>)
10041378:	2200      	movs	r2, #0
1004137a:	601a      	str	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			uint16_t size = 32;
1004137c:	2468      	movs	r4, #104	@ 0x68
1004137e:	193b      	adds	r3, r7, r4
10041380:	2220      	movs	r2, #32
10041382:	801a      	strh	r2, [r3, #0]
			USART_WriteTx((uint8_t)(size>>8));
10041384:	193b      	adds	r3, r7, r4
10041386:	881b      	ldrh	r3, [r3, #0]
10041388:	0a1b      	lsrs	r3, r3, #8
1004138a:	b29b      	uxth	r3, r3
1004138c:	b2db      	uxtb	r3, r3
1004138e:	0018      	movs	r0, r3
10041390:	f001 ff50 	bl	10043234 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
10041394:	193b      	adds	r3, r7, r4
10041396:	881b      	ldrh	r3, [r3, #0]
10041398:	b2db      	uxtb	r3, r3
1004139a:	0018      	movs	r0, r3
1004139c:	f001 ff4a 	bl	10043234 <USART_WriteTx>
			next = logsdata;
100413a0:	2376      	movs	r3, #118	@ 0x76
100413a2:	18fb      	adds	r3, r7, r3
100413a4:	2206      	movs	r2, #6
100413a6:	701a      	strb	r2, [r3, #0]
			transition = true;
100413a8:	2377      	movs	r3, #119	@ 0x77
100413aa:	18fb      	adds	r3, r7, r3
100413ac:	2201      	movs	r2, #1
100413ae:	701a      	strb	r2, [r3, #0]
		}
		break;
100413b0:	e212      	b.n	100417d8 <COMM_Event_Handler+0x61c>
	case logsdata:
		if(event.status == EVENT_USART_READY){
100413b2:	1d3b      	adds	r3, r7, #4
100413b4:	781b      	ldrb	r3, [r3, #0]
100413b6:	b25b      	sxtb	r3, r3
100413b8:	2b07      	cmp	r3, #7
100413ba:	d000      	beq.n	100413be <COMM_Event_Handler+0x202>
100413bc:	e20e      	b.n	100417dc <COMM_Event_Handler+0x620>
			//get logs size
			uint16_t size  = 32;
100413be:	216a      	movs	r1, #106	@ 0x6a
100413c0:	187b      	adds	r3, r7, r1
100413c2:	2220      	movs	r2, #32
100413c4:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
100413c6:	187b      	adds	r3, r7, r1
100413c8:	881a      	ldrh	r2, [r3, #0]
100413ca:	4b6a      	ldr	r3, [pc, #424]	@ (10041574 <COMM_Event_Handler+0x3b8>)
100413cc:	681b      	ldr	r3, [r3, #0]
100413ce:	1ad3      	subs	r3, r2, r3
100413d0:	2b55      	cmp	r3, #85	@ 0x55
100413d2:	d934      	bls.n	1004143e <COMM_Event_Handler+0x282>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
100413d4:	2300      	movs	r3, #0
100413d6:	673b      	str	r3, [r7, #112]	@ 0x70
100413d8:	e02d      	b.n	10041436 <COMM_Event_Handler+0x27a>
					//scheduleEvent levent = FLASH_ReadLogs(sent);
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
100413da:	2024      	movs	r0, #36	@ 0x24
100413dc:	183b      	adds	r3, r7, r0
100413de:	4a66      	ldr	r2, [pc, #408]	@ (10041578 <COMM_Event_Handler+0x3bc>)
100413e0:	6811      	ldr	r1, [r2, #0]
100413e2:	6019      	str	r1, [r3, #0]
100413e4:	8892      	ldrh	r2, [r2, #4]
100413e6:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
100413e8:	0004      	movs	r4, r0
100413ea:	193b      	adds	r3, r7, r4
100413ec:	781b      	ldrb	r3, [r3, #0]
100413ee:	0018      	movs	r0, r3
100413f0:	f001 ff20 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.day);
100413f4:	193b      	adds	r3, r7, r4
100413f6:	785b      	ldrb	r3, [r3, #1]
100413f8:	0018      	movs	r0, r3
100413fa:	f001 ff1b 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.start);
100413fe:	193b      	adds	r3, r7, r4
10041400:	789b      	ldrb	r3, [r3, #2]
10041402:	0018      	movs	r0, r3
10041404:	f001 ff16 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10041408:	193b      	adds	r3, r7, r4
1004140a:	78db      	ldrb	r3, [r3, #3]
1004140c:	0018      	movs	r0, r3
1004140e:	f001 ff11 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10041412:	193b      	adds	r3, r7, r4
10041414:	791b      	ldrb	r3, [r3, #4]
10041416:	0018      	movs	r0, r3
10041418:	f001 ff0c 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.track);
1004141c:	193b      	adds	r3, r7, r4
1004141e:	795b      	ldrb	r3, [r3, #5]
10041420:	0018      	movs	r0, r3
10041422:	f001 ff07 	bl	10043234 <USART_WriteTx>
					sent++;
10041426:	4b53      	ldr	r3, [pc, #332]	@ (10041574 <COMM_Event_Handler+0x3b8>)
10041428:	681b      	ldr	r3, [r3, #0]
1004142a:	1c5a      	adds	r2, r3, #1
1004142c:	4b51      	ldr	r3, [pc, #324]	@ (10041574 <COMM_Event_Handler+0x3b8>)
1004142e:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10041430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10041432:	3301      	adds	r3, #1
10041434:	673b      	str	r3, [r7, #112]	@ 0x70
10041436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10041438:	2b54      	cmp	r3, #84	@ 0x54
1004143a:	ddce      	ble.n	100413da <COMM_Event_Handler+0x21e>
				next = idle;
				transition = true;
				discountprintf("\ndata sent\n");
			}
		}
		break;
1004143c:	e1ce      	b.n	100417dc <COMM_Event_Handler+0x620>
				for(int i = 0; i < size - sent; i++){
1004143e:	2300      	movs	r3, #0
10041440:	66fb      	str	r3, [r7, #108]	@ 0x6c
10041442:	e02d      	b.n	100414a0 <COMM_Event_Handler+0x2e4>
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10041444:	201c      	movs	r0, #28
10041446:	183b      	adds	r3, r7, r0
10041448:	4a4b      	ldr	r2, [pc, #300]	@ (10041578 <COMM_Event_Handler+0x3bc>)
1004144a:	6811      	ldr	r1, [r2, #0]
1004144c:	6019      	str	r1, [r3, #0]
1004144e:	8892      	ldrh	r2, [r2, #4]
10041450:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
10041452:	0004      	movs	r4, r0
10041454:	193b      	adds	r3, r7, r4
10041456:	781b      	ldrb	r3, [r3, #0]
10041458:	0018      	movs	r0, r3
1004145a:	f001 feeb 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.day);
1004145e:	193b      	adds	r3, r7, r4
10041460:	785b      	ldrb	r3, [r3, #1]
10041462:	0018      	movs	r0, r3
10041464:	f001 fee6 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.start);
10041468:	193b      	adds	r3, r7, r4
1004146a:	789b      	ldrb	r3, [r3, #2]
1004146c:	0018      	movs	r0, r3
1004146e:	f001 fee1 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10041472:	193b      	adds	r3, r7, r4
10041474:	78db      	ldrb	r3, [r3, #3]
10041476:	0018      	movs	r0, r3
10041478:	f001 fedc 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.folder);
1004147c:	193b      	adds	r3, r7, r4
1004147e:	791b      	ldrb	r3, [r3, #4]
10041480:	0018      	movs	r0, r3
10041482:	f001 fed7 	bl	10043234 <USART_WriteTx>
					USART_WriteTx(levent.track);
10041486:	193b      	adds	r3, r7, r4
10041488:	795b      	ldrb	r3, [r3, #5]
1004148a:	0018      	movs	r0, r3
1004148c:	f001 fed2 	bl	10043234 <USART_WriteTx>
					sent++;
10041490:	4b38      	ldr	r3, [pc, #224]	@ (10041574 <COMM_Event_Handler+0x3b8>)
10041492:	681b      	ldr	r3, [r3, #0]
10041494:	1c5a      	adds	r2, r3, #1
10041496:	4b37      	ldr	r3, [pc, #220]	@ (10041574 <COMM_Event_Handler+0x3b8>)
10041498:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < size - sent; i++){
1004149a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
1004149c:	3301      	adds	r3, #1
1004149e:	66fb      	str	r3, [r7, #108]	@ 0x6c
100414a0:	236a      	movs	r3, #106	@ 0x6a
100414a2:	18fb      	adds	r3, r7, r3
100414a4:	881a      	ldrh	r2, [r3, #0]
100414a6:	4b33      	ldr	r3, [pc, #204]	@ (10041574 <COMM_Event_Handler+0x3b8>)
100414a8:	681b      	ldr	r3, [r3, #0]
100414aa:	1ad2      	subs	r2, r2, r3
100414ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
100414ae:	429a      	cmp	r2, r3
100414b0:	d8c8      	bhi.n	10041444 <COMM_Event_Handler+0x288>
				USART_WriteTx(LOGSDONE);
100414b2:	2003      	movs	r0, #3
100414b4:	f001 febe 	bl	10043234 <USART_WriteTx>
				sent = 0;
100414b8:	4b2e      	ldr	r3, [pc, #184]	@ (10041574 <COMM_Event_Handler+0x3b8>)
100414ba:	2200      	movs	r2, #0
100414bc:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
100414be:	4b22      	ldr	r3, [pc, #136]	@ (10041548 <COMM_Event_Handler+0x38c>)
100414c0:	2200      	movs	r2, #0
100414c2:	701a      	strb	r2, [r3, #0]
				next = idle;
100414c4:	2376      	movs	r3, #118	@ 0x76
100414c6:	18fb      	adds	r3, r7, r3
100414c8:	2201      	movs	r2, #1
100414ca:	701a      	strb	r2, [r3, #0]
				transition = true;
100414cc:	2377      	movs	r3, #119	@ 0x77
100414ce:	18fb      	adds	r3, r7, r3
100414d0:	2201      	movs	r2, #1
100414d2:	701a      	strb	r2, [r3, #0]
				discountprintf("\ndata sent\n");
100414d4:	4b29      	ldr	r3, [pc, #164]	@ (1004157c <COMM_Event_Handler+0x3c0>)
100414d6:	0018      	movs	r0, r3
100414d8:	f000 f9cc 	bl	10041874 <discountprintf>
		break;
100414dc:	e17e      	b.n	100417dc <COMM_Event_Handler+0x620>
	case dccontrol:
		if(event.status == EVENT_USART){
100414de:	1d3b      	adds	r3, r7, #4
100414e0:	781b      	ldrb	r3, [r3, #0]
100414e2:	b25b      	sxtb	r3, r3
100414e4:	2b06      	cmp	r3, #6
100414e6:	d000      	beq.n	100414ea <COMM_Event_Handler+0x32e>
100414e8:	e17a      	b.n	100417e0 <COMM_Event_Handler+0x624>
			//FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data);
			discountprintf("storing duty cycle\n");
100414ea:	4b25      	ldr	r3, [pc, #148]	@ (10041580 <COMM_Event_Handler+0x3c4>)
100414ec:	0018      	movs	r0, r3
100414ee:	f000 f9c1 	bl	10041874 <discountprintf>
			//store duty cycle here
			next = idle;
100414f2:	2376      	movs	r3, #118	@ 0x76
100414f4:	18fb      	adds	r3, r7, r3
100414f6:	2201      	movs	r2, #1
100414f8:	701a      	strb	r2, [r3, #0]
			transition = true;
100414fa:	2377      	movs	r3, #119	@ 0x77
100414fc:	18fb      	adds	r3, r7, r3
100414fe:	2201      	movs	r2, #1
10041500:	701a      	strb	r2, [r3, #0]
		}
		break;
10041502:	e16d      	b.n	100417e0 <COMM_Event_Handler+0x624>
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
10041504:	1d3b      	adds	r3, r7, #4
10041506:	781b      	ldrb	r3, [r3, #0]
10041508:	b25b      	sxtb	r3, r3
1004150a:	2b02      	cmp	r3, #2
1004150c:	d000      	beq.n	10041510 <COMM_Event_Handler+0x354>
1004150e:	e169      	b.n	100417e4 <COMM_Event_Handler+0x628>
			discountprintf("receiving schedule\n");
10041510:	4b1c      	ldr	r3, [pc, #112]	@ (10041584 <COMM_Event_Handler+0x3c8>)
10041512:	0018      	movs	r0, r3
10041514:	f000 f9ae 	bl	10041874 <discountprintf>
			sevent = (scheduleEvent){0,0,0,0,0,0};
10041518:	4b1b      	ldr	r3, [pc, #108]	@ (10041588 <COMM_Event_Handler+0x3cc>)
1004151a:	0018      	movs	r0, r3
1004151c:	2306      	movs	r3, #6
1004151e:	001a      	movs	r2, r3
10041520:	2100      	movs	r1, #0
10041522:	f008 fbf7 	bl	10049d14 <memset>
			next = schedulemonth;
10041526:	2376      	movs	r3, #118	@ 0x76
10041528:	18fb      	adds	r3, r7, r3
1004152a:	2209      	movs	r2, #9
1004152c:	701a      	strb	r2, [r3, #0]
			transition = true;
1004152e:	2377      	movs	r3, #119	@ 0x77
10041530:	18fb      	adds	r3, r7, r3
10041532:	2201      	movs	r2, #1
10041534:	701a      	strb	r2, [r3, #0]
			numevents = 0;
10041536:	4b15      	ldr	r3, [pc, #84]	@ (1004158c <COMM_Event_Handler+0x3d0>)
10041538:	2200      	movs	r2, #0
1004153a:	701a      	strb	r2, [r3, #0]
		}
		break;
1004153c:	e152      	b.n	100417e4 <COMM_Event_Handler+0x628>
1004153e:	46c0      	nop			@ (mov r8, r8)
10041540:	20000195 	.word	0x20000195
10041544:	1004a5e0 	.word	0x1004a5e0
10041548:	2000019c 	.word	0x2000019c
1004154c:	1004a620 	.word	0x1004a620
10041550:	1004a46c 	.word	0x1004a46c
10041554:	1004a484 	.word	0x1004a484
10041558:	1004a49c 	.word	0x1004a49c
1004155c:	1004a4b4 	.word	0x1004a4b4
10041560:	1004a4c8 	.word	0x1004a4c8
10041564:	1004a4e4 	.word	0x1004a4e4
10041568:	2000019d 	.word	0x2000019d
1004156c:	1004a4f4 	.word	0x1004a4f4
10041570:	1004a510 	.word	0x1004a510
10041574:	200001a0 	.word	0x200001a0
10041578:	1004a5d8 	.word	0x1004a5d8
1004157c:	1004a528 	.word	0x1004a528
10041580:	1004a534 	.word	0x1004a534
10041584:	1004a548 	.word	0x1004a548
10041588:	200001a4 	.word	0x200001a4
1004158c:	200001aa 	.word	0x200001aa
	case schedulemonth:
		if(event.status == EVENT_USART){
10041590:	1d3b      	adds	r3, r7, #4
10041592:	781b      	ldrb	r3, [r3, #0]
10041594:	b25b      	sxtb	r3, r3
10041596:	2b06      	cmp	r3, #6
10041598:	d000      	beq.n	1004159c <COMM_Event_Handler+0x3e0>
1004159a:	e125      	b.n	100417e8 <COMM_Event_Handler+0x62c>
			if(event.data == SCHEDULEEND){
1004159c:	1d3b      	adds	r3, r7, #4
1004159e:	885b      	ldrh	r3, [r3, #2]
100415a0:	2b0d      	cmp	r3, #13
100415a2:	d10c      	bne.n	100415be <COMM_Event_Handler+0x402>
				discountprintf("schedule complete\n");
100415a4:	4ba9      	ldr	r3, [pc, #676]	@ (1004184c <COMM_Event_Handler+0x690>)
100415a6:	0018      	movs	r0, r3
100415a8:	f000 f964 	bl	10041874 <discountprintf>
				next = idle;
100415ac:	2376      	movs	r3, #118	@ 0x76
100415ae:	18fb      	adds	r3, r7, r3
100415b0:	2201      	movs	r2, #1
100415b2:	701a      	strb	r2, [r3, #0]
				transition = true;
100415b4:	2377      	movs	r3, #119	@ 0x77
100415b6:	18fb      	adds	r3, r7, r3
100415b8:	2201      	movs	r2, #1
100415ba:	701a      	strb	r2, [r3, #0]
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
100415bc:	e114      	b.n	100417e8 <COMM_Event_Handler+0x62c>
			} else if(numevents > MAXSCHEDULEEVENTS){
100415be:	4ba4      	ldr	r3, [pc, #656]	@ (10041850 <COMM_Event_Handler+0x694>)
100415c0:	781b      	ldrb	r3, [r3, #0]
100415c2:	2bb4      	cmp	r3, #180	@ 0xb4
100415c4:	d90f      	bls.n	100415e6 <COMM_Event_Handler+0x42a>
				discountprintf("schedule forced to complete\n");
100415c6:	4ba3      	ldr	r3, [pc, #652]	@ (10041854 <COMM_Event_Handler+0x698>)
100415c8:	0018      	movs	r0, r3
100415ca:	f000 f953 	bl	10041874 <discountprintf>
				next = scheduleend;
100415ce:	2376      	movs	r3, #118	@ 0x76
100415d0:	18fb      	adds	r3, r7, r3
100415d2:	220f      	movs	r2, #15
100415d4:	701a      	strb	r2, [r3, #0]
				transition = true;
100415d6:	2377      	movs	r3, #119	@ 0x77
100415d8:	18fb      	adds	r3, r7, r3
100415da:	2201      	movs	r2, #1
100415dc:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
100415de:	200d      	movs	r0, #13
100415e0:	f001 fe28 	bl	10043234 <USART_WriteTx>
		break;
100415e4:	e100      	b.n	100417e8 <COMM_Event_Handler+0x62c>
				sevent.month = event.data;
100415e6:	1d3b      	adds	r3, r7, #4
100415e8:	885b      	ldrh	r3, [r3, #2]
100415ea:	b2da      	uxtb	r2, r3
100415ec:	4b9a      	ldr	r3, [pc, #616]	@ (10041858 <COMM_Event_Handler+0x69c>)
100415ee:	701a      	strb	r2, [r3, #0]
				sprintf(text, "Month: %d\n", event.data);
100415f0:	1d3b      	adds	r3, r7, #4
100415f2:	885b      	ldrh	r3, [r3, #2]
100415f4:	001a      	movs	r2, r3
100415f6:	4999      	ldr	r1, [pc, #612]	@ (1004185c <COMM_Event_Handler+0x6a0>)
100415f8:	2434      	movs	r4, #52	@ 0x34
100415fa:	193b      	adds	r3, r7, r4
100415fc:	0018      	movs	r0, r3
100415fe:	f008 fb69 	bl	10049cd4 <siprintf>
				discountprintf(text);
10041602:	193b      	adds	r3, r7, r4
10041604:	0018      	movs	r0, r3
10041606:	f000 f935 	bl	10041874 <discountprintf>
				next = scheduleday;
1004160a:	2376      	movs	r3, #118	@ 0x76
1004160c:	18fb      	adds	r3, r7, r3
1004160e:	220a      	movs	r2, #10
10041610:	701a      	strb	r2, [r3, #0]
				transition = true;
10041612:	2377      	movs	r3, #119	@ 0x77
10041614:	18fb      	adds	r3, r7, r3
10041616:	2201      	movs	r2, #1
10041618:	701a      	strb	r2, [r3, #0]
		break;
1004161a:	e0e5      	b.n	100417e8 <COMM_Event_Handler+0x62c>
	case scheduleday:
		if(event.status == EVENT_USART){
1004161c:	1d3b      	adds	r3, r7, #4
1004161e:	781b      	ldrb	r3, [r3, #0]
10041620:	b25b      	sxtb	r3, r3
10041622:	2b06      	cmp	r3, #6
10041624:	d000      	beq.n	10041628 <COMM_Event_Handler+0x46c>
10041626:	e0e1      	b.n	100417ec <COMM_Event_Handler+0x630>
			sevent.day = event.data;
10041628:	1d3b      	adds	r3, r7, #4
1004162a:	885b      	ldrh	r3, [r3, #2]
1004162c:	b2da      	uxtb	r2, r3
1004162e:	4b8a      	ldr	r3, [pc, #552]	@ (10041858 <COMM_Event_Handler+0x69c>)
10041630:	705a      	strb	r2, [r3, #1]
			sprintf(text, "Day: %d\n", event.data);
10041632:	1d3b      	adds	r3, r7, #4
10041634:	885b      	ldrh	r3, [r3, #2]
10041636:	001a      	movs	r2, r3
10041638:	4989      	ldr	r1, [pc, #548]	@ (10041860 <COMM_Event_Handler+0x6a4>)
1004163a:	2434      	movs	r4, #52	@ 0x34
1004163c:	193b      	adds	r3, r7, r4
1004163e:	0018      	movs	r0, r3
10041640:	f008 fb48 	bl	10049cd4 <siprintf>
			discountprintf(text);
10041644:	193b      	adds	r3, r7, r4
10041646:	0018      	movs	r0, r3
10041648:	f000 f914 	bl	10041874 <discountprintf>
			//record day here
			next = schedulestart;
1004164c:	2376      	movs	r3, #118	@ 0x76
1004164e:	18fb      	adds	r3, r7, r3
10041650:	220b      	movs	r2, #11
10041652:	701a      	strb	r2, [r3, #0]
			transition = true;
10041654:	2377      	movs	r3, #119	@ 0x77
10041656:	18fb      	adds	r3, r7, r3
10041658:	2201      	movs	r2, #1
1004165a:	701a      	strb	r2, [r3, #0]
		}
		break;
1004165c:	e0c6      	b.n	100417ec <COMM_Event_Handler+0x630>
	case schedulestart:
		if(event.status == EVENT_USART){
1004165e:	1d3b      	adds	r3, r7, #4
10041660:	781b      	ldrb	r3, [r3, #0]
10041662:	b25b      	sxtb	r3, r3
10041664:	2b06      	cmp	r3, #6
10041666:	d000      	beq.n	1004166a <COMM_Event_Handler+0x4ae>
10041668:	e0c2      	b.n	100417f0 <COMM_Event_Handler+0x634>
			sevent.start =  event.data;
1004166a:	1d3b      	adds	r3, r7, #4
1004166c:	885b      	ldrh	r3, [r3, #2]
1004166e:	b2da      	uxtb	r2, r3
10041670:	4b79      	ldr	r3, [pc, #484]	@ (10041858 <COMM_Event_Handler+0x69c>)
10041672:	709a      	strb	r2, [r3, #2]
			sprintf(text, "start time: %d:%d\n", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10041674:	1d3b      	adds	r3, r7, #4
10041676:	885b      	ldrh	r3, [r3, #2]
10041678:	10db      	asrs	r3, r3, #3
1004167a:	221f      	movs	r2, #31
1004167c:	4013      	ands	r3, r2
1004167e:	001c      	movs	r4, r3
10041680:	1d3b      	adds	r3, r7, #4
10041682:	885b      	ldrh	r3, [r3, #2]
10041684:	001a      	movs	r2, r3
10041686:	2303      	movs	r3, #3
10041688:	401a      	ands	r2, r3
1004168a:	0013      	movs	r3, r2
1004168c:	011b      	lsls	r3, r3, #4
1004168e:	1a9b      	subs	r3, r3, r2
10041690:	4974      	ldr	r1, [pc, #464]	@ (10041864 <COMM_Event_Handler+0x6a8>)
10041692:	2534      	movs	r5, #52	@ 0x34
10041694:	1978      	adds	r0, r7, r5
10041696:	0022      	movs	r2, r4
10041698:	f008 fb1c 	bl	10049cd4 <siprintf>
			discountprintf(text);
1004169c:	197b      	adds	r3, r7, r5
1004169e:	0018      	movs	r0, r3
100416a0:	f000 f8e8 	bl	10041874 <discountprintf>
			//record start time here
			next = schedulestop;
100416a4:	2376      	movs	r3, #118	@ 0x76
100416a6:	18fb      	adds	r3, r7, r3
100416a8:	220c      	movs	r2, #12
100416aa:	701a      	strb	r2, [r3, #0]
			transition = true;
100416ac:	2377      	movs	r3, #119	@ 0x77
100416ae:	18fb      	adds	r3, r7, r3
100416b0:	2201      	movs	r2, #1
100416b2:	701a      	strb	r2, [r3, #0]
		}
		break;
100416b4:	e09c      	b.n	100417f0 <COMM_Event_Handler+0x634>
	case schedulestop:
		if(event.status == EVENT_USART){
100416b6:	1d3b      	adds	r3, r7, #4
100416b8:	781b      	ldrb	r3, [r3, #0]
100416ba:	b25b      	sxtb	r3, r3
100416bc:	2b06      	cmp	r3, #6
100416be:	d000      	beq.n	100416c2 <COMM_Event_Handler+0x506>
100416c0:	e098      	b.n	100417f4 <COMM_Event_Handler+0x638>
			sevent.stop = event.data;
100416c2:	1d3b      	adds	r3, r7, #4
100416c4:	885b      	ldrh	r3, [r3, #2]
100416c6:	b2da      	uxtb	r2, r3
100416c8:	4b63      	ldr	r3, [pc, #396]	@ (10041858 <COMM_Event_Handler+0x69c>)
100416ca:	70da      	strb	r2, [r3, #3]
			sprintf(text, "start time: %d:%d\n", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
100416cc:	1d3b      	adds	r3, r7, #4
100416ce:	885b      	ldrh	r3, [r3, #2]
100416d0:	10db      	asrs	r3, r3, #3
100416d2:	221f      	movs	r2, #31
100416d4:	4013      	ands	r3, r2
100416d6:	001c      	movs	r4, r3
100416d8:	1d3b      	adds	r3, r7, #4
100416da:	885b      	ldrh	r3, [r3, #2]
100416dc:	001a      	movs	r2, r3
100416de:	2303      	movs	r3, #3
100416e0:	401a      	ands	r2, r3
100416e2:	0013      	movs	r3, r2
100416e4:	011b      	lsls	r3, r3, #4
100416e6:	1a9b      	subs	r3, r3, r2
100416e8:	495e      	ldr	r1, [pc, #376]	@ (10041864 <COMM_Event_Handler+0x6a8>)
100416ea:	2534      	movs	r5, #52	@ 0x34
100416ec:	1978      	adds	r0, r7, r5
100416ee:	0022      	movs	r2, r4
100416f0:	f008 faf0 	bl	10049cd4 <siprintf>
			discountprintf(text);
100416f4:	197b      	adds	r3, r7, r5
100416f6:	0018      	movs	r0, r3
100416f8:	f000 f8bc 	bl	10041874 <discountprintf>
			//record end time here
			next = schedulefolder;
100416fc:	2376      	movs	r3, #118	@ 0x76
100416fe:	18fb      	adds	r3, r7, r3
10041700:	220d      	movs	r2, #13
10041702:	701a      	strb	r2, [r3, #0]
			transition = true;
10041704:	2377      	movs	r3, #119	@ 0x77
10041706:	18fb      	adds	r3, r7, r3
10041708:	2201      	movs	r2, #1
1004170a:	701a      	strb	r2, [r3, #0]
		}
		break;
1004170c:	e072      	b.n	100417f4 <COMM_Event_Handler+0x638>
	case schedulefolder:
		if(event.status == EVENT_USART){
1004170e:	1d3b      	adds	r3, r7, #4
10041710:	781b      	ldrb	r3, [r3, #0]
10041712:	b25b      	sxtb	r3, r3
10041714:	2b06      	cmp	r3, #6
10041716:	d000      	beq.n	1004171a <COMM_Event_Handler+0x55e>
10041718:	e06e      	b.n	100417f8 <COMM_Event_Handler+0x63c>
			sevent.folder = event.data;
1004171a:	1d3b      	adds	r3, r7, #4
1004171c:	885b      	ldrh	r3, [r3, #2]
1004171e:	b2da      	uxtb	r2, r3
10041720:	4b4d      	ldr	r3, [pc, #308]	@ (10041858 <COMM_Event_Handler+0x69c>)
10041722:	711a      	strb	r2, [r3, #4]
			sprintf(text, "folder#: %d\n", event.data);
10041724:	1d3b      	adds	r3, r7, #4
10041726:	885b      	ldrh	r3, [r3, #2]
10041728:	001a      	movs	r2, r3
1004172a:	494f      	ldr	r1, [pc, #316]	@ (10041868 <COMM_Event_Handler+0x6ac>)
1004172c:	2434      	movs	r4, #52	@ 0x34
1004172e:	193b      	adds	r3, r7, r4
10041730:	0018      	movs	r0, r3
10041732:	f008 facf 	bl	10049cd4 <siprintf>
			discountprintf(text);
10041736:	193b      	adds	r3, r7, r4
10041738:	0018      	movs	r0, r3
1004173a:	f000 f89b 	bl	10041874 <discountprintf>
			//record end time here
			next = scheduletrack;
1004173e:	2376      	movs	r3, #118	@ 0x76
10041740:	18fb      	adds	r3, r7, r3
10041742:	220e      	movs	r2, #14
10041744:	701a      	strb	r2, [r3, #0]
			transition = true;
10041746:	2377      	movs	r3, #119	@ 0x77
10041748:	18fb      	adds	r3, r7, r3
1004174a:	2201      	movs	r2, #1
1004174c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004174e:	e053      	b.n	100417f8 <COMM_Event_Handler+0x63c>
	case scheduletrack:
		if(event.status == EVENT_USART){
10041750:	1d3b      	adds	r3, r7, #4
10041752:	781b      	ldrb	r3, [r3, #0]
10041754:	b25b      	sxtb	r3, r3
10041756:	2b06      	cmp	r3, #6
10041758:	d150      	bne.n	100417fc <COMM_Event_Handler+0x640>
			sevent.track = event.data;
1004175a:	1d3b      	adds	r3, r7, #4
1004175c:	885b      	ldrh	r3, [r3, #2]
1004175e:	b2da      	uxtb	r2, r3
10041760:	4b3d      	ldr	r3, [pc, #244]	@ (10041858 <COMM_Event_Handler+0x69c>)
10041762:	715a      	strb	r2, [r3, #5]
			sprintf(text, "track#: %d\n", event.data);
10041764:	1d3b      	adds	r3, r7, #4
10041766:	885b      	ldrh	r3, [r3, #2]
10041768:	001a      	movs	r2, r3
1004176a:	4940      	ldr	r1, [pc, #256]	@ (1004186c <COMM_Event_Handler+0x6b0>)
1004176c:	2434      	movs	r4, #52	@ 0x34
1004176e:	193b      	adds	r3, r7, r4
10041770:	0018      	movs	r0, r3
10041772:	f008 faaf 	bl	10049cd4 <siprintf>
			discountprintf(text);
10041776:	193b      	adds	r3, r7, r4
10041778:	0018      	movs	r0, r3
1004177a:	f000 f87b 	bl	10041874 <discountprintf>
			//record end time here
			next = schedulemonth;
1004177e:	2376      	movs	r3, #118	@ 0x76
10041780:	18fb      	adds	r3, r7, r3
10041782:	2209      	movs	r2, #9
10041784:	701a      	strb	r2, [r3, #0]
			transition = true;
10041786:	2377      	movs	r3, #119	@ 0x77
10041788:	18fb      	adds	r3, r7, r3
1004178a:	2201      	movs	r2, #1
1004178c:	701a      	strb	r2, [r3, #0]
			numevents++;
1004178e:	4b30      	ldr	r3, [pc, #192]	@ (10041850 <COMM_Event_Handler+0x694>)
10041790:	781b      	ldrb	r3, [r3, #0]
10041792:	3301      	adds	r3, #1
10041794:	b2da      	uxtb	r2, r3
10041796:	4b2e      	ldr	r3, [pc, #184]	@ (10041850 <COMM_Event_Handler+0x694>)
10041798:	701a      	strb	r2, [r3, #0]
		}
		break;
1004179a:	e02f      	b.n	100417fc <COMM_Event_Handler+0x640>
	case scheduleend:
		if(event.status == EVENT_USART){
1004179c:	1d3b      	adds	r3, r7, #4
1004179e:	781b      	ldrb	r3, [r3, #0]
100417a0:	b25b      	sxtb	r3, r3
100417a2:	2b06      	cmp	r3, #6
100417a4:	d12c      	bne.n	10041800 <COMM_Event_Handler+0x644>
			if(event.data == SCHEDULEEND){
100417a6:	1d3b      	adds	r3, r7, #4
100417a8:	885b      	ldrh	r3, [r3, #2]
100417aa:	2b0d      	cmp	r3, #13
100417ac:	d128      	bne.n	10041800 <COMM_Event_Handler+0x644>
				next = idle;
100417ae:	2376      	movs	r3, #118	@ 0x76
100417b0:	18fb      	adds	r3, r7, r3
100417b2:	2201      	movs	r2, #1
100417b4:	701a      	strb	r2, [r3, #0]
				transition = true;
100417b6:	2377      	movs	r3, #119	@ 0x77
100417b8:	18fb      	adds	r3, r7, r3
100417ba:	2201      	movs	r2, #1
100417bc:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
100417be:	e01f      	b.n	10041800 <COMM_Event_Handler+0x644>
	default:
		break;
100417c0:	46c0      	nop			@ (mov r8, r8)
100417c2:	e01e      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417c4:	46c0      	nop			@ (mov r8, r8)
100417c6:	e01c      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417c8:	46c0      	nop			@ (mov r8, r8)
100417ca:	e01a      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417cc:	46c0      	nop			@ (mov r8, r8)
100417ce:	e018      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417d0:	46c0      	nop			@ (mov r8, r8)
100417d2:	e016      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417d4:	46c0      	nop			@ (mov r8, r8)
100417d6:	e014      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417d8:	46c0      	nop			@ (mov r8, r8)
100417da:	e012      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417dc:	46c0      	nop			@ (mov r8, r8)
100417de:	e010      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417e0:	46c0      	nop			@ (mov r8, r8)
100417e2:	e00e      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417e4:	46c0      	nop			@ (mov r8, r8)
100417e6:	e00c      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417e8:	46c0      	nop			@ (mov r8, r8)
100417ea:	e00a      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417ec:	46c0      	nop			@ (mov r8, r8)
100417ee:	e008      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417f0:	46c0      	nop			@ (mov r8, r8)
100417f2:	e006      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417f4:	46c0      	nop			@ (mov r8, r8)
100417f6:	e004      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417f8:	46c0      	nop			@ (mov r8, r8)
100417fa:	e002      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
100417fc:	46c0      	nop			@ (mov r8, r8)
100417fe:	e000      	b.n	10041802 <COMM_Event_Handler+0x646>
		break;
10041800:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
10041802:	2377      	movs	r3, #119	@ 0x77
10041804:	18fb      	adds	r3, r7, r3
10041806:	781b      	ldrb	r3, [r3, #0]
10041808:	2b00      	cmp	r3, #0
1004180a:	d01a      	beq.n	10041842 <COMM_Event_Handler+0x686>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
1004180c:	2110      	movs	r1, #16
1004180e:	187b      	adds	r3, r7, r1
10041810:	2200      	movs	r2, #0
10041812:	601a      	str	r2, [r3, #0]
10041814:	187b      	adds	r3, r7, r1
10041816:	2203      	movs	r2, #3
10041818:	701a      	strb	r2, [r3, #0]
1004181a:	187b      	adds	r3, r7, r1
1004181c:	6818      	ldr	r0, [r3, #0]
1004181e:	f7ff fccd 	bl	100411bc <COMM_Event_Handler>
		commSM = next;
10041822:	4b13      	ldr	r3, [pc, #76]	@ (10041870 <COMM_Event_Handler+0x6b4>)
10041824:	2276      	movs	r2, #118	@ 0x76
10041826:	18ba      	adds	r2, r7, r2
10041828:	7812      	ldrb	r2, [r2, #0]
1004182a:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
1004182c:	210c      	movs	r1, #12
1004182e:	187b      	adds	r3, r7, r1
10041830:	2200      	movs	r2, #0
10041832:	601a      	str	r2, [r3, #0]
10041834:	187b      	adds	r3, r7, r1
10041836:	2202      	movs	r2, #2
10041838:	701a      	strb	r2, [r3, #0]
1004183a:	187b      	adds	r3, r7, r1
1004183c:	6818      	ldr	r0, [r3, #0]
1004183e:	f7ff fcbd 	bl	100411bc <COMM_Event_Handler>
	}
	return 1;
10041842:	2301      	movs	r3, #1
}
10041844:	0018      	movs	r0, r3
10041846:	46bd      	mov	sp, r7
10041848:	b01e      	add	sp, #120	@ 0x78
1004184a:	bdb0      	pop	{r4, r5, r7, pc}
1004184c:	1004a55c 	.word	0x1004a55c
10041850:	200001aa 	.word	0x200001aa
10041854:	1004a570 	.word	0x1004a570
10041858:	200001a4 	.word	0x200001a4
1004185c:	1004a590 	.word	0x1004a590
10041860:	1004a59c 	.word	0x1004a59c
10041864:	1004a5a8 	.word	0x1004a5a8
10041868:	1004a5bc 	.word	0x1004a5bc
1004186c:	1004a5cc 	.word	0x1004a5cc
10041870:	20000195 	.word	0x20000195

10041874 <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
10041874:	b580      	push	{r7, lr}
10041876:	b084      	sub	sp, #16
10041878:	af00      	add	r7, sp, #0
1004187a:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
1004187c:	687b      	ldr	r3, [r7, #4]
1004187e:	0018      	movs	r0, r3
10041880:	f7fe fc40 	bl	10040104 <strlen>
10041884:	0003      	movs	r3, r0
10041886:	60bb      	str	r3, [r7, #8]
	//USART_WriteTx(DEBUGPRINT);
	for(int i = 0; i < length; i++){
10041888:	2300      	movs	r3, #0
1004188a:	60fb      	str	r3, [r7, #12]
1004188c:	e009      	b.n	100418a2 <discountprintf+0x2e>
		USART_WriteTx(text[i]);
1004188e:	68fb      	ldr	r3, [r7, #12]
10041890:	687a      	ldr	r2, [r7, #4]
10041892:	18d3      	adds	r3, r2, r3
10041894:	781b      	ldrb	r3, [r3, #0]
10041896:	0018      	movs	r0, r3
10041898:	f001 fccc 	bl	10043234 <USART_WriteTx>
	for(int i = 0; i < length; i++){
1004189c:	68fb      	ldr	r3, [r7, #12]
1004189e:	3301      	adds	r3, #1
100418a0:	60fb      	str	r3, [r7, #12]
100418a2:	68fa      	ldr	r2, [r7, #12]
100418a4:	68bb      	ldr	r3, [r7, #8]
100418a6:	429a      	cmp	r2, r3
100418a8:	dbf1      	blt.n	1004188e <discountprintf+0x1a>
	}
	//USART_WriteTx(DEBUGPRINTEND);
	return 1;
100418aa:	2301      	movs	r3, #1
}
100418ac:	0018      	movs	r0, r3
100418ae:	46bd      	mov	sp, r7
100418b0:	b004      	add	sp, #16
100418b2:	bd80      	pop	{r7, pc}

100418b4 <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
100418b4:	b580      	push	{r7, lr}
100418b6:	b082      	sub	sp, #8
100418b8:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
100418ba:	200c      	movs	r0, #12
100418bc:	f008 f944 	bl	10049b48 <malloc>
100418c0:	0003      	movs	r3, r0
100418c2:	607b      	str	r3, [r7, #4]
	if(new == NULL){
100418c4:	687b      	ldr	r3, [r7, #4]
100418c6:	2b00      	cmp	r3, #0
100418c8:	d101      	bne.n	100418ce <FIFO_Create+0x1a>
		return NULL;
100418ca:	2300      	movs	r3, #0
100418cc:	e009      	b.n	100418e2 <FIFO_Create+0x2e>
	}
	new->first = NULL;
100418ce:	687b      	ldr	r3, [r7, #4]
100418d0:	2200      	movs	r2, #0
100418d2:	601a      	str	r2, [r3, #0]
	new->last = NULL;
100418d4:	687b      	ldr	r3, [r7, #4]
100418d6:	2200      	movs	r2, #0
100418d8:	605a      	str	r2, [r3, #4]
	new->size = 0;
100418da:	687b      	ldr	r3, [r7, #4]
100418dc:	2200      	movs	r2, #0
100418de:	811a      	strh	r2, [r3, #8]
	return new;
100418e0:	687b      	ldr	r3, [r7, #4]
}
100418e2:	0018      	movs	r0, r3
100418e4:	46bd      	mov	sp, r7
100418e6:	b002      	add	sp, #8
100418e8:	bd80      	pop	{r7, pc}

100418ea <FIFO_Enqueue>:
	}
	free(doomed);
	return 1;
}

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
100418ea:	b580      	push	{r7, lr}
100418ec:	b084      	sub	sp, #16
100418ee:	af00      	add	r7, sp, #0
100418f0:	6078      	str	r0, [r7, #4]
100418f2:	003b      	movs	r3, r7
100418f4:	6019      	str	r1, [r3, #0]
	if(list == NULL){
100418f6:	687b      	ldr	r3, [r7, #4]
100418f8:	2b00      	cmp	r3, #0
100418fa:	d101      	bne.n	10041900 <FIFO_Enqueue+0x16>
		return 0;
100418fc:	2300      	movs	r3, #0
100418fe:	e026      	b.n	1004194e <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
10041900:	2008      	movs	r0, #8
10041902:	f008 f921 	bl	10049b48 <malloc>
10041906:	0003      	movs	r3, r0
10041908:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
1004190a:	68fb      	ldr	r3, [r7, #12]
1004190c:	2b00      	cmp	r3, #0
1004190e:	d101      	bne.n	10041914 <FIFO_Enqueue+0x2a>
		return 0;
10041910:	2300      	movs	r3, #0
10041912:	e01c      	b.n	1004194e <FIFO_Enqueue+0x64>
	}
	new->event = event;
10041914:	68fb      	ldr	r3, [r7, #12]
10041916:	003a      	movs	r2, r7
10041918:	6812      	ldr	r2, [r2, #0]
1004191a:	601a      	str	r2, [r3, #0]
	new->next = NULL;
1004191c:	68fb      	ldr	r3, [r7, #12]
1004191e:	2200      	movs	r2, #0
10041920:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
10041922:	687b      	ldr	r3, [r7, #4]
10041924:	685b      	ldr	r3, [r3, #4]
10041926:	2b00      	cmp	r3, #0
10041928:	d004      	beq.n	10041934 <FIFO_Enqueue+0x4a>
		list->last->next = new;
1004192a:	687b      	ldr	r3, [r7, #4]
1004192c:	685b      	ldr	r3, [r3, #4]
1004192e:	68fa      	ldr	r2, [r7, #12]
10041930:	605a      	str	r2, [r3, #4]
10041932:	e002      	b.n	1004193a <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
10041934:	687b      	ldr	r3, [r7, #4]
10041936:	68fa      	ldr	r2, [r7, #12]
10041938:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
1004193a:	687b      	ldr	r3, [r7, #4]
1004193c:	68fa      	ldr	r2, [r7, #12]
1004193e:	605a      	str	r2, [r3, #4]
	list->size++;
10041940:	687b      	ldr	r3, [r7, #4]
10041942:	891b      	ldrh	r3, [r3, #8]
10041944:	3301      	adds	r3, #1
10041946:	b29a      	uxth	r2, r3
10041948:	687b      	ldr	r3, [r7, #4]
1004194a:	811a      	strh	r2, [r3, #8]
	return 1;
1004194c:	2301      	movs	r3, #1
}
1004194e:	0018      	movs	r0, r3
10041950:	46bd      	mov	sp, r7
10041952:	b004      	add	sp, #16
10041954:	bd80      	pop	{r7, pc}

10041956 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
10041956:	b590      	push	{r4, r7, lr}
10041958:	b089      	sub	sp, #36	@ 0x24
1004195a:	af00      	add	r7, sp, #0
1004195c:	6078      	str	r0, [r7, #4]
	if(list == NULL){
1004195e:	687b      	ldr	r3, [r7, #4]
10041960:	2b00      	cmp	r3, #0
10041962:	d107      	bne.n	10041974 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
10041964:	2118      	movs	r1, #24
10041966:	187b      	adds	r3, r7, r1
10041968:	22ff      	movs	r2, #255	@ 0xff
1004196a:	701a      	strb	r2, [r3, #0]
1004196c:	187b      	adds	r3, r7, r1
1004196e:	2200      	movs	r2, #0
10041970:	805a      	strh	r2, [r3, #2]
10041972:	e030      	b.n	100419d6 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
10041974:	687b      	ldr	r3, [r7, #4]
10041976:	681b      	ldr	r3, [r3, #0]
10041978:	2b00      	cmp	r3, #0
1004197a:	d10a      	bne.n	10041992 <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
1004197c:	687b      	ldr	r3, [r7, #4]
1004197e:	2200      	movs	r2, #0
10041980:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
10041982:	2118      	movs	r1, #24
10041984:	187b      	adds	r3, r7, r1
10041986:	2200      	movs	r2, #0
10041988:	701a      	strb	r2, [r3, #0]
1004198a:	187b      	adds	r3, r7, r1
1004198c:	2200      	movs	r2, #0
1004198e:	805a      	strh	r2, [r3, #2]
10041990:	e021      	b.n	100419d6 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
10041992:	687b      	ldr	r3, [r7, #4]
10041994:	681b      	ldr	r3, [r3, #0]
10041996:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10041998:	69fb      	ldr	r3, [r7, #28]
1004199a:	685a      	ldr	r2, [r3, #4]
1004199c:	687b      	ldr	r3, [r7, #4]
1004199e:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
100419a0:	687b      	ldr	r3, [r7, #4]
100419a2:	681b      	ldr	r3, [r3, #0]
100419a4:	2b00      	cmp	r3, #0
100419a6:	d102      	bne.n	100419ae <FIFO_Dequeue+0x58>
		list->last = NULL;
100419a8:	687b      	ldr	r3, [r7, #4]
100419aa:	2200      	movs	r2, #0
100419ac:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
100419ae:	2414      	movs	r4, #20
100419b0:	193b      	adds	r3, r7, r4
100419b2:	69fa      	ldr	r2, [r7, #28]
100419b4:	6812      	ldr	r2, [r2, #0]
100419b6:	601a      	str	r2, [r3, #0]
	free(doomed);
100419b8:	69fb      	ldr	r3, [r7, #28]
100419ba:	0018      	movs	r0, r3
100419bc:	f008 f8ce 	bl	10049b5c <free>
	list->size--;
100419c0:	687b      	ldr	r3, [r7, #4]
100419c2:	891b      	ldrh	r3, [r3, #8]
100419c4:	3b01      	subs	r3, #1
100419c6:	b29a      	uxth	r2, r3
100419c8:	687b      	ldr	r3, [r7, #4]
100419ca:	811a      	strh	r2, [r3, #8]
	return out;
100419cc:	2318      	movs	r3, #24
100419ce:	18fb      	adds	r3, r7, r3
100419d0:	193a      	adds	r2, r7, r4
100419d2:	6812      	ldr	r2, [r2, #0]
100419d4:	601a      	str	r2, [r3, #0]

}
100419d6:	2318      	movs	r3, #24
100419d8:	18fa      	adds	r2, r7, r3
100419da:	2300      	movs	r3, #0
100419dc:	8811      	ldrh	r1, [r2, #0]
100419de:	0409      	lsls	r1, r1, #16
100419e0:	0c09      	lsrs	r1, r1, #16
100419e2:	0c1b      	lsrs	r3, r3, #16
100419e4:	041b      	lsls	r3, r3, #16
100419e6:	430b      	orrs	r3, r1
100419e8:	8852      	ldrh	r2, [r2, #2]
100419ea:	0412      	lsls	r2, r2, #16
100419ec:	041b      	lsls	r3, r3, #16
100419ee:	0c1b      	lsrs	r3, r3, #16
100419f0:	4313      	orrs	r3, r2
100419f2:	0018      	movs	r0, r3
100419f4:	46bd      	mov	sp, r7
100419f6:	b009      	add	sp, #36	@ 0x24
100419f8:	bd90      	pop	{r4, r7, pc}

100419fa <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
100419fa:	b580      	push	{r7, lr}
100419fc:	b082      	sub	sp, #8
100419fe:	af00      	add	r7, sp, #0
10041a00:	6078      	str	r0, [r7, #4]
	return list->size;
10041a02:	687b      	ldr	r3, [r7, #4]
10041a04:	891b      	ldrh	r3, [r3, #8]
10041a06:	1e5a      	subs	r2, r3, #1
10041a08:	4193      	sbcs	r3, r2
10041a0a:	b2db      	uxtb	r3, r3
}
10041a0c:	0018      	movs	r0, r3
10041a0e:	46bd      	mov	sp, r7
10041a10:	b002      	add	sp, #8
10041a12:	bd80      	pop	{r7, pc}

10041a14 <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
10041a14:	b580      	push	{r7, lr}
10041a16:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041a18:	4b05      	ldr	r3, [pc, #20]	@ (10041a30 <FLASH_GetVolume+0x1c>)
10041a1a:	781b      	ldrb	r3, [r3, #0]
10041a1c:	2b00      	cmp	r3, #0
10041a1e:	d101      	bne.n	10041a24 <FLASH_GetVolume+0x10>
10041a20:	2300      	movs	r3, #0
10041a22:	e001      	b.n	10041a28 <FLASH_GetVolume+0x14>
	return (uint8_t)(*((uint8_t*)VOLUMEADDRESS));
10041a24:	4b03      	ldr	r3, [pc, #12]	@ (10041a34 <FLASH_GetVolume+0x20>)
10041a26:	781b      	ldrb	r3, [r3, #0]
}
10041a28:	0018      	movs	r0, r3
10041a2a:	46bd      	mov	sp, r7
10041a2c:	bd80      	pop	{r7, pc}
10041a2e:	46c0      	nop			@ (mov r8, r8)
10041a30:	200001b0 	.word	0x200001b0
10041a34:	1006f800 	.word	0x1006f800

10041a38 <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
10041a38:	b580      	push	{r7, lr}
10041a3a:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041a3c:	4b05      	ldr	r3, [pc, #20]	@ (10041a54 <FLASH_GetDutyCycle+0x1c>)
10041a3e:	781b      	ldrb	r3, [r3, #0]
10041a40:	2b00      	cmp	r3, #0
10041a42:	d101      	bne.n	10041a48 <FLASH_GetDutyCycle+0x10>
10041a44:	2300      	movs	r3, #0
10041a46:	e001      	b.n	10041a4c <FLASH_GetDutyCycle+0x14>
	return (uint8_t)(*((uint8_t*)DCADDRESS));
10041a48:	4b03      	ldr	r3, [pc, #12]	@ (10041a58 <FLASH_GetDutyCycle+0x20>)
10041a4a:	781b      	ldrb	r3, [r3, #0]
}
10041a4c:	0018      	movs	r0, r3
10041a4e:	46bd      	mov	sp, r7
10041a50:	bd80      	pop	{r7, pc}
10041a52:	46c0      	nop			@ (mov r8, r8)
10041a54:	200001b0 	.word	0x200001b0
10041a58:	1006f801 	.word	0x1006f801

10041a5c <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
10041a5c:	b580      	push	{r7, lr}
10041a5e:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041a60:	4b05      	ldr	r3, [pc, #20]	@ (10041a78 <FLASH_GetLogsSize+0x1c>)
10041a62:	781b      	ldrb	r3, [r3, #0]
10041a64:	2b00      	cmp	r3, #0
10041a66:	d101      	bne.n	10041a6c <FLASH_GetLogsSize+0x10>
10041a68:	2300      	movs	r3, #0
10041a6a:	e001      	b.n	10041a70 <FLASH_GetLogsSize+0x14>
	return LogsSize;
10041a6c:	4b03      	ldr	r3, [pc, #12]	@ (10041a7c <FLASH_GetLogsSize+0x20>)
10041a6e:	881b      	ldrh	r3, [r3, #0]
}
10041a70:	0018      	movs	r0, r3
10041a72:	46bd      	mov	sp, r7
10041a74:	bd80      	pop	{r7, pc}
10041a76:	46c0      	nop			@ (mov r8, r8)
10041a78:	200001b0 	.word	0x200001b0
10041a7c:	200001ae 	.word	0x200001ae

10041a80 <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
10041a80:	b590      	push	{r4, r7, lr}
10041a82:	b087      	sub	sp, #28
10041a84:	af00      	add	r7, sp, #0
10041a86:	6078      	str	r0, [r7, #4]
10041a88:	000a      	movs	r2, r1
10041a8a:	1cbb      	adds	r3, r7, #2
10041a8c:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10041a8e:	2410      	movs	r4, #16
10041a90:	193b      	adds	r3, r7, r4
10041a92:	0018      	movs	r0, r3
10041a94:	2306      	movs	r3, #6
10041a96:	001a      	movs	r2, r3
10041a98:	2100      	movs	r1, #0
10041a9a:	f008 f93b 	bl	10049d14 <memset>
	if(!initialized){return event;}
10041a9e:	4b2e      	ldr	r3, [pc, #184]	@ (10041b58 <FLASH_ReadLogs+0xd8>)
10041aa0:	781b      	ldrb	r3, [r3, #0]
10041aa2:	2b00      	cmp	r3, #0
10041aa4:	d108      	bne.n	10041ab8 <FLASH_ReadLogs+0x38>
10041aa6:	687a      	ldr	r2, [r7, #4]
10041aa8:	193b      	adds	r3, r7, r4
10041aaa:	0010      	movs	r0, r2
10041aac:	0019      	movs	r1, r3
10041aae:	2306      	movs	r3, #6
10041ab0:	001a      	movs	r2, r3
10041ab2:	f008 f951 	bl	10049d58 <memcpy>
10041ab6:	e04a      	b.n	10041b4e <FLASH_ReadLogs+0xce>
	if(index >= 0 && index <= LogsSize){
10041ab8:	4b28      	ldr	r3, [pc, #160]	@ (10041b5c <FLASH_ReadLogs+0xdc>)
10041aba:	881b      	ldrh	r3, [r3, #0]
10041abc:	1cba      	adds	r2, r7, #2
10041abe:	8812      	ldrh	r2, [r2, #0]
10041ac0:	429a      	cmp	r2, r3
10041ac2:	d83b      	bhi.n	10041b3c <FLASH_ReadLogs+0xbc>
		event.month = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE);
10041ac4:	1cbb      	adds	r3, r7, #2
10041ac6:	881b      	ldrh	r3, [r3, #0]
10041ac8:	4a25      	ldr	r2, [pc, #148]	@ (10041b60 <FLASH_ReadLogs+0xe0>)
10041aca:	4694      	mov	ip, r2
10041acc:	4463      	add	r3, ip
10041ace:	00db      	lsls	r3, r3, #3
10041ad0:	781a      	ldrb	r2, [r3, #0]
10041ad2:	2110      	movs	r1, #16
10041ad4:	187b      	adds	r3, r7, r1
10041ad6:	701a      	strb	r2, [r3, #0]
		event.day = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1);
10041ad8:	1cbb      	adds	r3, r7, #2
10041ada:	881b      	ldrh	r3, [r3, #0]
10041adc:	4a20      	ldr	r2, [pc, #128]	@ (10041b60 <FLASH_ReadLogs+0xe0>)
10041ade:	4694      	mov	ip, r2
10041ae0:	4463      	add	r3, ip
10041ae2:	00db      	lsls	r3, r3, #3
10041ae4:	3301      	adds	r3, #1
10041ae6:	781a      	ldrb	r2, [r3, #0]
10041ae8:	187b      	adds	r3, r7, r1
10041aea:	705a      	strb	r2, [r3, #1]
		event.start = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2);
10041aec:	1cbb      	adds	r3, r7, #2
10041aee:	881b      	ldrh	r3, [r3, #0]
10041af0:	4a1b      	ldr	r2, [pc, #108]	@ (10041b60 <FLASH_ReadLogs+0xe0>)
10041af2:	4694      	mov	ip, r2
10041af4:	4463      	add	r3, ip
10041af6:	00db      	lsls	r3, r3, #3
10041af8:	3302      	adds	r3, #2
10041afa:	781a      	ldrb	r2, [r3, #0]
10041afc:	187b      	adds	r3, r7, r1
10041afe:	709a      	strb	r2, [r3, #2]
		event.stop = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3);
10041b00:	1cbb      	adds	r3, r7, #2
10041b02:	881b      	ldrh	r3, [r3, #0]
10041b04:	4a16      	ldr	r2, [pc, #88]	@ (10041b60 <FLASH_ReadLogs+0xe0>)
10041b06:	4694      	mov	ip, r2
10041b08:	4463      	add	r3, ip
10041b0a:	00db      	lsls	r3, r3, #3
10041b0c:	3303      	adds	r3, #3
10041b0e:	781a      	ldrb	r2, [r3, #0]
10041b10:	187b      	adds	r3, r7, r1
10041b12:	70da      	strb	r2, [r3, #3]
		event.folder = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4);
10041b14:	1cbb      	adds	r3, r7, #2
10041b16:	881b      	ldrh	r3, [r3, #0]
10041b18:	4a11      	ldr	r2, [pc, #68]	@ (10041b60 <FLASH_ReadLogs+0xe0>)
10041b1a:	4694      	mov	ip, r2
10041b1c:	4463      	add	r3, ip
10041b1e:	00db      	lsls	r3, r3, #3
10041b20:	3304      	adds	r3, #4
10041b22:	781a      	ldrb	r2, [r3, #0]
10041b24:	187b      	adds	r3, r7, r1
10041b26:	711a      	strb	r2, [r3, #4]
		event.track = *(uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5);
10041b28:	1cbb      	adds	r3, r7, #2
10041b2a:	881b      	ldrh	r3, [r3, #0]
10041b2c:	4a0c      	ldr	r2, [pc, #48]	@ (10041b60 <FLASH_ReadLogs+0xe0>)
10041b2e:	4694      	mov	ip, r2
10041b30:	4463      	add	r3, ip
10041b32:	00db      	lsls	r3, r3, #3
10041b34:	3305      	adds	r3, #5
10041b36:	781a      	ldrb	r2, [r3, #0]
10041b38:	187b      	adds	r3, r7, r1
10041b3a:	715a      	strb	r2, [r3, #5]

	}
	return event;
10041b3c:	687a      	ldr	r2, [r7, #4]
10041b3e:	2310      	movs	r3, #16
10041b40:	18fb      	adds	r3, r7, r3
10041b42:	0010      	movs	r0, r2
10041b44:	0019      	movs	r1, r3
10041b46:	2306      	movs	r3, #6
10041b48:	001a      	movs	r2, r3
10041b4a:	f008 f905 	bl	10049d58 <memcpy>
}
10041b4e:	6878      	ldr	r0, [r7, #4]
10041b50:	46bd      	mov	sp, r7
10041b52:	b007      	add	sp, #28
10041b54:	bd90      	pop	{r4, r7, pc}
10041b56:	46c0      	nop			@ (mov r8, r8)
10041b58:	200001b0 	.word	0x200001b0
10041b5c:	200001ae 	.word	0x200001ae
10041b60:	0200dd00 	.word	0x0200dd00

10041b64 <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
10041b64:	b580      	push	{r7, lr}
10041b66:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041b68:	4b05      	ldr	r3, [pc, #20]	@ (10041b80 <FLASH_GetScheduleSize+0x1c>)
10041b6a:	781b      	ldrb	r3, [r3, #0]
10041b6c:	2b00      	cmp	r3, #0
10041b6e:	d101      	bne.n	10041b74 <FLASH_GetScheduleSize+0x10>
10041b70:	2300      	movs	r3, #0
10041b72:	e001      	b.n	10041b78 <FLASH_GetScheduleSize+0x14>
	return ScheduleSize;
10041b74:	4b03      	ldr	r3, [pc, #12]	@ (10041b84 <FLASH_GetScheduleSize+0x20>)
10041b76:	881b      	ldrh	r3, [r3, #0]
}
10041b78:	0018      	movs	r0, r3
10041b7a:	46bd      	mov	sp, r7
10041b7c:	bd80      	pop	{r7, pc}
10041b7e:	46c0      	nop			@ (mov r8, r8)
10041b80:	200001b0 	.word	0x200001b0
10041b84:	200001ac 	.word	0x200001ac

10041b88 <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
10041b88:	b590      	push	{r4, r7, lr}
10041b8a:	b087      	sub	sp, #28
10041b8c:	af00      	add	r7, sp, #0
10041b8e:	6078      	str	r0, [r7, #4]
10041b90:	000a      	movs	r2, r1
10041b92:	1cbb      	adds	r3, r7, #2
10041b94:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10041b96:	2410      	movs	r4, #16
10041b98:	193b      	adds	r3, r7, r4
10041b9a:	0018      	movs	r0, r3
10041b9c:	2306      	movs	r3, #6
10041b9e:	001a      	movs	r2, r3
10041ba0:	2100      	movs	r1, #0
10041ba2:	f008 f8b7 	bl	10049d14 <memset>
	if(!initialized){return event;}
10041ba6:	4b2e      	ldr	r3, [pc, #184]	@ (10041c60 <FLASH_ReadSchedule+0xd8>)
10041ba8:	781b      	ldrb	r3, [r3, #0]
10041baa:	2b00      	cmp	r3, #0
10041bac:	d108      	bne.n	10041bc0 <FLASH_ReadSchedule+0x38>
10041bae:	687a      	ldr	r2, [r7, #4]
10041bb0:	193b      	adds	r3, r7, r4
10041bb2:	0010      	movs	r0, r2
10041bb4:	0019      	movs	r1, r3
10041bb6:	2306      	movs	r3, #6
10041bb8:	001a      	movs	r2, r3
10041bba:	f008 f8cd 	bl	10049d58 <memcpy>
10041bbe:	e04a      	b.n	10041c56 <FLASH_ReadSchedule+0xce>
		if(index >= 0 && index <= LogsSize){
10041bc0:	4b28      	ldr	r3, [pc, #160]	@ (10041c64 <FLASH_ReadSchedule+0xdc>)
10041bc2:	881b      	ldrh	r3, [r3, #0]
10041bc4:	1cba      	adds	r2, r7, #2
10041bc6:	8812      	ldrh	r2, [r2, #0]
10041bc8:	429a      	cmp	r2, r3
10041bca:	d83b      	bhi.n	10041c44 <FLASH_ReadSchedule+0xbc>
			event.month = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE);
10041bcc:	1cbb      	adds	r3, r7, #2
10041bce:	881b      	ldrh	r3, [r3, #0]
10041bd0:	4a25      	ldr	r2, [pc, #148]	@ (10041c68 <FLASH_ReadSchedule+0xe0>)
10041bd2:	4694      	mov	ip, r2
10041bd4:	4463      	add	r3, ip
10041bd6:	00db      	lsls	r3, r3, #3
10041bd8:	781a      	ldrb	r2, [r3, #0]
10041bda:	2110      	movs	r1, #16
10041bdc:	187b      	adds	r3, r7, r1
10041bde:	701a      	strb	r2, [r3, #0]
			event.day = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+1);
10041be0:	1cbb      	adds	r3, r7, #2
10041be2:	881b      	ldrh	r3, [r3, #0]
10041be4:	4a20      	ldr	r2, [pc, #128]	@ (10041c68 <FLASH_ReadSchedule+0xe0>)
10041be6:	4694      	mov	ip, r2
10041be8:	4463      	add	r3, ip
10041bea:	00db      	lsls	r3, r3, #3
10041bec:	3301      	adds	r3, #1
10041bee:	781a      	ldrb	r2, [r3, #0]
10041bf0:	187b      	adds	r3, r7, r1
10041bf2:	705a      	strb	r2, [r3, #1]
			event.start = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+2);
10041bf4:	1cbb      	adds	r3, r7, #2
10041bf6:	881b      	ldrh	r3, [r3, #0]
10041bf8:	4a1b      	ldr	r2, [pc, #108]	@ (10041c68 <FLASH_ReadSchedule+0xe0>)
10041bfa:	4694      	mov	ip, r2
10041bfc:	4463      	add	r3, ip
10041bfe:	00db      	lsls	r3, r3, #3
10041c00:	3302      	adds	r3, #2
10041c02:	781a      	ldrb	r2, [r3, #0]
10041c04:	187b      	adds	r3, r7, r1
10041c06:	709a      	strb	r2, [r3, #2]
			event.stop = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+3);
10041c08:	1cbb      	adds	r3, r7, #2
10041c0a:	881b      	ldrh	r3, [r3, #0]
10041c0c:	4a16      	ldr	r2, [pc, #88]	@ (10041c68 <FLASH_ReadSchedule+0xe0>)
10041c0e:	4694      	mov	ip, r2
10041c10:	4463      	add	r3, ip
10041c12:	00db      	lsls	r3, r3, #3
10041c14:	3303      	adds	r3, #3
10041c16:	781a      	ldrb	r2, [r3, #0]
10041c18:	187b      	adds	r3, r7, r1
10041c1a:	70da      	strb	r2, [r3, #3]
			event.folder = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+4);
10041c1c:	1cbb      	adds	r3, r7, #2
10041c1e:	881b      	ldrh	r3, [r3, #0]
10041c20:	4a11      	ldr	r2, [pc, #68]	@ (10041c68 <FLASH_ReadSchedule+0xe0>)
10041c22:	4694      	mov	ip, r2
10041c24:	4463      	add	r3, ip
10041c26:	00db      	lsls	r3, r3, #3
10041c28:	3304      	adds	r3, #4
10041c2a:	781a      	ldrb	r2, [r3, #0]
10041c2c:	187b      	adds	r3, r7, r1
10041c2e:	711a      	strb	r2, [r3, #4]
			event.track = *(uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+5);
10041c30:	1cbb      	adds	r3, r7, #2
10041c32:	881b      	ldrh	r3, [r3, #0]
10041c34:	4a0c      	ldr	r2, [pc, #48]	@ (10041c68 <FLASH_ReadSchedule+0xe0>)
10041c36:	4694      	mov	ip, r2
10041c38:	4463      	add	r3, ip
10041c3a:	00db      	lsls	r3, r3, #3
10041c3c:	3305      	adds	r3, #5
10041c3e:	781a      	ldrb	r2, [r3, #0]
10041c40:	187b      	adds	r3, r7, r1
10041c42:	715a      	strb	r2, [r3, #5]

		}
		return event;
10041c44:	687a      	ldr	r2, [r7, #4]
10041c46:	2310      	movs	r3, #16
10041c48:	18fb      	adds	r3, r7, r3
10041c4a:	0010      	movs	r0, r2
10041c4c:	0019      	movs	r1, r3
10041c4e:	2306      	movs	r3, #6
10041c50:	001a      	movs	r2, r3
10041c52:	f008 f881 	bl	10049d58 <memcpy>
}
10041c56:	6878      	ldr	r0, [r7, #4]
10041c58:	46bd      	mov	sp, r7
10041c5a:	b007      	add	sp, #28
10041c5c:	bd90      	pop	{r4, r7, pc}
10041c5e:	46c0      	nop			@ (mov r8, r8)
10041c60:	200001b0 	.word	0x200001b0
10041c64:	200001ae 	.word	0x200001ae
10041c68:	0200de00 	.word	0x0200de00

10041c6c <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the internal button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 3rd bit is button 3
 */
uint8_t GPIO_ReadButtons(void){
10041c6c:	b5b0      	push	{r4, r5, r7, lr}
10041c6e:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10041c70:	4b17      	ldr	r3, [pc, #92]	@ (10041cd0 <GPIO_ReadButtons+0x64>)
10041c72:	781b      	ldrb	r3, [r3, #0]
10041c74:	2b00      	cmp	r3, #0
10041c76:	d101      	bne.n	10041c7c <GPIO_ReadButtons+0x10>
10041c78:	2300      	movs	r3, #0
10041c7a:	e025      	b.n	10041cc8 <GPIO_ReadButtons+0x5c>
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
10041c7c:	2390      	movs	r3, #144	@ 0x90
10041c7e:	05db      	lsls	r3, r3, #23
10041c80:	2101      	movs	r1, #1
10041c82:	0018      	movs	r0, r3
10041c84:	f002 fd47 	bl	10044716 <HAL_GPIO_ReadPin>
10041c88:	1e03      	subs	r3, r0, #0
10041c8a:	d101      	bne.n	10041c90 <GPIO_ReadButtons+0x24>
10041c8c:	2404      	movs	r4, #4
10041c8e:	e000      	b.n	10041c92 <GPIO_ReadButtons+0x26>
10041c90:	2400      	movs	r4, #0
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
10041c92:	4b10      	ldr	r3, [pc, #64]	@ (10041cd4 <GPIO_ReadButtons+0x68>)
10041c94:	2120      	movs	r1, #32
10041c96:	0018      	movs	r0, r3
10041c98:	f002 fd3d 	bl	10044716 <HAL_GPIO_ReadPin>
10041c9c:	1e03      	subs	r3, r0, #0
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
10041c9e:	d101      	bne.n	10041ca4 <GPIO_ReadButtons+0x38>
10041ca0:	2302      	movs	r3, #2
10041ca2:	e000      	b.n	10041ca6 <GPIO_ReadButtons+0x3a>
10041ca4:	2300      	movs	r3, #0
10041ca6:	4323      	orrs	r3, r4
10041ca8:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) << 0));
10041caa:	2380      	movs	r3, #128	@ 0x80
10041cac:	01db      	lsls	r3, r3, #7
10041cae:	4a09      	ldr	r2, [pc, #36]	@ (10041cd4 <GPIO_ReadButtons+0x68>)
10041cb0:	0019      	movs	r1, r3
10041cb2:	0010      	movs	r0, r2
10041cb4:	f002 fd2f 	bl	10044716 <HAL_GPIO_ReadPin>
10041cb8:	0003      	movs	r3, r0
10041cba:	425a      	negs	r2, r3
10041cbc:	4153      	adcs	r3, r2
10041cbe:	b2db      	uxtb	r3, r3
10041cc0:	b25b      	sxtb	r3, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
10041cc2:	4323      	orrs	r3, r4
10041cc4:	b25b      	sxtb	r3, r3
10041cc6:	b2db      	uxtb	r3, r3
}
10041cc8:	0018      	movs	r0, r3
10041cca:	46bd      	mov	sp, r7
10041ccc:	bdb0      	pop	{r4, r5, r7, pc}
10041cce:	46c0      	nop			@ (mov r8, r8)
10041cd0:	200001b2 	.word	0x200001b2
10041cd4:	48100000 	.word	0x48100000

10041cd8 <GPIO_Event_Init>:
 * @Function: GPIO_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t GPIO_Event_Init(FIFO Queue){
10041cd8:	b580      	push	{r7, lr}
10041cda:	b082      	sub	sp, #8
10041cdc:	af00      	add	r7, sp, #0
10041cde:	6078      	str	r0, [r7, #4]
	buttons = 0;
10041ce0:	4b0f      	ldr	r3, [pc, #60]	@ (10041d20 <GPIO_Event_Init+0x48>)
10041ce2:	2200      	movs	r2, #0
10041ce4:	701a      	strb	r2, [r3, #0]
	//Initialize dev board leds, for debug purposes
	BSP_LED_Init(LED_BLUE);
10041ce6:	2000      	movs	r0, #0
10041ce8:	f001 ff90 	bl	10043c0c <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
10041cec:	2001      	movs	r0, #1
10041cee:	f001 ff8d 	bl	10043c0c <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
10041cf2:	2002      	movs	r0, #2
10041cf4:	f001 ff8a 	bl	10043c0c <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(B1, BUTTON_MODE_GPIO);
10041cf8:	2100      	movs	r1, #0
10041cfa:	2000      	movs	r0, #0
10041cfc:	f002 f818 	bl	10043d30 <BSP_PB_Init>
	BSP_PB_Init(B2, BUTTON_MODE_GPIO);
10041d00:	2100      	movs	r1, #0
10041d02:	2001      	movs	r0, #1
10041d04:	f002 f814 	bl	10043d30 <BSP_PB_Init>
	BSP_PB_Init(B3, BUTTON_MODE_GPIO);
10041d08:	2100      	movs	r1, #0
10041d0a:	2002      	movs	r0, #2
10041d0c:	f002 f810 	bl	10043d30 <BSP_PB_Init>
	GPIOqueue = Queue;
10041d10:	4b04      	ldr	r3, [pc, #16]	@ (10041d24 <GPIO_Event_Init+0x4c>)
10041d12:	687a      	ldr	r2, [r7, #4]
10041d14:	601a      	str	r2, [r3, #0]
	//GPIO_Init()
	return HAL_OK;
10041d16:	2300      	movs	r3, #0

}
10041d18:	0018      	movs	r0, r3
10041d1a:	46bd      	mov	sp, r7
10041d1c:	b002      	add	sp, #8
10041d1e:	bd80      	pop	{r7, pc}
10041d20:	200001b1 	.word	0x200001b1
10041d24:	200001b4 	.word	0x200001b4

10041d28 <GPIO_Event_Updater>:
 * @Brief: Provides the event checker that checks and posts the changes in the buttons and the current buttons states
 * @param: none
 * @return: An event where the 16bit data is formatted at the 8 most significant bits representing the current states
 * 		 	and the least significant 8 bits representing the changes in the buttons states
 */
Event_t GPIO_Event_Updater(void){
10041d28:	b5f0      	push	{r4, r5, r6, r7, lr}
10041d2a:	b085      	sub	sp, #20
10041d2c:	af00      	add	r7, sp, #0
	uint8_t event = 0;
10041d2e:	260f      	movs	r6, #15
10041d30:	19bb      	adds	r3, r7, r6
10041d32:	2200      	movs	r2, #0
10041d34:	701a      	strb	r2, [r3, #0]
	Event_t update = {0, 0};//Initialize to no event
10041d36:	1d3b      	adds	r3, r7, #4
10041d38:	2200      	movs	r2, #0
10041d3a:	701a      	strb	r2, [r3, #0]
10041d3c:	1d3b      	adds	r3, r7, #4
10041d3e:	2200      	movs	r2, #0
10041d40:	805a      	strh	r2, [r3, #2]
	uint8_t newButtons = GPIO_ReadButtons();
10041d42:	250e      	movs	r5, #14
10041d44:	197c      	adds	r4, r7, r5
10041d46:	f7ff ff91 	bl	10041c6c <GPIO_ReadButtons>
10041d4a:	0003      	movs	r3, r0
10041d4c:	7023      	strb	r3, [r4, #0]
	if(newButtons != buttons){
10041d4e:	4b21      	ldr	r3, [pc, #132]	@ (10041dd4 <GPIO_Event_Updater+0xac>)
10041d50:	781b      	ldrb	r3, [r3, #0]
10041d52:	0029      	movs	r1, r5
10041d54:	187a      	adds	r2, r7, r1
10041d56:	7812      	ldrb	r2, [r2, #0]
10041d58:	429a      	cmp	r2, r3
10041d5a:	d019      	beq.n	10041d90 <GPIO_Event_Updater+0x68>
		update.data = (uint16_t)(buttons ^ newButtons) | (((uint16_t)newButtons) << 8);
10041d5c:	4b1d      	ldr	r3, [pc, #116]	@ (10041dd4 <GPIO_Event_Updater+0xac>)
10041d5e:	781a      	ldrb	r2, [r3, #0]
10041d60:	187b      	adds	r3, r7, r1
10041d62:	781b      	ldrb	r3, [r3, #0]
10041d64:	4053      	eors	r3, r2
10041d66:	b2db      	uxtb	r3, r3
10041d68:	b21a      	sxth	r2, r3
10041d6a:	187b      	adds	r3, r7, r1
10041d6c:	781b      	ldrb	r3, [r3, #0]
10041d6e:	021b      	lsls	r3, r3, #8
10041d70:	b21b      	sxth	r3, r3
10041d72:	4313      	orrs	r3, r2
10041d74:	b21b      	sxth	r3, r3
10041d76:	b29a      	uxth	r2, r3
10041d78:	1d3b      	adds	r3, r7, #4
10041d7a:	805a      	strh	r2, [r3, #2]
		update.status = EVENT_BUTTONS;
10041d7c:	1d3b      	adds	r3, r7, #4
10041d7e:	2204      	movs	r2, #4
10041d80:	701a      	strb	r2, [r3, #0]
		buttons = newButtons;
10041d82:	4b14      	ldr	r3, [pc, #80]	@ (10041dd4 <GPIO_Event_Updater+0xac>)
10041d84:	187a      	adds	r2, r7, r1
10041d86:	7812      	ldrb	r2, [r2, #0]
10041d88:	701a      	strb	r2, [r3, #0]
		event = 1;
10041d8a:	19bb      	adds	r3, r7, r6
10041d8c:	2201      	movs	r2, #1
10041d8e:	701a      	strb	r2, [r3, #0]
	}
	if(event){FIFO_Enqueue(GPIOqueue, update);}
10041d90:	230f      	movs	r3, #15
10041d92:	18fb      	adds	r3, r7, r3
10041d94:	781b      	ldrb	r3, [r3, #0]
10041d96:	2b00      	cmp	r3, #0
10041d98:	d006      	beq.n	10041da8 <GPIO_Event_Updater+0x80>
10041d9a:	4b0f      	ldr	r3, [pc, #60]	@ (10041dd8 <GPIO_Event_Updater+0xb0>)
10041d9c:	681a      	ldr	r2, [r3, #0]
10041d9e:	1d3b      	adds	r3, r7, #4
10041da0:	6819      	ldr	r1, [r3, #0]
10041da2:	0010      	movs	r0, r2
10041da4:	f7ff fda1 	bl	100418ea <FIFO_Enqueue>
	return update;
10041da8:	2108      	movs	r1, #8
10041daa:	187b      	adds	r3, r7, r1
10041dac:	1d3a      	adds	r2, r7, #4
10041dae:	6812      	ldr	r2, [r2, #0]
10041db0:	601a      	str	r2, [r3, #0]
10041db2:	187a      	adds	r2, r7, r1
10041db4:	2300      	movs	r3, #0
10041db6:	8811      	ldrh	r1, [r2, #0]
10041db8:	0409      	lsls	r1, r1, #16
10041dba:	0c09      	lsrs	r1, r1, #16
10041dbc:	0c1b      	lsrs	r3, r3, #16
10041dbe:	041b      	lsls	r3, r3, #16
10041dc0:	430b      	orrs	r3, r1
10041dc2:	8852      	ldrh	r2, [r2, #2]
10041dc4:	0412      	lsls	r2, r2, #16
10041dc6:	041b      	lsls	r3, r3, #16
10041dc8:	0c1b      	lsrs	r3, r3, #16
10041dca:	4313      	orrs	r3, r2
}
10041dcc:	0018      	movs	r0, r3
10041dce:	46bd      	mov	sp, r7
10041dd0:	b005      	add	sp, #20
10041dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041dd4:	200001b1 	.word	0x200001b1
10041dd8:	200001b4 	.word	0x200001b4

10041ddc <GPIO_Event_Handler>:
 * @Function: GPIO_Event_Handler
 * @Brief: Currently changes the LEDs on the devboard based on the updates
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t GPIO_Event_Handler(Event_t event){
10041ddc:	b580      	push	{r7, lr}
10041dde:	b082      	sub	sp, #8
10041de0:	af00      	add	r7, sp, #0
10041de2:	1d3b      	adds	r3, r7, #4
10041de4:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_BUTTONS){
10041de6:	1d3b      	adds	r3, r7, #4
10041de8:	781b      	ldrb	r3, [r3, #0]
10041dea:	b25b      	sxtb	r3, r3
10041dec:	2b04      	cmp	r3, #4
10041dee:	d11e      	bne.n	10041e2e <GPIO_Event_Handler+0x52>
		if((event.data>>0)&0x01){
10041df0:	1d3b      	adds	r3, r7, #4
10041df2:	885b      	ldrh	r3, [r3, #2]
10041df4:	001a      	movs	r2, r3
10041df6:	2301      	movs	r3, #1
10041df8:	4013      	ands	r3, r2
10041dfa:	d002      	beq.n	10041e02 <GPIO_Event_Handler+0x26>
			BSP_LED_Toggle(LED_BLUE);
10041dfc:	2000      	movs	r0, #0
10041dfe:	f001 ff7b 	bl	10043cf8 <BSP_LED_Toggle>
		}
		if((event.data>>1)&0x01){
10041e02:	1d3b      	adds	r3, r7, #4
10041e04:	885b      	ldrh	r3, [r3, #2]
10041e06:	085b      	lsrs	r3, r3, #1
10041e08:	b29b      	uxth	r3, r3
10041e0a:	001a      	movs	r2, r3
10041e0c:	2301      	movs	r3, #1
10041e0e:	4013      	ands	r3, r2
10041e10:	d002      	beq.n	10041e18 <GPIO_Event_Handler+0x3c>
			BSP_LED_Toggle(LED_GREEN);
10041e12:	2001      	movs	r0, #1
10041e14:	f001 ff70 	bl	10043cf8 <BSP_LED_Toggle>
		}
		if((event.data>>2)&0x01){
10041e18:	1d3b      	adds	r3, r7, #4
10041e1a:	885b      	ldrh	r3, [r3, #2]
10041e1c:	089b      	lsrs	r3, r3, #2
10041e1e:	b29b      	uxth	r3, r3
10041e20:	001a      	movs	r2, r3
10041e22:	2301      	movs	r3, #1
10041e24:	4013      	ands	r3, r2
10041e26:	d002      	beq.n	10041e2e <GPIO_Event_Handler+0x52>
			BSP_LED_Toggle(LED_RED);
10041e28:	2002      	movs	r0, #2
10041e2a:	f001 ff65 	bl	10043cf8 <BSP_LED_Toggle>
		}
	}
	return 1;
10041e2e:	2301      	movs	r3, #1
}
10041e30:	0018      	movs	r0, r3
10041e32:	46bd      	mov	sp, r7
10041e34:	b002      	add	sp, #8
10041e36:	bd80      	pop	{r7, pc}

10041e38 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
10041e38:	b5f0      	push	{r4, r5, r6, r7, lr}
10041e3a:	b085      	sub	sp, #20
10041e3c:	af02      	add	r7, sp, #8
10041e3e:	6078      	str	r0, [r7, #4]
	//here is where to implement something to do with the transmitted data

	//decrement the circular buffer
	if(TxReq.tail == TxReq.head){
10041e40:	4a3e      	ldr	r2, [pc, #248]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e42:	2382      	movs	r3, #130	@ 0x82
10041e44:	33ff      	adds	r3, #255	@ 0xff
10041e46:	5cd2      	ldrb	r2, [r2, r3]
10041e48:	493c      	ldr	r1, [pc, #240]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e4a:	23c0      	movs	r3, #192	@ 0xc0
10041e4c:	005b      	lsls	r3, r3, #1
10041e4e:	5ccb      	ldrb	r3, [r1, r3]
10041e50:	429a      	cmp	r2, r3
10041e52:	d104      	bne.n	10041e5e <HAL_I2C_MemTxCpltCallback+0x26>
		TxReq.full = false;
10041e54:	4a39      	ldr	r2, [pc, #228]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e56:	23c1      	movs	r3, #193	@ 0xc1
10041e58:	005b      	lsls	r3, r3, #1
10041e5a:	2100      	movs	r1, #0
10041e5c:	54d1      	strb	r1, [r2, r3]
	}
	TxReq.head++;
10041e5e:	4a37      	ldr	r2, [pc, #220]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e60:	23c0      	movs	r3, #192	@ 0xc0
10041e62:	005b      	lsls	r3, r3, #1
10041e64:	5cd3      	ldrb	r3, [r2, r3]
10041e66:	3301      	adds	r3, #1
10041e68:	b2d9      	uxtb	r1, r3
10041e6a:	4a34      	ldr	r2, [pc, #208]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e6c:	23c0      	movs	r3, #192	@ 0xc0
10041e6e:	005b      	lsls	r3, r3, #1
10041e70:	54d1      	strb	r1, [r2, r3]
	TxReq.head %= CIRCBUFFERSIZE;
10041e72:	4a32      	ldr	r2, [pc, #200]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e74:	23c0      	movs	r3, #192	@ 0xc0
10041e76:	005b      	lsls	r3, r3, #1
10041e78:	5cd3      	ldrb	r3, [r2, r3]
10041e7a:	221f      	movs	r2, #31
10041e7c:	4013      	ands	r3, r2
10041e7e:	b2d9      	uxtb	r1, r3
10041e80:	4a2e      	ldr	r2, [pc, #184]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e82:	23c0      	movs	r3, #192	@ 0xc0
10041e84:	005b      	lsls	r3, r3, #1
10041e86:	54d1      	strb	r1, [r2, r3]
	if(RxReq.head != RxReq.tail){//if the buffer is not empty (cannot be full as we just pulled from the buffer)
10041e88:	4a2d      	ldr	r2, [pc, #180]	@ (10041f40 <HAL_I2C_MemTxCpltCallback+0x108>)
10041e8a:	23c0      	movs	r3, #192	@ 0xc0
10041e8c:	005b      	lsls	r3, r3, #1
10041e8e:	5cd2      	ldrb	r2, [r2, r3]
10041e90:	492b      	ldr	r1, [pc, #172]	@ (10041f40 <HAL_I2C_MemTxCpltCallback+0x108>)
10041e92:	2382      	movs	r3, #130	@ 0x82
10041e94:	33ff      	adds	r3, #255	@ 0xff
10041e96:	5ccb      	ldrb	r3, [r1, r3]
10041e98:	429a      	cmp	r2, r3
10041e9a:	d04a      	beq.n	10041f32 <HAL_I2C_MemTxCpltCallback+0xfa>
			HAL_I2C_Mem_Write_IT(&hi2c1,
								 TxReq.data[TxReq.head].targetadr<<1,
10041e9c:	4a27      	ldr	r2, [pc, #156]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041e9e:	23c0      	movs	r3, #192	@ 0xc0
10041ea0:	005b      	lsls	r3, r3, #1
10041ea2:	5cd3      	ldrb	r3, [r2, r3]
10041ea4:	0019      	movs	r1, r3
10041ea6:	4a25      	ldr	r2, [pc, #148]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041ea8:	000b      	movs	r3, r1
10041eaa:	005b      	lsls	r3, r3, #1
10041eac:	185b      	adds	r3, r3, r1
10041eae:	009b      	lsls	r3, r3, #2
10041eb0:	5c9b      	ldrb	r3, [r3, r2]
			HAL_I2C_Mem_Write_IT(&hi2c1,
10041eb2:	18db      	adds	r3, r3, r3
10041eb4:	b29c      	uxth	r4, r3
								 TxReq.data[TxReq.head].registeradr,
10041eb6:	4a21      	ldr	r2, [pc, #132]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041eb8:	23c0      	movs	r3, #192	@ 0xc0
10041eba:	005b      	lsls	r3, r3, #1
10041ebc:	5cd3      	ldrb	r3, [r2, r3]
10041ebe:	0019      	movs	r1, r3
10041ec0:	4a1e      	ldr	r2, [pc, #120]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041ec2:	000b      	movs	r3, r1
10041ec4:	005b      	lsls	r3, r3, #1
10041ec6:	185b      	adds	r3, r3, r1
10041ec8:	009b      	lsls	r3, r3, #2
10041eca:	18d3      	adds	r3, r2, r3
10041ecc:	3301      	adds	r3, #1
10041ece:	781b      	ldrb	r3, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1,
10041ed0:	001d      	movs	r5, r3
								 TxReq.data[TxReq.head].registersize,
10041ed2:	4a1a      	ldr	r2, [pc, #104]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041ed4:	23c0      	movs	r3, #192	@ 0xc0
10041ed6:	005b      	lsls	r3, r3, #1
10041ed8:	5cd3      	ldrb	r3, [r2, r3]
10041eda:	0019      	movs	r1, r3
10041edc:	4a17      	ldr	r2, [pc, #92]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041ede:	000b      	movs	r3, r1
10041ee0:	005b      	lsls	r3, r3, #1
10041ee2:	185b      	adds	r3, r3, r1
10041ee4:	009b      	lsls	r3, r3, #2
10041ee6:	18d3      	adds	r3, r2, r3
10041ee8:	3302      	adds	r3, #2
10041eea:	781b      	ldrb	r3, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1,
10041eec:	001e      	movs	r6, r3
								 TxReq.data[TxReq.head].data,
10041eee:	4a13      	ldr	r2, [pc, #76]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041ef0:	23c0      	movs	r3, #192	@ 0xc0
10041ef2:	005b      	lsls	r3, r3, #1
10041ef4:	5cd3      	ldrb	r3, [r2, r3]
10041ef6:	001a      	movs	r2, r3
10041ef8:	0013      	movs	r3, r2
10041efa:	005b      	lsls	r3, r3, #1
10041efc:	189b      	adds	r3, r3, r2
10041efe:	009b      	lsls	r3, r3, #2
10041f00:	3308      	adds	r3, #8
10041f02:	001a      	movs	r2, r3
10041f04:	4b0d      	ldr	r3, [pc, #52]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041f06:	18d2      	adds	r2, r2, r3
								 TxReq.data[TxReq.head].registersize);
10041f08:	490c      	ldr	r1, [pc, #48]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041f0a:	23c0      	movs	r3, #192	@ 0xc0
10041f0c:	005b      	lsls	r3, r3, #1
10041f0e:	5ccb      	ldrb	r3, [r1, r3]
10041f10:	0018      	movs	r0, r3
10041f12:	490a      	ldr	r1, [pc, #40]	@ (10041f3c <HAL_I2C_MemTxCpltCallback+0x104>)
10041f14:	0003      	movs	r3, r0
10041f16:	005b      	lsls	r3, r3, #1
10041f18:	181b      	adds	r3, r3, r0
10041f1a:	009b      	lsls	r3, r3, #2
10041f1c:	18cb      	adds	r3, r1, r3
10041f1e:	3302      	adds	r3, #2
10041f20:	781b      	ldrb	r3, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1,
10041f22:	4808      	ldr	r0, [pc, #32]	@ (10041f44 <HAL_I2C_MemTxCpltCallback+0x10c>)
10041f24:	9301      	str	r3, [sp, #4]
10041f26:	9200      	str	r2, [sp, #0]
10041f28:	0033      	movs	r3, r6
10041f2a:	002a      	movs	r2, r5
10041f2c:	0021      	movs	r1, r4
10041f2e:	f002 fced 	bl	1004490c <HAL_I2C_Mem_Write_IT>
		}
}
10041f32:	46c0      	nop			@ (mov r8, r8)
10041f34:	46bd      	mov	sp, r7
10041f36:	b003      	add	sp, #12
10041f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041f3a:	46c0      	nop			@ (mov r8, r8)
10041f3c:	20000390 	.word	0x20000390
10041f40:	2000020c 	.word	0x2000020c
10041f44:	200001b8 	.word	0x200001b8

10041f48 <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
10041f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10041f4a:	b087      	sub	sp, #28
10041f4c:	af02      	add	r7, sp, #8
10041f4e:	6078      	str	r0, [r7, #4]
	uint16_t data;
	//construct the received data into a uint16_t
	if(RxReq.data[RxReq.head].registersize == 2){
10041f50:	4a7d      	ldr	r2, [pc, #500]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041f52:	23c0      	movs	r3, #192	@ 0xc0
10041f54:	005b      	lsls	r3, r3, #1
10041f56:	5cd3      	ldrb	r3, [r2, r3]
10041f58:	0019      	movs	r1, r3
10041f5a:	4a7b      	ldr	r2, [pc, #492]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041f5c:	000b      	movs	r3, r1
10041f5e:	005b      	lsls	r3, r3, #1
10041f60:	185b      	adds	r3, r3, r1
10041f62:	009b      	lsls	r3, r3, #2
10041f64:	18d3      	adds	r3, r2, r3
10041f66:	3302      	adds	r3, #2
10041f68:	781b      	ldrb	r3, [r3, #0]
10041f6a:	2b02      	cmp	r3, #2
10041f6c:	d121      	bne.n	10041fb2 <HAL_I2C_MemRxCpltCallback+0x6a>
		data = (RxReq.data[RxReq.head].data[0] << 8) + (RxReq.data[RxReq.head].data[1]);
10041f6e:	4a76      	ldr	r2, [pc, #472]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041f70:	23c0      	movs	r3, #192	@ 0xc0
10041f72:	005b      	lsls	r3, r3, #1
10041f74:	5cd3      	ldrb	r3, [r2, r3]
10041f76:	0019      	movs	r1, r3
10041f78:	4a73      	ldr	r2, [pc, #460]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041f7a:	000b      	movs	r3, r1
10041f7c:	005b      	lsls	r3, r3, #1
10041f7e:	185b      	adds	r3, r3, r1
10041f80:	009b      	lsls	r3, r3, #2
10041f82:	18d3      	adds	r3, r2, r3
10041f84:	3308      	adds	r3, #8
10041f86:	781b      	ldrb	r3, [r3, #0]
10041f88:	021b      	lsls	r3, r3, #8
10041f8a:	b29a      	uxth	r2, r3
10041f8c:	496e      	ldr	r1, [pc, #440]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041f8e:	23c0      	movs	r3, #192	@ 0xc0
10041f90:	005b      	lsls	r3, r3, #1
10041f92:	5ccb      	ldrb	r3, [r1, r3]
10041f94:	0018      	movs	r0, r3
10041f96:	496c      	ldr	r1, [pc, #432]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041f98:	0003      	movs	r3, r0
10041f9a:	005b      	lsls	r3, r3, #1
10041f9c:	181b      	adds	r3, r3, r0
10041f9e:	009b      	lsls	r3, r3, #2
10041fa0:	18cb      	adds	r3, r1, r3
10041fa2:	3309      	adds	r3, #9
10041fa4:	781b      	ldrb	r3, [r3, #0]
10041fa6:	0019      	movs	r1, r3
10041fa8:	230e      	movs	r3, #14
10041faa:	18fb      	adds	r3, r7, r3
10041fac:	1852      	adds	r2, r2, r1
10041fae:	801a      	strh	r2, [r3, #0]
10041fb0:	e034      	b.n	1004201c <HAL_I2C_MemRxCpltCallback+0xd4>
	}else if(RxReq.data[RxReq.head].registersize == 1){
10041fb2:	4a65      	ldr	r2, [pc, #404]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041fb4:	23c0      	movs	r3, #192	@ 0xc0
10041fb6:	005b      	lsls	r3, r3, #1
10041fb8:	5cd3      	ldrb	r3, [r2, r3]
10041fba:	0019      	movs	r1, r3
10041fbc:	4a62      	ldr	r2, [pc, #392]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041fbe:	000b      	movs	r3, r1
10041fc0:	005b      	lsls	r3, r3, #1
10041fc2:	185b      	adds	r3, r3, r1
10041fc4:	009b      	lsls	r3, r3, #2
10041fc6:	18d3      	adds	r3, r2, r3
10041fc8:	3302      	adds	r3, #2
10041fca:	781b      	ldrb	r3, [r3, #0]
10041fcc:	2b01      	cmp	r3, #1
10041fce:	d121      	bne.n	10042014 <HAL_I2C_MemRxCpltCallback+0xcc>
		data = RxReq.data[RxReq.head].data[0] + (RxReq.data[RxReq.head].registeradr << 8);
10041fd0:	4a5d      	ldr	r2, [pc, #372]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041fd2:	23c0      	movs	r3, #192	@ 0xc0
10041fd4:	005b      	lsls	r3, r3, #1
10041fd6:	5cd3      	ldrb	r3, [r2, r3]
10041fd8:	0019      	movs	r1, r3
10041fda:	4a5b      	ldr	r2, [pc, #364]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041fdc:	000b      	movs	r3, r1
10041fde:	005b      	lsls	r3, r3, #1
10041fe0:	185b      	adds	r3, r3, r1
10041fe2:	009b      	lsls	r3, r3, #2
10041fe4:	18d3      	adds	r3, r2, r3
10041fe6:	3308      	adds	r3, #8
10041fe8:	781b      	ldrb	r3, [r3, #0]
10041fea:	0018      	movs	r0, r3
10041fec:	4a56      	ldr	r2, [pc, #344]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041fee:	23c0      	movs	r3, #192	@ 0xc0
10041ff0:	005b      	lsls	r3, r3, #1
10041ff2:	5cd3      	ldrb	r3, [r2, r3]
10041ff4:	0019      	movs	r1, r3
10041ff6:	4a54      	ldr	r2, [pc, #336]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10041ff8:	000b      	movs	r3, r1
10041ffa:	005b      	lsls	r3, r3, #1
10041ffc:	185b      	adds	r3, r3, r1
10041ffe:	009b      	lsls	r3, r3, #2
10042000:	18d3      	adds	r3, r2, r3
10042002:	3301      	adds	r3, #1
10042004:	781b      	ldrb	r3, [r3, #0]
10042006:	021b      	lsls	r3, r3, #8
10042008:	b29a      	uxth	r2, r3
1004200a:	230e      	movs	r3, #14
1004200c:	18fb      	adds	r3, r7, r3
1004200e:	1882      	adds	r2, r0, r2
10042010:	801a      	strh	r2, [r3, #0]
10042012:	e003      	b.n	1004201c <HAL_I2C_MemRxCpltCallback+0xd4>
	}else {//error recovery
		data = 0;
10042014:	230e      	movs	r3, #14
10042016:	18fb      	adds	r3, r7, r3
10042018:	2200      	movs	r2, #0
1004201a:	801a      	strh	r2, [r3, #0]
	}
	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, data};
1004201c:	2008      	movs	r0, #8
1004201e:	183b      	adds	r3, r7, r0
10042020:	2205      	movs	r2, #5
10042022:	701a      	strb	r2, [r3, #0]
10042024:	183b      	adds	r3, r7, r0
10042026:	220e      	movs	r2, #14
10042028:	18ba      	adds	r2, r7, r2
1004202a:	8812      	ldrh	r2, [r2, #0]
1004202c:	805a      	strh	r2, [r3, #2]
	//post the event to the function given
	RxReq.data[RxReq.head].PostTo(ret);
1004202e:	4a46      	ldr	r2, [pc, #280]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042030:	23c0      	movs	r3, #192	@ 0xc0
10042032:	005b      	lsls	r3, r3, #1
10042034:	5cd3      	ldrb	r3, [r2, r3]
10042036:	0019      	movs	r1, r3
10042038:	4a43      	ldr	r2, [pc, #268]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
1004203a:	000b      	movs	r3, r1
1004203c:	005b      	lsls	r3, r3, #1
1004203e:	185b      	adds	r3, r3, r1
10042040:	009b      	lsls	r3, r3, #2
10042042:	18d3      	adds	r3, r2, r3
10042044:	3304      	adds	r3, #4
10042046:	681a      	ldr	r2, [r3, #0]
10042048:	183b      	adds	r3, r7, r0
1004204a:	6818      	ldr	r0, [r3, #0]
1004204c:	4790      	blx	r2
	//decrement the circular buffer
	if(RxReq.tail == RxReq.head){
1004204e:	4a3e      	ldr	r2, [pc, #248]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042050:	2382      	movs	r3, #130	@ 0x82
10042052:	33ff      	adds	r3, #255	@ 0xff
10042054:	5cd2      	ldrb	r2, [r2, r3]
10042056:	493c      	ldr	r1, [pc, #240]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042058:	23c0      	movs	r3, #192	@ 0xc0
1004205a:	005b      	lsls	r3, r3, #1
1004205c:	5ccb      	ldrb	r3, [r1, r3]
1004205e:	429a      	cmp	r2, r3
10042060:	d104      	bne.n	1004206c <HAL_I2C_MemRxCpltCallback+0x124>
		RxReq.full = false;
10042062:	4a39      	ldr	r2, [pc, #228]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042064:	23c1      	movs	r3, #193	@ 0xc1
10042066:	005b      	lsls	r3, r3, #1
10042068:	2100      	movs	r1, #0
1004206a:	54d1      	strb	r1, [r2, r3]
	}
	RxReq.head++;
1004206c:	4a36      	ldr	r2, [pc, #216]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
1004206e:	23c0      	movs	r3, #192	@ 0xc0
10042070:	005b      	lsls	r3, r3, #1
10042072:	5cd3      	ldrb	r3, [r2, r3]
10042074:	3301      	adds	r3, #1
10042076:	b2d9      	uxtb	r1, r3
10042078:	4a33      	ldr	r2, [pc, #204]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
1004207a:	23c0      	movs	r3, #192	@ 0xc0
1004207c:	005b      	lsls	r3, r3, #1
1004207e:	54d1      	strb	r1, [r2, r3]
	RxReq.head %= CIRCBUFFERSIZE;
10042080:	4a31      	ldr	r2, [pc, #196]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042082:	23c0      	movs	r3, #192	@ 0xc0
10042084:	005b      	lsls	r3, r3, #1
10042086:	5cd3      	ldrb	r3, [r2, r3]
10042088:	221f      	movs	r2, #31
1004208a:	4013      	ands	r3, r2
1004208c:	b2d9      	uxtb	r1, r3
1004208e:	4a2e      	ldr	r2, [pc, #184]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042090:	23c0      	movs	r3, #192	@ 0xc0
10042092:	005b      	lsls	r3, r3, #1
10042094:	54d1      	strb	r1, [r2, r3]
	if(RxReq.head != RxReq.tail){//if the buffer is not empty (cannot be full as we just pulled from the buffer)
10042096:	4a2c      	ldr	r2, [pc, #176]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042098:	23c0      	movs	r3, #192	@ 0xc0
1004209a:	005b      	lsls	r3, r3, #1
1004209c:	5cd2      	ldrb	r2, [r2, r3]
1004209e:	492a      	ldr	r1, [pc, #168]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420a0:	2382      	movs	r3, #130	@ 0x82
100420a2:	33ff      	adds	r3, #255	@ 0xff
100420a4:	5ccb      	ldrb	r3, [r1, r3]
100420a6:	429a      	cmp	r2, r3
100420a8:	d04a      	beq.n	10042140 <HAL_I2C_MemRxCpltCallback+0x1f8>

		HAL_I2C_Mem_Read_IT(&hi2c1,
							RxReq.data[RxReq.head].targetadr<<1,
100420aa:	4a27      	ldr	r2, [pc, #156]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420ac:	23c0      	movs	r3, #192	@ 0xc0
100420ae:	005b      	lsls	r3, r3, #1
100420b0:	5cd3      	ldrb	r3, [r2, r3]
100420b2:	0019      	movs	r1, r3
100420b4:	4a24      	ldr	r2, [pc, #144]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420b6:	000b      	movs	r3, r1
100420b8:	005b      	lsls	r3, r3, #1
100420ba:	185b      	adds	r3, r3, r1
100420bc:	009b      	lsls	r3, r3, #2
100420be:	5c9b      	ldrb	r3, [r3, r2]
		HAL_I2C_Mem_Read_IT(&hi2c1,
100420c0:	18db      	adds	r3, r3, r3
100420c2:	b29c      	uxth	r4, r3
							RxReq.data[RxReq.head].registeradr,
100420c4:	4a20      	ldr	r2, [pc, #128]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420c6:	23c0      	movs	r3, #192	@ 0xc0
100420c8:	005b      	lsls	r3, r3, #1
100420ca:	5cd3      	ldrb	r3, [r2, r3]
100420cc:	0019      	movs	r1, r3
100420ce:	4a1e      	ldr	r2, [pc, #120]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420d0:	000b      	movs	r3, r1
100420d2:	005b      	lsls	r3, r3, #1
100420d4:	185b      	adds	r3, r3, r1
100420d6:	009b      	lsls	r3, r3, #2
100420d8:	18d3      	adds	r3, r2, r3
100420da:	3301      	adds	r3, #1
100420dc:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
100420de:	001d      	movs	r5, r3
							RxReq.data[RxReq.head].registersize,
100420e0:	4a19      	ldr	r2, [pc, #100]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420e2:	23c0      	movs	r3, #192	@ 0xc0
100420e4:	005b      	lsls	r3, r3, #1
100420e6:	5cd3      	ldrb	r3, [r2, r3]
100420e8:	0019      	movs	r1, r3
100420ea:	4a17      	ldr	r2, [pc, #92]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420ec:	000b      	movs	r3, r1
100420ee:	005b      	lsls	r3, r3, #1
100420f0:	185b      	adds	r3, r3, r1
100420f2:	009b      	lsls	r3, r3, #2
100420f4:	18d3      	adds	r3, r2, r3
100420f6:	3302      	adds	r3, #2
100420f8:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
100420fa:	001e      	movs	r6, r3
							RxReq.data[RxReq.head].data,
100420fc:	4a12      	ldr	r2, [pc, #72]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
100420fe:	23c0      	movs	r3, #192	@ 0xc0
10042100:	005b      	lsls	r3, r3, #1
10042102:	5cd3      	ldrb	r3, [r2, r3]
10042104:	001a      	movs	r2, r3
10042106:	0013      	movs	r3, r2
10042108:	005b      	lsls	r3, r3, #1
1004210a:	189b      	adds	r3, r3, r2
1004210c:	009b      	lsls	r3, r3, #2
1004210e:	3308      	adds	r3, #8
10042110:	001a      	movs	r2, r3
10042112:	4b0d      	ldr	r3, [pc, #52]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042114:	18d2      	adds	r2, r2, r3
							RxReq.data[RxReq.head].registersize);
10042116:	490c      	ldr	r1, [pc, #48]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042118:	23c0      	movs	r3, #192	@ 0xc0
1004211a:	005b      	lsls	r3, r3, #1
1004211c:	5ccb      	ldrb	r3, [r1, r3]
1004211e:	0018      	movs	r0, r3
10042120:	4909      	ldr	r1, [pc, #36]	@ (10042148 <HAL_I2C_MemRxCpltCallback+0x200>)
10042122:	0003      	movs	r3, r0
10042124:	005b      	lsls	r3, r3, #1
10042126:	181b      	adds	r3, r3, r0
10042128:	009b      	lsls	r3, r3, #2
1004212a:	18cb      	adds	r3, r1, r3
1004212c:	3302      	adds	r3, #2
1004212e:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
10042130:	4806      	ldr	r0, [pc, #24]	@ (1004214c <HAL_I2C_MemRxCpltCallback+0x204>)
10042132:	9301      	str	r3, [sp, #4]
10042134:	9200      	str	r2, [sp, #0]
10042136:	0033      	movs	r3, r6
10042138:	002a      	movs	r2, r5
1004213a:	0021      	movs	r1, r4
1004213c:	f002 fc88 	bl	10044a50 <HAL_I2C_Mem_Read_IT>
	}
}
10042140:	46c0      	nop			@ (mov r8, r8)
10042142:	46bd      	mov	sp, r7
10042144:	b005      	add	sp, #20
10042146:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042148:	2000020c 	.word	0x2000020c
1004214c:	200001b8 	.word	0x200001b8

10042150 <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
10042150:	b580      	push	{r7, lr}
10042152:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10042154:	4b09      	ldr	r3, [pc, #36]	@ (1004217c <I2C1_IRQHandler+0x2c>)
10042156:	681b      	ldr	r3, [r3, #0]
10042158:	699a      	ldr	r2, [r3, #24]
1004215a:	23e0      	movs	r3, #224	@ 0xe0
1004215c:	00db      	lsls	r3, r3, #3
1004215e:	4013      	ands	r3, r2
10042160:	d004      	beq.n	1004216c <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);
10042162:	4b06      	ldr	r3, [pc, #24]	@ (1004217c <I2C1_IRQHandler+0x2c>)
10042164:	0018      	movs	r0, r3
10042166:	f002 fd2b 	bl	10044bc0 <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);
	}
}
1004216a:	e003      	b.n	10042174 <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);
1004216c:	4b03      	ldr	r3, [pc, #12]	@ (1004217c <I2C1_IRQHandler+0x2c>)
1004216e:	0018      	movs	r0, r3
10042170:	f002 fd0c 	bl	10044b8c <HAL_I2C_EV_IRQHandler>
}
10042174:	46c0      	nop			@ (mov r8, r8)
10042176:	46bd      	mov	sp, r7
10042178:	bd80      	pop	{r7, pc}
1004217a:	46c0      	nop			@ (mov r8, r8)
1004217c:	200001b8 	.word	0x200001b8

10042180 <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
10042180:	b580      	push	{r7, lr}
10042182:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10042184:	4b38      	ldr	r3, [pc, #224]	@ (10042268 <I2C_Init+0xe8>)
10042186:	781b      	ldrb	r3, [r3, #0]
10042188:	2b00      	cmp	r3, #0
1004218a:	d001      	beq.n	10042190 <I2C_Init+0x10>
1004218c:	2301      	movs	r3, #1
1004218e:	e067      	b.n	10042260 <I2C_Init+0xe0>
	hi2c1.Instance = I2C1;
10042190:	4b36      	ldr	r3, [pc, #216]	@ (1004226c <I2C_Init+0xec>)
10042192:	2282      	movs	r2, #130	@ 0x82
10042194:	05d2      	lsls	r2, r2, #23
10042196:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
10042198:	4b34      	ldr	r3, [pc, #208]	@ (1004226c <I2C_Init+0xec>)
1004219a:	4a35      	ldr	r2, [pc, #212]	@ (10042270 <I2C_Init+0xf0>)
1004219c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
1004219e:	4b33      	ldr	r3, [pc, #204]	@ (1004226c <I2C_Init+0xec>)
100421a0:	2200      	movs	r2, #0
100421a2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
100421a4:	4b31      	ldr	r3, [pc, #196]	@ (1004226c <I2C_Init+0xec>)
100421a6:	2201      	movs	r2, #1
100421a8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
100421aa:	4b30      	ldr	r3, [pc, #192]	@ (1004226c <I2C_Init+0xec>)
100421ac:	2200      	movs	r2, #0
100421ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
100421b0:	4b2e      	ldr	r3, [pc, #184]	@ (1004226c <I2C_Init+0xec>)
100421b2:	2200      	movs	r2, #0
100421b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100421b6:	4b2d      	ldr	r3, [pc, #180]	@ (1004226c <I2C_Init+0xec>)
100421b8:	2200      	movs	r2, #0
100421ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
100421bc:	4b2b      	ldr	r3, [pc, #172]	@ (1004226c <I2C_Init+0xec>)
100421be:	2200      	movs	r2, #0
100421c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
100421c2:	4b2a      	ldr	r3, [pc, #168]	@ (1004226c <I2C_Init+0xec>)
100421c4:	2200      	movs	r2, #0
100421c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
100421c8:	4b28      	ldr	r3, [pc, #160]	@ (1004226c <I2C_Init+0xec>)
100421ca:	0018      	movs	r0, r3
100421cc:	f002 faf8 	bl	100447c0 <HAL_I2C_Init>
100421d0:	1e03      	subs	r3, r0, #0
100421d2:	d001      	beq.n	100421d8 <I2C_Init+0x58>
	{
		return INIT_ERROR;
100421d4:	2300      	movs	r3, #0
100421d6:	e043      	b.n	10042260 <I2C_Init+0xe0>
	}

	// Configure Analog filter
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
100421d8:	4b24      	ldr	r3, [pc, #144]	@ (1004226c <I2C_Init+0xec>)
100421da:	2100      	movs	r1, #0
100421dc:	0018      	movs	r0, r3
100421de:	f004 f94f 	bl	10046480 <HAL_I2CEx_ConfigAnalogFilter>
100421e2:	1e03      	subs	r3, r0, #0
100421e4:	d001      	beq.n	100421ea <I2C_Init+0x6a>
	{
		return INIT_ERROR;
100421e6:	2300      	movs	r3, #0
100421e8:	e03a      	b.n	10042260 <I2C_Init+0xe0>
	}

	// Configure Digital filter
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
100421ea:	4b20      	ldr	r3, [pc, #128]	@ (1004226c <I2C_Init+0xec>)
100421ec:	2100      	movs	r1, #0
100421ee:	0018      	movs	r0, r3
100421f0:	f004 f992 	bl	10046518 <HAL_I2CEx_ConfigDigitalFilter>
100421f4:	1e03      	subs	r3, r0, #0
100421f6:	d001      	beq.n	100421fc <I2C_Init+0x7c>
	{
		return INIT_ERROR;
100421f8:	2300      	movs	r3, #0
100421fa:	e031      	b.n	10042260 <I2C_Init+0xe0>
	}
	//set up circular buffers
	RxReq.full = false;
100421fc:	4a1d      	ldr	r2, [pc, #116]	@ (10042274 <I2C_Init+0xf4>)
100421fe:	23c1      	movs	r3, #193	@ 0xc1
10042200:	005b      	lsls	r3, r3, #1
10042202:	2100      	movs	r1, #0
10042204:	54d1      	strb	r1, [r2, r3]
	RxReq.tail = 0;
10042206:	4a1b      	ldr	r2, [pc, #108]	@ (10042274 <I2C_Init+0xf4>)
10042208:	2382      	movs	r3, #130	@ 0x82
1004220a:	33ff      	adds	r3, #255	@ 0xff
1004220c:	2100      	movs	r1, #0
1004220e:	54d1      	strb	r1, [r2, r3]
	RxReq.head = 0;
10042210:	4a18      	ldr	r2, [pc, #96]	@ (10042274 <I2C_Init+0xf4>)
10042212:	23c0      	movs	r3, #192	@ 0xc0
10042214:	005b      	lsls	r3, r3, #1
10042216:	2100      	movs	r1, #0
10042218:	54d1      	strb	r1, [r2, r3]

	TxReq.full = false;
1004221a:	4a17      	ldr	r2, [pc, #92]	@ (10042278 <I2C_Init+0xf8>)
1004221c:	23c1      	movs	r3, #193	@ 0xc1
1004221e:	005b      	lsls	r3, r3, #1
10042220:	2100      	movs	r1, #0
10042222:	54d1      	strb	r1, [r2, r3]
	TxReq.tail = 0;
10042224:	4a14      	ldr	r2, [pc, #80]	@ (10042278 <I2C_Init+0xf8>)
10042226:	2382      	movs	r3, #130	@ 0x82
10042228:	33ff      	adds	r3, #255	@ 0xff
1004222a:	2100      	movs	r1, #0
1004222c:	54d1      	strb	r1, [r2, r3]
	TxReq.head = 0;
1004222e:	4a12      	ldr	r2, [pc, #72]	@ (10042278 <I2C_Init+0xf8>)
10042230:	23c0      	movs	r3, #192	@ 0xc0
10042232:	005b      	lsls	r3, r3, #1
10042234:	2100      	movs	r1, #0
10042236:	54d1      	strb	r1, [r2, r3]
	initialized = 1;
10042238:	4b0b      	ldr	r3, [pc, #44]	@ (10042268 <I2C_Init+0xe8>)
1004223a:	2201      	movs	r2, #1
1004223c:	701a      	strb	r2, [r3, #0]
	//enables interrupts
	//hi2c1.Instance->CR1 = hi2c1.Instance->CR1 | I2C_CR1_RXIE_Msk | I2C_CR1_TXIE_Msk;
	__HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_RXI);
1004223e:	4b0b      	ldr	r3, [pc, #44]	@ (1004226c <I2C_Init+0xec>)
10042240:	681b      	ldr	r3, [r3, #0]
10042242:	681a      	ldr	r2, [r3, #0]
10042244:	4b09      	ldr	r3, [pc, #36]	@ (1004226c <I2C_Init+0xec>)
10042246:	681b      	ldr	r3, [r3, #0]
10042248:	2104      	movs	r1, #4
1004224a:	430a      	orrs	r2, r1
1004224c:	601a      	str	r2, [r3, #0]
	__HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_TXI);
1004224e:	4b07      	ldr	r3, [pc, #28]	@ (1004226c <I2C_Init+0xec>)
10042250:	681b      	ldr	r3, [r3, #0]
10042252:	681a      	ldr	r2, [r3, #0]
10042254:	4b05      	ldr	r3, [pc, #20]	@ (1004226c <I2C_Init+0xec>)
10042256:	681b      	ldr	r3, [r3, #0]
10042258:	2102      	movs	r1, #2
1004225a:	430a      	orrs	r2, r1
1004225c:	601a      	str	r2, [r3, #0]
	return INIT_OK;
1004225e:	2301      	movs	r3, #1
}
10042260:	0018      	movs	r0, r3
10042262:	46bd      	mov	sp, r7
10042264:	bd80      	pop	{r7, pc}
10042266:	46c0      	nop			@ (mov r8, r8)
10042268:	20000514 	.word	0x20000514
1004226c:	200001b8 	.word	0x200001b8
10042270:	00303d5b 	.word	0x00303d5b
10042274:	2000020c 	.word	0x2000020c
10042278:	20000390 	.word	0x20000390

1004227c <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr,void (*PostTo)(Event_t)){
1004227c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004227e:	b089      	sub	sp, #36	@ 0x24
10042280:	af02      	add	r7, sp, #8
10042282:	603a      	str	r2, [r7, #0]
10042284:	1dfb      	adds	r3, r7, #7
10042286:	1c02      	adds	r2, r0, #0
10042288:	701a      	strb	r2, [r3, #0]
1004228a:	1dbb      	adds	r3, r7, #6
1004228c:	1c0a      	adds	r2, r1, #0
1004228e:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10042290:	4b6b      	ldr	r3, [pc, #428]	@ (10042440 <I2C_Recieve+0x1c4>)
10042292:	781b      	ldrb	r3, [r3, #0]
10042294:	2b00      	cmp	r3, #0
10042296:	d101      	bne.n	1004229c <I2C_Recieve+0x20>
10042298:	2301      	movs	r3, #1
1004229a:	e0cd      	b.n	10042438 <I2C_Recieve+0x1bc>
	HAL_StatusTypeDef status = HAL_OK;
1004229c:	2317      	movs	r3, #23
1004229e:	18fb      	adds	r3, r7, r3
100422a0:	2200      	movs	r2, #0
100422a2:	701a      	strb	r2, [r3, #0]
	//will not attempt to receive if the buffer is full
	if(RxReq.full){
100422a4:	4a67      	ldr	r2, [pc, #412]	@ (10042444 <I2C_Recieve+0x1c8>)
100422a6:	23c1      	movs	r3, #193	@ 0xc1
100422a8:	005b      	lsls	r3, r3, #1
100422aa:	5cd3      	ldrb	r3, [r2, r3]
100422ac:	2b00      	cmp	r3, #0
100422ae:	d001      	beq.n	100422b4 <I2C_Recieve+0x38>
		return HAL_ERROR;
100422b0:	2301      	movs	r3, #1
100422b2:	e0c1      	b.n	10042438 <I2C_Recieve+0x1bc>
	}

	//place the receive request into the buffer
	MemReq_t Post;
	Post.targetadr = targetadr;
100422b4:	2008      	movs	r0, #8
100422b6:	183b      	adds	r3, r7, r0
100422b8:	1dfa      	adds	r2, r7, #7
100422ba:	7812      	ldrb	r2, [r2, #0]
100422bc:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
100422be:	183b      	adds	r3, r7, r0
100422c0:	1dba      	adds	r2, r7, #6
100422c2:	7812      	ldrb	r2, [r2, #0]
100422c4:	705a      	strb	r2, [r3, #1]
	Post.registersize = 1;
100422c6:	183b      	adds	r3, r7, r0
100422c8:	2201      	movs	r2, #1
100422ca:	709a      	strb	r2, [r3, #2]
	Post.PostTo = PostTo;
100422cc:	183b      	adds	r3, r7, r0
100422ce:	683a      	ldr	r2, [r7, #0]
100422d0:	605a      	str	r2, [r3, #4]
	RxReq.data[RxReq.tail] = Post;
100422d2:	4a5c      	ldr	r2, [pc, #368]	@ (10042444 <I2C_Recieve+0x1c8>)
100422d4:	2382      	movs	r3, #130	@ 0x82
100422d6:	33ff      	adds	r3, #255	@ 0xff
100422d8:	5cd3      	ldrb	r3, [r2, r3]
100422da:	0019      	movs	r1, r3
100422dc:	4a59      	ldr	r2, [pc, #356]	@ (10042444 <I2C_Recieve+0x1c8>)
100422de:	000b      	movs	r3, r1
100422e0:	005b      	lsls	r3, r3, #1
100422e2:	185b      	adds	r3, r3, r1
100422e4:	009b      	lsls	r3, r3, #2
100422e6:	1839      	adds	r1, r7, r0
100422e8:	18d3      	adds	r3, r2, r3
100422ea:	000a      	movs	r2, r1
100422ec:	ca13      	ldmia	r2!, {r0, r1, r4}
100422ee:	c313      	stmia	r3!, {r0, r1, r4}
	RxReq.tail++;
100422f0:	4a54      	ldr	r2, [pc, #336]	@ (10042444 <I2C_Recieve+0x1c8>)
100422f2:	2382      	movs	r3, #130	@ 0x82
100422f4:	33ff      	adds	r3, #255	@ 0xff
100422f6:	5cd3      	ldrb	r3, [r2, r3]
100422f8:	3301      	adds	r3, #1
100422fa:	b2d9      	uxtb	r1, r3
100422fc:	4a51      	ldr	r2, [pc, #324]	@ (10042444 <I2C_Recieve+0x1c8>)
100422fe:	2382      	movs	r3, #130	@ 0x82
10042300:	33ff      	adds	r3, #255	@ 0xff
10042302:	54d1      	strb	r1, [r2, r3]
	RxReq.tail %= CIRCBUFFERSIZE;
10042304:	4a4f      	ldr	r2, [pc, #316]	@ (10042444 <I2C_Recieve+0x1c8>)
10042306:	2382      	movs	r3, #130	@ 0x82
10042308:	33ff      	adds	r3, #255	@ 0xff
1004230a:	5cd3      	ldrb	r3, [r2, r3]
1004230c:	221f      	movs	r2, #31
1004230e:	4013      	ands	r3, r2
10042310:	b2d9      	uxtb	r1, r3
10042312:	4a4c      	ldr	r2, [pc, #304]	@ (10042444 <I2C_Recieve+0x1c8>)
10042314:	2382      	movs	r3, #130	@ 0x82
10042316:	33ff      	adds	r3, #255	@ 0xff
10042318:	54d1      	strb	r1, [r2, r3]
	if(RxReq.tail == RxReq.head){
1004231a:	4a4a      	ldr	r2, [pc, #296]	@ (10042444 <I2C_Recieve+0x1c8>)
1004231c:	2382      	movs	r3, #130	@ 0x82
1004231e:	33ff      	adds	r3, #255	@ 0xff
10042320:	5cd2      	ldrb	r2, [r2, r3]
10042322:	4948      	ldr	r1, [pc, #288]	@ (10042444 <I2C_Recieve+0x1c8>)
10042324:	23c0      	movs	r3, #192	@ 0xc0
10042326:	005b      	lsls	r3, r3, #1
10042328:	5ccb      	ldrb	r3, [r1, r3]
1004232a:	429a      	cmp	r2, r3
1004232c:	d104      	bne.n	10042338 <I2C_Recieve+0xbc>
		RxReq.full = true;
1004232e:	4a45      	ldr	r2, [pc, #276]	@ (10042444 <I2C_Recieve+0x1c8>)
10042330:	23c1      	movs	r3, #193	@ 0xc1
10042332:	005b      	lsls	r3, r3, #1
10042334:	2101      	movs	r1, #1
10042336:	54d1      	strb	r1, [r2, r3]
	}
	if((RxReq.head+1)%CIRCBUFFERSIZE == RxReq.tail){//if the buffer was empty
10042338:	4a42      	ldr	r2, [pc, #264]	@ (10042444 <I2C_Recieve+0x1c8>)
1004233a:	23c0      	movs	r3, #192	@ 0xc0
1004233c:	005b      	lsls	r3, r3, #1
1004233e:	5cd3      	ldrb	r3, [r2, r3]
10042340:	3301      	adds	r3, #1
10042342:	4a41      	ldr	r2, [pc, #260]	@ (10042448 <I2C_Recieve+0x1cc>)
10042344:	4013      	ands	r3, r2
10042346:	d504      	bpl.n	10042352 <I2C_Recieve+0xd6>
10042348:	3b01      	subs	r3, #1
1004234a:	2220      	movs	r2, #32
1004234c:	4252      	negs	r2, r2
1004234e:	4313      	orrs	r3, r2
10042350:	3301      	adds	r3, #1
10042352:	0019      	movs	r1, r3
10042354:	4a3b      	ldr	r2, [pc, #236]	@ (10042444 <I2C_Recieve+0x1c8>)
10042356:	2382      	movs	r3, #130	@ 0x82
10042358:	33ff      	adds	r3, #255	@ 0xff
1004235a:	5cd3      	ldrb	r3, [r2, r3]
1004235c:	4299      	cmp	r1, r3
1004235e:	d168      	bne.n	10042432 <I2C_Recieve+0x1b6>
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
							RxReq.data[RxReq.head].targetadr<<1,
10042360:	4a38      	ldr	r2, [pc, #224]	@ (10042444 <I2C_Recieve+0x1c8>)
10042362:	23c0      	movs	r3, #192	@ 0xc0
10042364:	005b      	lsls	r3, r3, #1
10042366:	5cd3      	ldrb	r3, [r2, r3]
10042368:	0019      	movs	r1, r3
1004236a:	4a36      	ldr	r2, [pc, #216]	@ (10042444 <I2C_Recieve+0x1c8>)
1004236c:	000b      	movs	r3, r1
1004236e:	005b      	lsls	r3, r3, #1
10042370:	185b      	adds	r3, r3, r1
10042372:	009b      	lsls	r3, r3, #2
10042374:	5c9b      	ldrb	r3, [r3, r2]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
10042376:	18db      	adds	r3, r3, r3
10042378:	b29d      	uxth	r5, r3
							RxReq.data[RxReq.head].registeradr,
1004237a:	4a32      	ldr	r2, [pc, #200]	@ (10042444 <I2C_Recieve+0x1c8>)
1004237c:	23c0      	movs	r3, #192	@ 0xc0
1004237e:	005b      	lsls	r3, r3, #1
10042380:	5cd3      	ldrb	r3, [r2, r3]
10042382:	0019      	movs	r1, r3
10042384:	4a2f      	ldr	r2, [pc, #188]	@ (10042444 <I2C_Recieve+0x1c8>)
10042386:	000b      	movs	r3, r1
10042388:	005b      	lsls	r3, r3, #1
1004238a:	185b      	adds	r3, r3, r1
1004238c:	009b      	lsls	r3, r3, #2
1004238e:	18d3      	adds	r3, r2, r3
10042390:	3301      	adds	r3, #1
10042392:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
10042394:	001e      	movs	r6, r3
							RxReq.data[RxReq.head].registersize,
10042396:	4a2b      	ldr	r2, [pc, #172]	@ (10042444 <I2C_Recieve+0x1c8>)
10042398:	23c0      	movs	r3, #192	@ 0xc0
1004239a:	005b      	lsls	r3, r3, #1
1004239c:	5cd3      	ldrb	r3, [r2, r3]
1004239e:	0019      	movs	r1, r3
100423a0:	4a28      	ldr	r2, [pc, #160]	@ (10042444 <I2C_Recieve+0x1c8>)
100423a2:	000b      	movs	r3, r1
100423a4:	005b      	lsls	r3, r3, #1
100423a6:	185b      	adds	r3, r3, r1
100423a8:	009b      	lsls	r3, r3, #2
100423aa:	18d3      	adds	r3, r2, r3
100423ac:	3302      	adds	r3, #2
100423ae:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
100423b0:	469c      	mov	ip, r3
							RxReq.data[RxReq.head].data,
100423b2:	4a24      	ldr	r2, [pc, #144]	@ (10042444 <I2C_Recieve+0x1c8>)
100423b4:	23c0      	movs	r3, #192	@ 0xc0
100423b6:	005b      	lsls	r3, r3, #1
100423b8:	5cd3      	ldrb	r3, [r2, r3]
100423ba:	001a      	movs	r2, r3
100423bc:	0013      	movs	r3, r2
100423be:	005b      	lsls	r3, r3, #1
100423c0:	189b      	adds	r3, r3, r2
100423c2:	009b      	lsls	r3, r3, #2
100423c4:	3308      	adds	r3, #8
100423c6:	001a      	movs	r2, r3
100423c8:	4b1e      	ldr	r3, [pc, #120]	@ (10042444 <I2C_Recieve+0x1c8>)
100423ca:	18d2      	adds	r2, r2, r3
							RxReq.data[RxReq.head].registersize);
100423cc:	491d      	ldr	r1, [pc, #116]	@ (10042444 <I2C_Recieve+0x1c8>)
100423ce:	23c0      	movs	r3, #192	@ 0xc0
100423d0:	005b      	lsls	r3, r3, #1
100423d2:	5ccb      	ldrb	r3, [r1, r3]
100423d4:	0018      	movs	r0, r3
100423d6:	491b      	ldr	r1, [pc, #108]	@ (10042444 <I2C_Recieve+0x1c8>)
100423d8:	0003      	movs	r3, r0
100423da:	005b      	lsls	r3, r3, #1
100423dc:	181b      	adds	r3, r3, r0
100423de:	009b      	lsls	r3, r3, #2
100423e0:	18cb      	adds	r3, r1, r3
100423e2:	3302      	adds	r3, #2
100423e4:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
100423e6:	2117      	movs	r1, #23
100423e8:	187c      	adds	r4, r7, r1
100423ea:	4818      	ldr	r0, [pc, #96]	@ (1004244c <I2C_Recieve+0x1d0>)
100423ec:	9301      	str	r3, [sp, #4]
100423ee:	9200      	str	r2, [sp, #0]
100423f0:	4663      	mov	r3, ip
100423f2:	0032      	movs	r2, r6
100423f4:	0029      	movs	r1, r5
100423f6:	f002 fb2b 	bl	10044a50 <HAL_I2C_Mem_Read_IT>
100423fa:	0003      	movs	r3, r0
100423fc:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){
100423fe:	2117      	movs	r1, #23
10042400:	187b      	adds	r3, r7, r1
10042402:	781b      	ldrb	r3, [r3, #0]
10042404:	2b00      	cmp	r3, #0
10042406:	d014      	beq.n	10042432 <I2C_Recieve+0x1b6>
			RxReq.tail--;
10042408:	4a0e      	ldr	r2, [pc, #56]	@ (10042444 <I2C_Recieve+0x1c8>)
1004240a:	2382      	movs	r3, #130	@ 0x82
1004240c:	33ff      	adds	r3, #255	@ 0xff
1004240e:	5cd3      	ldrb	r3, [r2, r3]
10042410:	3b01      	subs	r3, #1
10042412:	b2d9      	uxtb	r1, r3
10042414:	4a0b      	ldr	r2, [pc, #44]	@ (10042444 <I2C_Recieve+0x1c8>)
10042416:	2382      	movs	r3, #130	@ 0x82
10042418:	33ff      	adds	r3, #255	@ 0xff
1004241a:	54d1      	strb	r1, [r2, r3]
			RxReq.tail %= CIRCBUFFERSIZE;
1004241c:	4a09      	ldr	r2, [pc, #36]	@ (10042444 <I2C_Recieve+0x1c8>)
1004241e:	2382      	movs	r3, #130	@ 0x82
10042420:	33ff      	adds	r3, #255	@ 0xff
10042422:	5cd3      	ldrb	r3, [r2, r3]
10042424:	221f      	movs	r2, #31
10042426:	4013      	ands	r3, r2
10042428:	b2d9      	uxtb	r1, r3
1004242a:	4a06      	ldr	r2, [pc, #24]	@ (10042444 <I2C_Recieve+0x1c8>)
1004242c:	2382      	movs	r3, #130	@ 0x82
1004242e:	33ff      	adds	r3, #255	@ 0xff
10042430:	54d1      	strb	r1, [r2, r3]
		}
	}
	return status;
10042432:	2317      	movs	r3, #23
10042434:	18fb      	adds	r3, r7, r3
10042436:	781b      	ldrb	r3, [r3, #0]

}
10042438:	0018      	movs	r0, r3
1004243a:	46bd      	mov	sp, r7
1004243c:	b007      	add	sp, #28
1004243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042440:	20000514 	.word	0x20000514
10042444:	2000020c 	.word	0x2000020c
10042448:	8000001f 	.word	0x8000001f
1004244c:	200001b8 	.word	0x200001b8

10042450 <MP3_SendData>:
static float volume;
static uint32_t starttime;
static uint32_t inittime;
static uint8_t initialized;
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
10042450:	b590      	push	{r4, r7, lr}
10042452:	b085      	sub	sp, #20
10042454:	af00      	add	r7, sp, #0
10042456:	6078      	str	r0, [r7, #4]
	uint8_t accumulation = 0;
10042458:	240f      	movs	r4, #15
1004245a:	193b      	adds	r3, r7, r4
1004245c:	2200      	movs	r2, #0
1004245e:	701a      	strb	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
10042460:	207e      	movs	r0, #126	@ 0x7e
10042462:	f000 fe8b 	bl	1004317c <LPUART_WriteTx>
	accumulation += 0xFF;
10042466:	193b      	adds	r3, r7, r4
10042468:	193a      	adds	r2, r7, r4
1004246a:	7812      	ldrb	r2, [r2, #0]
1004246c:	3a01      	subs	r2, #1
1004246e:	701a      	strb	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
10042470:	20ff      	movs	r0, #255	@ 0xff
10042472:	f000 fe83 	bl	1004317c <LPUART_WriteTx>
	accumulation += 0x066;
10042476:	193b      	adds	r3, r7, r4
10042478:	193a      	adds	r2, r7, r4
1004247a:	7812      	ldrb	r2, [r2, #0]
1004247c:	3266      	adds	r2, #102	@ 0x66
1004247e:	701a      	strb	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
10042480:	2006      	movs	r0, #6
10042482:	f000 fe7b 	bl	1004317c <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
10042486:	2300      	movs	r3, #0
10042488:	60bb      	str	r3, [r7, #8]
1004248a:	e013      	b.n	100424b4 <MP3_SendData+0x64>
		accumulation += string[i];
1004248c:	68bb      	ldr	r3, [r7, #8]
1004248e:	687a      	ldr	r2, [r7, #4]
10042490:	18d3      	adds	r3, r2, r3
10042492:	7819      	ldrb	r1, [r3, #0]
10042494:	220f      	movs	r2, #15
10042496:	18bb      	adds	r3, r7, r2
10042498:	18ba      	adds	r2, r7, r2
1004249a:	7812      	ldrb	r2, [r2, #0]
1004249c:	188a      	adds	r2, r1, r2
1004249e:	701a      	strb	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
100424a0:	68bb      	ldr	r3, [r7, #8]
100424a2:	687a      	ldr	r2, [r7, #4]
100424a4:	18d3      	adds	r3, r2, r3
100424a6:	781b      	ldrb	r3, [r3, #0]
100424a8:	0018      	movs	r0, r3
100424aa:	f000 fe67 	bl	1004317c <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
100424ae:	68bb      	ldr	r3, [r7, #8]
100424b0:	3301      	adds	r3, #1
100424b2:	60bb      	str	r3, [r7, #8]
100424b4:	68bb      	ldr	r3, [r7, #8]
100424b6:	2b03      	cmp	r3, #3
100424b8:	dde8      	ble.n	1004248c <MP3_SendData+0x3c>
	}
	LPUART_WriteTx(accumulation);//checksum
100424ba:	230f      	movs	r3, #15
100424bc:	18fb      	adds	r3, r7, r3
100424be:	781b      	ldrb	r3, [r3, #0]
100424c0:	0018      	movs	r0, r3
100424c2:	f000 fe5b 	bl	1004317c <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
100424c6:	20ef      	movs	r0, #239	@ 0xef
100424c8:	f000 fe58 	bl	1004317c <LPUART_WriteTx>

}
100424cc:	46c0      	nop			@ (mov r8, r8)
100424ce:	46bd      	mov	sp, r7
100424d0:	b005      	add	sp, #20
100424d2:	bd90      	pop	{r4, r7, pc}

100424d4 <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
100424d4:	b580      	push	{r7, lr}
100424d6:	b082      	sub	sp, #8
100424d8:	af00      	add	r7, sp, #0
100424da:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
100424dc:	4b1b      	ldr	r3, [pc, #108]	@ (1004254c <MP3_Event_Init+0x78>)
100424de:	687a      	ldr	r2, [r7, #4]
100424e0:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
100424e2:	f000 fc7f 	bl	10042de4 <TIMERS_Init>
    play = 1;
100424e6:	4b1a      	ldr	r3, [pc, #104]	@ (10042550 <MP3_Event_Init+0x7c>)
100424e8:	2201      	movs	r2, #1
100424ea:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
100424ec:	f7ff faa4 	bl	10041a38 <FLASH_GetDutyCycle>
100424f0:	0003      	movs	r3, r0
100424f2:	2164      	movs	r1, #100	@ 0x64
100424f4:	0018      	movs	r0, r3
100424f6:	f7fd fe17 	bl	10040128 <__udivsi3>
100424fa:	0003      	movs	r3, r0
100424fc:	b2db      	uxtb	r3, r3
100424fe:	0018      	movs	r0, r3
10042500:	f7fe fc8e 	bl	10040e20 <__aeabi_i2f>
10042504:	1c02      	adds	r2, r0, #0
10042506:	4b13      	ldr	r3, [pc, #76]	@ (10042554 <MP3_Event_Init+0x80>)
10042508:	601a      	str	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
1004250a:	f7ff fa83 	bl	10041a14 <FLASH_GetVolume>
1004250e:	0003      	movs	r3, r0
10042510:	2164      	movs	r1, #100	@ 0x64
10042512:	0018      	movs	r0, r3
10042514:	f7fd fe08 	bl	10040128 <__udivsi3>
10042518:	0003      	movs	r3, r0
1004251a:	b2db      	uxtb	r3, r3
1004251c:	0018      	movs	r0, r3
1004251e:	f7fe fc7f 	bl	10040e20 <__aeabi_i2f>
10042522:	1c02      	adds	r2, r0, #0
10042524:	4b0c      	ldr	r3, [pc, #48]	@ (10042558 <MP3_Event_Init+0x84>)
10042526:	601a      	str	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
10042528:	f000 fca8 	bl	10042e7c <TIMERS_GetMilliSeconds>
1004252c:	0002      	movs	r2, r0
1004252e:	4b0b      	ldr	r3, [pc, #44]	@ (1004255c <MP3_Event_Init+0x88>)
10042530:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
10042532:	f000 fca3 	bl	10042e7c <TIMERS_GetMilliSeconds>
10042536:	0002      	movs	r2, r0
10042538:	4b09      	ldr	r3, [pc, #36]	@ (10042560 <MP3_Event_Init+0x8c>)
1004253a:	601a      	str	r2, [r3, #0]
    initialized = 0;
1004253c:	4b09      	ldr	r3, [pc, #36]	@ (10042564 <MP3_Event_Init+0x90>)
1004253e:	2200      	movs	r2, #0
10042540:	701a      	strb	r2, [r3, #0]
    return INIT_OK;
10042542:	2301      	movs	r3, #1
}
10042544:	0018      	movs	r0, r3
10042546:	46bd      	mov	sp, r7
10042548:	b002      	add	sp, #8
1004254a:	bd80      	pop	{r7, pc}
1004254c:	20000518 	.word	0x20000518
10042550:	2000051c 	.word	0x2000051c
10042554:	20000520 	.word	0x20000520
10042558:	20000524 	.word	0x20000524
1004255c:	20000528 	.word	0x20000528
10042560:	2000052c 	.word	0x2000052c
10042564:	20000530 	.word	0x20000530

10042568 <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
10042568:	b580      	push	{r7, lr}
1004256a:	b082      	sub	sp, #8
1004256c:	af00      	add	r7, sp, #0
1004256e:	1d3b      	adds	r3, r7, #4
10042570:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
10042572:	1d3b      	adds	r3, r7, #4
10042574:	781b      	ldrb	r3, [r3, #0]
10042576:	b25b      	sxtb	r3, r3
10042578:	2b0b      	cmp	r3, #11
1004257a:	d103      	bne.n	10042584 <MP3_Event_Post+0x1c>
		Scheduler_Event_Post(event);
1004257c:	1d3b      	adds	r3, r7, #4
1004257e:	6818      	ldr	r0, [r3, #0]
10042580:	f000 fae2 	bl	10042b48 <Scheduler_Event_Post>
	}
    FIFO_Enqueue(MP3queue, event);
10042584:	4b05      	ldr	r3, [pc, #20]	@ (1004259c <MP3_Event_Post+0x34>)
10042586:	681a      	ldr	r2, [r3, #0]
10042588:	1d3b      	adds	r3, r7, #4
1004258a:	6819      	ldr	r1, [r3, #0]
1004258c:	0010      	movs	r0, r2
1004258e:	f7ff f9ac 	bl	100418ea <FIFO_Enqueue>
}
10042592:	46c0      	nop			@ (mov r8, r8)
10042594:	46bd      	mov	sp, r7
10042596:	b002      	add	sp, #8
10042598:	bd80      	pop	{r7, pc}
1004259a:	46c0      	nop			@ (mov r8, r8)
1004259c:	20000518 	.word	0x20000518

100425a0 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
100425a0:	b590      	push	{r4, r7, lr}
100425a2:	b085      	sub	sp, #20
100425a4:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
100425a6:	1d3b      	adds	r3, r7, #4
100425a8:	2200      	movs	r2, #0
100425aa:	701a      	strb	r2, [r3, #0]
100425ac:	1d3b      	adds	r3, r7, #4
100425ae:	2200      	movs	r2, #0
100425b0:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
100425b2:	f000 fc63 	bl	10042e7c <TIMERS_GetMilliSeconds>
100425b6:	0003      	movs	r3, r0
100425b8:	60fb      	str	r3, [r7, #12]
    if (play){
100425ba:	4b68      	ldr	r3, [pc, #416]	@ (1004275c <MP3_Event_Updater+0x1bc>)
100425bc:	781b      	ldrb	r3, [r3, #0]
100425be:	2b00      	cmp	r3, #0
100425c0:	d022      	beq.n	10042608 <MP3_Event_Updater+0x68>
		if((timer-starttime) >= CYCLELENGTH*DC){//if the speaker is playing, and time is up
100425c2:	4b67      	ldr	r3, [pc, #412]	@ (10042760 <MP3_Event_Updater+0x1c0>)
100425c4:	681b      	ldr	r3, [r3, #0]
100425c6:	68fa      	ldr	r2, [r7, #12]
100425c8:	1ad3      	subs	r3, r2, r3
100425ca:	0018      	movs	r0, r3
100425cc:	f7fe fc74 	bl	10040eb8 <__aeabi_ui2f>
100425d0:	1c04      	adds	r4, r0, #0
100425d2:	4b64      	ldr	r3, [pc, #400]	@ (10042764 <MP3_Event_Updater+0x1c4>)
100425d4:	681b      	ldr	r3, [r3, #0]
100425d6:	4964      	ldr	r1, [pc, #400]	@ (10042768 <MP3_Event_Updater+0x1c8>)
100425d8:	1c18      	adds	r0, r3, #0
100425da:	f7fe f91f 	bl	1004081c <__aeabi_fmul>
100425de:	1c03      	adds	r3, r0, #0
100425e0:	1c19      	adds	r1, r3, #0
100425e2:	1c20      	adds	r0, r4, #0
100425e4:	f7fd ff46 	bl	10040474 <__aeabi_fcmpge>
100425e8:	1e03      	subs	r3, r0, #0
100425ea:	d03d      	beq.n	10042668 <MP3_Event_Updater+0xc8>
			event.status = EVENT_TIMEOUT;
100425ec:	1d3b      	adds	r3, r7, #4
100425ee:	2209      	movs	r2, #9
100425f0:	701a      	strb	r2, [r3, #0]
			event.data = 0;//next state of play
100425f2:	1d3b      	adds	r3, r7, #4
100425f4:	2200      	movs	r2, #0
100425f6:	805a      	strh	r2, [r3, #2]
			starttime = timer;
100425f8:	4b59      	ldr	r3, [pc, #356]	@ (10042760 <MP3_Event_Updater+0x1c0>)
100425fa:	68fa      	ldr	r2, [r7, #12]
100425fc:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
100425fe:	1d3b      	adds	r3, r7, #4
10042600:	6818      	ldr	r0, [r3, #0]
10042602:	f7ff ffb1 	bl	10042568 <MP3_Event_Post>
10042606:	e02f      	b.n	10042668 <MP3_Event_Updater+0xc8>
		}
    } else {
		if(DC != 0 && ((timer-starttime) >= CYCLELENGTH*(1-DC))){// if the speaker is playing and time is up, DC = 0 don't play
10042608:	4b56      	ldr	r3, [pc, #344]	@ (10042764 <MP3_Event_Updater+0x1c4>)
1004260a:	681b      	ldr	r3, [r3, #0]
1004260c:	2100      	movs	r1, #0
1004260e:	1c18      	adds	r0, r3, #0
10042610:	f7fd ff0c 	bl	1004042c <__aeabi_fcmpeq>
10042614:	1e03      	subs	r3, r0, #0
10042616:	d127      	bne.n	10042668 <MP3_Event_Updater+0xc8>
10042618:	4b51      	ldr	r3, [pc, #324]	@ (10042760 <MP3_Event_Updater+0x1c0>)
1004261a:	681b      	ldr	r3, [r3, #0]
1004261c:	68fa      	ldr	r2, [r7, #12]
1004261e:	1ad3      	subs	r3, r2, r3
10042620:	0018      	movs	r0, r3
10042622:	f7fe fc49 	bl	10040eb8 <__aeabi_ui2f>
10042626:	1c04      	adds	r4, r0, #0
10042628:	4b4e      	ldr	r3, [pc, #312]	@ (10042764 <MP3_Event_Updater+0x1c4>)
1004262a:	681b      	ldr	r3, [r3, #0]
1004262c:	1c19      	adds	r1, r3, #0
1004262e:	20fe      	movs	r0, #254	@ 0xfe
10042630:	0580      	lsls	r0, r0, #22
10042632:	f7fe fa31 	bl	10040a98 <__aeabi_fsub>
10042636:	1c03      	adds	r3, r0, #0
10042638:	494b      	ldr	r1, [pc, #300]	@ (10042768 <MP3_Event_Updater+0x1c8>)
1004263a:	1c18      	adds	r0, r3, #0
1004263c:	f7fe f8ee 	bl	1004081c <__aeabi_fmul>
10042640:	1c03      	adds	r3, r0, #0
10042642:	1c19      	adds	r1, r3, #0
10042644:	1c20      	adds	r0, r4, #0
10042646:	f7fd ff15 	bl	10040474 <__aeabi_fcmpge>
1004264a:	1e03      	subs	r3, r0, #0
1004264c:	d00c      	beq.n	10042668 <MP3_Event_Updater+0xc8>
			event.status = EVENT_TIMEOUT;
1004264e:	1d3b      	adds	r3, r7, #4
10042650:	2209      	movs	r2, #9
10042652:	701a      	strb	r2, [r3, #0]
			event.data = 1;//next state of play
10042654:	1d3b      	adds	r3, r7, #4
10042656:	2201      	movs	r2, #1
10042658:	805a      	strh	r2, [r3, #2]
			starttime = timer;
1004265a:	4b41      	ldr	r3, [pc, #260]	@ (10042760 <MP3_Event_Updater+0x1c0>)
1004265c:	68fa      	ldr	r2, [r7, #12]
1004265e:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
10042660:	1d3b      	adds	r3, r7, #4
10042662:	6818      	ldr	r0, [r3, #0]
10042664:	f7ff ff80 	bl	10042568 <MP3_Event_Post>
		}
    }
    if(((timer-inittime) >= 3000) && !initialized){//if the speaker is playing, and time is up
10042668:	4b40      	ldr	r3, [pc, #256]	@ (1004276c <MP3_Event_Updater+0x1cc>)
1004266a:	681b      	ldr	r3, [r3, #0]
1004266c:	68fa      	ldr	r2, [r7, #12]
1004266e:	1ad3      	subs	r3, r2, r3
10042670:	4a3f      	ldr	r2, [pc, #252]	@ (10042770 <MP3_Event_Updater+0x1d0>)
10042672:	4293      	cmp	r3, r2
10042674:	d90d      	bls.n	10042692 <MP3_Event_Updater+0xf2>
10042676:	4b3f      	ldr	r3, [pc, #252]	@ (10042774 <MP3_Event_Updater+0x1d4>)
10042678:	781b      	ldrb	r3, [r3, #0]
1004267a:	2b00      	cmp	r3, #0
1004267c:	d109      	bne.n	10042692 <MP3_Event_Updater+0xf2>
		event.status = EVENT_INIT;
1004267e:	1d3b      	adds	r3, r7, #4
10042680:	2201      	movs	r2, #1
10042682:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10042684:	1d3b      	adds	r3, r7, #4
10042686:	2200      	movs	r2, #0
10042688:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
1004268a:	1d3b      	adds	r3, r7, #4
1004268c:	6818      	ldr	r0, [r3, #0]
1004268e:	f7ff ff6b 	bl	10042568 <MP3_Event_Post>
	}
    if(volume != FLASH_GetVolume()/100 || DC != FLASH_GetDutyCycle()/100){
10042692:	f7ff f9bf 	bl	10041a14 <FLASH_GetVolume>
10042696:	0003      	movs	r3, r0
10042698:	2164      	movs	r1, #100	@ 0x64
1004269a:	0018      	movs	r0, r3
1004269c:	f7fd fd44 	bl	10040128 <__udivsi3>
100426a0:	0003      	movs	r3, r0
100426a2:	b2db      	uxtb	r3, r3
100426a4:	0018      	movs	r0, r3
100426a6:	f7fe fbbb 	bl	10040e20 <__aeabi_i2f>
100426aa:	1c02      	adds	r2, r0, #0
100426ac:	4b32      	ldr	r3, [pc, #200]	@ (10042778 <MP3_Event_Updater+0x1d8>)
100426ae:	681b      	ldr	r3, [r3, #0]
100426b0:	1c19      	adds	r1, r3, #0
100426b2:	1c10      	adds	r0, r2, #0
100426b4:	f7fd feba 	bl	1004042c <__aeabi_fcmpeq>
100426b8:	1e03      	subs	r3, r0, #0
100426ba:	d014      	beq.n	100426e6 <MP3_Event_Updater+0x146>
100426bc:	f7ff f9bc 	bl	10041a38 <FLASH_GetDutyCycle>
100426c0:	0003      	movs	r3, r0
100426c2:	2164      	movs	r1, #100	@ 0x64
100426c4:	0018      	movs	r0, r3
100426c6:	f7fd fd2f 	bl	10040128 <__udivsi3>
100426ca:	0003      	movs	r3, r0
100426cc:	b2db      	uxtb	r3, r3
100426ce:	0018      	movs	r0, r3
100426d0:	f7fe fba6 	bl	10040e20 <__aeabi_i2f>
100426d4:	1c02      	adds	r2, r0, #0
100426d6:	4b23      	ldr	r3, [pc, #140]	@ (10042764 <MP3_Event_Updater+0x1c4>)
100426d8:	681b      	ldr	r3, [r3, #0]
100426da:	1c19      	adds	r1, r3, #0
100426dc:	1c10      	adds	r0, r2, #0
100426de:	f7fd fea5 	bl	1004042c <__aeabi_fcmpeq>
100426e2:	1e03      	subs	r3, r0, #0
100426e4:	d123      	bne.n	1004272e <MP3_Event_Updater+0x18e>
    	event.status = EVENT_SETTINGS;
100426e6:	1d3b      	adds	r3, r7, #4
100426e8:	220a      	movs	r2, #10
100426ea:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume()/100);
100426ec:	f7ff f992 	bl	10041a14 <FLASH_GetVolume>
100426f0:	0003      	movs	r3, r0
100426f2:	2164      	movs	r1, #100	@ 0x64
100426f4:	0018      	movs	r0, r3
100426f6:	f7fd fd17 	bl	10040128 <__udivsi3>
100426fa:	0003      	movs	r3, r0
100426fc:	b2db      	uxtb	r3, r3
100426fe:	0018      	movs	r0, r3
10042700:	f7fe fb8e 	bl	10040e20 <__aeabi_i2f>
10042704:	1c02      	adds	r2, r0, #0
10042706:	4b1c      	ldr	r3, [pc, #112]	@ (10042778 <MP3_Event_Updater+0x1d8>)
10042708:	681b      	ldr	r3, [r3, #0]
1004270a:	2101      	movs	r1, #1
1004270c:	1c0c      	adds	r4, r1, #0
1004270e:	1c19      	adds	r1, r3, #0
10042710:	1c10      	adds	r0, r2, #0
10042712:	f7fd fe8b 	bl	1004042c <__aeabi_fcmpeq>
10042716:	1e03      	subs	r3, r0, #0
10042718:	d101      	bne.n	1004271e <MP3_Event_Updater+0x17e>
1004271a:	2300      	movs	r3, #0
1004271c:	1c1c      	adds	r4, r3, #0
1004271e:	b2e3      	uxtb	r3, r4
10042720:	001a      	movs	r2, r3
10042722:	1d3b      	adds	r3, r7, #4
10042724:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10042726:	1d3b      	adds	r3, r7, #4
10042728:	6818      	ldr	r0, [r3, #0]
1004272a:	f7ff ff1d 	bl	10042568 <MP3_Event_Post>
    }
    return event;
1004272e:	2108      	movs	r1, #8
10042730:	187b      	adds	r3, r7, r1
10042732:	1d3a      	adds	r2, r7, #4
10042734:	6812      	ldr	r2, [r2, #0]
10042736:	601a      	str	r2, [r3, #0]
10042738:	187a      	adds	r2, r7, r1
1004273a:	2300      	movs	r3, #0
1004273c:	8811      	ldrh	r1, [r2, #0]
1004273e:	0409      	lsls	r1, r1, #16
10042740:	0c09      	lsrs	r1, r1, #16
10042742:	0c1b      	lsrs	r3, r3, #16
10042744:	041b      	lsls	r3, r3, #16
10042746:	430b      	orrs	r3, r1
10042748:	8852      	ldrh	r2, [r2, #2]
1004274a:	0412      	lsls	r2, r2, #16
1004274c:	041b      	lsls	r3, r3, #16
1004274e:	0c1b      	lsrs	r3, r3, #16
10042750:	4313      	orrs	r3, r2
}
10042752:	0018      	movs	r0, r3
10042754:	46bd      	mov	sp, r7
10042756:	b005      	add	sp, #20
10042758:	bd90      	pop	{r4, r7, pc}
1004275a:	46c0      	nop			@ (mov r8, r8)
1004275c:	2000051c 	.word	0x2000051c
10042760:	20000528 	.word	0x20000528
10042764:	20000520 	.word	0x20000520
10042768:	49127c00 	.word	0x49127c00
1004276c:	2000052c 	.word	0x2000052c
10042770:	00000bb7 	.word	0x00000bb7
10042774:	20000530 	.word	0x20000530
10042778:	20000524 	.word	0x20000524

1004277c <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
1004277c:	b590      	push	{r4, r7, lr}
1004277e:	b08b      	sub	sp, #44	@ 0x2c
10042780:	af00      	add	r7, sp, #0
10042782:	1d3b      	adds	r3, r7, #4
10042784:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
10042786:	1d3b      	adds	r3, r7, #4
10042788:	781b      	ldrb	r3, [r3, #0]
1004278a:	b25b      	sxtb	r3, r3
1004278c:	2b01      	cmp	r3, #1
1004278e:	d10a      	bne.n	100427a6 <MP3_Event_Handler+0x2a>
		//7E FF 06 08 00 00 01 xx EF //repeat folder
		char send[4] = {0x08, 0x00, 0x00, 0x01};
10042790:	2124      	movs	r1, #36	@ 0x24
10042792:	187b      	adds	r3, r7, r1
10042794:	4a51      	ldr	r2, [pc, #324]	@ (100428dc <MP3_Event_Handler+0x160>)
10042796:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
10042798:	187b      	adds	r3, r7, r1
1004279a:	0018      	movs	r0, r3
1004279c:	f7ff fe58 	bl	10042450 <MP3_SendData>
		initialized = 1;
100427a0:	4b4f      	ldr	r3, [pc, #316]	@ (100428e0 <MP3_Event_Handler+0x164>)
100427a2:	2201      	movs	r2, #1
100427a4:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
100427a6:	1d3b      	adds	r3, r7, #4
100427a8:	781b      	ldrb	r3, [r3, #0]
100427aa:	b25b      	sxtb	r3, r3
100427ac:	2b09      	cmp	r3, #9
100427ae:	d119      	bne.n	100427e4 <MP3_Event_Handler+0x68>
		//send either play or stop to the mp3 player
		play = event.data;
100427b0:	1d3b      	adds	r3, r7, #4
100427b2:	885b      	ldrh	r3, [r3, #2]
100427b4:	b2da      	uxtb	r2, r3
100427b6:	4b4b      	ldr	r3, [pc, #300]	@ (100428e4 <MP3_Event_Handler+0x168>)
100427b8:	701a      	strb	r2, [r3, #0]
		if(play){
100427ba:	4b4a      	ldr	r3, [pc, #296]	@ (100428e4 <MP3_Event_Handler+0x168>)
100427bc:	781b      	ldrb	r3, [r3, #0]
100427be:	2b00      	cmp	r3, #0
100427c0:	d008      	beq.n	100427d4 <MP3_Event_Handler+0x58>
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
100427c2:	2120      	movs	r1, #32
100427c4:	187b      	adds	r3, r7, r1
100427c6:	220d      	movs	r2, #13
100427c8:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
100427ca:	187b      	adds	r3, r7, r1
100427cc:	0018      	movs	r0, r3
100427ce:	f7ff fe3f 	bl	10042450 <MP3_SendData>
100427d2:	e007      	b.n	100427e4 <MP3_Event_Handler+0x68>
		}else {

			char send[4] = {0x0E, 0x00, 0x00, 0x00};
100427d4:	211c      	movs	r1, #28
100427d6:	187b      	adds	r3, r7, r1
100427d8:	220e      	movs	r2, #14
100427da:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
100427dc:	187b      	adds	r3, r7, r1
100427de:	0018      	movs	r0, r3
100427e0:	f7ff fe36 	bl	10042450 <MP3_SendData>
		}

	}if(event.status == EVENT_PLAY){
100427e4:	1d3b      	adds	r3, r7, #4
100427e6:	781b      	ldrb	r3, [r3, #0]
100427e8:	b25b      	sxtb	r3, r3
100427ea:	2b0b      	cmp	r3, #11
100427ec:	d12e      	bne.n	1004284c <MP3_Event_Handler+0xd0>
		if(event.data == 0){//0 is not a valid folder or track number
100427ee:	1d3b      	adds	r3, r7, #4
100427f0:	885b      	ldrh	r3, [r3, #2]
100427f2:	2b00      	cmp	r3, #0
100427f4:	d10b      	bne.n	1004280e <MP3_Event_Handler+0x92>
			DC = 0;// immediately cause a timeout to stop the speaker
100427f6:	4b3c      	ldr	r3, [pc, #240]	@ (100428e8 <MP3_Event_Handler+0x16c>)
100427f8:	2200      	movs	r2, #0
100427fa:	601a      	str	r2, [r3, #0]
			char send[4] = {0x0A, 0x00, 0x00, 0x00};//enter low power mode
100427fc:	2118      	movs	r1, #24
100427fe:	187b      	adds	r3, r7, r1
10042800:	220a      	movs	r2, #10
10042802:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10042804:	187b      	adds	r3, r7, r1
10042806:	0018      	movs	r0, r3
10042808:	f7ff fe22 	bl	10042450 <MP3_SendData>
1004280c:	e01e      	b.n	1004284c <MP3_Event_Handler+0xd0>
		} else {

			char send1[4] = {0x0B, 0x00, 0x00, 0x00};//exit low power mode?
1004280e:	2114      	movs	r1, #20
10042810:	187b      	adds	r3, r7, r1
10042812:	220b      	movs	r2, #11
10042814:	601a      	str	r2, [r3, #0]
			MP3_SendData(send1);
10042816:	187b      	adds	r3, r7, r1
10042818:	0018      	movs	r0, r3
1004281a:	f7ff fe19 	bl	10042450 <MP3_SendData>
			//7E FF 06 0F 00 FOLDER# TRACK# xx EF

			char send2[4] = {0x0F, 0x00, event.data>>8, event.data&0xFF};
1004281e:	2110      	movs	r1, #16
10042820:	187b      	adds	r3, r7, r1
10042822:	220f      	movs	r2, #15
10042824:	701a      	strb	r2, [r3, #0]
10042826:	187b      	adds	r3, r7, r1
10042828:	2200      	movs	r2, #0
1004282a:	705a      	strb	r2, [r3, #1]
1004282c:	1d3b      	adds	r3, r7, #4
1004282e:	885b      	ldrh	r3, [r3, #2]
10042830:	0a1b      	lsrs	r3, r3, #8
10042832:	b29b      	uxth	r3, r3
10042834:	b2da      	uxtb	r2, r3
10042836:	187b      	adds	r3, r7, r1
10042838:	709a      	strb	r2, [r3, #2]
1004283a:	1d3b      	adds	r3, r7, #4
1004283c:	885b      	ldrh	r3, [r3, #2]
1004283e:	b2da      	uxtb	r2, r3
10042840:	187b      	adds	r3, r7, r1
10042842:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send2);
10042844:	187b      	adds	r3, r7, r1
10042846:	0018      	movs	r0, r3
10042848:	f7ff fe02 	bl	10042450 <MP3_SendData>
		}


	}if(event.status == EVENT_SETTINGS){
1004284c:	1d3b      	adds	r3, r7, #4
1004284e:	781b      	ldrb	r3, [r3, #0]
10042850:	b25b      	sxtb	r3, r3
10042852:	2b0a      	cmp	r3, #10
10042854:	d13d      	bne.n	100428d2 <MP3_Event_Handler+0x156>
		DC = FLASH_GetDutyCycle()/100;
10042856:	f7ff f8ef 	bl	10041a38 <FLASH_GetDutyCycle>
1004285a:	0003      	movs	r3, r0
1004285c:	2164      	movs	r1, #100	@ 0x64
1004285e:	0018      	movs	r0, r3
10042860:	f7fd fc62 	bl	10040128 <__udivsi3>
10042864:	0003      	movs	r3, r0
10042866:	b2db      	uxtb	r3, r3
10042868:	0018      	movs	r0, r3
1004286a:	f7fe fad9 	bl	10040e20 <__aeabi_i2f>
1004286e:	1c02      	adds	r2, r0, #0
10042870:	4b1d      	ldr	r3, [pc, #116]	@ (100428e8 <MP3_Event_Handler+0x16c>)
10042872:	601a      	str	r2, [r3, #0]
		volume = FLASH_GetVolume()/100;
10042874:	f7ff f8ce 	bl	10041a14 <FLASH_GetVolume>
10042878:	0003      	movs	r3, r0
1004287a:	2164      	movs	r1, #100	@ 0x64
1004287c:	0018      	movs	r0, r3
1004287e:	f7fd fc53 	bl	10040128 <__udivsi3>
10042882:	0003      	movs	r3, r0
10042884:	b2db      	uxtb	r3, r3
10042886:	0018      	movs	r0, r3
10042888:	f7fe faca 	bl	10040e20 <__aeabi_i2f>
1004288c:	1c02      	adds	r2, r0, #0
1004288e:	4b17      	ldr	r3, [pc, #92]	@ (100428ec <MP3_Event_Handler+0x170>)
10042890:	601a      	str	r2, [r3, #0]
		if(!event.data){//volume == FLASH_GetVolume()/100
10042892:	1d3b      	adds	r3, r7, #4
10042894:	885b      	ldrh	r3, [r3, #2]
10042896:	2b00      	cmp	r3, #0
10042898:	d11b      	bne.n	100428d2 <MP3_Event_Handler+0x156>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(volume*30)};
1004289a:	240c      	movs	r4, #12
1004289c:	193b      	adds	r3, r7, r4
1004289e:	2206      	movs	r2, #6
100428a0:	701a      	strb	r2, [r3, #0]
100428a2:	193b      	adds	r3, r7, r4
100428a4:	2200      	movs	r2, #0
100428a6:	705a      	strb	r2, [r3, #1]
100428a8:	193b      	adds	r3, r7, r4
100428aa:	2200      	movs	r2, #0
100428ac:	709a      	strb	r2, [r3, #2]
100428ae:	4b0f      	ldr	r3, [pc, #60]	@ (100428ec <MP3_Event_Handler+0x170>)
100428b0:	681b      	ldr	r3, [r3, #0]
100428b2:	490f      	ldr	r1, [pc, #60]	@ (100428f0 <MP3_Event_Handler+0x174>)
100428b4:	1c18      	adds	r0, r3, #0
100428b6:	f7fd ffb1 	bl	1004081c <__aeabi_fmul>
100428ba:	1c03      	adds	r3, r0, #0
100428bc:	1c18      	adds	r0, r3, #0
100428be:	f7fd fe03 	bl	100404c8 <__aeabi_f2uiz>
100428c2:	0003      	movs	r3, r0
100428c4:	b2da      	uxtb	r2, r3
100428c6:	193b      	adds	r3, r7, r4
100428c8:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
100428ca:	193b      	adds	r3, r7, r4
100428cc:	0018      	movs	r0, r3
100428ce:	f7ff fdbf 	bl	10042450 <MP3_SendData>
		}
	}
    return 1;
100428d2:	2301      	movs	r3, #1
}
100428d4:	0018      	movs	r0, r3
100428d6:	46bd      	mov	sp, r7
100428d8:	b00b      	add	sp, #44	@ 0x2c
100428da:	bd90      	pop	{r4, r7, pc}
100428dc:	01000008 	.word	0x01000008
100428e0:	20000530 	.word	0x20000530
100428e4:	2000051c 	.word	0x2000051c
100428e8:	20000520 	.word	0x20000520
100428ec:	20000524 	.word	0x20000524
100428f0:	41f00000 	.word	0x41f00000

100428f4 <CompareTime>:
static uint8_t minute;

static uint8_t logging;//logging
static uint8_t playdata;
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
100428f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100428f6:	b08d      	sub	sp, #52	@ 0x34
100428f8:	af00      	add	r7, sp, #0
	if(month == NULLDATE || day == NULLDATE || hour == NULLDATE || minute == NULLDATE){
100428fa:	4b80      	ldr	r3, [pc, #512]	@ (10042afc <CompareTime+0x208>)
100428fc:	781b      	ldrb	r3, [r3, #0]
100428fe:	2bff      	cmp	r3, #255	@ 0xff
10042900:	d100      	bne.n	10042904 <CompareTime+0x10>
10042902:	e0f7      	b.n	10042af4 <CompareTime+0x200>
10042904:	4b7e      	ldr	r3, [pc, #504]	@ (10042b00 <CompareTime+0x20c>)
10042906:	781b      	ldrb	r3, [r3, #0]
10042908:	2bff      	cmp	r3, #255	@ 0xff
1004290a:	d100      	bne.n	1004290e <CompareTime+0x1a>
1004290c:	e0f2      	b.n	10042af4 <CompareTime+0x200>
1004290e:	4b7d      	ldr	r3, [pc, #500]	@ (10042b04 <CompareTime+0x210>)
10042910:	781b      	ldrb	r3, [r3, #0]
10042912:	2bff      	cmp	r3, #255	@ 0xff
10042914:	d100      	bne.n	10042918 <CompareTime+0x24>
10042916:	e0ed      	b.n	10042af4 <CompareTime+0x200>
10042918:	4b7b      	ldr	r3, [pc, #492]	@ (10042b08 <CompareTime+0x214>)
1004291a:	781b      	ldrb	r3, [r3, #0]
1004291c:	2bff      	cmp	r3, #255	@ 0xff
1004291e:	d100      	bne.n	10042922 <CompareTime+0x2e>
10042920:	e0e8      	b.n	10042af4 <CompareTime+0x200>
		return;
	}
	if(logging){
10042922:	4b7a      	ldr	r3, [pc, #488]	@ (10042b0c <CompareTime+0x218>)
10042924:	781b      	ldrb	r3, [r3, #0]
10042926:	2b00      	cmp	r3, #0
10042928:	d05f      	beq.n	100429ea <CompareTime+0xf6>
		scheduleEvent event;

		event.month = month;
1004292a:	4b74      	ldr	r3, [pc, #464]	@ (10042afc <CompareTime+0x208>)
1004292c:	781a      	ldrb	r2, [r3, #0]
1004292e:	2524      	movs	r5, #36	@ 0x24
10042930:	197b      	adds	r3, r7, r5
10042932:	701a      	strb	r2, [r3, #0]
		event.day = day;
10042934:	4b72      	ldr	r3, [pc, #456]	@ (10042b00 <CompareTime+0x20c>)
10042936:	781a      	ldrb	r2, [r3, #0]
10042938:	197b      	adds	r3, r7, r5
1004293a:	705a      	strb	r2, [r3, #1]
		if(playdata){
1004293c:	4b74      	ldr	r3, [pc, #464]	@ (10042b10 <CompareTime+0x21c>)
1004293e:	781b      	ldrb	r3, [r3, #0]
10042940:	2b00      	cmp	r3, #0
10042942:	d01c      	beq.n	1004297e <CompareTime+0x8a>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10042944:	4b6f      	ldr	r3, [pc, #444]	@ (10042b04 <CompareTime+0x210>)
10042946:	781b      	ldrb	r3, [r3, #0]
10042948:	00db      	lsls	r3, r3, #3
1004294a:	b25c      	sxtb	r4, r3
1004294c:	4b6e      	ldr	r3, [pc, #440]	@ (10042b08 <CompareTime+0x214>)
1004294e:	781b      	ldrb	r3, [r3, #0]
10042950:	210f      	movs	r1, #15
10042952:	0018      	movs	r0, r3
10042954:	f7fd fbe8 	bl	10040128 <__udivsi3>
10042958:	0003      	movs	r3, r0
1004295a:	b2db      	uxtb	r3, r3
1004295c:	b25b      	sxtb	r3, r3
1004295e:	4023      	ands	r3, r4
10042960:	b25b      	sxtb	r3, r3
10042962:	b2da      	uxtb	r2, r3
10042964:	197b      	adds	r3, r7, r5
10042966:	709a      	strb	r2, [r3, #2]
			event.stop = 0;
10042968:	197b      	adds	r3, r7, r5
1004296a:	2200      	movs	r2, #0
1004296c:	70da      	strb	r2, [r3, #3]
			event.folder = (playdata>>8)&0xFF;
1004296e:	197b      	adds	r3, r7, r5
10042970:	2200      	movs	r2, #0
10042972:	711a      	strb	r2, [r3, #4]
			event.track = playdata&0xFF;
10042974:	4b66      	ldr	r3, [pc, #408]	@ (10042b10 <CompareTime+0x21c>)
10042976:	781a      	ldrb	r2, [r3, #0]
10042978:	197b      	adds	r3, r7, r5
1004297a:	715a      	strb	r2, [r3, #5]
1004297c:	e028      	b.n	100429d0 <CompareTime+0xdc>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
1004297e:	f7ff f86d 	bl	10041a5c <FLASH_GetLogsSize>
10042982:	0003      	movs	r3, r0
10042984:	3b01      	subs	r3, #1
10042986:	b29a      	uxth	r2, r3
10042988:	261c      	movs	r6, #28
1004298a:	19bb      	adds	r3, r7, r6
1004298c:	0011      	movs	r1, r2
1004298e:	0018      	movs	r0, r3
10042990:	f7ff f876 	bl	10041a80 <FLASH_ReadLogs>
			event.start = 0;
10042994:	2524      	movs	r5, #36	@ 0x24
10042996:	197b      	adds	r3, r7, r5
10042998:	2200      	movs	r2, #0
1004299a:	709a      	strb	r2, [r3, #2]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
1004299c:	4b59      	ldr	r3, [pc, #356]	@ (10042b04 <CompareTime+0x210>)
1004299e:	781b      	ldrb	r3, [r3, #0]
100429a0:	00db      	lsls	r3, r3, #3
100429a2:	b25c      	sxtb	r4, r3
100429a4:	4b58      	ldr	r3, [pc, #352]	@ (10042b08 <CompareTime+0x214>)
100429a6:	781b      	ldrb	r3, [r3, #0]
100429a8:	210f      	movs	r1, #15
100429aa:	0018      	movs	r0, r3
100429ac:	f7fd fbbc 	bl	10040128 <__udivsi3>
100429b0:	0003      	movs	r3, r0
100429b2:	b2db      	uxtb	r3, r3
100429b4:	b25b      	sxtb	r3, r3
100429b6:	4023      	ands	r3, r4
100429b8:	b25b      	sxtb	r3, r3
100429ba:	b2da      	uxtb	r2, r3
100429bc:	197b      	adds	r3, r7, r5
100429be:	70da      	strb	r2, [r3, #3]
			event.folder = prevevent.folder;
100429c0:	19bb      	adds	r3, r7, r6
100429c2:	791a      	ldrb	r2, [r3, #4]
100429c4:	197b      	adds	r3, r7, r5
100429c6:	711a      	strb	r2, [r3, #4]
			event.track = prevevent.track;
100429c8:	19bb      	adds	r3, r7, r6
100429ca:	795a      	ldrb	r2, [r3, #5]
100429cc:	197b      	adds	r3, r7, r5
100429ce:	715a      	strb	r2, [r3, #5]
		}

		month = NULLDATE;
100429d0:	4b4a      	ldr	r3, [pc, #296]	@ (10042afc <CompareTime+0x208>)
100429d2:	22ff      	movs	r2, #255	@ 0xff
100429d4:	701a      	strb	r2, [r3, #0]
		day = NULLDATE;
100429d6:	4b4a      	ldr	r3, [pc, #296]	@ (10042b00 <CompareTime+0x20c>)
100429d8:	22ff      	movs	r2, #255	@ 0xff
100429da:	701a      	strb	r2, [r3, #0]
		hour = NULLDATE;
100429dc:	4b49      	ldr	r3, [pc, #292]	@ (10042b04 <CompareTime+0x210>)
100429de:	22ff      	movs	r2, #255	@ 0xff
100429e0:	701a      	strb	r2, [r3, #0]
		minute = NULLDATE;
100429e2:	4b49      	ldr	r3, [pc, #292]	@ (10042b08 <CompareTime+0x214>)
100429e4:	22ff      	movs	r2, #255	@ 0xff
100429e6:	701a      	strb	r2, [r3, #0]
100429e8:	e085      	b.n	10042af6 <CompareTime+0x202>
	} else {
		scheduleEvent event;
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
100429ea:	2300      	movs	r3, #0
100429ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
100429ee:	e078      	b.n	10042ae2 <CompareTime+0x1ee>
			event = FLASH_ReadSchedule(i);
100429f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100429f2:	b29a      	uxth	r2, r3
100429f4:	2414      	movs	r4, #20
100429f6:	193b      	adds	r3, r7, r4
100429f8:	0011      	movs	r1, r2
100429fa:	0018      	movs	r0, r3
100429fc:	f7ff f8c4 	bl	10041b88 <FLASH_ReadSchedule>
			if(event.month == month && event.day == day){
10042a00:	0021      	movs	r1, r4
10042a02:	187b      	adds	r3, r7, r1
10042a04:	781a      	ldrb	r2, [r3, #0]
10042a06:	4b3d      	ldr	r3, [pc, #244]	@ (10042afc <CompareTime+0x208>)
10042a08:	781b      	ldrb	r3, [r3, #0]
10042a0a:	429a      	cmp	r2, r3
10042a0c:	d166      	bne.n	10042adc <CompareTime+0x1e8>
10042a0e:	187b      	adds	r3, r7, r1
10042a10:	785a      	ldrb	r2, [r3, #1]
10042a12:	4b3b      	ldr	r3, [pc, #236]	@ (10042b00 <CompareTime+0x20c>)
10042a14:	781b      	ldrb	r3, [r3, #0]
10042a16:	429a      	cmp	r2, r3
10042a18:	d160      	bne.n	10042adc <CompareTime+0x1e8>
				if((event.start&0b11111000)>>3 == hour && (event.start & 0b011)*15 == minute){
10042a1a:	187b      	adds	r3, r7, r1
10042a1c:	789b      	ldrb	r3, [r3, #2]
10042a1e:	08db      	lsrs	r3, r3, #3
10042a20:	b2da      	uxtb	r2, r3
10042a22:	4b38      	ldr	r3, [pc, #224]	@ (10042b04 <CompareTime+0x210>)
10042a24:	781b      	ldrb	r3, [r3, #0]
10042a26:	429a      	cmp	r2, r3
10042a28:	d129      	bne.n	10042a7e <CompareTime+0x18a>
10042a2a:	187b      	adds	r3, r7, r1
10042a2c:	789b      	ldrb	r3, [r3, #2]
10042a2e:	001a      	movs	r2, r3
10042a30:	2303      	movs	r3, #3
10042a32:	401a      	ands	r2, r3
10042a34:	0013      	movs	r3, r2
10042a36:	011b      	lsls	r3, r3, #4
10042a38:	1a9b      	subs	r3, r3, r2
10042a3a:	4a33      	ldr	r2, [pc, #204]	@ (10042b08 <CompareTime+0x214>)
10042a3c:	7812      	ldrb	r2, [r2, #0]
10042a3e:	4293      	cmp	r3, r2
10042a40:	d11d      	bne.n	10042a7e <CompareTime+0x18a>
					Event_t play = (Event_t){EVENT_PLAY, (event.folder<<8) + event.track};
10042a42:	2010      	movs	r0, #16
10042a44:	183b      	adds	r3, r7, r0
10042a46:	220b      	movs	r2, #11
10042a48:	701a      	strb	r2, [r3, #0]
10042a4a:	187b      	adds	r3, r7, r1
10042a4c:	791b      	ldrb	r3, [r3, #4]
10042a4e:	021b      	lsls	r3, r3, #8
10042a50:	b29b      	uxth	r3, r3
10042a52:	187a      	adds	r2, r7, r1
10042a54:	7952      	ldrb	r2, [r2, #5]
10042a56:	189b      	adds	r3, r3, r2
10042a58:	b29a      	uxth	r2, r3
10042a5a:	183b      	adds	r3, r7, r0
10042a5c:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
10042a5e:	183b      	adds	r3, r7, r0
10042a60:	6818      	ldr	r0, [r3, #0]
10042a62:	f7ff fd81 	bl	10042568 <MP3_Event_Post>
					month = NULLDATE;
10042a66:	4b25      	ldr	r3, [pc, #148]	@ (10042afc <CompareTime+0x208>)
10042a68:	22ff      	movs	r2, #255	@ 0xff
10042a6a:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10042a6c:	4b24      	ldr	r3, [pc, #144]	@ (10042b00 <CompareTime+0x20c>)
10042a6e:	22ff      	movs	r2, #255	@ 0xff
10042a70:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
10042a72:	4b24      	ldr	r3, [pc, #144]	@ (10042b04 <CompareTime+0x210>)
10042a74:	22ff      	movs	r2, #255	@ 0xff
10042a76:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
10042a78:	4b23      	ldr	r3, [pc, #140]	@ (10042b08 <CompareTime+0x214>)
10042a7a:	22ff      	movs	r2, #255	@ 0xff
10042a7c:	701a      	strb	r2, [r3, #0]
				}
				if((event.stop&0b11111000)>>3 == hour && (event.stop & 0b011)*15 == minute){
10042a7e:	2114      	movs	r1, #20
10042a80:	187b      	adds	r3, r7, r1
10042a82:	78db      	ldrb	r3, [r3, #3]
10042a84:	08db      	lsrs	r3, r3, #3
10042a86:	b2da      	uxtb	r2, r3
10042a88:	4b1e      	ldr	r3, [pc, #120]	@ (10042b04 <CompareTime+0x210>)
10042a8a:	781b      	ldrb	r3, [r3, #0]
10042a8c:	429a      	cmp	r2, r3
10042a8e:	d125      	bne.n	10042adc <CompareTime+0x1e8>
10042a90:	187b      	adds	r3, r7, r1
10042a92:	78db      	ldrb	r3, [r3, #3]
10042a94:	001a      	movs	r2, r3
10042a96:	2303      	movs	r3, #3
10042a98:	401a      	ands	r2, r3
10042a9a:	0013      	movs	r3, r2
10042a9c:	011b      	lsls	r3, r3, #4
10042a9e:	1a9b      	subs	r3, r3, r2
10042aa0:	4a19      	ldr	r2, [pc, #100]	@ (10042b08 <CompareTime+0x214>)
10042aa2:	7812      	ldrb	r2, [r2, #0]
10042aa4:	4293      	cmp	r3, r2
10042aa6:	d119      	bne.n	10042adc <CompareTime+0x1e8>
					Event_t play = (Event_t){EVENT_PLAY, 0};
10042aa8:	2008      	movs	r0, #8
10042aaa:	183b      	adds	r3, r7, r0
10042aac:	220b      	movs	r2, #11
10042aae:	701a      	strb	r2, [r3, #0]
10042ab0:	183b      	adds	r3, r7, r0
10042ab2:	2200      	movs	r2, #0
10042ab4:	805a      	strh	r2, [r3, #2]
					event.start = 0;
10042ab6:	187b      	adds	r3, r7, r1
10042ab8:	2200      	movs	r2, #0
10042aba:	709a      	strb	r2, [r3, #2]
					MP3_Event_Post(play);
10042abc:	183b      	adds	r3, r7, r0
10042abe:	6818      	ldr	r0, [r3, #0]
10042ac0:	f7ff fd52 	bl	10042568 <MP3_Event_Post>
					month = NULLDATE;
10042ac4:	4b0d      	ldr	r3, [pc, #52]	@ (10042afc <CompareTime+0x208>)
10042ac6:	22ff      	movs	r2, #255	@ 0xff
10042ac8:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10042aca:	4b0d      	ldr	r3, [pc, #52]	@ (10042b00 <CompareTime+0x20c>)
10042acc:	22ff      	movs	r2, #255	@ 0xff
10042ace:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
10042ad0:	4b0c      	ldr	r3, [pc, #48]	@ (10042b04 <CompareTime+0x210>)
10042ad2:	22ff      	movs	r2, #255	@ 0xff
10042ad4:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
10042ad6:	4b0c      	ldr	r3, [pc, #48]	@ (10042b08 <CompareTime+0x214>)
10042ad8:	22ff      	movs	r2, #255	@ 0xff
10042ada:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10042adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10042ade:	3301      	adds	r3, #1
10042ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
10042ae2:	f7ff f83f 	bl	10041b64 <FLASH_GetScheduleSize>
10042ae6:	0003      	movs	r3, r0
10042ae8:	001a      	movs	r2, r3
10042aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10042aec:	4293      	cmp	r3, r2
10042aee:	da00      	bge.n	10042af2 <CompareTime+0x1fe>
10042af0:	e77e      	b.n	100429f0 <CompareTime+0xfc>
10042af2:	e000      	b.n	10042af6 <CompareTime+0x202>
		return;
10042af4:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
}
10042af6:	46bd      	mov	sp, r7
10042af8:	b00d      	add	sp, #52	@ 0x34
10042afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042afc:	2000053c 	.word	0x2000053c
10042b00:	2000053d 	.word	0x2000053d
10042b04:	2000053e 	.word	0x2000053e
10042b08:	2000053f 	.word	0x2000053f
10042b0c:	20000540 	.word	0x20000540
10042b10:	20000541 	.word	0x20000541

10042b14 <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
10042b14:	b580      	push	{r7, lr}
10042b16:	b082      	sub	sp, #8
10042b18:	af00      	add	r7, sp, #0
10042b1a:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
10042b1c:	4b08      	ldr	r3, [pc, #32]	@ (10042b40 <Scheduler_Event_Init+0x2c>)
10042b1e:	687a      	ldr	r2, [r7, #4]
10042b20:	601a      	str	r2, [r3, #0]
    I2C_Init();
10042b22:	f7ff fb2d 	bl	10042180 <I2C_Init>
    TIMERS_Init();
10042b26:	f000 f95d 	bl	10042de4 <TIMERS_Init>
    starttime = TIMERS_GetMilliSeconds();
10042b2a:	f000 f9a7 	bl	10042e7c <TIMERS_GetMilliSeconds>
10042b2e:	0002      	movs	r2, r0
10042b30:	4b04      	ldr	r3, [pc, #16]	@ (10042b44 <Scheduler_Event_Init+0x30>)
10042b32:	601a      	str	r2, [r3, #0]
    return INIT_OK;
10042b34:	2301      	movs	r3, #1
}
10042b36:	0018      	movs	r0, r3
10042b38:	46bd      	mov	sp, r7
10042b3a:	b002      	add	sp, #8
10042b3c:	bd80      	pop	{r7, pc}
10042b3e:	46c0      	nop			@ (mov r8, r8)
10042b40:	20000534 	.word	0x20000534
10042b44:	20000538 	.word	0x20000538

10042b48 <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
10042b48:	b580      	push	{r7, lr}
10042b4a:	b082      	sub	sp, #8
10042b4c:	af00      	add	r7, sp, #0
10042b4e:	1d3b      	adds	r3, r7, #4
10042b50:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
10042b52:	4b05      	ldr	r3, [pc, #20]	@ (10042b68 <Scheduler_Event_Post+0x20>)
10042b54:	681a      	ldr	r2, [r3, #0]
10042b56:	1d3b      	adds	r3, r7, #4
10042b58:	6819      	ldr	r1, [r3, #0]
10042b5a:	0010      	movs	r0, r2
10042b5c:	f7fe fec5 	bl	100418ea <FIFO_Enqueue>
}
10042b60:	46c0      	nop			@ (mov r8, r8)
10042b62:	46bd      	mov	sp, r7
10042b64:	b002      	add	sp, #8
10042b66:	bd80      	pop	{r7, pc}
10042b68:	20000534 	.word	0x20000534

10042b6c <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
10042b6c:	b580      	push	{r7, lr}
10042b6e:	b084      	sub	sp, #16
10042b70:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
10042b72:	1d3b      	adds	r3, r7, #4
10042b74:	2200      	movs	r2, #0
10042b76:	701a      	strb	r2, [r3, #0]
10042b78:	1d3b      	adds	r3, r7, #4
10042b7a:	2200      	movs	r2, #0
10042b7c:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10042b7e:	f000 f97d 	bl	10042e7c <TIMERS_GetMilliSeconds>
10042b82:	0003      	movs	r3, r0
10042b84:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
10042b86:	4b15      	ldr	r3, [pc, #84]	@ (10042bdc <Scheduler_Event_Updater+0x70>)
10042b88:	681b      	ldr	r3, [r3, #0]
10042b8a:	68fa      	ldr	r2, [r7, #12]
10042b8c:	1ad3      	subs	r3, r2, r3
10042b8e:	4a14      	ldr	r2, [pc, #80]	@ (10042be0 <Scheduler_Event_Updater+0x74>)
10042b90:	4293      	cmp	r3, r2
10042b92:	d90c      	bls.n	10042bae <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
10042b94:	1d3b      	adds	r3, r7, #4
10042b96:	2209      	movs	r2, #9
10042b98:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10042b9a:	1d3b      	adds	r3, r7, #4
10042b9c:	2200      	movs	r2, #0
10042b9e:	805a      	strh	r2, [r3, #2]
		starttime = timer;
10042ba0:	4b0e      	ldr	r3, [pc, #56]	@ (10042bdc <Scheduler_Event_Updater+0x70>)
10042ba2:	68fa      	ldr	r2, [r7, #12]
10042ba4:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
10042ba6:	1d3b      	adds	r3, r7, #4
10042ba8:	6818      	ldr	r0, [r3, #0]
10042baa:	f7ff ffcd 	bl	10042b48 <Scheduler_Event_Post>
	}
    return event;
10042bae:	2108      	movs	r1, #8
10042bb0:	187b      	adds	r3, r7, r1
10042bb2:	1d3a      	adds	r2, r7, #4
10042bb4:	6812      	ldr	r2, [r2, #0]
10042bb6:	601a      	str	r2, [r3, #0]
10042bb8:	187a      	adds	r2, r7, r1
10042bba:	2300      	movs	r3, #0
10042bbc:	8811      	ldrh	r1, [r2, #0]
10042bbe:	0409      	lsls	r1, r1, #16
10042bc0:	0c09      	lsrs	r1, r1, #16
10042bc2:	0c1b      	lsrs	r3, r3, #16
10042bc4:	041b      	lsls	r3, r3, #16
10042bc6:	430b      	orrs	r3, r1
10042bc8:	8852      	ldrh	r2, [r2, #2]
10042bca:	0412      	lsls	r2, r2, #16
10042bcc:	041b      	lsls	r3, r3, #16
10042bce:	0c1b      	lsrs	r3, r3, #16
10042bd0:	4313      	orrs	r3, r2
}
10042bd2:	0018      	movs	r0, r3
10042bd4:	46bd      	mov	sp, r7
10042bd6:	b004      	add	sp, #16
10042bd8:	bd80      	pop	{r7, pc}
10042bda:	46c0      	nop			@ (mov r8, r8)
10042bdc:	20000538 	.word	0x20000538
10042be0:	0000ea5f 	.word	0x0000ea5f

10042be4 <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
10042be4:	b580      	push	{r7, lr}
10042be6:	b082      	sub	sp, #8
10042be8:	af00      	add	r7, sp, #0
10042bea:	1d3b      	adds	r3, r7, #4
10042bec:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
10042bee:	1d3b      	adds	r3, r7, #4
10042bf0:	781b      	ldrb	r3, [r3, #0]
10042bf2:	b25b      	sxtb	r3, r3
10042bf4:	2b0b      	cmp	r3, #11
10042bf6:	d11f      	bne.n	10042c38 <Scheduler_Event_Handler+0x54>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, Scheduler_Event_Post);
10042bf8:	4b73      	ldr	r3, [pc, #460]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042bfa:	001a      	movs	r2, r3
10042bfc:	2104      	movs	r1, #4
10042bfe:	206f      	movs	r0, #111	@ 0x6f
10042c00:	f7ff fb3c 	bl	1004227c <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, Scheduler_Event_Post);
10042c04:	4b70      	ldr	r3, [pc, #448]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c06:	001a      	movs	r2, r3
10042c08:	2103      	movs	r1, #3
10042c0a:	206f      	movs	r0, #111	@ 0x6f
10042c0c:	f7ff fb36 	bl	1004227c <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, Scheduler_Event_Post);
10042c10:	4b6d      	ldr	r3, [pc, #436]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c12:	001a      	movs	r2, r3
10042c14:	2102      	movs	r1, #2
10042c16:	206f      	movs	r0, #111	@ 0x6f
10042c18:	f7ff fb30 	bl	1004227c <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, Scheduler_Event_Post);
10042c1c:	4b6a      	ldr	r3, [pc, #424]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c1e:	001a      	movs	r2, r3
10042c20:	2101      	movs	r1, #1
10042c22:	206f      	movs	r0, #111	@ 0x6f
10042c24:	f7ff fb2a 	bl	1004227c <I2C_Recieve>
		logging = 1;
10042c28:	4b68      	ldr	r3, [pc, #416]	@ (10042dcc <Scheduler_Event_Handler+0x1e8>)
10042c2a:	2201      	movs	r2, #1
10042c2c:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
10042c2e:	1d3b      	adds	r3, r7, #4
10042c30:	885b      	ldrh	r3, [r3, #2]
10042c32:	b2da      	uxtb	r2, r3
10042c34:	4b66      	ldr	r3, [pc, #408]	@ (10042dd0 <Scheduler_Event_Handler+0x1ec>)
10042c36:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
10042c38:	1d3b      	adds	r3, r7, #4
10042c3a:	781b      	ldrb	r3, [r3, #0]
10042c3c:	b25b      	sxtb	r3, r3
10042c3e:	2b09      	cmp	r3, #9
10042c40:	d117      	bne.n	10042c72 <Scheduler_Event_Handler+0x8e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, Scheduler_Event_Post);
10042c42:	4b61      	ldr	r3, [pc, #388]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c44:	001a      	movs	r2, r3
10042c46:	2104      	movs	r1, #4
10042c48:	206f      	movs	r0, #111	@ 0x6f
10042c4a:	f7ff fb17 	bl	1004227c <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, Scheduler_Event_Post);
10042c4e:	4b5e      	ldr	r3, [pc, #376]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c50:	001a      	movs	r2, r3
10042c52:	2103      	movs	r1, #3
10042c54:	206f      	movs	r0, #111	@ 0x6f
10042c56:	f7ff fb11 	bl	1004227c <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, Scheduler_Event_Post);
10042c5a:	4b5b      	ldr	r3, [pc, #364]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c5c:	001a      	movs	r2, r3
10042c5e:	2102      	movs	r1, #2
10042c60:	206f      	movs	r0, #111	@ 0x6f
10042c62:	f7ff fb0b 	bl	1004227c <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, Scheduler_Event_Post);
10042c66:	4b58      	ldr	r3, [pc, #352]	@ (10042dc8 <Scheduler_Event_Handler+0x1e4>)
10042c68:	001a      	movs	r2, r3
10042c6a:	2101      	movs	r1, #1
10042c6c:	206f      	movs	r0, #111	@ 0x6f
10042c6e:	f7ff fb05 	bl	1004227c <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
10042c72:	1d3b      	adds	r3, r7, #4
10042c74:	781b      	ldrb	r3, [r3, #0]
10042c76:	b25b      	sxtb	r3, r3
10042c78:	2b05      	cmp	r3, #5
10042c7a:	d000      	beq.n	10042c7e <Scheduler_Event_Handler+0x9a>
10042c7c:	e09e      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
		switch (event.data>>8){
10042c7e:	1d3b      	adds	r3, r7, #4
10042c80:	885b      	ldrh	r3, [r3, #2]
10042c82:	0a1b      	lsrs	r3, r3, #8
10042c84:	b29b      	uxth	r3, r3
10042c86:	2b04      	cmp	r3, #4
10042c88:	d00b      	beq.n	10042ca2 <Scheduler_Event_Handler+0xbe>
10042c8a:	dd00      	ble.n	10042c8e <Scheduler_Event_Handler+0xaa>
10042c8c:	e096      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
10042c8e:	2b03      	cmp	r3, #3
10042c90:	d020      	beq.n	10042cd4 <Scheduler_Event_Handler+0xf0>
10042c92:	dd00      	ble.n	10042c96 <Scheduler_Event_Handler+0xb2>
10042c94:	e092      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
10042c96:	2b01      	cmp	r3, #1
10042c98:	d100      	bne.n	10042c9c <Scheduler_Event_Handler+0xb8>
10042c9a:	e076      	b.n	10042d8a <Scheduler_Event_Handler+0x1a6>
10042c9c:	2b02      	cmp	r3, #2
10042c9e:	d032      	beq.n	10042d06 <Scheduler_Event_Handler+0x122>
10042ca0:	e08c      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
10042ca2:	1d3b      	adds	r3, r7, #4
10042ca4:	885b      	ldrh	r3, [r3, #2]
10042ca6:	111b      	asrs	r3, r3, #4
10042ca8:	b2db      	uxtb	r3, r3
10042caa:	2201      	movs	r2, #1
10042cac:	4013      	ands	r3, r2
10042cae:	b2db      	uxtb	r3, r3
10042cb0:	1c1a      	adds	r2, r3, #0
10042cb2:	0092      	lsls	r2, r2, #2
10042cb4:	18d3      	adds	r3, r2, r3
10042cb6:	18db      	adds	r3, r3, r3
10042cb8:	b2da      	uxtb	r2, r3
10042cba:	1d3b      	adds	r3, r7, #4
10042cbc:	885b      	ldrh	r3, [r3, #2]
10042cbe:	b2db      	uxtb	r3, r3
10042cc0:	210f      	movs	r1, #15
10042cc2:	400b      	ands	r3, r1
10042cc4:	b2db      	uxtb	r3, r3
10042cc6:	18d3      	adds	r3, r2, r3
10042cc8:	b2da      	uxtb	r2, r3
10042cca:	4b42      	ldr	r3, [pc, #264]	@ (10042dd4 <Scheduler_Event_Handler+0x1f0>)
10042ccc:	701a      	strb	r2, [r3, #0]
			CompareTime();
10042cce:	f7ff fe11 	bl	100428f4 <CompareTime>
			break;
10042cd2:	e073      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
10042cd4:	1d3b      	adds	r3, r7, #4
10042cd6:	885b      	ldrh	r3, [r3, #2]
10042cd8:	111b      	asrs	r3, r3, #4
10042cda:	b2db      	uxtb	r3, r3
10042cdc:	2203      	movs	r2, #3
10042cde:	4013      	ands	r3, r2
10042ce0:	b2db      	uxtb	r3, r3
10042ce2:	1c1a      	adds	r2, r3, #0
10042ce4:	0092      	lsls	r2, r2, #2
10042ce6:	18d3      	adds	r3, r2, r3
10042ce8:	18db      	adds	r3, r3, r3
10042cea:	b2da      	uxtb	r2, r3
10042cec:	1d3b      	adds	r3, r7, #4
10042cee:	885b      	ldrh	r3, [r3, #2]
10042cf0:	b2db      	uxtb	r3, r3
10042cf2:	210f      	movs	r1, #15
10042cf4:	400b      	ands	r3, r1
10042cf6:	b2db      	uxtb	r3, r3
10042cf8:	18d3      	adds	r3, r2, r3
10042cfa:	b2da      	uxtb	r2, r3
10042cfc:	4b36      	ldr	r3, [pc, #216]	@ (10042dd8 <Scheduler_Event_Handler+0x1f4>)
10042cfe:	701a      	strb	r2, [r3, #0]
			CompareTime();
10042d00:	f7ff fdf8 	bl	100428f4 <CompareTime>
			break;
10042d04:	e05a      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
10042d06:	1d3b      	adds	r3, r7, #4
10042d08:	885b      	ldrh	r3, [r3, #2]
10042d0a:	001a      	movs	r2, r3
10042d0c:	2340      	movs	r3, #64	@ 0x40
10042d0e:	4013      	ands	r3, r2
10042d10:	d022      	beq.n	10042d58 <Scheduler_Event_Handler+0x174>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
10042d12:	1d3b      	adds	r3, r7, #4
10042d14:	885b      	ldrh	r3, [r3, #2]
10042d16:	115b      	asrs	r3, r3, #5
10042d18:	b2db      	uxtb	r3, r3
10042d1a:	2201      	movs	r2, #1
10042d1c:	4013      	ands	r3, r2
10042d1e:	b2db      	uxtb	r3, r3
10042d20:	220c      	movs	r2, #12
10042d22:	4353      	muls	r3, r2
10042d24:	b2da      	uxtb	r2, r3
10042d26:	1d3b      	adds	r3, r7, #4
10042d28:	885b      	ldrh	r3, [r3, #2]
10042d2a:	111b      	asrs	r3, r3, #4
10042d2c:	b2db      	uxtb	r3, r3
10042d2e:	2101      	movs	r1, #1
10042d30:	400b      	ands	r3, r1
10042d32:	b2db      	uxtb	r3, r3
10042d34:	1c19      	adds	r1, r3, #0
10042d36:	0089      	lsls	r1, r1, #2
10042d38:	18cb      	adds	r3, r1, r3
10042d3a:	18db      	adds	r3, r3, r3
10042d3c:	b2db      	uxtb	r3, r3
10042d3e:	18d3      	adds	r3, r2, r3
10042d40:	b2da      	uxtb	r2, r3
10042d42:	1d3b      	adds	r3, r7, #4
10042d44:	885b      	ldrh	r3, [r3, #2]
10042d46:	b2db      	uxtb	r3, r3
10042d48:	210f      	movs	r1, #15
10042d4a:	400b      	ands	r3, r1
10042d4c:	b2db      	uxtb	r3, r3
10042d4e:	18d3      	adds	r3, r2, r3
10042d50:	b2da      	uxtb	r2, r3
10042d52:	4b22      	ldr	r3, [pc, #136]	@ (10042ddc <Scheduler_Event_Handler+0x1f8>)
10042d54:	701a      	strb	r2, [r3, #0]
10042d56:	e015      	b.n	10042d84 <Scheduler_Event_Handler+0x1a0>
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
10042d58:	1d3b      	adds	r3, r7, #4
10042d5a:	885b      	ldrh	r3, [r3, #2]
10042d5c:	111b      	asrs	r3, r3, #4
10042d5e:	b2db      	uxtb	r3, r3
10042d60:	2203      	movs	r2, #3
10042d62:	4013      	ands	r3, r2
10042d64:	b2db      	uxtb	r3, r3
10042d66:	1c1a      	adds	r2, r3, #0
10042d68:	0092      	lsls	r2, r2, #2
10042d6a:	18d3      	adds	r3, r2, r3
10042d6c:	18db      	adds	r3, r3, r3
10042d6e:	b2da      	uxtb	r2, r3
10042d70:	1d3b      	adds	r3, r7, #4
10042d72:	885b      	ldrh	r3, [r3, #2]
10042d74:	b2db      	uxtb	r3, r3
10042d76:	210f      	movs	r1, #15
10042d78:	400b      	ands	r3, r1
10042d7a:	b2db      	uxtb	r3, r3
10042d7c:	18d3      	adds	r3, r2, r3
10042d7e:	b2da      	uxtb	r2, r3
10042d80:	4b16      	ldr	r3, [pc, #88]	@ (10042ddc <Scheduler_Event_Handler+0x1f8>)
10042d82:	701a      	strb	r2, [r3, #0]
			}
			CompareTime();
10042d84:	f7ff fdb6 	bl	100428f4 <CompareTime>
			break;
10042d88:	e018      	b.n	10042dbc <Scheduler_Event_Handler+0x1d8>
		case RTCMINADDR:
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
10042d8a:	1d3b      	adds	r3, r7, #4
10042d8c:	885b      	ldrh	r3, [r3, #2]
10042d8e:	111b      	asrs	r3, r3, #4
10042d90:	b2db      	uxtb	r3, r3
10042d92:	2203      	movs	r2, #3
10042d94:	4013      	ands	r3, r2
10042d96:	b2db      	uxtb	r3, r3
10042d98:	1c1a      	adds	r2, r3, #0
10042d9a:	0092      	lsls	r2, r2, #2
10042d9c:	18d3      	adds	r3, r2, r3
10042d9e:	18db      	adds	r3, r3, r3
10042da0:	b2da      	uxtb	r2, r3
10042da2:	1d3b      	adds	r3, r7, #4
10042da4:	885b      	ldrh	r3, [r3, #2]
10042da6:	b2db      	uxtb	r3, r3
10042da8:	210f      	movs	r1, #15
10042daa:	400b      	ands	r3, r1
10042dac:	b2db      	uxtb	r3, r3
10042dae:	18d3      	adds	r3, r2, r3
10042db0:	b2da      	uxtb	r2, r3
10042db2:	4b0b      	ldr	r3, [pc, #44]	@ (10042de0 <Scheduler_Event_Handler+0x1fc>)
10042db4:	701a      	strb	r2, [r3, #0]
			CompareTime();
10042db6:	f7ff fd9d 	bl	100428f4 <CompareTime>

			break;
10042dba:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
10042dbc:	2301      	movs	r3, #1
}
10042dbe:	0018      	movs	r0, r3
10042dc0:	46bd      	mov	sp, r7
10042dc2:	b002      	add	sp, #8
10042dc4:	bd80      	pop	{r7, pc}
10042dc6:	46c0      	nop			@ (mov r8, r8)
10042dc8:	10042b49 	.word	0x10042b49
10042dcc:	20000540 	.word	0x20000540
10042dd0:	20000541 	.word	0x20000541
10042dd4:	2000053c 	.word	0x2000053c
10042dd8:	2000053d 	.word	0x2000053d
10042ddc:	2000053e 	.word	0x2000053e
10042de0:	2000053f 	.word	0x2000053f

10042de4 <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
10042de4:	b580      	push	{r7, lr}
10042de6:	b084      	sub	sp, #16
10042de8:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10042dea:	4b20      	ldr	r3, [pc, #128]	@ (10042e6c <TIMERS_Init+0x88>)
10042dec:	781b      	ldrb	r3, [r3, #0]
10042dee:	2b00      	cmp	r3, #0
10042df0:	d001      	beq.n	10042df6 <TIMERS_Init+0x12>
10042df2:	2301      	movs	r3, #1
10042df4:	e036      	b.n	10042e64 <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
10042df6:	003b      	movs	r3, r7
10042df8:	0018      	movs	r0, r3
10042dfa:	2310      	movs	r3, #16
10042dfc:	001a      	movs	r2, r3
10042dfe:	2100      	movs	r1, #0
10042e00:	f006 ff88 	bl	10049d14 <memset>
	htim2.Instance = TIM2;
10042e04:	4b1a      	ldr	r3, [pc, #104]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e06:	4a1b      	ldr	r2, [pc, #108]	@ (10042e74 <TIMERS_Init+0x90>)
10042e08:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
10042e0a:	4b19      	ldr	r3, [pc, #100]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e0c:	2220      	movs	r2, #32
10042e0e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
10042e10:	4b17      	ldr	r3, [pc, #92]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e12:	2200      	movs	r2, #0
10042e14:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
10042e16:	4b16      	ldr	r3, [pc, #88]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e18:	4a17      	ldr	r2, [pc, #92]	@ (10042e78 <TIMERS_Init+0x94>)
10042e1a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10042e1c:	4b14      	ldr	r3, [pc, #80]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e1e:	2200      	movs	r2, #0
10042e20:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
10042e22:	4b13      	ldr	r3, [pc, #76]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e24:	2200      	movs	r2, #0
10042e26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
10042e28:	4b11      	ldr	r3, [pc, #68]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e2a:	0018      	movs	r0, r3
10042e2c:	f005 f87e 	bl	10047f2c <HAL_TIM_Base_Init>
10042e30:	1e03      	subs	r3, r0, #0
10042e32:	d001      	beq.n	10042e38 <TIMERS_Init+0x54>
	{
		Error_Handler();
10042e34:	f7fe f928 	bl	10041088 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
10042e38:	003b      	movs	r3, r7
10042e3a:	2280      	movs	r2, #128	@ 0x80
10042e3c:	0152      	lsls	r2, r2, #5
10042e3e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
10042e40:	003a      	movs	r2, r7
10042e42:	4b0b      	ldr	r3, [pc, #44]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e44:	0011      	movs	r1, r2
10042e46:	0018      	movs	r0, r3
10042e48:	f005 f9e8 	bl	1004821c <HAL_TIM_ConfigClockSource>
10042e4c:	1e03      	subs	r3, r0, #0
10042e4e:	d001      	beq.n	10042e54 <TIMERS_Init+0x70>
	{
		Error_Handler();
10042e50:	f7fe f91a 	bl	10041088 <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
10042e54:	4b06      	ldr	r3, [pc, #24]	@ (10042e70 <TIMERS_Init+0x8c>)
10042e56:	0018      	movs	r0, r3
10042e58:	f005 f8ac 	bl	10047fb4 <HAL_TIM_Base_Start_IT>
    initialized = 1;
10042e5c:	4b03      	ldr	r3, [pc, #12]	@ (10042e6c <TIMERS_Init+0x88>)
10042e5e:	2201      	movs	r2, #1
10042e60:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10042e62:	2301      	movs	r3, #1
}
10042e64:	0018      	movs	r0, r3
10042e66:	46bd      	mov	sp, r7
10042e68:	b004      	add	sp, #16
10042e6a:	bd80      	pop	{r7, pc}
10042e6c:	20000584 	.word	0x20000584
10042e70:	20000544 	.word	0x20000544
10042e74:	40002000 	.word	0x40002000
10042e78:	000003e7 	.word	0x000003e7

10042e7c <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
10042e7c:	b580      	push	{r7, lr}
10042e7e:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10042e80:	4b05      	ldr	r3, [pc, #20]	@ (10042e98 <TIMERS_GetMilliSeconds+0x1c>)
10042e82:	781b      	ldrb	r3, [r3, #0]
10042e84:	2b00      	cmp	r3, #0
10042e86:	d101      	bne.n	10042e8c <TIMERS_GetMilliSeconds+0x10>
10042e88:	2300      	movs	r3, #0
10042e8a:	e001      	b.n	10042e90 <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
10042e8c:	4b03      	ldr	r3, [pc, #12]	@ (10042e9c <TIMERS_GetMilliSeconds+0x20>)
10042e8e:	681b      	ldr	r3, [r3, #0]
}
10042e90:	0018      	movs	r0, r3
10042e92:	46bd      	mov	sp, r7
10042e94:	bd80      	pop	{r7, pc}
10042e96:	46c0      	nop			@ (mov r8, r8)
10042e98:	20000584 	.word	0x20000584
10042e9c:	20000580 	.word	0x20000580

10042ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
10042ea0:	b580      	push	{r7, lr}
10042ea2:	af00      	add	r7, sp, #0

	milliSeconds++;
10042ea4:	4b05      	ldr	r3, [pc, #20]	@ (10042ebc <TIM2_IRQHandler+0x1c>)
10042ea6:	681b      	ldr	r3, [r3, #0]
10042ea8:	1c5a      	adds	r2, r3, #1
10042eaa:	4b04      	ldr	r3, [pc, #16]	@ (10042ebc <TIM2_IRQHandler+0x1c>)
10042eac:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
10042eae:	4b04      	ldr	r3, [pc, #16]	@ (10042ec0 <TIM2_IRQHandler+0x20>)
10042eb0:	0018      	movs	r0, r3
10042eb2:	f005 f8c5 	bl	10048040 <HAL_TIM_IRQHandler>
}
10042eb6:	46c0      	nop			@ (mov r8, r8)
10042eb8:	46bd      	mov	sp, r7
10042eba:	bd80      	pop	{r7, pc}
10042ebc:	20000580 	.word	0x20000580
10042ec0:	20000544 	.word	0x20000544

10042ec4 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *LPUARTx)
{
10042ec4:	b580      	push	{r7, lr}
10042ec6:	b082      	sub	sp, #8
10042ec8:	af00      	add	r7, sp, #0
10042eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
10042ecc:	687b      	ldr	r3, [r7, #4]
10042ece:	69db      	ldr	r3, [r3, #28]
10042ed0:	2280      	movs	r2, #128	@ 0x80
10042ed2:	4013      	ands	r3, r2
10042ed4:	2b80      	cmp	r3, #128	@ 0x80
10042ed6:	d101      	bne.n	10042edc <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
10042ed8:	2301      	movs	r3, #1
10042eda:	e000      	b.n	10042ede <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
10042edc:	2300      	movs	r3, #0
}
10042ede:	0018      	movs	r0, r3
10042ee0:	46bd      	mov	sp, r7
10042ee2:	b002      	add	sp, #8
10042ee4:	bd80      	pop	{r7, pc}
	...

10042ee8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10042ee8:	b580      	push	{r7, lr}
10042eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
10042eec:	4b03      	ldr	r3, [pc, #12]	@ (10042efc <LPUART1_IRQHandler+0x14>)
10042eee:	0018      	movs	r0, r3
10042ef0:	f005 fbd4 	bl	1004869c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10042ef4:	46c0      	nop			@ (mov r8, r8)
10042ef6:	46bd      	mov	sp, r7
10042ef8:	bd80      	pop	{r7, pc}
10042efa:	46c0      	nop			@ (mov r8, r8)
10042efc:	20000588 	.word	0x20000588

10042f00 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
10042f00:	b580      	push	{r7, lr}
10042f02:	b082      	sub	sp, #8
10042f04:	af00      	add	r7, sp, #0

	if(husart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
10042f06:	4b49      	ldr	r3, [pc, #292]	@ (1004302c <USART1_IRQHandler+0x12c>)
10042f08:	681b      	ldr	r3, [r3, #0]
10042f0a:	69db      	ldr	r3, [r3, #28]
10042f0c:	2220      	movs	r2, #32
10042f0e:	4013      	ands	r3, r2
10042f10:	d03d      	beq.n	10042f8e <USART1_IRQHandler+0x8e>
		if(!USARTrx.full){
10042f12:	4b47      	ldr	r3, [pc, #284]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f14:	4a47      	ldr	r2, [pc, #284]	@ (10043034 <USART1_IRQHandler+0x134>)
10042f16:	5c9b      	ldrb	r3, [r3, r2]
10042f18:	2201      	movs	r2, #1
10042f1a:	4053      	eors	r3, r2
10042f1c:	b2db      	uxtb	r3, r3
10042f1e:	2b00      	cmp	r3, #0
10042f20:	d02b      	beq.n	10042f7a <USART1_IRQHandler+0x7a>
			USARTrx.data[USARTrx.head] = husart1.Instance->RDR;
10042f22:	4b42      	ldr	r3, [pc, #264]	@ (1004302c <USART1_IRQHandler+0x12c>)
10042f24:	681b      	ldr	r3, [r3, #0]
10042f26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10042f28:	4b41      	ldr	r3, [pc, #260]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f2a:	4a43      	ldr	r2, [pc, #268]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f2c:	5a9b      	ldrh	r3, [r3, r2]
10042f2e:	001a      	movs	r2, r3
10042f30:	b2c9      	uxtb	r1, r1
10042f32:	4b3f      	ldr	r3, [pc, #252]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f34:	5499      	strb	r1, [r3, r2]
			USARTrx.head++;
10042f36:	4b3e      	ldr	r3, [pc, #248]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f38:	4a3f      	ldr	r2, [pc, #252]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f3a:	5a9b      	ldrh	r3, [r3, r2]
10042f3c:	3301      	adds	r3, #1
10042f3e:	b299      	uxth	r1, r3
10042f40:	4b3b      	ldr	r3, [pc, #236]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f42:	4a3d      	ldr	r2, [pc, #244]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f44:	5299      	strh	r1, [r3, r2]
			USARTrx.head %= UARTCIRCBUFFSIZE;
10042f46:	4b3a      	ldr	r3, [pc, #232]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f48:	4a3b      	ldr	r2, [pc, #236]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f4a:	5a9b      	ldrh	r3, [r3, r2]
10042f4c:	493b      	ldr	r1, [pc, #236]	@ (1004303c <USART1_IRQHandler+0x13c>)
10042f4e:	0018      	movs	r0, r3
10042f50:	f7fd f970 	bl	10040234 <__aeabi_uidivmod>
10042f54:	000b      	movs	r3, r1
10042f56:	b299      	uxth	r1, r3
10042f58:	4b35      	ldr	r3, [pc, #212]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f5a:	4a37      	ldr	r2, [pc, #220]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f5c:	5299      	strh	r1, [r3, r2]
			if(USARTrx.tail == USARTrx.head){
10042f5e:	4a34      	ldr	r2, [pc, #208]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f60:	2381      	movs	r3, #129	@ 0x81
10042f62:	009b      	lsls	r3, r3, #2
10042f64:	5ad2      	ldrh	r2, [r2, r3]
10042f66:	4b32      	ldr	r3, [pc, #200]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f68:	4933      	ldr	r1, [pc, #204]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f6a:	5a5b      	ldrh	r3, [r3, r1]
10042f6c:	429a      	cmp	r2, r3
10042f6e:	d10e      	bne.n	10042f8e <USART1_IRQHandler+0x8e>
				USARTrx.full = true;
10042f70:	4b2f      	ldr	r3, [pc, #188]	@ (10043030 <USART1_IRQHandler+0x130>)
10042f72:	4a30      	ldr	r2, [pc, #192]	@ (10043034 <USART1_IRQHandler+0x134>)
10042f74:	2101      	movs	r1, #1
10042f76:	5499      	strb	r1, [r3, r2]
10042f78:	e009      	b.n	10042f8e <USART1_IRQHandler+0x8e>
			}
		} else {
			uint8_t discard = husart1.Instance->RDR;
10042f7a:	4b2c      	ldr	r3, [pc, #176]	@ (1004302c <USART1_IRQHandler+0x12c>)
10042f7c:	681b      	ldr	r3, [r3, #0]
10042f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10042f80:	1dfb      	adds	r3, r7, #7
10042f82:	701a      	strb	r2, [r3, #0]
			discard++;
10042f84:	1dfb      	adds	r3, r7, #7
10042f86:	781a      	ldrb	r2, [r3, #0]
10042f88:	1dfb      	adds	r3, r7, #7
10042f8a:	3201      	adds	r2, #1
10042f8c:	701a      	strb	r2, [r3, #0]
		}
	}
	if((husart1.Instance->ISR & USART_ISR_TC_Msk)){
10042f8e:	4b27      	ldr	r3, [pc, #156]	@ (1004302c <USART1_IRQHandler+0x12c>)
10042f90:	681b      	ldr	r3, [r3, #0]
10042f92:	69db      	ldr	r3, [r3, #28]
10042f94:	2240      	movs	r2, #64	@ 0x40
10042f96:	4013      	ands	r3, r2
10042f98:	d03d      	beq.n	10043016 <USART1_IRQHandler+0x116>
		if(USARTtx.head != USARTtx.tail || USARTtx.full){
10042f9a:	4b29      	ldr	r3, [pc, #164]	@ (10043040 <USART1_IRQHandler+0x140>)
10042f9c:	4a26      	ldr	r2, [pc, #152]	@ (10043038 <USART1_IRQHandler+0x138>)
10042f9e:	5a9a      	ldrh	r2, [r3, r2]
10042fa0:	4927      	ldr	r1, [pc, #156]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fa2:	2381      	movs	r3, #129	@ 0x81
10042fa4:	009b      	lsls	r3, r3, #2
10042fa6:	5acb      	ldrh	r3, [r1, r3]
10042fa8:	429a      	cmp	r2, r3
10042faa:	d104      	bne.n	10042fb6 <USART1_IRQHandler+0xb6>
10042fac:	4b24      	ldr	r3, [pc, #144]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fae:	4a21      	ldr	r2, [pc, #132]	@ (10043034 <USART1_IRQHandler+0x134>)
10042fb0:	5c9b      	ldrb	r3, [r3, r2]
10042fb2:	2b00      	cmp	r3, #0
10042fb4:	d02b      	beq.n	1004300e <USART1_IRQHandler+0x10e>
			husart1.Instance->TDR = USARTtx.data[USARTtx.tail];
10042fb6:	4a22      	ldr	r2, [pc, #136]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fb8:	2381      	movs	r3, #129	@ 0x81
10042fba:	009b      	lsls	r3, r3, #2
10042fbc:	5ad3      	ldrh	r3, [r2, r3]
10042fbe:	001a      	movs	r2, r3
10042fc0:	4b1f      	ldr	r3, [pc, #124]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fc2:	5c9a      	ldrb	r2, [r3, r2]
10042fc4:	4b19      	ldr	r3, [pc, #100]	@ (1004302c <USART1_IRQHandler+0x12c>)
10042fc6:	681b      	ldr	r3, [r3, #0]
10042fc8:	629a      	str	r2, [r3, #40]	@ 0x28
			USARTtx.tail++;
10042fca:	4a1d      	ldr	r2, [pc, #116]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fcc:	2381      	movs	r3, #129	@ 0x81
10042fce:	009b      	lsls	r3, r3, #2
10042fd0:	5ad3      	ldrh	r3, [r2, r3]
10042fd2:	3301      	adds	r3, #1
10042fd4:	b299      	uxth	r1, r3
10042fd6:	4a1a      	ldr	r2, [pc, #104]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fd8:	2381      	movs	r3, #129	@ 0x81
10042fda:	009b      	lsls	r3, r3, #2
10042fdc:	52d1      	strh	r1, [r2, r3]
			USARTtx.tail %= UARTCIRCBUFFSIZE;
10042fde:	4a18      	ldr	r2, [pc, #96]	@ (10043040 <USART1_IRQHandler+0x140>)
10042fe0:	2381      	movs	r3, #129	@ 0x81
10042fe2:	009b      	lsls	r3, r3, #2
10042fe4:	5ad3      	ldrh	r3, [r2, r3]
10042fe6:	4915      	ldr	r1, [pc, #84]	@ (1004303c <USART1_IRQHandler+0x13c>)
10042fe8:	0018      	movs	r0, r3
10042fea:	f7fd f923 	bl	10040234 <__aeabi_uidivmod>
10042fee:	000b      	movs	r3, r1
10042ff0:	b299      	uxth	r1, r3
10042ff2:	4a13      	ldr	r2, [pc, #76]	@ (10043040 <USART1_IRQHandler+0x140>)
10042ff4:	2381      	movs	r3, #129	@ 0x81
10042ff6:	009b      	lsls	r3, r3, #2
10042ff8:	52d1      	strh	r1, [r2, r3]
			if(USARTtx.full){
10042ffa:	4b11      	ldr	r3, [pc, #68]	@ (10043040 <USART1_IRQHandler+0x140>)
10042ffc:	4a0d      	ldr	r2, [pc, #52]	@ (10043034 <USART1_IRQHandler+0x134>)
10042ffe:	5c9b      	ldrb	r3, [r3, r2]
10043000:	2b00      	cmp	r3, #0
10043002:	d008      	beq.n	10043016 <USART1_IRQHandler+0x116>
				USARTrx.full = false;
10043004:	4b0a      	ldr	r3, [pc, #40]	@ (10043030 <USART1_IRQHandler+0x130>)
10043006:	4a0b      	ldr	r2, [pc, #44]	@ (10043034 <USART1_IRQHandler+0x134>)
10043008:	2100      	movs	r1, #0
1004300a:	5499      	strb	r1, [r3, r2]
			if(USARTtx.full){
1004300c:	e003      	b.n	10043016 <USART1_IRQHandler+0x116>
			}

		} else {
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
1004300e:	4b07      	ldr	r3, [pc, #28]	@ (1004302c <USART1_IRQHandler+0x12c>)
10043010:	681b      	ldr	r3, [r3, #0]
10043012:	2240      	movs	r2, #64	@ 0x40
10043014:	621a      	str	r2, [r3, #32]
		}
	}
	BSP_LED_Toggle(LED_RED);
10043016:	2002      	movs	r0, #2
10043018:	f000 fe6e 	bl	10043cf8 <BSP_LED_Toggle>
	HAL_USART_IRQHandler(&husart1);
1004301c:	4b03      	ldr	r3, [pc, #12]	@ (1004302c <USART1_IRQHandler+0x12c>)
1004301e:	0018      	movs	r0, r3
10043020:	f006 fb70 	bl	10049704 <HAL_USART_IRQHandler>

}
10043024:	46c0      	nop			@ (mov r8, r8)
10043026:	46bd      	mov	sp, r7
10043028:	b002      	add	sp, #8
1004302a:	bd80      	pop	{r7, pc}
1004302c:	2000061c 	.word	0x2000061c
10043030:	20000894 	.word	0x20000894
10043034:	00000206 	.word	0x00000206
10043038:	00000202 	.word	0x00000202
1004303c:	00000201 	.word	0x00000201
10043040:	2000068c 	.word	0x2000068c

10043044 <UART_Init>:
 * @function: UART_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UART_Init(void){
10043044:	b580      	push	{r7, lr}
10043046:	af00      	add	r7, sp, #0

	hlpuart1.Instance = LPUART1;
10043048:	4b43      	ldr	r3, [pc, #268]	@ (10043158 <UART_Init+0x114>)
1004304a:	4a44      	ldr	r2, [pc, #272]	@ (1004315c <UART_Init+0x118>)
1004304c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
1004304e:	4b42      	ldr	r3, [pc, #264]	@ (10043158 <UART_Init+0x114>)
10043050:	2296      	movs	r2, #150	@ 0x96
10043052:	0192      	lsls	r2, r2, #6
10043054:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
10043056:	4b40      	ldr	r3, [pc, #256]	@ (10043158 <UART_Init+0x114>)
10043058:	2200      	movs	r2, #0
1004305a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
1004305c:	4b3e      	ldr	r3, [pc, #248]	@ (10043158 <UART_Init+0x114>)
1004305e:	2200      	movs	r2, #0
10043060:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
10043062:	4b3d      	ldr	r3, [pc, #244]	@ (10043158 <UART_Init+0x114>)
10043064:	2200      	movs	r2, #0
10043066:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
10043068:	4b3b      	ldr	r3, [pc, #236]	@ (10043158 <UART_Init+0x114>)
1004306a:	220c      	movs	r2, #12
1004306c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1004306e:	4b3a      	ldr	r3, [pc, #232]	@ (10043158 <UART_Init+0x114>)
10043070:	2200      	movs	r2, #0
10043072:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10043074:	4b38      	ldr	r3, [pc, #224]	@ (10043158 <UART_Init+0x114>)
10043076:	2200      	movs	r2, #0
10043078:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1004307a:	4b37      	ldr	r3, [pc, #220]	@ (10043158 <UART_Init+0x114>)
1004307c:	2200      	movs	r2, #0
1004307e:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10043080:	4b35      	ldr	r3, [pc, #212]	@ (10043158 <UART_Init+0x114>)
10043082:	2200      	movs	r2, #0
10043084:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
10043086:	4b34      	ldr	r3, [pc, #208]	@ (10043158 <UART_Init+0x114>)
10043088:	2280      	movs	r2, #128	@ 0x80
1004308a:	0592      	lsls	r2, r2, #22
1004308c:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
1004308e:	4b32      	ldr	r3, [pc, #200]	@ (10043158 <UART_Init+0x114>)
10043090:	0018      	movs	r0, r3
10043092:	f005 faad 	bl	100485f0 <HAL_UART_Init>
10043096:	1e03      	subs	r3, r0, #0
10043098:	d001      	beq.n	1004309e <UART_Init+0x5a>
	{
	return INIT_ERROR;
1004309a:	2300      	movs	r3, #0
1004309c:	e058      	b.n	10043150 <UART_Init+0x10c>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
1004309e:	4b2e      	ldr	r3, [pc, #184]	@ (10043158 <UART_Init+0x114>)
100430a0:	2100      	movs	r1, #0
100430a2:	0018      	movs	r0, r3
100430a4:	f006 fa4f 	bl	10049546 <HAL_UARTEx_SetTxFifoThreshold>
100430a8:	1e03      	subs	r3, r0, #0
100430aa:	d001      	beq.n	100430b0 <UART_Init+0x6c>
	{
	  return INIT_ERROR;
100430ac:	2300      	movs	r3, #0
100430ae:	e04f      	b.n	10043150 <UART_Init+0x10c>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100430b0:	4b29      	ldr	r3, [pc, #164]	@ (10043158 <UART_Init+0x114>)
100430b2:	2100      	movs	r1, #0
100430b4:	0018      	movs	r0, r3
100430b6:	f006 fa85 	bl	100495c4 <HAL_UARTEx_SetRxFifoThreshold>
100430ba:	1e03      	subs	r3, r0, #0
100430bc:	d001      	beq.n	100430c2 <UART_Init+0x7e>
	{
	  return INIT_ERROR;
100430be:	2300      	movs	r3, #0
100430c0:	e046      	b.n	10043150 <UART_Init+0x10c>
	}
	husart1.Instance = USART1;
100430c2:	4b27      	ldr	r3, [pc, #156]	@ (10043160 <UART_Init+0x11c>)
100430c4:	4a27      	ldr	r2, [pc, #156]	@ (10043164 <UART_Init+0x120>)
100430c6:	601a      	str	r2, [r3, #0]
//	if (HAL_USART_Init(&husart1) != HAL_OK)
//	{
//	return INIT_ERROR;
//	}

	BspCOMInit.BaudRate   = 9600;
100430c8:	4b27      	ldr	r3, [pc, #156]	@ (10043168 <UART_Init+0x124>)
100430ca:	2296      	movs	r2, #150	@ 0x96
100430cc:	0192      	lsls	r2, r2, #6
100430ce:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
100430d0:	4b25      	ldr	r3, [pc, #148]	@ (10043168 <UART_Init+0x124>)
100430d2:	2200      	movs	r2, #0
100430d4:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits   = COM_STOPBITS_1;
100430d6:	4b24      	ldr	r3, [pc, #144]	@ (10043168 <UART_Init+0x124>)
100430d8:	2200      	movs	r2, #0
100430da:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity     = COM_PARITY_NONE;
100430dc:	4b22      	ldr	r3, [pc, #136]	@ (10043168 <UART_Init+0x124>)
100430de:	2200      	movs	r2, #0
100430e0:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
100430e2:	4b21      	ldr	r3, [pc, #132]	@ (10043168 <UART_Init+0x124>)
100430e4:	2200      	movs	r2, #0
100430e6:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
100430e8:	4b1f      	ldr	r3, [pc, #124]	@ (10043168 <UART_Init+0x124>)
100430ea:	0019      	movs	r1, r3
100430ec:	2000      	movs	r0, #0
100430ee:	f000 febb 	bl	10043e68 <BSP_COM_Init>
100430f2:	1e03      	subs	r3, r0, #0
100430f4:	d001      	beq.n	100430fa <UART_Init+0xb6>
	{
		Error_Handler();
100430f6:	f7fd ffc7 	bl	10041088 <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
100430fa:	2201      	movs	r2, #1
100430fc:	2101      	movs	r1, #1
100430fe:	2008      	movs	r0, #8
10043100:	f001 f89c 	bl	1004423c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
10043104:	2008      	movs	r0, #8
10043106:	f001 f8ae 	bl	10044266 <HAL_NVIC_EnableIRQ>
	husart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
1004310a:	4b15      	ldr	r3, [pc, #84]	@ (10043160 <UART_Init+0x11c>)
1004310c:	681b      	ldr	r3, [r3, #0]
1004310e:	681a      	ldr	r2, [r3, #0]
10043110:	4b13      	ldr	r3, [pc, #76]	@ (10043160 <UART_Init+0x11c>)
10043112:	681b      	ldr	r3, [r3, #0]
10043114:	2160      	movs	r1, #96	@ 0x60
10043116:	430a      	orrs	r2, r1
10043118:	601a      	str	r2, [r3, #0]

	USARTtx.tail = 0;
1004311a:	4a14      	ldr	r2, [pc, #80]	@ (1004316c <UART_Init+0x128>)
1004311c:	2381      	movs	r3, #129	@ 0x81
1004311e:	009b      	lsls	r3, r3, #2
10043120:	2100      	movs	r1, #0
10043122:	52d1      	strh	r1, [r2, r3]
	USARTtx.head = 0;
10043124:	4b11      	ldr	r3, [pc, #68]	@ (1004316c <UART_Init+0x128>)
10043126:	4a12      	ldr	r2, [pc, #72]	@ (10043170 <UART_Init+0x12c>)
10043128:	2100      	movs	r1, #0
1004312a:	5299      	strh	r1, [r3, r2]
	USARTtx.full = false;
1004312c:	4b0f      	ldr	r3, [pc, #60]	@ (1004316c <UART_Init+0x128>)
1004312e:	4a11      	ldr	r2, [pc, #68]	@ (10043174 <UART_Init+0x130>)
10043130:	2100      	movs	r1, #0
10043132:	5499      	strb	r1, [r3, r2]

	USARTrx.tail = 0;
10043134:	4a10      	ldr	r2, [pc, #64]	@ (10043178 <UART_Init+0x134>)
10043136:	2381      	movs	r3, #129	@ 0x81
10043138:	009b      	lsls	r3, r3, #2
1004313a:	2100      	movs	r1, #0
1004313c:	52d1      	strh	r1, [r2, r3]
	USARTrx.head = 0;
1004313e:	4b0e      	ldr	r3, [pc, #56]	@ (10043178 <UART_Init+0x134>)
10043140:	4a0b      	ldr	r2, [pc, #44]	@ (10043170 <UART_Init+0x12c>)
10043142:	2100      	movs	r1, #0
10043144:	5299      	strh	r1, [r3, r2]
	USARTrx.full = false;
10043146:	4b0c      	ldr	r3, [pc, #48]	@ (10043178 <UART_Init+0x134>)
10043148:	4a0a      	ldr	r2, [pc, #40]	@ (10043174 <UART_Init+0x130>)
1004314a:	2100      	movs	r1, #0
1004314c:	5499      	strb	r1, [r3, r2]

//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return INIT_OK;
1004314e:	2301      	movs	r3, #1
}
10043150:	0018      	movs	r0, r3
10043152:	46bd      	mov	sp, r7
10043154:	bd80      	pop	{r7, pc}
10043156:	46c0      	nop			@ (mov r8, r8)
10043158:	20000588 	.word	0x20000588
1004315c:	41005000 	.word	0x41005000
10043160:	2000061c 	.word	0x2000061c
10043164:	41004000 	.word	0x41004000
10043168:	2000067c 	.word	0x2000067c
1004316c:	2000068c 	.word	0x2000068c
10043170:	00000202 	.word	0x00000202
10043174:	00000206 	.word	0x00000206
10043178:	20000894 	.word	0x20000894

1004317c <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
1004317c:	b580      	push	{r7, lr}
1004317e:	b082      	sub	sp, #8
10043180:	af00      	add	r7, sp, #0
10043182:	0002      	movs	r2, r0
10043184:	1dfb      	adds	r3, r7, #7
10043186:	701a      	strb	r2, [r3, #0]
	if (LL_LPUART_IsActiveFlag_TXE_TXFNF(LPUART1)){
10043188:	4b08      	ldr	r3, [pc, #32]	@ (100431ac <LPUART_WriteTx+0x30>)
1004318a:	0018      	movs	r0, r3
1004318c:	f7ff fe9a 	bl	10042ec4 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
10043190:	1e03      	subs	r3, r0, #0
10043192:	d005      	beq.n	100431a0 <LPUART_WriteTx+0x24>
		LL_LPUART_WriteReg(LPUART1, TDR, input);
10043194:	4b05      	ldr	r3, [pc, #20]	@ (100431ac <LPUART_WriteTx+0x30>)
10043196:	1dfa      	adds	r2, r7, #7
10043198:	7812      	ldrb	r2, [r2, #0]
1004319a:	629a      	str	r2, [r3, #40]	@ 0x28
		return UARTSUCCESS;
1004319c:	2300      	movs	r3, #0
1004319e:	e000      	b.n	100431a2 <LPUART_WriteTx+0x26>
	}else {
		return UARTFAILED;
100431a0:	2325      	movs	r3, #37	@ 0x25
	}
}
100431a2:	0018      	movs	r0, r3
100431a4:	46bd      	mov	sp, r7
100431a6:	b002      	add	sp, #8
100431a8:	bd80      	pop	{r7, pc}
100431aa:	46c0      	nop			@ (mov r8, r8)
100431ac:	41005000 	.word	0x41005000

100431b0 <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
100431b0:	b580      	push	{r7, lr}
100431b2:	b082      	sub	sp, #8
100431b4:	af00      	add	r7, sp, #0
	if(USARTrx.head != USARTrx.tail || USARTrx.full){
100431b6:	4b1b      	ldr	r3, [pc, #108]	@ (10043224 <USART_ReadRx+0x74>)
100431b8:	4a1b      	ldr	r2, [pc, #108]	@ (10043228 <USART_ReadRx+0x78>)
100431ba:	5a9a      	ldrh	r2, [r3, r2]
100431bc:	4919      	ldr	r1, [pc, #100]	@ (10043224 <USART_ReadRx+0x74>)
100431be:	2381      	movs	r3, #129	@ 0x81
100431c0:	009b      	lsls	r3, r3, #2
100431c2:	5acb      	ldrh	r3, [r1, r3]
100431c4:	429a      	cmp	r2, r3
100431c6:	d104      	bne.n	100431d2 <USART_ReadRx+0x22>
100431c8:	4b16      	ldr	r3, [pc, #88]	@ (10043224 <USART_ReadRx+0x74>)
100431ca:	4a18      	ldr	r2, [pc, #96]	@ (1004322c <USART_ReadRx+0x7c>)
100431cc:	5c9b      	ldrb	r3, [r3, r2]
100431ce:	2b00      	cmp	r3, #0
100431d0:	d023      	beq.n	1004321a <USART_ReadRx+0x6a>
		char data = USARTrx.data[USARTrx.tail];
100431d2:	4a14      	ldr	r2, [pc, #80]	@ (10043224 <USART_ReadRx+0x74>)
100431d4:	2381      	movs	r3, #129	@ 0x81
100431d6:	009b      	lsls	r3, r3, #2
100431d8:	5ad3      	ldrh	r3, [r2, r3]
100431da:	0019      	movs	r1, r3
100431dc:	1dfb      	adds	r3, r7, #7
100431de:	4a11      	ldr	r2, [pc, #68]	@ (10043224 <USART_ReadRx+0x74>)
100431e0:	5c52      	ldrb	r2, [r2, r1]
100431e2:	701a      	strb	r2, [r3, #0]
		USARTrx.tail++;
100431e4:	4a0f      	ldr	r2, [pc, #60]	@ (10043224 <USART_ReadRx+0x74>)
100431e6:	2381      	movs	r3, #129	@ 0x81
100431e8:	009b      	lsls	r3, r3, #2
100431ea:	5ad3      	ldrh	r3, [r2, r3]
100431ec:	3301      	adds	r3, #1
100431ee:	b299      	uxth	r1, r3
100431f0:	4a0c      	ldr	r2, [pc, #48]	@ (10043224 <USART_ReadRx+0x74>)
100431f2:	2381      	movs	r3, #129	@ 0x81
100431f4:	009b      	lsls	r3, r3, #2
100431f6:	52d1      	strh	r1, [r2, r3]
		USARTrx.tail %= UARTCIRCBUFFSIZE;
100431f8:	4a0a      	ldr	r2, [pc, #40]	@ (10043224 <USART_ReadRx+0x74>)
100431fa:	2381      	movs	r3, #129	@ 0x81
100431fc:	009b      	lsls	r3, r3, #2
100431fe:	5ad3      	ldrh	r3, [r2, r3]
10043200:	490b      	ldr	r1, [pc, #44]	@ (10043230 <USART_ReadRx+0x80>)
10043202:	0018      	movs	r0, r3
10043204:	f7fd f816 	bl	10040234 <__aeabi_uidivmod>
10043208:	000b      	movs	r3, r1
1004320a:	b299      	uxth	r1, r3
1004320c:	4a05      	ldr	r2, [pc, #20]	@ (10043224 <USART_ReadRx+0x74>)
1004320e:	2381      	movs	r3, #129	@ 0x81
10043210:	009b      	lsls	r3, r3, #2
10043212:	52d1      	strh	r1, [r2, r3]
		return data;
10043214:	1dfb      	adds	r3, r7, #7
10043216:	781b      	ldrb	r3, [r3, #0]
10043218:	e000      	b.n	1004321c <USART_ReadRx+0x6c>
	} else {
		return UARTFAILED;
1004321a:	2325      	movs	r3, #37	@ 0x25
	}
}
1004321c:	0018      	movs	r0, r3
1004321e:	46bd      	mov	sp, r7
10043220:	b002      	add	sp, #8
10043222:	bd80      	pop	{r7, pc}
10043224:	20000894 	.word	0x20000894
10043228:	00000202 	.word	0x00000202
1004322c:	00000206 	.word	0x00000206
10043230:	00000201 	.word	0x00000201

10043234 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
10043234:	b580      	push	{r7, lr}
10043236:	b082      	sub	sp, #8
10043238:	af00      	add	r7, sp, #0
1004323a:	0002      	movs	r2, r0
1004323c:	1dfb      	adds	r3, r7, #7
1004323e:	701a      	strb	r2, [r3, #0]
	if(!USARTtx.full){
10043240:	4b1f      	ldr	r3, [pc, #124]	@ (100432c0 <USART_WriteTx+0x8c>)
10043242:	4a20      	ldr	r2, [pc, #128]	@ (100432c4 <USART_WriteTx+0x90>)
10043244:	5c9b      	ldrb	r3, [r3, r2]
10043246:	2201      	movs	r2, #1
10043248:	4053      	eors	r3, r2
1004324a:	b2db      	uxtb	r3, r3
1004324c:	2b00      	cmp	r3, #0
1004324e:	d032      	beq.n	100432b6 <USART_WriteTx+0x82>
		if(USARTtx.head == USARTtx.tail && (husart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10043250:	4b1b      	ldr	r3, [pc, #108]	@ (100432c0 <USART_WriteTx+0x8c>)
10043252:	4a1d      	ldr	r2, [pc, #116]	@ (100432c8 <USART_WriteTx+0x94>)
10043254:	5a9a      	ldrh	r2, [r3, r2]
10043256:	491a      	ldr	r1, [pc, #104]	@ (100432c0 <USART_WriteTx+0x8c>)
10043258:	2381      	movs	r3, #129	@ 0x81
1004325a:	009b      	lsls	r3, r3, #2
1004325c:	5acb      	ldrh	r3, [r1, r3]
1004325e:	429a      	cmp	r2, r3
10043260:	d10b      	bne.n	1004327a <USART_WriteTx+0x46>
10043262:	4b1a      	ldr	r3, [pc, #104]	@ (100432cc <USART_WriteTx+0x98>)
10043264:	681b      	ldr	r3, [r3, #0]
10043266:	69db      	ldr	r3, [r3, #28]
10043268:	2280      	movs	r2, #128	@ 0x80
1004326a:	4013      	ands	r3, r2
1004326c:	d005      	beq.n	1004327a <USART_WriteTx+0x46>
			husart1.Instance->TDR = input;
1004326e:	4b17      	ldr	r3, [pc, #92]	@ (100432cc <USART_WriteTx+0x98>)
10043270:	681b      	ldr	r3, [r3, #0]
10043272:	1dfa      	adds	r2, r7, #7
10043274:	7812      	ldrb	r2, [r2, #0]
10043276:	629a      	str	r2, [r3, #40]	@ 0x28
10043278:	e01b      	b.n	100432b2 <USART_WriteTx+0x7e>
		} else {
			USARTtx.data[USARTtx.head] = input;
1004327a:	4b11      	ldr	r3, [pc, #68]	@ (100432c0 <USART_WriteTx+0x8c>)
1004327c:	4a12      	ldr	r2, [pc, #72]	@ (100432c8 <USART_WriteTx+0x94>)
1004327e:	5a9b      	ldrh	r3, [r3, r2]
10043280:	0019      	movs	r1, r3
10043282:	4b0f      	ldr	r3, [pc, #60]	@ (100432c0 <USART_WriteTx+0x8c>)
10043284:	1dfa      	adds	r2, r7, #7
10043286:	7812      	ldrb	r2, [r2, #0]
10043288:	545a      	strb	r2, [r3, r1]
			USARTtx.head++;
1004328a:	4b0d      	ldr	r3, [pc, #52]	@ (100432c0 <USART_WriteTx+0x8c>)
1004328c:	4a0e      	ldr	r2, [pc, #56]	@ (100432c8 <USART_WriteTx+0x94>)
1004328e:	5a9b      	ldrh	r3, [r3, r2]
10043290:	3301      	adds	r3, #1
10043292:	b299      	uxth	r1, r3
10043294:	4b0a      	ldr	r3, [pc, #40]	@ (100432c0 <USART_WriteTx+0x8c>)
10043296:	4a0c      	ldr	r2, [pc, #48]	@ (100432c8 <USART_WriteTx+0x94>)
10043298:	5299      	strh	r1, [r3, r2]
			USARTtx.head %= UARTCIRCBUFFSIZE;
1004329a:	4b09      	ldr	r3, [pc, #36]	@ (100432c0 <USART_WriteTx+0x8c>)
1004329c:	4a0a      	ldr	r2, [pc, #40]	@ (100432c8 <USART_WriteTx+0x94>)
1004329e:	5a9b      	ldrh	r3, [r3, r2]
100432a0:	490b      	ldr	r1, [pc, #44]	@ (100432d0 <USART_WriteTx+0x9c>)
100432a2:	0018      	movs	r0, r3
100432a4:	f7fc ffc6 	bl	10040234 <__aeabi_uidivmod>
100432a8:	000b      	movs	r3, r1
100432aa:	b299      	uxth	r1, r3
100432ac:	4b04      	ldr	r3, [pc, #16]	@ (100432c0 <USART_WriteTx+0x8c>)
100432ae:	4a06      	ldr	r2, [pc, #24]	@ (100432c8 <USART_WriteTx+0x94>)
100432b0:	5299      	strh	r1, [r3, r2]
		}
		return UARTSUCCESS;
100432b2:	2300      	movs	r3, #0
100432b4:	e000      	b.n	100432b8 <USART_WriteTx+0x84>
	} else {
		return UARTFAILED;
100432b6:	2325      	movs	r3, #37	@ 0x25
	}
}
100432b8:	0018      	movs	r0, r3
100432ba:	46bd      	mov	sp, r7
100432bc:	b002      	add	sp, #8
100432be:	bd80      	pop	{r7, pc}
100432c0:	2000068c 	.word	0x2000068c
100432c4:	00000206 	.word	0x00000206
100432c8:	00000202 	.word	0x00000202
100432cc:	2000061c 	.word	0x2000061c
100432d0:	00000201 	.word	0x00000201

100432d4 <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
100432d4:	b580      	push	{r7, lr}
100432d6:	af00      	add	r7, sp, #0
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
100432d8:	4b0b      	ldr	r3, [pc, #44]	@ (10043308 <USART_TxEmpty+0x34>)
100432da:	4a0c      	ldr	r2, [pc, #48]	@ (1004330c <USART_TxEmpty+0x38>)
100432dc:	5a9a      	ldrh	r2, [r3, r2]
100432de:	490a      	ldr	r1, [pc, #40]	@ (10043308 <USART_TxEmpty+0x34>)
100432e0:	2381      	movs	r3, #129	@ 0x81
100432e2:	009b      	lsls	r3, r3, #2
100432e4:	5acb      	ldrh	r3, [r1, r3]
100432e6:	429a      	cmp	r2, r3
100432e8:	d109      	bne.n	100432fe <USART_TxEmpty+0x2a>
100432ea:	4b07      	ldr	r3, [pc, #28]	@ (10043308 <USART_TxEmpty+0x34>)
100432ec:	4a08      	ldr	r2, [pc, #32]	@ (10043310 <USART_TxEmpty+0x3c>)
100432ee:	5c9b      	ldrb	r3, [r3, r2]
100432f0:	2201      	movs	r2, #1
100432f2:	4053      	eors	r3, r2
100432f4:	b2db      	uxtb	r3, r3
100432f6:	2b00      	cmp	r3, #0
100432f8:	d001      	beq.n	100432fe <USART_TxEmpty+0x2a>
100432fa:	2301      	movs	r3, #1
100432fc:	e000      	b.n	10043300 <USART_TxEmpty+0x2c>
100432fe:	2300      	movs	r3, #0
10043300:	b2db      	uxtb	r3, r3
}
10043302:	0018      	movs	r0, r3
10043304:	46bd      	mov	sp, r7
10043306:	bd80      	pop	{r7, pc}
10043308:	2000068c 	.word	0x2000068c
1004330c:	00000202 	.word	0x00000202
10043310:	00000206 	.word	0x00000206

10043314 <main>:
 * @author Caitlin Bonesio
 *
 */

int main(void)
{
10043314:	b580      	push	{r7, lr}
10043316:	b086      	sub	sp, #24
10043318:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
1004331a:	f7fd fe8f 	bl	1004103c <BOARD_Init>
1004331e:	0003      	movs	r3, r0
10043320:	2b01      	cmp	r3, #1
10043322:	d001      	beq.n	10043328 <main+0x14>
		BOARD_CrashHandler();
10043324:	f7fd feaa 	bl	1004107c <BOARD_CrashHandler>
	}

	// Initialize all configured peripherals
	if(UART_Init() != INIT_OK){
10043328:	f7ff fe8c 	bl	10043044 <UART_Init>
1004332c:	0003      	movs	r3, r0
1004332e:	2b01      	cmp	r3, #1
10043330:	d001      	beq.n	10043336 <main+0x22>
		BOARD_CrashHandler();
10043332:	f7fd fea3 	bl	1004107c <BOARD_CrashHandler>
	}

	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
10043336:	2300      	movs	r3, #0
10043338:	617b      	str	r3, [r7, #20]
1004333a:	e013      	b.n	10043364 <main+0x50>
		EventQueues[i] = FIFO_Create();
1004333c:	f7fe faba 	bl	100418b4 <FIFO_Create>
10043340:	0001      	movs	r1, r0
10043342:	4b34      	ldr	r3, [pc, #208]	@ (10043414 <main+0x100>)
10043344:	697a      	ldr	r2, [r7, #20]
10043346:	0092      	lsls	r2, r2, #2
10043348:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
1004334a:	4b33      	ldr	r3, [pc, #204]	@ (10043418 <main+0x104>)
1004334c:	697a      	ldr	r2, [r7, #20]
1004334e:	0092      	lsls	r2, r2, #2
10043350:	58d3      	ldr	r3, [r2, r3]
10043352:	4a30      	ldr	r2, [pc, #192]	@ (10043414 <main+0x100>)
10043354:	6979      	ldr	r1, [r7, #20]
10043356:	0089      	lsls	r1, r1, #2
10043358:	588a      	ldr	r2, [r1, r2]
1004335a:	0010      	movs	r0, r2
1004335c:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
1004335e:	697b      	ldr	r3, [r7, #20]
10043360:	3301      	adds	r3, #1
10043362:	617b      	str	r3, [r7, #20]
10043364:	697b      	ldr	r3, [r7, #20]
10043366:	2b03      	cmp	r3, #3
10043368:	dde8      	ble.n	1004333c <main+0x28>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
1004336a:	2300      	movs	r3, #0
1004336c:	613b      	str	r3, [r7, #16]
1004336e:	e012      	b.n	10043396 <main+0x82>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10043370:	4b2a      	ldr	r3, [pc, #168]	@ (1004341c <main+0x108>)
10043372:	693a      	ldr	r2, [r7, #16]
10043374:	0092      	lsls	r2, r2, #2
10043376:	58d3      	ldr	r3, [r2, r3]
10043378:	4798      	blx	r3
1004337a:	0003      	movs	r3, r0
1004337c:	001a      	movs	r2, r3
1004337e:	1d3b      	adds	r3, r7, #4
10043380:	601a      	str	r2, [r3, #0]
10043382:	1d3b      	adds	r3, r7, #4
10043384:	781b      	ldrb	r3, [r3, #0]
10043386:	b25b      	sxtb	r3, r3
10043388:	3301      	adds	r3, #1
1004338a:	d101      	bne.n	10043390 <main+0x7c>
				BOARD_CrashHandler();//We've crashed
1004338c:	f7fd fe76 	bl	1004107c <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10043390:	693b      	ldr	r3, [r7, #16]
10043392:	3301      	adds	r3, #1
10043394:	613b      	str	r3, [r7, #16]
10043396:	693b      	ldr	r3, [r7, #16]
10043398:	2b03      	cmp	r3, #3
1004339a:	dde9      	ble.n	10043370 <main+0x5c>
			}
		}
		uint8_t done = 0;
1004339c:	230f      	movs	r3, #15
1004339e:	18fb      	adds	r3, r7, r3
100433a0:	2200      	movs	r2, #0
100433a2:	701a      	strb	r2, [r3, #0]
		while(!done){
100433a4:	e030      	b.n	10043408 <main+0xf4>
			//run all module event handlers
			done = 1;//assume we're done
100433a6:	230f      	movs	r3, #15
100433a8:	18fb      	adds	r3, r7, r3
100433aa:	2201      	movs	r2, #1
100433ac:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
100433ae:	2300      	movs	r3, #0
100433b0:	60bb      	str	r3, [r7, #8]
100433b2:	e026      	b.n	10043402 <main+0xee>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
100433b4:	4b17      	ldr	r3, [pc, #92]	@ (10043414 <main+0x100>)
100433b6:	68ba      	ldr	r2, [r7, #8]
100433b8:	0092      	lsls	r2, r2, #2
100433ba:	58d3      	ldr	r3, [r2, r3]
100433bc:	0018      	movs	r0, r3
100433be:	f7fe faca 	bl	10041956 <FIFO_Dequeue>
100433c2:	0003      	movs	r3, r0
100433c4:	001a      	movs	r2, r3
100433c6:	003b      	movs	r3, r7
100433c8:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
100433ca:	4b12      	ldr	r3, [pc, #72]	@ (10043414 <main+0x100>)
100433cc:	68ba      	ldr	r2, [r7, #8]
100433ce:	0092      	lsls	r2, r2, #2
100433d0:	58d3      	ldr	r3, [r2, r3]
100433d2:	0018      	movs	r0, r3
100433d4:	f7fe fb11 	bl	100419fa <FIFO_GetSize>
100433d8:	1e03      	subs	r3, r0, #0
100433da:	d003      	beq.n	100433e4 <main+0xd0>
					done = 0;//if any queue is not empty, we are not done
100433dc:	230f      	movs	r3, #15
100433de:	18fb      	adds	r3, r7, r3
100433e0:	2200      	movs	r2, #0
100433e2:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
100433e4:	003b      	movs	r3, r7
100433e6:	781b      	ldrb	r3, [r3, #0]
100433e8:	b25b      	sxtb	r3, r3
100433ea:	2b00      	cmp	r3, #0
100433ec:	d006      	beq.n	100433fc <main+0xe8>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
100433ee:	4b0c      	ldr	r3, [pc, #48]	@ (10043420 <main+0x10c>)
100433f0:	68ba      	ldr	r2, [r7, #8]
100433f2:	0092      	lsls	r2, r2, #2
100433f4:	58d2      	ldr	r2, [r2, r3]
100433f6:	003b      	movs	r3, r7
100433f8:	6818      	ldr	r0, [r3, #0]
100433fa:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
100433fc:	68bb      	ldr	r3, [r7, #8]
100433fe:	3301      	adds	r3, #1
10043400:	60bb      	str	r3, [r7, #8]
10043402:	68bb      	ldr	r3, [r7, #8]
10043404:	2b03      	cmp	r3, #3
10043406:	ddd5      	ble.n	100433b4 <main+0xa0>
		while(!done){
10043408:	230f      	movs	r3, #15
1004340a:	18fb      	adds	r3, r7, r3
1004340c:	781b      	ldrb	r3, [r3, #0]
1004340e:	2b00      	cmp	r3, #0
10043410:	d0c9      	beq.n	100433a6 <main+0x92>
	while(1){
10043412:	e7aa      	b.n	1004336a <main+0x56>
10043414:	20000a9c 	.word	0x20000a9c
10043418:	20000d38 	.word	0x20000d38
1004341c:	20000d48 	.word	0x20000d48
10043420:	20000d58 	.word	0x20000d58

10043424 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10043424:	b580      	push	{r7, lr}
10043426:	b082      	sub	sp, #8
10043428:	af00      	add	r7, sp, #0
1004342a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004342c:	4b08      	ldr	r3, [pc, #32]	@ (10043450 <LL_PWR_SetNoPullA+0x2c>)
1004342e:	6a1a      	ldr	r2, [r3, #32]
10043430:	687b      	ldr	r3, [r7, #4]
10043432:	43d9      	mvns	r1, r3
10043434:	4b06      	ldr	r3, [pc, #24]	@ (10043450 <LL_PWR_SetNoPullA+0x2c>)
10043436:	400a      	ands	r2, r1
10043438:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004343a:	4b05      	ldr	r3, [pc, #20]	@ (10043450 <LL_PWR_SetNoPullA+0x2c>)
1004343c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004343e:	687b      	ldr	r3, [r7, #4]
10043440:	43d9      	mvns	r1, r3
10043442:	4b03      	ldr	r3, [pc, #12]	@ (10043450 <LL_PWR_SetNoPullA+0x2c>)
10043444:	400a      	ands	r2, r1
10043446:	625a      	str	r2, [r3, #36]	@ 0x24
}
10043448:	46c0      	nop			@ (mov r8, r8)
1004344a:	46bd      	mov	sp, r7
1004344c:	b002      	add	sp, #8
1004344e:	bd80      	pop	{r7, pc}
10043450:	48500000 	.word	0x48500000

10043454 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10043454:	b580      	push	{r7, lr}
10043456:	b082      	sub	sp, #8
10043458:	af00      	add	r7, sp, #0
1004345a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004345c:	4b08      	ldr	r3, [pc, #32]	@ (10043480 <LL_PWR_SetNoPullB+0x2c>)
1004345e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10043460:	687b      	ldr	r3, [r7, #4]
10043462:	43d9      	mvns	r1, r3
10043464:	4b06      	ldr	r3, [pc, #24]	@ (10043480 <LL_PWR_SetNoPullB+0x2c>)
10043466:	400a      	ands	r2, r1
10043468:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004346a:	4b05      	ldr	r3, [pc, #20]	@ (10043480 <LL_PWR_SetNoPullB+0x2c>)
1004346c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004346e:	687b      	ldr	r3, [r7, #4]
10043470:	43d9      	mvns	r1, r3
10043472:	4b03      	ldr	r3, [pc, #12]	@ (10043480 <LL_PWR_SetNoPullB+0x2c>)
10043474:	400a      	ands	r2, r1
10043476:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10043478:	46c0      	nop			@ (mov r8, r8)
1004347a:	46bd      	mov	sp, r7
1004347c:	b002      	add	sp, #8
1004347e:	bd80      	pop	{r7, pc}
10043480:	48500000 	.word	0x48500000

10043484 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10043484:	b580      	push	{r7, lr}
10043486:	b084      	sub	sp, #16
10043488:	af00      	add	r7, sp, #0
1004348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
1004348c:	4b07      	ldr	r3, [pc, #28]	@ (100434ac <LL_AHB1_GRP1_EnableClock+0x28>)
1004348e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043490:	4b06      	ldr	r3, [pc, #24]	@ (100434ac <LL_AHB1_GRP1_EnableClock+0x28>)
10043492:	687a      	ldr	r2, [r7, #4]
10043494:	430a      	orrs	r2, r1
10043496:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043498:	4b04      	ldr	r3, [pc, #16]	@ (100434ac <LL_AHB1_GRP1_EnableClock+0x28>)
1004349a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004349c:	687a      	ldr	r2, [r7, #4]
1004349e:	4013      	ands	r3, r2
100434a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100434a2:	68fb      	ldr	r3, [r7, #12]
}
100434a4:	46c0      	nop			@ (mov r8, r8)
100434a6:	46bd      	mov	sp, r7
100434a8:	b004      	add	sp, #16
100434aa:	bd80      	pop	{r7, pc}
100434ac:	48400000 	.word	0x48400000

100434b0 <LL_APB0_GRP1_EnableClock>:
  * @retval None
  * @note   LL_APB0_GRP1_PERIPH_TIM1 is valid only for STM32WB06 and STM32WB07
  * @note   LL_APB0_GRP1_PERIPH_TIM2, LL_APB0_GRP1_PERIPH_TIM16 and LL_APB0_GRP1_PERIPH_TIM17 are valid for STM32WB05 and STM32WB09
  */
__STATIC_INLINE void LL_APB0_GRP1_EnableClock(uint32_t Periphs)
{
100434b0:	b580      	push	{r7, lr}
100434b2:	b084      	sub	sp, #16
100434b4:	af00      	add	r7, sp, #0
100434b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB0ENR, Periphs);
100434b8:	4b07      	ldr	r3, [pc, #28]	@ (100434d8 <LL_APB0_GRP1_EnableClock+0x28>)
100434ba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100434bc:	4b06      	ldr	r3, [pc, #24]	@ (100434d8 <LL_APB0_GRP1_EnableClock+0x28>)
100434be:	687a      	ldr	r2, [r7, #4]
100434c0:	430a      	orrs	r2, r1
100434c2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100434c4:	4b04      	ldr	r3, [pc, #16]	@ (100434d8 <LL_APB0_GRP1_EnableClock+0x28>)
100434c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100434c8:	687a      	ldr	r2, [r7, #4]
100434ca:	4013      	ands	r3, r2
100434cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100434ce:	68fb      	ldr	r3, [r7, #12]
}
100434d0:	46c0      	nop			@ (mov r8, r8)
100434d2:	46bd      	mov	sp, r7
100434d4:	b004      	add	sp, #16
100434d6:	bd80      	pop	{r7, pc}
100434d8:	48400000 	.word	0x48400000

100434dc <LL_APB1_GRP1_EnableClock>:
  * @arg LL_APB1_GRP1_PERIPH_I2C2
  * @retval None
  * @note   LL_APB1_GRP1_PERIPH_SPI1, LL_APB1_GRP1_PERIPH_SPI2 and LL_APB1_GRP1_PERIPH_I2C2 are valid for STM32WB06 and STM32WB07
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
100434dc:	b580      	push	{r7, lr}
100434de:	b084      	sub	sp, #16
100434e0:	af00      	add	r7, sp, #0
100434e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
100434e4:	4b07      	ldr	r3, [pc, #28]	@ (10043504 <LL_APB1_GRP1_EnableClock+0x28>)
100434e6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
100434e8:	4b06      	ldr	r3, [pc, #24]	@ (10043504 <LL_APB1_GRP1_EnableClock+0x28>)
100434ea:	687a      	ldr	r2, [r7, #4]
100434ec:	430a      	orrs	r2, r1
100434ee:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
100434f0:	4b04      	ldr	r3, [pc, #16]	@ (10043504 <LL_APB1_GRP1_EnableClock+0x28>)
100434f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
100434f4:	687a      	ldr	r2, [r7, #4]
100434f6:	4013      	ands	r3, r2
100434f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100434fa:	68fb      	ldr	r3, [r7, #12]
}
100434fc:	46c0      	nop			@ (mov r8, r8)
100434fe:	46bd      	mov	sp, r7
10043500:	b004      	add	sp, #16
10043502:	bd80      	pop	{r7, pc}
10043504:	48400000 	.word	0x48400000

10043508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10043508:	b580      	push	{r7, lr}
1004350a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
1004350c:	2380      	movs	r3, #128	@ 0x80
1004350e:	005b      	lsls	r3, r3, #1
10043510:	0018      	movs	r0, r3
10043512:	f7ff ffcd 	bl	100434b0 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
10043516:	46c0      	nop			@ (mov r8, r8)
10043518:	46bd      	mov	sp, r7
1004351a:	bd80      	pop	{r7, pc}

1004351c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
1004351c:	b590      	push	{r4, r7, lr}
1004351e:	b089      	sub	sp, #36	@ 0x24
10043520:	af00      	add	r7, sp, #0
10043522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10043524:	240c      	movs	r4, #12
10043526:	193b      	adds	r3, r7, r4
10043528:	0018      	movs	r0, r3
1004352a:	2314      	movs	r3, #20
1004352c:	001a      	movs	r2, r3
1004352e:	2100      	movs	r1, #0
10043530:	f006 fbf0 	bl	10049d14 <memset>
  if(hi2c->Instance==I2C1)
10043534:	687b      	ldr	r3, [r7, #4]
10043536:	681a      	ldr	r2, [r3, #0]
10043538:	2382      	movs	r3, #130	@ 0x82
1004353a:	05db      	lsls	r3, r3, #23
1004353c:	429a      	cmp	r2, r3
1004353e:	d13c      	bne.n	100435ba <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
10043540:	2004      	movs	r0, #4
10043542:	f7ff ff9f 	bl	10043484 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
10043546:	2008      	movs	r0, #8
10043548:	f7ff ff9c 	bl	10043484 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
1004354c:	193b      	adds	r3, r7, r4
1004354e:	2202      	movs	r2, #2
10043550:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10043552:	193b      	adds	r3, r7, r4
10043554:	2212      	movs	r2, #18
10043556:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043558:	193b      	adds	r3, r7, r4
1004355a:	2200      	movs	r2, #0
1004355c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004355e:	193b      	adds	r3, r7, r4
10043560:	2200      	movs	r2, #0
10043562:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10043564:	193b      	adds	r3, r7, r4
10043566:	2200      	movs	r2, #0
10043568:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004356a:	193a      	adds	r2, r7, r4
1004356c:	2390      	movs	r3, #144	@ 0x90
1004356e:	05db      	lsls	r3, r3, #23
10043570:	0011      	movs	r1, r2
10043572:	0018      	movs	r0, r3
10043574:	f000 ff26 	bl	100443c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
10043578:	0021      	movs	r1, r4
1004357a:	187b      	adds	r3, r7, r1
1004357c:	2240      	movs	r2, #64	@ 0x40
1004357e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10043580:	187b      	adds	r3, r7, r1
10043582:	2212      	movs	r2, #18
10043584:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043586:	187b      	adds	r3, r7, r1
10043588:	2200      	movs	r2, #0
1004358a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004358c:	187b      	adds	r3, r7, r1
1004358e:	2200      	movs	r2, #0
10043590:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10043592:	187b      	adds	r3, r7, r1
10043594:	2200      	movs	r2, #0
10043596:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043598:	187b      	adds	r3, r7, r1
1004359a:	4a0a      	ldr	r2, [pc, #40]	@ (100435c4 <HAL_I2C_MspInit+0xa8>)
1004359c:	0019      	movs	r1, r3
1004359e:	0010      	movs	r0, r2
100435a0:	f000 ff10 	bl	100443c4 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_1);
100435a4:	2002      	movs	r0, #2
100435a6:	f7ff ff3d 	bl	10043424 <LL_PWR_SetNoPullA>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_6);
100435aa:	2040      	movs	r0, #64	@ 0x40
100435ac:	f7ff ff52 	bl	10043454 <LL_PWR_SetNoPullB>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
100435b0:	2380      	movs	r3, #128	@ 0x80
100435b2:	039b      	lsls	r3, r3, #14
100435b4:	0018      	movs	r0, r3
100435b6:	f7ff ff91 	bl	100434dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
100435ba:	46c0      	nop			@ (mov r8, r8)
100435bc:	46bd      	mov	sp, r7
100435be:	b009      	add	sp, #36	@ 0x24
100435c0:	bd90      	pop	{r4, r7, pc}
100435c2:	46c0      	nop			@ (mov r8, r8)
100435c4:	48100000 	.word	0x48100000

100435c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
100435c8:	b590      	push	{r4, r7, lr}
100435ca:	b08f      	sub	sp, #60	@ 0x3c
100435cc:	af00      	add	r7, sp, #0
100435ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100435d0:	2324      	movs	r3, #36	@ 0x24
100435d2:	18fb      	adds	r3, r7, r3
100435d4:	0018      	movs	r0, r3
100435d6:	2314      	movs	r3, #20
100435d8:	001a      	movs	r2, r3
100435da:	2100      	movs	r1, #0
100435dc:	f006 fb9a 	bl	10049d14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100435e0:	240c      	movs	r4, #12
100435e2:	193b      	adds	r3, r7, r4
100435e4:	0018      	movs	r0, r3
100435e6:	2318      	movs	r3, #24
100435e8:	001a      	movs	r2, r3
100435ea:	2100      	movs	r1, #0
100435ec:	f006 fb92 	bl	10049d14 <memset>
  if(huart->Instance==LPUART1)
100435f0:	687b      	ldr	r3, [r7, #4]
100435f2:	681b      	ldr	r3, [r3, #0]
100435f4:	4a29      	ldr	r2, [pc, #164]	@ (1004369c <HAL_UART_MspInit+0xd4>)
100435f6:	4293      	cmp	r3, r2
100435f8:	d14c      	bne.n	10043694 <HAL_UART_MspInit+0xcc>
//
  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
100435fa:	193b      	adds	r3, r7, r4
100435fc:	2210      	movs	r2, #16
100435fe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10043600:	193b      	adds	r3, r7, r4
10043602:	2200      	movs	r2, #0
10043604:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043606:	193b      	adds	r3, r7, r4
10043608:	0018      	movs	r0, r3
1004360a:	f004 fbb7 	bl	10047d7c <HAL_RCCEx_PeriphCLKConfig>
1004360e:	1e03      	subs	r3, r0, #0
10043610:	d001      	beq.n	10043616 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
10043612:	f7fd fd39 	bl	10041088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10043616:	2380      	movs	r3, #128	@ 0x80
10043618:	005b      	lsls	r3, r3, #1
1004361a:	0018      	movs	r0, r3
1004361c:	f7ff ff5e 	bl	100434dc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10043620:	2008      	movs	r0, #8
10043622:	f7ff ff2f 	bl	10043484 <LL_AHB1_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB3     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
10043626:	2424      	movs	r4, #36	@ 0x24
10043628:	193b      	adds	r3, r7, r4
1004362a:	2208      	movs	r2, #8
1004362c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004362e:	193b      	adds	r3, r7, r4
10043630:	2202      	movs	r2, #2
10043632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043634:	193b      	adds	r3, r7, r4
10043636:	2200      	movs	r2, #0
10043638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004363a:	193b      	adds	r3, r7, r4
1004363c:	2200      	movs	r2, #0
1004363e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
10043640:	193b      	adds	r3, r7, r4
10043642:	2201      	movs	r2, #1
10043644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043646:	193b      	adds	r3, r7, r4
10043648:	4a15      	ldr	r2, [pc, #84]	@ (100436a0 <HAL_UART_MspInit+0xd8>)
1004364a:	0019      	movs	r1, r3
1004364c:	0010      	movs	r0, r2
1004364e:	f000 feb9 	bl	100443c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10043652:	0021      	movs	r1, r4
10043654:	187b      	adds	r3, r7, r1
10043656:	2280      	movs	r2, #128	@ 0x80
10043658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004365a:	187b      	adds	r3, r7, r1
1004365c:	2202      	movs	r2, #2
1004365e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043660:	187b      	adds	r3, r7, r1
10043662:	2200      	movs	r2, #0
10043664:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043666:	187b      	adds	r3, r7, r1
10043668:	2200      	movs	r2, #0
1004366a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
1004366c:	187b      	adds	r3, r7, r1
1004366e:	2203      	movs	r2, #3
10043670:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043672:	187b      	adds	r3, r7, r1
10043674:	4a0a      	ldr	r2, [pc, #40]	@ (100436a0 <HAL_UART_MspInit+0xd8>)
10043676:	0019      	movs	r1, r3
10043678:	0010      	movs	r0, r2
1004367a:	f000 fea3 	bl	100443c4 <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_3|LL_PWR_GPIO_BIT_7);
1004367e:	2088      	movs	r0, #136	@ 0x88
10043680:	f7ff fee8 	bl	10043454 <LL_PWR_SetNoPullB>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
10043684:	2200      	movs	r2, #0
10043686:	2101      	movs	r1, #1
10043688:	2009      	movs	r0, #9
1004368a:	f000 fdd7 	bl	1004423c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
1004368e:	2009      	movs	r0, #9
10043690:	f000 fde9 	bl	10044266 <HAL_NVIC_EnableIRQ>
//
  /* USER CODE END LPUART1_MspInit 1 */

  }

}
10043694:	46c0      	nop			@ (mov r8, r8)
10043696:	46bd      	mov	sp, r7
10043698:	b00f      	add	sp, #60	@ 0x3c
1004369a:	bd90      	pop	{r4, r7, pc}
1004369c:	41005000 	.word	0x41005000
100436a0:	48100000 	.word	0x48100000

100436a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
100436a4:	b580      	push	{r7, lr}
100436a6:	b082      	sub	sp, #8
100436a8:	af00      	add	r7, sp, #0
100436aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
100436ac:	687b      	ldr	r3, [r7, #4]
100436ae:	681b      	ldr	r3, [r3, #0]
100436b0:	4a08      	ldr	r2, [pc, #32]	@ (100436d4 <HAL_TIM_Base_MspInit+0x30>)
100436b2:	4293      	cmp	r3, r2
100436b4:	d10a      	bne.n	100436cc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
100436b6:	2001      	movs	r0, #1
100436b8:	f7ff fefa 	bl	100434b0 <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
100436bc:	2200      	movs	r2, #0
100436be:	2101      	movs	r1, #1
100436c0:	200a      	movs	r0, #10
100436c2:	f000 fdbb 	bl	1004423c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
100436c6:	200a      	movs	r0, #10
100436c8:	f000 fdcd 	bl	10044266 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
100436cc:	46c0      	nop			@ (mov r8, r8)
100436ce:	46bd      	mov	sp, r7
100436d0:	b002      	add	sp, #8
100436d2:	bd80      	pop	{r7, pc}
100436d4:	40002000 	.word	0x40002000

100436d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100436d8:	b580      	push	{r7, lr}
100436da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100436dc:	46c0      	nop			@ (mov r8, r8)
100436de:	e7fd      	b.n	100436dc <NMI_Handler+0x4>

100436e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100436e0:	b580      	push	{r7, lr}
100436e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100436e4:	46c0      	nop			@ (mov r8, r8)
100436e6:	e7fd      	b.n	100436e4 <HardFault_Handler+0x4>

100436e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100436e8:	b580      	push	{r7, lr}
100436ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100436ec:	46c0      	nop			@ (mov r8, r8)
100436ee:	46bd      	mov	sp, r7
100436f0:	bd80      	pop	{r7, pc}

100436f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100436f2:	b580      	push	{r7, lr}
100436f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100436f6:	46c0      	nop			@ (mov r8, r8)
100436f8:	46bd      	mov	sp, r7
100436fa:	bd80      	pop	{r7, pc}

100436fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100436fc:	b580      	push	{r7, lr}
100436fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10043700:	f000 fcca 	bl	10044098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10043704:	46c0      	nop			@ (mov r8, r8)
10043706:	46bd      	mov	sp, r7
10043708:	bd80      	pop	{r7, pc}

1004370a <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004370a:	b580      	push	{r7, lr}
1004370c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
1004370e:	f003 fe60 	bl	100473d2 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10043712:	46c0      	nop			@ (mov r8, r8)
10043714:	46bd      	mov	sp, r7
10043716:	bd80      	pop	{r7, pc}

10043718 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10043718:	b580      	push	{r7, lr}
1004371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004371c:	f003 fe62 	bl	100473e4 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10043720:	46c0      	nop			@ (mov r8, r8)
10043722:	46bd      	mov	sp, r7
10043724:	bd80      	pop	{r7, pc}

10043726 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10043726:	b580      	push	{r7, lr}
10043728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
1004372a:	f003 f8de 	bl	100468ea <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
1004372e:	46c0      	nop			@ (mov r8, r8)
10043730:	46bd      	mov	sp, r7
10043732:	bd80      	pop	{r7, pc}

10043734 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10043734:	b580      	push	{r7, lr}
10043736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10043738:	f003 f8fe 	bl	10046938 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004373c:	46c0      	nop			@ (mov r8, r8)
1004373e:	46bd      	mov	sp, r7
10043740:	bd80      	pop	{r7, pc}
	...

10043744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10043744:	b580      	push	{r7, lr}
10043746:	b086      	sub	sp, #24
10043748:	af00      	add	r7, sp, #0
1004374a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
1004374c:	4a14      	ldr	r2, [pc, #80]	@ (100437a0 <_sbrk+0x5c>)
1004374e:	4b15      	ldr	r3, [pc, #84]	@ (100437a4 <_sbrk+0x60>)
10043750:	1ad3      	subs	r3, r2, r3
10043752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10043754:	697b      	ldr	r3, [r7, #20]
10043756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10043758:	4b13      	ldr	r3, [pc, #76]	@ (100437a8 <_sbrk+0x64>)
1004375a:	681b      	ldr	r3, [r3, #0]
1004375c:	2b00      	cmp	r3, #0
1004375e:	d102      	bne.n	10043766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10043760:	4b11      	ldr	r3, [pc, #68]	@ (100437a8 <_sbrk+0x64>)
10043762:	4a12      	ldr	r2, [pc, #72]	@ (100437ac <_sbrk+0x68>)
10043764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10043766:	4b10      	ldr	r3, [pc, #64]	@ (100437a8 <_sbrk+0x64>)
10043768:	681a      	ldr	r2, [r3, #0]
1004376a:	687b      	ldr	r3, [r7, #4]
1004376c:	18d3      	adds	r3, r2, r3
1004376e:	693a      	ldr	r2, [r7, #16]
10043770:	429a      	cmp	r2, r3
10043772:	d207      	bcs.n	10043784 <_sbrk+0x40>
  {
    errno = ENOMEM;
10043774:	f006 fae8 	bl	10049d48 <__errno>
10043778:	0003      	movs	r3, r0
1004377a:	220c      	movs	r2, #12
1004377c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1004377e:	2301      	movs	r3, #1
10043780:	425b      	negs	r3, r3
10043782:	e009      	b.n	10043798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10043784:	4b08      	ldr	r3, [pc, #32]	@ (100437a8 <_sbrk+0x64>)
10043786:	681b      	ldr	r3, [r3, #0]
10043788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
1004378a:	4b07      	ldr	r3, [pc, #28]	@ (100437a8 <_sbrk+0x64>)
1004378c:	681a      	ldr	r2, [r3, #0]
1004378e:	687b      	ldr	r3, [r7, #4]
10043790:	18d2      	adds	r2, r2, r3
10043792:	4b05      	ldr	r3, [pc, #20]	@ (100437a8 <_sbrk+0x64>)
10043794:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10043796:	68fb      	ldr	r3, [r7, #12]
}
10043798:	0018      	movs	r0, r3
1004379a:	46bd      	mov	sp, r7
1004379c:	b006      	add	sp, #24
1004379e:	bd80      	pop	{r7, pc}
100437a0:	20006000 	.word	0x20006000
100437a4:	00000c00 	.word	0x00000c00
100437a8:	20000aac 	.word	0x20000aac
100437ac:	20000df4 	.word	0x20000df4

100437b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100437b0:	b590      	push	{r4, r7, lr}
100437b2:	b083      	sub	sp, #12
100437b4:	af00      	add	r7, sp, #0
100437b6:	0002      	movs	r2, r0
100437b8:	6039      	str	r1, [r7, #0]
100437ba:	1dfb      	adds	r3, r7, #7
100437bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100437be:	1dfb      	adds	r3, r7, #7
100437c0:	781b      	ldrb	r3, [r3, #0]
100437c2:	2b7f      	cmp	r3, #127	@ 0x7f
100437c4:	d828      	bhi.n	10043818 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100437c6:	4a2f      	ldr	r2, [pc, #188]	@ (10043884 <__NVIC_SetPriority+0xd4>)
100437c8:	1dfb      	adds	r3, r7, #7
100437ca:	781b      	ldrb	r3, [r3, #0]
100437cc:	b25b      	sxtb	r3, r3
100437ce:	089b      	lsrs	r3, r3, #2
100437d0:	33c0      	adds	r3, #192	@ 0xc0
100437d2:	009b      	lsls	r3, r3, #2
100437d4:	589b      	ldr	r3, [r3, r2]
100437d6:	1dfa      	adds	r2, r7, #7
100437d8:	7812      	ldrb	r2, [r2, #0]
100437da:	0011      	movs	r1, r2
100437dc:	2203      	movs	r2, #3
100437de:	400a      	ands	r2, r1
100437e0:	00d2      	lsls	r2, r2, #3
100437e2:	21ff      	movs	r1, #255	@ 0xff
100437e4:	4091      	lsls	r1, r2
100437e6:	000a      	movs	r2, r1
100437e8:	43d2      	mvns	r2, r2
100437ea:	401a      	ands	r2, r3
100437ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100437ee:	683b      	ldr	r3, [r7, #0]
100437f0:	019b      	lsls	r3, r3, #6
100437f2:	22ff      	movs	r2, #255	@ 0xff
100437f4:	401a      	ands	r2, r3
100437f6:	1dfb      	adds	r3, r7, #7
100437f8:	781b      	ldrb	r3, [r3, #0]
100437fa:	0018      	movs	r0, r3
100437fc:	2303      	movs	r3, #3
100437fe:	4003      	ands	r3, r0
10043800:	00db      	lsls	r3, r3, #3
10043802:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043804:	481f      	ldr	r0, [pc, #124]	@ (10043884 <__NVIC_SetPriority+0xd4>)
10043806:	1dfb      	adds	r3, r7, #7
10043808:	781b      	ldrb	r3, [r3, #0]
1004380a:	b25b      	sxtb	r3, r3
1004380c:	089b      	lsrs	r3, r3, #2
1004380e:	430a      	orrs	r2, r1
10043810:	33c0      	adds	r3, #192	@ 0xc0
10043812:	009b      	lsls	r3, r3, #2
10043814:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10043816:	e031      	b.n	1004387c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043818:	4a1b      	ldr	r2, [pc, #108]	@ (10043888 <__NVIC_SetPriority+0xd8>)
1004381a:	1dfb      	adds	r3, r7, #7
1004381c:	781b      	ldrb	r3, [r3, #0]
1004381e:	0019      	movs	r1, r3
10043820:	230f      	movs	r3, #15
10043822:	400b      	ands	r3, r1
10043824:	3b08      	subs	r3, #8
10043826:	089b      	lsrs	r3, r3, #2
10043828:	3306      	adds	r3, #6
1004382a:	009b      	lsls	r3, r3, #2
1004382c:	18d3      	adds	r3, r2, r3
1004382e:	3304      	adds	r3, #4
10043830:	681b      	ldr	r3, [r3, #0]
10043832:	1dfa      	adds	r2, r7, #7
10043834:	7812      	ldrb	r2, [r2, #0]
10043836:	0011      	movs	r1, r2
10043838:	2203      	movs	r2, #3
1004383a:	400a      	ands	r2, r1
1004383c:	00d2      	lsls	r2, r2, #3
1004383e:	21ff      	movs	r1, #255	@ 0xff
10043840:	4091      	lsls	r1, r2
10043842:	000a      	movs	r2, r1
10043844:	43d2      	mvns	r2, r2
10043846:	401a      	ands	r2, r3
10043848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004384a:	683b      	ldr	r3, [r7, #0]
1004384c:	019b      	lsls	r3, r3, #6
1004384e:	22ff      	movs	r2, #255	@ 0xff
10043850:	401a      	ands	r2, r3
10043852:	1dfb      	adds	r3, r7, #7
10043854:	781b      	ldrb	r3, [r3, #0]
10043856:	0018      	movs	r0, r3
10043858:	2303      	movs	r3, #3
1004385a:	4003      	ands	r3, r0
1004385c:	00db      	lsls	r3, r3, #3
1004385e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043860:	4809      	ldr	r0, [pc, #36]	@ (10043888 <__NVIC_SetPriority+0xd8>)
10043862:	1dfb      	adds	r3, r7, #7
10043864:	781b      	ldrb	r3, [r3, #0]
10043866:	001c      	movs	r4, r3
10043868:	230f      	movs	r3, #15
1004386a:	4023      	ands	r3, r4
1004386c:	3b08      	subs	r3, #8
1004386e:	089b      	lsrs	r3, r3, #2
10043870:	430a      	orrs	r2, r1
10043872:	3306      	adds	r3, #6
10043874:	009b      	lsls	r3, r3, #2
10043876:	18c3      	adds	r3, r0, r3
10043878:	3304      	adds	r3, #4
1004387a:	601a      	str	r2, [r3, #0]
}
1004387c:	46c0      	nop			@ (mov r8, r8)
1004387e:	46bd      	mov	sp, r7
10043880:	b003      	add	sp, #12
10043882:	bd90      	pop	{r4, r7, pc}
10043884:	e000e100 	.word	0xe000e100
10043888:	e000ed00 	.word	0xe000ed00

1004388c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
1004388c:	b580      	push	{r7, lr}
1004388e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10043890:	f3bf 8f4f 	dsb	sy
}
10043894:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10043896:	4b04      	ldr	r3, [pc, #16]	@ (100438a8 <__NVIC_SystemReset+0x1c>)
10043898:	4a04      	ldr	r2, [pc, #16]	@ (100438ac <__NVIC_SystemReset+0x20>)
1004389a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
1004389c:	f3bf 8f4f 	dsb	sy
}
100438a0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100438a2:	46c0      	nop			@ (mov r8, r8)
100438a4:	e7fd      	b.n	100438a2 <__NVIC_SystemReset+0x16>
100438a6:	46c0      	nop			@ (mov r8, r8)
100438a8:	e000ed00 	.word	0xe000ed00
100438ac:	05fa0004 	.word	0x05fa0004

100438b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100438b0:	b590      	push	{r4, r7, lr}
100438b2:	b087      	sub	sp, #28
100438b4:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100438b6:	4a5e      	ldr	r2, [pc, #376]	@ (10043a30 <SystemInit+0x180>)
100438b8:	2394      	movs	r3, #148	@ 0x94
100438ba:	58d3      	ldr	r3, [r2, r3]
100438bc:	2b00      	cmp	r3, #0
100438be:	d10e      	bne.n	100438de <SystemInit+0x2e>
100438c0:	4b5c      	ldr	r3, [pc, #368]	@ (10043a34 <SystemInit+0x184>)
100438c2:	691b      	ldr	r3, [r3, #16]
100438c4:	2b00      	cmp	r3, #0
100438c6:	d103      	bne.n	100438d0 <SystemInit+0x20>
100438c8:	4b5a      	ldr	r3, [pc, #360]	@ (10043a34 <SystemInit+0x184>)
100438ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100438cc:	2b00      	cmp	r3, #0
100438ce:	d006      	beq.n	100438de <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
100438d0:	4b59      	ldr	r3, [pc, #356]	@ (10043a38 <SystemInit+0x188>)
100438d2:	2201      	movs	r2, #1
100438d4:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
100438d6:	f000 f8f5 	bl	10043ac4 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
100438da:	f7ff ffd7 	bl	1004388c <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
100438de:	4b57      	ldr	r3, [pc, #348]	@ (10043a3c <SystemInit+0x18c>)
100438e0:	4a57      	ldr	r2, [pc, #348]	@ (10043a40 <SystemInit+0x190>)
100438e2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
100438e4:	4b55      	ldr	r3, [pc, #340]	@ (10043a3c <SystemInit+0x18c>)
100438e6:	689a      	ldr	r2, [r3, #8]
100438e8:	4b53      	ldr	r3, [pc, #332]	@ (10043a38 <SystemInit+0x188>)
100438ea:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
100438ec:	4b51      	ldr	r3, [pc, #324]	@ (10043a34 <SystemInit+0x184>)
100438ee:	685a      	ldr	r2, [r3, #4]
100438f0:	4b50      	ldr	r3, [pc, #320]	@ (10043a34 <SystemInit+0x184>)
100438f2:	2120      	movs	r1, #32
100438f4:	430a      	orrs	r2, r1
100438f6:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
100438f8:	4b4e      	ldr	r3, [pc, #312]	@ (10043a34 <SystemInit+0x184>)
100438fa:	685a      	ldr	r2, [r3, #4]
100438fc:	4b4d      	ldr	r3, [pc, #308]	@ (10043a34 <SystemInit+0x184>)
100438fe:	4951      	ldr	r1, [pc, #324]	@ (10043a44 <SystemInit+0x194>)
10043900:	400a      	ands	r2, r1
10043902:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10043904:	46c0      	nop			@ (mov r8, r8)
10043906:	4b4b      	ldr	r3, [pc, #300]	@ (10043a34 <SystemInit+0x184>)
10043908:	695b      	ldr	r3, [r3, #20]
1004390a:	2204      	movs	r2, #4
1004390c:	4013      	ands	r3, r2
1004390e:	2b04      	cmp	r3, #4
10043910:	d1f9      	bne.n	10043906 <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10043912:	4b48      	ldr	r3, [pc, #288]	@ (10043a34 <SystemInit+0x184>)
10043914:	69db      	ldr	r3, [r3, #28]
10043916:	2230      	movs	r2, #48	@ 0x30
10043918:	4393      	bics	r3, r2
1004391a:	001a      	movs	r2, r3
1004391c:	4b45      	ldr	r3, [pc, #276]	@ (10043a34 <SystemInit+0x184>)
1004391e:	2120      	movs	r1, #32
10043920:	430a      	orrs	r2, r1
10043922:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10043924:	4b43      	ldr	r3, [pc, #268]	@ (10043a34 <SystemInit+0x184>)
10043926:	69da      	ldr	r2, [r3, #28]
10043928:	4b42      	ldr	r3, [pc, #264]	@ (10043a34 <SystemInit+0x184>)
1004392a:	4947      	ldr	r1, [pc, #284]	@ (10043a48 <SystemInit+0x198>)
1004392c:	400a      	ands	r2, r1
1004392e:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10043930:	4b40      	ldr	r3, [pc, #256]	@ (10043a34 <SystemInit+0x184>)
10043932:	69da      	ldr	r2, [r3, #28]
10043934:	4b3f      	ldr	r3, [pc, #252]	@ (10043a34 <SystemInit+0x184>)
10043936:	2180      	movs	r1, #128	@ 0x80
10043938:	0049      	lsls	r1, r1, #1
1004393a:	430a      	orrs	r2, r1
1004393c:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
1004393e:	4b43      	ldr	r3, [pc, #268]	@ (10043a4c <SystemInit+0x19c>)
10043940:	681b      	ldr	r3, [r3, #0]
10043942:	4a43      	ldr	r2, [pc, #268]	@ (10043a50 <SystemInit+0x1a0>)
10043944:	4293      	cmp	r3, r2
10043946:	d055      	beq.n	100439f4 <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10043948:	231f      	movs	r3, #31
1004394a:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
1004394c:	2308      	movs	r3, #8
1004394e:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10043950:	230a      	movs	r3, #10
10043952:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10043954:	2303      	movs	r3, #3
10043956:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10043958:	4b35      	ldr	r3, [pc, #212]	@ (10043a30 <SystemInit+0x180>)
1004395a:	68db      	ldr	r3, [r3, #12]
1004395c:	221e      	movs	r2, #30
1004395e:	4393      	bics	r3, r2
10043960:	0019      	movs	r1, r3
10043962:	68fb      	ldr	r3, [r7, #12]
10043964:	005a      	lsls	r2, r3, #1
10043966:	4b32      	ldr	r3, [pc, #200]	@ (10043a30 <SystemInit+0x180>)
10043968:	430a      	orrs	r2, r1
1004396a:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
1004396c:	4b30      	ldr	r3, [pc, #192]	@ (10043a30 <SystemInit+0x180>)
1004396e:	68da      	ldr	r2, [r3, #12]
10043970:	4b2f      	ldr	r3, [pc, #188]	@ (10043a30 <SystemInit+0x180>)
10043972:	2101      	movs	r1, #1
10043974:	430a      	orrs	r2, r1
10043976:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10043978:	4b2d      	ldr	r3, [pc, #180]	@ (10043a30 <SystemInit+0x180>)
1004397a:	68db      	ldr	r3, [r3, #12]
1004397c:	4a35      	ldr	r2, [pc, #212]	@ (10043a54 <SystemInit+0x1a4>)
1004397e:	4013      	ands	r3, r2
10043980:	0019      	movs	r1, r3
10043982:	693b      	ldr	r3, [r7, #16]
10043984:	061a      	lsls	r2, r3, #24
10043986:	4b2a      	ldr	r3, [pc, #168]	@ (10043a30 <SystemInit+0x180>)
10043988:	430a      	orrs	r2, r1
1004398a:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
1004398c:	4b28      	ldr	r3, [pc, #160]	@ (10043a30 <SystemInit+0x180>)
1004398e:	68da      	ldr	r2, [r3, #12]
10043990:	4b27      	ldr	r3, [pc, #156]	@ (10043a30 <SystemInit+0x180>)
10043992:	2180      	movs	r1, #128	@ 0x80
10043994:	0409      	lsls	r1, r1, #16
10043996:	430a      	orrs	r2, r1
10043998:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
1004399a:	4a26      	ldr	r2, [pc, #152]	@ (10043a34 <SystemInit+0x184>)
1004399c:	2394      	movs	r3, #148	@ 0x94
1004399e:	58d3      	ldr	r3, [r2, r3]
100439a0:	4a2d      	ldr	r2, [pc, #180]	@ (10043a58 <SystemInit+0x1a8>)
100439a2:	401a      	ands	r2, r3
100439a4:	68bb      	ldr	r3, [r7, #8]
100439a6:	0199      	lsls	r1, r3, #6
100439a8:	23f0      	movs	r3, #240	@ 0xf0
100439aa:	009b      	lsls	r3, r3, #2
100439ac:	400b      	ands	r3, r1
100439ae:	4921      	ldr	r1, [pc, #132]	@ (10043a34 <SystemInit+0x184>)
100439b0:	4313      	orrs	r3, r2
100439b2:	2294      	movs	r2, #148	@ 0x94
100439b4:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
100439b6:	4a1f      	ldr	r2, [pc, #124]	@ (10043a34 <SystemInit+0x184>)
100439b8:	2394      	movs	r3, #148	@ 0x94
100439ba:	58d3      	ldr	r3, [r2, r3]
100439bc:	491d      	ldr	r1, [pc, #116]	@ (10043a34 <SystemInit+0x184>)
100439be:	2220      	movs	r2, #32
100439c0:	4313      	orrs	r3, r2
100439c2:	2294      	movs	r2, #148	@ 0x94
100439c4:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
100439c6:	4a1b      	ldr	r2, [pc, #108]	@ (10043a34 <SystemInit+0x184>)
100439c8:	2394      	movs	r3, #148	@ 0x94
100439ca:	58d3      	ldr	r3, [r2, r3]
100439cc:	4a23      	ldr	r2, [pc, #140]	@ (10043a5c <SystemInit+0x1ac>)
100439ce:	401a      	ands	r2, r3
100439d0:	687b      	ldr	r3, [r7, #4]
100439d2:	02d9      	lsls	r1, r3, #11
100439d4:	23e0      	movs	r3, #224	@ 0xe0
100439d6:	019b      	lsls	r3, r3, #6
100439d8:	400b      	ands	r3, r1
100439da:	4916      	ldr	r1, [pc, #88]	@ (10043a34 <SystemInit+0x184>)
100439dc:	4313      	orrs	r3, r2
100439de:	2294      	movs	r2, #148	@ 0x94
100439e0:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
100439e2:	4a14      	ldr	r2, [pc, #80]	@ (10043a34 <SystemInit+0x184>)
100439e4:	2394      	movs	r3, #148	@ 0x94
100439e6:	58d3      	ldr	r3, [r2, r3]
100439e8:	4912      	ldr	r1, [pc, #72]	@ (10043a34 <SystemInit+0x184>)
100439ea:	2280      	movs	r2, #128	@ 0x80
100439ec:	00d2      	lsls	r2, r2, #3
100439ee:	4313      	orrs	r3, r2
100439f0:	2294      	movs	r2, #148	@ 0x94
100439f2:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
100439f4:	2317      	movs	r3, #23
100439f6:	18fb      	adds	r3, r7, r3
100439f8:	2200      	movs	r2, #0
100439fa:	701a      	strb	r2, [r3, #0]
100439fc:	e00d      	b.n	10043a1a <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
100439fe:	2417      	movs	r4, #23
10043a00:	193b      	adds	r3, r7, r4
10043a02:	781b      	ldrb	r3, [r3, #0]
10043a04:	b25b      	sxtb	r3, r3
10043a06:	2103      	movs	r1, #3
10043a08:	0018      	movs	r0, r3
10043a0a:	f7ff fed1 	bl	100437b0 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10043a0e:	0021      	movs	r1, r4
10043a10:	187b      	adds	r3, r7, r1
10043a12:	781a      	ldrb	r2, [r3, #0]
10043a14:	187b      	adds	r3, r7, r1
10043a16:	3201      	adds	r2, #1
10043a18:	701a      	strb	r2, [r3, #0]
10043a1a:	2317      	movs	r3, #23
10043a1c:	18fb      	adds	r3, r7, r3
10043a1e:	781b      	ldrb	r3, [r3, #0]
10043a20:	2b1f      	cmp	r3, #31
10043a22:	d9ec      	bls.n	100439fe <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
10043a24:	b662      	cpsie	i
}
10043a26:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10043a28:	46c0      	nop			@ (mov r8, r8)
10043a2a:	46bd      	mov	sp, r7
10043a2c:	b007      	add	sp, #28
10043a2e:	bd90      	pop	{r4, r7, pc}
10043a30:	48400000 	.word	0x48400000
10043a34:	48500000 	.word	0x48500000
10043a38:	20000004 	.word	0x20000004
10043a3c:	e000ed00 	.word	0xe000ed00
10043a40:	10040000 	.word	0x10040000
10043a44:	fffffeff 	.word	0xfffffeff
10043a48:	fffffbff 	.word	0xfffffbff
10043a4c:	10001ef8 	.word	0x10001ef8
10043a50:	fcbceccc 	.word	0xfcbceccc
10043a54:	c0ffffff 	.word	0xc0ffffff
10043a58:	fffffc3f 	.word	0xfffffc3f
10043a5c:	ffffc7ff 	.word	0xffffc7ff

10043a60 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10043a60:	b580      	push	{r7, lr}
10043a62:	b082      	sub	sp, #8
10043a64:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10043a66:	4b13      	ldr	r3, [pc, #76]	@ (10043ab4 <SystemCoreClockUpdate+0x54>)
10043a68:	689b      	ldr	r3, [r3, #8]
10043a6a:	085b      	lsrs	r3, r3, #1
10043a6c:	b2da      	uxtb	r2, r3
10043a6e:	1dfb      	adds	r3, r7, #7
10043a70:	2101      	movs	r1, #1
10043a72:	400a      	ands	r2, r1
10043a74:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10043a76:	4b0f      	ldr	r3, [pc, #60]	@ (10043ab4 <SystemCoreClockUpdate+0x54>)
10043a78:	689b      	ldr	r3, [r3, #8]
10043a7a:	0a1b      	lsrs	r3, r3, #8
10043a7c:	b2da      	uxtb	r2, r3
10043a7e:	1dbb      	adds	r3, r7, #6
10043a80:	2107      	movs	r1, #7
10043a82:	400a      	ands	r2, r1
10043a84:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10043a86:	1dfb      	adds	r3, r7, #7
10043a88:	781b      	ldrb	r3, [r3, #0]
10043a8a:	2b00      	cmp	r3, #0
10043a8c:	d007      	beq.n	10043a9e <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10043a8e:	1dbb      	adds	r3, r7, #6
10043a90:	781b      	ldrb	r3, [r3, #0]
10043a92:	3b01      	subs	r3, #1
10043a94:	4a08      	ldr	r2, [pc, #32]	@ (10043ab8 <SystemCoreClockUpdate+0x58>)
10043a96:	40da      	lsrs	r2, r3
10043a98:	4b08      	ldr	r3, [pc, #32]	@ (10043abc <SystemCoreClockUpdate+0x5c>)
10043a9a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10043a9c:	e005      	b.n	10043aaa <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10043a9e:	1dbb      	adds	r3, r7, #6
10043aa0:	781b      	ldrb	r3, [r3, #0]
10043aa2:	4a07      	ldr	r2, [pc, #28]	@ (10043ac0 <SystemCoreClockUpdate+0x60>)
10043aa4:	40da      	lsrs	r2, r3
10043aa6:	4b05      	ldr	r3, [pc, #20]	@ (10043abc <SystemCoreClockUpdate+0x5c>)
10043aa8:	601a      	str	r2, [r3, #0]
}
10043aaa:	46c0      	nop			@ (mov r8, r8)
10043aac:	46bd      	mov	sp, r7
10043aae:	b002      	add	sp, #8
10043ab0:	bd80      	pop	{r7, pc}
10043ab2:	46c0      	nop			@ (mov r8, r8)
10043ab4:	48400000 	.word	0x48400000
10043ab8:	01e84800 	.word	0x01e84800
10043abc:	20000d68 	.word	0x20000d68
10043ac0:	03d09000 	.word	0x03d09000

10043ac4 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10043ac4:	b580      	push	{r7, lr}
10043ac6:	af00      	add	r7, sp, #0
}
10043ac8:	46c0      	nop			@ (mov r8, r8)
10043aca:	46bd      	mov	sp, r7
10043acc:	bd80      	pop	{r7, pc}
	...

10043ad0 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10043ad0:	4810      	ldr	r0, [pc, #64]	@ (10043b14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10043ad2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10043ad4:	f7ff feec 	bl	100438b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10043ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10043ada:	e003      	b.n	10043ae4 <LoopCopyDataInit>

10043adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10043adc:	4b0e      	ldr	r3, [pc, #56]	@ (10043b18 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10043ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10043ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10043ae2:	3104      	adds	r1, #4

10043ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10043ae4:	480d      	ldr	r0, [pc, #52]	@ (10043b1c <LoopForever+0xa>)
  ldr  r3, =_edata
10043ae6:	4b0e      	ldr	r3, [pc, #56]	@ (10043b20 <LoopForever+0xe>)
  adds  r2, r0, r1
10043ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10043aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10043aec:	d3f6      	bcc.n	10043adc <CopyDataInit>
  ldr  r2, =_sbss
10043aee:	4a0d      	ldr	r2, [pc, #52]	@ (10043b24 <LoopForever+0x12>)
  b  LoopFillZerobss
10043af0:	e002      	b.n	10043af8 <LoopFillZerobss>

10043af2 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10043af2:	2300      	movs	r3, #0
  str  r3, [r2]
10043af4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10043af6:	3204      	adds	r2, #4

10043af8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10043af8:	4b0b      	ldr	r3, [pc, #44]	@ (10043b28 <LoopForever+0x16>)
  cmp  r2, r3
10043afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
10043afc:	d3f9      	bcc.n	10043af2 <FillZerobss>
  ldr  r2, =_sbssblue
10043afe:	4a0b      	ldr	r2, [pc, #44]	@ (10043b2c <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10043b00:	e002      	b.n	10043b08 <LoopFillZeroBlueRam>

10043b02 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10043b02:	2300      	movs	r3, #0
  str  r3, [r2]
10043b04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10043b06:	3204      	adds	r2, #4

10043b08 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10043b08:	4b09      	ldr	r3, [pc, #36]	@ (10043b30 <LoopForever+0x1e>)
  cmp  r2, r3
10043b0a:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10043b0c:	d3f9      	bcc.n	10043b02 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10043b0e:	f7ff fc01 	bl	10043314 <main>

10043b12 <LoopForever>:

LoopForever:
    b LoopForever
10043b12:	e7fe      	b.n	10043b12 <LoopForever>
   ldr   r0, =_estack
10043b14:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10043b18:	1004a720 	.word	0x1004a720
  ldr  r0, =_sdata
10043b1c:	20000d38 	.word	0x20000d38
  ldr  r3, =_edata
10043b20:	20000df4 	.word	0x20000df4
  ldr  r2, =_sbss
10043b24:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10043b28:	20000d38 	.word	0x20000d38
  ldr  r2, =_sbssblue
10043b2c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10043b30:	20000194 	.word	0x20000194

10043b34 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10043b34:	e7fe      	b.n	10043b34 <ADC_IRQHandler>
	...

10043b38 <LL_PWR_IsEnabledPUPDCfg>:
{
10043b38:	b580      	push	{r7, lr}
10043b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10043b3c:	4b05      	ldr	r3, [pc, #20]	@ (10043b54 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10043b3e:	681b      	ldr	r3, [r3, #0]
10043b40:	2210      	movs	r2, #16
10043b42:	4013      	ands	r3, r2
10043b44:	2b10      	cmp	r3, #16
10043b46:	d101      	bne.n	10043b4c <LL_PWR_IsEnabledPUPDCfg+0x14>
10043b48:	2301      	movs	r3, #1
10043b4a:	e000      	b.n	10043b4e <LL_PWR_IsEnabledPUPDCfg+0x16>
10043b4c:	2300      	movs	r3, #0
}
10043b4e:	0018      	movs	r0, r3
10043b50:	46bd      	mov	sp, r7
10043b52:	bd80      	pop	{r7, pc}
10043b54:	48500000 	.word	0x48500000

10043b58 <LL_PWR_EnableGPIOPullUp>:
{
10043b58:	b580      	push	{r7, lr}
10043b5a:	b082      	sub	sp, #8
10043b5c:	af00      	add	r7, sp, #0
10043b5e:	6078      	str	r0, [r7, #4]
10043b60:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10043b62:	687b      	ldr	r3, [r7, #4]
10043b64:	3304      	adds	r3, #4
10043b66:	681a      	ldr	r2, [r3, #0]
10043b68:	683b      	ldr	r3, [r7, #0]
10043b6a:	43d9      	mvns	r1, r3
10043b6c:	687b      	ldr	r3, [r7, #4]
10043b6e:	3304      	adds	r3, #4
10043b70:	400a      	ands	r2, r1
10043b72:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10043b74:	687b      	ldr	r3, [r7, #4]
10043b76:	6819      	ldr	r1, [r3, #0]
10043b78:	687b      	ldr	r3, [r7, #4]
10043b7a:	683a      	ldr	r2, [r7, #0]
10043b7c:	430a      	orrs	r2, r1
10043b7e:	601a      	str	r2, [r3, #0]
}
10043b80:	46c0      	nop			@ (mov r8, r8)
10043b82:	46bd      	mov	sp, r7
10043b84:	b002      	add	sp, #8
10043b86:	bd80      	pop	{r7, pc}

10043b88 <LL_AHB1_GRP1_EnableClock>:
{
10043b88:	b580      	push	{r7, lr}
10043b8a:	b084      	sub	sp, #16
10043b8c:	af00      	add	r7, sp, #0
10043b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10043b90:	4b07      	ldr	r3, [pc, #28]	@ (10043bb0 <LL_AHB1_GRP1_EnableClock+0x28>)
10043b92:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043b94:	4b06      	ldr	r3, [pc, #24]	@ (10043bb0 <LL_AHB1_GRP1_EnableClock+0x28>)
10043b96:	687a      	ldr	r2, [r7, #4]
10043b98:	430a      	orrs	r2, r1
10043b9a:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043b9c:	4b04      	ldr	r3, [pc, #16]	@ (10043bb0 <LL_AHB1_GRP1_EnableClock+0x28>)
10043b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10043ba0:	687a      	ldr	r2, [r7, #4]
10043ba2:	4013      	ands	r3, r2
10043ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043ba6:	68fb      	ldr	r3, [r7, #12]
}
10043ba8:	46c0      	nop			@ (mov r8, r8)
10043baa:	46bd      	mov	sp, r7
10043bac:	b004      	add	sp, #16
10043bae:	bd80      	pop	{r7, pc}
10043bb0:	48400000 	.word	0x48400000

10043bb4 <LL_APB0_GRP1_EnableClock>:
{
10043bb4:	b580      	push	{r7, lr}
10043bb6:	b084      	sub	sp, #16
10043bb8:	af00      	add	r7, sp, #0
10043bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10043bbc:	4b07      	ldr	r3, [pc, #28]	@ (10043bdc <LL_APB0_GRP1_EnableClock+0x28>)
10043bbe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10043bc0:	4b06      	ldr	r3, [pc, #24]	@ (10043bdc <LL_APB0_GRP1_EnableClock+0x28>)
10043bc2:	687a      	ldr	r2, [r7, #4]
10043bc4:	430a      	orrs	r2, r1
10043bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10043bc8:	4b04      	ldr	r3, [pc, #16]	@ (10043bdc <LL_APB0_GRP1_EnableClock+0x28>)
10043bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10043bcc:	687a      	ldr	r2, [r7, #4]
10043bce:	4013      	ands	r3, r2
10043bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043bd2:	68fb      	ldr	r3, [r7, #12]
}
10043bd4:	46c0      	nop			@ (mov r8, r8)
10043bd6:	46bd      	mov	sp, r7
10043bd8:	b004      	add	sp, #16
10043bda:	bd80      	pop	{r7, pc}
10043bdc:	48400000 	.word	0x48400000

10043be0 <LL_APB1_GRP1_EnableClock>:
{
10043be0:	b580      	push	{r7, lr}
10043be2:	b084      	sub	sp, #16
10043be4:	af00      	add	r7, sp, #0
10043be6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10043be8:	4b07      	ldr	r3, [pc, #28]	@ (10043c08 <LL_APB1_GRP1_EnableClock+0x28>)
10043bea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10043bec:	4b06      	ldr	r3, [pc, #24]	@ (10043c08 <LL_APB1_GRP1_EnableClock+0x28>)
10043bee:	687a      	ldr	r2, [r7, #4]
10043bf0:	430a      	orrs	r2, r1
10043bf2:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10043bf4:	4b04      	ldr	r3, [pc, #16]	@ (10043c08 <LL_APB1_GRP1_EnableClock+0x28>)
10043bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10043bf8:	687a      	ldr	r2, [r7, #4]
10043bfa:	4013      	ands	r3, r2
10043bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043bfe:	68fb      	ldr	r3, [r7, #12]
}
10043c00:	46c0      	nop			@ (mov r8, r8)
10043c02:	46bd      	mov	sp, r7
10043c04:	b004      	add	sp, #16
10043c06:	bd80      	pop	{r7, pc}
10043c08:	48400000 	.word	0x48400000

10043c0c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10043c0c:	b590      	push	{r4, r7, lr}
10043c0e:	b089      	sub	sp, #36	@ 0x24
10043c10:	af00      	add	r7, sp, #0
10043c12:	0002      	movs	r2, r0
10043c14:	1dfb      	adds	r3, r7, #7
10043c16:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10043c18:	1dfb      	adds	r3, r7, #7
10043c1a:	781b      	ldrb	r3, [r3, #0]
10043c1c:	2b00      	cmp	r3, #0
10043c1e:	d103      	bne.n	10043c28 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10043c20:	2008      	movs	r0, #8
10043c22:	f7ff ffb1 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
10043c26:	e00a      	b.n	10043c3e <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10043c28:	1dfb      	adds	r3, r7, #7
10043c2a:	781b      	ldrb	r3, [r3, #0]
10043c2c:	2b01      	cmp	r3, #1
10043c2e:	d103      	bne.n	10043c38 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10043c30:	2008      	movs	r0, #8
10043c32:	f7ff ffa9 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
10043c36:	e002      	b.n	10043c3e <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10043c38:	2008      	movs	r0, #8
10043c3a:	f7ff ffa5 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10043c3e:	1dfb      	adds	r3, r7, #7
10043c40:	781a      	ldrb	r2, [r3, #0]
10043c42:	4b28      	ldr	r3, [pc, #160]	@ (10043ce4 <BSP_LED_Init+0xd8>)
10043c44:	0052      	lsls	r2, r2, #1
10043c46:	5ad3      	ldrh	r3, [r2, r3]
10043c48:	001a      	movs	r2, r3
10043c4a:	240c      	movs	r4, #12
10043c4c:	193b      	adds	r3, r7, r4
10043c4e:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10043c50:	193b      	adds	r3, r7, r4
10043c52:	2201      	movs	r2, #1
10043c54:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10043c56:	193b      	adds	r3, r7, r4
10043c58:	2201      	movs	r2, #1
10043c5a:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10043c5c:	193b      	adds	r3, r7, r4
10043c5e:	2202      	movs	r2, #2
10043c60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10043c62:	1dfb      	adds	r3, r7, #7
10043c64:	781a      	ldrb	r2, [r3, #0]
10043c66:	4b20      	ldr	r3, [pc, #128]	@ (10043ce8 <BSP_LED_Init+0xdc>)
10043c68:	0092      	lsls	r2, r2, #2
10043c6a:	58d3      	ldr	r3, [r2, r3]
10043c6c:	193a      	adds	r2, r7, r4
10043c6e:	0011      	movs	r1, r2
10043c70:	0018      	movs	r0, r3
10043c72:	f000 fba7 	bl	100443c4 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10043c76:	f7ff ff5f 	bl	10043b38 <LL_PWR_IsEnabledPUPDCfg>
10043c7a:	1e03      	subs	r3, r0, #0
10043c7c:	d01f      	beq.n	10043cbe <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10043c7e:	1dfb      	adds	r3, r7, #7
10043c80:	781a      	ldrb	r2, [r3, #0]
10043c82:	4b19      	ldr	r3, [pc, #100]	@ (10043ce8 <BSP_LED_Init+0xdc>)
10043c84:	0092      	lsls	r2, r2, #2
10043c86:	58d2      	ldr	r2, [r2, r3]
10043c88:	2390      	movs	r3, #144	@ 0x90
10043c8a:	05db      	lsls	r3, r3, #23
10043c8c:	429a      	cmp	r2, r3
10043c8e:	d106      	bne.n	10043c9e <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10043c90:	193b      	adds	r3, r7, r4
10043c92:	681b      	ldr	r3, [r3, #0]
10043c94:	4a15      	ldr	r2, [pc, #84]	@ (10043cec <BSP_LED_Init+0xe0>)
10043c96:	0019      	movs	r1, r3
10043c98:	0010      	movs	r0, r2
10043c9a:	f7ff ff5d 	bl	10043b58 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
10043c9e:	1dfb      	adds	r3, r7, #7
10043ca0:	781a      	ldrb	r2, [r3, #0]
10043ca2:	4b11      	ldr	r3, [pc, #68]	@ (10043ce8 <BSP_LED_Init+0xdc>)
10043ca4:	0092      	lsls	r2, r2, #2
10043ca6:	58d3      	ldr	r3, [r2, r3]
10043ca8:	4a11      	ldr	r2, [pc, #68]	@ (10043cf0 <BSP_LED_Init+0xe4>)
10043caa:	4293      	cmp	r3, r2
10043cac:	d107      	bne.n	10043cbe <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10043cae:	230c      	movs	r3, #12
10043cb0:	18fb      	adds	r3, r7, r3
10043cb2:	681b      	ldr	r3, [r3, #0]
10043cb4:	4a0f      	ldr	r2, [pc, #60]	@ (10043cf4 <BSP_LED_Init+0xe8>)
10043cb6:	0019      	movs	r1, r3
10043cb8:	0010      	movs	r0, r2
10043cba:	f7ff ff4d 	bl	10043b58 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10043cbe:	1dfb      	adds	r3, r7, #7
10043cc0:	781a      	ldrb	r2, [r3, #0]
10043cc2:	4b09      	ldr	r3, [pc, #36]	@ (10043ce8 <BSP_LED_Init+0xdc>)
10043cc4:	0092      	lsls	r2, r2, #2
10043cc6:	58d0      	ldr	r0, [r2, r3]
10043cc8:	1dfb      	adds	r3, r7, #7
10043cca:	781a      	ldrb	r2, [r3, #0]
10043ccc:	4b05      	ldr	r3, [pc, #20]	@ (10043ce4 <BSP_LED_Init+0xd8>)
10043cce:	0052      	lsls	r2, r2, #1
10043cd0:	5ad3      	ldrh	r3, [r2, r3]
10043cd2:	2201      	movs	r2, #1
10043cd4:	0019      	movs	r1, r3
10043cd6:	f000 fd3b 	bl	10044750 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10043cda:	2300      	movs	r3, #0
}
10043cdc:	0018      	movs	r0, r3
10043cde:	46bd      	mov	sp, r7
10043ce0:	b009      	add	sp, #36	@ 0x24
10043ce2:	bd90      	pop	{r4, r7, pc}
10043ce4:	20000d6c 	.word	0x20000d6c
10043ce8:	20000d74 	.word	0x20000d74
10043cec:	48500020 	.word	0x48500020
10043cf0:	48100000 	.word	0x48100000
10043cf4:	48500028 	.word	0x48500028

10043cf8 <BSP_LED_Toggle>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10043cf8:	b580      	push	{r7, lr}
10043cfa:	b082      	sub	sp, #8
10043cfc:	af00      	add	r7, sp, #0
10043cfe:	0002      	movs	r2, r0
10043d00:	1dfb      	adds	r3, r7, #7
10043d02:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10043d04:	1dfb      	adds	r3, r7, #7
10043d06:	781a      	ldrb	r2, [r3, #0]
10043d08:	4b07      	ldr	r3, [pc, #28]	@ (10043d28 <BSP_LED_Toggle+0x30>)
10043d0a:	0092      	lsls	r2, r2, #2
10043d0c:	58d0      	ldr	r0, [r2, r3]
10043d0e:	1dfb      	adds	r3, r7, #7
10043d10:	781a      	ldrb	r2, [r3, #0]
10043d12:	4b06      	ldr	r3, [pc, #24]	@ (10043d2c <BSP_LED_Toggle+0x34>)
10043d14:	0052      	lsls	r2, r2, #1
10043d16:	5ad3      	ldrh	r3, [r2, r3]
10043d18:	0019      	movs	r1, r3
10043d1a:	f000 fd36 	bl	1004478a <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
10043d1e:	2300      	movs	r3, #0
}
10043d20:	0018      	movs	r0, r3
10043d22:	46bd      	mov	sp, r7
10043d24:	b002      	add	sp, #8
10043d26:	bd80      	pop	{r7, pc}
10043d28:	20000d74 	.word	0x20000d74
10043d2c:	20000d6c 	.word	0x20000d6c

10043d30 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
10043d30:	b580      	push	{r7, lr}
10043d32:	b088      	sub	sp, #32
10043d34:	af00      	add	r7, sp, #0
10043d36:	0002      	movs	r2, r0
10043d38:	1dfb      	adds	r3, r7, #7
10043d3a:	701a      	strb	r2, [r3, #0]
10043d3c:	1dbb      	adds	r3, r7, #6
10043d3e:	1c0a      	adds	r2, r1, #0
10043d40:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
10043d42:	2300      	movs	r3, #0
10043d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
10043d46:	1dfb      	adds	r3, r7, #7
10043d48:	781b      	ldrb	r3, [r3, #0]
10043d4a:	2b00      	cmp	r3, #0
10043d4c:	d103      	bne.n	10043d56 <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
10043d4e:	2004      	movs	r0, #4
10043d50:	f7ff ff1a 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
10043d54:	e00a      	b.n	10043d6c <BSP_PB_Init+0x3c>
  }
  else if (Button == B2)
10043d56:	1dfb      	adds	r3, r7, #7
10043d58:	781b      	ldrb	r3, [r3, #0]
10043d5a:	2b01      	cmp	r3, #1
10043d5c:	d103      	bne.n	10043d66 <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
10043d5e:	2008      	movs	r0, #8
10043d60:	f7ff ff12 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
10043d64:	e002      	b.n	10043d6c <BSP_PB_Init+0x3c>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
10043d66:	2008      	movs	r0, #8
10043d68:	f7ff ff0e 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
10043d6c:	1dfb      	adds	r3, r7, #7
10043d6e:	781a      	ldrb	r2, [r3, #0]
10043d70:	4b37      	ldr	r3, [pc, #220]	@ (10043e50 <BSP_PB_Init+0x120>)
10043d72:	0052      	lsls	r2, r2, #1
10043d74:	5ad3      	ldrh	r3, [r2, r3]
10043d76:	001a      	movs	r2, r3
10043d78:	2108      	movs	r1, #8
10043d7a:	187b      	adds	r3, r7, r1
10043d7c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
10043d7e:	187b      	adds	r3, r7, r1
10043d80:	2201      	movs	r2, #1
10043d82:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10043d84:	187b      	adds	r3, r7, r1
10043d86:	2202      	movs	r2, #2
10043d88:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
10043d8a:	1dbb      	adds	r3, r7, #6
10043d8c:	781b      	ldrb	r3, [r3, #0]
10043d8e:	2b00      	cmp	r3, #0
10043d90:	d10c      	bne.n	10043dac <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
10043d92:	187b      	adds	r3, r7, r1
10043d94:	2200      	movs	r2, #0
10043d96:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10043d98:	1dfb      	adds	r3, r7, #7
10043d9a:	781a      	ldrb	r2, [r3, #0]
10043d9c:	4b2d      	ldr	r3, [pc, #180]	@ (10043e54 <BSP_PB_Init+0x124>)
10043d9e:	0092      	lsls	r2, r2, #2
10043da0:	58d3      	ldr	r3, [r2, r3]
10043da2:	187a      	adds	r2, r7, r1
10043da4:	0011      	movs	r1, r2
10043da6:	0018      	movs	r0, r3
10043da8:	f000 fb0c 	bl	100443c4 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
10043dac:	1dbb      	adds	r3, r7, #6
10043dae:	781b      	ldrb	r3, [r3, #0]
10043db0:	2b01      	cmp	r3, #1
10043db2:	d123      	bne.n	10043dfc <BSP_PB_Init+0xcc>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
10043db4:	2380      	movs	r3, #128	@ 0x80
10043db6:	005b      	lsls	r3, r3, #1
10043db8:	0018      	movs	r0, r3
10043dba:	f7ff fefb 	bl	10043bb4 <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
10043dbe:	2108      	movs	r1, #8
10043dc0:	187b      	adds	r3, r7, r1
10043dc2:	2280      	movs	r2, #128	@ 0x80
10043dc4:	0252      	lsls	r2, r2, #9
10043dc6:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10043dc8:	1dfb      	adds	r3, r7, #7
10043dca:	781a      	ldrb	r2, [r3, #0]
10043dcc:	4b21      	ldr	r3, [pc, #132]	@ (10043e54 <BSP_PB_Init+0x124>)
10043dce:	0092      	lsls	r2, r2, #2
10043dd0:	58d3      	ldr	r3, [r2, r3]
10043dd2:	187a      	adds	r2, r7, r1
10043dd4:	0011      	movs	r1, r2
10043dd6:	0018      	movs	r0, r3
10043dd8:	f000 faf4 	bl	100443c4 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
10043ddc:	1dfb      	adds	r3, r7, #7
10043dde:	781b      	ldrb	r3, [r3, #0]
10043de0:	4a1d      	ldr	r2, [pc, #116]	@ (10043e58 <BSP_PB_Init+0x128>)
10043de2:	56d3      	ldrsb	r3, [r2, r3]
10043de4:	2200      	movs	r2, #0
10043de6:	2103      	movs	r1, #3
10043de8:	0018      	movs	r0, r3
10043dea:	f000 fa27 	bl	1004423c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
10043dee:	1dfb      	adds	r3, r7, #7
10043df0:	781b      	ldrb	r3, [r3, #0]
10043df2:	4a19      	ldr	r2, [pc, #100]	@ (10043e58 <BSP_PB_Init+0x128>)
10043df4:	56d3      	ldrsb	r3, [r2, r3]
10043df6:	0018      	movs	r0, r3
10043df8:	f000 fa35 	bl	10044266 <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10043dfc:	f7ff fe9c 	bl	10043b38 <LL_PWR_IsEnabledPUPDCfg>
10043e00:	1e03      	subs	r3, r0, #0
10043e02:	d020      	beq.n	10043e46 <BSP_PB_Init+0x116>
  {
    if (BUTTON_PORT[Button] == GPIOA)
10043e04:	1dfb      	adds	r3, r7, #7
10043e06:	781a      	ldrb	r2, [r3, #0]
10043e08:	4b12      	ldr	r3, [pc, #72]	@ (10043e54 <BSP_PB_Init+0x124>)
10043e0a:	0092      	lsls	r2, r2, #2
10043e0c:	58d2      	ldr	r2, [r2, r3]
10043e0e:	2390      	movs	r3, #144	@ 0x90
10043e10:	05db      	lsls	r3, r3, #23
10043e12:	429a      	cmp	r2, r3
10043e14:	d107      	bne.n	10043e26 <BSP_PB_Init+0xf6>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10043e16:	2308      	movs	r3, #8
10043e18:	18fb      	adds	r3, r7, r3
10043e1a:	681b      	ldr	r3, [r3, #0]
10043e1c:	4a0f      	ldr	r2, [pc, #60]	@ (10043e5c <BSP_PB_Init+0x12c>)
10043e1e:	0019      	movs	r1, r3
10043e20:	0010      	movs	r0, r2
10043e22:	f7ff fe99 	bl	10043b58 <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
10043e26:	1dfb      	adds	r3, r7, #7
10043e28:	781a      	ldrb	r2, [r3, #0]
10043e2a:	4b0a      	ldr	r3, [pc, #40]	@ (10043e54 <BSP_PB_Init+0x124>)
10043e2c:	0092      	lsls	r2, r2, #2
10043e2e:	58d3      	ldr	r3, [r2, r3]
10043e30:	4a0b      	ldr	r2, [pc, #44]	@ (10043e60 <BSP_PB_Init+0x130>)
10043e32:	4293      	cmp	r3, r2
10043e34:	d107      	bne.n	10043e46 <BSP_PB_Init+0x116>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10043e36:	2308      	movs	r3, #8
10043e38:	18fb      	adds	r3, r7, r3
10043e3a:	681b      	ldr	r3, [r3, #0]
10043e3c:	4a09      	ldr	r2, [pc, #36]	@ (10043e64 <BSP_PB_Init+0x134>)
10043e3e:	0019      	movs	r1, r3
10043e40:	0010      	movs	r0, r2
10043e42:	f7ff fe89 	bl	10043b58 <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
10043e46:	69fb      	ldr	r3, [r7, #28]
}
10043e48:	0018      	movs	r0, r3
10043e4a:	46bd      	mov	sp, r7
10043e4c:	b008      	add	sp, #32
10043e4e:	bd80      	pop	{r7, pc}
10043e50:	20000d80 	.word	0x20000d80
10043e54:	20000d88 	.word	0x20000d88
10043e58:	20000d94 	.word	0x20000d94
10043e5c:	48500020 	.word	0x48500020
10043e60:	48100000 	.word	0x48100000
10043e64:	48500028 	.word	0x48500028

10043e68 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
10043e68:	b580      	push	{r7, lr}
10043e6a:	b084      	sub	sp, #16
10043e6c:	af00      	add	r7, sp, #0
10043e6e:	0002      	movs	r2, r0
10043e70:	6039      	str	r1, [r7, #0]
10043e72:	1dfb      	adds	r3, r7, #7
10043e74:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
10043e76:	2300      	movs	r3, #0
10043e78:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
10043e7a:	683b      	ldr	r3, [r7, #0]
10043e7c:	2b00      	cmp	r3, #0
10043e7e:	d103      	bne.n	10043e88 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
10043e80:	2302      	movs	r3, #2
10043e82:	425b      	negs	r3, r3
10043e84:	60fb      	str	r3, [r7, #12]
10043e86:	e026      	b.n	10043ed6 <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10043e88:	1dfb      	adds	r3, r7, #7
10043e8a:	7819      	ldrb	r1, [r3, #0]
10043e8c:	1dfb      	adds	r3, r7, #7
10043e8e:	781a      	ldrb	r2, [r3, #0]
10043e90:	4b13      	ldr	r3, [pc, #76]	@ (10043ee0 <BSP_COM_Init+0x78>)
10043e92:	0089      	lsls	r1, r1, #2
10043e94:	58c9      	ldr	r1, [r1, r3]
10043e96:	4b13      	ldr	r3, [pc, #76]	@ (10043ee4 <BSP_COM_Init+0x7c>)
10043e98:	2094      	movs	r0, #148	@ 0x94
10043e9a:	4342      	muls	r2, r0
10043e9c:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
10043e9e:	1dfb      	adds	r3, r7, #7
10043ea0:	781b      	ldrb	r3, [r3, #0]
10043ea2:	2294      	movs	r2, #148	@ 0x94
10043ea4:	435a      	muls	r2, r3
10043ea6:	4b0f      	ldr	r3, [pc, #60]	@ (10043ee4 <BSP_COM_Init+0x7c>)
10043ea8:	18d3      	adds	r3, r2, r3
10043eaa:	0018      	movs	r0, r3
10043eac:	f000 f84e 	bl	10043f4c <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10043eb0:	68fb      	ldr	r3, [r7, #12]
10043eb2:	2b00      	cmp	r3, #0
10043eb4:	d10f      	bne.n	10043ed6 <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
10043eb6:	1dfb      	adds	r3, r7, #7
10043eb8:	781b      	ldrb	r3, [r3, #0]
10043eba:	2294      	movs	r2, #148	@ 0x94
10043ebc:	435a      	muls	r2, r3
10043ebe:	4b09      	ldr	r3, [pc, #36]	@ (10043ee4 <BSP_COM_Init+0x7c>)
10043ec0:	18d3      	adds	r3, r2, r3
10043ec2:	683a      	ldr	r2, [r7, #0]
10043ec4:	0011      	movs	r1, r2
10043ec6:	0018      	movs	r0, r3
10043ec8:	f000 f80e 	bl	10043ee8 <MX_USART1_Init>
10043ecc:	1e03      	subs	r3, r0, #0
10043ece:	d002      	beq.n	10043ed6 <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10043ed0:	2304      	movs	r3, #4
10043ed2:	425b      	negs	r3, r3
10043ed4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
10043ed6:	68fb      	ldr	r3, [r7, #12]
}
10043ed8:	0018      	movs	r0, r3
10043eda:	46bd      	mov	sp, r7
10043edc:	b004      	add	sp, #16
10043ede:	bd80      	pop	{r7, pc}
10043ee0:	20000d98 	.word	0x20000d98
10043ee4:	20000ab0 	.word	0x20000ab0

10043ee8 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
10043ee8:	b580      	push	{r7, lr}
10043eea:	b082      	sub	sp, #8
10043eec:	af00      	add	r7, sp, #0
10043eee:	6078      	str	r0, [r7, #4]
10043ef0:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
10043ef2:	683b      	ldr	r3, [r7, #0]
10043ef4:	681a      	ldr	r2, [r3, #0]
10043ef6:	687b      	ldr	r3, [r7, #4]
10043ef8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
10043efa:	683b      	ldr	r3, [r7, #0]
10043efc:	685a      	ldr	r2, [r3, #4]
10043efe:	687b      	ldr	r3, [r7, #4]
10043f00:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
10043f02:	683b      	ldr	r3, [r7, #0]
10043f04:	891b      	ldrh	r3, [r3, #8]
10043f06:	001a      	movs	r2, r3
10043f08:	687b      	ldr	r3, [r7, #4]
10043f0a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
10043f0c:	683b      	ldr	r3, [r7, #0]
10043f0e:	895b      	ldrh	r3, [r3, #10]
10043f10:	001a      	movs	r2, r3
10043f12:	687b      	ldr	r3, [r7, #4]
10043f14:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
10043f16:	687b      	ldr	r3, [r7, #4]
10043f18:	220c      	movs	r2, #12
10043f1a:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
10043f1c:	683b      	ldr	r3, [r7, #0]
10043f1e:	899b      	ldrh	r3, [r3, #12]
10043f20:	001a      	movs	r2, r3
10043f22:	687b      	ldr	r3, [r7, #4]
10043f24:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10043f26:	687b      	ldr	r3, [r7, #4]
10043f28:	2280      	movs	r2, #128	@ 0x80
10043f2a:	0212      	lsls	r2, r2, #8
10043f2c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10043f2e:	687b      	ldr	r3, [r7, #4]
10043f30:	2200      	movs	r2, #0
10043f32:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10043f34:	687b      	ldr	r3, [r7, #4]
10043f36:	2200      	movs	r2, #0
10043f38:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
10043f3a:	687b      	ldr	r3, [r7, #4]
10043f3c:	0018      	movs	r0, r3
10043f3e:	f004 fb57 	bl	100485f0 <HAL_UART_Init>
10043f42:	0003      	movs	r3, r0
}
10043f44:	0018      	movs	r0, r3
10043f46:	46bd      	mov	sp, r7
10043f48:	b002      	add	sp, #8
10043f4a:	bd80      	pop	{r7, pc}

10043f4c <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10043f4c:	b590      	push	{r4, r7, lr}
10043f4e:	b089      	sub	sp, #36	@ 0x24
10043f50:	af00      	add	r7, sp, #0
10043f52:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10043f54:	2004      	movs	r0, #4
10043f56:	f7ff fe17 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
10043f5a:	2008      	movs	r0, #8
10043f5c:	f7ff fe14 	bl	10043b88 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
10043f60:	2380      	movs	r3, #128	@ 0x80
10043f62:	00db      	lsls	r3, r3, #3
10043f64:	0018      	movs	r0, r3
10043f66:	f7ff fe3b 	bl	10043be0 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
10043f6a:	240c      	movs	r4, #12
10043f6c:	193b      	adds	r3, r7, r4
10043f6e:	2202      	movs	r2, #2
10043f70:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
10043f72:	193b      	adds	r3, r7, r4
10043f74:	2202      	movs	r2, #2
10043f76:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
10043f78:	193b      	adds	r3, r7, r4
10043f7a:	2202      	movs	r2, #2
10043f7c:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
10043f7e:	193b      	adds	r3, r7, r4
10043f80:	2201      	movs	r2, #1
10043f82:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10043f84:	193b      	adds	r3, r7, r4
10043f86:	2202      	movs	r2, #2
10043f88:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
10043f8a:	193a      	adds	r2, r7, r4
10043f8c:	2390      	movs	r3, #144	@ 0x90
10043f8e:	05db      	lsls	r3, r3, #23
10043f90:	0011      	movs	r1, r2
10043f92:	0018      	movs	r0, r3
10043f94:	f000 fa16 	bl	100443c4 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10043f98:	f7ff fdce 	bl	10043b38 <LL_PWR_IsEnabledPUPDCfg>
10043f9c:	1e03      	subs	r3, r0, #0
10043f9e:	d006      	beq.n	10043fae <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10043fa0:	193b      	adds	r3, r7, r4
10043fa2:	681b      	ldr	r3, [r3, #0]
10043fa4:	4a0a      	ldr	r2, [pc, #40]	@ (10043fd0 <UART_MspInit+0x84>)
10043fa6:	0019      	movs	r1, r3
10043fa8:	0010      	movs	r0, r2
10043faa:	f7ff fdd5 	bl	10043b58 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
10043fae:	210c      	movs	r1, #12
10043fb0:	187b      	adds	r3, r7, r1
10043fb2:	2201      	movs	r2, #1
10043fb4:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
10043fb6:	187b      	adds	r3, r7, r1
10043fb8:	2200      	movs	r2, #0
10043fba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
10043fbc:	187b      	adds	r3, r7, r1
10043fbe:	4a05      	ldr	r2, [pc, #20]	@ (10043fd4 <UART_MspInit+0x88>)
10043fc0:	0019      	movs	r1, r3
10043fc2:	0010      	movs	r0, r2
10043fc4:	f000 f9fe 	bl	100443c4 <HAL_GPIO_Init>
}
10043fc8:	46c0      	nop			@ (mov r8, r8)
10043fca:	46bd      	mov	sp, r7
10043fcc:	b009      	add	sp, #36	@ 0x24
10043fce:	bd90      	pop	{r4, r7, pc}
10043fd0:	48500020 	.word	0x48500020
10043fd4:	48100000 	.word	0x48100000

10043fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10043fd8:	b580      	push	{r7, lr}
10043fda:	b082      	sub	sp, #8
10043fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10043fde:	1dfb      	adds	r3, r7, #7
10043fe0:	2200      	movs	r2, #0
10043fe2:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10043fe4:	2003      	movs	r0, #3
10043fe6:	f000 f80f 	bl	10044008 <HAL_InitTick>
10043fea:	1e03      	subs	r3, r0, #0
10043fec:	d003      	beq.n	10043ff6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10043fee:	1dfb      	adds	r3, r7, #7
10043ff0:	2201      	movs	r2, #1
10043ff2:	701a      	strb	r2, [r3, #0]
10043ff4:	e001      	b.n	10043ffa <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10043ff6:	f7ff fa87 	bl	10043508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
10043ffa:	1dfb      	adds	r3, r7, #7
10043ffc:	781b      	ldrb	r3, [r3, #0]
}
10043ffe:	0018      	movs	r0, r3
10044000:	46bd      	mov	sp, r7
10044002:	b002      	add	sp, #8
10044004:	bd80      	pop	{r7, pc}
	...

10044008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10044008:	b590      	push	{r4, r7, lr}
1004400a:	b085      	sub	sp, #20
1004400c:	af00      	add	r7, sp, #0
1004400e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10044010:	230f      	movs	r3, #15
10044012:	18fb      	adds	r3, r7, r3
10044014:	2200      	movs	r2, #0
10044016:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10044018:	4b1d      	ldr	r3, [pc, #116]	@ (10044090 <HAL_InitTick+0x88>)
1004401a:	781b      	ldrb	r3, [r3, #0]
1004401c:	2b00      	cmp	r3, #0
1004401e:	d02c      	beq.n	1004407a <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10044020:	f003 fdc2 	bl	10047ba8 <HAL_RCC_GetSysClockFreq>
10044024:	0004      	movs	r4, r0
10044026:	4b1a      	ldr	r3, [pc, #104]	@ (10044090 <HAL_InitTick+0x88>)
10044028:	781b      	ldrb	r3, [r3, #0]
1004402a:	0019      	movs	r1, r3
1004402c:	23fa      	movs	r3, #250	@ 0xfa
1004402e:	0098      	lsls	r0, r3, #2
10044030:	f7fc f87a 	bl	10040128 <__udivsi3>
10044034:	0003      	movs	r3, r0
10044036:	0019      	movs	r1, r3
10044038:	0020      	movs	r0, r4
1004403a:	f7fc f875 	bl	10040128 <__udivsi3>
1004403e:	0003      	movs	r3, r0
10044040:	0018      	movs	r0, r3
10044042:	f000 f920 	bl	10044286 <HAL_SYSTICK_Config>
10044046:	1e03      	subs	r3, r0, #0
10044048:	d112      	bne.n	10044070 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004404a:	687b      	ldr	r3, [r7, #4]
1004404c:	2b03      	cmp	r3, #3
1004404e:	d80a      	bhi.n	10044066 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10044050:	6879      	ldr	r1, [r7, #4]
10044052:	2301      	movs	r3, #1
10044054:	425b      	negs	r3, r3
10044056:	2200      	movs	r2, #0
10044058:	0018      	movs	r0, r3
1004405a:	f000 f8ef 	bl	1004423c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004405e:	4b0d      	ldr	r3, [pc, #52]	@ (10044094 <HAL_InitTick+0x8c>)
10044060:	687a      	ldr	r2, [r7, #4]
10044062:	601a      	str	r2, [r3, #0]
10044064:	e00d      	b.n	10044082 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10044066:	230f      	movs	r3, #15
10044068:	18fb      	adds	r3, r7, r3
1004406a:	2201      	movs	r2, #1
1004406c:	701a      	strb	r2, [r3, #0]
1004406e:	e008      	b.n	10044082 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10044070:	230f      	movs	r3, #15
10044072:	18fb      	adds	r3, r7, r3
10044074:	2201      	movs	r2, #1
10044076:	701a      	strb	r2, [r3, #0]
10044078:	e003      	b.n	10044082 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004407a:	230f      	movs	r3, #15
1004407c:	18fb      	adds	r3, r7, r3
1004407e:	2201      	movs	r2, #1
10044080:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10044082:	230f      	movs	r3, #15
10044084:	18fb      	adds	r3, r7, r3
10044086:	781b      	ldrb	r3, [r3, #0]
}
10044088:	0018      	movs	r0, r3
1004408a:	46bd      	mov	sp, r7
1004408c:	b005      	add	sp, #20
1004408e:	bd90      	pop	{r4, r7, pc}
10044090:	20000da0 	.word	0x20000da0
10044094:	20000d9c 	.word	0x20000d9c

10044098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10044098:	b580      	push	{r7, lr}
1004409a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1004409c:	4b05      	ldr	r3, [pc, #20]	@ (100440b4 <HAL_IncTick+0x1c>)
1004409e:	781b      	ldrb	r3, [r3, #0]
100440a0:	001a      	movs	r2, r3
100440a2:	4b05      	ldr	r3, [pc, #20]	@ (100440b8 <HAL_IncTick+0x20>)
100440a4:	681b      	ldr	r3, [r3, #0]
100440a6:	18d2      	adds	r2, r2, r3
100440a8:	4b03      	ldr	r3, [pc, #12]	@ (100440b8 <HAL_IncTick+0x20>)
100440aa:	601a      	str	r2, [r3, #0]
}
100440ac:	46c0      	nop			@ (mov r8, r8)
100440ae:	46bd      	mov	sp, r7
100440b0:	bd80      	pop	{r7, pc}
100440b2:	46c0      	nop			@ (mov r8, r8)
100440b4:	20000da0 	.word	0x20000da0
100440b8:	20000b44 	.word	0x20000b44

100440bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100440bc:	b580      	push	{r7, lr}
100440be:	af00      	add	r7, sp, #0
  return uwTick;
100440c0:	4b02      	ldr	r3, [pc, #8]	@ (100440cc <HAL_GetTick+0x10>)
100440c2:	681b      	ldr	r3, [r3, #0]
}
100440c4:	0018      	movs	r0, r3
100440c6:	46bd      	mov	sp, r7
100440c8:	bd80      	pop	{r7, pc}
100440ca:	46c0      	nop			@ (mov r8, r8)
100440cc:	20000b44 	.word	0x20000b44

100440d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100440d0:	b580      	push	{r7, lr}
100440d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
100440d4:	4b02      	ldr	r3, [pc, #8]	@ (100440e0 <HAL_GetTickPrio+0x10>)
100440d6:	681b      	ldr	r3, [r3, #0]
}
100440d8:	0018      	movs	r0, r3
100440da:	46bd      	mov	sp, r7
100440dc:	bd80      	pop	{r7, pc}
100440de:	46c0      	nop			@ (mov r8, r8)
100440e0:	20000d9c 	.word	0x20000d9c

100440e4 <__NVIC_EnableIRQ>:
{
100440e4:	b580      	push	{r7, lr}
100440e6:	b082      	sub	sp, #8
100440e8:	af00      	add	r7, sp, #0
100440ea:	0002      	movs	r2, r0
100440ec:	1dfb      	adds	r3, r7, #7
100440ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100440f0:	1dfb      	adds	r3, r7, #7
100440f2:	781b      	ldrb	r3, [r3, #0]
100440f4:	2b7f      	cmp	r3, #127	@ 0x7f
100440f6:	d809      	bhi.n	1004410c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100440f8:	1dfb      	adds	r3, r7, #7
100440fa:	781b      	ldrb	r3, [r3, #0]
100440fc:	001a      	movs	r2, r3
100440fe:	231f      	movs	r3, #31
10044100:	401a      	ands	r2, r3
10044102:	4b04      	ldr	r3, [pc, #16]	@ (10044114 <__NVIC_EnableIRQ+0x30>)
10044104:	2101      	movs	r1, #1
10044106:	4091      	lsls	r1, r2
10044108:	000a      	movs	r2, r1
1004410a:	601a      	str	r2, [r3, #0]
}
1004410c:	46c0      	nop			@ (mov r8, r8)
1004410e:	46bd      	mov	sp, r7
10044110:	b002      	add	sp, #8
10044112:	bd80      	pop	{r7, pc}
10044114:	e000e100 	.word	0xe000e100

10044118 <__NVIC_SetPriority>:
{
10044118:	b590      	push	{r4, r7, lr}
1004411a:	b083      	sub	sp, #12
1004411c:	af00      	add	r7, sp, #0
1004411e:	0002      	movs	r2, r0
10044120:	6039      	str	r1, [r7, #0]
10044122:	1dfb      	adds	r3, r7, #7
10044124:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044126:	1dfb      	adds	r3, r7, #7
10044128:	781b      	ldrb	r3, [r3, #0]
1004412a:	2b7f      	cmp	r3, #127	@ 0x7f
1004412c:	d828      	bhi.n	10044180 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004412e:	4a2f      	ldr	r2, [pc, #188]	@ (100441ec <__NVIC_SetPriority+0xd4>)
10044130:	1dfb      	adds	r3, r7, #7
10044132:	781b      	ldrb	r3, [r3, #0]
10044134:	b25b      	sxtb	r3, r3
10044136:	089b      	lsrs	r3, r3, #2
10044138:	33c0      	adds	r3, #192	@ 0xc0
1004413a:	009b      	lsls	r3, r3, #2
1004413c:	589b      	ldr	r3, [r3, r2]
1004413e:	1dfa      	adds	r2, r7, #7
10044140:	7812      	ldrb	r2, [r2, #0]
10044142:	0011      	movs	r1, r2
10044144:	2203      	movs	r2, #3
10044146:	400a      	ands	r2, r1
10044148:	00d2      	lsls	r2, r2, #3
1004414a:	21ff      	movs	r1, #255	@ 0xff
1004414c:	4091      	lsls	r1, r2
1004414e:	000a      	movs	r2, r1
10044150:	43d2      	mvns	r2, r2
10044152:	401a      	ands	r2, r3
10044154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044156:	683b      	ldr	r3, [r7, #0]
10044158:	019b      	lsls	r3, r3, #6
1004415a:	22ff      	movs	r2, #255	@ 0xff
1004415c:	401a      	ands	r2, r3
1004415e:	1dfb      	adds	r3, r7, #7
10044160:	781b      	ldrb	r3, [r3, #0]
10044162:	0018      	movs	r0, r3
10044164:	2303      	movs	r3, #3
10044166:	4003      	ands	r3, r0
10044168:	00db      	lsls	r3, r3, #3
1004416a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004416c:	481f      	ldr	r0, [pc, #124]	@ (100441ec <__NVIC_SetPriority+0xd4>)
1004416e:	1dfb      	adds	r3, r7, #7
10044170:	781b      	ldrb	r3, [r3, #0]
10044172:	b25b      	sxtb	r3, r3
10044174:	089b      	lsrs	r3, r3, #2
10044176:	430a      	orrs	r2, r1
10044178:	33c0      	adds	r3, #192	@ 0xc0
1004417a:	009b      	lsls	r3, r3, #2
1004417c:	501a      	str	r2, [r3, r0]
}
1004417e:	e031      	b.n	100441e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044180:	4a1b      	ldr	r2, [pc, #108]	@ (100441f0 <__NVIC_SetPriority+0xd8>)
10044182:	1dfb      	adds	r3, r7, #7
10044184:	781b      	ldrb	r3, [r3, #0]
10044186:	0019      	movs	r1, r3
10044188:	230f      	movs	r3, #15
1004418a:	400b      	ands	r3, r1
1004418c:	3b08      	subs	r3, #8
1004418e:	089b      	lsrs	r3, r3, #2
10044190:	3306      	adds	r3, #6
10044192:	009b      	lsls	r3, r3, #2
10044194:	18d3      	adds	r3, r2, r3
10044196:	3304      	adds	r3, #4
10044198:	681b      	ldr	r3, [r3, #0]
1004419a:	1dfa      	adds	r2, r7, #7
1004419c:	7812      	ldrb	r2, [r2, #0]
1004419e:	0011      	movs	r1, r2
100441a0:	2203      	movs	r2, #3
100441a2:	400a      	ands	r2, r1
100441a4:	00d2      	lsls	r2, r2, #3
100441a6:	21ff      	movs	r1, #255	@ 0xff
100441a8:	4091      	lsls	r1, r2
100441aa:	000a      	movs	r2, r1
100441ac:	43d2      	mvns	r2, r2
100441ae:	401a      	ands	r2, r3
100441b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100441b2:	683b      	ldr	r3, [r7, #0]
100441b4:	019b      	lsls	r3, r3, #6
100441b6:	22ff      	movs	r2, #255	@ 0xff
100441b8:	401a      	ands	r2, r3
100441ba:	1dfb      	adds	r3, r7, #7
100441bc:	781b      	ldrb	r3, [r3, #0]
100441be:	0018      	movs	r0, r3
100441c0:	2303      	movs	r3, #3
100441c2:	4003      	ands	r3, r0
100441c4:	00db      	lsls	r3, r3, #3
100441c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100441c8:	4809      	ldr	r0, [pc, #36]	@ (100441f0 <__NVIC_SetPriority+0xd8>)
100441ca:	1dfb      	adds	r3, r7, #7
100441cc:	781b      	ldrb	r3, [r3, #0]
100441ce:	001c      	movs	r4, r3
100441d0:	230f      	movs	r3, #15
100441d2:	4023      	ands	r3, r4
100441d4:	3b08      	subs	r3, #8
100441d6:	089b      	lsrs	r3, r3, #2
100441d8:	430a      	orrs	r2, r1
100441da:	3306      	adds	r3, #6
100441dc:	009b      	lsls	r3, r3, #2
100441de:	18c3      	adds	r3, r0, r3
100441e0:	3304      	adds	r3, #4
100441e2:	601a      	str	r2, [r3, #0]
}
100441e4:	46c0      	nop			@ (mov r8, r8)
100441e6:	46bd      	mov	sp, r7
100441e8:	b003      	add	sp, #12
100441ea:	bd90      	pop	{r4, r7, pc}
100441ec:	e000e100 	.word	0xe000e100
100441f0:	e000ed00 	.word	0xe000ed00

100441f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100441f4:	b580      	push	{r7, lr}
100441f6:	b082      	sub	sp, #8
100441f8:	af00      	add	r7, sp, #0
100441fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100441fc:	687b      	ldr	r3, [r7, #4]
100441fe:	1e5a      	subs	r2, r3, #1
10044200:	2380      	movs	r3, #128	@ 0x80
10044202:	045b      	lsls	r3, r3, #17
10044204:	429a      	cmp	r2, r3
10044206:	d301      	bcc.n	1004420c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10044208:	2301      	movs	r3, #1
1004420a:	e010      	b.n	1004422e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1004420c:	4b0a      	ldr	r3, [pc, #40]	@ (10044238 <SysTick_Config+0x44>)
1004420e:	687a      	ldr	r2, [r7, #4]
10044210:	3a01      	subs	r2, #1
10044212:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044214:	2301      	movs	r3, #1
10044216:	425b      	negs	r3, r3
10044218:	2103      	movs	r1, #3
1004421a:	0018      	movs	r0, r3
1004421c:	f7ff ff7c 	bl	10044118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10044220:	4b05      	ldr	r3, [pc, #20]	@ (10044238 <SysTick_Config+0x44>)
10044222:	2200      	movs	r2, #0
10044224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10044226:	4b04      	ldr	r3, [pc, #16]	@ (10044238 <SysTick_Config+0x44>)
10044228:	2207      	movs	r2, #7
1004422a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1004422c:	2300      	movs	r3, #0
}
1004422e:	0018      	movs	r0, r3
10044230:	46bd      	mov	sp, r7
10044232:	b002      	add	sp, #8
10044234:	bd80      	pop	{r7, pc}
10044236:	46c0      	nop			@ (mov r8, r8)
10044238:	e000e010 	.word	0xe000e010

1004423c <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1004423c:	b580      	push	{r7, lr}
1004423e:	b084      	sub	sp, #16
10044240:	af00      	add	r7, sp, #0
10044242:	60b9      	str	r1, [r7, #8]
10044244:	607a      	str	r2, [r7, #4]
10044246:	210f      	movs	r1, #15
10044248:	187b      	adds	r3, r7, r1
1004424a:	1c02      	adds	r2, r0, #0
1004424c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004424e:	68ba      	ldr	r2, [r7, #8]
10044250:	187b      	adds	r3, r7, r1
10044252:	781b      	ldrb	r3, [r3, #0]
10044254:	b25b      	sxtb	r3, r3
10044256:	0011      	movs	r1, r2
10044258:	0018      	movs	r0, r3
1004425a:	f7ff ff5d 	bl	10044118 <__NVIC_SetPriority>
}
1004425e:	46c0      	nop			@ (mov r8, r8)
10044260:	46bd      	mov	sp, r7
10044262:	b004      	add	sp, #16
10044264:	bd80      	pop	{r7, pc}

10044266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10044266:	b580      	push	{r7, lr}
10044268:	b082      	sub	sp, #8
1004426a:	af00      	add	r7, sp, #0
1004426c:	0002      	movs	r2, r0
1004426e:	1dfb      	adds	r3, r7, #7
10044270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10044272:	1dfb      	adds	r3, r7, #7
10044274:	781b      	ldrb	r3, [r3, #0]
10044276:	b25b      	sxtb	r3, r3
10044278:	0018      	movs	r0, r3
1004427a:	f7ff ff33 	bl	100440e4 <__NVIC_EnableIRQ>
}
1004427e:	46c0      	nop			@ (mov r8, r8)
10044280:	46bd      	mov	sp, r7
10044282:	b002      	add	sp, #8
10044284:	bd80      	pop	{r7, pc}

10044286 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10044286:	b580      	push	{r7, lr}
10044288:	b082      	sub	sp, #8
1004428a:	af00      	add	r7, sp, #0
1004428c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1004428e:	687b      	ldr	r3, [r7, #4]
10044290:	0018      	movs	r0, r3
10044292:	f7ff ffaf 	bl	100441f4 <SysTick_Config>
10044296:	0003      	movs	r3, r0
}
10044298:	0018      	movs	r0, r3
1004429a:	46bd      	mov	sp, r7
1004429c:	b002      	add	sp, #8
1004429e:	bd80      	pop	{r7, pc}

100442a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
100442a0:	b580      	push	{r7, lr}
100442a2:	b082      	sub	sp, #8
100442a4:	af00      	add	r7, sp, #0
100442a6:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
100442a8:	687b      	ldr	r3, [r7, #4]
100442aa:	2b00      	cmp	r3, #0
100442ac:	d101      	bne.n	100442b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
100442ae:	2301      	movs	r3, #1
100442b0:	e031      	b.n	10044316 <HAL_DMA_Abort+0x76>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
100442b2:	687b      	ldr	r3, [r7, #4]
100442b4:	2225      	movs	r2, #37	@ 0x25
100442b6:	5c9b      	ldrb	r3, [r3, r2]
100442b8:	b2db      	uxtb	r3, r3
100442ba:	2b02      	cmp	r3, #2
100442bc:	d008      	beq.n	100442d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
100442be:	687b      	ldr	r3, [r7, #4]
100442c0:	2204      	movs	r2, #4
100442c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
100442c4:	687b      	ldr	r3, [r7, #4]
100442c6:	2224      	movs	r2, #36	@ 0x24
100442c8:	2100      	movs	r1, #0
100442ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
100442cc:	2301      	movs	r3, #1
100442ce:	e022      	b.n	10044316 <HAL_DMA_Abort+0x76>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
100442d0:	687b      	ldr	r3, [r7, #4]
100442d2:	681b      	ldr	r3, [r3, #0]
100442d4:	681a      	ldr	r2, [r3, #0]
100442d6:	687b      	ldr	r3, [r7, #4]
100442d8:	681b      	ldr	r3, [r3, #0]
100442da:	210e      	movs	r1, #14
100442dc:	438a      	bics	r2, r1
100442de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
100442e0:	687b      	ldr	r3, [r7, #4]
100442e2:	681b      	ldr	r3, [r3, #0]
100442e4:	681a      	ldr	r2, [r3, #0]
100442e6:	687b      	ldr	r3, [r7, #4]
100442e8:	681b      	ldr	r3, [r3, #0]
100442ea:	2101      	movs	r1, #1
100442ec:	438a      	bics	r2, r1
100442ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
100442f0:	687b      	ldr	r3, [r7, #4]
100442f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100442f4:	223c      	movs	r2, #60	@ 0x3c
100442f6:	401a      	ands	r2, r3
100442f8:	687b      	ldr	r3, [r7, #4]
100442fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100442fc:	2101      	movs	r1, #1
100442fe:	4091      	lsls	r1, r2
10044300:	000a      	movs	r2, r1
10044302:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10044304:	687b      	ldr	r3, [r7, #4]
10044306:	2225      	movs	r2, #37	@ 0x25
10044308:	2101      	movs	r1, #1
1004430a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004430c:	687b      	ldr	r3, [r7, #4]
1004430e:	2224      	movs	r2, #36	@ 0x24
10044310:	2100      	movs	r1, #0
10044312:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
10044314:	2300      	movs	r3, #0
}
10044316:	0018      	movs	r0, r3
10044318:	46bd      	mov	sp, r7
1004431a:	b002      	add	sp, #8
1004431c:	bd80      	pop	{r7, pc}

1004431e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
1004431e:	b580      	push	{r7, lr}
10044320:	b084      	sub	sp, #16
10044322:	af00      	add	r7, sp, #0
10044324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10044326:	210f      	movs	r1, #15
10044328:	187b      	adds	r3, r7, r1
1004432a:	2200      	movs	r2, #0
1004432c:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
1004432e:	687b      	ldr	r3, [r7, #4]
10044330:	2225      	movs	r2, #37	@ 0x25
10044332:	5c9b      	ldrb	r3, [r3, r2]
10044334:	b2db      	uxtb	r3, r3
10044336:	2b02      	cmp	r3, #2
10044338:	d006      	beq.n	10044348 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
1004433a:	687b      	ldr	r3, [r7, #4]
1004433c:	2204      	movs	r2, #4
1004433e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
10044340:	187b      	adds	r3, r7, r1
10044342:	2201      	movs	r2, #1
10044344:	701a      	strb	r2, [r3, #0]
10044346:	e02a      	b.n	1004439e <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10044348:	687b      	ldr	r3, [r7, #4]
1004434a:	681b      	ldr	r3, [r3, #0]
1004434c:	681a      	ldr	r2, [r3, #0]
1004434e:	687b      	ldr	r3, [r7, #4]
10044350:	681b      	ldr	r3, [r3, #0]
10044352:	210e      	movs	r1, #14
10044354:	438a      	bics	r2, r1
10044356:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10044358:	687b      	ldr	r3, [r7, #4]
1004435a:	681b      	ldr	r3, [r3, #0]
1004435c:	681a      	ldr	r2, [r3, #0]
1004435e:	687b      	ldr	r3, [r7, #4]
10044360:	681b      	ldr	r3, [r3, #0]
10044362:	2101      	movs	r1, #1
10044364:	438a      	bics	r2, r1
10044366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10044368:	687b      	ldr	r3, [r7, #4]
1004436a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004436c:	223c      	movs	r2, #60	@ 0x3c
1004436e:	401a      	ands	r2, r3
10044370:	687b      	ldr	r3, [r7, #4]
10044372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10044374:	2101      	movs	r1, #1
10044376:	4091      	lsls	r1, r2
10044378:	000a      	movs	r2, r1
1004437a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
1004437c:	687b      	ldr	r3, [r7, #4]
1004437e:	2225      	movs	r2, #37	@ 0x25
10044380:	2101      	movs	r1, #1
10044382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10044384:	687b      	ldr	r3, [r7, #4]
10044386:	2224      	movs	r2, #36	@ 0x24
10044388:	2100      	movs	r1, #0
1004438a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
1004438c:	687b      	ldr	r3, [r7, #4]
1004438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10044390:	2b00      	cmp	r3, #0
10044392:	d004      	beq.n	1004439e <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
10044394:	687b      	ldr	r3, [r7, #4]
10044396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10044398:	687a      	ldr	r2, [r7, #4]
1004439a:	0010      	movs	r0, r2
1004439c:	4798      	blx	r3
    }
  }
  return status;
1004439e:	230f      	movs	r3, #15
100443a0:	18fb      	adds	r3, r7, r3
100443a2:	781b      	ldrb	r3, [r3, #0]
}
100443a4:	0018      	movs	r0, r3
100443a6:	46bd      	mov	sp, r7
100443a8:	b004      	add	sp, #16
100443aa:	bd80      	pop	{r7, pc}

100443ac <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
100443ac:	b580      	push	{r7, lr}
100443ae:	b082      	sub	sp, #8
100443b0:	af00      	add	r7, sp, #0
100443b2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
100443b4:	687b      	ldr	r3, [r7, #4]
100443b6:	2225      	movs	r2, #37	@ 0x25
100443b8:	5c9b      	ldrb	r3, [r3, r2]
100443ba:	b2db      	uxtb	r3, r3
}
100443bc:	0018      	movs	r0, r3
100443be:	46bd      	mov	sp, r7
100443c0:	b002      	add	sp, #8
100443c2:	bd80      	pop	{r7, pc}

100443c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100443c4:	b580      	push	{r7, lr}
100443c6:	b086      	sub	sp, #24
100443c8:	af00      	add	r7, sp, #0
100443ca:	6078      	str	r0, [r7, #4]
100443cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100443ce:	2300      	movs	r3, #0
100443d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100443d2:	e194      	b.n	100446fe <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100443d4:	683b      	ldr	r3, [r7, #0]
100443d6:	681b      	ldr	r3, [r3, #0]
100443d8:	2101      	movs	r1, #1
100443da:	697a      	ldr	r2, [r7, #20]
100443dc:	4091      	lsls	r1, r2
100443de:	000a      	movs	r2, r1
100443e0:	4013      	ands	r3, r2
100443e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100443e4:	68fb      	ldr	r3, [r7, #12]
100443e6:	2b00      	cmp	r3, #0
100443e8:	d100      	bne.n	100443ec <HAL_GPIO_Init+0x28>
100443ea:	e185      	b.n	100446f8 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
100443ec:	683b      	ldr	r3, [r7, #0]
100443ee:	685b      	ldr	r3, [r3, #4]
100443f0:	2203      	movs	r2, #3
100443f2:	4013      	ands	r3, r2
100443f4:	2b01      	cmp	r3, #1
100443f6:	d005      	beq.n	10044404 <HAL_GPIO_Init+0x40>
100443f8:	683b      	ldr	r3, [r7, #0]
100443fa:	685b      	ldr	r3, [r3, #4]
100443fc:	2203      	movs	r2, #3
100443fe:	4013      	ands	r3, r2
10044400:	2b02      	cmp	r3, #2
10044402:	d130      	bne.n	10044466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10044404:	687b      	ldr	r3, [r7, #4]
10044406:	689b      	ldr	r3, [r3, #8]
10044408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004440a:	697b      	ldr	r3, [r7, #20]
1004440c:	005b      	lsls	r3, r3, #1
1004440e:	2203      	movs	r2, #3
10044410:	409a      	lsls	r2, r3
10044412:	0013      	movs	r3, r2
10044414:	43da      	mvns	r2, r3
10044416:	693b      	ldr	r3, [r7, #16]
10044418:	4013      	ands	r3, r2
1004441a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004441c:	683b      	ldr	r3, [r7, #0]
1004441e:	68da      	ldr	r2, [r3, #12]
10044420:	697b      	ldr	r3, [r7, #20]
10044422:	005b      	lsls	r3, r3, #1
10044424:	409a      	lsls	r2, r3
10044426:	0013      	movs	r3, r2
10044428:	693a      	ldr	r2, [r7, #16]
1004442a:	4313      	orrs	r3, r2
1004442c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004442e:	687b      	ldr	r3, [r7, #4]
10044430:	693a      	ldr	r2, [r7, #16]
10044432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10044434:	687b      	ldr	r3, [r7, #4]
10044436:	685b      	ldr	r3, [r3, #4]
10044438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004443a:	2201      	movs	r2, #1
1004443c:	697b      	ldr	r3, [r7, #20]
1004443e:	409a      	lsls	r2, r3
10044440:	0013      	movs	r3, r2
10044442:	43da      	mvns	r2, r3
10044444:	693b      	ldr	r3, [r7, #16]
10044446:	4013      	ands	r3, r2
10044448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004444a:	683b      	ldr	r3, [r7, #0]
1004444c:	685b      	ldr	r3, [r3, #4]
1004444e:	091b      	lsrs	r3, r3, #4
10044450:	2201      	movs	r2, #1
10044452:	401a      	ands	r2, r3
10044454:	697b      	ldr	r3, [r7, #20]
10044456:	409a      	lsls	r2, r3
10044458:	0013      	movs	r3, r2
1004445a:	693a      	ldr	r2, [r7, #16]
1004445c:	4313      	orrs	r3, r2
1004445e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10044460:	687b      	ldr	r3, [r7, #4]
10044462:	693a      	ldr	r2, [r7, #16]
10044464:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10044466:	683b      	ldr	r3, [r7, #0]
10044468:	685b      	ldr	r3, [r3, #4]
1004446a:	2203      	movs	r2, #3
1004446c:	4013      	ands	r3, r2
1004446e:	2b03      	cmp	r3, #3
10044470:	d017      	beq.n	100444a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10044472:	687b      	ldr	r3, [r7, #4]
10044474:	68db      	ldr	r3, [r3, #12]
10044476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10044478:	697b      	ldr	r3, [r7, #20]
1004447a:	005b      	lsls	r3, r3, #1
1004447c:	2203      	movs	r2, #3
1004447e:	409a      	lsls	r2, r3
10044480:	0013      	movs	r3, r2
10044482:	43da      	mvns	r2, r3
10044484:	693b      	ldr	r3, [r7, #16]
10044486:	4013      	ands	r3, r2
10044488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004448a:	683b      	ldr	r3, [r7, #0]
1004448c:	689a      	ldr	r2, [r3, #8]
1004448e:	697b      	ldr	r3, [r7, #20]
10044490:	005b      	lsls	r3, r3, #1
10044492:	409a      	lsls	r2, r3
10044494:	0013      	movs	r3, r2
10044496:	693a      	ldr	r2, [r7, #16]
10044498:	4313      	orrs	r3, r2
1004449a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
1004449c:	687b      	ldr	r3, [r7, #4]
1004449e:	693a      	ldr	r2, [r7, #16]
100444a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100444a2:	683b      	ldr	r3, [r7, #0]
100444a4:	685b      	ldr	r3, [r3, #4]
100444a6:	2203      	movs	r2, #3
100444a8:	4013      	ands	r3, r2
100444aa:	2b02      	cmp	r3, #2
100444ac:	d123      	bne.n	100444f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100444ae:	697b      	ldr	r3, [r7, #20]
100444b0:	08da      	lsrs	r2, r3, #3
100444b2:	687b      	ldr	r3, [r7, #4]
100444b4:	3208      	adds	r2, #8
100444b6:	0092      	lsls	r2, r2, #2
100444b8:	58d3      	ldr	r3, [r2, r3]
100444ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100444bc:	697b      	ldr	r3, [r7, #20]
100444be:	2207      	movs	r2, #7
100444c0:	4013      	ands	r3, r2
100444c2:	009b      	lsls	r3, r3, #2
100444c4:	220f      	movs	r2, #15
100444c6:	409a      	lsls	r2, r3
100444c8:	0013      	movs	r3, r2
100444ca:	43da      	mvns	r2, r3
100444cc:	693b      	ldr	r3, [r7, #16]
100444ce:	4013      	ands	r3, r2
100444d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100444d2:	683b      	ldr	r3, [r7, #0]
100444d4:	691a      	ldr	r2, [r3, #16]
100444d6:	697b      	ldr	r3, [r7, #20]
100444d8:	2107      	movs	r1, #7
100444da:	400b      	ands	r3, r1
100444dc:	009b      	lsls	r3, r3, #2
100444de:	409a      	lsls	r2, r3
100444e0:	0013      	movs	r3, r2
100444e2:	693a      	ldr	r2, [r7, #16]
100444e4:	4313      	orrs	r3, r2
100444e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100444e8:	697b      	ldr	r3, [r7, #20]
100444ea:	08da      	lsrs	r2, r3, #3
100444ec:	687b      	ldr	r3, [r7, #4]
100444ee:	3208      	adds	r2, #8
100444f0:	0092      	lsls	r2, r2, #2
100444f2:	6939      	ldr	r1, [r7, #16]
100444f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100444f6:	687b      	ldr	r3, [r7, #4]
100444f8:	681b      	ldr	r3, [r3, #0]
100444fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100444fc:	697b      	ldr	r3, [r7, #20]
100444fe:	005b      	lsls	r3, r3, #1
10044500:	2203      	movs	r2, #3
10044502:	409a      	lsls	r2, r3
10044504:	0013      	movs	r3, r2
10044506:	43da      	mvns	r2, r3
10044508:	693b      	ldr	r3, [r7, #16]
1004450a:	4013      	ands	r3, r2
1004450c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004450e:	683b      	ldr	r3, [r7, #0]
10044510:	685b      	ldr	r3, [r3, #4]
10044512:	2203      	movs	r2, #3
10044514:	401a      	ands	r2, r3
10044516:	697b      	ldr	r3, [r7, #20]
10044518:	005b      	lsls	r3, r3, #1
1004451a:	409a      	lsls	r2, r3
1004451c:	0013      	movs	r3, r2
1004451e:	693a      	ldr	r2, [r7, #16]
10044520:	4313      	orrs	r3, r2
10044522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10044524:	687b      	ldr	r3, [r7, #4]
10044526:	693a      	ldr	r2, [r7, #16]
10044528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004452a:	683b      	ldr	r3, [r7, #0]
1004452c:	685a      	ldr	r2, [r3, #4]
1004452e:	23c0      	movs	r3, #192	@ 0xc0
10044530:	029b      	lsls	r3, r3, #10
10044532:	4013      	ands	r3, r2
10044534:	d100      	bne.n	10044538 <HAL_GPIO_Init+0x174>
10044536:	e0df      	b.n	100446f8 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10044538:	683b      	ldr	r3, [r7, #0]
1004453a:	685a      	ldr	r2, [r3, #4]
1004453c:	2380      	movs	r3, #128	@ 0x80
1004453e:	02db      	lsls	r3, r3, #11
10044540:	4013      	ands	r3, r2
10044542:	d031      	beq.n	100445a8 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10044544:	2380      	movs	r3, #128	@ 0x80
10044546:	05db      	lsls	r3, r3, #23
10044548:	68db      	ldr	r3, [r3, #12]
1004454a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004454c:	687a      	ldr	r2, [r7, #4]
1004454e:	2390      	movs	r3, #144	@ 0x90
10044550:	05db      	lsls	r3, r3, #23
10044552:	429a      	cmp	r2, r3
10044554:	d111      	bne.n	1004457a <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10044556:	2201      	movs	r2, #1
10044558:	697b      	ldr	r3, [r7, #20]
1004455a:	409a      	lsls	r2, r3
1004455c:	0013      	movs	r3, r2
1004455e:	43db      	mvns	r3, r3
10044560:	001a      	movs	r2, r3
10044562:	693b      	ldr	r3, [r7, #16]
10044564:	4013      	ands	r3, r2
10044566:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044568:	2201      	movs	r2, #1
1004456a:	697b      	ldr	r3, [r7, #20]
1004456c:	409a      	lsls	r2, r3
1004456e:	0013      	movs	r3, r2
10044570:	001a      	movs	r2, r3
10044572:	693b      	ldr	r3, [r7, #16]
10044574:	4313      	orrs	r3, r2
10044576:	613b      	str	r3, [r7, #16]
10044578:	e012      	b.n	100445a0 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004457a:	2201      	movs	r2, #1
1004457c:	697b      	ldr	r3, [r7, #20]
1004457e:	409a      	lsls	r2, r3
10044580:	0013      	movs	r3, r2
10044582:	041b      	lsls	r3, r3, #16
10044584:	43db      	mvns	r3, r3
10044586:	001a      	movs	r2, r3
10044588:	693b      	ldr	r3, [r7, #16]
1004458a:	4013      	ands	r3, r2
1004458c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004458e:	2201      	movs	r2, #1
10044590:	697b      	ldr	r3, [r7, #20]
10044592:	409a      	lsls	r2, r3
10044594:	0013      	movs	r3, r2
10044596:	041b      	lsls	r3, r3, #16
10044598:	001a      	movs	r2, r3
1004459a:	693b      	ldr	r3, [r7, #16]
1004459c:	4313      	orrs	r3, r2
1004459e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
100445a0:	2380      	movs	r3, #128	@ 0x80
100445a2:	05db      	lsls	r3, r3, #23
100445a4:	693a      	ldr	r2, [r7, #16]
100445a6:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100445a8:	683b      	ldr	r3, [r7, #0]
100445aa:	685a      	ldr	r2, [r3, #4]
100445ac:	2380      	movs	r3, #128	@ 0x80
100445ae:	035b      	lsls	r3, r3, #13
100445b0:	4013      	ands	r3, r2
100445b2:	d031      	beq.n	10044618 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
100445b4:	2380      	movs	r3, #128	@ 0x80
100445b6:	05db      	lsls	r3, r3, #23
100445b8:	691b      	ldr	r3, [r3, #16]
100445ba:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100445bc:	687a      	ldr	r2, [r7, #4]
100445be:	2390      	movs	r3, #144	@ 0x90
100445c0:	05db      	lsls	r3, r3, #23
100445c2:	429a      	cmp	r2, r3
100445c4:	d111      	bne.n	100445ea <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
100445c6:	2201      	movs	r2, #1
100445c8:	697b      	ldr	r3, [r7, #20]
100445ca:	409a      	lsls	r2, r3
100445cc:	0013      	movs	r3, r2
100445ce:	43db      	mvns	r3, r3
100445d0:	001a      	movs	r2, r3
100445d2:	693b      	ldr	r3, [r7, #16]
100445d4:	4013      	ands	r3, r2
100445d6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100445d8:	2201      	movs	r2, #1
100445da:	697b      	ldr	r3, [r7, #20]
100445dc:	409a      	lsls	r2, r3
100445de:	0013      	movs	r3, r2
100445e0:	001a      	movs	r2, r3
100445e2:	693b      	ldr	r3, [r7, #16]
100445e4:	4313      	orrs	r3, r2
100445e6:	613b      	str	r3, [r7, #16]
100445e8:	e012      	b.n	10044610 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100445ea:	2201      	movs	r2, #1
100445ec:	697b      	ldr	r3, [r7, #20]
100445ee:	409a      	lsls	r2, r3
100445f0:	0013      	movs	r3, r2
100445f2:	041b      	lsls	r3, r3, #16
100445f4:	43db      	mvns	r3, r3
100445f6:	001a      	movs	r2, r3
100445f8:	693b      	ldr	r3, [r7, #16]
100445fa:	4013      	ands	r3, r2
100445fc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100445fe:	2201      	movs	r2, #1
10044600:	697b      	ldr	r3, [r7, #20]
10044602:	409a      	lsls	r2, r3
10044604:	0013      	movs	r3, r2
10044606:	041b      	lsls	r3, r3, #16
10044608:	001a      	movs	r2, r3
1004460a:	693b      	ldr	r3, [r7, #16]
1004460c:	4313      	orrs	r3, r2
1004460e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10044610:	2380      	movs	r3, #128	@ 0x80
10044612:	05db      	lsls	r3, r3, #23
10044614:	693a      	ldr	r2, [r7, #16]
10044616:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10044618:	683b      	ldr	r3, [r7, #0]
1004461a:	685a      	ldr	r2, [r3, #4]
1004461c:	2380      	movs	r3, #128	@ 0x80
1004461e:	03db      	lsls	r3, r3, #15
10044620:	4013      	ands	r3, r2
10044622:	d031      	beq.n	10044688 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10044624:	2380      	movs	r3, #128	@ 0x80
10044626:	05db      	lsls	r3, r3, #23
10044628:	695b      	ldr	r3, [r3, #20]
1004462a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004462c:	687a      	ldr	r2, [r7, #4]
1004462e:	2390      	movs	r3, #144	@ 0x90
10044630:	05db      	lsls	r3, r3, #23
10044632:	429a      	cmp	r2, r3
10044634:	d111      	bne.n	1004465a <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10044636:	2201      	movs	r2, #1
10044638:	697b      	ldr	r3, [r7, #20]
1004463a:	409a      	lsls	r2, r3
1004463c:	0013      	movs	r3, r2
1004463e:	43db      	mvns	r3, r3
10044640:	001a      	movs	r2, r3
10044642:	693b      	ldr	r3, [r7, #16]
10044644:	4013      	ands	r3, r2
10044646:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044648:	2201      	movs	r2, #1
1004464a:	697b      	ldr	r3, [r7, #20]
1004464c:	409a      	lsls	r2, r3
1004464e:	0013      	movs	r3, r2
10044650:	001a      	movs	r2, r3
10044652:	693b      	ldr	r3, [r7, #16]
10044654:	4313      	orrs	r3, r2
10044656:	613b      	str	r3, [r7, #16]
10044658:	e012      	b.n	10044680 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004465a:	2201      	movs	r2, #1
1004465c:	697b      	ldr	r3, [r7, #20]
1004465e:	409a      	lsls	r2, r3
10044660:	0013      	movs	r3, r2
10044662:	041b      	lsls	r3, r3, #16
10044664:	43db      	mvns	r3, r3
10044666:	001a      	movs	r2, r3
10044668:	693b      	ldr	r3, [r7, #16]
1004466a:	4013      	ands	r3, r2
1004466c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004466e:	2201      	movs	r2, #1
10044670:	697b      	ldr	r3, [r7, #20]
10044672:	409a      	lsls	r2, r3
10044674:	0013      	movs	r3, r2
10044676:	041b      	lsls	r3, r3, #16
10044678:	001a      	movs	r2, r3
1004467a:	693b      	ldr	r3, [r7, #16]
1004467c:	4313      	orrs	r3, r2
1004467e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10044680:	2380      	movs	r3, #128	@ 0x80
10044682:	05db      	lsls	r3, r3, #23
10044684:	693a      	ldr	r2, [r7, #16]
10044686:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10044688:	683b      	ldr	r3, [r7, #0]
1004468a:	685a      	ldr	r2, [r3, #4]
1004468c:	2380      	movs	r3, #128	@ 0x80
1004468e:	025b      	lsls	r3, r3, #9
10044690:	4013      	ands	r3, r2
10044692:	d031      	beq.n	100446f8 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10044694:	2380      	movs	r3, #128	@ 0x80
10044696:	05db      	lsls	r3, r3, #23
10044698:	699b      	ldr	r3, [r3, #24]
1004469a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004469c:	687a      	ldr	r2, [r7, #4]
1004469e:	2390      	movs	r3, #144	@ 0x90
100446a0:	05db      	lsls	r3, r3, #23
100446a2:	429a      	cmp	r2, r3
100446a4:	d111      	bne.n	100446ca <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
100446a6:	2201      	movs	r2, #1
100446a8:	697b      	ldr	r3, [r7, #20]
100446aa:	409a      	lsls	r2, r3
100446ac:	0013      	movs	r3, r2
100446ae:	43db      	mvns	r3, r3
100446b0:	001a      	movs	r2, r3
100446b2:	693b      	ldr	r3, [r7, #16]
100446b4:	4013      	ands	r3, r2
100446b6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100446b8:	2201      	movs	r2, #1
100446ba:	697b      	ldr	r3, [r7, #20]
100446bc:	409a      	lsls	r2, r3
100446be:	0013      	movs	r3, r2
100446c0:	001a      	movs	r2, r3
100446c2:	693b      	ldr	r3, [r7, #16]
100446c4:	4313      	orrs	r3, r2
100446c6:	613b      	str	r3, [r7, #16]
100446c8:	e012      	b.n	100446f0 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100446ca:	2201      	movs	r2, #1
100446cc:	697b      	ldr	r3, [r7, #20]
100446ce:	409a      	lsls	r2, r3
100446d0:	0013      	movs	r3, r2
100446d2:	041b      	lsls	r3, r3, #16
100446d4:	43db      	mvns	r3, r3
100446d6:	001a      	movs	r2, r3
100446d8:	693b      	ldr	r3, [r7, #16]
100446da:	4013      	ands	r3, r2
100446dc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100446de:	2201      	movs	r2, #1
100446e0:	697b      	ldr	r3, [r7, #20]
100446e2:	409a      	lsls	r2, r3
100446e4:	0013      	movs	r3, r2
100446e6:	041b      	lsls	r3, r3, #16
100446e8:	001a      	movs	r2, r3
100446ea:	693b      	ldr	r3, [r7, #16]
100446ec:	4313      	orrs	r3, r2
100446ee:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100446f0:	2380      	movs	r3, #128	@ 0x80
100446f2:	05db      	lsls	r3, r3, #23
100446f4:	693a      	ldr	r2, [r7, #16]
100446f6:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100446f8:	697b      	ldr	r3, [r7, #20]
100446fa:	3301      	adds	r3, #1
100446fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100446fe:	683b      	ldr	r3, [r7, #0]
10044700:	681a      	ldr	r2, [r3, #0]
10044702:	697b      	ldr	r3, [r7, #20]
10044704:	40da      	lsrs	r2, r3
10044706:	1e13      	subs	r3, r2, #0
10044708:	d000      	beq.n	1004470c <HAL_GPIO_Init+0x348>
1004470a:	e663      	b.n	100443d4 <HAL_GPIO_Init+0x10>
  }
}
1004470c:	46c0      	nop			@ (mov r8, r8)
1004470e:	46c0      	nop			@ (mov r8, r8)
10044710:	46bd      	mov	sp, r7
10044712:	b006      	add	sp, #24
10044714:	bd80      	pop	{r7, pc}

10044716 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10044716:	b580      	push	{r7, lr}
10044718:	b084      	sub	sp, #16
1004471a:	af00      	add	r7, sp, #0
1004471c:	6078      	str	r0, [r7, #4]
1004471e:	000a      	movs	r2, r1
10044720:	1cbb      	adds	r3, r7, #2
10044722:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10044724:	687b      	ldr	r3, [r7, #4]
10044726:	691b      	ldr	r3, [r3, #16]
10044728:	1cba      	adds	r2, r7, #2
1004472a:	8812      	ldrh	r2, [r2, #0]
1004472c:	4013      	ands	r3, r2
1004472e:	d004      	beq.n	1004473a <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10044730:	230f      	movs	r3, #15
10044732:	18fb      	adds	r3, r7, r3
10044734:	2201      	movs	r2, #1
10044736:	701a      	strb	r2, [r3, #0]
10044738:	e003      	b.n	10044742 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
1004473a:	230f      	movs	r3, #15
1004473c:	18fb      	adds	r3, r7, r3
1004473e:	2200      	movs	r2, #0
10044740:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10044742:	230f      	movs	r3, #15
10044744:	18fb      	adds	r3, r7, r3
10044746:	781b      	ldrb	r3, [r3, #0]
}
10044748:	0018      	movs	r0, r3
1004474a:	46bd      	mov	sp, r7
1004474c:	b004      	add	sp, #16
1004474e:	bd80      	pop	{r7, pc}

10044750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10044750:	b580      	push	{r7, lr}
10044752:	b082      	sub	sp, #8
10044754:	af00      	add	r7, sp, #0
10044756:	6078      	str	r0, [r7, #4]
10044758:	0008      	movs	r0, r1
1004475a:	0011      	movs	r1, r2
1004475c:	1cbb      	adds	r3, r7, #2
1004475e:	1c02      	adds	r2, r0, #0
10044760:	801a      	strh	r2, [r3, #0]
10044762:	1c7b      	adds	r3, r7, #1
10044764:	1c0a      	adds	r2, r1, #0
10044766:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10044768:	1c7b      	adds	r3, r7, #1
1004476a:	781b      	ldrb	r3, [r3, #0]
1004476c:	2b00      	cmp	r3, #0
1004476e:	d004      	beq.n	1004477a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10044770:	1cbb      	adds	r3, r7, #2
10044772:	881a      	ldrh	r2, [r3, #0]
10044774:	687b      	ldr	r3, [r7, #4]
10044776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10044778:	e003      	b.n	10044782 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
1004477a:	1cbb      	adds	r3, r7, #2
1004477c:	881a      	ldrh	r2, [r3, #0]
1004477e:	687b      	ldr	r3, [r7, #4]
10044780:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044782:	46c0      	nop			@ (mov r8, r8)
10044784:	46bd      	mov	sp, r7
10044786:	b002      	add	sp, #8
10044788:	bd80      	pop	{r7, pc}

1004478a <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral for STM32WB0x family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
1004478a:	b580      	push	{r7, lr}
1004478c:	b084      	sub	sp, #16
1004478e:	af00      	add	r7, sp, #0
10044790:	6078      	str	r0, [r7, #4]
10044792:	000a      	movs	r2, r1
10044794:	1cbb      	adds	r3, r7, #2
10044796:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
10044798:	687b      	ldr	r3, [r7, #4]
1004479a:	695b      	ldr	r3, [r3, #20]
1004479c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
1004479e:	1cbb      	adds	r3, r7, #2
100447a0:	881b      	ldrh	r3, [r3, #0]
100447a2:	68fa      	ldr	r2, [r7, #12]
100447a4:	4013      	ands	r3, r2
100447a6:	041a      	lsls	r2, r3, #16
100447a8:	68fb      	ldr	r3, [r7, #12]
100447aa:	43db      	mvns	r3, r3
100447ac:	1cb9      	adds	r1, r7, #2
100447ae:	8809      	ldrh	r1, [r1, #0]
100447b0:	400b      	ands	r3, r1
100447b2:	431a      	orrs	r2, r3
100447b4:	687b      	ldr	r3, [r7, #4]
100447b6:	619a      	str	r2, [r3, #24]
}
100447b8:	46c0      	nop			@ (mov r8, r8)
100447ba:	46bd      	mov	sp, r7
100447bc:	b004      	add	sp, #16
100447be:	bd80      	pop	{r7, pc}

100447c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
100447c0:	b580      	push	{r7, lr}
100447c2:	b082      	sub	sp, #8
100447c4:	af00      	add	r7, sp, #0
100447c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
100447c8:	687b      	ldr	r3, [r7, #4]
100447ca:	2b00      	cmp	r3, #0
100447cc:	d101      	bne.n	100447d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
100447ce:	2301      	movs	r3, #1
100447d0:	e08f      	b.n	100448f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
100447d2:	687b      	ldr	r3, [r7, #4]
100447d4:	2241      	movs	r2, #65	@ 0x41
100447d6:	5c9b      	ldrb	r3, [r3, r2]
100447d8:	b2db      	uxtb	r3, r3
100447da:	2b00      	cmp	r3, #0
100447dc:	d107      	bne.n	100447ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
100447de:	687b      	ldr	r3, [r7, #4]
100447e0:	2240      	movs	r2, #64	@ 0x40
100447e2:	2100      	movs	r1, #0
100447e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
100447e6:	687b      	ldr	r3, [r7, #4]
100447e8:	0018      	movs	r0, r3
100447ea:	f7fe fe97 	bl	1004351c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
100447ee:	687b      	ldr	r3, [r7, #4]
100447f0:	2241      	movs	r2, #65	@ 0x41
100447f2:	2124      	movs	r1, #36	@ 0x24
100447f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
100447f6:	687b      	ldr	r3, [r7, #4]
100447f8:	681b      	ldr	r3, [r3, #0]
100447fa:	681a      	ldr	r2, [r3, #0]
100447fc:	687b      	ldr	r3, [r7, #4]
100447fe:	681b      	ldr	r3, [r3, #0]
10044800:	2101      	movs	r1, #1
10044802:	438a      	bics	r2, r1
10044804:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10044806:	687b      	ldr	r3, [r7, #4]
10044808:	685a      	ldr	r2, [r3, #4]
1004480a:	687b      	ldr	r3, [r7, #4]
1004480c:	681b      	ldr	r3, [r3, #0]
1004480e:	493b      	ldr	r1, [pc, #236]	@ (100448fc <HAL_I2C_Init+0x13c>)
10044810:	400a      	ands	r2, r1
10044812:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10044814:	687b      	ldr	r3, [r7, #4]
10044816:	681b      	ldr	r3, [r3, #0]
10044818:	689a      	ldr	r2, [r3, #8]
1004481a:	687b      	ldr	r3, [r7, #4]
1004481c:	681b      	ldr	r3, [r3, #0]
1004481e:	4938      	ldr	r1, [pc, #224]	@ (10044900 <HAL_I2C_Init+0x140>)
10044820:	400a      	ands	r2, r1
10044822:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10044824:	687b      	ldr	r3, [r7, #4]
10044826:	68db      	ldr	r3, [r3, #12]
10044828:	2b01      	cmp	r3, #1
1004482a:	d108      	bne.n	1004483e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
1004482c:	687b      	ldr	r3, [r7, #4]
1004482e:	689a      	ldr	r2, [r3, #8]
10044830:	687b      	ldr	r3, [r7, #4]
10044832:	681b      	ldr	r3, [r3, #0]
10044834:	2180      	movs	r1, #128	@ 0x80
10044836:	0209      	lsls	r1, r1, #8
10044838:	430a      	orrs	r2, r1
1004483a:	609a      	str	r2, [r3, #8]
1004483c:	e007      	b.n	1004484e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
1004483e:	687b      	ldr	r3, [r7, #4]
10044840:	689a      	ldr	r2, [r3, #8]
10044842:	687b      	ldr	r3, [r7, #4]
10044844:	681b      	ldr	r3, [r3, #0]
10044846:	2184      	movs	r1, #132	@ 0x84
10044848:	0209      	lsls	r1, r1, #8
1004484a:	430a      	orrs	r2, r1
1004484c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
1004484e:	687b      	ldr	r3, [r7, #4]
10044850:	68db      	ldr	r3, [r3, #12]
10044852:	2b02      	cmp	r3, #2
10044854:	d109      	bne.n	1004486a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10044856:	687b      	ldr	r3, [r7, #4]
10044858:	681b      	ldr	r3, [r3, #0]
1004485a:	685a      	ldr	r2, [r3, #4]
1004485c:	687b      	ldr	r3, [r7, #4]
1004485e:	681b      	ldr	r3, [r3, #0]
10044860:	2180      	movs	r1, #128	@ 0x80
10044862:	0109      	lsls	r1, r1, #4
10044864:	430a      	orrs	r2, r1
10044866:	605a      	str	r2, [r3, #4]
10044868:	e007      	b.n	1004487a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
1004486a:	687b      	ldr	r3, [r7, #4]
1004486c:	681b      	ldr	r3, [r3, #0]
1004486e:	685a      	ldr	r2, [r3, #4]
10044870:	687b      	ldr	r3, [r7, #4]
10044872:	681b      	ldr	r3, [r3, #0]
10044874:	4923      	ldr	r1, [pc, #140]	@ (10044904 <HAL_I2C_Init+0x144>)
10044876:	400a      	ands	r2, r1
10044878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
1004487a:	687b      	ldr	r3, [r7, #4]
1004487c:	681b      	ldr	r3, [r3, #0]
1004487e:	685a      	ldr	r2, [r3, #4]
10044880:	687b      	ldr	r3, [r7, #4]
10044882:	681b      	ldr	r3, [r3, #0]
10044884:	4920      	ldr	r1, [pc, #128]	@ (10044908 <HAL_I2C_Init+0x148>)
10044886:	430a      	orrs	r2, r1
10044888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
1004488a:	687b      	ldr	r3, [r7, #4]
1004488c:	681b      	ldr	r3, [r3, #0]
1004488e:	68da      	ldr	r2, [r3, #12]
10044890:	687b      	ldr	r3, [r7, #4]
10044892:	681b      	ldr	r3, [r3, #0]
10044894:	491a      	ldr	r1, [pc, #104]	@ (10044900 <HAL_I2C_Init+0x140>)
10044896:	400a      	ands	r2, r1
10044898:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
1004489a:	687b      	ldr	r3, [r7, #4]
1004489c:	691a      	ldr	r2, [r3, #16]
1004489e:	687b      	ldr	r3, [r7, #4]
100448a0:	695b      	ldr	r3, [r3, #20]
100448a2:	431a      	orrs	r2, r3
100448a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
100448a6:	687b      	ldr	r3, [r7, #4]
100448a8:	699b      	ldr	r3, [r3, #24]
100448aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100448ac:	687b      	ldr	r3, [r7, #4]
100448ae:	681b      	ldr	r3, [r3, #0]
100448b0:	430a      	orrs	r2, r1
100448b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
100448b4:	687b      	ldr	r3, [r7, #4]
100448b6:	69d9      	ldr	r1, [r3, #28]
100448b8:	687b      	ldr	r3, [r7, #4]
100448ba:	6a1a      	ldr	r2, [r3, #32]
100448bc:	687b      	ldr	r3, [r7, #4]
100448be:	681b      	ldr	r3, [r3, #0]
100448c0:	430a      	orrs	r2, r1
100448c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
100448c4:	687b      	ldr	r3, [r7, #4]
100448c6:	681b      	ldr	r3, [r3, #0]
100448c8:	681a      	ldr	r2, [r3, #0]
100448ca:	687b      	ldr	r3, [r7, #4]
100448cc:	681b      	ldr	r3, [r3, #0]
100448ce:	2101      	movs	r1, #1
100448d0:	430a      	orrs	r2, r1
100448d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
100448d4:	687b      	ldr	r3, [r7, #4]
100448d6:	2200      	movs	r2, #0
100448d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
100448da:	687b      	ldr	r3, [r7, #4]
100448dc:	2241      	movs	r2, #65	@ 0x41
100448de:	2120      	movs	r1, #32
100448e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
100448e2:	687b      	ldr	r3, [r7, #4]
100448e4:	2200      	movs	r2, #0
100448e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
100448e8:	687b      	ldr	r3, [r7, #4]
100448ea:	2242      	movs	r2, #66	@ 0x42
100448ec:	2100      	movs	r1, #0
100448ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100448f0:	2300      	movs	r3, #0
}
100448f2:	0018      	movs	r0, r3
100448f4:	46bd      	mov	sp, r7
100448f6:	b002      	add	sp, #8
100448f8:	bd80      	pop	{r7, pc}
100448fa:	46c0      	nop			@ (mov r8, r8)
100448fc:	f0ffffff 	.word	0xf0ffffff
10044900:	ffff7fff 	.word	0xffff7fff
10044904:	fffff7ff 	.word	0xfffff7ff
10044908:	02008000 	.word	0x02008000

1004490c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
1004490c:	b590      	push	{r4, r7, lr}
1004490e:	b087      	sub	sp, #28
10044910:	af02      	add	r7, sp, #8
10044912:	60f8      	str	r0, [r7, #12]
10044914:	000c      	movs	r4, r1
10044916:	0010      	movs	r0, r2
10044918:	0019      	movs	r1, r3
1004491a:	230a      	movs	r3, #10
1004491c:	18fb      	adds	r3, r7, r3
1004491e:	1c22      	adds	r2, r4, #0
10044920:	801a      	strh	r2, [r3, #0]
10044922:	2308      	movs	r3, #8
10044924:	18fb      	adds	r3, r7, r3
10044926:	1c02      	adds	r2, r0, #0
10044928:	801a      	strh	r2, [r3, #0]
1004492a:	1dbb      	adds	r3, r7, #6
1004492c:	1c0a      	adds	r2, r1, #0
1004492e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10044930:	68fb      	ldr	r3, [r7, #12]
10044932:	2241      	movs	r2, #65	@ 0x41
10044934:	5c9b      	ldrb	r3, [r3, r2]
10044936:	b2db      	uxtb	r3, r3
10044938:	2b20      	cmp	r3, #32
1004493a:	d000      	beq.n	1004493e <HAL_I2C_Mem_Write_IT+0x32>
1004493c:	e07d      	b.n	10044a3a <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
1004493e:	6a3b      	ldr	r3, [r7, #32]
10044940:	2b00      	cmp	r3, #0
10044942:	d004      	beq.n	1004494e <HAL_I2C_Mem_Write_IT+0x42>
10044944:	2324      	movs	r3, #36	@ 0x24
10044946:	18fb      	adds	r3, r7, r3
10044948:	881b      	ldrh	r3, [r3, #0]
1004494a:	2b00      	cmp	r3, #0
1004494c:	d105      	bne.n	1004495a <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
1004494e:	68fb      	ldr	r3, [r7, #12]
10044950:	2280      	movs	r2, #128	@ 0x80
10044952:	0092      	lsls	r2, r2, #2
10044954:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10044956:	2301      	movs	r3, #1
10044958:	e070      	b.n	10044a3c <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1004495a:	68fb      	ldr	r3, [r7, #12]
1004495c:	681b      	ldr	r3, [r3, #0]
1004495e:	699a      	ldr	r2, [r3, #24]
10044960:	2380      	movs	r3, #128	@ 0x80
10044962:	021b      	lsls	r3, r3, #8
10044964:	401a      	ands	r2, r3
10044966:	2380      	movs	r3, #128	@ 0x80
10044968:	021b      	lsls	r3, r3, #8
1004496a:	429a      	cmp	r2, r3
1004496c:	d101      	bne.n	10044972 <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
1004496e:	2302      	movs	r3, #2
10044970:	e064      	b.n	10044a3c <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10044972:	68fb      	ldr	r3, [r7, #12]
10044974:	2240      	movs	r2, #64	@ 0x40
10044976:	5c9b      	ldrb	r3, [r3, r2]
10044978:	2b01      	cmp	r3, #1
1004497a:	d101      	bne.n	10044980 <HAL_I2C_Mem_Write_IT+0x74>
1004497c:	2302      	movs	r3, #2
1004497e:	e05d      	b.n	10044a3c <HAL_I2C_Mem_Write_IT+0x130>
10044980:	68fb      	ldr	r3, [r7, #12]
10044982:	2240      	movs	r2, #64	@ 0x40
10044984:	2101      	movs	r1, #1
10044986:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
10044988:	68fb      	ldr	r3, [r7, #12]
1004498a:	2241      	movs	r2, #65	@ 0x41
1004498c:	2121      	movs	r1, #33	@ 0x21
1004498e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10044990:	68fb      	ldr	r3, [r7, #12]
10044992:	2242      	movs	r2, #66	@ 0x42
10044994:	2140      	movs	r1, #64	@ 0x40
10044996:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10044998:	68fb      	ldr	r3, [r7, #12]
1004499a:	2200      	movs	r2, #0
1004499c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
1004499e:	68fb      	ldr	r3, [r7, #12]
100449a0:	2200      	movs	r2, #0
100449a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
100449a4:	68fb      	ldr	r3, [r7, #12]
100449a6:	6a3a      	ldr	r2, [r7, #32]
100449a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
100449aa:	68fb      	ldr	r3, [r7, #12]
100449ac:	2224      	movs	r2, #36	@ 0x24
100449ae:	18ba      	adds	r2, r7, r2
100449b0:	8812      	ldrh	r2, [r2, #0]
100449b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100449b4:	68fb      	ldr	r3, [r7, #12]
100449b6:	4a23      	ldr	r2, [pc, #140]	@ (10044a44 <HAL_I2C_Mem_Write_IT+0x138>)
100449b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
100449ba:	68fb      	ldr	r3, [r7, #12]
100449bc:	4a22      	ldr	r2, [pc, #136]	@ (10044a48 <HAL_I2C_Mem_Write_IT+0x13c>)
100449be:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
100449c0:	230a      	movs	r3, #10
100449c2:	18fb      	adds	r3, r7, r3
100449c4:	881a      	ldrh	r2, [r3, #0]
100449c6:	68fb      	ldr	r3, [r7, #12]
100449c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
100449ca:	1dbb      	adds	r3, r7, #6
100449cc:	881b      	ldrh	r3, [r3, #0]
100449ce:	2b01      	cmp	r3, #1
100449d0:	d10b      	bne.n	100449ea <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
100449d2:	2308      	movs	r3, #8
100449d4:	18fb      	adds	r3, r7, r3
100449d6:	881b      	ldrh	r3, [r3, #0]
100449d8:	b2da      	uxtb	r2, r3
100449da:	68fb      	ldr	r3, [r7, #12]
100449dc:	681b      	ldr	r3, [r3, #0]
100449de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
100449e0:	68fb      	ldr	r3, [r7, #12]
100449e2:	2201      	movs	r2, #1
100449e4:	4252      	negs	r2, r2
100449e6:	651a      	str	r2, [r3, #80]	@ 0x50
100449e8:	e00e      	b.n	10044a08 <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
100449ea:	2108      	movs	r1, #8
100449ec:	187b      	adds	r3, r7, r1
100449ee:	881b      	ldrh	r3, [r3, #0]
100449f0:	0a1b      	lsrs	r3, r3, #8
100449f2:	b29b      	uxth	r3, r3
100449f4:	b2da      	uxtb	r2, r3
100449f6:	68fb      	ldr	r3, [r7, #12]
100449f8:	681b      	ldr	r3, [r3, #0]
100449fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
100449fc:	187b      	adds	r3, r7, r1
100449fe:	881b      	ldrh	r3, [r3, #0]
10044a00:	b2db      	uxtb	r3, r3
10044a02:	001a      	movs	r2, r3
10044a04:	68fb      	ldr	r3, [r7, #12]
10044a06:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10044a08:	1dbb      	adds	r3, r7, #6
10044a0a:	881b      	ldrh	r3, [r3, #0]
10044a0c:	b2da      	uxtb	r2, r3
10044a0e:	2380      	movs	r3, #128	@ 0x80
10044a10:	045c      	lsls	r4, r3, #17
10044a12:	230a      	movs	r3, #10
10044a14:	18fb      	adds	r3, r7, r3
10044a16:	8819      	ldrh	r1, [r3, #0]
10044a18:	68f8      	ldr	r0, [r7, #12]
10044a1a:	4b0c      	ldr	r3, [pc, #48]	@ (10044a4c <HAL_I2C_Mem_Write_IT+0x140>)
10044a1c:	9300      	str	r3, [sp, #0]
10044a1e:	0023      	movs	r3, r4
10044a20:	f001 fc06 	bl	10046230 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10044a24:	68fb      	ldr	r3, [r7, #12]
10044a26:	2240      	movs	r2, #64	@ 0x40
10044a28:	2100      	movs	r1, #0
10044a2a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10044a2c:	68fb      	ldr	r3, [r7, #12]
10044a2e:	2101      	movs	r1, #1
10044a30:	0018      	movs	r0, r3
10044a32:	f001 fc37 	bl	100462a4 <I2C_Enable_IRQ>

    return HAL_OK;
10044a36:	2300      	movs	r3, #0
10044a38:	e000      	b.n	10044a3c <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
10044a3a:	2302      	movs	r3, #2
  }
}
10044a3c:	0018      	movs	r0, r3
10044a3e:	46bd      	mov	sp, r7
10044a40:	b005      	add	sp, #20
10044a42:	bd90      	pop	{r4, r7, pc}
10044a44:	ffff0000 	.word	0xffff0000
10044a48:	10044d05 	.word	0x10044d05
10044a4c:	80002000 	.word	0x80002000

10044a50 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10044a50:	b590      	push	{r4, r7, lr}
10044a52:	b087      	sub	sp, #28
10044a54:	af02      	add	r7, sp, #8
10044a56:	60f8      	str	r0, [r7, #12]
10044a58:	000c      	movs	r4, r1
10044a5a:	0010      	movs	r0, r2
10044a5c:	0019      	movs	r1, r3
10044a5e:	230a      	movs	r3, #10
10044a60:	18fb      	adds	r3, r7, r3
10044a62:	1c22      	adds	r2, r4, #0
10044a64:	801a      	strh	r2, [r3, #0]
10044a66:	2308      	movs	r3, #8
10044a68:	18fb      	adds	r3, r7, r3
10044a6a:	1c02      	adds	r2, r0, #0
10044a6c:	801a      	strh	r2, [r3, #0]
10044a6e:	1dbb      	adds	r3, r7, #6
10044a70:	1c0a      	adds	r2, r1, #0
10044a72:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10044a74:	68fb      	ldr	r3, [r7, #12]
10044a76:	2241      	movs	r2, #65	@ 0x41
10044a78:	5c9b      	ldrb	r3, [r3, r2]
10044a7a:	b2db      	uxtb	r3, r3
10044a7c:	2b20      	cmp	r3, #32
10044a7e:	d000      	beq.n	10044a82 <HAL_I2C_Mem_Read_IT+0x32>
10044a80:	e078      	b.n	10044b74 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10044a82:	6a3b      	ldr	r3, [r7, #32]
10044a84:	2b00      	cmp	r3, #0
10044a86:	d004      	beq.n	10044a92 <HAL_I2C_Mem_Read_IT+0x42>
10044a88:	2324      	movs	r3, #36	@ 0x24
10044a8a:	18fb      	adds	r3, r7, r3
10044a8c:	881b      	ldrh	r3, [r3, #0]
10044a8e:	2b00      	cmp	r3, #0
10044a90:	d105      	bne.n	10044a9e <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10044a92:	68fb      	ldr	r3, [r7, #12]
10044a94:	2280      	movs	r2, #128	@ 0x80
10044a96:	0092      	lsls	r2, r2, #2
10044a98:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10044a9a:	2301      	movs	r3, #1
10044a9c:	e06b      	b.n	10044b76 <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10044a9e:	68fb      	ldr	r3, [r7, #12]
10044aa0:	681b      	ldr	r3, [r3, #0]
10044aa2:	699a      	ldr	r2, [r3, #24]
10044aa4:	2380      	movs	r3, #128	@ 0x80
10044aa6:	021b      	lsls	r3, r3, #8
10044aa8:	401a      	ands	r2, r3
10044aaa:	2380      	movs	r3, #128	@ 0x80
10044aac:	021b      	lsls	r3, r3, #8
10044aae:	429a      	cmp	r2, r3
10044ab0:	d101      	bne.n	10044ab6 <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
10044ab2:	2302      	movs	r3, #2
10044ab4:	e05f      	b.n	10044b76 <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10044ab6:	68fb      	ldr	r3, [r7, #12]
10044ab8:	2240      	movs	r2, #64	@ 0x40
10044aba:	5c9b      	ldrb	r3, [r3, r2]
10044abc:	2b01      	cmp	r3, #1
10044abe:	d101      	bne.n	10044ac4 <HAL_I2C_Mem_Read_IT+0x74>
10044ac0:	2302      	movs	r3, #2
10044ac2:	e058      	b.n	10044b76 <HAL_I2C_Mem_Read_IT+0x126>
10044ac4:	68fb      	ldr	r3, [r7, #12]
10044ac6:	2240      	movs	r2, #64	@ 0x40
10044ac8:	2101      	movs	r1, #1
10044aca:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
10044acc:	68fb      	ldr	r3, [r7, #12]
10044ace:	2241      	movs	r2, #65	@ 0x41
10044ad0:	2122      	movs	r1, #34	@ 0x22
10044ad2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10044ad4:	68fb      	ldr	r3, [r7, #12]
10044ad6:	2242      	movs	r2, #66	@ 0x42
10044ad8:	2140      	movs	r1, #64	@ 0x40
10044ada:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10044adc:	68fb      	ldr	r3, [r7, #12]
10044ade:	2200      	movs	r2, #0
10044ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
10044ae2:	68fb      	ldr	r3, [r7, #12]
10044ae4:	6a3a      	ldr	r2, [r7, #32]
10044ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10044ae8:	68fb      	ldr	r3, [r7, #12]
10044aea:	2224      	movs	r2, #36	@ 0x24
10044aec:	18ba      	adds	r2, r7, r2
10044aee:	8812      	ldrh	r2, [r2, #0]
10044af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10044af2:	68fb      	ldr	r3, [r7, #12]
10044af4:	4a22      	ldr	r2, [pc, #136]	@ (10044b80 <HAL_I2C_Mem_Read_IT+0x130>)
10044af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10044af8:	68fb      	ldr	r3, [r7, #12]
10044afa:	4a22      	ldr	r2, [pc, #136]	@ (10044b84 <HAL_I2C_Mem_Read_IT+0x134>)
10044afc:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
10044afe:	230a      	movs	r3, #10
10044b00:	18fb      	adds	r3, r7, r3
10044b02:	881a      	ldrh	r2, [r3, #0]
10044b04:	68fb      	ldr	r3, [r7, #12]
10044b06:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10044b08:	1dbb      	adds	r3, r7, #6
10044b0a:	881b      	ldrh	r3, [r3, #0]
10044b0c:	2b01      	cmp	r3, #1
10044b0e:	d10b      	bne.n	10044b28 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10044b10:	2308      	movs	r3, #8
10044b12:	18fb      	adds	r3, r7, r3
10044b14:	881b      	ldrh	r3, [r3, #0]
10044b16:	b2da      	uxtb	r2, r3
10044b18:	68fb      	ldr	r3, [r7, #12]
10044b1a:	681b      	ldr	r3, [r3, #0]
10044b1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10044b1e:	68fb      	ldr	r3, [r7, #12]
10044b20:	2201      	movs	r2, #1
10044b22:	4252      	negs	r2, r2
10044b24:	651a      	str	r2, [r3, #80]	@ 0x50
10044b26:	e00e      	b.n	10044b46 <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10044b28:	2108      	movs	r1, #8
10044b2a:	187b      	adds	r3, r7, r1
10044b2c:	881b      	ldrh	r3, [r3, #0]
10044b2e:	0a1b      	lsrs	r3, r3, #8
10044b30:	b29b      	uxth	r3, r3
10044b32:	b2da      	uxtb	r2, r3
10044b34:	68fb      	ldr	r3, [r7, #12]
10044b36:	681b      	ldr	r3, [r3, #0]
10044b38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
10044b3a:	187b      	adds	r3, r7, r1
10044b3c:	881b      	ldrh	r3, [r3, #0]
10044b3e:	b2db      	uxtb	r3, r3
10044b40:	001a      	movs	r2, r3
10044b42:	68fb      	ldr	r3, [r7, #12]
10044b44:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
10044b46:	1dbb      	adds	r3, r7, #6
10044b48:	881b      	ldrh	r3, [r3, #0]
10044b4a:	b2da      	uxtb	r2, r3
10044b4c:	230a      	movs	r3, #10
10044b4e:	18fb      	adds	r3, r7, r3
10044b50:	8819      	ldrh	r1, [r3, #0]
10044b52:	68f8      	ldr	r0, [r7, #12]
10044b54:	4b0c      	ldr	r3, [pc, #48]	@ (10044b88 <HAL_I2C_Mem_Read_IT+0x138>)
10044b56:	9300      	str	r3, [sp, #0]
10044b58:	2300      	movs	r3, #0
10044b5a:	f001 fb69 	bl	10046230 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10044b5e:	68fb      	ldr	r3, [r7, #12]
10044b60:	2240      	movs	r2, #64	@ 0x40
10044b62:	2100      	movs	r1, #0
10044b64:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10044b66:	68fb      	ldr	r3, [r7, #12]
10044b68:	2101      	movs	r1, #1
10044b6a:	0018      	movs	r0, r3
10044b6c:	f001 fb9a 	bl	100462a4 <I2C_Enable_IRQ>

    return HAL_OK;
10044b70:	2300      	movs	r3, #0
10044b72:	e000      	b.n	10044b76 <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
10044b74:	2302      	movs	r3, #2
  }
}
10044b76:	0018      	movs	r0, r3
10044b78:	46bd      	mov	sp, r7
10044b7a:	b005      	add	sp, #20
10044b7c:	bd90      	pop	{r4, r7, pc}
10044b7e:	46c0      	nop			@ (mov r8, r8)
10044b80:	ffff0000 	.word	0xffff0000
10044b84:	10044d05 	.word	0x10044d05
10044b88:	80002000 	.word	0x80002000

10044b8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
10044b8c:	b580      	push	{r7, lr}
10044b8e:	b084      	sub	sp, #16
10044b90:	af00      	add	r7, sp, #0
10044b92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10044b94:	687b      	ldr	r3, [r7, #4]
10044b96:	681b      	ldr	r3, [r3, #0]
10044b98:	699b      	ldr	r3, [r3, #24]
10044b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10044b9c:	687b      	ldr	r3, [r7, #4]
10044b9e:	681b      	ldr	r3, [r3, #0]
10044ba0:	681b      	ldr	r3, [r3, #0]
10044ba2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10044ba4:	687b      	ldr	r3, [r7, #4]
10044ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10044ba8:	2b00      	cmp	r3, #0
10044baa:	d005      	beq.n	10044bb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
10044bac:	687b      	ldr	r3, [r7, #4]
10044bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10044bb0:	68ba      	ldr	r2, [r7, #8]
10044bb2:	68f9      	ldr	r1, [r7, #12]
10044bb4:	6878      	ldr	r0, [r7, #4]
10044bb6:	4798      	blx	r3
  }
}
10044bb8:	46c0      	nop			@ (mov r8, r8)
10044bba:	46bd      	mov	sp, r7
10044bbc:	b004      	add	sp, #16
10044bbe:	bd80      	pop	{r7, pc}

10044bc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
10044bc0:	b580      	push	{r7, lr}
10044bc2:	b086      	sub	sp, #24
10044bc4:	af00      	add	r7, sp, #0
10044bc6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10044bc8:	687b      	ldr	r3, [r7, #4]
10044bca:	681b      	ldr	r3, [r3, #0]
10044bcc:	699b      	ldr	r3, [r3, #24]
10044bce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10044bd0:	687b      	ldr	r3, [r7, #4]
10044bd2:	681b      	ldr	r3, [r3, #0]
10044bd4:	681b      	ldr	r3, [r3, #0]
10044bd6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10044bd8:	697a      	ldr	r2, [r7, #20]
10044bda:	2380      	movs	r3, #128	@ 0x80
10044bdc:	005b      	lsls	r3, r3, #1
10044bde:	4013      	ands	r3, r2
10044be0:	d00e      	beq.n	10044c00 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10044be2:	693b      	ldr	r3, [r7, #16]
10044be4:	2280      	movs	r2, #128	@ 0x80
10044be6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10044be8:	d00a      	beq.n	10044c00 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10044bea:	687b      	ldr	r3, [r7, #4]
10044bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044bee:	2201      	movs	r2, #1
10044bf0:	431a      	orrs	r2, r3
10044bf2:	687b      	ldr	r3, [r7, #4]
10044bf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10044bf6:	687b      	ldr	r3, [r7, #4]
10044bf8:	681b      	ldr	r3, [r3, #0]
10044bfa:	2280      	movs	r2, #128	@ 0x80
10044bfc:	0052      	lsls	r2, r2, #1
10044bfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10044c00:	697a      	ldr	r2, [r7, #20]
10044c02:	2380      	movs	r3, #128	@ 0x80
10044c04:	00db      	lsls	r3, r3, #3
10044c06:	4013      	ands	r3, r2
10044c08:	d00e      	beq.n	10044c28 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10044c0a:	693b      	ldr	r3, [r7, #16]
10044c0c:	2280      	movs	r2, #128	@ 0x80
10044c0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10044c10:	d00a      	beq.n	10044c28 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10044c12:	687b      	ldr	r3, [r7, #4]
10044c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044c16:	2208      	movs	r2, #8
10044c18:	431a      	orrs	r2, r3
10044c1a:	687b      	ldr	r3, [r7, #4]
10044c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10044c1e:	687b      	ldr	r3, [r7, #4]
10044c20:	681b      	ldr	r3, [r3, #0]
10044c22:	2280      	movs	r2, #128	@ 0x80
10044c24:	00d2      	lsls	r2, r2, #3
10044c26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10044c28:	697a      	ldr	r2, [r7, #20]
10044c2a:	2380      	movs	r3, #128	@ 0x80
10044c2c:	009b      	lsls	r3, r3, #2
10044c2e:	4013      	ands	r3, r2
10044c30:	d00e      	beq.n	10044c50 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10044c32:	693b      	ldr	r3, [r7, #16]
10044c34:	2280      	movs	r2, #128	@ 0x80
10044c36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10044c38:	d00a      	beq.n	10044c50 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10044c3a:	687b      	ldr	r3, [r7, #4]
10044c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044c3e:	2202      	movs	r2, #2
10044c40:	431a      	orrs	r2, r3
10044c42:	687b      	ldr	r3, [r7, #4]
10044c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10044c46:	687b      	ldr	r3, [r7, #4]
10044c48:	681b      	ldr	r3, [r3, #0]
10044c4a:	2280      	movs	r2, #128	@ 0x80
10044c4c:	0092      	lsls	r2, r2, #2
10044c4e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10044c50:	687b      	ldr	r3, [r7, #4]
10044c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044c54:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10044c56:	68fb      	ldr	r3, [r7, #12]
10044c58:	220b      	movs	r2, #11
10044c5a:	4013      	ands	r3, r2
10044c5c:	d005      	beq.n	10044c6a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
10044c5e:	68fa      	ldr	r2, [r7, #12]
10044c60:	687b      	ldr	r3, [r7, #4]
10044c62:	0011      	movs	r1, r2
10044c64:	0018      	movs	r0, r3
10044c66:	f001 f977 	bl	10045f58 <I2C_ITError>
  }
}
10044c6a:	46c0      	nop			@ (mov r8, r8)
10044c6c:	46bd      	mov	sp, r7
10044c6e:	b006      	add	sp, #24
10044c70:	bd80      	pop	{r7, pc}

10044c72 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10044c72:	b580      	push	{r7, lr}
10044c74:	b082      	sub	sp, #8
10044c76:	af00      	add	r7, sp, #0
10044c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
10044c7a:	46c0      	nop			@ (mov r8, r8)
10044c7c:	46bd      	mov	sp, r7
10044c7e:	b002      	add	sp, #8
10044c80:	bd80      	pop	{r7, pc}

10044c82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10044c82:	b580      	push	{r7, lr}
10044c84:	b082      	sub	sp, #8
10044c86:	af00      	add	r7, sp, #0
10044c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
10044c8a:	46c0      	nop			@ (mov r8, r8)
10044c8c:	46bd      	mov	sp, r7
10044c8e:	b002      	add	sp, #8
10044c90:	bd80      	pop	{r7, pc}

10044c92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10044c92:	b580      	push	{r7, lr}
10044c94:	b082      	sub	sp, #8
10044c96:	af00      	add	r7, sp, #0
10044c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
10044c9a:	46c0      	nop			@ (mov r8, r8)
10044c9c:	46bd      	mov	sp, r7
10044c9e:	b002      	add	sp, #8
10044ca0:	bd80      	pop	{r7, pc}

10044ca2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10044ca2:	b580      	push	{r7, lr}
10044ca4:	b082      	sub	sp, #8
10044ca6:	af00      	add	r7, sp, #0
10044ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
10044caa:	46c0      	nop			@ (mov r8, r8)
10044cac:	46bd      	mov	sp, r7
10044cae:	b002      	add	sp, #8
10044cb0:	bd80      	pop	{r7, pc}

10044cb2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10044cb2:	b580      	push	{r7, lr}
10044cb4:	b082      	sub	sp, #8
10044cb6:	af00      	add	r7, sp, #0
10044cb8:	6078      	str	r0, [r7, #4]
10044cba:	0008      	movs	r0, r1
10044cbc:	0011      	movs	r1, r2
10044cbe:	1cfb      	adds	r3, r7, #3
10044cc0:	1c02      	adds	r2, r0, #0
10044cc2:	701a      	strb	r2, [r3, #0]
10044cc4:	003b      	movs	r3, r7
10044cc6:	1c0a      	adds	r2, r1, #0
10044cc8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
10044cca:	46c0      	nop			@ (mov r8, r8)
10044ccc:	46bd      	mov	sp, r7
10044cce:	b002      	add	sp, #8
10044cd0:	bd80      	pop	{r7, pc}

10044cd2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10044cd2:	b580      	push	{r7, lr}
10044cd4:	b082      	sub	sp, #8
10044cd6:	af00      	add	r7, sp, #0
10044cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10044cda:	46c0      	nop			@ (mov r8, r8)
10044cdc:	46bd      	mov	sp, r7
10044cde:	b002      	add	sp, #8
10044ce0:	bd80      	pop	{r7, pc}

10044ce2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
10044ce2:	b580      	push	{r7, lr}
10044ce4:	b082      	sub	sp, #8
10044ce6:	af00      	add	r7, sp, #0
10044ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
10044cea:	46c0      	nop			@ (mov r8, r8)
10044cec:	46bd      	mov	sp, r7
10044cee:	b002      	add	sp, #8
10044cf0:	bd80      	pop	{r7, pc}

10044cf2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10044cf2:	b580      	push	{r7, lr}
10044cf4:	b082      	sub	sp, #8
10044cf6:	af00      	add	r7, sp, #0
10044cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10044cfa:	46c0      	nop			@ (mov r8, r8)
10044cfc:	46bd      	mov	sp, r7
10044cfe:	b002      	add	sp, #8
10044d00:	bd80      	pop	{r7, pc}
	...

10044d04 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
10044d04:	b590      	push	{r4, r7, lr}
10044d06:	b089      	sub	sp, #36	@ 0x24
10044d08:	af02      	add	r7, sp, #8
10044d0a:	60f8      	str	r0, [r7, #12]
10044d0c:	60b9      	str	r1, [r7, #8]
10044d0e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10044d10:	4b8b      	ldr	r3, [pc, #556]	@ (10044f40 <I2C_Mem_ISR_IT+0x23c>)
10044d12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10044d14:	68bb      	ldr	r3, [r7, #8]
10044d16:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10044d18:	68fb      	ldr	r3, [r7, #12]
10044d1a:	2240      	movs	r2, #64	@ 0x40
10044d1c:	5c9b      	ldrb	r3, [r3, r2]
10044d1e:	2b01      	cmp	r3, #1
10044d20:	d101      	bne.n	10044d26 <I2C_Mem_ISR_IT+0x22>
10044d22:	2302      	movs	r3, #2
10044d24:	e107      	b.n	10044f36 <I2C_Mem_ISR_IT+0x232>
10044d26:	68fb      	ldr	r3, [r7, #12]
10044d28:	2240      	movs	r2, #64	@ 0x40
10044d2a:	2101      	movs	r1, #1
10044d2c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10044d2e:	693b      	ldr	r3, [r7, #16]
10044d30:	2210      	movs	r2, #16
10044d32:	4013      	ands	r3, r2
10044d34:	d012      	beq.n	10044d5c <I2C_Mem_ISR_IT+0x58>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10044d36:	687b      	ldr	r3, [r7, #4]
10044d38:	2210      	movs	r2, #16
10044d3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10044d3c:	d00e      	beq.n	10044d5c <I2C_Mem_ISR_IT+0x58>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10044d3e:	68fb      	ldr	r3, [r7, #12]
10044d40:	681b      	ldr	r3, [r3, #0]
10044d42:	2210      	movs	r2, #16
10044d44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10044d46:	68fb      	ldr	r3, [r7, #12]
10044d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044d4a:	2204      	movs	r2, #4
10044d4c:	431a      	orrs	r2, r3
10044d4e:	68fb      	ldr	r3, [r7, #12]
10044d50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10044d52:	68fb      	ldr	r3, [r7, #12]
10044d54:	0018      	movs	r0, r3
10044d56:	f001 fa2a 	bl	100461ae <I2C_Flush_TXDR>
10044d5a:	e0d9      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10044d5c:	693b      	ldr	r3, [r7, #16]
10044d5e:	2204      	movs	r2, #4
10044d60:	4013      	ands	r3, r2
10044d62:	d021      	beq.n	10044da8 <I2C_Mem_ISR_IT+0xa4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10044d64:	687b      	ldr	r3, [r7, #4]
10044d66:	2204      	movs	r2, #4
10044d68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10044d6a:	d01d      	beq.n	10044da8 <I2C_Mem_ISR_IT+0xa4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10044d6c:	693b      	ldr	r3, [r7, #16]
10044d6e:	2204      	movs	r2, #4
10044d70:	4393      	bics	r3, r2
10044d72:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10044d74:	68fb      	ldr	r3, [r7, #12]
10044d76:	681b      	ldr	r3, [r3, #0]
10044d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10044d7a:	68fb      	ldr	r3, [r7, #12]
10044d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10044d7e:	b2d2      	uxtb	r2, r2
10044d80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10044d82:	68fb      	ldr	r3, [r7, #12]
10044d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10044d86:	1c5a      	adds	r2, r3, #1
10044d88:	68fb      	ldr	r3, [r7, #12]
10044d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
10044d8c:	68fb      	ldr	r3, [r7, #12]
10044d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044d90:	3b01      	subs	r3, #1
10044d92:	b29a      	uxth	r2, r3
10044d94:	68fb      	ldr	r3, [r7, #12]
10044d96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
10044d98:	68fb      	ldr	r3, [r7, #12]
10044d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044d9c:	b29b      	uxth	r3, r3
10044d9e:	3b01      	subs	r3, #1
10044da0:	b29a      	uxth	r2, r3
10044da2:	68fb      	ldr	r3, [r7, #12]
10044da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
10044da6:	e0b3      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10044da8:	693b      	ldr	r3, [r7, #16]
10044daa:	2202      	movs	r2, #2
10044dac:	4013      	ands	r3, r2
10044dae:	d02a      	beq.n	10044e06 <I2C_Mem_ISR_IT+0x102>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10044db0:	687b      	ldr	r3, [r7, #4]
10044db2:	2202      	movs	r2, #2
10044db4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10044db6:	d026      	beq.n	10044e06 <I2C_Mem_ISR_IT+0x102>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10044db8:	68fb      	ldr	r3, [r7, #12]
10044dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10044dbc:	3301      	adds	r3, #1
10044dbe:	d118      	bne.n	10044df2 <I2C_Mem_ISR_IT+0xee>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10044dc0:	68fb      	ldr	r3, [r7, #12]
10044dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10044dc4:	781a      	ldrb	r2, [r3, #0]
10044dc6:	68fb      	ldr	r3, [r7, #12]
10044dc8:	681b      	ldr	r3, [r3, #0]
10044dca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10044dcc:	68fb      	ldr	r3, [r7, #12]
10044dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10044dd0:	1c5a      	adds	r2, r3, #1
10044dd2:	68fb      	ldr	r3, [r7, #12]
10044dd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10044dd6:	68fb      	ldr	r3, [r7, #12]
10044dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044dda:	3b01      	subs	r3, #1
10044ddc:	b29a      	uxth	r2, r3
10044dde:	68fb      	ldr	r3, [r7, #12]
10044de0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10044de2:	68fb      	ldr	r3, [r7, #12]
10044de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044de6:	b29b      	uxth	r3, r3
10044de8:	3b01      	subs	r3, #1
10044dea:	b29a      	uxth	r2, r3
10044dec:	68fb      	ldr	r3, [r7, #12]
10044dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10044df0:	e08e      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
10044df2:	68fb      	ldr	r3, [r7, #12]
10044df4:	681b      	ldr	r3, [r3, #0]
10044df6:	68fa      	ldr	r2, [r7, #12]
10044df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10044dfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10044dfc:	68fb      	ldr	r3, [r7, #12]
10044dfe:	2201      	movs	r2, #1
10044e00:	4252      	negs	r2, r2
10044e02:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10044e04:	e084      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10044e06:	693b      	ldr	r3, [r7, #16]
10044e08:	2280      	movs	r2, #128	@ 0x80
10044e0a:	4013      	ands	r3, r2
10044e0c:	d03c      	beq.n	10044e88 <I2C_Mem_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10044e0e:	687b      	ldr	r3, [r7, #4]
10044e10:	2240      	movs	r2, #64	@ 0x40
10044e12:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10044e14:	d038      	beq.n	10044e88 <I2C_Mem_ISR_IT+0x184>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10044e16:	68fb      	ldr	r3, [r7, #12]
10044e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044e1a:	b29b      	uxth	r3, r3
10044e1c:	2b00      	cmp	r3, #0
10044e1e:	d02c      	beq.n	10044e7a <I2C_Mem_ISR_IT+0x176>
10044e20:	68fb      	ldr	r3, [r7, #12]
10044e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044e24:	2b00      	cmp	r3, #0
10044e26:	d128      	bne.n	10044e7a <I2C_Mem_ISR_IT+0x176>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10044e28:	68fb      	ldr	r3, [r7, #12]
10044e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044e2c:	b29b      	uxth	r3, r3
10044e2e:	2bff      	cmp	r3, #255	@ 0xff
10044e30:	d910      	bls.n	10044e54 <I2C_Mem_ISR_IT+0x150>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10044e32:	68fb      	ldr	r3, [r7, #12]
10044e34:	22ff      	movs	r2, #255	@ 0xff
10044e36:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10044e38:	68fb      	ldr	r3, [r7, #12]
10044e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10044e3c:	b299      	uxth	r1, r3
10044e3e:	68fb      	ldr	r3, [r7, #12]
10044e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044e42:	b2da      	uxtb	r2, r3
10044e44:	2380      	movs	r3, #128	@ 0x80
10044e46:	045b      	lsls	r3, r3, #17
10044e48:	68f8      	ldr	r0, [r7, #12]
10044e4a:	2400      	movs	r4, #0
10044e4c:	9400      	str	r4, [sp, #0]
10044e4e:	f001 f9ef 	bl	10046230 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10044e52:	e018      	b.n	10044e86 <I2C_Mem_ISR_IT+0x182>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10044e54:	68fb      	ldr	r3, [r7, #12]
10044e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044e58:	b29a      	uxth	r2, r3
10044e5a:	68fb      	ldr	r3, [r7, #12]
10044e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10044e5e:	68fb      	ldr	r3, [r7, #12]
10044e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10044e62:	b299      	uxth	r1, r3
10044e64:	68fb      	ldr	r3, [r7, #12]
10044e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044e68:	b2da      	uxtb	r2, r3
10044e6a:	2380      	movs	r3, #128	@ 0x80
10044e6c:	049b      	lsls	r3, r3, #18
10044e6e:	68f8      	ldr	r0, [r7, #12]
10044e70:	2400      	movs	r4, #0
10044e72:	9400      	str	r4, [sp, #0]
10044e74:	f001 f9dc 	bl	10046230 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10044e78:	e005      	b.n	10044e86 <I2C_Mem_ISR_IT+0x182>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10044e7a:	68fb      	ldr	r3, [r7, #12]
10044e7c:	2140      	movs	r1, #64	@ 0x40
10044e7e:	0018      	movs	r0, r3
10044e80:	f001 f86a 	bl	10045f58 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10044e84:	e044      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
10044e86:	e043      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10044e88:	693b      	ldr	r3, [r7, #16]
10044e8a:	2240      	movs	r2, #64	@ 0x40
10044e8c:	4013      	ands	r3, r2
10044e8e:	d03f      	beq.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10044e90:	687b      	ldr	r3, [r7, #4]
10044e92:	2240      	movs	r2, #64	@ 0x40
10044e94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10044e96:	d03b      	beq.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10044e98:	68fb      	ldr	r3, [r7, #12]
10044e9a:	2101      	movs	r1, #1
10044e9c:	0018      	movs	r0, r3
10044e9e:	f001 fa8b 	bl	100463b8 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
10044ea2:	68fb      	ldr	r3, [r7, #12]
10044ea4:	2102      	movs	r1, #2
10044ea6:	0018      	movs	r0, r3
10044ea8:	f001 f9fc 	bl	100462a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10044eac:	68fb      	ldr	r3, [r7, #12]
10044eae:	2241      	movs	r2, #65	@ 0x41
10044eb0:	5c9b      	ldrb	r3, [r3, r2]
10044eb2:	b2db      	uxtb	r3, r3
10044eb4:	2b22      	cmp	r3, #34	@ 0x22
10044eb6:	d101      	bne.n	10044ebc <I2C_Mem_ISR_IT+0x1b8>
    {
      direction = I2C_GENERATE_START_READ;
10044eb8:	4b22      	ldr	r3, [pc, #136]	@ (10044f44 <I2C_Mem_ISR_IT+0x240>)
10044eba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10044ebc:	68fb      	ldr	r3, [r7, #12]
10044ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044ec0:	b29b      	uxth	r3, r3
10044ec2:	2bff      	cmp	r3, #255	@ 0xff
10044ec4:	d911      	bls.n	10044eea <I2C_Mem_ISR_IT+0x1e6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10044ec6:	68fb      	ldr	r3, [r7, #12]
10044ec8:	22ff      	movs	r2, #255	@ 0xff
10044eca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10044ecc:	68fb      	ldr	r3, [r7, #12]
10044ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10044ed0:	b299      	uxth	r1, r3
10044ed2:	68fb      	ldr	r3, [r7, #12]
10044ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044ed6:	b2da      	uxtb	r2, r3
10044ed8:	2380      	movs	r3, #128	@ 0x80
10044eda:	045c      	lsls	r4, r3, #17
10044edc:	68f8      	ldr	r0, [r7, #12]
10044ede:	697b      	ldr	r3, [r7, #20]
10044ee0:	9300      	str	r3, [sp, #0]
10044ee2:	0023      	movs	r3, r4
10044ee4:	f001 f9a4 	bl	10046230 <I2C_TransferConfig>
10044ee8:	e012      	b.n	10044f10 <I2C_Mem_ISR_IT+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10044eea:	68fb      	ldr	r3, [r7, #12]
10044eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044eee:	b29a      	uxth	r2, r3
10044ef0:	68fb      	ldr	r3, [r7, #12]
10044ef2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10044ef4:	68fb      	ldr	r3, [r7, #12]
10044ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10044ef8:	b299      	uxth	r1, r3
10044efa:	68fb      	ldr	r3, [r7, #12]
10044efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10044efe:	b2da      	uxtb	r2, r3
10044f00:	2380      	movs	r3, #128	@ 0x80
10044f02:	049c      	lsls	r4, r3, #18
10044f04:	68f8      	ldr	r0, [r7, #12]
10044f06:	697b      	ldr	r3, [r7, #20]
10044f08:	9300      	str	r3, [sp, #0]
10044f0a:	0023      	movs	r3, r4
10044f0c:	f001 f990 	bl	10046230 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10044f10:	693b      	ldr	r3, [r7, #16]
10044f12:	2220      	movs	r2, #32
10044f14:	4013      	ands	r3, r2
10044f16:	d009      	beq.n	10044f2c <I2C_Mem_ISR_IT+0x228>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10044f18:	687b      	ldr	r3, [r7, #4]
10044f1a:	2220      	movs	r2, #32
10044f1c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10044f1e:	d005      	beq.n	10044f2c <I2C_Mem_ISR_IT+0x228>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
10044f20:	693a      	ldr	r2, [r7, #16]
10044f22:	68fb      	ldr	r3, [r7, #12]
10044f24:	0011      	movs	r1, r2
10044f26:	0018      	movs	r0, r3
10044f28:	f000 fd68 	bl	100459fc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10044f2c:	68fb      	ldr	r3, [r7, #12]
10044f2e:	2240      	movs	r2, #64	@ 0x40
10044f30:	2100      	movs	r1, #0
10044f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10044f34:	2300      	movs	r3, #0
}
10044f36:	0018      	movs	r0, r3
10044f38:	46bd      	mov	sp, r7
10044f3a:	b007      	add	sp, #28
10044f3c:	bd90      	pop	{r4, r7, pc}
10044f3e:	46c0      	nop			@ (mov r8, r8)
10044f40:	80002000 	.word	0x80002000
10044f44:	80002400 	.word	0x80002400

10044f48 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10044f48:	b580      	push	{r7, lr}
10044f4a:	b086      	sub	sp, #24
10044f4c:	af00      	add	r7, sp, #0
10044f4e:	60f8      	str	r0, [r7, #12]
10044f50:	60b9      	str	r1, [r7, #8]
10044f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10044f54:	68fb      	ldr	r3, [r7, #12]
10044f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10044f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10044f5a:	68bb      	ldr	r3, [r7, #8]
10044f5c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
10044f5e:	68fb      	ldr	r3, [r7, #12]
10044f60:	2240      	movs	r2, #64	@ 0x40
10044f62:	5c9b      	ldrb	r3, [r3, r2]
10044f64:	2b01      	cmp	r3, #1
10044f66:	d101      	bne.n	10044f6c <I2C_Slave_ISR_IT+0x24>
10044f68:	2302      	movs	r3, #2
10044f6a:	e0e7      	b.n	1004513c <I2C_Slave_ISR_IT+0x1f4>
10044f6c:	68fb      	ldr	r3, [r7, #12]
10044f6e:	2240      	movs	r2, #64	@ 0x40
10044f70:	2101      	movs	r1, #1
10044f72:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10044f74:	693b      	ldr	r3, [r7, #16]
10044f76:	2220      	movs	r2, #32
10044f78:	4013      	ands	r3, r2
10044f7a:	d00a      	beq.n	10044f92 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10044f7c:	687b      	ldr	r3, [r7, #4]
10044f7e:	2220      	movs	r2, #32
10044f80:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10044f82:	d006      	beq.n	10044f92 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10044f84:	693a      	ldr	r2, [r7, #16]
10044f86:	68fb      	ldr	r3, [r7, #12]
10044f88:	0011      	movs	r1, r2
10044f8a:	0018      	movs	r0, r3
10044f8c:	f000 fe04 	bl	10045b98 <I2C_ITSlaveCplt>
10044f90:	e0cf      	b.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10044f92:	693b      	ldr	r3, [r7, #16]
10044f94:	2210      	movs	r2, #16
10044f96:	4013      	ands	r3, r2
10044f98:	d052      	beq.n	10045040 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10044f9a:	687b      	ldr	r3, [r7, #4]
10044f9c:	2210      	movs	r2, #16
10044f9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10044fa0:	d04e      	beq.n	10045040 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10044fa2:	68fb      	ldr	r3, [r7, #12]
10044fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10044fa6:	b29b      	uxth	r3, r3
10044fa8:	2b00      	cmp	r3, #0
10044faa:	d12d      	bne.n	10045008 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10044fac:	68fb      	ldr	r3, [r7, #12]
10044fae:	2241      	movs	r2, #65	@ 0x41
10044fb0:	5c9b      	ldrb	r3, [r3, r2]
10044fb2:	b2db      	uxtb	r3, r3
10044fb4:	2b28      	cmp	r3, #40	@ 0x28
10044fb6:	d10b      	bne.n	10044fd0 <I2C_Slave_ISR_IT+0x88>
10044fb8:	697a      	ldr	r2, [r7, #20]
10044fba:	2380      	movs	r3, #128	@ 0x80
10044fbc:	049b      	lsls	r3, r3, #18
10044fbe:	429a      	cmp	r2, r3
10044fc0:	d106      	bne.n	10044fd0 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10044fc2:	693a      	ldr	r2, [r7, #16]
10044fc4:	68fb      	ldr	r3, [r7, #12]
10044fc6:	0011      	movs	r1, r2
10044fc8:	0018      	movs	r0, r3
10044fca:	f000 ff6d 	bl	10045ea8 <I2C_ITListenCplt>
10044fce:	e036      	b.n	1004503e <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10044fd0:	68fb      	ldr	r3, [r7, #12]
10044fd2:	2241      	movs	r2, #65	@ 0x41
10044fd4:	5c9b      	ldrb	r3, [r3, r2]
10044fd6:	b2db      	uxtb	r3, r3
10044fd8:	2b29      	cmp	r3, #41	@ 0x29
10044fda:	d110      	bne.n	10044ffe <I2C_Slave_ISR_IT+0xb6>
10044fdc:	697b      	ldr	r3, [r7, #20]
10044fde:	4a59      	ldr	r2, [pc, #356]	@ (10045144 <I2C_Slave_ISR_IT+0x1fc>)
10044fe0:	4293      	cmp	r3, r2
10044fe2:	d00c      	beq.n	10044ffe <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10044fe4:	68fb      	ldr	r3, [r7, #12]
10044fe6:	681b      	ldr	r3, [r3, #0]
10044fe8:	2210      	movs	r2, #16
10044fea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10044fec:	68fb      	ldr	r3, [r7, #12]
10044fee:	0018      	movs	r0, r3
10044ff0:	f001 f8dd 	bl	100461ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10044ff4:	68fb      	ldr	r3, [r7, #12]
10044ff6:	0018      	movs	r0, r3
10044ff8:	f000 fc9c 	bl	10045934 <I2C_ITSlaveSeqCplt>
10044ffc:	e01f      	b.n	1004503e <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10044ffe:	68fb      	ldr	r3, [r7, #12]
10045000:	681b      	ldr	r3, [r3, #0]
10045002:	2210      	movs	r2, #16
10045004:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10045006:	e091      	b.n	1004512c <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045008:	68fb      	ldr	r3, [r7, #12]
1004500a:	681b      	ldr	r3, [r3, #0]
1004500c:	2210      	movs	r2, #16
1004500e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045010:	68fb      	ldr	r3, [r7, #12]
10045012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045014:	2204      	movs	r2, #4
10045016:	431a      	orrs	r2, r3
10045018:	68fb      	ldr	r3, [r7, #12]
1004501a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
1004501c:	697b      	ldr	r3, [r7, #20]
1004501e:	2b00      	cmp	r3, #0
10045020:	d005      	beq.n	1004502e <I2C_Slave_ISR_IT+0xe6>
10045022:	697a      	ldr	r2, [r7, #20]
10045024:	2380      	movs	r3, #128	@ 0x80
10045026:	045b      	lsls	r3, r3, #17
10045028:	429a      	cmp	r2, r3
1004502a:	d000      	beq.n	1004502e <I2C_Slave_ISR_IT+0xe6>
1004502c:	e07e      	b.n	1004512c <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
1004502e:	68fb      	ldr	r3, [r7, #12]
10045030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045032:	68fb      	ldr	r3, [r7, #12]
10045034:	0011      	movs	r1, r2
10045036:	0018      	movs	r0, r3
10045038:	f000 ff8e 	bl	10045f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
1004503c:	e076      	b.n	1004512c <I2C_Slave_ISR_IT+0x1e4>
1004503e:	e075      	b.n	1004512c <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10045040:	693b      	ldr	r3, [r7, #16]
10045042:	2204      	movs	r2, #4
10045044:	4013      	ands	r3, r2
10045046:	d02f      	beq.n	100450a8 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10045048:	687b      	ldr	r3, [r7, #4]
1004504a:	2204      	movs	r2, #4
1004504c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
1004504e:	d02b      	beq.n	100450a8 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
10045050:	68fb      	ldr	r3, [r7, #12]
10045052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045054:	b29b      	uxth	r3, r3
10045056:	2b00      	cmp	r3, #0
10045058:	d018      	beq.n	1004508c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004505a:	68fb      	ldr	r3, [r7, #12]
1004505c:	681b      	ldr	r3, [r3, #0]
1004505e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045060:	68fb      	ldr	r3, [r7, #12]
10045062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045064:	b2d2      	uxtb	r2, r2
10045066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10045068:	68fb      	ldr	r3, [r7, #12]
1004506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004506c:	1c5a      	adds	r2, r3, #1
1004506e:	68fb      	ldr	r3, [r7, #12]
10045070:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10045072:	68fb      	ldr	r3, [r7, #12]
10045074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045076:	3b01      	subs	r3, #1
10045078:	b29a      	uxth	r2, r3
1004507a:	68fb      	ldr	r3, [r7, #12]
1004507c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1004507e:	68fb      	ldr	r3, [r7, #12]
10045080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045082:	b29b      	uxth	r3, r3
10045084:	3b01      	subs	r3, #1
10045086:	b29a      	uxth	r2, r3
10045088:	68fb      	ldr	r3, [r7, #12]
1004508a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
1004508c:	68fb      	ldr	r3, [r7, #12]
1004508e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045090:	b29b      	uxth	r3, r3
10045092:	2b00      	cmp	r3, #0
10045094:	d14c      	bne.n	10045130 <I2C_Slave_ISR_IT+0x1e8>
10045096:	697b      	ldr	r3, [r7, #20]
10045098:	4a2a      	ldr	r2, [pc, #168]	@ (10045144 <I2C_Slave_ISR_IT+0x1fc>)
1004509a:	4293      	cmp	r3, r2
1004509c:	d048      	beq.n	10045130 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
1004509e:	68fb      	ldr	r3, [r7, #12]
100450a0:	0018      	movs	r0, r3
100450a2:	f000 fc47 	bl	10045934 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
100450a6:	e043      	b.n	10045130 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
100450a8:	693b      	ldr	r3, [r7, #16]
100450aa:	2208      	movs	r2, #8
100450ac:	4013      	ands	r3, r2
100450ae:	d00a      	beq.n	100450c6 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
100450b0:	687b      	ldr	r3, [r7, #4]
100450b2:	2208      	movs	r2, #8
100450b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
100450b6:	d006      	beq.n	100450c6 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
100450b8:	693a      	ldr	r2, [r7, #16]
100450ba:	68fb      	ldr	r3, [r7, #12]
100450bc:	0011      	movs	r1, r2
100450be:	0018      	movs	r0, r3
100450c0:	f000 fb52 	bl	10045768 <I2C_ITAddrCplt>
100450c4:	e035      	b.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100450c6:	693b      	ldr	r3, [r7, #16]
100450c8:	2202      	movs	r2, #2
100450ca:	4013      	ands	r3, r2
100450cc:	d031      	beq.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
100450ce:	687b      	ldr	r3, [r7, #4]
100450d0:	2202      	movs	r2, #2
100450d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100450d4:	d02d      	beq.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
100450d6:	68fb      	ldr	r3, [r7, #12]
100450d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100450da:	b29b      	uxth	r3, r3
100450dc:	2b00      	cmp	r3, #0
100450de:	d018      	beq.n	10045112 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
100450e0:	68fb      	ldr	r3, [r7, #12]
100450e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100450e4:	781a      	ldrb	r2, [r3, #0]
100450e6:	68fb      	ldr	r3, [r7, #12]
100450e8:	681b      	ldr	r3, [r3, #0]
100450ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100450ec:	68fb      	ldr	r3, [r7, #12]
100450ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100450f0:	1c5a      	adds	r2, r3, #1
100450f2:	68fb      	ldr	r3, [r7, #12]
100450f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
100450f6:	68fb      	ldr	r3, [r7, #12]
100450f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100450fa:	b29b      	uxth	r3, r3
100450fc:	3b01      	subs	r3, #1
100450fe:	b29a      	uxth	r2, r3
10045100:	68fb      	ldr	r3, [r7, #12]
10045102:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10045104:	68fb      	ldr	r3, [r7, #12]
10045106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045108:	3b01      	subs	r3, #1
1004510a:	b29a      	uxth	r2, r3
1004510c:	68fb      	ldr	r3, [r7, #12]
1004510e:	851a      	strh	r2, [r3, #40]	@ 0x28
10045110:	e00f      	b.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10045112:	697a      	ldr	r2, [r7, #20]
10045114:	2380      	movs	r3, #128	@ 0x80
10045116:	045b      	lsls	r3, r3, #17
10045118:	429a      	cmp	r2, r3
1004511a:	d002      	beq.n	10045122 <I2C_Slave_ISR_IT+0x1da>
1004511c:	697b      	ldr	r3, [r7, #20]
1004511e:	2b00      	cmp	r3, #0
10045120:	d107      	bne.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10045122:	68fb      	ldr	r3, [r7, #12]
10045124:	0018      	movs	r0, r3
10045126:	f000 fc05 	bl	10045934 <I2C_ITSlaveSeqCplt>
1004512a:	e002      	b.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
1004512c:	46c0      	nop			@ (mov r8, r8)
1004512e:	e000      	b.n	10045132 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
10045130:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045132:	68fb      	ldr	r3, [r7, #12]
10045134:	2240      	movs	r2, #64	@ 0x40
10045136:	2100      	movs	r1, #0
10045138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004513a:	2300      	movs	r3, #0
}
1004513c:	0018      	movs	r0, r3
1004513e:	46bd      	mov	sp, r7
10045140:	b006      	add	sp, #24
10045142:	bd80      	pop	{r7, pc}
10045144:	ffff0000 	.word	0xffff0000

10045148 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
10045148:	b590      	push	{r4, r7, lr}
1004514a:	b089      	sub	sp, #36	@ 0x24
1004514c:	af02      	add	r7, sp, #8
1004514e:	60f8      	str	r0, [r7, #12]
10045150:	60b9      	str	r1, [r7, #8]
10045152:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
10045154:	68fb      	ldr	r3, [r7, #12]
10045156:	2240      	movs	r2, #64	@ 0x40
10045158:	5c9b      	ldrb	r3, [r3, r2]
1004515a:	2b01      	cmp	r3, #1
1004515c:	d101      	bne.n	10045162 <I2C_Master_ISR_DMA+0x1a>
1004515e:	2302      	movs	r3, #2
10045160:	e0e7      	b.n	10045332 <I2C_Master_ISR_DMA+0x1ea>
10045162:	68fb      	ldr	r3, [r7, #12]
10045164:	2240      	movs	r2, #64	@ 0x40
10045166:	2101      	movs	r1, #1
10045168:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
1004516a:	68bb      	ldr	r3, [r7, #8]
1004516c:	2210      	movs	r2, #16
1004516e:	4013      	ands	r3, r2
10045170:	d017      	beq.n	100451a2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10045172:	687b      	ldr	r3, [r7, #4]
10045174:	2210      	movs	r2, #16
10045176:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045178:	d013      	beq.n	100451a2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004517a:	68fb      	ldr	r3, [r7, #12]
1004517c:	681b      	ldr	r3, [r3, #0]
1004517e:	2210      	movs	r2, #16
10045180:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045182:	68fb      	ldr	r3, [r7, #12]
10045184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045186:	2204      	movs	r2, #4
10045188:	431a      	orrs	r2, r3
1004518a:	68fb      	ldr	r3, [r7, #12]
1004518c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
1004518e:	68fb      	ldr	r3, [r7, #12]
10045190:	2120      	movs	r1, #32
10045192:	0018      	movs	r0, r3
10045194:	f001 f886 	bl	100462a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10045198:	68fb      	ldr	r3, [r7, #12]
1004519a:	0018      	movs	r0, r3
1004519c:	f001 f807 	bl	100461ae <I2C_Flush_TXDR>
100451a0:	e0c2      	b.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
100451a2:	68bb      	ldr	r3, [r7, #8]
100451a4:	2280      	movs	r2, #128	@ 0x80
100451a6:	4013      	ands	r3, r2
100451a8:	d100      	bne.n	100451ac <I2C_Master_ISR_DMA+0x64>
100451aa:	e07c      	b.n	100452a6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
100451ac:	687b      	ldr	r3, [r7, #4]
100451ae:	2240      	movs	r2, #64	@ 0x40
100451b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
100451b2:	d100      	bne.n	100451b6 <I2C_Master_ISR_DMA+0x6e>
100451b4:	e077      	b.n	100452a6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
100451b6:	68fb      	ldr	r3, [r7, #12]
100451b8:	681b      	ldr	r3, [r3, #0]
100451ba:	681a      	ldr	r2, [r3, #0]
100451bc:	68fb      	ldr	r3, [r7, #12]
100451be:	681b      	ldr	r3, [r3, #0]
100451c0:	2140      	movs	r1, #64	@ 0x40
100451c2:	438a      	bics	r2, r1
100451c4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
100451c6:	68fb      	ldr	r3, [r7, #12]
100451c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100451ca:	b29b      	uxth	r3, r3
100451cc:	2b00      	cmp	r3, #0
100451ce:	d055      	beq.n	1004527c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
100451d0:	68fb      	ldr	r3, [r7, #12]
100451d2:	681b      	ldr	r3, [r3, #0]
100451d4:	685b      	ldr	r3, [r3, #4]
100451d6:	b29a      	uxth	r2, r3
100451d8:	2312      	movs	r3, #18
100451da:	18fb      	adds	r3, r7, r3
100451dc:	0592      	lsls	r2, r2, #22
100451de:	0d92      	lsrs	r2, r2, #22
100451e0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100451e2:	68fb      	ldr	r3, [r7, #12]
100451e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100451e6:	b29b      	uxth	r3, r3
100451e8:	2bff      	cmp	r3, #255	@ 0xff
100451ea:	d906      	bls.n	100451fa <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100451ec:	68fb      	ldr	r3, [r7, #12]
100451ee:	22ff      	movs	r2, #255	@ 0xff
100451f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
100451f2:	2380      	movs	r3, #128	@ 0x80
100451f4:	045b      	lsls	r3, r3, #17
100451f6:	617b      	str	r3, [r7, #20]
100451f8:	e010      	b.n	1004521c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100451fa:	68fb      	ldr	r3, [r7, #12]
100451fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100451fe:	b29a      	uxth	r2, r3
10045200:	68fb      	ldr	r3, [r7, #12]
10045202:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10045204:	68fb      	ldr	r3, [r7, #12]
10045206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045208:	4a4c      	ldr	r2, [pc, #304]	@ (1004533c <I2C_Master_ISR_DMA+0x1f4>)
1004520a:	4293      	cmp	r3, r2
1004520c:	d003      	beq.n	10045216 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
1004520e:	68fb      	ldr	r3, [r7, #12]
10045210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045212:	617b      	str	r3, [r7, #20]
10045214:	e002      	b.n	1004521c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
10045216:	2380      	movs	r3, #128	@ 0x80
10045218:	049b      	lsls	r3, r3, #18
1004521a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
1004521c:	68fb      	ldr	r3, [r7, #12]
1004521e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045220:	b2da      	uxtb	r2, r3
10045222:	697c      	ldr	r4, [r7, #20]
10045224:	2312      	movs	r3, #18
10045226:	18fb      	adds	r3, r7, r3
10045228:	8819      	ldrh	r1, [r3, #0]
1004522a:	68f8      	ldr	r0, [r7, #12]
1004522c:	2300      	movs	r3, #0
1004522e:	9300      	str	r3, [sp, #0]
10045230:	0023      	movs	r3, r4
10045232:	f000 fffd 	bl	10046230 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10045236:	68fb      	ldr	r3, [r7, #12]
10045238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004523a:	b29a      	uxth	r2, r3
1004523c:	68fb      	ldr	r3, [r7, #12]
1004523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045240:	1ad3      	subs	r3, r2, r3
10045242:	b29a      	uxth	r2, r3
10045244:	68fb      	ldr	r3, [r7, #12]
10045246:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045248:	68fb      	ldr	r3, [r7, #12]
1004524a:	2241      	movs	r2, #65	@ 0x41
1004524c:	5c9b      	ldrb	r3, [r3, r2]
1004524e:	b2db      	uxtb	r3, r3
10045250:	2b22      	cmp	r3, #34	@ 0x22
10045252:	d109      	bne.n	10045268 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10045254:	68fb      	ldr	r3, [r7, #12]
10045256:	681b      	ldr	r3, [r3, #0]
10045258:	681a      	ldr	r2, [r3, #0]
1004525a:	68fb      	ldr	r3, [r7, #12]
1004525c:	681b      	ldr	r3, [r3, #0]
1004525e:	2180      	movs	r1, #128	@ 0x80
10045260:	0209      	lsls	r1, r1, #8
10045262:	430a      	orrs	r2, r1
10045264:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10045266:	e05f      	b.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10045268:	68fb      	ldr	r3, [r7, #12]
1004526a:	681b      	ldr	r3, [r3, #0]
1004526c:	681a      	ldr	r2, [r3, #0]
1004526e:	68fb      	ldr	r3, [r7, #12]
10045270:	681b      	ldr	r3, [r3, #0]
10045272:	2180      	movs	r1, #128	@ 0x80
10045274:	01c9      	lsls	r1, r1, #7
10045276:	430a      	orrs	r2, r1
10045278:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
1004527a:	e055      	b.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
1004527c:	68fb      	ldr	r3, [r7, #12]
1004527e:	681b      	ldr	r3, [r3, #0]
10045280:	685a      	ldr	r2, [r3, #4]
10045282:	2380      	movs	r3, #128	@ 0x80
10045284:	049b      	lsls	r3, r3, #18
10045286:	401a      	ands	r2, r3
10045288:	2380      	movs	r3, #128	@ 0x80
1004528a:	049b      	lsls	r3, r3, #18
1004528c:	429a      	cmp	r2, r3
1004528e:	d004      	beq.n	1004529a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10045290:	68fb      	ldr	r3, [r7, #12]
10045292:	0018      	movs	r0, r3
10045294:	f000 fb0c 	bl	100458b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
10045298:	e046      	b.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
1004529a:	68fb      	ldr	r3, [r7, #12]
1004529c:	2140      	movs	r1, #64	@ 0x40
1004529e:	0018      	movs	r0, r3
100452a0:	f000 fe5a 	bl	10045f58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
100452a4:	e040      	b.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
100452a6:	68bb      	ldr	r3, [r7, #8]
100452a8:	2240      	movs	r2, #64	@ 0x40
100452aa:	4013      	ands	r3, r2
100452ac:	d02c      	beq.n	10045308 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
100452ae:	687b      	ldr	r3, [r7, #4]
100452b0:	2240      	movs	r2, #64	@ 0x40
100452b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
100452b4:	d028      	beq.n	10045308 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
100452b6:	68fb      	ldr	r3, [r7, #12]
100452b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100452ba:	b29b      	uxth	r3, r3
100452bc:	2b00      	cmp	r3, #0
100452be:	d11d      	bne.n	100452fc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
100452c0:	68fb      	ldr	r3, [r7, #12]
100452c2:	681b      	ldr	r3, [r3, #0]
100452c4:	685a      	ldr	r2, [r3, #4]
100452c6:	2380      	movs	r3, #128	@ 0x80
100452c8:	049b      	lsls	r3, r3, #18
100452ca:	401a      	ands	r2, r3
100452cc:	2380      	movs	r3, #128	@ 0x80
100452ce:	049b      	lsls	r3, r3, #18
100452d0:	429a      	cmp	r2, r3
100452d2:	d028      	beq.n	10045326 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
100452d4:	68fb      	ldr	r3, [r7, #12]
100452d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100452d8:	4a18      	ldr	r2, [pc, #96]	@ (1004533c <I2C_Master_ISR_DMA+0x1f4>)
100452da:	4293      	cmp	r3, r2
100452dc:	d109      	bne.n	100452f2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
100452de:	68fb      	ldr	r3, [r7, #12]
100452e0:	681b      	ldr	r3, [r3, #0]
100452e2:	685a      	ldr	r2, [r3, #4]
100452e4:	68fb      	ldr	r3, [r7, #12]
100452e6:	681b      	ldr	r3, [r3, #0]
100452e8:	2180      	movs	r1, #128	@ 0x80
100452ea:	01c9      	lsls	r1, r1, #7
100452ec:	430a      	orrs	r2, r1
100452ee:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
100452f0:	e019      	b.n	10045326 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
100452f2:	68fb      	ldr	r3, [r7, #12]
100452f4:	0018      	movs	r0, r3
100452f6:	f000 fadb 	bl	100458b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
100452fa:	e014      	b.n	10045326 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
100452fc:	68fb      	ldr	r3, [r7, #12]
100452fe:	2140      	movs	r1, #64	@ 0x40
10045300:	0018      	movs	r0, r3
10045302:	f000 fe29 	bl	10045f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10045306:	e00e      	b.n	10045326 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10045308:	68bb      	ldr	r3, [r7, #8]
1004530a:	2220      	movs	r2, #32
1004530c:	4013      	ands	r3, r2
1004530e:	d00b      	beq.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10045310:	687b      	ldr	r3, [r7, #4]
10045312:	2220      	movs	r2, #32
10045314:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10045316:	d007      	beq.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10045318:	68ba      	ldr	r2, [r7, #8]
1004531a:	68fb      	ldr	r3, [r7, #12]
1004531c:	0011      	movs	r1, r2
1004531e:	0018      	movs	r0, r3
10045320:	f000 fb6c 	bl	100459fc <I2C_ITMasterCplt>
10045324:	e000      	b.n	10045328 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
10045326:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045328:	68fb      	ldr	r3, [r7, #12]
1004532a:	2240      	movs	r2, #64	@ 0x40
1004532c:	2100      	movs	r1, #0
1004532e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045330:	2300      	movs	r3, #0
}
10045332:	0018      	movs	r0, r3
10045334:	46bd      	mov	sp, r7
10045336:	b007      	add	sp, #28
10045338:	bd90      	pop	{r4, r7, pc}
1004533a:	46c0      	nop			@ (mov r8, r8)
1004533c:	ffff0000 	.word	0xffff0000

10045340 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
10045340:	b590      	push	{r4, r7, lr}
10045342:	b089      	sub	sp, #36	@ 0x24
10045344:	af02      	add	r7, sp, #8
10045346:	60f8      	str	r0, [r7, #12]
10045348:	60b9      	str	r1, [r7, #8]
1004534a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
1004534c:	4b90      	ldr	r3, [pc, #576]	@ (10045590 <I2C_Mem_ISR_DMA+0x250>)
1004534e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10045350:	68fb      	ldr	r3, [r7, #12]
10045352:	2240      	movs	r2, #64	@ 0x40
10045354:	5c9b      	ldrb	r3, [r3, r2]
10045356:	2b01      	cmp	r3, #1
10045358:	d101      	bne.n	1004535e <I2C_Mem_ISR_DMA+0x1e>
1004535a:	2302      	movs	r3, #2
1004535c:	e113      	b.n	10045586 <I2C_Mem_ISR_DMA+0x246>
1004535e:	68fb      	ldr	r3, [r7, #12]
10045360:	2240      	movs	r2, #64	@ 0x40
10045362:	2101      	movs	r1, #1
10045364:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045366:	68bb      	ldr	r3, [r7, #8]
10045368:	2210      	movs	r2, #16
1004536a:	4013      	ands	r3, r2
1004536c:	d017      	beq.n	1004539e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1004536e:	687b      	ldr	r3, [r7, #4]
10045370:	2210      	movs	r2, #16
10045372:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10045374:	d013      	beq.n	1004539e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045376:	68fb      	ldr	r3, [r7, #12]
10045378:	681b      	ldr	r3, [r3, #0]
1004537a:	2210      	movs	r2, #16
1004537c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004537e:	68fb      	ldr	r3, [r7, #12]
10045380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045382:	2204      	movs	r2, #4
10045384:	431a      	orrs	r2, r3
10045386:	68fb      	ldr	r3, [r7, #12]
10045388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
1004538a:	68fb      	ldr	r3, [r7, #12]
1004538c:	2120      	movs	r1, #32
1004538e:	0018      	movs	r0, r3
10045390:	f000 ff88 	bl	100462a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10045394:	68fb      	ldr	r3, [r7, #12]
10045396:	0018      	movs	r0, r3
10045398:	f000 ff09 	bl	100461ae <I2C_Flush_TXDR>
1004539c:	e0ee      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
1004539e:	68bb      	ldr	r3, [r7, #8]
100453a0:	2202      	movs	r2, #2
100453a2:	4013      	ands	r3, r2
100453a4:	d00d      	beq.n	100453c2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
100453a6:	687b      	ldr	r3, [r7, #4]
100453a8:	2202      	movs	r2, #2
100453aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
100453ac:	d009      	beq.n	100453c2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
100453ae:	68fb      	ldr	r3, [r7, #12]
100453b0:	681b      	ldr	r3, [r3, #0]
100453b2:	68fa      	ldr	r2, [r7, #12]
100453b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
100453b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
100453b8:	68fb      	ldr	r3, [r7, #12]
100453ba:	2201      	movs	r2, #1
100453bc:	4252      	negs	r2, r2
100453be:	651a      	str	r2, [r3, #80]	@ 0x50
100453c0:	e0dc      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
100453c2:	68bb      	ldr	r3, [r7, #8]
100453c4:	2280      	movs	r2, #128	@ 0x80
100453c6:	4013      	ands	r3, r2
100453c8:	d063      	beq.n	10045492 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
100453ca:	687b      	ldr	r3, [r7, #4]
100453cc:	2240      	movs	r2, #64	@ 0x40
100453ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
100453d0:	d05f      	beq.n	10045492 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100453d2:	68fb      	ldr	r3, [r7, #12]
100453d4:	2101      	movs	r1, #1
100453d6:	0018      	movs	r0, r3
100453d8:	f000 ffee 	bl	100463b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
100453dc:	68fb      	ldr	r3, [r7, #12]
100453de:	2110      	movs	r1, #16
100453e0:	0018      	movs	r0, r3
100453e2:	f000 ff5f 	bl	100462a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
100453e6:	68fb      	ldr	r3, [r7, #12]
100453e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100453ea:	b29b      	uxth	r3, r3
100453ec:	2b00      	cmp	r3, #0
100453ee:	d04a      	beq.n	10045486 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100453f0:	68fb      	ldr	r3, [r7, #12]
100453f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100453f4:	b29b      	uxth	r3, r3
100453f6:	2bff      	cmp	r3, #255	@ 0xff
100453f8:	d910      	bls.n	1004541c <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100453fa:	68fb      	ldr	r3, [r7, #12]
100453fc:	22ff      	movs	r2, #255	@ 0xff
100453fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10045400:	68fb      	ldr	r3, [r7, #12]
10045402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10045404:	b299      	uxth	r1, r3
10045406:	68fb      	ldr	r3, [r7, #12]
10045408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004540a:	b2da      	uxtb	r2, r3
1004540c:	2380      	movs	r3, #128	@ 0x80
1004540e:	045b      	lsls	r3, r3, #17
10045410:	68f8      	ldr	r0, [r7, #12]
10045412:	2400      	movs	r4, #0
10045414:	9400      	str	r4, [sp, #0]
10045416:	f000 ff0b 	bl	10046230 <I2C_TransferConfig>
1004541a:	e011      	b.n	10045440 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
1004541c:	68fb      	ldr	r3, [r7, #12]
1004541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045420:	b29a      	uxth	r2, r3
10045422:	68fb      	ldr	r3, [r7, #12]
10045424:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10045426:	68fb      	ldr	r3, [r7, #12]
10045428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004542a:	b299      	uxth	r1, r3
1004542c:	68fb      	ldr	r3, [r7, #12]
1004542e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045430:	b2da      	uxtb	r2, r3
10045432:	2380      	movs	r3, #128	@ 0x80
10045434:	049b      	lsls	r3, r3, #18
10045436:	68f8      	ldr	r0, [r7, #12]
10045438:	2400      	movs	r4, #0
1004543a:	9400      	str	r4, [sp, #0]
1004543c:	f000 fef8 	bl	10046230 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10045440:	68fb      	ldr	r3, [r7, #12]
10045442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045444:	b29a      	uxth	r2, r3
10045446:	68fb      	ldr	r3, [r7, #12]
10045448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004544a:	1ad3      	subs	r3, r2, r3
1004544c:	b29a      	uxth	r2, r3
1004544e:	68fb      	ldr	r3, [r7, #12]
10045450:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045452:	68fb      	ldr	r3, [r7, #12]
10045454:	2241      	movs	r2, #65	@ 0x41
10045456:	5c9b      	ldrb	r3, [r3, r2]
10045458:	b2db      	uxtb	r3, r3
1004545a:	2b22      	cmp	r3, #34	@ 0x22
1004545c:	d109      	bne.n	10045472 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
1004545e:	68fb      	ldr	r3, [r7, #12]
10045460:	681b      	ldr	r3, [r3, #0]
10045462:	681a      	ldr	r2, [r3, #0]
10045464:	68fb      	ldr	r3, [r7, #12]
10045466:	681b      	ldr	r3, [r3, #0]
10045468:	2180      	movs	r1, #128	@ 0x80
1004546a:	0209      	lsls	r1, r1, #8
1004546c:	430a      	orrs	r2, r1
1004546e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10045470:	e084      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10045472:	68fb      	ldr	r3, [r7, #12]
10045474:	681b      	ldr	r3, [r3, #0]
10045476:	681a      	ldr	r2, [r3, #0]
10045478:	68fb      	ldr	r3, [r7, #12]
1004547a:	681b      	ldr	r3, [r3, #0]
1004547c:	2180      	movs	r1, #128	@ 0x80
1004547e:	01c9      	lsls	r1, r1, #7
10045480:	430a      	orrs	r2, r1
10045482:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10045484:	e07a      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10045486:	68fb      	ldr	r3, [r7, #12]
10045488:	2140      	movs	r1, #64	@ 0x40
1004548a:	0018      	movs	r0, r3
1004548c:	f000 fd64 	bl	10045f58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10045490:	e074      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10045492:	68bb      	ldr	r3, [r7, #8]
10045494:	2240      	movs	r2, #64	@ 0x40
10045496:	4013      	ands	r3, r2
10045498:	d062      	beq.n	10045560 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004549a:	687b      	ldr	r3, [r7, #4]
1004549c:	2240      	movs	r2, #64	@ 0x40
1004549e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
100454a0:	d05e      	beq.n	10045560 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100454a2:	68fb      	ldr	r3, [r7, #12]
100454a4:	2101      	movs	r1, #1
100454a6:	0018      	movs	r0, r3
100454a8:	f000 ff86 	bl	100463b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
100454ac:	68fb      	ldr	r3, [r7, #12]
100454ae:	2110      	movs	r1, #16
100454b0:	0018      	movs	r0, r3
100454b2:	f000 fef7 	bl	100462a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100454b6:	68fb      	ldr	r3, [r7, #12]
100454b8:	2241      	movs	r2, #65	@ 0x41
100454ba:	5c9b      	ldrb	r3, [r3, r2]
100454bc:	b2db      	uxtb	r3, r3
100454be:	2b22      	cmp	r3, #34	@ 0x22
100454c0:	d101      	bne.n	100454c6 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
100454c2:	4b34      	ldr	r3, [pc, #208]	@ (10045594 <I2C_Mem_ISR_DMA+0x254>)
100454c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
100454c6:	68fb      	ldr	r3, [r7, #12]
100454c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100454ca:	b29b      	uxth	r3, r3
100454cc:	2bff      	cmp	r3, #255	@ 0xff
100454ce:	d911      	bls.n	100454f4 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
100454d0:	68fb      	ldr	r3, [r7, #12]
100454d2:	22ff      	movs	r2, #255	@ 0xff
100454d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100454d6:	68fb      	ldr	r3, [r7, #12]
100454d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100454da:	b299      	uxth	r1, r3
100454dc:	68fb      	ldr	r3, [r7, #12]
100454de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100454e0:	b2da      	uxtb	r2, r3
100454e2:	2380      	movs	r3, #128	@ 0x80
100454e4:	045c      	lsls	r4, r3, #17
100454e6:	68f8      	ldr	r0, [r7, #12]
100454e8:	697b      	ldr	r3, [r7, #20]
100454ea:	9300      	str	r3, [sp, #0]
100454ec:	0023      	movs	r3, r4
100454ee:	f000 fe9f 	bl	10046230 <I2C_TransferConfig>
100454f2:	e012      	b.n	1004551a <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
100454f4:	68fb      	ldr	r3, [r7, #12]
100454f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100454f8:	b29a      	uxth	r2, r3
100454fa:	68fb      	ldr	r3, [r7, #12]
100454fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100454fe:	68fb      	ldr	r3, [r7, #12]
10045500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10045502:	b299      	uxth	r1, r3
10045504:	68fb      	ldr	r3, [r7, #12]
10045506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045508:	b2da      	uxtb	r2, r3
1004550a:	2380      	movs	r3, #128	@ 0x80
1004550c:	049c      	lsls	r4, r3, #18
1004550e:	68f8      	ldr	r0, [r7, #12]
10045510:	697b      	ldr	r3, [r7, #20]
10045512:	9300      	str	r3, [sp, #0]
10045514:	0023      	movs	r3, r4
10045516:	f000 fe8b 	bl	10046230 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
1004551a:	68fb      	ldr	r3, [r7, #12]
1004551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004551e:	b29a      	uxth	r2, r3
10045520:	68fb      	ldr	r3, [r7, #12]
10045522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045524:	1ad3      	subs	r3, r2, r3
10045526:	b29a      	uxth	r2, r3
10045528:	68fb      	ldr	r3, [r7, #12]
1004552a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004552c:	68fb      	ldr	r3, [r7, #12]
1004552e:	2241      	movs	r2, #65	@ 0x41
10045530:	5c9b      	ldrb	r3, [r3, r2]
10045532:	b2db      	uxtb	r3, r3
10045534:	2b22      	cmp	r3, #34	@ 0x22
10045536:	d109      	bne.n	1004554c <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10045538:	68fb      	ldr	r3, [r7, #12]
1004553a:	681b      	ldr	r3, [r3, #0]
1004553c:	681a      	ldr	r2, [r3, #0]
1004553e:	68fb      	ldr	r3, [r7, #12]
10045540:	681b      	ldr	r3, [r3, #0]
10045542:	2180      	movs	r1, #128	@ 0x80
10045544:	0209      	lsls	r1, r1, #8
10045546:	430a      	orrs	r2, r1
10045548:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004554a:	e017      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
1004554c:	68fb      	ldr	r3, [r7, #12]
1004554e:	681b      	ldr	r3, [r3, #0]
10045550:	681a      	ldr	r2, [r3, #0]
10045552:	68fb      	ldr	r3, [r7, #12]
10045554:	681b      	ldr	r3, [r3, #0]
10045556:	2180      	movs	r1, #128	@ 0x80
10045558:	01c9      	lsls	r1, r1, #7
1004555a:	430a      	orrs	r2, r1
1004555c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004555e:	e00d      	b.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10045560:	68bb      	ldr	r3, [r7, #8]
10045562:	2220      	movs	r2, #32
10045564:	4013      	ands	r3, r2
10045566:	d009      	beq.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10045568:	687b      	ldr	r3, [r7, #4]
1004556a:	2220      	movs	r2, #32
1004556c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
1004556e:	d005      	beq.n	1004557c <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10045570:	68ba      	ldr	r2, [r7, #8]
10045572:	68fb      	ldr	r3, [r7, #12]
10045574:	0011      	movs	r1, r2
10045576:	0018      	movs	r0, r3
10045578:	f000 fa40 	bl	100459fc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004557c:	68fb      	ldr	r3, [r7, #12]
1004557e:	2240      	movs	r2, #64	@ 0x40
10045580:	2100      	movs	r1, #0
10045582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045584:	2300      	movs	r3, #0
}
10045586:	0018      	movs	r0, r3
10045588:	46bd      	mov	sp, r7
1004558a:	b007      	add	sp, #28
1004558c:	bd90      	pop	{r4, r7, pc}
1004558e:	46c0      	nop			@ (mov r8, r8)
10045590:	80002000 	.word	0x80002000
10045594:	80002400 	.word	0x80002400

10045598 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
10045598:	b580      	push	{r7, lr}
1004559a:	b088      	sub	sp, #32
1004559c:	af00      	add	r7, sp, #0
1004559e:	60f8      	str	r0, [r7, #12]
100455a0:	60b9      	str	r1, [r7, #8]
100455a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100455a4:	68fb      	ldr	r3, [r7, #12]
100455a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100455a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
100455aa:	2300      	movs	r3, #0
100455ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
100455ae:	68fb      	ldr	r3, [r7, #12]
100455b0:	2240      	movs	r2, #64	@ 0x40
100455b2:	5c9b      	ldrb	r3, [r3, r2]
100455b4:	2b01      	cmp	r3, #1
100455b6:	d101      	bne.n	100455bc <I2C_Slave_ISR_DMA+0x24>
100455b8:	2302      	movs	r3, #2
100455ba:	e0ce      	b.n	1004575a <I2C_Slave_ISR_DMA+0x1c2>
100455bc:	68fb      	ldr	r3, [r7, #12]
100455be:	2240      	movs	r2, #64	@ 0x40
100455c0:	2101      	movs	r1, #1
100455c2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100455c4:	68bb      	ldr	r3, [r7, #8]
100455c6:	2220      	movs	r2, #32
100455c8:	4013      	ands	r3, r2
100455ca:	d00a      	beq.n	100455e2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100455cc:	687b      	ldr	r3, [r7, #4]
100455ce:	2220      	movs	r2, #32
100455d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100455d2:	d006      	beq.n	100455e2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
100455d4:	68ba      	ldr	r2, [r7, #8]
100455d6:	68fb      	ldr	r3, [r7, #12]
100455d8:	0011      	movs	r1, r2
100455da:	0018      	movs	r0, r3
100455dc:	f000 fadc 	bl	10045b98 <I2C_ITSlaveCplt>
100455e0:	e0b6      	b.n	10045750 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100455e2:	68bb      	ldr	r3, [r7, #8]
100455e4:	2210      	movs	r2, #16
100455e6:	4013      	ands	r3, r2
100455e8:	d100      	bne.n	100455ec <I2C_Slave_ISR_DMA+0x54>
100455ea:	e0a3      	b.n	10045734 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100455ec:	687b      	ldr	r3, [r7, #4]
100455ee:	2210      	movs	r2, #16
100455f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100455f2:	d100      	bne.n	100455f6 <I2C_Slave_ISR_DMA+0x5e>
100455f4:	e09e      	b.n	10045734 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100455f6:	687a      	ldr	r2, [r7, #4]
100455f8:	2380      	movs	r3, #128	@ 0x80
100455fa:	01db      	lsls	r3, r3, #7
100455fc:	4013      	ands	r3, r2
100455fe:	d105      	bne.n	1004560c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
10045600:	687a      	ldr	r2, [r7, #4]
10045602:	2380      	movs	r3, #128	@ 0x80
10045604:	021b      	lsls	r3, r3, #8
10045606:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10045608:	d100      	bne.n	1004560c <I2C_Slave_ISR_DMA+0x74>
1004560a:	e08c      	b.n	10045726 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
1004560c:	68fb      	ldr	r3, [r7, #12]
1004560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10045610:	2b00      	cmp	r3, #0
10045612:	d00c      	beq.n	1004562e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
10045614:	687a      	ldr	r2, [r7, #4]
10045616:	2380      	movs	r3, #128	@ 0x80
10045618:	021b      	lsls	r3, r3, #8
1004561a:	4013      	ands	r3, r2
1004561c:	d007      	beq.n	1004562e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
1004561e:	68fb      	ldr	r3, [r7, #12]
10045620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10045622:	681b      	ldr	r3, [r3, #0]
10045624:	685b      	ldr	r3, [r3, #4]
10045626:	2b00      	cmp	r3, #0
10045628:	d101      	bne.n	1004562e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
1004562a:	2301      	movs	r3, #1
1004562c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
1004562e:	68fb      	ldr	r3, [r7, #12]
10045630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045632:	2b00      	cmp	r3, #0
10045634:	d00c      	beq.n	10045650 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
10045636:	687a      	ldr	r2, [r7, #4]
10045638:	2380      	movs	r3, #128	@ 0x80
1004563a:	01db      	lsls	r3, r3, #7
1004563c:	4013      	ands	r3, r2
1004563e:	d007      	beq.n	10045650 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
10045640:	68fb      	ldr	r3, [r7, #12]
10045642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045644:	681b      	ldr	r3, [r3, #0]
10045646:	685b      	ldr	r3, [r3, #4]
10045648:	2b00      	cmp	r3, #0
1004564a:	d101      	bne.n	10045650 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
1004564c:	2301      	movs	r3, #1
1004564e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
10045650:	69fb      	ldr	r3, [r7, #28]
10045652:	2b01      	cmp	r3, #1
10045654:	d12d      	bne.n	100456b2 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10045656:	68fb      	ldr	r3, [r7, #12]
10045658:	2241      	movs	r2, #65	@ 0x41
1004565a:	5c9b      	ldrb	r3, [r3, r2]
1004565c:	b2db      	uxtb	r3, r3
1004565e:	2b28      	cmp	r3, #40	@ 0x28
10045660:	d10b      	bne.n	1004567a <I2C_Slave_ISR_DMA+0xe2>
10045662:	69ba      	ldr	r2, [r7, #24]
10045664:	2380      	movs	r3, #128	@ 0x80
10045666:	049b      	lsls	r3, r3, #18
10045668:	429a      	cmp	r2, r3
1004566a:	d106      	bne.n	1004567a <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
1004566c:	68ba      	ldr	r2, [r7, #8]
1004566e:	68fb      	ldr	r3, [r7, #12]
10045670:	0011      	movs	r1, r2
10045672:	0018      	movs	r0, r3
10045674:	f000 fc18 	bl	10045ea8 <I2C_ITListenCplt>
10045678:	e054      	b.n	10045724 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
1004567a:	68fb      	ldr	r3, [r7, #12]
1004567c:	2241      	movs	r2, #65	@ 0x41
1004567e:	5c9b      	ldrb	r3, [r3, r2]
10045680:	b2db      	uxtb	r3, r3
10045682:	2b29      	cmp	r3, #41	@ 0x29
10045684:	d110      	bne.n	100456a8 <I2C_Slave_ISR_DMA+0x110>
10045686:	69bb      	ldr	r3, [r7, #24]
10045688:	4a36      	ldr	r2, [pc, #216]	@ (10045764 <I2C_Slave_ISR_DMA+0x1cc>)
1004568a:	4293      	cmp	r3, r2
1004568c:	d00c      	beq.n	100456a8 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004568e:	68fb      	ldr	r3, [r7, #12]
10045690:	681b      	ldr	r3, [r3, #0]
10045692:	2210      	movs	r2, #16
10045694:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
10045696:	68fb      	ldr	r3, [r7, #12]
10045698:	0018      	movs	r0, r3
1004569a:	f000 fd88 	bl	100461ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
1004569e:	68fb      	ldr	r3, [r7, #12]
100456a0:	0018      	movs	r0, r3
100456a2:	f000 f947 	bl	10045934 <I2C_ITSlaveSeqCplt>
100456a6:	e03d      	b.n	10045724 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100456a8:	68fb      	ldr	r3, [r7, #12]
100456aa:	681b      	ldr	r3, [r3, #0]
100456ac:	2210      	movs	r2, #16
100456ae:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
100456b0:	e03e      	b.n	10045730 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100456b2:	68fb      	ldr	r3, [r7, #12]
100456b4:	681b      	ldr	r3, [r3, #0]
100456b6:	2210      	movs	r2, #16
100456b8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100456ba:	68fb      	ldr	r3, [r7, #12]
100456bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100456be:	2204      	movs	r2, #4
100456c0:	431a      	orrs	r2, r3
100456c2:	68fb      	ldr	r3, [r7, #12]
100456c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
100456c6:	2317      	movs	r3, #23
100456c8:	18fb      	adds	r3, r7, r3
100456ca:	68fa      	ldr	r2, [r7, #12]
100456cc:	2141      	movs	r1, #65	@ 0x41
100456ce:	5c52      	ldrb	r2, [r2, r1]
100456d0:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100456d2:	69bb      	ldr	r3, [r7, #24]
100456d4:	2b00      	cmp	r3, #0
100456d6:	d004      	beq.n	100456e2 <I2C_Slave_ISR_DMA+0x14a>
100456d8:	69ba      	ldr	r2, [r7, #24]
100456da:	2380      	movs	r3, #128	@ 0x80
100456dc:	045b      	lsls	r3, r3, #17
100456de:	429a      	cmp	r2, r3
100456e0:	d126      	bne.n	10045730 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
100456e2:	2217      	movs	r2, #23
100456e4:	18bb      	adds	r3, r7, r2
100456e6:	781b      	ldrb	r3, [r3, #0]
100456e8:	2b21      	cmp	r3, #33	@ 0x21
100456ea:	d003      	beq.n	100456f4 <I2C_Slave_ISR_DMA+0x15c>
100456ec:	18bb      	adds	r3, r7, r2
100456ee:	781b      	ldrb	r3, [r3, #0]
100456f0:	2b29      	cmp	r3, #41	@ 0x29
100456f2:	d103      	bne.n	100456fc <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100456f4:	68fb      	ldr	r3, [r7, #12]
100456f6:	2221      	movs	r2, #33	@ 0x21
100456f8:	631a      	str	r2, [r3, #48]	@ 0x30
100456fa:	e00b      	b.n	10045714 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
100456fc:	2217      	movs	r2, #23
100456fe:	18bb      	adds	r3, r7, r2
10045700:	781b      	ldrb	r3, [r3, #0]
10045702:	2b22      	cmp	r3, #34	@ 0x22
10045704:	d003      	beq.n	1004570e <I2C_Slave_ISR_DMA+0x176>
10045706:	18bb      	adds	r3, r7, r2
10045708:	781b      	ldrb	r3, [r3, #0]
1004570a:	2b2a      	cmp	r3, #42	@ 0x2a
1004570c:	d102      	bne.n	10045714 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
1004570e:	68fb      	ldr	r3, [r7, #12]
10045710:	2222      	movs	r2, #34	@ 0x22
10045712:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
10045714:	68fb      	ldr	r3, [r7, #12]
10045716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045718:	68fb      	ldr	r3, [r7, #12]
1004571a:	0011      	movs	r1, r2
1004571c:	0018      	movs	r0, r3
1004571e:	f000 fc1b 	bl	10045f58 <I2C_ITError>
      if (treatdmanack == 1U)
10045722:	e005      	b.n	10045730 <I2C_Slave_ISR_DMA+0x198>
10045724:	e004      	b.n	10045730 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045726:	68fb      	ldr	r3, [r7, #12]
10045728:	681b      	ldr	r3, [r3, #0]
1004572a:	2210      	movs	r2, #16
1004572c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
1004572e:	e00f      	b.n	10045750 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
10045730:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10045732:	e00d      	b.n	10045750 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10045734:	68bb      	ldr	r3, [r7, #8]
10045736:	2208      	movs	r2, #8
10045738:	4013      	ands	r3, r2
1004573a:	d009      	beq.n	10045750 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
1004573c:	687b      	ldr	r3, [r7, #4]
1004573e:	2208      	movs	r2, #8
10045740:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10045742:	d005      	beq.n	10045750 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
10045744:	68ba      	ldr	r2, [r7, #8]
10045746:	68fb      	ldr	r3, [r7, #12]
10045748:	0011      	movs	r1, r2
1004574a:	0018      	movs	r0, r3
1004574c:	f000 f80c 	bl	10045768 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045750:	68fb      	ldr	r3, [r7, #12]
10045752:	2240      	movs	r2, #64	@ 0x40
10045754:	2100      	movs	r1, #0
10045756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045758:	2300      	movs	r3, #0
}
1004575a:	0018      	movs	r0, r3
1004575c:	46bd      	mov	sp, r7
1004575e:	b008      	add	sp, #32
10045760:	bd80      	pop	{r7, pc}
10045762:	46c0      	nop			@ (mov r8, r8)
10045764:	ffff0000 	.word	0xffff0000

10045768 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10045768:	b5b0      	push	{r4, r5, r7, lr}
1004576a:	b084      	sub	sp, #16
1004576c:	af00      	add	r7, sp, #0
1004576e:	6078      	str	r0, [r7, #4]
10045770:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10045772:	687b      	ldr	r3, [r7, #4]
10045774:	2241      	movs	r2, #65	@ 0x41
10045776:	5c9b      	ldrb	r3, [r3, r2]
10045778:	b2db      	uxtb	r3, r3
1004577a:	001a      	movs	r2, r3
1004577c:	2328      	movs	r3, #40	@ 0x28
1004577e:	4013      	ands	r3, r2
10045780:	2b28      	cmp	r3, #40	@ 0x28
10045782:	d000      	beq.n	10045786 <I2C_ITAddrCplt+0x1e>
10045784:	e088      	b.n	10045898 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10045786:	687b      	ldr	r3, [r7, #4]
10045788:	681b      	ldr	r3, [r3, #0]
1004578a:	699b      	ldr	r3, [r3, #24]
1004578c:	0c1b      	lsrs	r3, r3, #16
1004578e:	b2da      	uxtb	r2, r3
10045790:	250f      	movs	r5, #15
10045792:	197b      	adds	r3, r7, r5
10045794:	2101      	movs	r1, #1
10045796:	400a      	ands	r2, r1
10045798:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
1004579a:	687b      	ldr	r3, [r7, #4]
1004579c:	681b      	ldr	r3, [r3, #0]
1004579e:	699b      	ldr	r3, [r3, #24]
100457a0:	0c1b      	lsrs	r3, r3, #16
100457a2:	b29a      	uxth	r2, r3
100457a4:	200c      	movs	r0, #12
100457a6:	183b      	adds	r3, r7, r0
100457a8:	21fe      	movs	r1, #254	@ 0xfe
100457aa:	400a      	ands	r2, r1
100457ac:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
100457ae:	687b      	ldr	r3, [r7, #4]
100457b0:	681b      	ldr	r3, [r3, #0]
100457b2:	689b      	ldr	r3, [r3, #8]
100457b4:	b29a      	uxth	r2, r3
100457b6:	240a      	movs	r4, #10
100457b8:	193b      	adds	r3, r7, r4
100457ba:	0592      	lsls	r2, r2, #22
100457bc:	0d92      	lsrs	r2, r2, #22
100457be:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
100457c0:	687b      	ldr	r3, [r7, #4]
100457c2:	681b      	ldr	r3, [r3, #0]
100457c4:	68db      	ldr	r3, [r3, #12]
100457c6:	b29a      	uxth	r2, r3
100457c8:	2308      	movs	r3, #8
100457ca:	18fb      	adds	r3, r7, r3
100457cc:	21fe      	movs	r1, #254	@ 0xfe
100457ce:	400a      	ands	r2, r1
100457d0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
100457d2:	687b      	ldr	r3, [r7, #4]
100457d4:	68db      	ldr	r3, [r3, #12]
100457d6:	2b02      	cmp	r3, #2
100457d8:	d148      	bne.n	1004586c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
100457da:	0021      	movs	r1, r4
100457dc:	187b      	adds	r3, r7, r1
100457de:	881b      	ldrh	r3, [r3, #0]
100457e0:	09db      	lsrs	r3, r3, #7
100457e2:	b29a      	uxth	r2, r3
100457e4:	183b      	adds	r3, r7, r0
100457e6:	881b      	ldrh	r3, [r3, #0]
100457e8:	4053      	eors	r3, r2
100457ea:	b29b      	uxth	r3, r3
100457ec:	001a      	movs	r2, r3
100457ee:	2306      	movs	r3, #6
100457f0:	4013      	ands	r3, r2
100457f2:	d120      	bne.n	10045836 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
100457f4:	183b      	adds	r3, r7, r0
100457f6:	187a      	adds	r2, r7, r1
100457f8:	8812      	ldrh	r2, [r2, #0]
100457fa:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
100457fc:	687b      	ldr	r3, [r7, #4]
100457fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10045800:	1c5a      	adds	r2, r3, #1
10045802:	687b      	ldr	r3, [r7, #4]
10045804:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10045806:	687b      	ldr	r3, [r7, #4]
10045808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004580a:	2b02      	cmp	r3, #2
1004580c:	d14c      	bne.n	100458a8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
1004580e:	687b      	ldr	r3, [r7, #4]
10045810:	2200      	movs	r2, #0
10045812:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10045814:	687b      	ldr	r3, [r7, #4]
10045816:	681b      	ldr	r3, [r3, #0]
10045818:	2208      	movs	r2, #8
1004581a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
1004581c:	687b      	ldr	r3, [r7, #4]
1004581e:	2240      	movs	r2, #64	@ 0x40
10045820:	2100      	movs	r1, #0
10045822:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10045824:	183b      	adds	r3, r7, r0
10045826:	881a      	ldrh	r2, [r3, #0]
10045828:	197b      	adds	r3, r7, r5
1004582a:	7819      	ldrb	r1, [r3, #0]
1004582c:	687b      	ldr	r3, [r7, #4]
1004582e:	0018      	movs	r0, r3
10045830:	f7ff fa3f 	bl	10044cb2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10045834:	e038      	b.n	100458a8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10045836:	240c      	movs	r4, #12
10045838:	193b      	adds	r3, r7, r4
1004583a:	2208      	movs	r2, #8
1004583c:	18ba      	adds	r2, r7, r2
1004583e:	8812      	ldrh	r2, [r2, #0]
10045840:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10045842:	2380      	movs	r3, #128	@ 0x80
10045844:	021a      	lsls	r2, r3, #8
10045846:	687b      	ldr	r3, [r7, #4]
10045848:	0011      	movs	r1, r2
1004584a:	0018      	movs	r0, r3
1004584c:	f000 fdb4 	bl	100463b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10045850:	687b      	ldr	r3, [r7, #4]
10045852:	2240      	movs	r2, #64	@ 0x40
10045854:	2100      	movs	r1, #0
10045856:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10045858:	193b      	adds	r3, r7, r4
1004585a:	881a      	ldrh	r2, [r3, #0]
1004585c:	230f      	movs	r3, #15
1004585e:	18fb      	adds	r3, r7, r3
10045860:	7819      	ldrb	r1, [r3, #0]
10045862:	687b      	ldr	r3, [r7, #4]
10045864:	0018      	movs	r0, r3
10045866:	f7ff fa24 	bl	10044cb2 <HAL_I2C_AddrCallback>
}
1004586a:	e01d      	b.n	100458a8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1004586c:	2380      	movs	r3, #128	@ 0x80
1004586e:	021a      	lsls	r2, r3, #8
10045870:	687b      	ldr	r3, [r7, #4]
10045872:	0011      	movs	r1, r2
10045874:	0018      	movs	r0, r3
10045876:	f000 fd9f 	bl	100463b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
1004587a:	687b      	ldr	r3, [r7, #4]
1004587c:	2240      	movs	r2, #64	@ 0x40
1004587e:	2100      	movs	r1, #0
10045880:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10045882:	230c      	movs	r3, #12
10045884:	18fb      	adds	r3, r7, r3
10045886:	881a      	ldrh	r2, [r3, #0]
10045888:	230f      	movs	r3, #15
1004588a:	18fb      	adds	r3, r7, r3
1004588c:	7819      	ldrb	r1, [r3, #0]
1004588e:	687b      	ldr	r3, [r7, #4]
10045890:	0018      	movs	r0, r3
10045892:	f7ff fa0e 	bl	10044cb2 <HAL_I2C_AddrCallback>
}
10045896:	e007      	b.n	100458a8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10045898:	687b      	ldr	r3, [r7, #4]
1004589a:	681b      	ldr	r3, [r3, #0]
1004589c:	2208      	movs	r2, #8
1004589e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
100458a0:	687b      	ldr	r3, [r7, #4]
100458a2:	2240      	movs	r2, #64	@ 0x40
100458a4:	2100      	movs	r1, #0
100458a6:	5499      	strb	r1, [r3, r2]
}
100458a8:	46c0      	nop			@ (mov r8, r8)
100458aa:	46bd      	mov	sp, r7
100458ac:	b004      	add	sp, #16
100458ae:	bdb0      	pop	{r4, r5, r7, pc}

100458b0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
100458b0:	b580      	push	{r7, lr}
100458b2:	b082      	sub	sp, #8
100458b4:	af00      	add	r7, sp, #0
100458b6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
100458b8:	687b      	ldr	r3, [r7, #4]
100458ba:	2242      	movs	r2, #66	@ 0x42
100458bc:	2100      	movs	r1, #0
100458be:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
100458c0:	687b      	ldr	r3, [r7, #4]
100458c2:	2241      	movs	r2, #65	@ 0x41
100458c4:	5c9b      	ldrb	r3, [r3, r2]
100458c6:	b2db      	uxtb	r3, r3
100458c8:	2b21      	cmp	r3, #33	@ 0x21
100458ca:	d117      	bne.n	100458fc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
100458cc:	687b      	ldr	r3, [r7, #4]
100458ce:	2241      	movs	r2, #65	@ 0x41
100458d0:	2120      	movs	r1, #32
100458d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
100458d4:	687b      	ldr	r3, [r7, #4]
100458d6:	2211      	movs	r2, #17
100458d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
100458da:	687b      	ldr	r3, [r7, #4]
100458dc:	2200      	movs	r2, #0
100458de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100458e0:	687b      	ldr	r3, [r7, #4]
100458e2:	2101      	movs	r1, #1
100458e4:	0018      	movs	r0, r3
100458e6:	f000 fd67 	bl	100463b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100458ea:	687b      	ldr	r3, [r7, #4]
100458ec:	2240      	movs	r2, #64	@ 0x40
100458ee:	2100      	movs	r1, #0
100458f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
100458f2:	687b      	ldr	r3, [r7, #4]
100458f4:	0018      	movs	r0, r3
100458f6:	f7ff f9bc 	bl	10044c72 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
100458fa:	e016      	b.n	1004592a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
100458fc:	687b      	ldr	r3, [r7, #4]
100458fe:	2241      	movs	r2, #65	@ 0x41
10045900:	2120      	movs	r1, #32
10045902:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10045904:	687b      	ldr	r3, [r7, #4]
10045906:	2212      	movs	r2, #18
10045908:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
1004590a:	687b      	ldr	r3, [r7, #4]
1004590c:	2200      	movs	r2, #0
1004590e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10045910:	687b      	ldr	r3, [r7, #4]
10045912:	2102      	movs	r1, #2
10045914:	0018      	movs	r0, r3
10045916:	f000 fd4f 	bl	100463b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
1004591a:	687b      	ldr	r3, [r7, #4]
1004591c:	2240      	movs	r2, #64	@ 0x40
1004591e:	2100      	movs	r1, #0
10045920:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
10045922:	687b      	ldr	r3, [r7, #4]
10045924:	0018      	movs	r0, r3
10045926:	f7ff f9ac 	bl	10044c82 <HAL_I2C_MasterRxCpltCallback>
}
1004592a:	46c0      	nop			@ (mov r8, r8)
1004592c:	46bd      	mov	sp, r7
1004592e:	b002      	add	sp, #8
10045930:	bd80      	pop	{r7, pc}
	...

10045934 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10045934:	b580      	push	{r7, lr}
10045936:	b084      	sub	sp, #16
10045938:	af00      	add	r7, sp, #0
1004593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
1004593c:	687b      	ldr	r3, [r7, #4]
1004593e:	681b      	ldr	r3, [r3, #0]
10045940:	681b      	ldr	r3, [r3, #0]
10045942:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10045944:	687b      	ldr	r3, [r7, #4]
10045946:	2242      	movs	r2, #66	@ 0x42
10045948:	2100      	movs	r1, #0
1004594a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1004594c:	68fa      	ldr	r2, [r7, #12]
1004594e:	2380      	movs	r3, #128	@ 0x80
10045950:	01db      	lsls	r3, r3, #7
10045952:	4013      	ands	r3, r2
10045954:	d008      	beq.n	10045968 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10045956:	687b      	ldr	r3, [r7, #4]
10045958:	681b      	ldr	r3, [r3, #0]
1004595a:	681a      	ldr	r2, [r3, #0]
1004595c:	687b      	ldr	r3, [r7, #4]
1004595e:	681b      	ldr	r3, [r3, #0]
10045960:	4924      	ldr	r1, [pc, #144]	@ (100459f4 <I2C_ITSlaveSeqCplt+0xc0>)
10045962:	400a      	ands	r2, r1
10045964:	601a      	str	r2, [r3, #0]
10045966:	e00c      	b.n	10045982 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10045968:	68fa      	ldr	r2, [r7, #12]
1004596a:	2380      	movs	r3, #128	@ 0x80
1004596c:	021b      	lsls	r3, r3, #8
1004596e:	4013      	ands	r3, r2
10045970:	d007      	beq.n	10045982 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10045972:	687b      	ldr	r3, [r7, #4]
10045974:	681b      	ldr	r3, [r3, #0]
10045976:	681a      	ldr	r2, [r3, #0]
10045978:	687b      	ldr	r3, [r7, #4]
1004597a:	681b      	ldr	r3, [r3, #0]
1004597c:	491e      	ldr	r1, [pc, #120]	@ (100459f8 <I2C_ITSlaveSeqCplt+0xc4>)
1004597e:	400a      	ands	r2, r1
10045980:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
10045982:	687b      	ldr	r3, [r7, #4]
10045984:	2241      	movs	r2, #65	@ 0x41
10045986:	5c9b      	ldrb	r3, [r3, r2]
10045988:	b2db      	uxtb	r3, r3
1004598a:	2b29      	cmp	r3, #41	@ 0x29
1004598c:	d114      	bne.n	100459b8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004598e:	687b      	ldr	r3, [r7, #4]
10045990:	2241      	movs	r2, #65	@ 0x41
10045992:	2128      	movs	r1, #40	@ 0x28
10045994:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10045996:	687b      	ldr	r3, [r7, #4]
10045998:	2221      	movs	r2, #33	@ 0x21
1004599a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004599c:	687b      	ldr	r3, [r7, #4]
1004599e:	2101      	movs	r1, #1
100459a0:	0018      	movs	r0, r3
100459a2:	f000 fd09 	bl	100463b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100459a6:	687b      	ldr	r3, [r7, #4]
100459a8:	2240      	movs	r2, #64	@ 0x40
100459aa:	2100      	movs	r1, #0
100459ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
100459ae:	687b      	ldr	r3, [r7, #4]
100459b0:	0018      	movs	r0, r3
100459b2:	f7ff f96e 	bl	10044c92 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
100459b6:	e019      	b.n	100459ec <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
100459b8:	687b      	ldr	r3, [r7, #4]
100459ba:	2241      	movs	r2, #65	@ 0x41
100459bc:	5c9b      	ldrb	r3, [r3, r2]
100459be:	b2db      	uxtb	r3, r3
100459c0:	2b2a      	cmp	r3, #42	@ 0x2a
100459c2:	d113      	bne.n	100459ec <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100459c4:	687b      	ldr	r3, [r7, #4]
100459c6:	2241      	movs	r2, #65	@ 0x41
100459c8:	2128      	movs	r1, #40	@ 0x28
100459ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100459cc:	687b      	ldr	r3, [r7, #4]
100459ce:	2222      	movs	r2, #34	@ 0x22
100459d0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
100459d2:	687b      	ldr	r3, [r7, #4]
100459d4:	2102      	movs	r1, #2
100459d6:	0018      	movs	r0, r3
100459d8:	f000 fcee 	bl	100463b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
100459dc:	687b      	ldr	r3, [r7, #4]
100459de:	2240      	movs	r2, #64	@ 0x40
100459e0:	2100      	movs	r1, #0
100459e2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
100459e4:	687b      	ldr	r3, [r7, #4]
100459e6:	0018      	movs	r0, r3
100459e8:	f7ff f95b 	bl	10044ca2 <HAL_I2C_SlaveRxCpltCallback>
}
100459ec:	46c0      	nop			@ (mov r8, r8)
100459ee:	46bd      	mov	sp, r7
100459f0:	b004      	add	sp, #16
100459f2:	bd80      	pop	{r7, pc}
100459f4:	ffffbfff 	.word	0xffffbfff
100459f8:	ffff7fff 	.word	0xffff7fff

100459fc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100459fc:	b580      	push	{r7, lr}
100459fe:	b086      	sub	sp, #24
10045a00:	af00      	add	r7, sp, #0
10045a02:	6078      	str	r0, [r7, #4]
10045a04:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
10045a06:	683b      	ldr	r3, [r7, #0]
10045a08:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10045a0a:	687b      	ldr	r3, [r7, #4]
10045a0c:	681b      	ldr	r3, [r3, #0]
10045a0e:	2220      	movs	r2, #32
10045a10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10045a12:	687b      	ldr	r3, [r7, #4]
10045a14:	2241      	movs	r2, #65	@ 0x41
10045a16:	5c9b      	ldrb	r3, [r3, r2]
10045a18:	b2db      	uxtb	r3, r3
10045a1a:	2b21      	cmp	r3, #33	@ 0x21
10045a1c:	d108      	bne.n	10045a30 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10045a1e:	687b      	ldr	r3, [r7, #4]
10045a20:	2101      	movs	r1, #1
10045a22:	0018      	movs	r0, r3
10045a24:	f000 fcc8 	bl	100463b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10045a28:	687b      	ldr	r3, [r7, #4]
10045a2a:	2211      	movs	r2, #17
10045a2c:	631a      	str	r2, [r3, #48]	@ 0x30
10045a2e:	e00d      	b.n	10045a4c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045a30:	687b      	ldr	r3, [r7, #4]
10045a32:	2241      	movs	r2, #65	@ 0x41
10045a34:	5c9b      	ldrb	r3, [r3, r2]
10045a36:	b2db      	uxtb	r3, r3
10045a38:	2b22      	cmp	r3, #34	@ 0x22
10045a3a:	d107      	bne.n	10045a4c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10045a3c:	687b      	ldr	r3, [r7, #4]
10045a3e:	2102      	movs	r1, #2
10045a40:	0018      	movs	r0, r3
10045a42:	f000 fcb9 	bl	100463b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10045a46:	687b      	ldr	r3, [r7, #4]
10045a48:	2212      	movs	r2, #18
10045a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10045a4c:	687b      	ldr	r3, [r7, #4]
10045a4e:	681b      	ldr	r3, [r3, #0]
10045a50:	685a      	ldr	r2, [r3, #4]
10045a52:	687b      	ldr	r3, [r7, #4]
10045a54:	681b      	ldr	r3, [r3, #0]
10045a56:	494e      	ldr	r1, [pc, #312]	@ (10045b90 <I2C_ITMasterCplt+0x194>)
10045a58:	400a      	ands	r2, r1
10045a5a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
10045a5c:	687b      	ldr	r3, [r7, #4]
10045a5e:	2200      	movs	r2, #0
10045a60:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10045a62:	687b      	ldr	r3, [r7, #4]
10045a64:	4a4b      	ldr	r2, [pc, #300]	@ (10045b94 <I2C_ITMasterCplt+0x198>)
10045a66:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
10045a68:	697b      	ldr	r3, [r7, #20]
10045a6a:	2210      	movs	r2, #16
10045a6c:	4013      	ands	r3, r2
10045a6e:	d009      	beq.n	10045a84 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045a70:	687b      	ldr	r3, [r7, #4]
10045a72:	681b      	ldr	r3, [r3, #0]
10045a74:	2210      	movs	r2, #16
10045a76:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045a78:	687b      	ldr	r3, [r7, #4]
10045a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045a7c:	2204      	movs	r2, #4
10045a7e:	431a      	orrs	r2, r3
10045a80:	687b      	ldr	r3, [r7, #4]
10045a82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
10045a84:	687b      	ldr	r3, [r7, #4]
10045a86:	2241      	movs	r2, #65	@ 0x41
10045a88:	5c9b      	ldrb	r3, [r3, r2]
10045a8a:	b2db      	uxtb	r3, r3
10045a8c:	2b60      	cmp	r3, #96	@ 0x60
10045a8e:	d109      	bne.n	10045aa4 <I2C_ITMasterCplt+0xa8>
10045a90:	697b      	ldr	r3, [r7, #20]
10045a92:	2204      	movs	r2, #4
10045a94:	4013      	ands	r3, r2
10045a96:	d005      	beq.n	10045aa4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
10045a98:	687b      	ldr	r3, [r7, #4]
10045a9a:	681b      	ldr	r3, [r3, #0]
10045a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045a9e:	b2db      	uxtb	r3, r3
10045aa0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
10045aa2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10045aa4:	687b      	ldr	r3, [r7, #4]
10045aa6:	0018      	movs	r0, r3
10045aa8:	f000 fb81 	bl	100461ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10045aac:	687b      	ldr	r3, [r7, #4]
10045aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045ab0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
10045ab2:	687b      	ldr	r3, [r7, #4]
10045ab4:	2241      	movs	r2, #65	@ 0x41
10045ab6:	5c9b      	ldrb	r3, [r3, r2]
10045ab8:	b2db      	uxtb	r3, r3
10045aba:	2b60      	cmp	r3, #96	@ 0x60
10045abc:	d002      	beq.n	10045ac4 <I2C_ITMasterCplt+0xc8>
10045abe:	693b      	ldr	r3, [r7, #16]
10045ac0:	2b00      	cmp	r3, #0
10045ac2:	d007      	beq.n	10045ad4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10045ac4:	687b      	ldr	r3, [r7, #4]
10045ac6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045ac8:	687b      	ldr	r3, [r7, #4]
10045aca:	0011      	movs	r1, r2
10045acc:	0018      	movs	r0, r3
10045ace:	f000 fa43 	bl	10045f58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
10045ad2:	e058      	b.n	10045b86 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10045ad4:	687b      	ldr	r3, [r7, #4]
10045ad6:	2241      	movs	r2, #65	@ 0x41
10045ad8:	5c9b      	ldrb	r3, [r3, r2]
10045ada:	b2db      	uxtb	r3, r3
10045adc:	2b21      	cmp	r3, #33	@ 0x21
10045ade:	d126      	bne.n	10045b2e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
10045ae0:	687b      	ldr	r3, [r7, #4]
10045ae2:	2241      	movs	r2, #65	@ 0x41
10045ae4:	2120      	movs	r1, #32
10045ae6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10045ae8:	687b      	ldr	r3, [r7, #4]
10045aea:	2200      	movs	r2, #0
10045aec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10045aee:	687b      	ldr	r3, [r7, #4]
10045af0:	2242      	movs	r2, #66	@ 0x42
10045af2:	5c9b      	ldrb	r3, [r3, r2]
10045af4:	b2db      	uxtb	r3, r3
10045af6:	2b40      	cmp	r3, #64	@ 0x40
10045af8:	d10c      	bne.n	10045b14 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10045afa:	687b      	ldr	r3, [r7, #4]
10045afc:	2242      	movs	r2, #66	@ 0x42
10045afe:	2100      	movs	r1, #0
10045b00:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10045b02:	687b      	ldr	r3, [r7, #4]
10045b04:	2240      	movs	r2, #64	@ 0x40
10045b06:	2100      	movs	r1, #0
10045b08:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
10045b0a:	687b      	ldr	r3, [r7, #4]
10045b0c:	0018      	movs	r0, r3
10045b0e:	f7fc f993 	bl	10041e38 <HAL_I2C_MemTxCpltCallback>
}
10045b12:	e038      	b.n	10045b86 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10045b14:	687b      	ldr	r3, [r7, #4]
10045b16:	2242      	movs	r2, #66	@ 0x42
10045b18:	2100      	movs	r1, #0
10045b1a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10045b1c:	687b      	ldr	r3, [r7, #4]
10045b1e:	2240      	movs	r2, #64	@ 0x40
10045b20:	2100      	movs	r1, #0
10045b22:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
10045b24:	687b      	ldr	r3, [r7, #4]
10045b26:	0018      	movs	r0, r3
10045b28:	f7ff f8a3 	bl	10044c72 <HAL_I2C_MasterTxCpltCallback>
}
10045b2c:	e02b      	b.n	10045b86 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045b2e:	687b      	ldr	r3, [r7, #4]
10045b30:	2241      	movs	r2, #65	@ 0x41
10045b32:	5c9b      	ldrb	r3, [r3, r2]
10045b34:	b2db      	uxtb	r3, r3
10045b36:	2b22      	cmp	r3, #34	@ 0x22
10045b38:	d125      	bne.n	10045b86 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
10045b3a:	687b      	ldr	r3, [r7, #4]
10045b3c:	2241      	movs	r2, #65	@ 0x41
10045b3e:	2120      	movs	r1, #32
10045b40:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10045b42:	687b      	ldr	r3, [r7, #4]
10045b44:	2200      	movs	r2, #0
10045b46:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10045b48:	687b      	ldr	r3, [r7, #4]
10045b4a:	2242      	movs	r2, #66	@ 0x42
10045b4c:	5c9b      	ldrb	r3, [r3, r2]
10045b4e:	b2db      	uxtb	r3, r3
10045b50:	2b40      	cmp	r3, #64	@ 0x40
10045b52:	d10c      	bne.n	10045b6e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10045b54:	687b      	ldr	r3, [r7, #4]
10045b56:	2242      	movs	r2, #66	@ 0x42
10045b58:	2100      	movs	r1, #0
10045b5a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10045b5c:	687b      	ldr	r3, [r7, #4]
10045b5e:	2240      	movs	r2, #64	@ 0x40
10045b60:	2100      	movs	r1, #0
10045b62:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
10045b64:	687b      	ldr	r3, [r7, #4]
10045b66:	0018      	movs	r0, r3
10045b68:	f7fc f9ee 	bl	10041f48 <HAL_I2C_MemRxCpltCallback>
}
10045b6c:	e00b      	b.n	10045b86 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10045b6e:	687b      	ldr	r3, [r7, #4]
10045b70:	2242      	movs	r2, #66	@ 0x42
10045b72:	2100      	movs	r1, #0
10045b74:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10045b76:	687b      	ldr	r3, [r7, #4]
10045b78:	2240      	movs	r2, #64	@ 0x40
10045b7a:	2100      	movs	r1, #0
10045b7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
10045b7e:	687b      	ldr	r3, [r7, #4]
10045b80:	0018      	movs	r0, r3
10045b82:	f7ff f87e 	bl	10044c82 <HAL_I2C_MasterRxCpltCallback>
}
10045b86:	46c0      	nop			@ (mov r8, r8)
10045b88:	46bd      	mov	sp, r7
10045b8a:	b006      	add	sp, #24
10045b8c:	bd80      	pop	{r7, pc}
10045b8e:	46c0      	nop			@ (mov r8, r8)
10045b90:	fe00e800 	.word	0xfe00e800
10045b94:	ffff0000 	.word	0xffff0000

10045b98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10045b98:	b580      	push	{r7, lr}
10045b9a:	b086      	sub	sp, #24
10045b9c:	af00      	add	r7, sp, #0
10045b9e:	6078      	str	r0, [r7, #4]
10045ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10045ba2:	687b      	ldr	r3, [r7, #4]
10045ba4:	681b      	ldr	r3, [r3, #0]
10045ba6:	681b      	ldr	r3, [r3, #0]
10045ba8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
10045baa:	683b      	ldr	r3, [r7, #0]
10045bac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
10045bae:	687b      	ldr	r3, [r7, #4]
10045bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045bb2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10045bb4:	200b      	movs	r0, #11
10045bb6:	183b      	adds	r3, r7, r0
10045bb8:	687a      	ldr	r2, [r7, #4]
10045bba:	2141      	movs	r1, #65	@ 0x41
10045bbc:	5c52      	ldrb	r2, [r2, r1]
10045bbe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10045bc0:	687b      	ldr	r3, [r7, #4]
10045bc2:	681b      	ldr	r3, [r3, #0]
10045bc4:	2220      	movs	r2, #32
10045bc6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10045bc8:	183b      	adds	r3, r7, r0
10045bca:	781b      	ldrb	r3, [r3, #0]
10045bcc:	2b21      	cmp	r3, #33	@ 0x21
10045bce:	d003      	beq.n	10045bd8 <I2C_ITSlaveCplt+0x40>
10045bd0:	183b      	adds	r3, r7, r0
10045bd2:	781b      	ldrb	r3, [r3, #0]
10045bd4:	2b29      	cmp	r3, #41	@ 0x29
10045bd6:	d109      	bne.n	10045bec <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10045bd8:	4aac      	ldr	r2, [pc, #688]	@ (10045e8c <I2C_ITSlaveCplt+0x2f4>)
10045bda:	687b      	ldr	r3, [r7, #4]
10045bdc:	0011      	movs	r1, r2
10045bde:	0018      	movs	r0, r3
10045be0:	f000 fbea 	bl	100463b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10045be4:	687b      	ldr	r3, [r7, #4]
10045be6:	2221      	movs	r2, #33	@ 0x21
10045be8:	631a      	str	r2, [r3, #48]	@ 0x30
10045bea:	e020      	b.n	10045c2e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10045bec:	220b      	movs	r2, #11
10045bee:	18bb      	adds	r3, r7, r2
10045bf0:	781b      	ldrb	r3, [r3, #0]
10045bf2:	2b22      	cmp	r3, #34	@ 0x22
10045bf4:	d003      	beq.n	10045bfe <I2C_ITSlaveCplt+0x66>
10045bf6:	18bb      	adds	r3, r7, r2
10045bf8:	781b      	ldrb	r3, [r3, #0]
10045bfa:	2b2a      	cmp	r3, #42	@ 0x2a
10045bfc:	d109      	bne.n	10045c12 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
10045bfe:	4aa4      	ldr	r2, [pc, #656]	@ (10045e90 <I2C_ITSlaveCplt+0x2f8>)
10045c00:	687b      	ldr	r3, [r7, #4]
10045c02:	0011      	movs	r1, r2
10045c04:	0018      	movs	r0, r3
10045c06:	f000 fbd7 	bl	100463b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10045c0a:	687b      	ldr	r3, [r7, #4]
10045c0c:	2222      	movs	r2, #34	@ 0x22
10045c0e:	631a      	str	r2, [r3, #48]	@ 0x30
10045c10:	e00d      	b.n	10045c2e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
10045c12:	230b      	movs	r3, #11
10045c14:	18fb      	adds	r3, r7, r3
10045c16:	781b      	ldrb	r3, [r3, #0]
10045c18:	2b28      	cmp	r3, #40	@ 0x28
10045c1a:	d108      	bne.n	10045c2e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10045c1c:	4a9d      	ldr	r2, [pc, #628]	@ (10045e94 <I2C_ITSlaveCplt+0x2fc>)
10045c1e:	687b      	ldr	r3, [r7, #4]
10045c20:	0011      	movs	r1, r2
10045c22:	0018      	movs	r0, r3
10045c24:	f000 fbc8 	bl	100463b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
10045c28:	687b      	ldr	r3, [r7, #4]
10045c2a:	2200      	movs	r2, #0
10045c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10045c2e:	687b      	ldr	r3, [r7, #4]
10045c30:	681b      	ldr	r3, [r3, #0]
10045c32:	685a      	ldr	r2, [r3, #4]
10045c34:	687b      	ldr	r3, [r7, #4]
10045c36:	681b      	ldr	r3, [r3, #0]
10045c38:	2180      	movs	r1, #128	@ 0x80
10045c3a:	0209      	lsls	r1, r1, #8
10045c3c:	430a      	orrs	r2, r1
10045c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10045c40:	687b      	ldr	r3, [r7, #4]
10045c42:	681b      	ldr	r3, [r3, #0]
10045c44:	685a      	ldr	r2, [r3, #4]
10045c46:	687b      	ldr	r3, [r7, #4]
10045c48:	681b      	ldr	r3, [r3, #0]
10045c4a:	4993      	ldr	r1, [pc, #588]	@ (10045e98 <I2C_ITSlaveCplt+0x300>)
10045c4c:	400a      	ands	r2, r1
10045c4e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10045c50:	687b      	ldr	r3, [r7, #4]
10045c52:	0018      	movs	r0, r3
10045c54:	f000 faab 	bl	100461ae <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10045c58:	693a      	ldr	r2, [r7, #16]
10045c5a:	2380      	movs	r3, #128	@ 0x80
10045c5c:	01db      	lsls	r3, r3, #7
10045c5e:	4013      	ands	r3, r2
10045c60:	d013      	beq.n	10045c8a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10045c62:	687b      	ldr	r3, [r7, #4]
10045c64:	681b      	ldr	r3, [r3, #0]
10045c66:	681a      	ldr	r2, [r3, #0]
10045c68:	687b      	ldr	r3, [r7, #4]
10045c6a:	681b      	ldr	r3, [r3, #0]
10045c6c:	498b      	ldr	r1, [pc, #556]	@ (10045e9c <I2C_ITSlaveCplt+0x304>)
10045c6e:	400a      	ands	r2, r1
10045c70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10045c72:	687b      	ldr	r3, [r7, #4]
10045c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045c76:	2b00      	cmp	r3, #0
10045c78:	d01f      	beq.n	10045cba <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
10045c7a:	687b      	ldr	r3, [r7, #4]
10045c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045c7e:	681b      	ldr	r3, [r3, #0]
10045c80:	685b      	ldr	r3, [r3, #4]
10045c82:	b29a      	uxth	r2, r3
10045c84:	687b      	ldr	r3, [r7, #4]
10045c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
10045c88:	e017      	b.n	10045cba <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10045c8a:	693a      	ldr	r2, [r7, #16]
10045c8c:	2380      	movs	r3, #128	@ 0x80
10045c8e:	021b      	lsls	r3, r3, #8
10045c90:	4013      	ands	r3, r2
10045c92:	d012      	beq.n	10045cba <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10045c94:	687b      	ldr	r3, [r7, #4]
10045c96:	681b      	ldr	r3, [r3, #0]
10045c98:	681a      	ldr	r2, [r3, #0]
10045c9a:	687b      	ldr	r3, [r7, #4]
10045c9c:	681b      	ldr	r3, [r3, #0]
10045c9e:	4980      	ldr	r1, [pc, #512]	@ (10045ea0 <I2C_ITSlaveCplt+0x308>)
10045ca0:	400a      	ands	r2, r1
10045ca2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
10045ca4:	687b      	ldr	r3, [r7, #4]
10045ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10045ca8:	2b00      	cmp	r3, #0
10045caa:	d006      	beq.n	10045cba <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
10045cac:	687b      	ldr	r3, [r7, #4]
10045cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10045cb0:	681b      	ldr	r3, [r3, #0]
10045cb2:	685b      	ldr	r3, [r3, #4]
10045cb4:	b29a      	uxth	r2, r3
10045cb6:	687b      	ldr	r3, [r7, #4]
10045cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
10045cba:	697b      	ldr	r3, [r7, #20]
10045cbc:	2204      	movs	r2, #4
10045cbe:	4013      	ands	r3, r2
10045cc0:	d020      	beq.n	10045d04 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10045cc2:	697b      	ldr	r3, [r7, #20]
10045cc4:	2204      	movs	r2, #4
10045cc6:	4393      	bics	r3, r2
10045cc8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10045cca:	687b      	ldr	r3, [r7, #4]
10045ccc:	681b      	ldr	r3, [r3, #0]
10045cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045cd0:	687b      	ldr	r3, [r7, #4]
10045cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045cd4:	b2d2      	uxtb	r2, r2
10045cd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10045cd8:	687b      	ldr	r3, [r7, #4]
10045cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045cdc:	1c5a      	adds	r2, r3, #1
10045cde:	687b      	ldr	r3, [r7, #4]
10045ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10045ce2:	687b      	ldr	r3, [r7, #4]
10045ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045ce6:	2b00      	cmp	r3, #0
10045ce8:	d00c      	beq.n	10045d04 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
10045cea:	687b      	ldr	r3, [r7, #4]
10045cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045cee:	3b01      	subs	r3, #1
10045cf0:	b29a      	uxth	r2, r3
10045cf2:	687b      	ldr	r3, [r7, #4]
10045cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10045cf6:	687b      	ldr	r3, [r7, #4]
10045cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045cfa:	b29b      	uxth	r3, r3
10045cfc:	3b01      	subs	r3, #1
10045cfe:	b29a      	uxth	r2, r3
10045d00:	687b      	ldr	r3, [r7, #4]
10045d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10045d04:	687b      	ldr	r3, [r7, #4]
10045d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045d08:	b29b      	uxth	r3, r3
10045d0a:	2b00      	cmp	r3, #0
10045d0c:	d005      	beq.n	10045d1a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045d0e:	687b      	ldr	r3, [r7, #4]
10045d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045d12:	2204      	movs	r2, #4
10045d14:	431a      	orrs	r2, r3
10045d16:	687b      	ldr	r3, [r7, #4]
10045d18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10045d1a:	697b      	ldr	r3, [r7, #20]
10045d1c:	2210      	movs	r2, #16
10045d1e:	4013      	ands	r3, r2
10045d20:	d04f      	beq.n	10045dc2 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
10045d22:	693b      	ldr	r3, [r7, #16]
10045d24:	2210      	movs	r2, #16
10045d26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10045d28:	d04b      	beq.n	10045dc2 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10045d2a:	687b      	ldr	r3, [r7, #4]
10045d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045d2e:	b29b      	uxth	r3, r3
10045d30:	2b00      	cmp	r3, #0
10045d32:	d12d      	bne.n	10045d90 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10045d34:	687b      	ldr	r3, [r7, #4]
10045d36:	2241      	movs	r2, #65	@ 0x41
10045d38:	5c9b      	ldrb	r3, [r3, r2]
10045d3a:	b2db      	uxtb	r3, r3
10045d3c:	2b28      	cmp	r3, #40	@ 0x28
10045d3e:	d10b      	bne.n	10045d58 <I2C_ITSlaveCplt+0x1c0>
10045d40:	68fa      	ldr	r2, [r7, #12]
10045d42:	2380      	movs	r3, #128	@ 0x80
10045d44:	049b      	lsls	r3, r3, #18
10045d46:	429a      	cmp	r2, r3
10045d48:	d106      	bne.n	10045d58 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10045d4a:	697a      	ldr	r2, [r7, #20]
10045d4c:	687b      	ldr	r3, [r7, #4]
10045d4e:	0011      	movs	r1, r2
10045d50:	0018      	movs	r0, r3
10045d52:	f000 f8a9 	bl	10045ea8 <I2C_ITListenCplt>
10045d56:	e034      	b.n	10045dc2 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10045d58:	687b      	ldr	r3, [r7, #4]
10045d5a:	2241      	movs	r2, #65	@ 0x41
10045d5c:	5c9b      	ldrb	r3, [r3, r2]
10045d5e:	b2db      	uxtb	r3, r3
10045d60:	2b29      	cmp	r3, #41	@ 0x29
10045d62:	d110      	bne.n	10045d86 <I2C_ITSlaveCplt+0x1ee>
10045d64:	68fb      	ldr	r3, [r7, #12]
10045d66:	4a4f      	ldr	r2, [pc, #316]	@ (10045ea4 <I2C_ITSlaveCplt+0x30c>)
10045d68:	4293      	cmp	r3, r2
10045d6a:	d00c      	beq.n	10045d86 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045d6c:	687b      	ldr	r3, [r7, #4]
10045d6e:	681b      	ldr	r3, [r3, #0]
10045d70:	2210      	movs	r2, #16
10045d72:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10045d74:	687b      	ldr	r3, [r7, #4]
10045d76:	0018      	movs	r0, r3
10045d78:	f000 fa19 	bl	100461ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10045d7c:	687b      	ldr	r3, [r7, #4]
10045d7e:	0018      	movs	r0, r3
10045d80:	f7ff fdd8 	bl	10045934 <I2C_ITSlaveSeqCplt>
10045d84:	e01d      	b.n	10045dc2 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045d86:	687b      	ldr	r3, [r7, #4]
10045d88:	681b      	ldr	r3, [r3, #0]
10045d8a:	2210      	movs	r2, #16
10045d8c:	61da      	str	r2, [r3, #28]
10045d8e:	e018      	b.n	10045dc2 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045d90:	687b      	ldr	r3, [r7, #4]
10045d92:	681b      	ldr	r3, [r3, #0]
10045d94:	2210      	movs	r2, #16
10045d96:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045d98:	687b      	ldr	r3, [r7, #4]
10045d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045d9c:	2204      	movs	r2, #4
10045d9e:	431a      	orrs	r2, r3
10045da0:	687b      	ldr	r3, [r7, #4]
10045da2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10045da4:	68fb      	ldr	r3, [r7, #12]
10045da6:	2b00      	cmp	r3, #0
10045da8:	d004      	beq.n	10045db4 <I2C_ITSlaveCplt+0x21c>
10045daa:	68fa      	ldr	r2, [r7, #12]
10045dac:	2380      	movs	r3, #128	@ 0x80
10045dae:	045b      	lsls	r3, r3, #17
10045db0:	429a      	cmp	r2, r3
10045db2:	d106      	bne.n	10045dc2 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10045db4:	687b      	ldr	r3, [r7, #4]
10045db6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045db8:	687b      	ldr	r3, [r7, #4]
10045dba:	0011      	movs	r1, r2
10045dbc:	0018      	movs	r0, r3
10045dbe:	f000 f8cb 	bl	10045f58 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
10045dc2:	687b      	ldr	r3, [r7, #4]
10045dc4:	2242      	movs	r2, #66	@ 0x42
10045dc6:	2100      	movs	r1, #0
10045dc8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10045dca:	687b      	ldr	r3, [r7, #4]
10045dcc:	2200      	movs	r2, #0
10045dce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
10045dd0:	687b      	ldr	r3, [r7, #4]
10045dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045dd4:	2b00      	cmp	r3, #0
10045dd6:	d013      	beq.n	10045e00 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10045dd8:	687b      	ldr	r3, [r7, #4]
10045dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045ddc:	687b      	ldr	r3, [r7, #4]
10045dde:	0011      	movs	r1, r2
10045de0:	0018      	movs	r0, r3
10045de2:	f000 f8b9 	bl	10045f58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10045de6:	687b      	ldr	r3, [r7, #4]
10045de8:	2241      	movs	r2, #65	@ 0x41
10045dea:	5c9b      	ldrb	r3, [r3, r2]
10045dec:	b2db      	uxtb	r3, r3
10045dee:	2b28      	cmp	r3, #40	@ 0x28
10045df0:	d147      	bne.n	10045e82 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
10045df2:	697a      	ldr	r2, [r7, #20]
10045df4:	687b      	ldr	r3, [r7, #4]
10045df6:	0011      	movs	r1, r2
10045df8:	0018      	movs	r0, r3
10045dfa:	f000 f855 	bl	10045ea8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10045dfe:	e040      	b.n	10045e82 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10045e00:	687b      	ldr	r3, [r7, #4]
10045e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045e04:	4a27      	ldr	r2, [pc, #156]	@ (10045ea4 <I2C_ITSlaveCplt+0x30c>)
10045e06:	4293      	cmp	r3, r2
10045e08:	d016      	beq.n	10045e38 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
10045e0a:	687b      	ldr	r3, [r7, #4]
10045e0c:	0018      	movs	r0, r3
10045e0e:	f7ff fd91 	bl	10045934 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10045e12:	687b      	ldr	r3, [r7, #4]
10045e14:	4a23      	ldr	r2, [pc, #140]	@ (10045ea4 <I2C_ITSlaveCplt+0x30c>)
10045e16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10045e18:	687b      	ldr	r3, [r7, #4]
10045e1a:	2241      	movs	r2, #65	@ 0x41
10045e1c:	2120      	movs	r1, #32
10045e1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10045e20:	687b      	ldr	r3, [r7, #4]
10045e22:	2200      	movs	r2, #0
10045e24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10045e26:	687b      	ldr	r3, [r7, #4]
10045e28:	2240      	movs	r2, #64	@ 0x40
10045e2a:	2100      	movs	r1, #0
10045e2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
10045e2e:	687b      	ldr	r3, [r7, #4]
10045e30:	0018      	movs	r0, r3
10045e32:	f7fe ff4e 	bl	10044cd2 <HAL_I2C_ListenCpltCallback>
}
10045e36:	e024      	b.n	10045e82 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10045e38:	687b      	ldr	r3, [r7, #4]
10045e3a:	2241      	movs	r2, #65	@ 0x41
10045e3c:	5c9b      	ldrb	r3, [r3, r2]
10045e3e:	b2db      	uxtb	r3, r3
10045e40:	2b22      	cmp	r3, #34	@ 0x22
10045e42:	d10f      	bne.n	10045e64 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
10045e44:	687b      	ldr	r3, [r7, #4]
10045e46:	2241      	movs	r2, #65	@ 0x41
10045e48:	2120      	movs	r1, #32
10045e4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10045e4c:	687b      	ldr	r3, [r7, #4]
10045e4e:	2200      	movs	r2, #0
10045e50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10045e52:	687b      	ldr	r3, [r7, #4]
10045e54:	2240      	movs	r2, #64	@ 0x40
10045e56:	2100      	movs	r1, #0
10045e58:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10045e5a:	687b      	ldr	r3, [r7, #4]
10045e5c:	0018      	movs	r0, r3
10045e5e:	f7fe ff20 	bl	10044ca2 <HAL_I2C_SlaveRxCpltCallback>
}
10045e62:	e00e      	b.n	10045e82 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
10045e64:	687b      	ldr	r3, [r7, #4]
10045e66:	2241      	movs	r2, #65	@ 0x41
10045e68:	2120      	movs	r1, #32
10045e6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10045e6c:	687b      	ldr	r3, [r7, #4]
10045e6e:	2200      	movs	r2, #0
10045e70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10045e72:	687b      	ldr	r3, [r7, #4]
10045e74:	2240      	movs	r2, #64	@ 0x40
10045e76:	2100      	movs	r1, #0
10045e78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10045e7a:	687b      	ldr	r3, [r7, #4]
10045e7c:	0018      	movs	r0, r3
10045e7e:	f7fe ff08 	bl	10044c92 <HAL_I2C_SlaveTxCpltCallback>
}
10045e82:	46c0      	nop			@ (mov r8, r8)
10045e84:	46bd      	mov	sp, r7
10045e86:	b006      	add	sp, #24
10045e88:	bd80      	pop	{r7, pc}
10045e8a:	46c0      	nop			@ (mov r8, r8)
10045e8c:	00008001 	.word	0x00008001
10045e90:	00008002 	.word	0x00008002
10045e94:	00008003 	.word	0x00008003
10045e98:	fe00e800 	.word	0xfe00e800
10045e9c:	ffffbfff 	.word	0xffffbfff
10045ea0:	ffff7fff 	.word	0xffff7fff
10045ea4:	ffff0000 	.word	0xffff0000

10045ea8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10045ea8:	b580      	push	{r7, lr}
10045eaa:	b082      	sub	sp, #8
10045eac:	af00      	add	r7, sp, #0
10045eae:	6078      	str	r0, [r7, #4]
10045eb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10045eb2:	687b      	ldr	r3, [r7, #4]
10045eb4:	4a26      	ldr	r2, [pc, #152]	@ (10045f50 <I2C_ITListenCplt+0xa8>)
10045eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
10045eb8:	687b      	ldr	r3, [r7, #4]
10045eba:	2200      	movs	r2, #0
10045ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
10045ebe:	687b      	ldr	r3, [r7, #4]
10045ec0:	2241      	movs	r2, #65	@ 0x41
10045ec2:	2120      	movs	r1, #32
10045ec4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
10045ec6:	687b      	ldr	r3, [r7, #4]
10045ec8:	2242      	movs	r2, #66	@ 0x42
10045eca:	2100      	movs	r1, #0
10045ecc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10045ece:	687b      	ldr	r3, [r7, #4]
10045ed0:	2200      	movs	r2, #0
10045ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
10045ed4:	683b      	ldr	r3, [r7, #0]
10045ed6:	2204      	movs	r2, #4
10045ed8:	4013      	ands	r3, r2
10045eda:	d022      	beq.n	10045f22 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10045edc:	687b      	ldr	r3, [r7, #4]
10045ede:	681b      	ldr	r3, [r3, #0]
10045ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045ee2:	687b      	ldr	r3, [r7, #4]
10045ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045ee6:	b2d2      	uxtb	r2, r2
10045ee8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10045eea:	687b      	ldr	r3, [r7, #4]
10045eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10045eee:	1c5a      	adds	r2, r3, #1
10045ef0:	687b      	ldr	r3, [r7, #4]
10045ef2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10045ef4:	687b      	ldr	r3, [r7, #4]
10045ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045ef8:	2b00      	cmp	r3, #0
10045efa:	d012      	beq.n	10045f22 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
10045efc:	687b      	ldr	r3, [r7, #4]
10045efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10045f00:	3b01      	subs	r3, #1
10045f02:	b29a      	uxth	r2, r3
10045f04:	687b      	ldr	r3, [r7, #4]
10045f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10045f08:	687b      	ldr	r3, [r7, #4]
10045f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10045f0c:	b29b      	uxth	r3, r3
10045f0e:	3b01      	subs	r3, #1
10045f10:	b29a      	uxth	r2, r3
10045f12:	687b      	ldr	r3, [r7, #4]
10045f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10045f16:	687b      	ldr	r3, [r7, #4]
10045f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045f1a:	2204      	movs	r2, #4
10045f1c:	431a      	orrs	r2, r3
10045f1e:	687b      	ldr	r3, [r7, #4]
10045f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10045f22:	4a0c      	ldr	r2, [pc, #48]	@ (10045f54 <I2C_ITListenCplt+0xac>)
10045f24:	687b      	ldr	r3, [r7, #4]
10045f26:	0011      	movs	r1, r2
10045f28:	0018      	movs	r0, r3
10045f2a:	f000 fa45 	bl	100463b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10045f2e:	687b      	ldr	r3, [r7, #4]
10045f30:	681b      	ldr	r3, [r3, #0]
10045f32:	2210      	movs	r2, #16
10045f34:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10045f36:	687b      	ldr	r3, [r7, #4]
10045f38:	2240      	movs	r2, #64	@ 0x40
10045f3a:	2100      	movs	r1, #0
10045f3c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
10045f3e:	687b      	ldr	r3, [r7, #4]
10045f40:	0018      	movs	r0, r3
10045f42:	f7fe fec6 	bl	10044cd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10045f46:	46c0      	nop			@ (mov r8, r8)
10045f48:	46bd      	mov	sp, r7
10045f4a:	b002      	add	sp, #8
10045f4c:	bd80      	pop	{r7, pc}
10045f4e:	46c0      	nop			@ (mov r8, r8)
10045f50:	ffff0000 	.word	0xffff0000
10045f54:	00008003 	.word	0x00008003

10045f58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10045f58:	b580      	push	{r7, lr}
10045f5a:	b084      	sub	sp, #16
10045f5c:	af00      	add	r7, sp, #0
10045f5e:	6078      	str	r0, [r7, #4]
10045f60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10045f62:	200f      	movs	r0, #15
10045f64:	183b      	adds	r3, r7, r0
10045f66:	687a      	ldr	r2, [r7, #4]
10045f68:	2141      	movs	r1, #65	@ 0x41
10045f6a:	5c52      	ldrb	r2, [r2, r1]
10045f6c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
10045f6e:	687b      	ldr	r3, [r7, #4]
10045f70:	2242      	movs	r2, #66	@ 0x42
10045f72:	2100      	movs	r1, #0
10045f74:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10045f76:	687b      	ldr	r3, [r7, #4]
10045f78:	4a72      	ldr	r2, [pc, #456]	@ (10046144 <I2C_ITError+0x1ec>)
10045f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
10045f7c:	687b      	ldr	r3, [r7, #4]
10045f7e:	2200      	movs	r2, #0
10045f80:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
10045f82:	687b      	ldr	r3, [r7, #4]
10045f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045f86:	683b      	ldr	r3, [r7, #0]
10045f88:	431a      	orrs	r2, r3
10045f8a:	687b      	ldr	r3, [r7, #4]
10045f8c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
10045f8e:	183b      	adds	r3, r7, r0
10045f90:	781b      	ldrb	r3, [r3, #0]
10045f92:	2b28      	cmp	r3, #40	@ 0x28
10045f94:	d007      	beq.n	10045fa6 <I2C_ITError+0x4e>
10045f96:	183b      	adds	r3, r7, r0
10045f98:	781b      	ldrb	r3, [r3, #0]
10045f9a:	2b29      	cmp	r3, #41	@ 0x29
10045f9c:	d003      	beq.n	10045fa6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
10045f9e:	183b      	adds	r3, r7, r0
10045fa0:	781b      	ldrb	r3, [r3, #0]
10045fa2:	2b2a      	cmp	r3, #42	@ 0x2a
10045fa4:	d10c      	bne.n	10045fc0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10045fa6:	687b      	ldr	r3, [r7, #4]
10045fa8:	2103      	movs	r1, #3
10045faa:	0018      	movs	r0, r3
10045fac:	f000 fa04 	bl	100463b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10045fb0:	687b      	ldr	r3, [r7, #4]
10045fb2:	2241      	movs	r2, #65	@ 0x41
10045fb4:	2128      	movs	r1, #40	@ 0x28
10045fb6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
10045fb8:	687b      	ldr	r3, [r7, #4]
10045fba:	4a63      	ldr	r2, [pc, #396]	@ (10046148 <I2C_ITError+0x1f0>)
10045fbc:	635a      	str	r2, [r3, #52]	@ 0x34
10045fbe:	e032      	b.n	10046026 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10045fc0:	4a62      	ldr	r2, [pc, #392]	@ (1004614c <I2C_ITError+0x1f4>)
10045fc2:	687b      	ldr	r3, [r7, #4]
10045fc4:	0011      	movs	r1, r2
10045fc6:	0018      	movs	r0, r3
10045fc8:	f000 f9f6 	bl	100463b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10045fcc:	687b      	ldr	r3, [r7, #4]
10045fce:	0018      	movs	r0, r3
10045fd0:	f000 f8ed 	bl	100461ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
10045fd4:	687b      	ldr	r3, [r7, #4]
10045fd6:	2241      	movs	r2, #65	@ 0x41
10045fd8:	5c9b      	ldrb	r3, [r3, r2]
10045fda:	b2db      	uxtb	r3, r3
10045fdc:	2b60      	cmp	r3, #96	@ 0x60
10045fde:	d01f      	beq.n	10046020 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
10045fe0:	687b      	ldr	r3, [r7, #4]
10045fe2:	2241      	movs	r2, #65	@ 0x41
10045fe4:	2120      	movs	r1, #32
10045fe6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
10045fe8:	687b      	ldr	r3, [r7, #4]
10045fea:	681b      	ldr	r3, [r3, #0]
10045fec:	699b      	ldr	r3, [r3, #24]
10045fee:	2220      	movs	r2, #32
10045ff0:	4013      	ands	r3, r2
10045ff2:	2b20      	cmp	r3, #32
10045ff4:	d114      	bne.n	10046020 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
10045ff6:	687b      	ldr	r3, [r7, #4]
10045ff8:	681b      	ldr	r3, [r3, #0]
10045ffa:	699b      	ldr	r3, [r3, #24]
10045ffc:	2210      	movs	r2, #16
10045ffe:	4013      	ands	r3, r2
10046000:	2b10      	cmp	r3, #16
10046002:	d109      	bne.n	10046018 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10046004:	687b      	ldr	r3, [r7, #4]
10046006:	681b      	ldr	r3, [r3, #0]
10046008:	2210      	movs	r2, #16
1004600a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004600c:	687b      	ldr	r3, [r7, #4]
1004600e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046010:	2204      	movs	r2, #4
10046012:	431a      	orrs	r2, r3
10046014:	687b      	ldr	r3, [r7, #4]
10046016:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10046018:	687b      	ldr	r3, [r7, #4]
1004601a:	681b      	ldr	r3, [r3, #0]
1004601c:	2220      	movs	r2, #32
1004601e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
10046020:	687b      	ldr	r3, [r7, #4]
10046022:	2200      	movs	r2, #0
10046024:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
10046026:	687b      	ldr	r3, [r7, #4]
10046028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004602a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
1004602c:	687b      	ldr	r3, [r7, #4]
1004602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046030:	2b00      	cmp	r3, #0
10046032:	d03b      	beq.n	100460ac <I2C_ITError+0x154>
10046034:	68bb      	ldr	r3, [r7, #8]
10046036:	2b11      	cmp	r3, #17
10046038:	d002      	beq.n	10046040 <I2C_ITError+0xe8>
1004603a:	68bb      	ldr	r3, [r7, #8]
1004603c:	2b21      	cmp	r3, #33	@ 0x21
1004603e:	d135      	bne.n	100460ac <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
10046040:	687b      	ldr	r3, [r7, #4]
10046042:	681b      	ldr	r3, [r3, #0]
10046044:	681a      	ldr	r2, [r3, #0]
10046046:	2380      	movs	r3, #128	@ 0x80
10046048:	01db      	lsls	r3, r3, #7
1004604a:	401a      	ands	r2, r3
1004604c:	2380      	movs	r3, #128	@ 0x80
1004604e:	01db      	lsls	r3, r3, #7
10046050:	429a      	cmp	r2, r3
10046052:	d107      	bne.n	10046064 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10046054:	687b      	ldr	r3, [r7, #4]
10046056:	681b      	ldr	r3, [r3, #0]
10046058:	681a      	ldr	r2, [r3, #0]
1004605a:	687b      	ldr	r3, [r7, #4]
1004605c:	681b      	ldr	r3, [r3, #0]
1004605e:	493c      	ldr	r1, [pc, #240]	@ (10046150 <I2C_ITError+0x1f8>)
10046060:	400a      	ands	r2, r1
10046062:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10046064:	687b      	ldr	r3, [r7, #4]
10046066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046068:	0018      	movs	r0, r3
1004606a:	f7fe f99f 	bl	100443ac <HAL_DMA_GetState>
1004606e:	0003      	movs	r3, r0
10046070:	2b01      	cmp	r3, #1
10046072:	d016      	beq.n	100460a2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
10046074:	687b      	ldr	r3, [r7, #4]
10046076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046078:	4a36      	ldr	r2, [pc, #216]	@ (10046154 <I2C_ITError+0x1fc>)
1004607a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004607c:	687b      	ldr	r3, [r7, #4]
1004607e:	2240      	movs	r2, #64	@ 0x40
10046080:	2100      	movs	r1, #0
10046082:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10046084:	687b      	ldr	r3, [r7, #4]
10046086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046088:	0018      	movs	r0, r3
1004608a:	f7fe f948 	bl	1004431e <HAL_DMA_Abort_IT>
1004608e:	1e03      	subs	r3, r0, #0
10046090:	d051      	beq.n	10046136 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
10046092:	687b      	ldr	r3, [r7, #4]
10046094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10046098:	687b      	ldr	r3, [r7, #4]
1004609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004609c:	0018      	movs	r0, r3
1004609e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100460a0:	e049      	b.n	10046136 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
100460a2:	687b      	ldr	r3, [r7, #4]
100460a4:	0018      	movs	r0, r3
100460a6:	f000 f859 	bl	1004615c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100460aa:	e044      	b.n	10046136 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
100460ac:	687b      	ldr	r3, [r7, #4]
100460ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100460b0:	2b00      	cmp	r3, #0
100460b2:	d03b      	beq.n	1004612c <I2C_ITError+0x1d4>
100460b4:	68bb      	ldr	r3, [r7, #8]
100460b6:	2b12      	cmp	r3, #18
100460b8:	d002      	beq.n	100460c0 <I2C_ITError+0x168>
100460ba:	68bb      	ldr	r3, [r7, #8]
100460bc:	2b22      	cmp	r3, #34	@ 0x22
100460be:	d135      	bne.n	1004612c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
100460c0:	687b      	ldr	r3, [r7, #4]
100460c2:	681b      	ldr	r3, [r3, #0]
100460c4:	681a      	ldr	r2, [r3, #0]
100460c6:	2380      	movs	r3, #128	@ 0x80
100460c8:	021b      	lsls	r3, r3, #8
100460ca:	401a      	ands	r2, r3
100460cc:	2380      	movs	r3, #128	@ 0x80
100460ce:	021b      	lsls	r3, r3, #8
100460d0:	429a      	cmp	r2, r3
100460d2:	d107      	bne.n	100460e4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100460d4:	687b      	ldr	r3, [r7, #4]
100460d6:	681b      	ldr	r3, [r3, #0]
100460d8:	681a      	ldr	r2, [r3, #0]
100460da:	687b      	ldr	r3, [r7, #4]
100460dc:	681b      	ldr	r3, [r3, #0]
100460de:	491e      	ldr	r1, [pc, #120]	@ (10046158 <I2C_ITError+0x200>)
100460e0:	400a      	ands	r2, r1
100460e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
100460e4:	687b      	ldr	r3, [r7, #4]
100460e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100460e8:	0018      	movs	r0, r3
100460ea:	f7fe f95f 	bl	100443ac <HAL_DMA_GetState>
100460ee:	0003      	movs	r3, r0
100460f0:	2b01      	cmp	r3, #1
100460f2:	d016      	beq.n	10046122 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
100460f4:	687b      	ldr	r3, [r7, #4]
100460f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100460f8:	4a16      	ldr	r2, [pc, #88]	@ (10046154 <I2C_ITError+0x1fc>)
100460fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
100460fc:	687b      	ldr	r3, [r7, #4]
100460fe:	2240      	movs	r2, #64	@ 0x40
10046100:	2100      	movs	r1, #0
10046102:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10046104:	687b      	ldr	r3, [r7, #4]
10046106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046108:	0018      	movs	r0, r3
1004610a:	f7fe f908 	bl	1004431e <HAL_DMA_Abort_IT>
1004610e:	1e03      	subs	r3, r0, #0
10046110:	d013      	beq.n	1004613a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
10046112:	687b      	ldr	r3, [r7, #4]
10046114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10046118:	687b      	ldr	r3, [r7, #4]
1004611a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004611c:	0018      	movs	r0, r3
1004611e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10046120:	e00b      	b.n	1004613a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
10046122:	687b      	ldr	r3, [r7, #4]
10046124:	0018      	movs	r0, r3
10046126:	f000 f819 	bl	1004615c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004612a:	e006      	b.n	1004613a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
1004612c:	687b      	ldr	r3, [r7, #4]
1004612e:	0018      	movs	r0, r3
10046130:	f000 f814 	bl	1004615c <I2C_TreatErrorCallback>
  }
}
10046134:	e002      	b.n	1004613c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10046136:	46c0      	nop			@ (mov r8, r8)
10046138:	e000      	b.n	1004613c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004613a:	46c0      	nop			@ (mov r8, r8)
}
1004613c:	46c0      	nop			@ (mov r8, r8)
1004613e:	46bd      	mov	sp, r7
10046140:	b004      	add	sp, #16
10046142:	bd80      	pop	{r7, pc}
10046144:	ffff0000 	.word	0xffff0000
10046148:	10044f49 	.word	0x10044f49
1004614c:	00008003 	.word	0x00008003
10046150:	ffffbfff 	.word	0xffffbfff
10046154:	100461f3 	.word	0x100461f3
10046158:	ffff7fff 	.word	0xffff7fff

1004615c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
1004615c:	b580      	push	{r7, lr}
1004615e:	b082      	sub	sp, #8
10046160:	af00      	add	r7, sp, #0
10046162:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
10046164:	687b      	ldr	r3, [r7, #4]
10046166:	2241      	movs	r2, #65	@ 0x41
10046168:	5c9b      	ldrb	r3, [r3, r2]
1004616a:	b2db      	uxtb	r3, r3
1004616c:	2b60      	cmp	r3, #96	@ 0x60
1004616e:	d10f      	bne.n	10046190 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10046170:	687b      	ldr	r3, [r7, #4]
10046172:	2241      	movs	r2, #65	@ 0x41
10046174:	2120      	movs	r1, #32
10046176:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10046178:	687b      	ldr	r3, [r7, #4]
1004617a:	2200      	movs	r2, #0
1004617c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004617e:	687b      	ldr	r3, [r7, #4]
10046180:	2240      	movs	r2, #64	@ 0x40
10046182:	2100      	movs	r1, #0
10046184:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
10046186:	687b      	ldr	r3, [r7, #4]
10046188:	0018      	movs	r0, r3
1004618a:	f7fe fdb2 	bl	10044cf2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004618e:	e00a      	b.n	100461a6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
10046190:	687b      	ldr	r3, [r7, #4]
10046192:	2200      	movs	r2, #0
10046194:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10046196:	687b      	ldr	r3, [r7, #4]
10046198:	2240      	movs	r2, #64	@ 0x40
1004619a:	2100      	movs	r1, #0
1004619c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
1004619e:	687b      	ldr	r3, [r7, #4]
100461a0:	0018      	movs	r0, r3
100461a2:	f7fe fd9e 	bl	10044ce2 <HAL_I2C_ErrorCallback>
}
100461a6:	46c0      	nop			@ (mov r8, r8)
100461a8:	46bd      	mov	sp, r7
100461aa:	b002      	add	sp, #8
100461ac:	bd80      	pop	{r7, pc}

100461ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
100461ae:	b580      	push	{r7, lr}
100461b0:	b082      	sub	sp, #8
100461b2:	af00      	add	r7, sp, #0
100461b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
100461b6:	687b      	ldr	r3, [r7, #4]
100461b8:	681b      	ldr	r3, [r3, #0]
100461ba:	699b      	ldr	r3, [r3, #24]
100461bc:	2202      	movs	r2, #2
100461be:	4013      	ands	r3, r2
100461c0:	2b02      	cmp	r3, #2
100461c2:	d103      	bne.n	100461cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
100461c4:	687b      	ldr	r3, [r7, #4]
100461c6:	681b      	ldr	r3, [r3, #0]
100461c8:	2200      	movs	r2, #0
100461ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
100461cc:	687b      	ldr	r3, [r7, #4]
100461ce:	681b      	ldr	r3, [r3, #0]
100461d0:	699b      	ldr	r3, [r3, #24]
100461d2:	2201      	movs	r2, #1
100461d4:	4013      	ands	r3, r2
100461d6:	2b01      	cmp	r3, #1
100461d8:	d007      	beq.n	100461ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
100461da:	687b      	ldr	r3, [r7, #4]
100461dc:	681b      	ldr	r3, [r3, #0]
100461de:	699a      	ldr	r2, [r3, #24]
100461e0:	687b      	ldr	r3, [r7, #4]
100461e2:	681b      	ldr	r3, [r3, #0]
100461e4:	2101      	movs	r1, #1
100461e6:	430a      	orrs	r2, r1
100461e8:	619a      	str	r2, [r3, #24]
  }
}
100461ea:	46c0      	nop			@ (mov r8, r8)
100461ec:	46bd      	mov	sp, r7
100461ee:	b002      	add	sp, #8
100461f0:	bd80      	pop	{r7, pc}

100461f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
100461f2:	b580      	push	{r7, lr}
100461f4:	b084      	sub	sp, #16
100461f6:	af00      	add	r7, sp, #0
100461f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
100461fa:	687b      	ldr	r3, [r7, #4]
100461fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100461fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
10046200:	68fb      	ldr	r3, [r7, #12]
10046202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046204:	2b00      	cmp	r3, #0
10046206:	d003      	beq.n	10046210 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10046208:	68fb      	ldr	r3, [r7, #12]
1004620a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004620c:	2200      	movs	r2, #0
1004620e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
10046210:	68fb      	ldr	r3, [r7, #12]
10046212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10046214:	2b00      	cmp	r3, #0
10046216:	d003      	beq.n	10046220 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10046218:	68fb      	ldr	r3, [r7, #12]
1004621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004621c:	2200      	movs	r2, #0
1004621e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
10046220:	68fb      	ldr	r3, [r7, #12]
10046222:	0018      	movs	r0, r3
10046224:	f7ff ff9a 	bl	1004615c <I2C_TreatErrorCallback>
}
10046228:	46c0      	nop			@ (mov r8, r8)
1004622a:	46bd      	mov	sp, r7
1004622c:	b004      	add	sp, #16
1004622e:	bd80      	pop	{r7, pc}

10046230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10046230:	b590      	push	{r4, r7, lr}
10046232:	b087      	sub	sp, #28
10046234:	af00      	add	r7, sp, #0
10046236:	60f8      	str	r0, [r7, #12]
10046238:	0008      	movs	r0, r1
1004623a:	0011      	movs	r1, r2
1004623c:	607b      	str	r3, [r7, #4]
1004623e:	240a      	movs	r4, #10
10046240:	193b      	adds	r3, r7, r4
10046242:	1c02      	adds	r2, r0, #0
10046244:	801a      	strh	r2, [r3, #0]
10046246:	2009      	movs	r0, #9
10046248:	183b      	adds	r3, r7, r0
1004624a:	1c0a      	adds	r2, r1, #0
1004624c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004624e:	193b      	adds	r3, r7, r4
10046250:	881b      	ldrh	r3, [r3, #0]
10046252:	059b      	lsls	r3, r3, #22
10046254:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10046256:	183b      	adds	r3, r7, r0
10046258:	781b      	ldrb	r3, [r3, #0]
1004625a:	0419      	lsls	r1, r3, #16
1004625c:	23ff      	movs	r3, #255	@ 0xff
1004625e:	041b      	lsls	r3, r3, #16
10046260:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10046262:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10046264:	687b      	ldr	r3, [r7, #4]
10046266:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10046268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004626a:	4313      	orrs	r3, r2
1004626c:	005b      	lsls	r3, r3, #1
1004626e:	085b      	lsrs	r3, r3, #1
10046270:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10046272:	68fb      	ldr	r3, [r7, #12]
10046274:	681b      	ldr	r3, [r3, #0]
10046276:	685b      	ldr	r3, [r3, #4]
10046278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004627a:	0d51      	lsrs	r1, r2, #21
1004627c:	2280      	movs	r2, #128	@ 0x80
1004627e:	00d2      	lsls	r2, r2, #3
10046280:	400a      	ands	r2, r1
10046282:	4907      	ldr	r1, [pc, #28]	@ (100462a0 <I2C_TransferConfig+0x70>)
10046284:	430a      	orrs	r2, r1
10046286:	43d2      	mvns	r2, r2
10046288:	401a      	ands	r2, r3
1004628a:	0011      	movs	r1, r2
1004628c:	68fb      	ldr	r3, [r7, #12]
1004628e:	681b      	ldr	r3, [r3, #0]
10046290:	697a      	ldr	r2, [r7, #20]
10046292:	430a      	orrs	r2, r1
10046294:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10046296:	46c0      	nop			@ (mov r8, r8)
10046298:	46bd      	mov	sp, r7
1004629a:	b007      	add	sp, #28
1004629c:	bd90      	pop	{r4, r7, pc}
1004629e:	46c0      	nop			@ (mov r8, r8)
100462a0:	03ff63ff 	.word	0x03ff63ff

100462a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
100462a4:	b580      	push	{r7, lr}
100462a6:	b084      	sub	sp, #16
100462a8:	af00      	add	r7, sp, #0
100462aa:	6078      	str	r0, [r7, #4]
100462ac:	000a      	movs	r2, r1
100462ae:	1cbb      	adds	r3, r7, #2
100462b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
100462b2:	2300      	movs	r3, #0
100462b4:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
100462b6:	687b      	ldr	r3, [r7, #4]
100462b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100462ba:	4b3c      	ldr	r3, [pc, #240]	@ (100463ac <I2C_Enable_IRQ+0x108>)
100462bc:	429a      	cmp	r2, r3
100462be:	d035      	beq.n	1004632c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
100462c0:	687b      	ldr	r3, [r7, #4]
100462c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
100462c4:	4b3a      	ldr	r3, [pc, #232]	@ (100463b0 <I2C_Enable_IRQ+0x10c>)
100462c6:	429a      	cmp	r2, r3
100462c8:	d030      	beq.n	1004632c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
100462ca:	687b      	ldr	r3, [r7, #4]
100462cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
100462ce:	4b39      	ldr	r3, [pc, #228]	@ (100463b4 <I2C_Enable_IRQ+0x110>)
100462d0:	429a      	cmp	r2, r3
100462d2:	d02b      	beq.n	1004632c <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
100462d4:	1cbb      	adds	r3, r7, #2
100462d6:	2200      	movs	r2, #0
100462d8:	5e9b      	ldrsh	r3, [r3, r2]
100462da:	2b00      	cmp	r3, #0
100462dc:	da03      	bge.n	100462e6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100462de:	68fb      	ldr	r3, [r7, #12]
100462e0:	22b8      	movs	r2, #184	@ 0xb8
100462e2:	4313      	orrs	r3, r2
100462e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
100462e6:	1cbb      	adds	r3, r7, #2
100462e8:	881b      	ldrh	r3, [r3, #0]
100462ea:	2201      	movs	r2, #1
100462ec:	4013      	ands	r3, r2
100462ee:	d003      	beq.n	100462f8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
100462f0:	68fb      	ldr	r3, [r7, #12]
100462f2:	22f2      	movs	r2, #242	@ 0xf2
100462f4:	4313      	orrs	r3, r2
100462f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
100462f8:	1cbb      	adds	r3, r7, #2
100462fa:	881b      	ldrh	r3, [r3, #0]
100462fc:	2202      	movs	r2, #2
100462fe:	4013      	ands	r3, r2
10046300:	d003      	beq.n	1004630a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
10046302:	68fb      	ldr	r3, [r7, #12]
10046304:	22f4      	movs	r2, #244	@ 0xf4
10046306:	4313      	orrs	r3, r2
10046308:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004630a:	1cbb      	adds	r3, r7, #2
1004630c:	881b      	ldrh	r3, [r3, #0]
1004630e:	2b10      	cmp	r3, #16
10046310:	d103      	bne.n	1004631a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10046312:	68fb      	ldr	r3, [r7, #12]
10046314:	2290      	movs	r2, #144	@ 0x90
10046316:	4313      	orrs	r3, r2
10046318:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004631a:	1cbb      	adds	r3, r7, #2
1004631c:	881b      	ldrh	r3, [r3, #0]
1004631e:	2b20      	cmp	r3, #32
10046320:	d137      	bne.n	10046392 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
10046322:	68fb      	ldr	r3, [r7, #12]
10046324:	2220      	movs	r2, #32
10046326:	4313      	orrs	r3, r2
10046328:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004632a:	e032      	b.n	10046392 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004632c:	1cbb      	adds	r3, r7, #2
1004632e:	2200      	movs	r2, #0
10046330:	5e9b      	ldrsh	r3, [r3, r2]
10046332:	2b00      	cmp	r3, #0
10046334:	da03      	bge.n	1004633e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10046336:	68fb      	ldr	r3, [r7, #12]
10046338:	22b8      	movs	r2, #184	@ 0xb8
1004633a:	4313      	orrs	r3, r2
1004633c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004633e:	1cbb      	adds	r3, r7, #2
10046340:	881b      	ldrh	r3, [r3, #0]
10046342:	2201      	movs	r2, #1
10046344:	4013      	ands	r3, r2
10046346:	d003      	beq.n	10046350 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
10046348:	68fb      	ldr	r3, [r7, #12]
1004634a:	22f2      	movs	r2, #242	@ 0xf2
1004634c:	4313      	orrs	r3, r2
1004634e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10046350:	1cbb      	adds	r3, r7, #2
10046352:	881b      	ldrh	r3, [r3, #0]
10046354:	2202      	movs	r2, #2
10046356:	4013      	ands	r3, r2
10046358:	d003      	beq.n	10046362 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004635a:	68fb      	ldr	r3, [r7, #12]
1004635c:	22f4      	movs	r2, #244	@ 0xf4
1004635e:	4313      	orrs	r3, r2
10046360:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
10046362:	1cbb      	adds	r3, r7, #2
10046364:	881b      	ldrh	r3, [r3, #0]
10046366:	2b10      	cmp	r3, #16
10046368:	d103      	bne.n	10046372 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004636a:	68fb      	ldr	r3, [r7, #12]
1004636c:	2290      	movs	r2, #144	@ 0x90
1004636e:	4313      	orrs	r3, r2
10046370:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
10046372:	1cbb      	adds	r3, r7, #2
10046374:	881b      	ldrh	r3, [r3, #0]
10046376:	2b20      	cmp	r3, #32
10046378:	d103      	bne.n	10046382 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
1004637a:	68fb      	ldr	r3, [r7, #12]
1004637c:	2260      	movs	r2, #96	@ 0x60
1004637e:	4313      	orrs	r3, r2
10046380:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
10046382:	1cbb      	adds	r3, r7, #2
10046384:	881b      	ldrh	r3, [r3, #0]
10046386:	2b40      	cmp	r3, #64	@ 0x40
10046388:	d103      	bne.n	10046392 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
1004638a:	68fb      	ldr	r3, [r7, #12]
1004638c:	2240      	movs	r2, #64	@ 0x40
1004638e:	4313      	orrs	r3, r2
10046390:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
10046392:	687b      	ldr	r3, [r7, #4]
10046394:	681b      	ldr	r3, [r3, #0]
10046396:	6819      	ldr	r1, [r3, #0]
10046398:	687b      	ldr	r3, [r7, #4]
1004639a:	681b      	ldr	r3, [r3, #0]
1004639c:	68fa      	ldr	r2, [r7, #12]
1004639e:	430a      	orrs	r2, r1
100463a0:	601a      	str	r2, [r3, #0]
}
100463a2:	46c0      	nop			@ (mov r8, r8)
100463a4:	46bd      	mov	sp, r7
100463a6:	b004      	add	sp, #16
100463a8:	bd80      	pop	{r7, pc}
100463aa:	46c0      	nop			@ (mov r8, r8)
100463ac:	10045149 	.word	0x10045149
100463b0:	10045599 	.word	0x10045599
100463b4:	10045341 	.word	0x10045341

100463b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
100463b8:	b580      	push	{r7, lr}
100463ba:	b084      	sub	sp, #16
100463bc:	af00      	add	r7, sp, #0
100463be:	6078      	str	r0, [r7, #4]
100463c0:	000a      	movs	r2, r1
100463c2:	1cbb      	adds	r3, r7, #2
100463c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
100463c6:	2300      	movs	r3, #0
100463c8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
100463ca:	1cbb      	adds	r3, r7, #2
100463cc:	881b      	ldrh	r3, [r3, #0]
100463ce:	2201      	movs	r2, #1
100463d0:	4013      	ands	r3, r2
100463d2:	d010      	beq.n	100463f6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
100463d4:	68fb      	ldr	r3, [r7, #12]
100463d6:	2242      	movs	r2, #66	@ 0x42
100463d8:	4313      	orrs	r3, r2
100463da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100463dc:	687b      	ldr	r3, [r7, #4]
100463de:	2241      	movs	r2, #65	@ 0x41
100463e0:	5c9b      	ldrb	r3, [r3, r2]
100463e2:	b2db      	uxtb	r3, r3
100463e4:	001a      	movs	r2, r3
100463e6:	2328      	movs	r3, #40	@ 0x28
100463e8:	4013      	ands	r3, r2
100463ea:	2b28      	cmp	r3, #40	@ 0x28
100463ec:	d003      	beq.n	100463f6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100463ee:	68fb      	ldr	r3, [r7, #12]
100463f0:	22b0      	movs	r2, #176	@ 0xb0
100463f2:	4313      	orrs	r3, r2
100463f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
100463f6:	1cbb      	adds	r3, r7, #2
100463f8:	881b      	ldrh	r3, [r3, #0]
100463fa:	2202      	movs	r2, #2
100463fc:	4013      	ands	r3, r2
100463fe:	d010      	beq.n	10046422 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
10046400:	68fb      	ldr	r3, [r7, #12]
10046402:	2244      	movs	r2, #68	@ 0x44
10046404:	4313      	orrs	r3, r2
10046406:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10046408:	687b      	ldr	r3, [r7, #4]
1004640a:	2241      	movs	r2, #65	@ 0x41
1004640c:	5c9b      	ldrb	r3, [r3, r2]
1004640e:	b2db      	uxtb	r3, r3
10046410:	001a      	movs	r2, r3
10046412:	2328      	movs	r3, #40	@ 0x28
10046414:	4013      	ands	r3, r2
10046416:	2b28      	cmp	r3, #40	@ 0x28
10046418:	d003      	beq.n	10046422 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004641a:	68fb      	ldr	r3, [r7, #12]
1004641c:	22b0      	movs	r2, #176	@ 0xb0
1004641e:	4313      	orrs	r3, r2
10046420:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10046422:	1cbb      	adds	r3, r7, #2
10046424:	2200      	movs	r2, #0
10046426:	5e9b      	ldrsh	r3, [r3, r2]
10046428:	2b00      	cmp	r3, #0
1004642a:	da03      	bge.n	10046434 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004642c:	68fb      	ldr	r3, [r7, #12]
1004642e:	22b8      	movs	r2, #184	@ 0xb8
10046430:	4313      	orrs	r3, r2
10046432:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
10046434:	1cbb      	adds	r3, r7, #2
10046436:	881b      	ldrh	r3, [r3, #0]
10046438:	2b10      	cmp	r3, #16
1004643a:	d103      	bne.n	10046444 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004643c:	68fb      	ldr	r3, [r7, #12]
1004643e:	2290      	movs	r2, #144	@ 0x90
10046440:	4313      	orrs	r3, r2
10046442:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
10046444:	1cbb      	adds	r3, r7, #2
10046446:	881b      	ldrh	r3, [r3, #0]
10046448:	2b20      	cmp	r3, #32
1004644a:	d103      	bne.n	10046454 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
1004644c:	68fb      	ldr	r3, [r7, #12]
1004644e:	2220      	movs	r2, #32
10046450:	4313      	orrs	r3, r2
10046452:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
10046454:	1cbb      	adds	r3, r7, #2
10046456:	881b      	ldrh	r3, [r3, #0]
10046458:	2b40      	cmp	r3, #64	@ 0x40
1004645a:	d103      	bne.n	10046464 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
1004645c:	68fb      	ldr	r3, [r7, #12]
1004645e:	2240      	movs	r2, #64	@ 0x40
10046460:	4313      	orrs	r3, r2
10046462:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
10046464:	687b      	ldr	r3, [r7, #4]
10046466:	681b      	ldr	r3, [r3, #0]
10046468:	681a      	ldr	r2, [r3, #0]
1004646a:	68fb      	ldr	r3, [r7, #12]
1004646c:	43d9      	mvns	r1, r3
1004646e:	687b      	ldr	r3, [r7, #4]
10046470:	681b      	ldr	r3, [r3, #0]
10046472:	400a      	ands	r2, r1
10046474:	601a      	str	r2, [r3, #0]
}
10046476:	46c0      	nop			@ (mov r8, r8)
10046478:	46bd      	mov	sp, r7
1004647a:	b004      	add	sp, #16
1004647c:	bd80      	pop	{r7, pc}
	...

10046480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10046480:	b580      	push	{r7, lr}
10046482:	b082      	sub	sp, #8
10046484:	af00      	add	r7, sp, #0
10046486:	6078      	str	r0, [r7, #4]
10046488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004648a:	687b      	ldr	r3, [r7, #4]
1004648c:	2241      	movs	r2, #65	@ 0x41
1004648e:	5c9b      	ldrb	r3, [r3, r2]
10046490:	b2db      	uxtb	r3, r3
10046492:	2b20      	cmp	r3, #32
10046494:	d138      	bne.n	10046508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10046496:	687b      	ldr	r3, [r7, #4]
10046498:	2240      	movs	r2, #64	@ 0x40
1004649a:	5c9b      	ldrb	r3, [r3, r2]
1004649c:	2b01      	cmp	r3, #1
1004649e:	d101      	bne.n	100464a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
100464a0:	2302      	movs	r3, #2
100464a2:	e032      	b.n	1004650a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
100464a4:	687b      	ldr	r3, [r7, #4]
100464a6:	2240      	movs	r2, #64	@ 0x40
100464a8:	2101      	movs	r1, #1
100464aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
100464ac:	687b      	ldr	r3, [r7, #4]
100464ae:	2241      	movs	r2, #65	@ 0x41
100464b0:	2124      	movs	r1, #36	@ 0x24
100464b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
100464b4:	687b      	ldr	r3, [r7, #4]
100464b6:	681b      	ldr	r3, [r3, #0]
100464b8:	681a      	ldr	r2, [r3, #0]
100464ba:	687b      	ldr	r3, [r7, #4]
100464bc:	681b      	ldr	r3, [r3, #0]
100464be:	2101      	movs	r1, #1
100464c0:	438a      	bics	r2, r1
100464c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
100464c4:	687b      	ldr	r3, [r7, #4]
100464c6:	681b      	ldr	r3, [r3, #0]
100464c8:	681a      	ldr	r2, [r3, #0]
100464ca:	687b      	ldr	r3, [r7, #4]
100464cc:	681b      	ldr	r3, [r3, #0]
100464ce:	4911      	ldr	r1, [pc, #68]	@ (10046514 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
100464d0:	400a      	ands	r2, r1
100464d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
100464d4:	687b      	ldr	r3, [r7, #4]
100464d6:	681b      	ldr	r3, [r3, #0]
100464d8:	6819      	ldr	r1, [r3, #0]
100464da:	687b      	ldr	r3, [r7, #4]
100464dc:	681b      	ldr	r3, [r3, #0]
100464de:	683a      	ldr	r2, [r7, #0]
100464e0:	430a      	orrs	r2, r1
100464e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
100464e4:	687b      	ldr	r3, [r7, #4]
100464e6:	681b      	ldr	r3, [r3, #0]
100464e8:	681a      	ldr	r2, [r3, #0]
100464ea:	687b      	ldr	r3, [r7, #4]
100464ec:	681b      	ldr	r3, [r3, #0]
100464ee:	2101      	movs	r1, #1
100464f0:	430a      	orrs	r2, r1
100464f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
100464f4:	687b      	ldr	r3, [r7, #4]
100464f6:	2241      	movs	r2, #65	@ 0x41
100464f8:	2120      	movs	r1, #32
100464fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100464fc:	687b      	ldr	r3, [r7, #4]
100464fe:	2240      	movs	r2, #64	@ 0x40
10046500:	2100      	movs	r1, #0
10046502:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10046504:	2300      	movs	r3, #0
10046506:	e000      	b.n	1004650a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
10046508:	2302      	movs	r3, #2
  }
}
1004650a:	0018      	movs	r0, r3
1004650c:	46bd      	mov	sp, r7
1004650e:	b002      	add	sp, #8
10046510:	bd80      	pop	{r7, pc}
10046512:	46c0      	nop			@ (mov r8, r8)
10046514:	ffffefff 	.word	0xffffefff

10046518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
10046518:	b580      	push	{r7, lr}
1004651a:	b084      	sub	sp, #16
1004651c:	af00      	add	r7, sp, #0
1004651e:	6078      	str	r0, [r7, #4]
10046520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10046522:	687b      	ldr	r3, [r7, #4]
10046524:	2241      	movs	r2, #65	@ 0x41
10046526:	5c9b      	ldrb	r3, [r3, r2]
10046528:	b2db      	uxtb	r3, r3
1004652a:	2b20      	cmp	r3, #32
1004652c:	d139      	bne.n	100465a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004652e:	687b      	ldr	r3, [r7, #4]
10046530:	2240      	movs	r2, #64	@ 0x40
10046532:	5c9b      	ldrb	r3, [r3, r2]
10046534:	2b01      	cmp	r3, #1
10046536:	d101      	bne.n	1004653c <HAL_I2CEx_ConfigDigitalFilter+0x24>
10046538:	2302      	movs	r3, #2
1004653a:	e033      	b.n	100465a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
1004653c:	687b      	ldr	r3, [r7, #4]
1004653e:	2240      	movs	r2, #64	@ 0x40
10046540:	2101      	movs	r1, #1
10046542:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10046544:	687b      	ldr	r3, [r7, #4]
10046546:	2241      	movs	r2, #65	@ 0x41
10046548:	2124      	movs	r1, #36	@ 0x24
1004654a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004654c:	687b      	ldr	r3, [r7, #4]
1004654e:	681b      	ldr	r3, [r3, #0]
10046550:	681a      	ldr	r2, [r3, #0]
10046552:	687b      	ldr	r3, [r7, #4]
10046554:	681b      	ldr	r3, [r3, #0]
10046556:	2101      	movs	r1, #1
10046558:	438a      	bics	r2, r1
1004655a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
1004655c:	687b      	ldr	r3, [r7, #4]
1004655e:	681b      	ldr	r3, [r3, #0]
10046560:	681b      	ldr	r3, [r3, #0]
10046562:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10046564:	68fb      	ldr	r3, [r7, #12]
10046566:	4a11      	ldr	r2, [pc, #68]	@ (100465ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
10046568:	4013      	ands	r3, r2
1004656a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
1004656c:	683b      	ldr	r3, [r7, #0]
1004656e:	021b      	lsls	r3, r3, #8
10046570:	68fa      	ldr	r2, [r7, #12]
10046572:	4313      	orrs	r3, r2
10046574:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10046576:	687b      	ldr	r3, [r7, #4]
10046578:	681b      	ldr	r3, [r3, #0]
1004657a:	68fa      	ldr	r2, [r7, #12]
1004657c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004657e:	687b      	ldr	r3, [r7, #4]
10046580:	681b      	ldr	r3, [r3, #0]
10046582:	681a      	ldr	r2, [r3, #0]
10046584:	687b      	ldr	r3, [r7, #4]
10046586:	681b      	ldr	r3, [r3, #0]
10046588:	2101      	movs	r1, #1
1004658a:	430a      	orrs	r2, r1
1004658c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004658e:	687b      	ldr	r3, [r7, #4]
10046590:	2241      	movs	r2, #65	@ 0x41
10046592:	2120      	movs	r1, #32
10046594:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10046596:	687b      	ldr	r3, [r7, #4]
10046598:	2240      	movs	r2, #64	@ 0x40
1004659a:	2100      	movs	r1, #0
1004659c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004659e:	2300      	movs	r3, #0
100465a0:	e000      	b.n	100465a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
100465a2:	2302      	movs	r3, #2
  }
}
100465a4:	0018      	movs	r0, r3
100465a6:	46bd      	mov	sp, r7
100465a8:	b004      	add	sp, #16
100465aa:	bd80      	pop	{r7, pc}
100465ac:	fffff0ff 	.word	0xfffff0ff

100465b0 <LL_RADIO_TIMER_DisableTimer1>:
  * @rmtoll TIMEOUTDESTREG   DESTINATION   LL_RADIO_TIMER_DisableTimer1
  * @param  BLUEx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableTimer1(BLUE_TypeDef *BLUEx)
{
100465b0:	b580      	push	{r7, lr}
100465b2:	b082      	sub	sp, #8
100465b4:	af00      	add	r7, sp, #0
100465b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100465b8:	687b      	ldr	r3, [r7, #4]
100465ba:	68db      	ldr	r3, [r3, #12]
100465bc:	2203      	movs	r2, #3
100465be:	4393      	bics	r3, r2
100465c0:	001a      	movs	r2, r3
100465c2:	687b      	ldr	r3, [r7, #4]
100465c4:	60da      	str	r2, [r3, #12]
}
100465c6:	46c0      	nop			@ (mov r8, r8)
100465c8:	46bd      	mov	sp, r7
100465ca:	b002      	add	sp, #8
100465cc:	bd80      	pop	{r7, pc}

100465ce <LL_RADIO_TIMER_DisableTimer2>:
  * @rmtoll TIMEOUTDESTREG   DESTINATION   LL_RADIO_TIMER_DisableTimer2
  * @param  BLUEx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableTimer2(BLUE_TypeDef *BLUEx)
{
100465ce:	b580      	push	{r7, lr}
100465d0:	b082      	sub	sp, #8
100465d2:	af00      	add	r7, sp, #0
100465d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100465d6:	687b      	ldr	r3, [r7, #4]
100465d8:	68db      	ldr	r3, [r3, #12]
100465da:	2203      	movs	r2, #3
100465dc:	4393      	bics	r3, r2
100465de:	001a      	movs	r2, r3
100465e0:	687b      	ldr	r3, [r7, #4]
100465e2:	60da      	str	r2, [r3, #12]
}
100465e4:	46c0      	nop			@ (mov r8, r8)
100465e6:	46bd      	mov	sp, r7
100465e8:	b002      	add	sp, #8
100465ea:	bd80      	pop	{r7, pc}

100465ec <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    BLE_WAKEUP_EN   LL_RADIO_TIMER_DisableBLEWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
100465ec:	b580      	push	{r7, lr}
100465ee:	b082      	sub	sp, #8
100465f0:	af00      	add	r7, sp, #0
100465f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100465f4:	687b      	ldr	r3, [r7, #4]
100465f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100465f8:	4a03      	ldr	r2, [pc, #12]	@ (10046608 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100465fa:	401a      	ands	r2, r3
100465fc:	687b      	ldr	r3, [r7, #4]
100465fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046600:	46c0      	nop			@ (mov r8, r8)
10046602:	46bd      	mov	sp, r7
10046604:	b002      	add	sp, #8
10046606:	bd80      	pop	{r7, pc}
10046608:	bfffffff 	.word	0xbfffffff

1004660c <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004660c:	b580      	push	{r7, lr}
1004660e:	b086      	sub	sp, #24
10046610:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
10046612:	4a24      	ldr	r2, [pc, #144]	@ (100466a4 <HAL_RADIO_ReadRSSI+0x98>)
10046614:	23a9      	movs	r3, #169	@ 0xa9
10046616:	009b      	lsls	r3, r3, #2
10046618:	58d3      	ldr	r3, [r2, r3]
1004661a:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004661c:	4a21      	ldr	r2, [pc, #132]	@ (100466a4 <HAL_RADIO_ReadRSSI+0x98>)
1004661e:	23aa      	movs	r3, #170	@ 0xaa
10046620:	009b      	lsls	r3, r3, #2
10046622:	58d3      	ldr	r3, [r2, r3]
10046624:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
10046626:	68bb      	ldr	r3, [r7, #8]
10046628:	021b      	lsls	r3, r3, #8
1004662a:	041b      	lsls	r3, r3, #16
1004662c:	0c1a      	lsrs	r2, r3, #16
1004662e:	68fb      	ldr	r3, [r7, #12]
10046630:	21ff      	movs	r1, #255	@ 0xff
10046632:	400b      	ands	r3, r1
10046634:	4313      	orrs	r3, r2
10046636:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
10046638:	4a1a      	ldr	r2, [pc, #104]	@ (100466a4 <HAL_RADIO_ReadRSSI+0x98>)
1004663a:	23ab      	movs	r3, #171	@ 0xab
1004663c:	009b      	lsls	r3, r3, #2
1004663e:	58d3      	ldr	r3, [r2, r3]
10046640:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
10046642:	693b      	ldr	r3, [r7, #16]
10046644:	2b00      	cmp	r3, #0
10046646:	d002      	beq.n	1004664e <HAL_RADIO_ReadRSSI+0x42>
10046648:	687b      	ldr	r3, [r7, #4]
1004664a:	2b0b      	cmp	r3, #11
1004664c:	d902      	bls.n	10046654 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004664e:	237f      	movs	r3, #127	@ 0x7f
10046650:	617b      	str	r3, [r7, #20]
10046652:	e020      	b.n	10046696 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
10046654:	687a      	ldr	r2, [r7, #4]
10046656:	0013      	movs	r3, r2
10046658:	005b      	lsls	r3, r3, #1
1004665a:	189b      	adds	r3, r3, r2
1004665c:	005b      	lsls	r3, r3, #1
1004665e:	3b77      	subs	r3, #119	@ 0x77
10046660:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
10046662:	e005      	b.n	10046670 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
10046664:	697b      	ldr	r3, [r7, #20]
10046666:	3306      	adds	r3, #6
10046668:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004666a:	693b      	ldr	r3, [r7, #16]
1004666c:	085b      	lsrs	r3, r3, #1
1004666e:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
10046670:	693b      	ldr	r3, [r7, #16]
10046672:	2b1e      	cmp	r3, #30
10046674:	d8f6      	bhi.n	10046664 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
10046676:	693a      	ldr	r2, [r7, #16]
10046678:	0013      	movs	r3, r2
1004667a:	005b      	lsls	r3, r3, #1
1004667c:	189b      	adds	r3, r3, r2
1004667e:	009b      	lsls	r3, r3, #2
10046680:	189b      	adds	r3, r3, r2
10046682:	015b      	lsls	r3, r3, #5
10046684:	189b      	adds	r3, r3, r2
10046686:	4a08      	ldr	r2, [pc, #32]	@ (100466a8 <HAL_RADIO_ReadRSSI+0x9c>)
10046688:	4694      	mov	ip, r2
1004668a:	4463      	add	r3, ip
1004668c:	0a9b      	lsrs	r3, r3, #10
1004668e:	001a      	movs	r2, r3
10046690:	697b      	ldr	r3, [r7, #20]
10046692:	189b      	adds	r3, r3, r2
10046694:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
10046696:	697b      	ldr	r3, [r7, #20]
10046698:	b25b      	sxtb	r3, r3
}
1004669a:	0018      	movs	r0, r3
1004669c:	46bd      	mov	sp, r7
1004669e:	b006      	add	sp, #24
100466a0:	bd80      	pop	{r7, pc}
100466a2:	46c0      	nop			@ (mov r8, r8)
100466a4:	60001400 	.word	0x60001400
100466a8:	000046a0 	.word	0x000046a0

100466ac <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
100466ac:	b590      	push	{r4, r7, lr}
100466ae:	b089      	sub	sp, #36	@ 0x24
100466b0:	af00      	add	r7, sp, #0
100466b2:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
100466b4:	687a      	ldr	r2, [r7, #4]
100466b6:	2380      	movs	r3, #128	@ 0x80
100466b8:	049b      	lsls	r3, r3, #18
100466ba:	4013      	ands	r3, r2
100466bc:	d100      	bne.n	100466c0 <HAL_RADIO_ActionPacketIsr+0x14>
100466be:	e0fb      	b.n	100468b8 <HAL_RADIO_ActionPacketIsr+0x20c>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100466c0:	23c0      	movs	r3, #192	@ 0xc0
100466c2:	05db      	lsls	r3, r3, #23
100466c4:	69db      	ldr	r3, [r3, #28]
100466c6:	2240      	movs	r2, #64	@ 0x40
100466c8:	4013      	ands	r3, r2
100466ca:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
100466cc:	4b7c      	ldr	r3, [pc, #496]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100466ce:	689b      	ldr	r3, [r3, #8]
100466d0:	687a      	ldr	r2, [r7, #4]
100466d2:	430a      	orrs	r2, r1
100466d4:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
100466d6:	4b7a      	ldr	r3, [pc, #488]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100466d8:	689b      	ldr	r3, [r3, #8]
100466da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100466dc:	4b78      	ldr	r3, [pc, #480]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100466de:	689b      	ldr	r3, [r3, #8]
100466e0:	0018      	movs	r0, r3
100466e2:	4790      	blx	r2
100466e4:	0003      	movs	r3, r0
100466e6:	2b01      	cmp	r3, #1
100466e8:	d104      	bne.n	100466f4 <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
100466ea:	4b75      	ldr	r3, [pc, #468]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100466ec:	689b      	ldr	r3, [r3, #8]
100466ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100466f0:	61fb      	str	r3, [r7, #28]
100466f2:	e003      	b.n	100466fc <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
100466f4:	4b72      	ldr	r3, [pc, #456]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100466f6:	689b      	ldr	r3, [r3, #8]
100466f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100466fa:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
100466fc:	69fb      	ldr	r3, [r7, #28]
100466fe:	2b00      	cmp	r3, #0
10046700:	d116      	bne.n	10046730 <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
10046702:	23c0      	movs	r3, #192	@ 0xc0
10046704:	05db      	lsls	r3, r3, #23
10046706:	0018      	movs	r0, r3
10046708:	f7ff ff52 	bl	100465b0 <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
1004670c:	23c0      	movs	r3, #192	@ 0xc0
1004670e:	05db      	lsls	r3, r3, #23
10046710:	0018      	movs	r0, r3
10046712:	f7ff ff5c 	bl	100465ce <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10046716:	4b6b      	ldr	r3, [pc, #428]	@ (100468c4 <HAL_RADIO_ActionPacketIsr+0x218>)
10046718:	0018      	movs	r0, r3
1004671a:	f7ff ff67 	bl	100465ec <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
1004671e:	4b6a      	ldr	r3, [pc, #424]	@ (100468c8 <HAL_RADIO_ActionPacketIsr+0x21c>)
10046720:	791b      	ldrb	r3, [r3, #4]
10046722:	b2db      	uxtb	r3, r3
10046724:	4a68      	ldr	r2, [pc, #416]	@ (100468c8 <HAL_RADIO_ActionPacketIsr+0x21c>)
10046726:	217f      	movs	r1, #127	@ 0x7f
10046728:	400b      	ands	r3, r1
1004672a:	b2db      	uxtb	r3, r3
1004672c:	7113      	strb	r3, [r2, #4]
1004672e:	e08f      	b.n	10046850 <HAL_RADIO_ActionPacketIsr+0x1a4>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10046730:	69fb      	ldr	r3, [r7, #28]
10046732:	781b      	ldrb	r3, [r3, #0]
10046734:	4964      	ldr	r1, [pc, #400]	@ (100468c8 <HAL_RADIO_ActionPacketIsr+0x21c>)
10046736:	2280      	movs	r2, #128	@ 0x80
10046738:	4252      	negs	r2, r2
1004673a:	4313      	orrs	r3, r2
1004673c:	b2db      	uxtb	r3, r3
1004673e:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
10046740:	69fb      	ldr	r3, [r7, #28]
10046742:	3318      	adds	r3, #24
10046744:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10046746:	69fb      	ldr	r3, [r7, #28]
10046748:	781b      	ldrb	r3, [r3, #0]
1004674a:	001a      	movs	r2, r3
1004674c:	235c      	movs	r3, #92	@ 0x5c
1004674e:	4353      	muls	r3, r2
10046750:	4a5e      	ldr	r2, [pc, #376]	@ (100468cc <HAL_RADIO_ActionPacketIsr+0x220>)
10046752:	4694      	mov	ip, r2
10046754:	4463      	add	r3, ip
10046756:	781b      	ldrb	r3, [r3, #0]
10046758:	b2db      	uxtb	r3, r3
1004675a:	b25b      	sxtb	r3, r3
1004675c:	227f      	movs	r2, #127	@ 0x7f
1004675e:	4013      	ands	r3, r2
10046760:	b25a      	sxtb	r2, r3
10046762:	69fb      	ldr	r3, [r7, #28]
10046764:	2138      	movs	r1, #56	@ 0x38
10046766:	5c5b      	ldrb	r3, [r3, r1]
10046768:	b25b      	sxtb	r3, r3
1004676a:	4313      	orrs	r3, r2
1004676c:	b25a      	sxtb	r2, r3
1004676e:	69fb      	ldr	r3, [r7, #28]
10046770:	781b      	ldrb	r3, [r3, #0]
10046772:	0019      	movs	r1, r3
10046774:	235c      	movs	r3, #92	@ 0x5c
10046776:	434b      	muls	r3, r1
10046778:	4954      	ldr	r1, [pc, #336]	@ (100468cc <HAL_RADIO_ActionPacketIsr+0x220>)
1004677a:	468c      	mov	ip, r1
1004677c:	4463      	add	r3, ip
1004677e:	b2d2      	uxtb	r2, r2
10046780:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
10046782:	69fb      	ldr	r3, [r7, #28]
10046784:	781b      	ldrb	r3, [r3, #0]
10046786:	001a      	movs	r2, r3
10046788:	235c      	movs	r3, #92	@ 0x5c
1004678a:	4353      	muls	r3, r2
1004678c:	4a4f      	ldr	r2, [pc, #316]	@ (100468cc <HAL_RADIO_ActionPacketIsr+0x220>)
1004678e:	4694      	mov	ip, r2
10046790:	4463      	add	r3, ip
10046792:	69ba      	ldr	r2, [r7, #24]
10046794:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
10046796:	69fb      	ldr	r3, [r7, #28]
10046798:	781b      	ldrb	r3, [r3, #0]
1004679a:	001a      	movs	r2, r3
1004679c:	235c      	movs	r3, #92	@ 0x5c
1004679e:	4353      	muls	r3, r2
100467a0:	4a4a      	ldr	r2, [pc, #296]	@ (100468cc <HAL_RADIO_ActionPacketIsr+0x220>)
100467a2:	4694      	mov	ip, r2
100467a4:	4463      	add	r3, ip
100467a6:	69ba      	ldr	r2, [r7, #24]
100467a8:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
100467aa:	69fb      	ldr	r3, [r7, #28]
100467ac:	781b      	ldrb	r3, [r3, #0]
100467ae:	001a      	movs	r2, r3
100467b0:	235c      	movs	r3, #92	@ 0x5c
100467b2:	4353      	muls	r3, r2
100467b4:	4a45      	ldr	r2, [pc, #276]	@ (100468cc <HAL_RADIO_ActionPacketIsr+0x220>)
100467b6:	4694      	mov	ip, r2
100467b8:	4463      	add	r3, ip
100467ba:	69fa      	ldr	r2, [r7, #28]
100467bc:	7891      	ldrb	r1, [r2, #2]
100467be:	222b      	movs	r2, #43	@ 0x2b
100467c0:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
100467c2:	69fb      	ldr	r3, [r7, #28]
100467c4:	785b      	ldrb	r3, [r3, #1]
100467c6:	001a      	movs	r2, r3
100467c8:	2304      	movs	r3, #4
100467ca:	4013      	ands	r3, r2
100467cc:	d040      	beq.n	10046850 <HAL_RADIO_ActionPacketIsr+0x1a4>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
100467ce:	23c0      	movs	r3, #192	@ 0xc0
100467d0:	05db      	lsls	r3, r3, #23
100467d2:	0018      	movs	r0, r3
100467d4:	f7ff feec 	bl	100465b0 <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
100467d8:	23c0      	movs	r3, #192	@ 0xc0
100467da:	05db      	lsls	r3, r3, #23
100467dc:	0018      	movs	r0, r3
100467de:	f7ff fef6 	bl	100465ce <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
100467e2:	69fb      	ldr	r3, [r7, #28]
100467e4:	785b      	ldrb	r3, [r3, #1]
100467e6:	001a      	movs	r2, r3
100467e8:	2320      	movs	r3, #32
100467ea:	4013      	ands	r3, r2
100467ec:	d01e      	beq.n	1004682c <HAL_RADIO_ActionPacketIsr+0x180>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
100467ee:	f000 fa2b 	bl	10046c48 <HAL_RADIO_TIMER_GetCurrentSysTime>
100467f2:	0002      	movs	r2, r0
100467f4:	000b      	movs	r3, r1
100467f6:	0014      	movs	r4, r2
100467f8:	69fb      	ldr	r3, [r7, #28]
100467fa:	685b      	ldr	r3, [r3, #4]
100467fc:	0018      	movs	r0, r3
100467fe:	f000 fa15 	bl	10046c2c <HAL_RADIO_TIMER_UsToSystime>
10046802:	0003      	movs	r3, r0
10046804:	18e3      	adds	r3, r4, r3
10046806:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10046808:	69fb      	ldr	r3, [r7, #28]
1004680a:	2238      	movs	r2, #56	@ 0x38
1004680c:	5c9b      	ldrb	r3, [r3, r2]
1004680e:	3b80      	subs	r3, #128	@ 0x80
10046810:	425a      	negs	r2, r3
10046812:	4153      	adcs	r3, r2
10046814:	b2db      	uxtb	r3, r3
10046816:	0019      	movs	r1, r3
10046818:	69fb      	ldr	r3, [r7, #28]
1004681a:	785b      	ldrb	r3, [r3, #1]
1004681c:	2201      	movs	r2, #1
1004681e:	4013      	ands	r3, r2
10046820:	b2da      	uxtb	r2, r3
10046822:	697b      	ldr	r3, [r7, #20]
10046824:	0018      	movs	r0, r3
10046826:	f000 f99f 	bl	10046b68 <HAL_RADIO_TIMER_SetRadioTimerValue>
1004682a:	e011      	b.n	10046850 <HAL_RADIO_ActionPacketIsr+0x1a4>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
1004682c:	69fb      	ldr	r3, [r7, #28]
1004682e:	6858      	ldr	r0, [r3, #4]
10046830:	69fb      	ldr	r3, [r7, #28]
10046832:	2238      	movs	r2, #56	@ 0x38
10046834:	5c9b      	ldrb	r3, [r3, r2]
10046836:	3b80      	subs	r3, #128	@ 0x80
10046838:	425a      	negs	r2, r3
1004683a:	4153      	adcs	r3, r2
1004683c:	b2db      	uxtb	r3, r3
1004683e:	0019      	movs	r1, r3
10046840:	69fb      	ldr	r3, [r7, #28]
10046842:	785b      	ldrb	r3, [r3, #1]
10046844:	2201      	movs	r2, #1
10046846:	4013      	ands	r3, r2
10046848:	b2db      	uxtb	r3, r3
1004684a:	001a      	movs	r2, r3
1004684c:	f000 f98c 	bl	10046b68 <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
10046850:	687b      	ldr	r3, [r7, #4]
10046852:	2b00      	cmp	r3, #0
10046854:	db04      	blt.n	10046860 <HAL_RADIO_ActionPacketIsr+0x1b4>
10046856:	687a      	ldr	r2, [r7, #4]
10046858:	2380      	movs	r3, #128	@ 0x80
1004685a:	05db      	lsls	r3, r3, #23
1004685c:	4013      	ands	r3, r2
1004685e:	d012      	beq.n	10046886 <HAL_RADIO_ActionPacketIsr+0x1da>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10046860:	f7ff fed4 	bl	1004660c <HAL_RADIO_ReadRSSI>
10046864:	0003      	movs	r3, r0
10046866:	001a      	movs	r2, r3
10046868:	4b15      	ldr	r3, [pc, #84]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
1004686a:	689b      	ldr	r3, [r3, #8]
1004686c:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
1004686e:	2308      	movs	r3, #8
10046870:	18fb      	adds	r3, r7, r3
10046872:	0018      	movs	r0, r3
10046874:	f000 f964 	bl	10046b40 <HAL_RADIO_TIMER_GetAnchorPoint>
10046878:	0002      	movs	r2, r0
1004687a:	000b      	movs	r3, r1
1004687c:	4910      	ldr	r1, [pc, #64]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
1004687e:	6889      	ldr	r1, [r1, #8]
10046880:	0013      	movs	r3, r2
10046882:	610b      	str	r3, [r1, #16]
    {
10046884:	e00b      	b.n	1004689e <HAL_RADIO_ActionPacketIsr+0x1f2>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
10046886:	687a      	ldr	r2, [r7, #4]
10046888:	2380      	movs	r3, #128	@ 0x80
1004688a:	04db      	lsls	r3, r3, #19
1004688c:	4013      	ands	r3, r2
1004688e:	d006      	beq.n	1004689e <HAL_RADIO_ActionPacketIsr+0x1f2>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10046890:	f7ff febc 	bl	1004660c <HAL_RADIO_ReadRSSI>
10046894:	0003      	movs	r3, r0
10046896:	001a      	movs	r2, r3
10046898:	4b09      	ldr	r3, [pc, #36]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
1004689a:	689b      	ldr	r3, [r3, #8]
1004689c:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
1004689e:	4b08      	ldr	r3, [pc, #32]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100468a0:	689b      	ldr	r3, [r3, #8]
100468a2:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
100468a4:	4b06      	ldr	r3, [pc, #24]	@ (100468c0 <HAL_RADIO_ActionPacketIsr+0x214>)
100468a6:	69fa      	ldr	r2, [r7, #28]
100468a8:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
100468aa:	693b      	ldr	r3, [r7, #16]
100468ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100468ae:	69f9      	ldr	r1, [r7, #28]
100468b0:	693a      	ldr	r2, [r7, #16]
100468b2:	0010      	movs	r0, r2
100468b4:	4798      	blx	r3
  }

  return ;
100468b6:	46c0      	nop			@ (mov r8, r8)
100468b8:	46c0      	nop			@ (mov r8, r8)
}
100468ba:	46bd      	mov	sp, r7
100468bc:	b009      	add	sp, #36	@ 0x24
100468be:	bd90      	pop	{r4, r7, pc}
100468c0:	20000b48 	.word	0x20000b48
100468c4:	60001800 	.word	0x60001800
100468c8:	200000c0 	.word	0x200000c0
100468cc:	200000dc 	.word	0x200000dc

100468d0 <HAL_RADIO_TxRxCallback>:
}

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
100468d0:	b580      	push	{r7, lr}
100468d2:	b082      	sub	sp, #8
100468d4:	af00      	add	r7, sp, #0
100468d6:	6078      	str	r0, [r7, #4]
}
100468d8:	46c0      	nop			@ (mov r8, r8)
100468da:	46bd      	mov	sp, r7
100468dc:	b002      	add	sp, #8
100468de:	bd80      	pop	{r7, pc}

100468e0 <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
100468e0:	b580      	push	{r7, lr}
100468e2:	af00      	add	r7, sp, #0
}
100468e4:	46c0      	nop			@ (mov r8, r8)
100468e6:	46bd      	mov	sp, r7
100468e8:	bd80      	pop	{r7, pc}

100468ea <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
100468ea:	b580      	push	{r7, lr}
100468ec:	b082      	sub	sp, #8
100468ee:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
100468f0:	23c0      	movs	r3, #192	@ 0xc0
100468f2:	05db      	lsls	r3, r3, #23
100468f4:	69db      	ldr	r3, [r3, #28]
100468f6:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
100468f8:	23c0      	movs	r3, #192	@ 0xc0
100468fa:	05db      	lsls	r3, r3, #23
100468fc:	685b      	ldr	r3, [r3, #4]
100468fe:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10046900:	23c0      	movs	r3, #192	@ 0xc0
10046902:	05db      	lsls	r3, r3, #23
10046904:	683a      	ldr	r2, [r7, #0]
10046906:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10046908:	f000 f984 	bl	10046c14 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
1004690c:	687a      	ldr	r2, [r7, #4]
1004690e:	683b      	ldr	r3, [r7, #0]
10046910:	4313      	orrs	r3, r2
10046912:	0018      	movs	r0, r3
10046914:	f7ff feca 	bl	100466ac <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10046918:	687a      	ldr	r2, [r7, #4]
1004691a:	683b      	ldr	r3, [r7, #0]
1004691c:	4313      	orrs	r3, r2
1004691e:	0018      	movs	r0, r3
10046920:	f7ff ffd6 	bl	100468d0 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10046924:	f000 f970 	bl	10046c08 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10046928:	23c0      	movs	r3, #192	@ 0xc0
1004692a:	05db      	lsls	r3, r3, #23
1004692c:	685b      	ldr	r3, [r3, #4]
1004692e:	603b      	str	r3, [r7, #0]
}
10046930:	46c0      	nop			@ (mov r8, r8)
10046932:	46bd      	mov	sp, r7
10046934:	b002      	add	sp, #8
10046936:	bd80      	pop	{r7, pc}

10046938 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10046938:	b580      	push	{r7, lr}
1004693a:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004693c:	f7ff ffd0 	bl	100468e0 <HAL_RADIO_TxRxSeqCallback>
}
10046940:	46c0      	nop			@ (mov r8, r8)
10046942:	46bd      	mov	sp, r7
10046944:	bd80      	pop	{r7, pc}

10046946 <LL_RADIO_TIMER_EnableTimer1>:
{
10046946:	b580      	push	{r7, lr}
10046948:	b082      	sub	sp, #8
1004694a:	af00      	add	r7, sp, #0
1004694c:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004694e:	687b      	ldr	r3, [r7, #4]
10046950:	68db      	ldr	r3, [r3, #12]
10046952:	2203      	movs	r2, #3
10046954:	4393      	bics	r3, r2
10046956:	2202      	movs	r2, #2
10046958:	431a      	orrs	r2, r3
1004695a:	687b      	ldr	r3, [r7, #4]
1004695c:	60da      	str	r2, [r3, #12]
}
1004695e:	46c0      	nop			@ (mov r8, r8)
10046960:	46bd      	mov	sp, r7
10046962:	b002      	add	sp, #8
10046964:	bd80      	pop	{r7, pc}

10046966 <LL_RADIO_TIMER_DisableTimer1>:
{
10046966:	b580      	push	{r7, lr}
10046968:	b082      	sub	sp, #8
1004696a:	af00      	add	r7, sp, #0
1004696c:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004696e:	687b      	ldr	r3, [r7, #4]
10046970:	68db      	ldr	r3, [r3, #12]
10046972:	2203      	movs	r2, #3
10046974:	4393      	bics	r3, r2
10046976:	001a      	movs	r2, r3
10046978:	687b      	ldr	r3, [r7, #4]
1004697a:	60da      	str	r2, [r3, #12]
}
1004697c:	46c0      	nop			@ (mov r8, r8)
1004697e:	46bd      	mov	sp, r7
10046980:	b002      	add	sp, #8
10046982:	bd80      	pop	{r7, pc}

10046984 <LL_RADIO_TIMER_DisableTimer2>:
{
10046984:	b580      	push	{r7, lr}
10046986:	b082      	sub	sp, #8
10046988:	af00      	add	r7, sp, #0
1004698a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004698c:	687b      	ldr	r3, [r7, #4]
1004698e:	68db      	ldr	r3, [r3, #12]
10046990:	2203      	movs	r2, #3
10046992:	4393      	bics	r3, r2
10046994:	001a      	movs	r2, r3
10046996:	687b      	ldr	r3, [r7, #4]
10046998:	60da      	str	r2, [r3, #12]
}
1004699a:	46c0      	nop			@ (mov r8, r8)
1004699c:	46bd      	mov	sp, r7
1004699e:	b002      	add	sp, #8
100469a0:	bd80      	pop	{r7, pc}

100469a2 <LL_RADIO_TIMER_SetTimeout>:
{
100469a2:	b580      	push	{r7, lr}
100469a4:	b082      	sub	sp, #8
100469a6:	af00      	add	r7, sp, #0
100469a8:	6078      	str	r0, [r7, #4]
100469aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
100469ac:	687b      	ldr	r3, [r7, #4]
100469ae:	683a      	ldr	r2, [r7, #0]
100469b0:	611a      	str	r2, [r3, #16]
}
100469b2:	46c0      	nop			@ (mov r8, r8)
100469b4:	46bd      	mov	sp, r7
100469b6:	b002      	add	sp, #8
100469b8:	bd80      	pop	{r7, pc}

100469ba <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
100469ba:	b580      	push	{r7, lr}
100469bc:	b082      	sub	sp, #8
100469be:	af00      	add	r7, sp, #0
100469c0:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100469c2:	687b      	ldr	r3, [r7, #4]
100469c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100469c6:	2280      	movs	r2, #128	@ 0x80
100469c8:	05d2      	lsls	r2, r2, #23
100469ca:	431a      	orrs	r2, r3
100469cc:	687b      	ldr	r3, [r7, #4]
100469ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
100469d0:	46c0      	nop			@ (mov r8, r8)
100469d2:	46bd      	mov	sp, r7
100469d4:	b002      	add	sp, #8
100469d6:	bd80      	pop	{r7, pc}

100469d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
100469d8:	b580      	push	{r7, lr}
100469da:	b082      	sub	sp, #8
100469dc:	af00      	add	r7, sp, #0
100469de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100469e0:	687b      	ldr	r3, [r7, #4]
100469e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100469e4:	4a03      	ldr	r2, [pc, #12]	@ (100469f4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100469e6:	401a      	ands	r2, r3
100469e8:	687b      	ldr	r3, [r7, #4]
100469ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
100469ec:	46c0      	nop			@ (mov r8, r8)
100469ee:	46bd      	mov	sp, r7
100469f0:	b002      	add	sp, #8
100469f2:	bd80      	pop	{r7, pc}
100469f4:	bfffffff 	.word	0xbfffffff

100469f8 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
  * @rmtoll CM0_SLEEP_REQUEST_MODE    CPU_WAKEUP_EN   LL_RADIO_TIMER_EnableCPUWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
100469f8:	b580      	push	{r7, lr}
100469fa:	b082      	sub	sp, #8
100469fc:	af00      	add	r7, sp, #0
100469fe:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046a00:	687b      	ldr	r3, [r7, #4]
10046a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046a04:	2280      	movs	r2, #128	@ 0x80
10046a06:	05d2      	lsls	r2, r2, #23
10046a08:	431a      	orrs	r2, r3
10046a0a:	687b      	ldr	r3, [r7, #4]
10046a0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046a0e:	46c0      	nop			@ (mov r8, r8)
10046a10:	46bd      	mov	sp, r7
10046a12:	b002      	add	sp, #8
10046a14:	bd80      	pop	{r7, pc}
	...

10046a18 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
  * @rmtoll CM0_SLEEP_REQUEST_MODE    CPU_WAKEUP_EN   LL_RADIO_TIMER_DisableCPUWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10046a18:	b580      	push	{r7, lr}
10046a1a:	b082      	sub	sp, #8
10046a1c:	af00      	add	r7, sp, #0
10046a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046a20:	687b      	ldr	r3, [r7, #4]
10046a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046a24:	4a03      	ldr	r2, [pc, #12]	@ (10046a34 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10046a26:	401a      	ands	r2, r3
10046a28:	687b      	ldr	r3, [r7, #4]
10046a2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046a2c:	46c0      	nop			@ (mov r8, r8)
10046a2e:	46bd      	mov	sp, r7
10046a30:	b002      	add	sp, #8
10046a32:	bd80      	pop	{r7, pc}
10046a34:	bfffffff 	.word	0xbfffffff

10046a38 <LL_RADIO_TIMER_SetBLEWakeupTime>:
  * @param  WAKEUPx Radio Timer instance
  * @param  Time in 16 x slow clock period
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP_TypeDef *WAKEUPx, uint32_t Time)
{
10046a38:	b580      	push	{r7, lr}
10046a3a:	b082      	sub	sp, #8
10046a3c:	af00      	add	r7, sp, #0
10046a3e:	6078      	str	r0, [r7, #4]
10046a40:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10046a42:	687b      	ldr	r3, [r7, #4]
10046a44:	683a      	ldr	r2, [r7, #0]
10046a46:	625a      	str	r2, [r3, #36]	@ 0x24
}
10046a48:	46c0      	nop			@ (mov r8, r8)
10046a4a:	46bd      	mov	sp, r7
10046a4c:	b002      	add	sp, #8
10046a4e:	bd80      	pop	{r7, pc}

10046a50 <LL_RADIO_TIMER_SetCPUWakeupTime>:
  * @param  WAKEUPx Radio Timer instance
  * @param  Time in slow clock period
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP_TypeDef *WAKEUPx, uint32_t Time)
{
10046a50:	b580      	push	{r7, lr}
10046a52:	b082      	sub	sp, #8
10046a54:	af00      	add	r7, sp, #0
10046a56:	6078      	str	r0, [r7, #4]
10046a58:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10046a5a:	687b      	ldr	r3, [r7, #4]
10046a5c:	683a      	ldr	r2, [r7, #0]
10046a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046a60:	46c0      	nop			@ (mov r8, r8)
10046a62:	46bd      	mov	sp, r7
10046a64:	b002      	add	sp, #8
10046a66:	bd80      	pop	{r7, pc}

10046a68 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10046a68:	b580      	push	{r7, lr}
10046a6a:	b082      	sub	sp, #8
10046a6c:	af00      	add	r7, sp, #0
10046a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10046a70:	687b      	ldr	r3, [r7, #4]
10046a72:	691b      	ldr	r3, [r3, #16]
}
10046a74:	0018      	movs	r0, r3
10046a76:	46bd      	mov	sp, r7
10046a78:	b002      	add	sp, #8
10046a7a:	bd80      	pop	{r7, pc}

10046a7c <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
10046a7c:	b580      	push	{r7, lr}
10046a7e:	b082      	sub	sp, #8
10046a80:	af00      	add	r7, sp, #0
10046a82:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10046a84:	687b      	ldr	r3, [r7, #4]
10046a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046a88:	2280      	movs	r2, #128	@ 0x80
10046a8a:	0592      	lsls	r2, r2, #22
10046a8c:	431a      	orrs	r2, r3
10046a8e:	687b      	ldr	r3, [r7, #4]
10046a90:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046a92:	46c0      	nop			@ (mov r8, r8)
10046a94:	46bd      	mov	sp, r7
10046a96:	b002      	add	sp, #8
10046a98:	bd80      	pop	{r7, pc}
	...

10046a9c <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10046a9c:	b580      	push	{r7, lr}
10046a9e:	b082      	sub	sp, #8
10046aa0:	af00      	add	r7, sp, #0
10046aa2:	6078      	str	r0, [r7, #4]
10046aa4:	000a      	movs	r2, r1
10046aa6:	1cfb      	adds	r3, r7, #3
10046aa8:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
10046aaa:	4b08      	ldr	r3, [pc, #32]	@ (10046acc <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10046aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046aae:	2207      	movs	r2, #7
10046ab0:	4393      	bics	r3, r2
10046ab2:	0019      	movs	r1, r3
10046ab4:	1cfb      	adds	r3, r7, #3
10046ab6:	781b      	ldrb	r3, [r3, #0]
10046ab8:	2207      	movs	r2, #7
10046aba:	401a      	ands	r2, r3
10046abc:	4b03      	ldr	r3, [pc, #12]	@ (10046acc <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10046abe:	430a      	orrs	r2, r1
10046ac0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
10046ac2:	46c0      	nop			@ (mov r8, r8)
10046ac4:	46bd      	mov	sp, r7
10046ac6:	b002      	add	sp, #8
10046ac8:	bd80      	pop	{r7, pc}
10046aca:	46c0      	nop			@ (mov r8, r8)
10046acc:	60001800 	.word	0x60001800

10046ad0 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046ad0:	b580      	push	{r7, lr}
10046ad2:	b082      	sub	sp, #8
10046ad4:	af00      	add	r7, sp, #0
10046ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
10046ad8:	687b      	ldr	r3, [r7, #4]
10046ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046adc:	2201      	movs	r2, #1
10046ade:	431a      	orrs	r2, r3
10046ae0:	687b      	ldr	r3, [r7, #4]
10046ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10046ae4:	46c0      	nop			@ (mov r8, r8)
10046ae6:	46bd      	mov	sp, r7
10046ae8:	b002      	add	sp, #8
10046aea:	bd80      	pop	{r7, pc}

10046aec <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046aec:	b580      	push	{r7, lr}
10046aee:	b082      	sub	sp, #8
10046af0:	af00      	add	r7, sp, #0
10046af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10046af4:	687b      	ldr	r3, [r7, #4]
10046af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046af8:	2201      	movs	r2, #1
10046afa:	4013      	ands	r3, r2
10046afc:	2b01      	cmp	r3, #1
10046afe:	d101      	bne.n	10046b04 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10046b00:	2301      	movs	r3, #1
10046b02:	e000      	b.n	10046b06 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
10046b04:	2300      	movs	r3, #0
}
10046b06:	0018      	movs	r0, r3
10046b08:	46bd      	mov	sp, r7
10046b0a:	b002      	add	sp, #8
10046b0c:	bd80      	pop	{r7, pc}

10046b0e <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046b0e:	b580      	push	{r7, lr}
10046b10:	b082      	sub	sp, #8
10046b12:	af00      	add	r7, sp, #0
10046b14:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10046b16:	687b      	ldr	r3, [r7, #4]
10046b18:	2200      	movs	r2, #0
10046b1a:	609a      	str	r2, [r3, #8]
}
10046b1c:	46c0      	nop			@ (mov r8, r8)
10046b1e:	46bd      	mov	sp, r7
10046b20:	b002      	add	sp, #8
10046b22:	bd80      	pop	{r7, pc}

10046b24 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046b24:	b580      	push	{r7, lr}
10046b26:	b082      	sub	sp, #8
10046b28:	af00      	add	r7, sp, #0
10046b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10046b2c:	687b      	ldr	r3, [r7, #4]
10046b2e:	691b      	ldr	r3, [r3, #16]
10046b30:	2201      	movs	r2, #1
10046b32:	431a      	orrs	r2, r3
10046b34:	687b      	ldr	r3, [r7, #4]
10046b36:	611a      	str	r2, [r3, #16]
}
10046b38:	46c0      	nop			@ (mov r8, r8)
10046b3a:	46bd      	mov	sp, r7
10046b3c:	b002      	add	sp, #8
10046b3e:	bd80      	pop	{r7, pc}

10046b40 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10046b40:	b580      	push	{r7, lr}
10046b42:	b082      	sub	sp, #8
10046b44:	af00      	add	r7, sp, #0
10046b46:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10046b48:	23c0      	movs	r3, #192	@ 0xc0
10046b4a:	05db      	lsls	r3, r3, #23
10046b4c:	695b      	ldr	r3, [r3, #20]
10046b4e:	687a      	ldr	r2, [r7, #4]
10046b50:	0011      	movs	r1, r2
10046b52:	0018      	movs	r0, r3
10046b54:	f000 fc08 	bl	10047368 <TIMER_GetPastSysTime>
10046b58:	0002      	movs	r2, r0
10046b5a:	000b      	movs	r3, r1
}
10046b5c:	0010      	movs	r0, r2
10046b5e:	0019      	movs	r1, r3
10046b60:	46bd      	mov	sp, r7
10046b62:	b002      	add	sp, #8
10046b64:	bd80      	pop	{r7, pc}
	...

10046b68 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10046b68:	b5f0      	push	{r4, r5, r6, r7, lr}
10046b6a:	b085      	sub	sp, #20
10046b6c:	af00      	add	r7, sp, #0
10046b6e:	6078      	str	r0, [r7, #4]
10046b70:	0008      	movs	r0, r1
10046b72:	0011      	movs	r1, r2
10046b74:	1cfb      	adds	r3, r7, #3
10046b76:	1c02      	adds	r2, r0, #0
10046b78:	701a      	strb	r2, [r3, #0]
10046b7a:	1cbb      	adds	r3, r7, #2
10046b7c:	1c0a      	adds	r2, r1, #0
10046b7e:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10046b80:	260f      	movs	r6, #15
10046b82:	19bb      	adds	r3, r7, r6
10046b84:	2200      	movs	r2, #0
10046b86:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046b88:	1cfb      	adds	r3, r7, #3
10046b8a:	781b      	ldrb	r3, [r3, #0]
10046b8c:	1e5a      	subs	r2, r3, #1
10046b8e:	4193      	sbcs	r3, r2
10046b90:	b2d9      	uxtb	r1, r3
10046b92:	4b1b      	ldr	r3, [pc, #108]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046b94:	2264      	movs	r2, #100	@ 0x64
10046b96:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046b98:	1cbb      	adds	r3, r7, #2
10046b9a:	781b      	ldrb	r3, [r3, #0]
10046b9c:	1e5a      	subs	r2, r3, #1
10046b9e:	4193      	sbcs	r3, r2
10046ba0:	b2d9      	uxtb	r1, r3
10046ba2:	4b17      	ldr	r3, [pc, #92]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046ba4:	2260      	movs	r2, #96	@ 0x60
10046ba6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046ba8:	4b15      	ldr	r3, [pc, #84]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046bae:	4914      	ldr	r1, [pc, #80]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046bb0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10046bb2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10046bb4:	6879      	ldr	r1, [r7, #4]
10046bb6:	1a09      	subs	r1, r1, r0
10046bb8:	000c      	movs	r4, r1
10046bba:	2100      	movs	r1, #0
10046bbc:	000d      	movs	r5, r1
10046bbe:	1912      	adds	r2, r2, r4
10046bc0:	416b      	adcs	r3, r5
10046bc2:	490f      	ldr	r1, [pc, #60]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046bc4:	658a      	str	r2, [r1, #88]	@ 0x58
10046bc6:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046bc8:	4b0d      	ldr	r3, [pc, #52]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046bca:	2261      	movs	r2, #97	@ 0x61
10046bcc:	2100      	movs	r1, #0
10046bce:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046bd0:	4b0b      	ldr	r3, [pc, #44]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046bd2:	2263      	movs	r2, #99	@ 0x63
10046bd4:	2100      	movs	r1, #0
10046bd6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046bd8:	4b09      	ldr	r3, [pc, #36]	@ (10046c00 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046bda:	2262      	movs	r2, #98	@ 0x62
10046bdc:	2101      	movs	r1, #1
10046bde:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046be0:	19ba      	adds	r2, r7, r6
10046be2:	4b08      	ldr	r3, [pc, #32]	@ (10046c04 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
10046be4:	0011      	movs	r1, r2
10046be6:	0018      	movs	r0, r3
10046be8:	f000 fa4c 	bl	10047084 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10046bec:	2001      	movs	r0, #1
10046bee:	f000 f9f1 	bl	10046fd4 <_virtualTimeBaseEnable>

  return retVal;
10046bf2:	19bb      	adds	r3, r7, r6
10046bf4:	781b      	ldrb	r3, [r3, #0]
}
10046bf6:	0018      	movs	r0, r3
10046bf8:	46bd      	mov	sp, r7
10046bfa:	b005      	add	sp, #20
10046bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046bfe:	46c0      	nop			@ (mov r8, r8)
10046c00:	20000b58 	.word	0x20000b58
10046c04:	20000bb0 	.word	0x20000bb0

10046c08 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046c08:	b580      	push	{r7, lr}
10046c0a:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10046c0c:	46c0      	nop			@ (mov r8, r8)
10046c0e:	46bd      	mov	sp, r7
10046c10:	bd80      	pop	{r7, pc}
	...

10046c14 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046c14:	b580      	push	{r7, lr}
10046c16:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046c18:	4b03      	ldr	r3, [pc, #12]	@ (10046c28 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046c1a:	2263      	movs	r2, #99	@ 0x63
10046c1c:	2100      	movs	r1, #0
10046c1e:	5499      	strb	r1, [r3, r2]
}
10046c20:	46c0      	nop			@ (mov r8, r8)
10046c22:	46bd      	mov	sp, r7
10046c24:	bd80      	pop	{r7, pc}
10046c26:	46c0      	nop			@ (mov r8, r8)
10046c28:	20000b58 	.word	0x20000b58

10046c2c <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10046c2c:	b580      	push	{r7, lr}
10046c2e:	b082      	sub	sp, #8
10046c30:	af00      	add	r7, sp, #0
10046c32:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10046c34:	687b      	ldr	r3, [r7, #4]
10046c36:	0018      	movs	r0, r3
10046c38:	f000 f8b2 	bl	10046da0 <_us_to_systime>
10046c3c:	0003      	movs	r3, r0
}
10046c3e:	0018      	movs	r0, r3
10046c40:	46bd      	mov	sp, r7
10046c42:	b002      	add	sp, #8
10046c44:	bd80      	pop	{r7, pc}
	...

10046c48 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10046c48:	b580      	push	{r7, lr}
10046c4a:	b082      	sub	sp, #8
10046c4c:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10046c4e:	1d3a      	adds	r2, r7, #4
10046c50:	4b05      	ldr	r3, [pc, #20]	@ (10046c68 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10046c52:	0011      	movs	r1, r2
10046c54:	0018      	movs	r0, r3
10046c56:	f000 f8cd 	bl	10046df4 <_get_system_time_and_machine>
10046c5a:	0002      	movs	r2, r0
10046c5c:	000b      	movs	r3, r1
}
10046c5e:	0010      	movs	r0, r2
10046c60:	0019      	movs	r1, r3
10046c62:	46bd      	mov	sp, r7
10046c64:	b002      	add	sp, #8
10046c66:	bd80      	pop	{r7, pc}
10046c68:	20000b58 	.word	0x20000b58

10046c6c <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10046c6c:	b590      	push	{r4, r7, lr}
10046c6e:	b089      	sub	sp, #36	@ 0x24
10046c70:	af00      	add	r7, sp, #0
10046c72:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10046c74:	4b28      	ldr	r3, [pc, #160]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046c76:	228c      	movs	r2, #140	@ 0x8c
10046c78:	589b      	ldr	r3, [r3, r2]
10046c7a:	687a      	ldr	r2, [r7, #4]
10046c7c:	0011      	movs	r1, r2
10046c7e:	0018      	movs	r0, r3
10046c80:	f000 f9d4 	bl	1004702c <_remove_timer_in_queue>
10046c84:	0003      	movs	r3, r0
10046c86:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10046c88:	210f      	movs	r1, #15
10046c8a:	187b      	adds	r3, r7, r1
10046c8c:	2200      	movs	r2, #0
10046c8e:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10046c90:	687b      	ldr	r3, [r7, #4]
10046c92:	2200      	movs	r2, #0
10046c94:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10046c96:	4b20      	ldr	r3, [pc, #128]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046c98:	228c      	movs	r2, #140	@ 0x8c
10046c9a:	589b      	ldr	r3, [r3, r2]
10046c9c:	69fa      	ldr	r2, [r7, #28]
10046c9e:	429a      	cmp	r2, r3
10046ca0:	d031      	beq.n	10046d06 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10046ca2:	000c      	movs	r4, r1
10046ca4:	187a      	adds	r2, r7, r1
10046ca6:	69fb      	ldr	r3, [r7, #28]
10046ca8:	0011      	movs	r1, r2
10046caa:	0018      	movs	r0, r3
10046cac:	f000 f90a 	bl	10046ec4 <_update_user_timeout>
10046cb0:	0002      	movs	r2, r0
10046cb2:	4b19      	ldr	r3, [pc, #100]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046cb4:	218c      	movs	r1, #140	@ 0x8c
10046cb6:	505a      	str	r2, [r3, r1]
    if (expired)
10046cb8:	193b      	adds	r3, r7, r4
10046cba:	781b      	ldrb	r3, [r3, #0]
10046cbc:	2b00      	cmp	r3, #0
10046cbe:	d026      	beq.n	10046d0e <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046cc0:	f3ef 8310 	mrs	r3, PRIMASK
10046cc4:	617b      	str	r3, [r7, #20]
  return(result);
10046cc6:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10046cca:	b672      	cpsid	i
}
10046ccc:	46c0      	nop			@ (mov r8, r8)
10046cce:	4b12      	ldr	r3, [pc, #72]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046cd0:	2291      	movs	r2, #145	@ 0x91
10046cd2:	5c9b      	ldrb	r3, [r3, r2]
10046cd4:	3301      	adds	r3, #1
10046cd6:	4a10      	ldr	r2, [pc, #64]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046cd8:	2192      	movs	r1, #146	@ 0x92
10046cda:	5c52      	ldrb	r2, [r2, r1]
10046cdc:	4293      	cmp	r3, r2
10046cde:	d103      	bne.n	10046ce8 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10046ce0:	4b0d      	ldr	r3, [pc, #52]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046ce2:	2291      	movs	r2, #145	@ 0x91
10046ce4:	5c9b      	ldrb	r3, [r3, r2]
10046ce6:	e004      	b.n	10046cf2 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10046ce8:	4b0b      	ldr	r3, [pc, #44]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046cea:	2291      	movs	r2, #145	@ 0x91
10046cec:	5c9b      	ldrb	r3, [r3, r2]
10046cee:	3301      	adds	r3, #1
10046cf0:	b2db      	uxtb	r3, r3
10046cf2:	4a09      	ldr	r2, [pc, #36]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046cf4:	2191      	movs	r1, #145	@ 0x91
10046cf6:	5453      	strb	r3, [r2, r1]
10046cf8:	69bb      	ldr	r3, [r7, #24]
10046cfa:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046cfc:	693b      	ldr	r3, [r7, #16]
10046cfe:	f383 8810 	msr	PRIMASK, r3
}
10046d02:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10046d04:	e003      	b.n	10046d0e <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10046d06:	4b04      	ldr	r3, [pc, #16]	@ (10046d18 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d08:	218c      	movs	r1, #140	@ 0x8c
10046d0a:	69fa      	ldr	r2, [r7, #28]
10046d0c:	505a      	str	r2, [r3, r1]
}
10046d0e:	46c0      	nop			@ (mov r8, r8)
10046d10:	46bd      	mov	sp, r7
10046d12:	b009      	add	sp, #36	@ 0x24
10046d14:	bd90      	pop	{r4, r7, pc}
10046d16:	46c0      	nop			@ (mov r8, r8)
10046d18:	20000b58 	.word	0x20000b58

10046d1c <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10046d1c:	b580      	push	{r7, lr}
10046d1e:	b082      	sub	sp, #8
10046d20:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046d22:	2300      	movs	r3, #0
10046d24:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10046d26:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10046d28:	4b13      	ldr	r3, [pc, #76]	@ (10046d78 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046d2a:	0018      	movs	r0, r3
10046d2c:	f7ff fe74 	bl	10046a18 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10046d30:	4b12      	ldr	r3, [pc, #72]	@ (10046d7c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046d32:	2291      	movs	r2, #145	@ 0x91
10046d34:	5c9b      	ldrb	r3, [r3, r2]
10046d36:	3301      	adds	r3, #1
10046d38:	4a10      	ldr	r2, [pc, #64]	@ (10046d7c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046d3a:	2192      	movs	r1, #146	@ 0x92
10046d3c:	5c52      	ldrb	r2, [r2, r1]
10046d3e:	4293      	cmp	r3, r2
10046d40:	d103      	bne.n	10046d4a <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
10046d42:	4b0e      	ldr	r3, [pc, #56]	@ (10046d7c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046d44:	2291      	movs	r2, #145	@ 0x91
10046d46:	5c9b      	ldrb	r3, [r3, r2]
10046d48:	e004      	b.n	10046d54 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
10046d4a:	4b0c      	ldr	r3, [pc, #48]	@ (10046d7c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046d4c:	2291      	movs	r2, #145	@ 0x91
10046d4e:	5c9b      	ldrb	r3, [r3, r2]
10046d50:	3301      	adds	r3, #1
10046d52:	b2db      	uxtb	r3, r3
10046d54:	4a09      	ldr	r2, [pc, #36]	@ (10046d7c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046d56:	2191      	movs	r1, #145	@ 0x91
10046d58:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046d5a:	4b07      	ldr	r3, [pc, #28]	@ (10046d78 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046d5c:	0018      	movs	r0, r3
10046d5e:	f7ff feb7 	bl	10046ad0 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10046d62:	4b05      	ldr	r3, [pc, #20]	@ (10046d78 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046d64:	0018      	movs	r0, r3
10046d66:	f7ff fec1 	bl	10046aec <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10046d6a:	0003      	movs	r3, r0
10046d6c:	607b      	str	r3, [r7, #4]
}
10046d6e:	46c0      	nop			@ (mov r8, r8)
10046d70:	46bd      	mov	sp, r7
10046d72:	b002      	add	sp, #8
10046d74:	bd80      	pop	{r7, pc}
10046d76:	46c0      	nop			@ (mov r8, r8)
10046d78:	60001800 	.word	0x60001800
10046d7c:	20000b58 	.word	0x20000b58

10046d80 <_timer_start_calibration>:
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;

}

static void _timer_start_calibration(void)
{
10046d80:	b580      	push	{r7, lr}
10046d82:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10046d84:	4b05      	ldr	r3, [pc, #20]	@ (10046d9c <_timer_start_calibration+0x1c>)
10046d86:	0018      	movs	r0, r3
10046d88:	f7ff fecc 	bl	10046b24 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10046d8c:	4b03      	ldr	r3, [pc, #12]	@ (10046d9c <_timer_start_calibration+0x1c>)
10046d8e:	0018      	movs	r0, r3
10046d90:	f7ff febd 	bl	10046b0e <LL_RADIO_TIMER_StartLSICalibration>
}
10046d94:	46c0      	nop			@ (mov r8, r8)
10046d96:	46bd      	mov	sp, r7
10046d98:	bd80      	pop	{r7, pc}
10046d9a:	46c0      	nop			@ (mov r8, r8)
10046d9c:	60001000 	.word	0x60001000

10046da0 <_us_to_systime>:
  }

}

static uint32_t _us_to_systime(uint32_t time)
{
10046da0:	b580      	push	{r7, lr}
10046da2:	b084      	sub	sp, #16
10046da4:	af00      	add	r7, sp, #0
10046da6:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
10046da8:	687b      	ldr	r3, [r7, #4]
10046daa:	2268      	movs	r2, #104	@ 0x68
10046dac:	4353      	muls	r3, r2
10046dae:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10046db0:	687b      	ldr	r3, [r7, #4]
10046db2:	22db      	movs	r2, #219	@ 0xdb
10046db4:	4353      	muls	r3, r2
10046db6:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
10046db8:	68fb      	ldr	r3, [r7, #12]
10046dba:	0a1a      	lsrs	r2, r3, #8
10046dbc:	68bb      	ldr	r3, [r7, #8]
10046dbe:	0c1b      	lsrs	r3, r3, #16
10046dc0:	18d3      	adds	r3, r2, r3
}
10046dc2:	0018      	movs	r0, r3
10046dc4:	46bd      	mov	sp, r7
10046dc6:	b004      	add	sp, #16
10046dc8:	bd80      	pop	{r7, pc}
	...

10046dcc <_calibration_callback>:
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
}

static void _calibration_callback(void *handle)
{
10046dcc:	b580      	push	{r7, lr}
10046dce:	b082      	sub	sp, #8
10046dd0:	af00      	add	r7, sp, #0
10046dd2:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046dd4:	4b06      	ldr	r3, [pc, #24]	@ (10046df0 <_calibration_callback+0x24>)
10046dd6:	781b      	ldrb	r3, [r3, #0]
10046dd8:	2b00      	cmp	r3, #0
10046dda:	d001      	beq.n	10046de0 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
10046ddc:	f7ff ffd0 	bl	10046d80 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
10046de0:	4b03      	ldr	r3, [pc, #12]	@ (10046df0 <_calibration_callback+0x24>)
10046de2:	2201      	movs	r2, #1
10046de4:	721a      	strb	r2, [r3, #8]
}
10046de6:	46c0      	nop			@ (mov r8, r8)
10046de8:	46bd      	mov	sp, r7
10046dea:	b002      	add	sp, #8
10046dec:	bd80      	pop	{r7, pc}
10046dee:	46c0      	nop			@ (mov r8, r8)
10046df0:	20000b58 	.word	0x20000b58

10046df4 <_get_system_time_and_machine>:
  }
  return expired;
}

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10046df4:	b5b0      	push	{r4, r5, r7, lr}
10046df6:	b08a      	sub	sp, #40	@ 0x28
10046df8:	af00      	add	r7, sp, #0
10046dfa:	60f8      	str	r0, [r7, #12]
10046dfc:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046dfe:	f3ef 8310 	mrs	r3, PRIMASK
10046e02:	617b      	str	r3, [r7, #20]
  return(result);
10046e04:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
10046e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10046e08:	b672      	cpsid	i
}
10046e0a:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
10046e0c:	68fb      	ldr	r3, [r7, #12]
10046e0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10046e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10046e12:	623a      	str	r2, [r7, #32]
10046e14:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046e16:	4b29      	ldr	r3, [pc, #164]	@ (10046ebc <_get_system_time_and_machine+0xc8>)
10046e18:	0018      	movs	r0, r3
10046e1a:	f7ff fe25 	bl	10046a68 <LL_RADIO_TIMER_GetAbsoluteTime>
10046e1e:	0002      	movs	r2, r0
10046e20:	68bb      	ldr	r3, [r7, #8]
10046e22:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
10046e24:	68bb      	ldr	r3, [r7, #8]
10046e26:	681a      	ldr	r2, [r3, #0]
10046e28:	68fb      	ldr	r3, [r7, #12]
10046e2a:	2180      	movs	r1, #128	@ 0x80
10046e2c:	585b      	ldr	r3, [r3, r1]
10046e2e:	1ad3      	subs	r3, r2, r3
10046e30:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
10046e32:	68fb      	ldr	r3, [r7, #12]
10046e34:	69db      	ldr	r3, [r3, #28]
10046e36:	0019      	movs	r1, r3
10046e38:	4a21      	ldr	r2, [pc, #132]	@ (10046ec0 <_get_system_time_and_machine+0xcc>)
10046e3a:	69bb      	ldr	r3, [r7, #24]
10046e3c:	0018      	movs	r0, r3
10046e3e:	f7f9 f93f 	bl	100400c0 <blue_unit_conversion>
10046e42:	0003      	movs	r3, r0
10046e44:	603b      	str	r3, [r7, #0]
10046e46:	2300      	movs	r3, #0
10046e48:	607b      	str	r3, [r7, #4]
10046e4a:	6a3a      	ldr	r2, [r7, #32]
10046e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046e4e:	6838      	ldr	r0, [r7, #0]
10046e50:	6879      	ldr	r1, [r7, #4]
10046e52:	1812      	adds	r2, r2, r0
10046e54:	414b      	adcs	r3, r1
10046e56:	623a      	str	r2, [r7, #32]
10046e58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
10046e5a:	68fb      	ldr	r3, [r7, #12]
10046e5c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
10046e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10046e60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10046e62:	4299      	cmp	r1, r3
10046e64:	d305      	bcc.n	10046e72 <_get_system_time_and_machine+0x7e>
10046e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10046e68:	4299      	cmp	r1, r3
10046e6a:	d115      	bne.n	10046e98 <_get_system_time_and_machine+0xa4>
10046e6c:	6a39      	ldr	r1, [r7, #32]
10046e6e:	4291      	cmp	r1, r2
10046e70:	d212      	bcs.n	10046e98 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
10046e72:	68fb      	ldr	r3, [r7, #12]
10046e74:	69db      	ldr	r3, [r3, #28]
10046e76:	0019      	movs	r1, r3
10046e78:	4a11      	ldr	r2, [pc, #68]	@ (10046ec0 <_get_system_time_and_machine+0xcc>)
10046e7a:	2301      	movs	r3, #1
10046e7c:	425b      	negs	r3, r3
10046e7e:	0018      	movs	r0, r3
10046e80:	f7f9 f91e 	bl	100400c0 <blue_unit_conversion>
10046e84:	0003      	movs	r3, r0
10046e86:	001c      	movs	r4, r3
10046e88:	2300      	movs	r3, #0
10046e8a:	001d      	movs	r5, r3
10046e8c:	6a3a      	ldr	r2, [r7, #32]
10046e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046e90:	1912      	adds	r2, r2, r4
10046e92:	416b      	adcs	r3, r5
10046e94:	623a      	str	r2, [r7, #32]
10046e96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10046e98:	68f9      	ldr	r1, [r7, #12]
10046e9a:	6a3a      	ldr	r2, [r7, #32]
10046e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046e9e:	678a      	str	r2, [r1, #120]	@ 0x78
10046ea0:	67cb      	str	r3, [r1, #124]	@ 0x7c
10046ea2:	69fb      	ldr	r3, [r7, #28]
10046ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046ea6:	693b      	ldr	r3, [r7, #16]
10046ea8:	f383 8810 	msr	PRIMASK, r3
}
10046eac:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10046eae:	6a3a      	ldr	r2, [r7, #32]
10046eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10046eb2:	0010      	movs	r0, r2
10046eb4:	0019      	movs	r1, r3
10046eb6:	46bd      	mov	sp, r7
10046eb8:	b00a      	add	sp, #40	@ 0x28
10046eba:	bdb0      	pop	{r4, r5, r7, pc}
10046ebc:	60001800 	.word	0x60001800
10046ec0:	00000635 	.word	0x00000635

10046ec4 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10046ec4:	b5b0      	push	{r4, r5, r7, lr}
10046ec6:	b08a      	sub	sp, #40	@ 0x28
10046ec8:	af00      	add	r7, sp, #0
10046eca:	6078      	str	r0, [r7, #4]
10046ecc:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
10046ece:	687b      	ldr	r3, [r7, #4]
10046ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
10046ed2:	687b      	ldr	r3, [r7, #4]
10046ed4:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
10046ed6:	683b      	ldr	r3, [r7, #0]
10046ed8:	2200      	movs	r2, #0
10046eda:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10046edc:	e033      	b.n	10046f46 <_update_user_timeout+0x82>
  {
    if (curr->active)
10046ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046ee0:	7b1b      	ldrb	r3, [r3, #12]
10046ee2:	2b00      	cmp	r3, #0
10046ee4:	d02c      	beq.n	10046f40 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046ee6:	f3ef 8310 	mrs	r3, PRIMASK
10046eea:	60fb      	str	r3, [r7, #12]
  return(result);
10046eec:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
10046eee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10046ef0:	b672      	cpsid	i
}
10046ef2:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10046ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046ef6:	681c      	ldr	r4, [r3, #0]
10046ef8:	685d      	ldr	r5, [r3, #4]
10046efa:	f7ff fea5 	bl	10046c48 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046efe:	0002      	movs	r2, r0
10046f00:	000b      	movs	r3, r1
10046f02:	1aa4      	subs	r4, r4, r2
10046f04:	419d      	sbcs	r5, r3
10046f06:	0022      	movs	r2, r4
10046f08:	002b      	movs	r3, r5
10046f0a:	613a      	str	r2, [r7, #16]
10046f0c:	617b      	str	r3, [r7, #20]
      if (delay > 0)
10046f0e:	697b      	ldr	r3, [r7, #20]
10046f10:	2b00      	cmp	r3, #0
10046f12:	dc05      	bgt.n	10046f20 <_update_user_timeout+0x5c>
10046f14:	697b      	ldr	r3, [r7, #20]
10046f16:	2b00      	cmp	r3, #0
10046f18:	d108      	bne.n	10046f2c <_update_user_timeout+0x68>
10046f1a:	693b      	ldr	r3, [r7, #16]
10046f1c:	2b00      	cmp	r3, #0
10046f1e:	d005      	beq.n	10046f2c <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
10046f20:	693b      	ldr	r3, [r7, #16]
10046f22:	2101      	movs	r1, #1
10046f24:	0018      	movs	r0, r3
10046f26:	f000 f81d 	bl	10046f64 <VTIMER_SetWakeupTime>
10046f2a:	e002      	b.n	10046f32 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
10046f2c:	683b      	ldr	r3, [r7, #0]
10046f2e:	2201      	movs	r2, #1
10046f30:	701a      	strb	r2, [r3, #0]
10046f32:	69fb      	ldr	r3, [r7, #28]
10046f34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046f36:	68bb      	ldr	r3, [r7, #8]
10046f38:	f383 8810 	msr	PRIMASK, r3
}
10046f3c:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
10046f3e:	e005      	b.n	10046f4c <_update_user_timeout+0x88>
    }
    curr = curr->next;
10046f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f42:	691b      	ldr	r3, [r3, #16]
10046f44:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
10046f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f48:	2b00      	cmp	r3, #0
10046f4a:	d1c8      	bne.n	10046ede <_update_user_timeout+0x1a>
  }
  if (*expired)
10046f4c:	683b      	ldr	r3, [r7, #0]
10046f4e:	781b      	ldrb	r3, [r3, #0]
10046f50:	2b00      	cmp	r3, #0
10046f52:	d001      	beq.n	10046f58 <_update_user_timeout+0x94>
  {
    return rootOrig;
10046f54:	6a3b      	ldr	r3, [r7, #32]
10046f56:	e000      	b.n	10046f5a <_update_user_timeout+0x96>
  }

  return curr;
10046f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10046f5a:	0018      	movs	r0, r3
10046f5c:	46bd      	mov	sp, r7
10046f5e:	b00a      	add	sp, #40	@ 0x28
10046f60:	bdb0      	pop	{r4, r5, r7, pc}
	...

10046f64 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
10046f64:	b580      	push	{r7, lr}
10046f66:	b084      	sub	sp, #16
10046f68:	af00      	add	r7, sp, #0
10046f6a:	6078      	str	r0, [r7, #4]
10046f6c:	000a      	movs	r2, r1
10046f6e:	1cfb      	adds	r3, r7, #3
10046f70:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
10046f72:	4b15      	ldr	r3, [pc, #84]	@ (10046fc8 <VTIMER_SetWakeupTime+0x64>)
10046f74:	699b      	ldr	r3, [r3, #24]
10046f76:	0019      	movs	r1, r3
10046f78:	4a14      	ldr	r2, [pc, #80]	@ (10046fcc <VTIMER_SetWakeupTime+0x68>)
10046f7a:	687b      	ldr	r3, [r7, #4]
10046f7c:	0018      	movs	r0, r3
10046f7e:	f7f9 f89f 	bl	100400c0 <blue_unit_conversion>
10046f82:	0003      	movs	r3, r0
10046f84:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
10046f86:	687b      	ldr	r3, [r7, #4]
10046f88:	2b20      	cmp	r3, #32
10046f8a:	d200      	bcs.n	10046f8e <VTIMER_SetWakeupTime+0x2a>
10046f8c:	2320      	movs	r3, #32
10046f8e:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046f90:	4b0f      	ldr	r3, [pc, #60]	@ (10046fd0 <VTIMER_SetWakeupTime+0x6c>)
10046f92:	0018      	movs	r0, r3
10046f94:	f7ff fd68 	bl	10046a68 <LL_RADIO_TIMER_GetAbsoluteTime>
10046f98:	0003      	movs	r3, r0
10046f9a:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10046f9c:	687a      	ldr	r2, [r7, #4]
10046f9e:	68fb      	ldr	r3, [r7, #12]
10046fa0:	18d3      	adds	r3, r2, r3
10046fa2:	3308      	adds	r3, #8
10046fa4:	4a0a      	ldr	r2, [pc, #40]	@ (10046fd0 <VTIMER_SetWakeupTime+0x6c>)
10046fa6:	0019      	movs	r1, r3
10046fa8:	0010      	movs	r0, r2
10046faa:	f7ff fd51 	bl	10046a50 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10046fae:	4b08      	ldr	r3, [pc, #32]	@ (10046fd0 <VTIMER_SetWakeupTime+0x6c>)
10046fb0:	0018      	movs	r0, r3
10046fb2:	f7ff fd63 	bl	10046a7c <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10046fb6:	4b06      	ldr	r3, [pc, #24]	@ (10046fd0 <VTIMER_SetWakeupTime+0x6c>)
10046fb8:	0018      	movs	r0, r3
10046fba:	f7ff fd1d 	bl	100469f8 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
10046fbe:	68fb      	ldr	r3, [r7, #12]
}
10046fc0:	0018      	movs	r0, r3
10046fc2:	46bd      	mov	sp, r7
10046fc4:	b004      	add	sp, #16
10046fc6:	bd80      	pop	{r7, pc}
10046fc8:	20000b58 	.word	0x20000b58
10046fcc:	00000326 	.word	0x00000326
10046fd0:	60001800 	.word	0x60001800

10046fd4 <_virtualTimeBaseEnable>:

  return returnValue;
}

static void _virtualTimeBaseEnable(FunctionalState state)
{
10046fd4:	b580      	push	{r7, lr}
10046fd6:	b082      	sub	sp, #8
10046fd8:	af00      	add	r7, sp, #0
10046fda:	0002      	movs	r2, r0
10046fdc:	1dfb      	adds	r3, r7, #7
10046fde:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
10046fe0:	1dfb      	adds	r3, r7, #7
10046fe2:	781b      	ldrb	r3, [r3, #0]
10046fe4:	2b00      	cmp	r3, #0
10046fe6:	d010      	beq.n	1004700a <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
10046fe8:	4b0e      	ldr	r3, [pc, #56]	@ (10047024 <_virtualTimeBaseEnable+0x50>)
10046fea:	2290      	movs	r2, #144	@ 0x90
10046fec:	5c9b      	ldrb	r3, [r3, r2]
10046fee:	2201      	movs	r2, #1
10046ff0:	4053      	eors	r3, r2
10046ff2:	b2db      	uxtb	r3, r3
10046ff4:	2b00      	cmp	r3, #0
10046ff6:	d010      	beq.n	1004701a <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046ff8:	4b0b      	ldr	r3, [pc, #44]	@ (10047028 <_virtualTimeBaseEnable+0x54>)
10046ffa:	0018      	movs	r0, r3
10046ffc:	f7ff fee6 	bl	10046dcc <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
10047000:	4b08      	ldr	r3, [pc, #32]	@ (10047024 <_virtualTimeBaseEnable+0x50>)
10047002:	2290      	movs	r2, #144	@ 0x90
10047004:	2101      	movs	r1, #1
10047006:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10047008:	e007      	b.n	1004701a <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004700a:	4b07      	ldr	r3, [pc, #28]	@ (10047028 <_virtualTimeBaseEnable+0x54>)
1004700c:	0018      	movs	r0, r3
1004700e:	f7ff fe2d 	bl	10046c6c <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
10047012:	4b04      	ldr	r3, [pc, #16]	@ (10047024 <_virtualTimeBaseEnable+0x50>)
10047014:	2290      	movs	r2, #144	@ 0x90
10047016:	2100      	movs	r1, #0
10047018:	5499      	strb	r1, [r3, r2]
}
1004701a:	46c0      	nop			@ (mov r8, r8)
1004701c:	46bd      	mov	sp, r7
1004701e:	b002      	add	sp, #8
10047020:	bd80      	pop	{r7, pc}
10047022:	46c0      	nop			@ (mov r8, r8)
10047024:	20000b58 	.word	0x20000b58
10047028:	20000b98 	.word	0x20000b98

1004702c <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004702c:	b580      	push	{r7, lr}
1004702e:	b086      	sub	sp, #24
10047030:	af00      	add	r7, sp, #0
10047032:	6078      	str	r0, [r7, #4]
10047034:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10047036:	687b      	ldr	r3, [r7, #4]
10047038:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004703a:	2300      	movs	r3, #0
1004703c:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004703e:	687b      	ldr	r3, [r7, #4]
10047040:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
10047042:	e004      	b.n	1004704e <_remove_timer_in_queue+0x22>
  {
    prev = current;
10047044:	697b      	ldr	r3, [r7, #20]
10047046:	613b      	str	r3, [r7, #16]
    current = current->next;
10047048:	697b      	ldr	r3, [r7, #20]
1004704a:	691b      	ldr	r3, [r3, #16]
1004704c:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004704e:	697b      	ldr	r3, [r7, #20]
10047050:	2b00      	cmp	r3, #0
10047052:	d003      	beq.n	1004705c <_remove_timer_in_queue+0x30>
10047054:	697a      	ldr	r2, [r7, #20]
10047056:	683b      	ldr	r3, [r7, #0]
10047058:	429a      	cmp	r2, r3
1004705a:	d1f3      	bne.n	10047044 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004705c:	697b      	ldr	r3, [r7, #20]
1004705e:	2b00      	cmp	r3, #0
10047060:	d00b      	beq.n	1004707a <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
10047062:	697a      	ldr	r2, [r7, #20]
10047064:	687b      	ldr	r3, [r7, #4]
10047066:	429a      	cmp	r2, r3
10047068:	d103      	bne.n	10047072 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004706a:	697b      	ldr	r3, [r7, #20]
1004706c:	691b      	ldr	r3, [r3, #16]
1004706e:	60fb      	str	r3, [r7, #12]
10047070:	e003      	b.n	1004707a <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
10047072:	697b      	ldr	r3, [r7, #20]
10047074:	691a      	ldr	r2, [r3, #16]
10047076:	693b      	ldr	r3, [r7, #16]
10047078:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004707a:	68fb      	ldr	r3, [r7, #12]
}
1004707c:	0018      	movs	r0, r3
1004707e:	46bd      	mov	sp, r7
10047080:	b006      	add	sp, #24
10047082:	bd80      	pop	{r7, pc}

10047084 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
10047084:	b5b0      	push	{r4, r5, r7, lr}
10047086:	b08a      	sub	sp, #40	@ 0x28
10047088:	af00      	add	r7, sp, #0
1004708a:	6078      	str	r0, [r7, #4]
1004708c:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004708e:	683b      	ldr	r3, [r7, #0]
10047090:	2200      	movs	r2, #0
10047092:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
10047094:	687b      	ldr	r3, [r7, #4]
10047096:	7a9b      	ldrb	r3, [r3, #10]
10047098:	2b00      	cmp	r3, #0
1004709a:	d100      	bne.n	1004709e <_check_radio_activity+0x1a>
1004709c:	e070      	b.n	10047180 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004709e:	4b3a      	ldr	r3, [pc, #232]	@ (10047188 <_check_radio_activity+0x104>)
100470a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100470a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
100470a4:	4938      	ldr	r1, [pc, #224]	@ (10047188 <_check_radio_activity+0x104>)
100470a6:	6849      	ldr	r1, [r1, #4]
100470a8:	000c      	movs	r4, r1
100470aa:	2100      	movs	r1, #0
100470ac:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100470ae:	1912      	adds	r2, r2, r4
100470b0:	416b      	adcs	r3, r5
100470b2:	623a      	str	r2, [r7, #32]
100470b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100470b6:	f3ef 8310 	mrs	r3, PRIMASK
100470ba:	60fb      	str	r3, [r7, #12]
  return(result);
100470bc:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
100470be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100470c0:	b672      	cpsid	i
}
100470c2:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
100470c4:	f7ff fdc0 	bl	10046c48 <HAL_RADIO_TIMER_GetCurrentSysTime>
100470c8:	0002      	movs	r2, r0
100470ca:	000b      	movs	r3, r1
100470cc:	613a      	str	r2, [r7, #16]
100470ce:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100470d0:	687b      	ldr	r3, [r7, #4]
100470d2:	681a      	ldr	r2, [r3, #0]
100470d4:	685b      	ldr	r3, [r3, #4]
100470d6:	6a38      	ldr	r0, [r7, #32]
100470d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100470da:	24c8      	movs	r4, #200	@ 0xc8
100470dc:	02a4      	lsls	r4, r4, #10
100470de:	2500      	movs	r5, #0
100470e0:	1900      	adds	r0, r0, r4
100470e2:	4169      	adcs	r1, r5
100470e4:	4299      	cmp	r1, r3
100470e6:	d812      	bhi.n	1004710e <_check_radio_activity+0x8a>
100470e8:	d101      	bne.n	100470ee <_check_radio_activity+0x6a>
100470ea:	4290      	cmp	r0, r2
100470ec:	d80f      	bhi.n	1004710e <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
100470ee:	6a3a      	ldr	r2, [r7, #32]
100470f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100470f2:	20b9      	movs	r0, #185	@ 0xb9
100470f4:	0040      	lsls	r0, r0, #1
100470f6:	2100      	movs	r1, #0
100470f8:	1812      	adds	r2, r2, r0
100470fa:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100470fc:	6979      	ldr	r1, [r7, #20]
100470fe:	4299      	cmp	r1, r3
10047100:	d805      	bhi.n	1004710e <_check_radio_activity+0x8a>
10047102:	6979      	ldr	r1, [r7, #20]
10047104:	4299      	cmp	r1, r3
10047106:	d135      	bne.n	10047174 <_check_radio_activity+0xf0>
10047108:	6939      	ldr	r1, [r7, #16]
1004710a:	4291      	cmp	r1, r2
1004710c:	d932      	bls.n	10047174 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004710e:	687b      	ldr	r3, [r7, #4]
10047110:	681a      	ldr	r2, [r3, #0]
10047112:	685b      	ldr	r3, [r3, #4]
10047114:	204c      	movs	r0, #76	@ 0x4c
10047116:	4240      	negs	r0, r0
10047118:	17c1      	asrs	r1, r0, #31
1004711a:	1880      	adds	r0, r0, r2
1004711c:	4159      	adcs	r1, r3
1004711e:	693a      	ldr	r2, [r7, #16]
10047120:	697b      	ldr	r3, [r7, #20]
10047122:	240a      	movs	r4, #10
10047124:	2500      	movs	r5, #0
10047126:	1912      	adds	r2, r2, r4
10047128:	416b      	adcs	r3, r5
1004712a:	4299      	cmp	r1, r3
1004712c:	d802      	bhi.n	10047134 <_check_radio_activity+0xb0>
1004712e:	d11a      	bne.n	10047166 <_check_radio_activity+0xe2>
10047130:	4290      	cmp	r0, r2
10047132:	d918      	bls.n	10047166 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
10047134:	687b      	ldr	r3, [r7, #4]
10047136:	681a      	ldr	r2, [r3, #0]
10047138:	685b      	ldr	r3, [r3, #4]
1004713a:	0010      	movs	r0, r2
1004713c:	687b      	ldr	r3, [r7, #4]
1004713e:	7b19      	ldrb	r1, [r3, #12]
10047140:	687b      	ldr	r3, [r7, #4]
10047142:	7a1b      	ldrb	r3, [r3, #8]
10047144:	001a      	movs	r2, r3
10047146:	f000 f821 	bl	1004718c <TIMER_SetRadioTimerValue>
1004714a:	0003      	movs	r3, r0
1004714c:	001a      	movs	r2, r3
1004714e:	683b      	ldr	r3, [r7, #0]
10047150:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10047152:	687b      	ldr	r3, [r7, #4]
10047154:	2200      	movs	r2, #0
10047156:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10047158:	687b      	ldr	r3, [r7, #4]
1004715a:	2201      	movs	r2, #1
1004715c:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004715e:	687b      	ldr	r3, [r7, #4]
10047160:	2201      	movs	r2, #1
10047162:	72da      	strb	r2, [r3, #11]
10047164:	e006      	b.n	10047174 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047166:	4b08      	ldr	r3, [pc, #32]	@ (10047188 <_check_radio_activity+0x104>)
10047168:	2262      	movs	r2, #98	@ 0x62
1004716a:	2100      	movs	r1, #0
1004716c:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004716e:	683b      	ldr	r3, [r7, #0]
10047170:	2201      	movs	r2, #1
10047172:	701a      	strb	r2, [r3, #0]
10047174:	69fb      	ldr	r3, [r7, #28]
10047176:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047178:	68bb      	ldr	r3, [r7, #8]
1004717a:	f383 8810 	msr	PRIMASK, r3
}
1004717e:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10047180:	46c0      	nop			@ (mov r8, r8)
10047182:	46bd      	mov	sp, r7
10047184:	b00a      	add	sp, #40	@ 0x28
10047186:	bdb0      	pop	{r4, r5, r7, pc}
10047188:	20000b58 	.word	0x20000b58

1004718c <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004718c:	b580      	push	{r7, lr}
1004718e:	b08a      	sub	sp, #40	@ 0x28
10047190:	af00      	add	r7, sp, #0
10047192:	6078      	str	r0, [r7, #4]
10047194:	0008      	movs	r0, r1
10047196:	0011      	movs	r1, r2
10047198:	1cfb      	adds	r3, r7, #3
1004719a:	1c02      	adds	r2, r0, #0
1004719c:	701a      	strb	r2, [r3, #0]
1004719e:	1cbb      	adds	r3, r7, #2
100471a0:	1c0a      	adds	r2, r1, #0
100471a2:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
100471a4:	1cfb      	adds	r3, r7, #3
100471a6:	781b      	ldrb	r3, [r3, #0]
100471a8:	2b00      	cmp	r3, #0
100471aa:	d015      	beq.n	100471d8 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
100471ac:	1cbb      	adds	r3, r7, #2
100471ae:	781b      	ldrb	r3, [r3, #0]
100471b0:	2b00      	cmp	r3, #0
100471b2:	d008      	beq.n	100471c6 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
100471b4:	4b67      	ldr	r3, [pc, #412]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471b6:	2238      	movs	r2, #56	@ 0x38
100471b8:	5c9b      	ldrb	r3, [r3, r2]
100471ba:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100471bc:	4b65      	ldr	r3, [pc, #404]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471be:	223c      	movs	r2, #60	@ 0x3c
100471c0:	5c9b      	ldrb	r3, [r3, r2]
100471c2:	61fb      	str	r3, [r7, #28]
100471c4:	e01d      	b.n	10047202 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
100471c6:	4b63      	ldr	r3, [pc, #396]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471c8:	2239      	movs	r2, #57	@ 0x39
100471ca:	5c9b      	ldrb	r3, [r3, r2]
100471cc:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100471ce:	4b61      	ldr	r3, [pc, #388]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471d0:	223c      	movs	r2, #60	@ 0x3c
100471d2:	5c9b      	ldrb	r3, [r3, r2]
100471d4:	61fb      	str	r3, [r7, #28]
100471d6:	e014      	b.n	10047202 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
100471d8:	1cbb      	adds	r3, r7, #2
100471da:	781b      	ldrb	r3, [r3, #0]
100471dc:	2b00      	cmp	r3, #0
100471de:	d008      	beq.n	100471f2 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
100471e0:	4b5c      	ldr	r3, [pc, #368]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471e2:	223a      	movs	r2, #58	@ 0x3a
100471e4:	5c9b      	ldrb	r3, [r3, r2]
100471e6:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100471e8:	4b5a      	ldr	r3, [pc, #360]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471ea:	223c      	movs	r2, #60	@ 0x3c
100471ec:	5c9b      	ldrb	r3, [r3, r2]
100471ee:	61fb      	str	r3, [r7, #28]
100471f0:	e007      	b.n	10047202 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
100471f2:	4b58      	ldr	r3, [pc, #352]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471f4:	223b      	movs	r2, #59	@ 0x3b
100471f6:	5c9b      	ldrb	r3, [r3, r2]
100471f8:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100471fa:	4b56      	ldr	r3, [pc, #344]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100471fc:	223c      	movs	r2, #60	@ 0x3c
100471fe:	5c9b      	ldrb	r3, [r3, r2]
10047200:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10047202:	230c      	movs	r3, #12
10047204:	18fa      	adds	r2, r7, r3
10047206:	4b53      	ldr	r3, [pc, #332]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
10047208:	0011      	movs	r1, r2
1004720a:	0018      	movs	r0, r3
1004720c:	f7ff fdf2 	bl	10046df4 <_get_system_time_and_machine>
10047210:	0002      	movs	r2, r0
10047212:	000b      	movs	r3, r1
10047214:	687b      	ldr	r3, [r7, #4]
10047216:	1a9b      	subs	r3, r3, r2
10047218:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004721a:	4b4e      	ldr	r3, [pc, #312]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
1004721c:	699b      	ldr	r3, [r3, #24]
1004721e:	0019      	movs	r1, r3
10047220:	4a4d      	ldr	r2, [pc, #308]	@ (10047358 <TIMER_SetRadioTimerValue+0x1cc>)
10047222:	697b      	ldr	r3, [r7, #20]
10047224:	0018      	movs	r0, r3
10047226:	f7f8 ff4b 	bl	100400c0 <blue_unit_conversion>
1004722a:	0003      	movs	r3, r0
1004722c:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004722e:	4b49      	ldr	r3, [pc, #292]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
10047230:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10047232:	69fb      	ldr	r3, [r7, #28]
10047234:	18d3      	adds	r3, r2, r3
10047236:	33c8      	adds	r3, #200	@ 0xc8
10047238:	697a      	ldr	r2, [r7, #20]
1004723a:	429a      	cmp	r2, r3
1004723c:	d92f      	bls.n	1004729e <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004723e:	4b47      	ldr	r3, [pc, #284]	@ (1004735c <TIMER_SetRadioTimerValue+0x1d0>)
10047240:	795b      	ldrb	r3, [r3, #5]
10047242:	b2db      	uxtb	r3, r3
10047244:	001a      	movs	r2, r3
10047246:	693b      	ldr	r3, [r7, #16]
10047248:	1a9a      	subs	r2, r3, r2
1004724a:	6a3b      	ldr	r3, [r7, #32]
1004724c:	1ad3      	subs	r3, r2, r3
1004724e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047250:	68fa      	ldr	r2, [r7, #12]
10047252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047254:	18d3      	adds	r3, r2, r3
10047256:	4a42      	ldr	r2, [pc, #264]	@ (10047360 <TIMER_SetRadioTimerValue+0x1d4>)
10047258:	0019      	movs	r1, r3
1004725a:	0010      	movs	r0, r2
1004725c:	f7ff fbec 	bl	10046a38 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047260:	4b3f      	ldr	r3, [pc, #252]	@ (10047360 <TIMER_SetRadioTimerValue+0x1d4>)
10047262:	2100      	movs	r1, #0
10047264:	0018      	movs	r0, r3
10047266:	f7ff fc19 	bl	10046a9c <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004726a:	23c0      	movs	r3, #192	@ 0xc0
1004726c:	05db      	lsls	r3, r3, #23
1004726e:	0018      	movs	r0, r3
10047270:	f7ff fb79 	bl	10046966 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047274:	23c0      	movs	r3, #192	@ 0xc0
10047276:	05db      	lsls	r3, r3, #23
10047278:	0018      	movs	r0, r3
1004727a:	f7ff fb83 	bl	10046984 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004727e:	4b38      	ldr	r3, [pc, #224]	@ (10047360 <TIMER_SetRadioTimerValue+0x1d4>)
10047280:	0018      	movs	r0, r3
10047282:	f7ff fb9a 	bl	100469ba <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047286:	4b36      	ldr	r3, [pc, #216]	@ (10047360 <TIMER_SetRadioTimerValue+0x1d4>)
10047288:	0018      	movs	r0, r3
1004728a:	f7ff fbf7 	bl	10046a7c <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004728e:	4b33      	ldr	r3, [pc, #204]	@ (1004735c <TIMER_SetRadioTimerValue+0x1d0>)
10047290:	795b      	ldrb	r3, [r3, #5]
10047292:	b2db      	uxtb	r3, r3
10047294:	001a      	movs	r2, r3
10047296:	6a3b      	ldr	r3, [r7, #32]
10047298:	189b      	adds	r3, r3, r2
1004729a:	623b      	str	r3, [r7, #32]
1004729c:	e021      	b.n	100472e2 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004729e:	4b2d      	ldr	r3, [pc, #180]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100472a0:	223d      	movs	r2, #61	@ 0x3d
100472a2:	5c9b      	ldrb	r3, [r3, r2]
100472a4:	001a      	movs	r2, r3
100472a6:	693b      	ldr	r3, [r7, #16]
100472a8:	1a9a      	subs	r2, r3, r2
100472aa:	6a3b      	ldr	r3, [r7, #32]
100472ac:	1ad3      	subs	r3, r2, r3
100472ae:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
100472b0:	68fa      	ldr	r2, [r7, #12]
100472b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100472b4:	18d2      	adds	r2, r2, r3
100472b6:	23c0      	movs	r3, #192	@ 0xc0
100472b8:	05db      	lsls	r3, r3, #23
100472ba:	0011      	movs	r1, r2
100472bc:	0018      	movs	r0, r3
100472be:	f7ff fb70 	bl	100469a2 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
100472c2:	4b27      	ldr	r3, [pc, #156]	@ (10047360 <TIMER_SetRadioTimerValue+0x1d4>)
100472c4:	0018      	movs	r0, r3
100472c6:	f7ff fb87 	bl	100469d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
100472ca:	23c0      	movs	r3, #192	@ 0xc0
100472cc:	05db      	lsls	r3, r3, #23
100472ce:	0018      	movs	r0, r3
100472d0:	f7ff fb39 	bl	10046946 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
100472d4:	4b1f      	ldr	r3, [pc, #124]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100472d6:	223d      	movs	r2, #61	@ 0x3d
100472d8:	5c9b      	ldrb	r3, [r3, r2]
100472da:	001a      	movs	r2, r3
100472dc:	6a3b      	ldr	r3, [r7, #32]
100472de:	189b      	adds	r3, r3, r2
100472e0:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
100472e2:	68fa      	ldr	r2, [r7, #12]
100472e4:	693b      	ldr	r3, [r7, #16]
100472e6:	18d2      	adds	r2, r2, r3
100472e8:	4b1a      	ldr	r3, [pc, #104]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
100472ea:	2188      	movs	r1, #136	@ 0x88
100472ec:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
100472ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100472f0:	6a3b      	ldr	r3, [r7, #32]
100472f2:	18d2      	adds	r2, r2, r3
100472f4:	6a3b      	ldr	r3, [r7, #32]
100472f6:	3305      	adds	r3, #5
100472f8:	429a      	cmp	r2, r3
100472fa:	d212      	bcs.n	10047322 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
100472fc:	23c0      	movs	r3, #192	@ 0xc0
100472fe:	05db      	lsls	r3, r3, #23
10047300:	0018      	movs	r0, r3
10047302:	f7ff fb30 	bl	10046966 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047306:	23c0      	movs	r3, #192	@ 0xc0
10047308:	05db      	lsls	r3, r3, #23
1004730a:	0018      	movs	r0, r3
1004730c:	f7ff fb3a 	bl	10046984 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047310:	4b13      	ldr	r3, [pc, #76]	@ (10047360 <TIMER_SetRadioTimerValue+0x1d4>)
10047312:	0018      	movs	r0, r3
10047314:	f7ff fb60 	bl	100469d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10047318:	231b      	movs	r3, #27
1004731a:	18fb      	adds	r3, r7, r3
1004731c:	2201      	movs	r2, #1
1004731e:	701a      	strb	r2, [r3, #0]
10047320:	e010      	b.n	10047344 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047322:	4b0c      	ldr	r3, [pc, #48]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
10047324:	69db      	ldr	r3, [r3, #28]
10047326:	0019      	movs	r1, r3
10047328:	4a0e      	ldr	r2, [pc, #56]	@ (10047364 <TIMER_SetRadioTimerValue+0x1d8>)
1004732a:	6a3b      	ldr	r3, [r7, #32]
1004732c:	0018      	movs	r0, r3
1004732e:	f7f8 fec7 	bl	100400c0 <blue_unit_conversion>
10047332:	0003      	movs	r3, r0
10047334:	b2d9      	uxtb	r1, r3
10047336:	4b07      	ldr	r3, [pc, #28]	@ (10047354 <TIMER_SetRadioTimerValue+0x1c8>)
10047338:	2284      	movs	r2, #132	@ 0x84
1004733a:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004733c:	231b      	movs	r3, #27
1004733e:	18fb      	adds	r3, r7, r3
10047340:	2200      	movs	r2, #0
10047342:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10047344:	231b      	movs	r3, #27
10047346:	18fb      	adds	r3, r7, r3
10047348:	781b      	ldrb	r3, [r3, #0]
}
1004734a:	0018      	movs	r0, r3
1004734c:	46bd      	mov	sp, r7
1004734e:	b00a      	add	sp, #40	@ 0x28
10047350:	bd80      	pop	{r7, pc}
10047352:	46c0      	nop			@ (mov r8, r8)
10047354:	20000b58 	.word	0x20000b58
10047358:	00000326 	.word	0x00000326
1004735c:	200000c0 	.word	0x200000c0
10047360:	60001800 	.word	0x60001800
10047364:	00000635 	.word	0x00000635

10047368 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047368:	b5b0      	push	{r4, r5, r7, lr}
1004736a:	b084      	sub	sp, #16
1004736c:	af00      	add	r7, sp, #0
1004736e:	6078      	str	r0, [r7, #4]
10047370:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047372:	2308      	movs	r3, #8
10047374:	18fa      	adds	r2, r7, r3
10047376:	4b12      	ldr	r3, [pc, #72]	@ (100473c0 <TIMER_GetPastSysTime+0x58>)
10047378:	0011      	movs	r1, r2
1004737a:	0018      	movs	r0, r3
1004737c:	f7ff fd3a 	bl	10046df4 <_get_system_time_and_machine>
10047380:	0002      	movs	r2, r0
10047382:	000b      	movs	r3, r1
10047384:	6839      	ldr	r1, [r7, #0]
10047386:	600a      	str	r2, [r1, #0]
10047388:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004738a:	68ba      	ldr	r2, [r7, #8]
1004738c:	687b      	ldr	r3, [r7, #4]
1004738e:	1ad0      	subs	r0, r2, r3
10047390:	4b0b      	ldr	r3, [pc, #44]	@ (100473c0 <TIMER_GetPastSysTime+0x58>)
10047392:	69db      	ldr	r3, [r3, #28]
10047394:	0019      	movs	r1, r3
10047396:	4b0b      	ldr	r3, [pc, #44]	@ (100473c4 <TIMER_GetPastSysTime+0x5c>)
10047398:	001a      	movs	r2, r3
1004739a:	f7f8 fe91 	bl	100400c0 <blue_unit_conversion>
1004739e:	0003      	movs	r3, r0
100473a0:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
100473a2:	683b      	ldr	r3, [r7, #0]
100473a4:	681a      	ldr	r2, [r3, #0]
100473a6:	685b      	ldr	r3, [r3, #4]
100473a8:	68f9      	ldr	r1, [r7, #12]
100473aa:	000c      	movs	r4, r1
100473ac:	2100      	movs	r1, #0
100473ae:	000d      	movs	r5, r1
100473b0:	1b12      	subs	r2, r2, r4
100473b2:	41ab      	sbcs	r3, r5
}
100473b4:	0010      	movs	r0, r2
100473b6:	0019      	movs	r1, r3
100473b8:	46bd      	mov	sp, r7
100473ba:	b004      	add	sp, #16
100473bc:	bdb0      	pop	{r4, r5, r7, pc}
100473be:	46c0      	nop			@ (mov r8, r8)
100473c0:	20000b58 	.word	0x20000b58
100473c4:	00000635 	.word	0x00000635

100473c8 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
    return 0;
  }
}

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
100473c8:	b580      	push	{r7, lr}
100473ca:	af00      	add	r7, sp, #0
}
100473cc:	46c0      	nop			@ (mov r8, r8)
100473ce:	46bd      	mov	sp, r7
100473d0:	bd80      	pop	{r7, pc}

100473d2 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
100473d2:	b580      	push	{r7, lr}
100473d4:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
100473d6:	f7ff fca1 	bl	10046d1c <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
100473da:	f7ff fff5 	bl	100473c8 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
100473de:	46c0      	nop			@ (mov r8, r8)
100473e0:	46bd      	mov	sp, r7
100473e2:	bd80      	pop	{r7, pc}

100473e4 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
100473e4:	b580      	push	{r7, lr}
100473e6:	b082      	sub	sp, #8
100473e8:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
100473ea:	2300      	movs	r3, #0
100473ec:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
100473ee:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
100473f0:	23c0      	movs	r3, #192	@ 0xc0
100473f2:	05db      	lsls	r3, r3, #23
100473f4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
100473f6:	23c0      	movs	r3, #192	@ 0xc0
100473f8:	05db      	lsls	r3, r3, #23
100473fa:	2101      	movs	r1, #1
100473fc:	430a      	orrs	r2, r1
100473fe:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10047400:	23c0      	movs	r3, #192	@ 0xc0
10047402:	05db      	lsls	r3, r3, #23
10047404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047406:	607b      	str	r3, [r7, #4]
}
10047408:	46c0      	nop			@ (mov r8, r8)
1004740a:	46bd      	mov	sp, r7
1004740c:	b002      	add	sp, #8
1004740e:	bd80      	pop	{r7, pc}

10047410 <LL_PWR_SetNoPullB>:
{
10047410:	b580      	push	{r7, lr}
10047412:	b082      	sub	sp, #8
10047414:	af00      	add	r7, sp, #0
10047416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10047418:	4b08      	ldr	r3, [pc, #32]	@ (1004743c <LL_PWR_SetNoPullB+0x2c>)
1004741a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004741c:	687b      	ldr	r3, [r7, #4]
1004741e:	43d9      	mvns	r1, r3
10047420:	4b06      	ldr	r3, [pc, #24]	@ (1004743c <LL_PWR_SetNoPullB+0x2c>)
10047422:	400a      	ands	r2, r1
10047424:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10047426:	4b05      	ldr	r3, [pc, #20]	@ (1004743c <LL_PWR_SetNoPullB+0x2c>)
10047428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004742a:	687b      	ldr	r3, [r7, #4]
1004742c:	43d9      	mvns	r1, r3
1004742e:	4b03      	ldr	r3, [pc, #12]	@ (1004743c <LL_PWR_SetNoPullB+0x2c>)
10047430:	400a      	ands	r2, r1
10047432:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10047434:	46c0      	nop			@ (mov r8, r8)
10047436:	46bd      	mov	sp, r7
10047438:	b002      	add	sp, #8
1004743a:	bd80      	pop	{r7, pc}
1004743c:	48500000 	.word	0x48500000

10047440 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10047440:	b580      	push	{r7, lr}
10047442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10047444:	4b04      	ldr	r3, [pc, #16]	@ (10047458 <LL_RCC_HSE_Enable+0x18>)
10047446:	681a      	ldr	r2, [r3, #0]
10047448:	4b03      	ldr	r3, [pc, #12]	@ (10047458 <LL_RCC_HSE_Enable+0x18>)
1004744a:	2180      	movs	r1, #128	@ 0x80
1004744c:	0249      	lsls	r1, r1, #9
1004744e:	430a      	orrs	r2, r1
10047450:	601a      	str	r2, [r3, #0]
}
10047452:	46c0      	nop			@ (mov r8, r8)
10047454:	46bd      	mov	sp, r7
10047456:	bd80      	pop	{r7, pc}
10047458:	48400000 	.word	0x48400000

1004745c <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004745c:	b580      	push	{r7, lr}
1004745e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10047460:	4b04      	ldr	r3, [pc, #16]	@ (10047474 <LL_RCC_HSE_Disable+0x18>)
10047462:	681a      	ldr	r2, [r3, #0]
10047464:	4b03      	ldr	r3, [pc, #12]	@ (10047474 <LL_RCC_HSE_Disable+0x18>)
10047466:	4904      	ldr	r1, [pc, #16]	@ (10047478 <LL_RCC_HSE_Disable+0x1c>)
10047468:	400a      	ands	r2, r1
1004746a:	601a      	str	r2, [r3, #0]
}
1004746c:	46c0      	nop			@ (mov r8, r8)
1004746e:	46bd      	mov	sp, r7
10047470:	bd80      	pop	{r7, pc}
10047472:	46c0      	nop			@ (mov r8, r8)
10047474:	48400000 	.word	0x48400000
10047478:	fffeffff 	.word	0xfffeffff

1004747c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004747c:	b580      	push	{r7, lr}
1004747e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10047480:	4b07      	ldr	r3, [pc, #28]	@ (100474a0 <LL_RCC_HSE_IsReady+0x24>)
10047482:	681a      	ldr	r2, [r3, #0]
10047484:	2380      	movs	r3, #128	@ 0x80
10047486:	029b      	lsls	r3, r3, #10
10047488:	401a      	ands	r2, r3
1004748a:	2380      	movs	r3, #128	@ 0x80
1004748c:	029b      	lsls	r3, r3, #10
1004748e:	429a      	cmp	r2, r3
10047490:	d101      	bne.n	10047496 <LL_RCC_HSE_IsReady+0x1a>
10047492:	2301      	movs	r3, #1
10047494:	e000      	b.n	10047498 <LL_RCC_HSE_IsReady+0x1c>
10047496:	2300      	movs	r3, #0
}
10047498:	0018      	movs	r0, r3
1004749a:	46bd      	mov	sp, r7
1004749c:	bd80      	pop	{r7, pc}
1004749e:	46c0      	nop			@ (mov r8, r8)
100474a0:	48400000 	.word	0x48400000

100474a4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
100474a4:	b580      	push	{r7, lr}
100474a6:	b082      	sub	sp, #8
100474a8:	af00      	add	r7, sp, #0
100474aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
100474ac:	4a0b      	ldr	r2, [pc, #44]	@ (100474dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100474ae:	2398      	movs	r3, #152	@ 0x98
100474b0:	58d3      	ldr	r3, [r2, r3]
100474b2:	4a0b      	ldr	r2, [pc, #44]	@ (100474e0 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
100474b4:	401a      	ands	r2, r3
100474b6:	687b      	ldr	r3, [r7, #4]
100474b8:	021b      	lsls	r3, r3, #8
100474ba:	4908      	ldr	r1, [pc, #32]	@ (100474dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100474bc:	4313      	orrs	r3, r2
100474be:	2298      	movs	r2, #152	@ 0x98
100474c0:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
100474c2:	4a06      	ldr	r2, [pc, #24]	@ (100474dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100474c4:	2398      	movs	r3, #152	@ 0x98
100474c6:	58d3      	ldr	r3, [r2, r3]
100474c8:	4904      	ldr	r1, [pc, #16]	@ (100474dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100474ca:	2280      	movs	r2, #128	@ 0x80
100474cc:	4313      	orrs	r3, r2
100474ce:	2298      	movs	r2, #152	@ 0x98
100474d0:	508b      	str	r3, [r1, r2]
}
100474d2:	46c0      	nop			@ (mov r8, r8)
100474d4:	46bd      	mov	sp, r7
100474d6:	b002      	add	sp, #8
100474d8:	bd80      	pop	{r7, pc}
100474da:	46c0      	nop			@ (mov r8, r8)
100474dc:	48400000 	.word	0x48400000
100474e0:	ffffc0ff 	.word	0xffffc0ff

100474e4 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
100474e4:	b580      	push	{r7, lr}
100474e6:	b082      	sub	sp, #8
100474e8:	af00      	add	r7, sp, #0
100474ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
100474ec:	4a07      	ldr	r2, [pc, #28]	@ (1004750c <LL_RCC_HSE_SetCurrentControl+0x28>)
100474ee:	2398      	movs	r3, #152	@ 0x98
100474f0:	58d3      	ldr	r3, [r2, r3]
100474f2:	2270      	movs	r2, #112	@ 0x70
100474f4:	4393      	bics	r3, r2
100474f6:	001a      	movs	r2, r3
100474f8:	4904      	ldr	r1, [pc, #16]	@ (1004750c <LL_RCC_HSE_SetCurrentControl+0x28>)
100474fa:	687b      	ldr	r3, [r7, #4]
100474fc:	4313      	orrs	r3, r2
100474fe:	2298      	movs	r2, #152	@ 0x98
10047500:	508b      	str	r3, [r1, r2]
}
10047502:	46c0      	nop			@ (mov r8, r8)
10047504:	46bd      	mov	sp, r7
10047506:	b002      	add	sp, #8
10047508:	bd80      	pop	{r7, pc}
1004750a:	46c0      	nop			@ (mov r8, r8)
1004750c:	48400000 	.word	0x48400000

10047510 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10047510:	b580      	push	{r7, lr}
10047512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047514:	4b07      	ldr	r3, [pc, #28]	@ (10047534 <LL_RCC_HSI_Enable+0x24>)
10047516:	689a      	ldr	r2, [r3, #8]
10047518:	4b06      	ldr	r3, [pc, #24]	@ (10047534 <LL_RCC_HSI_Enable+0x24>)
1004751a:	2104      	movs	r1, #4
1004751c:	438a      	bics	r2, r1
1004751e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047520:	4b04      	ldr	r3, [pc, #16]	@ (10047534 <LL_RCC_HSI_Enable+0x24>)
10047522:	689a      	ldr	r2, [r3, #8]
10047524:	4b03      	ldr	r3, [pc, #12]	@ (10047534 <LL_RCC_HSI_Enable+0x24>)
10047526:	2102      	movs	r1, #2
10047528:	438a      	bics	r2, r1
1004752a:	609a      	str	r2, [r3, #8]
}
1004752c:	46c0      	nop			@ (mov r8, r8)
1004752e:	46bd      	mov	sp, r7
10047530:	bd80      	pop	{r7, pc}
10047532:	46c0      	nop			@ (mov r8, r8)
10047534:	48400000 	.word	0x48400000

10047538 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
10047538:	b580      	push	{r7, lr}
1004753a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004753c:	4b07      	ldr	r3, [pc, #28]	@ (1004755c <LL_RCC_HSI_Disable+0x24>)
1004753e:	689a      	ldr	r2, [r3, #8]
10047540:	4b06      	ldr	r3, [pc, #24]	@ (1004755c <LL_RCC_HSI_Disable+0x24>)
10047542:	2102      	movs	r1, #2
10047544:	430a      	orrs	r2, r1
10047546:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047548:	4b04      	ldr	r3, [pc, #16]	@ (1004755c <LL_RCC_HSI_Disable+0x24>)
1004754a:	689a      	ldr	r2, [r3, #8]
1004754c:	4b03      	ldr	r3, [pc, #12]	@ (1004755c <LL_RCC_HSI_Disable+0x24>)
1004754e:	2104      	movs	r1, #4
10047550:	430a      	orrs	r2, r1
10047552:	609a      	str	r2, [r3, #8]
}
10047554:	46c0      	nop			@ (mov r8, r8)
10047556:	46bd      	mov	sp, r7
10047558:	bd80      	pop	{r7, pc}
1004755a:	46c0      	nop			@ (mov r8, r8)
1004755c:	48400000 	.word	0x48400000

10047560 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10047560:	b580      	push	{r7, lr}
10047562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10047564:	4b07      	ldr	r3, [pc, #28]	@ (10047584 <LL_RCC_HSI_IsReady+0x24>)
10047566:	681a      	ldr	r2, [r3, #0]
10047568:	2380      	movs	r3, #128	@ 0x80
1004756a:	00db      	lsls	r3, r3, #3
1004756c:	401a      	ands	r2, r3
1004756e:	2380      	movs	r3, #128	@ 0x80
10047570:	00db      	lsls	r3, r3, #3
10047572:	429a      	cmp	r2, r3
10047574:	d101      	bne.n	1004757a <LL_RCC_HSI_IsReady+0x1a>
10047576:	2301      	movs	r3, #1
10047578:	e000      	b.n	1004757c <LL_RCC_HSI_IsReady+0x1c>
1004757a:	2300      	movs	r3, #0
}
1004757c:	0018      	movs	r0, r3
1004757e:	46bd      	mov	sp, r7
10047580:	bd80      	pop	{r7, pc}
10047582:	46c0      	nop			@ (mov r8, r8)
10047584:	48400000 	.word	0x48400000

10047588 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10047588:	b580      	push	{r7, lr}
1004758a:	b082      	sub	sp, #8
1004758c:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004758e:	46c0      	nop			@ (mov r8, r8)
10047590:	4b0f      	ldr	r3, [pc, #60]	@ (100475d0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047592:	681a      	ldr	r2, [r3, #0]
10047594:	2380      	movs	r3, #128	@ 0x80
10047596:	029b      	lsls	r3, r3, #10
10047598:	4013      	ands	r3, r2
1004759a:	d0f9      	beq.n	10047590 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004759c:	4b0c      	ldr	r3, [pc, #48]	@ (100475d0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004759e:	689a      	ldr	r2, [r3, #8]
100475a0:	4b0b      	ldr	r3, [pc, #44]	@ (100475d0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100475a2:	2102      	movs	r1, #2
100475a4:	430a      	orrs	r2, r1
100475a6:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
100475a8:	2300      	movs	r3, #0
100475aa:	607b      	str	r3, [r7, #4]
100475ac:	e003      	b.n	100475b6 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
100475ae:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100475b0:	687b      	ldr	r3, [r7, #4]
100475b2:	3301      	adds	r3, #1
100475b4:	607b      	str	r3, [r7, #4]
100475b6:	687b      	ldr	r3, [r7, #4]
100475b8:	2b05      	cmp	r3, #5
100475ba:	ddf8      	ble.n	100475ae <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100475bc:	4b04      	ldr	r3, [pc, #16]	@ (100475d0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100475be:	689a      	ldr	r2, [r3, #8]
100475c0:	4b03      	ldr	r3, [pc, #12]	@ (100475d0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100475c2:	2104      	movs	r1, #4
100475c4:	430a      	orrs	r2, r1
100475c6:	609a      	str	r2, [r3, #8]
}
100475c8:	46c0      	nop			@ (mov r8, r8)
100475ca:	46bd      	mov	sp, r7
100475cc:	b002      	add	sp, #8
100475ce:	bd80      	pop	{r7, pc}
100475d0:	48400000 	.word	0x48400000

100475d4 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
100475d4:	b580      	push	{r7, lr}
100475d6:	b082      	sub	sp, #8
100475d8:	af00      	add	r7, sp, #0
100475da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100475dc:	4b06      	ldr	r3, [pc, #24]	@ (100475f8 <LL_RCC_LSCO_SetSource+0x24>)
100475de:	689b      	ldr	r3, [r3, #8]
100475e0:	4a06      	ldr	r2, [pc, #24]	@ (100475fc <LL_RCC_LSCO_SetSource+0x28>)
100475e2:	4013      	ands	r3, r2
100475e4:	0019      	movs	r1, r3
100475e6:	4b04      	ldr	r3, [pc, #16]	@ (100475f8 <LL_RCC_LSCO_SetSource+0x24>)
100475e8:	687a      	ldr	r2, [r7, #4]
100475ea:	430a      	orrs	r2, r1
100475ec:	609a      	str	r2, [r3, #8]
}
100475ee:	46c0      	nop			@ (mov r8, r8)
100475f0:	46bd      	mov	sp, r7
100475f2:	b002      	add	sp, #8
100475f4:	bd80      	pop	{r7, pc}
100475f6:	46c0      	nop			@ (mov r8, r8)
100475f8:	48400000 	.word	0x48400000
100475fc:	fffe7fff 	.word	0xfffe7fff

10047600 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10047600:	b580      	push	{r7, lr}
10047602:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10047604:	4b04      	ldr	r3, [pc, #16]	@ (10047618 <LL_RCC_LSE_Enable+0x18>)
10047606:	681a      	ldr	r2, [r3, #0]
10047608:	4b03      	ldr	r3, [pc, #12]	@ (10047618 <LL_RCC_LSE_Enable+0x18>)
1004760a:	2110      	movs	r1, #16
1004760c:	430a      	orrs	r2, r1
1004760e:	601a      	str	r2, [r3, #0]
}
10047610:	46c0      	nop			@ (mov r8, r8)
10047612:	46bd      	mov	sp, r7
10047614:	bd80      	pop	{r7, pc}
10047616:	46c0      	nop			@ (mov r8, r8)
10047618:	48400000 	.word	0x48400000

1004761c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
1004761c:	b580      	push	{r7, lr}
1004761e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10047620:	4b04      	ldr	r3, [pc, #16]	@ (10047634 <LL_RCC_LSE_Disable+0x18>)
10047622:	681a      	ldr	r2, [r3, #0]
10047624:	4b03      	ldr	r3, [pc, #12]	@ (10047634 <LL_RCC_LSE_Disable+0x18>)
10047626:	2110      	movs	r1, #16
10047628:	438a      	bics	r2, r1
1004762a:	601a      	str	r2, [r3, #0]
}
1004762c:	46c0      	nop			@ (mov r8, r8)
1004762e:	46bd      	mov	sp, r7
10047630:	bd80      	pop	{r7, pc}
10047632:	46c0      	nop			@ (mov r8, r8)
10047634:	48400000 	.word	0x48400000

10047638 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10047638:	b580      	push	{r7, lr}
1004763a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004763c:	4b05      	ldr	r3, [pc, #20]	@ (10047654 <LL_RCC_LSE_IsReady+0x1c>)
1004763e:	681b      	ldr	r3, [r3, #0]
10047640:	2220      	movs	r2, #32
10047642:	4013      	ands	r3, r2
10047644:	2b20      	cmp	r3, #32
10047646:	d101      	bne.n	1004764c <LL_RCC_LSE_IsReady+0x14>
10047648:	2301      	movs	r3, #1
1004764a:	e000      	b.n	1004764e <LL_RCC_LSE_IsReady+0x16>
1004764c:	2300      	movs	r3, #0
}
1004764e:	0018      	movs	r0, r3
10047650:	46bd      	mov	sp, r7
10047652:	bd80      	pop	{r7, pc}
10047654:	48400000 	.word	0x48400000

10047658 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10047658:	b580      	push	{r7, lr}
1004765a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004765c:	4b04      	ldr	r3, [pc, #16]	@ (10047670 <LL_RCC_LSE_EnableBypass+0x18>)
1004765e:	681a      	ldr	r2, [r3, #0]
10047660:	4b03      	ldr	r3, [pc, #12]	@ (10047670 <LL_RCC_LSE_EnableBypass+0x18>)
10047662:	2140      	movs	r1, #64	@ 0x40
10047664:	430a      	orrs	r2, r1
10047666:	601a      	str	r2, [r3, #0]
}
10047668:	46c0      	nop			@ (mov r8, r8)
1004766a:	46bd      	mov	sp, r7
1004766c:	bd80      	pop	{r7, pc}
1004766e:	46c0      	nop			@ (mov r8, r8)
10047670:	48400000 	.word	0x48400000

10047674 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10047674:	b580      	push	{r7, lr}
10047676:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10047678:	4b04      	ldr	r3, [pc, #16]	@ (1004768c <LL_RCC_LSE_DisableBypass+0x18>)
1004767a:	681a      	ldr	r2, [r3, #0]
1004767c:	4b03      	ldr	r3, [pc, #12]	@ (1004768c <LL_RCC_LSE_DisableBypass+0x18>)
1004767e:	2140      	movs	r1, #64	@ 0x40
10047680:	438a      	bics	r2, r1
10047682:	601a      	str	r2, [r3, #0]
}
10047684:	46c0      	nop			@ (mov r8, r8)
10047686:	46bd      	mov	sp, r7
10047688:	bd80      	pop	{r7, pc}
1004768a:	46c0      	nop			@ (mov r8, r8)
1004768c:	48400000 	.word	0x48400000

10047690 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10047690:	b580      	push	{r7, lr}
10047692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10047694:	4b05      	ldr	r3, [pc, #20]	@ (100476ac <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10047696:	681b      	ldr	r3, [r3, #0]
10047698:	2240      	movs	r2, #64	@ 0x40
1004769a:	4013      	ands	r3, r2
1004769c:	2b40      	cmp	r3, #64	@ 0x40
1004769e:	d101      	bne.n	100476a4 <LL_RCC_LSE_IsBypassEnabled+0x14>
100476a0:	2301      	movs	r3, #1
100476a2:	e000      	b.n	100476a6 <LL_RCC_LSE_IsBypassEnabled+0x16>
100476a4:	2300      	movs	r3, #0
}
100476a6:	0018      	movs	r0, r3
100476a8:	46bd      	mov	sp, r7
100476aa:	bd80      	pop	{r7, pc}
100476ac:	48400000 	.word	0x48400000

100476b0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
100476b0:	b580      	push	{r7, lr}
100476b2:	b082      	sub	sp, #8
100476b4:	af00      	add	r7, sp, #0
100476b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
100476b8:	4b06      	ldr	r3, [pc, #24]	@ (100476d4 <LL_RCC_LSE_SetDriveCapability+0x24>)
100476ba:	68db      	ldr	r3, [r3, #12]
100476bc:	2260      	movs	r2, #96	@ 0x60
100476be:	4393      	bics	r3, r2
100476c0:	0019      	movs	r1, r3
100476c2:	4b04      	ldr	r3, [pc, #16]	@ (100476d4 <LL_RCC_LSE_SetDriveCapability+0x24>)
100476c4:	687a      	ldr	r2, [r7, #4]
100476c6:	430a      	orrs	r2, r1
100476c8:	60da      	str	r2, [r3, #12]
}
100476ca:	46c0      	nop			@ (mov r8, r8)
100476cc:	46bd      	mov	sp, r7
100476ce:	b002      	add	sp, #8
100476d0:	bd80      	pop	{r7, pc}
100476d2:	46c0      	nop			@ (mov r8, r8)
100476d4:	48400000 	.word	0x48400000

100476d8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
100476d8:	b580      	push	{r7, lr}
100476da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
100476dc:	4b04      	ldr	r3, [pc, #16]	@ (100476f0 <LL_RCC_LSI_Enable+0x18>)
100476de:	681a      	ldr	r2, [r3, #0]
100476e0:	4b03      	ldr	r3, [pc, #12]	@ (100476f0 <LL_RCC_LSI_Enable+0x18>)
100476e2:	2104      	movs	r1, #4
100476e4:	430a      	orrs	r2, r1
100476e6:	601a      	str	r2, [r3, #0]
}
100476e8:	46c0      	nop			@ (mov r8, r8)
100476ea:	46bd      	mov	sp, r7
100476ec:	bd80      	pop	{r7, pc}
100476ee:	46c0      	nop			@ (mov r8, r8)
100476f0:	48400000 	.word	0x48400000

100476f4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
100476f4:	b580      	push	{r7, lr}
100476f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
100476f8:	4b04      	ldr	r3, [pc, #16]	@ (1004770c <LL_RCC_LSI_Disable+0x18>)
100476fa:	681a      	ldr	r2, [r3, #0]
100476fc:	4b03      	ldr	r3, [pc, #12]	@ (1004770c <LL_RCC_LSI_Disable+0x18>)
100476fe:	2104      	movs	r1, #4
10047700:	438a      	bics	r2, r1
10047702:	601a      	str	r2, [r3, #0]
}
10047704:	46c0      	nop			@ (mov r8, r8)
10047706:	46bd      	mov	sp, r7
10047708:	bd80      	pop	{r7, pc}
1004770a:	46c0      	nop			@ (mov r8, r8)
1004770c:	48400000 	.word	0x48400000

10047710 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10047710:	b580      	push	{r7, lr}
10047712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10047714:	4b05      	ldr	r3, [pc, #20]	@ (1004772c <LL_RCC_LSI_IsReady+0x1c>)
10047716:	681b      	ldr	r3, [r3, #0]
10047718:	2208      	movs	r2, #8
1004771a:	4013      	ands	r3, r2
1004771c:	2b08      	cmp	r3, #8
1004771e:	d101      	bne.n	10047724 <LL_RCC_LSI_IsReady+0x14>
10047720:	2301      	movs	r3, #1
10047722:	e000      	b.n	10047726 <LL_RCC_LSI_IsReady+0x16>
10047724:	2300      	movs	r3, #0
}
10047726:	0018      	movs	r0, r3
10047728:	46bd      	mov	sp, r7
1004772a:	bd80      	pop	{r7, pc}
1004772c:	48400000 	.word	0x48400000

10047730 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10047730:	b580      	push	{r7, lr}
10047732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10047734:	4b04      	ldr	r3, [pc, #16]	@ (10047748 <LL_RCC_RC64MPLL_Enable+0x18>)
10047736:	681a      	ldr	r2, [r3, #0]
10047738:	4b03      	ldr	r3, [pc, #12]	@ (10047748 <LL_RCC_RC64MPLL_Enable+0x18>)
1004773a:	2180      	movs	r1, #128	@ 0x80
1004773c:	0189      	lsls	r1, r1, #6
1004773e:	430a      	orrs	r2, r1
10047740:	601a      	str	r2, [r3, #0]
}
10047742:	46c0      	nop			@ (mov r8, r8)
10047744:	46bd      	mov	sp, r7
10047746:	bd80      	pop	{r7, pc}
10047748:	48400000 	.word	0x48400000

1004774c <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004774c:	b580      	push	{r7, lr}
1004774e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10047750:	4b04      	ldr	r3, [pc, #16]	@ (10047764 <LL_RCC_RC64MPLL_Disable+0x18>)
10047752:	681a      	ldr	r2, [r3, #0]
10047754:	4b03      	ldr	r3, [pc, #12]	@ (10047764 <LL_RCC_RC64MPLL_Disable+0x18>)
10047756:	4904      	ldr	r1, [pc, #16]	@ (10047768 <LL_RCC_RC64MPLL_Disable+0x1c>)
10047758:	400a      	ands	r2, r1
1004775a:	601a      	str	r2, [r3, #0]
}
1004775c:	46c0      	nop			@ (mov r8, r8)
1004775e:	46bd      	mov	sp, r7
10047760:	bd80      	pop	{r7, pc}
10047762:	46c0      	nop			@ (mov r8, r8)
10047764:	48400000 	.word	0x48400000
10047768:	ffffdfff 	.word	0xffffdfff

1004776c <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004776c:	b580      	push	{r7, lr}
1004776e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10047770:	4b07      	ldr	r3, [pc, #28]	@ (10047790 <LL_RCC_RC64MPLL_IsReady+0x24>)
10047772:	681a      	ldr	r2, [r3, #0]
10047774:	2380      	movs	r3, #128	@ 0x80
10047776:	01db      	lsls	r3, r3, #7
10047778:	401a      	ands	r2, r3
1004777a:	2380      	movs	r3, #128	@ 0x80
1004777c:	01db      	lsls	r3, r3, #7
1004777e:	429a      	cmp	r2, r3
10047780:	d101      	bne.n	10047786 <LL_RCC_RC64MPLL_IsReady+0x1a>
10047782:	2301      	movs	r3, #1
10047784:	e000      	b.n	10047788 <LL_RCC_RC64MPLL_IsReady+0x1c>
10047786:	2300      	movs	r3, #0
}
10047788:	0018      	movs	r0, r3
1004778a:	46bd      	mov	sp, r7
1004778c:	bd80      	pop	{r7, pc}
1004778e:	46c0      	nop			@ (mov r8, r8)
10047790:	48400000 	.word	0x48400000

10047794 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10047794:	b580      	push	{r7, lr}
10047796:	b082      	sub	sp, #8
10047798:	af00      	add	r7, sp, #0
1004779a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004779c:	4b06      	ldr	r3, [pc, #24]	@ (100477b8 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004779e:	689b      	ldr	r3, [r3, #8]
100477a0:	22e0      	movs	r2, #224	@ 0xe0
100477a2:	4393      	bics	r3, r2
100477a4:	0019      	movs	r1, r3
100477a6:	4b04      	ldr	r3, [pc, #16]	@ (100477b8 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100477a8:	687a      	ldr	r2, [r7, #4]
100477aa:	430a      	orrs	r2, r1
100477ac:	609a      	str	r2, [r3, #8]
}
100477ae:	46c0      	nop			@ (mov r8, r8)
100477b0:	46bd      	mov	sp, r7
100477b2:	b002      	add	sp, #8
100477b4:	bd80      	pop	{r7, pc}
100477b6:	46c0      	nop			@ (mov r8, r8)
100477b8:	48400000 	.word	0x48400000

100477bc <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100477bc:	b580      	push	{r7, lr}
100477be:	b084      	sub	sp, #16
100477c0:	af00      	add	r7, sp, #0
100477c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100477c4:	687b      	ldr	r3, [r7, #4]
100477c6:	2b00      	cmp	r3, #0
100477c8:	d101      	bne.n	100477ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
100477ca:	2301      	movs	r3, #1
100477cc:	e13c      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100477ce:	687b      	ldr	r3, [r7, #4]
100477d0:	681b      	ldr	r3, [r3, #0]
100477d2:	2210      	movs	r2, #16
100477d4:	4013      	ands	r3, r2
100477d6:	d033      	beq.n	10047840 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
100477d8:	687b      	ldr	r3, [r7, #4]
100477da:	689b      	ldr	r3, [r3, #8]
100477dc:	2b00      	cmp	r3, #0
100477de:	d102      	bne.n	100477e6 <HAL_RCC_OscConfig+0x2a>
100477e0:	f7ff fe96 	bl	10047510 <LL_RCC_HSI_Enable>
100477e4:	e001      	b.n	100477ea <HAL_RCC_OscConfig+0x2e>
100477e6:	f7ff fea7 	bl	10047538 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
100477ea:	687b      	ldr	r3, [r7, #4]
100477ec:	689b      	ldr	r3, [r3, #8]
100477ee:	2b04      	cmp	r3, #4
100477f0:	d113      	bne.n	1004781a <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100477f2:	f7fc fc63 	bl	100440bc <HAL_GetTick>
100477f6:	0003      	movs	r3, r0
100477f8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
100477fa:	e008      	b.n	1004780e <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100477fc:	f7fc fc5e 	bl	100440bc <HAL_GetTick>
10047800:	0002      	movs	r2, r0
10047802:	68fb      	ldr	r3, [r7, #12]
10047804:	1ad3      	subs	r3, r2, r3
10047806:	2b64      	cmp	r3, #100	@ 0x64
10047808:	d901      	bls.n	1004780e <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004780a:	2303      	movs	r3, #3
1004780c:	e11c      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004780e:	f7ff fea7 	bl	10047560 <LL_RCC_HSI_IsReady>
10047812:	0003      	movs	r3, r0
10047814:	2b01      	cmp	r3, #1
10047816:	d0f1      	beq.n	100477fc <HAL_RCC_OscConfig+0x40>
10047818:	e012      	b.n	10047840 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004781a:	f7fc fc4f 	bl	100440bc <HAL_GetTick>
1004781e:	0003      	movs	r3, r0
10047820:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10047822:	e008      	b.n	10047836 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047824:	f7fc fc4a 	bl	100440bc <HAL_GetTick>
10047828:	0002      	movs	r2, r0
1004782a:	68fb      	ldr	r3, [r7, #12]
1004782c:	1ad3      	subs	r3, r2, r3
1004782e:	2b64      	cmp	r3, #100	@ 0x64
10047830:	d901      	bls.n	10047836 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10047832:	2303      	movs	r3, #3
10047834:	e108      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
10047836:	f7ff fe93 	bl	10047560 <LL_RCC_HSI_IsReady>
1004783a:	0003      	movs	r3, r0
1004783c:	2b01      	cmp	r3, #1
1004783e:	d1f1      	bne.n	10047824 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10047840:	687b      	ldr	r3, [r7, #4]
10047842:	681b      	ldr	r3, [r3, #0]
10047844:	2201      	movs	r2, #1
10047846:	4013      	ands	r3, r2
10047848:	d039      	beq.n	100478be <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004784a:	2020      	movs	r0, #32
1004784c:	f7ff fe2a 	bl	100474a4 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10047850:	2030      	movs	r0, #48	@ 0x30
10047852:	f7ff fe47 	bl	100474e4 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10047856:	687b      	ldr	r3, [r7, #4]
10047858:	685a      	ldr	r2, [r3, #4]
1004785a:	2380      	movs	r3, #128	@ 0x80
1004785c:	025b      	lsls	r3, r3, #9
1004785e:	429a      	cmp	r2, r3
10047860:	d102      	bne.n	10047868 <HAL_RCC_OscConfig+0xac>
10047862:	f7ff fded 	bl	10047440 <LL_RCC_HSE_Enable>
10047866:	e001      	b.n	1004786c <HAL_RCC_OscConfig+0xb0>
10047868:	f7ff fdf8 	bl	1004745c <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004786c:	687b      	ldr	r3, [r7, #4]
1004786e:	685b      	ldr	r3, [r3, #4]
10047870:	2b00      	cmp	r3, #0
10047872:	d012      	beq.n	1004789a <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047874:	f7fc fc22 	bl	100440bc <HAL_GetTick>
10047878:	0003      	movs	r3, r0
1004787a:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004787c:	e008      	b.n	10047890 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004787e:	f7fc fc1d 	bl	100440bc <HAL_GetTick>
10047882:	0002      	movs	r2, r0
10047884:	68fb      	ldr	r3, [r7, #12]
10047886:	1ad3      	subs	r3, r2, r3
10047888:	2b64      	cmp	r3, #100	@ 0x64
1004788a:	d901      	bls.n	10047890 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004788c:	2303      	movs	r3, #3
1004788e:	e0db      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
10047890:	f7ff fdf4 	bl	1004747c <LL_RCC_HSE_IsReady>
10047894:	1e03      	subs	r3, r0, #0
10047896:	d0f2      	beq.n	1004787e <HAL_RCC_OscConfig+0xc2>
10047898:	e011      	b.n	100478be <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004789a:	f7fc fc0f 	bl	100440bc <HAL_GetTick>
1004789e:	0003      	movs	r3, r0
100478a0:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
100478a2:	e008      	b.n	100478b6 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100478a4:	f7fc fc0a 	bl	100440bc <HAL_GetTick>
100478a8:	0002      	movs	r2, r0
100478aa:	68fb      	ldr	r3, [r7, #12]
100478ac:	1ad3      	subs	r3, r2, r3
100478ae:	2b64      	cmp	r3, #100	@ 0x64
100478b0:	d901      	bls.n	100478b6 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
100478b2:	2303      	movs	r3, #3
100478b4:	e0c8      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
100478b6:	f7ff fde1 	bl	1004747c <LL_RCC_HSE_IsReady>
100478ba:	1e03      	subs	r3, r0, #0
100478bc:	d1f2      	bne.n	100478a4 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100478be:	687b      	ldr	r3, [r7, #4]
100478c0:	681b      	ldr	r3, [r3, #0]
100478c2:	2204      	movs	r2, #4
100478c4:	4013      	ands	r3, r2
100478c6:	d03a      	beq.n	1004793e <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
100478c8:	687b      	ldr	r3, [r7, #4]
100478ca:	691b      	ldr	r3, [r3, #16]
100478cc:	2b00      	cmp	r3, #0
100478ce:	d022      	beq.n	10047916 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
100478d0:	f7ff ff10 	bl	100476f4 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
100478d4:	46c0      	nop			@ (mov r8, r8)
100478d6:	f7ff ff1b 	bl	10047710 <LL_RCC_LSI_IsReady>
100478da:	1e03      	subs	r3, r0, #0
100478dc:	d1fb      	bne.n	100478d6 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100478de:	f7ff fe9d 	bl	1004761c <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
100478e2:	2380      	movs	r3, #128	@ 0x80
100478e4:	025b      	lsls	r3, r3, #9
100478e6:	0018      	movs	r0, r3
100478e8:	f7ff fe74 	bl	100475d4 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
100478ec:	f7ff fef4 	bl	100476d8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100478f0:	f7fc fbe4 	bl	100440bc <HAL_GetTick>
100478f4:	0003      	movs	r3, r0
100478f6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
100478f8:	e008      	b.n	1004790c <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100478fa:	f7fc fbdf 	bl	100440bc <HAL_GetTick>
100478fe:	0002      	movs	r2, r0
10047900:	68fb      	ldr	r3, [r7, #12]
10047902:	1ad3      	subs	r3, r2, r3
10047904:	2b02      	cmp	r3, #2
10047906:	d901      	bls.n	1004790c <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10047908:	2303      	movs	r3, #3
1004790a:	e09d      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004790c:	f7ff ff00 	bl	10047710 <LL_RCC_LSI_IsReady>
10047910:	1e03      	subs	r3, r0, #0
10047912:	d0f2      	beq.n	100478fa <HAL_RCC_OscConfig+0x13e>
10047914:	e013      	b.n	1004793e <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10047916:	f7ff feed 	bl	100476f4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004791a:	f7fc fbcf 	bl	100440bc <HAL_GetTick>
1004791e:	0003      	movs	r3, r0
10047920:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10047922:	e008      	b.n	10047936 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10047924:	f7fc fbca 	bl	100440bc <HAL_GetTick>
10047928:	0002      	movs	r2, r0
1004792a:	68fb      	ldr	r3, [r7, #12]
1004792c:	1ad3      	subs	r3, r2, r3
1004792e:	2b02      	cmp	r3, #2
10047930:	d901      	bls.n	10047936 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10047932:	2303      	movs	r3, #3
10047934:	e088      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10047936:	f7ff feeb 	bl	10047710 <LL_RCC_LSI_IsReady>
1004793a:	1e03      	subs	r3, r0, #0
1004793c:	d1f2      	bne.n	10047924 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004793e:	687b      	ldr	r3, [r7, #4]
10047940:	681b      	ldr	r3, [r3, #0]
10047942:	2202      	movs	r2, #2
10047944:	4013      	ands	r3, r2
10047946:	d047      	beq.n	100479d8 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10047948:	f7ff fed4 	bl	100476f4 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004794c:	f7ff fe66 	bl	1004761c <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10047950:	46c0      	nop			@ (mov r8, r8)
10047952:	f7ff fe71 	bl	10047638 <LL_RCC_LSE_IsReady>
10047956:	1e03      	subs	r3, r0, #0
10047958:	d1fb      	bne.n	10047952 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004795a:	23c0      	movs	r3, #192	@ 0xc0
1004795c:	019b      	lsls	r3, r3, #6
1004795e:	0018      	movs	r0, r3
10047960:	f7ff fd56 	bl	10047410 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10047964:	2380      	movs	r3, #128	@ 0x80
10047966:	021b      	lsls	r3, r3, #8
10047968:	0018      	movs	r0, r3
1004796a:	f7ff fe33 	bl	100475d4 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004796e:	2020      	movs	r0, #32
10047970:	f7ff fe9e 	bl	100476b0 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10047974:	687b      	ldr	r3, [r7, #4]
10047976:	68db      	ldr	r3, [r3, #12]
10047978:	2b10      	cmp	r3, #16
1004797a:	d102      	bne.n	10047982 <HAL_RCC_OscConfig+0x1c6>
1004797c:	f7ff fe40 	bl	10047600 <LL_RCC_LSE_Enable>
10047980:	e001      	b.n	10047986 <HAL_RCC_OscConfig+0x1ca>
10047982:	f7ff fe4b 	bl	1004761c <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
10047986:	687b      	ldr	r3, [r7, #4]
10047988:	68db      	ldr	r3, [r3, #12]
1004798a:	2b00      	cmp	r3, #0
1004798c:	d012      	beq.n	100479b4 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004798e:	f7fc fb95 	bl	100440bc <HAL_GetTick>
10047992:	0003      	movs	r3, r0
10047994:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10047996:	e008      	b.n	100479aa <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047998:	f7fc fb90 	bl	100440bc <HAL_GetTick>
1004799c:	0002      	movs	r2, r0
1004799e:	68fb      	ldr	r3, [r7, #12]
100479a0:	1ad3      	subs	r3, r2, r3
100479a2:	2b64      	cmp	r3, #100	@ 0x64
100479a4:	d901      	bls.n	100479aa <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
100479a6:	2303      	movs	r3, #3
100479a8:	e04e      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100479aa:	f7ff fe45 	bl	10047638 <LL_RCC_LSE_IsReady>
100479ae:	1e03      	subs	r3, r0, #0
100479b0:	d0f2      	beq.n	10047998 <HAL_RCC_OscConfig+0x1dc>
100479b2:	e011      	b.n	100479d8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100479b4:	f7fc fb82 	bl	100440bc <HAL_GetTick>
100479b8:	0003      	movs	r3, r0
100479ba:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
100479bc:	e008      	b.n	100479d0 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100479be:	f7fc fb7d 	bl	100440bc <HAL_GetTick>
100479c2:	0002      	movs	r2, r0
100479c4:	68fb      	ldr	r3, [r7, #12]
100479c6:	1ad3      	subs	r3, r2, r3
100479c8:	2b64      	cmp	r3, #100	@ 0x64
100479ca:	d901      	bls.n	100479d0 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
100479cc:	2303      	movs	r3, #3
100479ce:	e03b      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
100479d0:	f7ff fe32 	bl	10047638 <LL_RCC_LSE_IsReady>
100479d4:	1e03      	subs	r3, r0, #0
100479d6:	d1f2      	bne.n	100479be <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
100479d8:	687b      	ldr	r3, [r7, #4]
100479da:	681b      	ldr	r3, [r3, #0]
100479dc:	2208      	movs	r2, #8
100479de:	4013      	ands	r3, r2
100479e0:	d031      	beq.n	10047a46 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
100479e2:	687b      	ldr	r3, [r7, #4]
100479e4:	695b      	ldr	r3, [r3, #20]
100479e6:	2b40      	cmp	r3, #64	@ 0x40
100479e8:	d102      	bne.n	100479f0 <HAL_RCC_OscConfig+0x234>
100479ea:	f7ff fe35 	bl	10047658 <LL_RCC_LSE_EnableBypass>
100479ee:	e001      	b.n	100479f4 <HAL_RCC_OscConfig+0x238>
100479f0:	f7ff fe40 	bl	10047674 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
100479f4:	687b      	ldr	r3, [r7, #4]
100479f6:	695b      	ldr	r3, [r3, #20]
100479f8:	2b00      	cmp	r3, #0
100479fa:	d012      	beq.n	10047a22 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100479fc:	f7fc fb5e 	bl	100440bc <HAL_GetTick>
10047a00:	0003      	movs	r3, r0
10047a02:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10047a04:	e008      	b.n	10047a18 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047a06:	f7fc fb59 	bl	100440bc <HAL_GetTick>
10047a0a:	0002      	movs	r2, r0
10047a0c:	68fb      	ldr	r3, [r7, #12]
10047a0e:	1ad3      	subs	r3, r2, r3
10047a10:	2b64      	cmp	r3, #100	@ 0x64
10047a12:	d901      	bls.n	10047a18 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10047a14:	2303      	movs	r3, #3
10047a16:	e017      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10047a18:	f7ff fe3a 	bl	10047690 <LL_RCC_LSE_IsBypassEnabled>
10047a1c:	1e03      	subs	r3, r0, #0
10047a1e:	d0f2      	beq.n	10047a06 <HAL_RCC_OscConfig+0x24a>
10047a20:	e011      	b.n	10047a46 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047a22:	f7fc fb4b 	bl	100440bc <HAL_GetTick>
10047a26:	0003      	movs	r3, r0
10047a28:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10047a2a:	e008      	b.n	10047a3e <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047a2c:	f7fc fb46 	bl	100440bc <HAL_GetTick>
10047a30:	0002      	movs	r2, r0
10047a32:	68fb      	ldr	r3, [r7, #12]
10047a34:	1ad3      	subs	r3, r2, r3
10047a36:	2b64      	cmp	r3, #100	@ 0x64
10047a38:	d901      	bls.n	10047a3e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
10047a3a:	2303      	movs	r3, #3
10047a3c:	e004      	b.n	10047a48 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10047a3e:	f7ff fe27 	bl	10047690 <LL_RCC_LSE_IsBypassEnabled>
10047a42:	1e03      	subs	r3, r0, #0
10047a44:	d1f2      	bne.n	10047a2c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
10047a46:	2300      	movs	r3, #0
}
10047a48:	0018      	movs	r0, r3
10047a4a:	46bd      	mov	sp, r7
10047a4c:	b004      	add	sp, #16
10047a4e:	bd80      	pop	{r7, pc}

10047a50 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10047a50:	b580      	push	{r7, lr}
10047a52:	b084      	sub	sp, #16
10047a54:	af00      	add	r7, sp, #0
10047a56:	6078      	str	r0, [r7, #4]
10047a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10047a5a:	687b      	ldr	r3, [r7, #4]
10047a5c:	2b00      	cmp	r3, #0
10047a5e:	d101      	bne.n	10047a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10047a60:	2301      	movs	r3, #1
10047a62:	e098      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10047a64:	4b4e      	ldr	r3, [pc, #312]	@ (10047ba0 <HAL_RCC_ClockConfig+0x150>)
10047a66:	685b      	ldr	r3, [r3, #4]
10047a68:	2230      	movs	r2, #48	@ 0x30
10047a6a:	4393      	bics	r3, r2
10047a6c:	0019      	movs	r1, r3
10047a6e:	4b4c      	ldr	r3, [pc, #304]	@ (10047ba0 <HAL_RCC_ClockConfig+0x150>)
10047a70:	683a      	ldr	r2, [r7, #0]
10047a72:	430a      	orrs	r2, r1
10047a74:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10047a76:	687b      	ldr	r3, [r7, #4]
10047a78:	681b      	ldr	r3, [r3, #0]
10047a7a:	2b02      	cmp	r3, #2
10047a7c:	d10e      	bne.n	10047a9c <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10047a7e:	f7ff fd47 	bl	10047510 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10047a82:	f7ff fd6d 	bl	10047560 <LL_RCC_HSI_IsReady>
10047a86:	1e03      	subs	r3, r0, #0
10047a88:	d101      	bne.n	10047a8e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10047a8a:	2301      	movs	r3, #1
10047a8c:	e083      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10047a8e:	f7ff fe5d 	bl	1004774c <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10047a92:	687b      	ldr	r3, [r7, #4]
10047a94:	685b      	ldr	r3, [r3, #4]
10047a96:	0018      	movs	r0, r3
10047a98:	f7ff fe7c 	bl	10047794 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10047a9c:	687b      	ldr	r3, [r7, #4]
10047a9e:	681b      	ldr	r3, [r3, #0]
10047aa0:	2b00      	cmp	r3, #0
10047aa2:	d124      	bne.n	10047aee <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10047aa4:	f7ff fd5c 	bl	10047560 <LL_RCC_HSI_IsReady>
10047aa8:	1e03      	subs	r3, r0, #0
10047aaa:	d101      	bne.n	10047ab0 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10047aac:	2301      	movs	r3, #1
10047aae:	e072      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10047ab0:	f7ff fce4 	bl	1004747c <LL_RCC_HSE_IsReady>
10047ab4:	1e03      	subs	r3, r0, #0
10047ab6:	d101      	bne.n	10047abc <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10047ab8:	2301      	movs	r3, #1
10047aba:	e06c      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10047abc:	f7ff fe38 	bl	10047730 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10047ac0:	f7fc fafc 	bl	100440bc <HAL_GetTick>
10047ac4:	0003      	movs	r3, r0
10047ac6:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10047ac8:	e008      	b.n	10047adc <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10047aca:	f7fc faf7 	bl	100440bc <HAL_GetTick>
10047ace:	0002      	movs	r2, r0
10047ad0:	68fb      	ldr	r3, [r7, #12]
10047ad2:	1ad3      	subs	r3, r2, r3
10047ad4:	2b02      	cmp	r3, #2
10047ad6:	d901      	bls.n	10047adc <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10047ad8:	2303      	movs	r3, #3
10047ada:	e05c      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10047adc:	f7ff fe46 	bl	1004776c <LL_RCC_RC64MPLL_IsReady>
10047ae0:	1e03      	subs	r3, r0, #0
10047ae2:	d0f2      	beq.n	10047aca <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10047ae4:	687b      	ldr	r3, [r7, #4]
10047ae6:	685b      	ldr	r3, [r3, #4]
10047ae8:	0018      	movs	r0, r3
10047aea:	f7ff fe53 	bl	10047794 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10047aee:	687b      	ldr	r3, [r7, #4]
10047af0:	681b      	ldr	r3, [r3, #0]
10047af2:	2b01      	cmp	r3, #1
10047af4:	d117      	bne.n	10047b26 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10047af6:	f7ff fd47 	bl	10047588 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10047afa:	f7ff fd31 	bl	10047560 <LL_RCC_HSI_IsReady>
10047afe:	1e03      	subs	r3, r0, #0
10047b00:	d001      	beq.n	10047b06 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10047b02:	2301      	movs	r3, #1
10047b04:	e047      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10047b06:	f7ff fcb9 	bl	1004747c <LL_RCC_HSE_IsReady>
10047b0a:	1e03      	subs	r3, r0, #0
10047b0c:	d101      	bne.n	10047b12 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10047b0e:	2301      	movs	r3, #1
10047b10:	e041      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10047b12:	4b24      	ldr	r3, [pc, #144]	@ (10047ba4 <HAL_RCC_ClockConfig+0x154>)
10047b14:	689b      	ldr	r3, [r3, #8]
10047b16:	22e0      	movs	r2, #224	@ 0xe0
10047b18:	4393      	bics	r3, r2
10047b1a:	0019      	movs	r1, r3
10047b1c:	687b      	ldr	r3, [r7, #4]
10047b1e:	685a      	ldr	r2, [r3, #4]
10047b20:	4b20      	ldr	r3, [pc, #128]	@ (10047ba4 <HAL_RCC_ClockConfig+0x154>)
10047b22:	430a      	orrs	r2, r1
10047b24:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10047b26:	4b1e      	ldr	r3, [pc, #120]	@ (10047ba0 <HAL_RCC_ClockConfig+0x150>)
10047b28:	685b      	ldr	r3, [r3, #4]
10047b2a:	2230      	movs	r2, #48	@ 0x30
10047b2c:	4013      	ands	r3, r2
10047b2e:	683a      	ldr	r2, [r7, #0]
10047b30:	429a      	cmp	r2, r3
10047b32:	d01d      	beq.n	10047b70 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10047b34:	4b1a      	ldr	r3, [pc, #104]	@ (10047ba0 <HAL_RCC_ClockConfig+0x150>)
10047b36:	685b      	ldr	r3, [r3, #4]
10047b38:	2230      	movs	r2, #48	@ 0x30
10047b3a:	4393      	bics	r3, r2
10047b3c:	0019      	movs	r1, r3
10047b3e:	4b18      	ldr	r3, [pc, #96]	@ (10047ba0 <HAL_RCC_ClockConfig+0x150>)
10047b40:	683a      	ldr	r2, [r7, #0]
10047b42:	430a      	orrs	r2, r1
10047b44:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10047b46:	f7fc fab9 	bl	100440bc <HAL_GetTick>
10047b4a:	0003      	movs	r3, r0
10047b4c:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10047b4e:	e008      	b.n	10047b62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10047b50:	f7fc fab4 	bl	100440bc <HAL_GetTick>
10047b54:	0002      	movs	r2, r0
10047b56:	68fb      	ldr	r3, [r7, #12]
10047b58:	1ad3      	subs	r3, r2, r3
10047b5a:	2b02      	cmp	r3, #2
10047b5c:	d901      	bls.n	10047b62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10047b5e:	2303      	movs	r3, #3
10047b60:	e019      	b.n	10047b96 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10047b62:	4b0f      	ldr	r3, [pc, #60]	@ (10047ba0 <HAL_RCC_ClockConfig+0x150>)
10047b64:	685b      	ldr	r3, [r3, #4]
10047b66:	2230      	movs	r2, #48	@ 0x30
10047b68:	4013      	ands	r3, r2
10047b6a:	683a      	ldr	r2, [r7, #0]
10047b6c:	429a      	cmp	r2, r3
10047b6e:	d1ef      	bne.n	10047b50 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10047b70:	2300      	movs	r3, #0
10047b72:	60bb      	str	r3, [r7, #8]
10047b74:	e003      	b.n	10047b7e <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10047b76:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10047b78:	68bb      	ldr	r3, [r7, #8]
10047b7a:	3301      	adds	r3, #1
10047b7c:	60bb      	str	r3, [r7, #8]
10047b7e:	68bb      	ldr	r3, [r7, #8]
10047b80:	2b05      	cmp	r3, #5
10047b82:	ddf8      	ble.n	10047b76 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10047b84:	f7fb ff6c 	bl	10043a60 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10047b88:	f7fc faa2 	bl	100440d0 <HAL_GetTickPrio>
10047b8c:	0003      	movs	r3, r0
10047b8e:	0018      	movs	r0, r3
10047b90:	f7fc fa3a 	bl	10044008 <HAL_InitTick>
10047b94:	0003      	movs	r3, r0
}
10047b96:	0018      	movs	r0, r3
10047b98:	46bd      	mov	sp, r7
10047b9a:	b004      	add	sp, #16
10047b9c:	bd80      	pop	{r7, pc}
10047b9e:	46c0      	nop			@ (mov r8, r8)
10047ba0:	40001000 	.word	0x40001000
10047ba4:	48400000 	.word	0x48400000

10047ba8 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10047ba8:	b580      	push	{r7, lr}
10047baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10047bac:	4b02      	ldr	r3, [pc, #8]	@ (10047bb8 <HAL_RCC_GetSysClockFreq+0x10>)
10047bae:	681b      	ldr	r3, [r3, #0]
}
10047bb0:	0018      	movs	r0, r3
10047bb2:	46bd      	mov	sp, r7
10047bb4:	bd80      	pop	{r7, pc}
10047bb6:	46c0      	nop			@ (mov r8, r8)
10047bb8:	20000d68 	.word	0x20000d68

10047bbc <LL_RCC_HSE_IsReady>:
{
10047bbc:	b580      	push	{r7, lr}
10047bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10047bc0:	4b07      	ldr	r3, [pc, #28]	@ (10047be0 <LL_RCC_HSE_IsReady+0x24>)
10047bc2:	681a      	ldr	r2, [r3, #0]
10047bc4:	2380      	movs	r3, #128	@ 0x80
10047bc6:	029b      	lsls	r3, r3, #10
10047bc8:	401a      	ands	r2, r3
10047bca:	2380      	movs	r3, #128	@ 0x80
10047bcc:	029b      	lsls	r3, r3, #10
10047bce:	429a      	cmp	r2, r3
10047bd0:	d101      	bne.n	10047bd6 <LL_RCC_HSE_IsReady+0x1a>
10047bd2:	2301      	movs	r3, #1
10047bd4:	e000      	b.n	10047bd8 <LL_RCC_HSE_IsReady+0x1c>
10047bd6:	2300      	movs	r3, #0
}
10047bd8:	0018      	movs	r0, r3
10047bda:	46bd      	mov	sp, r7
10047bdc:	bd80      	pop	{r7, pc}
10047bde:	46c0      	nop			@ (mov r8, r8)
10047be0:	48400000 	.word	0x48400000

10047be4 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10047be4:	b580      	push	{r7, lr}
10047be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10047be8:	4b05      	ldr	r3, [pc, #20]	@ (10047c00 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10047bea:	689b      	ldr	r3, [r3, #8]
10047bec:	2208      	movs	r2, #8
10047bee:	4013      	ands	r3, r2
10047bf0:	2b08      	cmp	r3, #8
10047bf2:	d101      	bne.n	10047bf8 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10047bf4:	2301      	movs	r3, #1
10047bf6:	e000      	b.n	10047bfa <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10047bf8:	2300      	movs	r3, #0
}
10047bfa:	0018      	movs	r0, r3
10047bfc:	46bd      	mov	sp, r7
10047bfe:	bd80      	pop	{r7, pc}
10047c00:	48400000 	.word	0x48400000

10047c04 <LL_RCC_LSCO_SetSource>:
{
10047c04:	b580      	push	{r7, lr}
10047c06:	b082      	sub	sp, #8
10047c08:	af00      	add	r7, sp, #0
10047c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10047c0c:	4b06      	ldr	r3, [pc, #24]	@ (10047c28 <LL_RCC_LSCO_SetSource+0x24>)
10047c0e:	689b      	ldr	r3, [r3, #8]
10047c10:	4a06      	ldr	r2, [pc, #24]	@ (10047c2c <LL_RCC_LSCO_SetSource+0x28>)
10047c12:	4013      	ands	r3, r2
10047c14:	0019      	movs	r1, r3
10047c16:	4b04      	ldr	r3, [pc, #16]	@ (10047c28 <LL_RCC_LSCO_SetSource+0x24>)
10047c18:	687a      	ldr	r2, [r7, #4]
10047c1a:	430a      	orrs	r2, r1
10047c1c:	609a      	str	r2, [r3, #8]
}
10047c1e:	46c0      	nop			@ (mov r8, r8)
10047c20:	46bd      	mov	sp, r7
10047c22:	b002      	add	sp, #8
10047c24:	bd80      	pop	{r7, pc}
10047c26:	46c0      	nop			@ (mov r8, r8)
10047c28:	48400000 	.word	0x48400000
10047c2c:	fffe7fff 	.word	0xfffe7fff

10047c30 <LL_RCC_LSCO_GetSource>:
{
10047c30:	b580      	push	{r7, lr}
10047c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10047c34:	4b03      	ldr	r3, [pc, #12]	@ (10047c44 <LL_RCC_LSCO_GetSource+0x14>)
10047c36:	689a      	ldr	r2, [r3, #8]
10047c38:	23c0      	movs	r3, #192	@ 0xc0
10047c3a:	025b      	lsls	r3, r3, #9
10047c3c:	4013      	ands	r3, r2
}
10047c3e:	0018      	movs	r0, r3
10047c40:	46bd      	mov	sp, r7
10047c42:	bd80      	pop	{r7, pc}
10047c44:	48400000 	.word	0x48400000

10047c48 <LL_RCC_SetRFClock>:
{
10047c48:	b580      	push	{r7, lr}
10047c4a:	b082      	sub	sp, #8
10047c4c:	af00      	add	r7, sp, #0
10047c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10047c50:	4b06      	ldr	r3, [pc, #24]	@ (10047c6c <LL_RCC_SetRFClock+0x24>)
10047c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047c54:	2204      	movs	r2, #4
10047c56:	4393      	bics	r3, r2
10047c58:	0019      	movs	r1, r3
10047c5a:	4b04      	ldr	r3, [pc, #16]	@ (10047c6c <LL_RCC_SetRFClock+0x24>)
10047c5c:	687a      	ldr	r2, [r7, #4]
10047c5e:	430a      	orrs	r2, r1
10047c60:	661a      	str	r2, [r3, #96]	@ 0x60
}
10047c62:	46c0      	nop			@ (mov r8, r8)
10047c64:	46bd      	mov	sp, r7
10047c66:	b002      	add	sp, #8
10047c68:	bd80      	pop	{r7, pc}
10047c6a:	46c0      	nop			@ (mov r8, r8)
10047c6c:	48400000 	.word	0x48400000

10047c70 <LL_RCC_GetRFClock>:
{
10047c70:	b580      	push	{r7, lr}
10047c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10047c74:	4b03      	ldr	r3, [pc, #12]	@ (10047c84 <LL_RCC_GetRFClock+0x14>)
10047c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047c78:	2204      	movs	r2, #4
10047c7a:	4013      	ands	r3, r2
}
10047c7c:	0018      	movs	r0, r3
10047c7e:	46bd      	mov	sp, r7
10047c80:	bd80      	pop	{r7, pc}
10047c82:	46c0      	nop			@ (mov r8, r8)
10047c84:	48400000 	.word	0x48400000

10047c88 <LL_RCC_SetSMPSPrescaler>:
{
10047c88:	b580      	push	{r7, lr}
10047c8a:	b082      	sub	sp, #8
10047c8c:	af00      	add	r7, sp, #0
10047c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10047c90:	4b06      	ldr	r3, [pc, #24]	@ (10047cac <LL_RCC_SetSMPSPrescaler+0x24>)
10047c92:	689b      	ldr	r3, [r3, #8]
10047c94:	4a06      	ldr	r2, [pc, #24]	@ (10047cb0 <LL_RCC_SetSMPSPrescaler+0x28>)
10047c96:	4013      	ands	r3, r2
10047c98:	0019      	movs	r1, r3
10047c9a:	4b04      	ldr	r3, [pc, #16]	@ (10047cac <LL_RCC_SetSMPSPrescaler+0x24>)
10047c9c:	687a      	ldr	r2, [r7, #4]
10047c9e:	430a      	orrs	r2, r1
10047ca0:	609a      	str	r2, [r3, #8]
}
10047ca2:	46c0      	nop			@ (mov r8, r8)
10047ca4:	46bd      	mov	sp, r7
10047ca6:	b002      	add	sp, #8
10047ca8:	bd80      	pop	{r7, pc}
10047caa:	46c0      	nop			@ (mov r8, r8)
10047cac:	48400000 	.word	0x48400000
10047cb0:	ffffefff 	.word	0xffffefff

10047cb4 <LL_RCC_GetSMPSPrescaler>:
{
10047cb4:	b580      	push	{r7, lr}
10047cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10047cb8:	4b03      	ldr	r3, [pc, #12]	@ (10047cc8 <LL_RCC_GetSMPSPrescaler+0x14>)
10047cba:	689a      	ldr	r2, [r3, #8]
10047cbc:	2380      	movs	r3, #128	@ 0x80
10047cbe:	015b      	lsls	r3, r3, #5
10047cc0:	4013      	ands	r3, r2
}
10047cc2:	0018      	movs	r0, r3
10047cc4:	46bd      	mov	sp, r7
10047cc6:	bd80      	pop	{r7, pc}
10047cc8:	48400000 	.word	0x48400000

10047ccc <LL_RCC_SetLPUARTClockSource>:
{
10047ccc:	b580      	push	{r7, lr}
10047cce:	b082      	sub	sp, #8
10047cd0:	af00      	add	r7, sp, #0
10047cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10047cd4:	4b06      	ldr	r3, [pc, #24]	@ (10047cf0 <LL_RCC_SetLPUARTClockSource+0x24>)
10047cd6:	689b      	ldr	r3, [r3, #8]
10047cd8:	4a06      	ldr	r2, [pc, #24]	@ (10047cf4 <LL_RCC_SetLPUARTClockSource+0x28>)
10047cda:	4013      	ands	r3, r2
10047cdc:	0019      	movs	r1, r3
10047cde:	4b04      	ldr	r3, [pc, #16]	@ (10047cf0 <LL_RCC_SetLPUARTClockSource+0x24>)
10047ce0:	687a      	ldr	r2, [r7, #4]
10047ce2:	430a      	orrs	r2, r1
10047ce4:	609a      	str	r2, [r3, #8]
}
10047ce6:	46c0      	nop			@ (mov r8, r8)
10047ce8:	46bd      	mov	sp, r7
10047cea:	b002      	add	sp, #8
10047cec:	bd80      	pop	{r7, pc}
10047cee:	46c0      	nop			@ (mov r8, r8)
10047cf0:	48400000 	.word	0x48400000
10047cf4:	ffffdfff 	.word	0xffffdfff

10047cf8 <LL_RCC_GetLPUARTClockSource>:
{
10047cf8:	b580      	push	{r7, lr}
10047cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10047cfc:	4b03      	ldr	r3, [pc, #12]	@ (10047d0c <LL_RCC_GetLPUARTClockSource+0x14>)
10047cfe:	689a      	ldr	r2, [r3, #8]
10047d00:	2380      	movs	r3, #128	@ 0x80
10047d02:	019b      	lsls	r3, r3, #6
10047d04:	4013      	ands	r3, r2
}
10047d06:	0018      	movs	r0, r3
10047d08:	46bd      	mov	sp, r7
10047d0a:	bd80      	pop	{r7, pc}
10047d0c:	48400000 	.word	0x48400000

10047d10 <LL_RCC_SetSPI3I2SClockSource>:
{
10047d10:	b580      	push	{r7, lr}
10047d12:	b082      	sub	sp, #8
10047d14:	af00      	add	r7, sp, #0
10047d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10047d18:	4b06      	ldr	r3, [pc, #24]	@ (10047d34 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10047d1a:	689b      	ldr	r3, [r3, #8]
10047d1c:	4a06      	ldr	r2, [pc, #24]	@ (10047d38 <LL_RCC_SetSPI3I2SClockSource+0x28>)
10047d1e:	4013      	ands	r3, r2
10047d20:	0019      	movs	r1, r3
10047d22:	4b04      	ldr	r3, [pc, #16]	@ (10047d34 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10047d24:	687a      	ldr	r2, [r7, #4]
10047d26:	430a      	orrs	r2, r1
10047d28:	609a      	str	r2, [r3, #8]
}
10047d2a:	46c0      	nop			@ (mov r8, r8)
10047d2c:	46bd      	mov	sp, r7
10047d2e:	b002      	add	sp, #8
10047d30:	bd80      	pop	{r7, pc}
10047d32:	46c0      	nop			@ (mov r8, r8)
10047d34:	48400000 	.word	0x48400000
10047d38:	ff3fffff 	.word	0xff3fffff

10047d3c <LL_RCC_GetSPI3I2SClockSource>:
{
10047d3c:	b580      	push	{r7, lr}
10047d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10047d40:	4b03      	ldr	r3, [pc, #12]	@ (10047d50 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10047d42:	689a      	ldr	r2, [r3, #8]
10047d44:	23c0      	movs	r3, #192	@ 0xc0
10047d46:	041b      	lsls	r3, r3, #16
10047d48:	4013      	ands	r3, r2
}
10047d4a:	0018      	movs	r0, r3
10047d4c:	46bd      	mov	sp, r7
10047d4e:	bd80      	pop	{r7, pc}
10047d50:	48400000 	.word	0x48400000

10047d54 <LL_RCC_RC64MPLL_IsReady>:
{
10047d54:	b580      	push	{r7, lr}
10047d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10047d58:	4b07      	ldr	r3, [pc, #28]	@ (10047d78 <LL_RCC_RC64MPLL_IsReady+0x24>)
10047d5a:	681a      	ldr	r2, [r3, #0]
10047d5c:	2380      	movs	r3, #128	@ 0x80
10047d5e:	01db      	lsls	r3, r3, #7
10047d60:	401a      	ands	r2, r3
10047d62:	2380      	movs	r3, #128	@ 0x80
10047d64:	01db      	lsls	r3, r3, #7
10047d66:	429a      	cmp	r2, r3
10047d68:	d101      	bne.n	10047d6e <LL_RCC_RC64MPLL_IsReady+0x1a>
10047d6a:	2301      	movs	r3, #1
10047d6c:	e000      	b.n	10047d70 <LL_RCC_RC64MPLL_IsReady+0x1c>
10047d6e:	2300      	movs	r3, #0
}
10047d70:	0018      	movs	r0, r3
10047d72:	46bd      	mov	sp, r7
10047d74:	bd80      	pop	{r7, pc}
10047d76:	46c0      	nop			@ (mov r8, r8)
10047d78:	48400000 	.word	0x48400000

10047d7c <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10047d7c:	b580      	push	{r7, lr}
10047d7e:	b082      	sub	sp, #8
10047d80:	af00      	add	r7, sp, #0
10047d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10047d84:	687b      	ldr	r3, [r7, #4]
10047d86:	681b      	ldr	r3, [r3, #0]
10047d88:	2201      	movs	r2, #1
10047d8a:	4013      	ands	r3, r2
10047d8c:	d004      	beq.n	10047d98 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10047d8e:	687b      	ldr	r3, [r7, #4]
10047d90:	691b      	ldr	r3, [r3, #16]
10047d92:	0018      	movs	r0, r3
10047d94:	f7ff ff58 	bl	10047c48 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10047d98:	687b      	ldr	r3, [r7, #4]
10047d9a:	681b      	ldr	r3, [r3, #0]
10047d9c:	2202      	movs	r2, #2
10047d9e:	4013      	ands	r3, r2
10047da0:	d004      	beq.n	10047dac <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10047da2:	687b      	ldr	r3, [r7, #4]
10047da4:	695b      	ldr	r3, [r3, #20]
10047da6:	0018      	movs	r0, r3
10047da8:	f7ff ff6e 	bl	10047c88 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10047dac:	687b      	ldr	r3, [r7, #4]
10047dae:	681b      	ldr	r3, [r3, #0]
10047db0:	2208      	movs	r2, #8
10047db2:	4013      	ands	r3, r2
10047db4:	d004      	beq.n	10047dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10047db6:	687b      	ldr	r3, [r7, #4]
10047db8:	685b      	ldr	r3, [r3, #4]
10047dba:	0018      	movs	r0, r3
10047dbc:	f7ff ffa8 	bl	10047d10 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10047dc0:	687b      	ldr	r3, [r7, #4]
10047dc2:	681b      	ldr	r3, [r3, #0]
10047dc4:	2210      	movs	r2, #16
10047dc6:	4013      	ands	r3, r2
10047dc8:	d004      	beq.n	10047dd4 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
10047dca:	687b      	ldr	r3, [r7, #4]
10047dcc:	68db      	ldr	r3, [r3, #12]
10047dce:	0018      	movs	r0, r3
10047dd0:	f7ff ff7c 	bl	10047ccc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10047dd4:	687b      	ldr	r3, [r7, #4]
10047dd6:	689b      	ldr	r3, [r3, #8]
10047dd8:	2220      	movs	r2, #32
10047dda:	4013      	ands	r3, r2
10047ddc:	d004      	beq.n	10047de8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10047dde:	687b      	ldr	r3, [r7, #4]
10047de0:	689b      	ldr	r3, [r3, #8]
10047de2:	0018      	movs	r0, r3
10047de4:	f7ff ff0e 	bl	10047c04 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10047de8:	2300      	movs	r3, #0
}
10047dea:	0018      	movs	r0, r3
10047dec:	46bd      	mov	sp, r7
10047dee:	b002      	add	sp, #8
10047df0:	bd80      	pop	{r7, pc}
	...

10047df4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10047df4:	b580      	push	{r7, lr}
10047df6:	b084      	sub	sp, #16
10047df8:	af00      	add	r7, sp, #0
10047dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10047dfc:	2300      	movs	r3, #0
10047dfe:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
10047e00:	687b      	ldr	r3, [r7, #4]
10047e02:	2b20      	cmp	r3, #32
10047e04:	d900      	bls.n	10047e08 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
10047e06:	e07b      	b.n	10047f00 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
10047e08:	687b      	ldr	r3, [r7, #4]
10047e0a:	009a      	lsls	r2, r3, #2
10047e0c:	4b40      	ldr	r3, [pc, #256]	@ (10047f10 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
10047e0e:	18d3      	adds	r3, r2, r3
10047e10:	681b      	ldr	r3, [r3, #0]
10047e12:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10047e14:	f7ff ff2c 	bl	10047c70 <LL_RCC_GetRFClock>
10047e18:	1e03      	subs	r3, r0, #0
10047e1a:	d002      	beq.n	10047e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10047e1c:	2b04      	cmp	r3, #4
10047e1e:	d003      	beq.n	10047e28 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
10047e20:	e071      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
10047e22:	4b3c      	ldr	r3, [pc, #240]	@ (10047f14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10047e24:	60fb      	str	r3, [r7, #12]
          break;
10047e26:	e002      	b.n	10047e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
10047e28:	4b3b      	ldr	r3, [pc, #236]	@ (10047f18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10047e2a:	60fb      	str	r3, [r7, #12]
          break;
10047e2c:	46c0      	nop			@ (mov r8, r8)
      break;
10047e2e:	e06a      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
10047e30:	f7ff ff40 	bl	10047cb4 <LL_RCC_GetSMPSPrescaler>
10047e34:	1e03      	subs	r3, r0, #0
10047e36:	d004      	beq.n	10047e42 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
10047e38:	2280      	movs	r2, #128	@ 0x80
10047e3a:	0152      	lsls	r2, r2, #5
10047e3c:	4293      	cmp	r3, r2
10047e3e:	d003      	beq.n	10047e48 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
10047e40:	e061      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
10047e42:	4b36      	ldr	r3, [pc, #216]	@ (10047f1c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10047e44:	60fb      	str	r3, [r7, #12]
          break;
10047e46:	e002      	b.n	10047e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10047e48:	4b35      	ldr	r3, [pc, #212]	@ (10047f20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
10047e4a:	60fb      	str	r3, [r7, #12]
          break;
10047e4c:	46c0      	nop			@ (mov r8, r8)
      break;
10047e4e:	e05a      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
10047e50:	f7ff fec8 	bl	10047be4 <LL_RCC_DIRECT_HSE_IsEnabled>
10047e54:	1e03      	subs	r3, r0, #0
10047e56:	d005      	beq.n	10047e64 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10047e58:	f7ff feb0 	bl	10047bbc <LL_RCC_HSE_IsReady>
10047e5c:	1e03      	subs	r3, r0, #0
10047e5e:	d107      	bne.n	10047e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10047e60:	2300      	movs	r3, #0
10047e62:	e051      	b.n	10047f08 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10047e64:	f7ff ff76 	bl	10047d54 <LL_RCC_RC64MPLL_IsReady>
10047e68:	1e03      	subs	r3, r0, #0
10047e6a:	d101      	bne.n	10047e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10047e6c:	2300      	movs	r3, #0
10047e6e:	e04b      	b.n	10047f08 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10047e70:	f7ff ff64 	bl	10047d3c <LL_RCC_GetSPI3I2SClockSource>
10047e74:	0003      	movs	r3, r0
10047e76:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10047e78:	68bb      	ldr	r3, [r7, #8]
10047e7a:	2b00      	cmp	r3, #0
10047e7c:	d101      	bne.n	10047e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
10047e7e:	4b26      	ldr	r3, [pc, #152]	@ (10047f18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10047e80:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
10047e82:	68ba      	ldr	r2, [r7, #8]
10047e84:	2380      	movs	r3, #128	@ 0x80
10047e86:	03db      	lsls	r3, r3, #15
10047e88:	429a      	cmp	r2, r3
10047e8a:	d101      	bne.n	10047e90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10047e8c:	4b21      	ldr	r3, [pc, #132]	@ (10047f14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10047e8e:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10047e90:	68ba      	ldr	r2, [r7, #8]
10047e92:	2380      	movs	r3, #128	@ 0x80
10047e94:	041b      	lsls	r3, r3, #16
10047e96:	429a      	cmp	r2, r3
10047e98:	d134      	bne.n	10047f04 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
10047e9a:	4b22      	ldr	r3, [pc, #136]	@ (10047f24 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10047e9c:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10047e9e:	e031      	b.n	10047f04 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10047ea0:	f7ff ff2a 	bl	10047cf8 <LL_RCC_GetLPUARTClockSource>
10047ea4:	0002      	movs	r2, r0
10047ea6:	2380      	movs	r3, #128	@ 0x80
10047ea8:	019b      	lsls	r3, r3, #6
10047eaa:	429a      	cmp	r2, r3
10047eac:	d103      	bne.n	10047eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10047eae:	2380      	movs	r3, #128	@ 0x80
10047eb0:	021b      	lsls	r3, r3, #8
10047eb2:	60fb      	str	r3, [r7, #12]
          break;
10047eb4:	e002      	b.n	10047ebc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
10047eb6:	4b18      	ldr	r3, [pc, #96]	@ (10047f18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10047eb8:	60fb      	str	r3, [r7, #12]
          break;
10047eba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10047ebc:	e023      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10047ebe:	f7ff feb7 	bl	10047c30 <LL_RCC_LSCO_GetSource>
10047ec2:	0003      	movs	r3, r0
10047ec4:	22c0      	movs	r2, #192	@ 0xc0
10047ec6:	0252      	lsls	r2, r2, #9
10047ec8:	4293      	cmp	r3, r2
10047eca:	d014      	beq.n	10047ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10047ecc:	22c0      	movs	r2, #192	@ 0xc0
10047ece:	0252      	lsls	r2, r2, #9
10047ed0:	4293      	cmp	r3, r2
10047ed2:	d813      	bhi.n	10047efc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10047ed4:	2280      	movs	r2, #128	@ 0x80
10047ed6:	0212      	lsls	r2, r2, #8
10047ed8:	4293      	cmp	r3, r2
10047eda:	d004      	beq.n	10047ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10047edc:	2280      	movs	r2, #128	@ 0x80
10047ede:	0252      	lsls	r2, r2, #9
10047ee0:	4293      	cmp	r3, r2
10047ee2:	d004      	beq.n	10047eee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10047ee4:	e00a      	b.n	10047efc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
10047ee6:	2380      	movs	r3, #128	@ 0x80
10047ee8:	021b      	lsls	r3, r3, #8
10047eea:	60fb      	str	r3, [r7, #12]
          break;
10047eec:	e007      	b.n	10047efe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10047eee:	23fa      	movs	r3, #250	@ 0xfa
10047ef0:	01db      	lsls	r3, r3, #7
10047ef2:	60fb      	str	r3, [r7, #12]
          break;
10047ef4:	e003      	b.n	10047efe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
10047ef6:	4b0c      	ldr	r3, [pc, #48]	@ (10047f28 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
10047ef8:	60fb      	str	r3, [r7, #12]
          break;
10047efa:	e000      	b.n	10047efe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10047efc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10047efe:	e002      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
10047f00:	46c0      	nop			@ (mov r8, r8)
10047f02:	e000      	b.n	10047f06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
10047f04:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
10047f06:	68fb      	ldr	r3, [r7, #12]
}
10047f08:	0018      	movs	r0, r3
10047f0a:	46bd      	mov	sp, r7
10047f0c:	b004      	add	sp, #16
10047f0e:	bd80      	pop	{r7, pc}
10047f10:	1004a638 	.word	0x1004a638
10047f14:	01e84800 	.word	0x01e84800
10047f18:	00f42400 	.word	0x00f42400
10047f1c:	007a1200 	.word	0x007a1200
10047f20:	003d0900 	.word	0x003d0900
10047f24:	03d09000 	.word	0x03d09000
10047f28:	00007a12 	.word	0x00007a12

10047f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
10047f2c:	b580      	push	{r7, lr}
10047f2e:	b082      	sub	sp, #8
10047f30:	af00      	add	r7, sp, #0
10047f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
10047f34:	687b      	ldr	r3, [r7, #4]
10047f36:	2b00      	cmp	r3, #0
10047f38:	d101      	bne.n	10047f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
10047f3a:	2301      	movs	r3, #1
10047f3c:	e036      	b.n	10047fac <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
10047f3e:	687b      	ldr	r3, [r7, #4]
10047f40:	2235      	movs	r2, #53	@ 0x35
10047f42:	5c9b      	ldrb	r3, [r3, r2]
10047f44:	b2db      	uxtb	r3, r3
10047f46:	2b00      	cmp	r3, #0
10047f48:	d107      	bne.n	10047f5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
10047f4a:	687b      	ldr	r3, [r7, #4]
10047f4c:	2234      	movs	r2, #52	@ 0x34
10047f4e:	2100      	movs	r1, #0
10047f50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
10047f52:	687b      	ldr	r3, [r7, #4]
10047f54:	0018      	movs	r0, r3
10047f56:	f7fb fba5 	bl	100436a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
10047f5a:	687b      	ldr	r3, [r7, #4]
10047f5c:	2235      	movs	r2, #53	@ 0x35
10047f5e:	2102      	movs	r1, #2
10047f60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10047f62:	687b      	ldr	r3, [r7, #4]
10047f64:	681a      	ldr	r2, [r3, #0]
10047f66:	687b      	ldr	r3, [r7, #4]
10047f68:	3304      	adds	r3, #4
10047f6a:	0019      	movs	r1, r3
10047f6c:	0010      	movs	r0, r2
10047f6e:	f000 fa39 	bl	100483e4 <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
10047f72:	687b      	ldr	r3, [r7, #4]
10047f74:	223b      	movs	r2, #59	@ 0x3b
10047f76:	2101      	movs	r1, #1
10047f78:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
10047f7a:	687b      	ldr	r3, [r7, #4]
10047f7c:	2236      	movs	r2, #54	@ 0x36
10047f7e:	2101      	movs	r1, #1
10047f80:	5499      	strb	r1, [r3, r2]
10047f82:	687b      	ldr	r3, [r7, #4]
10047f84:	2237      	movs	r2, #55	@ 0x37
10047f86:	2101      	movs	r1, #1
10047f88:	5499      	strb	r1, [r3, r2]
10047f8a:	687b      	ldr	r3, [r7, #4]
10047f8c:	2238      	movs	r2, #56	@ 0x38
10047f8e:	2101      	movs	r1, #1
10047f90:	5499      	strb	r1, [r3, r2]
10047f92:	687b      	ldr	r3, [r7, #4]
10047f94:	2239      	movs	r2, #57	@ 0x39
10047f96:	2101      	movs	r1, #1
10047f98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
10047f9a:	687b      	ldr	r3, [r7, #4]
10047f9c:	223a      	movs	r2, #58	@ 0x3a
10047f9e:	2101      	movs	r1, #1
10047fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10047fa2:	687b      	ldr	r3, [r7, #4]
10047fa4:	2235      	movs	r2, #53	@ 0x35
10047fa6:	2101      	movs	r1, #1
10047fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10047faa:	2300      	movs	r3, #0
}
10047fac:	0018      	movs	r0, r3
10047fae:	46bd      	mov	sp, r7
10047fb0:	b002      	add	sp, #8
10047fb2:	bd80      	pop	{r7, pc}

10047fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
10047fb4:	b580      	push	{r7, lr}
10047fb6:	b084      	sub	sp, #16
10047fb8:	af00      	add	r7, sp, #0
10047fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
10047fbc:	687b      	ldr	r3, [r7, #4]
10047fbe:	2235      	movs	r2, #53	@ 0x35
10047fc0:	5c9b      	ldrb	r3, [r3, r2]
10047fc2:	b2db      	uxtb	r3, r3
10047fc4:	2b01      	cmp	r3, #1
10047fc6:	d001      	beq.n	10047fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
10047fc8:	2301      	movs	r3, #1
10047fca:	e030      	b.n	1004802e <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
10047fcc:	687b      	ldr	r3, [r7, #4]
10047fce:	2235      	movs	r2, #53	@ 0x35
10047fd0:	2102      	movs	r1, #2
10047fd2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
10047fd4:	687b      	ldr	r3, [r7, #4]
10047fd6:	681b      	ldr	r3, [r3, #0]
10047fd8:	68da      	ldr	r2, [r3, #12]
10047fda:	687b      	ldr	r3, [r7, #4]
10047fdc:	681b      	ldr	r3, [r3, #0]
10047fde:	2101      	movs	r1, #1
10047fe0:	430a      	orrs	r2, r1
10047fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
10047fe4:	687b      	ldr	r3, [r7, #4]
10047fe6:	681b      	ldr	r3, [r3, #0]
10047fe8:	4a13      	ldr	r2, [pc, #76]	@ (10048038 <HAL_TIM_Base_Start_IT+0x84>)
10047fea:	4293      	cmp	r3, r2
10047fec:	d116      	bne.n	1004801c <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
10047fee:	687b      	ldr	r3, [r7, #4]
10047ff0:	681b      	ldr	r3, [r3, #0]
10047ff2:	689b      	ldr	r3, [r3, #8]
10047ff4:	4a11      	ldr	r2, [pc, #68]	@ (1004803c <HAL_TIM_Base_Start_IT+0x88>)
10047ff6:	4013      	ands	r3, r2
10047ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
10047ffa:	68fb      	ldr	r3, [r7, #12]
10047ffc:	2b06      	cmp	r3, #6
10047ffe:	d015      	beq.n	1004802c <HAL_TIM_Base_Start_IT+0x78>
10048000:	68fa      	ldr	r2, [r7, #12]
10048002:	2380      	movs	r3, #128	@ 0x80
10048004:	025b      	lsls	r3, r3, #9
10048006:	429a      	cmp	r2, r3
10048008:	d010      	beq.n	1004802c <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004800a:	687b      	ldr	r3, [r7, #4]
1004800c:	681b      	ldr	r3, [r3, #0]
1004800e:	681a      	ldr	r2, [r3, #0]
10048010:	687b      	ldr	r3, [r7, #4]
10048012:	681b      	ldr	r3, [r3, #0]
10048014:	2101      	movs	r1, #1
10048016:	430a      	orrs	r2, r1
10048018:	601a      	str	r2, [r3, #0]
1004801a:	e007      	b.n	1004802c <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004801c:	687b      	ldr	r3, [r7, #4]
1004801e:	681b      	ldr	r3, [r3, #0]
10048020:	681a      	ldr	r2, [r3, #0]
10048022:	687b      	ldr	r3, [r7, #4]
10048024:	681b      	ldr	r3, [r3, #0]
10048026:	2101      	movs	r1, #1
10048028:	430a      	orrs	r2, r1
1004802a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004802c:	2300      	movs	r3, #0
}
1004802e:	0018      	movs	r0, r3
10048030:	46bd      	mov	sp, r7
10048032:	b004      	add	sp, #16
10048034:	bd80      	pop	{r7, pc}
10048036:	46c0      	nop			@ (mov r8, r8)
10048038:	40002000 	.word	0x40002000
1004803c:	00010007 	.word	0x00010007

10048040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
10048040:	b580      	push	{r7, lr}
10048042:	b084      	sub	sp, #16
10048044:	af00      	add	r7, sp, #0
10048046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
10048048:	687b      	ldr	r3, [r7, #4]
1004804a:	681b      	ldr	r3, [r3, #0]
1004804c:	68db      	ldr	r3, [r3, #12]
1004804e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
10048050:	687b      	ldr	r3, [r7, #4]
10048052:	681b      	ldr	r3, [r3, #0]
10048054:	691b      	ldr	r3, [r3, #16]
10048056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
10048058:	68bb      	ldr	r3, [r7, #8]
1004805a:	2202      	movs	r2, #2
1004805c:	4013      	ands	r3, r2
1004805e:	d021      	beq.n	100480a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
10048060:	68fb      	ldr	r3, [r7, #12]
10048062:	2202      	movs	r2, #2
10048064:	4013      	ands	r3, r2
10048066:	d01d      	beq.n	100480a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
10048068:	687b      	ldr	r3, [r7, #4]
1004806a:	681b      	ldr	r3, [r3, #0]
1004806c:	2203      	movs	r2, #3
1004806e:	4252      	negs	r2, r2
10048070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
10048072:	687b      	ldr	r3, [r7, #4]
10048074:	2201      	movs	r2, #1
10048076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
10048078:	687b      	ldr	r3, [r7, #4]
1004807a:	681b      	ldr	r3, [r3, #0]
1004807c:	699b      	ldr	r3, [r3, #24]
1004807e:	2203      	movs	r2, #3
10048080:	4013      	ands	r3, r2
10048082:	d004      	beq.n	1004808e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
10048084:	687b      	ldr	r3, [r7, #4]
10048086:	0018      	movs	r0, r3
10048088:	f000 f994 	bl	100483b4 <HAL_TIM_IC_CaptureCallback>
1004808c:	e007      	b.n	1004809e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004808e:	687b      	ldr	r3, [r7, #4]
10048090:	0018      	movs	r0, r3
10048092:	f000 f987 	bl	100483a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
10048096:	687b      	ldr	r3, [r7, #4]
10048098:	0018      	movs	r0, r3
1004809a:	f000 f993 	bl	100483c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004809e:	687b      	ldr	r3, [r7, #4]
100480a0:	2200      	movs	r2, #0
100480a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
100480a4:	68bb      	ldr	r3, [r7, #8]
100480a6:	2204      	movs	r2, #4
100480a8:	4013      	ands	r3, r2
100480aa:	d022      	beq.n	100480f2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
100480ac:	68fb      	ldr	r3, [r7, #12]
100480ae:	2204      	movs	r2, #4
100480b0:	4013      	ands	r3, r2
100480b2:	d01e      	beq.n	100480f2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
100480b4:	687b      	ldr	r3, [r7, #4]
100480b6:	681b      	ldr	r3, [r3, #0]
100480b8:	2205      	movs	r2, #5
100480ba:	4252      	negs	r2, r2
100480bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
100480be:	687b      	ldr	r3, [r7, #4]
100480c0:	2202      	movs	r2, #2
100480c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
100480c4:	687b      	ldr	r3, [r7, #4]
100480c6:	681b      	ldr	r3, [r3, #0]
100480c8:	699a      	ldr	r2, [r3, #24]
100480ca:	23c0      	movs	r3, #192	@ 0xc0
100480cc:	009b      	lsls	r3, r3, #2
100480ce:	4013      	ands	r3, r2
100480d0:	d004      	beq.n	100480dc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
100480d2:	687b      	ldr	r3, [r7, #4]
100480d4:	0018      	movs	r0, r3
100480d6:	f000 f96d 	bl	100483b4 <HAL_TIM_IC_CaptureCallback>
100480da:	e007      	b.n	100480ec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
100480dc:	687b      	ldr	r3, [r7, #4]
100480de:	0018      	movs	r0, r3
100480e0:	f000 f960 	bl	100483a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
100480e4:	687b      	ldr	r3, [r7, #4]
100480e6:	0018      	movs	r0, r3
100480e8:	f000 f96c 	bl	100483c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100480ec:	687b      	ldr	r3, [r7, #4]
100480ee:	2200      	movs	r2, #0
100480f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
100480f2:	68bb      	ldr	r3, [r7, #8]
100480f4:	2208      	movs	r2, #8
100480f6:	4013      	ands	r3, r2
100480f8:	d021      	beq.n	1004813e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
100480fa:	68fb      	ldr	r3, [r7, #12]
100480fc:	2208      	movs	r2, #8
100480fe:	4013      	ands	r3, r2
10048100:	d01d      	beq.n	1004813e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
10048102:	687b      	ldr	r3, [r7, #4]
10048104:	681b      	ldr	r3, [r3, #0]
10048106:	2209      	movs	r2, #9
10048108:	4252      	negs	r2, r2
1004810a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004810c:	687b      	ldr	r3, [r7, #4]
1004810e:	2204      	movs	r2, #4
10048110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
10048112:	687b      	ldr	r3, [r7, #4]
10048114:	681b      	ldr	r3, [r3, #0]
10048116:	69db      	ldr	r3, [r3, #28]
10048118:	2203      	movs	r2, #3
1004811a:	4013      	ands	r3, r2
1004811c:	d004      	beq.n	10048128 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004811e:	687b      	ldr	r3, [r7, #4]
10048120:	0018      	movs	r0, r3
10048122:	f000 f947 	bl	100483b4 <HAL_TIM_IC_CaptureCallback>
10048126:	e007      	b.n	10048138 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
10048128:	687b      	ldr	r3, [r7, #4]
1004812a:	0018      	movs	r0, r3
1004812c:	f000 f93a 	bl	100483a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10048130:	687b      	ldr	r3, [r7, #4]
10048132:	0018      	movs	r0, r3
10048134:	f000 f946 	bl	100483c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10048138:	687b      	ldr	r3, [r7, #4]
1004813a:	2200      	movs	r2, #0
1004813c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004813e:	68bb      	ldr	r3, [r7, #8]
10048140:	2210      	movs	r2, #16
10048142:	4013      	ands	r3, r2
10048144:	d022      	beq.n	1004818c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
10048146:	68fb      	ldr	r3, [r7, #12]
10048148:	2210      	movs	r2, #16
1004814a:	4013      	ands	r3, r2
1004814c:	d01e      	beq.n	1004818c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004814e:	687b      	ldr	r3, [r7, #4]
10048150:	681b      	ldr	r3, [r3, #0]
10048152:	2211      	movs	r2, #17
10048154:	4252      	negs	r2, r2
10048156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
10048158:	687b      	ldr	r3, [r7, #4]
1004815a:	2208      	movs	r2, #8
1004815c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004815e:	687b      	ldr	r3, [r7, #4]
10048160:	681b      	ldr	r3, [r3, #0]
10048162:	69da      	ldr	r2, [r3, #28]
10048164:	23c0      	movs	r3, #192	@ 0xc0
10048166:	009b      	lsls	r3, r3, #2
10048168:	4013      	ands	r3, r2
1004816a:	d004      	beq.n	10048176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004816c:	687b      	ldr	r3, [r7, #4]
1004816e:	0018      	movs	r0, r3
10048170:	f000 f920 	bl	100483b4 <HAL_TIM_IC_CaptureCallback>
10048174:	e007      	b.n	10048186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
10048176:	687b      	ldr	r3, [r7, #4]
10048178:	0018      	movs	r0, r3
1004817a:	f000 f913 	bl	100483a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004817e:	687b      	ldr	r3, [r7, #4]
10048180:	0018      	movs	r0, r3
10048182:	f000 f91f 	bl	100483c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10048186:	687b      	ldr	r3, [r7, #4]
10048188:	2200      	movs	r2, #0
1004818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004818c:	68bb      	ldr	r3, [r7, #8]
1004818e:	2201      	movs	r2, #1
10048190:	4013      	ands	r3, r2
10048192:	d00c      	beq.n	100481ae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
10048194:	68fb      	ldr	r3, [r7, #12]
10048196:	2201      	movs	r2, #1
10048198:	4013      	ands	r3, r2
1004819a:	d008      	beq.n	100481ae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004819c:	687b      	ldr	r3, [r7, #4]
1004819e:	681b      	ldr	r3, [r3, #0]
100481a0:	2202      	movs	r2, #2
100481a2:	4252      	negs	r2, r2
100481a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
100481a6:	687b      	ldr	r3, [r7, #4]
100481a8:	0018      	movs	r0, r3
100481aa:	f000 f8f3 	bl	10048394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
100481ae:	68bb      	ldr	r3, [r7, #8]
100481b0:	2280      	movs	r2, #128	@ 0x80
100481b2:	4013      	ands	r3, r2
100481b4:	d00c      	beq.n	100481d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
100481b6:	68fb      	ldr	r3, [r7, #12]
100481b8:	2280      	movs	r2, #128	@ 0x80
100481ba:	4013      	ands	r3, r2
100481bc:	d008      	beq.n	100481d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
100481be:	687b      	ldr	r3, [r7, #4]
100481c0:	681b      	ldr	r3, [r3, #0]
100481c2:	2281      	movs	r2, #129	@ 0x81
100481c4:	4252      	negs	r2, r2
100481c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
100481c8:	687b      	ldr	r3, [r7, #4]
100481ca:	0018      	movs	r0, r3
100481cc:	f000 fa08 	bl	100485e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
100481d0:	68bb      	ldr	r3, [r7, #8]
100481d2:	2240      	movs	r2, #64	@ 0x40
100481d4:	4013      	ands	r3, r2
100481d6:	d00c      	beq.n	100481f2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
100481d8:	68fb      	ldr	r3, [r7, #12]
100481da:	2240      	movs	r2, #64	@ 0x40
100481dc:	4013      	ands	r3, r2
100481de:	d008      	beq.n	100481f2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
100481e0:	687b      	ldr	r3, [r7, #4]
100481e2:	681b      	ldr	r3, [r3, #0]
100481e4:	2241      	movs	r2, #65	@ 0x41
100481e6:	4252      	negs	r2, r2
100481e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
100481ea:	687b      	ldr	r3, [r7, #4]
100481ec:	0018      	movs	r0, r3
100481ee:	f000 f8f1 	bl	100483d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
100481f2:	68bb      	ldr	r3, [r7, #8]
100481f4:	2220      	movs	r2, #32
100481f6:	4013      	ands	r3, r2
100481f8:	d00c      	beq.n	10048214 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
100481fa:	68fb      	ldr	r3, [r7, #12]
100481fc:	2220      	movs	r2, #32
100481fe:	4013      	ands	r3, r2
10048200:	d008      	beq.n	10048214 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
10048202:	687b      	ldr	r3, [r7, #4]
10048204:	681b      	ldr	r3, [r3, #0]
10048206:	2221      	movs	r2, #33	@ 0x21
10048208:	4252      	negs	r2, r2
1004820a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004820c:	687b      	ldr	r3, [r7, #4]
1004820e:	0018      	movs	r0, r3
10048210:	f000 f9de 	bl	100485d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
10048214:	46c0      	nop			@ (mov r8, r8)
10048216:	46bd      	mov	sp, r7
10048218:	b004      	add	sp, #16
1004821a:	bd80      	pop	{r7, pc}

1004821c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004821c:	b580      	push	{r7, lr}
1004821e:	b084      	sub	sp, #16
10048220:	af00      	add	r7, sp, #0
10048222:	6078      	str	r0, [r7, #4]
10048224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10048226:	230f      	movs	r3, #15
10048228:	18fb      	adds	r3, r7, r3
1004822a:	2200      	movs	r2, #0
1004822c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004822e:	687b      	ldr	r3, [r7, #4]
10048230:	2234      	movs	r2, #52	@ 0x34
10048232:	5c9b      	ldrb	r3, [r3, r2]
10048234:	2b01      	cmp	r3, #1
10048236:	d101      	bne.n	1004823c <HAL_TIM_ConfigClockSource+0x20>
10048238:	2302      	movs	r3, #2
1004823a:	e0a2      	b.n	10048382 <HAL_TIM_ConfigClockSource+0x166>
1004823c:	687b      	ldr	r3, [r7, #4]
1004823e:	2234      	movs	r2, #52	@ 0x34
10048240:	2101      	movs	r1, #1
10048242:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
10048244:	687b      	ldr	r3, [r7, #4]
10048246:	2235      	movs	r2, #53	@ 0x35
10048248:	2102      	movs	r1, #2
1004824a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004824c:	687b      	ldr	r3, [r7, #4]
1004824e:	681b      	ldr	r3, [r3, #0]
10048250:	689b      	ldr	r3, [r3, #8]
10048252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
10048254:	68bb      	ldr	r3, [r7, #8]
10048256:	4a4d      	ldr	r2, [pc, #308]	@ (1004838c <HAL_TIM_ConfigClockSource+0x170>)
10048258:	4013      	ands	r3, r2
1004825a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004825c:	68bb      	ldr	r3, [r7, #8]
1004825e:	4a4c      	ldr	r2, [pc, #304]	@ (10048390 <HAL_TIM_ConfigClockSource+0x174>)
10048260:	4013      	ands	r3, r2
10048262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
10048264:	687b      	ldr	r3, [r7, #4]
10048266:	681b      	ldr	r3, [r3, #0]
10048268:	68ba      	ldr	r2, [r7, #8]
1004826a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004826c:	683b      	ldr	r3, [r7, #0]
1004826e:	681b      	ldr	r3, [r3, #0]
10048270:	2280      	movs	r2, #128	@ 0x80
10048272:	0192      	lsls	r2, r2, #6
10048274:	4293      	cmp	r3, r2
10048276:	d02f      	beq.n	100482d8 <HAL_TIM_ConfigClockSource+0xbc>
10048278:	2280      	movs	r2, #128	@ 0x80
1004827a:	0192      	lsls	r2, r2, #6
1004827c:	4293      	cmp	r3, r2
1004827e:	d900      	bls.n	10048282 <HAL_TIM_ConfigClockSource+0x66>
10048280:	e06e      	b.n	10048360 <HAL_TIM_ConfigClockSource+0x144>
10048282:	2280      	movs	r2, #128	@ 0x80
10048284:	0152      	lsls	r2, r2, #5
10048286:	4293      	cmp	r3, r2
10048288:	d100      	bne.n	1004828c <HAL_TIM_ConfigClockSource+0x70>
1004828a:	e06e      	b.n	1004836a <HAL_TIM_ConfigClockSource+0x14e>
1004828c:	2280      	movs	r2, #128	@ 0x80
1004828e:	0152      	lsls	r2, r2, #5
10048290:	4293      	cmp	r3, r2
10048292:	d865      	bhi.n	10048360 <HAL_TIM_ConfigClockSource+0x144>
10048294:	2b70      	cmp	r3, #112	@ 0x70
10048296:	d008      	beq.n	100482aa <HAL_TIM_ConfigClockSource+0x8e>
10048298:	d862      	bhi.n	10048360 <HAL_TIM_ConfigClockSource+0x144>
1004829a:	2b60      	cmp	r3, #96	@ 0x60
1004829c:	d040      	beq.n	10048320 <HAL_TIM_ConfigClockSource+0x104>
1004829e:	d85f      	bhi.n	10048360 <HAL_TIM_ConfigClockSource+0x144>
100482a0:	2b40      	cmp	r3, #64	@ 0x40
100482a2:	d04d      	beq.n	10048340 <HAL_TIM_ConfigClockSource+0x124>
100482a4:	2b50      	cmp	r3, #80	@ 0x50
100482a6:	d02b      	beq.n	10048300 <HAL_TIM_ConfigClockSource+0xe4>
100482a8:	e05a      	b.n	10048360 <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
100482aa:	687b      	ldr	r3, [r7, #4]
100482ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
100482ae:	683b      	ldr	r3, [r7, #0]
100482b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
100482b2:	683b      	ldr	r3, [r7, #0]
100482b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
100482b6:	683b      	ldr	r3, [r7, #0]
100482b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
100482ba:	f000 f969 	bl	10048590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
100482be:	687b      	ldr	r3, [r7, #4]
100482c0:	681b      	ldr	r3, [r3, #0]
100482c2:	689b      	ldr	r3, [r3, #8]
100482c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
100482c6:	68bb      	ldr	r3, [r7, #8]
100482c8:	2277      	movs	r2, #119	@ 0x77
100482ca:	4313      	orrs	r3, r2
100482cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
100482ce:	687b      	ldr	r3, [r7, #4]
100482d0:	681b      	ldr	r3, [r3, #0]
100482d2:	68ba      	ldr	r2, [r7, #8]
100482d4:	609a      	str	r2, [r3, #8]
      break;
100482d6:	e049      	b.n	1004836c <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
100482d8:	687b      	ldr	r3, [r7, #4]
100482da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
100482dc:	683b      	ldr	r3, [r7, #0]
100482de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
100482e0:	683b      	ldr	r3, [r7, #0]
100482e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
100482e4:	683b      	ldr	r3, [r7, #0]
100482e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
100482e8:	f000 f952 	bl	10048590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
100482ec:	687b      	ldr	r3, [r7, #4]
100482ee:	681b      	ldr	r3, [r3, #0]
100482f0:	689a      	ldr	r2, [r3, #8]
100482f2:	687b      	ldr	r3, [r7, #4]
100482f4:	681b      	ldr	r3, [r3, #0]
100482f6:	2180      	movs	r1, #128	@ 0x80
100482f8:	01c9      	lsls	r1, r1, #7
100482fa:	430a      	orrs	r2, r1
100482fc:	609a      	str	r2, [r3, #8]
      break;
100482fe:	e035      	b.n	1004836c <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
10048300:	687b      	ldr	r3, [r7, #4]
10048302:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
10048304:	683b      	ldr	r3, [r7, #0]
10048306:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
10048308:	683b      	ldr	r3, [r7, #0]
1004830a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004830c:	001a      	movs	r2, r3
1004830e:	f000 f8c5 	bl	1004849c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
10048312:	687b      	ldr	r3, [r7, #4]
10048314:	681b      	ldr	r3, [r3, #0]
10048316:	2150      	movs	r1, #80	@ 0x50
10048318:	0018      	movs	r0, r3
1004831a:	f000 f91f 	bl	1004855c <TIM_ITRx_SetConfig>
      break;
1004831e:	e025      	b.n	1004836c <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
10048320:	687b      	ldr	r3, [r7, #4]
10048322:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
10048324:	683b      	ldr	r3, [r7, #0]
10048326:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
10048328:	683b      	ldr	r3, [r7, #0]
1004832a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004832c:	001a      	movs	r2, r3
1004832e:	f000 f8e3 	bl	100484f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
10048332:	687b      	ldr	r3, [r7, #4]
10048334:	681b      	ldr	r3, [r3, #0]
10048336:	2160      	movs	r1, #96	@ 0x60
10048338:	0018      	movs	r0, r3
1004833a:	f000 f90f 	bl	1004855c <TIM_ITRx_SetConfig>
      break;
1004833e:	e015      	b.n	1004836c <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
10048340:	687b      	ldr	r3, [r7, #4]
10048342:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
10048344:	683b      	ldr	r3, [r7, #0]
10048346:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
10048348:	683b      	ldr	r3, [r7, #0]
1004834a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004834c:	001a      	movs	r2, r3
1004834e:	f000 f8a5 	bl	1004849c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
10048352:	687b      	ldr	r3, [r7, #4]
10048354:	681b      	ldr	r3, [r3, #0]
10048356:	2140      	movs	r1, #64	@ 0x40
10048358:	0018      	movs	r0, r3
1004835a:	f000 f8ff 	bl	1004855c <TIM_ITRx_SetConfig>
      break;
1004835e:	e005      	b.n	1004836c <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
10048360:	230f      	movs	r3, #15
10048362:	18fb      	adds	r3, r7, r3
10048364:	2201      	movs	r2, #1
10048366:	701a      	strb	r2, [r3, #0]
      break;
10048368:	e000      	b.n	1004836c <HAL_TIM_ConfigClockSource+0x150>
      break;
1004836a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004836c:	687b      	ldr	r3, [r7, #4]
1004836e:	2235      	movs	r2, #53	@ 0x35
10048370:	2101      	movs	r1, #1
10048372:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
10048374:	687b      	ldr	r3, [r7, #4]
10048376:	2234      	movs	r2, #52	@ 0x34
10048378:	2100      	movs	r1, #0
1004837a:	5499      	strb	r1, [r3, r2]

  return status;
1004837c:	230f      	movs	r3, #15
1004837e:	18fb      	adds	r3, r7, r3
10048380:	781b      	ldrb	r3, [r3, #0]
}
10048382:	0018      	movs	r0, r3
10048384:	46bd      	mov	sp, r7
10048386:	b004      	add	sp, #16
10048388:	bd80      	pop	{r7, pc}
1004838a:	46c0      	nop			@ (mov r8, r8)
1004838c:	fffeff88 	.word	0xfffeff88
10048390:	ffff00ff 	.word	0xffff00ff

10048394 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
10048394:	b580      	push	{r7, lr}
10048396:	b082      	sub	sp, #8
10048398:	af00      	add	r7, sp, #0
1004839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004839c:	46c0      	nop			@ (mov r8, r8)
1004839e:	46bd      	mov	sp, r7
100483a0:	b002      	add	sp, #8
100483a2:	bd80      	pop	{r7, pc}

100483a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
100483a4:	b580      	push	{r7, lr}
100483a6:	b082      	sub	sp, #8
100483a8:	af00      	add	r7, sp, #0
100483aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
100483ac:	46c0      	nop			@ (mov r8, r8)
100483ae:	46bd      	mov	sp, r7
100483b0:	b002      	add	sp, #8
100483b2:	bd80      	pop	{r7, pc}

100483b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
100483b4:	b580      	push	{r7, lr}
100483b6:	b082      	sub	sp, #8
100483b8:	af00      	add	r7, sp, #0
100483ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
100483bc:	46c0      	nop			@ (mov r8, r8)
100483be:	46bd      	mov	sp, r7
100483c0:	b002      	add	sp, #8
100483c2:	bd80      	pop	{r7, pc}

100483c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
100483c4:	b580      	push	{r7, lr}
100483c6:	b082      	sub	sp, #8
100483c8:	af00      	add	r7, sp, #0
100483ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
100483cc:	46c0      	nop			@ (mov r8, r8)
100483ce:	46bd      	mov	sp, r7
100483d0:	b002      	add	sp, #8
100483d2:	bd80      	pop	{r7, pc}

100483d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
100483d4:	b580      	push	{r7, lr}
100483d6:	b082      	sub	sp, #8
100483d8:	af00      	add	r7, sp, #0
100483da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
100483dc:	46c0      	nop			@ (mov r8, r8)
100483de:	46bd      	mov	sp, r7
100483e0:	b002      	add	sp, #8
100483e2:	bd80      	pop	{r7, pc}

100483e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
100483e4:	b580      	push	{r7, lr}
100483e6:	b084      	sub	sp, #16
100483e8:	af00      	add	r7, sp, #0
100483ea:	6078      	str	r0, [r7, #4]
100483ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
100483ee:	687b      	ldr	r3, [r7, #4]
100483f0:	681b      	ldr	r3, [r3, #0]
100483f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
100483f4:	687b      	ldr	r3, [r7, #4]
100483f6:	4a25      	ldr	r2, [pc, #148]	@ (1004848c <TIM_Base_SetConfig+0xa8>)
100483f8:	4293      	cmp	r3, r2
100483fa:	d108      	bne.n	1004840e <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
100483fc:	68fb      	ldr	r3, [r7, #12]
100483fe:	2270      	movs	r2, #112	@ 0x70
10048400:	4393      	bics	r3, r2
10048402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
10048404:	683b      	ldr	r3, [r7, #0]
10048406:	685b      	ldr	r3, [r3, #4]
10048408:	68fa      	ldr	r2, [r7, #12]
1004840a:	4313      	orrs	r3, r2
1004840c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004840e:	687b      	ldr	r3, [r7, #4]
10048410:	4a1e      	ldr	r2, [pc, #120]	@ (1004848c <TIM_Base_SetConfig+0xa8>)
10048412:	4293      	cmp	r3, r2
10048414:	d007      	beq.n	10048426 <TIM_Base_SetConfig+0x42>
10048416:	687b      	ldr	r3, [r7, #4]
10048418:	4a1d      	ldr	r2, [pc, #116]	@ (10048490 <TIM_Base_SetConfig+0xac>)
1004841a:	4293      	cmp	r3, r2
1004841c:	d003      	beq.n	10048426 <TIM_Base_SetConfig+0x42>
1004841e:	687b      	ldr	r3, [r7, #4]
10048420:	4a1c      	ldr	r2, [pc, #112]	@ (10048494 <TIM_Base_SetConfig+0xb0>)
10048422:	4293      	cmp	r3, r2
10048424:	d108      	bne.n	10048438 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
10048426:	68fb      	ldr	r3, [r7, #12]
10048428:	4a1b      	ldr	r2, [pc, #108]	@ (10048498 <TIM_Base_SetConfig+0xb4>)
1004842a:	4013      	ands	r3, r2
1004842c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004842e:	683b      	ldr	r3, [r7, #0]
10048430:	68db      	ldr	r3, [r3, #12]
10048432:	68fa      	ldr	r2, [r7, #12]
10048434:	4313      	orrs	r3, r2
10048436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
10048438:	68fb      	ldr	r3, [r7, #12]
1004843a:	2280      	movs	r2, #128	@ 0x80
1004843c:	4393      	bics	r3, r2
1004843e:	001a      	movs	r2, r3
10048440:	683b      	ldr	r3, [r7, #0]
10048442:	695b      	ldr	r3, [r3, #20]
10048444:	4313      	orrs	r3, r2
10048446:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
10048448:	687b      	ldr	r3, [r7, #4]
1004844a:	68fa      	ldr	r2, [r7, #12]
1004844c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004844e:	683b      	ldr	r3, [r7, #0]
10048450:	689a      	ldr	r2, [r3, #8]
10048452:	687b      	ldr	r3, [r7, #4]
10048454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
10048456:	683b      	ldr	r3, [r7, #0]
10048458:	681a      	ldr	r2, [r3, #0]
1004845a:	687b      	ldr	r3, [r7, #4]
1004845c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004845e:	687b      	ldr	r3, [r7, #4]
10048460:	4a0a      	ldr	r2, [pc, #40]	@ (1004848c <TIM_Base_SetConfig+0xa8>)
10048462:	4293      	cmp	r3, r2
10048464:	d007      	beq.n	10048476 <TIM_Base_SetConfig+0x92>
10048466:	687b      	ldr	r3, [r7, #4]
10048468:	4a09      	ldr	r2, [pc, #36]	@ (10048490 <TIM_Base_SetConfig+0xac>)
1004846a:	4293      	cmp	r3, r2
1004846c:	d003      	beq.n	10048476 <TIM_Base_SetConfig+0x92>
1004846e:	687b      	ldr	r3, [r7, #4]
10048470:	4a08      	ldr	r2, [pc, #32]	@ (10048494 <TIM_Base_SetConfig+0xb0>)
10048472:	4293      	cmp	r3, r2
10048474:	d103      	bne.n	1004847e <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
10048476:	683b      	ldr	r3, [r7, #0]
10048478:	691a      	ldr	r2, [r3, #16]
1004847a:	687b      	ldr	r3, [r7, #4]
1004847c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004847e:	687b      	ldr	r3, [r7, #4]
10048480:	2201      	movs	r2, #1
10048482:	615a      	str	r2, [r3, #20]
}
10048484:	46c0      	nop			@ (mov r8, r8)
10048486:	46bd      	mov	sp, r7
10048488:	b004      	add	sp, #16
1004848a:	bd80      	pop	{r7, pc}
1004848c:	40002000 	.word	0x40002000
10048490:	40005000 	.word	0x40005000
10048494:	40006000 	.word	0x40006000
10048498:	fffffcff 	.word	0xfffffcff

1004849c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004849c:	b580      	push	{r7, lr}
1004849e:	b086      	sub	sp, #24
100484a0:	af00      	add	r7, sp, #0
100484a2:	60f8      	str	r0, [r7, #12]
100484a4:	60b9      	str	r1, [r7, #8]
100484a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
100484a8:	68fb      	ldr	r3, [r7, #12]
100484aa:	6a1b      	ldr	r3, [r3, #32]
100484ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
100484ae:	68fb      	ldr	r3, [r7, #12]
100484b0:	6a1b      	ldr	r3, [r3, #32]
100484b2:	2201      	movs	r2, #1
100484b4:	4393      	bics	r3, r2
100484b6:	001a      	movs	r2, r3
100484b8:	68fb      	ldr	r3, [r7, #12]
100484ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
100484bc:	68fb      	ldr	r3, [r7, #12]
100484be:	699b      	ldr	r3, [r3, #24]
100484c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
100484c2:	693b      	ldr	r3, [r7, #16]
100484c4:	22f0      	movs	r2, #240	@ 0xf0
100484c6:	4393      	bics	r3, r2
100484c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
100484ca:	687b      	ldr	r3, [r7, #4]
100484cc:	011b      	lsls	r3, r3, #4
100484ce:	693a      	ldr	r2, [r7, #16]
100484d0:	4313      	orrs	r3, r2
100484d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
100484d4:	697b      	ldr	r3, [r7, #20]
100484d6:	220a      	movs	r2, #10
100484d8:	4393      	bics	r3, r2
100484da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
100484dc:	697a      	ldr	r2, [r7, #20]
100484de:	68bb      	ldr	r3, [r7, #8]
100484e0:	4313      	orrs	r3, r2
100484e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
100484e4:	68fb      	ldr	r3, [r7, #12]
100484e6:	693a      	ldr	r2, [r7, #16]
100484e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
100484ea:	68fb      	ldr	r3, [r7, #12]
100484ec:	697a      	ldr	r2, [r7, #20]
100484ee:	621a      	str	r2, [r3, #32]
}
100484f0:	46c0      	nop			@ (mov r8, r8)
100484f2:	46bd      	mov	sp, r7
100484f4:	b006      	add	sp, #24
100484f6:	bd80      	pop	{r7, pc}

100484f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
100484f8:	b580      	push	{r7, lr}
100484fa:	b086      	sub	sp, #24
100484fc:	af00      	add	r7, sp, #0
100484fe:	60f8      	str	r0, [r7, #12]
10048500:	60b9      	str	r1, [r7, #8]
10048502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
10048504:	68fb      	ldr	r3, [r7, #12]
10048506:	6a1b      	ldr	r3, [r3, #32]
10048508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004850a:	68fb      	ldr	r3, [r7, #12]
1004850c:	6a1b      	ldr	r3, [r3, #32]
1004850e:	2210      	movs	r2, #16
10048510:	4393      	bics	r3, r2
10048512:	001a      	movs	r2, r3
10048514:	68fb      	ldr	r3, [r7, #12]
10048516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
10048518:	68fb      	ldr	r3, [r7, #12]
1004851a:	699b      	ldr	r3, [r3, #24]
1004851c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004851e:	693b      	ldr	r3, [r7, #16]
10048520:	4a0d      	ldr	r2, [pc, #52]	@ (10048558 <TIM_TI2_ConfigInputStage+0x60>)
10048522:	4013      	ands	r3, r2
10048524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
10048526:	687b      	ldr	r3, [r7, #4]
10048528:	031b      	lsls	r3, r3, #12
1004852a:	693a      	ldr	r2, [r7, #16]
1004852c:	4313      	orrs	r3, r2
1004852e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
10048530:	697b      	ldr	r3, [r7, #20]
10048532:	22a0      	movs	r2, #160	@ 0xa0
10048534:	4393      	bics	r3, r2
10048536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
10048538:	68bb      	ldr	r3, [r7, #8]
1004853a:	011b      	lsls	r3, r3, #4
1004853c:	697a      	ldr	r2, [r7, #20]
1004853e:	4313      	orrs	r3, r2
10048540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
10048542:	68fb      	ldr	r3, [r7, #12]
10048544:	693a      	ldr	r2, [r7, #16]
10048546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
10048548:	68fb      	ldr	r3, [r7, #12]
1004854a:	697a      	ldr	r2, [r7, #20]
1004854c:	621a      	str	r2, [r3, #32]
}
1004854e:	46c0      	nop			@ (mov r8, r8)
10048550:	46bd      	mov	sp, r7
10048552:	b006      	add	sp, #24
10048554:	bd80      	pop	{r7, pc}
10048556:	46c0      	nop			@ (mov r8, r8)
10048558:	ffff0fff 	.word	0xffff0fff

1004855c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004855c:	b580      	push	{r7, lr}
1004855e:	b084      	sub	sp, #16
10048560:	af00      	add	r7, sp, #0
10048562:	6078      	str	r0, [r7, #4]
10048564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
10048566:	687b      	ldr	r3, [r7, #4]
10048568:	689b      	ldr	r3, [r3, #8]
1004856a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004856c:	68fb      	ldr	r3, [r7, #12]
1004856e:	2270      	movs	r2, #112	@ 0x70
10048570:	4393      	bics	r3, r2
10048572:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
10048574:	683a      	ldr	r2, [r7, #0]
10048576:	68fb      	ldr	r3, [r7, #12]
10048578:	4313      	orrs	r3, r2
1004857a:	2207      	movs	r2, #7
1004857c:	4313      	orrs	r3, r2
1004857e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
10048580:	687b      	ldr	r3, [r7, #4]
10048582:	68fa      	ldr	r2, [r7, #12]
10048584:	609a      	str	r2, [r3, #8]
}
10048586:	46c0      	nop			@ (mov r8, r8)
10048588:	46bd      	mov	sp, r7
1004858a:	b004      	add	sp, #16
1004858c:	bd80      	pop	{r7, pc}
	...

10048590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
10048590:	b580      	push	{r7, lr}
10048592:	b086      	sub	sp, #24
10048594:	af00      	add	r7, sp, #0
10048596:	60f8      	str	r0, [r7, #12]
10048598:	60b9      	str	r1, [r7, #8]
1004859a:	607a      	str	r2, [r7, #4]
1004859c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004859e:	68fb      	ldr	r3, [r7, #12]
100485a0:	689b      	ldr	r3, [r3, #8]
100485a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
100485a4:	697b      	ldr	r3, [r7, #20]
100485a6:	4a09      	ldr	r2, [pc, #36]	@ (100485cc <TIM_ETR_SetConfig+0x3c>)
100485a8:	4013      	ands	r3, r2
100485aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
100485ac:	683b      	ldr	r3, [r7, #0]
100485ae:	021a      	lsls	r2, r3, #8
100485b0:	687b      	ldr	r3, [r7, #4]
100485b2:	431a      	orrs	r2, r3
100485b4:	68bb      	ldr	r3, [r7, #8]
100485b6:	4313      	orrs	r3, r2
100485b8:	697a      	ldr	r2, [r7, #20]
100485ba:	4313      	orrs	r3, r2
100485bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
100485be:	68fb      	ldr	r3, [r7, #12]
100485c0:	697a      	ldr	r2, [r7, #20]
100485c2:	609a      	str	r2, [r3, #8]
}
100485c4:	46c0      	nop			@ (mov r8, r8)
100485c6:	46bd      	mov	sp, r7
100485c8:	b006      	add	sp, #24
100485ca:	bd80      	pop	{r7, pc}
100485cc:	ffff00ff 	.word	0xffff00ff

100485d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
100485d0:	b580      	push	{r7, lr}
100485d2:	b082      	sub	sp, #8
100485d4:	af00      	add	r7, sp, #0
100485d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
100485d8:	46c0      	nop			@ (mov r8, r8)
100485da:	46bd      	mov	sp, r7
100485dc:	b002      	add	sp, #8
100485de:	bd80      	pop	{r7, pc}

100485e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
100485e0:	b580      	push	{r7, lr}
100485e2:	b082      	sub	sp, #8
100485e4:	af00      	add	r7, sp, #0
100485e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
100485e8:	46c0      	nop			@ (mov r8, r8)
100485ea:	46bd      	mov	sp, r7
100485ec:	b002      	add	sp, #8
100485ee:	bd80      	pop	{r7, pc}

100485f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100485f0:	b580      	push	{r7, lr}
100485f2:	b082      	sub	sp, #8
100485f4:	af00      	add	r7, sp, #0
100485f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100485f8:	687b      	ldr	r3, [r7, #4]
100485fa:	2b00      	cmp	r3, #0
100485fc:	d101      	bne.n	10048602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100485fe:	2301      	movs	r3, #1
10048600:	e046      	b.n	10048690 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10048602:	687b      	ldr	r3, [r7, #4]
10048604:	2288      	movs	r2, #136	@ 0x88
10048606:	589b      	ldr	r3, [r3, r2]
10048608:	2b00      	cmp	r3, #0
1004860a:	d107      	bne.n	1004861c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004860c:	687b      	ldr	r3, [r7, #4]
1004860e:	2284      	movs	r2, #132	@ 0x84
10048610:	2100      	movs	r1, #0
10048612:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10048614:	687b      	ldr	r3, [r7, #4]
10048616:	0018      	movs	r0, r3
10048618:	f7fa ffd6 	bl	100435c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004861c:	687b      	ldr	r3, [r7, #4]
1004861e:	2288      	movs	r2, #136	@ 0x88
10048620:	2124      	movs	r1, #36	@ 0x24
10048622:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048624:	687b      	ldr	r3, [r7, #4]
10048626:	681b      	ldr	r3, [r3, #0]
10048628:	681a      	ldr	r2, [r3, #0]
1004862a:	687b      	ldr	r3, [r7, #4]
1004862c:	681b      	ldr	r3, [r3, #0]
1004862e:	2101      	movs	r1, #1
10048630:	438a      	bics	r2, r1
10048632:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048634:	687b      	ldr	r3, [r7, #4]
10048636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048638:	2b00      	cmp	r3, #0
1004863a:	d003      	beq.n	10048644 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
1004863c:	687b      	ldr	r3, [r7, #4]
1004863e:	0018      	movs	r0, r3
10048640:	f000 fcf6 	bl	10049030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048644:	687b      	ldr	r3, [r7, #4]
10048646:	0018      	movs	r0, r3
10048648:	f000 fb8a 	bl	10048d60 <UART_SetConfig>
1004864c:	0003      	movs	r3, r0
1004864e:	2b01      	cmp	r3, #1
10048650:	d101      	bne.n	10048656 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10048652:	2301      	movs	r3, #1
10048654:	e01c      	b.n	10048690 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10048656:	687b      	ldr	r3, [r7, #4]
10048658:	681b      	ldr	r3, [r3, #0]
1004865a:	685a      	ldr	r2, [r3, #4]
1004865c:	687b      	ldr	r3, [r7, #4]
1004865e:	681b      	ldr	r3, [r3, #0]
10048660:	490d      	ldr	r1, [pc, #52]	@ (10048698 <HAL_UART_Init+0xa8>)
10048662:	400a      	ands	r2, r1
10048664:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10048666:	687b      	ldr	r3, [r7, #4]
10048668:	681b      	ldr	r3, [r3, #0]
1004866a:	689a      	ldr	r2, [r3, #8]
1004866c:	687b      	ldr	r3, [r7, #4]
1004866e:	681b      	ldr	r3, [r3, #0]
10048670:	212a      	movs	r1, #42	@ 0x2a
10048672:	438a      	bics	r2, r1
10048674:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10048676:	687b      	ldr	r3, [r7, #4]
10048678:	681b      	ldr	r3, [r3, #0]
1004867a:	681a      	ldr	r2, [r3, #0]
1004867c:	687b      	ldr	r3, [r7, #4]
1004867e:	681b      	ldr	r3, [r3, #0]
10048680:	2101      	movs	r1, #1
10048682:	430a      	orrs	r2, r1
10048684:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10048686:	687b      	ldr	r3, [r7, #4]
10048688:	0018      	movs	r0, r3
1004868a:	f000 fd85 	bl	10049198 <UART_CheckIdleState>
1004868e:	0003      	movs	r3, r0
}
10048690:	0018      	movs	r0, r3
10048692:	46bd      	mov	sp, r7
10048694:	b002      	add	sp, #8
10048696:	bd80      	pop	{r7, pc}
10048698:	ffffb7ff 	.word	0xffffb7ff

1004869c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
1004869c:	b5b0      	push	{r4, r5, r7, lr}
1004869e:	b0aa      	sub	sp, #168	@ 0xa8
100486a0:	af00      	add	r7, sp, #0
100486a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
100486a4:	687b      	ldr	r3, [r7, #4]
100486a6:	681b      	ldr	r3, [r3, #0]
100486a8:	69db      	ldr	r3, [r3, #28]
100486aa:	22a4      	movs	r2, #164	@ 0xa4
100486ac:	18b9      	adds	r1, r7, r2
100486ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
100486b0:	687b      	ldr	r3, [r7, #4]
100486b2:	681b      	ldr	r3, [r3, #0]
100486b4:	681b      	ldr	r3, [r3, #0]
100486b6:	20a0      	movs	r0, #160	@ 0xa0
100486b8:	1839      	adds	r1, r7, r0
100486ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
100486bc:	687b      	ldr	r3, [r7, #4]
100486be:	681b      	ldr	r3, [r3, #0]
100486c0:	689b      	ldr	r3, [r3, #8]
100486c2:	249c      	movs	r4, #156	@ 0x9c
100486c4:	1939      	adds	r1, r7, r4
100486c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
100486c8:	0011      	movs	r1, r2
100486ca:	18bb      	adds	r3, r7, r2
100486cc:	681b      	ldr	r3, [r3, #0]
100486ce:	4aa2      	ldr	r2, [pc, #648]	@ (10048958 <HAL_UART_IRQHandler+0x2bc>)
100486d0:	4013      	ands	r3, r2
100486d2:	2298      	movs	r2, #152	@ 0x98
100486d4:	18bd      	adds	r5, r7, r2
100486d6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
100486d8:	18bb      	adds	r3, r7, r2
100486da:	681b      	ldr	r3, [r3, #0]
100486dc:	2b00      	cmp	r3, #0
100486de:	d11a      	bne.n	10048716 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
100486e0:	187b      	adds	r3, r7, r1
100486e2:	681b      	ldr	r3, [r3, #0]
100486e4:	2220      	movs	r2, #32
100486e6:	4013      	ands	r3, r2
100486e8:	d015      	beq.n	10048716 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
100486ea:	183b      	adds	r3, r7, r0
100486ec:	681b      	ldr	r3, [r3, #0]
100486ee:	2220      	movs	r2, #32
100486f0:	4013      	ands	r3, r2
100486f2:	d105      	bne.n	10048700 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
100486f4:	193b      	adds	r3, r7, r4
100486f6:	681a      	ldr	r2, [r3, #0]
100486f8:	2380      	movs	r3, #128	@ 0x80
100486fa:	055b      	lsls	r3, r3, #21
100486fc:	4013      	ands	r3, r2
100486fe:	d00a      	beq.n	10048716 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
10048700:	687b      	ldr	r3, [r7, #4]
10048702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048704:	2b00      	cmp	r3, #0
10048706:	d100      	bne.n	1004870a <HAL_UART_IRQHandler+0x6e>
10048708:	e2fb      	b.n	10048d02 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
1004870a:	687b      	ldr	r3, [r7, #4]
1004870c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004870e:	687a      	ldr	r2, [r7, #4]
10048710:	0010      	movs	r0, r2
10048712:	4798      	blx	r3
      }
      return;
10048714:	e2f5      	b.n	10048d02 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
10048716:	2398      	movs	r3, #152	@ 0x98
10048718:	18fb      	adds	r3, r7, r3
1004871a:	681b      	ldr	r3, [r3, #0]
1004871c:	2b00      	cmp	r3, #0
1004871e:	d100      	bne.n	10048722 <HAL_UART_IRQHandler+0x86>
10048720:	e122      	b.n	10048968 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
10048722:	239c      	movs	r3, #156	@ 0x9c
10048724:	18fb      	adds	r3, r7, r3
10048726:	681b      	ldr	r3, [r3, #0]
10048728:	4a8c      	ldr	r2, [pc, #560]	@ (1004895c <HAL_UART_IRQHandler+0x2c0>)
1004872a:	4013      	ands	r3, r2
1004872c:	d106      	bne.n	1004873c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
1004872e:	23a0      	movs	r3, #160	@ 0xa0
10048730:	18fb      	adds	r3, r7, r3
10048732:	681b      	ldr	r3, [r3, #0]
10048734:	4a8a      	ldr	r2, [pc, #552]	@ (10048960 <HAL_UART_IRQHandler+0x2c4>)
10048736:	4013      	ands	r3, r2
10048738:	d100      	bne.n	1004873c <HAL_UART_IRQHandler+0xa0>
1004873a:	e115      	b.n	10048968 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004873c:	23a4      	movs	r3, #164	@ 0xa4
1004873e:	18fb      	adds	r3, r7, r3
10048740:	681b      	ldr	r3, [r3, #0]
10048742:	2201      	movs	r2, #1
10048744:	4013      	ands	r3, r2
10048746:	d012      	beq.n	1004876e <HAL_UART_IRQHandler+0xd2>
10048748:	23a0      	movs	r3, #160	@ 0xa0
1004874a:	18fb      	adds	r3, r7, r3
1004874c:	681a      	ldr	r2, [r3, #0]
1004874e:	2380      	movs	r3, #128	@ 0x80
10048750:	005b      	lsls	r3, r3, #1
10048752:	4013      	ands	r3, r2
10048754:	d00b      	beq.n	1004876e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
10048756:	687b      	ldr	r3, [r7, #4]
10048758:	681b      	ldr	r3, [r3, #0]
1004875a:	2201      	movs	r2, #1
1004875c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
1004875e:	687b      	ldr	r3, [r7, #4]
10048760:	2290      	movs	r2, #144	@ 0x90
10048762:	589b      	ldr	r3, [r3, r2]
10048764:	2201      	movs	r2, #1
10048766:	431a      	orrs	r2, r3
10048768:	687b      	ldr	r3, [r7, #4]
1004876a:	2190      	movs	r1, #144	@ 0x90
1004876c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004876e:	23a4      	movs	r3, #164	@ 0xa4
10048770:	18fb      	adds	r3, r7, r3
10048772:	681b      	ldr	r3, [r3, #0]
10048774:	2202      	movs	r2, #2
10048776:	4013      	ands	r3, r2
10048778:	d011      	beq.n	1004879e <HAL_UART_IRQHandler+0x102>
1004877a:	239c      	movs	r3, #156	@ 0x9c
1004877c:	18fb      	adds	r3, r7, r3
1004877e:	681b      	ldr	r3, [r3, #0]
10048780:	2201      	movs	r2, #1
10048782:	4013      	ands	r3, r2
10048784:	d00b      	beq.n	1004879e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
10048786:	687b      	ldr	r3, [r7, #4]
10048788:	681b      	ldr	r3, [r3, #0]
1004878a:	2202      	movs	r2, #2
1004878c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
1004878e:	687b      	ldr	r3, [r7, #4]
10048790:	2290      	movs	r2, #144	@ 0x90
10048792:	589b      	ldr	r3, [r3, r2]
10048794:	2204      	movs	r2, #4
10048796:	431a      	orrs	r2, r3
10048798:	687b      	ldr	r3, [r7, #4]
1004879a:	2190      	movs	r1, #144	@ 0x90
1004879c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004879e:	23a4      	movs	r3, #164	@ 0xa4
100487a0:	18fb      	adds	r3, r7, r3
100487a2:	681b      	ldr	r3, [r3, #0]
100487a4:	2204      	movs	r2, #4
100487a6:	4013      	ands	r3, r2
100487a8:	d011      	beq.n	100487ce <HAL_UART_IRQHandler+0x132>
100487aa:	239c      	movs	r3, #156	@ 0x9c
100487ac:	18fb      	adds	r3, r7, r3
100487ae:	681b      	ldr	r3, [r3, #0]
100487b0:	2201      	movs	r2, #1
100487b2:	4013      	ands	r3, r2
100487b4:	d00b      	beq.n	100487ce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
100487b6:	687b      	ldr	r3, [r7, #4]
100487b8:	681b      	ldr	r3, [r3, #0]
100487ba:	2204      	movs	r2, #4
100487bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
100487be:	687b      	ldr	r3, [r7, #4]
100487c0:	2290      	movs	r2, #144	@ 0x90
100487c2:	589b      	ldr	r3, [r3, r2]
100487c4:	2202      	movs	r2, #2
100487c6:	431a      	orrs	r2, r3
100487c8:	687b      	ldr	r3, [r7, #4]
100487ca:	2190      	movs	r1, #144	@ 0x90
100487cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
100487ce:	23a4      	movs	r3, #164	@ 0xa4
100487d0:	18fb      	adds	r3, r7, r3
100487d2:	681b      	ldr	r3, [r3, #0]
100487d4:	2208      	movs	r2, #8
100487d6:	4013      	ands	r3, r2
100487d8:	d017      	beq.n	1004880a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100487da:	23a0      	movs	r3, #160	@ 0xa0
100487dc:	18fb      	adds	r3, r7, r3
100487de:	681b      	ldr	r3, [r3, #0]
100487e0:	2220      	movs	r2, #32
100487e2:	4013      	ands	r3, r2
100487e4:	d105      	bne.n	100487f2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
100487e6:	239c      	movs	r3, #156	@ 0x9c
100487e8:	18fb      	adds	r3, r7, r3
100487ea:	681b      	ldr	r3, [r3, #0]
100487ec:	4a5b      	ldr	r2, [pc, #364]	@ (1004895c <HAL_UART_IRQHandler+0x2c0>)
100487ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100487f0:	d00b      	beq.n	1004880a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
100487f2:	687b      	ldr	r3, [r7, #4]
100487f4:	681b      	ldr	r3, [r3, #0]
100487f6:	2208      	movs	r2, #8
100487f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
100487fa:	687b      	ldr	r3, [r7, #4]
100487fc:	2290      	movs	r2, #144	@ 0x90
100487fe:	589b      	ldr	r3, [r3, r2]
10048800:	2208      	movs	r2, #8
10048802:	431a      	orrs	r2, r3
10048804:	687b      	ldr	r3, [r7, #4]
10048806:	2190      	movs	r1, #144	@ 0x90
10048808:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004880a:	23a4      	movs	r3, #164	@ 0xa4
1004880c:	18fb      	adds	r3, r7, r3
1004880e:	681a      	ldr	r2, [r3, #0]
10048810:	2380      	movs	r3, #128	@ 0x80
10048812:	011b      	lsls	r3, r3, #4
10048814:	4013      	ands	r3, r2
10048816:	d013      	beq.n	10048840 <HAL_UART_IRQHandler+0x1a4>
10048818:	23a0      	movs	r3, #160	@ 0xa0
1004881a:	18fb      	adds	r3, r7, r3
1004881c:	681a      	ldr	r2, [r3, #0]
1004881e:	2380      	movs	r3, #128	@ 0x80
10048820:	04db      	lsls	r3, r3, #19
10048822:	4013      	ands	r3, r2
10048824:	d00c      	beq.n	10048840 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10048826:	687b      	ldr	r3, [r7, #4]
10048828:	681b      	ldr	r3, [r3, #0]
1004882a:	2280      	movs	r2, #128	@ 0x80
1004882c:	0112      	lsls	r2, r2, #4
1004882e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
10048830:	687b      	ldr	r3, [r7, #4]
10048832:	2290      	movs	r2, #144	@ 0x90
10048834:	589b      	ldr	r3, [r3, r2]
10048836:	2220      	movs	r2, #32
10048838:	431a      	orrs	r2, r3
1004883a:	687b      	ldr	r3, [r7, #4]
1004883c:	2190      	movs	r1, #144	@ 0x90
1004883e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
10048840:	687b      	ldr	r3, [r7, #4]
10048842:	2290      	movs	r2, #144	@ 0x90
10048844:	589b      	ldr	r3, [r3, r2]
10048846:	2b00      	cmp	r3, #0
10048848:	d100      	bne.n	1004884c <HAL_UART_IRQHandler+0x1b0>
1004884a:	e25c      	b.n	10048d06 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004884c:	23a4      	movs	r3, #164	@ 0xa4
1004884e:	18fb      	adds	r3, r7, r3
10048850:	681b      	ldr	r3, [r3, #0]
10048852:	2220      	movs	r2, #32
10048854:	4013      	ands	r3, r2
10048856:	d015      	beq.n	10048884 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
10048858:	23a0      	movs	r3, #160	@ 0xa0
1004885a:	18fb      	adds	r3, r7, r3
1004885c:	681b      	ldr	r3, [r3, #0]
1004885e:	2220      	movs	r2, #32
10048860:	4013      	ands	r3, r2
10048862:	d106      	bne.n	10048872 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
10048864:	239c      	movs	r3, #156	@ 0x9c
10048866:	18fb      	adds	r3, r7, r3
10048868:	681a      	ldr	r2, [r3, #0]
1004886a:	2380      	movs	r3, #128	@ 0x80
1004886c:	055b      	lsls	r3, r3, #21
1004886e:	4013      	ands	r3, r2
10048870:	d008      	beq.n	10048884 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
10048872:	687b      	ldr	r3, [r7, #4]
10048874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048876:	2b00      	cmp	r3, #0
10048878:	d004      	beq.n	10048884 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
1004887a:	687b      	ldr	r3, [r7, #4]
1004887c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004887e:	687a      	ldr	r2, [r7, #4]
10048880:	0010      	movs	r0, r2
10048882:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
10048884:	687b      	ldr	r3, [r7, #4]
10048886:	2290      	movs	r2, #144	@ 0x90
10048888:	589b      	ldr	r3, [r3, r2]
1004888a:	2194      	movs	r1, #148	@ 0x94
1004888c:	187a      	adds	r2, r7, r1
1004888e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
10048890:	687b      	ldr	r3, [r7, #4]
10048892:	681b      	ldr	r3, [r3, #0]
10048894:	689b      	ldr	r3, [r3, #8]
10048896:	2240      	movs	r2, #64	@ 0x40
10048898:	4013      	ands	r3, r2
1004889a:	2b40      	cmp	r3, #64	@ 0x40
1004889c:	d004      	beq.n	100488a8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
1004889e:	187b      	adds	r3, r7, r1
100488a0:	681b      	ldr	r3, [r3, #0]
100488a2:	2228      	movs	r2, #40	@ 0x28
100488a4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
100488a6:	d04c      	beq.n	10048942 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
100488a8:	687b      	ldr	r3, [r7, #4]
100488aa:	0018      	movs	r0, r3
100488ac:	f000 fd8e 	bl	100493cc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
100488b0:	687b      	ldr	r3, [r7, #4]
100488b2:	681b      	ldr	r3, [r3, #0]
100488b4:	689b      	ldr	r3, [r3, #8]
100488b6:	2240      	movs	r2, #64	@ 0x40
100488b8:	4013      	ands	r3, r2
100488ba:	2b40      	cmp	r3, #64	@ 0x40
100488bc:	d13c      	bne.n	10048938 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100488be:	f3ef 8310 	mrs	r3, PRIMASK
100488c2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
100488c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
100488c6:	2090      	movs	r0, #144	@ 0x90
100488c8:	183a      	adds	r2, r7, r0
100488ca:	6013      	str	r3, [r2, #0]
100488cc:	2301      	movs	r3, #1
100488ce:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100488d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100488d2:	f383 8810 	msr	PRIMASK, r3
}
100488d6:	46c0      	nop			@ (mov r8, r8)
100488d8:	687b      	ldr	r3, [r7, #4]
100488da:	681b      	ldr	r3, [r3, #0]
100488dc:	689a      	ldr	r2, [r3, #8]
100488de:	687b      	ldr	r3, [r7, #4]
100488e0:	681b      	ldr	r3, [r3, #0]
100488e2:	2140      	movs	r1, #64	@ 0x40
100488e4:	438a      	bics	r2, r1
100488e6:	609a      	str	r2, [r3, #8]
100488e8:	183b      	adds	r3, r7, r0
100488ea:	681b      	ldr	r3, [r3, #0]
100488ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100488ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
100488f0:	f383 8810 	msr	PRIMASK, r3
}
100488f4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
100488f6:	687b      	ldr	r3, [r7, #4]
100488f8:	2280      	movs	r2, #128	@ 0x80
100488fa:	589b      	ldr	r3, [r3, r2]
100488fc:	2b00      	cmp	r3, #0
100488fe:	d016      	beq.n	1004892e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
10048900:	687b      	ldr	r3, [r7, #4]
10048902:	2280      	movs	r2, #128	@ 0x80
10048904:	589b      	ldr	r3, [r3, r2]
10048906:	4a17      	ldr	r2, [pc, #92]	@ (10048964 <HAL_UART_IRQHandler+0x2c8>)
10048908:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1004890a:	687b      	ldr	r3, [r7, #4]
1004890c:	2280      	movs	r2, #128	@ 0x80
1004890e:	589b      	ldr	r3, [r3, r2]
10048910:	0018      	movs	r0, r3
10048912:	f7fb fd04 	bl	1004431e <HAL_DMA_Abort_IT>
10048916:	1e03      	subs	r3, r0, #0
10048918:	d01c      	beq.n	10048954 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
1004891a:	687b      	ldr	r3, [r7, #4]
1004891c:	2280      	movs	r2, #128	@ 0x80
1004891e:	589b      	ldr	r3, [r3, r2]
10048920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10048922:	687a      	ldr	r2, [r7, #4]
10048924:	2180      	movs	r1, #128	@ 0x80
10048926:	5852      	ldr	r2, [r2, r1]
10048928:	0010      	movs	r0, r2
1004892a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004892c:	e012      	b.n	10048954 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
1004892e:	687b      	ldr	r3, [r7, #4]
10048930:	0018      	movs	r0, r3
10048932:	f000 fa01 	bl	10048d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10048936:	e00d      	b.n	10048954 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
10048938:	687b      	ldr	r3, [r7, #4]
1004893a:	0018      	movs	r0, r3
1004893c:	f000 f9fc 	bl	10048d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10048940:	e008      	b.n	10048954 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
10048942:	687b      	ldr	r3, [r7, #4]
10048944:	0018      	movs	r0, r3
10048946:	f000 f9f7 	bl	10048d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
1004894a:	687b      	ldr	r3, [r7, #4]
1004894c:	2290      	movs	r2, #144	@ 0x90
1004894e:	2100      	movs	r1, #0
10048950:	5099      	str	r1, [r3, r2]
      }
    }
    return;
10048952:	e1d8      	b.n	10048d06 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10048954:	46c0      	nop			@ (mov r8, r8)
    return;
10048956:	e1d6      	b.n	10048d06 <HAL_UART_IRQHandler+0x66a>
10048958:	0000080f 	.word	0x0000080f
1004895c:	10000001 	.word	0x10000001
10048960:	04000120 	.word	0x04000120
10048964:	10049499 	.word	0x10049499

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10048968:	687b      	ldr	r3, [r7, #4]
1004896a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004896c:	2b01      	cmp	r3, #1
1004896e:	d000      	beq.n	10048972 <HAL_UART_IRQHandler+0x2d6>
10048970:	e15d      	b.n	10048c2e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
10048972:	23a4      	movs	r3, #164	@ 0xa4
10048974:	18fb      	adds	r3, r7, r3
10048976:	681b      	ldr	r3, [r3, #0]
10048978:	2210      	movs	r2, #16
1004897a:	4013      	ands	r3, r2
1004897c:	d100      	bne.n	10048980 <HAL_UART_IRQHandler+0x2e4>
1004897e:	e156      	b.n	10048c2e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
10048980:	23a0      	movs	r3, #160	@ 0xa0
10048982:	18fb      	adds	r3, r7, r3
10048984:	681b      	ldr	r3, [r3, #0]
10048986:	2210      	movs	r2, #16
10048988:	4013      	ands	r3, r2
1004898a:	d100      	bne.n	1004898e <HAL_UART_IRQHandler+0x2f2>
1004898c:	e14f      	b.n	10048c2e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
1004898e:	687b      	ldr	r3, [r7, #4]
10048990:	681b      	ldr	r3, [r3, #0]
10048992:	2210      	movs	r2, #16
10048994:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10048996:	687b      	ldr	r3, [r7, #4]
10048998:	681b      	ldr	r3, [r3, #0]
1004899a:	689b      	ldr	r3, [r3, #8]
1004899c:	2240      	movs	r2, #64	@ 0x40
1004899e:	4013      	ands	r3, r2
100489a0:	2b40      	cmp	r3, #64	@ 0x40
100489a2:	d000      	beq.n	100489a6 <HAL_UART_IRQHandler+0x30a>
100489a4:	e0c3      	b.n	10048b2e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
100489a6:	687b      	ldr	r3, [r7, #4]
100489a8:	2280      	movs	r2, #128	@ 0x80
100489aa:	589b      	ldr	r3, [r3, r2]
100489ac:	681b      	ldr	r3, [r3, #0]
100489ae:	685a      	ldr	r2, [r3, #4]
100489b0:	217e      	movs	r1, #126	@ 0x7e
100489b2:	187b      	adds	r3, r7, r1
100489b4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
100489b6:	187b      	adds	r3, r7, r1
100489b8:	881b      	ldrh	r3, [r3, #0]
100489ba:	2b00      	cmp	r3, #0
100489bc:	d100      	bne.n	100489c0 <HAL_UART_IRQHandler+0x324>
100489be:	e097      	b.n	10048af0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
100489c0:	687b      	ldr	r3, [r7, #4]
100489c2:	225c      	movs	r2, #92	@ 0x5c
100489c4:	5a9b      	ldrh	r3, [r3, r2]
100489c6:	187a      	adds	r2, r7, r1
100489c8:	8812      	ldrh	r2, [r2, #0]
100489ca:	429a      	cmp	r2, r3
100489cc:	d300      	bcc.n	100489d0 <HAL_UART_IRQHandler+0x334>
100489ce:	e08f      	b.n	10048af0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
100489d0:	687b      	ldr	r3, [r7, #4]
100489d2:	187a      	adds	r2, r7, r1
100489d4:	215e      	movs	r1, #94	@ 0x5e
100489d6:	8812      	ldrh	r2, [r2, #0]
100489d8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
100489da:	687b      	ldr	r3, [r7, #4]
100489dc:	2280      	movs	r2, #128	@ 0x80
100489de:	589b      	ldr	r3, [r3, r2]
100489e0:	681b      	ldr	r3, [r3, #0]
100489e2:	681b      	ldr	r3, [r3, #0]
100489e4:	2220      	movs	r2, #32
100489e6:	4013      	ands	r3, r2
100489e8:	d170      	bne.n	10048acc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100489ea:	f3ef 8310 	mrs	r3, PRIMASK
100489ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
100489f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
100489f2:	67bb      	str	r3, [r7, #120]	@ 0x78
100489f4:	2301      	movs	r3, #1
100489f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100489f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100489fa:	f383 8810 	msr	PRIMASK, r3
}
100489fe:	46c0      	nop			@ (mov r8, r8)
10048a00:	687b      	ldr	r3, [r7, #4]
10048a02:	681b      	ldr	r3, [r3, #0]
10048a04:	681a      	ldr	r2, [r3, #0]
10048a06:	687b      	ldr	r3, [r7, #4]
10048a08:	681b      	ldr	r3, [r3, #0]
10048a0a:	49c4      	ldr	r1, [pc, #784]	@ (10048d1c <HAL_UART_IRQHandler+0x680>)
10048a0c:	400a      	ands	r2, r1
10048a0e:	601a      	str	r2, [r3, #0]
10048a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10048a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10048a16:	f383 8810 	msr	PRIMASK, r3
}
10048a1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048a1c:	f3ef 8310 	mrs	r3, PRIMASK
10048a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
10048a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10048a24:	677b      	str	r3, [r7, #116]	@ 0x74
10048a26:	2301      	movs	r3, #1
10048a28:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10048a2c:	f383 8810 	msr	PRIMASK, r3
}
10048a30:	46c0      	nop			@ (mov r8, r8)
10048a32:	687b      	ldr	r3, [r7, #4]
10048a34:	681b      	ldr	r3, [r3, #0]
10048a36:	689a      	ldr	r2, [r3, #8]
10048a38:	687b      	ldr	r3, [r7, #4]
10048a3a:	681b      	ldr	r3, [r3, #0]
10048a3c:	2101      	movs	r1, #1
10048a3e:	438a      	bics	r2, r1
10048a40:	609a      	str	r2, [r3, #8]
10048a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10048a44:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10048a48:	f383 8810 	msr	PRIMASK, r3
}
10048a4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048a4e:	f3ef 8310 	mrs	r3, PRIMASK
10048a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
10048a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
10048a56:	673b      	str	r3, [r7, #112]	@ 0x70
10048a58:	2301      	movs	r3, #1
10048a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10048a5e:	f383 8810 	msr	PRIMASK, r3
}
10048a62:	46c0      	nop			@ (mov r8, r8)
10048a64:	687b      	ldr	r3, [r7, #4]
10048a66:	681b      	ldr	r3, [r3, #0]
10048a68:	689a      	ldr	r2, [r3, #8]
10048a6a:	687b      	ldr	r3, [r7, #4]
10048a6c:	681b      	ldr	r3, [r3, #0]
10048a6e:	2140      	movs	r1, #64	@ 0x40
10048a70:	438a      	bics	r2, r1
10048a72:	609a      	str	r2, [r3, #8]
10048a74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10048a76:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10048a7a:	f383 8810 	msr	PRIMASK, r3
}
10048a7e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
10048a80:	687b      	ldr	r3, [r7, #4]
10048a82:	228c      	movs	r2, #140	@ 0x8c
10048a84:	2120      	movs	r1, #32
10048a86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048a88:	687b      	ldr	r3, [r7, #4]
10048a8a:	2200      	movs	r2, #0
10048a8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048a8e:	f3ef 8310 	mrs	r3, PRIMASK
10048a92:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
10048a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10048a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
10048a98:	2301      	movs	r3, #1
10048a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10048a9e:	f383 8810 	msr	PRIMASK, r3
}
10048aa2:	46c0      	nop			@ (mov r8, r8)
10048aa4:	687b      	ldr	r3, [r7, #4]
10048aa6:	681b      	ldr	r3, [r3, #0]
10048aa8:	681a      	ldr	r2, [r3, #0]
10048aaa:	687b      	ldr	r3, [r7, #4]
10048aac:	681b      	ldr	r3, [r3, #0]
10048aae:	2110      	movs	r1, #16
10048ab0:	438a      	bics	r2, r1
10048ab2:	601a      	str	r2, [r3, #0]
10048ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10048ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10048aba:	f383 8810 	msr	PRIMASK, r3
}
10048abe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
10048ac0:	687b      	ldr	r3, [r7, #4]
10048ac2:	2280      	movs	r2, #128	@ 0x80
10048ac4:	589b      	ldr	r3, [r3, r2]
10048ac6:	0018      	movs	r0, r3
10048ac8:	f7fb fbea 	bl	100442a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10048acc:	687b      	ldr	r3, [r7, #4]
10048ace:	2202      	movs	r2, #2
10048ad0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
10048ad2:	687b      	ldr	r3, [r7, #4]
10048ad4:	225c      	movs	r2, #92	@ 0x5c
10048ad6:	5a9a      	ldrh	r2, [r3, r2]
10048ad8:	687b      	ldr	r3, [r7, #4]
10048ada:	215e      	movs	r1, #94	@ 0x5e
10048adc:	5a5b      	ldrh	r3, [r3, r1]
10048ade:	b29b      	uxth	r3, r3
10048ae0:	1ad3      	subs	r3, r2, r3
10048ae2:	b29a      	uxth	r2, r3
10048ae4:	687b      	ldr	r3, [r7, #4]
10048ae6:	0011      	movs	r1, r2
10048ae8:	0018      	movs	r0, r3
10048aea:	f000 f92d 	bl	10048d48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
10048aee:	e10c      	b.n	10048d0a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
10048af0:	687b      	ldr	r3, [r7, #4]
10048af2:	225c      	movs	r2, #92	@ 0x5c
10048af4:	5a9b      	ldrh	r3, [r3, r2]
10048af6:	227e      	movs	r2, #126	@ 0x7e
10048af8:	18ba      	adds	r2, r7, r2
10048afa:	8812      	ldrh	r2, [r2, #0]
10048afc:	429a      	cmp	r2, r3
10048afe:	d000      	beq.n	10048b02 <HAL_UART_IRQHandler+0x466>
10048b00:	e103      	b.n	10048d0a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
10048b02:	687b      	ldr	r3, [r7, #4]
10048b04:	2280      	movs	r2, #128	@ 0x80
10048b06:	589b      	ldr	r3, [r3, r2]
10048b08:	681b      	ldr	r3, [r3, #0]
10048b0a:	681b      	ldr	r3, [r3, #0]
10048b0c:	2220      	movs	r2, #32
10048b0e:	4013      	ands	r3, r2
10048b10:	2b20      	cmp	r3, #32
10048b12:	d000      	beq.n	10048b16 <HAL_UART_IRQHandler+0x47a>
10048b14:	e0f9      	b.n	10048d0a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10048b16:	687b      	ldr	r3, [r7, #4]
10048b18:	2202      	movs	r2, #2
10048b1a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
10048b1c:	687b      	ldr	r3, [r7, #4]
10048b1e:	225c      	movs	r2, #92	@ 0x5c
10048b20:	5a9a      	ldrh	r2, [r3, r2]
10048b22:	687b      	ldr	r3, [r7, #4]
10048b24:	0011      	movs	r1, r2
10048b26:	0018      	movs	r0, r3
10048b28:	f000 f90e 	bl	10048d48 <HAL_UARTEx_RxEventCallback>
      return;
10048b2c:	e0ed      	b.n	10048d0a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
10048b2e:	687b      	ldr	r3, [r7, #4]
10048b30:	225c      	movs	r2, #92	@ 0x5c
10048b32:	5a99      	ldrh	r1, [r3, r2]
10048b34:	687b      	ldr	r3, [r7, #4]
10048b36:	225e      	movs	r2, #94	@ 0x5e
10048b38:	5a9b      	ldrh	r3, [r3, r2]
10048b3a:	b29a      	uxth	r2, r3
10048b3c:	208e      	movs	r0, #142	@ 0x8e
10048b3e:	183b      	adds	r3, r7, r0
10048b40:	1a8a      	subs	r2, r1, r2
10048b42:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
10048b44:	687b      	ldr	r3, [r7, #4]
10048b46:	225e      	movs	r2, #94	@ 0x5e
10048b48:	5a9b      	ldrh	r3, [r3, r2]
10048b4a:	b29b      	uxth	r3, r3
10048b4c:	2b00      	cmp	r3, #0
10048b4e:	d100      	bne.n	10048b52 <HAL_UART_IRQHandler+0x4b6>
10048b50:	e0dd      	b.n	10048d0e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
10048b52:	183b      	adds	r3, r7, r0
10048b54:	881b      	ldrh	r3, [r3, #0]
10048b56:	2b00      	cmp	r3, #0
10048b58:	d100      	bne.n	10048b5c <HAL_UART_IRQHandler+0x4c0>
10048b5a:	e0d8      	b.n	10048d0e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048b5c:	f3ef 8310 	mrs	r3, PRIMASK
10048b60:	60fb      	str	r3, [r7, #12]
  return(result);
10048b62:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048b64:	2488      	movs	r4, #136	@ 0x88
10048b66:	193a      	adds	r2, r7, r4
10048b68:	6013      	str	r3, [r2, #0]
10048b6a:	2301      	movs	r3, #1
10048b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048b6e:	693b      	ldr	r3, [r7, #16]
10048b70:	f383 8810 	msr	PRIMASK, r3
}
10048b74:	46c0      	nop			@ (mov r8, r8)
10048b76:	687b      	ldr	r3, [r7, #4]
10048b78:	681b      	ldr	r3, [r3, #0]
10048b7a:	681a      	ldr	r2, [r3, #0]
10048b7c:	687b      	ldr	r3, [r7, #4]
10048b7e:	681b      	ldr	r3, [r3, #0]
10048b80:	4967      	ldr	r1, [pc, #412]	@ (10048d20 <HAL_UART_IRQHandler+0x684>)
10048b82:	400a      	ands	r2, r1
10048b84:	601a      	str	r2, [r3, #0]
10048b86:	193b      	adds	r3, r7, r4
10048b88:	681b      	ldr	r3, [r3, #0]
10048b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048b8c:	697b      	ldr	r3, [r7, #20]
10048b8e:	f383 8810 	msr	PRIMASK, r3
}
10048b92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048b94:	f3ef 8310 	mrs	r3, PRIMASK
10048b98:	61bb      	str	r3, [r7, #24]
  return(result);
10048b9a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10048b9c:	2484      	movs	r4, #132	@ 0x84
10048b9e:	193a      	adds	r2, r7, r4
10048ba0:	6013      	str	r3, [r2, #0]
10048ba2:	2301      	movs	r3, #1
10048ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ba6:	69fb      	ldr	r3, [r7, #28]
10048ba8:	f383 8810 	msr	PRIMASK, r3
}
10048bac:	46c0      	nop			@ (mov r8, r8)
10048bae:	687b      	ldr	r3, [r7, #4]
10048bb0:	681b      	ldr	r3, [r3, #0]
10048bb2:	689a      	ldr	r2, [r3, #8]
10048bb4:	687b      	ldr	r3, [r7, #4]
10048bb6:	681b      	ldr	r3, [r3, #0]
10048bb8:	495a      	ldr	r1, [pc, #360]	@ (10048d24 <HAL_UART_IRQHandler+0x688>)
10048bba:	400a      	ands	r2, r1
10048bbc:	609a      	str	r2, [r3, #8]
10048bbe:	193b      	adds	r3, r7, r4
10048bc0:	681b      	ldr	r3, [r3, #0]
10048bc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048bc4:	6a3b      	ldr	r3, [r7, #32]
10048bc6:	f383 8810 	msr	PRIMASK, r3
}
10048bca:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
10048bcc:	687b      	ldr	r3, [r7, #4]
10048bce:	228c      	movs	r2, #140	@ 0x8c
10048bd0:	2120      	movs	r1, #32
10048bd2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048bd4:	687b      	ldr	r3, [r7, #4]
10048bd6:	2200      	movs	r2, #0
10048bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
10048bda:	687b      	ldr	r3, [r7, #4]
10048bdc:	2200      	movs	r2, #0
10048bde:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048be0:	f3ef 8310 	mrs	r3, PRIMASK
10048be4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10048be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10048be8:	2480      	movs	r4, #128	@ 0x80
10048bea:	193a      	adds	r2, r7, r4
10048bec:	6013      	str	r3, [r2, #0]
10048bee:	2301      	movs	r3, #1
10048bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048bf4:	f383 8810 	msr	PRIMASK, r3
}
10048bf8:	46c0      	nop			@ (mov r8, r8)
10048bfa:	687b      	ldr	r3, [r7, #4]
10048bfc:	681b      	ldr	r3, [r3, #0]
10048bfe:	681a      	ldr	r2, [r3, #0]
10048c00:	687b      	ldr	r3, [r7, #4]
10048c02:	681b      	ldr	r3, [r3, #0]
10048c04:	2110      	movs	r1, #16
10048c06:	438a      	bics	r2, r1
10048c08:	601a      	str	r2, [r3, #0]
10048c0a:	193b      	adds	r3, r7, r4
10048c0c:	681b      	ldr	r3, [r3, #0]
10048c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048c12:	f383 8810 	msr	PRIMASK, r3
}
10048c16:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10048c18:	687b      	ldr	r3, [r7, #4]
10048c1a:	2202      	movs	r2, #2
10048c1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
10048c1e:	183b      	adds	r3, r7, r0
10048c20:	881a      	ldrh	r2, [r3, #0]
10048c22:	687b      	ldr	r3, [r7, #4]
10048c24:	0011      	movs	r1, r2
10048c26:	0018      	movs	r0, r3
10048c28:	f000 f88e 	bl	10048d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
10048c2c:	e06f      	b.n	10048d0e <HAL_UART_IRQHandler+0x672>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
10048c2e:	23a4      	movs	r3, #164	@ 0xa4
10048c30:	18fb      	adds	r3, r7, r3
10048c32:	681a      	ldr	r2, [r3, #0]
10048c34:	2380      	movs	r3, #128	@ 0x80
10048c36:	035b      	lsls	r3, r3, #13
10048c38:	4013      	ands	r3, r2
10048c3a:	d010      	beq.n	10048c5e <HAL_UART_IRQHandler+0x5c2>
10048c3c:	239c      	movs	r3, #156	@ 0x9c
10048c3e:	18fb      	adds	r3, r7, r3
10048c40:	681a      	ldr	r2, [r3, #0]
10048c42:	2380      	movs	r3, #128	@ 0x80
10048c44:	03db      	lsls	r3, r3, #15
10048c46:	4013      	ands	r3, r2
10048c48:	d009      	beq.n	10048c5e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
10048c4a:	687b      	ldr	r3, [r7, #4]
10048c4c:	681b      	ldr	r3, [r3, #0]
10048c4e:	2280      	movs	r2, #128	@ 0x80
10048c50:	0352      	lsls	r2, r2, #13
10048c52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
10048c54:	687b      	ldr	r3, [r7, #4]
10048c56:	0018      	movs	r0, r3
10048c58:	f000 fc5d 	bl	10049516 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10048c5c:	e05a      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
10048c5e:	23a4      	movs	r3, #164	@ 0xa4
10048c60:	18fb      	adds	r3, r7, r3
10048c62:	681b      	ldr	r3, [r3, #0]
10048c64:	2280      	movs	r2, #128	@ 0x80
10048c66:	4013      	ands	r3, r2
10048c68:	d016      	beq.n	10048c98 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
10048c6a:	23a0      	movs	r3, #160	@ 0xa0
10048c6c:	18fb      	adds	r3, r7, r3
10048c6e:	681b      	ldr	r3, [r3, #0]
10048c70:	2280      	movs	r2, #128	@ 0x80
10048c72:	4013      	ands	r3, r2
10048c74:	d106      	bne.n	10048c84 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
10048c76:	239c      	movs	r3, #156	@ 0x9c
10048c78:	18fb      	adds	r3, r7, r3
10048c7a:	681a      	ldr	r2, [r3, #0]
10048c7c:	2380      	movs	r3, #128	@ 0x80
10048c7e:	041b      	lsls	r3, r3, #16
10048c80:	4013      	ands	r3, r2
10048c82:	d009      	beq.n	10048c98 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
10048c84:	687b      	ldr	r3, [r7, #4]
10048c86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10048c88:	2b00      	cmp	r3, #0
10048c8a:	d042      	beq.n	10048d12 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
10048c8c:	687b      	ldr	r3, [r7, #4]
10048c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10048c90:	687a      	ldr	r2, [r7, #4]
10048c92:	0010      	movs	r0, r2
10048c94:	4798      	blx	r3
    }
    return;
10048c96:	e03c      	b.n	10048d12 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
10048c98:	23a4      	movs	r3, #164	@ 0xa4
10048c9a:	18fb      	adds	r3, r7, r3
10048c9c:	681b      	ldr	r3, [r3, #0]
10048c9e:	2240      	movs	r2, #64	@ 0x40
10048ca0:	4013      	ands	r3, r2
10048ca2:	d00a      	beq.n	10048cba <HAL_UART_IRQHandler+0x61e>
10048ca4:	23a0      	movs	r3, #160	@ 0xa0
10048ca6:	18fb      	adds	r3, r7, r3
10048ca8:	681b      	ldr	r3, [r3, #0]
10048caa:	2240      	movs	r2, #64	@ 0x40
10048cac:	4013      	ands	r3, r2
10048cae:	d004      	beq.n	10048cba <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
10048cb0:	687b      	ldr	r3, [r7, #4]
10048cb2:	0018      	movs	r0, r3
10048cb4:	f000 fc03 	bl	100494be <UART_EndTransmit_IT>
    return;
10048cb8:	e02c      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
10048cba:	23a4      	movs	r3, #164	@ 0xa4
10048cbc:	18fb      	adds	r3, r7, r3
10048cbe:	681a      	ldr	r2, [r3, #0]
10048cc0:	2380      	movs	r3, #128	@ 0x80
10048cc2:	041b      	lsls	r3, r3, #16
10048cc4:	4013      	ands	r3, r2
10048cc6:	d00b      	beq.n	10048ce0 <HAL_UART_IRQHandler+0x644>
10048cc8:	23a0      	movs	r3, #160	@ 0xa0
10048cca:	18fb      	adds	r3, r7, r3
10048ccc:	681a      	ldr	r2, [r3, #0]
10048cce:	2380      	movs	r3, #128	@ 0x80
10048cd0:	05db      	lsls	r3, r3, #23
10048cd2:	4013      	ands	r3, r2
10048cd4:	d004      	beq.n	10048ce0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
10048cd6:	687b      	ldr	r3, [r7, #4]
10048cd8:	0018      	movs	r0, r3
10048cda:	f000 fc2c 	bl	10049536 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10048cde:	e019      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
10048ce0:	23a4      	movs	r3, #164	@ 0xa4
10048ce2:	18fb      	adds	r3, r7, r3
10048ce4:	681a      	ldr	r2, [r3, #0]
10048ce6:	2380      	movs	r3, #128	@ 0x80
10048ce8:	045b      	lsls	r3, r3, #17
10048cea:	4013      	ands	r3, r2
10048cec:	d012      	beq.n	10048d14 <HAL_UART_IRQHandler+0x678>
10048cee:	23a0      	movs	r3, #160	@ 0xa0
10048cf0:	18fb      	adds	r3, r7, r3
10048cf2:	681b      	ldr	r3, [r3, #0]
10048cf4:	2b00      	cmp	r3, #0
10048cf6:	da0d      	bge.n	10048d14 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
10048cf8:	687b      	ldr	r3, [r7, #4]
10048cfa:	0018      	movs	r0, r3
10048cfc:	f000 fc13 	bl	10049526 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10048d00:	e008      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
      return;
10048d02:	46c0      	nop			@ (mov r8, r8)
10048d04:	e006      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
    return;
10048d06:	46c0      	nop			@ (mov r8, r8)
10048d08:	e004      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
      return;
10048d0a:	46c0      	nop			@ (mov r8, r8)
10048d0c:	e002      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
      return;
10048d0e:	46c0      	nop			@ (mov r8, r8)
10048d10:	e000      	b.n	10048d14 <HAL_UART_IRQHandler+0x678>
    return;
10048d12:	46c0      	nop			@ (mov r8, r8)
  }
}
10048d14:	46bd      	mov	sp, r7
10048d16:	b02a      	add	sp, #168	@ 0xa8
10048d18:	bdb0      	pop	{r4, r5, r7, pc}
10048d1a:	46c0      	nop			@ (mov r8, r8)
10048d1c:	fffffeff 	.word	0xfffffeff
10048d20:	fffffedf 	.word	0xfffffedf
10048d24:	effffffe 	.word	0xeffffffe

10048d28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
10048d28:	b580      	push	{r7, lr}
10048d2a:	b082      	sub	sp, #8
10048d2c:	af00      	add	r7, sp, #0
10048d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
10048d30:	46c0      	nop			@ (mov r8, r8)
10048d32:	46bd      	mov	sp, r7
10048d34:	b002      	add	sp, #8
10048d36:	bd80      	pop	{r7, pc}

10048d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
10048d38:	b580      	push	{r7, lr}
10048d3a:	b082      	sub	sp, #8
10048d3c:	af00      	add	r7, sp, #0
10048d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
10048d40:	46c0      	nop			@ (mov r8, r8)
10048d42:	46bd      	mov	sp, r7
10048d44:	b002      	add	sp, #8
10048d46:	bd80      	pop	{r7, pc}

10048d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
10048d48:	b580      	push	{r7, lr}
10048d4a:	b082      	sub	sp, #8
10048d4c:	af00      	add	r7, sp, #0
10048d4e:	6078      	str	r0, [r7, #4]
10048d50:	000a      	movs	r2, r1
10048d52:	1cbb      	adds	r3, r7, #2
10048d54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
10048d56:	46c0      	nop			@ (mov r8, r8)
10048d58:	46bd      	mov	sp, r7
10048d5a:	b002      	add	sp, #8
10048d5c:	bd80      	pop	{r7, pc}
	...

10048d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10048d60:	b5b0      	push	{r4, r5, r7, lr}
10048d62:	b090      	sub	sp, #64	@ 0x40
10048d64:	af00      	add	r7, sp, #0
10048d66:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10048d68:	231b      	movs	r3, #27
10048d6a:	2220      	movs	r2, #32
10048d6c:	189b      	adds	r3, r3, r2
10048d6e:	19db      	adds	r3, r3, r7
10048d70:	2200      	movs	r2, #0
10048d72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10048d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d76:	689a      	ldr	r2, [r3, #8]
10048d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d7a:	691b      	ldr	r3, [r3, #16]
10048d7c:	431a      	orrs	r2, r3
10048d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d80:	695b      	ldr	r3, [r3, #20]
10048d82:	431a      	orrs	r2, r3
10048d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d86:	69db      	ldr	r3, [r3, #28]
10048d88:	4313      	orrs	r3, r2
10048d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10048d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d8e:	681b      	ldr	r3, [r3, #0]
10048d90:	681b      	ldr	r3, [r3, #0]
10048d92:	4aa1      	ldr	r2, [pc, #644]	@ (10049018 <UART_SetConfig+0x2b8>)
10048d94:	4013      	ands	r3, r2
10048d96:	0019      	movs	r1, r3
10048d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d9a:	681a      	ldr	r2, [r3, #0]
10048d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048d9e:	430b      	orrs	r3, r1
10048da0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048da4:	681b      	ldr	r3, [r3, #0]
10048da6:	685b      	ldr	r3, [r3, #4]
10048da8:	4a9c      	ldr	r2, [pc, #624]	@ (1004901c <UART_SetConfig+0x2bc>)
10048daa:	4013      	ands	r3, r2
10048dac:	0018      	movs	r0, r3
10048dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048db0:	68d9      	ldr	r1, [r3, #12]
10048db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048db4:	681a      	ldr	r2, [r3, #0]
10048db6:	0003      	movs	r3, r0
10048db8:	430b      	orrs	r3, r1
10048dba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10048dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dbe:	699b      	ldr	r3, [r3, #24]
10048dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dc4:	681b      	ldr	r3, [r3, #0]
10048dc6:	4a96      	ldr	r2, [pc, #600]	@ (10049020 <UART_SetConfig+0x2c0>)
10048dc8:	4293      	cmp	r3, r2
10048dca:	d004      	beq.n	10048dd6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10048dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dce:	6a1b      	ldr	r3, [r3, #32]
10048dd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048dd2:	4313      	orrs	r3, r2
10048dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dd8:	681b      	ldr	r3, [r3, #0]
10048dda:	689b      	ldr	r3, [r3, #8]
10048ddc:	4a91      	ldr	r2, [pc, #580]	@ (10049024 <UART_SetConfig+0x2c4>)
10048dde:	4013      	ands	r3, r2
10048de0:	0019      	movs	r1, r3
10048de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048de4:	681a      	ldr	r2, [r3, #0]
10048de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048de8:	430b      	orrs	r3, r1
10048dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10048dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dee:	681b      	ldr	r3, [r3, #0]
10048df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048df2:	220f      	movs	r2, #15
10048df4:	4393      	bics	r3, r2
10048df6:	0018      	movs	r0, r3
10048df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dfa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10048dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dfe:	681a      	ldr	r2, [r3, #0]
10048e00:	0003      	movs	r3, r0
10048e02:	430b      	orrs	r3, r1
10048e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e08:	681b      	ldr	r3, [r3, #0]
10048e0a:	4a85      	ldr	r2, [pc, #532]	@ (10049020 <UART_SetConfig+0x2c0>)
10048e0c:	4293      	cmp	r3, r2
10048e0e:	d16d      	bne.n	10048eec <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10048e10:	2010      	movs	r0, #16
10048e12:	f7fe ffef 	bl	10047df4 <HAL_RCCEx_GetPeriphCLKFreq>
10048e16:	0003      	movs	r3, r0
10048e18:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10048e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048e1c:	2b00      	cmp	r3, #0
10048e1e:	d100      	bne.n	10048e22 <UART_SetConfig+0xc2>
10048e20:	e0e3      	b.n	10048fea <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10048e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048e26:	4b80      	ldr	r3, [pc, #512]	@ (10049028 <UART_SetConfig+0x2c8>)
10048e28:	0052      	lsls	r2, r2, #1
10048e2a:	5ad3      	ldrh	r3, [r2, r3]
10048e2c:	0019      	movs	r1, r3
10048e2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048e30:	f7f7 f97a 	bl	10040128 <__udivsi3>
10048e34:	0003      	movs	r3, r0
10048e36:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e3a:	685a      	ldr	r2, [r3, #4]
10048e3c:	0013      	movs	r3, r2
10048e3e:	005b      	lsls	r3, r3, #1
10048e40:	189b      	adds	r3, r3, r2
10048e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048e44:	429a      	cmp	r2, r3
10048e46:	d305      	bcc.n	10048e54 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10048e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e4a:	685b      	ldr	r3, [r3, #4]
10048e4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048e50:	429a      	cmp	r2, r3
10048e52:	d906      	bls.n	10048e62 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10048e54:	231b      	movs	r3, #27
10048e56:	2220      	movs	r2, #32
10048e58:	189b      	adds	r3, r3, r2
10048e5a:	19db      	adds	r3, r3, r7
10048e5c:	2201      	movs	r2, #1
10048e5e:	701a      	strb	r2, [r3, #0]
10048e60:	e0c3      	b.n	10048fea <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048e64:	61bb      	str	r3, [r7, #24]
10048e66:	2300      	movs	r3, #0
10048e68:	61fb      	str	r3, [r7, #28]
10048e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048e6e:	4b6e      	ldr	r3, [pc, #440]	@ (10049028 <UART_SetConfig+0x2c8>)
10048e70:	0052      	lsls	r2, r2, #1
10048e72:	5ad3      	ldrh	r3, [r2, r3]
10048e74:	613b      	str	r3, [r7, #16]
10048e76:	2300      	movs	r3, #0
10048e78:	617b      	str	r3, [r7, #20]
10048e7a:	693a      	ldr	r2, [r7, #16]
10048e7c:	697b      	ldr	r3, [r7, #20]
10048e7e:	69b8      	ldr	r0, [r7, #24]
10048e80:	69f9      	ldr	r1, [r7, #28]
10048e82:	f7f7 fb01 	bl	10040488 <__aeabi_uldivmod>
10048e86:	0002      	movs	r2, r0
10048e88:	000b      	movs	r3, r1
10048e8a:	0e11      	lsrs	r1, r2, #24
10048e8c:	021d      	lsls	r5, r3, #8
10048e8e:	430d      	orrs	r5, r1
10048e90:	0214      	lsls	r4, r2, #8
10048e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e94:	685b      	ldr	r3, [r3, #4]
10048e96:	085b      	lsrs	r3, r3, #1
10048e98:	60bb      	str	r3, [r7, #8]
10048e9a:	2300      	movs	r3, #0
10048e9c:	60fb      	str	r3, [r7, #12]
10048e9e:	68b8      	ldr	r0, [r7, #8]
10048ea0:	68f9      	ldr	r1, [r7, #12]
10048ea2:	1900      	adds	r0, r0, r4
10048ea4:	4169      	adcs	r1, r5
10048ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ea8:	685b      	ldr	r3, [r3, #4]
10048eaa:	603b      	str	r3, [r7, #0]
10048eac:	2300      	movs	r3, #0
10048eae:	607b      	str	r3, [r7, #4]
10048eb0:	683a      	ldr	r2, [r7, #0]
10048eb2:	687b      	ldr	r3, [r7, #4]
10048eb4:	f7f7 fae8 	bl	10040488 <__aeabi_uldivmod>
10048eb8:	0002      	movs	r2, r0
10048eba:	000b      	movs	r3, r1
10048ebc:	0013      	movs	r3, r2
10048ebe:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048ec2:	23c0      	movs	r3, #192	@ 0xc0
10048ec4:	009b      	lsls	r3, r3, #2
10048ec6:	429a      	cmp	r2, r3
10048ec8:	d309      	bcc.n	10048ede <UART_SetConfig+0x17e>
10048eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048ecc:	2380      	movs	r3, #128	@ 0x80
10048ece:	035b      	lsls	r3, r3, #13
10048ed0:	429a      	cmp	r2, r3
10048ed2:	d204      	bcs.n	10048ede <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10048ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ed6:	681b      	ldr	r3, [r3, #0]
10048ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048eda:	60da      	str	r2, [r3, #12]
10048edc:	e085      	b.n	10048fea <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10048ede:	231b      	movs	r3, #27
10048ee0:	2220      	movs	r2, #32
10048ee2:	189b      	adds	r3, r3, r2
10048ee4:	19db      	adds	r3, r3, r7
10048ee6:	2201      	movs	r2, #1
10048ee8:	701a      	strb	r2, [r3, #0]
10048eea:	e07e      	b.n	10048fea <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10048eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048eee:	69da      	ldr	r2, [r3, #28]
10048ef0:	2380      	movs	r3, #128	@ 0x80
10048ef2:	021b      	lsls	r3, r3, #8
10048ef4:	429a      	cmp	r2, r3
10048ef6:	d148      	bne.n	10048f8a <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10048ef8:	4b4c      	ldr	r3, [pc, #304]	@ (1004902c <UART_SetConfig+0x2cc>)
10048efa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10048efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048efe:	2b00      	cmp	r3, #0
10048f00:	d100      	bne.n	10048f04 <UART_SetConfig+0x1a4>
10048f02:	e072      	b.n	10048fea <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048f08:	4b47      	ldr	r3, [pc, #284]	@ (10049028 <UART_SetConfig+0x2c8>)
10048f0a:	0052      	lsls	r2, r2, #1
10048f0c:	5ad3      	ldrh	r3, [r2, r3]
10048f0e:	0019      	movs	r1, r3
10048f10:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048f12:	f7f7 f909 	bl	10040128 <__udivsi3>
10048f16:	0003      	movs	r3, r0
10048f18:	005a      	lsls	r2, r3, #1
10048f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f1c:	685b      	ldr	r3, [r3, #4]
10048f1e:	085b      	lsrs	r3, r3, #1
10048f20:	18d2      	adds	r2, r2, r3
10048f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f24:	685b      	ldr	r3, [r3, #4]
10048f26:	0019      	movs	r1, r3
10048f28:	0010      	movs	r0, r2
10048f2a:	f7f7 f8fd 	bl	10040128 <__udivsi3>
10048f2e:	0003      	movs	r3, r0
10048f30:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048f34:	2b0f      	cmp	r3, #15
10048f36:	d921      	bls.n	10048f7c <UART_SetConfig+0x21c>
10048f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048f3a:	2380      	movs	r3, #128	@ 0x80
10048f3c:	025b      	lsls	r3, r3, #9
10048f3e:	429a      	cmp	r2, r3
10048f40:	d21c      	bcs.n	10048f7c <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10048f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048f44:	b29a      	uxth	r2, r3
10048f46:	200e      	movs	r0, #14
10048f48:	2420      	movs	r4, #32
10048f4a:	1903      	adds	r3, r0, r4
10048f4c:	19db      	adds	r3, r3, r7
10048f4e:	210f      	movs	r1, #15
10048f50:	438a      	bics	r2, r1
10048f52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10048f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048f56:	085b      	lsrs	r3, r3, #1
10048f58:	b29b      	uxth	r3, r3
10048f5a:	2207      	movs	r2, #7
10048f5c:	4013      	ands	r3, r2
10048f5e:	b299      	uxth	r1, r3
10048f60:	1903      	adds	r3, r0, r4
10048f62:	19db      	adds	r3, r3, r7
10048f64:	1902      	adds	r2, r0, r4
10048f66:	19d2      	adds	r2, r2, r7
10048f68:	8812      	ldrh	r2, [r2, #0]
10048f6a:	430a      	orrs	r2, r1
10048f6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10048f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f70:	681b      	ldr	r3, [r3, #0]
10048f72:	1902      	adds	r2, r0, r4
10048f74:	19d2      	adds	r2, r2, r7
10048f76:	8812      	ldrh	r2, [r2, #0]
10048f78:	60da      	str	r2, [r3, #12]
10048f7a:	e036      	b.n	10048fea <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10048f7c:	231b      	movs	r3, #27
10048f7e:	2220      	movs	r2, #32
10048f80:	189b      	adds	r3, r3, r2
10048f82:	19db      	adds	r3, r3, r7
10048f84:	2201      	movs	r2, #1
10048f86:	701a      	strb	r2, [r3, #0]
10048f88:	e02f      	b.n	10048fea <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10048f8a:	4b28      	ldr	r3, [pc, #160]	@ (1004902c <UART_SetConfig+0x2cc>)
10048f8c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10048f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048f90:	2b00      	cmp	r3, #0
10048f92:	d02a      	beq.n	10048fea <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048f98:	4b23      	ldr	r3, [pc, #140]	@ (10049028 <UART_SetConfig+0x2c8>)
10048f9a:	0052      	lsls	r2, r2, #1
10048f9c:	5ad3      	ldrh	r3, [r2, r3]
10048f9e:	0019      	movs	r1, r3
10048fa0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048fa2:	f7f7 f8c1 	bl	10040128 <__udivsi3>
10048fa6:	0003      	movs	r3, r0
10048fa8:	001a      	movs	r2, r3
10048faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048fac:	685b      	ldr	r3, [r3, #4]
10048fae:	085b      	lsrs	r3, r3, #1
10048fb0:	18d2      	adds	r2, r2, r3
10048fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048fb4:	685b      	ldr	r3, [r3, #4]
10048fb6:	0019      	movs	r1, r3
10048fb8:	0010      	movs	r0, r2
10048fba:	f7f7 f8b5 	bl	10040128 <__udivsi3>
10048fbe:	0003      	movs	r3, r0
10048fc0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048fc4:	2b0f      	cmp	r3, #15
10048fc6:	d90a      	bls.n	10048fde <UART_SetConfig+0x27e>
10048fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048fca:	2380      	movs	r3, #128	@ 0x80
10048fcc:	025b      	lsls	r3, r3, #9
10048fce:	429a      	cmp	r2, r3
10048fd0:	d205      	bcs.n	10048fde <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048fd4:	b29a      	uxth	r2, r3
10048fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048fd8:	681b      	ldr	r3, [r3, #0]
10048fda:	60da      	str	r2, [r3, #12]
10048fdc:	e005      	b.n	10048fea <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10048fde:	231b      	movs	r3, #27
10048fe0:	2220      	movs	r2, #32
10048fe2:	189b      	adds	r3, r3, r2
10048fe4:	19db      	adds	r3, r3, r7
10048fe6:	2201      	movs	r2, #1
10048fe8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10048fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048fec:	226a      	movs	r2, #106	@ 0x6a
10048fee:	2101      	movs	r1, #1
10048ff0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ff4:	2268      	movs	r2, #104	@ 0x68
10048ff6:	2101      	movs	r1, #1
10048ff8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10048ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ffc:	2200      	movs	r2, #0
10048ffe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10049000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049002:	2200      	movs	r2, #0
10049004:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10049006:	231b      	movs	r3, #27
10049008:	2220      	movs	r2, #32
1004900a:	189b      	adds	r3, r3, r2
1004900c:	19db      	adds	r3, r3, r7
1004900e:	781b      	ldrb	r3, [r3, #0]
}
10049010:	0018      	movs	r0, r3
10049012:	46bd      	mov	sp, r7
10049014:	b010      	add	sp, #64	@ 0x40
10049016:	bdb0      	pop	{r4, r5, r7, pc}
10049018:	cfff69f3 	.word	0xcfff69f3
1004901c:	ffffcfff 	.word	0xffffcfff
10049020:	41005000 	.word	0x41005000
10049024:	11fff4ff 	.word	0x11fff4ff
10049028:	1004a6bc 	.word	0x1004a6bc
1004902c:	00f42400 	.word	0x00f42400

10049030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10049030:	b580      	push	{r7, lr}
10049032:	b082      	sub	sp, #8
10049034:	af00      	add	r7, sp, #0
10049036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10049038:	687b      	ldr	r3, [r7, #4]
1004903a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004903c:	2208      	movs	r2, #8
1004903e:	4013      	ands	r3, r2
10049040:	d00b      	beq.n	1004905a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10049042:	687b      	ldr	r3, [r7, #4]
10049044:	681b      	ldr	r3, [r3, #0]
10049046:	685b      	ldr	r3, [r3, #4]
10049048:	4a4a      	ldr	r2, [pc, #296]	@ (10049174 <UART_AdvFeatureConfig+0x144>)
1004904a:	4013      	ands	r3, r2
1004904c:	0019      	movs	r1, r3
1004904e:	687b      	ldr	r3, [r7, #4]
10049050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10049052:	687b      	ldr	r3, [r7, #4]
10049054:	681b      	ldr	r3, [r3, #0]
10049056:	430a      	orrs	r2, r1
10049058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004905a:	687b      	ldr	r3, [r7, #4]
1004905c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004905e:	2201      	movs	r2, #1
10049060:	4013      	ands	r3, r2
10049062:	d00b      	beq.n	1004907c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10049064:	687b      	ldr	r3, [r7, #4]
10049066:	681b      	ldr	r3, [r3, #0]
10049068:	685b      	ldr	r3, [r3, #4]
1004906a:	4a43      	ldr	r2, [pc, #268]	@ (10049178 <UART_AdvFeatureConfig+0x148>)
1004906c:	4013      	ands	r3, r2
1004906e:	0019      	movs	r1, r3
10049070:	687b      	ldr	r3, [r7, #4]
10049072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10049074:	687b      	ldr	r3, [r7, #4]
10049076:	681b      	ldr	r3, [r3, #0]
10049078:	430a      	orrs	r2, r1
1004907a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004907c:	687b      	ldr	r3, [r7, #4]
1004907e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049080:	2202      	movs	r2, #2
10049082:	4013      	ands	r3, r2
10049084:	d00b      	beq.n	1004909e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10049086:	687b      	ldr	r3, [r7, #4]
10049088:	681b      	ldr	r3, [r3, #0]
1004908a:	685b      	ldr	r3, [r3, #4]
1004908c:	4a3b      	ldr	r2, [pc, #236]	@ (1004917c <UART_AdvFeatureConfig+0x14c>)
1004908e:	4013      	ands	r3, r2
10049090:	0019      	movs	r1, r3
10049092:	687b      	ldr	r3, [r7, #4]
10049094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10049096:	687b      	ldr	r3, [r7, #4]
10049098:	681b      	ldr	r3, [r3, #0]
1004909a:	430a      	orrs	r2, r1
1004909c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004909e:	687b      	ldr	r3, [r7, #4]
100490a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100490a2:	2204      	movs	r2, #4
100490a4:	4013      	ands	r3, r2
100490a6:	d00b      	beq.n	100490c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
100490a8:	687b      	ldr	r3, [r7, #4]
100490aa:	681b      	ldr	r3, [r3, #0]
100490ac:	685b      	ldr	r3, [r3, #4]
100490ae:	4a34      	ldr	r2, [pc, #208]	@ (10049180 <UART_AdvFeatureConfig+0x150>)
100490b0:	4013      	ands	r3, r2
100490b2:	0019      	movs	r1, r3
100490b4:	687b      	ldr	r3, [r7, #4]
100490b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100490b8:	687b      	ldr	r3, [r7, #4]
100490ba:	681b      	ldr	r3, [r3, #0]
100490bc:	430a      	orrs	r2, r1
100490be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
100490c0:	687b      	ldr	r3, [r7, #4]
100490c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100490c4:	2210      	movs	r2, #16
100490c6:	4013      	ands	r3, r2
100490c8:	d00b      	beq.n	100490e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
100490ca:	687b      	ldr	r3, [r7, #4]
100490cc:	681b      	ldr	r3, [r3, #0]
100490ce:	689b      	ldr	r3, [r3, #8]
100490d0:	4a2c      	ldr	r2, [pc, #176]	@ (10049184 <UART_AdvFeatureConfig+0x154>)
100490d2:	4013      	ands	r3, r2
100490d4:	0019      	movs	r1, r3
100490d6:	687b      	ldr	r3, [r7, #4]
100490d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
100490da:	687b      	ldr	r3, [r7, #4]
100490dc:	681b      	ldr	r3, [r3, #0]
100490de:	430a      	orrs	r2, r1
100490e0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
100490e2:	687b      	ldr	r3, [r7, #4]
100490e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100490e6:	2220      	movs	r2, #32
100490e8:	4013      	ands	r3, r2
100490ea:	d00b      	beq.n	10049104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
100490ec:	687b      	ldr	r3, [r7, #4]
100490ee:	681b      	ldr	r3, [r3, #0]
100490f0:	689b      	ldr	r3, [r3, #8]
100490f2:	4a25      	ldr	r2, [pc, #148]	@ (10049188 <UART_AdvFeatureConfig+0x158>)
100490f4:	4013      	ands	r3, r2
100490f6:	0019      	movs	r1, r3
100490f8:	687b      	ldr	r3, [r7, #4]
100490fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100490fc:	687b      	ldr	r3, [r7, #4]
100490fe:	681b      	ldr	r3, [r3, #0]
10049100:	430a      	orrs	r2, r1
10049102:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10049104:	687b      	ldr	r3, [r7, #4]
10049106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049108:	2240      	movs	r2, #64	@ 0x40
1004910a:	4013      	ands	r3, r2
1004910c:	d01d      	beq.n	1004914a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004910e:	687b      	ldr	r3, [r7, #4]
10049110:	681b      	ldr	r3, [r3, #0]
10049112:	685b      	ldr	r3, [r3, #4]
10049114:	4a1d      	ldr	r2, [pc, #116]	@ (1004918c <UART_AdvFeatureConfig+0x15c>)
10049116:	4013      	ands	r3, r2
10049118:	0019      	movs	r1, r3
1004911a:	687b      	ldr	r3, [r7, #4]
1004911c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004911e:	687b      	ldr	r3, [r7, #4]
10049120:	681b      	ldr	r3, [r3, #0]
10049122:	430a      	orrs	r2, r1
10049124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10049126:	687b      	ldr	r3, [r7, #4]
10049128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004912a:	2380      	movs	r3, #128	@ 0x80
1004912c:	035b      	lsls	r3, r3, #13
1004912e:	429a      	cmp	r2, r3
10049130:	d10b      	bne.n	1004914a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10049132:	687b      	ldr	r3, [r7, #4]
10049134:	681b      	ldr	r3, [r3, #0]
10049136:	685b      	ldr	r3, [r3, #4]
10049138:	4a15      	ldr	r2, [pc, #84]	@ (10049190 <UART_AdvFeatureConfig+0x160>)
1004913a:	4013      	ands	r3, r2
1004913c:	0019      	movs	r1, r3
1004913e:	687b      	ldr	r3, [r7, #4]
10049140:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10049142:	687b      	ldr	r3, [r7, #4]
10049144:	681b      	ldr	r3, [r3, #0]
10049146:	430a      	orrs	r2, r1
10049148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004914a:	687b      	ldr	r3, [r7, #4]
1004914c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004914e:	2280      	movs	r2, #128	@ 0x80
10049150:	4013      	ands	r3, r2
10049152:	d00b      	beq.n	1004916c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10049154:	687b      	ldr	r3, [r7, #4]
10049156:	681b      	ldr	r3, [r3, #0]
10049158:	685b      	ldr	r3, [r3, #4]
1004915a:	4a0e      	ldr	r2, [pc, #56]	@ (10049194 <UART_AdvFeatureConfig+0x164>)
1004915c:	4013      	ands	r3, r2
1004915e:	0019      	movs	r1, r3
10049160:	687b      	ldr	r3, [r7, #4]
10049162:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10049164:	687b      	ldr	r3, [r7, #4]
10049166:	681b      	ldr	r3, [r3, #0]
10049168:	430a      	orrs	r2, r1
1004916a:	605a      	str	r2, [r3, #4]
  }
}
1004916c:	46c0      	nop			@ (mov r8, r8)
1004916e:	46bd      	mov	sp, r7
10049170:	b002      	add	sp, #8
10049172:	bd80      	pop	{r7, pc}
10049174:	ffff7fff 	.word	0xffff7fff
10049178:	fffdffff 	.word	0xfffdffff
1004917c:	fffeffff 	.word	0xfffeffff
10049180:	fffbffff 	.word	0xfffbffff
10049184:	ffffefff 	.word	0xffffefff
10049188:	ffffdfff 	.word	0xffffdfff
1004918c:	ffefffff 	.word	0xffefffff
10049190:	ff9fffff 	.word	0xff9fffff
10049194:	fff7ffff 	.word	0xfff7ffff

10049198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10049198:	b580      	push	{r7, lr}
1004919a:	b092      	sub	sp, #72	@ 0x48
1004919c:	af02      	add	r7, sp, #8
1004919e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
100491a0:	687b      	ldr	r3, [r7, #4]
100491a2:	2290      	movs	r2, #144	@ 0x90
100491a4:	2100      	movs	r1, #0
100491a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
100491a8:	f7fa ff88 	bl	100440bc <HAL_GetTick>
100491ac:	0003      	movs	r3, r0
100491ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
100491b0:	687b      	ldr	r3, [r7, #4]
100491b2:	681b      	ldr	r3, [r3, #0]
100491b4:	681b      	ldr	r3, [r3, #0]
100491b6:	2208      	movs	r2, #8
100491b8:	4013      	ands	r3, r2
100491ba:	2b08      	cmp	r3, #8
100491bc:	d12d      	bne.n	1004921a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
100491be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100491c0:	2280      	movs	r2, #128	@ 0x80
100491c2:	0391      	lsls	r1, r2, #14
100491c4:	6878      	ldr	r0, [r7, #4]
100491c6:	4a47      	ldr	r2, [pc, #284]	@ (100492e4 <UART_CheckIdleState+0x14c>)
100491c8:	9200      	str	r2, [sp, #0]
100491ca:	2200      	movs	r2, #0
100491cc:	f000 f88e 	bl	100492ec <UART_WaitOnFlagUntilTimeout>
100491d0:	1e03      	subs	r3, r0, #0
100491d2:	d022      	beq.n	1004921a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100491d4:	f3ef 8310 	mrs	r3, PRIMASK
100491d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
100491da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
100491dc:	63bb      	str	r3, [r7, #56]	@ 0x38
100491de:	2301      	movs	r3, #1
100491e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100491e4:	f383 8810 	msr	PRIMASK, r3
}
100491e8:	46c0      	nop			@ (mov r8, r8)
100491ea:	687b      	ldr	r3, [r7, #4]
100491ec:	681b      	ldr	r3, [r3, #0]
100491ee:	681a      	ldr	r2, [r3, #0]
100491f0:	687b      	ldr	r3, [r7, #4]
100491f2:	681b      	ldr	r3, [r3, #0]
100491f4:	2180      	movs	r1, #128	@ 0x80
100491f6:	438a      	bics	r2, r1
100491f8:	601a      	str	r2, [r3, #0]
100491fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100491fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10049200:	f383 8810 	msr	PRIMASK, r3
}
10049204:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10049206:	687b      	ldr	r3, [r7, #4]
10049208:	2288      	movs	r2, #136	@ 0x88
1004920a:	2120      	movs	r1, #32
1004920c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004920e:	687b      	ldr	r3, [r7, #4]
10049210:	2284      	movs	r2, #132	@ 0x84
10049212:	2100      	movs	r1, #0
10049214:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10049216:	2303      	movs	r3, #3
10049218:	e060      	b.n	100492dc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004921a:	687b      	ldr	r3, [r7, #4]
1004921c:	681b      	ldr	r3, [r3, #0]
1004921e:	681b      	ldr	r3, [r3, #0]
10049220:	2204      	movs	r2, #4
10049222:	4013      	ands	r3, r2
10049224:	2b04      	cmp	r3, #4
10049226:	d146      	bne.n	100492b6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10049228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004922a:	2280      	movs	r2, #128	@ 0x80
1004922c:	03d1      	lsls	r1, r2, #15
1004922e:	6878      	ldr	r0, [r7, #4]
10049230:	4a2c      	ldr	r2, [pc, #176]	@ (100492e4 <UART_CheckIdleState+0x14c>)
10049232:	9200      	str	r2, [sp, #0]
10049234:	2200      	movs	r2, #0
10049236:	f000 f859 	bl	100492ec <UART_WaitOnFlagUntilTimeout>
1004923a:	1e03      	subs	r3, r0, #0
1004923c:	d03b      	beq.n	100492b6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004923e:	f3ef 8310 	mrs	r3, PRIMASK
10049242:	60fb      	str	r3, [r7, #12]
  return(result);
10049244:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10049246:	637b      	str	r3, [r7, #52]	@ 0x34
10049248:	2301      	movs	r3, #1
1004924a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004924c:	693b      	ldr	r3, [r7, #16]
1004924e:	f383 8810 	msr	PRIMASK, r3
}
10049252:	46c0      	nop			@ (mov r8, r8)
10049254:	687b      	ldr	r3, [r7, #4]
10049256:	681b      	ldr	r3, [r3, #0]
10049258:	681a      	ldr	r2, [r3, #0]
1004925a:	687b      	ldr	r3, [r7, #4]
1004925c:	681b      	ldr	r3, [r3, #0]
1004925e:	4922      	ldr	r1, [pc, #136]	@ (100492e8 <UART_CheckIdleState+0x150>)
10049260:	400a      	ands	r2, r1
10049262:	601a      	str	r2, [r3, #0]
10049264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049266:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049268:	697b      	ldr	r3, [r7, #20]
1004926a:	f383 8810 	msr	PRIMASK, r3
}
1004926e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049270:	f3ef 8310 	mrs	r3, PRIMASK
10049274:	61bb      	str	r3, [r7, #24]
  return(result);
10049276:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10049278:	633b      	str	r3, [r7, #48]	@ 0x30
1004927a:	2301      	movs	r3, #1
1004927c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004927e:	69fb      	ldr	r3, [r7, #28]
10049280:	f383 8810 	msr	PRIMASK, r3
}
10049284:	46c0      	nop			@ (mov r8, r8)
10049286:	687b      	ldr	r3, [r7, #4]
10049288:	681b      	ldr	r3, [r3, #0]
1004928a:	689a      	ldr	r2, [r3, #8]
1004928c:	687b      	ldr	r3, [r7, #4]
1004928e:	681b      	ldr	r3, [r3, #0]
10049290:	2101      	movs	r1, #1
10049292:	438a      	bics	r2, r1
10049294:	609a      	str	r2, [r3, #8]
10049296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049298:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004929a:	6a3b      	ldr	r3, [r7, #32]
1004929c:	f383 8810 	msr	PRIMASK, r3
}
100492a0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
100492a2:	687b      	ldr	r3, [r7, #4]
100492a4:	228c      	movs	r2, #140	@ 0x8c
100492a6:	2120      	movs	r1, #32
100492a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
100492aa:	687b      	ldr	r3, [r7, #4]
100492ac:	2284      	movs	r2, #132	@ 0x84
100492ae:	2100      	movs	r1, #0
100492b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
100492b2:	2303      	movs	r3, #3
100492b4:	e012      	b.n	100492dc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
100492b6:	687b      	ldr	r3, [r7, #4]
100492b8:	2288      	movs	r2, #136	@ 0x88
100492ba:	2120      	movs	r1, #32
100492bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
100492be:	687b      	ldr	r3, [r7, #4]
100492c0:	228c      	movs	r2, #140	@ 0x8c
100492c2:	2120      	movs	r1, #32
100492c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100492c6:	687b      	ldr	r3, [r7, #4]
100492c8:	2200      	movs	r2, #0
100492ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
100492cc:	687b      	ldr	r3, [r7, #4]
100492ce:	2200      	movs	r2, #0
100492d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
100492d2:	687b      	ldr	r3, [r7, #4]
100492d4:	2284      	movs	r2, #132	@ 0x84
100492d6:	2100      	movs	r1, #0
100492d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100492da:	2300      	movs	r3, #0
}
100492dc:	0018      	movs	r0, r3
100492de:	46bd      	mov	sp, r7
100492e0:	b010      	add	sp, #64	@ 0x40
100492e2:	bd80      	pop	{r7, pc}
100492e4:	01ffffff 	.word	0x01ffffff
100492e8:	fffffedf 	.word	0xfffffedf

100492ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
100492ec:	b580      	push	{r7, lr}
100492ee:	b084      	sub	sp, #16
100492f0:	af00      	add	r7, sp, #0
100492f2:	60f8      	str	r0, [r7, #12]
100492f4:	60b9      	str	r1, [r7, #8]
100492f6:	603b      	str	r3, [r7, #0]
100492f8:	1dfb      	adds	r3, r7, #7
100492fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100492fc:	e051      	b.n	100493a2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100492fe:	69bb      	ldr	r3, [r7, #24]
10049300:	3301      	adds	r3, #1
10049302:	d04e      	beq.n	100493a2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10049304:	f7fa feda 	bl	100440bc <HAL_GetTick>
10049308:	0002      	movs	r2, r0
1004930a:	683b      	ldr	r3, [r7, #0]
1004930c:	1ad3      	subs	r3, r2, r3
1004930e:	69ba      	ldr	r2, [r7, #24]
10049310:	429a      	cmp	r2, r3
10049312:	d302      	bcc.n	1004931a <UART_WaitOnFlagUntilTimeout+0x2e>
10049314:	69bb      	ldr	r3, [r7, #24]
10049316:	2b00      	cmp	r3, #0
10049318:	d101      	bne.n	1004931e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004931a:	2303      	movs	r3, #3
1004931c:	e051      	b.n	100493c2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004931e:	68fb      	ldr	r3, [r7, #12]
10049320:	681b      	ldr	r3, [r3, #0]
10049322:	681b      	ldr	r3, [r3, #0]
10049324:	2204      	movs	r2, #4
10049326:	4013      	ands	r3, r2
10049328:	d03b      	beq.n	100493a2 <UART_WaitOnFlagUntilTimeout+0xb6>
1004932a:	68bb      	ldr	r3, [r7, #8]
1004932c:	2b80      	cmp	r3, #128	@ 0x80
1004932e:	d038      	beq.n	100493a2 <UART_WaitOnFlagUntilTimeout+0xb6>
10049330:	68bb      	ldr	r3, [r7, #8]
10049332:	2b40      	cmp	r3, #64	@ 0x40
10049334:	d035      	beq.n	100493a2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10049336:	68fb      	ldr	r3, [r7, #12]
10049338:	681b      	ldr	r3, [r3, #0]
1004933a:	69db      	ldr	r3, [r3, #28]
1004933c:	2208      	movs	r2, #8
1004933e:	4013      	ands	r3, r2
10049340:	2b08      	cmp	r3, #8
10049342:	d111      	bne.n	10049368 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10049344:	68fb      	ldr	r3, [r7, #12]
10049346:	681b      	ldr	r3, [r3, #0]
10049348:	2208      	movs	r2, #8
1004934a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004934c:	68fb      	ldr	r3, [r7, #12]
1004934e:	0018      	movs	r0, r3
10049350:	f000 f83c 	bl	100493cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10049354:	68fb      	ldr	r3, [r7, #12]
10049356:	2290      	movs	r2, #144	@ 0x90
10049358:	2108      	movs	r1, #8
1004935a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004935c:	68fb      	ldr	r3, [r7, #12]
1004935e:	2284      	movs	r2, #132	@ 0x84
10049360:	2100      	movs	r1, #0
10049362:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10049364:	2301      	movs	r3, #1
10049366:	e02c      	b.n	100493c2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10049368:	68fb      	ldr	r3, [r7, #12]
1004936a:	681b      	ldr	r3, [r3, #0]
1004936c:	69da      	ldr	r2, [r3, #28]
1004936e:	2380      	movs	r3, #128	@ 0x80
10049370:	011b      	lsls	r3, r3, #4
10049372:	401a      	ands	r2, r3
10049374:	2380      	movs	r3, #128	@ 0x80
10049376:	011b      	lsls	r3, r3, #4
10049378:	429a      	cmp	r2, r3
1004937a:	d112      	bne.n	100493a2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004937c:	68fb      	ldr	r3, [r7, #12]
1004937e:	681b      	ldr	r3, [r3, #0]
10049380:	2280      	movs	r2, #128	@ 0x80
10049382:	0112      	lsls	r2, r2, #4
10049384:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10049386:	68fb      	ldr	r3, [r7, #12]
10049388:	0018      	movs	r0, r3
1004938a:	f000 f81f 	bl	100493cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004938e:	68fb      	ldr	r3, [r7, #12]
10049390:	2290      	movs	r2, #144	@ 0x90
10049392:	2120      	movs	r1, #32
10049394:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10049396:	68fb      	ldr	r3, [r7, #12]
10049398:	2284      	movs	r2, #132	@ 0x84
1004939a:	2100      	movs	r1, #0
1004939c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004939e:	2303      	movs	r3, #3
100493a0:	e00f      	b.n	100493c2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100493a2:	68fb      	ldr	r3, [r7, #12]
100493a4:	681b      	ldr	r3, [r3, #0]
100493a6:	69db      	ldr	r3, [r3, #28]
100493a8:	68ba      	ldr	r2, [r7, #8]
100493aa:	4013      	ands	r3, r2
100493ac:	68ba      	ldr	r2, [r7, #8]
100493ae:	1ad3      	subs	r3, r2, r3
100493b0:	425a      	negs	r2, r3
100493b2:	4153      	adcs	r3, r2
100493b4:	b2db      	uxtb	r3, r3
100493b6:	001a      	movs	r2, r3
100493b8:	1dfb      	adds	r3, r7, #7
100493ba:	781b      	ldrb	r3, [r3, #0]
100493bc:	429a      	cmp	r2, r3
100493be:	d09e      	beq.n	100492fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
100493c0:	2300      	movs	r3, #0
}
100493c2:	0018      	movs	r0, r3
100493c4:	46bd      	mov	sp, r7
100493c6:	b004      	add	sp, #16
100493c8:	bd80      	pop	{r7, pc}
	...

100493cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
100493cc:	b580      	push	{r7, lr}
100493ce:	b08e      	sub	sp, #56	@ 0x38
100493d0:	af00      	add	r7, sp, #0
100493d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100493d4:	f3ef 8310 	mrs	r3, PRIMASK
100493d8:	617b      	str	r3, [r7, #20]
  return(result);
100493da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100493dc:	637b      	str	r3, [r7, #52]	@ 0x34
100493de:	2301      	movs	r3, #1
100493e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100493e2:	69bb      	ldr	r3, [r7, #24]
100493e4:	f383 8810 	msr	PRIMASK, r3
}
100493e8:	46c0      	nop			@ (mov r8, r8)
100493ea:	687b      	ldr	r3, [r7, #4]
100493ec:	681b      	ldr	r3, [r3, #0]
100493ee:	681a      	ldr	r2, [r3, #0]
100493f0:	687b      	ldr	r3, [r7, #4]
100493f2:	681b      	ldr	r3, [r3, #0]
100493f4:	4926      	ldr	r1, [pc, #152]	@ (10049490 <UART_EndRxTransfer+0xc4>)
100493f6:	400a      	ands	r2, r1
100493f8:	601a      	str	r2, [r3, #0]
100493fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100493fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100493fe:	69fb      	ldr	r3, [r7, #28]
10049400:	f383 8810 	msr	PRIMASK, r3
}
10049404:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049406:	f3ef 8310 	mrs	r3, PRIMASK
1004940a:	623b      	str	r3, [r7, #32]
  return(result);
1004940c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004940e:	633b      	str	r3, [r7, #48]	@ 0x30
10049410:	2301      	movs	r3, #1
10049412:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049416:	f383 8810 	msr	PRIMASK, r3
}
1004941a:	46c0      	nop			@ (mov r8, r8)
1004941c:	687b      	ldr	r3, [r7, #4]
1004941e:	681b      	ldr	r3, [r3, #0]
10049420:	689a      	ldr	r2, [r3, #8]
10049422:	687b      	ldr	r3, [r7, #4]
10049424:	681b      	ldr	r3, [r3, #0]
10049426:	491b      	ldr	r1, [pc, #108]	@ (10049494 <UART_EndRxTransfer+0xc8>)
10049428:	400a      	ands	r2, r1
1004942a:	609a      	str	r2, [r3, #8]
1004942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004942e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049432:	f383 8810 	msr	PRIMASK, r3
}
10049436:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10049438:	687b      	ldr	r3, [r7, #4]
1004943a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004943c:	2b01      	cmp	r3, #1
1004943e:	d118      	bne.n	10049472 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049440:	f3ef 8310 	mrs	r3, PRIMASK
10049444:	60bb      	str	r3, [r7, #8]
  return(result);
10049446:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10049448:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004944a:	2301      	movs	r3, #1
1004944c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004944e:	68fb      	ldr	r3, [r7, #12]
10049450:	f383 8810 	msr	PRIMASK, r3
}
10049454:	46c0      	nop			@ (mov r8, r8)
10049456:	687b      	ldr	r3, [r7, #4]
10049458:	681b      	ldr	r3, [r3, #0]
1004945a:	681a      	ldr	r2, [r3, #0]
1004945c:	687b      	ldr	r3, [r7, #4]
1004945e:	681b      	ldr	r3, [r3, #0]
10049460:	2110      	movs	r1, #16
10049462:	438a      	bics	r2, r1
10049464:	601a      	str	r2, [r3, #0]
10049466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10049468:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004946a:	693b      	ldr	r3, [r7, #16]
1004946c:	f383 8810 	msr	PRIMASK, r3
}
10049470:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10049472:	687b      	ldr	r3, [r7, #4]
10049474:	228c      	movs	r2, #140	@ 0x8c
10049476:	2120      	movs	r1, #32
10049478:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004947a:	687b      	ldr	r3, [r7, #4]
1004947c:	2200      	movs	r2, #0
1004947e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10049480:	687b      	ldr	r3, [r7, #4]
10049482:	2200      	movs	r2, #0
10049484:	675a      	str	r2, [r3, #116]	@ 0x74
}
10049486:	46c0      	nop			@ (mov r8, r8)
10049488:	46bd      	mov	sp, r7
1004948a:	b00e      	add	sp, #56	@ 0x38
1004948c:	bd80      	pop	{r7, pc}
1004948e:	46c0      	nop			@ (mov r8, r8)
10049490:	fffffedf 	.word	0xfffffedf
10049494:	effffffe 	.word	0xeffffffe

10049498 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
10049498:	b580      	push	{r7, lr}
1004949a:	b084      	sub	sp, #16
1004949c:	af00      	add	r7, sp, #0
1004949e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
100494a0:	687b      	ldr	r3, [r7, #4]
100494a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100494a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
100494a6:	68fb      	ldr	r3, [r7, #12]
100494a8:	225e      	movs	r2, #94	@ 0x5e
100494aa:	2100      	movs	r1, #0
100494ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
100494ae:	68fb      	ldr	r3, [r7, #12]
100494b0:	0018      	movs	r0, r3
100494b2:	f7ff fc41 	bl	10048d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
100494b6:	46c0      	nop			@ (mov r8, r8)
100494b8:	46bd      	mov	sp, r7
100494ba:	b004      	add	sp, #16
100494bc:	bd80      	pop	{r7, pc}

100494be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
100494be:	b580      	push	{r7, lr}
100494c0:	b086      	sub	sp, #24
100494c2:	af00      	add	r7, sp, #0
100494c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100494c6:	f3ef 8310 	mrs	r3, PRIMASK
100494ca:	60bb      	str	r3, [r7, #8]
  return(result);
100494cc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
100494ce:	617b      	str	r3, [r7, #20]
100494d0:	2301      	movs	r3, #1
100494d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100494d4:	68fb      	ldr	r3, [r7, #12]
100494d6:	f383 8810 	msr	PRIMASK, r3
}
100494da:	46c0      	nop			@ (mov r8, r8)
100494dc:	687b      	ldr	r3, [r7, #4]
100494de:	681b      	ldr	r3, [r3, #0]
100494e0:	681a      	ldr	r2, [r3, #0]
100494e2:	687b      	ldr	r3, [r7, #4]
100494e4:	681b      	ldr	r3, [r3, #0]
100494e6:	2140      	movs	r1, #64	@ 0x40
100494e8:	438a      	bics	r2, r1
100494ea:	601a      	str	r2, [r3, #0]
100494ec:	697b      	ldr	r3, [r7, #20]
100494ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100494f0:	693b      	ldr	r3, [r7, #16]
100494f2:	f383 8810 	msr	PRIMASK, r3
}
100494f6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
100494f8:	687b      	ldr	r3, [r7, #4]
100494fa:	2288      	movs	r2, #136	@ 0x88
100494fc:	2120      	movs	r1, #32
100494fe:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
10049500:	687b      	ldr	r3, [r7, #4]
10049502:	2200      	movs	r2, #0
10049504:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
10049506:	687b      	ldr	r3, [r7, #4]
10049508:	0018      	movs	r0, r3
1004950a:	f7ff fc0d 	bl	10048d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1004950e:	46c0      	nop			@ (mov r8, r8)
10049510:	46bd      	mov	sp, r7
10049512:	b006      	add	sp, #24
10049514:	bd80      	pop	{r7, pc}

10049516 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
10049516:	b580      	push	{r7, lr}
10049518:	b082      	sub	sp, #8
1004951a:	af00      	add	r7, sp, #0
1004951c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004951e:	46c0      	nop			@ (mov r8, r8)
10049520:	46bd      	mov	sp, r7
10049522:	b002      	add	sp, #8
10049524:	bd80      	pop	{r7, pc}

10049526 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
10049526:	b580      	push	{r7, lr}
10049528:	b082      	sub	sp, #8
1004952a:	af00      	add	r7, sp, #0
1004952c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004952e:	46c0      	nop			@ (mov r8, r8)
10049530:	46bd      	mov	sp, r7
10049532:	b002      	add	sp, #8
10049534:	bd80      	pop	{r7, pc}

10049536 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
10049536:	b580      	push	{r7, lr}
10049538:	b082      	sub	sp, #8
1004953a:	af00      	add	r7, sp, #0
1004953c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004953e:	46c0      	nop			@ (mov r8, r8)
10049540:	46bd      	mov	sp, r7
10049542:	b002      	add	sp, #8
10049544:	bd80      	pop	{r7, pc}

10049546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10049546:	b580      	push	{r7, lr}
10049548:	b084      	sub	sp, #16
1004954a:	af00      	add	r7, sp, #0
1004954c:	6078      	str	r0, [r7, #4]
1004954e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10049550:	687b      	ldr	r3, [r7, #4]
10049552:	2284      	movs	r2, #132	@ 0x84
10049554:	5c9b      	ldrb	r3, [r3, r2]
10049556:	2b01      	cmp	r3, #1
10049558:	d101      	bne.n	1004955e <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004955a:	2302      	movs	r3, #2
1004955c:	e02e      	b.n	100495bc <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004955e:	687b      	ldr	r3, [r7, #4]
10049560:	2284      	movs	r2, #132	@ 0x84
10049562:	2101      	movs	r1, #1
10049564:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049566:	687b      	ldr	r3, [r7, #4]
10049568:	2288      	movs	r2, #136	@ 0x88
1004956a:	2124      	movs	r1, #36	@ 0x24
1004956c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004956e:	687b      	ldr	r3, [r7, #4]
10049570:	681b      	ldr	r3, [r3, #0]
10049572:	681b      	ldr	r3, [r3, #0]
10049574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049576:	687b      	ldr	r3, [r7, #4]
10049578:	681b      	ldr	r3, [r3, #0]
1004957a:	681a      	ldr	r2, [r3, #0]
1004957c:	687b      	ldr	r3, [r7, #4]
1004957e:	681b      	ldr	r3, [r3, #0]
10049580:	2101      	movs	r1, #1
10049582:	438a      	bics	r2, r1
10049584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10049586:	687b      	ldr	r3, [r7, #4]
10049588:	681b      	ldr	r3, [r3, #0]
1004958a:	689b      	ldr	r3, [r3, #8]
1004958c:	00db      	lsls	r3, r3, #3
1004958e:	08d9      	lsrs	r1, r3, #3
10049590:	687b      	ldr	r3, [r7, #4]
10049592:	681b      	ldr	r3, [r3, #0]
10049594:	683a      	ldr	r2, [r7, #0]
10049596:	430a      	orrs	r2, r1
10049598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004959a:	687b      	ldr	r3, [r7, #4]
1004959c:	0018      	movs	r0, r3
1004959e:	f000 f853 	bl	10049648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100495a2:	687b      	ldr	r3, [r7, #4]
100495a4:	681b      	ldr	r3, [r3, #0]
100495a6:	68fa      	ldr	r2, [r7, #12]
100495a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100495aa:	687b      	ldr	r3, [r7, #4]
100495ac:	2288      	movs	r2, #136	@ 0x88
100495ae:	2120      	movs	r1, #32
100495b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100495b2:	687b      	ldr	r3, [r7, #4]
100495b4:	2284      	movs	r2, #132	@ 0x84
100495b6:	2100      	movs	r1, #0
100495b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100495ba:	2300      	movs	r3, #0
}
100495bc:	0018      	movs	r0, r3
100495be:	46bd      	mov	sp, r7
100495c0:	b004      	add	sp, #16
100495c2:	bd80      	pop	{r7, pc}

100495c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100495c4:	b580      	push	{r7, lr}
100495c6:	b084      	sub	sp, #16
100495c8:	af00      	add	r7, sp, #0
100495ca:	6078      	str	r0, [r7, #4]
100495cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100495ce:	687b      	ldr	r3, [r7, #4]
100495d0:	2284      	movs	r2, #132	@ 0x84
100495d2:	5c9b      	ldrb	r3, [r3, r2]
100495d4:	2b01      	cmp	r3, #1
100495d6:	d101      	bne.n	100495dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
100495d8:	2302      	movs	r3, #2
100495da:	e02f      	b.n	1004963c <HAL_UARTEx_SetRxFifoThreshold+0x78>
100495dc:	687b      	ldr	r3, [r7, #4]
100495de:	2284      	movs	r2, #132	@ 0x84
100495e0:	2101      	movs	r1, #1
100495e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100495e4:	687b      	ldr	r3, [r7, #4]
100495e6:	2288      	movs	r2, #136	@ 0x88
100495e8:	2124      	movs	r1, #36	@ 0x24
100495ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100495ec:	687b      	ldr	r3, [r7, #4]
100495ee:	681b      	ldr	r3, [r3, #0]
100495f0:	681b      	ldr	r3, [r3, #0]
100495f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
100495f4:	687b      	ldr	r3, [r7, #4]
100495f6:	681b      	ldr	r3, [r3, #0]
100495f8:	681a      	ldr	r2, [r3, #0]
100495fa:	687b      	ldr	r3, [r7, #4]
100495fc:	681b      	ldr	r3, [r3, #0]
100495fe:	2101      	movs	r1, #1
10049600:	438a      	bics	r2, r1
10049602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10049604:	687b      	ldr	r3, [r7, #4]
10049606:	681b      	ldr	r3, [r3, #0]
10049608:	689b      	ldr	r3, [r3, #8]
1004960a:	4a0e      	ldr	r2, [pc, #56]	@ (10049644 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004960c:	4013      	ands	r3, r2
1004960e:	0019      	movs	r1, r3
10049610:	687b      	ldr	r3, [r7, #4]
10049612:	681b      	ldr	r3, [r3, #0]
10049614:	683a      	ldr	r2, [r7, #0]
10049616:	430a      	orrs	r2, r1
10049618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004961a:	687b      	ldr	r3, [r7, #4]
1004961c:	0018      	movs	r0, r3
1004961e:	f000 f813 	bl	10049648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049622:	687b      	ldr	r3, [r7, #4]
10049624:	681b      	ldr	r3, [r3, #0]
10049626:	68fa      	ldr	r2, [r7, #12]
10049628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004962a:	687b      	ldr	r3, [r7, #4]
1004962c:	2288      	movs	r2, #136	@ 0x88
1004962e:	2120      	movs	r1, #32
10049630:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049632:	687b      	ldr	r3, [r7, #4]
10049634:	2284      	movs	r2, #132	@ 0x84
10049636:	2100      	movs	r1, #0
10049638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004963a:	2300      	movs	r3, #0
}
1004963c:	0018      	movs	r0, r3
1004963e:	46bd      	mov	sp, r7
10049640:	b004      	add	sp, #16
10049642:	bd80      	pop	{r7, pc}
10049644:	f1ffffff 	.word	0xf1ffffff

10049648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10049648:	b5f0      	push	{r4, r5, r6, r7, lr}
1004964a:	b085      	sub	sp, #20
1004964c:	af00      	add	r7, sp, #0
1004964e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10049650:	687b      	ldr	r3, [r7, #4]
10049652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10049654:	2b00      	cmp	r3, #0
10049656:	d108      	bne.n	1004966a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
10049658:	687b      	ldr	r3, [r7, #4]
1004965a:	226a      	movs	r2, #106	@ 0x6a
1004965c:	2101      	movs	r1, #1
1004965e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10049660:	687b      	ldr	r3, [r7, #4]
10049662:	2268      	movs	r2, #104	@ 0x68
10049664:	2101      	movs	r1, #1
10049666:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10049668:	e043      	b.n	100496f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004966a:	260f      	movs	r6, #15
1004966c:	19bb      	adds	r3, r7, r6
1004966e:	2208      	movs	r2, #8
10049670:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10049672:	200e      	movs	r0, #14
10049674:	183b      	adds	r3, r7, r0
10049676:	2208      	movs	r2, #8
10049678:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004967a:	687b      	ldr	r3, [r7, #4]
1004967c:	681b      	ldr	r3, [r3, #0]
1004967e:	689b      	ldr	r3, [r3, #8]
10049680:	0e5b      	lsrs	r3, r3, #25
10049682:	b2da      	uxtb	r2, r3
10049684:	240d      	movs	r4, #13
10049686:	193b      	adds	r3, r7, r4
10049688:	2107      	movs	r1, #7
1004968a:	400a      	ands	r2, r1
1004968c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004968e:	687b      	ldr	r3, [r7, #4]
10049690:	681b      	ldr	r3, [r3, #0]
10049692:	689b      	ldr	r3, [r3, #8]
10049694:	0f5b      	lsrs	r3, r3, #29
10049696:	b2da      	uxtb	r2, r3
10049698:	250c      	movs	r5, #12
1004969a:	197b      	adds	r3, r7, r5
1004969c:	2107      	movs	r1, #7
1004969e:	400a      	ands	r2, r1
100496a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100496a2:	183b      	adds	r3, r7, r0
100496a4:	781b      	ldrb	r3, [r3, #0]
100496a6:	197a      	adds	r2, r7, r5
100496a8:	7812      	ldrb	r2, [r2, #0]
100496aa:	4914      	ldr	r1, [pc, #80]	@ (100496fc <UARTEx_SetNbDataToProcess+0xb4>)
100496ac:	5c8a      	ldrb	r2, [r1, r2]
100496ae:	435a      	muls	r2, r3
100496b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
100496b2:	197b      	adds	r3, r7, r5
100496b4:	781b      	ldrb	r3, [r3, #0]
100496b6:	4a12      	ldr	r2, [pc, #72]	@ (10049700 <UARTEx_SetNbDataToProcess+0xb8>)
100496b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100496ba:	0019      	movs	r1, r3
100496bc:	f7f6 fdbe 	bl	1004023c <__divsi3>
100496c0:	0003      	movs	r3, r0
100496c2:	b299      	uxth	r1, r3
100496c4:	687b      	ldr	r3, [r7, #4]
100496c6:	226a      	movs	r2, #106	@ 0x6a
100496c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100496ca:	19bb      	adds	r3, r7, r6
100496cc:	781b      	ldrb	r3, [r3, #0]
100496ce:	193a      	adds	r2, r7, r4
100496d0:	7812      	ldrb	r2, [r2, #0]
100496d2:	490a      	ldr	r1, [pc, #40]	@ (100496fc <UARTEx_SetNbDataToProcess+0xb4>)
100496d4:	5c8a      	ldrb	r2, [r1, r2]
100496d6:	435a      	muls	r2, r3
100496d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
100496da:	193b      	adds	r3, r7, r4
100496dc:	781b      	ldrb	r3, [r3, #0]
100496de:	4a08      	ldr	r2, [pc, #32]	@ (10049700 <UARTEx_SetNbDataToProcess+0xb8>)
100496e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100496e2:	0019      	movs	r1, r3
100496e4:	f7f6 fdaa 	bl	1004023c <__divsi3>
100496e8:	0003      	movs	r3, r0
100496ea:	b299      	uxth	r1, r3
100496ec:	687b      	ldr	r3, [r7, #4]
100496ee:	2268      	movs	r2, #104	@ 0x68
100496f0:	5299      	strh	r1, [r3, r2]
}
100496f2:	46c0      	nop			@ (mov r8, r8)
100496f4:	46bd      	mov	sp, r7
100496f6:	b005      	add	sp, #20
100496f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100496fa:	46c0      	nop			@ (mov r8, r8)
100496fc:	1004a6d4 	.word	0x1004a6d4
10049700:	1004a6dc 	.word	0x1004a6dc

10049704 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
10049704:	b580      	push	{r7, lr}
10049706:	b088      	sub	sp, #32
10049708:	af00      	add	r7, sp, #0
1004970a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
1004970c:	687b      	ldr	r3, [r7, #4]
1004970e:	681b      	ldr	r3, [r3, #0]
10049710:	69db      	ldr	r3, [r3, #28]
10049712:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
10049714:	687b      	ldr	r3, [r7, #4]
10049716:	681b      	ldr	r3, [r3, #0]
10049718:	681b      	ldr	r3, [r3, #0]
1004971a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
1004971c:	687b      	ldr	r3, [r7, #4]
1004971e:	681b      	ldr	r3, [r3, #0]
10049720:	689b      	ldr	r3, [r3, #8]
10049722:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
10049724:	69fb      	ldr	r3, [r7, #28]
10049726:	4ab3      	ldr	r2, [pc, #716]	@ (100499f4 <HAL_USART_IRQHandler+0x2f0>)
10049728:	4013      	ands	r3, r2
1004972a:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
1004972c:	693b      	ldr	r3, [r7, #16]
1004972e:	2b00      	cmp	r3, #0
10049730:	d117      	bne.n	10049762 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
10049732:	69fb      	ldr	r3, [r7, #28]
10049734:	2220      	movs	r2, #32
10049736:	4013      	ands	r3, r2
10049738:	d013      	beq.n	10049762 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004973a:	69bb      	ldr	r3, [r7, #24]
1004973c:	2220      	movs	r2, #32
1004973e:	4013      	ands	r3, r2
10049740:	d104      	bne.n	1004974c <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
10049742:	697a      	ldr	r2, [r7, #20]
10049744:	2380      	movs	r3, #128	@ 0x80
10049746:	055b      	lsls	r3, r3, #21
10049748:	4013      	ands	r3, r2
1004974a:	d00a      	beq.n	10049762 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
1004974c:	687b      	ldr	r3, [r7, #4]
1004974e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10049750:	2b00      	cmp	r3, #0
10049752:	d100      	bne.n	10049756 <HAL_USART_IRQHandler+0x52>
10049754:	e14a      	b.n	100499ec <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
10049756:	687b      	ldr	r3, [r7, #4]
10049758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004975a:	687a      	ldr	r2, [r7, #4]
1004975c:	0010      	movs	r0, r2
1004975e:	4798      	blx	r3
      }
      return;
10049760:	e144      	b.n	100499ec <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
10049762:	693b      	ldr	r3, [r7, #16]
10049764:	2b00      	cmp	r3, #0
10049766:	d100      	bne.n	1004976a <HAL_USART_IRQHandler+0x66>
10049768:	e100      	b.n	1004996c <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004976a:	697b      	ldr	r3, [r7, #20]
1004976c:	4aa2      	ldr	r2, [pc, #648]	@ (100499f8 <HAL_USART_IRQHandler+0x2f4>)
1004976e:	4013      	ands	r3, r2
10049770:	d105      	bne.n	1004977e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
10049772:	69ba      	ldr	r2, [r7, #24]
10049774:	2390      	movs	r3, #144	@ 0x90
10049776:	005b      	lsls	r3, r3, #1
10049778:	4013      	ands	r3, r2
1004977a:	d100      	bne.n	1004977e <HAL_USART_IRQHandler+0x7a>
1004977c:	e0f6      	b.n	1004996c <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004977e:	69fb      	ldr	r3, [r7, #28]
10049780:	2201      	movs	r2, #1
10049782:	4013      	ands	r3, r2
10049784:	d00e      	beq.n	100497a4 <HAL_USART_IRQHandler+0xa0>
10049786:	69ba      	ldr	r2, [r7, #24]
10049788:	2380      	movs	r3, #128	@ 0x80
1004978a:	005b      	lsls	r3, r3, #1
1004978c:	4013      	ands	r3, r2
1004978e:	d009      	beq.n	100497a4 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
10049790:	687b      	ldr	r3, [r7, #4]
10049792:	681b      	ldr	r3, [r3, #0]
10049794:	2201      	movs	r2, #1
10049796:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
10049798:	687b      	ldr	r3, [r7, #4]
1004979a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004979c:	2201      	movs	r2, #1
1004979e:	431a      	orrs	r2, r3
100497a0:	687b      	ldr	r3, [r7, #4]
100497a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
100497a4:	69fb      	ldr	r3, [r7, #28]
100497a6:	2202      	movs	r2, #2
100497a8:	4013      	ands	r3, r2
100497aa:	d00d      	beq.n	100497c8 <HAL_USART_IRQHandler+0xc4>
100497ac:	697b      	ldr	r3, [r7, #20]
100497ae:	2201      	movs	r2, #1
100497b0:	4013      	ands	r3, r2
100497b2:	d009      	beq.n	100497c8 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
100497b4:	687b      	ldr	r3, [r7, #4]
100497b6:	681b      	ldr	r3, [r3, #0]
100497b8:	2202      	movs	r2, #2
100497ba:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
100497bc:	687b      	ldr	r3, [r7, #4]
100497be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100497c0:	2204      	movs	r2, #4
100497c2:	431a      	orrs	r2, r3
100497c4:	687b      	ldr	r3, [r7, #4]
100497c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
100497c8:	69fb      	ldr	r3, [r7, #28]
100497ca:	2204      	movs	r2, #4
100497cc:	4013      	ands	r3, r2
100497ce:	d00d      	beq.n	100497ec <HAL_USART_IRQHandler+0xe8>
100497d0:	697b      	ldr	r3, [r7, #20]
100497d2:	2201      	movs	r2, #1
100497d4:	4013      	ands	r3, r2
100497d6:	d009      	beq.n	100497ec <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
100497d8:	687b      	ldr	r3, [r7, #4]
100497da:	681b      	ldr	r3, [r3, #0]
100497dc:	2204      	movs	r2, #4
100497de:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
100497e0:	687b      	ldr	r3, [r7, #4]
100497e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100497e4:	2202      	movs	r2, #2
100497e6:	431a      	orrs	r2, r3
100497e8:	687b      	ldr	r3, [r7, #4]
100497ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
100497ec:	69fb      	ldr	r3, [r7, #28]
100497ee:	2208      	movs	r2, #8
100497f0:	4013      	ands	r3, r2
100497f2:	d011      	beq.n	10049818 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100497f4:	69bb      	ldr	r3, [r7, #24]
100497f6:	2220      	movs	r2, #32
100497f8:	4013      	ands	r3, r2
100497fa:	d103      	bne.n	10049804 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
100497fc:	697b      	ldr	r3, [r7, #20]
100497fe:	4a7e      	ldr	r2, [pc, #504]	@ (100499f8 <HAL_USART_IRQHandler+0x2f4>)
10049800:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
10049802:	d009      	beq.n	10049818 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
10049804:	687b      	ldr	r3, [r7, #4]
10049806:	681b      	ldr	r3, [r3, #0]
10049808:	2208      	movs	r2, #8
1004980a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
1004980c:	687b      	ldr	r3, [r7, #4]
1004980e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10049810:	2208      	movs	r2, #8
10049812:	431a      	orrs	r2, r3
10049814:	687b      	ldr	r3, [r7, #4]
10049816:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
10049818:	69fa      	ldr	r2, [r7, #28]
1004981a:	2380      	movs	r3, #128	@ 0x80
1004981c:	011b      	lsls	r3, r3, #4
1004981e:	4013      	ands	r3, r2
10049820:	d00f      	beq.n	10049842 <HAL_USART_IRQHandler+0x13e>
10049822:	69ba      	ldr	r2, [r7, #24]
10049824:	2380      	movs	r3, #128	@ 0x80
10049826:	04db      	lsls	r3, r3, #19
10049828:	4013      	ands	r3, r2
1004982a:	d00a      	beq.n	10049842 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
1004982c:	687b      	ldr	r3, [r7, #4]
1004982e:	681b      	ldr	r3, [r3, #0]
10049830:	2280      	movs	r2, #128	@ 0x80
10049832:	0112      	lsls	r2, r2, #4
10049834:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
10049836:	687b      	ldr	r3, [r7, #4]
10049838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004983a:	2280      	movs	r2, #128	@ 0x80
1004983c:	431a      	orrs	r2, r3
1004983e:	687b      	ldr	r3, [r7, #4]
10049840:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
10049842:	69fa      	ldr	r2, [r7, #28]
10049844:	2380      	movs	r3, #128	@ 0x80
10049846:	019b      	lsls	r3, r3, #6
10049848:	4013      	ands	r3, r2
1004984a:	d01a      	beq.n	10049882 <HAL_USART_IRQHandler+0x17e>
1004984c:	697b      	ldr	r3, [r7, #20]
1004984e:	2201      	movs	r2, #1
10049850:	4013      	ands	r3, r2
10049852:	d016      	beq.n	10049882 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
10049854:	687b      	ldr	r3, [r7, #4]
10049856:	2259      	movs	r2, #89	@ 0x59
10049858:	5c9b      	ldrb	r3, [r3, r2]
1004985a:	b2db      	uxtb	r3, r3
1004985c:	2b22      	cmp	r3, #34	@ 0x22
1004985e:	d105      	bne.n	1004986c <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
10049860:	687b      	ldr	r3, [r7, #4]
10049862:	681b      	ldr	r3, [r3, #0]
10049864:	2280      	movs	r2, #128	@ 0x80
10049866:	0192      	lsls	r2, r2, #6
10049868:	621a      	str	r2, [r3, #32]
        return;
1004986a:	e0ca      	b.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004986c:	687b      	ldr	r3, [r7, #4]
1004986e:	681b      	ldr	r3, [r3, #0]
10049870:	2280      	movs	r2, #128	@ 0x80
10049872:	0192      	lsls	r2, r2, #6
10049874:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
10049876:	687b      	ldr	r3, [r7, #4]
10049878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004987a:	2220      	movs	r2, #32
1004987c:	431a      	orrs	r2, r3
1004987e:	687b      	ldr	r3, [r7, #4]
10049880:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
10049882:	687b      	ldr	r3, [r7, #4]
10049884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10049886:	2b00      	cmp	r3, #0
10049888:	d100      	bne.n	1004988c <HAL_USART_IRQHandler+0x188>
1004988a:	e0b1      	b.n	100499f0 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004988c:	69fb      	ldr	r3, [r7, #28]
1004988e:	2220      	movs	r2, #32
10049890:	4013      	ands	r3, r2
10049892:	d011      	beq.n	100498b8 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
10049894:	69bb      	ldr	r3, [r7, #24]
10049896:	2220      	movs	r2, #32
10049898:	4013      	ands	r3, r2
1004989a:	d104      	bne.n	100498a6 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004989c:	697a      	ldr	r2, [r7, #20]
1004989e:	2380      	movs	r3, #128	@ 0x80
100498a0:	055b      	lsls	r3, r3, #21
100498a2:	4013      	ands	r3, r2
100498a4:	d008      	beq.n	100498b8 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
100498a6:	687b      	ldr	r3, [r7, #4]
100498a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100498aa:	2b00      	cmp	r3, #0
100498ac:	d004      	beq.n	100498b8 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
100498ae:	687b      	ldr	r3, [r7, #4]
100498b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100498b2:	687a      	ldr	r2, [r7, #4]
100498b4:	0010      	movs	r0, r2
100498b6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
100498b8:	687b      	ldr	r3, [r7, #4]
100498ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100498bc:	2208      	movs	r2, #8
100498be:	4013      	ands	r3, r2
100498c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
100498c2:	687b      	ldr	r3, [r7, #4]
100498c4:	681b      	ldr	r3, [r3, #0]
100498c6:	689b      	ldr	r3, [r3, #8]
100498c8:	2240      	movs	r2, #64	@ 0x40
100498ca:	4013      	ands	r3, r2
100498cc:	2b40      	cmp	r3, #64	@ 0x40
100498ce:	d002      	beq.n	100498d6 <HAL_USART_IRQHandler+0x1d2>
100498d0:	68fb      	ldr	r3, [r7, #12]
100498d2:	2b00      	cmp	r3, #0
100498d4:	d040      	beq.n	10049958 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
100498d6:	687b      	ldr	r3, [r7, #4]
100498d8:	0018      	movs	r0, r3
100498da:	f000 f8ad 	bl	10049a38 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
100498de:	687b      	ldr	r3, [r7, #4]
100498e0:	681b      	ldr	r3, [r3, #0]
100498e2:	689b      	ldr	r3, [r3, #8]
100498e4:	2240      	movs	r2, #64	@ 0x40
100498e6:	4013      	ands	r3, r2
100498e8:	2b40      	cmp	r3, #64	@ 0x40
100498ea:	d130      	bne.n	1004994e <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
100498ec:	687b      	ldr	r3, [r7, #4]
100498ee:	681b      	ldr	r3, [r3, #0]
100498f0:	689a      	ldr	r2, [r3, #8]
100498f2:	687b      	ldr	r3, [r7, #4]
100498f4:	681b      	ldr	r3, [r3, #0]
100498f6:	2140      	movs	r1, #64	@ 0x40
100498f8:	438a      	bics	r2, r1
100498fa:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
100498fc:	687b      	ldr	r3, [r7, #4]
100498fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10049900:	2b00      	cmp	r3, #0
10049902:	d008      	beq.n	10049916 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
10049904:	687b      	ldr	r3, [r7, #4]
10049906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10049908:	2200      	movs	r2, #0
1004990a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
1004990c:	687b      	ldr	r3, [r7, #4]
1004990e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10049910:	0018      	movs	r0, r3
10049912:	f7fa fd04 	bl	1004431e <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
10049916:	687b      	ldr	r3, [r7, #4]
10049918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004991a:	2b00      	cmp	r3, #0
1004991c:	d012      	beq.n	10049944 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1004991e:	687b      	ldr	r3, [r7, #4]
10049920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10049922:	4a36      	ldr	r2, [pc, #216]	@ (100499fc <HAL_USART_IRQHandler+0x2f8>)
10049924:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
10049926:	687b      	ldr	r3, [r7, #4]
10049928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004992a:	0018      	movs	r0, r3
1004992c:	f7fa fcf7 	bl	1004431e <HAL_DMA_Abort_IT>
10049930:	1e03      	subs	r3, r0, #0
10049932:	d019      	beq.n	10049968 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
10049934:	687b      	ldr	r3, [r7, #4]
10049936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10049938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004993a:	687b      	ldr	r3, [r7, #4]
1004993c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004993e:	0018      	movs	r0, r3
10049940:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
10049942:	e011      	b.n	10049968 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
10049944:	687b      	ldr	r3, [r7, #4]
10049946:	0018      	movs	r0, r3
10049948:	f000 f86e 	bl	10049a28 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004994c:	e00c      	b.n	10049968 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
1004994e:	687b      	ldr	r3, [r7, #4]
10049950:	0018      	movs	r0, r3
10049952:	f000 f869 	bl	10049a28 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
10049956:	e007      	b.n	10049968 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
10049958:	687b      	ldr	r3, [r7, #4]
1004995a:	0018      	movs	r0, r3
1004995c:	f000 f864 	bl	10049a28 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
10049960:	687b      	ldr	r3, [r7, #4]
10049962:	2200      	movs	r2, #0
10049964:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
10049966:	e043      	b.n	100499f0 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
10049968:	46c0      	nop			@ (mov r8, r8)
    return;
1004996a:	e041      	b.n	100499f0 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004996c:	69fb      	ldr	r3, [r7, #28]
1004996e:	2280      	movs	r2, #128	@ 0x80
10049970:	4013      	ands	r3, r2
10049972:	d012      	beq.n	1004999a <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
10049974:	69bb      	ldr	r3, [r7, #24]
10049976:	2280      	movs	r2, #128	@ 0x80
10049978:	4013      	ands	r3, r2
1004997a:	d104      	bne.n	10049986 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004997c:	697a      	ldr	r2, [r7, #20]
1004997e:	2380      	movs	r3, #128	@ 0x80
10049980:	041b      	lsls	r3, r3, #16
10049982:	4013      	ands	r3, r2
10049984:	d009      	beq.n	1004999a <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
10049986:	687b      	ldr	r3, [r7, #4]
10049988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004998a:	2b00      	cmp	r3, #0
1004998c:	d038      	beq.n	10049a00 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004998e:	687b      	ldr	r3, [r7, #4]
10049990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049992:	687a      	ldr	r2, [r7, #4]
10049994:	0010      	movs	r0, r2
10049996:	4798      	blx	r3
    }
    return;
10049998:	e032      	b.n	10049a00 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004999a:	69fb      	ldr	r3, [r7, #28]
1004999c:	2240      	movs	r2, #64	@ 0x40
1004999e:	4013      	ands	r3, r2
100499a0:	d008      	beq.n	100499b4 <HAL_USART_IRQHandler+0x2b0>
100499a2:	69bb      	ldr	r3, [r7, #24]
100499a4:	2240      	movs	r2, #64	@ 0x40
100499a6:	4013      	ands	r3, r2
100499a8:	d004      	beq.n	100499b4 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
100499aa:	687b      	ldr	r3, [r7, #4]
100499ac:	0018      	movs	r0, r3
100499ae:	f000 f878 	bl	10049aa2 <USART_EndTransmit_IT>
    return;
100499b2:	e026      	b.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
100499b4:	69fa      	ldr	r2, [r7, #28]
100499b6:	2380      	movs	r3, #128	@ 0x80
100499b8:	041b      	lsls	r3, r3, #16
100499ba:	4013      	ands	r3, r2
100499bc:	d009      	beq.n	100499d2 <HAL_USART_IRQHandler+0x2ce>
100499be:	69ba      	ldr	r2, [r7, #24]
100499c0:	2380      	movs	r3, #128	@ 0x80
100499c2:	05db      	lsls	r3, r3, #23
100499c4:	4013      	ands	r3, r2
100499c6:	d004      	beq.n	100499d2 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
100499c8:	687b      	ldr	r3, [r7, #4]
100499ca:	0018      	movs	r0, r3
100499cc:	f000 f8b4 	bl	10049b38 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
100499d0:	e017      	b.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
100499d2:	69fa      	ldr	r2, [r7, #28]
100499d4:	2380      	movs	r3, #128	@ 0x80
100499d6:	045b      	lsls	r3, r3, #17
100499d8:	4013      	ands	r3, r2
100499da:	d012      	beq.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
100499dc:	69bb      	ldr	r3, [r7, #24]
100499de:	2b00      	cmp	r3, #0
100499e0:	da0f      	bge.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
100499e2:	687b      	ldr	r3, [r7, #4]
100499e4:	0018      	movs	r0, r3
100499e6:	f000 f89f 	bl	10049b28 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
100499ea:	e00a      	b.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
      return;
100499ec:	46c0      	nop			@ (mov r8, r8)
100499ee:	e008      	b.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
    return;
100499f0:	46c0      	nop			@ (mov r8, r8)
100499f2:	e006      	b.n	10049a02 <HAL_USART_IRQHandler+0x2fe>
100499f4:	0000280f 	.word	0x0000280f
100499f8:	10000001 	.word	0x10000001
100499fc:	10049a79 	.word	0x10049a79
    return;
10049a00:	46c0      	nop			@ (mov r8, r8)
  }
}
10049a02:	46bd      	mov	sp, r7
10049a04:	b008      	add	sp, #32
10049a06:	bd80      	pop	{r7, pc}

10049a08 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
10049a08:	b580      	push	{r7, lr}
10049a0a:	b082      	sub	sp, #8
10049a0c:	af00      	add	r7, sp, #0
10049a0e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
10049a10:	46c0      	nop			@ (mov r8, r8)
10049a12:	46bd      	mov	sp, r7
10049a14:	b002      	add	sp, #8
10049a16:	bd80      	pop	{r7, pc}

10049a18 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
10049a18:	b580      	push	{r7, lr}
10049a1a:	b082      	sub	sp, #8
10049a1c:	af00      	add	r7, sp, #0
10049a1e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
10049a20:	46c0      	nop			@ (mov r8, r8)
10049a22:	46bd      	mov	sp, r7
10049a24:	b002      	add	sp, #8
10049a26:	bd80      	pop	{r7, pc}

10049a28 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
10049a28:	b580      	push	{r7, lr}
10049a2a:	b082      	sub	sp, #8
10049a2c:	af00      	add	r7, sp, #0
10049a2e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
10049a30:	46c0      	nop			@ (mov r8, r8)
10049a32:	46bd      	mov	sp, r7
10049a34:	b002      	add	sp, #8
10049a36:	bd80      	pop	{r7, pc}

10049a38 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
10049a38:	b580      	push	{r7, lr}
10049a3a:	b082      	sub	sp, #8
10049a3c:	af00      	add	r7, sp, #0
10049a3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
10049a40:	687b      	ldr	r3, [r7, #4]
10049a42:	681b      	ldr	r3, [r3, #0]
10049a44:	681a      	ldr	r2, [r3, #0]
10049a46:	687b      	ldr	r3, [r7, #4]
10049a48:	681b      	ldr	r3, [r3, #0]
10049a4a:	4909      	ldr	r1, [pc, #36]	@ (10049a70 <USART_EndTransfer+0x38>)
10049a4c:	400a      	ands	r2, r1
10049a4e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
10049a50:	687b      	ldr	r3, [r7, #4]
10049a52:	681b      	ldr	r3, [r3, #0]
10049a54:	689a      	ldr	r2, [r3, #8]
10049a56:	687b      	ldr	r3, [r7, #4]
10049a58:	681b      	ldr	r3, [r3, #0]
10049a5a:	4906      	ldr	r1, [pc, #24]	@ (10049a74 <USART_EndTransfer+0x3c>)
10049a5c:	400a      	ands	r2, r1
10049a5e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
10049a60:	687b      	ldr	r3, [r7, #4]
10049a62:	2259      	movs	r2, #89	@ 0x59
10049a64:	2101      	movs	r1, #1
10049a66:	5499      	strb	r1, [r3, r2]
}
10049a68:	46c0      	nop			@ (mov r8, r8)
10049a6a:	46bd      	mov	sp, r7
10049a6c:	b002      	add	sp, #8
10049a6e:	bd80      	pop	{r7, pc}
10049a70:	fffffe1f 	.word	0xfffffe1f
10049a74:	ef7ffffe 	.word	0xef7ffffe

10049a78 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
10049a78:	b580      	push	{r7, lr}
10049a7a:	b084      	sub	sp, #16
10049a7c:	af00      	add	r7, sp, #0
10049a7e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
10049a80:	687b      	ldr	r3, [r7, #4]
10049a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049a84:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
10049a86:	68fb      	ldr	r3, [r7, #12]
10049a88:	2200      	movs	r2, #0
10049a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
10049a8c:	68fb      	ldr	r3, [r7, #12]
10049a8e:	2200      	movs	r2, #0
10049a90:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
10049a92:	68fb      	ldr	r3, [r7, #12]
10049a94:	0018      	movs	r0, r3
10049a96:	f7ff ffc7 	bl	10049a28 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
10049a9a:	46c0      	nop			@ (mov r8, r8)
10049a9c:	46bd      	mov	sp, r7
10049a9e:	b004      	add	sp, #16
10049aa0:	bd80      	pop	{r7, pc}

10049aa2 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
10049aa2:	b580      	push	{r7, lr}
10049aa4:	b082      	sub	sp, #8
10049aa6:	af00      	add	r7, sp, #0
10049aa8:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
10049aaa:	687b      	ldr	r3, [r7, #4]
10049aac:	681b      	ldr	r3, [r3, #0]
10049aae:	681a      	ldr	r2, [r3, #0]
10049ab0:	687b      	ldr	r3, [r7, #4]
10049ab2:	681b      	ldr	r3, [r3, #0]
10049ab4:	2140      	movs	r1, #64	@ 0x40
10049ab6:	438a      	bics	r2, r1
10049ab8:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
10049aba:	687b      	ldr	r3, [r7, #4]
10049abc:	681b      	ldr	r3, [r3, #0]
10049abe:	689a      	ldr	r2, [r3, #8]
10049ac0:	687b      	ldr	r3, [r7, #4]
10049ac2:	681b      	ldr	r3, [r3, #0]
10049ac4:	2101      	movs	r1, #1
10049ac6:	438a      	bics	r2, r1
10049ac8:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
10049aca:	687b      	ldr	r3, [r7, #4]
10049acc:	2200      	movs	r2, #0
10049ace:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
10049ad0:	687b      	ldr	r3, [r7, #4]
10049ad2:	2259      	movs	r2, #89	@ 0x59
10049ad4:	5c9b      	ldrb	r3, [r3, r2]
10049ad6:	b2db      	uxtb	r3, r3
10049ad8:	2b12      	cmp	r3, #18
10049ada:	d114      	bne.n	10049b06 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
10049adc:	687b      	ldr	r3, [r7, #4]
10049ade:	681b      	ldr	r3, [r3, #0]
10049ae0:	2208      	movs	r2, #8
10049ae2:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
10049ae4:	687b      	ldr	r3, [r7, #4]
10049ae6:	681b      	ldr	r3, [r3, #0]
10049ae8:	699a      	ldr	r2, [r3, #24]
10049aea:	687b      	ldr	r3, [r7, #4]
10049aec:	681b      	ldr	r3, [r3, #0]
10049aee:	2108      	movs	r1, #8
10049af0:	430a      	orrs	r2, r1
10049af2:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
10049af4:	687b      	ldr	r3, [r7, #4]
10049af6:	2259      	movs	r2, #89	@ 0x59
10049af8:	2101      	movs	r1, #1
10049afa:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
10049afc:	687b      	ldr	r3, [r7, #4]
10049afe:	0018      	movs	r0, r3
10049b00:	f7ff ff82 	bl	10049a08 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
10049b04:	e00c      	b.n	10049b20 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
10049b06:	687b      	ldr	r3, [r7, #4]
10049b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
10049b0a:	b29b      	uxth	r3, r3
10049b0c:	2b00      	cmp	r3, #0
10049b0e:	d107      	bne.n	10049b20 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
10049b10:	687b      	ldr	r3, [r7, #4]
10049b12:	2259      	movs	r2, #89	@ 0x59
10049b14:	2101      	movs	r1, #1
10049b16:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
10049b18:	687b      	ldr	r3, [r7, #4]
10049b1a:	0018      	movs	r0, r3
10049b1c:	f7ff ff7c 	bl	10049a18 <HAL_USART_TxRxCpltCallback>
}
10049b20:	46c0      	nop			@ (mov r8, r8)
10049b22:	46bd      	mov	sp, r7
10049b24:	b002      	add	sp, #8
10049b26:	bd80      	pop	{r7, pc}

10049b28 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
10049b28:	b580      	push	{r7, lr}
10049b2a:	b082      	sub	sp, #8
10049b2c:	af00      	add	r7, sp, #0
10049b2e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
10049b30:	46c0      	nop			@ (mov r8, r8)
10049b32:	46bd      	mov	sp, r7
10049b34:	b002      	add	sp, #8
10049b36:	bd80      	pop	{r7, pc}

10049b38 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
10049b38:	b580      	push	{r7, lr}
10049b3a:	b082      	sub	sp, #8
10049b3c:	af00      	add	r7, sp, #0
10049b3e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
10049b40:	46c0      	nop			@ (mov r8, r8)
10049b42:	46bd      	mov	sp, r7
10049b44:	b002      	add	sp, #8
10049b46:	bd80      	pop	{r7, pc}

10049b48 <malloc>:
10049b48:	b510      	push	{r4, lr}
10049b4a:	4b03      	ldr	r3, [pc, #12]	@ (10049b58 <malloc+0x10>)
10049b4c:	0001      	movs	r1, r0
10049b4e:	6818      	ldr	r0, [r3, #0]
10049b50:	f000 f830 	bl	10049bb4 <_malloc_r>
10049b54:	bd10      	pop	{r4, pc}
10049b56:	46c0      	nop			@ (mov r8, r8)
10049b58:	20000da4 	.word	0x20000da4

10049b5c <free>:
10049b5c:	b510      	push	{r4, lr}
10049b5e:	4b03      	ldr	r3, [pc, #12]	@ (10049b6c <free+0x10>)
10049b60:	0001      	movs	r1, r0
10049b62:	6818      	ldr	r0, [r3, #0]
10049b64:	f000 f902 	bl	10049d6c <_free_r>
10049b68:	bd10      	pop	{r4, pc}
10049b6a:	46c0      	nop			@ (mov r8, r8)
10049b6c:	20000da4 	.word	0x20000da4

10049b70 <sbrk_aligned>:
10049b70:	b570      	push	{r4, r5, r6, lr}
10049b72:	4e0f      	ldr	r6, [pc, #60]	@ (10049bb0 <sbrk_aligned+0x40>)
10049b74:	000d      	movs	r5, r1
10049b76:	6831      	ldr	r1, [r6, #0]
10049b78:	0004      	movs	r4, r0
10049b7a:	2900      	cmp	r1, #0
10049b7c:	d102      	bne.n	10049b84 <sbrk_aligned+0x14>
10049b7e:	f000 f8d1 	bl	10049d24 <_sbrk_r>
10049b82:	6030      	str	r0, [r6, #0]
10049b84:	0029      	movs	r1, r5
10049b86:	0020      	movs	r0, r4
10049b88:	f000 f8cc 	bl	10049d24 <_sbrk_r>
10049b8c:	1c43      	adds	r3, r0, #1
10049b8e:	d103      	bne.n	10049b98 <sbrk_aligned+0x28>
10049b90:	2501      	movs	r5, #1
10049b92:	426d      	negs	r5, r5
10049b94:	0028      	movs	r0, r5
10049b96:	bd70      	pop	{r4, r5, r6, pc}
10049b98:	2303      	movs	r3, #3
10049b9a:	1cc5      	adds	r5, r0, #3
10049b9c:	439d      	bics	r5, r3
10049b9e:	42a8      	cmp	r0, r5
10049ba0:	d0f8      	beq.n	10049b94 <sbrk_aligned+0x24>
10049ba2:	1a29      	subs	r1, r5, r0
10049ba4:	0020      	movs	r0, r4
10049ba6:	f000 f8bd 	bl	10049d24 <_sbrk_r>
10049baa:	3001      	adds	r0, #1
10049bac:	d1f2      	bne.n	10049b94 <sbrk_aligned+0x24>
10049bae:	e7ef      	b.n	10049b90 <sbrk_aligned+0x20>
10049bb0:	20000bf0 	.word	0x20000bf0

10049bb4 <_malloc_r>:
10049bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10049bb6:	2203      	movs	r2, #3
10049bb8:	1ccb      	adds	r3, r1, #3
10049bba:	4393      	bics	r3, r2
10049bbc:	3308      	adds	r3, #8
10049bbe:	0005      	movs	r5, r0
10049bc0:	001f      	movs	r7, r3
10049bc2:	2b0c      	cmp	r3, #12
10049bc4:	d234      	bcs.n	10049c30 <_malloc_r+0x7c>
10049bc6:	270c      	movs	r7, #12
10049bc8:	42b9      	cmp	r1, r7
10049bca:	d833      	bhi.n	10049c34 <_malloc_r+0x80>
10049bcc:	0028      	movs	r0, r5
10049bce:	f000 f871 	bl	10049cb4 <__malloc_lock>
10049bd2:	4e37      	ldr	r6, [pc, #220]	@ (10049cb0 <_malloc_r+0xfc>)
10049bd4:	6833      	ldr	r3, [r6, #0]
10049bd6:	001c      	movs	r4, r3
10049bd8:	2c00      	cmp	r4, #0
10049bda:	d12f      	bne.n	10049c3c <_malloc_r+0x88>
10049bdc:	0039      	movs	r1, r7
10049bde:	0028      	movs	r0, r5
10049be0:	f7ff ffc6 	bl	10049b70 <sbrk_aligned>
10049be4:	0004      	movs	r4, r0
10049be6:	1c43      	adds	r3, r0, #1
10049be8:	d15f      	bne.n	10049caa <_malloc_r+0xf6>
10049bea:	6834      	ldr	r4, [r6, #0]
10049bec:	9400      	str	r4, [sp, #0]
10049bee:	9b00      	ldr	r3, [sp, #0]
10049bf0:	2b00      	cmp	r3, #0
10049bf2:	d14a      	bne.n	10049c8a <_malloc_r+0xd6>
10049bf4:	2c00      	cmp	r4, #0
10049bf6:	d052      	beq.n	10049c9e <_malloc_r+0xea>
10049bf8:	6823      	ldr	r3, [r4, #0]
10049bfa:	0028      	movs	r0, r5
10049bfc:	18e3      	adds	r3, r4, r3
10049bfe:	9900      	ldr	r1, [sp, #0]
10049c00:	9301      	str	r3, [sp, #4]
10049c02:	f000 f88f 	bl	10049d24 <_sbrk_r>
10049c06:	9b01      	ldr	r3, [sp, #4]
10049c08:	4283      	cmp	r3, r0
10049c0a:	d148      	bne.n	10049c9e <_malloc_r+0xea>
10049c0c:	6823      	ldr	r3, [r4, #0]
10049c0e:	0028      	movs	r0, r5
10049c10:	1aff      	subs	r7, r7, r3
10049c12:	0039      	movs	r1, r7
10049c14:	f7ff ffac 	bl	10049b70 <sbrk_aligned>
10049c18:	3001      	adds	r0, #1
10049c1a:	d040      	beq.n	10049c9e <_malloc_r+0xea>
10049c1c:	6823      	ldr	r3, [r4, #0]
10049c1e:	19db      	adds	r3, r3, r7
10049c20:	6023      	str	r3, [r4, #0]
10049c22:	6833      	ldr	r3, [r6, #0]
10049c24:	685a      	ldr	r2, [r3, #4]
10049c26:	2a00      	cmp	r2, #0
10049c28:	d133      	bne.n	10049c92 <_malloc_r+0xde>
10049c2a:	9b00      	ldr	r3, [sp, #0]
10049c2c:	6033      	str	r3, [r6, #0]
10049c2e:	e019      	b.n	10049c64 <_malloc_r+0xb0>
10049c30:	2b00      	cmp	r3, #0
10049c32:	dac9      	bge.n	10049bc8 <_malloc_r+0x14>
10049c34:	230c      	movs	r3, #12
10049c36:	602b      	str	r3, [r5, #0]
10049c38:	2000      	movs	r0, #0
10049c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10049c3c:	6821      	ldr	r1, [r4, #0]
10049c3e:	1bc9      	subs	r1, r1, r7
10049c40:	d420      	bmi.n	10049c84 <_malloc_r+0xd0>
10049c42:	290b      	cmp	r1, #11
10049c44:	d90a      	bls.n	10049c5c <_malloc_r+0xa8>
10049c46:	19e2      	adds	r2, r4, r7
10049c48:	6027      	str	r7, [r4, #0]
10049c4a:	42a3      	cmp	r3, r4
10049c4c:	d104      	bne.n	10049c58 <_malloc_r+0xa4>
10049c4e:	6032      	str	r2, [r6, #0]
10049c50:	6863      	ldr	r3, [r4, #4]
10049c52:	6011      	str	r1, [r2, #0]
10049c54:	6053      	str	r3, [r2, #4]
10049c56:	e005      	b.n	10049c64 <_malloc_r+0xb0>
10049c58:	605a      	str	r2, [r3, #4]
10049c5a:	e7f9      	b.n	10049c50 <_malloc_r+0x9c>
10049c5c:	6862      	ldr	r2, [r4, #4]
10049c5e:	42a3      	cmp	r3, r4
10049c60:	d10e      	bne.n	10049c80 <_malloc_r+0xcc>
10049c62:	6032      	str	r2, [r6, #0]
10049c64:	0028      	movs	r0, r5
10049c66:	f000 f82d 	bl	10049cc4 <__malloc_unlock>
10049c6a:	0020      	movs	r0, r4
10049c6c:	2207      	movs	r2, #7
10049c6e:	300b      	adds	r0, #11
10049c70:	1d23      	adds	r3, r4, #4
10049c72:	4390      	bics	r0, r2
10049c74:	1ac2      	subs	r2, r0, r3
10049c76:	4298      	cmp	r0, r3
10049c78:	d0df      	beq.n	10049c3a <_malloc_r+0x86>
10049c7a:	1a1b      	subs	r3, r3, r0
10049c7c:	50a3      	str	r3, [r4, r2]
10049c7e:	e7dc      	b.n	10049c3a <_malloc_r+0x86>
10049c80:	605a      	str	r2, [r3, #4]
10049c82:	e7ef      	b.n	10049c64 <_malloc_r+0xb0>
10049c84:	0023      	movs	r3, r4
10049c86:	6864      	ldr	r4, [r4, #4]
10049c88:	e7a6      	b.n	10049bd8 <_malloc_r+0x24>
10049c8a:	9c00      	ldr	r4, [sp, #0]
10049c8c:	6863      	ldr	r3, [r4, #4]
10049c8e:	9300      	str	r3, [sp, #0]
10049c90:	e7ad      	b.n	10049bee <_malloc_r+0x3a>
10049c92:	001a      	movs	r2, r3
10049c94:	685b      	ldr	r3, [r3, #4]
10049c96:	42a3      	cmp	r3, r4
10049c98:	d1fb      	bne.n	10049c92 <_malloc_r+0xde>
10049c9a:	2300      	movs	r3, #0
10049c9c:	e7da      	b.n	10049c54 <_malloc_r+0xa0>
10049c9e:	230c      	movs	r3, #12
10049ca0:	0028      	movs	r0, r5
10049ca2:	602b      	str	r3, [r5, #0]
10049ca4:	f000 f80e 	bl	10049cc4 <__malloc_unlock>
10049ca8:	e7c6      	b.n	10049c38 <_malloc_r+0x84>
10049caa:	6007      	str	r7, [r0, #0]
10049cac:	e7da      	b.n	10049c64 <_malloc_r+0xb0>
10049cae:	46c0      	nop			@ (mov r8, r8)
10049cb0:	20000bf4 	.word	0x20000bf4

10049cb4 <__malloc_lock>:
10049cb4:	b510      	push	{r4, lr}
10049cb6:	4802      	ldr	r0, [pc, #8]	@ (10049cc0 <__malloc_lock+0xc>)
10049cb8:	f000 f84c 	bl	10049d54 <__retarget_lock_acquire_recursive>
10049cbc:	bd10      	pop	{r4, pc}
10049cbe:	46c0      	nop			@ (mov r8, r8)
10049cc0:	20000d34 	.word	0x20000d34

10049cc4 <__malloc_unlock>:
10049cc4:	b510      	push	{r4, lr}
10049cc6:	4802      	ldr	r0, [pc, #8]	@ (10049cd0 <__malloc_unlock+0xc>)
10049cc8:	f000 f845 	bl	10049d56 <__retarget_lock_release_recursive>
10049ccc:	bd10      	pop	{r4, pc}
10049cce:	46c0      	nop			@ (mov r8, r8)
10049cd0:	20000d34 	.word	0x20000d34

10049cd4 <siprintf>:
10049cd4:	b40e      	push	{r1, r2, r3}
10049cd6:	b500      	push	{lr}
10049cd8:	490b      	ldr	r1, [pc, #44]	@ (10049d08 <siprintf+0x34>)
10049cda:	b09c      	sub	sp, #112	@ 0x70
10049cdc:	ab1d      	add	r3, sp, #116	@ 0x74
10049cde:	9002      	str	r0, [sp, #8]
10049ce0:	9006      	str	r0, [sp, #24]
10049ce2:	9107      	str	r1, [sp, #28]
10049ce4:	9104      	str	r1, [sp, #16]
10049ce6:	4809      	ldr	r0, [pc, #36]	@ (10049d0c <siprintf+0x38>)
10049ce8:	4909      	ldr	r1, [pc, #36]	@ (10049d10 <siprintf+0x3c>)
10049cea:	cb04      	ldmia	r3!, {r2}
10049cec:	9105      	str	r1, [sp, #20]
10049cee:	6800      	ldr	r0, [r0, #0]
10049cf0:	a902      	add	r1, sp, #8
10049cf2:	9301      	str	r3, [sp, #4]
10049cf4:	f000 f8e4 	bl	10049ec0 <_svfiprintf_r>
10049cf8:	2200      	movs	r2, #0
10049cfa:	9b02      	ldr	r3, [sp, #8]
10049cfc:	701a      	strb	r2, [r3, #0]
10049cfe:	b01c      	add	sp, #112	@ 0x70
10049d00:	bc08      	pop	{r3}
10049d02:	b003      	add	sp, #12
10049d04:	4718      	bx	r3
10049d06:	46c0      	nop			@ (mov r8, r8)
10049d08:	7fffffff 	.word	0x7fffffff
10049d0c:	20000da4 	.word	0x20000da4
10049d10:	ffff0208 	.word	0xffff0208

10049d14 <memset>:
10049d14:	0003      	movs	r3, r0
10049d16:	1882      	adds	r2, r0, r2
10049d18:	4293      	cmp	r3, r2
10049d1a:	d100      	bne.n	10049d1e <memset+0xa>
10049d1c:	4770      	bx	lr
10049d1e:	7019      	strb	r1, [r3, #0]
10049d20:	3301      	adds	r3, #1
10049d22:	e7f9      	b.n	10049d18 <memset+0x4>

10049d24 <_sbrk_r>:
10049d24:	2300      	movs	r3, #0
10049d26:	b570      	push	{r4, r5, r6, lr}
10049d28:	4d06      	ldr	r5, [pc, #24]	@ (10049d44 <_sbrk_r+0x20>)
10049d2a:	0004      	movs	r4, r0
10049d2c:	0008      	movs	r0, r1
10049d2e:	602b      	str	r3, [r5, #0]
10049d30:	f7f9 fd08 	bl	10043744 <_sbrk>
10049d34:	1c43      	adds	r3, r0, #1
10049d36:	d103      	bne.n	10049d40 <_sbrk_r+0x1c>
10049d38:	682b      	ldr	r3, [r5, #0]
10049d3a:	2b00      	cmp	r3, #0
10049d3c:	d000      	beq.n	10049d40 <_sbrk_r+0x1c>
10049d3e:	6023      	str	r3, [r4, #0]
10049d40:	bd70      	pop	{r4, r5, r6, pc}
10049d42:	46c0      	nop			@ (mov r8, r8)
10049d44:	20000d30 	.word	0x20000d30

10049d48 <__errno>:
10049d48:	4b01      	ldr	r3, [pc, #4]	@ (10049d50 <__errno+0x8>)
10049d4a:	6818      	ldr	r0, [r3, #0]
10049d4c:	4770      	bx	lr
10049d4e:	46c0      	nop			@ (mov r8, r8)
10049d50:	20000da4 	.word	0x20000da4

10049d54 <__retarget_lock_acquire_recursive>:
10049d54:	4770      	bx	lr

10049d56 <__retarget_lock_release_recursive>:
10049d56:	4770      	bx	lr

10049d58 <memcpy>:
10049d58:	2300      	movs	r3, #0
10049d5a:	b510      	push	{r4, lr}
10049d5c:	429a      	cmp	r2, r3
10049d5e:	d100      	bne.n	10049d62 <memcpy+0xa>
10049d60:	bd10      	pop	{r4, pc}
10049d62:	5ccc      	ldrb	r4, [r1, r3]
10049d64:	54c4      	strb	r4, [r0, r3]
10049d66:	3301      	adds	r3, #1
10049d68:	e7f8      	b.n	10049d5c <memcpy+0x4>
	...

10049d6c <_free_r>:
10049d6c:	b570      	push	{r4, r5, r6, lr}
10049d6e:	0005      	movs	r5, r0
10049d70:	1e0c      	subs	r4, r1, #0
10049d72:	d010      	beq.n	10049d96 <_free_r+0x2a>
10049d74:	3c04      	subs	r4, #4
10049d76:	6823      	ldr	r3, [r4, #0]
10049d78:	2b00      	cmp	r3, #0
10049d7a:	da00      	bge.n	10049d7e <_free_r+0x12>
10049d7c:	18e4      	adds	r4, r4, r3
10049d7e:	0028      	movs	r0, r5
10049d80:	f7ff ff98 	bl	10049cb4 <__malloc_lock>
10049d84:	4a1d      	ldr	r2, [pc, #116]	@ (10049dfc <_free_r+0x90>)
10049d86:	6813      	ldr	r3, [r2, #0]
10049d88:	2b00      	cmp	r3, #0
10049d8a:	d105      	bne.n	10049d98 <_free_r+0x2c>
10049d8c:	6063      	str	r3, [r4, #4]
10049d8e:	6014      	str	r4, [r2, #0]
10049d90:	0028      	movs	r0, r5
10049d92:	f7ff ff97 	bl	10049cc4 <__malloc_unlock>
10049d96:	bd70      	pop	{r4, r5, r6, pc}
10049d98:	42a3      	cmp	r3, r4
10049d9a:	d908      	bls.n	10049dae <_free_r+0x42>
10049d9c:	6820      	ldr	r0, [r4, #0]
10049d9e:	1821      	adds	r1, r4, r0
10049da0:	428b      	cmp	r3, r1
10049da2:	d1f3      	bne.n	10049d8c <_free_r+0x20>
10049da4:	6819      	ldr	r1, [r3, #0]
10049da6:	685b      	ldr	r3, [r3, #4]
10049da8:	1809      	adds	r1, r1, r0
10049daa:	6021      	str	r1, [r4, #0]
10049dac:	e7ee      	b.n	10049d8c <_free_r+0x20>
10049dae:	001a      	movs	r2, r3
10049db0:	685b      	ldr	r3, [r3, #4]
10049db2:	2b00      	cmp	r3, #0
10049db4:	d001      	beq.n	10049dba <_free_r+0x4e>
10049db6:	42a3      	cmp	r3, r4
10049db8:	d9f9      	bls.n	10049dae <_free_r+0x42>
10049dba:	6811      	ldr	r1, [r2, #0]
10049dbc:	1850      	adds	r0, r2, r1
10049dbe:	42a0      	cmp	r0, r4
10049dc0:	d10b      	bne.n	10049dda <_free_r+0x6e>
10049dc2:	6820      	ldr	r0, [r4, #0]
10049dc4:	1809      	adds	r1, r1, r0
10049dc6:	1850      	adds	r0, r2, r1
10049dc8:	6011      	str	r1, [r2, #0]
10049dca:	4283      	cmp	r3, r0
10049dcc:	d1e0      	bne.n	10049d90 <_free_r+0x24>
10049dce:	6818      	ldr	r0, [r3, #0]
10049dd0:	685b      	ldr	r3, [r3, #4]
10049dd2:	1841      	adds	r1, r0, r1
10049dd4:	6011      	str	r1, [r2, #0]
10049dd6:	6053      	str	r3, [r2, #4]
10049dd8:	e7da      	b.n	10049d90 <_free_r+0x24>
10049dda:	42a0      	cmp	r0, r4
10049ddc:	d902      	bls.n	10049de4 <_free_r+0x78>
10049dde:	230c      	movs	r3, #12
10049de0:	602b      	str	r3, [r5, #0]
10049de2:	e7d5      	b.n	10049d90 <_free_r+0x24>
10049de4:	6820      	ldr	r0, [r4, #0]
10049de6:	1821      	adds	r1, r4, r0
10049de8:	428b      	cmp	r3, r1
10049dea:	d103      	bne.n	10049df4 <_free_r+0x88>
10049dec:	6819      	ldr	r1, [r3, #0]
10049dee:	685b      	ldr	r3, [r3, #4]
10049df0:	1809      	adds	r1, r1, r0
10049df2:	6021      	str	r1, [r4, #0]
10049df4:	6063      	str	r3, [r4, #4]
10049df6:	6054      	str	r4, [r2, #4]
10049df8:	e7ca      	b.n	10049d90 <_free_r+0x24>
10049dfa:	46c0      	nop			@ (mov r8, r8)
10049dfc:	20000bf4 	.word	0x20000bf4

10049e00 <__ssputs_r>:
10049e00:	b5f0      	push	{r4, r5, r6, r7, lr}
10049e02:	688e      	ldr	r6, [r1, #8]
10049e04:	b085      	sub	sp, #20
10049e06:	001f      	movs	r7, r3
10049e08:	000c      	movs	r4, r1
10049e0a:	680b      	ldr	r3, [r1, #0]
10049e0c:	9002      	str	r0, [sp, #8]
10049e0e:	9203      	str	r2, [sp, #12]
10049e10:	42be      	cmp	r6, r7
10049e12:	d830      	bhi.n	10049e76 <__ssputs_r+0x76>
10049e14:	210c      	movs	r1, #12
10049e16:	5e62      	ldrsh	r2, [r4, r1]
10049e18:	2190      	movs	r1, #144	@ 0x90
10049e1a:	00c9      	lsls	r1, r1, #3
10049e1c:	420a      	tst	r2, r1
10049e1e:	d028      	beq.n	10049e72 <__ssputs_r+0x72>
10049e20:	2003      	movs	r0, #3
10049e22:	6921      	ldr	r1, [r4, #16]
10049e24:	1a5b      	subs	r3, r3, r1
10049e26:	9301      	str	r3, [sp, #4]
10049e28:	6963      	ldr	r3, [r4, #20]
10049e2a:	4343      	muls	r3, r0
10049e2c:	9801      	ldr	r0, [sp, #4]
10049e2e:	0fdd      	lsrs	r5, r3, #31
10049e30:	18ed      	adds	r5, r5, r3
10049e32:	1c7b      	adds	r3, r7, #1
10049e34:	181b      	adds	r3, r3, r0
10049e36:	106d      	asrs	r5, r5, #1
10049e38:	42ab      	cmp	r3, r5
10049e3a:	d900      	bls.n	10049e3e <__ssputs_r+0x3e>
10049e3c:	001d      	movs	r5, r3
10049e3e:	0552      	lsls	r2, r2, #21
10049e40:	d528      	bpl.n	10049e94 <__ssputs_r+0x94>
10049e42:	0029      	movs	r1, r5
10049e44:	9802      	ldr	r0, [sp, #8]
10049e46:	f7ff feb5 	bl	10049bb4 <_malloc_r>
10049e4a:	1e06      	subs	r6, r0, #0
10049e4c:	d02c      	beq.n	10049ea8 <__ssputs_r+0xa8>
10049e4e:	9a01      	ldr	r2, [sp, #4]
10049e50:	6921      	ldr	r1, [r4, #16]
10049e52:	f7ff ff81 	bl	10049d58 <memcpy>
10049e56:	89a2      	ldrh	r2, [r4, #12]
10049e58:	4b18      	ldr	r3, [pc, #96]	@ (10049ebc <__ssputs_r+0xbc>)
10049e5a:	401a      	ands	r2, r3
10049e5c:	2380      	movs	r3, #128	@ 0x80
10049e5e:	4313      	orrs	r3, r2
10049e60:	81a3      	strh	r3, [r4, #12]
10049e62:	9b01      	ldr	r3, [sp, #4]
10049e64:	6126      	str	r6, [r4, #16]
10049e66:	18f6      	adds	r6, r6, r3
10049e68:	6026      	str	r6, [r4, #0]
10049e6a:	003e      	movs	r6, r7
10049e6c:	6165      	str	r5, [r4, #20]
10049e6e:	1aed      	subs	r5, r5, r3
10049e70:	60a5      	str	r5, [r4, #8]
10049e72:	42be      	cmp	r6, r7
10049e74:	d900      	bls.n	10049e78 <__ssputs_r+0x78>
10049e76:	003e      	movs	r6, r7
10049e78:	0032      	movs	r2, r6
10049e7a:	9903      	ldr	r1, [sp, #12]
10049e7c:	6820      	ldr	r0, [r4, #0]
10049e7e:	f000 fa9b 	bl	1004a3b8 <memmove>
10049e82:	2000      	movs	r0, #0
10049e84:	68a3      	ldr	r3, [r4, #8]
10049e86:	1b9b      	subs	r3, r3, r6
10049e88:	60a3      	str	r3, [r4, #8]
10049e8a:	6823      	ldr	r3, [r4, #0]
10049e8c:	199b      	adds	r3, r3, r6
10049e8e:	6023      	str	r3, [r4, #0]
10049e90:	b005      	add	sp, #20
10049e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049e94:	002a      	movs	r2, r5
10049e96:	9802      	ldr	r0, [sp, #8]
10049e98:	f000 faac 	bl	1004a3f4 <_realloc_r>
10049e9c:	1e06      	subs	r6, r0, #0
10049e9e:	d1e0      	bne.n	10049e62 <__ssputs_r+0x62>
10049ea0:	6921      	ldr	r1, [r4, #16]
10049ea2:	9802      	ldr	r0, [sp, #8]
10049ea4:	f7ff ff62 	bl	10049d6c <_free_r>
10049ea8:	230c      	movs	r3, #12
10049eaa:	2001      	movs	r0, #1
10049eac:	9a02      	ldr	r2, [sp, #8]
10049eae:	4240      	negs	r0, r0
10049eb0:	6013      	str	r3, [r2, #0]
10049eb2:	89a2      	ldrh	r2, [r4, #12]
10049eb4:	3334      	adds	r3, #52	@ 0x34
10049eb6:	4313      	orrs	r3, r2
10049eb8:	81a3      	strh	r3, [r4, #12]
10049eba:	e7e9      	b.n	10049e90 <__ssputs_r+0x90>
10049ebc:	fffffb7f 	.word	0xfffffb7f

10049ec0 <_svfiprintf_r>:
10049ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
10049ec2:	b0a1      	sub	sp, #132	@ 0x84
10049ec4:	9003      	str	r0, [sp, #12]
10049ec6:	001d      	movs	r5, r3
10049ec8:	898b      	ldrh	r3, [r1, #12]
10049eca:	000f      	movs	r7, r1
10049ecc:	0016      	movs	r6, r2
10049ece:	061b      	lsls	r3, r3, #24
10049ed0:	d511      	bpl.n	10049ef6 <_svfiprintf_r+0x36>
10049ed2:	690b      	ldr	r3, [r1, #16]
10049ed4:	2b00      	cmp	r3, #0
10049ed6:	d10e      	bne.n	10049ef6 <_svfiprintf_r+0x36>
10049ed8:	2140      	movs	r1, #64	@ 0x40
10049eda:	f7ff fe6b 	bl	10049bb4 <_malloc_r>
10049ede:	6038      	str	r0, [r7, #0]
10049ee0:	6138      	str	r0, [r7, #16]
10049ee2:	2800      	cmp	r0, #0
10049ee4:	d105      	bne.n	10049ef2 <_svfiprintf_r+0x32>
10049ee6:	230c      	movs	r3, #12
10049ee8:	9a03      	ldr	r2, [sp, #12]
10049eea:	6013      	str	r3, [r2, #0]
10049eec:	2001      	movs	r0, #1
10049eee:	4240      	negs	r0, r0
10049ef0:	e0cf      	b.n	1004a092 <_svfiprintf_r+0x1d2>
10049ef2:	2340      	movs	r3, #64	@ 0x40
10049ef4:	617b      	str	r3, [r7, #20]
10049ef6:	2300      	movs	r3, #0
10049ef8:	ac08      	add	r4, sp, #32
10049efa:	6163      	str	r3, [r4, #20]
10049efc:	3320      	adds	r3, #32
10049efe:	7663      	strb	r3, [r4, #25]
10049f00:	3310      	adds	r3, #16
10049f02:	76a3      	strb	r3, [r4, #26]
10049f04:	9507      	str	r5, [sp, #28]
10049f06:	0035      	movs	r5, r6
10049f08:	782b      	ldrb	r3, [r5, #0]
10049f0a:	2b00      	cmp	r3, #0
10049f0c:	d001      	beq.n	10049f12 <_svfiprintf_r+0x52>
10049f0e:	2b25      	cmp	r3, #37	@ 0x25
10049f10:	d148      	bne.n	10049fa4 <_svfiprintf_r+0xe4>
10049f12:	1bab      	subs	r3, r5, r6
10049f14:	9305      	str	r3, [sp, #20]
10049f16:	42b5      	cmp	r5, r6
10049f18:	d00b      	beq.n	10049f32 <_svfiprintf_r+0x72>
10049f1a:	0032      	movs	r2, r6
10049f1c:	0039      	movs	r1, r7
10049f1e:	9803      	ldr	r0, [sp, #12]
10049f20:	f7ff ff6e 	bl	10049e00 <__ssputs_r>
10049f24:	3001      	adds	r0, #1
10049f26:	d100      	bne.n	10049f2a <_svfiprintf_r+0x6a>
10049f28:	e0ae      	b.n	1004a088 <_svfiprintf_r+0x1c8>
10049f2a:	6963      	ldr	r3, [r4, #20]
10049f2c:	9a05      	ldr	r2, [sp, #20]
10049f2e:	189b      	adds	r3, r3, r2
10049f30:	6163      	str	r3, [r4, #20]
10049f32:	782b      	ldrb	r3, [r5, #0]
10049f34:	2b00      	cmp	r3, #0
10049f36:	d100      	bne.n	10049f3a <_svfiprintf_r+0x7a>
10049f38:	e0a6      	b.n	1004a088 <_svfiprintf_r+0x1c8>
10049f3a:	2201      	movs	r2, #1
10049f3c:	2300      	movs	r3, #0
10049f3e:	4252      	negs	r2, r2
10049f40:	6062      	str	r2, [r4, #4]
10049f42:	a904      	add	r1, sp, #16
10049f44:	3254      	adds	r2, #84	@ 0x54
10049f46:	1852      	adds	r2, r2, r1
10049f48:	1c6e      	adds	r6, r5, #1
10049f4a:	6023      	str	r3, [r4, #0]
10049f4c:	60e3      	str	r3, [r4, #12]
10049f4e:	60a3      	str	r3, [r4, #8]
10049f50:	7013      	strb	r3, [r2, #0]
10049f52:	65a3      	str	r3, [r4, #88]	@ 0x58
10049f54:	4b54      	ldr	r3, [pc, #336]	@ (1004a0a8 <_svfiprintf_r+0x1e8>)
10049f56:	2205      	movs	r2, #5
10049f58:	0018      	movs	r0, r3
10049f5a:	7831      	ldrb	r1, [r6, #0]
10049f5c:	9305      	str	r3, [sp, #20]
10049f5e:	f000 fa3e 	bl	1004a3de <memchr>
10049f62:	1c75      	adds	r5, r6, #1
10049f64:	2800      	cmp	r0, #0
10049f66:	d11f      	bne.n	10049fa8 <_svfiprintf_r+0xe8>
10049f68:	6822      	ldr	r2, [r4, #0]
10049f6a:	06d3      	lsls	r3, r2, #27
10049f6c:	d504      	bpl.n	10049f78 <_svfiprintf_r+0xb8>
10049f6e:	2353      	movs	r3, #83	@ 0x53
10049f70:	a904      	add	r1, sp, #16
10049f72:	185b      	adds	r3, r3, r1
10049f74:	2120      	movs	r1, #32
10049f76:	7019      	strb	r1, [r3, #0]
10049f78:	0713      	lsls	r3, r2, #28
10049f7a:	d504      	bpl.n	10049f86 <_svfiprintf_r+0xc6>
10049f7c:	2353      	movs	r3, #83	@ 0x53
10049f7e:	a904      	add	r1, sp, #16
10049f80:	185b      	adds	r3, r3, r1
10049f82:	212b      	movs	r1, #43	@ 0x2b
10049f84:	7019      	strb	r1, [r3, #0]
10049f86:	7833      	ldrb	r3, [r6, #0]
10049f88:	2b2a      	cmp	r3, #42	@ 0x2a
10049f8a:	d016      	beq.n	10049fba <_svfiprintf_r+0xfa>
10049f8c:	0035      	movs	r5, r6
10049f8e:	2100      	movs	r1, #0
10049f90:	200a      	movs	r0, #10
10049f92:	68e3      	ldr	r3, [r4, #12]
10049f94:	782a      	ldrb	r2, [r5, #0]
10049f96:	1c6e      	adds	r6, r5, #1
10049f98:	3a30      	subs	r2, #48	@ 0x30
10049f9a:	2a09      	cmp	r2, #9
10049f9c:	d950      	bls.n	1004a040 <_svfiprintf_r+0x180>
10049f9e:	2900      	cmp	r1, #0
10049fa0:	d111      	bne.n	10049fc6 <_svfiprintf_r+0x106>
10049fa2:	e017      	b.n	10049fd4 <_svfiprintf_r+0x114>
10049fa4:	3501      	adds	r5, #1
10049fa6:	e7af      	b.n	10049f08 <_svfiprintf_r+0x48>
10049fa8:	9b05      	ldr	r3, [sp, #20]
10049faa:	6822      	ldr	r2, [r4, #0]
10049fac:	1ac0      	subs	r0, r0, r3
10049fae:	2301      	movs	r3, #1
10049fb0:	4083      	lsls	r3, r0
10049fb2:	4313      	orrs	r3, r2
10049fb4:	002e      	movs	r6, r5
10049fb6:	6023      	str	r3, [r4, #0]
10049fb8:	e7cc      	b.n	10049f54 <_svfiprintf_r+0x94>
10049fba:	9b07      	ldr	r3, [sp, #28]
10049fbc:	1d19      	adds	r1, r3, #4
10049fbe:	681b      	ldr	r3, [r3, #0]
10049fc0:	9107      	str	r1, [sp, #28]
10049fc2:	2b00      	cmp	r3, #0
10049fc4:	db01      	blt.n	10049fca <_svfiprintf_r+0x10a>
10049fc6:	930b      	str	r3, [sp, #44]	@ 0x2c
10049fc8:	e004      	b.n	10049fd4 <_svfiprintf_r+0x114>
10049fca:	425b      	negs	r3, r3
10049fcc:	60e3      	str	r3, [r4, #12]
10049fce:	2302      	movs	r3, #2
10049fd0:	4313      	orrs	r3, r2
10049fd2:	6023      	str	r3, [r4, #0]
10049fd4:	782b      	ldrb	r3, [r5, #0]
10049fd6:	2b2e      	cmp	r3, #46	@ 0x2e
10049fd8:	d10c      	bne.n	10049ff4 <_svfiprintf_r+0x134>
10049fda:	786b      	ldrb	r3, [r5, #1]
10049fdc:	2b2a      	cmp	r3, #42	@ 0x2a
10049fde:	d134      	bne.n	1004a04a <_svfiprintf_r+0x18a>
10049fe0:	9b07      	ldr	r3, [sp, #28]
10049fe2:	3502      	adds	r5, #2
10049fe4:	1d1a      	adds	r2, r3, #4
10049fe6:	681b      	ldr	r3, [r3, #0]
10049fe8:	9207      	str	r2, [sp, #28]
10049fea:	2b00      	cmp	r3, #0
10049fec:	da01      	bge.n	10049ff2 <_svfiprintf_r+0x132>
10049fee:	2301      	movs	r3, #1
10049ff0:	425b      	negs	r3, r3
10049ff2:	9309      	str	r3, [sp, #36]	@ 0x24
10049ff4:	4e2d      	ldr	r6, [pc, #180]	@ (1004a0ac <_svfiprintf_r+0x1ec>)
10049ff6:	2203      	movs	r2, #3
10049ff8:	0030      	movs	r0, r6
10049ffa:	7829      	ldrb	r1, [r5, #0]
10049ffc:	f000 f9ef 	bl	1004a3de <memchr>
1004a000:	2800      	cmp	r0, #0
1004a002:	d006      	beq.n	1004a012 <_svfiprintf_r+0x152>
1004a004:	2340      	movs	r3, #64	@ 0x40
1004a006:	1b80      	subs	r0, r0, r6
1004a008:	4083      	lsls	r3, r0
1004a00a:	6822      	ldr	r2, [r4, #0]
1004a00c:	3501      	adds	r5, #1
1004a00e:	4313      	orrs	r3, r2
1004a010:	6023      	str	r3, [r4, #0]
1004a012:	7829      	ldrb	r1, [r5, #0]
1004a014:	2206      	movs	r2, #6
1004a016:	4826      	ldr	r0, [pc, #152]	@ (1004a0b0 <_svfiprintf_r+0x1f0>)
1004a018:	1c6e      	adds	r6, r5, #1
1004a01a:	7621      	strb	r1, [r4, #24]
1004a01c:	f000 f9df 	bl	1004a3de <memchr>
1004a020:	2800      	cmp	r0, #0
1004a022:	d038      	beq.n	1004a096 <_svfiprintf_r+0x1d6>
1004a024:	4b23      	ldr	r3, [pc, #140]	@ (1004a0b4 <_svfiprintf_r+0x1f4>)
1004a026:	2b00      	cmp	r3, #0
1004a028:	d122      	bne.n	1004a070 <_svfiprintf_r+0x1b0>
1004a02a:	2207      	movs	r2, #7
1004a02c:	9b07      	ldr	r3, [sp, #28]
1004a02e:	3307      	adds	r3, #7
1004a030:	4393      	bics	r3, r2
1004a032:	3308      	adds	r3, #8
1004a034:	9307      	str	r3, [sp, #28]
1004a036:	6963      	ldr	r3, [r4, #20]
1004a038:	9a04      	ldr	r2, [sp, #16]
1004a03a:	189b      	adds	r3, r3, r2
1004a03c:	6163      	str	r3, [r4, #20]
1004a03e:	e762      	b.n	10049f06 <_svfiprintf_r+0x46>
1004a040:	4343      	muls	r3, r0
1004a042:	0035      	movs	r5, r6
1004a044:	2101      	movs	r1, #1
1004a046:	189b      	adds	r3, r3, r2
1004a048:	e7a4      	b.n	10049f94 <_svfiprintf_r+0xd4>
1004a04a:	2300      	movs	r3, #0
1004a04c:	200a      	movs	r0, #10
1004a04e:	0019      	movs	r1, r3
1004a050:	3501      	adds	r5, #1
1004a052:	6063      	str	r3, [r4, #4]
1004a054:	782a      	ldrb	r2, [r5, #0]
1004a056:	1c6e      	adds	r6, r5, #1
1004a058:	3a30      	subs	r2, #48	@ 0x30
1004a05a:	2a09      	cmp	r2, #9
1004a05c:	d903      	bls.n	1004a066 <_svfiprintf_r+0x1a6>
1004a05e:	2b00      	cmp	r3, #0
1004a060:	d0c8      	beq.n	10049ff4 <_svfiprintf_r+0x134>
1004a062:	9109      	str	r1, [sp, #36]	@ 0x24
1004a064:	e7c6      	b.n	10049ff4 <_svfiprintf_r+0x134>
1004a066:	4341      	muls	r1, r0
1004a068:	0035      	movs	r5, r6
1004a06a:	2301      	movs	r3, #1
1004a06c:	1889      	adds	r1, r1, r2
1004a06e:	e7f1      	b.n	1004a054 <_svfiprintf_r+0x194>
1004a070:	aa07      	add	r2, sp, #28
1004a072:	9200      	str	r2, [sp, #0]
1004a074:	0021      	movs	r1, r4
1004a076:	003a      	movs	r2, r7
1004a078:	4b0f      	ldr	r3, [pc, #60]	@ (1004a0b8 <_svfiprintf_r+0x1f8>)
1004a07a:	9803      	ldr	r0, [sp, #12]
1004a07c:	e000      	b.n	1004a080 <_svfiprintf_r+0x1c0>
1004a07e:	bf00      	nop
1004a080:	9004      	str	r0, [sp, #16]
1004a082:	9b04      	ldr	r3, [sp, #16]
1004a084:	3301      	adds	r3, #1
1004a086:	d1d6      	bne.n	1004a036 <_svfiprintf_r+0x176>
1004a088:	89bb      	ldrh	r3, [r7, #12]
1004a08a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004a08c:	065b      	lsls	r3, r3, #25
1004a08e:	d500      	bpl.n	1004a092 <_svfiprintf_r+0x1d2>
1004a090:	e72c      	b.n	10049eec <_svfiprintf_r+0x2c>
1004a092:	b021      	add	sp, #132	@ 0x84
1004a094:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a096:	aa07      	add	r2, sp, #28
1004a098:	9200      	str	r2, [sp, #0]
1004a09a:	0021      	movs	r1, r4
1004a09c:	003a      	movs	r2, r7
1004a09e:	4b06      	ldr	r3, [pc, #24]	@ (1004a0b8 <_svfiprintf_r+0x1f8>)
1004a0a0:	9803      	ldr	r0, [sp, #12]
1004a0a2:	f000 f87b 	bl	1004a19c <_printf_i>
1004a0a6:	e7eb      	b.n	1004a080 <_svfiprintf_r+0x1c0>
1004a0a8:	1004a6e4 	.word	0x1004a6e4
1004a0ac:	1004a6ea 	.word	0x1004a6ea
1004a0b0:	1004a6ee 	.word	0x1004a6ee
1004a0b4:	00000000 	.word	0x00000000
1004a0b8:	10049e01 	.word	0x10049e01

1004a0bc <_printf_common>:
1004a0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004a0be:	0016      	movs	r6, r2
1004a0c0:	9301      	str	r3, [sp, #4]
1004a0c2:	688a      	ldr	r2, [r1, #8]
1004a0c4:	690b      	ldr	r3, [r1, #16]
1004a0c6:	000c      	movs	r4, r1
1004a0c8:	9000      	str	r0, [sp, #0]
1004a0ca:	4293      	cmp	r3, r2
1004a0cc:	da00      	bge.n	1004a0d0 <_printf_common+0x14>
1004a0ce:	0013      	movs	r3, r2
1004a0d0:	0022      	movs	r2, r4
1004a0d2:	6033      	str	r3, [r6, #0]
1004a0d4:	3243      	adds	r2, #67	@ 0x43
1004a0d6:	7812      	ldrb	r2, [r2, #0]
1004a0d8:	2a00      	cmp	r2, #0
1004a0da:	d001      	beq.n	1004a0e0 <_printf_common+0x24>
1004a0dc:	3301      	adds	r3, #1
1004a0de:	6033      	str	r3, [r6, #0]
1004a0e0:	6823      	ldr	r3, [r4, #0]
1004a0e2:	069b      	lsls	r3, r3, #26
1004a0e4:	d502      	bpl.n	1004a0ec <_printf_common+0x30>
1004a0e6:	6833      	ldr	r3, [r6, #0]
1004a0e8:	3302      	adds	r3, #2
1004a0ea:	6033      	str	r3, [r6, #0]
1004a0ec:	6822      	ldr	r2, [r4, #0]
1004a0ee:	2306      	movs	r3, #6
1004a0f0:	0015      	movs	r5, r2
1004a0f2:	401d      	ands	r5, r3
1004a0f4:	421a      	tst	r2, r3
1004a0f6:	d027      	beq.n	1004a148 <_printf_common+0x8c>
1004a0f8:	0023      	movs	r3, r4
1004a0fa:	3343      	adds	r3, #67	@ 0x43
1004a0fc:	781b      	ldrb	r3, [r3, #0]
1004a0fe:	1e5a      	subs	r2, r3, #1
1004a100:	4193      	sbcs	r3, r2
1004a102:	6822      	ldr	r2, [r4, #0]
1004a104:	0692      	lsls	r2, r2, #26
1004a106:	d430      	bmi.n	1004a16a <_printf_common+0xae>
1004a108:	0022      	movs	r2, r4
1004a10a:	9901      	ldr	r1, [sp, #4]
1004a10c:	9800      	ldr	r0, [sp, #0]
1004a10e:	9d08      	ldr	r5, [sp, #32]
1004a110:	3243      	adds	r2, #67	@ 0x43
1004a112:	47a8      	blx	r5
1004a114:	3001      	adds	r0, #1
1004a116:	d025      	beq.n	1004a164 <_printf_common+0xa8>
1004a118:	2206      	movs	r2, #6
1004a11a:	6823      	ldr	r3, [r4, #0]
1004a11c:	2500      	movs	r5, #0
1004a11e:	4013      	ands	r3, r2
1004a120:	2b04      	cmp	r3, #4
1004a122:	d105      	bne.n	1004a130 <_printf_common+0x74>
1004a124:	6833      	ldr	r3, [r6, #0]
1004a126:	68e5      	ldr	r5, [r4, #12]
1004a128:	1aed      	subs	r5, r5, r3
1004a12a:	43eb      	mvns	r3, r5
1004a12c:	17db      	asrs	r3, r3, #31
1004a12e:	401d      	ands	r5, r3
1004a130:	68a3      	ldr	r3, [r4, #8]
1004a132:	6922      	ldr	r2, [r4, #16]
1004a134:	4293      	cmp	r3, r2
1004a136:	dd01      	ble.n	1004a13c <_printf_common+0x80>
1004a138:	1a9b      	subs	r3, r3, r2
1004a13a:	18ed      	adds	r5, r5, r3
1004a13c:	2600      	movs	r6, #0
1004a13e:	42b5      	cmp	r5, r6
1004a140:	d120      	bne.n	1004a184 <_printf_common+0xc8>
1004a142:	2000      	movs	r0, #0
1004a144:	e010      	b.n	1004a168 <_printf_common+0xac>
1004a146:	3501      	adds	r5, #1
1004a148:	68e3      	ldr	r3, [r4, #12]
1004a14a:	6832      	ldr	r2, [r6, #0]
1004a14c:	1a9b      	subs	r3, r3, r2
1004a14e:	42ab      	cmp	r3, r5
1004a150:	ddd2      	ble.n	1004a0f8 <_printf_common+0x3c>
1004a152:	0022      	movs	r2, r4
1004a154:	2301      	movs	r3, #1
1004a156:	9901      	ldr	r1, [sp, #4]
1004a158:	9800      	ldr	r0, [sp, #0]
1004a15a:	9f08      	ldr	r7, [sp, #32]
1004a15c:	3219      	adds	r2, #25
1004a15e:	47b8      	blx	r7
1004a160:	3001      	adds	r0, #1
1004a162:	d1f0      	bne.n	1004a146 <_printf_common+0x8a>
1004a164:	2001      	movs	r0, #1
1004a166:	4240      	negs	r0, r0
1004a168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004a16a:	2030      	movs	r0, #48	@ 0x30
1004a16c:	18e1      	adds	r1, r4, r3
1004a16e:	3143      	adds	r1, #67	@ 0x43
1004a170:	7008      	strb	r0, [r1, #0]
1004a172:	0021      	movs	r1, r4
1004a174:	1c5a      	adds	r2, r3, #1
1004a176:	3145      	adds	r1, #69	@ 0x45
1004a178:	7809      	ldrb	r1, [r1, #0]
1004a17a:	18a2      	adds	r2, r4, r2
1004a17c:	3243      	adds	r2, #67	@ 0x43
1004a17e:	3302      	adds	r3, #2
1004a180:	7011      	strb	r1, [r2, #0]
1004a182:	e7c1      	b.n	1004a108 <_printf_common+0x4c>
1004a184:	0022      	movs	r2, r4
1004a186:	2301      	movs	r3, #1
1004a188:	9901      	ldr	r1, [sp, #4]
1004a18a:	9800      	ldr	r0, [sp, #0]
1004a18c:	9f08      	ldr	r7, [sp, #32]
1004a18e:	321a      	adds	r2, #26
1004a190:	47b8      	blx	r7
1004a192:	3001      	adds	r0, #1
1004a194:	d0e6      	beq.n	1004a164 <_printf_common+0xa8>
1004a196:	3601      	adds	r6, #1
1004a198:	e7d1      	b.n	1004a13e <_printf_common+0x82>
	...

1004a19c <_printf_i>:
1004a19c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a19e:	b08b      	sub	sp, #44	@ 0x2c
1004a1a0:	9206      	str	r2, [sp, #24]
1004a1a2:	000a      	movs	r2, r1
1004a1a4:	3243      	adds	r2, #67	@ 0x43
1004a1a6:	9307      	str	r3, [sp, #28]
1004a1a8:	9005      	str	r0, [sp, #20]
1004a1aa:	9203      	str	r2, [sp, #12]
1004a1ac:	7e0a      	ldrb	r2, [r1, #24]
1004a1ae:	000c      	movs	r4, r1
1004a1b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004a1b2:	2a78      	cmp	r2, #120	@ 0x78
1004a1b4:	d809      	bhi.n	1004a1ca <_printf_i+0x2e>
1004a1b6:	2a62      	cmp	r2, #98	@ 0x62
1004a1b8:	d80b      	bhi.n	1004a1d2 <_printf_i+0x36>
1004a1ba:	2a00      	cmp	r2, #0
1004a1bc:	d100      	bne.n	1004a1c0 <_printf_i+0x24>
1004a1be:	e0bc      	b.n	1004a33a <_printf_i+0x19e>
1004a1c0:	497b      	ldr	r1, [pc, #492]	@ (1004a3b0 <_printf_i+0x214>)
1004a1c2:	9104      	str	r1, [sp, #16]
1004a1c4:	2a58      	cmp	r2, #88	@ 0x58
1004a1c6:	d100      	bne.n	1004a1ca <_printf_i+0x2e>
1004a1c8:	e090      	b.n	1004a2ec <_printf_i+0x150>
1004a1ca:	0025      	movs	r5, r4
1004a1cc:	3542      	adds	r5, #66	@ 0x42
1004a1ce:	702a      	strb	r2, [r5, #0]
1004a1d0:	e022      	b.n	1004a218 <_printf_i+0x7c>
1004a1d2:	0010      	movs	r0, r2
1004a1d4:	3863      	subs	r0, #99	@ 0x63
1004a1d6:	2815      	cmp	r0, #21
1004a1d8:	d8f7      	bhi.n	1004a1ca <_printf_i+0x2e>
1004a1da:	f7f5 ff9b 	bl	10040114 <__gnu_thumb1_case_shi>
1004a1de:	0016      	.short	0x0016
1004a1e0:	fff6001f 	.word	0xfff6001f
1004a1e4:	fff6fff6 	.word	0xfff6fff6
1004a1e8:	001ffff6 	.word	0x001ffff6
1004a1ec:	fff6fff6 	.word	0xfff6fff6
1004a1f0:	fff6fff6 	.word	0xfff6fff6
1004a1f4:	003600a1 	.word	0x003600a1
1004a1f8:	fff60080 	.word	0xfff60080
1004a1fc:	00b2fff6 	.word	0x00b2fff6
1004a200:	0036fff6 	.word	0x0036fff6
1004a204:	fff6fff6 	.word	0xfff6fff6
1004a208:	0084      	.short	0x0084
1004a20a:	0025      	movs	r5, r4
1004a20c:	681a      	ldr	r2, [r3, #0]
1004a20e:	3542      	adds	r5, #66	@ 0x42
1004a210:	1d11      	adds	r1, r2, #4
1004a212:	6019      	str	r1, [r3, #0]
1004a214:	6813      	ldr	r3, [r2, #0]
1004a216:	702b      	strb	r3, [r5, #0]
1004a218:	2301      	movs	r3, #1
1004a21a:	e0a0      	b.n	1004a35e <_printf_i+0x1c2>
1004a21c:	6818      	ldr	r0, [r3, #0]
1004a21e:	6809      	ldr	r1, [r1, #0]
1004a220:	1d02      	adds	r2, r0, #4
1004a222:	060d      	lsls	r5, r1, #24
1004a224:	d50b      	bpl.n	1004a23e <_printf_i+0xa2>
1004a226:	6806      	ldr	r6, [r0, #0]
1004a228:	601a      	str	r2, [r3, #0]
1004a22a:	2e00      	cmp	r6, #0
1004a22c:	da03      	bge.n	1004a236 <_printf_i+0x9a>
1004a22e:	232d      	movs	r3, #45	@ 0x2d
1004a230:	9a03      	ldr	r2, [sp, #12]
1004a232:	4276      	negs	r6, r6
1004a234:	7013      	strb	r3, [r2, #0]
1004a236:	4b5e      	ldr	r3, [pc, #376]	@ (1004a3b0 <_printf_i+0x214>)
1004a238:	270a      	movs	r7, #10
1004a23a:	9304      	str	r3, [sp, #16]
1004a23c:	e018      	b.n	1004a270 <_printf_i+0xd4>
1004a23e:	6806      	ldr	r6, [r0, #0]
1004a240:	601a      	str	r2, [r3, #0]
1004a242:	0649      	lsls	r1, r1, #25
1004a244:	d5f1      	bpl.n	1004a22a <_printf_i+0x8e>
1004a246:	b236      	sxth	r6, r6
1004a248:	e7ef      	b.n	1004a22a <_printf_i+0x8e>
1004a24a:	6808      	ldr	r0, [r1, #0]
1004a24c:	6819      	ldr	r1, [r3, #0]
1004a24e:	c940      	ldmia	r1!, {r6}
1004a250:	0605      	lsls	r5, r0, #24
1004a252:	d402      	bmi.n	1004a25a <_printf_i+0xbe>
1004a254:	0640      	lsls	r0, r0, #25
1004a256:	d500      	bpl.n	1004a25a <_printf_i+0xbe>
1004a258:	b2b6      	uxth	r6, r6
1004a25a:	6019      	str	r1, [r3, #0]
1004a25c:	4b54      	ldr	r3, [pc, #336]	@ (1004a3b0 <_printf_i+0x214>)
1004a25e:	270a      	movs	r7, #10
1004a260:	9304      	str	r3, [sp, #16]
1004a262:	2a6f      	cmp	r2, #111	@ 0x6f
1004a264:	d100      	bne.n	1004a268 <_printf_i+0xcc>
1004a266:	3f02      	subs	r7, #2
1004a268:	0023      	movs	r3, r4
1004a26a:	2200      	movs	r2, #0
1004a26c:	3343      	adds	r3, #67	@ 0x43
1004a26e:	701a      	strb	r2, [r3, #0]
1004a270:	6863      	ldr	r3, [r4, #4]
1004a272:	60a3      	str	r3, [r4, #8]
1004a274:	2b00      	cmp	r3, #0
1004a276:	db03      	blt.n	1004a280 <_printf_i+0xe4>
1004a278:	2104      	movs	r1, #4
1004a27a:	6822      	ldr	r2, [r4, #0]
1004a27c:	438a      	bics	r2, r1
1004a27e:	6022      	str	r2, [r4, #0]
1004a280:	2e00      	cmp	r6, #0
1004a282:	d102      	bne.n	1004a28a <_printf_i+0xee>
1004a284:	9d03      	ldr	r5, [sp, #12]
1004a286:	2b00      	cmp	r3, #0
1004a288:	d00c      	beq.n	1004a2a4 <_printf_i+0x108>
1004a28a:	9d03      	ldr	r5, [sp, #12]
1004a28c:	0030      	movs	r0, r6
1004a28e:	0039      	movs	r1, r7
1004a290:	f7f5 ffd0 	bl	10040234 <__aeabi_uidivmod>
1004a294:	9b04      	ldr	r3, [sp, #16]
1004a296:	3d01      	subs	r5, #1
1004a298:	5c5b      	ldrb	r3, [r3, r1]
1004a29a:	702b      	strb	r3, [r5, #0]
1004a29c:	0033      	movs	r3, r6
1004a29e:	0006      	movs	r6, r0
1004a2a0:	429f      	cmp	r7, r3
1004a2a2:	d9f3      	bls.n	1004a28c <_printf_i+0xf0>
1004a2a4:	2f08      	cmp	r7, #8
1004a2a6:	d109      	bne.n	1004a2bc <_printf_i+0x120>
1004a2a8:	6823      	ldr	r3, [r4, #0]
1004a2aa:	07db      	lsls	r3, r3, #31
1004a2ac:	d506      	bpl.n	1004a2bc <_printf_i+0x120>
1004a2ae:	6862      	ldr	r2, [r4, #4]
1004a2b0:	6923      	ldr	r3, [r4, #16]
1004a2b2:	429a      	cmp	r2, r3
1004a2b4:	dc02      	bgt.n	1004a2bc <_printf_i+0x120>
1004a2b6:	2330      	movs	r3, #48	@ 0x30
1004a2b8:	3d01      	subs	r5, #1
1004a2ba:	702b      	strb	r3, [r5, #0]
1004a2bc:	9b03      	ldr	r3, [sp, #12]
1004a2be:	1b5b      	subs	r3, r3, r5
1004a2c0:	6123      	str	r3, [r4, #16]
1004a2c2:	9b07      	ldr	r3, [sp, #28]
1004a2c4:	0021      	movs	r1, r4
1004a2c6:	9300      	str	r3, [sp, #0]
1004a2c8:	9805      	ldr	r0, [sp, #20]
1004a2ca:	9b06      	ldr	r3, [sp, #24]
1004a2cc:	aa09      	add	r2, sp, #36	@ 0x24
1004a2ce:	f7ff fef5 	bl	1004a0bc <_printf_common>
1004a2d2:	3001      	adds	r0, #1
1004a2d4:	d148      	bne.n	1004a368 <_printf_i+0x1cc>
1004a2d6:	2001      	movs	r0, #1
1004a2d8:	4240      	negs	r0, r0
1004a2da:	b00b      	add	sp, #44	@ 0x2c
1004a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a2de:	2220      	movs	r2, #32
1004a2e0:	6809      	ldr	r1, [r1, #0]
1004a2e2:	430a      	orrs	r2, r1
1004a2e4:	6022      	str	r2, [r4, #0]
1004a2e6:	2278      	movs	r2, #120	@ 0x78
1004a2e8:	4932      	ldr	r1, [pc, #200]	@ (1004a3b4 <_printf_i+0x218>)
1004a2ea:	9104      	str	r1, [sp, #16]
1004a2ec:	0021      	movs	r1, r4
1004a2ee:	3145      	adds	r1, #69	@ 0x45
1004a2f0:	700a      	strb	r2, [r1, #0]
1004a2f2:	6819      	ldr	r1, [r3, #0]
1004a2f4:	6822      	ldr	r2, [r4, #0]
1004a2f6:	c940      	ldmia	r1!, {r6}
1004a2f8:	0610      	lsls	r0, r2, #24
1004a2fa:	d402      	bmi.n	1004a302 <_printf_i+0x166>
1004a2fc:	0650      	lsls	r0, r2, #25
1004a2fe:	d500      	bpl.n	1004a302 <_printf_i+0x166>
1004a300:	b2b6      	uxth	r6, r6
1004a302:	6019      	str	r1, [r3, #0]
1004a304:	07d3      	lsls	r3, r2, #31
1004a306:	d502      	bpl.n	1004a30e <_printf_i+0x172>
1004a308:	2320      	movs	r3, #32
1004a30a:	4313      	orrs	r3, r2
1004a30c:	6023      	str	r3, [r4, #0]
1004a30e:	2e00      	cmp	r6, #0
1004a310:	d001      	beq.n	1004a316 <_printf_i+0x17a>
1004a312:	2710      	movs	r7, #16
1004a314:	e7a8      	b.n	1004a268 <_printf_i+0xcc>
1004a316:	2220      	movs	r2, #32
1004a318:	6823      	ldr	r3, [r4, #0]
1004a31a:	4393      	bics	r3, r2
1004a31c:	6023      	str	r3, [r4, #0]
1004a31e:	e7f8      	b.n	1004a312 <_printf_i+0x176>
1004a320:	681a      	ldr	r2, [r3, #0]
1004a322:	680d      	ldr	r5, [r1, #0]
1004a324:	1d10      	adds	r0, r2, #4
1004a326:	6949      	ldr	r1, [r1, #20]
1004a328:	6018      	str	r0, [r3, #0]
1004a32a:	6813      	ldr	r3, [r2, #0]
1004a32c:	062e      	lsls	r6, r5, #24
1004a32e:	d501      	bpl.n	1004a334 <_printf_i+0x198>
1004a330:	6019      	str	r1, [r3, #0]
1004a332:	e002      	b.n	1004a33a <_printf_i+0x19e>
1004a334:	066d      	lsls	r5, r5, #25
1004a336:	d5fb      	bpl.n	1004a330 <_printf_i+0x194>
1004a338:	8019      	strh	r1, [r3, #0]
1004a33a:	2300      	movs	r3, #0
1004a33c:	9d03      	ldr	r5, [sp, #12]
1004a33e:	6123      	str	r3, [r4, #16]
1004a340:	e7bf      	b.n	1004a2c2 <_printf_i+0x126>
1004a342:	681a      	ldr	r2, [r3, #0]
1004a344:	1d11      	adds	r1, r2, #4
1004a346:	6019      	str	r1, [r3, #0]
1004a348:	6815      	ldr	r5, [r2, #0]
1004a34a:	2100      	movs	r1, #0
1004a34c:	0028      	movs	r0, r5
1004a34e:	6862      	ldr	r2, [r4, #4]
1004a350:	f000 f845 	bl	1004a3de <memchr>
1004a354:	2800      	cmp	r0, #0
1004a356:	d001      	beq.n	1004a35c <_printf_i+0x1c0>
1004a358:	1b40      	subs	r0, r0, r5
1004a35a:	6060      	str	r0, [r4, #4]
1004a35c:	6863      	ldr	r3, [r4, #4]
1004a35e:	6123      	str	r3, [r4, #16]
1004a360:	2300      	movs	r3, #0
1004a362:	9a03      	ldr	r2, [sp, #12]
1004a364:	7013      	strb	r3, [r2, #0]
1004a366:	e7ac      	b.n	1004a2c2 <_printf_i+0x126>
1004a368:	002a      	movs	r2, r5
1004a36a:	6923      	ldr	r3, [r4, #16]
1004a36c:	9906      	ldr	r1, [sp, #24]
1004a36e:	9805      	ldr	r0, [sp, #20]
1004a370:	9d07      	ldr	r5, [sp, #28]
1004a372:	47a8      	blx	r5
1004a374:	3001      	adds	r0, #1
1004a376:	d0ae      	beq.n	1004a2d6 <_printf_i+0x13a>
1004a378:	6823      	ldr	r3, [r4, #0]
1004a37a:	079b      	lsls	r3, r3, #30
1004a37c:	d415      	bmi.n	1004a3aa <_printf_i+0x20e>
1004a37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a380:	68e0      	ldr	r0, [r4, #12]
1004a382:	4298      	cmp	r0, r3
1004a384:	daa9      	bge.n	1004a2da <_printf_i+0x13e>
1004a386:	0018      	movs	r0, r3
1004a388:	e7a7      	b.n	1004a2da <_printf_i+0x13e>
1004a38a:	0022      	movs	r2, r4
1004a38c:	2301      	movs	r3, #1
1004a38e:	9906      	ldr	r1, [sp, #24]
1004a390:	9805      	ldr	r0, [sp, #20]
1004a392:	9e07      	ldr	r6, [sp, #28]
1004a394:	3219      	adds	r2, #25
1004a396:	47b0      	blx	r6
1004a398:	3001      	adds	r0, #1
1004a39a:	d09c      	beq.n	1004a2d6 <_printf_i+0x13a>
1004a39c:	3501      	adds	r5, #1
1004a39e:	68e3      	ldr	r3, [r4, #12]
1004a3a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004a3a2:	1a9b      	subs	r3, r3, r2
1004a3a4:	42ab      	cmp	r3, r5
1004a3a6:	dcf0      	bgt.n	1004a38a <_printf_i+0x1ee>
1004a3a8:	e7e9      	b.n	1004a37e <_printf_i+0x1e2>
1004a3aa:	2500      	movs	r5, #0
1004a3ac:	e7f7      	b.n	1004a39e <_printf_i+0x202>
1004a3ae:	46c0      	nop			@ (mov r8, r8)
1004a3b0:	1004a6f5 	.word	0x1004a6f5
1004a3b4:	1004a706 	.word	0x1004a706

1004a3b8 <memmove>:
1004a3b8:	b510      	push	{r4, lr}
1004a3ba:	4288      	cmp	r0, r1
1004a3bc:	d806      	bhi.n	1004a3cc <memmove+0x14>
1004a3be:	2300      	movs	r3, #0
1004a3c0:	429a      	cmp	r2, r3
1004a3c2:	d008      	beq.n	1004a3d6 <memmove+0x1e>
1004a3c4:	5ccc      	ldrb	r4, [r1, r3]
1004a3c6:	54c4      	strb	r4, [r0, r3]
1004a3c8:	3301      	adds	r3, #1
1004a3ca:	e7f9      	b.n	1004a3c0 <memmove+0x8>
1004a3cc:	188b      	adds	r3, r1, r2
1004a3ce:	4298      	cmp	r0, r3
1004a3d0:	d2f5      	bcs.n	1004a3be <memmove+0x6>
1004a3d2:	3a01      	subs	r2, #1
1004a3d4:	d200      	bcs.n	1004a3d8 <memmove+0x20>
1004a3d6:	bd10      	pop	{r4, pc}
1004a3d8:	5c8b      	ldrb	r3, [r1, r2]
1004a3da:	5483      	strb	r3, [r0, r2]
1004a3dc:	e7f9      	b.n	1004a3d2 <memmove+0x1a>

1004a3de <memchr>:
1004a3de:	b2c9      	uxtb	r1, r1
1004a3e0:	1882      	adds	r2, r0, r2
1004a3e2:	4290      	cmp	r0, r2
1004a3e4:	d101      	bne.n	1004a3ea <memchr+0xc>
1004a3e6:	2000      	movs	r0, #0
1004a3e8:	4770      	bx	lr
1004a3ea:	7803      	ldrb	r3, [r0, #0]
1004a3ec:	428b      	cmp	r3, r1
1004a3ee:	d0fb      	beq.n	1004a3e8 <memchr+0xa>
1004a3f0:	3001      	adds	r0, #1
1004a3f2:	e7f6      	b.n	1004a3e2 <memchr+0x4>

1004a3f4 <_realloc_r>:
1004a3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004a3f6:	0006      	movs	r6, r0
1004a3f8:	000c      	movs	r4, r1
1004a3fa:	0015      	movs	r5, r2
1004a3fc:	2900      	cmp	r1, #0
1004a3fe:	d105      	bne.n	1004a40c <_realloc_r+0x18>
1004a400:	0011      	movs	r1, r2
1004a402:	f7ff fbd7 	bl	10049bb4 <_malloc_r>
1004a406:	0004      	movs	r4, r0
1004a408:	0020      	movs	r0, r4
1004a40a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004a40c:	2a00      	cmp	r2, #0
1004a40e:	d103      	bne.n	1004a418 <_realloc_r+0x24>
1004a410:	f7ff fcac 	bl	10049d6c <_free_r>
1004a414:	2400      	movs	r4, #0
1004a416:	e7f7      	b.n	1004a408 <_realloc_r+0x14>
1004a418:	f000 f81b 	bl	1004a452 <_malloc_usable_size_r>
1004a41c:	0007      	movs	r7, r0
1004a41e:	4285      	cmp	r5, r0
1004a420:	d802      	bhi.n	1004a428 <_realloc_r+0x34>
1004a422:	0843      	lsrs	r3, r0, #1
1004a424:	42ab      	cmp	r3, r5
1004a426:	d3ef      	bcc.n	1004a408 <_realloc_r+0x14>
1004a428:	0029      	movs	r1, r5
1004a42a:	0030      	movs	r0, r6
1004a42c:	f7ff fbc2 	bl	10049bb4 <_malloc_r>
1004a430:	9001      	str	r0, [sp, #4]
1004a432:	2800      	cmp	r0, #0
1004a434:	d0ee      	beq.n	1004a414 <_realloc_r+0x20>
1004a436:	002a      	movs	r2, r5
1004a438:	42bd      	cmp	r5, r7
1004a43a:	d900      	bls.n	1004a43e <_realloc_r+0x4a>
1004a43c:	003a      	movs	r2, r7
1004a43e:	0021      	movs	r1, r4
1004a440:	9801      	ldr	r0, [sp, #4]
1004a442:	f7ff fc89 	bl	10049d58 <memcpy>
1004a446:	0021      	movs	r1, r4
1004a448:	0030      	movs	r0, r6
1004a44a:	f7ff fc8f 	bl	10049d6c <_free_r>
1004a44e:	9c01      	ldr	r4, [sp, #4]
1004a450:	e7da      	b.n	1004a408 <_realloc_r+0x14>

1004a452 <_malloc_usable_size_r>:
1004a452:	1f0b      	subs	r3, r1, #4
1004a454:	681b      	ldr	r3, [r3, #0]
1004a456:	1f18      	subs	r0, r3, #4
1004a458:	2b00      	cmp	r3, #0
1004a45a:	da01      	bge.n	1004a460 <_malloc_usable_size_r+0xe>
1004a45c:	580b      	ldr	r3, [r1, r0]
1004a45e:	18c0      	adds	r0, r0, r3
1004a460:	4770      	bx	lr
	...

Disassembly of section .init:

1004a464 <_init>:
1004a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a466:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004a468 <_fini>:
1004a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a46a:	46c0      	nop			@ (mov r8, r8)
