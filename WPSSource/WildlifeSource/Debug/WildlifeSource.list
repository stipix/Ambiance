
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10041dc4  10041dc4  00002dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10041dc8  10041dc8  00002dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000ac  10041dcc  10041dcc  00002dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  10041e78  10041e78  00002e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  20000158  10041e80  00003158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00004004  2**2
                  ALLOC
  8 .bss.blueRAM  00000000  200000c0  200000c0  00000000  2**0
                  ALLOC
  9 .bss          00000098  200000c0  200000c0  00004004  2**2
                  ALLOC
 10 .noinit       00000000  20000164  10041e8c  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  10041e8c  10041e8c  00003164  2**0
                  CONTENTS
 12 .heap         00000000  20000164  20000164  00003164  2**0
                  CONTENTS
 13 .stack        00000c00  20005400  20005400  00003400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  00003164  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY
 16 .debug_info   00008c61  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000016a9  00000000  00000000  0000bded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000838  00000000  00000000  0000d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000650  00000000  00000000  0000dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00017476  00000000  00000000  0000e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00009889  00000000  00000000  00025796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0009f664  00000000  00000000  0002f01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  000ce683  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00001ca8  00000000  00000000  000ce6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000007c  00000000  00000000  000d0370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <__udivsi3>:
100400c0:	2200      	movs	r2, #0
100400c2:	0843      	lsrs	r3, r0, #1
100400c4:	428b      	cmp	r3, r1
100400c6:	d374      	bcc.n	100401b2 <__udivsi3+0xf2>
100400c8:	0903      	lsrs	r3, r0, #4
100400ca:	428b      	cmp	r3, r1
100400cc:	d35f      	bcc.n	1004018e <__udivsi3+0xce>
100400ce:	0a03      	lsrs	r3, r0, #8
100400d0:	428b      	cmp	r3, r1
100400d2:	d344      	bcc.n	1004015e <__udivsi3+0x9e>
100400d4:	0b03      	lsrs	r3, r0, #12
100400d6:	428b      	cmp	r3, r1
100400d8:	d328      	bcc.n	1004012c <__udivsi3+0x6c>
100400da:	0c03      	lsrs	r3, r0, #16
100400dc:	428b      	cmp	r3, r1
100400de:	d30d      	bcc.n	100400fc <__udivsi3+0x3c>
100400e0:	22ff      	movs	r2, #255	@ 0xff
100400e2:	0209      	lsls	r1, r1, #8
100400e4:	ba12      	rev	r2, r2
100400e6:	0c03      	lsrs	r3, r0, #16
100400e8:	428b      	cmp	r3, r1
100400ea:	d302      	bcc.n	100400f2 <__udivsi3+0x32>
100400ec:	1212      	asrs	r2, r2, #8
100400ee:	0209      	lsls	r1, r1, #8
100400f0:	d065      	beq.n	100401be <__udivsi3+0xfe>
100400f2:	0b03      	lsrs	r3, r0, #12
100400f4:	428b      	cmp	r3, r1
100400f6:	d319      	bcc.n	1004012c <__udivsi3+0x6c>
100400f8:	e000      	b.n	100400fc <__udivsi3+0x3c>
100400fa:	0a09      	lsrs	r1, r1, #8
100400fc:	0bc3      	lsrs	r3, r0, #15
100400fe:	428b      	cmp	r3, r1
10040100:	d301      	bcc.n	10040106 <__udivsi3+0x46>
10040102:	03cb      	lsls	r3, r1, #15
10040104:	1ac0      	subs	r0, r0, r3
10040106:	4152      	adcs	r2, r2
10040108:	0b83      	lsrs	r3, r0, #14
1004010a:	428b      	cmp	r3, r1
1004010c:	d301      	bcc.n	10040112 <__udivsi3+0x52>
1004010e:	038b      	lsls	r3, r1, #14
10040110:	1ac0      	subs	r0, r0, r3
10040112:	4152      	adcs	r2, r2
10040114:	0b43      	lsrs	r3, r0, #13
10040116:	428b      	cmp	r3, r1
10040118:	d301      	bcc.n	1004011e <__udivsi3+0x5e>
1004011a:	034b      	lsls	r3, r1, #13
1004011c:	1ac0      	subs	r0, r0, r3
1004011e:	4152      	adcs	r2, r2
10040120:	0b03      	lsrs	r3, r0, #12
10040122:	428b      	cmp	r3, r1
10040124:	d301      	bcc.n	1004012a <__udivsi3+0x6a>
10040126:	030b      	lsls	r3, r1, #12
10040128:	1ac0      	subs	r0, r0, r3
1004012a:	4152      	adcs	r2, r2
1004012c:	0ac3      	lsrs	r3, r0, #11
1004012e:	428b      	cmp	r3, r1
10040130:	d301      	bcc.n	10040136 <__udivsi3+0x76>
10040132:	02cb      	lsls	r3, r1, #11
10040134:	1ac0      	subs	r0, r0, r3
10040136:	4152      	adcs	r2, r2
10040138:	0a83      	lsrs	r3, r0, #10
1004013a:	428b      	cmp	r3, r1
1004013c:	d301      	bcc.n	10040142 <__udivsi3+0x82>
1004013e:	028b      	lsls	r3, r1, #10
10040140:	1ac0      	subs	r0, r0, r3
10040142:	4152      	adcs	r2, r2
10040144:	0a43      	lsrs	r3, r0, #9
10040146:	428b      	cmp	r3, r1
10040148:	d301      	bcc.n	1004014e <__udivsi3+0x8e>
1004014a:	024b      	lsls	r3, r1, #9
1004014c:	1ac0      	subs	r0, r0, r3
1004014e:	4152      	adcs	r2, r2
10040150:	0a03      	lsrs	r3, r0, #8
10040152:	428b      	cmp	r3, r1
10040154:	d301      	bcc.n	1004015a <__udivsi3+0x9a>
10040156:	020b      	lsls	r3, r1, #8
10040158:	1ac0      	subs	r0, r0, r3
1004015a:	4152      	adcs	r2, r2
1004015c:	d2cd      	bcs.n	100400fa <__udivsi3+0x3a>
1004015e:	09c3      	lsrs	r3, r0, #7
10040160:	428b      	cmp	r3, r1
10040162:	d301      	bcc.n	10040168 <__udivsi3+0xa8>
10040164:	01cb      	lsls	r3, r1, #7
10040166:	1ac0      	subs	r0, r0, r3
10040168:	4152      	adcs	r2, r2
1004016a:	0983      	lsrs	r3, r0, #6
1004016c:	428b      	cmp	r3, r1
1004016e:	d301      	bcc.n	10040174 <__udivsi3+0xb4>
10040170:	018b      	lsls	r3, r1, #6
10040172:	1ac0      	subs	r0, r0, r3
10040174:	4152      	adcs	r2, r2
10040176:	0943      	lsrs	r3, r0, #5
10040178:	428b      	cmp	r3, r1
1004017a:	d301      	bcc.n	10040180 <__udivsi3+0xc0>
1004017c:	014b      	lsls	r3, r1, #5
1004017e:	1ac0      	subs	r0, r0, r3
10040180:	4152      	adcs	r2, r2
10040182:	0903      	lsrs	r3, r0, #4
10040184:	428b      	cmp	r3, r1
10040186:	d301      	bcc.n	1004018c <__udivsi3+0xcc>
10040188:	010b      	lsls	r3, r1, #4
1004018a:	1ac0      	subs	r0, r0, r3
1004018c:	4152      	adcs	r2, r2
1004018e:	08c3      	lsrs	r3, r0, #3
10040190:	428b      	cmp	r3, r1
10040192:	d301      	bcc.n	10040198 <__udivsi3+0xd8>
10040194:	00cb      	lsls	r3, r1, #3
10040196:	1ac0      	subs	r0, r0, r3
10040198:	4152      	adcs	r2, r2
1004019a:	0883      	lsrs	r3, r0, #2
1004019c:	428b      	cmp	r3, r1
1004019e:	d301      	bcc.n	100401a4 <__udivsi3+0xe4>
100401a0:	008b      	lsls	r3, r1, #2
100401a2:	1ac0      	subs	r0, r0, r3
100401a4:	4152      	adcs	r2, r2
100401a6:	0843      	lsrs	r3, r0, #1
100401a8:	428b      	cmp	r3, r1
100401aa:	d301      	bcc.n	100401b0 <__udivsi3+0xf0>
100401ac:	004b      	lsls	r3, r1, #1
100401ae:	1ac0      	subs	r0, r0, r3
100401b0:	4152      	adcs	r2, r2
100401b2:	1a41      	subs	r1, r0, r1
100401b4:	d200      	bcs.n	100401b8 <__udivsi3+0xf8>
100401b6:	4601      	mov	r1, r0
100401b8:	4152      	adcs	r2, r2
100401ba:	4610      	mov	r0, r2
100401bc:	4770      	bx	lr
100401be:	e7ff      	b.n	100401c0 <__udivsi3+0x100>
100401c0:	b501      	push	{r0, lr}
100401c2:	2000      	movs	r0, #0
100401c4:	f000 f8f0 	bl	100403a8 <__aeabi_idiv0>
100401c8:	bd02      	pop	{r1, pc}
100401ca:	46c0      	nop			@ (mov r8, r8)

100401cc <__aeabi_uidivmod>:
100401cc:	2900      	cmp	r1, #0
100401ce:	d0f7      	beq.n	100401c0 <__udivsi3+0x100>
100401d0:	e776      	b.n	100400c0 <__udivsi3>
100401d2:	4770      	bx	lr

100401d4 <__divsi3>:
100401d4:	4603      	mov	r3, r0
100401d6:	430b      	orrs	r3, r1
100401d8:	d47f      	bmi.n	100402da <__divsi3+0x106>
100401da:	2200      	movs	r2, #0
100401dc:	0843      	lsrs	r3, r0, #1
100401de:	428b      	cmp	r3, r1
100401e0:	d374      	bcc.n	100402cc <__divsi3+0xf8>
100401e2:	0903      	lsrs	r3, r0, #4
100401e4:	428b      	cmp	r3, r1
100401e6:	d35f      	bcc.n	100402a8 <__divsi3+0xd4>
100401e8:	0a03      	lsrs	r3, r0, #8
100401ea:	428b      	cmp	r3, r1
100401ec:	d344      	bcc.n	10040278 <__divsi3+0xa4>
100401ee:	0b03      	lsrs	r3, r0, #12
100401f0:	428b      	cmp	r3, r1
100401f2:	d328      	bcc.n	10040246 <__divsi3+0x72>
100401f4:	0c03      	lsrs	r3, r0, #16
100401f6:	428b      	cmp	r3, r1
100401f8:	d30d      	bcc.n	10040216 <__divsi3+0x42>
100401fa:	22ff      	movs	r2, #255	@ 0xff
100401fc:	0209      	lsls	r1, r1, #8
100401fe:	ba12      	rev	r2, r2
10040200:	0c03      	lsrs	r3, r0, #16
10040202:	428b      	cmp	r3, r1
10040204:	d302      	bcc.n	1004020c <__divsi3+0x38>
10040206:	1212      	asrs	r2, r2, #8
10040208:	0209      	lsls	r1, r1, #8
1004020a:	d065      	beq.n	100402d8 <__divsi3+0x104>
1004020c:	0b03      	lsrs	r3, r0, #12
1004020e:	428b      	cmp	r3, r1
10040210:	d319      	bcc.n	10040246 <__divsi3+0x72>
10040212:	e000      	b.n	10040216 <__divsi3+0x42>
10040214:	0a09      	lsrs	r1, r1, #8
10040216:	0bc3      	lsrs	r3, r0, #15
10040218:	428b      	cmp	r3, r1
1004021a:	d301      	bcc.n	10040220 <__divsi3+0x4c>
1004021c:	03cb      	lsls	r3, r1, #15
1004021e:	1ac0      	subs	r0, r0, r3
10040220:	4152      	adcs	r2, r2
10040222:	0b83      	lsrs	r3, r0, #14
10040224:	428b      	cmp	r3, r1
10040226:	d301      	bcc.n	1004022c <__divsi3+0x58>
10040228:	038b      	lsls	r3, r1, #14
1004022a:	1ac0      	subs	r0, r0, r3
1004022c:	4152      	adcs	r2, r2
1004022e:	0b43      	lsrs	r3, r0, #13
10040230:	428b      	cmp	r3, r1
10040232:	d301      	bcc.n	10040238 <__divsi3+0x64>
10040234:	034b      	lsls	r3, r1, #13
10040236:	1ac0      	subs	r0, r0, r3
10040238:	4152      	adcs	r2, r2
1004023a:	0b03      	lsrs	r3, r0, #12
1004023c:	428b      	cmp	r3, r1
1004023e:	d301      	bcc.n	10040244 <__divsi3+0x70>
10040240:	030b      	lsls	r3, r1, #12
10040242:	1ac0      	subs	r0, r0, r3
10040244:	4152      	adcs	r2, r2
10040246:	0ac3      	lsrs	r3, r0, #11
10040248:	428b      	cmp	r3, r1
1004024a:	d301      	bcc.n	10040250 <__divsi3+0x7c>
1004024c:	02cb      	lsls	r3, r1, #11
1004024e:	1ac0      	subs	r0, r0, r3
10040250:	4152      	adcs	r2, r2
10040252:	0a83      	lsrs	r3, r0, #10
10040254:	428b      	cmp	r3, r1
10040256:	d301      	bcc.n	1004025c <__divsi3+0x88>
10040258:	028b      	lsls	r3, r1, #10
1004025a:	1ac0      	subs	r0, r0, r3
1004025c:	4152      	adcs	r2, r2
1004025e:	0a43      	lsrs	r3, r0, #9
10040260:	428b      	cmp	r3, r1
10040262:	d301      	bcc.n	10040268 <__divsi3+0x94>
10040264:	024b      	lsls	r3, r1, #9
10040266:	1ac0      	subs	r0, r0, r3
10040268:	4152      	adcs	r2, r2
1004026a:	0a03      	lsrs	r3, r0, #8
1004026c:	428b      	cmp	r3, r1
1004026e:	d301      	bcc.n	10040274 <__divsi3+0xa0>
10040270:	020b      	lsls	r3, r1, #8
10040272:	1ac0      	subs	r0, r0, r3
10040274:	4152      	adcs	r2, r2
10040276:	d2cd      	bcs.n	10040214 <__divsi3+0x40>
10040278:	09c3      	lsrs	r3, r0, #7
1004027a:	428b      	cmp	r3, r1
1004027c:	d301      	bcc.n	10040282 <__divsi3+0xae>
1004027e:	01cb      	lsls	r3, r1, #7
10040280:	1ac0      	subs	r0, r0, r3
10040282:	4152      	adcs	r2, r2
10040284:	0983      	lsrs	r3, r0, #6
10040286:	428b      	cmp	r3, r1
10040288:	d301      	bcc.n	1004028e <__divsi3+0xba>
1004028a:	018b      	lsls	r3, r1, #6
1004028c:	1ac0      	subs	r0, r0, r3
1004028e:	4152      	adcs	r2, r2
10040290:	0943      	lsrs	r3, r0, #5
10040292:	428b      	cmp	r3, r1
10040294:	d301      	bcc.n	1004029a <__divsi3+0xc6>
10040296:	014b      	lsls	r3, r1, #5
10040298:	1ac0      	subs	r0, r0, r3
1004029a:	4152      	adcs	r2, r2
1004029c:	0903      	lsrs	r3, r0, #4
1004029e:	428b      	cmp	r3, r1
100402a0:	d301      	bcc.n	100402a6 <__divsi3+0xd2>
100402a2:	010b      	lsls	r3, r1, #4
100402a4:	1ac0      	subs	r0, r0, r3
100402a6:	4152      	adcs	r2, r2
100402a8:	08c3      	lsrs	r3, r0, #3
100402aa:	428b      	cmp	r3, r1
100402ac:	d301      	bcc.n	100402b2 <__divsi3+0xde>
100402ae:	00cb      	lsls	r3, r1, #3
100402b0:	1ac0      	subs	r0, r0, r3
100402b2:	4152      	adcs	r2, r2
100402b4:	0883      	lsrs	r3, r0, #2
100402b6:	428b      	cmp	r3, r1
100402b8:	d301      	bcc.n	100402be <__divsi3+0xea>
100402ba:	008b      	lsls	r3, r1, #2
100402bc:	1ac0      	subs	r0, r0, r3
100402be:	4152      	adcs	r2, r2
100402c0:	0843      	lsrs	r3, r0, #1
100402c2:	428b      	cmp	r3, r1
100402c4:	d301      	bcc.n	100402ca <__divsi3+0xf6>
100402c6:	004b      	lsls	r3, r1, #1
100402c8:	1ac0      	subs	r0, r0, r3
100402ca:	4152      	adcs	r2, r2
100402cc:	1a41      	subs	r1, r0, r1
100402ce:	d200      	bcs.n	100402d2 <__divsi3+0xfe>
100402d0:	4601      	mov	r1, r0
100402d2:	4152      	adcs	r2, r2
100402d4:	4610      	mov	r0, r2
100402d6:	4770      	bx	lr
100402d8:	e05d      	b.n	10040396 <__divsi3+0x1c2>
100402da:	0fca      	lsrs	r2, r1, #31
100402dc:	d000      	beq.n	100402e0 <__divsi3+0x10c>
100402de:	4249      	negs	r1, r1
100402e0:	1003      	asrs	r3, r0, #32
100402e2:	d300      	bcc.n	100402e6 <__divsi3+0x112>
100402e4:	4240      	negs	r0, r0
100402e6:	4053      	eors	r3, r2
100402e8:	2200      	movs	r2, #0
100402ea:	469c      	mov	ip, r3
100402ec:	0903      	lsrs	r3, r0, #4
100402ee:	428b      	cmp	r3, r1
100402f0:	d32d      	bcc.n	1004034e <__divsi3+0x17a>
100402f2:	0a03      	lsrs	r3, r0, #8
100402f4:	428b      	cmp	r3, r1
100402f6:	d312      	bcc.n	1004031e <__divsi3+0x14a>
100402f8:	22fc      	movs	r2, #252	@ 0xfc
100402fa:	0189      	lsls	r1, r1, #6
100402fc:	ba12      	rev	r2, r2
100402fe:	0a03      	lsrs	r3, r0, #8
10040300:	428b      	cmp	r3, r1
10040302:	d30c      	bcc.n	1004031e <__divsi3+0x14a>
10040304:	0189      	lsls	r1, r1, #6
10040306:	1192      	asrs	r2, r2, #6
10040308:	428b      	cmp	r3, r1
1004030a:	d308      	bcc.n	1004031e <__divsi3+0x14a>
1004030c:	0189      	lsls	r1, r1, #6
1004030e:	1192      	asrs	r2, r2, #6
10040310:	428b      	cmp	r3, r1
10040312:	d304      	bcc.n	1004031e <__divsi3+0x14a>
10040314:	0189      	lsls	r1, r1, #6
10040316:	d03a      	beq.n	1004038e <__divsi3+0x1ba>
10040318:	1192      	asrs	r2, r2, #6
1004031a:	e000      	b.n	1004031e <__divsi3+0x14a>
1004031c:	0989      	lsrs	r1, r1, #6
1004031e:	09c3      	lsrs	r3, r0, #7
10040320:	428b      	cmp	r3, r1
10040322:	d301      	bcc.n	10040328 <__divsi3+0x154>
10040324:	01cb      	lsls	r3, r1, #7
10040326:	1ac0      	subs	r0, r0, r3
10040328:	4152      	adcs	r2, r2
1004032a:	0983      	lsrs	r3, r0, #6
1004032c:	428b      	cmp	r3, r1
1004032e:	d301      	bcc.n	10040334 <__divsi3+0x160>
10040330:	018b      	lsls	r3, r1, #6
10040332:	1ac0      	subs	r0, r0, r3
10040334:	4152      	adcs	r2, r2
10040336:	0943      	lsrs	r3, r0, #5
10040338:	428b      	cmp	r3, r1
1004033a:	d301      	bcc.n	10040340 <__divsi3+0x16c>
1004033c:	014b      	lsls	r3, r1, #5
1004033e:	1ac0      	subs	r0, r0, r3
10040340:	4152      	adcs	r2, r2
10040342:	0903      	lsrs	r3, r0, #4
10040344:	428b      	cmp	r3, r1
10040346:	d301      	bcc.n	1004034c <__divsi3+0x178>
10040348:	010b      	lsls	r3, r1, #4
1004034a:	1ac0      	subs	r0, r0, r3
1004034c:	4152      	adcs	r2, r2
1004034e:	08c3      	lsrs	r3, r0, #3
10040350:	428b      	cmp	r3, r1
10040352:	d301      	bcc.n	10040358 <__divsi3+0x184>
10040354:	00cb      	lsls	r3, r1, #3
10040356:	1ac0      	subs	r0, r0, r3
10040358:	4152      	adcs	r2, r2
1004035a:	0883      	lsrs	r3, r0, #2
1004035c:	428b      	cmp	r3, r1
1004035e:	d301      	bcc.n	10040364 <__divsi3+0x190>
10040360:	008b      	lsls	r3, r1, #2
10040362:	1ac0      	subs	r0, r0, r3
10040364:	4152      	adcs	r2, r2
10040366:	d2d9      	bcs.n	1004031c <__divsi3+0x148>
10040368:	0843      	lsrs	r3, r0, #1
1004036a:	428b      	cmp	r3, r1
1004036c:	d301      	bcc.n	10040372 <__divsi3+0x19e>
1004036e:	004b      	lsls	r3, r1, #1
10040370:	1ac0      	subs	r0, r0, r3
10040372:	4152      	adcs	r2, r2
10040374:	1a41      	subs	r1, r0, r1
10040376:	d200      	bcs.n	1004037a <__divsi3+0x1a6>
10040378:	4601      	mov	r1, r0
1004037a:	4663      	mov	r3, ip
1004037c:	4152      	adcs	r2, r2
1004037e:	105b      	asrs	r3, r3, #1
10040380:	4610      	mov	r0, r2
10040382:	d301      	bcc.n	10040388 <__divsi3+0x1b4>
10040384:	4240      	negs	r0, r0
10040386:	2b00      	cmp	r3, #0
10040388:	d500      	bpl.n	1004038c <__divsi3+0x1b8>
1004038a:	4249      	negs	r1, r1
1004038c:	4770      	bx	lr
1004038e:	4663      	mov	r3, ip
10040390:	105b      	asrs	r3, r3, #1
10040392:	d300      	bcc.n	10040396 <__divsi3+0x1c2>
10040394:	4240      	negs	r0, r0
10040396:	b501      	push	{r0, lr}
10040398:	2000      	movs	r0, #0
1004039a:	f000 f805 	bl	100403a8 <__aeabi_idiv0>
1004039e:	bd02      	pop	{r1, pc}

100403a0 <__aeabi_idivmod>:
100403a0:	2900      	cmp	r1, #0
100403a2:	d0f8      	beq.n	10040396 <__divsi3+0x1c2>
100403a4:	e716      	b.n	100401d4 <__divsi3>
100403a6:	4770      	bx	lr

100403a8 <__aeabi_idiv0>:
100403a8:	4770      	bx	lr
100403aa:	46c0      	nop			@ (mov r8, r8)

100403ac <__aeabi_uldivmod>:
100403ac:	2b00      	cmp	r3, #0
100403ae:	d111      	bne.n	100403d4 <__aeabi_uldivmod+0x28>
100403b0:	2a00      	cmp	r2, #0
100403b2:	d10f      	bne.n	100403d4 <__aeabi_uldivmod+0x28>
100403b4:	2900      	cmp	r1, #0
100403b6:	d100      	bne.n	100403ba <__aeabi_uldivmod+0xe>
100403b8:	2800      	cmp	r0, #0
100403ba:	d002      	beq.n	100403c2 <__aeabi_uldivmod+0x16>
100403bc:	2100      	movs	r1, #0
100403be:	43c9      	mvns	r1, r1
100403c0:	0008      	movs	r0, r1
100403c2:	b407      	push	{r0, r1, r2}
100403c4:	4802      	ldr	r0, [pc, #8]	@ (100403d0 <__aeabi_uldivmod+0x24>)
100403c6:	a102      	add	r1, pc, #8	@ (adr r1, 100403d0 <__aeabi_uldivmod+0x24>)
100403c8:	1840      	adds	r0, r0, r1
100403ca:	9002      	str	r0, [sp, #8]
100403cc:	bd03      	pop	{r0, r1, pc}
100403ce:	46c0      	nop			@ (mov r8, r8)
100403d0:	ffffffd9 	.word	0xffffffd9
100403d4:	b403      	push	{r0, r1}
100403d6:	4668      	mov	r0, sp
100403d8:	b501      	push	{r0, lr}
100403da:	9802      	ldr	r0, [sp, #8]
100403dc:	f000 f806 	bl	100403ec <__udivmoddi4>
100403e0:	9b01      	ldr	r3, [sp, #4]
100403e2:	469e      	mov	lr, r3
100403e4:	b002      	add	sp, #8
100403e6:	bc0c      	pop	{r2, r3}
100403e8:	4770      	bx	lr
100403ea:	46c0      	nop			@ (mov r8, r8)

100403ec <__udivmoddi4>:
100403ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100403ee:	4657      	mov	r7, sl
100403f0:	464e      	mov	r6, r9
100403f2:	4645      	mov	r5, r8
100403f4:	46de      	mov	lr, fp
100403f6:	b5e0      	push	{r5, r6, r7, lr}
100403f8:	0004      	movs	r4, r0
100403fa:	000d      	movs	r5, r1
100403fc:	4692      	mov	sl, r2
100403fe:	4699      	mov	r9, r3
10040400:	b083      	sub	sp, #12
10040402:	428b      	cmp	r3, r1
10040404:	d830      	bhi.n	10040468 <__udivmoddi4+0x7c>
10040406:	d02d      	beq.n	10040464 <__udivmoddi4+0x78>
10040408:	4649      	mov	r1, r9
1004040a:	4650      	mov	r0, sl
1004040c:	f000 f8ba 	bl	10040584 <__clzdi2>
10040410:	0029      	movs	r1, r5
10040412:	0006      	movs	r6, r0
10040414:	0020      	movs	r0, r4
10040416:	f000 f8b5 	bl	10040584 <__clzdi2>
1004041a:	1a33      	subs	r3, r6, r0
1004041c:	4698      	mov	r8, r3
1004041e:	3b20      	subs	r3, #32
10040420:	d434      	bmi.n	1004048c <__udivmoddi4+0xa0>
10040422:	469b      	mov	fp, r3
10040424:	4653      	mov	r3, sl
10040426:	465a      	mov	r2, fp
10040428:	4093      	lsls	r3, r2
1004042a:	4642      	mov	r2, r8
1004042c:	001f      	movs	r7, r3
1004042e:	4653      	mov	r3, sl
10040430:	4093      	lsls	r3, r2
10040432:	001e      	movs	r6, r3
10040434:	42af      	cmp	r7, r5
10040436:	d83b      	bhi.n	100404b0 <__udivmoddi4+0xc4>
10040438:	42af      	cmp	r7, r5
1004043a:	d100      	bne.n	1004043e <__udivmoddi4+0x52>
1004043c:	e079      	b.n	10040532 <__udivmoddi4+0x146>
1004043e:	465b      	mov	r3, fp
10040440:	1ba4      	subs	r4, r4, r6
10040442:	41bd      	sbcs	r5, r7
10040444:	2b00      	cmp	r3, #0
10040446:	da00      	bge.n	1004044a <__udivmoddi4+0x5e>
10040448:	e076      	b.n	10040538 <__udivmoddi4+0x14c>
1004044a:	2200      	movs	r2, #0
1004044c:	2300      	movs	r3, #0
1004044e:	9200      	str	r2, [sp, #0]
10040450:	9301      	str	r3, [sp, #4]
10040452:	2301      	movs	r3, #1
10040454:	465a      	mov	r2, fp
10040456:	4093      	lsls	r3, r2
10040458:	9301      	str	r3, [sp, #4]
1004045a:	2301      	movs	r3, #1
1004045c:	4642      	mov	r2, r8
1004045e:	4093      	lsls	r3, r2
10040460:	9300      	str	r3, [sp, #0]
10040462:	e029      	b.n	100404b8 <__udivmoddi4+0xcc>
10040464:	4282      	cmp	r2, r0
10040466:	d9cf      	bls.n	10040408 <__udivmoddi4+0x1c>
10040468:	2200      	movs	r2, #0
1004046a:	2300      	movs	r3, #0
1004046c:	9200      	str	r2, [sp, #0]
1004046e:	9301      	str	r3, [sp, #4]
10040470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040472:	2b00      	cmp	r3, #0
10040474:	d001      	beq.n	1004047a <__udivmoddi4+0x8e>
10040476:	601c      	str	r4, [r3, #0]
10040478:	605d      	str	r5, [r3, #4]
1004047a:	9800      	ldr	r0, [sp, #0]
1004047c:	9901      	ldr	r1, [sp, #4]
1004047e:	b003      	add	sp, #12
10040480:	bcf0      	pop	{r4, r5, r6, r7}
10040482:	46bb      	mov	fp, r7
10040484:	46b2      	mov	sl, r6
10040486:	46a9      	mov	r9, r5
10040488:	46a0      	mov	r8, r4
1004048a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004048c:	4642      	mov	r2, r8
1004048e:	469b      	mov	fp, r3
10040490:	2320      	movs	r3, #32
10040492:	1a9b      	subs	r3, r3, r2
10040494:	4652      	mov	r2, sl
10040496:	40da      	lsrs	r2, r3
10040498:	4641      	mov	r1, r8
1004049a:	0013      	movs	r3, r2
1004049c:	464a      	mov	r2, r9
1004049e:	408a      	lsls	r2, r1
100404a0:	0017      	movs	r7, r2
100404a2:	4642      	mov	r2, r8
100404a4:	431f      	orrs	r7, r3
100404a6:	4653      	mov	r3, sl
100404a8:	4093      	lsls	r3, r2
100404aa:	001e      	movs	r6, r3
100404ac:	42af      	cmp	r7, r5
100404ae:	d9c3      	bls.n	10040438 <__udivmoddi4+0x4c>
100404b0:	2200      	movs	r2, #0
100404b2:	2300      	movs	r3, #0
100404b4:	9200      	str	r2, [sp, #0]
100404b6:	9301      	str	r3, [sp, #4]
100404b8:	4643      	mov	r3, r8
100404ba:	2b00      	cmp	r3, #0
100404bc:	d0d8      	beq.n	10040470 <__udivmoddi4+0x84>
100404be:	07fb      	lsls	r3, r7, #31
100404c0:	0872      	lsrs	r2, r6, #1
100404c2:	431a      	orrs	r2, r3
100404c4:	4646      	mov	r6, r8
100404c6:	087b      	lsrs	r3, r7, #1
100404c8:	e00e      	b.n	100404e8 <__udivmoddi4+0xfc>
100404ca:	42ab      	cmp	r3, r5
100404cc:	d101      	bne.n	100404d2 <__udivmoddi4+0xe6>
100404ce:	42a2      	cmp	r2, r4
100404d0:	d80c      	bhi.n	100404ec <__udivmoddi4+0x100>
100404d2:	1aa4      	subs	r4, r4, r2
100404d4:	419d      	sbcs	r5, r3
100404d6:	2001      	movs	r0, #1
100404d8:	1924      	adds	r4, r4, r4
100404da:	416d      	adcs	r5, r5
100404dc:	2100      	movs	r1, #0
100404de:	3e01      	subs	r6, #1
100404e0:	1824      	adds	r4, r4, r0
100404e2:	414d      	adcs	r5, r1
100404e4:	2e00      	cmp	r6, #0
100404e6:	d006      	beq.n	100404f6 <__udivmoddi4+0x10a>
100404e8:	42ab      	cmp	r3, r5
100404ea:	d9ee      	bls.n	100404ca <__udivmoddi4+0xde>
100404ec:	3e01      	subs	r6, #1
100404ee:	1924      	adds	r4, r4, r4
100404f0:	416d      	adcs	r5, r5
100404f2:	2e00      	cmp	r6, #0
100404f4:	d1f8      	bne.n	100404e8 <__udivmoddi4+0xfc>
100404f6:	9800      	ldr	r0, [sp, #0]
100404f8:	9901      	ldr	r1, [sp, #4]
100404fa:	465b      	mov	r3, fp
100404fc:	1900      	adds	r0, r0, r4
100404fe:	4169      	adcs	r1, r5
10040500:	2b00      	cmp	r3, #0
10040502:	db24      	blt.n	1004054e <__udivmoddi4+0x162>
10040504:	002b      	movs	r3, r5
10040506:	465a      	mov	r2, fp
10040508:	4644      	mov	r4, r8
1004050a:	40d3      	lsrs	r3, r2
1004050c:	002a      	movs	r2, r5
1004050e:	40e2      	lsrs	r2, r4
10040510:	001c      	movs	r4, r3
10040512:	465b      	mov	r3, fp
10040514:	0015      	movs	r5, r2
10040516:	2b00      	cmp	r3, #0
10040518:	db2a      	blt.n	10040570 <__udivmoddi4+0x184>
1004051a:	0026      	movs	r6, r4
1004051c:	409e      	lsls	r6, r3
1004051e:	0033      	movs	r3, r6
10040520:	0026      	movs	r6, r4
10040522:	4647      	mov	r7, r8
10040524:	40be      	lsls	r6, r7
10040526:	0032      	movs	r2, r6
10040528:	1a80      	subs	r0, r0, r2
1004052a:	4199      	sbcs	r1, r3
1004052c:	9000      	str	r0, [sp, #0]
1004052e:	9101      	str	r1, [sp, #4]
10040530:	e79e      	b.n	10040470 <__udivmoddi4+0x84>
10040532:	42a3      	cmp	r3, r4
10040534:	d8bc      	bhi.n	100404b0 <__udivmoddi4+0xc4>
10040536:	e782      	b.n	1004043e <__udivmoddi4+0x52>
10040538:	4642      	mov	r2, r8
1004053a:	2320      	movs	r3, #32
1004053c:	2100      	movs	r1, #0
1004053e:	1a9b      	subs	r3, r3, r2
10040540:	2200      	movs	r2, #0
10040542:	9100      	str	r1, [sp, #0]
10040544:	9201      	str	r2, [sp, #4]
10040546:	2201      	movs	r2, #1
10040548:	40da      	lsrs	r2, r3
1004054a:	9201      	str	r2, [sp, #4]
1004054c:	e785      	b.n	1004045a <__udivmoddi4+0x6e>
1004054e:	4642      	mov	r2, r8
10040550:	2320      	movs	r3, #32
10040552:	1a9b      	subs	r3, r3, r2
10040554:	002a      	movs	r2, r5
10040556:	4646      	mov	r6, r8
10040558:	409a      	lsls	r2, r3
1004055a:	0023      	movs	r3, r4
1004055c:	40f3      	lsrs	r3, r6
1004055e:	4644      	mov	r4, r8
10040560:	4313      	orrs	r3, r2
10040562:	002a      	movs	r2, r5
10040564:	40e2      	lsrs	r2, r4
10040566:	001c      	movs	r4, r3
10040568:	465b      	mov	r3, fp
1004056a:	0015      	movs	r5, r2
1004056c:	2b00      	cmp	r3, #0
1004056e:	dad4      	bge.n	1004051a <__udivmoddi4+0x12e>
10040570:	4642      	mov	r2, r8
10040572:	002f      	movs	r7, r5
10040574:	2320      	movs	r3, #32
10040576:	0026      	movs	r6, r4
10040578:	4097      	lsls	r7, r2
1004057a:	1a9b      	subs	r3, r3, r2
1004057c:	40de      	lsrs	r6, r3
1004057e:	003b      	movs	r3, r7
10040580:	4333      	orrs	r3, r6
10040582:	e7cd      	b.n	10040520 <__udivmoddi4+0x134>

10040584 <__clzdi2>:
10040584:	b510      	push	{r4, lr}
10040586:	2900      	cmp	r1, #0
10040588:	d103      	bne.n	10040592 <__clzdi2+0xe>
1004058a:	f000 f807 	bl	1004059c <__clzsi2>
1004058e:	3020      	adds	r0, #32
10040590:	e002      	b.n	10040598 <__clzdi2+0x14>
10040592:	0008      	movs	r0, r1
10040594:	f000 f802 	bl	1004059c <__clzsi2>
10040598:	bd10      	pop	{r4, pc}
1004059a:	46c0      	nop			@ (mov r8, r8)

1004059c <__clzsi2>:
1004059c:	211c      	movs	r1, #28
1004059e:	2301      	movs	r3, #1
100405a0:	041b      	lsls	r3, r3, #16
100405a2:	4298      	cmp	r0, r3
100405a4:	d301      	bcc.n	100405aa <__clzsi2+0xe>
100405a6:	0c00      	lsrs	r0, r0, #16
100405a8:	3910      	subs	r1, #16
100405aa:	0a1b      	lsrs	r3, r3, #8
100405ac:	4298      	cmp	r0, r3
100405ae:	d301      	bcc.n	100405b4 <__clzsi2+0x18>
100405b0:	0a00      	lsrs	r0, r0, #8
100405b2:	3908      	subs	r1, #8
100405b4:	091b      	lsrs	r3, r3, #4
100405b6:	4298      	cmp	r0, r3
100405b8:	d301      	bcc.n	100405be <__clzsi2+0x22>
100405ba:	0900      	lsrs	r0, r0, #4
100405bc:	3904      	subs	r1, #4
100405be:	a202      	add	r2, pc, #8	@ (adr r2, 100405c8 <__clzsi2+0x2c>)
100405c0:	5c10      	ldrb	r0, [r2, r0]
100405c2:	1840      	adds	r0, r0, r1
100405c4:	4770      	bx	lr
100405c6:	46c0      	nop			@ (mov r8, r8)
100405c8:	02020304 	.word	0x02020304
100405cc:	01010101 	.word	0x01010101
	...

100405d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
100405d8:	b580      	push	{r7, lr}
100405da:	b082      	sub	sp, #8
100405dc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100405de:	003b      	movs	r3, r7
100405e0:	0018      	movs	r0, r3
100405e2:	2308      	movs	r3, #8
100405e4:	001a      	movs	r2, r3
100405e6:	2100      	movs	r1, #0
100405e8:	f001 fbe4 	bl	10041db4 <memset>

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
100405ec:	003b      	movs	r3, r7
100405ee:	2202      	movs	r2, #2
100405f0:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100405f2:	003b      	movs	r3, r7
100405f4:	2200      	movs	r2, #0
100405f6:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
100405f8:	003b      	movs	r3, r7
100405fa:	2110      	movs	r1, #16
100405fc:	0018      	movs	r0, r3
100405fe:	f000 fc91 	bl	10040f24 <HAL_RCC_ClockConfig>
10040602:	1e03      	subs	r3, r0, #0
10040604:	d001      	beq.n	1004060a <SystemClock_Config+0x32>
  {
	  return INIT_ERROR;
10040606:	2300      	movs	r3, #0
10040608:	e000      	b.n	1004060c <SystemClock_Config+0x34>
  }
  return INIT_OK;
1004060a:	2301      	movs	r3, #1
}
1004060c:	0018      	movs	r0, r3
1004060e:	46bd      	mov	sp, r7
10040610:	b002      	add	sp, #8
10040612:	bd80      	pop	{r7, pc}

10040614 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
10040614:	b580      	push	{r7, lr}
10040616:	b086      	sub	sp, #24
10040618:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
1004061a:	003b      	movs	r3, r7
1004061c:	0018      	movs	r0, r3
1004061e:	2318      	movs	r3, #24
10040620:	001a      	movs	r2, r3
10040622:	2100      	movs	r1, #0
10040624:	f001 fbc6 	bl	10041db4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10040628:	003b      	movs	r3, r7
1004062a:	2202      	movs	r2, #2
1004062c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
1004062e:	003b      	movs	r3, r7
10040630:	2280      	movs	r2, #128	@ 0x80
10040632:	0152      	lsls	r2, r2, #5
10040634:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040636:	003b      	movs	r3, r7
10040638:	0018      	movs	r0, r3
1004063a:	f000 fe09 	bl	10041250 <HAL_RCCEx_PeriphCLKConfig>
1004063e:	1e03      	subs	r3, r0, #0
10040640:	d001      	beq.n	10040646 <PeriphCommonClock_Config+0x32>
  {
	  return INIT_ERROR;
10040642:	2300      	movs	r3, #0
10040644:	e000      	b.n	10040648 <PeriphCommonClock_Config+0x34>
  }
  return INIT_OK;
10040646:	2301      	movs	r3, #1
}
10040648:	0018      	movs	r0, r3
1004064a:	46bd      	mov	sp, r7
1004064c:	b006      	add	sp, #24
1004064e:	bd80      	pop	{r7, pc}

10040650 <BOARD_Init>:


//Initializes the board
int BOARD_Init(void){
10040650:	b580      	push	{r7, lr}
10040652:	b082      	sub	sp, #8
10040654:	af00      	add	r7, sp, #0
	int errorFlag = INIT_OK;
10040656:	2301      	movs	r3, #1
10040658:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
1004065a:	f7ff ffdb 	bl	10040614 <PeriphCommonClock_Config>
1004065e:	1e03      	subs	r3, r0, #0
10040660:	d101      	bne.n	10040666 <BOARD_Init+0x16>
		errorFlag = INIT_ERROR;
10040662:	2300      	movs	r3, #0
10040664:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
10040666:	f7ff ffb7 	bl	100405d8 <SystemClock_Config>
1004066a:	1e03      	subs	r3, r0, #0
1004066c:	d101      	bne.n	10040672 <BOARD_Init+0x22>
		errorFlag = INIT_ERROR;
1004066e:	2300      	movs	r3, #0
10040670:	607b      	str	r3, [r7, #4]
	}
	return errorFlag;
10040672:	687b      	ldr	r3, [r7, #4]
}
10040674:	0018      	movs	r0, r3
10040676:	46bd      	mov	sp, r7
10040678:	b002      	add	sp, #8
1004067a:	bd80      	pop	{r7, pc}

1004067c <LL_LPUART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_LPUART_IsActiveFlag_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
1004067c:	b580      	push	{r7, lr}
1004067e:	b082      	sub	sp, #8
10040680:	af00      	add	r7, sp, #0
10040682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
10040684:	687b      	ldr	r3, [r7, #4]
10040686:	69db      	ldr	r3, [r3, #28]
10040688:	2220      	movs	r2, #32
1004068a:	4013      	ands	r3, r2
1004068c:	2b20      	cmp	r3, #32
1004068e:	d101      	bne.n	10040694 <LL_LPUART_IsActiveFlag_RXNE_RXFNE+0x18>
10040690:	2301      	movs	r3, #1
10040692:	e000      	b.n	10040696 <LL_LPUART_IsActiveFlag_RXNE_RXFNE+0x1a>
10040694:	2300      	movs	r3, #0
}
10040696:	0018      	movs	r0, r3
10040698:	46bd      	mov	sp, r7
1004069a:	b002      	add	sp, #8
1004069c:	bd80      	pop	{r7, pc}

1004069e <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *LPUARTx)
{
1004069e:	b580      	push	{r7, lr}
100406a0:	b082      	sub	sp, #8
100406a2:	af00      	add	r7, sp, #0
100406a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
100406a6:	687b      	ldr	r3, [r7, #4]
100406a8:	69db      	ldr	r3, [r3, #28]
100406aa:	2280      	movs	r2, #128	@ 0x80
100406ac:	4013      	ands	r3, r2
100406ae:	2b80      	cmp	r3, #128	@ 0x80
100406b0:	d101      	bne.n	100406b6 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
100406b2:	2301      	movs	r3, #1
100406b4:	e000      	b.n	100406b8 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
100406b6:	2300      	movs	r3, #0
}
100406b8:	0018      	movs	r0, r3
100406ba:	46bd      	mov	sp, r7
100406bc:	b002      	add	sp, #8
100406be:	bd80      	pop	{r7, pc}

100406c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static int MX_LPUART1_UART_Init(void)
{
100406c0:	b580      	push	{r7, lr}
100406c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
100406c4:	4b1e      	ldr	r3, [pc, #120]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406c6:	4a1f      	ldr	r2, [pc, #124]	@ (10040744 <MX_LPUART1_UART_Init+0x84>)
100406c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
100406ca:	4b1d      	ldr	r3, [pc, #116]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406cc:	2296      	movs	r2, #150	@ 0x96
100406ce:	0192      	lsls	r2, r2, #6
100406d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
100406d2:	4b1b      	ldr	r3, [pc, #108]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406d4:	2200      	movs	r2, #0
100406d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
100406d8:	4b19      	ldr	r3, [pc, #100]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406da:	2200      	movs	r2, #0
100406dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
100406de:	4b18      	ldr	r3, [pc, #96]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406e0:	2200      	movs	r2, #0
100406e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
100406e4:	4b16      	ldr	r3, [pc, #88]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406e6:	220c      	movs	r2, #12
100406e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100406ea:	4b15      	ldr	r3, [pc, #84]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406ec:	2200      	movs	r2, #0
100406ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100406f0:	4b13      	ldr	r3, [pc, #76]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406f2:	2200      	movs	r2, #0
100406f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100406f6:	4b12      	ldr	r3, [pc, #72]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406f8:	2200      	movs	r2, #0
100406fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100406fc:	4b10      	ldr	r3, [pc, #64]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
100406fe:	2200      	movs	r2, #0
10040700:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10040702:	4b0f      	ldr	r3, [pc, #60]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
10040704:	0018      	movs	r0, r3
10040706:	f000 fe7b 	bl	10041400 <HAL_UART_Init>
1004070a:	1e03      	subs	r3, r0, #0
1004070c:	d001      	beq.n	10040712 <MX_LPUART1_UART_Init+0x52>
  {
    return INIT_ERROR;
1004070e:	2300      	movs	r3, #0
10040710:	e012      	b.n	10040738 <MX_LPUART1_UART_Init+0x78>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10040712:	4b0b      	ldr	r3, [pc, #44]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
10040714:	2100      	movs	r1, #0
10040716:	0018      	movs	r0, r3
10040718:	f001 fa6c 	bl	10041bf4 <HAL_UARTEx_SetTxFifoThreshold>
1004071c:	1e03      	subs	r3, r0, #0
1004071e:	d001      	beq.n	10040724 <MX_LPUART1_UART_Init+0x64>
  {
	  return INIT_ERROR;
10040720:	2300      	movs	r3, #0
10040722:	e009      	b.n	10040738 <MX_LPUART1_UART_Init+0x78>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10040724:	4b06      	ldr	r3, [pc, #24]	@ (10040740 <MX_LPUART1_UART_Init+0x80>)
10040726:	2100      	movs	r1, #0
10040728:	0018      	movs	r0, r3
1004072a:	f001 faa3 	bl	10041c74 <HAL_UARTEx_SetRxFifoThreshold>
1004072e:	1e03      	subs	r3, r0, #0
10040730:	d001      	beq.n	10040736 <MX_LPUART1_UART_Init+0x76>
  {
	  return INIT_ERROR;
10040732:	2300      	movs	r3, #0
10040734:	e000      	b.n	10040738 <MX_LPUART1_UART_Init+0x78>
  }
  return INIT_OK;
10040736:	2301      	movs	r3, #1

}
10040738:	0018      	movs	r0, r3
1004073a:	46bd      	mov	sp, r7
1004073c:	bd80      	pop	{r7, pc}
1004073e:	46c0      	nop			@ (mov r8, r8)
10040740:	200000c0 	.word	0x200000c0
10040744:	41005000 	.word	0x41005000

10040748 <UART_Init>:

int UART_Init(void){
10040748:	b580      	push	{r7, lr}
1004074a:	af00      	add	r7, sp, #0
	return MX_LPUART1_UART_Init();
1004074c:	f7ff ffb8 	bl	100406c0 <MX_LPUART1_UART_Init>
10040750:	0003      	movs	r3, r0
}
10040752:	0018      	movs	r0, r3
10040754:	46bd      	mov	sp, r7
10040756:	bd80      	pop	{r7, pc}

10040758 <UART_ReadRx>:


char UART_ReadRx(void){
10040758:	b580      	push	{r7, lr}
1004075a:	af00      	add	r7, sp, #0
	if(LL_LPUART_IsActiveFlag_RXNE_RXFNE(LPUART1)){
1004075c:	4b06      	ldr	r3, [pc, #24]	@ (10040778 <UART_ReadRx+0x20>)
1004075e:	0018      	movs	r0, r3
10040760:	f7ff ff8c 	bl	1004067c <LL_LPUART_IsActiveFlag_RXNE_RXFNE>
10040764:	1e03      	subs	r3, r0, #0
10040766:	d003      	beq.n	10040770 <UART_ReadRx+0x18>
		return LL_LPUART_ReadReg(LPUART1, RDR);
10040768:	4b03      	ldr	r3, [pc, #12]	@ (10040778 <UART_ReadRx+0x20>)
1004076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004076c:	b2db      	uxtb	r3, r3
1004076e:	e000      	b.n	10040772 <UART_ReadRx+0x1a>
	}else {
		return 0;
10040770:	2300      	movs	r3, #0
	}

}
10040772:	0018      	movs	r0, r3
10040774:	46bd      	mov	sp, r7
10040776:	bd80      	pop	{r7, pc}
10040778:	41005000 	.word	0x41005000

1004077c <UART_WriteTx>:

void UART_WriteTx(char input){
1004077c:	b580      	push	{r7, lr}
1004077e:	b082      	sub	sp, #8
10040780:	af00      	add	r7, sp, #0
10040782:	0002      	movs	r2, r0
10040784:	1dfb      	adds	r3, r7, #7
10040786:	701a      	strb	r2, [r3, #0]
	if (LL_LPUART_IsActiveFlag_TXE_TXFNF(LPUART1)){
10040788:	4b06      	ldr	r3, [pc, #24]	@ (100407a4 <UART_WriteTx+0x28>)
1004078a:	0018      	movs	r0, r3
1004078c:	f7ff ff87 	bl	1004069e <LL_LPUART_IsActiveFlag_TXE_TXFNF>
10040790:	1e03      	subs	r3, r0, #0
10040792:	d003      	beq.n	1004079c <UART_WriteTx+0x20>
		LL_LPUART_WriteReg(LPUART1, RDR, input);
10040794:	4b03      	ldr	r3, [pc, #12]	@ (100407a4 <UART_WriteTx+0x28>)
10040796:	1dfa      	adds	r2, r7, #7
10040798:	7812      	ldrb	r2, [r2, #0]
1004079a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
1004079c:	46c0      	nop			@ (mov r8, r8)
1004079e:	46bd      	mov	sp, r7
100407a0:	b002      	add	sp, #8
100407a2:	bd80      	pop	{r7, pc}
100407a4:	41005000 	.word	0x41005000

100407a8 <main>:


#define UARTTESTHARNESS

#ifdef UARTTESTHARNESS
int main(){
100407a8:	b590      	push	{r4, r7, lr}
100407aa:	b083      	sub	sp, #12
100407ac:	af00      	add	r7, sp, #0
	BOARD_Init();
100407ae:	f7ff ff4f 	bl	10040650 <BOARD_Init>
	UART_Init();
100407b2:	f7ff ffc9 	bl	10040748 <UART_Init>
	while (1){
		char Rx = UART_ReadRx();
100407b6:	1dfc      	adds	r4, r7, #7
100407b8:	f7ff ffce 	bl	10040758 <UART_ReadRx>
100407bc:	0003      	movs	r3, r0
100407be:	7023      	strb	r3, [r4, #0]
		if(Rx){
100407c0:	1dfb      	adds	r3, r7, #7
100407c2:	781b      	ldrb	r3, [r3, #0]
100407c4:	2b00      	cmp	r3, #0
100407c6:	d0f6      	beq.n	100407b6 <main+0xe>
			UART_WriteTx(Rx);
100407c8:	1dfb      	adds	r3, r7, #7
100407ca:	781b      	ldrb	r3, [r3, #0]
100407cc:	0018      	movs	r0, r3
100407ce:	f7ff ffd5 	bl	1004077c <UART_WriteTx>
	while (1){
100407d2:	e7f0      	b.n	100407b6 <main+0xe>

100407d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100407d4:	b580      	push	{r7, lr}
100407d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100407d8:	46c0      	nop			@ (mov r8, r8)
100407da:	e7fd      	b.n	100407d8 <NMI_Handler+0x4>

100407dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100407dc:	b580      	push	{r7, lr}
100407de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100407e0:	46c0      	nop			@ (mov r8, r8)
100407e2:	e7fd      	b.n	100407e0 <HardFault_Handler+0x4>

100407e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100407e4:	b580      	push	{r7, lr}
100407e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100407e8:	46c0      	nop			@ (mov r8, r8)
100407ea:	46bd      	mov	sp, r7
100407ec:	bd80      	pop	{r7, pc}

100407ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100407ee:	b580      	push	{r7, lr}
100407f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100407f2:	46c0      	nop			@ (mov r8, r8)
100407f4:	46bd      	mov	sp, r7
100407f6:	bd80      	pop	{r7, pc}

100407f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100407f8:	b580      	push	{r7, lr}
100407fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100407fc:	f000 fa10 	bl	10040c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10040800:	46c0      	nop			@ (mov r8, r8)
10040802:	46bd      	mov	sp, r7
10040804:	bd80      	pop	{r7, pc}
	...

10040808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10040808:	b590      	push	{r4, r7, lr}
1004080a:	b083      	sub	sp, #12
1004080c:	af00      	add	r7, sp, #0
1004080e:	0002      	movs	r2, r0
10040810:	6039      	str	r1, [r7, #0]
10040812:	1dfb      	adds	r3, r7, #7
10040814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10040816:	1dfb      	adds	r3, r7, #7
10040818:	781b      	ldrb	r3, [r3, #0]
1004081a:	2b7f      	cmp	r3, #127	@ 0x7f
1004081c:	d828      	bhi.n	10040870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004081e:	4a2f      	ldr	r2, [pc, #188]	@ (100408dc <__NVIC_SetPriority+0xd4>)
10040820:	1dfb      	adds	r3, r7, #7
10040822:	781b      	ldrb	r3, [r3, #0]
10040824:	b25b      	sxtb	r3, r3
10040826:	089b      	lsrs	r3, r3, #2
10040828:	33c0      	adds	r3, #192	@ 0xc0
1004082a:	009b      	lsls	r3, r3, #2
1004082c:	589b      	ldr	r3, [r3, r2]
1004082e:	1dfa      	adds	r2, r7, #7
10040830:	7812      	ldrb	r2, [r2, #0]
10040832:	0011      	movs	r1, r2
10040834:	2203      	movs	r2, #3
10040836:	400a      	ands	r2, r1
10040838:	00d2      	lsls	r2, r2, #3
1004083a:	21ff      	movs	r1, #255	@ 0xff
1004083c:	4091      	lsls	r1, r2
1004083e:	000a      	movs	r2, r1
10040840:	43d2      	mvns	r2, r2
10040842:	401a      	ands	r2, r3
10040844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040846:	683b      	ldr	r3, [r7, #0]
10040848:	019b      	lsls	r3, r3, #6
1004084a:	22ff      	movs	r2, #255	@ 0xff
1004084c:	401a      	ands	r2, r3
1004084e:	1dfb      	adds	r3, r7, #7
10040850:	781b      	ldrb	r3, [r3, #0]
10040852:	0018      	movs	r0, r3
10040854:	2303      	movs	r3, #3
10040856:	4003      	ands	r3, r0
10040858:	00db      	lsls	r3, r3, #3
1004085a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004085c:	481f      	ldr	r0, [pc, #124]	@ (100408dc <__NVIC_SetPriority+0xd4>)
1004085e:	1dfb      	adds	r3, r7, #7
10040860:	781b      	ldrb	r3, [r3, #0]
10040862:	b25b      	sxtb	r3, r3
10040864:	089b      	lsrs	r3, r3, #2
10040866:	430a      	orrs	r2, r1
10040868:	33c0      	adds	r3, #192	@ 0xc0
1004086a:	009b      	lsls	r3, r3, #2
1004086c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1004086e:	e031      	b.n	100408d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040870:	4a1b      	ldr	r2, [pc, #108]	@ (100408e0 <__NVIC_SetPriority+0xd8>)
10040872:	1dfb      	adds	r3, r7, #7
10040874:	781b      	ldrb	r3, [r3, #0]
10040876:	0019      	movs	r1, r3
10040878:	230f      	movs	r3, #15
1004087a:	400b      	ands	r3, r1
1004087c:	3b08      	subs	r3, #8
1004087e:	089b      	lsrs	r3, r3, #2
10040880:	3306      	adds	r3, #6
10040882:	009b      	lsls	r3, r3, #2
10040884:	18d3      	adds	r3, r2, r3
10040886:	3304      	adds	r3, #4
10040888:	681b      	ldr	r3, [r3, #0]
1004088a:	1dfa      	adds	r2, r7, #7
1004088c:	7812      	ldrb	r2, [r2, #0]
1004088e:	0011      	movs	r1, r2
10040890:	2203      	movs	r2, #3
10040892:	400a      	ands	r2, r1
10040894:	00d2      	lsls	r2, r2, #3
10040896:	21ff      	movs	r1, #255	@ 0xff
10040898:	4091      	lsls	r1, r2
1004089a:	000a      	movs	r2, r1
1004089c:	43d2      	mvns	r2, r2
1004089e:	401a      	ands	r2, r3
100408a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100408a2:	683b      	ldr	r3, [r7, #0]
100408a4:	019b      	lsls	r3, r3, #6
100408a6:	22ff      	movs	r2, #255	@ 0xff
100408a8:	401a      	ands	r2, r3
100408aa:	1dfb      	adds	r3, r7, #7
100408ac:	781b      	ldrb	r3, [r3, #0]
100408ae:	0018      	movs	r0, r3
100408b0:	2303      	movs	r3, #3
100408b2:	4003      	ands	r3, r0
100408b4:	00db      	lsls	r3, r3, #3
100408b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100408b8:	4809      	ldr	r0, [pc, #36]	@ (100408e0 <__NVIC_SetPriority+0xd8>)
100408ba:	1dfb      	adds	r3, r7, #7
100408bc:	781b      	ldrb	r3, [r3, #0]
100408be:	001c      	movs	r4, r3
100408c0:	230f      	movs	r3, #15
100408c2:	4023      	ands	r3, r4
100408c4:	3b08      	subs	r3, #8
100408c6:	089b      	lsrs	r3, r3, #2
100408c8:	430a      	orrs	r2, r1
100408ca:	3306      	adds	r3, #6
100408cc:	009b      	lsls	r3, r3, #2
100408ce:	18c3      	adds	r3, r0, r3
100408d0:	3304      	adds	r3, #4
100408d2:	601a      	str	r2, [r3, #0]
}
100408d4:	46c0      	nop			@ (mov r8, r8)
100408d6:	46bd      	mov	sp, r7
100408d8:	b003      	add	sp, #12
100408da:	bd90      	pop	{r4, r7, pc}
100408dc:	e000e100 	.word	0xe000e100
100408e0:	e000ed00 	.word	0xe000ed00

100408e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100408e4:	b580      	push	{r7, lr}
100408e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
100408e8:	f3bf 8f4f 	dsb	sy
}
100408ec:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100408ee:	4b04      	ldr	r3, [pc, #16]	@ (10040900 <__NVIC_SystemReset+0x1c>)
100408f0:	4a04      	ldr	r2, [pc, #16]	@ (10040904 <__NVIC_SystemReset+0x20>)
100408f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100408f4:	f3bf 8f4f 	dsb	sy
}
100408f8:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100408fa:	46c0      	nop			@ (mov r8, r8)
100408fc:	e7fd      	b.n	100408fa <__NVIC_SystemReset+0x16>
100408fe:	46c0      	nop			@ (mov r8, r8)
10040900:	e000ed00 	.word	0xe000ed00
10040904:	05fa0004 	.word	0x05fa0004

10040908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10040908:	b590      	push	{r4, r7, lr}
1004090a:	b087      	sub	sp, #28
1004090c:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
1004090e:	4a5e      	ldr	r2, [pc, #376]	@ (10040a88 <SystemInit+0x180>)
10040910:	2394      	movs	r3, #148	@ 0x94
10040912:	58d3      	ldr	r3, [r2, r3]
10040914:	2b00      	cmp	r3, #0
10040916:	d10e      	bne.n	10040936 <SystemInit+0x2e>
10040918:	4b5c      	ldr	r3, [pc, #368]	@ (10040a8c <SystemInit+0x184>)
1004091a:	691b      	ldr	r3, [r3, #16]
1004091c:	2b00      	cmp	r3, #0
1004091e:	d103      	bne.n	10040928 <SystemInit+0x20>
10040920:	4b5a      	ldr	r3, [pc, #360]	@ (10040a8c <SystemInit+0x184>)
10040922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10040924:	2b00      	cmp	r3, #0
10040926:	d006      	beq.n	10040936 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10040928:	4b59      	ldr	r3, [pc, #356]	@ (10040a90 <SystemInit+0x188>)
1004092a:	2201      	movs	r2, #1
1004092c:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
1004092e:	f000 f8f5 	bl	10040b1c <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10040932:	f7ff ffd7 	bl	100408e4 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10040936:	4b57      	ldr	r3, [pc, #348]	@ (10040a94 <SystemInit+0x18c>)
10040938:	4a57      	ldr	r2, [pc, #348]	@ (10040a98 <SystemInit+0x190>)
1004093a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
1004093c:	4b55      	ldr	r3, [pc, #340]	@ (10040a94 <SystemInit+0x18c>)
1004093e:	689a      	ldr	r2, [r3, #8]
10040940:	4b53      	ldr	r3, [pc, #332]	@ (10040a90 <SystemInit+0x188>)
10040942:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10040944:	4b51      	ldr	r3, [pc, #324]	@ (10040a8c <SystemInit+0x184>)
10040946:	685a      	ldr	r2, [r3, #4]
10040948:	4b50      	ldr	r3, [pc, #320]	@ (10040a8c <SystemInit+0x184>)
1004094a:	2120      	movs	r1, #32
1004094c:	430a      	orrs	r2, r1
1004094e:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10040950:	4b4e      	ldr	r3, [pc, #312]	@ (10040a8c <SystemInit+0x184>)
10040952:	685a      	ldr	r2, [r3, #4]
10040954:	4b4d      	ldr	r3, [pc, #308]	@ (10040a8c <SystemInit+0x184>)
10040956:	4951      	ldr	r1, [pc, #324]	@ (10040a9c <SystemInit+0x194>)
10040958:	400a      	ands	r2, r1
1004095a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004095c:	46c0      	nop			@ (mov r8, r8)
1004095e:	4b4b      	ldr	r3, [pc, #300]	@ (10040a8c <SystemInit+0x184>)
10040960:	695b      	ldr	r3, [r3, #20]
10040962:	2204      	movs	r2, #4
10040964:	4013      	ands	r3, r2
10040966:	2b04      	cmp	r3, #4
10040968:	d1f9      	bne.n	1004095e <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004096a:	4b48      	ldr	r3, [pc, #288]	@ (10040a8c <SystemInit+0x184>)
1004096c:	69db      	ldr	r3, [r3, #28]
1004096e:	2230      	movs	r2, #48	@ 0x30
10040970:	4393      	bics	r3, r2
10040972:	001a      	movs	r2, r3
10040974:	4b45      	ldr	r3, [pc, #276]	@ (10040a8c <SystemInit+0x184>)
10040976:	2120      	movs	r1, #32
10040978:	430a      	orrs	r2, r1
1004097a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
1004097c:	4b43      	ldr	r3, [pc, #268]	@ (10040a8c <SystemInit+0x184>)
1004097e:	69da      	ldr	r2, [r3, #28]
10040980:	4b42      	ldr	r3, [pc, #264]	@ (10040a8c <SystemInit+0x184>)
10040982:	4947      	ldr	r1, [pc, #284]	@ (10040aa0 <SystemInit+0x198>)
10040984:	400a      	ands	r2, r1
10040986:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10040988:	4b40      	ldr	r3, [pc, #256]	@ (10040a8c <SystemInit+0x184>)
1004098a:	69da      	ldr	r2, [r3, #28]
1004098c:	4b3f      	ldr	r3, [pc, #252]	@ (10040a8c <SystemInit+0x184>)
1004098e:	2180      	movs	r1, #128	@ 0x80
10040990:	0049      	lsls	r1, r1, #1
10040992:	430a      	orrs	r2, r1
10040994:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10040996:	4b43      	ldr	r3, [pc, #268]	@ (10040aa4 <SystemInit+0x19c>)
10040998:	681b      	ldr	r3, [r3, #0]
1004099a:	4a43      	ldr	r2, [pc, #268]	@ (10040aa8 <SystemInit+0x1a0>)
1004099c:	4293      	cmp	r3, r2
1004099e:	d055      	beq.n	10040a4c <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
100409a0:	231f      	movs	r3, #31
100409a2:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
100409a4:	2308      	movs	r3, #8
100409a6:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
100409a8:	230a      	movs	r3, #10
100409aa:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
100409ac:	2303      	movs	r3, #3
100409ae:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
100409b0:	4b35      	ldr	r3, [pc, #212]	@ (10040a88 <SystemInit+0x180>)
100409b2:	68db      	ldr	r3, [r3, #12]
100409b4:	221e      	movs	r2, #30
100409b6:	4393      	bics	r3, r2
100409b8:	0019      	movs	r1, r3
100409ba:	68fb      	ldr	r3, [r7, #12]
100409bc:	005a      	lsls	r2, r3, #1
100409be:	4b32      	ldr	r3, [pc, #200]	@ (10040a88 <SystemInit+0x180>)
100409c0:	430a      	orrs	r2, r1
100409c2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
100409c4:	4b30      	ldr	r3, [pc, #192]	@ (10040a88 <SystemInit+0x180>)
100409c6:	68da      	ldr	r2, [r3, #12]
100409c8:	4b2f      	ldr	r3, [pc, #188]	@ (10040a88 <SystemInit+0x180>)
100409ca:	2101      	movs	r1, #1
100409cc:	430a      	orrs	r2, r1
100409ce:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
100409d0:	4b2d      	ldr	r3, [pc, #180]	@ (10040a88 <SystemInit+0x180>)
100409d2:	68db      	ldr	r3, [r3, #12]
100409d4:	4a35      	ldr	r2, [pc, #212]	@ (10040aac <SystemInit+0x1a4>)
100409d6:	4013      	ands	r3, r2
100409d8:	0019      	movs	r1, r3
100409da:	693b      	ldr	r3, [r7, #16]
100409dc:	061a      	lsls	r2, r3, #24
100409de:	4b2a      	ldr	r3, [pc, #168]	@ (10040a88 <SystemInit+0x180>)
100409e0:	430a      	orrs	r2, r1
100409e2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
100409e4:	4b28      	ldr	r3, [pc, #160]	@ (10040a88 <SystemInit+0x180>)
100409e6:	68da      	ldr	r2, [r3, #12]
100409e8:	4b27      	ldr	r3, [pc, #156]	@ (10040a88 <SystemInit+0x180>)
100409ea:	2180      	movs	r1, #128	@ 0x80
100409ec:	0409      	lsls	r1, r1, #16
100409ee:	430a      	orrs	r2, r1
100409f0:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
100409f2:	4a26      	ldr	r2, [pc, #152]	@ (10040a8c <SystemInit+0x184>)
100409f4:	2394      	movs	r3, #148	@ 0x94
100409f6:	58d3      	ldr	r3, [r2, r3]
100409f8:	4a2d      	ldr	r2, [pc, #180]	@ (10040ab0 <SystemInit+0x1a8>)
100409fa:	401a      	ands	r2, r3
100409fc:	68bb      	ldr	r3, [r7, #8]
100409fe:	0199      	lsls	r1, r3, #6
10040a00:	23f0      	movs	r3, #240	@ 0xf0
10040a02:	009b      	lsls	r3, r3, #2
10040a04:	400b      	ands	r3, r1
10040a06:	4921      	ldr	r1, [pc, #132]	@ (10040a8c <SystemInit+0x184>)
10040a08:	4313      	orrs	r3, r2
10040a0a:	2294      	movs	r2, #148	@ 0x94
10040a0c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10040a0e:	4a1f      	ldr	r2, [pc, #124]	@ (10040a8c <SystemInit+0x184>)
10040a10:	2394      	movs	r3, #148	@ 0x94
10040a12:	58d3      	ldr	r3, [r2, r3]
10040a14:	491d      	ldr	r1, [pc, #116]	@ (10040a8c <SystemInit+0x184>)
10040a16:	2220      	movs	r2, #32
10040a18:	4313      	orrs	r3, r2
10040a1a:	2294      	movs	r2, #148	@ 0x94
10040a1c:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10040a1e:	4a1b      	ldr	r2, [pc, #108]	@ (10040a8c <SystemInit+0x184>)
10040a20:	2394      	movs	r3, #148	@ 0x94
10040a22:	58d3      	ldr	r3, [r2, r3]
10040a24:	4a23      	ldr	r2, [pc, #140]	@ (10040ab4 <SystemInit+0x1ac>)
10040a26:	401a      	ands	r2, r3
10040a28:	687b      	ldr	r3, [r7, #4]
10040a2a:	02d9      	lsls	r1, r3, #11
10040a2c:	23e0      	movs	r3, #224	@ 0xe0
10040a2e:	019b      	lsls	r3, r3, #6
10040a30:	400b      	ands	r3, r1
10040a32:	4916      	ldr	r1, [pc, #88]	@ (10040a8c <SystemInit+0x184>)
10040a34:	4313      	orrs	r3, r2
10040a36:	2294      	movs	r2, #148	@ 0x94
10040a38:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10040a3a:	4a14      	ldr	r2, [pc, #80]	@ (10040a8c <SystemInit+0x184>)
10040a3c:	2394      	movs	r3, #148	@ 0x94
10040a3e:	58d3      	ldr	r3, [r2, r3]
10040a40:	4912      	ldr	r1, [pc, #72]	@ (10040a8c <SystemInit+0x184>)
10040a42:	2280      	movs	r2, #128	@ 0x80
10040a44:	00d2      	lsls	r2, r2, #3
10040a46:	4313      	orrs	r3, r2
10040a48:	2294      	movs	r2, #148	@ 0x94
10040a4a:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10040a4c:	2317      	movs	r3, #23
10040a4e:	18fb      	adds	r3, r7, r3
10040a50:	2200      	movs	r2, #0
10040a52:	701a      	strb	r2, [r3, #0]
10040a54:	e00d      	b.n	10040a72 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10040a56:	2417      	movs	r4, #23
10040a58:	193b      	adds	r3, r7, r4
10040a5a:	781b      	ldrb	r3, [r3, #0]
10040a5c:	b25b      	sxtb	r3, r3
10040a5e:	2103      	movs	r1, #3
10040a60:	0018      	movs	r0, r3
10040a62:	f7ff fed1 	bl	10040808 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10040a66:	0021      	movs	r1, r4
10040a68:	187b      	adds	r3, r7, r1
10040a6a:	781a      	ldrb	r2, [r3, #0]
10040a6c:	187b      	adds	r3, r7, r1
10040a6e:	3201      	adds	r2, #1
10040a70:	701a      	strb	r2, [r3, #0]
10040a72:	2317      	movs	r3, #23
10040a74:	18fb      	adds	r3, r7, r3
10040a76:	781b      	ldrb	r3, [r3, #0]
10040a78:	2b1f      	cmp	r3, #31
10040a7a:	d9ec      	bls.n	10040a56 <SystemInit+0x14e>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
10040a7c:	b662      	cpsie	i
}
10040a7e:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10040a80:	46c0      	nop			@ (mov r8, r8)
10040a82:	46bd      	mov	sp, r7
10040a84:	b007      	add	sp, #28
10040a86:	bd90      	pop	{r4, r7, pc}
10040a88:	48400000 	.word	0x48400000
10040a8c:	48500000 	.word	0x48500000
10040a90:	20000004 	.word	0x20000004
10040a94:	e000ed00 	.word	0xe000ed00
10040a98:	10040000 	.word	0x10040000
10040a9c:	fffffeff 	.word	0xfffffeff
10040aa0:	fffffbff 	.word	0xfffffbff
10040aa4:	10001ef8 	.word	0x10001ef8
10040aa8:	fcbceccc 	.word	0xfcbceccc
10040aac:	c0ffffff 	.word	0xc0ffffff
10040ab0:	fffffc3f 	.word	0xfffffc3f
10040ab4:	ffffc7ff 	.word	0xffffc7ff

10040ab8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10040ab8:	b580      	push	{r7, lr}
10040aba:	b082      	sub	sp, #8
10040abc:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10040abe:	4b13      	ldr	r3, [pc, #76]	@ (10040b0c <SystemCoreClockUpdate+0x54>)
10040ac0:	689b      	ldr	r3, [r3, #8]
10040ac2:	085b      	lsrs	r3, r3, #1
10040ac4:	b2da      	uxtb	r2, r3
10040ac6:	1dfb      	adds	r3, r7, #7
10040ac8:	2101      	movs	r1, #1
10040aca:	400a      	ands	r2, r1
10040acc:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10040ace:	4b0f      	ldr	r3, [pc, #60]	@ (10040b0c <SystemCoreClockUpdate+0x54>)
10040ad0:	689b      	ldr	r3, [r3, #8]
10040ad2:	0a1b      	lsrs	r3, r3, #8
10040ad4:	b2da      	uxtb	r2, r3
10040ad6:	1dbb      	adds	r3, r7, #6
10040ad8:	2107      	movs	r1, #7
10040ada:	400a      	ands	r2, r1
10040adc:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10040ade:	1dfb      	adds	r3, r7, #7
10040ae0:	781b      	ldrb	r3, [r3, #0]
10040ae2:	2b00      	cmp	r3, #0
10040ae4:	d007      	beq.n	10040af6 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10040ae6:	1dbb      	adds	r3, r7, #6
10040ae8:	781b      	ldrb	r3, [r3, #0]
10040aea:	3b01      	subs	r3, #1
10040aec:	4a08      	ldr	r2, [pc, #32]	@ (10040b10 <SystemCoreClockUpdate+0x58>)
10040aee:	40da      	lsrs	r2, r3
10040af0:	4b08      	ldr	r3, [pc, #32]	@ (10040b14 <SystemCoreClockUpdate+0x5c>)
10040af2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10040af4:	e005      	b.n	10040b02 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10040af6:	1dbb      	adds	r3, r7, #6
10040af8:	781b      	ldrb	r3, [r3, #0]
10040afa:	4a07      	ldr	r2, [pc, #28]	@ (10040b18 <SystemCoreClockUpdate+0x60>)
10040afc:	40da      	lsrs	r2, r3
10040afe:	4b05      	ldr	r3, [pc, #20]	@ (10040b14 <SystemCoreClockUpdate+0x5c>)
10040b00:	601a      	str	r2, [r3, #0]
}
10040b02:	46c0      	nop			@ (mov r8, r8)
10040b04:	46bd      	mov	sp, r7
10040b06:	b002      	add	sp, #8
10040b08:	bd80      	pop	{r7, pc}
10040b0a:	46c0      	nop			@ (mov r8, r8)
10040b0c:	48400000 	.word	0x48400000
10040b10:	01e84800 	.word	0x01e84800
10040b14:	20000158 	.word	0x20000158
10040b18:	03d09000 	.word	0x03d09000

10040b1c <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10040b1c:	b580      	push	{r7, lr}
10040b1e:	af00      	add	r7, sp, #0
}
10040b20:	46c0      	nop			@ (mov r8, r8)
10040b22:	46bd      	mov	sp, r7
10040b24:	bd80      	pop	{r7, pc}
	...

10040b28 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10040b28:	4810      	ldr	r0, [pc, #64]	@ (10040b6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10040b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10040b2c:	f7ff feec 	bl	10040908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10040b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10040b32:	e003      	b.n	10040b3c <LoopCopyDataInit>

10040b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10040b34:	4b0e      	ldr	r3, [pc, #56]	@ (10040b70 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10040b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10040b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10040b3a:	3104      	adds	r1, #4

10040b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10040b3c:	480d      	ldr	r0, [pc, #52]	@ (10040b74 <LoopForever+0xa>)
  ldr  r3, =_edata
10040b3e:	4b0e      	ldr	r3, [pc, #56]	@ (10040b78 <LoopForever+0xe>)
  adds  r2, r0, r1
10040b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10040b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10040b44:	d3f6      	bcc.n	10040b34 <CopyDataInit>
  ldr  r2, =_sbss
10040b46:	4a0d      	ldr	r2, [pc, #52]	@ (10040b7c <LoopForever+0x12>)
  b  LoopFillZerobss
10040b48:	e002      	b.n	10040b50 <LoopFillZerobss>

10040b4a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10040b4a:	2300      	movs	r3, #0
  str  r3, [r2]
10040b4c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10040b4e:	3204      	adds	r2, #4

10040b50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10040b50:	4b0b      	ldr	r3, [pc, #44]	@ (10040b80 <LoopForever+0x16>)
  cmp  r2, r3
10040b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
10040b54:	d3f9      	bcc.n	10040b4a <FillZerobss>
  ldr  r2, =_sbssblue
10040b56:	4a0b      	ldr	r2, [pc, #44]	@ (10040b84 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10040b58:	e002      	b.n	10040b60 <LoopFillZeroBlueRam>

10040b5a <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10040b5a:	2300      	movs	r3, #0
  str  r3, [r2]
10040b5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10040b5e:	3204      	adds	r2, #4

10040b60 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10040b60:	4b09      	ldr	r3, [pc, #36]	@ (10040b88 <LoopForever+0x1e>)
  cmp  r2, r3
10040b62:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10040b64:	d3f9      	bcc.n	10040b5a <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10040b66:	f7ff fe1f 	bl	100407a8 <main>

10040b6a <LoopForever>:

LoopForever:
    b LoopForever
10040b6a:	e7fe      	b.n	10040b6a <LoopForever>
   ldr   r0, =_estack
10040b6c:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10040b70:	10041e80 	.word	0x10041e80
  ldr  r0, =_sdata
10040b74:	20000158 	.word	0x20000158
  ldr  r3, =_edata
10040b78:	20000164 	.word	0x20000164
  ldr  r2, =_sbss
10040b7c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
10040b80:	20000158 	.word	0x20000158
  ldr  r2, =_sbssblue
10040b84:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10040b88:	200000c0 	.word	0x200000c0

10040b8c <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10040b8c:	e7fe      	b.n	10040b8c <ADC_IRQHandler>
	...

10040b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10040b90:	b590      	push	{r4, r7, lr}
10040b92:	b085      	sub	sp, #20
10040b94:	af00      	add	r7, sp, #0
10040b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10040b98:	230f      	movs	r3, #15
10040b9a:	18fb      	adds	r3, r7, r3
10040b9c:	2200      	movs	r2, #0
10040b9e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10040ba0:	4b1d      	ldr	r3, [pc, #116]	@ (10040c18 <HAL_InitTick+0x88>)
10040ba2:	781b      	ldrb	r3, [r3, #0]
10040ba4:	2b00      	cmp	r3, #0
10040ba6:	d02c      	beq.n	10040c02 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10040ba8:	f000 fa68 	bl	1004107c <HAL_RCC_GetSysClockFreq>
10040bac:	0004      	movs	r4, r0
10040bae:	4b1a      	ldr	r3, [pc, #104]	@ (10040c18 <HAL_InitTick+0x88>)
10040bb0:	781b      	ldrb	r3, [r3, #0]
10040bb2:	0019      	movs	r1, r3
10040bb4:	23fa      	movs	r3, #250	@ 0xfa
10040bb6:	0098      	lsls	r0, r3, #2
10040bb8:	f7ff fa82 	bl	100400c0 <__udivsi3>
10040bbc:	0003      	movs	r3, r0
10040bbe:	0019      	movs	r1, r3
10040bc0:	0020      	movs	r0, r4
10040bc2:	f7ff fa7d 	bl	100400c0 <__udivsi3>
10040bc6:	0003      	movs	r3, r0
10040bc8:	0018      	movs	r0, r3
10040bca:	f000 f8f6 	bl	10040dba <HAL_SYSTICK_Config>
10040bce:	1e03      	subs	r3, r0, #0
10040bd0:	d112      	bne.n	10040bf8 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10040bd2:	687b      	ldr	r3, [r7, #4]
10040bd4:	2b03      	cmp	r3, #3
10040bd6:	d80a      	bhi.n	10040bee <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10040bd8:	6879      	ldr	r1, [r7, #4]
10040bda:	2301      	movs	r3, #1
10040bdc:	425b      	negs	r3, r3
10040bde:	2200      	movs	r2, #0
10040be0:	0018      	movs	r0, r3
10040be2:	f000 f8d5 	bl	10040d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10040be6:	4b0d      	ldr	r3, [pc, #52]	@ (10040c1c <HAL_InitTick+0x8c>)
10040be8:	687a      	ldr	r2, [r7, #4]
10040bea:	601a      	str	r2, [r3, #0]
10040bec:	e00d      	b.n	10040c0a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10040bee:	230f      	movs	r3, #15
10040bf0:	18fb      	adds	r3, r7, r3
10040bf2:	2201      	movs	r2, #1
10040bf4:	701a      	strb	r2, [r3, #0]
10040bf6:	e008      	b.n	10040c0a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10040bf8:	230f      	movs	r3, #15
10040bfa:	18fb      	adds	r3, r7, r3
10040bfc:	2201      	movs	r2, #1
10040bfe:	701a      	strb	r2, [r3, #0]
10040c00:	e003      	b.n	10040c0a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10040c02:	230f      	movs	r3, #15
10040c04:	18fb      	adds	r3, r7, r3
10040c06:	2201      	movs	r2, #1
10040c08:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10040c0a:	230f      	movs	r3, #15
10040c0c:	18fb      	adds	r3, r7, r3
10040c0e:	781b      	ldrb	r3, [r3, #0]
}
10040c10:	0018      	movs	r0, r3
10040c12:	46bd      	mov	sp, r7
10040c14:	b005      	add	sp, #20
10040c16:	bd90      	pop	{r4, r7, pc}
10040c18:	20000160 	.word	0x20000160
10040c1c:	2000015c 	.word	0x2000015c

10040c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10040c20:	b580      	push	{r7, lr}
10040c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10040c24:	4b05      	ldr	r3, [pc, #20]	@ (10040c3c <HAL_IncTick+0x1c>)
10040c26:	781b      	ldrb	r3, [r3, #0]
10040c28:	001a      	movs	r2, r3
10040c2a:	4b05      	ldr	r3, [pc, #20]	@ (10040c40 <HAL_IncTick+0x20>)
10040c2c:	681b      	ldr	r3, [r3, #0]
10040c2e:	18d2      	adds	r2, r2, r3
10040c30:	4b03      	ldr	r3, [pc, #12]	@ (10040c40 <HAL_IncTick+0x20>)
10040c32:	601a      	str	r2, [r3, #0]
}
10040c34:	46c0      	nop			@ (mov r8, r8)
10040c36:	46bd      	mov	sp, r7
10040c38:	bd80      	pop	{r7, pc}
10040c3a:	46c0      	nop			@ (mov r8, r8)
10040c3c:	20000160 	.word	0x20000160
10040c40:	20000154 	.word	0x20000154

10040c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10040c44:	b580      	push	{r7, lr}
10040c46:	af00      	add	r7, sp, #0
  return uwTick;
10040c48:	4b02      	ldr	r3, [pc, #8]	@ (10040c54 <HAL_GetTick+0x10>)
10040c4a:	681b      	ldr	r3, [r3, #0]
}
10040c4c:	0018      	movs	r0, r3
10040c4e:	46bd      	mov	sp, r7
10040c50:	bd80      	pop	{r7, pc}
10040c52:	46c0      	nop			@ (mov r8, r8)
10040c54:	20000154 	.word	0x20000154

10040c58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10040c58:	b580      	push	{r7, lr}
10040c5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
10040c5c:	4b02      	ldr	r3, [pc, #8]	@ (10040c68 <HAL_GetTickPrio+0x10>)
10040c5e:	681b      	ldr	r3, [r3, #0]
}
10040c60:	0018      	movs	r0, r3
10040c62:	46bd      	mov	sp, r7
10040c64:	bd80      	pop	{r7, pc}
10040c66:	46c0      	nop			@ (mov r8, r8)
10040c68:	2000015c 	.word	0x2000015c

10040c6c <__NVIC_SetPriority>:
{
10040c6c:	b590      	push	{r4, r7, lr}
10040c6e:	b083      	sub	sp, #12
10040c70:	af00      	add	r7, sp, #0
10040c72:	0002      	movs	r2, r0
10040c74:	6039      	str	r1, [r7, #0]
10040c76:	1dfb      	adds	r3, r7, #7
10040c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10040c7a:	1dfb      	adds	r3, r7, #7
10040c7c:	781b      	ldrb	r3, [r3, #0]
10040c7e:	2b7f      	cmp	r3, #127	@ 0x7f
10040c80:	d828      	bhi.n	10040cd4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040c82:	4a2f      	ldr	r2, [pc, #188]	@ (10040d40 <__NVIC_SetPriority+0xd4>)
10040c84:	1dfb      	adds	r3, r7, #7
10040c86:	781b      	ldrb	r3, [r3, #0]
10040c88:	b25b      	sxtb	r3, r3
10040c8a:	089b      	lsrs	r3, r3, #2
10040c8c:	33c0      	adds	r3, #192	@ 0xc0
10040c8e:	009b      	lsls	r3, r3, #2
10040c90:	589b      	ldr	r3, [r3, r2]
10040c92:	1dfa      	adds	r2, r7, #7
10040c94:	7812      	ldrb	r2, [r2, #0]
10040c96:	0011      	movs	r1, r2
10040c98:	2203      	movs	r2, #3
10040c9a:	400a      	ands	r2, r1
10040c9c:	00d2      	lsls	r2, r2, #3
10040c9e:	21ff      	movs	r1, #255	@ 0xff
10040ca0:	4091      	lsls	r1, r2
10040ca2:	000a      	movs	r2, r1
10040ca4:	43d2      	mvns	r2, r2
10040ca6:	401a      	ands	r2, r3
10040ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040caa:	683b      	ldr	r3, [r7, #0]
10040cac:	019b      	lsls	r3, r3, #6
10040cae:	22ff      	movs	r2, #255	@ 0xff
10040cb0:	401a      	ands	r2, r3
10040cb2:	1dfb      	adds	r3, r7, #7
10040cb4:	781b      	ldrb	r3, [r3, #0]
10040cb6:	0018      	movs	r0, r3
10040cb8:	2303      	movs	r3, #3
10040cba:	4003      	ands	r3, r0
10040cbc:	00db      	lsls	r3, r3, #3
10040cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040cc0:	481f      	ldr	r0, [pc, #124]	@ (10040d40 <__NVIC_SetPriority+0xd4>)
10040cc2:	1dfb      	adds	r3, r7, #7
10040cc4:	781b      	ldrb	r3, [r3, #0]
10040cc6:	b25b      	sxtb	r3, r3
10040cc8:	089b      	lsrs	r3, r3, #2
10040cca:	430a      	orrs	r2, r1
10040ccc:	33c0      	adds	r3, #192	@ 0xc0
10040cce:	009b      	lsls	r3, r3, #2
10040cd0:	501a      	str	r2, [r3, r0]
}
10040cd2:	e031      	b.n	10040d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040cd4:	4a1b      	ldr	r2, [pc, #108]	@ (10040d44 <__NVIC_SetPriority+0xd8>)
10040cd6:	1dfb      	adds	r3, r7, #7
10040cd8:	781b      	ldrb	r3, [r3, #0]
10040cda:	0019      	movs	r1, r3
10040cdc:	230f      	movs	r3, #15
10040cde:	400b      	ands	r3, r1
10040ce0:	3b08      	subs	r3, #8
10040ce2:	089b      	lsrs	r3, r3, #2
10040ce4:	3306      	adds	r3, #6
10040ce6:	009b      	lsls	r3, r3, #2
10040ce8:	18d3      	adds	r3, r2, r3
10040cea:	3304      	adds	r3, #4
10040cec:	681b      	ldr	r3, [r3, #0]
10040cee:	1dfa      	adds	r2, r7, #7
10040cf0:	7812      	ldrb	r2, [r2, #0]
10040cf2:	0011      	movs	r1, r2
10040cf4:	2203      	movs	r2, #3
10040cf6:	400a      	ands	r2, r1
10040cf8:	00d2      	lsls	r2, r2, #3
10040cfa:	21ff      	movs	r1, #255	@ 0xff
10040cfc:	4091      	lsls	r1, r2
10040cfe:	000a      	movs	r2, r1
10040d00:	43d2      	mvns	r2, r2
10040d02:	401a      	ands	r2, r3
10040d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040d06:	683b      	ldr	r3, [r7, #0]
10040d08:	019b      	lsls	r3, r3, #6
10040d0a:	22ff      	movs	r2, #255	@ 0xff
10040d0c:	401a      	ands	r2, r3
10040d0e:	1dfb      	adds	r3, r7, #7
10040d10:	781b      	ldrb	r3, [r3, #0]
10040d12:	0018      	movs	r0, r3
10040d14:	2303      	movs	r3, #3
10040d16:	4003      	ands	r3, r0
10040d18:	00db      	lsls	r3, r3, #3
10040d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040d1c:	4809      	ldr	r0, [pc, #36]	@ (10040d44 <__NVIC_SetPriority+0xd8>)
10040d1e:	1dfb      	adds	r3, r7, #7
10040d20:	781b      	ldrb	r3, [r3, #0]
10040d22:	001c      	movs	r4, r3
10040d24:	230f      	movs	r3, #15
10040d26:	4023      	ands	r3, r4
10040d28:	3b08      	subs	r3, #8
10040d2a:	089b      	lsrs	r3, r3, #2
10040d2c:	430a      	orrs	r2, r1
10040d2e:	3306      	adds	r3, #6
10040d30:	009b      	lsls	r3, r3, #2
10040d32:	18c3      	adds	r3, r0, r3
10040d34:	3304      	adds	r3, #4
10040d36:	601a      	str	r2, [r3, #0]
}
10040d38:	46c0      	nop			@ (mov r8, r8)
10040d3a:	46bd      	mov	sp, r7
10040d3c:	b003      	add	sp, #12
10040d3e:	bd90      	pop	{r4, r7, pc}
10040d40:	e000e100 	.word	0xe000e100
10040d44:	e000ed00 	.word	0xe000ed00

10040d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10040d48:	b580      	push	{r7, lr}
10040d4a:	b082      	sub	sp, #8
10040d4c:	af00      	add	r7, sp, #0
10040d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10040d50:	687b      	ldr	r3, [r7, #4]
10040d52:	1e5a      	subs	r2, r3, #1
10040d54:	2380      	movs	r3, #128	@ 0x80
10040d56:	045b      	lsls	r3, r3, #17
10040d58:	429a      	cmp	r2, r3
10040d5a:	d301      	bcc.n	10040d60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10040d5c:	2301      	movs	r3, #1
10040d5e:	e010      	b.n	10040d82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10040d60:	4b0a      	ldr	r3, [pc, #40]	@ (10040d8c <SysTick_Config+0x44>)
10040d62:	687a      	ldr	r2, [r7, #4]
10040d64:	3a01      	subs	r2, #1
10040d66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10040d68:	2301      	movs	r3, #1
10040d6a:	425b      	negs	r3, r3
10040d6c:	2103      	movs	r1, #3
10040d6e:	0018      	movs	r0, r3
10040d70:	f7ff ff7c 	bl	10040c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10040d74:	4b05      	ldr	r3, [pc, #20]	@ (10040d8c <SysTick_Config+0x44>)
10040d76:	2200      	movs	r2, #0
10040d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10040d7a:	4b04      	ldr	r3, [pc, #16]	@ (10040d8c <SysTick_Config+0x44>)
10040d7c:	2207      	movs	r2, #7
10040d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10040d80:	2300      	movs	r3, #0
}
10040d82:	0018      	movs	r0, r3
10040d84:	46bd      	mov	sp, r7
10040d86:	b002      	add	sp, #8
10040d88:	bd80      	pop	{r7, pc}
10040d8a:	46c0      	nop			@ (mov r8, r8)
10040d8c:	e000e010 	.word	0xe000e010

10040d90 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10040d90:	b580      	push	{r7, lr}
10040d92:	b084      	sub	sp, #16
10040d94:	af00      	add	r7, sp, #0
10040d96:	60b9      	str	r1, [r7, #8]
10040d98:	607a      	str	r2, [r7, #4]
10040d9a:	210f      	movs	r1, #15
10040d9c:	187b      	adds	r3, r7, r1
10040d9e:	1c02      	adds	r2, r0, #0
10040da0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10040da2:	68ba      	ldr	r2, [r7, #8]
10040da4:	187b      	adds	r3, r7, r1
10040da6:	781b      	ldrb	r3, [r3, #0]
10040da8:	b25b      	sxtb	r3, r3
10040daa:	0011      	movs	r1, r2
10040dac:	0018      	movs	r0, r3
10040dae:	f7ff ff5d 	bl	10040c6c <__NVIC_SetPriority>
}
10040db2:	46c0      	nop			@ (mov r8, r8)
10040db4:	46bd      	mov	sp, r7
10040db6:	b004      	add	sp, #16
10040db8:	bd80      	pop	{r7, pc}

10040dba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10040dba:	b580      	push	{r7, lr}
10040dbc:	b082      	sub	sp, #8
10040dbe:	af00      	add	r7, sp, #0
10040dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10040dc2:	687b      	ldr	r3, [r7, #4]
10040dc4:	0018      	movs	r0, r3
10040dc6:	f7ff ffbf 	bl	10040d48 <SysTick_Config>
10040dca:	0003      	movs	r3, r0
}
10040dcc:	0018      	movs	r0, r3
10040dce:	46bd      	mov	sp, r7
10040dd0:	b002      	add	sp, #8
10040dd2:	bd80      	pop	{r7, pc}

10040dd4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10040dd4:	b580      	push	{r7, lr}
10040dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10040dd8:	4b07      	ldr	r3, [pc, #28]	@ (10040df8 <LL_RCC_HSE_IsReady+0x24>)
10040dda:	681a      	ldr	r2, [r3, #0]
10040ddc:	2380      	movs	r3, #128	@ 0x80
10040dde:	029b      	lsls	r3, r3, #10
10040de0:	401a      	ands	r2, r3
10040de2:	2380      	movs	r3, #128	@ 0x80
10040de4:	029b      	lsls	r3, r3, #10
10040de6:	429a      	cmp	r2, r3
10040de8:	d101      	bne.n	10040dee <LL_RCC_HSE_IsReady+0x1a>
10040dea:	2301      	movs	r3, #1
10040dec:	e000      	b.n	10040df0 <LL_RCC_HSE_IsReady+0x1c>
10040dee:	2300      	movs	r3, #0
}
10040df0:	0018      	movs	r0, r3
10040df2:	46bd      	mov	sp, r7
10040df4:	bd80      	pop	{r7, pc}
10040df6:	46c0      	nop			@ (mov r8, r8)
10040df8:	48400000 	.word	0x48400000

10040dfc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10040dfc:	b580      	push	{r7, lr}
10040dfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10040e00:	4b07      	ldr	r3, [pc, #28]	@ (10040e20 <LL_RCC_HSI_Enable+0x24>)
10040e02:	689a      	ldr	r2, [r3, #8]
10040e04:	4b06      	ldr	r3, [pc, #24]	@ (10040e20 <LL_RCC_HSI_Enable+0x24>)
10040e06:	2104      	movs	r1, #4
10040e08:	438a      	bics	r2, r1
10040e0a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10040e0c:	4b04      	ldr	r3, [pc, #16]	@ (10040e20 <LL_RCC_HSI_Enable+0x24>)
10040e0e:	689a      	ldr	r2, [r3, #8]
10040e10:	4b03      	ldr	r3, [pc, #12]	@ (10040e20 <LL_RCC_HSI_Enable+0x24>)
10040e12:	2102      	movs	r1, #2
10040e14:	438a      	bics	r2, r1
10040e16:	609a      	str	r2, [r3, #8]
}
10040e18:	46c0      	nop			@ (mov r8, r8)
10040e1a:	46bd      	mov	sp, r7
10040e1c:	bd80      	pop	{r7, pc}
10040e1e:	46c0      	nop			@ (mov r8, r8)
10040e20:	48400000 	.word	0x48400000

10040e24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10040e24:	b580      	push	{r7, lr}
10040e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10040e28:	4b07      	ldr	r3, [pc, #28]	@ (10040e48 <LL_RCC_HSI_IsReady+0x24>)
10040e2a:	681a      	ldr	r2, [r3, #0]
10040e2c:	2380      	movs	r3, #128	@ 0x80
10040e2e:	00db      	lsls	r3, r3, #3
10040e30:	401a      	ands	r2, r3
10040e32:	2380      	movs	r3, #128	@ 0x80
10040e34:	00db      	lsls	r3, r3, #3
10040e36:	429a      	cmp	r2, r3
10040e38:	d101      	bne.n	10040e3e <LL_RCC_HSI_IsReady+0x1a>
10040e3a:	2301      	movs	r3, #1
10040e3c:	e000      	b.n	10040e40 <LL_RCC_HSI_IsReady+0x1c>
10040e3e:	2300      	movs	r3, #0
}
10040e40:	0018      	movs	r0, r3
10040e42:	46bd      	mov	sp, r7
10040e44:	bd80      	pop	{r7, pc}
10040e46:	46c0      	nop			@ (mov r8, r8)
10040e48:	48400000 	.word	0x48400000

10040e4c <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10040e4c:	b580      	push	{r7, lr}
10040e4e:	b082      	sub	sp, #8
10040e50:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10040e52:	46c0      	nop			@ (mov r8, r8)
10040e54:	4b0f      	ldr	r3, [pc, #60]	@ (10040e94 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10040e56:	681a      	ldr	r2, [r3, #0]
10040e58:	2380      	movs	r3, #128	@ 0x80
10040e5a:	029b      	lsls	r3, r3, #10
10040e5c:	4013      	ands	r3, r2
10040e5e:	d0f9      	beq.n	10040e54 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10040e60:	4b0c      	ldr	r3, [pc, #48]	@ (10040e94 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10040e62:	689a      	ldr	r2, [r3, #8]
10040e64:	4b0b      	ldr	r3, [pc, #44]	@ (10040e94 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10040e66:	2102      	movs	r1, #2
10040e68:	430a      	orrs	r2, r1
10040e6a:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10040e6c:	2300      	movs	r3, #0
10040e6e:	607b      	str	r3, [r7, #4]
10040e70:	e003      	b.n	10040e7a <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10040e72:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10040e74:	687b      	ldr	r3, [r7, #4]
10040e76:	3301      	adds	r3, #1
10040e78:	607b      	str	r3, [r7, #4]
10040e7a:	687b      	ldr	r3, [r7, #4]
10040e7c:	2b05      	cmp	r3, #5
10040e7e:	ddf8      	ble.n	10040e72 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10040e80:	4b04      	ldr	r3, [pc, #16]	@ (10040e94 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10040e82:	689a      	ldr	r2, [r3, #8]
10040e84:	4b03      	ldr	r3, [pc, #12]	@ (10040e94 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10040e86:	2104      	movs	r1, #4
10040e88:	430a      	orrs	r2, r1
10040e8a:	609a      	str	r2, [r3, #8]
}
10040e8c:	46c0      	nop			@ (mov r8, r8)
10040e8e:	46bd      	mov	sp, r7
10040e90:	b002      	add	sp, #8
10040e92:	bd80      	pop	{r7, pc}
10040e94:	48400000 	.word	0x48400000

10040e98 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10040e98:	b580      	push	{r7, lr}
10040e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10040e9c:	4b04      	ldr	r3, [pc, #16]	@ (10040eb0 <LL_RCC_RC64MPLL_Enable+0x18>)
10040e9e:	681a      	ldr	r2, [r3, #0]
10040ea0:	4b03      	ldr	r3, [pc, #12]	@ (10040eb0 <LL_RCC_RC64MPLL_Enable+0x18>)
10040ea2:	2180      	movs	r1, #128	@ 0x80
10040ea4:	0189      	lsls	r1, r1, #6
10040ea6:	430a      	orrs	r2, r1
10040ea8:	601a      	str	r2, [r3, #0]
}
10040eaa:	46c0      	nop			@ (mov r8, r8)
10040eac:	46bd      	mov	sp, r7
10040eae:	bd80      	pop	{r7, pc}
10040eb0:	48400000 	.word	0x48400000

10040eb4 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10040eb4:	b580      	push	{r7, lr}
10040eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10040eb8:	4b04      	ldr	r3, [pc, #16]	@ (10040ecc <LL_RCC_RC64MPLL_Disable+0x18>)
10040eba:	681a      	ldr	r2, [r3, #0]
10040ebc:	4b03      	ldr	r3, [pc, #12]	@ (10040ecc <LL_RCC_RC64MPLL_Disable+0x18>)
10040ebe:	4904      	ldr	r1, [pc, #16]	@ (10040ed0 <LL_RCC_RC64MPLL_Disable+0x1c>)
10040ec0:	400a      	ands	r2, r1
10040ec2:	601a      	str	r2, [r3, #0]
}
10040ec4:	46c0      	nop			@ (mov r8, r8)
10040ec6:	46bd      	mov	sp, r7
10040ec8:	bd80      	pop	{r7, pc}
10040eca:	46c0      	nop			@ (mov r8, r8)
10040ecc:	48400000 	.word	0x48400000
10040ed0:	ffffdfff 	.word	0xffffdfff

10040ed4 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10040ed4:	b580      	push	{r7, lr}
10040ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10040ed8:	4b07      	ldr	r3, [pc, #28]	@ (10040ef8 <LL_RCC_RC64MPLL_IsReady+0x24>)
10040eda:	681a      	ldr	r2, [r3, #0]
10040edc:	2380      	movs	r3, #128	@ 0x80
10040ede:	01db      	lsls	r3, r3, #7
10040ee0:	401a      	ands	r2, r3
10040ee2:	2380      	movs	r3, #128	@ 0x80
10040ee4:	01db      	lsls	r3, r3, #7
10040ee6:	429a      	cmp	r2, r3
10040ee8:	d101      	bne.n	10040eee <LL_RCC_RC64MPLL_IsReady+0x1a>
10040eea:	2301      	movs	r3, #1
10040eec:	e000      	b.n	10040ef0 <LL_RCC_RC64MPLL_IsReady+0x1c>
10040eee:	2300      	movs	r3, #0
}
10040ef0:	0018      	movs	r0, r3
10040ef2:	46bd      	mov	sp, r7
10040ef4:	bd80      	pop	{r7, pc}
10040ef6:	46c0      	nop			@ (mov r8, r8)
10040ef8:	48400000 	.word	0x48400000

10040efc <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10040efc:	b580      	push	{r7, lr}
10040efe:	b082      	sub	sp, #8
10040f00:	af00      	add	r7, sp, #0
10040f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10040f04:	4b06      	ldr	r3, [pc, #24]	@ (10040f20 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10040f06:	689b      	ldr	r3, [r3, #8]
10040f08:	22e0      	movs	r2, #224	@ 0xe0
10040f0a:	4393      	bics	r3, r2
10040f0c:	0019      	movs	r1, r3
10040f0e:	4b04      	ldr	r3, [pc, #16]	@ (10040f20 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10040f10:	687a      	ldr	r2, [r7, #4]
10040f12:	430a      	orrs	r2, r1
10040f14:	609a      	str	r2, [r3, #8]
}
10040f16:	46c0      	nop			@ (mov r8, r8)
10040f18:	46bd      	mov	sp, r7
10040f1a:	b002      	add	sp, #8
10040f1c:	bd80      	pop	{r7, pc}
10040f1e:	46c0      	nop			@ (mov r8, r8)
10040f20:	48400000 	.word	0x48400000

10040f24 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10040f24:	b580      	push	{r7, lr}
10040f26:	b084      	sub	sp, #16
10040f28:	af00      	add	r7, sp, #0
10040f2a:	6078      	str	r0, [r7, #4]
10040f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10040f2e:	687b      	ldr	r3, [r7, #4]
10040f30:	2b00      	cmp	r3, #0
10040f32:	d101      	bne.n	10040f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10040f34:	2301      	movs	r3, #1
10040f36:	e098      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10040f38:	4b4e      	ldr	r3, [pc, #312]	@ (10041074 <HAL_RCC_ClockConfig+0x150>)
10040f3a:	685b      	ldr	r3, [r3, #4]
10040f3c:	2230      	movs	r2, #48	@ 0x30
10040f3e:	4393      	bics	r3, r2
10040f40:	0019      	movs	r1, r3
10040f42:	4b4c      	ldr	r3, [pc, #304]	@ (10041074 <HAL_RCC_ClockConfig+0x150>)
10040f44:	683a      	ldr	r2, [r7, #0]
10040f46:	430a      	orrs	r2, r1
10040f48:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10040f4a:	687b      	ldr	r3, [r7, #4]
10040f4c:	681b      	ldr	r3, [r3, #0]
10040f4e:	2b02      	cmp	r3, #2
10040f50:	d10e      	bne.n	10040f70 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10040f52:	f7ff ff53 	bl	10040dfc <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10040f56:	f7ff ff65 	bl	10040e24 <LL_RCC_HSI_IsReady>
10040f5a:	1e03      	subs	r3, r0, #0
10040f5c:	d101      	bne.n	10040f62 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10040f5e:	2301      	movs	r3, #1
10040f60:	e083      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10040f62:	f7ff ffa7 	bl	10040eb4 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10040f66:	687b      	ldr	r3, [r7, #4]
10040f68:	685b      	ldr	r3, [r3, #4]
10040f6a:	0018      	movs	r0, r3
10040f6c:	f7ff ffc6 	bl	10040efc <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10040f70:	687b      	ldr	r3, [r7, #4]
10040f72:	681b      	ldr	r3, [r3, #0]
10040f74:	2b00      	cmp	r3, #0
10040f76:	d124      	bne.n	10040fc2 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10040f78:	f7ff ff54 	bl	10040e24 <LL_RCC_HSI_IsReady>
10040f7c:	1e03      	subs	r3, r0, #0
10040f7e:	d101      	bne.n	10040f84 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10040f80:	2301      	movs	r3, #1
10040f82:	e072      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10040f84:	f7ff ff26 	bl	10040dd4 <LL_RCC_HSE_IsReady>
10040f88:	1e03      	subs	r3, r0, #0
10040f8a:	d101      	bne.n	10040f90 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10040f8c:	2301      	movs	r3, #1
10040f8e:	e06c      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10040f90:	f7ff ff82 	bl	10040e98 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10040f94:	f7ff fe56 	bl	10040c44 <HAL_GetTick>
10040f98:	0003      	movs	r3, r0
10040f9a:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10040f9c:	e008      	b.n	10040fb0 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10040f9e:	f7ff fe51 	bl	10040c44 <HAL_GetTick>
10040fa2:	0002      	movs	r2, r0
10040fa4:	68fb      	ldr	r3, [r7, #12]
10040fa6:	1ad3      	subs	r3, r2, r3
10040fa8:	2b02      	cmp	r3, #2
10040faa:	d901      	bls.n	10040fb0 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10040fac:	2303      	movs	r3, #3
10040fae:	e05c      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10040fb0:	f7ff ff90 	bl	10040ed4 <LL_RCC_RC64MPLL_IsReady>
10040fb4:	1e03      	subs	r3, r0, #0
10040fb6:	d0f2      	beq.n	10040f9e <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10040fb8:	687b      	ldr	r3, [r7, #4]
10040fba:	685b      	ldr	r3, [r3, #4]
10040fbc:	0018      	movs	r0, r3
10040fbe:	f7ff ff9d 	bl	10040efc <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10040fc2:	687b      	ldr	r3, [r7, #4]
10040fc4:	681b      	ldr	r3, [r3, #0]
10040fc6:	2b01      	cmp	r3, #1
10040fc8:	d117      	bne.n	10040ffa <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10040fca:	f7ff ff3f 	bl	10040e4c <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10040fce:	f7ff ff29 	bl	10040e24 <LL_RCC_HSI_IsReady>
10040fd2:	1e03      	subs	r3, r0, #0
10040fd4:	d001      	beq.n	10040fda <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10040fd6:	2301      	movs	r3, #1
10040fd8:	e047      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10040fda:	f7ff fefb 	bl	10040dd4 <LL_RCC_HSE_IsReady>
10040fde:	1e03      	subs	r3, r0, #0
10040fe0:	d101      	bne.n	10040fe6 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10040fe2:	2301      	movs	r3, #1
10040fe4:	e041      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10040fe6:	4b24      	ldr	r3, [pc, #144]	@ (10041078 <HAL_RCC_ClockConfig+0x154>)
10040fe8:	689b      	ldr	r3, [r3, #8]
10040fea:	22e0      	movs	r2, #224	@ 0xe0
10040fec:	4393      	bics	r3, r2
10040fee:	0019      	movs	r1, r3
10040ff0:	687b      	ldr	r3, [r7, #4]
10040ff2:	685a      	ldr	r2, [r3, #4]
10040ff4:	4b20      	ldr	r3, [pc, #128]	@ (10041078 <HAL_RCC_ClockConfig+0x154>)
10040ff6:	430a      	orrs	r2, r1
10040ff8:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10040ffa:	4b1e      	ldr	r3, [pc, #120]	@ (10041074 <HAL_RCC_ClockConfig+0x150>)
10040ffc:	685b      	ldr	r3, [r3, #4]
10040ffe:	2230      	movs	r2, #48	@ 0x30
10041000:	4013      	ands	r3, r2
10041002:	683a      	ldr	r2, [r7, #0]
10041004:	429a      	cmp	r2, r3
10041006:	d01d      	beq.n	10041044 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10041008:	4b1a      	ldr	r3, [pc, #104]	@ (10041074 <HAL_RCC_ClockConfig+0x150>)
1004100a:	685b      	ldr	r3, [r3, #4]
1004100c:	2230      	movs	r2, #48	@ 0x30
1004100e:	4393      	bics	r3, r2
10041010:	0019      	movs	r1, r3
10041012:	4b18      	ldr	r3, [pc, #96]	@ (10041074 <HAL_RCC_ClockConfig+0x150>)
10041014:	683a      	ldr	r2, [r7, #0]
10041016:	430a      	orrs	r2, r1
10041018:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004101a:	f7ff fe13 	bl	10040c44 <HAL_GetTick>
1004101e:	0003      	movs	r3, r0
10041020:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10041022:	e008      	b.n	10041036 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10041024:	f7ff fe0e 	bl	10040c44 <HAL_GetTick>
10041028:	0002      	movs	r2, r0
1004102a:	68fb      	ldr	r3, [r7, #12]
1004102c:	1ad3      	subs	r3, r2, r3
1004102e:	2b02      	cmp	r3, #2
10041030:	d901      	bls.n	10041036 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10041032:	2303      	movs	r3, #3
10041034:	e019      	b.n	1004106a <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10041036:	4b0f      	ldr	r3, [pc, #60]	@ (10041074 <HAL_RCC_ClockConfig+0x150>)
10041038:	685b      	ldr	r3, [r3, #4]
1004103a:	2230      	movs	r2, #48	@ 0x30
1004103c:	4013      	ands	r3, r2
1004103e:	683a      	ldr	r2, [r7, #0]
10041040:	429a      	cmp	r2, r3
10041042:	d1ef      	bne.n	10041024 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10041044:	2300      	movs	r3, #0
10041046:	60bb      	str	r3, [r7, #8]
10041048:	e003      	b.n	10041052 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004104a:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004104c:	68bb      	ldr	r3, [r7, #8]
1004104e:	3301      	adds	r3, #1
10041050:	60bb      	str	r3, [r7, #8]
10041052:	68bb      	ldr	r3, [r7, #8]
10041054:	2b05      	cmp	r3, #5
10041056:	ddf8      	ble.n	1004104a <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10041058:	f7ff fd2e 	bl	10040ab8 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004105c:	f7ff fdfc 	bl	10040c58 <HAL_GetTickPrio>
10041060:	0003      	movs	r3, r0
10041062:	0018      	movs	r0, r3
10041064:	f7ff fd94 	bl	10040b90 <HAL_InitTick>
10041068:	0003      	movs	r3, r0
}
1004106a:	0018      	movs	r0, r3
1004106c:	46bd      	mov	sp, r7
1004106e:	b004      	add	sp, #16
10041070:	bd80      	pop	{r7, pc}
10041072:	46c0      	nop			@ (mov r8, r8)
10041074:	40001000 	.word	0x40001000
10041078:	48400000 	.word	0x48400000

1004107c <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004107c:	b580      	push	{r7, lr}
1004107e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10041080:	4b02      	ldr	r3, [pc, #8]	@ (1004108c <HAL_RCC_GetSysClockFreq+0x10>)
10041082:	681b      	ldr	r3, [r3, #0]
}
10041084:	0018      	movs	r0, r3
10041086:	46bd      	mov	sp, r7
10041088:	bd80      	pop	{r7, pc}
1004108a:	46c0      	nop			@ (mov r8, r8)
1004108c:	20000158 	.word	0x20000158

10041090 <LL_RCC_HSE_IsReady>:
{
10041090:	b580      	push	{r7, lr}
10041092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10041094:	4b07      	ldr	r3, [pc, #28]	@ (100410b4 <LL_RCC_HSE_IsReady+0x24>)
10041096:	681a      	ldr	r2, [r3, #0]
10041098:	2380      	movs	r3, #128	@ 0x80
1004109a:	029b      	lsls	r3, r3, #10
1004109c:	401a      	ands	r2, r3
1004109e:	2380      	movs	r3, #128	@ 0x80
100410a0:	029b      	lsls	r3, r3, #10
100410a2:	429a      	cmp	r2, r3
100410a4:	d101      	bne.n	100410aa <LL_RCC_HSE_IsReady+0x1a>
100410a6:	2301      	movs	r3, #1
100410a8:	e000      	b.n	100410ac <LL_RCC_HSE_IsReady+0x1c>
100410aa:	2300      	movs	r3, #0
}
100410ac:	0018      	movs	r0, r3
100410ae:	46bd      	mov	sp, r7
100410b0:	bd80      	pop	{r7, pc}
100410b2:	46c0      	nop			@ (mov r8, r8)
100410b4:	48400000 	.word	0x48400000

100410b8 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
100410b8:	b580      	push	{r7, lr}
100410ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
100410bc:	4b05      	ldr	r3, [pc, #20]	@ (100410d4 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
100410be:	689b      	ldr	r3, [r3, #8]
100410c0:	2208      	movs	r2, #8
100410c2:	4013      	ands	r3, r2
100410c4:	2b08      	cmp	r3, #8
100410c6:	d101      	bne.n	100410cc <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
100410c8:	2301      	movs	r3, #1
100410ca:	e000      	b.n	100410ce <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
100410cc:	2300      	movs	r3, #0
}
100410ce:	0018      	movs	r0, r3
100410d0:	46bd      	mov	sp, r7
100410d2:	bd80      	pop	{r7, pc}
100410d4:	48400000 	.word	0x48400000

100410d8 <LL_RCC_LSCO_SetSource>:
{
100410d8:	b580      	push	{r7, lr}
100410da:	b082      	sub	sp, #8
100410dc:	af00      	add	r7, sp, #0
100410de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100410e0:	4b06      	ldr	r3, [pc, #24]	@ (100410fc <LL_RCC_LSCO_SetSource+0x24>)
100410e2:	689b      	ldr	r3, [r3, #8]
100410e4:	4a06      	ldr	r2, [pc, #24]	@ (10041100 <LL_RCC_LSCO_SetSource+0x28>)
100410e6:	4013      	ands	r3, r2
100410e8:	0019      	movs	r1, r3
100410ea:	4b04      	ldr	r3, [pc, #16]	@ (100410fc <LL_RCC_LSCO_SetSource+0x24>)
100410ec:	687a      	ldr	r2, [r7, #4]
100410ee:	430a      	orrs	r2, r1
100410f0:	609a      	str	r2, [r3, #8]
}
100410f2:	46c0      	nop			@ (mov r8, r8)
100410f4:	46bd      	mov	sp, r7
100410f6:	b002      	add	sp, #8
100410f8:	bd80      	pop	{r7, pc}
100410fa:	46c0      	nop			@ (mov r8, r8)
100410fc:	48400000 	.word	0x48400000
10041100:	fffe7fff 	.word	0xfffe7fff

10041104 <LL_RCC_LSCO_GetSource>:
{
10041104:	b580      	push	{r7, lr}
10041106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10041108:	4b03      	ldr	r3, [pc, #12]	@ (10041118 <LL_RCC_LSCO_GetSource+0x14>)
1004110a:	689a      	ldr	r2, [r3, #8]
1004110c:	23c0      	movs	r3, #192	@ 0xc0
1004110e:	025b      	lsls	r3, r3, #9
10041110:	4013      	ands	r3, r2
}
10041112:	0018      	movs	r0, r3
10041114:	46bd      	mov	sp, r7
10041116:	bd80      	pop	{r7, pc}
10041118:	48400000 	.word	0x48400000

1004111c <LL_RCC_SetRFClock>:
{
1004111c:	b580      	push	{r7, lr}
1004111e:	b082      	sub	sp, #8
10041120:	af00      	add	r7, sp, #0
10041122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10041124:	4b06      	ldr	r3, [pc, #24]	@ (10041140 <LL_RCC_SetRFClock+0x24>)
10041126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10041128:	2204      	movs	r2, #4
1004112a:	4393      	bics	r3, r2
1004112c:	0019      	movs	r1, r3
1004112e:	4b04      	ldr	r3, [pc, #16]	@ (10041140 <LL_RCC_SetRFClock+0x24>)
10041130:	687a      	ldr	r2, [r7, #4]
10041132:	430a      	orrs	r2, r1
10041134:	661a      	str	r2, [r3, #96]	@ 0x60
}
10041136:	46c0      	nop			@ (mov r8, r8)
10041138:	46bd      	mov	sp, r7
1004113a:	b002      	add	sp, #8
1004113c:	bd80      	pop	{r7, pc}
1004113e:	46c0      	nop			@ (mov r8, r8)
10041140:	48400000 	.word	0x48400000

10041144 <LL_RCC_GetRFClock>:
{
10041144:	b580      	push	{r7, lr}
10041146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10041148:	4b03      	ldr	r3, [pc, #12]	@ (10041158 <LL_RCC_GetRFClock+0x14>)
1004114a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004114c:	2204      	movs	r2, #4
1004114e:	4013      	ands	r3, r2
}
10041150:	0018      	movs	r0, r3
10041152:	46bd      	mov	sp, r7
10041154:	bd80      	pop	{r7, pc}
10041156:	46c0      	nop			@ (mov r8, r8)
10041158:	48400000 	.word	0x48400000

1004115c <LL_RCC_SetSMPSPrescaler>:
{
1004115c:	b580      	push	{r7, lr}
1004115e:	b082      	sub	sp, #8
10041160:	af00      	add	r7, sp, #0
10041162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10041164:	4b06      	ldr	r3, [pc, #24]	@ (10041180 <LL_RCC_SetSMPSPrescaler+0x24>)
10041166:	689b      	ldr	r3, [r3, #8]
10041168:	4a06      	ldr	r2, [pc, #24]	@ (10041184 <LL_RCC_SetSMPSPrescaler+0x28>)
1004116a:	4013      	ands	r3, r2
1004116c:	0019      	movs	r1, r3
1004116e:	4b04      	ldr	r3, [pc, #16]	@ (10041180 <LL_RCC_SetSMPSPrescaler+0x24>)
10041170:	687a      	ldr	r2, [r7, #4]
10041172:	430a      	orrs	r2, r1
10041174:	609a      	str	r2, [r3, #8]
}
10041176:	46c0      	nop			@ (mov r8, r8)
10041178:	46bd      	mov	sp, r7
1004117a:	b002      	add	sp, #8
1004117c:	bd80      	pop	{r7, pc}
1004117e:	46c0      	nop			@ (mov r8, r8)
10041180:	48400000 	.word	0x48400000
10041184:	ffffefff 	.word	0xffffefff

10041188 <LL_RCC_GetSMPSPrescaler>:
{
10041188:	b580      	push	{r7, lr}
1004118a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004118c:	4b03      	ldr	r3, [pc, #12]	@ (1004119c <LL_RCC_GetSMPSPrescaler+0x14>)
1004118e:	689a      	ldr	r2, [r3, #8]
10041190:	2380      	movs	r3, #128	@ 0x80
10041192:	015b      	lsls	r3, r3, #5
10041194:	4013      	ands	r3, r2
}
10041196:	0018      	movs	r0, r3
10041198:	46bd      	mov	sp, r7
1004119a:	bd80      	pop	{r7, pc}
1004119c:	48400000 	.word	0x48400000

100411a0 <LL_RCC_SetLPUARTClockSource>:
{
100411a0:	b580      	push	{r7, lr}
100411a2:	b082      	sub	sp, #8
100411a4:	af00      	add	r7, sp, #0
100411a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
100411a8:	4b06      	ldr	r3, [pc, #24]	@ (100411c4 <LL_RCC_SetLPUARTClockSource+0x24>)
100411aa:	689b      	ldr	r3, [r3, #8]
100411ac:	4a06      	ldr	r2, [pc, #24]	@ (100411c8 <LL_RCC_SetLPUARTClockSource+0x28>)
100411ae:	4013      	ands	r3, r2
100411b0:	0019      	movs	r1, r3
100411b2:	4b04      	ldr	r3, [pc, #16]	@ (100411c4 <LL_RCC_SetLPUARTClockSource+0x24>)
100411b4:	687a      	ldr	r2, [r7, #4]
100411b6:	430a      	orrs	r2, r1
100411b8:	609a      	str	r2, [r3, #8]
}
100411ba:	46c0      	nop			@ (mov r8, r8)
100411bc:	46bd      	mov	sp, r7
100411be:	b002      	add	sp, #8
100411c0:	bd80      	pop	{r7, pc}
100411c2:	46c0      	nop			@ (mov r8, r8)
100411c4:	48400000 	.word	0x48400000
100411c8:	ffffdfff 	.word	0xffffdfff

100411cc <LL_RCC_GetLPUARTClockSource>:
{
100411cc:	b580      	push	{r7, lr}
100411ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
100411d0:	4b03      	ldr	r3, [pc, #12]	@ (100411e0 <LL_RCC_GetLPUARTClockSource+0x14>)
100411d2:	689a      	ldr	r2, [r3, #8]
100411d4:	2380      	movs	r3, #128	@ 0x80
100411d6:	019b      	lsls	r3, r3, #6
100411d8:	4013      	ands	r3, r2
}
100411da:	0018      	movs	r0, r3
100411dc:	46bd      	mov	sp, r7
100411de:	bd80      	pop	{r7, pc}
100411e0:	48400000 	.word	0x48400000

100411e4 <LL_RCC_SetSPI3I2SClockSource>:
{
100411e4:	b580      	push	{r7, lr}
100411e6:	b082      	sub	sp, #8
100411e8:	af00      	add	r7, sp, #0
100411ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100411ec:	4b06      	ldr	r3, [pc, #24]	@ (10041208 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100411ee:	689b      	ldr	r3, [r3, #8]
100411f0:	4a06      	ldr	r2, [pc, #24]	@ (1004120c <LL_RCC_SetSPI3I2SClockSource+0x28>)
100411f2:	4013      	ands	r3, r2
100411f4:	0019      	movs	r1, r3
100411f6:	4b04      	ldr	r3, [pc, #16]	@ (10041208 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100411f8:	687a      	ldr	r2, [r7, #4]
100411fa:	430a      	orrs	r2, r1
100411fc:	609a      	str	r2, [r3, #8]
}
100411fe:	46c0      	nop			@ (mov r8, r8)
10041200:	46bd      	mov	sp, r7
10041202:	b002      	add	sp, #8
10041204:	bd80      	pop	{r7, pc}
10041206:	46c0      	nop			@ (mov r8, r8)
10041208:	48400000 	.word	0x48400000
1004120c:	ff3fffff 	.word	0xff3fffff

10041210 <LL_RCC_GetSPI3I2SClockSource>:
{
10041210:	b580      	push	{r7, lr}
10041212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10041214:	4b03      	ldr	r3, [pc, #12]	@ (10041224 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10041216:	689a      	ldr	r2, [r3, #8]
10041218:	23c0      	movs	r3, #192	@ 0xc0
1004121a:	041b      	lsls	r3, r3, #16
1004121c:	4013      	ands	r3, r2
}
1004121e:	0018      	movs	r0, r3
10041220:	46bd      	mov	sp, r7
10041222:	bd80      	pop	{r7, pc}
10041224:	48400000 	.word	0x48400000

10041228 <LL_RCC_RC64MPLL_IsReady>:
{
10041228:	b580      	push	{r7, lr}
1004122a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004122c:	4b07      	ldr	r3, [pc, #28]	@ (1004124c <LL_RCC_RC64MPLL_IsReady+0x24>)
1004122e:	681a      	ldr	r2, [r3, #0]
10041230:	2380      	movs	r3, #128	@ 0x80
10041232:	01db      	lsls	r3, r3, #7
10041234:	401a      	ands	r2, r3
10041236:	2380      	movs	r3, #128	@ 0x80
10041238:	01db      	lsls	r3, r3, #7
1004123a:	429a      	cmp	r2, r3
1004123c:	d101      	bne.n	10041242 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004123e:	2301      	movs	r3, #1
10041240:	e000      	b.n	10041244 <LL_RCC_RC64MPLL_IsReady+0x1c>
10041242:	2300      	movs	r3, #0
}
10041244:	0018      	movs	r0, r3
10041246:	46bd      	mov	sp, r7
10041248:	bd80      	pop	{r7, pc}
1004124a:	46c0      	nop			@ (mov r8, r8)
1004124c:	48400000 	.word	0x48400000

10041250 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10041250:	b580      	push	{r7, lr}
10041252:	b082      	sub	sp, #8
10041254:	af00      	add	r7, sp, #0
10041256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10041258:	687b      	ldr	r3, [r7, #4]
1004125a:	681b      	ldr	r3, [r3, #0]
1004125c:	2201      	movs	r2, #1
1004125e:	4013      	ands	r3, r2
10041260:	d004      	beq.n	1004126c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10041262:	687b      	ldr	r3, [r7, #4]
10041264:	691b      	ldr	r3, [r3, #16]
10041266:	0018      	movs	r0, r3
10041268:	f7ff ff58 	bl	1004111c <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004126c:	687b      	ldr	r3, [r7, #4]
1004126e:	681b      	ldr	r3, [r3, #0]
10041270:	2202      	movs	r2, #2
10041272:	4013      	ands	r3, r2
10041274:	d004      	beq.n	10041280 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10041276:	687b      	ldr	r3, [r7, #4]
10041278:	695b      	ldr	r3, [r3, #20]
1004127a:	0018      	movs	r0, r3
1004127c:	f7ff ff6e 	bl	1004115c <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10041280:	687b      	ldr	r3, [r7, #4]
10041282:	681b      	ldr	r3, [r3, #0]
10041284:	2208      	movs	r2, #8
10041286:	4013      	ands	r3, r2
10041288:	d004      	beq.n	10041294 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004128a:	687b      	ldr	r3, [r7, #4]
1004128c:	685b      	ldr	r3, [r3, #4]
1004128e:	0018      	movs	r0, r3
10041290:	f7ff ffa8 	bl	100411e4 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10041294:	687b      	ldr	r3, [r7, #4]
10041296:	681b      	ldr	r3, [r3, #0]
10041298:	2210      	movs	r2, #16
1004129a:	4013      	ands	r3, r2
1004129c:	d004      	beq.n	100412a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004129e:	687b      	ldr	r3, [r7, #4]
100412a0:	68db      	ldr	r3, [r3, #12]
100412a2:	0018      	movs	r0, r3
100412a4:	f7ff ff7c 	bl	100411a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
100412a8:	687b      	ldr	r3, [r7, #4]
100412aa:	689b      	ldr	r3, [r3, #8]
100412ac:	2220      	movs	r2, #32
100412ae:	4013      	ands	r3, r2
100412b0:	d004      	beq.n	100412bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
100412b2:	687b      	ldr	r3, [r7, #4]
100412b4:	689b      	ldr	r3, [r3, #8]
100412b6:	0018      	movs	r0, r3
100412b8:	f7ff ff0e 	bl	100410d8 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
100412bc:	2300      	movs	r3, #0
}
100412be:	0018      	movs	r0, r3
100412c0:	46bd      	mov	sp, r7
100412c2:	b002      	add	sp, #8
100412c4:	bd80      	pop	{r7, pc}
	...

100412c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
100412c8:	b580      	push	{r7, lr}
100412ca:	b084      	sub	sp, #16
100412cc:	af00      	add	r7, sp, #0
100412ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
100412d0:	2300      	movs	r3, #0
100412d2:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
100412d4:	687b      	ldr	r3, [r7, #4]
100412d6:	2b20      	cmp	r3, #32
100412d8:	d900      	bls.n	100412dc <HAL_RCCEx_GetPeriphCLKFreq+0x14>
100412da:	e07b      	b.n	100413d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
100412dc:	687b      	ldr	r3, [r7, #4]
100412de:	009a      	lsls	r2, r3, #2
100412e0:	4b40      	ldr	r3, [pc, #256]	@ (100413e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
100412e2:	18d3      	adds	r3, r2, r3
100412e4:	681b      	ldr	r3, [r3, #0]
100412e6:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
100412e8:	f7ff ff2c 	bl	10041144 <LL_RCC_GetRFClock>
100412ec:	1e03      	subs	r3, r0, #0
100412ee:	d002      	beq.n	100412f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
100412f0:	2b04      	cmp	r3, #4
100412f2:	d003      	beq.n	100412fc <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
100412f4:	e071      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
100412f6:	4b3c      	ldr	r3, [pc, #240]	@ (100413e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
100412f8:	60fb      	str	r3, [r7, #12]
          break;
100412fa:	e002      	b.n	10041302 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
100412fc:	4b3b      	ldr	r3, [pc, #236]	@ (100413ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
100412fe:	60fb      	str	r3, [r7, #12]
          break;
10041300:	46c0      	nop			@ (mov r8, r8)
      break;
10041302:	e06a      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
10041304:	f7ff ff40 	bl	10041188 <LL_RCC_GetSMPSPrescaler>
10041308:	1e03      	subs	r3, r0, #0
1004130a:	d004      	beq.n	10041316 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004130c:	2280      	movs	r2, #128	@ 0x80
1004130e:	0152      	lsls	r2, r2, #5
10041310:	4293      	cmp	r3, r2
10041312:	d003      	beq.n	1004131c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
10041314:	e061      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
10041316:	4b36      	ldr	r3, [pc, #216]	@ (100413f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10041318:	60fb      	str	r3, [r7, #12]
          break;
1004131a:	e002      	b.n	10041322 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004131c:	4b35      	ldr	r3, [pc, #212]	@ (100413f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004131e:	60fb      	str	r3, [r7, #12]
          break;
10041320:	46c0      	nop			@ (mov r8, r8)
      break;
10041322:	e05a      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
10041324:	f7ff fec8 	bl	100410b8 <LL_RCC_DIRECT_HSE_IsEnabled>
10041328:	1e03      	subs	r3, r0, #0
1004132a:	d005      	beq.n	10041338 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004132c:	f7ff feb0 	bl	10041090 <LL_RCC_HSE_IsReady>
10041330:	1e03      	subs	r3, r0, #0
10041332:	d107      	bne.n	10041344 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10041334:	2300      	movs	r3, #0
10041336:	e051      	b.n	100413dc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10041338:	f7ff ff76 	bl	10041228 <LL_RCC_RC64MPLL_IsReady>
1004133c:	1e03      	subs	r3, r0, #0
1004133e:	d101      	bne.n	10041344 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10041340:	2300      	movs	r3, #0
10041342:	e04b      	b.n	100413dc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10041344:	f7ff ff64 	bl	10041210 <LL_RCC_GetSPI3I2SClockSource>
10041348:	0003      	movs	r3, r0
1004134a:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004134c:	68bb      	ldr	r3, [r7, #8]
1004134e:	2b00      	cmp	r3, #0
10041350:	d101      	bne.n	10041356 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
10041352:	4b26      	ldr	r3, [pc, #152]	@ (100413ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10041354:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
10041356:	68ba      	ldr	r2, [r7, #8]
10041358:	2380      	movs	r3, #128	@ 0x80
1004135a:	03db      	lsls	r3, r3, #15
1004135c:	429a      	cmp	r2, r3
1004135e:	d101      	bne.n	10041364 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10041360:	4b21      	ldr	r3, [pc, #132]	@ (100413e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10041362:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10041364:	68ba      	ldr	r2, [r7, #8]
10041366:	2380      	movs	r3, #128	@ 0x80
10041368:	041b      	lsls	r3, r3, #16
1004136a:	429a      	cmp	r2, r3
1004136c:	d134      	bne.n	100413d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004136e:	4b22      	ldr	r3, [pc, #136]	@ (100413f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10041370:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10041372:	e031      	b.n	100413d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10041374:	f7ff ff2a 	bl	100411cc <LL_RCC_GetLPUARTClockSource>
10041378:	0002      	movs	r2, r0
1004137a:	2380      	movs	r3, #128	@ 0x80
1004137c:	019b      	lsls	r3, r3, #6
1004137e:	429a      	cmp	r2, r3
10041380:	d103      	bne.n	1004138a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10041382:	2380      	movs	r3, #128	@ 0x80
10041384:	021b      	lsls	r3, r3, #8
10041386:	60fb      	str	r3, [r7, #12]
          break;
10041388:	e002      	b.n	10041390 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004138a:	4b18      	ldr	r3, [pc, #96]	@ (100413ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004138c:	60fb      	str	r3, [r7, #12]
          break;
1004138e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10041390:	e023      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10041392:	f7ff feb7 	bl	10041104 <LL_RCC_LSCO_GetSource>
10041396:	0003      	movs	r3, r0
10041398:	22c0      	movs	r2, #192	@ 0xc0
1004139a:	0252      	lsls	r2, r2, #9
1004139c:	4293      	cmp	r3, r2
1004139e:	d014      	beq.n	100413ca <HAL_RCCEx_GetPeriphCLKFreq+0x102>
100413a0:	22c0      	movs	r2, #192	@ 0xc0
100413a2:	0252      	lsls	r2, r2, #9
100413a4:	4293      	cmp	r3, r2
100413a6:	d813      	bhi.n	100413d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
100413a8:	2280      	movs	r2, #128	@ 0x80
100413aa:	0212      	lsls	r2, r2, #8
100413ac:	4293      	cmp	r3, r2
100413ae:	d004      	beq.n	100413ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
100413b0:	2280      	movs	r2, #128	@ 0x80
100413b2:	0252      	lsls	r2, r2, #9
100413b4:	4293      	cmp	r3, r2
100413b6:	d004      	beq.n	100413c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
100413b8:	e00a      	b.n	100413d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
100413ba:	2380      	movs	r3, #128	@ 0x80
100413bc:	021b      	lsls	r3, r3, #8
100413be:	60fb      	str	r3, [r7, #12]
          break;
100413c0:	e007      	b.n	100413d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
100413c2:	23fa      	movs	r3, #250	@ 0xfa
100413c4:	01db      	lsls	r3, r3, #7
100413c6:	60fb      	str	r3, [r7, #12]
          break;
100413c8:	e003      	b.n	100413d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
100413ca:	4b0c      	ldr	r3, [pc, #48]	@ (100413fc <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
100413cc:	60fb      	str	r3, [r7, #12]
          break;
100413ce:	e000      	b.n	100413d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
100413d0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
100413d2:	e002      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
100413d4:	46c0      	nop			@ (mov r8, r8)
100413d6:	e000      	b.n	100413da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
100413d8:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
100413da:	68fb      	ldr	r3, [r7, #12]
}
100413dc:	0018      	movs	r0, r3
100413de:	46bd      	mov	sp, r7
100413e0:	b004      	add	sp, #16
100413e2:	bd80      	pop	{r7, pc}
100413e4:	10041dcc 	.word	0x10041dcc
100413e8:	01e84800 	.word	0x01e84800
100413ec:	00f42400 	.word	0x00f42400
100413f0:	007a1200 	.word	0x007a1200
100413f4:	003d0900 	.word	0x003d0900
100413f8:	03d09000 	.word	0x03d09000
100413fc:	00007a12 	.word	0x00007a12

10041400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10041400:	b580      	push	{r7, lr}
10041402:	b082      	sub	sp, #8
10041404:	af00      	add	r7, sp, #0
10041406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10041408:	687b      	ldr	r3, [r7, #4]
1004140a:	2b00      	cmp	r3, #0
1004140c:	d101      	bne.n	10041412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004140e:	2301      	movs	r3, #1
10041410:	e046      	b.n	100414a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10041412:	687b      	ldr	r3, [r7, #4]
10041414:	2288      	movs	r2, #136	@ 0x88
10041416:	589b      	ldr	r3, [r3, r2]
10041418:	2b00      	cmp	r3, #0
1004141a:	d107      	bne.n	1004142c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004141c:	687b      	ldr	r3, [r7, #4]
1004141e:	2284      	movs	r2, #132	@ 0x84
10041420:	2100      	movs	r1, #0
10041422:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10041424:	687b      	ldr	r3, [r7, #4]
10041426:	0018      	movs	r0, r3
10041428:	f000 f840 	bl	100414ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004142c:	687b      	ldr	r3, [r7, #4]
1004142e:	2288      	movs	r2, #136	@ 0x88
10041430:	2124      	movs	r1, #36	@ 0x24
10041432:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10041434:	687b      	ldr	r3, [r7, #4]
10041436:	681b      	ldr	r3, [r3, #0]
10041438:	681a      	ldr	r2, [r3, #0]
1004143a:	687b      	ldr	r3, [r7, #4]
1004143c:	681b      	ldr	r3, [r3, #0]
1004143e:	2101      	movs	r1, #1
10041440:	438a      	bics	r2, r1
10041442:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10041444:	687b      	ldr	r3, [r7, #4]
10041446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041448:	2b00      	cmp	r3, #0
1004144a:	d003      	beq.n	10041454 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
1004144c:	687b      	ldr	r3, [r7, #4]
1004144e:	0018      	movs	r0, r3
10041450:	f000 f99c 	bl	1004178c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10041454:	687b      	ldr	r3, [r7, #4]
10041456:	0018      	movs	r0, r3
10041458:	f000 f830 	bl	100414bc <UART_SetConfig>
1004145c:	0003      	movs	r3, r0
1004145e:	2b01      	cmp	r3, #1
10041460:	d101      	bne.n	10041466 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10041462:	2301      	movs	r3, #1
10041464:	e01c      	b.n	100414a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10041466:	687b      	ldr	r3, [r7, #4]
10041468:	681b      	ldr	r3, [r3, #0]
1004146a:	685a      	ldr	r2, [r3, #4]
1004146c:	687b      	ldr	r3, [r7, #4]
1004146e:	681b      	ldr	r3, [r3, #0]
10041470:	490d      	ldr	r1, [pc, #52]	@ (100414a8 <HAL_UART_Init+0xa8>)
10041472:	400a      	ands	r2, r1
10041474:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10041476:	687b      	ldr	r3, [r7, #4]
10041478:	681b      	ldr	r3, [r3, #0]
1004147a:	689a      	ldr	r2, [r3, #8]
1004147c:	687b      	ldr	r3, [r7, #4]
1004147e:	681b      	ldr	r3, [r3, #0]
10041480:	212a      	movs	r1, #42	@ 0x2a
10041482:	438a      	bics	r2, r1
10041484:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10041486:	687b      	ldr	r3, [r7, #4]
10041488:	681b      	ldr	r3, [r3, #0]
1004148a:	681a      	ldr	r2, [r3, #0]
1004148c:	687b      	ldr	r3, [r7, #4]
1004148e:	681b      	ldr	r3, [r3, #0]
10041490:	2101      	movs	r1, #1
10041492:	430a      	orrs	r2, r1
10041494:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10041496:	687b      	ldr	r3, [r7, #4]
10041498:	0018      	movs	r0, r3
1004149a:	f000 fa2b 	bl	100418f4 <UART_CheckIdleState>
1004149e:	0003      	movs	r3, r0
}
100414a0:	0018      	movs	r0, r3
100414a2:	46bd      	mov	sp, r7
100414a4:	b002      	add	sp, #8
100414a6:	bd80      	pop	{r7, pc}
100414a8:	ffffb7ff 	.word	0xffffb7ff

100414ac <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
100414ac:	b580      	push	{r7, lr}
100414ae:	b082      	sub	sp, #8
100414b0:	af00      	add	r7, sp, #0
100414b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
100414b4:	46c0      	nop			@ (mov r8, r8)
100414b6:	46bd      	mov	sp, r7
100414b8:	b002      	add	sp, #8
100414ba:	bd80      	pop	{r7, pc}

100414bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
100414bc:	b5b0      	push	{r4, r5, r7, lr}
100414be:	b090      	sub	sp, #64	@ 0x40
100414c0:	af00      	add	r7, sp, #0
100414c2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
100414c4:	231b      	movs	r3, #27
100414c6:	2220      	movs	r2, #32
100414c8:	189b      	adds	r3, r3, r2
100414ca:	19db      	adds	r3, r3, r7
100414cc:	2200      	movs	r2, #0
100414ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
100414d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100414d2:	689a      	ldr	r2, [r3, #8]
100414d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100414d6:	691b      	ldr	r3, [r3, #16]
100414d8:	431a      	orrs	r2, r3
100414da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100414dc:	695b      	ldr	r3, [r3, #20]
100414de:	431a      	orrs	r2, r3
100414e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100414e2:	69db      	ldr	r3, [r3, #28]
100414e4:	4313      	orrs	r3, r2
100414e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
100414e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100414ea:	681b      	ldr	r3, [r3, #0]
100414ec:	681b      	ldr	r3, [r3, #0]
100414ee:	4aa1      	ldr	r2, [pc, #644]	@ (10041774 <UART_SetConfig+0x2b8>)
100414f0:	4013      	ands	r3, r2
100414f2:	0019      	movs	r1, r3
100414f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100414f6:	681a      	ldr	r2, [r3, #0]
100414f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100414fa:	430b      	orrs	r3, r1
100414fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
100414fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041500:	681b      	ldr	r3, [r3, #0]
10041502:	685b      	ldr	r3, [r3, #4]
10041504:	4a9c      	ldr	r2, [pc, #624]	@ (10041778 <UART_SetConfig+0x2bc>)
10041506:	4013      	ands	r3, r2
10041508:	0018      	movs	r0, r3
1004150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004150c:	68d9      	ldr	r1, [r3, #12]
1004150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041510:	681a      	ldr	r2, [r3, #0]
10041512:	0003      	movs	r3, r0
10041514:	430b      	orrs	r3, r1
10041516:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10041518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004151a:	699b      	ldr	r3, [r3, #24]
1004151c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041520:	681b      	ldr	r3, [r3, #0]
10041522:	4a96      	ldr	r2, [pc, #600]	@ (1004177c <UART_SetConfig+0x2c0>)
10041524:	4293      	cmp	r3, r2
10041526:	d004      	beq.n	10041532 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10041528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004152a:	6a1b      	ldr	r3, [r3, #32]
1004152c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004152e:	4313      	orrs	r3, r2
10041530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10041532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041534:	681b      	ldr	r3, [r3, #0]
10041536:	689b      	ldr	r3, [r3, #8]
10041538:	4a91      	ldr	r2, [pc, #580]	@ (10041780 <UART_SetConfig+0x2c4>)
1004153a:	4013      	ands	r3, r2
1004153c:	0019      	movs	r1, r3
1004153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041540:	681a      	ldr	r2, [r3, #0]
10041542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10041544:	430b      	orrs	r3, r1
10041546:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10041548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004154a:	681b      	ldr	r3, [r3, #0]
1004154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004154e:	220f      	movs	r2, #15
10041550:	4393      	bics	r3, r2
10041552:	0018      	movs	r0, r3
10041554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041556:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10041558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004155a:	681a      	ldr	r2, [r3, #0]
1004155c:	0003      	movs	r3, r0
1004155e:	430b      	orrs	r3, r1
10041560:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10041562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041564:	681b      	ldr	r3, [r3, #0]
10041566:	4a85      	ldr	r2, [pc, #532]	@ (1004177c <UART_SetConfig+0x2c0>)
10041568:	4293      	cmp	r3, r2
1004156a:	d16d      	bne.n	10041648 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004156c:	2010      	movs	r0, #16
1004156e:	f7ff feab 	bl	100412c8 <HAL_RCCEx_GetPeriphCLKFreq>
10041572:	0003      	movs	r3, r0
10041574:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10041576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10041578:	2b00      	cmp	r3, #0
1004157a:	d100      	bne.n	1004157e <UART_SetConfig+0xc2>
1004157c:	e0e3      	b.n	10041746 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10041582:	4b80      	ldr	r3, [pc, #512]	@ (10041784 <UART_SetConfig+0x2c8>)
10041584:	0052      	lsls	r2, r2, #1
10041586:	5ad3      	ldrh	r3, [r2, r3]
10041588:	0019      	movs	r1, r3
1004158a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004158c:	f7fe fd98 	bl	100400c0 <__udivsi3>
10041590:	0003      	movs	r3, r0
10041592:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10041594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041596:	685a      	ldr	r2, [r3, #4]
10041598:	0013      	movs	r3, r2
1004159a:	005b      	lsls	r3, r3, #1
1004159c:	189b      	adds	r3, r3, r2
1004159e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100415a0:	429a      	cmp	r2, r3
100415a2:	d305      	bcc.n	100415b0 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
100415a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100415a6:	685b      	ldr	r3, [r3, #4]
100415a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
100415aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100415ac:	429a      	cmp	r2, r3
100415ae:	d906      	bls.n	100415be <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
100415b0:	231b      	movs	r3, #27
100415b2:	2220      	movs	r2, #32
100415b4:	189b      	adds	r3, r3, r2
100415b6:	19db      	adds	r3, r3, r7
100415b8:	2201      	movs	r2, #1
100415ba:	701a      	strb	r2, [r3, #0]
100415bc:	e0c3      	b.n	10041746 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100415be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100415c0:	61bb      	str	r3, [r7, #24]
100415c2:	2300      	movs	r3, #0
100415c4:	61fb      	str	r3, [r7, #28]
100415c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100415c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100415ca:	4b6e      	ldr	r3, [pc, #440]	@ (10041784 <UART_SetConfig+0x2c8>)
100415cc:	0052      	lsls	r2, r2, #1
100415ce:	5ad3      	ldrh	r3, [r2, r3]
100415d0:	613b      	str	r3, [r7, #16]
100415d2:	2300      	movs	r3, #0
100415d4:	617b      	str	r3, [r7, #20]
100415d6:	693a      	ldr	r2, [r7, #16]
100415d8:	697b      	ldr	r3, [r7, #20]
100415da:	69b8      	ldr	r0, [r7, #24]
100415dc:	69f9      	ldr	r1, [r7, #28]
100415de:	f7fe fee5 	bl	100403ac <__aeabi_uldivmod>
100415e2:	0002      	movs	r2, r0
100415e4:	000b      	movs	r3, r1
100415e6:	0e11      	lsrs	r1, r2, #24
100415e8:	021d      	lsls	r5, r3, #8
100415ea:	430d      	orrs	r5, r1
100415ec:	0214      	lsls	r4, r2, #8
100415ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100415f0:	685b      	ldr	r3, [r3, #4]
100415f2:	085b      	lsrs	r3, r3, #1
100415f4:	60bb      	str	r3, [r7, #8]
100415f6:	2300      	movs	r3, #0
100415f8:	60fb      	str	r3, [r7, #12]
100415fa:	68b8      	ldr	r0, [r7, #8]
100415fc:	68f9      	ldr	r1, [r7, #12]
100415fe:	1900      	adds	r0, r0, r4
10041600:	4169      	adcs	r1, r5
10041602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041604:	685b      	ldr	r3, [r3, #4]
10041606:	603b      	str	r3, [r7, #0]
10041608:	2300      	movs	r3, #0
1004160a:	607b      	str	r3, [r7, #4]
1004160c:	683a      	ldr	r2, [r7, #0]
1004160e:	687b      	ldr	r3, [r7, #4]
10041610:	f7fe fecc 	bl	100403ac <__aeabi_uldivmod>
10041614:	0002      	movs	r2, r0
10041616:	000b      	movs	r3, r1
10041618:	0013      	movs	r3, r2
1004161a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004161c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004161e:	23c0      	movs	r3, #192	@ 0xc0
10041620:	009b      	lsls	r3, r3, #2
10041622:	429a      	cmp	r2, r3
10041624:	d309      	bcc.n	1004163a <UART_SetConfig+0x17e>
10041626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10041628:	2380      	movs	r3, #128	@ 0x80
1004162a:	035b      	lsls	r3, r3, #13
1004162c:	429a      	cmp	r2, r3
1004162e:	d204      	bcs.n	1004163a <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10041630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041632:	681b      	ldr	r3, [r3, #0]
10041634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10041636:	60da      	str	r2, [r3, #12]
10041638:	e085      	b.n	10041746 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004163a:	231b      	movs	r3, #27
1004163c:	2220      	movs	r2, #32
1004163e:	189b      	adds	r3, r3, r2
10041640:	19db      	adds	r3, r3, r7
10041642:	2201      	movs	r2, #1
10041644:	701a      	strb	r2, [r3, #0]
10041646:	e07e      	b.n	10041746 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10041648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004164a:	69da      	ldr	r2, [r3, #28]
1004164c:	2380      	movs	r3, #128	@ 0x80
1004164e:	021b      	lsls	r3, r3, #8
10041650:	429a      	cmp	r2, r3
10041652:	d148      	bne.n	100416e6 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10041654:	4b4c      	ldr	r3, [pc, #304]	@ (10041788 <UART_SetConfig+0x2cc>)
10041656:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10041658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004165a:	2b00      	cmp	r3, #0
1004165c:	d100      	bne.n	10041660 <UART_SetConfig+0x1a4>
1004165e:	e072      	b.n	10041746 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10041660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10041664:	4b47      	ldr	r3, [pc, #284]	@ (10041784 <UART_SetConfig+0x2c8>)
10041666:	0052      	lsls	r2, r2, #1
10041668:	5ad3      	ldrh	r3, [r2, r3]
1004166a:	0019      	movs	r1, r3
1004166c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004166e:	f7fe fd27 	bl	100400c0 <__udivsi3>
10041672:	0003      	movs	r3, r0
10041674:	005a      	lsls	r2, r3, #1
10041676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041678:	685b      	ldr	r3, [r3, #4]
1004167a:	085b      	lsrs	r3, r3, #1
1004167c:	18d2      	adds	r2, r2, r3
1004167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041680:	685b      	ldr	r3, [r3, #4]
10041682:	0019      	movs	r1, r3
10041684:	0010      	movs	r0, r2
10041686:	f7fe fd1b 	bl	100400c0 <__udivsi3>
1004168a:	0003      	movs	r3, r0
1004168c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004168e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10041690:	2b0f      	cmp	r3, #15
10041692:	d921      	bls.n	100416d8 <UART_SetConfig+0x21c>
10041694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10041696:	2380      	movs	r3, #128	@ 0x80
10041698:	025b      	lsls	r3, r3, #9
1004169a:	429a      	cmp	r2, r3
1004169c:	d21c      	bcs.n	100416d8 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100416a0:	b29a      	uxth	r2, r3
100416a2:	200e      	movs	r0, #14
100416a4:	2420      	movs	r4, #32
100416a6:	1903      	adds	r3, r0, r4
100416a8:	19db      	adds	r3, r3, r7
100416aa:	210f      	movs	r1, #15
100416ac:	438a      	bics	r2, r1
100416ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
100416b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100416b2:	085b      	lsrs	r3, r3, #1
100416b4:	b29b      	uxth	r3, r3
100416b6:	2207      	movs	r2, #7
100416b8:	4013      	ands	r3, r2
100416ba:	b299      	uxth	r1, r3
100416bc:	1903      	adds	r3, r0, r4
100416be:	19db      	adds	r3, r3, r7
100416c0:	1902      	adds	r2, r0, r4
100416c2:	19d2      	adds	r2, r2, r7
100416c4:	8812      	ldrh	r2, [r2, #0]
100416c6:	430a      	orrs	r2, r1
100416c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
100416ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100416cc:	681b      	ldr	r3, [r3, #0]
100416ce:	1902      	adds	r2, r0, r4
100416d0:	19d2      	adds	r2, r2, r7
100416d2:	8812      	ldrh	r2, [r2, #0]
100416d4:	60da      	str	r2, [r3, #12]
100416d6:	e036      	b.n	10041746 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
100416d8:	231b      	movs	r3, #27
100416da:	2220      	movs	r2, #32
100416dc:	189b      	adds	r3, r3, r2
100416de:	19db      	adds	r3, r3, r7
100416e0:	2201      	movs	r2, #1
100416e2:	701a      	strb	r2, [r3, #0]
100416e4:	e02f      	b.n	10041746 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
100416e6:	4b28      	ldr	r3, [pc, #160]	@ (10041788 <UART_SetConfig+0x2cc>)
100416e8:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
100416ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100416ec:	2b00      	cmp	r3, #0
100416ee:	d02a      	beq.n	10041746 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100416f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100416f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100416f4:	4b23      	ldr	r3, [pc, #140]	@ (10041784 <UART_SetConfig+0x2c8>)
100416f6:	0052      	lsls	r2, r2, #1
100416f8:	5ad3      	ldrh	r3, [r2, r3]
100416fa:	0019      	movs	r1, r3
100416fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100416fe:	f7fe fcdf 	bl	100400c0 <__udivsi3>
10041702:	0003      	movs	r3, r0
10041704:	001a      	movs	r2, r3
10041706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041708:	685b      	ldr	r3, [r3, #4]
1004170a:	085b      	lsrs	r3, r3, #1
1004170c:	18d2      	adds	r2, r2, r3
1004170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041710:	685b      	ldr	r3, [r3, #4]
10041712:	0019      	movs	r1, r3
10041714:	0010      	movs	r0, r2
10041716:	f7fe fcd3 	bl	100400c0 <__udivsi3>
1004171a:	0003      	movs	r3, r0
1004171c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10041720:	2b0f      	cmp	r3, #15
10041722:	d90a      	bls.n	1004173a <UART_SetConfig+0x27e>
10041724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10041726:	2380      	movs	r3, #128	@ 0x80
10041728:	025b      	lsls	r3, r3, #9
1004172a:	429a      	cmp	r2, r3
1004172c:	d205      	bcs.n	1004173a <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004172e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10041730:	b29a      	uxth	r2, r3
10041732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041734:	681b      	ldr	r3, [r3, #0]
10041736:	60da      	str	r2, [r3, #12]
10041738:	e005      	b.n	10041746 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004173a:	231b      	movs	r3, #27
1004173c:	2220      	movs	r2, #32
1004173e:	189b      	adds	r3, r3, r2
10041740:	19db      	adds	r3, r3, r7
10041742:	2201      	movs	r2, #1
10041744:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10041746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041748:	226a      	movs	r2, #106	@ 0x6a
1004174a:	2101      	movs	r1, #1
1004174c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041750:	2268      	movs	r2, #104	@ 0x68
10041752:	2101      	movs	r1, #1
10041754:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10041756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041758:	2200      	movs	r2, #0
1004175a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004175e:	2200      	movs	r2, #0
10041760:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10041762:	231b      	movs	r3, #27
10041764:	2220      	movs	r2, #32
10041766:	189b      	adds	r3, r3, r2
10041768:	19db      	adds	r3, r3, r7
1004176a:	781b      	ldrb	r3, [r3, #0]
}
1004176c:	0018      	movs	r0, r3
1004176e:	46bd      	mov	sp, r7
10041770:	b010      	add	sp, #64	@ 0x40
10041772:	bdb0      	pop	{r4, r5, r7, pc}
10041774:	cfff69f3 	.word	0xcfff69f3
10041778:	ffffcfff 	.word	0xffffcfff
1004177c:	41005000 	.word	0x41005000
10041780:	11fff4ff 	.word	0x11fff4ff
10041784:	10041e50 	.word	0x10041e50
10041788:	00f42400 	.word	0x00f42400

1004178c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004178c:	b580      	push	{r7, lr}
1004178e:	b082      	sub	sp, #8
10041790:	af00      	add	r7, sp, #0
10041792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10041794:	687b      	ldr	r3, [r7, #4]
10041796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041798:	2208      	movs	r2, #8
1004179a:	4013      	ands	r3, r2
1004179c:	d00b      	beq.n	100417b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004179e:	687b      	ldr	r3, [r7, #4]
100417a0:	681b      	ldr	r3, [r3, #0]
100417a2:	685b      	ldr	r3, [r3, #4]
100417a4:	4a4a      	ldr	r2, [pc, #296]	@ (100418d0 <UART_AdvFeatureConfig+0x144>)
100417a6:	4013      	ands	r3, r2
100417a8:	0019      	movs	r1, r3
100417aa:	687b      	ldr	r3, [r7, #4]
100417ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100417ae:	687b      	ldr	r3, [r7, #4]
100417b0:	681b      	ldr	r3, [r3, #0]
100417b2:	430a      	orrs	r2, r1
100417b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
100417b6:	687b      	ldr	r3, [r7, #4]
100417b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100417ba:	2201      	movs	r2, #1
100417bc:	4013      	ands	r3, r2
100417be:	d00b      	beq.n	100417d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
100417c0:	687b      	ldr	r3, [r7, #4]
100417c2:	681b      	ldr	r3, [r3, #0]
100417c4:	685b      	ldr	r3, [r3, #4]
100417c6:	4a43      	ldr	r2, [pc, #268]	@ (100418d4 <UART_AdvFeatureConfig+0x148>)
100417c8:	4013      	ands	r3, r2
100417ca:	0019      	movs	r1, r3
100417cc:	687b      	ldr	r3, [r7, #4]
100417ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100417d0:	687b      	ldr	r3, [r7, #4]
100417d2:	681b      	ldr	r3, [r3, #0]
100417d4:	430a      	orrs	r2, r1
100417d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
100417d8:	687b      	ldr	r3, [r7, #4]
100417da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100417dc:	2202      	movs	r2, #2
100417de:	4013      	ands	r3, r2
100417e0:	d00b      	beq.n	100417fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
100417e2:	687b      	ldr	r3, [r7, #4]
100417e4:	681b      	ldr	r3, [r3, #0]
100417e6:	685b      	ldr	r3, [r3, #4]
100417e8:	4a3b      	ldr	r2, [pc, #236]	@ (100418d8 <UART_AdvFeatureConfig+0x14c>)
100417ea:	4013      	ands	r3, r2
100417ec:	0019      	movs	r1, r3
100417ee:	687b      	ldr	r3, [r7, #4]
100417f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100417f2:	687b      	ldr	r3, [r7, #4]
100417f4:	681b      	ldr	r3, [r3, #0]
100417f6:	430a      	orrs	r2, r1
100417f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
100417fa:	687b      	ldr	r3, [r7, #4]
100417fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100417fe:	2204      	movs	r2, #4
10041800:	4013      	ands	r3, r2
10041802:	d00b      	beq.n	1004181c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10041804:	687b      	ldr	r3, [r7, #4]
10041806:	681b      	ldr	r3, [r3, #0]
10041808:	685b      	ldr	r3, [r3, #4]
1004180a:	4a34      	ldr	r2, [pc, #208]	@ (100418dc <UART_AdvFeatureConfig+0x150>)
1004180c:	4013      	ands	r3, r2
1004180e:	0019      	movs	r1, r3
10041810:	687b      	ldr	r3, [r7, #4]
10041812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10041814:	687b      	ldr	r3, [r7, #4]
10041816:	681b      	ldr	r3, [r3, #0]
10041818:	430a      	orrs	r2, r1
1004181a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004181c:	687b      	ldr	r3, [r7, #4]
1004181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041820:	2210      	movs	r2, #16
10041822:	4013      	ands	r3, r2
10041824:	d00b      	beq.n	1004183e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10041826:	687b      	ldr	r3, [r7, #4]
10041828:	681b      	ldr	r3, [r3, #0]
1004182a:	689b      	ldr	r3, [r3, #8]
1004182c:	4a2c      	ldr	r2, [pc, #176]	@ (100418e0 <UART_AdvFeatureConfig+0x154>)
1004182e:	4013      	ands	r3, r2
10041830:	0019      	movs	r1, r3
10041832:	687b      	ldr	r3, [r7, #4]
10041834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10041836:	687b      	ldr	r3, [r7, #4]
10041838:	681b      	ldr	r3, [r3, #0]
1004183a:	430a      	orrs	r2, r1
1004183c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004183e:	687b      	ldr	r3, [r7, #4]
10041840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041842:	2220      	movs	r2, #32
10041844:	4013      	ands	r3, r2
10041846:	d00b      	beq.n	10041860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10041848:	687b      	ldr	r3, [r7, #4]
1004184a:	681b      	ldr	r3, [r3, #0]
1004184c:	689b      	ldr	r3, [r3, #8]
1004184e:	4a25      	ldr	r2, [pc, #148]	@ (100418e4 <UART_AdvFeatureConfig+0x158>)
10041850:	4013      	ands	r3, r2
10041852:	0019      	movs	r1, r3
10041854:	687b      	ldr	r3, [r7, #4]
10041856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10041858:	687b      	ldr	r3, [r7, #4]
1004185a:	681b      	ldr	r3, [r3, #0]
1004185c:	430a      	orrs	r2, r1
1004185e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10041860:	687b      	ldr	r3, [r7, #4]
10041862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041864:	2240      	movs	r2, #64	@ 0x40
10041866:	4013      	ands	r3, r2
10041868:	d01d      	beq.n	100418a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004186a:	687b      	ldr	r3, [r7, #4]
1004186c:	681b      	ldr	r3, [r3, #0]
1004186e:	685b      	ldr	r3, [r3, #4]
10041870:	4a1d      	ldr	r2, [pc, #116]	@ (100418e8 <UART_AdvFeatureConfig+0x15c>)
10041872:	4013      	ands	r3, r2
10041874:	0019      	movs	r1, r3
10041876:	687b      	ldr	r3, [r7, #4]
10041878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004187a:	687b      	ldr	r3, [r7, #4]
1004187c:	681b      	ldr	r3, [r3, #0]
1004187e:	430a      	orrs	r2, r1
10041880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10041882:	687b      	ldr	r3, [r7, #4]
10041884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10041886:	2380      	movs	r3, #128	@ 0x80
10041888:	035b      	lsls	r3, r3, #13
1004188a:	429a      	cmp	r2, r3
1004188c:	d10b      	bne.n	100418a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004188e:	687b      	ldr	r3, [r7, #4]
10041890:	681b      	ldr	r3, [r3, #0]
10041892:	685b      	ldr	r3, [r3, #4]
10041894:	4a15      	ldr	r2, [pc, #84]	@ (100418ec <UART_AdvFeatureConfig+0x160>)
10041896:	4013      	ands	r3, r2
10041898:	0019      	movs	r1, r3
1004189a:	687b      	ldr	r3, [r7, #4]
1004189c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004189e:	687b      	ldr	r3, [r7, #4]
100418a0:	681b      	ldr	r3, [r3, #0]
100418a2:	430a      	orrs	r2, r1
100418a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
100418a6:	687b      	ldr	r3, [r7, #4]
100418a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100418aa:	2280      	movs	r2, #128	@ 0x80
100418ac:	4013      	ands	r3, r2
100418ae:	d00b      	beq.n	100418c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
100418b0:	687b      	ldr	r3, [r7, #4]
100418b2:	681b      	ldr	r3, [r3, #0]
100418b4:	685b      	ldr	r3, [r3, #4]
100418b6:	4a0e      	ldr	r2, [pc, #56]	@ (100418f0 <UART_AdvFeatureConfig+0x164>)
100418b8:	4013      	ands	r3, r2
100418ba:	0019      	movs	r1, r3
100418bc:	687b      	ldr	r3, [r7, #4]
100418be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
100418c0:	687b      	ldr	r3, [r7, #4]
100418c2:	681b      	ldr	r3, [r3, #0]
100418c4:	430a      	orrs	r2, r1
100418c6:	605a      	str	r2, [r3, #4]
  }
}
100418c8:	46c0      	nop			@ (mov r8, r8)
100418ca:	46bd      	mov	sp, r7
100418cc:	b002      	add	sp, #8
100418ce:	bd80      	pop	{r7, pc}
100418d0:	ffff7fff 	.word	0xffff7fff
100418d4:	fffdffff 	.word	0xfffdffff
100418d8:	fffeffff 	.word	0xfffeffff
100418dc:	fffbffff 	.word	0xfffbffff
100418e0:	ffffefff 	.word	0xffffefff
100418e4:	ffffdfff 	.word	0xffffdfff
100418e8:	ffefffff 	.word	0xffefffff
100418ec:	ff9fffff 	.word	0xff9fffff
100418f0:	fff7ffff 	.word	0xfff7ffff

100418f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
100418f4:	b580      	push	{r7, lr}
100418f6:	b092      	sub	sp, #72	@ 0x48
100418f8:	af02      	add	r7, sp, #8
100418fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
100418fc:	687b      	ldr	r3, [r7, #4]
100418fe:	2290      	movs	r2, #144	@ 0x90
10041900:	2100      	movs	r1, #0
10041902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10041904:	f7ff f99e 	bl	10040c44 <HAL_GetTick>
10041908:	0003      	movs	r3, r0
1004190a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004190c:	687b      	ldr	r3, [r7, #4]
1004190e:	681b      	ldr	r3, [r3, #0]
10041910:	681b      	ldr	r3, [r3, #0]
10041912:	2208      	movs	r2, #8
10041914:	4013      	ands	r3, r2
10041916:	2b08      	cmp	r3, #8
10041918:	d12d      	bne.n	10041976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004191a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004191c:	2280      	movs	r2, #128	@ 0x80
1004191e:	0391      	lsls	r1, r2, #14
10041920:	6878      	ldr	r0, [r7, #4]
10041922:	4a47      	ldr	r2, [pc, #284]	@ (10041a40 <UART_CheckIdleState+0x14c>)
10041924:	9200      	str	r2, [sp, #0]
10041926:	2200      	movs	r2, #0
10041928:	f000 f88e 	bl	10041a48 <UART_WaitOnFlagUntilTimeout>
1004192c:	1e03      	subs	r3, r0, #0
1004192e:	d022      	beq.n	10041976 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10041930:	f3ef 8310 	mrs	r3, PRIMASK
10041934:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10041936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10041938:	63bb      	str	r3, [r7, #56]	@ 0x38
1004193a:	2301      	movs	r3, #1
1004193c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004193e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10041940:	f383 8810 	msr	PRIMASK, r3
}
10041944:	46c0      	nop			@ (mov r8, r8)
10041946:	687b      	ldr	r3, [r7, #4]
10041948:	681b      	ldr	r3, [r3, #0]
1004194a:	681a      	ldr	r2, [r3, #0]
1004194c:	687b      	ldr	r3, [r7, #4]
1004194e:	681b      	ldr	r3, [r3, #0]
10041950:	2180      	movs	r1, #128	@ 0x80
10041952:	438a      	bics	r2, r1
10041954:	601a      	str	r2, [r3, #0]
10041956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10041958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004195c:	f383 8810 	msr	PRIMASK, r3
}
10041960:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10041962:	687b      	ldr	r3, [r7, #4]
10041964:	2288      	movs	r2, #136	@ 0x88
10041966:	2120      	movs	r1, #32
10041968:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004196a:	687b      	ldr	r3, [r7, #4]
1004196c:	2284      	movs	r2, #132	@ 0x84
1004196e:	2100      	movs	r1, #0
10041970:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10041972:	2303      	movs	r3, #3
10041974:	e060      	b.n	10041a38 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10041976:	687b      	ldr	r3, [r7, #4]
10041978:	681b      	ldr	r3, [r3, #0]
1004197a:	681b      	ldr	r3, [r3, #0]
1004197c:	2204      	movs	r2, #4
1004197e:	4013      	ands	r3, r2
10041980:	2b04      	cmp	r3, #4
10041982:	d146      	bne.n	10041a12 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10041984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10041986:	2280      	movs	r2, #128	@ 0x80
10041988:	03d1      	lsls	r1, r2, #15
1004198a:	6878      	ldr	r0, [r7, #4]
1004198c:	4a2c      	ldr	r2, [pc, #176]	@ (10041a40 <UART_CheckIdleState+0x14c>)
1004198e:	9200      	str	r2, [sp, #0]
10041990:	2200      	movs	r2, #0
10041992:	f000 f859 	bl	10041a48 <UART_WaitOnFlagUntilTimeout>
10041996:	1e03      	subs	r3, r0, #0
10041998:	d03b      	beq.n	10041a12 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004199a:	f3ef 8310 	mrs	r3, PRIMASK
1004199e:	60fb      	str	r3, [r7, #12]
  return(result);
100419a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100419a2:	637b      	str	r3, [r7, #52]	@ 0x34
100419a4:	2301      	movs	r3, #1
100419a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100419a8:	693b      	ldr	r3, [r7, #16]
100419aa:	f383 8810 	msr	PRIMASK, r3
}
100419ae:	46c0      	nop			@ (mov r8, r8)
100419b0:	687b      	ldr	r3, [r7, #4]
100419b2:	681b      	ldr	r3, [r3, #0]
100419b4:	681a      	ldr	r2, [r3, #0]
100419b6:	687b      	ldr	r3, [r7, #4]
100419b8:	681b      	ldr	r3, [r3, #0]
100419ba:	4922      	ldr	r1, [pc, #136]	@ (10041a44 <UART_CheckIdleState+0x150>)
100419bc:	400a      	ands	r2, r1
100419be:	601a      	str	r2, [r3, #0]
100419c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100419c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100419c4:	697b      	ldr	r3, [r7, #20]
100419c6:	f383 8810 	msr	PRIMASK, r3
}
100419ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100419cc:	f3ef 8310 	mrs	r3, PRIMASK
100419d0:	61bb      	str	r3, [r7, #24]
  return(result);
100419d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
100419d4:	633b      	str	r3, [r7, #48]	@ 0x30
100419d6:	2301      	movs	r3, #1
100419d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100419da:	69fb      	ldr	r3, [r7, #28]
100419dc:	f383 8810 	msr	PRIMASK, r3
}
100419e0:	46c0      	nop			@ (mov r8, r8)
100419e2:	687b      	ldr	r3, [r7, #4]
100419e4:	681b      	ldr	r3, [r3, #0]
100419e6:	689a      	ldr	r2, [r3, #8]
100419e8:	687b      	ldr	r3, [r7, #4]
100419ea:	681b      	ldr	r3, [r3, #0]
100419ec:	2101      	movs	r1, #1
100419ee:	438a      	bics	r2, r1
100419f0:	609a      	str	r2, [r3, #8]
100419f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100419f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100419f6:	6a3b      	ldr	r3, [r7, #32]
100419f8:	f383 8810 	msr	PRIMASK, r3
}
100419fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
100419fe:	687b      	ldr	r3, [r7, #4]
10041a00:	228c      	movs	r2, #140	@ 0x8c
10041a02:	2120      	movs	r1, #32
10041a04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10041a06:	687b      	ldr	r3, [r7, #4]
10041a08:	2284      	movs	r2, #132	@ 0x84
10041a0a:	2100      	movs	r1, #0
10041a0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10041a0e:	2303      	movs	r3, #3
10041a10:	e012      	b.n	10041a38 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10041a12:	687b      	ldr	r3, [r7, #4]
10041a14:	2288      	movs	r2, #136	@ 0x88
10041a16:	2120      	movs	r1, #32
10041a18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10041a1a:	687b      	ldr	r3, [r7, #4]
10041a1c:	228c      	movs	r2, #140	@ 0x8c
10041a1e:	2120      	movs	r1, #32
10041a20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10041a22:	687b      	ldr	r3, [r7, #4]
10041a24:	2200      	movs	r2, #0
10041a26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10041a28:	687b      	ldr	r3, [r7, #4]
10041a2a:	2200      	movs	r2, #0
10041a2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10041a2e:	687b      	ldr	r3, [r7, #4]
10041a30:	2284      	movs	r2, #132	@ 0x84
10041a32:	2100      	movs	r1, #0
10041a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10041a36:	2300      	movs	r3, #0
}
10041a38:	0018      	movs	r0, r3
10041a3a:	46bd      	mov	sp, r7
10041a3c:	b010      	add	sp, #64	@ 0x40
10041a3e:	bd80      	pop	{r7, pc}
10041a40:	01ffffff 	.word	0x01ffffff
10041a44:	fffffedf 	.word	0xfffffedf

10041a48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10041a48:	b580      	push	{r7, lr}
10041a4a:	b084      	sub	sp, #16
10041a4c:	af00      	add	r7, sp, #0
10041a4e:	60f8      	str	r0, [r7, #12]
10041a50:	60b9      	str	r1, [r7, #8]
10041a52:	603b      	str	r3, [r7, #0]
10041a54:	1dfb      	adds	r3, r7, #7
10041a56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10041a58:	e051      	b.n	10041afe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10041a5a:	69bb      	ldr	r3, [r7, #24]
10041a5c:	3301      	adds	r3, #1
10041a5e:	d04e      	beq.n	10041afe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10041a60:	f7ff f8f0 	bl	10040c44 <HAL_GetTick>
10041a64:	0002      	movs	r2, r0
10041a66:	683b      	ldr	r3, [r7, #0]
10041a68:	1ad3      	subs	r3, r2, r3
10041a6a:	69ba      	ldr	r2, [r7, #24]
10041a6c:	429a      	cmp	r2, r3
10041a6e:	d302      	bcc.n	10041a76 <UART_WaitOnFlagUntilTimeout+0x2e>
10041a70:	69bb      	ldr	r3, [r7, #24]
10041a72:	2b00      	cmp	r3, #0
10041a74:	d101      	bne.n	10041a7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10041a76:	2303      	movs	r3, #3
10041a78:	e051      	b.n	10041b1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10041a7a:	68fb      	ldr	r3, [r7, #12]
10041a7c:	681b      	ldr	r3, [r3, #0]
10041a7e:	681b      	ldr	r3, [r3, #0]
10041a80:	2204      	movs	r2, #4
10041a82:	4013      	ands	r3, r2
10041a84:	d03b      	beq.n	10041afe <UART_WaitOnFlagUntilTimeout+0xb6>
10041a86:	68bb      	ldr	r3, [r7, #8]
10041a88:	2b80      	cmp	r3, #128	@ 0x80
10041a8a:	d038      	beq.n	10041afe <UART_WaitOnFlagUntilTimeout+0xb6>
10041a8c:	68bb      	ldr	r3, [r7, #8]
10041a8e:	2b40      	cmp	r3, #64	@ 0x40
10041a90:	d035      	beq.n	10041afe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10041a92:	68fb      	ldr	r3, [r7, #12]
10041a94:	681b      	ldr	r3, [r3, #0]
10041a96:	69db      	ldr	r3, [r3, #28]
10041a98:	2208      	movs	r2, #8
10041a9a:	4013      	ands	r3, r2
10041a9c:	2b08      	cmp	r3, #8
10041a9e:	d111      	bne.n	10041ac4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10041aa0:	68fb      	ldr	r3, [r7, #12]
10041aa2:	681b      	ldr	r3, [r3, #0]
10041aa4:	2208      	movs	r2, #8
10041aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10041aa8:	68fb      	ldr	r3, [r7, #12]
10041aaa:	0018      	movs	r0, r3
10041aac:	f000 f83c 	bl	10041b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10041ab0:	68fb      	ldr	r3, [r7, #12]
10041ab2:	2290      	movs	r2, #144	@ 0x90
10041ab4:	2108      	movs	r1, #8
10041ab6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10041ab8:	68fb      	ldr	r3, [r7, #12]
10041aba:	2284      	movs	r2, #132	@ 0x84
10041abc:	2100      	movs	r1, #0
10041abe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10041ac0:	2301      	movs	r3, #1
10041ac2:	e02c      	b.n	10041b1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10041ac4:	68fb      	ldr	r3, [r7, #12]
10041ac6:	681b      	ldr	r3, [r3, #0]
10041ac8:	69da      	ldr	r2, [r3, #28]
10041aca:	2380      	movs	r3, #128	@ 0x80
10041acc:	011b      	lsls	r3, r3, #4
10041ace:	401a      	ands	r2, r3
10041ad0:	2380      	movs	r3, #128	@ 0x80
10041ad2:	011b      	lsls	r3, r3, #4
10041ad4:	429a      	cmp	r2, r3
10041ad6:	d112      	bne.n	10041afe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10041ad8:	68fb      	ldr	r3, [r7, #12]
10041ada:	681b      	ldr	r3, [r3, #0]
10041adc:	2280      	movs	r2, #128	@ 0x80
10041ade:	0112      	lsls	r2, r2, #4
10041ae0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10041ae2:	68fb      	ldr	r3, [r7, #12]
10041ae4:	0018      	movs	r0, r3
10041ae6:	f000 f81f 	bl	10041b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10041aea:	68fb      	ldr	r3, [r7, #12]
10041aec:	2290      	movs	r2, #144	@ 0x90
10041aee:	2120      	movs	r1, #32
10041af0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10041af2:	68fb      	ldr	r3, [r7, #12]
10041af4:	2284      	movs	r2, #132	@ 0x84
10041af6:	2100      	movs	r1, #0
10041af8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
10041afa:	2303      	movs	r3, #3
10041afc:	e00f      	b.n	10041b1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10041afe:	68fb      	ldr	r3, [r7, #12]
10041b00:	681b      	ldr	r3, [r3, #0]
10041b02:	69db      	ldr	r3, [r3, #28]
10041b04:	68ba      	ldr	r2, [r7, #8]
10041b06:	4013      	ands	r3, r2
10041b08:	68ba      	ldr	r2, [r7, #8]
10041b0a:	1ad3      	subs	r3, r2, r3
10041b0c:	425a      	negs	r2, r3
10041b0e:	4153      	adcs	r3, r2
10041b10:	b2db      	uxtb	r3, r3
10041b12:	001a      	movs	r2, r3
10041b14:	1dfb      	adds	r3, r7, #7
10041b16:	781b      	ldrb	r3, [r3, #0]
10041b18:	429a      	cmp	r2, r3
10041b1a:	d09e      	beq.n	10041a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10041b1c:	2300      	movs	r3, #0
}
10041b1e:	0018      	movs	r0, r3
10041b20:	46bd      	mov	sp, r7
10041b22:	b004      	add	sp, #16
10041b24:	bd80      	pop	{r7, pc}
	...

10041b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10041b28:	b580      	push	{r7, lr}
10041b2a:	b08e      	sub	sp, #56	@ 0x38
10041b2c:	af00      	add	r7, sp, #0
10041b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10041b30:	f3ef 8310 	mrs	r3, PRIMASK
10041b34:	617b      	str	r3, [r7, #20]
  return(result);
10041b36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10041b38:	637b      	str	r3, [r7, #52]	@ 0x34
10041b3a:	2301      	movs	r3, #1
10041b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10041b3e:	69bb      	ldr	r3, [r7, #24]
10041b40:	f383 8810 	msr	PRIMASK, r3
}
10041b44:	46c0      	nop			@ (mov r8, r8)
10041b46:	687b      	ldr	r3, [r7, #4]
10041b48:	681b      	ldr	r3, [r3, #0]
10041b4a:	681a      	ldr	r2, [r3, #0]
10041b4c:	687b      	ldr	r3, [r7, #4]
10041b4e:	681b      	ldr	r3, [r3, #0]
10041b50:	4926      	ldr	r1, [pc, #152]	@ (10041bec <UART_EndRxTransfer+0xc4>)
10041b52:	400a      	ands	r2, r1
10041b54:	601a      	str	r2, [r3, #0]
10041b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10041b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10041b5a:	69fb      	ldr	r3, [r7, #28]
10041b5c:	f383 8810 	msr	PRIMASK, r3
}
10041b60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10041b62:	f3ef 8310 	mrs	r3, PRIMASK
10041b66:	623b      	str	r3, [r7, #32]
  return(result);
10041b68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10041b6a:	633b      	str	r3, [r7, #48]	@ 0x30
10041b6c:	2301      	movs	r3, #1
10041b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10041b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041b72:	f383 8810 	msr	PRIMASK, r3
}
10041b76:	46c0      	nop			@ (mov r8, r8)
10041b78:	687b      	ldr	r3, [r7, #4]
10041b7a:	681b      	ldr	r3, [r3, #0]
10041b7c:	689a      	ldr	r2, [r3, #8]
10041b7e:	687b      	ldr	r3, [r7, #4]
10041b80:	681b      	ldr	r3, [r3, #0]
10041b82:	491b      	ldr	r1, [pc, #108]	@ (10041bf0 <UART_EndRxTransfer+0xc8>)
10041b84:	400a      	ands	r2, r1
10041b86:	609a      	str	r2, [r3, #8]
10041b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10041b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10041b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10041b8e:	f383 8810 	msr	PRIMASK, r3
}
10041b92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10041b94:	687b      	ldr	r3, [r7, #4]
10041b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10041b98:	2b01      	cmp	r3, #1
10041b9a:	d118      	bne.n	10041bce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10041b9c:	f3ef 8310 	mrs	r3, PRIMASK
10041ba0:	60bb      	str	r3, [r7, #8]
  return(result);
10041ba2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10041ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
10041ba6:	2301      	movs	r3, #1
10041ba8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10041baa:	68fb      	ldr	r3, [r7, #12]
10041bac:	f383 8810 	msr	PRIMASK, r3
}
10041bb0:	46c0      	nop			@ (mov r8, r8)
10041bb2:	687b      	ldr	r3, [r7, #4]
10041bb4:	681b      	ldr	r3, [r3, #0]
10041bb6:	681a      	ldr	r2, [r3, #0]
10041bb8:	687b      	ldr	r3, [r7, #4]
10041bba:	681b      	ldr	r3, [r3, #0]
10041bbc:	2110      	movs	r1, #16
10041bbe:	438a      	bics	r2, r1
10041bc0:	601a      	str	r2, [r3, #0]
10041bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10041bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10041bc6:	693b      	ldr	r3, [r7, #16]
10041bc8:	f383 8810 	msr	PRIMASK, r3
}
10041bcc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10041bce:	687b      	ldr	r3, [r7, #4]
10041bd0:	228c      	movs	r2, #140	@ 0x8c
10041bd2:	2120      	movs	r1, #32
10041bd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10041bd6:	687b      	ldr	r3, [r7, #4]
10041bd8:	2200      	movs	r2, #0
10041bda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10041bdc:	687b      	ldr	r3, [r7, #4]
10041bde:	2200      	movs	r2, #0
10041be0:	675a      	str	r2, [r3, #116]	@ 0x74
}
10041be2:	46c0      	nop			@ (mov r8, r8)
10041be4:	46bd      	mov	sp, r7
10041be6:	b00e      	add	sp, #56	@ 0x38
10041be8:	bd80      	pop	{r7, pc}
10041bea:	46c0      	nop			@ (mov r8, r8)
10041bec:	fffffedf 	.word	0xfffffedf
10041bf0:	effffffe 	.word	0xeffffffe

10041bf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10041bf4:	b580      	push	{r7, lr}
10041bf6:	b084      	sub	sp, #16
10041bf8:	af00      	add	r7, sp, #0
10041bfa:	6078      	str	r0, [r7, #4]
10041bfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10041bfe:	687b      	ldr	r3, [r7, #4]
10041c00:	2284      	movs	r2, #132	@ 0x84
10041c02:	5c9b      	ldrb	r3, [r3, r2]
10041c04:	2b01      	cmp	r3, #1
10041c06:	d101      	bne.n	10041c0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
10041c08:	2302      	movs	r3, #2
10041c0a:	e02e      	b.n	10041c6a <HAL_UARTEx_SetTxFifoThreshold+0x76>
10041c0c:	687b      	ldr	r3, [r7, #4]
10041c0e:	2284      	movs	r2, #132	@ 0x84
10041c10:	2101      	movs	r1, #1
10041c12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10041c14:	687b      	ldr	r3, [r7, #4]
10041c16:	2288      	movs	r2, #136	@ 0x88
10041c18:	2124      	movs	r1, #36	@ 0x24
10041c1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10041c1c:	687b      	ldr	r3, [r7, #4]
10041c1e:	681b      	ldr	r3, [r3, #0]
10041c20:	681b      	ldr	r3, [r3, #0]
10041c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10041c24:	687b      	ldr	r3, [r7, #4]
10041c26:	681b      	ldr	r3, [r3, #0]
10041c28:	681a      	ldr	r2, [r3, #0]
10041c2a:	687b      	ldr	r3, [r7, #4]
10041c2c:	681b      	ldr	r3, [r3, #0]
10041c2e:	2101      	movs	r1, #1
10041c30:	438a      	bics	r2, r1
10041c32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10041c34:	687b      	ldr	r3, [r7, #4]
10041c36:	681b      	ldr	r3, [r3, #0]
10041c38:	689b      	ldr	r3, [r3, #8]
10041c3a:	00db      	lsls	r3, r3, #3
10041c3c:	08d9      	lsrs	r1, r3, #3
10041c3e:	687b      	ldr	r3, [r7, #4]
10041c40:	681b      	ldr	r3, [r3, #0]
10041c42:	683a      	ldr	r2, [r7, #0]
10041c44:	430a      	orrs	r2, r1
10041c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10041c48:	687b      	ldr	r3, [r7, #4]
10041c4a:	0018      	movs	r0, r3
10041c4c:	f000 f854 	bl	10041cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10041c50:	687b      	ldr	r3, [r7, #4]
10041c52:	681b      	ldr	r3, [r3, #0]
10041c54:	68fa      	ldr	r2, [r7, #12]
10041c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10041c58:	687b      	ldr	r3, [r7, #4]
10041c5a:	2288      	movs	r2, #136	@ 0x88
10041c5c:	2120      	movs	r1, #32
10041c5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10041c60:	687b      	ldr	r3, [r7, #4]
10041c62:	2284      	movs	r2, #132	@ 0x84
10041c64:	2100      	movs	r1, #0
10041c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10041c68:	2300      	movs	r3, #0
}
10041c6a:	0018      	movs	r0, r3
10041c6c:	46bd      	mov	sp, r7
10041c6e:	b004      	add	sp, #16
10041c70:	bd80      	pop	{r7, pc}
	...

10041c74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10041c74:	b580      	push	{r7, lr}
10041c76:	b084      	sub	sp, #16
10041c78:	af00      	add	r7, sp, #0
10041c7a:	6078      	str	r0, [r7, #4]
10041c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10041c7e:	687b      	ldr	r3, [r7, #4]
10041c80:	2284      	movs	r2, #132	@ 0x84
10041c82:	5c9b      	ldrb	r3, [r3, r2]
10041c84:	2b01      	cmp	r3, #1
10041c86:	d101      	bne.n	10041c8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
10041c88:	2302      	movs	r3, #2
10041c8a:	e02f      	b.n	10041cec <HAL_UARTEx_SetRxFifoThreshold+0x78>
10041c8c:	687b      	ldr	r3, [r7, #4]
10041c8e:	2284      	movs	r2, #132	@ 0x84
10041c90:	2101      	movs	r1, #1
10041c92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10041c94:	687b      	ldr	r3, [r7, #4]
10041c96:	2288      	movs	r2, #136	@ 0x88
10041c98:	2124      	movs	r1, #36	@ 0x24
10041c9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10041c9c:	687b      	ldr	r3, [r7, #4]
10041c9e:	681b      	ldr	r3, [r3, #0]
10041ca0:	681b      	ldr	r3, [r3, #0]
10041ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10041ca4:	687b      	ldr	r3, [r7, #4]
10041ca6:	681b      	ldr	r3, [r3, #0]
10041ca8:	681a      	ldr	r2, [r3, #0]
10041caa:	687b      	ldr	r3, [r7, #4]
10041cac:	681b      	ldr	r3, [r3, #0]
10041cae:	2101      	movs	r1, #1
10041cb0:	438a      	bics	r2, r1
10041cb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10041cb4:	687b      	ldr	r3, [r7, #4]
10041cb6:	681b      	ldr	r3, [r3, #0]
10041cb8:	689b      	ldr	r3, [r3, #8]
10041cba:	4a0e      	ldr	r2, [pc, #56]	@ (10041cf4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10041cbc:	4013      	ands	r3, r2
10041cbe:	0019      	movs	r1, r3
10041cc0:	687b      	ldr	r3, [r7, #4]
10041cc2:	681b      	ldr	r3, [r3, #0]
10041cc4:	683a      	ldr	r2, [r7, #0]
10041cc6:	430a      	orrs	r2, r1
10041cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10041cca:	687b      	ldr	r3, [r7, #4]
10041ccc:	0018      	movs	r0, r3
10041cce:	f000 f813 	bl	10041cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10041cd2:	687b      	ldr	r3, [r7, #4]
10041cd4:	681b      	ldr	r3, [r3, #0]
10041cd6:	68fa      	ldr	r2, [r7, #12]
10041cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10041cda:	687b      	ldr	r3, [r7, #4]
10041cdc:	2288      	movs	r2, #136	@ 0x88
10041cde:	2120      	movs	r1, #32
10041ce0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10041ce2:	687b      	ldr	r3, [r7, #4]
10041ce4:	2284      	movs	r2, #132	@ 0x84
10041ce6:	2100      	movs	r1, #0
10041ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10041cea:	2300      	movs	r3, #0
}
10041cec:	0018      	movs	r0, r3
10041cee:	46bd      	mov	sp, r7
10041cf0:	b004      	add	sp, #16
10041cf2:	bd80      	pop	{r7, pc}
10041cf4:	f1ffffff 	.word	0xf1ffffff

10041cf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10041cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
10041cfa:	b085      	sub	sp, #20
10041cfc:	af00      	add	r7, sp, #0
10041cfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10041d00:	687b      	ldr	r3, [r7, #4]
10041d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10041d04:	2b00      	cmp	r3, #0
10041d06:	d108      	bne.n	10041d1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
10041d08:	687b      	ldr	r3, [r7, #4]
10041d0a:	226a      	movs	r2, #106	@ 0x6a
10041d0c:	2101      	movs	r1, #1
10041d0e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10041d10:	687b      	ldr	r3, [r7, #4]
10041d12:	2268      	movs	r2, #104	@ 0x68
10041d14:	2101      	movs	r1, #1
10041d16:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10041d18:	e043      	b.n	10041da2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
10041d1a:	260f      	movs	r6, #15
10041d1c:	19bb      	adds	r3, r7, r6
10041d1e:	2208      	movs	r2, #8
10041d20:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10041d22:	200e      	movs	r0, #14
10041d24:	183b      	adds	r3, r7, r0
10041d26:	2208      	movs	r2, #8
10041d28:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10041d2a:	687b      	ldr	r3, [r7, #4]
10041d2c:	681b      	ldr	r3, [r3, #0]
10041d2e:	689b      	ldr	r3, [r3, #8]
10041d30:	0e5b      	lsrs	r3, r3, #25
10041d32:	b2da      	uxtb	r2, r3
10041d34:	240d      	movs	r4, #13
10041d36:	193b      	adds	r3, r7, r4
10041d38:	2107      	movs	r1, #7
10041d3a:	400a      	ands	r2, r1
10041d3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10041d3e:	687b      	ldr	r3, [r7, #4]
10041d40:	681b      	ldr	r3, [r3, #0]
10041d42:	689b      	ldr	r3, [r3, #8]
10041d44:	0f5b      	lsrs	r3, r3, #29
10041d46:	b2da      	uxtb	r2, r3
10041d48:	250c      	movs	r5, #12
10041d4a:	197b      	adds	r3, r7, r5
10041d4c:	2107      	movs	r1, #7
10041d4e:	400a      	ands	r2, r1
10041d50:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10041d52:	183b      	adds	r3, r7, r0
10041d54:	781b      	ldrb	r3, [r3, #0]
10041d56:	197a      	adds	r2, r7, r5
10041d58:	7812      	ldrb	r2, [r2, #0]
10041d5a:	4914      	ldr	r1, [pc, #80]	@ (10041dac <UARTEx_SetNbDataToProcess+0xb4>)
10041d5c:	5c8a      	ldrb	r2, [r1, r2]
10041d5e:	435a      	muls	r2, r3
10041d60:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
10041d62:	197b      	adds	r3, r7, r5
10041d64:	781b      	ldrb	r3, [r3, #0]
10041d66:	4a12      	ldr	r2, [pc, #72]	@ (10041db0 <UARTEx_SetNbDataToProcess+0xb8>)
10041d68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10041d6a:	0019      	movs	r1, r3
10041d6c:	f7fe fa32 	bl	100401d4 <__divsi3>
10041d70:	0003      	movs	r3, r0
10041d72:	b299      	uxth	r1, r3
10041d74:	687b      	ldr	r3, [r7, #4]
10041d76:	226a      	movs	r2, #106	@ 0x6a
10041d78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10041d7a:	19bb      	adds	r3, r7, r6
10041d7c:	781b      	ldrb	r3, [r3, #0]
10041d7e:	193a      	adds	r2, r7, r4
10041d80:	7812      	ldrb	r2, [r2, #0]
10041d82:	490a      	ldr	r1, [pc, #40]	@ (10041dac <UARTEx_SetNbDataToProcess+0xb4>)
10041d84:	5c8a      	ldrb	r2, [r1, r2]
10041d86:	435a      	muls	r2, r3
10041d88:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
10041d8a:	193b      	adds	r3, r7, r4
10041d8c:	781b      	ldrb	r3, [r3, #0]
10041d8e:	4a08      	ldr	r2, [pc, #32]	@ (10041db0 <UARTEx_SetNbDataToProcess+0xb8>)
10041d90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10041d92:	0019      	movs	r1, r3
10041d94:	f7fe fa1e 	bl	100401d4 <__divsi3>
10041d98:	0003      	movs	r3, r0
10041d9a:	b299      	uxth	r1, r3
10041d9c:	687b      	ldr	r3, [r7, #4]
10041d9e:	2268      	movs	r2, #104	@ 0x68
10041da0:	5299      	strh	r1, [r3, r2]
}
10041da2:	46c0      	nop			@ (mov r8, r8)
10041da4:	46bd      	mov	sp, r7
10041da6:	b005      	add	sp, #20
10041da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041daa:	46c0      	nop			@ (mov r8, r8)
10041dac:	10041e68 	.word	0x10041e68
10041db0:	10041e70 	.word	0x10041e70

10041db4 <memset>:
10041db4:	0003      	movs	r3, r0
10041db6:	1882      	adds	r2, r0, r2
10041db8:	4293      	cmp	r3, r2
10041dba:	d100      	bne.n	10041dbe <memset+0xa>
10041dbc:	4770      	bx	lr
10041dbe:	7019      	strb	r1, [r3, #0]
10041dc0:	3301      	adds	r3, #1
10041dc2:	e7f9      	b.n	10041db8 <memset+0x4>

Disassembly of section .init:

10041dc4 <_init>:
10041dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10041dc6:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10041dc8 <_fini>:
10041dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10041dca:	46c0      	nop			@ (mov r8, r8)
